1
00:00:02,780 --> 00:00:07,830
thank you very much

2
00:00:05,250 --> 00:00:11,129
so thank you all for this opportunity -

3
00:00:07,830 --> 00:00:14,759
I really appreciate this so real quick

4
00:00:11,130 --> 00:00:15,960
on Who I am I have a tendency to kind of

5
00:00:14,759 --> 00:00:18,600
approach this whole thing as an academic

6
00:00:15,960 --> 00:00:21,720
so I really apologize in advance to

7
00:00:18,600 --> 00:00:24,000
everybody here but I do believe in

8
00:00:21,720 --> 00:00:26,490
learning by doing so I'm an active

9
00:00:24,000 --> 00:00:28,500
member of the team John Ripper password

10
00:00:26,490 --> 00:00:31,259
cracking team and I compete in all the

11
00:00:28,500 --> 00:00:33,750
competitions that we have I also really

12
00:00:31,260 --> 00:00:35,390
enjoys more standard you know pentesting

13
00:00:33,750 --> 00:00:37,620
red teaming types of exercises as well

14
00:00:35,390 --> 00:00:40,200
so I compete in a lot of different

15
00:00:37,620 --> 00:00:41,968
capture to flag events as well probably

16
00:00:40,200 --> 00:00:43,590
the top one that I did though was up my

17
00:00:41,969 --> 00:00:45,059
teammate into the DEF CON capture flag

18
00:00:43,590 --> 00:00:46,860
finals which was a real surreal

19
00:00:45,059 --> 00:00:48,629
experience because I don't know if

20
00:00:46,860 --> 00:00:50,430
you've been to Vegas here but basically

21
00:00:48,629 --> 00:00:51,718
they put you all in the middle of a room

22
00:00:50,430 --> 00:00:53,070
kind of like a zoo or something like

23
00:00:51,719 --> 00:00:54,329
that there and then all the people come

24
00:00:53,070 --> 00:00:55,770
around point at you as you're trying to

25
00:00:54,329 --> 00:01:00,480
Google you know you know command-line

26
00:00:55,770 --> 00:01:03,690
arguments and stuff like that so my day

27
00:01:00,480 --> 00:01:04,470
job this is this is actually a hobby of

28
00:01:03,690 --> 00:01:06,298
mine

29
00:01:04,470 --> 00:01:08,820
so I don't really do any password

30
00:01:06,299 --> 00:01:09,840
cracking at all and so once again I had

31
00:01:08,820 --> 00:01:11,339
to put a little disclaimer there saying

32
00:01:09,840 --> 00:01:12,920
that you know this is not my employer

33
00:01:11,340 --> 00:01:15,630
this is me this ain't ever saying here

34
00:01:12,920 --> 00:01:17,280
dude in my day job though I'm focusing

35
00:01:15,630 --> 00:01:18,509
more on medical device security and

36
00:01:17,280 --> 00:01:21,630
that's just a really interesting field

37
00:01:18,509 --> 00:01:23,159
and I really love it too because you

38
00:01:21,630 --> 00:01:24,479
know a lot of times you have a job it's

39
00:01:23,159 --> 00:01:26,250
like okay you know are we really making

40
00:01:24,479 --> 00:01:27,479
the world a better place and it's really

41
00:01:26,250 --> 00:01:28,890
nice to be able to kind of do this type

42
00:01:27,479 --> 00:01:30,030
of work here and say nope no we're

43
00:01:28,890 --> 00:01:33,930
actually really preparing to protect

44
00:01:30,030 --> 00:01:35,250
people's lives here now if you get

45
00:01:33,930 --> 00:01:37,110
outside of work and you'll path from

46
00:01:35,250 --> 00:01:39,119
hacking stuff like that there - I really

47
00:01:37,110 --> 00:01:40,920
do enjoy backpacking and hiking and so

48
00:01:39,119 --> 00:01:42,899
about four years ago I also took off

49
00:01:40,920 --> 00:01:44,430
seven months from my job and I ended up

50
00:01:42,899 --> 00:01:45,960
through hiking the Appalachian Trail so

51
00:01:44,430 --> 00:01:48,299
I started in Georgia and I finished the

52
00:01:45,960 --> 00:01:49,890
Maine there so if you ever want to talk

53
00:01:48,299 --> 00:01:53,490
about hiking there and embracing the

54
00:01:49,890 --> 00:01:57,240
sock I will definitely be able to talk

55
00:01:53,490 --> 00:01:59,070
about that at length so probably the

56
00:01:57,240 --> 00:02:01,408
really first question that people have

57
00:01:59,070 --> 00:02:03,898
though is when we say you know what is

58
00:02:01,409 --> 00:02:05,880
pcfg path or cracking you know they

59
00:02:03,899 --> 00:02:08,399
asked me what is that pcfg stand for

60
00:02:05,880 --> 00:02:11,280
there so I mean the technical you know

61
00:02:08,399 --> 00:02:12,510
that was - a little faster so the

62
00:02:11,280 --> 00:02:13,720
technical answer is yes the

63
00:02:12,510 --> 00:02:15,940
probabilistic context-free

64
00:02:13,720 --> 00:02:17,770
hammer so if you're really into you know

65
00:02:15,940 --> 00:02:20,290
Syria with anima or you know you're a

66
00:02:17,770 --> 00:02:22,270
formal language nerd like you know maybe

67
00:02:20,290 --> 00:02:24,010
a few people back there this might

68
00:02:22,270 --> 00:02:25,570
actually mean something to you but for

69
00:02:24,010 --> 00:02:27,760
most people they see that name there and

70
00:02:25,570 --> 00:02:30,010
they're like oh gods mass I can't stand

71
00:02:27,760 --> 00:02:33,100
that and it's like you know whatever so

72
00:02:30,010 --> 00:02:35,620
I like my house I think that's awesome

73
00:02:33,100 --> 00:02:37,450
but basically I kept thinking that

74
00:02:35,620 --> 00:02:40,690
reaction dare so I decided I went ahead

75
00:02:37,450 --> 00:02:42,640
to go ahead and rename this so right now

76
00:02:40,690 --> 00:02:45,130
it actually stands for pretty cool fuzzy

77
00:02:42,640 --> 00:02:46,329
buzzer Gesser there okay and by the way

78
00:02:45,130 --> 00:02:47,500
this is my favorite slide I've ever made

79
00:02:46,330 --> 00:02:51,670
in my life here so it's all downhill

80
00:02:47,500 --> 00:02:54,040
from now so but this is probably a

81
00:02:51,670 --> 00:02:56,290
better explanation of you know what

82
00:02:54,040 --> 00:02:58,329
we're actually doing here we're trying

83
00:02:56,290 --> 00:03:00,250
to do kind of fuzzy guessing on how to

84
00:02:58,330 --> 00:03:02,290
create these password guesses and

85
00:03:00,250 --> 00:03:04,510
another way of playing this here is that

86
00:03:02,290 --> 00:03:06,190
we're using machine learning and when I

87
00:03:04,510 --> 00:03:07,840
say machine learning I mean machine

88
00:03:06,190 --> 00:03:09,970
learning in the you know traditional

89
00:03:07,840 --> 00:03:11,200
sense of like a whole bunch of if-then

90
00:03:09,970 --> 00:03:13,060
statements

91
00:03:11,200 --> 00:03:14,260
so basically we're not using neural

92
00:03:13,060 --> 00:03:17,200
networks or anything else along those

93
00:03:14,260 --> 00:03:20,079
lines but what it this allows the Sidhu

94
00:03:17,200 --> 00:03:22,238
toe is we can take a train on these

95
00:03:20,080 --> 00:03:23,910
disclose password lists so you have a

96
00:03:22,239 --> 00:03:26,080
list of all these different passwords

97
00:03:23,910 --> 00:03:28,090
you use this tool in order to go ahead

98
00:03:26,080 --> 00:03:30,100
and parse these passwords and then it

99
00:03:28,090 --> 00:03:32,050
basically generates a probability model

100
00:03:30,100 --> 00:03:33,850
for how it expects people to create

101
00:03:32,050 --> 00:03:36,700
passwords based upon this training set

102
00:03:33,850 --> 00:03:38,320
and once you have this probability model

103
00:03:36,700 --> 00:03:40,720
what this really allows you to do is

104
00:03:38,320 --> 00:03:42,910
crack passwords the same way that we

105
00:03:40,720 --> 00:03:44,350
talk about cracking passwords because we

106
00:03:42,910 --> 00:03:45,730
all talk about oh yeah people have a

107
00:03:44,350 --> 00:03:48,400
tendency to use you know their names

108
00:03:45,730 --> 00:03:50,890
that are pets or you know you know

109
00:03:48,400 --> 00:03:54,040
family members or to use you know birth

110
00:03:50,890 --> 00:03:55,540
dates in their numbers they have tends

111
00:03:54,040 --> 00:03:59,798
to capitalize the first letter versus

112
00:03:55,540 --> 00:04:01,929
the last letter and we use sports teams

113
00:03:59,799 --> 00:04:04,239
and so you really want to go ahead and

114
00:04:01,930 --> 00:04:05,500
you know prioritize how you go ahead and

115
00:04:04,239 --> 00:04:07,239
incorporate that data in your cracking

116
00:04:05,500 --> 00:04:08,920
session but you also want to go ahead

117
00:04:07,239 --> 00:04:10,239
and try kind of the less you know likely

118
00:04:08,920 --> 00:04:11,559
things as well because cracking one two

119
00:04:10,239 --> 00:04:12,940
three four five six gets really boring

120
00:04:11,560 --> 00:04:14,920
really easy that's that's the easy one

121
00:04:12,940 --> 00:04:17,649
to do but you might want to go ahead and

122
00:04:14,920 --> 00:04:19,779
try like a really common word like a you

123
00:04:17,649 --> 00:04:21,488
know someone's football team but didn't

124
00:04:19,779 --> 00:04:23,349
try it much less likely you know mangly

125
00:04:21,488 --> 00:04:24,849
rule on that as well so trying to figure

126
00:04:23,349 --> 00:04:27,130
out how you go ahead and structure those

127
00:04:24,849 --> 00:04:27,400
different rules together is really kind

128
00:04:27,130 --> 00:04:32,770
of

129
00:04:27,400 --> 00:04:34,870
core aidid idea behind using PCF geez so

130
00:04:32,770 --> 00:04:37,330
the original version of this here was

131
00:04:34,870 --> 00:04:38,889
actually developed back in 2008 when I

132
00:04:37,330 --> 00:04:41,289
was a graduate student at Florida State

133
00:04:38,889 --> 00:04:43,060
University I had a really nice

134
00:04:41,289 --> 00:04:45,159
opportunity to be able to work in our II

135
00:04:43,060 --> 00:04:48,550
cry me Vesta gave technologies lab ESET

136
00:04:45,160 --> 00:04:50,800
lab and basically this was a funded and

137
00:04:48,550 --> 00:04:52,810
you know done end the research here for

138
00:04:50,800 --> 00:04:55,150
the National Institute of justice at the

139
00:04:52,810 --> 00:04:57,580
America and a national way collar crime

140
00:04:55,150 --> 00:04:58,870
center so the real goal here was to be

141
00:04:57,580 --> 00:05:00,070
able develop better tools for law

142
00:04:58,870 --> 00:05:01,900
enforcement to be able to crack

143
00:05:00,070 --> 00:05:03,599
passwords and there's still a lot of

144
00:05:01,900 --> 00:05:07,599
that focus there I would say as well

145
00:05:03,600 --> 00:05:09,850
with this now that was you know over

146
00:05:07,600 --> 00:05:12,039
eleven years ago so this tools been out

147
00:05:09,850 --> 00:05:13,330
in the wild for quite a while and you

148
00:05:12,039 --> 00:05:15,669
know published papers gives me you know

149
00:05:13,330 --> 00:05:16,750
I'm an academic so other people have

150
00:05:15,669 --> 00:05:19,330
gone ahead and develop their own tools

151
00:05:16,750 --> 00:05:21,910
as well so if you're interested in the

152
00:05:19,330 --> 00:05:24,580
actual you know Florida's FSU ESET lab

153
00:05:21,910 --> 00:05:26,169
program there that is pretty much only

154
00:05:24,580 --> 00:05:27,310
available for law enforcement but if

155
00:05:26,169 --> 00:05:29,919
you're involved with that there please

156
00:05:27,310 --> 00:05:33,099
go ahead and reach out to Sudhir Agarwal

157
00:05:29,919 --> 00:05:35,710
and he he will be able to help you out

158
00:05:33,099 --> 00:05:36,930
was that there for this talk though what

159
00:05:35,710 --> 00:05:39,250
I'm gonna do is I'm going to talk about

160
00:05:36,930 --> 00:05:40,990
these two different tool sets that I

161
00:05:39,250 --> 00:05:43,360
maintain currently right now and are

162
00:05:40,990 --> 00:05:44,740
available on github so whenever talk

163
00:05:43,360 --> 00:05:46,240
about this here this is really what I'm

164
00:05:44,740 --> 00:05:50,010
going to focus on but there's a lot of

165
00:05:46,240 --> 00:05:50,010
other cool implementations out there too

166
00:05:50,789 --> 00:05:55,960
so part of reason why I kind of want to

167
00:05:53,020 --> 00:05:57,250
give this talk though is because I guess

168
00:05:55,960 --> 00:05:59,549
released a new version it was just tool

169
00:05:57,250 --> 00:06:02,289
and for this I really have to blame pair

170
00:05:59,550 --> 00:06:03,370
because last year he was asking me like

171
00:06:02,289 --> 00:06:05,610
hey do you wanna go ahead and presented

172
00:06:03,370 --> 00:06:08,440
this passwords Khan and I was like

173
00:06:05,610 --> 00:06:10,060
Sweden's a far away a long ways you know

174
00:06:08,440 --> 00:06:11,680
and I haven't really done a lot because

175
00:06:10,060 --> 00:06:12,729
you know you haven't um you know

176
00:06:11,680 --> 00:06:14,440
research project they've been working on

177
00:06:12,729 --> 00:06:15,609
for a certain you know 11 years there

178
00:06:14,440 --> 00:06:17,590
are times that you work on it a lot and

179
00:06:15,610 --> 00:06:18,940
then there's a big period of time when

180
00:06:17,590 --> 00:06:22,780
you you don't want to watch Netflix or

181
00:06:18,940 --> 00:06:23,620
something like that so he was bugging me

182
00:06:22,780 --> 00:06:24,698
about this and he's like you know I

183
00:06:23,620 --> 00:06:26,050
really should go ahead and implement

184
00:06:24,699 --> 00:06:27,130
some new features maybe I can go ahead

185
00:06:26,050 --> 00:06:30,280
and release a new version before

186
00:06:27,130 --> 00:06:33,430
passwords Khan so you know my typical

187
00:06:30,280 --> 00:06:34,570
you know programming style here I did

188
00:06:33,430 --> 00:06:36,430
not release a new tool before last

189
00:06:34,570 --> 00:06:38,710
year's passwords Khan and I ended up

190
00:06:36,430 --> 00:06:40,470
having a huge case of feature creep

191
00:06:38,710 --> 00:06:41,940
where basically I started

192
00:06:40,470 --> 00:06:43,470
saying like all his whole code sucks

193
00:06:41,940 --> 00:06:45,240
like me those tearing it out I was like

194
00:06:43,470 --> 00:06:47,280
I had this new algorithm so it's put in

195
00:06:45,240 --> 00:06:49,530
the new stuff into it there and I ended

196
00:06:47,280 --> 00:06:53,070
up completely rewriting the toolset from

197
00:06:49,530 --> 00:06:54,299
scratch pretty much so I finally was

198
00:06:53,070 --> 00:06:58,710
able to release it about two months ago

199
00:06:54,300 --> 00:07:00,120
and so we're the the kind of focus on

200
00:06:58,710 --> 00:07:01,289
this here don't was I really wanted to

201
00:07:00,120 --> 00:07:03,690
go ahead and move this tool out of

202
00:07:01,290 --> 00:07:06,690
academia and make it more useful for

203
00:07:03,690 --> 00:07:08,400
real-world use cases there's a lot of

204
00:07:06,690 --> 00:07:09,960
new modeling features I want to add into

205
00:07:08,400 --> 00:07:12,120
this as well and I'll talk about few of

206
00:07:09,960 --> 00:07:13,739
them today and then I also want to be

207
00:07:12,120 --> 00:07:16,380
able to go ahead and some better support

208
00:07:13,740 --> 00:07:17,880
other cracking techniques as well so in

209
00:07:16,380 --> 00:07:19,800
case you didn't want to go ahead and use

210
00:07:17,880 --> 00:07:22,200
the you know the pcfg toolset itself I

211
00:07:19,800 --> 00:07:23,490
have all this probability data that I'm

212
00:07:22,200 --> 00:07:25,229
using for parsing these password

213
00:07:23,490 --> 00:07:26,580
datasets so it'd be really nice to be

214
00:07:25,230 --> 00:07:28,680
able to go ahead and incorporate this

215
00:07:26,580 --> 00:07:31,080
probability data in my more traditional

216
00:07:28,680 --> 00:07:34,010
word mangling rule rules that I will be

217
00:07:31,080 --> 00:07:36,060
doing for other cracking techniques

218
00:07:34,010 --> 00:07:37,950
another part reason why I kinda wanna do

219
00:07:36,060 --> 00:07:40,830
is talk to this is actually the github

220
00:07:37,950 --> 00:07:41,969
page I have a projects page on there to

221
00:07:40,830 --> 00:07:43,349
kind of detail so I'm currently working

222
00:07:41,970 --> 00:07:45,570
on if you ever want to go to it and

223
00:07:43,350 --> 00:07:48,030
pretty much the top one in my to-do list

224
00:07:45,570 --> 00:07:49,440
here is update pcfg documentation I

225
00:07:48,030 --> 00:07:51,570
always fail out that I hate writing

226
00:07:49,440 --> 00:07:52,590
documentation so hopefully this will be

227
00:07:51,570 --> 00:07:54,480
able to provide a little bit of

228
00:07:52,590 --> 00:07:57,599
documentation right now for how to

229
00:07:54,480 --> 00:07:59,190
actually go about using this tool also I

230
00:07:57,600 --> 00:08:01,320
want to point out that this is still

231
00:07:59,190 --> 00:08:02,730
under active development there's a whole

232
00:08:01,320 --> 00:08:05,370
lot of things on my to-do list here if

233
00:08:02,730 --> 00:08:07,740
you might notice so what's really useful

234
00:08:05,370 --> 00:08:09,000
for me is if for comments back on people

235
00:08:07,740 --> 00:08:10,860
who may actually be using this tool

236
00:08:09,000 --> 00:08:12,120
about features they're really interested

237
00:08:10,860 --> 00:08:13,650
in so that way I can move it closer up

238
00:08:12,120 --> 00:08:19,680
to the top of my to-do list or maybe add

239
00:08:13,650 --> 00:08:21,270
new things to that as well so pcfg s

240
00:08:19,680 --> 00:08:24,060
have been pretty popular in canada

241
00:08:21,270 --> 00:08:26,280
academic setting so this is a Google

242
00:08:24,060 --> 00:08:26,940
Scholar it's basically to Instagram for

243
00:08:26,280 --> 00:08:31,200
academics

244
00:08:26,940 --> 00:08:34,080
it's just instead of likes everyone that

245
00:08:31,200 --> 00:08:35,610
focuses on their citations instead so

246
00:08:34,080 --> 00:08:36,810
the top tier results from doing certain

247
00:08:35,610 --> 00:08:38,099
searching for Pat for cracking at least

248
00:08:36,809 --> 00:08:40,619
when I did it it'll change Japan who

249
00:08:38,099 --> 00:08:43,500
else does it here is the original pcfg

250
00:08:40,620 --> 00:08:45,600
paper which would say by 366 people and

251
00:08:43,500 --> 00:08:46,710
in a paper by CMU where they were

252
00:08:45,600 --> 00:08:48,690
comparing different password cracking

253
00:08:46,710 --> 00:08:50,460
algorithms and one of them was you know

254
00:08:48,690 --> 00:08:52,910
the pcfg as well which was also cited by

255
00:08:50,460 --> 00:08:57,230
more people 377

256
00:08:52,910 --> 00:08:59,449
those couple abs so what's really cool

257
00:08:57,230 --> 00:09:01,460
about this though it's when I talk about

258
00:08:59,450 --> 00:09:03,410
how effective this is or you know

259
00:09:01,460 --> 00:09:05,120
different aspects of trying to do it as

260
00:09:03,410 --> 00:09:06,530
modeling here I don't actually have to

261
00:09:05,120 --> 00:09:07,670
draw it into graphs because I can just

262
00:09:06,530 --> 00:09:09,470
go ahead and go in there way else's

263
00:09:07,670 --> 00:09:12,829
paper and you know grab their research

264
00:09:09,470 --> 00:09:14,630
instead and that's really kind of y'all

265
00:09:12,830 --> 00:09:15,890
nice when I be able to talk to you about

266
00:09:14,630 --> 00:09:20,420
you know why you might be want to be

267
00:09:15,890 --> 00:09:22,310
interested in pcfg password cracking now

268
00:09:20,420 --> 00:09:24,560
one thing I really kind of want to be

269
00:09:22,310 --> 00:09:26,209
upfront about though is if you look at

270
00:09:24,560 --> 00:09:27,109
all these academic papers you'll notice

271
00:09:26,210 --> 00:09:29,450
something that's kind of really stands

272
00:09:27,110 --> 00:09:31,430
out and that is they really represent

273
00:09:29,450 --> 00:09:33,110
only very short cracking sessions

274
00:09:31,430 --> 00:09:34,790
because you know if you're not in

275
00:09:33,110 --> 00:09:36,140
passive cracking you say oh wow they

276
00:09:34,790 --> 00:09:38,420
made you know 1 trillion guesses that

277
00:09:36,140 --> 00:09:39,620
sounds like a lot but when you start

278
00:09:38,420 --> 00:09:40,849
looking at some of these different GPU

279
00:09:39,620 --> 00:09:44,570
based attacks it's like that you're

280
00:09:40,850 --> 00:09:46,550
doing that in like seconds yeah so PCF

281
00:09:44,570 --> 00:09:48,110
geez there's a lot of computational

282
00:09:46,550 --> 00:09:51,260
overhead in that there and that really

283
00:09:48,110 --> 00:09:52,940
does slow down your attack so if you're

284
00:09:51,260 --> 00:09:55,340
trying to go ahead and crack like ntlm

285
00:09:52,940 --> 00:09:56,900
hashes or you know raw md5 this is

286
00:09:55,340 --> 00:09:57,860
probably not the attack for you you want

287
00:09:56,900 --> 00:10:00,110
to be able to throw something out that

288
00:09:57,860 --> 00:10:01,430
can really keep your GPU happy where

289
00:10:00,110 --> 00:10:02,360
this is really nice though is when

290
00:10:01,430 --> 00:10:04,130
you're trying to attack you know

291
00:10:02,360 --> 00:10:06,170
computationally expensive hashes like

292
00:10:04,130 --> 00:10:07,700
file encryption and in that case they're

293
00:10:06,170 --> 00:10:10,310
the cost of making the guess is so high

294
00:10:07,700 --> 00:10:11,840
that this becomes less of a bottleneck

295
00:10:10,310 --> 00:10:15,589
as far as how long you can run your

296
00:10:11,840 --> 00:10:18,890
cracking session so I want to go into

297
00:10:15,590 --> 00:10:21,620
CMU paper here real quick here before I

298
00:10:18,890 --> 00:10:22,280
start diving into this toolset a little

299
00:10:21,620 --> 00:10:23,870
bit more though

300
00:10:22,280 --> 00:10:25,250
and the reason why I want to do this

301
00:10:23,870 --> 00:10:26,300
here is because there's always kind of

302
00:10:25,250 --> 00:10:28,790
question especially we start talking

303
00:10:26,300 --> 00:10:31,339
about academic research of how well does

304
00:10:28,790 --> 00:10:33,079
this represent reality you know Duty's

305
00:10:31,340 --> 00:10:34,760
grad students actually have the skills

306
00:10:33,080 --> 00:10:36,350
of a professional password cracker when

307
00:10:34,760 --> 00:10:39,880
they start doing this modeling here and

308
00:10:36,350 --> 00:10:42,410
so this paper at CMU came out with here

309
00:10:39,880 --> 00:10:44,780
they took a really kind of interesting

310
00:10:42,410 --> 00:10:46,699
approach and so they compared different

311
00:10:44,780 --> 00:10:49,569
types of cracking styles but one thing

312
00:10:46,700 --> 00:10:52,520
they did was that they got a resource

313
00:10:49,570 --> 00:10:53,990
acute professional from CoreLogic to run

314
00:10:52,520 --> 00:10:55,850
a real path of cracking attack as well

315
00:10:53,990 --> 00:10:58,430
and to go ahead and model the results of

316
00:10:55,850 --> 00:10:59,900
that and if you're not aware CoreLogic

317
00:10:58,430 --> 00:11:01,370
there are the people that run you know

318
00:10:59,900 --> 00:11:04,520
crack me if you can at the DEFCON

319
00:11:01,370 --> 00:11:05,870
competition there so I think it's fair

320
00:11:04,520 --> 00:11:06,410
to say that they're actually you know

321
00:11:05,870 --> 00:11:08,870
you can say

322
00:11:06,410 --> 00:11:11,600
you know pretty good when it comes to a

323
00:11:08,870 --> 00:11:14,120
password cracking and we're and us

324
00:11:11,600 --> 00:11:16,040
attack that's when CMU modeled it here

325
00:11:14,120 --> 00:11:19,129
for prime much that you know the first

326
00:11:16,040 --> 00:11:20,899
trillion guesses the pcfg that was doing

327
00:11:19,129 --> 00:11:22,670
way better than the professional

328
00:11:20,899 --> 00:11:24,800
password cracker by trying to go ahead

329
00:11:22,670 --> 00:11:25,729
and create these guesses by hand now

330
00:11:24,800 --> 00:11:27,709
when you start going ahead and giving

331
00:11:25,730 --> 00:11:29,269
them you know this is a log logarithmic

332
00:11:27,709 --> 00:11:30,979
scale so they had ten more times you

333
00:11:29,269 --> 00:11:35,000
know the gases they did eventually you

334
00:11:30,980 --> 00:11:36,620
know go ahead and beat it but this is

335
00:11:35,000 --> 00:11:38,389
kind of really cool though in the fact

336
00:11:36,620 --> 00:11:39,649
that you don't have to have any skill

337
00:11:38,389 --> 00:11:42,019
you just need to train on a good data

338
00:11:39,649 --> 00:11:44,060
set and you can have a cracking session

339
00:11:42,019 --> 00:11:45,350
that probably mimics or is it's roughly

340
00:11:44,060 --> 00:11:47,899
about as good as probably a real

341
00:11:45,350 --> 00:11:49,100
professional you know attacker here so

342
00:11:47,899 --> 00:11:51,620
this is really good if you're going

343
00:11:49,100 --> 00:11:53,089
ahead and staying up a forensic shop and

344
00:11:51,620 --> 00:11:55,189
you may not have a professional password

345
00:11:53,089 --> 00:11:56,660
cracker on your staff but they can do a

346
00:11:55,189 --> 00:12:04,160
pretty good job there when it comes to

347
00:11:56,660 --> 00:12:05,269
actually cracking passwords yeah so one

348
00:12:04,160 --> 00:12:06,920
other thing I kind of want to point out

349
00:12:05,269 --> 00:12:09,079
here first of all though is that the

350
00:12:06,920 --> 00:12:11,120
academia is cool and one cool thing

351
00:12:09,079 --> 00:12:12,589
about academia dough is the ability to

352
00:12:11,120 --> 00:12:15,170
go ahead and influence change in the

353
00:12:12,589 --> 00:12:17,240
real world so I don't know how many of

354
00:12:15,170 --> 00:12:19,699
you are familiar with this day it's a

355
00:12:17,240 --> 00:12:23,810
special publication 800-53 B for digital

356
00:12:19,699 --> 00:12:25,219
authentication if you read the older

357
00:12:23,810 --> 00:12:27,469
versions of anything and the good old

358
00:12:25,220 --> 00:12:29,300
hits they had this huge section talking

359
00:12:27,470 --> 00:12:31,579
about you know password entropy and

360
00:12:29,300 --> 00:12:34,579
saying that if you used easily you know

361
00:12:31,579 --> 00:12:36,109
character creation rules and you forced

362
00:12:34,579 --> 00:12:37,519
users that have special characters they

363
00:12:36,110 --> 00:12:39,500
made their passwords you know 14

364
00:12:37,519 --> 00:12:41,000
characters 15 characters long it give

365
00:12:39,500 --> 00:12:42,319
you a certain number of entropy bits and

366
00:12:41,000 --> 00:12:44,120
it'd be equivalent to like a really long

367
00:12:42,319 --> 00:12:45,680
key and it was kind of really pushing

368
00:12:44,120 --> 00:12:49,339
people make longer and more complex

369
00:12:45,680 --> 00:12:50,779
passwords so the updated version is much

370
00:12:49,339 --> 00:12:52,910
better they got rid of that whole thing

371
00:12:50,779 --> 00:12:54,740
a password enter Peter and we talked

372
00:12:52,910 --> 00:12:55,790
about composition rules he said in the

373
00:12:54,740 --> 00:12:57,500
official documentation

374
00:12:55,790 --> 00:12:59,120
the most notable form of these is

375
00:12:57,500 --> 00:13:00,680
composition rules that crew cars user to

376
00:12:59,120 --> 00:13:02,300
choose passwords constructed using a mix

377
00:13:00,680 --> 00:13:02,689
of character types such as least one

378
00:13:02,300 --> 00:13:05,029
digit

379
00:13:02,689 --> 00:13:06,949
uppercase letter and symbol however

380
00:13:05,029 --> 00:13:08,300
analysis of breach password databases

381
00:13:06,949 --> 00:13:10,279
revealed that the benefit of such rules

382
00:13:08,300 --> 00:13:13,250
is not nearly as significant as

383
00:13:10,279 --> 00:13:15,459
initially sucked so also the impact of

384
00:13:13,250 --> 00:13:17,689
usability and memorability is severe and

385
00:13:15,459 --> 00:13:19,010
because they were referenced our paper

386
00:13:17,689 --> 00:13:20,870
because what we did was we

387
00:13:19,010 --> 00:13:21,920
and you know pcfg attacks against a

388
00:13:20,870 --> 00:13:23,720
bunch of different paths of creation

389
00:13:21,920 --> 00:13:29,510
rules and show that entropy really had

390
00:13:23,720 --> 00:13:31,430
no basis in reality so going back to

391
00:13:29,510 --> 00:13:32,810
Paris earlier talk to also about

392
00:13:31,430 --> 00:13:34,790
password change policies what are we

393
00:13:32,810 --> 00:13:35,989
doing about that everyone hates you know

394
00:13:34,790 --> 00:13:38,660
password change policies

395
00:13:35,990 --> 00:13:40,400
well FTC came out and had a great paper

396
00:13:38,660 --> 00:13:42,290
by Lori Kramer to came out and said you

397
00:13:40,400 --> 00:13:44,689
know maybe we should really rethink

398
00:13:42,290 --> 00:13:46,010
password change policies maybe we

399
00:13:44,690 --> 00:13:49,190
shouldn't have forced users a change

400
00:13:46,010 --> 00:13:51,140
your password and it's part of that she

401
00:13:49,190 --> 00:13:53,750
cited a paper the security modern

402
00:13:51,140 --> 00:13:55,699
password expiration by some University

403
00:13:53,750 --> 00:13:57,130
of North Carolina researchers where they

404
00:13:55,700 --> 00:13:59,480
went ahead against their university's

405
00:13:57,130 --> 00:14:01,550
own students there because they had all

406
00:13:59,480 --> 00:14:03,890
that access to all that data and he had

407
00:14:01,550 --> 00:14:06,109
about ten thousand defunct accounts they

408
00:14:03,890 --> 00:14:07,340
went ahead and tried to crack and of

409
00:14:06,110 --> 00:14:08,990
those ten thousand accounts so you were

410
00:14:07,340 --> 00:14:11,120
able to crack about seven thousand seven

411
00:14:08,990 --> 00:14:12,260
hundred of those accounts at least one

412
00:14:11,120 --> 00:14:13,550
of those passwords and then they started

413
00:14:12,260 --> 00:14:15,230
cracking it even more to figure out

414
00:14:13,550 --> 00:14:16,430
wizard that password it did just cracked

415
00:14:15,230 --> 00:14:17,570
their would be allowed them to go ahead

416
00:14:16,430 --> 00:14:19,609
and cracked a new password and they

417
00:14:17,570 --> 00:14:20,750
found yes it does you know if you crack

418
00:14:19,610 --> 00:14:21,950
one password you can pretty much crack

419
00:14:20,750 --> 00:14:26,030
all the other passwords pretty easily

420
00:14:21,950 --> 00:14:27,140
and for that paper these researchers

421
00:14:26,030 --> 00:14:30,579
used probably one of the earliest

422
00:14:27,140 --> 00:14:32,449
versions of the the pcfg a cracker there

423
00:14:30,580 --> 00:14:33,560
and they said that you know the

424
00:14:32,450 --> 00:14:34,760
dictionary based approach was most

425
00:14:33,560 --> 00:14:36,530
effective especially when combined with

426
00:14:34,760 --> 00:14:39,590
the word list entering messages but you

427
00:14:36,530 --> 00:14:41,689
know the pcfg so once again this is once

428
00:14:39,590 --> 00:14:43,430
an excellent really kind of you know be

429
00:14:41,690 --> 00:14:45,710
really happy about is that this is

430
00:14:43,430 --> 00:14:47,000
making your lives less you know complex

431
00:14:45,710 --> 00:14:48,500
when it comes to passwords here so that

432
00:14:47,000 --> 00:14:50,930
way we can focus on things like password

433
00:14:48,500 --> 00:14:55,460
reuse and you know combating the real

434
00:14:50,930 --> 00:14:56,870
threats that users have to face so well

435
00:14:55,460 --> 00:14:58,160
that's the kind of the background now I

436
00:14:56,870 --> 00:15:00,020
really kinda want to focus though on how

437
00:14:58,160 --> 00:15:02,660
do you actually go about using this tool

438
00:15:00,020 --> 00:15:05,000
set and so I'm gonna start out was to go

439
00:15:02,660 --> 00:15:07,579
in the place on tool set that's

440
00:15:05,000 --> 00:15:09,110
available here so the first thing you

441
00:15:07,580 --> 00:15:11,210
need to do is it be able to go get it

442
00:15:09,110 --> 00:15:12,980
and so you get off github and as far as

443
00:15:11,210 --> 00:15:15,350
requirements in order to run it really

444
00:15:12,980 --> 00:15:18,200
it's only Python 3 if you can run Python

445
00:15:15,350 --> 00:15:19,580
on in that you know system you can

446
00:15:18,200 --> 00:15:20,780
pretty much will run this tool set here

447
00:15:19,580 --> 00:15:23,240
I've tried a bunch of different

448
00:15:20,780 --> 00:15:24,740
variations of Linux it runs on Windows I

449
00:15:23,240 --> 00:15:25,640
even tried to Annette BSD and it was

450
00:15:24,740 --> 00:15:27,870
about the only thing I've ever gone to

451
00:15:25,640 --> 00:15:31,390
run on it net BS

452
00:15:27,870 --> 00:15:32,410
so I mean there's not a whole lot of

453
00:15:31,390 --> 00:15:34,000
requirements in order to actually

454
00:15:32,410 --> 00:15:35,439
install and run this here at all

455
00:15:34,000 --> 00:15:38,080
now one thing I want to really stress

456
00:15:35,440 --> 00:15:40,390
though is that this is only a password

457
00:15:38,080 --> 00:15:43,390
guest generator this will not crack any

458
00:15:40,390 --> 00:15:44,830
passwords on its own so what you if you

459
00:15:43,390 --> 00:15:46,360
really want crack passwords you also

460
00:15:44,830 --> 00:15:47,920
need to go ahead and have a password

461
00:15:46,360 --> 00:15:49,600
cracking 12 choice installed on that

462
00:15:47,920 --> 00:15:51,939
computer as well like John Ripper or

463
00:15:49,600 --> 00:15:53,410
hash cat and I'm gonna use all John the

464
00:15:51,940 --> 00:15:54,520
Ripper examples because you know hash

465
00:15:53,410 --> 00:15:56,650
cats definitely had a good

466
00:15:54,520 --> 00:15:59,620
representation here and you know I got

467
00:15:56,650 --> 00:16:01,540
show some love to John so the only other

468
00:15:59,620 --> 00:16:04,390
thing is just kind of optional if you

469
00:16:01,540 --> 00:16:08,230
for training of data sets there's this

470
00:16:04,390 --> 00:16:10,089
Python care car card debt module and

471
00:16:08,230 --> 00:16:12,700
basically just helps you auto detect

472
00:16:10,089 --> 00:16:15,250
what the character encoding the training

473
00:16:12,700 --> 00:16:16,600
set is because character encoding is

474
00:16:15,250 --> 00:16:19,089
like the bane of my password cracking

475
00:16:16,600 --> 00:16:20,890
existence here so that helps at least

476
00:16:19,089 --> 00:16:22,180
reduce a little bit of the you know the

477
00:16:20,890 --> 00:16:23,319
stress of being able to do that and I'll

478
00:16:22,180 --> 00:16:26,829
talk that about that more when I talk

479
00:16:23,320 --> 00:16:28,060
about training so one thing I brought

480
00:16:26,830 --> 00:16:30,430
really stress though because I was

481
00:16:28,060 --> 00:16:32,380
mentioned earlier it's slow the the

482
00:16:30,430 --> 00:16:34,959
guesser is single-threaded to CPU bound

483
00:16:32,380 --> 00:16:36,640
so yes obviously it's gonna be slow yes

484
00:16:34,959 --> 00:16:40,329
based upon it I will make full use of

485
00:16:36,640 --> 00:16:42,069
that CPU but you know you're not gonna

486
00:16:40,330 --> 00:16:43,540
make use of any sort of GPU or

487
00:16:42,070 --> 00:16:46,990
paralyzation or anything else really

488
00:16:43,540 --> 00:16:49,420
along those lines there also it has very

489
00:16:46,990 --> 00:16:52,209
high RAM use and the RAM use will

490
00:16:49,420 --> 00:16:53,469
continue to grow as it runs because the

491
00:16:52,209 --> 00:16:54,880
data structure is this keeping track of

492
00:16:53,470 --> 00:16:57,040
you just keep on going bigger and bigger

493
00:16:54,880 --> 00:16:58,360
and bigger so I could have spent some

494
00:16:57,040 --> 00:17:00,400
time trying to do some more memory

495
00:16:58,360 --> 00:17:01,750
management and I said yeah this map you

496
00:17:00,400 --> 00:17:04,959
make me look for more RAM at the problem

497
00:17:01,750 --> 00:17:07,030
because that's cheap so I mean it'll

498
00:17:04,959 --> 00:17:08,380
start out not too bad but you know for

499
00:17:07,030 --> 00:17:10,389
longer cracking sessions I'd recommend

500
00:17:08,380 --> 00:17:16,420
at least 16 gigs dedicated directly to

501
00:17:10,390 --> 00:17:17,770
this tool here so the next thing kind of

502
00:17:16,420 --> 00:17:21,250
is you need to start generating these

503
00:17:17,770 --> 00:17:24,490
guesses so the first choice you need to

504
00:17:21,250 --> 00:17:26,290
make though is what ruleset do you want

505
00:17:24,490 --> 00:17:27,819
to use in order to generate these

506
00:17:26,290 --> 00:17:29,470
guesses based upon because this is as a

507
00:17:27,819 --> 00:17:30,909
second kind of machine learning so you

508
00:17:29,470 --> 00:17:32,260
can have different rule sets to pay on

509
00:17:30,910 --> 00:17:34,750
which target you're currently trying to

510
00:17:32,260 --> 00:17:36,580
target there the default rule set

511
00:17:34,750 --> 00:17:37,990
included with a tool is training on 1

512
00:17:36,580 --> 00:17:40,360
million passwords for the RockYou data

513
00:17:37,990 --> 00:17:41,169
set so take that as that you will you

514
00:17:40,360 --> 00:17:43,269
know it's your typical

515
00:17:41,169 --> 00:17:47,980
online users there from back in you know

516
00:17:43,269 --> 00:17:49,239
circa you know 2008 or so so but you can

517
00:17:47,980 --> 00:17:50,710
definitely go ahead and have you know

518
00:17:49,239 --> 00:17:52,539
training on new data sets and select

519
00:17:50,710 --> 00:17:53,889
those as well and I apologize in advance

520
00:17:52,539 --> 00:17:55,590
I'll use rule set and grammar

521
00:17:53,889 --> 00:17:58,238
interchangeably depending on you know

522
00:17:55,590 --> 00:18:00,070
usually however I'm feeling right now

523
00:17:58,239 --> 00:18:03,159
but basically they're the right same

524
00:18:00,070 --> 00:18:04,450
thing so once you have that though you

525
00:18:03,159 --> 00:18:07,509
just go ahead and start generating and I

526
00:18:04,450 --> 00:18:09,639
guesses so the the ones grip and

527
00:18:07,509 --> 00:18:12,100
innocent or generate guesses is pcfg

528
00:18:09,639 --> 00:18:14,168
underscore guess or PI so it actually be

529
00:18:12,100 --> 00:18:16,178
hopefully somewhat obvious but you

530
00:18:14,169 --> 00:18:17,919
throwing a spice on there and it'll have

531
00:18:16,179 --> 00:18:19,899
two main flags you don't have to add

532
00:18:17,919 --> 00:18:21,669
these here but I really recommend them

533
00:18:19,899 --> 00:18:22,479
one is get the name the rule set that

534
00:18:21,669 --> 00:18:25,149
you want to go ahead and generate

535
00:18:22,480 --> 00:18:26,710
guesses with and then also I'd recommend

536
00:18:25,149 --> 00:18:28,508
you know including a session name as

537
00:18:26,710 --> 00:18:30,220
well so because currently it allows you

538
00:18:28,509 --> 00:18:31,960
to put you know stop a restart a session

539
00:18:30,220 --> 00:18:33,519
so even if you don't think you're ever

540
00:18:31,960 --> 00:18:34,929
gonna want restarted again is sometimes

541
00:18:33,519 --> 00:18:36,489
nice to have a unique session ID because

542
00:18:34,929 --> 00:18:37,899
you know you you know a couple days

543
00:18:36,489 --> 00:18:39,309
later you realize well maybe I do want

544
00:18:37,899 --> 00:18:41,590
to go ahead and keep on that session

545
00:18:39,309 --> 00:18:42,850
going there so I recommend having that

546
00:18:41,590 --> 00:18:47,470
and you know making that unique per

547
00:18:42,850 --> 00:18:49,238
sessions as well so that's great to just

548
00:18:47,470 --> 00:18:51,460
generate guesses but now you really want

549
00:18:49,239 --> 00:18:53,590
crack passwords in or do that you need

550
00:18:51,460 --> 00:18:55,960
to have a password cracking program so

551
00:18:53,590 --> 00:18:58,168
with some mostly it's a different

552
00:18:55,960 --> 00:19:00,489
programs hash can and John the Ripper

553
00:18:58,169 --> 00:19:02,919
they allow you to go ahead and generate

554
00:19:00,489 --> 00:19:05,619
guesses and pipe it in versus a nvs

555
00:19:02,919 --> 00:19:08,619
standard in so what you do is this is

556
00:19:05,619 --> 00:19:10,509
you go ahead and run the tool set you

557
00:19:08,619 --> 00:19:13,928
give a pipe to it there and then you use

558
00:19:10,509 --> 00:19:15,789
a flag like in John standard in and John

559
00:19:13,929 --> 00:19:17,019
will start processing the input to form

560
00:19:15,789 --> 00:19:19,649
this here deal like you have a look at

561
00:19:17,019 --> 00:19:22,659
normal word list or something like that

562
00:19:19,649 --> 00:19:23,918
now one problem with going ahead and run

563
00:19:22,659 --> 00:19:25,480
a cracking session when you're using

564
00:19:23,919 --> 00:19:28,119
something for the pipe universe the

565
00:19:25,480 --> 00:19:29,559
standard in is that these tools will you

566
00:19:28,119 --> 00:19:31,178
often give you a great status report if

567
00:19:29,559 --> 00:19:32,980
you hit the enter button but when you're

568
00:19:31,179 --> 00:19:34,960
running standard in you know you hit

569
00:19:32,980 --> 00:19:37,269
that enter button it doesn't go to John

570
00:19:34,960 --> 00:19:40,029
Ripper or hash cat that enter goes to my

571
00:19:37,269 --> 00:19:41,859
my tool so if you really want to be able

572
00:19:40,029 --> 00:19:44,559
to go ahead and see the current status

573
00:19:41,859 --> 00:19:46,720
of a year cracking session at least with

574
00:19:44,559 --> 00:19:48,609
John Ripper what you can do is you can

575
00:19:46,720 --> 00:19:50,980
find the process ID of the John Ripper

576
00:19:48,609 --> 00:19:53,439
process itself and then go ahead and

577
00:19:50,980 --> 00:19:54,700
send a say user one signal to it by

578
00:19:53,440 --> 00:19:56,080
doing kill - like you

579
00:19:54,700 --> 00:19:58,390
one and then the pit of the Johnny

580
00:19:56,080 --> 00:20:00,399
Ripper process and some from a different

581
00:19:58,390 --> 00:20:02,410
window and then when that does that

582
00:20:00,400 --> 00:20:04,030
there you know you'll get pop out here

583
00:20:02,410 --> 00:20:06,490
and then you can see like you know how

584
00:20:04,030 --> 00:20:08,440
many hit number hashes you cracked as

585
00:20:06,490 --> 00:20:09,820
well as you know the current guessing

586
00:20:08,440 --> 00:20:14,710
speed it's guessing guess is that there

587
00:20:09,820 --> 00:20:18,760
so in this case it's about you know four

588
00:20:14,710 --> 00:20:20,830
million guesses a second so it it's slow

589
00:20:18,760 --> 00:20:23,800
but you know it's not horribly slow at

590
00:20:20,830 --> 00:20:26,620
least now I want to kind of take that

591
00:20:23,800 --> 00:20:28,899
window dare dough and go expand on that

592
00:20:26,620 --> 00:20:31,389
a little bit there if I only had to give

593
00:20:28,900 --> 00:20:33,010
one slide for this entire talk I would

594
00:20:31,390 --> 00:20:35,560
spend this entire talk right on this one

595
00:20:33,010 --> 00:20:38,230
slide here because I think this really

596
00:20:35,560 --> 00:20:40,030
cash shows you know the advantage of

597
00:20:38,230 --> 00:20:42,490
going ahead and using have a pcfg

598
00:20:40,030 --> 00:20:44,560
approach here because these are the

599
00:20:42,490 --> 00:20:46,030
passwords is currently cracking and you

600
00:20:44,560 --> 00:20:48,970
can see kind of here and I apologize for

601
00:20:46,030 --> 00:20:50,470
people in the back but you know it's

602
00:20:48,970 --> 00:20:52,540
trying a whole bunch of different rules

603
00:20:50,470 --> 00:20:54,190
and the great thing about these rules is

604
00:20:52,540 --> 00:20:56,050
I didn't have to write them by me and

605
00:20:54,190 --> 00:20:57,520
mainly by hand because if you're doing a

606
00:20:56,050 --> 00:20:58,930
password cracking especially Mario's

607
00:20:57,520 --> 00:21:00,610
rules here like oh you know I need to

608
00:20:58,930 --> 00:21:02,530
start combining rules so I okay I want

609
00:21:00,610 --> 00:21:04,209
to capitalize the first letter and an

610
00:21:02,530 --> 00:21:06,040
add special character in and some digits

611
00:21:04,210 --> 00:21:09,730
and so on and that gets gifts gets very

612
00:21:06,040 --> 00:21:11,230
difficult here so it's kind of fun when

613
00:21:09,730 --> 00:21:13,060
I look at the affections here to try to

614
00:21:11,230 --> 00:21:15,280
figure out you know how did it generate

615
00:21:13,060 --> 00:21:18,580
this guess you know what kind of micro

616
00:21:15,280 --> 00:21:20,080
rule did it use so at the top here you

617
00:21:18,580 --> 00:21:22,149
know I see that it's frying you know

618
00:21:20,080 --> 00:21:23,710
five letters and you know four digits

619
00:21:22,150 --> 00:21:26,380
and where to generate crack these

620
00:21:23,710 --> 00:21:28,720
passwords by one specified that's not

621
00:21:26,380 --> 00:21:31,120
trying all five digit words it's not

622
00:21:28,720 --> 00:21:33,520
trying all four digit numbers it's

623
00:21:31,120 --> 00:21:35,679
trying those words of a certain

624
00:21:33,520 --> 00:21:38,650
probability so it might try you know a

625
00:21:35,680 --> 00:21:40,000
four digit number a word like love or

626
00:21:38,650 --> 00:21:42,250
sound like that before it tries the word

627
00:21:40,000 --> 00:21:43,570
like chairs so you might see that

628
00:21:42,250 --> 00:21:47,020
cracked earlier in the cracking session

629
00:21:43,570 --> 00:21:48,340
before it gets these things here so if

630
00:21:47,020 --> 00:21:50,260
we keep on going down here you know we

631
00:21:48,340 --> 00:21:53,320
see you know cesses cool got cracked you

632
00:21:50,260 --> 00:21:55,480
are cool set if you're watching but in

633
00:21:53,320 --> 00:21:56,860
this one here this was a multi-word so

634
00:21:55,480 --> 00:21:58,450
instead of going head he's going ahead

635
00:21:56,860 --> 00:22:00,310
and trying to use something that's in

636
00:21:58,450 --> 00:22:02,380
your dictionary you'll combine words as

637
00:22:00,310 --> 00:22:04,120
well so in and I'll make this

638
00:22:02,380 --> 00:22:06,520
distinction a little bit here instead of

639
00:22:04,120 --> 00:22:07,989
breaking this up as like says is cool as

640
00:22:06,520 --> 00:22:09,460
three different words

641
00:22:07,990 --> 00:22:11,770
what this is really doing underneath the

642
00:22:09,460 --> 00:22:13,660
hood here it's as trying cess and then

643
00:22:11,770 --> 00:22:15,760
the kind of the combination is cool

644
00:22:13,660 --> 00:22:17,650
because that way it can quickly iterate

645
00:22:15,760 --> 00:22:19,980
between sings so we can try like you

646
00:22:17,650 --> 00:22:23,110
know Adam is cool Bob is cool and so on

647
00:22:19,980 --> 00:22:27,430
because that is cool it's kind of a you

648
00:22:23,110 --> 00:22:29,080
know a common occurrence so it goes down

649
00:22:27,430 --> 00:22:30,400
here a little further and then it kind

650
00:22:29,080 --> 00:22:32,320
of looks like it's doing brute force and

651
00:22:30,400 --> 00:22:33,250
we actually dug into it it was newton

652
00:22:32,320 --> 00:22:35,200
brute force it was actually just

653
00:22:33,250 --> 00:22:36,550
combining sings like a prince attack so

654
00:22:35,200 --> 00:22:37,720
if you've ever seen Prince befores it's

655
00:22:36,550 --> 00:22:38,919
kind of common Eider he throws a bunch

656
00:22:37,720 --> 00:22:40,330
of stuff at the wall and sees you know

657
00:22:38,920 --> 00:22:41,710
what works and so that's what really

658
00:22:40,330 --> 00:22:44,260
what's kind of switching off too right

659
00:22:41,710 --> 00:22:45,700
there but then it tried like two

660
00:22:44,260 --> 00:22:47,230
different kinds and fairly neat rules

661
00:22:45,700 --> 00:22:48,850
whereas trying special characters of

662
00:22:47,230 --> 00:22:50,530
equal types around each one there so

663
00:22:48,850 --> 00:22:52,030
once again you know is this in your

664
00:22:50,530 --> 00:22:54,010
password cracking rule set normally well

665
00:22:52,030 --> 00:22:58,090
it learned it automatically by training

666
00:22:54,010 --> 00:22:59,350
on the data set here I think I can just

667
00:22:58,090 --> 00:23:01,000
as I said I could go through all this

668
00:22:59,350 --> 00:23:02,110
here you know but even if it's like

669
00:23:01,000 --> 00:23:03,820
splitting down here you know we have

670
00:23:02,110 --> 00:23:05,050
things like fingernail and 99 and those

671
00:23:03,820 --> 00:23:06,429
might be in your rule set but in this

672
00:23:05,050 --> 00:23:08,470
case here when I dug into it these were

673
00:23:06,430 --> 00:23:10,090
multi words again so it was trying you

674
00:23:08,470 --> 00:23:13,210
know finger plus nail and ninety plus

675
00:23:10,090 --> 00:23:14,860
nine and then you know getting out here

676
00:23:13,210 --> 00:23:18,070
it did then this finally decided to go

677
00:23:14,860 --> 00:23:20,770
ahead and try you know it's 69 settings

678
00:23:18,070 --> 00:23:23,439
so it's 2 digits in front of it with a

679
00:23:20,770 --> 00:23:24,520
capitalized word and then finally kind

680
00:23:23,440 --> 00:23:26,500
of the bottom here you should see an

681
00:23:24,520 --> 00:23:28,660
even more combinations so it's crying

682
00:23:26,500 --> 00:23:32,530
like multi words plus two digits so like

683
00:23:28,660 --> 00:23:33,520
would fish 39 and Terra Don 84 so you

684
00:23:32,530 --> 00:23:35,740
can kind of see how it starts going

685
00:23:33,520 --> 00:23:36,760
ahead and doing this and now also one

686
00:23:35,740 --> 00:23:38,290
thing I want to point out is this is

687
00:23:36,760 --> 00:23:40,300
about twelve minutes into the cracking

688
00:23:38,290 --> 00:23:41,620
session here so all the really common

689
00:23:40,300 --> 00:23:42,550
passwords have already been done so this

690
00:23:41,620 --> 00:23:44,350
is why we're starting to get into more

691
00:23:42,550 --> 00:23:45,610
kind of esoteric rules because it's

692
00:23:44,350 --> 00:23:48,909
already tried you know password one two

693
00:23:45,610 --> 00:23:51,850
three and one two three four five six so

694
00:23:48,910 --> 00:23:55,690
that's kind of what the pcfg is actually

695
00:23:51,850 --> 00:23:57,850
doing there so when you do hit enter

696
00:23:55,690 --> 00:23:59,440
though I did spend some time to try to

697
00:23:57,850 --> 00:24:01,330
go ahead and provide a useful stats

698
00:23:59,440 --> 00:24:02,650
output to you as well so that way you

699
00:24:01,330 --> 00:24:04,000
don't have to kind of reverse engineer

700
00:24:02,650 --> 00:24:06,220
it you can kind of really see what the

701
00:24:04,000 --> 00:24:08,470
pcfg guesser is doing at that time when

702
00:24:06,220 --> 00:24:09,520
you hit Enter key so these are I hit the

703
00:24:08,470 --> 00:24:12,010
Enter key twice so these are two

704
00:24:09,520 --> 00:24:13,810
different status outputs but the first

705
00:24:12,010 --> 00:24:15,850
one here you can see that it's actually

706
00:24:13,810 --> 00:24:17,200
doing multi-word guessing again so it's

707
00:24:15,850 --> 00:24:20,230
trying the one hundred and forty third

708
00:24:17,200 --> 00:24:21,059
most common word in the front it's doing

709
00:24:20,230 --> 00:24:23,639
no capitalize they

710
00:24:21,059 --> 00:24:26,039
to it there and if trying the 93rd most

711
00:24:23,639 --> 00:24:27,809
common word at the back so it gets down

712
00:24:26,039 --> 00:24:30,210
to that level of fine detail there when

713
00:24:27,809 --> 00:24:32,700
it comes to generating these guesses and

714
00:24:30,210 --> 00:24:36,659
in this case example will be like Keira

715
00:24:32,700 --> 00:24:38,159
and Ivan now if next time we hit enter

716
00:24:36,659 --> 00:24:39,330
here we can see that it's waft over

717
00:24:38,159 --> 00:24:41,240
dough and this is about a minute

718
00:24:39,330 --> 00:24:43,799
afterwards so I hit enter about you know

719
00:24:41,240 --> 00:24:45,720
you know about 60 seconds afterwards and

720
00:24:43,799 --> 00:24:48,990
it's now performing a brute-force guest

721
00:24:45,720 --> 00:24:51,210
using the omen ordered Markoff a Newton

722
00:24:48,990 --> 00:24:52,409
enumerator so a swap between those new

723
00:24:51,210 --> 00:24:53,850
two different guesses just know the

724
00:24:52,409 --> 00:24:55,350
guessing strategies this in that period

725
00:24:53,850 --> 00:24:57,830
of time and if you keep on hain and

726
00:24:55,350 --> 00:25:00,389
really keep on seeing a go roam around

727
00:24:57,830 --> 00:25:02,460
so I did also because I hate

728
00:25:00,389 --> 00:25:05,428
documentation I try to documentation

729
00:25:02,460 --> 00:25:07,259
into the code as well so if you hit H

730
00:25:05,429 --> 00:25:09,029
instead of enter you'll bring up a

731
00:25:07,259 --> 00:25:10,409
status report help of what all these

732
00:25:09,029 --> 00:25:11,909
different things here in the status

733
00:25:10,409 --> 00:25:13,619
report means and it actually just help

734
00:25:11,909 --> 00:25:15,059
is way longer because it goes into

735
00:25:13,619 --> 00:25:16,619
details of what these individual rule

736
00:25:15,059 --> 00:25:20,129
sets mean as well but I figured I just

737
00:25:16,619 --> 00:25:21,299
cut that off for this presentation but

738
00:25:20,129 --> 00:25:22,918
the one thing I really kind of want to

739
00:25:21,299 --> 00:25:25,139
highlight here is this kind of last

740
00:25:22,919 --> 00:25:27,299
option which is probability coverage and

741
00:25:25,139 --> 00:25:31,820
so when you hit enter you'll see it's

742
00:25:27,299 --> 00:25:34,679
probably coverage basically metric and

743
00:25:31,820 --> 00:25:37,320
so one thing and the reason why ad is

744
00:25:34,679 --> 00:25:38,759
here is that you always have to figure

745
00:25:37,320 --> 00:25:40,499
out when do you want to go ahead and

746
00:25:38,759 --> 00:25:42,809
abandon a current attack and try

747
00:25:40,499 --> 00:25:45,029
something new so you've been writing

748
00:25:42,809 --> 00:25:46,289
this for you know the last week you

749
00:25:45,029 --> 00:25:48,210
haven't cracked the password you try and

750
00:25:46,289 --> 00:25:50,369
target you know should you move on to

751
00:25:48,210 --> 00:25:52,049
another case should you go ahead and you

752
00:25:50,369 --> 00:25:54,330
know just kill this and tried some

753
00:25:52,049 --> 00:25:55,950
handcrafted mangling rules or whatever

754
00:25:54,330 --> 00:25:57,570
and so this status report this

755
00:25:55,950 --> 00:26:00,809
probability coverage here tries to give

756
00:25:57,570 --> 00:26:02,759
you an idea about that so what it does

757
00:26:00,809 --> 00:26:04,289
it says it's an expected chance that a

758
00:26:02,759 --> 00:26:08,309
password would have been guessed at this

759
00:26:04,289 --> 00:26:10,169
point during the cracking session and I

760
00:26:08,309 --> 00:26:11,820
want to stress I mean this is a fuzzy

761
00:26:10,169 --> 00:26:13,950
metric since it assumes that the target

762
00:26:11,820 --> 00:26:15,779
password exactly matches the probability

763
00:26:13,950 --> 00:26:17,820
of the train set and short answers it

764
00:26:15,779 --> 00:26:21,389
doesn't so you know this this metric

765
00:26:17,820 --> 00:26:22,350
here will not be accurate fully but at

766
00:26:21,389 --> 00:26:24,269
the very least though it gives you a

767
00:26:22,350 --> 00:26:26,219
good rule sum to say okay you know it's

768
00:26:24,269 --> 00:26:28,259
we've covered like 90 percent the key

769
00:26:26,220 --> 00:26:30,629
spacing expects here this will basically

770
00:26:28,259 --> 00:26:31,950
run forever it will never pretty much

771
00:26:30,629 --> 00:26:33,000
run out of guesses that

772
00:26:31,950 --> 00:26:33,929
that way but if you're getting like

773
00:26:33,000 --> 00:26:35,429
ninety percent or something like that

774
00:26:33,929 --> 00:26:36,899
you might want to go ahead and just kill

775
00:26:35,429 --> 00:26:38,010
this off because every single guess it's

776
00:26:36,899 --> 00:26:40,830
making after this here it's good it's

777
00:26:38,010 --> 00:26:42,450
lower and lower and lower probability so

778
00:26:40,830 --> 00:26:43,830
at that point there I would probably

779
00:26:42,450 --> 00:26:44,880
recommend you know changing it and then

780
00:26:43,830 --> 00:26:46,080
if you really wanna go back to it you

781
00:26:44,880 --> 00:26:48,860
have to save sessions so you can go

782
00:26:46,080 --> 00:26:51,840
ahead and restore it at a later point

783
00:26:48,860 --> 00:26:53,250
so one kind of usage tip because I want

784
00:26:51,840 --> 00:26:55,830
kind of focus on actually using this

785
00:26:53,250 --> 00:26:58,019
tool to and this is something that I

786
00:26:55,830 --> 00:27:00,658
guess never really you know bothered

787
00:26:58,019 --> 00:27:03,149
with fixing here but if this is

788
00:27:00,659 --> 00:27:05,789
generating guess is way faster than you

789
00:27:03,149 --> 00:27:08,039
are hashing those guesses this stats

790
00:27:05,789 --> 00:27:09,179
output will generally hang it won't

791
00:27:08,039 --> 00:27:10,379
actually bring up because it doesn't

792
00:27:09,179 --> 00:27:11,490
bother you even check to see whether you

793
00:27:10,380 --> 00:27:13,470
hit the enter key because it's too busy

794
00:27:11,490 --> 00:27:16,289
trying to output guesses and game

795
00:27:13,470 --> 00:27:17,490
blocked by your standard in and so this

796
00:27:16,289 --> 00:27:18,600
happens quite a bit though if you're

797
00:27:17,490 --> 00:27:20,730
trying to cracked like a bunch of bcrypt

798
00:27:18,600 --> 00:27:22,370
hashes because you're making you know

799
00:27:20,730 --> 00:27:24,870
five guesses a second or some like that

800
00:27:22,370 --> 00:27:26,070
and so that will get blocked there

801
00:27:24,870 --> 00:27:28,289
because it's trying to make you know a

802
00:27:26,070 --> 00:27:29,730
million guess is the same so that's

803
00:27:28,289 --> 00:27:34,490
that's kind of my to-do list is to make

804
00:27:29,730 --> 00:27:37,260
that a little bit more easy to use there

805
00:27:34,490 --> 00:27:40,019
so as I was talking about monthly Ward

806
00:27:37,260 --> 00:27:42,000
detection this is probably the the most

807
00:27:40,019 --> 00:27:45,510
effective feature that I've added in

808
00:27:42,000 --> 00:27:47,639
this 4.0 rewrite here and it'll have

809
00:27:45,510 --> 00:27:48,960
other things as well but when I started

810
00:27:47,639 --> 00:27:51,600
seeing you know what passwords in my

811
00:27:48,960 --> 00:27:52,769
cracking now versus earlier most of them

812
00:27:51,600 --> 00:27:54,178
were coming from the multi word feature

813
00:27:52,769 --> 00:27:56,460
so this was actually a really huge

814
00:27:54,179 --> 00:28:00,480
improvement for the accuracy of this

815
00:27:56,460 --> 00:28:03,600
here so originally I was uh inspired by

816
00:28:00,480 --> 00:28:08,039
the crow work the detect multi words by

817
00:28:03,600 --> 00:28:10,740
a sign in a crack staple tool set that

818
00:28:08,039 --> 00:28:12,000
he released there because one of the

819
00:28:10,740 --> 00:28:13,919
hard problems was trying to you know

820
00:28:12,000 --> 00:28:15,450
figure out from a training set from

821
00:28:13,919 --> 00:28:18,120
machine learning perspective if

822
00:28:15,450 --> 00:28:19,620
something is a multi-word or not it's

823
00:28:18,120 --> 00:28:21,090
hard to do because you can have like an

824
00:28:19,620 --> 00:28:22,620
input dictionary and compare it against

825
00:28:21,090 --> 00:28:24,750
it and try to break it up but you get a

826
00:28:22,620 --> 00:28:26,340
lot of false positives and also you now

827
00:28:24,750 --> 00:28:28,169
get the maintain its input dictionary so

828
00:28:26,340 --> 00:28:29,039
now a new Pokemon character comes out or

829
00:28:28,169 --> 00:28:30,630
some like that you wanna be able to

830
00:28:29,039 --> 00:28:32,490
tected your training set you gotta go

831
00:28:30,630 --> 00:28:35,850
ahead and make manage and that's a huge

832
00:28:32,490 --> 00:28:37,710
pain and also this becomes very language

833
00:28:35,850 --> 00:28:39,029
specific as well so now I have to

834
00:28:37,710 --> 00:28:40,710
maintain a trail you know an input

835
00:28:39,029 --> 00:28:42,240
dictionary for you know Swedish I need

836
00:28:40,710 --> 00:28:44,760
input we'll have one for English I need

837
00:28:42,240 --> 00:28:45,010
to have one for Mandarin and so on and I

838
00:28:44,760 --> 00:28:47,350
real

839
00:28:45,010 --> 00:28:48,550
didn't want to do that so I smell a lot

840
00:28:47,350 --> 00:28:50,169
of time here trying to figure out and

841
00:28:48,550 --> 00:28:52,300
it's currently what this does it's just

842
00:28:50,170 --> 00:28:54,670
identifies multi words based upon solely

843
00:28:52,300 --> 00:28:56,020
on the training set itself so if a word

844
00:28:54,670 --> 00:28:57,250
accurate curves by itself pretty

845
00:28:56,020 --> 00:28:58,600
frequently in the training set it

846
00:28:57,250 --> 00:29:00,370
considers that a base word it creates

847
00:28:58,600 --> 00:29:01,179
its own input dictionary on just so this

848
00:29:00,370 --> 00:29:04,330
way you can specifically target

849
00:29:01,180 --> 00:29:05,890
languages and so this is really cool and

850
00:29:04,330 --> 00:29:07,510
this those things as I said like I like

851
00:29:05,890 --> 00:29:08,860
pickup the newest man name or pokemons

852
00:29:07,510 --> 00:29:12,520
or sand like that without you having to

853
00:29:08,860 --> 00:29:14,290
go ahead and update it yourself it's not

854
00:29:12,520 --> 00:29:15,460
perfect this is kind of like you still

855
00:29:14,290 --> 00:29:17,440
will have false positives they'll still

856
00:29:15,460 --> 00:29:18,670
have false negatives so this will see

857
00:29:17,440 --> 00:29:20,920
something that's continuously involved

858
00:29:18,670 --> 00:29:22,390
in as well they're also probably the

859
00:29:20,920 --> 00:29:24,430
biggest challenge for this area is for

860
00:29:22,390 --> 00:29:27,700
baseboard to be identified you have to

861
00:29:24,430 --> 00:29:29,890
occur by itself in the training set so

862
00:29:27,700 --> 00:29:32,530
that is also can be problematic

863
00:29:29,890 --> 00:29:33,820
sometimes and I can talk about to you

864
00:29:32,530 --> 00:29:35,139
afterwards about this - there's a couple

865
00:29:33,820 --> 00:29:36,790
of different tweaks or something to have

866
00:29:35,140 --> 00:29:40,150
common you know words like I love you

867
00:29:36,790 --> 00:29:41,770
you know or like I love blank that are

868
00:29:40,150 --> 00:29:43,000
kind of hard coded in this as well so

869
00:29:41,770 --> 00:29:48,670
that you know it's guaranteed to go

870
00:29:43,000 --> 00:29:49,750
ahead and pick those up so I want to

871
00:29:48,670 --> 00:29:52,420
kind of go back in the Wayback Machine

872
00:29:49,750 --> 00:29:55,750
though for passwords cons because this

873
00:29:52,420 --> 00:30:01,180
talk here by I'm getting his name wrong

874
00:29:55,750 --> 00:30:03,820
and I apologize Markos números her at

875
00:30:01,180 --> 00:30:06,310
the password con 2012 this one slide

876
00:30:03,820 --> 00:30:10,300
caused me a lot of lost sleep it really

877
00:30:06,310 --> 00:30:11,500
just vexed me so I want kind of

878
00:30:10,300 --> 00:30:12,639
highlight this a little bit here but

879
00:30:11,500 --> 00:30:14,890
basically he came out with this thing

880
00:30:12,640 --> 00:30:16,230
called ordered Markoff a numerator which

881
00:30:14,890 --> 00:30:18,310
is a kind of brute force type of attack

882
00:30:16,230 --> 00:30:20,140
and if we zoom in at the very beginning

883
00:30:18,310 --> 00:30:21,610
of slide things look great to me because

884
00:30:20,140 --> 00:30:23,020
I'm used to seeing all my tool at the

885
00:30:21,610 --> 00:30:26,169
very top the most effective password

886
00:30:23,020 --> 00:30:27,190
cracker out there so yeah we just do

887
00:30:26,170 --> 00:30:29,320
minute very beginning it looks great

888
00:30:27,190 --> 00:30:31,480
okay on top you know that's down there

889
00:30:29,320 --> 00:30:33,480
at the bottom but if you let this can

890
00:30:31,480 --> 00:30:38,470
run out here

891
00:30:33,480 --> 00:30:40,990
it just gets bloody and I don't like

892
00:30:38,470 --> 00:30:43,530
that you know so and you'll notice that

893
00:30:40,990 --> 00:30:46,000
you know when it's a it was a pcfg

894
00:30:43,530 --> 00:30:48,160
it kinda hits his plateau it doesn't do

895
00:30:46,000 --> 00:30:50,680
very much after that and that's a

896
00:30:48,160 --> 00:30:52,390
problem because and this is a kind of

897
00:30:50,680 --> 00:30:53,680
known issue with it there is that if you

898
00:30:52,390 --> 00:30:55,720
don't have something in a training set

899
00:30:53,680 --> 00:30:58,230
it would never try and when actually

900
00:30:55,720 --> 00:30:59,970
cracking the password so someone use a

901
00:30:58,230 --> 00:31:01,530
different word that was never seen it

902
00:30:59,970 --> 00:31:02,970
would never try that guess if it's a use

903
00:31:01,530 --> 00:31:04,200
a number for example that was never in

904
00:31:02,970 --> 00:31:06,600
the 3rd train set it would never try

905
00:31:04,200 --> 00:31:08,520
that as well so we do really get the

906
00:31:06,600 --> 00:31:09,629
beginning and then you know after screen

907
00:31:08,520 --> 00:31:10,918
all these like lower lower probability

908
00:31:09,630 --> 00:31:12,929
guesses there it would just become

909
00:31:10,919 --> 00:31:16,669
basically not an effective attacker

910
00:31:12,929 --> 00:31:19,440
after that point so that's problematic

911
00:31:16,669 --> 00:31:23,040
so I've been going ahead and making a

912
00:31:19,440 --> 00:31:25,910
lot changes since 2012 this here is a

913
00:31:23,040 --> 00:31:29,460
more recent one by and from signs uh

914
00:31:25,910 --> 00:31:32,280
master census here and this looks a lot

915
00:31:29,460 --> 00:31:35,790
there to me okay so this is you know

916
00:31:32,280 --> 00:31:38,070
pure pcfg versus omen now this is a

917
00:31:35,790 --> 00:31:40,590
short cracking session though but at

918
00:31:38,070 --> 00:31:42,270
least I'm on the top again there but I

919
00:31:40,590 --> 00:31:43,409
want be fully honest if we run this

920
00:31:42,270 --> 00:31:45,929
cracking session for much much longer

921
00:31:43,410 --> 00:31:47,280
the same problems than occur okay I'm

922
00:31:45,929 --> 00:31:48,960
gonna still gonna go ahead and exhaust

923
00:31:47,280 --> 00:31:50,549
off in which all the passwords I saw you

924
00:31:48,960 --> 00:31:52,710
know combinations I saw in the the

925
00:31:50,549 --> 00:31:54,210
training set there and people are gonna

926
00:31:52,710 --> 00:31:57,570
try stuff that just what I didn't see it

927
00:31:54,210 --> 00:31:58,980
all so eventually if you run this longer

928
00:31:57,570 --> 00:32:02,010
omen will start to catch up and then

929
00:31:58,980 --> 00:32:03,720
surpass pcfg s and once again that's not

930
00:32:02,010 --> 00:32:05,100
acceptable to me I really want to go

931
00:32:03,720 --> 00:32:07,890
ahead and have the best you know most

932
00:32:05,100 --> 00:32:09,449
accurate password model out there so I

933
00:32:07,890 --> 00:32:11,309
did what any you know you know typical

934
00:32:09,450 --> 00:32:13,860
academic would and I went ahead and just

935
00:32:11,309 --> 00:32:16,740
kind of stole that idea so I've

936
00:32:13,860 --> 00:32:19,889
incorporated was one of the moment

937
00:32:16,740 --> 00:32:23,309
developers Maximillian they're a Pete

938
00:32:19,890 --> 00:32:25,710
omen directly into the pcfg grammar and

939
00:32:23,309 --> 00:32:27,360
so what this means there is that it will

940
00:32:25,710 --> 00:32:29,640
go ahead and swap between your standard

941
00:32:27,360 --> 00:32:32,189
more traditional pcfg attacks and these

942
00:32:29,640 --> 00:32:35,190
omen you know group forest type

943
00:32:32,190 --> 00:32:37,260
generated guesses their dependent what

944
00:32:35,190 --> 00:32:38,940
the current probability was now in order

945
00:32:37,260 --> 00:32:41,040
to do this I had to go ahead and assign

946
00:32:38,940 --> 00:32:43,110
a probability to omen guesses so that's

947
00:32:41,040 --> 00:32:45,270
what the proof all this here was was

948
00:32:43,110 --> 00:32:47,100
basically me saying okay you know only

949
00:32:45,270 --> 00:32:49,770
works on probabilities it works on these

950
00:32:47,100 --> 00:32:51,719
ideas called levels so you know you'll

951
00:32:49,770 --> 00:32:53,100
have you know like a typical Markoff

952
00:32:51,720 --> 00:32:54,510
attack it looks at you know what layer

953
00:32:53,100 --> 00:32:56,790
falls the next letter and it's kind of

954
00:32:54,510 --> 00:32:59,610
what happens there so you know if you

955
00:32:56,790 --> 00:33:01,940
see like Jes the next letter is probably

956
00:32:59,610 --> 00:33:04,379
another s4 you know Jesus of course or

957
00:33:01,940 --> 00:33:06,630
Jessica I mean and the next one would be

958
00:33:04,380 --> 00:33:08,250
also you for Jesus because those are

959
00:33:06,630 --> 00:33:09,400
kind of things that show up very common

960
00:33:08,250 --> 00:33:11,980
and

961
00:33:09,400 --> 00:33:14,910
and if you get some things like a ESM or

962
00:33:11,980 --> 00:33:16,780
jf2 they do feel much much less probable

963
00:33:14,910 --> 00:33:18,010
so next thing I need to do with

964
00:33:16,780 --> 00:33:21,549
calculate a key space for each of these

965
00:33:18,010 --> 00:33:23,860
different omen levels and then I go

966
00:33:21,549 --> 00:33:25,840
ahead and I try to see for these omen

967
00:33:23,860 --> 00:33:27,520
levels here in the training set how many

968
00:33:25,840 --> 00:33:29,139
of the passwords that would crack if you

969
00:33:27,520 --> 00:33:30,760
ran it against it for that omen level

970
00:33:29,140 --> 00:33:32,260
and once I have all this information

971
00:33:30,760 --> 00:33:34,390
here I can go ahead and assign a

972
00:33:32,260 --> 00:33:36,280
probability to a level based upon each

973
00:33:34,390 --> 00:33:37,450
individual guess that it makes so that

974
00:33:36,280 --> 00:33:38,950
way now I have a very fine green

975
00:33:37,450 --> 00:33:40,030
probability assigned to this there and I

976
00:33:38,950 --> 00:33:41,650
know when I started need to start going

977
00:33:40,030 --> 00:33:43,450
ahead and generating guesses versus omen

978
00:33:41,650 --> 00:33:45,130
first it trying to generate guess listen

979
00:33:43,450 --> 00:33:46,780
you know another message there and I

980
00:33:45,130 --> 00:33:47,650
want to be completely upfront is all the

981
00:33:46,780 --> 00:33:49,780
reasons why I love coming to these

982
00:33:47,650 --> 00:33:51,130
password cons here is I'm always looking

983
00:33:49,780 --> 00:33:52,418
at other techniques people are proposing

984
00:33:51,130 --> 00:33:53,919
as well because I want to be able to

985
00:33:52,419 --> 00:33:56,470
borrow integrate and you know all that

986
00:33:53,919 --> 00:33:58,299
stuff in there as well so I'm constantly

987
00:33:56,470 --> 00:33:59,679
you know I'm very happy when I see more

988
00:33:58,299 --> 00:34:01,330
advanced technique taken you come out

989
00:33:59,679 --> 00:34:05,710
here in order to be able to kind of

990
00:34:01,330 --> 00:34:06,879
integrate it into this tool set now but

991
00:34:05,710 --> 00:34:08,350
that being said if you're actually

992
00:34:06,880 --> 00:34:11,440
looking at you making use of this tool

993
00:34:08,350 --> 00:34:12,940
set here one really effective feature is

994
00:34:11,440 --> 00:34:14,889
to be able to go ahead disable that

995
00:34:12,940 --> 00:34:16,090
whole Omen integrations and there's a

996
00:34:14,889 --> 00:34:18,100
couple of reasons why you might want to

997
00:34:16,090 --> 00:34:19,929
do this first of all you know pcfg

998
00:34:18,100 --> 00:34:21,159
degeneration is slow so you might want

999
00:34:19,929 --> 00:34:22,540
to be able para live to work a little

1000
00:34:21,159 --> 00:34:23,980
bit so maybe you'll have omen running

1001
00:34:22,540 --> 00:34:26,109
and you know one session there and then

1002
00:34:23,980 --> 00:34:27,639
you know a normal standard pcfg attack

1003
00:34:26,109 --> 00:34:28,960
another that will allow you to get a

1004
00:34:27,639 --> 00:34:32,350
little more speed up and paralyze that

1005
00:34:28,960 --> 00:34:34,000
work the other thing though is that the

1006
00:34:32,350 --> 00:34:37,839
one thing I've been finding though is

1007
00:34:34,000 --> 00:34:40,960
that and I'll get into this a little

1008
00:34:37,840 --> 00:34:42,970
more later but finding good training

1009
00:34:40,960 --> 00:34:44,500
sets is really hard so a lot of times

1010
00:34:42,969 --> 00:34:46,868
what will happen is you'll train on

1011
00:34:44,500 --> 00:34:49,060
passwords where there's no duplicates in

1012
00:34:46,869 --> 00:34:50,619
the training set and you'll see this in

1013
00:34:49,060 --> 00:34:51,850
a lot of dumps because you know they try

1014
00:34:50,619 --> 00:34:53,619
to make it smaller they don't include

1015
00:34:51,850 --> 00:34:56,830
username and the password is just a draw

1016
00:34:53,619 --> 00:34:58,750
hash hash is not salted so you'll only

1017
00:34:56,830 --> 00:35:00,190
get things like one two uh meal password

1018
00:34:58,750 --> 00:35:03,540
one two three that show up at your data

1019
00:35:00,190 --> 00:35:06,010
set once this is a problem but you know

1020
00:35:03,540 --> 00:35:07,420
for longer cracking sections it can be

1021
00:35:06,010 --> 00:35:08,859
overcome a little bit with the pcfg so

1022
00:35:07,420 --> 00:35:11,350
still sometimes useful BL train on these

1023
00:35:08,859 --> 00:35:13,509
you know data sets but unfortunately

1024
00:35:11,350 --> 00:35:14,890
omit itself really struggles when you

1025
00:35:13,510 --> 00:35:17,380
train it on data sets that don't have

1026
00:35:14,890 --> 00:35:20,430
duplicates so in that case I recommend

1027
00:35:17,380 --> 00:35:23,250
turning off oming guests generation

1028
00:35:20,430 --> 00:35:25,078
in running it you know omen whistle on a

1029
00:35:23,250 --> 00:35:28,619
tray another day it said they may not

1030
00:35:25,079 --> 00:35:30,539
quite ly closely relate to the target

1031
00:35:28,619 --> 00:35:33,240
you're trying to target but at least it

1032
00:35:30,539 --> 00:35:34,319
was trained on duplicates so in order to

1033
00:35:33,240 --> 00:35:35,759
do that all you need to do though is

1034
00:35:34,319 --> 00:35:37,950
just there's a Skip route flag that you

1035
00:35:35,760 --> 00:35:39,240
can have when you're running it and then

1036
00:35:37,950 --> 00:35:43,230
when you do that there you'll skip all

1037
00:35:39,240 --> 00:35:45,209
the brute-force guesses well I'm talking

1038
00:35:43,230 --> 00:35:48,270
about turning off different options - I

1039
00:35:45,210 --> 00:35:51,059
might also mention you can turn off

1040
00:35:48,270 --> 00:35:52,859
taste bag lean for the pcfg guesser as

1041
00:35:51,059 --> 00:35:54,779
well so in order to do that you just

1042
00:35:52,859 --> 00:35:56,369
give it the flag all lower and it will

1043
00:35:54,779 --> 00:35:58,770
no longer do any case mangling and it

1044
00:35:56,369 --> 00:35:59,789
will only generate lowercase guesses so

1045
00:35:58,770 --> 00:36:02,849
the question might be like why do you

1046
00:35:59,789 --> 00:36:04,619
want to do that one option might be that

1047
00:36:02,849 --> 00:36:06,390
the password hash is case insensitive I

1048
00:36:04,619 --> 00:36:07,829
don't really find that's really the case

1049
00:36:06,390 --> 00:36:09,000
when you're using pcfg attacks though

1050
00:36:07,829 --> 00:36:10,619
because if the password hashes case

1051
00:36:09,000 --> 00:36:11,940
insensitive it's probably a super fast

1052
00:36:10,619 --> 00:36:13,500
run and you're running some other attack

1053
00:36:11,940 --> 00:36:15,210
against it instead you're not gonna be

1054
00:36:13,500 --> 00:36:17,789
cracking land man who is this you know

1055
00:36:15,210 --> 00:36:20,670
tool here where I find it much more

1056
00:36:17,789 --> 00:36:23,250
useful though is you might have an idea

1057
00:36:20,670 --> 00:36:25,700
how your target is doing their case

1058
00:36:23,250 --> 00:36:28,079
mangling because people are very

1059
00:36:25,700 --> 00:36:29,460
individualistic or when they pick a case

1060
00:36:28,079 --> 00:36:31,500
mangling strategy they tend to follow

1061
00:36:29,460 --> 00:36:32,640
that so if potentially you've you know

1062
00:36:31,500 --> 00:36:34,950
found out some of your other passwords

1063
00:36:32,640 --> 00:36:37,319
you might have an idea how that target

1064
00:36:34,950 --> 00:36:39,390
is currently going ahead and mangling

1065
00:36:37,319 --> 00:36:40,440
their their case so rather than trying

1066
00:36:39,390 --> 00:36:42,210
all different keeps making these

1067
00:36:40,440 --> 00:36:44,250
strategies well you might want to do is

1068
00:36:42,210 --> 00:36:44,910
only try a specific case magnetizer you

1069
00:36:44,250 --> 00:36:46,619
might want to try to capitalize

1070
00:36:44,910 --> 00:36:48,089
everything or you know the only cap

1071
00:36:46,619 --> 00:36:51,660
applies first letter the last letter or

1072
00:36:48,089 --> 00:36:52,859
so on in that case what you can do and

1073
00:36:51,660 --> 00:36:54,118
there's something that's really kind of

1074
00:36:52,859 --> 00:36:57,328
cool that John Ripper supports is

1075
00:36:54,119 --> 00:36:59,069
instead of using kind of the STD in tag

1076
00:36:57,329 --> 00:37:00,839
there you can use what's a pipe tag

1077
00:36:59,069 --> 00:37:02,788
instead when you're running in your John

1078
00:37:00,839 --> 00:37:04,710
repre session and what that allows you

1079
00:37:02,789 --> 00:37:07,109
to do is and apply additional mangling

1080
00:37:04,710 --> 00:37:08,640
rules to whatever you're pushing in on

1081
00:37:07,109 --> 00:37:10,680
input so that way I can have a

1082
00:37:08,640 --> 00:37:13,440
traditional John Ripper you know rule

1083
00:37:10,680 --> 00:37:15,149
set and I can spent manually specify the

1084
00:37:13,440 --> 00:37:17,430
keys namely rule I want to apply to this

1085
00:37:15,150 --> 00:37:18,990
here and in all the guesses I push into

1086
00:37:17,430 --> 00:37:22,460
this here will be have that gate that

1087
00:37:18,990 --> 00:37:22,459
case mangling rule applied to it there

1088
00:37:24,929 --> 00:37:30,309
so I've been talking about the the place

1089
00:37:27,759 --> 00:37:31,660
on tool set for a while and so one

1090
00:37:30,309 --> 00:37:33,609
really cool thing that kind of happened

1091
00:37:31,660 --> 00:37:35,618
was I was talking with Adam the director

1092
00:37:33,609 --> 00:37:37,660
the creator of hash cat and he was

1093
00:37:35,619 --> 00:37:39,939
interested in incorporating this into

1094
00:37:37,660 --> 00:37:42,578
half cat directly as a slow guessing a

1095
00:37:39,939 --> 00:37:44,439
mode generating mode which is awesome I

1096
00:37:42,579 --> 00:37:46,989
mean I'm not gonna say no to that the

1097
00:37:44,439 --> 00:37:50,199
problem though is that hash cat is not

1098
00:37:46,989 --> 00:37:51,849
written in Python so in order to do this

1099
00:37:50,199 --> 00:37:55,179
here I had to go ahead and rewrite the

1100
00:37:51,849 --> 00:37:57,009
entire a guesser in C and I hate writing

1101
00:37:55,179 --> 00:37:58,569
in C you know I don't know if I can

1102
00:37:57,009 --> 00:38:02,920
write a hello world program with about 5

1103
00:37:58,569 --> 00:38:04,329
buffer overflows and memory leak so you

1104
00:38:02,920 --> 00:38:07,179
know use this killer code with so you

1105
00:38:04,329 --> 00:38:11,529
know caution too but so I went ahead did

1106
00:38:07,179 --> 00:38:12,819
this and currently it's it's working

1107
00:38:11,529 --> 00:38:14,679
actually pretty good it doesn't have all

1108
00:38:12,819 --> 00:38:16,119
the features of the Python toolset and I

1109
00:38:14,679 --> 00:38:17,259
always expect the place on tool set it's

1110
00:38:16,119 --> 00:38:19,599
gonna be a little bit more feature-rich

1111
00:38:17,259 --> 00:38:21,339
than the C one simply because I enjoy

1112
00:38:19,599 --> 00:38:22,359
writing in Python there and so I'll

1113
00:38:21,339 --> 00:38:25,269
generally probably go ahead and

1114
00:38:22,359 --> 00:38:26,859
implement that there instead of this so

1115
00:38:25,269 --> 00:38:28,839
if you want to actually get this working

1116
00:38:26,859 --> 00:38:30,400
I really recommend contacting me first

1117
00:38:28,839 --> 00:38:31,599
because it is a little bit temperamental

1118
00:38:30,400 --> 00:38:33,549
you know whenever you get compiled code

1119
00:38:31,599 --> 00:38:35,199
running on random computers you know

1120
00:38:33,549 --> 00:38:37,959
that are not mine you know it just

1121
00:38:35,199 --> 00:38:38,949
behaves a little bit differently but to

1122
00:38:37,959 --> 00:38:40,629
try to make it a little bit easier

1123
00:38:38,949 --> 00:38:42,369
though I am using kind of a modified

1124
00:38:40,630 --> 00:38:44,109
version hash cats make file so if you

1125
00:38:42,369 --> 00:38:45,459
can build hash code on your computer you

1126
00:38:44,109 --> 00:38:48,009
at least have a fighting chance of being

1127
00:38:45,459 --> 00:38:50,410
a build this as well but I've really

1128
00:38:48,009 --> 00:38:52,749
only tested it so far in Ubud do or boo

1129
00:38:50,410 --> 00:38:54,399
to you know we ran windows subsystem for

1130
00:38:52,749 --> 00:38:58,660
Linux so that way I can write it on this

1131
00:38:54,400 --> 00:39:01,359
laptop right here too and then also I'm

1132
00:38:58,660 --> 00:39:02,920
never gonna go ahead and have the the

1133
00:39:01,359 --> 00:39:04,390
machine learning portion that goes ahead

1134
00:39:02,920 --> 00:39:06,069
and generates these rule sets or it

1135
00:39:04,390 --> 00:39:07,509
didn't see there's just too many nice

1136
00:39:06,069 --> 00:39:09,130
things and fights on there for me to go

1137
00:39:07,509 --> 00:39:10,299
ahead and make that transition so it's

1138
00:39:09,130 --> 00:39:12,069
all you're always gonna have to go ahead

1139
00:39:10,299 --> 00:39:15,309
and use the that the trainer that's

1140
00:39:12,069 --> 00:39:18,130
found in the the Python tool set in

1141
00:39:15,309 --> 00:39:19,599
order to generate new rule sets now a

1142
00:39:18,130 --> 00:39:21,039
couple other you know disadvantages

1143
00:39:19,599 --> 00:39:22,689
since I do eventually want make use of a

1144
00:39:21,039 --> 00:39:25,179
hash function reality versus they

1145
00:39:22,689 --> 00:39:27,428
haven't develop myself but in the seat

1146
00:39:25,179 --> 00:39:29,619
compiled C version there's no session

1147
00:39:27,429 --> 00:39:31,089
saver restore so once you kill it off

1148
00:39:29,619 --> 00:39:31,660
it's gone you guys start over from

1149
00:39:31,089 --> 00:39:33,489
scratch again

1150
00:39:31,660 --> 00:39:34,660
there's also no stats outputs because I

1151
00:39:33,489 --> 00:39:34,920
want to be able make use of half cat

1152
00:39:34,660 --> 00:39:37,109
stack

1153
00:39:34,920 --> 00:39:38,549
outputs and I haven't gone ahead and

1154
00:39:37,109 --> 00:39:40,348
implemented Oh being guests generation

1155
00:39:38,549 --> 00:39:42,210
in it yet either there so those are some

1156
00:39:40,349 --> 00:39:43,859
limitations so the question was all

1157
00:39:42,210 --> 00:39:45,210
those limitations and you know how hard

1158
00:39:43,859 --> 00:39:47,220
is it get to install and run like why

1159
00:39:45,210 --> 00:39:49,380
would you bother with this and I

1160
00:39:47,220 --> 00:39:51,629
personally have to say I'm using this

1161
00:39:49,380 --> 00:39:53,460
now mostly versus the Python tool set

1162
00:39:51,630 --> 00:39:54,990
and the reason for that it's it's about

1163
00:39:53,460 --> 00:39:56,940
twenty times faster than the poison

1164
00:39:54,990 --> 00:39:58,439
toolset and I always knew that Python

1165
00:39:56,940 --> 00:39:59,880
was slow and see what's fast but I

1166
00:39:58,440 --> 00:40:01,500
thought that I was like holy crap you

1167
00:39:59,880 --> 00:40:06,240
know I was not expecting that big of a

1168
00:40:01,500 --> 00:40:09,839
speed up there so if you needed real

1169
00:40:06,240 --> 00:40:11,009
crack faster you know hashes I highly

1170
00:40:09,839 --> 00:40:17,308
recommend going ahead and doing this

1171
00:40:11,010 --> 00:40:19,079
instead so I've been talking a little

1172
00:40:17,309 --> 00:40:20,549
bit about guest generation but now I

1173
00:40:19,079 --> 00:40:22,319
can't get into the kind of the other

1174
00:40:20,549 --> 00:40:24,259
side of things here of how do we go

1175
00:40:22,319 --> 00:40:26,940
about training these rulesets

1176
00:40:24,260 --> 00:40:27,960
so there's a lot of different reasons

1177
00:40:26,940 --> 00:40:30,049
why you would want to go ahead and

1178
00:40:27,960 --> 00:40:33,000
create a custom rule set for your target

1179
00:40:30,049 --> 00:40:34,500
so probably the number one thing is that

1180
00:40:33,000 --> 00:40:36,809
you know language and country paid plays

1181
00:40:34,500 --> 00:40:41,339
a large role and password creation now

1182
00:40:36,809 --> 00:40:43,500
at least for most you know non Mandarin

1183
00:40:41,339 --> 00:40:45,359
speakers the the actual mangly rules

1184
00:40:43,500 --> 00:40:46,680
they do or seem to be fairly the same to

1185
00:40:45,359 --> 00:40:47,910
me but at least the base words that

1186
00:40:46,680 --> 00:40:50,339
they're choosing there are gonna be very

1187
00:40:47,910 --> 00:40:51,930
different so being able to you know kind

1188
00:40:50,339 --> 00:40:53,578
of customize that is really nice and

1189
00:40:51,930 --> 00:40:55,140
there's been some academic papers there

1190
00:40:53,579 --> 00:40:56,309
that you know show that you do you know

1191
00:40:55,140 --> 00:40:58,170
pretty good even if you try it you know

1192
00:40:56,309 --> 00:41:01,549
use like walkie you against you know you

1193
00:40:58,170 --> 00:41:03,540
know different dates that like Japanese

1194
00:41:01,549 --> 00:41:04,740
you can still you can do better if you

1195
00:41:03,540 --> 00:41:08,130
train it aren't really on you know you

1196
00:41:04,740 --> 00:41:09,509
know Japanese passwords also a big thing

1197
00:41:08,130 --> 00:41:11,970
is that corporate password creation

1198
00:41:09,510 --> 00:41:13,440
policies are password creation

1199
00:41:11,970 --> 00:41:15,209
strategies tend to be a little bit

1200
00:41:13,440 --> 00:41:16,799
different than what you see on websites

1201
00:41:15,210 --> 00:41:17,970
so if you're attacking corporate

1202
00:41:16,799 --> 00:41:19,200
passwords you probably want to go be

1203
00:41:17,970 --> 00:41:20,189
l-train on corporate password first

1204
00:41:19,200 --> 00:41:21,750
there because people have a tendency

1205
00:41:20,190 --> 00:41:23,880
that you know with pass or change rules

1206
00:41:21,750 --> 00:41:24,930
and complexity rules and stuff like that

1207
00:41:23,880 --> 00:41:28,069
they're to do a little bit more than

1208
00:41:24,930 --> 00:41:28,069
they do for their social networking

1209
00:41:31,000 --> 00:41:35,180
so the other kind of reasons why you

1210
00:41:34,220 --> 00:41:36,828
might want to be able to this is you're

1211
00:41:35,180 --> 00:41:39,379
trying to target a specific path

1212
00:41:36,829 --> 00:41:40,760
recreation policy so for example if you

1213
00:41:39,380 --> 00:41:42,410
train on rock you there's no real

1214
00:41:40,760 --> 00:41:43,700
pasture creation policy in that at all

1215
00:41:42,410 --> 00:41:44,868
but you might be trying to target

1216
00:41:43,700 --> 00:41:46,279
passwords it have to be at least you

1217
00:41:44,869 --> 00:41:47,720
know 14 characters long or have a

1218
00:41:46,280 --> 00:41:51,200
special character in them or have mus

1219
00:41:47,720 --> 00:41:52,520
have uppercase character as well so you

1220
00:41:51,200 --> 00:41:54,078
might want to only train up passwords

1221
00:41:52,520 --> 00:41:55,190
that possess the characteristics that

1222
00:41:54,079 --> 00:41:58,160
you're actually looking to be able to

1223
00:41:55,190 --> 00:42:00,680
target now you can also go ahead and

1224
00:41:58,160 --> 00:42:02,629
mainly edit these roles files by hand I

1225
00:42:00,680 --> 00:42:04,460
made sure not to include any sort of you

1226
00:42:02,630 --> 00:42:06,140
know checksum or CRC value or anything

1227
00:42:04,460 --> 00:42:07,280
else in these as well because it's

1228
00:42:06,140 --> 00:42:08,569
really nice to be able to kind of go in

1229
00:42:07,280 --> 00:42:09,710
open up the text editor and just go and

1230
00:42:08,569 --> 00:42:12,859
say I really want to go ahead and make

1231
00:42:09,710 --> 00:42:14,500
this mangling rule specifically for

1232
00:42:12,859 --> 00:42:16,759
whatever target I'm doing as well and

1233
00:42:14,500 --> 00:42:18,859
part of my to-do list is to be able

1234
00:42:16,760 --> 00:42:21,530
instead of having to open up a you know

1235
00:42:18,859 --> 00:42:23,450
you know a text editor is it provides

1236
00:42:21,530 --> 00:42:24,710
some sort of like standardized GUI for

1237
00:42:23,450 --> 00:42:27,200
people to be able to use as well for

1238
00:42:24,710 --> 00:42:30,920
this here but that's you know I have

1239
00:42:27,200 --> 00:42:31,939
none that yet so the other kind of

1240
00:42:30,920 --> 00:42:33,920
option here and this is kind of

1241
00:42:31,940 --> 00:42:36,920
highlighted instead of talks here is

1242
00:42:33,920 --> 00:42:38,839
that this is really nice for being able

1243
00:42:36,920 --> 00:42:40,099
to analyze current password dumps as

1244
00:42:38,839 --> 00:42:41,450
well so I might not be trying to go

1245
00:42:40,099 --> 00:42:43,010
ahead and crack passwords listed here

1246
00:42:41,450 --> 00:42:44,629
but I might be SP trying to figure out

1247
00:42:43,010 --> 00:42:46,099
you know what are the statistics around

1248
00:42:44,630 --> 00:42:48,050
this password dump you know how common

1249
00:42:46,099 --> 00:42:49,400
are some of these words you know what

1250
00:42:48,050 --> 00:42:51,200
are good some to common mangling rules

1251
00:42:49,400 --> 00:42:53,270
that they do where did his dump come

1252
00:42:51,200 --> 00:42:54,980
from and this is a really good you that

1253
00:42:53,270 --> 00:42:56,030
usage for this as well so you can run

1254
00:42:54,980 --> 00:42:58,310
this on current pasture dumps that

1255
00:42:56,030 --> 00:42:59,510
you're you know cracking or Devo cane

1256
00:42:58,310 --> 00:43:02,270
and it give you a lot of information

1257
00:42:59,510 --> 00:43:04,540
into about what those dumps so you know

1258
00:43:02,270 --> 00:43:04,540
are

1259
00:43:05,569 --> 00:43:09,270
so I don't know how many of you are

1260
00:43:07,289 --> 00:43:11,549
familiar with hashes at org this is a

1261
00:43:09,270 --> 00:43:13,349
great wonderful site there's a lot of

1262
00:43:11,549 --> 00:43:15,180
different password hashes available on

1263
00:43:13,349 --> 00:43:16,530
that there but there's a lot of

1264
00:43:15,180 --> 00:43:19,368
challenges when you want to go ahead and

1265
00:43:16,530 --> 00:43:22,859
train on these data sets so let's say

1266
00:43:19,369 --> 00:43:24,210
you want to go ahead and you know this

1267
00:43:22,859 --> 00:43:25,470
happen bunch of different leaks on it

1268
00:43:24,210 --> 00:43:26,609
there so you can grab them you have a

1269
00:43:25,470 --> 00:43:29,069
general idea of where they came from

1270
00:43:26,609 --> 00:43:31,348
which is kind of nice as well so like

1271
00:43:29,069 --> 00:43:32,160
let's say try to do this like I'm gonna

1272
00:43:31,349 --> 00:43:33,990
say wrongly

1273
00:43:32,160 --> 00:43:37,319
I'm not even try say it but it's

1274
00:43:33,990 --> 00:43:39,509
basically a a Chinese website for

1275
00:43:37,319 --> 00:43:41,308
graduates who are looking to be able to

1276
00:43:39,510 --> 00:43:42,809
get new jobs so that seems like a very

1277
00:43:41,309 --> 00:43:43,829
interesting target demographic that you

1278
00:43:42,809 --> 00:43:45,750
might want to go ahead and create you

1279
00:43:43,829 --> 00:43:48,839
know a password cracking a rule set in

1280
00:43:45,750 --> 00:43:51,210
order to target there so if you do this

1281
00:43:48,839 --> 00:43:53,160
from hashes at org the first thing is

1282
00:43:51,210 --> 00:43:56,400
that you want to go ahead and train on

1283
00:43:53,160 --> 00:43:57,899
only the plaintext passwords so don't go

1284
00:43:56,400 --> 00:43:59,339
ahead and download like the hash pairs

1285
00:43:57,900 --> 00:44:01,349
because it's gonna sink that the hash is

1286
00:43:59,339 --> 00:44:05,520
part of the password and then it's going

1287
00:44:01,349 --> 00:44:06,960
to generate garbage so that's pretty

1288
00:44:05,520 --> 00:44:10,770
much the first thing you really need to

1289
00:44:06,960 --> 00:44:12,900
be able to do the big problem with most

1290
00:44:10,770 --> 00:44:14,700
of these data sets though is that they

1291
00:44:12,900 --> 00:44:16,260
do not contain contain duplicates and as

1292
00:44:14,700 --> 00:44:17,939
I said earlier duplicates are really

1293
00:44:16,260 --> 00:44:19,619
important especially for the very

1294
00:44:17,940 --> 00:44:21,299
beginning of a password cracking session

1295
00:44:19,619 --> 00:44:22,349
because if you don't have duplicates

1296
00:44:21,299 --> 00:44:24,299
it's not going to know that one two

1297
00:44:22,349 --> 00:44:25,380
three four five six it's a really common

1298
00:44:24,299 --> 00:44:30,000
password it's just going to look like a

1299
00:44:25,380 --> 00:44:31,319
random number so it really helps to have

1300
00:44:30,000 --> 00:44:32,579
duplicates in your data sets so if you

1301
00:44:31,319 --> 00:44:34,470
can get data set that actually does

1302
00:44:32,579 --> 00:44:36,839
contain duplicates you're gonna do much

1303
00:44:34,470 --> 00:44:39,660
better that being said as a password

1304
00:44:36,839 --> 00:44:42,538
cracking session goes longer that

1305
00:44:39,660 --> 00:44:43,558
becomes less important because and

1306
00:44:42,539 --> 00:44:44,700
you're probably already cracked one two

1307
00:44:43,559 --> 00:44:47,549
three four five six using a different

1308
00:44:44,700 --> 00:44:49,319
cracking session anyway so be able to

1309
00:44:47,549 --> 00:44:50,490
can't get some of those base words and

1310
00:44:49,319 --> 00:44:52,799
you know extract it out and really kind

1311
00:44:50,490 --> 00:44:54,629
of target towards your audience it's

1312
00:44:52,799 --> 00:44:56,279
actually still it still can be useful

1313
00:44:54,630 --> 00:44:57,660
then we're trained on password lists

1314
00:44:56,279 --> 00:45:00,930
that only contain you know unique

1315
00:44:57,660 --> 00:45:02,430
passwords now another problem we try and

1316
00:45:00,930 --> 00:45:05,098
train on these you know data sets though

1317
00:45:02,430 --> 00:45:06,779
is it only contains crack passwords

1318
00:45:05,099 --> 00:45:08,490
you're not trained on the passwords that

1319
00:45:06,779 --> 00:45:09,809
you haven't cracked and those are the

1320
00:45:08,490 --> 00:45:11,069
passwords you really often hear about

1321
00:45:09,809 --> 00:45:12,420
there

1322
00:45:11,069 --> 00:45:13,859
so it's a little bit like drinking your

1323
00:45:12,420 --> 00:45:15,299
own bathwater when it comes to you know

1324
00:45:13,859 --> 00:45:16,680
training on a current cracking session

1325
00:45:15,299 --> 00:45:18,150
and then trying

1326
00:45:16,680 --> 00:45:20,879
rerun in a cracking session against it

1327
00:45:18,150 --> 00:45:22,380
there so it really helps me out training

1328
00:45:20,880 --> 00:45:25,440
on data sets to have a high completion

1329
00:45:22,380 --> 00:45:30,660
rate of cracked passwords or plaintext

1330
00:45:25,440 --> 00:45:32,550
passwords are actually the best so in

1331
00:45:30,660 --> 00:45:34,109
order to use a trainer it's also part of

1332
00:45:32,550 --> 00:45:37,050
the paesan toolset

1333
00:45:34,109 --> 00:45:38,640
it's called trainer at PI and basically

1334
00:45:37,050 --> 00:45:40,440
you you give it a name that you want

1335
00:45:38,640 --> 00:45:42,328
call the rule set there and then you

1336
00:45:40,440 --> 00:45:43,589
also give it you know the training set

1337
00:45:42,329 --> 00:45:46,440
that you want to be able to run it on as

1338
00:45:43,589 --> 00:45:49,828
well and it basically runs a bunch of

1339
00:45:46,440 --> 00:45:50,849
different things here and the first

1340
00:45:49,829 --> 00:45:53,910
thing I really want to kind of talk

1341
00:45:50,849 --> 00:45:56,160
about though is that encoding is really

1342
00:45:53,910 --> 00:45:58,799
important now by default they'll try to

1343
00:45:56,160 --> 00:46:02,670
auto detect encoding of the training set

1344
00:45:58,800 --> 00:46:04,170
that you're learning on but you can

1345
00:46:02,670 --> 00:46:05,520
manually specify this as well if you are

1346
00:46:04,170 --> 00:46:07,349
absolutely sure that you know the

1347
00:46:05,520 --> 00:46:08,520
encoding that you want and the reason

1348
00:46:07,349 --> 00:46:10,530
why I'm bringing this up is by default

1349
00:46:08,520 --> 00:46:12,960
usually you kept is probably pretty good

1350
00:46:10,530 --> 00:46:14,970
for a lot of different web passwords if

1351
00:46:12,960 --> 00:46:16,050
you're trying to crack those but we

1352
00:46:14,970 --> 00:46:18,299
start trying to track cracks things like

1353
00:46:16,050 --> 00:46:20,579
file encryption a lot of times the

1354
00:46:18,300 --> 00:46:22,200
encoding for those will sometimes be you

1355
00:46:20,579 --> 00:46:24,270
know whatever it'll set up on their

1356
00:46:22,200 --> 00:46:25,558
local computer there so you want to be

1357
00:46:24,270 --> 00:46:26,640
able to target that specifically in

1358
00:46:25,559 --> 00:46:28,799
order to do that you need to be able

1359
00:46:26,640 --> 00:46:31,259
train on a training set that's of the

1360
00:46:28,799 --> 00:46:34,410
same encoding type so as I kind of

1361
00:46:31,260 --> 00:46:36,000
mention a little bit earlier password

1362
00:46:34,410 --> 00:46:37,440
encoding is a panda but I try to

1363
00:46:36,000 --> 00:46:39,720
automate a lot of as possible it's still

1364
00:46:37,440 --> 00:46:40,859
going to be a problem but at least

1365
00:46:39,720 --> 00:46:42,450
hopefully this is helping a little bit

1366
00:46:40,859 --> 00:46:46,380
out was to be able to deal with some of

1367
00:46:42,450 --> 00:46:47,759
these encoding issues there so this

1368
00:46:46,380 --> 00:46:49,410
one's three different passes through

1369
00:46:47,760 --> 00:46:51,599
train set so it takes a little bit of

1370
00:46:49,410 --> 00:46:53,040
time first through the pass through the

1371
00:46:51,599 --> 00:46:54,839
train set it learns to character

1372
00:46:53,040 --> 00:46:55,980
frequency analysis and tries to figure

1373
00:46:54,839 --> 00:46:59,160
out what the base words are for the

1374
00:46:55,980 --> 00:47:02,250
multi word guessing and so this goes

1375
00:46:59,160 --> 00:47:03,690
through pretty fast especially if you're

1376
00:47:02,250 --> 00:47:05,579
only dealing with like a couple you know

1377
00:47:03,690 --> 00:47:06,990
million passwords when you start trying

1378
00:47:05,579 --> 00:47:09,569
to feed a billion passwords through this

1379
00:47:06,990 --> 00:47:11,490
it takes a lot longer and the day you

1380
00:47:09,569 --> 00:47:12,690
know II tried to be keep everything in

1381
00:47:11,490 --> 00:47:13,950
memory too so they'll start using up

1382
00:47:12,690 --> 00:47:16,230
even more memory as it goes ahead and

1383
00:47:13,950 --> 00:47:17,669
starts passing screwed out there so the

1384
00:47:16,230 --> 00:47:19,530
one real main requirement when you do

1385
00:47:17,670 --> 00:47:21,420
this though is you need do you need to

1386
00:47:19,530 --> 00:47:23,160
be able to fit the entire password data

1387
00:47:21,420 --> 00:47:24,299
set that you're training on in memory in

1388
00:47:23,160 --> 00:47:26,399
your computer so when you start dealing

1389
00:47:24,299 --> 00:47:28,770
with skis you know terabyte you know the

1390
00:47:26,400 --> 00:47:30,299
dumps of you know crack passwords you

1391
00:47:28,770 --> 00:47:30,540
may not want to try to train on the full

1392
00:47:30,299 --> 00:47:31,590
set

1393
00:47:30,540 --> 00:47:35,670
there you might want to try it only a

1394
00:47:31,590 --> 00:47:37,440
subset of the passwords the second path

1395
00:47:35,670 --> 00:47:39,450
through that's much of the real parsing

1396
00:47:37,440 --> 00:47:41,070
that we think about so it goes head you

1397
00:47:39,450 --> 00:47:44,430
know science probably always numbers to

1398
00:47:41,070 --> 00:47:48,660
Keith's mangling to kind of masks within

1399
00:47:44,430 --> 00:47:50,069
a keyboard walks and so on and in the

1400
00:47:48,660 --> 00:47:51,480
third path through is really just for

1401
00:47:50,070 --> 00:47:52,740
almond there so it goes ahead and tries

1402
00:47:51,480 --> 00:47:54,450
to assign different probabilities of

1403
00:47:52,740 --> 00:47:56,850
different omen levels based upon the

1404
00:47:54,450 --> 00:47:58,830
information that it's learned so after

1405
00:47:56,850 --> 00:48:00,690
it does this though it displays data

1406
00:47:58,830 --> 00:48:02,610
about the datasets and I'm still adding

1407
00:48:00,690 --> 00:48:03,930
to this here of stuff that I find useful

1408
00:48:02,610 --> 00:48:05,520
personally when I just want to be able

1409
00:48:03,930 --> 00:48:07,589
to look at this data set and try figure

1410
00:48:05,520 --> 00:48:10,500
out where it came from so for example it

1411
00:48:07,590 --> 00:48:13,310
like post out the top five URL domains

1412
00:48:10,500 --> 00:48:15,960
like the top ones will almost always be

1413
00:48:13,310 --> 00:48:17,910
web mail counts so you can have nor dos

1414
00:48:15,960 --> 00:48:20,550
but what can't falls underneath those

1415
00:48:17,910 --> 00:48:22,259
there is you know often decide the the

1416
00:48:20,550 --> 00:48:23,940
site that the passwords were extracted

1417
00:48:22,260 --> 00:48:25,230
from because people will always use you

1418
00:48:23,940 --> 00:48:29,580
know site names and their passwords

1419
00:48:25,230 --> 00:48:32,250
there also it parses out dates to I'm

1420
00:48:29,580 --> 00:48:34,140
sorry I didn't so it'll kind of like

1421
00:48:32,250 --> 00:48:36,180
list which years it's not fine most

1422
00:48:34,140 --> 00:48:38,040
common in the data set as well because

1423
00:48:36,180 --> 00:48:39,419
that's pretty easy to be nice to be able

1424
00:48:38,040 --> 00:48:42,240
figure out you know maybe Windows data

1425
00:48:39,420 --> 00:48:44,280
set got released now there's a long tail

1426
00:48:42,240 --> 00:48:46,169
the current year is almost never the top

1427
00:48:44,280 --> 00:48:47,460
most probably year because people create

1428
00:48:46,170 --> 00:48:49,260
their passes beforehand and use that

1429
00:48:47,460 --> 00:48:50,490
year so you're really only seeing people

1430
00:48:49,260 --> 00:48:52,140
who created passwords recently for the

1431
00:48:50,490 --> 00:48:53,669
most current year but yeah look at that

1432
00:48:52,140 --> 00:48:56,129
the gift like okay you know Rock you

1433
00:48:53,670 --> 00:49:03,810
which is the day set here are 2008

1434
00:48:56,130 --> 00:49:05,520
that's when it got you know released so

1435
00:49:03,810 --> 00:49:09,090
one final thing I kind of really want to

1436
00:49:05,520 --> 00:49:10,860
talk about though is pcfg attacks are

1437
00:49:09,090 --> 00:49:12,690
slow so be really nice to be able to use

1438
00:49:10,860 --> 00:49:14,940
this data in other cracking techniques

1439
00:49:12,690 --> 00:49:17,910
so who here knows about the prints

1440
00:49:14,940 --> 00:49:19,680
attack in for a directly to hash cat or

1441
00:49:17,910 --> 00:49:21,899
you have to use a preprocessor for you

1442
00:49:19,680 --> 00:49:23,310
know or directly integrated in John

1443
00:49:21,900 --> 00:49:26,640
Ripper you have to use a preprocessor

1444
00:49:23,310 --> 00:49:28,620
processor in hash cat it's a really nice

1445
00:49:26,640 --> 00:49:31,170
cracking mode and basically what does it

1446
00:49:28,620 --> 00:49:32,430
just combines all the different words an

1447
00:49:31,170 --> 00:49:33,480
input dictionary together and then

1448
00:49:32,430 --> 00:49:38,160
hopefully you can crack some passwords

1449
00:49:33,480 --> 00:49:39,840
with it and it's really fast and that's

1450
00:49:38,160 --> 00:49:40,830
a huge advantage for it out there and it

1451
00:49:39,840 --> 00:49:42,890
actually does a pre decent job of

1452
00:49:40,830 --> 00:49:44,630
cracking passwords but the

1453
00:49:42,890 --> 00:49:46,098
big problem was Prince attacks is

1454
00:49:44,630 --> 00:49:48,109
generating those input dictionaries in

1455
00:49:46,099 --> 00:49:49,490
the first place because the success of

1456
00:49:48,109 --> 00:49:51,380
your prints to tag is really gonna

1457
00:49:49,490 --> 00:49:53,750
depend on how good that input dictionary

1458
00:49:51,380 --> 00:49:56,329
is because you need to both have words

1459
00:49:53,750 --> 00:49:58,400
that you would you know expect BL built

1460
00:49:56,329 --> 00:50:00,109
upon in order to do that but you also

1461
00:49:58,400 --> 00:50:02,480
need a lot of for lack of a better term

1462
00:50:00,109 --> 00:50:03,619
junk in your data set or your set as

1463
00:50:02,480 --> 00:50:06,079
well so it'll do things like you know

1464
00:50:03,619 --> 00:50:07,940
append eleven to the backup password or

1465
00:50:06,079 --> 00:50:09,980
a pen a special character so if you

1466
00:50:07,940 --> 00:50:11,029
created a you know Princeton put

1467
00:50:09,980 --> 00:50:13,369
dictionary it doesn't have all those

1468
00:50:11,029 --> 00:50:14,750
values it's never going to try them and

1469
00:50:13,369 --> 00:50:17,329
you're not gonna crack a lot of

1470
00:50:14,750 --> 00:50:19,309
passwords the problem was a Combinator

1471
00:50:17,329 --> 00:50:21,470
attack though is that the every single

1472
00:50:19,309 --> 00:50:23,180
you know additional field that you add

1473
00:50:21,470 --> 00:50:25,700
to input dictionary they're you know

1474
00:50:23,180 --> 00:50:27,470
exponentially increases the the number

1475
00:50:25,700 --> 00:50:29,660
of guesses you're gonna have to make so

1476
00:50:27,470 --> 00:50:31,279
it's really a hard judge of bail makeup

1477
00:50:29,660 --> 00:50:32,960
an input dictionary to be you know

1478
00:50:31,279 --> 00:50:34,069
contain all the junk that you want in

1479
00:50:32,960 --> 00:50:36,019
order to be able to make it effective

1480
00:50:34,069 --> 00:50:37,400
cracker it you crack intact but not too

1481
00:50:36,019 --> 00:50:38,509
much junk so that way you never actually

1482
00:50:37,400 --> 00:50:41,660
get around cracking the passwords that

1483
00:50:38,510 --> 00:50:43,849
you want so since I fall is probability

1484
00:50:41,660 --> 00:50:45,680
information though I can make you know

1485
00:50:43,849 --> 00:50:47,420
kind of really nice bespoke you know

1486
00:50:45,680 --> 00:50:49,190
dictionaries be able to use in a prince

1487
00:50:47,420 --> 00:50:50,569
attack there so I'll go ahead and

1488
00:50:49,190 --> 00:50:53,210
they'll include a number of you know big

1489
00:50:50,569 --> 00:50:55,190
words there and a bunch of the smaller

1490
00:50:53,210 --> 00:50:59,470
probability are a smaller ones as well

1491
00:50:55,190 --> 00:51:01,519
and only include the top X most probable

1492
00:50:59,470 --> 00:51:03,230
values into this as well so you can

1493
00:51:01,519 --> 00:51:05,839
specify how big you want your prince

1494
00:51:03,230 --> 00:51:07,970
input dictionary to be I've been finding

1495
00:51:05,839 --> 00:51:09,619
that you know a hundred thousand words

1496
00:51:07,970 --> 00:51:12,500
is probably you know kind of sweet spot

1497
00:51:09,619 --> 00:51:14,720
for people make a lot of guesses and

1498
00:51:12,500 --> 00:51:16,190
having high accuracy but you can really

1499
00:51:14,720 --> 00:51:17,390
leverage that so if you have a big GPU

1500
00:51:16,190 --> 00:51:19,460
foreign you might not have a really big

1501
00:51:17,390 --> 00:51:23,900
input dictionary so you can specify this

1502
00:51:19,460 --> 00:51:26,420
here so in order to be able to generate

1503
00:51:23,900 --> 00:51:28,430
this here basically there's another tool

1504
00:51:26,420 --> 00:51:29,599
in the tool set called princeling dot pi

1505
00:51:28,430 --> 00:51:30,649
so you can run it you can see the help

1506
00:51:29,599 --> 00:51:32,359
thing and you can go ahead and generate

1507
00:51:30,650 --> 00:51:33,740
gives dictionaries there but the reason

1508
00:51:32,359 --> 00:51:34,970
why i really want to focus on this first

1509
00:51:33,740 --> 00:51:36,890
of all the different cracking attacks

1510
00:51:34,970 --> 00:51:41,200
though it's because prints really is

1511
00:51:36,890 --> 00:51:43,730
kind of like the lazy man's attack like

1512
00:51:41,200 --> 00:51:45,799
trying crack passwords is actually it's

1513
00:51:43,730 --> 00:51:47,990
it takes a lot of effort if you really

1514
00:51:45,799 --> 00:51:48,950
want to craft a customized attack there

1515
00:51:47,990 --> 00:51:50,209
you know you have to look at you know

1516
00:51:48,950 --> 00:51:51,649
your target you have to do monitor

1517
00:51:50,210 --> 00:51:52,970
cracking session see how you're doing

1518
00:51:51,650 --> 00:51:54,259
all this other stuff there and sometimes

1519
00:51:52,970 --> 00:51:56,000
you just want to be able to I don't have

1520
00:51:54,259 --> 00:51:58,040
a drink in see you know whatever

1521
00:51:56,000 --> 00:51:59,270
so prints attacks generally that's the

1522
00:51:58,040 --> 00:52:01,190
type of attack you want to be able to

1523
00:51:59,270 --> 00:52:03,410
kind of just stroll on your computer

1524
00:52:01,190 --> 00:52:05,210
keep those GPUs running and then can't

1525
00:52:03,410 --> 00:52:08,779
walk off and still actually have a semi

1526
00:52:05,210 --> 00:52:09,859
effective attack there so the problem

1527
00:52:08,780 --> 00:52:11,900
was that those I was talking about the

1528
00:52:09,859 --> 00:52:13,430
input dictionary it was a big pain in

1529
00:52:11,900 --> 00:52:14,780
the butt to be able to always kind of

1530
00:52:13,430 --> 00:52:16,040
worry about how to craft these input

1531
00:52:14,780 --> 00:52:17,690
dictionaries here so this just makes it

1532
00:52:16,040 --> 00:52:19,130
a little bit easier so that way prints

1533
00:52:17,690 --> 00:52:21,109
attacks really can you can just kind of

1534
00:52:19,130 --> 00:52:22,310
like okay it's clean time launched a

1535
00:52:21,109 --> 00:52:24,529
printer you know create a custom

1536
00:52:22,310 --> 00:52:26,660
dictionary launch prints attack and run

1537
00:52:24,530 --> 00:52:27,920
it the other thing is this really prints

1538
00:52:26,660 --> 00:52:29,779
attacks are actually pretty nice when

1539
00:52:27,920 --> 00:52:31,849
you are going ahead and you have a crack

1540
00:52:29,780 --> 00:52:33,740
list from the current set as well so you

1541
00:52:31,849 --> 00:52:35,150
you look at like you may have are only

1542
00:52:33,740 --> 00:52:37,700
practically a 40% of passwords

1543
00:52:35,150 --> 00:52:39,500
let's go ahead you know crane it create

1544
00:52:37,700 --> 00:52:41,689
custom input dictionary and then launch

1545
00:52:39,500 --> 00:52:43,340
a print stack with that there and I'm

1546
00:52:41,690 --> 00:52:45,140
hoping to be able to do this similar for

1547
00:52:43,340 --> 00:52:46,820
other types of rules as well but that's

1548
00:52:45,140 --> 00:52:48,020
kind of an ongoing project for mine VL

1549
00:52:46,820 --> 00:52:50,630
creates things like you know customized

1550
00:52:48,020 --> 00:52:52,790
case mangling rules or customized rule

1551
00:52:50,630 --> 00:52:54,550
you know we're normal dictionary rules

1552
00:52:52,790 --> 00:52:57,109
as well

1553
00:52:54,550 --> 00:52:59,080
so that's pretty much it here does

1554
00:52:57,109 --> 00:53:06,909
anyone have any questions

1555
00:52:59,080 --> 00:53:06,909
[Applause]

