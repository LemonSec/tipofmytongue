1
00:00:01,900 --> 00:00:24,580
waiver program Laura student with no
time to start thinking thank you very

2
00:00:24,580 --> 00:00:25,049
much

3
00:00:25,050 --> 00:00:28,880
good morning everyone

4
00:00:28,880 --> 00:00:35,570
day

5
00:00:35,570 --> 00:00:41,950
very good thank you for coming to the
building where I work so I worked at the

6
00:00:41,950 --> 00:00:46,870
computer lab and I'd like to talk about
public key authentication and so we've

7
00:00:46,870 --> 00:00:50,829
talked a lot about password
authentication and the kind of thing to

8
00:00:50,829 --> 00:00:55,080
the passwords of the only thing that
people used to authenticate in reality I

9
00:00:55,080 --> 00:01:00,010
like to remind you that a few small
niches and which other alternative

10
00:01:00,010 --> 00:01:06,750
methods are used in practice as well
like for example take SSH which you can

11
00:01:06,750 --> 00:01:11,350
authenticate with with a password but
actually it's quite common to have a key

12
00:01:11,350 --> 00:01:17,119
file in your home directory which you
used to authenticate with us and as you

13
00:01:17,119 --> 00:01:22,310
probably know the way that works is when
you set up an SSH connection it just

14
00:01:22,310 --> 00:01:27,899
does key exchange stuff and sets up an
encrypted channel and wanted done that a

15
00:01:27,899 --> 00:01:33,140
signature is passed from the clients to
decipher and us what authenticates you

16
00:01:33,140 --> 00:01:39,229
and the way it works is that it takes
the SessionID which is a kind of unique

17
00:01:39,229 --> 00:01:44,619
key data derived from the handshake
protocol and its science stopped on the

18
00:01:44,619 --> 00:01:50,020
client using your private key under sub
already knows your public key I'm so it

19
00:01:50,020 --> 00:01:54,119
can verify the signature it can check us
this is a valid signature for the

20
00:01:54,119 --> 00:01:58,320
private keep us to prove the ownership
of your private key but I actually ever

21
00:01:58,320 --> 00:02:02,939
giving the private key to anyone and you
know a lot of people use this every day

22
00:02:02,939 --> 00:02:07,020
without even thinking about it but this
is essentially what's what's going on if

23
00:02:07,020 --> 00:02:14,010
you look into a similarly we get a
similar thing happening with TLS

24
00:02:14,010 --> 00:02:18,940
his client certificates it's not quite
as widely used but in a few kind of

25
00:02:18,940 --> 00:02:22,060
little demands I believe in Estonia a
lot of government services are

26
00:02:22,060 --> 00:02:26,100
authenticated with client certificates
for example

27
00:02:26,100 --> 00:02:29,980
and the principle that works is actually
kind of similar again so you have some

28
00:02:29,980 --> 00:02:35,200
kind of handshake through which an
encrypted channel get set up and then a

29
00:02:35,200 --> 00:02:39,030
signature it gets passed from the client
to the server and in this case the thing

30
00:02:39,030 --> 00:02:43,920
that gets signed is actually the
messages of the TLS handshake and it

31
00:02:43,920 --> 00:02:47,890
passes that signature and along with it
it passes the public key and a

32
00:02:47,890 --> 00:02:52,160
certificate and so the reason for the
certificate that is actually only

33
00:02:52,160 --> 00:02:56,810
because the server doesn't know the
public key for all of the users up front

34
00:02:56,810 --> 00:03:03,290
so it trusts a certificate authority to
do that the binding of user IDs to

35
00:03:03,290 --> 00:03:08,880
identify us to public keys but the
signature verification actually happens

36
00:03:08,880 --> 00:03:14,900
in exactly the same way and we can
continue this further saudis find out a

37
00:03:14,900 --> 00:03:18,220
little authenticated devices are getting
quite popular especially in some

38
00:03:18,220 --> 00:03:22,700
enterprises I quite like these for like
two factor authentication and how they

39
00:03:22,700 --> 00:03:27,070
work is again a very similar principle
in this case it's a kind of challenge

40
00:03:27,070 --> 00:03:32,519
response protocol and you've got to
private key stored on this little token

41
00:03:32,520 --> 00:03:37,480
itself or encrypted on the server
through a slightly convoluted protocol

42
00:03:37,480 --> 00:03:43,250
but the basic principle of this protocol
is once again you get a challenge from

43
00:03:43,250 --> 00:03:48,150
the sava challenges signed using the
private key and handed over to the

44
00:03:48,150 --> 00:03:52,220
server and server contract signature
through all of these three methods are

45
00:03:52,220 --> 00:03:57,650
all examples of using public key
authentication and it does actually what

46
00:03:57,650 --> 00:04:02,310
really nicely in practice with a big
problem with all of these schemes is

47
00:04:02,310 --> 00:04:07,230
well aware you've got to store private
key in the private key can get stolen so

48
00:04:07,230 --> 00:04:10,280
it could get stolen through many
different ways like it might be that

49
00:04:10,280 --> 00:04:14,750
someone gets hold of the attack against
hold up to physical device containing

50
00:04:14,750 --> 00:04:19,230
the private key in my chest to extract
it may be days like to some social

51
00:04:19,230 --> 00:04:23,080
engineering and convince you to send
your private key file to the attacker by

52
00:04:23,080 --> 00:04:28,159
email maybe they managed to get a backup
of your device whatever so through some

53
00:04:28,160 --> 00:04:34,270
mechanism whatever this private key
material might be stolen it's especially

54
00:04:34,270 --> 00:04:37,630
vulnerable if it's stored simply on the
filesystem

55
00:04:37,630 --> 00:04:40,830
general-purpose device but even if it's
a hardware device you can imagine

56
00:04:40,830 --> 00:04:45,460
somebody just making a hardware device
so some kind of extra protection is

57
00:04:45,460 --> 00:04:49,510
necessary and the standard way that this
is done is you have some kind of

58
00:04:49,510 --> 00:04:55,000
password or passphrase which encrypts
the private key file rather you derive

59
00:04:55,000 --> 00:05:01,010
some kind of symmetric encryption key
from a password or passphrase put it

60
00:05:01,010 --> 00:05:07,250
ideally through some slow key generation
function key derivation function and

61
00:05:07,250 --> 00:05:12,490
then you can decrypt the key thing that
people use

62
00:05:12,490 --> 00:05:20,720
PBA keep ATM or credit or a script or
you could use are gone to a casino the

63
00:05:20,720 --> 00:05:24,760
other has shrunk since we talked about
all kind of his ways to slow down and

64
00:05:24,760 --> 00:05:31,039
Itasca so if an attacker managed to get
hold of this risky material how to what

65
00:05:31,040 --> 00:05:35,630
extent can be slowed them down simply by
making the computation sufficiently

66
00:05:35,630 --> 00:05:36,890
expensive

67
00:05:36,890 --> 00:05:43,110
stay probably won't be able to break the
Padres in some amount of time but this

68
00:05:43,110 --> 00:05:47,840
is a bit unsatisfying I find because
basically we're just pounding the

69
00:05:47,840 --> 00:05:53,729
attacker by computational resources and
essentially looking at the ratio of

70
00:05:53,730 --> 00:05:58,530
computational resources of your own
device to those of the attacker and if

71
00:05:58,530 --> 00:06:02,349
the attackers willing to spend some
money that ratio can be pretty high so

72
00:06:02,350 --> 00:06:05,460
you simply can't make the local
computation too expensive otherwise

73
00:06:05,460 --> 00:06:10,440
it'll take too long on the local device
so nice to be able to protect this

74
00:06:10,440 --> 00:06:16,370
secret material a bit better and so I
like to talk about two ways of doing

75
00:06:16,370 --> 00:06:23,240
this the first one is simply a way of
enabling replication of keys in an

76
00:06:23,240 --> 00:06:27,920
instantaneous manner so that if somebody
loses their device they can revoke its

77
00:06:27,920 --> 00:06:34,750
crops using some other device and this
gets assurances that police the time

78
00:06:34,750 --> 00:06:40,180
Dutch attack a house to break whatever
protectionism turkey is only time

79
00:06:40,180 --> 00:06:43,510
between the key being stolen and being
revoked

80
00:06:43,510 --> 00:06:47,969
limits the amount of time during which
the secret is expose

81
00:06:47,969 --> 00:06:52,549
and then the second thing I like to do
is to talk about actually rate limiting

82
00:06:52,549 --> 00:06:57,769
the password gases from an attack
although done just by using a slow hash

83
00:06:57,769 --> 00:07:02,539
function so the first of these
techniques is a paper from done bernay

84
00:07:02,539 --> 00:07:07,529
and his collaborators from 2001 I
haven't seen that much implemented in

85
00:07:07,529 --> 00:07:14,219
practice actually but it's it's kind of
mildly cited and the second part of this

86
00:07:14,219 --> 00:07:19,699
is our contribution that this is
specific to RSA I believe it's possible

87
00:07:19,699 --> 00:07:23,409
to do something similar with elliptic
curves but I'm just going to talk about

88
00:07:23,409 --> 00:07:27,188
our say only that and so I need to do a
little bit of mass but it's very

89
00:07:27,189 --> 00:07:32,699
lightweight mass hopefully not too much
for this time of morning if you remember

90
00:07:32,699 --> 00:07:39,069
how r us a works a private key and the
public each consists of two numbers they

91
00:07:39,069 --> 00:07:43,659
share one number and which is called the
module US Justice product of two prime

92
00:07:43,659 --> 00:07:48,399
saying that he may be remember and then
there is a private exponent and a public

93
00:07:48,399 --> 00:07:52,849
exponent and the private exponent is
what makes the private key and the

94
00:07:52,849 --> 00:07:57,709
public exponent can be known by anyone
and if you want to calculate an RSA

95
00:07:57,709 --> 00:08:01,929
signature the way it works is that
there's some strength that you want to

96
00:08:01,929 --> 00:08:06,998
sign which I called stuff here and you
want to sign up with some private key to

97
00:08:06,999 --> 00:08:10,059
weight RSA does that he is you must take
some cash

98
00:08:10,059 --> 00:08:14,839
of that stuff and then you pound it a
bit and then you do a modular

99
00:08:14,839 --> 00:08:19,829
exponentiation so that is you take the
house which got some big number and take

100
00:08:19,829 --> 00:08:24,769
it to the power of deep the private
exponent and dude a small end which is

101
00:08:24,769 --> 00:08:30,549
which is known and the result of that is
is somebody to condemn pass around and

102
00:08:30,549 --> 00:08:34,438
up that is your signature under
something interesting we can do here

103
00:08:34,438 --> 00:08:40,740
which is we can take that exponents de
and we can split it into and we split it

104
00:08:40,740 --> 00:08:47,370
touched up the two components to the
original exponents deep and we can do

105
00:08:47,370 --> 00:08:52,380
that is to pick say dat which is drawn
from a uniform distribution between 0

106
00:08:52,380 --> 00:08:59,450
indeed just uniformly distributed random
number and NDP just be minus da so that

107
00:08:59,450 --> 00:09:03,860
way we split the key into to hospital
and now if you have enough data to back

108
00:09:03,860 --> 00:09:08,550
into the signature formula now you've
got to calculating the hash and it's

109
00:09:08,550 --> 00:09:12,849
something to the power da plus TV and if
you remember your math you can actually

110
00:09:12,850 --> 00:09:19,060
reforming this and actually turned into
two separate explanations so the summer

111
00:09:19,060 --> 00:09:24,589
in the exponent becomes a product when
when you split it out and so you've got

112
00:09:24,590 --> 00:09:30,410
independently dash to the power D eight
times the house to the power DP'd

113
00:09:30,410 --> 00:09:35,660
and this way you can actually want to
split the key you can construct an RSA

114
00:09:35,660 --> 00:09:39,880
signature without ever having to
assemble of the key material in one

115
00:09:39,880 --> 00:09:44,660
place so you can do different parts of
the computation in different places and

116
00:09:44,660 --> 00:09:47,740
then just bring them to get them
multiply them together and you get a

117
00:09:47,740 --> 00:09:52,480
ballot signature at the end this is kind
of interesting this is called mediated

118
00:09:52,480 --> 00:09:59,650
RSA and this is what's being proposed in
2001 the reason it's called mediated RSA

119
00:09:59,650 --> 00:10:06,360
is if you think about the setup how this
thing can be deployed normally we have

120
00:10:06,360 --> 00:10:09,410
the client and/or so far but now we're
going to introduce a third component

121
00:10:09,410 --> 00:10:15,079
called the mediator and mediated are
saying and we're now going to split the

122
00:10:15,080 --> 00:10:20,500
key material such that reports say dat
on the client and be beyond the mediator

123
00:10:20,500 --> 00:10:26,090
and so my father climbed more than
mediators able to construct a signature

124
00:10:26,090 --> 00:10:31,090
by itself the two have to work together
in order to construct a valid signature

125
00:10:31,090 --> 00:10:36,610
and the way the protocol works is like
this now so say does against some stuff

126
00:10:36,610 --> 00:10:40,570
to do you want to sign the client
confessed calculate the house of that

127
00:10:40,570 --> 00:10:45,740
and do the padding and you get to number
and it's not going to send that number

128
00:10:45,740 --> 00:10:50,870
to the mediator and the mediator is
going to perform its part of the

129
00:10:50,870 --> 00:10:55,700
exponentiation using its d be there
doesn't need to get out the db2 anyone

130
00:10:55,700 --> 00:11:03,290
else it only performed m2 PowerDVD
modern and Pakistan after a client the

131
00:11:03,290 --> 00:11:09,250
client can all do its part of the
exponentiation it has da so it can do em

132
00:11:09,250 --> 00:11:13,770
to the power da multiplied together with
the result that I got back from the

133
00:11:13,770 --> 00:11:19,829
mediator and is constructed about
signature and earned a significant part

134
00:11:19,830 --> 00:11:24,370
of the server and this can be used in
any of these signature based protocols

135
00:11:24,370 --> 00:11:29,830
so whether this is Fido or TLS client
certificate or SSH because they

136
00:11:29,830 --> 00:11:34,830
basically all use the same case if using
them in RSA mode they use essentially

137
00:11:34,830 --> 00:11:39,480
this signature scheme this actually
works you can construct the signature

138
00:11:39,480 --> 00:11:42,960
and the southern doesn't even realize
that the signature was constructed

139
00:11:42,960 --> 00:11:48,370
through this this mediated protocol now
I said I was going to talk about the

140
00:11:48,370 --> 00:11:52,850
revocation so the interesting thing you
can do now once you splits the key

141
00:11:52,850 --> 00:11:58,050
across these different devices is now
saying this shit a client gets stolen

142
00:11:58,050 --> 00:12:05,370
and its its key fragment eta is now in
the hands of a matter what the client

143
00:12:05,370 --> 00:12:09,880
now need to do some how is to make sure
that the mediator deletes its

144
00:12:09,880 --> 00:12:16,010
counterpart of this key and the
assertion here is that if he be no

145
00:12:16,010 --> 00:12:18,300
longer exists anywhere in the world

146
00:12:18,300 --> 00:12:24,040
then this ta is useless because if you
simply due to the power da fool for some

147
00:12:24,040 --> 00:12:28,540
it it's just some number it doesn't tell
you anything you can't use it for

148
00:12:28,540 --> 00:12:32,810
anything unless you also no debe

149
00:12:32,810 --> 00:12:39,189
property but there are a few holes in
this argument so far and in particular

150
00:12:39,190 --> 00:12:43,670
we don't know exactly like how does the
process of getting something from the

151
00:12:43,670 --> 00:12:49,839
mediator deleted work like how does the
client requests the mediator to delete

152
00:12:49,839 --> 00:12:55,790
something in the original paper it seems
to be assumed that there's some kind of

153
00:12:55,790 --> 00:13:01,589
out of band process for doing this so I
can go with their passwords to the

154
00:13:01,589 --> 00:13:05,880
mediator service and say hello I am
detrusor can you please delete my key

155
00:13:05,880 --> 00:13:10,350
fragment which is ok but it's not really
viable for kind of

156
00:13:10,350 --> 00:13:15,270
consumer internet purposes so we need
some way of authenticating requests to

157
00:13:15,270 --> 00:13:18,990
the mediator especially if those
requested deletions but actually even

158
00:13:18,990 --> 00:13:24,740
for signing requests it useful to
authenticate them and then the other

159
00:13:24,740 --> 00:13:30,640
thing was rate limiting would be very
nice here so the moments that some key

160
00:13:30,640 --> 00:13:35,930
fragment is still under a race begins
and now there's a race between the

161
00:13:35,930 --> 00:13:41,380
attack and the genuine use or if the
user is first to revoke the key then

162
00:13:41,380 --> 00:13:44,580
they've won because the attacker can't
do anything even if they subsequently

163
00:13:44,580 --> 00:13:49,440
break the encryption of the freshmen
that they stole they can't do anything

164
00:13:49,440 --> 00:13:55,980
with it so once as much one wants to get
to the point of revoking the key as

165
00:13:55,980 --> 00:14:00,120
quickly as possible while the attack the
same time is trying to break the

166
00:14:00,120 --> 00:14:04,350
encryption on this key pregnant as
quickly as possible so you've got this

167
00:14:04,350 --> 00:14:09,180
race between the true and anything we
can do to slow down the attack here is

168
00:14:09,180 --> 00:14:12,380
going to be an advantage to the user
because it gives them more time to

169
00:14:12,380 --> 00:14:18,760
revoke the key and now as we said we can
use a slow hash function to slow them

170
00:14:18,760 --> 00:14:24,439
down but other things we can do as well
so let's talk about the occasion of

171
00:14:24,440 --> 00:14:30,830
requests to the mediator and that is so
we've got this party set up again and as

172
00:14:30,830 --> 00:14:34,580
before we're going to calculate and
which is the hash of the stuff we want

173
00:14:34,580 --> 00:14:40,370
to sign but now to authenticate the
request to the mediator it's not only

174
00:14:40,370 --> 00:14:46,740
going to send to the mediator but also
to the power da

175
00:14:46,740 --> 00:14:53,190
so this can be any hash function now we
trust at a function to not be reversible

176
00:14:53,190 --> 00:14:59,370
and what the mediator does now is it
doesn't just simply take em to da into

177
00:14:59,370 --> 00:15:04,680
the DEP and send it back it first checks
this hash to topology a actors an

178
00:15:04,680 --> 00:15:09,319
authenticator for that particular
request because now the mediator can

179
00:15:09,320 --> 00:15:11,630
actually use it D be

180
00:15:11,630 --> 00:15:16,580
and calculated the hash of the message
that came in using the same hash

181
00:15:16,580 --> 00:15:20,130
function and can do it to the power DBA
and check

182
00:15:20,130 --> 00:15:26,200
whether we constructed a is a valid
signature for the use of public key and

183
00:15:26,200 --> 00:15:31,060
so it is a valid signatures end-users
proved that they know the correct da

184
00:15:31,060 --> 00:15:37,150
without giving any one da but if this
does not constructive politic nature

185
00:15:37,150 --> 00:15:42,579
then the mediator just says no sorry I'm
not going to do any signing and note

186
00:15:42,580 --> 00:15:46,730
also that this doesn't actually gives
the mediator permission to log into

187
00:15:46,730 --> 00:15:52,860
anything because the signature
constructed is a hash of em but the

188
00:15:52,860 --> 00:15:56,860
signature that appeals to log into the
server is actually to the power D

189
00:15:56,860 --> 00:16:02,530
whereas the signature it's constructed
here's how much of an apology so this

190
00:16:02,530 --> 00:16:05,990
signature has constructed in a valid
signature but it doesn't help but look

191
00:16:05,990 --> 00:16:12,360
into any service at all and now once the
mediation has validated that this is a

192
00:16:12,360 --> 00:16:17,780
valid signature then it will calculate
the m2 the polity be more than returned

193
00:16:17,780 --> 00:16:22,010
back to the client and the client can
now do the same thing as before it can

194
00:16:22,010 --> 00:16:27,850
construct a ballot signature and you
start to look into the service ok so we

195
00:16:27,850 --> 00:16:33,700
could indicate requested immediate but
coming back today so we have this race

196
00:16:33,700 --> 00:16:39,090
here between the the genuine user who
wants to revoke Turkey and the attacker

197
00:16:39,090 --> 00:16:44,100
who is trying to break the encryption so
we're going to assume now that the

198
00:16:44,100 --> 00:16:49,220
private key material on the device is
encrypted with a possible rather a key

199
00:16:49,220 --> 00:16:54,090
generate key derived from a possible and
so the standard way of doing that would

200
00:16:54,090 --> 00:16:58,610
be to use some slow key derivation
function I put a script here feel free

201
00:16:58,610 --> 00:17:03,800
to substitute with are going to or
whatever you like and then use some

202
00:17:03,800 --> 00:17:11,329
symmetric cipher probably an
authenticated site in order to then take

203
00:17:11,329 --> 00:17:17,020
the key fragment the eighth and
encrypted and stored at local but as I

204
00:17:17,020 --> 00:17:21,099
said the only thing limiting the
attacker here's their computational

205
00:17:21,099 --> 00:17:28,610
ability so I'm going to propose an
alternative scheme and the difference

206
00:17:28,610 --> 00:17:31,409
here is going to be that notice that

207
00:17:31,410 --> 00:17:35,990
if you have an encryption scheme like
dislike GCM for example it has an

208
00:17:35,990 --> 00:17:42,140
authentication tag and at the purpose of
that is to tell you whether the whether

209
00:17:42,140 --> 00:17:45,870
you have to write encryption key without
actually going through the decryption

210
00:17:45,870 --> 00:17:50,909
process and so that's a way of
preventing padding or other tax and

211
00:17:50,910 --> 00:17:56,410
suchlike but what we want to do here she
is a bit difference because in this case

212
00:17:56,410 --> 00:18:05,110
the match or the authenticator on the
encryption is a way that helps the

213
00:18:05,110 --> 00:18:09,510
attacker tell whether password guess is
correct or not because they can get a

214
00:18:09,510 --> 00:18:15,020
password and check do I get to write
checks for the encryption key . that are

215
00:18:15,020 --> 00:18:19,550
derived from the password underflow ok
well try to next one so this is exactly

216
00:18:19,550 --> 00:18:25,490
what had happened needs in order to do
an offline attack so instead we can use

217
00:18:25,490 --> 00:18:31,890
encryption scheme that does not have a
Mac so does not indicate the encryption

218
00:18:31,890 --> 00:18:36,900
which is normally something you would
like to do because it can be dangerous

219
00:18:36,900 --> 00:18:41,460
in various ways in this case it actually
is desirable in this case he would still

220
00:18:41,460 --> 00:18:46,070
use a slow hash function by all means
but he just put that into something like

221
00:18:46,070 --> 00:18:51,330
come to mode AES which gives you a key
stream of bits and so this is just some

222
00:18:51,330 --> 00:18:55,649
kind of random looking sequence of bits
that is derived from the password and

223
00:18:55,650 --> 00:19:02,240
you can access that with with the key
factors that you want to encrypt and he

224
00:19:02,240 --> 00:19:08,040
encouraged to keep fragment in as many
pics as your RSA keys big say 2048 bits

225
00:19:08,040 --> 00:19:12,170
for example so the output of this is
encrypted key problems again is just

226
00:19:12,170 --> 00:19:17,770
2048 bits because you've explored one
bit at a time and now an attacker who

227
00:19:17,770 --> 00:19:22,750
stole them this encrypted fragments the
attack is going to go and get some kind

228
00:19:22,750 --> 00:19:27,860
of passwords safe house prime minister
gas and they're just going to run

229
00:19:27,860 --> 00:19:33,370
dysfunction in reverse and they get them
some guests of the key fragment da prime

230
00:19:33,370 --> 00:19:39,899
and their guests or password is correct
then da Prime is going to equal da and

231
00:19:39,900 --> 00:19:40,440
so

232
00:19:40,440 --> 00:19:46,380
in case they can break the scheme but
the key thing that an attack on you to

233
00:19:46,380 --> 00:19:52,370
do here is to have some way of telling
whether they're guess is correct and

234
00:19:52,370 --> 00:19:58,850
what we can do now is observed that if
the password is correct the way we

235
00:19:58,850 --> 00:20:03,879
constructed this keep track of DA is
that we drew it from a uniform

236
00:20:03,880 --> 00:20:09,610
distribution somewhere between zero and
deep whereas now if the password is not

237
00:20:09,610 --> 00:20:17,330
correct what we get out is a 2048 bit
random but strength with no kind of

238
00:20:17,330 --> 00:20:21,540
authentication telling it whether this
case of the password was correct or not

239
00:20:21,540 --> 00:20:26,530
so what it looks like is a uniformly
distributed random number between 0 and

240
00:20:26,530 --> 00:20:34,260
two to the case so in both cases of the
decryption is some kind of uniformly

241
00:20:34,260 --> 00:20:38,879
distributed random number two
distribution is not exactly the same but

242
00:20:38,880 --> 00:20:42,410
so the only difference you can tell he
is that there's a difference in

243
00:20:42,410 --> 00:20:46,240
distribution between the correctly
decrypted keep track months and he

244
00:20:46,240 --> 00:20:51,750
incorrectly decrypted fragment because
you guessed the wrong password and well

245
00:20:51,750 --> 00:20:56,730
I wanted to study a little bit more
details so it just generated 50,000 RSA

246
00:20:56,730 --> 00:21:01,080
keys and how to look at the
distributions that come out and found

247
00:21:01,080 --> 00:21:04,689
that they do look somewhat similar these
two somewhat similar being a very

248
00:21:04,690 --> 00:21:11,440
precise cryptographic time of course in
particular you could put a bit of

249
00:21:11,440 --> 00:21:17,100
experimental data in the paper but the
highlight doctor high-level summary is

250
00:21:17,100 --> 00:21:23,350
that if you look at the entropy of these
corrects keefak months the entropy is

251
00:21:23,350 --> 00:21:27,560
almost as big as the entropy of a
completely random but strength so you've

252
00:21:27,560 --> 00:21:30,350
lost about one bit of entropy

253
00:21:30,350 --> 00:21:38,240
in by encoding this keep raccoons in a
2048 bit number and so the practical

254
00:21:38,240 --> 00:21:42,650
effect of this is say you try a password
you tried decrypting to keep fragment if

255
00:21:42,650 --> 00:21:47,679
the top it is one it's less likely that
your password guess was correct

256
00:21:47,679 --> 00:21:53,130
you still can't rule it out entirely but
it's at that point you can use this

257
00:21:53,130 --> 00:21:57,520
knowledge to prioritize your password
guesses but you can't rule out password

258
00:21:57,520 --> 00:22:02,580
guesses entirely because essentially
just one bit of entropy production here

259
00:22:02,580 --> 00:22:06,870
means you might have to guess half as
many passwords as you would otherwise

260
00:22:06,870 --> 00:22:11,979
but on the whole you still got a very
strong

261
00:22:11,980 --> 00:22:19,230
preserving most of the entropy in in the
password this whole idea that I wanted

262
00:22:19,230 --> 00:22:23,600
to present the general principle here is
you've got some attack attack

263
00:22:23,600 --> 00:22:28,780
they've stolen and encrypted key
fragment the key factor is encrypted

264
00:22:28,780 --> 00:22:33,570
with a passphrase passwords that they
don't know but they can try to offline

265
00:22:33,570 --> 00:22:41,210
attacks and so they can try to get this
DNA but the key thing here is that just

266
00:22:41,210 --> 00:22:45,400
by looking at the decrypted fragments
the attacker cannot tell whether the

267
00:22:45,400 --> 00:22:49,610
password was correct or not they can
kind of probabilistic you think this is

268
00:22:49,610 --> 00:22:53,689
less likely to be correct or more likely
to be correct but it's not a definite

269
00:22:53,690 --> 00:22:58,299
yes or now and so in order to tell
production at whether the password guess

270
00:22:58,299 --> 00:23:02,379
was correct or not the attacker has to
contact a mediator and has to perform

271
00:23:02,380 --> 00:23:07,630
one of these authenticated requests to
the mediator and this gives the mediator

272
00:23:07,630 --> 00:23:13,090
opportunity to rate limit those requests
because if the mediator request mediator

273
00:23:13,090 --> 00:23:18,559
guess and incoming signature with an
incorrect da prime here is not correct

274
00:23:18,559 --> 00:23:22,168
then the result is not going to be a
valid RSA signature so it's just going

275
00:23:22,169 --> 00:23:27,039
to say no and so the attacker then
learns the factor that particular

276
00:23:27,039 --> 00:23:31,320
password was incorrect but it doesn't
plan anything else that would help it

277
00:23:31,320 --> 00:23:35,649
break the scheme in other ways so it
still has to make a request to the

278
00:23:35,650 --> 00:23:40,230
mediator but every single password guess
and this allows the mediator to perform

279
00:23:40,230 --> 00:23:43,490
rate limiting them and they consider
after some number of

280
00:23:43,490 --> 00:23:48,210
cases it's going to restricts your
guesses 21 guess every 10 seconds and

281
00:23:48,210 --> 00:23:52,010
then even if you have a pretty weak
password it's actually still going to

282
00:23:52,010 --> 00:23:57,059
give the user a really long time to
revoke turkey that's really all I wanted

283
00:23:57,059 --> 00:24:01,740
to talk about so that's the general
scheme of the system that we said if you

284
00:24:01,740 --> 00:24:10,020
want to see more detail later he writes
Martin K L dot com slash past 15 the

285
00:24:10,020 --> 00:24:15,280
idea of Mrs aids mediated RSA was just
stolen from the stock paper on the list

286
00:24:15,280 --> 00:24:18,360
here hopefully I still have a few more
questions

287
00:24:18,360 --> 00:24:20,000
minutes for questions thank you

