1
00:00:01,540 --> 00:00:05,890
[Music]

2
00:00:04,690 --> 00:00:08,090
[Applause]

3
00:00:05,890 --> 00:00:12,178
[Music]

4
00:00:08,090 --> 00:00:14,730
hi everyone and welcome to Stardust in

5
00:00:12,179 --> 00:00:17,369
today's short video we will learn how to

6
00:00:14,730 --> 00:00:19,810
acquire and analyze Windows memory with

7
00:00:17,369 --> 00:00:22,390
dump it and Stardust

8
00:00:19,810 --> 00:00:24,310
first let's log in and download the

9
00:00:22,390 --> 00:00:27,000
koumei windows toolkit on the machine to

10
00:00:24,310 --> 00:00:27,000
be analyzed

11
00:00:27,260 --> 00:00:31,490
the co-main windows toolkit which

12
00:00:29,330 --> 00:00:35,099
includes dumpin is available for free

13
00:00:31,490 --> 00:00:37,879
for personal and educational purposes

14
00:00:35,100 --> 00:00:44,300
dump it for Windows currently supports

15
00:00:37,880 --> 00:00:44,300
x86 x64 and a RM 64

16
00:00:47,200 --> 00:00:52,670
once downloaded we extract the archive

17
00:00:50,210 --> 00:00:57,040
which contains the utilities and then we

18
00:00:52,670 --> 00:00:57,040
unblock the PowerShell CLI module

19
00:00:58,910 --> 00:01:05,039
we can now import the comb a PowerShell

20
00:01:01,829 --> 00:01:07,170
CLI module using the import module

21
00:01:05,040 --> 00:01:09,409
command the source code is available on

22
00:01:07,170 --> 00:01:09,409
github

23
00:01:10,920 --> 00:01:15,720
then we need to call the get kome API

24
00:01:13,560 --> 00:01:18,360
command to get our Stardust API

25
00:01:15,720 --> 00:01:20,550
credentials the command parameters are

26
00:01:18,360 --> 00:01:24,080
the client ID and secret which can be

27
00:01:20,550 --> 00:01:24,080
found in the Stardust interface

28
00:01:29,490 --> 00:01:31,548
you

29
00:01:33,930 --> 00:01:38,640
we follow up with the Newcomb a dump

30
00:01:36,240 --> 00:01:40,619
file command which will call dump it to

31
00:01:38,640 --> 00:01:44,400
generate a local memory dump it to our

32
00:01:40,620 --> 00:01:46,110
target directory is compressed is an

33
00:01:44,400 --> 00:01:47,730
optional parameter which enables

34
00:01:46,110 --> 00:01:52,200
compression of the memory dump on the

35
00:01:47,730 --> 00:01:55,400
fly you can uncompress ZD MP images with

36
00:01:52,200 --> 00:01:58,110
the Z 2 D MP utility part of the toolkit

37
00:01:55,400 --> 00:02:00,930
the source code is also available on

38
00:01:58,110 --> 00:02:03,150
github we encourage our users to make

39
00:02:00,930 --> 00:02:06,180
frequent periodical images of their

40
00:02:03,150 --> 00:02:08,429
critical assets for threat hunting this

41
00:02:06,180 --> 00:02:10,290
is very useful for analysts who want to

42
00:02:08,429 --> 00:02:13,260
go back in time which is not possible

43
00:02:10,289 --> 00:02:16,200
with log files this feature would be a

44
00:02:13,260 --> 00:02:18,060
great addition to existing EDRs to

45
00:02:16,200 --> 00:02:20,839
enable remotely scheduled memory

46
00:02:18,060 --> 00:02:20,840
acquisition

47
00:02:21,849 --> 00:02:27,399
memory analysis is critical for incident

48
00:02:24,700 --> 00:02:29,950
response but this is often left out due

49
00:02:27,400 --> 00:02:33,420
to lack of available expertise and its

50
00:02:29,950 --> 00:02:33,420
time of consuming nature

51
00:02:33,620 --> 00:02:38,720
it can take up to two days for a manual

52
00:02:35,959 --> 00:02:40,580
analysis with traditional tools but your

53
00:02:38,720 --> 00:02:43,580
time is a scarce commodity when dealing

54
00:02:40,580 --> 00:02:45,800
with attackers fortunately there is a

55
00:02:43,580 --> 00:02:48,860
faster and smarter way to achieve this

56
00:02:45,800 --> 00:02:51,230
with koumei stardust this can be

57
00:02:48,860 --> 00:02:54,170
achieved by uploading the acquired image

58
00:02:51,230 --> 00:02:57,799
via the user interface or as we will see

59
00:02:54,170 --> 00:03:00,140
now by using the CLI command send comb a

60
00:02:57,800 --> 00:03:02,860
dump file to upload the image directly

61
00:03:00,140 --> 00:03:02,859
to stardust

62
00:03:04,160 --> 00:03:10,690
the Python CLI also allows to upload and

63
00:03:07,610 --> 00:03:16,270
archive the memory images to your AWS s3

64
00:03:10,690 --> 00:03:16,270
Azure storage and GCP storage accounts

65
00:03:18,140 --> 00:03:22,369
let's fast-forward and go back to the

66
00:03:20,450 --> 00:03:24,780
Stardust interface to see the results of

67
00:03:22,370 --> 00:03:26,910
our automated analysis

68
00:03:24,780 --> 00:03:29,730
we will now navigate to our snapshot

69
00:03:26,910 --> 00:03:33,299
list and wait until our freshly uploaded

70
00:03:29,730 --> 00:03:35,280
image appears behind the scene

71
00:03:33,300 --> 00:03:36,990
we have several detection playbooks

72
00:03:35,280 --> 00:03:40,910
which are running against the uploaded

73
00:03:36,990 --> 00:03:40,910
images to automate the analysis

74
00:03:44,480 --> 00:03:49,549
once the analysis is finished we will

75
00:03:46,879 --> 00:03:51,290
see the results in this case several

76
00:03:49,550 --> 00:03:55,420
section names have been marked as

77
00:03:51,290 --> 00:03:55,420
unusual for one of the processes

78
00:04:00,670 --> 00:04:02,730
you

79
00:04:05,180 --> 00:04:10,340
we can also see the suspicious process

80
00:04:08,030 --> 00:04:12,670
relationship with other processes in the

81
00:04:10,340 --> 00:04:12,670
treeview

82
00:04:17,298 --> 00:04:21,378
that's it for today's video thanks again

83
00:04:19,970 --> 00:04:24,190
for listening and check out our website

84
00:04:21,379 --> 00:04:24,190
for more information

85
00:04:29,630 --> 00:04:32,839
[Music]

