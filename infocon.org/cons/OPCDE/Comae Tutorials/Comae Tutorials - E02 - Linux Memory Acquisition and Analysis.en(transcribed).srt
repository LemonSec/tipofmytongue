1
00:00:01,520 --> 00:00:07,859
[Music]

2
00:00:04,670 --> 00:00:07,859
[Applause]

3
00:00:08,029 --> 00:00:13,000
hi everyone and welcome back for our new

4
00:00:10,830 --> 00:00:15,550
tutorial video

5
00:00:13,000 --> 00:00:17,650
today we will cover Linux memory

6
00:00:15,550 --> 00:00:19,690
analysis using dump it for Linux and

7
00:00:17,650 --> 00:00:22,570
Stardust

8
00:00:19,690 --> 00:00:26,269
first let's create a fresh and Mbutu

9
00:00:22,570 --> 00:00:29,009
virtual machine for our tutorial

10
00:00:26,269 --> 00:00:31,859
most of our virtual machines running on

11
00:00:29,009 --> 00:00:35,430
the cloud either Microsoft Azure Google

12
00:00:31,859 --> 00:00:38,879
cloud platform or Amazon AWS are links

13
00:00:35,430 --> 00:00:41,370
based virtual machines even though Linux

14
00:00:38,879 --> 00:00:43,110
is more popular there is a significant

15
00:00:41,370 --> 00:00:45,989
gap when it comes to the available

16
00:00:43,110 --> 00:00:47,940
security tooling on Linux Incident

17
00:00:45,989 --> 00:00:50,820
Response on Linux is significantly

18
00:00:47,940 --> 00:00:53,489
behind compared to Windows memory

19
00:00:50,820 --> 00:00:55,500
analysis is becoming significantly more

20
00:00:53,489 --> 00:00:57,599
important on Linux due to the

21
00:00:55,500 --> 00:01:00,719
overwhelming presence of containers

22
00:00:57,600 --> 00:01:03,239
especially in kubernetes clusters let's

23
00:01:00,719 --> 00:01:05,550
continue by updating the app repository

24
00:01:03,239 --> 00:01:07,350
and installing the latest version of

25
00:01:05,550 --> 00:01:09,450
docker to be able to run the free

26
00:01:07,350 --> 00:01:12,839
containerized version of dump it for

27
00:01:09,450 --> 00:01:15,360
Linux running dump it for Linux via

28
00:01:12,840 --> 00:01:19,160
docker is straightforward and leverages

29
00:01:15,360 --> 00:01:22,289
the Komi Python CLI available on github

30
00:01:19,160 --> 00:01:24,690
the option allows the user to archive

31
00:01:22,289 --> 00:01:28,140
the memory dump directly to a Google

32
00:01:24,690 --> 00:01:31,830
Cloud storage Azur storage or AWS s3

33
00:01:28,140 --> 00:01:34,259
account but the coolest features involve

34
00:01:31,830 --> 00:01:37,860
the interaction with kome Stardust's for

35
00:01:34,259 --> 00:01:40,770
automated analysis you can either send a

36
00:01:37,860 --> 00:01:43,380
full memory dump to stardust or as we

37
00:01:40,770 --> 00:01:46,348
will see now you can pre-process the

38
00:01:43,380 --> 00:01:48,810
live memory and send only the metadata

39
00:01:46,349 --> 00:01:52,470
to stardust in a very short period of

40
00:01:48,810 --> 00:01:54,420
time when using the snapIt parameter we

41
00:01:52,470 --> 00:01:56,459
need to provide the comb a Stardust

42
00:01:54,420 --> 00:01:59,100
credentials available to the user

43
00:01:56,459 --> 00:02:01,680
interface of the platform

44
00:01:59,100 --> 00:02:03,990
the same credentials also apply to the

45
00:02:01,680 --> 00:02:07,650
dump it parameter which will create an

46
00:02:03,990 --> 00:02:09,630
elf core full memory dump to be sent the

47
00:02:07,650 --> 00:02:12,030
nice thing about the snapshot mode is

48
00:02:09,630 --> 00:02:14,760
that it creates an archive which only

49
00:02:12,030 --> 00:02:17,400
contains the collected metadata derived

50
00:02:14,760 --> 00:02:19,290
from analyzing the memory this has

51
00:02:17,400 --> 00:02:21,900
several innovative benefits such as

52
00:02:19,290 --> 00:02:24,660
performance as you can see now it is

53
00:02:21,900 --> 00:02:26,640
very very fast to pre-process the image

54
00:02:24,660 --> 00:02:28,950
locally and takes less than a minute

55
00:02:26,640 --> 00:02:31,500
this means that it opens multiple

56
00:02:28,950 --> 00:02:33,179
scenarios such as scalability which is

57
00:02:31,500 --> 00:02:35,940
critical if you're planning to look at

58
00:02:33,180 --> 00:02:38,100
kubernetes clusters imagine a scenario

59
00:02:35,940 --> 00:02:40,380
where kubernetes hook will be triggered

60
00:02:38,100 --> 00:02:43,320
each time a container gets destroyed

61
00:02:40,380 --> 00:02:46,230
pretty cool right full support for

62
00:02:43,320 --> 00:02:48,870
analysis includes boom-boom to sent OS

63
00:02:46,230 --> 00:02:50,850
and Red Hat and we are currently

64
00:02:48,870 --> 00:02:54,030
expanding the support to Google

65
00:02:50,850 --> 00:02:57,209
container optimized OS and Amazon links

66
00:02:54,030 --> 00:02:59,280
once the image is loaded and analyzed we

67
00:02:57,209 --> 00:03:01,890
can browse the processes and drivers

68
00:02:59,280 --> 00:03:03,959
just like windows we have several

69
00:03:01,890 --> 00:03:06,000
detection playbooks to automate the

70
00:03:03,959 --> 00:03:08,519
analysis which can be summarized in the

71
00:03:06,000 --> 00:03:10,290
report view we would love to hear your

72
00:03:08,519 --> 00:03:13,170
feedback on how you're planning to use

73
00:03:10,290 --> 00:03:15,750
memory analysis for linux and about your

74
00:03:13,170 --> 00:03:18,030
current pain points our solution does

75
00:03:15,750 --> 00:03:20,459
not require any pre profiling of the

76
00:03:18,030 --> 00:03:23,340
machines which also has been for long a

77
00:03:20,459 --> 00:03:26,549
big pain point on linux with performance

78
00:03:23,340 --> 00:03:28,560
just like windows the visualization

79
00:03:26,549 --> 00:03:31,530
features such as the treeview are also

80
00:03:28,560 --> 00:03:33,959
available and since the container is

81
00:03:31,530 --> 00:03:35,880
running as privileged we can see all the

82
00:03:33,959 --> 00:03:38,330
docker and their children processes

83
00:03:35,880 --> 00:03:38,329
launched

84
00:03:39,569 --> 00:03:42,929
thanks for listening we hope you enjoyed

85
00:03:41,909 --> 00:03:45,060
this tutorial

86
00:03:42,930 --> 00:03:46,950
your feedback is more than welcome and

87
00:03:45,060 --> 00:03:49,370
do not forget to subscribe to our

88
00:03:46,950 --> 00:03:49,369
Channel

89
00:03:50,440 --> 00:03:53,620
[Music]

