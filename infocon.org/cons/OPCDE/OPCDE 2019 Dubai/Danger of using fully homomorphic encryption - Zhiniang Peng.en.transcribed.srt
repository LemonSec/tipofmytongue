1
00:00:02,370 --> 00:00:08,170
okay thanks for introduction and good

2
00:00:05,440 --> 00:00:12,099
morning I'm very glad to be here to give

3
00:00:08,170 --> 00:00:15,070
this talk today my talk is a danger of

4
00:00:12,099 --> 00:00:19,030
using fully homomorphic encryption I

5
00:00:15,070 --> 00:00:21,580
look at Microsoft sale first let me

6
00:00:19,030 --> 00:00:25,600
introduce myself my name is Jean Ampang

7
00:00:21,580 --> 00:00:28,299
I got my PhD degree in cryptography from

8
00:00:25,600 --> 00:00:30,880
South China University of Technology now

9
00:00:28,300 --> 00:00:34,600
I'm a security researcher I'd see who

10
00:00:30,880 --> 00:00:38,110
316 and my Twitter account is Edward

11
00:00:34,600 --> 00:00:41,500
Fung you can reach me on Twitter if you

12
00:00:38,110 --> 00:00:43,650
have any question on this topic and

13
00:00:41,500 --> 00:00:46,960
follow my research area focus on

14
00:00:43,650 --> 00:00:52,900
software security a PI cryptography and

15
00:00:46,960 --> 00:00:55,810
sweet hunting about this talk in this

16
00:00:52,900 --> 00:00:58,390
talk I will first give an introduction

17
00:00:55,810 --> 00:01:00,660
to fully homomorphic encryption I think

18
00:00:58,390 --> 00:01:03,399
I would that to tell you what is

19
00:01:00,660 --> 00:01:04,390
homomorphic encryption and why we need

20
00:01:03,399 --> 00:01:06,670
more acreage

21
00:01:04,390 --> 00:01:10,179
encryption and the application of

22
00:01:06,670 --> 00:01:12,509
homomorphic encryption then I will

23
00:01:10,179 --> 00:01:15,429
introduce the most widely used

24
00:01:12,509 --> 00:01:17,649
homomorphic encryption the library

25
00:01:15,429 --> 00:01:21,069
shield which is open sourced by

26
00:01:17,649 --> 00:01:23,649
Microsoft mining company are now

27
00:01:21,069 --> 00:01:26,380
currently using sale to build their

28
00:01:23,649 --> 00:01:28,240
security application it seems that the

29
00:01:26,380 --> 00:01:31,240
fully homomorphic encryption is very

30
00:01:28,240 --> 00:01:34,389
close to protocol however our research

31
00:01:31,240 --> 00:01:38,740
find out that there are many security

32
00:01:34,389 --> 00:01:40,959
people and security risk when you using

33
00:01:38,740 --> 00:01:43,630
fully homomorphic encryption in this

34
00:01:40,959 --> 00:01:45,249
talk I will take sale as an example to

35
00:01:43,630 --> 00:01:46,839
introduce a security people and a

36
00:01:45,249 --> 00:01:50,619
security risk in fully homomorphic

37
00:01:46,840 --> 00:01:57,369
encryption and we will also give some

38
00:01:50,619 --> 00:02:00,249
demo about it this topic maybe we had

39
00:01:57,369 --> 00:02:02,889
for to understand for non cryptographer

40
00:02:00,249 --> 00:02:06,908
but i will try to make it as simple as

41
00:02:02,889 --> 00:02:09,549
possible before get into a topic let's

42
00:02:06,909 --> 00:02:12,159
see some news here as you can see in the

43
00:02:09,550 --> 00:02:14,850
picture people are now are worrying

44
00:02:12,159 --> 00:02:16,920
about their personal privacy up

45
00:02:14,850 --> 00:02:22,560
recorded by some big internet company

46
00:02:16,920 --> 00:02:24,720
for example the app and you know may the

47
00:02:22,560 --> 00:02:27,390
app though you were was last night and

48
00:02:24,720 --> 00:02:29,940
they are not keeping it secretly a

49
00:02:27,390 --> 00:02:32,220
cougar is recording you through mobile

50
00:02:29,940 --> 00:02:37,290
phone and monitoring minions of

51
00:02:32,220 --> 00:02:39,390
conversation so tightened actually death

52
00:02:37,290 --> 00:02:42,209
and leakage nowadays become more and

53
00:02:39,390 --> 00:02:44,399
more series almost every bounce we can

54
00:02:42,210 --> 00:02:46,830
hear some news about death and leakage

55
00:02:44,400 --> 00:02:49,830
and tight security and the users privacy

56
00:02:46,830 --> 00:02:52,890
now become a public concern so many

57
00:02:49,830 --> 00:02:55,790
people might think that why not encrypt

58
00:02:52,890 --> 00:02:58,920
our data before gave it out with a cloud

59
00:02:55,790 --> 00:03:01,940
but this will make the color can not

60
00:02:58,920 --> 00:03:05,760
provide us service based on those data

61
00:03:01,940 --> 00:03:08,490
it will be nice to be able to encrypt

62
00:03:05,760 --> 00:03:12,230
our data before send it to the cloud

63
00:03:08,490 --> 00:03:15,780
while still allowing a cloud to do some

64
00:03:12,230 --> 00:03:20,250
search short Edition under Stata or

65
00:03:15,780 --> 00:03:23,000
might be heavy it will be realized to be

66
00:03:20,250 --> 00:03:25,590
able to encrypt my query to the cloud

67
00:03:23,000 --> 00:03:28,110
while still allowing the cloud to

68
00:03:25,590 --> 00:03:30,450
possess them then the cloud can retain

69
00:03:28,110 --> 00:03:33,570
an encrypted answer to me then I can

70
00:03:30,450 --> 00:03:37,589
decrypt this answer and get a result the

71
00:03:33,570 --> 00:03:39,750
picture in here shows our dreams but how

72
00:03:37,590 --> 00:03:42,320
can we achieve these dreams so here

73
00:03:39,750 --> 00:03:44,490
comes a fully homomorphic encryption

74
00:03:42,320 --> 00:03:46,100
before talk about fully homomorphic

75
00:03:44,490 --> 00:03:49,410
encryption we first talk about

76
00:03:46,100 --> 00:03:53,400
encryption support homomorphic edition

77
00:03:49,410 --> 00:03:55,470
in this picture as you can see we have

78
00:03:53,400 --> 00:03:59,250
an encryption algorithm which support

79
00:03:55,470 --> 00:04:03,000
homomorphic edition we have two cipher

80
00:03:59,250 --> 00:04:09,320
texts here a and b if we want to get our

81
00:04:03,000 --> 00:04:12,810
encryption of a plus B we should first

82
00:04:09,320 --> 00:04:15,720
compute a plus B and then encrypt the

83
00:04:12,810 --> 00:04:19,880
result of the addition for normal

84
00:04:15,720 --> 00:04:22,560
encryption algorithm but if we have

85
00:04:19,880 --> 00:04:26,100
homomorphic and encryption of support

86
00:04:22,560 --> 00:04:27,720
for homomorphic addition then we can do

87
00:04:26,100 --> 00:04:28,740
it like this

88
00:04:27,720 --> 00:04:32,039
we can first in

89
00:04:28,740 --> 00:04:34,889
trips encrypt a and B think we can get

90
00:04:32,039 --> 00:04:38,159
the encryption of a a an encryption of

91
00:04:34,889 --> 00:04:42,650
beb with from a morphing edition we can

92
00:04:38,160 --> 00:04:46,050
compute EA plus EB to get a a plus B

93
00:04:42,650 --> 00:04:50,008
which means that we can do addition

94
00:04:46,050 --> 00:04:54,180
computation on ciphertext by by the way

95
00:04:50,009 --> 00:04:57,599
the original I say encryption which was

96
00:04:54,180 --> 00:05:01,080
very famous is supposed homomorphic

97
00:04:57,599 --> 00:05:05,300
addition beside homomorphic addition

98
00:05:01,080 --> 00:05:07,710
here is another property the homomorphic

99
00:05:05,300 --> 00:05:09,509
multiplication just like the nasa dies

100
00:05:07,710 --> 00:05:11,789
we can see that in this picture

101
00:05:09,509 --> 00:05:14,009
morphic multiplication means that you

102
00:05:11,789 --> 00:05:17,190
can't do multiplication computation on

103
00:05:14,009 --> 00:05:19,280
the ciphertext the pure egg map public

104
00:05:17,190 --> 00:05:24,090
key encryption algorithm support

105
00:05:19,280 --> 00:05:25,799
homomorphic multiplication so here comes

106
00:05:24,090 --> 00:05:28,909
a fully homomorphic encryption

107
00:05:25,800 --> 00:05:33,960
I'll show in the picture for any

108
00:05:28,909 --> 00:05:38,400
ciphertext X Y x2 and xn we can encrypt

109
00:05:33,960 --> 00:05:40,049
them as e x1 x2 and xn then we can do

110
00:05:38,400 --> 00:05:42,508
arbitrary computation on those

111
00:05:40,050 --> 00:05:45,240
ciphertext to compute any package

112
00:05:42,509 --> 00:05:49,110
function f F can be a machine learning

113
00:05:45,240 --> 00:05:51,719
algorithm or simply to do some to do

114
00:05:49,110 --> 00:05:53,400
some search on the ciphertext the

115
00:05:51,719 --> 00:05:56,099
concept of the fully homomorphic

116
00:05:53,400 --> 00:06:00,770
encryption has proposed proposed many

117
00:05:56,099 --> 00:06:03,509
get decades before but not until 2009

118
00:06:00,770 --> 00:06:08,039
dangerous proposal first for new form of

119
00:06:03,509 --> 00:06:10,800
encryption algorithm so what can we do

120
00:06:08,039 --> 00:06:12,630
is fully homomorphic encryption we can

121
00:06:10,800 --> 00:06:15,750
use it to protect your data while still

122
00:06:12,630 --> 00:06:20,120
allowing others to provide some service

123
00:06:15,750 --> 00:06:23,069
on it here is a famous metaphor about it

124
00:06:20,120 --> 00:06:25,560
suppose you are a both of a general

125
00:06:23,069 --> 00:06:28,590
factory you hire some worker to do

126
00:06:25,560 --> 00:06:31,680
something on your journey but the worker

127
00:06:28,590 --> 00:06:35,130
cannot be trusted they may steal your

128
00:06:31,680 --> 00:06:37,229
jury while doing his work so how can you

129
00:06:35,130 --> 00:06:40,469
protect these kind of things to happen

130
00:06:37,229 --> 00:06:41,889
you can put your code in a light socket

131
00:06:40,469 --> 00:06:44,530
box and

132
00:06:41,889 --> 00:06:48,550
thing you can keep your key and that the

133
00:06:44,530 --> 00:06:51,248
worker working on it with gravels then

134
00:06:48,550 --> 00:06:54,669
after the work is done you can unlock

135
00:06:51,249 --> 00:06:56,650
the box and get a jury listening just

136
00:06:54,669 --> 00:07:00,779
like how fully homomorphic encryption

137
00:06:56,650 --> 00:07:04,599
save your data from malicious summers

138
00:07:00,779 --> 00:07:07,449
there are many application of from

139
00:07:04,599 --> 00:07:09,669
motion movie encryption for example you

140
00:07:07,449 --> 00:07:12,490
can outsource your computation to the

141
00:07:09,669 --> 00:07:14,620
cloud without linking your debt your

142
00:07:12,490 --> 00:07:17,770
data or you can do some machine learning

143
00:07:14,620 --> 00:07:20,080
and some encrypted data or the cloud can

144
00:07:17,770 --> 00:07:23,349
do some other service without knowing

145
00:07:20,080 --> 00:07:26,020
the clients privacy we can divide the

146
00:07:23,349 --> 00:07:28,240
application of hte homomorphic

147
00:07:26,020 --> 00:07:31,870
encryption into two categories the first

148
00:07:28,240 --> 00:07:34,889
category is that a data is private but

149
00:07:31,870 --> 00:07:38,199
the function to be compute can be public

150
00:07:34,889 --> 00:07:41,289
in another category is that the data is

151
00:07:38,199 --> 00:07:43,689
crowded and the function to be complete

152
00:07:41,289 --> 00:07:45,639
also should be keep secret the

153
00:07:43,689 --> 00:07:48,039
difference of those two categories is

154
00:07:45,639 --> 00:07:52,449
that whether the function to be computed

155
00:07:48,039 --> 00:07:55,779
is need to be keep secret for

156
00:07:52,449 --> 00:07:58,810
application with private data and public

157
00:07:55,779 --> 00:08:03,189
function the model is shown in a picture

158
00:07:58,810 --> 00:08:07,300
as you can see the crime scene has died

159
00:08:03,189 --> 00:08:11,830
had to the cloud as in the cloud do some

160
00:08:07,300 --> 00:08:15,849
computation and age of course data is

161
00:08:11,830 --> 00:08:18,580
encrypted but there is no need to

162
00:08:15,849 --> 00:08:24,520
protect the function the cloud computing

163
00:08:18,580 --> 00:08:27,669
from the clan an example is that here we

164
00:08:24,520 --> 00:08:30,729
can use fully homomorphic encryption to

165
00:08:27,669 --> 00:08:34,208
do disaster prediction the clan since

166
00:08:30,729 --> 00:08:37,179
they are encrypted generic title health

167
00:08:34,208 --> 00:08:39,338
data NAB's resort to the cloud and the

168
00:08:37,179 --> 00:08:42,098
doctors cellular function to be compute

169
00:08:39,339 --> 00:08:45,699
to the cloud then the cloud can be

170
00:08:42,099 --> 00:08:48,430
worried in evaluate just loss function

171
00:08:45,699 --> 00:08:51,069
on those encrypted data and between the

172
00:08:48,430 --> 00:08:54,959
encrypted resort to the patient and the

173
00:08:51,069 --> 00:08:54,959
patient can't get results

174
00:08:55,060 --> 00:09:01,479
for application with private data and

175
00:08:58,450 --> 00:09:05,740
the private function the model is so in

176
00:09:01,480 --> 00:09:07,990
this lecture the key different from the

177
00:09:05,740 --> 00:09:12,940
former one is that the model to be

178
00:09:07,990 --> 00:09:16,090
compute it's also an IP of the cloud for

179
00:09:12,940 --> 00:09:19,960
example the cloud company may spend a

180
00:09:16,090 --> 00:09:22,630
lot of money in training in training a

181
00:09:19,960 --> 00:09:25,360
good machine learning model so he

182
00:09:22,630 --> 00:09:28,150
definitely definitely do not want who

183
00:09:25,360 --> 00:09:30,910
gave it keep this model to other ones so

184
00:09:28,150 --> 00:09:33,520
in these scenarios post data and the

185
00:09:30,910 --> 00:09:36,550
function to be compute should be kept

186
00:09:33,520 --> 00:09:39,790
secret to achieve this we need memory

187
00:09:36,550 --> 00:09:43,439
encryption to have circle privacy

188
00:09:39,790 --> 00:09:50,500
it's a additional requirements in many

189
00:09:43,440 --> 00:09:54,760
fully homomorphic application the

190
00:09:50,500 --> 00:09:59,530
invalid the the invited surf artist

191
00:09:54,760 --> 00:10:02,170
should hide the function f okay that's

192
00:09:59,530 --> 00:10:05,079
all for the introduction for the fully

193
00:10:02,170 --> 00:10:08,589
homomorphic encryption here we come to

194
00:10:05,080 --> 00:10:10,810
the Microsoft folio emerging from a fake

195
00:10:08,590 --> 00:10:14,020
encryption nap the SIL

196
00:10:10,810 --> 00:10:16,319
it's a implement implementation of fully

197
00:10:14,020 --> 00:10:19,840
homomorphic encryption

198
00:10:16,320 --> 00:10:23,350
here is a quick background of the seal

199
00:10:19,840 --> 00:10:26,470
so it's a morphic encryption library

200
00:10:23,350 --> 00:10:29,500
from Microsoft Research the first

201
00:10:26,470 --> 00:10:32,560
version was released in 2015

202
00:10:29,500 --> 00:10:35,890
on December last year Microsoft

203
00:10:32,560 --> 00:10:39,849
officially open source on github so it's

204
00:10:35,890 --> 00:10:44,460
developed in standard C++ and you can it

205
00:10:39,850 --> 00:10:47,170
can be used in many device it it

206
00:10:44,460 --> 00:10:50,260
implemented two famous homomorphic

207
00:10:47,170 --> 00:10:53,170
encryption algorithm the bf we algorithm

208
00:10:50,260 --> 00:10:56,200
and the cyclic es algorithm in this talk

209
00:10:53,170 --> 00:10:58,540
I will only focus on the BFG algorithm

210
00:10:56,200 --> 00:11:02,650
but the same problem also happens in

211
00:10:58,540 --> 00:11:05,740
cyclic es c is a simple and easy to use

212
00:11:02,650 --> 00:11:07,640
memory a canvas detail example in this

213
00:11:05,740 --> 00:11:11,899
project you can

214
00:11:07,640 --> 00:11:15,560
play with it after his talk some people

215
00:11:11,899 --> 00:11:18,079
are saying that the homomorphic

216
00:11:15,560 --> 00:11:20,599
encryption is too slow to be used in

217
00:11:18,079 --> 00:11:22,760
your application in my opinion the

218
00:11:20,600 --> 00:11:26,269
performance of morphic encryption has

219
00:11:22,760 --> 00:11:28,880
improved a lot in recent years Microsoft

220
00:11:26,269 --> 00:11:31,610
used sale to build a encrypted encrypted

221
00:11:28,880 --> 00:11:35,089
handwriting digital picture recognized

222
00:11:31,610 --> 00:11:38,300
program the Kryptonite it can make

223
00:11:35,089 --> 00:11:43,970
sixteen thousand prediction per hour

224
00:11:38,300 --> 00:11:47,990
with a 99% correct criteria this means

225
00:11:43,970 --> 00:11:52,240
that you can process 16 encrypting

226
00:11:47,990 --> 00:11:52,240
picture per seconds in a normal computer

227
00:11:53,230 --> 00:12:01,640
that was the result in 2016 today this

228
00:11:58,279 --> 00:12:06,890
can be done probably 100 and 1,000 times

229
00:12:01,640 --> 00:12:10,180
faster by using GPU or FPGA in our

230
00:12:06,890 --> 00:12:13,240
experiments we can do logistic

231
00:12:10,180 --> 00:12:16,550
regression prediction on 10 thousands of

232
00:12:13,240 --> 00:12:20,120
encrypted data in just 5 minutes it's

233
00:12:16,550 --> 00:12:23,750
about 300 times slower than directly

234
00:12:20,120 --> 00:12:26,000
using scanning on those projects so I

235
00:12:23,750 --> 00:12:30,920
mean 100 minions rendering flawed

236
00:12:26,000 --> 00:12:35,329
between 0 and 100 you need less than 900

237
00:12:30,920 --> 00:12:38,449
milliseconds and just message and the

238
00:12:35,329 --> 00:12:41,899
message expansion is about 8 so as weak

239
00:12:38,449 --> 00:12:44,689
so as we can see I show in these slides

240
00:12:41,899 --> 00:12:50,449
the performance of say Oh seems

241
00:12:44,690 --> 00:12:53,690
reasonable okay so how does phony Homa

242
00:12:50,449 --> 00:12:57,170
buffer in question actually works here I

243
00:12:53,690 --> 00:13:03,290
will give a brief introduction to how

244
00:12:57,170 --> 00:13:04,550
how it works first I will introduce a

245
00:13:03,290 --> 00:13:08,209
ring lwe

246
00:13:04,550 --> 00:13:11,599
problem to you every public key crypto

247
00:13:08,209 --> 00:13:14,599
system is based on some hard problem for

248
00:13:11,600 --> 00:13:18,440
example the RSA is based on integer

249
00:13:14,600 --> 00:13:19,910
factor problem nowadays almost all the

250
00:13:18,440 --> 00:13:21,260
protocol fully homomorphic encryption

251
00:13:19,910 --> 00:13:24,500
scheme

252
00:13:21,260 --> 00:13:27,590
based on the ring lwd problem in the

253
00:13:24,500 --> 00:13:34,370
ring lwe problem we have a polynomial

254
00:13:27,590 --> 00:13:36,860
ring are all the elements in these

255
00:13:34,370 --> 00:13:40,190
rights are some elements in the

256
00:13:36,860 --> 00:13:43,130
polynomial ring however to make it

257
00:13:40,190 --> 00:13:45,170
simple to understand you can just think

258
00:13:43,130 --> 00:13:47,450
all the element here are just some

259
00:13:45,170 --> 00:13:51,829
integers so you can easily understand

260
00:13:47,450 --> 00:13:55,700
IAM so here is a simplified version of

261
00:13:51,830 --> 00:13:57,860
the ring RWE problem you have it there

262
00:13:55,700 --> 00:14:03,970
was a challenger then the Challenger

263
00:13:57,860 --> 00:14:08,810
gave you some a1 b1 a2 b2 and aka PK

264
00:14:03,970 --> 00:14:15,700
with PK because a K times s plus some

265
00:14:08,810 --> 00:14:21,729
some small number EK then we call a k BK

266
00:14:15,700 --> 00:14:26,030
ring lwe pairs your mission is to find s

267
00:14:21,730 --> 00:14:32,110
where s is a random number and the GI is

268
00:14:26,030 --> 00:14:36,110
very small in here of course if GI VI

269
00:14:32,110 --> 00:14:37,780
equal to 0 then you can simply find us

270
00:14:36,110 --> 00:14:41,690
by use Gauss elimination

271
00:14:37,780 --> 00:14:44,780
however EA here is some unknown small

272
00:14:41,690 --> 00:14:47,900
integer so it's not easy to find as if

273
00:14:44,780 --> 00:14:53,060
you can find us you can solve doing our

274
00:14:47,900 --> 00:14:56,870
W problems here's another version of the

275
00:14:53,060 --> 00:15:00,469
lwe problem is a decision versing of

276
00:14:56,870 --> 00:15:03,410
between a low W problem it works like

277
00:15:00,470 --> 00:15:06,770
this also there will be a challenger and

278
00:15:03,410 --> 00:15:11,719
you the Challenger will give you a 1 P 1

279
00:15:06,770 --> 00:15:14,420
a 2 B 2 and ika became your mission is

280
00:15:11,720 --> 00:15:17,780
to kill a challenger that does there is

281
00:15:14,420 --> 00:15:21,290
this s and some small arm a small

282
00:15:17,780 --> 00:15:25,640
integer Yi to make those AI bi become a

283
00:15:21,290 --> 00:15:27,880
ring lwe pair to start to satisfy this

284
00:15:25,640 --> 00:15:31,460
equation

285
00:15:27,880 --> 00:15:34,620
all those AI ABI are just some random

286
00:15:31,460 --> 00:15:38,130
numbers both a

287
00:15:34,620 --> 00:15:42,360
post a ring lwe problem and the decision

288
00:15:38,130 --> 00:15:45,390
engine l ee problem is a hot problem in

289
00:15:42,360 --> 00:15:48,300
mathematic so even cows cannot solve

290
00:15:45,390 --> 00:15:51,420
those problem if we can build some

291
00:15:48,300 --> 00:15:53,310
crypto system based on those problems we

292
00:15:51,420 --> 00:15:57,209
can make sure our crypto system is

293
00:15:53,310 --> 00:15:59,779
secure if an attacker can break this the

294
00:15:57,210 --> 00:16:03,240
crypto system mislead and attacker cam

295
00:15:59,779 --> 00:16:06,660
swap the ring lwe or the decision Venera

296
00:16:03,240 --> 00:16:09,270
ee problem then we can suppose that he

297
00:16:06,660 --> 00:16:11,430
is smarter than cows because we don't

298
00:16:09,270 --> 00:16:15,949
we'll all that no one can smarter cows

299
00:16:11,430 --> 00:16:18,180
so no one can broke the crypto system so

300
00:16:15,950 --> 00:16:23,040
how can we build a fully homomorphic

301
00:16:18,180 --> 00:16:27,750
encryption based on ring RW problem here

302
00:16:23,040 --> 00:16:30,930
is how the PF we algorithm works in sync

303
00:16:27,750 --> 00:16:34,380
in a secure key generation we simply

304
00:16:30,930 --> 00:16:38,430
choose some secret key s to generate a

305
00:16:34,380 --> 00:16:42,120
public key here as actually here s is a

306
00:16:38,430 --> 00:16:45,349
polynomial in the polynomial ring r but

307
00:16:42,120 --> 00:16:50,820
to make a simple you can sync s is small

308
00:16:45,350 --> 00:16:55,020
integer to generate a public key we can

309
00:16:50,820 --> 00:16:58,260
just choose a random a on render number

310
00:16:55,020 --> 00:17:00,960
a and a small error e then published

311
00:16:58,260 --> 00:17:06,780
publicly picking one a peak in 0 equal

312
00:17:00,960 --> 00:17:09,810
to minus a times s plus e and picking

313
00:17:06,780 --> 00:17:12,060
one equals a here we can see that

314
00:17:09,810 --> 00:17:16,649
prickly wine and a peak in the arrow is

315
00:17:12,060 --> 00:17:19,770
actually a doing lwe pairs so nobody can

316
00:17:16,650 --> 00:17:25,260
recover us otherwise he can table doing

317
00:17:19,770 --> 00:17:27,240
owt problems to encrypt a message m we

318
00:17:25,260 --> 00:17:30,900
choose a random number you and a small

319
00:17:27,240 --> 00:17:34,410
area and a g-tube then we can compute

320
00:17:30,900 --> 00:17:38,550
the ciphertext C 0 and C 1 using a

321
00:17:34,410 --> 00:17:42,350
public key like this here I will not go

322
00:17:38,550 --> 00:17:46,379
to a detail but but this result is that

323
00:17:42,350 --> 00:17:47,789
c c0 and c1 become a decision using our

324
00:17:46,380 --> 00:17:50,200
ee pairs

325
00:17:47,789 --> 00:17:53,620
because attacker cannot solve the

326
00:17:50,200 --> 00:17:56,650
decision during RWE problem which means

327
00:17:53,620 --> 00:18:01,049
that in the view of the attacker c0 and

328
00:17:56,650 --> 00:18:03,580
c1 is just like some random values and

329
00:18:01,049 --> 00:18:07,418
the message is encrypted with some

330
00:18:03,580 --> 00:18:12,340
random pad so he cannot recover a

331
00:18:07,419 --> 00:18:14,409
message in in the bottom we can also see

332
00:18:12,340 --> 00:18:19,658
that the ciphertext is concerned

333
00:18:14,409 --> 00:18:22,929
consists of some translations of C 0 and

334
00:18:19,659 --> 00:18:27,159
C 1 so we can consider this a furnace is

335
00:18:22,929 --> 00:18:32,049
a polynomial FX equal to C 0 plus C 1

336
00:18:27,159 --> 00:18:35,350
times X now how can we decrypt the

337
00:18:32,049 --> 00:18:39,100
cipher text for such the ciphertext FX

338
00:18:35,350 --> 00:18:42,820
equal to C 0 plus C 1 times X we can

339
00:18:39,100 --> 00:18:45,939
just substitute the variable X with the

340
00:18:42,820 --> 00:18:49,350
secret key s then we can get the

341
00:18:45,940 --> 00:18:52,600
increase ling-ling we can get this

342
00:18:49,350 --> 00:18:57,490
equation after some simple math we can

343
00:18:52,600 --> 00:18:59,439
we can think that FX equal to we plus in

344
00:18:57,490 --> 00:19:02,470
the bottom you can see FX equal to we

345
00:18:59,440 --> 00:19:05,289
plastered ha times M where Delta is a

346
00:19:02,470 --> 00:19:07,899
public parameter and we is much smaller

347
00:19:05,289 --> 00:19:12,870
than Delta so we can recover the message

348
00:19:07,899 --> 00:19:15,459
m if you have to set vertex F 1 and F 2

349
00:19:12,870 --> 00:19:18,029
to do homomorphic addition on

350
00:19:15,460 --> 00:19:22,539
justification you just add just

351
00:19:18,029 --> 00:19:27,760
polynomial together you get F 3 X equal

352
00:19:22,539 --> 00:19:32,049
to F 1 X plus F 2 X then we have FY s

353
00:19:27,760 --> 00:19:35,140
equal to because we have F 1 X F 1 is

354
00:19:32,049 --> 00:19:39,700
equal to a small number we 1 plus Delta

355
00:19:35,140 --> 00:19:42,549
x + 1 and F 2 is equal to small number

356
00:19:39,700 --> 00:19:46,809
which you plaster heart amp M 2 then we

357
00:19:42,549 --> 00:19:49,360
can know that the F 3 s is equal to we 1

358
00:19:46,809 --> 00:19:53,770
class with you plus third hat times M 1

359
00:19:49,360 --> 00:19:56,740
plus M 2 which means that F 3 X is equal

360
00:19:53,770 --> 00:20:00,039
to a small number in a both and you can

361
00:19:56,740 --> 00:20:03,159
see that small number we through

362
00:20:00,039 --> 00:20:05,859
start attempts m1 plus m2 so we can see

363
00:20:03,159 --> 00:20:08,529
that the bf3 algorithms support

364
00:20:05,859 --> 00:20:11,470
homomorphic addition because you you add

365
00:20:08,529 --> 00:20:15,249
some ciphertext and you can get the

366
00:20:11,470 --> 00:20:18,970
addition of the plant X if we have

367
00:20:15,249 --> 00:20:21,789
ciphertext f1 X and f2 X to do

368
00:20:18,970 --> 00:20:25,600
homomorphic a much of a case of those

369
00:20:21,789 --> 00:20:30,669
ciphertext you just compute F 3 X equal

370
00:20:25,600 --> 00:20:33,428
to f1 x times F 2 X because we have FX

371
00:20:30,669 --> 00:20:38,409
equal to small number we 1 plus that

372
00:20:33,429 --> 00:20:42,729
have x + 1 and F 2 X equal to small

373
00:20:38,409 --> 00:20:46,239
number which you plastered have x + 2 so

374
00:20:42,729 --> 00:20:51,099
we can get that F 3 X divide Delta

375
00:20:46,239 --> 00:20:54,039
equals we 3 plasterer have x + 1 x + 2

376
00:20:51,099 --> 00:20:57,820
so we can see that the PFOA algorithms

377
00:20:54,039 --> 00:21:00,340
support homomorphic multiplication as

378
00:20:57,820 --> 00:21:03,039
remember this is a oversimplified

379
00:21:00,340 --> 00:21:07,720
version of BF way to make you understand

380
00:21:03,039 --> 00:21:11,499
easily the real nutty space cryptography

381
00:21:07,720 --> 00:21:13,989
is much harder than this so here we

382
00:21:11,499 --> 00:21:16,570
introduce a bf we asking and the

383
00:21:13,989 --> 00:21:21,369
homomorphic property of PF we encryption

384
00:21:16,570 --> 00:21:23,408
however let's see the original PF we

385
00:21:21,369 --> 00:21:26,889
algorithm is much more complicated than

386
00:21:23,409 --> 00:21:29,379
this but this introduction is enough to

387
00:21:26,889 --> 00:21:32,408
make you understand the problem behind

388
00:21:29,379 --> 00:21:34,899
homomorphic encryption if you want more

389
00:21:32,409 --> 00:21:38,649
detail of Biafra encryption you can read

390
00:21:34,899 --> 00:21:41,619
original paper in here by the way you

391
00:21:38,649 --> 00:21:44,830
can play with PF way algorithm by using

392
00:21:41,619 --> 00:21:47,529
my implementation I have written version

393
00:21:44,830 --> 00:21:50,908
of the simplified bf we you can found

394
00:21:47,529 --> 00:21:50,909
the source code in my github

395
00:21:51,369 --> 00:21:55,359
from the Bob's nice we can see that the

396
00:21:54,070 --> 00:21:58,899
PF 3 algorithm

397
00:21:55,359 --> 00:22:01,478
encrypt message m - a polynomial FX i

398
00:21:58,899 --> 00:22:05,978
think that encryption is very simple

399
00:22:01,479 --> 00:22:08,590
just to substitute X with the secret key

400
00:22:05,979 --> 00:22:11,230
s then we can easily recover the message

401
00:22:08,590 --> 00:22:13,240
m we can consider that the message is

402
00:22:11,230 --> 00:22:16,630
actually brand by design

403
00:22:13,240 --> 00:22:19,840
pairs so we have the proper probable

404
00:22:16,630 --> 00:22:22,809
security for bf3 algorithm if an hacker

405
00:22:19,840 --> 00:22:25,330
can do chosen ciphertext untack to

406
00:22:22,809 --> 00:22:27,340
distinguish ciphertext anything can also

407
00:22:25,330 --> 00:22:30,549
break the decision injuring our W

408
00:22:27,340 --> 00:22:33,610
problem this will happen with extremely

409
00:22:30,549 --> 00:22:39,360
low probability so we can conclude that

410
00:22:33,610 --> 00:22:39,360
the bf way algorithm is a nd CPA secure

411
00:22:39,450 --> 00:22:47,350
however in encryption system choosing

412
00:22:44,049 --> 00:22:50,049
plan chosen price I've chosen plain

413
00:22:47,350 --> 00:22:53,830
sight plain text attack is not the most

414
00:22:50,049 --> 00:22:55,870
powerful attack modal in many scenario

415
00:22:53,830 --> 00:22:58,449
attacker can dance chosen ciphertext

416
00:22:55,870 --> 00:23:01,239
attack which means that attack is given

417
00:22:58,450 --> 00:23:03,250
to access to a decryption Oracle he can

418
00:23:01,240 --> 00:23:07,149
ask her Oracle to decrypt some

419
00:23:03,250 --> 00:23:11,529
ciphertext for him the DFO algorithm

420
00:23:07,149 --> 00:23:13,360
does not meter and ECC a security which

421
00:23:11,529 --> 00:23:16,330
means that it's not secure when the

422
00:23:13,360 --> 00:23:17,820
attacker can choose any ciphertext can

423
00:23:16,330 --> 00:23:20,439
do some chosen ciphertext attack

424
00:23:17,820 --> 00:23:24,908
actually all the fully homomorphic

425
00:23:20,440 --> 00:23:28,659
encryption skin can alter in here and

426
00:23:24,909 --> 00:23:32,230
this I say a security this is there is

427
00:23:28,659 --> 00:23:34,659
some Surat achill research on CCA secure

428
00:23:32,230 --> 00:23:37,720
fully homomorphic encryption however the

429
00:23:34,659 --> 00:23:39,399
performance is inseparable so we can

430
00:23:37,720 --> 00:23:42,340
conclude that all the fully homomorphic

431
00:23:39,399 --> 00:23:47,590
encryption can not guarantee security in

432
00:23:42,340 --> 00:23:50,709
the same scenario but to win really need

433
00:23:47,590 --> 00:23:54,820
are in this is a security the answer is

434
00:23:50,710 --> 00:23:57,309
yes yes we do because in your scenario

435
00:23:54,820 --> 00:24:00,279
attacker can always have opportunity to

436
00:23:57,309 --> 00:24:02,320
ask for decryption and this is a

437
00:24:00,279 --> 00:24:06,159
security is now a standard requirement

438
00:24:02,320 --> 00:24:09,250
for encryption scheme beside scenario

439
00:24:06,159 --> 00:24:11,679
that require a curve homomorphic

440
00:24:09,250 --> 00:24:14,350
encryption often require and this is a

441
00:24:11,679 --> 00:24:17,380
more than other scenarios this is

442
00:24:14,350 --> 00:24:21,309
because there always a rich data flow

443
00:24:17,380 --> 00:24:23,950
between that owner and a cloud or you'll

444
00:24:21,309 --> 00:24:26,269
always have some multipath corporation

445
00:24:23,950 --> 00:24:29,659
and a tight exchange

446
00:24:26,269 --> 00:24:32,599
yes scenarios if the decrypted data is

447
00:24:29,659 --> 00:24:37,039
Nick two hours it will break the CPA

448
00:24:32,599 --> 00:24:39,580
models it will break the system here I

449
00:24:37,039 --> 00:24:42,289
will present our one query attack

450
00:24:39,580 --> 00:24:45,589
suppose attacker can query a decryption

451
00:24:42,289 --> 00:24:49,249
Oracle for one x this is realistic in

452
00:24:45,589 --> 00:24:52,789
many scenarios linear attack and create

453
00:24:49,249 --> 00:24:56,690
our malicious cipher tanks with C 1 with

454
00:24:52,789 --> 00:25:01,729
C 0 equal to 0 and C 1 equal to Delta as

455
00:24:56,690 --> 00:25:05,749
you can see here then I think he can

456
00:25:01,729 --> 00:25:08,029
give this malicious ciphertext to to the

457
00:25:05,749 --> 00:25:12,519
data owner the tire owner decrypted

458
00:25:08,029 --> 00:25:15,589
several tags by substituting X with s

459
00:25:12,519 --> 00:25:20,329
then the decrypted message is equal to

460
00:25:15,589 --> 00:25:23,418
probability s so the attacker if the

461
00:25:20,329 --> 00:25:26,269
attacker can get the decrypted message

462
00:25:23,419 --> 00:25:29,719
linking can recover a secret key but

463
00:25:26,269 --> 00:25:33,889
just as a decryption Oracle wise this is

464
00:25:29,719 --> 00:25:36,079
extremely dangerous not only seals every

465
00:25:33,889 --> 00:25:42,049
homomorphic encryption phases same

466
00:25:36,079 --> 00:25:46,849
problem here is a small small demo I

467
00:25:42,049 --> 00:25:49,099
make of the one Korea attack in this

468
00:25:46,849 --> 00:25:52,549
picture we define a function recovery

469
00:25:49,099 --> 00:25:55,099
key this is simple simple function used

470
00:25:52,549 --> 00:25:58,519
to recover a secret key opf we buy just

471
00:25:55,099 --> 00:26:01,249
as the decryption Oracle once here we

472
00:25:58,519 --> 00:26:03,379
first generate a secret key and public

473
00:26:01,249 --> 00:26:05,869
here for BFE

474
00:26:03,379 --> 00:26:09,678
skin new we call the recovery key

475
00:26:05,869 --> 00:26:13,070
function for the default a parameter of

476
00:26:09,679 --> 00:26:16,279
cell in this one in less than just one

477
00:26:13,070 --> 00:26:18,168
minute seconds the local key function we

478
00:26:16,279 --> 00:26:21,409
are printing out the secret key LP every

479
00:26:18,169 --> 00:26:23,749
algorithm so it's a very simple and

480
00:26:21,409 --> 00:26:26,359
dangerous attack the source code of this

481
00:26:23,749 --> 00:26:30,349
attack is published maket hub you can

482
00:26:26,359 --> 00:26:32,389
check it by yourself so the

483
00:26:30,349 --> 00:26:35,210
countermeasure to this problem is not

484
00:26:32,389 --> 00:26:37,968
just to not use fully homomorphic

485
00:26:35,210 --> 00:26:40,040
encryption in any scenario that the

486
00:26:37,969 --> 00:26:43,970
decrypted result man

487
00:26:40,040 --> 00:26:47,510
to the neighbor evaluator otherwise

488
00:26:43,970 --> 00:26:49,880
there is no encryption at all but in a

489
00:26:47,510 --> 00:26:54,740
real scenario that decrypting the result

490
00:26:49,880 --> 00:26:58,730
may need to you may need to some other

491
00:26:54,740 --> 00:27:00,890
people with or without our Lotus so how

492
00:26:58,730 --> 00:27:05,150
can we make sure there is no leakage at

493
00:27:00,890 --> 00:27:07,820
all this is very critical problem for

494
00:27:05,150 --> 00:27:11,210
using homomorphic encryption a two month

495
00:27:07,820 --> 00:27:14,060
cycle I have wasted Microsoft Research

496
00:27:11,210 --> 00:27:16,520
to collaborate with Microsoft CEO team

497
00:27:14,060 --> 00:27:18,830
to work on this problem we are going to

498
00:27:16,520 --> 00:27:23,510
build a new type of medication for those

499
00:27:18,830 --> 00:27:29,480
issues it will issue be available

500
00:27:23,510 --> 00:27:35,020
shortly in sales so here is a second

501
00:27:29,480 --> 00:27:37,190
problem here I will first introduce an

502
00:27:35,020 --> 00:27:39,560
applicative allocation of fully

503
00:27:37,190 --> 00:27:42,950
homomorphic encryption to you the

504
00:27:39,560 --> 00:27:46,490
private State intersection the p.s.i

505
00:27:42,950 --> 00:27:52,280
protocol in CSI a protocol we have a

506
00:27:46,490 --> 00:27:55,610
sender and a receiver the sender have

507
00:27:52,280 --> 00:27:59,240
some collection eggs and register we

508
00:27:55,610 --> 00:28:02,689
have a clutching why the PSI protocol is

509
00:27:59,240 --> 00:28:06,640
going to compute intersection of x and y

510
00:28:02,690 --> 00:28:09,590
and gave the result to the receiver in

511
00:28:06,640 --> 00:28:11,660
the meantime everything else is kept

512
00:28:09,590 --> 00:28:14,629
secret the sender shouldn't know

513
00:28:11,660 --> 00:28:17,690
anything about Y and the receiver

514
00:28:14,630 --> 00:28:23,420
shouldn't know anything about X except

515
00:28:17,690 --> 00:28:27,200
intersection so the PSI protocol is

516
00:28:23,420 --> 00:28:30,170
useful in many scenario for example it

517
00:28:27,200 --> 00:28:34,370
can be used to build a private contract

518
00:28:30,170 --> 00:28:37,790
discovery in end-to-end encryption I am

519
00:28:34,370 --> 00:28:40,939
such as signal what apps the user have

520
00:28:37,790 --> 00:28:43,820
the user have some contract in his phone

521
00:28:40,940 --> 00:28:48,380
and he want to know which of his friend

522
00:28:43,820 --> 00:28:51,620
are also using signal or tab so he can

523
00:28:48,380 --> 00:28:53,810
do PSA with the signal server he can

524
00:28:51,620 --> 00:28:56,870
keep those friends nice with

525
00:28:53,810 --> 00:29:04,970
out leaking his contact knees to the

526
00:28:56,870 --> 00:29:08,620
server how to achieve this in CCA 2017

527
00:29:04,970 --> 00:29:11,450
same propose our psi protocol based on

528
00:29:08,620 --> 00:29:17,090
homomorphic encryption the idea is very

529
00:29:11,450 --> 00:29:21,740
simple the mobile user just encrypt

530
00:29:17,090 --> 00:29:25,100
their contact list X using homomorphic

531
00:29:21,740 --> 00:29:28,310
encryption and the sender resort to

532
00:29:25,100 --> 00:29:30,320
single encrypted data to the server and

533
00:29:28,310 --> 00:29:33,649
server can't do some homomorphic

534
00:29:30,320 --> 00:29:36,919
computation with his local database Y

535
00:29:33,650 --> 00:29:39,800
and Gator encrypted the result of the

536
00:29:36,920 --> 00:29:43,000
intersection of x and y linear server

537
00:29:39,800 --> 00:29:44,720
send encrypted resort back to the clan

538
00:29:43,000 --> 00:29:49,160
the truncated

539
00:29:44,720 --> 00:29:51,440
resort and he decrypt it and he can get

540
00:29:49,160 --> 00:29:56,180
the intersection of his contradicts with

541
00:29:51,440 --> 00:29:59,180
the server the protocol since work

542
00:29:56,180 --> 00:30:03,980
wheels but actually it's one about you

543
00:29:59,180 --> 00:30:06,530
two attacks the first attack is that the

544
00:30:03,980 --> 00:30:09,710
CCA attack on these scenarios

545
00:30:06,530 --> 00:30:11,899
suppose you are the crime and you get in

546
00:30:09,710 --> 00:30:15,440
these of your friends who you who are

547
00:30:11,900 --> 00:30:18,080
using signal orders and the next thing

548
00:30:15,440 --> 00:30:22,250
you do is probably add them as a friend

549
00:30:18,080 --> 00:30:26,210
in signal and in apps then you will send

550
00:30:22,250 --> 00:30:29,030
the intersection of x and y implant x to

551
00:30:26,210 --> 00:30:30,890
the server this is actually a

552
00:30:29,030 --> 00:30:34,399
information leakage to the server

553
00:30:30,890 --> 00:30:37,490
because the server can get resorted the

554
00:30:34,400 --> 00:30:39,890
decrypted result so the server can make

555
00:30:37,490 --> 00:30:43,640
a malicious ciphertext and announcer CCA

556
00:30:39,890 --> 00:30:46,220
attack against the can and I think we

557
00:30:43,640 --> 00:30:51,230
can recover a private key of the client

558
00:30:46,220 --> 00:30:54,920
and it occurred everything from this

559
00:30:51,230 --> 00:30:58,670
example we can see that there are always

560
00:30:54,920 --> 00:31:00,860
many expect data flow between owner and

561
00:30:58,670 --> 00:31:02,720
the cloud you should be extremely

562
00:31:00,860 --> 00:31:06,929
careful when using homomorphic

563
00:31:02,720 --> 00:31:09,540
encryption but

564
00:31:06,930 --> 00:31:12,060
is not the stem CCA attack as we

565
00:31:09,540 --> 00:31:14,310
mentioned before because rather than

566
00:31:12,060 --> 00:31:18,060
sending the decrypted resort to the

567
00:31:14,310 --> 00:31:21,720
server the user the user should check by

568
00:31:18,060 --> 00:31:25,379
the decryption result is 0 if it is 0

569
00:31:21,720 --> 00:31:30,020
then it will return X I to a server

570
00:31:25,380 --> 00:31:33,150
otherwise it will not return anything so

571
00:31:30,020 --> 00:31:37,020
there is only one peat information

572
00:31:33,150 --> 00:31:40,920
leakage per query but here we can give

573
00:31:37,020 --> 00:31:45,570
give attack that we can reveal one peat

574
00:31:40,920 --> 00:31:49,260
of usual private key by using this one

575
00:31:45,570 --> 00:31:54,389
bit information leakage I will give the

576
00:31:49,260 --> 00:31:58,350
demo in next slides so we can see that -

577
00:31:54,390 --> 00:32:00,930
Nancy - Nancy attack that owner to not

578
00:31:58,350 --> 00:32:04,399
need to dig all the planets to the

579
00:32:00,930 --> 00:32:08,360
attacker anyone peat information leakage

580
00:32:04,400 --> 00:32:10,890
to others will be a security problem

581
00:32:08,360 --> 00:32:14,580
anyone with information leakage will

582
00:32:10,890 --> 00:32:18,410
need to one peak image and the security

583
00:32:14,580 --> 00:32:22,500
of homomorphic encryption world job

584
00:32:18,410 --> 00:32:25,410
exponentially what's more a one p

585
00:32:22,500 --> 00:32:27,960
information leakage is invertible in

586
00:32:25,410 --> 00:32:30,900
real life application for example any

587
00:32:27,960 --> 00:32:33,810
action you take will need some piece of

588
00:32:30,900 --> 00:32:36,150
information an attacker can recover some

589
00:32:33,810 --> 00:32:41,520
piece of secured key so it's very

590
00:32:36,150 --> 00:32:47,730
dangerous here there was a simple demo

591
00:32:41,520 --> 00:32:51,560
of the attack in FPS I in this demo we

592
00:32:47,730 --> 00:32:57,930
were we were sure that this CC attack on

593
00:32:51,560 --> 00:33:00,690
this FPS is practical even more one big

594
00:32:57,930 --> 00:33:03,210
information leakage can can be used by

595
00:33:00,690 --> 00:33:06,690
attacker to want to recover one bit key

596
00:33:03,210 --> 00:33:08,940
information in this picture I define a

597
00:33:06,690 --> 00:33:12,300
function in security this function takes

598
00:33:08,940 --> 00:33:15,810
some parameter I where I is the index of

599
00:33:12,300 --> 00:33:19,020
the targeting page of the secret key the

600
00:33:15,810 --> 00:33:20,129
attacker 1 to the cour in this table we

601
00:33:19,020 --> 00:33:22,740
first choice

602
00:33:20,130 --> 00:33:26,340
our sacred key and the public key pairs

603
00:33:22,740 --> 00:33:29,730
of DFA algorithm then we can call it

604
00:33:26,340 --> 00:33:33,780
with our key function with one with

605
00:33:29,730 --> 00:33:38,430
parameter I then we can get the ice

606
00:33:33,780 --> 00:33:41,970
index of the secret key of PFA PF whisk

607
00:33:38,430 --> 00:33:44,070
scheme the source code is also published

608
00:33:41,970 --> 00:33:45,200
in my github you can check it by

609
00:33:44,070 --> 00:33:50,280
yourself

610
00:33:45,200 --> 00:33:56,460
so another attack on this psi protocol

611
00:33:50,280 --> 00:34:00,480
is here in the PSA protocol we also need

612
00:33:56,460 --> 00:34:03,630
to protect protect the service data from

613
00:34:00,480 --> 00:34:06,990
the Koran this needs a home Orphic

614
00:34:03,630 --> 00:34:10,560
encryption have circle privacy however

615
00:34:06,990 --> 00:34:13,710
most of the homomorphic library have no

616
00:34:10,560 --> 00:34:16,710
second privacy for now so a malicious

617
00:34:13,710 --> 00:34:20,280
clan can kill extra information of the

618
00:34:16,710 --> 00:34:22,620
service database why here I will not go

619
00:34:20,280 --> 00:34:25,530
through detail of this problem because

620
00:34:22,620 --> 00:34:27,420
it's not easy to understand we are

621
00:34:25,530 --> 00:34:27,960
writing a paper to talk about this

622
00:34:27,420 --> 00:34:32,030
problem

623
00:34:27,960 --> 00:34:35,580
so more detail can be found in the paper

624
00:34:32,030 --> 00:34:38,460
here is a demo of this attack but I

625
00:34:35,580 --> 00:34:40,469
think it may be to complicate you to

626
00:34:38,460 --> 00:34:44,220
talk it here and my time is a little

627
00:34:40,469 --> 00:34:49,290
limited so you can find it on my github

628
00:34:44,219 --> 00:34:53,359
and relate so as also amazing cell does

629
00:34:49,290 --> 00:34:56,580
not provide secure privacy on default

630
00:34:53,360 --> 00:34:59,310
the problem has been adjust insults

631
00:34:56,580 --> 00:35:02,880
handbook to solve this problem the best

632
00:34:59,310 --> 00:35:05,009
practice is to use those floating which

633
00:35:02,880 --> 00:35:07,170
means that you can add an encryption of

634
00:35:05,010 --> 00:35:11,280
zero to the result of the computation

635
00:35:07,170 --> 00:35:14,310
with enough noise noise however there is

636
00:35:11,280 --> 00:35:17,700
no standard interface to in such things

637
00:35:14,310 --> 00:35:20,580
so normal software developer definitely

638
00:35:17,700 --> 00:35:23,009
cannot play with this magic because it's

639
00:35:20,580 --> 00:35:26,819
not easy to know how much noise you need

640
00:35:23,010 --> 00:35:29,790
to provide and follow or protocol fully

641
00:35:26,820 --> 00:35:33,210
homomorphic library sims have the same

642
00:35:29,790 --> 00:35:38,279
circle privacy problem

643
00:35:33,210 --> 00:35:40,650
yes some ad hoc work around about about

644
00:35:38,280 --> 00:35:45,569
this but there was no generic solution

645
00:35:40,650 --> 00:35:50,730
to to this problem and a solution and if

646
00:35:45,569 --> 00:35:53,190
you if you implemented some application

647
00:35:50,730 --> 00:35:58,020
on this you need a crypto expert to

648
00:35:53,190 --> 00:36:00,780
implement it to solve this problem first

649
00:35:58,020 --> 00:36:06,359
you can use an improved version of psi

650
00:36:00,780 --> 00:36:08,760
protocol published in CSS 2018 it is

651
00:36:06,359 --> 00:36:12,779
secure against any malicious party

652
00:36:08,760 --> 00:36:16,859
however is not a generic solution as for

653
00:36:12,780 --> 00:36:20,670
secure privacy of seals and homomorphic

654
00:36:16,859 --> 00:36:23,609
encryption if you want to use it in your

655
00:36:20,670 --> 00:36:25,980
application and you need a cryptid

656
00:36:23,609 --> 00:36:28,250
expert to reveal your implementation and

657
00:36:25,980 --> 00:36:32,790
you need professional knowledge or

658
00:36:28,250 --> 00:36:36,559
knowledge-based crypto otherwise is very

659
00:36:32,790 --> 00:36:38,790
insecure system is now considering

660
00:36:36,559 --> 00:36:44,569
considering to provide a standard

661
00:36:38,790 --> 00:36:47,700
interface to deal with these issues so

662
00:36:44,569 --> 00:36:50,190
another security P for sale we found is

663
00:36:47,700 --> 00:36:52,649
that the encode of the seal will take

664
00:36:50,190 --> 00:36:55,470
some information homomorphic encryption

665
00:36:52,650 --> 00:36:58,200
is work working on some polynomial ring

666
00:36:55,470 --> 00:37:01,649
based on financial presence on financial

667
00:36:58,200 --> 00:37:03,868
field but the cipher text we want to

668
00:37:01,650 --> 00:37:07,260
process is always may be some integer

669
00:37:03,869 --> 00:37:11,400
some flawed or some string so we have to

670
00:37:07,260 --> 00:37:14,910
convert them to the polynomial ring so

671
00:37:11,400 --> 00:37:18,329
provide an interface to the converting

672
00:37:14,910 --> 00:37:20,730
you can use integer encoder of cell to

673
00:37:18,329 --> 00:37:22,530
encode an integer to a polynominal then

674
00:37:20,730 --> 00:37:25,140
you can work with for homomorphic

675
00:37:22,530 --> 00:37:28,380
encryption but the problem here is that

676
00:37:25,140 --> 00:37:31,230
the mapping of this encoder is not

677
00:37:28,380 --> 00:37:36,420
one-to-one so there will be some

678
00:37:31,230 --> 00:37:39,030
information leakage this is a demo of

679
00:37:36,420 --> 00:37:43,859
the information leakage in sales integer

680
00:37:39,030 --> 00:37:46,540
encoder in this demo we can see that we

681
00:37:43,859 --> 00:37:50,640
have to plant x + 1 and

682
00:37:46,540 --> 00:37:54,250
- we want to compute m1 plus m2 of

683
00:37:50,640 --> 00:37:58,000
course in an encrypted form in the first

684
00:37:54,250 --> 00:38:00,610
case we have M 1 equal to 2 and M 2

685
00:37:58,000 --> 00:38:04,380
equal to 2 so we can easily get that

686
00:38:00,610 --> 00:38:09,100
result is 4 and that in the second case

687
00:38:04,380 --> 00:38:13,330
in a you know both and once we have M 1

688
00:38:09,100 --> 00:38:15,400
equal to 1 and M 2 equal to 3 so we can

689
00:38:13,330 --> 00:38:19,630
easily get that as a result is also

690
00:38:15,400 --> 00:38:23,290
equal to 4 so attacker should not

691
00:38:19,630 --> 00:38:26,890
distinguish those two just to test

692
00:38:23,290 --> 00:38:31,570
because this result is as equal to the

693
00:38:26,890 --> 00:38:35,589
result is equal to 2/4 so he cannot E

694
00:38:31,570 --> 00:38:36,610
she should not distinguish those two but

695
00:38:35,590 --> 00:38:39,100
here is the problem

696
00:38:36,610 --> 00:38:43,240
although the decoded version of the

697
00:38:39,100 --> 00:38:46,589
results are the same for the encoded

698
00:38:43,240 --> 00:38:52,810
form are actually different in the case

699
00:38:46,590 --> 00:38:56,380
in the in uppercase the encoded form is

700
00:38:52,810 --> 00:38:59,410
2 times X and in a boating case the

701
00:38:56,380 --> 00:39:02,230
encoded form is expressed - it's not in

702
00:38:59,410 --> 00:39:07,629
Co so how I can distinguish these two

703
00:39:02,230 --> 00:39:12,280
and this is a information leakage so

704
00:39:07,630 --> 00:39:20,710
attacker can infer the operator from the

705
00:39:12,280 --> 00:39:24,910
encoded form so the encoder of Co is not

706
00:39:20,710 --> 00:39:28,630
safe I have implemented a demo attack

707
00:39:24,910 --> 00:39:30,850
the classical cryptography problem the

708
00:39:28,630 --> 00:39:33,640
millionaire problem based on homomorphic

709
00:39:30,850 --> 00:39:37,870
encryption you can find a code in my

710
00:39:33,640 --> 00:39:39,520
github also so this problem by also

711
00:39:37,870 --> 00:39:42,660
happening in other homomorphic

712
00:39:39,520 --> 00:39:45,009
encryption nips so be careful when using

713
00:39:42,660 --> 00:39:48,000
encoding functionality provided by

714
00:39:45,010 --> 00:39:51,130
homomorphic deep the crypto primitive

715
00:39:48,000 --> 00:39:52,690
hybrid security proof but they by the

716
00:39:51,130 --> 00:39:56,860
coding scheme a lot

717
00:39:52,690 --> 00:39:58,570
as for sale the medication is just to

718
00:39:56,860 --> 00:40:00,130
not use integer

719
00:39:58,570 --> 00:40:03,370
encoder or floating

720
00:40:00,130 --> 00:40:06,520
colder less you consider only the most

721
00:40:03,370 --> 00:40:09,549
radiative tools instead you can use a

722
00:40:06,520 --> 00:40:13,690
Bosch encoder or cyclic es encoder in Co

723
00:40:09,550 --> 00:40:16,060
to deal with those problems there are

724
00:40:13,690 --> 00:40:18,780
other security issues in home over

725
00:40:16,060 --> 00:40:20,980
encryption for example fully for Mamaki

726
00:40:18,780 --> 00:40:24,660
encryption does not provide security

727
00:40:20,980 --> 00:40:27,790
picture such as some commonly no

728
00:40:24,660 --> 00:40:30,819
encryption algorithm for example it's

729
00:40:27,790 --> 00:40:33,340
not a authenticated encryption you

730
00:40:30,820 --> 00:40:35,770
cannot guarantee the integrity of the

731
00:40:33,340 --> 00:40:37,750
data attacker can use phone home

732
00:40:35,770 --> 00:40:40,960
American nature to modify the cypher

733
00:40:37,750 --> 00:40:42,970
text so to look news homomorphic

734
00:40:40,960 --> 00:40:45,850
encryption for data storage and

735
00:40:42,970 --> 00:40:49,569
transmission directly you can consider

736
00:40:45,850 --> 00:40:53,799
wrapping the HD traffic inside some TLS

737
00:40:49,570 --> 00:40:58,990
or something else homomorphic encryption

738
00:40:53,800 --> 00:41:00,790
is still young technology and they still

739
00:40:58,990 --> 00:41:03,430
a long way to go with homomorphic

740
00:41:00,790 --> 00:41:06,730
encryption currently we need a standard

741
00:41:03,430 --> 00:41:08,940
documentation for using it and for

742
00:41:06,730 --> 00:41:12,070
making more people to understand it

743
00:41:08,940 --> 00:41:14,620
Microsoft is needing a developing of a

744
00:41:12,070 --> 00:41:18,310
standard for homework encryption

745
00:41:14,620 --> 00:41:21,339
hopefully it were commissioned by the

746
00:41:18,310 --> 00:41:23,410
way I think it's important to include

747
00:41:21,340 --> 00:41:27,400
some protocol security to appeal to the

748
00:41:23,410 --> 00:41:29,049
standards and the last thing I want to

749
00:41:27,400 --> 00:41:31,890
talk about is that fully homomorphic

750
00:41:29,050 --> 00:41:35,640
encryption cannot actually compute any

751
00:41:31,890 --> 00:41:37,720
arbitrary camp program because

752
00:41:35,640 --> 00:41:40,509
absolutely function in fully homomorphic

753
00:41:37,720 --> 00:41:44,040
encryption that means that you can do

754
00:41:40,510 --> 00:41:45,280
after addition and multiplication but

755
00:41:44,040 --> 00:41:47,500
arbitrary

756
00:41:45,280 --> 00:41:49,600
addition and multiplication does not

757
00:41:47,500 --> 00:41:53,050
mean that you can run after a program

758
00:41:49,600 --> 00:41:57,670
for example you can not do a comparison

759
00:41:53,050 --> 00:42:00,130
directly so the if branch is not

760
00:41:57,670 --> 00:42:02,530
supported here so fully homomorphic

761
00:42:00,130 --> 00:42:05,070
encryption actually cannot do anything

762
00:42:02,530 --> 00:42:05,070
you want

763
00:42:05,800 --> 00:42:12,340
I think the so I think the famous

764
00:42:08,440 --> 00:42:14,380
metaphor I mentioned before in Shu

765
00:42:12,340 --> 00:42:17,320
should be update like this

766
00:42:14,380 --> 00:42:21,970
the worker in the picture to wear some

767
00:42:17,320 --> 00:42:26,400
ice chart and so she cannot see the jury

768
00:42:21,970 --> 00:42:28,899
all the box in in the right picture

769
00:42:26,400 --> 00:42:31,450
should be a LP code one

770
00:42:28,900 --> 00:42:32,859
just like you cannot come do some

771
00:42:31,450 --> 00:42:39,460
comparison in a fully homomorphic

772
00:42:32,859 --> 00:42:42,369
encryption okay so here is a the

773
00:42:39,460 --> 00:42:45,040
conclusion of my talk in this talk you

774
00:42:42,369 --> 00:42:48,280
can see that free homomorphic encryption

775
00:42:45,040 --> 00:42:50,500
is useful in many scenarios and its

776
00:42:48,280 --> 00:42:53,980
performance is actually improving and

777
00:42:50,500 --> 00:42:56,830
accessible for now but homomorphic

778
00:42:53,980 --> 00:42:59,950
encryption is cannot stop everything you

779
00:42:56,830 --> 00:43:03,460
want it cannot really run after a

780
00:42:59,950 --> 00:43:05,859
program and there there are a lot of

781
00:43:03,460 --> 00:43:09,400
security people and security risk to

782
00:43:05,859 --> 00:43:12,580
using it it needs it still needed no way

783
00:43:09,400 --> 00:43:15,040
to go to be widely used and it's

784
00:43:12,580 --> 00:43:19,450
extremely dangerous to use from morphic

785
00:43:15,040 --> 00:43:21,400
encryption without an expert for now the

786
00:43:19,450 --> 00:43:23,580
crypto community in the queue folks are

787
00:43:21,400 --> 00:43:28,180
building some secure protocol

788
00:43:23,580 --> 00:43:32,140
homomorphic encryption and I want to

789
00:43:28,180 --> 00:43:34,299
thanks k9 of Microsoft Research and -

790
00:43:32,140 --> 00:43:37,060
home of Alibaba

791
00:43:34,300 --> 00:43:40,540
Janee me not for the valuable comments

792
00:43:37,060 --> 00:43:44,609
and suggestion to these talks and that's

793
00:43:40,540 --> 00:43:44,609
all for today thank you for your time

