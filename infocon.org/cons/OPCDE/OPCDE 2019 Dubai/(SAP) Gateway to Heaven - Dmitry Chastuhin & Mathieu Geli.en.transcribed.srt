1
00:00:03,960 --> 00:00:10,740
my name is Dimitri here I'm as

2
00:00:06,960 --> 00:00:13,500
independent security researcher last

3
00:00:10,740 --> 00:00:18,180
several years focus of my interest is

4
00:00:13,500 --> 00:00:21,230
ERP security especially ASAP I do as a

5
00:00:18,180 --> 00:00:27,089
bee penetration test security audit and

6
00:00:21,230 --> 00:00:30,689
ERP security researches I do yeah are

7
00:00:27,089 --> 00:00:34,320
you so I'm not usually I'm a security

8
00:00:30,689 --> 00:00:38,040
engineer and researcher the last four

9
00:00:34,320 --> 00:00:42,330
years worked with Dmitri by doing like I

10
00:00:38,040 --> 00:00:44,970
said out it's been tests on ERP systems

11
00:00:42,330 --> 00:00:48,750
so finding vulnerabilities in sa P

12
00:00:44,970 --> 00:00:54,629
Oracle technologies and coordinating

13
00:00:48,750 --> 00:00:59,810
with the the vendors and walking for so

14
00:00:54,630 --> 00:00:59,810
GG that is part of Capgemini in France

15
00:01:00,050 --> 00:01:06,780
so our agenda today is to explain to you

16
00:01:04,170 --> 00:01:10,860
to give you a glimpse but our research

17
00:01:06,780 --> 00:01:14,910
process on to why we did this risk

18
00:01:10,860 --> 00:01:17,820
specific research on sa P and we will

19
00:01:14,910 --> 00:01:21,149
present a bit a word about the

20
00:01:17,820 --> 00:01:22,949
fundamental I mean on what we walked the

21
00:01:21,150 --> 00:01:25,110
s AP application servers and then we'll

22
00:01:22,950 --> 00:01:29,159
focus on specific components we found

23
00:01:25,110 --> 00:01:31,890
issues so the gateway the message server

24
00:01:29,159 --> 00:01:34,290
and will present new vectors that we can

25
00:01:31,890 --> 00:01:37,830
apply to get to compromised systems

26
00:01:34,290 --> 00:01:42,260
through these problems and of course

27
00:01:37,830 --> 00:01:44,550
mitigation so why this research

28
00:01:42,260 --> 00:01:49,170
basically we noticed that during

29
00:01:44,550 --> 00:01:51,899
outreach pen test at clients we very

30
00:01:49,170 --> 00:01:54,630
often see issues with related to

31
00:01:51,900 --> 00:01:57,150
architecture and configuration that are

32
00:01:54,630 --> 00:02:02,100
actually well known from the vendor that

33
00:01:57,150 --> 00:02:05,310
is SAT but the administrator sometimes

34
00:02:02,100 --> 00:02:08,459
don't really know where the the the

35
00:02:05,310 --> 00:02:11,340
criticality and the impact of letting

36
00:02:08,459 --> 00:02:13,219
those issues on their systems so we

37
00:02:11,340 --> 00:02:16,319
would like to raise a bit awareness

38
00:02:13,219 --> 00:02:20,420
about those issues and

39
00:02:16,319 --> 00:02:24,030
what how could it go wrong let's say so

40
00:02:20,420 --> 00:02:28,138
someone parties we love to do to code in

41
00:02:24,030 --> 00:02:30,150
Python and we we had fun with a specific

42
00:02:28,139 --> 00:02:32,760
Python library that is developed by

43
00:02:30,150 --> 00:02:34,530
Martin gallo it's open source and we

44
00:02:32,760 --> 00:02:36,899
wanted to contribute as well on this

45
00:02:34,530 --> 00:02:39,900
library because it's the he implemented

46
00:02:36,900 --> 00:02:42,090
a lot of ACP proprietary protocols that

47
00:02:39,900 --> 00:02:45,299
are now in the open with this library so

48
00:02:42,090 --> 00:02:49,439
we base a walk on this and implemented

49
00:02:45,299 --> 00:02:51,930
new stuff over there over that and of

50
00:02:49,439 --> 00:02:54,150
course as we are doing all the it

51
00:02:51,930 --> 00:02:57,359
pentest NextEra wants to have like more

52
00:02:54,150 --> 00:03:00,090
bullets let's say to help us during

53
00:02:57,359 --> 00:03:05,250
audits to compromise systems when other

54
00:03:00,090 --> 00:03:08,189
venerability don't work when we are

55
00:03:05,250 --> 00:03:10,919
speaking about ACP actually we need to

56
00:03:08,189 --> 00:03:14,129
introduce some acronyms that are kind of

57
00:03:10,919 --> 00:03:18,150
specific and that could be misleading if

58
00:03:14,129 --> 00:03:21,090
you so just to introduce for those who

59
00:03:18,150 --> 00:03:24,540
don't who are not very aware of what ACP

60
00:03:21,090 --> 00:03:28,459
is that's a big german company that is

61
00:03:24,540 --> 00:03:30,569
selling enterprise solution that helps

62
00:03:28,459 --> 00:03:34,939
implementing business logic

63
00:03:30,569 --> 00:03:37,828
it's like HR processes finance supplier

64
00:03:34,939 --> 00:03:42,299
relationship management customers and

65
00:03:37,829 --> 00:03:44,699
extra so that's quite huge servers and a

66
00:03:42,299 --> 00:03:47,129
complex software and they have their all

67
00:03:44,699 --> 00:03:49,169
actual names like the AAS we will speak

68
00:03:47,129 --> 00:03:53,159
often about AES that's an application

69
00:03:49,169 --> 00:03:55,609
server so that's where the basically the

70
00:03:53,159 --> 00:03:58,228
business logic is executed and the

71
00:03:55,609 --> 00:04:00,479
different application server can speak

72
00:03:58,229 --> 00:04:03,959
to each other and exchange information

73
00:04:00,479 --> 00:04:06,139
we are the protocol they call RFC so

74
00:04:03,959 --> 00:04:06,139
that's

75
00:04:07,240 --> 00:04:14,400
[Music]

76
00:04:09,110 --> 00:04:18,480
the in SAPT term I miss it

77
00:04:14,400 --> 00:04:20,610
wait let me check yeah yeah remote

78
00:04:18,480 --> 00:04:22,920
function call sorry because there yeah

79
00:04:20,610 --> 00:04:26,130
there are different acronyms that I that

80
00:04:22,920 --> 00:04:29,010
are can be misleading so they use this

81
00:04:26,130 --> 00:04:30,600
protocol to communicate with an exchange

82
00:04:29,010 --> 00:04:34,320
business information between application

83
00:04:30,600 --> 00:04:36,930
servers there is the s ID denomination

84
00:04:34,320 --> 00:04:40,260
so it's up a system identifier that will

85
00:04:36,930 --> 00:04:42,000
group several application server the

86
00:04:40,260 --> 00:04:44,820
database basically they will share

87
00:04:42,000 --> 00:04:49,620
common resources that's named s idea

88
00:04:44,820 --> 00:04:51,360
that's three letters and then the what's

89
00:04:49,620 --> 00:04:54,300
exchanged what's executed between those

90
00:04:51,360 --> 00:04:56,880
server is some code and the language

91
00:04:54,300 --> 00:05:00,600
used mainly is the ABAP language so

92
00:04:56,880 --> 00:05:02,730
above ABAP whatever this specificity

93
00:05:00,600 --> 00:05:04,740
very quickly about this language that it

94
00:05:02,730 --> 00:05:07,970
is stored in the database of the server

95
00:05:04,740 --> 00:05:10,980
the source code is stored actually and

96
00:05:07,970 --> 00:05:13,650
bytecode compiled version as well so

97
00:05:10,980 --> 00:05:16,950
that's a kind of specificity about ABP

98
00:05:13,650 --> 00:05:19,560
let's say and then the notion of clients

99
00:05:16,950 --> 00:05:23,760
clients it's not like you know in the

100
00:05:19,560 --> 00:05:25,830
usual TCP and networking a client here

101
00:05:23,760 --> 00:05:30,480
is only on server side is a way to

102
00:05:25,830 --> 00:05:33,630
segregate users so you may find clients

103
00:05:30,480 --> 00:05:35,790
for instance here we see 0 0 0 and then

104
00:05:33,630 --> 00:05:38,100
you will have some users and then you

105
00:05:35,790 --> 00:05:40,350
will have client 0 0 1 and that will

106
00:05:38,100 --> 00:05:42,540
separate those user day they won't

107
00:05:40,350 --> 00:05:47,730
interact I mean the resources will be a

108
00:05:42,540 --> 00:05:52,950
segregated we add this information so

109
00:05:47,730 --> 00:05:55,080
not yes before we go to the next part we

110
00:05:52,950 --> 00:05:58,260
should describe here what is SPE

111
00:05:55,080 --> 00:05:59,909
application server or a s so application

112
00:05:58,260 --> 00:06:05,010
server it's a really important part of

113
00:05:59,910 --> 00:06:11,360
si P is that runs a business logic and

114
00:06:05,010 --> 00:06:15,030
we could dedicate two or three different

115
00:06:11,360 --> 00:06:18,840
SP application servers it could be ABAP

116
00:06:15,030 --> 00:06:20,128
based application server that hosts ABAP

117
00:06:18,840 --> 00:06:26,099
applications Java

118
00:06:20,129 --> 00:06:29,309
and the modern one is Haena based but

119
00:06:26,099 --> 00:06:34,769
mainly what you find on premised systems

120
00:06:29,309 --> 00:06:38,969
will be ASAP ABAP based system anyway

121
00:06:34,769 --> 00:06:41,219
almost all these three application

122
00:06:38,969 --> 00:06:44,998
servers have a different architecture

123
00:06:41,219 --> 00:06:48,330
but at the same time they have common

124
00:06:44,999 --> 00:06:50,969
part it is central services like gateway

125
00:06:48,330 --> 00:06:54,448
message server and cursor and others

126
00:06:50,969 --> 00:06:57,089
that's why for our target for today we

127
00:06:54,449 --> 00:07:00,679
choose as a big way because as a big

128
00:06:57,089 --> 00:07:03,029
good way exist on every ASAP

129
00:07:00,679 --> 00:07:05,849
installation on every environment

130
00:07:03,029 --> 00:07:08,580
because it we need SP Gateway for

131
00:07:05,849 --> 00:07:12,919
communication between internal processes

132
00:07:08,580 --> 00:07:16,758
of SCP between if we want to communicate

133
00:07:12,919 --> 00:07:19,889
with SP with third-party application and

134
00:07:16,759 --> 00:07:21,659
also the quail required needs for

135
00:07:19,889 --> 00:07:24,509
communication between two different

136
00:07:21,659 --> 00:07:28,369
recipe systems so it's one important

137
00:07:24,509 --> 00:07:32,729
core component that's why we choose it

138
00:07:28,369 --> 00:07:34,979
so as I said on this scheme or diagram

139
00:07:32,729 --> 00:07:39,329
you can see that different application

140
00:07:34,979 --> 00:07:42,029
servers could have different logic

141
00:07:39,329 --> 00:07:45,050
different work processes but all

142
00:07:42,029 --> 00:07:47,550
communication goes through the Gateway

143
00:07:45,050 --> 00:07:50,849
so and there were there was

144
00:07:47,550 --> 00:07:53,879
vulnerability in as a bigoted way that

145
00:07:50,849 --> 00:07:56,699
allows to trigger at least two remote

146
00:07:53,879 --> 00:07:59,959
code execution actually and how does it

147
00:07:56,699 --> 00:08:03,629
work because exist 2 legit ways to

148
00:07:59,959 --> 00:08:07,589
execute operating system comment through

149
00:08:03,629 --> 00:08:09,869
the Gateway it is to RFC function

150
00:08:07,589 --> 00:08:12,899
functions RFC exact requires

151
00:08:09,869 --> 00:08:16,110
authentication and user proper user

152
00:08:12,899 --> 00:08:17,999
rights for launching comment on

153
00:08:16,110 --> 00:08:24,990
operating system level and the second

154
00:08:17,999 --> 00:08:28,319
one is AP xpg that requires only record

155
00:08:24,990 --> 00:08:31,820
in ACL list if we have empty ACL list

156
00:08:28,319 --> 00:08:33,870
then we could execute

157
00:08:31,820 --> 00:08:36,240
operating system-level comments are

158
00:08:33,870 --> 00:08:38,479
anonymous without any authentication so

159
00:08:36,240 --> 00:08:46,110
how it works

160
00:08:38,479 --> 00:08:49,110
SP user use proprietary protocol client

161
00:08:46,110 --> 00:08:51,810
SP GUI and connects to the application

162
00:08:49,110 --> 00:08:55,200
server using login name password and

163
00:08:51,810 --> 00:08:59,189
client number in on application server

164
00:08:55,200 --> 00:09:06,540
he runs transaction is III seven and

165
00:08:59,190 --> 00:09:08,430
stars a RC function SP xpg and ask

166
00:09:06,540 --> 00:09:10,469
gateway execute

167
00:09:08,430 --> 00:09:13,979
Who am I comment on the system and

168
00:09:10,470 --> 00:09:16,860
comment will be executed okay also he

169
00:09:13,980 --> 00:09:21,030
could ask application server execute the

170
00:09:16,860 --> 00:09:24,390
same common who am I on the other s ad

171
00:09:21,030 --> 00:09:27,660
system on other gateway that do not have

172
00:09:24,390 --> 00:09:30,780
any link to the first one and this

173
00:09:27,660 --> 00:09:32,910
comment also will be executed that means

174
00:09:30,780 --> 00:09:36,000
that there is no authentication between

175
00:09:32,910 --> 00:09:39,689
application server one of one of SAT one

176
00:09:36,000 --> 00:09:42,420
and get away from SAT two that means

177
00:09:39,690 --> 00:09:44,760
that we could somehow sniff traffic

178
00:09:42,420 --> 00:09:48,000
between these two systems and try to

179
00:09:44,760 --> 00:09:51,500
replace him just send from our attackers

180
00:09:48,000 --> 00:09:55,200
machine that's how we did it and we

181
00:09:51,500 --> 00:09:56,970
successfully executed code on gateway

182
00:09:55,200 --> 00:10:01,260
without any authentication without any

183
00:09:56,970 --> 00:10:03,750
problems so and as I said this is well

184
00:10:01,260 --> 00:10:06,569
known vulnerability well the first

185
00:10:03,750 --> 00:10:09,930
mission of this problem was made maybe

186
00:10:06,570 --> 00:10:12,420
10 years ago 12 we have to go and but

187
00:10:09,930 --> 00:10:13,770
the thing is that there is no proof of

188
00:10:12,420 --> 00:10:16,020
concept of this attacker there is no

189
00:10:13,770 --> 00:10:18,270
exploit for this attack and this is bad

190
00:10:16,020 --> 00:10:23,670
because a lot of penetration test teams

191
00:10:18,270 --> 00:10:25,530
I think met a lot of SP systems during

192
00:10:23,670 --> 00:10:28,770
their penetration test but they don't

193
00:10:25,530 --> 00:10:32,250
have any exploits to compromise it and

194
00:10:28,770 --> 00:10:34,319
reach the goal that's why today we are

195
00:10:32,250 --> 00:10:38,850
going to release 2 version of this

196
00:10:34,320 --> 00:10:42,110
exploit one of these just recent sent

197
00:10:38,850 --> 00:10:45,030
our captured packets and the second one

198
00:10:42,110 --> 00:10:50,150
based on reverse engineering of

199
00:10:45,030 --> 00:10:53,790
RFC protocol so and start with just

200
00:10:50,150 --> 00:10:57,390
simplest one that just replay our

201
00:10:53,790 --> 00:10:58,589
packets it is we start with that because

202
00:10:57,390 --> 00:11:00,330
it's really easy

203
00:10:58,590 --> 00:11:01,800
we just need to capture traffic between

204
00:11:00,330 --> 00:11:04,620
application server and Gateway and

205
00:11:01,800 --> 00:11:07,199
resent it using our favorite languages

206
00:11:04,620 --> 00:11:10,680
in our case it was Python we just need

207
00:11:07,200 --> 00:11:12,390
to send 4 packets and change one dynamic

208
00:11:10,680 --> 00:11:15,020
variable inside these packets it's a

209
00:11:12,390 --> 00:11:18,990
convert conversation ID it's like a

210
00:11:15,020 --> 00:11:21,810
session number for 8 digits of sessions

211
00:11:18,990 --> 00:11:25,350
it doesn't require any depends this is

212
00:11:21,810 --> 00:11:29,660
it easy to code and works really fast we

213
00:11:25,350 --> 00:11:33,480
can exploit across the whole internet

214
00:11:29,660 --> 00:11:37,380
but this is a process also this approach

215
00:11:33,480 --> 00:11:39,450
has a cons because we just send raw

216
00:11:37,380 --> 00:11:44,220
packets we don't know what is inside the

217
00:11:39,450 --> 00:11:46,800
this sauce packets good because it's

218
00:11:44,220 --> 00:11:50,760
really hard to maintain this type of

219
00:11:46,800 --> 00:11:53,640
approach because depends on ASAP kernel

220
00:11:50,760 --> 00:11:56,130
version we probably sometimes could

221
00:11:53,640 --> 00:11:57,480
should change something in these packets

222
00:11:56,130 --> 00:11:59,189
that's why it's really important to

223
00:11:57,480 --> 00:12:01,170
understand what is inside of this

224
00:11:59,190 --> 00:12:05,390
package and of course SP specific

225
00:12:01,170 --> 00:12:09,089
limitation here if we try to get

226
00:12:05,390 --> 00:12:12,390
executed comments that give us a big

227
00:12:09,090 --> 00:12:14,250
output as a big gateway and cause it and

228
00:12:12,390 --> 00:12:18,930
we couldn't read it we could execute

229
00:12:14,250 --> 00:12:23,480
comment but we can get the result so

230
00:12:18,930 --> 00:12:27,839
that's why we did reverse engineering of

231
00:12:23,480 --> 00:12:30,740
RFC protocol and on this slide you can

232
00:12:27,840 --> 00:12:34,710
see one of the packet

233
00:12:30,740 --> 00:12:37,490
it's the initial packet we can see that

234
00:12:34,710 --> 00:12:40,920
which we should send a version number

235
00:12:37,490 --> 00:12:44,070
request type IP address some bearings

236
00:12:40,920 --> 00:12:46,680
etc etc this is the smallest one but the

237
00:12:44,070 --> 00:12:52,200
most important part is in packet number

238
00:12:46,680 --> 00:12:55,439
3 of RFC protocol is a small part of the

239
00:12:52,200 --> 00:12:56,820
whole packet you can see that probably

240
00:12:55,440 --> 00:13:01,050
you can see I know

241
00:12:56,820 --> 00:13:03,570
here is we specify comments that we want

242
00:13:01,050 --> 00:13:05,910
to be executed on the server side in our

243
00:13:03,570 --> 00:13:11,640
case it is Who am I and a lot of a lot

244
00:13:05,910 --> 00:13:15,449
of different and important field on the

245
00:13:11,640 --> 00:13:16,530
bottom so the whole packet structure

246
00:13:15,450 --> 00:13:21,840
looks like this

247
00:13:16,530 --> 00:13:25,949
we have TCP for transport layer ni RFC

248
00:13:21,840 --> 00:13:29,220
SP AC th and XP AG and a lot of a lot of

249
00:13:25,950 --> 00:13:33,690
little fills inside so why did we do

250
00:13:29,220 --> 00:13:35,880
this reverse engineering not just

251
00:13:33,690 --> 00:13:39,180
because it's important to understand it

252
00:13:35,880 --> 00:13:42,510
also could be helpful for future attack

253
00:13:39,180 --> 00:13:47,189
for example if you want to do a fuzzing

254
00:13:42,510 --> 00:13:49,650
you can fast this protocol and probably

255
00:13:47,190 --> 00:13:53,070
find much more vulnerabilities in

256
00:13:49,650 --> 00:13:57,990
Gateway and other services of SCP that

257
00:13:53,070 --> 00:14:01,080
brings you new more abilities and remote

258
00:13:57,990 --> 00:14:04,470
code execution so anyway this exploit

259
00:14:01,080 --> 00:14:07,170
requires network access to s a bigot way

260
00:14:04,470 --> 00:14:11,430
that's why we scan the whole internet

261
00:14:07,170 --> 00:14:14,699
and try to find available s epic

262
00:14:11,430 --> 00:14:17,609
gateways and we have found a lot that

263
00:14:14,700 --> 00:14:21,030
that's pretty bad because this is should

264
00:14:17,610 --> 00:14:24,630
be chiral service anyways there exist

265
00:14:21,030 --> 00:14:27,150
United States India China top three

266
00:14:24,630 --> 00:14:29,300
countries okay

267
00:14:27,150 --> 00:14:33,260
as I said this is well known

268
00:14:29,300 --> 00:14:36,240
vulnerabilities but we still see these

269
00:14:33,260 --> 00:14:41,040
vulnerabilities on client side and we

270
00:14:36,240 --> 00:14:45,780
and we use it for for getting access

271
00:14:41,040 --> 00:14:49,560
into the ASAP so anyway SP fix this list

272
00:14:45,780 --> 00:14:52,699
fix this with configuration they start

273
00:14:49,560 --> 00:14:57,390
started ship the ship now now the ship

274
00:14:52,700 --> 00:15:01,260
SP with a spigot way with proper ACL

275
00:14:57,390 --> 00:15:04,830
list that say that SP now as a bigot way

276
00:15:01,260 --> 00:15:07,670
execute operating system-level comment

277
00:15:04,830 --> 00:15:10,630
only if you get this the packet from

278
00:15:07,670 --> 00:15:15,610
localhost from one to seven

279
00:15:10,630 --> 00:15:19,540
or one or from application server that

280
00:15:15,610 --> 00:15:22,300
belongs to the same s ad so because in

281
00:15:19,540 --> 00:15:26,019
one s ad system in one s AP environment

282
00:15:22,300 --> 00:15:30,359
could be several application services

283
00:15:26,019 --> 00:15:36,009
belongs to the one s ad and if Gateway

284
00:15:30,360 --> 00:15:39,639
get these packets from the this type of

285
00:15:36,009 --> 00:15:42,279
application server he was dude it be

286
00:15:39,639 --> 00:15:45,130
internal internal application server

287
00:15:42,279 --> 00:15:48,939
so anyway right after these things we

288
00:15:45,130 --> 00:15:52,180
thought how could we bypass this and the

289
00:15:48,940 --> 00:15:55,509
obvious way was could we decide disable

290
00:15:52,180 --> 00:15:58,420
ACS and somehow and we have a me and we

291
00:15:55,509 --> 00:16:02,920
have found several ways we have found

292
00:15:58,420 --> 00:16:07,000
three different RFC functions that allow

293
00:16:02,920 --> 00:16:12,610
us to change SP parameters profile

294
00:16:07,000 --> 00:16:16,480
parameters but we again here we have to

295
00:16:12,610 --> 00:16:19,990
have we have to have user account for

296
00:16:16,480 --> 00:16:22,029
changing profile parameters so it works

297
00:16:19,990 --> 00:16:24,850
but first of all we should somehow get

298
00:16:22,029 --> 00:16:28,300
an end user account the second way is

299
00:16:24,850 --> 00:16:34,300
become an internal how could we do this

300
00:16:28,300 --> 00:16:38,109
and there is a server service in SP

301
00:16:34,300 --> 00:16:41,529
environment SP router actually SP router

302
00:16:38,110 --> 00:16:47,199
it with its application level reverse

303
00:16:41,529 --> 00:16:49,800
proxy and if SP router spirit or nice

304
00:16:47,199 --> 00:16:52,449
for communication for example internal

305
00:16:49,800 --> 00:16:57,758
Internet users for hairy access from

306
00:16:52,449 --> 00:17:01,959
Internet to internal SP service so and

307
00:16:57,759 --> 00:17:04,390
if SP routers IP router locates on the

308
00:17:01,959 --> 00:17:08,198
same machine of the same IP address with

309
00:17:04,390 --> 00:17:11,770
a SP gateway then we could ask a spirit

310
00:17:08,199 --> 00:17:15,549
or transmit our packets from the

311
00:17:11,770 --> 00:17:18,609
Internet to the local host based gateway

312
00:17:15,549 --> 00:17:21,309
and that's how Gateway will get this

313
00:17:18,609 --> 00:17:23,000
package from local host IP address and

314
00:17:21,309 --> 00:17:26,510
our exploit

315
00:17:23,000 --> 00:17:30,430
we'll be triggered and again we scans

316
00:17:26,510 --> 00:17:32,690
the internet and we have found a lot of

317
00:17:30,430 --> 00:17:37,490
ESPE routers available through the

318
00:17:32,690 --> 00:17:42,320
internet yeah that's okay but the bad

319
00:17:37,490 --> 00:17:45,770
thing that this configuration when SP

320
00:17:42,320 --> 00:17:48,230
router and a separate way allocated on

321
00:17:45,770 --> 00:17:52,510
the same machine it's really rare and we

322
00:17:48,230 --> 00:17:55,070
want to exploit SP installations that

323
00:17:52,510 --> 00:17:58,460
exist by default without any credentials

324
00:17:55,070 --> 00:18:01,669
without any access except network access

325
00:17:58,460 --> 00:18:05,480
so we we are trying to find another way

326
00:18:01,670 --> 00:18:08,840
for that okay so that's our transition

327
00:18:05,480 --> 00:18:12,650
to the icp-ms edge server that will help

328
00:18:08,840 --> 00:18:15,320
us gain this kind of access so basically

329
00:18:12,650 --> 00:18:18,530
the message server is a central

330
00:18:15,320 --> 00:18:22,639
communication channel between different

331
00:18:18,530 --> 00:18:26,000
si P instance but not in the same way

332
00:18:22,640 --> 00:18:28,640
that the Gateway the Gateway is used to

333
00:18:26,000 --> 00:18:30,320
communicate and transfer like business

334
00:18:28,640 --> 00:18:34,220
information something related to the

335
00:18:30,320 --> 00:18:37,550
business logic here it's more like like

336
00:18:34,220 --> 00:18:40,760
IT infrastructure within a.s.a.p

337
00:18:37,550 --> 00:18:42,950
that will help for instance in case of

338
00:18:40,760 --> 00:18:44,629
load balancing the clients will connect

339
00:18:42,950 --> 00:18:46,250
through the message server and the

340
00:18:44,630 --> 00:18:48,860
message server will indicate which

341
00:18:46,250 --> 00:18:52,490
application server the client should

342
00:18:48,860 --> 00:18:54,889
connect to or another use for this

343
00:18:52,490 --> 00:18:57,050
message server is a information point

344
00:18:54,890 --> 00:18:59,210
where every application server will

345
00:18:57,050 --> 00:19:01,190
publish its state to the message server

346
00:18:59,210 --> 00:19:03,770
so that it will be known between

347
00:19:01,190 --> 00:19:06,350
application server like I'm studying I'm

348
00:19:03,770 --> 00:19:08,300
stopping I have those features to

349
00:19:06,350 --> 00:19:13,669
provide to the cluster and stuff like

350
00:19:08,300 --> 00:19:15,290
that so it's it's in between those two

351
00:19:13,670 --> 00:19:20,350
kind of application server we see it's a

352
00:19:15,290 --> 00:19:20,350
common service this message server and

353
00:19:20,380 --> 00:19:25,550
so those two features I just talked

354
00:19:23,000 --> 00:19:29,510
about load balancing and publishing

355
00:19:25,550 --> 00:19:33,470
information about the application server

356
00:19:29,510 --> 00:19:36,029
is basically splitted into the exposure

357
00:19:33,470 --> 00:19:40,289
is on two different

358
00:19:36,029 --> 00:19:43,169
CP ports so the 36 ññ ññ could vary

359
00:19:40,289 --> 00:19:45,359
between 0 0 to 99 basically but mainly

360
00:19:43,169 --> 00:19:47,729
that's 36 something that will be the

361
00:19:45,359 --> 00:19:49,769
public endpoints the clients will use to

362
00:19:47,729 --> 00:19:52,229
connect to and get their application

363
00:19:49,769 --> 00:19:55,769
server they want to have a graphical log

364
00:19:52,229 --> 00:19:57,840
on the 39 will be in general and will

365
00:19:55,769 --> 00:20:02,159
only be used by the application server

366
00:19:57,840 --> 00:20:04,830
to to exchange information operational

367
00:20:02,159 --> 00:20:07,580
information about a state's this

368
00:20:04,830 --> 00:20:10,039
internal port is where we will focus and

369
00:20:07,580 --> 00:20:12,570
basically it has a mechanism of

370
00:20:10,039 --> 00:20:15,179
authorizations who through a specific

371
00:20:12,570 --> 00:20:17,879
ACL file in the same logic as the

372
00:20:15,179 --> 00:20:22,559
Gateway basically but by default this

373
00:20:17,879 --> 00:20:24,478
ACL contained host equal star so it

374
00:20:22,559 --> 00:20:29,190
means everybody that has network access

375
00:20:24,479 --> 00:20:32,539
to the to these ports could speak and

376
00:20:29,190 --> 00:20:35,519
and use the protocol to do something

377
00:20:32,539 --> 00:20:38,429
there is no antidote education mechanism

378
00:20:35,519 --> 00:20:40,349
basically so what's important here is

379
00:20:38,429 --> 00:20:44,839
what you will do if you are able to

380
00:20:40,349 --> 00:20:47,489
speak to the 39 port and that was a our

381
00:20:44,839 --> 00:20:51,178
research the core of the research so

382
00:20:47,489 --> 00:20:54,269
from a pentester view if you are out

383
00:20:51,179 --> 00:20:56,129
eating like a CBC rescue fire nmap on

384
00:20:54,269 --> 00:20:59,729
those specific ports it will something

385
00:20:56,129 --> 00:21:02,339
like this here so we see the public

386
00:20:59,729 --> 00:21:04,859
endpoint and private internal that is

387
00:21:02,339 --> 00:21:08,389
available we have a kind of information

388
00:21:04,859 --> 00:21:11,070
disclosure on the s ID GRP and the ID

389
00:21:08,389 --> 00:21:13,289
and the host name as well is

390
00:21:11,070 --> 00:21:14,968
communicated through through this port

391
00:21:13,289 --> 00:21:17,219
we can get this information and mostly

392
00:21:14,969 --> 00:21:21,570
basically and that's with the help of

393
00:21:17,219 --> 00:21:23,909
nmap announced sub service probe we

394
00:21:21,570 --> 00:21:27,269
developed and published sometimes ago

395
00:21:23,909 --> 00:21:29,729
ready on github that helps you to see

396
00:21:27,269 --> 00:21:30,839
those all those specific s AP ports and

397
00:21:29,729 --> 00:21:35,909
get a little bit more information

398
00:21:30,839 --> 00:21:38,339
anonymously of course so if we look at

399
00:21:35,909 --> 00:21:41,279
the exporter internet exposure of this

400
00:21:38,339 --> 00:21:43,950
specific internal ports we see that they

401
00:21:41,279 --> 00:21:46,470
are quite some available still we have

402
00:21:43,950 --> 00:21:47,890
our big winners United States India

403
00:21:46,470 --> 00:21:50,230
China

404
00:21:47,890 --> 00:21:51,850
I mean that's kind of logical that's

405
00:21:50,230 --> 00:21:55,150
where most of the server's probably

406
00:21:51,850 --> 00:21:58,600
seats and that's the same situation for

407
00:21:55,150 --> 00:22:01,030
on from my servers if the 39 is very

408
00:21:58,600 --> 00:22:04,389
very often I mean 99% of the time we

409
00:22:01,030 --> 00:22:08,800
will have access to the 39 port if the

410
00:22:04,390 --> 00:22:10,630
36 is available that's so that we

411
00:22:08,800 --> 00:22:13,230
decided to have a look at the

412
00:22:10,630 --> 00:22:17,980
implementation of this specific protocol

413
00:22:13,230 --> 00:22:21,070
and we found that P sub is implemented

414
00:22:17,980 --> 00:22:24,130
already something so we took dice up as

415
00:22:21,070 --> 00:22:28,990
a as a ground basis to to do further

416
00:22:24,130 --> 00:22:31,060
research walk so if we have a look at

417
00:22:28,990 --> 00:22:34,030
past issues on this specific message

418
00:22:31,060 --> 00:22:37,300
server we find something like profile

419
00:22:34,030 --> 00:22:40,000
parameter reads writes denial of service

420
00:22:37,300 --> 00:22:43,240
several denial of service potential a

421
00:22:40,000 --> 00:22:45,220
remote code execution but without any I

422
00:22:43,240 --> 00:22:47,530
mean the potential remote connection is

423
00:22:45,220 --> 00:22:49,270
without any proof of concept that will

424
00:22:47,530 --> 00:22:51,520
get you a remote code execution it's

425
00:22:49,270 --> 00:22:53,230
only a doing a denial of service so you

426
00:22:51,520 --> 00:22:55,750
can find out real if you do not apply

427
00:22:53,230 --> 00:22:57,160
sup you will find examples in the

428
00:22:55,750 --> 00:23:01,150
example the directory will find some

429
00:22:57,160 --> 00:23:05,080
proof of concept of those previous bugs

430
00:23:01,150 --> 00:23:08,410
so our here our ideal assumption is that

431
00:23:05,080 --> 00:23:11,260
if we have access to this 39 instrument

432
00:23:08,410 --> 00:23:13,510
submissive server port we may be able to

433
00:23:11,260 --> 00:23:16,150
fake the fact that we are a new

434
00:23:13,510 --> 00:23:19,360
application server going up and joining

435
00:23:16,150 --> 00:23:21,730
the cluster and with this we may be able

436
00:23:19,360 --> 00:23:24,340
we may I say because we need to check

437
00:23:21,730 --> 00:23:27,340
that we may be able to be seen as an

438
00:23:24,340 --> 00:23:29,530
internal server among the the Gateway it

439
00:23:27,340 --> 00:23:31,840
means that the Gateway will trust us and

440
00:23:29,530 --> 00:23:33,280
we will be able to get back remote

441
00:23:31,840 --> 00:23:36,850
command execution on the Gateway

442
00:23:33,280 --> 00:23:39,190
anonymously through the network so our

443
00:23:36,850 --> 00:23:43,810
idea to validate that is based on the

444
00:23:39,190 --> 00:23:46,240
little lab set up with basically we have

445
00:23:43,810 --> 00:23:49,300
a four application server splitted into

446
00:23:46,240 --> 00:23:51,460
two si D they don't know each other

447
00:23:49,300 --> 00:23:54,460
I mean applications additional

448
00:23:51,460 --> 00:23:57,130
application server one is known with a

449
00:23:54,460 --> 00:23:59,080
Brad primary application server one they

450
00:23:57,130 --> 00:24:00,240
trusted each other it's like a regular

451
00:23:59,080 --> 00:24:02,850
set of

452
00:24:00,240 --> 00:24:06,360
for the anxiety to that the same so the

453
00:24:02,850 --> 00:24:09,510
idea is to go on a s2 to stop the

454
00:24:06,360 --> 00:24:11,610
application server and then with IP

455
00:24:09,510 --> 00:24:14,490
tables we will set up Network

456
00:24:11,610 --> 00:24:17,790
resurrection for the network flows that

457
00:24:14,490 --> 00:24:22,020
should go from the AES to to the PA es

458
00:24:17,790 --> 00:24:24,030
to the regular Network flow ms message

459
00:24:22,020 --> 00:24:26,400
server internal traffic and we will

460
00:24:24,030 --> 00:24:29,850
redirect it to the primary application

461
00:24:26,400 --> 00:24:32,640
server one so on a totally different si

462
00:24:29,850 --> 00:24:36,090
de and what we see is the server is

463
00:24:32,640 --> 00:24:40,460
going up we start up the AES to there is

464
00:24:36,090 --> 00:24:42,750
a connection and there's a proper

465
00:24:40,460 --> 00:24:45,000
association to the message server of the

466
00:24:42,750 --> 00:24:47,160
primary application server one and then

467
00:24:45,000 --> 00:24:50,280
the primary application server one will

468
00:24:47,160 --> 00:24:53,790
trust us is two and we will get a remote

469
00:24:50,280 --> 00:24:56,730
command execution through the specific

470
00:24:53,790 --> 00:24:59,550
error FC program Dimitri just explained

471
00:24:56,730 --> 00:25:03,420
so through the sub xpg we will be able

472
00:24:59,550 --> 00:25:07,139
to execute code so that was a setup that

473
00:25:03,420 --> 00:25:08,880
is depending on having a si piece error

474
00:25:07,140 --> 00:25:12,809
we don't want to have that during

475
00:25:08,880 --> 00:25:15,420
assessments who wants to do exactly this

476
00:25:12,809 --> 00:25:19,290
logic but in Python so we will try to

477
00:25:15,420 --> 00:25:21,570
simulate an application server starting

478
00:25:19,290 --> 00:25:25,050
up associating to the message server to

479
00:25:21,570 --> 00:25:27,510
the remote victim message server and try

480
00:25:25,050 --> 00:25:30,389
to get to the status that the remote

481
00:25:27,510 --> 00:25:32,690
gateway will trust us and we will see at

482
00:25:30,390 --> 00:25:35,309
internal and we can exploit the server

483
00:25:32,690 --> 00:25:37,080
so what we have is the bicep library

484
00:25:35,309 --> 00:25:39,450
with existing the sectors they already

485
00:25:37,080 --> 00:25:43,980
would do a very good job but that will

486
00:25:39,450 --> 00:25:46,710
be not enough for our quest and and we

487
00:25:43,980 --> 00:25:48,990
have we have of course labs observer so

488
00:25:46,710 --> 00:25:51,300
we have access to server logs we will

489
00:25:48,990 --> 00:25:53,580
enable audits for all the components

490
00:25:51,300 --> 00:25:55,980
like message server gateway dispatcher

491
00:25:53,580 --> 00:25:58,710
walking process to get the most

492
00:25:55,980 --> 00:26:01,980
information we can get and reverse the

493
00:25:58,710 --> 00:26:03,929
protocol so our roadmap is like this we

494
00:26:01,980 --> 00:26:05,820
will record the packet trust between our

495
00:26:03,929 --> 00:26:07,350
additional application server and the

496
00:26:05,820 --> 00:26:09,360
primary when the application

497
00:26:07,350 --> 00:26:11,399
additionally standing up and it will

498
00:26:09,360 --> 00:26:13,590
begins to speak in the message server

499
00:26:11,400 --> 00:26:15,750
language let's say

500
00:26:13,590 --> 00:26:17,549
during that time so that's I mean

501
00:26:15,750 --> 00:26:18,900
recording package for us we fire tcpdump

502
00:26:17,549 --> 00:26:22,440
that's fine

503
00:26:18,900 --> 00:26:24,779
there is no no walk then in the meantime

504
00:26:22,440 --> 00:26:26,880
we will loop attempt to do remote

505
00:26:24,779 --> 00:26:29,070
command execution on the gateway of this

506
00:26:26,880 --> 00:26:32,880
primary application server so we have

507
00:26:29,070 --> 00:26:34,918
our exploit that we will publish so okay

508
00:26:32,880 --> 00:26:37,650
that's fine exploit exists we run it in

509
00:26:34,919 --> 00:26:40,440
a loop we don't have yet results because

510
00:26:37,650 --> 00:26:43,529
we are not trusted and then we will wait

511
00:26:40,440 --> 00:26:45,960
until we are trusted basically and the

512
00:26:43,529 --> 00:26:48,419
association is is finished between the

513
00:26:45,960 --> 00:26:51,539
additional and the primary and then we

514
00:26:48,419 --> 00:26:53,520
locate the barely with time analysis we

515
00:26:51,539 --> 00:26:57,000
will locate the packets that is

516
00:26:53,520 --> 00:27:01,168
interesting that Garros trusted that's a

517
00:26:57,000 --> 00:27:03,720
bit of a little bit of more work for

518
00:27:01,169 --> 00:27:05,309
doing that and then we need to properly

519
00:27:03,720 --> 00:27:07,260
implement without in in cyber

520
00:27:05,309 --> 00:27:08,879
application server in Python the whole

521
00:27:07,260 --> 00:27:11,850
exchange to be able to replay it

522
00:27:08,880 --> 00:27:15,450
properly so that's the hard parts let's

523
00:27:11,850 --> 00:27:17,820
say so if we have a look at the package

524
00:27:15,450 --> 00:27:19,830
for us we have like 100 packets that's

525
00:27:17,820 --> 00:27:23,279
flowed on between our Edition between

526
00:27:19,830 --> 00:27:27,210
our application servers and we see that

527
00:27:23,279 --> 00:27:30,990
the the first part is properly very well

528
00:27:27,210 --> 00:27:36,330
parsed by the original PI sub and then

529
00:27:30,990 --> 00:27:39,510
the second part is a totally garbage so

530
00:27:36,330 --> 00:27:41,520
and then we have the this much magical

531
00:27:39,510 --> 00:27:46,260
packet at the end that gets us remote

532
00:27:41,520 --> 00:27:48,299
command execution so we with the

533
00:27:46,260 --> 00:27:50,789
properly parsed packets we learn a lot

534
00:27:48,299 --> 00:27:52,500
about the how the protocol is walking

535
00:27:50,789 --> 00:27:54,270
with a message server we see like data

536
00:27:52,500 --> 00:27:57,720
structure basic structure when the

537
00:27:54,270 --> 00:27:59,850
packet is properly formatted and we see

538
00:27:57,720 --> 00:28:02,549
that there are ADM administrative

539
00:27:59,850 --> 00:28:05,070
packets that are sent we learn about

540
00:28:02,549 --> 00:28:07,620
there is a key that's not cryptographic

541
00:28:05,070 --> 00:28:09,899
all key but it's like a cookie for HTTP

542
00:28:07,620 --> 00:28:12,299
session tracking between the client and

543
00:28:09,899 --> 00:28:14,969
the servers and we see this kind of

544
00:28:12,299 --> 00:28:17,820
structure with the several layers like

545
00:28:14,970 --> 00:28:19,740
TCP then there is the s AP and I layer

546
00:28:17,820 --> 00:28:22,320
it's just four bytes

547
00:28:19,740 --> 00:28:24,570
storing the length of the what's next

548
00:28:22,320 --> 00:28:25,810
basically but that they call it the NI

549
00:28:24,570 --> 00:28:30,370
layer and then

550
00:28:25,810 --> 00:28:32,740
the basic heater of SAP ms and a list of

551
00:28:30,370 --> 00:28:35,379
records of in this case of a DM records

552
00:28:32,740 --> 00:28:38,770
so that get us the the main structure of

553
00:28:35,380 --> 00:28:42,130
the packets so we see that some packets

554
00:28:38,770 --> 00:28:43,780
are not not fully part so we fix the

555
00:28:42,130 --> 00:28:45,820
little bits the the library to have

556
00:28:43,780 --> 00:28:47,800
something like you see in the end is not

557
00:28:45,820 --> 00:28:50,320
very parsed and then we understand ok

558
00:28:47,800 --> 00:28:52,300
the our client is sending information

559
00:28:50,320 --> 00:28:54,909
about its kernel but especially well in

560
00:28:52,300 --> 00:28:57,550
X Drive we fix the packets so that's a

561
00:28:54,910 --> 00:28:59,740
minor issues let's say and then we see

562
00:28:57,550 --> 00:29:02,470
like ok there are biggest issues that

563
00:28:59,740 --> 00:29:04,930
the second part of our 100 packets so

564
00:29:02,470 --> 00:29:06,430
this big packets that are very strange

565
00:29:04,930 --> 00:29:09,700
we don't understand what we see this

566
00:29:06,430 --> 00:29:12,010
marker marker about the ADI cache in the

567
00:29:09,700 --> 00:29:14,890
end so anderson that ok there is a like

568
00:29:12,010 --> 00:29:17,200
512 padding bytes we don't really know

569
00:29:14,890 --> 00:29:20,050
what it's about and then we see that

570
00:29:17,200 --> 00:29:24,130
there is a kind of end of a regular ATM

571
00:29:20,050 --> 00:29:27,610
packet so our our goal is to get make

572
00:29:24,130 --> 00:29:29,740
sense of those 512 bytes and basically

573
00:29:27,610 --> 00:29:31,629
the reverse process is like this we got

574
00:29:29,740 --> 00:29:34,720
the logs of the application server will

575
00:29:31,630 --> 00:29:37,030
replay those packets and we will take

576
00:29:34,720 --> 00:29:40,540
all those bytes basically and we will

577
00:29:37,030 --> 00:29:42,100
change them incrementally by FF so we

578
00:29:40,540 --> 00:29:44,620
will check in the locks of the server

579
00:29:42,100 --> 00:29:46,840
and sometimes we love errors like I did

580
00:29:44,620 --> 00:29:48,699
not get your dis field

581
00:29:46,840 --> 00:29:51,429
the value is that and that should be not

582
00:29:48,700 --> 00:29:53,020
greater than that or whatever that get

583
00:29:51,430 --> 00:29:55,990
us information about how the server

584
00:29:53,020 --> 00:29:58,540
interprets those packed byes how its

585
00:29:55,990 --> 00:30:00,580
unpacked and what it is used for the

586
00:29:58,540 --> 00:30:02,649
actually when the audit mode is enabled

587
00:30:00,580 --> 00:30:04,840
on the server it's very very useful for

588
00:30:02,650 --> 00:30:09,550
exploit developments they get us a lot

589
00:30:04,840 --> 00:30:12,639
of information so after doing all this

590
00:30:09,550 --> 00:30:16,060
tedious walk we get information that ok

591
00:30:12,640 --> 00:30:19,450
does 512 bytes were actually a kind of

592
00:30:16,060 --> 00:30:22,570
new layer that stores information that's

593
00:30:19,450 --> 00:30:25,360
basically worker process as you see on

594
00:30:22,570 --> 00:30:27,850
the first application server is trying

595
00:30:25,360 --> 00:30:29,530
to speak to the dispatcher on the second

596
00:30:27,850 --> 00:30:31,270
application server and going through the

597
00:30:29,530 --> 00:30:33,129
message server for that so it's using

598
00:30:31,270 --> 00:30:36,790
the message server as a kind of water

599
00:30:33,130 --> 00:30:39,850
and they will ask so that's the

600
00:30:36,790 --> 00:30:41,350
information level of the the

601
00:30:39,850 --> 00:30:44,559
Walker process in the dispatcher that he

602
00:30:41,350 --> 00:30:46,570
stored on the 512 bytes so from this on

603
00:30:44,559 --> 00:30:47,740
the left side we get with the the

604
00:30:46,570 --> 00:30:49,928
reversing process and the new

605
00:30:47,740 --> 00:30:52,210
information we found we get to the right

606
00:30:49,929 --> 00:30:54,039
side where we can we created a new layer

607
00:30:52,210 --> 00:30:56,830
and we can understand and decode

608
00:30:54,039 --> 00:30:59,830
properly most of the bytes there so who

609
00:30:56,830 --> 00:31:02,559
are speaking to who and what they are

610
00:30:59,830 --> 00:31:04,780
trying to execute or asking to execute

611
00:31:02,559 --> 00:31:07,240
some some commands and stuff like that

612
00:31:04,780 --> 00:31:10,690
so that's at commands are still not OS

613
00:31:07,240 --> 00:31:12,460
commands but that's this packet

614
00:31:10,690 --> 00:31:14,470
especially the most important because

615
00:31:12,460 --> 00:31:15,850
that's the one that fires just after

616
00:31:14,470 --> 00:31:17,740
this packet we get remote command

617
00:31:15,850 --> 00:31:22,928
execution we are trusted by the gateway

618
00:31:17,740 --> 00:31:24,789
so basically what we now have is we can

619
00:31:22,929 --> 00:31:28,240
associate to a message server to the

620
00:31:24,789 --> 00:31:30,520
internal port we can wait until we one

621
00:31:28,240 --> 00:31:33,100
of the application server part of the

622
00:31:30,520 --> 00:31:35,980
cluster will send broadcast packets that

623
00:31:33,100 --> 00:31:38,379
sends get me your IP list then we answer

624
00:31:35,980 --> 00:31:41,440
properly because now we we can force

625
00:31:38,380 --> 00:31:44,110
those packets and the remote server will

626
00:31:41,440 --> 00:31:47,740
will add our IP to the trusty list and

627
00:31:44,110 --> 00:31:49,030
then we can profit like it's the 2007 I

628
00:31:47,740 --> 00:31:51,820
mean the first time they were the

629
00:31:49,030 --> 00:31:54,730
problem is the gateway so then we can

630
00:31:51,820 --> 00:31:57,610
execute code anonymously because we are

631
00:31:54,730 --> 00:31:59,580
trusted and for in this case we run Who

632
00:31:57,610 --> 00:32:05,049
am I on the remote server we see we have

633
00:31:59,580 --> 00:32:09,460
OS user s4p ATM and that's basically the

634
00:32:05,049 --> 00:32:12,520
goal what about testing on other servers

635
00:32:09,460 --> 00:32:15,280
there are actually a lot of different

636
00:32:12,520 --> 00:32:17,740
version of SCP kernels and if you change

637
00:32:15,280 --> 00:32:19,570
your targets you will see that that

638
00:32:17,740 --> 00:32:21,820
breaks you need to do it again this

639
00:32:19,570 --> 00:32:24,580
process of parsing all those padding

640
00:32:21,820 --> 00:32:27,129
bytes and getting but basically it's

641
00:32:24,580 --> 00:32:28,449
like one two working days to implement

642
00:32:27,130 --> 00:32:30,760
each version because they have like

643
00:32:28,450 --> 00:32:32,710
slightly differences in the protocol but

644
00:32:30,760 --> 00:32:37,390
it's not like huge differences when

645
00:32:32,710 --> 00:32:40,330
you've got the overall picture right so

646
00:32:37,390 --> 00:32:44,580
now we will show you a little terminal

647
00:32:40,330 --> 00:32:44,580
demo can we switch to the video

648
00:32:45,950 --> 00:32:53,510
okay so in this case requirements is to

649
00:32:50,180 --> 00:32:56,330
have of course the attacker needs to

650
00:32:53,510 --> 00:33:00,350
have access to the message server

651
00:32:56,330 --> 00:33:02,270
internal port and to the gateway so on

652
00:33:00,350 --> 00:33:04,669
the right pane we see we have a

653
00:33:02,270 --> 00:33:07,370
legitimate access to the destination

654
00:33:04,670 --> 00:33:09,740
server we'll show you how we compromise

655
00:33:07,370 --> 00:33:12,350
so we show you the configuration of the

656
00:33:09,740 --> 00:33:14,630
Gateway is Sexual by default so there is

657
00:33:12,350 --> 00:33:18,530
only internal that can execute any

658
00:33:14,630 --> 00:33:20,600
transaction and then we will show you as

659
00:33:18,530 --> 00:33:23,420
well in the Gateway locks the list of

660
00:33:20,600 --> 00:33:25,219
trusted IPs so the idea is here we have

661
00:33:23,420 --> 00:33:28,040
already some IPS because the server is

662
00:33:25,220 --> 00:33:30,340
in cluster with others and then under on

663
00:33:28,040 --> 00:33:34,070
the Left pane we are in the attacker

664
00:33:30,340 --> 00:33:36,350
host and then we will loop attempt to

665
00:33:34,070 --> 00:33:37,790
get a remote command execution with who

666
00:33:36,350 --> 00:33:39,800
am i command so we see that it's

667
00:33:37,790 --> 00:33:43,399
unsuccessful at the moment we don't have

668
00:33:39,800 --> 00:33:45,320
any result for these those atoms so now

669
00:33:43,400 --> 00:33:48,290
we will launch our exploit we will

670
00:33:45,320 --> 00:33:51,490
associate to the message server on the

671
00:33:48,290 --> 00:33:55,129
port 39 something 0 1 in this case and

672
00:33:51,490 --> 00:33:58,610
we will begin to have an association and

673
00:33:55,130 --> 00:34:00,440
we will get very quickly one of the

674
00:33:58,610 --> 00:34:03,080
application server member of the cluster

675
00:34:00,440 --> 00:34:06,380
that we asked us give me your IP list we

676
00:34:03,080 --> 00:34:08,840
answer to that we got the the yellow

677
00:34:06,380 --> 00:34:10,550
packet we answer to that and then we

678
00:34:08,840 --> 00:34:12,679
have the remote communication walking

679
00:34:10,550 --> 00:34:15,679
and we have been added on we can see the

680
00:34:12,679 --> 00:34:17,380
IP list and that's our client IP 218 so

681
00:34:15,679 --> 00:34:19,700
now we are at interntional

682
00:34:17,380 --> 00:34:21,440
in the trusted list and we can get

683
00:34:19,699 --> 00:34:24,219
remote command execution on the only

684
00:34:21,440 --> 00:34:27,850
servers due to the Gateway so that's

685
00:34:24,219 --> 00:34:27,850
that's all for the video

686
00:34:34,889 --> 00:34:44,940
so the remediation part is basically s

687
00:34:40,290 --> 00:34:47,460
AP already has a CP not so patches for

688
00:34:44,940 --> 00:34:49,920
those issues or it's not only patches

689
00:34:47,460 --> 00:34:53,490
but just a guidelines to explain to you

690
00:34:49,920 --> 00:34:56,510
how to design a pro sexual ACL file for

691
00:34:53,489 --> 00:34:59,640
the message server what are the good

692
00:34:56,510 --> 00:35:01,800
what needs to be done to split internal

693
00:34:59,640 --> 00:35:03,900
and public port for the message server

694
00:35:01,800 --> 00:35:06,060
if you have a very old application

695
00:35:03,900 --> 00:35:07,890
server but basically on new application

696
00:35:06,060 --> 00:35:10,400
server that's already done they have a

697
00:35:07,890 --> 00:35:13,350
split on internal in public and

698
00:35:10,400 --> 00:35:16,800
additional measure is to under network

699
00:35:13,350 --> 00:35:19,830
level to get firewalls from out of the

700
00:35:16,800 --> 00:35:25,500
clients those access to the 39 that

701
00:35:19,830 --> 00:35:28,500
should be a mandatory so we have a bonus

702
00:35:25,500 --> 00:35:30,930
attack because by doing this research on

703
00:35:28,500 --> 00:35:33,150
the message server basically and getting

704
00:35:30,930 --> 00:35:36,629
an understanding about the message

705
00:35:33,150 --> 00:35:39,150
server protocol we saw that we can

706
00:35:36,630 --> 00:35:42,690
modify basically load balancing

707
00:35:39,150 --> 00:35:45,450
information in terms of local groups so

708
00:35:42,690 --> 00:35:47,040
in Sapa when you use load balancing the

709
00:35:45,450 --> 00:35:49,319
client is connecting to the message

710
00:35:47,040 --> 00:35:52,950
server asking to connect to a specific

711
00:35:49,320 --> 00:35:54,750
local group like HR fi whatever and then

712
00:35:52,950 --> 00:35:56,129
the server will the message server

713
00:35:54,750 --> 00:35:58,140
already reacted to the proper

714
00:35:56,130 --> 00:36:00,180
application server related to this Logan

715
00:35:58,140 --> 00:36:02,339
group what we can do is we can change

716
00:36:00,180 --> 00:36:04,500
the logon group application server

717
00:36:02,340 --> 00:36:07,590
destination so of course I mean of

718
00:36:04,500 --> 00:36:10,350
course what we want to do is a do mine

719
00:36:07,590 --> 00:36:12,540
limiter we will put our IP in this Logan

720
00:36:10,350 --> 00:36:14,819
group destination for the application

721
00:36:12,540 --> 00:36:16,890
server and so that's the class when the

722
00:36:14,820 --> 00:36:19,350
client will legitimately connect to the

723
00:36:16,890 --> 00:36:21,779
message server want to get their sub G

724
00:36:19,350 --> 00:36:25,370
access they will connect basically to

725
00:36:21,780 --> 00:36:27,870
our IP M so we will redirect

726
00:36:25,370 --> 00:36:30,180
transparently the clients to the

727
00:36:27,870 --> 00:36:33,839
legitimate server and in the meantime we

728
00:36:30,180 --> 00:36:36,839
will grab user logon information that is

729
00:36:33,840 --> 00:36:39,720
walking of course only if the SNC the

730
00:36:36,840 --> 00:36:42,290
secure communication is disabled on the

731
00:36:39,720 --> 00:36:45,990
server and as we can see during

732
00:36:42,290 --> 00:36:48,599
assessments that very often the case

733
00:36:45,990 --> 00:36:50,490
if we if you want to compare that kind

734
00:36:48,599 --> 00:36:52,799
of man in the middle with a level to

735
00:36:50,490 --> 00:36:55,470
mine the middle here we are only

736
00:36:52,799 --> 00:36:58,020
restricted by the IP connectivity to the

737
00:36:55,470 --> 00:37:00,089
clients and to the server's and you can

738
00:36:58,020 --> 00:37:01,619
find scenarios when from the internet

739
00:37:00,089 --> 00:37:04,349
you could implement this attack

740
00:37:01,619 --> 00:37:06,470
successfully so that's the scope is a

741
00:37:04,349 --> 00:37:09,440
little bit more than only a level 2

742
00:37:06,470 --> 00:37:13,140
local network management attack that

743
00:37:09,440 --> 00:37:15,900
that our famous

744
00:37:13,140 --> 00:37:18,118
so just information about the packets

745
00:37:15,900 --> 00:37:20,940
that allows you to overwrite the local

746
00:37:18,119 --> 00:37:23,279
group information so we see that there

747
00:37:20,940 --> 00:37:26,220
is information about for a local group

748
00:37:23,279 --> 00:37:29,160
here is space at the end of the packets

749
00:37:26,220 --> 00:37:32,459
and then it's the destination

750
00:37:29,160 --> 00:37:34,109
application server and the ports is

751
00:37:32,460 --> 00:37:38,910
defined after that so we can just

752
00:37:34,109 --> 00:37:41,160
overwrite this and and we become we

753
00:37:38,910 --> 00:37:43,649
become a new applicant

754
00:37:41,160 --> 00:37:48,859
fake application server so we have a

755
00:37:43,650 --> 00:37:52,650
little demo for that as well ok so

756
00:37:48,859 --> 00:37:56,000
screen and so here again we need to have

757
00:37:52,650 --> 00:37:59,309
connectivity to the clients and to the

758
00:37:56,000 --> 00:38:02,029
destination application server and the

759
00:37:59,309 --> 00:38:05,910
message several ports of course so

760
00:38:02,029 --> 00:38:09,809
basically we are on the on the Left the

761
00:38:05,910 --> 00:38:13,230
attacker side so we will just monitor in

762
00:38:09,809 --> 00:38:16,470
read-only the states of the applications

763
00:38:13,230 --> 00:38:18,390
message server storage that hosts the

764
00:38:16,470 --> 00:38:20,759
logon group definition and the

765
00:38:18,390 --> 00:38:23,879
destination application servers so here

766
00:38:20,760 --> 00:38:25,650
we have HR sales and the default logon

767
00:38:23,880 --> 00:38:27,990
group that points to some application

768
00:38:25,650 --> 00:38:29,910
servers and then we will launch our

769
00:38:27,990 --> 00:38:33,720
exploit we say that we want to I Jack

770
00:38:29,910 --> 00:38:36,779
the HR Logan group then we will have IP

771
00:38:33,720 --> 00:38:38,848
tables rule set up to resurrect the

772
00:38:36,779 --> 00:38:40,740
clients traffic to the alleged email

773
00:38:38,849 --> 00:38:45,089
application server so that they can't

774
00:38:40,740 --> 00:38:47,368
get a lock on access and we will we will

775
00:38:45,089 --> 00:38:50,089
parse the packets they will they will

776
00:38:47,369 --> 00:38:52,859
send us so at the right here we are in a

777
00:38:50,089 --> 00:38:55,558
legitimate client Windows client that is

778
00:38:52,859 --> 00:38:58,860
firing up sub GUI and that will try to

779
00:38:55,559 --> 00:39:02,550
connect to do some HR maintenance

780
00:38:58,860 --> 00:39:06,630
action today Connect use the user

781
00:39:02,550 --> 00:39:09,390
passwords and we got so there have been

782
00:39:06,630 --> 00:39:11,580
redirected to us we got the clients

783
00:39:09,390 --> 00:39:12,210
number the user and the password in

784
00:39:11,580 --> 00:39:14,910
clear-text

785
00:39:12,210 --> 00:39:16,710
and they got their successful log on

786
00:39:14,910 --> 00:39:20,069
because we redirected them to the proper

787
00:39:16,710 --> 00:39:22,580
application server so that's just yeah

788
00:39:20,070 --> 00:39:26,580
that's all for this video

789
00:39:22,580 --> 00:39:29,610
okay so again remediation for that so

790
00:39:26,580 --> 00:39:34,470
the the three first remediation are the

791
00:39:29,610 --> 00:39:37,550
same as the be trusted attack the lasts

792
00:39:34,470 --> 00:39:41,040
the additional remediation we can add is

793
00:39:37,550 --> 00:39:44,370
try to enforce SNC to sexual

794
00:39:41,040 --> 00:39:46,290
communication between clients and

795
00:39:44,370 --> 00:39:49,140
application servers so that will render

796
00:39:46,290 --> 00:39:53,700
this attack unsuccessful we won't be

797
00:39:49,140 --> 00:39:57,629
able to defeat anything about the

798
00:39:53,700 --> 00:39:59,520
detection if you have if you have a lot

799
00:39:57,630 --> 00:40:02,010
of logs or a pass blocks and you want to

800
00:39:59,520 --> 00:40:05,190
know if you have been compromised with

801
00:40:02,010 --> 00:40:07,380
that kind of techniques you may look at

802
00:40:05,190 --> 00:40:09,960
the if you have that kind of audits

803
00:40:07,380 --> 00:40:14,160
level for the message server so ms /

804
00:40:09,960 --> 00:40:18,000
audits - one or two and you look at the

805
00:40:14,160 --> 00:40:22,770
file dev underscore ms you you can see

806
00:40:18,000 --> 00:40:25,800
atoms of Association of non non trusted

807
00:40:22,770 --> 00:40:28,530
and unusual application servers for

808
00:40:25,800 --> 00:40:30,990
instance you can ask network level if

809
00:40:28,530 --> 00:40:34,200
you have a network flows network logs

810
00:40:30,990 --> 00:40:37,919
you can check for instance access to the

811
00:40:34,200 --> 00:40:40,290
39 from unusual clients so if you remove

812
00:40:37,920 --> 00:40:42,390
the two servers the legitimate servers

813
00:40:40,290 --> 00:40:44,850
you will see who's trying to connect to

814
00:40:42,390 --> 00:40:50,339
this port for instance from the villain

815
00:40:44,850 --> 00:40:52,830
client then you you could access the web

816
00:40:50,340 --> 00:40:54,750
interface read-only web interface for

817
00:40:52,830 --> 00:40:57,180
the message server that's the third

818
00:40:54,750 --> 00:40:59,310
points and you will have information

819
00:40:57,180 --> 00:41:01,770
about the logon groups and the servers

820
00:40:59,310 --> 00:41:03,690
so in this case when we do our attacks

821
00:41:01,770 --> 00:41:05,750
you will see that it's changing here -

822
00:41:03,690 --> 00:41:09,360
you could monitor to this way as well

823
00:41:05,750 --> 00:41:11,740
and finally the for the s AP

824
00:41:09,360 --> 00:41:13,810
administrator if you entered

825
00:41:11,740 --> 00:41:15,819
section that he called SMS you will have

826
00:41:13,810 --> 00:41:17,830
information administrative information

827
00:41:15,820 --> 00:41:20,050
about the massage server state and the

828
00:41:17,830 --> 00:41:25,360
Logan group and the Xterra so that's the

829
00:41:20,050 --> 00:41:29,980
subdued way to monitor it as well so we

830
00:41:25,360 --> 00:41:31,930
deliver we publish code it's still

831
00:41:29,980 --> 00:41:35,500
private but we'll put that in in tribute

832
00:41:31,930 --> 00:41:39,009
in a few hours that's every everything

833
00:41:35,500 --> 00:41:41,470
that we show to you is on github will be

834
00:41:39,010 --> 00:41:44,770
available to those links for for

835
00:41:41,470 --> 00:41:48,459
pentester I guess that may be helpful

836
00:41:44,770 --> 00:41:50,470
a little warning maybe you should be

837
00:41:48,460 --> 00:41:52,440
careful not running that on production

838
00:41:50,470 --> 00:41:55,839
systems that there may be some issues

839
00:41:52,440 --> 00:42:01,570
the code is quite let's say that's proof

840
00:41:55,840 --> 00:42:03,130
of concept so and that's basically

841
00:42:01,570 --> 00:42:05,940
that's all so if you have any question

842
00:42:03,130 --> 00:42:05,940
we'd be happy to answer

