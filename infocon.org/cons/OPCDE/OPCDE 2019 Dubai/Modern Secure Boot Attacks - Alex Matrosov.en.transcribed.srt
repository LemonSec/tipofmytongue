1
00:00:00,510 --> 00:00:05,758
good evening everyone my name Alex

2
00:00:03,480 --> 00:00:07,740
matrosov so we'll be talking about

3
00:00:05,759 --> 00:00:09,780
modern secure boot attacks bypassing

4
00:00:07,740 --> 00:00:12,480
Hardware root of trust from software and

5
00:00:09,780 --> 00:00:15,799
I think actually firmware security

6
00:00:12,480 --> 00:00:19,140
topics it's very important and this year

7
00:00:15,800 --> 00:00:21,839
team of the conference it's matrix and

8
00:00:19,140 --> 00:00:23,789
imagine so the firmware it's a matrix

9
00:00:21,839 --> 00:00:25,859
and everything which is acute at Apple

10
00:00:23,789 --> 00:00:28,050
on the stack like operating systems it's

11
00:00:25,859 --> 00:00:30,749
inside the matrix and if you have

12
00:00:28,050 --> 00:00:33,809
infection inside the firmware everything

13
00:00:30,749 --> 00:00:38,370
can be faked so it's why these topics

14
00:00:33,809 --> 00:00:41,430
it's were important and let's dig in so

15
00:00:38,370 --> 00:00:45,059
I'm leading offensive security research

16
00:00:41,430 --> 00:00:49,429
at Nvidia and I do the firmer stuff

17
00:00:45,059 --> 00:00:53,519
already around like a seven years and I

18
00:00:49,429 --> 00:00:57,329
have done a lot of research bypassing

19
00:00:53,519 --> 00:00:59,850
before like a secure boot and talking

20
00:00:57,329 --> 00:01:01,559
about concepts how basically the

21
00:00:59,850 --> 00:01:04,260
firmware rootkits

22
00:01:01,559 --> 00:01:07,610
and implants can be implemented and how

23
00:01:04,260 --> 00:01:10,079
it can be detected by forensic routines

24
00:01:07,610 --> 00:01:13,140
so with my colleagues

25
00:01:10,079 --> 00:01:15,839
Eugene rodionov and Sergey Brutus we

26
00:01:13,140 --> 00:01:18,840
write this book which is actually have

27
00:01:15,840 --> 00:01:22,439
some cool stuff about the rootkits boot

28
00:01:18,840 --> 00:01:24,930
kids and thermal threads and especially

29
00:01:22,439 --> 00:01:27,000
it's interesting because we create some

30
00:01:24,930 --> 00:01:31,950
concepts about how the forensics can

31
00:01:27,000 --> 00:01:33,930
work for that but in the same time I

32
00:01:31,950 --> 00:01:36,450
want to highlight the point

33
00:01:33,930 --> 00:01:39,210
I don't speak my employee and all

34
00:01:36,450 --> 00:01:41,850
opinions information and bad jokes zero

35
00:01:39,210 --> 00:01:46,949
days it's on me not on Nvidia don't

36
00:01:41,850 --> 00:01:50,610
blame Nvidia for that for my research I

37
00:01:46,950 --> 00:01:53,759
used my Lenovo laptop lenovo thinkpad

38
00:01:50,610 --> 00:01:56,369
p50 which is pretty new and I like it

39
00:01:53,759 --> 00:01:58,920
but also I have some security concerns

40
00:01:56,369 --> 00:02:02,310
on it in my previous research I mostly

41
00:01:58,920 --> 00:02:04,469
focus it on gigabyte Asus MSI but you

42
00:02:02,310 --> 00:02:06,869
know what they just don't care about the

43
00:02:04,469 --> 00:02:10,679
security in general they even don't have

44
00:02:06,869 --> 00:02:13,920
security teams and so basically they

45
00:02:10,679 --> 00:02:15,690
just broken they don't have a proper

46
00:02:13,920 --> 00:02:18,750
your boots e-tabs they don't have proper

47
00:02:15,690 --> 00:02:20,459
updates for the firmware and also

48
00:02:18,750 --> 00:02:23,819
integrity protection for the firmware

49
00:02:20,459 --> 00:02:26,490
update so it's not interesting for me to

50
00:02:23,819 --> 00:02:28,410
focus on that because you always can

51
00:02:26,490 --> 00:02:30,660
fight something to break everything and

52
00:02:28,410 --> 00:02:34,380
lean over actually have a pretty good

53
00:02:30,660 --> 00:02:36,480
solid security but some points I will be

54
00:02:34,380 --> 00:02:39,209
highlight today about their problems

55
00:02:36,480 --> 00:02:43,019
especially on the secure boot and boot

56
00:02:39,209 --> 00:02:46,320
guard implementations so we will be

57
00:02:43,020 --> 00:02:50,160
focusing what is actually Hardware root

58
00:02:46,320 --> 00:02:53,190
of trust and after that will be

59
00:02:50,160 --> 00:02:55,859
discussed boot guard bypass and boot

60
00:02:53,190 --> 00:03:01,560
guards technology for armor and secure

61
00:02:55,860 --> 00:03:04,410
boot on x86 Intel CPUs and after that

62
00:03:01,560 --> 00:03:06,239
will be focused on compute race and

63
00:03:04,410 --> 00:03:09,359
compute race it's kind of like

64
00:03:06,239 --> 00:03:12,570
anti-theft technology introduce it while

65
00:03:09,360 --> 00:03:16,880
ago and used in many many laptop vendors

66
00:03:12,570 --> 00:03:19,739
and not actually only laptop vendors and

67
00:03:16,880 --> 00:03:22,200
let's say it's kind of legit rootkit

68
00:03:19,739 --> 00:03:24,000
inside your system and this activated it

69
00:03:22,200 --> 00:03:26,280
provides a lot of opportunities and also

70
00:03:24,000 --> 00:03:28,530
have some vulnerabilities which is have

71
00:03:26,280 --> 00:03:32,690
a possibility for the attacker will be

72
00:03:28,530 --> 00:03:35,730
highlight some points on it so other

73
00:03:32,690 --> 00:03:37,650
topics which I want to discuss it is my

74
00:03:35,730 --> 00:03:40,260
handlers over windows management

75
00:03:37,650 --> 00:03:42,180
interface SMI handlers is kind of like a

76
00:03:40,260 --> 00:03:44,519
cow black functions from the operating

77
00:03:42,180 --> 00:03:47,760
system level to the firmware and we will

78
00:03:44,519 --> 00:03:49,799
be point some interesting stuff about

79
00:03:47,760 --> 00:03:51,899
the owner abilities and possible attack

80
00:03:49,799 --> 00:03:55,920
surface there and well it controller

81
00:03:51,900 --> 00:03:58,260
it's also interesting place to look and

82
00:03:55,920 --> 00:04:04,470
we will be discussed the topic why is

83
00:03:58,260 --> 00:04:08,600
not a security boundary okay so what is

84
00:04:04,470 --> 00:04:11,220
the hardware root of trust so basically

85
00:04:08,600 --> 00:04:14,579
one of the main components for

86
00:04:11,220 --> 00:04:16,560
protecting your platform it's break it

87
00:04:14,579 --> 00:04:18,329
inside the card where and usually

88
00:04:16,560 --> 00:04:22,860
hardware root of trust it's kind of like

89
00:04:18,329 --> 00:04:25,560
a hash inside your CPU or inside some

90
00:04:22,860 --> 00:04:27,630
specific views let's say it's kind of

91
00:04:25,560 --> 00:04:30,420
like a small piece of memory to

92
00:04:27,630 --> 00:04:32,909
or the cash value and it's locked it's

93
00:04:30,420 --> 00:04:35,820
mean like it can be just a burn on the

94
00:04:32,910 --> 00:04:39,030
factory once and then you can basically

95
00:04:35,820 --> 00:04:41,430
change this value but in the same time

96
00:04:39,030 --> 00:04:44,219
it's locked the value which is used for

97
00:04:41,430 --> 00:04:48,330
integrity all the way for secure boot on

98
00:04:44,220 --> 00:04:50,190
upper levels and actually supporting

99
00:04:48,330 --> 00:04:53,219
Hardware root of trust for the

100
00:04:50,190 --> 00:04:55,200
platform's it's kind of hard mined

101
00:04:53,220 --> 00:05:00,480
problem with a hardware root of trust

102
00:04:55,200 --> 00:05:04,170
it's because basically four main

103
00:05:00,480 --> 00:05:07,740
hardware vendors you need to support it

104
00:05:04,170 --> 00:05:10,670
you need to basically if you have some

105
00:05:07,740 --> 00:05:13,140
damage on your laptop I mean like some

106
00:05:10,670 --> 00:05:16,200
cheap not working properly you need

107
00:05:13,140 --> 00:05:18,120
debugging somehow and all these things

108
00:05:16,200 --> 00:05:20,400
it's hard to implement

109
00:05:18,120 --> 00:05:23,220
if you log everything so you need to

110
00:05:20,400 --> 00:05:26,489
provide some support interfaces debug

111
00:05:23,220 --> 00:05:30,390
interfaces and basically ways to recover

112
00:05:26,490 --> 00:05:35,940
the platform and it's it's really hard

113
00:05:30,390 --> 00:05:40,289
to make secure and in full win slides I

114
00:05:35,940 --> 00:05:45,120
will discussed why and in the most is in

115
00:05:40,290 --> 00:05:48,180
the most cases it's also like root of

116
00:05:45,120 --> 00:05:51,720
trust it can be just one bit value which

117
00:05:48,180 --> 00:05:54,720
is locked something inside the hardware

118
00:05:51,720 --> 00:05:57,330
and pointing it's secure or not or it's

119
00:05:54,720 --> 00:06:00,210
correct or not true or false so yeah

120
00:05:57,330 --> 00:06:04,950
it's also like really hard to really

121
00:06:00,210 --> 00:06:07,620
easy in some cases to bypass and secure

122
00:06:04,950 --> 00:06:09,900
transition imagine you have a secure

123
00:06:07,620 --> 00:06:12,240
boot which is start from the hardware

124
00:06:09,900 --> 00:06:14,880
and make a transition in the firmware on

125
00:06:12,240 --> 00:06:17,040
different boot stages and this secure

126
00:06:14,880 --> 00:06:21,540
transition it's hard to implement secure

127
00:06:17,040 --> 00:06:24,060
because imagine first you have a root of

128
00:06:21,540 --> 00:06:26,100
trust inside the hardware then you check

129
00:06:24,060 --> 00:06:28,940
on the next level which is original and

130
00:06:26,100 --> 00:06:32,880
and hardware so it's pure software and

131
00:06:28,940 --> 00:06:35,130
it's a way for basically how the

132
00:06:32,880 --> 00:06:37,530
attacker can break it because if it's

133
00:06:35,130 --> 00:06:41,589
just in software it has some limitations

134
00:06:37,530 --> 00:06:43,599
and then we also discuss

135
00:06:41,589 --> 00:06:45,369
I want to start actually with some

136
00:06:43,599 --> 00:06:47,498
classification of you five ulnar

137
00:06:45,369 --> 00:06:49,899
abilities here is a link on full blog

138
00:06:47,499 --> 00:06:52,509
post which I write at recently and with

139
00:06:49,899 --> 00:06:55,229
more information about that but I would

140
00:06:52,509 --> 00:06:57,279
I want to split on the two big groups

141
00:06:55,229 --> 00:06:59,889
vulnerabilities for you five firmware

142
00:06:57,279 --> 00:07:02,830
first one it's a result of exploitation

143
00:06:59,889 --> 00:07:06,009
and second one it's compromised at

144
00:07:02,830 --> 00:07:08,558
supply chain and supply chain specially

145
00:07:06,009 --> 00:07:11,110
for modern hardware it's really hard

146
00:07:08,559 --> 00:07:14,259
because think about you have the laptop

147
00:07:11,110 --> 00:07:16,990
but it's not all the chips developed by

148
00:07:14,259 --> 00:07:19,300
one vendor it's multiple chips as

149
00:07:16,990 --> 00:07:22,959
example you have a Wi-Fi you have a one

150
00:07:19,300 --> 00:07:25,449
in Ethernet interface you have multiple

151
00:07:22,959 --> 00:07:27,309
things and in most cases it's a

152
00:07:25,449 --> 00:07:29,499
different vendors develop these chips

153
00:07:27,309 --> 00:07:32,229
that's mean it's also different firmware

154
00:07:29,499 --> 00:07:34,209
and in many cases the vendor could

155
00:07:32,229 --> 00:07:37,300
produce the laptops it doesn't have

156
00:07:34,209 --> 00:07:39,369
access to this source code so basically

157
00:07:37,300 --> 00:07:43,360
they get a binary blobs from other

158
00:07:39,369 --> 00:07:46,740
vendors and they not really control this

159
00:07:43,360 --> 00:07:51,009
source code that means they just trust

160
00:07:46,740 --> 00:07:53,409
to in some integrity checks or signing

161
00:07:51,009 --> 00:07:59,889
of this binary blobs to integrate and

162
00:07:53,409 --> 00:08:02,169
they're open hardware platforms and also

163
00:07:59,889 --> 00:08:04,899
in many cases

164
00:08:02,169 --> 00:08:06,789
vendors can forgot to log the

165
00:08:04,899 --> 00:08:10,419
configuration some of the security

166
00:08:06,789 --> 00:08:12,490
features and it's why basically we can

167
00:08:10,419 --> 00:08:15,969
have a big configuration one of the

168
00:08:12,490 --> 00:08:18,550
group on the right side and also bias

169
00:08:15,969 --> 00:08:22,539
update issues when as example some of

170
00:08:18,550 --> 00:08:24,999
the things can be outdated on after you

171
00:08:22,539 --> 00:08:29,139
buy the laptop it's it will be not a

172
00:08:24,999 --> 00:08:31,330
recent bias version and on your laptops

173
00:08:29,139 --> 00:08:34,479
that mean it can be vulnerable for known

174
00:08:31,330 --> 00:08:37,299
issues and in many cases actually how

175
00:08:34,479 --> 00:08:38,189
frequently you update your bias on your

176
00:08:37,299 --> 00:08:41,740
laptops

177
00:08:38,188 --> 00:08:45,099
many people just never you know exhibit

178
00:08:41,740 --> 00:08:48,339
laptop use it but why I should it's

179
00:08:45,100 --> 00:08:51,250
works right so but will be actually

180
00:08:48,339 --> 00:08:54,820
highlight some some good stuff why you

181
00:08:51,250 --> 00:08:56,860
should update your bias and

182
00:08:54,820 --> 00:09:00,850
second group actually it's a result of

183
00:08:56,860 --> 00:09:03,550
exploitation and why actually secure

184
00:09:00,850 --> 00:09:10,600
boot bypass is important for that hacker

185
00:09:03,550 --> 00:09:13,930
because think about if if you can bypass

186
00:09:10,600 --> 00:09:16,360
a secure boot your malicious code can be

187
00:09:13,930 --> 00:09:19,089
executed on early stages and then

188
00:09:16,360 --> 00:09:22,270
basically compromise everything upper in

189
00:09:19,090 --> 00:09:24,580
modern days it's actually not easy to

190
00:09:22,270 --> 00:09:26,500
break secure boot if you have a proper

191
00:09:24,580 --> 00:09:28,480
configured firm with all the new

192
00:09:26,500 --> 00:09:32,020
security features from Intel and other

193
00:09:28,480 --> 00:09:34,720
vendors but the firm were actually at

194
00:09:32,020 --> 00:09:36,960
the place where the secure boot is set

195
00:09:34,720 --> 00:09:40,690
ups and if you get inside the system

196
00:09:36,960 --> 00:09:42,910
management mode SMM or have a privileged

197
00:09:40,690 --> 00:09:43,630
escalation to execute your code inside

198
00:09:42,910 --> 00:09:45,670
this mode

199
00:09:43,630 --> 00:09:47,680
it's create actually a lot of

200
00:09:45,670 --> 00:09:50,349
possibilities for the attacker and in

201
00:09:47,680 --> 00:09:55,810
some cases it can open the door for

202
00:09:50,350 --> 00:09:58,210
bypass secure boot but my main topic for

203
00:09:55,810 --> 00:10:00,969
today to buy bypass the root of trust

204
00:09:58,210 --> 00:10:02,740
break it and hardware that's mean SMM

205
00:10:00,970 --> 00:10:07,030
issues will be not help here

206
00:10:02,740 --> 00:10:10,840
so and let's go actually a bit deeper

207
00:10:07,030 --> 00:10:13,780
and talk about how this hard Hardware

208
00:10:10,840 --> 00:10:17,470
implementation for armoring secure boot

209
00:10:13,780 --> 00:10:20,920
works so we have a CPU reset what does

210
00:10:17,470 --> 00:10:23,950
it mean it's just basically when CPU

211
00:10:20,920 --> 00:10:26,949
almost just the first executed commands

212
00:10:23,950 --> 00:10:29,290
when CPU just started it started loading

213
00:10:26,950 --> 00:10:34,000
the CPU micro code which is start on spy

214
00:10:29,290 --> 00:10:37,360
flash and after that it's execute binary

215
00:10:34,000 --> 00:10:40,270
blob name it as boot guard ACM it's

216
00:10:37,360 --> 00:10:42,610
produced it and signed by Intel and ACM

217
00:10:40,270 --> 00:10:44,890
it's authenticated code model basically

218
00:10:42,610 --> 00:10:50,140
it's binary blob with some header and

219
00:10:44,890 --> 00:10:54,490
sign inside in the header and this ACM

220
00:10:50,140 --> 00:10:59,170
it's basically check the integrity for

221
00:10:54,490 --> 00:11:02,860
all the other levels were what should be

222
00:10:59,170 --> 00:11:06,520
executed after that so after the reset

223
00:11:02,860 --> 00:11:07,260
vector it's execute IBB it's initial

224
00:11:06,520 --> 00:11:09,750
boot block

225
00:11:07,260 --> 00:11:12,900
kind of like also small piece of code

226
00:11:09,750 --> 00:11:15,180
with the hashes which is check secure

227
00:11:12,900 --> 00:11:21,360
boot it's like integrity for other

228
00:11:15,180 --> 00:11:23,939
stages Dixie BDS and the secure boot

229
00:11:21,360 --> 00:11:27,150
stage it's actually mostly focus it on

230
00:11:23,940 --> 00:11:29,250
OS loaders okay looks perfect right

231
00:11:27,150 --> 00:11:33,630
everything is secure everything is

232
00:11:29,250 --> 00:11:36,240
checked but think about if we have

233
00:11:33,630 --> 00:11:38,870
something broken inside the hardware and

234
00:11:36,240 --> 00:11:43,860
in many cases actually for secure boot

235
00:11:38,870 --> 00:11:47,940
TPM can be root of trust and some

236
00:11:43,860 --> 00:11:49,860
researchers already present before a lot

237
00:11:47,940 --> 00:11:55,350
of stuff which is basically shows the

238
00:11:49,860 --> 00:11:58,530
problems with CPM and if attacker can

239
00:11:55,350 --> 00:12:00,930
basically go inside or break or execute

240
00:11:58,530 --> 00:12:04,620
code inside the TPM firmware nobody

241
00:12:00,930 --> 00:12:06,810
expect attack from this level and with

242
00:12:04,620 --> 00:12:10,800
the physical access you can do it right

243
00:12:06,810 --> 00:12:12,780
so you can just fake the TPM and try to

244
00:12:10,800 --> 00:12:15,689
attack some of the code executed on the

245
00:12:12,780 --> 00:12:18,270
firmware level and Jeremy boon from NCC

246
00:12:15,690 --> 00:12:21,180
group actually shows a lot of issues for

247
00:12:18,270 --> 00:12:24,360
with this kind of attacks and here is a

248
00:12:21,180 --> 00:12:26,880
github of his research and I highly

249
00:12:24,360 --> 00:12:32,670
recommend read this article it's very

250
00:12:26,880 --> 00:12:40,380
interesting so and in the perfect world

251
00:12:32,670 --> 00:12:43,790
also we actually we have Micro code all

252
00:12:40,380 --> 00:12:46,290
ACMs identification code models

253
00:12:43,790 --> 00:12:49,349
authenticated but some by something I

254
00:12:46,290 --> 00:12:51,780
mean like it should have some code or

255
00:12:49,350 --> 00:12:55,050
security checks will be check the

256
00:12:51,780 --> 00:12:59,310
integrity for that but we're not in the

257
00:12:55,050 --> 00:13:01,290
perfect world and this quote is actually

258
00:12:59,310 --> 00:13:02,310
never checked for the integrity of

259
00:13:01,290 --> 00:13:04,050
course it sign it

260
00:13:02,310 --> 00:13:07,319
I mean it's after it's loading it's

261
00:13:04,050 --> 00:13:10,439
checked by CPU but Fink is you can

262
00:13:07,320 --> 00:13:11,760
basically downgrade the micro code which

263
00:13:10,440 --> 00:13:14,690
is interesting especially for

264
00:13:11,760 --> 00:13:18,780
speculative execution and all the stuff

265
00:13:14,690 --> 00:13:21,890
you can just don't grade and all these

266
00:13:18,780 --> 00:13:24,540
speculative barriers will be gone

267
00:13:21,890 --> 00:13:27,230
which is kind of interesting and I would

268
00:13:24,540 --> 00:13:29,910
say microcode in many cases can be like

269
00:13:27,230 --> 00:13:31,590
also named it as a hardware root of

270
00:13:29,910 --> 00:13:33,469
trust because it's a dequeue that inside

271
00:13:31,590 --> 00:13:35,970
the CPU which is basically very

272
00:13:33,470 --> 00:13:39,930
different with any other firmware but

273
00:13:35,970 --> 00:13:43,770
it's also like a firmware so let's back

274
00:13:39,930 --> 00:13:46,469
to the boot guard so how the boot flow

275
00:13:43,770 --> 00:13:49,140
in the real world looks like so we have

276
00:13:46,470 --> 00:13:53,550
a look at an Hardware CPU microcode

277
00:13:49,140 --> 00:13:57,689
would guard ACM and after that we have

278
00:13:53,550 --> 00:13:59,550
actually everything else but if ACM can

279
00:13:57,690 --> 00:14:01,500
be downgraded and micro-cut can be

280
00:13:59,550 --> 00:14:04,349
downgraded that's mean we can use the

281
00:14:01,500 --> 00:14:06,990
node a or notice one day issues to

282
00:14:04,350 --> 00:14:10,050
basically bypass all other levels in my

283
00:14:06,990 --> 00:14:13,080
previous research in blackhat 2017 I've

284
00:14:10,050 --> 00:14:15,930
been presenting some stuff when I build

285
00:14:13,080 --> 00:14:17,970
if multiple boot guard ACMs from the

286
00:14:15,930 --> 00:14:21,479
different platforms and highlight the

287
00:14:17,970 --> 00:14:27,120
issues they're just like which it's easy

288
00:14:21,480 --> 00:14:29,430
to find but not easy to exploit so why

289
00:14:27,120 --> 00:14:32,280
don't walk everything inside the

290
00:14:29,430 --> 00:14:34,829
hardware so hardware is not flexible and

291
00:14:32,280 --> 00:14:37,170
it's very expensive to support AIIMS

292
00:14:34,830 --> 00:14:40,200
don't like locking secrets inside the

293
00:14:37,170 --> 00:14:45,199
hardware because it basically increases

294
00:14:40,200 --> 00:14:48,180
the price for support and in many cases

295
00:14:45,200 --> 00:14:50,750
the cards in laptops is have like a

296
00:14:48,180 --> 00:14:54,359
five-year support from the vendor and

297
00:14:50,750 --> 00:14:56,940
Apple actually have even more all the

298
00:14:54,360 --> 00:15:01,500
vendors try to reduce the hardware lock

299
00:14:56,940 --> 00:15:05,730
it secrets because it's also this

300
00:15:01,500 --> 00:15:09,320
flexibility in firmware it's create a

301
00:15:05,730 --> 00:15:11,970
lot of things when you can't extend and

302
00:15:09,320 --> 00:15:14,550
more open for flexibility with the

303
00:15:11,970 --> 00:15:16,440
third-party components or like chipset

304
00:15:14,550 --> 00:15:19,349
the firmwares communications or

305
00:15:16,440 --> 00:15:21,510
everything else and when basically the

306
00:15:19,350 --> 00:15:23,790
main we under doesn't control that but

307
00:15:21,510 --> 00:15:25,710
the interfaces can be changed and if it

308
00:15:23,790 --> 00:15:28,740
will be locked inside the card we're how

309
00:15:25,710 --> 00:15:34,380
basically you can fix it

310
00:15:28,740 --> 00:15:36,180
so it's hard and I highly recommend

311
00:15:34,380 --> 00:15:38,400
to look on this talk from positive

312
00:15:36,180 --> 00:15:41,189
technologies which has been presented

313
00:15:38,400 --> 00:15:44,220
presented recently on the black hat Asia

314
00:15:41,190 --> 00:15:46,920
a few weeks ago and it's actually I'd

315
00:15:44,220 --> 00:15:49,440
just make a copy of their slide about

316
00:15:46,920 --> 00:15:52,770
supply chain and you can see how many

317
00:15:49,440 --> 00:15:55,710
different points for supply changes for

318
00:15:52,770 --> 00:16:01,620
basically delivers the firmware on your

319
00:15:55,710 --> 00:16:06,200
laptop involved so any point of

320
00:16:01,620 --> 00:16:11,420
compromise for these different points

321
00:16:06,200 --> 00:16:15,540
basically cause security problems really

322
00:16:11,420 --> 00:16:19,579
really serious security issues so how

323
00:16:15,540 --> 00:16:24,120
basically we can bypass Intel boot guard

324
00:16:19,580 --> 00:16:25,920
so yep I already showed wise different

325
00:16:24,120 --> 00:16:30,140
ways how bypass the boot guard on

326
00:16:25,920 --> 00:16:33,150
blackhat and oops I did it again and

327
00:16:30,140 --> 00:16:36,569
what is actually a root cause of the

328
00:16:33,150 --> 00:16:40,020
problem recovery mode is evil what does

329
00:16:36,570 --> 00:16:42,810
it mean basically when the vendors try

330
00:16:40,020 --> 00:16:45,620
to create some alternative path to

331
00:16:42,810 --> 00:16:49,439
recover the firmware or basically to

332
00:16:45,620 --> 00:16:52,790
manufacture in mode for for support its

333
00:16:49,440 --> 00:16:55,470
create security problems in many cases

334
00:16:52,790 --> 00:16:57,569
secure transition chain of trust is a

335
00:16:55,470 --> 00:16:59,670
different boot stages involved so it's

336
00:16:57,570 --> 00:17:04,560
hard to make it secure because basically

337
00:16:59,670 --> 00:17:06,810
after secrets left leave Hardware root

338
00:17:04,560 --> 00:17:09,990
of trust and go to the software it's

339
00:17:06,810 --> 00:17:12,780
much easier to bypass in most of the

340
00:17:09,990 --> 00:17:15,630
cases without hard reset a root of the

341
00:17:12,780 --> 00:17:18,780
trust just moved to the pure software

342
00:17:15,630 --> 00:17:21,449
and I will be actually described why

343
00:17:18,780 --> 00:17:24,480
think about when you close the lid of

344
00:17:21,449 --> 00:17:28,590
your laptop and open how many

345
00:17:24,480 --> 00:17:31,860
milliseconds between passed between the

346
00:17:28,590 --> 00:17:34,949
screen blinked and if it will be

347
00:17:31,860 --> 00:17:36,810
basically go all the way down and verify

348
00:17:34,950 --> 00:17:40,290
all the stages from the scratch it will

349
00:17:36,810 --> 00:17:42,210
be taken minutes and of course who will

350
00:17:40,290 --> 00:17:44,850
be by this laptop right why you should

351
00:17:42,210 --> 00:17:47,550
wait few minutes just to basically make

352
00:17:44,850 --> 00:17:49,830
your wealth of works nobody will do well

353
00:17:47,550 --> 00:17:52,530
this kind of stuff and vendors of care

354
00:17:49,830 --> 00:17:55,740
of course very very focus it how make it

355
00:17:52,530 --> 00:17:58,379
work faster but it's create security

356
00:17:55,740 --> 00:18:00,930
problems because you start from some

357
00:17:58,380 --> 00:18:03,840
point when it's already passed a lot of

358
00:18:00,930 --> 00:18:08,820
stages and if you just will fly your

359
00:18:03,840 --> 00:18:12,000
route of trust there and if somehow the

360
00:18:08,820 --> 00:18:17,129
attacker can execute the code on the

361
00:18:12,000 --> 00:18:20,960
same level it can be bypassed and in

362
00:18:17,130 --> 00:18:23,520
many cases also into introduced

363
00:18:20,960 --> 00:18:25,740
technologies Intel buyers guard and in

364
00:18:23,520 --> 00:18:27,720
many cases it's just don't used or not

365
00:18:25,740 --> 00:18:30,270
configured properly and I've seen this

366
00:18:27,720 --> 00:18:36,000
on many vendors but I think it's good

367
00:18:30,270 --> 00:18:39,060
good point for my next talk and also I

368
00:18:36,000 --> 00:18:42,540
want to discuss some of the real issue

369
00:18:39,060 --> 00:18:45,419
from recovery mode with actually with

370
00:18:42,540 --> 00:18:50,940
Intel nook platforms it's been

371
00:18:45,420 --> 00:18:54,630
discovered by alexei romanov researcher

372
00:18:50,940 --> 00:18:57,930
who presented this stuff on zero nights

373
00:18:54,630 --> 00:19:01,320
last year and its problem exactly about

374
00:18:57,930 --> 00:19:05,490
basically living root of trust from

375
00:19:01,320 --> 00:19:09,990
hardware to software and when update

376
00:19:05,490 --> 00:19:13,470
software have a lot of much more power

377
00:19:09,990 --> 00:19:16,380
than its need and basically its can

378
00:19:13,470 --> 00:19:18,120
override any region on spy flash without

379
00:19:16,380 --> 00:19:23,640
identification and it's been a problem

380
00:19:18,120 --> 00:19:26,879
before and yeah i will make it bigger to

381
00:19:23,640 --> 00:19:30,540
visible so basically the hash verified

382
00:19:26,880 --> 00:19:33,420
and pure software and it just compare

383
00:19:30,540 --> 00:19:37,940
hash which is also not readed from fuse

384
00:19:33,420 --> 00:19:41,070
it's a really existence in veeram and

385
00:19:37,940 --> 00:19:43,500
just a mem copy of these two values and

386
00:19:41,070 --> 00:19:46,050
of course it's can be ignored in some

387
00:19:43,500 --> 00:19:51,110
cases when it start recovery and it was

388
00:19:46,050 --> 00:19:54,870
issue this one so yep thanks for

389
00:19:51,110 --> 00:19:57,510
pointing my research - alex yermolov you

390
00:19:54,870 --> 00:20:00,020
can see this blog post about basically

391
00:19:57,510 --> 00:20:08,440
issues with update tools

392
00:20:00,020 --> 00:20:12,379
on my work post on my blog okay sue and

393
00:20:08,440 --> 00:20:14,390
in this issue it was basically a rout of

394
00:20:12,380 --> 00:20:17,540
course of the problem would guard P

395
00:20:14,390 --> 00:20:20,420
which is kind of like one of the pre

396
00:20:17,540 --> 00:20:24,110
configuration before Dixie stage which

397
00:20:20,420 --> 00:20:27,560
is just the last one before goes to boot

398
00:20:24,110 --> 00:20:29,810
loaders for the operating system yeah

399
00:20:27,560 --> 00:20:34,370
and leads back to the boot guard so

400
00:20:29,810 --> 00:20:38,090
actually it's how it's looks like we do

401
00:20:34,370 --> 00:20:41,540
have basically management engine which

402
00:20:38,090 --> 00:20:43,610
is a readwrite fuse but after it's right

403
00:20:41,540 --> 00:20:47,540
the fuse usually during the

404
00:20:43,610 --> 00:20:49,760
manufacturing it should locked that's

405
00:20:47,540 --> 00:20:52,580
mean it will be never overwritten in any

406
00:20:49,760 --> 00:20:55,100
way so it's a root of trust we do have

407
00:20:52,580 --> 00:20:57,530
some chain of trust inside the firmware

408
00:20:55,100 --> 00:20:59,780
we do have a K manifest which is a root

409
00:20:57,530 --> 00:21:02,870
of trust inside the former depended by

410
00:20:59,780 --> 00:21:04,850
the fuse William and it's actually

411
00:21:02,870 --> 00:21:06,919
integrity check for the fuse value for

412
00:21:04,850 --> 00:21:09,439
route of public key inside the commune

413
00:21:06,920 --> 00:21:12,080
efest and the initial boot lock manifest

414
00:21:09,440 --> 00:21:15,500
which is basically dependent by ufi

415
00:21:12,080 --> 00:21:19,490
firmware image but think about if we

416
00:21:15,500 --> 00:21:22,880
don't have this point everything is just

417
00:21:19,490 --> 00:21:25,880
locked inside the firmware and it's

418
00:21:22,880 --> 00:21:28,730
exactly what I talking about before it's

419
00:21:25,880 --> 00:21:33,590
create possibility break everything is

420
00:21:28,730 --> 00:21:36,260
inside the firmware so and it's a

421
00:21:33,590 --> 00:21:39,260
picture when how it's actually research

422
00:21:36,260 --> 00:21:41,450
being started I've been since this

423
00:21:39,260 --> 00:21:43,490
picture on some of of the updates on my

424
00:21:41,450 --> 00:21:45,620
system okay interesting

425
00:21:43,490 --> 00:21:48,290
it's disabling the boot guard from

426
00:21:45,620 --> 00:21:52,850
software how it's possible because it's

427
00:21:48,290 --> 00:21:56,450
basically should be locked and disabled

428
00:21:52,850 --> 00:21:59,600
in the boot guard need runs a seat up

429
00:21:56,450 --> 00:22:02,780
with a password and only that can cause

430
00:21:59,600 --> 00:22:04,250
disabling but it's draining from the

431
00:22:02,780 --> 00:22:07,550
operating system level and somehow

432
00:22:04,250 --> 00:22:11,240
disabling the boot guard okay I should

433
00:22:07,550 --> 00:22:12,919
basically dig in and try to understand

434
00:22:11,240 --> 00:22:16,160
how this works

435
00:22:12,920 --> 00:22:20,150
I was go to Lenovo PCG platform

436
00:22:16,160 --> 00:22:23,150
configuration and it driver and look

437
00:22:20,150 --> 00:22:26,990
inside this call and okay it's wow it's

438
00:22:23,150 --> 00:22:30,050
interesting how this basically connected

439
00:22:26,990 --> 00:22:34,580
to the disabling of the boot guard and

440
00:22:30,050 --> 00:22:38,600
then I found this check it's basically a

441
00:22:34,580 --> 00:22:41,540
constructed code from disassembly and

442
00:22:38,600 --> 00:22:44,600
it's check the PC deep platform

443
00:22:41,540 --> 00:22:46,430
configuration mode is active and then

444
00:22:44,600 --> 00:22:51,949
it's basically disabling the boot guard

445
00:22:46,430 --> 00:22:59,150
for Dixie stage verification so what

446
00:22:51,950 --> 00:23:02,690
basically happens it's disable all

447
00:22:59,150 --> 00:23:04,640
section of the drivers which is

448
00:23:02,690 --> 00:23:08,990
executing and communicating with the

449
00:23:04,640 --> 00:23:11,510
pirating system just before posit

450
00:23:08,990 --> 00:23:17,420
control from platform initialization

451
00:23:11,510 --> 00:23:19,670
model and I was also think about okay

452
00:23:17,420 --> 00:23:22,700
they need to store this value somehow

453
00:23:19,670 --> 00:23:29,330
and beat me up inside the firmware image

454
00:23:22,700 --> 00:23:32,330
and I find this padding this one which

455
00:23:29,330 --> 00:23:37,060
was not covered by boot guard and it

456
00:23:32,330 --> 00:23:40,820
stores some weird bitmap here it is and

457
00:23:37,060 --> 00:23:46,840
I was playing with different values

458
00:23:40,820 --> 00:23:50,720
around this ones and actually if you

459
00:23:46,840 --> 00:23:54,230
make it now and reboot your system three

460
00:23:50,720 --> 00:23:56,150
times its disabling the Dixie stage but

461
00:23:54,230 --> 00:23:58,640
first time I've been confused because I

462
00:23:56,150 --> 00:24:02,000
changed the value and nothing happens I

463
00:23:58,640 --> 00:24:05,120
was okay but God says it's can disabled

464
00:24:02,000 --> 00:24:07,810
but what is not doesn't work so I start

465
00:24:05,120 --> 00:24:10,399
experimenting and just like sometime

466
00:24:07,810 --> 00:24:13,040
accidentally reboot few times and then

467
00:24:10,400 --> 00:24:16,040
it works so yeah don't blame me if you

468
00:24:13,040 --> 00:24:23,060
try to reproduce just make more resets

469
00:24:16,040 --> 00:24:26,260
on your system so also I was working on

470
00:24:23,060 --> 00:24:28,230
the spy damn flash and

471
00:24:26,260 --> 00:24:32,500
here we can see the difference so

472
00:24:28,230 --> 00:24:35,650
basically this wedding and it's this

473
00:24:32,500 --> 00:24:38,919
wedding inside spiteful damn so its

474
00:24:35,650 --> 00:24:42,790
original BIOS update and visit them so

475
00:24:38,919 --> 00:24:45,880
you can see it's highlighted now what is

476
00:24:42,790 --> 00:24:49,409
the difference it's actually here so you

477
00:24:45,880 --> 00:24:53,350
can see it's basically have a more

478
00:24:49,410 --> 00:24:56,770
configuration data for for from the

479
00:24:53,350 --> 00:25:01,090
manufacturer but I don't know what is

480
00:24:56,770 --> 00:25:03,460
basically all all of these bits but I

481
00:25:01,090 --> 00:25:08,110
just discussed one which I already

482
00:25:03,460 --> 00:25:11,799
experimented and play around so what

483
00:25:08,110 --> 00:25:14,379
I've endured doors it's not a real back

484
00:25:11,799 --> 00:25:17,950
doors it creates a way how they can

485
00:25:14,380 --> 00:25:20,950
debug or basically recover the plot

486
00:25:17,950 --> 00:25:22,960
platforms but from the attacker

487
00:25:20,950 --> 00:25:27,100
perspective it's really like open the

488
00:25:22,960 --> 00:25:29,740
doors to install or like implant on your

489
00:25:27,100 --> 00:25:34,990
system because it's no validation on

490
00:25:29,740 --> 00:25:37,750
secure boot stage right so but for

491
00:25:34,990 --> 00:25:40,090
vendor what like I mentioned it's a lot

492
00:25:37,750 --> 00:25:42,549
of things because enterprise market it's

493
00:25:40,090 --> 00:25:45,189
need stable solutions right and if it's

494
00:25:42,549 --> 00:25:48,040
not you need way to debug it

495
00:25:45,190 --> 00:25:52,390
so also somehow you need to recode way

496
00:25:48,040 --> 00:25:57,070
to recover your broken firmware so it's

497
00:25:52,390 --> 00:26:00,160
also possible way why they create this

498
00:25:57,070 --> 00:26:03,750
kind of possibility so it's a lot of

499
00:26:00,160 --> 00:26:09,220
open questions but interesting fighting

500
00:26:03,750 --> 00:26:12,730
let's move to system SMI handlers over

501
00:26:09,220 --> 00:26:17,169
windows management interface and why

502
00:26:12,730 --> 00:26:21,929
it's evil so let's talk a bit about how

503
00:26:17,169 --> 00:26:25,660
you can exploit the system firmware and

504
00:26:21,929 --> 00:26:28,120
it's actually a path from the operating

505
00:26:25,660 --> 00:26:31,240
system level and you can see how many

506
00:26:28,120 --> 00:26:33,909
exploitation exploits you need it's

507
00:26:31,240 --> 00:26:37,990
around different five chainé chainé it

508
00:26:33,910 --> 00:26:41,669
in one exploits and most interesting one

509
00:26:37,990 --> 00:26:41,669
if when you base

510
00:26:41,700 --> 00:26:49,059
elevate the privileges to two system

511
00:26:46,509 --> 00:26:52,419
management mode and try to basically get

512
00:26:49,059 --> 00:26:55,299
this by flour rice from from this level

513
00:26:52,419 --> 00:26:59,049
because it should be isolated on any

514
00:26:55,299 --> 00:27:01,480
others but some some buyers update tools

515
00:26:59,049 --> 00:27:07,750
have some evil possibilities but not all

516
00:27:01,480 --> 00:27:10,929
of them okay so I start looking around

517
00:27:07,750 --> 00:27:14,350
how many things lock it inside the ECPI

518
00:27:10,929 --> 00:27:17,110
tables and how many configuration data

519
00:27:14,350 --> 00:27:21,129
stored there so yeah you remember the

520
00:27:17,110 --> 00:27:24,610
screen right so and lanova actually on

521
00:27:21,129 --> 00:27:27,158
their website says in documentation they

522
00:27:24,610 --> 00:27:30,340
do have interface to call SMI handler

523
00:27:27,159 --> 00:27:32,559
and as I mentioned is my handler it's

524
00:27:30,340 --> 00:27:35,590
callback function from the firmware to

525
00:27:32,559 --> 00:27:37,330
the operating system level over windows

526
00:27:35,590 --> 00:27:39,158
management interface on the previous

527
00:27:37,330 --> 00:27:41,379
pictures actually I show you need

528
00:27:39,159 --> 00:27:44,769
escalate the privileges from the user

529
00:27:41,379 --> 00:27:48,250
mode to the ring 0 to cause this my

530
00:27:44,769 --> 00:27:50,559
handler in this case you just need a

531
00:27:48,250 --> 00:27:53,889
route on the platform or like system

532
00:27:50,559 --> 00:27:56,559
privileges to call Windows management

533
00:27:53,889 --> 00:27:59,139
interface and that's it in many cases

534
00:27:56,559 --> 00:28:03,158
you just need administrator even like

535
00:27:59,139 --> 00:28:05,979
you don't need the system right so and

536
00:28:03,159 --> 00:28:10,840
it's how many different configuration

537
00:28:05,980 --> 00:28:13,750
values stored and can be controlled by

538
00:28:10,840 --> 00:28:15,490
this interface and I will show you a

539
00:28:13,750 --> 00:28:17,559
bigger picture with most interesting one

540
00:28:15,490 --> 00:28:22,269
so you can see like it's possible to

541
00:28:17,559 --> 00:28:25,690
disable txt to execution feature for for

542
00:28:22,269 --> 00:28:28,389
your hardware it's like disable or

543
00:28:25,690 --> 00:28:30,519
enable rollback protection also it can

544
00:28:28,389 --> 00:28:32,559
be disable enable for secure boot yeah

545
00:28:30,519 --> 00:28:36,490
it's a lot of stuff and it's kind of

546
00:28:32,559 --> 00:28:41,500
like scary right with it especially for

547
00:28:36,490 --> 00:28:43,659
like creating DMA barriers for DMA

548
00:28:41,500 --> 00:28:46,149
attacks also can be enabled disabled

549
00:28:43,659 --> 00:28:47,899
here so how you can find this interface

550
00:28:46,149 --> 00:28:51,139
so I use a

551
00:28:47,899 --> 00:28:56,738
we tried everything tool and open the

552
00:28:51,139 --> 00:29:00,439
top these specification pie table ds/dt

553
00:28:56,739 --> 00:29:04,369
and yep just you can see if you just

554
00:29:00,440 --> 00:29:09,460
basically try to find VMI you can just

555
00:29:04,369 --> 00:29:14,978
find different possibilities to call

556
00:29:09,460 --> 00:29:18,649
this interface so here is example of

557
00:29:14,979 --> 00:29:20,989
visual basic script to basically update

558
00:29:18,649 --> 00:29:24,339
administrator password for your firmware

559
00:29:20,989 --> 00:29:27,589
from the operating system and this

560
00:29:24,339 --> 00:29:29,809
script I just copy/paste from Lenovo

561
00:29:27,589 --> 00:29:32,658
website they really nice to create this

562
00:29:29,809 --> 00:29:34,309
example it shows like really a lot of

563
00:29:32,659 --> 00:29:39,219
possibilities from windows management

564
00:29:34,309 --> 00:29:45,710
interface so welcome to brave new world

565
00:29:39,219 --> 00:29:48,349
and yeah so I was thinking okay we do

566
00:29:45,710 --> 00:29:50,919
have windows management interface and

567
00:29:48,349 --> 00:29:54,259
also we have a remote configuration

568
00:29:50,919 --> 00:29:58,309
drivers and Lenovo setup automation it

569
00:29:54,259 --> 00:30:01,269
should become connected somehow and it

570
00:29:58,309 --> 00:30:04,039
is basically these two drivers it's

571
00:30:01,269 --> 00:30:06,739
implementing this interface for the

572
00:30:04,039 --> 00:30:08,809
operating system level and here is some

573
00:30:06,739 --> 00:30:10,999
description what is implemented on

574
00:30:08,809 --> 00:30:13,580
different drivers describe it on the

575
00:30:10,999 --> 00:30:15,979
previous slide but for me it was most

576
00:30:13,580 --> 00:30:22,539
interesting one Lenovo hidden setting

577
00:30:15,979 --> 00:30:28,129
what is it so it can disable and enable

578
00:30:22,539 --> 00:30:30,229
CPU debug and also compute race and as I

579
00:30:28,129 --> 00:30:35,478
mentioned before compute race is kind of

580
00:30:30,229 --> 00:30:39,969
legit rootkit to track and deserved your

581
00:30:35,479 --> 00:30:45,229
laptop for as an anti-theft feature and

582
00:30:39,969 --> 00:30:47,149
it's basically have a permanent disable

583
00:30:45,229 --> 00:30:50,450
option but yeah let's talk a bit later

584
00:30:47,149 --> 00:30:53,718
about that so setup automation is my

585
00:30:50,450 --> 00:30:56,869
it's a numbers and it's like over 15 of

586
00:30:53,719 --> 00:31:00,989
SMI handlers involved and it's like a

587
00:30:56,869 --> 00:31:07,289
huge attack surface because it's

588
00:31:00,989 --> 00:31:09,450
it's actually have some they ignore some

589
00:31:07,289 --> 00:31:12,330
of the security checks which they used

590
00:31:09,450 --> 00:31:14,940
on the other drivers which is like okay

591
00:31:12,330 --> 00:31:18,119
probably old interface forgotten by the

592
00:31:14,940 --> 00:31:22,259
developers but let's now switch to

593
00:31:18,119 --> 00:31:25,320
compute race and why it's interesting so

594
00:31:22,259 --> 00:31:28,649
I don't know you remember not but in the

595
00:31:25,320 --> 00:31:31,039
end of the last year is that antivirus

596
00:31:28,649 --> 00:31:34,379
company being discover interesting

597
00:31:31,039 --> 00:31:35,389
rootkit based on compute race name it

598
00:31:34,379 --> 00:31:37,830
like a LoJack's

599
00:31:35,389 --> 00:31:39,809
they released the report I will not

600
00:31:37,830 --> 00:31:41,968
Deacon the details of this rootkit

601
00:31:39,809 --> 00:31:43,950
specifically but I will be dick on

602
00:31:41,969 --> 00:31:49,190
compute race which is used as an

603
00:31:43,950 --> 00:31:52,200
implementation feature for that so my

604
00:31:49,190 --> 00:31:56,789
main concerns okay lonoa remote

605
00:31:52,200 --> 00:31:59,549
configuration is connected to two

606
00:31:56,789 --> 00:32:04,830
windows management interface so you can

607
00:31:59,549 --> 00:32:07,408
do it something remote and I was

608
00:32:04,830 --> 00:32:11,369
tweeting about that and a lot of people

609
00:32:07,409 --> 00:32:14,099
like this topic I decided to reconstruct

610
00:32:11,369 --> 00:32:16,019
some more information about it it's

611
00:32:14,099 --> 00:32:19,080
right from my previous research you can

612
00:32:16,019 --> 00:32:21,539
find on this link so basically I was

613
00:32:19,080 --> 00:32:25,529
talking ok compute race can be disabled

614
00:32:21,539 --> 00:32:28,469
permanently it's setup menu from my p50

615
00:32:25,529 --> 00:32:31,649
laptop and I was thinking okay probably

616
00:32:28,469 --> 00:32:35,219
the use of use but not really they just

617
00:32:31,649 --> 00:32:37,258
use one bit value inside the Lenovo

618
00:32:35,219 --> 00:32:42,749
hidden setting and the Nova security

619
00:32:37,259 --> 00:32:46,320
config and no permanently disabling for

620
00:32:42,749 --> 00:32:48,570
computation your laptop so we really all

621
00:32:46,320 --> 00:32:51,479
these drivers just executing and do

622
00:32:48,570 --> 00:32:54,539
nothing and if the attacker can get to

623
00:32:51,479 --> 00:32:56,279
system management mode or like probably

624
00:32:54,539 --> 00:32:58,169
patches these drivers even this

625
00:32:56,279 --> 00:33:01,229
prominent disable it's still executing

626
00:32:58,169 --> 00:33:09,589
so it can be reused so why it's so

627
00:33:01,229 --> 00:33:14,440
dangerous it's architecture of how

628
00:33:09,589 --> 00:33:17,330
different Lenovo

629
00:33:14,440 --> 00:33:19,940
security features and Lenovo compute

630
00:33:17,330 --> 00:33:22,070
traces and my services connected so we

631
00:33:19,940 --> 00:33:25,880
have a lanova hidden set in lonoa

632
00:33:22,070 --> 00:33:30,320
security config and we do have a few

633
00:33:25,880 --> 00:33:32,270
multiple few components like Lin over

634
00:33:30,320 --> 00:33:35,720
security semi dispatcher and you know

635
00:33:32,270 --> 00:33:38,660
what my mailbox and let's look how it's

636
00:33:35,720 --> 00:33:42,500
basically connected but before we dig

637
00:33:38,660 --> 00:33:44,780
there let's let's check what is the

638
00:33:42,500 --> 00:33:46,490
fields I recover some of the fields by

639
00:33:44,780 --> 00:33:48,139
reverse engineering you know the

640
00:33:46,490 --> 00:33:52,010
security can fix from different

641
00:33:48,140 --> 00:33:56,360
platforms so and we can see here like

642
00:33:52,010 --> 00:33:59,780
it's it's a lot of stuff so and it's

643
00:33:56,360 --> 00:34:01,879
also tied to what we've been extracting

644
00:33:59,780 --> 00:34:04,879
from operating system level you can see

645
00:34:01,880 --> 00:34:07,580
secure boot 60 so basically it's tied to

646
00:34:04,880 --> 00:34:10,909
there and even device guard its

647
00:34:07,580 --> 00:34:12,650
Microsoft feature it's also there which

648
00:34:10,909 --> 00:34:14,960
is interesting but I'm not surprised

649
00:34:12,650 --> 00:34:18,320
because basically device guard need to

650
00:34:14,960 --> 00:34:20,960
understand its hardware is support this

651
00:34:18,320 --> 00:34:22,760
feature to enable this feature on the

652
00:34:20,960 --> 00:34:24,949
pirating system level and basically it's

653
00:34:22,760 --> 00:34:26,750
also like just true or false in

654
00:34:24,949 --> 00:34:27,668
configuration for Illinois security

655
00:34:26,750 --> 00:34:32,630
config

656
00:34:27,668 --> 00:34:38,239
but let's talk about Lenovo SMI services

657
00:34:32,630 --> 00:34:41,600
so I was thinking we we do have a some

658
00:34:38,239 --> 00:34:43,879
SMI handlers which is used inside the

659
00:34:41,600 --> 00:34:48,560
compute res but what this is my handler

660
00:34:43,880 --> 00:34:51,230
does so it's a numbers and as you can

661
00:34:48,560 --> 00:34:53,000
see it's enable/disable state basically

662
00:34:51,230 --> 00:34:54,980
it's enabled or disabled if you call

663
00:34:53,000 --> 00:34:57,830
this computer a state it will be

664
00:34:54,980 --> 00:34:59,120
returned the status and enable action

665
00:34:57,830 --> 00:35:01,700
and disabled action

666
00:34:59,120 --> 00:35:04,089
it's basically once which is can be

667
00:35:01,700 --> 00:35:08,750
called from the operating system level

668
00:35:04,090 --> 00:35:11,480
so yeah it's kind of like why too much

669
00:35:08,750 --> 00:35:15,410
SMI handlers involved for this simple

670
00:35:11,480 --> 00:35:18,910
feature and why it's too much

671
00:35:15,410 --> 00:35:23,120
possibilities activated differently so

672
00:35:18,910 --> 00:35:26,720
let's hook only novice krej data because

673
00:35:23,120 --> 00:35:30,828
it's one which is provides a state of

674
00:35:26,720 --> 00:35:34,669
a Lenovo compute race and this one on on

675
00:35:30,829 --> 00:35:37,160
the right side it's recover it from in

676
00:35:34,670 --> 00:35:43,910
VM and it's like how its configured

677
00:35:37,160 --> 00:35:48,410
basically it's a bitmap right so so

678
00:35:43,910 --> 00:35:50,779
basically can check how Lenovo security

679
00:35:48,410 --> 00:35:52,970
config looks like inside OC in veeram

680
00:35:50,780 --> 00:35:56,060
yeah and it's also bitmaps just like

681
00:35:52,970 --> 00:35:59,839
zero one if it's need to be active or

682
00:35:56,060 --> 00:36:02,990
not which is easy to attack but I was

683
00:35:59,839 --> 00:36:05,299
mostly thinking how the disabling and

684
00:36:02,990 --> 00:36:10,779
permanent disabling works and the flow

685
00:36:05,300 --> 00:36:13,430
it's quite complex so I summarized that

686
00:36:10,780 --> 00:36:16,520
with this cell decode how's this

687
00:36:13,430 --> 00:36:19,060
algorithm work and you can see so if

688
00:36:16,520 --> 00:36:22,550
security config compute race is true

689
00:36:19,060 --> 00:36:23,089
basically it's enabled if it's something

690
00:36:22,550 --> 00:36:27,140
else

691
00:36:23,089 --> 00:36:29,720
then it's disabled which is quite simple

692
00:36:27,140 --> 00:36:34,129
and also don't look like a permanent

693
00:36:29,720 --> 00:36:40,299
disable right so here is a SMI compute

694
00:36:34,130 --> 00:36:44,540
trace enable flow how it's worked and

695
00:36:40,300 --> 00:36:48,010
also I was thinking okay he looks much

696
00:36:44,540 --> 00:36:52,730
more interesting because we need some

697
00:36:48,010 --> 00:36:55,270
some value inside the ax register which

698
00:36:52,730 --> 00:37:01,099
is basically they will be flag something

699
00:36:55,270 --> 00:37:04,220
and digging deeper so it is computer a

700
00:37:01,099 --> 00:37:07,520
state which is have a value disabled

701
00:37:04,220 --> 00:37:10,098
secret key and was okay here's game over

702
00:37:07,520 --> 00:37:13,369
because it's like a four bytes key like

703
00:37:10,099 --> 00:37:16,940
how you can brute force it right so it's

704
00:37:13,369 --> 00:37:19,599
it's difficult but then I was looked how

705
00:37:16,940 --> 00:37:26,200
this key is verified inside the firmware

706
00:37:19,599 --> 00:37:30,589
and it was funny because it's symmetric

707
00:37:26,200 --> 00:37:33,710
algorithm used here for deviation of

708
00:37:30,589 --> 00:37:36,828
this key and it's depend by just one

709
00:37:33,710 --> 00:37:39,960
byte symmetrically what does mean you

710
00:37:36,829 --> 00:37:42,660
can good Force one but white value and

711
00:37:39,960 --> 00:37:45,630
else other three bites you'll be just

712
00:37:42,660 --> 00:37:48,270
derived by this function you know Wow

713
00:37:45,630 --> 00:37:51,830
cool one bite it's really fast to

714
00:37:48,270 --> 00:38:02,119
brute-force and make some automation for

715
00:37:51,830 --> 00:38:05,540
my penetration testing tool so and other

716
00:38:02,119 --> 00:38:09,390
roadblock was okay so if they do

717
00:38:05,540 --> 00:38:12,839
constant time and a comparison for this

718
00:38:09,390 --> 00:38:16,859
bite even with one bite it can be a bit

719
00:38:12,839 --> 00:38:19,549
longer but they felt even here because

720
00:38:16,859 --> 00:38:25,560
it's not constant time and brute force

721
00:38:19,550 --> 00:38:29,670
it's less than one minute actually so

722
00:38:25,560 --> 00:38:32,640
here is a small script with a chip SEC

723
00:38:29,670 --> 00:38:35,460
tool when you call a specific SMI

724
00:38:32,640 --> 00:38:40,170
handler and try just brute force one

725
00:38:35,460 --> 00:38:44,160
bite well you so it's fast so I get I

726
00:38:40,170 --> 00:38:48,839
don't know probably in 20 seconds 0x 57

727
00:38:44,160 --> 00:38:52,790
for my 5050 laptop and in some cases

728
00:38:48,839 --> 00:38:57,420
different Lenovo lines or different

729
00:38:52,790 --> 00:39:01,140
Lenovo web series can have a different

730
00:38:57,420 --> 00:39:08,339
disabled key so my key for Lenovo p50

731
00:39:01,140 --> 00:39:11,970
and my key for Lenovo t-p by 540 was a

732
00:39:08,339 --> 00:39:20,009
different so it's not basically surprise

733
00:39:11,970 --> 00:39:25,410
but it's still won by it so its main

734
00:39:20,010 --> 00:39:30,570
concerns about compute race and also one

735
00:39:25,410 --> 00:39:32,098
of them is lenovo used always the same

736
00:39:30,570 --> 00:39:34,230
version of computer ace it's been

737
00:39:32,099 --> 00:39:37,619
basically not updated more than five

738
00:39:34,230 --> 00:39:39,900
years probably they license at some but

739
00:39:37,619 --> 00:39:42,089
after that they not update the license

740
00:39:39,900 --> 00:39:43,560
because they don't have new license for

741
00:39:42,089 --> 00:39:46,109
a newer version or whatever they just

742
00:39:43,560 --> 00:39:52,140
keep using the old one which is like

743
00:39:46,109 --> 00:39:54,270
full of bugs embedded controller so

744
00:39:52,140 --> 00:40:00,420
and weather control you're basically it

745
00:39:54,270 --> 00:40:05,870
small cheap waste usually in on you know

746
00:40:00,420 --> 00:40:08,340
think but it's based on arc CPU and it's

747
00:40:05,870 --> 00:40:12,029
in the past it's been just like a

748
00:40:08,340 --> 00:40:14,850
keyboard controller and used for some of

749
00:40:12,030 --> 00:40:18,930
the restore features for sleep mode but

750
00:40:14,850 --> 00:40:24,020
a power for power actually and but for

751
00:40:18,930 --> 00:40:26,669
nowadays it's much more its have some

752
00:40:24,020 --> 00:40:29,759
security features based on embedded

753
00:40:26,670 --> 00:40:32,940
controller and probably it will be my

754
00:40:29,760 --> 00:40:36,810
talk for the next black head but let's a

755
00:40:32,940 --> 00:40:41,520
bit check how the embedded controller

756
00:40:36,810 --> 00:40:43,910
looks like so this one specifically you

757
00:40:41,520 --> 00:40:47,009
can see it have a connection to DMA

758
00:40:43,910 --> 00:40:50,190
Alliance and have access to PCIe devices

759
00:40:47,010 --> 00:40:53,700
so basically nobody thinks from the

760
00:40:50,190 --> 00:40:58,700
platform vendors on a blended controller

761
00:40:53,700 --> 00:41:01,080
as one in which is can basically attack

762
00:40:58,700 --> 00:41:04,980
in weather controller its security

763
00:41:01,080 --> 00:41:07,319
boundary so but if it's updating

764
00:41:04,980 --> 00:41:10,070
separately from the main firmware that's

765
00:41:07,320 --> 00:41:14,520
mean or sometimes it can be the same

766
00:41:10,070 --> 00:41:17,400
update container but anyway so if you

767
00:41:14,520 --> 00:41:20,160
can bypass identification for the

768
00:41:17,400 --> 00:41:22,470
firmware on embedded controller you can

769
00:41:20,160 --> 00:41:24,660
basically attack the main firmware or

770
00:41:22,470 --> 00:41:29,129
attack some devices which is accessible

771
00:41:24,660 --> 00:41:31,740
over P side and most of the platform

772
00:41:29,130 --> 00:41:36,240
vendors don't include this attack vector

773
00:41:31,740 --> 00:41:38,640
on the attack surface and this one I

774
00:41:36,240 --> 00:41:42,000
will not tell the name of the vendor but

775
00:41:38,640 --> 00:41:44,730
you can see it's no identification

776
00:41:42,000 --> 00:41:47,310
it just its update routine and it's just

777
00:41:44,730 --> 00:41:50,700
flash it and it's very nice commands

778
00:41:47,310 --> 00:41:53,490
actually I not put myself it's it all

779
00:41:50,700 --> 00:41:55,740
all the all the developer developers do

780
00:41:53,490 --> 00:41:58,410
better than me so they put all the

781
00:41:55,740 --> 00:42:01,970
comments which is much easier to read

782
00:41:58,410 --> 00:42:01,970
this the compiled at fall

783
00:42:03,079 --> 00:42:11,279
okay so let's do some summary for my

784
00:42:06,569 --> 00:42:13,799
talk and I think the usability in

785
00:42:11,279 --> 00:42:16,920
enterprise wore out in many cases it's

786
00:42:13,799 --> 00:42:21,359
main enemy of security and we need to

787
00:42:16,920 --> 00:42:23,759
find some balance and here the vendors

788
00:42:21,359 --> 00:42:26,729
can understand permanent disable option

789
00:42:23,759 --> 00:42:29,939
differently it's a lesson learnt with

790
00:42:26,729 --> 00:42:33,209
the compute race and when the hardware

791
00:42:29,939 --> 00:42:35,489
weighs root of trust transfers a state

792
00:42:33,209 --> 00:42:37,529
of chain of trust to the software it's

793
00:42:35,489 --> 00:42:41,249
not already Hardware anymore right so

794
00:42:37,529 --> 00:42:42,089
it's pure software thank you very much

795
00:42:41,249 --> 00:42:45,538
for your attention

796
00:42:42,089 --> 00:42:46,210
I hope you enjoyed the talk thanks

797
00:42:45,539 --> 00:42:52,920
everyone

798
00:42:46,210 --> 00:42:52,920
[Applause]

