1
00:00:03,509 --> 00:00:08,860
<font color="#E5E5E5">all right so Aloha and welcome to</font><font color="#CCCCCC"> my</font>

2
00:00:06,189 --> 00:00:12,879
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> about getting cozy</font><font color="#CCCCCC"> with auditing on</font>

3
00:00:08,860 --> 00:00:15,190
Mac OS<font color="#CCCCCC"> his Matt mentioned my name is</font>

4
00:00:12,880 --> 00:00:17,200
Patrick<font color="#CCCCCC"> Wardle</font><font color="#E5E5E5"> and I've worked at a</font>

5
00:00:15,190 --> 00:00:18,970
<font color="#E5E5E5">variety of acronym places including some</font>

6
00:00:17,200 --> 00:00:21,460
government agencies<font color="#E5E5E5"> currently I'm the</font>

7
00:00:18,970 --> 00:00:23,259
<font color="#E5E5E5">chief research officer at a small</font>

8
00:00:21,460 --> 00:00:25,570
<font color="#E5E5E5">start-up called digital</font><font color="#CCCCCC"> security and</font>

9
00:00:23,259 --> 00:00:29,460
very<font color="#E5E5E5"> briefly digital security</font><font color="#CCCCCC"> we're</font>

10
00:00:25,570 --> 00:00:31,869
creating enterprise tools for the Mac

11
00:00:29,460 --> 00:00:34,360
<font color="#CCCCCC">alright so what are</font><font color="#E5E5E5"> we going to be</font>

12
00:00:31,869 --> 00:00:37,149
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> today so we're gonna start</font>

13
00:00:34,360 --> 00:00:39,309
<font color="#E5E5E5">with an</font><font color="#CCCCCC"> overview of auditing on</font><font color="#E5E5E5"> Mac OS</font>

14
00:00:37,149 --> 00:00:41,199
<font color="#E5E5E5">now I'll be the first to admit</font><font color="#CCCCCC"> that</font>

15
00:00:39,309 --> 00:00:43,358
talking<font color="#E5E5E5"> about auditing might not seem</font>

16
00:00:41,199 --> 00:00:45,820
like<font color="#CCCCCC"> the</font><font color="#E5E5E5"> most</font><font color="#CCCCCC"> sexy or interesting topic</font>

17
00:00:43,359 --> 00:00:47,710
<font color="#E5E5E5">but the reality is</font><font color="#CCCCCC"> it's actually very</font>

18
00:00:45,820 --> 00:00:48,010
relevant<font color="#E5E5E5"> in something important to talk</font>

19
00:00:47,710 --> 00:00:51,039
about

20
00:00:48,010 --> 00:00:53,559
so as we'll see auditing is very useful

21
00:00:51,039 --> 00:00:55,449
for<font color="#E5E5E5"> both malware analysis and forensics</font>

22
00:00:53,559 --> 00:00:57,909
<font color="#E5E5E5">and if you're interested in creating</font>

23
00:00:55,449 --> 00:01:00,218
security<font color="#E5E5E5"> tools we'll show how you can</font>

24
00:00:57,909 --> 00:01:01,899
utilize the auditing mechanisms built

25
00:01:00,219 --> 00:01:05,379
<font color="#CCCCCC">into the operating system to build</font><font color="#E5E5E5"> some</font>

26
00:01:01,899 --> 00:01:07,720
very powerful security tools also<font color="#CCCCCC"> if you</font>

27
00:01:05,379 --> 00:01:10,210
<font color="#CCCCCC">are a hacker or</font><font color="#E5E5E5"> if you are developing</font>

28
00:01:07,720 --> 00:01:12,820
offensive cyber security capabilities

29
00:01:10,210 --> 00:01:15,009
it's<font color="#E5E5E5"> very important to know what</font><font color="#CCCCCC"> type of</font>

30
00:01:12,820 --> 00:01:16,990
auditing may be going<font color="#E5E5E5"> on on the system</font>

31
00:01:15,010 --> 00:01:19,800
so<font color="#E5E5E5"> that your tools your exploits your</font>

32
00:01:16,990 --> 00:01:22,720
capabilities remain undetected

33
00:01:19,800 --> 00:01:25,660
well then dive<font color="#CCCCCC"> into a built in auditing</font>

34
00:01:22,720 --> 00:01:27,070
mechanism or<font color="#CCCCCC"> subsystem called</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> BSM</font>

35
00:01:25,660 --> 00:01:31,330
and we'll see that<font color="#CCCCCC"> this is kind of the</font>

36
00:01:27,070 --> 00:01:34,119
<font color="#E5E5E5">de-facto auditing mechanism on</font><font color="#CCCCCC"> mac well</font>

37
00:01:31,330 --> 00:01:36,880
then dawn on our black hats and kind<font color="#E5E5E5"> of</font>

38
00:01:34,120 --> 00:01:39,250
take a more offensive turn to talk about

39
00:01:36,880 --> 00:01:41,890
some vulnerabilities in the auditing

40
00:01:39,250 --> 00:01:43,840
subsystem so first we'll talk about<font color="#CCCCCC"> a</font>

41
00:01:41,890 --> 00:01:46,240
kernel panic<font color="#CCCCCC"> and then we'll end by</font>

42
00:01:43,840 --> 00:01:48,340
<font color="#CCCCCC">talking about some more</font><font color="#E5E5E5"> interesting bugs</font>

43
00:01:46,240 --> 00:01:50,050
in the kernel<font color="#E5E5E5"> one being an information</font>

44
00:01:48,340 --> 00:01:54,310
leak<font color="#E5E5E5"> and the other being an exploitable</font>

45
00:01:50,050 --> 00:01:58,420
heap overflow so let's start by<font color="#CCCCCC"> talking</font>

46
00:01:54,310 --> 00:02:00,190
about auditing mechanisms on<font color="#E5E5E5"> Mac OS now</font>

47
00:01:58,420 --> 00:02:02,380
<font color="#E5E5E5">first you might be wondering what is</font>

48
00:02:00,190 --> 00:02:04,360
auditing anyways and this<font color="#E5E5E5"> is a question</font>

49
00:02:02,380 --> 00:02:06,670
I had when I began this<font color="#CCCCCC"> research and</font>

50
00:02:04,360 --> 00:02:08,318
there's a great quote<font color="#CCCCCC"> from Jonathan</font><font color="#E5E5E5"> 11</font>

51
00:02:06,670 --> 00:02:10,959
<font color="#E5E5E5">Jonathan is the</font><font color="#CCCCCC"> author of the</font><font color="#E5E5E5"> very</font>

52
00:02:08,318 --> 00:02:12,969
popular Mac OS internal books<font color="#E5E5E5"> highly</font>

53
00:02:10,959 --> 00:02:16,030
recommended if<font color="#E5E5E5"> you're interested in iOS</font>

54
00:02:12,969 --> 00:02:17,230
and Mac OS internals<font color="#E5E5E5"> and as he states in</font>

55
00:02:16,030 --> 00:02:19,659
his<font color="#E5E5E5"> book he says</font>

56
00:02:17,230 --> 00:02:23,470
<font color="#CCCCCC">editing enables the recording of events</font>

57
00:02:19,659 --> 00:02:24,579
which may have security implications now

58
00:02:23,470 --> 00:02:26,379
<font color="#E5E5E5">another</font><font color="#CCCCCC"> question might be</font><font color="#E5E5E5"> what's the</font>

59
00:02:24,580 --> 00:02:28,750
difference between logging and auditing

60
00:02:26,379 --> 00:02:31,840
<font color="#CCCCCC">and this is again very valid question</font>

61
00:02:28,750 --> 00:02:35,349
so logging can<font color="#CCCCCC"> be thought of a way</font><font color="#E5E5E5"> to</font>

62
00:02:31,840 --> 00:02:36,940
kind of monitor<font color="#E5E5E5"> any kind of activity so</font>

63
00:02:35,349 --> 00:02:39,129
<font color="#E5E5E5">you think you know in your application</font>

64
00:02:36,940 --> 00:02:41,650
you<font color="#E5E5E5"> add a print statement or a syslog</font>

65
00:02:39,129 --> 00:02:43,298
statement<font color="#E5E5E5"> you can print some value of</font>

66
00:02:41,650 --> 00:02:44,620
<font color="#E5E5E5">some variable</font><font color="#CCCCCC"> right this</font><font color="#E5E5E5"> doesn't</font>

67
00:02:43,299 --> 00:02:47,260
<font color="#CCCCCC">necessarily have to have security</font>

68
00:02:44,620 --> 00:02:49,269
<font color="#E5E5E5">implications auditing as I mentioned is</font>

69
00:02:47,260 --> 00:02:51,790
generally going to<font color="#CCCCCC"> be logging</font><font color="#E5E5E5"> or</font>

70
00:02:49,269 --> 00:02:55,180
recording actions that have security

71
00:02:51,790 --> 00:02:56,890
implications<font color="#E5E5E5"> logging is also</font><font color="#CCCCCC"> opt-in</font><font color="#E5E5E5"> so</font>

72
00:02:55,180 --> 00:02:58,989
if your application<font color="#CCCCCC"> doesn't have printf</font>

73
00:02:56,890 --> 00:03:01,358
statements or syslog<font color="#E5E5E5"> it's not going to</font>

74
00:02:58,989 --> 00:03:04,030
generate<font color="#CCCCCC"> any logging auditing on the</font>

75
00:03:01,359 --> 00:03:06,040
other hand is an enabled by default<font color="#E5E5E5"> and</font>

76
00:03:04,030 --> 00:03:09,129
is usually<font color="#E5E5E5"> implemented at the kernel</font>

77
00:03:06,040 --> 00:03:11,200
<font color="#CCCCCC">level so</font><font color="#E5E5E5"> for example say there's some</font>

78
00:03:09,129 --> 00:03:14,310
<font color="#E5E5E5">auditing enabled that audits login or</font>

79
00:03:11,200 --> 00:03:17,709
logout events or syslog call<font color="#CCCCCC"> assist</font>

80
00:03:14,310 --> 00:03:19,390
system calls<font color="#CCCCCC"> you know your application</font>

81
00:03:17,709 --> 00:03:20,980
might not want<font color="#E5E5E5"> to be audited but it's</font>

82
00:03:19,390 --> 00:03:25,119
it's gonna<font color="#E5E5E5"> get audited by</font><font color="#CCCCCC"> the system</font>

83
00:03:20,980 --> 00:03:27,099
<font color="#E5E5E5">regardless why auditing briefly</font>

84
00:03:25,120 --> 00:03:28,720
mentioned<font color="#E5E5E5"> from a security point of view</font>

85
00:03:27,099 --> 00:03:31,060
<font color="#E5E5E5">it's a very</font><font color="#CCCCCC"> important thing for</font><font color="#E5E5E5"> an</font>

86
00:03:28,720 --> 00:03:34,000
operating system<font color="#CCCCCC"> to have so it can be</font>

87
00:03:31,060 --> 00:03:37,120
used very very<font color="#CCCCCC"> useful for helping</font><font color="#E5E5E5"> to</font>

88
00:03:34,000 --> 00:03:39,700
uncover or understand intrusions or even

89
00:03:37,120 --> 00:03:42,609
malware infections so for<font color="#E5E5E5"> example as</font>

90
00:03:39,700 --> 00:03:45,970
we'll see<font color="#CCCCCC"> when events such as a new</font>

91
00:03:42,609 --> 00:03:48,099
<font color="#CCCCCC">processes started you know a new file</font>

92
00:03:45,970 --> 00:03:50,290
i/o activity<font color="#E5E5E5"> perhaps even a new network</font>

93
00:03:48,099 --> 00:03:52,238
connection these are all<font color="#E5E5E5"> events that</font><font color="#CCCCCC"> can</font>

94
00:03:50,290 --> 00:03:53,798
<font color="#E5E5E5">be audited</font><font color="#CCCCCC"> by the operating</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> so</font>

95
00:03:52,239 --> 00:03:55,900
obviously if a piece of<font color="#CCCCCC"> malware or a</font>

96
00:03:53,799 --> 00:03:58,000
hacker gets into your<font color="#E5E5E5"> system</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> are</font>

97
00:03:55,900 --> 00:04:00,209
all<font color="#E5E5E5"> events</font><font color="#CCCCCC"> that can</font><font color="#E5E5E5"> be recorded and can</font>

98
00:03:58,000 --> 00:04:03,069
then help<font color="#E5E5E5"> potentially uncover that</font>

99
00:04:00,209 --> 00:04:05,019
infection or intrusion<font color="#E5E5E5"> now more</font>

100
00:04:03,069 --> 00:04:07,298
interesting to me<font color="#E5E5E5"> though is using the</font>

101
00:04:05,019 --> 00:04:10,060
audit subsystems to create security

102
00:04:07,299 --> 00:04:12,160
tools so for example and we'll talk

103
00:04:10,060 --> 00:04:13,690
<font color="#CCCCCC">about</font><font color="#E5E5E5"> some other tools later</font><font color="#CCCCCC"> I wrote a</font>

104
00:04:12,160 --> 00:04:16,029
<font color="#E5E5E5">simple utility</font><font color="#CCCCCC"> that's able to</font>

105
00:04:13,690 --> 00:04:18,399
generically detect ransomware<font color="#CCCCCC"> on Mac OS</font>

106
00:04:16,029 --> 00:04:21,190
so all the tool does<font color="#CCCCCC"> is look for</font><font color="#E5E5E5"> the</font>

107
00:04:18,399 --> 00:04:23,560
rapid<font color="#CCCCCC"> creation of encrypted files by</font>

108
00:04:21,190 --> 00:04:26,050
untrusted processes this<font color="#E5E5E5"> is basically</font>

109
00:04:23,560 --> 00:04:27,490
something that ransomware does so what

110
00:04:26,050 --> 00:04:29,500
<font color="#CCCCCC">the tool does is</font><font color="#E5E5E5"> it taps into the</font>

111
00:04:27,490 --> 00:04:30,800
auditing subsystem<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> processed</font>

112
00:04:29,500 --> 00:04:33,680
notification events

113
00:04:30,800 --> 00:04:35,270
and also<font color="#E5E5E5"> file i/o events so the audit</font>

114
00:04:33,680 --> 00:04:37,280
<font color="#E5E5E5">subsystem will now tell the tool</font>

115
00:04:35,270 --> 00:04:39,979
whenever a new process is started<font color="#E5E5E5"> and</font>

116
00:04:37,280 --> 00:04:42,198
also<font color="#CCCCCC"> whenever a new</font><font color="#E5E5E5"> file is created or</font>

117
00:04:39,979 --> 00:04:44,150
modified<font color="#CCCCCC"> so then all the tool has to do</font>

118
00:04:42,199 --> 00:04:45,979
is examine that file to see<font color="#E5E5E5"> if it's</font>

119
00:04:44,150 --> 00:04:48,020
encrypted<font color="#E5E5E5"> and then keep track of some</font>

120
00:04:45,979 --> 00:04:50,330
files<font color="#E5E5E5"> and also see what process is</font>

121
00:04:48,020 --> 00:04:52,940
creating those encrypted<font color="#E5E5E5"> files and then</font>

122
00:04:50,330 --> 00:04:55,039
it<font color="#E5E5E5"> can generically detect all known</font><font color="#CCCCCC"> Reds</font>

123
00:04:52,940 --> 00:04:57,169
<font color="#CCCCCC">where on Mac</font><font color="#E5E5E5"> OS so again a very</font><font color="#CCCCCC"> powerful</font>

124
00:04:55,039 --> 00:05:00,550
tool<font color="#E5E5E5"> that's pretty</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to implement</font>

125
00:04:57,169 --> 00:05:02,810
<font color="#E5E5E5">thanks again to the auditing subsystems</font>

126
00:05:00,550 --> 00:05:05,599
so what auditing mechanisms are

127
00:05:02,810 --> 00:05:07,789
available on Mac OS turns out there's

128
00:05:05,599 --> 00:05:09,949
quite<font color="#CCCCCC"> a few and we'll talk</font><font color="#E5E5E5"> through all</font>

129
00:05:07,789 --> 00:05:12,830
<font color="#CCCCCC">of</font><font color="#E5E5E5"> these kind of looking at the pros and</font>

130
00:05:09,949 --> 00:05:15,229
<font color="#CCCCCC">cons</font><font color="#E5E5E5"> of each and also identifying any</font>

131
00:05:12,830 --> 00:05:18,258
limitations of each of these auditing

132
00:05:15,229 --> 00:05:21,258
mechanisms so we'll talk about<font color="#E5E5E5"> FS events</font>

133
00:05:18,259 --> 00:05:26,900
kadiebug events<font color="#CCCCCC"> D trace and finally</font><font color="#E5E5E5"> open</font>

134
00:05:21,259 --> 00:05:29,780
<font color="#CCCCCC">BSM so first up we have FS events FS</font>

135
00:05:26,900 --> 00:05:32,840
stands for file system now if you're

136
00:05:29,780 --> 00:05:35,900
familiar with<font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> these FS events are</font>

137
00:05:32,840 --> 00:05:39,138
<font color="#E5E5E5">pretty much similar to Linux</font><font color="#CCCCCC"> I notifies</font>

138
00:05:35,900 --> 00:05:41,630
subsystem so as its name implies<font color="#E5E5E5"> FS</font>

139
00:05:39,139 --> 00:05:44,630
events you can use this<font color="#E5E5E5"> auditing</font>

140
00:05:41,630 --> 00:05:47,810
mechanism<font color="#E5E5E5"> to monitor or audit for file</font>

141
00:05:44,630 --> 00:05:48,550
<font color="#E5E5E5">IO events</font><font color="#CCCCCC"> you can do this in three easy</font>

142
00:05:47,810 --> 00:05:51,409
steps

143
00:05:48,550 --> 00:05:54,440
so the first thing you do is connect<font color="#CCCCCC"> to</font>

144
00:05:51,409 --> 00:05:58,490
slash dev<font color="#E5E5E5"> slash FS events this is a</font>

145
00:05:54,440 --> 00:06:01,460
special device file<font color="#CCCCCC"> on Mac OS you then</font>

146
00:05:58,490 --> 00:06:03,590
clone this file descriptor and specify

147
00:06:01,460 --> 00:06:05,870
<font color="#CCCCCC">what events</font><font color="#E5E5E5"> are of interest to you for</font>

148
00:06:03,590 --> 00:06:08,719
example file creations file deletions

149
00:06:05,870 --> 00:06:11,629
etc etc<font color="#E5E5E5"> then what you do is</font><font color="#CCCCCC"> in a while</font>

150
00:06:08,719 --> 00:06:14,389
loop you<font color="#E5E5E5"> just read off this file handle</font>

151
00:06:11,629 --> 00:06:18,139
and the kernel will deliver<font color="#E5E5E5"> file</font><font color="#CCCCCC"> i/o</font>

152
00:06:14,389 --> 00:06:20,330
events to you so let's look briefly in

153
00:06:18,139 --> 00:06:23,779
code how we can implement something<font color="#E5E5E5"> such</font>

154
00:06:20,330 --> 00:06:25,580
as a simple<font color="#E5E5E5"> file monitor so again you</font>

155
00:06:23,779 --> 00:06:28,400
can<font color="#E5E5E5"> see in the code at the very top we</font>

156
00:06:25,580 --> 00:06:31,370
call<font color="#E5E5E5"> open and we open this dev /fs</font>

157
00:06:28,400 --> 00:06:32,150
events device file<font color="#E5E5E5"> we then specify or</font>

158
00:06:31,370 --> 00:06:35,090
tell the colonel

159
00:06:32,150 --> 00:06:37,159
what file<font color="#CCCCCC"> IO events</font><font color="#E5E5E5"> are of interest to</font>

160
00:06:35,090 --> 00:06:39,049
<font color="#CCCCCC">us and since we're writing a file maaan</font>

161
00:06:37,159 --> 00:06:41,810
utility we basically<font color="#E5E5E5"> tell it hey we're</font>

162
00:06:39,050 --> 00:06:44,070
interested<font color="#E5E5E5"> in everything</font><font color="#CCCCCC"> so we set FS e</font>

163
00:06:41,810 --> 00:06:46,080
underscore report<font color="#E5E5E5"> to every single</font>

164
00:06:44,070 --> 00:06:48,900
<font color="#CCCCCC">event.we then clone the file descriptor</font>

165
00:06:46,080 --> 00:06:51,690
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then we very bottom we enter a while</font>

166
00:06:48,900 --> 00:06:53,969
loop<font color="#E5E5E5"> just reading forever</font><font color="#CCCCCC"> off this file</font>

167
00:06:51,690 --> 00:06:55,770
handle and again as these file<font color="#CCCCCC"> i/o</font>

168
00:06:53,970 --> 00:06:57,900
events come in the kernel will deliver

169
00:06:55,770 --> 00:06:59,909
them<font color="#E5E5E5"> to user mode via that file and</font>

170
00:06:57,900 --> 00:07:02,729
since we're reading off those file<font color="#E5E5E5"> we</font>

171
00:06:59,910 --> 00:07:04,770
can consume and parse those events<font color="#E5E5E5"> so at</font>

172
00:07:02,730 --> 00:07:07,290
the bottom<font color="#CCCCCC"> for example if</font><font color="#E5E5E5"> I touch a file</font>

173
00:07:04,770 --> 00:07:09,150
and then remove<font color="#CCCCCC"> that file running this</font>

174
00:07:07,290 --> 00:07:11,700
<font color="#E5E5E5">code the file</font><font color="#CCCCCC"> one utility we can see it</font>

175
00:07:09,150 --> 00:07:14,700
detects<font color="#E5E5E5"> the touch event and also the</font>

176
00:07:11,700 --> 00:07:17,130
remove event<font color="#E5E5E5"> so again pretty easy to</font>

177
00:07:14,700 --> 00:07:19,440
write<font color="#CCCCCC"> a</font><font color="#E5E5E5"> fairly</font><font color="#CCCCCC"> fully featured Taman</font>

178
00:07:17,130 --> 00:07:22,350
utility using the<font color="#E5E5E5"> FS events auditing</font>

179
00:07:19,440 --> 00:07:24,360
mechanism the next auditing mechanism<font color="#E5E5E5"> I</font>

180
00:07:22,350 --> 00:07:27,360
want to talk about is the<font color="#CCCCCC"> kadiebug</font>

181
00:07:24,360 --> 00:07:30,930
<font color="#E5E5E5">utility this is a</font><font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> trace</font>

182
00:07:27,360 --> 00:07:32,790
auditing capability now unlike FS events

183
00:07:30,930 --> 00:07:35,250
which are limited<font color="#E5E5E5"> just to file system</font>

184
00:07:32,790 --> 00:07:37,770
events the kadiebug events pretty much

185
00:07:35,250 --> 00:07:40,620
trace all activity on the system<font color="#CCCCCC"> and</font>

186
00:07:37,770 --> 00:07:43,169
<font color="#CCCCCC">Apple actually</font><font color="#E5E5E5"> uses kadiebug events in a</font>

187
00:07:40,620 --> 00:07:44,970
<font color="#CCCCCC">variety of their own tools so they have</font>

188
00:07:43,170 --> 00:07:47,610
a latency tool they<font color="#CCCCCC"> have another</font><font color="#E5E5E5"> tool</font>

189
00:07:44,970 --> 00:07:50,070
<font color="#CCCCCC">called SC underscore usage which shows</font>

190
00:07:47,610 --> 00:07:52,530
system calls<font color="#E5E5E5"> and then they actually have</font>

191
00:07:50,070 --> 00:07:55,349
a file<font color="#CCCCCC"> mod utility called</font><font color="#E5E5E5"> FS underscore</font>

192
00:07:52,530 --> 00:07:57,599
usage that's built into Mac OS now it's

193
00:07:55,350 --> 00:07:59,970
interesting that they don't use the FS

194
00:07:57,600 --> 00:08:02,370
events auditing mechanism they instead

195
00:07:59,970 --> 00:08:04,560
decided<font color="#E5E5E5"> to use the</font><font color="#CCCCCC"> K</font><font color="#E5E5E5"> debug and this is</font>

196
00:08:02,370 --> 00:08:08,130
because the<font color="#CCCCCC"> Canadian</font><font color="#E5E5E5"> ism is so much more</font>

197
00:08:04,560 --> 00:08:10,740
<font color="#CCCCCC">powerful so what happens is</font><font color="#E5E5E5"> kadiebug</font>

198
00:08:08,130 --> 00:08:13,320
events are generated when code in the

199
00:08:10,740 --> 00:08:16,050
kernel calls a<font color="#E5E5E5"> macro such as kernel</font>

200
00:08:13,320 --> 00:08:17,940
underscore debug underscore constant so

201
00:08:16,050 --> 00:08:20,070
on the<font color="#E5E5E5"> slide for</font><font color="#CCCCCC"> example we can see the</font>

202
00:08:17,940 --> 00:08:22,620
<font color="#E5E5E5">SIS call handler this is the interface</font>

203
00:08:20,070 --> 00:08:25,200
<font color="#E5E5E5">in the kernel where user mode code that</font>

204
00:08:22,620 --> 00:08:27,780
is making<font color="#E5E5E5"> system calls will go</font><font color="#CCCCCC"> through</font>

205
00:08:25,200 --> 00:08:29,729
and enter<font color="#E5E5E5"> the kernel and we can see in</font>

206
00:08:27,780 --> 00:08:32,459
the code<font color="#E5E5E5"> there is a call to the kernel</font>

207
00:08:29,730 --> 00:08:35,849
debug constant macro and this will

208
00:08:32,460 --> 00:08:37,710
generate<font color="#CCCCCC"> a kadiebug</font><font color="#E5E5E5"> event so if we're</font>

209
00:08:35,849 --> 00:08:39,990
<font color="#E5E5E5">reading these events and user mode we</font>

210
00:08:37,710 --> 00:08:43,710
will<font color="#E5E5E5"> get an event that</font><font color="#CCCCCC"> assists</font><font color="#E5E5E5"> call has</font>

211
00:08:39,990 --> 00:08:46,260
occurred so programmatically<font color="#E5E5E5"> how does</font>

212
00:08:43,710 --> 00:08:49,110
one subscribe to these kadiebug events

213
00:08:46,260 --> 00:08:50,550
<font color="#E5E5E5">to get these audit notifications so the</font>

214
00:08:49,110 --> 00:08:52,980
first thing we have to<font color="#CCCCCC"> do is we have</font><font color="#E5E5E5"> to</font>

215
00:08:50,550 --> 00:08:55,260
tell the kernel to enable this audit

216
00:08:52,980 --> 00:08:57,210
mechanism and you do that via assist

217
00:08:55,260 --> 00:08:57,960
control<font color="#E5E5E5"> when you pass in the current</font><font color="#CCCCCC"> KD</font>

218
00:08:57,210 --> 00:09:02,100
<font color="#E5E5E5">enable</font>

219
00:08:57,960 --> 00:09:04,710
value and then once it is enabled<font color="#CCCCCC"> you</font>

220
00:09:02,100 --> 00:09:05,550
<font color="#CCCCCC">basically read events by again invoking</font>

221
00:09:04,710 --> 00:09:08,400
<font color="#CCCCCC">sysctl</font>

222
00:09:05,550 --> 00:09:12,900
<font color="#E5E5E5">this time with the Kern underscore</font><font color="#CCCCCC"> KD</font>

223
00:09:08,400 --> 00:09:15,569
read<font color="#CCCCCC"> TR value and this</font><font color="#E5E5E5"> will then we get</font>

224
00:09:12,900 --> 00:09:18,240
deliver to you these kadiebug messages

225
00:09:15,570 --> 00:09:20,910
from<font color="#E5E5E5"> kernel mode to user mode now these</font>

226
00:09:18,240 --> 00:09:23,490
messages are compressed<font color="#E5E5E5"> and encoded as</font>

227
00:09:20,910 --> 00:09:27,120
<font color="#E5E5E5">Jonathan notes but what we can do is we</font>

228
00:09:23,490 --> 00:09:29,310
can consult<font color="#E5E5E5"> the trace dot codes file</font>

229
00:09:27,120 --> 00:09:32,970
which is a file that<font color="#E5E5E5"> is in Mac OS and</font>

230
00:09:29,310 --> 00:09:34,680
<font color="#E5E5E5">this allows us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> decode the events so</font>

231
00:09:32,970 --> 00:09:37,980
again Jonathan<font color="#E5E5E5"> has created an open</font>

232
00:09:34,680 --> 00:09:40,709
source utility called kdv and so this

233
00:09:37,980 --> 00:09:43,230
code for<font color="#CCCCCC"> example is</font><font color="#E5E5E5"> from his utility so</font>

234
00:09:40,710 --> 00:09:45,240
if we compile and run that utility we

235
00:09:43,230 --> 00:09:48,390
can see a<font color="#E5E5E5"> ton of</font><font color="#CCCCCC"> events</font><font color="#E5E5E5"> I mean this is</font>

236
00:09:45,240 --> 00:09:50,010
<font color="#CCCCCC">just</font><font color="#E5E5E5"> gonna you know</font><font color="#CCCCCC"> fulfill the screen</font>

237
00:09:48,390 --> 00:09:52,920
with<font color="#CCCCCC"> all sorts of events so</font><font color="#E5E5E5"> for example</font>

238
00:09:50,010 --> 00:09:57,990
we can see events related<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the CPU</font>

239
00:09:52,920 --> 00:10:01,079
utilization<font color="#CCCCCC"> mock events etc etc next up</font>

240
00:09:57,990 --> 00:10:03,750
we have<font color="#CCCCCC"> d trace DTrace is a</font>

241
00:10:01,080 --> 00:10:06,930
cross-platform<font color="#CCCCCC"> auditing mechanism that</font>

242
00:10:03,750 --> 00:10:10,110
is<font color="#E5E5E5"> also available on Mac OS and until</font>

243
00:10:06,930 --> 00:10:12,930
<font color="#CCCCCC">recently it was</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> de-facto</font><font color="#E5E5E5"> tracing</font>

244
00:10:10,110 --> 00:10:16,140
mechanism so in a nutshell<font color="#CCCCCC"> what you do</font>

245
00:10:12,930 --> 00:10:18,650
is you talk to a<font color="#CCCCCC"> DTrace driver and you</font>

246
00:10:16,140 --> 00:10:21,240
either do<font color="#E5E5E5"> this through an API or through</font>

247
00:10:18,650 --> 00:10:23,579
d'être scripts<font color="#E5E5E5"> which are written in the</font>

248
00:10:21,240 --> 00:10:25,350
<font color="#CCCCCC">deprogramming</font><font color="#E5E5E5"> like library language</font>

249
00:10:23,580 --> 00:10:28,080
which is why it's called<font color="#CCCCCC"> DTrace and</font>

250
00:10:25,350 --> 00:10:30,780
basically you specify to the kernel what

251
00:10:28,080 --> 00:10:32,790
probes or events are of interest to<font color="#E5E5E5"> you</font>

252
00:10:30,780 --> 00:10:35,550
<font color="#E5E5E5">and there's thousands of these probes</font>

253
00:10:32,790 --> 00:10:38,790
<font color="#E5E5E5">that you can turn</font><font color="#CCCCCC"> on there's ones for</font>

254
00:10:35,550 --> 00:10:41,819
you know processes<font color="#CCCCCC"> Mach traps</font><font color="#E5E5E5"> syscall</font>

255
00:10:38,790 --> 00:10:43,949
memory notifications so<font color="#E5E5E5"> on the table we</font>

256
00:10:41,820 --> 00:10:47,130
<font color="#CCCCCC">can see some of</font><font color="#E5E5E5"> the details provide</font><font color="#CCCCCC"> urse</font>

257
00:10:43,950 --> 00:10:49,320
and again<font color="#E5E5E5"> these providers basically you</font>

258
00:10:47,130 --> 00:10:51,480
can<font color="#E5E5E5"> think of them as class the</font>

259
00:10:49,320 --> 00:10:55,200
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> classes which the probes are</font>

260
00:10:51,480 --> 00:10:58,470
kind of associated<font color="#CCCCCC"> with so here's an</font>

261
00:10:55,200 --> 00:11:01,920
example<font color="#E5E5E5"> of using</font><font color="#CCCCCC"> DTrace this is actually</font>

262
00:10:58,470 --> 00:11:04,350
a<font color="#CCCCCC"> dtrace script</font><font color="#E5E5E5"> that ships with mock</font><font color="#CCCCCC"> OS</font>

263
00:11:01,920 --> 00:11:06,270
<font color="#E5E5E5">and it's called exec snoop and what it's</font>

264
00:11:04,350 --> 00:11:09,420
designed to do<font color="#CCCCCC"> is basically allow you</font>

265
00:11:06,270 --> 00:11:10,699
from user mode<font color="#E5E5E5"> to observe process</font>

266
00:11:09,420 --> 00:11:12,439
<font color="#E5E5E5">creation</font>

267
00:11:10,700 --> 00:11:15,470
and<font color="#E5E5E5"> exit so basically it's a process</font>

268
00:11:12,440 --> 00:11:18,740
<font color="#E5E5E5">monitor unfortunately though on recent</font>

269
00:11:15,470 --> 00:11:21,140
versions<font color="#E5E5E5"> of Mac OS</font><font color="#CCCCCC"> DTrace is neutered by</font>

270
00:11:18,740 --> 00:11:23,690
<font color="#E5E5E5">Apple's system integrity protection or</font>

271
00:11:21,140 --> 00:11:25,310
sip<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> Apple says okay DTrace is</font>

272
00:11:23,690 --> 00:11:28,040
awesome<font color="#E5E5E5"> but we think it's a little too</font>

273
00:11:25,310 --> 00:11:30,890
<font color="#CCCCCC">powerful for the</font><font color="#E5E5E5"> everyday user so we are</font>

274
00:11:28,040 --> 00:11:33,079
going<font color="#CCCCCC"> to disable</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> so even though their</font>

275
00:11:30,890 --> 00:11:35,150
OS still ships with these scripts if you

276
00:11:33,080 --> 00:11:36,740
try run these scripts they're gonna fail

277
00:11:35,150 --> 00:11:38,959
<font color="#E5E5E5">it's gonna say</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> system integrity</font>

278
00:11:36,740 --> 00:11:40,910
<font color="#CCCCCC">protection is on you have</font><font color="#E5E5E5"> to turn this</font>

279
00:11:38,960 --> 00:11:42,920
off<font color="#E5E5E5"> if you want this script to execute</font>

280
00:11:40,910 --> 00:11:45,469
and<font color="#CCCCCC"> you can turn system integrity</font>

281
00:11:42,920 --> 00:11:47,990
<font color="#E5E5E5">protection</font><font color="#CCCCCC"> on if you boot reboot</font><font color="#E5E5E5"> into</font>

282
00:11:45,470 --> 00:11:50,270
the<font color="#E5E5E5"> recovery mode and toggle it but</font>

283
00:11:47,990 --> 00:11:51,950
that's gonna work<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example on your</font>

284
00:11:50,270 --> 00:11:54,410
own developer box if you're poking

285
00:11:51,950 --> 00:11:56,990
around<font color="#CCCCCC"> but if you want to utilize DTrace</font>

286
00:11:54,410 --> 00:11:59,900
for example in a security tool that's

287
00:11:56,990 --> 00:12:01,160
not<font color="#CCCCCC"> gonna work for end-users</font><font color="#E5E5E5"> because</font>

288
00:11:59,900 --> 00:12:02,870
they're<font color="#CCCCCC"> obviously</font><font color="#E5E5E5"> gonna have system</font>

289
00:12:01,160 --> 00:12:04,370
integrity<font color="#CCCCCC"> turned</font><font color="#E5E5E5"> on and they're not</font>

290
00:12:02,870 --> 00:12:07,430
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> want to jump through the hoops of</font>

291
00:12:04,370 --> 00:12:09,830
turning it off<font color="#E5E5E5"> so finally we have open</font>

292
00:12:07,430 --> 00:12:12,829
<font color="#CCCCCC">DSM and open DSM as I mentioned is the</font>

293
00:12:09,830 --> 00:12:15,530
<font color="#CCCCCC">de-facto auditing mechanism on modern</font>

294
00:12:12,830 --> 00:12:18,230
versions of<font color="#E5E5E5"> Mac OS interestingly it</font>

295
00:12:15,530 --> 00:12:21,430
originally<font color="#CCCCCC"> was developed on Solaris</font><font color="#E5E5E5"> and</font>

296
00:12:18,230 --> 00:12:23,510
then was ported<font color="#CCCCCC"> to Mac OS by McAfee</font>

297
00:12:21,430 --> 00:12:26,209
<font color="#E5E5E5">Apple apparently had a contract with</font>

298
00:12:23,510 --> 00:12:28,880
McAfee to do that<font color="#E5E5E5"> and on the slide we</font>

299
00:12:26,210 --> 00:12:32,630
<font color="#CCCCCC">can see kind</font><font color="#E5E5E5"> of a conceptual overview of</font>

300
00:12:28,880 --> 00:12:33,890
how<font color="#E5E5E5"> open</font><font color="#CCCCCC"> bsm auditing works</font><font color="#E5E5E5"> so in the</font>

301
00:12:32,630 --> 00:12:35,960
kernel there's going to be some

302
00:12:33,890 --> 00:12:38,240
auditable event for example<font color="#CCCCCC"> a new</font>

303
00:12:35,960 --> 00:12:41,780
process that's created this will get

304
00:12:38,240 --> 00:12:44,240
noted by the open<font color="#CCCCCC"> BSM subsystem it will</font>

305
00:12:41,780 --> 00:12:46,880
then be added to a kernel queue<font color="#E5E5E5"> and then</font>

306
00:12:44,240 --> 00:12:50,300
committed to user mode<font color="#E5E5E5"> either by writing</font>

307
00:12:46,880 --> 00:12:54,080
<font color="#E5E5E5">to the open</font><font color="#CCCCCC"> BSM audit</font><font color="#E5E5E5"> a log file or to</font>

308
00:12:50,300 --> 00:12:57,050
the user mode audit pipe so let's take a

309
00:12:54,080 --> 00:12:58,790
closer look<font color="#E5E5E5"> at this briefly again</font><font color="#CCCCCC"> we</font>

310
00:12:57,050 --> 00:13:01,099
have the<font color="#E5E5E5"> cisco interface that we talked</font>

311
00:12:58,790 --> 00:13:04,189
about before<font color="#E5E5E5"> and in this there's also</font>

312
00:13:01,100 --> 00:13:06,440
some code to<font color="#CCCCCC"> generate</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> BSM auditing</font>

313
00:13:04,190 --> 00:13:08,450
events so<font color="#E5E5E5"> for example we can see there's</font>

314
00:13:06,440 --> 00:13:10,490
a call to<font color="#E5E5E5"> audit underscore</font><font color="#CCCCCC"> sis call</font>

315
00:13:08,450 --> 00:13:12,290
<font color="#E5E5E5">enter and then after the sis call has</font>

316
00:13:10,490 --> 00:13:14,570
occurred<font color="#E5E5E5"> there's a call</font><font color="#CCCCCC"> to audit</font>

317
00:13:12,290 --> 00:13:17,480
underscore sis call underscore exit

318
00:13:14,570 --> 00:13:20,560
<font color="#E5E5E5">again these are open</font><font color="#CCCCCC"> B</font><font color="#E5E5E5"> SM macros in the</font>

319
00:13:17,480 --> 00:13:22,880
kernel<font color="#E5E5E5"> that will generate audit events</font>

320
00:13:20,560 --> 00:13:24,569
so Jonathan's book kind<font color="#E5E5E5"> of goes into the</font>

321
00:13:22,880 --> 00:13:26,689
<font color="#E5E5E5">technical</font><font color="#CCCCCC"> details</font><font color="#E5E5E5"> of all of</font><font color="#CCCCCC"> this</font>

322
00:13:24,570 --> 00:13:29,880
but<font color="#CCCCCC"> basically what these macros do is</font>

323
00:13:26,690 --> 00:13:31,710
they generate<font color="#E5E5E5"> audit events and then</font>

324
00:13:29,880 --> 00:13:34,410
propagate<font color="#E5E5E5"> that out to user mode either</font>

325
00:13:31,710 --> 00:13:38,370
by<font color="#E5E5E5"> writing to</font><font color="#CCCCCC"> the log file or to the</font>

326
00:13:34,410 --> 00:13:40,560
audit<font color="#CCCCCC"> type so one of the cool things</font>

327
00:13:38,370 --> 00:13:42,960
about open<font color="#CCCCCC"> BSM is you can configure</font>

328
00:13:40,560 --> 00:13:44,819
configure it with<font color="#CCCCCC"> a variety of files</font><font color="#E5E5E5"> and</font>

329
00:13:42,960 --> 00:13:46,950
<font color="#E5E5E5">what the</font><font color="#CCCCCC"> configuration files allow you</font>

330
00:13:44,820 --> 00:13:49,470
to do is specify to the kernel what

331
00:13:46,950 --> 00:13:51,090
events<font color="#E5E5E5"> are of interest to you so</font>

332
00:13:49,470 --> 00:13:53,970
interestingly this<font color="#E5E5E5"> is actually enabled</font>

333
00:13:51,090 --> 00:13:56,520
by default<font color="#CCCCCC"> on Mac OS and if we look at</font>

334
00:13:53,970 --> 00:13:59,820
<font color="#CCCCCC">for example the audit control file which</font>

335
00:13:56,520 --> 00:14:01,680
is in /xe slash security we can<font color="#E5E5E5"> see</font>

336
00:13:59,820 --> 00:14:03,660
there's these flagged parameters that

337
00:14:01,680 --> 00:14:06,630
<font color="#CCCCCC">have a variety of values</font><font color="#E5E5E5"> specifically</font>

338
00:14:03,660 --> 00:14:09,000
<font color="#CCCCCC">ello</font><font color="#E5E5E5"> and comma</font><font color="#CCCCCC"> AAA</font><font color="#E5E5E5"> we can look at</font>

339
00:14:06,630 --> 00:14:11,189
<font color="#CCCCCC">another file the audit classes</font><font color="#E5E5E5"> to kind</font>

340
00:14:09,000 --> 00:14:14,010
of decode what these are so we<font color="#CCCCCC"> can see</font>

341
00:14:11,190 --> 00:14:17,370
that ello<font color="#E5E5E5"> maps to</font><font color="#CCCCCC"> login logout</font><font color="#E5E5E5"> AAA to</font>

342
00:14:14,010 --> 00:14:19,170
authentication<font color="#E5E5E5"> and authorization so what</font>

343
00:14:17,370 --> 00:14:21,840
<font color="#E5E5E5">this basically means is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> kernel is</font>

344
00:14:19,170 --> 00:14:23,849
going to be auditing login and<font color="#E5E5E5"> logout</font>

345
00:14:21,840 --> 00:14:26,970
events and<font color="#E5E5E5"> also authentication and</font>

346
00:14:23,850 --> 00:14:29,250
authorization events but no other audit

347
00:14:26,970 --> 00:14:31,560
mechanisms audit events are<font color="#E5E5E5"> going to be</font>

348
00:14:29,250 --> 00:14:35,010
recorded unless<font color="#CCCCCC"> you modify these</font><font color="#E5E5E5"> flags</font>

349
00:14:31,560 --> 00:14:36,689
<font color="#E5E5E5">so for example if you want to</font><font color="#CCCCCC"> audit file</font>

350
00:14:35,010 --> 00:14:38,840
events you<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> just go in and</font><font color="#E5E5E5"> edit</font>

351
00:14:36,690 --> 00:14:41,310
these<font color="#E5E5E5"> flags</font>

352
00:14:38,840 --> 00:14:42,210
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right let's briefly talk</font><font color="#CCCCCC"> about the</font>

353
00:14:41,310 --> 00:14:44,609
audit logs

354
00:14:42,210 --> 00:14:46,920
<font color="#CCCCCC">they're basically stored in slash var</font>

355
00:14:44,610 --> 00:14:50,640
slash on it and there are<font color="#E5E5E5"> several files</font>

356
00:14:46,920 --> 00:14:53,069
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> when a file</font><font color="#E5E5E5"> max is hit what</font>

357
00:14:50,640 --> 00:14:55,199
happens is the kernel just creates a new

358
00:14:53,070 --> 00:14:57,690
file<font color="#E5E5E5"> and you can always tell what the</font>

359
00:14:55,200 --> 00:15:00,300
current one<font color="#E5E5E5"> is because it's going to be</font>

360
00:14:57,690 --> 00:15:02,970
symlink to one that ends in<font color="#CCCCCC"> knot</font>

361
00:15:00,300 --> 00:15:06,120
underscore terminated<font color="#E5E5E5"> now if you dump</font>

362
00:15:02,970 --> 00:15:08,580
the data<font color="#E5E5E5"> in these open</font><font color="#CCCCCC"> BSM audit log</font>

363
00:15:06,120 --> 00:15:10,590
files<font color="#E5E5E5"> you'll see that the data is in a</font>

364
00:15:08,580 --> 00:15:13,020
binary<font color="#CCCCCC"> compressed proprietary format</font>

365
00:15:10,590 --> 00:15:16,230
luckily<font color="#E5E5E5"> though there's utilities we can</font>

366
00:15:13,020 --> 00:15:20,069
use such as<font color="#CCCCCC"> Apple's</font><font color="#E5E5E5"> PR audit and this</font>

367
00:15:16,230 --> 00:15:21,990
will decode the<font color="#CCCCCC"> data for</font><font color="#E5E5E5"> that so if I</font>

368
00:15:20,070 --> 00:15:24,240
for example generate a<font color="#CCCCCC"> login event by</font>

369
00:15:21,990 --> 00:15:27,180
<font color="#E5E5E5">executing sudo and then some user and</font>

370
00:15:24,240 --> 00:15:29,580
then when I'm done<font color="#E5E5E5"> type exit to</font>

371
00:15:27,180 --> 00:15:32,520
basically exit<font color="#E5E5E5"> that session</font><font color="#CCCCCC"> if I</font><font color="#E5E5E5"> then go</font>

372
00:15:29,580 --> 00:15:35,130
and<font color="#CCCCCC"> examine the current open B SM audit</font>

373
00:15:32,520 --> 00:15:37,500
log file I can see that both<font color="#E5E5E5"> the user</font>

374
00:15:35,130 --> 00:15:37,930
authentication event and a logout<font color="#E5E5E5"> event</font>

375
00:15:37,500 --> 00:15:41,100
has

376
00:15:37,930 --> 00:15:43,739
<font color="#CCCCCC">being recorded by the operating</font><font color="#E5E5E5"> system</font>

377
00:15:41,100 --> 00:15:47,200
<font color="#E5E5E5">okay so that wraps</font><font color="#CCCCCC"> up our tour</font><font color="#E5E5E5"> of</font>

378
00:15:43,740 --> 00:15:48,730
auditing capabilities of<font color="#CCCCCC"> Mac OS</font><font color="#E5E5E5"> now the</font>

379
00:15:47,200 --> 00:15:51,010
question is<font color="#E5E5E5"> you know what of these</font>

380
00:15:48,730 --> 00:15:53,320
mechanisms<font color="#CCCCCC"> should we use either</font><font color="#E5E5E5"> to</font>

381
00:15:51,010 --> 00:15:56,350
perform continual auditing perhaps for

382
00:15:53,320 --> 00:16:00,190
incident<font color="#E5E5E5"> response or most importantly to</font>

383
00:15:56,350 --> 00:16:02,980
<font color="#E5E5E5">me programmatically in security tools so</font>

384
00:16:00,190 --> 00:16:05,950
<font color="#E5E5E5">FS events is pretty good but the main</font>

385
00:16:02,980 --> 00:16:08,529
limitation is it can only record file<font color="#E5E5E5"> IO</font>

386
00:16:05,950 --> 00:16:10,060
events so that's a pretty<font color="#E5E5E5"> big limitation</font>

387
00:16:08,529 --> 00:16:12,700
<font color="#E5E5E5">if we for example want to monitor</font>

388
00:16:10,060 --> 00:16:16,209
process events or<font color="#CCCCCC"> Network IO events we</font>

389
00:16:12,700 --> 00:16:18,250
can't use the FS events<font color="#E5E5E5"> ApS kadiebug is</font>

390
00:16:16,209 --> 00:16:19,930
really powerful<font color="#CCCCCC"> but there's one</font><font color="#E5E5E5"> main</font>

391
00:16:18,250 --> 00:16:22,510
<font color="#CCCCCC">problem with it and that</font><font color="#E5E5E5"> is there can</font>

392
00:16:19,930 --> 00:16:24,189
only be one consumer at a time<font color="#E5E5E5"> so if you</font>

393
00:16:22,510 --> 00:16:26,709
<font color="#CCCCCC">write a security tool and you're using</font>

394
00:16:24,190 --> 00:16:29,020
<font color="#CCCCCC">the kadiebug</font><font color="#E5E5E5"> auditing mechanism and then</font>

395
00:16:26,709 --> 00:16:31,479
the user for<font color="#E5E5E5"> example wants to use FS</font>

396
00:16:29,020 --> 00:16:34,300
usage which is<font color="#E5E5E5"> Apple's built-in file</font>

397
00:16:31,480 --> 00:16:36,010
monitor<font color="#E5E5E5"> that ships with Mac OS FS usage</font>

398
00:16:34,300 --> 00:16:37,479
won't work anymore<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we'll throw an</font>

399
00:16:36,010 --> 00:16:40,630
error message<font color="#CCCCCC"> saying hey someone's</font>

400
00:16:37,480 --> 00:16:42,760
already using<font color="#CCCCCC"> kata bug kata bug event</font><font color="#E5E5E5"> so</font>

401
00:16:40,630 --> 00:16:46,209
this is<font color="#E5E5E5"> not really</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to</font>

402
00:16:42,760 --> 00:16:49,779
cause users so again it's not<font color="#E5E5E5"> maybe the</font>

403
00:16:46,209 --> 00:16:52,270
ideal mechanism to use<font color="#CCCCCC"> DTrace again is a</font>

404
00:16:49,779 --> 00:16:53,770
great mechanism<font color="#CCCCCC"> but because it's not</font>

405
00:16:52,270 --> 00:16:55,480
compatible<font color="#E5E5E5"> with system integrity</font>

406
00:16:53,770 --> 00:16:58,209
protection<font color="#E5E5E5"> again it doesn't make</font><font color="#CCCCCC"> sense</font>

407
00:16:55,480 --> 00:17:00,400
<font color="#E5E5E5">to put</font><font color="#CCCCCC"> into a security tool that you're</font>

408
00:16:58,209 --> 00:17:02,500
going to<font color="#E5E5E5"> deploy to a lot of machines</font><font color="#CCCCCC"> so</font>

409
00:17:00,400 --> 00:17:04,329
this leaves us with<font color="#E5E5E5"> open</font><font color="#CCCCCC"> BSM which kind</font>

410
00:17:02,500 --> 00:17:05,650
<font color="#E5E5E5">of checks off all</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> boxes</font><font color="#CCCCCC"> it's</font>

411
00:17:04,329 --> 00:17:08,050
compatible with system<font color="#CCCCCC"> integrity</font>

412
00:17:05,650 --> 00:17:10,569
protection<font color="#E5E5E5"> and gives us</font><font color="#CCCCCC"> access to</font><font color="#E5E5E5"> all</font>

413
00:17:08,050 --> 00:17:12,730
the<font color="#E5E5E5"> events of interest</font><font color="#CCCCCC"> it also has a</font>

414
00:17:10,569 --> 00:17:16,750
nice programmatic API<font color="#E5E5E5"> and there can be</font>

415
00:17:12,730 --> 00:17:19,209
multiple consumers so now let's talk

416
00:17:16,750 --> 00:17:23,490
about<font color="#E5E5E5"> how to leverage open</font><font color="#CCCCCC"> BSM</font>

417
00:17:19,209 --> 00:17:26,350
programmatically in<font color="#CCCCCC"> Mac security tools</font>

418
00:17:23,490 --> 00:17:28,750
so one of<font color="#E5E5E5"> my side hobbies is</font><font color="#CCCCCC"> to create</font>

419
00:17:26,349 --> 00:17:30,669
free a lot<font color="#E5E5E5"> of open source Mac security</font>

420
00:17:28,750 --> 00:17:33,960
tools and these tools need<font color="#CCCCCC"> to perform</font>

421
00:17:30,670 --> 00:17:36,640
things like tracking<font color="#E5E5E5"> file</font><font color="#CCCCCC"> a file file</font><font color="#E5E5E5"> IO</font>

422
00:17:33,960 --> 00:17:39,010
<font color="#E5E5E5">monitoring for new</font><font color="#CCCCCC"> process creations and</font>

423
00:17:36,640 --> 00:17:42,010
<font color="#E5E5E5">a lot more you can also imagine perhaps</font>

424
00:17:39,010 --> 00:17:44,290
you want<font color="#E5E5E5"> to create more traditional AV</font>

425
00:17:42,010 --> 00:17:47,629
tools or malware<font color="#E5E5E5"> analysis tools for</font>

426
00:17:44,290 --> 00:17:49,970
<font color="#CCCCCC">example a file aman or a process maan</font>

427
00:17:47,630 --> 00:17:52,370
that you know can use these auditing

428
00:17:49,970 --> 00:17:54,140
mechanisms so I used to use<font color="#CCCCCC"> DTrace</font>

429
00:17:52,370 --> 00:17:55,939
programmatically<font color="#CCCCCC"> but as I</font><font color="#E5E5E5"> mentioned due</font>

430
00:17:54,140 --> 00:17:57,830
to system<font color="#CCCCCC"> integrity protection it's</font>

431
00:17:55,940 --> 00:18:02,120
essentially dead<font color="#CCCCCC"> luckily though we have</font>

432
00:17:57,830 --> 00:18:05,270
open<font color="#CCCCCC"> BSN so programmatically how does</font>

433
00:18:02,120 --> 00:18:08,360
one utilize or make use of<font color="#E5E5E5"> open</font><font color="#CCCCCC"> BSM in</font>

434
00:18:05,270 --> 00:18:10,610
code for<font color="#CCCCCC"> example in monitoring utility</font>

435
00:18:08,360 --> 00:18:12,889
now we'll dive<font color="#CCCCCC"> into each</font><font color="#E5E5E5"> of these steps</font>

436
00:18:10,610 --> 00:18:13,399
<font color="#E5E5E5">but conceptually from a high</font><font color="#CCCCCC"> level it's</font>

437
00:18:12,890 --> 00:18:16,460
pretty easy

438
00:18:13,400 --> 00:18:20,000
first you connect to the user mode<font color="#E5E5E5"> audit</font>

439
00:18:16,460 --> 00:18:21,740
pipe you then specify what audit events

440
00:18:20,000 --> 00:18:24,640
<font color="#E5E5E5">are of interest to you for example you</font>

441
00:18:21,740 --> 00:18:27,020
can say I want file events<font color="#CCCCCC"> and process</font>

442
00:18:24,640 --> 00:18:29,150
notifications<font color="#E5E5E5"> and then you basically</font>

443
00:18:27,020 --> 00:18:31,820
read off<font color="#E5E5E5"> this pipe and the kernel will</font>

444
00:18:29,150 --> 00:18:32,740
deliver to<font color="#E5E5E5"> you audit events so pretty</font>

445
00:18:31,820 --> 00:18:35,780
standard

446
00:18:32,740 --> 00:18:39,920
so<font color="#E5E5E5"> I mentioned step one is to connect to</font>

447
00:18:35,780 --> 00:18:42,649
the user mode open<font color="#CCCCCC"> bsm</font><font color="#E5E5E5"> audit pipe so in</font>

448
00:18:39,920 --> 00:18:44,870
<font color="#E5E5E5">code as</font><font color="#CCCCCC"> root you just call f open</font><font color="#E5E5E5"> on</font>

449
00:18:42,650 --> 00:18:48,230
this pipe and<font color="#E5E5E5"> it's at slash dev slash</font>

450
00:18:44,870 --> 00:18:50,030
<font color="#E5E5E5">audit pipe and then as audit events are</font>

451
00:18:48,230 --> 00:18:53,450
captured they will be<font color="#E5E5E5"> written out</font><font color="#CCCCCC"> to</font>

452
00:18:50,030 --> 00:18:56,600
this pipe from kernel mode so now we've

453
00:18:53,450 --> 00:18:58,490
opened<font color="#E5E5E5"> this pipe we need to specify as I</font>

454
00:18:56,600 --> 00:19:01,340
mentioned what audit events are of

455
00:18:58,490 --> 00:19:04,190
interest to<font color="#CCCCCC"> us</font><font color="#E5E5E5"> so here for example let's</font>

456
00:19:01,340 --> 00:19:06,290
build a simple<font color="#E5E5E5"> process monitor so we're</font>

457
00:19:04,190 --> 00:19:08,809
gonna say<font color="#CCCCCC"> okay we're interested only in</font>

458
00:19:06,290 --> 00:19:11,420
process events<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we can go into the</font>

459
00:19:08,809 --> 00:19:14,030
audit underscore class file and look up

460
00:19:11,420 --> 00:19:16,550
<font color="#CCCCCC">what open BSM audit events relate to</font>

461
00:19:14,030 --> 00:19:18,920
process<font color="#E5E5E5"> creation process events and we</font>

462
00:19:16,550 --> 00:19:21,200
can see there's two<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> pc and exec</font>

463
00:19:18,920 --> 00:19:24,080
so in code what we do is we basically

464
00:19:21,200 --> 00:19:25,610
<font color="#E5E5E5">send an</font><font color="#CCCCCC"> i octal to the kernel saying hey</font>

465
00:19:24,080 --> 00:19:27,439
<font color="#E5E5E5">these are the open</font><font color="#CCCCCC"> BSM</font>

466
00:19:25,610 --> 00:19:31,639
auditing events that are<font color="#E5E5E5"> are of interest</font>

467
00:19:27,440 --> 00:19:33,830
to<font color="#CCCCCC"> us now we've opened</font><font color="#E5E5E5"> the fight pipe</font>

468
00:19:31,640 --> 00:19:36,290
and configured it<font color="#E5E5E5"> we can start reading</font>

469
00:19:33,830 --> 00:19:38,960
off it<font color="#E5E5E5"> and since we've configured it</font>

470
00:19:36,290 --> 00:19:41,000
<font color="#CCCCCC">anytime now there's a process event the</font>

471
00:19:38,960 --> 00:19:44,420
kernel will deliver that<font color="#E5E5E5"> to this pipe</font>

472
00:19:41,000 --> 00:19:46,340
<font color="#CCCCCC">and we can consume off</font><font color="#E5E5E5"> that so if you</font>

473
00:19:44,420 --> 00:19:49,280
look<font color="#E5E5E5"> for the documentation</font><font color="#CCCCCC"> you can see</font>

474
00:19:46,340 --> 00:19:53,090
there is a open<font color="#CCCCCC"> BSM api called</font><font color="#E5E5E5"> au</font>

475
00:19:49,280 --> 00:19:54,530
<font color="#E5E5E5">underscore read rec for record and it</font>

476
00:19:53,090 --> 00:19:57,379
<font color="#CCCCCC">basically takes in the file descriptor</font>

477
00:19:54,530 --> 00:19:57,830
<font color="#E5E5E5">to the audit pipe and a buffer for</font><font color="#CCCCCC"> the</font>

478
00:19:57,380 --> 00:20:00,450
record

479
00:19:57,830 --> 00:20:03,120
now the documentation says it

480
00:20:00,450 --> 00:20:04,890
<font color="#CCCCCC">terns</font><font color="#E5E5E5"> zero on success but that is not</font>

481
00:20:03,120 --> 00:20:07,110
true it<font color="#E5E5E5"> actually returns the number of</font>

482
00:20:04,890 --> 00:20:11,610
<font color="#CCCCCC">bytes it is</font><font color="#E5E5E5"> read so the documentation is</font>

483
00:20:07,110 --> 00:20:13,889
incorrect<font color="#E5E5E5"> so now we have an audit record</font>

484
00:20:11,610 --> 00:20:16,889
that we<font color="#CCCCCC"> have read off the audit pipe and</font>

485
00:20:13,890 --> 00:20:18,870
Apple calls this a token record we have

486
00:20:16,890 --> 00:20:21,540
to parse<font color="#E5E5E5"> this in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> consume it or</font>

487
00:20:18,870 --> 00:20:25,080
utilize it<font color="#E5E5E5"> in our tool so what we do is</font>

488
00:20:21,540 --> 00:20:27,360
we invoke the a you fetch<font color="#CCCCCC"> tok method</font><font color="#E5E5E5"> to</font>

489
00:20:25,080 --> 00:20:29,790
tokenize the audit record and this will

490
00:20:27,360 --> 00:20:32,790
split it into<font color="#E5E5E5"> a variety of tok</font><font color="#CCCCCC"> ster</font>

491
00:20:29,790 --> 00:20:35,159
structures now each<font color="#CCCCCC"> of these structures</font>

492
00:20:32,790 --> 00:20:37,560
<font color="#E5E5E5">contains some important members the</font>

493
00:20:35,160 --> 00:20:40,680
first is the ID or type this allows us

494
00:20:37,560 --> 00:20:43,110
<font color="#CCCCCC">to</font><font color="#E5E5E5"> identify the type</font><font color="#CCCCCC"> of structure it is</font>

495
00:20:40,680 --> 00:20:45,840
and all these structures<font color="#E5E5E5"> are listed in</font>

496
00:20:43,110 --> 00:20:49,590
the<font color="#CCCCCC"> lib be smh file which ships with mac</font>

497
00:20:45,840 --> 00:20:51,300
OS so some notable token types include a

498
00:20:49,590 --> 00:20:53,520
header and a trailer<font color="#E5E5E5"> which obviously</font>

499
00:20:51,300 --> 00:20:55,139
start and end<font color="#E5E5E5"> or record and then</font>

500
00:20:53,520 --> 00:20:57,870
there'll be other token types that

501
00:20:55,140 --> 00:21:00,330
correspond to the event<font color="#E5E5E5"> so for example</font>

502
00:20:57,870 --> 00:21:03,600
for a<font color="#E5E5E5"> process creation event there will</font>

503
00:21:00,330 --> 00:21:05,669
be a record<font color="#E5E5E5"> that corresponds to the path</font>

504
00:21:03,600 --> 00:21:06,899
of the process that<font color="#E5E5E5"> is created</font><font color="#CCCCCC"> there</font>

505
00:21:05,670 --> 00:21:11,580
<font color="#E5E5E5">will be another one</font><font color="#CCCCCC"> for the process</font>

506
00:21:06,900 --> 00:21:13,710
arguments process parents etc etc<font color="#CCCCCC"> so</font>

507
00:21:11,580 --> 00:21:16,649
what we do is to process<font color="#CCCCCC"> these tokens</font><font color="#E5E5E5"> we</font>

508
00:21:13,710 --> 00:21:18,360
just switch on the token type again to

509
00:21:16,650 --> 00:21:21,660
<font color="#E5E5E5">determine the type</font><font color="#CCCCCC"> of token</font><font color="#E5E5E5"> that we have</font>

510
00:21:18,360 --> 00:21:23,520
and then<font color="#E5E5E5"> we have tokens specific</font><font color="#CCCCCC"> logic</font>

511
00:21:21,660 --> 00:21:24,930
to pull out the<font color="#CCCCCC"> information</font><font color="#E5E5E5"> that's of</font>

512
00:21:23,520 --> 00:21:27,150
<font color="#CCCCCC">interest so for</font><font color="#E5E5E5"> example I mentioned</font>

513
00:21:24,930 --> 00:21:28,980
<font color="#E5E5E5">there's going to be a path</font><font color="#CCCCCC"> so what we</font>

514
00:21:27,150 --> 00:21:31,650
can<font color="#E5E5E5"> do is when we see the token that's</font>

515
00:21:28,980 --> 00:21:33,780
associated<font color="#E5E5E5"> with the path we</font><font color="#CCCCCC"> can record</font>

516
00:21:31,650 --> 00:21:36,240
<font color="#E5E5E5">this path for</font><font color="#CCCCCC"> example convert it into an</font>

517
00:21:33,780 --> 00:21:39,899
<font color="#CCCCCC">nsstring object and then consume that in</font>

518
00:21:36,240 --> 00:21:42,360
our tool so if we put this<font color="#E5E5E5"> all together</font>

519
00:21:39,900 --> 00:21:44,400
we<font color="#CCCCCC"> now have a nice process monitoring</font>

520
00:21:42,360 --> 00:21:46,889
library<font color="#E5E5E5"> this</font><font color="#CCCCCC"> library</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> open source</font>

521
00:21:44,400 --> 00:21:49,410
<font color="#E5E5E5">available on github</font><font color="#CCCCCC"> and it's called proc</font>

522
00:21:46,890 --> 00:21:51,870
info<font color="#E5E5E5"> the cool thing about it is it's</font>

523
00:21:49,410 --> 00:21:54,240
very easy<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> you basically link</font><font color="#E5E5E5"> in</font>

524
00:21:51,870 --> 00:21:57,479
the library<font color="#E5E5E5"> and then what you do is you</font>

525
00:21:54,240 --> 00:21:59,610
create<font color="#E5E5E5"> a block of code</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> want the</font>

526
00:21:57,480 --> 00:22:01,800
<font color="#E5E5E5">library to invoke</font><font color="#CCCCCC"> anytime there's either</font>

527
00:21:59,610 --> 00:22:04,020
a process creation<font color="#E5E5E5"> or process</font>

528
00:22:01,800 --> 00:22:07,080
termination<font color="#E5E5E5"> event and then you basically</font>

529
00:22:04,020 --> 00:22:09,840
allocate a process monitor object and

530
00:22:07,080 --> 00:22:12,120
then invoke the start method<font color="#CCCCCC"> passing in</font>

531
00:22:09,840 --> 00:22:12,899
the block<font color="#E5E5E5"> the library takes care of</font>

532
00:22:12,120 --> 00:22:14,310
<font color="#E5E5E5">everything else</font>

533
00:22:12,900 --> 00:22:16,980
all the auditing

534
00:22:14,310 --> 00:22:19,110
figuration<font color="#CCCCCC"> the tracking of process</font>

535
00:22:16,980 --> 00:22:21,720
events parsing all the<font color="#E5E5E5"> tokens etc etc</font>

536
00:22:19,110 --> 00:22:24,840
and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> it'll invoke this block of code</font>

537
00:22:21,720 --> 00:22:25,890
<font color="#CCCCCC">whenever there's a process event and it</font>

538
00:22:24,840 --> 00:22:28,199
also does<font color="#E5E5E5"> other cool things like</font>

539
00:22:25,890 --> 00:22:30,660
generate the signing information of the

540
00:22:28,200 --> 00:22:34,650
process that's<font color="#E5E5E5"> being</font><font color="#CCCCCC"> created extracts</font>

541
00:22:30,660 --> 00:22:37,080
the ancestors etc etc<font color="#E5E5E5"> so very easily now</font>

542
00:22:34,650 --> 00:22:39,510
<font color="#E5E5E5">whenever a</font><font color="#CCCCCC"> new process is created you</font>

543
00:22:37,080 --> 00:22:41,159
<font color="#E5E5E5">can see who created it and also the</font>

544
00:22:39,510 --> 00:22:43,800
signing information so you<font color="#E5E5E5"> can say oh</font>

545
00:22:41,160 --> 00:22:46,110
this is<font color="#CCCCCC"> a trusted apple process</font><font color="#E5E5E5"> this is</font>

546
00:22:43,800 --> 00:22:50,129
<font color="#E5E5E5">something from the Mac</font><font color="#CCCCCC"> App Store</font><font color="#E5E5E5"> or this</font>

547
00:22:46,110 --> 00:22:52,469
is unsigned<font color="#CCCCCC"> that's odd</font><font color="#E5E5E5"> okay so that was</font>

548
00:22:50,130 --> 00:22:55,110
<font color="#CCCCCC">an overview of</font><font color="#E5E5E5"> auditing mechanisms and</font>

549
00:22:52,470 --> 00:22:57,810
<font color="#E5E5E5">how</font><font color="#CCCCCC"> to utilize open BSM programmatically</font>

550
00:22:55,110 --> 00:23:00,449
in security tools<font color="#E5E5E5"> now since this is kind</font>

551
00:22:57,810 --> 00:23:03,480
of a technical<font color="#E5E5E5"> hacker conference let's</font>

552
00:23:00,450 --> 00:23:05,400
now talk about<font color="#CCCCCC"> some more interesting at</font>

553
00:23:03,480 --> 00:23:07,650
<font color="#CCCCCC">least</font><font color="#E5E5E5"> to me topics so time to put on</font><font color="#CCCCCC"> our</font>

554
00:23:05,400 --> 00:23:08,820
hacker hats either gray white or<font color="#E5E5E5"> black</font>

555
00:23:07,650 --> 00:23:11,160
you know we're not<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> discriminate</font>

556
00:23:08,820 --> 00:23:14,909
here<font color="#E5E5E5"> and we'll talk about some kernel</font>

557
00:23:11,160 --> 00:23:18,330
bugs that existed in<font color="#E5E5E5"> Apple's</font><font color="#CCCCCC"> open BSM</font>

558
00:23:14,910 --> 00:23:20,280
kernel mode code so the first bug we're

559
00:23:18,330 --> 00:23:21,960
gonna talk<font color="#CCCCCC"> about is a kernel panic and I</font>

560
00:23:20,280 --> 00:23:24,060
kind of<font color="#E5E5E5"> like this bug because I found it</font>

561
00:23:21,960 --> 00:23:26,160
totally by<font color="#CCCCCC"> accident</font><font color="#E5E5E5"> and I always kind</font><font color="#CCCCCC"> of</font>

562
00:23:24,060 --> 00:23:29,340
<font color="#E5E5E5">have this joke that</font><font color="#CCCCCC"> like finding bugs on</font>

563
00:23:26,160 --> 00:23:31,350
<font color="#E5E5E5">Mac OS is so easy that like if you're</font>

564
00:23:29,340 --> 00:23:33,360
writing security tools or just<font color="#CCCCCC"> Splunk</font>

565
00:23:31,350 --> 00:23:34,679
around like you're gonna inadvertently

566
00:23:33,360 --> 00:23:38,520
come across a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> really interesting</font>

567
00:23:34,680 --> 00:23:40,560
bugs so I had this<font color="#CCCCCC"> process info library</font>

568
00:23:38,520 --> 00:23:42,840
I'd written<font color="#E5E5E5"> again it utilized the open</font>

569
00:23:40,560 --> 00:23:45,720
<font color="#CCCCCC">BSM auditing subsystem to generate</font>

570
00:23:42,840 --> 00:23:47,850
process events again I mentioned<font color="#E5E5E5"> that I</font>

571
00:23:45,720 --> 00:23:49,890
have a variety<font color="#E5E5E5"> of security tools for</font>

572
00:23:47,850 --> 00:23:52,679
<font color="#CCCCCC">example one that generically detects</font>

573
00:23:49,890 --> 00:23:55,140
ransomware<font color="#E5E5E5"> and one of the capabilities</font>

574
00:23:52,680 --> 00:23:58,470
of<font color="#E5E5E5"> this tool is it needs to track</font>

575
00:23:55,140 --> 00:24:00,900
processes<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> when a</font><font color="#E5E5E5"> certain process</font>

576
00:23:58,470 --> 00:24:03,000
<font color="#E5E5E5">create creates files it knows you know</font>

577
00:24:00,900 --> 00:24:06,320
what process that is<font color="#E5E5E5"> who spawned it etc</font>

578
00:24:03,000 --> 00:24:10,260
etc<font color="#E5E5E5"> to basically classify that process</font>

579
00:24:06,320 --> 00:24:12,899
so I swapped in my proc info open<font color="#CCCCCC"> DSM</font>

580
00:24:10,260 --> 00:24:15,210
auditing process<font color="#E5E5E5"> monitoring library ran</font>

581
00:24:12,900 --> 00:24:17,190
the tool went off to lunch and a<font color="#E5E5E5"> few</font>

582
00:24:15,210 --> 00:24:19,170
hours later<font color="#E5E5E5"> came back</font><font color="#CCCCCC"> and my box had</font>

583
00:24:17,190 --> 00:24:20,940
panicked<font color="#CCCCCC"> I was like okay</font><font color="#E5E5E5"> it's kind of</font>

584
00:24:19,170 --> 00:24:24,090
annoying<font color="#E5E5E5"> like maybe there's some faulty</font>

585
00:24:20,940 --> 00:24:26,550
<font color="#E5E5E5">hardware but started the tool again and</font>

586
00:24:24,090 --> 00:24:27,360
came<font color="#CCCCCC"> back</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> next morning</font><font color="#E5E5E5"> again my box</font>

587
00:24:26,550 --> 00:24:29,129
had panicked

588
00:24:27,360 --> 00:24:30,719
and again first I was a little<font color="#CCCCCC"> annoyed</font>

589
00:24:29,130 --> 00:24:33,210
but I said<font color="#E5E5E5"> oh hey now we have a</font>

590
00:24:30,720 --> 00:24:35,460
repeatable<font color="#CCCCCC"> Colonel panic on the most</font>

591
00:24:33,210 --> 00:24:39,450
recent version of Mac OS like that's

592
00:24:35,460 --> 00:24:41,790
kind of cool so<font color="#CCCCCC"> let's do now is walk</font>

593
00:24:39,450 --> 00:24:45,330
<font color="#CCCCCC">through that</font><font color="#E5E5E5"> kernel panic to find out</font>

594
00:24:41,790 --> 00:24:46,139
the underlying<font color="#E5E5E5"> cause of the bug so the</font>

595
00:24:45,330 --> 00:24:47,730
first thing we're gonna<font color="#E5E5E5"> do is</font><font color="#CCCCCC"> we're</font>

596
00:24:46,140 --> 00:24:49,650
gonna<font color="#E5E5E5"> start with the kernel panic report</font>

597
00:24:47,730 --> 00:24:51,540
<font color="#E5E5E5">and kernel panic reports are great</font>

598
00:24:49,650 --> 00:24:53,490
<font color="#E5E5E5">because as we'll see they have all</font><font color="#CCCCCC"> the</font>

599
00:24:51,540 --> 00:24:55,379
<font color="#CCCCCC">information that</font><font color="#E5E5E5"> you need</font><font color="#CCCCCC"> generally</font>

600
00:24:53,490 --> 00:24:59,430
<font color="#CCCCCC">speaking to track</font><font color="#E5E5E5"> down the underlying</font>

601
00:24:55,380 --> 00:25:00,990
cause of the bug so if we look at<font color="#E5E5E5"> this</font>

602
00:24:59,430 --> 00:25:04,080
there's a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> but I've</font>

603
00:25:00,990 --> 00:25:07,470
highlighted in green kind<font color="#E5E5E5"> of the pieces</font>

604
00:25:04,080 --> 00:25:09,540
<font color="#CCCCCC">of information that</font><font color="#E5E5E5"> are valuable to</font><font color="#CCCCCC"> us</font>

605
00:25:07,470 --> 00:25:12,120
<font color="#E5E5E5">so first we see there's something</font><font color="#CCCCCC"> that</font>

606
00:25:09,540 --> 00:25:14,010
says type 14 equals page fault<font color="#E5E5E5"> this</font>

607
00:25:12,120 --> 00:25:15,689
indicates why the kernel panic<font color="#E5E5E5"> it's</font>

608
00:25:14,010 --> 00:25:17,790
basically<font color="#E5E5E5"> said there's a page fault</font>

609
00:25:15,690 --> 00:25:21,450
which means there was an invalid<font color="#E5E5E5"> read or</font>

610
00:25:17,790 --> 00:25:23,670
write likely<font color="#E5E5E5"> to an unmapped page next we</font>

611
00:25:21,450 --> 00:25:25,710
have our<font color="#E5E5E5"> IP which is the 64 bit</font>

612
00:25:23,670 --> 00:25:28,260
instruction<font color="#E5E5E5"> pointer and this has the</font>

613
00:25:25,710 --> 00:25:30,630
<font color="#CCCCCC">address of the faulting instruction</font><font color="#E5E5E5"> so</font>

614
00:25:28,260 --> 00:25:33,750
this is the line of<font color="#E5E5E5"> code or the address</font>

615
00:25:30,630 --> 00:25:37,320
<font color="#E5E5E5">of the opcodes that were being executed</font>

616
00:25:33,750 --> 00:25:40,650
<font color="#E5E5E5">when the kernel panic occurred finally</font>

617
00:25:37,320 --> 00:25:42,600
we have fault<font color="#E5E5E5"> CR</font><font color="#CCCCCC"> 2 this has the actual</font>

618
00:25:40,650 --> 00:25:44,490
address<font color="#E5E5E5"> that the kernel was trying to</font>

619
00:25:42,600 --> 00:25:46,439
reference<font color="#E5E5E5"> that triggered the page fault</font>

620
00:25:44,490 --> 00:25:48,480
<font color="#CCCCCC">and then the very bottom</font><font color="#E5E5E5"> we have the</font>

621
00:25:46,440 --> 00:25:50,490
<font color="#E5E5E5">kernel slide which is just the amount in</font>

622
00:25:48,480 --> 00:25:54,330
memory the kernel was slid<font color="#CCCCCC"> due to</font>

623
00:25:50,490 --> 00:25:55,440
address space<font color="#CCCCCC"> layout randomization so as</font>

624
00:25:54,330 --> 00:25:58,770
I mentioned the goal<font color="#CCCCCC"> is</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure</font><font color="#E5E5E5"> out</font>

625
00:25:55,440 --> 00:26:00,900
why this<font color="#E5E5E5"> panic occurred so since we have</font>

626
00:25:58,770 --> 00:26:03,150
<font color="#E5E5E5">the address</font><font color="#CCCCCC"> of the faulting instruction</font>

627
00:26:00,900 --> 00:26:05,100
from the kernel panic report what we can

628
00:26:03,150 --> 00:26:08,580
do is we can<font color="#E5E5E5"> disassemble the kernel and</font>

629
00:26:05,100 --> 00:26:11,159
<font color="#E5E5E5">go to that address in the disassembly so</font>

630
00:26:08,580 --> 00:26:12,570
we load<font color="#CCCCCC"> up the kernel in</font><font color="#E5E5E5"> Ida Pro and the</font>

631
00:26:11,160 --> 00:26:14,700
first thing we have to<font color="#CCCCCC"> do is we have to</font>

632
00:26:12,570 --> 00:26:17,100
rebase the file image<font color="#E5E5E5"> so that it Maps</font>

633
00:26:14,700 --> 00:26:19,260
the<font color="#E5E5E5"> in memory memory image because again</font>

634
00:26:17,100 --> 00:26:24,560
when the kernel is loaded it gets slid

635
00:26:19,260 --> 00:26:27,900
in memory<font color="#E5E5E5"> because of kaal arm so once we</font>

636
00:26:24,560 --> 00:26:30,330
rebase<font color="#E5E5E5"> the kernel we have the</font><font color="#CCCCCC"> address</font>

637
00:26:27,900 --> 00:26:34,050
from our IP in<font color="#CCCCCC"> the kernel panic report</font>

638
00:26:30,330 --> 00:26:37,710
<font color="#E5E5E5">we put that in the jump to address pop</font>

639
00:26:34,050 --> 00:26:38,918
up in Ida<font color="#CCCCCC"> and we hit</font><font color="#E5E5E5"> G and what we do is</font>

640
00:26:37,710 --> 00:26:41,590
we land

641
00:26:38,919 --> 00:26:45,809
a compare instruction in the audit<font color="#CCCCCC"> argh</font>

642
00:26:41,590 --> 00:26:49,059
<font color="#CCCCCC">sock adder</font><font color="#E5E5E5"> function this is an open</font><font color="#CCCCCC"> BSM</font>

643
00:26:45,809 --> 00:26:52,210
audit function<font color="#E5E5E5"> which makes sense because</font>

644
00:26:49,059 --> 00:26:54,580
again my utility<font color="#E5E5E5"> user mode utility that</font>

645
00:26:52,210 --> 00:26:57,129
triggered the kernel panic was<font color="#CCCCCC"> utilizing</font>

646
00:26:54,580 --> 00:27:00,249
the open<font color="#CCCCCC"> BSM auditing</font><font color="#E5E5E5"> so basically this</font>

647
00:26:57,129 --> 00:27:03,399
now indicates that in user<font color="#CCCCCC"> mode if you</font>

648
00:27:00,249 --> 00:27:05,379
<font color="#CCCCCC">were talking to</font><font color="#E5E5E5"> the api's there was some</font>

649
00:27:03,399 --> 00:27:07,149
bug<font color="#CCCCCC"> in the kernel that</font><font color="#E5E5E5"> would trigger and</font>

650
00:27:05,379 --> 00:27:08,709
crash the box<font color="#E5E5E5"> and we can see it's a</font>

651
00:27:07,149 --> 00:27:12,518
compare instruction that's doing a

652
00:27:08,710 --> 00:27:15,509
compare of<font color="#CCCCCC"> our bx + r</font><font color="#E5E5E5"> 13 + 2 and it's</font>

653
00:27:12,519 --> 00:27:18,970
<font color="#E5E5E5">basically checking if that address is</font><font color="#CCCCCC"> 0</font>

654
00:27:15,509 --> 00:27:20,889
now<font color="#E5E5E5"> luckily the audit</font><font color="#CCCCCC"> Arg</font><font color="#E5E5E5"> sock adder</font>

655
00:27:18,970 --> 00:27:24,279
function which we'll<font color="#CCCCCC"> be talking about a</font>

656
00:27:20,889 --> 00:27:26,320
lot is open source<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we can browse to</font>

657
00:27:24,279 --> 00:27:29,350
open<font color="#CCCCCC"> source Apple comm and look at the</font>

658
00:27:26,320 --> 00:27:32,259
source code<font color="#E5E5E5"> for us so the goal is to</font>

659
00:27:29,350 --> 00:27:34,570
<font color="#E5E5E5">figure out what line in this source code</font>

660
00:27:32,259 --> 00:27:36,009
maps to the compare instruction again

661
00:27:34,570 --> 00:27:38,649
<font color="#CCCCCC">the compare instruction we got from</font>

662
00:27:36,009 --> 00:27:40,419
disassembling the kernel<font color="#E5E5E5"> so</font><font color="#CCCCCC"> if we look</font>

663
00:27:38,649 --> 00:27:43,479
at<font color="#E5E5E5"> the kernel code we can see that when</font>

664
00:27:40,419 --> 00:27:46,960
bind is called on a<font color="#E5E5E5"> socket it invokes</font>

665
00:27:43,480 --> 00:27:49,119
the<font color="#CCCCCC"> argh</font><font color="#E5E5E5"> audit</font><font color="#CCCCCC"> argh macro to audit the</font>

666
00:27:46,960 --> 00:27:50,739
socket event basically<font color="#E5E5E5"> says</font><font color="#CCCCCC"> okay binding</font>

667
00:27:49,119 --> 00:27:52,509
a socket<font color="#E5E5E5"> is an event that might have</font>

668
00:27:50,739 --> 00:27:56,230
security implications so I'm going to

669
00:27:52,509 --> 00:27:57,399
audit this event so in turn it calls

670
00:27:56,230 --> 00:27:59,409
this audit<font color="#E5E5E5"> argh</font>

671
00:27:57,399 --> 00:28:02,320
sock adder function which among other

672
00:27:59,409 --> 00:28:05,679
<font color="#E5E5E5">things determines what the type of</font>

673
00:28:02,320 --> 00:28:08,320
<font color="#E5E5E5">socket is creating so we can see there's</font>

674
00:28:05,679 --> 00:28:10,629
a case<font color="#CCCCCC"> for unix sockets AF underscore</font>

675
00:28:08,320 --> 00:28:12,908
<font color="#CCCCCC">unix</font><font color="#E5E5E5"> and what we can see is at the</font>

676
00:28:10,629 --> 00:28:15,399
bottom of the slide<font color="#CCCCCC"> there is</font><font color="#E5E5E5"> some code</font>

677
00:28:12,909 --> 00:28:18,279
that's<font color="#E5E5E5"> checking to make sure that the</font>

678
00:28:15,399 --> 00:28:21,428
path of<font color="#E5E5E5"> the UNIX socket is null</font>

679
00:28:18,279 --> 00:28:22,989
terminated so if we look at the source

680
00:28:21,429 --> 00:28:25,749
code we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see that</font><font color="#E5E5E5"> this basically maps</font>

681
00:28:22,989 --> 00:28:27,159
to our compare instruction so the

682
00:28:25,749 --> 00:28:29,169
question is<font color="#E5E5E5"> you know what are these</font>

683
00:28:27,159 --> 00:28:30,909
register values and more importantly why

684
00:28:29,169 --> 00:28:34,840
does this comparison<font color="#E5E5E5"> cause a kernel</font>

685
00:28:30,909 --> 00:28:37,419
<font color="#CCCCCC">panic so if we look closer at the audit</font>

686
00:28:34,840 --> 00:28:40,480
<font color="#CCCCCC">argh</font><font color="#E5E5E5"> sock adder function we can see it</font>

687
00:28:37,419 --> 00:28:43,720
locally declares a sock adder<font color="#E5E5E5"> UNIX</font>

688
00:28:40,480 --> 00:28:45,460
structure for a<font color="#E5E5E5"> UNIX socket and if we</font>

689
00:28:43,720 --> 00:28:48,970
look at the<font color="#CCCCCC"> definition of this structure</font>

690
00:28:45,460 --> 00:28:52,250
<font color="#CCCCCC">it's in the U n dot H file</font><font color="#E5E5E5"> we can see</font>

691
00:28:48,970 --> 00:28:54,720
that there's a length a family and then

692
00:28:52,250 --> 00:28:57,510
so if we go back<font color="#CCCCCC"> to the code for</font><font color="#E5E5E5"> these</font>

693
00:28:54,720 --> 00:29:01,080
UNIX socket<font color="#E5E5E5"> we can see that it basically</font>

694
00:28:57,510 --> 00:29:03,870
<font color="#E5E5E5">assigns a pass in</font><font color="#CCCCCC"> passed in sock adder</font>

695
00:29:01,080 --> 00:29:05,870
structure to the UNIX<font color="#E5E5E5"> sock addict</font>

696
00:29:03,870 --> 00:29:08,040
structure and then calculates<font color="#E5E5E5"> a length</font>

697
00:29:05,870 --> 00:29:10,080
now if we go back<font color="#CCCCCC"> to the compare</font>

698
00:29:08,040 --> 00:29:12,659
instruction we can now understand the

699
00:29:10,080 --> 00:29:15,240
values of each of<font color="#CCCCCC"> these arguments so for</font>

700
00:29:12,660 --> 00:29:17,760
<font color="#E5E5E5">example the</font><font color="#CCCCCC"> RBX register at the</font><font color="#E5E5E5"> time of</font>

701
00:29:15,240 --> 00:29:21,390
the crash is a pointer to the UNIX sock

702
00:29:17,760 --> 00:29:24,030
adder structure<font color="#CCCCCC"> r-13 is</font><font color="#E5E5E5"> the length minus</font>

703
00:29:21,390 --> 00:29:26,730
<font color="#CCCCCC">two and</font><font color="#E5E5E5"> then there's a plus 2 because</font>

704
00:29:24,030 --> 00:29:30,720
<font color="#E5E5E5">the offset of</font><font color="#CCCCCC"> the path starts at plus 2</font>

705
00:29:26,730 --> 00:29:32,790
<font color="#E5E5E5">within the socket structure so since the</font>

706
00:29:30,720 --> 00:29:34,920
kernel panic report contains all the

707
00:29:32,790 --> 00:29:38,030
register values at the time of the crash

708
00:29:34,920 --> 00:29:40,800
we can basically plug in the values and

709
00:29:38,030 --> 00:29:42,450
<font color="#E5E5E5">basically recompute</font><font color="#CCCCCC"> the address it was</font>

710
00:29:40,800 --> 00:29:44,040
doing the compare instruction so we

711
00:29:42,450 --> 00:29:48,300
<font color="#CCCCCC">basically go to the crash report pull</font>

712
00:29:44,040 --> 00:29:50,190
out our<font color="#E5E5E5"> BX</font><font color="#CCCCCC"> our 13 and add 2 and what</font><font color="#E5E5E5"> we</font>

713
00:29:48,300 --> 00:29:54,690
do is when we<font color="#E5E5E5"> compute that address we</font>

714
00:29:50,190 --> 00:29:57,210
get<font color="#CCCCCC"> something</font><font color="#E5E5E5"> that ends in</font><font color="#CCCCCC"> 4 F</font><font color="#E5E5E5"> 0 0 0 and</font>

715
00:29:54,690 --> 00:29:59,880
<font color="#CCCCCC">two observations about that first that</font>

716
00:29:57,210 --> 00:30:01,770
matches the<font color="#E5E5E5"> fault CR</font><font color="#CCCCCC"> to address which</font>

717
00:29:59,880 --> 00:30:04,140
indicates yes this was the<font color="#CCCCCC"> address that</font>

718
00:30:01,770 --> 00:30:06,990
<font color="#CCCCCC">caused the kernel to panic and also</font>

719
00:30:04,140 --> 00:30:10,890
since<font color="#E5E5E5"> it ends in 0 0 0 this indicates</font>

720
00:30:06,990 --> 00:30:12,990
<font color="#E5E5E5">it's at the very</font><font color="#CCCCCC"> start</font><font color="#E5E5E5"> of a new page so</font>

721
00:30:10,890 --> 00:30:16,230
here's a diagram of exactly what was

722
00:30:12,990 --> 00:30:18,840
<font color="#CCCCCC">happening to cause the kernel panic so</font>

723
00:30:16,230 --> 00:30:23,160
basically we have this<font color="#E5E5E5"> UNIX structure</font>

724
00:30:18,840 --> 00:30:25,770
that was size 16 or 10<font color="#E5E5E5"> in hex</font><font color="#CCCCCC"> it was</font>

725
00:30:23,160 --> 00:30:29,220
allocated<font color="#E5E5E5"> at the very end of a memory</font>

726
00:30:25,770 --> 00:30:31,940
page so basically memory page the last

727
00:30:29,220 --> 00:30:35,280
thing it had was this<font color="#CCCCCC"> UNIX strong</font><font color="#E5E5E5"> UNIX</font>

728
00:30:31,940 --> 00:30:37,830
socket structure what happened was the

729
00:30:35,280 --> 00:30:40,770
compare instruction came along and since

730
00:30:37,830 --> 00:30:44,280
it's trying to check if<font color="#E5E5E5"> the path in the</font>

731
00:30:40,770 --> 00:30:46,320
UNIX socket is<font color="#E5E5E5"> null terminated it goes</font>

732
00:30:44,280 --> 00:30:48,360
to what it thinks is the end<font color="#E5E5E5"> of that</font>

733
00:30:46,320 --> 00:30:50,639
structure<font color="#CCCCCC"> but it actually goes one byte</font>

734
00:30:48,360 --> 00:30:54,000
past that and tries<font color="#CCCCCC"> to read that byte</font>

735
00:30:50,640 --> 00:30:56,490
and since the very next byte<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the</font>

736
00:30:54,000 --> 00:30:58,680
path is an unmapped page in kernel

737
00:30:56,490 --> 00:31:00,630
memory<font color="#E5E5E5"> when the instruction tries to</font>

738
00:30:58,680 --> 00:31:02,900
access<font color="#CCCCCC"> that that's obviously</font><font color="#E5E5E5"> going to</font>

739
00:31:00,630 --> 00:31:05,160
cause<font color="#E5E5E5"> kernel</font>

740
00:31:02,900 --> 00:31:05,850
so<font color="#E5E5E5"> I was intrigued I was like okay I</font>

741
00:31:05,160 --> 00:31:08,400
understand

742
00:31:05,850 --> 00:31:10,169
you know why<font color="#CCCCCC"> this bug is occurring but</font>

743
00:31:08,400 --> 00:31:12,810
<font color="#E5E5E5">like you know why is this</font><font color="#CCCCCC"> wise there's</font>

744
00:31:10,170 --> 00:31:15,150
<font color="#E5E5E5">this</font><font color="#CCCCCC"> off by one reader</font><font color="#E5E5E5"> so if you read a</font>

745
00:31:12,810 --> 00:31:17,490
little<font color="#E5E5E5"> more</font><font color="#CCCCCC"> about UNIX</font><font color="#E5E5E5"> sockets</font><font color="#CCCCCC"> you find</font>

746
00:31:15,150 --> 00:31:19,200
out<font color="#E5E5E5"> that this path does not have to be</font>

747
00:31:17,490 --> 00:31:21,420
null terminated<font color="#E5E5E5"> which is why</font><font color="#CCCCCC"> Apple is</font>

748
00:31:19,200 --> 00:31:23,610
checking<font color="#E5E5E5"> to see if it is null terminated</font>

749
00:31:21,420 --> 00:31:26,040
but<font color="#E5E5E5"> there's all this confusion online</font>

750
00:31:23,610 --> 00:31:28,229
about<font color="#E5E5E5"> like how to check this path and</font>

751
00:31:26,040 --> 00:31:30,360
the funniest is if you actually<font color="#E5E5E5"> look at</font>

752
00:31:28,230 --> 00:31:32,760
the<font color="#E5E5E5"> source code in the Linux kernel they</font>

753
00:31:30,360 --> 00:31:35,250
have an intentional<font color="#CCCCCC"> off-by-one where</font>

754
00:31:32,760 --> 00:31:37,800
they actually go one<font color="#E5E5E5"> byte past</font><font color="#CCCCCC"> the end</font>

755
00:31:35,250 --> 00:31:41,250
of the path and check if<font color="#CCCCCC"> that is a zero</font>

756
00:31:37,800 --> 00:31:43,139
there<font color="#E5E5E5"> however the code the comments in</font>

757
00:31:41,250 --> 00:31:45,840
<font color="#E5E5E5">the code say this is intentional</font><font color="#CCCCCC"> and</font>

758
00:31:43,140 --> 00:31:48,360
this is okay because<font color="#CCCCCC"> we guarantee that</font>

759
00:31:45,840 --> 00:31:50,189
<font color="#E5E5E5">the very next byte after</font><font color="#CCCCCC"> the end</font><font color="#E5E5E5"> of the</font>

760
00:31:48,360 --> 00:31:51,479
path<font color="#E5E5E5"> is always going to be mapped in so</font>

761
00:31:50,190 --> 00:31:53,370
this is never going to panic the<font color="#CCCCCC"> box</font>

762
00:31:51,480 --> 00:31:56,430
<font color="#E5E5E5">however</font><font color="#CCCCCC"> that same assumption</font><font color="#E5E5E5"> does not</font>

763
00:31:53,370 --> 00:31:58,260
hold<font color="#E5E5E5"> true on Mac OS so when you get a</font>

764
00:31:56,430 --> 00:32:01,980
<font color="#E5E5E5">structure that's allocated at the very</font>

765
00:31:58,260 --> 00:32:03,990
end of a page with the adjacent page

766
00:32:01,980 --> 00:32:06,530
being unmapped this cause as a kernel

767
00:32:03,990 --> 00:32:09,090
panic<font color="#E5E5E5"> so kind of an interesting bug</font>

768
00:32:06,530 --> 00:32:11,670
<font color="#CCCCCC">alright so that was a kernel panic kind</font>

769
00:32:09,090 --> 00:32:13,879
of lame I mean<font color="#CCCCCC"> it crashes the</font><font color="#E5E5E5"> box it's</font>

770
00:32:11,670 --> 00:32:16,380
just<font color="#CCCCCC"> a read it's not exploitable</font><font color="#E5E5E5"> so</font>

771
00:32:13,880 --> 00:32:20,250
let's talk<font color="#CCCCCC"> about some real kernel bugs</font>

772
00:32:16,380 --> 00:32:21,900
now<font color="#E5E5E5"> so the first thing did I reported</font>

773
00:32:20,250 --> 00:32:24,180
this bug to<font color="#E5E5E5"> Apple I said hey guys you</font>

774
00:32:21,900 --> 00:32:27,210
know here's<font color="#E5E5E5"> the scenario where user mode</font>

775
00:32:24,180 --> 00:32:29,910
code can trigger a kernel panic<font color="#CCCCCC"> if a</font>

776
00:32:27,210 --> 00:32:32,580
UNIX socket is being<font color="#E5E5E5"> audited and the</font>

777
00:32:29,910 --> 00:32:34,980
structure happens to align right with

778
00:32:32,580 --> 00:32:37,980
the end of<font color="#E5E5E5"> an unmapped page and they</font>

779
00:32:34,980 --> 00:32:40,410
said okay cool<font color="#CCCCCC"> we'll fix that</font><font color="#E5E5E5"> they</font>

780
00:32:37,980 --> 00:32:43,290
silently patched it so there's no<font color="#CCCCCC"> CVE</font>

781
00:32:40,410 --> 00:32:45,480
associated with<font color="#E5E5E5"> this but if we look at</font>

782
00:32:43,290 --> 00:32:48,300
the patch we can see that the way they

783
00:32:45,480 --> 00:32:52,410
decided<font color="#CCCCCC"> to</font><font color="#E5E5E5"> fix this was by using</font><font color="#CCCCCC"> aster l</font>

784
00:32:48,300 --> 00:32:54,360
copy now as their comment notes<font color="#E5E5E5"> they say</font>

785
00:32:52,410 --> 00:32:57,510
make sure<font color="#E5E5E5"> the path is null terminated</font>

786
00:32:54,360 --> 00:33:00,090
<font color="#E5E5E5">and if you're familiar with ster L copy</font>

787
00:32:57,510 --> 00:33:02,100
it's basically a safe<font color="#CCCCCC"> ster</font><font color="#E5E5E5"> copy which</font>

788
00:33:00,090 --> 00:33:04,860
means it'll<font color="#E5E5E5"> never overflow the buffer</font>

789
00:33:02,100 --> 00:33:07,530
but it will keep<font color="#E5E5E5"> copying until it finds</font>

790
00:33:04,860 --> 00:33:11,159
a null termination but<font color="#E5E5E5"> again this path</font>

791
00:33:07,530 --> 00:33:14,190
is not<font color="#E5E5E5"> necessarily null terminated so</font>

792
00:33:11,160 --> 00:33:15,610
more specifically<font color="#CCCCCC"> ster all copy is as I</font>

793
00:33:14,190 --> 00:33:18,700
<font color="#CCCCCC">mentioned going to copy until</font>

794
00:33:15,610 --> 00:33:22,059
it fills<font color="#E5E5E5"> up the buffer</font><font color="#CCCCCC"> or until it hits</font>

795
00:33:18,700 --> 00:33:24,429
a null or zero<font color="#E5E5E5"> so if our socket is</font>

796
00:33:22,059 --> 00:33:27,580
smaller than the buffer<font color="#E5E5E5"> and we create a</font>

797
00:33:24,429 --> 00:33:29,799
socket<font color="#E5E5E5"> that isn't</font><font color="#CCCCCC"> null-terminated we can</font>

798
00:33:27,580 --> 00:33:32,100
<font color="#E5E5E5">potentially leak random kernel memory</font>

799
00:33:29,799 --> 00:33:34,720
data so let's take a closer look<font color="#E5E5E5"> at this</font>

800
00:33:32,100 --> 00:33:37,870
<font color="#E5E5E5">first we have some code</font><font color="#CCCCCC"> that creates</font><font color="#E5E5E5"> a</font>

801
00:33:34,720 --> 00:33:40,120
UNIX socket and if we look<font color="#E5E5E5"> at the kernel</font>

802
00:33:37,870 --> 00:33:42,520
<font color="#E5E5E5">we see that this is</font><font color="#CCCCCC"> going to call first</font>

803
00:33:40,120 --> 00:33:44,860
<font color="#CCCCCC">when we</font><font color="#E5E5E5"> call bind on this it's going to</font>

804
00:33:42,520 --> 00:33:48,040
call something<font color="#E5E5E5"> that's a method or</font>

805
00:33:44,860 --> 00:33:50,918
<font color="#CCCCCC">function called get</font><font color="#E5E5E5"> soccer sorry</font><font color="#CCCCCC"> get</font>

806
00:33:48,040 --> 00:33:53,168
sock<font color="#CCCCCC"> adders underscore s and what</font><font color="#E5E5E5"> this</font>

807
00:33:50,919 --> 00:33:55,210
function does<font color="#E5E5E5"> is it's going to zero out</font>

808
00:33:53,169 --> 00:33:58,450
<font color="#E5E5E5">a structure and then it's going to copy</font>

809
00:33:55,210 --> 00:33:59,950
in that soccer socket structure that

810
00:33:58,450 --> 00:34:01,990
we're trying to<font color="#CCCCCC"> Aude</font><font color="#E5E5E5"> it basically it's</font>

811
00:33:59,950 --> 00:34:04,630
copying<font color="#E5E5E5"> it in from user mode to kernel</font>

812
00:34:01,990 --> 00:34:06,640
book and it copies<font color="#E5E5E5"> this in via the copy</font>

813
00:34:04,630 --> 00:34:10,300
in method which<font color="#CCCCCC"> just copies in some</font>

814
00:34:06,640 --> 00:34:12,639
specified number<font color="#CCCCCC"> of bytes so now let's</font>

815
00:34:10,300 --> 00:34:14,800
try to create<font color="#CCCCCC"> a UNIX socket that is</font><font color="#E5E5E5"> not</font>

816
00:34:12,639 --> 00:34:18,369
null terminated<font color="#E5E5E5"> because again we want to</font>

817
00:34:14,800 --> 00:34:20,679
basically<font color="#E5E5E5"> get the vulnerable</font><font color="#CCCCCC"> ster L copy</font>

818
00:34:18,369 --> 00:34:22,300
to be<font color="#E5E5E5"> called on a string</font><font color="#CCCCCC"> that's not</font><font color="#E5E5E5"> mall</font>

819
00:34:20,679 --> 00:34:25,990
terminated so then it<font color="#CCCCCC"> starts copying a</font>

820
00:34:22,300 --> 00:34:28,240
random kernel memory<font color="#E5E5E5"> into user mode so</font>

821
00:34:25,989 --> 00:34:29,888
as I mentioned the way they copy in the

822
00:34:28,239 --> 00:34:32,589
path is they first zero out the

823
00:34:29,889 --> 00:34:34,480
structure and<font color="#E5E5E5"> then copy that in so since</font>

824
00:34:32,590 --> 00:34:36,250
they zero out the structure we have to

825
00:34:34,480 --> 00:34:37,990
create<font color="#E5E5E5"> a path that fully fills up that</font>

826
00:34:36,250 --> 00:34:39,820
<font color="#E5E5E5">structure</font><font color="#CCCCCC"> because otherwise it'll be</font>

827
00:34:37,989 --> 00:34:43,388
inadvertently<font color="#E5E5E5"> null terminated because</font>

828
00:34:39,820 --> 00:34:45,159
<font color="#E5E5E5">they first zero out that structure so</font><font color="#CCCCCC"> if</font>

829
00:34:43,389 --> 00:34:47,950
we look at the size of this<font color="#E5E5E5"> structure we</font>

830
00:34:45,159 --> 00:34:50,169
can<font color="#CCCCCC"> see it has a max size of</font><font color="#E5E5E5"> 128 so what</font>

831
00:34:47,949 --> 00:34:53,888
we do in user mode<font color="#E5E5E5"> is we simply simply</font>

832
00:34:50,168 --> 00:34:56,560
allocate 128 bytes we fill<font color="#CCCCCC"> that with 41</font>

833
00:34:53,889 --> 00:34:59,680
41 41<font color="#CCCCCC"> and then we basically</font><font color="#E5E5E5"> set the</font>

834
00:34:56,560 --> 00:35:02,560
length to max and<font color="#E5E5E5"> the family to UNIX</font>

835
00:34:59,680 --> 00:35:05,080
socket we then call bind<font color="#E5E5E5"> which will</font>

836
00:35:02,560 --> 00:35:08,619
trigger the audit<font color="#E5E5E5"> event of the socket</font>

837
00:35:05,080 --> 00:35:10,299
<font color="#CCCCCC">and what we can do is we can see we</font><font color="#E5E5E5"> have</font>

838
00:35:08,619 --> 00:35:13,300
the socket structure on the slide so

839
00:35:10,300 --> 00:35:15,310
again we can see it's 128 bytes

840
00:35:13,300 --> 00:35:17,200
it's a UNIX socket and it's filled with

841
00:35:15,310 --> 00:35:18,910
<font color="#E5E5E5">40 ones most important thing though is</font>

842
00:35:17,200 --> 00:35:22,899
<font color="#E5E5E5">it's not null terminated so there's no</font>

843
00:35:18,910 --> 00:35:25,240
zeros in this<font color="#E5E5E5"> structure if we then call</font>

844
00:35:22,900 --> 00:35:28,769
bind this is going to trigger the

845
00:35:25,240 --> 00:35:31,680
vulnerable<font color="#CCCCCC"> ster l copy in kernel</font>

846
00:35:28,769 --> 00:35:33,839
and what<font color="#CCCCCC"> its gonna do now it's going to</font>

847
00:35:31,680 --> 00:35:37,078
<font color="#E5E5E5">start</font><font color="#CCCCCC"> copying bytes from our non</font>

848
00:35:33,839 --> 00:35:39,660
null-terminated path<font color="#E5E5E5"> so here's a diagram</font>

849
00:35:37,079 --> 00:35:41,910
of<font color="#CCCCCC"> that and we can see if we have the</font>

850
00:35:39,660 --> 00:35:43,410
<font color="#CCCCCC">structure in memory</font><font color="#E5E5E5"> if after the</font>

851
00:35:41,910 --> 00:35:46,440
structure there's a one two three<font color="#CCCCCC"> four</font>

852
00:35:43,410 --> 00:35:48,598
<font color="#E5E5E5">five six some number</font><font color="#CCCCCC"> of bytes</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> stur l</font>

853
00:35:46,440 --> 00:35:50,249
copy is just going<font color="#E5E5E5"> to start copying all</font>

854
00:35:48,599 --> 00:35:52,829
those bytes and<font color="#E5E5E5"> then write</font><font color="#CCCCCC"> that out to</font>

855
00:35:50,249 --> 00:35:56,999
user mode<font color="#E5E5E5"> either to the log audit log</font>

856
00:35:52,829 --> 00:35:58,200
file or to the audit pipe and again

857
00:35:56,999 --> 00:36:00,720
obviously<font color="#E5E5E5"> if</font><font color="#CCCCCC"> there's sensitive</font>

858
00:35:58,200 --> 00:36:03,450
information in the kernel hashes tokens

859
00:36:00,720 --> 00:36:05,339
and<font color="#E5E5E5"> etc etc this will all get leaked</font>

860
00:36:03,450 --> 00:36:07,229
I think<font color="#CCCCCC"> end this was apple's fix to a</font>

861
00:36:05,339 --> 00:36:10,259
camp<font color="#E5E5E5"> kernel panic report so that's kind</font>

862
00:36:07,229 --> 00:36:12,269
of the funniest thing of this<font color="#E5E5E5"> all so</font>

863
00:36:10,259 --> 00:36:14,220
let's briefly walk<font color="#CCCCCC"> through this in a</font>

864
00:36:12,269 --> 00:36:16,618
debugger<font color="#E5E5E5"> to show this kind of happening</font>

865
00:36:14,220 --> 00:36:19,259
in action so the first thing we do is we

866
00:36:16,619 --> 00:36:21,900
set a conditional breakpoint on<font color="#E5E5E5"> bind and</font>

867
00:36:19,259 --> 00:36:25,739
then here's our user mode code to create

868
00:36:21,900 --> 00:36:28,349
<font color="#E5E5E5">this null non terminated UNIX socket we</font>

869
00:36:25,739 --> 00:36:30,539
then call bind<font color="#E5E5E5"> in user</font><font color="#CCCCCC"> mode this</font><font color="#E5E5E5"> will</font>

870
00:36:28,349 --> 00:36:33,029
trigger our kernel mode breakpoint to<font color="#E5E5E5"> be</font>

871
00:36:30,539 --> 00:36:35,549
hit and then if we dump various values

872
00:36:33,029 --> 00:36:38,489
we can see<font color="#CCCCCC"> okay yes this is our kernel</font>

873
00:36:35,549 --> 00:36:41,880
this is our UNIX socket and yes it<font color="#E5E5E5"> has a</font>

874
00:36:38,489 --> 00:36:43,920
path<font color="#E5E5E5"> that's not null terminated so if we</font>

875
00:36:41,880 --> 00:36:46,979
then<font color="#E5E5E5"> set a breakpoint on the vulnerable</font>

876
00:36:43,920 --> 00:36:48,960
code<font color="#E5E5E5"> we can hit continue in the debugger</font>

877
00:36:46,979 --> 00:36:53,098
<font color="#CCCCCC">and then</font><font color="#E5E5E5"> it'll break as it's about to</font>

878
00:36:48,960 --> 00:36:55,200
audit this UNIX socket<font color="#E5E5E5"> so at that point</font>

879
00:36:53,099 --> 00:36:57,089
we can look at the registers<font color="#E5E5E5"> and we have</font>

880
00:36:55,200 --> 00:37:00,269
a table on<font color="#CCCCCC"> the slide</font><font color="#E5E5E5"> which is the</font>

881
00:36:57,089 --> 00:37:03,509
<font color="#E5E5E5">mapping of what the registers contain at</font>

882
00:37:00,269 --> 00:37:05,758
the vulnerable<font color="#CCCCCC"> stur L copy</font><font color="#E5E5E5"> for example</font>

883
00:37:03,509 --> 00:37:08,460
we can see<font color="#E5E5E5"> that our</font><font color="#CCCCCC"> ax points to the</font>

884
00:37:05,759 --> 00:37:10,950
index of the<font color="#E5E5E5"> bite to copy our</font><font color="#CCCCCC"> BX plus</font>

885
00:37:08,460 --> 00:37:14,099
<font color="#CCCCCC">two</font><font color="#E5E5E5"> is the source sort bytes which is</font>

886
00:37:10,950 --> 00:37:17,009
the<font color="#CCCCCC"> pass and then our BP minus</font><font color="#E5E5E5"> 130 is</font>

887
00:37:14,099 --> 00:37:19,410
the buffer it's going to copy it into so

888
00:37:17,009 --> 00:37:22,799
if we step<font color="#CCCCCC"> over this</font><font color="#E5E5E5"> we can see that it</font>

889
00:37:19,410 --> 00:37:27,989
returns<font color="#E5E5E5"> 127 which means it's copied 127</font>

890
00:37:22,799 --> 00:37:30,569
bytes so why 127 so recall we're<font color="#E5E5E5"> copying</font>

891
00:37:27,989 --> 00:37:34,410
from a UNIX<font color="#E5E5E5"> sock adder structure and</font>

892
00:37:30,569 --> 00:37:37,140
we've set its size to 128<font color="#E5E5E5"> now the path</font>

893
00:37:34,410 --> 00:37:40,109
starts at offset<font color="#CCCCCC"> 2 which means</font><font color="#E5E5E5"> that the</font>

894
00:37:37,140 --> 00:37:43,140
<font color="#E5E5E5">maximum path length is 126</font>

895
00:37:40,110 --> 00:37:45,360
in memory if we<font color="#E5E5E5"> dump the path there that</font>

896
00:37:43,140 --> 00:37:48,029
we're about<font color="#E5E5E5"> to audit we can see that</font>

897
00:37:45,360 --> 00:37:51,360
<font color="#E5E5E5">right after it there's a random d7 and</font>

898
00:37:48,030 --> 00:37:54,030
then a random<font color="#CCCCCC"> 0-0 so what happens is the</font>

899
00:37:51,360 --> 00:37:56,610
code has gone through<font color="#E5E5E5"> copied to the end</font>

900
00:37:54,030 --> 00:37:58,500
of the path<font color="#CCCCCC"> since the path</font><font color="#E5E5E5"> isn't null</font>

901
00:37:56,610 --> 00:38:00,930
terminated it then<font color="#E5E5E5"> copied the next byte</font>

902
00:37:58,500 --> 00:38:02,460
which happened to be<font color="#E5E5E5"> a random d7 looked</font>

903
00:38:00,930 --> 00:38:04,770
at the next<font color="#E5E5E5"> byte that happened to be</font>

904
00:38:02,460 --> 00:38:07,830
<font color="#CCCCCC">zero so stop copying so in</font><font color="#E5E5E5"> this case</font>

905
00:38:04,770 --> 00:38:09,660
we've leaked one byte<font color="#E5E5E5"> now you probably</font>

906
00:38:07,830 --> 00:38:12,690
<font color="#E5E5E5">want to leak more than one byte at</font><font color="#CCCCCC"> a</font>

907
00:38:09,660 --> 00:38:14,879
time and it turns out you can<font color="#E5E5E5"> so if you</font>

908
00:38:12,690 --> 00:38:17,160
<font color="#E5E5E5">create a</font><font color="#CCCCCC"> socket that's bigger than 128</font>

909
00:38:14,880 --> 00:38:19,710
<font color="#E5E5E5">instead of getting allocated on the</font>

910
00:38:17,160 --> 00:38:22,440
kernel stack<font color="#E5E5E5"> it gets</font><font color="#CCCCCC"> allocated on</font><font color="#E5E5E5"> the</font>

911
00:38:19,710 --> 00:38:24,810
kernel heap so then you create<font color="#E5E5E5"> this</font>

912
00:38:22,440 --> 00:38:27,540
socket and again<font color="#E5E5E5"> just call bind on it</font>

913
00:38:24,810 --> 00:38:29,730
and the vulnerable<font color="#E5E5E5"> ster I'll copy</font><font color="#CCCCCC"> we'll</font>

914
00:38:27,540 --> 00:38:32,370
just start copying a random kernel bytes

915
00:38:29,730 --> 00:38:34,110
<font color="#E5E5E5">until it hits a zero so you can change</font>

916
00:38:32,370 --> 00:38:36,299
<font color="#E5E5E5">the size of the socket you</font><font color="#CCCCCC"> can call this</font>

917
00:38:34,110 --> 00:38:38,850
as<font color="#E5E5E5"> many times there's no side effect of</font>

918
00:38:36,300 --> 00:38:41,070
this but every time<font color="#CCCCCC"> you do this you will</font>

919
00:38:38,850 --> 00:38:44,640
leak more and more kernel memory<font color="#E5E5E5"> into</font>

920
00:38:41,070 --> 00:38:47,340
user mode<font color="#E5E5E5"> okay so we've talked about</font>

921
00:38:44,640 --> 00:38:49,859
<font color="#E5E5E5">kernel panic and a kernel information</font>

922
00:38:47,340 --> 00:38:53,250
leak<font color="#E5E5E5"> but I still wanted something a</font>

923
00:38:49,860 --> 00:38:55,890
little<font color="#E5E5E5"> better so if we look within the</font>

924
00:38:53,250 --> 00:38:58,170
same audit<font color="#CCCCCC"> argh</font><font color="#E5E5E5"> sock adder function we</font>

925
00:38:55,890 --> 00:39:00,810
can<font color="#E5E5E5"> see that there</font><font color="#CCCCCC"> is an interesting B</font>

926
00:38:58,170 --> 00:39:02,430
copy<font color="#CCCCCC"> and a</font><font color="#E5E5E5"> B copy is just a mem copy</font>

927
00:39:00,810 --> 00:39:04,259
it's<font color="#E5E5E5"> basically copying something from a</font>

928
00:39:02,430 --> 00:39:08,490
source buffer to a destination buffer

929
00:39:04,260 --> 00:39:11,700
and some number<font color="#CCCCCC"> of bytes</font><font color="#E5E5E5"> now anytime</font><font color="#CCCCCC"> you</font>

930
00:39:08,490 --> 00:39:15,089
see a<font color="#E5E5E5"> B copy function</font><font color="#CCCCCC"> if it</font><font color="#E5E5E5"> uses the</font>

931
00:39:11,700 --> 00:39:16,649
source buffer<font color="#E5E5E5"> as the number of</font><font color="#CCCCCC"> bytes to</font>

932
00:39:15,090 --> 00:39:18,660
<font color="#E5E5E5">copy take a very close look at that</font>

933
00:39:16,650 --> 00:39:20,760
<font color="#E5E5E5">because if the destination buffer is</font>

934
00:39:18,660 --> 00:39:25,020
smaller than the source buffer<font color="#E5E5E5"> you may</font>

935
00:39:20,760 --> 00:39:26,970
get a heap overflow so what<font color="#E5E5E5"> B copy is</font>

936
00:39:25,020 --> 00:39:29,220
doing it's basically just copying a

937
00:39:26,970 --> 00:39:32,700
soccer a socket<font color="#E5E5E5"> into a sock adder</font>

938
00:39:29,220 --> 00:39:34,529
<font color="#E5E5E5">structure so if we look at the table</font><font color="#CCCCCC"> on</font>

939
00:39:32,700 --> 00:39:36,689
the slide these are<font color="#E5E5E5"> exactly what it's</font>

940
00:39:34,530 --> 00:39:39,000
copying so the source is<font color="#E5E5E5"> just a sock</font>

941
00:39:36,690 --> 00:39:41,610
adder structure<font color="#E5E5E5"> the destination is a</font>

942
00:39:39,000 --> 00:39:43,830
sock adder storage which<font color="#CCCCCC"> we'll look</font><font color="#E5E5E5"> at</font>

943
00:39:41,610 --> 00:39:47,940
that closer and the size is<font color="#CCCCCC"> the length</font>

944
00:39:43,830 --> 00:39:51,000
of the source buffer so the question

945
00:39:47,940 --> 00:39:53,550
then<font color="#CCCCCC"> comes</font><font color="#E5E5E5"> is can we basically create a</font>

946
00:39:51,000 --> 00:39:56,040
source sock

947
00:39:53,550 --> 00:39:59,010
<font color="#E5E5E5">socket sock adder structure that's</font>

948
00:39:56,040 --> 00:40:01,140
bigger than this destination buffer and

949
00:39:59,010 --> 00:40:03,060
the answer is yeah<font color="#E5E5E5"> so the destination</font>

950
00:40:01,140 --> 00:40:05,279
buffer is always going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a hundred</font>

951
00:40:03,060 --> 00:40:07,799
<font color="#E5E5E5">and twenty eight bytes in size so if we</font>

952
00:40:05,280 --> 00:40:10,440
can create a socket<font color="#E5E5E5"> that</font><font color="#CCCCCC"> has more than</font>

953
00:40:07,800 --> 00:40:13,290
<font color="#CCCCCC">128 bytes</font><font color="#E5E5E5"> we will get a nice ring zero</font>

954
00:40:10,440 --> 00:40:15,540
<font color="#E5E5E5">heap overflow so again we're gonna use</font><font color="#CCCCCC"> a</font>

955
00:40:13,290 --> 00:40:17,850
UNIX socket<font color="#CCCCCC"> because a UNIX socket allows</font>

956
00:40:15,540 --> 00:40:20,279
you to specify<font color="#E5E5E5"> a path and the path can</font>

957
00:40:17,850 --> 00:40:21,720
<font color="#CCCCCC">be</font><font color="#E5E5E5"> bigger than 128 so this allows us</font><font color="#CCCCCC"> to</font>

958
00:40:20,280 --> 00:40:25,050
<font color="#CCCCCC">create a socket that's essentially</font>

959
00:40:21,720 --> 00:40:27,569
bigger than the destination buffer so we

960
00:40:25,050 --> 00:40:29,970
create the socket and then we call bind

961
00:40:27,570 --> 00:40:32,040
the call to bind will trigger the

962
00:40:29,970 --> 00:40:34,740
vulnerable<font color="#E5E5E5"> audit code which is trying to</font>

963
00:40:32,040 --> 00:40:37,890
audit the socket<font color="#E5E5E5"> and then this will</font>

964
00:40:34,740 --> 00:40:39,839
invoke<font color="#E5E5E5"> the vulnerable B copy so the</font>

965
00:40:37,890 --> 00:40:42,390
diagram<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the slide we can see we</font><font color="#E5E5E5"> have</font>

966
00:40:39,840 --> 00:40:44,640
this UNIX socket<font color="#E5E5E5"> I've created it to be</font>

967
00:40:42,390 --> 00:40:46,770
<font color="#E5E5E5">200 bytes in size it could be bigger</font>

968
00:40:44,640 --> 00:40:49,529
<font color="#CCCCCC">could be smaller but the important thing</font>

969
00:40:46,770 --> 00:40:51,540
<font color="#E5E5E5">is it's bigger than 128 so the B copy</font>

970
00:40:49,530 --> 00:40:53,160
comes along<font color="#E5E5E5"> and says okay I want to make</font>

971
00:40:51,540 --> 00:40:56,190
a copy<font color="#E5E5E5"> of this path I want to make a</font>

972
00:40:53,160 --> 00:40:57,779
copy of<font color="#E5E5E5"> this socket structure I'm going</font>

973
00:40:56,190 --> 00:41:00,330
to<font color="#CCCCCC"> basically copy it into</font><font color="#E5E5E5"> this</font>

974
00:40:57,780 --> 00:41:03,150
<font color="#E5E5E5">destination buffer that's 128 bytes in</font>

975
00:41:00,330 --> 00:41:05,490
size and the length<font color="#E5E5E5"> I'm gonna use is the</font>

976
00:41:03,150 --> 00:41:08,220
size of this source buffer not the size

977
00:41:05,490 --> 00:41:09,990
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> destination so since the source</font>

978
00:41:08,220 --> 00:41:14,970
buffer is bigger than the destination

979
00:41:09,990 --> 00:41:16,950
buffer we get an ICP overflow so how do

980
00:41:14,970 --> 00:41:18,359
you exploit this vulnerability<font color="#E5E5E5"> due</font><font color="#CCCCCC"> to</font>

981
00:41:16,950 --> 00:41:20,339
time constraints<font color="#E5E5E5"> can't really go into</font>

982
00:41:18,359 --> 00:41:23,549
<font color="#CCCCCC">all the details</font><font color="#E5E5E5"> but it's actually pretty</font>

983
00:41:20,340 --> 00:41:25,530
easy<font color="#CCCCCC"> for</font><font color="#E5E5E5"> a variety of reasons so first</font>

984
00:41:23,550 --> 00:41:28,200
we control the number of<font color="#E5E5E5"> bytes to copy</font>

985
00:41:25,530 --> 00:41:31,080
<font color="#E5E5E5">so it's a tactical over overflow</font><font color="#CCCCCC"> you can</font>

986
00:41:28,200 --> 00:41:33,569
copy<font color="#CCCCCC"> and overflow as many or</font><font color="#E5E5E5"> as few</font>

987
00:41:31,080 --> 00:41:35,730
bytes as you want we also control<font color="#CCCCCC"> the</font>

988
00:41:33,570 --> 00:41:38,220
values of the bytes being<font color="#CCCCCC"> copied so they</font>

989
00:41:35,730 --> 00:41:39,780
can have zeros they can have<font color="#E5E5E5"> 7f they can</font>

990
00:41:38,220 --> 00:41:42,899
have<font color="#E5E5E5"> you know there's no constraints on</font>

991
00:41:39,780 --> 00:41:45,180
<font color="#CCCCCC">that most importantly though if we look</font>

992
00:41:42,900 --> 00:41:47,580
at where this dish destination buffer is

993
00:41:45,180 --> 00:41:50,129
that's getting overflowed<font color="#E5E5E5"> we can see</font>

994
00:41:47,580 --> 00:41:51,450
<font color="#E5E5E5">that it's part of a larger</font><font color="#CCCCCC"> structure so</font>

995
00:41:50,130 --> 00:41:53,550
it's self-contained<font color="#E5E5E5"> with something</font>

996
00:41:51,450 --> 00:41:55,618
within<font color="#E5E5E5"> another structure and this is</font>

997
00:41:53,550 --> 00:41:58,380
<font color="#CCCCCC">important because this means that</font><font color="#E5E5E5"> after</font>

998
00:41:55,619 --> 00:42:01,200
<font color="#E5E5E5">that buffer there are always going to be</font>

999
00:41:58,380 --> 00:42:03,630
<font color="#E5E5E5">other values for example pointers</font><font color="#CCCCCC"> that</font>

1000
00:42:01,200 --> 00:42:05,819
we can<font color="#E5E5E5"> corrupt so normally when you're</font>

1001
00:42:03,630 --> 00:42:07,320
exploiting<font color="#E5E5E5"> a heap overflow you don't</font>

1002
00:42:05,820 --> 00:42:08,880
know what's going to be<font color="#E5E5E5"> next to the</font>

1003
00:42:07,320 --> 00:42:10,470
<font color="#E5E5E5">buffer</font><font color="#CCCCCC"> you're overflowing so what you</font>

1004
00:42:08,880 --> 00:42:11,910
have<font color="#E5E5E5"> to do is you have to spray you have</font>

1005
00:42:10,470 --> 00:42:14,310
to allocate you have to groom the

1006
00:42:11,910 --> 00:42:16,500
<font color="#E5E5E5">Colonel</font><font color="#CCCCCC"> Heep</font><font color="#E5E5E5"> then you have to try to get</font>

1007
00:42:14,310 --> 00:42:19,170
an adjacent object<font color="#E5E5E5"> that you control</font>

1008
00:42:16,500 --> 00:42:21,750
<font color="#E5E5E5">trigger the overflow</font><font color="#CCCCCC"> and then gain code</font>

1009
00:42:19,170 --> 00:42:24,180
<font color="#E5E5E5">execution that way in this case though</font>

1010
00:42:21,750 --> 00:42:26,700
we have a<font color="#E5E5E5"> self-contained overflow and</font>

1011
00:42:24,180 --> 00:42:28,859
<font color="#E5E5E5">again the destination buffer is part of</font>

1012
00:42:26,700 --> 00:42:30,870
<font color="#E5E5E5">another structure so there's pointers</font>

1013
00:42:28,860 --> 00:42:32,370
there that we can tactically hit we

1014
00:42:30,870 --> 00:42:35,370
always know those pointers are going to

1015
00:42:32,370 --> 00:42:37,049
be there so here for example<font color="#E5E5E5"> we can</font>

1016
00:42:35,370 --> 00:42:40,980
corrupt some of those pointers<font color="#E5E5E5"> and set</font>

1017
00:42:37,050 --> 00:42:42,900
them to<font color="#E5E5E5"> 41 41 41 41</font><font color="#CCCCCC"> so once you have</font>

1018
00:42:40,980 --> 00:42:45,090
this ability<font color="#CCCCCC"> there's some other talks</font>

1019
00:42:42,900 --> 00:42:47,730
that<font color="#CCCCCC"> have been presented</font><font color="#E5E5E5"> about exactly</font>

1020
00:42:45,090 --> 00:42:49,470
<font color="#E5E5E5">how to</font><font color="#CCCCCC"> leverage this to get</font><font color="#E5E5E5"> control of</font>

1021
00:42:47,730 --> 00:42:51,140
the instruction pointer<font color="#E5E5E5"> and then do all</font>

1022
00:42:49,470 --> 00:42:53,330
<font color="#CCCCCC">sorts of evil things for example</font>

1023
00:42:51,140 --> 00:42:56,129
<font color="#E5E5E5">disabling system integrity protection</font>

1024
00:42:53,330 --> 00:42:58,620
<font color="#CCCCCC">gaining unsigned code</font><font color="#E5E5E5"> execution in the</font>

1025
00:42:56,130 --> 00:43:01,860
context of<font color="#E5E5E5"> the kernel all that good</font>

1026
00:42:58,620 --> 00:43:05,370
stuff<font color="#CCCCCC"> all right so let's wrap this all</font>

1027
00:43:01,860 --> 00:43:07,380
up<font color="#CCCCCC"> so we started</font><font color="#E5E5E5"> by talking about the</font>

1028
00:43:05,370 --> 00:43:09,180
many benefits<font color="#E5E5E5"> of auditing so again if</font>

1029
00:43:07,380 --> 00:43:11,400
<font color="#E5E5E5">you're interested in doing malware</font>

1030
00:43:09,180 --> 00:43:13,710
analysis or writing security tools for

1031
00:43:11,400 --> 00:43:15,690
<font color="#E5E5E5">mac OS definitely check out the auditing</font>

1032
00:43:13,710 --> 00:43:18,630
mechanisms you can<font color="#E5E5E5"> utilize them</font><font color="#CCCCCC"> to</font>

1033
00:43:15,690 --> 00:43:21,840
<font color="#E5E5E5">create very powerful auditing tools</font>

1034
00:43:18,630 --> 00:43:24,330
<font color="#E5E5E5">pretty easily we talked about a kernel</font>

1035
00:43:21,840 --> 00:43:26,490
panic<font color="#CCCCCC"> that was inadvertently</font><font color="#E5E5E5"> found by</font><font color="#CCCCCC"> a</font>

1036
00:43:24,330 --> 00:43:30,120
user mode process monitoring library

1037
00:43:26,490 --> 00:43:32,759
that was silently patched in the 10.12

1038
00:43:30,120 --> 00:43:34,859
dot 4 dot beta when I looked at<font color="#CCCCCC"> apples</font>

1039
00:43:32,760 --> 00:43:36,480
<font color="#E5E5E5">patch</font><font color="#CCCCCC"> I saw that not only</font><font color="#E5E5E5"> had they not</font>

1040
00:43:34,860 --> 00:43:38,580
patched the bug they actually had

1041
00:43:36,480 --> 00:43:40,470
introduced<font color="#E5E5E5"> an even worse vulnerability</font>

1042
00:43:38,580 --> 00:43:41,880
so a<font color="#E5E5E5"> little secret</font><font color="#CCCCCC"> look at</font><font color="#E5E5E5"> apples</font>

1043
00:43:40,470 --> 00:43:44,220
patches<font color="#CCCCCC"> because they mess</font><font color="#E5E5E5"> them up all</font>

1044
00:43:41,880 --> 00:43:45,990
<font color="#CCCCCC">the</font><font color="#E5E5E5"> time so you can find some</font><font color="#CCCCCC"> really</font>

1045
00:43:44,220 --> 00:43:48,750
interesting bugs basically just<font color="#E5E5E5"> wait</font>

1046
00:43:45,990 --> 00:43:50,339
till they release some<font color="#CCCCCC"> CVE details diff</font>

1047
00:43:48,750 --> 00:43:54,330
the kernel<font color="#E5E5E5"> will look at their patches</font>

1048
00:43:50,340 --> 00:43:56,820
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Frio days and finally we</font><font color="#E5E5E5"> also showed</font>

1049
00:43:54,330 --> 00:43:59,100
a heap overflow<font color="#E5E5E5"> that would give us code</font>

1050
00:43:56,820 --> 00:44:01,080
execution<font color="#E5E5E5"> in the context of the kernel</font>

1051
00:43:59,100 --> 00:44:03,900
<font color="#E5E5E5">allowing us to do things like bypass</font>

1052
00:44:01,080 --> 00:44:05,880
system<font color="#E5E5E5"> integrity protection or execute</font>

1053
00:44:03,900 --> 00:44:09,030
unsigned<font color="#CCCCCC"> code in the context</font><font color="#E5E5E5"> of the</font>

1054
00:44:05,880 --> 00:44:11,220
kernel<font color="#E5E5E5"> so very briefly since you're</font>

1055
00:44:09,030 --> 00:44:13,080
attending my talk on Mac security<font color="#CCCCCC"> I just</font>

1056
00:44:11,220 --> 00:44:15,750
want to briefly<font color="#E5E5E5"> mention my personal Mac</font>

1057
00:44:13,080 --> 00:44:17,970
security<font color="#E5E5E5"> website</font><font color="#CCCCCC"> a lot of free</font>

1058
00:44:15,750 --> 00:44:20,620
open-source Mac<font color="#E5E5E5"> security tools</font><font color="#CCCCCC"> I also</font>

1059
00:44:17,970 --> 00:44:22,629
blog<font color="#E5E5E5"> about Mac malware</font>

1060
00:44:20,620 --> 00:44:24,759
and blog<font color="#CCCCCC"> about</font><font color="#E5E5E5"> zero days and</font>

1061
00:44:22,630 --> 00:44:26,950
vulnerabilities I find so everything

1062
00:44:24,760 --> 00:44:30,670
here is<font color="#E5E5E5"> free so hope this doesn't sound</font>

1063
00:44:26,950 --> 00:44:32,830
like<font color="#CCCCCC"> a sales pitch alright so</font><font color="#E5E5E5"> that's a</font>

1064
00:44:30,670 --> 00:44:35,050
wrap<font color="#CCCCCC"> again I'm on</font><font color="#E5E5E5"> Twitter a Patrick</font>

1065
00:44:32,830 --> 00:44:37,210
world<font color="#CCCCCC"> all the website is objective-c</font><font color="#E5E5E5"> and</font>

1066
00:44:35,050 --> 00:44:39,640
I think we have a few minutes<font color="#CCCCCC"> for</font>

1067
00:44:37,210 --> 00:44:41,380
questions<font color="#CCCCCC"> if</font><font color="#E5E5E5"> not I</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> around after</font>

1068
00:44:39,640 --> 00:44:43,569
the talk<font color="#CCCCCC"> I would</font><font color="#E5E5E5"> love to chat again</font>

1069
00:44:41,380 --> 00:45:01,840
thank<font color="#CCCCCC"> you</font><font color="#E5E5E5"> so much for attending my talk</font>

1070
00:44:43,570 --> 00:45:03,670
<font color="#E5E5E5">I really appreciate yes question yes so</font>

1071
00:45:01,840 --> 00:45:06,250
the<font color="#CCCCCC"> question was was the heap overflow</font>

1072
00:45:03,670 --> 00:45:08,320
related to the same control flow the

1073
00:45:06,250 --> 00:45:10,240
same auditing mechanisms and the answer

1074
00:45:08,320 --> 00:45:13,810
is yes<font color="#E5E5E5"> so</font><font color="#CCCCCC"> all three</font><font color="#E5E5E5"> bugs I talked about</font>

1075
00:45:10,240 --> 00:45:15,459
were all<font color="#E5E5E5"> within the open</font><font color="#CCCCCC"> BSM code which</font>

1076
00:45:13,810 --> 00:45:17,350
lives in<font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> the auditing code</font>

1077
00:45:15,460 --> 00:45:19,060
and actually all three<font color="#E5E5E5"> bugs were in the</font>

1078
00:45:17,350 --> 00:45:21,069
same function<font color="#CCCCCC"> so there's a lot</font><font color="#E5E5E5"> of other</font>

1079
00:45:19,060 --> 00:45:23,259
auditing functions that you<font color="#E5E5E5"> might want</font>

1080
00:45:21,070 --> 00:45:27,430
to take a<font color="#E5E5E5"> look at I don't think anyone's</font>

1081
00:45:23,260 --> 00:45:29,680
<font color="#CCCCCC">audited the audit code</font><font color="#E5E5E5"> but again</font><font color="#CCCCCC"> yes so</font>

1082
00:45:27,430 --> 00:45:31,600
basically<font color="#E5E5E5"> to</font><font color="#CCCCCC"> answer your question it you</font>

1083
00:45:29,680 --> 00:45:34,480
<font color="#E5E5E5">know it was all within the auditing</font>

1084
00:45:31,600 --> 00:45:36,310
subsystem first the the the panic was

1085
00:45:34,480 --> 00:45:37,690
triggered inadvertently when I just

1086
00:45:36,310 --> 00:45:39,400
started<font color="#E5E5E5"> using it</font><font color="#CCCCCC"> and then I took a</font>

1087
00:45:37,690 --> 00:45:42,700
closer<font color="#E5E5E5"> look audited some of the code and</font>

1088
00:45:39,400 --> 00:45:44,560
found<font color="#E5E5E5"> the kernel information leak due to</font>

1089
00:45:42,700 --> 00:45:46,029
<font color="#E5E5E5">apples patch and then the heap overflow</font>

1090
00:45:44,560 --> 00:45:48,610
was just<font color="#CCCCCC"> actually three lines of code</font>

1091
00:45:46,030 --> 00:45:49,690
above<font color="#E5E5E5"> so I would audit that code there</font>

1092
00:45:48,610 --> 00:45:57,610
might be some other interesting bugs

1093
00:45:49,690 --> 00:45:59,800
there yes<font color="#E5E5E5"> question so the first one was</font>

1094
00:45:57,610 --> 00:46:01,390
<font color="#E5E5E5">okay so the first</font><font color="#CCCCCC"> one the first panic</font>

1095
00:45:59,800 --> 00:46:02,800
and I was like this is annoying<font color="#CCCCCC"> I was</font>

1096
00:46:01,390 --> 00:46:04,900
like oh cool<font color="#E5E5E5"> this is like a security bug</font>

1097
00:46:02,800 --> 00:46:06,970
<font color="#E5E5E5">and then I decided to</font><font color="#CCCCCC"> look</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> apples fix</font>

1098
00:46:04,900 --> 00:46:09,310
<font color="#E5E5E5">because</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to make sure</font><font color="#CCCCCC"> that when</font>

1099
00:46:06,970 --> 00:46:11,439
I<font color="#CCCCCC"> deployed my tool</font><font color="#E5E5E5"> my user mode tool it</font>

1100
00:46:09,310 --> 00:46:13,750
wasn't gonna cause users computers to

1101
00:46:11,440 --> 00:46:16,000
panic and then I looked at their<font color="#E5E5E5"> fix and</font>

1102
00:46:13,750 --> 00:46:18,070
I was like what were they thinking<font color="#CCCCCC"> like</font>

1103
00:46:16,000 --> 00:46:20,470
they<font color="#E5E5E5"> they say it's not null terminated</font>

1104
00:46:18,070 --> 00:46:23,050
and they use asteroid copy<font color="#E5E5E5"> and then you</font>

1105
00:46:20,470 --> 00:46:24,160
know the the function<font color="#E5E5E5"> was 20 lines of</font>

1106
00:46:23,050 --> 00:46:25,570
code<font color="#E5E5E5"> and I was okay there's very two</font>

1107
00:46:24,160 --> 00:46:27,970
bugs in here there might be something

1108
00:46:25,570 --> 00:46:29,380
else<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> know when I was testing the</font>

1109
00:46:27,970 --> 00:46:31,480
<font color="#E5E5E5">kernel information</font><font color="#CCCCCC"> leak it actually</font>

1110
00:46:29,380 --> 00:46:34,690
triggered the heap overflow so again

1111
00:46:31,480 --> 00:46:36,690
like finding kernel bugs and

1112
00:46:34,690 --> 00:46:39,070
you know it's it's<font color="#E5E5E5"> still pretty</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> so</font>

1113
00:46:36,690 --> 00:46:44,800
or maybe I'm just really<font color="#CCCCCC"> lucky but</font><font color="#E5E5E5"> now</font>

1114
00:46:39,070 --> 00:46:46,510
it's it's easy awesome<font color="#E5E5E5"> well thanks</font><font color="#CCCCCC"> again</font>

1115
00:46:44,800 --> 00:46:49,090
<font color="#CCCCCC">for</font><font color="#E5E5E5"> attending and I'll be around if you</font>

1116
00:46:46,510 --> 00:46:53,070
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to chat also these slides I will be</font>

1117
00:46:49,090 --> 00:46:53,070
online<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> tomorrow so thanks again</font>

