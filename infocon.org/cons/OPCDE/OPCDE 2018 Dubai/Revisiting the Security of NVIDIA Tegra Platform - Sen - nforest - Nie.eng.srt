1
00:00:04,980 --> 00:00:12,070
since<font color="#E5E5E5"> forever here now I'd like to</font><font color="#CCCCCC"> talk</font>

2
00:00:09,250 --> 00:00:17,740
<font color="#CCCCCC">about the</font><font color="#E5E5E5"> security of</font><font color="#CCCCCC"> nvidia tegra</font>

3
00:00:12,070 --> 00:00:20,320
platform<font color="#E5E5E5"> hope you can enjoy</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> first and</font>

4
00:00:17,740 --> 00:00:23,560
let me introduce<font color="#E5E5E5"> myself my</font><font color="#CCCCCC"> name is</font>

5
00:00:20,320 --> 00:00:25,960
Nielsen<font color="#E5E5E5"> you can call me son</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'm a</font>

6
00:00:23,560 --> 00:00:29,259
security<font color="#E5E5E5"> researcher at the</font><font color="#CCCCCC"> teen security</font>

7
00:00:25,960 --> 00:00:32,529
lab of<font color="#E5E5E5"> Tencent it's also known as</font><font color="#CCCCCC"> a</font>

8
00:00:29,259 --> 00:00:35,290
<font color="#E5E5E5">clean lab work in team however some</font>

9
00:00:32,529 --> 00:00:39,219
<font color="#E5E5E5">people here already know us because of</font>

10
00:00:35,290 --> 00:00:41,739
the pond<font color="#CCCCCC"> tooling right and</font><font color="#E5E5E5"> I'm one of</font>

11
00:00:39,219 --> 00:00:44,949
<font color="#E5E5E5">the</font><font color="#CCCCCC"> researchers at clean lab while</font>

12
00:00:41,739 --> 00:00:48,849
focusing on<font color="#E5E5E5"> the security of smart cars</font>

13
00:00:44,949 --> 00:00:51,760
<font color="#E5E5E5">so we do some car hacking stuff for</font>

14
00:00:48,850 --> 00:00:55,210
<font color="#CCCCCC">example</font><font color="#E5E5E5"> I hope you already know our shoe</font>

15
00:00:51,760 --> 00:00:58,089
<font color="#E5E5E5">keys</font><font color="#CCCCCC"> the Tesla</font><font color="#E5E5E5"> remote hacking in</font>

16
00:00:55,210 --> 00:01:02,859
September 2016

17
00:00:58,090 --> 00:01:05,890
<font color="#CCCCCC">and the ins in June 2017 we remotely</font>

18
00:01:02,859 --> 00:01:09,250
hacked into the Tesla car<font color="#E5E5E5"> without any</font>

19
00:01:05,890 --> 00:01:12,520
physical access we<font color="#E5E5E5"> can control the car</font>

20
00:01:09,250 --> 00:01:15,250
in both parking and the<font color="#E5E5E5"> driving mode so</font>

21
00:01:12,520 --> 00:01:22,600
you can<font color="#E5E5E5"> find more information from these</font>

22
00:01:15,250 --> 00:01:25,689
<font color="#E5E5E5">links this</font><font color="#CCCCCC"> is the</font><font color="#E5E5E5"> agenda</font><font color="#CCCCCC"> firstly I will</font>

23
00:01:22,600 --> 00:01:29,140
<font color="#E5E5E5">talk about why we need to dig into the</font>

24
00:01:25,689 --> 00:01:32,770
<font color="#CCCCCC">tegra platform then</font><font color="#E5E5E5"> I'll explain the</font>

25
00:01:29,140 --> 00:01:34,500
details<font color="#E5E5E5"> in the in the map clever would</font>

26
00:01:32,770 --> 00:01:37,840
like to review some knowing

27
00:01:34,500 --> 00:01:40,149
vulnerabilities related to the<font color="#E5E5E5"> Tegra</font>

28
00:01:37,840 --> 00:01:44,640
platform and<font color="#E5E5E5"> finally share some bugs</font>

29
00:01:40,149 --> 00:01:49,079
<font color="#E5E5E5">found ourselves in the indie map module</font>

30
00:01:44,640 --> 00:01:53,170
so what is the<font color="#E5E5E5"> NVIDIA Tegra platform</font>

31
00:01:49,079 --> 00:01:56,380
Tegra is invidious<font color="#E5E5E5"> in bending the Linux</font>

32
00:01:53,170 --> 00:01:59,579
development platform<font color="#E5E5E5"> it is used in many</font>

33
00:01:56,380 --> 00:02:01,360
types<font color="#E5E5E5"> of devices such as smartphones</font>

34
00:01:59,579 --> 00:02:04,679
<font color="#E5E5E5">game consoles</font>

35
00:02:01,360 --> 00:02:08,619
<font color="#E5E5E5">and of course the automotive systems</font><font color="#CCCCCC"> and</font>

36
00:02:04,680 --> 00:02:11,680
<font color="#CCCCCC">Martucci</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> tagar I readily used in</font>

37
00:02:08,619 --> 00:02:15,630
the<font color="#CCCCCC"> embedding the</font><font color="#E5E5E5"> systems</font><font color="#CCCCCC"> here I</font><font color="#E5E5E5"> gave us</font>

38
00:02:11,680 --> 00:02:17,720
three famous<font color="#E5E5E5"> products the my favorite</font>

39
00:02:15,630 --> 00:02:21,070
team cancel the

40
00:02:17,720 --> 00:02:23,990
<font color="#CCCCCC">Tendo sewage and also the my favorite</font>

41
00:02:21,070 --> 00:02:27,530
ebook reader the Kindle and<font color="#E5E5E5"> of course</font>

42
00:02:23,990 --> 00:02:32,000
<font color="#CCCCCC">Tesla uses a</font><font color="#E5E5E5"> Tegra as</font><font color="#CCCCCC"> it's important</font>

43
00:02:27,530 --> 00:02:36,590
mental systems<font color="#CCCCCC"> also BMW</font><font color="#E5E5E5"> is used you the</font>

44
00:02:32,000 --> 00:02:40,040
<font color="#E5E5E5">Integra platform in their cars so we can</font>

45
00:02:36,590 --> 00:02:40,670
see that Tesla and<font color="#CCCCCC"> NVIDIA they are good</font>

46
00:02:40,040 --> 00:02:43,640
friends

47
00:02:40,670 --> 00:02:47,750
there are automotive partners<font color="#E5E5E5"> based on</font>

48
00:02:43,640 --> 00:02:51,440
the Tegra<font color="#CCCCCC"> processors the</font><font color="#E5E5E5"> Tesla car helps</font>

49
00:02:47,750 --> 00:02:57,260
<font color="#E5E5E5">in the investor</font><font color="#CCCCCC"> entertainment system</font>

50
00:02:51,440 --> 00:03:01,070
under the<font color="#E5E5E5"> ICC turn so why we need to dig</font>

51
00:02:57,260 --> 00:03:04,810
into the Tegra platform<font color="#CCCCCC"> we dig into it</font>

52
00:03:01,070 --> 00:03:08,150
<font color="#E5E5E5">because of our Tesla hacking research</font>

53
00:03:04,810 --> 00:03:11,209
<font color="#CCCCCC">during our Tesla hacking research</font><font color="#E5E5E5"> we</font>

54
00:03:08,150 --> 00:03:14,420
need a way to<font color="#E5E5E5"> gain root on the Tesla</font>

55
00:03:11,209 --> 00:03:18,050
infotainment system<font color="#E5E5E5"> that's an important</font>

56
00:03:14,420 --> 00:03:21,980
part<font color="#E5E5E5"> in our whole attack chain so</font>

57
00:03:18,050 --> 00:03:25,580
firstly we already have a<font color="#CCCCCC"> code</font><font color="#E5E5E5"> execution</font>

58
00:03:21,980 --> 00:03:28,040
<font color="#CCCCCC">bug</font><font color="#E5E5E5"> in the browser contest but the</font>

59
00:03:25,580 --> 00:03:31,580
browser process is<font color="#E5E5E5"> running in the loop</font>

60
00:03:28,040 --> 00:03:36,649
privileged user ID and it's also in the

61
00:03:31,580 --> 00:03:40,190
<font color="#E5E5E5">sandbox</font><font color="#CCCCCC"> the hummer sandbox so we need</font>

62
00:03:36,650 --> 00:03:45,320
local privilege<font color="#E5E5E5"> escalation vulnerability</font>

63
00:03:40,190 --> 00:03:47,959
and<font color="#E5E5E5"> I think so here I will</font><font color="#CCCCCC"> give</font><font color="#E5E5E5"> you a</font>

64
00:03:45,320 --> 00:03:50,780
demo<font color="#CCCCCC"> videos to show</font><font color="#E5E5E5"> how we get the</font>

65
00:03:47,959 --> 00:03:53,810
browser<font color="#CCCCCC"> shell first without the physical</font>

66
00:03:50,780 --> 00:04:00,340
access I<font color="#E5E5E5"> will explain why we need to do</font>

67
00:03:53,810 --> 00:04:00,340
a local<font color="#E5E5E5"> privilege escalation</font><font color="#CCCCCC"> ok</font>

68
00:04:21,789 --> 00:04:25,630
I'm not sure

69
00:04:26,490 --> 00:04:40,349
<font color="#CCCCCC">ok firstly we create our fake EP and you</font>

70
00:04:36,539 --> 00:04:43,250
can see we do<font color="#CCCCCC"> not need to physically</font>

71
00:04:40,349 --> 00:04:48,919
<font color="#E5E5E5">access the car but the</font><font color="#CCCCCC"> car will</font>

72
00:04:43,250 --> 00:04:48,919
automatically connect to<font color="#E5E5E5"> the fake EP</font>

73
00:04:54,139 --> 00:04:57,889
need some<font color="#E5E5E5"> seconds</font>

74
00:05:07,230 --> 00:05:15,150
and then you<font color="#CCCCCC"> will see</font><font color="#E5E5E5"> that the browser</font>

75
00:05:11,240 --> 00:05:17,970
<font color="#CCCCCC">will reload itself you know reloaded the</font>

76
00:05:15,150 --> 00:05:22,700
<font color="#E5E5E5">webpage itself and then we use a WebKit</font>

77
00:05:17,970 --> 00:05:25,350
vulnerability to exploit it from the<font color="#CCCCCC"> the</font>

78
00:05:22,700 --> 00:05:28,560
<font color="#E5E5E5">videos</font><font color="#CCCCCC"> firmly you can see that we got</font>

79
00:05:25,350 --> 00:05:31,080
her share<font color="#E5E5E5"> it's in the browser user ID is</font>

80
00:05:28,560 --> 00:05:33,620
actually it's also in the<font color="#E5E5E5"> apparmor</font>

81
00:05:31,080 --> 00:05:33,620
sandbox

82
00:05:43,130 --> 00:05:47,170
go back to my<font color="#CCCCCC"> salons</font>

83
00:05:47,550 --> 00:05:53,310
so here it's in<font color="#E5E5E5"> the step three and step</font>

84
00:05:51,210 --> 00:05:58,020
<font color="#E5E5E5">four we need a local privilege</font>

85
00:05:53,310 --> 00:06:00,840
escalation in<font color="#E5E5E5"> the year 2016 we utilize</font>

86
00:05:58,020 --> 00:06:03,870
the well-known<font color="#E5E5E5"> condo vulnerability so</font>

87
00:06:00,840 --> 00:06:06,719
it's easy<font color="#E5E5E5"> it's it's a well known bug in</font>

88
00:06:03,870 --> 00:06:08,909
the mainstream kernel but not the condo

89
00:06:06,720 --> 00:06:13,650
specific apartment<font color="#CCCCCC"> not in the Nvidia</font>

90
00:06:08,909 --> 00:06:15,930
drivers but however<font color="#E5E5E5"> in the year 2017</font>

91
00:06:13,650 --> 00:06:19,318
since become much more<font color="#CCCCCC"> difficult for us</font>

92
00:06:15,930 --> 00:06:22,199
<font color="#E5E5E5">because Tesla patched up all the</font><font color="#CCCCCC"> knowing</font>

93
00:06:19,319 --> 00:06:25,130
vulnerabilities we need a<font color="#CCCCCC"> funder</font><font color="#E5E5E5"> zero</font>

94
00:06:22,199 --> 00:06:28,110
<font color="#CCCCCC">due</font><font color="#E5E5E5"> to to hack into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> so</font>

95
00:06:25,130 --> 00:06:31,770
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> before we dig into the Tegra</font>

96
00:06:28,110 --> 00:06:34,949
platform we<font color="#CCCCCC"> use about</font><font color="#E5E5E5"> one month to try</font>

97
00:06:31,770 --> 00:06:39,830
to find<font color="#E5E5E5"> a new vulnerability but we feel</font>

98
00:06:34,949 --> 00:06:39,830
<font color="#CCCCCC">the so we need to focus on the Tegra</font>

99
00:06:41,599 --> 00:06:50,610
as you can see according<font color="#CCCCCC"> to the up</font>

100
00:06:44,669 --> 00:06:53,099
hammer rules that the dev slash only<font color="#E5E5E5"> map</font>

101
00:06:50,610 --> 00:06:56,219
<font color="#E5E5E5">on the dev slash</font><font color="#CCCCCC"> Indy host control is</font>

102
00:06:53,099 --> 00:07:00,539
the only two<font color="#E5E5E5"> drivers can be accessed in</font>

103
00:06:56,219 --> 00:07:03,120
the<font color="#E5E5E5"> Harmer sandbox so at that hammer we</font>

104
00:07:00,539 --> 00:07:07,830
<font color="#E5E5E5">did had to dig into the source code</font><font color="#CCCCCC"> and</font>

105
00:07:03,120 --> 00:07:09,659
the<font color="#CCCCCC"> credit</font><font color="#E5E5E5"> of Thunder bark here I will</font>

106
00:07:07,830 --> 00:07:12,330
introduce<font color="#CCCCCC"> I will give a brief</font>

107
00:07:09,659 --> 00:07:16,169
<font color="#E5E5E5">introduction about the Indian map driver</font>

108
00:07:12,330 --> 00:07:18,779
first but before<font color="#CCCCCC"> we talk about in the</font>

109
00:07:16,169 --> 00:07:24,150
map<font color="#E5E5E5"> we need to talk about in Rijo to</font>

110
00:07:18,779 --> 00:07:27,060
control is a driver that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the Tegra</font>

111
00:07:24,150 --> 00:07:30,179
graphics<font color="#CCCCCC"> hosted driver and new people</font>

112
00:07:27,060 --> 00:07:32,909
<font color="#E5E5E5">already found some interesting bugs in</font>

113
00:07:30,180 --> 00:07:36,060
this<font color="#CCCCCC"> module so</font><font color="#E5E5E5"> I'll talk about it</font><font color="#CCCCCC"> later</font>

114
00:07:32,909 --> 00:07:38,490
but for me<font color="#CCCCCC"> I did in the final something</font>

115
00:07:36,060 --> 00:07:42,120
new or<font color="#CCCCCC"> something special in this module</font>

116
00:07:38,490 --> 00:07:45,900
<font color="#E5E5E5">so I so I quickly go over it and</font><font color="#CCCCCC"> I move</font>

117
00:07:42,120 --> 00:07:48,779
to the<font color="#E5E5E5"> only map module and the amendment</font>

118
00:07:45,900 --> 00:07:54,539
<font color="#E5E5E5">in the map is much more complex than in</font>

119
00:07:48,779 --> 00:07:57,870
the<font color="#E5E5E5"> host control what is the envy map in</font>

120
00:07:54,539 --> 00:08:01,229
the map is<font color="#E5E5E5"> the memory manager for Tegra</font>

121
00:07:57,870 --> 00:08:04,500
GPU in the mobile phone or in the

122
00:08:01,230 --> 00:08:06,810
inventing the<font color="#E5E5E5"> systems user process</font><font color="#CCCCCC"> needs</font>

123
00:08:04,500 --> 00:08:10,470
<font color="#CCCCCC">a way to communicate</font><font color="#E5E5E5"> with the colonel</font>

124
00:08:06,810 --> 00:08:13,920
<font color="#CCCCCC">and with the</font><font color="#E5E5E5"> GPU especially for the</font>

125
00:08:10,470 --> 00:08:17,310
large chunk<font color="#CCCCCC"> of memory sharing and the</font>

126
00:08:13,920 --> 00:08:20,670
memory read right so<font color="#E5E5E5"> that's why</font><font color="#CCCCCC"> Tegra</font>

127
00:08:17,310 --> 00:08:23,070
<font color="#CCCCCC">create its own</font><font color="#E5E5E5"> memory management module</font>

128
00:08:20,670 --> 00:08:27,330
in the<font color="#E5E5E5"> Linux kernel but it's a very</font>

129
00:08:23,070 --> 00:08:31,490
<font color="#CCCCCC">similar to injure</font><font color="#E5E5E5"> the Aaron mechanism</font>

130
00:08:27,330 --> 00:08:33,900
you know<font color="#E5E5E5"> you can fund some other similar</font>

131
00:08:31,490 --> 00:08:38,760
implementations on the Android devices

132
00:08:33,900 --> 00:08:43,559
such as CMM C memory the memory manager

133
00:08:38,760 --> 00:08:49,530
in the<font color="#CCCCCC"> T</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> on map chipset</font><font color="#E5E5E5"> so something</font>

134
00:08:43,559 --> 00:08:52,439
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> map actually it's a</font>

135
00:08:49,530 --> 00:08:55,650
typical Linux driver<font color="#CCCCCC"> a user</font><font color="#E5E5E5"> processor</font>

136
00:08:52,440 --> 00:08:59,430
can access it by<font color="#CCCCCC"> opening the driver and</font>

137
00:08:55,650 --> 00:09:02,069
get the handle to operate it it can be

138
00:08:59,430 --> 00:09:05,069
send some<font color="#E5E5E5"> error codes you can see the</font>

139
00:09:02,070 --> 00:09:08,130
<font color="#CCCCCC">al-qasas there there are many</font><font color="#E5E5E5"> i/o</font>

140
00:09:05,070 --> 00:09:12,810
control command codes for<font color="#E5E5E5"> example the in</font>

141
00:09:08,130 --> 00:09:16,530
the map<font color="#E5E5E5"> IOC create a log</font><font color="#CCCCCC"> free map and</font>

142
00:09:12,810 --> 00:09:21,930
the last one<font color="#E5E5E5"> the P multiple I'll talk</font>

143
00:09:16,530 --> 00:09:24,660
about<font color="#E5E5E5"> them later at the programmer not</font>

144
00:09:21,930 --> 00:09:28,709
as a hacker<font color="#E5E5E5"> at the program how can we</font>

145
00:09:24,660 --> 00:09:31,680
use<font color="#CCCCCC"> any map user interface I think you</font>

146
00:09:28,710 --> 00:09:36,410
should learn all the structures in the

147
00:09:31,680 --> 00:09:39,390
<font color="#CCCCCC">CUDA base</font><font color="#E5E5E5"> for example you can</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> those</font>

148
00:09:36,410 --> 00:09:42,150
structures in the MV map<font color="#E5E5E5"> I'll control</font>

149
00:09:39,390 --> 00:09:45,150
<font color="#E5E5E5">head fell for example the in the map</font>

150
00:09:42,150 --> 00:09:48,810
open<font color="#E5E5E5"> this function will create a pointer</font>

151
00:09:45,150 --> 00:09:51,390
to the in the map client structure under

152
00:09:48,810 --> 00:09:55,439
the in the map<font color="#CCCCCC"> icon to create</font><font color="#E5E5E5"> will</font>

153
00:09:51,390 --> 00:09:58,410
create in the map handle structure so

154
00:09:55,440 --> 00:10:00,780
this<font color="#E5E5E5"> is the same similar logic you can</font>

155
00:09:58,410 --> 00:10:08,430
find some other structures in<font color="#CCCCCC"> the code</font>

156
00:10:00,780 --> 00:10:10,800
<font color="#E5E5E5">base and after we create</font><font color="#CCCCCC"> an dialogue to</font>

157
00:10:08,430 --> 00:10:14,258
the<font color="#E5E5E5"> kernel memory buffer there is a way</font>

158
00:10:10,800 --> 00:10:17,498
to map<font color="#CCCCCC"> the</font><font color="#E5E5E5"> memory buffer into</font>

159
00:10:14,259 --> 00:10:21,459
<font color="#E5E5E5">you dismiss it</font><font color="#CCCCCC"> works together with some</font>

160
00:10:17,499 --> 00:10:24,939
Cisco's like the<font color="#E5E5E5"> main map for example</font><font color="#CCCCCC"> if</font>

161
00:10:21,459 --> 00:10:27,939
you invoke the maps is called<font color="#CCCCCC"> - to hold</font>

162
00:10:24,939 --> 00:10:30,789
<font color="#CCCCCC">a user's base address and then you can</font>

163
00:10:27,939 --> 00:10:35,319
send the<font color="#CCCCCC"> AL control commands</font><font color="#E5E5E5"> via the</font>

164
00:10:30,789 --> 00:10:38,829
only map user interface it will map the

165
00:10:35,319 --> 00:10:46,539
in the map memory buffers to<font color="#E5E5E5"> the user</font>

166
00:10:38,829 --> 00:10:49,269
space<font color="#CCCCCC"> also in the map is used to manage</font>

167
00:10:46,539 --> 00:10:51,879
the memory so there are different kind

168
00:10:49,269 --> 00:10:55,139
of memory<font color="#E5E5E5"> pool that in the map can</font>

169
00:10:51,879 --> 00:10:58,239
handle for example it<font color="#CCCCCC"> has different</font>

170
00:10:55,139 --> 00:11:01,720
<font color="#E5E5E5">policies for different size of memory</font>

171
00:10:58,239 --> 00:11:05,350
requirement<font color="#E5E5E5"> if the size is small it's</font>

172
00:11:01,720 --> 00:11:08,410
less than<font color="#E5E5E5"> one page it will prefer</font><font color="#CCCCCC"> to</font>

173
00:11:05,350 --> 00:11:11,889
allocate allocated from<font color="#E5E5E5"> the system</font><font color="#CCCCCC"> head</font>

174
00:11:08,410 --> 00:11:15,309
right if the<font color="#E5E5E5"> surgeon is very large it</font>

175
00:11:11,889 --> 00:11:17,259
will use the large hip type<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think it's</font>

176
00:11:15,309 --> 00:11:21,879
a very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> heart I will talk about</font><font color="#E5E5E5"> the</font>

177
00:11:17,259 --> 00:11:25,089
<font color="#E5E5E5">18 liter here like we'll talk about how</font>

178
00:11:21,879 --> 00:11:29,889
<font color="#E5E5E5">to allocate physically contiguous memory</font>

179
00:11:25,089 --> 00:11:34,169
pages<font color="#CCCCCC"> I think like</font><font color="#E5E5E5"> in the code base the</font>

180
00:11:29,889 --> 00:11:39,369
<font color="#CCCCCC">envy map Cape Cod mask</font><font color="#E5E5E5"> this this type of</font>

181
00:11:34,169 --> 00:11:42,160
<font color="#CCCCCC">hippo is a</font><font color="#E5E5E5"> very good candidate</font><font color="#CCCCCC"> we can</font>

182
00:11:39,369 --> 00:11:48,549
find some comments in the code base<font color="#E5E5E5"> it's</font>

183
00:11:42,160 --> 00:11:50,919
<font color="#E5E5E5">not that have odds our platform</font><font color="#CCCCCC"> defined</font>

184
00:11:48,549 --> 00:11:55,269
<font color="#CCCCCC">regions how physically contiguous memory</font>

185
00:11:50,919 --> 00:11:57,909
which are not managed by<font color="#CCCCCC"> the OS so it's</font>

186
00:11:55,269 --> 00:12:02,619
perfectly fine<font color="#CCCCCC"> so we can we can have</font><font color="#E5E5E5"> the</font>

187
00:11:57,909 --> 00:12:06,309
<font color="#CCCCCC">physically contiguous memory and if we</font>

188
00:12:02,619 --> 00:12:11,139
want to<font color="#E5E5E5"> allocate the</font><font color="#CCCCCC"> uncashed pages in</font>

189
00:12:06,309 --> 00:12:13,839
the code<font color="#E5E5E5"> we found this function and you</font>

190
00:12:11,139 --> 00:12:17,109
<font color="#E5E5E5">can</font><font color="#CCCCCC"> see here that since in the map has</font>

191
00:12:13,839 --> 00:12:21,249
its own cache management function so<font color="#CCCCCC"> oh</font>

192
00:12:17,109 --> 00:12:24,279
<font color="#E5E5E5">absolutely</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> we can have the</font>

193
00:12:21,249 --> 00:12:26,789
<font color="#CCCCCC">uncashed</font><font color="#E5E5E5"> pages so it seems it's very</font>

194
00:12:24,279 --> 00:12:26,789
good<font color="#E5E5E5"> of ours</font>

195
00:12:27,100 --> 00:12:35,540
mmm the<font color="#E5E5E5"> last aisle</font><font color="#CCCCCC"> coated the MV map</font>

196
00:12:31,430 --> 00:12:39,290
I'll see<font color="#E5E5E5"> ping or on P multiple handles</font>

197
00:12:35,540 --> 00:12:43,579
this this is a very<font color="#E5E5E5"> important feature in</font>

198
00:12:39,290 --> 00:12:47,599
the<font color="#CCCCCC"> indie map color module</font><font color="#E5E5E5"> it pins a</font>

199
00:12:43,580 --> 00:12:49,880
list of in the map handles and the maps

200
00:12:47,600 --> 00:12:53,330
the corresponding memory pages into the

201
00:12:49,880 --> 00:12:56,270
<font color="#CCCCCC">i/o vmm space my viewpoint of</font><font color="#E5E5E5"> this</font>

202
00:12:53,330 --> 00:12:59,890
interface is<font color="#E5E5E5"> used to communicate</font><font color="#CCCCCC"> between</font>

203
00:12:56,270 --> 00:13:02,810
<font color="#E5E5E5">the users based process under</font><font color="#CCCCCC"> the GPU</font>

204
00:12:59,890 --> 00:13:06,740
but here you need<font color="#CCCCCC"> to remember</font><font color="#E5E5E5"> you cannot</font>

205
00:13:02,810 --> 00:13:09,949
<font color="#CCCCCC">hump in the unallocated in the map</font>

206
00:13:06,740 --> 00:13:12,380
handle<font color="#E5E5E5"> if you do this you will trigger</font>

207
00:13:09,950 --> 00:13:14,930
the background the background<font color="#CCCCCC"> functions</font>

208
00:13:12,380 --> 00:13:20,870
so you cannot unpin it<font color="#E5E5E5"> before it is</font>

209
00:13:14,930 --> 00:13:23,329
allocated here we will review some

210
00:13:20,870 --> 00:13:26,720
knowing issues because<font color="#CCCCCC"> you know either</font>

211
00:13:23,330 --> 00:13:29,600
<font color="#E5E5E5">bug hunter</font><font color="#CCCCCC"> we are</font><font color="#E5E5E5"> familiar with the bug</font>

212
00:13:26,720 --> 00:13:32,149
hunting routine<font color="#E5E5E5"> we firstly we analyze</font>

213
00:13:29,600 --> 00:13:35,240
all<font color="#E5E5E5"> the known issues and the</font><font color="#CCCCCC"> fun</font><font color="#E5E5E5"> out of</font>

214
00:13:32,149 --> 00:13:38,209
<font color="#CCCCCC">the kuda patterns then we apply those</font>

215
00:13:35,240 --> 00:13:41,709
patterns to<font color="#E5E5E5"> the new code base and try to</font>

216
00:13:38,209 --> 00:13:44,649
<font color="#E5E5E5">find a new vulnerabilities that's why we</font>

217
00:13:41,709 --> 00:13:47,029
we will explain those vulnerabilities

218
00:13:44,649 --> 00:13:49,579
<font color="#E5E5E5">this is when the remedies are</font><font color="#CCCCCC"> very</font>

219
00:13:47,029 --> 00:13:54,589
typical<font color="#E5E5E5"> and a very interesting I will</font>

220
00:13:49,579 --> 00:13:58,899
<font color="#E5E5E5">talk to them one by one like the first</font>

221
00:13:54,589 --> 00:14:01,459
one is the first one<font color="#CCCCCC"> you know a Chinese</font>

222
00:13:58,899 --> 00:14:04,550
<font color="#E5E5E5">another Chinese security researcher</font>

223
00:14:01,459 --> 00:14:10,520
named the Peter<font color="#E5E5E5"> P who published this bug</font>

224
00:14:04,550 --> 00:14:18,260
at<font color="#CCCCCC"> ok who published this bug</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> each</font>

225
00:14:10,520 --> 00:14:21,470
<font color="#CCCCCC">high TDC herb from</font><font color="#E5E5E5"> my viewpoint</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> bug</font>

226
00:14:18,260 --> 00:14:24,439
<font color="#E5E5E5">is a very straightforward</font><font color="#CCCCCC"> no from</font><font color="#E5E5E5"> the</font>

227
00:14:21,470 --> 00:14:27,620
picture we<font color="#E5E5E5"> can see the number of sites</font>

228
00:14:24,440 --> 00:14:31,100
<font color="#CCCCCC">and the block size they</font><font color="#E5E5E5"> are totally user</font>

229
00:14:27,620 --> 00:14:33,770
controlled but before before the team

230
00:14:31,100 --> 00:14:37,130
<font color="#CCCCCC">malloc is caught</font><font color="#E5E5E5"> there is a lack</font><font color="#CCCCCC"> of</font>

231
00:14:33,770 --> 00:14:38,819
checks so this is a typical<font color="#CCCCCC"> hippo of</font>

232
00:14:37,130 --> 00:14:41,590
lower<font color="#E5E5E5"> bound</font>

233
00:14:38,820 --> 00:14:45,080
[Music]

234
00:14:41,590 --> 00:14:48,050
in Christianity<font color="#E5E5E5"> is that this part can be</font>

235
00:14:45,080 --> 00:14:51,680
directly it's plotted on the Tesla

236
00:14:48,050 --> 00:14:54,890
infotainment system but you know it is

237
00:14:51,680 --> 00:14:57,920
<font color="#E5E5E5">absolutely fixed on the Tegra 3 platform</font>

238
00:14:54,890 --> 00:15:00,140
<font color="#CCCCCC">I think it's a very bad news</font><font color="#E5E5E5"> because</font>

239
00:14:57,920 --> 00:15:03,829
<font color="#E5E5E5">someone</font><font color="#CCCCCC"> founded this vulnerability</font><font color="#E5E5E5"> and</font>

240
00:15:00,140 --> 00:15:06,589
he reported<font color="#CCCCCC"> it to Tesla I think maybe</font>

241
00:15:03,830 --> 00:15:10,460
they fixed all these kind of bugs

242
00:15:06,589 --> 00:15:13,670
I cannot<font color="#E5E5E5"> found</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> similar similar pattern</font>

243
00:15:10,460 --> 00:15:17,360
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Indy</font><font color="#E5E5E5"> hotel can you so I need to</font>

244
00:15:13,670 --> 00:15:19,910
move<font color="#E5E5E5"> on</font><font color="#CCCCCC"> to the Indy map module again</font><font color="#E5E5E5"> I'm</font>

245
00:15:17,360 --> 00:15:21,980
not just say that<font color="#CCCCCC"> in the map is much</font>

246
00:15:19,910 --> 00:15:27,350
more difficult design<font color="#E5E5E5"> in the host</font><font color="#CCCCCC"> to</font>

247
00:15:21,980 --> 00:15:29,839
control the second of money<font color="#E5E5E5"> they're also</font>

248
00:15:27,350 --> 00:15:34,310
interesting this<font color="#CCCCCC"> park actually it is</font>

249
00:15:29,839 --> 00:15:37,250
<font color="#E5E5E5">related to in the map and to</font><font color="#CCCCCC"> you if you</font>

250
00:15:34,310 --> 00:15:40,849
want to exploit to<font color="#CCCCCC"> it you need some</font>

251
00:15:37,250 --> 00:15:44,570
tricks firstly it's a risk condition

252
00:15:40,850 --> 00:15:46,880
based use after free<font color="#CCCCCC"> back from the</font>

253
00:15:44,570 --> 00:15:51,560
picture<font color="#CCCCCC"> we can see you need to</font>

254
00:15:46,880 --> 00:15:53,900
successfully<font color="#CCCCCC"> two</font><font color="#E5E5E5"> duplicated at the</font>

255
00:15:51,560 --> 00:15:58,510
handle at<font color="#CCCCCC"> the Pend Oreille you need to</font>

256
00:15:53,900 --> 00:16:03,020
play it and then at point B you should

257
00:15:58,510 --> 00:16:06,530
<font color="#E5E5E5">give the copy to</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> function it's a</font>

258
00:16:03,020 --> 00:16:10,370
<font color="#E5E5E5">destination to</font><font color="#CCCCCC"> read-only</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> it</font>

259
00:16:06,530 --> 00:16:12,800
will trigger failure and the the<font color="#E5E5E5"> the FD</font>

260
00:16:10,370 --> 00:16:16,370
handles<font color="#E5E5E5"> the rev counter will be one now</font>

261
00:16:12,800 --> 00:16:18,770
you have a heavy heaven<font color="#E5E5E5"> at the handle in</font>

262
00:16:16,370 --> 00:16:21,890
the user space<font color="#E5E5E5"> which can be free data</font>

263
00:16:18,770 --> 00:16:24,980
<font color="#E5E5E5">anytime you want so you can explore it</font>

264
00:16:21,890 --> 00:16:28,040
in the<font color="#E5E5E5"> future if you want</font><font color="#CCCCCC"> to know the</font>

265
00:16:24,980 --> 00:16:32,200
<font color="#E5E5E5">hold it house you details you can</font><font color="#CCCCCC"> find</font>

266
00:16:28,040 --> 00:16:32,199
out the tricks in the links<font color="#CCCCCC"> below</font>

267
00:16:33,490 --> 00:16:41,209
because<font color="#E5E5E5"> it's in the in the map module so</font>

268
00:16:37,730 --> 00:16:44,660
we we<font color="#E5E5E5"> need to review it well but you</font>

269
00:16:41,209 --> 00:16:48,160
<font color="#E5E5E5">know this</font><font color="#CCCCCC"> bug</font><font color="#E5E5E5"> is exploited in the Nexus</font>

270
00:16:44,660 --> 00:16:51,089
<font color="#CCCCCC">9 which is not the</font><font color="#E5E5E5"> same code abates with</font>

271
00:16:48,160 --> 00:16:56,129
with<font color="#E5E5E5"> tedlar</font><font color="#CCCCCC"> catalyzes similar</font>

272
00:16:51,089 --> 00:17:00,509
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> nexus a7 phone rising so we</font><font color="#E5E5E5"> found</font>

273
00:16:56,129 --> 00:17:03,329
<font color="#E5E5E5">that the</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> function total here and you</font>

274
00:17:00,509 --> 00:17:06,870
can see from<font color="#E5E5E5"> the picture you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> the</font>

275
00:17:03,329 --> 00:17:09,139
handle field<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> her</font><font color="#E5E5E5"> system file</font>

276
00:17:06,869 --> 00:17:13,049
descriptor it's<font color="#E5E5E5"> actually sirs</font><font color="#CCCCCC"> a</font>

277
00:17:09,140 --> 00:17:15,419
structure<font color="#CCCCCC"> pointer</font><font color="#E5E5E5"> so they are totally</font>

278
00:17:13,049 --> 00:17:18,510
not the<font color="#CCCCCC"> similar</font><font color="#E5E5E5"> logic in the tesla infra</font>

279
00:17:15,419 --> 00:17:22,620
terminal system we cannot<font color="#CCCCCC"> see</font><font color="#E5E5E5"> like here</font>

280
00:17:18,510 --> 00:17:25,589
I must say the idea cannot be borrowed<font color="#E5E5E5"> -</font>

281
00:17:22,619 --> 00:17:32,449
Tesla hacking we cannot fund this same

282
00:17:25,589 --> 00:17:36,450
issue<font color="#CCCCCC"> in the Tegra 3 code base and then</font>

283
00:17:32,450 --> 00:17:38,909
at that time I came<font color="#CCCCCC"> across to the famous</font>

284
00:17:36,450 --> 00:17:43,380
<font color="#E5E5E5">vulnerability name the real hammer or</font>

285
00:17:38,909 --> 00:17:46,200
drummer<font color="#CCCCCC"> the older of drummer published</font>

286
00:17:43,380 --> 00:17:49,409
<font color="#CCCCCC">that the virtual root exploit which can</font>

287
00:17:46,200 --> 00:17:52,580
be used on the<font color="#CCCCCC"> arm Linux</font><font color="#E5E5E5"> it's a new</font>

288
00:17:49,409 --> 00:17:55,140
attack that exploits the<font color="#E5E5E5"> real hammer</font>

289
00:17:52,580 --> 00:17:59,039
<font color="#CCCCCC">hardware vulnerability on Android</font>

290
00:17:55,140 --> 00:18:02,279
devices<font color="#E5E5E5"> like the nexus 5 the big</font>

291
00:17:59,039 --> 00:18:05,010
difference between<font color="#CCCCCC"> yo hammer</font><font color="#E5E5E5"> and the</font>

292
00:18:02,279 --> 00:18:09,059
drummer<font color="#E5E5E5"> we can see the big</font><font color="#CCCCCC"> difference</font>

293
00:18:05,010 --> 00:18:11,580
between exploiting the Intel device

294
00:18:09,059 --> 00:18:15,059
under<font color="#E5E5E5"> the arm device</font><font color="#CCCCCC"> it's how to</font>

295
00:18:11,580 --> 00:18:17,789
allocate the<font color="#CCCCCC"> uncashed physically</font>

296
00:18:15,059 --> 00:18:21,720
contiguous memory and the tests the bit

297
00:18:17,789 --> 00:18:25,860
flip so<font color="#CCCCCC"> drummer you the very</font><font color="#E5E5E5"> cool idea</font>

298
00:18:21,720 --> 00:18:28,409
<font color="#CCCCCC">it uses an interface in the mobile phone</font>

299
00:18:25,860 --> 00:18:32,668
<font color="#CCCCCC">you know in the</font><font color="#E5E5E5"> Android phone it uses</font>

300
00:18:28,409 --> 00:18:36,230
<font color="#E5E5E5">iron as its memory management so I'm</font>

301
00:18:32,669 --> 00:18:39,570
curious<font color="#E5E5E5"> is drama is playable on the</font>

302
00:18:36,230 --> 00:18:43,350
<font color="#CCCCCC">tesla infra terminal system on the Tegra</font>

303
00:18:39,570 --> 00:18:46,678
platform you know we have a key benefit

304
00:18:43,350 --> 00:18:50,309
remember we have talked it earlier in

305
00:18:46,679 --> 00:18:51,450
<font color="#E5E5E5">the map can also be used to</font><font color="#CCCCCC"> allocate the</font>

306
00:18:50,309 --> 00:18:54,720
encashed

307
00:18:51,450 --> 00:18:59,460
physically contiguous memory<font color="#CCCCCC"> it's a key</font>

308
00:18:54,720 --> 00:19:03,149
benefit then I decided<font color="#E5E5E5"> to have a try so</font>

309
00:18:59,460 --> 00:19:04,870
it's either<font color="#E5E5E5"> we adapted rotor</font><font color="#CCCCCC"> kernel</font>

310
00:19:03,149 --> 00:19:07,809
<font color="#CCCCCC">function and the butyrate</font><font color="#E5E5E5"> into</font>

311
00:19:04,870 --> 00:19:11,918
Nexus 7's<font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> and a test he does a</font>

312
00:19:07,809 --> 00:19:15,370
bit flip but I<font color="#E5E5E5"> tried actually</font><font color="#CCCCCC"> I've had a</font>

313
00:19:11,919 --> 00:19:19,539
lot of<font color="#E5E5E5"> times and the but the bad news</font><font color="#CCCCCC"> is</font>

314
00:19:15,370 --> 00:19:23,229
that<font color="#E5E5E5"> the beat cannot be flipped so this</font>

315
00:19:19,539 --> 00:19:27,970
<font color="#CCCCCC">packet</font><font color="#E5E5E5"> is not not work in the Tegra</font>

316
00:19:23,230 --> 00:19:31,570
platform after we reviewed<font color="#E5E5E5"> all the</font>

317
00:19:27,970 --> 00:19:35,020
<font color="#CCCCCC">knowing vulnerabilities so we realize</font>

318
00:19:31,570 --> 00:19:36,870
<font color="#CCCCCC">that we cannot easily exploited the</font>

319
00:19:35,020 --> 00:19:39,970
<font color="#E5E5E5">tesla kernel with a known vulnerability</font>

320
00:19:36,870 --> 00:19:42,969
<font color="#E5E5E5">so as that hammer we need</font><font color="#CCCCCC"> to find our</font>

321
00:19:39,970 --> 00:19:47,950
own<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> there days</font><font color="#E5E5E5"> and our</font><font color="#CCCCCC"> only</font>

322
00:19:42,970 --> 00:19:51,940
<font color="#CCCCCC">moderate</font><font color="#E5E5E5"> videos to be honest</font><font color="#CCCCCC"> after we</font>

323
00:19:47,950 --> 00:19:54,820
dig into the<font color="#E5E5E5"> source code we a must see</font>

324
00:19:51,940 --> 00:19:58,029
that the<font color="#CCCCCC"> CUDA quality of in the map</font>

325
00:19:54,820 --> 00:20:01,120
module is not<font color="#E5E5E5"> very good</font><font color="#CCCCCC"> so we found</font><font color="#E5E5E5"> some</font>

326
00:19:58,029 --> 00:20:04,659
interesting bugs<font color="#E5E5E5"> here I will introduce</font>

327
00:20:01,120 --> 00:20:08,529
<font color="#E5E5E5">some infrared box of different</font><font color="#CCCCCC"> app types</font>

328
00:20:04,659 --> 00:20:14,100
like<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first three parts then in the</font>

329
00:20:08,529 --> 00:20:18,850
<font color="#E5E5E5">end I will talk about a park the CVE</font>

330
00:20:14,100 --> 00:20:22,299
<font color="#CCCCCC">2017 60 to 61</font><font color="#E5E5E5"> this park is it's very</font>

331
00:20:18,850 --> 00:20:25,480
<font color="#E5E5E5">good we used it to route</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Tesla in 40</font>

332
00:20:22,299 --> 00:20:29,168
<font color="#E5E5E5">min the system actually is not it's more</font>

333
00:20:25,480 --> 00:20:34,419
than enough it's perfectly in our Tesla

334
00:20:29,169 --> 00:20:37,690
hacking research but<font color="#E5E5E5"> first I will talk</font>

335
00:20:34,419 --> 00:20:41,110
<font color="#CCCCCC">about the DOS</font><font color="#E5E5E5"> infer</font><font color="#CCCCCC"> leak box</font><font color="#E5E5E5"> the first</font>

336
00:20:37,690 --> 00:20:45,789
<font color="#E5E5E5">one</font><font color="#CCCCCC"> they in the map handle pointer in</font>

337
00:20:41,110 --> 00:20:48,908
<font color="#CCCCCC">Fernet here</font><font color="#E5E5E5"> I'll talk about it</font>

338
00:20:45,789 --> 00:20:51,820
firstly you from the picture<font color="#CCCCCC"> you can see</font>

339
00:20:48,909 --> 00:20:55,870
<font color="#E5E5E5">the</font><font color="#CCCCCC"> user can invoke the L control with</font>

340
00:20:51,820 --> 00:20:59,408
the command code in the map<font color="#E5E5E5"> IOC create</font>

341
00:20:55,870 --> 00:21:02,830
the in the map driver will retail handle

342
00:20:59,409 --> 00:21:05,200
to the user space<font color="#E5E5E5"> it is a handle for the</font>

343
00:21:02,830 --> 00:21:10,210
memory you will operate in the future

344
00:21:05,200 --> 00:21:12,990
<font color="#E5E5E5">like you can a</font><font color="#CCCCCC"> log of read</font><font color="#E5E5E5"> from the</font>

345
00:21:10,210 --> 00:21:16,929
<font color="#CCCCCC">macro define function we can see that</font>

346
00:21:12,990 --> 00:21:18,680
it's not same as the back<font color="#E5E5E5"> of found by</font>

347
00:21:16,929 --> 00:21:22,400
project<font color="#CCCCCC"> 0</font>

348
00:21:18,680 --> 00:21:27,040
it's a<font color="#CCCCCC"> actually it's a pointer from the</font>

349
00:21:22,400 --> 00:21:31,910
<font color="#CCCCCC">ref structure here we will have a clear</font>

350
00:21:27,040 --> 00:21:35,570
image<font color="#CCCCCC"> that we can see the the handle the</font>

351
00:21:31,910 --> 00:21:41,000
age<font color="#CCCCCC"> it's TTL arc from the key dialogue</font>

352
00:21:35,570 --> 00:21:44,649
is<font color="#CCCCCC"> the structure and then it have its</font>

353
00:21:41,000 --> 00:21:47,390
assigned<font color="#E5E5E5"> to the refs handle field and</font>

354
00:21:44,650 --> 00:21:52,370
finally they will return to their users

355
00:21:47,390 --> 00:21:55,850
base<font color="#E5E5E5"> right so it's a pattern in the</font>

356
00:21:52,370 --> 00:21:58,419
kernel mode<font color="#E5E5E5"> you a lock or</font><font color="#CCCCCC"> a structure</font>

357
00:21:55,850 --> 00:22:01,340
under then you retain the<font color="#E5E5E5"> structure</font>

358
00:21:58,420 --> 00:22:05,980
<font color="#E5E5E5">pointer to the user space</font>

359
00:22:01,340 --> 00:22:09,320
it absolutely<font color="#E5E5E5"> is a security issue right</font>

360
00:22:05,980 --> 00:22:13,490
from this picture<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can we can see that</font>

361
00:22:09,320 --> 00:22:18,830
the handle actually<font color="#CCCCCC"> it's a pointer to</font>

362
00:22:13,490 --> 00:22:21,950
the kernel shape the user can<font color="#CCCCCC"> create</font><font color="#E5E5E5"> any</font>

363
00:22:18,830 --> 00:22:25,159
in the map handle<font color="#E5E5E5"> at any time</font><font color="#CCCCCC"> it means</font>

364
00:22:21,950 --> 00:22:29,300
<font color="#E5E5E5">that maybe in the</font><font color="#CCCCCC"> future</font><font color="#E5E5E5"> we can use this</font>

365
00:22:25,160 --> 00:22:32,360
trick to predict the hip layout<font color="#E5E5E5"> all we</font>

366
00:22:29,300 --> 00:22:35,240
can do the hips<font color="#CCCCCC"> bury</font><font color="#E5E5E5"> right so so from</font>

367
00:22:32,360 --> 00:22:40,760
this picture you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> you can see the</font>

368
00:22:35,240 --> 00:22:44,510
<font color="#E5E5E5">handle you</font><font color="#CCCCCC"> can create it the second one</font>

369
00:22:40,760 --> 00:22:47,990
<font color="#CCCCCC">is another type of infrared box this</font>

370
00:22:44,510 --> 00:22:51,800
pocket is also very interesting<font color="#E5E5E5"> but it</font>

371
00:22:47,990 --> 00:22:56,450
works<font color="#E5E5E5"> in their earlier version of Tesla</font>

372
00:22:51,800 --> 00:22:59,450
<font color="#CCCCCC">kernel in</font><font color="#E5E5E5"> the version maybe</font><font color="#CCCCCC"> 2.06</font><font color="#E5E5E5"> there</font>

373
00:22:56,450 --> 00:23:03,170
is no domestic restriction a low

374
00:22:59,450 --> 00:23:06,410
<font color="#E5E5E5">privilege the user process can also read</font>

375
00:23:03,170 --> 00:23:08,720
<font color="#CCCCCC">the domestic output and the second</font><font color="#E5E5E5"> is</font>

376
00:23:06,410 --> 00:23:11,720
<font color="#E5E5E5">that background function you have</font><font color="#CCCCCC"> to</font>

377
00:23:08,720 --> 00:23:15,440
<font color="#CCCCCC">rather the oops message to the syslog</font>

378
00:23:11,720 --> 00:23:19,520
and<font color="#E5E5E5"> a lot of the user process</font><font color="#CCCCCC"> to die so</font>

379
00:23:15,440 --> 00:23:21,350
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we can imagine a scenario and which</font>

380
00:23:19,520 --> 00:23:24,639
is really happens

381
00:23:21,350 --> 00:23:27,980
firstly we will trigger a minibar<font color="#CCCCCC"> in the</font>

382
00:23:24,640 --> 00:23:32,150
dev slash in the<font color="#CCCCCC"> map we</font><font color="#E5E5E5"> already found</font>

383
00:23:27,980 --> 00:23:34,970
<font color="#CCCCCC">where is that</font><font color="#E5E5E5"> you know if we unpin the</font>

384
00:23:32,150 --> 00:23:37,160
the handle which is not allocated before

385
00:23:34,970 --> 00:23:39,950
<font color="#CCCCCC">it will trigger the background function</font>

386
00:23:37,160 --> 00:23:42,050
and the background will print out of the

387
00:23:39,950 --> 00:23:45,470
registers<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> stack</font><font color="#CCCCCC"> fees to the</font>

388
00:23:42,050 --> 00:23:48,770
syslog from the user space we<font color="#E5E5E5"> can read</font>

389
00:23:45,470 --> 00:23:51,500
the message<font color="#E5E5E5"> outside inside the</font><font color="#CCCCCC"> Palmer</font>

390
00:23:48,770 --> 00:23:53,720
contest<font color="#CCCCCC"> it means even</font><font color="#E5E5E5"> we are in the</font>

391
00:23:51,500 --> 00:23:57,220
<font color="#CCCCCC">Obama stander box we can read some</font>

392
00:23:53,720 --> 00:24:01,490
sensitive information<font color="#CCCCCC"> from this picture</font>

393
00:23:57,220 --> 00:24:05,240
<font color="#E5E5E5">we can see that this is a</font><font color="#CCCCCC"> bark trigger</font>

394
00:24:01,490 --> 00:24:07,100
in the<font color="#E5E5E5"> in the map I'll control and in</font>

395
00:24:05,240 --> 00:24:10,400
their user base so we can read the<font color="#E5E5E5"> lots</font>

396
00:24:07,100 --> 00:24:12,500
of<font color="#E5E5E5"> kernel address information right so</font>

397
00:24:10,400 --> 00:24:15,290
it's<font color="#CCCCCC"> very useful when you debug your</font>

398
00:24:12,500 --> 00:24:21,740
your kernel exploit and<font color="#CCCCCC"> like later very</font>

399
00:24:15,290 --> 00:24:24,920
much and this<font color="#E5E5E5"> is another</font><font color="#CCCCCC"> infer</font><font color="#E5E5E5"> League</font>

400
00:24:21,740 --> 00:24:29,000
<font color="#E5E5E5">park it's a common mistake in the memory</font>

401
00:24:24,920 --> 00:24:32,150
management<font color="#E5E5E5"> implementation it's like when</font>

402
00:24:29,000 --> 00:24:35,870
user<font color="#E5E5E5"> landed program requires memory</font>

403
00:24:32,150 --> 00:24:39,290
allocation via in the map in this in the

404
00:24:35,870 --> 00:24:42,530
map<font color="#E5E5E5"> doesn't clean</font><font color="#CCCCCC"> its dirty pages so</font>

405
00:24:39,290 --> 00:24:45,290
<font color="#CCCCCC">that we can request</font><font color="#E5E5E5"> a large chunk of</font>

406
00:24:42,530 --> 00:24:49,570
memory and search for the sensitive

407
00:24:45,290 --> 00:24:49,570
<font color="#E5E5E5">information in the allocated memory</font>

408
00:24:50,320 --> 00:24:57,770
<font color="#E5E5E5">let's look at how to get the</font><font color="#CCCCCC"> leak the</font>

409
00:24:53,660 --> 00:25:00,410
<font color="#E5E5E5">memory information firstly as always we</font>

410
00:24:57,770 --> 00:25:04,280
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> open the only map driver first</font>

411
00:25:00,410 --> 00:25:08,480
<font color="#E5E5E5">and then request handle to operate</font><font color="#CCCCCC"> the</font>

412
00:25:04,280 --> 00:25:12,080
memory<font color="#E5E5E5"> and it can be invoked by</font><font color="#CCCCCC"> the i/o</font>

413
00:25:08,480 --> 00:25:17,810
control<font color="#CCCCCC"> Cisco is the envy map create our</font>

414
00:25:12,080 --> 00:25:22,250
code<font color="#CCCCCC"> secondly we can</font><font color="#E5E5E5"> send the aisle code</font>

415
00:25:17,810 --> 00:25:25,220
<font color="#E5E5E5">the envy map I'll see a log and</font><font color="#CCCCCC"> ask the</font>

416
00:25:22,250 --> 00:25:31,310
in the map to to a locker the memory

417
00:25:25,220 --> 00:25:35,030
pages<font color="#CCCCCC"> a</font><font color="#E5E5E5"> family this is</font><font color="#CCCCCC"> a important step</font>

418
00:25:31,310 --> 00:25:37,129
you<font color="#CCCCCC"> should the color map</font><font color="#E5E5E5"> Cisco first to</font>

419
00:25:35,030 --> 00:25:41,270
get<font color="#E5E5E5"> a virtual address in the user space</font>

420
00:25:37,130 --> 00:25:44,830
<font color="#E5E5E5">and the instant of</font><font color="#CCCCCC"> the aisle</font><font color="#E5E5E5"> code map</font>

421
00:25:41,270 --> 00:25:46,750
our code with but the dress in fur

422
00:25:44,830 --> 00:25:49,689
the picture you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see we use the</font>

423
00:25:46,750 --> 00:25:52,990
<font color="#CCCCCC">written value to sender that</font><font color="#E5E5E5"> I will</font>

424
00:25:49,690 --> 00:25:56,890
control<font color="#E5E5E5"> his</font><font color="#CCCCCC"> car so now you can read the</font>

425
00:25:52,990 --> 00:26:02,080
<font color="#CCCCCC">memory out from the users base address a</font>

426
00:25:56,890 --> 00:26:04,750
<font color="#CCCCCC">DDR</font><font color="#E5E5E5"> variable so what we can see from the</font>

427
00:26:02,080 --> 00:26:07,270
memory<font color="#E5E5E5"> here we have a</font><font color="#CCCCCC"> demonstration</font>

428
00:26:04,750 --> 00:26:10,690
image<font color="#E5E5E5"> you can it will be searched for</font>

429
00:26:07,270 --> 00:26:14,560
some kernel pointers<font color="#CCCCCC"> like it starts with</font>

430
00:26:10,690 --> 00:26:17,140
the<font color="#CCCCCC"> C one</font><font color="#E5E5E5"> and we can find some something</font>

431
00:26:14,560 --> 00:26:20,980
<font color="#E5E5E5">very</font><font color="#CCCCCC"> interesting right</font><font color="#E5E5E5"> so many kernel</font>

432
00:26:17,140 --> 00:26:24,700
pointers in the memory and<font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> this</font>

433
00:26:20,980 --> 00:26:28,090
is<font color="#E5E5E5"> the third in</font><font color="#CCCCCC"> four neat parks here I</font>

434
00:26:24,700 --> 00:26:31,480
will give a<font color="#E5E5E5"> brief summary like the first</font>

435
00:26:28,090 --> 00:26:34,240
bug<font color="#E5E5E5"> can't just just can</font><font color="#CCCCCC"> leak her</font><font color="#E5E5E5"> pond</font>

436
00:26:31,480 --> 00:26:37,540
her to a condo structure<font color="#E5E5E5"> but the second</font>

437
00:26:34,240 --> 00:26:40,030
about<font color="#E5E5E5"> can legal panic contest which</font>

438
00:26:37,540 --> 00:26:44,649
includes all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> register information</font>

439
00:26:40,030 --> 00:26:47,800
<font color="#E5E5E5">under the</font><font color="#CCCCCC"> actress well this bug the last</font>

440
00:26:44,650 --> 00:26:50,530
one we<font color="#E5E5E5"> can</font><font color="#CCCCCC"> need an even more than 200</font>

441
00:26:47,800 --> 00:26:53,830
megabytes memory<font color="#E5E5E5"> it's not just to the</font>

442
00:26:50,530 --> 00:26:57,340
kernel memory<font color="#E5E5E5"> because of the memory</font>

443
00:26:53,830 --> 00:27:01,080
management<font color="#CCCCCC"> I think we can also leave</font>

444
00:26:57,340 --> 00:27:05,350
some inter processing information right

445
00:27:01,080 --> 00:27:08,710
at a good time maybe we can get us some

446
00:27:05,350 --> 00:27:11,050
<font color="#E5E5E5">token in the Tesla to a directory</font>

447
00:27:08,710 --> 00:27:16,690
routine into the system but I do not

448
00:27:11,050 --> 00:27:18,790
<font color="#E5E5E5">have this this kind of a lock this this</font>

449
00:27:16,690 --> 00:27:21,100
is another<font color="#CCCCCC"> vulnerability</font><font color="#E5E5E5"> this</font>

450
00:27:18,790 --> 00:27:25,270
vulnerability<font color="#E5E5E5"> is what we reported it to</font>

451
00:27:21,100 --> 00:27:28,480
<font color="#E5E5E5">Tesla it can be used to compute on the</font>

452
00:27:25,270 --> 00:27:31,720
Tesla infotainment system actually<font color="#E5E5E5"> it's</font>

453
00:27:28,480 --> 00:27:36,930
an arbitrary<font color="#E5E5E5"> addressed agreement in the</font>

454
00:27:31,720 --> 00:27:36,930
in the dev slash in the<font color="#CCCCCC"> map drum module</font>

455
00:27:36,960 --> 00:27:44,950
<font color="#E5E5E5">so let's look at the root cause of this</font>

456
00:27:40,180 --> 00:27:48,430
part<font color="#E5E5E5"> and firstly it's normal that a user</font>

457
00:27:44,950 --> 00:27:51,970
process to<font color="#CCCCCC"> a user processor open the</font>

458
00:27:48,430 --> 00:27:55,870
only map<font color="#E5E5E5"> driver and they invoke that</font><font color="#CCCCCC"> IO</font>

459
00:27:51,970 --> 00:27:57,980
<font color="#E5E5E5">can choose his car with in the map</font><font color="#CCCCCC"> I all</font>

460
00:27:55,870 --> 00:28:01,280
<font color="#E5E5E5">CP multiple our</font>

461
00:27:57,980 --> 00:28:02,480
<font color="#E5E5E5">code you can also find the</font><font color="#CCCCCC"> another</font>

462
00:28:01,280 --> 00:28:05,809
structure here

463
00:28:02,480 --> 00:28:08,570
we used this structure is what we used

464
00:28:05,809 --> 00:28:11,540
to sender the our code from the<font color="#CCCCCC"> users</font>

465
00:28:08,570 --> 00:28:18,830
base<font color="#E5E5E5"> there the there's an array of</font>

466
00:28:11,540 --> 00:28:23,450
handles because the<font color="#E5E5E5"> interface is used to</font>

467
00:28:18,830 --> 00:28:26,899
peer a of<font color="#CCCCCC"> envy map handles</font><font color="#E5E5E5"> so in here in</font>

468
00:28:23,450 --> 00:28:30,350
the for loop<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> validate all the</font>

469
00:28:26,900 --> 00:28:34,700
handles first<font color="#E5E5E5"> in</font><font color="#CCCCCC"> inner ring right if the</font>

470
00:28:30,350 --> 00:28:38,510
only<font color="#CCCCCC"> map of I validate</font><font color="#E5E5E5"> get this function</font>

471
00:28:34,700 --> 00:28:41,450
get<font color="#E5E5E5"> filled the loop will be created but</font>

472
00:28:38,510 --> 00:28:44,030
but the loop condition is is<font color="#E5E5E5"> something</font>

473
00:28:41,450 --> 00:28:46,790
is<font color="#E5E5E5"> very strange right the condition in</font>

474
00:28:44,030 --> 00:28:50,450
the wrong when the<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the variable right</font>

475
00:28:46,790 --> 00:28:53,809
<font color="#E5E5E5">when the right is not false it will quit</font>

476
00:28:50,450 --> 00:28:56,770
the loop but before that the in<font color="#CCCCCC"> test</font>

477
00:28:53,809 --> 00:29:00,799
that I<font color="#E5E5E5"> have the variable I the</font>

478
00:28:56,770 --> 00:29:03,410
incremental step is<font color="#E5E5E5"> already executed</font><font color="#CCCCCC"> it</font>

479
00:29:00,799 --> 00:29:06,830
means that the value<font color="#CCCCCC"> of eyes</font><font color="#E5E5E5"> already</font>

480
00:29:03,410 --> 00:29:12,380
equal to<font color="#CCCCCC"> one at this time even</font><font color="#E5E5E5"> the first</font>

481
00:29:06,830 --> 00:29:16,520
handle in the<font color="#E5E5E5"> race is wrong so let's see</font>

482
00:29:12,380 --> 00:29:19,850
what was what<font color="#CCCCCC"> is the next so we can see</font>

483
00:29:16,520 --> 00:29:23,418
that the<font color="#CCCCCC"> the value</font><font color="#E5E5E5"> of I is assigned</font><font color="#CCCCCC"> to</font>

484
00:29:19,850 --> 00:29:28,189
to the variable in<font color="#CCCCCC"> R so that</font><font color="#E5E5E5"> we can</font>

485
00:29:23,419 --> 00:29:31,280
enter another for loop<font color="#CCCCCC"> when we enter</font><font color="#E5E5E5"> the</font>

486
00:29:28,190 --> 00:29:35,270
for loop here the first handle the each

487
00:29:31,280 --> 00:29:38,629
when I equal<font color="#E5E5E5"> to</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> 0</font><font color="#CCCCCC"> the handle in the</font>

488
00:29:35,270 --> 00:29:45,200
array<font color="#E5E5E5"> is passed into the in the map</font>

489
00:29:38,630 --> 00:29:48,530
handle put function let's look at the in

490
00:29:45,200 --> 00:29:51,380
the map handle put function<font color="#E5E5E5"> in the map</font>

491
00:29:48,530 --> 00:29:54,290
handle<font color="#E5E5E5"> put this function in the used to</font>

492
00:29:51,380 --> 00:29:56,630
decrease the reference count<font color="#E5E5E5"> when the</font>

493
00:29:54,290 --> 00:30:01,129
rev counter<font color="#E5E5E5"> is 0 the handle will be</font>

494
00:29:56,630 --> 00:30:04,190
<font color="#E5E5E5">freed but</font><font color="#CCCCCC"> no the</font><font color="#E5E5E5"> address of the handle</font>

495
00:30:01,130 --> 00:30:09,320
is totally user controlled we can't go

496
00:30:04,190 --> 00:30:11,220
back<font color="#E5E5E5"> like</font><font color="#CCCCCC"> here we can find</font><font color="#E5E5E5"> that the in</font>

497
00:30:09,320 --> 00:30:13,678
the map in handle

498
00:30:11,220 --> 00:30:16,260
structure is totally user controller we

499
00:30:13,679 --> 00:30:25,710
<font color="#CCCCCC">can assign arbitrary value to the</font>

500
00:30:16,260 --> 00:30:28,289
handles<font color="#CCCCCC"> so here here we can decrease by</font>

501
00:30:25,710 --> 00:30:30,750
<font color="#E5E5E5">one in the arbitrary address which I</font>

502
00:30:28,289 --> 00:30:34,890
think this<font color="#E5E5E5"> is awesome</font><font color="#CCCCCC"> in you can see the</font>

503
00:30:30,750 --> 00:30:37,409
<font color="#CCCCCC">outbreak did return at</font><font color="#E5E5E5"> the time the the</font>

504
00:30:34,890 --> 00:30:40,559
ref<font color="#CCCCCC"> field that will</font><font color="#E5E5E5"> be decreased by one</font>

505
00:30:37,409 --> 00:30:43,530
<font color="#CCCCCC">I think</font><font color="#E5E5E5"> this is the root cause</font><font color="#CCCCCC"> of this</font>

506
00:30:40,559 --> 00:30:50,149
<font color="#CCCCCC">vulnerability actually it's a a b-tree</font>

507
00:30:43,530 --> 00:30:55,289
<font color="#CCCCCC">address decrement of vulnerability</font><font color="#E5E5E5"> and</font>

508
00:30:50,150 --> 00:30:57,809
so here is the code<font color="#E5E5E5"> snipped there is</font>

509
00:30:55,289 --> 00:31:00,240
<font color="#CCCCCC">code to trigger this kind of</font><font color="#E5E5E5"> a</font>

510
00:30:57,809 --> 00:31:03,720
vulnerability from the user base you can

511
00:31:00,240 --> 00:31:07,380
see<font color="#CCCCCC"> it's very very easy you can</font><font color="#E5E5E5"> assign</font>

512
00:31:03,720 --> 00:31:17,250
the address you<font color="#E5E5E5"> want to decreased in the</font>

513
00:31:07,380 --> 00:31:20,159
<font color="#E5E5E5">handles then we'll talk about how</font><font color="#CCCCCC"> to how</font>

514
00:31:17,250 --> 00:31:24,750
to exploit this bargain in the in the

515
00:31:20,159 --> 00:31:27,330
sandbox<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> qtk browser</font><font color="#E5E5E5"> contest here</font>

516
00:31:24,750 --> 00:31:31,440
we<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to handle</font><font color="#E5E5E5"> two kind of different</font>

517
00:31:27,330 --> 00:31:34,139
kernel versions but the the 2.06 is the

518
00:31:31,440 --> 00:31:40,200
<font color="#CCCCCC">easy</font><font color="#E5E5E5"> force but the tesla has upgraded</font>

519
00:31:34,140 --> 00:31:42,600
its kernel<font color="#E5E5E5"> from 2.6 to the 4.4 so in the</font>

520
00:31:40,200 --> 00:31:47,640
new kernel we<font color="#E5E5E5"> need to deal</font><font color="#CCCCCC"> with some</font>

521
00:31:42,600 --> 00:31:51,178
some<font color="#CCCCCC"> new medications here you can see</font>

522
00:31:47,640 --> 00:31:56,309
those new medications the<font color="#E5E5E5"> first</font><font color="#CCCCCC"> ones the</font>

523
00:31:51,179 --> 00:32:00,210
PA an emulation medication which means

524
00:31:56,309 --> 00:32:03,389
you cannot redirect the the IP address

525
00:32:00,210 --> 00:32:06,450
to<font color="#E5E5E5"> the PC</font><font color="#CCCCCC"> of the rest to the user</font><font color="#E5E5E5"> space</font>

526
00:32:03,390 --> 00:32:09,840
<font color="#E5E5E5">you needed to finish your exploit</font>

527
00:32:06,450 --> 00:32:11,490
shellcode in the kernel<font color="#CCCCCC"> mode and the</font>

528
00:32:09,840 --> 00:32:14,039
second one that<font color="#E5E5E5"> the message of</font>

529
00:32:11,490 --> 00:32:16,289
restriction we mentioned earlier that

530
00:32:14,039 --> 00:32:20,490
the messenger restriction is<font color="#CCCCCC"> by</font><font color="#E5E5E5"> default</font>

531
00:32:16,289 --> 00:32:24,390
<font color="#CCCCCC">on in the new kernel so we cannot read</font>

532
00:32:20,490 --> 00:32:27,360
the message<font color="#CCCCCC"> message out so it seems</font>

533
00:32:24,390 --> 00:32:31,290
we need to blindly<font color="#CCCCCC"> exploit</font><font color="#E5E5E5"> this part and</font>

534
00:32:27,360 --> 00:32:34,379
the last one is the temp folder<font color="#CCCCCC"> temp</font>

535
00:32:31,290 --> 00:32:37,710
folder<font color="#E5E5E5"> the temple folder is not as cute</font>

536
00:32:34,380 --> 00:32:40,620
bow which means you cannot<font color="#CCCCCC"> beauty you're</font>

537
00:32:37,710 --> 00:32:43,770
exploiting<font color="#CCCCCC"> your scent in a</font><font color="#E5E5E5"> standalone</font>

538
00:32:40,620 --> 00:32:46,340
<font color="#E5E5E5">binary and drop it into the temple</font>

539
00:32:43,770 --> 00:32:49,110
folder which is no typical in your our

540
00:32:46,340 --> 00:32:52,020
<font color="#CCCCCC">exploited rating button now</font><font color="#E5E5E5"> we cannot</font>

541
00:32:49,110 --> 00:32:54,990
build it into a standalone binary we

542
00:32:52,020 --> 00:33:00,690
needed to use<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> for our</font><font color="#CCCCCC"> pew</font>

543
00:32:54,990 --> 00:33:03,420
tricks<font color="#E5E5E5"> to do this kind of of stuff so in</font>

544
00:33:00,690 --> 00:33:06,330
conclusion if you want to exploit this

545
00:33:03,420 --> 00:33:09,840
bug<font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> write a</font><font color="#E5E5E5"> your exploit in</font>

546
00:33:06,330 --> 00:33:15,090
<font color="#E5E5E5">your like a pure</font><font color="#CCCCCC"> our PG edges in the</font>

547
00:33:09,840 --> 00:33:18,060
kernel mode the<font color="#CCCCCC"> affero</font><font color="#E5E5E5"> we'll talk about</font>

548
00:33:15,090 --> 00:33:22,610
how<font color="#E5E5E5"> to</font><font color="#CCCCCC"> PAP how to bypass those kind of</font>

549
00:33:18,060 --> 00:33:25,770
medications<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> pa</font><font color="#E5E5E5"> medication</font>

550
00:33:22,610 --> 00:33:29,219
<font color="#E5E5E5">actually it's very</font><font color="#CCCCCC"> funny</font>

551
00:33:25,770 --> 00:33:31,920
at that<font color="#E5E5E5"> time I think because the kernel</font>

552
00:33:29,220 --> 00:33:35,700
is by default enabled<font color="#CCCCCC"> this</font><font color="#E5E5E5"> kind of</font>

553
00:33:31,920 --> 00:33:38,550
medication<font color="#CCCCCC"> but we found that</font><font color="#E5E5E5"> the text</font>

554
00:33:35,700 --> 00:33:41,010
segment<font color="#E5E5E5"> the kernel code segment in the I</font>

555
00:33:38,550 --> 00:33:45,030
mean the code segment in the<font color="#E5E5E5"> kernel is</font>

556
00:33:41,010 --> 00:33:48,600
still rattleball what does it mean it

557
00:33:45,030 --> 00:33:52,080
means<font color="#E5E5E5"> that we can also use some typical</font>

558
00:33:48,600 --> 00:33:55,740
<font color="#E5E5E5">Linux kernel exploit</font><font color="#CCCCCC"> trick like we can</font>

559
00:33:52,080 --> 00:34:00,300
patch the kernel first<font color="#E5E5E5"> and like modify</font>

560
00:33:55,740 --> 00:34:04,440
the logic of<font color="#CCCCCC"> since</font><font color="#E5E5E5"> is us that is you ad</font>

561
00:34:00,300 --> 00:34:06,930
function to easily set is<font color="#CCCCCC"> UID</font><font color="#E5E5E5"> this</font>

562
00:34:04,440 --> 00:34:12,630
function with the argument with the

563
00:34:06,930 --> 00:34:15,870
permit argumented<font color="#E5E5E5"> 0 to get root so since</font>

564
00:34:12,630 --> 00:34:20,040
this medication is<font color="#E5E5E5"> useless</font><font color="#CCCCCC"> in the new</font>

565
00:34:15,870 --> 00:34:24,779
kernel<font color="#E5E5E5"> and here we'll talk about how to</font>

566
00:34:20,040 --> 00:34:26,850
disable<font color="#CCCCCC"> that the message restriction in</font>

567
00:34:24,780 --> 00:34:29,570
<font color="#E5E5E5">the new kernel there is a global</font>

568
00:34:26,850 --> 00:34:32,610
variable<font color="#E5E5E5"> name that the message restrict</font>

569
00:34:29,570 --> 00:34:35,850
<font color="#E5E5E5">from the from this picture we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font>

570
00:34:32,610 --> 00:34:40,410
this is variable

571
00:34:35,850 --> 00:34:43,020
the the value 1 means enable and zero

572
00:34:40,409 --> 00:34:47,339
means<font color="#CCCCCC"> disable so we</font><font color="#E5E5E5"> needed</font><font color="#CCCCCC"> to change</font><font color="#E5E5E5"> the</font>

573
00:34:43,020 --> 00:34:50,070
value from<font color="#E5E5E5"> 1 to 0 and it fits our</font><font color="#CCCCCC"> pocket</font>

574
00:34:47,340 --> 00:34:53,760
very well because<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know this park</font><font color="#E5E5E5"> we</font>

575
00:34:50,070 --> 00:34:56,760
have the bug it's a it's a arbitrary

576
00:34:53,760 --> 00:34:59,730
<font color="#E5E5E5">address decrement by 1 right we can</font>

577
00:34:56,760 --> 00:35:02,640
<font color="#E5E5E5">easily achieve this goal and at that</font>

578
00:34:59,730 --> 00:35:05,790
time there is no<font color="#CCCCCC"> a SLR</font><font color="#E5E5E5"> in the new kernel</font>

579
00:35:02,640 --> 00:35:08,430
so we can use this trick first<font color="#E5E5E5"> to badass</font>

580
00:35:05,790 --> 00:35:11,070
<font color="#E5E5E5">that the messaging restriction and as in</font>

581
00:35:08,430 --> 00:35:13,620
we can use<font color="#CCCCCC"> the message output to debug</font>

582
00:35:11,070 --> 00:35:20,940
our exploit it<font color="#E5E5E5"> saves a lot of time</font>

583
00:35:13,620 --> 00:35:23,910
actually<font color="#CCCCCC"> and</font><font color="#E5E5E5"> for how to disable the app</font>

584
00:35:20,940 --> 00:35:26,490
<font color="#CCCCCC">armour restriction this one is a</font><font color="#E5E5E5"> little</font>

585
00:35:23,910 --> 00:35:30,569
difficult<font color="#E5E5E5"> for us</font><font color="#CCCCCC"> cuz I know it's</font>

586
00:35:26,490 --> 00:35:34,799
different<font color="#E5E5E5"> from it's different from the</font>

587
00:35:30,570 --> 00:35:37,650
last slice of<font color="#E5E5E5"> the the the</font><font color="#CCCCCC"> messaging</font>

588
00:35:34,800 --> 00:35:40,950
restriction because in the app<font color="#CCCCCC"> Armour</font>

589
00:35:37,650 --> 00:35:43,380
contest so<font color="#E5E5E5"> you need that we</font><font color="#CCCCCC"> need to</font>

590
00:35:40,950 --> 00:35:45,750
change the value<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> app armor</font>

591
00:35:43,380 --> 00:35:48,300
<font color="#E5E5E5">enforced to the app hammer complain</font>

592
00:35:45,750 --> 00:35:53,790
which means we<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> change the value</font>

593
00:35:48,300 --> 00:35:56,360
<font color="#CCCCCC">from</font><font color="#E5E5E5"> 0 to</font><font color="#CCCCCC"> 1 which this is increment</font>

594
00:35:53,790 --> 00:35:59,730
operation<font color="#E5E5E5"> and other than</font><font color="#CCCCCC"> that decrement</font>

595
00:35:56,360 --> 00:36:04,500
operation because we need to<font color="#E5E5E5"> know add 1</font>

596
00:35:59,730 --> 00:36:07,740
to the 0 becomes 1<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we need transfer</font>

597
00:36:04,500 --> 00:36:10,140
our over<font color="#CCCCCC"> bar to another way like</font><font color="#E5E5E5"> which</font>

598
00:36:07,740 --> 00:36:15,930
we need a way<font color="#E5E5E5"> to change the logic</font><font color="#CCCCCC"> to</font>

599
00:36:10,140 --> 00:36:19,290
arbitrary read<font color="#E5E5E5"> and</font><font color="#CCCCCC"> write so here finally</font>

600
00:36:15,930 --> 00:36:23,819
we<font color="#E5E5E5"> found is a perfect way to</font><font color="#CCCCCC"> make the</font>

601
00:36:19,290 --> 00:36:29,220
bug<font color="#E5E5E5"> into a good execution first we found</font>

602
00:36:23,820 --> 00:36:32,280
the<font color="#CCCCCC"> Cisco name the SIS</font><font color="#E5E5E5"> except for in</font><font color="#CCCCCC"> the</font>

603
00:36:29,220 --> 00:36:35,790
Cisco<font color="#CCCCCC"> tebow it's an entry in the</font><font color="#E5E5E5"> Cisco</font>

604
00:36:32,280 --> 00:36:38,910
<font color="#CCCCCC">tebow</font><font color="#E5E5E5"> and it's rarely used in the Linux</font>

605
00:36:35,790 --> 00:36:42,870
kernel so it's very<font color="#E5E5E5"> safe to to modify it</font>

606
00:36:38,910 --> 00:36:46,319
and<font color="#CCCCCC"> that trigger our bug multiple times</font>

607
00:36:42,870 --> 00:36:49,290
with decreased by one by multiple times

608
00:36:46,320 --> 00:36:51,720
<font color="#E5E5E5">the entry address of this Cisco we</font>

609
00:36:49,290 --> 00:36:56,490
<font color="#E5E5E5">be you can</font><font color="#CCCCCC"> from the picture you can see</font>

610
00:36:51,720 --> 00:37:00,240
it kind pointed to the<font color="#CCCCCC"> BL x r3</font><font color="#E5E5E5"> so it's a</font>

611
00:36:56,490 --> 00:37:03,509
it's a jump<font color="#E5E5E5"> it's a jump to a register</font>

612
00:37:00,240 --> 00:37:07,529
and<font color="#CCCCCC"> the fall Cisco Cisco</font><font color="#E5E5E5"> you can control</font>

613
00:37:03,510 --> 00:37:13,080
so many registers like the<font color="#E5E5E5"> r3 register</font>

614
00:37:07,530 --> 00:37:16,470
right so if we assign a youthful address

615
00:37:13,080 --> 00:37:19,680
to the<font color="#CCCCCC"> astral register like the LP get</font>

616
00:37:16,470 --> 00:37:24,450
is here you can<font color="#E5E5E5"> find this in the reader</font>

617
00:37:19,680 --> 00:37:27,330
under<font color="#E5E5E5"> right gadgets we can make the code</font>

618
00:37:24,450 --> 00:37:31,049
execution<font color="#E5E5E5"> again to a</font><font color="#CCCCCC"> colonel read and</font>

619
00:37:27,330 --> 00:37:34,610
read back so so<font color="#CCCCCC"> to here exploited this</font>

620
00:37:31,050 --> 00:37:38,640
<font color="#CCCCCC">bug becomes very clear we can make the</font>

621
00:37:34,610 --> 00:37:42,230
<font color="#E5E5E5">agreement to to a good executions into a</font>

622
00:37:38,640 --> 00:37:47,220
<font color="#E5E5E5">habit</font><font color="#CCCCCC"> reckon a</font><font color="#E5E5E5"> memory read on the right</font>

623
00:37:42,230 --> 00:37:50,550
so here we<font color="#CCCCCC"> can see we can</font><font color="#E5E5E5"> figure out but</font>

624
00:37:47,220 --> 00:37:53,720
multiple<font color="#E5E5E5"> times to modify it we can</font>

625
00:37:50,550 --> 00:37:57,330
trigger it multiple times then the

626
00:37:53,720 --> 00:38:01,470
<font color="#E5E5E5">season except for will</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> will to</font>

627
00:37:57,330 --> 00:38:07,230
point<font color="#E5E5E5"> to a to a jump jump to the earth</font>

628
00:38:01,470 --> 00:38:10,290
<font color="#E5E5E5">three</font><font color="#CCCCCC"> reddest right and then because of</font>

629
00:38:07,230 --> 00:38:12,480
now we have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> ability to arbitrary</font>

630
00:38:10,290 --> 00:38:16,830
read<font color="#CCCCCC"> and write</font><font color="#E5E5E5"> at the kernel memory so</font>

631
00:38:12,480 --> 00:38:20,610
we use the red the red headed to patch

632
00:38:16,830 --> 00:38:23,279
the<font color="#CCCCCC"> sees I said I as a UID function is</font>

633
00:38:20,610 --> 00:38:27,150
it's a typical trigger in<font color="#E5E5E5"> the Linux</font>

634
00:38:23,280 --> 00:38:30,750
kernel<font color="#E5E5E5"> export so</font><font color="#CCCCCC"> backhauling</font><font color="#E5E5E5"> the set I</font>

635
00:38:27,150 --> 00:38:36,510
as you<font color="#CCCCCC"> ID with 0 in the user space</font><font color="#E5E5E5"> we</font>

636
00:38:30,750 --> 00:38:38,400
can't get our root shell and from this

637
00:38:36,510 --> 00:38:44,070
picture<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can you can you can friend</font>

638
00:38:38,400 --> 00:38:46,860
that we already exploited this this

639
00:38:44,070 --> 00:38:49,830
<font color="#E5E5E5">infotainment and we got her got her</font>

640
00:38:46,860 --> 00:38:52,070
shell with<font color="#CCCCCC"> the UID</font><font color="#E5E5E5"> the equal to root</font>

641
00:38:49,830 --> 00:38:56,360
equal to 0<font color="#E5E5E5"> head</font>

642
00:38:52,070 --> 00:38:56,360
so this is our goal

643
00:38:56,700 --> 00:39:04,529
and so<font color="#E5E5E5"> here in the end I should give us</font>

644
00:39:01,290 --> 00:39:07,980
special thanks to this paper actually<font color="#CCCCCC"> we</font>

645
00:39:04,530 --> 00:39:11,160
had to get into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Tegra platform we</font>

646
00:39:07,980 --> 00:39:13,980
read this paper<font color="#CCCCCC"> I enjoyed</font><font color="#E5E5E5"> ironing hazard</font>

647
00:39:11,160 --> 00:39:18,828
which is published on the<font color="#CCCCCC"> CCR's</font>

648
00:39:13,980 --> 00:39:21,930
conference in the year<font color="#E5E5E5"> 2016 as I said</font>

649
00:39:18,829 --> 00:39:24,599
you know<font color="#CCCCCC"> envy map is</font><font color="#E5E5E5"> a very</font><font color="#CCCCCC"> similar</font><font color="#E5E5E5"> to</font>

650
00:39:21,930 --> 00:39:28,828
the<font color="#E5E5E5"> Android the</font><font color="#CCCCCC"> Aryan mechanism so that</font>

651
00:39:24,599 --> 00:39:31,950
this bug pattern in the air in the end

652
00:39:28,829 --> 00:39:34,740
can also be used<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> in the map</font>

653
00:39:31,950 --> 00:39:37,319
module<font color="#E5E5E5"> so I borrowed some ideas from</font>

654
00:39:34,740 --> 00:39:42,810
this<font color="#E5E5E5"> paper and I</font><font color="#CCCCCC"> liked</font><font color="#E5E5E5"> it very much</font>

655
00:39:37,320 --> 00:39:45,030
you can have a look<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> in India so</font>

656
00:39:42,810 --> 00:39:48,470
during the research<font color="#E5E5E5"> my teammate and</font>

657
00:39:45,030 --> 00:39:52,079
<font color="#CCCCCC">allene he finished the final</font><font color="#E5E5E5"> exploit</font>

658
00:39:48,470 --> 00:39:54,180
because<font color="#E5E5E5"> the bug is</font><font color="#CCCCCC"> not complex</font><font color="#E5E5E5"> but we</font>

659
00:39:52,079 --> 00:39:57,660
have<font color="#E5E5E5"> only have a very short term to</font>

660
00:39:54,180 --> 00:40:01,200
finish our<font color="#E5E5E5"> work and we need to use the</font>

661
00:39:57,660 --> 00:40:02,549
full<font color="#CCCCCC"> outfit</font><font color="#E5E5E5"> fix to finish the exploit in</font>

662
00:40:01,200 --> 00:40:06,029
the<font color="#CCCCCC"> to DK browser</font>

663
00:40:02,550 --> 00:40:09,000
it's a<font color="#E5E5E5"> totally blind alley exploit so I</font>

664
00:40:06,030 --> 00:40:11,849
<font color="#E5E5E5">met him Italian very good at</font><font color="#CCCCCC"> exploiting</font>

665
00:40:09,000 --> 00:40:15,300
<font color="#CCCCCC">radians if he</font><font color="#E5E5E5"> finishes as a work and</font>

666
00:40:11,849 --> 00:40:18,240
<font color="#E5E5E5">also my colleague</font><font color="#CCCCCC"> named dejay home with</font>

667
00:40:15,300 --> 00:40:20,640
<font color="#CCCCCC">very good idea</font><font color="#E5E5E5"> under</font><font color="#CCCCCC"> the kernel exploit</font>

668
00:40:18,240 --> 00:40:23,790
actually I think<font color="#E5E5E5"> as so many famous</font>

669
00:40:20,640 --> 00:40:25,049
<font color="#E5E5E5">famous Linux kernel exploiter is written</font>

670
00:40:23,790 --> 00:40:28,890
by<font color="#E5E5E5"> him</font>

671
00:40:25,050 --> 00:40:31,859
so at that<font color="#CCCCCC"> time we only have experience</font>

672
00:40:28,890 --> 00:40:34,770
<font color="#E5E5E5">in how to disable the as the endings but</font>

673
00:40:31,859 --> 00:40:38,270
we are not familiar<font color="#E5E5E5"> with the epimer</font>

674
00:40:34,770 --> 00:40:40,650
<font color="#E5E5E5">tricks so he</font><font color="#CCCCCC"> told me</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> to pet has a</font>

675
00:40:38,270 --> 00:40:43,440
<font color="#CCCCCC">hammer' restriction in</font><font color="#E5E5E5"> the kernel mode</font>

676
00:40:40,650 --> 00:40:48,780
<font color="#E5E5E5">and also some other car hacking</font>

677
00:40:43,440 --> 00:40:50,820
researchers in<font color="#CCCCCC"> Yorba team ok</font><font color="#E5E5E5"> that's all</font>

678
00:40:48,780 --> 00:40:56,219
thank<font color="#CCCCCC"> you</font>

679
00:40:50,820 --> 00:40:56,219
[Applause]

