1
00:00:04,900 --> 00:00:08,950
just to make<font color="#CCCCCC"> sure we're on the same page</font>

2
00:00:07,029 --> 00:00:11,200
<font color="#E5E5E5">the firm is</font><font color="#CCCCCC"> the piece</font><font color="#E5E5E5"> of software which</font>

3
00:00:08,950 --> 00:00:14,469
<font color="#E5E5E5">is</font><font color="#CCCCCC"> running in the most privileges level</font>

4
00:00:11,200 --> 00:00:16,960
<font color="#E5E5E5">which</font><font color="#CCCCCC"> has which has</font><font color="#E5E5E5"> access</font><font color="#CCCCCC"> to the</font>

5
00:00:14,469 --> 00:00:19,090
hardware<font color="#CCCCCC"> if you're talking</font><font color="#E5E5E5"> about like a</font>

6
00:00:16,960 --> 00:00:24,000
system<font color="#CCCCCC"> forma it may have an access to</font>

7
00:00:19,090 --> 00:00:26,980
entire<font color="#E5E5E5"> hardware and make</font><font color="#CCCCCC"> up abilities to</font>

8
00:00:24,000 --> 00:00:29,230
<font color="#E5E5E5">break a system or implant the system</font>

9
00:00:26,980 --> 00:00:34,210
make it make it stealth<font color="#E5E5E5"> and persistent</font>

10
00:00:29,230 --> 00:00:37,690
implants<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> compromise</font><font color="#CCCCCC"> the framer in</font>

11
00:00:34,210 --> 00:00:40,570
the modern system x86 system typical

12
00:00:37,690 --> 00:00:42,070
<font color="#E5E5E5">attack</font><font color="#CCCCCC"> flaw looks like this</font><font color="#E5E5E5"> so there is</font>

13
00:00:40,570 --> 00:00:43,480
a remote code execution when the

14
00:00:42,070 --> 00:00:45,970
attacker<font color="#E5E5E5"> executes the code in the</font>

15
00:00:43,480 --> 00:00:47,919
context of the<font color="#E5E5E5"> some processes then it</font>

16
00:00:45,970 --> 00:00:50,710
make local privilege escalation to get

17
00:00:47,920 --> 00:00:53,710
the root or the kernel privileges<font color="#E5E5E5"> and</font>

18
00:00:50,710 --> 00:00:56,170
then the next<font color="#E5E5E5"> step can be you may want</font>

19
00:00:53,710 --> 00:01:02,350
to hide yourself<font color="#E5E5E5"> in the OS level you can</font>

20
00:00:56,170 --> 00:01:05,409
modify some<font color="#E5E5E5"> OS files or you can try to</font>

21
00:01:02,350 --> 00:01:05,950
own the<font color="#CCCCCC"> farmer and try to hide itself in</font>

22
00:01:05,409 --> 00:01:10,150
the<font color="#CCCCCC"> farm</font>

23
00:01:05,950 --> 00:01:12,280
why this is important because when you

24
00:01:10,150 --> 00:01:14,950
own<font color="#CCCCCC"> the farmer</font><font color="#E5E5E5"> you can persistently be</font>

25
00:01:12,280 --> 00:01:17,890
there<font color="#E5E5E5"> even even if your installation</font>

26
00:01:14,950 --> 00:01:20,700
system even if<font color="#E5E5E5"> someone changed the</font>

27
00:01:17,890 --> 00:01:23,440
harddrive<font color="#CCCCCC"> and</font><font color="#E5E5E5"> also it makes you also</font>

28
00:01:20,700 --> 00:01:25,300
<font color="#CCCCCC">stealthier because it will be not</font>

29
00:01:23,440 --> 00:01:29,230
visible from the<font color="#E5E5E5"> operation system</font><font color="#CCCCCC"> at all</font>

30
00:01:25,300 --> 00:01:33,399
so that's<font color="#E5E5E5"> what sort of the the</font>

31
00:01:29,230 --> 00:01:37,979
motivation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the talk</font><font color="#E5E5E5"> now let me try</font><font color="#CCCCCC"> to</font>

32
00:01:33,400 --> 00:01:37,979
switch to the<font color="#CCCCCC"> presenter presenting mode</font>

33
00:01:38,520 --> 00:01:45,030
great<font color="#E5E5E5"> another couple words about</font>

34
00:01:42,820 --> 00:01:47,169
motivation

35
00:01:45,030 --> 00:01:49,330
usually when you need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> investigate the</font>

36
00:01:47,170 --> 00:01:53,110
system you need<font color="#CCCCCC"> to real real access to</font>

37
00:01:49,330 --> 00:01:55,270
the system<font color="#E5E5E5"> and but then you as I</font>

38
00:01:53,110 --> 00:01:57,640
mentioned<font color="#CCCCCC"> want to may want to run the</font>

39
00:01:55,270 --> 00:02:00,399
<font color="#E5E5E5">test across over all of the instances</font>

40
00:01:57,640 --> 00:02:02,860
<font color="#E5E5E5">and then how you</font><font color="#CCCCCC"> can how we</font><font color="#E5E5E5"> can do that</font>

41
00:02:00,400 --> 00:02:04,930
so that was what we asked it on myself

42
00:02:02,860 --> 00:02:07,240
when<font color="#CCCCCC"> we start</font><font color="#E5E5E5"> this research in the end</font>

43
00:02:04,930 --> 00:02:09,670
we will<font color="#CCCCCC"> see that there is possible to</font>

44
00:02:07,240 --> 00:02:11,950
make an<font color="#E5E5E5"> investigation based on them from</font>

45
00:02:09,669 --> 00:02:15,099
updates<font color="#E5E5E5"> images so when the blender</font>

46
00:02:11,950 --> 00:02:17,768
<font color="#E5E5E5">listen</font><font color="#CCCCCC"> for updates</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can around some</font>

47
00:02:15,099 --> 00:02:18,579
static analysis or<font color="#E5E5E5"> even less heavier</font>

48
00:02:17,769 --> 00:02:22,000
than static<font color="#CCCCCC"> an hour</font>

49
00:02:18,580 --> 00:02:26,160
some sort of heuristics based on some

50
00:02:22,000 --> 00:02:28,630
signatures and you can find the specific

51
00:02:26,160 --> 00:02:31,120
instances of<font color="#CCCCCC"> venerability in</font><font color="#E5E5E5"> that</font>

52
00:02:28,630 --> 00:02:33,519
specific<font color="#E5E5E5"> images during the update so you</font>

53
00:02:31,120 --> 00:02:35,650
will see<font color="#E5E5E5"> that the new update will come</font>

54
00:02:33,520 --> 00:02:37,030
up with<font color="#E5E5E5"> the new vulnerabilities</font><font color="#CCCCCC"> all the</font>

55
00:02:35,650 --> 00:02:42,940
<font color="#CCCCCC">runner</font><font color="#E5E5E5"> abilities which isn't</font><font color="#CCCCCC"> bad</font><font color="#E5E5E5"> should</font>

56
00:02:37,030 --> 00:02:45,430
previously so a<font color="#E5E5E5"> little bit about</font><font color="#CCCCCC"> ufi</font>

57
00:02:42,940 --> 00:02:48,010
<font color="#E5E5E5">basis</font><font color="#CCCCCC"> firma</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> I mentioned about ufi</font>

58
00:02:45,430 --> 00:02:51,490
I mean system<font color="#CCCCCC"> framer or also</font><font color="#E5E5E5"> call it</font>

59
00:02:48,010 --> 00:02:54,090
bias it's all the same so where<font color="#E5E5E5"> it store</font>

60
00:02:51,490 --> 00:02:57,400
it it store it<font color="#E5E5E5"> in</font><font color="#CCCCCC"> an SPI controller</font>

61
00:02:54,090 --> 00:03:01,330
which<font color="#CCCCCC"> is connected</font><font color="#E5E5E5"> over SPI bus to the</font>

62
00:02:57,400 --> 00:03:04,930
<font color="#E5E5E5">PCH in in the typical x86 system I</font><font color="#CCCCCC"> will</font>

63
00:03:01,330 --> 00:03:06,820
<font color="#CCCCCC">call</font><font color="#E5E5E5"> spy for the future but it's not spy</font>

64
00:03:04,930 --> 00:03:12,280
with the Y in<font color="#E5E5E5"> the end it will be spy</font>

65
00:03:06,820 --> 00:03:14,890
with the<font color="#E5E5E5"> I in the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> so as SPI just to</font>

66
00:03:12,280 --> 00:03:20,830
make sure<font color="#CCCCCC"> that it's clear that</font><font color="#E5E5E5"> I'm not</font>

67
00:03:14,890 --> 00:03:24,640
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> spies</font><font color="#CCCCCC"> so there the</font>

68
00:03:20,830 --> 00:03:27,730
<font color="#E5E5E5">firmware living in</font><font color="#CCCCCC"> a spy controller and</font>

69
00:03:24,640 --> 00:03:32,018
special flash memory which is can<font color="#E5E5E5"> be</font>

70
00:03:27,730 --> 00:03:33,760
<font color="#CCCCCC">eight or sixteen megabytes</font><font color="#E5E5E5"> and this in</font>

71
00:03:32,019 --> 00:03:36,670
this memory<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> bunch of things</font>

72
00:03:33,760 --> 00:03:41,410
<font color="#CCCCCC">which you store</font><font color="#E5E5E5"> it including the system</font>

73
00:03:36,670 --> 00:03:43,869
from this storage is using for<font color="#E5E5E5"> the firm</font>

74
00:03:41,410 --> 00:03:46,390
<font color="#E5E5E5">of a specific</font><font color="#CCCCCC"> reason because</font><font color="#E5E5E5"> when the</font>

75
00:03:43,870 --> 00:03:49,120
system is booting up the<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> and the</font>

76
00:03:46,390 --> 00:03:51,160
hard<font color="#E5E5E5"> drive is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> initialized yet so you</font>

77
00:03:49,120 --> 00:03:54,130
need to<font color="#E5E5E5"> run the code from some storage</font>

78
00:03:51,160 --> 00:03:56,590
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is not memory and not hard drive</font>

79
00:03:54,130 --> 00:03:59,530
and there's a<font color="#E5E5E5"> special mechanism which</font><font color="#CCCCCC"> is</font>

80
00:03:56,590 --> 00:04:01,209
allowing to run the<font color="#CCCCCC"> from and from</font><font color="#E5E5E5"> the</font>

81
00:03:59,530 --> 00:04:03,730
<font color="#CCCCCC">spy man it fetches</font><font color="#E5E5E5"> a result vector</font>

82
00:04:01,209 --> 00:04:10,300
directly from the spine from<font color="#E5E5E5"> the</font>

83
00:04:03,730 --> 00:04:13,988
specific physical<font color="#E5E5E5"> address so and this</font>

84
00:04:10,300 --> 00:04:17,340
spy<font color="#E5E5E5"> chip which is basically as I</font>

85
00:04:13,989 --> 00:04:19,989
mentioned can<font color="#CCCCCC"> be</font><font color="#E5E5E5"> 8</font><font color="#CCCCCC"> or 16 or 32</font><font color="#E5E5E5"> Meg's</font>

86
00:04:17,339 --> 00:04:22,359
<font color="#E5E5E5">should have some protections because</font>

87
00:04:19,988 --> 00:04:24,700
<font color="#CCCCCC">it's not supposed to be accessible for</font>

88
00:04:22,360 --> 00:04:27,130
the<font color="#CCCCCC"> from there in zero because if you</font>

89
00:04:24,700 --> 00:04:29,320
can<font color="#E5E5E5"> access from there in zero spy</font>

90
00:04:27,130 --> 00:04:32,409
content then<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can overwrite entire</font>

91
00:04:29,320 --> 00:04:36,099
<font color="#E5E5E5">spy break your system or install</font>

92
00:04:32,409 --> 00:04:43,839
install your malicious code in a in the

93
00:04:36,099 --> 00:04:46,389
<font color="#E5E5E5">bias</font><font color="#CCCCCC"> so the the</font><font color="#E5E5E5"> SPI controller has the</font>

94
00:04:43,839 --> 00:04:49,419
<font color="#CCCCCC">regions</font><font color="#E5E5E5"> the regions is basically the</font>

95
00:04:46,389 --> 00:04:51,879
logical blocks<font color="#E5E5E5"> of them of the SPI</font>

96
00:04:49,419 --> 00:04:54,698
controller<font color="#E5E5E5"> and the minimum logical block</font>

97
00:04:51,879 --> 00:04:56,979
is<font color="#CCCCCC"> four kilobyte so first logical block</font>

98
00:04:54,699 --> 00:05:00,219
is<font color="#CCCCCC"> fledge descriptor which will</font><font color="#E5E5E5"> be the</font>

99
00:04:56,979 --> 00:05:01,330
main main sort of<font color="#E5E5E5"> object for the</font>

100
00:05:00,219 --> 00:05:04,419
discussion for today

101
00:05:01,330 --> 00:05:08,079
it also call it as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> spi descriptor I</font>

102
00:05:04,419 --> 00:05:10,329
<font color="#E5E5E5">will</font><font color="#CCCCCC"> codes by descriptor so the second</font>

103
00:05:08,079 --> 00:05:12,789
or<font color="#CCCCCC"> the second region is the BIOS or</font>

104
00:05:10,329 --> 00:05:17,259
<font color="#E5E5E5">system from a region then there is in</font>

105
00:05:12,789 --> 00:05:19,539
<font color="#CCCCCC">telomere region</font><font color="#E5E5E5"> there is also a</font><font color="#CCCCCC"> gba</font>

106
00:05:17,259 --> 00:05:22,119
region<font color="#CCCCCC"> gigabit ethernet controller</font>

107
00:05:19,539 --> 00:05:24,579
<font color="#E5E5E5">configuration</font><font color="#CCCCCC"> and there can be couple</font>

108
00:05:22,119 --> 00:05:27,969
more even embedded controller region can

109
00:05:24,579 --> 00:05:31,689
be<font color="#E5E5E5"> there so some of this region may have</font>

110
00:05:27,969 --> 00:05:34,929
at different<font color="#E5E5E5"> protections for example for</font>

111
00:05:31,689 --> 00:05:37,329
example<font color="#CCCCCC"> a bias region should</font><font color="#E5E5E5"> have</font>

112
00:05:34,929 --> 00:05:39,188
special<font color="#CCCCCC"> protection which is</font><font color="#E5E5E5"> called bias</font>

113
00:05:37,329 --> 00:05:43,360
<font color="#E5E5E5">control register protection which</font>

114
00:05:39,189 --> 00:05:45,699
support which supposed to mitigate all

115
00:05:43,360 --> 00:05:48,099
the attacks from direct access to<font color="#E5E5E5"> this</font>

116
00:05:45,699 --> 00:05:51,159
region so if someone tried to from the

117
00:05:48,099 --> 00:05:55,569
software<font color="#CCCCCC"> send transactions to this</font>

118
00:05:51,159 --> 00:05:57,909
memory<font color="#E5E5E5"> over over</font><font color="#CCCCCC"> MMA off of spy</font>

119
00:05:55,569 --> 00:06:01,539
controller<font color="#E5E5E5"> that's the way how software</font>

120
00:05:57,909 --> 00:06:03,669
communicate to the<font color="#E5E5E5"> SPI</font><font color="#CCCCCC"> in memory</font><font color="#E5E5E5"> aspect</font>

121
00:06:01,539 --> 00:06:06,519
controller<font color="#E5E5E5"> over the spy controller a</font>

122
00:06:03,669 --> 00:06:08,709
<font color="#E5E5E5">memory region that's the special memory</font>

123
00:06:06,519 --> 00:06:09,999
which allow you which<font color="#CCCCCC"> allow sorta to</font>

124
00:06:08,709 --> 00:06:13,209
<font color="#E5E5E5">communicate to the different device</font>

125
00:06:09,999 --> 00:06:16,749
<font color="#CCCCCC">including this one so when someone using</font>

126
00:06:13,209 --> 00:06:18,819
the SPI controller<font color="#E5E5E5"> Mme your agent</font><font color="#CCCCCC"> send</font>

127
00:06:16,749 --> 00:06:20,769
the right transaction to<font color="#CCCCCC"> the bias region</font>

128
00:06:18,819 --> 00:06:23,199
it's supposed to be dropped by the<font color="#E5E5E5"> bias</font>

129
00:06:20,769 --> 00:06:26,159
control register protection so that's

130
00:06:23,199 --> 00:06:28,329
how does the<font color="#CCCCCC"> BIOS should protect them</font>

131
00:06:26,159 --> 00:06:30,429
<font color="#E5E5E5">bias</font><font color="#CCCCCC"> vendors should protect the bias</font>

132
00:06:28,329 --> 00:06:32,889
also<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> another protection called</font>

133
00:06:30,429 --> 00:06:39,058
PR registers which is<font color="#E5E5E5"> allowing in the</font>

134
00:06:32,889 --> 00:06:41,649
inner level of<font color="#E5E5E5"> SPI controller set</font>

135
00:06:39,059 --> 00:06:43,570
permissions which<font color="#CCCCCC"> regions should</font><font color="#E5E5E5"> be</font>

136
00:06:41,649 --> 00:06:47,570
<font color="#E5E5E5">accessible or</font><font color="#CCCCCC"> not</font>

137
00:06:43,570 --> 00:06:49,880
<font color="#E5E5E5">but these PR registers may cover any</font>

138
00:06:47,570 --> 00:06:51,920
region<font color="#E5E5E5"> they can be applicable not just</font>

139
00:06:49,880 --> 00:06:54,770
for bias region<font color="#CCCCCC"> and there's another</font>

140
00:06:51,920 --> 00:06:57,380
protection<font color="#E5E5E5"> which I will explain</font><font color="#CCCCCC"> a little</font>

141
00:06:54,770 --> 00:06:59,030
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> later in</font><font color="#E5E5E5"> the level of the spider</font>

142
00:06:57,380 --> 00:07:01,070
script or<font color="#E5E5E5"> SPI descriptor</font><font color="#CCCCCC"> Arthur's</font>

143
00:06:59,030 --> 00:07:04,580
descriptor<font color="#CCCCCC"> and let's go</font><font color="#E5E5E5"> deep a little</font>

144
00:07:01,070 --> 00:07:06,650
bit<font color="#E5E5E5"> so spy descriptor</font><font color="#CCCCCC"> spi descriptor</font>

145
00:07:04,580 --> 00:07:09,560
<font color="#E5E5E5">another name is</font><font color="#CCCCCC"> flare descriptor start</font>

146
00:07:06,650 --> 00:07:12,140
in the region with index<font color="#E5E5E5"> 0 so first</font>

147
00:07:09,560 --> 00:07:15,080
region<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> 4 kilobyte</font><font color="#E5E5E5"> and this</font><font color="#CCCCCC"> 4</font>

148
00:07:12,140 --> 00:07:18,370
kilobyte<font color="#CCCCCC"> is basically has a specific</font>

149
00:07:15,080 --> 00:07:21,620
format<font color="#CCCCCC"> and it has the specific</font><font color="#E5E5E5"> things</font>

150
00:07:18,370 --> 00:07:25,370
inside<font color="#CCCCCC"> it</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> basic basically</font><font color="#E5E5E5"> first it</font>

151
00:07:21,620 --> 00:07:26,720
defines<font color="#E5E5E5"> all of the other regions layout</font>

152
00:07:25,370 --> 00:07:28,670
of<font color="#CCCCCC"> all of them are the regions so</font>

153
00:07:26,720 --> 00:07:32,030
basically spy descriptor is<font color="#CCCCCC"> telling sort</font>

154
00:07:28,670 --> 00:07:34,010
of here is this specific<font color="#CCCCCC"> region here is</font>

155
00:07:32,030 --> 00:07:36,530
this specific<font color="#CCCCCC"> region</font><font color="#E5E5E5"> and this sort of</font>

156
00:07:34,010 --> 00:07:38,360
important<font color="#E5E5E5"> because when someone when sort</font>

157
00:07:36,530 --> 00:07:41,119
<font color="#E5E5E5">we need to communicate even</font><font color="#CCCCCC"> bias need to</font>

158
00:07:38,360 --> 00:07:43,610
communicate to<font color="#CCCCCC"> different components it</font>

159
00:07:41,120 --> 00:07:45,290
<font color="#CCCCCC">nowhere is exact location of the</font><font color="#E5E5E5"> bias is</font>

160
00:07:43,610 --> 00:07:50,840
<font color="#E5E5E5">not</font><font color="#CCCCCC"> very exact location for other</font>

161
00:07:45,290 --> 00:07:52,400
regions<font color="#E5E5E5"> then it's also</font><font color="#CCCCCC"> SL already</font>

162
00:07:50,840 --> 00:07:54,710
mentioned<font color="#E5E5E5"> and store instruction which is</font>

163
00:07:52,400 --> 00:07:56,479
<font color="#CCCCCC">called an access control table</font><font color="#E5E5E5"> access</font>

164
00:07:54,710 --> 00:08:01,150
<font color="#E5E5E5">control table is the table</font><font color="#CCCCCC"> for the</font>

165
00:07:56,480 --> 00:08:05,270
permission<font color="#CCCCCC"> who can modify the content of</font>

166
00:08:01,150 --> 00:08:07,520
this<font color="#E5E5E5"> the different regions these</font>

167
00:08:05,270 --> 00:08:11,960
protection is applicable<font color="#E5E5E5"> after all of</font>

168
00:08:07,520 --> 00:08:14,090
the rest protection is mitigated or<font color="#E5E5E5"> not</font>

169
00:08:11,960 --> 00:08:16,099
mitigated the transaction<font color="#E5E5E5"> so when</font>

170
00:08:14,090 --> 00:08:18,049
transaction go into the<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the spy</font>

171
00:08:16,100 --> 00:08:20,300
<font color="#CCCCCC">country</font><font color="#E5E5E5"> to the spy memory it first</font>

172
00:08:18,050 --> 00:08:22,760
<font color="#CCCCCC">checks</font><font color="#E5E5E5"> for bias control register then it</font>

173
00:08:20,300 --> 00:08:25,400
checks for<font color="#CCCCCC"> PR registers and then if they</font>

174
00:08:22,760 --> 00:08:28,159
are<font color="#E5E5E5"> not set they they and then this</font>

175
00:08:25,400 --> 00:08:31,190
protection is checks in the if the

176
00:08:28,160 --> 00:08:37,460
transaction<font color="#CCCCCC"> should go on</font><font color="#E5E5E5"> also job and</font>

177
00:08:31,190 --> 00:08:40,010
not<font color="#CCCCCC"> know not have permissions to run why</font>

178
00:08:37,460 --> 00:08:42,290
it's so important<font color="#CCCCCC"> a really important</font>

179
00:08:40,010 --> 00:08:44,179
protection because bias control<font color="#E5E5E5"> register</font>

180
00:08:42,289 --> 00:08:47,329
covering only

181
00:08:44,179 --> 00:08:49,430
bias region<font color="#CCCCCC"> so basically all</font><font color="#E5E5E5"> of the rest</font>

182
00:08:47,330 --> 00:08:53,000
<font color="#E5E5E5">regions should be protected by this</font>

183
00:08:49,430 --> 00:08:55,520
access<font color="#E5E5E5"> control table</font><font color="#CCCCCC"> or including</font><font color="#E5E5E5"> the</font>

184
00:08:53,000 --> 00:08:56,990
<font color="#E5E5E5">spy descriptor itself because</font><font color="#CCCCCC"> PI</font>

185
00:08:55,520 --> 00:08:59,960
descriptor is one of the region

186
00:08:56,990 --> 00:09:02,690
so the spy descriptor containing<font color="#CCCCCC"> in this</font>

187
00:08:59,960 --> 00:09:05,660
<font color="#E5E5E5">table so if the spy descriptor by</font>

188
00:09:02,690 --> 00:09:08,960
mistake<font color="#E5E5E5"> allow software</font><font color="#CCCCCC"> or write itself</font>

189
00:09:05,660 --> 00:09:11,240
then<font color="#E5E5E5"> software can</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> this table and</font>

190
00:09:08,960 --> 00:09:13,660
open the<font color="#E5E5E5"> access to</font><font color="#CCCCCC"> other region for</font>

191
00:09:11,240 --> 00:09:19,670
<font color="#CCCCCC">example are either write to a me region</font>

192
00:09:13,660 --> 00:09:21,439
<font color="#E5E5E5">or</font><font color="#CCCCCC"> either right gb region</font><font color="#E5E5E5"> GB GB is a</font>

193
00:09:19,670 --> 00:09:26,120
gigabit controller configuration<font color="#CCCCCC"> and</font>

194
00:09:21,440 --> 00:09:28,400
nice manageability<font color="#E5E5E5"> engine region some of</font>

195
00:09:26,120 --> 00:09:31,220
<font color="#E5E5E5">this region is</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> documented some of</font>

196
00:09:28,400 --> 00:09:33,410
<font color="#E5E5E5">this region is less documented but for</font>

197
00:09:31,220 --> 00:09:35,150
bias region is has<font color="#E5E5E5"> really good</font>

198
00:09:33,410 --> 00:09:37,640
documentation<font color="#E5E5E5"> because the format of the</font>

199
00:09:35,150 --> 00:09:39,350
bias is<font color="#CCCCCC"> the standard and you have a</font>

200
00:09:37,640 --> 00:09:42,230
bunch<font color="#E5E5E5"> of tools which you</font><font color="#CCCCCC"> can run to</font>

201
00:09:39,350 --> 00:09:44,270
decode the bias region<font color="#CCCCCC"> any region is a</font>

202
00:09:42,230 --> 00:09:45,890
little bit documented but mostly

203
00:09:44,270 --> 00:09:48,079
reverse-engineer it<font color="#E5E5E5"> and there is also a</font>

204
00:09:45,890 --> 00:09:51,560
bunch<font color="#E5E5E5"> of tools which you can</font><font color="#CCCCCC"> use to take</font>

205
00:09:48,080 --> 00:09:53,600
a look inside an ami region<font color="#E5E5E5"> a GB region</font>

206
00:09:51,560 --> 00:09:55,160
<font color="#E5E5E5">doesn't have much documentation</font><font color="#CCCCCC"> but it</font>

207
00:09:53,600 --> 00:09:57,350
has at least<font color="#E5E5E5"> under commutation and</font><font color="#CCCCCC"> you</font>

208
00:09:55,160 --> 00:09:59,900
can check where is the MAC address<font color="#CCCCCC"> story</font>

209
00:09:57,350 --> 00:10:01,640
MAC address of the<font color="#E5E5E5"> gigabit</font><font color="#CCCCCC"> eternal</font>

210
00:09:59,900 --> 00:10:03,829
controller into integrated in the

211
00:10:01,640 --> 00:10:08,030
<font color="#E5E5E5">motherboard supposed to be stored in</font><font color="#CCCCCC"> gb</font>

212
00:10:03,830 --> 00:10:10,250
region<font color="#CCCCCC"> ok coming</font><font color="#E5E5E5"> back to this spy</font>

213
00:10:08,030 --> 00:10:12,680
descriptor of flash descriptor so this

214
00:10:10,250 --> 00:10:15,500
master control table<font color="#E5E5E5"> is highly important</font>

215
00:10:12,680 --> 00:10:17,390
because<font color="#CCCCCC"> it's responsible to protect the</font>

216
00:10:15,500 --> 00:10:19,490
third descriptor itself and another

217
00:10:17,390 --> 00:10:22,220
region for it access for<font color="#E5E5E5"> example any</font>

218
00:10:19,490 --> 00:10:24,050
region because a typical<font color="#CCCCCC"> system is not</font>

219
00:10:22,220 --> 00:10:26,180
allowing you even read any region and

220
00:10:24,050 --> 00:10:29,959
this despite descriptor is responsible

221
00:10:26,180 --> 00:10:32,329
for<font color="#E5E5E5"> this another really important</font>

222
00:10:29,960 --> 00:10:35,270
feature for<font color="#E5E5E5"> the farmer is the</font><font color="#CCCCCC"> former</font>

223
00:10:32,330 --> 00:10:37,820
update<font color="#CCCCCC"> when you want when the buyers a</font>

224
00:10:35,270 --> 00:10:39,350
<font color="#CCCCCC">vendor want to deliver</font><font color="#E5E5E5"> and fixes for the</font>

225
00:10:37,820 --> 00:10:41,120
security of<font color="#CCCCCC"> functional vulnerabilities</font>

226
00:10:39,350 --> 00:10:43,700
they need to have a secure way to

227
00:10:41,120 --> 00:10:45,950
deliver<font color="#E5E5E5"> update and the secure way to</font>

228
00:10:43,700 --> 00:10:47,690
deliver update is sort of documented

229
00:10:45,950 --> 00:10:50,240
right now<font color="#E5E5E5"> although it's not a standard</font>

230
00:10:47,690 --> 00:10:52,460
<font color="#E5E5E5">but it's almost a standard but according</font>

231
00:10:50,240 --> 00:10:55,760
<font color="#E5E5E5">to my knowledge it's still not standard</font>

232
00:10:52,460 --> 00:10:56,990
<font color="#CCCCCC">but it has really well-documented spec</font>

233
00:10:55,760 --> 00:10:59,480
it call it

234
00:10:56,990 --> 00:11:03,980
capsule update<font color="#E5E5E5"> so basically it's the</font>

235
00:10:59,480 --> 00:11:07,790
method<font color="#E5E5E5"> when and when you can stand out</font>

236
00:11:03,980 --> 00:11:10,430
more<font color="#E5E5E5"> or less in standard way</font><font color="#CCCCCC"> say ok I</font>

237
00:11:07,790 --> 00:11:15,010
want this<font color="#CCCCCC"> BIOS update will be delivered</font>

238
00:11:10,430 --> 00:11:17,989
this is the day<font color="#E5E5E5"> and one different</font>

239
00:11:15,010 --> 00:11:20,330
<font color="#E5E5E5">between this and like just any regular</font>

240
00:11:17,990 --> 00:11:22,910
updates<font color="#E5E5E5"> right which you can see that the</font>

241
00:11:20,330 --> 00:11:25,610
tool which supposed to run update is

242
00:11:22,910 --> 00:11:27,740
part of the package<font color="#CCCCCC"> so when this capsule</font>

243
00:11:25,610 --> 00:11:30,620
update is delivering the tool which is

244
00:11:27,740 --> 00:11:32,840
running<font color="#E5E5E5"> update is part of this capsule</font>

245
00:11:30,620 --> 00:11:35,090
<font color="#E5E5E5">so it's not just</font><font color="#CCCCCC"> a data which you want</font>

246
00:11:32,840 --> 00:11:38,570
to replace<font color="#E5E5E5"> it's also the tool which is</font>

247
00:11:35,090 --> 00:11:41,930
running<font color="#E5E5E5"> to</font><font color="#CCCCCC"> replace it a really important</font>

248
00:11:38,570 --> 00:11:44,450
<font color="#E5E5E5">part one another important part is this</font>

249
00:11:41,930 --> 00:11:48,770
capsule update is running during<font color="#E5E5E5"> the</font>

250
00:11:44,450 --> 00:11:53,720
boot<font color="#CCCCCC"> or upon death sleep</font><font color="#E5E5E5"> State</font>

251
00:11:48,770 --> 00:11:55,910
why because during<font color="#CCCCCC"> the boot</font><font color="#E5E5E5"> there the</font>

252
00:11:53,720 --> 00:11:57,860
<font color="#E5E5E5">device is not in so</font><font color="#CCCCCC"> I said yet and there</font>

253
00:11:55,910 --> 00:12:00,880
<font color="#E5E5E5">no one can send a diamond transaction</font>

254
00:11:57,860 --> 00:12:03,520
and overwrite the content on the new

255
00:12:00,880 --> 00:12:06,470
update which is<font color="#CCCCCC"> happening basically</font>

256
00:12:03,520 --> 00:12:09,079
<font color="#CCCCCC">running during</font><font color="#E5E5E5"> the boot is allowing you</font>

257
00:12:06,470 --> 00:12:12,680
<font color="#E5E5E5">runnin is much more secure state than</font>

258
00:12:09,080 --> 00:12:14,750
<font color="#E5E5E5">running during the runtime</font><font color="#CCCCCC"> if you but</font>

259
00:12:12,680 --> 00:12:17,770
there is one mistake<font color="#E5E5E5"> there's couple</font>

260
00:12:14,750 --> 00:12:20,810
mistake which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> vendor typically makes</font>

261
00:12:17,770 --> 00:12:23,300
so first is they try<font color="#E5E5E5"> to create this</font>

262
00:12:20,810 --> 00:12:27,800
update mechanism at<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> because it's</font>

263
00:12:23,300 --> 00:12:30,949
<font color="#E5E5E5">sort of better for usability these open</font>

264
00:12:27,800 --> 00:12:33,620
stood two issues here<font color="#E5E5E5"> one is during</font>

265
00:12:30,950 --> 00:12:37,850
runtime malicious device which has<font color="#E5E5E5"> DMA</font>

266
00:12:33,620 --> 00:12:44,600
capabilities like<font color="#CCCCCC"> USBC</font><font color="#E5E5E5"> dongles on other</font>

267
00:12:37,850 --> 00:12:47,930
<font color="#E5E5E5">PCIe devices can overwrite can override</font>

268
00:12:44,600 --> 00:12:50,810
the memory of the update<font color="#E5E5E5"> after</font><font color="#CCCCCC"> it checks</font>

269
00:12:47,930 --> 00:12:54,530
but before it<font color="#CCCCCC"> starts updating the the</font>

270
00:12:50,810 --> 00:12:57,589
bias<font color="#E5E5E5"> so sort of rest condition</font><font color="#CCCCCC"> when our</font>

271
00:12:54,530 --> 00:12:59,540
ability<font color="#E5E5E5"> another problem is that the BIOS</font>

272
00:12:57,590 --> 00:13:02,240
update is not really fast

273
00:12:59,540 --> 00:13:04,760
<font color="#E5E5E5">it tooks about maybe took about between</font>

274
00:13:02,240 --> 00:13:07,180
<font color="#E5E5E5">30 second and two</font><font color="#CCCCCC"> minutes</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> it</font>

275
00:13:04,760 --> 00:13:10,640
<font color="#E5E5E5">took</font><font color="#CCCCCC"> so long</font><font color="#E5E5E5"> it takes so long</font>

276
00:13:07,180 --> 00:13:14,479
<font color="#E5E5E5">BIOS vendor they split this process to</font>

277
00:13:10,640 --> 00:13:16,730
two couple steps and<font color="#E5E5E5"> between these steps</font>

278
00:13:14,480 --> 00:13:19,280
<font color="#CCCCCC">the usual didn't enable</font><font color="#E5E5E5"> protection back</font>

279
00:13:16,730 --> 00:13:21,470
so when they<font color="#CCCCCC"> delivering are they they</font>

280
00:13:19,280 --> 00:13:22,740
<font color="#CCCCCC">disable the disable protection for the</font>

281
00:13:21,470 --> 00:13:25,020
bias region but

282
00:13:22,740 --> 00:13:28,050
they didn't<font color="#CCCCCC"> enable it back</font><font color="#E5E5E5"> until the</font>

283
00:13:25,020 --> 00:13:31,890
last step came<font color="#E5E5E5"> so you some</font><font color="#CCCCCC"> ring zero</font>

284
00:13:28,050 --> 00:13:33,449
code<font color="#CCCCCC"> run between</font><font color="#E5E5E5"> these steps it couldn't</font>

285
00:13:31,890 --> 00:13:35,520
just<font color="#CCCCCC"> overwrite</font><font color="#E5E5E5"> bias</font><font color="#CCCCCC"> directed</font><font color="#E5E5E5"> without</font>

286
00:13:33,450 --> 00:13:38,820
zero protection<font color="#E5E5E5"> that's another vector</font>

287
00:13:35,520 --> 00:13:43,410
<font color="#E5E5E5">which is typically we seen in some</font><font color="#CCCCCC"> of</font>

288
00:13:38,820 --> 00:13:47,399
the BIOS update mechanisms<font color="#E5E5E5"> another thing</font>

289
00:13:43,410 --> 00:13:50,459
is that<font color="#CCCCCC"> Flair descriptor should be only</font>

290
00:13:47,399 --> 00:13:52,020
always<font color="#CCCCCC"> read-only</font><font color="#E5E5E5"> that table which I was</font>

291
00:13:50,459 --> 00:13:53,790
<font color="#E5E5E5">mentioned in a slide before should</font>

292
00:13:52,020 --> 00:13:55,709
always protect the descriptor itself

293
00:13:53,790 --> 00:13:58,649
<font color="#E5E5E5">this</font><font color="#CCCCCC"> crater is</font><font color="#E5E5E5"> always should be read</font>

294
00:13:55,709 --> 00:14:00,810
<font color="#E5E5E5">only and</font><font color="#CCCCCC"> just during the</font><font color="#E5E5E5"> manufacturing</font>

295
00:13:58,649 --> 00:14:05,880
phase that the scripture should<font color="#CCCCCC"> be</font>

296
00:14:00,810 --> 00:14:08,459
modified<font color="#CCCCCC"> so how</font><font color="#E5E5E5"> to check this</font>

297
00:14:05,880 --> 00:14:11,310
vulnerabilities at least<font color="#E5E5E5"> the basic one</font>

298
00:14:08,459 --> 00:14:14,819
which<font color="#CCCCCC"> we explained it in a</font><font color="#E5E5E5"> couple</font><font color="#CCCCCC"> slides</font>

299
00:14:11,310 --> 00:14:16,319
before<font color="#E5E5E5"> you you get a system and then</font>

300
00:14:14,820 --> 00:14:18,540
you're<font color="#E5E5E5"> on different tool to check</font>

301
00:14:16,320 --> 00:14:21,480
configuration you're on different<font color="#E5E5E5"> tool</font>

302
00:14:18,540 --> 00:14:23,579
to update your bias and<font color="#CCCCCC"> you sort of</font>

303
00:14:21,480 --> 00:14:24,990
investigated how does it go<font color="#CCCCCC"> is the</font>

304
00:14:23,580 --> 00:14:27,810
chicken signature is it going over

305
00:14:24,990 --> 00:14:28,980
<font color="#CCCCCC">runtime</font><font color="#E5E5E5"> is going over boot time then</font>

306
00:14:27,810 --> 00:14:31,349
you're on<font color="#E5E5E5"> chip set to check</font>

307
00:14:28,980 --> 00:14:33,209
configuration so when you have a<font color="#E5E5E5"> system</font>

308
00:14:31,350 --> 00:14:35,670
<font color="#E5E5E5">it's pretty easy to find and there is a</font>

309
00:14:33,209 --> 00:14:37,439
bunch<font color="#E5E5E5"> of example from the industry which</font>

310
00:14:35,670 --> 00:14:39,930
we see<font color="#CCCCCC"> then the people</font><font color="#E5E5E5"> just run the</font>

311
00:14:37,440 --> 00:14:41,790
tools<font color="#E5E5E5"> find a vulnerability immediately</font>

312
00:14:39,930 --> 00:14:50,579
which you allow which allow you to

313
00:14:41,790 --> 00:14:52,980
implant system<font color="#E5E5E5"> so but let's let think</font>

314
00:14:50,579 --> 00:14:55,819
about how we can<font color="#CCCCCC"> apply can apply the</font>

315
00:14:52,980 --> 00:15:01,890
same theory but to find vulnerability

316
00:14:55,820 --> 00:15:04,260
before<font color="#E5E5E5"> in in in in a way only based on</font>

317
00:15:01,890 --> 00:15:06,449
the image without system before<font color="#CCCCCC"> this</font>

318
00:15:04,260 --> 00:15:11,520
image even<font color="#E5E5E5"> will will be delivered to the</font>

319
00:15:06,450 --> 00:15:12,740
system<font color="#E5E5E5"> over update so this is not the</font>

320
00:15:11,520 --> 00:15:16,370
first work

321
00:15:12,740 --> 00:15:19,829
<font color="#CCCCCC">in this area there was</font><font color="#E5E5E5"> awesome working</font>

322
00:15:16,370 --> 00:15:23,100
2014 by Teddy Reed who<font color="#CCCCCC"> made the first</font>

323
00:15:19,829 --> 00:15:26,880
sort of scale analysis of the<font color="#CCCCCC"> ufi firmer</font>

324
00:15:23,100 --> 00:15:29,579
<font color="#E5E5E5">so we take a look on</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> also reuse</font>

325
00:15:26,880 --> 00:15:31,380
some of<font color="#CCCCCC"> the materials and there is a</font>

326
00:15:29,579 --> 00:15:33,689
bunch of<font color="#E5E5E5"> tools which you can use</font><font color="#CCCCCC"> to</font>

327
00:15:31,380 --> 00:15:35,500
decode<font color="#E5E5E5"> the</font><font color="#CCCCCC"> UF I base it from ER</font><font color="#E5E5E5"> so</font>

328
00:15:33,690 --> 00:15:37,210
that's also<font color="#E5E5E5"> not new so</font>

329
00:15:35,500 --> 00:15:41,290
can just<font color="#E5E5E5"> run</font><font color="#CCCCCC"> it and see every each</font>

330
00:15:37,210 --> 00:15:44,200
component from<font color="#E5E5E5"> the UFO</font><font color="#CCCCCC"> basis from</font><font color="#E5E5E5"> which</font>

331
00:15:41,290 --> 00:15:47,800
you which you<font color="#CCCCCC"> read it from the spi</font>

332
00:15:44,200 --> 00:15:50,560
memory and and you can make and forensic

333
00:15:47,800 --> 00:15:52,870
on down<font color="#E5E5E5"> you can put the</font><font color="#CCCCCC"> whitelist</font><font color="#E5E5E5"> for</font>

334
00:15:50,560 --> 00:15:54,459
them so it's<font color="#E5E5E5"> not completely new</font><font color="#CCCCCC"> area so</font>

335
00:15:52,870 --> 00:15:59,350
there is something which<font color="#CCCCCC"> is restarted</font>

336
00:15:54,460 --> 00:16:03,670
from<font color="#E5E5E5"> so</font><font color="#CCCCCC"> in now each year we have</font><font color="#E5E5E5"> two</font>

337
00:15:59,350 --> 00:16:06,400
<font color="#E5E5E5">steps which we need to do to build the</font>

338
00:16:03,670 --> 00:16:10,390
final<font color="#E5E5E5"> algorithm</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> identify the</font>

339
00:16:06,400 --> 00:16:11,860
<font color="#CCCCCC">venerable images so our first step</font><font color="#E5E5E5"> is</font>

340
00:16:10,390 --> 00:16:14,590
easier to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> it</font>

341
00:16:11,860 --> 00:16:16,990
we basically need<font color="#CCCCCC"> to download all of the</font>

342
00:16:14,590 --> 00:16:20,290
images from<font color="#CCCCCC"> the all of the</font><font color="#E5E5E5"> vendors</font>

343
00:16:16,990 --> 00:16:24,340
website<font color="#E5E5E5"> then we need to check which one</font>

344
00:16:20,290 --> 00:16:28,449
of them is not sign<font color="#CCCCCC"> it and which one of</font>

345
00:16:24,340 --> 00:16:32,550
them has full<font color="#E5E5E5"> a wrong image full spy</font>

346
00:16:28,450 --> 00:16:36,250
<font color="#CCCCCC">rome</font><font color="#E5E5E5"> dump and which one of them has</font>

347
00:16:32,550 --> 00:16:39,459
specific characteristics<font color="#E5E5E5"> or specific</font>

348
00:16:36,250 --> 00:16:43,120
<font color="#CCCCCC">fills</font><font color="#E5E5E5"> in a spy descriptor that's pretty</font>

349
00:16:39,460 --> 00:16:45,040
that's<font color="#E5E5E5"> pretty simple steps</font><font color="#CCCCCC"> and when we</font>

350
00:16:43,120 --> 00:16:47,320
run it automatically for<font color="#E5E5E5"> all of the our</font>

351
00:16:45,040 --> 00:16:49,839
images we can get some statistics<font color="#CCCCCC"> out of</font>

352
00:16:47,320 --> 00:16:52,120
that but then it will<font color="#E5E5E5"> be next step which</font>

353
00:16:49,839 --> 00:16:53,710
is<font color="#E5E5E5"> hard to automate we need to actually</font>

354
00:16:52,120 --> 00:16:55,750
<font color="#CCCCCC">verify this theory you will have</font>

355
00:16:53,710 --> 00:16:57,940
verified the<font color="#E5E5E5"> cell</font><font color="#CCCCCC"> grid</font><font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out false</font>

356
00:16:55,750 --> 00:16:59,890
positives false negatives so on<font color="#E5E5E5"> their</font>

357
00:16:57,940 --> 00:17:01,600
second step around<font color="#E5E5E5"> in a system and check</font>

358
00:16:59,890 --> 00:17:07,119
what what<font color="#E5E5E5"> did you find is it correct or</font>

359
00:17:01,600 --> 00:17:09,270
not<font color="#E5E5E5"> so what you're looking for</font>

360
00:17:07,119 --> 00:17:12,520
<font color="#CCCCCC">as I mentioned we're looking for</font>

361
00:17:09,270 --> 00:17:14,560
unsigned image what this mean<font color="#CCCCCC"> is</font><font color="#E5E5E5"> mean</font>

362
00:17:12,520 --> 00:17:19,990
<font color="#E5E5E5">that someone can modify the image and</font>

363
00:17:14,560 --> 00:17:23,708
<font color="#CCCCCC">flash with</font><font color="#E5E5E5"> the malicious bias or using</font>

364
00:17:19,990 --> 00:17:26,260
<font color="#CCCCCC">them the classical the</font><font color="#E5E5E5"> the vendors</font>

365
00:17:23,709 --> 00:17:29,170
<font color="#E5E5E5">update - so basically vendors deliver</font>

366
00:17:26,260 --> 00:17:31,300
update<font color="#CCCCCC"> to attacker can grab this tool</font>

367
00:17:29,170 --> 00:17:38,370
can modify the image<font color="#E5E5E5"> and</font><font color="#CCCCCC"> flesh this</font>

368
00:17:31,300 --> 00:17:42,850
image to<font color="#E5E5E5"> the bias</font><font color="#CCCCCC"> second is because this</font>

369
00:17:38,370 --> 00:17:45,100
<font color="#CCCCCC">image is ensign it and we make</font><font color="#E5E5E5"> some</font>

370
00:17:42,850 --> 00:17:47,949
assumption that<font color="#E5E5E5"> if there's not</font><font color="#CCCCCC"> a real</font>

371
00:17:45,100 --> 00:17:48,360
capsule then it it it probably<font color="#E5E5E5"> delivered</font>

372
00:17:47,950 --> 00:17:50,520
over

373
00:17:48,360 --> 00:17:52,860
one time<font color="#E5E5E5"> if it delivered over</font><font color="#CCCCCC"> one time</font>

374
00:17:50,520 --> 00:17:54,960
then the<font color="#E5E5E5"> buyers control register is also</font>

375
00:17:52,860 --> 00:17:59,309
not configured correctly<font color="#CCCCCC"> and then</font>

376
00:17:54,960 --> 00:18:01,530
<font color="#E5E5E5">because we will find</font><font color="#CCCCCC"> the specific and</font>

377
00:17:59,309 --> 00:18:03,600
characteristics in<font color="#E5E5E5"> in in a flesh</font>

378
00:18:01,530 --> 00:18:06,320
descriptor<font color="#CCCCCC"> then we also assuming that</font>

379
00:18:03,600 --> 00:18:09,570
<font color="#CCCCCC">the first descriptor is not</font><font color="#E5E5E5"> protection</font>

380
00:18:06,320 --> 00:18:11,428
<font color="#CCCCCC">so that's three vulnerability we try to</font>

381
00:18:09,570 --> 00:18:17,360
detect in each system<font color="#CCCCCC"> which we</font><font color="#E5E5E5"> analyze</font>

382
00:18:11,429 --> 00:18:21,450
<font color="#E5E5E5">it</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> built sort</font><font color="#E5E5E5"> of a pipeline to</font>

383
00:18:17,360 --> 00:18:24,809
<font color="#E5E5E5">get</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> good candidates to</font><font color="#CCCCCC"> run our</font>

384
00:18:21,450 --> 00:18:28,440
algorithm so when when we download all

385
00:18:24,809 --> 00:18:31,710
of<font color="#E5E5E5"> them from updates we figure out that</font>

386
00:18:28,440 --> 00:18:35,190
<font color="#CCCCCC">they all have different formats</font><font color="#E5E5E5"> they all</font>

387
00:18:31,710 --> 00:18:38,280
have different packing packing<font color="#E5E5E5"> they</font>

388
00:18:35,190 --> 00:18:41,610
packed<font color="#CCCCCC"> the package differently and so on</font>

389
00:18:38,280 --> 00:18:44,820
so first step we need<font color="#CCCCCC"> to extract bias</font>

390
00:18:41,610 --> 00:18:47,219
update from the from a<font color="#E5E5E5"> package update so</font>

391
00:18:44,820 --> 00:18:49,350
from the package<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it it's not the</font>

392
00:18:47,220 --> 00:18:52,020
BIOS update from<font color="#E5E5E5"> a package and it</font>

393
00:18:49,350 --> 00:18:54,928
contained the<font color="#E5E5E5"> BIOS update</font><font color="#CCCCCC"> plus tools and</font>

394
00:18:52,020 --> 00:18:59,400
plus some extra<font color="#E5E5E5"> information so but we</font>

395
00:18:54,929 --> 00:19:01,110
need<font color="#CCCCCC"> that bias</font><font color="#E5E5E5"> update image to run our</font>

396
00:18:59,400 --> 00:19:04,020
analysis and<font color="#CCCCCC"> then we run our analysis</font>

397
00:19:01,110 --> 00:19:08,879
<font color="#CCCCCC">already for that images so that's our</font>

398
00:19:04,020 --> 00:19:12,299
initial<font color="#E5E5E5"> set we have almost 33</font><font color="#CCCCCC"> ki a from</font>

399
00:19:08,880 --> 00:19:14,429
update packages from<font color="#CCCCCC"> nine vendors it's</font>

400
00:19:12,299 --> 00:19:17,879
not full set<font color="#E5E5E5"> and believe it</font><font color="#CCCCCC"> can be</font><font color="#E5E5E5"> much</font>

401
00:19:14,429 --> 00:19:19,919
more<font color="#E5E5E5"> we didn't download and every single</font>

402
00:19:17,880 --> 00:19:22,890
<font color="#E5E5E5">BIOS update package you just don't know</font>

403
00:19:19,919 --> 00:19:26,280
<font color="#E5E5E5">the one which is easy to download so we</font>

404
00:19:22,890 --> 00:19:29,160
got<font color="#E5E5E5"> 44 candidates candidates</font><font color="#CCCCCC"> minion that</font>

405
00:19:26,280 --> 00:19:32,970
we believe it<font color="#CCCCCC"> is a firm but we are not</font>

406
00:19:29,160 --> 00:19:35,910
<font color="#E5E5E5">sure and then we run them</font><font color="#CCCCCC"> the analysis</font>

407
00:19:32,970 --> 00:19:36,750
and then<font color="#CCCCCC"> we detect is this really ufi</font>

408
00:19:35,910 --> 00:19:40,590
basis<font color="#CCCCCC"> frame or not</font>

409
00:19:36,750 --> 00:19:43,320
so we detected more than<font color="#E5E5E5"> 21</font><font color="#CCCCCC"> K of the</font>

410
00:19:40,590 --> 00:19:45,360
unique<font color="#CCCCCC"> you former images you may ask</font>

411
00:19:43,320 --> 00:19:48,570
what what is the rest what is<font color="#E5E5E5"> there</font>

412
00:19:45,360 --> 00:19:50,969
almost<font color="#CCCCCC"> 20k images</font><font color="#E5E5E5"> so we believe it is</font>

413
00:19:48,570 --> 00:19:54,500
<font color="#CCCCCC">legacy images or images which we don't</font>

414
00:19:50,970 --> 00:19:57,570
<font color="#E5E5E5">know format and we couldn't decode them</font>

415
00:19:54,500 --> 00:20:00,510
so as I already mentioned that<font color="#E5E5E5"> vendor</font>

416
00:19:57,570 --> 00:20:00,939
from<font color="#CCCCCC"> package updates is not equal to the</font>

417
00:20:00,510 --> 00:20:04,120
you

418
00:20:00,940 --> 00:20:06,010
<font color="#CCCCCC">by image or UEFI</font><font color="#E5E5E5"> update image so when we</font>

419
00:20:04,120 --> 00:20:07,449
start investigated deep we find there is

420
00:20:06,010 --> 00:20:10,570
<font color="#CCCCCC">a bunch of interesting</font><font color="#E5E5E5"> things there for</font>

421
00:20:07,450 --> 00:20:14,260
<font color="#E5E5E5">example tools which is vendor providing</font>

422
00:20:10,570 --> 00:20:17,050
to update the bias<font color="#E5E5E5"> all in many cases</font>

423
00:20:14,260 --> 00:20:21,280
contain the driver<font color="#CCCCCC"> sign a driver</font><font color="#E5E5E5"> which</font>

424
00:20:17,050 --> 00:20:23,230
has<font color="#E5E5E5"> a really easy and really easy ways</font>

425
00:20:21,280 --> 00:20:25,570
to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> a privilege escalation because</font>

426
00:20:23,230 --> 00:20:28,240
it has them ioctl sly<font color="#CCCCCC"> critter ID</font>

427
00:20:25,570 --> 00:20:30,669
<font color="#E5E5E5">physical memory</font><font color="#CCCCCC"> readwrite a massage so</font>

428
00:20:28,240 --> 00:20:32,860
on so the<font color="#E5E5E5"> two switches vendor</font>

429
00:20:30,670 --> 00:20:34,540
<font color="#CCCCCC">distributing their specially interesting</font>

430
00:20:32,860 --> 00:20:36,520
<font color="#CCCCCC">for the future future research</font><font color="#E5E5E5"> as well</font>

431
00:20:34,540 --> 00:20:38,220
<font color="#E5E5E5">but these tools is also interesting for</font>

432
00:20:36,520 --> 00:20:41,260
<font color="#CCCCCC">us because when we will verify our</font>

433
00:20:38,220 --> 00:20:43,390
<font color="#E5E5E5">theory we need to run these tools to</font>

434
00:20:41,260 --> 00:20:49,470
<font color="#CCCCCC">double-check</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the vulnerability</font>

435
00:20:43,390 --> 00:20:52,870
<font color="#E5E5E5">which we detected this is confirmed</font><font color="#CCCCCC"> so</font>

436
00:20:49,470 --> 00:20:56,410
<font color="#CCCCCC">then another steps</font><font color="#E5E5E5"> in other steps when</font>

437
00:20:52,870 --> 00:20:58,989
you<font color="#E5E5E5"> get</font><font color="#CCCCCC"> the from an update in package</font>

438
00:20:56,410 --> 00:21:01,450
you can<font color="#E5E5E5"> run a bunch of tools to extract</font>

439
00:20:58,990 --> 00:21:02,860
the bias<font color="#E5E5E5"> update I do not stay long in</font>

440
00:21:01,450 --> 00:21:05,620
this slide<font color="#CCCCCC"> but there</font><font color="#E5E5E5"> is a bunch of</font>

441
00:21:02,860 --> 00:21:08,169
difference<font color="#CCCCCC"> matter vendor specific not</font>

442
00:21:05,620 --> 00:21:11,139
vendor specific which you can use it

443
00:21:08,170 --> 00:21:15,220
originally to extract the BIOS update

444
00:21:11,140 --> 00:21:18,130
image from there from<font color="#E5E5E5"> an update</font><font color="#CCCCCC"> package</font>

445
00:21:15,220 --> 00:21:21,880
basically<font color="#CCCCCC"> the package which is the bias</font>

446
00:21:18,130 --> 00:21:27,190
which is platform<font color="#E5E5E5"> vendor delivering like</font>

447
00:21:21,880 --> 00:21:29,200
<font color="#E5E5E5">Lenovo a sauce HP and so on okay so we</font>

448
00:21:27,190 --> 00:21:31,630
extracted all of the<font color="#E5E5E5"> firmware update</font>

449
00:21:29,200 --> 00:21:35,260
packages and then from them<font color="#E5E5E5"> we get all</font>

450
00:21:31,630 --> 00:21:37,720
of<font color="#E5E5E5"> the bias bias update</font><font color="#CCCCCC"> images of this</font>

451
00:21:35,260 --> 00:21:41,050
bias<font color="#CCCCCC"> added images</font><font color="#E5E5E5"> we already pre sorted</font>

452
00:21:37,720 --> 00:21:43,450
<font color="#CCCCCC">them you know some of</font><font color="#E5E5E5"> them is</font><font color="#CCCCCC"> GFI bias</font>

453
00:21:41,050 --> 00:21:45,310
<font color="#E5E5E5">update</font><font color="#CCCCCC"> images and we know the list</font><font color="#E5E5E5"> now</font>

454
00:21:43,450 --> 00:21:47,260
we need to<font color="#E5E5E5"> really precisely create the</font>

455
00:21:45,310 --> 00:21:50,740
algorithm will detect the vulnerability

456
00:21:47,260 --> 00:21:53,350
so first we<font color="#CCCCCC"> need to exclude the exclude</font>

457
00:21:50,740 --> 00:21:55,390
<font color="#E5E5E5">and then known</font><font color="#CCCCCC"> ufi capsule images</font>

458
00:21:53,350 --> 00:21:58,179
because capsule images typically<font color="#E5E5E5"> and</font>

459
00:21:55,390 --> 00:22:01,570
sign it and and<font color="#E5E5E5"> typically it doesn't</font>

460
00:21:58,180 --> 00:22:03,880
have as many problem as others so then

461
00:22:01,570 --> 00:22:08,980
we need to have<font color="#E5E5E5"> the image which has</font><font color="#CCCCCC"> an</font>

462
00:22:03,880 --> 00:22:11,590
exact size because<font color="#CCCCCC"> unser because if it</font>

463
00:22:08,980 --> 00:22:13,630
has<font color="#CCCCCC"> a exact size</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> flash descriptor</font>

464
00:22:11,590 --> 00:22:14,040
in it because<font color="#E5E5E5"> the descriptor is part of</font>

465
00:22:13,630 --> 00:22:17,280
<font color="#E5E5E5">the</font>

466
00:22:14,040 --> 00:22:20,040
<font color="#E5E5E5">size of them as of the spine of the</font>

467
00:22:17,280 --> 00:22:23,639
flash<font color="#E5E5E5"> memory and then we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make</font>

468
00:22:20,040 --> 00:22:25,860
sure<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the spy descriptor is</font>

469
00:22:23,640 --> 00:22:28,620
sitting in offset zero<font color="#E5E5E5"> so it's really</font>

470
00:22:25,860 --> 00:22:30,300
valid<font color="#E5E5E5"> spy descriptor with offset zero</font>

471
00:22:28,620 --> 00:22:32,580
<font color="#CCCCCC">and then we need to make sure that</font>

472
00:22:30,300 --> 00:22:36,600
despite descriptor is not protecting

473
00:22:32,580 --> 00:22:38,699
itself so practically speaking we

474
00:22:36,600 --> 00:22:41,250
looking for<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> you looking for</font>

475
00:22:38,700 --> 00:22:44,940
images which<font color="#CCCCCC"> is exact size and</font><font color="#E5E5E5"> to the</font>

476
00:22:41,250 --> 00:22:47,130
spy flash<font color="#CCCCCC"> memory which has</font><font color="#E5E5E5"> in a decoded</font>

477
00:22:44,940 --> 00:22:50,160
format<font color="#E5E5E5"> in a chips technical format which</font>

478
00:22:47,130 --> 00:22:52,920
<font color="#CCCCCC">has the</font><font color="#E5E5E5"> reserved 8 bit and the signature</font>

479
00:22:50,160 --> 00:22:56,370
which<font color="#CCCCCC"> is indicated this is</font><font color="#E5E5E5"> valid</font><font color="#CCCCCC"> a spy</font>

480
00:22:52,920 --> 00:23:03,300
descriptor<font color="#E5E5E5"> and index in them</font>

481
00:22:56,370 --> 00:23:08,010
<font color="#CCCCCC">accessed provision access table</font><font color="#E5E5E5"> it has</font>

482
00:23:03,300 --> 00:23:10,080
<font color="#E5E5E5">here a read right here this read right</font>

483
00:23:08,010 --> 00:23:12,510
indicates that CPU<font color="#E5E5E5"> can override the</font>

484
00:23:10,080 --> 00:23:14,399
flash in<font color="#E5E5E5"> the terminology of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> spy</font>

485
00:23:12,510 --> 00:23:18,180
controller<font color="#E5E5E5"> there is essentially which is</font>

486
00:23:14,400 --> 00:23:20,430
called master master is inspire bus

487
00:23:18,180 --> 00:23:23,520
<font color="#E5E5E5">someone who can send the transaction and</font>

488
00:23:20,430 --> 00:23:26,970
<font color="#E5E5E5">CPU in this terminology is just ring</font><font color="#CCCCCC"> 0</font>

489
00:23:23,520 --> 00:23:28,770
so basically if CPU has access to the

490
00:23:26,970 --> 00:23:31,230
spy descriptors meaning that ring<font color="#E5E5E5"> 0</font>

491
00:23:28,770 --> 00:23:32,820
attacker<font color="#E5E5E5"> or anyone twittering 0</font>

492
00:23:31,230 --> 00:23:34,680
privileges has the<font color="#CCCCCC"> access</font><font color="#E5E5E5"> to the flash</font>

493
00:23:32,820 --> 00:23:40,889
descriptor<font color="#E5E5E5"> that's what we are looking</font>

494
00:23:34,680 --> 00:23:45,140
<font color="#CCCCCC">for plus plus the rescue wrist X so our</font>

495
00:23:40,890 --> 00:23:47,370
initial analysis analysis<font color="#E5E5E5"> given us 3500</font>

496
00:23:45,140 --> 00:23:51,120
images which is<font color="#E5E5E5"> matched to this</font>

497
00:23:47,370 --> 00:23:53,729
<font color="#CCCCCC">heuristic so this is our suspect so this</font>

498
00:23:51,120 --> 00:23:57,840
is our candidates<font color="#CCCCCC"> to be a vulnerable</font>

499
00:23:53,730 --> 00:24:02,550
image which will in<font color="#CCCCCC"> in a in</font><font color="#E5E5E5"> the BIOS</font>

500
00:23:57,840 --> 00:24:04,350
<font color="#E5E5E5">update packages so this theory is not</font>

501
00:24:02,550 --> 00:24:08,690
perfect it has false positive and false

502
00:24:04,350 --> 00:24:11,280
negative<font color="#E5E5E5"> false positive is that</font><font color="#CCCCCC"> not all</font>

503
00:24:08,690 --> 00:24:13,710
update packages can that<font color="#E5E5E5"> contain</font><font color="#CCCCCC"> fooled</font>

504
00:24:11,280 --> 00:24:17,030
<font color="#CCCCCC">a spy image and correspond to these</font>

505
00:24:13,710 --> 00:24:21,100
vulnerabilities<font color="#E5E5E5"> in some cases</font>

506
00:24:17,030 --> 00:24:24,428
bias can<font color="#CCCCCC"> be protected</font>

507
00:24:21,100 --> 00:24:26,860
at least for the two out of three

508
00:24:24,429 --> 00:24:28,630
vulnerabilities but still will not be

509
00:24:26,860 --> 00:24:32,019
signed<font color="#E5E5E5"> so this is something which</font><font color="#CCCCCC"> we</font>

510
00:24:28,630 --> 00:24:34,299
sort of in not<font color="#E5E5E5"> splitting here another</font>

511
00:24:32,019 --> 00:24:36,309
thing is if they use the BIOS update

512
00:24:34,299 --> 00:24:39,158
delivering over<font color="#CCCCCC"> USB it require user</font>

513
00:24:36,309 --> 00:24:41,918
interaction<font color="#E5E5E5"> and it may be a way how does</font>

514
00:24:39,159 --> 00:24:47,070
vendor is<font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> protection with</font><font color="#CCCCCC"> the</font>

515
00:24:41,919 --> 00:24:50,769
user interaction<font color="#E5E5E5"> sort of requirements</font>

516
00:24:47,070 --> 00:24:55,019
<font color="#E5E5E5">another one is even</font><font color="#CCCCCC"> if you detect the</font>

517
00:24:50,769 --> 00:24:58,059
<font color="#CCCCCC">SPI image with</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> characteristics</font>

518
00:24:55,019 --> 00:25:01,929
<font color="#E5E5E5">during</font><font color="#CCCCCC"> the update the update mechanism</font>

519
00:24:58,059 --> 00:25:03,940
<font color="#E5E5E5">may skip spy descriptor at all</font><font color="#CCCCCC"> and this</font>

520
00:25:01,929 --> 00:25:05,740
<font color="#E5E5E5">is sort of the way how some vendors</font>

521
00:25:03,940 --> 00:25:08,110
implement this so they basically be

522
00:25:05,740 --> 00:25:09,909
<font color="#CCCCCC">reliving update but during the delivery</font>

523
00:25:08,110 --> 00:25:12,570
update they just keep in part of the

524
00:25:09,909 --> 00:25:14,799
image they know that this already<font color="#E5E5E5"> was</font>

525
00:25:12,570 --> 00:25:18,009
flashed during<font color="#E5E5E5"> the manufacturing phase</font>

526
00:25:14,799 --> 00:25:21,549
<font color="#E5E5E5">and not do</font><font color="#CCCCCC"> it again</font><font color="#E5E5E5"> for the you know in</font>

527
00:25:18,009 --> 00:25:24,580
the next steps of<font color="#CCCCCC"> course</font><font color="#E5E5E5"> we have false</font>

528
00:25:21,549 --> 00:25:27,070
<font color="#E5E5E5">negatives</font><font color="#CCCCCC"> one of the one of false</font>

529
00:25:24,580 --> 00:25:29,350
negative is that<font color="#CCCCCC"> even there is a sign</font>

530
00:25:27,070 --> 00:25:31,629
<font color="#E5E5E5">caps all day there still can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> variable</font>

531
00:25:29,350 --> 00:25:34,928
<font color="#E5E5E5">to the restaurant or abilities like a</font>

532
00:25:31,629 --> 00:25:39,340
descriptor and<font color="#E5E5E5"> vise control register is</font>

533
00:25:34,929 --> 00:25:40,929
not protected<font color="#CCCCCC"> also we excluded read on</font>

534
00:25:39,340 --> 00:25:43,330
the<font color="#CCCCCC"> first descriptors within our</font>

535
00:25:40,929 --> 00:25:46,509
heuristics which we minimize<font color="#E5E5E5"> that number</font>

536
00:25:43,330 --> 00:25:50,129
of images<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's not really good</font>

537
00:25:46,509 --> 00:25:52,509
because<font color="#E5E5E5"> if you</font><font color="#CCCCCC"> excluded that</font><font color="#E5E5E5"> we may miss</font>

538
00:25:50,129 --> 00:25:55,269
to another vulnerability<font color="#E5E5E5"> in the same</font>

539
00:25:52,509 --> 00:25:58,299
<font color="#E5E5E5">image so because we combine all</font><font color="#CCCCCC"> of them</font>

540
00:25:55,269 --> 00:26:01,779
we sort of may miss the image which has

541
00:25:58,299 --> 00:26:03,639
<font color="#E5E5E5">two out of three</font><font color="#CCCCCC"> of them and some</font><font color="#E5E5E5"> of the</font>

542
00:26:01,779 --> 00:26:06,610
capsule they may not be<font color="#CCCCCC"> signed it and we</font>

543
00:26:03,639 --> 00:26:09,158
also did not<font color="#E5E5E5"> detecting this okay after</font>

544
00:26:06,610 --> 00:26:11,110
after after we make a manual analysis

545
00:26:09,159 --> 00:26:13,299
and verify all<font color="#CCCCCC"> of that images which we</font>

546
00:26:11,110 --> 00:26:16,330
collected and verify some<font color="#CCCCCC"> of them</font>

547
00:26:13,299 --> 00:26:19,149
<font color="#E5E5E5">manually by chicken in a system we got</font>

548
00:26:16,330 --> 00:26:22,620
<font color="#E5E5E5">the conclusion that modern 500 models</font>

549
00:26:19,149 --> 00:26:29,850
have the<font color="#CCCCCC"> vulnerable BIOS</font><font color="#E5E5E5"> update</font><font color="#CCCCCC"> images</font>

550
00:26:22,620 --> 00:26:33,158
most of them is is<font color="#E5E5E5"> MSI and gigabyte</font>

551
00:26:29,850 --> 00:26:34,300
<font color="#E5E5E5">there is also</font><font color="#CCCCCC"> ice rockin Asus which has</font>

552
00:26:33,159 --> 00:26:38,350
a<font color="#E5E5E5"> bunch of them</font>

553
00:26:34,300 --> 00:26:41,290
and some vendor just<font color="#E5E5E5"> may miss some some</font>

554
00:26:38,350 --> 00:26:44,110
platform to<font color="#CCCCCC"> deliver the proper update</font>

555
00:26:41,290 --> 00:26:49,090
mechanism<font color="#E5E5E5"> so let's go over</font><font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the</font>

556
00:26:44,110 --> 00:26:52,000
examples<font color="#E5E5E5"> and</font><font color="#CCCCCC"> amasai almost all of</font><font color="#E5E5E5"> the</font>

557
00:26:49,090 --> 00:26:57,879
system is<font color="#E5E5E5"> variable we</font><font color="#CCCCCC"> were fight on one</font>

558
00:26:52,000 --> 00:27:01,900
of the example<font color="#E5E5E5"> in one</font><font color="#CCCCCC"> of the system then</font>

559
00:26:57,880 --> 00:27:05,410
<font color="#E5E5E5">s there is just how we will manually</font>

560
00:27:01,900 --> 00:27:08,230
check it we<font color="#CCCCCC"> check the image the</font><font color="#E5E5E5"> the</font>

561
00:27:05,410 --> 00:27:10,870
<font color="#E5E5E5">characteristics of the flesh descriptor</font>

562
00:27:08,230 --> 00:27:13,540
<font color="#E5E5E5">as</font><font color="#CCCCCC"> I already mentioned you can check it</font>

563
00:27:10,870 --> 00:27:15,760
manually or<font color="#E5E5E5"> over chip sack and also</font>

564
00:27:13,540 --> 00:27:19,060
interestingly that<font color="#E5E5E5"> some description in a</font>

565
00:27:15,760 --> 00:27:21,940
vendor<font color="#CCCCCC"> website also can you give idea</font><font color="#E5E5E5"> so</font>

566
00:27:19,060 --> 00:27:25,300
some of<font color="#E5E5E5"> the vendors in</font><font color="#CCCCCC"> the description</font>

567
00:27:21,940 --> 00:27:27,010
of the update package explaining how

568
00:27:25,300 --> 00:27:29,050
they deliver<font color="#E5E5E5"> in this update</font><font color="#CCCCCC"> package and</font>

569
00:27:27,010 --> 00:27:31,240
based on this<font color="#CCCCCC"> you already</font><font color="#E5E5E5"> can detect if</font>

570
00:27:29,050 --> 00:27:33,070
the system is<font color="#CCCCCC"> venerable or not because</font>

571
00:27:31,240 --> 00:27:35,880
if the vendor<font color="#E5E5E5"> is telling</font><font color="#CCCCCC"> the delivering</font>

572
00:27:33,070 --> 00:27:38,879
update during<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> this already</font>

573
00:27:35,880 --> 00:27:38,880
awesome

574
00:27:46,380 --> 00:27:50,940
it's a very good<font color="#E5E5E5"> indication that is</font>

575
00:27:48,390 --> 00:27:53,700
probable the<font color="#E5E5E5"> venerable system gigabyte</font>

576
00:27:50,940 --> 00:27:55,500
the same problem<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> the three</font><font color="#E5E5E5"> burner</font>

577
00:27:53,700 --> 00:27:59,790
<font color="#E5E5E5">abilities detected and almost all of the</font>

578
00:27:55,500 --> 00:28:03,330
images which we had checked<font color="#CCCCCC"> Dell</font><font color="#E5E5E5"> has</font>

579
00:27:59,790 --> 00:28:07,290
interesting results<font color="#E5E5E5"> so some of the</font>

580
00:28:03,330 --> 00:28:12,649
system is still going arrival so we

581
00:28:07,290 --> 00:28:19,980
<font color="#CCCCCC">analyze it 1778 images and out of that</font>

582
00:28:12,650 --> 00:28:22,200
<font color="#E5E5E5">51 is variable</font><font color="#CCCCCC"> that's the example</font><font color="#E5E5E5"> how we</font>

583
00:28:19,980 --> 00:28:24,420
will verify we just<font color="#CCCCCC"> buy the system or on</font>

584
00:28:22,200 --> 00:28:29,550
a test<font color="#E5E5E5"> and check</font><font color="#CCCCCC"> ok yet death bias is</font>

585
00:28:24,420 --> 00:28:32,040
open<font color="#E5E5E5"> our our heuristics is correct</font><font color="#CCCCCC"> then</font>

586
00:28:29,550 --> 00:28:35,340
<font color="#CCCCCC">we</font><font color="#E5E5E5"> Nova as you see here also when we run</font>

587
00:28:32,040 --> 00:28:37,850
the update<font color="#E5E5E5"> tools it going over</font><font color="#CCCCCC"> runtime</font>

588
00:28:35,340 --> 00:28:42,360
it didn't check any signature it has<font color="#CCCCCC"> a</font>

589
00:28:37,850 --> 00:28:46,350
<font color="#CCCCCC">unsigned</font><font color="#E5E5E5"> image also verified that it has</font>

590
00:28:42,360 --> 00:28:52,350
some models<font color="#E5E5E5"> 26 models of their biases</font>

591
00:28:46,350 --> 00:28:56,370
which is venerable HP we verified<font color="#E5E5E5"> 11</font>

592
00:28:52,350 --> 00:29:00,270
which has a vulnerable<font color="#E5E5E5"> package a package</font>

593
00:28:56,370 --> 00:29:03,540
updates for the<font color="#CCCCCC"> 6 models but</font><font color="#E5E5E5"> HP has a</font>

594
00:29:00,270 --> 00:29:06,450
high rate<font color="#CCCCCC"> of false</font><font color="#E5E5E5"> positive</font><font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can</font>

595
00:29:03,540 --> 00:29:09,480
see here<font color="#E5E5E5"> our assumption doesn't</font><font color="#CCCCCC"> work</font>

596
00:29:06,450 --> 00:29:12,450
because<font color="#E5E5E5"> it has sort of it checks</font><font color="#CCCCCC"> the</font>

597
00:29:09,480 --> 00:29:14,670
signature with some manifest which is

598
00:29:12,450 --> 00:29:17,040
delivered separately from the image so

599
00:29:14,670 --> 00:29:19,740
that's<font color="#E5E5E5"> why we</font><font color="#CCCCCC"> didn't attack this so in</font>

600
00:29:17,040 --> 00:29:21,379
in HP we have high rate of false

601
00:29:19,740 --> 00:29:25,050
positive

602
00:29:21,380 --> 00:29:29,400
ISOs<font color="#CCCCCC"> it doesn't have false positive</font>

603
00:29:25,050 --> 00:29:31,710
although<font color="#E5E5E5"> it didn't correctly detect it</font>

604
00:29:29,400 --> 00:29:35,100
didn't correctly detect the one of the

605
00:29:31,710 --> 00:29:39,450
vulnerabilities so the most images most

606
00:29:35,100 --> 00:29:41,850
modern images for<font color="#CCCCCC"> us is sign it updates</font>

607
00:29:39,450 --> 00:29:44,430
they still vulnerable<font color="#E5E5E5"> to the rest of</font>

608
00:29:41,850 --> 00:29:46,709
<font color="#CCCCCC">inner bilities but they sign it and the</font>

609
00:29:44,430 --> 00:29:49,380
<font color="#E5E5E5">science which is</font><font color="#CCCCCC"> enabled over the tools</font>

610
00:29:46,710 --> 00:29:54,230
so our heuristics was not super precise

611
00:29:49,380 --> 00:29:57,870
here as well but<font color="#E5E5E5"> many system is reliable</font>

612
00:29:54,230 --> 00:29:59,950
<font color="#CCCCCC">and all of them</font>

613
00:29:57,870 --> 00:30:03,159
probably when you're<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> some of the</font>

614
00:29:59,950 --> 00:30:07,000
<font color="#CCCCCC">runner</font><font color="#E5E5E5"> ability from this</font><font color="#CCCCCC"> 3 ice work</font>

615
00:30:03,160 --> 00:30:10,630
interesting<font color="#E5E5E5"> one variable to</font><font color="#CCCCCC"> 2 out of 3</font>

616
00:30:07,000 --> 00:30:12,520
as soon as<font color="#CCCCCC"> I asses it they they make a</font>

617
00:30:10,630 --> 00:30:14,580
<font color="#E5E5E5">not signature check they have and they</font>

618
00:30:12,520 --> 00:30:18,370
make<font color="#E5E5E5"> something like a</font><font color="#CCCCCC"> checksum check</font>

619
00:30:14,580 --> 00:30:26,050
which you can sort of fix and deliver

620
00:30:18,370 --> 00:30:29,320
and the malicious bias update<font color="#CCCCCC"> so that's</font>

621
00:30:26,050 --> 00:30:31,810
and<font color="#CCCCCC"> that was the research related how we</font>

622
00:30:29,320 --> 00:30:36,970
can use the scale<font color="#E5E5E5"> analysis to find</font>

623
00:30:31,810 --> 00:30:39,129
vulnerabilities in e5 based biases<font color="#E5E5E5"> base</font>

624
00:30:36,970 --> 00:30:41,470
it on<font color="#E5E5E5"> the BIOS update but what else we</font>

625
00:30:39,130 --> 00:30:43,720
can do<font color="#CCCCCC"> with all of these images</font><font color="#E5E5E5"> we can</font>

626
00:30:41,470 --> 00:30:46,750
also use<font color="#E5E5E5"> it for defense so we can</font>

627
00:30:43,720 --> 00:30:48,550
basically create sort of a<font color="#CCCCCC"> whitelist</font><font color="#E5E5E5"> on</font>

628
00:30:46,750 --> 00:30:51,280
the hashes<font color="#E5E5E5"> from there all</font><font color="#CCCCCC"> of these</font>

629
00:30:48,550 --> 00:30:54,700
<font color="#CCCCCC">images and compare every new system is</font>

630
00:30:51,280 --> 00:30:57,879
this<font color="#E5E5E5"> whitelist and see okay how many how</font>

631
00:30:54,700 --> 00:31:00,070
many components<font color="#CCCCCC"> I</font><font color="#E5E5E5"> already see I</font><font color="#CCCCCC"> already</font>

632
00:30:57,880 --> 00:31:02,140
<font color="#E5E5E5">have in my whitelist and depends on days</font>

633
00:31:00,070 --> 00:31:06,040
<font color="#CCCCCC">you can find</font><font color="#E5E5E5"> implants you can make a</font>

634
00:31:02,140 --> 00:31:08,710
deep investigation<font color="#E5E5E5"> of the system</font><font color="#CCCCCC"> so we</font>

635
00:31:06,040 --> 00:31:10,659
built<font color="#E5E5E5"> the whitelist we collected hashes</font>

636
00:31:08,710 --> 00:31:13,300
and<font color="#CCCCCC"> the</font><font color="#E5E5E5"> sketchy system is not the simple</font>

637
00:31:10,660 --> 00:31:16,930
hashes<font color="#CCCCCC"> it's this is out into code hashes</font>

638
00:31:13,300 --> 00:31:21,010
<font color="#CCCCCC">so when being</font><font color="#E5E5E5"> mask at</font><font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> because</font>

639
00:31:16,930 --> 00:31:23,890
we don't need to<font color="#CCCCCC"> increase</font><font color="#E5E5E5"> them coverage</font>

640
00:31:21,010 --> 00:31:26,700
for<font color="#E5E5E5"> our hashes we use it some open</font>

641
00:31:23,890 --> 00:31:29,860
source<font color="#E5E5E5"> tool to collect these hashes</font>

642
00:31:26,700 --> 00:31:34,990
<font color="#CCCCCC">that's the</font><font color="#E5E5E5"> result what exactly</font><font color="#CCCCCC"> we mask</font>

643
00:31:29,860 --> 00:31:37,770
<font color="#CCCCCC">it in</font><font color="#E5E5E5"> the binary so as a result we got</font>

644
00:31:34,990 --> 00:31:41,130
about 1 million hashes<font color="#E5E5E5"> from all of that</font>

645
00:31:37,770 --> 00:31:43,389
bias images this<font color="#E5E5E5"> hashes phone</font>

646
00:31:41,130 --> 00:31:47,230
components<font color="#E5E5E5"> of the bias this components</font>

647
00:31:43,390 --> 00:31:49,180
<font color="#E5E5E5">that call it</font><font color="#CCCCCC"> ufi or</font><font color="#E5E5E5"> Dixie drivers that's</font>

648
00:31:47,230 --> 00:31:53,350
basically sort<font color="#E5E5E5"> of small executables</font>

649
00:31:49,180 --> 00:31:57,430
which is<font color="#E5E5E5"> minimum component in a bias in</font>

650
00:31:53,350 --> 00:31:59,860
the<font color="#CCCCCC"> bias architecture</font><font color="#E5E5E5"> so then after</font><font color="#CCCCCC"> we</font>

651
00:31:57,430 --> 00:32:01,720
<font color="#E5E5E5">run this test for some of the system we</font>

652
00:31:59,860 --> 00:32:04,270
find<font color="#CCCCCC"> interesting result for example I</font>

653
00:32:01,720 --> 00:32:06,280
showed this last year<font color="#CCCCCC"> this actually this</font>

654
00:32:04,270 --> 00:32:07,540
slide<font color="#E5E5E5"> was the beginning of entire this</font>

655
00:32:06,280 --> 00:32:10,600
research

656
00:32:07,540 --> 00:32:12,460
so my old<font color="#CCCCCC"> laptop doesn't</font><font color="#E5E5E5"> have one module</font>

657
00:32:10,600 --> 00:32:14,110
from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> white</font><font color="#E5E5E5"> list and that was</font>

658
00:32:12,460 --> 00:32:16,690
interested in result and demonstrate us

659
00:32:14,110 --> 00:32:18,729
<font color="#E5E5E5">that the vendor doesn't publish all</font><font color="#CCCCCC"> of</font>

660
00:32:16,690 --> 00:32:22,000
the bias which they delivering on the

661
00:32:18,730 --> 00:32:23,260
system so whatever was flashed during

662
00:32:22,000 --> 00:32:25,480
<font color="#E5E5E5">the supply chain</font>

663
00:32:23,260 --> 00:32:27,160
you cannot verify it because<font color="#E5E5E5"> whatever</font>

664
00:32:25,480 --> 00:32:29,320
you will see in the vendor<font color="#CCCCCC"> website they</font>

665
00:32:27,160 --> 00:32:31,360
are<font color="#E5E5E5"> not match that something which is</font>

666
00:32:29,320 --> 00:32:34,120
basically<font color="#CCCCCC"> industry need to work together</font>

667
00:32:31,360 --> 00:32:36,610
<font color="#E5E5E5">to make</font><font color="#CCCCCC"> sure that the vendors at least</font>

668
00:32:34,120 --> 00:32:38,620
<font color="#E5E5E5">publish</font><font color="#CCCCCC"> caches on every</font><font color="#E5E5E5"> single binary</font>

669
00:32:36,610 --> 00:32:40,719
which<font color="#CCCCCC"> they are</font><font color="#E5E5E5"> flashed</font><font color="#CCCCCC"> in a supply</font><font color="#E5E5E5"> chain</font>

670
00:32:38,620 --> 00:32:43,629
<font color="#CCCCCC">that will</font><font color="#E5E5E5"> give us the opportunities to</font>

671
00:32:40,720 --> 00:32:46,930
verify and<font color="#E5E5E5"> the platform integrity of the</font>

672
00:32:43,630 --> 00:32:49,210
<font color="#E5E5E5">system what else we can do with</font><font color="#CCCCCC"> these</font>

673
00:32:46,930 --> 00:32:51,460
capabilities<font color="#CCCCCC"> we can detect features if</font>

674
00:32:49,210 --> 00:32:53,140
any feature is present in<font color="#E5E5E5"> your BIOS and</font>

675
00:32:51,460 --> 00:32:55,540
one of the interesting<font color="#CCCCCC"> feature which is</font>

676
00:32:53,140 --> 00:32:58,630
basically we all want to<font color="#CCCCCC"> know</font><font color="#E5E5E5"> is compute</font>

677
00:32:55,540 --> 00:33:00,580
<font color="#E5E5E5">race computers is basically some third</font>

678
00:32:58,630 --> 00:33:03,520
<font color="#E5E5E5">party software which will which</font><font color="#CCCCCC"> is</font>

679
00:33:00,580 --> 00:33:06,610
injected<font color="#CCCCCC"> to</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> BIOS</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> make anti-theft</font>

680
00:33:03,520 --> 00:33:08,740
technology<font color="#E5E5E5"> and that software communicate</font>

681
00:33:06,610 --> 00:33:10,840
with some of the OS level components

682
00:33:08,740 --> 00:33:13,720
which<font color="#CCCCCC"> you don't know</font><font color="#E5E5E5"> about so</font><font color="#CCCCCC"> I would</font>

683
00:33:10,840 --> 00:33:15,490
recommend<font color="#E5E5E5"> my personally I am disabled in</font>

684
00:33:13,720 --> 00:33:17,590
this<font color="#E5E5E5"> technology if I have any laptop</font>

685
00:33:15,490 --> 00:33:20,140
<font color="#E5E5E5">with this because it pretty scary</font><font color="#CCCCCC"> that</font>

686
00:33:17,590 --> 00:33:23,260
<font color="#CCCCCC">assumption</font><font color="#E5E5E5"> injected to the BIOS which</font>

687
00:33:20,140 --> 00:33:26,290
not BIOS vendor doesn't<font color="#E5E5E5"> know about much</font>

688
00:33:23,260 --> 00:33:30,460
about internal<font color="#E5E5E5"> stuff also it communicate</font>

689
00:33:26,290 --> 00:33:32,950
to the operation system<font color="#E5E5E5"> level</font><font color="#CCCCCC"> so yeah</font>

690
00:33:30,460 --> 00:33:35,020
pretty interesting feature the way how

691
00:33:32,950 --> 00:33:38,020
we detect<font color="#E5E5E5"> this which we just the tech</font>

692
00:33:35,020 --> 00:33:40,990
<font color="#CCCCCC">for for the name of the computer ace in</font>

693
00:33:38,020 --> 00:33:45,070
all of the<font color="#CCCCCC"> Dixon and bi drivers and then</font>

694
00:33:40,990 --> 00:33:49,000
we find around<font color="#CCCCCC"> 7000 images which</font>

695
00:33:45,070 --> 00:33:51,370
contained this<font color="#E5E5E5"> this technology meaning</font>

696
00:33:49,000 --> 00:33:54,120
<font color="#E5E5E5">that this feature present in many many</font>

697
00:33:51,370 --> 00:33:57,459
system<font color="#E5E5E5"> across all of the</font><font color="#CCCCCC"> vendors and</font>

698
00:33:54,120 --> 00:34:00,250
some of them the good vendors<font color="#CCCCCC"> is show up</font>

699
00:33:57,460 --> 00:34:01,840
in a BIOS setup screen how to<font color="#E5E5E5"> disable it</font>

700
00:34:00,250 --> 00:34:04,540
some of<font color="#E5E5E5"> them may</font><font color="#CCCCCC"> not even show up</font>

701
00:34:01,840 --> 00:34:08,139
so that's a good good to know<font color="#CCCCCC"> do you</font>

702
00:34:04,540 --> 00:34:09,639
<font color="#CCCCCC">have this feature or not</font><font color="#E5E5E5"> there's a bunch</font>

703
00:34:08,139 --> 00:34:10,929
of<font color="#E5E5E5"> things which can</font><font color="#CCCCCC"> be in profit</font><font color="#E5E5E5"> as I</font>

704
00:34:09,639 --> 00:34:12,520
mentioned<font color="#CCCCCC"> we have false positive or</font>

705
00:34:10,929 --> 00:34:17,339
negative there is list of things which

706
00:34:12,520 --> 00:34:19,290
<font color="#E5E5E5">we can improve it</font><font color="#CCCCCC"> as a conclusion</font>

707
00:34:17,340 --> 00:34:21,149
we<font color="#CCCCCC"> underlies it</font><font color="#E5E5E5"> a bunch of images</font>

708
00:34:19,290 --> 00:34:22,560
<font color="#CCCCCC">they're still a bunch of them is</font>

709
00:34:21,149 --> 00:34:25,770
variable to the classical

710
00:34:22,560 --> 00:34:28,168
vulnerabilities related to<font color="#E5E5E5"> modern</font><font color="#CCCCCC"> 5,000</font>

711
00:34:25,770 --> 00:34:31,620
<font color="#CCCCCC">different models from nine different</font>

712
00:34:28,168 --> 00:34:33,859
vendors<font color="#E5E5E5"> and what this mean is all of</font>

713
00:34:31,620 --> 00:34:35,638
this all of this<font color="#CCCCCC"> platform can be</font><font color="#E5E5E5"> easily</font>

714
00:34:33,860 --> 00:34:38,070
implanted<font color="#E5E5E5"> or break it</font>

715
00:34:35,639 --> 00:34:40,520
meaning<font color="#CCCCCC"> that attackers</font><font color="#E5E5E5"> with the physical</font>

716
00:34:38,070 --> 00:34:43,470
access<font color="#CCCCCC"> ordering supply chain ordering</font>

717
00:34:40,520 --> 00:34:45,090
<font color="#E5E5E5">software over in Xero can install</font>

718
00:34:43,469 --> 00:34:49,230
<font color="#E5E5E5">something really persistent in</font><font color="#CCCCCC"> your firm</font>

719
00:34:45,090 --> 00:34:51,929
<font color="#CCCCCC">which will live forever there is a bunch</font>

720
00:34:49,230 --> 00:34:54,120
of<font color="#E5E5E5"> things which</font><font color="#CCCCCC"> can be</font><font color="#E5E5E5"> improve it in our</font>

721
00:34:51,929 --> 00:34:55,710
static analysis<font color="#E5E5E5"> including going deep</font>

722
00:34:54,120 --> 00:34:58,650
<font color="#CCCCCC">inside each</font><font color="#E5E5E5"> binary and check</font><font color="#CCCCCC"> winner</font>

723
00:34:55,710 --> 00:35:01,320
abilities like<font color="#CCCCCC"> think</font><font color="#E5E5E5"> bone as vulnerable</font>

724
00:34:58,650 --> 00:35:05,610
as<font color="#CCCCCC"> my handlers and so on for the future</font>

725
00:35:01,320 --> 00:35:09,950
<font color="#CCCCCC">food as a future research</font><font color="#E5E5E5"> with this I am</font>

726
00:35:05,610 --> 00:35:09,950
done anyone has questions

727
00:35:12,280 --> 00:35:16,940
[Applause]

