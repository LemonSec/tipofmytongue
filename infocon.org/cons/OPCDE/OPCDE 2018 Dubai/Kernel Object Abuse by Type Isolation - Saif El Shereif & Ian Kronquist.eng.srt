1
00:00:03,359 --> 00:00:08,559
hello everyone my name is<font color="#E5E5E5"> safe and we're</font>

2
00:00:06,970 --> 00:00:11,500
here to present<font color="#E5E5E5"> about the life and death</font>

3
00:00:08,559 --> 00:00:13,209
of<font color="#CCCCCC"> criminal object abuse I work as a</font>

4
00:00:11,500 --> 00:00:18,039
senior security<font color="#CCCCCC"> software engineer at</font>

5
00:00:13,210 --> 00:00:21,189
<font color="#E5E5E5">amis RC and this is in hey my name is in</font>

6
00:00:18,039 --> 00:00:22,810
<font color="#CCCCCC">cronquist I work at the Microsoft in</font><font color="#E5E5E5"> the</font>

7
00:00:21,189 --> 00:00:27,640
Windows<font color="#CCCCCC"> Device group and I designed</font>

8
00:00:22,810 --> 00:00:29,049
mitigations so I like<font color="#E5E5E5"> to</font><font color="#CCCCCC"> think that</font>

9
00:00:27,640 --> 00:00:31,720
there is<font color="#CCCCCC"> definitely a method to any</font>

10
00:00:29,050 --> 00:00:33,940
madness and that I like to answer<font color="#E5E5E5"> three</font>

11
00:00:31,720 --> 00:00:36,190
specific<font color="#CCCCCC"> questions about</font><font color="#E5E5E5"> any problem</font>

12
00:00:33,940 --> 00:00:38,320
<font color="#CCCCCC">that I'm facing is the</font><font color="#E5E5E5"> why the what and</font>

13
00:00:36,190 --> 00:00:39,910
the<font color="#E5E5E5"> how and</font><font color="#CCCCCC"> that will</font><font color="#E5E5E5"> get us to a point</font>

14
00:00:38,320 --> 00:00:42,190
where we can<font color="#E5E5E5"> fully understand the</font>

15
00:00:39,910 --> 00:00:44,640
problem and then<font color="#E5E5E5"> we'll be able to fix it</font>

16
00:00:42,190 --> 00:00:46,390
if we look at recent<font color="#E5E5E5"> attack trends</font>

17
00:00:44,640 --> 00:00:47,680
specifically towards elevation of

18
00:00:46,390 --> 00:00:49,630
<font color="#CCCCCC">privileged attacks against the Windows</font>

19
00:00:47,680 --> 00:00:51,670
kernel<font color="#CCCCCC"> it</font><font color="#E5E5E5"> usually starts by triggering</font>

20
00:00:49,630 --> 00:00:53,470
<font color="#E5E5E5">some exploitable bug like I use after</font>

21
00:00:51,670 --> 00:00:56,230
free<font color="#CCCCCC"> out-of-bounds right or an integral</font>

22
00:00:53,470 --> 00:00:57,970
<font color="#CCCCCC">overflow</font><font color="#E5E5E5"> and then we try to gain a</font>

23
00:00:56,230 --> 00:01:00,339
higher memory<font color="#E5E5E5"> exploit primitive by</font>

24
00:00:57,970 --> 00:01:02,170
abusing<font color="#E5E5E5"> certain object types that allows</font>

25
00:01:00,340 --> 00:01:04,600
for<font color="#E5E5E5"> arbitrary kernel memory read and</font>

26
00:01:02,170 --> 00:01:06,009
write<font color="#E5E5E5"> and from that point onwards we use</font>

27
00:01:04,599 --> 00:01:08,350
arbitrary kernel memory read and write

28
00:01:06,009 --> 00:01:09,939
<font color="#E5E5E5">to actually steal a system process token</font>

29
00:01:08,350 --> 00:01:12,009
and assign it<font color="#CCCCCC"> to ourself</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> a newly</font>

30
00:01:09,939 --> 00:01:15,189
instantiated process thus gaining<font color="#E5E5E5"> an</font>

31
00:01:12,009 --> 00:01:17,380
elevated<font color="#E5E5E5"> kind of privileges which brings</font>

32
00:01:15,189 --> 00:01:19,119
us<font color="#E5E5E5"> to the question of what how actually</font>

33
00:01:17,380 --> 00:01:21,670
<font color="#CCCCCC">do we get to</font><font color="#E5E5E5"> that step are</font><font color="#CCCCCC"> the first</font>

34
00:01:19,119 --> 00:01:23,139
step of the chain<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> gonna start by</font>

35
00:01:21,670 --> 00:01:24,369
moving slowly<font color="#CCCCCC"> through the memory</font>

36
00:01:23,139 --> 00:01:26,079
<font color="#CCCCCC">corruption or use after free</font>

37
00:01:24,369 --> 00:01:28,479
vulnerability and explaining what<font color="#E5E5E5"> it is</font>

38
00:01:26,079 --> 00:01:30,609
<font color="#E5E5E5">how we usually</font><font color="#CCCCCC"> would exploit it</font><font color="#E5E5E5"> and then</font>

39
00:01:28,479 --> 00:01:32,920
move on to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> other parts of the attack</font>

40
00:01:30,609 --> 00:01:34,689
chain if we look at the<font color="#CCCCCC"> pseudocode</font><font color="#E5E5E5"> in</font>

41
00:01:32,920 --> 00:01:36,100
<font color="#E5E5E5">front of us this</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> a sample code</font>

42
00:01:34,689 --> 00:01:37,749
isn't<font color="#CCCCCC"> the real</font><font color="#E5E5E5"> world core there</font><font color="#CCCCCC"> anything</font>

43
00:01:36,100 --> 00:01:39,969
is just<font color="#CCCCCC"> to</font><font color="#E5E5E5"> explain</font><font color="#CCCCCC"> the concept itself of</font>

44
00:01:37,749 --> 00:01:42,369
use<font color="#E5E5E5"> after free at some point the</font>

45
00:01:39,969 --> 00:01:44,889
function<font color="#E5E5E5"> will allocate an object that</font>

46
00:01:42,369 --> 00:01:46,779
<font color="#E5E5E5">will call it object a and within a</font>

47
00:01:44,889 --> 00:01:49,060
<font color="#E5E5E5">certain condition something will happen</font>

48
00:01:46,779 --> 00:01:51,369
and the object<font color="#E5E5E5"> will be freed when the</font>

49
00:01:49,060 --> 00:01:53,289
<font color="#E5E5E5">object is freed the function later on</font>

50
00:01:51,369 --> 00:01:55,119
works on our object member which<font color="#CCCCCC"> is</font>

51
00:01:53,289 --> 00:01:57,670
object<font color="#E5E5E5"> number B tries to assign a value</font>

52
00:01:55,119 --> 00:01:59,590
<font color="#E5E5E5">to it when that happens</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> actually</font>

53
00:01:57,670 --> 00:02:02,439
<font color="#E5E5E5">get some memory corruption primitive</font>

54
00:01:59,590 --> 00:02:04,179
<font color="#E5E5E5">because it's working</font><font color="#CCCCCC"> on freed memory</font><font color="#E5E5E5"> how</font>

55
00:02:02,439 --> 00:02:06,788
we would exploit this<font color="#E5E5E5"> is by actually</font>

56
00:02:04,179 --> 00:02:08,590
<font color="#E5E5E5">allocating a new</font><font color="#CCCCCC"> object that is of the</font>

57
00:02:06,789 --> 00:02:10,330
<font color="#E5E5E5">same size and allocated to the same heap</font>

58
00:02:08,590 --> 00:02:12,640
that<font color="#E5E5E5"> the previous object was allocated</font>

59
00:02:10,330 --> 00:02:16,000
to<font color="#E5E5E5"> just before</font><font color="#CCCCCC"> the object was after the</font>

60
00:02:12,640 --> 00:02:17,859
object<font color="#E5E5E5"> was freed and then we assume that</font>

61
00:02:16,000 --> 00:02:20,710
the third<font color="#CCCCCC"> object which is object C has</font>

62
00:02:17,860 --> 00:02:22,480
<font color="#E5E5E5">the value of one for</font><font color="#CCCCCC"> some member then</font>

63
00:02:20,710 --> 00:02:24,100
when we use the dangling pointer from

64
00:02:22,480 --> 00:02:25,899
the<font color="#E5E5E5"> freed object-- and assign a new</font>

65
00:02:24,100 --> 00:02:28,960
value to it we're actually corrupting

66
00:02:25,900 --> 00:02:30,550
the object<font color="#CCCCCC"> C's member and thus when we</font>

67
00:02:28,960 --> 00:02:33,280
try<font color="#E5E5E5"> to print it it will have a different</font>

68
00:02:30,550 --> 00:02:35,260
<font color="#CCCCCC">value that it usually</font><font color="#E5E5E5"> is so this is just</font>

69
00:02:33,280 --> 00:02:35,770
<font color="#E5E5E5">an example of</font><font color="#CCCCCC"> how use after free might</font>

70
00:02:35,260 --> 00:02:38,140
work

71
00:02:35,770 --> 00:02:40,120
so what we're aiming for<font color="#E5E5E5"> is usually to</font>

72
00:02:38,140 --> 00:02:42,100
find certain<font color="#E5E5E5"> specific objects with</font>

73
00:02:40,120 --> 00:02:44,500
specific members that are interesting<font color="#CCCCCC"> to</font>

74
00:02:42,100 --> 00:02:46,570
us<font color="#E5E5E5"> that has adverse effects that when we</font>

75
00:02:44,500 --> 00:02:49,480
use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> this memory corruption primitive</font>

76
00:02:46,570 --> 00:02:51,100
we change<font color="#E5E5E5"> a specific value that will</font>

77
00:02:49,480 --> 00:02:54,940
give<font color="#CCCCCC"> us something much more interesting</font>

78
00:02:51,100 --> 00:02:56,320
<font color="#CCCCCC">than just</font><font color="#E5E5E5"> printing a new value the next</font>

79
00:02:54,940 --> 00:02:59,109
<font color="#CCCCCC">type of</font><font color="#E5E5E5"> memory corruption</font><font color="#CCCCCC"> that I'd like</font>

80
00:02:56,320 --> 00:03:02,769
<font color="#E5E5E5">to talk to is x86 integral</font><font color="#CCCCCC"> overflows oh</font>

81
00:02:59,110 --> 00:03:05,770
wow so if you look at<font color="#E5E5E5"> this calculation</font>

82
00:03:02,770 --> 00:03:09,870
in<font color="#E5E5E5"> x86 systems or 32-bit</font><font color="#CCCCCC"> based systems</font>

83
00:03:05,770 --> 00:03:13,300
your lean realize that<font color="#E5E5E5"> ffffff 80 plus 81</font>

84
00:03:09,870 --> 00:03:15,700
<font color="#E5E5E5">result in one well actually this is</font>

85
00:03:13,300 --> 00:03:17,800
wrong<font color="#CCCCCC"> the calculation results in zero</font>

86
00:03:15,700 --> 00:03:21,070
one zero zero zero zero zero zero zero

87
00:03:17,800 --> 00:03:23,769
one but since it's a 32-bit system<font color="#CCCCCC"> and</font>

88
00:03:21,070 --> 00:03:26,500
this<font color="#E5E5E5"> is four bytes wide registers this</font>

89
00:03:23,769 --> 00:03:29,350
value or this<font color="#CCCCCC"> number cannot actually fit</font>

90
00:03:26,500 --> 00:03:30,730
in a<font color="#E5E5E5"> 32-bit register so what happens is</font>

91
00:03:29,350 --> 00:03:32,459
that<font color="#E5E5E5"> the application of the processor</font>

92
00:03:30,730 --> 00:03:35,049
will truncate the most significant byte

93
00:03:32,459 --> 00:03:36,670
resulting in wine<font color="#E5E5E5"> and this what we call</font>

94
00:03:35,050 --> 00:03:40,030
is integral wrapping or integral<font color="#CCCCCC"> over</font>

95
00:03:36,670 --> 00:03:42,760
<font color="#CCCCCC">flows</font><font color="#E5E5E5"> so this can have adverse effects</font>

96
00:03:40,030 --> 00:03:45,400
most specifically is in linear overflows

97
00:03:42,760 --> 00:03:47,890
<font color="#E5E5E5">so if we have two scenarios the first</font>

98
00:03:45,400 --> 00:03:49,930
one is<font color="#CCCCCC"> that we allocate an object based</font>

99
00:03:47,890 --> 00:03:51,518
<font color="#E5E5E5">on a size that had some calculations on</font>

100
00:03:49,930 --> 00:03:53,709
it that resulted in the integral

101
00:03:51,519 --> 00:03:56,019
wrapping<font color="#E5E5E5"> from a large value to a smaller</font>

102
00:03:53,709 --> 00:03:59,440
<font color="#E5E5E5">one and the second scenario</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we</font>

103
00:03:56,019 --> 00:03:59,980
<font color="#E5E5E5">allocate as a fixed</font><font color="#CCCCCC"> sized object to</font>

104
00:03:59,440 --> 00:04:02,799
memory

105
00:03:59,980 --> 00:04:05,260
<font color="#E5E5E5">the next step is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the data copying</font>

106
00:04:02,799 --> 00:04:07,239
<font color="#E5E5E5">step in the first</font><font color="#CCCCCC"> scenario we</font><font color="#E5E5E5"> copy using</font>

107
00:04:05,260 --> 00:04:08,890
<font color="#E5E5E5">the original size before the integral</font>

108
00:04:07,239 --> 00:04:10,959
wrapped around and<font color="#CCCCCC"> overflow happened</font>

109
00:04:08,890 --> 00:04:12,910
thus overflowing the memory adjacent<font color="#CCCCCC"> to</font>

110
00:04:10,959 --> 00:04:15,160
it and in the<font color="#E5E5E5"> second scenario were using</font>

111
00:04:12,910 --> 00:04:17,409
a user supplied value to copy data

112
00:04:15,160 --> 00:04:19,630
without checking<font color="#E5E5E5"> that actually it is</font>

113
00:04:17,410 --> 00:04:21,940
equal or less to<font color="#CCCCCC"> the object</font><font color="#E5E5E5"> size that</font>

114
00:04:19,630 --> 00:04:24,370
was allocated<font color="#E5E5E5"> at that case we were</font>

115
00:04:21,940 --> 00:04:26,620
overflow the memory<font color="#E5E5E5"> that is adjacent</font><font color="#CCCCCC"> to</font>

116
00:04:24,370 --> 00:04:29,849
<font color="#E5E5E5">the object in</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> which is the</font><font color="#CCCCCC"> linear</font>

117
00:04:26,620 --> 00:04:29,849
<font color="#E5E5E5">overflow part of it</font>

118
00:04:30,650 --> 00:04:35,549
the next part is<font color="#E5E5E5"> about out of</font><font color="#CCCCCC"> bounds</font>

119
00:04:33,300 --> 00:04:37,289
<font color="#E5E5E5">right so again</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> allocation happens</font>

120
00:04:35,550 --> 00:04:39,120
<font color="#E5E5E5">that is using an overflowed size</font>

121
00:04:37,289 --> 00:04:42,449
<font color="#E5E5E5">resulting in a very small size</font>

122
00:04:39,120 --> 00:04:44,009
allocation and then the function<font color="#CCCCCC"> or</font>

123
00:04:42,449 --> 00:04:45,900
through the function is trying to write

124
00:04:44,009 --> 00:04:47,759
<font color="#CCCCCC">to a specific index of the object</font>

125
00:04:45,900 --> 00:04:50,878
<font color="#E5E5E5">without checking that this index is</font>

126
00:04:47,759 --> 00:04:53,879
actually<font color="#E5E5E5"> bigger or larger</font><font color="#CCCCCC"> than the</font>

127
00:04:50,879 --> 00:04:56,250
<font color="#CCCCCC">located object size</font><font color="#E5E5E5"> resulting in an out</font>

128
00:04:53,879 --> 00:04:58,409
of bounds<font color="#CCCCCC"> right into the adjacent</font><font color="#E5E5E5"> memory</font>

129
00:04:56,250 --> 00:05:02,759
depending on the index where it will go

130
00:04:58,409 --> 00:05:05,159
through so how we do would we exploit

131
00:05:02,759 --> 00:05:06,449
out of<font color="#E5E5E5"> bonds right or overflows is by</font>

132
00:05:05,159 --> 00:05:08,520
getting<font color="#CCCCCC"> the kernel memory in</font><font color="#E5E5E5"> a</font>

133
00:05:06,449 --> 00:05:09,690
<font color="#E5E5E5">deterministic States and that happens by</font>

134
00:05:08,520 --> 00:05:12,150
a series of allocations and

135
00:05:09,690 --> 00:05:13,770
deallocations<font color="#CCCCCC"> and then we</font><font color="#E5E5E5"> carry eight</font>

136
00:05:12,150 --> 00:05:16,318
memory<font color="#E5E5E5"> holes between</font><font color="#CCCCCC"> user control</font>

137
00:05:13,770 --> 00:05:17,549
objects hopefully the vulnerable object

138
00:05:16,319 --> 00:05:19,469
will be allocated<font color="#E5E5E5"> into one of these</font>

139
00:05:17,550 --> 00:05:22,139
<font color="#E5E5E5">holes</font><font color="#CCCCCC"> and before a user</font><font color="#E5E5E5"> controlled</font>

140
00:05:19,469 --> 00:05:23,759
object and then use the overflow or the

141
00:05:22,139 --> 00:05:25,500
outbound<font color="#CCCCCC"> right to actually corrupt</font>

142
00:05:23,759 --> 00:05:31,889
<font color="#E5E5E5">interesting members of the user control</font>

143
00:05:25,500 --> 00:05:33,090
object and that<font color="#CCCCCC"> brings us</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> so</font>

144
00:05:31,889 --> 00:05:35,279
after we got the<font color="#E5E5E5"> memory corruption</font>

145
00:05:33,090 --> 00:05:36,869
primitive and after we got our bug

146
00:05:35,279 --> 00:05:39,449
working at that<font color="#CCCCCC"> point we're only</font>

147
00:05:36,870 --> 00:05:40,979
crashing the system or just like cutting

148
00:05:39,449 --> 00:05:42,599
<font color="#CCCCCC">the system kernel memory in an</font>

149
00:05:40,979 --> 00:05:44,400
undetermined istic<font color="#CCCCCC"> State</font><font color="#E5E5E5"> usually</font>

150
00:05:42,599 --> 00:05:47,190
resulting in a blue<font color="#E5E5E5"> screen of death</font><font color="#CCCCCC"> and</font>

151
00:05:44,400 --> 00:05:49,080
as I<font color="#E5E5E5"> mentioned in case of use</font><font color="#CCCCCC"> after free</font>

152
00:05:47,190 --> 00:05:51,000
<font color="#E5E5E5">or out of</font><font color="#CCCCCC"> bounds right</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> overflows we</font>

153
00:05:49,080 --> 00:05:53,099
need to get some user<font color="#CCCCCC"> control objects in</font>

154
00:05:51,000 --> 00:05:55,830
there and these user objects needs to be

155
00:05:53,099 --> 00:05:57,360
interesting<font color="#E5E5E5"> objects and by interesting</font><font color="#CCCCCC"> I</font>

156
00:05:55,830 --> 00:05:59,430
<font color="#CCCCCC">mean</font><font color="#E5E5E5"> that they have interesting members</font>

157
00:05:57,360 --> 00:06:00,960
and interesting functions one of the

158
00:05:59,430 --> 00:06:02,610
most interesting members is the<font color="#CCCCCC"> size</font>

159
00:06:00,960 --> 00:06:04,529
member which allows relative read and

160
00:06:02,610 --> 00:06:07,050
write if you think about<font color="#E5E5E5"> it if an</font><font color="#CCCCCC"> object</font>

161
00:06:04,529 --> 00:06:10,469
<font color="#E5E5E5">has a size and you overflow that size or</font>

162
00:06:07,050 --> 00:06:11,909
change its<font color="#CCCCCC"> value from</font><font color="#E5E5E5"> 1 to 100 it means</font>

163
00:06:10,469 --> 00:06:14,879
that when you're working<font color="#CCCCCC"> on that object</font>

164
00:06:11,909 --> 00:06:17,039
<font color="#E5E5E5">later on this value it thinks that</font><font color="#CCCCCC"> it</font>

165
00:06:14,879 --> 00:06:19,349
<font color="#CCCCCC">sizes 100</font><font color="#E5E5E5"> well actually it says is</font><font color="#CCCCCC"> 1</font>

166
00:06:17,039 --> 00:06:21,210
<font color="#CCCCCC">accessing memory</font><font color="#E5E5E5"> relative to its</font>

167
00:06:19,349 --> 00:06:24,180
location<font color="#E5E5E5"> in memory and thus the name</font>

168
00:06:21,210 --> 00:06:26,370
relative<font color="#CCCCCC"> memory read and write the next</font>

169
00:06:24,180 --> 00:06:28,469
<font color="#E5E5E5">one is a pointer to data so if that</font>

170
00:06:26,370 --> 00:06:30,599
<font color="#CCCCCC">object has a data pointer member to it</font>

171
00:06:28,469 --> 00:06:33,000
that a pointer<font color="#E5E5E5"> that points to certain</font>

172
00:06:30,599 --> 00:06:35,190
location in the kernel memory<font color="#E5E5E5"> for a</font>

173
00:06:33,000 --> 00:06:37,349
string or for any kind of data<font color="#E5E5E5"> like</font>

174
00:06:35,190 --> 00:06:38,880
bitmap bits or something you can

175
00:06:37,349 --> 00:06:40,620
override<font color="#E5E5E5"> this pointer then whenever</font>

176
00:06:38,880 --> 00:06:42,630
you're reading<font color="#E5E5E5"> or writing from that or</font>

177
00:06:40,620 --> 00:06:44,600
<font color="#CCCCCC">you'll be able</font><font color="#E5E5E5"> to actually read and</font>

178
00:06:42,630 --> 00:06:48,090
write<font color="#E5E5E5"> from any control memory location</font>

179
00:06:44,600 --> 00:06:50,580
thus arbitrary read and write and then

180
00:06:48,090 --> 00:06:52,198
it's the data<font color="#E5E5E5"> itself of course and the</font>

181
00:06:50,580 --> 00:06:53,969
object has<font color="#CCCCCC"> to have interesting</font><font color="#E5E5E5"> functions</font>

182
00:06:52,199 --> 00:06:56,220
<font color="#E5E5E5">which is functions that allow</font><font color="#CCCCCC"> us to read</font>

183
00:06:53,970 --> 00:06:59,070
or write data from it like get data or

184
00:06:56,220 --> 00:07:01,650
<font color="#E5E5E5">set data so this is the basic concept of</font>

185
00:06:59,070 --> 00:07:04,199
<font color="#E5E5E5">what an interesting object constitutes</font>

186
00:07:01,650 --> 00:07:07,530
<font color="#E5E5E5">for us next</font><font color="#CCCCCC"> we're going to</font><font color="#E5E5E5"> talk about</font>

187
00:07:04,199 --> 00:07:10,169
the theory itself<font color="#CCCCCC"> of how object abuse</font>

188
00:07:07,530 --> 00:07:11,698
works so if we look at<font color="#E5E5E5"> the slides and we</font>

189
00:07:10,169 --> 00:07:14,490
<font color="#E5E5E5">think the first step is</font><font color="#CCCCCC"> that we</font>

190
00:07:11,699 --> 00:07:18,510
allocated<font color="#E5E5E5"> to object that had the data</font>

191
00:07:14,490 --> 00:07:20,880
size of 100<font color="#E5E5E5"> then we</font><font color="#CCCCCC"> have an exploit or a</font>

192
00:07:18,510 --> 00:07:23,130
bug<font color="#E5E5E5"> one of the bugs that we explained</font>

193
00:07:20,880 --> 00:07:25,590
before<font color="#CCCCCC"> that would</font><font color="#E5E5E5"> corrupt the size</font>

194
00:07:23,130 --> 00:07:28,320
member of the object<font color="#E5E5E5"> make it into</font><font color="#CCCCCC"> MaxEnt</font>

195
00:07:25,590 --> 00:07:29,880
or<font color="#E5E5E5"> 4 gigabytes in that case that means</font>

196
00:07:28,320 --> 00:07:31,500
that when we<font color="#CCCCCC"> were working on that object</font>

197
00:07:29,880 --> 00:07:33,600
<font color="#CCCCCC">trying to read data from</font><font color="#E5E5E5"> it were</font>

198
00:07:31,500 --> 00:07:35,820
actually<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> write up to 4 gigabytes</font>

199
00:07:33,600 --> 00:07:38,070
<font color="#E5E5E5">from the data pointer of that object</font>

200
00:07:35,820 --> 00:07:41,969
which allows us<font color="#E5E5E5"> to access</font><font color="#CCCCCC"> memory that</font>

201
00:07:38,070 --> 00:07:43,770
otherwise we wouldn't<font color="#E5E5E5"> have access to the</font>

202
00:07:41,970 --> 00:07:45,870
next step is that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> will use the</font>

203
00:07:43,770 --> 00:07:48,000
<font color="#CCCCCC">initial</font><font color="#E5E5E5"> object the first one that we</font>

204
00:07:45,870 --> 00:07:50,010
<font color="#CCCCCC">have relative and evaluate for to set</font>

205
00:07:48,000 --> 00:07:53,760
the second<font color="#E5E5E5"> object's data pointer to</font>

206
00:07:50,010 --> 00:07:56,639
<font color="#CCCCCC">whatever</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> whatever pointer that</font>

207
00:07:53,760 --> 00:07:59,550
we want in that case we have at 41 41 41

208
00:07:56,639 --> 00:08:01,349
41<font color="#CCCCCC"> and that means that whenever we try</font>

209
00:07:59,550 --> 00:08:04,200
to<font color="#E5E5E5"> read or do any operations from that</font>

210
00:08:01,349 --> 00:08:06,030
<font color="#E5E5E5">object we will actually be reading from</font>

211
00:08:04,200 --> 00:08:08,460
a control<font color="#CCCCCC"> memory location and</font><font color="#E5E5E5"> that</font>

212
00:08:06,030 --> 00:08:09,780
usually<font color="#E5E5E5"> is a kernel memory and that we</font>

213
00:08:08,460 --> 00:08:11,760
were looking<font color="#CCCCCC"> for</font>

214
00:08:09,780 --> 00:08:14,099
a certain process token or a certain

215
00:08:11,760 --> 00:08:19,020
interesting value in<font color="#E5E5E5"> memory that we can</font>

216
00:08:14,099 --> 00:08:21,780
<font color="#CCCCCC">abuse so now we move on</font><font color="#E5E5E5"> to talk about</font>

217
00:08:19,020 --> 00:08:23,969
kernel memory<font color="#E5E5E5"> so there are three</font><font color="#CCCCCC"> types</font>

218
00:08:21,780 --> 00:08:25,559
<font color="#E5E5E5">of memories</font><font color="#CCCCCC"> that or I like</font><font color="#E5E5E5"> to call them</font>

219
00:08:23,970 --> 00:08:27,060
<font color="#E5E5E5">three types of memory in the kernel</font>

220
00:08:25,560 --> 00:08:29,490
there is the desktop<font color="#E5E5E5"> heap which contains</font>

221
00:08:27,060 --> 00:08:31,530
the anti user stuff<font color="#E5E5E5"> this usually</font>

222
00:08:29,490 --> 00:08:35,099
contains window management<font color="#CCCCCC"> related</font>

223
00:08:31,530 --> 00:08:37,699
objects and like object these objects

224
00:08:35,099 --> 00:08:39,959
<font color="#E5E5E5">are</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> menus classes and such</font>

225
00:08:37,700 --> 00:08:43,409
<font color="#E5E5E5">usually objects are allocated</font><font color="#CCCCCC"> and free</font>

226
00:08:39,958 --> 00:08:47,040
to that specific heap using<font color="#E5E5E5"> RTL allocate</font>

227
00:08:43,409 --> 00:08:49,530
heap or RTL free heap the next one is

228
00:08:47,040 --> 00:08:52,140
the page session pool which has an T we

229
00:08:49,530 --> 00:08:53,480
adopted an T GDI<font color="#CCCCCC"> which contains GDI</font>

230
00:08:52,140 --> 00:08:55,790
related objects

231
00:08:53,480 --> 00:08:58,310
and that contains bitmaps<font color="#E5E5E5"> palettes</font>

232
00:08:55,790 --> 00:08:59,779
brushes<font color="#E5E5E5"> DC's lines and regions like the</font>

233
00:08:58,310 --> 00:09:01,399
nice<font color="#E5E5E5"> the thing that</font><font color="#CCCCCC"> they I have to say</font>

234
00:08:59,779 --> 00:09:02,990
here that<font color="#E5E5E5"> most people think that</font><font color="#CCCCCC"> these</font>

235
00:09:01,399 --> 00:09:05,360
objects<font color="#E5E5E5"> since you call it from user mode</font>

236
00:09:02,990 --> 00:09:06,529
<font color="#E5E5E5">are actually located in user mode but in</font>

237
00:09:05,360 --> 00:09:10,579
fact they're<font color="#E5E5E5"> actually allocated in</font>

238
00:09:06,529 --> 00:09:12,380
<font color="#CCCCCC">current and these objects are usually</font>

239
00:09:10,579 --> 00:09:15,279
allocated and freed using X allocate

240
00:09:12,380 --> 00:09:17,750
pool with tag and X free pool with tag

241
00:09:15,279 --> 00:09:19,070
there is also the<font color="#E5E5E5"> non page session pool</font>

242
00:09:17,750 --> 00:09:20,839
but this is not in<font color="#E5E5E5"> scope for this</font>

243
00:09:19,070 --> 00:09:24,410
<font color="#E5E5E5">presentation since we're not covering it</font>

244
00:09:20,839 --> 00:09:26,300
<font color="#CCCCCC">in our mitigation</font><font color="#E5E5E5"> these are just some</font>

245
00:09:24,410 --> 00:09:29,660
<font color="#CCCCCC">statistics of the number</font><font color="#E5E5E5"> of cases that</font>

246
00:09:26,300 --> 00:09:31,069
<font color="#E5E5E5">amis or</font><font color="#CCCCCC"> C have seen so far in relation</font>

247
00:09:29,660 --> 00:09:33,050
to<font color="#E5E5E5"> specifically</font><font color="#CCCCCC"> use after free</font>

248
00:09:31,070 --> 00:09:35,149
vulnerabilities about these specific

249
00:09:33,050 --> 00:09:37,339
<font color="#E5E5E5">objects the surface object is a bitmap</font>

250
00:09:35,149 --> 00:09:38,870
<font color="#E5E5E5">the tag wind is a window structure as</font>

251
00:09:37,339 --> 00:09:41,449
you<font color="#E5E5E5"> can see there is a many number</font><font color="#CCCCCC"> of</font>

252
00:09:38,870 --> 00:09:43,160
cases that appeared for a<font color="#E5E5E5"> mess or C</font><font color="#CCCCCC"> or</font>

253
00:09:41,449 --> 00:09:45,620
it was seen by<font color="#CCCCCC"> a master</font><font color="#E5E5E5"> C that had this</font>

254
00:09:43,160 --> 00:09:47,569
objects<font color="#E5E5E5"> being abused and we're gonna</font>

255
00:09:45,620 --> 00:09:52,579
<font color="#E5E5E5">discuss these objects in details in the</font>

256
00:09:47,570 --> 00:09:55,699
<font color="#CCCCCC">next slides so we're gonna start</font><font color="#E5E5E5"> with</font>

257
00:09:52,579 --> 00:09:57,319
<font color="#CCCCCC">the</font><font color="#E5E5E5"> most like oldest one and the most</font>

258
00:09:55,699 --> 00:10:00,649
common one that<font color="#E5E5E5"> was being</font><font color="#CCCCCC"> used before</font>

259
00:09:57,320 --> 00:10:02,060
which was the tag window structure if we

260
00:10:00,649 --> 00:10:04,699
look at the tag window structure in

261
00:10:02,060 --> 00:10:06,920
<font color="#CCCCCC">memory you'll notice that it has</font>

262
00:10:04,699 --> 00:10:10,010
specific<font color="#E5E5E5"> interesting functions that I</font>

263
00:10:06,920 --> 00:10:12,170
<font color="#E5E5E5">highlighted so the CPU and extra member</font>

264
00:10:10,010 --> 00:10:14,389
is actually the<font color="#E5E5E5"> number of extra bytes</font>

265
00:10:12,170 --> 00:10:15,560
<font color="#CCCCCC">that is allocated to the window</font><font color="#E5E5E5"> so if</font>

266
00:10:14,389 --> 00:10:17,240
you're able<font color="#CCCCCC"> to corrupt</font><font color="#E5E5E5"> that you're</font>

267
00:10:15,560 --> 00:10:19,760
probably getting<font color="#E5E5E5"> relative read</font><font color="#CCCCCC"> and write</font>

268
00:10:17,240 --> 00:10:23,269
<font color="#E5E5E5">you have a buffer pointer that points to</font>

269
00:10:19,760 --> 00:10:24,740
the window string name<font color="#E5E5E5"> which if you were</font>

270
00:10:23,269 --> 00:10:26,839
able<font color="#CCCCCC"> to corrupt</font><font color="#E5E5E5"> it you'll gain arbitrary</font>

271
00:10:24,740 --> 00:10:29,180
read and write and the highlighted in

272
00:10:26,839 --> 00:10:30,680
green port is<font color="#E5E5E5"> there extra byte location</font>

273
00:10:29,180 --> 00:10:32,959
in memory<font color="#CCCCCC"> that you'll be able to read</font>

274
00:10:30,680 --> 00:10:35,359
and<font color="#CCCCCC"> write</font><font color="#E5E5E5"> from now it it is worth</font>

275
00:10:32,959 --> 00:10:36,859
<font color="#CCCCCC">mentioning that there is many many ways</font>

276
00:10:35,360 --> 00:10:39,500
<font color="#CCCCCC">that you can have</font><font color="#E5E5E5"> used a tag window</font>

277
00:10:36,860 --> 00:10:41,149
structure for<font color="#E5E5E5"> example the string has a</font>

278
00:10:39,500 --> 00:10:43,130
length and a<font color="#E5E5E5"> maximum length that can</font>

279
00:10:41,149 --> 00:10:45,949
also do the same<font color="#CCCCCC"> thing what we didn't</font>

280
00:10:43,130 --> 00:10:47,149
<font color="#CCCCCC">want to because talking about that</font>

281
00:10:45,949 --> 00:10:49,459
window structure can<font color="#CCCCCC"> be a talked</font><font color="#E5E5E5"> of</font>

282
00:10:47,149 --> 00:10:51,680
itself so you just wanted<font color="#CCCCCC"> to talk about</font>

283
00:10:49,459 --> 00:10:53,750
<font color="#E5E5E5">the one of the very basic techniques of</font>

284
00:10:51,680 --> 00:10:58,040
how we've seen this being abused and

285
00:10:53,750 --> 00:10:59,300
<font color="#CCCCCC">exploit before the first step we</font><font color="#E5E5E5"> would</font>

286
00:10:58,040 --> 00:11:01,310
like to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about is how we</font><font color="#E5E5E5"> can</font>

287
00:10:59,300 --> 00:11:03,649
allocate<font color="#CCCCCC"> the window object from user</font>

288
00:11:01,310 --> 00:11:05,750
mode<font color="#E5E5E5"> and that we use create window or</font>

289
00:11:03,649 --> 00:11:07,100
create window<font color="#E5E5E5"> X does any of you guys do</font>

290
00:11:05,750 --> 00:11:08,600
C++ programming

291
00:11:07,100 --> 00:11:10,250
window management<font color="#E5E5E5"> and stuff like that so</font>

292
00:11:08,600 --> 00:11:13,760
yeah so these<font color="#E5E5E5"> functions should</font><font color="#CCCCCC"> be very</font>

293
00:11:10,250 --> 00:11:15,230
familiar to you<font color="#CCCCCC"> guys these are user mode</font>

294
00:11:13,760 --> 00:11:17,330
functions meaning<font color="#E5E5E5"> that you can call them</font>

295
00:11:15,230 --> 00:11:19,070
from any<font color="#CCCCCC"> application in the user mode or</font>

296
00:11:17,330 --> 00:11:20,960
from a Windows<font color="#E5E5E5"> from a low privileged</font>

297
00:11:19,070 --> 00:11:24,490
user and it will create some<font color="#E5E5E5"> structure</font>

298
00:11:20,960 --> 00:11:27,650
in<font color="#E5E5E5"> kernel without any interaction and</font>

299
00:11:24,490 --> 00:11:31,940
these tag window structures can be<font color="#E5E5E5"> freed</font>

300
00:11:27,650 --> 00:11:33,260
using the destroy window function now<font color="#E5E5E5"> we</font>

301
00:11:31,940 --> 00:11:35,660
<font color="#CCCCCC">mentioned that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> need specific</font>

302
00:11:33,260 --> 00:11:38,600
<font color="#E5E5E5">interesting functions to be able to read</font>

303
00:11:35,660 --> 00:11:40,520
and write<font color="#E5E5E5"> from objects in that case we</font>

304
00:11:38,600 --> 00:11:43,010
have the cat<font color="#E5E5E5"> went along or get</font><font color="#CCCCCC"> window</font>

305
00:11:40,520 --> 00:11:45,980
<font color="#CCCCCC">long pointer and the internal</font><font color="#E5E5E5"> get window</font>

306
00:11:43,010 --> 00:11:47,750
text and what they do is actually the

307
00:11:45,980 --> 00:11:50,270
<font color="#E5E5E5">gate when the long pointer reads a</font>

308
00:11:47,750 --> 00:11:52,430
specific<font color="#E5E5E5"> log at a specific index that</font><font color="#CCCCCC"> is</font>

309
00:11:50,270 --> 00:11:54,890
less<font color="#E5E5E5"> than</font><font color="#CCCCCC"> C Bo and extra from extra</font>

310
00:11:52,430 --> 00:11:56,780
bytes<font color="#E5E5E5"> and in terminal gate when the text</font>

311
00:11:54,890 --> 00:11:58,310
reads a length<font color="#E5E5E5"> that is less than or</font>

312
00:11:56,780 --> 00:12:00,620
<font color="#CCCCCC">equal</font><font color="#E5E5E5"> to maximum</font><font color="#CCCCCC"> length of the string</font>

313
00:11:58,310 --> 00:12:03,709
from string<font color="#E5E5E5"> named buffer or pointed to</font>

314
00:12:00,620 --> 00:12:06,170
by the<font color="#E5E5E5"> buffer and we</font><font color="#CCCCCC"> have also write</font>

315
00:12:03,710 --> 00:12:08,330
data functions<font color="#E5E5E5"> like chat window long and</font>

316
00:12:06,170 --> 00:12:10,670
set<font color="#E5E5E5"> window long pointer and an T user</font>

317
00:12:08,330 --> 00:12:13,520
deficit text<font color="#E5E5E5"> now and user</font><font color="#CCCCCC"> death text is</font>

318
00:12:10,670 --> 00:12:15,890
actually<font color="#CCCCCC"> a SS call</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> specific</font>

319
00:12:13,520 --> 00:12:18,980
instructions to install<font color="#E5E5E5"> them or to run</font>

320
00:12:15,890 --> 00:12:21,199
it but it does exactly the<font color="#CCCCCC"> same thing so</font>

321
00:12:18,980 --> 00:12:23,090
<font color="#CCCCCC">we can use that window long pointer to</font>

322
00:12:21,200 --> 00:12:25,340
write a specific long which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> like</font>

323
00:12:23,090 --> 00:12:28,550
depending on<font color="#E5E5E5"> the architecture</font><font color="#CCCCCC"> can be</font><font color="#E5E5E5"> 4</font>

324
00:12:25,340 --> 00:12:31,670
bytes or<font color="#E5E5E5"> 8 bytes at an index that</font><font color="#CCCCCC"> is</font>

325
00:12:28,550 --> 00:12:33,890
less than<font color="#E5E5E5"> CPU and extra into extra bytes</font>

326
00:12:31,670 --> 00:12:35,810
of<font color="#E5E5E5"> the window and</font><font color="#CCCCCC"> ante user there's a</font>

327
00:12:33,890 --> 00:12:37,580
text<font color="#E5E5E5"> we write up to</font><font color="#CCCCCC"> a length</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

328
00:12:35,810 --> 00:12:41,900
less than<font color="#E5E5E5"> or</font><font color="#CCCCCC"> equal the maximum length</font>

329
00:12:37,580 --> 00:12:44,360
string from<font color="#E5E5E5"> the string name buffer so</font>

330
00:12:41,900 --> 00:12:46,760
how can we abuse this<font color="#E5E5E5"> if we think</font><font color="#CCCCCC"> that</font>

331
00:12:44,360 --> 00:12:49,910
<font color="#CCCCCC">we have</font><font color="#E5E5E5"> two adjacent window objects we</font>

332
00:12:46,760 --> 00:12:51,980
can<font color="#CCCCCC"> actually allocate it in memory</font><font color="#E5E5E5"> we</font>

333
00:12:49,910 --> 00:12:54,770
use a some kernel bug to corrupt the CPU

334
00:12:51,980 --> 00:12:57,940
and extra of the<font color="#E5E5E5"> first object we will be</font>

335
00:12:54,770 --> 00:13:00,170
<font color="#E5E5E5">able to read the</font><font color="#CCCCCC"> adjacent window memory</font>

336
00:12:57,940 --> 00:13:02,960
<font color="#E5E5E5">functions and members and everything</font><font color="#CCCCCC"> and</font>

337
00:13:00,170 --> 00:13:04,910
<font color="#E5E5E5">thus we</font><font color="#CCCCCC"> will top the first window as an</font>

338
00:13:02,960 --> 00:13:07,280
or manager<font color="#CCCCCC"> object which means that we</font>

339
00:13:04,910 --> 00:13:09,800
<font color="#E5E5E5">will use</font><font color="#CCCCCC"> this object</font><font color="#E5E5E5"> the first window to</font>

340
00:13:07,280 --> 00:13:11,329
<font color="#E5E5E5">actually set the pointer from</font><font color="#CCCCCC"> the second</font>

341
00:13:09,800 --> 00:13:15,709
<font color="#E5E5E5">window to be able</font><font color="#CCCCCC"> to read and write from</font>

342
00:13:11,330 --> 00:13:17,690
<font color="#E5E5E5">any location in kernel memory so when</font>

343
00:13:15,710 --> 00:13:19,720
<font color="#E5E5E5">the B will be the worker object</font><font color="#CCCCCC"> we will</font>

344
00:13:17,690 --> 00:13:20,949
<font color="#E5E5E5">use the relative read and write that we</font>

345
00:13:19,720 --> 00:13:23,199
<font color="#CCCCCC">gained from the previous memory</font>

346
00:13:20,949 --> 00:13:25,149
corruption<font color="#E5E5E5"> to actually write into the</font>

347
00:13:23,199 --> 00:13:27,160
string<font color="#E5E5E5"> name buffer pointer whatever</font>

348
00:13:25,149 --> 00:13:29,139
pointer that we want and<font color="#CCCCCC"> that means that</font>

349
00:13:27,160 --> 00:13:31,480
we<font color="#CCCCCC"> reused the read and write functions</font>

350
00:13:29,139 --> 00:13:33,550
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the string</font><font color="#E5E5E5"> name buffer would be</font>

351
00:13:31,480 --> 00:13:36,250
able<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> read and write from any</font>

352
00:13:33,550 --> 00:13:37,870
location<font color="#CCCCCC"> in kernel memory</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> was</font>

353
00:13:36,250 --> 00:13:39,910
the basic part it was worth<font color="#CCCCCC"> mentioning</font>

354
00:13:37,870 --> 00:13:42,250
<font color="#E5E5E5">also at that point</font><font color="#CCCCCC"> that distich</font><font color="#E5E5E5"> this</font>

355
00:13:39,910 --> 00:13:43,240
specific technique was fixed prior to

356
00:13:42,250 --> 00:13:45,550
the mitigation that we're going<font color="#E5E5E5"> to</font>

357
00:13:43,240 --> 00:13:47,230
<font color="#E5E5E5">introduce but as I said</font><font color="#CCCCCC"> that we have</font>

358
00:13:45,550 --> 00:13:49,359
many ways of<font color="#E5E5E5"> abusing tag window</font>

359
00:13:47,230 --> 00:13:51,850
structures and that's why we<font color="#E5E5E5"> chose</font><font color="#CCCCCC"> it to</font>

360
00:13:49,360 --> 00:13:55,689
<font color="#CCCCCC">be</font><font color="#E5E5E5"> part of the mitigation that</font><font color="#CCCCCC"> Ian</font><font color="#E5E5E5"> is</font>

361
00:13:51,850 --> 00:13:59,649
<font color="#CCCCCC">gonna discuss later on now</font><font color="#E5E5E5"> after this</font>

362
00:13:55,689 --> 00:14:03,160
was abused heavily<font color="#E5E5E5"> during 2015 16 and 17</font>

363
00:13:59,649 --> 00:14:05,019
you name it<font color="#E5E5E5"> somebody are actually keen</font>

364
00:14:03,160 --> 00:14:07,629
team back in<font color="#E5E5E5"> 2015</font>

365
00:14:05,019 --> 00:14:10,480
decided<font color="#CCCCCC"> to</font><font color="#E5E5E5"> disclose a bitmap technique</font>

366
00:14:07,629 --> 00:14:13,269
very sneakily to be honest so they just

367
00:14:10,480 --> 00:14:15,399
<font color="#E5E5E5">mentioned it in one slide</font><font color="#CCCCCC"> but then nico</font>

368
00:14:13,269 --> 00:14:18,250
Economo and<font color="#CCCCCC"> Diego horas took that</font>

369
00:14:15,399 --> 00:14:20,139
<font color="#CCCCCC">mansion and 2015 and did a complete</font>

370
00:14:18,250 --> 00:14:22,750
<font color="#E5E5E5">analysis and detailed analysis of how</font>

371
00:14:20,139 --> 00:14:24,550
can we abuse bitmaps so bitmaps<font color="#E5E5E5"> are</font>

372
00:14:22,750 --> 00:14:26,199
images for you<font color="#CCCCCC"> for those of you who</font>

373
00:14:24,550 --> 00:14:28,180
don't<font color="#E5E5E5"> know and this is actually a</font>

374
00:14:26,199 --> 00:14:31,479
<font color="#E5E5E5">located in kernel memory you can do it</font>

375
00:14:28,180 --> 00:14:32,859
programmatically<font color="#E5E5E5"> and the bitmap is very</font>

376
00:14:31,480 --> 00:14:35,379
interesting object and was heavily

377
00:14:32,860 --> 00:14:38,769
<font color="#E5E5E5">abused in several exploits that we've</font>

378
00:14:35,379 --> 00:14:40,420
seen in the wild<font color="#CCCCCC"> and that's why it was</font>

379
00:14:38,769 --> 00:14:44,889
chosen as the second<font color="#E5E5E5"> most popular choice</font>

380
00:14:40,420 --> 00:14:47,229
for object abuse in the kernel<font color="#E5E5E5"> the</font>

381
00:14:44,889 --> 00:14:49,689
bitmaps<font color="#E5E5E5"> in kernel memory is dubbed</font><font color="#CCCCCC"> serve</font>

382
00:14:47,230 --> 00:14:52,930
objects<font color="#CCCCCC"> it has a pool tag which is in</font>

383
00:14:49,689 --> 00:14:54,730
the header<font color="#CCCCCC"> of jh5 or GLA v</font><font color="#E5E5E5"> depending if</font>

384
00:14:52,930 --> 00:14:57,370
it was<font color="#E5E5E5"> allocated to the locus</font><font color="#CCCCCC"> ID</font><font color="#E5E5E5"> list or</font>

385
00:14:54,730 --> 00:14:59,889
the normal<font color="#E5E5E5"> kernel pool and this is how</font>

386
00:14:57,370 --> 00:15:02,379
the bitmap structure looks at the kernel

387
00:14:59,889 --> 00:15:04,750
memory<font color="#E5E5E5"> level as you can see I have</font>

388
00:15:02,379 --> 00:15:06,370
allotted<font color="#E5E5E5"> two members as well one is the</font>

389
00:15:04,750 --> 00:15:07,959
sizzle bitmap which<font color="#E5E5E5"> is the width and</font>

390
00:15:06,370 --> 00:15:10,600
<font color="#CCCCCC">height of bitmap that</font><font color="#E5E5E5"> is supplied by</font><font color="#CCCCCC"> the</font>

391
00:15:07,959 --> 00:15:12,790
<font color="#E5E5E5">user and the other one is</font><font color="#CCCCCC"> P V scan 0</font>

392
00:15:10,600 --> 00:15:16,629
which is a pointer to the bitmap bits in

393
00:15:12,790 --> 00:15:19,029
memory<font color="#CCCCCC"> you can allocate bitmaps using a</font>

394
00:15:16,629 --> 00:15:20,860
create bitmap function and you can

395
00:15:19,029 --> 00:15:23,620
<font color="#E5E5E5">supply a width a height and planes which</font>

396
00:15:20,860 --> 00:15:25,569
actually allows you<font color="#E5E5E5"> to control the size</font>

397
00:15:23,620 --> 00:15:28,899
of the bitmap<font color="#E5E5E5"> being allocated to a</font>

398
00:15:25,569 --> 00:15:30,579
specific memory at that time and then

399
00:15:28,899 --> 00:15:32,620
you can<font color="#E5E5E5"> free it using delete object</font>

400
00:15:30,579 --> 00:15:33,000
<font color="#E5E5E5">remember we talked about getting the</font>

401
00:15:32,620 --> 00:15:34,410
kernel

402
00:15:33,000 --> 00:15:36,330
memory in<font color="#CCCCCC"> their opinion terminus tech</font>

403
00:15:34,410 --> 00:15:38,040
<font color="#E5E5E5">states using</font><font color="#CCCCCC"> a series of allocations and</font>

404
00:15:36,330 --> 00:15:41,190
deallocations so this<font color="#E5E5E5"> would be easily</font>

405
00:15:38,040 --> 00:15:44,099
<font color="#E5E5E5">done using these specific functions then</font>

406
00:15:41,190 --> 00:15:46,680
you can read from<font color="#E5E5E5"> the bitmap data using</font>

407
00:15:44,100 --> 00:15:48,210
get bitmap bits so this will read up<font color="#E5E5E5"> to</font>

408
00:15:46,680 --> 00:15:49,920
sizzle bitmap<font color="#E5E5E5"> which is the width and</font>

409
00:15:48,210 --> 00:15:53,910
<font color="#CCCCCC">height of the bitmap data from the</font>

410
00:15:49,920 --> 00:15:55,829
address pointed to by<font color="#E5E5E5"> PV scan 0 and you</font>

411
00:15:53,910 --> 00:15:57,780
<font color="#E5E5E5">can write data using set bitmap bits</font>

412
00:15:55,830 --> 00:16:00,240
which<font color="#CCCCCC"> is actually right</font><font color="#E5E5E5"> up to size a</font>

413
00:15:57,780 --> 00:16:02,850
bitmap data into an address<font color="#E5E5E5"> pointed to</font>

414
00:16:00,240 --> 00:16:05,010
<font color="#CCCCCC">by PV C</font><font color="#E5E5E5"> and 0 moving on to the</font>

415
00:16:02,850 --> 00:16:07,020
<font color="#E5E5E5">exploitation step the same as the window</font>

416
00:16:05,010 --> 00:16:08,790
object<font color="#E5E5E5"> usually you want to get</font><font color="#CCCCCC"> two</font>

417
00:16:07,020 --> 00:16:10,560
bitmaps<font color="#E5E5E5"> allocated adjacent to each</font><font color="#CCCCCC"> other</font>

418
00:16:08,790 --> 00:16:12,990
or near each other<font color="#E5E5E5"> in memory not</font>

419
00:16:10,560 --> 00:16:14,609
necessarily following<font color="#E5E5E5"> each other you</font>

420
00:16:12,990 --> 00:16:17,040
will corrupt the size number of the

421
00:16:14,610 --> 00:16:18,480
first<font color="#E5E5E5"> one which will</font><font color="#CCCCCC"> give you a lot of</font>

422
00:16:17,040 --> 00:16:21,599
read and<font color="#CCCCCC"> write hopefully you'll be</font><font color="#E5E5E5"> able</font>

423
00:16:18,480 --> 00:16:23,340
to read a right up to the<font color="#CCCCCC"> pv scan 0</font>

424
00:16:21,600 --> 00:16:26,970
which is a pointer member of the second

425
00:16:23,340 --> 00:16:29,010
<font color="#E5E5E5">bitmap and you bitmap will be the</font>

426
00:16:26,970 --> 00:16:31,470
manager<font color="#E5E5E5"> object</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> will be used to set</font>

427
00:16:29,010 --> 00:16:34,170
the pointer to read<font color="#E5E5E5"> and write from later</font>

428
00:16:31,470 --> 00:16:36,120
<font color="#E5E5E5">on we use the relative read and write to</font>

429
00:16:34,170 --> 00:16:37,860
override the previous can zero member of

430
00:16:36,120 --> 00:16:39,750
the second bitmap and use that as a

431
00:16:37,860 --> 00:16:41,280
worker<font color="#E5E5E5"> object and</font><font color="#CCCCCC"> will be able</font><font color="#E5E5E5"> to read</font>

432
00:16:39,750 --> 00:16:44,430
and<font color="#CCCCCC"> write</font><font color="#E5E5E5"> from any point location in</font>

433
00:16:41,280 --> 00:16:47,400
memory<font color="#E5E5E5"> now this technique was killed in</font>

434
00:16:44,430 --> 00:16:49,800
<font color="#E5E5E5">RS 3 and everybody was talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it</font>

435
00:16:47,400 --> 00:16:51,630
<font color="#CCCCCC">and</font><font color="#E5E5E5"> as Dan mentioned actually when we</font>

436
00:16:49,800 --> 00:16:53,069
<font color="#CCCCCC">were working together at</font><font color="#E5E5E5"> sense</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> of</font>

437
00:16:51,630 --> 00:16:55,770
the time I was<font color="#CCCCCC"> working on a certain</font>

438
00:16:53,070 --> 00:16:58,589
exploit<font color="#E5E5E5"> when this technique was killed</font>

439
00:16:55,770 --> 00:17:01,140
<font color="#E5E5E5">and I had to look for</font><font color="#CCCCCC"> a new thing which</font>

440
00:16:58,589 --> 00:17:02,760
<font color="#CCCCCC">brings us to the pallet objects</font><font color="#E5E5E5"> pallet</font>

441
00:17:01,140 --> 00:17:06,810
<font color="#CCCCCC">object was disclosed by me</font><font color="#E5E5E5"> at Def Con</font>

442
00:17:02,760 --> 00:17:08,189
<font color="#E5E5E5">last year which was</font><font color="#CCCCCC"> interesting when I</font>

443
00:17:06,810 --> 00:17:09,270
worked<font color="#E5E5E5"> from Microsoft I realized that</font>

444
00:17:08,189 --> 00:17:11,720
<font color="#E5E5E5">there are</font><font color="#CCCCCC"> many people</font><font color="#E5E5E5"> who</font><font color="#CCCCCC"> knew about</font>

445
00:17:09,270 --> 00:17:14,819
<font color="#E5E5E5">this technique before</font><font color="#CCCCCC"> but yeah</font>

446
00:17:11,720 --> 00:17:16,350
so<font color="#E5E5E5"> same again</font><font color="#CCCCCC"> pallet objects are</font>

447
00:17:14,819 --> 00:17:18,300
<font color="#CCCCCC">allocated memory</font><font color="#E5E5E5"> pallets are the color</font>

448
00:17:16,349 --> 00:17:19,409
palettes for a specific<font color="#E5E5E5"> for anything</font>

449
00:17:18,300 --> 00:17:20,938
really you<font color="#E5E5E5"> can allocate it</font>

450
00:17:19,410 --> 00:17:23,699
programmatically<font color="#E5E5E5"> and it will have a</font>

451
00:17:20,939 --> 00:17:25,650
series of<font color="#E5E5E5"> arrays and buffers so</font>

452
00:17:23,699 --> 00:17:27,600
palette entries have a couple of

453
00:17:25,650 --> 00:17:30,150
interesting<font color="#E5E5E5"> members actually much more</font>

454
00:17:27,599 --> 00:17:32,129
<font color="#E5E5E5">than that</font><font color="#CCCCCC"> but these</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> interesting</font>

455
00:17:30,150 --> 00:17:34,980
<font color="#E5E5E5">one for that specific object abuse</font>

456
00:17:32,130 --> 00:17:36,720
technique the one first<font color="#E5E5E5"> one is the</font><font color="#CCCCCC"> see</font>

457
00:17:34,980 --> 00:17:38,970
entries member which<font color="#CCCCCC"> is the number of</font>

458
00:17:36,720 --> 00:17:40,680
entry counts that the palette has of

459
00:17:38,970 --> 00:17:43,230
colors<font color="#CCCCCC"> so the number</font><font color="#E5E5E5"> of colors</font><font color="#CCCCCC"> that the</font>

460
00:17:40,680 --> 00:17:44,730
palette has<font color="#E5E5E5"> and the second one is a</font><font color="#CCCCCC"> P</font>

461
00:17:43,230 --> 00:17:46,000
first color which<font color="#E5E5E5"> is a pointer</font><font color="#CCCCCC"> to the</font>

462
00:17:44,730 --> 00:17:48,400
first color

463
00:17:46,000 --> 00:17:49,900
and interestingly enough<font color="#E5E5E5"> they're located</font>

464
00:17:48,400 --> 00:17:51,850
colors of the array<font color="#CCCCCC"> of colors that the</font>

465
00:17:49,900 --> 00:17:53,620
palette<font color="#E5E5E5"> has is actually</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> end of</font>

466
00:17:51,850 --> 00:17:56,050
the<font color="#E5E5E5"> object which is the APL color easily</font>

467
00:17:53,620 --> 00:18:01,780
<font color="#E5E5E5">so P first color actually points to a</font>

468
00:17:56,050 --> 00:18:03,399
<font color="#E5E5E5">pale color so palette allocation it's a</font>

469
00:18:01,780 --> 00:18:05,710
bit of a hassle<font color="#E5E5E5"> to allocate a palette</font>

470
00:18:03,400 --> 00:18:07,450
but<font color="#CCCCCC"> we go</font><font color="#E5E5E5"> through it so you have great</font>

471
00:18:05,710 --> 00:18:09,310
palette function that takes a logical

472
00:18:07,450 --> 00:18:10,750
palette<font color="#E5E5E5"> this logical palette has the</font>

473
00:18:09,310 --> 00:18:12,310
<font color="#E5E5E5">palette version the palette numbers</font>

474
00:18:10,750 --> 00:18:14,500
which is<font color="#E5E5E5"> the C entries that we're</font>

475
00:18:12,310 --> 00:18:16,720
talking about<font color="#E5E5E5"> and the array of palette</font>

476
00:18:14,500 --> 00:18:19,150
entries<font color="#E5E5E5"> which contains the colors that</font>

477
00:18:16,720 --> 00:18:20,710
we mentioned<font color="#E5E5E5"> and this is how we can</font>

478
00:18:19,150 --> 00:18:25,360
programmatically<font color="#E5E5E5"> allocate it from a</font><font color="#CCCCCC"> C</font>

479
00:18:20,710 --> 00:18:27,280
program or a C++ program<font color="#E5E5E5"> so this what</font><font color="#CCCCCC"> we</font>

480
00:18:25,360 --> 00:18:29,889
can mention<font color="#E5E5E5"> here is that this gives us</font>

481
00:18:27,280 --> 00:18:32,170
really<font color="#E5E5E5"> precise a location inside the</font>

482
00:18:29,890 --> 00:18:34,180
<font color="#E5E5E5">kernel so you can actually say this I</font>

483
00:18:32,170 --> 00:18:35,800
want to<font color="#E5E5E5"> locate a palette that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> hundred</font>

484
00:18:34,180 --> 00:18:38,980
bytes<font color="#CCCCCC"> it will get</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> points</font>

485
00:18:35,800 --> 00:18:40,840
internal memory<font color="#E5E5E5"> and then it can also be</font>

486
00:18:38,980 --> 00:18:45,370
destroyed destroyed<font color="#E5E5E5"> using the delete</font>

487
00:18:40,840 --> 00:18:47,320
object as well you can read data<font color="#E5E5E5"> use the</font>

488
00:18:45,370 --> 00:18:49,959
<font color="#CCCCCC">cap palette entries which will read up</font>

489
00:18:47,320 --> 00:18:53,080
to<font color="#CCCCCC"> entries from</font><font color="#E5E5E5"> an index that a data</font>

490
00:18:49,960 --> 00:18:54,910
pointed to by<font color="#E5E5E5"> P first color which allows</font>

491
00:18:53,080 --> 00:18:57,580
us very precise<font color="#E5E5E5"> reading a writing of</font>

492
00:18:54,910 --> 00:18:59,830
coronal memory and also<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> write</font>

493
00:18:57,580 --> 00:19:01,750
<font color="#E5E5E5">data we have actually two functions that</font>

494
00:18:59,830 --> 00:19:03,040
allows<font color="#CCCCCC"> us to write data</font><font color="#E5E5E5"> to memory using</font>

495
00:19:01,750 --> 00:19:05,350
palettes which is the set palette

496
00:19:03,040 --> 00:19:08,080
entries and the animate palette both

497
00:19:05,350 --> 00:19:10,389
will do the same<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it will write</font>

498
00:19:08,080 --> 00:19:12,850
up to<font color="#E5E5E5"> n entries at a specific index that</font>

499
00:19:10,390 --> 00:19:16,030
we supply from data point<font color="#CCCCCC"> two</font><font color="#E5E5E5"> by P first</font>

500
00:19:12,850 --> 00:19:17,830
color again the way<font color="#E5E5E5"> that we can abuse</font><font color="#CCCCCC"> it</font>

501
00:19:16,030 --> 00:19:19,720
if we allocate<font color="#CCCCCC"> two adjacent</font><font color="#E5E5E5"> or near to</font>

502
00:19:17,830 --> 00:19:21,730
<font color="#E5E5E5">each other palette objects in memory if</font>

503
00:19:19,720 --> 00:19:23,830
we corrupt the<font color="#E5E5E5"> C entries member of the</font>

504
00:19:21,730 --> 00:19:26,020
first one<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> gain relative and read</font>

505
00:19:23,830 --> 00:19:28,149
and write that will allow<font color="#CCCCCC"> us to read</font><font color="#E5E5E5"> and</font>

506
00:19:26,020 --> 00:19:30,430
write<font color="#CCCCCC"> into the adjacent</font><font color="#E5E5E5"> palette</font><font color="#CCCCCC"> and we</font>

507
00:19:28,150 --> 00:19:33,670
can then<font color="#E5E5E5"> just use</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> palette as a</font>

508
00:19:30,430 --> 00:19:36,010
manager<font color="#E5E5E5"> and overwrite the P first color</font>

509
00:19:33,670 --> 00:19:38,350
pointer and gain<font color="#CCCCCC"> arbitrary read and</font>

510
00:19:36,010 --> 00:19:39,879
<font color="#CCCCCC">write</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> to kernel memory and thus be</font>

511
00:19:38,350 --> 00:19:42,189
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to move forward with the</font>

512
00:19:39,880 --> 00:19:43,750
<font color="#E5E5E5">exploitation it was worth mentioning</font>

513
00:19:42,190 --> 00:19:46,300
<font color="#CCCCCC">that the palette technique has some</font>

514
00:19:43,750 --> 00:19:48,970
restrictions<font color="#CCCCCC"> so if you clobber or</font>

515
00:19:46,300 --> 00:19:51,010
overwrite any<font color="#E5E5E5"> of these members it result</font>

516
00:19:48,970 --> 00:19:52,870
<font color="#CCCCCC">in a black</font><font color="#E5E5E5"> screen of</font><font color="#CCCCCC"> death or atman</font>

517
00:19:51,010 --> 00:19:54,220
<font color="#CCCCCC">animator resultant</font><font color="#E5E5E5"> and an error that you</font>

518
00:19:52,870 --> 00:19:56,560
will not be able<font color="#E5E5E5"> to read and write from</font>

519
00:19:54,220 --> 00:19:58,790
<font color="#E5E5E5">however this was covered by</font><font color="#CCCCCC"> Sebastian</font>

520
00:19:56,560 --> 00:20:01,879
<font color="#CCCCCC">applet bit shifter if you guys</font><font color="#E5E5E5"> know him</font>

521
00:19:58,790 --> 00:20:03,379
and cosmic<font color="#E5E5E5"> I think it offensive corn and</font>

522
00:20:01,880 --> 00:20:04,850
they<font color="#CCCCCC"> managed to</font><font color="#E5E5E5"> work around this</font>

523
00:20:03,380 --> 00:20:06,470
technique<font color="#E5E5E5"> usually</font><font color="#CCCCCC"> when you</font><font color="#E5E5E5"> have</font>

524
00:20:04,850 --> 00:20:08,419
<font color="#CCCCCC">arbitrary or relative read and write it</font>

525
00:20:06,470 --> 00:20:09,770
able to<font color="#E5E5E5"> read a lot of data and a lot</font><font color="#CCCCCC"> of</font>

526
00:20:08,420 --> 00:20:12,200
data which allows<font color="#E5E5E5"> you to fix these</font>

527
00:20:09,770 --> 00:20:15,440
members<font color="#E5E5E5"> when you are working with</font><font color="#CCCCCC"> an</font>

528
00:20:12,200 --> 00:20:20,510
exploit<font color="#E5E5E5"> so the next thing I wanted to</font>

529
00:20:15,440 --> 00:20:22,430
show<font color="#CCCCCC"> you guys</font><font color="#E5E5E5"> I hope it's working</font><font color="#CCCCCC"> this</font>

530
00:20:20,510 --> 00:20:24,770
<font color="#E5E5E5">is actually the demo that I had from Def</font>

531
00:20:22,430 --> 00:20:26,660
Con<font color="#E5E5E5"> it's on Windows 7</font><font color="#CCCCCC"> sp1 but it</font><font color="#E5E5E5"> will</font>

532
00:20:24,770 --> 00:20:29,420
just demo the technique itself

533
00:20:26,660 --> 00:20:32,330
so we're running from<font color="#CCCCCC"> a low</font><font color="#E5E5E5"> privileged</font>

534
00:20:29,420 --> 00:20:34,820
user this<font color="#E5E5E5"> is a debugger that</font><font color="#CCCCCC"> we're</font>

535
00:20:32,330 --> 00:20:36,439
running<font color="#E5E5E5"> from the other side as you can</font>

536
00:20:34,820 --> 00:20:38,120
<font color="#CCCCCC">see on the left</font><font color="#E5E5E5"> side this</font><font color="#CCCCCC"> is actually</font>

537
00:20:36,440 --> 00:20:40,370
the exploit code so<font color="#E5E5E5"> this is a proper</font>

538
00:20:38,120 --> 00:20:43,370
exploit<font color="#E5E5E5"> whether it is a out of bounds</font>

539
00:20:40,370 --> 00:20:45,080
right<font color="#E5E5E5"> in kernel memory</font><font color="#CCCCCC"> it was already</font>

540
00:20:43,370 --> 00:20:47,870
fixed<font color="#E5E5E5"> a long time ago we can see that we</font>

541
00:20:45,080 --> 00:20:50,659
allocated a very small object and then

542
00:20:47,870 --> 00:20:53,419
we<font color="#CCCCCC"> had a</font><font color="#E5E5E5"> pool layout deterministic state</font>

543
00:20:50,660 --> 00:20:55,970
we had our object allocated<font color="#CCCCCC"> before a</font>

544
00:20:53,420 --> 00:20:58,930
bitmap<font color="#E5E5E5"> and after a bitmap has a pallet</font>

545
00:20:55,970 --> 00:21:02,300
after it I usually just<font color="#E5E5E5"> demo a technique</font>

546
00:20:58,930 --> 00:21:04,250
<font color="#E5E5E5">GDI object up when debug extension that</font>

547
00:21:02,300 --> 00:21:05,780
<font color="#E5E5E5">was developed by Diego</font><font color="#CCCCCC"> Horace I just had</font>

548
00:21:04,250 --> 00:21:08,330
to modify<font color="#E5E5E5"> it a little bit because I</font>

549
00:21:05,780 --> 00:21:11,389
couldn't find a<font color="#CCCCCC"> good warez anymore</font><font color="#E5E5E5"> for</font>

550
00:21:08,330 --> 00:21:14,810
<font color="#CCCCCC">some reason as you</font><font color="#E5E5E5"> can see I already</font>

551
00:21:11,390 --> 00:21:18,260
extended<font color="#E5E5E5"> the bitmap size from 1 e 6</font><font color="#CCCCCC"> + 1</font>

552
00:21:14,810 --> 00:21:19,820
<font color="#CCCCCC">- 1 e 6 +</font><font color="#E5E5E5"> 6 which gives</font><font color="#CCCCCC"> me enough memory</font>

553
00:21:18,260 --> 00:21:22,460
to read and write from<font color="#E5E5E5"> into the next</font>

554
00:21:19,820 --> 00:21:25,370
<font color="#CCCCCC">palette and then I'm able</font><font color="#E5E5E5"> to actually</font>

555
00:21:22,460 --> 00:21:27,260
<font color="#E5E5E5">dump the new palette or the original</font>

556
00:21:25,370 --> 00:21:29,479
palette<font color="#E5E5E5"> at that size and you will see</font>

557
00:21:27,260 --> 00:21:31,790
that the first entries are actually<font color="#E5E5E5"> 1</font>

558
00:21:29,480 --> 00:21:34,130
III so that's the<font color="#E5E5E5"> number of</font><font color="#CCCCCC"> entries that</font>

559
00:21:31,790 --> 00:21:36,200
best palette can read after I move

560
00:21:34,130 --> 00:21:38,030
forward<font color="#E5E5E5"> with</font><font color="#CCCCCC"> my said bet my pets I</font>

561
00:21:36,200 --> 00:21:39,950
changed that<font color="#E5E5E5"> to maxed int so now I'm</font>

562
00:21:38,030 --> 00:21:42,410
able<font color="#CCCCCC"> to read and write</font><font color="#E5E5E5"> up to</font><font color="#CCCCCC"> 4 gigs of</font>

563
00:21:39,950 --> 00:21:45,970
<font color="#E5E5E5">memory from that palette object from</font>

564
00:21:42,410 --> 00:21:49,720
user<font color="#E5E5E5"> mode a very low level</font><font color="#CCCCCC"> chooser</font><font color="#E5E5E5"> and</font>

565
00:21:45,970 --> 00:21:52,340
then after I<font color="#E5E5E5"> modified that I</font><font color="#CCCCCC"> fixed the</font>

566
00:21:49,720 --> 00:21:54,560
<font color="#E5E5E5">behavior of the original</font><font color="#CCCCCC"> bitmap so</font>

567
00:21:52,340 --> 00:21:56,570
because I<font color="#E5E5E5"> don't want object to actually</font>

568
00:21:54,560 --> 00:21:59,450
<font color="#CCCCCC">do a blue</font><font color="#E5E5E5"> screen of death</font><font color="#CCCCCC"> after I</font><font color="#E5E5E5"> leave</font>

569
00:21:56,570 --> 00:22:02,210
and I modify the pointer for<font color="#E5E5E5"> the second</font>

570
00:21:59,450 --> 00:22:03,920
palette<font color="#E5E5E5"> to look at the first</font><font color="#CCCCCC"> pallet to</font>

571
00:22:02,210 --> 00:22:06,620
look at the first<font color="#E5E5E5"> bitmap and modify its</font>

572
00:22:03,920 --> 00:22:09,030
header because if I love the habits

573
00:22:06,620 --> 00:22:11,070
clobbered or overflowed it will actually

574
00:22:09,030 --> 00:22:12,450
<font color="#CCCCCC">died after I gained</font><font color="#E5E5E5"> the privileges which</font>

575
00:22:11,070 --> 00:22:13,710
is not<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that you want</font><font color="#E5E5E5"> as an</font>

576
00:22:12,450 --> 00:22:15,720
attacker if you want the<font color="#E5E5E5"> division</font><font color="#CCCCCC"> of</font>

577
00:22:13,710 --> 00:22:17,850
privileges<font color="#CCCCCC"> on some server</font><font color="#E5E5E5"> and then</font>

578
00:22:15,720 --> 00:22:22,920
suddenly the server dies<font color="#E5E5E5"> means that</font>

579
00:22:17,850 --> 00:22:26,250
someone is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to look into it so this</font>

580
00:22:22,920 --> 00:22:28,980
<font color="#E5E5E5">is the clobbered</font><font color="#CCCCCC"> bitmap header and this</font>

581
00:22:26,250 --> 00:22:31,970
is after I<font color="#E5E5E5"> return to it I successfully</font>

582
00:22:28,980 --> 00:22:35,460
<font color="#E5E5E5">like just fixed it into the original one</font>

583
00:22:31,970 --> 00:22:36,990
and then just<font color="#CCCCCC"> to show you</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> a process</font>

584
00:22:35,460 --> 00:22:38,970
structure is a<font color="#E5E5E5"> pro is a structure that</font>

585
00:22:36,990 --> 00:22:40,770
<font color="#CCCCCC">is contained</font><font color="#E5E5E5"> in kernel</font><font color="#CCCCCC"> memory for each</font>

586
00:22:38,970 --> 00:22:43,050
<font color="#CCCCCC">learning process that contains several</font>

587
00:22:40,770 --> 00:22:46,230
interesting information<font color="#E5E5E5"> what we're</font>

588
00:22:43,050 --> 00:22:47,760
<font color="#CCCCCC">interesting in</font><font color="#E5E5E5"> is the token which shows</font>

589
00:22:46,230 --> 00:22:51,090
the privileges of<font color="#E5E5E5"> the current</font><font color="#CCCCCC"> process</font>

590
00:22:47,760 --> 00:22:52,770
and here we are<font color="#E5E5E5"> I'm gonna steal</font><font color="#CCCCCC"> that</font>

591
00:22:51,090 --> 00:22:54,179
process token by a relative read and

592
00:22:52,770 --> 00:22:58,639
write or<font color="#CCCCCC"> repair battery read and write</font>

593
00:22:54,180 --> 00:23:01,800
using<font color="#CCCCCC"> pallets and</font><font color="#E5E5E5"> then set</font><font color="#CCCCCC"> it to my own</font>

594
00:22:58,640 --> 00:23:11,820
<font color="#CCCCCC">exe</font><font color="#E5E5E5"> and from that point onward I will</font>

595
00:23:01,800 --> 00:23:13,590
<font color="#E5E5E5">just drop into a shell as you see now</font>

596
00:23:11,820 --> 00:23:15,929
<font color="#E5E5E5">the token for</font><font color="#CCCCCC"> my process has been</font>

597
00:23:13,590 --> 00:23:18,149
changed<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> like the system</font>

598
00:23:15,930 --> 00:23:21,080
process<font color="#CCCCCC"> which means that now I have</font>

599
00:23:18,150 --> 00:23:21,080
system privileges

600
00:23:24,559 --> 00:23:28,980
so successfully<font color="#E5E5E5"> awaited my privileges</font>

601
00:23:27,330 --> 00:23:31,559
from<font color="#E5E5E5"> a local</font><font color="#CCCCCC"> low privilege user to</font>

602
00:23:28,980 --> 00:23:33,570
system using a simple technique and<font color="#CCCCCC"> just</font>

603
00:23:31,559 --> 00:23:41,190
using object<font color="#CCCCCC"> abused not using some magic</font>

604
00:23:33,570 --> 00:23:43,830
tricks<font color="#E5E5E5"> or anything for the next part Ian</font>

605
00:23:41,190 --> 00:23:45,870
will talk to<font color="#E5E5E5"> us through the death of</font>

606
00:23:43,830 --> 00:23:47,428
<font color="#CCCCCC">kernel object abuse and what</font><font color="#E5E5E5"> Microsoft</font>

607
00:23:45,870 --> 00:23:50,750
did to<font color="#E5E5E5"> actually face that type</font><font color="#CCCCCC"> of</font>

608
00:23:47,429 --> 00:23:50,750
attacks and<font color="#CCCCCC"> this</font><font color="#E5E5E5"> type</font><font color="#CCCCCC"> of techniques</font>

609
00:23:52,480 --> 00:23:57,659
[Applause]

610
00:23:55,010 --> 00:24:00,210
hello everyone my name is<font color="#CCCCCC"> Ian cronquist</font>

611
00:23:57,659 --> 00:24:02,429
<font color="#E5E5E5">and today</font><font color="#CCCCCC"> we all live in</font><font color="#E5E5E5"> a world full of</font>

612
00:24:00,210 --> 00:24:05,580
vulnerable software as you<font color="#CCCCCC"> heard in</font><font color="#E5E5E5"> the</font>

613
00:24:02,429 --> 00:24:08,960
keynote<font color="#E5E5E5"> and</font><font color="#CCCCCC"> on there</font><font color="#E5E5E5"> are thousands of</font>

614
00:24:05,580 --> 00:24:12,120
<font color="#CCCCCC">developers throughout the world</font><font color="#E5E5E5"> who</font><font color="#CCCCCC"> are</font>

615
00:24:08,960 --> 00:24:16,110
who are introducing<font color="#E5E5E5"> new security bugs</font>

616
00:24:12,120 --> 00:24:19,049
<font color="#E5E5E5">every day and we can't fix every bug and</font>

617
00:24:16,110 --> 00:24:21,779
so in the<font color="#E5E5E5"> face of this systemic problem</font>

618
00:24:19,049 --> 00:24:24,750
we need a<font color="#E5E5E5"> systemic solution something</font>

619
00:24:21,779 --> 00:24:27,179
like mitigations mitigations<font color="#CCCCCC"> are a way</font>

620
00:24:24,750 --> 00:24:31,950
for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> to raise</font><font color="#CCCCCC"> the bar against hackers</font>

621
00:24:27,179 --> 00:24:35,130
<font color="#E5E5E5">and make exploits on and make bugs</font>

622
00:24:31,950 --> 00:24:38,580
difficult to turn into exploits<font color="#CCCCCC"> or even</font>

623
00:24:35,130 --> 00:24:41,970
impossible<font color="#E5E5E5"> now for Microsoft we're</font>

624
00:24:38,580 --> 00:24:44,820
fortunate to<font color="#CCCCCC"> have a need</font><font color="#E5E5E5"> to bring</font><font color="#CCCCCC"> this a</font>

625
00:24:41,970 --> 00:24:48,000
<font color="#E5E5E5">little closer we're fortunate to</font><font color="#CCCCCC"> have a</font>

626
00:24:44,820 --> 00:24:50,250
historic database of bugs and

627
00:24:48,000 --> 00:24:52,529
vulnerabilities<font color="#CCCCCC"> and we've been able</font><font color="#E5E5E5"> to</font>

628
00:24:50,250 --> 00:24:55,529
look at what the what the<font color="#E5E5E5"> problems have</font>

629
00:24:52,529 --> 00:24:58,470
been in when 32k you know<font color="#E5E5E5"> Windows has</font>

630
00:24:55,529 --> 00:25:02,789
graphics drivers and we found<font color="#E5E5E5"> that 23%</font>

631
00:24:58,470 --> 00:25:05,700
of of these<font color="#E5E5E5"> vulnerabilities</font><font color="#CCCCCC"> that these</font>

632
00:25:02,789 --> 00:25:08,908
exploits<font color="#E5E5E5"> have been use after</font><font color="#CCCCCC"> freeze and</font>

633
00:25:05,700 --> 00:25:12,149
<font color="#E5E5E5">this is a relatively</font><font color="#CCCCCC"> simple</font><font color="#E5E5E5"> homogeneous</font>

634
00:25:08,909 --> 00:25:17,130
<font color="#E5E5E5">sort of sort of bug class which makes it</font>

635
00:25:12,149 --> 00:25:19,500
a great<font color="#E5E5E5"> target for</font><font color="#CCCCCC"> a mitigation</font><font color="#E5E5E5"> so when</font>

636
00:25:17,130 --> 00:25:22,049
we go ahead<font color="#E5E5E5"> and</font><font color="#CCCCCC"> design a mitigation we</font>

637
00:25:19,500 --> 00:25:24,270
need to talk<font color="#E5E5E5"> about and think about what</font>

638
00:25:22,049 --> 00:25:28,289
the attacker<font color="#E5E5E5"> knows and what the attacker</font>

639
00:25:24,270 --> 00:25:30,960
can do and we in this case we<font color="#CCCCCC"> assume</font>

640
00:25:28,289 --> 00:25:34,540
that the attacker has found a use after

641
00:25:30,960 --> 00:25:38,050
free<font color="#E5E5E5"> in one of the win32</font><font color="#CCCCCC"> K objects</font>

642
00:25:34,540 --> 00:25:39,970
which we protect<font color="#E5E5E5"> and they can make this</font>

643
00:25:38,050 --> 00:25:41,050
use after free<font color="#E5E5E5"> a career at arbitrary</font>

644
00:25:39,970 --> 00:25:43,690
<font color="#E5E5E5">times</font>

645
00:25:41,050 --> 00:25:46,510
however we<font color="#E5E5E5"> assume</font><font color="#CCCCCC"> that they do not have</font>

646
00:25:43,690 --> 00:25:48,580
an arbitrary right vulnerability<font color="#E5E5E5"> usually</font>

647
00:25:46,510 --> 00:25:49,990
<font color="#CCCCCC">a</font><font color="#E5E5E5"> use after free is something you use in</font>

648
00:25:48,580 --> 00:25:52,300
the form<font color="#E5E5E5"> of the first steps which</font>

649
00:25:49,990 --> 00:25:55,270
<font color="#CCCCCC">scishow do you in order to</font><font color="#E5E5E5"> build an</font>

650
00:25:52,300 --> 00:25:56,770
arbitrary<font color="#E5E5E5"> rate vulnerability however we</font>

651
00:25:55,270 --> 00:25:58,780
want<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> sure that our mitigation</font><font color="#E5E5E5"> is</font>

652
00:25:56,770 --> 00:26:01,420
<font color="#CCCCCC">secure</font><font color="#E5E5E5"> in the face</font><font color="#CCCCCC"> of an arbitrary</font><font color="#E5E5E5"> read</font>

653
00:25:58,780 --> 00:26:04,030
vulnerability<font color="#E5E5E5"> so if the attacker can</font>

654
00:26:01,420 --> 00:26:09,130
read the<font color="#E5E5E5"> data structures within</font><font color="#CCCCCC"> the</font>

655
00:26:04,030 --> 00:26:14,980
<font color="#E5E5E5">kernel</font><font color="#CCCCCC"> they can't our our</font><font color="#E5E5E5"> mitigation</font>

656
00:26:09,130 --> 00:26:18,700
will still be<font color="#E5E5E5"> secure now</font><font color="#CCCCCC"> I want to point</font>

657
00:26:14,980 --> 00:26:20,620
out<font color="#E5E5E5"> that not only we assume that we</font>

658
00:26:18,700 --> 00:26:23,320
don't have a right<font color="#CCCCCC"> that the attacker</font>

659
00:26:20,620 --> 00:26:25,419
doesn't<font color="#E5E5E5"> have a right what we're but also</font>

660
00:26:23,320 --> 00:26:27,790
we only protect a limited<font color="#E5E5E5"> number of</font>

661
00:26:25,420 --> 00:26:29,530
<font color="#E5E5E5">types we do this for some simple</font>

662
00:26:27,790 --> 00:26:31,510
<font color="#E5E5E5">software engineering reasons our</font>

663
00:26:29,530 --> 00:26:34,450
<font color="#CCCCCC">mitigation has</font><font color="#E5E5E5"> some memory overhead</font><font color="#CCCCCC"> and</font>

664
00:26:31,510 --> 00:26:36,250
<font color="#E5E5E5">we don't want to be able to make this</font>

665
00:26:34,450 --> 00:26:37,809
change throughout<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> Windows and</font>

666
00:26:36,250 --> 00:26:38,770
then find it doesn't work<font color="#E5E5E5"> for this one</font>

667
00:26:37,809 --> 00:26:41,700
<font color="#CCCCCC">type</font>

668
00:26:38,770 --> 00:26:44,050
so we're incrementally rolling this<font color="#E5E5E5"> out</font>

669
00:26:41,700 --> 00:26:46,870
fortunately with this historic<font color="#CCCCCC"> database</font>

670
00:26:44,050 --> 00:26:48,790
we know which which objects have been

671
00:26:46,870 --> 00:26:51,550
<font color="#CCCCCC">exploited the most and then we're able</font>

672
00:26:48,790 --> 00:26:54,010
<font color="#E5E5E5">to look for patterns</font><font color="#CCCCCC"> in similar objects</font>

673
00:26:51,550 --> 00:26:59,320
which will be which attackers could<font color="#E5E5E5"> turn</font>

674
00:26:54,010 --> 00:27:01,090
to<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the future it's also important to</font>

675
00:26:59,320 --> 00:27:04,149
note that this mitigation<font color="#E5E5E5"> does not</font>

676
00:27:01,090 --> 00:27:06,939
prevent<font color="#CCCCCC"> us-- after freeze since freeze</font>

677
00:27:04,150 --> 00:27:09,280
may happen<font color="#CCCCCC"> anytime after an object has</font>

678
00:27:06,940 --> 00:27:13,090
<font color="#CCCCCC">been created it's really hard to detect</font>

679
00:27:09,280 --> 00:27:14,230
<font color="#E5E5E5">them</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> fact to catch every use after</font>

680
00:27:13,090 --> 00:27:16,540
<font color="#CCCCCC">forever</font>

681
00:27:14,230 --> 00:27:19,090
you have to like check every pointer

682
00:27:16,540 --> 00:27:23,980
access which is<font color="#E5E5E5"> incredibly expensive</font><font color="#CCCCCC"> so</font>

683
00:27:19,090 --> 00:27:26,050
and we can't do<font color="#E5E5E5"> that in the kernel so</font>

684
00:27:23,980 --> 00:27:29,080
what we need to<font color="#CCCCCC"> do is deny the attacker</font>

685
00:27:26,050 --> 00:27:31,510
control of memory if the attacker can

686
00:27:29,080 --> 00:27:34,240
control the layout<font color="#CCCCCC"> of memory and corrupt</font>

687
00:27:31,510 --> 00:27:36,970
these fields which safe showed you then

688
00:27:34,240 --> 00:27:39,280
they can't control the kernel<font color="#E5E5E5"> so by</font>

689
00:27:36,970 --> 00:27:43,270
changing<font color="#E5E5E5"> the layout</font><font color="#CCCCCC"> of memory we can</font>

690
00:27:39,280 --> 00:27:46,418
make the the kernel harder to exploit if

691
00:27:43,270 --> 00:27:48,160
the attacker has a bug I'm going to talk

692
00:27:46,419 --> 00:27:51,100
<font color="#E5E5E5">about two different</font><font color="#CCCCCC"> ways</font>

693
00:27:48,160 --> 00:27:53,500
<font color="#CCCCCC">um similar to</font><font color="#E5E5E5"> what safe just showed you</font>

694
00:27:51,100 --> 00:27:57,399
two different<font color="#E5E5E5"> scenarios which we</font>

695
00:27:53,500 --> 00:28:02,170
specifically defend against today<font color="#CCCCCC"> the</font>

696
00:27:57,400 --> 00:28:05,530
first one<font color="#CCCCCC"> is we can't let</font><font color="#E5E5E5"> this happen</font>

697
00:28:02,170 --> 00:28:07,990
we cannot let<font color="#E5E5E5"> two objects of different</font>

698
00:28:05,530 --> 00:28:11,200
<font color="#CCCCCC">types</font><font color="#E5E5E5"> will end up overlapping each other</font>

699
00:28:07,990 --> 00:28:13,210
<font color="#E5E5E5">where some pointer overlaps with</font><font color="#CCCCCC"> the</font>

700
00:28:11,200 --> 00:28:15,850
size because<font color="#CCCCCC"> then they corrupt that</font>

701
00:28:13,210 --> 00:28:17,830
pointer<font color="#E5E5E5"> like say you showed you and they</font>

702
00:28:15,850 --> 00:28:25,149
use<font color="#CCCCCC"> it to manipulate some</font><font color="#E5E5E5"> other object</font>

703
00:28:17,830 --> 00:28:27,040
<font color="#E5E5E5">and that's game</font><font color="#CCCCCC"> over and the other</font>

704
00:28:25,150 --> 00:28:29,830
<font color="#CCCCCC">scenario zhui</font><font color="#E5E5E5"> needs to defend against is</font>

705
00:28:27,040 --> 00:28:32,139
if you have the same object overlapping

706
00:28:29,830 --> 00:28:34,389
with itself perhaps<font color="#CCCCCC"> we have something</font>

707
00:28:32,140 --> 00:28:37,120
<font color="#E5E5E5">like the</font><font color="#CCCCCC"> pallet object which safe showed</font>

708
00:28:34,390 --> 00:28:40,180
you again and<font color="#E5E5E5"> it's got this a pal color</font>

709
00:28:37,120 --> 00:28:42,100
table<font color="#E5E5E5"> data as well as this pointer and</font>

710
00:28:40,180 --> 00:28:43,990
if you<font color="#E5E5E5"> manage to get this user</font>

711
00:28:42,100 --> 00:28:46,179
controlled data overlapped with<font color="#CCCCCC"> the</font>

712
00:28:43,990 --> 00:28:48,370
pointer<font color="#E5E5E5"> and then you change the user</font>

713
00:28:46,180 --> 00:28:50,260
controlled color data to be a valid

714
00:28:48,370 --> 00:28:52,000
pointer to somewhere<font color="#E5E5E5"> else</font><font color="#CCCCCC"> you get all</font>

715
00:28:50,260 --> 00:28:54,670
<font color="#CCCCCC">sorts of problems so we need to make</font>

716
00:28:52,000 --> 00:28:57,490
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> that these</font><font color="#CCCCCC"> two objects don't</font>

717
00:28:54,670 --> 00:29:01,810
<font color="#E5E5E5">overlap each other at</font><font color="#CCCCCC"> different at</font>

718
00:28:57,490 --> 00:29:03,910
different offsets however this is kind

719
00:29:01,810 --> 00:29:05,770
<font color="#E5E5E5">of</font><font color="#CCCCCC"> difficult because the</font><font color="#E5E5E5"> palettes and</font>

720
00:29:03,910 --> 00:29:08,710
the surface objects which<font color="#E5E5E5"> say fair to</font>

721
00:29:05,770 --> 00:29:10,240
you are all in one<font color="#CCCCCC"> big application where</font>

722
00:29:08,710 --> 00:29:12,310
you<font color="#CCCCCC"> have this array at</font><font color="#E5E5E5"> the bottom of the</font>

723
00:29:10,240 --> 00:29:14,740
object<font color="#CCCCCC"> you've</font><font color="#E5E5E5"> got this</font><font color="#CCCCCC"> meted out at the</font>

724
00:29:12,310 --> 00:29:16,419
top and so if<font color="#E5E5E5"> all these objects are</font>

725
00:29:14,740 --> 00:29:19,180
different<font color="#CCCCCC"> sizes and</font><font color="#E5E5E5"> the attacker can</font>

726
00:29:16,420 --> 00:29:21,850
choose how big they want this to<font color="#E5E5E5"> be well</font>

727
00:29:19,180 --> 00:29:25,240
we makes it<font color="#CCCCCC"> very</font><font color="#E5E5E5"> hard</font><font color="#CCCCCC"> to make the second</font>

728
00:29:21,850 --> 00:29:27,639
case the<font color="#CCCCCC"> second thing</font><font color="#E5E5E5"> which we want to</font>

729
00:29:25,240 --> 00:29:31,780
<font color="#CCCCCC">insure happen</font><font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to make sure</font><font color="#E5E5E5"> that</font>

730
00:29:27,640 --> 00:29:34,990
the we want to make sure<font color="#E5E5E5"> that you can't</font>

731
00:29:31,780 --> 00:29:37,330
create a small one of these<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> put</font>

732
00:29:34,990 --> 00:29:40,330
it where a big one used<font color="#E5E5E5"> to be and then</font>

733
00:29:37,330 --> 00:29:43,090
trigger<font color="#E5E5E5"> a use after free condition so</font>

734
00:29:40,330 --> 00:29:45,699
what we do is we split<font color="#CCCCCC"> up the the</font>

735
00:29:43,090 --> 00:29:47,679
<font color="#CCCCCC">objects we have this isolated type in</font>

736
00:29:45,700 --> 00:29:50,500
this green here which is<font color="#CCCCCC"> just the</font>

737
00:29:47,680 --> 00:29:52,240
metadata<font color="#E5E5E5"> all the pointers all the flags</font>

738
00:29:50,500 --> 00:29:54,700
which<font color="#E5E5E5"> are in the C palette entry and</font>

739
00:29:52,240 --> 00:29:56,770
then this<font color="#CCCCCC"> user controlled color table</font><font color="#E5E5E5"> we</font>

740
00:29:54,700 --> 00:29:58,720
<font color="#E5E5E5">split up into another allocation which</font>

741
00:29:56,770 --> 00:30:00,310
lives on<font color="#E5E5E5"> the general heap so we've got</font>

742
00:29:58,720 --> 00:30:01,460
the green stuff which is<font color="#CCCCCC"> the isolated</font>

743
00:30:00,310 --> 00:30:04,730
<font color="#E5E5E5">heap and the</font>

744
00:30:01,460 --> 00:30:09,770
blue stuff which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the which is</font><font color="#CCCCCC"> the</font>

745
00:30:04,730 --> 00:30:11,750
general<font color="#CCCCCC"> heat thank you and so then I</font>

746
00:30:09,770 --> 00:30:13,730
want to show you a little<font color="#CCCCCC"> bit about this</font>

747
00:30:11,750 --> 00:30:15,350
data structure how this new<font color="#E5E5E5"> allocator</font>

748
00:30:13,730 --> 00:30:18,620
which we designed in order<font color="#E5E5E5"> if you</font>

749
00:30:15,350 --> 00:30:21,320
<font color="#CCCCCC">isolate these objects really works</font><font color="#E5E5E5"> so</font>

750
00:30:18,620 --> 00:30:23,918
it's a very simple classic<font color="#E5E5E5"> design we</font>

751
00:30:21,320 --> 00:30:28,850
split up<font color="#CCCCCC"> the</font><font color="#E5E5E5"> heat these isolated heap</font>

752
00:30:23,919 --> 00:30:31,309
<font color="#CCCCCC">into a series of slots</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> pallets</font><font color="#E5E5E5"> can</font>

753
00:30:28,850 --> 00:30:34,279
<font color="#E5E5E5">live in this heap and then we create a</font>

754
00:30:31,309 --> 00:30:40,610
another distinct heap<font color="#CCCCCC"> for say</font>

755
00:30:34,279 --> 00:30:42,380
surface objects<font color="#E5E5E5"> and other other types</font><font color="#CCCCCC"> so</font>

756
00:30:40,610 --> 00:30:44,719
then when<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to allocate one of</font>

757
00:30:42,380 --> 00:30:47,090
these we go<font color="#E5E5E5"> and we find</font><font color="#CCCCCC"> the first clear</font>

758
00:30:44,720 --> 00:30:48,700
<font color="#CCCCCC">bin and find the corresponding</font><font color="#E5E5E5"> empty</font>

759
00:30:47,090 --> 00:30:52,309
slot<font color="#CCCCCC"> or turn the pointer to</font><font color="#E5E5E5"> the user</font>

760
00:30:48,700 --> 00:30:55,250
it's important to note that when we free

761
00:30:52,309 --> 00:30:58,700
an object<font color="#E5E5E5"> all of these empty slots are</font>

762
00:30:55,250 --> 00:31:02,419
zeros<font color="#E5E5E5"> so you don't have any old dangling</font>

763
00:30:58,700 --> 00:31:04,250
pointers<font color="#E5E5E5"> left behind thank you so I'm</font>

764
00:31:02,419 --> 00:31:07,820
gonna discuss to use after free

765
00:31:04,250 --> 00:31:11,929
scenarios<font color="#CCCCCC"> and then show</font><font color="#E5E5E5"> you what happens</font>

766
00:31:07,820 --> 00:31:14,330
<font color="#E5E5E5">when an attacker tries to to cause this</font>

767
00:31:11,929 --> 00:31:17,390
use after free on the isolated<font color="#E5E5E5"> heap and</font>

768
00:31:14,330 --> 00:31:20,059
how we managed to<font color="#E5E5E5"> stop the</font><font color="#CCCCCC"> attack from</font>

769
00:31:17,390 --> 00:31:21,110
proceeding<font color="#E5E5E5"> so we've got some other</font>

770
00:31:20,059 --> 00:31:22,639
object over there

771
00:31:21,110 --> 00:31:24,979
it might live on<font color="#E5E5E5"> the general-purpose</font>

772
00:31:22,640 --> 00:31:29,059
<font color="#CCCCCC">heap and then it</font><font color="#E5E5E5"> points to the</font><font color="#CCCCCC"> pallet</font>

773
00:31:24,980 --> 00:31:33,049
<font color="#E5E5E5">and what we're gonna do is we're going</font>

774
00:31:29,059 --> 00:31:35,029
to we're going<font color="#CCCCCC"> to free that pallet which</font>

775
00:31:33,049 --> 00:31:37,668
is pointed to<font color="#CCCCCC"> by</font><font color="#E5E5E5"> the other object and</font>

776
00:31:35,029 --> 00:31:40,460
<font color="#CCCCCC">we're gonna</font><font color="#E5E5E5"> forget to update the other</font>

777
00:31:37,669 --> 00:31:43,940
object<font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> some complicated</font>

778
00:31:40,460 --> 00:31:46,179
<font color="#E5E5E5">mistake maybe a programmer or factor the</font>

779
00:31:43,940 --> 00:31:50,149
code and forgot about<font color="#E5E5E5"> some condition</font>

780
00:31:46,179 --> 00:31:52,580
some edge case now we've got this

781
00:31:50,149 --> 00:31:56,418
dangling pointer pointing at an<font color="#E5E5E5"> empty</font>

782
00:31:52,580 --> 00:31:59,059
slot<font color="#E5E5E5"> fortunately like I said all when an</font>

783
00:31:56,419 --> 00:32:02,270
object is free the empty slides are

784
00:31:59,059 --> 00:32:04,100
placed with zeros so now if there was a

785
00:32:02,270 --> 00:32:06,379
pointer there<font color="#CCCCCC"> when you try and</font><font color="#E5E5E5"> do you</font>

786
00:32:04,100 --> 00:32:08,510
reference it<font color="#CCCCCC"> via that object you're</font>

787
00:32:06,380 --> 00:32:12,399
<font color="#CCCCCC">gonna get a null pointer exception and</font>

788
00:32:08,510 --> 00:32:12,399
crash the kernel<font color="#E5E5E5"> blue screen of death</font>

789
00:32:13,639 --> 00:32:21,168
and then<font color="#E5E5E5"> if you try and any of the flags</font>

790
00:32:17,869 --> 00:32:23,269
<font color="#E5E5E5">other metadata has also been reset to</font>

791
00:32:21,169 --> 00:32:25,339
<font color="#E5E5E5">zero which depending on</font><font color="#CCCCCC"> the design of</font>

792
00:32:23,269 --> 00:32:28,429
<font color="#E5E5E5">the object is hopefully a</font><font color="#CCCCCC"> very safe</font>

793
00:32:25,339 --> 00:32:30,950
<font color="#CCCCCC">state now I want to</font><font color="#E5E5E5"> discuss</font><font color="#CCCCCC"> another</font>

794
00:32:28,429 --> 00:32:33,200
variation on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same on the</font><font color="#E5E5E5"> same theme</font>

795
00:32:30,950 --> 00:32:34,129
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of the replacement case and then</font>

796
00:32:33,200 --> 00:32:37,249
I'll show<font color="#E5E5E5"> you how</font>

797
00:32:34,129 --> 00:32:39,408
you know how the replacement case is

798
00:32:37,249 --> 00:32:40,999
stopped by this mitigation as well<font color="#E5E5E5"> so</font>

799
00:32:39,409 --> 00:32:43,219
once<font color="#CCCCCC"> again we</font><font color="#E5E5E5"> have the same initial</font>

800
00:32:40,999 --> 00:32:45,739
<font color="#CCCCCC">State</font><font color="#E5E5E5"> or we've</font><font color="#CCCCCC"> got these pallets we have</font>

801
00:32:43,219 --> 00:32:50,139
the other object<font color="#E5E5E5"> and we points to the</font>

802
00:32:45,739 --> 00:32:52,669
pallet and then when you free the pallet

803
00:32:50,139 --> 00:32:56,320
<font color="#CCCCCC">we zero the memory but then we replace</font>

804
00:32:52,669 --> 00:32:59,389
<font color="#CCCCCC">it with a different palette this time</font>

805
00:32:56,320 --> 00:33:01,189
<font color="#CCCCCC">now it's</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> hard to</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> ahead and get</font>

806
00:32:59,389 --> 00:33:03,168
<font color="#E5E5E5">that sort of memory corruption scenario</font>

807
00:33:01,190 --> 00:33:06,109
<font color="#E5E5E5">which life was talking about to happen</font>

808
00:33:03,169 --> 00:33:09,109
<font color="#E5E5E5">because this is a perfectly normal valid</font>

809
00:33:06,109 --> 00:33:11,178
<font color="#E5E5E5">politic and if all of the pallet code is</font>

810
00:33:09,109 --> 00:33:13,339
correct<font color="#CCCCCC"> and there aren't any weird</font>

811
00:33:11,179 --> 00:33:15,709
memory<font color="#E5E5E5"> corruption bugs</font><font color="#CCCCCC"> which is another</font>

812
00:33:13,339 --> 00:33:18,619
<font color="#E5E5E5">class of bugs in itself and we only</font>

813
00:33:15,709 --> 00:33:21,019
defend against<font color="#E5E5E5"> us after freeze here the</font>

814
00:33:18,619 --> 00:33:22,728
<font color="#CCCCCC">PAL will be pointing to a different the</font>

815
00:33:21,019 --> 00:33:24,019
other object will be pointing to a

816
00:33:22,729 --> 00:33:27,349
different palette than it originally

817
00:33:24,019 --> 00:33:29,479
<font color="#E5E5E5">intended however it's a it's just a</font>

818
00:33:27,349 --> 00:33:31,820
<font color="#E5E5E5">completely valid normal</font><font color="#CCCCCC"> palette</font><font color="#E5E5E5"> so</font>

819
00:33:29,479 --> 00:33:33,379
things might<font color="#E5E5E5"> get a little weird on the</font>

820
00:33:31,820 --> 00:33:37,369
screen and<font color="#E5E5E5"> maybe things</font><font color="#CCCCCC"> will jump around</font>

821
00:33:33,379 --> 00:33:40,519
but it'll be and it's<font color="#E5E5E5"> definitely a bug</font>

822
00:33:37,369 --> 00:33:42,289
<font color="#E5E5E5">but it's it'll be safe it'll be safe and</font>

823
00:33:40,519 --> 00:33:47,149
<font color="#E5E5E5">the attacker can't use this to escalate</font>

824
00:33:42,289 --> 00:33:48,589
privileges now<font color="#E5E5E5"> this is actually</font><font color="#CCCCCC"> not a</font>

825
00:33:47,149 --> 00:33:51,649
new<font color="#CCCCCC"> idea</font>

826
00:33:48,589 --> 00:33:56,349
<font color="#E5E5E5">Adobe Flash introduced heap partitioning</font>

827
00:33:51,649 --> 00:33:59,928
<font color="#E5E5E5">in a cooperation with Google</font><font color="#CCCCCC"> in 2015 and</font>

828
00:33:56,349 --> 00:34:02,389
Internet Explorer had<font color="#CCCCCC"> isoh heap prior to</font>

829
00:33:59,929 --> 00:34:04,249
adding a<font color="#CCCCCC"> native</font><font color="#E5E5E5"> garbage collector which</font>

830
00:34:02,389 --> 00:34:07,968
nearly stopped<font color="#E5E5E5"> all</font><font color="#CCCCCC"> youssef trophies for</font>

831
00:34:04,249 --> 00:34:11,210
them for<font color="#E5E5E5"> quite a while shortly after we</font>

832
00:34:07,969 --> 00:34:14,299
introduced this type<font color="#E5E5E5"> isolation</font>

833
00:34:11,210 --> 00:34:14,720
mitigation<font color="#E5E5E5"> WebKit did a very similar</font>

834
00:34:14,299 --> 00:34:18,219
thing

835
00:34:14,719 --> 00:34:20,629
so his proves that it's a time-honored

836
00:34:18,219 --> 00:34:22,578
<font color="#E5E5E5">hardened mitigation it's a great</font>

837
00:34:20,629 --> 00:34:26,690
strategy<font color="#CCCCCC"> which is being used</font><font color="#E5E5E5"> throughout</font>

838
00:34:22,579 --> 00:34:27,710
the industry<font color="#CCCCCC"> today</font><font color="#E5E5E5"> and our work has</font><font color="#CCCCCC"> been</font>

839
00:34:26,690 --> 00:34:31,119
tested in<font color="#CCCCCC"> valley</font>

840
00:34:27,710 --> 00:34:34,699
<font color="#E5E5E5">by both internal pin test teams and</font>

841
00:34:31,119 --> 00:34:36,080
external<font color="#E5E5E5"> reverse engineering</font><font color="#CCCCCC"> notably</font>

842
00:34:34,699 --> 00:34:38,689
Francisco<font color="#E5E5E5"> Franck</font>

843
00:34:36,080 --> 00:34:40,790
<font color="#CCCCCC">a</font><font color="#E5E5E5"> falcon</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> quarks lab said this</font>

844
00:34:38,690 --> 00:34:43,129
definitely eliminates the commodity

845
00:34:40,790 --> 00:34:45,050
exploitation technique of<font color="#E5E5E5"> using bitmaps</font>

846
00:34:43,129 --> 00:34:47,029
is targeted for<font color="#CCCCCC"> eliminating memory</font>

847
00:34:45,050 --> 00:34:49,250
corruptions<font color="#E5E5E5"> and vulnerabilities this</font>

848
00:34:47,030 --> 00:34:50,960
eliminates<font color="#CCCCCC"> that memory corruption</font>

849
00:34:49,250 --> 00:34:53,389
<font color="#CCCCCC">followed mobility using the surface</font>

850
00:34:50,960 --> 00:34:58,130
<font color="#CCCCCC">object for using those bitmaps</font><font color="#E5E5E5"> which</font>

851
00:34:53,389 --> 00:35:01,640
<font color="#CCCCCC">safe showed you today</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> when safe</font>

852
00:34:58,130 --> 00:35:04,130
<font color="#E5E5E5">sorry when Francisco</font><font color="#CCCCCC"> wrote this</font><font color="#E5E5E5"> blog</font>

853
00:35:01,640 --> 00:35:10,609
post<font color="#CCCCCC"> about</font><font color="#E5E5E5"> reverse engineering the</font>

854
00:35:04,130 --> 00:35:12,260
mitigation I worked on<font color="#E5E5E5"> he he said the</font>

855
00:35:10,609 --> 00:35:14,000
next<font color="#E5E5E5"> thing attackers are gonna do is</font>

856
00:35:12,260 --> 00:35:17,119
they're gonna<font color="#E5E5E5"> pivot to</font><font color="#CCCCCC"> the pallet type</font>

857
00:35:14,000 --> 00:35:20,119
and they're gonna use<font color="#CCCCCC"> safe technique he</font>

858
00:35:17,119 --> 00:35:23,810
<font color="#E5E5E5">presented at Def</font><font color="#CCCCCC"> Con and</font><font color="#E5E5E5"> they're gonna</font>

859
00:35:20,119 --> 00:35:25,490
run wild from there but<font color="#E5E5E5"> by the time by</font>

860
00:35:23,810 --> 00:35:27,950
the time<font color="#E5E5E5"> Francisco wrote his blog post</font>

861
00:35:25,490 --> 00:35:31,399
we already shipped this<font color="#CCCCCC"> same mitigation</font>

862
00:35:27,950 --> 00:35:34,879
applied to the pallet type in insider

863
00:35:31,400 --> 00:35:37,190
builds in<font color="#E5E5E5"> flighting builds of Windows so</font>

864
00:35:34,880 --> 00:35:38,800
if you want to<font color="#E5E5E5"> see what you know what</font>

865
00:35:37,190 --> 00:35:40,880
we're doing the latest versions of

866
00:35:38,800 --> 00:35:42,109
<font color="#CCCCCC">Windows you can go ahead</font><font color="#E5E5E5"> and do</font><font color="#CCCCCC"> that and</font>

867
00:35:40,880 --> 00:35:44,839
run<font color="#CCCCCC"> that on your own computer</font><font color="#E5E5E5"> and do</font>

868
00:35:42,109 --> 00:35:46,060
reverse<font color="#CCCCCC"> engineering to figure out what</font>

869
00:35:44,839 --> 00:35:52,160
we're<font color="#CCCCCC"> doing right now</font>

870
00:35:46,060 --> 00:35:54,820
so I want<font color="#E5E5E5"> to thank you guys and ask if</font>

871
00:35:52,160 --> 00:35:54,819
you have any<font color="#E5E5E5"> questions</font>

872
00:36:08,230 --> 00:36:13,760
<font color="#E5E5E5">I'm sorry thank you it's been</font><font color="#CCCCCC"> rolled out</font>

873
00:36:11,210 --> 00:36:15,440
<font color="#E5E5E5">as part of</font><font color="#CCCCCC"> Wynton we haven't back ported</font>

874
00:36:13,760 --> 00:36:19,720
it to<font color="#E5E5E5"> two older versions of Windows</font>

875
00:36:15,440 --> 00:36:22,610
that's a quite a we do that sometimes

876
00:36:19,720 --> 00:36:26,450
<font color="#CCCCCC">but not not for</font><font color="#E5E5E5"> like the latest</font><font color="#CCCCCC"> moon</font>

877
00:36:22,610 --> 00:36:27,950
<font color="#CCCCCC">decoration stuff and it's turned on by</font>

878
00:36:26,450 --> 00:36:33,819
default<font color="#E5E5E5"> you don't need to set it with</font>

879
00:36:27,950 --> 00:36:33,819
<font color="#CCCCCC">the</font><font color="#E5E5E5"> advanced threat protection stuff</font>

880
00:36:39,340 --> 00:36:57,770
yeah yeah yeah at this time I don't<font color="#CCCCCC"> know</font>

881
00:36:55,850 --> 00:36:59,360
of any plans<font color="#E5E5E5"> to back port this work I</font>

882
00:36:57,770 --> 00:37:02,480
<font color="#E5E5E5">don't think it would be the hardest</font>

883
00:36:59,360 --> 00:37:04,460
<font color="#E5E5E5">thing in the</font><font color="#CCCCCC"> world to back port I know I</font>

884
00:37:02,480 --> 00:37:07,510
would get my teeth and do it if I<font color="#E5E5E5"> was</font>

885
00:37:04,460 --> 00:37:11,120
asked<font color="#CCCCCC"> it's not fun backporting things</font>

886
00:37:07,510 --> 00:37:12,860
<font color="#CCCCCC">and really the the company is very</font>

887
00:37:11,120 --> 00:37:14,810
concerned about breaking backwards

888
00:37:12,860 --> 00:37:16,550
compatibility<font color="#E5E5E5"> it was actually a</font>

889
00:37:14,810 --> 00:37:20,620
performance regression with this<font color="#E5E5E5"> this</font>

890
00:37:16,550 --> 00:37:24,320
code which I then had to<font color="#E5E5E5"> go and fix so</font>

891
00:37:20,620 --> 00:37:27,080
so the I don't know that it's going<font color="#E5E5E5"> to</font>

892
00:37:24,320 --> 00:37:29,960
<font color="#CCCCCC">happen but it could I think</font><font color="#E5E5E5"> really</font>

893
00:37:27,080 --> 00:37:33,890
Microsoft wants to push<font color="#CCCCCC"> Winton as the</font>

894
00:37:29,960 --> 00:37:35,690
future as the more secure<font color="#CCCCCC"> alternative to</font>

895
00:37:33,890 --> 00:37:36,460
Windows 7<font color="#E5E5E5"> I hope that answers your</font>

896
00:37:35,690 --> 00:37:40,150
question

897
00:37:36,460 --> 00:37:40,150
does anyone else<font color="#E5E5E5"> yeah</font>

898
00:37:56,170 --> 00:38:01,040
so you need to do something<font color="#E5E5E5"> called</font>

899
00:37:58,369 --> 00:38:02,349
<font color="#CCCCCC">Colonel pool</font><font color="#E5E5E5"> spraying which if you do a</font>

900
00:38:01,040 --> 00:38:04,759
lot<font color="#CCCCCC"> of allocations and deallocations</font>

901
00:38:02,349 --> 00:38:07,069
you'll be able<font color="#E5E5E5"> to get the</font><font color="#CCCCCC"> colonel</font><font color="#E5E5E5"> memory</font>

902
00:38:04,760 --> 00:38:08,960
in the deterministic<font color="#CCCCCC"> state now there is</font>

903
00:38:07,069 --> 00:38:12,730
actually<font color="#CCCCCC"> a plan into getting some</font>

904
00:38:08,960 --> 00:38:12,730
mitigation<font color="#CCCCCC"> into actually making</font>

905
00:38:18,160 --> 00:38:20,220
you

