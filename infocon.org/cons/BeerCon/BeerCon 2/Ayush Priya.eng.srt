1
00:00:04,880 --> 00:00:05,920
okay we're back

2
00:00:05,920 --> 00:00:07,919
uh we're back with ayush who's going to

3
00:00:07,919 --> 00:00:10,080
talk about finding little secrets in

4
00:00:10,080 --> 00:00:10,719
code

5
00:00:10,719 --> 00:00:14,080
um with you ayush thank you

6
00:00:14,080 --> 00:00:16,079
hey guys uh so i'll be speaking about

7
00:00:16,079 --> 00:00:17,680
hunting secrets in code

8
00:00:17,680 --> 00:00:20,320
uh i am ayush i am a deficit ops

9
00:00:20,320 --> 00:00:22,480
engineer at a company called lapseco

10
00:00:22,480 --> 00:00:24,560
and i'm also the coordinator for windjas

11
00:00:24,560 --> 00:00:26,080
etf

12
00:00:26,080 --> 00:00:28,400
so before we begin there's some jargon

13
00:00:28,400 --> 00:00:30,000
that i'd probably use during the talk

14
00:00:30,000 --> 00:00:32,558
so just to get give you guys context see

15
00:00:32,558 --> 00:00:33,680
when i say

16
00:00:33,680 --> 00:00:35,760
secret secret is essentially a sensitive

17
00:00:35,760 --> 00:00:37,680
piece of information such as credentials

18
00:00:37,680 --> 00:00:38,879
uh api tokens

19
00:00:38,879 --> 00:00:41,120
something like that secrets management

20
00:00:41,120 --> 00:00:42,879
is the process of storing and using

21
00:00:42,879 --> 00:00:44,320
those secrets in your application code

22
00:00:44,320 --> 00:00:45,280
and like other places

23
00:00:45,280 --> 00:00:47,760
wherever like such as automation when i

24
00:00:47,760 --> 00:00:49,600
say scan specifically for this talk i

25
00:00:49,600 --> 00:00:51,520
mean like scans to identify secrets

26
00:00:51,520 --> 00:00:54,160
in code compute is any service that you

27
00:00:54,160 --> 00:00:55,680
can like run code on

28
00:00:55,680 --> 00:00:57,199
essentially and infrastructure is just a

29
00:00:57,199 --> 00:00:59,440
system of uh services tools whatever to

30
00:00:59,440 --> 00:01:01,280
achieve a certain goal let's say deploy

31
00:01:01,280 --> 00:01:02,079
an application

32
00:01:02,079 --> 00:01:05,360
scan for stuff build your dependencies

33
00:01:05,360 --> 00:01:08,960
things like that yeah so challenges in

34
00:01:08,960 --> 00:01:10,479
secret management

35
00:01:10,479 --> 00:01:12,240
how do secrets get leaked in the first

36
00:01:12,240 --> 00:01:13,520
place so uh like

37
00:01:13,520 --> 00:01:15,040
the way that we are progressing right

38
00:01:15,040 --> 00:01:17,040
now people people want to do uh

39
00:01:17,040 --> 00:01:18,400
automation right for everything that

40
00:01:18,400 --> 00:01:20,320
they can like get their hands on

41
00:01:20,320 --> 00:01:22,960
uh essentially to like say let's say

42
00:01:22,960 --> 00:01:24,720
improved uh speed of delivery and other

43
00:01:24,720 --> 00:01:25,040
stuff

44
00:01:25,040 --> 00:01:27,040
but to do that we have to enable our

45
00:01:27,040 --> 00:01:28,640
code to perform actions on our behalf

46
00:01:28,640 --> 00:01:30,799
and because of that particular reason

47
00:01:30,799 --> 00:01:32,880
we add secrets to our code let's say you

48
00:01:32,880 --> 00:01:34,560
want your code to access your database

49
00:01:34,560 --> 00:01:35,680
you need to give it the database

50
00:01:35,680 --> 00:01:37,119
credentials right

51
00:01:37,119 --> 00:01:39,200
that's so that's perfectly fine giving

52
00:01:39,200 --> 00:01:40,479
your code credentials that's not the

53
00:01:40,479 --> 00:01:42,079
issue the issue arises when you start

54
00:01:42,079 --> 00:01:42,960
committing those

55
00:01:42,960 --> 00:01:44,799
uh secrets to your code essentially with

56
00:01:44,799 --> 00:01:46,640
like a version control software such as

57
00:01:46,640 --> 00:01:47,360
git

58
00:01:47,360 --> 00:01:50,240
and gate never forgets because uh it it

59
00:01:50,240 --> 00:01:51,040
it

60
00:01:51,040 --> 00:01:52,880
creates a history of like all the

61
00:01:52,880 --> 00:01:54,640
changes that have ever been made to a

62
00:01:54,640 --> 00:01:57,680
uh source control repository right and

63
00:01:57,680 --> 00:01:59,360
because of that even if you in future

64
00:01:59,360 --> 00:02:00,640
commits you let's say remove your

65
00:02:00,640 --> 00:02:01,600
credentials and

66
00:02:01,600 --> 00:02:03,439
like whatnot i can always like if i have

67
00:02:03,439 --> 00:02:04,960
access to a source code obviously

68
00:02:04,960 --> 00:02:06,320
i could go back to that particular

69
00:02:06,320 --> 00:02:07,439
commit and scan through all those

70
00:02:07,439 --> 00:02:08,720
changes that you've made and still

71
00:02:08,720 --> 00:02:10,399
figure out what those secrets were

72
00:02:10,399 --> 00:02:12,080
and if you have not rotated them then

73
00:02:12,080 --> 00:02:14,239
you're in a world of trouble

74
00:02:14,239 --> 00:02:17,840
so why scan for secrets i mean uh

75
00:02:17,840 --> 00:02:20,319
the best part being that it's it's not

76
00:02:20,319 --> 00:02:21,040
something that

77
00:02:21,040 --> 00:02:23,120
people are not aware of like we all all

78
00:02:23,120 --> 00:02:25,200
know that credentials get leaked

79
00:02:25,200 --> 00:02:27,360
every now and then and scanning for them

80
00:02:27,360 --> 00:02:29,599
is extremely important because

81
00:02:29,599 --> 00:02:31,680
i mean hoping that they never get leaked

82
00:02:31,680 --> 00:02:32,640
this

83
00:02:32,640 --> 00:02:34,879
is pretty much wishful thinking at this

84
00:02:34,879 --> 00:02:37,280
point so uh this is a code that google

85
00:02:37,280 --> 00:02:38,480
sremoto

86
00:02:38,480 --> 00:02:40,640
which is like used by google sre folks

87
00:02:40,640 --> 00:02:42,720
uh i mean this is for them to like

88
00:02:42,720 --> 00:02:44,000
maintain up time and other things but

89
00:02:44,000 --> 00:02:45,760
like i think this applies for a whole

90
00:02:45,760 --> 00:02:47,200
bunch of other things as well such as

91
00:02:47,200 --> 00:02:49,200
like scanning for secrets

92
00:02:49,200 --> 00:02:51,599
and why would you also scan for secrets

93
00:02:51,599 --> 00:02:53,040
because they provide you the backbone of

94
00:02:53,040 --> 00:02:54,879
authentication and authorization so they

95
00:02:54,879 --> 00:02:56,400
they allow you to like impersonate

96
00:02:56,400 --> 00:02:58,640
someone so the point is that credentials

97
00:02:58,640 --> 00:02:59,440
that get leaked

98
00:02:59,440 --> 00:03:01,360
are meant to be legitimate right they

99
00:03:01,360 --> 00:03:02,640
are not fake credentials that were

100
00:03:02,640 --> 00:03:04,080
generated by a

101
00:03:04,080 --> 00:03:06,640
malicious actor they were meant to be

102
00:03:06,640 --> 00:03:07,280
used

103
00:03:07,280 --> 00:03:09,120
in the right way by a developer or

104
00:03:09,120 --> 00:03:10,560
someone else but the

105
00:03:10,560 --> 00:03:12,560
moment that they get leaked i can use

106
00:03:12,560 --> 00:03:14,400
those credentials as a malicious

107
00:03:14,400 --> 00:03:16,560
actor and then i can like impersonate

108
00:03:16,560 --> 00:03:18,560
that person essentially and then uh

109
00:03:18,560 --> 00:03:20,879
it also allows me to uh access certain

110
00:03:20,879 --> 00:03:22,640
actions and operations right

111
00:03:22,640 --> 00:03:24,640
so it also reduces attribution

112
00:03:24,640 --> 00:03:26,319
attribution is itself like already a

113
00:03:26,319 --> 00:03:27,680
difficult problem in

114
00:03:27,680 --> 00:03:30,720
infosec but like the fact that leaked

115
00:03:30,720 --> 00:03:32,879
credentials uh create this ambiguity

116
00:03:32,879 --> 00:03:33,599
between if

117
00:03:33,599 --> 00:03:35,840
it was the person who was intended to

118
00:03:35,840 --> 00:03:37,200
hold the credentials

119
00:03:37,200 --> 00:03:39,760
and the person who might have gotten

120
00:03:39,760 --> 00:03:41,200
access to these credentials to

121
00:03:41,200 --> 00:03:42,640
some or the other accident or something

122
00:03:42,640 --> 00:03:44,319
like that which creates this ambiguity

123
00:03:44,319 --> 00:03:45,360
and essentially

124
00:03:45,360 --> 00:03:49,040
in essence issues for incident response

125
00:03:49,040 --> 00:03:51,519
so what can happen if the secrets are

126
00:03:51,519 --> 00:03:52,159
leaked

127
00:03:52,159 --> 00:03:54,560
the most obvious common thing is account

128
00:03:54,560 --> 00:03:56,000
takeovers let's say i

129
00:03:56,000 --> 00:03:58,799
get hold of someone's twitter api token

130
00:03:58,799 --> 00:04:00,000
i would try to post

131
00:04:00,000 --> 00:04:02,400
let's say on his or her behalf if

132
00:04:02,400 --> 00:04:04,159
someone's ssh credentials get leaked

133
00:04:04,159 --> 00:04:05,040
let's

134
00:04:05,040 --> 00:04:07,680
through part of this uh their deployment

135
00:04:07,680 --> 00:04:09,040
uh setup let's say

136
00:04:09,040 --> 00:04:10,720
so i can put in crypto mining tools and

137
00:04:10,720 --> 00:04:12,080
some something like that that can

138
00:04:12,080 --> 00:04:14,239
like mine currency for me while you put

139
00:04:14,239 --> 00:04:15,760
the bill for it and there's obviously

140
00:04:15,760 --> 00:04:17,519
other kinds of monetary damage if aws

141
00:04:17,519 --> 00:04:18,880
credences get leaked i can

142
00:04:18,880 --> 00:04:21,358
launch expensive resources uh make you

143
00:04:21,358 --> 00:04:23,759
pay the bill and everything like that

144
00:04:23,759 --> 00:04:26,880
so available tools so you

145
00:04:26,880 --> 00:04:28,479
obviously don't need to write a scanner

146
00:04:28,479 --> 00:04:30,240
for yourself because this is a solved

147
00:04:30,240 --> 00:04:31,919
problem this is not something new people

148
00:04:31,919 --> 00:04:32,479
have

149
00:04:32,479 --> 00:04:34,880
solved this issue through two mechanisms

150
00:04:34,880 --> 00:04:35,520
essentially

151
00:04:35,520 --> 00:04:38,160
one is uh like an entropy scan and the

152
00:04:38,160 --> 00:04:40,479
other being a regex based signature scan

153
00:04:40,479 --> 00:04:42,320
so entropy is essentially a measure of

154
00:04:42,320 --> 00:04:44,080
how random a certain string is

155
00:04:44,080 --> 00:04:46,240
uh let's say your password like a

156
00:04:46,240 --> 00:04:48,400
typical good api token or a password or

157
00:04:48,400 --> 00:04:49,840
something like that should be extremely

158
00:04:49,840 --> 00:04:51,680
random and based on a threshold

159
00:04:51,680 --> 00:04:54,080
you can tell these tools that hey you

160
00:04:54,080 --> 00:04:56,400
know what if this secret is random

161
00:04:56,400 --> 00:04:57,520
enough

162
00:04:57,520 --> 00:04:59,600
sorry this string is random enough let's

163
00:04:59,600 --> 00:05:00,880
call it a secret and then it can

164
00:05:00,880 --> 00:05:02,240
identify those things based on those

165
00:05:02,240 --> 00:05:03,600
thresholds

166
00:05:03,600 --> 00:05:06,000
the other thing is where you can define

167
00:05:06,000 --> 00:05:08,080
patterns so a lot of secrets have

168
00:05:08,080 --> 00:05:10,720
a specific pattern let's say aws

169
00:05:10,720 --> 00:05:12,400
credentials uh like that you use for

170
00:05:12,400 --> 00:05:13,520
your cli stuff

171
00:05:13,520 --> 00:05:16,000
is always start with the four characters

172
00:05:16,000 --> 00:05:18,080
aki and then they're followed by a 16

173
00:05:18,080 --> 00:05:20,240
uh character alpha numeric so you can

174
00:05:20,240 --> 00:05:21,840
create a pattern for that same goes for

175
00:05:21,840 --> 00:05:22,800
like your

176
00:05:22,800 --> 00:05:25,039
google auth tokens which start with a

177
00:05:25,039 --> 00:05:27,199
aiza and slack tokens and a whole bunch

178
00:05:27,199 --> 00:05:28,320
of other things

179
00:05:28,320 --> 00:05:30,479
so you can create such patterns and then

180
00:05:30,479 --> 00:05:32,560
based on these regex patterns regular

181
00:05:32,560 --> 00:05:34,400
expression patterns you can like uncover

182
00:05:34,400 --> 00:05:36,080
secrets hidden in code

183
00:05:36,080 --> 00:05:37,759
and all of these tools do a really good

184
00:05:37,759 --> 00:05:39,120
job of scanning through the history as

185
00:05:39,120 --> 00:05:40,400
well so you can sell it

186
00:05:40,400 --> 00:05:42,000
ask them not to do that but like the

187
00:05:42,000 --> 00:05:43,520
best part about them is that they scan

188
00:05:43,520 --> 00:05:45,039
through the entire history

189
00:05:45,039 --> 00:05:47,360
so that even if there were secrets at

190
00:05:47,360 --> 00:05:48,639
some point in the code

191
00:05:48,639 --> 00:05:50,800
and not currently it will still find you

192
00:05:50,800 --> 00:05:53,039
them i personally have tried these out

193
00:05:53,039 --> 00:05:54,479
but there are obviously many more

194
00:05:54,479 --> 00:05:56,880
i prefer get secrets and truffle hog

195
00:05:56,880 --> 00:05:58,240
secrets because it's a

196
00:05:58,240 --> 00:06:00,639
really extremely fast and it uh

197
00:06:00,639 --> 00:06:03,120
integrates with the existing git command

198
00:06:03,120 --> 00:06:04,560
as well so once you've installed it it

199
00:06:04,560 --> 00:06:06,240
becomes git secrets and then all the sub

200
00:06:06,240 --> 00:06:08,319
commands like scanning and other things

201
00:06:08,319 --> 00:06:10,000
and truffle hog because it's extremely

202
00:06:10,000 --> 00:06:11,600
easy to install use

203
00:06:11,600 --> 00:06:14,319
as well as it has the uh like about 40

204
00:06:14,319 --> 00:06:16,080
signatures already present in it

205
00:06:16,080 --> 00:06:17,520
so you don't need to go craft your own

206
00:06:17,520 --> 00:06:21,759
signatures to like scan scan for secrets

207
00:06:21,759 --> 00:06:24,479
coming to proactive action so i mean we

208
00:06:24,479 --> 00:06:25,919
know that we can scan for secrets we

209
00:06:25,919 --> 00:06:27,919
know that code will have secrets uh

210
00:06:27,919 --> 00:06:30,080
the point is where do you scan for them

211
00:06:30,080 --> 00:06:30,960
right

212
00:06:30,960 --> 00:06:33,039
so do you need to run a scan every time

213
00:06:33,039 --> 00:06:34,080
you push your code

214
00:06:34,080 --> 00:06:35,840
before you push your code to like github

215
00:06:35,840 --> 00:06:37,680
or wherever your code is supposed to go

216
00:06:37,680 --> 00:06:41,199
so do you need to no because uh as of

217
00:06:41,199 --> 00:06:42,240
right now most

218
00:06:42,240 --> 00:06:45,199
modern companies or like most companies

219
00:06:45,199 --> 00:06:46,880
handle their code in certain ways where

220
00:06:46,880 --> 00:06:48,560
there are multiple checkpoints that all

221
00:06:48,560 --> 00:06:48,880
the

222
00:06:48,880 --> 00:06:50,720
application code passes through this

223
00:06:50,720 --> 00:06:52,479
could be your automation server such as

224
00:06:52,479 --> 00:06:54,800
say jenkins or we'll obviously have a

225
00:06:54,800 --> 00:06:56,240
place where all the code is stored like

226
00:06:56,240 --> 00:06:58,160
github or bitbucket or

227
00:06:58,160 --> 00:07:01,360
maybe a self-hosted tab server so all of

228
00:07:01,360 --> 00:07:02,000
these places

229
00:07:02,000 --> 00:07:05,039
can be used to scan for uh secrets so

230
00:07:05,039 --> 00:07:06,479
essentially you don't need to like scan

231
00:07:06,479 --> 00:07:07,919
every time you push and obviously we can

232
00:07:07,919 --> 00:07:09,840
also have periodic scans this could be a

233
00:07:09,840 --> 00:07:11,759
part of where your code is stored

234
00:07:11,759 --> 00:07:13,440
and then a periodic scan is triggered

235
00:07:13,440 --> 00:07:15,199
every now and then to scan all the

236
00:07:15,199 --> 00:07:17,039
repositories and such

237
00:07:17,039 --> 00:07:20,000
the issue with like periodic scans is

238
00:07:20,000 --> 00:07:20,960
that

239
00:07:20,960 --> 00:07:23,440
there's a time gap between the two scans

240
00:07:23,440 --> 00:07:24,240
right and if

241
00:07:24,240 --> 00:07:26,639
in between that gap or someone pushed a

242
00:07:26,639 --> 00:07:28,000
code that had secrets and

243
00:07:28,000 --> 00:07:30,319
got deployed it will trigger it will

244
00:07:30,319 --> 00:07:31,440
only uncover that

245
00:07:31,440 --> 00:07:33,199
the next time it's the scan run so it's

246
00:07:33,199 --> 00:07:34,639
not uh immediate

247
00:07:34,639 --> 00:07:37,440
uh whereas in integrated scans uh you

248
00:07:37,440 --> 00:07:38,960
can run it every time essentially

249
00:07:38,960 --> 00:07:40,720
during the build time but the issue is

250
00:07:40,720 --> 00:07:42,000
that it will increase your

251
00:07:42,000 --> 00:07:43,199
delivery time so it's kind of a

252
00:07:43,199 --> 00:07:45,039
trade-off

253
00:07:45,039 --> 00:07:47,280
so coming to should you scan every time

254
00:07:47,280 --> 00:07:48,639
you push your code so

255
00:07:48,639 --> 00:07:50,720
i would suggest yes but we'll get back

256
00:07:50,720 --> 00:07:53,120
to this in detail later

257
00:07:53,120 --> 00:07:55,039
so do you need to pay for a new server

258
00:07:55,039 --> 00:07:56,319
or something to like

259
00:07:56,319 --> 00:07:57,919
essentially scan for secrets in your

260
00:07:57,919 --> 00:07:59,599
code so you know again

261
00:07:59,599 --> 00:08:01,520
github actions is something that github

262
00:08:01,520 --> 00:08:03,440
released now a little while back

263
00:08:03,440 --> 00:08:05,680
it's been a while uh it's essentially a

264
00:08:05,680 --> 00:08:07,520
compute service where you can run

265
00:08:07,520 --> 00:08:09,599
something called workflows which is a

266
00:08:09,599 --> 00:08:12,160
set of instructions that you can give to

267
00:08:12,160 --> 00:08:13,520
github actions and it will

268
00:08:13,520 --> 00:08:15,280
run those instructions against your code

269
00:08:15,280 --> 00:08:17,039
in your repository or even other places

270
00:08:17,039 --> 00:08:20,000
you can like do a whole bunch of things

271
00:08:20,000 --> 00:08:22,080
uh it's as simple as writing a workflow

272
00:08:22,080 --> 00:08:23,360
creating this directory committing the

273
00:08:23,360 --> 00:08:25,120
workflow and triggering the event

274
00:08:25,120 --> 00:08:27,680
so this is a sample workflow where then

275
00:08:27,680 --> 00:08:30,240
i will trigger this workflow on a push

276
00:08:30,240 --> 00:08:32,799
on the master branch or main if you've

277
00:08:32,799 --> 00:08:34,479
been following the news recently

278
00:08:34,479 --> 00:08:36,479
and i define a job called scan which

279
00:08:36,479 --> 00:08:38,640
runs on ubuntu 1804 i check out

280
00:08:38,640 --> 00:08:40,640
essentially like go to the repository i

281
00:08:40,640 --> 00:08:42,159
install python i install the tool and

282
00:08:42,159 --> 00:08:44,399
then i run the scan and that's about it

283
00:08:44,399 --> 00:08:46,640
and this will generate the results in

284
00:08:46,640 --> 00:08:48,160
the form of workflow and

285
00:08:48,160 --> 00:08:49,920
under under the actions tab in your

286
00:08:49,920 --> 00:08:51,440
github repository and then you can

287
00:08:51,440 --> 00:08:54,640
do whatever you want to do with that but

288
00:08:54,640 --> 00:08:57,120
what happens if you already have a setup

289
00:08:57,120 --> 00:08:58,720
let's say you already use jenkins or

290
00:08:58,720 --> 00:09:00,080
let's say circle ci or something like

291
00:09:00,080 --> 00:09:00,800
that

292
00:09:00,800 --> 00:09:02,720
in that case also it's still doable if

293
00:09:02,720 --> 00:09:04,160
you don't want to integrate

294
00:09:04,160 --> 00:09:06,000
let's say github actions in your

295
00:09:06,000 --> 00:09:07,680
pipeline that's perfectly fine because

296
00:09:07,680 --> 00:09:08,880
then you can just install

297
00:09:08,880 --> 00:09:11,440
the tool on your jenkins server and add

298
00:09:11,440 --> 00:09:11,920
that

299
00:09:11,920 --> 00:09:14,080
as a build step or something but if you

300
00:09:14,080 --> 00:09:15,760
do want to offload all of your tooling

301
00:09:15,760 --> 00:09:16,959
to a different server and

302
00:09:16,959 --> 00:09:18,480
like to avoid let's say dependency

303
00:09:18,480 --> 00:09:20,640
issues you can use github actions you

304
00:09:20,640 --> 00:09:22,160
can like code on your machine send it to

305
00:09:22,160 --> 00:09:23,680
github jenkins will pick up the code

306
00:09:23,680 --> 00:09:24,000
from

307
00:09:24,000 --> 00:09:26,399
github and trigger a scan on github

308
00:09:26,399 --> 00:09:27,440
actions because that is

309
00:09:27,440 --> 00:09:28,959
some that is an even that you can

310
00:09:28,959 --> 00:09:30,480
trigger manually as well

311
00:09:30,480 --> 00:09:32,320
then it can fetch back the results and

312
00:09:32,320 --> 00:09:33,519
then you can do whatever you want if

313
00:09:33,519 --> 00:09:35,120
there are no secrets then you can try

314
00:09:35,120 --> 00:09:36,720
you can essentially deploy if there are

315
00:09:36,720 --> 00:09:38,160
secrets then you can block and

316
00:09:38,160 --> 00:09:41,600
alert on those secrets so

317
00:09:41,600 --> 00:09:44,000
uh scanning obviously is one way and we

318
00:09:44,000 --> 00:09:45,279
will be talking about scanning itself

319
00:09:45,279 --> 00:09:46,959
but there are other places or other ways

320
00:09:46,959 --> 00:09:48,800
to mitigate stuff as well

321
00:09:48,800 --> 00:09:51,200
so git hooks githubs is essentially what

322
00:09:51,200 --> 00:09:53,760
i was kind of uh hinting towards earlier

323
00:09:53,760 --> 00:09:55,360
when i said should you scan for before

324
00:09:55,360 --> 00:09:57,279
you push so manually scanning

325
00:09:57,279 --> 00:09:59,279
secrets every time you add changes to

326
00:09:59,279 --> 00:10:01,680
your code is going to be handful

327
00:10:01,680 --> 00:10:02,880
i mean like at some point you're going

328
00:10:02,880 --> 00:10:04,880
to get bored of it right and so video

329
00:10:04,880 --> 00:10:06,160
developers so

330
00:10:06,160 --> 00:10:08,560
the nice way to do it is add a github so

331
00:10:08,560 --> 00:10:10,160
one time once it's configured

332
00:10:10,160 --> 00:10:12,800
uh git hook is essentially a set of

333
00:10:12,800 --> 00:10:14,000
commands or a command

334
00:10:14,000 --> 00:10:15,920
that can run on a certain specified

335
00:10:15,920 --> 00:10:17,360
event so pre-commit hook

336
00:10:17,360 --> 00:10:20,399
would be something that if if uh

337
00:10:20,399 --> 00:10:22,640
someone commits changes uh that command

338
00:10:22,640 --> 00:10:24,640
would run in in our case a scan

339
00:10:24,640 --> 00:10:26,320
and if there are secrets it can just

340
00:10:26,320 --> 00:10:27,920
stop the commit from happening and if

341
00:10:27,920 --> 00:10:29,920
there are no secrets it commits as usual

342
00:10:29,920 --> 00:10:32,880
no changes there similarly for pre-push

343
00:10:32,880 --> 00:10:33,279
push

344
00:10:33,279 --> 00:10:34,880
rejection is on the other side of the

345
00:10:34,880 --> 00:10:36,720
spectrum wherein uh

346
00:10:36,720 --> 00:10:38,560
let's say you have a github enterprise

347
00:10:38,560 --> 00:10:40,480
setup or you have a self-hosted gitlab

348
00:10:40,480 --> 00:10:41,120
server

349
00:10:41,120 --> 00:10:42,800
so whenever you receive a push you can

350
00:10:42,800 --> 00:10:44,880
trigger a scan at that point and

351
00:10:44,880 --> 00:10:47,279
that scan could like then specify

352
00:10:47,279 --> 00:10:49,440
whether if the code has secrets and then

353
00:10:49,440 --> 00:10:50,880
you can reject the push or accept the

354
00:10:50,880 --> 00:10:52,880
push based on that result

355
00:10:52,880 --> 00:10:55,279
the best way uh is to use the secrets

356
00:10:55,279 --> 00:10:57,519
management process again in my opinion

357
00:10:57,519 --> 00:10:58,800
there are tools to do this and there are

358
00:10:58,800 --> 00:11:00,959
services to do this tools like hashicorp

359
00:11:00,959 --> 00:11:03,279
services like aw secrets manager what

360
00:11:03,279 --> 00:11:06,560
these essentially do is give you a

361
00:11:06,560 --> 00:11:09,200
trusted space to store your secret uh

362
00:11:09,200 --> 00:11:10,320
whatever they might be

363
00:11:10,320 --> 00:11:12,480
and then they are fetched as and when

364
00:11:12,480 --> 00:11:13,920
required so your code can have

365
00:11:13,920 --> 00:11:15,279
placeholders such as environment

366
00:11:15,279 --> 00:11:16,320
variables or

367
00:11:16,320 --> 00:11:18,320
dot env files whatever you want to call

368
00:11:18,320 --> 00:11:20,399
it and whenever the

369
00:11:20,399 --> 00:11:22,800
like just the second last step

370
00:11:22,800 --> 00:11:24,560
essentially before you deploy your code

371
00:11:24,560 --> 00:11:26,240
and when it will actually require those

372
00:11:26,240 --> 00:11:27,120
secrets to do

373
00:11:27,120 --> 00:11:29,360
its actions that's when you fetch those

374
00:11:29,360 --> 00:11:31,120
secrets and bake them into your code

375
00:11:31,120 --> 00:11:32,720
in the form of whatever files or

376
00:11:32,720 --> 00:11:34,160
environment variables whatever you want

377
00:11:34,160 --> 00:11:34,720
to do

378
00:11:34,720 --> 00:11:37,839
and that that segregates your secrets

379
00:11:37,839 --> 00:11:39,360
from your code

380
00:11:39,360 --> 00:11:41,360
up till the exact moment that it

381
00:11:41,360 --> 00:11:43,040
actually needs the secrets so you

382
00:11:43,040 --> 00:11:44,320
obviously can't have it in the

383
00:11:44,320 --> 00:11:46,079
deployment state i mean like

384
00:11:46,079 --> 00:11:48,000
post deployment so you have to have it

385
00:11:48,000 --> 00:11:49,200
uh when you're

386
00:11:49,200 --> 00:11:51,279
just about to deploy your application

387
00:11:51,279 --> 00:11:52,399
code so that's where you can use the

388
00:11:52,399 --> 00:11:53,600
secrets management process

389
00:11:53,600 --> 00:11:56,079
this could be even more comprehensive in

390
00:11:56,079 --> 00:11:57,360
the way that you can add scripts and

391
00:11:57,360 --> 00:11:58,240
other things but

392
00:11:58,240 --> 00:12:01,200
this essentially is like the base of it

393
00:12:01,200 --> 00:12:02,160
one

394
00:12:02,160 --> 00:12:05,200
common thing that people do ask me at

395
00:12:05,200 --> 00:12:05,680
times

396
00:12:05,680 --> 00:12:08,240
is that why not get use get hooks all

397
00:12:08,240 --> 00:12:09,680
the time and why do you want to

398
00:12:09,680 --> 00:12:12,320
have like a central scanning setup right

399
00:12:12,320 --> 00:12:14,079
so why scanning let's say jenkins and

400
00:12:14,079 --> 00:12:14,959
not have a

401
00:12:14,959 --> 00:12:17,600
hook all the time uh i would say that i

402
00:12:17,600 --> 00:12:18,240
mean

403
00:12:18,240 --> 00:12:19,839
the ideal way obviously would be to have

404
00:12:19,839 --> 00:12:21,760
git hooks so that every developer can

405
00:12:21,760 --> 00:12:23,600
never commit secrets themselves but the

406
00:12:23,600 --> 00:12:24,880
issue is that

407
00:12:24,880 --> 00:12:26,399
let's say that you want to add a new

408
00:12:26,399 --> 00:12:28,000
signature now that becomes a

409
00:12:28,000 --> 00:12:30,079
pain to add it for all the developers

410
00:12:30,079 --> 00:12:31,839
that are in your team whereas in central

411
00:12:31,839 --> 00:12:33,279
scanning you add it in

412
00:12:33,279 --> 00:12:36,240
in a single place and then it just works

413
00:12:36,240 --> 00:12:37,680
for everything else right

414
00:12:37,680 --> 00:12:39,440
so kit works essentially are a

415
00:12:39,440 --> 00:12:40,880
developer's discipline

416
00:12:40,880 --> 00:12:42,560
thing and like central scanning is

417
00:12:42,560 --> 00:12:44,160
easier for management and like other

418
00:12:44,160 --> 00:12:44,880
stuff to

419
00:12:44,880 --> 00:12:47,360
like maintain your signatures uh results

420
00:12:47,360 --> 00:12:48,880
and you can have a central place to

421
00:12:48,880 --> 00:12:50,480
monitor stuff and like all sorts of

422
00:12:50,480 --> 00:12:51,680
other things so that's why

423
00:12:51,680 --> 00:12:53,040
people generally and i even i would

424
00:12:53,040 --> 00:12:55,519
prefer like central uh scanning

425
00:12:55,519 --> 00:12:57,519
but yeah i mean if you can and if you

426
00:12:57,519 --> 00:12:59,279
can implement this git hooks definitely

427
00:12:59,279 --> 00:12:59,760
are a

428
00:12:59,760 --> 00:13:01,360
really nice touch to it because then

429
00:13:01,360 --> 00:13:03,600
your secrets never end up in your code

430
00:13:03,600 --> 00:13:04,639
as well so there's no

431
00:13:04,639 --> 00:13:06,240
need for rotating secrets there's no

432
00:13:06,240 --> 00:13:07,600
need for like monitoring for them

433
00:13:07,600 --> 00:13:09,680
because they never end up in gold right

434
00:13:09,680 --> 00:13:13,200
so yeah that so uh i mean

435
00:13:13,200 --> 00:13:15,600
we've talked about secrets and you might

436
00:13:15,600 --> 00:13:16,639
find that it's

437
00:13:16,639 --> 00:13:18,639
pretty much theoretical at this point so

438
00:13:18,639 --> 00:13:20,480
i did create a repo for you guys so if

439
00:13:20,480 --> 00:13:21,040
whoever

440
00:13:21,040 --> 00:13:23,200
wants to can go to this particular repo

441
00:13:23,200 --> 00:13:24,480
i've hidden a flag here

442
00:13:24,480 --> 00:13:26,800
you won't find it obviously uh on the

443
00:13:26,800 --> 00:13:27,839
face of it but uh

444
00:13:27,839 --> 00:13:30,160
if you run a particular scan you should

445
00:13:30,160 --> 00:13:32,000
be able to find a particular

446
00:13:32,000 --> 00:13:33,680
funky looking file and that should have

447
00:13:33,680 --> 00:13:36,639
a flag and if you dm me the flag i will

448
00:13:36,639 --> 00:13:38,079
send you some appreciation because

449
00:13:38,079 --> 00:13:39,680
that's all i can send you

450
00:13:39,680 --> 00:13:42,000
uh so yeah i mean uh feel free to like

451
00:13:42,000 --> 00:13:43,680
check this report and use it if you want

452
00:13:43,680 --> 00:13:46,160
to uh that's perfectly fine there's one

453
00:13:46,160 --> 00:13:47,600
particular file that you need to look

454
00:13:47,600 --> 00:13:49,760
for uh with that

455
00:13:49,760 --> 00:13:51,920
i'd like to thank thank you guys for

456
00:13:51,920 --> 00:13:53,279
listening in thank you beer farmers for

457
00:13:53,279 --> 00:13:55,440
having me all the mentors for your help

458
00:13:55,440 --> 00:13:57,279
and if you have guys have any questions

459
00:13:57,279 --> 00:13:59,600
i'll take them though

460
00:13:59,600 --> 00:14:02,800
okay thank you very much um thank you

461
00:14:02,800 --> 00:14:04,240
we don't appear to have any questions

462
00:14:04,240 --> 00:14:05,839
certainly coming from the room

463
00:14:05,839 --> 00:14:09,279
um a couple of points yeah i just think

464
00:14:09,279 --> 00:14:10,639
i just think no one can make the

465
00:14:10,639 --> 00:14:12,000
argument that you don't know what you're

466
00:14:12,000 --> 00:14:13,440
talking about that is

467
00:14:13,440 --> 00:14:16,399
very technical and very fast my friend

468
00:14:16,399 --> 00:14:17,760
nicely done

469
00:14:17,760 --> 00:14:21,199
um what do you so overall like

470
00:14:21,199 --> 00:14:22,959
what are your impressions of sort of the

471
00:14:22,959 --> 00:14:24,800
code that you're seeing today and sort

472
00:14:24,800 --> 00:14:26,320
of the quality of it do you see

473
00:14:26,320 --> 00:14:28,480
improvements or do you see the situation

474
00:14:28,480 --> 00:14:31,600
getting a lot worse uh

475
00:14:31,600 --> 00:14:34,560
it it's kind of both in a way because

476
00:14:34,560 --> 00:14:35,040
people

477
00:14:35,040 --> 00:14:37,120
are like looking for automating as much

478
00:14:37,120 --> 00:14:38,399
as they can so they are definitely

479
00:14:38,399 --> 00:14:39,920
pushing in more secrets in your

480
00:14:39,920 --> 00:14:42,800
code but they also realize that it's

481
00:14:42,800 --> 00:14:44,000
like sensitive and

482
00:14:44,000 --> 00:14:45,839
sensitive pieces of information that

483
00:14:45,839 --> 00:14:46,959
they're pushing in so they're more

484
00:14:46,959 --> 00:14:48,639
careful about it as well and

485
00:14:48,639 --> 00:14:50,399
as all the news comes in like data

486
00:14:50,399 --> 00:14:52,480
breaches and whatnot happens and

487
00:14:52,480 --> 00:14:54,079
a lot of times these are very simple

488
00:14:54,079 --> 00:14:55,519
things that have happened right

489
00:14:55,519 --> 00:14:57,040
because of someone leaking their

490
00:14:57,040 --> 00:14:58,639
credentials or maybe like

491
00:14:58,639 --> 00:15:00,079
for whatever reason so they are more

492
00:15:00,079 --> 00:15:01,839
careful as well so it's like a bit of

493
00:15:01,839 --> 00:15:02,880
both time

494
00:15:02,880 --> 00:15:05,279
i'd say

495
00:15:08,320 --> 00:15:10,800
thank you that's great it's super yeah

496
00:15:10,800 --> 00:15:11,440
sure

497
00:15:11,440 --> 00:15:14,240
i had a question because uh a lot of

498
00:15:14,240 --> 00:15:15,519
what you were talking about

499
00:15:15,519 --> 00:15:17,920
is something that uh my team actually

500
00:15:17,920 --> 00:15:19,120
tried to

501
00:15:19,120 --> 00:15:22,639
tackle years ago before um

502
00:15:22,639 --> 00:15:24,240
anything was available you you're

503
00:15:24,240 --> 00:15:25,920
talking about probably the most

504
00:15:25,920 --> 00:15:28,079
available thing was just a commercial

505
00:15:28,079 --> 00:15:29,920
solution that cost thousands and

506
00:15:29,920 --> 00:15:32,240
thousands um

507
00:15:32,240 --> 00:15:35,279
so what kind of like what's your um

508
00:15:35,279 --> 00:15:37,600
advice for especially smaller teams i

509
00:15:37,600 --> 00:15:38,399
know you mentioned

510
00:15:38,399 --> 00:15:40,800
something like faults and that that is

511
00:15:40,800 --> 00:15:42,240
quite monolithic and

512
00:15:42,240 --> 00:15:45,920
and big maybe some might see it too big

513
00:15:45,920 --> 00:15:48,480
for smaller projects do you know of

514
00:15:48,480 --> 00:15:50,079
anything that maybe is

515
00:15:50,079 --> 00:15:52,000
uh more applicable or more useful for

516
00:15:52,000 --> 00:15:55,199
smaller projects and smaller teams

517
00:15:55,199 --> 00:15:57,920
uh so if you are going with the secret

518
00:15:57,920 --> 00:15:59,920
smartphone process there needs to be a

519
00:15:59,920 --> 00:16:01,120
central place so in

520
00:16:01,120 --> 00:16:02,959
most cases it's volta but if you want to

521
00:16:02,959 --> 00:16:04,880
go the service route there's obviously

522
00:16:04,880 --> 00:16:06,880
secrets manager there's a parameter

523
00:16:06,880 --> 00:16:08,560
store as well with aws and

524
00:16:08,560 --> 00:16:10,560
even at this point right now with github

525
00:16:10,560 --> 00:16:12,320
you also have see the ability to add

526
00:16:12,320 --> 00:16:13,920
secrets to the repository as well as

527
00:16:13,920 --> 00:16:15,920
organization secrets themselves

528
00:16:15,920 --> 00:16:17,279
so that does not really cost you

529
00:16:17,279 --> 00:16:18,720
anything so you can add secrets there

530
00:16:18,720 --> 00:16:20,160
and you could use something like github

531
00:16:20,160 --> 00:16:21,920
actions to invoke those secrets without

532
00:16:21,920 --> 00:16:23,440
ever having to worry about like

533
00:16:23,440 --> 00:16:25,519
where to maintain them and everything so

534
00:16:25,519 --> 00:16:26,959
if you have like some central

535
00:16:26,959 --> 00:16:28,800
credences such as ssh keys to deploy

536
00:16:28,800 --> 00:16:30,320
your code that could be an organization

537
00:16:30,320 --> 00:16:32,160
level secret so that all repositories

538
00:16:32,160 --> 00:16:33,600
under that organization have access to

539
00:16:33,600 --> 00:16:34,160
that

540
00:16:34,160 --> 00:16:36,079
and if it's a repo specific secret it

541
00:16:36,079 --> 00:16:37,600
could go there and then it would also

542
00:16:37,600 --> 00:16:39,440
again be used under the github actions

543
00:16:39,440 --> 00:16:44,800
uh space ah fantastic concert awesome

544
00:16:45,360 --> 00:16:48,560
super so some great feedback um awesome

545
00:16:48,560 --> 00:16:48,959
talk

546
00:16:48,959 --> 00:16:51,440
cool talk great talk um that's from the

547
00:16:51,440 --> 00:16:52,880
people that are watching online

548
00:16:52,880 --> 00:16:55,839
so very well done ayush uh thank you

549
00:16:55,839 --> 00:16:57,759
very much for sharing your time with us

550
00:16:57,759 --> 00:17:05,839
um and we're done thank you

