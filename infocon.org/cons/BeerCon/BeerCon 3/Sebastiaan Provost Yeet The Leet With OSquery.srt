1
00:00:00,000 --> 00:00:02,320
yeah hello everyone and welcome to my

2
00:00:02,320 --> 00:00:04,880
talk yeet little whiskery effective

3
00:00:04,880 --> 00:00:08,240
treat hunting without breaking the bank

4
00:00:08,639 --> 00:00:11,040
first a little bit about me who am i my

5
00:00:11,040 --> 00:00:12,960
name is sebastian profost i'm currently

6
00:00:12,960 --> 00:00:14,400
the lead security engineer at the

7
00:00:14,400 --> 00:00:17,279
company called beacon i travel quite a

8
00:00:17,279 --> 00:00:19,199
lot as well i like to like to go to the

9
00:00:19,199 --> 00:00:20,240
gym

10
00:00:20,240 --> 00:00:22,560
and you can find me on twitter or get up

11
00:00:22,560 --> 00:00:23,439
on

12
00:00:23,439 --> 00:00:26,000
with these details

13
00:00:26,000 --> 00:00:27,760
so

14
00:00:27,760 --> 00:00:29,920
let me first talk a little bit about my

15
00:00:29,920 --> 00:00:31,760
motivation for this talk

16
00:00:31,760 --> 00:00:34,399
um nowadays it presents a lot of

17
00:00:34,399 --> 00:00:36,079
endpoint detection

18
00:00:36,079 --> 00:00:38,480
and response systems or managed stick

19
00:00:38,480 --> 00:00:41,200
point detect end response systems or

20
00:00:41,200 --> 00:00:42,640
even extended

21
00:00:42,640 --> 00:00:45,200
response systems acquire the quality

22
00:00:45,200 --> 00:00:46,559
solutions and they are seen as the

23
00:00:46,559 --> 00:00:48,719
answer the one stop stop

24
00:00:48,719 --> 00:00:50,879
uh solution for your securities for

25
00:00:50,879 --> 00:00:52,559
bigger companies

26
00:00:52,559 --> 00:00:54,719
um given that the

27
00:00:54,719 --> 00:00:58,320
sold or sell to sold people as the final

28
00:00:58,320 --> 00:01:00,719
solution well a lot of companies

29
00:01:00,719 --> 00:01:02,879
they built their own solution under that

30
00:01:02,879 --> 00:01:04,479
name

31
00:01:04,479 --> 00:01:06,400
i've done some research i found more

32
00:01:06,400 --> 00:01:08,799
than 20 resolutions

33
00:01:08,799 --> 00:01:10,320
and some of the more new ones are falcon

34
00:01:10,320 --> 00:01:12,240
from crowdstrike singularity from

35
00:01:12,240 --> 00:01:14,320
central one you have cyber reason who is

36
00:01:14,320 --> 00:01:16,240
kind of a new kid on the block

37
00:01:16,240 --> 00:01:18,000
and so on so on

38
00:01:18,000 --> 00:01:21,040
now the thing is because they're sold as

39
00:01:21,040 --> 00:01:23,280
the one stop stop solution for security

40
00:01:23,280 --> 00:01:27,439
needs to to me to make sure you're safe

41
00:01:27,439 --> 00:01:30,560
um they also made them sold on on quite

42
00:01:30,560 --> 00:01:33,119
a high price and they're quite expensive

43
00:01:33,119 --> 00:01:35,360
but the price doesn't always mean

44
00:01:35,360 --> 00:01:37,840
anything um sometimes it got expensive

45
00:01:37,840 --> 00:01:40,400
but it can be not as good as they deem

46
00:01:40,400 --> 00:01:41,439
to be

47
00:01:41,439 --> 00:01:42,399
so

48
00:01:42,399 --> 00:01:44,079
sometimes they still miss commenting

49
00:01:44,079 --> 00:01:45,840
some payloads

50
00:01:45,840 --> 00:01:47,840
now i want to make sure that

51
00:01:47,840 --> 00:01:49,680
that you guys know this is all the talk

52
00:01:49,680 --> 00:01:52,479
to pass on all these kind of solutions

53
00:01:52,479 --> 00:01:54,960
it's more like a talk that's um to

54
00:01:54,960 --> 00:01:57,439
explain how you can use

55
00:01:57,439 --> 00:01:59,520
free tools or source tools or

56
00:01:59,520 --> 00:02:01,840
inexpensive tools to help complement the

57
00:02:01,840 --> 00:02:03,040
workings

58
00:02:03,040 --> 00:02:03,759
of

59
00:02:03,759 --> 00:02:06,479
these systems these dr systems so today

60
00:02:06,479 --> 00:02:08,080
i would like to show you how you can do

61
00:02:08,080 --> 00:02:11,360
that with whiskery how whisky can help

62
00:02:11,360 --> 00:02:13,760
these dr systems to make sure that the

63
00:02:13,760 --> 00:02:15,920
things that those systems miss and oscar

64
00:02:15,920 --> 00:02:18,800
you can still try to help you catch

65
00:02:18,800 --> 00:02:22,720
those uh though those those things

66
00:02:22,720 --> 00:02:25,520
so uh let's get into it

67
00:02:25,520 --> 00:02:27,840
what can i expect i first will give an

68
00:02:27,840 --> 00:02:30,640
intro about whiskering then a quick

69
00:02:30,640 --> 00:02:34,080
intro about two frameworks um

70
00:02:34,080 --> 00:02:37,200
then i'll show you how you can use

71
00:02:37,200 --> 00:02:40,160
whiskery to get the lead to try to get

72
00:02:40,160 --> 00:02:42,239
the kick out to bad guys

73
00:02:42,239 --> 00:02:44,160
uh i will show some examples about

74
00:02:44,160 --> 00:02:45,840
potential alerting

75
00:02:45,840 --> 00:02:49,360
and a small situp as well

76
00:02:49,360 --> 00:02:51,519
so let's start with the first bit

77
00:02:51,519 --> 00:02:53,840
obvious query

78
00:02:53,840 --> 00:02:56,160
what is overscoring os query is an

79
00:02:56,160 --> 00:02:57,599
operating system instrumentation

80
00:02:57,599 --> 00:02:59,440
framework

81
00:02:59,440 --> 00:03:02,239
that sport that works on many different

82
00:03:02,239 --> 00:03:05,680
kind of operating systems like windows

83
00:03:05,680 --> 00:03:08,560
macos linux freebsd and you name it

84
00:03:08,560 --> 00:03:10,080
basically if you can compile it yourself

85
00:03:10,080 --> 00:03:12,959
for your own system it'll probably work

86
00:03:12,959 --> 00:03:16,080
so richly built by facebook

87
00:03:16,080 --> 00:03:18,560
and basically build it to have a better

88
00:03:18,560 --> 00:03:20,159
greater visibility on the entire fleet

89
00:03:20,159 --> 00:03:21,280
of servers

90
00:03:21,280 --> 00:03:24,000
um what is server a doing or

91
00:03:24,000 --> 00:03:26,159
who is logged in server a or on all

92
00:03:26,159 --> 00:03:28,080
servers for example in one location um

93
00:03:28,080 --> 00:03:30,319
what really allows you to do that

94
00:03:30,319 --> 00:03:32,080
um after a while they didn't was

95
00:03:32,080 --> 00:03:33,519
necessary that it was maintained by the

96
00:03:33,519 --> 00:03:35,040
linux foundation

97
00:03:35,040 --> 00:03:37,840
to um make sure they

98
00:03:37,840 --> 00:03:39,280
kept being developed

99
00:03:39,280 --> 00:03:42,400
under a good name as well and um with a

100
00:03:42,400 --> 00:03:44,560
different view in it

101
00:03:44,560 --> 00:03:46,720
nowadays it's used by quite a lot of big

102
00:03:46,720 --> 00:03:50,080
companies like netflix uber airbnb and

103
00:03:50,080 --> 00:03:51,760
so on

104
00:03:51,760 --> 00:03:53,120
now

105
00:03:53,120 --> 00:03:56,000
how does oscar actually works so rescue

106
00:03:56,000 --> 00:03:57,040
basically

107
00:03:57,040 --> 00:03:58,560
exposes your operating system as

108
00:03:58,560 --> 00:04:01,360
relational database

109
00:04:01,360 --> 00:04:03,519
you can basically use sql queries to

110
00:04:03,519 --> 00:04:05,599
explore that operating system

111
00:04:05,599 --> 00:04:06,480
now

112
00:04:06,480 --> 00:04:08,480
when it exposes your operating system as

113
00:04:08,480 --> 00:04:11,040
relational database it can do that in

114
00:04:11,040 --> 00:04:14,319
two different ways so with either event

115
00:04:14,319 --> 00:04:17,040
driven tables or state driven tables

116
00:04:17,040 --> 00:04:19,440
definitive table is busy a table

117
00:04:19,440 --> 00:04:20,798
that

118
00:04:20,798 --> 00:04:22,479
has all events

119
00:04:22,479 --> 00:04:24,960
um that's when i monitor

120
00:04:24,960 --> 00:04:27,040
from a certain item for example when i

121
00:04:27,040 --> 00:04:28,880
monitor the file events in a certain

122
00:04:28,880 --> 00:04:30,400
directory you want to see either files

123
00:04:30,400 --> 00:04:32,479
created deleted or modified

124
00:04:32,479 --> 00:04:34,320
you can tell which query monitor

125
00:04:34,320 --> 00:04:36,479
directory for me and the table will

126
00:04:36,479 --> 00:04:38,880
contain all file events that happened in

127
00:04:38,880 --> 00:04:40,160
the directory

128
00:04:40,160 --> 00:04:43,120
now you can also for example have um

129
00:04:43,120 --> 00:04:45,199
process defense for example you want to

130
00:04:45,199 --> 00:04:47,600
know which process potentially um have

131
00:04:47,600 --> 00:04:49,040
launched and or how processes got

132
00:04:49,040 --> 00:04:50,160
launched

133
00:04:50,160 --> 00:04:52,880
so that's also then again

134
00:04:52,880 --> 00:04:54,880
in a state event different table calls

135
00:04:54,880 --> 00:04:57,840
events now an example of a stage table

136
00:04:57,840 --> 00:04:58,720
is

137
00:04:58,720 --> 00:05:01,280
for example just a table file not file

138
00:05:01,280 --> 00:05:03,120
events but file

139
00:05:03,120 --> 00:05:05,440
you can create a file table with a path

140
00:05:05,440 --> 00:05:06,800
and it will tell you

141
00:05:06,800 --> 00:05:10,560
the the result of the query in um

142
00:05:10,560 --> 00:05:12,479
as a state of that file directly you're

143
00:05:12,479 --> 00:05:14,560
querying so let's say you want to query

144
00:05:14,560 --> 00:05:17,520
uh the file index.html in your home

145
00:05:17,520 --> 00:05:18,639
directory

146
00:05:18,639 --> 00:05:20,639
you use a query that's

147
00:05:20,639 --> 00:05:22,240
created specifically that file and it

148
00:05:22,240 --> 00:05:24,800
will give you name of the file

149
00:05:24,800 --> 00:05:26,479
and you can imagine so that's an example

150
00:05:26,479 --> 00:05:28,720
of a state driven table

151
00:05:28,720 --> 00:05:30,160
now

152
00:05:30,160 --> 00:05:31,840
it's really

153
00:05:31,840 --> 00:05:32,960
um

154
00:05:32,960 --> 00:05:34,320
if you run it on different operating

155
00:05:34,320 --> 00:05:36,000
systems there are small sl there are

156
00:05:36,000 --> 00:05:38,160
there are a few slight changes uh

157
00:05:38,160 --> 00:05:39,840
potentially different tables because the

158
00:05:39,840 --> 00:05:41,280
operating system

159
00:05:41,280 --> 00:05:42,960
but in general

160
00:05:42,960 --> 00:05:45,199
all of all the combinations are uniform

161
00:05:45,199 --> 00:05:48,160
so normally the components are

162
00:05:48,160 --> 00:05:49,680
kind of quite quite the same on

163
00:05:49,680 --> 00:05:51,840
operating systems or the values may

164
00:05:51,840 --> 00:05:55,360
depend on the operating system

165
00:05:55,360 --> 00:05:58,400
now always query for certain operating

166
00:05:58,400 --> 00:06:00,240
systems has scanned some specific

167
00:06:00,240 --> 00:06:01,840
features for example

168
00:06:01,840 --> 00:06:04,840
windows it can tie into windows event

169
00:06:04,840 --> 00:06:07,120
log which can become quite powerful

170
00:06:07,120 --> 00:06:08,800
because oscar can

171
00:06:08,800 --> 00:06:10,720
parse the data and it will defend life

172
00:06:10,720 --> 00:06:12,880
and they can use and then you can create

173
00:06:12,880 --> 00:06:14,240
a os query

174
00:06:14,240 --> 00:06:16,800
to gather to get data specific data from

175
00:06:16,800 --> 00:06:18,000
an event launch

176
00:06:18,000 --> 00:06:19,440
later online we'll see how you can

177
00:06:19,440 --> 00:06:21,360
combine this with cismen

178
00:06:21,360 --> 00:06:24,400
now on mac os nowadays since mac

179
00:06:24,400 --> 00:06:26,160
question top 15

180
00:06:26,160 --> 00:06:29,120
it also supports events generated by the

181
00:06:29,120 --> 00:06:30,960
input security framework it's new

182
00:06:30,960 --> 00:06:32,560
framework on mac os that allows you to

183
00:06:32,560 --> 00:06:35,039
monitor proceedings and

184
00:06:35,039 --> 00:06:38,560
do an audio noise and then linux it

185
00:06:38,560 --> 00:06:41,840
supports events generated by a berkeley

186
00:06:41,840 --> 00:06:44,479
packet filter

187
00:06:44,880 --> 00:06:45,680
now

188
00:06:45,680 --> 00:06:47,120
one of the first examples i would like

189
00:06:47,120 --> 00:06:49,120
to quickly talk about we talked about

190
00:06:49,120 --> 00:06:52,240
this before is file information so

191
00:06:52,240 --> 00:06:53,919
the purpose of the file information

192
00:06:53,919 --> 00:06:55,759
tables is to track fast states and

193
00:06:55,759 --> 00:06:58,160
changes so that's it before you have two

194
00:06:58,160 --> 00:07:01,120
tables for state driven you have a file

195
00:07:01,120 --> 00:07:03,120
table

196
00:07:03,120 --> 00:07:04,720
gives you the general information like

197
00:07:04,720 --> 00:07:08,800
path directory inode size permissions

198
00:07:08,800 --> 00:07:10,800
and it's supported on all operating

199
00:07:10,800 --> 00:07:12,240
systems

200
00:07:12,240 --> 00:07:16,000
now the event driven table file events

201
00:07:16,000 --> 00:07:18,479
it tracks time and action changes

202
00:07:18,479 --> 00:07:20,720
that are based on configuration so tell

203
00:07:20,720 --> 00:07:23,919
obviously monitor that directory for me

204
00:07:23,919 --> 00:07:26,880
and all files in a directory will pop up

205
00:07:26,880 --> 00:07:27,919
in the table

206
00:07:27,919 --> 00:07:30,000
now this is currently only supported on

207
00:07:30,000 --> 00:07:31,199
uh

208
00:07:31,199 --> 00:07:32,720
linux mac os

209
00:07:32,720 --> 00:07:35,599
um not not on windows but it might be

210
00:07:35,599 --> 00:07:38,400
supported in the future

211
00:07:39,039 --> 00:07:41,360
now another example of a listing you can

212
00:07:41,360 --> 00:07:43,120
do you can basically

213
00:07:43,120 --> 00:07:45,759
give you a list of all listing ports so

214
00:07:45,759 --> 00:07:47,599
the purpose of this table is to

215
00:07:47,599 --> 00:07:49,840
is to track what process is listing

216
00:07:49,840 --> 00:07:50,960
which sports

217
00:07:50,960 --> 00:07:52,560
uh it's a state driven table called

218
00:07:52,560 --> 00:07:53,759
listing ports

219
00:07:53,759 --> 00:07:54,879
it's just

220
00:07:54,879 --> 00:07:56,400
that shows the general information like

221
00:07:56,400 --> 00:07:59,039
blog port

222
00:07:59,280 --> 00:08:01,440
family address and it's supported on all

223
00:08:01,440 --> 00:08:02,879
operating systems

224
00:08:02,879 --> 00:08:05,120
now if you combine this with the process

225
00:08:05,120 --> 00:08:07,199
table you can do this

226
00:08:07,199 --> 00:08:09,440
with the process id field because the

227
00:08:09,440 --> 00:08:11,120
pros id field in the

228
00:08:11,120 --> 00:08:13,039
list imports table directly translates

229
00:08:13,039 --> 00:08:15,599
to the process id in a process table now

230
00:08:15,599 --> 00:08:17,199
if you couldn't combine this you can

231
00:08:17,199 --> 00:08:19,919
basically track

232
00:08:19,919 --> 00:08:21,919
look at the listing ports and directly

233
00:08:21,919 --> 00:08:24,639
have the names of processes listed next

234
00:08:24,639 --> 00:08:26,479
to them as well this allows you to track

235
00:08:26,479 --> 00:08:28,240
malicious processes that are potentially

236
00:08:28,240 --> 00:08:31,199
listening for commands

237
00:08:32,479 --> 00:08:33,839
another

238
00:08:33,839 --> 00:08:36,880
small example of what obscurity can

239
00:08:36,880 --> 00:08:39,440
potentially do or potentially

240
00:08:39,440 --> 00:08:41,200
show you is

241
00:08:41,200 --> 00:08:44,720
pipes so the purpose of this table is to

242
00:08:44,720 --> 00:08:45,600
track

243
00:08:45,600 --> 00:08:47,120
pipes that are used for interplus

244
00:08:47,120 --> 00:08:48,959
communications

245
00:08:48,959 --> 00:08:50,640
it's again a

246
00:08:50,640 --> 00:08:53,360
state driven table

247
00:08:53,360 --> 00:08:54,720
god types

248
00:08:54,720 --> 00:08:56,160
um it's just gives you general

249
00:08:56,160 --> 00:08:59,440
information like name instance flags

250
00:08:59,440 --> 00:09:01,360
and it can show you named and anonymous

251
00:09:01,360 --> 00:09:03,120
bytes

252
00:09:03,120 --> 00:09:05,120
now it's only supported on windows

253
00:09:05,120 --> 00:09:07,200
because perhaps have used windows it

254
00:09:07,200 --> 00:09:10,160
shows some information on linux but not

255
00:09:10,160 --> 00:09:12,160
as much because linux pipes look a

256
00:09:12,160 --> 00:09:14,320
little bit different

257
00:09:14,320 --> 00:09:17,360
now this is useful useful to detect

258
00:09:17,360 --> 00:09:19,200
unusual plus communication

259
00:09:19,200 --> 00:09:21,120
but we'll go a little bit deeper in that

260
00:09:21,120 --> 00:09:24,000
later on down the line

261
00:09:24,000 --> 00:09:25,760
now i would like to quickly have a chat

262
00:09:25,760 --> 00:09:28,880
about c2 frameworks um

263
00:09:28,880 --> 00:09:30,480
now

264
00:09:30,480 --> 00:09:31,360
what i

265
00:09:31,360 --> 00:09:33,360
what rc tool frame works the two

266
00:09:33,360 --> 00:09:34,959
frameworks are basically post

267
00:09:34,959 --> 00:09:37,519
exploitation frameworks you can use them

268
00:09:37,519 --> 00:09:39,519
after you have an initial foothold or

269
00:09:39,519 --> 00:09:42,160
initial compromise in network

270
00:09:42,160 --> 00:09:43,920
to to

271
00:09:43,920 --> 00:09:45,920
you can use them basically for previous

272
00:09:45,920 --> 00:09:47,519
installation from that initial

273
00:09:47,519 --> 00:09:49,920
compromise common execution pivoting

274
00:09:49,920 --> 00:09:52,080
lateral movement and you name it

275
00:09:52,080 --> 00:09:54,160
they use quite a lot in redeeming

276
00:09:54,160 --> 00:09:57,279
exercises or or team engagements but now

277
00:09:57,279 --> 00:10:00,959
it is used a lot as well by um

278
00:10:00,959 --> 00:10:02,640
medicine actors

279
00:10:02,640 --> 00:10:04,320
for example cobbled strike has been

280
00:10:04,320 --> 00:10:06,640
repurposed by actors to use them because

281
00:10:06,640 --> 00:10:08,240
it's quite easy to use and quite

282
00:10:08,240 --> 00:10:10,000
powerful

283
00:10:10,000 --> 00:10:12,480
now there are quite a quite a lot of

284
00:10:12,480 --> 00:10:14,320
um more known

285
00:10:14,320 --> 00:10:16,640
um c2 frameworks and some of the more

286
00:10:16,640 --> 00:10:19,519
new ones are empire of mythic and cobalt

287
00:10:19,519 --> 00:10:21,360
strike as mentioned before

288
00:10:21,360 --> 00:10:23,360
and the maximum so powerful is that they

289
00:10:23,360 --> 00:10:24,240
basically

290
00:10:24,240 --> 00:10:26,480
many times those frameworks support more

291
00:10:26,480 --> 00:10:28,160
than one operating system

292
00:10:28,160 --> 00:10:29,120
um

293
00:10:29,120 --> 00:10:31,200
some other operating system agnostic

294
00:10:31,200 --> 00:10:34,800
some support multiple it all depends on

295
00:10:34,800 --> 00:10:36,399
what's the creator intended for that

296
00:10:36,399 --> 00:10:38,079
framework

297
00:10:38,079 --> 00:10:39,360
now

298
00:10:39,360 --> 00:10:41,360
a quick example that i want to talk

299
00:10:41,360 --> 00:10:42,720
about

300
00:10:42,720 --> 00:10:44,240
is for example the empire state

301
00:10:44,240 --> 00:10:45,360
framework

302
00:10:45,360 --> 00:10:48,240
embassador framework was originally

303
00:10:48,240 --> 00:10:50,240
built as a powershell framework for

304
00:10:50,240 --> 00:10:51,680
windows

305
00:10:51,680 --> 00:10:53,440
but after a while it merged another

306
00:10:53,440 --> 00:10:55,920
project that had almost same name that

307
00:10:55,920 --> 00:10:58,640
was then again a python-based framework

308
00:10:58,640 --> 00:11:00,720
it's now combined it's a quite a

309
00:11:00,720 --> 00:11:03,120
powerful c2 framework that's with

310
00:11:03,120 --> 00:11:05,839
partial windows but it also you can use

311
00:11:05,839 --> 00:11:06,959
python

312
00:11:06,959 --> 00:11:10,800
3 and higher for linux on mac os

313
00:11:10,800 --> 00:11:12,480
you can use this you can deploy this in

314
00:11:12,480 --> 00:11:14,480
quite a few different ways like

315
00:11:14,480 --> 00:11:16,079
you have docker

316
00:11:16,079 --> 00:11:18,000
kali or

317
00:11:18,000 --> 00:11:19,200
but or

318
00:11:19,200 --> 00:11:20,640
another way that you want yourself you

319
00:11:20,640 --> 00:11:21,839
just

320
00:11:21,839 --> 00:11:23,200
have the source code

321
00:11:23,200 --> 00:11:25,519
so it's quite powerful because it's a

322
00:11:25,519 --> 00:11:28,160
support by many operating systems and

323
00:11:28,160 --> 00:11:30,959
it's quite easy to deploy as well

324
00:11:30,959 --> 00:11:32,800
another one of the frameworks i talked

325
00:11:32,800 --> 00:11:35,760
about is the mythic framework

326
00:11:35,760 --> 00:11:37,440
meeting from new york is

327
00:11:37,440 --> 00:11:38,560
not necessary

328
00:11:38,560 --> 00:11:40,160
it's not purpose for one or two

329
00:11:40,160 --> 00:11:41,680
operating systems like empire for

330
00:11:41,680 --> 00:11:42,399
example

331
00:11:42,399 --> 00:11:43,600
or three

332
00:11:43,600 --> 00:11:46,320
but it's basically a cross-platform

333
00:11:46,320 --> 00:11:48,640
again you can deploy it on any

334
00:11:48,640 --> 00:11:50,160
platform that you want that supports

335
00:11:50,160 --> 00:11:51,519
containers

336
00:11:51,519 --> 00:11:53,760
uh because basically the backend turns

337
00:11:53,760 --> 00:11:55,440
into containers and front-end is web

338
00:11:55,440 --> 00:11:58,399
interface that also con doc container

339
00:11:58,399 --> 00:12:01,040
that exposes port area or 43

340
00:12:01,040 --> 00:12:02,000
uh

341
00:12:02,000 --> 00:12:04,720
to the public that you can serve on

342
00:12:04,720 --> 00:12:07,040
now the mythic framework is a framework

343
00:12:07,040 --> 00:12:08,800
with in my opinion

344
00:12:08,800 --> 00:12:11,120
a real plug-and-play architecture

345
00:12:11,120 --> 00:12:12,160
well

346
00:12:12,160 --> 00:12:14,399
what i mean with that um

347
00:12:14,399 --> 00:12:16,560
so like i said every surface emitting

348
00:12:16,560 --> 00:12:18,880
framework runs in the container now if

349
00:12:18,880 --> 00:12:21,040
you want to add more agents um or

350
00:12:21,040 --> 00:12:23,279
profiles to the framework

351
00:12:23,279 --> 00:12:25,200
you can use its command line interface

352
00:12:25,200 --> 00:12:27,839
to just install a doc container a metic

353
00:12:27,839 --> 00:12:30,240
nose and launch the container until

354
00:12:30,240 --> 00:12:31,760
automatically appear mapping phase as

355
00:12:31,760 --> 00:12:33,600
well as a new option

356
00:12:33,600 --> 00:12:34,800
so let's say for example meeting

357
00:12:34,800 --> 00:12:36,800
framework i want to use what you call

358
00:12:36,800 --> 00:12:39,519
is the apple agent not mistaken it's

359
00:12:39,519 --> 00:12:40,800
specifically an agent that can use for

360
00:12:40,800 --> 00:12:41,920
mac os

361
00:12:41,920 --> 00:12:43,519
i installed a doc container with the

362
00:12:43,519 --> 00:12:45,279
compliant interface mythic

363
00:12:45,279 --> 00:12:46,959
and two minutes later in web interface i

364
00:12:46,959 --> 00:12:48,880
can just select that agent to generate a

365
00:12:48,880 --> 00:12:51,360
payload

366
00:12:51,519 --> 00:12:53,519
now i've given you i've shown you a

367
00:12:53,519 --> 00:12:55,920
little bit what oscar can do talked a

368
00:12:55,920 --> 00:12:58,480
little bit about c2 frameworks

369
00:12:58,480 --> 00:13:00,959
now let's see how we can

370
00:13:00,959 --> 00:13:03,200
uh use this because obviously to

371
00:13:03,200 --> 00:13:05,680
potentially catch the bad guys

372
00:13:05,680 --> 00:13:08,560
eat the lead of course

373
00:13:10,240 --> 00:13:11,200
now

374
00:13:11,200 --> 00:13:13,680
there are multiple ways to do this um

375
00:13:13,680 --> 00:13:16,320
i should i i'll use a few examples but

376
00:13:16,320 --> 00:13:17,680
these are only a few examples of the

377
00:13:17,680 --> 00:13:20,560
many ways you can use whiskery to

378
00:13:20,560 --> 00:13:23,040
catch bad guys get these processes

379
00:13:23,040 --> 00:13:25,279
whatever you name it one of them is

380
00:13:25,279 --> 00:13:27,760
ciara rules you have also foundatively

381
00:13:27,760 --> 00:13:30,480
monitoring with process events

382
00:13:30,480 --> 00:13:33,120
or i'll go deeper that later you can

383
00:13:33,120 --> 00:13:36,399
combine always clearly with system

384
00:13:36,399 --> 00:13:37,519
which can become quite powerful on

385
00:13:37,519 --> 00:13:39,839
windows devices

386
00:13:39,839 --> 00:13:41,199
let's first have a look at the arrow

387
00:13:41,199 --> 00:13:42,480
rules

388
00:13:42,480 --> 00:13:44,959
so yar was basically their way of

389
00:13:44,959 --> 00:13:47,760
identifying malware or files with

390
00:13:47,760 --> 00:13:50,240
certain rule sets

391
00:13:50,240 --> 00:13:52,079
they're quite good support of macos

392
00:13:52,079 --> 00:13:53,279
linux

393
00:13:53,279 --> 00:13:54,399
and

394
00:13:54,399 --> 00:13:56,480
lots of times you can either do it on

395
00:13:56,480 --> 00:13:58,000
the command line or you can do it in

396
00:13:58,000 --> 00:14:00,320
combination with valid degree monitoring

397
00:14:00,320 --> 00:14:03,760
now with os query you can do it's built

398
00:14:03,760 --> 00:14:05,680
such a way that it

399
00:14:05,680 --> 00:14:08,399
will trigger on um the file access

400
00:14:08,399 --> 00:14:10,480
create and modify so we will use

401
00:14:10,480 --> 00:14:13,040
foundation monitoring to multiple files

402
00:14:13,040 --> 00:14:15,199
and if they match one of the rules

403
00:14:15,199 --> 00:14:16,639
we will get another we will get an event

404
00:14:16,639 --> 00:14:18,240
in osprey that we can look but with the

405
00:14:18,240 --> 00:14:19,600
query

406
00:14:19,600 --> 00:14:22,399
now as i said it worked with

407
00:14:22,399 --> 00:14:24,639
the create and modify file action

408
00:14:24,639 --> 00:14:27,120
during my research i found out that it

409
00:14:27,120 --> 00:14:29,440
doesn't trigger on a move to action but

410
00:14:29,440 --> 00:14:31,279
imagine you have a directory and you're

411
00:14:31,279 --> 00:14:32,720
monitoring that directory with your

412
00:14:32,720 --> 00:14:34,000
rules

413
00:14:34,000 --> 00:14:36,399
and only if files gets created or

414
00:14:36,399 --> 00:14:38,720
modified in a directory it will trigger

415
00:14:38,720 --> 00:14:41,760
a potential rule but what if

416
00:14:41,760 --> 00:14:43,839
and this

417
00:14:43,839 --> 00:14:45,760
copies a file or moves the file that

418
00:14:45,760 --> 00:14:48,240
directory and then launch it the rules

419
00:14:48,240 --> 00:14:50,240
would never catch it so

420
00:14:50,240 --> 00:14:51,600
i created a

421
00:14:51,600 --> 00:14:52,880
pull request

422
00:14:52,880 --> 00:14:55,279
which for the code for oscary to fix

423
00:14:55,279 --> 00:14:57,600
that and this was released recently in

424
00:14:57,600 --> 00:14:59,680
version 5.

425
00:14:59,680 --> 00:15:01,120
to quickly show you

426
00:15:01,120 --> 00:15:02,720
this is basically a screenshot of my

427
00:15:02,720 --> 00:15:04,800
pull request i showed that the change is

428
00:15:04,800 --> 00:15:06,720
quite trivial you originally they just

429
00:15:06,720 --> 00:15:08,639
checked at the file action see if the

430
00:15:08,639 --> 00:15:10,800
screen updated if it's not one of those

431
00:15:10,800 --> 00:15:11,760
actions

432
00:15:11,760 --> 00:15:13,920
it will say invalid action so basically

433
00:15:13,920 --> 00:15:16,160
to fix this we just have to move two

434
00:15:16,160 --> 00:15:17,839
action you have to add the move to

435
00:15:17,839 --> 00:15:20,320
action to that same line

436
00:15:20,320 --> 00:15:21,440
and then

437
00:15:21,440 --> 00:15:24,320
after that it works

438
00:15:24,320 --> 00:15:25,440
now

439
00:15:25,440 --> 00:15:28,079
what does yara rule look like

440
00:15:28,079 --> 00:15:30,160
this is basically a very simple url of

441
00:15:30,160 --> 00:15:33,360
roads to catch like a stager from the

442
00:15:33,360 --> 00:15:36,000
empire framework um basically they find

443
00:15:36,000 --> 00:15:38,720
two strings that are present that's in

444
00:15:38,720 --> 00:15:40,399
that kind of stager

445
00:15:40,399 --> 00:15:41,519
and

446
00:15:41,519 --> 00:15:43,600
um

447
00:15:43,600 --> 00:15:45,759
the condition is here that only if those

448
00:15:45,759 --> 00:15:48,480
two strings are present in that stager

449
00:15:48,480 --> 00:15:50,880
they should trigger the cr rule now

450
00:15:50,880 --> 00:15:52,839
how that

451
00:15:52,839 --> 00:15:56,160
work basically i totally are monitor my

452
00:15:56,160 --> 00:15:57,600
home directory

453
00:15:57,600 --> 00:15:58,880
um

454
00:15:58,880 --> 00:16:01,279
and use let's say the firewalls of which

455
00:16:01,279 --> 00:16:02,800
one of the arrows is the one i just

456
00:16:02,800 --> 00:16:04,480
showed you the example

457
00:16:04,480 --> 00:16:08,560
now if i copy or move create or modify a

458
00:16:08,560 --> 00:16:10,880
file that's in this case called about

459
00:16:10,880 --> 00:16:11,519
the

460
00:16:11,519 --> 00:16:14,399
bin which is a stator in the directory

461
00:16:14,399 --> 00:16:16,160
the arrow will see this and we'll

462
00:16:16,160 --> 00:16:19,920
trigger a vertical array event

463
00:16:19,920 --> 00:16:22,639
as a result we will be able to see this

464
00:16:22,639 --> 00:16:24,160
in osquery

465
00:16:24,160 --> 00:16:26,160
now this shows that i created in an

466
00:16:26,160 --> 00:16:28,720
update a file in directory we were

467
00:16:28,720 --> 00:16:29,839
monitoring

468
00:16:29,839 --> 00:16:31,600
as you can see this is an event driven

469
00:16:31,600 --> 00:16:34,880
table so basically disable only gets

470
00:16:34,880 --> 00:16:38,399
data or rows if an event happens

471
00:16:38,399 --> 00:16:39,600
now

472
00:16:39,600 --> 00:16:40,720
how would you

473
00:16:40,720 --> 00:16:43,440
make sure that um obesity then tells you

474
00:16:43,440 --> 00:16:45,040
something else in alerts that this

475
00:16:45,040 --> 00:16:47,680
happened can basically tell obesity to

476
00:16:47,680 --> 00:16:48,800
configure

477
00:16:48,800 --> 00:16:51,519
it describe television to schedule a

478
00:16:51,519 --> 00:16:53,360
query every 60 seconds or every five

479
00:16:53,360 --> 00:16:56,160
seconds even to create that table and

480
00:16:56,160 --> 00:16:58,320
the moment it sees a row it can save the

481
00:16:58,320 --> 00:17:00,560
log file for you and then for example

482
00:17:00,560 --> 00:17:03,440
elasticsearch or splunk folders get a

483
00:17:03,440 --> 00:17:05,439
monitor log file and it sees the new row

484
00:17:05,439 --> 00:17:09,199
it can put it into their systems as well

485
00:17:09,199 --> 00:17:11,039
now let's have a quick chat about file

486
00:17:11,039 --> 00:17:13,280
integrity monitoring

487
00:17:13,280 --> 00:17:14,640
foundation monitoring is quite a

488
00:17:14,640 --> 00:17:17,679
rudimentary and basic functionality that

489
00:17:17,679 --> 00:17:19,599
can be used to

490
00:17:19,599 --> 00:17:22,559
monitor directories and files

491
00:17:22,559 --> 00:17:23,439
um

492
00:17:23,439 --> 00:17:25,359
at any given point in time it can work

493
00:17:25,359 --> 00:17:27,199
recursively as well it's quite useful so

494
00:17:27,199 --> 00:17:29,520
for example the hotel it's

495
00:17:29,520 --> 00:17:32,400
directly and i add a special

496
00:17:32,400 --> 00:17:34,400
characteristics it's a monitor also

497
00:17:34,400 --> 00:17:36,480
directed as well

498
00:17:36,480 --> 00:17:38,160
now this implementation of faulting

499
00:17:38,160 --> 00:17:40,960
monitoring this also is a move too which

500
00:17:40,960 --> 00:17:42,799
basically tell us that yara rules or the

501
00:17:42,799 --> 00:17:44,640
er functionality has a different

502
00:17:44,640 --> 00:17:46,000
implementation for founding the

503
00:17:46,000 --> 00:17:47,440
monitoring

504
00:17:47,440 --> 00:17:51,280
then file integrity monitoring itself

505
00:17:51,919 --> 00:17:53,679
now how this works

506
00:17:53,679 --> 00:17:56,080
um

507
00:17:56,080 --> 00:17:58,720
i can for example say to file to a

508
00:17:58,720 --> 00:18:01,440
functionality like all the mac os

509
00:18:01,440 --> 00:18:03,520
monitor all large directories from all

510
00:18:03,520 --> 00:18:06,480
users so basically i tell

511
00:18:06,480 --> 00:18:07,679
osquery

512
00:18:07,679 --> 00:18:10,240
involve users go visit every single user

513
00:18:10,240 --> 00:18:12,400
and get the launch agent directory and

514
00:18:12,400 --> 00:18:15,039
monitor that um

515
00:18:15,039 --> 00:18:17,440
basically so if for example

516
00:18:17,440 --> 00:18:20,240
um a threat actor places a malicious

517
00:18:20,240 --> 00:18:22,799
large image file in a directory with any

518
00:18:22,799 --> 00:18:26,000
of our users we will know about it

519
00:18:26,000 --> 00:18:28,240
and this will appear then the file

520
00:18:28,240 --> 00:18:30,559
events table which i mentioned before

521
00:18:30,559 --> 00:18:32,559
uh which is event driven table and this

522
00:18:32,559 --> 00:18:35,280
is the potential might look like

523
00:18:35,280 --> 00:18:37,280
now

524
00:18:37,280 --> 00:18:39,120
how does this how does ob screen knows

525
00:18:39,120 --> 00:18:41,919
which is to the monitor that's quite

526
00:18:41,919 --> 00:18:43,440
easy so basically

527
00:18:43,440 --> 00:18:45,600
you tell in a configuration

528
00:18:45,600 --> 00:18:48,000
monitor this directory for me or this

529
00:18:48,000 --> 00:18:50,320
recursive recursive or not

530
00:18:50,320 --> 00:18:52,000
right in this case

531
00:18:52,000 --> 00:18:53,280
um

532
00:18:53,280 --> 00:18:54,480
i want

533
00:18:54,480 --> 00:18:56,960
obscurity to monitor my workspace launch

534
00:18:56,960 --> 00:19:00,640
agent directories and my temp folder

535
00:19:00,880 --> 00:19:03,919
now another i would like to go over is

536
00:19:03,919 --> 00:19:06,400
process events so as i mentioned before

537
00:19:06,400 --> 00:19:08,640
westfield has ability to monitor for

538
00:19:08,640 --> 00:19:11,280
plus events or pros in general

539
00:19:11,280 --> 00:19:14,559
we want to basically monitor executions

540
00:19:14,559 --> 00:19:16,480
on mac os we use

541
00:19:16,480 --> 00:19:18,400
input security framework

542
00:19:18,400 --> 00:19:20,960
and a linux berkeley packet filter as a

543
00:19:20,960 --> 00:19:22,240
backend for us

544
00:19:22,240 --> 00:19:24,240
freebsd is not supported yet but maybe

545
00:19:24,240 --> 00:19:26,000
in the future it will

546
00:19:26,000 --> 00:19:26,880
now

547
00:19:26,880 --> 00:19:29,200
this functionality allows us to monitor

548
00:19:29,200 --> 00:19:33,039
both parent and child processes

549
00:19:33,039 --> 00:19:35,039
now this can be quite powerful because

550
00:19:35,039 --> 00:19:38,400
you can see any action that did and

551
00:19:38,400 --> 00:19:40,799
stable let's say for example

552
00:19:40,799 --> 00:19:45,360
um your company or you is only macbase

553
00:19:45,360 --> 00:19:48,320
there are quite a few um

554
00:19:48,320 --> 00:19:50,720
mobile families or that actors that use

555
00:19:50,720 --> 00:19:53,600
osd scripts to live certain actions or

556
00:19:53,600 --> 00:19:56,080
to initially deploy a stager

557
00:19:56,080 --> 00:19:57,919
now obviously script is basically the

558
00:19:57,919 --> 00:20:00,320
macos equivalent of powershell so it's

559
00:20:00,320 --> 00:20:02,320
quite

560
00:20:02,320 --> 00:20:05,520
quite strong as well quite useful

561
00:20:05,520 --> 00:20:07,039
as an example

562
00:20:07,039 --> 00:20:09,039
there are two more families that i know

563
00:20:09,039 --> 00:20:11,440
of hidden lotus and empire who basically

564
00:20:11,440 --> 00:20:12,960
use osa scripts

565
00:20:12,960 --> 00:20:15,919
to to initially certain actions so if we

566
00:20:15,919 --> 00:20:17,760
monitor with process events

567
00:20:17,760 --> 00:20:19,919
for always execution they could

568
00:20:19,919 --> 00:20:21,200
potentially

569
00:20:21,200 --> 00:20:23,200
catch hit a lotus or limp ire or

570
00:20:23,200 --> 00:20:26,159
something else that uses that specific

571
00:20:26,159 --> 00:20:29,360
functionality in macovis

572
00:20:29,679 --> 00:20:32,400
now as examples mentioned before we can

573
00:20:32,400 --> 00:20:34,799
monitor for osa scripts now how to do

574
00:20:34,799 --> 00:20:37,120
that there are two ways

575
00:20:37,120 --> 00:20:39,919
um you can either schedule queries or

576
00:20:39,919 --> 00:20:42,159
manual queries so as mentioned before

577
00:20:42,159 --> 00:20:44,240
schedule creators can run every minute

578
00:20:44,240 --> 00:20:46,080
every hour every day or every second if

579
00:20:46,080 --> 00:20:47,120
you want to

580
00:20:47,120 --> 00:20:49,280
so if you want almost nearly real-time

581
00:20:49,280 --> 00:20:51,679
alerting with only a few seconds delay

582
00:20:51,679 --> 00:20:53,919
you would you would say i want to spread

583
00:20:53,919 --> 00:20:55,840
to them every single second

584
00:20:55,840 --> 00:20:57,840
put the data in a log file

585
00:20:57,840 --> 00:20:59,440
and then

586
00:20:59,440 --> 00:21:01,679
any other item can pick the log file and

587
00:21:01,679 --> 00:21:04,400
put those alerts or these events in a

588
00:21:04,400 --> 00:21:06,559
theme for example

589
00:21:06,559 --> 00:21:09,120
now if you see that os osa script is

590
00:21:09,120 --> 00:21:11,280
executed we can see the potential

591
00:21:11,280 --> 00:21:14,320
indicator of compromise

592
00:21:14,320 --> 00:21:16,400
now what configuration for the scheduled

593
00:21:16,400 --> 00:21:17,679
creator look like

594
00:21:17,679 --> 00:21:19,840
as i mentioned before a few times

595
00:21:19,840 --> 00:21:21,840
this example which um from s and for

596
00:21:21,840 --> 00:21:24,240
aussies

597
00:21:24,240 --> 00:21:26,640
basically tell here the

598
00:21:26,640 --> 00:21:29,520
we basically tell here obscuring to

599
00:21:29,520 --> 00:21:31,600
create a plus events table

600
00:21:31,600 --> 00:21:33,520
where the comment line contains the word

601
00:21:33,520 --> 00:21:35,919
of the character's osa

602
00:21:35,919 --> 00:21:38,159
because that's how you would

603
00:21:38,159 --> 00:21:38,960
launch

604
00:21:38,960 --> 00:21:40,159
that that's one of the base you would

605
00:21:40,159 --> 00:21:42,159
you would use to last oc script on the

606
00:21:42,159 --> 00:21:44,480
command line we tell it to you to do it

607
00:21:44,480 --> 00:21:46,960
every 60 seconds

608
00:21:46,960 --> 00:21:49,280
and the parameter removed false

609
00:21:49,280 --> 00:21:51,760
basically

610
00:21:51,919 --> 00:21:55,360
tells us to not

611
00:21:56,240 --> 00:21:58,960
removed if it's on false it tells to

612
00:21:58,960 --> 00:22:00,480
give us

613
00:22:00,480 --> 00:22:02,159
all data

614
00:22:02,159 --> 00:22:04,320
because if you use it to move through

615
00:22:04,320 --> 00:22:06,559
it will tell you or you should only give

616
00:22:06,559 --> 00:22:08,400
your results if the item is removed from

617
00:22:08,400 --> 00:22:10,960
the table again

618
00:22:11,120 --> 00:22:12,480
now

619
00:22:12,480 --> 00:22:14,159
this is how it would look like if you're

620
00:22:14,159 --> 00:22:16,400
married ready for um

621
00:22:16,400 --> 00:22:18,720
overseas execution instead of

622
00:22:18,720 --> 00:22:21,200
um with scheduled query with the basic

623
00:22:21,200 --> 00:22:22,000
or

624
00:22:22,000 --> 00:22:24,320
browse events table give me

625
00:22:24,320 --> 00:22:25,679
if you can

626
00:22:25,679 --> 00:22:27,039
where the command line completes your

627
00:22:27,039 --> 00:22:28,559
characters osa

628
00:22:28,559 --> 00:22:30,640
and that's the result it will show you

629
00:22:30,640 --> 00:22:33,600
except the plus id the path mode and

630
00:22:33,600 --> 00:22:35,520
also the parent process id which might

631
00:22:35,520 --> 00:22:37,360
be useful because then you know

632
00:22:37,360 --> 00:22:38,720
where is the comment coming from

633
00:22:38,720 --> 00:22:41,360
basically and that can be quite useful

634
00:22:41,360 --> 00:22:43,120
when you're doing instant management and

635
00:22:43,120 --> 00:22:46,080
instant response as well

636
00:22:46,240 --> 00:22:48,159
now one last example i want to talk

637
00:22:48,159 --> 00:22:50,720
about which um that can be useful with

638
00:22:50,720 --> 00:22:53,760
obesity is always grip the

639
00:22:53,760 --> 00:22:55,679
this can become quite powerful system is

640
00:22:55,679 --> 00:22:57,200
basically a

641
00:22:57,200 --> 00:22:59,280
windows system service and device driver

642
00:22:59,280 --> 00:23:03,039
that locks a monitor system activity

643
00:23:03,039 --> 00:23:05,360
it can do with that in a myriad of ways

644
00:23:05,360 --> 00:23:07,200
but some examples are a government for

645
00:23:07,200 --> 00:23:08,480
post injection

646
00:23:08,480 --> 00:23:10,000
grip and so on

647
00:23:10,000 --> 00:23:12,000
however i want to

648
00:23:12,000 --> 00:23:14,880
emphasize that with pros injection

649
00:23:14,880 --> 00:23:16,000
normally you would do that with for

650
00:23:16,000 --> 00:23:17,760
example create more threads or anything

651
00:23:17,760 --> 00:23:19,360
like that

652
00:23:19,360 --> 00:23:20,640
and that's when you attach it to

653
00:23:20,640 --> 00:23:22,240
interprocess

654
00:23:22,240 --> 00:23:26,159
but there are also ways to basically

655
00:23:26,159 --> 00:23:28,400
use an already existing thread you can

656
00:23:28,400 --> 00:23:31,360
do it by using user epc calls that said

657
00:23:31,360 --> 00:23:34,159
is something system cannot

658
00:23:34,159 --> 00:23:35,520
monitor yet

659
00:23:35,520 --> 00:23:36,960
hopefully later on the line they will be

660
00:23:36,960 --> 00:23:39,120
able to monitor that but it seems to be

661
00:23:39,120 --> 00:23:40,880
quite difficult

662
00:23:40,880 --> 00:23:44,880
now season is quite powerful because

663
00:23:45,520 --> 00:23:47,760
when you start it it stays

664
00:23:47,760 --> 00:23:49,760
active across reboots until you

665
00:23:49,760 --> 00:23:51,760
uninstall it again

666
00:23:51,760 --> 00:23:52,880
it's

667
00:23:52,880 --> 00:23:55,039
every item it finds while monitoring

668
00:23:55,039 --> 00:23:57,520
your system it saves it as events there

669
00:23:57,520 --> 00:23:59,760
is event launch under the channel

670
00:23:59,760 --> 00:24:03,679
microsecure system versus operational

671
00:24:03,679 --> 00:24:04,640
now

672
00:24:04,640 --> 00:24:06,240
why is this used with whiskery because

673
00:24:06,240 --> 00:24:07,919
risque can basically tap into a windows

674
00:24:07,919 --> 00:24:09,840
events block

675
00:24:09,840 --> 00:24:12,159
and so it can tap into the channel that

676
00:24:12,159 --> 00:24:13,760
system created

677
00:24:13,760 --> 00:24:15,360
now you can pull in all data from a

678
00:24:15,360 --> 00:24:17,600
channel put it in a table and parse the

679
00:24:17,600 --> 00:24:19,760
data in some ways

680
00:24:19,760 --> 00:24:21,200
now so basically you're you're telling

681
00:24:21,200 --> 00:24:23,360
your system one cycle of edr systems to

682
00:24:23,360 --> 00:24:24,799
move for quite a bit

683
00:24:24,799 --> 00:24:26,480
and then you combine overscreen and

684
00:24:26,480 --> 00:24:28,159
seasonal windows

685
00:24:28,159 --> 00:24:29,840
dominate it for a whole lot more that

686
00:24:29,840 --> 00:24:32,000
potentially your er system might miss

687
00:24:32,000 --> 00:24:34,159
idle

688
00:24:34,159 --> 00:24:35,600
now

689
00:24:35,600 --> 00:24:38,400
one example i could talk about for this

690
00:24:38,400 --> 00:24:39,760
is

691
00:24:39,760 --> 00:24:41,840
crate pipe so

692
00:24:41,840 --> 00:24:44,400
sisman can monitor for

693
00:24:44,400 --> 00:24:46,480
great vibe close pipe

694
00:24:46,480 --> 00:24:48,720
when they use named pipes

695
00:24:48,720 --> 00:24:52,880
one of the major c2 frameworks that uses

696
00:24:52,880 --> 00:24:55,440
bi functionality is global strike global

697
00:24:55,440 --> 00:24:57,279
strike uses named onion pipes and

698
00:24:57,279 --> 00:24:58,960
basically uses for communication between

699
00:24:58,960 --> 00:25:02,720
beacons and sacrificial processes

700
00:25:02,720 --> 00:25:05,039
an example the default cable strike

701
00:25:05,039 --> 00:25:06,799
pipeline the shell code basically

702
00:25:06,799 --> 00:25:08,480
started msse

703
00:25:08,480 --> 00:25:11,600
touch the numbered dash server

704
00:25:11,600 --> 00:25:13,200
good straight actors in goodread team

705
00:25:13,200 --> 00:25:15,520
returns basically change the default

706
00:25:15,520 --> 00:25:17,440
pipe names of their not easily

707
00:25:17,440 --> 00:25:19,679
recognizable as if you skip using

708
00:25:19,679 --> 00:25:22,240
default ones

709
00:25:22,240 --> 00:25:23,600
now what would this look like as a

710
00:25:23,600 --> 00:25:24,960
result

711
00:25:24,960 --> 00:25:27,039
this is now written

712
00:25:27,039 --> 00:25:29,679
with a manual query of schedule one

713
00:25:29,679 --> 00:25:31,360
and the great python

714
00:25:31,360 --> 00:25:34,000
event id is 17. so basically i tell

715
00:25:34,000 --> 00:25:36,080
what's clearly from all women's defense

716
00:25:36,080 --> 00:25:37,440
give me defense

717
00:25:37,440 --> 00:25:40,080
where even is 17 and for example that

718
00:25:40,080 --> 00:25:41,039
time

719
00:25:41,039 --> 00:25:43,120
and then it tells you the provider name

720
00:25:43,120 --> 00:25:44,799
which is sisman

721
00:25:44,799 --> 00:25:46,080
but since it came from so you know

722
00:25:46,080 --> 00:25:48,080
assistant look for if this is something

723
00:25:48,080 --> 00:25:48,960
bad

724
00:25:48,960 --> 00:25:50,799
and the data field is basically json

725
00:25:50,799 --> 00:25:53,200
block that tells you what's the pipe

726
00:25:53,200 --> 00:25:54,960
name

727
00:25:54,960 --> 00:25:57,279
from what process did it come from and

728
00:25:57,279 --> 00:26:00,400
what processes would it go to

729
00:26:00,400 --> 00:26:03,520
now another example is quite useful with

730
00:26:03,520 --> 00:26:04,880
cis1

731
00:26:04,880 --> 00:26:08,240
is uh cross injection so

732
00:26:08,240 --> 00:26:10,000
we've talked about the mythic framework

733
00:26:10,000 --> 00:26:10,880
before

734
00:26:10,880 --> 00:26:13,279
and one of the agents is the apollo

735
00:26:13,279 --> 00:26:15,440
agents basically asians

736
00:26:15,440 --> 00:26:18,880
uh created.net to run windows

737
00:26:18,880 --> 00:26:20,960
now the public agent uses process

738
00:26:20,960 --> 00:26:22,640
injection to execute

739
00:26:22,640 --> 00:26:25,279
millions of dollars for example let's

740
00:26:25,279 --> 00:26:27,679
say i want to take screenshots from the

741
00:26:27,679 --> 00:26:29,840
system i compromised

742
00:26:29,840 --> 00:26:31,520
then you can do that with

743
00:26:31,520 --> 00:26:33,600
the apollo agent now

744
00:26:33,600 --> 00:26:35,039
in this example

745
00:26:35,039 --> 00:26:37,600
i used for example apollo agents to

746
00:26:37,600 --> 00:26:39,600
inject myself in the toolbox

747
00:26:39,600 --> 00:26:41,600
binary which is from jetbrains and from

748
00:26:41,600 --> 00:26:44,959
there to experience it from a system

749
00:26:46,880 --> 00:26:47,760
now

750
00:26:47,760 --> 00:26:49,600
this what would look like

751
00:26:49,600 --> 00:26:51,679
if a query always carrion it tells me

752
00:26:51,679 --> 00:26:54,480
again what system is on what the source

753
00:26:54,480 --> 00:26:56,640
and the provider name was in the in the

754
00:26:56,640 --> 00:26:58,159
data blob

755
00:26:58,159 --> 00:27:00,080
even gives me the technique id which is

756
00:27:00,080 --> 00:27:02,080
three one zero of i five

757
00:27:02,080 --> 00:27:05,679
uh take name it tells me what process it

758
00:27:05,679 --> 00:27:09,760
injects itself in and what i tried to do

759
00:27:09,760 --> 00:27:11,679
now we've seen over square we've seen

760
00:27:11,679 --> 00:27:13,039
two frameworks

761
00:27:13,039 --> 00:27:15,440
and how you can use basically combined

762
00:27:15,440 --> 00:27:18,080
with other items maybe to try to catch

763
00:27:18,080 --> 00:27:20,640
bad guys or try to kick people out

764
00:27:20,640 --> 00:27:23,039
now what would your next step be

765
00:27:23,039 --> 00:27:24,960
from my opinion it would be alerting you

766
00:27:24,960 --> 00:27:27,840
want to be able to alert these events

767
00:27:27,840 --> 00:27:30,080
now

768
00:27:30,399 --> 00:27:32,240
other thing is mapping it at the next

769
00:27:32,240 --> 00:27:33,679
step because the text is only a small

770
00:27:33,679 --> 00:27:35,679
part you need to be able to empower your

771
00:27:35,679 --> 00:27:38,480
security teams and empower your uh your

772
00:27:38,480 --> 00:27:40,960
stock teams to be able to

773
00:27:40,960 --> 00:27:43,360
respond on these addictions

774
00:27:43,360 --> 00:27:46,320
so basically you would

775
00:27:46,399 --> 00:27:49,360
build a pipeline that allows you to

776
00:27:49,360 --> 00:27:50,399
um

777
00:27:50,399 --> 00:27:52,320
get these alerts as soon as possible

778
00:27:52,320 --> 00:27:54,320
they elicit these addictions so you can

779
00:27:54,320 --> 00:27:55,600
respond to them

780
00:27:55,600 --> 00:27:57,679
i'll show you a short example as well on

781
00:27:57,679 --> 00:28:01,520
how i would use that how i would do that

782
00:28:01,520 --> 00:28:03,039
now

783
00:28:03,039 --> 00:28:06,080
a learning pipeline architecture

784
00:28:06,080 --> 00:28:07,919
from my point of view

785
00:28:07,919 --> 00:28:09,600
keep it simple stupid don't make it too

786
00:28:09,600 --> 00:28:11,200
advanced don't make it too complicated

787
00:28:11,200 --> 00:28:13,360
but the more complicated you make it

788
00:28:13,360 --> 00:28:14,480
the more

789
00:28:14,480 --> 00:28:16,000
if cases can go wrong the more things

790
00:28:16,000 --> 00:28:17,200
can go wrong with the more things you

791
00:28:17,200 --> 00:28:19,120
might miss out on

792
00:28:19,120 --> 00:28:20,960
you could potentially get unwind

793
00:28:20,960 --> 00:28:23,039
unwanted side effects so a simple

794
00:28:23,039 --> 00:28:24,720
architecture will exist out of

795
00:28:24,720 --> 00:28:26,640
potentially four elements different

796
00:28:26,640 --> 00:28:28,320
endpoint which potentially a macbook

797
00:28:28,320 --> 00:28:30,960
means laptop your name is

798
00:28:30,960 --> 00:28:33,039
then you have a look for order which

799
00:28:33,039 --> 00:28:36,159
basically focus all locks for all

800
00:28:36,159 --> 00:28:37,679
findings from whiskey for example the

801
00:28:37,679 --> 00:28:40,559
endpoint to somewhere else

802
00:28:40,559 --> 00:28:42,000
then you have a scene when all that

803
00:28:42,000 --> 00:28:45,039
information is saved in and then you see

804
00:28:45,039 --> 00:28:46,720
potential consent alerts to several

805
00:28:46,720 --> 00:28:48,880
communication options

806
00:28:48,880 --> 00:28:52,480
now what would this look like in reality

807
00:28:52,480 --> 00:28:54,320
so this is a very rudimentary and simple

808
00:28:54,320 --> 00:28:55,679
pipeline

809
00:28:55,679 --> 00:28:58,320
from endpoint to alerting so we have an

810
00:28:58,320 --> 00:29:00,480
endpoint running with obvious query a

811
00:29:00,480 --> 00:29:02,720
splunk universal forwarder and a log

812
00:29:02,720 --> 00:29:04,960
file basically obviously it says all

813
00:29:04,960 --> 00:29:06,240
events

814
00:29:06,240 --> 00:29:09,200
that it has from scheduled credits in

815
00:29:09,200 --> 00:29:10,720
the log file

816
00:29:10,720 --> 00:29:12,720
now flick in the first of all with

817
00:29:12,720 --> 00:29:14,640
bonnet.log file

818
00:29:14,640 --> 00:29:15,440
and

819
00:29:15,440 --> 00:29:18,080
uh basically look if time is an event

820
00:29:18,080 --> 00:29:20,559
it will forward that event or that item

821
00:29:20,559 --> 00:29:22,799
that's most times adjacent objects to

822
00:29:22,799 --> 00:29:25,520
your splunk cluster splunk instance you

823
00:29:25,520 --> 00:29:27,039
name it

824
00:29:27,039 --> 00:29:30,320
um and then in on splint you can say

825
00:29:30,320 --> 00:29:31,679
um

826
00:29:31,679 --> 00:29:33,200
on the real time when a new event pops

827
00:29:33,200 --> 00:29:36,720
in and if it's um

828
00:29:36,880 --> 00:29:39,520
if it's uh through certain conditions

829
00:29:39,520 --> 00:29:42,399
this is another alert is from 360. page

830
00:29:42,399 --> 00:29:43,760
duty is like

831
00:29:43,760 --> 00:29:44,880
anything else

832
00:29:44,880 --> 00:29:47,919
phone email to alert your security teams

833
00:29:47,919 --> 00:29:50,640
to alert your stock analysts from here's

834
00:29:50,640 --> 00:29:52,480
something happening please respond to

835
00:29:52,480 --> 00:29:54,720
something happening at endpoints

836
00:29:54,720 --> 00:29:56,240
now

837
00:29:56,240 --> 00:29:57,440
we also we

838
00:29:57,440 --> 00:29:59,120
off we've now also seen alerting but

839
00:29:59,120 --> 00:30:01,200
that's what the next step be uh

840
00:30:01,200 --> 00:30:02,240
there's a

841
00:30:02,240 --> 00:30:04,799
new but i can't keep the block it's not

842
00:30:04,799 --> 00:30:06,640
um very common that people always do

843
00:30:06,640 --> 00:30:09,279
that it's getting coming more up and up

844
00:30:09,279 --> 00:30:12,720
the last two years and that is soar

845
00:30:12,720 --> 00:30:14,880
now soar stands for security

846
00:30:14,880 --> 00:30:17,840
orchestration automation response

847
00:30:17,840 --> 00:30:19,600
as you're going to see the name

848
00:30:19,600 --> 00:30:21,360
it relies on automation so we have

849
00:30:21,360 --> 00:30:23,600
automation automation automation you can

850
00:30:23,600 --> 00:30:25,520
do it with playbooks

851
00:30:25,520 --> 00:30:27,520
now there are quite a few solutions some

852
00:30:27,520 --> 00:30:28,880
of the known ones are phantom from

853
00:30:28,880 --> 00:30:32,320
splunk cortex alien vaults

854
00:30:32,320 --> 00:30:34,320
but what can sore actually

855
00:30:34,320 --> 00:30:37,440
do circa basically um

856
00:30:37,440 --> 00:30:40,000
do certain mundane tasks

857
00:30:40,000 --> 00:30:43,360
that's a quite boring thing for your um

858
00:30:43,360 --> 00:30:45,120
for the second teams so basically sword

859
00:30:45,120 --> 00:30:48,240
can help you to improve quality of life

860
00:30:48,240 --> 00:30:51,039
for your second teams and make sure that

861
00:30:51,039 --> 00:30:52,799
the second games don't get any alert

862
00:30:52,799 --> 00:30:55,039
fatigue because the more alerts they get

863
00:30:55,039 --> 00:30:56,480
in from addictions

864
00:30:56,480 --> 00:30:58,320
if it's to get into a match

865
00:30:58,320 --> 00:31:00,159
this will this have have a negative

866
00:31:00,159 --> 00:31:03,039
effect on your secops team

867
00:31:03,039 --> 00:31:04,399
mental state as well

868
00:31:04,399 --> 00:31:07,120
so basically store can help you

869
00:31:07,120 --> 00:31:10,720
now how it look like in practice

870
00:31:10,720 --> 00:31:12,399
basically yes a seam

871
00:31:12,399 --> 00:31:14,399
as explained here on the screen a seam

872
00:31:14,399 --> 00:31:16,480
that has all events i've seen before for

873
00:31:16,480 --> 00:31:18,799
example events from obviously from some

874
00:31:18,799 --> 00:31:20,559
grassroots something else

875
00:31:20,559 --> 00:31:23,039
and seeing instead of alerting on page

876
00:31:23,039 --> 00:31:24,960
duty and slack you can send those events

877
00:31:24,960 --> 00:31:26,480
to a store platform

878
00:31:26,480 --> 00:31:28,000
now store platform as many before has

879
00:31:28,000 --> 00:31:29,840
different playbooks let's say for

880
00:31:29,840 --> 00:31:33,519
example it has a playbook for uh

881
00:31:33,519 --> 00:31:34,720
fishing

882
00:31:34,720 --> 00:31:35,600
now

883
00:31:35,600 --> 00:31:36,880
a theme

884
00:31:36,880 --> 00:31:39,200
can i for example say here's a vent of

885
00:31:39,200 --> 00:31:41,600
even a fish another for example

886
00:31:41,600 --> 00:31:43,360
and then the supplement can look labeled

887
00:31:43,360 --> 00:31:46,399
for fishing after example uh look at the

888
00:31:46,399 --> 00:31:48,960
actual email run it um to a certain

889
00:31:48,960 --> 00:31:50,320
system to get that intelligence on

890
00:31:50,320 --> 00:31:52,720
potential items in that email and then

891
00:31:52,720 --> 00:31:55,039
do certain actions for example subatom

892
00:31:55,039 --> 00:31:56,000
can say

893
00:31:56,000 --> 00:31:58,000
okay this validates quite a few

894
00:31:58,000 --> 00:31:59,519
conditions

895
00:31:59,519 --> 00:32:01,039
i need to make sure that phishing from

896
00:32:01,039 --> 00:32:03,440
an email just cannot come cannot come in

897
00:32:03,440 --> 00:32:05,279
anymore so basically it's a platform can

898
00:32:05,279 --> 00:32:07,600
do quite a few actions that your second

899
00:32:07,600 --> 00:32:09,200
team can do as well

900
00:32:09,200 --> 00:32:12,399
another example let's say you have a

901
00:32:12,399 --> 00:32:14,640
windows device that is infected with

902
00:32:14,640 --> 00:32:16,159
ransomware of course you want to stop

903
00:32:16,159 --> 00:32:17,919
that one somewhere from breaking out all

904
00:32:17,919 --> 00:32:20,000
the devices as well so basically a

905
00:32:20,000 --> 00:32:22,720
single c detection since event store and

906
00:32:22,720 --> 00:32:24,480
so platform based on playbook can then

907
00:32:24,480 --> 00:32:26,799
for example say to your system

908
00:32:26,799 --> 00:32:28,640
automatically and directly isolate

909
00:32:28,640 --> 00:32:30,080
infected device

910
00:32:30,080 --> 00:32:31,919
this will help you prevent from the

911
00:32:31,919 --> 00:32:34,559
infection for spreading

912
00:32:34,559 --> 00:32:36,480
and like this

913
00:32:36,480 --> 00:32:38,320
it's already isolated and then your

914
00:32:38,320 --> 00:32:39,840
stick-up stream can potentially look at

915
00:32:39,840 --> 00:32:42,240
it and do in response on a specific

916
00:32:42,240 --> 00:32:43,600
device

917
00:32:43,600 --> 00:32:45,679
now the other functionalities and

918
00:32:45,679 --> 00:32:47,600
possibilities of using sword in the

919
00:32:47,600 --> 00:32:48,559
future

920
00:32:48,559 --> 00:32:50,399
these are just a few items but i think

921
00:32:50,399 --> 00:32:51,760
sword is definitely

922
00:32:51,760 --> 00:32:54,559
something that every good

923
00:32:54,559 --> 00:32:56,640
sock team a sock

924
00:32:56,640 --> 00:32:58,799
should have to be able to improve the

925
00:32:58,799 --> 00:33:00,320
quality of life for your analysts and

926
00:33:00,320 --> 00:33:03,519
your security operations teams

927
00:33:03,519 --> 00:33:04,640
now

928
00:33:04,640 --> 00:33:06,880
because so today we've seen uh what is

929
00:33:06,880 --> 00:33:10,159
westgary c2 frameworks eats alerting

930
00:33:10,159 --> 00:33:11,200
store

931
00:33:11,200 --> 00:33:14,320
i hope you all learned a bit

932
00:33:14,320 --> 00:33:16,159
i will gladly share i will gladly share

933
00:33:16,159 --> 00:33:17,519
my slides

934
00:33:17,519 --> 00:33:19,120
the next week on github or and on

935
00:33:19,120 --> 00:33:20,960
twitter as well and thank you all for

936
00:33:20,960 --> 00:33:22,000
listening

937
00:33:22,000 --> 00:33:23,279
now

938
00:33:23,279 --> 00:33:25,440
this is also the resource i used in case

939
00:33:25,440 --> 00:33:26,960
you want to look at how i did some of my

940
00:33:26,960 --> 00:33:28,559
research as well

941
00:33:28,559 --> 00:33:31,799
thank you everyone

