1
00:00:00,160 --> 00:00:01,360
so um

2
00:00:01,360 --> 00:00:04,000
ayush actually spoke at beer con 2 kind

3
00:00:04,000 --> 00:00:07,440
of similar to dan and josh and nicolas

4
00:00:07,440 --> 00:00:09,200
and will from earlier

5
00:00:09,200 --> 00:00:10,080
um

6
00:00:10,080 --> 00:00:11,759
i'm really looking forward to this talk

7
00:00:11,759 --> 00:00:13,679
i used do you want to spin up your

8
00:00:13,679 --> 00:00:15,679
slides yeah

9
00:00:15,679 --> 00:00:18,000
cool so yeah ayush is going to be

10
00:00:18,000 --> 00:00:20,080
talking to us about automation

11
00:00:20,080 --> 00:00:22,080
and application security

12
00:00:22,080 --> 00:00:24,880
security i need to put my teeth back in

13
00:00:24,880 --> 00:00:26,240
i haven't been drinking

14
00:00:26,240 --> 00:00:28,720
not neat vodka

15
00:00:28,720 --> 00:00:30,320
but no i'm really really looking forward

16
00:00:30,320 --> 00:00:33,280
to this talk ayush take away men thanks

17
00:00:33,280 --> 00:00:36,399
thanks guys uh hey everyone so i'll be

18
00:00:36,399 --> 00:00:38,239
talking about automating application

19
00:00:38,239 --> 00:00:40,160
security today

20
00:00:40,160 --> 00:00:42,960
i am ayush i work as a

21
00:00:42,960 --> 00:00:45,280
cloud security specialist engineer at

22
00:00:45,280 --> 00:00:46,320
saudl

23
00:00:46,320 --> 00:00:48,079
uh i've spoken at a bunch of other

24
00:00:48,079 --> 00:00:50,399
conferences so beer con 2 was the first

25
00:00:50,399 --> 00:00:53,199
one and uh post that i've like tried to

26
00:00:53,199 --> 00:00:55,039
keep going and like present at other

27
00:00:55,039 --> 00:00:56,879
conferences as well most recently we

28
00:00:56,879 --> 00:00:58,399
said since here

29
00:00:58,399 --> 00:01:00,879
and in my free time i've been

30
00:01:00,879 --> 00:01:03,600
volunteering as a chapter lead at ovas

31
00:01:03,600 --> 00:01:06,000
branches

32
00:01:06,159 --> 00:01:09,600
so uh what lies ahead right i will try

33
00:01:09,600 --> 00:01:12,640
to like answer the answer a few

34
00:01:12,640 --> 00:01:14,560
questions essentially to get to what we

35
00:01:14,560 --> 00:01:16,080
are like looking forward to in this talk

36
00:01:16,080 --> 00:01:17,759
is to essentially automate uh

37
00:01:17,759 --> 00:01:19,439
application security so we'll begin with

38
00:01:19,439 --> 00:01:21,200
like what is application security in the

39
00:01:21,200 --> 00:01:22,400
first place

40
00:01:22,400 --> 00:01:24,400
uh because it's like a really old realm

41
00:01:24,400 --> 00:01:26,560
in forsec itself so we'll take a look at

42
00:01:26,560 --> 00:01:28,240
what has changed in application security

43
00:01:28,240 --> 00:01:30,320
over the years and how do we utilize

44
00:01:30,320 --> 00:01:32,560
these changes towards our goal is uh

45
00:01:32,560 --> 00:01:34,720
that is for automation right we'll take

46
00:01:34,720 --> 00:01:36,960
a look at a small demonstration about

47
00:01:36,960 --> 00:01:39,520
how we can do like small

48
00:01:39,520 --> 00:01:41,680
nuclear tasks going about putting in

49
00:01:41,680 --> 00:01:43,360
security processes into like an

50
00:01:43,360 --> 00:01:45,119
automated workflow

51
00:01:45,119 --> 00:01:46,000
and

52
00:01:46,000 --> 00:01:47,680
then we'll answer a few questions that

53
00:01:47,680 --> 00:01:50,560
might come to your mind uh during or

54
00:01:50,560 --> 00:01:53,040
like post the course of this talk so why

55
00:01:53,040 --> 00:01:54,640
would we want to change what already

56
00:01:54,640 --> 00:01:56,719
works for you folks and uh

57
00:01:56,719 --> 00:01:58,880
why what you can and cannot automate and

58
00:01:58,880 --> 00:02:00,640
finally we'll just draw some conclusions

59
00:02:00,640 --> 00:02:03,200
that will come at the end of it

60
00:02:03,200 --> 00:02:05,439
so what is application security this is

61
00:02:05,439 --> 00:02:07,520
the wikipedia definition so but in

62
00:02:07,520 --> 00:02:10,239
simpler terms any process or any action

63
00:02:10,239 --> 00:02:11,200
taken

64
00:02:11,200 --> 00:02:13,200
that improves the security posture of

65
00:02:13,200 --> 00:02:15,200
your application or products essentially

66
00:02:15,200 --> 00:02:17,360
by various methods right so

67
00:02:17,360 --> 00:02:19,040
the definition defines finding fixing

68
00:02:19,040 --> 00:02:21,840
and preventing so any of these things

69
00:02:21,840 --> 00:02:24,959
essentially is application security and

70
00:02:24,959 --> 00:02:27,440
it can be put in in different stages of

71
00:02:27,440 --> 00:02:29,280
the hdlc or software development life

72
00:02:29,280 --> 00:02:31,360
cycle so it could be as early as the

73
00:02:31,360 --> 00:02:33,200
design phase or as

74
00:02:33,200 --> 00:02:35,519
late as the maintenance or upgrade phase

75
00:02:35,519 --> 00:02:38,560
and it's mostly prevalent during uh like

76
00:02:38,560 --> 00:02:40,080
the development and deployment stages

77
00:02:40,080 --> 00:02:42,400
because fan testing right so that's

78
00:02:42,400 --> 00:02:44,319
where it typically happens

79
00:02:44,319 --> 00:02:45,599
so

80
00:02:45,599 --> 00:02:47,200
essentially uh

81
00:02:47,200 --> 00:02:48,800
we are developing preventive measures

82
00:02:48,800 --> 00:02:50,879
application security is uh the

83
00:02:50,879 --> 00:02:52,640
development of preventive images i say

84
00:02:52,640 --> 00:02:55,120
preventive because ideally if you have

85
00:02:55,120 --> 00:02:57,040
figured something out that's that's

86
00:02:57,040 --> 00:02:59,440
wrong in the aspect of security we would

87
00:02:59,440 --> 00:03:01,040
want to prevent it from happening again

88
00:03:01,040 --> 00:03:03,519
instead of having to like fix it every

89
00:03:03,519 --> 00:03:04,480
single time

90
00:03:04,480 --> 00:03:06,959
so developing preventive measures uh can

91
00:03:06,959 --> 00:03:08,239
be included in various stages of

92
00:03:08,239 --> 00:03:10,159
software development life cycle so again

93
00:03:10,159 --> 00:03:12,480
uh because we can think of security

94
00:03:12,480 --> 00:03:14,159
issues as early as the design stage

95
00:03:14,159 --> 00:03:15,440
right we could take a look at an

96
00:03:15,440 --> 00:03:16,959
architect architectural diagram and

97
00:03:16,959 --> 00:03:19,360
figure out if something could go wrong

98
00:03:19,360 --> 00:03:20,720
here so

99
00:03:20,720 --> 00:03:22,400
we could put in prevent preventive

100
00:03:22,400 --> 00:03:24,799
measures then and there itself so

101
00:03:24,799 --> 00:03:27,200
uh the various stages of hdlc

102
00:03:27,200 --> 00:03:29,360
it's a crucial aspect of security

103
00:03:29,360 --> 00:03:31,120
by the virtue of that most of the things

104
00:03:31,120 --> 00:03:32,959
that we do protect in security are

105
00:03:32,959 --> 00:03:35,360
applications in one way or another right

106
00:03:35,360 --> 00:03:37,440
if you take out applications there's not

107
00:03:37,440 --> 00:03:39,920
a lot of things left to protect so it's

108
00:03:39,920 --> 00:03:42,560
a obviously crucial and uh according to

109
00:03:42,560 --> 00:03:45,120
me again the idea is to or the goal is

110
00:03:45,120 --> 00:03:47,200
to maintain the cia trial which is

111
00:03:47,200 --> 00:03:48,640
confidentiality integrity and

112
00:03:48,640 --> 00:03:50,080
availability

113
00:03:50,080 --> 00:03:51,040
so

114
00:03:51,040 --> 00:03:53,360
a security issue essentially

115
00:03:53,360 --> 00:03:55,920
violates one or more of these three

116
00:03:55,920 --> 00:03:58,080
characteristics and the

117
00:03:58,080 --> 00:03:59,840
fundamental goal of application security

118
00:03:59,840 --> 00:04:02,319
is to prevent that from happening

119
00:04:02,319 --> 00:04:05,120
so some examples of application security

120
00:04:05,120 --> 00:04:06,799
would be let's say static application

121
00:04:06,799 --> 00:04:10,640
security testing or dynamic est or dst

122
00:04:10,640 --> 00:04:11,439
say

123
00:04:11,439 --> 00:04:14,480
for instance sast is essentially where

124
00:04:14,480 --> 00:04:18,000
we have a bunch of known bad coding

125
00:04:18,000 --> 00:04:19,358
patterns

126
00:04:19,358 --> 00:04:21,279
so if you're familiar with python

127
00:04:21,279 --> 00:04:23,199
there's a function called eval where you

128
00:04:23,199 --> 00:04:25,040
can just put python code as a string and

129
00:04:25,040 --> 00:04:27,440
it will allow you to execute that right

130
00:04:27,440 --> 00:04:29,600
now in in the case of a user control

131
00:04:29,600 --> 00:04:32,320
string that is like a potential bad case

132
00:04:32,320 --> 00:04:35,440
where uh an attacker would like inject

133
00:04:35,440 --> 00:04:36,560
some code

134
00:04:36,560 --> 00:04:38,479
that would do something something bad

135
00:04:38,479 --> 00:04:39,600
essentially

136
00:04:39,600 --> 00:04:42,720
so yeah that's ssd but uh because we

137
00:04:42,720 --> 00:04:44,800
have like known of this we know of this

138
00:04:44,800 --> 00:04:46,639
pattern that it exists right now so we

139
00:04:46,639 --> 00:04:48,479
could like check for it before we like

140
00:04:48,479 --> 00:04:50,160
let's say push our phone to deployment

141
00:04:50,160 --> 00:04:52,160
or like to package it and then send it

142
00:04:52,160 --> 00:04:53,600
off to wherever wherever it's supposed

143
00:04:53,600 --> 00:04:54,560
to go

144
00:04:54,560 --> 00:04:56,160
so we have different kinds of these

145
00:04:56,160 --> 00:04:57,919
tests that are there or really fall

146
00:04:57,919 --> 00:04:59,360
under the umbrella of application

147
00:04:59,360 --> 00:05:01,199
security

148
00:05:01,199 --> 00:05:02,000
now

149
00:05:02,000 --> 00:05:03,759
what has changed so

150
00:05:03,759 --> 00:05:06,639
application security is almost as old as

151
00:05:06,639 --> 00:05:08,400
the security industry itself because

152
00:05:08,400 --> 00:05:09,759
that's what we're protecting right

153
00:05:09,759 --> 00:05:11,199
different kinds of applications in in

154
00:05:11,199 --> 00:05:12,720
their various forms

155
00:05:12,720 --> 00:05:14,639
so uh what has happened that we have

156
00:05:14,639 --> 00:05:17,919
like decades worth of experiences of uh

157
00:05:17,919 --> 00:05:20,560
figuring out these bugs

158
00:05:20,560 --> 00:05:22,479
exploiting them and also preventing them

159
00:05:22,479 --> 00:05:24,000
from happening or defending against them

160
00:05:24,000 --> 00:05:25,840
is at least right

161
00:05:25,840 --> 00:05:27,039
so

162
00:05:27,039 --> 00:05:28,960
at the current stage that we are at we

163
00:05:28,960 --> 00:05:30,880
have been able to consolidate all of

164
00:05:30,880 --> 00:05:32,880
these experience that we have had over

165
00:05:32,880 --> 00:05:34,560
the years through research or like

166
00:05:34,560 --> 00:05:36,720
through different kinds of uh

167
00:05:36,720 --> 00:05:37,600
ways

168
00:05:37,600 --> 00:05:39,919
into databases so we have nvd we have

169
00:05:39,919 --> 00:05:42,720
like a database of cvs and everything so

170
00:05:42,720 --> 00:05:44,560
what this allows us to do is like

171
00:05:44,560 --> 00:05:46,000
classify these vulnerabilities or

172
00:05:46,000 --> 00:05:48,000
security issues that we've collected in

173
00:05:48,000 --> 00:05:49,600
different forms right

174
00:05:49,600 --> 00:05:51,840
and thus comes classification so we can

175
00:05:51,840 --> 00:05:53,840
classify them on different basis based

176
00:05:53,840 --> 00:05:55,520
on the characteristic that that we

177
00:05:55,520 --> 00:05:57,440
choose to classify them on for example

178
00:05:57,440 --> 00:06:00,080
one could be severity so an rc would be

179
00:06:00,080 --> 00:06:03,120
like a very severe work but a dangling

180
00:06:03,120 --> 00:06:05,919
s3 bucket name or a domain pointing to

181
00:06:05,919 --> 00:06:07,919
an s3 bucket might not might not be like

182
00:06:07,919 --> 00:06:09,840
a high or critical severity depending on

183
00:06:09,840 --> 00:06:11,280
the context obviously but for the

184
00:06:11,280 --> 00:06:13,440
instance let's say so

185
00:06:13,440 --> 00:06:15,520
and there could be another case where we

186
00:06:15,520 --> 00:06:18,319
classify them together as the same class

187
00:06:18,319 --> 00:06:20,560
of bugs but different uh

188
00:06:20,560 --> 00:06:22,319
different aspects like different still

189
00:06:22,319 --> 00:06:24,319
differentiate them in between

190
00:06:24,319 --> 00:06:26,240
so we could have excesses but excesses

191
00:06:26,240 --> 00:06:28,400
could be further divided into self uh

192
00:06:28,400 --> 00:06:30,319
stored and reflected right so all of

193
00:06:30,319 --> 00:06:31,199
these still fall under the

194
00:06:31,199 --> 00:06:33,759
classification of xss bugs but then they

195
00:06:33,759 --> 00:06:35,280
are still different based on their

196
00:06:35,280 --> 00:06:38,080
specific characteristics for them to be

197
00:06:38,080 --> 00:06:40,319
segregated on whether it's like a stored

198
00:06:40,319 --> 00:06:43,280
xss or reflected excesses and whatnot

199
00:06:43,280 --> 00:06:46,319
and once we have been once we have

200
00:06:46,319 --> 00:06:47,680
classified them based on these

201
00:06:47,680 --> 00:06:49,759
characteristics the same characteristics

202
00:06:49,759 --> 00:06:51,599
can be used to like standardize

203
00:06:51,599 --> 00:06:53,599
standardized testing procedures for them

204
00:06:53,599 --> 00:06:54,400
right

205
00:06:54,400 --> 00:06:56,960
so for the most vanilla case that most

206
00:06:56,960 --> 00:06:58,800
people would come through into the

207
00:06:58,800 --> 00:07:00,639
synchronous trace like exploiting sql

208
00:07:00,639 --> 00:07:04,080
injection for example and the most uh

209
00:07:04,080 --> 00:07:06,240
simple thing that most blogs or any

210
00:07:06,240 --> 00:07:07,599
starter

211
00:07:07,599 --> 00:07:09,440
post about sql injection would be to

212
00:07:09,440 --> 00:07:11,840
like add a single code to the end of a

213
00:07:11,840 --> 00:07:13,520
parameter right at the end of our

214
00:07:13,520 --> 00:07:15,840
address url or something like that and

215
00:07:15,840 --> 00:07:17,759
if it throws you back an error saying

216
00:07:17,759 --> 00:07:20,160
sql or some some sort of an error you

217
00:07:20,160 --> 00:07:23,199
have potentially found an sql injection

218
00:07:23,199 --> 00:07:25,919
now this is a we can characterize this

219
00:07:25,919 --> 00:07:29,199
as the simplest uh way to figure out if

220
00:07:29,199 --> 00:07:32,400
we have a potential uh sql injection on

221
00:07:32,400 --> 00:07:35,280
our hands or not right so this is the

222
00:07:35,280 --> 00:07:36,639
standardization of testing procedures

223
00:07:36,639 --> 00:07:38,479
obviously it's not as simple as just

224
00:07:38,479 --> 00:07:40,319
adding that single quote at the end

225
00:07:40,319 --> 00:07:41,680
right now it's it's way more

226
00:07:41,680 --> 00:07:43,360
comprehensive and

227
00:07:43,360 --> 00:07:45,759
because of that we have now two we with

228
00:07:45,759 --> 00:07:47,440
our ourselves have like tools and

229
00:07:47,440 --> 00:07:50,160
frameworks to do this for us so we have

230
00:07:50,160 --> 00:07:51,599
uh again coming back to the scale

231
00:07:51,599 --> 00:07:53,360
injection example we have a sql map with

232
00:07:53,360 --> 00:07:54,879
us which is i guess the most

233
00:07:54,879 --> 00:07:56,400
comprehensive tool you can use to like

234
00:07:56,400 --> 00:07:58,800
check for sql injections

235
00:07:58,800 --> 00:08:00,720
right then we have sneak which is even

236
00:08:00,720 --> 00:08:02,400
like a step further you can integrate it

237
00:08:02,400 --> 00:08:03,840
directly with your repositories on

238
00:08:03,840 --> 00:08:06,000
github and other places and

239
00:08:06,000 --> 00:08:08,160
your alerts get sent to your email and

240
00:08:08,160 --> 00:08:10,240
your slack or whatever where you want to

241
00:08:10,240 --> 00:08:11,199
have them

242
00:08:11,199 --> 00:08:13,120
and lastly the advent of devsecops

243
00:08:13,120 --> 00:08:15,520
itself right so devops is relatively new

244
00:08:15,520 --> 00:08:18,000
itself and then defs of devsecops is its

245
00:08:18,000 --> 00:08:21,840
even newer cousin but the idea is to

246
00:08:21,840 --> 00:08:24,000
shift security to the left

247
00:08:24,000 --> 00:08:26,479
which is to push security and security

248
00:08:26,479 --> 00:08:29,039
processes as further uh

249
00:08:29,039 --> 00:08:31,120
like on on the left side of software

250
00:08:31,120 --> 00:08:32,719
development lifecycle or as early in the

251
00:08:32,719 --> 00:08:34,559
software development life cycle

252
00:08:34,559 --> 00:08:36,640
to essentially like prevent

253
00:08:36,640 --> 00:08:38,320
uh for the most part i think from a

254
00:08:38,320 --> 00:08:40,240
business point of view to like safe cost

255
00:08:40,240 --> 00:08:42,240
because fixing uh security about post

256
00:08:42,240 --> 00:08:43,919
development or deployment is obviously

257
00:08:43,919 --> 00:08:46,480
high much higher than it would have been

258
00:08:46,480 --> 00:08:47,279
uh

259
00:08:47,279 --> 00:08:48,880
or during development or even in the

260
00:08:48,880 --> 00:08:50,399
architectural phase right so something

261
00:08:50,399 --> 00:08:52,080
like that

262
00:08:52,080 --> 00:08:53,120
so

263
00:08:53,120 --> 00:08:55,200
coming to how do we utilize these

264
00:08:55,200 --> 00:08:56,800
changes so we have figured out a bunch

265
00:08:56,800 --> 00:08:58,560
of these things that we just took a look

266
00:08:58,560 --> 00:09:00,480
at the last slide

267
00:09:00,480 --> 00:09:03,200
so uh how do we go about actually

268
00:09:03,200 --> 00:09:05,040
automating a process right or how do we

269
00:09:05,040 --> 00:09:06,480
start with it so

270
00:09:06,480 --> 00:09:09,279
i my personal suggestion is to like pick

271
00:09:09,279 --> 00:09:11,920
a single scenario right a single

272
00:09:11,920 --> 00:09:13,920
scenario i mean

273
00:09:13,920 --> 00:09:16,000
a single particular case or security

274
00:09:16,000 --> 00:09:17,839
issue that you want to tackle right now

275
00:09:17,839 --> 00:09:19,920
perhaps is the most prevalent in your

276
00:09:19,920 --> 00:09:22,480
case and understand the context of it by

277
00:09:22,480 --> 00:09:25,279
context i mean whether it actually uh is

278
00:09:25,279 --> 00:09:27,760
a security issue uh depending upon your

279
00:09:27,760 --> 00:09:29,040
product where it's supposed to be

280
00:09:29,040 --> 00:09:31,440
shipped uh is it if it's an internal

281
00:09:31,440 --> 00:09:33,360
product or something like that

282
00:09:33,360 --> 00:09:34,560
and then

283
00:09:34,560 --> 00:09:36,800
create a standard process for it right

284
00:09:36,800 --> 00:09:37,680
so

285
00:09:37,680 --> 00:09:39,519
if it's it was an sql injection that i

286
00:09:39,519 --> 00:09:41,360
was testing for and the most vanilla

287
00:09:41,360 --> 00:09:44,240
case at that uh the process i would fall

288
00:09:44,240 --> 00:09:45,760
back on again was the fact that i'll

289
00:09:45,760 --> 00:09:47,760
just i'll just want to add the single

290
00:09:47,760 --> 00:09:49,360
quote at the end of the url at the end

291
00:09:49,360 --> 00:09:50,880
of a parameter

292
00:09:50,880 --> 00:09:53,040
and if it throws back an error it

293
00:09:53,040 --> 00:09:55,440
essentially i would assume that it's a

294
00:09:55,440 --> 00:09:57,120
sql injection right

295
00:09:57,120 --> 00:09:59,440
and once i've actually created that

296
00:09:59,440 --> 00:10:01,040
process i would want to test that

297
00:10:01,040 --> 00:10:03,200
process instead of having like wasted

298
00:10:03,200 --> 00:10:05,120
time to automate it and then find it not

299
00:10:05,120 --> 00:10:07,360
working at all so after creating the

300
00:10:07,360 --> 00:10:09,040
processes we want to test the processes

301
00:10:09,040 --> 00:10:11,839
to like save away all assumptions or

302
00:10:11,839 --> 00:10:12,880
anything

303
00:10:12,880 --> 00:10:14,800
any cases that we might have missed and

304
00:10:14,800 --> 00:10:17,279
essentially making the most uh the

305
00:10:17,279 --> 00:10:18,800
standard process that

306
00:10:18,800 --> 00:10:20,480
we want to essentially automate at the

307
00:10:20,480 --> 00:10:23,040
end of it more robust right

308
00:10:23,040 --> 00:10:24,720
once you have done that we have tested

309
00:10:24,720 --> 00:10:26,480
the process that it actually works we

310
00:10:26,480 --> 00:10:30,320
can automate now automation can be done

311
00:10:30,320 --> 00:10:32,560
by various means so you could use dash

312
00:10:32,560 --> 00:10:34,880
you could use python you could use tools

313
00:10:34,880 --> 00:10:37,600
frameworks and everything in between uh

314
00:10:37,600 --> 00:10:39,120
whatever

315
00:10:39,120 --> 00:10:41,279
feels most comfortable for you to work

316
00:10:41,279 --> 00:10:44,320
with and is ideal for the scenario

317
00:10:44,320 --> 00:10:46,640
and once you have done that then we can

318
00:10:46,640 --> 00:10:48,240
move on to the next scenario so i

319
00:10:48,240 --> 00:10:50,720
suggest like going uh more of a breath

320
00:10:50,720 --> 00:10:52,880
first approach instead of depth first

321
00:10:52,880 --> 00:10:55,519
like uh trying to automate a process end

322
00:10:55,519 --> 00:10:57,040
to end

323
00:10:57,040 --> 00:10:58,640
might become a very challenging thing

324
00:10:58,640 --> 00:11:00,079
because a lot of these processes

325
00:11:00,079 --> 00:11:02,000
especially in security might require

326
00:11:02,000 --> 00:11:03,040
manual

327
00:11:03,040 --> 00:11:04,880
steps or analysis right like to look

328
00:11:04,880 --> 00:11:06,640
through a report or find uh false

329
00:11:06,640 --> 00:11:09,120
positives that are computers or like

330
00:11:09,120 --> 00:11:10,959
algorithms can't yet

331
00:11:10,959 --> 00:11:12,640
we'll talk a little bit more about in

332
00:11:12,640 --> 00:11:13,920
detail about these particular

333
00:11:13,920 --> 00:11:16,079
limitations later but uh yeah that's how

334
00:11:16,079 --> 00:11:18,160
you want to go about doing this so like

335
00:11:18,160 --> 00:11:20,720
pick a process create a process for uh

336
00:11:20,720 --> 00:11:22,959
sorry pick a scenario that you want to

337
00:11:22,959 --> 00:11:24,959
like create a security process around

338
00:11:24,959 --> 00:11:27,120
create the standard procedure for it

339
00:11:27,120 --> 00:11:28,880
tested procedure automate and then move

340
00:11:28,880 --> 00:11:31,600
on to the next one

341
00:11:31,600 --> 00:11:34,160
so i'll show you a quick demonstration

342
00:11:34,160 --> 00:11:36,000
of

343
00:11:36,000 --> 00:11:37,360
something that you can do with github

344
00:11:37,360 --> 00:11:39,600
workflows

345
00:11:39,600 --> 00:11:41,279
these are simple yaml files that you

346
00:11:41,279 --> 00:11:43,600
could write your uh scripts essentially

347
00:11:43,600 --> 00:11:45,519
in the aml format

348
00:11:45,519 --> 00:11:46,480
and

349
00:11:46,480 --> 00:11:47,920
they'll do a bunch of things for you so

350
00:11:47,920 --> 00:11:49,760
this particular script

351
00:11:49,760 --> 00:11:52,880
30 line sorry 36 or so lines is simple

352
00:11:52,880 --> 00:11:54,720
enough so there are three stages you

353
00:11:54,720 --> 00:11:56,079
don't need to worry about the amulet at

354
00:11:56,079 --> 00:11:56,880
all

355
00:11:56,880 --> 00:11:58,399
it's fairly simple to pick up and most

356
00:11:58,399 --> 00:12:00,639
of these are just batch commands put in

357
00:12:00,639 --> 00:12:02,639
the syntax that github workflows require

358
00:12:02,639 --> 00:12:04,160
them to be in

359
00:12:04,160 --> 00:12:06,399
so i installed git secrets this which is

360
00:12:06,399 --> 00:12:07,680
a tool that

361
00:12:07,680 --> 00:12:09,360
check for regular expression patterns

362
00:12:09,360 --> 00:12:11,040
that you provided

363
00:12:11,040 --> 00:12:13,680
and finds them in your

364
00:12:13,680 --> 00:12:15,839
commit history essentially to figure out

365
00:12:15,839 --> 00:12:17,839
if there are any secrets

366
00:12:17,839 --> 00:12:19,279
or

367
00:12:19,279 --> 00:12:21,040
confidential information that you have

368
00:12:21,040 --> 00:12:23,200
might have committed to your code right

369
00:12:23,200 --> 00:12:25,760
so i install git secrets run a scan with

370
00:12:25,760 --> 00:12:27,760
it and then upload an artifact the

371
00:12:27,760 --> 00:12:29,519
report has an artifact of github itself

372
00:12:29,519 --> 00:12:33,200
now github workflows is really cool with

373
00:12:33,200 --> 00:12:35,279
something like this is because

374
00:12:35,279 --> 00:12:36,720
it gives you a lot of functionality out

375
00:12:36,720 --> 00:12:39,440
of the box and for free now obviously

376
00:12:39,440 --> 00:12:42,000
the limits are based on the tier that

377
00:12:42,000 --> 00:12:44,000
you have bitter on it could be

378
00:12:44,000 --> 00:12:45,519
enterprise or your personal thing or the

379
00:12:45,519 --> 00:12:47,680
free one but it gives you a lot of

380
00:12:47,680 --> 00:12:50,079
things out of the box now let's take a

381
00:12:50,079 --> 00:12:52,880
look at this other one this is shift

382
00:12:52,880 --> 00:12:56,000
left analysis so the fun fact about this

383
00:12:56,000 --> 00:12:57,600
one is that i don't even have to write

384
00:12:57,600 --> 00:12:59,440
it uh github actions has something

385
00:12:59,440 --> 00:13:01,760
called marketplace you could go there

386
00:13:01,760 --> 00:13:03,760
pick a few of the workflows that you

387
00:13:03,760 --> 00:13:05,920
have that you want uh which are

388
00:13:05,920 --> 00:13:07,120
pre-written for you and clicking a

389
00:13:07,120 --> 00:13:08,320
button essentially would add this

390
00:13:08,320 --> 00:13:09,839
workflow to your repository along with

391
00:13:09,839 --> 00:13:12,079
like other cool things

392
00:13:12,079 --> 00:13:13,920
and it does something similar it

393
00:13:13,920 --> 00:13:16,160
performs a scan and it will upload a

394
00:13:16,160 --> 00:13:18,320
report as a

395
00:13:18,320 --> 00:13:20,800
artifact to github again now let's take

396
00:13:20,800 --> 00:13:23,200
a look at the actions themselves

397
00:13:23,200 --> 00:13:25,519
so uh depending upon the event that you

398
00:13:25,519 --> 00:13:27,680
trigger uh like set the trigger for it

399
00:13:27,680 --> 00:13:30,240
could be a commit it could be

400
00:13:30,240 --> 00:13:32,240
a release a creation of a issue

401
00:13:32,240 --> 00:13:34,480
something like that it will trigger the

402
00:13:34,480 --> 00:13:37,279
workflows accordingly and uh here you

403
00:13:37,279 --> 00:13:39,040
can find the logs and all so what

404
00:13:39,040 --> 00:13:40,160
happened

405
00:13:40,160 --> 00:13:42,800
this is your shift click scan that we

406
00:13:42,800 --> 00:13:44,320
just looked at

407
00:13:44,320 --> 00:13:46,000
it does a whole bunch of scans different

408
00:13:46,000 --> 00:13:48,320
kinds of things dependency checks it

409
00:13:48,320 --> 00:13:50,320
found one issue and

410
00:13:50,320 --> 00:13:52,000
then it's this is the overall report

411
00:13:52,000 --> 00:13:54,079
right uh so the dependencies can fail

412
00:13:54,079 --> 00:13:55,680
the secret audit field and the rest of

413
00:13:55,680 --> 00:13:57,279
the three things that it does fast

414
00:13:57,279 --> 00:13:58,959
essentially

415
00:13:58,959 --> 00:14:01,600
and finally it also uploaded the report

416
00:14:01,600 --> 00:14:03,519
where we'll find the report is something

417
00:14:03,519 --> 00:14:06,160
we'll take a look at a little bit later

418
00:14:06,160 --> 00:14:07,519
uh

419
00:14:07,519 --> 00:14:09,600
and this also has a security tab by the

420
00:14:09,600 --> 00:14:12,320
way so you could do your security

421
00:14:12,320 --> 00:14:14,079
issue management right here in the

422
00:14:14,079 --> 00:14:16,639
github repo itself and instead of having

423
00:14:16,639 --> 00:14:18,160
to use a standalone tool let's say

424
00:14:18,160 --> 00:14:20,639
defect dojo or jira or something else

425
00:14:20,639 --> 00:14:22,079
but again it's a it's a matter of

426
00:14:22,079 --> 00:14:23,839
preference yeah it's not necessary that

427
00:14:23,839 --> 00:14:26,399
you use this

428
00:14:26,800 --> 00:14:30,240
uh this is the git secrets one

429
00:14:30,240 --> 00:14:33,279
the one that i wrote

430
00:14:37,760 --> 00:14:38,880
and

431
00:14:38,880 --> 00:14:41,120
yeah these are the commands that we had

432
00:14:41,120 --> 00:14:43,440
in the last stage that you want to run

433
00:14:43,440 --> 00:14:46,320
and the report got uploaded

434
00:14:46,320 --> 00:14:48,639
to github actions

435
00:14:48,639 --> 00:14:49,839
so

436
00:14:49,839 --> 00:14:51,680
where could you find the report is if

437
00:14:51,680 --> 00:14:53,040
you go back to the workflow where it

438
00:14:53,040 --> 00:14:54,959
would ran and just scroll a little to

439
00:14:54,959 --> 00:14:57,120
the bottom you will find that under

440
00:14:57,120 --> 00:14:59,360
artifacts you have this report right

441
00:14:59,360 --> 00:15:00,240
and

442
00:15:00,240 --> 00:15:01,600
the

443
00:15:01,600 --> 00:15:03,760
another good thing about github uh

444
00:15:03,760 --> 00:15:06,240
actions is the fact that uh not only can

445
00:15:06,240 --> 00:15:08,079
you store these reports or text files

446
00:15:08,079 --> 00:15:09,199
you could also

447
00:15:09,199 --> 00:15:10,959
package your applications and keep keep

448
00:15:10,959 --> 00:15:12,639
them there so it could be docker images

449
00:15:12,639 --> 00:15:14,320
your node packages you could just

450
00:15:14,320 --> 00:15:16,079
package it and use this as a package

451
00:15:16,079 --> 00:15:17,680
repository as well

452
00:15:17,680 --> 00:15:19,760
and your organization could host all of

453
00:15:19,760 --> 00:15:21,760
them right

454
00:15:21,760 --> 00:15:21,930
so

455
00:15:21,930 --> 00:15:23,120
[Music]

456
00:15:23,120 --> 00:15:25,519
coming to why would you want to change

457
00:15:25,519 --> 00:15:27,279
something that already works right so

458
00:15:27,279 --> 00:15:30,240
most of our organizations uh would

459
00:15:30,240 --> 00:15:32,560
already have security processes in place

460
00:15:32,560 --> 00:15:34,720
and they would obviously work right they

461
00:15:34,720 --> 00:15:36,320
are they have been working for a really

462
00:15:36,320 --> 00:15:37,519
long time so why would you want to

463
00:15:37,519 --> 00:15:39,279
change or why would you want to

464
00:15:39,279 --> 00:15:41,519
automate in the first place

465
00:15:41,519 --> 00:15:42,639
so

466
00:15:42,639 --> 00:15:43,360
it

467
00:15:43,360 --> 00:15:44,720
automation obviously the first and

468
00:15:44,720 --> 00:15:47,120
foremost thing is reduces human toil

469
00:15:47,120 --> 00:15:48,079
now

470
00:15:48,079 --> 00:15:50,880
toy can be defined as any activity that

471
00:15:50,880 --> 00:15:53,839
is essential to a process but does not

472
00:15:53,839 --> 00:15:55,199
require like

473
00:15:55,199 --> 00:15:57,040
actual thinking capacity of a human's

474
00:15:57,040 --> 00:15:58,320
brain right

475
00:15:58,320 --> 00:16:01,759
so think of it as uh

476
00:16:01,759 --> 00:16:04,160
while to perform an skill injection you

477
00:16:04,160 --> 00:16:07,199
need to know that it existed so to like

478
00:16:07,199 --> 00:16:10,240
do some time based thing or like error

479
00:16:10,240 --> 00:16:11,680
based sql injections you first need to

480
00:16:11,680 --> 00:16:14,000
figure out that it actually exists now

481
00:16:14,000 --> 00:16:16,399
we have tools skill map for instance

482
00:16:16,399 --> 00:16:18,160
that can tell us that instead of us

483
00:16:18,160 --> 00:16:19,600
having to like check each endpoint

484
00:16:19,600 --> 00:16:20,839
manually right

485
00:16:20,839 --> 00:16:23,759
so it's essential that we have to do it

486
00:16:23,759 --> 00:16:26,079
if you're not using sql map but it's

487
00:16:26,079 --> 00:16:28,320
it's a frustrating job now it could be

488
00:16:28,320 --> 00:16:30,079
compared to something like

489
00:16:30,079 --> 00:16:33,120
uh we have a simple enough task that we

490
00:16:33,120 --> 00:16:36,639
have to do like i enter a bunch of rows

491
00:16:36,639 --> 00:16:38,880
in excel right for example we have a lot

492
00:16:38,880 --> 00:16:40,560
of entries in excel and we have to

493
00:16:40,560 --> 00:16:42,800
capitalize each uh entry

494
00:16:42,800 --> 00:16:44,959
now it's a simple enough task but after

495
00:16:44,959 --> 00:16:47,519
i don't know 200 400 entries one might

496
00:16:47,519 --> 00:16:50,000
get tired right and frustrated and is

497
00:16:50,000 --> 00:16:52,399
bound to make errors so it also reduces

498
00:16:52,399 --> 00:16:54,720
the chance for human errors

499
00:16:54,720 --> 00:16:58,079
and by bias i mean depending upon the

500
00:16:58,079 --> 00:17:00,560
engineer it could also be the case that

501
00:17:00,560 --> 00:17:02,399
he has a bias for certain kinds of work

502
00:17:02,399 --> 00:17:05,199
so he or she could figure say that let's

503
00:17:05,199 --> 00:17:06,640
say a class of bugs is supposed to be

504
00:17:06,640 --> 00:17:09,199
classified as critical but in our

505
00:17:09,199 --> 00:17:10,959
context it might not be the case we

506
00:17:10,959 --> 00:17:13,199
might only consider it as a medium or a

507
00:17:13,199 --> 00:17:15,280
low severity bug

508
00:17:15,280 --> 00:17:18,559
so having that engineer biased towards a

509
00:17:18,559 --> 00:17:20,640
particular bug could uh

510
00:17:20,640 --> 00:17:24,240
essentially and make it misrepresented

511
00:17:24,240 --> 00:17:25,199
in our

512
00:17:25,199 --> 00:17:27,039
vulnerability managed platform or like

513
00:17:27,039 --> 00:17:28,319
wherever we are trying to track these

514
00:17:28,319 --> 00:17:29,760
issues right security issues that we

515
00:17:29,760 --> 00:17:32,240
have identified so adding automation

516
00:17:32,240 --> 00:17:35,120
giving it a process to figure out

517
00:17:35,120 --> 00:17:37,280
uh what kind of severity would also do

518
00:17:37,280 --> 00:17:38,960
away with the bias that one engineer

519
00:17:38,960 --> 00:17:40,400
might have which would differ from one

520
00:17:40,400 --> 00:17:42,000
engineer to another

521
00:17:42,000 --> 00:17:43,200
and

522
00:17:43,200 --> 00:17:44,799
taking away all of these errors and

523
00:17:44,799 --> 00:17:47,120
first frustration based issues that

524
00:17:47,120 --> 00:17:49,600
would come acro come by performing

525
00:17:49,600 --> 00:17:52,720
essential but grunt work ish jobs would

526
00:17:52,720 --> 00:17:54,960
make the system robust at the end right

527
00:17:54,960 --> 00:17:56,720
because we are again doing away with

528
00:17:56,720 --> 00:17:59,840
errors now by being robust we i do not

529
00:17:59,840 --> 00:18:02,160
mean that it will work 100 of the time

530
00:18:02,160 --> 00:18:03,840
cases are bound to change some things

531
00:18:03,840 --> 00:18:06,000
are something that bound to break

532
00:18:06,000 --> 00:18:08,000
and it's an eventual process to come to

533
00:18:08,000 --> 00:18:10,480
like a near perfect thing

534
00:18:10,480 --> 00:18:13,200
but robust uh does not mean like 100

535
00:18:13,200 --> 00:18:15,200
perfect thing from the get-go

536
00:18:15,200 --> 00:18:17,520
uh at the same time it also does not

537
00:18:17,520 --> 00:18:18,960
mean that it will break most of the time

538
00:18:18,960 --> 00:18:20,640
right that's the whole point of testing

539
00:18:20,640 --> 00:18:22,799
our standard procedure that we created

540
00:18:22,799 --> 00:18:24,640
earlier and then

541
00:18:24,640 --> 00:18:26,799
slowly iteratively building on top of it

542
00:18:26,799 --> 00:18:29,039
to fix any edge cases that we might

543
00:18:29,039 --> 00:18:31,280
encounter later in the scenario of

544
00:18:31,280 --> 00:18:33,679
actually using that automation

545
00:18:33,679 --> 00:18:35,760
now because it's robust and we're doing

546
00:18:35,760 --> 00:18:38,559
away with errors we enable trust for

547
00:18:38,559 --> 00:18:40,400
further automation so once we see it

548
00:18:40,400 --> 00:18:42,160
working and once we see the benefits

549
00:18:42,160 --> 00:18:44,400
that we get out of automation

550
00:18:44,400 --> 00:18:46,240
be it security or in general we would

551
00:18:46,240 --> 00:18:48,960
want to automate like other things right

552
00:18:48,960 --> 00:18:50,480
and then uh

553
00:18:50,480 --> 00:18:52,480
that light bulb clicks key okay i can

554
00:18:52,480 --> 00:18:54,240
automate this thing also i can automate

555
00:18:54,240 --> 00:18:57,120
that as well and then you can identify

556
00:18:57,120 --> 00:18:58,480
avenues for actually putting in

557
00:18:58,480 --> 00:19:01,520
automation where it seemed like it is i

558
00:19:01,520 --> 00:19:03,360
guess too much of an effort or maybe you

559
00:19:03,360 --> 00:19:05,120
didn't even realize that

560
00:19:05,120 --> 00:19:06,880
this particular process can be automated

561
00:19:06,880 --> 00:19:08,559
with a little bit of record but in the

562
00:19:08,559 --> 00:19:09,919
long run it will save a lot of time

563
00:19:09,919 --> 00:19:11,280
right

564
00:19:11,280 --> 00:19:12,400
and

565
00:19:12,400 --> 00:19:14,960
the most important of all is the fact

566
00:19:14,960 --> 00:19:16,640
that any kind of automation would

567
00:19:16,640 --> 00:19:19,200
essentially give the engineer the costly

568
00:19:19,200 --> 00:19:21,200
security resource in the team

569
00:19:21,200 --> 00:19:22,000
uh

570
00:19:22,000 --> 00:19:25,039
time right to do much uh

571
00:19:25,039 --> 00:19:26,480
for

572
00:19:26,480 --> 00:19:28,640
far greater things uh as compared to

573
00:19:28,640 --> 00:19:30,640
like checking for vanilla cases of sql

574
00:19:30,640 --> 00:19:33,039
injection and so forth so taking up a

575
00:19:33,039 --> 00:19:35,440
grant from grunt work from the engineer

576
00:19:35,440 --> 00:19:37,840
would allow him to actually put in

577
00:19:37,840 --> 00:19:41,200
thought and effort into a more quality

578
00:19:41,200 --> 00:19:42,799
uh assessment of things that he's

579
00:19:42,799 --> 00:19:44,960
supposed to do be it research worker or

580
00:19:44,960 --> 00:19:46,320
an actual printer

581
00:19:46,320 --> 00:19:47,200
right

582
00:19:47,200 --> 00:19:49,600
and it would

583
00:19:49,600 --> 00:19:52,640
also allow him to like take things

584
00:19:52,640 --> 00:19:55,200
further for example if we have

585
00:19:55,200 --> 00:19:58,000
a tool that tells us an xss bug already

586
00:19:58,000 --> 00:20:01,200
exists right with on on an application

587
00:20:01,200 --> 00:20:02,799
the engineer could just take away take

588
00:20:02,799 --> 00:20:04,880
that fact and like take it further

589
00:20:04,880 --> 00:20:07,520
instead of just uh not having time to do

590
00:20:07,520 --> 00:20:09,280
that because previously he was actually

591
00:20:09,280 --> 00:20:11,200
finding the exercise in the first place

592
00:20:11,200 --> 00:20:12,960
and that would cut away most of the time

593
00:20:12,960 --> 00:20:15,039
because all of us work on a deadline in

594
00:20:15,039 --> 00:20:17,679
some way or the other type so freeing up

595
00:20:17,679 --> 00:20:19,840
the cost is security resource engineer

596
00:20:19,840 --> 00:20:21,679
would allow him to like focus more on

597
00:20:21,679 --> 00:20:24,640
the research work finding or chaining

598
00:20:24,640 --> 00:20:26,640
different kinds of bugs and bugs

599
00:20:26,640 --> 00:20:29,600
together to do more sophisticated

600
00:20:29,600 --> 00:20:31,039
attacks that are like tools are

601
00:20:31,039 --> 00:20:33,120
currently not capable of

602
00:20:33,120 --> 00:20:36,400
and yeah i mean that just like

603
00:20:36,400 --> 00:20:38,400
is worth in itself

604
00:20:38,400 --> 00:20:39,600
so what

605
00:20:39,600 --> 00:20:42,640
can we automate right uh

606
00:20:42,640 --> 00:20:43,919
there's a lot of things that we can

607
00:20:43,919 --> 00:20:45,120
automate but when we talk about

608
00:20:45,120 --> 00:20:46,640
automation right now in this talk we'll

609
00:20:46,640 --> 00:20:49,520
talk about uh security related stuff so

610
00:20:49,520 --> 00:20:52,480
security testing obviously uh that does

611
00:20:52,480 --> 00:20:54,159
not mean that you can do away with your

612
00:20:54,159 --> 00:20:56,640
pen testing team because uh

613
00:20:56,640 --> 00:20:58,720
again tools are not as smart as you'd

614
00:20:58,720 --> 00:21:00,559
like them to be at this point and they

615
00:21:00,559 --> 00:21:03,120
probably will never be as smart uh

616
00:21:03,120 --> 00:21:05,760
perhaps i don't know so uh yeah security

617
00:21:05,760 --> 00:21:07,760
testing for one uh if not in the

618
00:21:07,760 --> 00:21:09,440
entirety of security things there's

619
00:21:09,440 --> 00:21:11,200
actually some part of it

620
00:21:11,200 --> 00:21:14,240
where we are i think finding these low

621
00:21:14,240 --> 00:21:16,480
hanging fruits that we

622
00:21:16,480 --> 00:21:18,799
we can get just from tools because

623
00:21:18,799 --> 00:21:20,480
low hanging fruits are essentially what

624
00:21:20,480 --> 00:21:22,480
we consider right now as

625
00:21:22,480 --> 00:21:24,880
uh the easiest box to find right and

626
00:21:24,880 --> 00:21:26,400
they are the easiest ones to find

627
00:21:26,400 --> 00:21:28,080
because there's a lot of literature

628
00:21:28,080 --> 00:21:30,159
behind them and we have a lot of cases

629
00:21:30,159 --> 00:21:32,480
where we could like identify

630
00:21:32,480 --> 00:21:34,000
these bugs through

631
00:21:34,000 --> 00:21:35,919
so a lot of security testing can be

632
00:21:35,919 --> 00:21:38,240
automated uh parts of it and stages of

633
00:21:38,240 --> 00:21:40,320
it especially even if it's not like

634
00:21:40,320 --> 00:21:42,960
end-to-end automation for the testing

635
00:21:42,960 --> 00:21:45,200
then reporting and alerting officials so

636
00:21:45,200 --> 00:21:47,120
once we have figured an issue out we

637
00:21:47,120 --> 00:21:48,640
could add a few more lines to our

638
00:21:48,640 --> 00:21:51,120
automation to uh put it

639
00:21:51,120 --> 00:21:52,159
in a

640
00:21:52,159 --> 00:21:54,080
platform right it could be jira it could

641
00:21:54,080 --> 00:21:55,120
be slack

642
00:21:55,120 --> 00:21:56,559
and

643
00:21:56,559 --> 00:21:58,720
if you are also able to like put a map

644
00:21:58,720 --> 00:22:01,760
of swotsky uh if this is the class of

645
00:22:01,760 --> 00:22:04,400
bug make it uh consider it as a severe

646
00:22:04,400 --> 00:22:05,520
bug

647
00:22:05,520 --> 00:22:08,000
or like a critical severity work so we

648
00:22:08,000 --> 00:22:09,919
can alert based on that on our slacks

649
00:22:09,919 --> 00:22:11,919
phones emails and whatnot right so

650
00:22:11,919 --> 00:22:13,919
alerting is another place where we could

651
00:22:13,919 --> 00:22:15,600
alert to multiple sources at once

652
00:22:15,600 --> 00:22:17,039
depending on the kind of bug we're

653
00:22:17,039 --> 00:22:19,520
encountering the kind of checks we have

654
00:22:19,520 --> 00:22:20,640
in place

655
00:22:20,640 --> 00:22:22,720
then vulnerability management right so

656
00:22:22,720 --> 00:22:25,760
we could also put it in places as i said

657
00:22:25,760 --> 00:22:26,960
jira or

658
00:22:26,960 --> 00:22:28,559
defect dojo for managing these

659
00:22:28,559 --> 00:22:30,080
vulnerabilities and

660
00:22:30,080 --> 00:22:30,880
uh

661
00:22:30,880 --> 00:22:32,480
people can just take it up from there

662
00:22:32,480 --> 00:22:34,159
instead of us having to like manually go

663
00:22:34,159 --> 00:22:36,320
through a report adding add findings to

664
00:22:36,320 --> 00:22:37,520
these tools and

665
00:22:37,520 --> 00:22:38,720
so much more

666
00:22:38,720 --> 00:22:40,880
so yeah i mean we can automate a lot

667
00:22:40,880 --> 00:22:42,640
more things but uh these are good places

668
00:22:42,640 --> 00:22:45,039
to start because they consider they are

669
00:22:45,039 --> 00:22:47,280
like kind of uh grounded in a lot of

670
00:22:47,280 --> 00:22:49,440
toil right a lot of grunt work that

671
00:22:49,440 --> 00:22:51,200
you'll have to do like reading a report

672
00:22:51,200 --> 00:22:52,080
and then actually adding those

673
00:22:52,080 --> 00:22:54,480
vulnerabilities to a platform or

674
00:22:54,480 --> 00:22:57,039
alerting or reporting security testing

675
00:22:57,039 --> 00:22:58,559
obviously has like a lot of great work

676
00:22:58,559 --> 00:23:00,559
involved in like setting up environments

677
00:23:00,559 --> 00:23:03,360
or a bunch of other things right

678
00:23:03,360 --> 00:23:04,640
what can

679
00:23:04,640 --> 00:23:05,840
uh cannot

680
00:23:05,840 --> 00:23:08,720
automate so unstructured processes the

681
00:23:08,720 --> 00:23:11,679
simplest one so the

682
00:23:11,679 --> 00:23:14,320
automation relies on some form of code

683
00:23:14,320 --> 00:23:17,840
uh right so we need pre like well

684
00:23:17,840 --> 00:23:19,520
defined steps to

685
00:23:19,520 --> 00:23:22,720
do like any kind of automation so any

686
00:23:22,720 --> 00:23:25,520
unstructured process that has like

687
00:23:25,520 --> 00:23:29,120
a very convoluted uh set of steps right

688
00:23:29,120 --> 00:23:31,679
or diluted set of steps that is very

689
00:23:31,679 --> 00:23:35,120
dynamic and changing uh in its nature

690
00:23:35,120 --> 00:23:38,000
it's not like a deterrent for automation

691
00:23:38,000 --> 00:23:40,320
but it just makes it way more complex to

692
00:23:40,320 --> 00:23:41,840
actually implement it

693
00:23:41,840 --> 00:23:43,919
so it might be a good idea to like get

694
00:23:43,919 --> 00:23:45,679
our hands uh

695
00:23:45,679 --> 00:23:46,960
dirty with like actually putting in

696
00:23:46,960 --> 00:23:48,720
simple automation first in the first

697
00:23:48,720 --> 00:23:51,360
place and then adding iteratively on top

698
00:23:51,360 --> 00:23:54,000
of it as a layered approach instead of

699
00:23:54,000 --> 00:23:55,919
trying to automate the entire workflow

700
00:23:55,919 --> 00:23:58,080
at once as we talked about

701
00:23:58,080 --> 00:23:59,360
then uh

702
00:23:59,360 --> 00:24:01,200
testing for sophisticated classes of

703
00:24:01,200 --> 00:24:02,880
works right

704
00:24:02,880 --> 00:24:05,279
when i say sophisticated uh these these

705
00:24:05,279 --> 00:24:07,760
are essentially the books that uh

706
00:24:07,760 --> 00:24:10,000
most tools would not find or tools would

707
00:24:10,000 --> 00:24:13,039
not find in general but uh the ones that

708
00:24:13,039 --> 00:24:15,200
require a human to actually put his mind

709
00:24:15,200 --> 00:24:17,360
behind this bug or like perhaps chain

710
00:24:17,360 --> 00:24:19,200
them together to create a even more

711
00:24:19,200 --> 00:24:21,360
severe work or like a bug that that is

712
00:24:21,360 --> 00:24:25,360
of a higher severity right because uh

713
00:24:25,360 --> 00:24:27,760
this context of two different bugs uh

714
00:24:27,760 --> 00:24:29,600
the tools are not really that great at

715
00:24:29,600 --> 00:24:31,840
uh yet to like merge them together and

716
00:24:31,840 --> 00:24:33,279
figure out what they can do with them

717
00:24:33,279 --> 00:24:34,480
together

718
00:24:34,480 --> 00:24:37,200
but uh a human as depending on how

719
00:24:37,200 --> 00:24:38,559
experienced the pen tester is it's a

720
00:24:38,559 --> 00:24:40,799
matter of like muscle memory right uh so

721
00:24:40,799 --> 00:24:42,159
something like that

722
00:24:42,159 --> 00:24:44,159
and anything that requires manual

723
00:24:44,159 --> 00:24:46,559
analysis so of course uh most of the

724
00:24:46,559 --> 00:24:48,240
tools will generate some sort of false

725
00:24:48,240 --> 00:24:51,520
positives and these false positives uh

726
00:24:51,520 --> 00:24:53,520
are have i mean are required to be

727
00:24:53,520 --> 00:24:55,919
reviewed by a human at the end of it

728
00:24:55,919 --> 00:24:57,120
so

729
00:24:57,120 --> 00:24:59,200
if a human is involved in any place of

730
00:24:59,200 --> 00:25:02,320
the uh like the automation it it cannot

731
00:25:02,320 --> 00:25:04,320
be entered automated it could it cannot

732
00:25:04,320 --> 00:25:06,000
be true automation right

733
00:25:06,000 --> 00:25:08,159
so uh even if it's like him like

734
00:25:08,159 --> 00:25:09,520
clicking on the button at the end of the

735
00:25:09,520 --> 00:25:11,360
analysis and then it still works but

736
00:25:11,360 --> 00:25:13,360
it's that particular stage is still

737
00:25:13,360 --> 00:25:16,240
manual so it's not true at automation

738
00:25:16,240 --> 00:25:18,320
and essentially what we're talking about

739
00:25:18,320 --> 00:25:20,799
is partial automation right and that's

740
00:25:20,799 --> 00:25:22,720
the i guess slide at the end of the

741
00:25:22,720 --> 00:25:25,600
tunnel in a way that even if something

742
00:25:25,600 --> 00:25:28,159
is not automatically from the first step

743
00:25:28,159 --> 00:25:29,440
to the end

744
00:25:29,440 --> 00:25:32,159
there are places in almost all processes

745
00:25:32,159 --> 00:25:33,919
that we can find that we can automate

746
00:25:33,919 --> 00:25:36,640
for now whether it's a good idea to do

747
00:25:36,640 --> 00:25:38,559
go ahead and do that is dependent upon

748
00:25:38,559 --> 00:25:40,320
the context it might be a simple enough

749
00:25:40,320 --> 00:25:42,640
job that would require two seconds

750
00:25:42,640 --> 00:25:45,120
of your time for uh for example just

751
00:25:45,120 --> 00:25:47,039
like sending an email i don't know

752
00:25:47,039 --> 00:25:50,000
uh if if that's not too much of a time

753
00:25:50,000 --> 00:25:52,159
saver then sure we would not want to

754
00:25:52,159 --> 00:25:53,760
automate that but again identifying

755
00:25:53,760 --> 00:25:55,279
these process is the first step to

756
00:25:55,279 --> 00:25:56,400
figuring out

757
00:25:56,400 --> 00:25:58,640
what actually is grunt work and what we

758
00:25:58,640 --> 00:26:00,960
can do with to like save not just time

759
00:26:00,960 --> 00:26:02,960
but like effort and energy towards

760
00:26:02,960 --> 00:26:06,000
finding more relevant uh security issues

761
00:26:06,000 --> 00:26:08,240
instead of just the bare minimum ones

762
00:26:08,240 --> 00:26:09,360
that we can find because of the

763
00:26:09,360 --> 00:26:11,200
constraint of time

764
00:26:11,200 --> 00:26:13,200
right

765
00:26:13,200 --> 00:26:16,559
so uh as conclusion we looked at

766
00:26:16,559 --> 00:26:19,360
what is application security so any

767
00:26:19,360 --> 00:26:21,919
aspect dealing with application uh

768
00:26:21,919 --> 00:26:24,000
that improves its security security apps

769
00:26:24,000 --> 00:26:25,760
application security

770
00:26:25,760 --> 00:26:29,200
uh we took a look at how over the years

771
00:26:29,200 --> 00:26:30,880
it has uh

772
00:26:30,880 --> 00:26:31,760
come

773
00:26:31,760 --> 00:26:32,960
into like this form where we have

774
00:26:32,960 --> 00:26:35,120
consolidated and we have a structured

775
00:26:35,120 --> 00:26:37,200
amount of data about different

776
00:26:37,200 --> 00:26:38,400
issues and

777
00:26:38,400 --> 00:26:40,080
classes of them and we have created

778
00:26:40,080 --> 00:26:42,640
tools and frameworks out of these uh

779
00:26:42,640 --> 00:26:45,440
issues uh to make our lives easier

780
00:26:45,440 --> 00:26:47,279
essentially to test them and to identify

781
00:26:47,279 --> 00:26:49,279
them perhaps different against them as

782
00:26:49,279 --> 00:26:50,240
well

783
00:26:50,240 --> 00:26:52,320
then we take a look at how we could

784
00:26:52,320 --> 00:26:54,960
create these automated processes as a uh

785
00:26:54,960 --> 00:26:56,480
let's say a checklist right and then we

786
00:26:56,480 --> 00:26:58,080
also took a look at a simple

787
00:26:58,080 --> 00:26:59,919
demonstration on how

788
00:26:59,919 --> 00:27:02,400
how not complicated it is to actually

789
00:27:02,400 --> 00:27:04,480
put it in place uh if we just break it

790
00:27:04,480 --> 00:27:07,120
down by process right so secret scanning

791
00:27:07,120 --> 00:27:09,360
was one single process then we had

792
00:27:09,360 --> 00:27:11,440
another tool which would uh even take

793
00:27:11,440 --> 00:27:13,200
care of writing that workflow file for

794
00:27:13,200 --> 00:27:15,840
us but uh like the first one that we

795
00:27:15,840 --> 00:27:17,360
took a look at which was the secret

796
00:27:17,360 --> 00:27:19,279
scanning one we could add n number of

797
00:27:19,279 --> 00:27:21,120
workflows that would just test for these

798
00:27:21,120 --> 00:27:23,039
things individually

799
00:27:23,039 --> 00:27:24,799
and generate a report for us at the end

800
00:27:24,799 --> 00:27:26,480
of it

801
00:27:26,480 --> 00:27:28,480
we took a look at different kinds of

802
00:27:28,480 --> 00:27:30,720
benefits which was robustness reduced

803
00:27:30,720 --> 00:27:32,399
errors and

804
00:27:32,399 --> 00:27:34,880
obviously the best one of all of them

805
00:27:34,880 --> 00:27:36,559
all was the fact that the engineer has

806
00:27:36,559 --> 00:27:38,559
more time on his hands to like

807
00:27:38,559 --> 00:27:40,159
do stuff right

808
00:27:40,159 --> 00:27:42,320
and finally we took a look at automation

809
00:27:42,320 --> 00:27:44,720
and the limitations that come

810
00:27:44,720 --> 00:27:46,960
to us with or put trying to like

811
00:27:46,960 --> 00:27:48,559
implement automation for different kinds

812
00:27:48,559 --> 00:27:49,840
of processes

813
00:27:49,840 --> 00:27:51,600
and in different places

814
00:27:51,600 --> 00:27:52,799
right

815
00:27:52,799 --> 00:27:54,480
so thank you thank you folks for your

816
00:27:54,480 --> 00:27:56,960
time and i'll take any questions

817
00:27:56,960 --> 00:28:00,600
if you guys have any

818
00:28:02,799 --> 00:28:04,320
cool

819
00:28:04,320 --> 00:28:05,440
okay

820
00:28:05,440 --> 00:28:06,960
thank you very much ayush thank you

821
00:28:06,960 --> 00:28:08,480
people

822
00:28:08,480 --> 00:28:10,000
lots of great

823
00:28:10,000 --> 00:28:12,240
we are people thanks for that

824
00:28:12,240 --> 00:28:13,200
um

825
00:28:13,200 --> 00:28:15,200
yeah really interesting talk application

826
00:28:15,200 --> 00:28:16,960
security is where i started out my

827
00:28:16,960 --> 00:28:19,919
career it's curie uh sean you are an

828
00:28:19,919 --> 00:28:21,600
application security guy

829
00:28:21,600 --> 00:28:24,240
today dude can you tell uh hilton ollie

830
00:28:24,240 --> 00:28:26,399
to throw in her question if she's got a

831
00:28:26,399 --> 00:28:28,799
question well knowledge a guy that was

832
00:28:28,799 --> 00:28:30,080
doing a talk earlier if you were paying

833
00:28:30,080 --> 00:28:32,799
attention i said that no you said ask

834
00:28:32,799 --> 00:28:34,559
her to put a question i didn't say that

835
00:28:34,559 --> 00:28:36,720
you did say him

836
00:28:36,720 --> 00:28:38,880
we need to have a talk

837
00:28:38,880 --> 00:28:40,799
yeah so if you've got any questions just

838
00:28:40,799 --> 00:28:42,159
put them in um

839
00:28:42,159 --> 00:28:44,159
twitch yeah stick it in the twitch stick

840
00:28:44,159 --> 00:28:46,720
him in the twitch

841
00:28:47,919 --> 00:28:50,000
there's a big question coming

842
00:28:50,000 --> 00:28:52,320
hopefully there's a question coming

843
00:28:52,320 --> 00:28:54,000
we've got a bit of time before our next

844
00:28:54,000 --> 00:28:56,080
speaker yep um

845
00:28:56,080 --> 00:28:57,600
sean's got an idea

846
00:28:57,600 --> 00:28:59,039
about talking about

847
00:28:59,039 --> 00:29:01,520
fear uncertainty and doubt

848
00:29:01,520 --> 00:29:03,600
so you lead on it it was your idea and

849
00:29:03,600 --> 00:29:04,720
then we'll

850
00:29:04,720 --> 00:29:06,399
chip in yeah

851
00:29:06,399 --> 00:29:07,840
so

852
00:29:07,840 --> 00:29:08,799
um

853
00:29:08,799 --> 00:29:12,240
no questions yet

854
00:29:12,240 --> 00:29:14,720
okay just making sure there's none there

855
00:29:14,720 --> 00:29:17,279
so yeah i thought we'd just do a quick

856
00:29:17,279 --> 00:29:19,919
impromptu talk on fed no but we got a

857
00:29:19,919 --> 00:29:20,799
question

858
00:29:20,799 --> 00:29:23,120
oh we have a question yes

859
00:29:23,120 --> 00:29:25,120
it's how do you prioritize which

860
00:29:25,120 --> 00:29:27,840
processes to automate and that is for

861
00:29:27,840 --> 00:29:31,120
our our speaker arush

862
00:29:31,120 --> 00:29:32,240
the question is

863
00:29:32,240 --> 00:29:33,919
yeah so uh

864
00:29:33,919 --> 00:29:36,080
i would suggest to start off with the

865
00:29:36,080 --> 00:29:38,000
simplest one if we are starting out for

866
00:29:38,000 --> 00:29:40,240
the first time to like put in automation

867
00:29:40,240 --> 00:29:41,440
uh because

868
00:29:41,440 --> 00:29:43,360
it's it's a little difficult to like

869
00:29:43,360 --> 00:29:45,200
think of all the cases that might come

870
00:29:45,200 --> 00:29:47,120
across we'd come across right while

871
00:29:47,120 --> 00:29:49,200
putting in this automation in place

872
00:29:49,200 --> 00:29:51,440
so sort of with the simplest part of the

873
00:29:51,440 --> 00:29:52,799
entire workflow that you're trying to

874
00:29:52,799 --> 00:29:54,399
automate and then take it from the

875
00:29:54,399 --> 00:29:56,960
lecture in an iterative process to add

876
00:29:56,960 --> 00:29:57,760
uh

877
00:29:57,760 --> 00:29:58,799
different

878
00:29:58,799 --> 00:30:01,200
let's say edge cases to your automation

879
00:30:01,200 --> 00:30:02,799
in an eventual manner you don't need to

880
00:30:02,799 --> 00:30:04,320
be like perfect in the first case like

881
00:30:04,320 --> 00:30:06,640
we talked about the sql injection thing

882
00:30:06,640 --> 00:30:07,919
so first could be just the

883
00:30:07,919 --> 00:30:09,679
identification of it and then you could

884
00:30:09,679 --> 00:30:11,760
try to like figure out if you could

885
00:30:11,760 --> 00:30:14,559
identify the kind of skill injection and

886
00:30:14,559 --> 00:30:16,480
then if you could uh maybe add it to

887
00:30:16,480 --> 00:30:17,279
your

888
00:30:17,279 --> 00:30:19,360
security management platform alert on it

889
00:30:19,360 --> 00:30:22,840
and something like that

890
00:30:23,279 --> 00:30:25,600
that's great advice absolutely

891
00:30:25,600 --> 00:30:27,679
that's good so if there are no further

892
00:30:27,679 --> 00:30:29,840
questions we'll say goodbye

893
00:30:29,840 --> 00:30:33,679
to ayush yep that's what i said

894
00:30:33,679 --> 00:30:34,799
and

895
00:30:34,799 --> 00:30:36,640
we're going to go with sean and his

896
00:30:36,640 --> 00:30:39,760
topic of emergency topic

897
00:30:39,760 --> 00:30:42,240
or we've got another fear uncertainty of

898
00:30:42,240 --> 00:30:43,600
course somebody's going to ask another

899
00:30:43,600 --> 00:30:46,399
question just as we said goodbye

900
00:30:46,399 --> 00:30:49,279
oh but he's still with us so

901
00:30:49,279 --> 00:30:50,799
the question is

902
00:30:50,799 --> 00:30:52,640
what are some of the common tools for

903
00:30:52,640 --> 00:30:54,640
automation and how do you validate the

904
00:30:54,640 --> 00:30:57,279
results interesting

905
00:30:57,279 --> 00:30:58,480
uh

906
00:30:58,480 --> 00:31:01,519
so while putting i mean the common tools

907
00:31:01,519 --> 00:31:03,679
it depends on where you are so

908
00:31:03,679 --> 00:31:04,880
or where you'd want to put the

909
00:31:04,880 --> 00:31:07,120
automation a lot of it if you're like

910
00:31:07,120 --> 00:31:09,200
using let's say jenkins or

911
00:31:09,200 --> 00:31:11,519
drivers ci you could put your automation

912
00:31:11,519 --> 00:31:13,279
there if you're already on github and

913
00:31:13,279 --> 00:31:15,679
bitbucket and a lot of us use that for

914
00:31:15,679 --> 00:31:17,200
let's say deployment and stuff right

915
00:31:17,200 --> 00:31:19,440
with pipelines and github actions as we

916
00:31:19,440 --> 00:31:21,440
just saw in the demo you could put in a

917
00:31:21,440 --> 00:31:23,600
lot of things there like let's say a

918
00:31:23,600 --> 00:31:25,600
pre-deployment checklist or security

919
00:31:25,600 --> 00:31:26,960
checklist of sorts you could write

920
00:31:26,960 --> 00:31:28,640
workflows for that and then alert based

921
00:31:28,640 --> 00:31:29,519
on them

922
00:31:29,519 --> 00:31:31,760
so there's plenty of tools it depends on

923
00:31:31,760 --> 00:31:34,240
uh how you essentially what's your

924
00:31:34,240 --> 00:31:37,600
pipeline like of uh that like i designed

925
00:31:37,600 --> 00:31:40,559
to like deployment of your application

926
00:31:40,559 --> 00:31:41,840
uh and

927
00:31:41,840 --> 00:31:43,440
uh sorry what was the next part about

928
00:31:43,440 --> 00:31:45,360
the other part

929
00:31:45,360 --> 00:31:47,440
it was then how do you validate the

930
00:31:47,440 --> 00:31:48,960
results

931
00:31:48,960 --> 00:31:51,200
so uh that's kind of a precursor to

932
00:31:51,200 --> 00:31:52,960
writing that automation no you you will

933
00:31:52,960 --> 00:31:54,640
not write an automation without knowing

934
00:31:54,640 --> 00:31:56,960
what the end result or having at least

935
00:31:56,960 --> 00:31:58,559
some idea of how the result should look

936
00:31:58,559 --> 00:31:59,279
like

937
00:31:59,279 --> 00:32:01,760
so it's it's like a co

938
00:32:01,760 --> 00:32:03,519
essentially if you develop a software

939
00:32:03,519 --> 00:32:05,120
you know at the end of it what you

940
00:32:05,120 --> 00:32:07,200
wanted to do right so while you're

941
00:32:07,200 --> 00:32:09,600
writing automation you know that

942
00:32:09,600 --> 00:32:10,960
at the end of it it should help you

943
00:32:10,960 --> 00:32:13,600
identify let's say and if

944
00:32:13,600 --> 00:32:16,559
a secret is in your port committed right

945
00:32:16,559 --> 00:32:19,039
or if it doesn't add a five one then you

946
00:32:19,039 --> 00:32:21,279
need to figure out if it failed because

947
00:32:21,279 --> 00:32:24,240
uh i mean if it failed to identify one

948
00:32:24,240 --> 00:32:26,159
or it your code does not actually have

949
00:32:26,159 --> 00:32:28,159
one that's a different process but the

950
00:32:28,159 --> 00:32:30,000
results that you'd want to

951
00:32:30,000 --> 00:32:32,880
see at the end of it are uh you would

952
00:32:32,880 --> 00:32:34,159
have some idea before you write the

953
00:32:34,159 --> 00:32:36,399
automation itself because i mean uh how

954
00:32:36,399 --> 00:32:38,399
else would you validate that you do not

955
00:32:38,399 --> 00:32:40,320
know right

956
00:32:40,320 --> 00:32:43,678
yeah that's a very good point

