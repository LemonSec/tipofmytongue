1
00:00:00,080 --> 00:00:02,960
um so yeah like uh like i said i'll be

2
00:00:02,960 --> 00:00:06,080
talking about blind sql injections

3
00:00:06,080 --> 00:00:08,160
uh so a little bit about me

4
00:00:08,160 --> 00:00:10,400
um i'm a penetration tester at booze

5
00:00:10,400 --> 00:00:12,000
allen hamilton

6
00:00:12,000 --> 00:00:13,840
uh i have a few certifications most

7
00:00:13,840 --> 00:00:15,360
important for this talk would be

8
00:00:15,360 --> 00:00:17,359
considered the offensive security web

9
00:00:17,359 --> 00:00:19,039
expert

10
00:00:19,039 --> 00:00:21,439
i also have several uh web application

11
00:00:21,439 --> 00:00:24,400
cves from blind sql injections to

12
00:00:24,400 --> 00:00:26,880
wordpress plugins

13
00:00:26,880 --> 00:00:29,039
and i'm really passionate about

14
00:00:29,039 --> 00:00:32,800
web application and red teaming

15
00:00:32,800 --> 00:00:33,760
so

16
00:00:33,760 --> 00:00:37,040
what are blind sql injections exactly

17
00:00:37,040 --> 00:00:39,600
well it's a form of sql injection that

18
00:00:39,600 --> 00:00:42,480
won't return actual information from the

19
00:00:42,480 --> 00:00:44,320
database

20
00:00:44,320 --> 00:00:47,280
and oftentimes sql errors will be

21
00:00:47,280 --> 00:00:49,280
disabled leading to

22
00:00:49,280 --> 00:00:51,520
uh sql injections and blind sql

23
00:00:51,520 --> 00:00:53,360
injections specifically being more

24
00:00:53,360 --> 00:00:55,120
difficult

25
00:00:55,120 --> 00:00:56,960
so since we won't be able to actually

26
00:00:56,960 --> 00:00:59,039
return information

27
00:00:59,039 --> 00:01:00,960
such as when you use a union statement

28
00:01:00,960 --> 00:01:03,039
we're going to have to ask the database

29
00:01:03,039 --> 00:01:06,640
yes and no questions

30
00:01:07,840 --> 00:01:10,720
so there are two main forms of blind sql

31
00:01:10,720 --> 00:01:12,400
injection the

32
00:01:12,400 --> 00:01:13,760
first form

33
00:01:13,760 --> 00:01:15,600
is content-based

34
00:01:15,600 --> 00:01:18,159
which essentially means that the website

35
00:01:18,159 --> 00:01:20,400
will show different behavior when you

36
00:01:20,400 --> 00:01:23,119
insert the sql injection

37
00:01:23,119 --> 00:01:25,280
you may be thinking what exactly is this

38
00:01:25,280 --> 00:01:27,360
different behavior well it could be a

39
00:01:27,360 --> 00:01:29,759
huge variety of things it could be a 500

40
00:01:29,759 --> 00:01:31,920
error code the content length could be

41
00:01:31,920 --> 00:01:34,159
different there could be verbose sql

42
00:01:34,159 --> 00:01:35,200
errors

43
00:01:35,200 --> 00:01:37,280
it could really be a lot of different

44
00:01:37,280 --> 00:01:39,280
things and you're going to have to

45
00:01:39,280 --> 00:01:41,600
observe the response

46
00:01:41,600 --> 00:01:44,000
to see if

47
00:01:44,000 --> 00:01:47,200
to see if it's giving a different

48
00:01:47,200 --> 00:01:49,119
anything different when you insert your

49
00:01:49,119 --> 00:01:50,479
sql injection

50
00:01:50,479 --> 00:01:53,360
the second form is a time-based sql

51
00:01:53,360 --> 00:01:54,960
injection

52
00:01:54,960 --> 00:01:56,560
so you won't be getting any different

53
00:01:56,560 --> 00:01:59,520
responses from the website

54
00:01:59,520 --> 00:02:01,360
but you'll be able to insert sleep

55
00:02:01,360 --> 00:02:03,360
statements and these will work

56
00:02:03,360 --> 00:02:04,640
consistently

57
00:02:04,640 --> 00:02:06,000
and you're going to want to be very

58
00:02:06,000 --> 00:02:09,799
aware of false positives

59
00:02:11,760 --> 00:02:12,879
you're going to want to be aware of

60
00:02:12,879 --> 00:02:15,200
false positives just because when you're

61
00:02:15,200 --> 00:02:17,599
using time-based sql injections and

62
00:02:17,599 --> 00:02:20,239
you're trying to mess with the database

63
00:02:20,239 --> 00:02:22,400
the server may take longer to respond so

64
00:02:22,400 --> 00:02:24,160
you may think oh it's sleeping for 10

65
00:02:24,160 --> 00:02:25,680
seconds but really the server is just

66
00:02:25,680 --> 00:02:26,879
slow to

67
00:02:26,879 --> 00:02:28,800
respond

68
00:02:28,800 --> 00:02:30,000
so

69
00:02:30,000 --> 00:02:31,680
to find an sql injection you're going to

70
00:02:31,680 --> 00:02:34,000
want to find a specifically a blind sql

71
00:02:34,000 --> 00:02:35,599
injection you're going to want to test

72
00:02:35,599 --> 00:02:38,319
it similar to how you test a normal sql

73
00:02:38,319 --> 00:02:40,959
injection using a single quote

74
00:02:40,959 --> 00:02:42,640
and then once you insert the single

75
00:02:42,640 --> 00:02:44,560
quote start by looking for differences

76
00:02:44,560 --> 00:02:46,400
between the normal request and when you

77
00:02:46,400 --> 00:02:48,160
insert the single quote

78
00:02:48,160 --> 00:02:51,760
you can use tools like um burp compare

79
00:02:51,760 --> 00:02:55,200
or some other tool to really dive deep

80
00:02:55,200 --> 00:02:56,879
and see if you can find actual

81
00:02:56,879 --> 00:02:59,440
differences in the response

82
00:02:59,440 --> 00:03:01,200
and then if you do think you find a

83
00:03:01,200 --> 00:03:05,000
difference um

84
00:03:05,440 --> 00:03:08,319
and then you can insert the double quote

85
00:03:08,319 --> 00:03:11,840
um and if you insert two single quotes

86
00:03:11,840 --> 00:03:12,959
um and

87
00:03:12,959 --> 00:03:17,159
the diff and the sql

88
00:03:27,200 --> 00:03:30,319
um and so if you can observe the

89
00:03:30,319 --> 00:03:32,959
difference between two single quotes

90
00:03:32,959 --> 00:03:34,560
compared to one single quote two single

91
00:03:34,560 --> 00:03:35,840
quotes should not error out the

92
00:03:35,840 --> 00:03:38,799
application or cause an sql injection

93
00:03:38,799 --> 00:03:42,000
whereas one single quote might

94
00:03:42,000 --> 00:03:43,599
and you're going to want to use

95
00:03:43,599 --> 00:03:46,640
automated tools if possible such as sql

96
00:03:46,640 --> 00:03:48,879
map verb scanner acunetix anything to

97
00:03:48,879 --> 00:03:50,959
help with your sql injection discovery

98
00:03:50,959 --> 00:03:53,760
and exploitation

99
00:03:53,760 --> 00:03:56,480
so looking specifically at content based

100
00:03:56,480 --> 00:03:57,920
these are some of the errors you may

101
00:03:57,920 --> 00:04:00,000
find you may find out when you insert

102
00:04:00,000 --> 00:04:02,159
your sql injection you receive such as

103
00:04:02,159 --> 00:04:05,040
an internal server error for 500 you may

104
00:04:05,040 --> 00:04:06,879
receive a different content length you

105
00:04:06,879 --> 00:04:08,959
may receive the

106
00:04:08,959 --> 00:04:11,920
mysql fetch array error or you may even

107
00:04:11,920 --> 00:04:14,400
find a completely different behavior

108
00:04:14,400 --> 00:04:16,639
when you insert an injection such as a

109
00:04:16,639 --> 00:04:19,600
302 found

110
00:04:19,600 --> 00:04:22,240
as for time based you can use a tool

111
00:04:22,240 --> 00:04:24,320
such as burp to actually see the exact

112
00:04:24,320 --> 00:04:25,759
amount of time

113
00:04:25,759 --> 00:04:28,880
between responses so here um you see

114
00:04:28,880 --> 00:04:31,120
there's 27 milliseconds and

115
00:04:31,120 --> 00:04:34,000
uh 30 000 milliseconds and it gained

116
00:04:34,000 --> 00:04:35,520
like 30 seconds sleep so you're going to

117
00:04:35,520 --> 00:04:36,960
want to do it uh

118
00:04:36,960 --> 00:04:38,639
multiple times

119
00:04:38,639 --> 00:04:41,280
and use different sleep periods then so

120
00:04:41,280 --> 00:04:44,000
go like 10 15 20 and make sure it hits

121
00:04:44,000 --> 00:04:46,240
it every time before you actually start

122
00:04:46,240 --> 00:04:48,560
exploiting as you want to make sure that

123
00:04:48,560 --> 00:04:52,560
the server is just not slow to respond

124
00:04:53,440 --> 00:04:56,590
so looking at this in java source code

125
00:04:56,590 --> 00:04:58,080
[Music]

126
00:04:58,080 --> 00:04:59,919
here we have a

127
00:04:59,919 --> 00:05:02,320
string

128
00:05:02,320 --> 00:05:05,360
called query and it has an sql statement

129
00:05:05,360 --> 00:05:07,520
with the select account balances from

130
00:05:07,520 --> 00:05:08,880
user data

131
00:05:08,880 --> 00:05:10,479
and when we

132
00:05:10,479 --> 00:05:12,320
and then at the end we have a get

133
00:05:12,320 --> 00:05:14,080
parameter

134
00:05:14,080 --> 00:05:15,840
for customer name

135
00:05:15,840 --> 00:05:18,479
and we pass this entire statement

136
00:05:18,479 --> 00:05:20,479
straight to the database with no

137
00:05:20,479 --> 00:05:22,320
filtering at all

138
00:05:22,320 --> 00:05:25,840
which is not good so here we can inject

139
00:05:25,840 --> 00:05:28,639
anything we want into the get parameter

140
00:05:28,639 --> 00:05:30,479
we don't even have to really use a

141
00:05:30,479 --> 00:05:32,479
single quote because the get parameter

142
00:05:32,479 --> 00:05:34,000
doesn't appear to even be in single

143
00:05:34,000 --> 00:05:35,039
quotes

144
00:05:35,039 --> 00:05:36,960
so this is not so if you're looking

145
00:05:36,960 --> 00:05:38,880
through java source code this would

146
00:05:38,880 --> 00:05:40,639
definitely be vulnerable

147
00:05:40,639 --> 00:05:43,360
so if we wanted to fix this to start you

148
00:05:43,360 --> 00:05:44,720
want to pass in

149
00:05:44,720 --> 00:05:46,800
um with a question mark

150
00:05:46,800 --> 00:05:49,520
into the java source code here we see

151
00:05:49,520 --> 00:05:52,799
that the string query

152
00:05:53,600 --> 00:05:55,840
at the end instead of passing the get

153
00:05:55,840 --> 00:05:57,919
parameter directly in we're going to

154
00:05:57,919 --> 00:05:59,199
pass it in

155
00:05:59,199 --> 00:06:01,360
safely so that's how you would pass an

156
00:06:01,360 --> 00:06:03,759
sql get parameter

157
00:06:03,759 --> 00:06:07,120
safely in java

158
00:06:07,120 --> 00:06:09,630
as for net this is another um

159
00:06:09,630 --> 00:06:11,440
[Music]

160
00:06:11,440 --> 00:06:12,560
as you can see there's going to be a

161
00:06:12,560 --> 00:06:15,360
common trend here we're just passing in

162
00:06:15,360 --> 00:06:18,319
the variables with a login username and

163
00:06:18,319 --> 00:06:20,960
login password again which is the pluses

164
00:06:20,960 --> 00:06:23,199
which is going to be vulnerable

165
00:06:23,199 --> 00:06:25,759
to sql injection simply because we have

166
00:06:25,759 --> 00:06:27,759
no filtering happening and we're passing

167
00:06:27,759 --> 00:06:30,319
these statements directly in

168
00:06:30,319 --> 00:06:33,600
so dotnet is a little different

169
00:06:33,600 --> 00:06:36,080
it's not as intuitive as java so for

170
00:06:36,080 --> 00:06:39,840
sanitization you have two main options

171
00:06:39,840 --> 00:06:42,800
you can either use the string

172
00:06:42,800 --> 00:06:44,479
you can either replace it

173
00:06:44,479 --> 00:06:46,160
with uh every time you see a single

174
00:06:46,160 --> 00:06:47,520
quote you replace it with another single

175
00:06:47,520 --> 00:06:50,800
quote or you can use parameterization

176
00:06:50,800 --> 00:06:52,319
um

177
00:06:52,319 --> 00:06:54,960
using the sql parameter collection on

178
00:06:54,960 --> 00:06:57,199
get parameters and you'll probably also

179
00:06:57,199 --> 00:06:59,039
want to use it on post parameters if you

180
00:06:59,039 --> 00:07:03,159
have like a login prompt

181
00:07:05,120 --> 00:07:08,000
so um for php

182
00:07:08,000 --> 00:07:11,120
um this is a cve discovered by me and

183
00:07:11,120 --> 00:07:14,000
sam ferguson also known as a fine

184
00:07:14,000 --> 00:07:15,360
security

185
00:07:15,360 --> 00:07:17,039
he'll be doing a talk

186
00:07:17,039 --> 00:07:19,840
um i believe on day two

187
00:07:19,840 --> 00:07:20,960
so you'll definitely want to check him

188
00:07:20,960 --> 00:07:23,919
out a super amazing person

189
00:07:23,919 --> 00:07:26,240
but this is a cve that we discovered

190
00:07:26,240 --> 00:07:27,039
through

191
00:07:27,039 --> 00:07:28,720
php source code

192
00:07:28,720 --> 00:07:32,240
so to start we see we have a

193
00:07:32,240 --> 00:07:34,400
mysql query that

194
00:07:34,400 --> 00:07:35,590
selects um

195
00:07:35,590 --> 00:07:36,960
[Music]

196
00:07:36,960 --> 00:07:39,039
just a select star from

197
00:07:39,039 --> 00:07:40,560
and then we

198
00:07:40,560 --> 00:07:44,960
pass it in to the

199
00:07:44,960 --> 00:07:48,160
mysql fetch array and we pass the entire

200
00:07:48,160 --> 00:07:50,720
sql statement in and we see there is a

201
00:07:50,720 --> 00:07:54,080
post parameter called pin code that is

202
00:07:54,080 --> 00:07:57,199
passed through the dot trim

203
00:07:57,199 --> 00:08:00,000
again we see that the

204
00:08:00,000 --> 00:08:02,479
post parameter is passed directly

205
00:08:02,479 --> 00:08:03,280
through

206
00:08:03,280 --> 00:08:06,560
with no filtering happening at all

207
00:08:06,560 --> 00:08:09,120
so for all of source code you can tell

208
00:08:09,120 --> 00:08:11,199
really that you're going to if you don't

209
00:08:11,199 --> 00:08:12,639
see filtering

210
00:08:12,639 --> 00:08:14,000
it's pretty obvious you don't want to

211
00:08:14,000 --> 00:08:16,160
pass the post get whatever kind of

212
00:08:16,160 --> 00:08:18,560
parameters directly in with user input

213
00:08:18,560 --> 00:08:20,000
you're always going to want to use some

214
00:08:20,000 --> 00:08:21,360
form of filtering so if you don't see

215
00:08:21,360 --> 00:08:24,080
filtering or you see improper filtering

216
00:08:24,080 --> 00:08:25,440
such as here

217
00:08:25,440 --> 00:08:28,800
where trim simply removes white spaces

218
00:08:28,800 --> 00:08:31,039
um but it's not even used properly

219
00:08:31,039 --> 00:08:33,279
you're going to see that

220
00:08:33,279 --> 00:08:35,839
it is vulnerable to sql injections if

221
00:08:35,839 --> 00:08:38,159
the parameters just thrown in with no

222
00:08:38,159 --> 00:08:39,760
sanitization

223
00:08:39,760 --> 00:08:40,399
so

224
00:08:40,399 --> 00:08:41,760
fixing this

225
00:08:41,760 --> 00:08:44,560
um i fixed this myself with one very

226
00:08:44,560 --> 00:08:47,360
simple thing i use the mysql reel escape

227
00:08:47,360 --> 00:08:48,240
string

228
00:08:48,240 --> 00:08:51,680
which basically escapes any

229
00:08:51,680 --> 00:08:53,360
any malicious characters you can pretty

230
00:08:53,360 --> 00:08:55,120
much think of so single quotes double

231
00:08:55,120 --> 00:08:59,120
quotes i believe it escapes like um

232
00:08:59,120 --> 00:09:02,160
equals or equal signs and everything so

233
00:09:02,160 --> 00:09:03,839
all i had to do was just

234
00:09:03,839 --> 00:09:06,399
one extra line of code to

235
00:09:06,399 --> 00:09:08,720
change this into something that wouldn't

236
00:09:08,720 --> 00:09:12,399
be vulnerable to sql injections

237
00:09:14,560 --> 00:09:16,800
so now that we know how to locate sql

238
00:09:16,800 --> 00:09:19,040
injections through source code review

239
00:09:19,040 --> 00:09:21,120
and a black box review we're going to

240
00:09:21,120 --> 00:09:22,800
have to

241
00:09:22,800 --> 00:09:25,120
learn how to actually extract data from

242
00:09:25,120 --> 00:09:29,519
it so earlier i said we can't just

243
00:09:29,519 --> 00:09:30,720
see

244
00:09:30,720 --> 00:09:33,040
output returned to us so we're going to

245
00:09:33,040 --> 00:09:35,519
have to ask true and false statements

246
00:09:35,519 --> 00:09:36,800
to see

247
00:09:36,800 --> 00:09:40,399
what's happening on the back end so here

248
00:09:40,399 --> 00:09:43,680
i have an example that shows when we say

249
00:09:43,680 --> 00:09:45,519
or one equals one

250
00:09:45,519 --> 00:09:48,320
we're able to load the page properly but

251
00:09:48,320 --> 00:09:50,399
when we say one equals two the page

252
00:09:50,399 --> 00:09:53,200
errors out

253
00:09:54,320 --> 00:09:55,200
so

254
00:09:55,200 --> 00:09:57,519
here is um

255
00:09:57,519 --> 00:10:00,160
the cve that we had discovered and i'm

256
00:10:00,160 --> 00:10:02,320
throwing it in through burp

257
00:10:02,320 --> 00:10:04,320
so to start i throw it in through the

258
00:10:04,320 --> 00:10:05,600
vulnerable

259
00:10:05,600 --> 00:10:08,079
um post parameter otherwise known as pin

260
00:10:08,079 --> 00:10:10,640
code and it has to be url encoded so i

261
00:10:10,640 --> 00:10:13,920
added the unurl encoded um payload at

262
00:10:13,920 --> 00:10:15,200
the top

263
00:10:15,200 --> 00:10:18,240
and so when i sent it i sent in a true

264
00:10:18,240 --> 00:10:19,920
statement of

265
00:10:19,920 --> 00:10:22,240
single quote or one equals one and then

266
00:10:22,240 --> 00:10:24,720
i commented out the rest

267
00:10:24,720 --> 00:10:27,519
and i observed this entire response and

268
00:10:27,519 --> 00:10:29,760
when i the difference i found is this

269
00:10:29,760 --> 00:10:33,920
gave me a 302 redirect

270
00:10:33,920 --> 00:10:36,560
so then looking at a false statement i

271
00:10:36,560 --> 00:10:38,880
sent in the false statement of

272
00:10:38,880 --> 00:10:41,760
single quote or one equals two

273
00:10:41,760 --> 00:10:47,800
and i saw that this gave me a 200 okay

274
00:10:48,640 --> 00:10:50,560
so now that i know the difference

275
00:10:50,560 --> 00:10:55,200
between a true and false statement

276
00:10:55,200 --> 00:10:57,519
i now want to be able to actually ask

277
00:10:57,519 --> 00:11:00,000
the database

278
00:11:00,000 --> 00:11:02,160
what is true and what is false

279
00:11:02,160 --> 00:11:06,079
so the simplest way to do this is to ask

280
00:11:06,079 --> 00:11:07,519
um

281
00:11:07,519 --> 00:11:10,720
if a value in a certain table is true or

282
00:11:10,720 --> 00:11:14,160
false so here i just did a simple select

283
00:11:14,160 --> 00:11:16,000
statement right pretend this is a white

284
00:11:16,000 --> 00:11:18,000
box review so we have access to the

285
00:11:18,000 --> 00:11:19,279
database

286
00:11:19,279 --> 00:11:21,040
um

287
00:11:21,040 --> 00:11:23,519
so i did a select statement um on the

288
00:11:23,519 --> 00:11:26,399
admin table and i see that there's one

289
00:11:26,399 --> 00:11:27,920
user

290
00:11:27,920 --> 00:11:32,479
admin with an md5 hash password

291
00:11:32,560 --> 00:11:33,839
so to

292
00:11:33,839 --> 00:11:36,079
get a single character

293
00:11:36,079 --> 00:11:40,320
from the database we can use substring

294
00:11:40,320 --> 00:11:43,040
so here i'm using a select statement

295
00:11:43,040 --> 00:11:45,839
on the user table

296
00:11:45,839 --> 00:11:47,760
and i'm selecting

297
00:11:47,760 --> 00:11:49,600
uh the substring

298
00:11:49,600 --> 00:11:50,880
one one

299
00:11:50,880 --> 00:11:52,160
uh the first

300
00:11:52,160 --> 00:11:55,680
value of substring one is the position

301
00:11:55,680 --> 00:11:58,160
so it's going to be the very first

302
00:11:58,160 --> 00:11:59,760
and the second

303
00:11:59,760 --> 00:12:00,720
um

304
00:12:00,720 --> 00:12:03,760
num the second one is going to be the

305
00:12:03,760 --> 00:12:06,399
amount of characters returned

306
00:12:06,399 --> 00:12:10,000
and then i always include a limit one in

307
00:12:10,000 --> 00:12:11,600
this case just because we only want a

308
00:12:11,600 --> 00:12:12,560
single

309
00:12:12,560 --> 00:12:15,040
instance returned if we return more than

310
00:12:15,040 --> 00:12:16,560
one instance

311
00:12:16,560 --> 00:12:18,079
it can

312
00:12:18,079 --> 00:12:20,800
mess up our script at the end because

313
00:12:20,800 --> 00:12:23,440
it's getting too much data returned or

314
00:12:23,440 --> 00:12:25,440
the database not might not be able to

315
00:12:25,440 --> 00:12:27,360
query it correctly

316
00:12:27,360 --> 00:12:29,920
so this is going to be our main form of

317
00:12:29,920 --> 00:12:31,440
extracting data

318
00:12:31,440 --> 00:12:34,160
is just a simple select statement

319
00:12:34,160 --> 00:12:36,560
using substrings so we can extract one

320
00:12:36,560 --> 00:12:39,839
character at a time

321
00:12:40,880 --> 00:12:43,600
so now we need to actually ask it a

322
00:12:43,600 --> 00:12:45,120
question

323
00:12:45,120 --> 00:12:47,600
so after we have set up our select

324
00:12:47,600 --> 00:12:49,600
statement we're going to basically ask

325
00:12:49,600 --> 00:12:51,760
if the first letter

326
00:12:51,760 --> 00:12:54,079
is equal to a

327
00:12:54,079 --> 00:12:56,959
and if it does we'll notice that the

328
00:12:56,959 --> 00:12:58,959
response from the database is going to

329
00:12:58,959 --> 00:13:00,480
equal one

330
00:13:00,480 --> 00:13:03,680
otherwise known as true meanwhile if we

331
00:13:03,680 --> 00:13:06,639
ask it a false statement such as is the

332
00:13:06,639 --> 00:13:09,040
first letter from the database

333
00:13:09,040 --> 00:13:11,360
or is the first letter from the username

334
00:13:11,360 --> 00:13:13,200
table b

335
00:13:13,200 --> 00:13:14,000
or

336
00:13:14,000 --> 00:13:16,160
any other character or letter

337
00:13:16,160 --> 00:13:18,560
it will return false

338
00:13:18,560 --> 00:13:20,880
so now we have a way of actually asking

339
00:13:20,880 --> 00:13:22,240
the database

340
00:13:22,240 --> 00:13:25,360
true and false questions using substring

341
00:13:25,360 --> 00:13:29,200
so we can ask it one at a time

342
00:13:30,800 --> 00:13:31,839
so

343
00:13:31,839 --> 00:13:35,120
now i will insert that payload into

344
00:13:35,120 --> 00:13:38,320
the actual vulnerability so here i

345
00:13:38,320 --> 00:13:40,880
insert the select statement and notice

346
00:13:40,880 --> 00:13:43,279
that in this instance when you're

347
00:13:43,279 --> 00:13:44,959
actually inserting it you have to wrap

348
00:13:44,959 --> 00:13:46,880
the entire select statement

349
00:13:46,880 --> 00:13:50,240
in uh brackets just because you'll

350
00:13:50,240 --> 00:13:51,519
pretty much always have to do that

351
00:13:51,519 --> 00:13:54,000
because you're going to want to not err

352
00:13:54,000 --> 00:13:56,240
out the um

353
00:13:56,240 --> 00:13:58,480
the existing code since we're in using

354
00:13:58,480 --> 00:14:00,320
an or statement

355
00:14:00,320 --> 00:14:02,480
um so here i just

356
00:14:02,480 --> 00:14:04,800
perform exactly what we saw where i

357
00:14:04,800 --> 00:14:08,240
select the substring of the username 1 1

358
00:14:08,240 --> 00:14:11,519
from admin and i ask it if it equals a

359
00:14:11,519 --> 00:14:13,920
and here i see it gives me the same 302

360
00:14:13,920 --> 00:14:17,120
behavior of when i do a 1 equals 1

361
00:14:17,120 --> 00:14:19,120
also known as true

362
00:14:19,120 --> 00:14:22,639
so i can confirm that 1 equals 1 on the

363
00:14:22,639 --> 00:14:23,839
302

364
00:14:23,839 --> 00:14:27,279
is true and i can confirm that a is the

365
00:14:27,279 --> 00:14:30,560
first letter of the username

366
00:14:30,560 --> 00:14:31,680
and

367
00:14:31,680 --> 00:14:34,959
if i follow the redirect i see that off

368
00:14:34,959 --> 00:14:39,199
the 302 i am brought to a new web page

369
00:14:39,199 --> 00:14:42,720
and on that web page it has the title of

370
00:14:42,720 --> 00:14:44,959
course enroll

371
00:14:44,959 --> 00:14:46,880
so with all this information

372
00:14:46,880 --> 00:14:49,360
i now can create a script

373
00:14:49,360 --> 00:14:51,360
to brute force this so i don't have to

374
00:14:51,360 --> 00:14:53,760
go through every single character

375
00:14:53,760 --> 00:14:56,639
and by myself so to start we're going to

376
00:14:56,639 --> 00:14:58,480
create a dictionary

377
00:14:58,480 --> 00:15:00,800
so i start by making sam and i started

378
00:15:00,800 --> 00:15:04,480
by making a pass list and user list so

379
00:15:04,480 --> 00:15:05,760
the pass list

380
00:15:05,760 --> 00:15:07,360
we had access to the database so we knew

381
00:15:07,360 --> 00:15:10,720
it was an md5 hash so we only used

382
00:15:10,720 --> 00:15:13,440
string dot string.ascii lowercase

383
00:15:13,440 --> 00:15:17,360
and we only did a range of numbers

384
00:15:17,360 --> 00:15:20,240
excuse me from one to nine and then we

385
00:15:20,240 --> 00:15:22,160
passed that into the past list and for

386
00:15:22,160 --> 00:15:24,079
the user list we included uppercase

387
00:15:24,079 --> 00:15:26,639
characters just in case

388
00:15:26,639 --> 00:15:29,440
so now that we have our password and

389
00:15:29,440 --> 00:15:31,759
username list we're going to start by

390
00:15:31,759 --> 00:15:35,519
creating a session

391
00:15:35,600 --> 00:15:36,880
excuse me

392
00:15:36,880 --> 00:15:38,160
so

393
00:15:38,160 --> 00:15:40,560
for this attack it was a low

394
00:15:40,560 --> 00:15:43,680
authenticated user to an admin account

395
00:15:43,680 --> 00:15:45,839
so we actually have to log in first so

396
00:15:45,839 --> 00:15:47,680
we're going to be using the python

397
00:15:47,680 --> 00:15:49,440
request library

398
00:15:49,440 --> 00:15:51,120
and i wanted to point out here that we

399
00:15:51,120 --> 00:15:53,519
had to use

400
00:15:53,519 --> 00:15:54,480
session

401
00:15:54,480 --> 00:15:56,639
equals request.session

402
00:15:56,639 --> 00:16:00,399
um so with this module you can actually

403
00:16:00,399 --> 00:16:01,519
pass

404
00:16:01,519 --> 00:16:05,079
session cookies and tokens using

405
00:16:05,079 --> 00:16:08,000
request.session with a capital s so when

406
00:16:08,000 --> 00:16:12,079
we log in we're obviously given a php

407
00:16:12,079 --> 00:16:14,560
id or some form session id cookie so

408
00:16:14,560 --> 00:16:18,480
instead of having to extract that cookie

409
00:16:18,480 --> 00:16:21,040
we're able to

410
00:16:21,040 --> 00:16:23,839
pass it manually using request.session

411
00:16:23,839 --> 00:16:26,079
and then we can just log in here as you

412
00:16:26,079 --> 00:16:29,199
can see data equals f username and f

413
00:16:29,199 --> 00:16:30,959
password so we're passing in the

414
00:16:30,959 --> 00:16:33,680
username and password that the user

415
00:16:33,680 --> 00:16:35,120
input would like

416
00:16:35,120 --> 00:16:37,519
and then we're going to post it

417
00:16:37,519 --> 00:16:39,839
session.post since most logins should be

418
00:16:39,839 --> 00:16:41,759
a post

419
00:16:41,759 --> 00:16:43,759
with the url headers equals headers and

420
00:16:43,759 --> 00:16:46,959
data equals data

421
00:16:47,120 --> 00:16:49,360
so now we get to the actual

422
00:16:49,360 --> 00:16:51,680
um chunk of the script

423
00:16:51,680 --> 00:16:53,680
so as you can see at the top we have

424
00:16:53,680 --> 00:16:55,680
print admin username so we're going to

425
00:16:55,680 --> 00:16:58,079
start by targeting the administrator

426
00:16:58,079 --> 00:17:00,479
user

427
00:17:00,800 --> 00:17:05,079
so to start we use a for i in range of

428
00:17:05,079 --> 00:17:09,039
133 133 is a little arbitrary you can do

429
00:17:09,039 --> 00:17:11,599
one to any number you want we chose 33

430
00:17:11,599 --> 00:17:14,160
since um we kept it consistent with the

431
00:17:14,160 --> 00:17:15,439
password list

432
00:17:15,439 --> 00:17:19,439
and md5 hashes are 32 characters

433
00:17:19,439 --> 00:17:22,240
we then start with a counter

434
00:17:22,240 --> 00:17:24,480
equals zero

435
00:17:24,480 --> 00:17:26,880
which will become more obvious later on

436
00:17:26,880 --> 00:17:30,240
and we also define a

437
00:17:30,240 --> 00:17:33,280
a variable find equals false

438
00:17:33,280 --> 00:17:36,320
so now we're going for j in user list

439
00:17:36,320 --> 00:17:38,880
which if you remember user list is our

440
00:17:38,880 --> 00:17:42,559
dictionary of string ascii lowercase

441
00:17:42,559 --> 00:17:44,480
ascii uppercase

442
00:17:44,480 --> 00:17:45,280
and

443
00:17:45,280 --> 00:17:47,200
um

444
00:17:47,200 --> 00:17:50,799
numbers zero through nine

445
00:17:50,799 --> 00:17:52,720
so now we're going to be iterating 1

446
00:17:52,720 --> 00:17:54,559
through 33

447
00:17:54,559 --> 00:17:57,440
so i is 1 through 33

448
00:17:57,440 --> 00:17:58,559
and j

449
00:17:58,559 --> 00:17:59,600
is

450
00:17:59,600 --> 00:18:00,720
all of our

451
00:18:00,720 --> 00:18:03,760
dictionary attacks

452
00:18:03,760 --> 00:18:05,919
so now we get to where we perform the

453
00:18:05,919 --> 00:18:07,200
actual attack

454
00:18:07,200 --> 00:18:09,919
to start we have url

455
00:18:09,919 --> 00:18:12,000
which is equal to hostname and then that

456
00:18:12,000 --> 00:18:15,520
is the url we were using

457
00:18:15,520 --> 00:18:17,679
as we state their url may change based

458
00:18:17,679 --> 00:18:20,400
on implementation

459
00:18:20,400 --> 00:18:22,240
headers are the headers we were using

460
00:18:22,240 --> 00:18:24,799
you don't necessarily need them and data

461
00:18:24,799 --> 00:18:26,880
is where we perform the actual attack

462
00:18:26,880 --> 00:18:29,360
because it is a post request so you see

463
00:18:29,360 --> 00:18:32,400
here we're performing the same select

464
00:18:32,400 --> 00:18:35,039
select substring username and then we

465
00:18:35,039 --> 00:18:37,280
pass in the variable i

466
00:18:37,280 --> 00:18:40,480
so here i is going to start at 1 which

467
00:18:40,480 --> 00:18:41,440
if you

468
00:18:41,440 --> 00:18:44,320
recall one will be the first character

469
00:18:44,320 --> 00:18:46,000
from the database

470
00:18:46,000 --> 00:18:49,840
and we're going to set it equal to j

471
00:18:49,840 --> 00:18:52,160
so every time we get a hit

472
00:18:52,160 --> 00:18:53,840
so what we're doing first is we're

473
00:18:53,840 --> 00:18:56,640
iterating through j so we're going to do

474
00:18:56,640 --> 00:18:59,520
select substring username one one from

475
00:18:59,520 --> 00:19:02,720
admin equals zero and then if that

476
00:19:02,720 --> 00:19:05,679
returns false we're going to do equals

477
00:19:05,679 --> 00:19:08,000
one and we're going to iterate all the

478
00:19:08,000 --> 00:19:09,360
way through that

479
00:19:09,360 --> 00:19:12,640
until we get a true statement

480
00:19:12,640 --> 00:19:15,039
and once it hits true we're going to

481
00:19:15,039 --> 00:19:17,600
username will then change to 2. so we

482
00:19:17,600 --> 00:19:19,600
can then extract the

483
00:19:19,600 --> 00:19:21,440
second

484
00:19:21,440 --> 00:19:24,240
the second character from the table

485
00:19:24,240 --> 00:19:27,120
which would be d

486
00:19:27,120 --> 00:19:28,480
and then we're going to send this

487
00:19:28,480 --> 00:19:30,720
request and we're going to do counter

488
00:19:30,720 --> 00:19:33,120
plus equals 1

489
00:19:33,120 --> 00:19:35,440
every single time it sends and every

490
00:19:35,440 --> 00:19:39,600
single time it finds true so that way

491
00:19:39,600 --> 00:19:40,720
we can

492
00:19:40,720 --> 00:19:44,400
continue to raise a i

493
00:19:44,400 --> 00:19:46,240
and then earlier i showed when we

494
00:19:46,240 --> 00:19:49,280
followed the 302 redirect

495
00:19:49,280 --> 00:19:50,160
we

496
00:19:50,160 --> 00:19:53,600
saw that course enroll was found in the

497
00:19:53,600 --> 00:19:55,039
title header

498
00:19:55,039 --> 00:19:58,480
um indicating a true

499
00:19:58,480 --> 00:20:00,240
uh a true statement

500
00:20:00,240 --> 00:20:04,640
so we could have used like if status

501
00:20:04,640 --> 00:20:07,600
if um

502
00:20:07,600 --> 00:20:10,000
a dot status code two but we decided to

503
00:20:10,000 --> 00:20:11,679
use uh text

504
00:20:11,679 --> 00:20:14,000
so we're comparing course enroll

505
00:20:14,000 --> 00:20:15,039
to

506
00:20:15,039 --> 00:20:17,200
um we're basically seeing if course

507
00:20:17,200 --> 00:20:19,600
enroll is there

508
00:20:19,600 --> 00:20:22,000
and if um we're basically just going to

509
00:20:22,000 --> 00:20:24,559
write j out to the screen

510
00:20:24,559 --> 00:20:26,720
and then we hit the break statement so

511
00:20:26,720 --> 00:20:30,159
we go back to the top

512
00:20:30,400 --> 00:20:32,960
next we're using a counter

513
00:20:32,960 --> 00:20:36,000
and we're doing if counter

514
00:20:36,000 --> 00:20:39,120
equals length of user list so if the

515
00:20:39,120 --> 00:20:41,360
counter we assigned earlier

516
00:20:41,360 --> 00:20:43,679
ends up eating the uh ends of the

517
00:20:43,679 --> 00:20:46,159
reading all the way through user list

518
00:20:46,159 --> 00:20:47,520
we're changing

519
00:20:47,520 --> 00:20:50,000
find to true and then we're going to

520
00:20:50,000 --> 00:20:51,919
break it so that way

521
00:20:51,919 --> 00:20:55,360
when we hit the end of the

522
00:20:55,360 --> 00:20:56,799
um

523
00:20:56,799 --> 00:20:59,679
the end of the

524
00:20:59,679 --> 00:21:02,799
username we no longer have to

525
00:21:02,799 --> 00:21:04,400
we don't just get stuck in an endless

526
00:21:04,400 --> 00:21:05,919
loop so when we hit

527
00:21:05,919 --> 00:21:07,919
admin and we hit the n

528
00:21:07,919 --> 00:21:10,080
and then it goes and checks if there's

529
00:21:10,080 --> 00:21:12,000
like if it's administrator and it finds

530
00:21:12,000 --> 00:21:13,200
there's no more characters because it

531
00:21:13,200 --> 00:21:16,320
iterated all the way through user list

532
00:21:16,320 --> 00:21:19,039
it will break and we can move on to our

533
00:21:19,039 --> 00:21:20,880
next one

534
00:21:20,880 --> 00:21:22,159
so next

535
00:21:22,159 --> 00:21:25,200
we perform the exact same attack

536
00:21:25,200 --> 00:21:26,320
to

537
00:21:26,320 --> 00:21:29,200
go after the password hash

538
00:21:29,200 --> 00:21:31,760
so the only difference here

539
00:21:31,760 --> 00:21:35,280
is we change the table we're talking

540
00:21:35,280 --> 00:21:38,080
from username to password

541
00:21:38,080 --> 00:21:41,120
and we changed the length

542
00:21:41,120 --> 00:21:43,679
from user list to past list because

543
00:21:43,679 --> 00:21:45,600
remember we used slightly different

544
00:21:45,600 --> 00:21:47,039
lists

545
00:21:47,039 --> 00:21:48,720
just to help with the password list

546
00:21:48,720 --> 00:21:52,799
since we knew it was going to be md5

547
00:21:54,320 --> 00:21:56,960
so if we run this script it takes three

548
00:21:56,960 --> 00:21:59,600
arguments uh the host name the username

549
00:21:59,600 --> 00:22:02,640
and the password and as you can see when

550
00:22:02,640 --> 00:22:05,200
we run it it's able to properly extract

551
00:22:05,200 --> 00:22:08,559
the admin and password hash or sorry the

552
00:22:08,559 --> 00:22:10,960
username admin and the password hash of

553
00:22:10,960 --> 00:22:12,880
an md5 hashed

554
00:22:12,880 --> 00:22:14,320
and

555
00:22:14,320 --> 00:22:16,000
we didn't have to manually query the

556
00:22:16,000 --> 00:22:18,159
database for all that information it's a

557
00:22:18,159 --> 00:22:20,400
lot easier just to let a script iterate

558
00:22:20,400 --> 00:22:23,720
through it

559
00:22:26,320 --> 00:22:27,919
so if you have any questions please let

560
00:22:27,919 --> 00:22:29,760
me know i would be happy to answer them

561
00:22:29,760 --> 00:22:31,679
or feel free to reach out to me on

562
00:22:31,679 --> 00:22:36,000
twitter or send me an email thank you

