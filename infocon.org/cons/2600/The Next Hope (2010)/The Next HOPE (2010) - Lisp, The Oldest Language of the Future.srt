1
00:00:00,149 --> 00:00:03,310
the next in there more less than what's
up with less spend of

2
00:00:03,310 --> 00:00:06,859
on how come I can't get enough let's
spend so forth

3
00:00:06,859 --> 00:00:10,840
and I we're gonna hear all about the
answers those questions right now mmm

4
00:00:10,840 --> 00:00:17,840
better dressed than I am

5
00:00:24,490 --> 00:00:31,040
some people recognize this in

6
00:00:31,040 --> 00:00:37,840
home

7
00:00:37,840 --> 00:00:38,829
this is my third ho

8
00:00:38,829 --> 00:00:44,420
my first presentation maybe sixteen
years

9
00:00:44,420 --> 00:00:51,420
not at all either

10
00:00:52,600 --> 00:00:59,600
page I just put the laptop around

11
00:01:08,520 --> 00:01:11,820
only one he's good enough excellent

12
00:01:11,820 --> 00:01:18,820
switch that perfect

13
00:01:19,540 --> 00:01:23,920
no

14
00:01:23,920 --> 00:01:30,920
good enough right you can read now looks
like crap

15
00:01:32,090 --> 00:01:35,400
whatever thanks for coming to the stock

16
00:01:35,400 --> 00:01:39,740
expected maybe a quarter the room

17
00:01:39,740 --> 00:01:46,740
but it is 6 o'clock so sorry very

18
00:01:50,750 --> 00:01:53,930
the stock is this field is linked to the
future

19
00:01:53,930 --> 00:01:57,280
which could be a grumpy old this
person's

20
00:01:57,280 --> 00:02:01,840
you're excited about aspect-oriented
programming to solve that twenty years

21
00:02:01,840 --> 00:02:02,360
ago

22
00:02:02,360 --> 00:02:06,720
but no one bothered aspin's onto the
information

23
00:02:06,720 --> 00:02:11,580
title sounds like a pretty tall order

24
00:02:11,580 --> 00:02:14,880
but history link speak for itself I can
give you

25
00:02:14,880 --> 00:02:21,350
in the history of the language for this
to be a

26
00:02:21,350 --> 00:02:25,200
worthwhile talk

27
00:02:25,200 --> 00:02:28,110
maybe a little dense and content mister
wrote that before I

28
00:02:28,110 --> 00:02:33,460
find out how long it takes to make it
slide hopefully there's enough content

29
00:02:33,460 --> 00:02:34,000
in here

30
00:02:34,000 --> 00:02:37,320
not care for you just might learn
something before it's there

31
00:02:37,320 --> 00:02:42,030
I am sorry

32
00:02:42,030 --> 00:02:46,150
is this better tackle louder

33
00:02:46,150 --> 00:02:50,020
you know

34
00:02:50,020 --> 00:02:53,440
maybe you know something about list pry
gonna say parentheses

35
00:02:53,440 --> 00:02:56,480
may be sought a magazine article

36
00:02:56,480 --> 00:03:00,459
when you come across in a program worker
program language surveys course

37
00:03:00,460 --> 00:03:06,800
experimental in college either you
thought it was too complicated too

38
00:03:06,800 --> 00:03:07,580
simple

39
00:03:07,580 --> 00:03:13,620
to weird functional style isn't for
everyone

40
00:03:13,620 --> 00:03:17,050
and most the languages to send from

41
00:03:17,050 --> 00:03:20,850
alkyl and look like seein

42
00:03:20,850 --> 00:03:26,210
UFC and pearl PHP it's all basically the
same

43
00:03:26,210 --> 00:03:29,370
because it's old

44
00:03:29,370 --> 00:03:33,570
fortran came out in 1957 was with 58 and

45
00:03:33,570 --> 00:03:40,280
couple was 59 you know it's considered
when the classics

46
00:03:40,280 --> 00:03:44,520
but because it's so weird and was

47
00:03:44,520 --> 00:03:47,850
was slow for a while because the
hardware wasn't there didn't compile

48
00:03:47,850 --> 00:03:48,920
very easily

49
00:03:48,920 --> 00:03:52,570
into machine code Justin really catch on

50
00:03:52,570 --> 00:03:55,750
it's been stigmatized

51
00:03:55,750 --> 00:03:59,830
as being only for AI as is a bad thing

52
00:03:59,830 --> 00:04:06,280
you would think it's for a are you can
use in everything but

53
00:04:06,280 --> 00:04:11,450
here we go here's some nice quotes about
less is all come from

54
00:04:11,450 --> 00:04:16,920
number of years ago when people reading
books about it has a

55
00:04:16,920 --> 00:04:22,380
any resurgence now at first one is if
you give someone fortune yes fortran

56
00:04:22,380 --> 00:04:26,290
which is true but if you give someone
list P as any language he pleases

57
00:04:26,290 --> 00:04:30,780
and while this is in the afterward to a
a book about scheme

58
00:04:30,780 --> 00:04:35,760
hope will be able to show you at least a
little bit how this might be possible

59
00:04:35,760 --> 00:04:41,140
typically when you're reading program
unless you will write small functions

60
00:04:41,140 --> 00:04:44,890
that do what you want and then you build
on top of it until

61
00:04:44,890 --> 00:04:48,680
eventually you've built language towards
your problem instead have

62
00:04:48,680 --> 00:04:53,390
in a lot of other languages where you go
back to the boss and say well we can't

63
00:04:53,390 --> 00:04:54,479
deliver the sun-times

64
00:04:54,479 --> 00:04:58,560
so let's cut this feature or well the
spec isn't really clear on this so we're

65
00:04:58,560 --> 00:04:59,820
not going to do it that way

66
00:04:59,820 --> 00:05:04,190
second quote here all problems in
computer science we solve another level

67
00:05:04,190 --> 00:05:05,169
of indirection

68
00:05:05,169 --> 00:05:10,750
the addendum is except for too many
layers been direction because this is a

69
00:05:10,750 --> 00:05:12,200
functional programming language

70
00:05:12,200 --> 00:05:15,880
functions are a first-class citizen

71
00:05:15,880 --> 00:05:19,360
so phrase that bothered me because every
time I try to look it up

72
00:05:19,360 --> 00:05:23,400
I'll just get more confused first class
isn't just means

73
00:05:23,400 --> 00:05:27,620
that in the language a function is on
the same power as a variable

74
00:05:27,620 --> 00:05:32,030
you can pass functions to other
functions functions can return functions

75
00:05:32,030 --> 00:05:33,990
you can store function in a variable
name

76
00:05:33,990 --> 00:05:37,560
although mister actually called symbols

77
00:05:37,560 --> 00:05:42,330
not really variables last quote

78
00:05:42,330 --> 00:05:47,000
also speaks to the the ability of you
too

79
00:05:47,000 --> 00:05:50,910
right language how you want build your
little utility classes

80
00:05:50,910 --> 00:05:53,979
and eventually you end up with something
that is ideally suited to solving

81
00:05:53,979 --> 00:05:55,130
whatever problem you have

82
00:05:55,130 --> 00:06:00,020
is indeed rather hot in here

83
00:06:00,020 --> 00:06:05,409
his jacket isn't helping

84
00:06:05,410 --> 00:06:12,410
but it's part of the stick home

85
00:06:12,750 --> 00:06:18,090
I

86
00:06:18,090 --> 00:06:20,510
so is it through the books that are used
for

87
00:06:20,510 --> 00:06:24,570
this talk and in case I do a terrible
job

88
00:06:24,570 --> 00:06:31,570
you can read them to the the one all the
way on the left is probably the gentlest

89
00:06:32,750 --> 00:06:36,020
it's a a gentle introduction to symbolic
computation

90
00:06:36,020 --> 00:06:39,219
if you've never programmed at all this
book is good

91
00:06:39,220 --> 00:06:45,500
they don't even start with the West
syntax but the gradually introduce it

92
00:06:45,500 --> 00:06:46,460
has a very good

93
00:06:46,460 --> 00:06:52,240
explanation about recursion the nice
picture the can happen that's only in

94
00:06:52,240 --> 00:06:54,360
the print version didn't make it into
the PDF

95
00:06:54,360 --> 00:06:59,220
fractal coming this by a puter Sibel
maybe

96
00:06:59,220 --> 00:07:02,600
the one of the reasons why there's a
recent upsurge in interest

97
00:07:02,600 --> 00:07:07,690
in the language was published in 2005
you get a Google Talk but

98
00:07:07,690 --> 00:07:14,300
in like it that much don't tell 'em and
an anti-communist by Paul Graham is

99
00:07:14,300 --> 00:07:17,550
woodward hardcore live code in there for
ray tracer

100
00:07:17,550 --> 00:07:21,350
and there's a good reference in their
for the common with standard

101
00:07:21,350 --> 00:07:25,150
is the titles again

102
00:07:25,150 --> 00:07:28,690
and then this last look at the bottom I
wish I had found earlier

103
00:07:28,690 --> 00:07:33,500
but have twelve lessons in there the
basic go over everything

104
00:07:33,500 --> 00:07:36,990
starting from the syntax

105
00:07:36,990 --> 00:07:40,720
all the way up to macros and different
functions and

106
00:07:40,720 --> 00:07:43,820
all that other good stuff

107
00:07:43,820 --> 00:07:47,030
these are a little bit harder core from

108
00:07:47,030 --> 00:07:50,600
the

109
00:07:50,600 --> 00:07:53,889
when all the way on the left is the

110
00:07:53,889 --> 00:07:57,470
but that was used to teach the m86 RR 1

111
00:07:57,470 --> 00:08:01,410
class also known as the weather book at
the purple Booker sixty

112
00:08:01,410 --> 00:08:06,130
on middles programs on West which is
really good if you wanna

113
00:08:06,130 --> 00:08:10,550
really understand macros which I'll get
to later they're not like see macros

114
00:08:10,550 --> 00:08:14,840
and when all the way on the right the
%uh paradigm

115
00:08:14,840 --> 00:08:19,760
artificial intelligence programming is
probably the toughest evolve them

116
00:08:19,760 --> 00:08:23,010
be a examples in Common Lisp

117
00:08:23,010 --> 00:08:28,680
until the point where develops a Prolog
interpreter

118
00:08:28,680 --> 00:08:32,130
then all the examples are in prologue so

119
00:08:32,130 --> 00:08:39,130
missus this is mmm

120
00:08:46,160 --> 00:08:51,410
so common list a gentle introduction
available online in PDF you can buy it

121
00:08:51,410 --> 00:08:56,079
if you want Pratt Common Lisp available
it big monkeys dot com

122
00:08:56,079 --> 00:08:59,260
slash book in C come on let's go up to
buy

123
00:08:59,260 --> 00:09:04,200
I must disagree successful this

124
00:09:04,200 --> 00:09:08,450
the for publishing dispute so that's
available free on his website

125
00:09:08,450 --> 00:09:13,829
I'm sick P is available free at MIT

126
00:09:13,829 --> 00:09:17,470
and they have a whole bunch of to

127
00:09:17,470 --> 00:09:20,950
to have the lectures from 1986 at HP

128
00:09:20,950 --> 00:09:25,010
I hope this classifies as fair use

129
00:09:25,010 --> 00:09:28,240
yeah

130
00:09:28,240 --> 00:09:31,550
so well

131
00:09:31,550 --> 00:09:34,600
let me let me have a good few pages on
this but

132
00:09:34,600 --> 00:09:38,120
you know this isn't the first time I've
tried to learn less

133
00:09:38,120 --> 00:09:42,250
its like I mentioned before with the
first-class functions

134
00:09:42,250 --> 00:09:46,190
first class citizens language if someone
doesn't explain it just right

135
00:09:46,190 --> 00:09:49,550
you're stuck you never gonna progress

136
00:09:49,550 --> 00:09:54,110
past a certain point without the
understanding and 30 physics teachers in

137
00:09:54,110 --> 00:09:54,579
here

138
00:09:54,579 --> 00:10:00,550
no okay maybe maybe you've come across
the phrase in a science textbook where

139
00:10:00,550 --> 00:10:02,839
they're talking about neutron stars and
how

140
00:10:02,839 --> 00:10:06,449
a teaspoon material way 10 tons

141
00:10:06,449 --> 00:10:09,720
amazing but then they never explain it

142
00:10:09,720 --> 00:10:13,920
you know it took me a

143
00:10:13,920 --> 00:10:17,300
numbered years until I read a book by
Robert Castro

144
00:10:17,300 --> 00:10:21,980
red giants and white dwarfs which I
guess was popular science in about

145
00:10:21,980 --> 00:10:25,120
nineteen fifty-six but it never made it
into the tie-ins text books

146
00:10:25,120 --> 00:10:28,880
so they could explain that when they
went to the periodic table

147
00:10:28,880 --> 00:10:32,029
we don't have any elements their dense
enough to a 10 tons

148
00:10:32,029 --> 00:10:35,240
that could explain what nuclear fission
no

149
00:10:35,240 --> 00:10:39,600
what happens in a clap star is the
gravity in the pressure

150
00:10:39,600 --> 00:10:43,050
compress everything so much to the
electrons get stripped of

151
00:10:43,050 --> 00:10:47,860
you're you're familiar image min orange
in the middle of a football stadium

152
00:10:47,860 --> 00:10:51,750
with the electron pair going round the
outside round the outside

153
00:10:51,750 --> 00:10:56,980
that gets all smushed together

154
00:10:56,980 --> 00:11:00,040
see all these other neutrons and protons

155
00:11:00,040 --> 00:11:03,260
come together the elections get stripped
off to become a plasma

156
00:11:03,260 --> 00:11:06,420
eventually the star gets dense enough
that it explodes and that's where we got

157
00:11:06,420 --> 00:11:07,839
our heavier elements from

158
00:11:07,839 --> 00:11:11,140
like I said they never explain that the
could done it

159
00:11:11,140 --> 00:11:14,630
in five seconds missus always this hole
in my understanding

160
00:11:14,630 --> 00:11:21,630
anyway back to list Saregama catch
phrase in

161
00:11:22,220 --> 00:11:25,370
from

162
00:11:25,370 --> 00:11:31,699
whenever the just in case something
terrible happens in your learn anything

163
00:11:31,699 --> 00:11:32,699
from a speech line

164
00:11:32,699 --> 00:11:39,699
so here's some misconceptions

165
00:11:40,320 --> 00:11:41,080
hopefully I will

166
00:11:41,080 --> 00:11:44,500
allay your worries about less I guess
it's good that

167
00:11:44,500 --> 00:11:48,130
to let the the text on the bottom got
cut off because it's not just good for

168
00:11:48,130 --> 00:11:48,710
AI

169
00:11:48,710 --> 00:11:53,920
you can use it for just about anything
the other funny thing is

170
00:11:53,920 --> 00:11:57,209
whenever problem is solved in AI it's no
longer a I

171
00:11:57,210 --> 00:12:02,330
to some useful computer program we
thought the chess was intractable and

172
00:12:02,330 --> 00:12:04,090
we've got machines to be very good at it

173
00:12:04,090 --> 00:12:08,520
suddenly it's you know a whole bunch of
heuristics and up for searches and

174
00:12:08,520 --> 00:12:12,069
you know once a trial in air

175
00:12:12,070 --> 00:12:16,980
yeah no

176
00:12:16,980 --> 00:12:22,070
these is kinda speak for themselves so

177
00:12:22,070 --> 00:12:27,310
in the beginning was the lambda dateline
Princeton New Jersey 1936

178
00:12:27,310 --> 00:12:31,510
mister missus American all the ships at
sea one's a church

179
00:12:31,510 --> 00:12:34,530
was sitting at princeton along with
another interesting people like

180
00:12:34,530 --> 00:12:38,620
could go to land other interesting
people

181
00:12:38,620 --> 00:12:43,080
alan Turing's studied under him and he
developed the lambda calculus or if

182
00:12:43,080 --> 00:12:44,310
you're studying formal

183
00:12:44,310 --> 00:12:48,500
systems you'd say he discovered since
formal systems exist

184
00:12:48,500 --> 00:12:52,870
be on anyone needing to perceive them so

185
00:12:52,870 --> 00:12:58,970
lil bit later I think the year two later
Alan Turing worked out that the lambda

186
00:12:58,970 --> 00:13:02,130
calculus was equivalent to his Turing
machines

187
00:13:02,130 --> 00:13:06,750
they define the same class a function's
and were therefore for this along with

188
00:13:06,750 --> 00:13:09,510
recursion makes up the church during
thesis which covers

189
00:13:09,510 --> 00:13:13,360
things which the computer consoles even
though it's

190
00:13:13,360 --> 00:13:16,910
it's still a thesis slash hypothesis we
can't prove it

191
00:13:16,910 --> 00:13:22,680
there we're accepting it you know we
we've got all our computing systems on

192
00:13:22,680 --> 00:13:22,960
it

193
00:13:22,960 --> 00:13:26,050
look few years later 1958

194
00:13:26,050 --> 00:13:29,900
John McCarthy invents list he was

195
00:13:29,900 --> 00:13:33,210
part iv: a project to do list processing

196
00:13:33,210 --> 00:13:38,310
not sure for what but months log tables
are military applications or whatever

197
00:13:38,310 --> 00:13:41,910
and they try to do with Fortran

198
00:13:41,910 --> 00:13:45,110
and didn't work out too well when the
problems was the

199
00:13:45,110 --> 00:13:48,560
the conditional in Fortran require you
to evaluate the art

200
00:13:48,560 --> 00:13:52,040
you know of both trees in the argument
regardless of whether you're gonna take

201
00:13:52,040 --> 00:13:52,640
them or not

202
00:13:52,640 --> 00:13:56,160
not generally a good idea

203
00:13:56,160 --> 00:14:00,900
if you only want one of the things to
happen so

204
00:14:00,900 --> 00:14:04,850
wanna weird things about the the syntax
is the prefix notation where you put the

205
00:14:04,850 --> 00:14:05,950
operator in the front

206
00:14:05,950 --> 00:14:09,030
a few arguments and this appeared here

207
00:14:09,030 --> 00:14:12,030
you know we've been

208
00:14:12,030 --> 00:14:15,280
doing math since kindergarten with the
operators in the middle

209
00:14:15,280 --> 00:14:20,220
and which is fine if you're something a
few numbers but if you have a whole list

210
00:14:20,220 --> 00:14:21,630
of 100 even after

211
00:14:21,630 --> 00:14:24,720
put the place in the middle you know
what you screw up once

212
00:14:24,720 --> 00:14:28,760
where's your bug no idea on

213
00:14:28,760 --> 00:14:33,660
you can thank list and mister John
McCarthy for the conditional operator

214
00:14:33,660 --> 00:14:37,790
fortunately had effin go to which worked
out pretty well for the

215
00:14:37,790 --> 00:14:44,290
machines at the time but the funny thing
is that it was not

216
00:14:44,290 --> 00:14:48,280
designed right away as a programming
language

217
00:14:48,280 --> 00:14:51,589
was supposed to be way too axiom a ties
mathematics

218
00:14:51,590 --> 00:14:55,190
that they could write expressions in it
proven mathematically through some other

219
00:14:55,190 --> 00:14:55,990
system

220
00:14:55,990 --> 00:14:59,020
and you know

221
00:14:59,020 --> 00:15:02,720
to call Matthew things with eventually

222
00:15:02,720 --> 00:15:06,860
the yes expressions are supposed to be a
lower form %uh

223
00:15:06,860 --> 00:15:10,730
expression that you would write in med
expressions which took a little bit like

224
00:15:10,730 --> 00:15:16,020
ask and the compiler which aims Mendes
expressions in the ass expressions when

225
00:15:16,020 --> 00:15:17,420
it turned into machine code

226
00:15:17,420 --> 00:15:21,320
there we go like that the

227
00:15:21,320 --> 00:15:25,370
the project time frame was about two
years to actually get working compiler

228
00:15:25,370 --> 00:15:28,720
until Steve Russell with him

229
00:15:28,720 --> 00:15:31,840
was also at MIT realize that the valve
function

230
00:15:31,840 --> 00:15:35,880
you could just coated up in IBM 704

231
00:15:35,880 --> 00:15:39,230
and 20 code that it was

232
00:15:39,230 --> 00:15:43,230
able to actually evaluate these s
expressions into

233
00:15:43,230 --> 00:15:46,530
values suddenly we have a programming
language

234
00:15:46,530 --> 00:15:50,089
little nerd the bottoms the Russells
wrote space for

235
00:15:50,090 --> 00:15:53,660
I don't know what really popular means

236
00:15:53,660 --> 00:15:57,350
in the context for 1958 1960

237
00:15:57,350 --> 00:16:02,560
computers but over the years there were
whole bunch have

238
00:16:02,560 --> 00:16:06,590
different dialects the developed

239
00:16:06,590 --> 00:16:10,590
numerous incompatibilities between them

240
00:16:10,590 --> 00:16:14,240
and run about nineteen eighty-four Kyle
still published

241
00:16:14,240 --> 00:16:17,990
economist language book and that became
a major part love

242
00:16:17,990 --> 00:16:24,990
the standard there was actually doctor
by and see

243
00:16:25,240 --> 00:16:29,440
in scheme which came along in between
also helped

244
00:16:29,440 --> 00:16:32,630
influence

245
00:16:32,630 --> 00:16:36,720
parents so this you know made such a big
deal about India

246
00:16:36,720 --> 00:16:39,790
description of the talk

247
00:16:39,790 --> 00:16:43,530
these are some other features that new
may not be that

248
00:16:43,530 --> 00:16:47,780
impressive but one conditional
expression

249
00:16:47,780 --> 00:16:51,880
yes had to come along sometime to on its
functions are showing up

250
00:16:51,880 --> 00:16:55,340
in a lot of different places JavaScript
being one of them

251
00:16:55,340 --> 00:16:58,370
that sorta surprise me but Javascript is

252
00:16:58,370 --> 00:17:02,510
not the JavaScript you might know from
ten fifteen years ago

253
00:17:02,510 --> 00:17:06,599
logo was also based on list which
hopefully after the talk you can look at

254
00:17:06,600 --> 00:17:08,490
and say yeah that makes sense

255
00:17:08,490 --> 00:17:12,870
I do still teach logo to kids no

256
00:17:12,870 --> 00:17:16,560
that kinda sucks well stop teaching the
MIT

257
00:17:16,560 --> 00:17:21,230
programming class in scheme but it's
okay their place with Python

258
00:17:21,230 --> 00:17:26,040
still MIT

259
00:17:26,040 --> 00:17:31,100
hope mister randall Munroe got my email
about using this comic

260
00:17:31,100 --> 00:17:35,270
while he does have a blanket license for
for presentations

261
00:17:35,270 --> 00:17:38,340
I mention it's gonna be film so

262
00:17:38,340 --> 00:17:45,340
please don't sue me

263
00:17:52,220 --> 00:17:55,310
so now it now we finally get to

264
00:17:55,310 --> 00:18:02,310
to the syntax eventually you might think
it's not really used anywhere

265
00:18:02,440 --> 00:18:06,120
but this bronze runs the max

266
00:18:06,120 --> 00:18:09,310
before he can take the code in the max

267
00:18:09,310 --> 00:18:12,450
outside the max without dragging us the
editor along

268
00:18:12,450 --> 00:18:19,450
other some people call it an operating
system not just an editor

269
00:18:21,340 --> 00:18:24,850
this is bad have totally outstrip my
notes

270
00:18:24,850 --> 00:18:28,660
I'm let's back up a little bit

271
00:18:28,660 --> 00:18:32,640
was using AutoCAD

272
00:18:32,640 --> 00:18:35,880
process possibly one of the most
successful programs the eighties

273
00:18:35,880 --> 00:18:38,900
still going strong still uses twist in
it

274
00:18:38,900 --> 00:18:42,670
the scheduling system up the Hubble
Space Telescope has written and less

275
00:18:42,670 --> 00:18:47,010
haven't been able to get the story but
because I've

276
00:18:47,010 --> 00:18:50,410
a server side-effect

277
00:18:50,410 --> 00:18:54,120
or benefit of the way that was
structured they were able to

278
00:18:54,120 --> 00:18:57,460
update the code while the machine is
still running from the earth

279
00:18:57,460 --> 00:19:01,790
and cracked bike that was causing
something to screw up

280
00:19:01,790 --> 00:19:05,240
confined to much you didn't have to
reboot it

281
00:19:05,240 --> 00:19:09,950
just replace the code the only other
place that I've seen that touted as a as

282
00:19:09,950 --> 00:19:11,150
a features Erlang

283
00:19:11,150 --> 00:19:14,740
which rulings kinda hard core

284
00:19:14,740 --> 00:19:18,850
but there was a there was a dialect it
was called terminated

285
00:19:18,850 --> 00:19:22,300
incorporated the Erlang message box

286
00:19:22,300 --> 00:19:26,129
sorta paradigm in it and I was kinda
impressive to

287
00:19:26,130 --> 00:19:30,070
still looks like this but you get the
idea the concurrency benefits and being

288
00:19:30,070 --> 00:19:31,610
able to hotswap code and things like
that

289
00:19:31,610 --> 00:19:36,090
21 right filters and Kim you can use
that

290
00:19:36,090 --> 00:19:39,209
long time ago there was a

291
00:19:39,210 --> 00:19:43,440
groundbreaking anti-democrat shirt blue
have this later

292
00:19:43,440 --> 00:19:48,340
nope alright unfortunate this this might
have been

293
00:19:48,340 --> 00:19:52,250
1 I've the reasons why there was an AI
winter was

294
00:19:52,250 --> 00:19:55,310
for Sony you know they they did such a
good job that everyone's

295
00:19:55,310 --> 00:19:59,570
expectations for what will happen five
or 10 years

296
00:19:59,570 --> 00:20:05,050
or assertive inflated the

297
00:20:05,050 --> 00:20:08,930
the suffer company Naughty Dog also use
to a space systems for the Jak and

298
00:20:08,930 --> 00:20:09,930
Daxter games

299
00:20:09,930 --> 00:20:16,660
wasn't quite the same kinda list but
when the benefits was that you can swap

300
00:20:16,660 --> 00:20:17,050
out

301
00:20:17,050 --> 00:20:20,419
models while the system is running

302
00:20:20,420 --> 00:20:25,810
and just garbage collect the old stuff
but anyway

303
00:20:25,810 --> 00:20:29,500
tulis the

304
00:20:29,500 --> 00:20:35,030
the weird syntax is actually an asset it
denotes a

305
00:20:35,030 --> 00:20:38,810
a statement US begins when ends with a

306
00:20:38,810 --> 00:20:43,879
parentheses the circum- posed Adams and
other lists

307
00:20:43,880 --> 00:20:48,220
and by its definition

308
00:20:48,220 --> 00:20:52,170
uses symbols it's for symbolic
computation you would normally

309
00:20:52,170 --> 00:20:56,440
describe see is a generalized assembler
that you could 42 whatever machine you

310
00:20:56,440 --> 00:20:57,060
want but

311
00:20:57,060 --> 00:21:00,320
you still you know just a few steps
above the hardware

312
00:21:00,320 --> 00:21:05,090
list is much more abstract and

313
00:21:05,090 --> 00:21:09,220
you know slowly languages are getting
closer and closer to that

314
00:21:09,220 --> 00:21:16,220
so when I go to the source the other
weird syntax it's not that weird if you

315
00:21:16,590 --> 00:21:17,320
understand it

316
00:21:17,320 --> 00:21:22,300
but the first for symbol after

317
00:21:22,300 --> 00:21:26,900
a print disease is typically valued as a
function

318
00:21:26,900 --> 00:21:30,250
and then the rest to them are the
arguments

319
00:21:30,250 --> 00:21:33,860
in other languages %um function outside
the fantasies

320
00:21:33,860 --> 00:21:39,200
it's not that different really when the
benefits I love

321
00:21:39,200 --> 00:21:42,440
well this could've been done wrong

322
00:21:42,440 --> 00:21:45,550
by the way that things usually go is

323
00:21:45,550 --> 00:21:50,030
very well the site is missing a few
things arm

324
00:21:50,030 --> 00:21:53,440
with things usually go is you have a
function

325
00:21:53,440 --> 00:21:57,780
it's a functional language you have a
function and you pass in the arguments

326
00:21:57,780 --> 00:22:02,770
and the arguments not changed

327
00:22:02,770 --> 00:22:06,010
the arguments should be the same

328
00:22:06,010 --> 00:22:09,170
when the function returns the value as
when they came in

329
00:22:09,170 --> 00:22:13,270
this gives you some benefits that

330
00:22:13,270 --> 00:22:17,110
you won't have side effects which is
typically what you program for in other

331
00:22:17,110 --> 00:22:17,970
languages

332
00:22:17,970 --> 00:22:21,130
and anyone who says that the

333
00:22:21,130 --> 00:22:24,270
the syntax is insane well

334
00:22:24,270 --> 00:22:27,330
syntax is very regular and grammatical
sense

335
00:22:27,330 --> 00:22:30,760
you have a statement after Pence's

336
00:22:30,760 --> 00:22:34,050
and you have all the arguments
afterwards here you have

337
00:22:34,050 --> 00:22:38,520
in fixin tax you have assignment left
hand side

338
00:22:38,520 --> 00:22:42,889
prefix postfix object oriented stuff
tacked on

339
00:22:42,890 --> 00:22:49,510
array access or pointer access

340
00:22:49,510 --> 00:22:53,090
it all looks about the same interest

341
00:22:53,090 --> 00:22:56,090
kinda cheated these two aren't actual
functions there

342
00:22:56,090 --> 00:23:03,090
special forms but I'll get to that later

343
00:23:04,650 --> 00:23:07,830
should probably keep in check but I'm

344
00:23:07,830 --> 00:23:11,210
begin wants to stay in this room me
longer than they have to

345
00:23:11,210 --> 00:23:14,530
me especially

346
00:23:14,530 --> 00:23:19,290
so here's this big googling terrible

347
00:23:19,290 --> 00:23:22,480
equation section on a question to form

348
00:23:22,480 --> 00:23:26,550
on forms gonna be evaluated although
evaluated

349
00:23:26,550 --> 00:23:30,629
artistically for a display purposes

350
00:23:30,630 --> 00:23:35,220
and so what the

351
00:23:35,220 --> 00:23:39,350
what was machine will do is it will see
the form to find the

352
00:23:39,350 --> 00:23:42,850
left must print the season and find
matching Ramos parentheses its building

353
00:23:42,850 --> 00:23:43,179
its

354
00:23:43,179 --> 00:23:46,860
blowing up a tree in the parser

355
00:23:46,860 --> 00:23:49,980
with all the arguments and it just

356
00:23:49,980 --> 00:23:53,440
applies the function to the arguments as
it goes through sexually prime

357
00:23:53,440 --> 00:23:55,300
factorization

358
00:23:55,300 --> 00:23:59,040
of 2600 anyone still paying attention

359
00:23:59,040 --> 00:24:03,210
no I tried arm

360
00:24:03,210 --> 00:24:06,670
like I said this is a little bit
creative because the earth

361
00:24:06,670 --> 00:24:10,770
the seven multiply by 12 +91 would have
been evaluated for since it's the

362
00:24:10,770 --> 00:24:12,570
deepest a

363
00:24:12,570 --> 00:24:16,120
it's the deepest expression the other
cool thing to note here

364
00:24:16,120 --> 00:24:19,970
is dad arm list has a lotta love

365
00:24:19,970 --> 00:24:24,140
embedded data types that you get free
you have managers which

366
00:24:24,140 --> 00:24:27,660
I hope you'd expect but you also have
perfect fractions or will you have

367
00:24:27,660 --> 00:24:29,370
rational numbers

368
00:24:29,370 --> 00:24:33,750
these will not produce to sum up with a
small

369
00:24:33,750 --> 00:24:38,280
I tried in Python and the first one game
easier on the second anyone

370
00:24:38,280 --> 00:24:43,710
not what you would expect or not what
you would want

371
00:24:43,710 --> 00:24:47,679
will reduce it for you but will still
maintain the precision there's also

372
00:24:47,679 --> 00:24:53,690
native support for complex numbers you
don't have to write that

373
00:24:53,690 --> 00:24:58,440
really outstrip my notes here

374
00:24:58,440 --> 00:25:02,260
so the list data structure

375
00:25:02,260 --> 00:25:06,030
the native data structure is a list this
programs themselves

376
00:25:06,030 --> 00:25:09,678
are lists

377
00:25:09,679 --> 00:25:12,730
this feature the language is called home
or icon a city

378
00:25:12,730 --> 00:25:17,030
which just means that the representation
of the data in the program are the same

379
00:25:17,030 --> 00:25:20,100
this will come in handy later when we
discuss macros which

380
00:25:20,100 --> 00:25:23,700
are not the same a/c macros

381
00:25:23,700 --> 00:25:26,990
so here's some list manipulation forms

382
00:25:26,990 --> 00:25:30,710
the court operator delays evaluation so

383
00:25:30,710 --> 00:25:33,990
ordinarily we've gotten there saying one
is not

384
00:25:33,990 --> 00:25:37,980
a function crack down on you

385
00:25:37,980 --> 00:25:41,130
car in kidder pronouncing that right

386
00:25:41,130 --> 00:25:45,380
car is stands for the the content to the
address portion the register

387
00:25:45,380 --> 00:25:49,360
which on the IBM 704 made a lot more
sense by

388
00:25:49,360 --> 00:25:53,500
common thing was a 36 bit architecture
and

389
00:25:53,500 --> 00:25:57,840
whatever but so car gives the first

390
00:25:57,840 --> 00:26:02,040
part of a list and killer gives you the
rest a bit

391
00:26:02,040 --> 00:26:05,070
their offensive shorthand for

392
00:26:05,070 --> 00:26:09,960
in a second third fourth fifth if you
really wanted to say CA addi

393
00:26:09,960 --> 00:26:15,000
a are to extract something terrible

394
00:26:15,000 --> 00:26:18,670
you could but that's that standardize
usually

395
00:26:18,670 --> 00:26:25,670
their first in rest as synonyms for
conquer

396
00:26:26,260 --> 00:26:29,280
so concerts means construct

397
00:26:29,280 --> 00:26:33,030
you can actually use to make lists but
thats in the ass so you can just use

398
00:26:33,030 --> 00:26:33,760
list

399
00:26:33,760 --> 00:26:40,679
or use the code operator in specified
yourself

400
00:26:40,679 --> 00:26:44,150
the this how you define a function you
have the

401
00:26:44,150 --> 00:26:48,130
PD fun keyword its like you read it
function name

402
00:26:48,130 --> 00:26:53,640
tingly to macro I'm and had three gets
added to the symbol table

403
00:26:53,640 --> 00:26:57,470
as a function you have one argument and
the

404
00:26:57,470 --> 00:27:00,870
last guy that gets a value added in West

405
00:27:00,870 --> 00:27:05,260
gets a turn as the value cool thing is
that the documentation comes inside the

406
00:27:05,260 --> 00:27:06,158
function

407
00:27:06,159 --> 00:27:09,450
and the company's been fireman has ways
extracting

408
00:27:09,450 --> 00:27:12,770
the documentation for you so if you're
lucky

409
00:27:12,770 --> 00:27:16,100
and there is documentation for the
function you can find it

410
00:27:16,100 --> 00:27:19,390
you can also use a command called
apropos animal

411
00:27:19,390 --> 00:27:23,500
search through only available
documentation

412
00:27:23,500 --> 00:27:27,950
give you names functions that you might
want kinda annoying have to you

413
00:27:27,950 --> 00:27:33,080
program something and find out that came
with the distribution

414
00:27:33,080 --> 00:27:37,560
but anyway

415
00:27:37,560 --> 00:27:41,940
her

416
00:27:41,940 --> 00:27:46,440
is there water yes there's water very on

417
00:27:46,440 --> 00:27:53,440
isn't going quite as well as I thought
but this it's all true so far

418
00:28:09,379 --> 00:28:14,049
hurt so as I sorta touched on earlier on
when the goals a functional programming

419
00:28:14,049 --> 00:28:18,749
I'm of is not to modify your arguments

420
00:28:18,749 --> 00:28:23,159
and the the primary way you interact
with the method

421
00:28:23,159 --> 00:28:27,669
where the function is through its return
values so it's sort of like a black box

422
00:28:27,669 --> 00:28:30,860
that you know what's going on but you
call it

423
00:28:30,860 --> 00:28:34,899
you don't care what it does as long as
there's no side effects and you use the

424
00:28:34,899 --> 00:28:35,950
return values

425
00:28:35,950 --> 00:28:39,450
this is good because he won't have

426
00:28:39,450 --> 00:28:42,830
you have mysterious bugs showing up

427
00:28:42,830 --> 00:28:47,239
somebody characterize the the average
imperative program

428
00:28:47,239 --> 00:28:52,009
as someone posting that how my function
takes 316 arguments

429
00:28:52,009 --> 00:28:55,840
well if you consider all the global
variables that

430
00:28:55,840 --> 00:28:59,559
you may be exposed to its technically
correct in a few have the opportunity to

431
00:28:59,559 --> 00:29:01,139
change some other than in there

432
00:29:01,139 --> 00:29:04,480
you're not going to get the same results
every single time you call the function

433
00:29:04,480 --> 00:29:07,830
well that's nice an ideal way

434
00:29:07,830 --> 00:29:11,509
you're not going to

435
00:29:11,509 --> 00:29:15,940
be doing terribly much programming if
you rely only on return values

436
00:29:15,940 --> 00:29:18,940
you need some side effects and really
get things done

437
00:29:18,940 --> 00:29:24,940
so

438
00:29:24,940 --> 00:29:28,119
this is a council one box one block

439
00:29:28,119 --> 00:29:35,070
the a the car in kidder on conventions
make a little bit more sense now

440
00:29:35,070 --> 00:29:38,509
basically these two hold

441
00:29:38,509 --> 00:29:42,519
register values and the

442
00:29:42,519 --> 00:29:45,559
first part of the list points to

443
00:29:45,559 --> 00:29:48,928
whatever it is could be a hash table

444
00:29:48,929 --> 00:29:53,889
could be single value could be a string
and in the second

445
00:29:53,889 --> 00:29:57,119
points to the next on the list and

446
00:29:57,119 --> 00:30:00,480
yes they are linked lists says where
maybe

447
00:30:00,480 --> 00:30:05,129
people think it's slow and you do have
to go through each one of them if you're

448
00:30:05,129 --> 00:30:06,320
doing something like that

449
00:30:06,320 --> 00:30:10,889
a good thing the side effect is that you
end up with

450
00:30:10,889 --> 00:30:14,100
being able to computer arbitrarily long

451
00:30:14,100 --> 00:30:17,230
sometimes infinite sequences young

452
00:30:17,230 --> 00:30:21,379
consume them you could soon as you need
to word you just

453
00:30:21,379 --> 00:30:27,129
you don't care you're occurs through it
or you can read through it but

454
00:30:27,129 --> 00:30:30,809
the good thing about using pointers is
that when you change a pointer

455
00:30:30,809 --> 00:30:34,309
the come in the system will garbage
collected for you see you have to worry

456
00:30:34,309 --> 00:30:35,119
about that either

457
00:30:35,119 --> 00:30:39,190
on a proper list the last element in the
mail

458
00:30:39,190 --> 00:30:44,220
damnit

459
00:30:44,220 --> 00:30:47,840
sides must be complete Marion

460
00:30:47,840 --> 00:30:51,289
no no no parent just a moment

461
00:30:51,289 --> 00:30:58,289
let's

462
00:30:58,769 --> 00:31:00,229
now would be a good time to leave

463
00:31:00,229 --> 00:31:05,309
if you so desire anyway

464
00:31:05,309 --> 00:31:08,820
here's a national program that is hosted
on puter cycles website

465
00:31:08,820 --> 00:31:13,039
on its

466
00:31:13,039 --> 00:31:17,840
called Lisp in a box 75 references
notwithstanding

467
00:31:17,840 --> 00:31:24,840
I'm is really hot in here

468
00:31:37,200 --> 00:31:39,429
me

469
00:31:39,429 --> 00:31:42,190
this is how you defining global variable

470
00:31:42,190 --> 00:31:49,190
put the asterisks around it so that you
know that you're using it

471
00:31:55,100 --> 00:32:00,870
whenever

472
00:32:00,870 --> 00:32:06,350
do is feeling much better about this
talk before I started speaking may be

473
00:32:06,350 --> 00:32:08,140
doing one thing that scares you is no is

474
00:32:08,140 --> 00:32:13,020
the best idea so whatever

475
00:32:13,020 --> 00:32:18,340
the great thanks so I have to find it

476
00:32:18,340 --> 00:32:22,960
returns the name the variable I'm if you
evaluated

477
00:32:22,960 --> 00:32:26,920
at the prompt will return the values for
you

478
00:32:26,920 --> 00:32:31,050
so if you're not supposed to

479
00:32:31,050 --> 00:32:34,310
change state we gonna do have you get
all your variables

480
00:32:34,310 --> 00:32:38,750
so there are few looping constructs
iteration constructs

481
00:32:38,750 --> 00:32:45,260
now going to cite check the time

482
00:32:45,260 --> 00:32:48,920
on do list as macro

483
00:32:48,920 --> 00:32:52,290
getting a little bit had myself

484
00:32:52,290 --> 00:32:57,920
by lets you chop up the with you chop up
the

485
00:32:57,920 --> 00:33:02,900
the arguments that you pass into the
function home this way you can

486
00:33:02,900 --> 00:33:07,670
you can do things like apply function
across all the arguments

487
00:33:07,670 --> 00:33:11,360
conditionally or supply the test that
you want to use

488
00:33:11,360 --> 00:33:16,320
for sorting algorithm say had a whole
bunch have

489
00:33:16,320 --> 00:33:19,550
entries you got go home under files of
your

490
00:33:19,550 --> 00:33:23,389
video camera but if you sorted
alphabetically all the pictures gonna

491
00:33:23,390 --> 00:33:24,610
end up before the movies

492
00:33:24,610 --> 00:33:28,810
so you could write a little function her

493
00:33:28,810 --> 00:33:32,500
the lost about the first four characters
and sort only by the numbers

494
00:33:32,500 --> 00:33:39,500
return a list for you

495
00:33:43,640 --> 00:33:50,640
obviously made a shambles and my notes
but at least you're seeing real code run

496
00:34:00,049 --> 00:34:04,590
some people don't Mike the I don't like
format consists not misspeak

497
00:34:04,590 --> 00:34:08,389
although at this point in the speech
have no idea what looks less fear not

498
00:34:08,389 --> 00:34:12,869
but obviously defines its own language

499
00:34:12,869 --> 00:34:17,909
which is totally is are arbitrary

500
00:34:17,909 --> 00:34:22,300
but still call it's not what I wanted to
do

501
00:34:22,300 --> 00:34:28,970
married

502
00:34:28,970 --> 00:34:30,450
yes

503
00:34:30,449 --> 00:34:34,189
excellent exactly what I wanted to do
right alright

504
00:34:34,190 --> 00:34:37,730
that sucked try this again

505
00:34:37,730 --> 00:34:41,570
this latest wanna iterate through the
list

506
00:34:41,570 --> 00:34:48,150
using axes temporary variable you have
any number variables here in the front

507
00:34:48,150 --> 00:34:51,210
perform you can also

508
00:34:51,210 --> 00:34:57,670
have their start forms that allow you to
reference other variables

509
00:34:57,670 --> 00:35:01,210
in your declaration the

510
00:35:01,210 --> 00:35:04,930
the do and lead forms usually

511
00:35:04,930 --> 00:35:08,759
don't let you do that if you use an
Astros the end of it

512
00:35:08,760 --> 00:35:12,810
you can reference values you just
defined

513
00:35:12,810 --> 00:35:18,299
so I'm not doing this on the radio

514
00:35:18,300 --> 00:35:22,780
I guess technically I am with radio
statler lots of dead air

515
00:35:22,780 --> 00:35:26,270
so if you'll notice that the

516
00:35:26,270 --> 00:35:30,570
print the Seas flash when I close them
that's really the only

517
00:35:30,570 --> 00:35:33,910
yeah sale I

518
00:35:33,910 --> 00:35:37,359
it's really only fijian you know what's
better although

519
00:35:37,360 --> 00:35:42,010
this virginity max has a slime installed
which is the superior Wis

520
00:35:42,010 --> 00:35:45,340
interaction mode free Maxx it's not
helping me too much right now

521
00:35:45,340 --> 00:35:48,700
by you can do cool things Lake

522
00:35:48,700 --> 00:35:52,230
compiled from a buffer and will
automatically put it into the US

523
00:35:52,230 --> 00:35:53,290
contributor for you

524
00:35:53,290 --> 00:36:00,290
yes

525
00:36:02,270 --> 00:36:07,280
arm this particular

526
00:36:07,280 --> 00:36:11,530
me do something simple this particular

527
00:36:11,530 --> 00:36:15,700
I'm what's been fireman is a c-list

528
00:36:15,700 --> 00:36:18,920
its is a little

529
00:36:18,920 --> 00:36:22,680
easter egg you might have seen in the
beginning it's only activated during

530
00:36:22,680 --> 00:36:23,960
certain calendar year

531
00:36:23,960 --> 00:36:28,210
calendar days by couldn't find any
reference on an online so

532
00:36:28,210 --> 00:36:31,660
to turn in the source code though I'm

533
00:36:31,660 --> 00:36:36,359
married

534
00:36:36,360 --> 00:36:40,770
cutting it took notes I'm so

535
00:36:40,770 --> 00:36:44,480
it's not going as well as I thought but
seal it is

536
00:36:44,480 --> 00:36:48,760
see less is designed to compile into a
bytecode there's another

537
00:36:48,760 --> 00:36:53,390
interpreter that I have on a on a shell
somewhere that I was gonna show you

538
00:36:53,390 --> 00:36:58,710
other applied equally disastrous class
b/ci which is still being common list

539
00:36:58,710 --> 00:37:03,070
and that completes its designed to be
very fast and it compiles into

540
00:37:03,070 --> 00:37:06,140
in tombs machine code

541
00:37:06,140 --> 00:37:09,750
or assembly language and you can
actually see it

542
00:37:09,750 --> 00:37:16,750
has has compiled

543
00:37:22,280 --> 00:37:25,630
yes I'm going to give up now Kors this
is terrible

544
00:37:25,630 --> 00:37:28,920
but it's supposed to do is a print out
the list

545
00:37:28,920 --> 00:37:32,310
on each line I was gonna sort it but it
turns out that sort is destructive

546
00:37:32,310 --> 00:37:35,670
so the

547
00:37:35,670 --> 00:37:40,960
the list would have ended up with the
list would have ended up

548
00:37:40,960 --> 00:37:44,160
chopping itself off at I guess desktop

549
00:37:44,160 --> 00:37:50,690
no very well looking at the council
first so

550
00:37:50,690 --> 00:37:55,310
yeah there's something very wrong here
out

551
00:37:55,310 --> 00:37:59,080
I remember okay good I get to show you
functional programming

552
00:37:59,080 --> 00:38:02,970
and passing in the name of the function

553
00:38:02,970 --> 00:38:08,530
should be doing this passing the new
function

554
00:38:08,530 --> 00:38:13,200
as the sir criteria on so it sort said

555
00:38:13,200 --> 00:38:16,730
as it should on she really wanted to

556
00:38:16,730 --> 00:38:22,540
you could change this to something else
switzer verse

557
00:38:22,540 --> 00:38:27,410
I'm or what you could do although I
don't have the mental capacity right now

558
00:38:27,410 --> 00:38:30,560
to actually do this I want to get to it

559
00:38:30,560 --> 00:38:36,190
otherwise I'm you know your rights on
the call and expression

560
00:38:36,190 --> 00:38:39,300
and if you come across lambda says
another one the stumbling blocks and

561
00:38:39,300 --> 00:38:40,619
nobody could explain properly

562
00:38:40,619 --> 00:38:44,290
member just means function to function
without a name it's a

563
00:38:44,290 --> 00:38:48,820
the same thing as the be defined in the
previous previous one

564
00:38:48,820 --> 00:38:55,820
here orders at three let's try that
maybe that won't fail

565
00:38:59,290 --> 00:39:01,210
yep

566
00:39:01,210 --> 00:39:03,940
it will show you love the debugger
tonight expect that to happen

567
00:39:03,940 --> 00:39:09,320
home let me just give you just takes one
argument

568
00:39:09,320 --> 00:39:12,690
prefix notation plus

569
00:39:12,690 --> 00:39:16,910
3 axe the ex's a binding

570
00:39:16,910 --> 00:39:19,640
inside this function definition it does
not exist outside the function

571
00:39:19,640 --> 00:39:20,900
definition but that's okay

572
00:39:20,900 --> 00:39:25,000
so we have had three very well women
apply at three

573
00:39:25,000 --> 00:39:28,960
to I don't know 6 7 and

574
00:39:28,960 --> 00:39:31,970
it this laptop sometimes

575
00:39:31,970 --> 00:39:36,770
we get 10 great if

576
00:39:36,770 --> 00:39:39,900
you think that was too slow maybe you
should

577
00:39:39,900 --> 00:39:43,240
take a look at went

578
00:39:43,240 --> 00:39:46,600
it's actually doing and like I said

579
00:39:46,600 --> 00:39:51,110
the see List is designed to

580
00:39:51,110 --> 00:39:54,240
compile into a bytecode I guess which
helps with

581
00:39:54,240 --> 00:39:57,250
in cross-platform I'm SPCL will

582
00:39:57,250 --> 00:40:00,330
compile into actual assembly code which
looks really cool

583
00:40:00,330 --> 00:40:04,390
you read this it's really knowing when
you know everyone can

584
00:40:04,390 --> 00:40:08,299
can squint the screen the person giving
the presentation you really just fine

585
00:40:08,300 --> 00:40:13,840
to when it's an eight-point Council fun
hope you can read it cuz I can make fun

586
00:40:13,840 --> 00:40:14,520
any bigger

587
00:40:14,520 --> 00:40:18,140
in a what's been a box all right thank
you

588
00:40:18,140 --> 00:40:23,690
let's go back to the presentation now
this presentation will change on me

589
00:40:23,690 --> 00:40:29,380
supposed to have a little more code in
it here's the joke that started the

590
00:40:29,380 --> 00:40:30,100
entire

591
00:40:30,100 --> 00:40:33,220
presentation arm

592
00:40:33,220 --> 00:40:38,160
one unfortunate fact that I discovered
yesterday is that you can still sick P

593
00:40:38,160 --> 00:40:42,430
without ICP

594
00:40:42,430 --> 00:40:45,359
so when I should have gotten to

595
00:40:45,359 --> 00:40:49,020
earlier is a that the the regular syntax
list

596
00:40:49,020 --> 00:40:52,700
where it's not entirely out of symbols
in parentheses

597
00:40:52,700 --> 00:40:56,190
which may drive you insane is actually
an asset because

598
00:40:56,190 --> 00:40:59,470
it's very easy to parse you can validate
it very easily

599
00:40:59,470 --> 00:41:02,470
the editor has had the matching print
the Seas

600
00:41:02,470 --> 00:41:07,369
to help the programmer for quite a while
it shows up in the 1986

601
00:41:07,369 --> 00:41:11,730
susman Abelson talkin HP

602
00:41:11,730 --> 00:41:16,010
arm I'm glad that

603
00:41:16,010 --> 00:41:20,490
wrote these damn pics can't quite get to
them earlier just

604
00:41:20,490 --> 00:41:23,619
some people say that the only
requirement for functional language

605
00:41:23,619 --> 00:41:27,780
is for it to have functions that are
first-class citizens

606
00:41:27,780 --> 00:41:32,000
arm with a macro

607
00:41:32,000 --> 00:41:36,849
you can the Macker you can

608
00:41:36,849 --> 00:41:40,170
change the syntax you can basically
right whatever you want it to

609
00:41:40,170 --> 00:41:43,280
arm and hopefully it'll approximate
english

610
00:41:43,280 --> 00:41:46,900
on and you'll be able to program much
more efficiently

611
00:41:46,900 --> 00:41:51,180
once you've gotten all the nitty-gritty
syntax on the way

612
00:41:51,180 --> 00:41:54,980
the

613
00:41:54,980 --> 00:41:59,880
entire the language itself has access to
the symbol table

614
00:41:59,880 --> 00:42:04,070
while you're running it you can redefine
functions

615
00:42:04,070 --> 00:42:07,210
strum that peace accord again it will

616
00:42:07,210 --> 00:42:11,400
dereference the pointer pointing out to
the new codes and the old code

617
00:42:11,400 --> 00:42:14,990
and hopefully have some bug

618
00:42:14,990 --> 00:42:18,260
you won't have to shut the system down
you don't have to

619
00:42:18,260 --> 00:42:22,080
compile it now the price should compile
it for Speed

620
00:42:22,080 --> 00:42:25,310
I know

621
00:42:25,310 --> 00:42:30,230
this the slide speaks for itself which
is good because

622
00:42:30,230 --> 00:42:33,570
I'm having trouble speaking

623
00:42:33,570 --> 00:42:40,570
huh

624
00:42:42,590 --> 00:42:48,290
away from the mic 23

625
00:42:48,290 --> 00:42:51,450
so I got to the slight much quicker than
I thought

626
00:42:51,450 --> 00:42:57,569
hopefully these make a little bit more
sense to you probably not considering

627
00:42:57,569 --> 00:42:58,170
the way that I

628
00:42:58,170 --> 00:43:03,660
rushed through it but the cool thing
about macro is that you have access to

629
00:43:03,660 --> 00:43:06,848
the entire language in C

630
00:43:06,849 --> 00:43:10,829
or I guess BB Rex our whatever macros
kinda

631
00:43:10,829 --> 00:43:15,930
kinda boring and a simple arm mistype
were there with double quote

632
00:43:15,930 --> 00:43:19,790
no nice it um the

633
00:43:19,790 --> 00:43:22,808
the macro has access to the entirety of
the language

634
00:43:22,809 --> 00:43:27,040
and you can string together macros when
it comes across another function it will

635
00:43:27,040 --> 00:43:28,509
interpret that function as well

636
00:43:28,510 --> 00:43:32,530
comes across North America can expand
that macro in see you

637
00:43:32,530 --> 00:43:35,650
often run into problems where you've got
a print the season the

638
00:43:35,650 --> 00:43:39,010
macro definition and it just as a
DirectX substitution suddenly over by

639
00:43:39,010 --> 00:43:40,470
you know anywhere comes from

640
00:43:40,470 --> 00:43:44,790
is not the source codes in the it's in
the a the macro definition

641
00:43:44,790 --> 00:43:49,920
I'm this I guess the unofficial

642
00:43:49,920 --> 00:43:56,690
Lisp logo good thing and have to ask
permission for it this a

643
00:43:56,690 --> 00:44:02,240
this MD this doctor cum drippers cases
yes that we use Palin said macro because

644
00:44:02,240 --> 00:44:09,040
other languages sort of polluted let's
see if I can get this to run

645
00:44:09,040 --> 00:44:12,799
there's a

646
00:44:12,799 --> 00:44:16,540
very good it's good very good

647
00:44:16,540 --> 00:44:20,910
demo he has on his website whisper Rd

648
00:44:20,910 --> 00:44:24,170
that that anymore

649
00:44:24,170 --> 00:44:27,609
that more home miss Lena venture game

650
00:44:27,609 --> 00:44:31,470
and when the cool things is that you can

651
00:44:31,470 --> 00:44:35,040
structure data how you want it to how
you want it to be

652
00:44:35,040 --> 00:44:38,540
and use different access methods to

653
00:44:38,540 --> 00:44:41,849
only get what you want so here we have a
nice global variable

654
00:44:41,849 --> 00:44:44,990
called map and just looking at it you
can

655
00:44:44,990 --> 00:44:48,099
sort of understand what the a what the
structure is

656
00:44:48,099 --> 00:44:51,619
I'm the

657
00:44:51,619 --> 00:44:54,970
the plot love this story is that you
wake up

658
00:44:54,970 --> 00:44:58,849
in it was its house and he's passed out
drunk and

659
00:44:58,849 --> 00:45:05,430
you have to revive him in order to get
the magic a low carb donut I recommend

660
00:45:05,430 --> 00:45:06,118
you read this

661
00:45:06,119 --> 00:45:11,140
because it's a very good tutorial this
way I can at least

662
00:45:11,140 --> 00:45:15,460
have benefited you a little bit but

663
00:45:15,460 --> 00:45:18,490
he goes through all the

664
00:45:18,490 --> 00:45:21,530
all the steps to build this program up

665
00:45:21,530 --> 00:45:24,829
from the ground this with a list looks
like

666
00:45:24,829 --> 00:45:28,750
this is the command the guys in front of
a list I'm

667
00:45:28,750 --> 00:45:32,970
you can read it yourself I'm not not
here to read to you

668
00:45:32,970 --> 00:45:39,470
so

669
00:45:39,470 --> 00:45:43,049
this is this what america looks like you
have this weird syntax for you

670
00:45:43,049 --> 00:45:46,230
are slipping in and out

671
00:45:46,230 --> 00:45:50,079
love whether you want to evaluate the
argument as a symbol

672
00:45:50,079 --> 00:45:54,349
or get the name arm or just passing
through

673
00:45:54,349 --> 00:45:57,549
the the macro doesn't

674
00:45:57,549 --> 00:46:00,660
on very

675
00:46:00,660 --> 00:46:04,339
but macro side go well

676
00:46:04,339 --> 00:46:08,078
makers return forms to the compiler did
not return values

677
00:46:08,079 --> 00:46:11,500
and so the the interpretation of the
macro happens

678
00:46:11,500 --> 00:46:15,510
before it's compiled previously using
code generator more code for you

679
00:46:15,510 --> 00:46:19,809
and

680
00:46:19,809 --> 00:46:22,940
you end up being able to abstract you
code

681
00:46:22,940 --> 00:46:27,170
much more if you have a lot of functions
that are doing basically the same things

682
00:46:27,170 --> 00:46:30,680
you can just read it once you have less
code less bugs

683
00:46:30,680 --> 00:46:34,629
and if you need to change it you can
change very easily

684
00:46:34,630 --> 00:46:37,839
it's not

685
00:46:37,839 --> 00:46:42,450
self modifying code as cool as that
would be this is not a virus programming

686
00:46:42,450 --> 00:46:46,250
workshop smackers basically

687
00:46:46,250 --> 00:46:52,960
spit out forms to the compiler if I
could have gotten the indie project work

688
00:46:52,960 --> 00:46:55,910
which they have a ever talk going on at
the same time right now so I'm gonna

689
00:46:55,910 --> 00:46:56,868
blame them

690
00:46:56,869 --> 00:47:00,920
and not the fact that I'm programmed in
this language into yesterday

691
00:47:00,920 --> 00:47:05,420
arm one of the

692
00:47:05,420 --> 00:47:09,290
when the languages that's gaining a lot
of attention is closure

693
00:47:09,290 --> 00:47:14,279
cynics I didn't it the name isn't funny
to you because it and explain what a

694
00:47:14,279 --> 00:47:15,160
closure is

695
00:47:15,160 --> 00:47:19,009
arm but it's it's basically a value
trapped inside a function

696
00:47:19,010 --> 00:47:21,700
and it doesn't get garbage collected
because the function is globally defined

697
00:47:21,700 --> 00:47:23,369
in Summit

698
00:47:23,369 --> 00:47:28,520
it captures that value news for you do
stupid things like counters or use it to

699
00:47:28,520 --> 00:47:29,220
you

700
00:47:29,220 --> 00:47:32,849
cue track in the state in the state
machine

701
00:47:32,849 --> 00:47:36,829
you can use it for an infinite list
where you don't have to care about

702
00:47:36,829 --> 00:47:39,930
creating the entire list I'm

703
00:47:39,930 --> 00:47:43,440
anyway causing a closure side from the a

704
00:47:43,440 --> 00:47:46,980
knows the lambda in there does have a
clever logo

705
00:47:46,980 --> 00:47:51,299
I'm its list dialect with powerful macro
system running on the Java Virtual

706
00:47:51,299 --> 00:47:51,819
Machine

707
00:47:51,819 --> 00:47:56,480
so you could write you could write code
inclosure

708
00:47:56,480 --> 00:47:59,569
and deploy it a JVM and

709
00:47:59,569 --> 00:48:05,020
the boss won't know because it just
works

710
00:48:05,020 --> 00:48:08,650
I'm

711
00:48:08,650 --> 00:48:11,990
if I had had time to

712
00:48:11,990 --> 00:48:15,640
write something I was gonna do a live
read out of all the badges in the room

713
00:48:15,640 --> 00:48:21,180
but the MD side is still returning test
data

714
00:48:21,180 --> 00:48:25,029
but where the improvement

715
00:48:25,029 --> 00:48:28,119
this has over Common Lisp is that and

716
00:48:28,119 --> 00:48:32,359
they're using the the Java thread model:
on

717
00:48:32,359 --> 00:48:35,808
along with its own built-in software
transactional memory to

718
00:48:35,809 --> 00:48:39,089
avoid deadlocks you may end up with a
lot of contention

719
00:48:39,089 --> 00:48:42,950
by nothing's gonna stop over each other
and this is

720
00:48:42,950 --> 00:48:47,000
a side effect if you will pardon the
language with side effects but this is

721
00:48:47,000 --> 00:48:47,900
this is a benefit

722
00:48:47,900 --> 00:48:52,130
love functional programming where the

723
00:48:52,130 --> 00:48:56,799
arguments are typically immutable and
when you do change them

724
00:48:56,799 --> 00:49:01,589
any code that goes back to reference it
is gonna get the new value

725
00:49:01,589 --> 00:49:04,910
immediately so you won't have to worry
about

726
00:49:04,910 --> 00:49:10,270
the data changing in the middle

727
00:49:10,270 --> 00:49:13,990
had this talk on a little better I would
have delivered this with

728
00:49:13,990 --> 00:49:17,549
a little bit more enthusiasm but

729
00:49:17,549 --> 00:49:21,410
I'm sure everyone has a has seen the
scope for where the music makers and we

730
00:49:21,410 --> 00:49:23,149
are the dreamers of dreams

731
00:49:23,150 --> 00:49:27,569
you really are gonna think willy wonka
by in fact it is part iv:

732
00:49:27,569 --> 00:49:31,920
in nine stands a piece which the police
and public domain

733
00:49:31,920 --> 00:49:35,430
we are the music makers and we are the
dreamers of dreams wondering by lone see

734
00:49:35,430 --> 00:49:38,058
breakers and sitting by desolate streams

735
00:49:38,059 --> 00:49:42,420
world losers in world for seekers on
whom the pale moon cleans

736
00:49:42,420 --> 00:49:46,299
yet we are the movers and shakers the
world forever it seems

737
00:49:46,299 --> 00:49:49,950
it morris dancers services not the end

738
00:49:49,950 --> 00:49:52,990
this is just the beginning

739
00:49:52,990 --> 00:49:53,930
thank you that is off

