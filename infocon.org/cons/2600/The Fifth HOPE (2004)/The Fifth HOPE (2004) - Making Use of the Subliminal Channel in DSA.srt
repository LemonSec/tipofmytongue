1
00:00:00,630 --> 00:00:03,760
Benicio arm first things first

2
00:00:03,760 --> 00:00:07,149
on I've been doing photography for a
number years this is a sort

3
00:00:07,149 --> 00:00:11,650
side project that I stumbled on on when
talking to somebody

4
00:00:11,650 --> 00:00:15,209
I at black hat was giving talks on
covert channels

5
00:00:15,209 --> 00:00:20,560
so I mention s and people were
interested in it so I wrote some code

6
00:00:20,560 --> 00:00:21,590
and hear it

7
00:00:21,590 --> 00:00:25,030
I it's very very interesting hopefully
I'll get something from it

8
00:00:25,030 --> 00:00:28,470
I try to make my talks as technical as
possible

9
00:00:28,470 --> 00:00:32,439
are so that you can actually get
something from it I also

10
00:00:32,439 --> 00:00:35,600
I am also used to giving talks

11
00:00:35,600 --> 00:00:39,730
in academic settings so basically what
this means is if you have no idea what

12
00:00:39,730 --> 00:00:40,730
I'm talking about

13
00:00:40,730 --> 00:00:44,059
raise your hand and be like hey over
here I don't know what you're talking

14
00:00:44,059 --> 00:00:45,659
about can you explain this

15
00:00:45,659 --> 00:00:50,690
arm so if you have a question feel free
to raise your hand and get my attention

16
00:00:50,690 --> 00:00:54,280
and I'll try to explain things better so

17
00:00:54,280 --> 00:00:58,839
get up again are there gonna be are two
main parts:

18
00:00:58,839 --> 00:01:01,960
and answering questions the first part
is

19
00:01:01,960 --> 00:01:06,570
an explanation %uh digital signatures
obviously what they are what they do

20
00:01:06,570 --> 00:01:10,619
arm in a cover to specific types digital
signatures

21
00:01:10,619 --> 00:01:15,460
el-gamal signatures and then D'Sa or
digital signature algorithm

22
00:01:15,460 --> 00:01:20,600
very creative name signatures them in a
look at the subliminal channels

23
00:01:20,600 --> 00:01:25,399
are these channels at are able to recall
isn't nice information to people

24
00:01:25,399 --> 00:01:28,829
I'll give an overview tell you what they
are how they work

25
00:01:28,829 --> 00:01:32,090
I'll explain the subliminal channel in
the essay

26
00:01:32,090 --> 00:01:35,210
and then I'll show you some fun things
that you can

27
00:01:35,210 --> 00:01:40,140
do with the subliminal channel that some
people might be very concerned about

28
00:01:40,140 --> 00:01:43,229
and then at the end arm

29
00:01:43,229 --> 00:01:47,049
I'm not just talking out my ass here I
have a program that will do this all

30
00:01:47,049 --> 00:01:50,189
and actually show you just how dangerous
this can be

31
00:01:50,189 --> 00:01:53,200
on now this summary and take questions

32
00:01:53,200 --> 00:01:56,380
so starting of digital signatures

33
00:01:56,380 --> 00:01:59,670
arm what our digital signatures

34
00:01:59,670 --> 00:02:05,210
basically their numbers anything
digitally can be represented as a number

35
00:02:05,210 --> 00:02:08,610
I'm when people think of signatures they
think of something that's hand-written

36
00:02:08,610 --> 00:02:09,399
usually

37
00:02:09,399 --> 00:02:12,560
with a digital signature it's just a
number

38
00:02:12,560 --> 00:02:16,950
it's attached to some sort of message
it's bound to the message in some way

39
00:02:16,950 --> 00:02:20,840
and it's created by the

40
00:02:20,840 --> 00:02:25,150
person who's doing the signing in such a
way that hopefully nobody else can forge

41
00:02:25,150 --> 00:02:25,450
it

42
00:02:25,450 --> 00:02:28,810
hi there used implemented

43
00:02:28,810 --> 00:02:33,360
with public key cryptography so anybody
who wants to make digital signatures

44
00:02:33,360 --> 00:02:35,819
will have a key pair public key in a
private key

45
00:02:35,819 --> 00:02:39,930
use the private key to make the
signature and then the public key

46
00:02:39,930 --> 00:02:43,299
think about everybody else and its use
to verify

47
00:02:43,299 --> 00:02:48,370
whether a signature is correct or not so

48
00:02:48,370 --> 00:02:52,700
what do they do basically digital
signatures try to recreate

49
00:02:52,700 --> 00:02:55,700
all the functionality that handwritten
signatures

50
00:02:55,700 --> 00:03:00,170
if you all the things that signatures
were created for an active were used for

51
00:03:00,170 --> 00:03:03,659
I wanted the things that they are trying
to do is

52
00:03:03,659 --> 00:03:07,069
authenticate so if somebody signed a
document

53
00:03:07,069 --> 00:03:10,939
you can's look at the signature and
hopefully how whether this is

54
00:03:10,939 --> 00:03:15,060
actually their signature not it binds

55
00:03:15,060 --> 00:03:18,420
some sort prove I was here

56
00:03:18,420 --> 00:03:23,750
to a document for a specific person in
this case

57
00:03:23,750 --> 00:03:28,170
signatures also handle verification of
the data integrity

58
00:03:28,170 --> 00:03:31,939
usually you'll sign a contract when it's
all done a sign a document when it's all

59
00:03:31,939 --> 00:03:32,439
done

60
00:03:32,439 --> 00:03:35,470
and you put your signature at the bottom
after you've looked it over and made

61
00:03:35,470 --> 00:03:36,530
sure everything is cool

62
00:03:36,530 --> 00:03:41,260
arm and then if any changes are made to
the document hopes way

63
00:03:41,260 --> 00:03:44,590
you'll be able to tell that they were
made after the signature handwritten

64
00:03:44,590 --> 00:03:46,069
signatures on terribly good at this

65
00:03:46,069 --> 00:03:49,579
digital signatures are if you put a
digital signature

66
00:03:49,579 --> 00:03:53,310
on a message and the message is changed
in any way

67
00:03:53,310 --> 00:03:57,269
the verification in the signature will
fail so the signature

68
00:03:57,269 --> 00:04:00,709
is bound to a particular message
document

69
00:04:00,709 --> 00:04:04,920
the last thing that last primary thing
that digital signatures

70
00:04:04,920 --> 00:04:09,489
do arm is given on creation basically if
you sign something

71
00:04:09,489 --> 00:04:13,170
and then later you try to be a scumbag
and say oh I never saw that

72
00:04:13,170 --> 00:04:16,380
then it's your signature you put it
there

73
00:04:16,380 --> 00:04:20,108
and in this case not only does it prove
that its you to somebody else

74
00:04:20,108 --> 00:04:23,530
it proves that it's you to anybody who

75
00:04:23,530 --> 00:04:30,530
says hey you really were here if you're
trying to back out

76
00:04:30,590 --> 00:04:33,660
so let's look at the first-ever
signatures el-gamal

77
00:04:33,660 --> 00:04:37,479
digital signatures I'll bring this up
because

78
00:04:37,479 --> 00:04:40,900
el-gamal is the algorithm

79
00:04:40,900 --> 00:04:45,100
that TSA is based on a number of
similarities between the two

80
00:04:45,100 --> 00:04:49,509
I'll demain can be used for both
encryption and for digital signatures

81
00:04:49,509 --> 00:04:53,500
by in practice the digital signatures on
use because I'm number

82
00:04:53,500 --> 00:04:59,120
I love flaws and the other than that
make it not optimal

83
00:04:59,120 --> 00:05:02,819
the essays a variant I love all the mall
and

84
00:05:02,819 --> 00:05:06,139
the subliminal channels that R&D essay

85
00:05:06,139 --> 00:05:10,830
they also exist in El Gamal signatures
but they're not as strong

86
00:05:10,830 --> 00:05:14,818
I it's hard to send messages through
them and you can send all

87
00:05:14,819 --> 00:05:19,050
possible messages through them and
sometimes if you send a message

88
00:05:19,050 --> 00:05:22,680
you won't be able to recover it on the
other end so it's not as good for this

89
00:05:22,680 --> 00:05:23,340
purpose

90
00:05:23,340 --> 00:05:27,449
or as bad for this purpose is the case
may be

91
00:05:27,449 --> 00:05:30,750
here we get into the technical stuff how
you generate a key pair

92
00:05:30,750 --> 00:05:35,110
arm who is familiar with public key
cryptography at all

93
00:05:35,110 --> 00:05:39,280
excellent excellent okay so it's a
discrete logarithm problem

94
00:05:39,280 --> 00:05:42,610
based algorithm are basically the
premise

95
00:05:42,610 --> 00:05:45,770
I love anything that is GOP based

96
00:05:45,770 --> 00:05:49,030
is that when you're working over a
finite field

97
00:05:49,030 --> 00:05:52,919
numbers its easy to do exponentiation

98
00:05:52,919 --> 00:05:56,750
so if you're doing modular design may
not know models is

99
00:05:56,750 --> 00:06:01,729
where you dividing you take the
remainder I'm so he do exponentiation

100
00:06:01,729 --> 00:06:05,469
and then take a modular us basically
you're chopping off a bit of information

101
00:06:05,470 --> 00:06:07,220
that you can't get back

102
00:06:07,220 --> 00:06:11,240
so to do exponentiation it easy you do
the exponentiation first

103
00:06:11,240 --> 00:06:15,750
and then you chop it off and reduce it
and you have your answer

104
00:06:15,750 --> 00:06:18,960
but to do to take a logarithm

105
00:06:18,960 --> 00:06:22,419
to do the reverse exponentiation

106
00:06:22,419 --> 00:06:26,190
it's really difficult because you've
lost this information to begin with

107
00:06:26,190 --> 00:06:30,020
and you can just go backwards have to
come up with some way off

108
00:06:30,020 --> 00:06:33,490
taking guesses until you figure out what
the right answers

109
00:06:33,490 --> 00:06:36,500
so going forward is easy going back is
hard

110
00:06:36,500 --> 00:06:40,030
and that's the basic premise the GOP
based algorithms

111
00:06:40,030 --> 00:06:44,130
when you have a public key you're doing
the exponentiation

112
00:06:44,130 --> 00:06:47,409
when you got the private key you're
trying to use secret that you know

113
00:06:47,410 --> 00:06:50,470
to go backwards and circumvent that's
the simple

114
00:06:50,470 --> 00:06:54,129
explanation so this is a general the
keys

115
00:06:54,129 --> 00:06:58,139
anybody has questions can find you later
I'm not gonna get too much into

116
00:06:58,139 --> 00:07:01,240
detail here signatures

117
00:07:01,240 --> 00:07:04,330
arm the basic

118
00:07:04,330 --> 00:07:07,969
way to explain this is that your putting

119
00:07:07,970 --> 00:07:11,160
I to values are an ass your computing
them

120
00:07:11,160 --> 00:07:16,620
in such a way that there's a secret that
only the signer knows

121
00:07:16,620 --> 00:07:20,030
in this case is this value K you pick a
value K

122
00:07:20,030 --> 00:07:23,599
you do some math you get these two
values are an ass out

123
00:07:23,599 --> 00:07:27,469
and because it's based on your private

124
00:07:27,470 --> 00:07:31,930
parameters this math the person who made
the signature can go

125
00:07:31,930 --> 00:07:35,800
forwards and basically use the random
variable to wind

126
00:07:35,800 --> 00:07:39,550
a variable in there so you can't do math

127
00:07:39,550 --> 00:07:43,860
your winding it by putting another
variable into the mix that only you have

128
00:07:43,860 --> 00:07:48,319
and they don't everybody sort of
understand that

129
00:07:48,319 --> 00:07:54,030
yeah okay so you pick your Anabelle UK
use it to buy in the process and you get

130
00:07:54,030 --> 00:07:55,120
are an ass out

131
00:07:55,120 --> 00:07:59,150
as your signature to do the verification

132
00:07:59,150 --> 00:08:03,250
then you do a basic check to make sure
that the value is sane

133
00:08:03,250 --> 00:08:07,240
if it's not thrown out otherwise use the
public key to

134
00:08:07,240 --> 00:08:10,430
go backwards and just check whether the
signature is about

135
00:08:10,430 --> 00:08:13,590
about at the signatures valid then

136
00:08:13,590 --> 00:08:18,620
it's good if it's not then any number of
things may have happened

137
00:08:18,620 --> 00:08:22,979
maybe it wasn't created by the right key
maybe the message was changed

138
00:08:22,979 --> 00:08:26,979
you can tell just by knowing that the
signatures in Ballard

139
00:08:26,979 --> 00:08:31,409
bite somewhere along the line something

140
00:08:31,409 --> 00:08:34,860
so digital signature standard

141
00:08:34,860 --> 00:08:38,810
I contains definition of the digital
signature algorithm

142
00:08:38,810 --> 00:08:42,800
again very creative names here by the
United States government

143
00:08:42,800 --> 00:08:47,170
are managed based on these alqamar
signatures

144
00:08:47,170 --> 00:08:50,740
I is defined as part no DSS and

145
00:08:50,740 --> 00:08:53,910
the federal information processing
standard

146
00:08:53,910 --> 00:08:57,589
on number one 86 I it was originally

147
00:08:57,590 --> 00:09:00,650
made in ninety four it's been updated
twice

148
00:09:00,650 --> 00:09:04,510
once in ninety eight months in 2000 I
basically they've added

149
00:09:04,510 --> 00:09:08,319
extra algorithms and made a few changes
and

150
00:09:08,320 --> 00:09:11,760
tried to keep it is current as possible
for people to be

151
00:09:11,760 --> 00:09:16,370
using it actively and adopting the
technology and spreading

152
00:09:16,370 --> 00:09:20,000
all this is public information it was
all put up for public

153
00:09:20,000 --> 00:09:23,830
peer review there are a lot of
discussions about it

154
00:09:23,830 --> 00:09:29,780
all the details in the system are open
so there's nothing being in here

155
00:09:29,780 --> 00:09:35,069
so the essay very similar generate key
pairs

156
00:09:35,070 --> 00:09:38,540
make a public and private key the
related to each other

157
00:09:38,540 --> 00:09:42,480
and again I won't go into too much
detail here

158
00:09:42,480 --> 00:09:46,220
but if you're wondering the math there
it is

159
00:09:46,220 --> 00:09:53,220
by TSA your keys will be anywhere from
512 to 1024 bits

160
00:09:53,930 --> 00:09:57,420
that's why that whole T value is in
there it scales up

161
00:09:57,420 --> 00:10:00,890
your key and multiples 64-bit

162
00:10:00,890 --> 00:10:04,750
so it has to be one of these sizes this
is actually a problem

163
00:10:04,750 --> 00:10:08,980
with this particular algorithm because a
lot of people are starting to wonder if

164
00:10:08,980 --> 00:10:11,780
1024 bits is enough these days

165
00:10:11,780 --> 00:10:15,540
and TSA cannot go over 10 orbits

166
00:10:15,540 --> 00:10:19,079
everything else is very similar to the
mall and you end up

167
00:10:19,080 --> 00:10:22,550
with a public key which has a

168
00:10:22,550 --> 00:10:26,190
large prime P and a smaller

169
00:10:26,190 --> 00:10:29,500
1q a generator

170
00:10:29,500 --> 00:10:33,100
alpha and the public itself why

171
00:10:33,100 --> 00:10:36,520
and then a private key which is just one
value which is axe

172
00:10:36,520 --> 00:10:39,990
but in practice whenever you have a
private key

173
00:10:39,990 --> 00:10:43,750
II being you still have all the public
key parameters

174
00:10:43,750 --> 00:10:47,850
included with the private key suck you
got the private key voss about access to

175
00:10:47,850 --> 00:10:50,900
the public key obviously

176
00:10:50,900 --> 00:10:55,180
when you wanna make a signature again
you got this random K that you pick

177
00:10:55,180 --> 00:10:58,590
and it's a lot simpler than all the mall
munis compute

178
00:10:58,590 --> 00:11:01,840
these values are an ass again

179
00:11:01,840 --> 00:11:06,570
and in the %uh the mall case you have to
take the hash

180
00:11:06,570 --> 00:11:10,270
a message when you put a digital
signature on message

181
00:11:10,270 --> 00:11:13,390
general you're not putting it on the
entire message you take

182
00:11:13,390 --> 00:11:16,410
hash one-way hash %uh message

183
00:11:16,410 --> 00:11:20,550
first and what that is is a one-way
function

184
00:11:20,550 --> 00:11:23,600
hopefully that will go from an
arbitrarily sized

185
00:11:23,600 --> 00:11:26,850
message to while a smaller text size

186
00:11:26,850 --> 00:11:30,180
but large enough that it's hard to find
out

187
00:11:30,180 --> 00:11:35,950
two messages that will hash to the same
value I generally hashes are like 128

188
00:11:35,950 --> 00:11:40,980
160 256 bits so trying to find a
collision in that space is still really

189
00:11:40,980 --> 00:11:42,030
difficult because

190
00:11:42,030 --> 00:11:45,800
to the 128 is a really big number by

191
00:11:45,800 --> 00:11:48,870
you're dealing with 128 bits as opposed
to you know

192
00:11:48,870 --> 00:11:53,330
megabytes gigabytes however much data
you you have

193
00:11:53,330 --> 00:11:56,770
so you affectively making one-way
compression

194
00:11:56,770 --> 00:12:00,380
your message using a hash function and
then you sign

195
00:12:00,380 --> 00:12:04,700
the hash young actually sign actual
message and hashes are made so that

196
00:12:04,700 --> 00:12:08,880
hopefully you can find two messages that
has to the same thing

197
00:12:08,880 --> 00:12:12,100
on anti essays case there's a very
specific

198
00:12:12,100 --> 00:12:16,280
cash you have to use Shaw 1 again it's
not the United States

199
00:12:16,280 --> 00:12:20,280
standard again it's opened again it's
been for peer review

200
00:12:20,280 --> 00:12:23,709
it's fairly commonly used and it's been
out there for allow

201
00:12:23,710 --> 00:12:26,800
so everybody thinks it's pretty good so

202
00:12:26,800 --> 00:12:31,200
you have message am and you get a
signature Rs

203
00:12:31,200 --> 00:12:34,930
to verify the signature again you to
basics any checking first make sure that

204
00:12:34,930 --> 00:12:36,620
numbers are okay

205
00:12:36,620 --> 00:12:40,040
and then you compute these two values
and then crunch out something else

206
00:12:40,040 --> 00:12:43,910
compared to the signature and if your
basic number crunching using the public

207
00:12:43,910 --> 00:12:45,300
key works out

208
00:12:45,300 --> 00:12:48,340
then message is good

209
00:12:48,340 --> 00:12:51,430
if it's not again you can tell whether
is made with a bad key or

210
00:12:51,430 --> 00:12:54,910
was changed you just know that something
is wrong it's not good

211
00:12:54,910 --> 00:12:58,709
don't don't trust

212
00:12:58,710 --> 00:13:02,380
some thats digital signatures now look
at

213
00:13:02,380 --> 00:13:07,010
actual subliminal channels bet you're
wondering what they are this point

214
00:13:07,010 --> 00:13:11,960
ask

215
00:13:11,960 --> 00:13:15,200
yeah yes on

216
00:13:15,200 --> 00:13:18,750
inverse is are multiplicative inverse so

217
00:13:18,750 --> 00:13:22,100
the inverse asses one over ass on

218
00:13:22,100 --> 00:13:26,170
thats it but it's also a matter notation
because you're working with integers

219
00:13:26,170 --> 00:13:29,890
over a finite group here you can
actually just

220
00:13:29,890 --> 00:13:33,990
do division as you would normally think
about it because I'll give unionized

221
00:13:33,990 --> 00:13:37,700
number whatever there's actually an
inverse

222
00:13:37,700 --> 00:13:41,880
define for any possible number system
where

223
00:13:41,880 --> 00:13:44,910
ass times s inverse Eagles won

224
00:13:44,910 --> 00:13:51,910
however you want to find multiplication
inverse is based on that

225
00:13:55,420 --> 00:14:02,420
are

226
00:14:03,779 --> 00:14:06,149
on he was asking if there was a way to
make

227
00:14:06,149 --> 00:14:12,100
TSA larger based on its restrictions I
don't think

228
00:14:12,100 --> 00:14:15,209
there is but I think by the way that the

229
00:14:15,209 --> 00:14:18,389
algorithm is defined I think there there
are few things that you would have to

230
00:14:18,389 --> 00:14:18,949
change

231
00:14:18,949 --> 00:14:22,269
in order to scale it effectively I'm
pretty sure can be scaled

232
00:14:22,269 --> 00:14:26,519
but by the way this standard is in place
you're not allowed to scale

233
00:14:26,519 --> 00:14:30,120
and as a result everybody's using this
algorithm that is

234
00:14:30,120 --> 00:14:33,529
week or not it's now week but it's not
as weak as

235
00:14:33,529 --> 00:14:40,529
it's not as strong as it could be sorry
why can't you shall 1

236
00:14:40,800 --> 00:14:44,269
okay excellent thank you

237
00:14:44,269 --> 00:14:49,509
gap arm okay thank you

238
00:14:49,509 --> 00:14:53,560
arm there there's the bottleneck I shall
inspect 260 bets

239
00:14:53,560 --> 00:14:58,420
arm which is the size of Q arm so if you
want to expand

240
00:14:58,420 --> 00:15:05,420
you'd have to use different hash that
would allow to be bigger now arm

241
00:15:08,579 --> 00:15:11,920
key activity use a different hash then

242
00:15:11,920 --> 00:15:15,670
you can expand it thanks to somebody in
the audience pointing out something that

243
00:15:15,670 --> 00:15:16,329
for not

244
00:15:16,329 --> 00:15:19,949
on if you use a different ash they can
get larger

245
00:15:19,949 --> 00:15:24,029
then shot one which is fixed at 160 beds
then you can scale

246
00:15:24,029 --> 00:15:27,110
TSA but the standard itself tss

247
00:15:27,110 --> 00:15:31,620
cannot scale because it requires shot
one much what

248
00:15:31,620 --> 00:15:35,360
I yeah but it's not sell

249
00:15:35,360 --> 00:15:38,569
yes

250
00:15:38,569 --> 00:15:42,210
all rights among all channels

251
00:15:42,210 --> 00:15:46,350
so you're wondering what it is at this
point and basically it's a way of

252
00:15:46,350 --> 00:15:47,520
embedding information

253
00:15:47,520 --> 00:15:52,260
in some sort of public communication in
a way that's not detectable

254
00:15:52,260 --> 00:15:56,439
unless you know what you're looking for
unless you have some sort of secret

255
00:15:56,440 --> 00:16:03,440
that you know is there you're not gonna
find information on steganography is

256
00:16:06,150 --> 00:16:09,430
one form I'll a covert or

257
00:16:09,430 --> 00:16:12,700
you can call the subliminal channel it's
very similar

258
00:16:12,700 --> 00:16:18,730
okay if you have a question you want to
run up and use my

259
00:16:18,730 --> 00:16:23,430
can do that too home so it's it's a
modest economic free in that you're

260
00:16:23,430 --> 00:16:25,110
putting information in a public

261
00:16:25,110 --> 00:16:28,850
channel by you're hoping that only the
person on the other end

262
00:16:28,850 --> 00:16:33,050
knows what it is and in steganography is
case it's basically how to look for it

263
00:16:33,050 --> 00:16:36,450
with a someone on channel in the essay

264
00:16:36,450 --> 00:16:41,200
another trick to it there are two types

265
00:16:41,200 --> 00:16:44,870
possible channels and digital signatures
broadband and narrowband

266
00:16:44,870 --> 00:16:48,610
I basically when you look at the amount

267
00:16:48,610 --> 00:16:51,800
bits you have in a digital signature you
can

268
00:16:51,800 --> 00:16:56,010
make a nice information-theoretic
estimate how many

269
00:16:56,010 --> 00:17:01,450
bits are being used to actually do the
duties of a digital signature

270
00:17:01,450 --> 00:17:04,709
in terms of making the thing resistant

271
00:17:04,709 --> 00:17:08,440
to forgery or attacks

272
00:17:08,440 --> 00:17:12,250
other sorts on it but usually there's
extra space in

273
00:17:12,250 --> 00:17:15,490
because if you look at it information
there you might say no they're this many

274
00:17:15,490 --> 00:17:16,030
bets

275
00:17:16,030 --> 00:17:21,280
and this larger number of bits but that
doesn't mean you can isolates a 79 to 25

276
00:17:21,280 --> 00:17:26,569
this it's actually smoothed out 17 get
some information in the 25 so there's

277
00:17:26,569 --> 00:17:27,409
extra space in

278
00:17:27,410 --> 00:17:31,340
broadband channels use all that extra
space

279
00:17:31,340 --> 00:17:35,139
figuring out absolutely what is
nonessential

280
00:17:35,140 --> 00:17:38,660
and using narrowband channels

281
00:17:38,660 --> 00:17:42,790
don't use all use a much smaller amount
maybe

282
00:17:42,790 --> 00:17:47,790
one bit or two bits per signature and
the advantages to not using nearly as

283
00:17:47,790 --> 00:17:48,670
much space

284
00:17:48,670 --> 00:17:52,530
is that you get a poll also to other
neat tricks with

285
00:17:52,530 --> 00:17:55,800
maybe it's hard dated

286
00:17:55,800 --> 00:18:00,180
back to detect maybe has other
advantages

287
00:18:00,180 --> 00:18:04,750
in terms the verification signatures

288
00:18:04,750 --> 00:18:11,690
by there good reasons for using so let's
look at the subliminal channels and ESA

289
00:18:11,690 --> 00:18:14,790
85 man by the name of

290
00:18:14,790 --> 00:18:18,290
estaba Simmons found a subliminal
channel and el-gamal

291
00:18:18,290 --> 00:18:22,050
why the notable things about this a
little channel

292
00:18:22,050 --> 00:18:26,600
is that the recipient the information
needs to know your private key

293
00:18:26,600 --> 00:18:31,080
now if you want to communicate
information with somebody else

294
00:18:31,080 --> 00:18:34,340
out there you can generate a key pair
and give the other guy

295
00:18:34,340 --> 00:18:38,500
your private key and him view it as some
sort symmetric

296
00:18:38,500 --> 00:18:42,270
information hiding safer but it's got
one drawback

297
00:18:42,270 --> 00:18:46,629
and that is if you're actually using
this key pair for signatures or even if

298
00:18:46,630 --> 00:18:47,390
you're not

299
00:18:47,390 --> 00:18:51,230
they can generate a signature which with
whatever identity

300
00:18:51,230 --> 00:18:54,680
you put on it and if anybody tries to
verify

301
00:18:54,680 --> 00:18:58,270
it will come out as being you and

302
00:18:58,270 --> 00:19:02,639
if you say oh well Mikey was compromised
people say why are you still using

303
00:19:02,640 --> 00:19:06,560
if you pretend your key wasn't
compromised then you get stuck with the

304
00:19:06,560 --> 00:19:08,000
blame for whatever they sign

305
00:19:08,000 --> 00:19:11,030
and this is a little more bothersome
today

306
00:19:11,030 --> 00:19:14,649
because digital signatures are actually
starting to become legally binding

307
00:19:14,650 --> 00:19:18,780
do you wanna give somebody else the
ability to sign documents

308
00:19:18,780 --> 00:19:22,710
as you without anyway telling whether it
was actually you

309
00:19:22,710 --> 00:19:27,440
signing it or not if I don't want to do
that the other problem with the ElGamal

310
00:19:27,440 --> 00:19:28,850
subliminal channel

311
00:19:28,850 --> 00:19:32,460
is that there's only a fraction of a
possible messages you can send

312
00:19:32,460 --> 00:19:36,490
some messages just fail you won't be
able to do it mathematically and have

313
00:19:36,490 --> 00:19:37,680
the signature verified

314
00:19:37,680 --> 00:19:40,840
the same time and some

315
00:19:40,840 --> 00:19:44,750
messages you can send buddy is
computationally infeasible

316
00:19:44,750 --> 00:19:48,970
to get it back out so the information's
in there somewhere but the other person

317
00:19:48,970 --> 00:19:55,660
Kampala on he asked approximately what
fraction of messages

318
00:19:55,660 --> 00:19:59,120
I don't remember off the top of my head
its it's a fairly

319
00:19:59,120 --> 00:20:03,410
decent amount I mean you can still send
things whatever you can still some

320
00:20:03,410 --> 00:20:06,150
whatever you want as long as you're
willing to be creative about how you

321
00:20:06,150 --> 00:20:06,730
phrase it

322
00:20:06,730 --> 00:20:10,350
it's not that terribly restrictive

323
00:20:10,350 --> 00:20:14,890
it's still there are a lot of messages
can send

324
00:20:14,890 --> 00:20:18,470
I can look up the numbers after est like

325
00:20:18,470 --> 00:20:23,770
so +91 DSS including the digital
signature algorithm is proposed

326
00:20:23,770 --> 00:20:27,540
I'd put out in this proposal or the
ships publication

327
00:20:27,540 --> 00:20:30,940
by the National Institute Standards and
Technology

328
00:20:30,940 --> 00:20:35,130
two years later this guy I find one
broadband into narrow bands

329
00:20:35,130 --> 00:20:38,410
someone all channels in the algorithm so

330
00:20:38,410 --> 00:20:41,720
it stop a review at this time he's doing
is now says

331
00:20:41,720 --> 00:20:46,100
you found something before he sees that
they're related he finds min TSA

332
00:20:46,100 --> 00:20:49,240
again the broadband channel requires
sharing the private key

333
00:20:49,240 --> 00:20:53,200
all messages can be sent consent any
message you want

334
00:20:53,200 --> 00:20:56,900
the narrowband channels you can maybe
only send a few bits at a time

335
00:20:56,900 --> 00:21:01,340
but the other person doesn't need your
key so anybody out there with just your

336
00:21:01,340 --> 00:21:02,169
public key

337
00:21:02,170 --> 00:21:06,100
which everybody would supposedly have to
verify your signature anyways

338
00:21:06,100 --> 00:21:09,770
they can all pull out a few bits of
information from each signature

339
00:21:09,770 --> 00:21:13,420
that is absolutely hidden in the
signature

340
00:21:13,420 --> 00:21:17,630
and you can only find you know you're
looking for

341
00:21:17,630 --> 00:21:20,900
and

342
00:21:20,900 --> 00:21:24,440
94 one year later after he

343
00:21:24,440 --> 00:21:27,570
makes a run of conferences I in america

344
00:21:27,570 --> 00:21:31,730
elsewhere give a nice talkin Italy I
believe Rome

345
00:21:31,730 --> 00:21:35,090
on the saloon all channels and basically
said hey look

346
00:21:35,090 --> 00:21:38,220
these things exist not only do they
exist its

347
00:21:38,220 --> 00:21:42,910
really easy to use them and it's really
easy to use them for whatever you want

348
00:21:42,910 --> 00:21:46,070
and this is possibly a very bad thing

349
00:21:46,070 --> 00:21:50,889
94 DSS is accepted as the first digital
signature standard

350
00:21:50,890 --> 00:21:54,080
by any government nobody's really

351
00:21:54,080 --> 00:21:58,050
heard much about this sense so the
question is are the subliminal channels

352
00:21:58,050 --> 00:22:04,149
a bug or feature

353
00:22:04,150 --> 00:22:08,210
so we want to use this I'm a look at the
broadband channel because

354
00:22:08,210 --> 00:22:12,130
you can put a lot more in it you can
show off a lot more with it

355
00:22:12,130 --> 00:22:15,790
and it's simpler and the airmen channels

356
00:22:15,790 --> 00:22:19,399
what you want to do is just stuff some
information in the signature

357
00:22:19,400 --> 00:22:22,460
such that the signatures still valid
anybody with

358
00:22:22,460 --> 00:22:26,010
your public key was no idea what's going
on can still

359
00:22:26,010 --> 00:22:29,540
verify the signature everything looks
good and

360
00:22:29,540 --> 00:22:35,340
they have no way of actually proving
that the information is there or not

361
00:22:35,340 --> 00:22:38,600
there's also the problem I'll without
the shared secret they shouldn't be able

362
00:22:38,600 --> 00:22:40,429
to stumble upon your information

363
00:22:40,429 --> 00:22:45,360
they shouldn't just be poking at it and
pull out its 1379 in

364
00:22:45,360 --> 00:22:49,130
you'll find a message whatever terrorist
plans have

365
00:22:49,130 --> 00:22:52,400
there has to be some way of knowing a
little more than that

366
00:22:52,400 --> 00:22:58,740
to be able to actually reconstruct for
message

367
00:22:58,740 --> 00:23:02,679
and the best part is the math is really
simple

368
00:23:02,679 --> 00:23:07,380
so remember that random variable K used
as the blinding factor

369
00:23:07,380 --> 00:23:12,230
remember that so if you know the private
key

370
00:23:12,230 --> 00:23:15,850
you can backtrack and figure out what
Ky's

371
00:23:15,850 --> 00:23:19,420
so all you do is you give the private
key to somebody else

372
00:23:19,420 --> 00:23:22,840
and they can go back and they can find
out what Kate

373
00:23:22,840 --> 00:23:26,939
case a 160 bits so it's pretty hard to
guess randomly

374
00:23:26,940 --> 00:23:31,800
so your private key is generally safe
somebody's just trying to do an attack

375
00:23:31,800 --> 00:23:36,420
by something else has a key then they
can pull 160 bits out

376
00:23:36,420 --> 00:23:40,550
and as long as you distribute these bits
and messages fairly well

377
00:23:40,550 --> 00:23:44,770
then chances are somebody is not going
to be able to

378
00:23:44,770 --> 00:23:49,490
tell that you're working with a specific
pattern if I love your 160 bit numbers

379
00:23:49,490 --> 00:23:54,520
star with few particular bytes then you
might run into problems because you're

380
00:23:54,520 --> 00:23:55,629
reducing

381
00:23:55,630 --> 00:23:59,960
the amount space you have to go through
for brute force attack

382
00:23:59,960 --> 00:24:03,340
songs are smart about it you can get a
hundred and sixty minutes each time

383
00:24:03,340 --> 00:24:09,909
no work as long as you're willing to
give up your private key

384
00:24:09,910 --> 00:24:14,220
unfortunately this also works the other
way around

385
00:24:14,220 --> 00:24:20,350
if somebody knows K they can backtrack
and get your private K

386
00:24:20,350 --> 00:24:24,140
it's actually pretty simple you know all
the variables but one

387
00:24:24,140 --> 00:24:27,450
and you just solve for the private key
acts

388
00:24:27,450 --> 00:24:30,880
so all you have to do is figure out some
way

389
00:24:30,880 --> 00:24:34,790
knowing what random variable act k is

390
00:24:34,790 --> 00:24:39,010
that they're using and you got there K
now you might think

391
00:24:39,010 --> 00:24:43,700
all sorts of ways of doing this weather
by putting some sort of backdoor into

392
00:24:43,700 --> 00:24:45,820
their program to

393
00:24:45,820 --> 00:24:49,889
playing with a random number generator a
random number generator is bad then you

394
00:24:49,890 --> 00:24:54,440
effectively reduced the key space any
sort of attack

395
00:24:54,440 --> 00:24:57,409
there also is a great things that you
can do with this if you want some

396
00:24:57,409 --> 00:25:01,600
buddies K

397
00:25:01,600 --> 00:25:08,260
people know it dis look like how online
source code my changing here

398
00:25:08,260 --> 00:25:12,070
I'm changing one-liner source code where
you pick a random line

399
00:25:12,070 --> 00:25:15,980
and to two lines which can be reduced to
one if I'm not being terribly lazy and

400
00:25:15,980 --> 00:25:16,990
want to change

401
00:25:16,990 --> 00:25:19,780
some other things here and there
compress a little so that it doesn't go

402
00:25:19,780 --> 00:25:21,560
off the end of the slide

403
00:25:21,560 --> 00:25:24,940
by changing 11 source code to two lines

404
00:25:24,940 --> 00:25:28,390
and send a pic Inc a randomly you just
allocate

405
00:25:28,390 --> 00:25:32,409
the memory space for K and then set it
to something in particular

406
00:25:32,409 --> 00:25:37,220
in this case let's edit to the value of
the hatch

407
00:25:37,220 --> 00:25:41,070
simple easy to remember it works

408
00:25:41,070 --> 00:25:45,290
cell you know noah K is if you are using
a patched version

409
00:25:45,290 --> 00:25:51,240
GPG that shouldn't be using

410
00:25:51,240 --> 00:25:55,980
one-line politics

411
00:25:55,980 --> 00:25:59,400
cell say you want to get there key

412
00:25:59,400 --> 00:26:03,460
from this value axe which technically
makes up the private key

413
00:26:03,460 --> 00:26:08,130
well it's actually pretty easy to do yes
South Trax

414
00:26:08,130 --> 00:26:12,880
poor the parameters on their public a
then you go through all of the OpenPGP

415
00:26:12,880 --> 00:26:13,750
def

416
00:26:13,750 --> 00:26:17,960
defined star for encapsulating keys and
turning them into

417
00:26:17,960 --> 00:26:22,770
however you want to use down whether RFC
whatever compliant ur ASCII are murder

418
00:26:22,770 --> 00:26:25,820
however you want your key whatever
flavor you want in

419
00:26:25,820 --> 00:26:29,570
all you do is you take the key
encapsulate the Kenya Certificate

420
00:26:29,570 --> 00:26:33,158
you make a key block you put the
certificate in the key block you copy at

421
00:26:33,159 --> 00:26:34,380
the user ID

422
00:26:34,380 --> 00:26:37,800
put it in the key block put a signature
cell signature

423
00:26:37,800 --> 00:26:41,370
on the key which you can do because got
the key

424
00:26:41,370 --> 00:26:45,580
added to the key block armored if you
want write to a file

425
00:26:45,580 --> 00:26:52,580
you've got their key wanna see how this
works

426
00:26:55,440 --> 00:26:59,780
everybody see this I mmm

427
00:26:59,780 --> 00:27:02,920
how to do this

428
00:27:02,920 --> 00:27:05,020
I don't think that'll change the size
the font

429
00:27:05,020 --> 00:27:08,530
can kill the lights keep the lights down
a little so make it his

430
00:27:08,530 --> 00:27:11,850
control right button

431
00:27:11,850 --> 00:27:17,210
I didn't do it how

432
00:27:17,210 --> 00:27:22,890
is that now it's not much better

433
00:27:22,890 --> 00:27:27,990
yeah Yemen today right now

434
00:27:27,990 --> 00:27:34,809
arm

435
00:27:34,809 --> 00:27:38,470
okay it's just highlighting

436
00:27:38,470 --> 00:27:41,990
I home

437
00:27:41,990 --> 00:27:45,540
I think I'll just have to do that is
this

438
00:27:45,540 --> 00:27:49,159
any 0 you go

439
00:27:49,160 --> 00:27:54,650
go alright so this might not be as good
a demonstration as I was hoping

440
00:27:54,650 --> 00:27:58,400
oh well I'll while my but see

441
00:27:58,400 --> 00:28:03,650
the I

442
00:28:03,650 --> 00:28:06,770
haha you rich

443
00:28:06,770 --> 00:28:13,770
there we go thank you very I've never

444
00:28:14,220 --> 00:28:20,159
I've never seen that many before thank
you our rights

445
00:28:20,159 --> 00:28:24,049
so wets

446
00:28:24,049 --> 00:28:31,049
generate a key pair so we wanted TSA
know the marking

447
00:28:31,850 --> 00:28:38,850
1024 bits is fine

448
00:28:40,530 --> 00:28:45,379
am generate a key generates and
generates

449
00:28:45,380 --> 00:28:48,910
brand new key

450
00:28:48,910 --> 00:28:55,910
alright now it's make a message

451
00:28:59,520 --> 00:29:03,610
have a nice simple to test message and
let's make a signature on

452
00:29:03,610 --> 00:29:08,030
let's use the bad version GPG to make
the signature

453
00:29:08,030 --> 00:29:11,310
the patched version

454
00:29:11,310 --> 00:29:16,629
alright so we should now have a

455
00:29:16,630 --> 00:29:20,650
signature and there it is

456
00:29:20,650 --> 00:29:24,920
cell looks like any regular signature
everything's gone for okay

457
00:29:24,920 --> 00:29:31,920
everything's gone fine let's see if we
can verify the signature

458
00:29:33,740 --> 00:29:37,030
good signature from testking the
signatures fine

459
00:29:37,030 --> 00:29:42,270
so everything looks normal you attach
the signature to the message you send it

460
00:29:42,270 --> 00:29:42,639
out

461
00:29:42,640 --> 00:29:46,580
on in an email or to use net or whatever
you do with your digital signatures

462
00:29:46,580 --> 00:29:50,189
and Brandon people grab your key and you
go through the whole

463
00:29:50,190 --> 00:29:54,040
he signing process intent 5 o'clock
tomorrow

464
00:29:54,040 --> 00:29:57,980
intent and then you verify the signature

465
00:29:57,980 --> 00:30:02,450
and sing okay everything looks fine so

466
00:30:02,450 --> 00:30:09,450
what's the problem here well

467
00:30:12,510 --> 00:30:16,840
so that this program called some DS a
key are written in Perl

468
00:30:16,840 --> 00:30:19,930
using the crypt OpenPGP prolonged

469
00:30:19,930 --> 00:30:24,250
very nice said models by the way I
highly suggest using if you want to do

470
00:30:24,250 --> 00:30:26,120
anything with OpenPGP keys

471
00:30:26,120 --> 00:30:31,590
and you run the program and it computes
and values

472
00:30:31,590 --> 00:30:34,930
and a look key armored and written to
disk

473
00:30:34,930 --> 00:30:39,690
I wonder what's in XD well let's take a
look at it first

474
00:30:39,690 --> 00:30:43,200
actually was it do up top

475
00:30:43,200 --> 00:30:48,510
you'll see that reads the signature
first on this case it's a v3 signature

476
00:30:48,510 --> 00:30:51,710
are typed 17 which her response to TSA

477
00:30:51,710 --> 00:30:54,710
somebody's trying to use an RS air other
signature

478
00:30:54,710 --> 00:31:00,570
it will abort and say hey sorry this
does mark your User ID in time stamp get

479
00:31:00,570 --> 00:31:02,629
a hasher the message at the signatures
on

480
00:31:02,630 --> 00:31:07,400
and get the values are an ass then it
goes and grabs that public key

481
00:31:07,400 --> 00:31:11,280
looks it up pulls out to the public
during file text the fingerprint on the

482
00:31:11,280 --> 00:31:11,750
key

483
00:31:11,750 --> 00:31:15,830
version four key it's not a subkey and
it pulls out the public key

484
00:31:15,830 --> 00:31:18,939
PQ outlines case G and why

485
00:31:18,940 --> 00:31:22,880
checks the signature to make sure it's
valid it's a valid signature

486
00:31:22,880 --> 00:31:27,050
then it figures out what your private
key is overlook their Zacks

487
00:31:27,050 --> 00:31:31,830
and then just to make sure X is correct
goes through the process to make sure

488
00:31:31,830 --> 00:31:35,500
that when you do the exponentiation it
matches up with the publication

489
00:31:35,500 --> 00:31:39,340
yes it does in fact matchup and then it
does all that stuff

490
00:31:39,340 --> 00:31:39,590
just

