1
00:00:01,729 --> 00:00:03,820
and he's doing proactively

2
00:00:03,820 --> 00:00:07,570
secure programming techniques thank you

3
00:00:07,570 --> 00:00:12,179
yes as you mention my name is Jason for
Tesla from

4
00:00:12,179 --> 00:00:15,389
activism active is more is a

5
00:00:15,389 --> 00:00:19,330
human rights and Technology Group it is
a subdivision of the cult of the dead

6
00:00:19,330 --> 00:00:20,090
cow

7
00:00:20,090 --> 00:00:25,310
we focus on where special projects group
we focus on

8
00:00:25,310 --> 00:00:28,710
researching and implementing
circumvention

9
00:00:28,710 --> 00:00:33,929
technology designed to defeat
state-sponsored censorship be internet

10
00:00:33,929 --> 00:00:36,760
we have a major announcement coming up

11
00:00:36,760 --> 00:00:40,489
here at home tomorrow 1 p.m. its

12
00:00:40,489 --> 00:00:44,649
gonna be in the on schedule speaker
track promoting it heavily

13
00:00:44,649 --> 00:00:48,319
we show up we're going to be releasing

14
00:00:48,319 --> 00:00:52,920
a major project small one result

15
00:00:52,920 --> 00:00:57,039
love that project is this presentation
for the last two and a half years I've

16
00:00:57,039 --> 00:00:58,460
been working on this project

17
00:00:58,460 --> 00:01:04,610
and unnamed project and along the way
I've been

18
00:01:04,610 --> 00:01:08,390
thinking here in their little details
about proactive

19
00:01:08,390 --> 00:01:12,200
programming techniques and that's where
I'd like to share with you today

20
00:01:12,200 --> 00:01:19,200
first a

21
00:01:21,810 --> 00:01:27,680
a lot of the techniques deal with in the
context of direct memory languages

22
00:01:27,680 --> 00:01:32,119
me to find first direct number languages
are those that allow direct memory

23
00:01:32,119 --> 00:01:36,829
direct access to memory without any
bounds checking those are

24
00:01:36,829 --> 00:01:40,740
order languages assembly ccprose plus

25
00:01:40,740 --> 00:01:43,929
there's no bounds checking accessories
for

26
00:01:43,929 --> 00:01:50,149
reading or writing has just done
directly in memory so I guess

27
00:01:50,149 --> 00:01:53,700
none none direct number languages will
be those that

28
00:01:53,700 --> 00:01:57,189
allow access only for falls within the
buffers range

29
00:01:57,189 --> 00:02:01,939
so it has to do bounds checking every
single time you read or write examples

30
00:02:01,939 --> 00:02:05,549
are the new languages Java PHP Perl
Python another's

31
00:02:05,549 --> 00:02:12,549
k so

32
00:02:13,980 --> 00:02:18,629
the first foreign like to point out is
don't use direct memory language is

33
00:02:18,629 --> 00:02:21,349
there's little need to use them anymore

34
00:02:21,349 --> 00:02:25,290
the new languages such as Java PHP Perl
that I just mentioned

35
00:02:25,290 --> 00:02:28,829
those are better for several reasons
slower

36
00:02:28,830 --> 00:02:34,120
faster development I'm for one

37
00:02:34,120 --> 00:02:37,409
and and do the Browns tracking their
mean the buffer overflows

38
00:02:37,409 --> 00:02:42,010
mostly I mean in the code that you're
right

39
00:02:42,010 --> 00:02:48,170
you'll be muna buffer overflows but
remember there was one time in Java Java

40
00:02:48,170 --> 00:02:50,220
from Sun

41
00:02:50,220 --> 00:02:56,129
was vulnerable to buffer overflow but
that is a %uh problem in color very

42
00:02:56,129 --> 00:02:58,518
specific code that can be fixed in one
spot on

43
00:02:58,519 --> 00:03:03,049
and thousands of projects %uh so the
consequences I've

44
00:03:03,049 --> 00:03:07,030
bounds checking once floor execution
time every time you access

45
00:03:07,030 --> 00:03:12,860
honorary reading or writing that has to
be done so that slows it down the

46
00:03:12,860 --> 00:03:16,560
benefits like this it faster development
I'm immunity from buffer overflows

47
00:03:16,560 --> 00:03:20,849
so that's why you should use them
anymore there is

48
00:03:20,849 --> 00:03:26,599
AV it is tempting us till you see in C
pas plus okay I'm a hardcore programmer

49
00:03:26,599 --> 00:03:30,430
I like see I like the power it gives you
but you have to fight that

50
00:03:30,430 --> 00:03:34,930
okay you have to fight that urge

51
00:03:34,930 --> 00:03:39,250
did on your system try to use these new
languages

52
00:03:39,250 --> 00:03:46,250
when you can so the bottom line is if
you need to use

53
00:03:50,209 --> 00:03:53,939
use direct number languages use
proactively secure programming

54
00:03:53,939 --> 00:03:55,828
techniques prevent buffer overflows

55
00:03:55,829 --> 00:04:01,150
and other logic errors so the question
is what is proactive

56
00:04:01,150 --> 00:04:04,780
and then i'm talking about. using

57
00:04:04,780 --> 00:04:09,819
it's an application of defense and up at
the college level

58
00:04:09,819 --> 00:04:13,579
it's an implementation connections then
she Asian the defense and up

59
00:04:13,579 --> 00:04:20,579
principal at the Colo

60
00:04:22,108 --> 00:04:26,150
should give a piece quick buffer
overflow example this is by far

61
00:04:26,150 --> 00:04:29,270
definitive guide on buffer overflows but

62
00:04:29,270 --> 00:04:33,389
so this program here

63
00:04:33,389 --> 00:04:37,990
you have two variables one called

64
00:04:37,990 --> 00:04:42,850
authenticated which is an integer set to
0 you have the character buffer which is

65
00:04:42,850 --> 00:04:44,030
16 bytes law

66
00:04:44,030 --> 00:04:47,750
defined in the order

67
00:04:47,750 --> 00:04:51,070
the GCC compiler will place

68
00:04:51,070 --> 00:04:54,690
of and woman in of in high memory

69
00:04:54,690 --> 00:04:57,729
I don't think that that is a requirement

70
00:04:57,729 --> 00:05:02,560
I see NCC requirement but that seems to
be

71
00:05:02,560 --> 00:05:09,330
pretty common with compilers to put
variables defined later

72
00:05:09,330 --> 00:05:13,099
low memory so the program copies from
the

73
00:05:13,100 --> 00:05:16,860
command line a v1 blindly into be you
out of the

74
00:05:16,860 --> 00:05:19,960
of 16 by character

75
00:05:19,960 --> 00:05:23,580
and check to see that buff is equal to
pass were

76
00:05:23,580 --> 00:05:30,430
if so that sets of indicated what little
we have some code that checks

77
00:05:30,430 --> 00:05:33,789
authenticated and if it's 90

78
00:05:33,789 --> 00:05:39,139
which is one no print server tell
friends list

79
00:05:39,139 --> 00:05:42,810
meaning you authenticated was it'll
print nosers

80
00:05:42,810 --> 00:05:46,460
so the top

81
00:05:46,460 --> 00:05:50,630
we run this program with the wrong
password and I'll say no we were in it

82
00:05:50,630 --> 00:05:52,479
with the right program will say yes

83
00:05:52,479 --> 00:05:56,430
and then remember we didn't do any
bounds checking

84
00:05:56,430 --> 00:06:00,050
the stream copy into you up soon

85
00:06:00,050 --> 00:06:03,169
if we put a whole bunch of characters

86
00:06:03,169 --> 00:06:06,620
on the command line they'll be copied
into UF blindly

87
00:06:06,620 --> 00:06:10,729
do once within that enough

88
00:06:10,729 --> 00:06:14,750
says no vers we do a little bit more and
also the

89
00:06:14,750 --> 00:06:18,270
we authenticated and what happened what
happened in memory is a

90
00:06:18,270 --> 00:06:22,440
is illustrated in that picture right
there the

91
00:06:22,440 --> 00:06:26,570
axes started out and the UF but they
overflowed over in the next memory

92
00:06:26,570 --> 00:06:27,740
address which was

93
00:06:27,740 --> 00:06:32,140
were authenticate it was store the

94
00:06:32,140 --> 00:06:36,070
hex value for these axes is 90

95
00:06:36,070 --> 00:06:40,450
you switch back the hex value for
reviews

96
00:06:40,450 --> 00:06:44,039
those X's are nonzero and so if

97
00:06:44,039 --> 00:06:51,039
authenticated is non-zero you just a
funny kid

98
00:06:57,120 --> 00:06:58,020
so one

99
00:06:58,020 --> 00:07:01,698
won the first way to prevent against
this buffer overflow

100
00:07:01,699 --> 00:07:05,150
is to use the steerer stir and functions

101
00:07:05,150 --> 00:07:09,199
its stir and cats stir and copy

102
00:07:09,199 --> 00:07:14,940
those are the function definitions right
there takes three arguments

103
00:07:14,940 --> 00:07:18,240
destinations source and asides

104
00:07:18,240 --> 00:07:22,510
I maintain that these functions have
some quirks to them

105
00:07:22,510 --> 00:07:27,300
because they're all known intuitive if
uses all the time you can use them

106
00:07:27,300 --> 00:07:28,260
safely

107
00:07:28,260 --> 00:07:32,860
but there's a there's all things here
and there the the make it difficult for

108
00:07:32,860 --> 00:07:33,639
example

109
00:07:33,639 --> 00:07:37,550
your third variable and refers to how
many

110
00:07:37,550 --> 00:07:41,490
characters to copy from source it has
nothing to do with

111
00:07:41,490 --> 00:07:44,639
dust server try to protect overflow and

112
00:07:44,639 --> 00:07:48,500
us the destination that third argument

113
00:07:48,500 --> 00:07:52,610
there's no correlation so little-known
intuitive

114
00:07:52,610 --> 00:07:56,360
it is possible to use correctly but I
maintain a little-known into

115
00:07:56,360 --> 00:08:03,160
here's an example

116
00:08:03,160 --> 00:08:07,340
to character is

117
00:08:07,340 --> 00:08:12,570
people hate speech copy

118
00:08:12,570 --> 00:08:16,219
a string you do which is seven bytes
long interview

119
00:08:16,220 --> 00:08:20,270
of it'll be no terminated which means a

120
00:08:20,270 --> 00:08:24,870
occupies the entire offer the next copy

121
00:08:24,870 --> 00:08:29,580
is copying EV one in wf2

122
00:08:29,580 --> 00:08:33,679
and on the right

123
00:08:33,680 --> 00:08:36,770
as an illustration what happens when you
run it we run it with

124
00:08:36,770 --> 00:08:40,679
7 bites input we print them both out

125
00:08:40,680 --> 00:08:46,580
and that's exactly what you expect and
put more

126
00:08:46,580 --> 00:08:50,260
in southern and look at what happens
above to

127
00:08:50,260 --> 00:08:54,040
we overrule the mill terminator

128
00:08:54,040 --> 00:08:57,640
in the UF to was

129
00:08:57,640 --> 00:09:00,810
became coalesced would be rough one

130
00:09:00,810 --> 00:09:07,810
is a problem

131
00:09:15,490 --> 00:09:22,180
for them a safer replacement will be the
sister

132
00:09:22,180 --> 00:09:26,880
L functions they were introduced in
OpenBSD 2.4

133
00:09:26,880 --> 00:09:32,290
they have similar definitions as a
sister and caster

134
00:09:32,290 --> 00:09:35,849
I'll copy functions but they're safer
and that

135
00:09:35,850 --> 00:09:41,339
they protect DST they guarantee that no
more than size

136
00:09:41,339 --> 00:09:44,910
bites are written into DST and
furthermore

137
00:09:44,910 --> 00:09:48,399
guarantees that an alternator is written
into

138
00:09:48,399 --> 00:09:51,769
DST as we saw before it is possible to
override

139
00:09:51,769 --> 00:09:57,060
the mall terminator so this protects
against that

140
00:09:57,060 --> 00:10:00,750
this is safer to use its more intuitive

141
00:10:00,750 --> 00:10:04,970
unfortunately it's not portable

142
00:10:04,970 --> 00:10:08,700
I believe OpenBSD is the only system
that exist upon us

143
00:10:08,700 --> 00:10:13,950
so shake butter the other BS these
included okay that makes sense I don't

144
00:10:13,950 --> 00:10:15,010
believe it's on Linux

145
00:10:15,010 --> 00:10:18,649
yes oh

146
00:10:18,649 --> 00:10:23,050
the the moral of the story is if your
tryna

147
00:10:23,050 --> 00:10:29,050
record for those platforms I'm hewlett
it is easy to emulate I mean with myself

148
00:10:29,050 --> 00:10:36,050
if you want my cum I'll give it to you
as you know next

149
00:10:40,170 --> 00:10:44,699
strings strings are we reverse I so they
automatically resize themselves as

150
00:10:44,699 --> 00:10:45,579
necessary

151
00:10:45,579 --> 00:10:48,990
person's character is with her just
ranges

152
00:10:48,990 --> 00:10:52,310
love Maria addresses the don't grow
there sir

153
00:10:52,310 --> 00:10:55,860
strings or where their size so

154
00:10:55,860 --> 00:11:00,690
the resizing souls anybody any Java
programmers

155
00:11:00,690 --> 00:11:03,959
in here we have any Java programmers

156
00:11:03,959 --> 00:11:06,970
what way time people

157
00:11:06,970 --> 00:11:13,010
okay yeah you guys know how easy it is
to manipulate strings it is very very

158
00:11:13,010 --> 00:11:13,899
simple

159
00:11:13,899 --> 00:11:17,430
verses people have you done switch back
to see

160
00:11:17,430 --> 00:11:20,839
and try to manipulate strings then

161
00:11:20,839 --> 00:11:24,870
its pain that's have so i cant describe

162
00:11:24,870 --> 00:11:29,370
the interface layer is is very nice and
very polished

163
00:11:29,370 --> 00:11:33,569
from the functional standpoint strings
are so much easier to use

164
00:11:33,569 --> 00:11:36,630
and from a security standpoint it's
better because

165
00:11:36,630 --> 00:11:40,640
you don't have to worry about buffer
overflows the strings take care of

166
00:11:40,640 --> 00:11:41,510
themselves

167
00:11:41,510 --> 00:11:45,410
you do have to worry about 45 overflows
in the string library

168
00:11:45,410 --> 00:11:48,649
but that is a set location of code small

169
00:11:48,649 --> 00:11:51,760
its centralized and it can be audited

170
00:11:51,760 --> 00:11:54,790
multiple times and surprisingly

171
00:11:54,790 --> 00:11:58,589
in the ceiling which you can use trains
how many people actually

172
00:11:58,589 --> 00:12:01,660
nobody you can't

173
00:12:01,660 --> 00:12:07,040
1 cup 1

174
00:12:07,040 --> 00:12:11,469
popular implementation in C is from the
GV library

175
00:12:11,470 --> 00:12:14,699
here's an example the interface

176
00:12:14,699 --> 00:12:19,140
you have g-string new

177
00:12:19,140 --> 00:12:22,380
which takes the you know set

178
00:12:22,380 --> 00:12:26,640
initial value returns the g-string

179
00:12:26,640 --> 00:12:32,180
a couple people got

180
00:12:32,180 --> 00:12:37,970
a yes so when you wanna keep coming to
the string have g-string a pen prenup

181
00:12:37,970 --> 00:12:39,000
which just keeps

182
00:12:39,000 --> 00:12:43,730
you see for matters and you can just
dump all kinds of that in there

183
00:12:43,730 --> 00:12:48,519
and the crews and you need to worry
about it so it is possible

184
00:12:48,519 --> 00:12:54,620
take a look at the struck down the left
you have STR which is a character array

185
00:12:54,620 --> 00:12:56,350
a dynamic character

186
00:12:56,350 --> 00:13:02,990
when which contains the current length
allocated land

187
00:13:02,990 --> 00:13:08,190
which is how large STR is currently
allocated so when it gets too big

188
00:13:08,190 --> 00:13:11,360
these functions on the right will

189
00:13:11,360 --> 00:13:14,690
reality STR as necessary and do

190
00:13:14,690 --> 00:13:21,690
copping news and so on another technique
proactive techniques

191
00:13:23,380 --> 00:13:27,160
wasting space the problem

192
00:13:27,160 --> 00:13:30,209
coming off by one here's an array
manipulations can

193
00:13:30,209 --> 00:13:35,220
over a pass the and over buffer to

194
00:13:35,220 --> 00:13:40,069
to guard against that you can declare
your buffers

195
00:13:40,069 --> 00:13:45,880
slightly larger than you need if you
declare them say one word size or

196
00:13:45,880 --> 00:13:47,949
two-word sizes with her four bytes

197
00:13:47,949 --> 00:13:51,500
each four bytes per word on a 32-bit
architectures

198
00:13:51,500 --> 00:13:55,059
then if you have off by one care of by
two

199
00:13:55,059 --> 00:13:58,620
which are much more rare but still
happen

200
00:13:58,620 --> 00:14:01,779
you are safe off by one

201
00:14:01,779 --> 00:14:08,160
overflows are exploitable sometimes and
they are a big deal

202
00:14:08,160 --> 00:14:12,279
the some compilers actually

203
00:14:12,279 --> 00:14:15,970
do this automatically from GCC 3.2

204
00:14:15,970 --> 00:14:21,069
who and further does this automatically
on notice if you disassemble any

205
00:14:21,069 --> 00:14:22,689
programs that

206
00:14:22,689 --> 00:14:27,529
you to clear a buffer 16 bytes long and
magically it's like 24

207
00:14:27,529 --> 00:14:32,140
bites disassemble it's doing that on
purpose

208
00:14:32,140 --> 00:14:37,680
not all compilers do this does anybody
know if the Microsoft compiler does this

209
00:14:37,680 --> 00:14:40,880
I don't know Windows programmer
primarily

210
00:14:40,880 --> 00:14:45,399
dominoes I'm not sure if it does that
it's not standard

211
00:14:45,399 --> 00:14:48,880
so if you want this the

212
00:14:48,880 --> 00:14:53,279
if you want to do some multiple
platforms you have to do this yourself

213
00:14:53,279 --> 00:14:56,589
on it's a pain not gonna lie

214
00:14:56,589 --> 00:15:00,209
it takes a certain amount of obsession
to do this

215
00:15:00,209 --> 00:15:04,550
and patience

216
00:15:04,550 --> 00:15:08,069
next variable reordering

217
00:15:08,069 --> 00:15:11,929
the stack variables can be reordered so
the impact a buffer overflows

218
00:15:11,929 --> 00:15:17,589
are minimized like %uh shown before

219
00:15:17,589 --> 00:15:20,620
the compiler will arrange variables

220
00:15:20,620 --> 00:15:23,809
in a subway backwards the

221
00:15:23,809 --> 00:15:27,709
leader variables are put in low memory
so

222
00:15:27,709 --> 00:15:33,050
certain variable types are over for more
than others characters

223
00:15:33,050 --> 00:15:36,140
so if you put those in later memory

224
00:15:36,140 --> 00:15:40,770
an off by one air is not going over for
something more important like an integer

225
00:15:40,770 --> 00:15:44,149
or something like that you can still
overflow into the next

226
00:15:44,149 --> 00:15:47,679
memory address but

227
00:15:47,679 --> 00:15:51,890
the impact is minimize its not a
guarantee it's not a

228
00:15:51,890 --> 00:15:55,010
a full solution

229
00:15:55,010 --> 00:16:00,540
but the pro police that in OpenBSD
implements this

230
00:16:00,540 --> 00:16:04,599
just as a an example this in action

231
00:16:04,600 --> 00:16:08,029
you can implement this yourself

232
00:16:08,029 --> 00:16:11,980
with the program preprocessor program or
just use

233
00:16:11,980 --> 00:16:15,790
for a police

234
00:16:15,790 --> 00:16:22,790
also this is to use to do by hand

235
00:16:26,500 --> 00:16:28,070
next pointer notification

236
00:16:28,070 --> 00:16:31,560
the problem here freeing and dynamic
memory allocation

237
00:16:31,560 --> 00:16:34,730
twice can corrupt heap structure control
where

238
00:16:34,730 --> 00:16:39,520
this happen four years ago I remember

239
00:16:39,520 --> 00:16:43,780
and as you ivory which is a compression
library use well water projects

240
00:16:43,780 --> 00:16:47,220
it some but it sometimes statically

241
00:16:47,220 --> 00:16:50,300
there is a vulnerability a double free
vulnerability

242
00:16:50,300 --> 00:16:54,570
your free was called twice on saying
Poyner which turned out to be

243
00:16:54,570 --> 00:16:55,260
exploitable

244
00:16:55,260 --> 00:17:02,260
all pink details were lease

245
00:17:03,190 --> 00:17:06,290
from this I learned if you

246
00:17:06,290 --> 00:17:09,659
if you know if I pointers immediately
after you freedom

247
00:17:09,660 --> 00:17:13,800
this protects you from this class a
vulnerability

248
00:17:13,800 --> 00:17:17,089
and the reason for that is that and CC
defines

249
00:17:17,089 --> 00:17:20,859
free open all corners having no effect
so if you use this

250
00:17:20,860 --> 00:17:24,230
macro my free which

251
00:17:24,230 --> 00:17:28,150
freeze your pointer and then immediately
set it to know

252
00:17:28,150 --> 00:17:32,250
calling my free tax and the same point
or twice in a row

253
00:17:32,250 --> 00:17:37,580
has no effect there is no security
vulnerability that arises because

254
00:17:37,580 --> 00:17:43,370
once upon a time I thought that using
this macro

255
00:17:43,370 --> 00:17:46,450
would make your program invincible

256
00:17:46,450 --> 00:17:49,880
to double free vulnerability is

257
00:17:49,880 --> 00:17:56,880
can anybody point now why that is not
true

258
00:18:02,020 --> 00:18:05,270
in the front

259
00:18:05,270 --> 00:18:12,270
a no my butter

260
00:18:12,540 --> 00:18:16,780
the

261
00:18:16,780 --> 00:18:23,780
no not sure what you mean by that

262
00:18:29,550 --> 00:18:33,669
pointer cupping a program for copies
pointers all over the place you might

263
00:18:33,670 --> 00:18:34,170
just so

264
00:18:34,170 --> 00:18:37,460
local pointer no not the owner of the

265
00:18:37,460 --> 00:18:40,610
variable still has a very failing memory
address

266
00:18:40,610 --> 00:18:43,820
I'm coming by surprise

267
00:18:43,820 --> 00:18:48,540
comments

268
00:18:48,540 --> 00:18:52,930
these can protect against buffer
overflows logic errors a good software

269
00:18:52,930 --> 00:18:54,240
engineer knows that the

270
00:18:54,240 --> 00:18:57,420
could that they're a will be maintained
by multiple people

271
00:18:57,420 --> 00:19:01,420
these people have different skill sets
Chi Minh have abilities

272
00:19:01,420 --> 00:19:04,850
mental state which includes motivation
alertness

273
00:19:04,850 --> 00:19:08,670
good comments will lower the chances a
maintainer introduces

274
00:19:08,670 --> 00:19:13,480
security vulnerabilities there's a
there's a heavy psychology component in

275
00:19:13,480 --> 00:19:16,600
teen programming you need to make it

276
00:19:16,600 --> 00:19:19,970
as simple as possible for someone to
maintain

277
00:19:19,970 --> 00:19:26,270
this is hard to do to get into
somebody's her and try to understand

278
00:19:26,270 --> 00:19:29,560
how will the beginner see this code

279
00:19:29,560 --> 00:19:33,340
and how will the misunderstand something

280
00:19:33,340 --> 00:19:38,570
and then try to rate code comments the
demystify original design techniques

281
00:19:38,570 --> 00:19:41,970
design methodology that's hard to do

282
00:19:41,970 --> 00:19:46,700
but I believe if you try hard enough you
will get this right

283
00:19:46,700 --> 00:19:53,700
next

284
00:19:54,020 --> 00:19:59,290
simple code can protect against buffer
overflows in logic errors

285
00:19:59,290 --> 00:20:03,620
here's the winner of the 1985

286
00:20:03,620 --> 00:20:06,940
international obfuscated Seco con tus

287
00:20:06,940 --> 00:20:10,260
that is a that's the winner

288
00:20:10,260 --> 00:20:15,820
don't know with that single line does
there's a lot of pointer dereference Amy

289
00:20:15,820 --> 00:20:20,970
no

290
00:20:20,970 --> 00:20:24,430
is not too many that too many

291
00:20:24,430 --> 00:20:28,020
well you know there's some point
arithmetic I guess you can say the

292
00:20:28,020 --> 00:20:31,190
bottom line is don't do pointer
arithmetic cuz that gets you in a lot of

293
00:20:31,190 --> 00:20:31,810
trouble

294
00:20:31,810 --> 00:20:34,879
you don't need to do that break it up
into a couple lines

295
00:20:34,880 --> 00:20:40,170
with some good comments thats easier to
maintain there's

296
00:20:40,170 --> 00:20:43,430
I mean some people are really really
like to

297
00:20:43,430 --> 00:20:49,010
right complex code makes them feel tough
you have to bury gotta

298
00:20:49,010 --> 00:20:56,010
it doesn't help the person maintain
what's up

299
00:20:56,440 --> 00:21:01,350
question is what does that do writing
sample code

300
00:21:01,350 --> 00:21:04,650
over oh that or don't know

301
00:21:04,650 --> 00:21:07,960
I just went to the web page and grab
something his

302
00:21:07,960 --> 00:21:14,180
variable initialization

303
00:21:14,180 --> 00:21:17,550
if you nationalize variables right after
the

304
00:21:17,550 --> 00:21:21,290
declaring them this protects you because

305
00:21:21,290 --> 00:21:24,870
understaffed your variables are

306
00:21:24,870 --> 00:21:29,410
uninitialized if you in the sense that
the

307
00:21:29,410 --> 00:21:32,620
you don't know what they contain the
contained very

308
00:21:32,620 --> 00:21:35,880
values that exist from previous

309
00:21:35,880 --> 00:21:40,110
function calls which could be controlled
by an attacker

310
00:21:40,110 --> 00:21:43,980
so if you use I'm uninitialized variable

311
00:21:43,980 --> 00:21:47,350
that could be used to I could be too

312
00:21:47,350 --> 00:21:51,330
your program being compromised

313
00:21:51,330 --> 00:21:54,429
so always initializing variables is

314
00:21:54,430 --> 00:21:58,840
is gives you some security benefit but
also

315
00:21:58,840 --> 00:22:03,370
ver more Ovi usability

316
00:22:03,370 --> 00:22:06,950
and Mike

317
00:22:06,950 --> 00:22:11,480
it helps it

318
00:22:11,480 --> 00:22:17,050
it's faster to program like that because
I mean your programs or fill fast if you

319
00:22:17,050 --> 00:22:18,970
use a uninitialized variable

320
00:22:18,970 --> 00:22:25,970
keep it'll fail every single time
consistently

321
00:22:28,879 --> 00:22:32,850
default failure can prevent logic errors

322
00:22:32,850 --> 00:22:37,440
let's say you're switching between
states for maintaining some kinda state

323
00:22:37,440 --> 00:22:38,179
information

324
00:22:38,179 --> 00:22:42,980
I'm left worth checking States between
12 and three

325
00:22:42,980 --> 00:22:46,929
notice that if it's not stay warm and
stay tuned

326
00:22:46,929 --> 00:22:52,749
we're just assuming state 3 a more
proactive approach would be on the right

327
00:22:52,749 --> 00:22:56,700
you check your three states and default
to an air

328
00:22:56,700 --> 00:22:59,820
this is kind of this is similar to the

329
00:22:59,820 --> 00:23:06,820
whitelist as whitelisting if you add
States

330
00:23:07,749 --> 00:23:12,919
your code on the left break because
you're assuming State 3-1

331
00:23:12,919 --> 00:23:17,299
you created a state for worst

332
00:23:17,299 --> 00:23:20,559
the state variable itself becomes
corrupt but also the stickers

333
00:23:20,559 --> 00:23:25,940
and those are my references

334
00:23:25,940 --> 00:23:29,570
I'll take any questions funny

335
00:23:29,570 --> 00:23:36,570
you yes

336
00:23:38,720 --> 00:23:41,210
work abilities are you talking about

337
00:23:41,210 --> 00:23:45,930
some c:\program are you talking

338
00:23:45,930 --> 00:23:50,620
some using this website CE

339
00:23:50,620 --> 00:23:54,040
I'm CE

340
00:23:54,040 --> 00:23:58,330
in how it handles a

341
00:23:58,330 --> 00:24:02,189
any any programs written in direct
memory languages

342
00:24:02,190 --> 00:24:05,520
so some we see C pas plus that

343
00:24:05,520 --> 00:24:09,230
reviewing burning person

344
00:24:09,230 --> 00:24:12,980
to anything where your

345
00:24:12,980 --> 00:24:17,240
you're handling input from interested
user are you waiting for

346
00:24:17,240 --> 00:24:20,610
user over different privilege are easier
like India case

347
00:24:20,610 --> 00:24:27,440
would be politically us so whether kinds
have

348
00:24:27,440 --> 00:24:30,820
battery included to Riverside

349
00:24:30,820 --> 00:24:35,570
stuff for us I'm surgery for

350
00:24:35,570 --> 00:24:39,409
were kinda kinds bad from sings you
decide to have

351
00:24:39,410 --> 00:24:44,730
for sale okay show that's a big question
there's a

352
00:24:44,730 --> 00:24:48,190
many classes code abilities

353
00:24:48,190 --> 00:24:51,960
buffer overflows double free like to
talk about

354
00:24:51,960 --> 00:24:55,300
few is a really testing something

355
00:24:55,300 --> 00:25:00,400
debugger you from so if I'm
vulnerabilities in

356
00:25:00,400 --> 00:25:07,400
I'm sure there are its beyond the scope
of this presentation

357
00:25:10,890 --> 00:25:14,890
US questions you

358
00:25:14,890 --> 00:25:21,890
alright well thank you I also think

359
00:25:22,160 --> 00:25:23,100
also

