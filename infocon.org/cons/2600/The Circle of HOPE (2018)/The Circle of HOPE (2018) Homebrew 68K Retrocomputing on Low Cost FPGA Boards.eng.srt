1
00:00:00,410 --> 00:00:05,700
so hello everybody thanks for your

2
00:00:03,500 --> 00:00:09,750
patience there well we've got everything

3
00:00:05,700 --> 00:00:12,179
set up this is home Peru 68k

4
00:00:09,750 --> 00:00:15,059
retrocomputing using low-cost fpga

5
00:00:12,179 --> 00:00:20,220
boards if you're not here for that talk

6
00:00:15,059 --> 00:00:22,169
you're in the wrong place are you yeah I

7
00:00:20,220 --> 00:00:25,859
guess I guess you'll be the determiner

8
00:00:22,170 --> 00:00:29,720
of that right so Who am I so my name is

9
00:00:25,859 --> 00:00:34,350
Keith Monahan my background is in

10
00:00:29,720 --> 00:00:37,290
computer science I manage software teams

11
00:00:34,350 --> 00:00:39,140
doing software Quality Assurance right

12
00:00:37,290 --> 00:00:43,230
and so I test to make sure that

13
00:00:39,140 --> 00:00:45,960
everything works the way it should so

14
00:00:43,230 --> 00:00:49,199
I'm a hobbyist like many of you I've

15
00:00:45,960 --> 00:00:52,350
been coming to these hopes since 1990

16
00:00:49,200 --> 00:00:56,129
for a long time since the first one

17
00:00:52,350 --> 00:01:00,149
right and even have the pale blue ugly

18
00:00:56,129 --> 00:01:02,910
t-shirt to prove it so I like solving

19
00:01:00,149 --> 00:01:04,710
hard problems I like challenges right

20
00:01:02,910 --> 00:01:08,429
and so a lot of what you're gonna see

21
00:01:04,709 --> 00:01:11,130
here today right is a bit like

22
00:01:08,430 --> 00:01:14,430
reinventing the wheel in some cases but

23
00:01:11,130 --> 00:01:18,770
it comes from my desire to sort of

24
00:01:14,430 --> 00:01:22,590
understand how computing works

25
00:01:18,770 --> 00:01:24,658
fundamentally right a lot of us take for

26
00:01:22,590 --> 00:01:28,710
granted when you push the power button

27
00:01:24,659 --> 00:01:32,540
what actually happens you know from the

28
00:01:28,710 --> 00:01:35,399
time the the hard drive or the SSD right

29
00:01:32,540 --> 00:01:36,630
comes on for the first time well you

30
00:01:35,400 --> 00:01:39,360
know what happens what does the

31
00:01:36,630 --> 00:01:42,119
processor do I mean there's a lot of

32
00:01:39,360 --> 00:01:43,890
stuff that happens and so I want to sort

33
00:01:42,119 --> 00:01:47,540
of deconstruct that a little bit in

34
00:01:43,890 --> 00:01:50,759
going simpler going to these 68k

35
00:01:47,540 --> 00:01:53,369
machines when you know it's just like

36
00:01:50,759 --> 00:01:56,250
working on cars right and like some of

37
00:01:53,369 --> 00:01:58,229
our parents worked on cars back in the

38
00:01:56,250 --> 00:02:00,119
day right when you could get under the

39
00:01:58,229 --> 00:02:03,920
hood and actually play around with the

40
00:02:00,119 --> 00:02:07,409
cars this is sort of not unlike that and

41
00:02:03,920 --> 00:02:09,869
so I said what I am you know what am I

42
00:02:07,409 --> 00:02:12,180
not so I'm not an EE like not even a

43
00:02:09,869 --> 00:02:14,580
minor right little professional

44
00:02:12,180 --> 00:02:16,530
experience and electron

45
00:02:14,580 --> 00:02:18,750
so you'll see flaws today you'll see

46
00:02:16,530 --> 00:02:21,959
flaws and a hardware flaws in the

47
00:02:18,750 --> 00:02:24,660
software and yes even flaws with me and

48
00:02:21,959 --> 00:02:27,480
the presentation right okay cue audible

49
00:02:24,660 --> 00:02:29,340
gasp that's your turn right oh there we

50
00:02:27,480 --> 00:02:32,780
go thank you very much right but that's

51
00:02:29,340 --> 00:02:36,299
okay we're all human so you know this

52
00:02:32,780 --> 00:02:40,560
presentation is as much about sort of

53
00:02:36,299 --> 00:02:43,110
the struggles in the story about how

54
00:02:40,560 --> 00:02:48,170
I've been working through trying to get

55
00:02:43,110 --> 00:02:52,140
this sort of Frankenstein built and

56
00:02:48,170 --> 00:02:54,780
operating and running so I'm building a

57
00:02:52,140 --> 00:02:56,730
computer and so a lot of people say Oh

58
00:02:54,780 --> 00:02:59,160
build computers I've built computers I

59
00:02:56,730 --> 00:03:01,590
go to PC part picker I go to do AG I go

60
00:02:59,160 --> 00:03:03,750
to Tom's Hardware right and I plug all

61
00:03:01,590 --> 00:03:05,519
these things together right and then

62
00:03:03,750 --> 00:03:08,849
when when that doesn't work what do you

63
00:03:05,519 --> 00:03:10,530
do you swap out the video card you swap

64
00:03:08,849 --> 00:03:13,619
out the motherboard you try some other

65
00:03:10,530 --> 00:03:15,870
memory right but that's really not what

66
00:03:13,620 --> 00:03:18,329
this talks about right we're talking

67
00:03:15,870 --> 00:03:22,109
about retro computing and we're talking

68
00:03:18,329 --> 00:03:23,940
about building something from scratch no

69
00:03:22,109 --> 00:03:27,989
that's not building the processor itself

70
00:03:23,940 --> 00:03:29,849
right but collecting a bunch of

71
00:03:27,989 --> 00:03:31,829
different pieces together in order to

72
00:03:29,849 --> 00:03:36,660
make it work and I'll talk more about

73
00:03:31,829 --> 00:03:38,849
that so I'm building a computer so what

74
00:03:36,660 --> 00:03:41,069
I'm not doing is stacking a whole bunch

75
00:03:38,849 --> 00:03:43,619
of Arduino shields together like you see

76
00:03:41,069 --> 00:03:46,798
in this picture not about Raspberry Pi

77
00:03:43,620 --> 00:03:50,459
and by all means like I have a ton of

78
00:03:46,799 --> 00:03:53,690
respect for what's been done in terms of

79
00:03:50,459 --> 00:03:58,470
lowering the cost of entry of computers

80
00:03:53,690 --> 00:04:00,450
lowering that sort of barrier to entry

81
00:03:58,470 --> 00:04:02,160
you know these you know what's the

82
00:04:00,450 --> 00:04:05,910
Raspberry Pi zero cost five dollars

83
00:04:02,160 --> 00:04:08,370
right and so I think that's great

84
00:04:05,910 --> 00:04:13,440
but that's also not what I'm doing here

85
00:04:08,370 --> 00:04:15,930
right and so yeah a lot of projects are

86
00:04:13,440 --> 00:04:18,389
assembly projects so what do you do you

87
00:04:15,930 --> 00:04:20,548
say I want to build a Raspberry Pi

88
00:04:18,389 --> 00:04:22,800
system so what do I do I go to the site

89
00:04:20,548 --> 00:04:25,380
and I buy this piece and I buy that

90
00:04:22,800 --> 00:04:26,750
piece and I buy something else and I

91
00:04:25,380 --> 00:04:28,760
plug them together

92
00:04:26,750 --> 00:04:30,860
and there's already an ecosystem that

93
00:04:28,760 --> 00:04:32,420
exists right these guys that make the

94
00:04:30,860 --> 00:04:35,600
boards are trying to sell their boards

95
00:04:32,420 --> 00:04:37,550
and so they provide good support they've

96
00:04:35,600 --> 00:04:40,010
got the YouTube videos you've got the

97
00:04:37,550 --> 00:04:44,120
forum you've got the software tool chain

98
00:04:40,010 --> 00:04:45,590
right you know and so there are some

99
00:04:44,120 --> 00:04:49,220
folks that are doing the heavy lifting

100
00:04:45,590 --> 00:04:53,030
in terms of like for instance getting

101
00:04:49,220 --> 00:04:57,290
cross compliation working for the ARM

102
00:04:53,030 --> 00:05:00,200
processor you know on on Intel and vice

103
00:04:57,290 --> 00:05:03,050
vice versa so there's no doubt that

104
00:05:00,200 --> 00:05:05,450
there's some heavy lifting that's being

105
00:05:03,050 --> 00:05:07,880
done but for the overall general

106
00:05:05,450 --> 00:05:09,860
consumer it's already been done right

107
00:05:07,880 --> 00:05:13,010
there's instructions we go to some site

108
00:05:09,860 --> 00:05:14,840
right there's some manual and so there's

109
00:05:13,010 --> 00:05:20,090
yeah lots of help because it's a

110
00:05:14,840 --> 00:05:21,890
well-traveled path this is because

111
00:05:20,090 --> 00:05:25,640
there's so many of these resources

112
00:05:21,890 --> 00:05:29,000
available out there it really makes it a

113
00:05:25,640 --> 00:05:31,280
little bit easier right and so you know

114
00:05:29,000 --> 00:05:34,400
one of the things I like to do is eat

115
00:05:31,280 --> 00:05:36,950
whatever I'm in New York City and coming

116
00:05:34,400 --> 00:05:38,840
to Hope over these last I don't know how

117
00:05:36,950 --> 00:05:41,240
many years this is I'm bad at math but

118
00:05:38,840 --> 00:05:44,690
last twenty years or something like this

119
00:05:41,240 --> 00:05:47,380
one thing I like to do is eat like to go

120
00:05:44,690 --> 00:05:49,820
you know just ate at a big bagel place

121
00:05:47,380 --> 00:05:53,450
earlier where they got these monster

122
00:05:49,820 --> 00:05:57,409
sized you know football sized bagels

123
00:05:53,450 --> 00:05:59,539
delicious but this is you know when you

124
00:05:57,410 --> 00:06:01,130
look at these assembly projects a lot of

125
00:05:59,540 --> 00:06:04,490
these are like eating at a Times Square

126
00:06:01,130 --> 00:06:07,790
restaurant you go there because it's

127
00:06:04,490 --> 00:06:13,580
easy you're hungry and you want to be

128
00:06:07,790 --> 00:06:16,490
sort of force-fed and so I I like to to

129
00:06:13,580 --> 00:06:19,520
bring it to branch out a little bit and

130
00:06:16,490 --> 00:06:21,830
take that less traveled path now for

131
00:06:19,520 --> 00:06:24,560
what it's worth like it's not for

132
00:06:21,830 --> 00:06:27,080
everybody and there's a lot of struggles

133
00:06:24,560 --> 00:06:30,140
and there are a lot of things that we

134
00:06:27,080 --> 00:06:34,940
take for granted and as a result makes

135
00:06:30,140 --> 00:06:37,820
it harder and so you know I talk about a

136
00:06:34,940 --> 00:06:40,029
home brew right home brew 68k what does

137
00:06:37,820 --> 00:06:42,909
that mean so there was a time

138
00:06:40,029 --> 00:06:45,639
and and I was probably knee-high to a

139
00:06:42,909 --> 00:06:47,498
grasshopper at the time right but there

140
00:06:45,639 --> 00:06:49,689
was a time whenever homebrew computer

141
00:06:47,499 --> 00:06:52,569
culture was sort of normal right

142
00:06:49,689 --> 00:06:54,969
we bought kits you know I think that one

143
00:06:52,569 --> 00:06:57,159
of the big things for the Motorola some

144
00:06:54,969 --> 00:07:00,099
of the earlier processors one of the

145
00:06:57,159 --> 00:07:02,199
selling campaigns was hey by the CPU for

146
00:07:00,099 --> 00:07:05,558
only $25 and you can build your own

147
00:07:02,199 --> 00:07:08,019
computer right and so you know as a

148
00:07:05,559 --> 00:07:10,719
result of these cheap available micro

149
00:07:08,019 --> 00:07:13,259
processors now you can own a computer in

150
00:07:10,719 --> 00:07:17,979
your own home right you can you can do

151
00:07:13,259 --> 00:07:19,449
computing at home and so and so you know

152
00:07:17,979 --> 00:07:21,519
you've got the kits out there the

153
00:07:19,449 --> 00:07:23,979
peripheral chips and I mentioned RAM

154
00:07:21,519 --> 00:07:26,289
like Ram was really expensive right Ram

155
00:07:23,979 --> 00:07:29,110
was gonna cost more than the than the

156
00:07:26,289 --> 00:07:31,779
CPU itself or you could buy a kit you

157
00:07:29,110 --> 00:07:34,419
know and there's a lot of action lately

158
00:07:31,779 --> 00:07:36,509
it seems just just over the last day

159
00:07:34,419 --> 00:07:41,709
since I've been here talking about the

160
00:07:36,509 --> 00:07:46,329
the Altair 8800 and all of these similar

161
00:07:41,709 --> 00:07:51,179
machines right and so yeah and so you've

162
00:07:46,329 --> 00:07:54,279
got ties to the to the homebrew culture

163
00:07:51,179 --> 00:07:56,979
with Stanford and Silicon Valley and so

164
00:07:54,279 --> 00:07:59,349
forth and you know with being as many

165
00:07:56,979 --> 00:08:01,300
Apple fans or there are there seems to

166
00:07:59,349 --> 00:08:03,519
be in the world everyone's sort of like

167
00:08:01,300 --> 00:08:06,339
read the stories right and have seen the

168
00:08:03,519 --> 00:08:08,829
pictures and yeah this was built in a

169
00:08:06,339 --> 00:08:12,459
garage and that type of thing and if you

170
00:08:08,829 --> 00:08:15,610
take a look at this computer that I

171
00:08:12,459 --> 00:08:17,249
built today you know it looks like it

172
00:08:15,610 --> 00:08:20,049
was built of the girl that's right

173
00:08:17,249 --> 00:08:23,979
there's painters tape holding down the

174
00:08:20,049 --> 00:08:28,599
LCD there's at one point I sort of

175
00:08:23,979 --> 00:08:30,159
upgraded to to Gorilla Tape right

176
00:08:28,599 --> 00:08:33,639
because I needed something to hold it

177
00:08:30,159 --> 00:08:36,610
down to the plywood base right and so

178
00:08:33,639 --> 00:08:38,919
the the funny thing is is that it

179
00:08:36,610 --> 00:08:40,899
started out as sort of a practical

180
00:08:38,919 --> 00:08:43,659
approach to how to mount this stuff but

181
00:08:40,899 --> 00:08:45,730
then I sort of like divided a little bit

182
00:08:43,659 --> 00:08:47,920
like the duct tape doesn't bother me

183
00:08:45,730 --> 00:08:51,670
like I actually am glad I'm using duct

184
00:08:47,920 --> 00:08:53,349
tape right and so this DIY computing

185
00:08:51,670 --> 00:08:55,660
thing is

186
00:08:53,350 --> 00:09:00,100
is what we're talking about today same

187
00:08:55,660 --> 00:09:03,040
same concepts so my project is is

188
00:09:00,100 --> 00:09:05,829
different like I've said so this is a

189
00:09:03,040 --> 00:09:10,389
creation project there's really no

190
00:09:05,829 --> 00:09:12,489
manuals now there's data sheets right so

191
00:09:10,389 --> 00:09:14,980
I buy an FPGA and of course there's a

192
00:09:12,490 --> 00:09:17,589
datasheet and of course there's manuals

193
00:09:14,980 --> 00:09:19,000
that talk about you know how to

194
00:09:17,589 --> 00:09:20,589
interface with this particular

195
00:09:19,000 --> 00:09:23,079
controller or how to do this particular

196
00:09:20,589 --> 00:09:26,709
function in there and so that's not to

197
00:09:23,079 --> 00:09:29,380
say that there isn't you know support

198
00:09:26,709 --> 00:09:31,989
documentation there is but the problem

199
00:09:29,380 --> 00:09:34,990
is is that what I'm trying to accomplish

200
00:09:31,990 --> 00:09:37,000
there's no A to Z manual right and so

201
00:09:34,990 --> 00:09:41,889
this makes it tough there is no youtube

202
00:09:37,000 --> 00:09:43,899
help I can join an IRC channel and say

203
00:09:41,889 --> 00:09:48,490
hey I'm trying to do this but it doesn't

204
00:09:43,899 --> 00:09:52,209
work and a lot of what I'm doing as a

205
00:09:48,490 --> 00:09:55,839
result of being unique makes it really

206
00:09:52,209 --> 00:09:58,149
hard for me to actually get to get help

207
00:09:55,839 --> 00:10:00,670
right so very specific things if I have

208
00:09:58,149 --> 00:10:05,079
a very specific question but what

209
00:10:00,670 --> 00:10:07,000
happens when I power it up and you know

210
00:10:05,079 --> 00:10:08,920
hardware's really tricky because you

211
00:10:07,000 --> 00:10:10,990
know when software fails and I know

212
00:10:08,920 --> 00:10:12,699
about plenty of the bugs and printing

213
00:10:10,990 --> 00:10:15,690
that pretty sorry

214
00:10:12,699 --> 00:10:19,779
plenty of the problems that I see in

215
00:10:15,690 --> 00:10:23,170
normal day-to-day in my normal day job I

216
00:10:19,779 --> 00:10:24,850
see see bugs I see errors and usually

217
00:10:23,170 --> 00:10:27,430
there's some symptom right

218
00:10:24,850 --> 00:10:30,250
what's the symptom you know it says you

219
00:10:27,430 --> 00:10:33,130
know you know some library can't be

220
00:10:30,250 --> 00:10:36,819
found there's some air that's displayed

221
00:10:33,130 --> 00:10:38,560
on the chrome console right and so you

222
00:10:36,819 --> 00:10:41,769
have sort of these symptoms that allow

223
00:10:38,560 --> 00:10:44,380
you to say well I did this this error is

224
00:10:41,769 --> 00:10:46,420
created and what do we all do like

225
00:10:44,380 --> 00:10:50,769
what's the normal path for solving a

226
00:10:46,420 --> 00:10:54,370
problem and yeah Google right Stack

227
00:10:50,769 --> 00:10:56,170
Overflow I heard I think right and so we

228
00:10:54,370 --> 00:10:59,079
cut and paste that err code and we see

229
00:10:56,170 --> 00:11:03,160
hey has other people had us the same

230
00:10:59,079 --> 00:11:05,660
problem and that really is is tough it's

231
00:11:03,160 --> 00:11:08,699
sort of slow going so

232
00:11:05,660 --> 00:11:11,130
yeah no guarantees of success or making

233
00:11:08,700 --> 00:11:15,980
wise design decisions and so what

234
00:11:11,130 --> 00:11:18,720
happens right is I look to the earlier

235
00:11:15,980 --> 00:11:22,589
68,000 computers for guidance in terms

236
00:11:18,720 --> 00:11:25,769
of like the Commodore Amiga even like

237
00:11:22,589 --> 00:11:27,720
the Sega Genesis I've got a few you know

238
00:11:25,769 --> 00:11:30,209
sega master system as it was known i

239
00:11:27,720 --> 00:11:32,610
think in europe and i've got a couple of

240
00:11:30,209 --> 00:11:35,760
these disassembled right and so i can

241
00:11:32,610 --> 00:11:38,279
see you know how did they do things and

242
00:11:35,760 --> 00:11:42,569
so i can guide some of my design for

243
00:11:38,279 --> 00:11:45,570
this computer based on those based on

244
00:11:42,570 --> 00:11:48,630
those other examples but the problem is

245
00:11:45,570 --> 00:11:51,540
is that invariably they use some custom

246
00:11:48,630 --> 00:11:54,180
ASIC right they use some custom chip

247
00:11:51,540 --> 00:11:56,839
that was specific to that particular

248
00:11:54,180 --> 00:12:00,359
application and even though like

249
00:11:56,839 --> 00:12:03,329
reimplementation zuv that stuff is

250
00:12:00,360 --> 00:12:06,120
available that's not what i want to do

251
00:12:03,329 --> 00:12:09,300
and so a lot of times all that glue

252
00:12:06,120 --> 00:12:11,279
logic all of those extraneous functions

253
00:12:09,300 --> 00:12:14,189
that really make the system possible I'm

254
00:12:11,279 --> 00:12:16,260
have to be created by me and the problem

255
00:12:14,190 --> 00:12:18,480
is is that there's really like sort of

256
00:12:16,260 --> 00:12:22,760
no guarantee success so that it if I

257
00:12:18,480 --> 00:12:28,800
make a mistake now because for instance

258
00:12:22,760 --> 00:12:32,939
let's say I'm in or leaving the CPU

259
00:12:28,800 --> 00:12:34,949
writes to the frame buffer and with the

260
00:12:32,940 --> 00:12:37,170
video driver that also has to access

261
00:12:34,949 --> 00:12:40,319
that same buffer what does that do to

262
00:12:37,170 --> 00:12:42,120
performance right and so some of those

263
00:12:40,320 --> 00:12:43,920
things are not immediately obvious right

264
00:12:42,120 --> 00:12:47,850
because half the time I'm just happy

265
00:12:43,920 --> 00:12:50,010
when this stuff works at all right it's

266
00:12:47,850 --> 00:12:51,899
so slow going yeah the modern computing

267
00:12:50,010 --> 00:12:53,699
world takes too much for granted and

268
00:12:51,899 --> 00:12:55,980
that's definitely sort of a theme of the

269
00:12:53,699 --> 00:12:57,689
talk here I'm going back to my

270
00:12:55,980 --> 00:12:59,670
restaurant reference right instead of

271
00:12:57,690 --> 00:13:01,470
going the Times Square restaurant it's

272
00:12:59,670 --> 00:13:03,930
like finding a hole in the wall and in

273
00:13:01,470 --> 00:13:06,620
Flatbush do we have any native New

274
00:13:03,930 --> 00:13:06,620
Yorkers here

275
00:13:17,560 --> 00:13:29,479
yeah fantastic you're fine okay and so

276
00:13:26,270 --> 00:13:30,920
um native New Yorkers that I see any

277
00:13:29,480 --> 00:13:33,410
hands out there it's hard to see what

278
00:13:30,920 --> 00:13:35,510
these lights okay so Flatbush right is

279
00:13:33,410 --> 00:13:38,150
going to a restaurant in Flatbush is

280
00:13:35,510 --> 00:13:40,700
that it could be awesome but it could be

281
00:13:38,150 --> 00:13:42,949
this asterisk right I came to New York

282
00:13:40,700 --> 00:13:44,450
on work a couple years ago and my friend

283
00:13:42,950 --> 00:13:48,050
took me into Harlem to this barbecue

284
00:13:44,450 --> 00:13:52,220
place and I was we were legitimately the

285
00:13:48,050 --> 00:13:55,310
only two white people there and the guy

286
00:13:52,220 --> 00:13:56,630
that was serving food was said well what

287
00:13:55,310 --> 00:13:58,430
do you what do you want what are you

288
00:13:56,630 --> 00:14:01,880
doing here and I was like well wait do

289
00:13:58,430 --> 00:14:04,160
you know me no and he says well okay

290
00:14:01,880 --> 00:14:05,660
I'll serve you anyway you know that type

291
00:14:04,160 --> 00:14:07,730
of thing and he really meant no

292
00:14:05,660 --> 00:14:10,850
disrespect he really meant no harm just

293
00:14:07,730 --> 00:14:13,100
in in that must have been a surprise and

294
00:14:10,850 --> 00:14:16,550
Fordham for what it's worth is really

295
00:14:13,100 --> 00:14:17,750
delicious good food so you know so yeah

296
00:14:16,550 --> 00:14:20,420
it could be awesome but could be

297
00:14:17,750 --> 00:14:23,600
disastrous and that that helps explain

298
00:14:20,420 --> 00:14:25,459
this so let's not kid anybody right so

299
00:14:23,600 --> 00:14:26,810
I've talked a lot about like well yeah

300
00:14:25,460 --> 00:14:28,850
I've had to do this and I've had to do

301
00:14:26,810 --> 00:14:32,449
that but we all stand on the shoulders

302
00:14:28,850 --> 00:14:35,030
of giants right there's there's plenty

303
00:14:32,450 --> 00:14:36,680
of work that's been done I've had plenty

304
00:14:35,030 --> 00:14:40,089
of help from a variety of different

305
00:14:36,680 --> 00:14:43,939
sources and some of the some friends

306
00:14:40,090 --> 00:14:46,070
friends of friends I've got a friend in

307
00:14:43,940 --> 00:14:50,630
Canada that's helping me with the PCB

308
00:14:46,070 --> 00:14:55,010
layout using Chi CAD and and so I've had

309
00:14:50,630 --> 00:14:58,280
plenty of help to Frederick Raquin as

310
00:14:55,010 --> 00:15:01,819
the creator of the j68 core which is a

311
00:14:58,280 --> 00:15:04,520
soft core processor that that's that I

312
00:15:01,820 --> 00:15:07,130
use here without that j68

313
00:15:04,520 --> 00:15:10,430
- right and and just so you you fully

314
00:15:07,130 --> 00:15:14,030
understand this sort of concept of soft

315
00:15:10,430 --> 00:15:17,150
core you may be used to some different

316
00:15:14,030 --> 00:15:20,140
concepts of soft core if you watch the

317
00:15:17,150 --> 00:15:22,670
previous presentation especially right

318
00:15:20,140 --> 00:15:25,939
but essentially instead of how

319
00:15:22,670 --> 00:15:28,280
a physical processor chip you have logic

320
00:15:25,940 --> 00:15:29,660
that sits inside an FPGA and we'll talk

321
00:15:28,280 --> 00:15:32,569
about this in a little bit more detail

322
00:15:29,660 --> 00:15:34,370
but it sits inside an FPGA that performs

323
00:15:32,570 --> 00:15:36,080
the same function so you get the same

324
00:15:34,370 --> 00:15:37,790
function but you don't have the

325
00:15:36,080 --> 00:15:40,670
necessary chip the nice thing about

326
00:15:37,790 --> 00:15:43,400
FPGAs is is that if you have one that

327
00:15:40,670 --> 00:15:45,199
has a reasonable size you can fit a

328
00:15:43,400 --> 00:15:49,160
whole bunch of logic inside there

329
00:15:45,200 --> 00:15:50,900
including CPUs even multiple CPUs right

330
00:15:49,160 --> 00:15:54,140
and so if you want sort of a multiple

331
00:15:50,900 --> 00:15:56,660
core computer you certainly can do that

332
00:15:54,140 --> 00:15:58,340
if you want to with the idea that you've

333
00:15:56,660 --> 00:16:01,550
got to find some way to connect and make

334
00:15:58,340 --> 00:16:03,320
them work so without that core I'm sort

335
00:16:01,550 --> 00:16:05,900
of dead in the water

336
00:16:03,320 --> 00:16:08,750
authors a 68k bucks and I have some

337
00:16:05,900 --> 00:16:12,290
resources at the end of the presentation

338
00:16:08,750 --> 00:16:14,420
that sort of talks about which which

339
00:16:12,290 --> 00:16:18,020
books and so forth

340
00:16:14,420 --> 00:16:21,800
generally speaking Alan come clemont's

341
00:16:18,020 --> 00:16:24,949
and Alan Wilcox were two authors that

342
00:16:21,800 --> 00:16:27,319
produced a series of 68,000 books that I

343
00:16:24,950 --> 00:16:30,200
highly recommend the best part about

344
00:16:27,320 --> 00:16:31,640
this is that I go to Amazon and I find

345
00:16:30,200 --> 00:16:34,340
these books for like a dollar eighty

346
00:16:31,640 --> 00:16:36,920
eight and like these are the Bibles like

347
00:16:34,340 --> 00:16:39,530
I refer to this stuff daily and I'm like

348
00:16:36,920 --> 00:16:40,699
this is fantastic for to box you know

349
00:16:39,530 --> 00:16:43,040
I've got a God to these little

350
00:16:40,700 --> 00:16:46,520
processors right

351
00:16:43,040 --> 00:16:49,550
and so pong Picchu right author of this

352
00:16:46,520 --> 00:16:52,910
FPGA prototyping by example there's one

353
00:16:49,550 --> 00:16:55,719
there's a VHDL version of the book in a

354
00:16:52,910 --> 00:16:57,790
very log version and those are two

355
00:16:55,720 --> 00:17:02,960
languages that we use to describe

356
00:16:57,790 --> 00:17:06,829
hardware with an FPGA s and those books

357
00:17:02,960 --> 00:17:08,480
are pretty nice ok so here we have is

358
00:17:06,829 --> 00:17:12,589
the creation right this is the

359
00:17:08,480 --> 00:17:14,480
Frankenstein and and I'll briefly walk

360
00:17:12,589 --> 00:17:17,060
you through the different sections of

361
00:17:14,480 --> 00:17:21,170
this in the top right hand corner you

362
00:17:17,060 --> 00:17:23,540
have a seven-inch LCD it's a touchscreen

363
00:17:21,170 --> 00:17:27,890
got it from Adafruit for like forty

364
00:17:23,540 --> 00:17:30,170
seven dollars right pretty cheap I have

365
00:17:27,890 --> 00:17:34,910
that attached if you follow that brown

366
00:17:30,170 --> 00:17:35,610
cable down and then the yellow I'm sorry

367
00:17:34,910 --> 00:17:38,240
the white

368
00:17:35,610 --> 00:17:52,889
it leads down towards the bottom black

369
00:17:38,240 --> 00:17:53,820
PCB this work oh you guys see that okay

370
00:17:52,890 --> 00:17:55,770
now here we go

371
00:17:53,820 --> 00:18:00,570
can you tell I don't do public speaking

372
00:17:55,770 --> 00:18:02,870
for a living oh there's my mouse that's

373
00:18:00,570 --> 00:18:05,610
a good good question no it does well

374
00:18:02,870 --> 00:18:08,580
look at that look I'm learning all kind

375
00:18:05,610 --> 00:18:11,070
of things today I see I told you I was I

376
00:18:08,580 --> 00:18:12,059
was definitely not an expert I was not

377
00:18:11,070 --> 00:18:15,389
joking

378
00:18:12,059 --> 00:18:18,629
and so you see right here right so this

379
00:18:15,390 --> 00:18:20,429
comes down into a video driver board and

380
00:18:18,630 --> 00:18:23,610
that video driver board what you can't

381
00:18:20,429 --> 00:18:27,150
see underneath here is I used to have a

382
00:18:23,610 --> 00:18:30,870
solderless breadboard with a ton of

383
00:18:27,150 --> 00:18:33,540
wires and the problem with doing this is

384
00:18:30,870 --> 00:18:35,520
that there's a good chance for a mistake

385
00:18:33,540 --> 00:18:37,379
there's a good chance for not working

386
00:18:35,520 --> 00:18:39,929
properly there's a good chance for too

387
00:18:37,380 --> 00:18:42,299
much stray capacitance as a result of

388
00:18:39,929 --> 00:18:44,880
the board if you go over to the left

389
00:18:42,299 --> 00:18:49,860
hand side sort of one of the smaller

390
00:18:44,880 --> 00:18:54,090
parts right here is the FPGA board

391
00:18:49,860 --> 00:18:56,928
itself now this is an eval board $30 I

392
00:18:54,090 --> 00:19:03,209
got it from Aero does anybody know aero

393
00:18:56,929 --> 00:19:05,520
dot-com and so for $30 this board has

394
00:19:03,210 --> 00:19:09,540
been plenty powerful enough to work

395
00:19:05,520 --> 00:19:12,720
right and so it's able to run my 68,000

396
00:19:09,540 --> 00:19:15,659
at 66 megahertz which is pretty fast

397
00:19:12,720 --> 00:19:17,850
right yeah remember these processors

398
00:19:15,660 --> 00:19:21,780
will grow you know work we're in a time

399
00:19:17,850 --> 00:19:24,389
when you know seven megahertz 7.15

400
00:19:21,780 --> 00:19:26,399
megahertz for megahertz twelve megahertz

401
00:19:24,390 --> 00:19:29,790
was sort of like the high high speed

402
00:19:26,400 --> 00:19:32,490
stuff so I'm using a straight 68,000

403
00:19:29,790 --> 00:19:37,049
right not any of the newer like 68040

404
00:19:32,490 --> 00:19:40,110
Zoro three OS or so forth now we'll talk

405
00:19:37,049 --> 00:19:43,410
a little bit more about the core but

406
00:19:40,110 --> 00:19:46,729
essentially as a result of the way the

407
00:19:43,410 --> 00:19:48,900
core is designed the 66 megahertz

408
00:19:46,730 --> 00:19:54,150
translates to

409
00:19:48,900 --> 00:19:55,890
about 15 megahertz real-world the other

410
00:19:54,150 --> 00:19:59,100
and I think we've got some close-up

411
00:19:55,890 --> 00:20:02,670
shots but this red board here is a

412
00:19:59,100 --> 00:20:04,830
custom SRAM circuit board that I

413
00:20:02,670 --> 00:20:08,730
designed with a lot of help from my

414
00:20:04,830 --> 00:20:10,439
friend in Canada and this allows some

415
00:20:08,730 --> 00:20:12,930
SRAM memory and we'll talk about the

416
00:20:10,440 --> 00:20:18,390
differences in a couple minutes up here

417
00:20:12,930 --> 00:20:20,520
is a debug LCD right here that displays

418
00:20:18,390 --> 00:20:22,620
things like what the current address

419
00:20:20,520 --> 00:20:26,270
that's being accessed what the value is

420
00:20:22,620 --> 00:20:29,189
at that particular address and then the

421
00:20:26,270 --> 00:20:30,629
and then the the program counter the

422
00:20:29,190 --> 00:20:34,890
value of the program counter for the

423
00:20:30,630 --> 00:20:36,690
next instruction you know working on

424
00:20:34,890 --> 00:20:39,360
this system gets me good at translating

425
00:20:36,690 --> 00:20:42,600
back and forth between hex and decimals

426
00:20:39,360 --> 00:20:45,120
so everything's in hex whether you like

427
00:20:42,600 --> 00:20:47,850
it or not right here you've got a

428
00:20:45,120 --> 00:20:50,820
speaker and this is a 3 watt speaker

429
00:20:47,850 --> 00:20:53,340
hooked up to a 3 watt amplifier and

430
00:20:50,820 --> 00:20:55,470
that's where my retro music is going to

431
00:20:53,340 --> 00:21:00,300
come out of I've got a proof-of-concept

432
00:20:55,470 --> 00:21:02,190
that's that's almost working but but

433
00:21:00,300 --> 00:21:04,470
that's that's the way these projects go

434
00:21:02,190 --> 00:21:06,150
right here's the switch that I bought in

435
00:21:04,470 --> 00:21:09,000
Radio Shack when I was about 10 years

436
00:21:06,150 --> 00:21:12,150
old which I know I look like I'm really

437
00:21:09,000 --> 00:21:14,850
young but it's that's a really old

438
00:21:12,150 --> 00:21:17,190
switch that I happen to find you know

439
00:21:14,850 --> 00:21:19,350
and I needed a big honkin power switch

440
00:21:17,190 --> 00:21:22,020
and then of course you see a battery you

441
00:21:19,350 --> 00:21:24,300
know a little RC car battery here that

442
00:21:22,020 --> 00:21:31,410
runs into this this power board right

443
00:21:24,300 --> 00:21:33,178
here ok so so what is this right I spent

444
00:21:31,410 --> 00:21:35,550
some time at the earlier part of the

445
00:21:33,179 --> 00:21:38,460
presentation talking about like what it

446
00:21:35,550 --> 00:21:40,678
isn't so what is it standalone battery

447
00:21:38,460 --> 00:21:42,990
powered computer based on us the

448
00:21:40,679 --> 00:21:46,910
Motorola 68000 and remember this

449
00:21:42,990 --> 00:21:50,550
processor is from 1979 right old

450
00:21:46,910 --> 00:21:52,410
processor and so you know as you might

451
00:21:50,550 --> 00:21:54,830
have read in the description for the

452
00:21:52,410 --> 00:21:59,520
talk I grew up on the Commodore Amiga

453
00:21:54,830 --> 00:22:01,939
any Amiga fans out here Yeah right

454
00:21:59,520 --> 00:22:04,820
and so as we

455
00:22:01,940 --> 00:22:05,480
I had a lot of practice with 68000

456
00:22:04,820 --> 00:22:07,820
assembler

457
00:22:05,480 --> 00:22:11,809
can you imagine what I was doing is like

458
00:22:07,820 --> 00:22:17,240
a 14 year old with the 68000 assembler

459
00:22:11,809 --> 00:22:18,918
any guesses no no well no so that's a

460
00:22:17,240 --> 00:22:22,629
good guess I was never any good at that

461
00:22:18,919 --> 00:22:26,059
but but it was very much related to that

462
00:22:22,629 --> 00:22:28,009
so the interface currently runs yeah

463
00:22:26,059 --> 00:22:31,309
through a serial port right through a

464
00:22:28,009 --> 00:22:33,289
UART and it doesn't run Lennox peoples

465
00:22:31,309 --> 00:22:36,139
that have asked me well what iOS does it

466
00:22:33,289 --> 00:22:38,960
run well it doesn't run OS Linux can't

467
00:22:36,139 --> 00:22:40,189
run on it won't work currently doesn't

468
00:22:38,960 --> 00:22:43,700
run applications from the App Store

469
00:22:40,190 --> 00:22:47,450
right and so you know this this

470
00:22:43,700 --> 00:22:52,669
contributes to the to the slowness right

471
00:22:47,450 --> 00:22:54,590
of the of the development right custom

472
00:22:52,669 --> 00:22:58,820
hardware designed and integrated into an

473
00:22:54,590 --> 00:23:01,459
FPGA yeah I think that for the majority

474
00:22:58,820 --> 00:23:05,120
of you guys here I think just the fact

475
00:23:01,460 --> 00:23:06,919
that you've come to hope right you

476
00:23:05,120 --> 00:23:09,918
understand it like this is a vehicle for

477
00:23:06,919 --> 00:23:12,350
learning right in some of my sort of non

478
00:23:09,919 --> 00:23:14,600
IT friends say wait a minute what are

479
00:23:12,350 --> 00:23:16,250
you doing again why are you doing that

480
00:23:14,600 --> 00:23:18,379
why don't you why don't you just buy a

481
00:23:16,250 --> 00:23:20,330
tablet they tell me like are you trying

482
00:23:18,379 --> 00:23:23,509
to save money I'm like I have three

483
00:23:20,330 --> 00:23:25,009
tablets maybe five right i-i've ones

484
00:23:23,509 --> 00:23:26,629
that let you know that our last year's

485
00:23:25,009 --> 00:23:30,230
model that I consider too old to give to

486
00:23:26,629 --> 00:23:32,299
my kids you know and so this is not

487
00:23:30,230 --> 00:23:34,789
about like saving money and I know I

488
00:23:32,299 --> 00:23:36,649
talked about low-cost FPGAs and I do

489
00:23:34,789 --> 00:23:38,629
make it I do distinguish them right

490
00:23:36,649 --> 00:23:40,250
because I happen to be using a thirty

491
00:23:38,629 --> 00:23:42,230
dollar board and one of the reasons why

492
00:23:40,250 --> 00:23:44,269
I want to use this board and why I am

493
00:23:42,230 --> 00:23:46,070
using this board is because there are

494
00:23:44,269 --> 00:23:49,549
plenty of fpga boards that are out there

495
00:23:46,070 --> 00:23:52,309
that get up and cost 100 200 250 dollars

496
00:23:49,549 --> 00:23:54,320
and even more depending I wanted to be

497
00:23:52,309 --> 00:23:57,230
able to prove that I could do this on

498
00:23:54,320 --> 00:24:00,110
with minimal resources right and so this

499
00:23:57,230 --> 00:24:02,570
is very similar to the way like the

500
00:24:00,110 --> 00:24:05,120
Atari game developer is back in the day

501
00:24:02,570 --> 00:24:07,549
like the Atari 2600 had to really

502
00:24:05,120 --> 00:24:10,029
account for every byte and say well how

503
00:24:07,549 --> 00:24:13,179
can I squeeze performance out of this

504
00:24:10,029 --> 00:24:16,509
there is a book called

505
00:24:13,179 --> 00:24:21,759
erasing the beam it's an Atari book does

506
00:24:16,509 --> 00:24:24,279
anybody know this MIT press right and so

507
00:24:21,759 --> 00:24:28,600
they really talk about how they're using

508
00:24:24,279 --> 00:24:32,259
the time in between the the video

509
00:24:28,600 --> 00:24:34,029
display to actually do computing right I

510
00:24:32,259 --> 00:24:37,570
use a different method for what it's

511
00:24:34,029 --> 00:24:41,919
worth over here that that works but but

512
00:24:37,570 --> 00:24:44,799
the point is is that it so it's easy to

513
00:24:41,919 --> 00:24:46,809
sort of win a street race if you're in a

514
00:24:44,799 --> 00:24:48,070
Ferrari or something like that I wanted

515
00:24:46,809 --> 00:24:51,039
to be able to prove that I could still

516
00:24:48,070 --> 00:24:53,549
get it done but without just dumping

517
00:24:51,039 --> 00:24:56,769
money at the problem

518
00:24:53,549 --> 00:24:58,418
so some skills are required right this

519
00:24:56,769 --> 00:25:01,749
is just like t-shirt required at those

520
00:24:58,419 --> 00:25:05,830
restaurants I talked about earlier PCB

521
00:25:01,749 --> 00:25:07,389
design skills and and I'm sort of know

522
00:25:05,830 --> 00:25:10,830
enough to be dangerous

523
00:25:07,389 --> 00:25:14,049
my friend Brian from Canada who rocks

524
00:25:10,830 --> 00:25:18,610
really smart guy did PCB design in the

525
00:25:14,049 --> 00:25:21,340
80s and I'm like this is perfect and so

526
00:25:18,610 --> 00:25:24,070
I roped this guy in and he's really

527
00:25:21,340 --> 00:25:26,470
helped but it was really a collaborative

528
00:25:24,070 --> 00:25:28,289
effort and so I spend some time like

529
00:25:26,470 --> 00:25:32,080
well hey what do you think about this

530
00:25:28,289 --> 00:25:34,149
and anybody who's done PCB design like

531
00:25:32,080 --> 00:25:35,980
you spent a lot of times a lot of time

532
00:25:34,149 --> 00:25:37,959
routing right you spent a lot of time

533
00:25:35,980 --> 00:25:40,360
trying to figure out where those traces

534
00:25:37,960 --> 00:25:41,980
should go on the board how wide you can

535
00:25:40,360 --> 00:25:45,479
make those traces can you still maintain

536
00:25:41,980 --> 00:25:52,509
signal integrity and so forth

537
00:25:45,480 --> 00:25:56,110
the you need 68,000 assembly skills and

538
00:25:52,509 --> 00:25:58,659
and I have some I know a little bit

539
00:25:56,110 --> 00:26:01,830
thank goodness for some of the resources

540
00:25:58,659 --> 00:26:04,480
that I'll point you guys to later online

541
00:26:01,830 --> 00:26:07,480
you need to know electronic circuit

542
00:26:04,480 --> 00:26:10,360
design so how do you build how do you

543
00:26:07,480 --> 00:26:11,649
build circuits right and so we'll talk

544
00:26:10,360 --> 00:26:16,240
about this more in some of these

545
00:26:11,649 --> 00:26:19,748
upcoming slides right but you know when

546
00:26:16,240 --> 00:26:22,659
you do FPGA design it's very much not

547
00:26:19,749 --> 00:26:24,519
like coding right I saw a post recently

548
00:26:22,659 --> 00:26:26,179
it said hey I know how to program in C

549
00:26:24,519 --> 00:26:28,759
sharp so I should have no

550
00:26:26,179 --> 00:26:30,470
problem do an FPGA work and I'm like how

551
00:26:28,759 --> 00:26:33,049
is that related right they're two

552
00:26:30,470 --> 00:26:35,720
completely different things and so and

553
00:26:33,049 --> 00:26:38,809
we'll talk about how they're different

554
00:26:35,720 --> 00:26:40,249
you know very log HDL and then also in

555
00:26:38,809 --> 00:26:42,379
and I touched on it earlier right

556
00:26:40,249 --> 00:26:43,999
computer architecture and organization

557
00:26:42,379 --> 00:26:48,529
how does your design affect your

558
00:26:43,999 --> 00:26:51,440
performance I just recently got some

559
00:26:48,529 --> 00:26:55,070
some basic 3d working on it so I can

560
00:26:51,440 --> 00:27:00,499
rotate 3d wireframes which is exciting

561
00:26:55,070 --> 00:27:02,029
um but it's really really slow so what

562
00:27:00,499 --> 00:27:04,970
what am I doing wrong how can i optimize

563
00:27:02,029 --> 00:27:07,249
that what is it about my system and in

564
00:27:04,970 --> 00:27:08,840
the scary part is what if it's something

565
00:27:07,249 --> 00:27:13,700
fundamental right what if I have to go

566
00:27:08,840 --> 00:27:16,999
back so so I made a decision to go

567
00:27:13,700 --> 00:27:19,369
integrated versus discrete and so let's

568
00:27:16,999 --> 00:27:20,869
sort of explain that there's sort of a

569
00:27:19,369 --> 00:27:23,389
couple different methods now I'm going

570
00:27:20,869 --> 00:27:26,029
to show you two methods that are not the

571
00:27:23,389 --> 00:27:29,840
FPGA method right and so this is one way

572
00:27:26,029 --> 00:27:32,299
you can go you can buy all the parts

573
00:27:29,840 --> 00:27:34,519
just like they did back in homebrew

574
00:27:32,299 --> 00:27:37,759
computing in the 1970s you can buy the

575
00:27:34,519 --> 00:27:40,519
RAM you can buy the CPU you can put a

576
00:27:37,759 --> 00:27:42,889
crystal on there and so forth but you

577
00:27:40,519 --> 00:27:44,659
can see what happens right a lot of the

578
00:27:42,889 --> 00:27:47,449
solutions that are online instead of

579
00:27:44,659 --> 00:27:51,499
using the straight 68000 which uses the

580
00:27:47,450 --> 00:27:56,690
full exposes of full 23 bits of address

581
00:27:51,499 --> 00:27:59,029
out its interface and a 16-bit bus this

582
00:27:56,690 --> 00:28:02,029
is a lot of wires to move around and

583
00:27:59,029 --> 00:28:04,700
we'll talk about the 68000 being a

584
00:28:02,029 --> 00:28:09,619
memory mapped processor and as a result

585
00:28:04,700 --> 00:28:11,809
that bus right that data bus has to has

586
00:28:09,619 --> 00:28:14,749
to move to a lot of your different

587
00:28:11,809 --> 00:28:16,789
pieces in order to work and so it ends

588
00:28:14,749 --> 00:28:19,100
up looking like this and for what it's

589
00:28:16,789 --> 00:28:22,100
worth right I like didn't credit this

590
00:28:19,100 --> 00:28:24,769
person on purpose not because I think he

591
00:28:22,100 --> 00:28:27,110
did a bad job right but just the idea of

592
00:28:24,769 --> 00:28:32,119
like this gets messy and it gets messy

593
00:28:27,110 --> 00:28:34,219
fast yeah so you either end up with a

594
00:28:32,119 --> 00:28:36,949
large custom PCB or wiring that looks

595
00:28:34,220 --> 00:28:38,539
like that so the with a problem with

596
00:28:36,950 --> 00:28:39,980
doing this and I have a ton of respect

597
00:28:38,539 --> 00:28:41,299
for people that are

598
00:28:39,980 --> 00:28:43,549
to build things like this and they

599
00:28:41,299 --> 00:28:47,510
actually function ton of respect for

600
00:28:43,549 --> 00:28:51,260
them but I did not want to do this and

601
00:28:47,510 --> 00:28:52,879
so the alternative here is this Kiwi 68k

602
00:28:51,260 --> 00:28:55,129
computer approach which is like a

603
00:28:52,880 --> 00:28:57,289
fantastic design this guy's been working

604
00:28:55,130 --> 00:28:59,360
at this for a really long time there's

605
00:28:57,289 --> 00:29:01,580
the link so the alternative is doing a

606
00:28:59,360 --> 00:29:03,320
custom circuit board and when you see

607
00:29:01,580 --> 00:29:05,178
the circuit board I don't know about you

608
00:29:03,320 --> 00:29:08,960
guys but this looks as professional as

609
00:29:05,179 --> 00:29:11,299
it gets right this is I don't tell you

610
00:29:08,960 --> 00:29:12,980
how many years and years of work because

611
00:29:11,299 --> 00:29:15,889
remember that a lot of us that are

612
00:29:12,980 --> 00:29:17,210
involved in this or like one-man shows I

613
00:29:15,889 --> 00:29:19,879
mean you're kind of lucky if you get

614
00:29:17,210 --> 00:29:21,950
sort of a smart friend that can can chip

615
00:29:19,880 --> 00:29:25,399
in and help out and in some cases I I

616
00:29:21,950 --> 00:29:26,510
have but in order for this I can't

617
00:29:25,399 --> 00:29:28,639
imagine the amount of work that goes

618
00:29:26,510 --> 00:29:31,279
into it and when you when you look at

619
00:29:28,639 --> 00:29:33,168
this right this could be a real computer

620
00:29:31,279 --> 00:29:35,929
right this could have been sold back in

621
00:29:33,169 --> 00:29:38,720
the day the functions that this thing

622
00:29:35,929 --> 00:29:40,940
does is very very much comparable with

623
00:29:38,720 --> 00:29:42,889
what's out there so a ton of respect so

624
00:29:40,940 --> 00:29:44,659
you can do this button but notice

625
00:29:42,889 --> 00:29:47,090
something right that really what's

626
00:29:44,659 --> 00:29:50,360
happened is we've replaced all these

627
00:29:47,090 --> 00:29:52,879
individual wires here with just PCB

628
00:29:50,360 --> 00:29:56,209
traces on the circuit board right so

629
00:29:52,880 --> 00:29:58,460
it's still sort of discrete and you know

630
00:29:56,210 --> 00:30:00,889
there is a step beyond this there are

631
00:29:58,460 --> 00:30:03,500
people that build computers using just

632
00:30:00,889 --> 00:30:07,129
straight logic right so they use 7400

633
00:30:03,500 --> 00:30:09,980
you know 74 series logic chips to build

634
00:30:07,130 --> 00:30:11,750
their CPUs to build these things now

635
00:30:09,980 --> 00:30:16,070
we're talking about wires you want to

636
00:30:11,750 --> 00:30:18,049
talk about wires right and so and so but

637
00:30:16,070 --> 00:30:19,820
notice that even though it's a circuit

638
00:30:18,049 --> 00:30:22,309
board right we still have the individual

639
00:30:19,820 --> 00:30:24,529
chips that are here with all the

640
00:30:22,309 --> 00:30:26,750
separate functions and you and you know

641
00:30:24,529 --> 00:30:28,730
for what it's worth for like reverse

642
00:30:26,750 --> 00:30:31,010
engineering and understanding how this

643
00:30:28,730 --> 00:30:33,350
works this is actually better approach

644
00:30:31,010 --> 00:30:35,240
right because I can take a logic

645
00:30:33,350 --> 00:30:37,070
analyzer and I can hook a logic analyzer

646
00:30:35,240 --> 00:30:38,960
up to one of these chips and I can watch

647
00:30:37,070 --> 00:30:41,960
communication that happens between the

648
00:30:38,960 --> 00:30:44,840
chips to understand it and so that's

649
00:30:41,960 --> 00:30:47,210
nice but obviously there's all the time

650
00:30:44,840 --> 00:30:49,370
effort and expense a circuit board of

651
00:30:47,210 --> 00:30:51,630
this size is pretty expensive to produce

652
00:30:49,370 --> 00:30:54,659
the ones I've made and I've

653
00:30:51,630 --> 00:30:58,410
- in my life they've been relatively

654
00:30:54,660 --> 00:31:00,150
small size and and they're they're

655
00:30:58,410 --> 00:31:01,710
relatively cheap but when you start

656
00:31:00,150 --> 00:31:05,550
going up the big sizes like this it gets

657
00:31:01,710 --> 00:31:06,990
pretty expensive especially because you

658
00:31:05,550 --> 00:31:10,800
know these board houses aren't really

659
00:31:06,990 --> 00:31:13,710
doing much in terms of checking your

660
00:31:10,800 --> 00:31:15,120
design they check to make sure that what

661
00:31:13,710 --> 00:31:17,460
you told them the build they built

662
00:31:15,120 --> 00:31:20,969
properly but nothing about whether or

663
00:31:17,460 --> 00:31:25,140
not pin one of you six is supposed to go

664
00:31:20,970 --> 00:31:26,790
to pin two of you a right okay so what

665
00:31:25,140 --> 00:31:30,960
are the specs of this machine that I've

666
00:31:26,790 --> 00:31:32,850
built 68k soft core which it's kind of

667
00:31:30,960 --> 00:31:34,650
funny every time I say that it's just I

668
00:31:32,850 --> 00:31:39,689
wish there was some other way to

669
00:31:34,650 --> 00:31:43,890
describe this slower than a real 68k 66

670
00:31:39,690 --> 00:31:46,470
megahertz you can read yeah so does four

671
00:31:43,890 --> 00:31:50,070
MIPS so four million instructions per

672
00:31:46,470 --> 00:31:52,800
second which is really not too bad I can

673
00:31:50,070 --> 00:31:55,340
do a million multiplies now part of the

674
00:31:52,800 --> 00:31:55,340
problem

675
00:32:07,540 --> 00:32:15,770
okay and so and so we've got a whole

676
00:32:12,380 --> 00:32:22,790
bunch of aspects here multiple types of

677
00:32:15,770 --> 00:32:24,190
memory flash memory SRAM VGA support a

678
00:32:22,790 --> 00:32:27,649
serial UART

679
00:32:24,190 --> 00:32:30,980
an integrated DAC for the audio and then

680
00:32:27,650 --> 00:32:33,470
a debug LCD as you as you saw and so

681
00:32:30,980 --> 00:32:37,490
here's a here's a blow-up of some of the

682
00:32:33,470 --> 00:32:39,650
physical hardware components the FPGA

683
00:32:37,490 --> 00:32:42,620
board on the right and then my custom

684
00:32:39,650 --> 00:32:46,160
red circuit board on the left there and

685
00:32:42,620 --> 00:32:49,219
so some people have asked me well why

686
00:32:46,160 --> 00:32:51,770
don't you use the onboard DRAM for the

687
00:32:49,220 --> 00:32:55,400
frame buffer well part of the problem is

688
00:32:51,770 --> 00:32:57,940
the DRAM has the bandwidth but as a

689
00:32:55,400 --> 00:33:00,140
result of the way DRAM is accessed

690
00:32:57,940 --> 00:33:02,300
including things like having the

691
00:33:00,140 --> 00:33:08,090
necessary refresh circuitry to keep it

692
00:33:02,300 --> 00:33:14,000
working the way you access it by row by

693
00:33:08,090 --> 00:33:16,580
Bank by page changes the latency of the

694
00:33:14,000 --> 00:33:19,160
individual reads right and so what that

695
00:33:16,580 --> 00:33:21,050
means is that this time you might be

696
00:33:19,160 --> 00:33:23,540
able to read in some short period of

697
00:33:21,050 --> 00:33:25,430
time let's say 50 nanoseconds but next

698
00:33:23,540 --> 00:33:27,230
time because that's located on another

699
00:33:25,430 --> 00:33:29,690
page because you may have to open and

700
00:33:27,230 --> 00:33:32,380
close a row then what happens is your

701
00:33:29,690 --> 00:33:34,970
latency increases but video is

702
00:33:32,380 --> 00:33:39,160
unrelenting and it's thirst for data

703
00:33:34,970 --> 00:33:42,710
right and so whenever you are displaying

704
00:33:39,160 --> 00:33:45,620
data video data you can't really starve

705
00:33:42,710 --> 00:33:48,560
that the video display right then you

706
00:33:45,620 --> 00:33:53,840
get things like tearing and and just

707
00:33:48,560 --> 00:33:57,409
ugly video and so here's some VGA timing

708
00:33:53,840 --> 00:34:02,679
diagram and essentially that big portion

709
00:33:57,410 --> 00:34:05,030
in blue on the right hand side shows the

710
00:34:02,680 --> 00:34:08,000
shows the time in which you have to

711
00:34:05,030 --> 00:34:12,489
transmit your data your actual video

712
00:34:08,000 --> 00:34:15,739
data and so essentially you've got 25

713
00:34:12,489 --> 00:34:18,560
microseconds to transmit all of the

714
00:34:15,739 --> 00:34:19,609
pixel data for one particular row well

715
00:34:18,560 --> 00:34:20,839
that's not a lot of

716
00:34:19,609 --> 00:34:25,009
I'm right because remember we're

717
00:34:20,839 --> 00:34:27,379
dividing that into you know 640 pixels

718
00:34:25,009 --> 00:34:29,960
wide let's say and so all of a sudden

719
00:34:27,379 --> 00:34:35,498
you have to be able to provide this this

720
00:34:29,960 --> 00:34:40,549
data quickly so I talked about Vera log

721
00:34:35,498 --> 00:34:43,308
earlier and so this is an example of the

722
00:34:40,549 --> 00:34:45,859
Vera log that I've created and that I've

723
00:34:43,309 --> 00:34:49,609
connected together so we start with sort

724
00:34:45,859 --> 00:34:53,210
of this modified CPU we connect the UART

725
00:34:49,609 --> 00:34:56,869
for the console port using a Yamaha chip

726
00:34:53,210 --> 00:34:59,509
for the for the music and so forth right

727
00:34:56,869 --> 00:35:01,089
and so there's a series of different

728
00:34:59,509 --> 00:35:09,970
modules that are all connected together

729
00:35:01,089 --> 00:35:14,210
and so if we talk about FPGAs right we

730
00:35:09,970 --> 00:35:17,569
you know these FPGAs or where we can

731
00:35:14,210 --> 00:35:20,950
store these custom logic that we create

732
00:35:17,569 --> 00:35:23,269
and so when we talk about sort of

733
00:35:20,950 --> 00:35:25,609
integrating everything we talked about

734
00:35:23,269 --> 00:35:27,828
putting all of that Hardware instead of

735
00:35:25,609 --> 00:35:30,230
there being separate chips which you see

736
00:35:27,829 --> 00:35:34,279
very few sort of chips outside of the

737
00:35:30,230 --> 00:35:40,309
FPGA on my board essentially it's all

738
00:35:34,279 --> 00:35:42,829
built into that that FPGA so um HD else

739
00:35:40,309 --> 00:35:46,430
can be mouths away from other languages

740
00:35:42,829 --> 00:35:48,829
so they're not they're not procedural at

741
00:35:46,430 --> 00:35:50,558
all and so normally write with CPUs

742
00:35:48,829 --> 00:35:53,180
you've got this fetch decode execute

743
00:35:50,559 --> 00:35:55,369
cycle right where you pull a particular

744
00:35:53,180 --> 00:35:56,960
instruction out of memory you decode

745
00:35:55,369 --> 00:35:59,410
that in instruction to figure out what

746
00:35:56,960 --> 00:36:01,339
you need to do and then you execute the

747
00:35:59,410 --> 00:36:03,319
addition function or whatever the

748
00:36:01,339 --> 00:36:05,839
function is but FPGAs

749
00:36:03,319 --> 00:36:07,369
are blank they don't do anything right

750
00:36:05,839 --> 00:36:09,170
so you get an FPGA for the first time

751
00:36:07,369 --> 00:36:12,049
and you say okay let's see it do

752
00:36:09,170 --> 00:36:14,569
something it doesn't do anything it just

753
00:36:12,049 --> 00:36:17,420
sits there it's you haven't told you

754
00:36:14,569 --> 00:36:21,288
haven't described any of the functions

755
00:36:17,420 --> 00:36:23,390
that you need to do and so here's a

756
00:36:21,289 --> 00:36:29,749
picture of all Terra's cordis so I'm

757
00:36:23,390 --> 00:36:31,368
using in a altaira based FPGA and Cortis

758
00:36:29,749 --> 00:36:32,720
is the programming software so this is

759
00:36:31,369 --> 00:36:36,260
the IDE

760
00:36:32,720 --> 00:36:38,930
so you can see on the right-hand side

761
00:36:36,260 --> 00:36:41,000
here some actual ver log code I'm sure

762
00:36:38,930 --> 00:36:43,460
you probably can't read it too well but

763
00:36:41,000 --> 00:36:46,010
you have a whole bunch of individual

764
00:36:43,460 --> 00:36:49,220
verlag files that are located here and

765
00:36:46,010 --> 00:36:53,240
then down here shows the results of the

766
00:36:49,220 --> 00:36:55,310
compilation or of the synthesis of your

767
00:36:53,240 --> 00:37:00,140
ver log code to actually create hardware

768
00:36:55,310 --> 00:37:03,290
and so here's what a ver log module

769
00:37:00,140 --> 00:37:05,960
looks like pretty straightforward you

770
00:37:03,290 --> 00:37:08,119
essentially have inputs and outputs and

771
00:37:05,960 --> 00:37:10,369
this is just like the header right this

772
00:37:08,119 --> 00:37:13,369
is just like the you know what do they

773
00:37:10,369 --> 00:37:15,290
call it a functional specification it's

774
00:37:13,369 --> 00:37:17,599
basically the inputs and the outputs to

775
00:37:15,290 --> 00:37:20,390
the particular module and so you'll see

776
00:37:17,599 --> 00:37:22,670
some inputs like a key right which would

777
00:37:20,390 --> 00:37:24,500
be like a physical button that we're

778
00:37:22,670 --> 00:37:26,150
pressing and then you see inputs and

779
00:37:24,500 --> 00:37:31,090
outputs like in the form of a UART

780
00:37:26,150 --> 00:37:35,240
talking to the serial ports thanks and

781
00:37:31,090 --> 00:37:40,550
then finite state machines are the way

782
00:37:35,240 --> 00:37:44,060
we go about about describing this

783
00:37:40,550 --> 00:37:47,530
hardware it's one construct we use

784
00:37:44,060 --> 00:37:51,470
within these HDLs to essentially

785
00:37:47,530 --> 00:37:55,820
describe the different logic functions

786
00:37:51,470 --> 00:37:58,490
and so if we take a look at this diagram

787
00:37:55,820 --> 00:38:00,500
here which I drew on a notepad and

788
00:37:58,490 --> 00:38:03,200
photographed like yesterday or this

789
00:38:00,500 --> 00:38:05,300
morning essentially you could see how

790
00:38:03,200 --> 00:38:08,299
the flow works right so you start and

791
00:38:05,300 --> 00:38:10,609
state one there then some trigger

792
00:38:08,300 --> 00:38:12,980
happens we go to state two and maybe we

793
00:38:10,609 --> 00:38:15,470
do some functions there and then maybe

794
00:38:12,980 --> 00:38:18,200
the next clock tick we go to three and

795
00:38:15,470 --> 00:38:19,939
then maybe we sit inside three until we

796
00:38:18,200 --> 00:38:22,009
push a button then we go back to step

797
00:38:19,940 --> 00:38:29,780
one and so you can see where we could

798
00:38:22,010 --> 00:38:32,390
actually do some some processing some

799
00:38:29,780 --> 00:38:37,099
procedural processing here like you

800
00:38:32,390 --> 00:38:41,660
might be used to in other languages and

801
00:38:37,099 --> 00:38:44,780
so the 68k is a memory map device right

802
00:38:41,660 --> 00:38:46,279
and so what that means is that I

803
00:38:44,780 --> 00:38:48,200
mentioned this earlier that all those

804
00:38:46,280 --> 00:38:52,040
peripherals have to be connected to the

805
00:38:48,200 --> 00:38:55,339
address bus address in the data bus in

806
00:38:52,040 --> 00:38:58,250
order to function the here's the memory

807
00:38:55,340 --> 00:39:00,290
map for my device here and so this shows

808
00:38:58,250 --> 00:39:04,070
all the different address ranges and

809
00:39:00,290 --> 00:39:07,670
then this shows the the vera log that

810
00:39:04,070 --> 00:39:11,240
tells basically what data to connect

811
00:39:07,670 --> 00:39:13,400
back so essentially if you see this Rd

812
00:39:11,240 --> 00:39:15,169
data register and for those not familiar

813
00:39:13,400 --> 00:39:18,230
with the hardware if you can distinct

814
00:39:15,170 --> 00:39:20,990
variable this Rd data variable gets

815
00:39:18,230 --> 00:39:23,330
assigned a result that comes back from

816
00:39:20,990 --> 00:39:25,310
these other modules based on what

817
00:39:23,330 --> 00:39:26,870
address we're talking to so for instance

818
00:39:25,310 --> 00:39:30,650
at the bottom if we're communicating

819
00:39:26,870 --> 00:39:33,529
with the SRAM then addresses that are in

820
00:39:30,650 --> 00:39:35,720
that range of eight hundred and twenty

821
00:39:33,530 --> 00:39:39,500
thousand hex to that to the other big

822
00:39:35,720 --> 00:39:41,509
number then it gets assigned then it

823
00:39:39,500 --> 00:39:49,790
gets aside the result from the SRAM

824
00:39:41,510 --> 00:39:54,070
module the software that I started with

825
00:39:49,790 --> 00:39:56,900
was written in 1988 that through some

826
00:39:54,070 --> 00:39:58,850
clever porting methods I was able to get

827
00:39:56,900 --> 00:40:02,900
to actually run and execute on my

828
00:39:58,850 --> 00:40:05,390
hardware so it's nice to go thirty sort

829
00:40:02,900 --> 00:40:09,440
of thirty years ago and bring this stuff

830
00:40:05,390 --> 00:40:12,529
back from the dead so what can it do

831
00:40:09,440 --> 00:40:15,230
main access is through the serial port

832
00:40:12,530 --> 00:40:17,660
we can print some text on the screen we

833
00:40:15,230 --> 00:40:22,460
can do simple graphics like lines and

834
00:40:17,660 --> 00:40:23,060
circles debug software via that LCD that

835
00:40:22,460 --> 00:40:25,910
I showed you

836
00:40:23,060 --> 00:40:28,910
rotating 3d wireframes I'm happy happy

837
00:40:25,910 --> 00:40:32,690
about that so I am running short on time

838
00:40:28,910 --> 00:40:34,310
so I'm not used to quoting presidents

839
00:40:32,690 --> 00:40:38,240
here but I figure hey this is my one

840
00:40:34,310 --> 00:40:40,009
opportunity yeah JFK said during his

841
00:40:38,240 --> 00:40:41,870
famous Moon speech we choose to go to

842
00:40:40,010 --> 00:40:43,550
the moon we choose to go to the moon in

843
00:40:41,870 --> 00:40:45,380
this decade and do other things not

844
00:40:43,550 --> 00:40:49,310
because they're easy but because they

845
00:40:45,380 --> 00:40:52,370
are hard and I've got some other plans

846
00:40:49,310 --> 00:40:54,650
to expand this I've got some resources

847
00:40:52,370 --> 00:40:58,850
listed here in terms of books and

848
00:40:54,650 --> 00:41:00,200
websites tech travels org is my website

849
00:40:58,850 --> 00:41:02,420
it's a blog that's been

850
00:41:00,200 --> 00:41:05,240
newest operation for about 14 years and

851
00:41:02,420 --> 00:41:08,359
covers a variety of different retro

852
00:41:05,240 --> 00:41:17,660
Amiga inspired projects thanks for your

853
00:41:08,359 --> 00:41:22,690
interest so do we have time for

854
00:41:17,660 --> 00:41:26,379
questions or no yes

855
00:41:22,690 --> 00:41:27,560
nobody's here that cares at some time

856
00:41:26,380 --> 00:41:30,579
okay

857
00:41:27,560 --> 00:41:30,578
all right thank you

