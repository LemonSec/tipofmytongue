1
00:00:00,030 --> 00:00:06,770
okay hi everyone thanks for coming to

2
00:00:03,120 --> 00:00:13,440
hear about cryptography at 11 p.m.

3
00:00:06,770 --> 00:00:15,959
yes okay so today we're here to play the

4
00:00:13,440 --> 00:00:18,050
most dangerous game we are here to talk

5
00:00:15,960 --> 00:00:22,320
about the cryptography that's not boring

6
00:00:18,050 --> 00:00:24,689
now you've all have you'll have heard of

7
00:00:22,320 --> 00:00:28,349
what we might refer to as crypto 1.0

8
00:00:24,689 --> 00:00:32,189
crypto 1.0 is about having two people or

9
00:00:28,349 --> 00:00:34,890
some people as part of a protocol and

10
00:00:32,189 --> 00:00:36,930
they're trying to keep someone out right

11
00:00:34,890 --> 00:00:38,879
maybe there's Alice and Bob and they're

12
00:00:36,930 --> 00:00:40,800
trying to keep out a eavesdropper or

13
00:00:38,879 --> 00:00:43,860
they're trying to keep out I'm in the

14
00:00:40,800 --> 00:00:46,980
middle for this they use things that

15
00:00:43,860 --> 00:00:48,629
we've known in their modern form for at

16
00:00:46,980 --> 00:00:50,489
least the last thirty years there are

17
00:00:48,629 --> 00:00:53,250
symmetric encryption public key

18
00:00:50,489 --> 00:00:57,328
encryption signatures authentication a

19
00:00:53,250 --> 00:00:59,910
sprinkle of hashes we mostly know how to

20
00:00:57,329 --> 00:01:03,390
use those now we've had 30 years to make

21
00:00:59,910 --> 00:01:05,929
them performant to make them easy to use

22
00:01:03,390 --> 00:01:08,670
and this day is even misuse resistant

23
00:01:05,930 --> 00:01:12,990
now of course we still make mistakes

24
00:01:08,670 --> 00:01:14,220
from time to time friends don't let

25
00:01:12,990 --> 00:01:17,610
friends use JWT

26
00:01:14,220 --> 00:01:23,280
but in general we know how to use this

27
00:01:17,610 --> 00:01:28,610
and orange so instead we are here to

28
00:01:23,280 --> 00:01:33,390
talk about work Schumacher Shanmugam

29
00:01:28,610 --> 00:01:37,970
referred to as crypto 2.0 crypto 2.0 is

30
00:01:33,390 --> 00:01:41,490
about working with using cryptography to

31
00:01:37,970 --> 00:01:43,619
control even the people that are the

32
00:01:41,490 --> 00:01:45,720
parties that are involved in your

33
00:01:43,619 --> 00:01:47,939
protocol you're running a protocol where

34
00:01:45,720 --> 00:01:50,548
you might not want all the parties to

35
00:01:47,939 --> 00:01:55,110
know all the information or you might

36
00:01:50,549 --> 00:01:57,479
want to not let them break the final

37
00:01:55,110 --> 00:01:58,439
output if everybody else if everybody

38
00:01:57,479 --> 00:02:04,020
else was honest

39
00:01:58,439 --> 00:02:06,449
now this build on top of 1.0 primitives

40
00:02:04,020 --> 00:02:09,869
but let you do things that you couldn't

41
00:02:06,450 --> 00:02:12,360
do with your normal encryption the

42
00:02:09,869 --> 00:02:13,260
corruption signature operations that

43
00:02:12,360 --> 00:02:16,860
your for me

44
00:02:13,260 --> 00:02:20,099
your way of course since this have had

45
00:02:16,860 --> 00:02:24,840
way less time to be studied tried out

46
00:02:20,099 --> 00:02:28,140
and to be made safe and understood these

47
00:02:24,840 --> 00:02:30,030
are much more dangerous to use so use

48
00:02:28,140 --> 00:02:35,099
these only under the supervision of your

49
00:02:30,030 --> 00:02:37,560
cryptographer now before we go into the

50
00:02:35,099 --> 00:02:40,980
deep and I would like to tell you about

51
00:02:37,560 --> 00:02:44,659
what I like to call crypto 1.5 something

52
00:02:40,980 --> 00:02:48,569
that let is already used enough to be

53
00:02:44,659 --> 00:02:51,540
comfortably used in common protocols but

54
00:02:48,569 --> 00:02:54,119
is also something that lets you do

55
00:02:51,540 --> 00:02:58,108
things that you are not capable of doing

56
00:02:54,120 --> 00:03:01,019
with the basic capabilities of kurtal

57
00:02:58,109 --> 00:03:03,569
1.0 one of the example one of my

58
00:03:01,019 --> 00:03:06,379
favorite examples are pigs pigs are

59
00:03:03,569 --> 00:03:09,179
password authenticated key exchanges

60
00:03:06,379 --> 00:03:11,608
these are actually fairly well deployed

61
00:03:09,180 --> 00:03:14,609
protocols and you might even be using

62
00:03:11,609 --> 00:03:18,180
one for with some applications without

63
00:03:14,609 --> 00:03:20,579
even knowing that now what Pixar for are

64
00:03:18,180 --> 00:03:23,489
to establish a key so you have two

65
00:03:20,579 --> 00:03:26,430
parties either two endpoints or maybe a

66
00:03:23,489 --> 00:03:28,709
client and a server and you want to

67
00:03:26,430 --> 00:03:32,489
establish some key to them run either

68
00:03:28,709 --> 00:03:34,829
TLS or to run some encryption of the

69
00:03:32,489 --> 00:03:36,720
messages between the two and you both

70
00:03:34,829 --> 00:03:39,989
know a password you both know some

71
00:03:36,720 --> 00:03:42,230
secret how you would do it normally if

72
00:03:39,989 --> 00:03:46,440
you were to design this protocol with

73
00:03:42,230 --> 00:03:48,418
1.0 primitives you would probably do

74
00:03:46,440 --> 00:03:50,760
something like generate a random key on

75
00:03:48,419 --> 00:03:52,489
the client encrypted with the password

76
00:03:50,760 --> 00:03:55,290
and send it over to the server

77
00:03:52,489 --> 00:03:58,019
this way the server takes it the crip

78
00:03:55,290 --> 00:04:01,078
set and has the random key and they just

79
00:03:58,019 --> 00:04:04,199
exchange whatever encrypted material

80
00:04:01,079 --> 00:04:08,489
they want with that encryption key now

81
00:04:04,199 --> 00:04:10,799
this is for example what wpa2 does not

82
00:04:08,489 --> 00:04:13,819
specifically this but this is what the

83
00:04:10,799 --> 00:04:16,320
security property is reduced to now

84
00:04:13,819 --> 00:04:18,988
what's the problem of doing something

85
00:04:16,320 --> 00:04:22,048
like this the problem is that it exposes

86
00:04:18,988 --> 00:04:24,270
it to brute forces I think a lot of

87
00:04:22,048 --> 00:04:26,940
people in this room might have had the

88
00:04:24,270 --> 00:04:29,400
experience of running

89
00:04:26,940 --> 00:04:31,710
Ehrmann to capture packets from a

90
00:04:29,400 --> 00:04:35,099
wireless interface and then passing it

91
00:04:31,710 --> 00:04:37,799
to air crack to try as many passwords as

92
00:04:35,100 --> 00:04:41,460
possible and figure out what the access

93
00:04:37,800 --> 00:04:44,570
point password is right you can do that

94
00:04:41,460 --> 00:04:48,299
because you have ways to test if the

95
00:04:44,570 --> 00:04:51,480
password you're testing your hypothesis

96
00:04:48,300 --> 00:04:53,550
is actually the correct password used in

97
00:04:51,480 --> 00:04:55,410
the handshake even if you just recorded

98
00:04:53,550 --> 00:04:57,990
the handshake even if you were not part

99
00:04:55,410 --> 00:05:02,400
of it this is what we can make better

100
00:04:57,990 --> 00:05:06,720
with takes to understand one of the

101
00:05:02,400 --> 00:05:09,030
simplest if you will take protocols it's

102
00:05:06,720 --> 00:05:12,210
useful to remember how defy Hellman

103
00:05:09,030 --> 00:05:14,489
works here's a quick refresher so in

104
00:05:12,210 --> 00:05:18,780
diffie-hellman you pick a generator

105
00:05:14,490 --> 00:05:23,100
number a number G and a prime number P

106
00:05:18,780 --> 00:05:26,250
and then decline these two are fixed G&P

107
00:05:23,100 --> 00:05:29,640
are fixed in the protocol that that we

108
00:05:26,250 --> 00:05:31,920
are using or negotiated now the client

109
00:05:29,640 --> 00:05:34,919
picks a random number X and the server

110
00:05:31,920 --> 00:05:38,490
picks a random number Y the client

111
00:05:34,920 --> 00:05:40,890
generates G to the X modulo P and the

112
00:05:38,490 --> 00:05:43,650
server generates G to the Y modulo P

113
00:05:40,890 --> 00:05:46,520
these are hard to invert if you see G to

114
00:05:43,650 --> 00:05:50,489
the X module P there is no easy way to

115
00:05:46,520 --> 00:05:54,440
recover X from that value they send it

116
00:05:50,490 --> 00:05:56,940
over the internet Wi-Fi Dre do whatever

117
00:05:54,440 --> 00:05:59,880
possibly monitored channel they have and

118
00:05:56,940 --> 00:06:04,310
they exchange these two values then the

119
00:05:59,880 --> 00:06:09,030
client for example takes G to the X and

120
00:06:04,310 --> 00:06:12,710
and sorry the client takes G to the Y

121
00:06:09,030 --> 00:06:17,099
from the server and it elevates it to

122
00:06:12,710 --> 00:06:19,590
his there X so the result if you

123
00:06:17,100 --> 00:06:22,230
remember a bit of algebra is G to the Y

124
00:06:19,590 --> 00:06:24,690
to the X and on the other side the

125
00:06:22,230 --> 00:06:26,970
server receives G to the X and the basic

126
00:06:24,690 --> 00:06:29,430
to the Y and gets G to the X to the Y

127
00:06:26,970 --> 00:06:32,610
again with a bit of algebra these two

128
00:06:29,430 --> 00:06:35,460
values are the same G to the X to the Y

129
00:06:32,610 --> 00:06:37,500
is the same as G to the Y to the X so

130
00:06:35,460 --> 00:06:39,630
now they have a shared secret and they

131
00:06:37,500 --> 00:06:40,429
can use that as the key for whatever

132
00:06:39,630 --> 00:06:43,558
future

133
00:06:40,429 --> 00:06:45,839
communication they do what's useful here

134
00:06:43,559 --> 00:06:48,959
is that eavesdropper that has only seen

135
00:06:45,839 --> 00:06:52,169
G to the X and G to the Y can't build

136
00:06:48,959 --> 00:06:53,909
that shard secret because if they for

137
00:06:52,169 --> 00:06:56,758
example multiply hit them together they

138
00:06:53,909 --> 00:06:59,279
get G to the X plus y which is not the

139
00:06:56,759 --> 00:07:01,649
same value so far so good

140
00:06:59,279 --> 00:07:04,080
remember diffie-hellman nodding heads

141
00:07:01,649 --> 00:07:09,539
even at 11:00 p.m. you're wonderful

142
00:07:04,080 --> 00:07:11,818
people okay so how do we use

143
00:07:09,539 --> 00:07:13,619
diffie-hellman to build a pig something

144
00:07:11,819 --> 00:07:15,569
that protects against that brute-force

145
00:07:13,619 --> 00:07:19,949
attacks

146
00:07:15,569 --> 00:07:21,629
an example is EK e from a paper in the

147
00:07:19,949 --> 00:07:25,769
two thousand and two thousand two

148
00:07:21,629 --> 00:07:27,269
thousand one EK e two specifically it's

149
00:07:25,769 --> 00:07:30,029
very similar with the difference that

150
00:07:27,269 --> 00:07:32,309
you take G to the X modulo P and you

151
00:07:30,029 --> 00:07:36,029
encrypt it with your password on the

152
00:07:32,309 --> 00:07:37,729
client you encrypt G to the y module P

153
00:07:36,029 --> 00:07:43,529
with the password on the server and you

154
00:07:37,729 --> 00:07:45,899
exchange this encrypted values now what

155
00:07:43,529 --> 00:07:47,939
happens is that the other side knows the

156
00:07:45,899 --> 00:07:49,529
password because we are trying to

157
00:07:47,939 --> 00:07:51,779
exchange a key between two parties that

158
00:07:49,529 --> 00:07:53,550
know the password so they will just

159
00:07:51,779 --> 00:07:56,159
decrypt it and run diffie-hellman as

160
00:07:53,550 --> 00:07:57,479
usual so for anyone that knows the

161
00:07:56,159 --> 00:08:00,629
password this is essentially

162
00:07:57,479 --> 00:08:02,399
diffie-hellman for anyone that recorded

163
00:08:00,629 --> 00:08:05,429
this interaction though what happens if

164
00:08:02,399 --> 00:08:08,729
they recorded the encryption of G to the

165
00:08:05,429 --> 00:08:10,619
X modulo P they can try the corrupting

166
00:08:08,729 --> 00:08:12,628
it but even if they get it right they

167
00:08:10,619 --> 00:08:15,779
have no way to know that it's the

168
00:08:12,629 --> 00:08:18,479
correct value because our wrong value

169
00:08:15,779 --> 00:08:20,639
looks exactly like a correct value now

170
00:08:18,479 --> 00:08:24,619
there's a catch for this to be true you

171
00:08:20,639 --> 00:08:28,499
need to pick GN P in in some special way

172
00:08:24,619 --> 00:08:32,159
that's not really what I want to talk to

173
00:08:28,499 --> 00:08:34,709
you about what I want you to see is the

174
00:08:32,159 --> 00:08:36,299
property that this gives you the

175
00:08:34,708 --> 00:08:39,328
property is that even if someone

176
00:08:36,299 --> 00:08:41,698
recorded this interaction if they only

177
00:08:39,328 --> 00:08:44,039
recorded it they have no way to figure

178
00:08:41,698 --> 00:08:46,229
out if their guess of the password is

179
00:08:44,039 --> 00:08:47,879
correct so even if they recorded

180
00:08:46,230 --> 00:08:50,759
something there is even if there was a

181
00:08:47,879 --> 00:08:54,000
ironmen side of the recording there is

182
00:08:50,759 --> 00:08:56,430
no equivalent aircrack way to figure

183
00:08:54,000 --> 00:08:59,160
if all these passwords you are trying

184
00:08:56,430 --> 00:09:01,319
with your GPUs cluster are correct and

185
00:08:59,160 --> 00:09:03,839
if you instead your demand in the middle

186
00:09:01,320 --> 00:09:07,020
you get one shot at getting the password

187
00:09:03,840 --> 00:09:09,930
right because you can pretend to be the

188
00:09:07,020 --> 00:09:12,270
other side but if you get it wrong the

189
00:09:09,930 --> 00:09:13,620
secret comes out wrong and that's the

190
00:09:12,270 --> 00:09:17,240
end of the protocol you don't get

191
00:09:13,620 --> 00:09:21,570
another chance unless there a try now

192
00:09:17,240 --> 00:09:23,610
what this lets us do is a set of key

193
00:09:21,570 --> 00:09:25,800
exchanges where we don't have to worry

194
00:09:23,610 --> 00:09:28,560
as much about the security of the key

195
00:09:25,800 --> 00:09:31,620
and you can see how this is already one

196
00:09:28,560 --> 00:09:34,260
step forward in a troll you X in Atwell

197
00:09:31,620 --> 00:09:38,270
capabilities that we got with new

198
00:09:34,260 --> 00:09:40,770
cryptography that we that we're bringing

199
00:09:38,270 --> 00:09:45,630
compared to what we are able to do with

200
00:09:40,770 --> 00:09:46,980
the usual protocols for example you

201
00:09:45,630 --> 00:09:48,510
don't have to worry about the password

202
00:09:46,980 --> 00:09:52,560
being so strong because there's no way

203
00:09:48,510 --> 00:09:55,650
to brute-force it a tool I love is magic

204
00:09:52,560 --> 00:09:57,959
wormhole it's this small tool that just

205
00:09:55,650 --> 00:09:59,939
does one thing it sends files from one

206
00:09:57,960 --> 00:10:02,370
computer to the other how it works is

207
00:09:59,940 --> 00:10:04,830
that you run warm all send on one

208
00:10:02,370 --> 00:10:07,200
computer warm all receive on the other

209
00:10:04,830 --> 00:10:10,140
computer and the sending computer gives

210
00:10:07,200 --> 00:10:11,760
you two words you type the two words in

211
00:10:10,140 --> 00:10:14,760
the other computer and it's encrypted

212
00:10:11,760 --> 00:10:17,670
now you never use to dictionary words

213
00:10:14,760 --> 00:10:20,610
for any password right because there are

214
00:10:17,670 --> 00:10:22,589
too few combinations and there's two

215
00:10:20,610 --> 00:10:25,290
higher risk of brute force but we're

216
00:10:22,589 --> 00:10:27,210
using a pig so we don't have to worry

217
00:10:25,290 --> 00:10:29,430
about the strength of the key because

218
00:10:27,210 --> 00:10:31,050
the attacker gets one shot and we're

219
00:10:29,430 --> 00:10:33,239
humans mainly we're gonna retry the

220
00:10:31,050 --> 00:10:36,420
thing three four times because computers

221
00:10:33,240 --> 00:10:38,250
never work but that means that they get

222
00:10:36,420 --> 00:10:40,459
four shots at figuring out the key

223
00:10:38,250 --> 00:10:43,800
before you realize that something is off

224
00:10:40,460 --> 00:10:47,510
then there are even more creative uses

225
00:10:43,800 --> 00:10:50,790
of it for example pond pond is this

226
00:10:47,510 --> 00:10:56,819
encrypted messaging system that was too

227
00:10:50,790 --> 00:10:58,589
good for this world and it's not it it

228
00:10:56,820 --> 00:11:00,810
was a research project by Adam Langley

229
00:10:58,589 --> 00:11:03,080
and it didn't really see any adoption

230
00:11:00,810 --> 00:11:06,119
and some of its concepts were then

231
00:11:03,080 --> 00:11:07,750
integrated into other systems so it was

232
00:11:06,120 --> 00:11:10,690
very useful

233
00:11:07,750 --> 00:11:11,890
a project but it's not in it's not

234
00:11:10,690 --> 00:11:14,920
something you should go and use right

235
00:11:11,890 --> 00:11:17,319
now but one of the neat things it will

236
00:11:14,920 --> 00:11:19,510
do is that how you would set up a

237
00:11:17,320 --> 00:11:22,470
communication with someone is that you

238
00:11:19,510 --> 00:11:25,750
just share some even easily guessable

239
00:11:22,470 --> 00:11:29,590
value in in person over a different

240
00:11:25,750 --> 00:11:33,840
channel and then you would run that pig

241
00:11:29,590 --> 00:11:36,070
the ek a to take over a long latency

242
00:11:33,840 --> 00:11:40,450
public server you've literally just

243
00:11:36,070 --> 00:11:43,090
upload like to paste them your share of

244
00:11:40,450 --> 00:11:47,230
the exchange and then the other person

245
00:11:43,090 --> 00:11:49,540
would come on on the server find your

246
00:11:47,230 --> 00:11:52,240
hair take it and complete the operation

247
00:11:49,540 --> 00:11:55,420
and leave their share for you to find

248
00:11:52,240 --> 00:11:57,780
and this could happen over a long period

249
00:11:55,420 --> 00:12:00,670
of time so it was completing Cronus and

250
00:11:57,780 --> 00:12:03,220
finally there's WPA 3 which I know

251
00:12:00,670 --> 00:12:06,579
little about but as I understand is

252
00:12:03,220 --> 00:12:09,280
going to use if not one of the pics I'm

253
00:12:06,580 --> 00:12:11,320
telling you about something that reduces

254
00:12:09,280 --> 00:12:14,010
to a security guarantee similar to this

255
00:12:11,320 --> 00:12:17,560
so no more error cracking after Airmen

256
00:12:14,010 --> 00:12:19,900
recording now if you want to take

257
00:12:17,560 --> 00:12:22,599
something actionable out of this is that

258
00:12:19,900 --> 00:12:25,240
you should probably not be using EK e 2

259
00:12:22,600 --> 00:12:27,520
because it has those weird requirements

260
00:12:25,240 --> 00:12:30,190
on the G and the P but instead you

261
00:12:27,520 --> 00:12:32,770
should be using spake to EE the

262
00:12:30,190 --> 00:12:34,390
alligator version but again we're

263
00:12:32,770 --> 00:12:36,189
getting into territory of things that

264
00:12:34,390 --> 00:12:39,400
either you find off-the-shelf or you

265
00:12:36,190 --> 00:12:42,900
want to ask your cryptography now to get

266
00:12:39,400 --> 00:12:45,970
into the more the less mainstream

267
00:12:42,900 --> 00:12:49,230
cryptography I'm going to let George

268
00:12:45,970 --> 00:12:52,390
tell you about anything that lets you

269
00:12:49,230 --> 00:12:59,050
tell you about crypto 2.0 then lets you

270
00:12:52,390 --> 00:13:01,290
get privacy as part of the result the

271
00:12:59,050 --> 00:13:01,290
clicker

272
00:13:04,570 --> 00:13:11,500
okay so we were talking just now about

273
00:13:08,670 --> 00:13:14,589
things that you can do that gets you new

274
00:13:11,500 --> 00:13:17,170
security guarantees that well in this

275
00:13:14,590 --> 00:13:19,170
particular example you know prevent even

276
00:13:17,170 --> 00:13:21,790
the possibility of a brute force attack

277
00:13:19,170 --> 00:13:25,270
but when we're talking about like crypto

278
00:13:21,790 --> 00:13:28,060
2.0 stuff what is actually most

279
00:13:25,270 --> 00:13:29,800
interesting is that you can start to

280
00:13:28,060 --> 00:13:33,250
defend against other participants in

281
00:13:29,800 --> 00:13:36,219
your protocol you know it's not just

282
00:13:33,250 --> 00:13:39,550
like Alice and Bob who share everything

283
00:13:36,220 --> 00:13:42,250
it's Alice and Bob who only want to

284
00:13:39,550 --> 00:13:44,740
share some things or who you know don't

285
00:13:42,250 --> 00:13:46,330
want anyone watching them to be able to

286
00:13:44,740 --> 00:13:49,890
derive information from the transcript

287
00:13:46,330 --> 00:13:54,130
of of their interaction things like this

288
00:13:49,890 --> 00:13:56,980
my favorite and maybe the most easily

289
00:13:54,130 --> 00:13:59,880
accessible example of this kind of thing

290
00:13:56,980 --> 00:14:04,750
is something called a blind signature

291
00:13:59,880 --> 00:14:07,360
it's actually not very commonly used but

292
00:14:04,750 --> 00:14:09,430
it is super practical they're they're

293
00:14:07,360 --> 00:14:10,630
deployed in real life they're well

294
00:14:09,430 --> 00:14:14,079
specified there are a bunch of different

295
00:14:10,630 --> 00:14:18,280
ways you can implement them the easiest

296
00:14:14,080 --> 00:14:21,490
way though is the oldest and possibly

297
00:14:18,280 --> 00:14:23,829
slowest one based on RSA so we're going

298
00:14:21,490 --> 00:14:28,530
to talk about that simply because it's

299
00:14:23,830 --> 00:14:31,810
easier to show and you're all I well

300
00:14:28,530 --> 00:14:34,240
probably have encountered the concept of

301
00:14:31,810 --> 00:14:36,069
a of a signature before like a normal

302
00:14:34,240 --> 00:14:38,800
signature that you'd expect you have a

303
00:14:36,070 --> 00:14:40,720
private key and a public key you can

304
00:14:38,800 --> 00:14:43,060
sign the message with the private key

305
00:14:40,720 --> 00:14:46,450
and anyone who has your public key can

306
00:14:43,060 --> 00:14:48,280
verify it now with a blind signature the

307
00:14:46,450 --> 00:14:51,420
specific information that we want to

308
00:14:48,280 --> 00:14:54,939
restrict is the content of the message

309
00:14:51,420 --> 00:14:57,099
hidden from the signer in the actual

310
00:14:54,940 --> 00:14:58,840
mechanics of how you do that depend

311
00:14:57,100 --> 00:15:00,340
pretty heavily on the signature scheme

312
00:14:58,840 --> 00:15:03,880
that you're using so we'll look

313
00:15:00,340 --> 00:15:08,440
specifically at RSA here but you can do

314
00:15:03,880 --> 00:15:10,589
this with ECDSA like the the signatures

315
00:15:08,440 --> 00:15:14,670
that Bitcoin uses you can use this with

316
00:15:10,589 --> 00:15:18,120
EDSA like the the Daniel Bernstein

317
00:15:14,670 --> 00:15:19,620
type signatures and actually a whole

318
00:15:18,120 --> 00:15:24,600
bunch of others that you should never

319
00:15:19,620 --> 00:15:26,880
ever care about anyway RSA RSA signature

320
00:15:24,600 --> 00:15:29,910
scheme you have a public modulus in

321
00:15:26,880 --> 00:15:32,130
which is a product of two very large

322
00:15:29,910 --> 00:15:35,280
primes the security of the system is

323
00:15:32,130 --> 00:15:38,189
based on that being hard to factor you

324
00:15:35,280 --> 00:15:43,620
have E which is a public exponent it's a

325
00:15:38,190 --> 00:15:45,450
thing that you use in in the like actual

326
00:15:43,620 --> 00:15:47,100
RSA operation basically but it's a

327
00:15:45,450 --> 00:15:50,880
public parameter everyone can know it

328
00:15:47,100 --> 00:15:54,600
it's usually fixed but then you have D

329
00:15:50,880 --> 00:15:57,930
which is the inverse of e for the

330
00:15:54,600 --> 00:16:00,000
particular modulus you've chosen and the

331
00:15:57,930 --> 00:16:02,969
inverse is basically what that would

332
00:16:00,000 --> 00:16:05,220
mean for like a normal fraction the

333
00:16:02,970 --> 00:16:08,690
inverse of E is 1 over E so when you

334
00:16:05,220 --> 00:16:11,550
have a times D the result of that is 1

335
00:16:08,690 --> 00:16:13,980
there are some other parts of this

336
00:16:11,550 --> 00:16:21,750
scheme that we're not gonna worry about

337
00:16:13,980 --> 00:16:23,370
right now the signature equations don't

338
00:16:21,750 --> 00:16:27,870
really involve it at all

339
00:16:23,370 --> 00:16:30,150
so moving on you generate a signature by

340
00:16:27,870 --> 00:16:33,480
taking your message m which is

341
00:16:30,150 --> 00:16:37,079
represented in some numerical form which

342
00:16:33,480 --> 00:16:41,400
we're also going to hand wave about you

343
00:16:37,080 --> 00:16:43,980
raise it to the to the exponent D that

344
00:16:41,400 --> 00:16:46,620
produces your signature value M to the D

345
00:16:43,980 --> 00:16:51,090
mod n and you can verify it by checking

346
00:16:46,620 --> 00:16:53,820
this equation here behind my head that M

347
00:16:51,090 --> 00:16:57,930
to the D to the e which again is public

348
00:16:53,820 --> 00:17:01,470
and widely known actually works out to

349
00:16:57,930 --> 00:17:03,120
be M to the one which is just M mod n

350
00:17:01,470 --> 00:17:06,089
which is the original text of the

351
00:17:03,120 --> 00:17:09,119
message that you want to verify so this

352
00:17:06,089 --> 00:17:11,579
is standard this is standard RSA

353
00:17:09,119 --> 00:17:13,649
signatures and specifically you know

354
00:17:11,579 --> 00:17:16,439
everybody knows who the public key

355
00:17:13,650 --> 00:17:19,800
belongs to and the signer knows the

356
00:17:16,440 --> 00:17:22,020
content of the message in order to

357
00:17:19,800 --> 00:17:26,040
prevent that we're gonna add one more

358
00:17:22,020 --> 00:17:29,070
term these equations because basically

359
00:17:26,040 --> 00:17:31,620
like I said hand wave but M is some

360
00:17:29,070 --> 00:17:34,860
numerical representation if you do

361
00:17:31,620 --> 00:17:38,760
number things to it the math will still

362
00:17:34,860 --> 00:17:41,070
mostly work out so to blind a signature

363
00:17:38,760 --> 00:17:43,410
we're gonna generate some other large

364
00:17:41,070 --> 00:17:47,100
random number are the blinding factor

365
00:17:43,410 --> 00:17:52,020
and we are just going to raise em to the

366
00:17:47,100 --> 00:17:55,949
power of our the signature then is going

367
00:17:52,020 --> 00:18:00,090
to end up being the signature over that

368
00:17:55,950 --> 00:18:02,730
blinded value so if you were to expand

369
00:18:00,090 --> 00:18:05,280
out that bottom equation it would be the

370
00:18:02,730 --> 00:18:09,300
blind signature equals M to the art of

371
00:18:05,280 --> 00:18:12,750
the D or M to the R times D this is

372
00:18:09,300 --> 00:18:15,810
useful because just like with E and D

373
00:18:12,750 --> 00:18:19,770
are also has an inverse and when you

374
00:18:15,810 --> 00:18:24,960
when you generate are you can also find

375
00:18:19,770 --> 00:18:28,410
its inverse so when you send the blinded

376
00:18:24,960 --> 00:18:31,140
message to a signer they're gonna send

377
00:18:28,410 --> 00:18:34,400
you back a signed version of that blind

378
00:18:31,140 --> 00:18:38,280
message but because you know 1 over R

379
00:18:34,400 --> 00:18:41,310
you can raise the blind signature to the

380
00:18:38,280 --> 00:18:46,170
power of 1 over R which works out like

381
00:18:41,310 --> 00:18:48,750
this where you get basically you know Mr

382
00:18:46,170 --> 00:18:51,570
D times 1 over R and the R and the 1

383
00:18:48,750 --> 00:18:54,630
over r cancel each other out so you get

384
00:18:51,570 --> 00:18:57,990
into the D mod n which is if you'll

385
00:18:54,630 --> 00:19:02,760
recall just the value of a nor of a

386
00:18:57,990 --> 00:19:06,240
normal signature on the message if you

387
00:19:02,760 --> 00:19:08,930
then take that unblinded signature and

388
00:19:06,240 --> 00:19:11,520
present it to the original signer

389
00:19:08,930 --> 00:19:13,410
they will validate it and they will see

390
00:19:11,520 --> 00:19:16,139
that it is a message that they have in

391
00:19:13,410 --> 00:19:17,400
fact validly signed so they'll believe

392
00:19:16,140 --> 00:19:19,890
whatever it is that you're trying to

393
00:19:17,400 --> 00:19:25,530
assert but they have never seen that

394
00:19:19,890 --> 00:19:31,170
message value before so yeah I just said

395
00:19:25,530 --> 00:19:33,660
that why do we care the cool thing about

396
00:19:31,170 --> 00:19:35,400
this is when you have the the blinded

397
00:19:33,660 --> 00:19:37,920
message value and the unmet blinded

398
00:19:35,400 --> 00:19:39,420
message value they're said to be unlink

399
00:19:37,920 --> 00:19:42,360
able which basically means at that

400
00:19:39,420 --> 00:19:44,910
repeated presentation

401
00:19:42,360 --> 00:19:48,929
when you attempt to redeem a credential

402
00:19:44,910 --> 00:19:50,730
or something like that the signer won't

403
00:19:48,930 --> 00:19:52,980
be able to link the requests that you

404
00:19:50,730 --> 00:19:54,510
made to get the message signed with the

405
00:19:52,980 --> 00:19:56,550
request that you're making to validate

406
00:19:54,510 --> 00:19:58,170
the signature they will not be able to

407
00:19:56,550 --> 00:20:01,980
tell whether those come from the same

408
00:19:58,170 --> 00:20:04,590
person or two different people and this

409
00:20:01,980 --> 00:20:06,480
is cool because it's the basic concept

410
00:20:04,590 --> 00:20:09,120
of the earliest forms of anonymous

411
00:20:06,480 --> 00:20:11,460
internet money you may all be familiar

412
00:20:09,120 --> 00:20:16,919
with newer forms of anonymous internet

413
00:20:11,460 --> 00:20:20,280
money but this was the first how did it

414
00:20:16,920 --> 00:20:24,030
work well so in the I believe early 90s

415
00:20:20,280 --> 00:20:27,050
I believe the early 90s cryptographer

416
00:20:24,030 --> 00:20:29,160
named David Chum wrote a paper called

417
00:20:27,050 --> 00:20:32,610
blind signatures for untraceable

418
00:20:29,160 --> 00:20:35,040
payments something like that was that

419
00:20:32,610 --> 00:20:36,689
does anybody you know untraceable pay

420
00:20:35,040 --> 00:20:39,659
anyway it's got untraceable payments in

421
00:20:36,690 --> 00:20:41,460
the name where he basically invented the

422
00:20:39,660 --> 00:20:43,380
concept of blind signatures and also

423
00:20:41,460 --> 00:20:45,540
described how you would use them to

424
00:20:43,380 --> 00:20:50,130
create an anonymous digital money system

425
00:20:45,540 --> 00:20:55,940
and like most of David Toms designs this

426
00:20:50,130 --> 00:20:55,940
one is best explained using a graphic

427
00:20:57,050 --> 00:21:05,639
not this graphic this graphic okay so

428
00:21:01,740 --> 00:21:07,500
this is how David chums ecash works it's

429
00:21:05,640 --> 00:21:11,730
based entirely on the blinded signatures

430
00:21:07,500 --> 00:21:14,160
that I just explained you you assume

431
00:21:11,730 --> 00:21:16,170
that there is a centralized bank that is

432
00:21:14,160 --> 00:21:19,800
the issuer for all of this electronic

433
00:21:16,170 --> 00:21:21,630
money everyone hasn't accounted the bank

434
00:21:19,800 --> 00:21:24,360
it keeps track of how many like real

435
00:21:21,630 --> 00:21:27,540
dollars you have and it issues and

436
00:21:24,360 --> 00:21:31,229
receives signed messages that represent

437
00:21:27,540 --> 00:21:32,909
you know some unit of value in contrast

438
00:21:31,230 --> 00:21:35,160
to Bitcoin this is usually a fixed unit

439
00:21:32,910 --> 00:21:37,560
of value it's not like an infinite

440
00:21:35,160 --> 00:21:39,870
number of decimal places it's like one

441
00:21:37,560 --> 00:21:43,500
message equals one dollar or something

442
00:21:39,870 --> 00:21:46,169
like that so you as someone who wants to

443
00:21:43,500 --> 00:21:50,220
anonymously pay for something generates

444
00:21:46,170 --> 00:21:51,960
a bunch of random blinded messages then

445
00:21:50,220 --> 00:21:54,870
you go to the bank and you say hey I

446
00:21:51,960 --> 00:21:55,470
want to withdraw this many tokens worth

447
00:21:54,870 --> 00:21:59,129
of

448
00:21:55,470 --> 00:22:00,390
I account the bank says well they'll

449
00:21:59,130 --> 00:22:03,659
check your account balance they'll say

450
00:22:00,390 --> 00:22:06,630
okay sure that's fine I'm gonna sign

451
00:22:03,659 --> 00:22:09,270
your tokens here you go so you get those

452
00:22:06,630 --> 00:22:11,010
back you then unblind them and now

453
00:22:09,270 --> 00:22:13,860
you've got like a set of tokens that you

454
00:22:11,010 --> 00:22:15,419
can use that have been issued by the

455
00:22:13,860 --> 00:22:17,939
bank that have a valid signature from

456
00:22:15,419 --> 00:22:20,450
the bank and that have like a commonly

457
00:22:17,940 --> 00:22:23,730
known accepted fixed value of some sort

458
00:22:20,450 --> 00:22:27,090
so when you want to buy something from

459
00:22:23,730 --> 00:22:33,510
this unhappy merchant who seems to have

460
00:22:27,090 --> 00:22:41,309
a bunch of stuff because those were the

461
00:22:33,510 --> 00:22:44,460
only emoji available on Google slides so

462
00:22:41,309 --> 00:22:46,158
you you you say hello there merchant I

463
00:22:44,460 --> 00:22:48,990
would like to buy some of your stuff

464
00:22:46,159 --> 00:22:51,210
here's here's one of my tokens and you

465
00:22:48,990 --> 00:22:53,220
send the signature and the message which

466
00:22:51,210 --> 00:22:54,720
is again just like some random numeric

467
00:22:53,220 --> 00:22:58,380
value it's like a serial number on a

468
00:22:54,720 --> 00:23:00,570
dollar bill the the merchant says well

469
00:22:58,380 --> 00:23:02,610
alright I trust the bank I have the

470
00:23:00,570 --> 00:23:06,928
bank's public key I can verify that

471
00:23:02,610 --> 00:23:08,850
signature and then I can take that token

472
00:23:06,929 --> 00:23:11,130
and I can pass it on to the bank and I

473
00:23:08,850 --> 00:23:13,260
can say hey I would like to redeem this

474
00:23:11,130 --> 00:23:16,350
for money in my account and the bank

475
00:23:13,260 --> 00:23:19,830
will say okay yes this is a valid

476
00:23:16,350 --> 00:23:22,139
signature of mine and I have not seen

477
00:23:19,830 --> 00:23:24,870
that serial number before this is not a

478
00:23:22,140 --> 00:23:27,570
double spend so the bank will then add

479
00:23:24,870 --> 00:23:29,340
the message add the serial number to its

480
00:23:27,570 --> 00:23:31,710
big list of every token it's ever seen

481
00:23:29,340 --> 00:23:39,030
which is super practical from an

482
00:23:31,710 --> 00:23:41,130
engineering perspective and validate the

483
00:23:39,030 --> 00:23:42,809
signature and then credit the merchants

484
00:23:41,130 --> 00:23:45,240
account with whatever the value of those

485
00:23:42,809 --> 00:23:47,510
tokens was the merchant will then get

486
00:23:45,240 --> 00:23:50,370
this response from the bank and say

487
00:23:47,510 --> 00:23:52,830
great here's your present they'll send

488
00:23:50,370 --> 00:23:54,299
you this stuff and that is how you cash

489
00:23:52,830 --> 00:23:58,309
works that's how like the original

490
00:23:54,299 --> 00:24:03,090
anonymous internet money functions and

491
00:23:58,309 --> 00:24:06,000
this general scheme works really well

492
00:24:03,090 --> 00:24:08,399
for any kind of statement that you want

493
00:24:06,000 --> 00:24:09,240
to anonymously validate that has that

494
00:24:08,399 --> 00:24:11,610
kind of various in

495
00:24:09,240 --> 00:24:16,110
structure like you know did the bank

496
00:24:11,610 --> 00:24:20,760
approve my withdrawal am i a registered

497
00:24:16,110 --> 00:24:23,010
user has this cookie expired or not am i

498
00:24:20,760 --> 00:24:25,170
banned from the site these kinds of

499
00:24:23,010 --> 00:24:28,260
things it all generalizes very easily to

500
00:24:25,170 --> 00:24:33,300
anything basically that can be answered

501
00:24:28,260 --> 00:24:35,430
as a yes or no question but if you want

502
00:24:33,300 --> 00:24:36,000
to do something more complicated than

503
00:24:35,430 --> 00:24:37,680
that

504
00:24:36,000 --> 00:24:41,070
anything more complicated than basically

505
00:24:37,680 --> 00:24:42,930
like a comparison or a boolean value you

506
00:24:41,070 --> 00:24:47,399
need something called a zero knowledge

507
00:24:42,930 --> 00:24:50,520
proof I can I can tell that some of you

508
00:24:47,400 --> 00:24:53,910
have heard this phrase before zero

509
00:24:50,520 --> 00:25:11,910
knowledge proof are notorious what just

510
00:24:53,910 --> 00:25:13,800
what did you do oh yeah okay so the

511
00:25:11,910 --> 00:25:15,930
chomp paper is called blind signatures

512
00:25:13,800 --> 00:25:18,270
for untraceable payments I was slightly

513
00:25:15,930 --> 00:25:20,550
wrong but it's it's it's great it's it's

514
00:25:18,270 --> 00:25:21,980
from the era of crypto papers that just

515
00:25:20,550 --> 00:25:24,270
fix your machine

516
00:25:21,980 --> 00:25:26,790
it's from the era of crypto papers

517
00:25:24,270 --> 00:25:28,470
that's like five pages scrawled on the

518
00:25:26,790 --> 00:25:31,710
back of a napkin that just says like hey

519
00:25:28,470 --> 00:25:34,050
I had this cool idea it's it's really

520
00:25:31,710 --> 00:25:35,490
it's really readable for as important as

521
00:25:34,050 --> 00:25:38,490
it was in like the history of

522
00:25:35,490 --> 00:25:40,710
cryptography highly recommended so

523
00:25:38,490 --> 00:25:43,860
anyway if you want to do something more

524
00:25:40,710 --> 00:25:46,800
complex than this you need zero

525
00:25:43,860 --> 00:25:49,350
knowledge proof and as I was saying zero

526
00:25:46,800 --> 00:25:51,659
knowledge proof are like just

527
00:25:49,350 --> 00:25:54,389
legendarily awful to explain no one

528
00:25:51,660 --> 00:25:57,960
hasn't any any intuition for them the

529
00:25:54,390 --> 00:26:01,860
the metaphors are tortured at best the

530
00:25:57,960 --> 00:26:05,700
math is dense and frankly I don't really

531
00:26:01,860 --> 00:26:07,649
even want to try but as luck would have

532
00:26:05,700 --> 00:26:09,600
it I happen to know that here in the

533
00:26:07,650 --> 00:26:11,640
audience tonight we have one of the

534
00:26:09,600 --> 00:26:20,070
world's foremost zero knowledge proof

535
00:26:11,640 --> 00:26:22,520
engineers so yes jack if you're not too

536
00:26:20,070 --> 00:26:36,280
busy I have some slides for you

537
00:26:22,520 --> 00:26:43,460
I hope this button goes the correct way

538
00:26:36,280 --> 00:26:44,660
so yes so and you've seen a simple

539
00:26:43,460 --> 00:26:47,330
example where you want to be able to

540
00:26:44,660 --> 00:26:49,760
check essentially a straight yes or no

541
00:26:47,330 --> 00:26:51,139
answer but if you want to do anything

542
00:26:49,760 --> 00:26:52,670
more complex than that you know we want

543
00:26:51,140 --> 00:26:54,290
to prove what we call complicated

544
00:26:52,670 --> 00:26:56,480
statements or like complex statements

545
00:26:54,290 --> 00:26:58,270
and like I don't know just to pick a

546
00:26:56,480 --> 00:27:02,420
random example out of the air

547
00:26:58,270 --> 00:27:05,960
cryptocurrency transactions so if you

548
00:27:02,420 --> 00:27:07,670
think of the general structure of a such

549
00:27:05,960 --> 00:27:10,100
a transaction like in Bitcoin as I've

550
00:27:07,670 --> 00:27:13,120
handli diagrammed here you can see that

551
00:27:10,100 --> 00:27:17,030
you take you know what amounts to some

552
00:27:13,120 --> 00:27:18,979
transaction consumes inputs and creates

553
00:27:17,030 --> 00:27:20,840
new ones that's called the the you take

554
00:27:18,980 --> 00:27:23,450
so model the unspin transaction model as

555
00:27:20,840 --> 00:27:25,490
opposed to having an address with a

556
00:27:23,450 --> 00:27:27,740
balance like in that Bank case where you

557
00:27:25,490 --> 00:27:30,650
are deducting values and adding values

558
00:27:27,740 --> 00:27:33,410
to a central balance in this case you

559
00:27:30,650 --> 00:27:35,900
simply have a bunch of tokens or crypto

560
00:27:33,410 --> 00:27:40,070
kiddies stored on a on a distributed

561
00:27:35,900 --> 00:27:42,710
ledger and you invalidate them or or

562
00:27:40,070 --> 00:27:46,669
create them as necessary as per the

563
00:27:42,710 --> 00:27:49,550
rules that the that the network defines

564
00:27:46,670 --> 00:27:52,280
and so in the case of like Bitcoin

565
00:27:49,550 --> 00:27:54,110
there's a set of rules that you need to

566
00:27:52,280 --> 00:27:55,940
follow such as when you make a

567
00:27:54,110 --> 00:27:58,040
transaction the input you're spending

568
00:27:55,940 --> 00:28:00,530
has to previously exist it has to come

569
00:27:58,040 --> 00:28:03,200
from some other transaction the inputs

570
00:28:00,530 --> 00:28:05,690
have to add up to the outputs plus fee

571
00:28:03,200 --> 00:28:08,600
and so that you're not just making money

572
00:28:05,690 --> 00:28:12,110
out of thin air and then crucially you

573
00:28:08,600 --> 00:28:15,290
can't have spent those those perhaps

574
00:28:12,110 --> 00:28:18,860
before and and then finally you need to

575
00:28:15,290 --> 00:28:21,440
make sure that for example Alice's

576
00:28:18,860 --> 00:28:24,290
Center to bitcoins to Bob to his address

577
00:28:21,440 --> 00:28:25,910
he then needs to sign for it in some

578
00:28:24,290 --> 00:28:29,240
fashion to prove that he has the

579
00:28:25,910 --> 00:28:30,680
authority to spin that that's a fair bit

580
00:28:29,240 --> 00:28:32,570
more than just a simple yes-or-no answer

581
00:28:30,680 --> 00:28:34,700
there's a fair few things I mean to

582
00:28:32,570 --> 00:28:35,429
check there now let's try and make it

583
00:28:34,700 --> 00:28:38,910
private

584
00:28:35,430 --> 00:28:40,560
so in addition to you know Bitcoin

585
00:28:38,910 --> 00:28:41,910
serves very well for its purpose it

586
00:28:40,560 --> 00:28:44,280
allows you to check all those things but

587
00:28:41,910 --> 00:28:47,880
the way it does it is by having all that

588
00:28:44,280 --> 00:28:49,470
data visible so that everyone on the

589
00:28:47,880 --> 00:28:51,540
entire network or everyone running a

590
00:28:49,470 --> 00:28:53,130
node can go through and check all those

591
00:28:51,540 --> 00:28:57,629
rules so if you want to do something

592
00:28:53,130 --> 00:28:59,640
private we need to be able to

593
00:28:57,630 --> 00:29:03,260
essentially encrypt all that data on

594
00:28:59,640 --> 00:29:06,360
there or hide their data in some fashion

595
00:29:03,260 --> 00:29:09,720
but at the same time then it would nodes

596
00:29:06,360 --> 00:29:12,179
still need to be able to check that it

597
00:29:09,720 --> 00:29:13,140
is in fact following the rules despite

598
00:29:12,180 --> 00:29:15,090
the fact that I can't see what's

599
00:29:13,140 --> 00:29:18,930
actually going on there and the way we

600
00:29:15,090 --> 00:29:20,639
do this is with some sort of proof so

601
00:29:18,930 --> 00:29:24,390
text it back for a moment

602
00:29:20,640 --> 00:29:25,620
I suck across words I can never seem to

603
00:29:24,390 --> 00:29:27,480
get the hang of them but you know I have

604
00:29:25,620 --> 00:29:30,120
friends that are good at them so let's

605
00:29:27,480 --> 00:29:31,530
say that I want to learn from a friend

606
00:29:30,120 --> 00:29:34,229
okay this particular crossword I'm sorry

607
00:29:31,530 --> 00:29:36,840
does it in fact have a solution yeah so

608
00:29:34,230 --> 00:29:39,360
I can send her the crossword now that's

609
00:29:36,840 --> 00:29:42,149
a reasonably complex situations we had

610
00:29:39,360 --> 00:29:44,159
to prove a solution too so what can what

611
00:29:42,150 --> 00:29:47,070
can now let's do Mo's you can tell me

612
00:29:44,160 --> 00:29:48,900
she knows the solution that's useful do

613
00:29:47,070 --> 00:29:51,110
what do I do I trust her is she messing

614
00:29:48,900 --> 00:29:55,590
with me how do I tell the difference

615
00:29:51,110 --> 00:29:56,300
okay so she could also say here's a

616
00:29:55,590 --> 00:29:58,560
solution

617
00:29:56,300 --> 00:30:03,570
great we're right back where we started

618
00:29:58,560 --> 00:30:05,520
yeah so I now yeah in one situation I

619
00:30:03,570 --> 00:30:06,780
can't do anything with this I can I

620
00:30:05,520 --> 00:30:09,660
necessarily trust us in the other

621
00:30:06,780 --> 00:30:11,040
situation I can see it all but that's no

622
00:30:09,660 --> 00:30:13,440
fun for me in the crossword case and

623
00:30:11,040 --> 00:30:16,190
that's not private for anyone in the

624
00:30:13,440 --> 00:30:18,690
your bank account on the blockchain case

625
00:30:16,190 --> 00:30:21,480
so we want the we want the middle ground

626
00:30:18,690 --> 00:30:23,040
where Alice can provide a proof that she

627
00:30:21,480 --> 00:30:25,020
knows the solution and I will look at

628
00:30:23,040 --> 00:30:27,990
this proof and I will be I'm satisfied

629
00:30:25,020 --> 00:30:31,800
that in fact it does solve the problem

630
00:30:27,990 --> 00:30:33,180
that I am describing without seeing in

631
00:30:31,800 --> 00:30:35,370
fact what it is and any of the

632
00:30:33,180 --> 00:30:37,100
information that she has and we do this

633
00:30:35,370 --> 00:30:39,600
with zero knowledge proof which were

634
00:30:37,100 --> 00:30:41,790
created what on earth why I'm supposed

635
00:30:39,600 --> 00:30:43,689
to have animations on this oh well I'll

636
00:30:41,790 --> 00:30:46,700
have to plan for that

637
00:30:43,690 --> 00:30:48,770
so there's a lovely seminal paper by go

638
00:30:46,700 --> 00:30:50,750
to Vassar McCauley and Rakoff back in

639
00:30:48,770 --> 00:30:53,570
1985 again we're still dealing with

640
00:30:50,750 --> 00:30:57,190
pretty recently old concepts of this but

641
00:30:53,570 --> 00:30:59,779
this was quite a novel one and with the

642
00:30:57,190 --> 00:31:02,929
introducing this concept of zero

643
00:30:59,779 --> 00:31:05,210
knowledge and so so you can think of a

644
00:31:02,929 --> 00:31:07,460
proof you have sort of three things you

645
00:31:05,210 --> 00:31:08,870
need or two things need for a general

646
00:31:07,460 --> 00:31:12,350
proof and then one you need for a zero

647
00:31:08,870 --> 00:31:14,029
knowledge proof so for you know you need

648
00:31:12,350 --> 00:31:18,799
to be obviously have completeness so if

649
00:31:14,029 --> 00:31:22,580
I if I am an honest prover and you are a

650
00:31:18,799 --> 00:31:24,500
very cautious or unhappy merchant I can

651
00:31:22,580 --> 00:31:27,408
eventually convince you somehow that I

652
00:31:24,500 --> 00:31:29,480
do in fact have the money that I'm

653
00:31:27,409 --> 00:31:31,429
trying to give you or that I do in fact

654
00:31:29,480 --> 00:31:34,669
have the solution to the puzzle that you

655
00:31:31,429 --> 00:31:38,450
want and so that so completeness means

656
00:31:34,669 --> 00:31:42,980
that the the prover is happy the prover

657
00:31:38,450 --> 00:31:46,190
is able to to convey what they want the

658
00:31:42,980 --> 00:31:48,590
soundness is for protecting the verifier

659
00:31:46,190 --> 00:31:52,669
so it protects the verify from the

660
00:31:48,590 --> 00:31:54,559
proven so if I am the merchant trying to

661
00:31:52,669 --> 00:31:56,690
receipt you receive a payment check that

662
00:31:54,559 --> 00:31:58,100
I'm getting a payment I can only be

663
00:31:56,690 --> 00:32:01,820
convinced that I have in fact been paid

664
00:31:58,100 --> 00:32:04,610
if the person who's paying me has

665
00:32:01,820 --> 00:32:06,649
satisfied the rules of the network so in

666
00:32:04,610 --> 00:32:08,479
the case of Bitcoin they have given me

667
00:32:06,649 --> 00:32:10,428
money that in fact they did have they're

668
00:32:08,480 --> 00:32:14,870
not making up money out of thin air

669
00:32:10,429 --> 00:32:17,149
because numbers and so yeah more cut

670
00:32:14,870 --> 00:32:18,709
more generally when you have a general

671
00:32:17,149 --> 00:32:22,459
statement you're trying to prove I'm

672
00:32:18,710 --> 00:32:24,789
only able to convince a verify if I know

673
00:32:22,460 --> 00:32:28,460
the secret inputs that satisfy that

674
00:32:24,789 --> 00:32:30,590
statement that thing and then the zero

675
00:32:28,460 --> 00:32:33,679
knowledge this aspect which is what they

676
00:32:30,590 --> 00:32:36,139
call it in the papers is that in this

677
00:32:33,679 --> 00:32:38,659
interaction the verifier the merchant

678
00:32:36,140 --> 00:32:40,820
who ever doesn't learn anything about

679
00:32:38,659 --> 00:32:44,299
the private data that the the prover has

680
00:32:40,820 --> 00:32:46,939
the private inputs so you in this in the

681
00:32:44,299 --> 00:32:50,450
case of like a zero knowledge system in

682
00:32:46,940 --> 00:32:54,160
a in a in a blockchain what you end up

683
00:32:50,450 --> 00:32:56,390
doing is committing to your values

684
00:32:54,160 --> 00:32:59,660
in public so that they have some like

685
00:32:56,390 --> 00:33:02,300
reality anchor and then you're proving

686
00:32:59,660 --> 00:33:04,040
in private information proving in

687
00:33:02,300 --> 00:33:06,680
private that the information committed

688
00:33:04,040 --> 00:33:09,500
to in fact satisfies the various rules

689
00:33:06,680 --> 00:33:12,650
that you're wanting to check and then

690
00:33:09,500 --> 00:33:14,480
the verifier takes the the proof and the

691
00:33:12,650 --> 00:33:17,750
public values and is able to be

692
00:33:14,480 --> 00:33:19,190
sufficiently convinced so there are a

693
00:33:17,750 --> 00:33:21,440
couple of different ways that that this

694
00:33:19,190 --> 00:33:23,420
can be done some of the early proving

695
00:33:21,440 --> 00:33:25,970
systems were notoriously slow and

696
00:33:23,420 --> 00:33:28,910
inefficient but you know they're really

697
00:33:25,970 --> 00:33:31,400
a bit easier to describe someone lists

698
00:33:28,910 --> 00:33:37,400
so well that is really imposing on the

699
00:33:31,400 --> 00:33:43,850
screen this describes I'm I'm not I'm

700
00:33:37,400 --> 00:33:47,270
not good it's late you'd be really we've

701
00:33:43,850 --> 00:33:49,429
had enough mats one evening but at a

702
00:33:47,270 --> 00:33:51,110
high level this is this this implements

703
00:33:49,430 --> 00:33:53,390
what's called a ZK snack a zero

704
00:33:51,110 --> 00:33:56,120
knowledge succinct non interactive

705
00:33:53,390 --> 00:34:00,230
argument of knowledge and knowledge is

706
00:33:56,120 --> 00:34:03,080
in there twice for fun reasons but what

707
00:34:00,230 --> 00:34:06,590
it amounts to is essentially all this

708
00:34:03,080 --> 00:34:08,389
stuff balls down to 200 bytes where did

709
00:34:06,590 --> 00:34:10,639
this particular one boils down to 298

710
00:34:08,389 --> 00:34:15,440
bytes but the the state of the art now

711
00:34:10,639 --> 00:34:20,719
is 200 bytes is your proof that proof

712
00:34:15,440 --> 00:34:24,649
can represent an effectively arbitrarily

713
00:34:20,719 --> 00:34:28,219
large statement or thing that you're

714
00:34:24,649 --> 00:34:31,969
trying to encode in the case of to to

715
00:34:28,219 --> 00:34:36,020
pick a a recent cryptocurrency that uses

716
00:34:31,969 --> 00:34:38,000
this kind of thing the statements as

717
00:34:36,020 --> 00:34:41,389
originally encoded took about a gigabyte

718
00:34:38,000 --> 00:34:45,260
or so of data to to to describe in a

719
00:34:41,389 --> 00:34:48,739
file that everyone has to hold on to but

720
00:34:45,260 --> 00:34:51,020
then and you know minutes to compute on

721
00:34:48,739 --> 00:34:54,620
a in a reasonable amount of time

722
00:34:51,020 --> 00:34:56,899
but then the verification part tens of

723
00:34:54,620 --> 00:34:59,990
milliseconds less than that so you get

724
00:34:56,899 --> 00:35:04,250
this asymmetry which is what you want in

725
00:34:59,990 --> 00:35:05,549
any sort of more complex proving case

726
00:35:04,250 --> 00:35:08,130
where you

727
00:35:05,550 --> 00:35:12,410
where you can basically prove that kind

728
00:35:08,130 --> 00:35:14,400
of thing I was going to talk a bit about

729
00:35:12,410 --> 00:35:16,859
about circuits and doing things with

730
00:35:14,400 --> 00:35:18,780
that but then I've sort of the reveals

731
00:35:16,860 --> 00:35:21,780
gone basically when you're actually

732
00:35:18,780 --> 00:35:23,910
using these in a inner system you're not

733
00:35:21,780 --> 00:35:26,520
actually writing a functional as such

734
00:35:23,910 --> 00:35:28,350
you are curating what's called a circuit

735
00:35:26,520 --> 00:35:30,270
as series of constraints so you have

736
00:35:28,350 --> 00:35:32,220
data and you're constraining it to a

737
00:35:30,270 --> 00:35:34,680
certain value so for instance with a

738
00:35:32,220 --> 00:35:37,230
boolean you want to you have a number

739
00:35:34,680 --> 00:35:40,649
and you want to turn that number into

740
00:35:37,230 --> 00:35:43,770
some some thing and you use an equation

741
00:35:40,650 --> 00:35:45,450
to constrain it to its value and so you

742
00:35:43,770 --> 00:35:48,050
can constraint say a bunch of billion

743
00:35:45,450 --> 00:35:50,580
bits then if you want to turn it into a

744
00:35:48,050 --> 00:35:55,260
number like a byte you can use another

745
00:35:50,580 --> 00:35:58,830
value to constrain that and I'm running

746
00:35:55,260 --> 00:36:01,700
out of time but the the fun thing about

747
00:35:58,830 --> 00:36:04,920
this is that yes it is dangerous new

748
00:36:01,700 --> 00:36:06,330
crypto but it actually is getting to the

749
00:36:04,920 --> 00:36:08,850
point of having some workable

750
00:36:06,330 --> 00:36:11,279
implementations for engineers to use we

751
00:36:08,850 --> 00:36:13,319
have a couple of fun libraries to work

752
00:36:11,280 --> 00:36:15,090
with and we have some DSL to people

753
00:36:13,320 --> 00:36:18,380
developing if you want to say users on

754
00:36:15,090 --> 00:36:20,490
aetherium or reusing a camel you can

755
00:36:18,380 --> 00:36:23,940
work with this and there's a bunch more

756
00:36:20,490 --> 00:36:26,370
information at this weight URL and yeah

757
00:36:23,940 --> 00:36:28,140
fun stuff and if you were more

758
00:36:26,370 --> 00:36:31,140
interested in in going through that

759
00:36:28,140 --> 00:36:34,859
giant slide should come talk to one of

760
00:36:31,140 --> 00:36:37,120
us later and with that I will jump off

761
00:36:34,860 --> 00:36:40,250
the stage thank you

762
00:36:37,120 --> 00:36:41,839
[Applause]

763
00:36:40,250 --> 00:36:44,430
[Music]

764
00:36:41,840 --> 00:36:46,020
really if you have the occasion to catch

765
00:36:44,430 --> 00:36:48,569
him here's one of the people that

766
00:36:46,020 --> 00:36:51,150
deploys the knowledge proofs in real

767
00:36:48,570 --> 00:36:53,760
systems today in you know anonymous

768
00:36:51,150 --> 00:36:56,460
internet money okay

769
00:36:53,760 --> 00:36:58,980
so zero knowledge proof are about hiding

770
00:36:56,460 --> 00:37:03,450
the information you're proving from the

771
00:36:58,980 --> 00:37:05,490
other party well if you want to do more

772
00:37:03,450 --> 00:37:07,470
complex computations on information that

773
00:37:05,490 --> 00:37:09,140
you might not know at all

774
00:37:07,470 --> 00:37:12,750
you want something called the

775
00:37:09,140 --> 00:37:23,640
multi-party computation protocol know

776
00:37:12,750 --> 00:37:25,020
about those well hi I'm and then this

777
00:37:23,640 --> 00:37:28,770
doesn't have arrows on it I hope I'm

778
00:37:25,020 --> 00:37:30,540
pressing the right button yes so we just

779
00:37:28,770 --> 00:37:32,160
went through zero knowledge zero

780
00:37:30,540 --> 00:37:34,740
knowledge is amazing and now we're gonna

781
00:37:32,160 --> 00:37:38,100
get into something a little bit while

782
00:37:34,740 --> 00:37:41,399
more general so in zero knowledge we can

783
00:37:38,100 --> 00:37:43,980
prove the truth of a statement and we

784
00:37:41,400 --> 00:37:46,200
won't actually reveal why it's true just

785
00:37:43,980 --> 00:37:47,610
that it's true so let's say we want to

786
00:37:46,200 --> 00:37:48,990
go and do something more than just prove

787
00:37:47,610 --> 00:37:51,240
the truth of a statement we want to

788
00:37:48,990 --> 00:37:52,589
actually compute some function and we

789
00:37:51,240 --> 00:37:54,810
don't want to learn what we're computing

790
00:37:52,590 --> 00:37:55,830
our function on so now we're going to

791
00:37:54,810 --> 00:38:01,440
get into the secure multi-party

792
00:37:55,830 --> 00:38:04,620
computation NPC so for the colors flip

793
00:38:01,440 --> 00:38:06,150
of course for instance maybe you want to

794
00:38:04,620 --> 00:38:09,480
compute parameters for your

795
00:38:06,150 --> 00:38:11,610
cryptocurrency system and you can't let

796
00:38:09,480 --> 00:38:13,860
anyone know about the inputs that you

797
00:38:11,610 --> 00:38:15,420
used so more precisely we don't just

798
00:38:13,860 --> 00:38:17,490
want to compute parameters we want to do

799
00:38:15,420 --> 00:38:19,620
it securely in a way that everyone could

800
00:38:17,490 --> 00:38:23,370
verify there's been a number of other

801
00:38:19,620 --> 00:38:26,819
NPC applications several business cases

802
00:38:23,370 --> 00:38:30,270
things protecting keys analysis of

803
00:38:26,820 --> 00:38:34,050
sociological data but you know this one

804
00:38:30,270 --> 00:38:37,590
seems reasonable but there is there's a

805
00:38:34,050 --> 00:38:39,420
bit of an issue here we're gonna compute

806
00:38:37,590 --> 00:38:41,700
a function but unlike in our zero

807
00:38:39,420 --> 00:38:43,080
knowledge case here we actually are

808
00:38:41,700 --> 00:38:45,480
going to have to reveal something about

809
00:38:43,080 --> 00:38:48,600
the input because we computed a function

810
00:38:45,480 --> 00:38:50,700
of it may be an average or we

811
00:38:48,600 --> 00:38:54,360
exponentiated something so it's actually

812
00:38:50,700 --> 00:38:54,580
a little bit less straightforward what

813
00:38:54,360 --> 00:38:56,380
we

814
00:38:54,580 --> 00:38:59,319
actually mean when we say we're gonna do

815
00:38:56,380 --> 00:39:00,430
that securely and this is if you take

816
00:38:59,320 --> 00:39:05,350
one thing away from this part of the

817
00:39:00,430 --> 00:39:08,230
talk this should be it so the intuition

818
00:39:05,350 --> 00:39:10,839
here is we're going to basically divide

819
00:39:08,230 --> 00:39:14,740
our thinking about this into two things

820
00:39:10,840 --> 00:39:16,720
one is what we actually do this is some

821
00:39:14,740 --> 00:39:20,200
number of parties sending messages to

822
00:39:16,720 --> 00:39:22,480
each other using cryptography and one is

823
00:39:20,200 --> 00:39:23,799
what we really wish we could have which

824
00:39:22,480 --> 00:39:26,800
is this world where we actually have

825
00:39:23,800 --> 00:39:28,930
this trustworthy party that never cheats

826
00:39:26,800 --> 00:39:30,970
and always protects our secrets and

827
00:39:28,930 --> 00:39:32,410
can't be hacked that will just compute

828
00:39:30,970 --> 00:39:34,029
the function for us and make sure that

829
00:39:32,410 --> 00:39:36,940
everyone will only learn what they were

830
00:39:34,030 --> 00:39:39,700
supposed to learn and so our intuition

831
00:39:36,940 --> 00:39:42,160
is to say well our real protocol that

832
00:39:39,700 --> 00:39:43,990
we're running should basically look the

833
00:39:42,160 --> 00:39:47,080
same as if we were in this ideal world

834
00:39:43,990 --> 00:39:50,410
now clearly it doesn't because the api's

835
00:39:47,080 --> 00:39:52,720
are totally different and so we'll argue

836
00:39:50,410 --> 00:39:56,350
it by basically putting one or more

837
00:39:52,720 --> 00:39:59,319
parties into this box and we'll say that

838
00:39:56,350 --> 00:40:01,630
inside this box we can sort of simulate

839
00:39:59,320 --> 00:40:02,980
a real protocol but then in reality

840
00:40:01,630 --> 00:40:05,350
actually just interact with this

841
00:40:02,980 --> 00:40:07,630
trustworthy party and if we can do that

842
00:40:05,350 --> 00:40:09,220
then none of the parties can really tell

843
00:40:07,630 --> 00:40:10,900
whether or not there's the trustworthy

844
00:40:09,220 --> 00:40:12,669
party or in other words they can't do

845
00:40:10,900 --> 00:40:14,920
anything more with the real protocol

846
00:40:12,670 --> 00:40:18,280
then they could do if we had that

847
00:40:14,920 --> 00:40:21,220
amazing non-existent thing and so in a

848
00:40:18,280 --> 00:40:23,890
sense the most you could do in the real

849
00:40:21,220 --> 00:40:25,990
protocol is just lie about your inputs

850
00:40:23,890 --> 00:40:28,379
claim you're a billionaire when you

851
00:40:25,990 --> 00:40:31,359
actually have no money whatever it is

852
00:40:28,380 --> 00:40:32,950
and you know in some settings maybe we

853
00:40:31,360 --> 00:40:35,080
build into the protocol way to certify

854
00:40:32,950 --> 00:40:39,270
the inputs and then hopefully everyone's

855
00:40:35,080 --> 00:40:43,000
secure so that's that's our intuition

856
00:40:39,270 --> 00:40:46,330
it's a little general so since we have a

857
00:40:43,000 --> 00:40:48,400
tiny bit of time I know it's late we can

858
00:40:46,330 --> 00:40:50,860
talk a bit about how we might do this so

859
00:40:48,400 --> 00:40:53,020
this is a basic strategy for creating

860
00:40:50,860 --> 00:40:55,960
these so first what we'll do is we'll

861
00:40:53,020 --> 00:40:58,380
create a sort of simpler protocol where

862
00:40:55,960 --> 00:41:01,690
we just make this assumption that

863
00:40:58,380 --> 00:41:05,140
everyone does exactly what they were

864
00:41:01,690 --> 00:41:06,670
supposed to do and then we'll just add

865
00:41:05,140 --> 00:41:07,990
some additional stuff to make sure they

866
00:41:06,670 --> 00:41:09,790
really did that

867
00:41:07,990 --> 00:41:11,890
and of course what when we use we'll

868
00:41:09,790 --> 00:41:14,290
just use zero knowledge proof because

869
00:41:11,890 --> 00:41:15,430
all we need to do is prove that we did

870
00:41:14,290 --> 00:41:16,960
the thing we did in other words the

871
00:41:15,430 --> 00:41:19,710
message I sent was the message I was

872
00:41:16,960 --> 00:41:23,140
supposed to send at that point so

873
00:41:19,710 --> 00:41:24,460
naturally fits right in and now we're

874
00:41:23,140 --> 00:41:26,680
going to very quickly go through some

875
00:41:24,460 --> 00:41:28,390
math we're going to create one protocol

876
00:41:26,680 --> 00:41:31,089
that will compute all functions and

877
00:41:28,390 --> 00:41:32,920
we'll do it securely so first we're

878
00:41:31,089 --> 00:41:35,440
going to create a sub protocol called an

879
00:41:32,920 --> 00:41:37,570
oblivious transfer one party will have

880
00:41:35,440 --> 00:41:39,280
some set of secret strings and the other

881
00:41:37,570 --> 00:41:41,890
party will just have an index into that

882
00:41:39,280 --> 00:41:43,420
set and the idea is that you'll get to

883
00:41:41,890 --> 00:41:45,310
learn one string if you're the receiver

884
00:41:43,420 --> 00:41:47,589
and nothing else and the sender won't

885
00:41:45,310 --> 00:41:51,339
learn which one you learned simple

886
00:41:47,589 --> 00:41:53,109
enough so we'll start the protocol by

887
00:41:51,339 --> 00:41:54,970
computing what are called XOR shares of

888
00:41:53,109 --> 00:41:57,130
our inputs so for all of my input bits

889
00:41:54,970 --> 00:41:58,959
I'll just choose a random bit create a

890
00:41:57,130 --> 00:42:01,119
one-time pad encryption of it and then

891
00:41:58,960 --> 00:42:04,240
I'll keep the random bit for my self and

892
00:42:01,119 --> 00:42:06,000
send you my input bit XOR that

893
00:42:04,240 --> 00:42:08,919
vice-versa so it doesn't really matter

894
00:42:06,000 --> 00:42:10,869
everyone will do that note that now for

895
00:42:08,920 --> 00:42:13,839
all of our input wires if both parties

896
00:42:10,869 --> 00:42:17,050
in this two party setting XOR the shares

897
00:42:13,839 --> 00:42:18,430
they will have the actual inputs and now

898
00:42:17,050 --> 00:42:20,560
we'll just use our oblivious transfer

899
00:42:18,430 --> 00:42:22,750
protocol as follows if we want to

900
00:42:20,560 --> 00:42:25,509
compute a NAND gate well one of the

901
00:42:22,750 --> 00:42:27,910
parties will just take their two shares

902
00:42:25,510 --> 00:42:30,220
and they'll multiply them and I'll say

903
00:42:27,910 --> 00:42:32,259
well I can create my output share and

904
00:42:30,220 --> 00:42:34,180
there's sort of four things that the

905
00:42:32,260 --> 00:42:36,520
other party could potentially need they

906
00:42:34,180 --> 00:42:38,520
only want one of them ok that's where

907
00:42:36,520 --> 00:42:41,140
our oblivious transfer will come in and

908
00:42:38,520 --> 00:42:43,359
then the other party of course can

909
00:42:41,140 --> 00:42:45,460
locally compute something where if they

910
00:42:43,359 --> 00:42:48,490
just get the right thing from me they

911
00:42:45,460 --> 00:42:49,720
can subtract it off they're done sorry I

912
00:42:48,490 --> 00:42:50,290
know it's quick I know it's late we're

913
00:42:49,720 --> 00:42:55,618
running out of time

914
00:42:50,290 --> 00:42:55,619
I hence 1 2 4 OT

915
00:42:56,859 --> 00:43:01,119
okay so now we have extra shares of the

916
00:42:59,469 --> 00:43:03,190
output we can string them together to

917
00:43:01,119 --> 00:43:05,200
get more and gates and then we can build

918
00:43:03,190 --> 00:43:07,269
a circuit turns out we have XOR shares

919
00:43:05,200 --> 00:43:09,578
if we XOR them with two shares with each

920
00:43:07,269 --> 00:43:12,459
other we just get a share of the XOR of

921
00:43:09,579 --> 00:43:14,700
the two inputs so and gates and XOR

922
00:43:12,459 --> 00:43:17,680
gates are enough to compute anything

923
00:43:14,700 --> 00:43:18,759
that may not be obvious but if you think

924
00:43:17,680 --> 00:43:20,410
about it you'll realize you can

925
00:43:18,759 --> 00:43:22,089
construct a NAND gate and go back to

926
00:43:20,410 --> 00:43:26,078
basic electronics a NAND gate is

927
00:43:22,089 --> 00:43:28,299
universal okay so we can also then

928
00:43:26,079 --> 00:43:30,430
extend it to more parties will just sort

929
00:43:28,299 --> 00:43:32,529
our names alphabetically and if you come

930
00:43:30,430 --> 00:43:34,839
before me I'll be a sender and if you

931
00:43:32,529 --> 00:43:38,650
come after me I'll be a receiver we XOR

932
00:43:34,839 --> 00:43:42,729
everything together we're done and that

933
00:43:38,650 --> 00:43:45,839
is the basic result in NP see you can

934
00:43:42,729 --> 00:43:48,578
read more about it it's from 1987 and

935
00:43:45,839 --> 00:43:51,489
the really cool thing about it that's

936
00:43:48,579 --> 00:43:53,369
probably gonna sound a little strange is

937
00:43:51,489 --> 00:43:55,509
that no matter how many parties you have

938
00:43:53,369 --> 00:43:58,239
you only need one of them to be honest

939
00:43:55,509 --> 00:44:01,390
so in a sense adding more parties to

940
00:43:58,239 --> 00:44:04,630
your system improves its security which

941
00:44:01,390 --> 00:44:07,029
is usually not the case the downside

942
00:44:04,630 --> 00:44:08,849
this is purely a theoretical result if

943
00:44:07,029 --> 00:44:10,599
you actually try to implement it

944
00:44:08,849 --> 00:44:13,150
complete with all the zero knowledge

945
00:44:10,599 --> 00:44:18,160
proof you would probably not be happy

946
00:44:13,150 --> 00:44:20,019
with how long it takes to finish the

947
00:44:18,160 --> 00:44:21,759
good news there are way more efficient

948
00:44:20,019 --> 00:44:23,348
NPC protocols a lot of them

949
00:44:21,759 --> 00:44:25,660
purpose-built for situations where

950
00:44:23,349 --> 00:44:27,190
they've really been deployed and you

951
00:44:25,660 --> 00:44:30,999
know in the interest of time we will not

952
00:44:27,190 --> 00:44:33,459
get into that and with that I will

953
00:44:30,999 --> 00:44:35,578
return the mic to George and get out of

954
00:44:33,459 --> 00:44:35,578
here

955
00:44:37,339 --> 00:44:48,199
alright thanks Ben so just to be clear

956
00:44:42,989 --> 00:44:51,049
are to surprise speakers tonight we're

957
00:44:48,199 --> 00:44:54,299
Jack who works on zero knowledge proof

958
00:44:51,049 --> 00:44:56,390
for real anonymous internet money that

959
00:44:54,299 --> 00:45:02,309
you could go by today if you wanted to

960
00:44:56,390 --> 00:45:04,799
and Ben who works on MPC like super for

961
00:45:02,309 --> 00:45:07,309
real we kind of figured that you might

962
00:45:04,799 --> 00:45:09,989
enjoy hearing about the details of this

963
00:45:07,309 --> 00:45:16,159
undeploy able magic math from people who

964
00:45:09,989 --> 00:45:30,649
have actually deployed it come on

965
00:45:16,159 --> 00:45:33,599
but but yeah do you remember though

966
00:45:30,649 --> 00:45:40,140
we're still just some cryptographers and

967
00:45:33,599 --> 00:45:41,669
not your cryptographers thank you I not

968
00:45:40,140 --> 00:45:47,449
sure if we have time for questions

969
00:45:41,669 --> 00:45:47,449
possibly one questions up nope

970
00:45:47,809 --> 00:45:54,869
at zero knowledge commitment to the

971
00:45:50,309 --> 00:45:58,649
answer of whether we can okay we're

972
00:45:54,869 --> 00:46:01,219
going to yield the Q and a mic if we can

973
00:45:58,649 --> 00:46:01,219
get this one

974
00:46:06,560 --> 00:46:10,790
so what exactly is the scale of not

975
00:46:08,900 --> 00:46:12,890
being happy with the computability of

976
00:46:10,790 --> 00:46:14,750
the results is it like he death the

977
00:46:12,890 --> 00:46:20,930
universe or is it gonna hurt my credit

978
00:46:14,750 --> 00:46:22,940
card bill on GCP yeah so the question

979
00:46:20,930 --> 00:46:24,410
was when I said it you will not be happy

980
00:46:22,940 --> 00:46:26,690
with how long things take what do I

981
00:46:24,410 --> 00:46:27,980
really mean I mean yes you will go

982
00:46:26,690 --> 00:46:32,300
bankrupt if you're using a cloud

983
00:46:27,980 --> 00:46:33,890
provider and you may be waiting until

984
00:46:32,300 --> 00:46:37,280
your grandchildren are around depending

985
00:46:33,890 --> 00:46:38,750
on the function I mean okay for this

986
00:46:37,280 --> 00:46:39,950
simple version where you assume everyone

987
00:46:38,750 --> 00:46:43,160
behaves honestly it's actually

988
00:46:39,950 --> 00:46:46,250
reasonable there's been a lot of work on

989
00:46:43,160 --> 00:46:48,290
making these things more efficient in

990
00:46:46,250 --> 00:46:51,320
the multi-party case there's been some

991
00:46:48,290 --> 00:46:52,910
work from Nigel smart and his grad

992
00:46:51,320 --> 00:46:55,610
students and postdocs on something

993
00:46:52,910 --> 00:46:58,580
called speeds which is really impressive

994
00:46:55,610 --> 00:47:01,670
they do like AES encryption online with

995
00:46:58,580 --> 00:47:03,319
ten parties in like that in the two

996
00:47:01,670 --> 00:47:05,030
party case there's garbled circuits for

997
00:47:03,320 --> 00:47:08,830
which there is a mountain of research

998
00:47:05,030 --> 00:47:12,140
and possibly some practical deployments

999
00:47:08,830 --> 00:47:14,900
so yeah so what I showed was really just

1000
00:47:12,140 --> 00:47:17,980
a theoretical result but it's a lot of

1001
00:47:14,900 --> 00:47:20,750
fun if you want to try to implement it

1002
00:47:17,980 --> 00:47:22,370
yeah so I was a little bit confused

1003
00:47:20,750 --> 00:47:24,830
about something in the description of a

1004
00:47:22,370 --> 00:47:28,130
blind signature specifically the number

1005
00:47:24,830 --> 00:47:30,980
R this blinding factor that is at first

1006
00:47:28,130 --> 00:47:34,040
only known to the buyer yeah that

1007
00:47:30,980 --> 00:47:37,310
correct the question is who knows R and

1008
00:47:34,040 --> 00:47:40,670
when yeah and yeah the the answer is

1009
00:47:37,310 --> 00:47:43,009
it's it's generated by the by the by the

1010
00:47:40,670 --> 00:47:45,530
reveal to the bank or or by whoever

1011
00:47:43,010 --> 00:47:47,360
wants to withdraw from the right part of

1012
00:47:45,530 --> 00:47:50,800
the withdrawal perspect you said you

1013
00:47:47,360 --> 00:47:54,920
want to generate the inverse of r and

1014
00:47:50,800 --> 00:47:57,860
the like in the exponents of that but

1015
00:47:54,920 --> 00:48:02,090
for that don't you need a fee like I

1016
00:47:57,860 --> 00:48:04,220
said you when talking about the number

1017
00:48:02,090 --> 00:48:06,380
theory of RSA you want to maintain firm

1018
00:48:04,220 --> 00:48:10,430
eye contact for as long as you can and

1019
00:48:06,380 --> 00:48:12,590
back away slowly like a Fanta Center

1020
00:48:10,430 --> 00:48:15,230
correctly if you know fee you can derive

1021
00:48:12,590 --> 00:48:17,600
P - it's basically P minus 1 times Q

1022
00:48:15,230 --> 00:48:20,000
minus 1 and then you can use that to

1023
00:48:17,600 --> 00:48:20,450
factor it quickly so the buyer should

1024
00:48:20,000 --> 00:48:23,300
never know

1025
00:48:20,450 --> 00:48:25,098
Phee yep so how do we get one over R I

1026
00:48:23,300 --> 00:48:29,930
am happy to show you some code after

1027
00:48:25,099 --> 00:48:31,609
okay okay all right so the prog refers

1028
00:48:29,930 --> 00:48:33,740
will pile in the back of the room later

1029
00:48:31,609 --> 00:48:34,940
in the oh yeah say what no dumb-guy I

1030
00:48:33,740 --> 00:48:36,410
wasn't trying to interrupt and say you

1031
00:48:34,940 --> 00:48:38,480
can you can keep talking after the

1032
00:48:36,410 --> 00:48:40,129
hopefully as well I just that the real

1033
00:48:38,480 --> 00:48:41,780
answer is like there have been times in

1034
00:48:40,130 --> 00:48:44,000
my life when I've understood like the

1035
00:48:41,780 --> 00:48:53,680
number theory of RSA but it really comes

1036
00:48:44,000 --> 00:48:53,680
and goes if not straight forward here

1037
00:48:54,339 --> 00:49:02,450
except possibly Ian Goldberg does

1038
00:48:59,839 --> 00:49:04,490
anybody have an example of anonymous

1039
00:49:02,450 --> 00:49:18,859
internet money that can be purchased

1040
00:49:04,490 --> 00:49:23,779
today well have you heard of Z cash yeah

1041
00:49:18,859 --> 00:49:25,520
so we it was deployed and using the

1042
00:49:23,780 --> 00:49:28,250
protocol that I put up there was what we

1043
00:49:25,520 --> 00:49:32,230
deployed in the end of 2016 the

1044
00:49:28,250 --> 00:49:37,180
Pinocchio protocol and was used to

1045
00:49:32,230 --> 00:49:42,829
implement Bitcoin style you take so

1046
00:49:37,180 --> 00:49:44,118
currency with no information leaks well

1047
00:49:42,829 --> 00:49:47,599
as little information as you can

1048
00:49:44,119 --> 00:49:49,040
feasibly do this isn't actually the

1049
00:49:47,599 --> 00:49:51,410
state-of-the-art anymore in the

1050
00:49:49,040 --> 00:49:56,119
subsequent two years there's been work

1051
00:49:51,410 --> 00:49:58,129
on new update to it and using a lovely

1052
00:49:56,119 --> 00:50:01,400
proving system developed by yen's growth

1053
00:49:58,130 --> 00:50:02,930
that you from UCL in London and that

1054
00:50:01,400 --> 00:50:04,609
gets us like a two times performance

1055
00:50:02,930 --> 00:50:05,930
improvement and then we have at least

1056
00:50:04,609 --> 00:50:08,690
another ten times performance

1057
00:50:05,930 --> 00:50:13,759
improvement just from way too much

1058
00:50:08,690 --> 00:50:16,520
engineering but yeah we this stuff is

1059
00:50:13,760 --> 00:50:18,619
now down to it used to take about three

1060
00:50:16,520 --> 00:50:21,440
gigabytes of memory to produce now it's

1061
00:50:18,619 --> 00:50:22,970
down to 40 megabytes and though that

1062
00:50:21,440 --> 00:50:25,369
couple of minutes of processing on a on

1063
00:50:22,970 --> 00:50:27,078
a slow laptop or 35 40 seconds and a

1064
00:50:25,369 --> 00:50:30,050
decent machine is down to couple of

1065
00:50:27,079 --> 00:50:31,940
seconds so yes this this stuff is

1066
00:50:30,050 --> 00:50:34,210
actually out there it's possibly the

1067
00:50:31,940 --> 00:50:42,900
newest cryptography deployed in for

1068
00:50:34,210 --> 00:50:42,900
action seems plausible alright thank you

1069
00:50:46,640 --> 00:51:00,370
oh yes

1070
00:50:52,130 --> 00:51:00,370
crypto meals cryptography thank you

