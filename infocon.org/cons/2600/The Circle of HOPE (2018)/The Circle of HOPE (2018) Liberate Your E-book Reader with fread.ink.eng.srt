1
00:00:00,000 --> 00:00:10,800
is an attempt at Linux gnu/linux this

2
00:00:04,680 --> 00:00:12,178
drew distro for eBook readers and just

3
00:00:10,800 --> 00:00:12,929
so we're clear on what we're talking

4
00:00:12,179 --> 00:00:16,800
about here

5
00:00:12,929 --> 00:00:18,119
ebook readers versus tablets the main

6
00:00:16,800 --> 00:00:21,510
difference is really in the display

7
00:00:18,119 --> 00:00:24,720
inside you know arm system-on-a-chip

8
00:00:21,510 --> 00:00:25,980
some RAM some flash memory but but the

9
00:00:24,720 --> 00:00:31,470
display on these things is kind of

10
00:00:25,980 --> 00:00:32,940
special so why are these EU readers

11
00:00:31,470 --> 00:00:36,750
interesting why should we care about

12
00:00:32,940 --> 00:00:39,920
them well for one thing these displays

13
00:00:36,750 --> 00:00:42,300
enable really low power modes the

14
00:00:39,920 --> 00:00:44,100
electronic paper displays they're

15
00:00:42,300 --> 00:00:46,980
reflective you can view them direct

16
00:00:44,100 --> 00:00:49,079
sunlight and these eBook readers have

17
00:00:46,980 --> 00:00:51,809
been kind of fairly widely distributed

18
00:00:49,079 --> 00:00:53,610
which I'll get into in a bit here on on

19
00:00:51,809 --> 00:00:55,890
the right hand side you can see an

20
00:00:53,610 --> 00:00:58,199
example of people using electronic paper

21
00:00:55,890 --> 00:01:01,739
and for interesting stuff that's not

22
00:00:58,199 --> 00:01:03,660
just ebook reading so this is a bus stop

23
00:01:01,739 --> 00:01:07,289
and in Denmark out in the countryside

24
00:01:03,660 --> 00:01:11,158
with a solar panel on top is probably

25
00:01:07,290 --> 00:01:13,020
like 50 watts or less and it's updating

26
00:01:11,159 --> 00:01:15,750
at least once a minute showing when the

27
00:01:13,020 --> 00:01:16,890
buses are arriving and I assume there's

28
00:01:15,750 --> 00:01:19,950
some kind of cellphone thing inside of

29
00:01:16,890 --> 00:01:22,110
it that that gets the data and in

30
00:01:19,950 --> 00:01:23,520
Denmark in the winter time December

31
00:01:22,110 --> 00:01:27,479
there's seven to seven and a half hours

32
00:01:23,520 --> 00:01:30,030
of daytime and then on average about ten

33
00:01:27,479 --> 00:01:32,340
percent of that is sunny is not clouded

34
00:01:30,030 --> 00:01:33,810
over and so they're able to do that with

35
00:01:32,340 --> 00:01:35,250
a solar panel in a situation like that

36
00:01:33,810 --> 00:01:39,060
that tells you something about how

37
00:01:35,250 --> 00:01:40,619
low-power this is some other low-power

38
00:01:39,060 --> 00:01:42,210
applications people are starting to do

39
00:01:40,619 --> 00:01:45,090
things like your have for a while now

40
00:01:42,210 --> 00:01:47,009
make these price tags that run off

41
00:01:45,090 --> 00:01:49,530
little battery cells and that you can

42
00:01:47,009 --> 00:01:52,829
update remotely so you can go on Al

43
00:01:49,530 --> 00:01:54,180
expression you can find these things and

44
00:01:52,829 --> 00:01:56,729
one of the reasons they're so low power

45
00:01:54,180 --> 00:01:58,799
is that it only cost power to change

46
00:01:56,729 --> 00:02:00,030
what's on the display so you put

47
00:01:58,799 --> 00:02:01,560
something on display you can completely

48
00:02:00,030 --> 00:02:03,210
unplug it and it just stays the way it

49
00:02:01,560 --> 00:02:04,649
was which means you can go into deep

50
00:02:03,210 --> 00:02:06,419
sleep mode every time you're not

51
00:02:04,649 --> 00:02:10,860
updating display or doing anything with

52
00:02:06,420 --> 00:02:13,530
the processor so some downsides these

53
00:02:10,860 --> 00:02:13,890
kinds of displays they are pretty slow

54
00:02:13,530 --> 00:02:16,440
to up

55
00:02:13,890 --> 00:02:18,929
there's a lot of ghosting if you try to

56
00:02:16,440 --> 00:02:20,460
update them quickly and right now

57
00:02:18,930 --> 00:02:24,180
there's no real color displays available

58
00:02:20,460 --> 00:02:25,890
there are these things that have like

59
00:02:24,180 --> 00:02:29,160
black and white or grey tones and one

60
00:02:25,890 --> 00:02:31,529
color you know you guys I think I've

61
00:02:29,160 --> 00:02:33,359
seen them with red and yellow that's

62
00:02:31,530 --> 00:02:35,070
about it and some of the earlier models

63
00:02:33,360 --> 00:02:36,450
they didn't have good contrast I didn't

64
00:02:35,070 --> 00:02:39,630
have any kind of light build in but

65
00:02:36,450 --> 00:02:41,579
that's been solved so what kind of

66
00:02:39,630 --> 00:02:43,560
companies are producing these there's

67
00:02:41,580 --> 00:02:45,090
not that many companies at least not

68
00:02:43,560 --> 00:02:46,950
companies that sell things you can

69
00:02:45,090 --> 00:02:48,990
actually get your hand on it seems like

70
00:02:46,950 --> 00:02:50,850
there's only really two that I've

71
00:02:48,990 --> 00:02:53,489
encountered I want is the Eaton

72
00:02:50,850 --> 00:02:55,410
Corporation and that's accounting from

73
00:02:53,489 --> 00:02:57,600
the majority of the 20 paper displays

74
00:02:55,410 --> 00:02:59,070
out there right now especially all the

75
00:02:57,600 --> 00:03:00,989
ones and the e-book readers are almost

76
00:02:59,070 --> 00:03:02,880
all of them and then it's plastic logic

77
00:03:00,989 --> 00:03:05,310
then they specialize in these bendable

78
00:03:02,880 --> 00:03:08,100
displays that hopefully we'll see more

79
00:03:05,310 --> 00:03:09,570
of soon so what what did I do you say

80
00:03:08,100 --> 00:03:10,739
let's trying paper displays actually

81
00:03:09,570 --> 00:03:12,720
doing how do they work

82
00:03:10,739 --> 00:03:14,900
well if you ever worked in a bio lab you

83
00:03:12,720 --> 00:03:18,420
might have used one of these gel boxes

84
00:03:14,900 --> 00:03:21,150
electrophoresis gel boxes and the idea

85
00:03:18,420 --> 00:03:23,070
with these is you can move proteins or

86
00:03:21,150 --> 00:03:25,260
other kinds of molecules through a gel

87
00:03:23,070 --> 00:03:27,030
by putting a voltage across the gel and

88
00:03:25,260 --> 00:03:30,570
then they separate out based on how fast

89
00:03:27,030 --> 00:03:32,370
they move and and so the inside of these

90
00:03:30,570 --> 00:03:34,560
displays is actually these little balls

91
00:03:32,370 --> 00:03:36,330
these little spheres full of some kind

92
00:03:34,560 --> 00:03:39,180
of oil with little particles that are

93
00:03:36,330 --> 00:03:43,560
black and white and then on the top and

94
00:03:39,180 --> 00:03:46,950
the bottom of the where the balls are

95
00:03:43,560 --> 00:03:48,480
what spheres are there's a way where you

96
00:03:46,950 --> 00:03:50,160
can apply a voltage kind of like an LCD

97
00:03:48,480 --> 00:03:51,690
display you have transparent conductors

98
00:03:50,160 --> 00:03:53,250
that allow you to put positive negative

99
00:03:51,690 --> 00:03:56,760
voltages on the top and the bottom and

100
00:03:53,250 --> 00:03:58,739
so if you put a positive voltage on the

101
00:03:56,760 --> 00:04:00,929
top you get black if you put a negative

102
00:03:58,739 --> 00:04:02,910
you get white and you can kind of do

103
00:04:00,930 --> 00:04:04,380
sub-pixel stuff if you have more

104
00:04:02,910 --> 00:04:06,299
conductors and you have these spheres

105
00:04:04,380 --> 00:04:07,530
you can get a release resolution as

106
00:04:06,299 --> 00:04:09,720
higher than the actual size of the

107
00:04:07,530 --> 00:04:14,880
spheres and of course you can make a

108
00:04:09,720 --> 00:04:19,040
gray tones by mixing let me show a

109
00:04:14,880 --> 00:04:19,040
couple videos so

110
00:04:21,449 --> 00:04:30,680
let me see if I can pull this over so

111
00:04:25,409 --> 00:04:33,599
Scottie down in the harbor hacking area

112
00:04:30,680 --> 00:04:35,610
he had brought this nice microscope that

113
00:04:33,599 --> 00:04:39,870
we used to take a few interesting videos

114
00:04:35,610 --> 00:04:48,180
I see can I get this to show up on the

115
00:04:39,870 --> 00:04:51,240
right display yeah here we go

116
00:04:48,180 --> 00:04:53,249
so here's under a microscope you can see

117
00:04:51,240 --> 00:04:54,659
these little spheres that's they're not

118
00:04:53,249 --> 00:04:56,370
actually perfect spheres as you can see

119
00:04:54,659 --> 00:04:57,629
you can see these little things and you

120
00:04:56,370 --> 00:04:59,159
can see what happens when you try to

121
00:04:57,629 --> 00:05:00,870
update you can see there's a lot of

122
00:04:59,159 --> 00:05:03,180
Bremen's being left behind when you try

123
00:05:00,870 --> 00:05:04,969
to update the display and which is one

124
00:05:03,180 --> 00:05:08,389
of the weaknesses of these things and

125
00:05:04,969 --> 00:05:08,389
let me do another one

126
00:05:17,300 --> 00:05:21,980
so you can see it quick pretty quickly

127
00:05:19,310 --> 00:05:23,500
he gets almost unreadable if you just

128
00:05:21,980 --> 00:05:27,070
update quickly and don't care about

129
00:05:23,500 --> 00:05:27,070
trying to make it pretty

130
00:05:28,450 --> 00:05:33,289
alright so so why do you want to

131
00:05:31,970 --> 00:05:35,030
liberate these things why is that

132
00:05:33,290 --> 00:05:36,830
interesting why not just use them as is

133
00:05:35,030 --> 00:05:39,140
well first of all because free all the

134
00:05:36,830 --> 00:05:41,120
things we should have control over what

135
00:05:39,140 --> 00:05:43,010
we what we own we should be able to run

136
00:05:41,120 --> 00:05:45,320
whatever we want

137
00:05:43,010 --> 00:05:47,150
another thing is that there's a degree

138
00:05:45,320 --> 00:05:49,460
of corporate control on these readers

139
00:05:47,150 --> 00:05:52,130
there's there's an interesting case some

140
00:05:49,460 --> 00:05:56,960
years ago where people had bought a book

141
00:05:52,130 --> 00:05:58,010
from Amazon DRM de book and suddenly it

142
00:05:56,960 --> 00:06:00,020
just disappeared from their devices

143
00:05:58,010 --> 00:06:01,190
Amazon simply revoked it because they

144
00:06:00,020 --> 00:06:04,810
realized they didn't have the rights to

145
00:06:01,190 --> 00:06:07,580
actually sell the book it was kind of

146
00:06:04,810 --> 00:06:13,910
amusing that the book that they removed

147
00:06:07,580 --> 00:06:15,260
was 1984 but of course so if that's a

148
00:06:13,910 --> 00:06:16,940
problem I think they said they wouldn't

149
00:06:15,260 --> 00:06:17,990
do that anymore but you know what are

150
00:06:16,940 --> 00:06:19,360
they actually gonna do if they don't

151
00:06:17,990 --> 00:06:21,860
have the rights I guess go and buy them

152
00:06:19,360 --> 00:06:23,420
and that the point is that they have

153
00:06:21,860 --> 00:06:26,060
that ability even if they pledged not to

154
00:06:23,420 --> 00:06:27,760
use it so you don't really own what's on

155
00:06:26,060 --> 00:06:30,560
your device even if you paid for it and

156
00:06:27,760 --> 00:06:33,380
then there's the aspect of DRM and you

157
00:06:30,560 --> 00:06:35,750
buy stuff off let's say the Amazon store

158
00:06:33,380 --> 00:06:37,460
and a lot of this DRM so you can't share

159
00:06:35,750 --> 00:06:41,240
with your friends that's terrible and

160
00:06:37,460 --> 00:06:42,979
then surveillance several of these eBook

161
00:06:41,240 --> 00:06:44,780
readers they actually log what you're

162
00:06:42,980 --> 00:06:47,180
doing what you're buying what kind of

163
00:06:44,780 --> 00:06:49,250
books you're reading even hunt like how

164
00:06:47,180 --> 00:06:50,780
much time you spend on each page could

165
00:06:49,250 --> 00:06:53,240
be logged and we don't really know if

166
00:06:50,780 --> 00:06:56,419
that's sent to the corporate overlords

167
00:06:53,240 --> 00:06:58,880
it's good why wouldn't it be and then of

168
00:06:56,420 --> 00:07:00,440
course these things are at least for

169
00:06:58,880 --> 00:07:02,750
some companies to sell in like Amazon

170
00:07:00,440 --> 00:07:04,880
they're easily sold as a way to sell

171
00:07:02,750 --> 00:07:06,800
books so they'll sell you books so there

172
00:07:04,880 --> 00:07:09,740
is a closed marketplace so you can only

173
00:07:06,800 --> 00:07:11,240
buy from the company at least on the

174
00:07:09,740 --> 00:07:13,970
device you can only buy from the company

175
00:07:11,240 --> 00:07:15,320
who sold you the device and last but not

176
00:07:13,970 --> 00:07:16,820
least there's no way to install your own

177
00:07:15,320 --> 00:07:18,890
apps which is terrible we want to be

178
00:07:16,820 --> 00:07:20,870
able to use them for things that are not

179
00:07:18,890 --> 00:07:22,700
ebook reading there's all these other

180
00:07:20,870 --> 00:07:27,170
things we could do with these displays

181
00:07:22,700 --> 00:07:29,240
and these little nice devices so how

182
00:07:27,170 --> 00:07:31,100
many of these are actually out there

183
00:07:29,240 --> 00:07:33,410
well it's hard to get numbers on this

184
00:07:31,100 --> 00:07:35,930
most these companies don't publish any

185
00:07:33,410 --> 00:07:37,880
sales numbers so I just searched around

186
00:07:35,930 --> 00:07:39,860
a bit and I've got some numbers with pew

187
00:07:37,880 --> 00:07:42,199
and some numbers from the site called

188
00:07:39,860 --> 00:07:45,410
statisti and a lot of stuff is just

189
00:07:42,199 --> 00:07:47,539
online and surveys so and take it with a

190
00:07:45,410 --> 00:07:49,509
huge grain of salt but at least for the

191
00:07:47,539 --> 00:07:52,039
first number here we have some different

192
00:07:49,509 --> 00:07:54,199
numbers that aren't or some somewhat in

193
00:07:52,039 --> 00:07:57,080
the same ballpark that maybe there is

194
00:07:54,199 --> 00:07:59,060
around somewhere between 19 and 32% of

195
00:07:57,080 --> 00:08:02,830
US adults who claim to own one an

196
00:07:59,060 --> 00:08:06,830
e-reader at least one and then maybe

197
00:08:02,830 --> 00:08:09,469
about 72% of them are actually owning a

198
00:08:06,830 --> 00:08:12,080
Kindle so that's quite a lot of people

199
00:08:09,470 --> 00:08:15,770
who own a Kindle and then it seems like

200
00:08:12,080 --> 00:08:17,300
in 2011 the sale these things peaked and

201
00:08:15,770 --> 00:08:19,520
after that it's kind of been taken over

202
00:08:17,300 --> 00:08:24,139
a bit by sales of other devices like

203
00:08:19,520 --> 00:08:25,789
smartphones and tablets so if we want to

204
00:08:24,139 --> 00:08:27,169
figure out which device that's the most

205
00:08:25,789 --> 00:08:29,539
commonly owned maybe we should look at

206
00:08:27,169 --> 00:08:31,789
what was sold in 2011 and it seemed like

207
00:08:29,539 --> 00:08:33,620
I found this number for Germany it seems

208
00:08:31,789 --> 00:08:38,750
like a lot more Germans have eBook

209
00:08:33,620 --> 00:08:42,140
readers than Americans okay so what was

210
00:08:38,750 --> 00:08:44,329
sold in 2011 so for Christmas 2011 the

211
00:08:42,140 --> 00:08:46,310
current generation Kindles were these

212
00:08:44,329 --> 00:08:48,680
two things to touch a non-touch version

213
00:08:46,310 --> 00:08:50,089
of the fourth generation Kindle so maybe

214
00:08:48,680 --> 00:08:51,439
that's something we should look at it's

215
00:08:50,089 --> 00:08:52,880
probably the most common one that's out

216
00:08:51,440 --> 00:08:54,230
there and maybe also a lot of people

217
00:08:52,880 --> 00:08:55,490
upgrade this instance so maybe they're

218
00:08:54,230 --> 00:08:59,209
just lying around not being used for

219
00:08:55,490 --> 00:09:02,180
anything so what's actually inside of

220
00:08:59,209 --> 00:09:04,459
these well it for the Kindles if you

221
00:09:02,180 --> 00:09:07,370
look at it every Kindle except the very

222
00:09:04,459 --> 00:09:12,319
first one are using these Freescale IMX

223
00:09:07,370 --> 00:09:14,510
chipsets and if you if we didn't go and

224
00:09:12,320 --> 00:09:16,910
look at the Kobo which is another

225
00:09:14,510 --> 00:09:19,250
company that makes readers again we see

226
00:09:16,910 --> 00:09:20,630
that at least for the ones we have data

227
00:09:19,250 --> 00:09:23,660
for and this thing I stole from

228
00:09:20,630 --> 00:09:26,720
Wikipedia it's it's all the same

229
00:09:23,660 --> 00:09:30,140
Freescale IMX and if we look at the

230
00:09:26,720 --> 00:09:31,370
Barnes and Noble Nook previously they

231
00:09:30,140 --> 00:09:35,470
used two other processors but the last

232
00:09:31,370 --> 00:09:35,470
two generations again it's Freescale IMX

233
00:09:35,649 --> 00:09:41,029
so why is everyone using this why did

234
00:09:38,750 --> 00:09:42,649
everyone go with dynamics well prior to

235
00:09:41,029 --> 00:09:44,930
the mx-5 I

236
00:09:42,649 --> 00:09:47,360
don't know why people are using it but

237
00:09:44,930 --> 00:09:49,638
from I am x5 and up the reason is very

238
00:09:47,360 --> 00:09:51,410
clear it's because in order to drive

239
00:09:49,639 --> 00:09:54,110
these electronic paper displays you need

240
00:09:51,410 --> 00:09:58,279
an electronic paper displays or electro

241
00:09:54,110 --> 00:10:00,589
phoretic display controller and they

242
00:09:58,279 --> 00:10:02,449
used to put those side by side with the

243
00:10:00,589 --> 00:10:03,980
chipset so then you know the chip for

244
00:10:02,449 --> 00:10:06,618
and they used to use these Epson ones at

245
00:10:03,980 --> 00:10:09,619
least in the Kindles but the mx-5 and up

246
00:10:06,619 --> 00:10:11,809
you can actually get these IMX chipsets

247
00:10:09,619 --> 00:10:15,949
the system ownership that includes the

248
00:10:11,809 --> 00:10:18,860
PDC on the ship so you save a chip

249
00:10:15,949 --> 00:10:20,359
that's great the initial target I chose

250
00:10:18,860 --> 00:10:21,800
is the fifth generation which is

251
00:10:20,360 --> 00:10:23,329
expected the same as the fourth

252
00:10:21,800 --> 00:10:27,829
generation except for the color as far

253
00:10:23,329 --> 00:10:29,269
as I can tell so let's move on let's put

254
00:10:27,829 --> 00:10:33,949
some self around this let's see we can

255
00:10:29,269 --> 00:10:36,019
put some free stuff ok first what's

256
00:10:33,949 --> 00:10:37,609
available from Amazon if there's any GPL

257
00:10:36,019 --> 00:10:39,860
stuff on there they are supposed to make

258
00:10:37,610 --> 00:10:41,660
it freely available so if you search

259
00:10:39,860 --> 00:10:43,759
around a bit you find this this website

260
00:10:41,660 --> 00:10:45,379
pages on the day like this like the Help

261
00:10:43,759 --> 00:10:48,050
section that says source code notice is

262
00:10:45,379 --> 00:10:51,230
not very well advertised but it's there

263
00:10:48,050 --> 00:10:53,660
and if you scroll down we see for every

264
00:10:51,230 --> 00:10:58,629
single Kindle they ever created there's

265
00:10:53,660 --> 00:11:02,050
a bunch of tarballs interesting let's

266
00:10:58,629 --> 00:11:02,050
have a look at that

267
00:11:10,640 --> 00:11:13,910
I don't know Matt you can see there but

268
00:11:12,560 --> 00:11:15,589
let's just have a look at what's inside

269
00:11:13,910 --> 00:11:20,810
the tower walls so here's the table wall

270
00:11:15,589 --> 00:11:22,519
from the fourth generation and we see

271
00:11:20,810 --> 00:11:26,180
all these packages with well-known names

272
00:11:22,519 --> 00:11:28,339
software probably already use and know

273
00:11:26,180 --> 00:11:31,699
about we see a u-boot that's great

274
00:11:28,339 --> 00:11:33,709
that's something we need and then there

275
00:11:31,700 --> 00:11:35,660
is a Linux way that's a pretty old

276
00:11:33,709 --> 00:11:38,229
current also but that's probably not

277
00:11:35,660 --> 00:11:41,269
very good but at least it's there

278
00:11:38,230 --> 00:11:44,810
looking at the next one up the fifth

279
00:11:41,269 --> 00:11:47,660
generation release there's there's this

280
00:11:44,810 --> 00:11:49,660
additional package awesome I don't know

281
00:11:47,660 --> 00:11:52,910
if anyone does anyone here use awesome

282
00:11:49,660 --> 00:11:56,569
yeah so awesome is a window manager and

283
00:11:52,910 --> 00:11:57,920
is very aptly named it was very

284
00:11:56,570 --> 00:11:59,990
interesting is kind of a developers

285
00:11:57,920 --> 00:12:02,410
programmers window manager so I wonder

286
00:11:59,990 --> 00:12:09,860
why they're using like that

287
00:12:02,410 --> 00:12:11,540
okay what do we learn from the source

288
00:12:09,860 --> 00:12:15,470
code looking around source code we learn

289
00:12:11,540 --> 00:12:17,839
that it's developed by a company owned

290
00:12:15,470 --> 00:12:20,120
by Amazon called lab 126 why is it

291
00:12:17,839 --> 00:12:24,740
called lab 126 if you looked at oh sorry

292
00:12:20,120 --> 00:12:26,269
you can't see what I'm doing here we go

293
00:12:24,740 --> 00:12:27,890
if you look at the Amazon logo you'll

294
00:12:26,269 --> 00:12:30,050
see an arrow pointing from the a to the

295
00:12:27,890 --> 00:12:32,540
Z and of course a is the first letter of

296
00:12:30,050 --> 00:12:33,949
the English alphabet and Z is the 26th

297
00:12:32,540 --> 00:12:41,689
that's where you're like wondering six

298
00:12:33,949 --> 00:12:44,420
times from so well okay and so I went

299
00:12:41,690 --> 00:12:46,130
through this recruiting event for people

300
00:12:44,420 --> 00:12:47,149
for Amazon to in order to talk to them

301
00:12:46,130 --> 00:12:49,820
and figure them out more about the

302
00:12:47,149 --> 00:12:51,470
system and it's actually kind of kind of

303
00:12:49,820 --> 00:12:54,350
a funny thing I don't know if this has a

304
00:12:51,470 --> 00:12:56,540
name this technique but I put some

305
00:12:54,350 --> 00:12:58,070
interesting keywords that match the kind

306
00:12:56,540 --> 00:12:59,990
of stuff I was interested in from Amazon

307
00:12:58,070 --> 00:13:02,029
from the eBook readers on my LinkedIn

308
00:12:59,990 --> 00:13:04,430
profile and then I waited and then they

309
00:13:02,029 --> 00:13:05,829
contacted me and said hey would you like

310
00:13:04,430 --> 00:13:08,569
to come to this recruiting events

311
00:13:05,829 --> 00:13:09,859
there's free beer and so I went to the

312
00:13:08,570 --> 00:13:12,440
recruiting event and I talked to the

313
00:13:09,860 --> 00:13:15,709
engineers and I was very disappointed

314
00:13:12,440 --> 00:13:18,589
when I was free beer but there are no

315
00:13:15,709 --> 00:13:22,029
Kindle developers because they outsource

316
00:13:18,589 --> 00:13:22,029
the entire department to India

317
00:13:22,249 --> 00:13:26,129
so the codename for the looking at his

318
00:13:24,870 --> 00:13:28,499
code we learned that the code name is

319
00:13:26,129 --> 00:13:30,029
Yoshi and there's all these interesting

320
00:13:28,499 --> 00:13:31,860
code names for his different products

321
00:13:30,029 --> 00:13:32,759
that are good to know then we also

322
00:13:31,860 --> 00:13:34,709
learned that there's two different

323
00:13:32,759 --> 00:13:35,910
versions that we just saw it a little

324
00:13:34,709 --> 00:13:37,709
bit with the awesome being in one

325
00:13:35,910 --> 00:13:40,170
package and at the other so they used to

326
00:13:37,709 --> 00:13:41,910
run everything in this terrible Java

327
00:13:40,170 --> 00:13:43,860
environment on top of a frame buffer and

328
00:13:41,910 --> 00:13:48,480
then later they switched our using X

329
00:13:43,860 --> 00:13:50,100
with awesome window manager all right so

330
00:13:48,480 --> 00:13:51,689
let's get something actually running on

331
00:13:50,100 --> 00:13:53,009
let's compile the kernel first so I

332
00:13:51,689 --> 00:13:54,930
download the kernel there are some

333
00:13:53,009 --> 00:13:56,309
header files missing but like looking

334
00:13:54,930 --> 00:13:57,930
through all the tar files that they

335
00:13:56,309 --> 00:13:59,610
dumped I found all the missing header

336
00:13:57,930 --> 00:14:01,559
files and like managed to put something

337
00:13:59,610 --> 00:14:04,889
together I actually compiled I wasn't

338
00:14:01,559 --> 00:14:07,769
too bad and then I made this system that

339
00:14:04,889 --> 00:14:09,839
lets you compile all this so I put up on

340
00:14:07,769 --> 00:14:11,999
github this thing where you can use

341
00:14:09,839 --> 00:14:13,249
Virtual Box actually vagrant so you run

342
00:14:11,999 --> 00:14:15,389
like command it sets up the entire

343
00:14:13,249 --> 00:14:17,670
virtual machine that you need in order

344
00:14:15,389 --> 00:14:19,470
to compile everything and then you enter

345
00:14:17,670 --> 00:14:21,479
into the virtual machine and you run a

346
00:14:19,470 --> 00:14:22,889
build script and it does everything for

347
00:14:21,480 --> 00:14:25,259
you so these all these are the commands

348
00:14:22,889 --> 00:14:27,089
you need to do this it's all in the

349
00:14:25,259 --> 00:14:29,850
github and then in order to compile

350
00:14:27,089 --> 00:14:31,559
currently need some kind of initial or M

351
00:14:29,850 --> 00:14:33,870
file system so I just used build route

352
00:14:31,559 --> 00:14:35,129
to make it really simple tiny one again

353
00:14:33,870 --> 00:14:38,519
all the stuff is there to build it

354
00:14:35,129 --> 00:14:39,569
really easily here's the stuff so here's

355
00:14:38,519 --> 00:14:41,220
the commands to actually compile the

356
00:14:39,569 --> 00:14:45,209
kernel with the initial gram filesystem

357
00:14:41,220 --> 00:14:48,319
it built into the image right so let's

358
00:14:45,209 --> 00:14:48,319
let's load the kernel su

359
00:14:58,570 --> 00:15:03,400
actually it's not the one I watch

360
00:15:04,620 --> 00:15:07,400
here we go

361
00:15:10,630 --> 00:15:16,149
all right so I am here I have a serial

362
00:15:13,990 --> 00:15:18,250
console as I saw the Charter three

363
00:15:16,149 --> 00:15:20,529
different pins to the inside the circuit

364
00:15:18,250 --> 00:15:22,360
board so runners get a serial console so

365
00:15:20,529 --> 00:15:23,709
we can experiment with what happens when

366
00:15:22,360 --> 00:15:26,670
you let the kernel just lower level

367
00:15:23,709 --> 00:15:26,670
stuff but

368
00:15:33,760 --> 00:15:39,939
let me just get into the right directory

369
00:15:36,990 --> 00:15:41,230
so this is the directory that you can

370
00:15:39,940 --> 00:15:43,269
put stuff in when you plug into USB

371
00:15:41,230 --> 00:15:44,740
comes up as a USB storage device so I

372
00:15:43,269 --> 00:15:55,779
just dumped the files that I need it on

373
00:15:44,740 --> 00:15:58,149
here and here and what I put on here is

374
00:15:55,779 --> 00:15:59,560
this kernel that I compiled and I also

375
00:15:58,149 --> 00:16:01,540
put this other thing that I compiled

376
00:15:59,560 --> 00:16:03,010
which is cakes X but if you ever used

377
00:16:01,540 --> 00:16:05,260
cake so I could put cakes like is a

378
00:16:03,010 --> 00:16:07,480
thing that's part of the kernel and also

379
00:16:05,260 --> 00:16:09,040
a spindle and binary and if it's enabled

380
00:16:07,480 --> 00:16:10,540
in the running kernel that you can use

381
00:16:09,040 --> 00:16:12,219
KX like then you can load a new kernel

382
00:16:10,540 --> 00:16:16,360
without rebooting you can simply just do

383
00:16:12,220 --> 00:16:18,790
K xx and then you do that she'll and

384
00:16:16,360 --> 00:16:20,860
then the image that you want to load and

385
00:16:18,790 --> 00:16:29,079
- T and then you have to say what type

386
00:16:20,860 --> 00:16:31,600
of image it is and then oh it'll load

387
00:16:29,079 --> 00:16:34,269
into RAM and then you can do K exec

388
00:16:31,600 --> 00:16:37,720
again and this a actually now execute

389
00:16:34,269 --> 00:16:43,690
the kernel and there you go it's running

390
00:16:37,720 --> 00:16:46,660
a new kernel so that didn't get us very

391
00:16:43,690 --> 00:16:50,949
far cos that was just the kernel but at

392
00:16:46,660 --> 00:16:52,480
least it goes somewhere right so let's

393
00:16:50,949 --> 00:16:55,510
talk about whether or not this is

394
00:16:52,480 --> 00:16:57,930
actually legal in the u.s. at least we

395
00:16:55,510 --> 00:17:01,199
have these interesting laws called DMCA

396
00:16:57,930 --> 00:17:05,530
and in includes these things about

397
00:17:01,199 --> 00:17:07,540
circumventing circumventing copyright

398
00:17:05,530 --> 00:17:09,549
protection mechanisms and it's illegal

399
00:17:07,540 --> 00:17:12,220
to circumvent copyright access control

400
00:17:09,549 --> 00:17:14,500
mechanisms even if you're not trying to

401
00:17:12,220 --> 00:17:17,020
violate copyright even if that's not

402
00:17:14,500 --> 00:17:19,839
your goal it's illegal to produce these

403
00:17:17,020 --> 00:17:22,510
kinds of devices or programs or whatever

404
00:17:19,839 --> 00:17:25,839
you you may call them and it's illegal

405
00:17:22,510 --> 00:17:27,760
to disseminate so there are some

406
00:17:25,839 --> 00:17:29,980
exemptions to these rules that are have

407
00:17:27,760 --> 00:17:32,440
been added on every three years the

408
00:17:29,980 --> 00:17:35,230
librarian of Congress signs off on a new

409
00:17:32,440 --> 00:17:36,760
set of exemptions and also hopefully the

410
00:17:35,230 --> 00:17:39,490
existing exemptions from last three

411
00:17:36,760 --> 00:17:40,780
years or less many years they can revoke

412
00:17:39,490 --> 00:17:43,659
exemptions as well

413
00:17:40,780 --> 00:17:46,540
we have exemptions right now for phones

414
00:17:43,659 --> 00:17:47,080
and tablets e-readers definitely do not

415
00:17:46,540 --> 00:17:49,899
count as

416
00:17:47,080 --> 00:17:50,980
phones and tablets so you can jailbreak

417
00:17:49,899 --> 00:17:52,899
your phone in your tablet but not your

418
00:17:50,980 --> 00:17:54,159
you reader and that's apparently because

419
00:17:52,899 --> 00:17:56,408
they don't see readers as

420
00:17:54,159 --> 00:17:58,299
general-purpose computing devices which

421
00:17:56,409 --> 00:18:03,519
you know I guess maybe they're not but

422
00:17:58,299 --> 00:18:07,000
that's what we're trying to do here so

423
00:18:03,519 --> 00:18:08,950
that sucks next update will be 2021 I

424
00:18:07,000 --> 00:18:10,059
hope to make a big fuss about this then

425
00:18:08,950 --> 00:18:13,539
I unfortunately missed this last

426
00:18:10,059 --> 00:18:15,279
deadline to make a big fuss about it so

427
00:18:13,539 --> 00:18:16,600
who do we talk to about this well it

428
00:18:15,279 --> 00:18:19,510
looks like it's librarian at Congress

429
00:18:16,600 --> 00:18:22,689
who is that well it turns out is this is

430
00:18:19,510 --> 00:18:24,610
really an amazing woman who's an actual

431
00:18:22,690 --> 00:18:27,480
librarian not just a politician that you

432
00:18:24,610 --> 00:18:30,219
might expect and she is she used to be

433
00:18:27,480 --> 00:18:33,460
the Baltimore the president of the

434
00:18:30,220 --> 00:18:35,740
Baltimore Public Library and has been

435
00:18:33,460 --> 00:18:37,809
against some vocally against the Patriot

436
00:18:35,740 --> 00:18:40,269
Act it's like how much better could you

437
00:18:37,809 --> 00:18:42,070
get of course we can convince a

438
00:18:40,269 --> 00:18:43,360
librarian who's against the Patriot Act

439
00:18:42,070 --> 00:18:46,779
that we should be able to jailbreak

440
00:18:43,360 --> 00:18:48,010
these devices but turns out that the

441
00:18:46,779 --> 00:18:50,139
librarian of Congress is actually just

442
00:18:48,010 --> 00:18:51,789
signing off on these things and who's

443
00:18:50,139 --> 00:18:53,408
actually in charge of figuring out

444
00:18:51,789 --> 00:18:55,019
looking all the public comments and

445
00:18:53,409 --> 00:18:57,399
figuring out what should be exempt is

446
00:18:55,019 --> 00:18:59,980
this person called the register of

447
00:18:57,399 --> 00:19:01,268
copyrights not the registrar for some

448
00:18:59,980 --> 00:19:04,120
reason it's actually called the register

449
00:19:01,269 --> 00:19:05,860
of copyrights so you don't read all this

450
00:19:04,120 --> 00:19:08,229
thing but what what's happening right

451
00:19:05,860 --> 00:19:10,719
now is that the register of copyrights

452
00:19:08,230 --> 00:19:13,779
used to be or is currently assigned by

453
00:19:10,720 --> 00:19:17,230
the chosen by the librarian of Congress

454
00:19:13,779 --> 00:19:19,480
but our lovely government is trying to

455
00:19:17,230 --> 00:19:22,120
pass a law that will make it change this

456
00:19:19,480 --> 00:19:24,100
so the next register of copyrights will

457
00:19:22,120 --> 00:19:27,489
be assigned by the President of the

458
00:19:24,100 --> 00:19:30,699
United States so you could probably

459
00:19:27,490 --> 00:19:34,899
guess how that's gonna go right now the

460
00:19:30,700 --> 00:19:37,389
law is it was passed the house and it's

461
00:19:34,899 --> 00:19:39,100
been you know assigned to refer to

462
00:19:37,389 --> 00:19:41,320
committee so it's probably gonna take a

463
00:19:39,100 --> 00:19:45,010
while before this goes through but who

464
00:19:41,320 --> 00:19:46,090
knows who knows where it's gonna go so

465
00:19:45,010 --> 00:19:49,179
what is legal right now

466
00:19:46,090 --> 00:19:51,610
well buying an already rooted device

467
00:19:49,179 --> 00:19:54,370
seems like it's not explicitly illegal I

468
00:19:51,610 --> 00:19:56,260
look at least not from me reading I'm

469
00:19:54,370 --> 00:19:57,879
not a lawyer I talk to some lawyers I

470
00:19:56,260 --> 00:20:00,100
ask them what do you think is this legal

471
00:19:57,880 --> 00:20:02,320
if I like

472
00:20:00,100 --> 00:20:05,110
Europe where it's legal to jailbreak

473
00:20:02,320 --> 00:20:07,659
these and then I buy a device that

474
00:20:05,110 --> 00:20:09,879
someone bought used that they jailbroke

475
00:20:07,660 --> 00:20:13,929
is that is that and I'm breaking a law

476
00:20:09,880 --> 00:20:15,730
somehow and it's like but maybe it

477
00:20:13,929 --> 00:20:17,470
doesn't seem like it should be illegal

478
00:20:15,730 --> 00:20:19,179
but you know it's not really been tested

479
00:20:17,470 --> 00:20:21,100
so I didn't get a clear answer on that

480
00:20:19,179 --> 00:20:22,990
well what if we just erase the entire

481
00:20:21,100 --> 00:20:25,000
flash memory and the brief flash or

482
00:20:22,990 --> 00:20:26,500
there's a new system then we're not

483
00:20:25,000 --> 00:20:27,910
we're not doing anything illegal are we

484
00:20:26,500 --> 00:20:28,480
and then the answer is that probably

485
00:20:27,910 --> 00:20:33,880
that's good

486
00:20:28,480 --> 00:20:35,200
probably they were okay so oh just that

487
00:20:33,880 --> 00:20:36,669
you mentioned this in order to do this

488
00:20:35,200 --> 00:20:39,850
KX like thing you of course we have to

489
00:20:36,669 --> 00:20:42,039
cross compile cakes like using the tool

490
00:20:39,850 --> 00:20:43,689
chain that very similar to the tool

491
00:20:42,039 --> 00:20:45,250
chain and use to compile the official

492
00:20:43,690 --> 00:20:48,039
system so it's the only thing we need

493
00:20:45,250 --> 00:20:50,049
that for so there's this in I lose I

494
00:20:48,039 --> 00:20:52,299
don't across this this person I Lewis

495
00:20:50,049 --> 00:20:53,679
made a nice cross compile thing so you

496
00:20:52,299 --> 00:20:58,750
can slide load things on to Kindle

497
00:20:53,679 --> 00:21:00,520
thanks with that just showing the serial

498
00:20:58,750 --> 00:21:01,900
console here's how you put a circle

499
00:21:00,520 --> 00:21:04,539
console on your Kindle if you want to

500
00:21:01,900 --> 00:21:06,580
experiment low level stuff down there in

501
00:21:04,539 --> 00:21:08,879
the Red Square in the right corner is

502
00:21:06,580 --> 00:21:13,120
there's some pins that you can solder to

503
00:21:08,880 --> 00:21:14,980
these are the TX and rx here is I've

504
00:21:13,120 --> 00:21:16,658
soldered a couple wires up there and I

505
00:21:14,980 --> 00:21:19,419
just started some other wire to ground

506
00:21:16,659 --> 00:21:21,070
somewhere and and the only thing you

507
00:21:19,419 --> 00:21:24,370
have to be aware of it's 1.8 volts

508
00:21:21,070 --> 00:21:25,658
serial I'm not gonna tell you how to get

509
00:21:24,370 --> 00:21:29,620
further than that because that would be

510
00:21:25,659 --> 00:21:33,760
illegal you'll have to search the widths

511
00:21:29,620 --> 00:21:35,889
oh yeah and and in order to in order to

512
00:21:33,760 --> 00:21:37,539
get done to actually get the case off

513
00:21:35,890 --> 00:21:39,010
you can actually just brute force a tour

514
00:21:37,539 --> 00:21:40,929
if you know you don't need any tools you

515
00:21:39,010 --> 00:21:41,980
can just pull it off first time you do

516
00:21:40,929 --> 00:21:43,510
it it's gonna be really annoying because

517
00:21:41,980 --> 00:21:45,370
there's little ooh on that big metal

518
00:21:43,510 --> 00:21:46,809
plate there but you even if you break

519
00:21:45,370 --> 00:21:48,969
off the metal plate it's just protecting

520
00:21:46,809 --> 00:21:54,250
the battery so just like brute force it

521
00:21:48,970 --> 00:21:55,510
offers easy all right

522
00:21:54,250 --> 00:21:57,970
so can we do something where we don't

523
00:21:55,510 --> 00:21:59,440
need the serial having to do all the

524
00:21:57,970 --> 00:22:00,669
soldering and connecting a serial it's

525
00:21:59,440 --> 00:22:03,130
fine if you're trying to do deal with

526
00:22:00,669 --> 00:22:04,570
you boot and loading a kernel but maybe

527
00:22:03,130 --> 00:22:10,540
we could make it easy for people to load

528
00:22:04,570 --> 00:22:12,280
things well right here is some XML and

529
00:22:10,540 --> 00:22:12,710
JSON and the reason I'm showing this is

530
00:22:12,280 --> 00:22:16,009
some

531
00:22:12,710 --> 00:22:18,230
very nice people including to Bob my

532
00:22:16,009 --> 00:22:19,490
lures and other people we were hacking

533
00:22:18,230 --> 00:22:21,169
we've been hacked on Kindle for really

534
00:22:19,490 --> 00:22:22,909
long time they make this thing called

535
00:22:21,169 --> 00:22:24,980
the Kindle unified application launcher

536
00:22:22,909 --> 00:22:27,559
and it's a thing that you can side load

537
00:22:24,980 --> 00:22:30,710
onto a Kindle using running the official

538
00:22:27,559 --> 00:22:32,509
firmware and then it creates like a fake

539
00:22:30,710 --> 00:22:34,159
book basically that you can access in

540
00:22:32,509 --> 00:22:35,899
your library and you click it it's a

541
00:22:34,159 --> 00:22:37,789
menu system and the menu system allows

542
00:22:35,899 --> 00:22:40,248
you to launch scripts so so what is

543
00:22:37,789 --> 00:22:42,950
what's right here is just basically an

544
00:22:40,249 --> 00:22:45,379
extension for the application launcher

545
00:22:42,950 --> 00:22:47,710
that allows you to launch a free that

546
00:22:45,379 --> 00:22:50,600
start or descriptive starts free kernel

547
00:22:47,710 --> 00:22:55,629
using kxx so let's just do that real

548
00:22:50,600 --> 00:22:55,629
quick actually I just I did a 3/4 video

549
00:22:55,690 --> 00:23:02,440
because I wasn't really sure it would be

550
00:22:57,889 --> 00:23:07,779
light enough to see it up here up

551
00:23:02,440 --> 00:23:07,779
actually yeah I'll do that

552
00:23:11,240 --> 00:23:14,539
[Music]

553
00:23:15,619 --> 00:23:19,708
okay I guess it ended up sideways I

554
00:23:18,539 --> 00:23:21,179
don't know if like it does anyone know

555
00:23:19,709 --> 00:23:24,989
that the end player come in to flip

556
00:23:21,179 --> 00:23:27,899
something 90 degrees okay whatever

557
00:23:24,989 --> 00:23:30,259
there you go CX rose up as a book you

558
00:23:27,899 --> 00:23:32,158
can click it and then it loads this

559
00:23:30,259 --> 00:23:33,509
application launcher is very nice you

560
00:23:32,159 --> 00:23:34,859
can add all kinds of funny things to

561
00:23:33,509 --> 00:23:36,479
your Kindle this way you can cite load

562
00:23:34,859 --> 00:23:40,009
all kinds of stuff that people have made

563
00:23:36,479 --> 00:23:43,829
and they're easy it's just you know and

564
00:23:40,009 --> 00:23:46,249
switch to freed so when you click it for

565
00:23:43,829 --> 00:23:48,209
the first nothing really happens because

566
00:23:46,249 --> 00:23:54,539
you have to get the point we have some

567
00:23:48,209 --> 00:23:55,079
graphics so okay we have a kernel that's

568
00:23:54,539 --> 00:23:56,849
great

569
00:23:55,079 --> 00:23:57,809
can we just run debian on this thing and

570
00:23:56,849 --> 00:23:59,879
rank is instead of trying to do

571
00:23:57,809 --> 00:24:02,779
something super custom let's just run

572
00:23:59,879 --> 00:24:05,369
debian I like Debian it's easy

573
00:24:02,779 --> 00:24:08,849
turns out you remember that really

574
00:24:05,369 --> 00:24:12,689
ancient kernel - 631 that's a really old

575
00:24:08,849 --> 00:24:15,539
colonel if if you try to figure out what

576
00:24:12,690 --> 00:24:17,070
kind of kernel you can run with the very

577
00:24:15,539 --> 00:24:18,450
latest and greatest Debian the first

578
00:24:17,070 --> 00:24:21,418
thing you get is this tag exchange

579
00:24:18,450 --> 00:24:24,469
answer of course and you see that well

580
00:24:21,419 --> 00:24:27,119
actually for any other platform than x86

581
00:24:24,469 --> 00:24:30,869
you need a 3.2 kernel

582
00:24:27,119 --> 00:24:34,968
so for Debian 9 you need to 22 but

583
00:24:30,869 --> 00:24:37,408
that's only on x86 so for Debian jessie

584
00:24:34,969 --> 00:24:39,450
court unfortunately we can't run stretch

585
00:24:37,409 --> 00:24:44,099
we have to go to Debian Jessie and that

586
00:24:39,450 --> 00:24:47,899
uses GFC 219 for 219 you you can

587
00:24:44,099 --> 00:24:51,629
actually do it with 2 6 32

588
00:24:47,899 --> 00:24:54,059
but if you recompile gee Lipsy with a

589
00:24:51,629 --> 00:24:56,939
different flag then you can get it all

590
00:24:54,059 --> 00:25:00,359
the way back to 2 627 so if we recompile

591
00:24:56,940 --> 00:25:02,309
the g Lipsy for with another flag set

592
00:25:00,359 --> 00:25:06,629
then we should be able to run Debbie in

593
00:25:02,309 --> 00:25:08,099
a stretch so I set up a little wait okay

594
00:25:06,629 --> 00:25:10,529
so the other thing we could do is hey

595
00:25:08,099 --> 00:25:13,289
why don't we just run on your kernel the

596
00:25:10,529 --> 00:25:14,849
MX chipsets I'll have support in the

597
00:25:13,289 --> 00:25:17,940
mainline kernel so it shouldn't be

598
00:25:14,849 --> 00:25:19,559
really that hard so if anyone here is is

599
00:25:17,940 --> 00:25:22,499
really good at currently hacking device

600
00:25:19,559 --> 00:25:24,450
trees all this stuff I would love to

601
00:25:22,499 --> 00:25:25,769
work with you to get it running with the

602
00:25:24,450 --> 00:25:28,630
latest kernel we will have to get

603
00:25:25,769 --> 00:25:30,429
support for the power management IC e

604
00:25:28,630 --> 00:25:32,559
flash memory a few other things but it's

605
00:25:30,429 --> 00:25:34,149
not really too bad for now the only

606
00:25:32,559 --> 00:25:36,129
thing we have if the very simple device

607
00:25:34,149 --> 00:25:38,080
tree allows us to boot mainline kernel

608
00:25:36,130 --> 00:25:41,529
and get serial output but nothing else

609
00:25:38,080 --> 00:25:44,110
no flash nothing so for now we stuck

610
00:25:41,529 --> 00:25:46,269
with this kernel so I compiled ellipses

611
00:25:44,110 --> 00:25:47,529
with this flag I am a little a

612
00:25:46,269 --> 00:25:49,149
prostitute or II for all the extra

613
00:25:47,529 --> 00:25:53,320
things you need that are not standard

614
00:25:49,149 --> 00:25:55,899
Debian and quickly I wanna mention like

615
00:25:53,320 --> 00:25:58,178
cross compiling I've been done a lot of

616
00:25:55,899 --> 00:26:00,518
cross compiling for this project and a

617
00:25:58,179 --> 00:26:02,169
heat cross compiling is so complicated

618
00:26:00,519 --> 00:26:04,120
as so many things to setup if I make so

619
00:26:02,169 --> 00:26:07,330
many things that can go wrong so just

620
00:26:04,120 --> 00:26:08,649
some quick tips there's the first way to

621
00:26:07,330 --> 00:26:10,029
do it is to just set a bunch of

622
00:26:08,649 --> 00:26:12,008
environment variables and have a

623
00:26:10,029 --> 00:26:14,620
different cross compiler and then try to

624
00:26:12,009 --> 00:26:17,409
compress compile every library one thing

625
00:26:14,620 --> 00:26:18,518
at a time and build up this like all the

626
00:26:17,409 --> 00:26:19,870
dependencies you need to actually

627
00:26:18,519 --> 00:26:21,639
compile this thing you want to compile

628
00:26:19,870 --> 00:26:22,840
that's that can be really tedious for

629
00:26:21,639 --> 00:26:26,019
things that have a lot of dependencies

630
00:26:22,840 --> 00:26:28,600
and just takes a lot of time my favorite

631
00:26:26,019 --> 00:26:30,309
way of doing it is this QT mu plus a

632
00:26:28,600 --> 00:26:32,709
change frood thing I'll get into that in

633
00:26:30,309 --> 00:26:33,879
a second and then there's some other

634
00:26:32,710 --> 00:26:35,139
ways you can do it you can compile it

635
00:26:33,879 --> 00:26:37,120
straight on the e-reader but you often

636
00:26:35,139 --> 00:26:39,820
run out of RAM most of these only have

637
00:26:37,120 --> 00:26:41,889
256 megabytes of RAM you can compile in

638
00:26:39,820 --> 00:26:43,809
the cloud I ran this issue where a lot

639
00:26:41,889 --> 00:26:46,120
of the cloud providers are using arm 64

640
00:26:43,809 --> 00:26:48,610
cores that aren't backwards compatible

641
00:26:46,120 --> 00:26:52,000
with arm 32 and the e-readers or arms

642
00:26:48,610 --> 00:26:53,709
are you - that sucks you can compile on

643
00:26:52,000 --> 00:26:55,720
unlike a cheap single board computer

644
00:26:53,710 --> 00:26:57,669
that's a good way of doing it or you can

645
00:26:55,720 --> 00:26:59,590
compile on your phone I bought a single

646
00:26:57,669 --> 00:27:00,759
board computer and I thought wow this is

647
00:26:59,590 --> 00:27:02,139
a really beefy you want to compile it

648
00:27:00,759 --> 00:27:04,240
really quickly and then I realized I was

649
00:27:02,139 --> 00:27:06,250
taller than my phone so maybe I should

650
00:27:04,240 --> 00:27:09,340
have just copy it to my phone change

651
00:27:06,250 --> 00:27:10,720
route alright so just that Jim curiam

652
00:27:09,340 --> 00:27:12,759
for a flesh change route this makes

653
00:27:10,720 --> 00:27:14,470
compiling really easy and that's how

654
00:27:12,759 --> 00:27:17,350
I've set up the entire user land for

655
00:27:14,470 --> 00:27:20,200
this system you basically you can make a

656
00:27:17,350 --> 00:27:22,209
in duty bootstrap for your 400 texture

657
00:27:20,200 --> 00:27:23,950
and you can just sell it to only do the

658
00:27:22,210 --> 00:27:25,899
first stage of the d bootstrap it means

659
00:27:23,950 --> 00:27:28,600
it creates the entire route partition

660
00:27:25,899 --> 00:27:30,070
for a Debian system for the ARM

661
00:27:28,600 --> 00:27:32,860
architecture you can do this on a laptop

662
00:27:30,070 --> 00:27:34,539
that's x86 and then with qmo you can do

663
00:27:32,860 --> 00:27:37,000
this interesting thing where you just

664
00:27:34,539 --> 00:27:39,730
copy the slow binary called the Camaro

665
00:27:37,000 --> 00:27:43,060
arm static into the user pin and

666
00:27:39,730 --> 00:27:45,010
a new debian userland you set up and

667
00:27:43,060 --> 00:27:47,260
then when you change route into it it

668
00:27:45,010 --> 00:27:49,930
automatically figures out whenever you

669
00:27:47,260 --> 00:27:51,700
run a binary to use to emulator so it's

670
00:27:49,930 --> 00:27:52,930
transparent you can just change route

671
00:27:51,700 --> 00:27:55,540
and suddenly you're in an armed

672
00:27:52,930 --> 00:27:57,190
environment and it all works until it

673
00:27:55,540 --> 00:27:58,810
doesn't so I was using this for a long

674
00:27:57,190 --> 00:28:03,040
time when I was trying to compile tips

675
00:27:58,810 --> 00:28:04,600
gee let's see I just got like a device

676
00:28:03,040 --> 00:28:06,520
leas crashed and there was some deep

677
00:28:04,600 --> 00:28:07,840
tree bug where it wasn't doing what

678
00:28:06,520 --> 00:28:10,830
they're supposed to do I ended up having

679
00:28:07,840 --> 00:28:13,959
to just do it on an actual arm core

680
00:28:10,830 --> 00:28:16,120
right so here's the userland again

681
00:28:13,960 --> 00:28:17,080
there's like a vagrant setup so it makes

682
00:28:16,120 --> 00:28:18,429
it really easy and with a virtual

683
00:28:17,080 --> 00:28:20,169
machine to set everything up you can

684
00:28:18,430 --> 00:28:22,030
easily add more packages and recompile

685
00:28:20,170 --> 00:28:25,210
everything and regenerate the userland

686
00:28:22,030 --> 00:28:26,530
for the system it's a really minimal

687
00:28:25,210 --> 00:28:29,560
Debian so I really stripped everything

688
00:28:26,530 --> 00:28:32,050
down I got rid of all the manual pages I

689
00:28:29,560 --> 00:28:34,960
got rid of you know it automatically

690
00:28:32,050 --> 00:28:36,879
cleans all the app packages you download

691
00:28:34,960 --> 00:28:39,550
and it gets rid of the app cache and

692
00:28:36,880 --> 00:28:41,430
stuff like that so it's done so like two

693
00:28:39,550 --> 00:28:43,360
hundred and twenty megabytes right now

694
00:28:41,430 --> 00:28:45,640
you probably get it further on if you

695
00:28:43,360 --> 00:28:47,260
need to but it seems like good size

696
00:28:45,640 --> 00:28:51,100
there's two gigabytes of flash even on

697
00:28:47,260 --> 00:28:52,450
the older Kindles ok let's get to the

698
00:28:51,100 --> 00:28:54,280
fun stuff we need to get this play

699
00:28:52,450 --> 00:28:56,290
working we can we can run and start a

700
00:28:54,280 --> 00:28:57,850
kernel we can get some you know command

701
00:28:56,290 --> 00:28:59,350
line stuff working but we need to get to

702
00:28:57,850 --> 00:29:01,149
this play so how do you get this play

703
00:28:59,350 --> 00:29:04,240
working while you load the kernel driver

704
00:29:01,150 --> 00:29:06,310
I assume then you would probably load

705
00:29:04,240 --> 00:29:09,880
some kind x driver and maybe use the

706
00:29:06,310 --> 00:29:12,730
frame buffer driver and that would be it

707
00:29:09,880 --> 00:29:15,970
well it turns out that's not exactly

708
00:29:12,730 --> 00:29:19,090
right so we're very lucky that the GPL

709
00:29:15,970 --> 00:29:20,470
dumps included the EP DC driver so if

710
00:29:19,090 --> 00:29:22,300
you see if you look at some of these

711
00:29:20,470 --> 00:29:25,150
files down you're in spec see that some

712
00:29:22,300 --> 00:29:27,430
of them is called lab 126 so this is

713
00:29:25,150 --> 00:29:29,440
some kind of driver they got from either

714
00:29:27,430 --> 00:29:32,800
freescale or the yank manufacturer and

715
00:29:29,440 --> 00:29:35,140
it's all licensed under GPL 2 is as the

716
00:29:32,800 --> 00:29:40,360
kernel is and there's some enhancements

717
00:29:35,140 --> 00:29:43,930
by lab 126 so that's not really enough

718
00:29:40,360 --> 00:29:45,070
the AP DC driver doesn't operate on an

719
00:29:43,930 --> 00:29:46,150
episode it needs something called

720
00:29:45,070 --> 00:29:48,070
waveform this is something is

721
00:29:46,150 --> 00:29:50,680
specifically for a electronic paper

722
00:29:48,070 --> 00:29:52,929
displays they need waveforms so I'll get

723
00:29:50,680 --> 00:29:55,360
to it winter what these are in a minute

724
00:29:52,930 --> 00:29:57,700
but they were very nice and they also

725
00:29:55,360 --> 00:29:59,379
included like a test waveform that's

726
00:29:57,700 --> 00:30:01,810
enough to get at least basic output

727
00:29:59,380 --> 00:30:04,060
working for the display and they did it

728
00:30:01,810 --> 00:30:05,500
as a dot H file and license it under the

729
00:30:04,060 --> 00:30:07,419
GPL I almost feel like there's someone

730
00:30:05,500 --> 00:30:12,100
working for that 126 that's trying to

731
00:30:07,420 --> 00:30:13,990
help us here okay where you get the

732
00:30:12,100 --> 00:30:15,879
actual waveforms do I have to make to

733
00:30:13,990 --> 00:30:18,550
get a good result on the display well it

734
00:30:15,880 --> 00:30:19,960
turns out that when you buy one of these

735
00:30:18,550 --> 00:30:23,560
electronic paper displays from the e-ink

736
00:30:19,960 --> 00:30:25,000
corporation they in this is the ribbon

737
00:30:23,560 --> 00:30:28,149
cable coming from the display from the

738
00:30:25,000 --> 00:30:30,280
front side and if we if we look at this

739
00:30:28,150 --> 00:30:32,290
a little bit closer you see there's a

740
00:30:30,280 --> 00:30:34,360
chip on there and that's a flash chip

741
00:30:32,290 --> 00:30:36,810
and that flash strip is not used at all

742
00:30:34,360 --> 00:30:39,010
during normal operation but it is

743
00:30:36,810 --> 00:30:41,200
accessible from the pins on that little

744
00:30:39,010 --> 00:30:43,930
ribbon cable or it's not ribbon cable

745
00:30:41,200 --> 00:30:45,520
but that will cable there and you can

746
00:30:43,930 --> 00:30:47,590
talk to it and you can read words on it

747
00:30:45,520 --> 00:30:49,389
and it turns out it's kind of like the

748
00:30:47,590 --> 00:30:51,879
the floppy disk with the drivers for the

749
00:30:49,390 --> 00:30:56,020
display it includes the waveforms so you

750
00:30:51,880 --> 00:30:57,880
can download these waveforms and and one

751
00:30:56,020 --> 00:31:01,510
of the additions that lab 1:26 added to

752
00:30:57,880 --> 00:31:02,830
the EP DC driver is some code that lets

753
00:31:01,510 --> 00:31:04,690
you download that so I didn't even have

754
00:31:02,830 --> 00:31:06,310
to write the SPI communcation code I

755
00:31:04,690 --> 00:31:08,220
could just like say hey please dump

756
00:31:06,310 --> 00:31:10,929
everything from the last show so

757
00:31:08,220 --> 00:31:13,330
waveforms turns out there lookup tables

758
00:31:10,930 --> 00:31:14,800
and the way they work is you ask the

759
00:31:13,330 --> 00:31:16,240
lookup table hey what's what's the

760
00:31:14,800 --> 00:31:17,700
current mode it turns out waveform

761
00:31:16,240 --> 00:31:21,550
support different kinds of update modes

762
00:31:17,700 --> 00:31:23,020
and then this EP DC or sorry DC

763
00:31:21,550 --> 00:31:24,580
electronic paper displays there are

764
00:31:23,020 --> 00:31:27,970
actually temperature dependent because

765
00:31:24,580 --> 00:31:29,560
it's particles moving through an oil the

766
00:31:27,970 --> 00:31:31,150
viscosity of the oil and the speed at

767
00:31:29,560 --> 00:31:32,710
which they move changes depending on

768
00:31:31,150 --> 00:31:33,670
temperature so you need to have a

769
00:31:32,710 --> 00:31:34,360
temperature sensor and know what the

770
00:31:33,670 --> 00:31:36,190
temperature is

771
00:31:34,360 --> 00:31:38,709
so in the lookup table you have to look

772
00:31:36,190 --> 00:31:40,900
into these you look based on the

773
00:31:38,710 --> 00:31:42,970
temperature and then you say well what's

774
00:31:40,900 --> 00:31:44,110
the current pixel value of the pixel I'm

775
00:31:42,970 --> 00:31:45,850
trying to change and then what's the

776
00:31:44,110 --> 00:31:47,560
desired pixel value and then after

777
00:31:45,850 --> 00:31:49,659
looking through the lookup table it

778
00:31:47,560 --> 00:31:53,800
gives you these things called phases as

779
00:31:49,660 --> 00:31:55,960
the result so what a phase is again the

780
00:31:53,800 --> 00:31:59,379
way the display works is this positive

781
00:31:55,960 --> 00:32:01,270
negative voltage that you apply but you

782
00:31:59,380 --> 00:32:03,790
can't just pull negative to get the

783
00:32:01,270 --> 00:32:05,200
black pick the black particles top and

784
00:32:03,790 --> 00:32:06,580
positive to get to the white ones to top

785
00:32:05,200 --> 00:32:08,559
you you have to

786
00:32:06,580 --> 00:32:11,110
ensure that you don't build up a charge

787
00:32:08,559 --> 00:32:13,059
differential on because that will screw

788
00:32:11,110 --> 00:32:14,740
up display so you have to be switching

789
00:32:13,059 --> 00:32:16,418
rapidly between negative and positive

790
00:32:14,740 --> 00:32:19,330
and you have to do that in the way you

791
00:32:16,419 --> 00:32:21,970
get like degree the amount of grade that

792
00:32:19,330 --> 00:32:23,408
you need the great tone that you need so

793
00:32:21,970 --> 00:32:25,179
you started some great don't need some

794
00:32:23,409 --> 00:32:26,980
other great zone and based on the

795
00:32:25,179 --> 00:32:30,340
temperature you're in the mode it gives

796
00:32:26,980 --> 00:32:31,960
you a set of these trinary values that's

797
00:32:30,340 --> 00:32:35,740
what the phases are there's just a set

798
00:32:31,960 --> 00:32:38,740
of trinary values so it's either 0 or 1

799
00:32:35,740 --> 00:32:41,620
or 2 and so 0 would be pull the blacks

800
00:32:38,740 --> 00:32:43,960
put a negative on top and 1 would be put

801
00:32:41,620 --> 00:32:48,129
positive on top and the last one would

802
00:32:43,960 --> 00:32:49,240
be do nothing so let's explore one of

803
00:32:48,130 --> 00:32:51,669
these waveforms see what's inside of

804
00:32:49,240 --> 00:32:52,419
them here's what's in the header and we

805
00:32:51,669 --> 00:32:55,720
can see with some interesting

806
00:32:52,419 --> 00:32:57,250
information about the displays of a 85

807
00:32:55,720 --> 00:33:00,070
Hertz display that doesn't mean it up

808
00:32:57,250 --> 00:33:03,279
dates 85 times a second it up it means

809
00:33:00,070 --> 00:33:06,850
that the phases update you have to send

810
00:33:03,279 --> 00:33:08,230
it a new phase 85 times a second so if

811
00:33:06,850 --> 00:33:13,090
there's multiple phases it'll be some

812
00:33:08,230 --> 00:33:14,769
fraction thereof it's a 806 down or

813
00:33:13,090 --> 00:33:17,379
6-inch but then we look at the bottom

814
00:33:14,769 --> 00:33:19,480
here it says well there's seven modes

815
00:33:17,380 --> 00:33:21,519
and fourteen temperature ranges and it's

816
00:33:19,480 --> 00:33:22,740
a four bit per pixel display that's good

817
00:33:21,519 --> 00:33:25,419
to know

818
00:33:22,740 --> 00:33:27,429
so what kind of modes are supported well

819
00:33:25,419 --> 00:33:30,639
this particular displays waveform had

820
00:33:27,429 --> 00:33:32,049
seven different modes and the first one

821
00:33:30,639 --> 00:33:34,240
is just panel initialization then

822
00:33:32,049 --> 00:33:35,529
there's a direct update mode which is

823
00:33:34,240 --> 00:33:37,690
this kind of backward scream it's a

824
00:33:35,529 --> 00:33:40,029
compatibility mode it's one bit per

825
00:33:37,690 --> 00:33:42,880
pixel is only monochrome and then

826
00:33:40,029 --> 00:33:44,710
there's two modes that are like a high

827
00:33:42,880 --> 00:33:47,169
fidelity slow version and a high

828
00:33:44,710 --> 00:33:49,510
fidelity or medium fidelity faster

829
00:33:47,169 --> 00:33:51,100
version of this like flashing update

830
00:33:49,510 --> 00:33:53,139
mode where it wipes everything white

831
00:33:51,100 --> 00:33:55,418
then black then does what you want

832
00:33:53,139 --> 00:33:57,959
so make so it makes it really a crisp

833
00:33:55,419 --> 00:34:00,960
and clear and wipes away a lot of that

834
00:33:57,960 --> 00:34:02,679
when damaged that we were seeing before

835
00:34:00,960 --> 00:34:04,210
then there's this very interesting

836
00:34:02,679 --> 00:34:09,220
animation update and then there's two

837
00:34:04,210 --> 00:34:10,330
non flashing modes and then the

838
00:34:09,219 --> 00:34:12,549
temperature range instead of support it

839
00:34:10,330 --> 00:34:14,230
looks like the support from 0 to 48

840
00:34:12,550 --> 00:34:15,339
centigrade which it makes sense that

841
00:34:14,230 --> 00:34:17,379
they support from zero to forty eight

842
00:34:15,339 --> 00:34:19,089
centigrade based on the fact that you

843
00:34:17,379 --> 00:34:20,279
know you're probably not going to be one

844
00:34:19,089 --> 00:34:22,739
of using this at both

845
00:34:20,280 --> 00:34:24,540
45 centigrade because lithium-ion

846
00:34:22,739 --> 00:34:28,250
batteries don't like being charged or

847
00:34:24,540 --> 00:34:30,270
you use that those temperatures and then

848
00:34:28,250 --> 00:34:31,650
I don't know why they don't support

849
00:34:30,270 --> 00:34:34,070
freezing temperatures but maybe the oil

850
00:34:31,650 --> 00:34:38,040
doesn't like it

851
00:34:34,070 --> 00:34:40,530
waveform faces so looking at the actual

852
00:34:38,040 --> 00:34:42,690
faces we see for each here's just

853
00:34:40,530 --> 00:34:44,550
looking at mood for the animation update

854
00:34:42,690 --> 00:34:46,500
mode that I thought was interesting you

855
00:34:44,550 --> 00:34:47,820
see that there's like different numbers

856
00:34:46,500 --> 00:34:51,449
of phases for the different temperature

857
00:34:47,820 --> 00:34:53,550
ranges and so the first one is seared is

858
00:34:51,449 --> 00:34:55,020
3 centigrade so if it's really cold you

859
00:34:53,550 --> 00:34:57,960
need 22 phases

860
00:34:55,020 --> 00:34:59,190
meaning it's gonna take more time and if

861
00:34:57,960 --> 00:35:00,810
you have something like normal room

862
00:34:59,190 --> 00:35:03,570
temperature you only need 10 so the

863
00:35:00,810 --> 00:35:06,360
update speed is like twice as fast when

864
00:35:03,570 --> 00:35:07,980
you're at room temperature compared to a

865
00:35:06,360 --> 00:35:10,100
women you if it's really cold this is

866
00:35:07,980 --> 00:35:15,510
for the fast as possible update mode

867
00:35:10,100 --> 00:35:17,400
available all right so these waveforms

868
00:35:15,510 --> 00:35:19,350
they come in a format that's completely

869
00:35:17,400 --> 00:35:22,110
undocumented I mean there's spec

870
00:35:19,350 --> 00:35:24,060
mutation somewhere but it's secret so in

871
00:35:22,110 --> 00:35:24,810
order to use dumped all this information

872
00:35:24,060 --> 00:35:27,029
we just looked at I have to

873
00:35:24,810 --> 00:35:29,520
reverse-engineer the waveform format it

874
00:35:27,030 --> 00:35:31,290
wasn't that bad because at least the

875
00:35:29,520 --> 00:35:34,259
header info I could kind of extrapolate

876
00:35:31,290 --> 00:35:36,090
from some of the structures that would

877
00:35:34,260 --> 00:35:40,110
define the structure we defined in the

878
00:35:36,090 --> 00:35:42,270
kernel headers and it turns out not only

879
00:35:40,110 --> 00:35:43,530
was there undocumented format it turns

880
00:35:42,270 --> 00:35:45,090
out that the format that these are

881
00:35:43,530 --> 00:35:47,310
stored in on the little flash chip is

882
00:35:45,090 --> 00:35:48,840
not the same as a format that the

883
00:35:47,310 --> 00:35:51,840
electronic paper displays older ones

884
00:35:48,840 --> 00:35:54,600
they're similar but it's a much more

885
00:35:51,840 --> 00:35:56,580
expanded format that uses there's a less

886
00:35:54,600 --> 00:36:01,560
efficient storage wise that you need to

887
00:35:56,580 --> 00:36:04,319
give to the EPC so I wrote this little

888
00:36:01,560 --> 00:36:05,759
tool called ink wave and it the

889
00:36:04,320 --> 00:36:07,500
information we're just looking at the

890
00:36:05,760 --> 00:36:09,120
human readable kind of dump or voice in

891
00:36:07,500 --> 00:36:10,320
the waveform it's one of the things that

892
00:36:09,120 --> 00:36:11,850
it does and the other thing it does is

893
00:36:10,320 --> 00:36:16,470
it converts from the format on the flash

894
00:36:11,850 --> 00:36:17,819
chip to what the EP DC needs so what

895
00:36:16,470 --> 00:36:19,680
about these waveforms can we share them

896
00:36:17,820 --> 00:36:21,240
well why would we want to because

897
00:36:19,680 --> 00:36:22,950
unfortunately not all these displays

898
00:36:21,240 --> 00:36:24,600
include the waveform on a little handy

899
00:36:22,950 --> 00:36:27,689
flash chip some of the newer ones don't

900
00:36:24,600 --> 00:36:29,610
I assume that they you know ship them to

901
00:36:27,690 --> 00:36:32,820
the people they have make a deal with

902
00:36:29,610 --> 00:36:35,820
when they sell a bunch of these displays

903
00:36:32,820 --> 00:36:38,130
I talked to some lawyers about this who

904
00:36:35,820 --> 00:36:40,050
knows or know about copyright and you

905
00:36:38,130 --> 00:36:41,340
know they said that it really depends on

906
00:36:40,050 --> 00:36:42,510
whether or not these are copyright of

907
00:36:41,340 --> 00:36:44,520
all whether or not we can share them

908
00:36:42,510 --> 00:36:46,320
depends on how they were made if they're

909
00:36:44,520 --> 00:36:47,940
made by a human doing some kind of

910
00:36:46,320 --> 00:36:49,530
creative work even minimally creative

911
00:36:47,940 --> 00:36:51,000
work then they would be copyrightable

912
00:36:49,530 --> 00:36:53,340
meaning that they have copyright we

913
00:36:51,000 --> 00:36:56,070
can't legally share them with each other

914
00:36:53,340 --> 00:36:57,810
but if they're made completely it with a

915
00:36:56,070 --> 00:36:58,800
completely automated system then they

916
00:36:57,810 --> 00:37:01,290
might not be covered

917
00:36:58,800 --> 00:37:03,030
copyrightable and we should be able to

918
00:37:01,290 --> 00:37:04,950
freely we just don't know how they're

919
00:37:03,030 --> 00:37:06,360
made so if anyone has any like inside

920
00:37:04,950 --> 00:37:07,589
info on this like house that you

921
00:37:06,360 --> 00:37:10,260
actually construct these that would be

922
00:37:07,590 --> 00:37:12,060
really useful but like worst case we now

923
00:37:10,260 --> 00:37:13,830
know how the format works we have a tool

924
00:37:12,060 --> 00:37:15,540
that understands and parses it so with a

925
00:37:13,830 --> 00:37:17,640
little bit more reverse engineering I'm

926
00:37:15,540 --> 00:37:19,770
sure we could like make our own break

927
00:37:17,640 --> 00:37:21,540
that just like brute force is what the

928
00:37:19,770 --> 00:37:23,490
best wave form is for a certain display

929
00:37:21,540 --> 00:37:24,960
just by looking at stuff with a

930
00:37:23,490 --> 00:37:26,430
microscope and hooking it into some

931
00:37:24,960 --> 00:37:28,680
computer vision stuff and writing a

932
00:37:26,430 --> 00:37:31,859
script the worst case we can still solve

933
00:37:28,680 --> 00:37:33,629
it all right getting this play working

934
00:37:31,860 --> 00:37:35,340
so new now we know a little bit more so

935
00:37:33,630 --> 00:37:37,280
we need to read the waveform from the

936
00:37:35,340 --> 00:37:39,690
flash chip then we need to convert it

937
00:37:37,280 --> 00:37:42,210
then we need to load the kernel module

938
00:37:39,690 --> 00:37:44,610
for the PDC handing it the converted

939
00:37:42,210 --> 00:37:46,500
waveform when we load it and then let's

940
00:37:44,610 --> 00:37:49,440
assume we need to do some kind of extra

941
00:37:46,500 --> 00:37:51,030
variety need to do some kind of loading

942
00:37:49,440 --> 00:37:54,030
of next driver in order to get X working

943
00:37:51,030 --> 00:37:56,640
all right so there is an extra very

944
00:37:54,030 --> 00:37:59,450
wasn't in the GPL dump but it was

945
00:37:56,640 --> 00:38:02,580
available from freescale themselves I

946
00:37:59,450 --> 00:38:03,990
found a bunch of patches mostly from

947
00:38:02,580 --> 00:38:05,640
built route they had a bunch of patches

948
00:38:03,990 --> 00:38:08,160
for it that made it a little more modern

949
00:38:05,640 --> 00:38:09,330
I added some a little bit of work to

950
00:38:08,160 --> 00:38:12,480
make it work with the latest and

951
00:38:09,330 --> 00:38:13,710
greatest X Server and then I also found

952
00:38:12,480 --> 00:38:16,170
out that unfortunately it wouldn't

953
00:38:13,710 --> 00:38:19,260
compile because it was dependent on this

954
00:38:16,170 --> 00:38:22,380
is Z 160 library that's proprietary but

955
00:38:19,260 --> 00:38:24,360
luckily I was able to just pull out the

956
00:38:22,380 --> 00:38:26,220
the dependency and the only thing we

957
00:38:24,360 --> 00:38:28,680
lost was 2d acceleration which honestly

958
00:38:26,220 --> 00:38:33,959
like that displace so slow I don't think

959
00:38:28,680 --> 00:38:36,180
we're ever gonna notice that turns out

960
00:38:33,960 --> 00:38:38,850
that's not only neat when you load the X

961
00:38:36,180 --> 00:38:40,680
driver and you load the kernel module

962
00:38:38,850 --> 00:38:42,870
and everything is about you start your

963
00:38:40,680 --> 00:38:44,640
server and nothing happens and the

964
00:38:42,870 --> 00:38:46,259
reason why nothing happens is they were

965
00:38:44,640 --> 00:38:48,600
used to displace where you just right

966
00:38:46,260 --> 00:38:51,120
to the frame buffer or whatever you're

967
00:38:48,600 --> 00:38:53,310
gonna do and then display updates but

968
00:38:51,120 --> 00:38:55,529
electronic paper you probably really

969
00:38:53,310 --> 00:38:57,930
don't want that behavior if you want if

970
00:38:55,530 --> 00:38:59,370
you have an auto automatic update on

971
00:38:57,930 --> 00:39:01,500
your display then you don't have any

972
00:38:59,370 --> 00:39:03,450
control over kind of update mode you're

973
00:39:01,500 --> 00:39:05,970
using if you're using like a clean slow

974
00:39:03,450 --> 00:39:08,100
flashing update or you're using a much

975
00:39:05,970 --> 00:39:10,470
faster and clean update or a dirty

976
00:39:08,100 --> 00:39:11,970
update so when you're using something

977
00:39:10,470 --> 00:39:14,609
like the original operating system on

978
00:39:11,970 --> 00:39:16,410
the Kindle the UI you'll see like menus

979
00:39:14,610 --> 00:39:17,670
and things that update quickly they have

980
00:39:16,410 --> 00:39:19,890
to be responsive when you click around

981
00:39:17,670 --> 00:39:22,530
and you'll see stuff like when you're

982
00:39:19,890 --> 00:39:24,569
paging through the the books he'll do is

983
00:39:22,530 --> 00:39:26,430
on like a reasonably clean update and

984
00:39:24,570 --> 00:39:28,710
then every like three or five pages

985
00:39:26,430 --> 00:39:31,919
it'll do like a slower flashing update

986
00:39:28,710 --> 00:39:33,690
to kind of clear away all the the damage

987
00:39:31,920 --> 00:39:36,360
that's built up all these like pixels

988
00:39:33,690 --> 00:39:38,880
that didn't switch properly so the idea

989
00:39:36,360 --> 00:39:41,160
with with the ink displays is that the

990
00:39:38,880 --> 00:39:43,740
application should be aware that the ink

991
00:39:41,160 --> 00:39:44,819
and be intelligent and tell the system

992
00:39:43,740 --> 00:39:48,089
went to update and the way this is

993
00:39:44,820 --> 00:39:49,830
implemented is that you actually just do

994
00:39:48,090 --> 00:39:51,420
these i/o control calls this kind of

995
00:39:49,830 --> 00:39:54,180
sounds kind of hokey but you do i/o

996
00:39:51,420 --> 00:39:56,010
control calls that instructs the kernel

997
00:39:54,180 --> 00:39:57,690
driver so okay whatever you have in the

998
00:39:56,010 --> 00:39:59,580
buffer and now update and you can tell

999
00:39:57,690 --> 00:40:01,050
it do the entire display or you tell it

1000
00:39:59,580 --> 00:40:02,490
a square that you want to update and

1001
00:40:01,050 --> 00:40:04,290
then you can tell it which mode to use

1002
00:40:02,490 --> 00:40:06,029
to update and then you can also wait for

1003
00:40:04,290 --> 00:40:07,500
an update to be complete there's other

1004
00:40:06,030 --> 00:40:10,800
things you can do but that's the core of

1005
00:40:07,500 --> 00:40:12,630
it all right so it looks like this is

1006
00:40:10,800 --> 00:40:15,570
what we need to do we need to actually

1007
00:40:12,630 --> 00:40:19,980
modify all the apps to issue updates via

1008
00:40:15,570 --> 00:40:21,420
ioctl that's really annoying so as we

1009
00:40:19,980 --> 00:40:23,850
saw before or there's one of these

1010
00:40:21,420 --> 00:40:25,920
tarballs ahead awesome built into it I

1011
00:40:23,850 --> 00:40:28,080
looked at that awesome and I dipped it

1012
00:40:25,920 --> 00:40:31,080
against the same version of Awesome from

1013
00:40:28,080 --> 00:40:33,299
the official repo and it looked like

1014
00:40:31,080 --> 00:40:36,420
they had added some things that allowed

1015
00:40:33,300 --> 00:40:38,910
them to get X damage events X damage

1016
00:40:36,420 --> 00:40:42,240
events are from the X server the

1017
00:40:38,910 --> 00:40:44,399
whenever anything changes on display you

1018
00:40:42,240 --> 00:40:46,560
can register for X damage events and

1019
00:40:44,400 --> 00:40:49,680
I'll tell you which square was changed

1020
00:40:46,560 --> 00:40:52,080
so they got awesome to be able to get

1021
00:40:49,680 --> 00:40:54,569
these this event information this X

1022
00:40:52,080 --> 00:40:56,819
damage information and that's that's all

1023
00:40:54,570 --> 00:40:59,220
you could gather from that but what

1024
00:40:56,820 --> 00:41:01,109
they're probably doing is they were

1025
00:40:59,220 --> 00:41:03,660
probably having some other codes so

1026
00:41:01,109 --> 00:41:04,710
awesome is scriptable and dua so it's

1027
00:41:03,660 --> 00:41:07,440
very easy to add all these

1028
00:41:04,710 --> 00:41:10,380
functionalities to awesome using its lua

1029
00:41:07,440 --> 00:41:19,109
api which is called awful it's not awful

1030
00:41:10,380 --> 00:41:20,280
it's pretty good and if you if you do

1031
00:41:19,109 --> 00:41:21,270
this kind of perhaps its kind of patched

1032
00:41:20,280 --> 00:41:23,190
you should be able to write a little

1033
00:41:21,270 --> 00:41:24,810
piece of lua code that then every time

1034
00:41:23,190 --> 00:41:26,460
there's an update triggers wanted these

1035
00:41:24,810 --> 00:41:28,080
i/o control calls and actually updates

1036
00:41:26,460 --> 00:41:30,570
to display and maybe you could even have

1037
00:41:28,080 --> 00:41:31,710
like per app logic which is awesome

1038
00:41:30,570 --> 00:41:33,720
support so you can say like well this

1039
00:41:31,710 --> 00:41:35,010
app should have this kind of update mode

1040
00:41:33,720 --> 00:41:37,290
this app should have this kind of update

1041
00:41:35,010 --> 00:41:40,349
mode maybe you could even have some apps

1042
00:41:37,290 --> 00:41:42,300
that are like semi aware of the yank

1043
00:41:40,349 --> 00:41:43,530
displays and tells awesome like hey

1044
00:41:42,300 --> 00:41:45,119
switch to this mode hey switch to this

1045
00:41:43,530 --> 00:41:47,369
mode i'll use this mode for the menu use

1046
00:41:45,119 --> 00:41:48,780
this mode so it sounds like a reasonable

1047
00:41:47,369 --> 00:41:49,800
thing to do unfortunately they're

1048
00:41:48,780 --> 00:41:52,770
awesome

1049
00:41:49,800 --> 00:41:54,900
perhaps awesome it's ancient and so i

1050
00:41:52,770 --> 00:41:56,820
just looked at their patches and I

1051
00:41:54,900 --> 00:41:58,260
talked to the awesome developer and I

1052
00:41:56,820 --> 00:42:03,180
implemented the patches on the latest

1053
00:41:58,260 --> 00:42:05,150
version of Awesome and so yeah so now we

1054
00:42:03,180 --> 00:42:07,319
have these extend much event hooks I

1055
00:42:05,150 --> 00:42:09,540
compiled awesome against luigia to get

1056
00:42:07,320 --> 00:42:14,150
some good speed and then I wrote this

1057
00:42:09,540 --> 00:42:16,890
tiny EP DC i/o control Lua library and

1058
00:42:14,150 --> 00:42:19,200
here's the little final piece of code

1059
00:42:16,890 --> 00:42:21,270
for awesome where you can see I'm

1060
00:42:19,200 --> 00:42:23,040
connecting to the damage signals for the

1061
00:42:21,270 --> 00:42:24,570
each client as they come up and for the

1062
00:42:23,040 --> 00:42:26,640
screen itself and then every time

1063
00:42:24,570 --> 00:42:29,010
there's a damage event it gets the area

1064
00:42:26,640 --> 00:42:32,819
and it does this ePaper update partial

1065
00:42:29,010 --> 00:42:37,190
which triggers the i/o CTL alright so

1066
00:42:32,820 --> 00:42:37,190
let's look at this finally we get to

1067
00:42:45,400 --> 00:42:50,590
here we go so now we can just run

1068
00:42:48,040 --> 00:42:52,529
arbitrary ups and whenever the display

1069
00:42:50,590 --> 00:42:56,020
updates it'll actually update and see

1070
00:42:52,530 --> 00:42:57,940
there was a short video you can see that

1071
00:42:56,020 --> 00:42:59,860
there's a lot of stuff left over because

1072
00:42:57,940 --> 00:43:01,990
I'm using it's really unclean this dirty

1073
00:42:59,860 --> 00:43:09,070
update mode but you can switch that as

1074
00:43:01,990 --> 00:43:10,689
you see fit and just to see what I could

1075
00:43:09,070 --> 00:43:15,100
get away with with this really simple

1076
00:43:10,690 --> 00:43:17,110
system that I ran some different demos

1077
00:43:15,100 --> 00:43:18,430
so you can see you can get it's not

1078
00:43:17,110 --> 00:43:22,030
terrible you can get things moving

1079
00:43:18,430 --> 00:43:23,350
pretty quickly and this is not using the

1080
00:43:22,030 --> 00:43:25,330
animation update mode I was talking

1081
00:43:23,350 --> 00:43:29,710
about before the animation of that mode

1082
00:43:25,330 --> 00:43:30,880
when I tried it it didn't do anything so

1083
00:43:29,710 --> 00:43:32,620
there must be some trick to it I haven't

1084
00:43:30,880 --> 00:43:34,300
discovered yet if we could get animation

1085
00:43:32,620 --> 00:43:37,150
out date we get about twice the frame

1086
00:43:34,300 --> 00:43:39,580
rate a much much sturdier updates I

1087
00:43:37,150 --> 00:43:42,360
would assume so I'm gonna try to

1088
00:43:39,580 --> 00:43:47,650
experiment more with that going forward

1089
00:43:42,360 --> 00:43:50,260
errors and a little graphics demo yeah

1090
00:43:47,650 --> 00:43:51,520
so you can you can run stuff but you

1091
00:43:50,260 --> 00:43:53,800
don't have to care about what it is and

1092
00:43:51,520 --> 00:43:55,590
you see there's some weirdness going on

1093
00:43:53,800 --> 00:43:57,790
where things are changing really quickly

1094
00:43:55,590 --> 00:44:01,960
you can switch the update modes if you

1095
00:43:57,790 --> 00:44:03,940
want to get better results or just

1096
00:44:01,960 --> 00:44:11,710
experiment with what what works for your

1097
00:44:03,940 --> 00:44:14,230
app alright so here we are we have

1098
00:44:11,710 --> 00:44:15,780
display working we have everything

1099
00:44:14,230 --> 00:44:18,910
working that we want to except maybe

1100
00:44:15,780 --> 00:44:21,420
this BBC aware app idea something to be

1101
00:44:18,910 --> 00:44:21,420
even a minute

1102
00:44:21,780 --> 00:44:27,670
so the EPG see unfortunately has some

1103
00:44:24,880 --> 00:44:28,870
limitations of it it has a cool feature

1104
00:44:27,670 --> 00:44:31,600
we can actually do four simultaneous

1105
00:44:28,870 --> 00:44:33,400
updates as long as they're not

1106
00:44:31,600 --> 00:44:36,190
overlapping so you can get a little bit

1107
00:44:33,400 --> 00:44:39,430
more speed if you design your app around

1108
00:44:36,190 --> 00:44:41,020
that and and now this animation update

1109
00:44:39,430 --> 00:44:43,149
mode if we can get it working the

1110
00:44:41,020 --> 00:44:46,240
fastest possible rate is eight point

1111
00:44:43,150 --> 00:44:49,150
five Hertz it's not very fast but it's

1112
00:44:46,240 --> 00:44:50,680
something alright so let's see can we

1113
00:44:49,150 --> 00:44:53,230
get can we get some hybrids in free

1114
00:44:50,680 --> 00:44:55,029
software I showed using kxx on this

1115
00:44:53,230 --> 00:44:56,590
Kindle where I have root access but what

1116
00:44:55,030 --> 00:44:57,820
if I didn't have whatever I didn't want

1117
00:44:56,590 --> 00:44:58,840
to do that because I was worried it was

1118
00:44:57,820 --> 00:45:00,430
illegal whatever

1119
00:44:58,840 --> 00:45:01,810
just want to wipe everything clean and

1120
00:45:00,430 --> 00:45:05,290
just have a completely free and

1121
00:45:01,810 --> 00:45:07,180
open-source software system looking at

1122
00:45:05,290 --> 00:45:08,710
the IMX manual which there's a really

1123
00:45:07,180 --> 00:45:10,390
nice reference manual because free scale

1124
00:45:08,710 --> 00:45:12,970
is really nice about that they publish

1125
00:45:10,390 --> 00:45:15,430
documentation for their stuff there's

1126
00:45:12,970 --> 00:45:17,529
this interesting mode called the USB

1127
00:45:15,430 --> 00:45:19,240
download mode it's kind of oddly named

1128
00:45:17,530 --> 00:45:21,010
because the person who wrote it was

1129
00:45:19,240 --> 00:45:24,040
pretending that are sitting inside of

1130
00:45:21,010 --> 00:45:26,290
the chip on the on the Kindle and

1131
00:45:24,040 --> 00:45:27,550
downloading things from you so it's

1132
00:45:26,290 --> 00:45:29,590
really like an upload mode or you can

1133
00:45:27,550 --> 00:45:31,660
send it data and I deal with it is that

1134
00:45:29,590 --> 00:45:33,580
it's built into the rom of the chip

1135
00:45:31,660 --> 00:45:37,930
itself of the Freescale IMX

1136
00:45:33,580 --> 00:45:40,000
508 and if you can toggle these pins

1137
00:45:37,930 --> 00:45:41,799
these two pins the right setting then

1138
00:45:40,000 --> 00:45:43,750
when in bootstrap it goes into this mode

1139
00:45:41,800 --> 00:45:45,520
before it even looks at the flash before

1140
00:45:43,750 --> 00:45:47,920
it loads anything that was made by

1141
00:45:45,520 --> 00:45:49,150
Amazon in lab 126 and then you should be

1142
00:45:47,920 --> 00:45:52,570
able to give it your own code and boot

1143
00:45:49,150 --> 00:45:54,190
into that well how do we find these keep

1144
00:45:52,570 --> 00:45:56,500
out you have to open it we have to start

1145
00:45:54,190 --> 00:45:58,540
our stuff while I was a developer I

1146
00:45:56,500 --> 00:46:00,370
would be really lazy and I would just

1147
00:45:58,540 --> 00:46:02,290
use some of the buttons so I could hold

1148
00:46:00,370 --> 00:46:06,060
on some buttons find foods so I wonder

1149
00:46:02,290 --> 00:46:08,740
if they did that and of course they did

1150
00:46:06,060 --> 00:46:10,420
it it turns out that it's not even two

1151
00:46:08,740 --> 00:46:11,830
buttons they already target they only

1152
00:46:10,420 --> 00:46:13,510
have one of the GPIO put pins just

1153
00:46:11,830 --> 00:46:15,759
permanently sets the right setting and

1154
00:46:13,510 --> 00:46:18,310
the other one is the down button on the

1155
00:46:15,760 --> 00:46:21,220
little five way keypad thing so you just

1156
00:46:18,310 --> 00:46:22,630
hold the power button for 20 seconds you

1157
00:46:21,220 --> 00:46:24,970
might be confused when you do this that

1158
00:46:22,630 --> 00:46:26,500
it it doesn't work the way you use if

1159
00:46:24,970 --> 00:46:28,600
you think it's gonna work you hold down

1160
00:46:26,500 --> 00:46:30,220
the power button for 20 seconds after 15

1161
00:46:28,600 --> 00:46:31,509
seconds the light goes off and you have

1162
00:46:30,220 --> 00:46:33,640
to hold it for five more seconds and

1163
00:46:31,510 --> 00:46:35,050
then you press down the down button and

1164
00:46:33,640 --> 00:46:37,450
you release the power button and you

1165
00:46:35,050 --> 00:46:39,400
release the down button and then if you

1166
00:46:37,450 --> 00:46:41,200
look at the ls USB you'll see that it

1167
00:46:39,400 --> 00:46:43,630
suddenly doesn't come off as an Amazon

1168
00:46:41,200 --> 00:46:46,319
device it comes or lab 126 device it

1169
00:46:43,630 --> 00:46:48,520
comes up as a free scale device and then

1170
00:46:46,320 --> 00:46:50,910
this nice company called boundary

1171
00:46:48,520 --> 00:46:53,770
devices they made this IMX USB loader

1172
00:46:50,910 --> 00:46:55,660
open-source program that implements that

1173
00:46:53,770 --> 00:46:57,850
communication standard so you can just

1174
00:46:55,660 --> 00:47:02,759
use this to send like arbitrary binary

1175
00:46:57,850 --> 00:47:04,779
data and it just gets executed right

1176
00:47:02,760 --> 00:47:06,670
that's gonna go demo but I'm running

1177
00:47:04,780 --> 00:47:09,430
short of time so maybe let's skip that

1178
00:47:06,670 --> 00:47:12,190
right now but what what we can do is you

1179
00:47:09,430 --> 00:47:13,598
if you can download that GPL dump and

1180
00:47:12,190 --> 00:47:14,859
you boot in there actually compiled

1181
00:47:13,599 --> 00:47:17,050
spinning Li that wasn't missing any

1182
00:47:14,859 --> 00:47:19,000
headers or anything and it actually

1183
00:47:17,050 --> 00:47:20,890
boots so you can just recompile it you

1184
00:47:19,000 --> 00:47:23,230
boot modified however you like and then

1185
00:47:20,890 --> 00:47:25,540
add features to it whatever so this is

1186
00:47:23,230 --> 00:47:28,030
the ivory compiled as is without any

1187
00:47:25,540 --> 00:47:30,339
changes and then I use this USB

1188
00:47:28,030 --> 00:47:32,380
downloader thing to put it on to load it

1189
00:47:30,339 --> 00:47:34,390
on there and then the USB download it

1190
00:47:32,380 --> 00:47:37,060
doesn't modify the flash it just loads

1191
00:47:34,390 --> 00:47:39,790
it into memory and executes so it's you

1192
00:47:37,060 --> 00:47:41,470
feel free to experiment looking at the

1193
00:47:39,790 --> 00:47:42,880
available commands it's very

1194
00:47:41,470 --> 00:47:44,589
disappointing there's almost nothing

1195
00:47:42,880 --> 00:47:47,020
useful there isn't nothing useful here

1196
00:47:44,589 --> 00:47:51,400
so okay now we have au boot boot how do

1197
00:47:47,020 --> 00:47:53,829
we get further so there's this file

1198
00:47:51,400 --> 00:47:57,280
included fastboot that's e and that's

1199
00:47:53,829 --> 00:47:59,260
kind of that's interesting fast food is

1200
00:47:57,280 --> 00:48:02,079
a thing Android uses and to allow people

1201
00:47:59,260 --> 00:48:02,730
to reflash their devices and among other

1202
00:48:02,079 --> 00:48:06,880
things

1203
00:48:02,730 --> 00:48:09,099
alright limitations on Shiv RAM is the

1204
00:48:06,880 --> 00:48:10,839
this is the tiny amount of RAM that's

1205
00:48:09,099 --> 00:48:12,310
inside the chip so it turns out when

1206
00:48:10,839 --> 00:48:14,799
you're bringing up a system including a

1207
00:48:12,310 --> 00:48:18,430
system when you first start executing

1208
00:48:14,800 --> 00:48:20,319
code it doesn't have the RAM initialized

1209
00:48:18,430 --> 00:48:23,618
the RAM is an external device that

1210
00:48:20,319 --> 00:48:25,390
needed initialization so when you give

1211
00:48:23,619 --> 00:48:27,310
it code the first thing you have to do

1212
00:48:25,390 --> 00:48:29,500
is you have to fit it into 72 kilobytes

1213
00:48:27,310 --> 00:48:32,049
because that's all the RAM that's on the

1214
00:48:29,500 --> 00:48:33,579
system so you can see why they might

1215
00:48:32,050 --> 00:48:35,260
have gone with this tiny minimal you

1216
00:48:33,579 --> 00:48:36,609
boot that has no features that kind of

1217
00:48:35,260 --> 00:48:40,060
sucks cuz we try to add any features

1218
00:48:36,609 --> 00:48:41,710
would go across the 72 kilobyte limit so

1219
00:48:40,060 --> 00:48:42,819
I searched around a little bit to see if

1220
00:48:41,710 --> 00:48:46,450
other people that looked at this before

1221
00:48:42,819 --> 00:48:49,270
and turned out that on this forum this

1222
00:48:46,450 --> 00:48:51,848
person in eureka said that they actually

1223
00:48:49,270 --> 00:48:54,250
managed to just like really hack away at

1224
00:48:51,849 --> 00:48:56,020
all the features and just only put in

1225
00:48:54,250 --> 00:48:57,940
the fast food feature and nothing else

1226
00:48:56,020 --> 00:48:59,589
and get a fast food fast food

1227
00:48:57,940 --> 00:49:00,970
functionality working and they they were

1228
00:48:59,589 --> 00:49:03,759
nice enough to post the patch this is

1229
00:49:00,970 --> 00:49:05,618
from 2012 I contacted Eureka no response

1230
00:49:03,760 --> 00:49:08,920
of course this is a forum post from 2012

1231
00:49:05,619 --> 00:49:11,740
ones and random forum and they posted

1232
00:49:08,920 --> 00:49:13,210
the patch as a forum comment which got

1233
00:49:11,740 --> 00:49:17,319
cut off because of character limit or

1234
00:49:13,210 --> 00:49:19,540
something that's great so after a long

1235
00:49:17,319 --> 00:49:20,920
evening i reconstructed the original

1236
00:49:19,540 --> 00:49:23,079
patched I think at least was working for

1237
00:49:20,920 --> 00:49:24,750
me and so now you can get that off the

1238
00:49:23,079 --> 00:49:27,030
free dink github

1239
00:49:24,750 --> 00:49:28,770
and this other person called mileage did

1240
00:49:27,030 --> 00:49:30,780
a fresh boot client the given minimal

1241
00:49:28,770 --> 00:49:33,600
fastboot client that has some changes

1242
00:49:30,780 --> 00:49:41,550
allowing it to work with this modified

1243
00:49:33,600 --> 00:49:42,839
tiny fastboot Kindle and so together I'm

1244
00:49:41,550 --> 00:49:44,820
again I'm out of time

1245
00:49:42,840 --> 00:49:46,740
together you can actually do you can

1246
00:49:44,820 --> 00:49:48,990
actually load you boot with a fast boot

1247
00:49:46,740 --> 00:49:51,000
once the fast boot is loaded you have

1248
00:49:48,990 --> 00:49:53,910
the ability to flash something like

1249
00:49:51,000 --> 00:49:55,440
flash erase all the partitions so we

1250
00:49:53,910 --> 00:49:56,910
should be able to use this to make like

1251
00:49:55,440 --> 00:49:59,130
an installable image it just wipes

1252
00:49:56,910 --> 00:50:00,330
everything the only thing I need to

1253
00:49:59,130 --> 00:50:01,680
change to get that I haven't gotten

1254
00:50:00,330 --> 00:50:03,299
there yet does the only thing I need to

1255
00:50:01,680 --> 00:50:06,540
change that I need to change the imagery

1256
00:50:03,300 --> 00:50:08,810
em FS image a little bit and the initial

1257
00:50:06,540 --> 00:50:11,220
at the init file so that it actually

1258
00:50:08,810 --> 00:50:13,640
uses the official partitions instead of

1259
00:50:11,220 --> 00:50:17,279
doing this weird thing where it uses a

1260
00:50:13,640 --> 00:50:20,370
like x2 for our next four file in a file

1261
00:50:17,280 --> 00:50:21,570
on the file system so if you change is

1262
00:50:20,370 --> 00:50:23,940
needed but it should be easy for us to

1263
00:50:21,570 --> 00:50:26,790
do this and have a legal installable

1264
00:50:23,940 --> 00:50:29,340
complete new system and if anyone wants

1265
00:50:26,790 --> 00:50:31,290
to help you should come to me after this

1266
00:50:29,340 --> 00:50:32,400
or just like look at the website and go

1267
00:50:31,290 --> 00:50:36,000
in the github and try to compile

1268
00:50:32,400 --> 00:50:38,760
everything just really quickly

1269
00:50:36,000 --> 00:50:40,290
Wi-Fi is one of the things that is a

1270
00:50:38,760 --> 00:50:43,470
little bit problematic for these devices

1271
00:50:40,290 --> 00:50:45,270
it's not an open-source well it's an ami

1272
00:50:43,470 --> 00:50:47,790
source driver but there are hard Mac

1273
00:50:45,270 --> 00:50:49,530
chipsets in use on these things so that

1274
00:50:47,790 --> 00:50:50,910
means that they need not just the driver

1275
00:50:49,530 --> 00:50:53,940
but they also need the firmware that

1276
00:50:50,910 --> 00:50:55,859
gets loaded onto the chip that's pretty

1277
00:50:53,940 --> 00:50:59,010
standard but annoying mean citizen it's

1278
00:50:55,860 --> 00:51:00,900
not completely free software but then on

1279
00:50:59,010 --> 00:51:03,090
top of that it requires the calibration

1280
00:51:00,900 --> 00:51:04,230
data set and the calibration data set

1281
00:51:03,090 --> 00:51:05,400
again is one of these things for the

1282
00:51:04,230 --> 00:51:09,120
copyrights that is it's kind of like

1283
00:51:05,400 --> 00:51:11,310
yeah who knows but I talked recently

1284
00:51:09,120 --> 00:51:13,470
tore one of the kernel developers the

1285
00:51:11,310 --> 00:51:16,440
Linux kernel developers works on Wi-Fi

1286
00:51:13,470 --> 00:51:18,149
stuff and they said that the community

1287
00:51:16,440 --> 00:51:19,890
or the community of kernel developers

1288
00:51:18,150 --> 00:51:22,470
have come down on the side of it's

1289
00:51:19,890 --> 00:51:25,080
actually not copyrightable and we should

1290
00:51:22,470 --> 00:51:28,230
be able to freely distribute it and so

1291
00:51:25,080 --> 00:51:29,700
they will accept a pull request with

1292
00:51:28,230 --> 00:51:31,610
these data sets so I'm gonna make sure

1293
00:51:29,700 --> 00:51:33,509
one of those as soon as I get home

1294
00:51:31,610 --> 00:51:36,180
alright what's needed to get to one to

1295
00:51:33,510 --> 00:51:37,770
my no code name and had wanna after the

1296
00:51:36,180 --> 00:51:47,759
first author who

1297
00:51:37,770 --> 00:51:53,280
it was the name of and I'm cut off all

1298
00:51:47,760 --> 00:51:54,780
right okay so I only had a couple of

1299
00:51:53,280 --> 00:51:58,020
slides basically like what's working now

1300
00:51:54,780 --> 00:51:59,670
we have basically Debian minimal debian

1301
00:51:58,020 --> 00:52:01,950
with graphics working

1302
00:51:59,670 --> 00:52:04,380
we have button input we have USB

1303
00:52:01,950 --> 00:52:05,939
networking so once you load into it if

1304
00:52:04,380 --> 00:52:07,890
you have used we had connect over USB

1305
00:52:05,940 --> 00:52:09,690
when you even boot into it

1306
00:52:07,890 --> 00:52:11,190
it'll come up as a USB networking device

1307
00:52:09,690 --> 00:52:14,390
and give you an IP address and you just

1308
00:52:11,190 --> 00:52:17,790
SSH into it and the password is freed

1309
00:52:14,390 --> 00:52:20,009
the dual booting is working as you kind

1310
00:52:17,790 --> 00:52:21,540
of saw you can flash but we don't have

1311
00:52:20,010 --> 00:52:24,870
an image that's just like ready to go

1312
00:52:21,540 --> 00:52:26,190
for flashing and then Wi-Fi works with

1313
00:52:24,870 --> 00:52:28,290
the little caveat that you need this

1314
00:52:26,190 --> 00:52:32,370
data set this the calibration data and

1315
00:52:28,290 --> 00:52:33,750
the thing is missing is in order to get

1316
00:52:32,370 --> 00:52:35,970
this to a state where people can use it

1317
00:52:33,750 --> 00:52:37,590
as to your every day replacement is we

1318
00:52:35,970 --> 00:52:39,450
need a little simple install our that

1319
00:52:37,590 --> 00:52:43,110
makes the flashing process super easy

1320
00:52:39,450 --> 00:52:46,020
we need to port and bundle KO reader the

1321
00:52:43,110 --> 00:52:48,000
KO reader is this really nice ebook

1322
00:52:46,020 --> 00:52:49,320
reading application that a bunch of

1323
00:52:48,000 --> 00:52:51,570
people worked on and it's actively

1324
00:52:49,320 --> 00:52:53,310
developed that you can currently siloed

1325
00:52:51,570 --> 00:52:54,690
onto a Kindle on the official operating

1326
00:52:53,310 --> 00:52:56,520
system but in order to make it site

1327
00:52:54,690 --> 00:52:58,020
loadable they did all this hacky stuff

1328
00:52:56,520 --> 00:52:59,670
and so we have to kind of strip all that

1329
00:52:58,020 --> 00:53:02,370
 out and make it into a normal

1330
00:52:59,670 --> 00:53:04,170
application so they can run on a normal

1331
00:53:02,370 --> 00:53:07,200
kind of system and it shouldn't be too

1332
00:53:04,170 --> 00:53:08,700
hard but if we get that it should you

1333
00:53:07,200 --> 00:53:10,589
should be able to you should be able to

1334
00:53:08,700 --> 00:53:11,669
use these as its intended an e-book

1335
00:53:10,590 --> 00:53:15,390
reader but running all free and

1336
00:53:11,670 --> 00:53:16,920
open-source software I don't have USB

1337
00:53:15,390 --> 00:53:20,700
storage device mode working should be

1338
00:53:16,920 --> 00:53:22,890
pretty simple and interesting things

1339
00:53:20,700 --> 00:53:24,540
someone gave me a set of patches that

1340
00:53:22,890 --> 00:53:26,670
should enable use beyond the go mode I

1341
00:53:24,540 --> 00:53:29,790
haven't tested them yet but he claims

1342
00:53:26,670 --> 00:53:31,560
that they work so again is this an

1343
00:53:29,790 --> 00:53:33,180
ancient kernel but it should allow us to

1344
00:53:31,560 --> 00:53:34,529
hook in like a keyboard and use it as a

1345
00:53:33,180 --> 00:53:39,569
complete computer and just like have a

1346
00:53:34,530 --> 00:53:41,460
terminal and stuff like that and from

1347
00:53:39,570 --> 00:53:43,530
here on out after that I think the plan

1348
00:53:41,460 --> 00:53:44,550
is just to support more devices to get

1349
00:53:43,530 --> 00:53:48,990
all the fourth and fifth generation

1350
00:53:44,550 --> 00:53:50,080
Kindles and then maybe some cobos so

1351
00:53:48,990 --> 00:53:52,479
yeah thanks to

1352
00:53:50,080 --> 00:53:54,100
helpful with this just if you'll have

1353
00:53:52,480 --> 00:53:55,600
questions I can't see if anyone's lined

1354
00:53:54,100 --> 00:53:57,730
up for the microphone but if you have

1355
00:53:55,600 --> 00:53:59,680
questions you just get up to microphone

1356
00:53:57,730 --> 00:54:01,840
I well people doing that I'll just thank

1357
00:53:59,680 --> 00:54:04,660
the Fein opens are sort of a software

1358
00:54:01,840 --> 00:54:06,670
community the FF it's like on the

1359
00:54:04,660 --> 00:54:08,830
awesome developer Alex Pappas so glue

1360
00:54:06,670 --> 00:54:10,690
for you boot help boundary devices for

1361
00:54:08,830 --> 00:54:12,670
their own cool loader Christian half for

1362
00:54:10,690 --> 00:54:14,290
the USB on-the-go patches and Scotty

1363
00:54:12,670 --> 00:54:16,660
from strange parts from for the

1364
00:54:14,290 --> 00:54:18,160
microscope access of course also the

1365
00:54:16,660 --> 00:54:30,250
Kindle hackers I mentioned before on I

1366
00:54:18,160 --> 00:54:32,080
lose to Bob and Eureka so did any of the

1367
00:54:30,250 --> 00:54:35,500
Kindles that you played with have the 3G

1368
00:54:32,080 --> 00:54:37,690
capability and did you have any time to

1369
00:54:35,500 --> 00:54:41,620
experiment with it

1370
00:54:37,690 --> 00:54:43,330
no no well I mean I didn't actually

1371
00:54:41,620 --> 00:54:45,100
check if they did I have to strip out

1372
00:54:43,330 --> 00:54:46,870
even the 2d exploration so I kind of

1373
00:54:45,100 --> 00:54:48,819
doubt that there's any 3d acceleration

1374
00:54:46,870 --> 00:54:53,470
left if you're talking about the

1375
00:54:48,820 --> 00:54:57,550
capability of course so you can oh sorry

1376
00:54:53,470 --> 00:55:01,120
3G all right so three is a good question

1377
00:54:57,550 --> 00:55:03,150
3G is built into all these Kindles it's

1378
00:55:01,120 --> 00:55:05,859
very limited you can only use it for

1379
00:55:03,150 --> 00:55:07,180
going through EMS to specific websites

1380
00:55:05,860 --> 00:55:08,320
but some of them are not some of them

1381
00:55:07,180 --> 00:55:10,330
you allows you to do it on our website

1382
00:55:08,320 --> 00:55:12,580
but it kind goes through Amazon for that

1383
00:55:10,330 --> 00:55:14,680
there's been in the community of Kindle

1384
00:55:12,580 --> 00:55:17,680
hackers there's kind of this unspoken

1385
00:55:14,680 --> 00:55:19,450
agreement that people don't want to miss

1386
00:55:17,680 --> 00:55:20,980
too much with that because if people

1387
00:55:19,450 --> 00:55:22,720
mess too much with it

1388
00:55:20,980 --> 00:55:24,880
they might might just revoke it and

1389
00:55:22,720 --> 00:55:27,730
they've done that to some degree with

1390
00:55:24,880 --> 00:55:29,920
other devices so if if we try to you

1391
00:55:27,730 --> 00:55:31,270
know use their data for something it

1392
00:55:29,920 --> 00:55:33,250
wasn't intended for they might lock it

1393
00:55:31,270 --> 00:55:35,170
down more or just get rid of it that

1394
00:55:33,250 --> 00:55:36,430
being said I haven't really dug into too

1395
00:55:35,170 --> 00:55:39,490
much and should be pretty easy to use

1396
00:55:36,430 --> 00:55:41,140
the modem the more interesting thing I

1397
00:55:39,490 --> 00:55:42,189
think would be to replace the modem is

1398
00:55:41,140 --> 00:55:44,440
something that you actually have a

1399
00:55:42,190 --> 00:55:48,010
subscription for so you could use it for

1400
00:55:44,440 --> 00:55:50,860
any kind of data yeah haven't looked

1401
00:55:48,010 --> 00:55:52,300
into too much so my question is whether

1402
00:55:50,860 --> 00:55:54,820
you've heard of this I think it's a

1403
00:55:52,300 --> 00:55:57,850
Chinese sled project called duo con I

1404
00:55:54,820 --> 00:56:02,080
was uh yeah su nothing there so you take

1405
00:55:57,850 --> 00:56:04,690
over yeah yeah I'm installed do con

1406
00:56:02,080 --> 00:56:05,799
it's unfortunately the source codes not

1407
00:56:04,690 --> 00:56:08,500
available

1408
00:56:05,800 --> 00:56:10,090
it's a nice system though it's also a

1409
00:56:08,500 --> 00:56:11,410
thing the kind of side load as a

1410
00:56:10,090 --> 00:56:15,760
secondary operating system for those

1411
00:56:11,410 --> 00:56:17,740
haven't seen it and it replaces that the

1412
00:56:15,760 --> 00:56:20,020
closed Kindle operating system with a

1413
00:56:17,740 --> 00:56:30,790
Chinese closed system that uses a

1414
00:56:20,020 --> 00:56:33,310
Chinese e-book store all right any other

1415
00:56:30,790 --> 00:56:37,259
questions started to see here that's

1416
00:56:33,310 --> 00:56:40,509
right yes what I'm wondering is

1417
00:56:37,260 --> 00:56:43,420
apparently used a slightly older Kindle

1418
00:56:40,510 --> 00:56:45,370
a Kindle Keyboard I think his third yen

1419
00:56:43,420 --> 00:56:48,040
if I remember right yeah and I don't

1420
00:56:45,370 --> 00:56:50,290
necessarily care about having it totally

1421
00:56:48,040 --> 00:56:54,009
opened but I'd love to add a couple of

1422
00:56:50,290 --> 00:56:55,990
eBook format formats to it because one

1423
00:56:54,010 --> 00:56:58,420
of the annoying things is you can read

1424
00:56:55,990 --> 00:57:00,339
Moby but you can't read epub which the

1425
00:56:58,420 --> 00:57:02,170
rest of the world seems to prefer and I

1426
00:57:00,340 --> 00:57:03,240
mean to convert things it's a royal pain

1427
00:57:02,170 --> 00:57:07,600
in the rear

1428
00:57:03,240 --> 00:57:08,770
yeah I mean if you wanted to do if you

1429
00:57:07,600 --> 00:57:11,110
wanted to do completely free and open

1430
00:57:08,770 --> 00:57:12,550
then the problem with the anything

1431
00:57:11,110 --> 00:57:14,350
before the fourth generation of Kindle

1432
00:57:12,550 --> 00:57:16,960
is is that it's using a different epd

1433
00:57:14,350 --> 00:57:19,240
see it's using a something called the

1434
00:57:16,960 --> 00:57:20,380
Epson broadsheet if you just want a side

1435
00:57:19,240 --> 00:57:23,200
load something onto the existing

1436
00:57:20,380 --> 00:57:25,390
operating system a KO reader I talked

1437
00:57:23,200 --> 00:57:26,680
about before is an amazing ebook reader

1438
00:57:25,390 --> 00:57:28,990
application that supports basically

1439
00:57:26,680 --> 00:57:31,779
every format it does insane things like

1440
00:57:28,990 --> 00:57:34,629
it has a really good OCR system built in

1441
00:57:31,780 --> 00:57:35,710
it can figure out using vibrate other

1442
00:57:34,630 --> 00:57:37,960
people have written it can figure out

1443
00:57:35,710 --> 00:57:40,240
even scientific articles with multiple

1444
00:57:37,960 --> 00:57:41,650
kana columns to reflow those into single

1445
00:57:40,240 --> 00:57:43,990
columns all kinds of cool stuff and

1446
00:57:41,650 --> 00:57:45,790
that'll work on that service yeah you

1447
00:57:43,990 --> 00:57:48,279
should be able to well you have to have

1448
00:57:45,790 --> 00:57:48,850
a root access to your illegal root

1449
00:57:48,280 --> 00:57:51,760
access

1450
00:57:48,850 --> 00:57:55,230
how would I have that on series three so

1451
00:57:51,760 --> 00:57:55,230
yes I'll go with that

1452
00:58:00,600 --> 00:58:08,460
all right well uh thank you

1453
00:58:02,990 --> 00:58:08,459
[Applause]

1454
00:58:21,190 --> 00:58:23,250
you

