1
00:00:00,690 --> 00:00:04,529
I can ever hear me as my name is Travis
Goodspeed

2
00:00:04,529 --> 00:00:08,500
and the student University of Tennessee
and they work for a pitch National

3
00:00:08,500 --> 00:00:09,120
Laboratory

4
00:00:09,120 --> 00:00:12,540
this is a side project of mine that
began

5
00:00:12,540 --> 00:00:15,730
during May took on 2007 project

6
00:00:15,730 --> 00:00:19,439
which was a stack overflow exploit

7
00:00:19,439 --> 00:00:23,948
for an issue for 30 days wireless sensor
nets so

8
00:00:23,949 --> 00:00:27,189
where these nodes are deployed and where
they're running certain types

9
00:00:27,189 --> 00:00:30,320
microprocessors you can inject code into
them just as you would a computer

10
00:00:30,320 --> 00:00:35,070
but unlike your computer you have no
operating system

11
00:00:35,070 --> 00:00:39,129
you have no address space levin was
Asian you have known to the defense

12
00:00:39,129 --> 00:00:40,290
mechanisms

13
00:00:40,290 --> 00:00:43,339
they PCs and servers have built up over
the years

14
00:00:43,340 --> 00:00:46,430
its just

15
00:00:46,430 --> 00:00:50,620
flat memory space single application
perhaps there are some standard

16
00:00:50,620 --> 00:00:53,270
libraries but there's no OS as you know
it

17
00:00:53,270 --> 00:00:56,910
see this talk is going to describe

18
00:00:56,910 --> 00:01:00,910
methods reverse engineering software
that you've taken from such a platform

19
00:01:00,910 --> 00:01:04,000
and rather than

20
00:01:04,000 --> 00:01:08,610
introduce reverse engineering itself I'm
going to assume that you know the basics

21
00:01:08,610 --> 00:01:12,130
from say taking apart a PC program in
IDA Pro

22
00:01:12,130 --> 00:01:16,939
they you understand C functions in C
programming language

23
00:01:16,939 --> 00:01:21,090
that it's turned into assembly language
and all that stuff but you have no

24
00:01:21,090 --> 00:01:22,409
experience with

25
00:01:22,409 --> 00:01:27,210
wireless embedded systems Gordon St 4:30
in particular

26
00:01:27,210 --> 00:01:31,350
so I'm going to focus on those ways in
which

27
00:01:31,350 --> 00:01:34,479
this platform is different from the PC
and

28
00:01:34,479 --> 00:01:37,500
in the ways in which the tools are
different from PC

29
00:01:37,500 --> 00:01:41,409
I did does not support the industry for
30 sOooo

30
00:01:41,409 --> 00:01:44,689
I've been working on a pearl scraps
columnist to 430 static

31
00:01:44,689 --> 00:01:48,619
which is used to reverse engineer suffer
for the platform

32
00:01:48,619 --> 00:01:53,200
CST 4:30 itself is a 16-bit

33
00:01:53,200 --> 00:01:57,159
risk ish microcontroller and

34
00:01:57,159 --> 00:02:00,860
for those are you familiar with the
principles rescue was supposed to have

35
00:02:00,860 --> 00:02:05,259
single addressing mode well not sing
like this and that would sing with

36
00:02:05,259 --> 00:02:09,669
fetching and storing the RAM so if you
want to read anything from miami is a

37
00:02:09,670 --> 00:02:12,290
load if you wanna write anything Iran
use a store

38
00:02:12,290 --> 00:02:17,230
your addition your multiplication

39
00:02:17,230 --> 00:02:19,329
is or other opcodes

40
00:02:19,330 --> 00:02:22,350
cannot access RAM directly they can only
access the registers

41
00:02:22,350 --> 00:02:26,739
on an issue for thirty this isn't true
you've got complicated addressing

42
00:02:26,740 --> 00:02:27,590
schemes

43
00:02:27,590 --> 00:02:31,030
and this is necessary to fit firmware
within the

44
00:02:31,030 --> 00:02:34,140
limited RAM and flash memory at the
device

45
00:02:34,140 --> 00:02:38,730
and you can get an issue for 30 static
at SourceForge

46
00:02:38,730 --> 00:02:42,380
is amnesty for 30 static that s if that
net its

47
00:02:42,380 --> 00:02:46,040
poorly written prospects apologize for
that but

48
00:02:46,040 --> 00:02:49,120
it works and its

49
00:02:49,120 --> 00:02:52,670
design is being cleaned up this is the

50
00:02:52,670 --> 00:02:56,450
device that will be hacking today it's
the teal sp

51
00:02:56,450 --> 00:02:59,510
the design came out at the berkeley

52
00:02:59,510 --> 00:03:04,359
note project as you can see in the top

53
00:03:04,360 --> 00:03:07,660
there is and USB plug

54
00:03:07,660 --> 00:03:11,180
that just gives you a USB to serial port
which ran straight into the

55
00:03:11,180 --> 00:03:12,019
microcontroller

56
00:03:12,019 --> 00:03:15,140
on the left if you see that copper

57
00:03:15,140 --> 00:03:18,650
tracing around the

58
00:03:18,650 --> 00:03:25,120
a chip that Santana and that ship that
wraps around as a chip kahn 24 2010

59
00:03:25,120 --> 00:03:29,739
radio it is the edited at 15 at four

60
00:03:29,739 --> 00:03:34,799
protocol which analyzing be an ISA 100
invariably the low powered schemes

61
00:03:34,799 --> 00:03:38,540
this is much more low power than
Bluetooth

62
00:03:38,540 --> 00:03:41,640
and it doesn't specify modes is

63
00:03:41,640 --> 00:03:45,880
maintaining a connection it doesn't
specify anything except how to get a

64
00:03:45,880 --> 00:03:47,750
packet from one device to another

65
00:03:47,750 --> 00:03:51,040
everything else is built on top of that
by

66
00:03:51,040 --> 00:03:54,220
networking stocks and you can pick and
choose your networking stack when you

67
00:03:54,220 --> 00:03:56,350
compile softer for this platform

68
00:03:56,350 --> 00:04:01,829
you to specify a which stack you'd like
to use and it builds everything and if

69
00:04:01,829 --> 00:04:04,890
you want to switch from seizing be to

70
00:04:04,890 --> 00:04:08,530
raw fifty not for thats one option on
your make

71
00:04:08,530 --> 00:04:12,459
command and

72
00:04:12,459 --> 00:04:16,978
this is because the standards haven't
really solidified yet you can't

73
00:04:16,978 --> 00:04:20,099
say that if you doing a commercial
protocol you have to go exactly are you

74
00:04:20,100 --> 00:04:21,579
have to go as high as a one hundred

75
00:04:21,579 --> 00:04:26,039
and you need to be able to switch on a
when

76
00:04:26,039 --> 00:04:30,110
to the first thing that you do is

77
00:04:30,110 --> 00:04:34,000
attach a che tak connector I'm gonna go
through this rather quickly because

78
00:04:34,000 --> 00:04:38,610
it's just a bunch of photos that is
issue 8 connector

79
00:04:38,610 --> 00:04:42,900
on the circuit board now the

80
00:04:42,900 --> 00:04:46,330
you ate is a condensed connector forward

81
00:04:46,330 --> 00:04:52,330
both J tag and a serial port access it
you just pop it off the battery

82
00:04:52,330 --> 00:04:55,469
you break apart one of these multi pin
connectors

83
00:04:55,470 --> 00:04:59,849
you feed them through after plugging
them onto the

84
00:04:59,849 --> 00:05:03,640
translator board solder them and I'll

85
00:05:03,640 --> 00:05:06,490
stand a nice neat row like this as if
they were still surrounded in the

86
00:05:06,490 --> 00:05:07,630
plastic packaging

87
00:05:07,630 --> 00:05:10,740
which you cut off with

88
00:05:10,740 --> 00:05:15,729
pliers if you don't have the proper
sizing as i denna you then add to an

89
00:05:15,729 --> 00:05:16,740
adapter board

90
00:05:16,740 --> 00:05:21,150
this gives you two plugs in the
background is a serial port

91
00:05:21,150 --> 00:05:24,690
in the foreground as the g8 act work you
run that

92
00:05:24,690 --> 00:05:28,460
into USB fat you can purchase one of
these from Texas Instruments

93
00:05:28,460 --> 00:05:33,599
for $50 to $100 dollars connect the USB
port works perfectly in line X

94
00:05:33,599 --> 00:05:37,550
is plug it into the board

95
00:05:37,550 --> 00:05:40,650
and then you actually run GTB

96
00:05:40,650 --> 00:05:44,500
as you would on a regular PC program

97
00:05:44,500 --> 00:05:48,020
so but instead of attaching a process ID

98
00:05:48,020 --> 00:05:52,539
you attach to the physical device so you
just run a script that says

99
00:05:52,539 --> 00:05:56,810
grab the device over this USB port and
you get your GV command line

100
00:05:56,810 --> 00:05:59,780
with the president's program counter
position and everything that you would

101
00:05:59,780 --> 00:06:00,450
expect

102
00:06:00,450 --> 00:06:04,750
on the UNIX process

103
00:06:04,750 --> 00:06:09,470
you run a dump command 2.9 marine just
as you would in UNIX

104
00:06:09,470 --> 00:06:14,450
this gives you an Intel hex file they

105
00:06:14,450 --> 00:06:18,650
Intel hex file I just should have it
here so

106
00:06:18,650 --> 00:06:23,900
this will be the beginning avram and
every single line if this can be easily

107
00:06:23,900 --> 00:06:25,300
interpreted by

108
00:06:25,300 --> 00:06:28,810
script so beginning with this line

109
00:06:28,810 --> 00:06:33,490
the kolenda says this is a line above

110
00:06:33,490 --> 00:06:36,649
the file 10

111
00:06:36,649 --> 00:06:40,610
is the length in hexadecimal as a single
by

112
00:06:40,610 --> 00:06:43,710
so 10 is 16

113
00:06:43,710 --> 00:06:46,860
their 16 bytes where the data 32 nobles

114
00:06:46,860 --> 00:06:50,940
32 characters following that is the
starting address

115
00:06:50,940 --> 00:06:54,140
200 happens to be the beginning love

116
00:06:54,140 --> 00:06:59,080
the address range that we instructed to
dampen it's also the beginning avram

117
00:06:59,080 --> 00:07:03,250
followed by that is the date itself
followed by that as a check some

118
00:07:03,250 --> 00:07:06,300
so if the check some weren't enforced
you could almost

119
00:07:06,300 --> 00:07:09,899
is this as a plain text

120
00:07:09,899 --> 00:07:12,950
hex editor equivalent

121
00:07:12,950 --> 00:07:17,110
will jump to those you disassemble it
using

122
00:07:17,110 --> 00:07:20,940
can you bring your tools the details
just as you would

123
00:07:20,940 --> 00:07:25,130
normally on a PC program is a BJ dump

124
00:07:25,130 --> 00:07:28,490
specify the architecture specified the

125
00:07:28,490 --> 00:07:31,890
input file dump it out to a script

126
00:07:31,890 --> 00:07:36,300
you then read that and amnesty for 30
static

127
00:07:36,300 --> 00:07:39,370
to call and 4s two saves and syllables

128
00:07:39,370 --> 00:07:42,810
as it reads it in and it populates an
SQL database

129
00:07:42,810 --> 00:07:46,659
with everything that's found within that
image

130
00:07:46,659 --> 00:07:49,849
on a PC program where you have four
gigabytes

131
00:07:49,849 --> 00:07:54,860
the potential space that would be
suicide

132
00:07:54,860 --> 00:07:58,860
it would kill performance and the
application will become unusable the

133
00:07:58,860 --> 00:08:00,789
slow

134
00:08:00,789 --> 00:08:04,539
with even a moderately large program
we're dealing with the 16-bit

135
00:08:04,539 --> 00:08:06,039
microcontroller

136
00:08:06,039 --> 00:08:10,330
until you get into later extensions to
the platform

137
00:08:10,330 --> 00:08:16,680
you can only has 64 kilobytes of total
memory thats code that's data that's I O

138
00:08:16,680 --> 00:08:21,789
RAM everything and it turns out that
this is manageable

139
00:08:21,789 --> 00:08:27,669
in an SQL database even before you do
proper indexing

140
00:08:27,669 --> 00:08:31,089
to you communicate with m4s

141
00:08:31,089 --> 00:08:34,338
by you using a dialect SQL

142
00:08:34,339 --> 00:08:37,729
so you give an SQL queries and it gives
you

143
00:08:37,729 --> 00:08:43,200
results this and changes in syntax to
make things like hexadecimal

144
00:08:43,200 --> 00:08:47,690
address is easier and there is extensive
scripting supports you can add a script

145
00:08:47,690 --> 00:08:48,630
in shell script

146
00:08:48,630 --> 00:08:52,220
or pearl or SQL

147
00:08:52,220 --> 00:08:55,970
the sorts of things this is a

148
00:08:55,970 --> 00:08:59,190
macro if you type in that men map that
Gd dot

149
00:08:59,190 --> 00:09:05,560
PNG the pipe the output into PNG file
you get this image

150
00:09:05,560 --> 00:09:08,580
this is actually a bitmap involve memory

151
00:09:08,580 --> 00:09:11,700
the upper dresses are the top

152
00:09:11,700 --> 00:09:16,100
lower dresses at the bottom of his I'm
not sure if it's visible from the

153
00:09:16,100 --> 00:09:19,930
display but at the very top right is a
green line

154
00:09:19,930 --> 00:09:23,029
that Green Line is the interrupt vector
table

155
00:09:23,029 --> 00:09:29,420
that's the set of pointers that are
jumped to when interrupted struck

156
00:09:29,420 --> 00:09:32,750
beneath that you have flash memory

157
00:09:32,750 --> 00:09:36,800
and you can see by the display that most
to the flash

158
00:09:36,800 --> 00:09:39,920
is black that means that its own use

159
00:09:39,920 --> 00:09:44,050
flashes allocated by GCC beginning at

160
00:09:44,050 --> 00:09:48,430
the bottom a flash working its way
upward and flash itself begins just

161
00:09:48,430 --> 00:09:49,709
above ground

162
00:09:49,709 --> 00:09:54,060
with the minor strip unusable memory in
between

163
00:09:54,060 --> 00:09:58,070
the blue dots are addresses which are
referenced by code

164
00:09:58,070 --> 00:10:01,140
and there's a bit of noise in this
because someone the code is

165
00:10:01,140 --> 00:10:07,560
jump around that was misinterpreted and
disassembled

166
00:10:07,560 --> 00:10:11,330
now within the RAM you've got you see
that bar

167
00:10:11,330 --> 00:10:16,220
blue where addresses are constantly
referred to you

168
00:10:16,220 --> 00:10:22,010
that's actually the serial bootstrap
loader its a program which exists in

169
00:10:22,010 --> 00:10:26,380
mast ROM cannot be changed ships on
every single MST 4 30 except for the

170
00:10:26,380 --> 00:10:28,709
very lowest and models

171
00:10:28,709 --> 00:10:32,720
and it allows you to program the chip
without purchasing the

172
00:10:32,720 --> 00:10:36,480
jagger you can buy an FTDI

173
00:10:36,480 --> 00:10:40,589
usb2 you are converter run some wires

174
00:10:40,589 --> 00:10:44,920
send the initialization code and load
everything up

175
00:10:44,920 --> 00:10:49,630
the very bottom you'll see I O

176
00:10:49,630 --> 00:10:54,350
now I owe it is an actual included in
this image because we didn't dump it

177
00:10:54,350 --> 00:10:58,310
when we get the range we said begin at
two hundred which is RAM

178
00:10:58,310 --> 00:11:02,060
and work your way up to four ass

179
00:11:02,060 --> 00:11:05,610
but they're still references to it the
bloom dots

180
00:11:05,610 --> 00:11:09,370
once again our

181
00:11:09,370 --> 00:11:15,170
pointer targets so their points in code
where things are written to

182
00:11:15,170 --> 00:11:20,849
or read from the i/o ranges and that
forms the blue lines the lowest level

183
00:11:20,850 --> 00:11:25,260
the blue lines in the BSL level come
from

184
00:11:25,260 --> 00:11:28,319
tables which exist every time you have

185
00:11:28,320 --> 00:11:31,340
a switch statement you have a table

186
00:11:31,340 --> 00:11:38,340
have addresses which were added to the
program counter and no show up as blue

187
00:11:38,710 --> 00:11:43,320
a quick preview love functions as they
work on this platform

188
00:11:43,320 --> 00:11:47,660
there's a call state the call statement
is usually followed by an absolute

189
00:11:47,660 --> 00:11:49,060
address

190
00:11:49,060 --> 00:11:53,950
it doesn't have to be by the
microprocessor but it always is by GCC

191
00:11:53,950 --> 00:11:57,510
so unless you're doing custom assembly
were your

192
00:11:57,510 --> 00:12:00,860
say doing self rewriting code

193
00:12:00,860 --> 00:12:05,130
which I have done this but on you just
give it an absolute address in a jumps

194
00:12:05,130 --> 00:12:06,680
to it so that means that we have

195
00:12:06,680 --> 00:12:11,540
the entry address every single function

196
00:12:11,540 --> 00:12:17,120
and then we also have a return address
which follows

197
00:12:17,120 --> 00:12:20,920
and if you look more closely at the
output love any given compiler

198
00:12:20,920 --> 00:12:25,349
and their seven for this platform there
in common use

199
00:12:25,350 --> 00:12:29,180
you'll find that every function is
either the target of a call

200
00:12:29,180 --> 00:12:32,990
and interrupt vector table entry that's
an interrupt handler

201
00:12:32,990 --> 00:12:37,560
words used by a function pointer and
function pointers are exceedingly rare

202
00:12:37,560 --> 00:12:41,130
you'll also note that every function ans
after either return

203
00:12:41,130 --> 00:12:44,220
or return from interrupt instruction

204
00:12:44,220 --> 00:12:47,650
and that is always after the last
relative jump there are no

205
00:12:47,650 --> 00:12:52,079
relative jumps between functions

206
00:12:52,080 --> 00:12:55,740
this is partly caused by the compiler
and it's partly caused by proper C++

207
00:12:55,740 --> 00:12:58,320
coding that this is considered spaghetti
code

208
00:12:58,320 --> 00:13:03,210
to have a GOTO statement in one function
jump to label with another

209
00:13:03,210 --> 00:13:09,360
it works but God will continue for

210
00:13:09,360 --> 00:13:13,440
now we can do the search all the entry
points

211
00:13:13,440 --> 00:13:17,140
seeking to a SELECT statement this being
the simplest type of query

212
00:13:17,140 --> 00:13:21,480
is a select the hexadecimal address have
each function

213
00:13:21,480 --> 00:13:24,820
it gives you listen is the first two
elements the first

214
00:13:24,820 --> 00:13:30,490
page results this is a large program
that its includes radio drivers and

215
00:13:30,490 --> 00:13:35,500
this it's tough now flash from begins at
four thousand hacks

216
00:13:35,500 --> 00:13:39,650
and you can see that there's the
function at four thousand hacks that is

217
00:13:39,650 --> 00:13:40,160
the

218
00:13:40,160 --> 00:13:44,219
target the reset vector it always is
suing the chip

219
00:13:44,220 --> 00:13:48,350
powers on and the firm has been compiled
with gcc

220
00:13:48,350 --> 00:13:51,990
execution always begins at four thousand

221
00:13:51,990 --> 00:13:56,060
this is important because that 4,000 is
also one sixteenth

222
00:13:56,060 --> 00:14:00,030
above the password for the bootstrap
loader

223
00:14:00,030 --> 00:14:03,550
and it by recognizing the behavior in
the

224
00:14:03,550 --> 00:14:07,020
compiling can actually get some the
passwords within the chip

225
00:14:07,020 --> 00:14:11,930
at not well enough to break it quickly
but with other methods you can

226
00:14:11,930 --> 00:14:16,550
now you'll also note these other
addresses which occur before

227
00:14:16,550 --> 00:14:20,750
flash memory that's the BS all-round

228
00:14:20,750 --> 00:14:24,690
that's the program that ships and mask
Ron that you cannot erase

229
00:14:24,690 --> 00:14:29,580
on every single chip for loading
software with serial port

230
00:14:29,580 --> 00:14:34,140
and they got dragged into our analysis

231
00:14:34,140 --> 00:14:40,390
because we included them in our range

232
00:14:40,390 --> 00:14:45,240
the BSL itself as an alternative to Jay
tag and its password protected

233
00:14:45,240 --> 00:14:49,490
at black at the summer I'll be
demonstrating a method by which

234
00:14:49,490 --> 00:14:53,529
on the most recent versions the chip and
very few prior

235
00:14:53,529 --> 00:14:56,900
if any you can

236
00:14:56,900 --> 00:15:01,090
break the password the timing becomes
non-regular

237
00:15:01,090 --> 00:15:05,300
and by observing differences have a
single clock cycle

238
00:15:05,300 --> 00:15:08,630
between you're giving the last by the
password

239
00:15:08,630 --> 00:15:11,689
and it's telling you okay I've got it

240
00:15:11,690 --> 00:15:17,930
you can actually tell how many bytes
love your gas are correct

241
00:15:17,930 --> 00:15:21,810
but details on that will have to wait
till August

242
00:15:21,810 --> 00:15:26,460
now it wing what you read in this
program and you've got these hexadecimal

243
00:15:26,460 --> 00:15:28,270
addresses

244
00:15:28,270 --> 00:15:31,720
you can know some of them by a
experience but four thousand

245
00:15:31,720 --> 00:15:34,970
taxes always the entry point OVA

246
00:15:34,970 --> 00:15:39,779
use a program but that doesn't tell you
enough to begin breeding the code you'd

247
00:15:39,779 --> 00:15:40,720
have to

248
00:15:40,720 --> 00:15:46,460
search through thousands have bites have
code to find what you want

249
00:15:46,460 --> 00:15:50,660
no if you think about how you write C
Cody try to use libraries

250
00:15:50,660 --> 00:15:53,829
you purchase libraries perhaps the
open-source

251
00:15:53,830 --> 00:15:57,020
in the cases this system

252
00:15:57,020 --> 00:16:02,150
although the external chip drivers the
libraries and their LinkedIn

253
00:16:02,150 --> 00:16:05,750
no their knots deal else to statically
LinkedIn

254
00:16:05,750 --> 00:16:12,110
only the functions that you caller used
but because it's free compiled code

255
00:16:12,110 --> 00:16:15,820
even the links are adjusted the code is
almost identical

256
00:16:15,820 --> 00:16:20,130
and your belief function give a function
that does not call any other function

257
00:16:20,130 --> 00:16:25,360
it is perfectly identical so absolute
value for example

258
00:16:25,360 --> 00:16:29,140
in assembly you just check to see if the
number is negative

259
00:16:29,140 --> 00:16:33,560
if so you in britain at one to make a
positive

260
00:16:33,560 --> 00:16:37,130
if not you just return

261
00:16:37,130 --> 00:16:40,720
on a given compiler say GCC

262
00:16:40,720 --> 00:16:44,770
every function that calls ABS the
absolute value function will include

263
00:16:44,770 --> 00:16:45,990
that same string

264
00:16:45,990 --> 00:16:49,350
love bites within its software

265
00:16:49,350 --> 00:16:53,350
and we know the beginning and we know
the end

266
00:16:53,350 --> 00:16:57,850
so a database can be made up these
different functions

267
00:16:57,850 --> 00:17:02,100
now of course you can to share the
function code itself because that would

268
00:17:02,100 --> 00:17:04,309
be copyright infringement

269
00:17:04,309 --> 00:17:08,569
but a one-way hash a copyrighted work is
not itself a covered work

270
00:17:08,569 --> 00:17:12,089
and that's all we need to test for
quality

271
00:17:12,089 --> 00:17:15,119
so St 4:30 static actually ships with

272
00:17:15,120 --> 00:17:18,270
a list love md5 checksums

273
00:17:18,270 --> 00:17:22,010
they're not cryptographically secure but
they work I love

274
00:17:22,010 --> 00:17:25,400
functions that you might find within a
given from our image

275
00:17:25,400 --> 00:17:29,900
so you load it up you copy the firmware
of

276
00:17:29,900 --> 00:17:33,630
it can then run through and recover all
of the simple things

277
00:17:33,630 --> 00:17:38,900
%uh functions that it's already seen see
just typed at Live dot important hashed

278
00:17:38,900 --> 00:17:42,539
this is a macro you can see the code
inside the

279
00:17:42,539 --> 00:17:46,520
source you can change it it's just a
string in a database table

280
00:17:46,520 --> 00:17:50,168
any type in that symbol Duk that's the
most ever cover

281
00:17:50,169 --> 00:17:53,190
and it gives you a not an error message

282
00:17:53,190 --> 00:17:57,950
I I conceded beginning sloppy pearl

283
00:17:57,950 --> 00:18:01,460
but the result is that when you do is
select statement

284
00:18:01,460 --> 00:18:05,760
you can see the names a every standard
library function

285
00:18:05,760 --> 00:18:10,360
that I have in my collection

286
00:18:10,360 --> 00:18:15,240
and if any of you begin working with
this in use send me your hashes

287
00:18:15,240 --> 00:18:18,460
I can add them to the list and if anyone
begins analyzing the same firmware that

288
00:18:18,460 --> 00:18:20,840
you're working with

289
00:18:20,840 --> 00:18:25,250
or any related firmware or any firmware
made with the same compiler

290
00:18:25,250 --> 00:18:30,090
they can find the names that you given
these functions

291
00:18:30,090 --> 00:18:33,439
they can also do call grass this is

292
00:18:33,440 --> 00:18:37,750
a simple picture perfect one love

293
00:18:37,750 --> 00:18:41,549
actually the function that causes a
stack overflow exploit

294
00:18:41,549 --> 00:18:45,520
the you'll note that is the right doctor
table at the beginning

295
00:18:45,520 --> 00:18:49,389
olive the inner us just go to the like a
No of

296
00:18:49,390 --> 00:18:52,740
function that says we should it be
interrupting on is

297
00:18:52,740 --> 00:18:56,390
what the hell happened but yet

298
00:18:56,390 --> 00:19:01,429
goes to the reset vector this is a
different ship sOooo flash memory begins

299
00:19:01,429 --> 00:19:06,559
lower at 1100 hacks but it's still the
very beginning a flash a rule about

300
00:19:06,559 --> 00:19:08,080
three-set

301
00:19:08,080 --> 00:19:13,049
vector remains true it calls main main
causes other functions

302
00:19:13,049 --> 00:19:16,840
this other functions cost rank up

303
00:19:16,840 --> 00:19:20,149
now if I gave you this image as

304
00:19:20,150 --> 00:19:24,720
something to break until you couldn't
get main

305
00:19:24,720 --> 00:19:28,590
you would get i-vt you would get actors
and

306
00:19:28,590 --> 00:19:32,090
you would get unexpected

307
00:19:32,090 --> 00:19:36,949
you get test put ass which you could
tell was writing to add about your

308
00:19:36,950 --> 00:19:42,860
and most importantly you would get
string copy at 11 E

309
00:19:42,860 --> 00:19:48,100
so you can audit programs that you have
no source code to

310
00:19:48,100 --> 00:19:52,830
for things like string copying and then
you know exactly which function look at

311
00:19:52,830 --> 00:19:56,490
and you know exactly which functions
colette

312
00:19:56,490 --> 00:20:00,910
you only have to actually decipher two
or three functions

313
00:20:00,910 --> 00:20:05,920
love machine language to figure out a
large program

314
00:20:05,920 --> 00:20:10,040
unfortunately this turns into a rat's
nest

315
00:20:10,040 --> 00:20:15,550
for to the radio firmware that we've
been working with

316
00:20:15,550 --> 00:20:18,669
you'll note that there is a focal point

317
00:20:18,670 --> 00:20:23,720
in the mid as the picture just above and
to the right

318
00:20:23,720 --> 00:20:27,440
you see all those edges overlapping one
another

319
00:20:27,440 --> 00:20:31,120
resume n thats Nessie atomic

320
00:20:31,120 --> 00:20:35,200
and Nessie atomic start

321
00:20:35,200 --> 00:20:38,960
these aren't threads but the close
enough so you have threads and they

322
00:20:38,960 --> 00:20:41,360
don't wanna step over one another

323
00:20:41,360 --> 00:20:46,179
so they're doing at the commit acts okay
so the one task won't

324
00:20:46,179 --> 00:20:51,350
kill another task and if you do some
database queries to see how many are

325
00:20:51,350 --> 00:20:53,770
calling it you see that have 577

326
00:20:53,770 --> 00:20:59,900
total function calls nearly 200

327
00:20:59,900 --> 00:21:04,860
are two this new text architects at

328
00:21:04,860 --> 00:21:08,610
so we can just drop them

329
00:21:08,610 --> 00:21:12,160
and then we did account to see that word
on this 310 278 functions

330
00:21:12,160 --> 00:21:16,190
and looks much cleaner it's not clear
enough

331
00:21:16,190 --> 00:21:19,710
were me to show the whole thing on the
display that you can then start zooming

332
00:21:19,710 --> 00:21:22,150
into individual functions

333
00:21:22,150 --> 00:21:25,350
because the Atomics have been isolated
they're just sitting off in a corner and

334
00:21:25,350 --> 00:21:27,990
we're going them for the moment

335
00:21:27,990 --> 00:21:31,970
there's another macro which recreates
the calls table

336
00:21:31,970 --> 00:21:36,059
after you've mangled

337
00:21:36,059 --> 00:21:40,000
now when you trying to mess with the
program you you wanna figure out

338
00:21:40,000 --> 00:21:43,750
where certain functions have been called
ok with

339
00:21:43,750 --> 00:21:46,890
which functions are included in this
case we have a

340
00:21:46,890 --> 00:21:52,640
chip kahn 2420 radio the operating
system is tiny OS-two

341
00:21:52,640 --> 00:21:57,160
which was chosen because I like it not
because it's

342
00:21:57,160 --> 00:22:00,520
particularly effective and stuff so

343
00:22:00,520 --> 00:22:04,559
you can just do a search for anything
with CZ 2420 in the name

344
00:22:04,559 --> 00:22:08,240
and if returns every single function
that's part

345
00:22:08,240 --> 00:22:12,390
the radio driver because it's seen a
similar function

346
00:22:12,390 --> 00:22:19,390
in 10 the example programs a tiny alas
that's in my collection

347
00:22:20,290 --> 00:22:25,000
now you can also chase by i/o ports

348
00:22:25,000 --> 00:22:28,030
this is a microcontroller see don't have
an operating system you

349
00:22:28,030 --> 00:22:31,649
don't have slashed dev devices as you
would any UNIX you don't have contacts

350
00:22:31,650 --> 00:22:32,890
which is the right to it you know

351
00:22:32,890 --> 00:22:36,650
any of that stuff you just write to a
special address

352
00:22:36,650 --> 00:22:40,250
at the beginning memory other peripheral
register

353
00:22:40,250 --> 00:22:45,150
these are between 0 and two hundred
hacks on the amnesty for 30

354
00:22:45,150 --> 00:22:48,500
is control i/o pins I all modules which

355
00:22:48,500 --> 00:22:52,929
actually do the work I O four years so
if you want to do say serial port

356
00:22:52,929 --> 00:22:56,410
you can rate it yourself using the Pens
you can say

357
00:22:56,410 --> 00:22:59,809
raise the voltage lower the voltage
measure the voltage in every

358
00:22:59,809 --> 00:23:04,350
thing you need to do or you can let for
Phil model do it for you

359
00:23:04,350 --> 00:23:07,360
and then it does the implementation and
hardware and you can spend far fewer

360
00:23:07,360 --> 00:23:08,830
clock cycles

361
00:23:08,830 --> 00:23:12,110
working out the details they're also

362
00:23:12,110 --> 00:23:17,070
timers you can turn interrupt handling
on and off you go all sorts of things

363
00:23:17,070 --> 00:23:17,919
that these

364
00:23:17,920 --> 00:23:21,190
registers upcoming chips are having

365
00:23:21,190 --> 00:23:24,820
USB device ports to these registers
they're having

366
00:23:24,820 --> 00:23:28,740
hardware a yes so within this little

367
00:23:28,740 --> 00:23:32,070
three-dollar microcontroller you can do
as: encryption

368
00:23:32,070 --> 00:23:36,340
just by writing your key to one place in
memory writing a packet to another

369
00:23:36,340 --> 00:23:40,830
and then reading the packet back out
from that same address

370
00:23:40,830 --> 00:23:43,820
but if you look at the data sheets you
get a list of all these addresses their

371
00:23:43,820 --> 00:23:45,689
own hardware you can't hide them they're
not

372
00:23:45,690 --> 00:23:49,330
remapped for the operating system that
they're not

373
00:23:49,330 --> 00:23:55,439
English names anything like that so you
can just select statement

374
00:23:55,440 --> 00:24:01,030
you can say show me although the CC 2420
functions

375
00:24:01,030 --> 00:24:06,160
and which address in memory the right to

376
00:24:06,160 --> 00:24:09,820
Akins the list

377
00:24:09,820 --> 00:24:12,919
and as you see there those addresses are
within RAM

378
00:24:12,920 --> 00:24:16,690
there's a global variables

379
00:24:16,690 --> 00:24:18,840
which are quite useful when you're
trying to change the behavior the

380
00:24:18,840 --> 00:24:19,790
program

381
00:24:19,790 --> 00:24:22,850
but beneath that other performances

382
00:24:22,850 --> 00:24:25,929
so you know which Kansas

383
00:24:25,929 --> 00:24:29,150
the CC 2420 is connected to

384
00:24:29,150 --> 00:24:33,720
even if you don't have any hardware work
with and further you know exactly

385
00:24:33,720 --> 00:24:37,950
which function look at

386
00:24:37,950 --> 00:24:41,920
to control that I'll you know that

387
00:24:41,920 --> 00:24:46,809
CC 2420 receive p reads and writes

388
00:24:46,809 --> 00:24:50,070
the IR registers

389
00:24:50,070 --> 00:24:53,210
which you can find from the
documentation

390
00:24:53,210 --> 00:24:56,360
it's a bit hard to read from that there
but it

391
00:24:56,360 --> 00:25:00,440
accesses port 1 interrupt enable

392
00:25:00,440 --> 00:25:03,710
and then the airport when interrupt flag
so its controlling interrupts

393
00:25:03,710 --> 00:25:08,420
and then after turning these interrupts
on is an interrupt handler

394
00:25:08,420 --> 00:25:13,790
see look at the port 1 interrupt handler
whose name was likely not found by this

395
00:25:13,790 --> 00:25:17,320
and then you can determine exactly what
it's doing

396
00:25:17,320 --> 00:25:21,520
you can replace that interrupt handler
with another one changed to buy to the

397
00:25:21,520 --> 00:25:23,410
firmware

398
00:25:23,410 --> 00:25:26,929
had something on in the unused black
region

399
00:25:26,929 --> 00:25:31,570
from the memory map have that then jump
to the original one and you just added

400
00:25:31,570 --> 00:25:32,750
an inline

401
00:25:32,750 --> 00:25:36,590
packet sniffer to the firmware

402
00:25:36,590 --> 00:25:40,380
and because the regular firmware doesn't
notice this it's jumping over the back

403
00:25:40,380 --> 00:25:43,420
nine everything

404
00:25:43,420 --> 00:25:47,140
it will Seydou channel hopping for you
and then even if you don't know the

405
00:25:47,140 --> 00:25:49,480
protocol even if you don't know which

406
00:25:49,480 --> 00:25:53,380
frequency to tune the radio to know
you're okay because it'll turn the radio

407
00:25:53,380 --> 00:25:55,480
itself

408
00:25:55,480 --> 00:25:58,919
you can have its but things out the over
serial port

409
00:25:58,919 --> 00:26:03,190
you record it everything's good

410
00:26:03,190 --> 00:26:07,140
now the

411
00:26:07,140 --> 00:26:11,120
I'm just gonna conclude with a few minor
notes and then

412
00:26:11,120 --> 00:26:16,929
as I mean it takes a detailed questions
rather than the usual

413
00:26:16,929 --> 00:26:21,980
quick wins feel free to mention ports
hexadecimal anything

414
00:26:21,980 --> 00:26:26,620
on so first there is the issue finding
similar information

415
00:26:26,620 --> 00:26:31,440
this is actually the lives see file

416
00:26:31,440 --> 00:26:35,870
Ave commercial C compiler for this
platform

417
00:26:35,870 --> 00:26:40,000
you can download it gets ago 30-day
evaluation

418
00:26:40,000 --> 00:26:44,440
were luv you actually code size limits
you can only compiler for kilobyte

419
00:26:44,440 --> 00:26:47,220
program

420
00:26:47,220 --> 00:26:50,850
this is not high giving experience with
IRS format

421
00:26:50,850 --> 00:26:54,400
I would love to speak to you this is
image craft

422
00:26:54,400 --> 00:26:57,630
version 7 and I like image craft

423
00:26:57,630 --> 00:27:00,900
because their format so easy to read
you've got a DOS

424
00:27:00,900 --> 00:27:04,130
you have dust text files CRLF thats

425
00:27:04,130 --> 00:27:07,669
LF so the CRS rendered as the control
them

426
00:27:07,669 --> 00:27:11,049
any Macs and their separated by a UNIX

427
00:27:11,049 --> 00:27:15,850
text files with the dots start dont so
between every not start not an

428
00:27:15,850 --> 00:27:19,620
we have a record other function within
the

429
00:27:19,620 --> 00:27:23,540
library now

430
00:27:23,540 --> 00:27:28,600
if you look at the en ligne that tells
you which source file this came from

431
00:27:28,600 --> 00:27:33,059
netscape ABS data ass despite the dot
asset

432
00:27:33,059 --> 00:27:36,280
ending I know that this is actually
compiled

433
00:27:36,280 --> 00:27:39,710
a don't Scott that says that s file

434
00:27:39,710 --> 00:27:44,790
said came from assembly language might
have been precompiled might not have

435
00:27:44,790 --> 00:27:48,350
beneath that you see an ass entry

436
00:27:48,350 --> 00:27:51,610
at the symbol

437
00:27:51,610 --> 00:27:57,429
symbol is underscore AVS commonly system
libraries preap and

438
00:27:57,429 --> 00:28:01,179
their functions within underscores that
you can do it without the underscore to

439
00:28:01,179 --> 00:28:04,390
override

440
00:28:04,390 --> 00:28:07,980
beneath that you have a key line and
that two-line

441
00:28:07,980 --> 00:28:12,490
says it an offset 0 bytes it's the first
two zeros

442
00:28:12,490 --> 00:28:16,610
you have the code beginning 0e 930 334

443
00:28:16,610 --> 00:28:21,350
3e e0 FF FF cetera

444
00:28:21,350 --> 00:28:24,850
that's the actual machine ca when you
link this

445
00:28:24,850 --> 00:28:29,460
that is copied somewhere in your program
and a call statement is used to jump

446
00:28:29,460 --> 00:28:30,530
there

447
00:28:30,530 --> 00:28:34,240
then it takes R-twelve which is the
first parameter

448
00:28:34,240 --> 00:28:39,340
in image cross compiler

449
00:28:39,340 --> 00:28:43,679
and it makes a positive and then it
returns

450
00:28:43,679 --> 00:28:49,530
you cannot call this from GCC because
GCC sense its parameter in our 15

451
00:28:49,530 --> 00:28:52,668
by watching which parameters are used in
which order

452
00:28:52,669 --> 00:28:56,030
you can often determine which compiler
the

453
00:28:56,030 --> 00:29:00,090
code came from another way that you can
finger from the code

454
00:29:00,090 --> 00:29:04,299
on if you see the ffff

455
00:29:04,299 --> 00:29:08,840
in the middle toward the right that is
an immediate

456
00:29:08,840 --> 00:29:12,490
constant the amnesty for thirty has

457
00:29:12,490 --> 00:29:16,110
unique feature they the realize
immediate Constance would be needed a

458
00:29:16,110 --> 00:29:18,049
lot on a microcontroller because you're

459
00:29:18,049 --> 00:29:21,190
always setting a bit clearing a bit

460
00:29:21,190 --> 00:29:25,410
when you set a clear that you're usually
doing one right

461
00:29:25,410 --> 00:29:29,320
and that one is either 0

462
00:29:29,320 --> 00:29:32,350
one 24 a

463
00:29:32,350 --> 00:29:36,110
or -1 -1 in 16 bits

464
00:29:36,110 --> 00:29:42,860
is the 4s that can actually be encoded
by use the constant generator

465
00:29:42,860 --> 00:29:46,460
and there's two bites can be cut out a
dysfunction

466
00:29:46,460 --> 00:29:50,289
image craft is the only compiler the or
some other rather

467
00:29:50,289 --> 00:29:54,890
that assembles this way all the
competing assemblers

468
00:29:54,890 --> 00:29:59,010
will take that FF no cut it out no-cut
that instruction from four bytes

469
00:29:59,010 --> 00:30:02,309
down to you can identify

470
00:30:02,309 --> 00:30:06,780
this you can also identify the lineage
love the file format this comes from

471
00:30:06,780 --> 00:30:10,889
and I can't recall whether it's open
source a free as in beer

472
00:30:10,890 --> 00:30:17,200
but the says some local s4 30 that uses
this exact same format

473
00:30:17,200 --> 00:30:20,910
so from that we can determine that image
craft likely funded

474
00:30:20,910 --> 00:30:24,870
or purchased s4 30

475
00:30:24,870 --> 00:30:28,660
to all these things can be determined
about the

476
00:30:28,660 --> 00:30:32,520
file format and once we have a love then
we can dump that we can

477
00:30:32,520 --> 00:30:36,770
right out ABS and then the md5 checksums
the restive it and then we can identify

478
00:30:36,770 --> 00:30:37,900
ABS

479
00:30:37,900 --> 00:30:42,490
with the N anything that we see but
unfortunately I only have

480
00:30:42,490 --> 00:30:46,160
working importers for image craft in GCC

481
00:30:46,160 --> 00:30:49,610
if you'd like to help out with IR and
quite appreciated

482
00:30:49,610 --> 00:30:55,690
as I R as the most popular commercial
compiler this but fun

483
00:30:55,690 --> 00:30:59,230
know if you pop open a function and I'm
only going to do this for one because

484
00:30:59,230 --> 00:31:01,090
the sort of thing you should do with

485
00:31:01,090 --> 00:31:04,809
pen and paper and private or come get me
in a locket through it

486
00:31:04,809 --> 00:31:08,490
its bad for an on-screen presentation

487
00:31:08,490 --> 00:31:11,669
we've got the bitwise compare

488
00:31:11,669 --> 00:31:17,990
and then a jump at the jump is not taken
then we enable interrupts

489
00:31:17,990 --> 00:31:21,750
but using m4s you can render that as

490
00:31:21,750 --> 00:31:25,500
a instruction flow graph you can see
that

491
00:31:25,500 --> 00:31:28,600
instead that execution begins at the
compare

492
00:31:28,600 --> 00:31:32,289
follows down then if the jump is taking
it because the return it's not taken it

493
00:31:32,289 --> 00:31:33,559
enables an Ratzinger's

494
00:31:33,559 --> 00:31:38,610
return you can you grass like this with
timing

495
00:31:38,610 --> 00:31:42,600
so if you're trying to analyze the
timing a complicated function did

496
00:31:42,600 --> 00:31:47,679
insure that all branches have the same
costing clock cycles

497
00:31:47,679 --> 00:31:54,030
you can do this just add up the edges
between vertices you've got

498
00:31:54,030 --> 00:31:57,460
dozen issue is switch cases and

499
00:31:57,460 --> 00:32:01,720
it puts a you would think the

500
00:32:01,720 --> 00:32:05,380
that if you have a switch love safe
three cases

501
00:32:05,380 --> 00:32:08,860
all which break that would render 23 a
statements

502
00:32:08,860 --> 00:32:13,160
and machine language would look like
that and see in practice what happens

503
00:32:13,160 --> 00:32:16,740
is that some compilers say that

504
00:32:16,740 --> 00:32:19,870
the program counter should be set to the
Foo

505
00:32:19,870 --> 00:32:24,230
element have an array of pointers GCC
does this

506
00:32:24,230 --> 00:32:27,770
and the problem with this is that they
just stick

507
00:32:27,770 --> 00:32:31,320
that array in the middle love your code

508
00:32:31,320 --> 00:32:35,629
they don't it is nothing marking at as
special

509
00:32:35,630 --> 00:32:39,940
so automated analysis tools will trip
over it thinking that its code

510
00:32:39,940 --> 00:32:43,049
and this cause some %uh the static blue
lines

511
00:32:43,049 --> 00:32:46,330
in the unused portion a flash memory

512
00:32:46,330 --> 00:32:50,360
and it's important to note that so long
as this is being mistakenly interpreted

513
00:32:50,360 --> 00:32:53,650
you can't trust every single bite that
comes out

514
00:32:53,650 --> 00:32:57,150
you'll always get a bit of false
positives when you do

515
00:32:57,150 --> 00:33:00,419
say searches on Pope addresses further

516
00:33:00,419 --> 00:33:06,000
some other compilers I'm not sure the
name a bit but the one that's

517
00:33:06,000 --> 00:33:12,850
CIA is is to make the BSL mask ROM

518
00:33:12,850 --> 00:33:16,740
I believe that is the BSL actually
predates code Composer

519
00:33:16,740 --> 00:33:21,700
and inside TI they often use IRS product

520
00:33:21,700 --> 00:33:25,190
donors that the application that's come
out for IR and then for Coke

521
00:33:25,190 --> 00:33:29,490
sir and if you speak to the eyes and
engineers they've

522
00:33:29,490 --> 00:33:32,669
cook poses catching up but they still
have a marked preference

523
00:33:32,669 --> 00:33:39,539
for I R but whichever compiler these
internally for generating the BSL

524
00:33:39,539 --> 00:33:43,190
and it might even be hand written
assembly language they do

525
00:33:43,190 --> 00:33:46,200
and offset thats bitwise

526
00:33:46,200 --> 00:33:50,250
so instead of having two bikes for
everyone at the table

527
00:33:50,250 --> 00:33:53,780
anything not relocatable they only have
one

528
00:33:53,780 --> 00:33:56,629
and they can shove the code anywhere
they like without having to adjust

529
00:33:56,630 --> 00:33:58,380
references

530
00:33:58,380 --> 00:34:03,710
this makes it smaller than GCC and it
makes it even more painful to interpret

531
00:34:03,710 --> 00:34:08,839
because I can't just do automated
interpreter for GCC style

532
00:34:08,839 --> 00:34:13,149
is I wanna catch the other compilers as
officials like that will be written

533
00:34:13,149 --> 00:34:16,159
but automated handling a cig jump tables

534
00:34:16,159 --> 00:34:19,569
is not yet working also

535
00:34:19,569 --> 00:34:23,859
many of the operating systems who turned
is being used loosely it's really

536
00:34:23,859 --> 00:34:25,730
moreover compiler environment

537
00:34:25,730 --> 00:34:28,909
and standard library

538
00:34:28,909 --> 00:34:32,379
that exist for these platforms they do
automatic inlining

539
00:34:32,379 --> 00:34:35,909
because stack memory is very precious so
if you have

540
00:34:35,909 --> 00:34:40,389
function foo which only calls bar and
bars not called anywhere else

541
00:34:40,389 --> 00:34:43,919
within your code it just appears

542
00:34:43,918 --> 00:34:47,190
in machine language as food doing

543
00:34:47,190 --> 00:34:52,220
whatever bar would have done with no
immediate call

544
00:34:52,220 --> 00:34:55,440
this gets tricky because sometimes you
can have

545
00:34:55,440 --> 00:34:59,780
the same library function called only
once

546
00:34:59,780 --> 00:35:04,789
and then it doesn't show up if entire US
you only do an absolute value call once

547
00:35:04,789 --> 00:35:08,420
absolute value does not show up as a
distinct function

548
00:35:08,420 --> 00:35:13,599
it's just shoved right in the middle if
you're calling function

549
00:35:13,599 --> 00:35:17,220
there's also an issue

550
00:35:17,220 --> 00:35:20,549
when writing patches for PC software

551
00:35:20,549 --> 00:35:25,069
you can often get away with just shoving
your code in

552
00:35:25,069 --> 00:35:29,029
having it change bites within memory and
continuing

553
00:35:29,030 --> 00:35:33,000
and this works wonderfully in simulation

554
00:35:33,000 --> 00:35:36,920
because and simulation you can make
flash ROM rear I double as if it were

555
00:35:36,920 --> 00:35:38,569
ran

556
00:35:38,569 --> 00:35:42,180
you can do a simple make violence C
compiler yes and preprocessor directives

557
00:35:42,180 --> 00:35:44,348
specifying the addresses that are going
to be

558
00:35:44,349 --> 00:35:48,549
hooked and it's easy to port it to a
different version of whatever you're

559
00:35:48,549 --> 00:35:49,869
analyzing these young ass

560
00:35:49,869 --> 00:35:53,450
change this constancy don't have to open
up a hex editor and

561
00:35:53,450 --> 00:35:57,180
Patchett knowledge that stuff but in
hardware

562
00:35:57,180 --> 00:36:02,020
because the code is in Flash and not RAM
well you can turn an individual bit from

563
00:36:02,020 --> 00:36:06,280
1280 you can only change is zero to one
by changing the entire segment

564
00:36:06,280 --> 00:36:10,780
to a segment once and this becomes a
complicated routine of copying

565
00:36:10,780 --> 00:36:13,230
everything to either another segment in
Flash

566
00:36:13,230 --> 00:36:18,730
order RAM if you have room wiping and
then copying it back

567
00:36:18,730 --> 00:36:21,410
and gets very complicated if you're
trying to do this to the inner vector

568
00:36:21,410 --> 00:36:22,379
table

569
00:36:22,380 --> 00:36:26,420
using have to disable all other us

570
00:36:26,420 --> 00:36:29,809
the menu if to

571
00:36:29,809 --> 00:36:34,569
break the you have to circumvent a lot
of the hardware limitations

572
00:36:34,569 --> 00:36:38,190
it's also important important to note
that you cannot white flash memory well

573
00:36:38,190 --> 00:36:39,719
you're executing flash memory

574
00:36:39,719 --> 00:36:43,890
so whatever patching routine you have
has to be executed from RAM

575
00:36:43,890 --> 00:36:48,308
has to cut off in Europe's first as did
shut down most to the chip

576
00:36:48,309 --> 00:36:53,619
make its change and then restart by
jumping back in a flash

577
00:36:53,619 --> 00:36:58,150
suing hardware it's best serve patches
few points as possible

578
00:36:58,150 --> 00:37:03,390
and a hopefully is a script for

579
00:37:03,390 --> 00:37:08,479
to have any questions yes

580
00:37:08,479 --> 00:37:15,479
yet ship

581
00:37:16,950 --> 00:37:23,950
this

582
00:37:30,910 --> 00:37:36,649
you

583
00:37:36,650 --> 00:37:42,340
why he's as the

584
00:37:42,340 --> 00:37:45,660
microprocessor in quantities at three or
fewer

585
00:37:45,660 --> 00:37:48,890
is free you to sample it and if you want

586
00:37:48,890 --> 00:37:55,890
development kit

587
00:38:05,070 --> 00:38:07,220
be careful about that though they check

588
00:38:07,220 --> 00:38:10,530
that so don't

589
00:38:10,530 --> 00:38:13,650
keep them on this if you're getting free
parts do it

590
00:38:13,650 --> 00:38:16,810
to learn the platform as far as
purchased

591
00:38:16,810 --> 00:38:20,860
as far as purchasing development kit for
twenty dollars you can get an answer

592
00:38:20,860 --> 00:38:21,660
could debugger

593
00:38:21,660 --> 00:38:25,319
which does everything that the J tag

594
00:38:25,320 --> 00:38:28,570
unit are displayed does for certain ship
models

595
00:38:28,570 --> 00:38:32,860
over what they cost by by wire as well
as a target word

596
00:38:32,860 --> 00:38:36,410
with a chip on it you can compile
suffers GCC

597
00:38:36,410 --> 00:38:39,859
right on their they make a higher end
model with

598
00:38:39,860 --> 00:38:44,340
which includes to rip to target boards
both which have a more powerful chips

599
00:38:44,340 --> 00:38:47,890
and radios this is only fifty dollars

600
00:38:47,890 --> 00:38:51,330
this minor issues with developing in
latex

601
00:38:51,330 --> 00:38:55,490
I've written articles on getting it

602
00:38:55,490 --> 00:38:58,810
to work in there you you essentially
have to downgrade the firmware

603
00:38:58,810 --> 00:39:03,540
love to have the chips on the board but
you can make it compatible

604
00:39:03,540 --> 00:39:07,830
and you can compile your firmware using
gcc thing is

605
00:39:07,830 --> 00:39:11,390
I R and UNIX it all works perfectly in
under Wine

606
00:39:11,390 --> 00:39:15,799
but the development equipment is very
cheap

607
00:39:15,800 --> 00:39:20,420
and it's a very nice platform this does
things that pic could only dream about

608
00:39:20,420 --> 00:39:27,420
and psychic at UIC

609
00:39:30,869 --> 00:39:34,940
right and you have actual

610
00:39:34,940 --> 00:39:39,140
RAM with stack in round it's fun women
architecture so you can do rear I double

611
00:39:39,140 --> 00:39:39,618
code

612
00:39:39,619 --> 00:39:43,560
as everybody go you can have code just
spits out bytes

613
00:39:43,560 --> 00:39:47,320
and then jumps to them an excuse and you
can't do that on a pic

614
00:39:47,320 --> 00:39:50,830
you have as deeper stack

615
00:39:50,830 --> 00:39:55,460
as you have free memory you can do all
sorts of fancy stuff

616
00:39:55,460 --> 00:40:02,460
the pic cannot do for about the same
price so does that answer your question

617
00:40:02,460 --> 00:40:07,300
I did

618
00:40:07,300 --> 00:40:11,450
I feel of so I presented that

619
00:40:11,450 --> 00:40:15,250
to work on 2007 and TI DC 2008

620
00:40:15,250 --> 00:40:20,310
I'll if you like to hear that presented
tonight or tomorrow

621
00:40:20,310 --> 00:40:26,290
gave asleep first who'd like to see it
tomorrow afternoon at name a time

622
00:40:26,290 --> 00:40:33,290
okay I C

623
00:40:35,750 --> 00:40:38,510
right the so I'll do it it's

624
00:40:38,510 --> 00:40:42,960
save 4 o'clock tomorrow I

625
00:40:42,960 --> 00:40:46,150
any other questions yes

626
00:40:46,150 --> 00:40:53,150
yes

627
00:40:53,380 --> 00:40:56,739
sue this isn't their as: chip

628
00:40:56,739 --> 00:41:00,450
has either been announced since I last
looked for at

629
00:41:00,450 --> 00:41:05,729
or has not yet been announced if you
look carefully through their marketing

630
00:41:05,729 --> 00:41:06,410
literature

631
00:41:06,410 --> 00:41:09,308
they do their block diagrams and all
that stuff before they make the official

632
00:41:09,309 --> 00:41:10,339
announcements

633
00:41:10,339 --> 00:41:14,279
so you can see peripherals in their
marketing

634
00:41:14,279 --> 00:41:18,170
pictures that don't yet exist in the
marketing taxed and don't yet exist

635
00:41:18,170 --> 00:41:25,170
in chips that you can order or a look at
the day she's for well

636
00:41:27,039 --> 00:41:30,849
if it works the way that multiplication
does there's no multiple instruction

637
00:41:30,849 --> 00:41:34,380
on this chip you right you're too

638
00:41:34,380 --> 00:41:37,859
factors in two different registers

639
00:41:37,859 --> 00:41:42,078
you hit an interrupt and then two more
registers have the result

640
00:41:42,079 --> 00:41:47,670
or one depending upon whether you want
there's one clock cycle which the result

641
00:41:47,670 --> 00:41:48,529
is invalid

642
00:41:48,529 --> 00:41:52,160
but on the clock cycle after that you
can read the results than

643
00:41:52,160 --> 00:41:56,038
incredible chip and they did this
without taking over another up

644
00:41:56,039 --> 00:41:59,789
if you're interested in

645
00:41:59,789 --> 00:42:03,529
say multiplication on a chip without it
is an excellent article

646
00:42:03,529 --> 00:42:08,430
on doing soft multiplication and I
recently extended that to do

647
00:42:08,430 --> 00:42:11,979
suffocation with code rewriting to you
can

648
00:42:11,979 --> 00:42:15,380
call my code with whatever

649
00:42:15,380 --> 00:42:20,469
number you wish to multiply by and it
generates fixed-point

650
00:42:20,469 --> 00:42:24,099
machine code in RAM that you can branch
to

651
00:42:24,099 --> 00:42:28,910
to perform the multiplication and

652
00:42:28,910 --> 00:42:34,479
something like that is only possible on
fun I'm an architect is like the 430 if

653
00:42:34,479 --> 00:42:36,229
you try to do this in a 251

654
00:42:36,229 --> 00:42:39,390
you would have to do memory management
tricks

655
00:42:39,390 --> 00:42:44,029
I'm the 8051 shipping working with now

656
00:42:44,029 --> 00:42:48,910
actually cannot modify its own code
because if yes what the code out

657
00:42:48,910 --> 00:42:52,940
then you are no longer executing your
own code to rewrite itself

658
00:42:52,940 --> 00:42:57,809
and there's no other RAM available
butted

659
00:42:57,809 --> 00:43:02,200
this architectures know that clutch any
other questions

660
00:43:02,200 --> 00:43:09,200
yes

661
00:43:10,320 --> 00:43:14,040
no I haven't and I have done work with
them by

662
00:43:14,040 --> 00:43:18,020
it's a bus sniffing and I can stick to
syringe needles

663
00:43:18,020 --> 00:43:22,540
into traces in the board and grad year:
as: keys

664
00:43:22,540 --> 00:43:26,630
as you send them from the CPU to the
radio because and present designs

665
00:43:26,630 --> 00:43:30,430
the radio does the hardware acceleration
today s rather than the CPO

666
00:43:30,430 --> 00:43:35,470
and if you sniff it on the bus instead
over the radio you get

667
00:43:35,470 --> 00:43:39,170
they're taxed as well as keys on

668
00:43:39,170 --> 00:43:45,240
is a standard coming out which actually
specifies that we're going to use a ass

669
00:43:45,240 --> 00:43:49,210
and we're going to have affixed able to
enter six keys

670
00:43:49,210 --> 00:43:52,660
and it should be noted that sending

671
00:43:52,660 --> 00:43:56,080
the keys in the clear over the bus might
be an issue

672
00:43:56,080 --> 00:44:00,660
and this is in a secure environment
we're not talking about a toy here

673
00:44:00,660 --> 00:44:04,049
lots of people are making lots of
mistakes

674
00:44:04,050 --> 00:44:08,680
in designing hardware of this type and

675
00:44:08,680 --> 00:44:12,890
in the near future software for
analyzing microcontroller software

676
00:44:12,890 --> 00:44:16,609
become essential to securing these
devices

677
00:44:16,609 --> 00:44:19,940
to determining whether or not what you
purchased

678
00:44:19,940 --> 00:44:24,030
is secure enough for its yes

679
00:44:24,030 --> 00:44:29,470
no

680
00:44:29,470 --> 00:44:33,050
any other questions

681
00:44:33,050 --> 00:44:38,330
because I will canceling the talk
tomorrow for four

682
00:44:38,330 --> 00:44:42,859
have look at the itinerary to make sure
that it's

683
00:44:42,859 --> 00:44:46,390
pencils and and a few announcements

684
00:44:46,390 --> 00:44:50,600
don't block the hotel

685
00:44:50,600 --> 00:44:54,130
for good rude don't turn the TVs of

686
00:44:54,130 --> 00:44:59,000
they don't like it a and then there's a

687
00:44:59,000 --> 00:45:02,650
solar compass for the human domain talk
in this is %um

688
00:45:02,650 --> 00:45:09,650
I don't know what it is yeah

689
00:45:24,500 --> 00:45:26,830
ok yeah

690
00:45:26,830 --> 00:45:27,140
somewhere

