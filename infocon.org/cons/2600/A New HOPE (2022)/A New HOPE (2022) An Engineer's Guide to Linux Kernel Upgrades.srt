1
00:00:00,480 --> 00:00:03,120
anybody nice did you perform

2
00:00:03,120 --> 00:00:05,760
how was it

3
00:00:10,559 --> 00:00:12,880
bring your talents tonight okay

4
00:00:12,880 --> 00:00:14,000
um

5
00:00:14,000 --> 00:00:15,759
and let's say just mute your phones

6
00:00:15,759 --> 00:00:18,560
these are the basic ones for today enjoy

7
00:00:18,560 --> 00:00:20,800
you know ask questions

8
00:00:20,800 --> 00:00:22,160
so

9
00:00:22,160 --> 00:00:24,000
today's talk is or this one is an

10
00:00:24,000 --> 00:00:25,599
engineer's guide to linux kernel

11
00:00:25,599 --> 00:00:28,320
upgrades we have ignet corchagen he's

12
00:00:28,320 --> 00:00:30,160
going to present and then we want to

13
00:00:30,160 --> 00:00:31,840
leave some time for questions join the

14
00:00:31,840 --> 00:00:34,079
matrix chats if you haven't already the

15
00:00:34,079 --> 00:00:36,480
cool thing about it is that you can keep

16
00:00:36,480 --> 00:00:39,200
the conversation going as long you know

17
00:00:39,200 --> 00:00:40,879
once the conference ends so give them

18
00:00:40,879 --> 00:00:45,210
our hand and let's get started

19
00:00:45,210 --> 00:00:48,369
[Applause]

20
00:00:48,879 --> 00:00:50,640
good morning

21
00:00:50,640 --> 00:00:51,920
thank you for

22
00:00:51,920 --> 00:00:53,920
finding the strengths to come to my

23
00:00:53,920 --> 00:00:55,520
lecture today after yesterday's

24
00:00:55,520 --> 00:00:57,199
celebrations

25
00:00:57,199 --> 00:00:59,920
my name is signet i'm from claudia and

26
00:00:59,920 --> 00:01:01,840
today we're going to talk about

27
00:01:01,840 --> 00:01:03,840
linux kernel upgrades

28
00:01:03,840 --> 00:01:06,080
mostly in production systems and

29
00:01:06,080 --> 00:01:08,880
hopefully after this talk you will know

30
00:01:08,880 --> 00:01:10,479
more

31
00:01:10,479 --> 00:01:12,560
in the notes of linux kernel grades how

32
00:01:12,560 --> 00:01:13,840
they are different from software

33
00:01:13,840 --> 00:01:16,000
upgrades and you will have some tips on

34
00:01:16,000 --> 00:01:17,200
how to

35
00:01:17,200 --> 00:01:19,040
safely and

36
00:01:19,040 --> 00:01:21,280
of often upgrade your kernel in

37
00:01:21,280 --> 00:01:23,680
production

38
00:01:23,680 --> 00:01:26,400
okay a little bit about myself first so

39
00:01:26,400 --> 00:01:29,520
i run the linux team at cloudflare

40
00:01:29,520 --> 00:01:31,759
i'm passionate about systems security

41
00:01:31,759 --> 00:01:33,920
and performance and i enjoy level

42
00:01:33,920 --> 00:01:35,200
programming

43
00:01:35,200 --> 00:01:38,079
kernel device drivers bootloaders and

44
00:01:38,079 --> 00:01:42,960
other scary low-level stuff in c

45
00:01:43,439 --> 00:01:46,640
okay but before we dive in let's do a

46
00:01:46,640 --> 00:01:49,759
small show of hands to wake up like

47
00:01:49,759 --> 00:01:51,759
imagine you're working and what would

48
00:01:51,759 --> 00:01:53,600
you do in this case you get a

49
00:01:53,600 --> 00:01:55,200
notification

50
00:01:55,200 --> 00:01:57,119
upgrades available

51
00:01:57,119 --> 00:01:59,119
who will press the button to apply

52
00:01:59,119 --> 00:02:01,280
immediately

53
00:02:01,280 --> 00:02:02,320
okay

54
00:02:02,320 --> 00:02:04,479
yes yeah fine

55
00:02:04,479 --> 00:02:07,040
who will postpone or

56
00:02:07,040 --> 00:02:10,318
oh wow wow

57
00:02:10,318 --> 00:02:13,280
and this is just your laptops right

58
00:02:13,280 --> 00:02:14,560
so like

59
00:02:14,560 --> 00:02:16,640
then the next question like of all the

60
00:02:16,640 --> 00:02:18,400
people who would apply immediately would

61
00:02:18,400 --> 00:02:19,840
you do differently if it was a

62
00:02:19,840 --> 00:02:22,319
production system

63
00:02:22,319 --> 00:02:23,440
oh

64
00:02:23,440 --> 00:02:25,040
who would not do this who would still

65
00:02:25,040 --> 00:02:27,599
press apply

66
00:02:27,599 --> 00:02:30,160
good job

67
00:02:30,319 --> 00:02:32,160
right so yeah for production system

68
00:02:32,160 --> 00:02:35,040
upgrades are a little bit like very pain

69
00:02:35,040 --> 00:02:37,519
pain points right so you actually have

70
00:02:37,519 --> 00:02:39,599
two options either remind me later or

71
00:02:39,599 --> 00:02:42,400
don't do it at all so

72
00:02:42,400 --> 00:02:43,440
and

73
00:02:43,440 --> 00:02:46,640
and this is natural right so

74
00:02:46,640 --> 00:02:49,440
human beings are conservative and like

75
00:02:49,440 --> 00:02:50,800
we perceive

76
00:02:50,800 --> 00:02:52,720
especially software engineers like we

77
00:02:52,720 --> 00:02:54,080
perceive things

78
00:02:54,080 --> 00:02:56,239
changing things as a threat

79
00:02:56,239 --> 00:02:57,760
right so

80
00:02:57,760 --> 00:02:59,680
if it works like why should we touch it

81
00:02:59,680 --> 00:03:02,000
in the first place right

82
00:03:02,000 --> 00:03:04,239
but the reality is like we proceed

83
00:03:04,239 --> 00:03:06,239
different software we may perceive with

84
00:03:06,239 --> 00:03:08,400
different levels of threat

85
00:03:08,400 --> 00:03:09,120
so

86
00:03:09,120 --> 00:03:11,599
with regular software blades

87
00:03:11,599 --> 00:03:13,680
yeah they're bad right they're like a

88
00:03:13,680 --> 00:03:16,560
threat a risk to your production system

89
00:03:16,560 --> 00:03:17,599
and

90
00:03:17,599 --> 00:03:19,920
like if it goes bad

91
00:03:19,920 --> 00:03:21,599
it kind of like

92
00:03:21,599 --> 00:03:24,480
will somewhat get you in trouble right

93
00:03:24,480 --> 00:03:25,599
but

94
00:03:25,599 --> 00:03:28,000
so grades are monsters but they're not

95
00:03:28,000 --> 00:03:29,920
really that scary yeah they're ugly

96
00:03:29,920 --> 00:03:32,400
annoying but like we can deal with them

97
00:03:32,400 --> 00:03:34,000
right

98
00:03:34,000 --> 00:03:35,920
when we mentioned linux kernel upgrade

99
00:03:35,920 --> 00:03:38,640
so the perception is this so it's like a

100
00:03:38,640 --> 00:03:40,959
all destroying monster which can like

101
00:03:40,959 --> 00:03:42,959
destruct the whole planet in like in

102
00:03:42,959 --> 00:03:44,239
five minutes

103
00:03:44,239 --> 00:03:46,799
and and this is again this is natural

104
00:03:46,799 --> 00:03:48,000
because

105
00:03:48,000 --> 00:03:49,120
uh

106
00:03:49,120 --> 00:03:52,000
we kind of know how to deal with bad

107
00:03:52,000 --> 00:03:54,640
software upgrades right so imagine in

108
00:03:54,640 --> 00:03:58,319
this case we upgraded a service and uh

109
00:03:58,319 --> 00:03:59,200
like

110
00:03:59,200 --> 00:04:01,120
let's say if it just keeps crashing we

111
00:04:01,120 --> 00:04:03,280
can roll it back fast it's okay but

112
00:04:03,280 --> 00:04:05,840
let's say it kind of works but once in a

113
00:04:05,840 --> 00:04:08,560
while it it crashes right and and we

114
00:04:08,560 --> 00:04:10,159
know how to deal with that so it's not

115
00:04:10,159 --> 00:04:12,400
an end of the world so if you use like

116
00:04:12,400 --> 00:04:14,239
some kind of service manager you can

117
00:04:14,239 --> 00:04:16,160
tell it like please monitor my service

118
00:04:16,160 --> 00:04:18,560
and restart it once in a while

119
00:04:18,560 --> 00:04:19,918
and uh

120
00:04:19,918 --> 00:04:21,759
and yeah and the job is done

121
00:04:21,759 --> 00:04:24,160
right well it's not done but you're kind

122
00:04:24,160 --> 00:04:26,800
of you're not breaking stuff you're kind

123
00:04:26,800 --> 00:04:28,880
of operating in a degraded mode but it

124
00:04:28,880 --> 00:04:31,280
gives you like time to more thoroughly

125
00:04:31,280 --> 00:04:35,919
debug things and and fix it right

126
00:04:36,479 --> 00:04:39,919
but when the linux kernel crashes right

127
00:04:39,919 --> 00:04:41,919
everything is down you don't have your

128
00:04:41,919 --> 00:04:44,800
system it's not working and everything

129
00:04:44,800 --> 00:04:47,440
is bad right and therefore

130
00:04:47,440 --> 00:04:50,160
like nobody likes and nobody wants to

131
00:04:50,160 --> 00:04:51,600
risk

132
00:04:51,600 --> 00:04:55,000
kernel upgrade

133
00:04:56,080 --> 00:04:58,800
so people people naturally try to avoid

134
00:04:58,800 --> 00:05:01,120
that especially in production systems

135
00:05:01,120 --> 00:05:02,240
right

136
00:05:02,240 --> 00:05:04,000
but

137
00:05:04,000 --> 00:05:06,479
if you don't do that you're really

138
00:05:06,479 --> 00:05:07,919
missing out

139
00:05:07,919 --> 00:05:10,720
right and let's talk about what are the

140
00:05:10,720 --> 00:05:13,600
risk of not applying software updates

141
00:05:13,600 --> 00:05:17,199
and kernel upgrades in particular

142
00:05:17,199 --> 00:05:18,000
well

143
00:05:18,000 --> 00:05:22,479
the first and the most obvious things

144
00:05:22,479 --> 00:05:24,639
bugs are your bugs are not getting fixed

145
00:05:24,639 --> 00:05:27,600
right like uh let's assume all good

146
00:05:27,600 --> 00:05:29,759
intentions from all software developers

147
00:05:29,759 --> 00:05:31,840
people do not release updates just

148
00:05:31,840 --> 00:05:33,440
because they want to

149
00:05:33,440 --> 00:05:35,120
yeah they they introduce new features

150
00:05:35,120 --> 00:05:36,880
new code but as well as like fix a lot

151
00:05:36,880 --> 00:05:40,000
of bugs and therefore

152
00:05:40,000 --> 00:05:42,479
it is important to keep up with updates

153
00:05:42,479 --> 00:05:44,080
with software updates and linux kernel

154
00:05:44,080 --> 00:05:45,840
updates in particular because you want

155
00:05:45,840 --> 00:05:48,720
these bugs to be fixed

156
00:05:48,720 --> 00:05:51,840
and here is some data so cloud for now

157
00:05:51,840 --> 00:05:54,400
usually follows the latest linux kernel

158
00:05:54,400 --> 00:05:56,800
stable long-term release branch which is

159
00:05:56,800 --> 00:05:59,199
currently 5.15

160
00:05:59,199 --> 00:06:01,600
and at the time of compiling this

161
00:06:01,600 --> 00:06:04,560
presentation there were 55 bug fix

162
00:06:04,560 --> 00:06:07,280
releases in the 515 branch i will talk

163
00:06:07,280 --> 00:06:08,479
about

164
00:06:08,479 --> 00:06:10,639
release branches and bug fix releases

165
00:06:10,639 --> 00:06:12,720
later in this presentation but so far

166
00:06:12,720 --> 00:06:14,880
there are like 55 releases in the branch

167
00:06:14,880 --> 00:06:18,160
which was just bug fixes right

168
00:06:18,160 --> 00:06:19,039
and

169
00:06:19,039 --> 00:06:22,000
this is the data of number of commits

170
00:06:22,000 --> 00:06:25,520
therefore bug fixes in each release

171
00:06:25,520 --> 00:06:26,639
right

172
00:06:26,639 --> 00:06:28,560
and it is

173
00:06:28,560 --> 00:06:33,120
out of 55 releases we have 29

174
00:06:33,120 --> 00:06:36,560
releases with more than 100 commits so

175
00:06:36,560 --> 00:06:40,560
somewhat with more than 100 bug fixes

176
00:06:40,560 --> 00:06:42,400
and by the way these releases happen

177
00:06:42,400 --> 00:06:45,039
roughly every week right

178
00:06:45,039 --> 00:06:48,400
so 10 of them have more than 200 commits

179
00:06:48,400 --> 00:06:50,000
so

180
00:06:50,000 --> 00:06:53,039
and for these high bars here four

181
00:06:53,039 --> 00:06:56,639
releases had 600 commits in one release

182
00:06:56,639 --> 00:06:59,759
so imagine if you are not applying a

183
00:06:59,759 --> 00:07:02,639
weekly kernel bug fix release you might

184
00:07:02,639 --> 00:07:04,560
be missing out on

185
00:07:04,560 --> 00:07:07,440
at least at least 100 buck fixes

186
00:07:07,440 --> 00:07:10,880
into your production systems

187
00:07:11,120 --> 00:07:12,960
well the second thing is

188
00:07:12,960 --> 00:07:14,639
you're also will be missing out on

189
00:07:14,639 --> 00:07:18,000
various performance improvements

190
00:07:18,000 --> 00:07:20,080
this is an again example from cloud for

191
00:07:20,080 --> 00:07:21,759
production systems

192
00:07:21,759 --> 00:07:23,599
uh

193
00:07:23,599 --> 00:07:25,199
when i talk about performance

194
00:07:25,199 --> 00:07:27,919
improvements i i i talk here about in a

195
00:07:27,919 --> 00:07:30,160
wider sense so like it's not only about

196
00:07:30,160 --> 00:07:32,080
speed but performance improvements means

197
00:07:32,080 --> 00:07:33,840
better uh

198
00:07:33,840 --> 00:07:35,840
resource utilization and this was the

199
00:07:35,840 --> 00:07:39,039
case for cloud for when we migrated from

200
00:07:39,039 --> 00:07:40,560
a five dot

201
00:07:40,560 --> 00:07:44,720
four kernel to 5.10 kernel so we of

202
00:07:44,720 --> 00:07:46,319
course we didn't upgrade everything at

203
00:07:46,319 --> 00:07:48,479
once we did a limited deployment to to

204
00:07:48,479 --> 00:07:50,960
compare and like just upgrading the

205
00:07:50,960 --> 00:07:52,800
kernel

206
00:07:52,800 --> 00:07:55,599
actually saved us like around five

207
00:07:55,599 --> 00:07:58,400
gigabyte of ram per server

208
00:07:58,400 --> 00:08:00,800
because nice folks from facebook like

209
00:08:00,800 --> 00:08:02,479
optimize the memory management sum

210
00:08:02,479 --> 00:08:04,400
system in one of the major kernel

211
00:08:04,400 --> 00:08:06,400
releases and we just got it for free

212
00:08:06,400 --> 00:08:09,440
right and like in cloud for scales where

213
00:08:09,440 --> 00:08:11,919
we have like around 300 data centers

214
00:08:11,919 --> 00:08:15,120
across across the world uh

215
00:08:15,120 --> 00:08:17,039
five gigabytes of ram per service a

216
00:08:17,039 --> 00:08:19,919
massive saving

217
00:08:21,599 --> 00:08:23,440
if you're also if you're not applying

218
00:08:23,440 --> 00:08:24,960
the releases

219
00:08:24,960 --> 00:08:27,599
you have the accumulating change

220
00:08:27,599 --> 00:08:30,319
delta problem right so this is kind of

221
00:08:30,319 --> 00:08:32,719
like the same data i presented

222
00:08:32,719 --> 00:08:34,559
several slides before

223
00:08:34,559 --> 00:08:36,559
number of

224
00:08:36,559 --> 00:08:38,880
commits per release but in in from a

225
00:08:38,880 --> 00:08:40,479
different view so this is a total

226
00:08:40,479 --> 00:08:42,320
commits per release since

227
00:08:42,320 --> 00:08:45,760
uh release zero so in this in this graph

228
00:08:45,760 --> 00:08:48,000
like release one has some x amount of

229
00:08:48,000 --> 00:08:49,839
commits uh

230
00:08:49,839 --> 00:08:51,839
release two shows you

231
00:08:51,839 --> 00:08:53,760
number of commits from release one plus

232
00:08:53,760 --> 00:08:55,519
release two and so on so

233
00:08:55,519 --> 00:08:57,440
it's it's just a different view of the

234
00:08:57,440 --> 00:08:59,839
data but it it kind of allows you to

235
00:08:59,839 --> 00:09:02,959
measure the commit delta right

236
00:09:02,959 --> 00:09:04,240
so let's say

237
00:09:04,240 --> 00:09:06,839
you're currently running on

238
00:09:06,839 --> 00:09:08,640
5.15.6

239
00:09:08,640 --> 00:09:09,680
version

240
00:09:09,680 --> 00:09:14,040
and you're considering to upgrade to

241
00:09:14,040 --> 00:09:17,360
5.15.32 version right like 32 version is

242
00:09:17,360 --> 00:09:19,760
the latest so your kind of commit delta

243
00:09:19,760 --> 00:09:20,839
is

244
00:09:20,839 --> 00:09:22,640
2100

245
00:09:22,640 --> 00:09:24,320
commits

246
00:09:24,320 --> 00:09:26,560
okay

247
00:09:27,279 --> 00:09:28,160
and

248
00:09:28,160 --> 00:09:29,920
we

249
00:09:29,920 --> 00:09:32,720
it would be natural to assume that the

250
00:09:32,720 --> 00:09:34,800
number of commits you are accepting in

251
00:09:34,800 --> 00:09:37,120
production is proportional to your risk

252
00:09:37,120 --> 00:09:39,920
right and it's yeah the more changes

253
00:09:39,920 --> 00:09:42,880
you apply the more risk

254
00:09:42,880 --> 00:09:45,360
there is that something will break

255
00:09:45,360 --> 00:09:46,399
in

256
00:09:46,399 --> 00:09:48,160
after the upgrade

257
00:09:48,160 --> 00:09:50,959
so let's say

258
00:09:50,959 --> 00:09:53,360
for whatever reasons you want to

259
00:09:53,360 --> 00:09:55,760
postpone the upgrade right and and you

260
00:09:55,760 --> 00:09:56,640
wait

261
00:09:56,640 --> 00:09:58,959
uh you wait twice as long as you

262
00:09:58,959 --> 00:10:02,079
originally intended and once you figure

263
00:10:02,079 --> 00:10:04,800
out that you're ready to upgrade

264
00:10:04,800 --> 00:10:08,640
you're now upgrading from 5.15.16

265
00:10:08,640 --> 00:10:09,800
to

266
00:10:09,800 --> 00:10:12,320
5.15.48 because you waited at twice as

267
00:10:12,320 --> 00:10:15,120
long and now your commit

268
00:10:15,120 --> 00:10:17,440
change delta is 5

269
00:10:17,440 --> 00:10:18,560
400

270
00:10:18,560 --> 00:10:21,279
commits in this case right

271
00:10:21,279 --> 00:10:23,920
so now we can calculate

272
00:10:23,920 --> 00:10:24,880
like

273
00:10:24,880 --> 00:10:27,839
the difference uh or the relative change

274
00:10:27,839 --> 00:10:29,279
commit delta

275
00:10:29,279 --> 00:10:32,880
and in this particular case it will be

276
00:10:32,880 --> 00:10:36,000
almost 2.5 right and this is an

277
00:10:36,000 --> 00:10:37,839
important

278
00:10:37,839 --> 00:10:39,600
number because

279
00:10:39,600 --> 00:10:41,519
it will show you

280
00:10:41,519 --> 00:10:44,399
in this particular case that

281
00:10:44,399 --> 00:10:47,040
for a 2x delay

282
00:10:47,040 --> 00:10:48,720
you get

283
00:10:48,720 --> 00:10:53,360
2.5 higher risk of a braking change

284
00:10:53,360 --> 00:10:54,240
right

285
00:10:54,240 --> 00:10:56,800
so your risk of delaying the upgrade

286
00:10:56,800 --> 00:11:00,720
grows faster than the time your delay

287
00:11:00,720 --> 00:11:03,600
which is very interesting so therefore

288
00:11:03,600 --> 00:11:06,640
like small regular releases and keeping

289
00:11:06,640 --> 00:11:08,720
your change delta small

290
00:11:08,720 --> 00:11:11,839
gives you lower risk

291
00:11:12,480 --> 00:11:14,240
when you're not applying updates you're

292
00:11:14,240 --> 00:11:17,040
missing out on security vulnerabilities

293
00:11:17,040 --> 00:11:19,680
right and this is from bug fixes these

294
00:11:19,680 --> 00:11:21,680
are another types of fixes which are

295
00:11:21,680 --> 00:11:23,519
introduced in every kernel weekly

296
00:11:23,519 --> 00:11:25,279
release

297
00:11:25,279 --> 00:11:28,880
this is again data from the 5.15 kernel

298
00:11:28,880 --> 00:11:30,959
stable branch

299
00:11:30,959 --> 00:11:32,959
i don't didn't have the data for the

300
00:11:32,959 --> 00:11:34,800
latest releases it's the data is

301
00:11:34,800 --> 00:11:36,399
available up to dot

302
00:11:36,399 --> 00:11:39,040
54

303
00:11:39,040 --> 00:11:40,399
and

304
00:11:40,399 --> 00:11:42,640
the important

305
00:11:42,640 --> 00:11:46,399
message here is out of 54 releases in

306
00:11:46,399 --> 00:11:47,920
this graph

307
00:11:47,920 --> 00:11:49,120
40

308
00:11:49,120 --> 00:11:52,240
have at least one cv patched

309
00:11:52,240 --> 00:11:55,760
right so almost every release has at

310
00:11:55,760 --> 00:11:58,639
least one cv patch and three of those

311
00:11:58,639 --> 00:12:02,000
had more than 10 cvs patch now imagine

312
00:12:02,000 --> 00:12:04,639
if you are not applying a particular

313
00:12:04,639 --> 00:12:06,240
kernel upgrade

314
00:12:06,240 --> 00:12:07,440
you have

315
00:12:07,440 --> 00:12:10,720
cves not patched which is and no and

316
00:12:10,720 --> 00:12:13,360
these are known public cvs by the way so

317
00:12:13,360 --> 00:12:15,680
these are not some kind of zero days and

318
00:12:15,680 --> 00:12:17,839
and some research right

319
00:12:17,839 --> 00:12:18,959
and on top

320
00:12:18,959 --> 00:12:20,320
of

321
00:12:20,320 --> 00:12:22,639
risking your security you have also

322
00:12:22,639 --> 00:12:26,639
compliance risks right so once the fixed

323
00:12:26,639 --> 00:12:28,320
has been published

324
00:12:28,320 --> 00:12:31,279
if your production system is compliant

325
00:12:31,279 --> 00:12:33,920
to something you will likely have

326
00:12:33,920 --> 00:12:36,480
this requirement i mean i took the

327
00:12:36,480 --> 00:12:40,160
example from the pci dss

328
00:12:40,160 --> 00:12:43,600
certification but like other compliance

329
00:12:43,600 --> 00:12:45,440
systems have similar requirements that

330
00:12:45,440 --> 00:12:48,000
for a known patch you have a limited

331
00:12:48,000 --> 00:12:49,279
time frame

332
00:12:49,279 --> 00:12:52,000
where you need to deploy to production

333
00:12:52,000 --> 00:12:55,360
and like for pcsdss for example it it's

334
00:12:55,360 --> 00:12:57,519
for critical components and linux kernel

335
00:12:57,519 --> 00:12:59,360
most likely is a critical component

336
00:12:59,360 --> 00:13:01,360
because it's a operating system right

337
00:13:01,360 --> 00:13:03,279
your production operating system

338
00:13:03,279 --> 00:13:05,360
and like for pci dss you will have only

339
00:13:05,360 --> 00:13:06,880
like one month

340
00:13:06,880 --> 00:13:08,399
since the patch was introduced to

341
00:13:08,399 --> 00:13:11,600
release it to your production

342
00:13:13,440 --> 00:13:18,160
who here didn't heard about active fox

343
00:13:19,279 --> 00:13:20,720
right so

344
00:13:20,720 --> 00:13:22,800
active didn't patch a known

345
00:13:22,800 --> 00:13:24,399
vulnerability

346
00:13:24,399 --> 00:13:26,560
and it got exploited and it got

347
00:13:26,560 --> 00:13:29,519
exploited with very severe consequences

348
00:13:29,519 --> 00:13:33,839
financial for business and everything

349
00:13:33,839 --> 00:13:35,120
so remember

350
00:13:35,120 --> 00:13:37,279
every weekly kernel release has at least

351
00:13:37,279 --> 00:13:39,519
one cv patched and your clock starts

352
00:13:39,519 --> 00:13:40,560
ticking

353
00:13:40,560 --> 00:13:43,040
when when when it gets released right

354
00:13:43,040 --> 00:13:46,000
and therefore you know like i remember

355
00:13:46,000 --> 00:13:48,560
like 10 or 20 years ago

356
00:13:48,560 --> 00:13:50,720
when you go to the sysadmin forums

357
00:13:50,720 --> 00:13:54,320
online and like people like virus system

358
00:13:54,320 --> 00:13:57,040
boasting like oh my up time is two years

359
00:13:57,040 --> 00:13:59,680
my time is 60. so this is not great

360
00:13:59,680 --> 00:14:02,320
anymore like if europe time is more than

361
00:14:02,320 --> 00:14:04,240
30 days most likely you're vulnerable

362
00:14:04,240 --> 00:14:08,079
and you're breaking compliance right

363
00:14:10,720 --> 00:14:15,279
okay so now that we talked about

364
00:14:15,279 --> 00:14:18,399
the risks of not applying that braid

365
00:14:18,399 --> 00:14:20,160
let's talk about the common

366
00:14:20,160 --> 00:14:22,320
anti-patterns which

367
00:14:22,320 --> 00:14:24,079
like i've encountered in my own

368
00:14:24,079 --> 00:14:25,839
experience working in cloud for another

369
00:14:25,839 --> 00:14:28,639
companies as well as i've seen in other

370
00:14:28,639 --> 00:14:30,959
even big companies which manage

371
00:14:30,959 --> 00:14:34,719
production systems so

372
00:14:34,880 --> 00:14:37,440
how do they approach

373
00:14:37,440 --> 00:14:39,360
linux kernel upgrades and why they are

374
00:14:39,360 --> 00:14:42,160
wrong right

375
00:14:42,639 --> 00:14:44,800
so yeah in many companies you have like

376
00:14:44,800 --> 00:14:46,720
some kind of assa reorganization or

377
00:14:46,720 --> 00:14:48,800
production engineering like in facebook

378
00:14:48,800 --> 00:14:51,360
they're responsible for production and

379
00:14:51,360 --> 00:14:53,279
oftentimes it's

380
00:14:53,279 --> 00:14:55,440
a team which like

381
00:14:55,440 --> 00:14:57,839
manages the linux kernel distribution is

382
00:14:57,839 --> 00:14:59,360
a different team so you have to

383
00:14:59,360 --> 00:15:01,760
negotiate the upgrade with the

384
00:15:01,760 --> 00:15:03,760
production engineering team

385
00:15:03,760 --> 00:15:06,320
and the problem is they try to apply the

386
00:15:06,320 --> 00:15:08,480
common partners they have for any

387
00:15:08,480 --> 00:15:10,800
regular software to the linux kernel

388
00:15:10,800 --> 00:15:12,480
right so

389
00:15:12,480 --> 00:15:15,120
remember linux kernel is released bug

390
00:15:15,120 --> 00:15:17,199
fix release weekly and they said like

391
00:15:17,199 --> 00:15:18,560
okay we need to

392
00:15:18,560 --> 00:15:20,399
upgrade every week and like every time i

393
00:15:20,399 --> 00:15:23,360
come to them they would ask

394
00:15:23,360 --> 00:15:26,399
okay but do we need to upgrade like have

395
00:15:26,399 --> 00:15:28,079
you reviewed the change lock which

396
00:15:28,079 --> 00:15:30,240
things from the change lock are actually

397
00:15:30,240 --> 00:15:32,480
applicable to us can you justify the

398
00:15:32,480 --> 00:15:34,480
upgrade

399
00:15:34,480 --> 00:15:36,480
and for the linux kernel it's actually

400
00:15:36,480 --> 00:15:38,399
not possible we're going back to this

401
00:15:38,399 --> 00:15:42,079
graph right so

402
00:15:42,560 --> 00:15:45,199
more than half of the weekly releases

403
00:15:45,199 --> 00:15:48,320
have more than 100 commits 100

404
00:15:48,320 --> 00:15:51,279
changes right so

405
00:15:51,279 --> 00:15:52,079
and

406
00:15:52,079 --> 00:15:55,199
you just expect us like a small kind of

407
00:15:55,199 --> 00:15:56,880
team to review all of them like

408
00:15:56,880 --> 00:15:59,279
continuously like we'll be just be doing

409
00:15:59,279 --> 00:16:02,160
just that and like not anything else

410
00:16:02,160 --> 00:16:04,560
and moreover because of the sheer volume

411
00:16:04,560 --> 00:16:06,560
of the commits and changes coming into

412
00:16:06,560 --> 00:16:08,880
the ruling's ground there is a very high

413
00:16:08,880 --> 00:16:10,480
chance there is something from that

414
00:16:10,480 --> 00:16:13,839
hundred or even 600 is really applicable

415
00:16:13,839 --> 00:16:15,519
to your system so you don't have to

416
00:16:15,519 --> 00:16:18,079
review it you just have to take it and

417
00:16:18,079 --> 00:16:19,759
like most likely there will be something

418
00:16:19,759 --> 00:16:23,639
that you need right

419
00:16:24,399 --> 00:16:26,959
when you come with an upgrade

420
00:16:26,959 --> 00:16:29,920
like because uh serious vulnerability

421
00:16:29,920 --> 00:16:31,920
have been

422
00:16:31,920 --> 00:16:33,680
publicized and like everyone is

423
00:16:33,680 --> 00:16:34,800
screaming

424
00:16:34,800 --> 00:16:37,360
they would still ask us like okay but is

425
00:16:37,360 --> 00:16:38,880
this vulnerability is actually

426
00:16:38,880 --> 00:16:41,519
exploitable in our systems like i had

427
00:16:41,519 --> 00:16:43,680
like these questions like before many

428
00:16:43,680 --> 00:16:45,440
times in cloudflare where

429
00:16:45,440 --> 00:16:47,759
we have a like uh privilege escalation

430
00:16:47,759 --> 00:16:49,839
published but for example they say we

431
00:16:49,839 --> 00:16:51,839
don't run like third-party code in our

432
00:16:51,839 --> 00:16:55,680
servers right like if we like

433
00:16:55,680 --> 00:16:58,079
like yeah we really can't protect from

434
00:16:58,079 --> 00:16:59,839
an insider attack but

435
00:16:59,839 --> 00:17:02,000
like but we don't have a possibility of

436
00:17:02,000 --> 00:17:03,040
someone

437
00:17:03,040 --> 00:17:04,720
running their sort of party code on the

438
00:17:04,720 --> 00:17:07,199
system and and getting pretty so is this

439
00:17:07,199 --> 00:17:08,640
security availability actually

440
00:17:08,640 --> 00:17:10,480
exploitably can you prove that it is

441
00:17:10,480 --> 00:17:12,400
exploitable

442
00:17:12,400 --> 00:17:14,240
but the problem is this is the wrong

443
00:17:14,240 --> 00:17:17,520
question to ask right and uh

444
00:17:17,520 --> 00:17:20,480
like think of it from this perspective

445
00:17:20,480 --> 00:17:21,919
so

446
00:17:21,919 --> 00:17:25,599
you're running a linux kernel with

447
00:17:25,599 --> 00:17:27,599
a known vulnerability which you really

448
00:17:27,599 --> 00:17:29,679
don't know if it's exploitable or not

449
00:17:29,679 --> 00:17:32,000
right and let's consider the potential

450
00:17:32,000 --> 00:17:34,400
attacker's perspective the person who

451
00:17:34,400 --> 00:17:37,120
broke in into equifax right

452
00:17:37,120 --> 00:17:39,600
so who is this person the attacker the

453
00:17:39,600 --> 00:17:41,919
attacker is a person who is highly

454
00:17:41,919 --> 00:17:44,000
motivated to break into the system this

455
00:17:44,000 --> 00:17:47,120
is their primary source of income

456
00:17:47,120 --> 00:17:48,720
they know you're running a vulnerable

457
00:17:48,720 --> 00:17:50,400
they potentially know you're running a

458
00:17:50,400 --> 00:17:52,720
vulnerable system right and they spend

459
00:17:52,720 --> 00:17:55,360
exclusively almost 24 7 all their

460
00:17:55,360 --> 00:17:57,520
resources time and effort

461
00:17:57,520 --> 00:17:59,840
just to break into your system and find

462
00:17:59,840 --> 00:18:03,280
a successful exploit right

463
00:18:03,280 --> 00:18:05,679
yeah so the attacker is very very

464
00:18:05,679 --> 00:18:08,480
determined to get into your system and

465
00:18:08,480 --> 00:18:11,440
does nothing else

466
00:18:11,520 --> 00:18:12,840
just to do it

467
00:18:12,840 --> 00:18:15,039
right but

468
00:18:15,039 --> 00:18:17,039
we're asking this question not for the

469
00:18:17,039 --> 00:18:19,600
attacker we're asking this question for

470
00:18:19,600 --> 00:18:22,320
a security engineer a linux kernel

471
00:18:22,320 --> 00:18:24,720
engineer or someone who is reviewing

472
00:18:24,720 --> 00:18:26,320
these patches

473
00:18:26,320 --> 00:18:28,320
they are different right so they're

474
00:18:28,320 --> 00:18:30,520
highly motivated to go home on time

475
00:18:30,520 --> 00:18:32,559
[Laughter]

476
00:18:32,559 --> 00:18:34,400
and most likely they're not like

477
00:18:34,400 --> 00:18:36,240
reviewing just this one patch they're

478
00:18:36,240 --> 00:18:38,400
reviewing like many patches not from the

479
00:18:38,400 --> 00:18:39,840
linux kernel from all the soft

480
00:18:39,840 --> 00:18:42,640
production software they you're using

481
00:18:42,640 --> 00:18:45,039
and they also have like other competing

482
00:18:45,039 --> 00:18:47,120
priorities like security focus build

483
00:18:47,120 --> 00:18:49,919
security architecture create tools

484
00:18:49,919 --> 00:18:52,240
like do consulting many many many other

485
00:18:52,240 --> 00:18:54,160
things right so it's kind of like a

486
00:18:54,160 --> 00:18:56,559
multitasking person

487
00:18:56,559 --> 00:18:57,840
so

488
00:18:57,840 --> 00:19:01,280
the disconnect here is that that person

489
00:19:01,280 --> 00:19:02,799
on the left

490
00:19:02,799 --> 00:19:05,280
is the person who will most likely has

491
00:19:05,280 --> 00:19:07,280
the answer is yours this exploit

492
00:19:07,280 --> 00:19:09,760
applicable to you but you cannot ask

493
00:19:09,760 --> 00:19:11,520
them because you don't know them right

494
00:19:11,520 --> 00:19:13,840
and they're they're bad but you're

495
00:19:13,840 --> 00:19:15,679
asking a question of the wrong person

496
00:19:15,679 --> 00:19:19,520
who cannot really devote that much time

497
00:19:19,520 --> 00:19:21,919
to produce a sense

498
00:19:21,919 --> 00:19:23,200
so therefore

499
00:19:23,200 --> 00:19:26,880
it's not really correct into

500
00:19:26,880 --> 00:19:30,160
uh assuming that

501
00:19:30,160 --> 00:19:32,000
you know like if a security researcher

502
00:19:32,000 --> 00:19:34,480
would say yes this vulnerability is not

503
00:19:34,480 --> 00:19:37,360
applicable it's not really applicable

504
00:19:37,360 --> 00:19:39,440
the safest course of action is to take

505
00:19:39,440 --> 00:19:43,120
and patch it right if it's known

506
00:19:44,799 --> 00:19:46,880
another anti-partner i

507
00:19:46,880 --> 00:19:48,400
see from

508
00:19:48,400 --> 00:19:51,120
sres and production engineers they say

509
00:19:51,120 --> 00:19:53,280
like okay this is a kernel very like

510
00:19:53,280 --> 00:19:54,640
scary thing

511
00:19:54,640 --> 00:19:56,480
it breaks all the servers if it goes

512
00:19:56,480 --> 00:19:59,840
wrong so let let it soak for one month

513
00:19:59,840 --> 00:20:01,440
somewhere in canary to ensure it's

514
00:20:01,440 --> 00:20:03,679
stable right

515
00:20:03,679 --> 00:20:05,280
but again

516
00:20:05,280 --> 00:20:07,120
why it's an anti-partner

517
00:20:07,120 --> 00:20:09,200
because

518
00:20:09,200 --> 00:20:11,760
the more you soak the more you delay the

519
00:20:11,760 --> 00:20:14,320
upgrade the more change delta you

520
00:20:14,320 --> 00:20:16,960
accumulate right

521
00:20:16,960 --> 00:20:18,240
secondly

522
00:20:18,240 --> 00:20:21,520
you have the security portion of it

523
00:20:21,520 --> 00:20:23,600
the more you delay the upgrade the more

524
00:20:23,600 --> 00:20:25,440
you're running with production system

525
00:20:25,440 --> 00:20:27,280
with

526
00:20:27,280 --> 00:20:30,400
uh more than one cv and patch and like

527
00:20:30,400 --> 00:20:31,840
the thing is

528
00:20:31,840 --> 00:20:34,960
this one months in this example was not

529
00:20:34,960 --> 00:20:37,120
an arbitrary number people usually

530
00:20:37,120 --> 00:20:38,960
somewhat come up with two weeks or one

531
00:20:38,960 --> 00:20:40,799
months because they think it's like

532
00:20:40,799 --> 00:20:41,679
enough

533
00:20:41,679 --> 00:20:43,679
like they perceive it as enough but

534
00:20:43,679 --> 00:20:45,120
remember

535
00:20:45,120 --> 00:20:47,360
cves are being patched in the kernel

536
00:20:47,360 --> 00:20:49,840
every week so you your stock time cannot

537
00:20:49,840 --> 00:20:51,919
be larger than that right because you're

538
00:20:51,919 --> 00:20:53,919
not only risking the security of your

539
00:20:53,919 --> 00:20:55,919
system you're again risking your

540
00:20:55,919 --> 00:20:58,159
compliance because

541
00:20:58,159 --> 00:21:00,960
if your soak time is one month there is

542
00:21:00,960 --> 00:21:03,280
no way you're going to deploy a known

543
00:21:03,280 --> 00:21:05,520
patch vulnerability to production in one

544
00:21:05,520 --> 00:21:06,960
month because

545
00:21:06,960 --> 00:21:09,360
you'll soak it in one month in canary

546
00:21:09,360 --> 00:21:11,039
and then you'll have another one months

547
00:21:11,039 --> 00:21:13,600
to release it right or two weeks or

548
00:21:13,600 --> 00:21:16,600
whatever

549
00:21:16,880 --> 00:21:17,840
so

550
00:21:17,840 --> 00:21:19,600
why why people come up with this soak

551
00:21:19,600 --> 00:21:20,720
times

552
00:21:20,720 --> 00:21:22,240
uh

553
00:21:22,240 --> 00:21:25,919
like in my experience and my opinion it

554
00:21:25,919 --> 00:21:28,559
comes down to the fact that

555
00:21:28,559 --> 00:21:30,159
we don't know we're looking for when i

556
00:21:30,159 --> 00:21:31,200
say like

557
00:21:31,200 --> 00:21:33,840
ask people why do you think one month is

558
00:21:33,840 --> 00:21:36,000
enough or two weeks is enough like

559
00:21:36,000 --> 00:21:38,400
because they will just wait and see what

560
00:21:38,400 --> 00:21:40,320
happens but they're not

561
00:21:40,320 --> 00:21:42,159
they don't know what they're looking for

562
00:21:42,159 --> 00:21:43,280
instead

563
00:21:43,280 --> 00:21:45,440
you should have metrics will tell you

564
00:21:45,440 --> 00:21:47,919
like is this kernel behaves the same as

565
00:21:47,919 --> 00:21:49,919
the previous one and it's acceptable to

566
00:21:49,919 --> 00:21:51,200
you right

567
00:21:51,200 --> 00:21:54,240
we also don't know our workload

568
00:21:54,240 --> 00:21:55,679
so

569
00:21:55,679 --> 00:21:59,039
often time and not sres but other

570
00:21:59,039 --> 00:22:00,720
engineering teams from cloudflare come

571
00:22:00,720 --> 00:22:02,159
to me and ask

572
00:22:02,159 --> 00:22:04,000
like will the new kernel great break my

573
00:22:04,000 --> 00:22:07,200
software i said i don't know

574
00:22:07,200 --> 00:22:10,080
what does your software need and and

575
00:22:10,080 --> 00:22:12,799
and like when you follow the 5y rule

576
00:22:12,799 --> 00:22:14,799
questions you start understanding that

577
00:22:14,799 --> 00:22:17,360
like okay some teams

578
00:22:17,360 --> 00:22:19,760
they they write like a key value store

579
00:22:19,760 --> 00:22:21,919
and like their performance is heavily

580
00:22:21,919 --> 00:22:24,000
dependent on the kernel page cache so

581
00:22:24,000 --> 00:22:26,240
like kernel page cache performance is

582
00:22:26,240 --> 00:22:27,840
very important to them

583
00:22:27,840 --> 00:22:31,760
other teams are writing like um

584
00:22:32,080 --> 00:22:34,480
like we have cloud for workers which is

585
00:22:34,480 --> 00:22:37,440
a third-party code execution system so

586
00:22:37,440 --> 00:22:39,760
like scheduling and cpu performance is

587
00:22:39,760 --> 00:22:43,440
important so every workload underneath

588
00:22:43,440 --> 00:22:45,760
have this like one or two

589
00:22:45,760 --> 00:22:47,600
kernel features

590
00:22:47,600 --> 00:22:50,480
they require like the other team we have

591
00:22:50,480 --> 00:22:53,039
like they heavily rely on linux network

592
00:22:53,039 --> 00:22:55,679
namespaces so linux network namespaces

593
00:22:55,679 --> 00:22:56,720
is the

594
00:22:56,720 --> 00:22:58,640
needed feature of them and for all these

595
00:22:58,640 --> 00:23:01,120
features you can actually write tests

596
00:23:01,120 --> 00:23:02,799
right and you can

597
00:23:02,799 --> 00:23:07,120
exercise them and like compile

598
00:23:07,120 --> 00:23:10,000
a test suite of kernel pre-production

599
00:23:10,000 --> 00:23:12,159
testing which can have unit test

600
00:23:12,159 --> 00:23:14,080
integration test performance test but

601
00:23:14,080 --> 00:23:16,080
the old thing i call it acceptance test

602
00:23:16,080 --> 00:23:18,320
so now i'm telling all the teams which

603
00:23:18,320 --> 00:23:20,559
come to me and say like oh will the

604
00:23:20,559 --> 00:23:23,760
kernel break break the bill or or

605
00:23:23,760 --> 00:23:25,360
the most

606
00:23:25,360 --> 00:23:27,360
hilarious i heard like oh can we have a

607
00:23:27,360 --> 00:23:29,440
say if we you're allowed to release a

608
00:23:29,440 --> 00:23:31,600
new kernel or not and like i we have

609
00:23:31,600 --> 00:23:32,799
like

610
00:23:32,799 --> 00:23:34,400
thousands of engineering teams in

611
00:23:34,400 --> 00:23:36,480
cloudflare and if i allow

612
00:23:36,480 --> 00:23:38,240
to every one of them to have a video i

613
00:23:38,240 --> 00:23:39,600
will never upgrade the kernel because

614
00:23:39,600 --> 00:23:42,559
some of them will say no but i said

615
00:23:42,559 --> 00:23:45,279
you can have a veto if you write a test

616
00:23:45,279 --> 00:23:47,200
for us in our test framework which we

617
00:23:47,200 --> 00:23:49,279
provide and it will fail if your test

618
00:23:49,279 --> 00:23:51,120
fails will not release the kernel until

619
00:23:51,120 --> 00:23:53,600
with the bucket right

620
00:23:53,600 --> 00:23:55,200
but to write tests they have to learn

621
00:23:55,200 --> 00:23:56,799
their workload and what do they need

622
00:23:56,799 --> 00:23:59,440
from the kernel

623
00:24:00,799 --> 00:24:03,279
yeah final thing i i saw like in the

624
00:24:03,279 --> 00:24:05,600
early days of cloudflare and which we

625
00:24:05,600 --> 00:24:08,480
successfully removed now is

626
00:24:08,480 --> 00:24:10,640
when you come to people they just

627
00:24:10,640 --> 00:24:12,159
it goes back to the beginning of my

628
00:24:12,159 --> 00:24:14,159
presentation they just perceive kernel

629
00:24:14,159 --> 00:24:16,799
is too scary to risky and they start

630
00:24:16,799 --> 00:24:18,880
like okay well

631
00:24:18,880 --> 00:24:21,679
like colonel is this like mega beast

632
00:24:21,679 --> 00:24:23,279
right so

633
00:24:23,279 --> 00:24:25,840
let's have a different approval process

634
00:24:25,840 --> 00:24:27,840
for release like if regular software

635
00:24:27,840 --> 00:24:29,440
will require one approval for kernel

636
00:24:29,440 --> 00:24:31,039
we'll have like three approvals from

637
00:24:31,039 --> 00:24:33,840
different teams

638
00:24:34,240 --> 00:24:36,400
which is actually nonsense so what if i

639
00:24:36,400 --> 00:24:38,960
told you that the kernel deploy

640
00:24:38,960 --> 00:24:42,960
is safer than any other software right

641
00:24:42,960 --> 00:24:44,480
and again

642
00:24:44,480 --> 00:24:47,440
i give it a cloud for example so this is

643
00:24:47,440 --> 00:24:49,440
like cloud for network today all these

644
00:24:49,440 --> 00:24:52,320
blue dots in the world

645
00:24:52,320 --> 00:24:54,880
are data centers and each data center

646
00:24:54,880 --> 00:24:56,799
can have like many many many servers

647
00:24:56,799 --> 00:24:58,000
right

648
00:24:58,000 --> 00:25:01,120
so how does a regular software update

649
00:25:01,120 --> 00:25:03,600
looks for us so we have of course it's

650
00:25:03,600 --> 00:25:04,960
automated we have configuration

651
00:25:04,960 --> 00:25:07,520
management system doing all of that but

652
00:25:07,520 --> 00:25:09,120
when a new team

653
00:25:09,120 --> 00:25:11,760
a team like team who manages our web

654
00:25:11,760 --> 00:25:14,640
server nginx for example releases a new

655
00:25:14,640 --> 00:25:16,559
the new version the way how it works is

656
00:25:16,559 --> 00:25:18,400
the configuration management sees there

657
00:25:18,400 --> 00:25:22,000
is a new version available it upgrades

658
00:25:22,000 --> 00:25:25,200
the software package on each server

659
00:25:25,200 --> 00:25:27,440
and then does a server restart service

660
00:25:27,440 --> 00:25:29,120
restart so

661
00:25:29,120 --> 00:25:31,440
depending on if the service is critical

662
00:25:31,440 --> 00:25:32,559
or not

663
00:25:32,559 --> 00:25:34,159
you can be a graceful restart or

664
00:25:34,159 --> 00:25:35,919
non-graceful restaurant doesn't matter

665
00:25:35,919 --> 00:25:37,600
it's but it's still a service of start

666
00:25:37,600 --> 00:25:40,960
so the new code takes over

667
00:25:40,960 --> 00:25:44,000
so the gist of it process is if you

668
00:25:44,000 --> 00:25:47,120
don't put explicit safeguards

669
00:25:47,120 --> 00:25:48,880
to deploy

670
00:25:48,880 --> 00:25:52,000
new code like in a stage and slow down

671
00:25:52,000 --> 00:25:54,080
manner

672
00:25:54,080 --> 00:25:57,840
a typical nginx release if it's bad it

673
00:25:57,840 --> 00:26:00,720
can break the whole network

674
00:26:00,720 --> 00:26:02,559
and unfortunately cloudflare learned it

675
00:26:02,559 --> 00:26:05,520
the hard way so we had a couple of

676
00:26:05,520 --> 00:26:07,600
like global outages

677
00:26:07,600 --> 00:26:11,039
because a bad software deploy

678
00:26:11,039 --> 00:26:13,039
got spread across the network too

679
00:26:13,039 --> 00:26:14,799
quickly and almost took down the whole

680
00:26:14,799 --> 00:26:17,279
network

681
00:26:17,679 --> 00:26:20,640
linux kernel for the biggest

682
00:26:20,640 --> 00:26:23,279
blessing and occurs of the linux kernel

683
00:26:23,279 --> 00:26:26,159
upgrade it requires a system reboot

684
00:26:26,159 --> 00:26:28,400
unless you do like live patching but

685
00:26:28,400 --> 00:26:31,520
then you're crazy and

686
00:26:32,799 --> 00:26:33,679
yeah

687
00:26:33,679 --> 00:26:34,720
so yeah

688
00:26:34,720 --> 00:26:37,360
kernel upgrade requires a reboot right

689
00:26:37,360 --> 00:26:40,080
and reboot again for us it's all

690
00:26:40,080 --> 00:26:42,720
automated but it requires more steps it

691
00:26:42,720 --> 00:26:44,799
you need to drain the traffic from the

692
00:26:44,799 --> 00:26:45,919
server

693
00:26:45,919 --> 00:26:48,000
and we need to put it out of production

694
00:26:48,000 --> 00:26:49,760
means styling things and monitoring and

695
00:26:49,760 --> 00:26:51,600
alerts because the server will be down

696
00:26:51,600 --> 00:26:54,320
for some time then to do actual reboots

697
00:26:54,320 --> 00:26:56,400
reboots are not fast especially on the

698
00:26:56,400 --> 00:26:57,679
servers

699
00:26:57,679 --> 00:26:59,840
then when it's actually booted our

700
00:26:59,840 --> 00:27:02,799
configuration manager manager steps in

701
00:27:02,799 --> 00:27:05,360
and reconfigures the server and

702
00:27:05,360 --> 00:27:07,440
sometimes it takes like

703
00:27:07,440 --> 00:27:09,200
tens of minutes

704
00:27:09,200 --> 00:27:10,240
and

705
00:27:10,240 --> 00:27:12,000
then when the server is configured we

706
00:27:12,000 --> 00:27:14,400
run the acceptance test and then we put

707
00:27:14,400 --> 00:27:17,600
it back into production

708
00:27:17,600 --> 00:27:19,200
and because

709
00:27:19,200 --> 00:27:22,399
nobody is crazy and like we're not crazy

710
00:27:22,399 --> 00:27:23,840
uh so

711
00:27:23,840 --> 00:27:24,880
you don't

712
00:27:24,880 --> 00:27:27,039
really reboot all the servers at once

713
00:27:27,039 --> 00:27:28,799
right like if you have a kernel upgrade

714
00:27:28,799 --> 00:27:30,960
i cannot see a process which says like

715
00:27:30,960 --> 00:27:31,760
let's

716
00:27:31,760 --> 00:27:33,120
pull down the whole network and do a

717
00:27:33,120 --> 00:27:35,600
reboot so you will naturally have this

718
00:27:35,600 --> 00:27:37,679
process gradually reboot servers one by

719
00:27:37,679 --> 00:27:40,000
one or like in our case we do it in

720
00:27:40,000 --> 00:27:43,679
batches to speed it up a little bit but

721
00:27:43,679 --> 00:27:46,000
it's the thing is like the kernel deploy

722
00:27:46,000 --> 00:27:48,559
is inherently slow paced and gradual

723
00:27:48,559 --> 00:27:51,520
roll out so you have these safeguards

724
00:27:51,520 --> 00:27:53,440
out of the box if

725
00:27:53,440 --> 00:27:54,799
if you're

726
00:27:54,799 --> 00:27:57,360
managing your production insanely right

727
00:27:57,360 --> 00:27:58,480
so

728
00:27:58,480 --> 00:28:00,000
it gives you

729
00:28:00,000 --> 00:28:03,279
plenty of time so like we did deploy bad

730
00:28:03,279 --> 00:28:05,600
kernel upgrades but we have noticed

731
00:28:05,600 --> 00:28:07,520
after like two or three servers rebooted

732
00:28:07,520 --> 00:28:10,159
and it had almost no visible impact on

733
00:28:10,159 --> 00:28:12,799
our network

734
00:28:14,159 --> 00:28:16,320
did i convince you that linux kernel

735
00:28:16,320 --> 00:28:19,360
upgrades are safer

736
00:28:19,919 --> 00:28:21,760
okay

737
00:28:21,760 --> 00:28:23,039
so now let's

738
00:28:23,039 --> 00:28:24,559
a little bit like we talked about the

739
00:28:24,559 --> 00:28:26,640
risks of not applying kernel upgrades we

740
00:28:26,640 --> 00:28:29,200
talked about

741
00:28:29,760 --> 00:28:31,919
what problems you might have

742
00:28:31,919 --> 00:28:33,520
let's talk about the linux kernel

743
00:28:33,520 --> 00:28:35,440
releases one of the other problems i've

744
00:28:35,440 --> 00:28:37,600
encountered that

745
00:28:37,600 --> 00:28:39,440
people just perceive

746
00:28:39,440 --> 00:28:41,840
every kernel releases the same is a big

747
00:28:41,840 --> 00:28:43,840
scary thing but if you learn the kernel

748
00:28:43,840 --> 00:28:46,080
release process you will see that not

749
00:28:46,080 --> 00:28:48,080
all releases are created equal so some

750
00:28:48,080 --> 00:28:50,320
releases are safer to apply and some

751
00:28:50,320 --> 00:28:54,559
releases are require more testing

752
00:28:54,559 --> 00:28:55,520
so

753
00:28:55,520 --> 00:28:57,919
kernel version numbers look like this so

754
00:28:57,919 --> 00:29:00,320
you have like a number dot another

755
00:29:00,320 --> 00:29:02,640
number dot and another dot

756
00:29:02,640 --> 00:29:06,760
for example like 5.15.32

757
00:29:06,960 --> 00:29:08,480
right and it kind of looks like a

758
00:29:08,480 --> 00:29:10,840
semantic versioning system

759
00:29:10,840 --> 00:29:13,279
right the

760
00:29:13,279 --> 00:29:15,039
this is the biggest mistake everyone

761
00:29:15,039 --> 00:29:17,200
makes this is not a semantic versioning

762
00:29:17,200 --> 00:29:19,279
system in the kernel so one thing you

763
00:29:19,279 --> 00:29:21,279
have to remember kernel does not follow

764
00:29:21,279 --> 00:29:23,520
a semantic versioning system

765
00:29:23,520 --> 00:29:26,960
instead it just has two components uh

766
00:29:26,960 --> 00:29:29,760
the first two numbers they usually call

767
00:29:29,760 --> 00:29:33,520
it a major or stable kernel release

768
00:29:33,520 --> 00:29:35,200
and the final

769
00:29:35,200 --> 00:29:37,679
and not major minor like two numbers

770
00:29:37,679 --> 00:29:39,760
designate one thing it's a major kernel

771
00:29:39,760 --> 00:29:41,520
release right

772
00:29:41,520 --> 00:29:44,399
and the second number is our

773
00:29:44,399 --> 00:29:47,120
bug fix releases there is no established

774
00:29:47,120 --> 00:29:49,120
terminology whether i should call it

775
00:29:49,120 --> 00:29:51,600
patch releases but i call them bug fix

776
00:29:51,600 --> 00:29:52,880
releases so

777
00:29:52,880 --> 00:29:55,520
these contain only bugs and security

778
00:29:55,520 --> 00:29:57,039
fixes

779
00:29:57,039 --> 00:29:59,760
another important thing to understand is

780
00:29:59,760 --> 00:30:02,080
these

781
00:30:02,320 --> 00:30:04,640
bug fixes will never contain new

782
00:30:04,640 --> 00:30:06,880
features or subsystem rewrites so

783
00:30:06,880 --> 00:30:08,799
they're usually quite quite safe to

784
00:30:08,799 --> 00:30:10,880
apply they only fix bugs and security

785
00:30:10,880 --> 00:30:13,679
vulnerabilities

786
00:30:14,960 --> 00:30:17,120
so how does kernel

787
00:30:17,120 --> 00:30:20,000
release flow works in general so

788
00:30:20,000 --> 00:30:22,720
the main line the main bleeding edge

789
00:30:22,720 --> 00:30:25,120
kernel code is maintained by still

790
00:30:25,120 --> 00:30:27,360
maintained by linus

791
00:30:27,360 --> 00:30:28,320
it's

792
00:30:28,320 --> 00:30:30,720
let's call it the main branch

793
00:30:30,720 --> 00:30:32,880
so the features are actually developed

794
00:30:32,880 --> 00:30:35,360
in in

795
00:30:35,600 --> 00:30:36,880
various

796
00:30:36,880 --> 00:30:39,360
other branches uh

797
00:30:39,360 --> 00:30:40,960
from subsystem

798
00:30:40,960 --> 00:30:42,960
managed by subsystem maintainers so for

799
00:30:42,960 --> 00:30:44,880
example there is a drivers

800
00:30:44,880 --> 00:30:47,520
uh subsystem there's a memory management

801
00:30:47,520 --> 00:30:49,679
system there is networking and these are

802
00:30:49,679 --> 00:30:51,440
like other branches and features are

803
00:30:51,440 --> 00:30:54,000
being developed there and then the linus

804
00:30:54,000 --> 00:30:56,000
like pulls from these branches these

805
00:30:56,000 --> 00:30:58,399
features like once in a while

806
00:30:58,399 --> 00:30:59,760
okay

807
00:30:59,760 --> 00:31:01,840
and at some point

808
00:31:01,840 --> 00:31:03,200
when

809
00:31:03,200 --> 00:31:06,559
linus considers that his branches is a

810
00:31:06,559 --> 00:31:09,679
stable he cuts a stable release and the

811
00:31:09,679 --> 00:31:12,559
way how they do it it branches out from

812
00:31:12,559 --> 00:31:14,399
the main branch so they create a

813
00:31:14,399 --> 00:31:16,399
dedicated branch they call it a stable

814
00:31:16,399 --> 00:31:17,360
branch

815
00:31:17,360 --> 00:31:18,880
for

816
00:31:18,880 --> 00:31:22,240
major linux kernels so we have like 5 10

817
00:31:22,240 --> 00:31:24,240
5 11 5 12

818
00:31:24,240 --> 00:31:26,640
and this usually happens every nine and

819
00:31:26,640 --> 00:31:29,279
ten weeks

820
00:31:29,600 --> 00:31:31,840
and when the state then this table

821
00:31:31,840 --> 00:31:34,559
branches lives and at some point

822
00:31:34,559 --> 00:31:36,159
uh

823
00:31:36,159 --> 00:31:38,559
a tag is created on this table branch

824
00:31:38,559 --> 00:31:42,080
which designates a bug fix release

825
00:31:42,080 --> 00:31:45,279
so 5.11.1 is a bug fix release on the

826
00:31:45,279 --> 00:31:48,480
5.11 stable branch right but how are

827
00:31:48,480 --> 00:31:50,880
actually bugs getting getting there

828
00:31:50,880 --> 00:31:51,760
right

829
00:31:51,760 --> 00:31:54,240
they don't immediately get into the

830
00:31:54,240 --> 00:31:56,640
stable branch so the process is if you

831
00:31:56,640 --> 00:31:59,679
find a bug in subsum system

832
00:31:59,679 --> 00:32:01,600
you actually usually

833
00:32:01,600 --> 00:32:05,279
fix it on the subsystem maintainers tree

834
00:32:05,279 --> 00:32:07,440
then eventually that buck but you mark

835
00:32:07,440 --> 00:32:09,600
it as a bug fix right

836
00:32:09,600 --> 00:32:12,080
and then eventually this bug fix gets

837
00:32:12,080 --> 00:32:13,760
pulled in by the

838
00:32:13,760 --> 00:32:16,960
bylanos into the main branch

839
00:32:16,960 --> 00:32:19,120
and

840
00:32:19,120 --> 00:32:21,039
stable branches

841
00:32:21,039 --> 00:32:23,200
cherry-pick these commits onto

842
00:32:23,200 --> 00:32:25,360
themselves and when

843
00:32:25,360 --> 00:32:27,919
so this is where new features are never

844
00:32:27,919 --> 00:32:29,919
introduced into the stable branches so

845
00:32:29,919 --> 00:32:31,760
stable branches do not

846
00:32:31,760 --> 00:32:33,760
completely merge the main line linus

847
00:32:33,760 --> 00:32:35,679
brands they only cherry pick bugs and

848
00:32:35,679 --> 00:32:37,840
security vulnerabilities and eventually

849
00:32:37,840 --> 00:32:40,159
when enough bugs have been cherry picked

850
00:32:40,159 --> 00:32:41,120
a new

851
00:32:41,120 --> 00:32:43,360
bug fix release is being cut and it

852
00:32:43,360 --> 00:32:46,799
usually happens like every week

853
00:32:46,799 --> 00:32:49,760
with another tag

854
00:32:50,960 --> 00:32:54,000
all right so a new mergy major or stable

855
00:32:54,000 --> 00:32:56,320
kernel version is released every nine to

856
00:32:56,320 --> 00:32:57,919
ten weeks and like even there the

857
00:32:57,919 --> 00:32:59,760
process is quite rigid so they only

858
00:32:59,760 --> 00:33:02,159
allow like two weeks for feature

859
00:33:02,159 --> 00:33:04,159
development and seven weeks for bug

860
00:33:04,159 --> 00:33:07,600
fixing and stabilizing the kernel

861
00:33:07,600 --> 00:33:10,960
they call it a merge window

862
00:33:10,960 --> 00:33:12,640
the another thing is because it's not a

863
00:33:12,640 --> 00:33:14,480
semantic versioning

864
00:33:14,480 --> 00:33:17,840
the leftmost version means nothing

865
00:33:17,840 --> 00:33:19,399
so

866
00:33:19,399 --> 00:33:23,039
4.19 upgrade to 4.20 may have

867
00:33:23,039 --> 00:33:25,440
more breaking features

868
00:33:25,440 --> 00:33:27,440
like breaking changes or features than

869
00:33:27,440 --> 00:33:30,720
an upgrade to 4.20 to 0.0 this is an

870
00:33:30,720 --> 00:33:33,760
error like many sre and production teams

871
00:33:33,760 --> 00:33:35,919
make because they say oh we used to

872
00:33:35,919 --> 00:33:38,799
upgrade from 4.19 to 4.20 but now we're

873
00:33:38,799 --> 00:33:41,279
going to 5.0 this is probably a super

874
00:33:41,279 --> 00:33:43,600
major version like we needed to exercise

875
00:33:43,600 --> 00:33:46,480
no it's the same right

876
00:33:46,480 --> 00:33:47,279
uh

877
00:33:47,279 --> 00:33:50,240
it's just like this leftmost number inc

878
00:33:50,240 --> 00:33:53,120
is incremented

879
00:33:53,120 --> 00:33:56,399
when linus decides to

880
00:33:56,559 --> 00:33:58,240
and

881
00:33:58,240 --> 00:34:00,720
yeah and bug fix and patch releases are

882
00:34:00,720 --> 00:34:02,880
released around once a week

883
00:34:02,880 --> 00:34:05,360
it's the right most version number they

884
00:34:05,360 --> 00:34:07,760
just cherry pick bugs and

885
00:34:07,760 --> 00:34:09,440
while their propagates with the whole

886
00:34:09,440 --> 00:34:11,359
tree they get some initial testing from

887
00:34:11,359 --> 00:34:13,359
the linux kernel community so they're

888
00:34:13,359 --> 00:34:15,679
pretty much in good shape and therefore

889
00:34:15,679 --> 00:34:17,918
you don't have new features and

890
00:34:17,918 --> 00:34:21,359
regressions are quite rare

891
00:34:21,359 --> 00:34:23,440
yeah when all it may contain critical

892
00:34:23,440 --> 00:34:26,000
security patches and you almost want to

893
00:34:26,000 --> 00:34:27,760
apply them because of the sheer commits

894
00:34:27,760 --> 00:34:29,839
and security

895
00:34:29,839 --> 00:34:31,760
patches going to bugfix releases there

896
00:34:31,760 --> 00:34:33,359
is most likely something which is

897
00:34:33,359 --> 00:34:36,399
affecting your system

898
00:34:36,719 --> 00:34:38,800
yeah let's talk about a little bit major

899
00:34:38,800 --> 00:34:41,679
version unstable releases so a stable

900
00:34:41,679 --> 00:34:44,239
release once it's branched out it's

901
00:34:44,239 --> 00:34:45,679
being

902
00:34:45,679 --> 00:34:48,639
supported around two or three months so

903
00:34:48,639 --> 00:34:50,480
supported means these bug fixes and

904
00:34:50,480 --> 00:34:52,320
security patches are being backported

905
00:34:52,320 --> 00:34:55,839
and cherry picked into this branch

906
00:34:56,239 --> 00:34:57,920
but

907
00:34:57,920 --> 00:34:59,040
after two or three months it's

908
00:34:59,040 --> 00:35:01,440
considered end of life so at this point

909
00:35:01,440 --> 00:35:03,839
you will likely might need to evaluate a

910
00:35:03,839 --> 00:35:06,480
new major version with new features

911
00:35:06,480 --> 00:35:09,520
if it's too costly and like for example

912
00:35:09,520 --> 00:35:11,280
in cloudflare we still

913
00:35:11,280 --> 00:35:13,040
want some stability and don't want to

914
00:35:13,040 --> 00:35:15,760
evaluate new major kernel rays every two

915
00:35:15,760 --> 00:35:17,040
to three months

916
00:35:17,040 --> 00:35:19,040
there are long-term stable releases

917
00:35:19,040 --> 00:35:21,680
which is usually the latest stable

918
00:35:21,680 --> 00:35:23,200
release of the year

919
00:35:23,200 --> 00:35:24,160
and

920
00:35:24,160 --> 00:35:26,560
there the linux kernel community

921
00:35:26,560 --> 00:35:27,839
backports

922
00:35:27,839 --> 00:35:29,760
bug fixes and security vulnerabilities

923
00:35:29,760 --> 00:35:32,079
for at least two years so

924
00:35:32,079 --> 00:35:33,680
it provides you more

925
00:35:33,680 --> 00:35:36,000
room not to evaluate

926
00:35:36,000 --> 00:35:38,160
major kernel releases too often but

927
00:35:38,160 --> 00:35:39,119
still

928
00:35:39,119 --> 00:35:41,280
be on top of every bug fix and security

929
00:35:41,280 --> 00:35:45,079
patch out there

930
00:35:45,280 --> 00:35:47,200
yeah and and this i encourage you to

931
00:35:47,200 --> 00:35:48,240
read this

932
00:35:48,240 --> 00:35:50,480
usually overlooked page

933
00:35:50,480 --> 00:35:52,640
about the linux kernel releases on the

934
00:35:52,640 --> 00:35:54,880
official kernel.org site and it has an

935
00:35:54,880 --> 00:35:57,680
explicit paragraph saying that

936
00:35:57,680 --> 00:35:58,880
the

937
00:35:58,880 --> 00:36:00,800
major left most major number means

938
00:36:00,800 --> 00:36:04,240
nothing and don't don't bother

939
00:36:04,240 --> 00:36:06,000
don't bother like worrying about it too

940
00:36:06,000 --> 00:36:08,240
much

941
00:36:08,880 --> 00:36:12,480
okay so based on only learn today we can

942
00:36:12,480 --> 00:36:14,720
get some safe and easy production kernel

943
00:36:14,720 --> 00:36:17,200
upgrade tips right

944
00:36:17,200 --> 00:36:19,599
so the first thing is

945
00:36:19,599 --> 00:36:21,440
what we can take out from this

946
00:36:21,440 --> 00:36:24,480
presentation is don't create a dedicated

947
00:36:24,480 --> 00:36:26,560
deploy process for the linux kernel

948
00:36:26,560 --> 00:36:28,480
right

949
00:36:28,480 --> 00:36:30,640
because as we just learned kernel

950
00:36:30,640 --> 00:36:33,920
upgrades are usually less risky than

951
00:36:33,920 --> 00:36:35,920
any other software on the contrary which

952
00:36:35,920 --> 00:36:38,720
everyone thinks

953
00:36:39,119 --> 00:36:40,800
and simple stage rollout is usually

954
00:36:40,800 --> 00:36:44,160
enough and kernel upgrades are naturally

955
00:36:44,160 --> 00:36:46,560
slow paced and because they require a

956
00:36:46,560 --> 00:36:49,520
reboot and you will have plenty of time

957
00:36:49,520 --> 00:36:52,000
noticing a bad deploy and pulling the

958
00:36:52,000 --> 00:36:55,839
plug on on the deploy process

959
00:36:56,480 --> 00:36:59,200
secondly you have to work with your

960
00:36:59,200 --> 00:37:00,720
organization

961
00:37:00,720 --> 00:37:04,320
with your sre teams to avoid justifying

962
00:37:04,320 --> 00:37:07,680
backfill kernel upgrades

963
00:37:07,680 --> 00:37:09,760
so bug fix releases

964
00:37:09,760 --> 00:37:11,599
should be deployed with no questions

965
00:37:11,599 --> 00:37:12,640
asked

966
00:37:12,640 --> 00:37:16,320
and because of the volume

967
00:37:16,320 --> 00:37:18,480
of the commits there and

968
00:37:18,480 --> 00:37:20,640
fixes and security patches there's most

969
00:37:20,640 --> 00:37:22,160
likely there is something which is

970
00:37:22,160 --> 00:37:24,800
affecting your workflow so it doesn't

971
00:37:24,800 --> 00:37:27,359
make sense to actually analyze if it's

972
00:37:27,359 --> 00:37:30,160
there and if it's worth applying

973
00:37:30,160 --> 00:37:32,560
because bug fixables do not contain new

974
00:37:32,560 --> 00:37:35,599
features regressions are quite

975
00:37:35,599 --> 00:37:38,560
uncommon and because of the compliance

976
00:37:38,560 --> 00:37:40,800
risks of security features you should

977
00:37:40,800 --> 00:37:42,960
work out build out the process which

978
00:37:42,960 --> 00:37:45,280
will minimize the required soak times

979
00:37:45,280 --> 00:37:47,599
instead try to move to a metric driven

980
00:37:47,599 --> 00:37:49,520
approach instead of validating a new

981
00:37:49,520 --> 00:37:51,839
kernel

982
00:37:55,839 --> 00:37:56,960
if

983
00:37:56,960 --> 00:37:59,920
again if validating a new major kernel

984
00:37:59,920 --> 00:38:01,680
release is too much trouble for you

985
00:38:01,680 --> 00:38:03,359
consider staying on the long long-term

986
00:38:03,359 --> 00:38:05,839
branch

987
00:38:06,320 --> 00:38:08,960
this is what actually cloudflare does

988
00:38:08,960 --> 00:38:10,480
so it gives you at least two years of

989
00:38:10,480 --> 00:38:14,079
bug fixes security patches but we don't

990
00:38:14,079 --> 00:38:16,800
stay there for two years actually after

991
00:38:16,800 --> 00:38:19,920
a year the next stable long-term release

992
00:38:19,920 --> 00:38:22,000
is already available and we immediately

993
00:38:22,000 --> 00:38:24,560
start evaluating so we still have one

994
00:38:24,560 --> 00:38:26,079
year

995
00:38:26,079 --> 00:38:28,000
if like we usually transition much

996
00:38:28,000 --> 00:38:30,079
faster than that but we in the end we

997
00:38:30,079 --> 00:38:33,440
still have ma one year of uh time to

998
00:38:33,440 --> 00:38:35,359
smoothly transition from the old corner

999
00:38:35,359 --> 00:38:37,359
to the new kernel still getting bug

1000
00:38:37,359 --> 00:38:39,440
fixes and

1001
00:38:39,440 --> 00:38:40,800
and performance

1002
00:38:40,800 --> 00:38:43,200
and security patches but we also get the

1003
00:38:43,200 --> 00:38:45,119
newer features earlier

1004
00:38:45,119 --> 00:38:47,760
then we would wait for another year and

1005
00:38:47,760 --> 00:38:50,720
again we accumulate less change delta

1006
00:38:50,720 --> 00:38:53,359
following this process and as we

1007
00:38:53,359 --> 00:38:56,079
learned before change delta is bad for

1008
00:38:56,079 --> 00:38:58,640
your risk

1009
00:38:59,680 --> 00:39:00,800
yeah and

1010
00:39:00,800 --> 00:39:02,640
implement and improve

1011
00:39:02,640 --> 00:39:05,040
if you didn't already implement if you

1012
00:39:05,040 --> 00:39:07,200
did improve your pre-production kernel

1013
00:39:07,200 --> 00:39:11,200
testing for major version validation

1014
00:39:11,200 --> 00:39:12,800
and this will help you understand your

1015
00:39:12,800 --> 00:39:15,200
workload actually

1016
00:39:15,200 --> 00:39:17,200
you can write tests which exercise

1017
00:39:17,200 --> 00:39:19,440
various kernel subsystems required by

1018
00:39:19,440 --> 00:39:21,200
your workload

1019
00:39:21,200 --> 00:39:24,400
and not only these tests will put you in

1020
00:39:24,400 --> 00:39:27,119
a better place if thing goes wrong if

1021
00:39:27,119 --> 00:39:29,040
something doesn't work it will they will

1022
00:39:29,040 --> 00:39:31,200
help you to actually communicate with

1023
00:39:31,200 --> 00:39:32,720
kernel community

1024
00:39:32,720 --> 00:39:35,040
like linux kernel is huge and nobody

1025
00:39:35,040 --> 00:39:36,800
understands everything

1026
00:39:36,800 --> 00:39:38,960
but if your encounter problem like on

1027
00:39:38,960 --> 00:39:40,720
the contra there are some opinions out

1028
00:39:40,720 --> 00:39:44,400
there that kernel developers are

1029
00:39:44,400 --> 00:39:45,920
really kernel upstream community is

1030
00:39:45,920 --> 00:39:47,920
really not friendly and

1031
00:39:47,920 --> 00:39:50,160
they they they say bad things on the

1032
00:39:50,160 --> 00:39:52,480
main links but only because if you come

1033
00:39:52,480 --> 00:39:54,400
to them with a problem but they cannot

1034
00:39:54,400 --> 00:39:57,520
reproduce in once you have a test which

1035
00:39:57,520 --> 00:39:59,280
is easily reproducible and you can

1036
00:39:59,280 --> 00:40:01,520
deliver that test to the upstream

1037
00:40:01,520 --> 00:40:04,000
community describing your problem see

1038
00:40:04,000 --> 00:40:06,000
how it fails

1039
00:40:06,000 --> 00:40:08,400
you will get help like i've

1040
00:40:08,400 --> 00:40:10,400
i've did it many many times

1041
00:40:10,400 --> 00:40:13,040
if i have a reproducer if i have a test

1042
00:40:13,040 --> 00:40:14,960
like i immediately get help

1043
00:40:14,960 --> 00:40:17,119
in any subsystem even if i'm not an

1044
00:40:17,119 --> 00:40:19,680
expert there

1045
00:40:19,680 --> 00:40:22,480
yeah and you should make metrics or

1046
00:40:22,480 --> 00:40:24,720
data-driven decision not time-based

1047
00:40:24,720 --> 00:40:26,400
decisions so

1048
00:40:26,400 --> 00:40:28,240
try to build your process in a way to

1049
00:40:28,240 --> 00:40:30,000
decide if the kernel's group based on

1050
00:40:30,000 --> 00:40:32,400
data and metrics and tests versus just

1051
00:40:32,400 --> 00:40:34,800
let's run it for one month in somewhere

1052
00:40:34,800 --> 00:40:37,680
and see what happens

1053
00:40:37,680 --> 00:40:39,440
and finally like

1054
00:40:39,440 --> 00:40:42,160
on continuing metrics metrics monitoring

1055
00:40:42,160 --> 00:40:43,920
and deploy automation can help with

1056
00:40:43,920 --> 00:40:47,200
human risk perception right so

1057
00:40:47,200 --> 00:40:49,040
apart from having this data-driven

1058
00:40:49,040 --> 00:40:50,960
approach to decide if a kernel is good

1059
00:40:50,960 --> 00:40:53,359
and kernel upgrade is good enough or not

1060
00:40:53,359 --> 00:40:55,440
it also will provide you quick early

1061
00:40:55,440 --> 00:40:57,599
signals about potential regressions

1062
00:40:57,599 --> 00:41:00,720
although they're quite rare

1063
00:41:01,040 --> 00:41:03,200
the other point i wanted to make about

1064
00:41:03,200 --> 00:41:05,440
automation one other

1065
00:41:05,440 --> 00:41:07,680
like definitely consider kernel deploy

1066
00:41:07,680 --> 00:41:09,839
automation so one of the early problems

1067
00:41:09,839 --> 00:41:13,119
we had in clauser because of this kernel

1068
00:41:13,119 --> 00:41:15,599
risky perception we we discussed in the

1069
00:41:15,599 --> 00:41:17,760
beginning of this presentation

1070
00:41:17,760 --> 00:41:18,640
uh

1071
00:41:18,640 --> 00:41:21,119
if you come to a

1072
00:41:21,119 --> 00:41:23,359
an sre various people

1073
00:41:23,359 --> 00:41:25,040
perceive kernel rates with different

1074
00:41:25,040 --> 00:41:27,520
levels of risk right and sometimes

1075
00:41:27,520 --> 00:41:28,960
if uh

1076
00:41:28,960 --> 00:41:32,079
like a more junior employee is tasked to

1077
00:41:32,079 --> 00:41:35,040
a kernel break they they are just afraid

1078
00:41:35,040 --> 00:41:37,359
more afraid the things will go wrong and

1079
00:41:37,359 --> 00:41:39,760
they tried all their best to actually

1080
00:41:39,760 --> 00:41:42,079
avoid it somehow to come up with excuse

1081
00:41:42,079 --> 00:41:44,160
not to do it when you have kernel

1082
00:41:44,160 --> 00:41:46,319
automation the human factor is not a

1083
00:41:46,319 --> 00:41:49,040
problem anymore right so

1084
00:41:49,040 --> 00:41:51,520
you can roll out your kernel upgrades

1085
00:41:51,520 --> 00:41:53,680
and you don't have to deal you don't

1086
00:41:53,680 --> 00:41:56,160
have to put other people in this weird

1087
00:41:56,160 --> 00:41:57,920
position where they are afraid to do

1088
00:41:57,920 --> 00:41:59,760
something wrong because it's done for

1089
00:41:59,760 --> 00:42:01,200
them automatically and there is no

1090
00:42:01,200 --> 00:42:03,680
decision human making decision involved

1091
00:42:03,680 --> 00:42:07,440
in the process all this data driven

1092
00:42:07,920 --> 00:42:09,440
i think that's

1093
00:42:09,440 --> 00:42:12,400
mostly what i wanted to tell you today

1094
00:42:12,400 --> 00:42:14,880
so in this presentation we'll learn that

1095
00:42:14,880 --> 00:42:17,280
linux kernel upgrades are actually not

1096
00:42:17,280 --> 00:42:20,319
more risky than any other software

1097
00:42:20,319 --> 00:42:22,480
you definitely need to patch early and

1098
00:42:22,480 --> 00:42:24,480
patch often especially for the linux

1099
00:42:24,480 --> 00:42:25,839
kernel

1100
00:42:25,839 --> 00:42:29,280
and always apply bug fix kernel releases

1101
00:42:29,280 --> 00:42:31,920
with no question asks and

1102
00:42:31,920 --> 00:42:34,240
when it comes to the linux kernel try to

1103
00:42:34,240 --> 00:42:35,760
understand your workload try to

1104
00:42:35,760 --> 00:42:37,599
understand your workload requirements to

1105
00:42:37,599 --> 00:42:39,920
the linux kernel so you can actually

1106
00:42:39,920 --> 00:42:42,240
design tests metrics and monitoring to

1107
00:42:42,240 --> 00:42:45,440
actually validate these requirements

1108
00:42:45,440 --> 00:42:47,599
and it will help you to stay

1109
00:42:47,599 --> 00:42:50,079
patched and secure

1110
00:42:50,079 --> 00:42:52,480
thank you

1111
00:42:53,440 --> 00:42:55,760
thank you we have two questions from the

1112
00:42:55,760 --> 00:42:58,240
matrix chat

1113
00:42:58,240 --> 00:43:00,960
the first one's from band-aid asking

1114
00:43:00,960 --> 00:43:03,359
fedora core kernel upgrades require two

1115
00:43:03,359 --> 00:43:05,280
reboots whereas

1116
00:43:05,280 --> 00:43:07,839
ubuntu upgrades can be done in place

1117
00:43:07,839 --> 00:43:12,839
followed by a reboot any idea why

1118
00:43:14,160 --> 00:43:16,240
no unfortunately

1119
00:43:16,240 --> 00:43:18,079
so in cloudflare we don't use a

1120
00:43:18,079 --> 00:43:20,079
distribution kernel we build our own

1121
00:43:20,079 --> 00:43:22,480
kernel directly from kernel.org side we

1122
00:43:22,480 --> 00:43:24,839
call it upstream kernel and that

1123
00:43:24,839 --> 00:43:27,440
requires one reboot

1124
00:43:27,440 --> 00:43:30,960
i played with fedora a long time ago and

1125
00:43:30,960 --> 00:43:33,040
at that point it required only one

1126
00:43:33,040 --> 00:43:35,520
reboot so i'm actually not sure why now

1127
00:43:35,520 --> 00:43:37,760
it requires to reboot so sorry cannot

1128
00:43:37,760 --> 00:43:38,839
answer that

1129
00:43:38,839 --> 00:43:43,119
question okay the next one is from arc6

1130
00:43:43,119 --> 00:43:45,280
you mentioned that live kernel upgrades

1131
00:43:45,280 --> 00:43:47,760
are crazy can you explain your thoughts

1132
00:43:47,760 --> 00:43:50,640
on not using k-splice or k-patch

1133
00:43:50,640 --> 00:43:52,839
particularly for high severity

1134
00:43:52,839 --> 00:43:55,520
cvs so

1135
00:43:55,520 --> 00:43:58,560
my opinion on

1136
00:43:59,359 --> 00:44:02,319
on cape like various life patching

1137
00:44:02,319 --> 00:44:03,839
techniques if you understand the

1138
00:44:03,839 --> 00:44:06,560
internals of how kernel works you will

1139
00:44:06,560 --> 00:44:08,560
see that they have a very limited

1140
00:44:08,560 --> 00:44:11,280
applicability so you can only so the way

1141
00:44:11,280 --> 00:44:14,480
how live patching works you have like uh

1142
00:44:14,480 --> 00:44:16,000
like let's say a vulnerable piece of

1143
00:44:16,000 --> 00:44:18,560
code an algorithm right

1144
00:44:18,560 --> 00:44:21,599
and you kind of like put a new one in

1145
00:44:21,599 --> 00:44:24,079
place and like redirect all the

1146
00:44:24,079 --> 00:44:26,400
code execution from the vulnerable part

1147
00:44:26,400 --> 00:44:28,640
to the new part but that only works

1148
00:44:28,640 --> 00:44:31,119
if the data structures themselves do not

1149
00:44:31,119 --> 00:44:34,720
change so linux kernel internal api is

1150
00:44:34,720 --> 00:44:37,119
not stable unlike like windows and other

1151
00:44:37,119 --> 00:44:39,359
operating systems so

1152
00:44:39,359 --> 00:44:42,480
like this the structures can be modified

1153
00:44:42,480 --> 00:44:44,640
at any point of time even in bug fix

1154
00:44:44,640 --> 00:44:47,119
releases and if you have a

1155
00:44:47,119 --> 00:44:49,440
cve which requires you to modify the

1156
00:44:49,440 --> 00:44:51,520
structure you cannot apply live patching

1157
00:44:51,520 --> 00:44:54,400
anymore so basically um and that's why i

1158
00:44:54,400 --> 00:44:56,560
don't like live patching so you have to

1159
00:44:56,560 --> 00:44:59,440
actually know when it works or not but

1160
00:44:59,440 --> 00:45:01,440
like many organizations think oh we have

1161
00:45:01,440 --> 00:45:03,920
light patching so we can we're safe from

1162
00:45:03,920 --> 00:45:05,760
like high critical cities no you you can

1163
00:45:05,760 --> 00:45:08,079
patch with them only like a small subset

1164
00:45:08,079 --> 00:45:10,160
of critical cvs

1165
00:45:10,160 --> 00:45:11,520
this morning

1166
00:45:11,520 --> 00:45:14,720
to stable branches i just checked the

1167
00:45:14,720 --> 00:45:17,280
if you did you hear about the

1168
00:45:17,280 --> 00:45:18,880
red bleed

1169
00:45:18,880 --> 00:45:21,359
vulnerability in intel cpu so like

1170
00:45:21,359 --> 00:45:23,839
patches have just dropped back to a bug

1171
00:45:23,839 --> 00:45:26,160
fixed releases on all stable branches

1172
00:45:26,160 --> 00:45:27,680
supported stable branches in the lungs

1173
00:45:27,680 --> 00:45:29,520
kernel and you cannot life patch it

1174
00:45:29,520 --> 00:45:31,599
because it requires recompiling your

1175
00:45:31,599 --> 00:45:32,880
code

1176
00:45:32,880 --> 00:45:35,920
to actually have the mitigation so in my

1177
00:45:35,920 --> 00:45:38,160
opinion it's better to build a robust

1178
00:45:38,160 --> 00:45:40,319
kernel deployment

1179
00:45:40,319 --> 00:45:42,079
process where you can continuously

1180
00:45:42,079 --> 00:45:44,000
reboot your machines and deploy kernel

1181
00:45:44,000 --> 00:45:47,440
whether actually wastes a lot of effort

1182
00:45:47,440 --> 00:45:49,119
making life patching work for you and

1183
00:45:49,119 --> 00:45:53,119
only covering a small subset of cases

1184
00:45:53,599 --> 00:45:55,599
we have one more in the chat but let's

1185
00:45:55,599 --> 00:45:57,680
turn into the audience here anybody have

1186
00:45:57,680 --> 00:46:00,919
any questions

1187
00:46:02,000 --> 00:46:05,319
yes please

1188
00:46:14,079 --> 00:46:16,480
so the question was because there was a

1189
00:46:16,480 --> 00:46:19,440
knack so the graph shows how many cvs

1190
00:46:19,440 --> 00:46:21,680
are usually patched per release

1191
00:46:21,680 --> 00:46:24,480
but how many cvs are introduced

1192
00:46:24,480 --> 00:46:26,800
this goes back to the

1193
00:46:26,800 --> 00:46:28,560
question of

1194
00:46:28,560 --> 00:46:33,359
the kernel releases themselves right so

1195
00:46:33,440 --> 00:46:36,400
bug fix releases like cvs are usually

1196
00:46:36,400 --> 00:46:38,640
introduced by new code by new features

1197
00:46:38,640 --> 00:46:39,920
uh

1198
00:46:39,920 --> 00:46:42,880
some optimizations or whatnot so bug fix

1199
00:46:42,880 --> 00:46:45,200
kernel releases do not introduce this

1200
00:46:45,200 --> 00:46:48,160
they only patch what is available so

1201
00:46:48,160 --> 00:46:50,640
unless the bug fix itself

1202
00:46:50,640 --> 00:46:53,359
introduces a new vulnerability which

1203
00:46:53,359 --> 00:46:55,440
happens very rarely

1204
00:46:55,440 --> 00:46:57,680
usually there are no new cvs introduced

1205
00:46:57,680 --> 00:46:59,680
only like they're getting fixed and even

1206
00:46:59,680 --> 00:47:00,560
if

1207
00:47:00,560 --> 00:47:01,839
like

1208
00:47:01,839 --> 00:47:04,160
all the things bad things happen right

1209
00:47:04,160 --> 00:47:05,920
so sometimes you get this you get a

1210
00:47:05,920 --> 00:47:08,160
regression you get a new cv introduced

1211
00:47:08,160 --> 00:47:10,880
by a bug fix but the overall trend is

1212
00:47:10,880 --> 00:47:13,280
always up right so you always

1213
00:47:13,280 --> 00:47:15,520
by continuously applying bug fix

1214
00:47:15,520 --> 00:47:17,839
releases you will end up usually end up

1215
00:47:17,839 --> 00:47:22,680
in a better place than you were before

1216
00:47:24,240 --> 00:47:27,279
any more questions

1217
00:47:28,079 --> 00:47:30,640
yes please

1218
00:47:35,920 --> 00:47:38,000
i would recommend rolling your own

1219
00:47:38,000 --> 00:47:39,200
kernel

1220
00:47:39,200 --> 00:47:40,720
sorry the question was when you would

1221
00:47:40,720 --> 00:47:42,640
you recommend rolling your own coin

1222
00:47:42,640 --> 00:47:44,800
versus using distribution kernel i would

1223
00:47:44,800 --> 00:47:46,160
recommend

1224
00:47:46,160 --> 00:47:48,880
rolling your own kernel when you really

1225
00:47:48,880 --> 00:47:51,119
know your workload right

1226
00:47:51,119 --> 00:47:53,040
so

1227
00:47:53,040 --> 00:47:56,160
and like like in cloud 4 for example

1228
00:47:56,160 --> 00:47:58,319
why we run quite like distribution

1229
00:47:58,319 --> 00:48:00,160
kernel are usually older than the

1230
00:48:00,160 --> 00:48:02,720
upstream ones and like nature of our

1231
00:48:02,720 --> 00:48:05,760
products and services we try to utilize

1232
00:48:05,760 --> 00:48:08,079
as many new kernel features as possible

1233
00:48:08,079 --> 00:48:08,880
and

1234
00:48:08,880 --> 00:48:10,079
like like

1235
00:48:10,079 --> 00:48:12,720
like very advanced things in the network

1236
00:48:12,720 --> 00:48:14,640
namespaces where heavy users of

1237
00:48:14,640 --> 00:48:17,280
incremental bpf so like distributions

1238
00:48:17,280 --> 00:48:18,960
currently usually so slow for us and

1239
00:48:18,960 --> 00:48:20,480
sometimes for example you need a

1240
00:48:20,480 --> 00:48:22,800
particular behavior from a particular

1241
00:48:22,800 --> 00:48:25,359
subsystem and therefore running your you

1242
00:48:25,359 --> 00:48:27,520
you can get the improvements faster and

1243
00:48:27,520 --> 00:48:29,280
therefore and sometimes you want to make

1244
00:48:29,280 --> 00:48:31,839
some tweaks right because the kernel

1245
00:48:31,839 --> 00:48:35,040
itself like is a good generic

1246
00:48:35,040 --> 00:48:36,960
piece of software which should be good

1247
00:48:36,960 --> 00:48:40,000
enough for small iit devices as well as

1248
00:48:40,000 --> 00:48:41,760
high performance

1249
00:48:41,760 --> 00:48:44,240
systems and like servers in the cloud

1250
00:48:44,240 --> 00:48:46,160
but sometimes they make tradeoffs and

1251
00:48:46,160 --> 00:48:49,200
like you would get the benefit of like

1252
00:48:49,200 --> 00:48:51,359
removing the trade-off they made for iot

1253
00:48:51,359 --> 00:48:53,920
device to make your like server workload

1254
00:48:53,920 --> 00:48:55,680
perform better

1255
00:48:55,680 --> 00:48:57,440
but that requires you to knowing what

1256
00:48:57,440 --> 00:49:00,640
you need from the kernel

1257
00:49:01,680 --> 00:49:03,839
yes

1258
00:49:10,240 --> 00:49:11,839
the question was is cloud for a linux

1259
00:49:11,839 --> 00:49:13,200
distribution based on another

1260
00:49:13,200 --> 00:49:14,839
distribution so

1261
00:49:14,839 --> 00:49:17,440
our production distribution is based on

1262
00:49:17,440 --> 00:49:19,200
debian

1263
00:49:19,200 --> 00:49:20,880
except for the fact that we don't run

1264
00:49:20,880 --> 00:49:22,640
debian colonel we compile our own

1265
00:49:22,640 --> 00:49:25,200
upstream kernel as well as

1266
00:49:25,200 --> 00:49:27,760
we don't install operating system on

1267
00:49:27,760 --> 00:49:30,000
disk so our systems are stateless so we

1268
00:49:30,000 --> 00:49:31,920
kind of run the whole operating system

1269
00:49:31,920 --> 00:49:34,240
as a live cd from ram

1270
00:49:34,240 --> 00:49:37,200
and this gives us like more flexibility

1271
00:49:37,200 --> 00:49:39,599
and ease of deployment so when we need

1272
00:49:39,599 --> 00:49:40,400
to

1273
00:49:40,400 --> 00:49:41,280
uh

1274
00:49:41,280 --> 00:49:43,040
update the operating system or the

1275
00:49:43,040 --> 00:49:44,720
kernel we don't have to care about the

1276
00:49:44,720 --> 00:49:46,800
state we just like reboot the server and

1277
00:49:46,800 --> 00:49:50,559
like the new operating system is there

1278
00:49:52,400 --> 00:49:55,720
yes please

1279
00:50:01,359 --> 00:50:04,079
i haven't checked it for a while now

1280
00:50:04,079 --> 00:50:06,240
but from the top of my head

1281
00:50:06,240 --> 00:50:09,759
somewhere around 5 gig

1282
00:50:09,920 --> 00:50:10,880
it

1283
00:50:10,880 --> 00:50:15,200
when i say stateless so we also don't

1284
00:50:15,200 --> 00:50:17,200
for example if we

1285
00:50:17,200 --> 00:50:19,440
need to store something which is big we

1286
00:50:19,440 --> 00:50:21,839
bind mount the directories let's say

1287
00:50:21,839 --> 00:50:24,079
like for packages we can store them on

1288
00:50:24,079 --> 00:50:26,480
disk right or some or some configuration

1289
00:50:26,480 --> 00:50:28,720
or data it's like the main code is in

1290
00:50:28,720 --> 00:50:31,520
the root fs

1291
00:50:32,400 --> 00:50:34,720
okay that is all our time thank you so

1292
00:50:34,720 --> 00:50:36,720
much ignot give him another round of

1293
00:50:36,720 --> 00:50:40,200
applause please

1294
00:50:42,720 --> 00:50:44,480
thank you

1295
00:50:44,480 --> 00:50:47,440
the next talk here is

1296
00:50:47,440 --> 00:50:49,760
covet making from cyber pantries to

1297
00:50:49,760 --> 00:50:52,079
cyber glasses stick around if you want

1298
00:50:52,079 --> 00:50:54,079
but otherwise enjoy the rest of your day

1299
00:50:54,079 --> 00:50:55,359
and don't forget

1300
00:50:55,359 --> 00:50:58,240
hackers got talent tonight hope to see

1301
00:50:58,240 --> 00:51:01,720
some of you there

1302
00:51:44,880 --> 00:51:46,960
you

