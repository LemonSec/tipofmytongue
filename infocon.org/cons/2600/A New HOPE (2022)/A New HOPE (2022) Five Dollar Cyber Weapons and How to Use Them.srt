1
00:00:44,300 --> 00:00:53,599
[Music]

2
00:00:56,480 --> 00:00:59,520
hello everyone second to last talk of

3
00:00:59,520 --> 00:01:00,399
the day

4
00:01:00,399 --> 00:01:02,239
super excited thank you all for being

5
00:01:02,239 --> 00:01:03,920
here without you

6
00:01:03,920 --> 00:01:06,400
uh we're so excited to have you here as

7
00:01:06,400 --> 00:01:09,040
being live in this this version of hope

8
00:01:09,040 --> 00:01:11,680
so thank you again for being part of it

9
00:01:11,680 --> 00:01:13,760
a quick note the closing ceremonies

10
00:01:13,760 --> 00:01:15,600
today will be at six o'clock the pres

11
00:01:15,600 --> 00:01:17,119
the closing sermons will actually be in

12
00:01:17,119 --> 00:01:18,479
this room physically but it will be

13
00:01:18,479 --> 00:01:21,040
simulcast into 206 which is downstairs

14
00:01:21,040 --> 00:01:23,520
on the second floor in the back not to

15
00:01:23,520 --> 00:01:24,880
little theater as is listed in the

16
00:01:24,880 --> 00:01:26,720
program so don't wander down little

17
00:01:26,720 --> 00:01:28,880
theater to see the simulcast head up to

18
00:01:28,880 --> 00:01:32,640
to head down to 206 to see the simulcast

19
00:01:32,640 --> 00:01:34,640
feedback is really appreciated from your

20
00:01:34,640 --> 00:01:36,320
experience here at the show

21
00:01:36,320 --> 00:01:40,159
if you can at some point send criticism

22
00:01:40,159 --> 00:01:43,040
comments ideas whatever to feedback at

23
00:01:43,040 --> 00:01:44,560
hope.net

24
00:01:44,560 --> 00:01:46,320
for those of you who are in the dorms

25
00:01:46,320 --> 00:01:47,439
who are staying in the dorms check out

26
00:01:47,439 --> 00:01:49,520
us at 8 p.m tonight if you're actually

27
00:01:49,520 --> 00:01:51,280
in dorm until tomorrow check out us at 2

28
00:01:51,280 --> 00:01:52,159
p.m

29
00:01:52,159 --> 00:01:54,320
and that's last the business with that

30
00:01:54,320 --> 00:01:56,000
we'll move on to our talk five dollar

31
00:01:56,000 --> 00:01:58,000
cyber weapons and how to use them with

32
00:01:58,000 --> 00:01:59,520
corey kinsey

33
00:01:59,520 --> 00:02:03,039
cody kinsey i apologize

34
00:02:04,990 --> 00:02:07,520
[Applause]

35
00:02:07,520 --> 00:02:10,080
hello everyone thank you for coming

36
00:02:10,080 --> 00:02:12,000
uh so my talk is going to be an

37
00:02:12,000 --> 00:02:14,160
introduction on offensive hacking with

38
00:02:14,160 --> 00:02:16,480
microcontrollers and also some defensive

39
00:02:16,480 --> 00:02:17,920
and other interesting projects that they

40
00:02:17,920 --> 00:02:19,680
support so if you're completely new to

41
00:02:19,680 --> 00:02:20,959
microcontrollers hopefully this will be

42
00:02:20,959 --> 00:02:22,400
interesting to you and if you are not

43
00:02:22,400 --> 00:02:23,840
new to microcontrollers hopefully you

44
00:02:23,840 --> 00:02:26,480
will still learn something

45
00:02:26,480 --> 00:02:28,959
all right so my name is cody kinsey i am

46
00:02:28,959 --> 00:02:31,200
a security researcher at veronas

47
00:02:31,200 --> 00:02:34,480
i teach a number of hacking channels on

48
00:02:34,480 --> 00:02:36,720
youtube so i currently produce content

49
00:02:36,720 --> 00:02:38,959
on uh the hack five channel

50
00:02:38,959 --> 00:02:41,120
i also started the nullbyte youtube

51
00:02:41,120 --> 00:02:43,599
channel and the name of that show was

52
00:02:43,599 --> 00:02:46,480
cyberweapons lab so this talk is kind of

53
00:02:46,480 --> 00:02:48,080
a callback to that if any of you happen

54
00:02:48,080 --> 00:02:50,720
to uh see that youtube channel

55
00:02:50,720 --> 00:02:52,720
so i live currently in the treasure

56
00:02:52,720 --> 00:02:55,840
state aka big sky country

57
00:02:55,840 --> 00:02:59,200
no one else here from okay great and uh

58
00:02:59,200 --> 00:03:02,080
also uh yeah i live live stream two

59
00:03:02,080 --> 00:03:03,760
times per week on the hack five and

60
00:03:03,760 --> 00:03:06,560
security forward channels so uh if you

61
00:03:06,560 --> 00:03:08,080
wanna see more stuff like this make sure

62
00:03:08,080 --> 00:03:09,280
to check those out you can ask me

63
00:03:09,280 --> 00:03:11,680
questions every week we host a live q a

64
00:03:11,680 --> 00:03:12,959
and it would be great to hear some

65
00:03:12,959 --> 00:03:14,720
feedback from some of you so i

66
00:03:14,720 --> 00:03:16,800
specialize in wi-fi security oh send and

67
00:03:16,800 --> 00:03:17,920
microcontrollers and i've been

68
00:03:17,920 --> 00:03:22,238
interested in that for a very long time

69
00:03:24,720 --> 00:03:26,879
fair

70
00:03:26,879 --> 00:03:28,640
how's that

71
00:03:28,640 --> 00:03:30,000
all right

72
00:03:30,000 --> 00:03:30,959
so

73
00:03:30,959 --> 00:03:33,360
outside of work uh i really like urban

74
00:03:33,360 --> 00:03:36,239
exploration and particularly street art

75
00:03:36,239 --> 00:03:38,480
so i have spent the last couple years

76
00:03:38,480 --> 00:03:40,239
mapping and documenting art in the la

77
00:03:40,239 --> 00:03:43,120
storm drain uh storm drain system which

78
00:03:43,120 --> 00:03:44,840
is something that i really

79
00:03:44,840 --> 00:03:47,840
enjoy all right so a lot of people have

80
00:03:47,840 --> 00:03:49,200
asked about how i got started with

81
00:03:49,200 --> 00:03:50,239
hacking

82
00:03:50,239 --> 00:03:52,560
and i think it's interesting to tell

83
00:03:52,560 --> 00:03:54,480
stories of how people started in a

84
00:03:54,480 --> 00:03:55,760
completely unrelated career and then

85
00:03:55,760 --> 00:03:57,599
ended up here so i started out

86
00:03:57,599 --> 00:03:59,439
wanting to be a photographer moved to

87
00:03:59,439 --> 00:04:01,599
los angeles became a bouncer at a venue

88
00:04:01,599 --> 00:04:03,599
called the echoplex and this is a real

89
00:04:03,599 --> 00:04:05,519
picture of me protecting grumpy cat from

90
00:04:05,519 --> 00:04:07,200
an unruly fan

91
00:04:07,200 --> 00:04:08,080
um

92
00:04:08,080 --> 00:04:10,080
i then went on to work at a korean

93
00:04:10,080 --> 00:04:11,360
logistics tech startup that was trying

94
00:04:11,360 --> 00:04:12,720
to do uber for trucking learned a lot

95
00:04:12,720 --> 00:04:14,159
about wholesale about logistics and

96
00:04:14,159 --> 00:04:15,519
about technology

97
00:04:15,519 --> 00:04:17,519
i moved on to starting to make tutorials

98
00:04:17,519 --> 00:04:18,959
around hacking

99
00:04:18,959 --> 00:04:21,358
that's when i started nullbyte but it

100
00:04:21,358 --> 00:04:23,360
really frustrated me that i wasn't able

101
00:04:23,360 --> 00:04:24,639
to do programming so i went back to

102
00:04:24,639 --> 00:04:27,120
pasadena city college aka the school of

103
00:04:27,120 --> 00:04:30,080
wharf from star trek anybody else

104
00:04:30,080 --> 00:04:33,199
que pla yeah great um and then uh

105
00:04:33,199 --> 00:04:35,520
studied their electrical engineering and

106
00:04:35,520 --> 00:04:36,960
programming

107
00:04:36,960 --> 00:04:39,680
so around that time i got picked up by

108
00:04:39,680 --> 00:04:41,280
varonis to start making educational

109
00:04:41,280 --> 00:04:42,800
cyber security content and work as a

110
00:04:42,800 --> 00:04:44,720
security researcher so that's how i got

111
00:04:44,720 --> 00:04:48,880
here i'm kind of on unusual path

112
00:04:48,880 --> 00:04:49,759
so

113
00:04:49,759 --> 00:04:52,160
my current project is a cat shaped

114
00:04:52,160 --> 00:04:54,800
hacking tool with my friend alex lin

115
00:04:54,800 --> 00:04:56,479
sitting in the back back there

116
00:04:56,479 --> 00:04:58,560
uh it uses some of the microcontrollers

117
00:04:58,560 --> 00:05:00,080
that we're going to be talking about

118
00:05:00,080 --> 00:05:02,400
today

119
00:05:02,560 --> 00:05:04,479
so um on the show a lot of people are

120
00:05:04,479 --> 00:05:06,000
like hey do you have a patreon like do

121
00:05:06,000 --> 00:05:07,120
you have anything we can do to like

122
00:05:07,120 --> 00:05:08,800
support you if we like your content and

123
00:05:08,800 --> 00:05:10,080
i was like no it feels a little weird to

124
00:05:10,080 --> 00:05:12,400
do that so instead we make this little

125
00:05:12,400 --> 00:05:14,240
cat shaped biker controller and we make

126
00:05:14,240 --> 00:05:15,680
a lot of content around it so beginners

127
00:05:15,680 --> 00:05:17,440
can get started with hacking

128
00:05:17,440 --> 00:05:19,039
using microcontrollers and if they're

129
00:05:19,039 --> 00:05:20,639
interested they can support us as well

130
00:05:20,639 --> 00:05:22,560
but this design is open source so if you

131
00:05:22,560 --> 00:05:24,000
like it you can go ahead and make it

132
00:05:24,000 --> 00:05:26,560
yourself if you have like a month and a

133
00:05:26,560 --> 00:05:28,160
bunch of brain cells that you want to

134
00:05:28,160 --> 00:05:30,400
kill

135
00:05:31,039 --> 00:05:32,160
all right so we're going to be covering

136
00:05:32,160 --> 00:05:33,360
a lot of different attacks today and i

137
00:05:33,360 --> 00:05:34,479
have a lot of slides so we're going to

138
00:05:34,479 --> 00:05:35,840
go through them kind of quickly but i

139
00:05:35,840 --> 00:05:37,440
want to dive in enough on each one that

140
00:05:37,440 --> 00:05:39,120
you guys come away with an understanding

141
00:05:39,120 --> 00:05:40,400
of how these things work and what's

142
00:05:40,400 --> 00:05:42,400
possible so we're going to talk about

143
00:05:42,400 --> 00:05:44,000
disconnecting wi-fi devices

144
00:05:44,000 --> 00:05:45,360
de-authentication attacks we're going to

145
00:05:45,360 --> 00:05:47,680
talk about wi-fi phishing attacks we're

146
00:05:47,680 --> 00:05:48,960
going to talk about how we can use

147
00:05:48,960 --> 00:05:51,919
microcontrollers to identify the wi-fi

148
00:05:51,919 --> 00:05:53,680
networks that are stored inside people's

149
00:05:53,680 --> 00:05:55,520
phones and we're also going to learn how

150
00:05:55,520 --> 00:05:57,680
we can use them to simulate a mouse or a

151
00:05:57,680 --> 00:05:59,199
keyboard in order to do keystroke

152
00:05:59,199 --> 00:06:02,080
injection make mouse jigglers and also

153
00:06:02,080 --> 00:06:04,240
extract wi-fi handshakes from people's

154
00:06:04,240 --> 00:06:05,680
devices

155
00:06:05,680 --> 00:06:07,199
we're also going to talk about a gps

156
00:06:07,199 --> 00:06:09,680
spoofing so assisted gps spoofing wi-fi

157
00:06:09,680 --> 00:06:12,240
surveillance presence detection uh war

158
00:06:12,240 --> 00:06:15,280
driving and war flying wi-fi routing um

159
00:06:15,280 --> 00:06:17,120
probably i think i actually removed the

160
00:06:17,120 --> 00:06:19,280
network honey pots but i have more so

161
00:06:19,280 --> 00:06:20,960
don't worry we're going to cover lots of

162
00:06:20,960 --> 00:06:22,479
different ways you can use these

163
00:06:22,479 --> 00:06:24,080
microcontrollers they're very very cheap

164
00:06:24,080 --> 00:06:26,560
to do lots of bad stuff

165
00:06:26,560 --> 00:06:27,759
so let's talk about the difference

166
00:06:27,759 --> 00:06:30,720
between a microcontroller and a computer

167
00:06:30,720 --> 00:06:32,720
so a raspberry pi is a very well-known

168
00:06:32,720 --> 00:06:34,560
computer that is a single-board computer

169
00:06:34,560 --> 00:06:35,759
it has everything you need to interact

170
00:06:35,759 --> 00:06:39,120
with it it has ports for hdmi it has a

171
00:06:39,120 --> 00:06:40,720
place for you to put a key

172
00:06:40,720 --> 00:06:42,639
you know a cable for a keyboard it

173
00:06:42,639 --> 00:06:44,800
allows you to really work with it any

174
00:06:44,800 --> 00:06:45,759
other way you would expect to use a

175
00:06:45,759 --> 00:06:47,039
computer with an operating system and

176
00:06:47,039 --> 00:06:49,440
all that whereas a raspberry pi pico is

177
00:06:49,440 --> 00:06:51,840
an example of a microcontroller you need

178
00:06:51,840 --> 00:06:53,599
to program this and it generally can be

179
00:06:53,599 --> 00:06:54,639
programmed with things with circuit

180
00:06:54,639 --> 00:06:56,400
python or arduino

181
00:06:56,400 --> 00:06:58,639
and the cost on this is really different

182
00:06:58,639 --> 00:06:59,840
so right now if you want to get a

183
00:06:59,840 --> 00:07:01,680
raspberry pi it's probably going to be

184
00:07:01,680 --> 00:07:03,199
200

185
00:07:03,199 --> 00:07:04,479
that wasn't always the case they were

186
00:07:04,479 --> 00:07:06,720
supposed to be 35 but because of the

187
00:07:06,720 --> 00:07:08,319
chip shortage and some other logistics

188
00:07:08,319 --> 00:07:09,680
issues it's gotten to the point where

189
00:07:09,680 --> 00:07:11,680
they're very expensive to come by

190
00:07:11,680 --> 00:07:13,680
whereas a microcontroller are pretty

191
00:07:13,680 --> 00:07:14,960
consistently cheap and you can find

192
00:07:14,960 --> 00:07:16,960
these for about four dollars even when

193
00:07:16,960 --> 00:07:18,240
other things start to go higher and

194
00:07:18,240 --> 00:07:19,759
higher higher so if you're someone who's

195
00:07:19,759 --> 00:07:21,199
been priced out of the raspberry pi

196
00:07:21,199 --> 00:07:23,199
ecosystem recently

197
00:07:23,199 --> 00:07:24,560
this might be a really interesting

198
00:07:24,560 --> 00:07:27,360
alternative for you

199
00:07:27,599 --> 00:07:30,160
so what kind of skills do you need to do

200
00:07:30,160 --> 00:07:31,120
some of the things i'm going to be

201
00:07:31,120 --> 00:07:33,199
talking about today well in order to try

202
00:07:33,199 --> 00:07:34,479
one of these projects that's already

203
00:07:34,479 --> 00:07:36,240
been created and is supported by these

204
00:07:36,240 --> 00:07:38,400
microcontrollers you need to know how to

205
00:07:38,400 --> 00:07:40,000
flash some of these community projects

206
00:07:40,000 --> 00:07:42,080
via a web browser so no command line

207
00:07:42,080 --> 00:07:44,080
stuff is really needed here installing

208
00:07:44,080 --> 00:07:47,120
arduino ide adding boards to arduino ide

209
00:07:47,120 --> 00:07:48,879
for the one that you want to work with

210
00:07:48,879 --> 00:07:50,479
compiling and flashing source code in

211
00:07:50,479 --> 00:07:52,479
arduino which is very simple and then

212
00:07:52,479 --> 00:07:54,160
flashing circuit python via a web

213
00:07:54,160 --> 00:07:56,000
browser if you want to get started with

214
00:07:56,000 --> 00:07:58,400
interpreted languages so that doesn't

215
00:07:58,400 --> 00:08:00,319
that's not no computer science degree is

216
00:08:00,319 --> 00:08:01,840
in this list you know like you can get

217
00:08:01,840 --> 00:08:03,280
started with this as a total novice

218
00:08:03,280 --> 00:08:04,400
beginner just by following the

219
00:08:04,400 --> 00:08:06,080
instructions and i think that's a really

220
00:08:06,080 --> 00:08:08,639
important takeaway here

221
00:08:08,639 --> 00:08:10,400
so what if you want to go deeper what if

222
00:08:10,400 --> 00:08:11,520
you don't want to just work with

223
00:08:11,520 --> 00:08:13,039
community project that's already out

224
00:08:13,039 --> 00:08:16,000
there and you want to program your own

225
00:08:16,000 --> 00:08:17,440
hacking tool

226
00:08:17,440 --> 00:08:19,759
well there's also not a cs degree

227
00:08:19,759 --> 00:08:21,360
necessary here you just need to have

228
00:08:21,360 --> 00:08:23,840
some experience in c plus arduino or

229
00:08:23,840 --> 00:08:24,960
python

230
00:08:24,960 --> 00:08:26,800
be willing to learn python command line

231
00:08:26,800 --> 00:08:28,720
utilities maybe use something like moo

232
00:08:28,720 --> 00:08:31,599
editor or arduino ide and have a basic

233
00:08:31,599 --> 00:08:33,039
knowledge of how serial ports work

234
00:08:33,039 --> 00:08:34,240
because you're gonna be communicating

235
00:08:34,240 --> 00:08:35,839
with serial ports a lot and that will be

236
00:08:35,839 --> 00:08:37,919
important also good research skills if

237
00:08:37,919 --> 00:08:40,240
you can find stack overflow answers then

238
00:08:40,240 --> 00:08:43,839
you'll probably be okay doing this

239
00:08:43,839 --> 00:08:46,000
so there are three primary ways to

240
00:08:46,000 --> 00:08:47,839
program a microcontroller that i would

241
00:08:47,839 --> 00:08:49,600
like you know every beginner to walk

242
00:08:49,600 --> 00:08:51,120
away with and this is the way that you

243
00:08:51,120 --> 00:08:53,120
can take a blank microcontroller and put

244
00:08:53,120 --> 00:08:54,800
a really interesting and cool project on

245
00:08:54,800 --> 00:08:57,760
it or program it with your own code the

246
00:08:57,760 --> 00:09:00,080
first way is to flash an already

247
00:09:00,080 --> 00:09:02,959
compiled binary file via a web browser

248
00:09:02,959 --> 00:09:05,200
and chrome currently supports web serial

249
00:09:05,200 --> 00:09:06,640
which makes it really really easy to

250
00:09:06,640 --> 00:09:08,959
just plug this thing in go to a website

251
00:09:08,959 --> 00:09:11,440
flash a binary file and boom it works

252
00:09:11,440 --> 00:09:12,959
it's not very hard

253
00:09:12,959 --> 00:09:14,880
so the second way is you can flash over

254
00:09:14,880 --> 00:09:16,160
circuit python which we'll get a little

255
00:09:16,160 --> 00:09:17,760
bit more into later and that lets you

256
00:09:17,760 --> 00:09:20,000
use any python skills you might have to

257
00:09:20,000 --> 00:09:22,080
start prototyping things with hardware

258
00:09:22,080 --> 00:09:23,440
you just need to flash the circuit

259
00:09:23,440 --> 00:09:25,279
python binary the same way you do in a

260
00:09:25,279 --> 00:09:26,880
web browser and then you can write

261
00:09:26,880 --> 00:09:29,680
circumpython code to the board

262
00:09:29,680 --> 00:09:30,399
so

263
00:09:30,399 --> 00:09:32,160
probably the most discouraging for me as

264
00:09:32,160 --> 00:09:33,440
someone who's bad at math and not good

265
00:09:33,440 --> 00:09:37,519
at c plus is programming in arduino ide

266
00:09:37,519 --> 00:09:39,680
you will just need to flash over the

267
00:09:39,680 --> 00:09:41,279
compiled binary file once you finish

268
00:09:41,279 --> 00:09:42,880
writing your code you'll need to install

269
00:09:42,880 --> 00:09:44,720
the board but overall this process while

270
00:09:44,720 --> 00:09:46,480
more complicated than the other two is

271
00:09:46,480 --> 00:09:48,240
really not that bad so those are the

272
00:09:48,240 --> 00:09:50,320
three different ways that you can flash

273
00:09:50,320 --> 00:09:51,680
over code to a microcontroller

274
00:09:51,680 --> 00:09:53,920
pre-compiled code flash over the browser

275
00:09:53,920 --> 00:09:55,600
circuit python binary so you can write

276
00:09:55,600 --> 00:09:57,680
your own circuit python or

277
00:09:57,680 --> 00:09:59,839
write compiled code c plus plus or

278
00:09:59,839 --> 00:10:02,800
arduino code flash it over via arduino

279
00:10:02,800 --> 00:10:05,440
ide so it's not very hard and there are

280
00:10:05,440 --> 00:10:06,800
some really easy ways to get started

281
00:10:06,800 --> 00:10:10,000
doing this so this is what it looks like

282
00:10:10,000 --> 00:10:12,000
to flash over

283
00:10:12,000 --> 00:10:13,839
a binary file

284
00:10:13,839 --> 00:10:16,399
via google chrome so in the scope of

285
00:10:16,399 --> 00:10:18,320
this gif i am completely flashing a

286
00:10:18,320 --> 00:10:20,720
microcontroller with uh i think in this

287
00:10:20,720 --> 00:10:23,920
case it is uh yes the firmware that runs

288
00:10:23,920 --> 00:10:26,880
on our rubbernug or usb nugget device

289
00:10:26,880 --> 00:10:28,720
and it's able to erase the micro

290
00:10:28,720 --> 00:10:30,480
controller and flash it over completely

291
00:10:30,480 --> 00:10:32,399
in the browser without needing any sort

292
00:10:32,399 --> 00:10:34,079
of command line experience i think

293
00:10:34,079 --> 00:10:35,279
that's really important because this

294
00:10:35,279 --> 00:10:37,600
didn't exist a couple years ago and you

295
00:10:37,600 --> 00:10:39,200
needed to know the command line at least

296
00:10:39,200 --> 00:10:40,480
a little bit

297
00:10:40,480 --> 00:10:42,320
in order to flash over binary files like

298
00:10:42,320 --> 00:10:44,079
this so this is a big step forward i

299
00:10:44,079 --> 00:10:45,440
think for beginners being able to work

300
00:10:45,440 --> 00:10:46,560
with these microcontrollers we're going

301
00:10:46,560 --> 00:10:48,560
to be covering today

302
00:10:48,560 --> 00:10:49,680
and as you can see we're pretty much

303
00:10:49,680 --> 00:10:52,079
done as soon as this bar is loaded we

304
00:10:52,079 --> 00:10:53,440
will have erased and written the

305
00:10:53,440 --> 00:10:55,839
firmware file to this microcontroller

306
00:10:55,839 --> 00:10:57,440
and it will be ready to use that's how

307
00:10:57,440 --> 00:10:58,720
easy it is for you to get started with

308
00:10:58,720 --> 00:11:00,320
one of these cheap microcontrollers you

309
00:11:00,320 --> 00:11:02,160
can plug it in and in the space that

310
00:11:02,160 --> 00:11:03,920
i've been talking you would have already

311
00:11:03,920 --> 00:11:06,000
been done flashing this thing so that's

312
00:11:06,000 --> 00:11:08,320
pretty cool

313
00:11:08,320 --> 00:11:09,920
all right so let's talk about circuit

314
00:11:09,920 --> 00:11:11,600
python it's really cool because circuit

315
00:11:11,600 --> 00:11:13,200
python allows you again to use any

316
00:11:13,200 --> 00:11:14,640
python skills you might have on a

317
00:11:14,640 --> 00:11:16,560
microcontroller environment it shows up

318
00:11:16,560 --> 00:11:18,399
as a usb drive you can basically drag

319
00:11:18,399 --> 00:11:20,560
and drop code and the process for doing

320
00:11:20,560 --> 00:11:22,240
this is very similar you would go to

321
00:11:22,240 --> 00:11:23,760
circuitpython.org

322
00:11:23,760 --> 00:11:25,600
locate the board you want to work with

323
00:11:25,600 --> 00:11:27,920
and flash over the circuit python binary

324
00:11:27,920 --> 00:11:30,000
once that's flashed over you can access

325
00:11:30,000 --> 00:11:32,160
the usb drive that pops up and literally

326
00:11:32,160 --> 00:11:34,240
just drag and drop drag and drop or

327
00:11:34,240 --> 00:11:36,000
start typing your python code and this

328
00:11:36,000 --> 00:11:37,680
will allow you to start prototyping on a

329
00:11:37,680 --> 00:11:39,360
microcontroller so if you're a python

330
00:11:39,360 --> 00:11:41,040
person that's been holding off on using

331
00:11:41,040 --> 00:11:42,399
microcontrollers because you think you

332
00:11:42,399 --> 00:11:44,560
need to learn c plus or arduino that

333
00:11:44,560 --> 00:11:46,720
time has passed you have no more excuses

334
00:11:46,720 --> 00:11:48,720
to try this sort of thing out

335
00:11:48,720 --> 00:11:51,519
to not try to this thing out

336
00:11:51,519 --> 00:11:53,760
all right so last up we have if you want

337
00:11:53,760 --> 00:11:55,440
to have a harder time or if you were

338
00:11:55,440 --> 00:11:57,279
more experienced with c plus programming

339
00:11:57,279 --> 00:11:59,519
you can flash over your code in arduino

340
00:11:59,519 --> 00:12:01,519
ide so sometimes there's a piece of code

341
00:12:01,519 --> 00:12:02,800
that has a variable that needs to be

342
00:12:02,800 --> 00:12:04,160
changed let's say that it's something

343
00:12:04,160 --> 00:12:05,680
that connects to your wi-fi network and

344
00:12:05,680 --> 00:12:07,440
then does something cool like monitors

345
00:12:07,440 --> 00:12:09,120
it or something like that okay well you

346
00:12:09,120 --> 00:12:10,399
need to take that code and add your

347
00:12:10,399 --> 00:12:13,120
wi-fi credentials uh create the binary

348
00:12:13,120 --> 00:12:14,800
file and flash it over so that's one

349
00:12:14,800 --> 00:12:16,480
extra step but arduino ide will

350
00:12:16,480 --> 00:12:18,240
generally do this for you you'll need to

351
00:12:18,240 --> 00:12:20,160
add the device that you want to flash in

352
00:12:20,160 --> 00:12:22,480
the board manager url plug the device

353
00:12:22,480 --> 00:12:24,160
into install the board in the board

354
00:12:24,160 --> 00:12:26,480
manager plug your device into and select

355
00:12:26,480 --> 00:12:28,480
the serial report and then once you're

356
00:12:28,480 --> 00:12:30,720
done with your code hit compile and send

357
00:12:30,720 --> 00:12:32,720
it over so it's not that many steps but

358
00:12:32,720 --> 00:12:34,240
again this is only if you have a project

359
00:12:34,240 --> 00:12:35,680
that you need to modify something you

360
00:12:35,680 --> 00:12:37,120
need to take the source code and maybe

361
00:12:37,120 --> 00:12:38,880
put in your wifi credentials put in a

362
00:12:38,880 --> 00:12:40,240
name you want to add to it something

363
00:12:40,240 --> 00:12:42,480
like that

364
00:12:42,480 --> 00:12:43,680
so there's a number of different

365
00:12:43,680 --> 00:12:44,880
programming languages you can use to

366
00:12:44,880 --> 00:12:46,160
interact with this we're not going to

367
00:12:46,160 --> 00:12:47,600
talk too much about this but i want you

368
00:12:47,600 --> 00:12:49,200
to take that away if you want to get

369
00:12:49,200 --> 00:12:50,480
started with this yourself maybe make

370
00:12:50,480 --> 00:12:52,160
your own prototype virtually all the

371
00:12:52,160 --> 00:12:53,200
microcontrollers we're going to be

372
00:12:53,200 --> 00:12:54,880
talking about today can support arduino

373
00:12:54,880 --> 00:12:56,959
ide many of them can be programmed in

374
00:12:56,959 --> 00:12:58,720
micro python as well

375
00:12:58,720 --> 00:13:01,120
and then only those that have usb

376
00:13:01,120 --> 00:13:03,279
support aka they can pop up as a usb

377
00:13:03,279 --> 00:13:05,360
drive to support easy drag and drop code

378
00:13:05,360 --> 00:13:06,800
will support circuit python at the

379
00:13:06,800 --> 00:13:09,120
moment um i actually really like that

380
00:13:09,120 --> 00:13:10,560
because it simplifies this and we'll go

381
00:13:10,560 --> 00:13:11,920
more into the difference between those

382
00:13:11,920 --> 00:13:14,320
two languages in just a sec

383
00:13:14,320 --> 00:13:16,399
so circuit python is excellent because

384
00:13:16,399 --> 00:13:17,680
it's an interpreted language that's

385
00:13:17,680 --> 00:13:19,680
supported by adafruit adafruit has

386
00:13:19,680 --> 00:13:21,440
wonderful documentation and great

387
00:13:21,440 --> 00:13:23,360
support so in general the experience is

388
00:13:23,360 --> 00:13:24,800
really excellent when working with these

389
00:13:24,800 --> 00:13:26,160
boards because they're targeted at

390
00:13:26,160 --> 00:13:29,200
beginners um adding libraries is as easy

391
00:13:29,200 --> 00:13:31,279
as dragging and dropping it and

392
00:13:31,279 --> 00:13:32,800
generally i really really like the

393
00:13:32,800 --> 00:13:34,320
experience that we have teaching this

394
00:13:34,320 --> 00:13:36,000
language to beginners

395
00:13:36,000 --> 00:13:38,160
micro python is a community supported

396
00:13:38,160 --> 00:13:40,560
project that has excellent documentation

397
00:13:40,560 --> 00:13:42,880
all of it written like nine years ago so

398
00:13:42,880 --> 00:13:44,480
i always get very nervous when i'm using

399
00:13:44,480 --> 00:13:45,680
it because i always find the right

400
00:13:45,680 --> 00:13:47,519
answers but it's so old that sometimes

401
00:13:47,519 --> 00:13:48,720
i'm not sure if it's going to work or

402
00:13:48,720 --> 00:13:50,639
not it i get very nervous working with

403
00:13:50,639 --> 00:13:52,720
micro python and it does work on a lot

404
00:13:52,720 --> 00:13:55,040
of boards that circuit python does not

405
00:13:55,040 --> 00:13:57,680
work on so some of the really cool like

406
00:13:57,680 --> 00:13:59,199
wi-fi based microcontrollers we're going

407
00:13:59,199 --> 00:14:00,560
to talk about that don't support circuit

408
00:14:00,560 --> 00:14:02,639
button do support micro python but the

409
00:14:02,639 --> 00:14:04,880
experience is i would say more difficult

410
00:14:04,880 --> 00:14:06,639
for beginners requires command line

411
00:14:06,639 --> 00:14:08,320
experience and that's why typically

412
00:14:08,320 --> 00:14:11,360
between the two i tend to go for circuit

413
00:14:11,360 --> 00:14:13,839
python over micro or over micro python

414
00:14:13,839 --> 00:14:16,079
when i'm teaching beginners how to use

415
00:14:16,079 --> 00:14:18,240
python on a microcontroller because of

416
00:14:18,240 --> 00:14:20,399
the usb support the support for web

417
00:14:20,399 --> 00:14:21,519
serials so they can do it through a

418
00:14:21,519 --> 00:14:23,519
browser they don't need any command line

419
00:14:23,519 --> 00:14:25,600
experience and adafruit again has really

420
00:14:25,600 --> 00:14:28,639
excellent documentation

421
00:14:28,959 --> 00:14:31,279
so last up arduino ide is a compiled

422
00:14:31,279 --> 00:14:33,600
language based on c plus plus it allows

423
00:14:33,600 --> 00:14:36,480
you very very low level control so alex

424
00:14:36,480 --> 00:14:38,240
and i work as partners making prototypes

425
00:14:38,240 --> 00:14:39,760
where i will come up with a terrible

426
00:14:39,760 --> 00:14:41,440
thing you can do with a microcontroller

427
00:14:41,440 --> 00:14:43,360
and write it in circuit python in an

428
00:14:43,360 --> 00:14:45,360
absolute garbage fire way he will then

429
00:14:45,360 --> 00:14:47,279
look at that and then create a c plus

430
00:14:47,279 --> 00:14:49,440
version that has very fine level control

431
00:14:49,440 --> 00:14:51,440
lots of options and is very polished and

432
00:14:51,440 --> 00:14:53,360
very nice and release that as a binary

433
00:14:53,360 --> 00:14:54,639
file that anybody can just take and

434
00:14:54,639 --> 00:14:56,480
throw onto their boards so that's kind

435
00:14:56,480 --> 00:14:58,079
of the difference between the two c plus

436
00:14:58,079 --> 00:14:59,680
plus is more challenging to write and

437
00:14:59,680 --> 00:15:01,519
run um there's lots of different

438
00:15:01,519 --> 00:15:03,519
hardware libraries that are available

439
00:15:03,519 --> 00:15:05,519
for you to use but some of these compile

440
00:15:05,519 --> 00:15:07,120
errors like don't even make sense like i

441
00:15:07,120 --> 00:15:08,880
got this huge red error as a beginner i

442
00:15:08,880 --> 00:15:10,399
would think something is wrong the board

443
00:15:10,399 --> 00:15:12,320
flashed perfectly fine this is standard

444
00:15:12,320 --> 00:15:14,240
so you know like for as a beginner i

445
00:15:14,240 --> 00:15:17,120
found arduino to be a lot less fun to

446
00:15:17,120 --> 00:15:18,639
learn on and it kind of killed my

447
00:15:18,639 --> 00:15:20,320
enthusiasm in some ways for making

448
00:15:20,320 --> 00:15:22,399
prototypes but circuit python brought it

449
00:15:22,399 --> 00:15:23,839
back so if you've been discouraged

450
00:15:23,839 --> 00:15:24,639
before trying to work with

451
00:15:24,639 --> 00:15:25,680
microcontrollers controllers you haven't

452
00:15:25,680 --> 00:15:27,519
tried circuit pythons i really really

453
00:15:27,519 --> 00:15:29,600
encourage you to try it out

454
00:15:29,600 --> 00:15:30,720
so all right let's get to the

455
00:15:30,720 --> 00:15:33,600
microcontrollers um

456
00:15:33,600 --> 00:15:34,639
we're going to be talking about things

457
00:15:34,639 --> 00:15:36,800
that go all the way from 80 cents up to

458
00:15:36,800 --> 00:15:40,079
about 5.55 so i'm sorry to have uh

459
00:15:40,079 --> 00:15:41,839
baited you on that 55 cents but we'll

460
00:15:41,839 --> 00:15:43,600
try to keep it below five dollars and

461
00:15:43,600 --> 00:15:46,880
stay honest for this presentation um

462
00:15:46,880 --> 00:15:48,079
we're going to start out with the a t

463
00:15:48,079 --> 00:15:51,519
tiny 85 so this is a little low power

464
00:15:51,519 --> 00:15:53,759
microcontroller in which

465
00:15:53,759 --> 00:15:55,360
the most useful form factor is the

466
00:15:55,360 --> 00:15:57,759
digispark now i have taught a lot of

467
00:15:57,759 --> 00:16:00,240
classes on making a bad usb device out

468
00:16:00,240 --> 00:16:02,560
of this little microcontroller and the

469
00:16:02,560 --> 00:16:05,440
traces on it are not perfectly spaced to

470
00:16:05,440 --> 00:16:07,279
work with for example macbook pros or

471
00:16:07,279 --> 00:16:08,800
several other brands of computers so i

472
00:16:08,800 --> 00:16:10,160
get lots of people who try to work with

473
00:16:10,160 --> 00:16:12,399
this microcontroller and they think it's

474
00:16:12,399 --> 00:16:14,240
broken but then we try 10 of them that i

475
00:16:14,240 --> 00:16:15,600
know are good and they just don't work

476
00:16:15,600 --> 00:16:17,519
and we realize you need a usb adapter or

477
00:16:17,519 --> 00:16:19,360
some other nonsense for it it's because

478
00:16:19,360 --> 00:16:21,440
they're so cheap this is the cheapest

479
00:16:21,440 --> 00:16:22,399
one i'm going to cover in our

480
00:16:22,399 --> 00:16:24,959
presentation um and the fact that you

481
00:16:24,959 --> 00:16:26,800
can get one of these individual modules

482
00:16:26,800 --> 00:16:29,279
for as low as 80 cents this one is

483
00:16:29,279 --> 00:16:31,680
currently available for about 250 post

484
00:16:31,680 --> 00:16:34,000
chip shortage um is just a sign that you

485
00:16:34,000 --> 00:16:36,079
know for what you can do with these the

486
00:16:36,079 --> 00:16:38,160
cost is extremely low

487
00:16:38,160 --> 00:16:40,320
so projects this supports well bad usb

488
00:16:40,320 --> 00:16:42,480
obviously uh you're able to make this

489
00:16:42,480 --> 00:16:44,160
look like a keyboard so what it's

490
00:16:44,160 --> 00:16:45,759
plugged into a computer it will execute

491
00:16:45,759 --> 00:16:48,320
a script and you can also take existing

492
00:16:48,320 --> 00:16:49,920
duckyscript which is a hack five

493
00:16:49,920 --> 00:16:51,759
scripting language to script out all

494
00:16:51,759 --> 00:16:53,120
these bad things you can do with a

495
00:16:53,120 --> 00:16:55,440
malicious keyboard and transfer it over

496
00:16:55,440 --> 00:16:56,880
to this so that's really cool you can

497
00:16:56,880 --> 00:16:58,399
take existing payloads and move them

498
00:16:58,399 --> 00:17:01,279
over they do need to be translated over

499
00:17:01,279 --> 00:17:03,199
as i said there's a high failure rate on

500
00:17:03,199 --> 00:17:04,959
this working in someone's usb port so if

501
00:17:04,959 --> 00:17:06,160
you're trying to use this as a sneaky

502
00:17:06,160 --> 00:17:07,919
cyber weapon and then it just they have

503
00:17:07,919 --> 00:17:09,359
an old macbook pro it just won't work

504
00:17:09,359 --> 00:17:11,919
because the traces are the wrong size um

505
00:17:11,919 --> 00:17:13,679
it only takes one payload and it is a

506
00:17:13,679 --> 00:17:15,280
bit of a burden to transfer some of

507
00:17:15,280 --> 00:17:16,720
these old ducky scripts over and make

508
00:17:16,720 --> 00:17:19,039
them into uh you know like actually

509
00:17:19,039 --> 00:17:20,799
something that works on this so i would

510
00:17:20,799 --> 00:17:23,119
say uh in summary i hate these little

511
00:17:23,119 --> 00:17:24,720
shits because they have ruined many of

512
00:17:24,720 --> 00:17:27,119
my workshops and overall they are not

513
00:17:27,119 --> 00:17:29,600
powerful enough to do consistently

514
00:17:29,600 --> 00:17:30,960
interesting hacking things although

515
00:17:30,960 --> 00:17:32,480
intermittently they're a great thing to

516
00:17:32,480 --> 00:17:33,520
work with if you want to teach a

517
00:17:33,520 --> 00:17:35,280
low-cost class and only want to spend

518
00:17:35,280 --> 00:17:38,240
like 80 cents per microcontroller

519
00:17:38,240 --> 00:17:39,840
we can also make a mouse jiggler so this

520
00:17:39,840 --> 00:17:41,200
is interesting because a lot of people

521
00:17:41,200 --> 00:17:43,919
are cheaters and like to cheat at video

522
00:17:43,919 --> 00:17:45,360
games and auto clickers are something

523
00:17:45,360 --> 00:17:47,039
that are very interesting to them i

524
00:17:47,039 --> 00:17:49,440
would never do that um so this is

525
00:17:49,440 --> 00:17:51,200
something where because you can also

526
00:17:51,200 --> 00:17:52,799
simulate a mouse and you can click in

527
00:17:52,799 --> 00:17:54,559
specific coordinates you could basically

528
00:17:54,559 --> 00:17:55,919
rig up buttons to this or whatever and

529
00:17:55,919 --> 00:17:58,000
make something that is an auto clicker

530
00:17:58,000 --> 00:17:59,520
or you know controls both the keyboard

531
00:17:59,520 --> 00:18:00,640
and the mouse kind of kind of

532
00:18:00,640 --> 00:18:02,480
interesting but the way that you flash

533
00:18:02,480 --> 00:18:06,080
these is cursed it is very very annoying

534
00:18:06,080 --> 00:18:08,080
um and not very reliable so do i

535
00:18:08,080 --> 00:18:10,799
recommend these necessarily not no not

536
00:18:10,799 --> 00:18:12,320
necessarily but if you want to buy a

537
00:18:12,320 --> 00:18:14,080
hundred of these and not care that you

538
00:18:14,080 --> 00:18:16,080
know a quarter of them don't work then

539
00:18:16,080 --> 00:18:17,919
you can afford to with these and they

540
00:18:17,919 --> 00:18:19,120
can still do some pretty interesting

541
00:18:19,120 --> 00:18:21,600
attacks so on all of my slides i have

542
00:18:21,600 --> 00:18:23,039
actually either covered this in a null

543
00:18:23,039 --> 00:18:24,160
by a

544
00:18:24,160 --> 00:18:27,360
nullbyte article video or a hack hack 5

545
00:18:27,360 --> 00:18:29,440
video so if you want to see a 15 minute

546
00:18:29,440 --> 00:18:31,360
presentation on basically a tutorial on

547
00:18:31,360 --> 00:18:33,520
exactly how to do every single one of

548
00:18:33,520 --> 00:18:34,880
these you can take a picture of this you

549
00:18:34,880 --> 00:18:36,559
i will put this up on the wiki lady

550
00:18:36,559 --> 00:18:38,640
later and you'll be able to go deep on

551
00:18:38,640 --> 00:18:39,760
any of these topics because i've

552
00:18:39,760 --> 00:18:41,120
literally tried out all of them and

553
00:18:41,120 --> 00:18:42,960
written guides on them plus shot a 15

554
00:18:42,960 --> 00:18:44,720
minute long video on how to do it so you

555
00:18:44,720 --> 00:18:47,440
can follow along yourself

556
00:18:47,440 --> 00:18:50,720
all right so next up is the atmega324u

557
00:18:50,720 --> 00:18:52,799
this is much faster than the at tiny it

558
00:18:52,799 --> 00:18:54,320
has similar capabilities and if i was

559
00:18:54,320 --> 00:18:55,760
running a workshop i would use one of

560
00:18:55,760 --> 00:18:57,280
these suckers because they work way

561
00:18:57,280 --> 00:18:58,960
better they're way more reliable and

562
00:18:58,960 --> 00:19:01,039
they flash like a normal microcontroller

563
00:19:01,039 --> 00:19:02,240
they don't have all the weirdness that

564
00:19:02,240 --> 00:19:03,919
the at tinies do

565
00:19:03,919 --> 00:19:05,200
they don't have any wireless anything

566
00:19:05,200 --> 00:19:06,640
which makes me substantially less

567
00:19:06,640 --> 00:19:08,880
interested in them however they are

568
00:19:08,880 --> 00:19:10,880
still a very smooth experience for usb

569
00:19:10,880 --> 00:19:12,880
attacks and we'll get to that later

570
00:19:12,880 --> 00:19:14,160
because while these ones are not

571
00:19:14,160 --> 00:19:16,000
incredibly useful

572
00:19:16,000 --> 00:19:17,360
much more useful than the previous

573
00:19:17,360 --> 00:19:18,960
category they are substantially more

574
00:19:18,960 --> 00:19:21,440
stable and they can they can be combined

575
00:19:21,440 --> 00:19:22,880
with other cheap microcontrollers that

576
00:19:22,880 --> 00:19:24,799
do support wi-fi to do some truly

577
00:19:24,799 --> 00:19:26,720
interesting things

578
00:19:26,720 --> 00:19:28,480
so next up we have the raspberry pi pico

579
00:19:28,480 --> 00:19:31,200
this is based on the rp2040 the

580
00:19:31,200 --> 00:19:32,799
proprietary raspberry pi trip that the

581
00:19:32,799 --> 00:19:34,400
chip that they just came out with

582
00:19:34,400 --> 00:19:36,480
supports native usb very interesting to

583
00:19:36,480 --> 00:19:37,760
me that means that it can support

584
00:19:37,760 --> 00:19:39,919
circuit python which means it's open for

585
00:19:39,919 --> 00:19:41,840
anybody who has python experience and it

586
00:19:41,840 --> 00:19:44,000
also can do all sorts of bad usb stuff

587
00:19:44,000 --> 00:19:45,840
you can make your your auto clicker

588
00:19:45,840 --> 00:19:47,200
cheaters a lot of people are doing like

589
00:19:47,200 --> 00:19:49,120
art and music stuff with it too making

590
00:19:49,120 --> 00:19:50,559
midi controllers and stuff with that

591
00:19:50,559 --> 00:19:52,799
using the usb capabilities but of course

592
00:19:52,799 --> 00:19:55,440
i am interested in hacking stuff so if

593
00:19:55,440 --> 00:19:57,120
we want to take a look at what we can do

594
00:19:57,120 --> 00:19:58,799
with it we can look no further than the

595
00:19:58,799 --> 00:20:00,960
pico ducky project so this was created

596
00:20:00,960 --> 00:20:03,039
by dave bailey and basically allows you

597
00:20:03,039 --> 00:20:06,080
to run ducky scripts as is on the

598
00:20:06,080 --> 00:20:07,919
raspberry pi pico now the only problem

599
00:20:07,919 --> 00:20:09,679
with this is the raspberry pi pico

600
00:20:09,679 --> 00:20:11,760
doesn't have any buttons nor does it

601
00:20:11,760 --> 00:20:14,080
have a screen so being able to flip it

602
00:20:14,080 --> 00:20:16,400
into programming versus attack mode

603
00:20:16,400 --> 00:20:18,400
requires you to jump to pins which i

604
00:20:18,400 --> 00:20:20,640
don't particularly like and you also

605
00:20:20,640 --> 00:20:21,520
don't really know what's going on

606
00:20:21,520 --> 00:20:23,120
because there's no output

607
00:20:23,120 --> 00:20:25,120
so this does support you know a single

608
00:20:25,120 --> 00:20:27,840
payload or potentially like uh multiple

609
00:20:27,840 --> 00:20:29,039
payloads if you're able to trigger it

610
00:20:29,039 --> 00:20:31,679
with like shorting pins but um i don't

611
00:20:31,679 --> 00:20:33,039
like the short pins in the field because

612
00:20:33,039 --> 00:20:35,120
that's how you get magic smoke

613
00:20:35,120 --> 00:20:36,559
so if you don't want to destroy this

614
00:20:36,559 --> 00:20:39,039
little thing then you might want to rig

615
00:20:39,039 --> 00:20:41,200
a button or something like that

616
00:20:41,200 --> 00:20:42,400
this is an open source project it

617
00:20:42,400 --> 00:20:44,320
supports multiple keyboards dave has

618
00:20:44,320 --> 00:20:45,919
done a really good job of updating this

619
00:20:45,919 --> 00:20:47,600
and it is a circuit python project so if

620
00:20:47,600 --> 00:20:49,039
you're a python person and you want to

621
00:20:49,039 --> 00:20:50,960
whip on some features to this it's

622
00:20:50,960 --> 00:20:52,640
actually super easy to do that that's

623
00:20:52,640 --> 00:20:55,360
why i love this project and also

624
00:20:55,360 --> 00:20:57,520
the raspberry pi pico is coming out with

625
00:20:57,520 --> 00:20:59,200
the wireless version so if you get it

626
00:20:59,200 --> 00:21:00,720
and you wanted to add wi-fi capability

627
00:21:00,720 --> 00:21:02,240
to it just as a python person you could

628
00:21:02,240 --> 00:21:04,080
totally do that in python with very

629
00:21:04,080 --> 00:21:05,360
little microcontroller experience

630
00:21:05,360 --> 00:21:08,080
necessary which is pretty cool

631
00:21:08,080 --> 00:21:09,840
all right now we're going to talk about

632
00:21:09,840 --> 00:21:11,039
the star of this presentation the

633
00:21:11,039 --> 00:21:13,200
esp8266

634
00:21:13,200 --> 00:21:17,679
this is a dollar 73 uh esp8266

635
00:21:17,679 --> 00:21:20,559
sorry esp8266 module like this can be

636
00:21:20,559 --> 00:21:23,039
stamped onto a lot of different uh

637
00:21:23,039 --> 00:21:24,799
larger modules that include like usb

638
00:21:24,799 --> 00:21:26,080
support and other things that are very

639
00:21:26,080 --> 00:21:28,559
useful they are why uh capable of wi-fi

640
00:21:28,559 --> 00:21:30,799
packet injection this is super cool it

641
00:21:30,799 --> 00:21:32,320
means you can do de-authentication you

642
00:21:32,320 --> 00:21:33,919
can spoof networks you can do all sorts

643
00:21:33,919 --> 00:21:36,880
of spooky wi-fi things that most uh

644
00:21:36,880 --> 00:21:38,640
manufacturers will not allow you to do

645
00:21:38,640 --> 00:21:40,480
now espressif has actually locked this

646
00:21:40,480 --> 00:21:41,440
down

647
00:21:41,440 --> 00:21:43,120
they got in kind of some trouble for

648
00:21:43,120 --> 00:21:44,720
allowing this to happen but there's

649
00:21:44,720 --> 00:21:46,880
still an old software development kit

650
00:21:46,880 --> 00:21:48,320
out there that allows you to write

651
00:21:48,320 --> 00:21:50,000
arbitrary packets and that's the key to

652
00:21:50,000 --> 00:21:52,000
this microcontroller's ability to easily

653
00:21:52,000 --> 00:21:54,000
send de-authentication packets or other

654
00:21:54,000 --> 00:21:55,840
sorts of bad packets most of the other

655
00:21:55,840 --> 00:21:57,360
microcontrollers we're talking about

656
00:21:57,360 --> 00:21:59,679
after this point are too new to allow

657
00:21:59,679 --> 00:22:01,280
that because espresso the company behind

658
00:22:01,280 --> 00:22:03,200
it has actually locked that feature down

659
00:22:03,200 --> 00:22:04,400
and there's ways of getting around it

660
00:22:04,400 --> 00:22:05,840
but it requires you to basically

661
00:22:05,840 --> 00:22:07,679
recompile the entire firmware and it is

662
00:22:07,679 --> 00:22:09,120
not for beginners

663
00:22:09,120 --> 00:22:11,360
all right so this can also host web

664
00:22:11,360 --> 00:22:12,960
servers which means this little this

665
00:22:12,960 --> 00:22:15,280
tiny little chip can support uh like a

666
00:22:15,280 --> 00:22:17,360
wi-fi interface that allows you to

667
00:22:17,360 --> 00:22:19,280
connect over your phone to this chip and

668
00:22:19,280 --> 00:22:21,600
have it run things now unfortunately it

669
00:22:21,600 --> 00:22:24,000
does not have native usb support meaning

670
00:22:24,000 --> 00:22:25,600
it doesn't support circuit python and it

671
00:22:25,600 --> 00:22:27,840
doesn't pop up as a usb drive which is

672
00:22:27,840 --> 00:22:29,120
really sad because otherwise this thing

673
00:22:29,120 --> 00:22:30,880
is great right and it is a little bit

674
00:22:30,880 --> 00:22:32,559
low power so there are some limitations

675
00:22:32,559 --> 00:22:33,520
there

676
00:22:33,520 --> 00:22:36,000
so uh these always come in modules and i

677
00:22:36,000 --> 00:22:37,440
have to buy lots and lots of these so

678
00:22:37,440 --> 00:22:39,360
let me show you uh share my pain with

679
00:22:39,360 --> 00:22:40,720
you and maybe save you a little bit of

680
00:22:40,720 --> 00:22:43,520
your own um version three of the node

681
00:22:43,520 --> 00:22:47,120
mcu is a big chunky boy um you don't

682
00:22:47,120 --> 00:22:48,640
want it it doesn't fit in a breadboard

683
00:22:48,640 --> 00:22:50,240
and it is terrible pretty much

684
00:22:50,240 --> 00:22:51,600
everything else on the screen aside from

685
00:22:51,600 --> 00:22:52,880
that is fine if you want to start

686
00:22:52,880 --> 00:22:54,760
working with a

687
00:22:54,760 --> 00:22:57,120
esp8266 that's in a module that includes

688
00:22:57,120 --> 00:22:58,960
usb serial support and has all the nice

689
00:22:58,960 --> 00:23:00,480
things you would want including breakout

690
00:23:00,480 --> 00:23:02,320
pins i personally

691
00:23:02,320 --> 00:23:04,159
love the d1 mini it's on the bottom of

692
00:23:04,159 --> 00:23:05,840
the screen it is fantastic you can see

693
00:23:05,840 --> 00:23:06,840
they're going for

694
00:23:06,840 --> 00:23:09,679
1.73 they are wonderful some of them

695
00:23:09,679 --> 00:23:10,480
even

696
00:23:10,480 --> 00:23:12,640
allow you to add an external antenna so

697
00:23:12,640 --> 00:23:13,760
if you wanted to make a directional

698
00:23:13,760 --> 00:23:15,280
antenna make a fox hunting device out of

699
00:23:15,280 --> 00:23:17,280
this you'd have to flip a little tiny

700
00:23:17,280 --> 00:23:18,480
resistor to switch it over to the

701
00:23:18,480 --> 00:23:20,400
external antenna but you can do it and

702
00:23:20,400 --> 00:23:23,200
that is really truly cool so uh and that

703
00:23:23,200 --> 00:23:24,559
is the pro version if you're interested

704
00:23:24,559 --> 00:23:26,400
in something like that so again these

705
00:23:26,400 --> 00:23:28,320
are the the modules that we typically

706
00:23:28,320 --> 00:23:29,360
use when we're working with these

707
00:23:29,360 --> 00:23:30,720
because they include all the additional

708
00:23:30,720 --> 00:23:32,320
hardware we need to plug it into a

709
00:23:32,320 --> 00:23:34,240
computer via usb cable and get it to

710
00:23:34,240 --> 00:23:36,159
work so this is what i recommend if you

711
00:23:36,159 --> 00:23:38,640
want to get started with it particularly

712
00:23:38,640 --> 00:23:40,640
the d1 mini is my all-time favorite

713
00:23:40,640 --> 00:23:42,400
microcontroller for

714
00:23:42,400 --> 00:23:44,799
wi-fi hacking things so first up we have

715
00:23:44,799 --> 00:23:45,559
the

716
00:23:45,559 --> 00:23:47,919
esp8266d author a lot of you have

717
00:23:47,919 --> 00:23:50,080
probably heard of that my friend stefan

718
00:23:50,080 --> 00:23:52,880
kremser aka spacehoon is the creator of

719
00:23:52,880 --> 00:23:56,080
this project it runs on the esp8266 and

720
00:23:56,080 --> 00:23:58,159
it offers both a web and a serial

721
00:23:58,159 --> 00:24:00,480
interface and the web interfaces over a

722
00:24:00,480 --> 00:24:02,400
wi-fi control network that it broadcasts

723
00:24:02,400 --> 00:24:04,080
and allows you to connect on your phone

724
00:24:04,080 --> 00:24:06,000
and do all sorts of interesting things

725
00:24:06,000 --> 00:24:07,919
so it can scan for wi-fi access points

726
00:24:07,919 --> 00:24:10,640
it can scan for clients it can jam wi-fi

727
00:24:10,640 --> 00:24:12,960
clients via via de-authentication attack

728
00:24:12,960 --> 00:24:14,640
so that's protocol based jamming not

729
00:24:14,640 --> 00:24:16,640
signal-based jamming it should specify

730
00:24:16,640 --> 00:24:18,720
and then it's able to create fake access

731
00:24:18,720 --> 00:24:21,200
points which trick any client that has

732
00:24:21,200 --> 00:24:22,559
joined an access point like that before

733
00:24:22,559 --> 00:24:24,400
into joining very fun and interesting

734
00:24:24,400 --> 00:24:26,080
we'll do more with that later and we can

735
00:24:26,080 --> 00:24:27,600
also create fake pro requests or

736
00:24:27,600 --> 00:24:29,520
requests for networks that would reveal

737
00:24:29,520 --> 00:24:31,200
something like a hack five wi-fi

738
00:24:31,200 --> 00:24:32,880
pineapple that's gonna spin up a network

739
00:24:32,880 --> 00:24:34,240
in response to any of these probe

740
00:24:34,240 --> 00:24:36,559
requests we send out so a lot of

741
00:24:36,559 --> 00:24:38,559
interesting things we can do by just

742
00:24:38,559 --> 00:24:40,880
kind of connecting over our phone to

743
00:24:40,880 --> 00:24:42,720
this microcontroller over a wi-fi

744
00:24:42,720 --> 00:24:43,679
network

745
00:24:43,679 --> 00:24:45,279
so this is what the interface actually

746
00:24:45,279 --> 00:24:46,799
looks like and i'm accessing it on

747
00:24:46,799 --> 00:24:48,880
computer therefore it's wider but it

748
00:24:48,880 --> 00:24:50,159
actually looks pretty good on mobile and

749
00:24:50,159 --> 00:24:52,080
allows you in the first part to run a

750
00:24:52,080 --> 00:24:54,080
scan get a

751
00:24:54,080 --> 00:24:55,760
list of all the wi-fi devices that are

752
00:24:55,760 --> 00:24:57,120
near you with their relative signal

753
00:24:57,120 --> 00:24:59,120
strength displayed all nicely in color

754
00:24:59,120 --> 00:25:01,120
like this it allows you to select

755
00:25:01,120 --> 00:25:02,880
different networks and either attack

756
00:25:02,880 --> 00:25:05,360
them clone them send requests to them

757
00:25:05,360 --> 00:25:09,279
you can even i believe send uh send

758
00:25:09,279 --> 00:25:11,600
fake networks only to a specific device

759
00:25:11,600 --> 00:25:13,039
so all the other devices around it do

760
00:25:13,039 --> 00:25:15,440
not see it it's a very very interesting

761
00:25:15,440 --> 00:25:17,120
tool that allows you a lot of control

762
00:25:17,120 --> 00:25:20,880
over wi-fi in the 2.4 gigahertz spectrum

763
00:25:20,880 --> 00:25:21,679
so

764
00:25:21,679 --> 00:25:23,600
there's also a serial only version of

765
00:25:23,600 --> 00:25:25,200
this that i helped develop a couple of

766
00:25:25,200 --> 00:25:28,559
years ago called the v3 so the v3 of the

767
00:25:28,559 --> 00:25:30,320
wi-fi de-author is the lesser-known

768
00:25:30,320 --> 00:25:32,799
version and it supports wi-fi phishing

769
00:25:32,799 --> 00:25:34,400
which is a capability i pushed for

770
00:25:34,400 --> 00:25:36,320
demonstrating really hard the creator

771
00:25:36,320 --> 00:25:37,600
stefan didn't really want to do this

772
00:25:37,600 --> 00:25:38,799
originally but i convinced him that it

773
00:25:38,799 --> 00:25:40,400
would be super cool to implement this on

774
00:25:40,400 --> 00:25:42,159
a microcontroller

775
00:25:42,159 --> 00:25:44,799
it also supports rogue ap creation um

776
00:25:44,799 --> 00:25:47,360
but it doesn't allow you to send data so

777
00:25:47,360 --> 00:25:50,320
devices can connect to the access point

778
00:25:50,320 --> 00:25:52,240
that it is creating but they're not able

779
00:25:52,240 --> 00:25:54,000
to like you know watch a youtube video

780
00:25:54,000 --> 00:25:55,919
or something on it and it also supports

781
00:25:55,919 --> 00:25:57,279
a beacon swarming attack which is some

782
00:25:57,279 --> 00:25:59,279
research that i did recently that i'm uh

783
00:25:59,279 --> 00:26:01,760
happy to share in a minute

784
00:26:01,760 --> 00:26:03,520
so first off wi-fi phishing so the way

785
00:26:03,520 --> 00:26:05,440
that this works is instead of an

786
00:26:05,440 --> 00:26:07,200
interface we're connecting over serial

787
00:26:07,200 --> 00:26:09,200
so the wi-fi radio is completely free to

788
00:26:09,200 --> 00:26:11,440
do whatever we want so in the first

789
00:26:11,440 --> 00:26:12,960
version of the wi-fi the author we were

790
00:26:12,960 --> 00:26:14,159
making a friendly interface for the

791
00:26:14,159 --> 00:26:15,760
hacker to connect and and you know do

792
00:26:15,760 --> 00:26:18,159
scans and stuff in this version we're

793
00:26:18,159 --> 00:26:20,720
first de-authenticating a victim from a

794
00:26:20,720 --> 00:26:22,960
wi-fi network then we're popping up a

795
00:26:22,960 --> 00:26:24,799
fake wi-fi network with the exact same

796
00:26:24,799 --> 00:26:26,559
name but no security so it's an open

797
00:26:26,559 --> 00:26:28,799
wi-fi network with the same name as the

798
00:26:28,799 --> 00:26:30,720
network our victim is being kicked off

799
00:26:30,720 --> 00:26:31,360
of

800
00:26:31,360 --> 00:26:33,600
as soon as the victim connects because

801
00:26:33,600 --> 00:26:34,960
you know they can no longer access their

802
00:26:34,960 --> 00:26:36,159
data they're confused about what's going

803
00:26:36,159 --> 00:26:39,039
on it pops up a fake router update page

804
00:26:39,039 --> 00:26:40,880
and says hi i'm the router i just

805
00:26:40,880 --> 00:26:42,400
received a security update please enter

806
00:26:42,400 --> 00:26:44,400
your password in order to proceed

807
00:26:44,400 --> 00:26:47,520
as soon as the user types in a password

808
00:26:47,520 --> 00:26:49,679
the microcontroller will attempt to join

809
00:26:49,679 --> 00:26:51,120
that network with the password that they

810
00:26:51,120 --> 00:26:52,400
provided and if it was the right

811
00:26:52,400 --> 00:26:54,640
password it stops the de-authentication

812
00:26:54,640 --> 00:26:56,640
attack and if it worked correctly the

813
00:26:56,640 --> 00:26:58,640
user thinks that they did a very good

814
00:26:58,640 --> 00:27:02,320
job updating the router today

815
00:27:02,640 --> 00:27:04,080
so

816
00:27:04,080 --> 00:27:06,320
i kind of saw how by using the wi-fi

817
00:27:06,320 --> 00:27:07,840
interface we were all already creating

818
00:27:07,840 --> 00:27:08,960
the environment where it would be

819
00:27:08,960 --> 00:27:10,880
possible to do this sort of phishing

820
00:27:10,880 --> 00:27:12,720
attack on a microcontroller instead of

821
00:27:12,720 --> 00:27:14,799
needing to use you know a linux computer

822
00:27:14,799 --> 00:27:17,200
with a wireless network adapter so this

823
00:27:17,200 --> 00:27:18,960
was really really exciting to be able to

824
00:27:18,960 --> 00:27:20,159
do this and if you want to check out the

825
00:27:20,159 --> 00:27:22,080
video it's right here and we go through

826
00:27:22,080 --> 00:27:23,760
the entire process of fishing and what

827
00:27:23,760 --> 00:27:25,919
it looks like and uh how to do it so

828
00:27:25,919 --> 00:27:27,840
really really cool so the next piece of

829
00:27:27,840 --> 00:27:29,919
research i did was on beacon swarms so

830
00:27:29,919 --> 00:27:31,279
in the original version of the wi-fi

831
00:27:31,279 --> 00:27:33,200
d-author you were able to create like a

832
00:27:33,200 --> 00:27:35,840
hundred uh fake wi-fi networks and it

833
00:27:35,840 --> 00:27:37,520
was all like rick rolling stuff but i

834
00:27:37,520 --> 00:27:40,240
was like hey what if instead you got a

835
00:27:40,240 --> 00:27:42,159
list of every open wi-fi network every

836
00:27:42,159 --> 00:27:43,760
coffee shop every like school that has

837
00:27:43,760 --> 00:27:47,039
open wi-fi and every like free trial and

838
00:27:47,039 --> 00:27:49,360
also every like default router name and

839
00:27:49,360 --> 00:27:51,120
made a huge list of this and broadcasted

840
00:27:51,120 --> 00:27:53,440
it and and just waited and listened for

841
00:27:53,440 --> 00:27:55,279
which devices nearby

842
00:27:55,279 --> 00:27:57,120
responded because they had that network

843
00:27:57,120 --> 00:27:59,360
stored inside them so if you have joined

844
00:27:59,360 --> 00:28:00,559
an open network for example like a

845
00:28:00,559 --> 00:28:02,960
coffee shop a hotel maybe an airplane

846
00:28:02,960 --> 00:28:04,720
that is stored in your phone and what i

847
00:28:04,720 --> 00:28:06,640
can do is make a list of like one or two

848
00:28:06,640 --> 00:28:08,559
hundred of these very common open wi-fi

849
00:28:08,559 --> 00:28:10,559
network names and i can present it to

850
00:28:10,559 --> 00:28:12,320
your phone and see which ones you've

851
00:28:12,320 --> 00:28:14,240
joined in the past and once i know a

852
00:28:14,240 --> 00:28:15,279
couple networks you've joined in the

853
00:28:15,279 --> 00:28:17,279
past i can trick your phone into joining

854
00:28:17,279 --> 00:28:19,120
my network and start controlling your

855
00:28:19,120 --> 00:28:20,240
data connection i don't know creating a

856
00:28:20,240 --> 00:28:22,559
vpn and sending it to japan and making

857
00:28:22,559 --> 00:28:24,000
all your websites load in japanese that

858
00:28:24,000 --> 00:28:25,039
one's fun

859
00:28:25,039 --> 00:28:26,880
um

860
00:28:26,880 --> 00:28:29,039
so this is also a way that you can see

861
00:28:29,039 --> 00:28:30,559
where someone's been in the past so if

862
00:28:30,559 --> 00:28:32,159
you want to know where somebody works

863
00:28:32,159 --> 00:28:34,159
you can create a list of all these

864
00:28:34,159 --> 00:28:36,480
different companies office wi-fi network

865
00:28:36,480 --> 00:28:38,159
names you can put it out there and for

866
00:28:38,159 --> 00:28:39,120
example if you're looking for like

867
00:28:39,120 --> 00:28:40,559
defense contractors or something

868
00:28:40,559 --> 00:28:42,880
sensitive you can literally sense people

869
00:28:42,880 --> 00:28:45,279
who work at that company by their phone

870
00:28:45,279 --> 00:28:47,600
attempting to join that network as they

871
00:28:47,600 --> 00:28:49,360
walk by and their phones see a network

872
00:28:49,360 --> 00:28:51,679
that they recognize and go oh i

873
00:28:51,679 --> 00:28:53,039
recognize that and try to join they

874
00:28:53,039 --> 00:28:54,399
won't be able to successfully join

875
00:28:54,399 --> 00:28:55,919
because i don't know the password to

876
00:28:55,919 --> 00:28:58,480
their office network but i do know that

877
00:28:58,480 --> 00:28:59,679
they have been there before because

878
00:28:59,679 --> 00:29:01,120
their phone recognizes that on

879
00:29:01,120 --> 00:29:02,960
automatically joins when it sees it so

880
00:29:02,960 --> 00:29:04,480
it's an interesting way that we can spot

881
00:29:04,480 --> 00:29:05,840
where people have been before by

882
00:29:05,840 --> 00:29:08,000
extracting information about networks

883
00:29:08,000 --> 00:29:09,520
stored in their phone by presenting them

884
00:29:09,520 --> 00:29:11,520
with networks with the exact same name

885
00:29:11,520 --> 00:29:12,399
because even though they have a

886
00:29:12,399 --> 00:29:13,679
different password their phone doesn't

887
00:29:13,679 --> 00:29:15,200
know that until it attempts to connect

888
00:29:15,200 --> 00:29:16,559
and by that point it's already given up

889
00:29:16,559 --> 00:29:18,720
the fact that hey i have been to this

890
00:29:18,720 --> 00:29:19,840
place before i've connected to this

891
00:29:19,840 --> 00:29:21,360
network before so if you've connected to

892
00:29:21,360 --> 00:29:23,279
the strip club network recently you

893
00:29:23,279 --> 00:29:24,720
might want to delete that before you go

894
00:29:24,720 --> 00:29:27,120
home

895
00:29:27,120 --> 00:29:28,799
so another thing that's very interesting

896
00:29:28,799 --> 00:29:30,480
i think i cover it oh yes is the half

897
00:29:30,480 --> 00:29:32,000
handshake attack so let's let's take

898
00:29:32,000 --> 00:29:33,279
that a step further we're using our

899
00:29:33,279 --> 00:29:35,440
microcontroller i create a hundred wi-fi

900
00:29:35,440 --> 00:29:37,600
networks and one of them is um i don't

901
00:29:37,600 --> 00:29:40,799
know my company varonis uh our office

902
00:29:40,799 --> 00:29:43,440
and i as a hacker want to be able to do

903
00:29:43,440 --> 00:29:45,120
something remote so i want to send like

904
00:29:45,120 --> 00:29:47,679
a package to to the verona's office and

905
00:29:47,679 --> 00:29:49,360
have it connect to the wi-fi and do all

906
00:29:49,360 --> 00:29:50,559
this bad stuff but i need to know the

907
00:29:50,559 --> 00:29:52,640
wi-fi network first so if i knew a place

908
00:29:52,640 --> 00:29:54,640
that verona's people hang out and i was

909
00:29:54,640 --> 00:29:56,240
able to use my microcontroller to create

910
00:29:56,240 --> 00:29:58,000
a network that looks like the office

911
00:29:58,000 --> 00:29:59,600
network their devices would all attempt

912
00:29:59,600 --> 00:30:02,320
to join and send a hash of the password

913
00:30:02,320 --> 00:30:05,039
stored in their phones to this fake

914
00:30:05,039 --> 00:30:07,679
network that i'm creating so if i and it

915
00:30:07,679 --> 00:30:09,600
is noted that you need a computer for

916
00:30:09,600 --> 00:30:11,679
this step if i'm running wireshark on my

917
00:30:11,679 --> 00:30:13,279
computer and i'm listening for devices

918
00:30:13,279 --> 00:30:14,720
attempting to connect to this fake

919
00:30:14,720 --> 00:30:16,960
veronas office network i can get that

920
00:30:16,960 --> 00:30:19,039
hash and crack it and if it's not very

921
00:30:19,039 --> 00:30:20,960
good if i have an aws instance with a

922
00:30:20,960 --> 00:30:23,520
huge gpu then i can actually get the

923
00:30:23,520 --> 00:30:25,440
office network or the or your home

924
00:30:25,440 --> 00:30:27,440
network just by extracting it from your

925
00:30:27,440 --> 00:30:29,200
phone by presenting your phone with an

926
00:30:29,200 --> 00:30:31,279
identical looking network which has a

927
00:30:31,279 --> 00:30:32,880
totally different password but again

928
00:30:32,880 --> 00:30:34,480
your phone doesn't know that until it

929
00:30:34,480 --> 00:30:36,320
tries to connect to it and by that point

930
00:30:36,320 --> 00:30:39,039
it's too late and i can grab this hash

931
00:30:39,039 --> 00:30:41,279
and now it is noted that i can't verify

932
00:30:41,279 --> 00:30:43,039
it until i actually go there and try it

933
00:30:43,039 --> 00:30:44,799
and see whether or not it works but i

934
00:30:44,799 --> 00:30:46,960
can extract information about devices

935
00:30:46,960 --> 00:30:48,640
you've connected to in the past and

936
00:30:48,640 --> 00:30:50,559
networks that you've connected to the in

937
00:30:50,559 --> 00:30:52,799
the past i can extract a hash from so

938
00:30:52,799 --> 00:30:54,080
that's very interesting because again if

939
00:30:54,080 --> 00:30:55,760
you have a weak home wi-fi password or

940
00:30:55,760 --> 00:30:57,919
if you have a weak office wi-fi password

941
00:30:57,919 --> 00:30:59,360
if i create a version of that with a

942
00:30:59,360 --> 00:31:01,039
microcontroller that looks enticing to

943
00:31:01,039 --> 00:31:02,399
your phone it will give up that

944
00:31:02,399 --> 00:31:03,600
information and there's not really a lot

945
00:31:03,600 --> 00:31:05,440
you can do aside from disabling auto

946
00:31:05,440 --> 00:31:07,039
connect to prevent that which is very

947
00:31:07,039 --> 00:31:08,399
sneaky

948
00:31:08,399 --> 00:31:11,039
if i don't see it so myself

949
00:31:11,039 --> 00:31:13,120
all right so next up we can also mess

950
00:31:13,120 --> 00:31:16,080
with assisted gps check the time cool so

951
00:31:16,080 --> 00:31:18,880
assisted gps is the way that gps solves

952
00:31:18,880 --> 00:31:21,440
the problem of bouncing gps signals in a

953
00:31:21,440 --> 00:31:23,279
dense urban location like downtown los

954
00:31:23,279 --> 00:31:24,480
angeles or manhattan or something like

955
00:31:24,480 --> 00:31:26,640
that so because the gps signals bounce

956
00:31:26,640 --> 00:31:28,559
so much your phone will actually do a

957
00:31:28,559 --> 00:31:30,480
scan of which wi-fi networks are around

958
00:31:30,480 --> 00:31:32,320
you and then approximate your location

959
00:31:32,320 --> 00:31:34,240
by submitting it to an api that knows

960
00:31:34,240 --> 00:31:36,159
where all of those wi-fi networks are

961
00:31:36,159 --> 00:31:38,000
that's actually what those google street

962
00:31:38,000 --> 00:31:39,360
view cars were doing for a very long

963
00:31:39,360 --> 00:31:41,120
time was geo-locating all those wi-fi

964
00:31:41,120 --> 00:31:43,519
networks in order to create a wi-fi map

965
00:31:43,519 --> 00:31:45,679
of where every access point in america

966
00:31:45,679 --> 00:31:47,760
is so it can figure out where you are

967
00:31:47,760 --> 00:31:50,000
just based on wi-fi signals so we can

968
00:31:50,000 --> 00:31:52,559
totally with that

969
00:31:52,559 --> 00:31:56,559
so in areas that have poor gps reception

970
00:31:56,559 --> 00:31:58,559
we can present a series of wi-fi

971
00:31:58,559 --> 00:32:00,799
networks that look like the ones that

972
00:32:00,799 --> 00:32:02,399
are actually in a different location our

973
00:32:02,399 --> 00:32:04,559
favorite being zuck's pool

974
00:32:04,559 --> 00:32:05,760
so

975
00:32:05,760 --> 00:32:07,519
somebody got a good scan i guess at a

976
00:32:07,519 --> 00:32:09,120
party or something of the wi-fi networks

977
00:32:09,120 --> 00:32:11,919
around mark zuckerberg's pool and uh

978
00:32:11,919 --> 00:32:14,000
made a kind of pre-packaged thing called

979
00:32:14,000 --> 00:32:15,679
skylift that will allow you to put any

980
00:32:15,679 --> 00:32:17,360
networks you want to make it appear that

981
00:32:17,360 --> 00:32:18,880
somebody's phone is close to these

982
00:32:18,880 --> 00:32:20,559
networks that have a known location a

983
00:32:20,559 --> 00:32:22,720
very well-known location so we were able

984
00:32:22,720 --> 00:32:25,600
to go into a like a mall garage where

985
00:32:25,600 --> 00:32:27,120
there was poor gps reception and start

986
00:32:27,120 --> 00:32:28,480
spoofing this and actually see our

987
00:32:28,480 --> 00:32:30,480
phones geo-locate us as you can see in

988
00:32:30,480 --> 00:32:33,440
the screenshot um in the bay area at

989
00:32:33,440 --> 00:32:35,679
mark zuckerberg's mansion so if you want

990
00:32:35,679 --> 00:32:37,360
to try this out it does work you do need

991
00:32:37,360 --> 00:32:40,320
again poor like poor gps reception in

992
00:32:40,320 --> 00:32:42,399
order to affect this because a good gps

993
00:32:42,399 --> 00:32:44,080
signal will override a bunch of

994
00:32:44,080 --> 00:32:45,760
confusing wi-fi networks but it's very

995
00:32:45,760 --> 00:32:47,120
funny to know how this convenience

996
00:32:47,120 --> 00:32:48,799
feature for making your gps startup

997
00:32:48,799 --> 00:32:50,240
faster and work better in a city

998
00:32:50,240 --> 00:32:52,080
environment can totally be abused to

999
00:32:52,080 --> 00:32:54,799
spoof a location uh elsewhere and of

1000
00:32:54,799 --> 00:32:56,080
course if somebody's being picked up

1001
00:32:56,080 --> 00:32:58,559
somewhere or you know maybe they're in a

1002
00:32:58,559 --> 00:33:00,000
building ordering an uber you could

1003
00:33:00,000 --> 00:33:01,679
probably make that uber go to france you

1004
00:33:01,679 --> 00:33:03,519
know like if you were able to

1005
00:33:03,519 --> 00:33:06,320
successfully spoof a location via just

1006
00:33:06,320 --> 00:33:08,880
wi-fi positions so very very interesting

1007
00:33:08,880 --> 00:33:11,200
work and have tested this can confirm it

1008
00:33:11,200 --> 00:33:12,880
works

1009
00:33:12,880 --> 00:33:15,440
uh so this is a creation by alex lynn in

1010
00:33:15,440 --> 00:33:18,720
the back this is the esp bug so this is

1011
00:33:18,720 --> 00:33:21,519
an esp8266 that hides inside of other

1012
00:33:21,519 --> 00:33:23,840
electronics connects to a wi-fi network

1013
00:33:23,840 --> 00:33:25,519
and then listens for the signal strength

1014
00:33:25,519 --> 00:33:27,840
of nearby devices so once you start

1015
00:33:27,840 --> 00:33:29,760
tagging them as oh this is my mom this

1016
00:33:29,760 --> 00:33:31,360
is my dad you can pretty much find out

1017
00:33:31,360 --> 00:33:33,360
when mom and dad are home from anywhere

1018
00:33:33,360 --> 00:33:34,960
because it will push the signal string

1019
00:33:34,960 --> 00:33:36,640
for all of these known devices to a web

1020
00:33:36,640 --> 00:33:38,240
server and let you look at it from

1021
00:33:38,240 --> 00:33:40,960
anywhere so you could be you know on the

1022
00:33:40,960 --> 00:33:42,799
bus or in the car or something and see

1023
00:33:42,799 --> 00:33:44,960
exactly who's home by which wi-fi

1024
00:33:44,960 --> 00:33:46,559
devices are close and which ones are

1025
00:33:46,559 --> 00:33:48,720
moving for example so this is a really

1026
00:33:48,720 --> 00:33:50,480
interesting way of performing wi-fi

1027
00:33:50,480 --> 00:33:53,760
surveillance on any 2.4 gigahertz wi-fi

1028
00:33:53,760 --> 00:33:55,679
device that's in range because you can

1029
00:33:55,679 --> 00:33:57,360
basically watch it move around a

1030
00:33:57,360 --> 00:33:58,880
building as the signal strength gets

1031
00:33:58,880 --> 00:34:00,640
higher and lower or leaves for a while

1032
00:34:00,640 --> 00:34:02,480
and infer whether or not someone is home

1033
00:34:02,480 --> 00:34:04,480
just by honing this in on cell phone or

1034
00:34:04,480 --> 00:34:06,320
smartphone signals so because you know

1035
00:34:06,320 --> 00:34:08,239
every smartphone is going to have wi-fi

1036
00:34:08,239 --> 00:34:10,320
and not all smartphones randomize their

1037
00:34:10,320 --> 00:34:11,918
mac address all the time especially when

1038
00:34:11,918 --> 00:34:13,359
connecting consistently to the same

1039
00:34:13,359 --> 00:34:15,359
network it's possible to be able to tell

1040
00:34:15,359 --> 00:34:17,599
when someone is home from anywhere by

1041
00:34:17,599 --> 00:34:19,280
sneaking one of these tiny little

1042
00:34:19,280 --> 00:34:21,280
devices into something like a usb

1043
00:34:21,280 --> 00:34:22,560
charger or something like that and you

1044
00:34:22,560 --> 00:34:23,599
can see i believe this one is supposed

1045
00:34:23,599 --> 00:34:25,599
to be yeah like a usb hub or something

1046
00:34:25,599 --> 00:34:27,280
so if this remains plugged in it will

1047
00:34:27,280 --> 00:34:30,560
persistently monitor who is in that area

1048
00:34:30,560 --> 00:34:33,440
and uh yeah it doesn't work as well

1049
00:34:33,440 --> 00:34:34,960
against devices that are not associated

1050
00:34:34,960 --> 00:34:36,560
to the same wi-fi network so they could

1051
00:34:36,560 --> 00:34:37,918
be changing around their mac address or

1052
00:34:37,918 --> 00:34:39,679
doing some mac address randomization to

1053
00:34:39,679 --> 00:34:41,359
make it harder to track but if it's

1054
00:34:41,359 --> 00:34:42,960
people inside the home connecting to the

1055
00:34:42,960 --> 00:34:44,960
wi-fi network then it's very effective

1056
00:34:44,960 --> 00:34:46,639
at tracking people who are in a building

1057
00:34:46,639 --> 00:34:48,480
and telling when someone is there some

1058
00:34:48,480 --> 00:34:50,239
hacker spaces use this to tell when you

1059
00:34:50,239 --> 00:34:52,159
know the space is open and automatically

1060
00:34:52,159 --> 00:34:54,000
like turn on the on button or you can

1061
00:34:54,000 --> 00:34:56,719
use it i mean like i can also see how it

1062
00:34:56,719 --> 00:34:58,000
could be abused to track someone

1063
00:34:58,000 --> 00:35:00,320
remotely so this is kind of a

1064
00:35:00,320 --> 00:35:02,480
double-edged sword in proximity sensing

1065
00:35:02,480 --> 00:35:03,920
and being able to tell whether or not

1066
00:35:03,920 --> 00:35:06,000
somebody is inside a building or even

1067
00:35:06,000 --> 00:35:08,960
inside a particular room

1068
00:35:08,960 --> 00:35:11,040
war driving so we decided to do some

1069
00:35:11,040 --> 00:35:13,520
more flying actually and we posed an

1070
00:35:13,520 --> 00:35:16,320
experiment can we take a two dollar gps

1071
00:35:16,320 --> 00:35:18,240
a one dollar sd card module and a one

1072
00:35:18,240 --> 00:35:20,040
dollar eighty cents uh

1073
00:35:20,040 --> 00:35:22,880
esp8266 connect them together and fly

1074
00:35:22,880 --> 00:35:25,359
them on a drone so we went to

1075
00:35:25,359 --> 00:35:28,000
missoula and decided to have our friend

1076
00:35:28,000 --> 00:35:30,079
walk around with a smartphone that was

1077
00:35:30,079 --> 00:35:31,760
projecting wi-fi signal that we kind of

1078
00:35:31,760 --> 00:35:34,000
uh like created a filter for so we could

1079
00:35:34,000 --> 00:35:36,240
look for it later on in the data we flew

1080
00:35:36,240 --> 00:35:38,640
a path around a park and we were able

1081
00:35:38,640 --> 00:35:40,880
later on see at this place

1082
00:35:40,880 --> 00:35:43,359
to very precisely identify exactly where

1083
00:35:43,359 --> 00:35:44,720
they were and then verify it with the

1084
00:35:44,720 --> 00:35:47,040
video footage from the drone so by

1085
00:35:47,040 --> 00:35:49,040
looking for a specific known wi-fi

1086
00:35:49,040 --> 00:35:50,800
device i was able to use the range of

1087
00:35:50,800 --> 00:35:53,359
the drone which is over a mile to run a

1088
00:35:53,359 --> 00:35:55,839
search grid and be able to locate a

1089
00:35:55,839 --> 00:35:58,720
single wi-fi device in a very large park

1090
00:35:58,720 --> 00:36:00,800
so obviously you can do war driving to

1091
00:36:00,800 --> 00:36:02,320
locate you know where

1092
00:36:02,320 --> 00:36:03,520
you know all the wi-fi networks around

1093
00:36:03,520 --> 00:36:05,440
you are save it to an sd card and then

1094
00:36:05,440 --> 00:36:07,040
be able to have a little map for

1095
00:36:07,040 --> 00:36:08,560
yourself but also if you're tracking a

1096
00:36:08,560 --> 00:36:10,560
device being able to mount this on

1097
00:36:10,560 --> 00:36:12,720
something highly mobile like a drone is

1098
00:36:12,720 --> 00:36:14,960
really interesting of course i had to

1099
00:36:14,960 --> 00:36:16,480
take the sd card out and run this

1100
00:36:16,480 --> 00:36:18,640
through a python program to parse it and

1101
00:36:18,640 --> 00:36:20,240
end up filtering for the device we're

1102
00:36:20,240 --> 00:36:22,240
looking for but it would be relatively

1103
00:36:22,240 --> 00:36:24,880
easy to create a live running filter and

1104
00:36:24,880 --> 00:36:26,720
detect when we get a hit on a device

1105
00:36:26,720 --> 00:36:28,160
that we're looking for so what this

1106
00:36:28,160 --> 00:36:29,920
means is if i'm looking for you and i

1107
00:36:29,920 --> 00:36:32,160
need to find you and i know your phone's

1108
00:36:32,160 --> 00:36:34,560
mac address i could potentially fly my

1109
00:36:34,560 --> 00:36:36,640
drone around in a search grid and locate

1110
00:36:36,640 --> 00:36:38,400
pretty precisely the area that you're in

1111
00:36:38,400 --> 00:36:39,920
which might be great for a search and

1112
00:36:39,920 --> 00:36:41,760
rescue but might be really bad for hide

1113
00:36:41,760 --> 00:36:44,160
and seek

1114
00:36:45,200 --> 00:36:48,480
so the esp8266 amazingly can also act as

1115
00:36:48,480 --> 00:36:50,800
a nat router so it basically acts as a

1116
00:36:50,800 --> 00:36:53,200
network extender the connection is crazy

1117
00:36:53,200 --> 00:36:54,880
slow but it does work i was able to load

1118
00:36:54,880 --> 00:36:57,359
a very low resolution youtube video um

1119
00:36:57,359 --> 00:36:59,040
and i like to use this for practicing

1120
00:36:59,040 --> 00:37:01,119
wi-fi hacking on something that behaves

1121
00:37:01,119 --> 00:37:02,720
like a router but doesn't cost as much

1122
00:37:02,720 --> 00:37:04,800
as a router so you can you can connect

1123
00:37:04,800 --> 00:37:06,800
multiple devices to this it does routing

1124
00:37:06,800 --> 00:37:08,640
it a switching you can attack it and it

1125
00:37:08,640 --> 00:37:10,480
will behave like a regular router so if

1126
00:37:10,480 --> 00:37:12,079
you're looking to get into wi-fi hacking

1127
00:37:12,079 --> 00:37:13,520
and you want to create a little router

1128
00:37:13,520 --> 00:37:15,440
to just attack this thing is excellent

1129
00:37:15,440 --> 00:37:17,200
for that it's also great for isolating

1130
00:37:17,200 --> 00:37:18,960
your iot devices from your regular

1131
00:37:18,960 --> 00:37:20,560
network so if you wanted to use that it

1132
00:37:20,560 --> 00:37:22,560
for that too it makes kind of a good

1133
00:37:22,560 --> 00:37:24,079
like kind of like firewall thing where

1134
00:37:24,079 --> 00:37:25,680
you can just deny it

1135
00:37:25,680 --> 00:37:27,760
most of the access to your network and

1136
00:37:27,760 --> 00:37:29,119
just assume that if something bad were

1137
00:37:29,119 --> 00:37:30,240
going to happen to one of your iot

1138
00:37:30,240 --> 00:37:31,760
devices it's limited to this little

1139
00:37:31,760 --> 00:37:33,200
network that it creates i'm actually

1140
00:37:33,200 --> 00:37:34,400
pretty amazed that this little chip can

1141
00:37:34,400 --> 00:37:36,240
both connect to a wifi network and then

1142
00:37:36,240 --> 00:37:38,079
allow other devices to connect to it and

1143
00:37:38,079 --> 00:37:40,000
share its wifi connection that's

1144
00:37:40,000 --> 00:37:41,359
incredible for a dollar eighty like

1145
00:37:41,359 --> 00:37:44,240
that's i still can't get over that

1146
00:37:44,240 --> 00:37:45,040
all right so let's talk about

1147
00:37:45,040 --> 00:37:46,240
limitations because obviously this thing

1148
00:37:46,240 --> 00:37:48,480
is tiny and cost like next to nothing

1149
00:37:48,480 --> 00:37:50,320
it cannot see anything other than wi-fi

1150
00:37:50,320 --> 00:37:52,640
packet headers so while it allows you to

1151
00:37:52,640 --> 00:37:54,480
do sniffing and things like that it is

1152
00:37:54,480 --> 00:37:56,160
clipped off at a certain point and you

1153
00:37:56,160 --> 00:37:57,680
cannot get any more information which is

1154
00:37:57,680 --> 00:37:59,599
unfortunate because that totally rules

1155
00:37:59,599 --> 00:38:00,880
out wi-fi

1156
00:38:00,880 --> 00:38:03,119
handshake capture you cannot capture a

1157
00:38:03,119 --> 00:38:04,480
handshake on this it does not show

1158
00:38:04,480 --> 00:38:06,240
enough information because it literally

1159
00:38:06,240 --> 00:38:07,680
can't it doesn't have enough space to

1160
00:38:07,680 --> 00:38:09,599
store the whole packet or whatever and

1161
00:38:09,599 --> 00:38:11,200
there's some sort of limitation built in

1162
00:38:11,200 --> 00:38:12,880
with the way that it gets a packet and

1163
00:38:12,880 --> 00:38:14,800
reads it um can't do five gigahertz

1164
00:38:14,800 --> 00:38:16,480
wi-fi people ask us this all the time it

1165
00:38:16,480 --> 00:38:18,320
just can't you know it's not built in um

1166
00:38:18,320 --> 00:38:19,920
it sucks as a net router it's not fun to

1167
00:38:19,920 --> 00:38:22,000
work with um and no native usb support

1168
00:38:22,000 --> 00:38:23,280
means that it's not easy for beginners

1169
00:38:23,280 --> 00:38:24,480
to work with you have to use command

1170
00:38:24,480 --> 00:38:25,760
line stuff in order to work with this

1171
00:38:25,760 --> 00:38:28,079
unless somebody like spaceune creates a

1172
00:38:28,079 --> 00:38:29,839
web interface so that you can just flash

1173
00:38:29,839 --> 00:38:32,480
it and then connect on your phone

1174
00:38:32,480 --> 00:38:33,800
so all right let's talk about the

1175
00:38:33,800 --> 00:38:37,359
esp8266 plus the 18 mega 32 for you you

1176
00:38:37,359 --> 00:38:39,359
can just lash these two things together

1177
00:38:39,359 --> 00:38:41,680
so you remember how i said the esp8266

1178
00:38:41,680 --> 00:38:44,000
doesn't have native usb well if you just

1179
00:38:44,000 --> 00:38:45,680
connect it to a microcontroller that

1180
00:38:45,680 --> 00:38:47,440
does kind of solves the problem doesn't

1181
00:38:47,440 --> 00:38:50,079
it so uh there is a project that i think

1182
00:38:50,079 --> 00:38:51,119
is really interesting and worth

1183
00:38:51,119 --> 00:38:53,119
mentioning that just sandwiches these

1184
00:38:53,119 --> 00:38:55,200
two microcontrollers together rather

1185
00:38:55,200 --> 00:38:57,040
than trying to find one that does both

1186
00:38:57,040 --> 00:38:59,119
and i think that that's actually pretty

1187
00:38:59,119 --> 00:39:00,320
worth mentioning so we're going to talk

1188
00:39:00,320 --> 00:39:01,839
about it even though it kind of comes

1189
00:39:01,839 --> 00:39:03,280
very close to our budget and possibly

1190
00:39:03,280 --> 00:39:04,720
goes over it a little bit

1191
00:39:04,720 --> 00:39:05,599
um

1192
00:39:05,599 --> 00:39:06,720
so

1193
00:39:06,720 --> 00:39:09,760
the wi-fi duct is a project that runs on

1194
00:39:09,760 --> 00:39:14,800
the esp8266 and the atmega324

1195
00:39:14,800 --> 00:39:17,680
um the atmega handles the uh usb

1196
00:39:17,680 --> 00:39:20,320
functions and the esp8266 creates a very

1197
00:39:20,320 --> 00:39:21,680
attractive and very nice to work with

1198
00:39:21,680 --> 00:39:24,079
wi-fi interface that lets you connect to

1199
00:39:24,079 --> 00:39:25,359
this thing on your phone and run

1200
00:39:25,359 --> 00:39:26,960
payloads on whatever

1201
00:39:26,960 --> 00:39:28,720
computer that it's plugged into very

1202
00:39:28,720 --> 00:39:30,240
easily it lets you store them it lets

1203
00:39:30,240 --> 00:39:32,160
you edit them and it's got lots of

1204
00:39:32,160 --> 00:39:34,320
configurable features you can set it up

1205
00:39:34,320 --> 00:39:36,320
to run payloads as soon as it's plugged

1206
00:39:36,320 --> 00:39:38,000
in as well if that's what you want and

1207
00:39:38,000 --> 00:39:39,839
you can access the menu the menu on any

1208
00:39:39,839 --> 00:39:41,440
wi-fi device

1209
00:39:41,440 --> 00:39:42,880
so you can see the little demo right

1210
00:39:42,880 --> 00:39:44,400
here of what it looks like that is

1211
00:39:44,400 --> 00:39:46,240
actually it running on a mobile device

1212
00:39:46,240 --> 00:39:48,000
so if you're trying to

1213
00:39:48,000 --> 00:39:49,599
inject duckyscript this is a really cool

1214
00:39:49,599 --> 00:39:51,520
open source project which while not

1215
00:39:51,520 --> 00:39:53,760
particularly elegant

1216
00:39:53,760 --> 00:39:55,920
is still very very capable so if we i

1217
00:39:55,920 --> 00:39:57,280
think i have yeah this is what the web

1218
00:39:57,280 --> 00:39:58,720
interface looks like you're able to

1219
00:39:58,720 --> 00:40:00,880
easily create scripts the editor is

1220
00:40:00,880 --> 00:40:02,560
super clean and intuitive and again it's

1221
00:40:02,560 --> 00:40:03,839
an open source project but look at it i

1222
00:40:03,839 --> 00:40:05,520
mean it's just no it's it's just two

1223
00:40:05,520 --> 00:40:07,520
micro controllers just kind of sandwich

1224
00:40:07,520 --> 00:40:09,440
onto each other so didn't really solve

1225
00:40:09,440 --> 00:40:11,200
the problem here of like not having good

1226
00:40:11,200 --> 00:40:12,720
usb support we just grabbed something

1227
00:40:12,720 --> 00:40:14,560
else and stuck it on that does work but

1228
00:40:14,560 --> 00:40:16,480
it's not my favorite solution but it is

1229
00:40:16,480 --> 00:40:17,599
definitely worth mentioning because this

1230
00:40:17,599 --> 00:40:18,960
is an awesome project and there's lots

1231
00:40:18,960 --> 00:40:20,880
of good documentation for it all right

1232
00:40:20,880 --> 00:40:23,359
so let's move on to the esp32 so this is

1233
00:40:23,359 --> 00:40:25,680
more powerful than the esp8266 supports

1234
00:40:25,680 --> 00:40:27,760
arduino micro python but it does not

1235
00:40:27,760 --> 00:40:29,280
support native usb so we're not going to

1236
00:40:29,280 --> 00:40:31,280
get circuit python on this um it's

1237
00:40:31,280 --> 00:40:33,200
useful for basic applications like video

1238
00:40:33,200 --> 00:40:36,240
uh routing that sort of thing um

1239
00:40:36,240 --> 00:40:38,280
it does do packet capture so unlike the

1240
00:40:38,280 --> 00:40:41,440
esp8266 it can see the entire packet i

1241
00:40:41,440 --> 00:40:43,440
have only tried about twice to try to

1242
00:40:43,440 --> 00:40:44,720
get like a handshake and i never

1243
00:40:44,720 --> 00:40:46,000
succeeded so i don't know why that

1244
00:40:46,000 --> 00:40:48,319
doesn't work but for in general you're

1245
00:40:48,319 --> 00:40:49,839
able to get much more information about

1246
00:40:49,839 --> 00:40:52,640
packets um it can run either on an sd

1247
00:40:52,640 --> 00:40:54,640
card or over serial to do packet capture

1248
00:40:54,640 --> 00:40:56,319
which is great because you can actually

1249
00:40:56,319 --> 00:40:58,160
connect this to wireshark and use this

1250
00:40:58,160 --> 00:41:00,000
as a little wireless network adapter to

1251
00:41:00,000 --> 00:41:03,119
do sniffing which is really really cool

1252
00:41:03,119 --> 00:41:05,040
uh so it can also work as an out router

1253
00:41:05,040 --> 00:41:07,440
but it sucks way less than the esp8266

1254
00:41:07,440 --> 00:41:08,720
because it's faster and better at

1255
00:41:08,720 --> 00:41:10,960
everything so if you're looking to do

1256
00:41:10,960 --> 00:41:12,560
any router attacking stuff i would

1257
00:41:12,560 --> 00:41:15,760
recommend an esp32 over an esp8266 this

1258
00:41:15,760 --> 00:41:17,520
code is by the same person as well they

1259
00:41:17,520 --> 00:41:18,880
just made a scaled up version that in my

1260
00:41:18,880 --> 00:41:21,040
opinion works a lot better on the esp32

1261
00:41:21,040 --> 00:41:23,040
very useful for iot devices or also

1262
00:41:23,040 --> 00:41:24,720
again creating a hackable router for

1263
00:41:24,720 --> 00:41:26,880
like five bucks

1264
00:41:26,880 --> 00:41:28,400
you can also make an offline chat so if

1265
00:41:28,400 --> 00:41:30,960
you want to make a ctf like if you do

1266
00:41:30,960 --> 00:41:33,520
like geocaching or if you wanted to in

1267
00:41:33,520 --> 00:41:35,280
an area with no infrastructure enable

1268
00:41:35,280 --> 00:41:37,839
like a message board this can run an

1269
00:41:37,839 --> 00:41:40,000
offline message board for maybe

1270
00:41:40,000 --> 00:41:42,640
clandestine communication or you know

1271
00:41:42,640 --> 00:41:44,400
cyberpunk stuff who knows

1272
00:41:44,400 --> 00:41:46,400
and this can allow you to host a chat uh

1273
00:41:46,400 --> 00:41:48,000
just on the microcontroller that runs

1274
00:41:48,000 --> 00:41:49,119
through a web interface and allows

1275
00:41:49,119 --> 00:41:50,960
anybody to connect and contribute this

1276
00:41:50,960 --> 00:41:52,480
is useful for a number of things most of

1277
00:41:52,480 --> 00:41:54,319
which i've mentioned

1278
00:41:54,319 --> 00:41:56,800
so another two things stuck together is

1279
00:41:56,800 --> 00:42:00,079
the esp8266 plus the esp32 you remember

1280
00:42:00,079 --> 00:42:02,240
how i said that the esp32 can do full

1281
00:42:02,240 --> 00:42:05,200
packet capture and the esp8266 can't

1282
00:42:05,200 --> 00:42:06,720
well guess what if you stick them

1283
00:42:06,720 --> 00:42:08,400
together then you kind of solve the

1284
00:42:08,400 --> 00:42:10,400
problem so again this is kind of an

1285
00:42:10,400 --> 00:42:12,160
inelegant solution in many ways and it

1286
00:42:12,160 --> 00:42:13,599
is outside of our budget but i wanted to

1287
00:42:13,599 --> 00:42:16,400
mention it because the esp marauder is

1288
00:42:16,400 --> 00:42:17,839
something that links these two together

1289
00:42:17,839 --> 00:42:19,680
very similar to the wi-fi duck and does

1290
00:42:19,680 --> 00:42:21,200
a whole bunch of different wi-fi attacks

1291
00:42:21,200 --> 00:42:22,720
it's kind of a multi-tool so i can't

1292
00:42:22,720 --> 00:42:24,720
really tell you what it does super well

1293
00:42:24,720 --> 00:42:26,079
it does a lot of stuff kind of halfway

1294
00:42:26,079 --> 00:42:27,920
well but it is very interesting for the

1295
00:42:27,920 --> 00:42:29,280
number of attacks that it supports and

1296
00:42:29,280 --> 00:42:31,599
the way that they've solved this problem

1297
00:42:31,599 --> 00:42:33,680
so next up we have the esp32 cam these

1298
00:42:33,680 --> 00:42:35,920
things have an integrated camera but no

1299
00:42:35,920 --> 00:42:38,400
uh usb port so good luck as a beginner

1300
00:42:38,400 --> 00:42:40,319
connecting to it it's a little confusing

1301
00:42:40,319 --> 00:42:41,520
but this thing

1302
00:42:41,520 --> 00:42:44,560
for 489 supports facial recognition like

1303
00:42:44,560 --> 00:42:46,000
are you kidding so you can literally

1304
00:42:46,000 --> 00:42:47,440
make code that executes when it

1305
00:42:47,440 --> 00:42:49,440
recognizes someone's face

1306
00:42:49,440 --> 00:42:51,760
uh so first off it's easy to create a

1307
00:42:51,760 --> 00:42:53,359
spy camera or something that's that is

1308
00:42:53,359 --> 00:42:55,119
hidden with this little device um it

1309
00:42:55,119 --> 00:42:56,560
connects over wi-fi it allows an

1310
00:42:56,560 --> 00:42:57,520
interface for you to change the

1311
00:42:57,520 --> 00:43:00,400
different resolution um it's easy to

1312
00:43:00,400 --> 00:43:02,000
also stream to something that records it

1313
00:43:02,000 --> 00:43:03,040
so like if you wanted to stream this

1314
00:43:03,040 --> 00:43:04,960
thing to obs and record it then it's

1315
00:43:04,960 --> 00:43:07,280
super easy to do that um

1316
00:43:07,280 --> 00:43:08,800
next interesting thing is that the

1317
00:43:08,800 --> 00:43:10,560
facial recognition on it is not

1318
00:43:10,560 --> 00:43:12,960
particularly great but it does work so

1319
00:43:12,960 --> 00:43:14,960
you can get it to run when a specific

1320
00:43:14,960 --> 00:43:17,280
person's face is presented but the thing

1321
00:43:17,280 --> 00:43:18,800
i found is if you have a picture of that

1322
00:43:18,800 --> 00:43:20,960
person it works equally as well as the

1323
00:43:20,960 --> 00:43:22,480
real thing so we're obviously kind of

1324
00:43:22,480 --> 00:43:24,560
limited here on what we can do with

1325
00:43:24,560 --> 00:43:26,800
accuracy but we can make it trigger on

1326
00:43:26,800 --> 00:43:28,800
either an unknown person or a known

1327
00:43:28,800 --> 00:43:30,560
person and that presents all sorts of

1328
00:43:30,560 --> 00:43:32,079
interesting opportunities to maybe hide

1329
00:43:32,079 --> 00:43:34,000
this thing in a room and have some crazy

1330
00:43:34,000 --> 00:43:35,760
nonsense go off when it recognizes a

1331
00:43:35,760 --> 00:43:37,359
particular person for a prank or

1332
00:43:37,359 --> 00:43:38,720
something like that

1333
00:43:38,720 --> 00:43:40,880
if you're looking for a good idea not on

1334
00:43:40,880 --> 00:43:42,640
me though um

1335
00:43:42,640 --> 00:43:44,480
so yes the ability to run a program when

1336
00:43:44,480 --> 00:43:46,400
a face is detected it for less than five

1337
00:43:46,400 --> 00:43:48,079
dollars is something truly incredible

1338
00:43:48,079 --> 00:43:49,599
and i want you to kind of let that sink

1339
00:43:49,599 --> 00:43:51,119
in like we're really at the point where

1340
00:43:51,119 --> 00:43:52,720
for five bucks you can make a

1341
00:43:52,720 --> 00:43:54,000
microcontroller that recognizes

1342
00:43:54,000 --> 00:43:55,680
someone's face and then does something

1343
00:43:55,680 --> 00:43:57,920
in response to it

1344
00:43:57,920 --> 00:44:00,560
so next up let's talk about the esp32 s2

1345
00:44:00,560 --> 00:44:02,079
this is a recent microcontroller and one

1346
00:44:02,079 --> 00:44:03,040
of my favorites we're kind of

1347
00:44:03,040 --> 00:44:04,640
approaching the top tier of the ones

1348
00:44:04,640 --> 00:44:05,920
we're going to be talking about today

1349
00:44:05,920 --> 00:44:08,079
this supports wi-fi it has native usb

1350
00:44:08,079 --> 00:44:09,920
which means it supports circuit python

1351
00:44:09,920 --> 00:44:12,000
and it comes in a module that is pin

1352
00:44:12,000 --> 00:44:14,160
compatible with the d1 mini the one that

1353
00:44:14,160 --> 00:44:15,520
i was talking about loving so much

1354
00:44:15,520 --> 00:44:17,599
earlier this is completely compatible

1355
00:44:17,599 --> 00:44:19,520
pin wise with it so you can slap this in

1356
00:44:19,520 --> 00:44:21,440
on designs that supported the d1 mini

1357
00:44:21,440 --> 00:44:22,720
and boom you have all these new

1358
00:44:22,720 --> 00:44:24,800
capabilities now the problem here is it

1359
00:44:24,800 --> 00:44:27,040
cannot do wi-fi attacks like the d1 mini

1360
00:44:27,040 --> 00:44:28,400
because it's too new

1361
00:44:28,400 --> 00:44:30,000
espresso the developer has locked down

1362
00:44:30,000 --> 00:44:31,839
the sdk and doesn't allow for these old

1363
00:44:31,839 --> 00:44:33,520
school packet injection injection

1364
00:44:33,520 --> 00:44:35,520
attacks anymore so while we're taking a

1365
00:44:35,520 --> 00:44:37,359
step back in terms of the wi-fi chaos we

1366
00:44:37,359 --> 00:44:39,119
can cause we're taking a step forward in

1367
00:44:39,119 --> 00:44:40,480
terms of beginners being able to work

1368
00:44:40,480 --> 00:44:42,560
with this super easily and spin up their

1369
00:44:42,560 --> 00:44:44,400
own prototypes or flash over a community

1370
00:44:44,400 --> 00:44:47,119
project so this is the microcontroller

1371
00:44:47,119 --> 00:44:48,800
we chose for me and alex's personal

1372
00:44:48,800 --> 00:44:50,640
project the wi-fi nugget and the reason

1373
00:44:50,640 --> 00:44:52,800
we chose it is because it's just so

1374
00:44:52,800 --> 00:44:54,480
simple for beginners to work with it

1375
00:44:54,480 --> 00:44:56,240
works well as a human interface device

1376
00:44:56,240 --> 00:44:57,920
as well attack device as well because it

1377
00:44:57,920 --> 00:45:00,560
supports both native usb and wi-fi so

1378
00:45:00,560 --> 00:45:02,400
that's what the why the wi-fi duct

1379
00:45:02,400 --> 00:45:04,400
needed but that was two microcontrollers

1380
00:45:04,400 --> 00:45:06,640
stuck together onto a third pcb this is

1381
00:45:06,640 --> 00:45:08,800
a single module that can do both things

1382
00:45:08,800 --> 00:45:10,960
in one so that means that it's a human

1383
00:45:10,960 --> 00:45:13,119
interface device kind of attack tool

1384
00:45:13,119 --> 00:45:15,119
this thing is perfect for that sort of

1385
00:45:15,119 --> 00:45:16,800
application and of course it can also

1386
00:45:16,800 --> 00:45:18,000
control the mouse you can do your mouse

1387
00:45:18,000 --> 00:45:19,440
jiggler stuff and all the other auto

1388
00:45:19,440 --> 00:45:20,800
clicker stuff that you would do with the

1389
00:45:20,800 --> 00:45:22,640
lower quality micro controller but this

1390
00:45:22,640 --> 00:45:24,079
thing does it all which is really

1391
00:45:24,079 --> 00:45:25,280
awesome well except for the wi-fi

1392
00:45:25,280 --> 00:45:26,319
attacks

1393
00:45:26,319 --> 00:45:28,800
all right so um our project well my

1394
00:45:28,800 --> 00:45:30,880
project first was creating a circuit

1395
00:45:30,880 --> 00:45:33,760
python prototype for the esp32 s2

1396
00:45:33,760 --> 00:45:35,520
that i called the rubber nugget and this

1397
00:45:35,520 --> 00:45:36,560
is something that i wrote in circuit

1398
00:45:36,560 --> 00:45:38,480
python it's a little bit of a trash fire

1399
00:45:38,480 --> 00:45:40,640
but it is able to inject four different

1400
00:45:40,640 --> 00:45:42,000
ducky script payloads with the touch of

1401
00:45:42,000 --> 00:45:43,680
a button as soon as it's plugged in and

1402
00:45:43,680 --> 00:45:45,440
it offers a very basic little wi-fi

1403
00:45:45,440 --> 00:45:48,640
interface as well so next alex took this

1404
00:45:48,640 --> 00:45:51,119
and turned it into the usb nugget which

1405
00:45:51,119 --> 00:45:54,480
is an arduino program that has a much

1406
00:45:54,480 --> 00:45:56,240
better control a very nice wi-fi

1407
00:45:56,240 --> 00:45:59,520
interface supports 36 payloads and is

1408
00:45:59,520 --> 00:46:01,440
able to do a lot of things that my

1409
00:46:01,440 --> 00:46:03,920
python trash fire was not able to do so

1410
00:46:03,920 --> 00:46:06,160
this is basically like kind of like the

1411
00:46:06,160 --> 00:46:07,920
wi-fi deck but it allows you to do

1412
00:46:07,920 --> 00:46:10,240
everything like button operated which i

1413
00:46:10,240 --> 00:46:11,520
really like because this is the first

1414
00:46:11,520 --> 00:46:13,599
hack five tool that actually has a

1415
00:46:13,599 --> 00:46:15,920
screen and will show you the payload as

1416
00:46:15,920 --> 00:46:17,680
it's running so if it stops working at a

1417
00:46:17,680 --> 00:46:18,800
certain point on this little

1418
00:46:18,800 --> 00:46:20,319
microcontroller we have slapped on a

1419
00:46:20,319 --> 00:46:22,400
screen and we're able to actually tell

1420
00:46:22,400 --> 00:46:24,160
like what part of the payload is going

1421
00:46:24,160 --> 00:46:25,680
awry and not working which is a nice

1422
00:46:25,680 --> 00:46:27,760
little improvement

1423
00:46:27,760 --> 00:46:29,599
so i also created what i call the damn

1424
00:46:29,599 --> 00:46:31,520
vulnerable nugget so this currently runs

1425
00:46:31,520 --> 00:46:33,200
on this microcontroller but again all

1426
00:46:33,200 --> 00:46:35,839
these projects will work on any esp32 s2

1427
00:46:35,839 --> 00:46:37,920
board you might just not have a screen

1428
00:46:37,920 --> 00:46:39,520
which in my case i think is kind of the

1429
00:46:39,520 --> 00:46:41,119
reward here so the damn vulnerable

1430
00:46:41,119 --> 00:46:42,720
nugget is a deliberately vulnerable

1431
00:46:42,720 --> 00:46:44,800
python web application that teaches

1432
00:46:44,800 --> 00:46:46,560
people how to use owasp zap or burp

1433
00:46:46,560 --> 00:46:48,079
suite by letting them use this thing as

1434
00:46:48,079 --> 00:46:49,839
a punching bag so it's a real login that

1435
00:46:49,839 --> 00:46:51,839
looks like your most precious of all

1436
00:46:51,839 --> 00:46:53,920
accounts your cat fanciers association

1437
00:46:53,920 --> 00:46:56,160
account what if an attacker was to

1438
00:46:56,160 --> 00:46:58,640
target this so if you flash this program

1439
00:46:58,640 --> 00:47:00,079
over to the microcontroller it will

1440
00:47:00,079 --> 00:47:02,079
connect to your wi-fi and you can just

1441
00:47:02,079 --> 00:47:04,160
attack this vulnerable web application

1442
00:47:04,160 --> 00:47:05,359
and learn about authentication

1443
00:47:05,359 --> 00:47:06,960
vulnerabilities and learn how to use

1444
00:47:06,960 --> 00:47:10,079
owasp's app or burp suite so something i

1445
00:47:10,079 --> 00:47:12,400
wanted to point out is you can do ctfs

1446
00:47:12,400 --> 00:47:14,160
on this sort of thing and on my version

1447
00:47:14,160 --> 00:47:16,079
because i have a screen available i make

1448
00:47:16,079 --> 00:47:18,000
these wet anime eyes flash on the screen

1449
00:47:18,000 --> 00:47:19,680
as soon as you beat the ctf and

1450
00:47:19,680 --> 00:47:21,040
successfully like get around the

1451
00:47:21,040 --> 00:47:22,640
authentication log into the cat fancy

1452
00:47:22,640 --> 00:47:24,480
account so um

1453
00:47:24,480 --> 00:47:26,480
fun little ctf you can run if you don't

1454
00:47:26,480 --> 00:47:28,559
want to rely on something like i really

1455
00:47:28,559 --> 00:47:30,079
love portswigger for their online labs

1456
00:47:30,079 --> 00:47:31,839
but right when i was doing a hack five

1457
00:47:31,839 --> 00:47:33,760
video on this it went down for three

1458
00:47:33,760 --> 00:47:35,520
days so i literally wrote this because

1459
00:47:35,520 --> 00:47:37,119
sometimes the online resources might not

1460
00:47:37,119 --> 00:47:38,800
be available or you might be in an area

1461
00:47:38,800 --> 00:47:40,480
where they're not available so i wanted

1462
00:47:40,480 --> 00:47:42,319
to have a microcontroller version of

1463
00:47:42,319 --> 00:47:43,839
that available for anybody that wants to

1464
00:47:43,839 --> 00:47:45,760
learn you know web application pen

1465
00:47:45,760 --> 00:47:47,760
testing but maybe doesn't want to rely

1466
00:47:47,760 --> 00:47:50,400
on a cloud version of it

1467
00:47:50,400 --> 00:47:53,119
so let's compare these two modules um a

1468
00:47:53,119 --> 00:47:54,720
lot of people say hey your product's

1469
00:47:54,720 --> 00:47:56,000
kind of expensive i'm just going to go

1470
00:47:56,000 --> 00:47:57,359
and get my own i'm like okay okay but

1471
00:47:57,359 --> 00:47:58,400
you're going to kill some brain cells

1472
00:47:58,400 --> 00:47:59,760
and here's an example of how just

1473
00:47:59,760 --> 00:48:01,599
looking at this can anybody tell me

1474
00:48:01,599 --> 00:48:05,599
which one of these modules is defective

1475
00:48:05,599 --> 00:48:07,440
i hope not because i couldn't and i was

1476
00:48:07,440 --> 00:48:08,559
i would be embarrassed if somebody else

1477
00:48:08,559 --> 00:48:11,440
could instantly so um we bought 500 of

1478
00:48:11,440 --> 00:48:13,920
these and this is disconnected this

1479
00:48:13,920 --> 00:48:15,200
little this little via right here is not

1480
00:48:15,200 --> 00:48:16,880
connected to ground and that causes it

1481
00:48:16,880 --> 00:48:20,160
to not work so there's lots of um quirks

1482
00:48:20,160 --> 00:48:21,760
when it comes to buying microcontrollers

1483
00:48:21,760 --> 00:48:23,200
either in large quantities or from new

1484
00:48:23,200 --> 00:48:25,040
suppliers or new designs that are being

1485
00:48:25,040 --> 00:48:26,800
copied by other people because depending

1486
00:48:26,800 --> 00:48:28,160
on who you're buying them from and a

1487
00:48:28,160 --> 00:48:29,839
couple other fine details you can end up

1488
00:48:29,839 --> 00:48:31,839
with something that doesn't work so part

1489
00:48:31,839 --> 00:48:33,760
of the experience of making a product

1490
00:48:33,760 --> 00:48:35,440
and then passing on the value of that is

1491
00:48:35,440 --> 00:48:37,280
making sure that everything works

1492
00:48:37,280 --> 00:48:39,200
testing it over and over and making sure

1493
00:48:39,200 --> 00:48:40,880
that people get a consistent experience

1494
00:48:40,880 --> 00:48:42,079
the downside of working with

1495
00:48:42,079 --> 00:48:44,000
microcontrollers is little mistakes like

1496
00:48:44,000 --> 00:48:45,680
this can really cost you if you don't

1497
00:48:45,680 --> 00:48:47,599
catch them and in this case this was a

1498
00:48:47,599 --> 00:48:49,440
product on aliexpress that was sold to

1499
00:48:49,440 --> 00:48:51,839
us and was never tested until it got all

1500
00:48:51,839 --> 00:48:53,760
the way to us so you can really make

1501
00:48:53,760 --> 00:48:54,960
some mistakes if you're buying these in

1502
00:48:54,960 --> 00:48:56,640
large quantities and that's something

1503
00:48:56,640 --> 00:48:58,640
that i have learned working with a large

1504
00:48:58,640 --> 00:49:02,960
volume of these esp32 s2 boards

1505
00:49:02,960 --> 00:49:03,839
all right so let's talk about

1506
00:49:03,839 --> 00:49:05,760
limitations no bluetooth it also can't

1507
00:49:05,760 --> 00:49:07,680
do the wi-fi attack so the sdk is too

1508
00:49:07,680 --> 00:49:09,280
new and then it does not have five

1509
00:49:09,280 --> 00:49:11,599
gigahertz wi-fi but there's hope for

1510
00:49:11,599 --> 00:49:13,839
that

1511
00:49:13,920 --> 00:49:16,000
so now we're going to get to the boards

1512
00:49:16,000 --> 00:49:18,319
that are currently either not very well

1513
00:49:18,319 --> 00:49:21,280
documented or just announced or you can

1514
00:49:21,280 --> 00:49:23,119
only get in very limited quantities so

1515
00:49:23,119 --> 00:49:24,079
these are boards that we haven't really

1516
00:49:24,079 --> 00:49:25,280
worked with yet because they're brand

1517
00:49:25,280 --> 00:49:27,359
spanking new they're super cool and

1518
00:49:27,359 --> 00:49:28,960
there's a limited rollout or there's

1519
00:49:28,960 --> 00:49:31,440
just no modules that have that board on

1520
00:49:31,440 --> 00:49:33,599
them that are useful for you know me and

1521
00:49:33,599 --> 00:49:35,680
alex to experiment with at this time but

1522
00:49:35,680 --> 00:49:36,960
because i love these microcontrollers

1523
00:49:36,960 --> 00:49:38,000
and i try to stay kind of at the

1524
00:49:38,000 --> 00:49:39,680
forefront of what's going on with them i

1525
00:49:39,680 --> 00:49:41,040
want to stay current with them and if

1526
00:49:41,040 --> 00:49:43,040
you want to stay on top of some really

1527
00:49:43,040 --> 00:49:44,640
interesting microcontrollers uh that are

1528
00:49:44,640 --> 00:49:46,240
coming out then pay attention to this

1529
00:49:46,240 --> 00:49:47,520
part

1530
00:49:47,520 --> 00:49:50,559
so first up we have the esp32 c3 this

1531
00:49:50,559 --> 00:49:54,000
supports 2.4 gigahertz wi-fi native usb

1532
00:49:54,000 --> 00:49:57,920
but oh sorry uh supports bluetooth 5

1533
00:49:57,920 --> 00:50:00,800
le but no native usb so that means that

1534
00:50:00,800 --> 00:50:02,240
you have to connect to this over serial

1535
00:50:02,240 --> 00:50:04,160
it does require like command line a

1536
00:50:04,160 --> 00:50:05,440
little bit of command line experience it

1537
00:50:05,440 --> 00:50:07,359
doesn't support circuit python at least

1538
00:50:07,359 --> 00:50:09,440
the way that i'm used to dealing with it

1539
00:50:09,440 --> 00:50:12,079
um so while this module exists you can

1540
00:50:12,079 --> 00:50:13,839
buy it it's four dollars and it supports

1541
00:50:13,839 --> 00:50:15,760
bluetooth i honestly can't think of many

1542
00:50:15,760 --> 00:50:17,119
interesting things to do with it perhaps

1543
00:50:17,119 --> 00:50:20,000
one of you can um so lots of people who

1544
00:50:20,000 --> 00:50:21,520
maybe will eventually get into the

1545
00:50:21,520 --> 00:50:22,800
bluetooth stack and might be able to

1546
00:50:22,800 --> 00:50:24,240
make a bluetooth hacking tool might be

1547
00:50:24,240 --> 00:50:25,440
excited about this but that's not really

1548
00:50:25,440 --> 00:50:27,680
my area i focus on wi-fi so if you're a

1549
00:50:27,680 --> 00:50:30,160
bluetooth person then you know maybe

1550
00:50:30,160 --> 00:50:31,440
this one's for you

1551
00:50:31,440 --> 00:50:35,200
esp32 s3 this is brand new supports 2.4

1552
00:50:35,200 --> 00:50:37,680
gigahertz native usb the kitchen sink

1553
00:50:37,680 --> 00:50:39,200
and you can also buy these now so you

1554
00:50:39,200 --> 00:50:40,880
can experiment with these they're very

1555
00:50:40,880 --> 00:50:43,599
awesome very cool and uh in general you

1556
00:50:43,599 --> 00:50:45,599
can expect them to be able to do a lot

1557
00:50:45,599 --> 00:50:46,720
more than most of the other

1558
00:50:46,720 --> 00:50:47,920
microcontrollers we talked about today

1559
00:50:47,920 --> 00:50:49,280
these are the flagship ones they're

1560
00:50:49,280 --> 00:50:51,040
really really nice i'm super excited

1561
00:50:51,040 --> 00:50:52,079
about these

1562
00:50:52,079 --> 00:50:53,599
next up the

1563
00:50:53,599 --> 00:50:56,400
c5 it's the first five gigahertz

1564
00:50:56,400 --> 00:50:58,400
microcontroller supported or offered by

1565
00:50:58,400 --> 00:50:59,839
espressif meaning all the people that

1566
00:50:59,839 --> 00:51:02,000
have been wanting to chase wi-fi devices

1567
00:51:02,000 --> 00:51:03,680
off onto their five gigahertz like

1568
00:51:03,680 --> 00:51:06,319
partner network now can go get them uh

1569
00:51:06,319 --> 00:51:08,240
so this will allow you to potentially do

1570
00:51:08,240 --> 00:51:10,079
all sorts of interesting five gigahertz

1571
00:51:10,079 --> 00:51:12,160
stuff but it's almost guaranteed that

1572
00:51:12,160 --> 00:51:13,839
the arbitrary packet injection will be

1573
00:51:13,839 --> 00:51:15,200
locked down because this thing is brand

1574
00:51:15,200 --> 00:51:17,119
new so don't expect to be able to you

1575
00:51:17,119 --> 00:51:18,480
know arbitrary packet injection like

1576
00:51:18,480 --> 00:51:20,000
de-authentication or something right off

1577
00:51:20,000 --> 00:51:21,200
the bat

1578
00:51:21,200 --> 00:51:23,280
no native native usb either so you're

1579
00:51:23,280 --> 00:51:24,720
going to be connecting over serial this

1580
00:51:24,720 --> 00:51:25,920
tip is probably going to be a little bit

1581
00:51:25,920 --> 00:51:27,760
more for advanced people at least in the

1582
00:51:27,760 --> 00:51:29,359
beginning um but it does support

1583
00:51:29,359 --> 00:51:31,280
bluetooth le so maybe somebody could

1584
00:51:31,280 --> 00:51:32,720
make an app for it and make it a little

1585
00:51:32,720 --> 00:51:34,319
bit easier to connect via that and i

1586
00:51:34,319 --> 00:51:36,000
think adafruit and circuit by then have

1587
00:51:36,000 --> 00:51:37,599
been working on some things like that

1588
00:51:37,599 --> 00:51:40,800
using bluetooth so the esp32 c6 because

1589
00:51:40,800 --> 00:51:42,079
there's so many and they suck at naming

1590
00:51:42,079 --> 00:51:44,800
them um so this is 2.4 gigahertz that

1591
00:51:44,800 --> 00:51:46,480
supports wi-fi six with backwards

1592
00:51:46,480 --> 00:51:48,480
compatibility supports bluetooth it's a

1593
00:51:48,480 --> 00:51:50,800
risk five 32-bit microprocessor and

1594
00:51:50,800 --> 00:51:54,000
supports usb serial so not native usb

1595
00:51:54,000 --> 00:51:55,440
you'll still be connecting over serial

1596
00:51:55,440 --> 00:51:56,800
but it's still a really impressive

1597
00:51:56,800 --> 00:51:58,559
microcontroller if you're interested in

1598
00:51:58,559 --> 00:52:02,720
wi-fi 6 and also a bluetooth interface

1599
00:52:02,720 --> 00:52:03,680
all right so let's talk about some

1600
00:52:03,680 --> 00:52:05,680
takeaways so i learned all this in about

1601
00:52:05,680 --> 00:52:08,480
three years uh microcontrollers are much

1602
00:52:08,480 --> 00:52:10,400
more fun to use abuse and destroy than a

1603
00:52:10,400 --> 00:52:12,160
raspberry pi that's gonna cost you now

1604
00:52:12,160 --> 00:52:13,839
three hundred dollars uh to get a new

1605
00:52:13,839 --> 00:52:16,160
one um and you really do not need to be

1606
00:52:16,160 --> 00:52:17,520
a computer scientist in order to get

1607
00:52:17,520 --> 00:52:18,800
started with this stuff i started

1608
00:52:18,800 --> 00:52:20,400
without even knowing how to program and

1609
00:52:20,400 --> 00:52:21,839
i had to go back to school because it

1610
00:52:21,839 --> 00:52:23,280
was frustrating me and i wanted to write

1611
00:52:23,280 --> 00:52:25,119
my own prototypes but really i was able

1612
00:52:25,119 --> 00:52:26,720
to use a lot of these community projects

1613
00:52:26,720 --> 00:52:28,640
with absolutely no experience doing this

1614
00:52:28,640 --> 00:52:31,200
so if you're intrigued by this i really

1615
00:52:31,200 --> 00:52:32,559
encourage you to go on amazon go in

1616
00:52:32,559 --> 00:52:34,480
aliexpress grab a microcontroller and

1617
00:52:34,480 --> 00:52:36,079
try this out for yourself

1618
00:52:36,079 --> 00:52:37,839
meaningful attacks are absolutely within

1619
00:52:37,839 --> 00:52:40,079
your reach for five dollars and there's

1620
00:52:40,079 --> 00:52:42,240
totally a place for every level of skill

1621
00:52:42,240 --> 00:52:44,000
in hardware hacking when it comes to

1622
00:52:44,000 --> 00:52:45,599
applying the stuff to security topics so

1623
00:52:45,599 --> 00:52:46,720
if you're interested in security and

1624
00:52:46,720 --> 00:52:48,160
you're interested in microcontrollers

1625
00:52:48,160 --> 00:52:50,640
now is absolutely the time to start

1626
00:52:50,640 --> 00:52:52,559
and finally thank you for coming if you

1627
00:52:52,559 --> 00:52:53,920
want to support our team you can always

1628
00:52:53,920 --> 00:52:56,559
pick up one of our products the usb

1629
00:52:56,559 --> 00:52:58,640
nugget on our website and if you want to

1630
00:52:58,640 --> 00:53:00,640
see more of my content you can check out

1631
00:53:00,640 --> 00:53:03,119
hack.gay you can follow me on twitter

1632
00:53:03,119 --> 00:53:04,400
and you can also check out the live

1633
00:53:04,400 --> 00:53:06,559
stream on hack 5 every

1634
00:53:06,559 --> 00:53:08,800
week where i do a live q a thank you

1635
00:53:08,800 --> 00:53:12,200
very much for coming

1636
00:53:15,090 --> 00:53:18,519
[Applause]

1637
00:53:36,079 --> 00:53:39,079
so

1638
00:54:10,960 --> 00:54:13,960
uh

