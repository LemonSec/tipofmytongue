1
00:00:01,370 --> 00:00:07,300
[Music]

2
00:00:14,410 --> 00:01:10,840
[Music]

3
00:01:17,360 --> 00:01:19,690
so

4
00:01:19,690 --> 00:01:24,018
[Music]

5
00:01:33,759 --> 00:01:36,759
do

6
00:01:37,730 --> 00:02:13,870
[Music]

7
00:02:17,100 --> 00:02:49,040
[Music]

8
00:02:52,879 --> 00:02:56,480
folks once again welcome to a new hope

9
00:02:56,480 --> 00:02:57,760
this is about the time of day it's

10
00:02:57,760 --> 00:03:00,159
healthy to remind folks about the 3-2-1

11
00:03:00,159 --> 00:03:02,000
rule which can help you optimize your

12
00:03:02,000 --> 00:03:02,840
con

13
00:03:02,840 --> 00:03:05,760
enjoyment three hours of sleep two good

14
00:03:05,760 --> 00:03:06,720
meals

15
00:03:06,720 --> 00:03:10,080
one shower or on a day like today

16
00:03:10,080 --> 00:03:11,760
three quarts of water two liters of

17
00:03:11,760 --> 00:03:13,280
water and then like some other bottle of

18
00:03:13,280 --> 00:03:15,840
water too

19
00:03:16,159 --> 00:03:18,640
on to our next speaker

20
00:03:18,640 --> 00:03:21,120
on the surface a popular social media

21
00:03:21,120 --> 00:03:22,800
app downloaded through the google play

22
00:03:22,800 --> 00:03:25,680
store or a piece of malware side loaded

23
00:03:25,680 --> 00:03:28,159
onto a device may look very different

24
00:03:28,159 --> 00:03:29,680
but none of us are here to look at the

25
00:03:29,680 --> 00:03:31,760
surface of things

26
00:03:31,760 --> 00:03:33,360
our speaker bill

27
00:03:33,360 --> 00:03:34,560
buddington

28
00:03:34,560 --> 00:03:38,239
will explain perspective as a

29
00:03:38,239 --> 00:03:40,560
as a reverse engineer and an analyst

30
00:03:40,560 --> 00:03:42,319
android drafts to see exactly how these

31
00:03:42,319 --> 00:03:43,440
are different

32
00:03:43,440 --> 00:03:46,840
how they're the same

33
00:03:49,040 --> 00:03:50,959
hey everyone um thanks so much for

34
00:03:50,959 --> 00:03:52,560
coming um

35
00:03:52,560 --> 00:03:54,000
i'm gonna just

36
00:03:54,000 --> 00:03:55,840
let you

37
00:03:55,840 --> 00:03:58,400
give your q a or the questions

38
00:03:58,400 --> 00:04:00,159
at the end

39
00:04:00,159 --> 00:04:01,760
and i can't really see people so

40
00:04:01,760 --> 00:04:03,760
hopefully i can see ray's hands at some

41
00:04:03,760 --> 00:04:05,519
point but um

42
00:04:05,519 --> 00:04:07,280
yeah let me go into presenter mode real

43
00:04:07,280 --> 00:04:09,599
quick

44
00:04:10,159 --> 00:04:12,720
if i can see that

45
00:04:12,720 --> 00:04:15,760
so i can

46
00:04:15,760 --> 00:04:17,358
presenter view

47
00:04:17,358 --> 00:04:20,159
bring that over here

48
00:04:22,240 --> 00:04:23,120
awesome

49
00:04:23,120 --> 00:04:24,479
[Music]

50
00:04:24,479 --> 00:04:29,000
and then full screen this

51
00:04:30,880 --> 00:04:34,160
so hopefully you are here to learn about

52
00:04:34,160 --> 00:04:38,240
uh reversing some android malware or

53
00:04:38,240 --> 00:04:40,880
doing some kind of privacy or security

54
00:04:40,880 --> 00:04:43,360
audit of apps and that's what

55
00:04:43,360 --> 00:04:46,080
i've been involved in in maybe the the

56
00:04:46,080 --> 00:04:48,560
last you know year or so

57
00:04:48,560 --> 00:04:50,560
so i'm pretty new at it actually but um

58
00:04:50,560 --> 00:04:52,080
but i uh

59
00:04:52,080 --> 00:04:53,440
have been looking at some interesting

60
00:04:53,440 --> 00:04:54,880
things over the past year so i just

61
00:04:54,880 --> 00:04:58,720
wanted to to kind of run through those

62
00:04:58,720 --> 00:05:01,039
first i wanted to mention like who are

63
00:05:01,039 --> 00:05:01,840
we

64
00:05:01,840 --> 00:05:03,440
what is eff

65
00:05:03,440 --> 00:05:07,600
and eff is a 501c3

66
00:05:07,600 --> 00:05:09,120
nonprofit

67
00:05:09,120 --> 00:05:11,280
and we're based in the san francisco bay

68
00:05:11,280 --> 00:05:12,240
area

69
00:05:12,240 --> 00:05:15,360
um and

70
00:05:17,440 --> 00:05:20,240
we pro you know comprise this kind of uh

71
00:05:20,240 --> 00:05:24,639
triforce of activists lawyers and

72
00:05:24,639 --> 00:05:26,400
technologists

73
00:05:26,400 --> 00:05:27,600
and um

74
00:05:27,600 --> 00:05:29,039
what uh you know i'm part of the

75
00:05:29,039 --> 00:05:32,160
technologist's team at eff and i kind of

76
00:05:32,160 --> 00:05:33,440
look at

77
00:05:33,440 --> 00:05:35,440
you know various pieces of software

78
00:05:35,440 --> 00:05:37,680
you know write software we have lawyers

79
00:05:37,680 --> 00:05:40,800
that defend your digital uh liberties as

80
00:05:40,800 --> 00:05:41,680
you

81
00:05:41,680 --> 00:05:42,960
go online

82
00:05:42,960 --> 00:05:45,199
and you know make sure that if you're a

83
00:05:45,199 --> 00:05:47,199
security researcher you don't wind up

84
00:05:47,199 --> 00:05:48,639
getting arrested for your security

85
00:05:48,639 --> 00:05:50,880
research

86
00:05:50,880 --> 00:05:51,759
and

87
00:05:51,759 --> 00:05:52,720
our

88
00:05:52,720 --> 00:05:55,840
fantastic team of activists advocate uh

89
00:05:55,840 --> 00:05:58,560
for you and for a better kind of digital

90
00:05:58,560 --> 00:06:01,360
landscape uh in terms of legal legal

91
00:06:01,360 --> 00:06:02,960
landscape

92
00:06:02,960 --> 00:06:04,960
so we fight for encryption privacy and

93
00:06:04,960 --> 00:06:08,000
the security on the internet

94
00:06:08,000 --> 00:06:10,479
one second

95
00:06:18,840 --> 00:06:20,560
sorry

96
00:06:20,560 --> 00:06:23,120
there we go

97
00:06:24,080 --> 00:06:27,758
and you can find us at eff.org

98
00:06:28,160 --> 00:06:30,400
so who am i and why should you listen to

99
00:06:30,400 --> 00:06:32,240
me first of all i want to give a huge

100
00:06:32,240 --> 00:06:33,600
credit to the person that did this

101
00:06:33,600 --> 00:06:36,400
character i got it at infosec southwest

102
00:06:36,400 --> 00:06:38,240
and like every single person that's seen

103
00:06:38,240 --> 00:06:40,400
is like oh my god that's so you i'm like

104
00:06:40,400 --> 00:06:41,600
yeah

105
00:06:41,600 --> 00:06:44,000
i can see it i can see it

106
00:06:44,000 --> 00:06:45,680
i'm a senior staff technologist at

107
00:06:45,680 --> 00:06:49,840
electronic frontier foundation um i have

108
00:06:49,840 --> 00:06:53,680
been the lead coder for https everywhere

109
00:06:53,680 --> 00:06:54,560
and

110
00:06:54,560 --> 00:06:56,240
panopticlick which was recently

111
00:06:56,240 --> 00:06:59,599
rebranded to cover your tracks which is

112
00:06:59,599 --> 00:07:01,440
something that looks at your browser

113
00:07:01,440 --> 00:07:02,880
fingerprint and

114
00:07:02,880 --> 00:07:05,280
kind of figures out how identifiable you

115
00:07:05,280 --> 00:07:05,919
are

116
00:07:05,919 --> 00:07:09,120
based on your browser fingerprint

117
00:07:09,120 --> 00:07:11,759
as i said i'm a privacy and security

118
00:07:11,759 --> 00:07:14,000
auditor of of you know things like

119
00:07:14,000 --> 00:07:16,560
reportedly legitimate apps

120
00:07:16,560 --> 00:07:18,479
as well as reverse engineering and

121
00:07:18,479 --> 00:07:23,039
malware in the android ecosystem

122
00:07:23,759 --> 00:07:26,400
so why study android apps in the first

123
00:07:26,400 --> 00:07:28,880
place why is that something that that is

124
00:07:28,880 --> 00:07:30,800
interesting

125
00:07:30,800 --> 00:07:32,720
well i have a familiarity with the

126
00:07:32,720 --> 00:07:36,400
android activity life cycle myself um

127
00:07:36,400 --> 00:07:39,360
you know i have also coded uh and

128
00:07:39,360 --> 00:07:41,520
different android apps and

129
00:07:41,520 --> 00:07:42,400
um

130
00:07:42,400 --> 00:07:45,520
familiarity with java which is coded in

131
00:07:45,520 --> 00:07:47,520
and more recently kind of a

132
00:07:47,520 --> 00:07:48,479
java

133
00:07:48,479 --> 00:07:50,639
derivative called kotlin which uh

134
00:07:50,639 --> 00:07:51,919
specifically

135
00:07:51,919 --> 00:07:56,560
uh android uh is is uh you know uh

136
00:07:56,560 --> 00:07:59,280
coded in it's also relatively easy to

137
00:07:59,280 --> 00:08:01,680
retrieve android apps

138
00:08:01,680 --> 00:08:05,599
and you know have them downloaded um

139
00:08:05,599 --> 00:08:07,360
there's a lot of malware out there on in

140
00:08:07,360 --> 00:08:11,800
the android ecosystem to work with

141
00:08:13,599 --> 00:08:14,800
so i'm just going to give you a

142
00:08:14,800 --> 00:08:17,280
high-level overview of

143
00:08:17,280 --> 00:08:19,520
android apps and what that kind of

144
00:08:19,520 --> 00:08:21,680
system looks like

145
00:08:21,680 --> 00:08:24,400
so firstly you'll see something a lot in

146
00:08:24,400 --> 00:08:26,319
this talk and that's called the apk

147
00:08:26,319 --> 00:08:28,639
that's an android package

148
00:08:28,639 --> 00:08:32,320
an apk is actually just a zip file and a

149
00:08:32,320 --> 00:08:34,719
special especially formatted zip file so

150
00:08:34,719 --> 00:08:37,360
if you unzip it you'll see a lot of uh

151
00:08:37,360 --> 00:08:38,958
files that are that are just you know

152
00:08:38,958 --> 00:08:42,000
standard archive files

153
00:08:42,000 --> 00:08:45,360
um like if you

154
00:08:45,360 --> 00:08:46,959
you know unzip

155
00:08:46,959 --> 00:08:49,160
a android apk you'll see an

156
00:08:49,160 --> 00:08:51,200
androidmanifest.xml file

157
00:08:51,200 --> 00:08:54,640
as well as various assets that will be

158
00:08:54,640 --> 00:08:56,800
included in any android package that

159
00:08:56,800 --> 00:09:00,719
allow that package to function

160
00:09:01,519 --> 00:09:04,160
there's also a different standard called

161
00:09:04,160 --> 00:09:06,240
a split apk

162
00:09:06,240 --> 00:09:09,600
which is a publication standard so you

163
00:09:09,600 --> 00:09:12,800
won't download it to your device um but

164
00:09:12,800 --> 00:09:15,440
you'll you know have it published uh on

165
00:09:15,440 --> 00:09:17,200
the google play store

166
00:09:17,200 --> 00:09:20,320
and um that will split your apk into

167
00:09:20,320 --> 00:09:22,720
various different um you know kind of

168
00:09:22,720 --> 00:09:23,680
sub

169
00:09:23,680 --> 00:09:26,080
or various different apks uh depending

170
00:09:26,080 --> 00:09:31,120
on your locale or uh device or dpi

171
00:09:31,120 --> 00:09:34,160
you can that kind of configuration um

172
00:09:34,160 --> 00:09:36,320
will will uh you know kind of differ

173
00:09:36,320 --> 00:09:39,440
what apk you get

174
00:09:41,519 --> 00:09:42,959
so there's also

175
00:09:42,959 --> 00:09:45,519
other standards that are you know not

176
00:09:45,519 --> 00:09:47,360
you know specifically

177
00:09:47,360 --> 00:09:49,279
um supported

178
00:09:49,279 --> 00:09:53,839
out of the box there's a apk or ap ap

179
00:09:53,839 --> 00:09:55,200
k pure

180
00:09:55,200 --> 00:09:56,399
um

181
00:09:56,399 --> 00:09:58,880
which is an android mirror uh android

182
00:09:58,880 --> 00:10:01,839
google play mirror has its own package

183
00:10:01,839 --> 00:10:04,160
standard called an android package

184
00:10:04,160 --> 00:10:06,640
bundle or x apk

185
00:10:06,640 --> 00:10:10,160
and that also you can get basically this

186
00:10:10,160 --> 00:10:11,279
uh

187
00:10:11,279 --> 00:10:12,959
app a specific app that has its own

188
00:10:12,959 --> 00:10:15,040
installer to install this specific type

189
00:10:15,040 --> 00:10:16,079
of

190
00:10:16,079 --> 00:10:19,560
android package

191
00:10:20,880 --> 00:10:22,800
so there's various different

192
00:10:22,800 --> 00:10:25,680
app marketplaces that you can find

193
00:10:25,680 --> 00:10:28,000
android apks on

194
00:10:28,000 --> 00:10:29,760
of course by and far the most popular

195
00:10:29,760 --> 00:10:32,800
one is the google play store

196
00:10:32,800 --> 00:10:36,160
um and you know that's where 99 of

197
00:10:36,160 --> 00:10:38,079
people get their packages from because

198
00:10:38,079 --> 00:10:40,959
that's the default publication

199
00:10:40,959 --> 00:10:42,320
uh uh

200
00:10:42,320 --> 00:10:46,000
platform for apks there's also uh you

201
00:10:46,000 --> 00:10:48,800
know google play store mirrors like apk

202
00:10:48,800 --> 00:10:51,040
pure that i just mentioned

203
00:10:51,040 --> 00:10:53,839
and apk mirror

204
00:10:53,839 --> 00:10:55,680
some of these are

205
00:10:55,680 --> 00:10:57,920
you know maybe

206
00:10:57,920 --> 00:11:00,480
clones of the google play store but

207
00:11:00,480 --> 00:11:02,720
their own publication

208
00:11:02,720 --> 00:11:04,880
methods allow for

209
00:11:04,880 --> 00:11:07,360
infection um for instance

210
00:11:07,360 --> 00:11:08,480
you know uh

211
00:11:08,480 --> 00:11:10,560
in apk pure their

212
00:11:10,560 --> 00:11:12,800
apk pure app their downloader app was

213
00:11:12,800 --> 00:11:14,880
infected with malware itself

214
00:11:14,880 --> 00:11:15,680
so

215
00:11:15,680 --> 00:11:17,839
there's uh some dangers to using

216
00:11:17,839 --> 00:11:21,040
third-party marketplaces

217
00:11:22,240 --> 00:11:24,800
there's also things like f droid f droid

218
00:11:24,800 --> 00:11:25,760
is

219
00:11:25,760 --> 00:11:27,839
a

220
00:11:27,839 --> 00:11:31,600
open source free and open source

221
00:11:31,920 --> 00:11:35,519
marketplace for uh android apps and

222
00:11:35,519 --> 00:11:38,000
there's a number of actually after is

223
00:11:38,000 --> 00:11:40,640
also a standard too so you have an

224
00:11:40,640 --> 00:11:43,279
aftroid package repository index

225
00:11:43,279 --> 00:11:46,560
and that uh method of verification of

226
00:11:46,560 --> 00:11:48,079
that package index

227
00:11:48,079 --> 00:11:50,639
uh can be published by you know f droid

228
00:11:50,639 --> 00:11:52,000
but it could probably be published by a

229
00:11:52,000 --> 00:11:54,399
number of third parties and so you see

230
00:11:54,399 --> 00:11:56,079
after it has this kind of master

231
00:11:56,079 --> 00:11:58,240
repository but there's also you know for

232
00:11:58,240 --> 00:11:59,760
instance the guardian project they have

233
00:11:59,760 --> 00:12:02,240
their own um f droid third-party

234
00:12:02,240 --> 00:12:04,720
repository there's actually also aproid

235
00:12:04,720 --> 00:12:06,160
uh mirror

236
00:12:06,160 --> 00:12:08,639
the aftroid canonical repo also has

237
00:12:08,639 --> 00:12:10,880
mirrors so it's a little bit confusing

238
00:12:10,880 --> 00:12:12,320
but they all use this kind of

239
00:12:12,320 --> 00:12:14,240
standardized

240
00:12:14,240 --> 00:12:15,760
way to publish

241
00:12:15,760 --> 00:12:17,600
apks

242
00:12:17,600 --> 00:12:20,320
you know f droid doesn't as of yet

243
00:12:20,320 --> 00:12:21,680
support

244
00:12:21,680 --> 00:12:25,600
aab or android package bundles

245
00:12:25,600 --> 00:12:27,279
but that's you know just another way to

246
00:12:27,279 --> 00:12:28,000
get

247
00:12:28,000 --> 00:12:29,839
android packages

248
00:12:29,839 --> 00:12:32,079
and finally there is the huawei app

249
00:12:32,079 --> 00:12:36,000
gallery which is very popular in china

250
00:12:36,000 --> 00:12:37,920
interestingly

251
00:12:37,920 --> 00:12:41,360
i recently discovered that if you have

252
00:12:41,360 --> 00:12:44,399
two exact same versions of the same

253
00:12:44,399 --> 00:12:46,959
package you look at the app manifests of

254
00:12:46,959 --> 00:12:48,320
these different packages and they'll

255
00:12:48,320 --> 00:12:50,079
come with different permissions

256
00:12:50,079 --> 00:12:52,000
on the out gallery and different

257
00:12:52,000 --> 00:12:53,200
signatures

258
00:12:53,200 --> 00:12:55,760
um so that's uh

259
00:12:55,760 --> 00:12:57,920
interesting some of them are very huawei

260
00:12:57,920 --> 00:12:59,680
specific permissions

261
00:12:59,680 --> 00:13:01,040
so um

262
00:13:01,040 --> 00:13:03,519
if you are interested in

263
00:13:03,519 --> 00:13:06,880
looking and investigating that avenue of

264
00:13:06,880 --> 00:13:08,959
uh of you know

265
00:13:08,959 --> 00:13:11,680
publishing apps then please talk to me

266
00:13:11,680 --> 00:13:15,120
and i'll be happy to work with you on it

267
00:13:15,440 --> 00:13:18,320
so all these are different marketplaces

268
00:13:18,320 --> 00:13:20,480
and they have different guidelines

269
00:13:20,480 --> 00:13:22,880
the google play store has its own terms

270
00:13:22,880 --> 00:13:24,959
of service

271
00:13:24,959 --> 00:13:26,720
they only allow

272
00:13:26,720 --> 00:13:29,040
apps that are oops

273
00:13:29,040 --> 00:13:32,160
under 100 megabytes of download

274
00:13:32,160 --> 00:13:33,360
but

275
00:13:33,360 --> 00:13:36,800
they also uh allow you to upload

276
00:13:36,800 --> 00:13:38,320
obb

277
00:13:38,320 --> 00:13:41,360
files cache files um which are like for

278
00:13:41,360 --> 00:13:43,600
video games that are a thousand

279
00:13:43,600 --> 00:13:46,240
or like 900 megabytes or whatever

280
00:13:46,240 --> 00:13:49,199
you'll have the main apk file and then

281
00:13:49,199 --> 00:13:52,399
it'll load a cache file um you know into

282
00:13:52,399 --> 00:13:53,279
uh

283
00:13:53,279 --> 00:13:55,519
as you know in the into the runtime to

284
00:13:55,519 --> 00:13:56,880
to run the game

285
00:13:56,880 --> 00:13:59,600
um a lot of apps do this uh just any app

286
00:13:59,600 --> 00:14:02,000
that needs more than 100 megabytes to

287
00:14:02,000 --> 00:14:04,240
operate

288
00:14:04,240 --> 00:14:06,560
uh afterward has its own

289
00:14:06,560 --> 00:14:08,639
marketplace guidelines of course as i

290
00:14:08,639 --> 00:14:10,720
mentioned it's free and open source

291
00:14:10,720 --> 00:14:13,680
they also have this uh you know really

292
00:14:13,680 --> 00:14:16,399
stringent reliability requirement so

293
00:14:16,399 --> 00:14:17,199
that

294
00:14:17,199 --> 00:14:18,880
you know the apps that are built with

295
00:14:18,880 --> 00:14:21,199
their built system

296
00:14:21,199 --> 00:14:23,279
you know are going to reliably produce

297
00:14:23,279 --> 00:14:25,360
the same binary

298
00:14:25,360 --> 00:14:26,320
and

299
00:14:26,320 --> 00:14:27,920
that's a great assurance of the security

300
00:14:27,920 --> 00:14:28,800
of

301
00:14:28,800 --> 00:14:31,199
uh f droid apps

302
00:14:31,199 --> 00:14:32,959
but that's not necessarily the same way

303
00:14:32,959 --> 00:14:37,120
that uh any given f droid uh third party

304
00:14:37,120 --> 00:14:39,839
uh uh will operate so you said don't

305
00:14:39,839 --> 00:14:41,360
trust just because it's using after a

306
00:14:41,360 --> 00:14:42,959
protocol to publish their apps doesn't

307
00:14:42,959 --> 00:14:44,720
mean it's i'm talking about this

308
00:14:44,720 --> 00:14:48,720
specifically the f droid canonical repo

309
00:14:48,720 --> 00:14:49,839
finally

310
00:14:49,839 --> 00:14:53,199
we developed something at eff

311
00:14:53,199 --> 00:14:55,920
called ap keep and this is a piece of

312
00:14:55,920 --> 00:14:57,040
software

313
00:14:57,040 --> 00:14:59,920
that pretty much supports all of the

314
00:14:59,920 --> 00:15:01,839
things that i've mentioned

315
00:15:01,839 --> 00:15:04,000
into one

316
00:15:04,000 --> 00:15:06,639
command line application for

317
00:15:06,639 --> 00:15:08,560
uh for you know

318
00:15:08,560 --> 00:15:10,720
using this in a script or downloading

319
00:15:10,720 --> 00:15:14,320
apps from various places

320
00:15:14,320 --> 00:15:17,279
it doesn't support apk mirror but

321
00:15:17,279 --> 00:15:20,399
everything else i mentioned it supports

322
00:15:20,399 --> 00:15:21,920
so it's a command line tool as i

323
00:15:21,920 --> 00:15:23,760
mentioned

324
00:15:23,760 --> 00:15:24,880
and

325
00:15:24,880 --> 00:15:28,000
it allows batch downloading of different

326
00:15:28,000 --> 00:15:31,040
uh different apps so you can provide a

327
00:15:31,040 --> 00:15:32,240
csv

328
00:15:32,240 --> 00:15:33,519
and

329
00:15:33,519 --> 00:15:34,639
you know

330
00:15:34,639 --> 00:15:36,800
say i want to download this column of

331
00:15:36,800 --> 00:15:38,560
the csv

332
00:15:38,560 --> 00:15:41,040
and each one of these is an app id

333
00:15:41,040 --> 00:15:42,560
and it'll just go and download the

334
00:15:42,560 --> 00:15:45,279
entire thing um of course there's some

335
00:15:45,279 --> 00:15:48,720
throttling mechanisms at play sometimes

336
00:15:48,720 --> 00:15:49,440
so

337
00:15:49,440 --> 00:15:50,880
you know you can download apps in

338
00:15:50,880 --> 00:15:53,199
parallel with it

339
00:15:53,199 --> 00:15:55,920
but you can also introduce a delay

340
00:15:55,920 --> 00:15:58,720
between each download

341
00:15:58,720 --> 00:16:01,040
so you don't get throttled by say the

342
00:16:01,040 --> 00:16:04,480
google play store

343
00:16:06,480 --> 00:16:10,079
it's also written in asynchronous rust

344
00:16:10,079 --> 00:16:10,880
and

345
00:16:10,880 --> 00:16:12,959
it prioritizes memory safety thread

346
00:16:12,959 --> 00:16:16,399
safety and speed so it's a

347
00:16:16,399 --> 00:16:18,000
a really good tool and i think you all

348
00:16:18,000 --> 00:16:19,759
should use it

349
00:16:19,759 --> 00:16:20,560
just

350
00:16:20,560 --> 00:16:23,600
you know just my bias opinion

351
00:16:23,600 --> 00:16:26,160
i wrote it by the way

352
00:16:26,160 --> 00:16:27,360
um

353
00:16:27,360 --> 00:16:30,000
so uh just a kind of quick note on the

354
00:16:30,000 --> 00:16:32,959
android activity life cycle um here's a

355
00:16:32,959 --> 00:16:34,240
kind of diagram i'm not sure if you

356
00:16:34,240 --> 00:16:35,839
could see that if we could maybe bring

357
00:16:35,839 --> 00:16:38,000
that up full screen

358
00:16:38,000 --> 00:16:40,959
so there's various kind of stages of an

359
00:16:40,959 --> 00:16:44,160
android app and on any given point of

360
00:16:44,160 --> 00:16:46,639
time then you'll be you know a pause

361
00:16:46,639 --> 00:16:48,639
process or

362
00:16:48,639 --> 00:16:51,759
you know you have a recreate kind of uh

363
00:16:51,759 --> 00:16:54,240
method that's provided um

364
00:16:54,240 --> 00:16:56,240
uh for for

365
00:16:56,240 --> 00:16:58,399
you know an app um when it's at a

366
00:16:58,399 --> 00:17:01,440
certain stage in its in its life cycle

367
00:17:01,440 --> 00:17:02,399
um

368
00:17:02,399 --> 00:17:05,398
so

369
00:17:05,919 --> 00:17:08,079
so kind of getting into like analyzing

370
00:17:08,079 --> 00:17:12,160
app behavior and how do we go about that

371
00:17:12,160 --> 00:17:13,919
well there's two ways i mean and this

372
00:17:13,919 --> 00:17:15,199
kind of mirrors

373
00:17:15,199 --> 00:17:18,160
uh doing analysis on apps in general and

374
00:17:18,160 --> 00:17:21,039
not necessarily just android apps but

375
00:17:21,039 --> 00:17:22,000
you can

376
00:17:22,000 --> 00:17:25,119
use static analysis and that involves

377
00:17:25,119 --> 00:17:26,799
actually downloading the app having it

378
00:17:26,799 --> 00:17:28,400
locally

379
00:17:28,400 --> 00:17:31,120
and inspecting the app files

380
00:17:31,120 --> 00:17:33,039
seeing you know the looking at the

381
00:17:33,039 --> 00:17:35,039
android manifest file

382
00:17:35,039 --> 00:17:39,039
uh reversing uh the code um either

383
00:17:39,039 --> 00:17:39,919
by

384
00:17:39,919 --> 00:17:42,480
decompilation or disassembly

385
00:17:42,480 --> 00:17:43,919
and this is called this process is

386
00:17:43,919 --> 00:17:46,320
called back smalling

387
00:17:46,320 --> 00:17:47,760
because

388
00:17:47,760 --> 00:17:50,160
the the uh

389
00:17:50,160 --> 00:17:52,160
dalvik bytecode representation is called

390
00:17:52,160 --> 00:17:55,600
smally um so it's like backing it into

391
00:17:55,600 --> 00:17:57,120
smalley code

392
00:17:57,120 --> 00:17:58,640
at least that's what i think of it as

393
00:17:58,640 --> 00:18:00,080
i'm not sure if that's the actual

394
00:18:00,080 --> 00:18:01,679
etymology but

395
00:18:01,679 --> 00:18:04,240
um and then there's a you know dynamic

396
00:18:04,240 --> 00:18:05,840
code analysis right

397
00:18:05,840 --> 00:18:07,840
so there's downloading the app uh

398
00:18:07,840 --> 00:18:10,000
installing it and seeing what it does

399
00:18:10,000 --> 00:18:12,480
observing the behavior of an app

400
00:18:12,480 --> 00:18:15,520
and you can do that in various ways um

401
00:18:15,520 --> 00:18:17,600
you know you can look at the syscalls

402
00:18:17,600 --> 00:18:20,160
that it performs you can look at the you

403
00:18:20,160 --> 00:18:22,960
know uh logs the system logs

404
00:18:22,960 --> 00:18:23,840
um

405
00:18:23,840 --> 00:18:25,600
but yeah you should probably use a

406
00:18:25,600 --> 00:18:29,440
sandbox if it's malicious code um

407
00:18:29,440 --> 00:18:31,039
and

408
00:18:31,039 --> 00:18:33,600
you know although like from a reverser's

409
00:18:33,600 --> 00:18:34,799
perspective

410
00:18:34,799 --> 00:18:38,160
you know a piece of malware might seem

411
00:18:38,160 --> 00:18:40,400
like a legitimate or sorry a piece of

412
00:18:40,400 --> 00:18:42,400
malware and a legitimate app

413
00:18:42,400 --> 00:18:44,480
on the play store you can download um

414
00:18:44,480 --> 00:18:46,480
you know through legitimate means may

415
00:18:46,480 --> 00:18:50,080
seem different but um from an analytical

416
00:18:50,080 --> 00:18:51,520
you know perspective

417
00:18:51,520 --> 00:18:54,080
it's just the same it's uh you know

418
00:18:54,080 --> 00:18:57,280
looking at the behavior of of an app

419
00:18:57,280 --> 00:19:00,640
using various tools

420
00:19:00,640 --> 00:19:03,280
and um yeah you should use a sandbox if

421
00:19:03,280 --> 00:19:04,000
you're

422
00:19:04,000 --> 00:19:06,640
if you're uh analyzing malware because

423
00:19:06,640 --> 00:19:08,480
it's not safe to do so

424
00:19:08,480 --> 00:19:11,520
um you know on on just your regular

425
00:19:11,520 --> 00:19:13,918
device

426
00:19:15,200 --> 00:19:17,760
so firstly we'll kind of

427
00:19:17,760 --> 00:19:19,760
run through an analysis

428
00:19:19,760 --> 00:19:21,400
right like looking at the

429
00:19:21,400 --> 00:19:23,760
androidmanifest.xml file which is a top

430
00:19:23,760 --> 00:19:25,840
level file that's available in any

431
00:19:25,840 --> 00:19:27,280
package

432
00:19:27,280 --> 00:19:29,200
that will

433
00:19:29,200 --> 00:19:31,520
you know define what permissions an app

434
00:19:31,520 --> 00:19:32,960
is allowed to

435
00:19:32,960 --> 00:19:34,160
to

436
00:19:34,160 --> 00:19:36,559
you know access

437
00:19:36,559 --> 00:19:38,320
it'll define different pieces of

438
00:19:38,320 --> 00:19:40,000
hardware that that

439
00:19:40,000 --> 00:19:44,080
that that app can can use

440
00:19:44,080 --> 00:19:46,799
services and it'll also define the list

441
00:19:46,799 --> 00:19:50,000
of provided activities or screens

442
00:19:50,000 --> 00:19:52,200
activities and screens are just kind of

443
00:19:52,200 --> 00:19:54,960
semi-the same concept within

444
00:19:54,960 --> 00:19:56,880
android um

445
00:19:56,880 --> 00:19:58,880
so different uh activities will be

446
00:19:58,880 --> 00:20:01,120
defined and those activities will have

447
00:20:01,120 --> 00:20:03,679
an id of their own and only those

448
00:20:03,679 --> 00:20:07,840
activities can be run by the app

449
00:20:08,480 --> 00:20:11,679
so this is super tiny text but

450
00:20:11,679 --> 00:20:14,240
this is the app manifest of the

451
00:20:14,240 --> 00:20:16,559
instagram app

452
00:20:16,559 --> 00:20:18,480
and you'll see you know various

453
00:20:18,480 --> 00:20:21,440
permissions that it's allowed to

454
00:20:21,440 --> 00:20:24,640
to use and different screens and and uh

455
00:20:24,640 --> 00:20:27,039
so on you know um it'll even have this

456
00:20:27,039 --> 00:20:28,880
was not one that was

457
00:20:28,880 --> 00:20:29,919
uh

458
00:20:29,919 --> 00:20:32,080
provided by the huawei app gallery but

459
00:20:32,080 --> 00:20:35,520
there's a huawei specific permission

460
00:20:35,520 --> 00:20:37,120
in there as well this was one that was

461
00:20:37,120 --> 00:20:40,399
downloaded from google play

462
00:20:41,520 --> 00:20:45,360
so using static analysis we can use

463
00:20:45,360 --> 00:20:46,840
this tool called

464
00:20:46,840 --> 00:20:50,720
jdx i think it's pronounced jadex

465
00:20:50,720 --> 00:20:53,919
it's a decompilation tool so it turns an

466
00:20:53,919 --> 00:20:56,000
apk into

467
00:20:56,000 --> 00:20:57,520
the java

468
00:20:57,520 --> 00:20:58,640
that

469
00:20:58,640 --> 00:21:00,799
an approximation of the java that it was

470
00:21:00,799 --> 00:21:03,039
actually written in the first place um

471
00:21:03,039 --> 00:21:04,720
of course this sum is lost in

472
00:21:04,720 --> 00:21:06,880
translation right you're not going to if

473
00:21:06,880 --> 00:21:09,520
you've you know reversed or you have um

474
00:21:09,520 --> 00:21:10,880
you know debugging symbols that have

475
00:21:10,880 --> 00:21:13,200
been stripped from a binary you're not

476
00:21:13,200 --> 00:21:16,480
going to have you know the same names of

477
00:21:16,480 --> 00:21:19,520
things as you had in the original code

478
00:21:19,520 --> 00:21:22,240
but it turns it into something pretty uh

479
00:21:22,240 --> 00:21:23,360
readable

480
00:21:23,360 --> 00:21:26,320
so the cons is that it's error-prone

481
00:21:26,320 --> 00:21:29,039
you'll have a lot of times where

482
00:21:29,039 --> 00:21:33,440
there's pieces of the code that can't be

483
00:21:33,440 --> 00:21:37,039
decompiled back into the original java

484
00:21:37,039 --> 00:21:38,000
so that's

485
00:21:38,000 --> 00:21:40,080
one big con

486
00:21:40,080 --> 00:21:42,880
it also can't be recompiled back into

487
00:21:42,880 --> 00:21:46,240
the apk once you change your modified

488
00:21:46,240 --> 00:21:49,360
aspects of that app

489
00:21:49,360 --> 00:21:51,600
pros it's actually readable as i said

490
00:21:51,600 --> 00:21:53,120
before

491
00:21:53,120 --> 00:21:56,000
we'll give an example here and this is

492
00:21:56,000 --> 00:21:57,919
an example of a piece of malware that i

493
00:21:57,919 --> 00:22:01,120
looked at a few months ago and

494
00:22:01,120 --> 00:22:03,600
you can see like stop tor and update

495
00:22:03,600 --> 00:22:06,559
status and is tor disconnected these are

496
00:22:06,559 --> 00:22:08,159
like you can actually follow the code

497
00:22:08,159 --> 00:22:10,400
somewhat and a lot of it is jumbled but

498
00:22:10,400 --> 00:22:12,720
you can kind of get the general gist of

499
00:22:12,720 --> 00:22:16,000
things just by looking at it

500
00:22:17,679 --> 00:22:19,919
here's an example of you know how it's

501
00:22:19,919 --> 00:22:21,919
error prone there's these huge code

502
00:22:21,919 --> 00:22:23,919
blocks that are commented out because it

503
00:22:23,919 --> 00:22:26,400
just says it straight up jdx

504
00:22:26,400 --> 00:22:27,360
couldn't

505
00:22:27,360 --> 00:22:30,320
decompile this had some trouble

506
00:22:30,320 --> 00:22:32,640
here's what the original dell the bit

507
00:22:32,640 --> 00:22:35,600
code looks like

508
00:22:37,520 --> 00:22:40,159
so there's other tools that are equally

509
00:22:40,159 --> 00:22:42,960
as useful in static analysis one is

510
00:22:42,960 --> 00:22:45,760
called apk tool

511
00:22:45,760 --> 00:22:47,760
this is a tool which reverses

512
00:22:47,760 --> 00:22:49,520
android into

513
00:22:49,520 --> 00:22:50,480
its

514
00:22:50,480 --> 00:22:53,840
delve bit code equivalent smalley

515
00:22:53,840 --> 00:22:55,840
it's a representation of that that bit

516
00:22:55,840 --> 00:22:57,039
code

517
00:22:57,039 --> 00:22:58,000
and

518
00:22:58,000 --> 00:22:59,600
some of the pros of using something like

519
00:22:59,600 --> 00:23:01,679
apk tool

520
00:23:01,679 --> 00:23:04,240
space d which

521
00:23:04,240 --> 00:23:05,679
you know

522
00:23:05,679 --> 00:23:09,120
reverses it which uh d d

523
00:23:09,120 --> 00:23:10,400
unpacks it

524
00:23:10,400 --> 00:23:12,159
is um

525
00:23:12,159 --> 00:23:13,679
it's an extremely accurate

526
00:23:13,679 --> 00:23:16,240
representation of the original bit code

527
00:23:16,240 --> 00:23:20,320
that is contained in the apk

528
00:23:20,320 --> 00:23:22,559
and it can be rebuilt

529
00:23:22,559 --> 00:23:23,360
uh

530
00:23:23,360 --> 00:23:24,400
always

531
00:23:24,400 --> 00:23:25,520
unless you've

532
00:23:25,520 --> 00:23:26,880
you know introduced a coding error or

533
00:23:26,880 --> 00:23:29,600
something uh it can be or a syntax error

534
00:23:29,600 --> 00:23:32,080
i should say it could be rebuilt into a

535
00:23:32,080 --> 00:23:35,199
running apk again

536
00:23:35,440 --> 00:23:36,880
um

537
00:23:36,880 --> 00:23:39,760
oops cons

538
00:23:39,760 --> 00:23:41,679
it's nearly unreadable

539
00:23:41,679 --> 00:23:44,640
um you don't want to look at something

540
00:23:44,640 --> 00:23:46,559
like this if you're trying to figure out

541
00:23:46,559 --> 00:23:49,200
what it's actually doing

542
00:23:49,200 --> 00:23:51,440
it's not really something that you

543
00:23:51,440 --> 00:23:54,960
has an enjoyable place to be in

544
00:23:55,520 --> 00:23:59,120
but you can use these two tools in

545
00:23:59,120 --> 00:24:00,640
combination

546
00:24:00,640 --> 00:24:05,080
to do some really interesting things

547
00:24:06,720 --> 00:24:08,320
so if you want to figure out what a

548
00:24:08,320 --> 00:24:10,640
piece of code is doing

549
00:24:10,640 --> 00:24:14,480
then the methodology is to first use jdx

550
00:24:14,480 --> 00:24:16,880
to identify an interesting piece an

551
00:24:16,880 --> 00:24:18,400
interesting you know place in the code

552
00:24:18,400 --> 00:24:21,600
where you want to look deeper

553
00:24:21,600 --> 00:24:23,679
and then identify where

554
00:24:23,679 --> 00:24:26,080
that same place is in the small e code

555
00:24:26,080 --> 00:24:26,960
so

556
00:24:26,960 --> 00:24:29,520
the file structure will be roughly

557
00:24:29,520 --> 00:24:33,600
similar when you decompile uh using jdex

558
00:24:33,600 --> 00:24:36,240
or backsomali using

559
00:24:36,240 --> 00:24:38,480
apk tool and so you can kind of look

560
00:24:38,480 --> 00:24:41,200
there and trace it back into

561
00:24:41,200 --> 00:24:43,520
like where is the roughly equivalent

562
00:24:43,520 --> 00:24:45,679
spot where you're going to see um you

563
00:24:45,679 --> 00:24:47,600
know this is exact the exact line and

564
00:24:47,600 --> 00:24:49,679
sometimes it actually has an apk tool

565
00:24:49,679 --> 00:24:53,120
like dot line 80 um so you can see kind

566
00:24:53,120 --> 00:24:55,760
of where in the original code uh you're

567
00:24:55,760 --> 00:24:57,520
looking at

568
00:24:57,520 --> 00:24:59,600
um and then you can add a debugging

569
00:24:59,600 --> 00:25:02,080
statement or modify the behavior in the

570
00:25:02,080 --> 00:25:04,480
backsmally code

571
00:25:04,480 --> 00:25:08,080
and then rebuild it with apk tool b

572
00:25:08,080 --> 00:25:10,880
which builds it back into the apk that

573
00:25:10,880 --> 00:25:14,400
you want to be analyzing

574
00:25:14,400 --> 00:25:16,720
and then if you want to

575
00:25:16,720 --> 00:25:19,120
look at it again look at a similar place

576
00:25:19,120 --> 00:25:20,880
in the code

577
00:25:20,880 --> 00:25:22,720
you know change other behaviors then you

578
00:25:22,720 --> 00:25:25,760
just repeat this process

579
00:25:26,960 --> 00:25:29,039
um so yeah that's you know using those

580
00:25:29,039 --> 00:25:30,880
two tools in combination uh can we

581
00:25:30,880 --> 00:25:32,480
provide a pretty powerful

582
00:25:32,480 --> 00:25:34,799
methodology for your reversing

583
00:25:34,799 --> 00:25:38,240
there's also some other useful tools um

584
00:25:38,240 --> 00:25:39,520
uh

585
00:25:39,520 --> 00:25:40,240
well

586
00:25:40,240 --> 00:25:41,360
to go back

587
00:25:41,360 --> 00:25:44,159
this run rinse repeat process

588
00:25:44,159 --> 00:25:45,679
um

589
00:25:45,679 --> 00:25:47,840
you know includes the word run

590
00:25:47,840 --> 00:25:50,960
so it's not purely a static analysis

591
00:25:50,960 --> 00:25:53,440
combo so i cheated a bit because it does

592
00:25:53,440 --> 00:25:57,120
involve some dynamic analysis and so

593
00:25:57,120 --> 00:25:58,080
when you're

594
00:25:58,080 --> 00:26:00,159
introducing a debugging statement then

595
00:26:00,159 --> 00:26:02,000
you could use adb

596
00:26:02,000 --> 00:26:04,640
logcat and then use the

597
00:26:04,640 --> 00:26:06,000
pid

598
00:26:06,000 --> 00:26:06,960
option

599
00:26:06,960 --> 00:26:09,279
to see where the system logs are

600
00:26:09,279 --> 00:26:11,520
spitting that bit of debugging

601
00:26:11,520 --> 00:26:14,000
information that you've introduced

602
00:26:14,000 --> 00:26:16,159
it all also gives you some interesting

603
00:26:16,159 --> 00:26:18,000
things like the loading of a dynamic

604
00:26:18,000 --> 00:26:20,480
loading of dex classes

605
00:26:20,480 --> 00:26:21,919
which

606
00:26:21,919 --> 00:26:22,840
you know

607
00:26:22,840 --> 00:26:26,080
is basically a file that

608
00:26:26,080 --> 00:26:28,240
is compiled so that the

609
00:26:28,240 --> 00:26:30,960
uh architecture that you're running on

610
00:26:30,960 --> 00:26:33,360
it can basically be

611
00:26:33,360 --> 00:26:34,880
an oat

612
00:26:34,880 --> 00:26:37,600
is running directly on the cpu it's not

613
00:26:37,600 --> 00:26:39,200
running on the

614
00:26:39,200 --> 00:26:42,000
on the java

615
00:26:43,679 --> 00:26:45,440
level it's just basically running

616
00:26:45,440 --> 00:26:47,440
directly on the cpu and when you run a

617
00:26:47,440 --> 00:26:49,440
dex to out

618
00:26:49,440 --> 00:26:52,080
then that's something that is taking

619
00:26:52,080 --> 00:26:54,799
java classes and making it interpretable

620
00:26:54,799 --> 00:26:57,679
by the cpu to run and that's uh

621
00:26:57,679 --> 00:27:00,720
sometimes interesting to look at

622
00:27:00,720 --> 00:27:01,760
so

623
00:27:01,760 --> 00:27:05,520
you can also use s trees on the android

624
00:27:05,520 --> 00:27:06,720
platform

625
00:27:06,720 --> 00:27:10,159
and this is useful uh in cases where you

626
00:27:10,159 --> 00:27:12,480
have a piece of malware for instance

627
00:27:12,480 --> 00:27:15,120
that's calling like an unlink to delete

628
00:27:15,120 --> 00:27:16,240
a file

629
00:27:16,240 --> 00:27:19,520
or raw file io or

630
00:27:19,520 --> 00:27:23,360
raw network io that you want to see

631
00:27:25,840 --> 00:27:27,440
and finally

632
00:27:27,440 --> 00:27:30,159
there's something called frida which is

633
00:27:30,159 --> 00:27:32,640
completely awesome

634
00:27:32,640 --> 00:27:36,000
so a lot of dynamic analysis involves

635
00:27:36,000 --> 00:27:38,240
both control and observation

636
00:27:38,240 --> 00:27:39,120
and

637
00:27:39,120 --> 00:27:42,000
the control part of this equation is

638
00:27:42,000 --> 00:27:44,480
done by frida it's

639
00:27:44,480 --> 00:27:46,960
an instrumentation toolbox which allows

640
00:27:46,960 --> 00:27:49,120
you to change running code

641
00:27:49,120 --> 00:27:52,000
as it's running um and introduce scripts

642
00:27:52,000 --> 00:27:53,600
if you've ever used grease monkey in the

643
00:27:53,600 --> 00:27:55,520
past um

644
00:27:55,520 --> 00:27:58,000
it was this awesome thing back in the

645
00:27:58,000 --> 00:28:00,000
day which allowed you to just kind of

646
00:28:00,000 --> 00:28:02,799
you know say hey here's a javascript a

647
00:28:02,799 --> 00:28:04,080
bit of javascript that i want to drop

648
00:28:04,080 --> 00:28:05,840
into this webpage to

649
00:28:05,840 --> 00:28:08,080
oh i don't know say like um

650
00:28:08,080 --> 00:28:10,640
circumvent the new york times is a

651
00:28:10,640 --> 00:28:12,480
paywall or something like that

652
00:28:12,480 --> 00:28:14,159
and you can just kind of erase some

653
00:28:14,159 --> 00:28:17,360
elements and then you know have that js

654
00:28:17,360 --> 00:28:20,080
run every time in the web page

655
00:28:20,080 --> 00:28:22,159
this is kind of similar you can use

656
00:28:22,159 --> 00:28:25,039
frida to run scripts

657
00:28:25,039 --> 00:28:28,799
that modify the java behavior within a

658
00:28:28,799 --> 00:28:30,720
running app so it's a really powerful

659
00:28:30,720 --> 00:28:32,320
awesome tool

660
00:28:32,320 --> 00:28:35,679
to insert code into running processes

661
00:28:35,679 --> 00:28:38,080
for instance you can make it auto accept

662
00:28:38,080 --> 00:28:41,200
forged certificates as well

663
00:28:41,200 --> 00:28:43,679
or block the unlink command that deletes

664
00:28:43,679 --> 00:28:47,919
files from the android system

665
00:28:50,159 --> 00:28:53,679
so in this equation the observation part

666
00:28:53,679 --> 00:28:55,360
can be for instance men in the middle

667
00:28:55,360 --> 00:28:56,399
proxy

668
00:28:56,399 --> 00:28:59,279
and mitm proxy

669
00:28:59,279 --> 00:29:02,080
generates a forged certificate um and

670
00:29:02,080 --> 00:29:04,320
then you're supposed to you know install

671
00:29:04,320 --> 00:29:06,320
that for certificate on the host

672
00:29:06,320 --> 00:29:07,520
platform

673
00:29:07,520 --> 00:29:08,880
and

674
00:29:08,880 --> 00:29:09,760
then

675
00:29:09,760 --> 00:29:12,399
it'll just accept that and

676
00:29:12,399 --> 00:29:16,240
you have you know ssl encrypted traffic

677
00:29:16,240 --> 00:29:19,279
that is observable

678
00:29:19,279 --> 00:29:22,480
so using afrida script you can

679
00:29:22,480 --> 00:29:24,320
basically have it accept all search that

680
00:29:24,320 --> 00:29:24,960
are

681
00:29:24,960 --> 00:29:28,799
introduced and um we did this

682
00:29:28,799 --> 00:29:30,320
with

683
00:29:30,320 --> 00:29:31,360
uh

684
00:29:31,360 --> 00:29:33,440
the ring doorbell app

685
00:29:33,440 --> 00:29:36,399
and found a bunch of third parties that

686
00:29:36,399 --> 00:29:37,679
were loaded

687
00:29:37,679 --> 00:29:38,720
into

688
00:29:38,720 --> 00:29:41,840
the ring doorbell app

689
00:29:45,760 --> 00:29:47,760
into the ring doorbell app

690
00:29:47,760 --> 00:29:50,159
and here's an example of for instance

691
00:29:50,159 --> 00:29:51,919
what we found we found

692
00:29:51,919 --> 00:29:53,600
a lot of information that was just being

693
00:29:53,600 --> 00:29:55,120
relayed to third parties i'll go into

694
00:29:55,120 --> 00:29:57,678
that in a minute

695
00:29:58,880 --> 00:30:00,480
so bringing

696
00:30:00,480 --> 00:30:02,720
it all together you can use static

697
00:30:02,720 --> 00:30:05,120
analysis to look at the code paths

698
00:30:05,120 --> 00:30:07,600
enumerate the code as best you can try

699
00:30:07,600 --> 00:30:09,360
to figure out what's happening in the

700
00:30:09,360 --> 00:30:10,960
app and then you can use dynamic

701
00:30:10,960 --> 00:30:13,679
analysis with frida to change

702
00:30:13,679 --> 00:30:16,000
functionality mock out certain functions

703
00:30:16,000 --> 00:30:17,440
do things that are that it's not meant

704
00:30:17,440 --> 00:30:20,080
to do and observe the behavior um once

705
00:30:20,080 --> 00:30:22,159
you once you do that you know say

706
00:30:22,159 --> 00:30:24,399
introduce a lot more debugging code uh

707
00:30:24,399 --> 00:30:26,399
look at what what's there

708
00:30:26,399 --> 00:30:29,120
um and you can use stack analysis again

709
00:30:29,120 --> 00:30:32,480
if you get to a stage two payload uh in

710
00:30:32,480 --> 00:30:36,399
in a android app something that's deeper

711
00:30:36,399 --> 00:30:37,919
and buried deeper in the code that you

712
00:30:37,919 --> 00:30:39,039
want to

713
00:30:39,039 --> 00:30:42,480
uh reverse itself

714
00:30:44,159 --> 00:30:45,120
so

715
00:30:45,120 --> 00:30:47,360
um a few months ago i was interested in

716
00:30:47,360 --> 00:30:50,880
looking at this tor hydra malware

717
00:30:50,880 --> 00:30:53,120
it's a class of malware

718
00:30:53,120 --> 00:30:54,320
and

719
00:30:54,320 --> 00:30:57,200
it's modified its behavior somewhat but

720
00:30:57,200 --> 00:30:59,760
the basic gist of it is that

721
00:30:59,760 --> 00:31:01,440
it

722
00:31:01,440 --> 00:31:05,360
kind of masquerades as banking software

723
00:31:05,360 --> 00:31:08,559
and uses accessibility features that are

724
00:31:08,559 --> 00:31:11,760
in android to gain a lower level of

725
00:31:11,760 --> 00:31:15,600
control over the operating system

726
00:31:15,600 --> 00:31:17,600
accessibility permissions

727
00:31:17,600 --> 00:31:20,000
allow apps to

728
00:31:20,000 --> 00:31:22,080
install other apps

729
00:31:22,080 --> 00:31:24,080
control and

730
00:31:24,080 --> 00:31:25,360
and read

731
00:31:25,360 --> 00:31:27,440
the screen

732
00:31:27,440 --> 00:31:29,679
you know introduce keystrokes it's very

733
00:31:29,679 --> 00:31:31,519
powerful permission that shouldn't be

734
00:31:31,519 --> 00:31:33,600
taken lightly um

735
00:31:33,600 --> 00:31:35,440
and it's mostly for

736
00:31:35,440 --> 00:31:37,600
folks that are disabled that need

737
00:31:37,600 --> 00:31:40,399
those permissions need that kind of

738
00:31:40,399 --> 00:31:42,159
help with

739
00:31:42,159 --> 00:31:44,240
with uh various aspects of their mobile

740
00:31:44,240 --> 00:31:46,720
experience

741
00:31:46,720 --> 00:31:49,760
but this piece of malware

742
00:31:49,760 --> 00:31:51,840
which can be found on malware bazaar

743
00:31:51,840 --> 00:31:53,279
that's where a lot of it can be found

744
00:31:53,279 --> 00:31:56,640
it's a really useful tool in downloading

745
00:31:56,640 --> 00:31:58,559
you can also find a lot of these things

746
00:31:58,559 --> 00:31:59,279
on

747
00:31:59,279 --> 00:32:01,360
virustotal for instance different

748
00:32:01,360 --> 00:32:03,279
samples so this is getting kind of the

749
00:32:03,279 --> 00:32:06,960
primary material of study right

750
00:32:07,519 --> 00:32:08,640
and this is what it looks like the

751
00:32:08,640 --> 00:32:10,080
interaction here

752
00:32:10,080 --> 00:32:11,279
so

753
00:32:11,279 --> 00:32:12,799
you click on the app which is the top

754
00:32:12,799 --> 00:32:15,360
left icon here

755
00:32:15,360 --> 00:32:18,960
i apologize for the slowness

756
00:32:18,960 --> 00:32:21,360
and so it opens this thing that says hey

757
00:32:21,360 --> 00:32:22,720
i'm your bank

758
00:32:22,720 --> 00:32:26,000
by the way i need this permission

759
00:32:26,840 --> 00:32:28,399
and

760
00:32:28,399 --> 00:32:30,240
so it asks for this accessibility

761
00:32:30,240 --> 00:32:32,720
permission

762
00:32:35,840 --> 00:32:39,279
and then when you go and grant it

763
00:32:41,120 --> 00:32:42,480
there's a bunch of stuff that

764
00:32:42,480 --> 00:32:45,519
automatically happens

765
00:32:47,120 --> 00:32:49,360
very quickly

766
00:32:49,360 --> 00:32:51,919
because it now has access to a very low

767
00:32:51,919 --> 00:32:53,919
level of your operating system and can

768
00:32:53,919 --> 00:32:56,640
install things and do things that are

769
00:32:56,640 --> 00:32:59,039
shady

770
00:33:01,200 --> 00:33:02,640
i'm not sure if we're at the loop point

771
00:33:02,640 --> 00:33:04,799
yet

772
00:33:06,720 --> 00:33:07,760
so

773
00:33:07,760 --> 00:33:09,519
we wanted to study this malware and see

774
00:33:09,519 --> 00:33:11,840
what it was doing

775
00:33:11,840 --> 00:33:13,960
first step was looking at the

776
00:33:13,960 --> 00:33:17,279
androidmanifest.xml file

777
00:33:17,279 --> 00:33:18,240
that was

778
00:33:18,240 --> 00:33:20,480
pretty interesting as i said it had the

779
00:33:20,480 --> 00:33:21,679
ability to

780
00:33:21,679 --> 00:33:23,679
read and send sms messages that

781
00:33:23,679 --> 00:33:25,919
propagates that's a way that it's common

782
00:33:25,919 --> 00:33:28,240
for malware to propagate itself sending

783
00:33:28,240 --> 00:33:29,279
your

784
00:33:29,279 --> 00:33:32,080
sms messages to your contacts it can

785
00:33:32,080 --> 00:33:35,279
itself install and delete packages that

786
00:33:35,279 --> 00:33:37,360
that you've installed so if you want to

787
00:33:37,360 --> 00:33:39,039
get rid of it if you have some antivirus

788
00:33:39,039 --> 00:33:40,720
software that can possibly get rid of

789
00:33:40,720 --> 00:33:42,880
this malware i can uninstall that

790
00:33:42,880 --> 00:33:44,720
uh read contact so it can propagate

791
00:33:44,720 --> 00:33:47,200
better with the sms messages that it

792
00:33:47,200 --> 00:33:50,320
is allowed to send and initiate calls a

793
00:33:50,320 --> 00:33:53,039
lot of permissions that should raise

794
00:33:53,039 --> 00:33:55,120
some eyebrows if you're installing

795
00:33:55,120 --> 00:33:57,200
anything

796
00:33:57,200 --> 00:33:58,080
and

797
00:33:58,080 --> 00:33:59,679
and you know as i said the accessibility

798
00:33:59,679 --> 00:34:02,080
service

799
00:34:02,960 --> 00:34:04,399
interestingly

800
00:34:04,399 --> 00:34:06,399
look at all these permissions

801
00:34:06,399 --> 00:34:09,280
sorry this is a list of uh the the

802
00:34:09,280 --> 00:34:13,040
activities the screens that this is

803
00:34:13,040 --> 00:34:15,359
allowed to run

804
00:34:15,359 --> 00:34:16,560
but

805
00:34:16,560 --> 00:34:18,040
if you look at these

806
00:34:18,040 --> 00:34:21,679
com.omb th whatever

807
00:34:21,679 --> 00:34:24,960
that is not present in the reversed code

808
00:34:24,960 --> 00:34:27,679
that specific code path does not exist

809
00:34:27,679 --> 00:34:29,599
so it's asking

810
00:34:29,599 --> 00:34:32,000
for permission to run something that it

811
00:34:32,000 --> 00:34:34,159
doesn't have

812
00:34:34,159 --> 00:34:37,599
in its reverse code so it's doing

813
00:34:37,599 --> 00:34:39,520
something it's actually

814
00:34:39,520 --> 00:34:42,399
trying to dynamically load java classes

815
00:34:42,399 --> 00:34:43,599
in order to

816
00:34:43,599 --> 00:34:46,560
you know at runtime in order to

817
00:34:46,560 --> 00:34:48,239
run something else it's some it's

818
00:34:48,239 --> 00:34:49,199
basically

819
00:34:49,199 --> 00:34:51,199
uh deeper level of code than is

820
00:34:51,199 --> 00:34:54,960
presented uh when it is first installed

821
00:34:54,960 --> 00:34:55,679
so

822
00:34:55,679 --> 00:34:59,119
what you find is that

823
00:34:59,760 --> 00:35:02,160
you want to find where this is

824
00:35:02,160 --> 00:35:04,800
dynamically loaded from so you can use

825
00:35:04,800 --> 00:35:07,200
frida and previous

826
00:35:07,200 --> 00:35:09,839
iterations of the tor hydra malware by

827
00:35:09,839 --> 00:35:11,680
the way it's it's we'll go and get into

828
00:35:11,680 --> 00:35:13,760
why it's called tor hydra

829
00:35:13,760 --> 00:35:16,400
it uses the tor network but

830
00:35:16,400 --> 00:35:17,280
the

831
00:35:17,280 --> 00:35:20,400
previous iterations of the tor

832
00:35:20,400 --> 00:35:24,240
hydra malware used an unlink syscall in

833
00:35:24,240 --> 00:35:25,680
order to delete

834
00:35:25,680 --> 00:35:30,400
a apk that loaded a bunch of new classes

835
00:35:30,400 --> 00:35:33,520
into the runtime environment

836
00:35:33,520 --> 00:35:36,720
i did not detect that happening but what

837
00:35:36,720 --> 00:35:38,800
i did see is that

838
00:35:38,800 --> 00:35:40,079
if you look at the

839
00:35:40,079 --> 00:35:42,839
frida code on the

840
00:35:42,839 --> 00:35:46,000
left i was trying to figure out

841
00:35:46,000 --> 00:35:47,920
if it was just you know

842
00:35:47,920 --> 00:35:49,760
loading um

843
00:35:49,760 --> 00:35:51,839
you know dynamically loading classes or

844
00:35:51,839 --> 00:35:52,720
not

845
00:35:52,720 --> 00:35:55,440
and what i found is that

846
00:35:55,440 --> 00:35:57,520
using the script on the left

847
00:35:57,520 --> 00:35:59,599
and running it frida's output says that

848
00:35:59,599 --> 00:36:02,160
there's a bunch of different

849
00:36:02,160 --> 00:36:04,560
classes that are dynamically loaded

850
00:36:04,560 --> 00:36:07,920
when the app is first run

851
00:36:09,760 --> 00:36:12,079
and so where are these java classes

852
00:36:12,079 --> 00:36:13,599
coming from

853
00:36:13,599 --> 00:36:16,800
is it an instance again of using s trees

854
00:36:16,800 --> 00:36:19,839
to unlink a file that is loading

855
00:36:19,839 --> 00:36:22,480
a bunch of you know new classes into the

856
00:36:22,480 --> 00:36:23,680
app

857
00:36:23,680 --> 00:36:26,160
and then you know deleting all traces of

858
00:36:26,160 --> 00:36:27,599
it from the disk

859
00:36:27,599 --> 00:36:29,440
well no i didn't find that i didn't find

860
00:36:29,440 --> 00:36:32,160
any unlink it's just calls actually

861
00:36:32,160 --> 00:36:37,359
um but what i did was i used freda to

862
00:36:37,359 --> 00:36:38,599
block

863
00:36:38,599 --> 00:36:42,000
file.delete calls in java

864
00:36:42,000 --> 00:36:44,720
and that's another way to remove

865
00:36:44,720 --> 00:36:48,880
and you know uh a file from the disk um

866
00:36:48,880 --> 00:36:49,760
so

867
00:36:49,760 --> 00:36:52,160
this class of malware is evolving to use

868
00:36:52,160 --> 00:36:55,440
different things in order to kind of

869
00:36:55,440 --> 00:36:57,839
obscure its uh

870
00:36:57,839 --> 00:36:59,520
the way that it's operating

871
00:36:59,520 --> 00:37:02,320
and interestingly when i enumerated the

872
00:37:02,320 --> 00:37:04,240
files that it deleted

873
00:37:04,240 --> 00:37:05,520
i found that

874
00:37:05,520 --> 00:37:08,560
there was this base dot apk dot a bunch

875
00:37:08,560 --> 00:37:09,760
of

876
00:37:09,760 --> 00:37:11,920
garbled text

877
00:37:11,920 --> 00:37:14,240
that it deleted and i was like that's

878
00:37:14,240 --> 00:37:15,920
kind of that's an interesting name it's

879
00:37:15,920 --> 00:37:18,000
another apk that's

880
00:37:18,000 --> 00:37:20,320
dynamically being loaded and then

881
00:37:20,320 --> 00:37:23,320
deleted

882
00:37:24,000 --> 00:37:24,880
so

883
00:37:24,880 --> 00:37:26,960
what you do is you

884
00:37:26,960 --> 00:37:28,640
take that

885
00:37:28,640 --> 00:37:30,480
you know deeper file

886
00:37:30,480 --> 00:37:32,720
and then use adb which is the android

887
00:37:32,720 --> 00:37:35,040
debugger to

888
00:37:35,040 --> 00:37:37,119
pull that file onto the disk and then

889
00:37:37,119 --> 00:37:40,800
use j8x to to decompile that file

890
00:37:40,800 --> 00:37:42,960
and in that case

891
00:37:42,960 --> 00:37:46,480
on the left here i did see all of the

892
00:37:46,480 --> 00:37:48,560
classes that this piece of malware was

893
00:37:48,560 --> 00:37:50,400
asking permission to to

894
00:37:50,400 --> 00:37:53,119
actually display

895
00:37:53,680 --> 00:37:55,599
and

896
00:37:55,599 --> 00:37:57,119
you'll see a lot

897
00:37:57,119 --> 00:38:00,960
in this code this bit of code on the

898
00:38:00,960 --> 00:38:01,920
right

899
00:38:01,920 --> 00:38:04,400
and this is a string obfuscation code so

900
00:38:04,400 --> 00:38:05,760
you can see

901
00:38:05,760 --> 00:38:08,400
in the previous screenshot

902
00:38:08,400 --> 00:38:09,920
that

903
00:38:09,920 --> 00:38:11,680
there's a lot of things that you can

904
00:38:11,680 --> 00:38:14,000
determine just from using jdx

905
00:38:14,000 --> 00:38:16,960
for instance the stop tor

906
00:38:16,960 --> 00:38:19,359
update status or

907
00:38:19,359 --> 00:38:23,040
you know is tor connected uh methods but

908
00:38:23,040 --> 00:38:26,480
a lot of the strings are obfuscated uh

909
00:38:26,480 --> 00:38:27,680
in this case

910
00:38:27,680 --> 00:38:30,839
you know there's these calls

911
00:38:30,839 --> 00:38:34,240
on my cursor like right here that's like

912
00:38:34,240 --> 00:38:37,040
str3 does not equal and then some

913
00:38:37,040 --> 00:38:38,720
some random crap

914
00:38:38,720 --> 00:38:40,000
and you're not really sure what that

915
00:38:40,000 --> 00:38:43,040
means but you can just uh take that

916
00:38:43,040 --> 00:38:46,400
random crap and then put it into a java

917
00:38:46,400 --> 00:38:48,560
sandbox and this is accompanied by

918
00:38:48,560 --> 00:38:51,520
um a string of bytes

919
00:38:51,520 --> 00:38:55,520
um which is the dollar sign variable um

920
00:38:55,520 --> 00:38:57,200
oh sorry yeah the dollar sign variable

921
00:38:57,200 --> 00:39:00,400
defines a function um in another part of

922
00:39:00,400 --> 00:39:02,880
the code in the same scope

923
00:39:02,880 --> 00:39:05,119
that um that takes

924
00:39:05,119 --> 00:39:07,119
some byte array

925
00:39:07,119 --> 00:39:11,920
and then uh kind of looks it up in in a

926
00:39:11,920 --> 00:39:14,800
a chart with this string is

927
00:39:14,800 --> 00:39:17,760
and you can take that

928
00:39:17,760 --> 00:39:20,400
function and put that in a java sandbox

929
00:39:20,400 --> 00:39:21,760
and then take the

930
00:39:21,760 --> 00:39:24,320
uh this function call and put that in

931
00:39:24,320 --> 00:39:27,440
the java sandbox and then get the string

932
00:39:27,440 --> 00:39:28,560
the original string that it was

933
00:39:28,560 --> 00:39:31,680
intending to to to appear here

934
00:39:31,680 --> 00:39:33,680
um you know and get that original string

935
00:39:33,680 --> 00:39:35,440
what you know what's what what it was

936
00:39:35,440 --> 00:39:38,400
actually saying

937
00:39:38,560 --> 00:39:40,800
so in this

938
00:39:40,800 --> 00:39:43,599
there was this bit of uh code that was

939
00:39:43,599 --> 00:39:46,720
called load admin url here that's an

940
00:39:46,720 --> 00:39:50,079
interesting kind of function name right

941
00:39:50,079 --> 00:39:52,240
what's this

942
00:39:52,240 --> 00:39:55,680
uh that's uh torv3 i need address

943
00:39:55,680 --> 00:39:57,599
and

944
00:39:57,599 --> 00:40:02,160
yeah so in this case i got an onion

945
00:40:02,640 --> 00:40:05,359
and if you load that onion

946
00:40:05,359 --> 00:40:08,640
it gives you a clear net url and then

947
00:40:08,640 --> 00:40:10,720
closes tour down

948
00:40:10,720 --> 00:40:11,760
uh

949
00:40:11,760 --> 00:40:15,680
and so if you go to that clarinet url

950
00:40:15,680 --> 00:40:17,760
this is what you get you get a command

951
00:40:17,760 --> 00:40:20,640
and control center login page

952
00:40:20,640 --> 00:40:22,000
um so

953
00:40:22,000 --> 00:40:25,680
that's really neat what i suspect is

954
00:40:25,680 --> 00:40:27,440
going on here is that

955
00:40:27,440 --> 00:40:29,839
it loads tor

956
00:40:29,839 --> 00:40:32,480
in order to do discovery of the clear

957
00:40:32,480 --> 00:40:33,520
net

958
00:40:33,520 --> 00:40:34,640
url

959
00:40:34,640 --> 00:40:36,839
and since tor is

960
00:40:36,839 --> 00:40:40,079
uh censorship resistant you can't shut

961
00:40:40,079 --> 00:40:42,640
down a tor url very easily

962
00:40:42,640 --> 00:40:43,920
if at all

963
00:40:43,920 --> 00:40:45,200
and so

964
00:40:45,200 --> 00:40:48,480
you have the discovery of a clearnet url

965
00:40:48,480 --> 00:40:50,560
so that even when

966
00:40:50,560 --> 00:40:53,359
that clearnet url is taken down through

967
00:40:53,359 --> 00:40:56,640
the normal processes of of urls being

968
00:40:56,640 --> 00:40:59,040
taken down on the internet

969
00:40:59,040 --> 00:41:00,160
that

970
00:41:00,160 --> 00:41:01,280
this

971
00:41:01,280 --> 00:41:03,680
onion url which makes the command and

972
00:41:03,680 --> 00:41:07,040
control discoverable is still operating

973
00:41:07,040 --> 00:41:09,359
and you can just change what command

974
00:41:09,359 --> 00:41:12,720
control url uh is pointing to

975
00:41:12,720 --> 00:41:14,240
so so that's

976
00:41:14,240 --> 00:41:16,960
kind of the the discovery mechanism of

977
00:41:16,960 --> 00:41:21,040
this piece of malware the cnc

978
00:41:21,040 --> 00:41:23,440
so in the end you know the results that

979
00:41:23,440 --> 00:41:25,119
we find from this piece

980
00:41:25,119 --> 00:41:27,119
is the discovery of a command and

981
00:41:27,119 --> 00:41:29,040
control center

982
00:41:29,040 --> 00:41:33,040
that was operating via the tor network

983
00:41:33,040 --> 00:41:36,160
and the uncovering of the evolution of

984
00:41:36,160 --> 00:41:37,760
some of this you know malware of the

985
00:41:37,760 --> 00:41:40,079
hydra malware

986
00:41:40,079 --> 00:41:43,440
and um hopefully better signatures for

987
00:41:43,440 --> 00:41:47,079
antivirus software

988
00:41:48,000 --> 00:41:50,800
am i doing on time

989
00:41:51,359 --> 00:41:52,480
um

990
00:41:52,480 --> 00:41:53,680
so

991
00:41:53,680 --> 00:41:55,599
um we did the same kind of thing with a

992
00:41:55,599 --> 00:41:59,599
ring doorbell app uh and

993
00:41:59,599 --> 00:42:02,160
what we found was

994
00:42:02,160 --> 00:42:04,319
that if you basically if you use this

995
00:42:04,319 --> 00:42:07,040
methodology to set up iptables

996
00:42:07,040 --> 00:42:09,440
uh and run it all through

997
00:42:09,440 --> 00:42:12,800
around all web traffic through port 8080

998
00:42:12,800 --> 00:42:14,800
um then you can use managementproxy to

999
00:42:14,800 --> 00:42:17,440
intercept

1000
00:42:17,440 --> 00:42:20,880
traffic and if you run frida to accept

1001
00:42:20,880 --> 00:42:25,040
all those javascript or java the except

1002
00:42:25,040 --> 00:42:27,040
the certificates that man in the middle

1003
00:42:27,040 --> 00:42:28,800
presents

1004
00:42:28,800 --> 00:42:31,359
which mocks out the java trust factory

1005
00:42:31,359 --> 00:42:32,640
function

1006
00:42:32,640 --> 00:42:34,240
uh then

1007
00:42:34,240 --> 00:42:35,359
you can

1008
00:42:35,359 --> 00:42:36,880
uh see that in the case when we're

1009
00:42:36,880 --> 00:42:38,000
looking at

1010
00:42:38,000 --> 00:42:40,480
the rink doorbell there was a bunch of

1011
00:42:40,480 --> 00:42:42,400
third parties that it was sending

1012
00:42:42,400 --> 00:42:44,560
traffic to

1013
00:42:44,560 --> 00:42:46,079
and interestingly

1014
00:42:46,079 --> 00:42:47,839
out of these four

1015
00:42:47,839 --> 00:42:50,160
third parties only mixpanel was

1016
00:42:50,160 --> 00:42:52,640
mentioned so we called them out for for

1017
00:42:52,640 --> 00:42:54,640
that for other privacy violations in

1018
00:42:54,640 --> 00:42:57,118
that case

1019
00:42:57,520 --> 00:42:58,880
um

1020
00:42:58,880 --> 00:42:59,839
so

1021
00:42:59,839 --> 00:43:02,720
all of this is done in a lab setting

1022
00:43:02,720 --> 00:43:04,160
where you have

1023
00:43:04,160 --> 00:43:06,720
this setup where you have a laptop and

1024
00:43:06,720 --> 00:43:09,119
that's controlling you know your android

1025
00:43:09,119 --> 00:43:11,280
device and perhaps man the middle proxy

1026
00:43:11,280 --> 00:43:12,400
is running

1027
00:43:12,400 --> 00:43:15,040
on a raspberry pi

1028
00:43:15,040 --> 00:43:17,680
and you connect the

1029
00:43:17,680 --> 00:43:20,720
uh you connect the the the device the

1030
00:43:20,720 --> 00:43:23,280
mobile device uh onto the raspberry pi

1031
00:43:23,280 --> 00:43:24,319
and it's

1032
00:43:24,319 --> 00:43:26,960
automatically met in the middle

1033
00:43:26,960 --> 00:43:28,480
and that's great you know you have a

1034
00:43:28,480 --> 00:43:30,960
very kind of sophisticated controlled

1035
00:43:30,960 --> 00:43:32,880
setup you can have a monitor device a

1036
00:43:32,880 --> 00:43:34,400
control laptop

1037
00:43:34,400 --> 00:43:36,800
uh and a man in the middle access point

1038
00:43:36,800 --> 00:43:38,960
um so all the three of these you know

1039
00:43:38,960 --> 00:43:40,560
are in a very controlled environment you

1040
00:43:40,560 --> 00:43:42,800
can um do experiments with

1041
00:43:42,800 --> 00:43:45,119
but there are distinct disadvantages and

1042
00:43:45,119 --> 00:43:47,440
that this isn't actually how things work

1043
00:43:47,440 --> 00:43:50,800
in the real life right like

1044
00:43:50,800 --> 00:43:52,160
you're when you're

1045
00:43:52,160 --> 00:43:55,440
using an app maybe you're going to

1046
00:43:55,440 --> 00:43:58,160
unlock a car that's nearby

1047
00:43:58,160 --> 00:44:00,160
or you know it's going to change its

1048
00:44:00,160 --> 00:44:04,079
behavior based on uh you know

1049
00:44:04,079 --> 00:44:06,800
based on a location or whether it's near

1050
00:44:06,800 --> 00:44:10,079
other devices nfc proximity

1051
00:44:10,079 --> 00:44:11,839
bluetooth proximity

1052
00:44:11,839 --> 00:44:13,839
any number of things

1053
00:44:13,839 --> 00:44:16,079
or perhaps you just have credentials

1054
00:44:16,079 --> 00:44:18,319
that you don't want to be

1055
00:44:18,319 --> 00:44:20,240
you know permanently in a lab you have a

1056
00:44:20,240 --> 00:44:22,319
specific device that's out in the field

1057
00:44:22,319 --> 00:44:24,000
that you want to

1058
00:44:24,000 --> 00:44:25,599
do some

1059
00:44:25,599 --> 00:44:27,440
man in the middling with

1060
00:44:27,440 --> 00:44:29,040
or i should say machine the middling

1061
00:44:29,040 --> 00:44:32,160
with so you have uh you know this you

1062
00:44:32,160 --> 00:44:35,040
want a setup that kind of really

1063
00:44:35,040 --> 00:44:37,119
combines all of these

1064
00:44:37,119 --> 00:44:39,760
aspects into a single device

1065
00:44:39,760 --> 00:44:42,720
uh and i was thinking okay well how do

1066
00:44:42,720 --> 00:44:44,400
you do that you need

1067
00:44:44,400 --> 00:44:47,359
the control you need frida on your

1068
00:44:47,359 --> 00:44:49,280
mobile device well there is

1069
00:44:49,280 --> 00:44:51,200
something that allows you to have you

1070
00:44:51,200 --> 00:44:52,240
know

1071
00:44:52,240 --> 00:44:55,440
uh a full linux environment that you

1072
00:44:55,440 --> 00:44:57,440
know freda is requiring to

1073
00:44:57,440 --> 00:44:59,760
to run uh in order to control the device

1074
00:44:59,760 --> 00:45:02,480
you can actually just install debian on

1075
00:45:02,480 --> 00:45:05,040
on an android device

1076
00:45:05,040 --> 00:45:07,520
using linux deploy

1077
00:45:07,520 --> 00:45:08,800
so

1078
00:45:08,800 --> 00:45:10,240
the goal is to combine all these piece

1079
00:45:10,240 --> 00:45:12,400
of infrastructure onto a single device

1080
00:45:12,400 --> 00:45:15,119
that can kind of monitor itself while in

1081
00:45:15,119 --> 00:45:17,040
the field

1082
00:45:17,040 --> 00:45:20,000
uh and a secondary goal is to perhaps do

1083
00:45:20,000 --> 00:45:22,640
this in a way that um you know allows

1084
00:45:22,640 --> 00:45:25,359
someone who has specialized credentials

1085
00:45:25,359 --> 00:45:26,880
um to

1086
00:45:26,880 --> 00:45:29,280
uh to be separate from someone who's

1087
00:45:29,280 --> 00:45:31,680
actually auditing the app

1088
00:45:31,680 --> 00:45:34,240
and so you want the some remote party to

1089
00:45:34,240 --> 00:45:36,879
be able to

1090
00:45:37,200 --> 00:45:39,359
audit the app and not be in the physical

1091
00:45:39,359 --> 00:45:42,640
safe workplace et cetera

1092
00:45:44,319 --> 00:45:45,599
so

1093
00:45:45,599 --> 00:45:47,200
first of all we'll have an android

1094
00:45:47,200 --> 00:45:49,040
device and it's rooted

1095
00:45:49,040 --> 00:45:51,440
and it has you know lineage os with

1096
00:45:51,440 --> 00:45:54,000
magisk manager on it

1097
00:45:54,000 --> 00:45:55,680
which is something that allows some deep

1098
00:45:55,680 --> 00:45:57,119
level of access

1099
00:45:57,119 --> 00:45:59,599
um and then uh

1100
00:45:59,599 --> 00:46:02,079
i'll go through this real quickly here

1101
00:46:02,079 --> 00:46:05,359
the methodology is install frida on a

1102
00:46:05,359 --> 00:46:07,520
full linux deploy

1103
00:46:07,520 --> 00:46:09,520
uh treated debian environment on the

1104
00:46:09,520 --> 00:46:11,839
device installment in the middle proxy

1105
00:46:11,839 --> 00:46:13,200
on that

1106
00:46:13,200 --> 00:46:14,400
device as well

1107
00:46:14,400 --> 00:46:16,960
and then install simple sshd on the

1108
00:46:16,960 --> 00:46:18,079
device

1109
00:46:18,079 --> 00:46:19,040
uh

1110
00:46:19,040 --> 00:46:20,560
and use

1111
00:46:20,560 --> 00:46:22,400
on the host and then use that to

1112
00:46:22,400 --> 00:46:23,920
transfer the manual

1113
00:46:23,920 --> 00:46:26,640
proxy credentials to the host operating

1114
00:46:26,640 --> 00:46:28,560
system

1115
00:46:28,560 --> 00:46:29,760
and then

1116
00:46:29,760 --> 00:46:31,599
you

1117
00:46:31,599 --> 00:46:34,400
use um you install free to server via

1118
00:46:34,400 --> 00:46:36,000
this magix module

1119
00:46:36,000 --> 00:46:38,160
and set up ib tables for interception of

1120
00:46:38,160 --> 00:46:39,440
that app

1121
00:46:39,440 --> 00:46:43,040
based on a specific uid so every

1122
00:46:43,040 --> 00:46:45,200
app running an android

1123
00:46:45,200 --> 00:46:47,760
has its own uid

1124
00:46:47,760 --> 00:46:50,240
uh which will be separate and which you

1125
00:46:50,240 --> 00:46:51,359
can look up

1126
00:46:51,359 --> 00:46:54,880
and iptables conveniently provides a way

1127
00:46:54,880 --> 00:46:57,119
for you to

1128
00:46:57,119 --> 00:46:59,280
only intercept traffic from coming from

1129
00:46:59,280 --> 00:47:01,440
originally originating from a specific

1130
00:47:01,440 --> 00:47:03,920
uid so you can filter out all the

1131
00:47:03,920 --> 00:47:05,359
traffic and only focus on the one that

1132
00:47:05,359 --> 00:47:08,799
you want to to actually look at

1133
00:47:09,040 --> 00:47:12,720
and then you know you uh run frida

1134
00:47:12,720 --> 00:47:14,960
with an intercept script uh and then

1135
00:47:14,960 --> 00:47:16,160
watch the

1136
00:47:16,160 --> 00:47:18,960
traffic flow

1137
00:47:19,920 --> 00:47:21,359
um

1138
00:47:21,359 --> 00:47:23,920
so the remote auditor has a similar

1139
00:47:23,920 --> 00:47:27,680
process they install sshd

1140
00:47:28,400 --> 00:47:30,720
on

1141
00:47:31,280 --> 00:47:34,160
the install shd on a linux deploy

1142
00:47:34,160 --> 00:47:35,599
and then

1143
00:47:35,599 --> 00:47:37,359
you install say like something like wire

1144
00:47:37,359 --> 00:47:39,280
guard which allows you to

1145
00:47:39,280 --> 00:47:41,520
be on the same local network uh very

1146
00:47:41,520 --> 00:47:42,960
easily

1147
00:47:42,960 --> 00:47:44,880
and then you

1148
00:47:44,880 --> 00:47:46,880
are a remote auditor and you guys stage

1149
00:47:46,880 --> 00:47:49,119
into the device and then you're able to

1150
00:47:49,119 --> 00:47:50,640
run those you know freda commands or

1151
00:47:50,640 --> 00:47:52,960
whatever to change the behavior of

1152
00:47:52,960 --> 00:47:54,880
whatever app you want

1153
00:47:54,880 --> 00:47:57,599
or or monitor that behavior

1154
00:47:57,599 --> 00:48:00,000
so the conclusion here is that

1155
00:48:00,000 --> 00:48:01,839
apps deploy a number of techniques to

1156
00:48:01,839 --> 00:48:03,359
kind of make it hard

1157
00:48:03,359 --> 00:48:05,040
to

1158
00:48:05,040 --> 00:48:06,559
inspect that underlying traffic and

1159
00:48:06,559 --> 00:48:08,079
behaviors

1160
00:48:08,079 --> 00:48:10,800
but uh it's not impossible and with the

1161
00:48:10,800 --> 00:48:12,960
use of some great tools at our disposal

1162
00:48:12,960 --> 00:48:16,800
like jdx like apk tool like frida

1163
00:48:16,800 --> 00:48:18,640
we can inspect malware and audit the

1164
00:48:18,640 --> 00:48:22,240
privacy of apps we like we rely on daily

1165
00:48:22,240 --> 00:48:23,760
in addition

1166
00:48:23,760 --> 00:48:26,079
apps may change their behavior

1167
00:48:26,079 --> 00:48:28,079
because they're being monitored they

1168
00:48:28,079 --> 00:48:29,280
know they're being monitored they're in

1169
00:48:29,280 --> 00:48:32,079
you know some kind of uh lab

1170
00:48:32,079 --> 00:48:34,559
bossware or stalkerware may only work on

1171
00:48:34,559 --> 00:48:38,480
a specific device a credentialed device

1172
00:48:38,480 --> 00:48:42,160
in this case uh you know an app um does

1173
00:48:42,160 --> 00:48:43,440
not prevent us from monitoring the

1174
00:48:43,440 --> 00:48:46,160
traffic of these devices

1175
00:48:46,160 --> 00:48:49,040
from but if we divorce our analysis of

1176
00:48:49,040 --> 00:48:51,440
of apps from the lab and move this all

1177
00:48:51,440 --> 00:48:53,440
on a single device we can actually see

1178
00:48:53,440 --> 00:48:56,480
the real behavior of a piece of

1179
00:48:56,480 --> 00:48:58,960
uh soccerware malware

1180
00:48:58,960 --> 00:49:02,920
or bossware for instance

1181
00:49:03,520 --> 00:49:06,079
um thanks very much so um

1182
00:49:06,079 --> 00:49:10,520
yeah if you have questions

1183
00:49:24,480 --> 00:49:26,480
can you hear me yes

1184
00:49:26,480 --> 00:49:27,839
first of all thank you for the excellent

1185
00:49:27,839 --> 00:49:29,200
talk um

1186
00:49:29,200 --> 00:49:32,079
so um not sure if i asked this correctly

1187
00:49:32,079 --> 00:49:33,280
but um

1188
00:49:33,280 --> 00:49:35,200
so i was wondering if you could just

1189
00:49:35,200 --> 00:49:37,040
sorry if you could just briefly talk

1190
00:49:37,040 --> 00:49:38,720
about the state of i know this is an

1191
00:49:38,720 --> 00:49:40,640
android talk but you could talk about

1192
00:49:40,640 --> 00:49:44,000
the state of like ios analysis also and

1193
00:49:44,000 --> 00:49:46,640
and just from your experience i'm so i'm

1194
00:49:46,640 --> 00:49:48,559
an ios user and i'd like to

1195
00:49:48,559 --> 00:49:50,319
analyze like a lot of the apps that i

1196
00:49:50,319 --> 00:49:51,680
use like

1197
00:49:51,680 --> 00:49:53,839
rewards programs and that kind of stuff

1198
00:49:53,839 --> 00:49:55,760
a lot of these uh companies they make an

1199
00:49:55,760 --> 00:49:58,800
equivalent app for android um would it

1200
00:49:58,800 --> 00:50:00,960
make sense from your point of view to

1201
00:50:00,960 --> 00:50:03,280
like is it easier to analyze the android

1202
00:50:03,280 --> 00:50:04,720
version of the app and maybe get some

1203
00:50:04,720 --> 00:50:07,200
clues as to how the ios version might be

1204
00:50:07,200 --> 00:50:09,040
working you know with the assumption

1205
00:50:09,040 --> 00:50:10,880
that a lot of these companies are

1206
00:50:10,880 --> 00:50:12,720
developing the same app with the same

1207
00:50:12,720 --> 00:50:15,599
backend for both android and ios yeah i

1208
00:50:15,599 --> 00:50:17,680
think that's a definitely a great

1209
00:50:17,680 --> 00:50:19,839
suggestion you know seeing what the

1210
00:50:19,839 --> 00:50:22,240
behavior of an android app is and then

1211
00:50:22,240 --> 00:50:24,559
using that applying that knowledge

1212
00:50:24,559 --> 00:50:27,839
to analyze ios apps i'm not an ios

1213
00:50:27,839 --> 00:50:30,079
app reverser i

1214
00:50:30,079 --> 00:50:32,559
just don't know much about that

1215
00:50:32,559 --> 00:50:34,319
entire field

1216
00:50:34,319 --> 00:50:36,800
so i can't really speak to the specifics

1217
00:50:36,800 --> 00:50:39,359
of ios reversing

1218
00:50:39,359 --> 00:50:41,680
but uh matter respect for for that

1219
00:50:41,680 --> 00:50:45,920
because that's um uh you know uh i think

1220
00:50:45,920 --> 00:50:48,400
somewhat more uh difficult perceived

1221
00:50:48,400 --> 00:50:50,160
because of the

1222
00:50:50,160 --> 00:50:52,720
inaccessibility of apps and the way that

1223
00:50:52,720 --> 00:50:55,119
you download them

1224
00:50:55,119 --> 00:50:56,960
and the closed ecosystem

1225
00:50:56,960 --> 00:51:00,640
that it that it uh operates in

1226
00:51:01,760 --> 00:51:04,880
you didn't mention uh app signing

1227
00:51:04,880 --> 00:51:06,240
yeah i didn't

1228
00:51:06,240 --> 00:51:08,480
are apk signed uh

1229
00:51:08,480 --> 00:51:09,520
so

1230
00:51:09,520 --> 00:51:11,920
in the case where you need to in the

1231
00:51:11,920 --> 00:51:13,839
case where you're backsmalling and then

1232
00:51:13,839 --> 00:51:15,359
rebuilding an app

1233
00:51:15,359 --> 00:51:17,760
you have to uninstall the original app

1234
00:51:17,760 --> 00:51:21,040
and then sign that your copy of an app

1235
00:51:21,040 --> 00:51:22,880
the way that app signing works in the

1236
00:51:22,880 --> 00:51:25,520
android ecosystem is that

1237
00:51:25,520 --> 00:51:29,520
basically android will let you install

1238
00:51:29,520 --> 00:51:32,480
an app with any signature but if you

1239
00:51:32,480 --> 00:51:34,480
upgrade that app then it needs to have

1240
00:51:34,480 --> 00:51:38,079
the same set of signatures and

1241
00:51:38,079 --> 00:51:40,000
if you uninstall an app you can

1242
00:51:40,000 --> 00:51:41,440
reinstall it with a different set of

1243
00:51:41,440 --> 00:51:43,839
signatures so yeah that is kind of part

1244
00:51:43,839 --> 00:51:44,640
of the

1245
00:51:44,640 --> 00:51:46,800
process i don't understand why the

1246
00:51:46,800 --> 00:51:49,760
auditor needs to install sshd

1247
00:51:49,760 --> 00:51:53,040
rather than just ssh client

1248
00:51:53,040 --> 00:51:54,000
um

1249
00:51:54,000 --> 00:51:55,520
the

1250
00:51:55,520 --> 00:51:59,040
the remote auditor yeah so

1251
00:51:59,040 --> 00:52:02,160
your host needs sshd

1252
00:52:02,160 --> 00:52:04,480
so if you're you know have a

1253
00:52:04,480 --> 00:52:07,119
uh android device your host needs sshd

1254
00:52:07,119 --> 00:52:09,200
in order to transfer

1255
00:52:09,200 --> 00:52:10,160
the

1256
00:52:10,160 --> 00:52:12,480
uh man the middle proxy

1257
00:52:12,480 --> 00:52:13,599
uh

1258
00:52:13,599 --> 00:52:16,079
uh certificate to the host in order for

1259
00:52:16,079 --> 00:52:18,800
it to be accepted via the script okay

1260
00:52:18,800 --> 00:52:21,119
and um

1261
00:52:21,119 --> 00:52:23,760
can apps detect the

1262
00:52:23,760 --> 00:52:26,079
mitm proxy

1263
00:52:26,079 --> 00:52:28,640
as circa mentioned

1264
00:52:28,640 --> 00:52:30,720
uh yeah good question

1265
00:52:30,720 --> 00:52:33,760
um so

1266
00:52:33,760 --> 00:52:34,960
apps

1267
00:52:34,960 --> 00:52:37,200
will

1268
00:52:37,200 --> 00:52:39,760
the apps themselves will s

1269
00:52:39,760 --> 00:52:40,880
you know

1270
00:52:40,880 --> 00:52:42,240
may

1271
00:52:42,240 --> 00:52:45,119
enforce a higher level of certificate

1272
00:52:45,119 --> 00:52:46,480
checking

1273
00:52:46,480 --> 00:52:49,920
than just a trust factory kind of

1274
00:52:49,920 --> 00:52:51,760
you know bypass

1275
00:52:51,760 --> 00:52:54,800
and in that case you'll need to

1276
00:52:54,800 --> 00:52:56,720
kind of inspect that

1277
00:52:56,720 --> 00:52:59,760
area of the code and see what it's doing

1278
00:52:59,760 --> 00:53:02,079
and then knock out that function call so

1279
00:53:02,079 --> 00:53:06,559
it might be a process of using frida to

1280
00:53:06,559 --> 00:53:09,520
kind of look at what method

1281
00:53:09,520 --> 00:53:11,440
is being employed to

1282
00:53:11,440 --> 00:53:13,440
to to accept the certificates and then

1283
00:53:13,440 --> 00:53:16,240
bypassing that

1284
00:53:16,559 --> 00:53:18,079
thanks so much i think that gets to my

1285
00:53:18,079 --> 00:53:19,440
question which was going to be about

1286
00:53:19,440 --> 00:53:21,200
more sophisticated

1287
00:53:21,200 --> 00:53:22,640
apps that detect either that they're in

1288
00:53:22,640 --> 00:53:24,640
a sandbox or that check it checksum or

1289
00:53:24,640 --> 00:53:26,240
that implement certificate pinning and

1290
00:53:26,240 --> 00:53:27,920
if you have any tips for working in that

1291
00:53:27,920 --> 00:53:29,359
environment

1292
00:53:29,359 --> 00:53:31,280
yeah um

1293
00:53:31,280 --> 00:53:33,680
apps can be incredibly

1294
00:53:33,680 --> 00:53:35,599
malware can be incredibly innovative

1295
00:53:35,599 --> 00:53:36,880
when it

1296
00:53:36,880 --> 00:53:39,920
wants to be in when it's employing uh

1297
00:53:39,920 --> 00:53:42,400
methods of obfuscation and

1298
00:53:42,400 --> 00:53:44,319
i think the

1299
00:53:44,319 --> 00:53:45,920
best thing to have is patience at that

1300
00:53:45,920 --> 00:53:47,200
point

1301
00:53:47,200 --> 00:53:49,440
if you're looking at an app and you're

1302
00:53:49,440 --> 00:53:51,839
reversing it

1303
00:53:51,839 --> 00:53:53,760
you get to a point where

1304
00:53:53,760 --> 00:53:56,240
you have a specific code block and you

1305
00:53:56,240 --> 00:53:58,480
want to you know that that's the code

1306
00:53:58,480 --> 00:53:59,760
block that

1307
00:53:59,760 --> 00:54:02,240
is enforcing certificate some higher

1308
00:54:02,240 --> 00:54:05,520
level certificate opinion or whatever

1309
00:54:05,680 --> 00:54:08,319
and just getting through that process is

1310
00:54:08,319 --> 00:54:10,800
it can be extremely frustrating but yeah

1311
00:54:10,800 --> 00:54:14,079
it's it takes time

1312
00:54:14,079 --> 00:54:16,079
uh yeah thank you that was really cool

1313
00:54:16,079 --> 00:54:18,319
it was kind of surreal because uh i

1314
00:54:18,319 --> 00:54:20,480
maintained the app orbot and a lot of

1315
00:54:20,480 --> 00:54:22,400
the hydra method signatures were ripped

1316
00:54:22,400 --> 00:54:24,880
right from that app yeah our status and

1317
00:54:24,880 --> 00:54:26,640
stuff but i was wondering if you know of

1318
00:54:26,640 --> 00:54:29,119
any tools or tips for like

1319
00:54:29,119 --> 00:54:30,720
apps that are built with like

1320
00:54:30,720 --> 00:54:32,400
cross-platform frameworks those have

1321
00:54:32,400 --> 00:54:33,680
kind of been like stumbling blocks for

1322
00:54:33,680 --> 00:54:34,640
me when i've been trying to reverse

1323
00:54:34,640 --> 00:54:36,880
stuff like react native is one that like

1324
00:54:36,880 --> 00:54:38,240
i've never built an app with that so

1325
00:54:38,240 --> 00:54:39,839
when i suspect that an app has been

1326
00:54:39,839 --> 00:54:41,200
built with tools like that i just kind

1327
00:54:41,200 --> 00:54:43,359
of like hit a wall mostly

1328
00:54:43,359 --> 00:54:45,760
yeah um actually when reversing this

1329
00:54:45,760 --> 00:54:47,839
code there was a folder that just called

1330
00:54:47,839 --> 00:54:50,240
tor project and there's and also all

1331
00:54:50,240 --> 00:54:52,559
underscore tor.zip

1332
00:54:52,559 --> 00:54:55,200
um which just includes a bunch of tor

1333
00:54:55,200 --> 00:54:57,839
code in the malware just directly and

1334
00:54:57,839 --> 00:54:59,359
malware does some weird funky stuff like

1335
00:54:59,359 --> 00:55:01,280
you don't need to do that but

1336
00:55:01,280 --> 00:55:02,240
um

1337
00:55:02,240 --> 00:55:04,079
so um

1338
00:55:04,079 --> 00:55:05,839
sorry can you repeat your question uh

1339
00:55:05,839 --> 00:55:08,480
like apps like basically cross-platform

1340
00:55:08,480 --> 00:55:11,119
tools like react native or xamarin but

1341
00:55:11,119 --> 00:55:12,559
uh i guess i'm more interested in like

1342
00:55:12,559 --> 00:55:13,839
react native do you know if there are

1343
00:55:13,839 --> 00:55:15,520
tools to

1344
00:55:15,520 --> 00:55:17,920
i don't know of them there might be i'm

1345
00:55:17,920 --> 00:55:19,440
not really sure i haven't looked at that

1346
00:55:19,440 --> 00:55:20,559
yeah because

1347
00:55:20,559 --> 00:55:23,680
okay sorry thank you

1348
00:55:25,839 --> 00:55:27,839
um so thanks very much i don't think

1349
00:55:27,839 --> 00:55:29,599
that we have uh time for any more

1350
00:55:29,599 --> 00:55:31,200
questions but uh certainly i'll be

1351
00:55:31,200 --> 00:55:35,040
around for the entire weekend and

1352
00:55:35,040 --> 00:55:38,319
feel free to maybe talk to me

1353
00:55:38,319 --> 00:55:42,210
upstairs and thanks very much for coming

1354
00:55:42,210 --> 00:55:48,340
[Applause]

1355
00:55:54,960 --> 00:55:56,799
just a quick announcement at nine

1356
00:55:56,799 --> 00:55:57,920
o'clock we're gonna be doing something

1357
00:55:57,920 --> 00:55:59,599
kind of kind of different something we

1358
00:55:59,599 --> 00:56:00,799
haven't done before we actually are

1359
00:56:00,799 --> 00:56:03,200
gonna have a marching band walking

1360
00:56:03,200 --> 00:56:05,680
around uh the conference site

1361
00:56:05,680 --> 00:56:07,839
so feel free to

1362
00:56:07,839 --> 00:56:11,480
come by take a look

1363
00:56:17,750 --> 00:56:25,920
[Music]

1364
00:56:28,440 --> 00:56:31,610
[Music]

1365
00:56:34,740 --> 00:56:43,839
[Music]

1366
00:56:43,839 --> 00:56:45,920
you

