1
00:00:00,150 --> 00:00:05,049
[Applause]

2
00:00:06,500 --> 00:00:09,200
hello to all

3
00:00:09,200 --> 00:00:12,150
thank you for being present it's nice

4
00:00:12,150 --> 00:00:15,269
before just starting the talk there is

5
00:00:15,269 --> 00:00:16,470
something that I had to do for a

6
00:00:16,470 --> 00:00:18,630
long time once again that's why we

7
00:00:18,630 --> 00:00:20,130
attended an idea has only a small

8
00:00:20,130 --> 00:00:22,199
moment I had given something to

9
00:00:22,199 --> 00:00:24,539
someone and it turns out that suddenly this

10
00:00:24,539 --> 00:00:27,090
someone has something for me and he

11
00:00:27,090 --> 00:00:29,160
wanted to give me today so

12
00:00:29,160 --> 00:00:31,640
we are going to make the changes quickly

13
00:00:31,640 --> 00:00:34,649
it happens that this someone  and I

14
00:00:34,649 --> 00:00:36,680
don't know how we manage to

15
00:00:36,680 --> 00:00:38,700
find

16
00:00:38,700 --> 00:00:41,329
a cash register that's

17
00:00:41,329 --> 00:00:43,610
a cash register

18
00:00:43,610 --> 00:00:47,010
and more or less old and which in my

19
00:00:47,010 --> 00:00:48,510
opinion it will be the subject of a

20
00:00:48,510 --> 00:00:50,610
proper dismantling is certainly

21
00:00:50,610 --> 00:00:52,469
a myth  analysis beating suddenly I have

22
00:00:52,469 --> 00:00:55,340
something for you I'll be back

23
00:00:55,590 --> 00:00:57,800


24
00:00:58,250 --> 00:01:02,060
after the rabbit skin of microphones

25
00:01:05,090 --> 00:01:08,780
[Applause]

26
00:01:08,780 --> 00:01:10,740
it takes up space as a jeweler

27
00:01:10,740 --> 00:01:12,140
also goes to the

28
00:01:12,140 --> 00:01:15,780
and hey you are for who you know at

29
00:01:15,780 --> 00:01:18,440
second minitel yeah you don't care

30
00:01:18,440 --> 00:01:20,570
thank you in time when

31
00:01:20,570 --> 00:01:23,550
I see them later wait  tion

32
00:01:23,550 --> 00:01:26,600
over it's packing up

33
00:01:27,220 --> 00:01:30,850
ok good

34
00:01:30,850 --> 00:01:34,659
thank you and again thank you for the cash register

35
00:01:34,659 --> 00:01:38,560
so we're going to talk about two wifi routers

36
00:01:38,560 --> 00:01:39,340
we no cash register

37
00:01:39,340 --> 00:01:42,340
today mainly to

38
00:01:42,340 --> 00:01:43,750
simply beat so it's a wifi router

39
00:01:43,750 --> 00:01:44,920
as an example and  I think we

40
00:01:44,920 --> 00:01:46,530
can extrapolate to other equipment

41
00:01:46,530 --> 00:01:48,520
the idea is above all to say to ourselves well

42
00:01:48,520 --> 00:01:50,560
here there are lots of things in the

43
00:01:50,560 --> 00:01:53,079
bubble bath that come out on on-

44
00:01:53,079 --> 00:01:54,520
board equipment, roads in wi

45
00:01:54,520 --> 00:01:57,250
fi or other it  is very good but

46
00:01:57,250 --> 00:01:58,689
what happens after a little introduction

47
00:01:58,689 --> 00:02:00,459
for those who don't know what does

48
00:02:00,459 --> 00:02:01,359
n't know me sorry I'm

49
00:02:01,359 --> 00:02:03,399
a security engineer to coire slam my hobby

50
00:02:03,399 --> 00:02:05,109
is all that's left too much

51
00:02:05,109 --> 00:02:06,819
software engineering materia

52
00:02:06,819 --> 00:02:07,959
incidentally it  it may happen

53
00:02:07,959 --> 00:02:10,590
that I want to stream on twitch briefly

54
00:02:10,590 --> 00:02:12,629
incidentally

55
00:02:12,629 --> 00:02:14,709
if you have followed the news a little bit

56
00:02:14,709 --> 00:02:16,329
in terms of vulnerability you must have

57
00:02:16,329 --> 00:02:18,700
seen a lot of news appear in the

58
00:02:18,700 --> 00:02:20,500
news on invited cities falling

59
00:02:20,500 --> 00:02:22,329
on 20 which conceives  there were wifi routers

60
00:02:22,329 --> 00:02:24,370
for example we will take one

61
00:02:24,370 --> 00:02:26,620
because it is quite nice it is the

62
00:02:26,620 --> 00:02:28,750
moon that touches cisco small business

63
00:02:28,750 --> 00:02:31,660
or cdd router here not necessarily wifi

64
00:02:31,660 --> 00:02:34,480
and there is an execution of commands which

65
00:02:34,480 --> 00:02:35,859
is possible on it like c  is the case

66
00:02:35,859 --> 00:02:37,810
of a lot of equipment as well as

67
00:02:37,810 --> 00:02:39,970
denial of service it is marked critical

68
00:02:39,970 --> 00:02:41,889
nevertheless relatively relatively

69
00:02:41,889 --> 00:02:44,470
critical is roughly speaking what we can

70
00:02:44,470 --> 00:02:46,090
do to suck execute arbitrary commands

71
00:02:46,090 --> 00:02:48,250
as a route so like

72
00:02:48,250 --> 00:02:49,870
the  very critical level of vulnerability

73
00:02:49,870 --> 00:02:53,010
so the truth is due to

74
00:02:53,010 --> 00:02:55,329
poor validation of the parameters

75
00:02:55,329 --> 00:02:57,250
sent on http bins

76
00:02:57,250 --> 00:02:58,419
again something fairly standard and

77
00:02:58,419 --> 00:03:01,120
we have encountered many times it allows

78
00:03:01,120 --> 00:03:03,250
to execute commands with a

79
00:03:03,250 --> 00:03:04,630
route level  the part that's a bit more

80
00:03:04,630 --> 00:03:05,950
annoying in this story is that

81
00:03:05,950 --> 00:03:08,919
the manufacturer of those on this gear

82
00:03:08,919 --> 00:03:11,919
said that actually down that it was over

83
00:03:11,919 --> 00:03:13,569
there was no more support on this

84
00:03:13,569 --> 00:03:14,680
gear is so they don't go  not

85
00:03:14,680 --> 00:03:16,090
correct vulnerabilities

86
00:03:16,090 --> 00:03:18,130
so that means what does it mean that

87
00:03:18,130 --> 00:03:19,660
if you have this equipment there at your

88
00:03:19,660 --> 00:03:20,849
disposal

89
00:03:20,849 --> 00:03:23,650
you will not be able to fix you will not

90
00:03:23,650 --> 00:03:25,030
be able to update everything is

91
00:03:25,030 --> 00:03:25,810
all you can do is

92
00:03:25,810 --> 00:03:27,819
to remove it  of your of your system of

93
00:03:27,819 --> 00:03:30,010
your story and no longer use

94
00:03:30,010 --> 00:03:31,540
it it's a bit of a shame in the story

95
00:03:31,540 --> 00:03:32,470
because it would be nice if we could still

96
00:03:32,470 --> 00:03:34,419
correct the vulnerability there

97
00:03:34,419 --> 00:03:35,650
is a reflection made behind who is

98
00:03:35,650 --> 00:03:37,720
to say is this  that we could not by

99
00:03:37,720 --> 00:03:39,760
chance knowing that we have root access on

100
00:03:39,760 --> 00:03:42,430
this type of original equipment or even

101
00:03:42,430 --> 00:03:44,829
this vulnerability by making the patch

102
00:03:44,829 --> 00:03:46,720
which is then it is not the case study

103
00:03:46,720 --> 00:03:47,829
that I will take  concept for this

104
00:03:47,829 --> 00:03:49,180
time but really the weight of the

105
00:03:49,180 --> 00:03:50,650
first tic that we have is that we have

106
00:03:50,650 --> 00:03:52,390
cookie equipment on which we can

107
00:03:52,390 --> 00:03:54,099
have road chains and we can do

108
00:03:54,099 --> 00:03:56,140
a bit of everything and anything finally or

109
00:03:56,140 --> 00:03:58,360
not  it depends on the configurations and here

110
00:03:58,360 --> 00:03:59,620
what will interest us in this tau  x

111
00:03:59,620 --> 00:04:00,519
is in particular to see what we can

112
00:04:00,519 --> 00:04:01,840
do what we cannot do what are

113
00:04:01,840 --> 00:04:03,129
the limitations and I let you

114
00:04:03,129 --> 00:04:04,330
imagine after what you could

115
00:04:04,330 --> 00:04:06,670
consider facing this kind of

116
00:04:06,670 --> 00:04:07,910


117
00:04:07,910 --> 00:04:09,650
problem others in the news on

118
00:04:09,650 --> 00:04:12,140
find other vulnerabilities and

119
00:04:12,140 --> 00:04:14,270
zyxel routers here which are again

120
00:04:14,270 --> 00:04:15,830
vulnerable to command injection

121
00:04:15,830 --> 00:04:18,079
so i haven't been digging

122
00:04:18,079 --> 00:04:19,220
code level but generally speaking

123
00:04:19,220 --> 00:04:20,630
about command injection of routers

124
00:04:20,630 --> 00:04:22,460
etc it's d  'call to system which is

125
00:04:22,460 --> 00:04:24,920
not globally protected so

126
00:04:24,920 --> 00:04:26,750
a nice injection of commands via a

127
00:04:26,750 --> 00:04:28,910
system call which this time

128
00:04:28,910 --> 00:04:30,950
allows you to execute commands with

129
00:04:30,950 --> 00:04:33,200
the nobody utility it's a little less

130
00:04:33,200 --> 00:04:35,090
cool that a tool is in  road but it's

131
00:04:35,090 --> 00:04:36,890
already a first step to

132
00:04:36,890 --> 00:04:38,210
compromise on this sense

133
00:04:38,210 --> 00:04:39,120
and equipment in

134
00:04:39,120 --> 00:04:42,810
short all that to say that ok you have

135
00:04:42,810 --> 00:04:44,820
a road shell but having a road oak

136
00:04:44,820 --> 00:04:46,229
on equipment does not mean that

137
00:04:46,229 --> 00:04:47,820
you have totally  vs  compromise

138
00:04:47,820 --> 00:04:49,650
the equipment to be able to install a

139
00:04:49,650 --> 00:04:51,110
backdoor to be able to take control

140
00:04:51,110 --> 00:04:53,510
there is still such a margin

141
00:04:53,510 --> 00:04:54,980
if you have a wheeled shell on

142
00:04:54,980 --> 00:04:56,570
an equipment not necessarily mean that

143
00:04:56,570 --> 00:04:57,800
you will be able to pivot thing

144
00:04:57,800 --> 00:04:59,240
power you will be able to attack other

145
00:04:59,240 --> 00:05:01,190
equipment behind it  will give up its

146
00:05:01,190 --> 00:05:03,380
problems afterwards and of course

147
00:05:03,380 --> 00:05:04,970
that does not mean that you rang the

148
00:05:04,970 --> 00:05:06,260
system because suddenly you did not have

149
00:05:06,260 --> 00:05:08,240
full control over the fath system on

150
00:05:08,240 --> 00:05:09,680
these configuration files on the

151
00:05:09,680 --> 00:05:11,780
services which fall on it in short you

152
00:05:11,780 --> 00:05:12,980
cannot  do what you want with

153
00:05:12,980 --> 00:05:15,560
with equipment so before digging

154
00:05:15,560 --> 00:05:18,110
into more detail the really post-

155
00:05:18,110 --> 00:05:21,070
exploitation part that this talk typically deals with,

156
00:05:21,070 --> 00:05:22,790
we're going to do a little

157
00:05:22,790 --> 00:05:24,770
summary for those of you

158
00:05:24,770 --> 00:05:26,210
who won't necessarily know how

159
00:05:26,210 --> 00:05:28,460
a running linux works  on a

160
00:05:28,460 --> 00:05:29,840
wifi router my little pepper with

161
00:05:29,840 --> 00:05:32,180
embedded linux and we're really going to leave from the

162
00:05:32,180 --> 00:05:34,070
bar, that is to say from bern metal everything

163
00:05:34,070 --> 00:05:35,480
that is close to the ha  rdware and we are going to

164
00:05:35,480 --> 00:05:37,820
go up gently towards the systems

165
00:05:37,820 --> 00:05:39,290
and applications so that you have

166
00:05:39,290 --> 00:05:40,940
a little idea of how it works and i

167
00:05:40,940 --> 00:05:43,280
will be useful to understand what 

168
00:05:43,280 --> 00:05:44,710
ill happen next good 

169
00:05:44,710 --> 00:05:47,630
et's take a platform here an arrie

170
00:05:47,630 --> 00:05:50,830
a g25 world arrieta g25  it's a

171
00:05:50,830 --> 00:05:53,630
small board on which we find

172
00:05:53,630 --> 00:05:55,820
ram you have in particular here on the

173
00:05:55,820 --> 00:05:59,390
left of the slide an arm cpu so an

174
00:05:59,390 --> 00:06:02,420
atmel I don't know how much the head 91 knows

175
00:06:02,420 --> 00:06:04,370
something about expansion ports

176
00:06:04,370 --> 00:06:06,350
like on races checks for example

177
00:06:06,350 --> 00:06:09,530
and then of course a place to put

178
00:06:09,530 --> 00:06:11,960
a flash card an sd card sorry a

179
00:06:11,960 --> 00:06:13,700
flash memory which will contain the

180
00:06:13,700 --> 00:06:15,740
operating system it is generally in

181
00:06:15,740 --> 00:06:17,660
time to embark it is generally

182
00:06:17,660 --> 00:06:19,160
what we need i.e. a

183
00:06:19,160 --> 00:06:21,140
processor  a system on chip for the

184
00:06:21,140 --> 00:06:22,850
vast majority with ram to be

185
00:06:22,850 --> 00:06:25,820
able to execute code and a

186
00:06:25,820 --> 00:06:27,170
storage medium on which we will bring in

187
00:06:27,170 --> 00:06:29,210
particular the firmware it is also

188
00:06:29,210 --> 00:06:30,950
common in these architectures to have

189
00:06:30,950 --> 00:06:32,420
a score at p  eine a mud drome that is to

190
00:06:32,420 --> 00:06:33,530
say that the system of a system on a

191
00:06:33,530 --> 00:06:35,000
chip whose chip here is more than

192
00:06:35,000 --> 00:06:36,350
you see it has passed not just a

193
00:06:36,350 --> 00:06:37,700
chip there is a small part of rome

194
00:06:37,700 --> 00:06:39,650
inside we who will say we are said well  sure

195
00:06:39,650 --> 00:06:41,960
memory henry denis so it's going to

196
00:06:41,960 --> 00:06:43,460
slam once and for all in the

197
00:06:43,460 --> 00:06:44,990
chip and it's she who will be in charge

198
00:06:44,990 --> 00:06:46,790
of doing all the mud

199
00:06:46,790 --> 00:06:48,590
strapping process which will trigger the execution

200
00:06:48,590 --> 00:06:51,410
of the application code which is installed on

201
00:06:51,410 --> 00:06:54,080
the memory  there already there are already a lot of

202
00:06:54,080 --> 00:06:55,190
funny things depending on the

203
00:06:55,190 --> 00:06:56,660
architectures it is for this contract to

204
00:06:56,660 --> 00:06:59,140
test with all winners at one or 7

205
00:06:59,140 --> 00:07:01,010
there are little

206
00:07:01,010 --> 00:07:02,450
weird things they provide you with

207
00:07:02,450 --> 00:07:03,440
binary codes to put in

208
00:07:03,440 --> 00:07:04,700
special places for it to run

209
00:07:04,700 --> 00:07:06,040
normally you don't know what's in

210
00:07:06,040 --> 00:07:09,430
it is that this volume and there are bits of

211
00:07:09,430 --> 00:07:11,050
rome where you can have control which

212
00:07:11,050 --> 00:07:12,130
is very practical especially when you

213
00:07:12,130 --> 00:07:13,330
want to do secure boot  late

214
00:07:13,330 --> 00:07:14,800
radio it's all the same later but in

215
00:07:14,800 --> 00:07:16,120
in any case this sulking but there for

216
00:07:16,120 --> 00:07:18,580
charge to go launched the bootloader so

217
00:07:18,580 --> 00:07:20,770
ok bulldozers it's a piece

218
00:07:20,770 --> 00:07:22,300
of code which will be loaded from the

219
00:07:22,300 --> 00:07:24,280
flash memory which will have the objective

220
00:07:24,280 --> 00:07:26,350
of loading the operating system of

221
00:07:26,350 --> 00:07:27,280
him what  he will do is that will

222
00:07:27,280 --> 00:07:28,630
detect all the

223
00:07:28,630 --> 00:07:30,220
storage devices that are present and it is in

224
00:07:30,220 --> 00:07:31,510
particular the sulky that will allow you

225
00:07:31,510 --> 00:07:33,400
to start from a usb key

226
00:07:33,400 --> 00:07:35,830
for example from the network we move

227
00:07:35,830 --> 00:07:37,180
the author  the vast majority of the time

228
00:07:37,180 --> 00:07:38,650
it's to make breaks and purpose

229
00:07:38,650 --> 00:07:39,700
because people don't take the

230
00:07:39,700 --> 00:07:41,740
lead but we also have other bootloaders

231
00:07:41,740 --> 00:07:43,240
there is ycc up and it's that we can

232
00:07:43,240 --> 00:07:46,420
find on some  systems in

233
00:07:46,420 --> 00:07:48,340
short, this bulldozer will then

234
00:07:48,340 --> 00:07:50,740
load the kernel and the kernel will have the

235
00:07:50,740 --> 00:07:52,480
objective of going, in particular, to launch the

236
00:07:52,480 --> 00:07:54,550
whole system and that's so that's

237
00:07:54,550 --> 00:07:55,870
really the boot chain, we'll

238
00:07:55,870 --> 00:07:56,950
say standard that there isn't  has no

239
00:07:56,950 --> 00:07:58,840
protection necessarily put in place and

240
00:07:58,840 --> 00:08:00,130
this is what will allow in particular  t

241
00:08:00,130 --> 00:08:02,430
launch the embedded system

242
00:08:02,430 --> 00:08:05,229
I talked about secure boot secure boot

243
00:08:05,229 --> 00:08:06,850
is a process that consists of a

244
00:08:06,850 --> 00:08:08,620
security mechanism that consists of

245
00:08:08,620 --> 00:08:10,840
ensuring that each piece of software

246
00:08:10,840 --> 00:08:12,340
that will be run on the system is

247
00:08:12,340 --> 00:08:15,039
legitimate and authentic  that is to say that

248
00:08:15,039 --> 00:08:17,169
we have a good rome no

249
00:08:17,169 --> 00:08:18,819
boot code that is installed in the chip

250
00:08:18,819 --> 00:08:20,770
that cannot be changed and I

251
00:08:20,770 --> 00:08:22,330
insist on that because that has some

252
00:08:22,330 --> 00:08:24,400
implications in terms of security this

253
00:08:24,400 --> 00:08:25,720
code that cannot  changing it will go to

254
00:08:25,720 --> 00:08:27,639
check that the bootloader has a

255
00:08:27,639 --> 00:08:29,169
valid signature which is valid and

256
00:08:29,169 --> 00:08:31,330
therefore by the idh the supplier of this code

257
00:08:31,330 --> 00:08:34,719
which is supposed to be an official supplier

258
00:08:34,719 --> 00:08:36,370
if the signature is valid in this

259
00:08:36,370 --> 00:08:38,140
case he will execute will

260
00:08:38,140 --> 00:08:39,549
transfer control  on the end of the

261
00:08:39,549 --> 00:08:41,589
authors the bulldozers him at the time of

262
00:08:41,589 --> 00:08:43,539
loading the system will similarly ensure

263
00:08:43,539 --> 00:08:45,940
that the system is indeed authentic with

264
00:08:45,940 --> 00:08:47,649
a signature verification and it will only

265
00:08:47,649 --> 00:08:50,290
start the kernel when the

266
00:08:50,290 --> 00:08:51,820
signature this match ser  to the one expected

267
00:08:51,820 --> 00:08:53,440
or that it will simply be valid

268
00:08:53,440 --> 00:08:56,020
and its mechanisms there of course obvious

269
00:08:56,020 --> 00:08:57,490
that clever little ones tweaking

270
00:08:57,490 --> 00:08:59,500
memories to go and put codes that are

271
00:08:59,500 --> 00:09:01,360
going well to do things that are

272
00:09:01,360 --> 00:09:02,430
not planned in

273
00:09:02,430 --> 00:09:05,320
short keep that in mind chapter

274
00:09:05,320 --> 00:09:06,920
d  after that will be useful

275
00:09:06,920 --> 00:09:09,200
at the memory level let's talk about the

276
00:09:09,200 --> 00:09:10,550
flash memory on which we store in

277
00:09:10,550 --> 00:09:12,589
particular the notebook the fal system etc

278
00:09:12,589 --> 00:09:14,360
and well its flash memories experience

279
00:09:14,360 --> 00:09:15,680
form more generally so when

280
00:09:15,680 --> 00:09:16,820
you're lucky that it's

281
00:09:16,820 --> 00:09:18,050
old enough you  have the format that you

282
00:09:18,050 --> 00:09:19,010
find on the left what is called

283
00:09:19,010 --> 00:09:21,680
the shard 48.48 big h 24 on each side

284
00:09:21,680 --> 00:09:23,300
usually nand alain flash memories

285
00:09:23,300 --> 00:09:25,220
typically and when you are a

286
00:09:25,220 --> 00:09:26,750
little less lucky I say that because

287
00:09:26,750 --> 00:09:28,699
technology has evolved  you have the

288
00:09:28,699 --> 00:09:30,350
chips which are therefore located on the right which

289
00:09:30,350 --> 00:09:31,970
are in the format of ibg to bald grid of re

290
00:09:31,970 --> 00:09:34,430
with contacts which are made between

291
00:09:34,430 --> 00:09:35,839
the chip and the circuit to say

292
00:09:35,839 --> 00:09:37,190
that once it is welded you can  You can't

293
00:09:37,190 --> 00:09:39,620
access the component pins

294
00:09:39,620 --> 00:09:40,670
unless you go underneath in some

295
00:09:40,670 --> 00:09:42,350
cases, but hey, it's still a bit more

296
00:09:42,350 --> 00:09:44,899
annoying to do. Is it that these

297
00:09:44,899 --> 00:09:46,550
flash systems

298
00:09:46,550 --> 00:09:47,779
still use the same architecture to

299
00:09:47,779 --> 00:09:49,399
store the data and we

300
00:09:49,399 --> 00:09:51,380
typically find  other storage

301
00:09:51,380 --> 00:09:53,180
remembers pages which stores a

302
00:09:53,180 --> 00:09:54,290
certain amount of information

303
00:09:54,290 --> 00:09:55,579
certainly knew for fans

304
00:09:55,579 --> 00:09:57,170
system systems define

305
00:09:57,170 --> 00:09:58,130
hard drives sorry to pass these

306
00:09:58,130 --> 00:09:59,810
systems hard drives which

307
00:09:59,810 --> 00:10:02,600
also stores data and we have a moment

308
00:10:02,600 --> 00:10:03,560
made of typically the  size of this

309
00:10:03,560 --> 00:10:04,760
sector what is the size of the

310
00:10:04,760 --> 00:10:06,290
smallest given that we can write or read

311
00:10:06,290 --> 00:10:07,880
from a hard disk on flash moments

312
00:10:07,880 --> 00:10:09,560
it is the same at the level of the

313
00:10:09,560 --> 00:10:10,790
controllers which are integrated we can

314
00:10:10,790 --> 00:10:12,740
read and write only one  certain number

315
00:10:12,740 --> 00:10:14,630
of bytes here in the present case these

316
00:10:14,630 --> 00:10:16,279
flash memories which have a page size

317
00:10:16,279 --> 00:10:19,250
of 2112 bytes and there is a small end at

318
00:10:19,250 --> 00:10:20,930
64 bytes which we find later

319
00:10:20,930 --> 00:10:22,670
q  we generally call the spe rare

320
00:10:22,670 --> 00:10:25,459
and house of band arias, that is to say

321
00:10:25,459 --> 00:10:27,769
data that will be surplus and

322
00:10:27,769 --> 00:10:29,329
which will allow in particular to

323
00:10:29,329 --> 00:10:30,019
store information,

324
00:10:30,019 --> 00:10:31,699
that is to say that when you have a

325
00:10:31,699 --> 00:10:34,550
2 gigabyte flash you do not  you don't have 2 gigs

326
00:10:34,550 --> 00:10:37,040
you have two gigs +64 times the number

327
00:10:37,040 --> 00:10:39,860
of pages oct is available, that is to say

328
00:10:39,860 --> 00:10:41,329
that in fact the flash is more than 2

329
00:10:41,329 --> 00:10:44,420
gigs and this space is generally

330
00:10:44,420 --> 00:10:45,920
used for what are called codes

331
00:10:45,920 --> 00:10:48,079
error correctors but not that we

332
00:10:48,079 --> 00:10:50,060
will have the opportunity to talk about it again after the

333
00:10:50,060 --> 00:10:51,589
error correcting codes of the error correcting codes

334
00:10:51,589 --> 00:10:52,610
this is what is

335
00:10:52,610 --> 00:10:54,709
called the oc c which uses in particular

336
00:10:54,709 --> 00:10:56,300
without using pardon to detect

337
00:10:56,300 --> 00:10:57,740
flows  flip because the

338
00:10:57,740 --> 00:10:59,959
nand technology is not 100% reliable when you

339
00:10:59,959 --> 00:11:01,519
do writes in the pages

340
00:11:01,519 --> 00:11:03,769
sometimes because the storage cell

341
00:11:03,769 --> 00:11:05,420
is a little worn out in some places

342
00:11:05,420 --> 00:11:07,790
etc. there are beats that will go from 0

343
00:11:07,790 --> 00:11:11,000
to 1  or 2 to 0 and it's quite common and

344
00:11:11,000 --> 00:11:12,350
that's a bit pro  problematic

345
00:11:12,350 --> 00:11:13,699
because suddenly when we extract

346
00:11:13,699 --> 00:11:14,720
firmware sometimes we have beats that

347
00:11:14,720 --> 00:11:16,760
don't match and that will complicate the

348
00:11:16,760 --> 00:11:18,250
task of analyzing the firmware

349
00:11:18,250 --> 00:11:20,860
dance dance block of 64 bytes that we

350
00:11:20,860 --> 00:11:22,300
saw previously so we have codes

351
00:11:22,300 --> 00:11:23,350
error correctors whose

352
00:11:23,350 --> 00:11:24,700
objective is to be able to recover

353
00:11:24,700 --> 00:11:27,190
errors on 1 2 3 4 5 6 7 8 bits

354
00:11:27,190 --> 00:11:28,290
according to the size of the code

355
00:11:28,290 --> 00:11:30,510
generally these

356
00:11:30,510 --> 00:11:32,650
correcting error correction codes are based on a

357
00:11:32,650 --> 00:11:34,150
system and an algo that we  calls ch

358
00:11:34,150 --> 00:11:36,730
which is the most common in flashes

359
00:11:36,730 --> 00:11:38,980
it's not just that the south has insisted on that

360
00:11:38,980 --> 00:11:40,870
you often have bch but not only

361
00:11:40,870 --> 00:11:42,340
because there are certain vendors

362
00:11:42,340 --> 00:11:43,450
certain manufacturers who develop

363
00:11:43,450 --> 00:11:45,730
their own algorithms to make

364
00:11:45,730 --> 00:11:47,560
leaving its  especially those who

365
00:11:47,560 --> 00:11:49,120
integrate demand controllers into

366
00:11:49,120 --> 00:11:51,790
systems on chips I'm thinking of broadcom I

367
00:11:51,790 --> 00:11:53,020
'm thinking of others other and other

368
00:11:53,020 --> 00:11:54,340
equipment and who have their own

369
00:11:54,340 --> 00:11:55,660
mechanism in fact they have their own

370
00:11:55,660 --> 00:11:58,060
way of coming to write the  s data

371
00:11:58,060 --> 00:11:59,860
from code detection code

372
00:11:59,860 --> 00:12:01,570
error corrections and when we come

373
00:12:01,570 --> 00:12:03,070
across that again we have to

374
00:12:03,070 --> 00:12:04,370
adapt

375
00:12:04,370 --> 00:12:07,640
in addition to that the storage memory and

376
00:12:07,640 --> 00:12:10,170
being quite limited and above all based

377
00:12:10,170 --> 00:12:12,840
on portland and suse systems

378
00:12:12,840 --> 00:12:14,220
as the use or its view

379
00:12:14,220 --> 00:12:16,350
of the usb keys they are given for

380
00:12:16,350 --> 00:12:17,790
a million writes have a million

381
00:12:17,790 --> 00:12:19,200
rewrites the same for the sd cards

382
00:12:19,200 --> 00:12:20,400
because in fact the

383
00:12:20,400 --> 00:12:22,440
storage cells wear out regularly and therefore

384
00:12:22,440 --> 00:12:24,600
to avoid having dead cells

385
00:12:24,600 --> 00:12:26,790
too close finally death of a mother too

386
00:12:26,790 --> 00:12:28,590
quickly what the

387
00:12:28,590 --> 00:12:29,460
hour control systems do is they will

388
00:12:29,460 --> 00:12:32,490
try to distribute the wear and tear the even

389
00:12:32,490 --> 00:12:34,530
use of storage deaths over the set

390
00:12:34,530 --> 00:12:36,090
cells available in order to

391
00:12:36,090 --> 00:12:38,430
increase the life of the memory

392
00:12:38,430 --> 00:12:40,620
so that is typically present and

393
00:12:40,620 --> 00:12:41,730
that is also why for those who

394
00:12:41,730 --> 00:12:42,810
do forensic that you are told that these

395
00:12:42,810 --> 00:12:45,240
are usb memories, in particular usb flash memories

396
00:12:45,240 --> 00:12:48,630
usb keys or other ca  it is

397
00:12:48,630 --> 00:12:50,100
very difficult to completely erase

398
00:12:50,100 --> 00:12:51,270
the content because in fact each

399
00:12:51,270 --> 00:12:52,740
time you are writing you are

400
00:12:52,740 --> 00:12:54,270
not rewriting on a blog that already

401
00:12:54,270 --> 00:12:56,550
exists but savvy and allocate a block

402
00:12:56,550 --> 00:12:58,200
elsewhere and therefore you have to do this

403
00:12:58,200 --> 00:12:59,520
many times to  be sure to have

404
00:12:59,520 --> 00:13:00,810
rewritten all the blocks at least once

405
00:13:00,810 --> 00:13:02,280
and it depends a lot on the algae

406
00:13:02,280 --> 00:13:04,710
oddo raises ling

407
00:13:04,710 --> 00:13:07,770
wear distribution system and so keep without

408
00:13:07,770 --> 00:13:08,790
also in mind if you do forensic

409
00:13:08,790 --> 00:13:10,850
that's why  the standards of

410
00:13:10,850 --> 00:13:13,020
waiting that we find on flashes

411
00:13:13,020 --> 00:13:14,580
finally flash memories or usb key

412
00:13:14,580 --> 00:13:15,990
it is always a little more

413
00:13:15,990 --> 00:13:17,280
complicated and longer than what we have

414
00:13:17,280 --> 00:13:19,920
on the usual hard disks at the level

415
00:13:19,920 --> 00:13:21,330
of the bone we typically find

416
00:13:21,330 --> 00:13:23,340
the name mtd port memory

417
00:13:23,340 --> 00:13:25,610
technology device is generally a

418
00:13:25,610 --> 00:13:28,500
type of device which is represented on

419
00:13:28,500 --> 00:13:30,510
the excitation or linux genre stages and

420
00:13:30,510 --> 00:13:31,800
which needs a particular driver

421
00:13:31,800 --> 00:13:33,420
between often the mtd point k o driver

422
00:13:33,420 --> 00:13:35,130
which is often used and which  allows in

423
00:13:35,130 --> 00:13:36,630
particular to manage the Zionist party of the

424
00:13:36,630 --> 00:13:38,270
party on partitions in for

425
00:13:38,270 --> 00:13:40,200
anglicisms and therefore in its partitions

426
00:13:40,200 --> 00:13:42,690
will find different tricks such as for

427
00:13:42,690 --> 00:13:46,350
example a cutting in size of the

428
00:13:46,350 --> 00:13:47,970
memory of the dead flash say that from a

429
00:13:47,970 --> 00:13:49,530
point of view of the bone the  flash memory

430
00:13:49,530 --> 00:13:50,850
is like a hard disk in which we

431
00:13:50,850 --> 00:13:52,290
will be able to write and there will be certain

432
00:13:52,290 --> 00:13:54,510
partitions which will be accessible that

433
00:13:54,510 --> 00:13:55,740
means that pigments that this

434
00:13:55,740 --> 00:13:57,690
data there generally it is inserted

435
00:13:57,690 --> 00:13:59,400
directly at the carnal level lordat

436
00:13:59,400 --> 00:14:01,560
compilation we can also the sphere

437
00:14:01,560 --> 00:14:03,090
dynamically thereafter with certain

438
00:14:03,090 --> 00:14:05,220
limited tools of 8 x or linux but

439
00:14:05,220 --> 00:14:06,270
roughly what we can do is to

440
00:14:06,270 --> 00:14:08,130
already have an idea where the

441
00:14:08,130 --> 00:14:09,900
bootloader is where the kernel is

442
00:14:09,900 --> 00:14:11,160
where the fs routes are found you have

443
00:14:11,160 --> 00:14:12,690
root access  you have access to that so

444
00:14:12,690 --> 00:14:14,910
already with a scale axis you can

445
00:14:14,910 --> 00:14:16,840
retrieve all this information

446
00:14:16,840 --> 00:14:18,550
is stored the data and what types

447
00:14:18,550 --> 00:14:20,050
of data are stored where in

448
00:14:20,050 --> 00:14:21,360
da  ns my flash memory

449
00:14:21,360 --> 00:14:24,160
and of course to accompany all to

450
00:14:24,160 --> 00:14:27,040
dance mtd in ltd partitions we will

451
00:14:27,040 --> 00:14:28,720
find specialized file systems

452
00:14:28,720 --> 00:14:30,940
or not moreover which will

453
00:14:30,940 --> 00:14:32,830
allow access to the files which

454
00:14:32,830 --> 00:14:34,090
are used by the system in particular

455
00:14:34,090 --> 00:14:36,430
the root partition and that  is in these

456
00:14:36,430 --> 00:14:37,780
file systems we have

457
00:14:37,780 --> 00:14:39,190
file systems that are said to be specialized

458
00:14:39,190 --> 00:14:41,650
in nand game flash memory but I

459
00:14:41,650 --> 00:14:43,540
put an asterisk on the first one

460
00:14:43,540 --> 00:14:44,650
because it is not typically

461
00:14:44,650 --> 00:14:46,180
specialized in flash memory storage

462
00:14:46,180 --> 00:14:48,310
but we find  a lot in

463
00:14:48,310 --> 00:14:49,870
the embedded because it's a

464
00:14:49,870 --> 00:14:51,250
compressed file system so very useful

465
00:14:51,250 --> 00:14:52,420
especially when you don't have a lot of

466
00:14:52,420 --> 00:14:54,220
space it's the son it's the sheed

467
00:14:54,220 --> 00:14:56,440
also to display squash and fes everything

468
00:14:56,440 --> 00:14:57,730
you need  does little hardware rivers or

469
00:14:57,730 --> 00:15:00,610
as for the npd of flash memories or who

470
00:15:00,610 --> 00:15:01,660
are interested in

471
00:15:01,660 --> 00:15:04,330
router forms or other it is necessarily finally

472
00:15:04,330 --> 00:15:05,500
it is obligatory you have at least had

473
00:15:05,500 --> 00:15:07,360
to do once this type of

474
00:15:07,360 --> 00:15:10,300
file format o  n there are others of course the ffs

475
00:15:10,300 --> 00:15:11,620
two for example very used on

476
00:15:11,620 --> 00:15:14,080
android gfs2 than another

477
00:15:14,080 --> 00:15:15,460
journaling file system and the version

478
00:15:15,460 --> 00:15:17,920
in version 2 which has improved support in

479
00:15:17,920 --> 00:15:19,900
particular for nand storage systems

480
00:15:19,900 --> 00:15:22,360
and we have one of the most  common in any

481
00:15:22,360 --> 00:15:23,530
case nowadays that they have undergone effect

482
00:15:23,530 --> 00:15:25,390
which is based on the system u country an

483
00:15:25,390 --> 00:15:27,400
output of blocks imagine I

484
00:15:27,400 --> 00:15:28,540
spoke to you about it later in a little more

485
00:15:28,540 --> 00:15:30,640
detail but roughly speaking this

486
00:15:30,640 --> 00:15:32,980
btrfs file system is  perhaps a start

487
00:15:32,980 --> 00:15:34,840
of the most efficient in any case at

488
00:15:34,840 --> 00:15:36,340
the present time and that is why it

489
00:15:36,340 --> 00:15:38,180
is very useful very used

490
00:15:38,180 --> 00:15:40,530
glued buttocks as I said

491
00:15:40,530 --> 00:15:42,420
compressed file system not at all optimized

492
00:15:42,420 --> 00:15:44,460
for storage moors in other words  it will

493
00:15:44,460 --> 00:15:46,260
cause a lot of writing which will

494
00:15:46,260 --> 00:15:48,000
consume a lot of cells and not just

495
00:15:48,000 --> 00:15:50,130
one or two and suddenly it will use up

496
00:15:50,130 --> 00:15:52,020
your storage system much faster,

497
00:15:52,020 --> 00:15:54,330
especially the flash memory the

498
00:15:54,330 --> 00:15:56,860
file system decompress in ram

499
00:15:56,860 --> 00:15:58,900
thank you the file system  iers to

500
00:15:58,900 --> 00:16:00,850
decompress in ram and we find it

501
00:16:00,850 --> 00:16:02,380
very used on flashes and this country

502
00:16:02,380 --> 00:16:04,150
but that means that here typically

503
00:16:04,150 --> 00:16:05,800
when we make a modification of a

504
00:16:05,800 --> 00:16:06,970
file system or make

505
00:16:06,970 --> 00:16:08,640
modification

506
00:16:08,640 --> 00:16:10,529
inram

507
00:16:10,529 --> 00:16:13,040
necessarily on the

508
00:16:13,040 --> 00:16:15,930
ffs disk of it  is optimized for

509
00:16:15,930 --> 00:16:17,459
nantes storage why because in fact which I

510
00:16:17,459 --> 00:16:19,050
pass it goes very well in the slides

511
00:16:19,050 --> 00:16:22,350
here but roughly speaking we have a storage

512
00:16:22,350 --> 00:16:24,720
which matches the size of the page

513
00:16:24,720 --> 00:16:26,399
used in the flash so basically it will

514
00:16:26,399 --> 00:16:28,589
use in a way  we will say

515
00:16:28,589 --> 00:16:30,509
intelligent the two missions you

516
00:16:30,509 --> 00:16:32,189
choose for example range and the 64

517
00:16:32,189 --> 00:16:34,470
bytes of this father to nothing and it uses

518
00:16:34,470 --> 00:16:35,670
this father area to store

519
00:16:35,670 --> 00:16:37,199
metadata and in particular the error

520
00:16:37,199 --> 00:16:38,399
correcting codes but it is not only

521
00:16:38,399 --> 00:16:40,290
that it puts the oc  c including error

522
00:16:40,290 --> 00:16:41,309
detection and correction codes

523
00:16:41,309 --> 00:16:43,110
but in addition a side of that it will also

524
00:16:43,110 --> 00:16:46,070
store metadata on the system

525
00:16:46,070 --> 00:16:48,260
I did fes 2-1 to the file system

526
00:16:48,260 --> 00:16:50,390
same size of blogs that match the

527
00:16:50,390 --> 00:16:52,190
size of the  page by  against it a little

528
00:16:52,190 --> 00:16:53,270
longer because suddenly for

529
00:16:53,270 --> 00:16:55,340
this one you have to pass all the blogs

530
00:16:55,340 --> 00:16:57,230
which are used to find the

531
00:16:57,230 --> 00:16:59,060
file system it is therefore very slow

532
00:16:59,060 --> 00:17:00,980
to mount when you make a world for

533
00:17:00,980 --> 00:17:02,120
example of this kind of partitions that

534
00:17:02,120 --> 00:17:03,650
takes time on the other hand we heard

535
00:17:03,650 --> 00:17:05,660
read / write access it remains really

536
00:17:05,660 --> 00:17:07,880
good and unlike in particular what

537
00:17:07,880 --> 00:17:09,530
I did just like the 7 case also for

538
00:17:09,530 --> 00:17:12,800
ja ffs two there are com effects of the ffs

539
00:17:12,800 --> 00:17:14,750
two have read write access on  the

540
00:17:14,750 --> 00:17:15,859
fath system is only used if you

541
00:17:15,859 --> 00:17:18,500
write to a file on this site and

542
00:17:18,500 --> 00:17:20,150
the files it is automatically finally a

543
00:17:20,150 --> 00:17:21,829
few delays it is

544
00:17:21,829 --> 00:17:23,060
automatically replicated in

545
00:17:23,060 --> 00:17:25,400
flash memories because it is flash companion of

546
00:17:25,400 --> 00:17:26,300
its small

547
00:17:26,300 --> 00:17:28,760
and ubs which is therefore  the

548
00:17:28,760 --> 00:17:30,440
file system that we find the most so it

549
00:17:30,440 --> 00:17:31,850
's quite a complex estac we

550
00:17:31,850 --> 00:17:33,590
go from the ltd device through what

551
00:17:33,590 --> 00:17:34,880
they call the smes and the physical

552
00:17:34,880 --> 00:17:36,650
eras block we know what a physical at

553
00:17:36,650 --> 00:17:38,810
the risks we are  on on  ubs this

554
00:17:38,810 --> 00:17:41,120
time it's a page in fact it

555
00:17:41,120 --> 00:17:42,920
represents a block of storage which makes

556
00:17:42,920 --> 00:17:44,690
the size of a page the size of an ace

557
00:17:44,690 --> 00:17:47,360
block and the system u pays it's a

558
00:17:47,360 --> 00:17:48,860
system that will use that will use me  calling

559
00:17:48,860 --> 00:17:50,390
logical blogs on physical blocks

560
00:17:50,390 --> 00:17:52,610
avoids giving it away

561
00:17:52,610 --> 00:17:53,750
, that is to say that if you ever have

562
00:17:53,750 --> 00:17:55,250
data that moves or files

563
00:17:55,250 --> 00:17:57,500
that are a little split or on

564
00:17:57,500 --> 00:17:59,060
which they have rewritten imagine that we

565
00:17:59,060 --> 00:18:01,700
would see writing the end here of this file

566
00:18:01,700 --> 00:18:03,500
we are just going to change the location of the

567
00:18:03,500 --> 00:18:05,540
last of the last b we are just

568
00:18:05,540 --> 00:18:07,670
going to update and if this structure

569
00:18:07,670 --> 00:18:10,190
and add a little but here it

570
00:18:10,190 --> 00:18:11,930
avoids doing too much writing it  is

571
00:18:11,930 --> 00:18:13,130
a file system which is fast

572
00:18:13,130 --> 00:18:14,510
which showed quickly who is

573
00:18:14,510 --> 00:18:15,830
journaling which also supports

574
00:18:15,830 --> 00:18:17,990
compression which is very used and which has

575
00:18:17,990 --> 00:18:19,910
read-write access except in the case of

576
00:18:19,910 --> 00:18:22,460
a particular configuration and therefore under

577
00:18:22,460 --> 00:18:24,260
linux we have a lot of tools to create

578
00:18:24,260 --> 00:18:25,760
all these systems  files have created at

579
00:18:25,760 --> 00:18:27,440
the fo  is the binaries that are fine

580
00:18:27,440 --> 00:18:30,590
kernels and system dfas generally

581
00:18:30,590 --> 00:18:32,180
you have file system creation suites

582
00:18:32,180 --> 00:18:34,520
like byd route or yoke rates which

583
00:18:34,520 --> 00:18:36,320
are used quite often the vast

584
00:18:36,320 --> 00:18:37,550
majority of them use busybox

585
00:18:37,550 --> 00:18:39,890
busybox a shell implementation

586
00:18:39,890 --> 00:18:41,450
plus utilities  linux but in live mode

587
00:18:41,450 --> 00:18:43,850
it really weighs nothing and it's

588
00:18:43,850 --> 00:18:45,080
totally configurable you can

589
00:18:45,080 --> 00:18:47,050
allow the presence of a binary or

590
00:18:47,050 --> 00:18:49,700


591
00:18:49,700 --> 00:18:51,050
whatever it's a sort of configurable command line toolset

592
00:18:51,050 --> 00:18:52,820
and it's very very very often  present

593
00:18:52,820 --> 00:18:54,620
and that's where it's quite funny is that

594
00:18:54,620 --> 00:18:56,450
in fact buzz ebook to work

595
00:18:56,450 --> 00:18:57,530
it only works with symbolic goods

596
00:18:57,530 --> 00:18:58,940
that is to say that if you want to have the

597
00:18:58,940 --> 00:19:00,710
ls command you will point

598
00:19:00,710 --> 00:19:01,700
the  command and leaves with a

599
00:19:01,700 --> 00:19:03,950
symbolic air on bbox and he will

600
00:19:03,950 --> 00:19:05,540
detect that it has been called with ls he

601
00:19:05,540 --> 00:19:07,430
will execute the command and the ess and for

602
00:19:07,430 --> 00:19:08,480
the record in fact you

603
00:19:08,480 --> 00:19:10,040
often have buzz boxes which allow you to do

604
00:19:10,040 --> 00:19:11,660
much more  more commands than the

605
00:19:11,660 --> 00:19:13,130
simple binary that you find in the

606
00:19:13,130 --> 00:19:15,140
wise big mustache us has been especially

607
00:19:15,140 --> 00:19:17,370
on embedded systems

608
00:19:17,370 --> 00:19:20,070
all that to get to the third

609
00:19:20,070 --> 00:19:21,630
part of this presentation the

610
00:19:21,630 --> 00:19:23,040
problems that post

611
00:19:23,040 --> 00:19:24,720
exploitation encounters so here we get to the

612
00:19:24,720 --> 00:19:27,510
interesting heart of the problem  so

613
00:19:27,510 --> 00:19:28,680
I try to also propose some

614
00:19:28,680 --> 00:19:29,910
solutions but we'll see what it's worth

615
00:19:29,910 --> 00:19:32,790
so remember we're on the road is the

616
00:19:32,790 --> 00:19:33,840
big question that's to say but that's

617
00:19:33,840 --> 00:19:34,710
good we're tough what are we

618
00:19:34,710 --> 00:19:35,940
what-  what we can do afterwards and

619
00:19:35,940 --> 00:19:37,440
there are plenty of possibilities I don't want to

620
00:19:37,440 --> 00:19:38,820
talk about all these possibilities during

621
00:19:38,820 --> 00:19:40,650
toc but the first is to

622
00:19:40,650 --> 00:19:42,720
play them mirail style I'm going to play the

623
00:19:42,720 --> 00:19:44,100
mirail style in fact we're going to drop a

624
00:19:44,100 --> 00:19:46,620
binary in  ram is the binary will be

625
00:19:46,620 --> 00:19:48,330
executed and will create a botnet

626
00:19:48,330 --> 00:19:50,370
for example of two peripherals

627
00:19:50,370 --> 00:19:52,140
or compromised equipment and from there

628
00:19:52,140 --> 00:19:53,610
we will be able to do denial served on the

629
00:19:53,610 --> 00:19:55,230
entire planet we know that we experienced a

630
00:19:55,230 --> 00:19:56,460
small  little l  'era mirail see what

631
00:19:56,460 --> 00:19:59,100
i'm talking about we can play it watchdoc style

632
00:19:59,100 --> 00:20:00,510
you know the game ubisoft intends to return

633
00:20:00,510 --> 00:20:02,490
by hacking systems we intend here

634
00:20:02,490 --> 00:20:03,510
to bounce back anyway getting

635
00:20:03,510 --> 00:20:05,309
worse from a compromised system

636
00:20:05,309 --> 00:20:06,240
could hackers and others

637
00:20:06,240 --> 00:20:08,160
systems and then bounce back

638
00:20:08,160 --> 00:20:09,809
then pivot to arrive at

639
00:20:09,809 --> 00:20:11,880
compromising all the systems or we

640
00:20:11,880 --> 00:20:13,080
could really do it hacker style,

641
00:20:13,080 --> 00:20:15,270
that is to say well you are a bit of that nasty

642
00:20:15,270 --> 00:20:16,700
and you absolutely want to

643
00:20:16,700 --> 00:20:18,780
take complete control of the system

644
00:20:18,780 --> 00:20:20,100
and not  only being able to

645
00:20:20,100 --> 00:20:22,140
execute commands and well that's kind of what

646
00:20:22,140 --> 00:20:23,490
I'm suggesting you do here so it's

647
00:20:23,490 --> 00:20:25,080
not necessarily the ski will be adapted

648
00:20:25,080 --> 00:20:27,330
adopted as in terms of approach by

649
00:20:27,330 --> 00:20:28,830
real attackers who will more

650
00:20:28,830 --> 00:20:30,120
certainly go  on the side of the mirail,

651
00:20:30,120 --> 00:20:31,890
that is to say after we will execute a

652
00:20:31,890 --> 00:20:33,240
binary and we will do we will use

653
00:20:33,240 --> 00:20:34,470
the platform to make a rebound for

654
00:20:34,470 --> 00:20:37,260
example but it is also more put

655
00:20:37,260 --> 00:20:38,460
chalandon is more interesting to go

656
00:20:38,460 --> 00:20:40,200
dig into what we can do so I

657
00:20:40,200 --> 00:20:42,120
'm going to base this part of the toc on a

658
00:20:42,120 --> 00:20:44,000
case study of a router of which I will scrupulously keep silent about

659
00:20:44,000 --> 00:20:47,270
the no don't look

660
00:20:47,270 --> 00:20:49,170
it's just to illustrate the point

661
00:20:49,170 --> 00:20:50,550
but it's valid for any type

662
00:20:50,550 --> 00:20:52,559
of equipment again and I will

663
00:20:52,559 --> 00:20:53,910
remind them during the conclusion there are

664
00:20:53,910 --> 00:20:55,020
certainly other

665
00:20:55,020 --> 00:20:56,610
security mechanisms that exist that are not mentioned

666
00:20:56,610 --> 00:20:59,040
in this in this talk I will

667
00:20:59,040 --> 00:21:00,240
quickly remind them towards the end but if you

668
00:21:00,240 --> 00:21:01,620
want to discuss this mechanism has not

669
00:21:01,620 --> 00:21:03,000
then don't hesitate until you're ready after

670
00:21:03,000 --> 00:21:06,330
the con so what do we have we have a

671
00:21:06,330 --> 00:21:07,830
vulnerability let's take the most

672
00:21:07,830 --> 00:21:09,450
classic with a sky escape I can

673
00:21:09,450 --> 00:21:11,220
issue commands on the

674
00:21:11,220 --> 00:21:14,520
command system ideally on the way  well, I could

675
00:21:14,520 --> 00:21:15,720
n't get there this morning, you can

676
00:21:15,720 --> 00:21:17,550
imagine that if we have

677
00:21:17,550 --> 00:21:19,230
commands executed on the system, there are

678
00:21:19,230 --> 00:21:20,670
also risks that we will harm systems

679
00:21:20,670 --> 00:21:23,130
and when we study this kind of

680
00:21:23,130 --> 00:21:25,110
vulnerability when we are a  researcher

681
00:21:25,110 --> 00:21:27,420
in s  security we perform we provide ourselves with

682
00:21:27,420 --> 00:21:29,860
the same equipment here imagine I

683
00:21:29,860 --> 00:21:31,540
bought equipment a wifi router which

684
00:21:31,540 --> 00:21:34,240
is similar to the one that interests me

685
00:21:34,240 --> 00:21:35,650
and suddenly I can look for a generality

686
00:21:35,650 --> 00:21:37,870
in it and to make my life easier

687
00:21:37,870 --> 00:21:39,370
because I know that  in the process

688
00:21:39,370 --> 00:21:41,830
the device will inevitably be lighter the abandoned device

689
00:21:41,830 --> 00:21:44,620
I will unsolder the flash is soldered a

690
00:21:44,620 --> 00:21:45,970
small socket and the small photo

691
00:21:45,970 --> 00:21:47,620
you have here in the slide it is a

692
00:21:47,620 --> 00:21:49,810
kind of socket there is exactly the same

693
00:21:49,810 --> 00:21:51,940
imprint as a flash mob 48 that  you may

694
00:21:51,940 --> 00:21:53,680
wish in place and a hassle to

695
00:21:53,680 --> 00:21:55,360
weld if you are if you are trying to

696
00:21:55,360 --> 00:21:58,780
do this take your time but

697
00:21:58,780 --> 00:22:00,310
once you have the south east of the

698
00:22:00,310 --> 00:22:01,630
sock in place after of

699
00:22:01,630 --> 00:22:02,860
course bunkers and the influx of downforce  this

700
00:22:02,860 --> 00:22:05,260
flash you can insert it back in and

701
00:22:05,260 --> 00:22:06,880
with appendix programmers

702
00:22:06,880 --> 00:22:08,440
first make a theme of the flash and then

703
00:22:08,440 --> 00:22:10,450
restore the contents of the flash if you

704
00:22:10,450 --> 00:22:12,340
can do trial and error sig ii

705
00:22:12,340 --> 00:22:14,710
to facilitate compromise

706
00:22:14,710 --> 00:22:16,530
or facilitate  té in any case the

707
00:22:16,530 --> 00:22:18,790
third possible tests third example

708
00:22:18,790 --> 00:22:19,780
also if we really do

709
00:22:19,780 --> 00:22:21,040
hardware hac in some cases we have access to

710
00:22:21,040 --> 00:22:22,870
a debug console which can facilitate

711
00:22:22,870 --> 00:22:24,670
the search for vulnerabilities as

712
00:22:24,670 --> 00:22:25,930
a fine operator when

713
00:22:25,930 --> 00:22:27,400
we exploit  remote device suddenly

714
00:22:27,400 --> 00:22:28,720
we will only have the shell script

715
00:22:28,720 --> 00:22:30,820
to work but we will use these

716
00:22:30,820 --> 00:22:32,800
two axes and tricks there,

717
00:22:32,800 --> 00:22:34,300
namely access to the flash or the fact of

718
00:22:34,300 --> 00:22:36,310
making bricks and equipment and that the

719
00:22:36,310 --> 00:22:38,290
console  syria to facilitate the

720
00:22:38,290 --> 00:22:40,900
exploitation phase and that your there we want for

721
00:22:40,900 --> 00:22:42,460
example to modify the system look at an

722
00:22:42,460 --> 00:22:44,320
access on this system we want to be able for

723
00:22:44,320 --> 00:22:46,540
example to deactivate updates the

724
00:22:46,540 --> 00:22:47,830
updates it is not our friends when we

725
00:22:47,830 --> 00:22:49,170
do the  compromise when we

726
00:22:49,170 --> 00:22:51,070
do access matters in particular but because

727
00:22:51,070 --> 00:22:52,540
imagining that the router on

728
00:22:52,540 --> 00:22:53,710
the update overnight any

729
00:22:53,710 --> 00:22:55,300
system is going to be stuck in the trash

730
00:22:55,300 --> 00:22:57,070
and all your pretty modifications are going to

731
00:22:57,070 --> 00:22:59,920
be changed not  terrible or you

732
00:22:59,920 --> 00:23:01,420
're really nice you say to yourself

733
00:23:01,420 --> 00:23:02,740
it would be really cool to put a

734
00:23:02,740 --> 00:23:03,970
double green open and on a

735
00:23:03,970 --> 00:23:05,950
rotten road which is all vulnerable well yes

736
00:23:05,950 --> 00:23:06,970
why not it could be

737
00:23:06,970 --> 00:23:09,430
interesting so we will talk

738
00:23:09,430 --> 00:23:11,470
about all that the first pitfall  which you

739
00:23:11,470 --> 00:23:12,850
can face are the

740
00:23:12,850 --> 00:23:14,920
henri-dominique file systems in other words

741
00:23:14,920 --> 00:23:16,330
you arrive on the system you want to

742
00:23:16,330 --> 00:23:18,100
file a backdoor or a tool to

743
00:23:18,100 --> 00:23:19,720
do bio thing you are going to put

744
00:23:19,720 --> 00:23:21,070
in sage tmp when the great us the

745
00:23:21,070 --> 00:23:22,450
vast majority of the gains on the other hand

746
00:23:22,450 --> 00:23:23,410
when you want to maintain

747
00:23:23,410 --> 00:23:25,090
maintain your access forgiveness put a

748
00:23:25,090 --> 00:23:26,410
ring on time or other it becomes more

749
00:23:26,410 --> 00:23:27,460
problematic because there are

750
00:23:27,460 --> 00:23:28,690
file systems on which we

751
00:23:28,690 --> 00:23:30,850
cannot write on which we have a

752
00:23:30,850 --> 00:23:32,830
curtain partition the dip for

753
00:23:32,830 --> 00:23:34,540
example tape  fs squash is made on

754
00:23:34,540 --> 00:23:35,830
some systems so mounted in

755
00:23:35,830 --> 00:23:37,270
ram and it's henri denis you can't

756
00:23:37,270 --> 00:23:39,040
modify the content you have the slash

757
00:23:39,040 --> 00:23:40,810
hockey you want  it put a thing in his

758
00:23:40,810 --> 00:23:42,479
ankle or whatever there is

759
00:23:42,479 --> 00:23:44,849
no access to lie and orrit mint comma

760
00:23:44,849 --> 00:23:46,469
r w as we usually do with the

761
00:23:46,469 --> 00:23:48,989
internship of course after on android when

762
00:23:48,989 --> 00:23:50,339
you can get write access

763
00:23:50,339 --> 00:23:52,200
it doesn't work no  more so it's

764
00:23:52,200 --> 00:23:54,029
problematic only we have

765
00:23:54,029 --> 00:23:56,159
workarounds there are solutions

766
00:23:56,159 --> 00:23:57,839
the solution is a bit risky but

767
00:23:57,839 --> 00:24:00,149
consists in saying ok the system eye

768
00:24:00,149 --> 00:24:01,589
prevents me from rewriting on the other hand I know

769
00:24:01,589 --> 00:24:02,849
that the data is stored in such a place

770
00:24:02,849 --> 00:24:04,739
in the  flash remember with the mtd

771
00:24:04,739 --> 00:24:06,239
we have forgiveness the partitioning we

772
00:24:06,239 --> 00:24:08,070
know exactly where to go so if i want to

773
00:24:08,070 --> 00:24:09,779
rewrite the fact system roots because

774
00:24:09,779 --> 00:24:11,039
what to do is extract the

775
00:24:11,039 --> 00:24:12,179
fascist and even root closed

776
00:24:12,179 --> 00:24:14,549
modifications get a new

777
00:24:14,549 --> 00:24:16,499
scotch image and  fez for example and re-

778
00:24:16,499 --> 00:24:18,359
file it directly in the flash

779
00:24:18,359 --> 00:24:21,359
via the system commands a

780
00:24:21,359 --> 00:24:23,429
simple cpf the case for this kind of

781
00:24:23,429 --> 00:24:25,529
manipulation so before you must of course

782
00:24:25,529 --> 00:24:26,820
take care of 2 mp of sys file  tem

783
00:24:26,820 --> 00:24:29,399
and then we go to the patch and I'll

784
00:24:29,399 --> 00:24:30,989
pass on the details on the patch agen de

785
00:24:30,989 --> 00:24:33,059
squash fs we used facts are

786
00:24:33,059 --> 00:24:34,679
modified files reminds to tape

787
00:24:34,679 --> 00:24:36,690
buttocks etc you must have no

788
00:24:36,690 --> 00:24:38,459
home your isp system to

789
00:24:38,459 --> 00:24:39,629
install your super backdoor from

790
00:24:39,629 --> 00:24:41,279
death you have to put it back in the flash

791
00:24:41,279 --> 00:24:42,749
and so to put it back in the flash

792
00:24:42,749 --> 00:24:46,559
we will copy the backup the fire image of the

793
00:24:46,559 --> 00:24:48,659
fal system that we modified and we will

794
00:24:48,659 --> 00:24:50,700
re-file it with root access that's

795
00:24:50,700 --> 00:24:52,109
all  quite doable with root access

796
00:24:52,109 --> 00:24:54,599
little trick which I have bitten

797
00:24:54,599 --> 00:24:56,759
my fingers quite a few times do

798
00:24:56,759 --> 00:24:59,519
not use the stage of the mtx stages we could

799
00:24:59,519 --> 00:25:01,379
be tempted to do it with x number of

800
00:25:01,379 --> 00:25:03,269
the partition of a problem c  is if you

801
00:25:03,269 --> 00:25:04,649
do that you will make a write

802
00:25:04,649 --> 00:25:07,109
that will not be synchronized and that will

803
00:25:07,109 --> 00:25:09,209
not be with a device of the type

804
00:25:09,209 --> 00:25:12,359
blocks device blocks therefore on linux and

805
00:25:12,359 --> 00:25:14,399
prefer to use this age of mtd block

806
00:25:14,399 --> 00:25:16,889
xx I lost a lot of time with this

807
00:25:16,889 --> 00:25:18,089
with  that because every time I

808
00:25:18,089 --> 00:25:19,559
repeat  was writing the flash I had errors

809
00:25:19,559 --> 00:25:21,119
of these it is precisely

810
00:25:21,119 --> 00:25:22,469
error correcting codes because

811
00:25:22,469 --> 00:25:23,549
the writing was not done as it

812
00:25:23,549 --> 00:25:24,989
should while with the use

813
00:25:24,989 --> 00:25:26,219
of dave mtd bloc it was much

814
00:25:26,219 --> 00:25:29,339
better the same mtd  block xx that you

815
00:25:29,339 --> 00:25:30,599
have here managed by a driver is

816
00:25:30,599 --> 00:25:32,190
called were blocks that must

817
00:25:32,190 --> 00:25:33,389
also be loaded to be able to

818
00:25:33,389 --> 00:25:35,219
access them but in the large add

819
00:25:35,219 --> 00:25:36,570
targets in any case only one that I could

820
00:25:36,570 --> 00:25:38,009
test it was present it is necessary  do not

821
00:25:38,009 --> 00:25:40,559
hesitate we name the file system

822
00:25:40,559 --> 00:25:42,749
scotch fs through usb ports

823
00:25:42,749 --> 00:25:44,579
accessible external storage or

824
00:25:44,579 --> 00:25:46,799
directly from the network we can make a 4

825
00:25:46,799 --> 00:25:48,479
for example davd event and blocks 1 and

826
00:25:48,479 --> 00:25:50,279
sent saint vianney of 4.6 our case

827
00:25:50,279 --> 00:25:52,499
very present and busybox  if it is not

828
00:25:52,499 --> 00:25:54,329
present on the fal'cie this theme in a

829
00:25:54,329 --> 00:25:55,860
symbolic link check that it is not fooled

830
00:25:55,860 --> 00:25:57,059
books directly by typing the command

831
00:25:57,059 --> 00:25:59,130
busybox hillis all the

832
00:25:59,130 --> 00:26:01,230
commands supported on your side and on

833
00:26:01,230 --> 00:26:02,640
your pc you put  one and four in

834
00:26:02,640 --> 00:26:03,720
eco  ute and you redirect the fire

835
00:26:03,720 --> 00:26:05,250
directly to a binary file we

836
00:26:05,250 --> 00:26:06,660
phase analysis i stem have made the

837
00:26:06,660 --> 00:26:08,670
modification and we will try to do

838
00:26:08,670 --> 00:26:09,870
something the problem here is

839
00:26:09,870 --> 00:26:11,309
also wish to have the right

840
00:26:11,309 --> 00:26:12,450
questions that's what I'm going to put a

841
00:26:12,450 --> 00:26:15,059
day we file system ok but

842
00:26:15,059 --> 00:26:16,640
what will happen next

843
00:26:16,640 --> 00:26:18,920
I change the route file system well that's

844
00:26:18,920 --> 00:26:21,160
good but remember the secure boot

845
00:26:21,160 --> 00:26:23,030
secure boot there was a problem

846
00:26:23,030 --> 00:26:25,220
anyway because secure boot you have to look at

847
00:26:25,220 --> 00:26:26,510
that anyway  in a corner of the head

848
00:26:26,510 --> 00:26:28,400
good here in this case there was a

849
00:26:28,400 --> 00:26:30,050


850
00:26:30,050 --> 00:26:32,180
unitary medium iron bankruptcy update utility of

851
00:26:32,180 --> 00:26:34,070
firmware update it is practical it avoids having

852
00:26:34,070 --> 00:26:35,480
to type all their winters ce2 how

853
00:26:35,480 --> 00:26:37,100
the updates work and therefore we

854
00:26:37,100 --> 00:26:38,870
will use the firmware degree of file

855
00:26:38,870 --> 00:26:40,940
system to make systems to create

856
00:26:40,940 --> 00:26:42,920
a system image for example modify

857
00:26:42,920 --> 00:26:45,140
and deploy the update so that we do

858
00:26:45,140 --> 00:26:46,430
not have to type directly on the

859
00:26:46,430 --> 00:26:49,130
partition and this since  simple  well let's take

860
00:26:49,130 --> 00:26:51,260
a look at this great utility that we saw

861
00:26:51,260 --> 00:26:52,670
we write very small this post

862
00:26:52,670 --> 00:26:53,480
happens to him to read but I will

863
00:26:53,480 --> 00:26:54,670
detail you a little bit what is happening

864
00:26:54,670 --> 00:26:57,410
so here typically there is from the

865
00:26:57,410 --> 00:26:59,990
first part which is located here  yes

866
00:26:59,990 --> 00:27:02,090
here yes my pointer at worst if the

867
00:27:02,090 --> 00:27:03,470
first part which is located here I

868
00:27:03,470 --> 00:27:05,750
see that he is kidding in short the first

869
00:27:05,750 --> 00:27:07,910
part here with the if it is to choose

870
00:27:07,910 --> 00:27:09,200
a question the partitions which will be

871
00:27:09,200 --> 00:27:11,150
targeted then he will decipher the

872
00:27:11,150 --> 00:27:12,560
content of the  'image to extract the

873
00:27:12,560 --> 00:27:15,320
last 400 bytes and there is a question

874
00:27:15,320 --> 00:27:17,630
of signature and if we zoom in a little bit

875
00:27:17,630 --> 00:27:19,130
on a part of the code in fact it does

876
00:27:19,130 --> 00:27:20,450
an integrity check on the

877
00:27:20,450 --> 00:27:23,270
fs route with a signature with a

878
00:27:23,270 --> 00:27:25,670
file dot p m that  starting to smell

879
00:27:25,670 --> 00:27:27,080
bad it means that here

880
00:27:27,080 --> 00:27:28,460
potentially an authentication

881
00:27:28,460 --> 00:27:29,930
is done on the fath system and if I

882
00:27:29,930 --> 00:27:32,180
rewrite the fhal system suddenly it's

883
00:27:32,180 --> 00:27:34,670
finished it will be detected at the next

884
00:27:34,670 --> 00:27:36,650
system reboot will not start if

885
00:27:36,650 --> 00:27:38,420
there it is  a big indicator in  any case

886
00:27:38,420 --> 00:27:40,220
of secure boot or pseudo secure boot

887
00:27:40,220 --> 00:27:41,870
we will see later so quite

888
00:27:41,870 --> 00:27:44,270
interesting if we look a little

889
00:27:44,270 --> 00:27:45,650
more in detail we see in particular and

890
00:27:45,650 --> 00:27:47,570
although we have copies of files which

891
00:27:47,570 --> 00:27:48,770
will be made in partitions

892
00:27:48,770 --> 00:27:51,350
stored directly  system the ps

893
00:27:51,350 --> 00:27:52,730
is from carnel dst this is what we

894
00:27:52,730 --> 00:27:53,960
found here at the very beginning whose

895
00:27:53,960 --> 00:27:54,950
partition there is a partition

896
00:27:54,950 --> 00:27:55,850
apparently that stores

897
00:27:55,850 --> 00:27:57,860
information so do we know

898
00:27:57,860 --> 00:27:59,930
we know that the file system

899
00:27:59,930 --> 00:28:01,700
degree of condat provide is  he also

900
00:28:01,700 --> 00:28:03,590
signed canton deza seems well the binary

901
00:28:03,590 --> 00:28:05,270
we know that the new signatures

902
00:28:05,270 --> 00:28:07,160
of this file system of this gred file

903
00:28:07,160 --> 00:28:08,330
are stored in a

904
00:28:08,330 --> 00:28:10,610
specific partition the big question is ok

905
00:28:10,610 --> 00:28:12,530
it stores all in the partitions it is

906
00:28:12,530 --> 00:28:13,940
certainly to be able  use it in

907
00:28:13,940 --> 00:28:15,980
the boot world so with a secure boot

908
00:28:15,980 --> 00:28:19,370
well let's take a look at it so there

909
00:28:19,370 --> 00:28:21,320
is suspicion of secure boot so we'll

910
00:28:21,320 --> 00:28:22,340
try to see how it works

911
00:28:22,340 --> 00:28:24,020
then secure boot is bi  in

912
00:28:24,020 --> 00:28:25,400
secure boot it works well the only

913
00:28:25,400 --> 00:28:27,470
problem is that as I said if

914
00:28:27,470 --> 00:28:28,890
you modify

915
00:28:28,890 --> 00:28:31,020
duroux fs files it does not put you off except that at the bottom

916
00:28:31,020 --> 00:28:32,310
when you find a bubble

917
00:28:32,310 --> 00:28:34,530
in secure boot the secure boot actually does

918
00:28:34,530 --> 00:28:35,820
it  there are different ways to do

919
00:28:35,820 --> 00:28:37,770
secure end there is the right way and the

920
00:28:37,770 --> 00:28:39,960
wrong way guess what

921
00:28:39,960 --> 00:28:41,790
was put in place here otherwise I wouldn't be

922
00:28:41,790 --> 00:28:43,230
here to talk about it if he had done it

923
00:28:43,230 --> 00:28:44,700
correctly here it was the wrong one

924
00:28:44,700 --> 00:28:47,280
way so we managed to have kept

925
00:28:47,280 --> 00:28:48,510
a little how it works the level

926
00:28:48,510 --> 00:28:50,310
of security but here we are then the sulk

927
00:28:50,310 --> 00:28:52,860
roms in some cases do not check

928
00:28:52,860 --> 00:28:54,540
the integrity of the hour job that is to

929
00:28:54,540 --> 00:28:55,800
say that they do not have  the possibility of

930
00:28:55,800 --> 00:28:57,390
generating a boudouaou so it's the

931
00:28:57,390 --> 00:28:58,740
bulldozers that does all the

932
00:28:58,740 --> 00:29:00,540
secure boot part but once again the

933
00:29:00,540 --> 00:29:01,470
hourly job is what is in the

934
00:29:01,470 --> 00:29:03,390
flash we can modify perhaps only in a

935
00:29:03,390 --> 00:29:05,370
way of  patch the bootloader

936
00:29:05,370 --> 00:29:06,780
to modify the operation is

937
00:29:06,780 --> 00:29:08,670
deactivated the verification of signatures

938
00:29:08,670 --> 00:29:10,590
why not but first we have to

939
00:29:10,590 --> 00:29:11,940
look at how it works so what do

940
00:29:11,940 --> 00:29:13,500
we do we look with bulldozers

941
00:29:13,500 --> 00:29:15,360
small precision before entering the

942
00:29:15,360 --> 00:29:16,560
code of the sellers bund so I have already

943
00:29:16,560 --> 00:29:18,720
saved the  bowsprit of the boss of the bazaar and

944
00:29:18,720 --> 00:29:20,850
the bootloader used to a system of

945
00:29:20,850 --> 00:29:22,440
stand alone applications based on a

946
00:29:22,440 --> 00:29:23,490
road so in fact it's something I

947
00:29:23,490 --> 00:29:25,230
discovered for the occasion there was an

948
00:29:25,230 --> 00:29:27,180
August hub which had stands of olonne

949
00:29:27,180 --> 00:29:28,620
application what are they going

950
00:29:28,620 --> 00:29:29,910
to do hot pic it's a kind of plugins

951
00:29:29,910 --> 00:29:31,830
for a drop that allows you to add

952
00:29:31,830 --> 00:29:33,570
features are pretty cool there is

953
00:29:33,570 --> 00:29:35,040
an api that exposed by a drop and

954
00:29:35,040 --> 00:29:36,780
its sphere the compilation on  compiles

955
00:29:36,780 --> 00:29:38,130
both the taste the smell and the

956
00:29:38,130 --> 00:29:40,470
stand alone application and from there the

957
00:29:40,470 --> 00:29:42,390
sulky can hand over to the application which

958
00:29:42,390 --> 00:29:44,580
will manage a whole bunch of stuff but a whole

959
00:29:44,580 --> 00:29:46,380
word custom and that's what  they were

960
00:29:46,380 --> 00:29:48,000
using here so this

961
00:29:48,000 --> 00:29:49,740
stand alone app it is loaded and if  we

962
00:29:49,740 --> 00:29:50,940
look a little bit at the code we see in

963
00:29:50,940 --> 00:29:53,670
particular who is going to read at a

964
00:29:53,670 --> 00:29:55,410
particular place he dares a data which is

965
00:29:55,410 --> 00:29:57,390
located at the address 40000 in the flash

966
00:29:57,390 --> 00:30:00,679
in the 13th fair 81 000 of water

967
00:30:00,679 --> 00:30:02,210
so it is good and a little more  far in

968
00:30:02,210 --> 00:30:04,129
the code he will copy we are not too

969
00:30:04,129 --> 00:30:05,480
readable because here will finally guide

970
00:30:05,480 --> 00:30:06,980
little crap on the part of the

971
00:30:06,980 --> 00:30:08,629
compilations but in fact he will make the

972
00:30:08,629 --> 00:30:10,249
same copy of what is at

973
00:30:10,249 --> 00:30:12,049
the address 81 00 and  20 doctors

974
00:30:12,049 --> 00:30:15,110
at address 81 1000 and then a little

975
00:30:15,110 --> 00:30:16,759
further in the code it will call the

976
00:30:16,759 --> 00:30:17,929
code that is here good that's

977
00:30:17,929 --> 00:30:19,159
how the application to load in fact

978
00:30:19,159 --> 00:30:21,590
it gives little islands of the flash an

979
00:30:21,590 --> 00:30:23,480
application  third party he loaded memory

980
00:30:23,480 --> 00:30:25,180
and then they transfer the execution of

981
00:30:25,180 --> 00:30:27,580
the application it is quite simple we have

982
00:30:27,580 --> 00:30:29,050
an email with different parameters that

983
00:30:29,050 --> 00:30:30,880
are passed and it turns out that the mind

984
00:30:30,880 --> 00:30:32,350
looks something like this so it's

985
00:30:32,350 --> 00:30:33,700
undrinkable code and  it doesn't matter

986
00:30:33,700 --> 00:30:35,590
first step we load the signatures

987
00:30:35,590 --> 00:30:37,150
we decrypt qua signatures  nd we do

988
00:30:37,150 --> 00:30:38,890
n't describe we decrypt

989
00:30:38,890 --> 00:30:41,830
yeah not said we don't say encrypt an

990
00:30:41,830 --> 00:30:44,460
ipad name it in short

991
00:30:44,550 --> 00:30:48,190
we decrypt the signatures

992
00:30:48,190 --> 00:30:51,040
from an rsa key we get h at 256 he is

993
00:30:51,040 --> 00:30:53,800
already calculating the redemption of 156

994
00:30:53,800 --> 00:30:56,080
compared the h and  if it's good we execute

995
00:30:56,080 --> 00:30:59,050
or not well yeah but here I have a if and

996
00:30:59,050 --> 00:31:01,390
then a second if it can be

997
00:31:01,390 --> 00:31:02,950
interesting to go digging so to

998
00:31:02,950 --> 00:31:04,450
synthesize we have a score which

999
00:31:04,450 --> 00:31:06,310
contains signatures the sulky

1000
00:31:06,310 --> 00:31:08,110
notes Czech signatures of carnel  the

1001
00:31:08,110 --> 00:31:09,610
pomp does it road system if any

1002
00:31:09,610 --> 00:31:12,610
match it executes yeah but seïf the

1003
00:31:12,610 --> 00:31:14,020
key happens to me if I change if

1004
00:31:14,020 --> 00:31:15,490
I force them if I say but in fact everything

1005
00:31:15,490 --> 00:31:17,550
is good don't worry no problem

1006
00:31:17,550 --> 00:31:19,360
for the little story just

1007
00:31:19,360 --> 00:31:21,910
modify  two therefore opt instead of

1008
00:31:21,910 --> 00:31:24,100
paper the root f s if we patch the

1009
00:31:24,100 --> 00:31:26,320
bootloader at the same time and we manage

1010
00:31:26,320 --> 00:31:28,090
to deactivate the signature verification

1011
00:31:28,090 --> 00:31:30,590
it is to save life balloon

1012
00:31:30,590 --> 00:31:31,760
let's do a small patch of bulldozers

1013
00:31:31,760 --> 00:31:34,250
thank you will guide in passing a small

1014
00:31:34,250 --> 00:31:35,450
editing mode d  instruction that follows  to

1015
00:31:35,450 --> 00:31:37,279
practice so i did a job of

1016
00:31:37,279 --> 00:31:39,770
modifying that i then copied from the

1017
00:31:39,770 --> 00:31:40,970
one route i had on the

1018
00:31:40,970 --> 00:31:42,789
mt bootloader partition of blocks 0

1019
00:31:42,789 --> 00:31:45,260
and then i rewrote the

1020
00:31:45,260 --> 00:31:46,970
ntfs partition with a route and facebook  says proud

1021
00:31:46,970 --> 00:31:49,490
and of course if ever his magnifying glass because that

1022
00:31:49,490 --> 00:31:50,659
's always the case when you do this

1023
00:31:50,659 --> 00:31:51,980
kind of manipulation isn't sure that

1024
00:31:51,980 --> 00:31:53,960
the Drôme mud checks well and well if

1025
00:31:53,960 --> 00:31:55,279
ever his magnifying glass it doesn't matter

1026
00:31:55,279 --> 00:31:56,240
because I  like a little flash that I can

1027
00:31:56,240 --> 00:31:57,650
remove and reprogram there it's

1028
00:31:57,650 --> 00:31:59,179
perfect the suspender belt

1029
00:31:59,179 --> 00:32:02,059
let's go we modify all that and well guess

1030
00:32:02,059 --> 00:32:04,490
what happened it worked so

1031
00:32:04,490 --> 00:32:05,809
from there we can consider lots of

1032
00:32:05,809 --> 00:32:06,740
things for example  to maintain

1033
00:32:06,740 --> 00:32:08,000
the action can put a boot script

1034
00:32:08,000 --> 00:32:10,070
that will launch as backdoors enough

1035
00:32:10,070 --> 00:32:11,809
lab poor actors based on bbox and

1036
00:32:11,809 --> 00:32:13,490
elne and such designs some

1037
00:32:13,490 --> 00:32:14,510
help you can ask from the old

1038
00:32:14,510 --> 00:32:16,100
a particular script or binary

1039
00:32:16,100 --> 00:32:18,440
when  the tcp connection and not

1040
00:32:18,440 --> 00:32:19,940
typically create ic  i you have an open skies remote

1041
00:32:19,940 --> 00:32:21,260
has always without authentication

1042
00:32:21,260 --> 00:32:24,590
was thought 1500 its 777 which is not the

1043
00:32:24,590 --> 00:32:25,640
best idea as we say

1044
00:32:25,640 --> 00:32:27,320
you can install a golden pack version

1045
00:32:27,320 --> 00:32:30,110
of bbox or to add accounts

1046
00:32:30,110 --> 00:32:31,850
for example and also the possibility of

1047
00:32:31,850 --> 00:32:33,470
do porto king 60 on some

1048
00:32:33,470 --> 00:32:34,460
systems if you can put me a

1049
00:32:34,460 --> 00:32:36,649
binary note for example sending

1050
00:32:36,649 --> 00:32:38,600
a series of packs and particulars

1051
00:32:38,600 --> 00:32:39,890
with rules that are put in place little bit

1052
00:32:39,890 --> 00:32:42,110
this pony a shell on demand so it's

1053
00:32:42,110 --> 00:32:43,909
pretty handy that c  is more stealthy in

1054
00:32:43,909 --> 00:32:46,070
terms of recovery is just as

1055
00:32:46,070 --> 00:32:47,750
interesting good in what they

1056
00:32:47,750 --> 00:32:49,720
suit me in the case that interested me

1057
00:32:49,720 --> 00:32:51,710
ok do the maintenance of the racks and the

1058
00:32:51,710 --> 00:32:53,210
bins of the system etc

1059
00:32:53,210 --> 00:32:54,470
I could have also modified the binary

1060
00:32:54,470 --> 00:32:55,399
which  made updates to

1061
00:32:55,399 --> 00:32:56,870
disable updates from

1062
00:32:56,870 --> 00:32:58,520
you can do a complete write

1063
00:32:58,520 --> 00:32:59,960
of a complete rewrite of the system

1064
00:32:59,960 --> 00:33:02,029
it's won but it's not always

1065
00:33:02,029 --> 00:33:03,529
the case that we could see the cij had modified

1066
00:33:03,529 --> 00:33:04,940
ie the spinning wheel did this from the get go i

1067
00:33:04,940 --> 00:33:06,860
would have had issues

1068
00:33:06,860 --> 00:33:10,100
my aim was a bit more a bit

1069
00:33:10,100 --> 00:33:12,170
lower glorious i would say the most

1070
00:33:12,170 --> 00:33:14,090
interesting and that was to arrive for

1071
00:33:14,090 --> 00:33:15,620
the equipment that was vulnerable

1072
00:33:15,620 --> 00:33:17,929
modified its system of  exploitation

1073
00:33:17,929 --> 00:33:19,970
put an openwrt so think that they do

1074
00:33:19,970 --> 00:33:21,410
n't know open open and it's a

1075
00:33:21,410 --> 00:33:23,809
dedicated firmware for routers its

1076
00:33:23,809 --> 00:33:25,760
son in particular which is completely open

1077
00:33:25,760 --> 00:33:27,740
and which uses the latest versions of

1078
00:33:27,740 --> 00:33:29,960
the up-to-date linux kernel island and the

1079
00:33:29,960 --> 00:33:31,520
latest versions of  up-to-date services we

1080
00:33:31,520 --> 00:33:33,230
know very practical and it supports a

1081
00:33:33,230 --> 00:33:35,150
phenomenal number of chips

1082
00:33:35,150 --> 00:33:37,490
and good equipment except mine because

1083
00:33:37,490 --> 00:33:38,929
it's a bit weird that this

1084
00:33:38,929 --> 00:33:40,580
man who was made to order it

1085
00:33:40,580 --> 00:33:41,929
didn't exactly work for me that  it was

1086
00:33:41,929 --> 00:33:43,640
necessary to modify all that a little bit so

1087
00:33:43,640 --> 00:33:45,200
before I embarked on this super

1088
00:33:45,200 --> 00:33:46,700
stadium at this super

1089
00:33:46,700 --> 00:33:48,980
bread installation wrt bah suddenly I checked that

1090
00:33:48,980 --> 00:33:50,240
all the chips that were present on my

1091
00:33:50,240 --> 00:33:51,710
board were well supported, in particular who

1092
00:33:51,710 --> 00:33:54,080
gè  re wifi bluetooth etc and we

1093
00:33:54,080 --> 00:33:56,000
had to make the heavy decision to

1094
00:33:56,000 --> 00:33:58,160
go from squash suffered effect and fez as

1095
00:33:58,160 --> 00:33:59,990
I said forget fesf a longer

1096
00:33:59,990 --> 00:34:01,760
life in terms of the use

1097
00:34:01,760 --> 00:34:03,530
of nand flash it's better and the

1098
00:34:03,530 --> 00:34:04,910
sealant  I also realized

1099
00:34:04,910 --> 00:34:06,860
that the open wrt toolkit is really

1100
00:34:06,860 --> 00:34:08,810
well done to say that I did not know

1101
00:34:08,810 --> 00:34:10,460
finally I knew openwrt before

1102
00:34:10,460 --> 00:34:11,540
I had never gotten my hands

1103
00:34:11,540 --> 00:34:13,159
dirty with this thing and when I

1104
00:34:13,159 --> 00:34:15,440
dug a little on search  low tool kit

1105
00:34:15,440 --> 00:34:17,359
it was really super practical I was able to

1106
00:34:17,359 --> 00:34:18,830
adapt scripts to install

1107
00:34:18,830 --> 00:34:22,280
openwrt on my super wifi router I

1108
00:34:22,280 --> 00:34:23,719
also modified the partitions for me to

1109
00:34:23,719 --> 00:34:25,100
have more storage space because

1110
00:34:25,100 --> 00:34:26,179
there were two versions of firmware

1111
00:34:26,179 --> 00:34:27,590
c  is quite common I will not talk about

1112
00:34:27,590 --> 00:34:28,820
when we saw the first part two

1113
00:34:28,820 --> 00:34:30,530
first partitioning but there are two

1114
00:34:30,530 --> 00:34:32,929
routes is done there are two kernels which

1115
00:34:32,929 --> 00:34:34,280
are there to do what are called

1116
00:34:34,280 --> 00:34:36,230
ab installations i.e. you have

1117
00:34:36,230 --> 00:34:38,600
one  image of farmer  s to and a

1118
00:34:38,600 --> 00:34:39,949
b firmware image if ever they can't

1119
00:34:39,949 --> 00:34:41,270
get rid of the format it launches

1120
00:34:41,270 --> 00:34:42,770
bs firmwares which allows on

1121
00:34:42,770 --> 00:34:44,540
updates to avoid bricks and equipment

1122
00:34:44,540 --> 00:34:47,780
so me here I excuse is purely and

1123
00:34:47,780 --> 00:34:49,550
simply these  parts there because the

1124
00:34:49,550 --> 00:34:51,469
open wrt system already has this kind of

1125
00:34:51,469 --> 00:34:53,210
function of built-in mechanisms and it

1126
00:34:53,210 --> 00:34:55,280
is able to roll back and

1127
00:34:55,280 --> 00:34:57,260
here I have an open open and on my

1128
00:34:57,260 --> 00:34:58,850
equipment without with a little

1129
00:34:58,850 --> 00:35:01,640
trouble thanks to a vulnerability  which

1130
00:35:01,640 --> 00:35:03,260
allowed me to have a route shell so

1131
00:35:03,260 --> 00:35:04,850
as I said in the introduction it is a

1132
00:35:04,850 --> 00:35:08,150
particular use that we ensure on this

1133
00:35:08,150 --> 00:35:09,080
kind of thing but I could very well

1134
00:35:09,080 --> 00:35:11,000
have lefa the system etc

1135
00:35:11,000 --> 00:35:12,500
now when you  think back to skis

1136
00:35:12,500 --> 00:35:13,880
to the images that were swung a

1137
00:35:13,880 --> 00:35:15,320
few years ago from what is called

1138
00:35:15,320 --> 00:35:16,910
theory for those who know the

1139
00:35:16,910 --> 00:35:19,070
taylor dax operation only to a team in

1140
00:35:19,070 --> 00:35:19,920
particular

1141
00:35:19,920 --> 00:35:21,359
if I got a link that made

1142
00:35:21,359 --> 00:35:22,859
particular installations or

1143
00:35:22,859 --> 00:35:24,480
particular modifications  by village  of

1144
00:35:24,480 --> 00:35:27,180
cisco routers at the time there is a

1145
00:35:27,180 --> 00:35:28,230
good chance that this evening of the kind of

1146
00:35:28,230 --> 00:35:30,000
hack worried that they have done we do

1147
00:35:30,000 --> 00:35:31,799
not have more details of the plan pure

1148
00:35:31,799 --> 00:35:34,020
speculation on my part so we will

1149
00:35:34,020 --> 00:35:36,359
necessarily end up nicely with the

1150
00:35:36,359 --> 00:35:39,270
conclusion  so in conclusion of all

1151
00:35:39,270 --> 00:35:40,410
this what can we say we can say

1152
00:35:40,410 --> 00:35:42,420
that when we have a route shell on an

1153
00:35:42,420 --> 00:35:44,910
equipment we can manage to

1154
00:35:44,910 --> 00:35:46,650
compromise the entire system

1155
00:35:46,650 --> 00:35:48,000
but in some cases it can be more

1156
00:35:48,000 --> 00:35:48,990
difficult than  others when we

1157
00:35:48,990 --> 00:35:50,520
deal in particular with mechanisms such as

1158
00:35:50,520 --> 00:35:52,740
secure boot such as the

1159
00:35:52,740 --> 00:35:55,770
signature signal such as file systems

1160
00:35:55,770 --> 00:35:57,750
which are accessible only in read only

1161
00:35:57,750 --> 00:35:59,280
secure boot low on paper it

1162
00:35:59,280 --> 00:36:01,380
works but there is a lot of

1163
00:36:01,380 --> 00:36:03,650
literature in all  case of

1164
00:36:03,650 --> 00:36:05,849
leading in the world to cyber security

1165
00:36:05,849 --> 00:36:07,440
on urban sites which was which

1166
00:36:07,440 --> 00:36:09,000
was broken either because sulking

1167
00:36:09,000 --> 00:36:10,799
rome had a vulnerability or because

1168
00:36:10,799 --> 00:36:12,150
as is the case here we do not have a

1169
00:36:12,150 --> 00:36:13,710
real secure boot we have  a good smell that  i

1170
00:36:13,710 --> 00:36:15,359
did a firmware authenticity check

1171
00:36:15,359 --> 00:36:17,309
and we can rewrite the

1172
00:36:17,309 --> 00:36:18,270
bootloader we can't touch the

1173
00:36:18,270 --> 00:36:20,640
bulldozers still is it that if you

1174
00:36:20,640 --> 00:36:21,990
try to reprogram

1175
00:36:21,990 --> 00:36:24,569
the flash memory live remotely with a

1176
00:36:24,569 --> 00:36:26,640
modified file system it's

1177
00:36:26,640 --> 00:36:28,410
still s  to risk it you have you

1178
00:36:28,410 --> 00:36:29,970
risk bricks and equipment and

1179
00:36:29,970 --> 00:36:31,349
father your access we may not

1180
00:36:31,349 --> 00:36:32,460
necessarily have the best move to make

1181
00:36:32,460 --> 00:36:34,319
clearly you understand better

1182
00:36:34,319 --> 00:36:35,670
now why the sites and the

1183
00:36:35,670 --> 00:36:36,750
people who have exploited

1184
00:36:36,750 --> 00:36:39,660
of ip cameras connected or other there are a

1185
00:36:39,660 --> 00:36:42,059
hundred are mainly due to I

1186
00:36:42,059 --> 00:36:43,530
launch an executable in memory and then

1187
00:36:43,530 --> 00:36:45,089
that's all it's the best way

1188
00:36:45,089 --> 00:36:46,680
anyway to be able to maintain

1189
00:36:46,680 --> 00:36:48,000
access but to be able to really operate

1190
00:36:48,000 --> 00:36:49,319
at 100% without risking  of bricks

1191
00:36:49,319 --> 00:36:50,730
and equipment now if you

1192
00:36:50,730 --> 00:36:52,440
are looking to modify the firmware

1193
00:36:52,440 --> 00:36:55,079
installed an open wrt for example it is

1194
00:36:55,079 --> 00:36:56,280
still the best way to do it

1195
00:36:56,280 --> 00:36:58,650
and it is the only solution in all

1196
00:36:58,650 --> 00:37:00,210
c  as to install an arctic open

1197
00:37:00,210 --> 00:37:04,079
than this volume so it's interesting in

1198
00:37:04,079 --> 00:37:06,270
any case on my side I remember that for

1199
00:37:06,270 --> 00:37:07,140
what I believe it's the first time

1200
00:37:07,140 --> 00:37:08,609
I installed an openwrt from scratch

1201
00:37:08,609 --> 00:37:10,470
on something was not  support as much

1202
00:37:10,470 --> 00:37:12,000
help some or a certain

1203
00:37:12,000 --> 00:37:13,319
wireless router I had succeeded with this little

1204
00:37:13,319 --> 00:37:15,359
thing is installed as many

1205
00:37:15,359 --> 00:37:16,500
perhaps of you have already done as

1206
00:37:16,500 --> 00:37:19,530
much added a device which is not

1207
00:37:19,530 --> 00:37:20,549
basic support in the

1208
00:37:20,549 --> 00:37:22,470
little opening  it's also super interesting to

1209
00:37:22,470 --> 00:37:23,760
dig into

1210
00:37:23,760 --> 00:37:25,710
so here is in any case this openwrt router to

1211
00:37:25,710 --> 00:37:28,200
turn and it's always a

1212
00:37:28,200 --> 00:37:30,900
good experience there are lots of things

1213
00:37:30,900 --> 00:37:33,000
that I talked about in this thing there lots of

1214
00:37:33,000 --> 00:37:34,829
things like containers

1215
00:37:34,829 --> 00:37:37,200
systems equipment that  we find at

1216
00:37:37,200 --> 00:37:38,460
the present time which are in fact

1217
00:37:38,460 --> 00:37:40,020
equipment which virtualizes a

1218
00:37:40,020 --> 00:37:42,560
whole set of functionalities from the back

1219
00:37:42,560 --> 00:37:44,570
on on the same equipment some

1220
00:37:44,570 --> 00:37:46,190
fairly sturdy stuff will talk about it for

1221
00:37:46,190 --> 00:37:47,300
example high school students

1222
00:37:47,300 --> 00:37:49,130
of linux meter systems there  also has

1223
00:37:49,130 --> 00:37:50,390
secure elements that they are totally

1224
00:37:50,390 --> 00:37:53,120
forgotten here in this talk simply

1225
00:37:53,120 --> 00:37:54,380
because in the case study that

1226
00:37:54,380 --> 00:37:56,450
I had chosen to illustrate the subject

1227
00:37:56,450 --> 00:37:57,860
was not present in it and then by

1228
00:37:57,860 --> 00:38:00,020
a matter of time if these are

1229
00:38:00,020 --> 00:38:01,190
systems that exist that are more

1230
00:38:01,190 --> 00:38:03,410
complicated to circumvent and on which

1231
00:38:03,410 --> 00:38:04,670
you can also come across at the

1232
00:38:04,670 --> 00:38:07,310
emulation level to make it really very

1233
00:38:07,310 --> 00:38:09,260
simple that it is not the point of going

1234
00:38:09,260 --> 00:38:10,240
into detail

1235
00:38:10,240 --> 00:38:12,410
when you have a route shell on this

1236
00:38:12,410 --> 00:38:13,520
kind of  equipment you have a

1237
00:38:13,520 --> 00:38:14,900
road shell in a vm running on

1238
00:38:14,900 --> 00:38:16,910
the team so there we fall back on the

1239
00:38:16,910 --> 00:38:19,760
same problem of skateboarding 2 v / m or

1240
00:38:19,760 --> 00:38:21,890
2 how to say lateral movement

1241
00:38:21,890 --> 00:38:23,450
that must be carried out to be able to

1242
00:38:23,450 --> 00:38:25,340
hit the real one  system which is below there

1243
00:38:25,340 --> 00:38:26,660
are methods there are ways to

1244
00:38:26,660 --> 00:38:27,770
do it but we are still on the

1245
00:38:27,770 --> 00:38:30,050
level of exploitation which is a little

1246
00:38:30,050 --> 00:38:32,420
more complex than the simple inscription

1247
00:38:32,420 --> 00:38:35,660
on a call to this system is

1248
00:38:35,660 --> 00:38:36,980
overall we have once again  just a

1249
00:38:36,980 --> 00:38:38,210
little  t being in quettehou can be

1250
00:38:38,210 --> 00:38:40,160
compromised with enough time and

1251
00:38:40,160 --> 00:38:41,690
the big question here is time

1252
00:38:41,690 --> 00:38:43,310
and either you have come across

1253
00:38:43,310 --> 00:38:44,870
equipment which adds adds to play

1254
00:38:44,870 --> 00:38:47,210
security mechanisms then it will be

1255
00:38:47,210 --> 00:38:49,490
complex in any case to carry out here I am

1256
00:38:49,490 --> 00:38:50,720
I was lucky enough to have a system

1257
00:38:50,720 --> 00:38:52,190
that was vulnerable quite

1258
00:38:52,190 --> 00:38:54,050
simply at the level of bulldozers but

1259
00:38:54,050 --> 00:38:54,980
in some cases we may have to

1260
00:38:54,980 --> 00:38:56,600
do boudreau rivers

1261
00:38:56,600 --> 00:38:57,740
or boudreau extraction when

1262
00:38:57,740 --> 00:38:59,210
possible and so on  and it's a

1263
00:38:59,210 --> 00:39:01,130
lot more work in terms

1264
00:39:01,130 --> 00:39:02,609
of exploitation

1265
00:39:02,609 --> 00:39:03,710
we're

1266
00:39:03,710 --> 00:39:05,910
going to take a few questions I think

1267
00:39:05,910 --> 00:39:07,680
it's high time also to

1268
00:39:07,680 --> 00:39:08,430
people who are interested

1269
00:39:08,430 --> 00:39:17,150
[Applause]

1270
00:39:17,150 --> 00:39:21,300
so we're going to do a clooney session

1271
00:39:21,300 --> 00:39:23,580
[Music]

1272
00:39:23,580 --> 00:39:25,360
hello

1273
00:39:25,360 --> 00:39:28,990
hello yeah  yeah good day just

1274
00:39:28,990 --> 00:39:30,670
to bounce back a bit on the last

1275
00:39:30,670 --> 00:39:33,090
sentence on time

1276
00:39:33,090 --> 00:39:35,860
a little question how

1277
00:39:35,860 --> 00:39:41,220
long did his whole life last here

1278
00:39:42,210 --> 00:39:45,120
ah yes there ok

1279
00:39:45,120 --> 00:39:47,410
yes that's the question was  so excuse

1280
00:39:47,410 --> 00:39:49,780
me the post him the question was

1281
00:39:49,780 --> 00:39:51,160
you ended up just addressing the time

1282
00:39:51,160 --> 00:39:53,140
it takes for precisely that

1283
00:39:53,140 --> 00:39:56,860
equipment that the more we are virtually

1284
00:39:56,860 --> 00:39:58,120
all hacker it's just a matter of

1285
00:39:58,120 --> 00:40:00,180
time tammy how long

1286
00:40:00,180 --> 00:40:02,830
to  for the understanding of this vote

1287
00:40:02,830 --> 00:40:06,820
how long ago I took his steps the

1288
00:40:06,820 --> 00:40:08,290
thing that really blocked me the most

1289
00:40:08,290 --> 00:40:10,450
in the story was when I was

1290
00:40:10,450 --> 00:40:12,310
flashing the job of the reds had

1291
00:40:12,310 --> 00:40:14,530
lots of errors and  there is the tunnel effect

1292
00:40:14,530 --> 00:40:16,060
which came a little bit from adam i

1293
00:40:16,060 --> 00:40:17,490
was sure it was a problem

1294
00:40:17,490 --> 00:40:20,260
due to what i was writing and it was

1295
00:40:20,260 --> 00:40:21,160
actually the method i use to

1296
00:40:21,160 --> 00:40:23,350
write the memory which was  good but

1297
00:40:23,350 --> 00:40:24,850
I'm not a few days to smash everything

1298
00:40:24,850 --> 00:40:26,970
after if I accumulate the time yes

1299
00:40:26,970 --> 00:40:28,980
for this compromise

1300
00:40:28,980 --> 00:40:30,850
but once again we are sure of the

1301
00:40:30,850 --> 00:40:32,500
compromise which is not too complicated

1302
00:40:32,500 --> 00:40:33,760
we are on hour work which can

1303
00:40:33,760 --> 00:40:35,080
be patched but in some  case it

1304
00:40:35,080 --> 00:40:37,740
may take more time

1305
00:40:38,850 --> 00:40:42,180
another question

1306
00:40:44,199 --> 00:40:46,640


1307
00:40:46,640 --> 00:40:50,560
good to u  do not question

1308
00:40:50,560 --> 00:40:52,850
your preference between a

1309
00:40:52,850 --> 00:40:56,960
physical extraction of the nand and use of let

1310
00:40:56,960 --> 00:41:00,470
's say a jtag directly for to

1311
00:41:00,470 --> 00:41:03,230
extract it depends mainly on

1312
00:41:03,230 --> 00:41:04,370
what you are looking to do what on the

1313
00:41:04,370 --> 00:41:05,780
nand as for an external request there

1314
00:41:05,780 --> 00:41:07,010
is no  gitaï which allows you to extract that

1315
00:41:07,010 --> 00:41:08,210
I can go in some cases by the

1316
00:41:08,210 --> 00:41:10,070
ploughshare to hit the moor but

1317
00:41:10,070 --> 00:41:10,820
in this case we prefer to

1318
00:41:10,820 --> 00:41:12,130
directly extract a world

1319
00:41:12,130 --> 00:41:14,450
from a dune parts apparently control

1320
00:41:14,450 --> 00:41:16,550
on the chip and on  the contents whatever

1321
00:41:16,550 --> 00:41:18,410
it contains and without having something

1322
00:41:18,410 --> 00:41:21,110
in jtag intermediaries we will use it

1323
00:41:21,110 --> 00:41:22,550
more for the bits of rome for example

1324
00:41:22,550 --> 00:41:24,170
to try to recover them that we feel

1325
00:41:24,170 --> 00:41:25,640
when we can access them and then

1326
00:41:25,640 --> 00:41:27,040
make withdrawals from  'a reverse engineering

1327
00:41:27,040 --> 00:41:28,790
I say well when you can access

1328
00:41:28,790 --> 00:41:31,509
it it's not all the time

1329
00:41:35,079 --> 00:41:37,660
thank you for the halo it's good you

1330
00:41:37,660 --> 00:41:40,809
hear me yes thank you for the

1331
00:41:40,809 --> 00:41:43,469
presentation a question is what

1332
00:41:43,469 --> 00:41:47,349
in cases where there are systems

1333
00:41:47,349 --> 00:41:50,289
of files with upside down aces e  u all of

1334
00:41:50,289 --> 00:41:51,999
that can be a problem with file systems

1335
00:41:51,999 --> 00:41:56,140
sorry in overlay in overlay it

1336
00:41:56,140 --> 00:41:57,339
can be a problem yes because

1337
00:41:57,339 --> 00:41:58,959
if you readjust the root partition you have to

1338
00:41:58,959 --> 00:42:00,190
generally in the default versions

1339
00:42:00,190 --> 00:42:01,390
of the files that are deposited

1340
00:42:01,390 --> 00:42:03,249
in it and that will be hidden by the

1341
00:42:03,249 --> 00:42:04,809
worley waters but in this case we can

1342
00:42:04,809 --> 00:42:06,279
manage to hide overlay challenge which

1343
00:42:06,279 --> 00:42:07,239
suggests before are located on

1344
00:42:07,239 --> 00:42:09,009
annexed partitions so it's just the

1345
00:42:09,009 --> 00:42:10,539
manna of the place we are going to write that it

1346
00:42:10,539 --> 00:42:12,450
will change

1347
00:42:12,450 --> 00:42:17,830
good our question yes no  we'll go otherwise

1348
00:42:17,830 --> 00:42:18,820
I think my colleague has already done it

1349
00:42:18,820 --> 00:42:20,920
but hey those who are interested in a

1350
00:42:20,920 --> 00:42:23,460
question so as a reminder afterwards

1351
00:42:23,460 --> 00:42:26,710
thank you for the press it was cool I have

1352
00:42:26,710 --> 00:42:28,480
a little question so there in your

1353
00:42:28,480 --> 00:42:29,740
case we have  modified its

1354
00:42:29,740 --> 00:42:32,170
bootloader to pass your conditions and

1355
00:42:32,170 --> 00:42:33,340
you said that suddenly it was a

1356
00:42:33,340 --> 00:42:35,080
bad way to do secure boot

1357
00:42:35,080 --> 00:42:37,030
typically put how you check

1358
00:42:37,030 --> 00:42:38,770
the integrity of your bootloader if you can

1359
00:42:38,770 --> 00:42:40,630
not read write and write your bootrom in

1360
00:42:40,630 --> 00:42:43,300
fa  it quite typically the boudreau

1361
00:42:43,300 --> 00:42:45,760
barque of the keys of the keys

1362
00:42:45,760 --> 00:42:46,660
of allowing the authentication of the

1363
00:42:46,660 --> 00:42:47,980
bulldozers so basically the mud of rome

1364
00:42:47,980 --> 00:42:49,350
makes

1365
00:42:49,350 --> 00:42:51,990
that we will say as to will

1366
00:42:51,990 --> 00:42:53,740
transfer executions to the bulldozers who

1367
00:42:53,740 --> 00:42:55,360
count themselves sounded flash the aude the

1368
00:42:55,360 --> 00:42:58,210
contents of the bulldozers calculates the h is

1369
00:42:58,210 --> 00:42:59,770
then authenticates 2 h at the base and on

1370
00:42:59,770 --> 00:43:01,720
the keys for the vast majority of the time

1371
00:43:01,720 --> 00:43:03,160
that means that your bootloader you can

1372
00:43:03,160 --> 00:43:04,870
never update it what yeah that

1373
00:43:04,870 --> 00:43:06,430
then if if if you can update

1374
00:43:06,430 --> 00:43:07,690
because  that generally you have two

1375
00:43:07,690 --> 00:43:10,190
methods either two lakes the ponds of

1376
00:43:10,190 --> 00:43:12,920
in the mud drome but generally the

1377
00:43:12,920 --> 00:43:14,270
signature goes with two bulldozers in

1378
00:43:14,270 --> 00:43:16,100
the flash memory that is to say you can

1379
00:43:16,100 --> 00:43:17,450
very well steal a new taste of

1380
00:43:17,450 --> 00:43:18,410
the hour water with  his new signature

1381
00:43:18,410 --> 00:43:20,780
and make it work it's

1382
00:43:20,780 --> 00:43:22,070
just that the key on the other hand it's

1383
00:43:22,070 --> 00:43:23,420
supposed to be secret and not power is

1384
00:43:23,420 --> 00:43:24,560
extracted for that i just now

1385
00:43:24,560 --> 00:43:26,120
that mud we are in some

1386
00:43:26,120 --> 00:43:27,800
cases we can  not forced  nt take them out and

1387
00:43:27,800 --> 00:43:29,000
generally we can't take them out you

1388
00:43:29,000 --> 00:43:30,500
have to use acts to succeed in

1389
00:43:30,500 --> 00:43:33,170
recovering the content and if you accept

1390
00:43:33,170 --> 00:43:34,730
the mud drôme generally that does not

1391
00:43:34,730 --> 00:43:35,750
mean that it can compromise the system

1392
00:43:35,750 --> 00:43:38,060
because it must be seen that you are  on a

1393
00:43:38,060 --> 00:43:40,130
system of asymmetric keys and with the key

1394
00:43:40,130 --> 00:43:44,720
generally here who is who and where he

1395
00:43:44,720 --> 00:43:46,160
declares I can and private publicly

1396
00:43:46,160 --> 00:43:47,450
but I believe that it is deprived of memory

1397
00:43:47,450 --> 00:43:50,180
which is used to verify as soon as those who are in

1398
00:43:50,180 --> 00:43:51,380
debt crypto suits me

1399
00:43:51,380 --> 00:43:53,780
well  sure if I say nonsense basically

1400
00:43:53,780 --> 00:43:54,590
you have a key which is used to verify

1401
00:43:54,590 --> 00:43:56,060
the authenticity a key which is used to

1402
00:43:56,060 --> 00:43:58,250
produce the signature and suddenly this

1403
00:43:58,250 --> 00:43:59,360
click is used to produce the signature so you

1404
00:43:59,360 --> 00:44:01,340
do not have basically even if you manage

1405
00:44:01,340 --> 00:44:02,810
to  getting your hands on the key is not

1406
00:44:02,810 --> 00:44:04,220
catastrophic from the point of view of the

1407
00:44:04,220 --> 00:44:07,010
security of the device that said it's

1408
00:44:07,010 --> 00:44:08,450
still not great to get your hands

1409
00:44:08,450 --> 00:44:09,500
on dabo must not what does that mean

1410
00:44:09,500 --> 00:44:11,180
that you have access to  codes that runs

1411
00:44:11,180 --> 00:44:12,290
and you can do the search

1412
00:44:12,290 --> 00:44:13,520
vulnerabilities typically buffer

1413
00:44:13,520 --> 00:44:15,530
overflow another function and we can

1414
00:44:15,530 --> 00:44:17,090
manage to present it with a condition

1415
00:44:17,090 --> 00:44:18,740
which means that suddenly we can divert

1416
00:44:18,740 --> 00:44:20,840
the use of the drome mud and

1417
00:44:20,840 --> 00:44:22,400
either execute code from the code

1418
00:44:22,400 --> 00:44:23,780
of the drome mud and bypass and

1419
00:44:23,780 --> 00:44:25,190
signature verification which is

1420
00:44:25,190 --> 00:44:26,240
generally what we are looking to do

1421
00:44:26,240 --> 00:44:28,580
but not only and that's it finally after there are

1422
00:44:28,580 --> 00:44:30,080
plenty of other serious things that can be

1423
00:44:30,080 --> 00:44:32,060
launched so that little can result from

1424
00:44:32,060 --> 00:44:33,530
but again it's not really

1425
00:44:33,530 --> 00:44:35,270
the same  level of research must be

1426
00:44:35,270 --> 00:44:36,680
done between judges I pass two

1427
00:44:36,680 --> 00:44:38,540
bulldozers and basta and I have to thank

1428
00:44:38,540 --> 00:44:40,220
everyone a good run find

1429
00:44:40,220 --> 00:44:41,540
vulgarities to exploit them

1430
00:44:41,540 --> 00:44:43,100
was arrested to be able to execute a code

1431
00:44:43,100 --> 00:44:45,640
which was not planned

1432
00:44:48,020 --> 00:44:51,130
so not  any other questions

1433
00:44:51,760 --> 00:44:57,190
ok thank you virtues of the look

1434
00:44:57,980 --> 00:45:01,630
[Applause]

