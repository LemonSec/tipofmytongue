1
00:00:01,470 --> 00:00:02,879
[Applause]

2
00:00:02,879 --> 00:00:05,200
so thank you

3
00:00:05,200 --> 00:00:07,200
is it audible yeah

4
00:00:07,200 --> 00:00:09,840
so today we're gonna see the session

5
00:00:09,840 --> 00:00:13,040
called what's next after domain admin so

6
00:00:13,040 --> 00:00:15,040
this would basically walk you through

7
00:00:15,040 --> 00:00:17,520
the attacks and techniques that we

8
00:00:17,520 --> 00:00:20,800
explored during our pentest engagements

9
00:00:20,800 --> 00:00:22,640
what we did was we were able to land

10
00:00:22,640 --> 00:00:25,840
into azure after compromising the

11
00:00:25,840 --> 00:00:29,480
on-premise network

12
00:00:30,640 --> 00:00:33,280
so this is who are we uh this is me

13
00:00:33,280 --> 00:00:35,440
venkat raman kumar goes by the handle

14
00:00:35,440 --> 00:00:37,520
red wolf i'm currently the chapter lead

15
00:00:37,520 --> 00:00:39,920
at os chapter chennai india

16
00:00:39,920 --> 00:00:42,320
here is my friend tiramin goes by the

17
00:00:42,320 --> 00:00:45,680
handle what oh we both work at a second

18
00:00:45,680 --> 00:00:47,440
as security analyst

19
00:00:47,440 --> 00:00:48,879
we hold couple of retaining

20
00:00:48,879 --> 00:00:51,760
certifications like crtp crt and couple

21
00:00:51,760 --> 00:00:53,760
of more from hack the box

22
00:00:53,760 --> 00:00:56,800
we love enjoy retaining exercises

23
00:00:56,800 --> 00:00:58,399
currently we are researching on active

24
00:00:58,399 --> 00:01:00,160
directory attacks and adversary

25
00:01:00,160 --> 00:01:03,440
stimulation do check out her handles and

26
00:01:03,440 --> 00:01:05,840
blocks

27
00:01:06,240 --> 00:01:07,360
so

28
00:01:07,360 --> 00:01:08,880
this is it

29
00:01:08,880 --> 00:01:12,240
the today's agenda gonna be uh how and

30
00:01:12,240 --> 00:01:15,119
why it is important to move into azure

31
00:01:15,119 --> 00:01:16,560
we're gonna start off with some

32
00:01:16,560 --> 00:01:18,320
introduction about azure active

33
00:01:18,320 --> 00:01:19,520
directory

34
00:01:19,520 --> 00:01:21,439
uh we're gonna discuss about hybrid

35
00:01:21,439 --> 00:01:23,119
identities and

36
00:01:23,119 --> 00:01:25,520
the its authentication methods

37
00:01:25,520 --> 00:01:27,680
we're gonna also perform some recon

38
00:01:27,680 --> 00:01:30,560
about the tenant registered over azir

39
00:01:30,560 --> 00:01:32,880
uh from an authenticated as well as

40
00:01:32,880 --> 00:01:35,280
unauthenticated perspective

41
00:01:35,280 --> 00:01:36,720
at last we're gonna

42
00:01:36,720 --> 00:01:39,439
see the exploitation of

43
00:01:39,439 --> 00:01:43,040
uh compromising azure from an on-premise

44
00:01:43,040 --> 00:01:44,000
network

45
00:01:44,000 --> 00:01:46,399
uh by abusing various other

46
00:01:46,399 --> 00:01:48,560
authentication methods

47
00:01:48,560 --> 00:01:50,640
before getting into the actual session i

48
00:01:50,640 --> 00:01:53,520
just wanted to emphasize few points here

49
00:01:53,520 --> 00:01:55,920
this whole session would walk you

50
00:01:55,920 --> 00:01:59,439
through the attacks only with the

51
00:01:59,439 --> 00:02:03,758
fear of the assumption one is which

52
00:02:04,000 --> 00:02:06,560
we you require domain administrator

53
00:02:06,560 --> 00:02:10,479
privilege to get through this attack and

54
00:02:10,479 --> 00:02:13,040
it is also important to remember that

55
00:02:13,040 --> 00:02:14,080
we're gonna

56
00:02:14,080 --> 00:02:16,720
see the actual exploitation method

57
00:02:16,720 --> 00:02:19,440
if there is an edr or any kind of

58
00:02:19,440 --> 00:02:21,200
antivirus solution present in your

59
00:02:21,200 --> 00:02:24,480
network first you need to bypass it

60
00:02:24,480 --> 00:02:26,800
after which you can try this attacks to

61
00:02:26,800 --> 00:02:29,200
compromise azure what do you stay on you

62
00:02:29,200 --> 00:02:30,959
can start thank you good afternoon

63
00:02:30,959 --> 00:02:32,720
everyone

64
00:02:32,720 --> 00:02:34,160
so

65
00:02:34,160 --> 00:02:36,480
let's talk about how it all started

66
00:02:36,480 --> 00:02:38,720
in our pentest engagements during

67
00:02:38,720 --> 00:02:40,239
especially during the privilege

68
00:02:40,239 --> 00:02:42,640
escalation phases after uh getting an

69
00:02:42,640 --> 00:02:44,000
initial

70
00:02:44,000 --> 00:02:46,000
foothold over the domain we identified

71
00:02:46,000 --> 00:02:48,160
some common patterns so the username

72
00:02:48,160 --> 00:02:51,200
called msol followed by some hex had

73
00:02:51,200 --> 00:02:52,800
replicating directory changes and

74
00:02:52,800 --> 00:02:54,080
replicating directory changes all

75
00:02:54,080 --> 00:02:56,720
privileges over the domain so this could

76
00:02:56,720 --> 00:02:59,440
allow us to do a dc sync attack

77
00:02:59,440 --> 00:03:02,000
so what we initially thought is like

78
00:03:02,000 --> 00:03:03,519
if we find a way to compromise this

79
00:03:03,519 --> 00:03:05,599
particular user account you would be

80
00:03:05,599 --> 00:03:07,680
able to land us da so that we could

81
00:03:07,680 --> 00:03:09,760
replicate this across all the other

82
00:03:09,760 --> 00:03:12,000
engagements but what happened was vice

83
00:03:12,000 --> 00:03:13,440
versa we would be

84
00:03:13,440 --> 00:03:17,040
we are landed over azure

85
00:03:17,760 --> 00:03:19,280
so uh these are some pictorial

86
00:03:19,280 --> 00:03:20,800
representation about the domain

87
00:03:20,800 --> 00:03:23,280
associations between the msoel accounts

88
00:03:23,280 --> 00:03:25,360
and the domain so you could see that ms

89
00:03:25,360 --> 00:03:27,280
oil account has gate changes and get

90
00:03:27,280 --> 00:03:29,680
changes all privileges for the domain so

91
00:03:29,680 --> 00:03:31,840
this could basically allow you to

92
00:03:31,840 --> 00:03:34,000
do a dc sync attack or to get the

93
00:03:34,000 --> 00:03:36,319
administrator rash of the domain

94
00:03:36,319 --> 00:03:38,239
also there is a generic right privilege

95
00:03:38,239 --> 00:03:40,000
or the domain admins group this would

96
00:03:40,000 --> 00:03:41,519
allow you to add yourselves to the

97
00:03:41,519 --> 00:03:44,400
domain admins group

98
00:03:44,799 --> 00:03:47,599
so why we need to move into azure so

99
00:03:47,599 --> 00:03:50,560
basically it's a lot more fun because we

100
00:03:50,560 --> 00:03:52,560
have uh we can identify a lot of

101
00:03:52,560 --> 00:03:54,480
personally identifiable information

102
00:03:54,480 --> 00:03:56,319
about the clients a lot of credit card

103
00:03:56,319 --> 00:03:58,640
transaction details uh their financial

104
00:03:58,640 --> 00:04:01,680
stuffs and other budget informations

105
00:04:01,680 --> 00:04:04,799
also our organizations tend to move into

106
00:04:04,799 --> 00:04:05,920
azure

107
00:04:05,920 --> 00:04:08,080
ad since uh they are support from

108
00:04:08,080 --> 00:04:10,480
microsoft and also it can be easily

109
00:04:10,480 --> 00:04:12,720
integrated with on-premises ad

110
00:04:12,720 --> 00:04:14,959
so here are some stats that describes

111
00:04:14,959 --> 00:04:17,279
how often

112
00:04:17,279 --> 00:04:19,759
the organizations are moving to azure

113
00:04:19,759 --> 00:04:21,358
and also here are some stats that

114
00:04:21,358 --> 00:04:24,400
describes our azure compromise on our

115
00:04:24,400 --> 00:04:26,960
engagements also nowadays

116
00:04:26,960 --> 00:04:28,639
the clients are not satisfied just by

117
00:04:28,639 --> 00:04:30,400
compromising their domain they look for

118
00:04:30,400 --> 00:04:33,359
more interesting stuffs

119
00:04:34,240 --> 00:04:35,919
uh the scope of privilege escalation

120
00:04:35,919 --> 00:04:38,240
increases exponentially with this azure

121
00:04:38,240 --> 00:04:40,800
compromise so example if you take a

122
00:04:40,800 --> 00:04:42,400
tenant called example.com has been

123
00:04:42,400 --> 00:04:44,639
compromised and there may be a lot of

124
00:04:44,639 --> 00:04:46,800
domains present within a single tenant

125
00:04:46,800 --> 00:04:48,479
so if you haven't compromised any of

126
00:04:48,479 --> 00:04:51,680
those domains on the on-premises network

127
00:04:51,680 --> 00:04:53,680
you could easily create a user on that

128
00:04:53,680 --> 00:04:55,360
domain with the synchronization

129
00:04:55,360 --> 00:04:57,040
permissions you could just land over to

130
00:04:57,040 --> 00:05:01,120
da on the on-premises network

131
00:05:02,320 --> 00:05:04,080
uh let's now talk about the introduction

132
00:05:04,080 --> 00:05:06,240
so azure active directory is basically a

133
00:05:06,240 --> 00:05:07,360
cloud-based

134
00:05:07,360 --> 00:05:09,199
identity and access management service

135
00:05:09,199 --> 00:05:10,800
are used for authentication and

136
00:05:10,800 --> 00:05:12,320
authorization purposes

137
00:05:12,320 --> 00:05:14,199
some key differences between on-premises

138
00:05:14,199 --> 00:05:16,720
radioactivity is like on-premises ad

139
00:05:16,720 --> 00:05:18,639
follow a domain for a structure whereas

140
00:05:18,639 --> 00:05:21,120
in azure ready we have tenants for

141
00:05:21,120 --> 00:05:23,120
authentication purposes on on-premises

142
00:05:23,120 --> 00:05:25,520
eddie we use ntlm and kirbros tickets

143
00:05:25,520 --> 00:05:27,759
whereas in azure ready we use what saml

144
00:05:27,759 --> 00:05:29,840
and open id configurations

145
00:05:29,840 --> 00:05:31,360
and azure

146
00:05:31,360 --> 00:05:33,680
on-premises ad has organizational units

147
00:05:33,680 --> 00:05:36,080
and gpus whereas in azure id we have in

148
00:05:36,080 --> 00:05:37,199
those

149
00:05:37,199 --> 00:05:37,919
and

150
00:05:37,919 --> 00:05:40,880
for querying the data on

151
00:05:40,880 --> 00:05:43,039
on-premises ad we use ldap whereas in

152
00:05:43,039 --> 00:05:46,719
azure ready we use web apis

153
00:05:47,600 --> 00:05:49,919
so let's now see what is hybrid identity

154
00:05:49,919 --> 00:05:52,000
microsoft introduced this feature for

155
00:05:52,000 --> 00:05:53,440
integrating the azure id with the

156
00:05:53,440 --> 00:05:55,520
on-premises city so this will create a

157
00:05:55,520 --> 00:05:57,120
standard user identity for

158
00:05:57,120 --> 00:05:58,319
authentication and authorization

159
00:05:58,319 --> 00:06:00,240
purposes or to all the resources

160
00:06:00,240 --> 00:06:01,680
regardless of the location whether you

161
00:06:01,680 --> 00:06:03,199
are accessing the resource on the

162
00:06:03,199 --> 00:06:06,160
on-premises ad or on azure id this

163
00:06:06,160 --> 00:06:08,800
simply means like the users

164
00:06:08,800 --> 00:06:10,319
can eliminate the

165
00:06:10,319 --> 00:06:11,919
requirement for having multiple

166
00:06:11,919 --> 00:06:13,680
authentication materials rather than

167
00:06:13,680 --> 00:06:15,520
having a single authentication material

168
00:06:15,520 --> 00:06:17,199
and access all the resources regardless

169
00:06:17,199 --> 00:06:19,199
of their locations to achieve this we

170
00:06:19,199 --> 00:06:21,680
have three authentication methods one is

171
00:06:21,680 --> 00:06:23,840
password synchronization other one is

172
00:06:23,840 --> 00:06:25,199
pass through authentication the other

173
00:06:25,199 --> 00:06:26,880
one is active directory federated

174
00:06:26,880 --> 00:06:28,000
services

175
00:06:28,000 --> 00:06:29,759
so let's see one by one

176
00:06:29,759 --> 00:06:30,560
uh

177
00:06:30,560 --> 00:06:31,680
the

178
00:06:31,680 --> 00:06:33,520
password has synchronization as the name

179
00:06:33,520 --> 00:06:35,120
suggests it is used for synchronizing

180
00:06:35,120 --> 00:06:37,600
the passwords between

181
00:06:37,600 --> 00:06:40,000
the on premiered and azure id

182
00:06:40,000 --> 00:06:41,360
password authentication is where the

183
00:06:41,360 --> 00:06:43,840
user sign-in request is sent over to the

184
00:06:43,840 --> 00:06:45,600
on-premises id for validation and the

185
00:06:45,600 --> 00:06:47,600
response is sent back

186
00:06:47,600 --> 00:06:50,160
to the azure id in azure active in

187
00:06:50,160 --> 00:06:51,919
active directory federated services it

188
00:06:51,919 --> 00:06:53,759
is based on a third party entity called

189
00:06:53,759 --> 00:06:55,840
the federated server it uses

190
00:06:55,840 --> 00:06:57,280
certificate-based authentication

191
00:06:57,280 --> 00:07:00,000
mechanisms

192
00:07:00,400 --> 00:07:02,880
so let's now uh see about some basic

193
00:07:02,880 --> 00:07:05,680
enumerations over the tenant the simple

194
00:07:05,680 --> 00:07:08,560
and easiest way you could uh

195
00:07:08,560 --> 00:07:10,560
check if the organization is using the

196
00:07:10,560 --> 00:07:13,599
azure services or not is by just giving

197
00:07:13,599 --> 00:07:16,240
the client email id in the login and if

198
00:07:16,240 --> 00:07:18,080
the login takes you to the password page

199
00:07:18,080 --> 00:07:19,919
then the organization might be using

200
00:07:19,919 --> 00:07:22,240
audio services otherwise it's not gonna

201
00:07:22,240 --> 00:07:23,520
be using

202
00:07:23,520 --> 00:07:25,520
the other one is by just hitting a get

203
00:07:25,520 --> 00:07:27,599
request to the following endpoint just

204
00:07:27,599 --> 00:07:30,160
replacing uh the domain name with the

205
00:07:30,160 --> 00:07:32,960
target domain if it returns the tenant

206
00:07:32,960 --> 00:07:35,440
id of the domain then the organization

207
00:07:35,440 --> 00:07:38,880
is using the azure services

208
00:07:40,880 --> 00:07:43,199
the most common way to enumerate and

209
00:07:43,199 --> 00:07:45,280
abuse the azure services

210
00:07:45,280 --> 00:07:48,160
is using aid internals it is a powerful

211
00:07:48,160 --> 00:07:49,599
tool uh you

212
00:07:49,599 --> 00:07:52,560
use for leveraging uh the azure services

213
00:07:52,560 --> 00:07:53,520
so

214
00:07:53,520 --> 00:07:55,680
we you can use these tools in two

215
00:07:55,680 --> 00:07:58,240
methods one is by directly importing the

216
00:07:58,240 --> 00:08:00,080
aid internals into the powershell or by

217
00:08:00,080 --> 00:08:03,599
installing it or the partial so we can

218
00:08:03,599 --> 00:08:05,440
get a basic informations like tenant

219
00:08:05,440 --> 00:08:08,639
name authentication type brand name

220
00:08:08,639 --> 00:08:10,319
using the following command by just

221
00:08:10,319 --> 00:08:11,680
specifying the domain name as the

222
00:08:11,680 --> 00:08:13,919
parameter the same applies for the

223
00:08:13,919 --> 00:08:16,719
tenant id2

224
00:08:20,160 --> 00:08:22,000
we could also gather

225
00:08:22,000 --> 00:08:23,840
the number of domains on the domains

226
00:08:23,840 --> 00:08:26,160
that are present on the single tenant to

227
00:08:26,160 --> 00:08:27,440
achieve this you can just use the

228
00:08:27,440 --> 00:08:29,520
following command specific domain name

229
00:08:29,520 --> 00:08:31,680
as the parameter so it lists all the

230
00:08:31,680 --> 00:08:33,200
domains that are present in a single

231
00:08:33,200 --> 00:08:35,679
tenant azure services are also available

232
00:08:35,679 --> 00:08:37,839
at specific domains and sub domains of

233
00:08:37,839 --> 00:08:39,360
the root tenant

234
00:08:39,360 --> 00:08:41,200
so you could enumerate this using a tool

235
00:08:41,200 --> 00:08:43,039
called micro buster which basically

236
00:08:43,039 --> 00:08:45,040
brute forces the subdomains that are

237
00:08:45,040 --> 00:08:46,640
present over the azure services for

238
00:08:46,640 --> 00:08:48,560
example you could say an organization

239
00:08:48,560 --> 00:08:50,800
called example.com uses sharepoint so

240
00:08:50,800 --> 00:08:52,320
the azure service will be like

241
00:08:52,320 --> 00:08:54,000
sharepoint.example.com

242
00:08:54,000 --> 00:08:56,240
so microbus will help us to brute force

243
00:08:56,240 --> 00:08:58,800
these names

244
00:08:59,040 --> 00:09:00,320
that's all from an authentic

245
00:09:00,320 --> 00:09:01,920
unauthenticated perspective let's move

246
00:09:01,920 --> 00:09:03,920
on to the authenticated annotation so

247
00:09:03,920 --> 00:09:06,080
once you land as a domain admin you

248
00:09:06,080 --> 00:09:08,240
could just

249
00:09:08,240 --> 00:09:10,240
dump the ntds file from the domain

250
00:09:10,240 --> 00:09:12,000
controller and crack it

251
00:09:12,000 --> 00:09:14,240
the crack dashes so once you crack the

252
00:09:14,240 --> 00:09:16,080
ashes you could just pray over those

253
00:09:16,080 --> 00:09:17,920
clear text credentials on the azure

254
00:09:17,920 --> 00:09:20,320
services to check which user have a

255
00:09:20,320 --> 00:09:22,320
valid azure association to the azure

256
00:09:22,320 --> 00:09:24,160
services after

257
00:09:24,160 --> 00:09:25,440
getting

258
00:09:25,440 --> 00:09:27,680
the list of users uh that are connected

259
00:09:27,680 --> 00:09:29,279
to the azure services you could just

260
00:09:29,279 --> 00:09:31,040
create a credential blob

261
00:09:31,040 --> 00:09:33,040
and request for a token and save it to

262
00:09:33,040 --> 00:09:34,160
the cache

263
00:09:34,160 --> 00:09:35,600
so this

264
00:09:35,600 --> 00:09:37,600
is considered as a valid authentication

265
00:09:37,600 --> 00:09:40,000
material and you could do the authentic

266
00:09:40,000 --> 00:09:42,000
authenticated immigration further

267
00:09:42,000 --> 00:09:44,399
like getting the sync configuration

268
00:09:44,399 --> 00:09:46,720
where the azure ad sync service is

269
00:09:46,720 --> 00:09:47,600
running

270
00:09:47,600 --> 00:09:50,000
and also it includes gathering all the

271
00:09:50,000 --> 00:09:51,920
users who are synced to the on-premises

272
00:09:51,920 --> 00:09:54,000
network the devices the applications

273
00:09:54,000 --> 00:09:56,240
that are registered with the azure we

274
00:09:56,240 --> 00:09:58,080
also have a tool called azure home which

275
00:09:58,080 --> 00:10:00,640
is basically a blood down in gesture

276
00:10:00,640 --> 00:10:02,800
for azure so once we populate all the

277
00:10:02,800 --> 00:10:04,320
data

278
00:10:04,320 --> 00:10:06,480
from the azure we could just import that

279
00:10:06,480 --> 00:10:09,040
it along with the on-premises blood one

280
00:10:09,040 --> 00:10:11,200
files so this would leverage

281
00:10:11,200 --> 00:10:14,720
uh this uh blood azure hound to get all

282
00:10:14,720 --> 00:10:17,120
the available attack pots exploitable

283
00:10:17,120 --> 00:10:19,600
attack pods on azure key wallet and it

284
00:10:19,600 --> 00:10:21,440
will also return all the on-prem users

285
00:10:21,440 --> 00:10:22,959
who has

286
00:10:22,959 --> 00:10:25,120
edges over to azure services it could

287
00:10:25,120 --> 00:10:27,360
also retrieve all the users who have

288
00:10:27,360 --> 00:10:30,800
global administrator privileges

289
00:10:31,360 --> 00:10:33,519
so uh let's discuss about azure ready

290
00:10:33,519 --> 00:10:35,040
connect so what is azure ready connect

291
00:10:35,040 --> 00:10:36,640
it is a microsoft application designed

292
00:10:36,640 --> 00:10:38,720
to achieve hybrid identity when ad

293
00:10:38,720 --> 00:10:40,160
connect is configured with password

294
00:10:40,160 --> 00:10:42,320
synchronization it just creates two

295
00:10:42,320 --> 00:10:44,079
accounts which is normally a service

296
00:10:44,079 --> 00:10:46,480
account one on azure and on on-premises

297
00:10:46,480 --> 00:10:49,040
id the passwords on the

298
00:10:49,040 --> 00:10:50,160
for the services accounts on the

299
00:10:50,160 --> 00:10:52,399
on-premedia stored either in a database

300
00:10:52,399 --> 00:10:55,040
or in lsa secrets the service accounts

301
00:10:55,040 --> 00:10:56,560
created in azure and on-premises id have

302
00:10:56,560 --> 00:10:58,560
the following syntax whereas in azure

303
00:10:58,560 --> 00:11:00,959
ready we have a sync followed by the

304
00:11:00,959 --> 00:11:02,640
server where the azure id connect

305
00:11:02,640 --> 00:11:04,640
service is running followed by a toll

306
00:11:04,640 --> 00:11:06,560
character random string and the tenant

307
00:11:06,560 --> 00:11:09,519
name on on-premises id we have msol the

308
00:11:09,519 --> 00:11:11,519
username starts with msol followed by

309
00:11:11,519 --> 00:11:14,959
the random string and the domain name

310
00:11:14,959 --> 00:11:16,560
so these are considered as high value

311
00:11:16,560 --> 00:11:18,720
targets accounts since they have

312
00:11:18,720 --> 00:11:20,399
synchronization privileges these are

313
00:11:20,399 --> 00:11:21,920
created solely for the purpose of

314
00:11:21,920 --> 00:11:24,320
synchronization the sync account which

315
00:11:24,320 --> 00:11:26,320
is created on the azure id is assigned

316
00:11:26,320 --> 00:11:27,279
with the role of directory

317
00:11:27,279 --> 00:11:29,279
synchronization accounts which has the

318
00:11:29,279 --> 00:11:31,760
privileges to create modify and delete

319
00:11:31,760 --> 00:11:33,519
users including those of global

320
00:11:33,519 --> 00:11:36,160
administrators whereas amazon accounts

321
00:11:36,160 --> 00:11:37,920
have replicating direct exchanges and

322
00:11:37,920 --> 00:11:39,200
replicating directly changes all

323
00:11:39,200 --> 00:11:41,440
privileges so that we could do a dc sync

324
00:11:41,440 --> 00:11:43,839
attack

325
00:11:44,160 --> 00:11:45,760
so this is the flow of the password as

326
00:11:45,760 --> 00:11:48,160
synchronization let us say that

327
00:11:48,160 --> 00:11:50,480
a user with the password of one access

328
00:11:50,480 --> 00:11:53,440
the resources on the on-premises id so

329
00:11:53,440 --> 00:11:55,839
since azure ready connect services is

330
00:11:55,839 --> 00:11:57,519
configured the passwords are

331
00:11:57,519 --> 00:12:00,160
synchronized in a specified interval so

332
00:12:00,160 --> 00:12:02,880
that the user could access the azure

333
00:12:02,880 --> 00:12:04,480
services with the same password this

334
00:12:04,480 --> 00:12:07,200
eliminates the need for the user to have

335
00:12:07,200 --> 00:12:11,160
multiple authentication materials

336
00:12:12,160 --> 00:12:14,800
so uh let's discuss about how to target

337
00:12:14,800 --> 00:12:17,200
ad connect server let's say

338
00:12:17,200 --> 00:12:18,959
organization has thousands and thousands

339
00:12:18,959 --> 00:12:21,200
of missions so you just need to

340
00:12:21,200 --> 00:12:22,959
concentrate on the servers where ad

341
00:12:22,959 --> 00:12:25,360
connect service is running for that you

342
00:12:25,360 --> 00:12:28,000
could just use blood down that could be

343
00:12:28,000 --> 00:12:29,519
the right place you could search for

344
00:12:29,519 --> 00:12:32,160
amazon accounts so this ms ol account

345
00:12:32,160 --> 00:12:33,680
will have

346
00:12:33,680 --> 00:12:35,600
the machine name where the azure ad

347
00:12:35,600 --> 00:12:36,800
connect service is running in the

348
00:12:36,800 --> 00:12:38,880
description so you could also look out

349
00:12:38,880 --> 00:12:40,880
for combinations of keywords like sync

350
00:12:40,880 --> 00:12:43,519
aad cld as that connect on the host

351
00:12:43,519 --> 00:12:45,440
names of the missions so nowadays many

352
00:12:45,440 --> 00:12:47,120
organizations will have host names

353
00:12:47,120 --> 00:12:49,760
related to the purpose

354
00:12:49,760 --> 00:12:51,279
the machine running azure id connect

355
00:12:51,279 --> 00:12:53,760
service might have also ms sql services

356
00:12:53,760 --> 00:12:55,600
configured since azure id connect

357
00:12:55,600 --> 00:12:59,040
services uses the ms sql for storing

358
00:12:59,040 --> 00:13:00,959
their data and credentials so this could

359
00:13:00,959 --> 00:13:02,560
narrow down your search

360
00:13:02,560 --> 00:13:05,200
drastically

361
00:13:05,200 --> 00:13:07,839
so uh now let's see how to

362
00:13:07,839 --> 00:13:10,240
actually take over uh

363
00:13:10,240 --> 00:13:12,240
this azure id with uh

364
00:13:12,240 --> 00:13:14,560
password synchronization

365
00:13:14,560 --> 00:13:16,160
so most of the organization stores the

366
00:13:16,160 --> 00:13:18,560
service accounts passwords in lsa uh if

367
00:13:18,560 --> 00:13:21,120
we have a da or a local

368
00:13:21,120 --> 00:13:23,120
administrator credentials of the azure

369
00:13:23,120 --> 00:13:25,040
connect service machine you could just

370
00:13:25,040 --> 00:13:27,440
directly dump the lsa secrets that would

371
00:13:27,440 --> 00:13:29,760
give you the clear text credentials of

372
00:13:29,760 --> 00:13:31,040
the azure connect service that are

373
00:13:31,040 --> 00:13:33,360
running so this image was actually taken

374
00:13:33,360 --> 00:13:35,200
from a real-world scenario where you

375
00:13:35,200 --> 00:13:36,560
could see that there is a clear text

376
00:13:36,560 --> 00:13:38,639
credential of the azure service

377
00:13:38,639 --> 00:13:40,320
machine account

378
00:13:40,320 --> 00:13:41,920
so this would uh this is actually a

379
00:13:41,920 --> 00:13:43,600
global administrator

380
00:13:43,600 --> 00:13:46,560
so this makes us makes our life easy the

381
00:13:46,560 --> 00:13:48,480
other way is you can jump just dump the

382
00:13:48,480 --> 00:13:49,920
credentials upon accessing the machine

383
00:13:49,920 --> 00:13:52,320
directly using aid internals you could

384
00:13:52,320 --> 00:13:53,360
just

385
00:13:53,360 --> 00:13:55,120
dump the sync credentials along with

386
00:13:55,120 --> 00:13:58,160
their clear text credential

387
00:13:59,279 --> 00:14:02,079
so upon having all these sync credential

388
00:14:02,079 --> 00:14:03,199
data

389
00:14:03,199 --> 00:14:06,320
we could use this data to leverage uh

390
00:14:06,320 --> 00:14:08,079
the synchronization

391
00:14:08,079 --> 00:14:10,880
capabilities of the azure ready so to

392
00:14:10,880 --> 00:14:12,160
have

393
00:14:12,160 --> 00:14:14,240
to be able to compromise dashi ready

394
00:14:14,240 --> 00:14:14,959
with

395
00:14:14,959 --> 00:14:16,720
password synchronization

396
00:14:16,720 --> 00:14:19,440
technique we just need couple of

397
00:14:19,440 --> 00:14:21,680
other things which is uh the users who

398
00:14:21,680 --> 00:14:23,680
have global administrator role

399
00:14:23,680 --> 00:14:25,920
configured on the other is the immutable

400
00:14:25,920 --> 00:14:28,240
id of the global administrator account

401
00:14:28,240 --> 00:14:30,639
immutability is nothing but a unique

402
00:14:30,639 --> 00:14:33,360
identifier for that is given to all the

403
00:14:33,360 --> 00:14:35,199
azure id users

404
00:14:35,199 --> 00:14:37,519
so with this we could also use uh to

405
00:14:37,519 --> 00:14:39,120
reset and change all the other

406
00:14:39,120 --> 00:14:41,680
properties of the global administrator

407
00:14:41,680 --> 00:14:43,839
here is a quick demo

408
00:14:43,839 --> 00:14:46,079
so

409
00:14:46,480 --> 00:14:49,040
i will be explaining this

410
00:14:49,040 --> 00:14:50,959
so the first step is to import the aid

411
00:14:50,959 --> 00:14:53,360
internals in the partial module

412
00:14:53,360 --> 00:14:55,839
and with this we could just uh

413
00:14:55,839 --> 00:14:57,680
dump the credentials of the sync account

414
00:14:57,680 --> 00:14:59,440
so upon getting the clear text

415
00:14:59,440 --> 00:15:01,360
credential of the sync account

416
00:15:01,360 --> 00:15:04,240
we could just create a credential block

417
00:15:04,240 --> 00:15:06,720
and store the credentials

418
00:15:06,720 --> 00:15:09,040
after which we just need to import aad

419
00:15:09,040 --> 00:15:10,800
internals and

420
00:15:10,800 --> 00:15:12,720
just request a ticket

421
00:15:12,720 --> 00:15:15,360
and save it to cash so this is basically

422
00:15:15,360 --> 00:15:17,519
uh

423
00:15:17,519 --> 00:15:19,680
serves as authentication material for

424
00:15:19,680 --> 00:15:22,719
that particular user

425
00:15:23,279 --> 00:15:25,279
so now we are authenticated with that

426
00:15:25,279 --> 00:15:27,040
particular user

427
00:15:27,040 --> 00:15:29,680
next step is to look for the users those

428
00:15:29,680 --> 00:15:31,279
have global administrator role

429
00:15:31,279 --> 00:15:34,160
configured so in our case we could just

430
00:15:34,160 --> 00:15:37,040
take csw as a global administrator next

431
00:15:37,040 --> 00:15:38,800
step is to get the immutable id of that

432
00:15:38,800 --> 00:15:42,000
user for that we could use

433
00:15:42,000 --> 00:15:45,920
the other command get aid intuses

434
00:15:45,920 --> 00:15:47,440
and grip only

435
00:15:47,440 --> 00:15:49,440
the immutable id so as you could see

436
00:15:49,440 --> 00:15:51,360
this throws all the immutability

437
00:15:51,360 --> 00:15:53,680
immutability of all the users so we just

438
00:15:53,680 --> 00:15:57,920
need a immutable id of csw user who is a

439
00:15:57,920 --> 00:15:59,440
global admin

440
00:15:59,440 --> 00:16:03,120
so with all these information

441
00:16:03,440 --> 00:16:05,040
we could just

442
00:16:05,040 --> 00:16:06,240
use this information to change the

443
00:16:06,240 --> 00:16:08,639
properties before that i could i would

444
00:16:08,639 --> 00:16:10,560
show you the property

445
00:16:10,560 --> 00:16:13,040
properties of the csw user

446
00:16:13,040 --> 00:16:14,959
so in this case we are just going to

447
00:16:14,959 --> 00:16:16,880
modify the display name for the poc

448
00:16:16,880 --> 00:16:19,920
purpose with this we could also

449
00:16:19,920 --> 00:16:21,360
reset the password of the account and

450
00:16:21,360 --> 00:16:23,360
take out that account which will

451
00:16:23,360 --> 00:16:25,920
land us as global admin so here you

452
00:16:25,920 --> 00:16:30,800
could see there is a display name as csw

453
00:16:34,240 --> 00:16:36,480
now using this command and the immutable

454
00:16:36,480 --> 00:16:37,759
id which

455
00:16:37,759 --> 00:16:40,079
that should be specified to the source

456
00:16:40,079 --> 00:16:42,320
anchor and the display name has been

457
00:16:42,320 --> 00:16:45,040
changed i have been hacked

458
00:16:45,040 --> 00:16:46,000
so

459
00:16:46,000 --> 00:16:47,440
upon executing this command you could

460
00:16:47,440 --> 00:16:49,600
see the result code has been

461
00:16:49,600 --> 00:16:51,839
printed as success

462
00:16:51,839 --> 00:16:54,639
so we just need to allow some time for

463
00:16:54,639 --> 00:16:56,320
the process to get completed in the

464
00:16:56,320 --> 00:16:57,920
backend

465
00:16:57,920 --> 00:17:00,160
to actually change

466
00:17:00,160 --> 00:17:02,959
the display name

467
00:17:03,279 --> 00:17:05,599
just wait for it

468
00:17:05,599 --> 00:17:07,039
so

469
00:17:07,039 --> 00:17:08,880
you could say the display name has been

470
00:17:08,880 --> 00:17:10,480
changed i have been act so with this

471
00:17:10,480 --> 00:17:12,400
technique you could even reset the

472
00:17:12,400 --> 00:17:14,480
password of that global administrator

473
00:17:14,480 --> 00:17:17,039
and uh you could just log in

474
00:17:17,039 --> 00:17:19,359
as global admin and takeover

475
00:17:19,359 --> 00:17:21,039
so this is how password synchronization

476
00:17:21,039 --> 00:17:21,919
works

477
00:17:21,919 --> 00:17:23,679
or to you

478
00:17:23,679 --> 00:17:26,240
so the next authentication method that

479
00:17:26,240 --> 00:17:28,079
we're gonna discuss and abuse is

480
00:17:28,079 --> 00:17:29,600
seamless sso

481
00:17:29,600 --> 00:17:33,120
seamless sso or single sign-on

482
00:17:33,120 --> 00:17:36,000
basically lets the users to sign in

483
00:17:36,000 --> 00:17:38,320
automatically to the azure services

484
00:17:38,320 --> 00:17:39,679
when they are connected to their

485
00:17:39,679 --> 00:17:41,600
corporate devices

486
00:17:41,600 --> 00:17:42,480
on

487
00:17:42,480 --> 00:17:43,840
which is present in the copyright

488
00:17:43,840 --> 00:17:45,200
network

489
00:17:45,200 --> 00:17:47,679
they it can be a vpn or a local network

490
00:17:47,679 --> 00:17:50,559
too so here the users are not required

491
00:17:50,559 --> 00:17:53,200
to enter their passwords in some cases

492
00:17:53,200 --> 00:17:56,640
the username are also not needed

493
00:17:56,640 --> 00:17:58,640
in that case the username would be

494
00:17:58,640 --> 00:17:59,679
picked

495
00:17:59,679 --> 00:18:01,520
from the mission at which they are

496
00:18:01,520 --> 00:18:02,880
signed in

497
00:18:02,880 --> 00:18:05,280
which is the corporate device

498
00:18:05,280 --> 00:18:08,880
so the seamless sso can only be combined

499
00:18:08,880 --> 00:18:11,200
with password hash synchronization or

500
00:18:11,200 --> 00:18:14,559
pass through authentication it cannot be

501
00:18:14,559 --> 00:18:15,919
combined with

502
00:18:15,919 --> 00:18:18,320
active directory federation services

503
00:18:18,320 --> 00:18:20,320
in this authentication mechanism a

504
00:18:20,320 --> 00:18:23,600
computer account called azure read

505
00:18:23,600 --> 00:18:26,960
adsso aac is created on the on premise

506
00:18:26,960 --> 00:18:28,799
active directory

507
00:18:28,799 --> 00:18:30,000
at which

508
00:18:30,000 --> 00:18:31,440
uh

509
00:18:31,440 --> 00:18:34,799
it basically acts as the azure ad

510
00:18:34,799 --> 00:18:36,960
this account would

511
00:18:36,960 --> 00:18:38,720
be present in each of the active

512
00:18:38,720 --> 00:18:40,480
directory forest

513
00:18:40,480 --> 00:18:42,559
that is connected to azure

514
00:18:42,559 --> 00:18:44,960
so the authentication flow would be when

515
00:18:44,960 --> 00:18:47,840
a user tries to access any sort of azure

516
00:18:47,840 --> 00:18:48,880
resources

517
00:18:48,880 --> 00:18:50,640
a request for the kerberos ticket would

518
00:18:50,640 --> 00:18:51,919
be generated

519
00:18:51,919 --> 00:18:54,840
and it would be sent to the on premise

520
00:18:54,840 --> 00:18:58,000
network i in the on-premise network the

521
00:18:58,000 --> 00:19:01,200
kdc evaluates the request for

522
00:19:01,200 --> 00:19:03,679
accessing the azure and

523
00:19:03,679 --> 00:19:06,080
once the validation is completed it

524
00:19:06,080 --> 00:19:08,320
would be again forwarded to the azure

525
00:19:08,320 --> 00:19:10,720
active directory from the client mission

526
00:19:10,720 --> 00:19:13,679
where it originated

527
00:19:13,679 --> 00:19:14,400
so

528
00:19:14,400 --> 00:19:16,400
this would be the flow here

529
00:19:16,400 --> 00:19:17,440
here

530
00:19:17,440 --> 00:19:20,160
a user from contesso tries to access an

531
00:19:20,160 --> 00:19:21,760
azure resource

532
00:19:21,760 --> 00:19:24,080
that is a request for the kerberos

533
00:19:24,080 --> 00:19:27,520
ticket of the account azure adsso aac is

534
00:19:27,520 --> 00:19:28,640
made

535
00:19:28,640 --> 00:19:30,960
and this request is forwarded to the

536
00:19:30,960 --> 00:19:32,799
client mission from which it is

537
00:19:32,799 --> 00:19:35,360
redirected again to an on-premise

538
00:19:35,360 --> 00:19:36,640
network

539
00:19:36,640 --> 00:19:38,320
at which uh

540
00:19:38,320 --> 00:19:42,080
the dc validates this request and once

541
00:19:42,080 --> 00:19:44,080
the validation is completed

542
00:19:44,080 --> 00:19:46,320
the kerberos ticket that is created and

543
00:19:46,320 --> 00:19:48,480
encrypted would be sent back to azure

544
00:19:48,480 --> 00:19:52,320
via this client mission

545
00:19:52,320 --> 00:19:55,039
so let's now talk about the abuse case

546
00:19:55,039 --> 00:19:56,080
here

547
00:19:56,080 --> 00:19:58,480
for this attack you require certain

548
00:19:58,480 --> 00:20:01,120
informations like ntlm hash of the

549
00:20:01,120 --> 00:20:03,360
mission account that is created which is

550
00:20:03,360 --> 00:20:06,960
azure adsso aac you can get this

551
00:20:06,960 --> 00:20:09,760
ntlms once you have the domain

552
00:20:09,760 --> 00:20:11,679
administrator privilege and you can

553
00:20:11,679 --> 00:20:14,159
perform a dc sync attack or you can

554
00:20:14,159 --> 00:20:17,200
directly dump it from

555
00:20:17,679 --> 00:20:18,840
the domain

556
00:20:18,840 --> 00:20:21,280
controller post bits you will require

557
00:20:21,280 --> 00:20:23,600
two of the identifiers one is the

558
00:20:23,600 --> 00:20:25,919
immutable id and another one is the

559
00:20:25,919 --> 00:20:28,559
security identifier so these are the

560
00:20:28,559 --> 00:20:30,080
list of commands

561
00:20:30,080 --> 00:20:32,840
which you can roughly refer it later for

562
00:20:32,840 --> 00:20:35,440
compromising since i have a pre-recorded

563
00:20:35,440 --> 00:20:39,200
demo i would be walking you through that

564
00:20:39,679 --> 00:20:40,799
so

565
00:20:40,799 --> 00:20:41,840
yeah

566
00:20:41,840 --> 00:20:43,200
initially what we are going to do is

567
00:20:43,200 --> 00:20:46,320
that we are going to import mimikatz

568
00:20:46,320 --> 00:20:48,480
it basically uh

569
00:20:48,480 --> 00:20:52,400
allows you to dump the ntlms of any

570
00:20:52,400 --> 00:20:54,240
accounts that is present over the domain

571
00:20:54,240 --> 00:20:56,559
so here we're gonna dump the

572
00:20:56,559 --> 00:20:59,520
ntlm hash of azure ad

573
00:20:59,520 --> 00:21:03,840
uh sso aac machine account

574
00:21:22,159 --> 00:21:25,679
so you have the ntlm hash right away

575
00:21:25,679 --> 00:21:28,559
we gonna be copying it for using

576
00:21:28,559 --> 00:21:29,600
later

577
00:21:29,600 --> 00:21:31,520
so this is the ntlm hash that we're

578
00:21:31,520 --> 00:21:33,520
gonna use

579
00:21:33,520 --> 00:21:36,400
and we're gonna import aad internals

580
00:21:36,400 --> 00:21:38,159
again

581
00:21:38,159 --> 00:21:39,760
and

582
00:21:39,760 --> 00:21:42,799
to in order to get uh the list of global

583
00:21:42,799 --> 00:21:45,919
administrators and the immutable ids

584
00:21:45,919 --> 00:21:48,640
we work on assumption that you have low

585
00:21:48,640 --> 00:21:51,360
privileged access over the azure

586
00:21:51,360 --> 00:21:53,280
so

587
00:21:53,280 --> 00:21:55,919
we're gonna create a credential blob

588
00:21:55,919 --> 00:21:57,760
with a low privileged user who has

589
00:21:57,760 --> 00:22:00,640
access to azure

590
00:22:05,200 --> 00:22:07,360
so

591
00:22:10,320 --> 00:22:12,400
once after creating the credential blob

592
00:22:12,400 --> 00:22:15,200
we're gonna access the azure service uh

593
00:22:15,200 --> 00:22:18,080
with the created credential

594
00:22:18,080 --> 00:22:20,799
and we're gonna save it to cats

595
00:22:20,799 --> 00:22:21,679
so

596
00:22:21,679 --> 00:22:24,240
yep you could see that we were able to

597
00:22:24,240 --> 00:22:26,320
successfully create it and the

598
00:22:26,320 --> 00:22:28,320
credential is cached over the powershell

599
00:22:28,320 --> 00:22:30,639
session

600
00:22:33,440 --> 00:22:34,240
so

601
00:22:34,240 --> 00:22:35,919
these are the list of global admin

602
00:22:35,919 --> 00:22:38,320
status again we're gonna take the csw

603
00:22:38,320 --> 00:22:41,320
user

604
00:22:47,520 --> 00:22:48,720
we require

605
00:22:48,720 --> 00:22:52,000
the immutable id again

606
00:22:52,000 --> 00:22:54,799
but in seamless sso we also require an

607
00:22:54,799 --> 00:22:56,960
another parameter called as the security

608
00:22:56,960 --> 00:22:58,960
identifier which you can get it from the

609
00:22:58,960 --> 00:23:01,120
on-premise network so in order to

610
00:23:01,120 --> 00:23:02,400
enumerate it

611
00:23:02,400 --> 00:23:03,600
uh you can

612
00:23:03,600 --> 00:23:04,799
either use

613
00:23:04,799 --> 00:23:06,720
uh active directory module that is

614
00:23:06,720 --> 00:23:08,799
natively supported by powershell or you

615
00:23:08,799 --> 00:23:11,600
can go ahead and use your sort of tools

616
00:23:11,600 --> 00:23:13,679
here i'm using a script called as power

617
00:23:13,679 --> 00:23:16,559
view here so i directly import it into

618
00:23:16,559 --> 00:23:19,120
the memory

619
00:23:20,559 --> 00:23:22,400
and we're going to display the details

620
00:23:22,400 --> 00:23:24,559
of the user csw

621
00:23:24,559 --> 00:23:26,159
at which we are

622
00:23:26,159 --> 00:23:30,000
at which we have the security identifier

623
00:23:32,159 --> 00:23:33,280
so

624
00:23:33,280 --> 00:23:35,760
let me explain this command so this is

625
00:23:35,760 --> 00:23:37,520
the command used for forging the

626
00:23:37,520 --> 00:23:39,679
kerberos ticket here you want to create

627
00:23:39,679 --> 00:23:42,640
a kerberos ticket for the user who has

628
00:23:42,640 --> 00:23:45,919
the sid specified which is the csw user

629
00:23:45,919 --> 00:23:48,960
and we're going to encrypt it

630
00:23:48,960 --> 00:23:51,039
uh using the ntlms of the mission

631
00:23:51,039 --> 00:23:53,039
account that we got earlier which is

632
00:23:53,039 --> 00:23:57,279
azure ad sso aac so this kerberos ticket

633
00:23:57,279 --> 00:23:59,120
it would have the privileges of

634
00:23:59,120 --> 00:24:01,679
accessing azure services impersonating

635
00:24:01,679 --> 00:24:03,760
the user called csw

636
00:24:03,760 --> 00:24:06,720
so let's not try to get an access token

637
00:24:06,720 --> 00:24:09,440
from azure

638
00:24:13,760 --> 00:24:14,960
so

639
00:24:14,960 --> 00:24:16,000
yeah

640
00:24:16,000 --> 00:24:17,600
you could see that we are

641
00:24:17,600 --> 00:24:19,440
trying to get an access token here and

642
00:24:19,440 --> 00:24:21,520
storing it directly in a variable so

643
00:24:21,520 --> 00:24:22,799
that we can

644
00:24:22,799 --> 00:24:24,880
perform actions with that

645
00:24:24,880 --> 00:24:26,400
and

646
00:24:26,400 --> 00:24:28,080
you could see that we don't have any

647
00:24:28,080 --> 00:24:30,799
sort of errors here so the access token

648
00:24:30,799 --> 00:24:34,720
is retrieved from azure perfectly

649
00:24:35,520 --> 00:24:37,760
and again what we're gonna do is that

650
00:24:37,760 --> 00:24:38,799
we're gonna

651
00:24:38,799 --> 00:24:42,000
modify the display name of that user to

652
00:24:42,000 --> 00:24:44,159
show that we have complete control over

653
00:24:44,159 --> 00:24:47,400
that account

654
00:24:53,440 --> 00:24:56,320
so the display name is csw

655
00:24:56,320 --> 00:25:00,480
we're gonna modify it to

656
00:25:00,480 --> 00:25:03,200
i have been at

657
00:25:06,080 --> 00:25:08,480
and you can see that it is

658
00:25:08,480 --> 00:25:10,880
done and

659
00:25:10,880 --> 00:25:12,840
it's

660
00:25:12,840 --> 00:25:16,158
modified so

661
00:25:18,000 --> 00:25:20,559
this is an interesting scenario that we

662
00:25:20,559 --> 00:25:22,799
encountered in a real world engagement

663
00:25:22,799 --> 00:25:23,760
here

664
00:25:23,760 --> 00:25:26,559
we had a global administrator privileged

665
00:25:26,559 --> 00:25:28,640
hash cracked and we were able to

666
00:25:28,640 --> 00:25:30,559
identify the plain text credential of a

667
00:25:30,559 --> 00:25:33,520
global administrator but in turn what

668
00:25:33,520 --> 00:25:34,720
happened was

669
00:25:34,720 --> 00:25:37,679
this guy had mfa enabled so we weren't

670
00:25:37,679 --> 00:25:40,320
able to directly access the azure portal

671
00:25:40,320 --> 00:25:42,720
as in global administrator so we didn't

672
00:25:42,720 --> 00:25:45,120
stop there what we thought was uh to

673
00:25:45,120 --> 00:25:47,120
find a way

674
00:25:47,120 --> 00:25:51,039
to find another way to get into azure so

675
00:25:51,039 --> 00:25:52,960
we identified that

676
00:25:52,960 --> 00:25:54,799
in this network the password has

677
00:25:54,799 --> 00:25:56,720
synchronization is configured with

678
00:25:56,720 --> 00:25:59,039
seamless sso so

679
00:25:59,039 --> 00:26:01,679
again we would be able to forge kerberos

680
00:26:01,679 --> 00:26:03,760
tickets for any sort of

681
00:26:03,760 --> 00:26:05,919
uh azure users who

682
00:26:05,919 --> 00:26:09,039
haven't had the mfa enabled

683
00:26:09,039 --> 00:26:13,039
so we created and low privileged user

684
00:26:13,039 --> 00:26:15,120
and enumerated

685
00:26:15,120 --> 00:26:18,400
the azure acls using azure account

686
00:26:18,400 --> 00:26:21,600
we identified that one of the i.t guy

687
00:26:21,600 --> 00:26:23,120
who wasn't part of the global

688
00:26:23,120 --> 00:26:24,880
administrator had

689
00:26:24,880 --> 00:26:27,520
as you reset privileges to entire list

690
00:26:27,520 --> 00:26:29,039
of users including the global

691
00:26:29,039 --> 00:26:32,480
administrators so what we thought was

692
00:26:32,480 --> 00:26:34,960
we forged the kerberos ticket

693
00:26:34,960 --> 00:26:37,840
impersonating that user and we have the

694
00:26:37,840 --> 00:26:39,600
access token too

695
00:26:39,600 --> 00:26:40,480
so

696
00:26:40,480 --> 00:26:41,919
we weren't allowed to reset the

697
00:26:41,919 --> 00:26:44,000
passwords for any of the users so what

698
00:26:44,000 --> 00:26:47,919
we thought was we can just uh send and

699
00:26:47,919 --> 00:26:51,440
send an email write to us stating the

700
00:26:51,440 --> 00:26:53,760
this is for poc and

701
00:26:53,760 --> 00:26:56,400
what so this is the command used for

702
00:26:56,400 --> 00:26:58,480
sending the email with the access token

703
00:26:58,480 --> 00:26:59,520
so

704
00:26:59,520 --> 00:27:01,600
we were able to successfully

705
00:27:01,600 --> 00:27:03,840
get to this account and

706
00:27:03,840 --> 00:27:05,440
with this you can also reset the

707
00:27:05,440 --> 00:27:06,559
privileges

708
00:27:06,559 --> 00:27:09,279
if you encounter the same scenario in

709
00:27:09,279 --> 00:27:11,520
any of your engagements

710
00:27:11,520 --> 00:27:13,760
so

711
00:27:14,159 --> 00:27:16,640
let's now talk about next authentication

712
00:27:16,640 --> 00:27:19,039
mechanism which is active directory

713
00:27:19,039 --> 00:27:20,880
federation services

714
00:27:20,880 --> 00:27:22,240
so in this

715
00:27:22,240 --> 00:27:24,080
this basically works on a trust between

716
00:27:24,080 --> 00:27:26,559
the on-premise active directory uh

717
00:27:26,559 --> 00:27:29,600
federated server and azure ready

718
00:27:29,600 --> 00:27:32,240
the authentication and authorization are

719
00:27:32,240 --> 00:27:34,720
based on a security token which is

720
00:27:34,720 --> 00:27:37,039
provided by the adfs server

721
00:27:37,039 --> 00:27:38,720
that is present on the on-premise

722
00:27:38,720 --> 00:27:39,679
network

723
00:27:39,679 --> 00:27:40,399
so

724
00:27:40,399 --> 00:27:42,640
during authentication the federated

725
00:27:42,640 --> 00:27:43,600
server

726
00:27:43,600 --> 00:27:46,960
creates a sample token once

727
00:27:46,960 --> 00:27:49,360
the valid credentials are being entered

728
00:27:49,360 --> 00:27:51,600
and it contains the

729
00:27:51,600 --> 00:27:54,320
user information such as acls user

730
00:27:54,320 --> 00:27:57,440
principal name immutable ids etc

731
00:27:57,440 --> 00:27:59,679
this saml token is signed by a valid

732
00:27:59,679 --> 00:28:02,080
token signing certificate along with its

733
00:28:02,080 --> 00:28:04,960
private key and these private key and

734
00:28:04,960 --> 00:28:06,960
the token signing certificate are only

735
00:28:06,960 --> 00:28:09,679
present at the adfs server

736
00:28:09,679 --> 00:28:10,960
which is

737
00:28:10,960 --> 00:28:13,840
on the on-premise network so

738
00:28:13,840 --> 00:28:16,480
this adfs configurations are stored in

739
00:28:16,480 --> 00:28:18,000
the database

740
00:28:18,000 --> 00:28:21,200
mostly it would be ms sql instances

741
00:28:21,200 --> 00:28:23,360
so

742
00:28:23,520 --> 00:28:25,039
this would be the flow

743
00:28:25,039 --> 00:28:27,200
here we have two of the scenarios one is

744
00:28:27,200 --> 00:28:30,480
a user who is connected local in the

745
00:28:30,480 --> 00:28:32,960
local network trying to access azure and

746
00:28:32,960 --> 00:28:34,960
a user who is present in the external

747
00:28:34,960 --> 00:28:35,919
ways

748
00:28:35,919 --> 00:28:37,039
so

749
00:28:37,039 --> 00:28:38,000
here

750
00:28:38,000 --> 00:28:40,080
this user who is connected to the local

751
00:28:40,080 --> 00:28:41,679
environment or the corporate network

752
00:28:41,679 --> 00:28:43,919
when tries to access an azure resource

753
00:28:43,919 --> 00:28:46,159
he would be redirected to the on-premise

754
00:28:46,159 --> 00:28:49,120
adfs server once the user enters the

755
00:28:49,120 --> 00:28:51,919
valid set of credential a token would be

756
00:28:51,919 --> 00:28:54,799
a saml token would be generated and they

757
00:28:54,799 --> 00:28:57,039
would be redirected to the azure

758
00:28:57,039 --> 00:28:58,880
resource they tried to access along with

759
00:28:58,880 --> 00:29:00,480
the saml token

760
00:29:00,480 --> 00:29:03,120
while considering the external scenario

761
00:29:03,120 --> 00:29:04,080
the

762
00:29:04,080 --> 00:29:06,399
external user would be redirected to the

763
00:29:06,399 --> 00:29:08,720
web application proxy which is connected

764
00:29:08,720 --> 00:29:11,120
to the adfs server once the valid of

765
00:29:11,120 --> 00:29:13,360
credential is entered again the sample

766
00:29:13,360 --> 00:29:15,120
token is generated and they would be

767
00:29:15,120 --> 00:29:18,080
redirected to the on premise

768
00:29:18,080 --> 00:29:21,120
as use resource

769
00:29:21,120 --> 00:29:24,399
so let's now see the obvious case of it

770
00:29:24,399 --> 00:29:26,480
so basically we are considering the

771
00:29:26,480 --> 00:29:28,159
scenario where we have the domain

772
00:29:28,159 --> 00:29:30,559
administrator right so

773
00:29:30,559 --> 00:29:33,279
if uh we can

774
00:29:33,279 --> 00:29:34,880
since you have the domain administrator

775
00:29:34,880 --> 00:29:36,480
privilege you would be able to access

776
00:29:36,480 --> 00:29:39,600
the adfs server with local administrator

777
00:29:39,600 --> 00:29:40,960
rights

778
00:29:40,960 --> 00:29:42,960
by which means you would be

779
00:29:42,960 --> 00:29:45,120
able to access their local ms sql

780
00:29:45,120 --> 00:29:47,039
instances and you would be able to get

781
00:29:47,039 --> 00:29:47,919
the

782
00:29:47,919 --> 00:29:49,520
signing certificate along with the

783
00:29:49,520 --> 00:29:52,000
private key

784
00:29:52,000 --> 00:29:55,039
for exploiting it we also require the

785
00:29:55,039 --> 00:29:57,600
immutable id of the global administrator

786
00:29:57,600 --> 00:30:00,080
or any sort of user whom you are trying

787
00:30:00,080 --> 00:30:01,600
to impersonate

788
00:30:01,600 --> 00:30:04,159
again we would be using aid internals

789
00:30:04,159 --> 00:30:06,399
here

790
00:30:06,480 --> 00:30:07,760
so

791
00:30:07,760 --> 00:30:09,919
this is again the list of commands uh i

792
00:30:09,919 --> 00:30:11,840
would be walking you through each one in

793
00:30:11,840 --> 00:30:14,399
the video

794
00:30:15,679 --> 00:30:17,279
so

795
00:30:17,279 --> 00:30:19,120
you could see the host name starts with

796
00:30:19,120 --> 00:30:22,080
the adfs so it

797
00:30:22,080 --> 00:30:24,640
by which means we are in the adf server

798
00:30:24,640 --> 00:30:28,080
with the administrator privilege

799
00:30:28,799 --> 00:30:30,960
we're gonna import the aad internals

800
00:30:30,960 --> 00:30:33,760
module here too

801
00:30:33,919 --> 00:30:37,720
and we're gonna

802
00:30:37,919 --> 00:30:40,320
export the certificates you can export

803
00:30:40,320 --> 00:30:43,120
the certificate using this command and

804
00:30:43,120 --> 00:30:44,320
once you have the valid set of

805
00:30:44,320 --> 00:30:46,559
certificates which is listed here you

806
00:30:46,559 --> 00:30:49,440
would be only requiring the adfs

807
00:30:49,440 --> 00:30:51,200
signing certificate which is the token

808
00:30:51,200 --> 00:30:54,000
signing certificate alone for exploiting

809
00:30:54,000 --> 00:30:55,679
this

810
00:30:55,679 --> 00:30:58,399
mechanism

811
00:31:02,840 --> 00:31:04,799
and

812
00:31:04,799 --> 00:31:08,399
we talked about and trust right so you

813
00:31:08,399 --> 00:31:10,880
would be requiring the identity

814
00:31:10,880 --> 00:31:14,159
parameter or the adfs url which is

815
00:31:14,159 --> 00:31:16,640
exposed so

816
00:31:16,640 --> 00:31:18,880
with this only you would be able to

817
00:31:18,880 --> 00:31:20,240
generate

818
00:31:20,240 --> 00:31:24,000
the xaml token so

819
00:31:30,880 --> 00:31:33,440
you could see you would be using this

820
00:31:33,440 --> 00:31:36,320
identifier value which is an url of the

821
00:31:36,320 --> 00:31:38,320
adf server

822
00:31:38,320 --> 00:31:39,679
to

823
00:31:39,679 --> 00:31:40,880
actually

824
00:31:40,880 --> 00:31:44,760
create and sample token

825
00:31:47,120 --> 00:31:49,519
so this is the command we are just only

826
00:31:49,519 --> 00:31:52,960
piping the identifier here

827
00:31:57,760 --> 00:31:58,559
so

828
00:31:58,559 --> 00:32:00,640
again in order to enumerate the list of

829
00:32:00,640 --> 00:32:03,039
users uh with the global administrator

830
00:32:03,039 --> 00:32:05,120
role and getting that

831
00:32:05,120 --> 00:32:07,279
immutable id you require a low

832
00:32:07,279 --> 00:32:09,840
privileged access to azure so for which

833
00:32:09,840 --> 00:32:14,279
we would be making a sign in

834
00:32:25,519 --> 00:32:27,279
sorry this is completely redacted

835
00:32:27,279 --> 00:32:29,440
because it was actually taken from a

836
00:32:29,440 --> 00:32:32,240
real engagement

837
00:32:35,279 --> 00:32:37,440
so

838
00:32:38,080 --> 00:32:40,080
you could see that the signing

839
00:32:40,080 --> 00:32:42,559
is successful and we have the access

840
00:32:42,559 --> 00:32:46,080
token catch to the powershell

841
00:32:47,120 --> 00:32:50,399
and we would be

842
00:32:50,559 --> 00:32:54,840
getting the list of global admins

843
00:33:14,799 --> 00:33:17,440
we require the immutable id to create

844
00:33:17,440 --> 00:33:19,600
the sample token of the global admin

845
00:33:19,600 --> 00:33:22,918
right so

846
00:33:24,960 --> 00:33:27,120
these are a whole lot of users so it's

847
00:33:27,120 --> 00:33:29,439
digging

848
00:33:29,760 --> 00:33:32,000
yep you could see

849
00:33:32,000 --> 00:33:33,679
we are right here with a global

850
00:33:33,679 --> 00:33:35,600
administrator and we are going to copy

851
00:33:35,600 --> 00:33:39,840
this immutable id place here

852
00:33:40,480 --> 00:33:42,240
so

853
00:33:42,240 --> 00:33:43,200
here

854
00:33:43,200 --> 00:33:44,960
we gonna directly

855
00:33:44,960 --> 00:33:47,919
create an access token and supply that

856
00:33:47,919 --> 00:33:50,080
access token to

857
00:33:50,080 --> 00:33:50,840
open

858
00:33:50,840 --> 00:33:55,039
and office 365 portal here so here

859
00:33:55,039 --> 00:33:57,360
you could see the immutable id that is

860
00:33:57,360 --> 00:34:00,799
we copied is pasted here and we're gonna

861
00:34:00,799 --> 00:34:03,279
pass it along with the adfs token

862
00:34:03,279 --> 00:34:05,039
signing certificate

863
00:34:05,039 --> 00:34:07,200
and we're gonna

864
00:34:07,200 --> 00:34:09,119
type the

865
00:34:09,119 --> 00:34:11,599
identifier parameter here too so this

866
00:34:11,599 --> 00:34:13,199
would basically

867
00:34:13,199 --> 00:34:15,440
impersonate that global administrator

868
00:34:15,440 --> 00:34:17,760
and open the office three six way portal

869
00:34:17,760 --> 00:34:21,720
with his privileges

870
00:34:24,639 --> 00:34:25,760
so

871
00:34:25,760 --> 00:34:27,599
you could see that we have

872
00:34:27,599 --> 00:34:29,599
been signed into a private window of

873
00:34:29,599 --> 00:34:32,599
edge

874
00:34:41,359 --> 00:34:43,199
we're gonna access the active directory

875
00:34:43,199 --> 00:34:46,199
portal

876
00:35:09,040 --> 00:35:11,920
so these are the list of users devices

877
00:35:11,920 --> 00:35:14,400
etc

878
00:35:15,119 --> 00:35:18,320
we're gonna create a user with a global

879
00:35:18,320 --> 00:35:20,720
administrator role here so

880
00:35:20,720 --> 00:35:22,480
we're gonna navigate the new user

881
00:35:22,480 --> 00:35:25,040
command and

882
00:35:27,520 --> 00:35:28,480
so

883
00:35:28,480 --> 00:35:30,560
the username is test and

884
00:35:30,560 --> 00:35:33,599
we're gonna assign a role as global

885
00:35:33,599 --> 00:35:36,599
administrator

886
00:35:51,119 --> 00:35:51,920
so

887
00:35:51,920 --> 00:35:54,000
here too you could see that we have

888
00:35:54,000 --> 00:35:56,880
three of the domains

889
00:35:56,880 --> 00:35:59,119
registered with this tenant so what

890
00:35:59,119 --> 00:36:01,920
happened in this engagement was we were

891
00:36:01,920 --> 00:36:04,079
able to compromise all of

892
00:36:04,079 --> 00:36:07,119
all the three uh domains connected to

893
00:36:07,119 --> 00:36:09,119
separate networks so this was an

894
00:36:09,119 --> 00:36:13,079
interesting engagement too

895
00:36:13,280 --> 00:36:14,720
let's now talk about the final

896
00:36:14,720 --> 00:36:16,560
authentication method which is pass

897
00:36:16,560 --> 00:36:19,040
through authentication in this the

898
00:36:19,040 --> 00:36:21,599
authentication request generated from

899
00:36:21,599 --> 00:36:23,440
the azure id would be

900
00:36:23,440 --> 00:36:25,040
sent to the

901
00:36:25,040 --> 00:36:27,359
active uh domain controller present in

902
00:36:27,359 --> 00:36:29,359
the active directory environment we are

903
00:36:29,359 --> 00:36:30,160
the

904
00:36:30,160 --> 00:36:31,680
pass through agent

905
00:36:31,680 --> 00:36:32,960
so

906
00:36:32,960 --> 00:36:36,560
in here the agent or the pta agent picks

907
00:36:36,560 --> 00:36:38,079
up the request

908
00:36:38,079 --> 00:36:42,560
and decrypts it using its private key

909
00:36:42,560 --> 00:36:43,440
and

910
00:36:43,440 --> 00:36:45,599
the validation of the credential is

911
00:36:45,599 --> 00:36:47,760
alone sent to the domain controller

912
00:36:47,760 --> 00:36:49,359
which is present in the on permission

913
00:36:49,359 --> 00:36:50,640
network

914
00:36:50,640 --> 00:36:52,960
here the credentials are val

915
00:36:52,960 --> 00:36:54,880
if the credentials are valid it is

916
00:36:54,880 --> 00:36:58,160
processed and the response is sent back

917
00:36:58,160 --> 00:37:00,800
to the azure activity directory via the

918
00:37:00,800 --> 00:37:02,800
pta agent

919
00:37:02,800 --> 00:37:05,440
the azure active directory validates uh

920
00:37:05,440 --> 00:37:08,720
this response if the user sign

921
00:37:08,720 --> 00:37:11,040
is successful and if the user is allowed

922
00:37:11,040 --> 00:37:14,720
to access that resource he would be

923
00:37:14,720 --> 00:37:17,119
allowed to do it or else he would be

924
00:37:17,119 --> 00:37:20,000
thrown an error with 403 or accessed in

925
00:37:20,000 --> 00:37:22,320
it

926
00:37:22,320 --> 00:37:25,040
so this would be the pta flow or

927
00:37:25,040 --> 00:37:27,359
pass-through authentication flow

928
00:37:27,359 --> 00:37:30,960
again a user makes and sign and request

929
00:37:30,960 --> 00:37:32,320
it would be

930
00:37:32,320 --> 00:37:34,960
directed from azure active directory to

931
00:37:34,960 --> 00:37:36,480
pass through agent

932
00:37:36,480 --> 00:37:38,000
which is present in the on-premise

933
00:37:38,000 --> 00:37:39,280
network

934
00:37:39,280 --> 00:37:42,000
at which it is decrypted and the

935
00:37:42,000 --> 00:37:44,480
credentials alone is sent to the domain

936
00:37:44,480 --> 00:37:46,480
controller for the verification

937
00:37:46,480 --> 00:37:48,640
once it is verified the response is sent

938
00:37:48,640 --> 00:37:51,359
back to azure

939
00:37:51,359 --> 00:37:53,680
here

940
00:37:55,200 --> 00:37:57,599
so let's now talk about the abuse case

941
00:37:57,599 --> 00:37:58,960
here

942
00:37:58,960 --> 00:38:01,920
here the process responsible for

943
00:38:01,920 --> 00:38:04,640
transfer of request from

944
00:38:04,640 --> 00:38:07,200
azure active directory to on-premise

945
00:38:07,200 --> 00:38:09,599
network is

946
00:38:09,599 --> 00:38:11,680
azure ad connect authentication agent

947
00:38:11,680 --> 00:38:12,720
service

948
00:38:12,720 --> 00:38:13,680
so

949
00:38:13,680 --> 00:38:17,200
if we could hook into this process and

950
00:38:17,200 --> 00:38:19,440
if we could

951
00:38:19,440 --> 00:38:21,839
monitor the request and response or

952
00:38:21,839 --> 00:38:24,800
access the memory during the runtime of

953
00:38:24,800 --> 00:38:26,960
the process we would be able to dump the

954
00:38:26,960 --> 00:38:28,400
credentials right

955
00:38:28,400 --> 00:38:30,480
so

956
00:38:30,480 --> 00:38:33,280
we can use pts pi module from aad

957
00:38:33,280 --> 00:38:34,720
internals again

958
00:38:34,720 --> 00:38:37,119
for this purpose which would be

959
00:38:37,119 --> 00:38:40,079
injecting in malicious dll which is ptsp

960
00:38:40,079 --> 00:38:42,400
dot dll into this process

961
00:38:42,400 --> 00:38:45,520
so once it is installed you would have

962
00:38:45,520 --> 00:38:48,480
the credential cached in this csv which

963
00:38:48,480 --> 00:38:50,880
is hidden

964
00:38:54,000 --> 00:38:57,880
this would be the final demo

965
00:39:01,280 --> 00:39:04,320
we have installed it successfully so

966
00:39:04,320 --> 00:39:06,400
now

967
00:39:06,400 --> 00:39:09,359
we gonna emulate a scenario where a user

968
00:39:09,359 --> 00:39:11,920
is trying to access an

969
00:39:11,920 --> 00:39:13,440
azure resource

970
00:39:13,440 --> 00:39:17,200
from external or internal

971
00:39:20,240 --> 00:39:22,079
so

972
00:39:22,079 --> 00:39:24,880
here the user csw test user enters the

973
00:39:24,880 --> 00:39:27,880
credential

974
00:39:37,839 --> 00:39:38,720
yep

975
00:39:38,720 --> 00:39:42,439
that is it so

976
00:39:45,440 --> 00:39:47,280
at uh the

977
00:39:47,280 --> 00:39:49,680
server at which the pta agent is running

978
00:39:49,680 --> 00:39:51,839
now we would be able to access

979
00:39:51,839 --> 00:39:53,599
the credentials that flows through the

980
00:39:53,599 --> 00:39:55,280
pta agent so

981
00:39:55,280 --> 00:40:00,200
for which we would be using this command

982
00:40:10,720 --> 00:40:13,359
so yeah

983
00:40:16,480 --> 00:40:18,000
and

984
00:40:18,000 --> 00:40:20,160
if you want to talk about certain things

985
00:40:20,160 --> 00:40:22,400
like how did we configure this lab we

986
00:40:22,400 --> 00:40:24,240
would be present right here you can

987
00:40:24,240 --> 00:40:25,680
discuss about it

988
00:40:25,680 --> 00:40:26,640
um

989
00:40:26,640 --> 00:40:27,900
we also uh

990
00:40:27,900 --> 00:40:29,280
[Music]

991
00:40:29,280 --> 00:40:32,000
have a tool which is in development

992
00:40:32,000 --> 00:40:33,920
these all sort of attacks that has been

993
00:40:33,920 --> 00:40:36,079
discussed here would be able to we would

994
00:40:36,079 --> 00:40:38,960
be able to do it from the external

995
00:40:38,960 --> 00:40:40,960
remotely if you are interested in

996
00:40:40,960 --> 00:40:43,119
contributing feel free to contact me i

997
00:40:43,119 --> 00:40:45,200
can add you as a collaborator too

998
00:40:45,200 --> 00:40:47,520
so thank you merci

999
00:40:47,520 --> 00:40:50,759
thank you

1000
00:40:55,120 --> 00:41:00,640
[Music]

1001
00:41:00,640 --> 00:41:04,240
for coming such a long way

1002
00:41:04,240 --> 00:41:07,118
oh that's

