1
00:00:00,060 --> 00:00:05,609
I'm a researcher at distance research

2
00:00:03,720 --> 00:00:09,360
group at the University of Leuven in

3
00:00:05,609 --> 00:00:11,940
Belgium and today I will be talking well

4
00:00:09,360 --> 00:00:14,730
mainly about cookies as a title gives

5
00:00:11,940 --> 00:00:16,820
away I'm trying to I will try to figure

6
00:00:14,730 --> 00:00:21,029
out who left open the cookie jar

7
00:00:16,820 --> 00:00:25,740
so I'm sure well every one of you knows

8
00:00:21,029 --> 00:00:27,509
knows about cookies personally I feel I

9
00:00:25,740 --> 00:00:30,150
don't really know how to feel about

10
00:00:27,510 --> 00:00:32,309
cookies so in the one hand I think

11
00:00:30,150 --> 00:00:34,530
they're great because they allow the web

12
00:00:32,308 --> 00:00:36,570
to become what it is today

13
00:00:34,530 --> 00:00:40,379
so without cookies we wouldn't have had

14
00:00:36,570 --> 00:00:44,820
we wouldn't be able to log into any web

15
00:00:40,379 --> 00:00:48,170
site but on the other hand the way that

16
00:00:44,820 --> 00:00:54,300
cookies were designed allowed them to be

17
00:00:48,170 --> 00:00:58,590
well too well give introduced a member

18
00:00:54,300 --> 00:01:01,379
of vulnerabilities for instance there's

19
00:00:58,590 --> 00:01:04,049
a C server tag against or there was the

20
00:01:01,379 --> 00:01:08,570
C server tech against opening Ammar

21
00:01:04,049 --> 00:01:13,260
which is open source medical records

22
00:01:08,570 --> 00:01:15,960
software and this C server tag allowed

23
00:01:13,260 --> 00:01:17,180
attackers to expose millions of patient

24
00:01:15,960 --> 00:01:20,429
records

25
00:01:17,180 --> 00:01:23,729
similarly in in PHP myadmin there was a

26
00:01:20,430 --> 00:01:30,470
CSF vulnerability that allowed attackers

27
00:01:23,729 --> 00:01:34,189
to delete records and then also in

28
00:01:30,470 --> 00:01:37,979
wireless routers there were C surf

29
00:01:34,189 --> 00:01:40,740
vulnerabilities and these issues are all

30
00:01:37,979 --> 00:01:44,130
very recent so they're from late 2018

31
00:01:40,740 --> 00:01:48,390
and I'm sure that since them a lot of

32
00:01:44,130 --> 00:01:53,729
new C surf or issues related to how

33
00:01:48,390 --> 00:01:56,670
cookies are implemented arose so on the

34
00:01:53,729 --> 00:01:59,880
one hand well we have the security but

35
00:01:56,670 --> 00:02:04,530
on the other hand secure cookies are

36
00:01:59,880 --> 00:02:07,140
also used for tracking users online so

37
00:02:04,530 --> 00:02:09,538
there was a study by people from clicks

38
00:02:07,140 --> 00:02:13,319
who found that's

39
00:02:09,538 --> 00:02:17,488
when they analyzed the browsing behavior

40
00:02:13,319 --> 00:02:20,879
of 200 200 thousands German users they

41
00:02:17,489 --> 00:02:24,269
found that on 95% of the pages that they

42
00:02:20,879 --> 00:02:28,319
visited there was a third party requests

43
00:02:24,269 --> 00:02:31,890
to a potential tracker so I think well

44
00:02:28,319 --> 00:02:35,250
we can agree that tracking is very

45
00:02:31,890 --> 00:02:39,869
perceived purchase pervasive and that

46
00:02:35,250 --> 00:02:44,010
it's happening everywhere so there are

47
00:02:39,870 --> 00:02:48,629
these well not so nice things about

48
00:02:44,010 --> 00:02:51,840
cookies and users try to defend against

49
00:02:48,629 --> 00:02:56,760
these or browsers try to defend against

50
00:02:51,840 --> 00:03:00,090
these so on the one hand we have the

51
00:02:56,760 --> 00:03:02,940
built-in browser options for instance in

52
00:03:00,090 --> 00:03:07,700
most browsers it's possible to block all

53
00:03:02,940 --> 00:03:11,340
third-party cookies there is a new

54
00:03:07,700 --> 00:03:14,790
standard being developed or it's already

55
00:03:11,340 --> 00:03:18,629
developed and implemented called same

56
00:03:14,790 --> 00:03:22,260
site cookies which is I think available

57
00:03:18,629 --> 00:03:24,179
now in most common browsers I will come

58
00:03:22,260 --> 00:03:28,290
back to this one later and explain how

59
00:03:24,180 --> 00:03:32,760
it works then there are some other more

60
00:03:28,290 --> 00:03:34,650
advanced or more specific approaches for

61
00:03:32,760 --> 00:03:38,000
instance Firefox has built-in tracking

62
00:03:34,650 --> 00:03:43,590
protection opera has an ad blocker

63
00:03:38,000 --> 00:03:47,730
Safari has this ITP intervention

64
00:03:43,590 --> 00:03:49,940
tracking protect prevention and next to

65
00:03:47,730 --> 00:03:53,250
all these building browser options

66
00:03:49,940 --> 00:03:57,690
there's also a bunch of browser

67
00:03:53,250 --> 00:04:00,389
extensions and we in our study mainly

68
00:03:57,690 --> 00:04:05,790
focused on ad blockers and privacy

69
00:04:00,389 --> 00:04:09,449
extensions so all these things are there

70
00:04:05,790 --> 00:04:11,870
and they work relatively well so the

71
00:04:09,449 --> 00:04:17,359
concept behind it

72
00:04:11,870 --> 00:04:21,478
it's relatively good however there's one

73
00:04:17,358 --> 00:04:23,270
main pitfall and that is that all these

74
00:04:21,478 --> 00:04:26,050
policies can only work

75
00:04:23,270 --> 00:04:30,609
there correctly enforced by the browser

76
00:04:26,050 --> 00:04:35,259
so we put this to the test and we

77
00:04:30,610 --> 00:04:38,569
evaluated several different browsers and

78
00:04:35,259 --> 00:04:44,240
many different ad blocking and privacy

79
00:04:38,569 --> 00:04:47,389
extensions and well I will give a small

80
00:04:44,240 --> 00:04:51,590
preview of what is yet to come so we

81
00:04:47,389 --> 00:04:54,919
found vulnerabilities or issues in most

82
00:04:51,590 --> 00:04:59,719
of the browsers and we could bypass all

83
00:04:54,919 --> 00:05:01,818
of these browser extensions so in this

84
00:04:59,720 --> 00:05:04,720
talk I will start with a brief

85
00:05:01,819 --> 00:05:08,539
background and motivate why we did

86
00:05:04,720 --> 00:05:12,289
research then I will be talking about

87
00:05:08,539 --> 00:05:15,259
the framework that we built to evaluate

88
00:05:12,289 --> 00:05:18,800
the correctness of these cookie policies

89
00:05:15,259 --> 00:05:21,800
I'll describe the results and then in

90
00:05:18,800 --> 00:05:26,060
the law later part of this presentation

91
00:05:21,800 --> 00:05:28,490
I will be talking about how we are

92
00:05:26,060 --> 00:05:32,930
extending this framework to also test

93
00:05:28,490 --> 00:05:35,690
other browser policies both for security

94
00:05:32,930 --> 00:05:41,180
and for privacy and finally I will give

95
00:05:35,690 --> 00:05:44,479
a brief conclusion so well I know that

96
00:05:41,180 --> 00:05:46,279
this is always but I'll just briefly go

97
00:05:44,479 --> 00:05:49,758
over some web fundamentals so that

98
00:05:46,279 --> 00:05:52,729
everyone is on the same page so here we

99
00:05:49,759 --> 00:05:55,719
have a web page from domain a which

100
00:05:52,729 --> 00:05:59,389
includes a resource from domain b.com

101
00:05:55,719 --> 00:06:03,919
so what happens in the browser is the

102
00:05:59,389 --> 00:06:06,919
user visits domain a.com and it requests

103
00:06:03,919 --> 00:06:10,340
this HTML file which will then be

104
00:06:06,919 --> 00:06:12,919
rendered and the browser will see that

105
00:06:10,340 --> 00:06:18,380
there is a reference to this image tag

106
00:06:12,919 --> 00:06:23,109
and it will then fetch this image so

107
00:06:18,380 --> 00:06:28,610
that's all very basic so now when we

108
00:06:23,110 --> 00:06:31,180
have HTTP cookies so some important

109
00:06:28,610 --> 00:06:34,669
properties about them are that they are

110
00:06:31,180 --> 00:06:36,280
implicitly included usually they're used

111
00:06:34,669 --> 00:06:39,039
for authentication or

112
00:06:36,280 --> 00:06:40,650
identification and they're also

113
00:06:39,040 --> 00:06:43,750
subjected to the same origin policy

114
00:06:40,650 --> 00:06:46,179
which means that cookies of domain a can

115
00:06:43,750 --> 00:06:49,840
only be accessed and read and set by

116
00:06:46,180 --> 00:06:53,460
domain a and the same for domain B so

117
00:06:49,840 --> 00:06:57,130
when we go back to our original example

118
00:06:53,460 --> 00:06:59,680
our browser will send along the cookies

119
00:06:57,130 --> 00:07:02,380
for domain a in this first request and

120
00:06:59,680 --> 00:07:08,260
the second one will have the cookies of

121
00:07:02,380 --> 00:07:13,030
domain B and because this request is to

122
00:07:08,260 --> 00:07:16,750
a third party so from domain a to domain

123
00:07:13,030 --> 00:07:24,460
B we call this cookie be a third party

124
00:07:16,750 --> 00:07:26,320
cookie so how can things go wrong so one

125
00:07:24,460 --> 00:07:29,650
of the examples is cross-site request

126
00:07:26,320 --> 00:07:33,270
forgery so it allows an attacker to

127
00:07:29,650 --> 00:07:37,090
perform authenticated actions with a

128
00:07:33,270 --> 00:07:40,150
another identification of the victim so

129
00:07:37,090 --> 00:07:43,390
in this example there's a victim going

130
00:07:40,150 --> 00:07:45,460
to cute kitten suit come unfortunately

131
00:07:43,390 --> 00:07:51,250
if you go to cute kitten SATCOM it might

132
00:07:45,460 --> 00:07:55,030
not always be a well a good actor so it

133
00:07:51,250 --> 00:07:57,910
might be like a malicious actor trying

134
00:07:55,030 --> 00:08:01,960
to for instance steal some money from

135
00:07:57,910 --> 00:08:04,000
the bank and in this specific attack it

136
00:08:01,960 --> 00:08:07,180
will try to do this by including a

137
00:08:04,000 --> 00:08:10,600
resource through them to an image that

138
00:08:07,180 --> 00:08:15,180
will trigger some action in the name of

139
00:08:10,600 --> 00:08:17,710
the victim and this works because

140
00:08:15,180 --> 00:08:25,390
cookies are implicitly included in

141
00:08:17,710 --> 00:08:29,799
third-party requests and well although

142
00:08:25,390 --> 00:08:33,848
this issue looks fairly simple there

143
00:08:29,800 --> 00:08:37,080
have been many issues detected at very

144
00:08:33,849 --> 00:08:43,200
big companies like YouTube Netflix

145
00:08:37,080 --> 00:08:48,220
several banking websites and so on so

146
00:08:43,200 --> 00:08:49,900
one way to mitigate this problem is to

147
00:08:48,220 --> 00:08:52,570
have like Tok

148
00:08:49,900 --> 00:08:58,240
in a forum or make certain things are

149
00:08:52,570 --> 00:09:01,210
predictable but it's very very difficult

150
00:08:58,240 --> 00:09:05,740
to do so across all the assets of a

151
00:09:01,210 --> 00:09:08,980
company so that's why we have a thing

152
00:09:05,740 --> 00:09:12,160
called same side cookies so it's a basic

153
00:09:08,980 --> 00:09:15,940
cookie it just has an additional

154
00:09:12,160 --> 00:09:18,550
attribute called same side which is

155
00:09:15,940 --> 00:09:21,070
instructed by the server so the server

156
00:09:18,550 --> 00:09:23,979
says this additional cookie attribute

157
00:09:21,070 --> 00:09:27,430
and it needs to be enforced by the

158
00:09:23,980 --> 00:09:28,930
client so we there's two options for the

159
00:09:27,430 --> 00:09:33,010
same set cookie so on the one hand

160
00:09:28,930 --> 00:09:35,529
there's strict which makes that cookies

161
00:09:33,010 --> 00:09:40,810
will never be included in any cross-site

162
00:09:35,529 --> 00:09:43,120
requests so only first party accesses

163
00:09:40,810 --> 00:09:47,219
will allow this cookie to be sent along

164
00:09:43,120 --> 00:09:50,440
and then there's the same set Lex cookie

165
00:09:47,220 --> 00:09:53,310
which is the same as same site strict

166
00:09:50,440 --> 00:10:01,150
but has a few exceptions such as a

167
00:09:53,310 --> 00:10:04,089
top-level cats or pre-render and well

168
00:10:01,150 --> 00:10:06,670
same side cookies have been a lot well

169
00:10:04,089 --> 00:10:11,260
have existed for some time or at least

170
00:10:06,670 --> 00:10:15,729
the specification of it but I believe

171
00:10:11,260 --> 00:10:19,209
that once Google Chrome and Firefox and

172
00:10:15,730 --> 00:10:23,800
others will make this the default on the

173
00:10:19,209 --> 00:10:26,500
web I hope that well it will change

174
00:10:23,800 --> 00:10:28,839
security for the better so chrome will

175
00:10:26,500 --> 00:10:35,790
start doing this form starting from

176
00:10:28,839 --> 00:10:39,820
version some 76 so if we go back to our

177
00:10:35,790 --> 00:10:45,279
original example of the victim browsing

178
00:10:39,820 --> 00:10:47,950
- cute kittens so if we assume that the

179
00:10:45,279 --> 00:10:50,560
victim firsts does some operations with

180
00:10:47,950 --> 00:10:53,050
a bank and this Bank sets two types of

181
00:10:50,560 --> 00:10:58,089
cookies so a regular cookie and the same

182
00:10:53,050 --> 00:11:00,729
sized cookie then when the cute kittens

183
00:10:58,089 --> 00:11:02,350
dot-com tries to perform the attack the

184
00:11:00,730 --> 00:11:05,110
browser will only

185
00:11:02,350 --> 00:11:07,570
include the cookie that is not same site

186
00:11:05,110 --> 00:11:11,100
so the regular cookie and the same site

187
00:11:07,570 --> 00:11:14,740
cookie if it's used for authentication

188
00:11:11,100 --> 00:11:17,440
with the bank then the bank will not be

189
00:11:14,740 --> 00:11:22,200
able to authenticate this victim and so

190
00:11:17,440 --> 00:11:30,940
the funds will not be transferred to the

191
00:11:22,200 --> 00:11:35,080
malicious party so as I said before we

192
00:11:30,940 --> 00:11:37,720
did this evaluation of these third-party

193
00:11:35,080 --> 00:11:40,270
cookie policies but why should we do

194
00:11:37,720 --> 00:11:42,460
this why can't we just trust the

195
00:11:40,270 --> 00:11:46,180
browsers that they are doing what we

196
00:11:42,460 --> 00:11:51,060
expect them to do well we know that

197
00:11:46,180 --> 00:11:53,800
browsers exhibit inconsistent behavior

198
00:11:51,060 --> 00:12:00,959
so sometimes they deviate from the

199
00:11:53,800 --> 00:12:04,030
standard for certain things and also

200
00:12:00,960 --> 00:12:05,710
browsers are very complex and there

201
00:12:04,030 --> 00:12:09,490
might be certain side effects of

202
00:12:05,710 --> 00:12:14,800
specific features that may cause

203
00:12:09,490 --> 00:12:17,730
unexpected things to happen and on the

204
00:12:14,800 --> 00:12:20,859
other hand for the browser extensions

205
00:12:17,730 --> 00:12:23,800
they've been known to have been bypassed

206
00:12:20,860 --> 00:12:28,000
in the past so for instance websites

207
00:12:23,800 --> 00:12:33,900
like pornhub exploits its WebSocket

208
00:12:28,000 --> 00:12:37,480
mechanism to circumvent ad blockers so

209
00:12:33,900 --> 00:12:41,439
for these reasons and a couple of others

210
00:12:37,480 --> 00:12:43,330
more we need there's a need for a

211
00:12:41,440 --> 00:12:45,880
comprehensive evaluation of the

212
00:12:43,330 --> 00:12:50,710
effectiveness of these cookie policies

213
00:12:45,880 --> 00:12:55,540
and for this with that we created a

214
00:12:50,710 --> 00:13:00,030
testing framework which had a certain

215
00:12:55,540 --> 00:13:03,670
amount of requirements so first we

216
00:13:00,030 --> 00:13:06,819
wanted to make sure that this framework

217
00:13:03,670 --> 00:13:11,530
would be able to test the browser in a

218
00:13:06,820 --> 00:13:14,230
blackbox perspective because for us the

219
00:13:11,530 --> 00:13:15,470
source code of browsers is not always

220
00:13:14,230 --> 00:13:17,120
available

221
00:13:15,470 --> 00:13:20,060
and even if it would be available

222
00:13:17,120 --> 00:13:25,190
there's millions of lines of codes for

223
00:13:20,060 --> 00:13:30,380
each browser that I or a daunting anyone

224
00:13:25,190 --> 00:13:33,140
which one to go to manually and on the

225
00:13:30,380 --> 00:13:35,870
other hand we also wanted to evaluate

226
00:13:33,140 --> 00:13:39,890
the more implicit cookie policies

227
00:13:35,870 --> 00:13:45,910
imposed by the browser extensions and so

228
00:13:39,890 --> 00:13:48,560
our framework had to support them and so

229
00:13:45,910 --> 00:13:50,660
we came up with something like the

230
00:13:48,560 --> 00:13:53,420
following so on the one hand we had a

231
00:13:50,660 --> 00:13:57,319
browser instance which is a browser

232
00:13:53,420 --> 00:14:00,530
configured in a specific way that had a

233
00:13:57,320 --> 00:14:04,040
certain amount of extensions or might

234
00:14:00,530 --> 00:14:09,829
not have been have had an extension and

235
00:14:04,040 --> 00:14:11,810
this we point at our framework and out

236
00:14:09,830 --> 00:14:14,270
of the framework we should be able to

237
00:14:11,810 --> 00:14:20,030
determine whether there were any

238
00:14:14,270 --> 00:14:24,860
bypasses or any issues so the global

239
00:14:20,030 --> 00:14:29,839
overview looks a bit like this so on the

240
00:14:24,860 --> 00:14:31,820
top left side we have our browser

241
00:14:29,840 --> 00:14:34,940
control which instructs the browser

242
00:14:31,820 --> 00:14:39,320
instance on the right so for this we

243
00:14:34,940 --> 00:14:41,330
used webdriver and for browsers that did

244
00:14:39,320 --> 00:14:46,010
not support this we use the command line

245
00:14:41,330 --> 00:14:49,730
interface this browser was ported to a

246
00:14:46,010 --> 00:14:52,130
number of different test cases so we on

247
00:14:49,730 --> 00:14:55,000
the bottom you can see that we have a

248
00:14:52,130 --> 00:14:58,060
test generator which try to trigger

249
00:14:55,000 --> 00:15:01,870
requests in all kinds of different ways

250
00:14:58,060 --> 00:15:04,219
and these were served to the browser and

251
00:15:01,870 --> 00:15:09,970
all traffic of the browser was

252
00:15:04,220 --> 00:15:12,470
intercepted using a proxy and by

253
00:15:09,970 --> 00:15:14,330
analyzing the traffic that passed

254
00:15:12,470 --> 00:15:17,960
through this proxy we managed to

255
00:15:14,330 --> 00:15:19,580
evaluate whether things that went

256
00:15:17,960 --> 00:15:22,160
through were the things that we expected

257
00:15:19,580 --> 00:15:25,820
to go through and if there was something

258
00:15:22,160 --> 00:15:28,209
unexpected we considered it a bypass or

259
00:15:25,820 --> 00:15:28,210
an issue

260
00:15:28,920 --> 00:15:33,699
so one of the important things of our

261
00:15:31,540 --> 00:15:38,319
framework is to be able to generate

262
00:15:33,700 --> 00:15:40,620
different test cases so we wanted to

263
00:15:38,320 --> 00:15:44,940
evaluate all the different mechanisms

264
00:15:40,620 --> 00:15:48,580
that can be used to initiate a request

265
00:15:44,940 --> 00:15:52,000
and these can be from many different

266
00:15:48,580 --> 00:15:55,890
categories so we evaluates it evaluated

267
00:15:52,000 --> 00:15:59,170
seven different categories from

268
00:15:55,890 --> 00:16:01,510
application cache which is still well

269
00:15:59,170 --> 00:16:04,660
it's deprecated but it's still supported

270
00:16:01,510 --> 00:16:09,569
by most browsers and the different types

271
00:16:04,660 --> 00:16:15,760
of HTML tags like script image link with

272
00:16:09,570 --> 00:16:19,030
also more exotic ones also different

273
00:16:15,760 --> 00:16:21,189
headers may be causing the browser to

274
00:16:19,030 --> 00:16:26,680
send an additional request so there's a

275
00:16:21,190 --> 00:16:29,050
link header or if there's a violation of

276
00:16:26,680 --> 00:16:32,890
the content security policy it might

277
00:16:29,050 --> 00:16:35,400
report something to an endpoint and this

278
00:16:32,890 --> 00:16:38,010
will also trigger an additional request

279
00:16:35,400 --> 00:16:42,250
then there are also different types of

280
00:16:38,010 --> 00:16:46,360
redirects like using the location header

281
00:16:42,250 --> 00:16:50,800
or using a meta tag or setting the

282
00:16:46,360 --> 00:16:53,110
window dot location property then in

283
00:16:50,800 --> 00:16:55,839
JavaScript there's also many different

284
00:16:53,110 --> 00:17:01,000
ways to send the requests for instance

285
00:16:55,840 --> 00:17:04,560
using the fetch or xhr or more less

286
00:17:01,000 --> 00:17:09,480
lesser-known things like event source

287
00:17:04,560 --> 00:17:13,569
and then maybe a bit surprising one was

288
00:17:09,480 --> 00:17:16,240
JavaScript from PDF files so this also

289
00:17:13,569 --> 00:17:19,659
can be used to send both gets and post

290
00:17:16,240 --> 00:17:23,740
requests and then finally using the

291
00:17:19,660 --> 00:17:26,520
serviceworker api it can also be used to

292
00:17:23,740 --> 00:17:26,520
send requests

293
00:17:26,910 --> 00:17:35,850
so once we had all these test cases we

294
00:17:32,570 --> 00:17:38,580
took a bunch of browsers and many

295
00:17:35,850 --> 00:17:43,290
different extensions so I think more

296
00:17:38,580 --> 00:17:48,169
than 30 extensions and seven or eight

297
00:17:43,290 --> 00:17:52,980
different browsers and we then evaluated

298
00:17:48,170 --> 00:17:57,390
whether the explicit and implicit cookie

299
00:17:52,980 --> 00:18:00,500
policies were well correctly and forced

300
00:17:57,390 --> 00:18:06,710
by these browsers and browser extensions

301
00:18:00,500 --> 00:18:11,630
so moving on to the results well

302
00:18:06,710 --> 00:18:16,230
surprisingly we found quite many issues

303
00:18:11,630 --> 00:18:19,470
so for instance the option to block

304
00:18:16,230 --> 00:18:23,460
third-party cookies could be bypassed

305
00:18:19,470 --> 00:18:30,650
entirely in chrome and opera by using

306
00:18:23,460 --> 00:18:35,040
the mechanism to send requests in PDFs

307
00:18:30,650 --> 00:18:39,540
then in Safari version 10 and H version

308
00:18:35,040 --> 00:18:43,860
40 we found that actually the option was

309
00:18:39,540 --> 00:18:47,820
there but it didn't have any effect so

310
00:18:43,860 --> 00:18:54,629
it might give users like a fake feeling

311
00:18:47,820 --> 00:18:56,510
of being secure and also the the

312
00:18:54,630 --> 00:19:00,800
features that were built into browsers

313
00:18:56,510 --> 00:19:02,700
also didn't work as well as they should

314
00:19:00,800 --> 00:19:06,180
so on

315
00:19:02,700 --> 00:19:09,650
there's well both the Phi the Oprah ad

316
00:19:06,180 --> 00:19:12,540
blocker and Firefox tracking protection

317
00:19:09,650 --> 00:19:15,870
had several bypasses in different

318
00:19:12,540 --> 00:19:19,080
categories so for instance for the

319
00:19:15,870 --> 00:19:24,000
Firefox tracking protection by adding

320
00:19:19,080 --> 00:19:27,510
this header so it's a response header it

321
00:19:24,000 --> 00:19:30,300
would send it with trigger requests to

322
00:19:27,510 --> 00:19:34,640
tracker calm and it could not be blocked

323
00:19:30,300 --> 00:19:34,639
by the built-in tracking protection

324
00:19:35,029 --> 00:19:40,529
but the results were even more

325
00:19:37,320 --> 00:19:42,750
surprising for the browser extensions so

326
00:19:40,529 --> 00:19:45,960
we found that all of the extensions that

327
00:19:42,750 --> 00:19:49,760
we tested so more than 30 from different

328
00:19:45,960 --> 00:19:52,110
browsers could actually be bypassed and

329
00:19:49,760 --> 00:19:57,740
there were three main reasons why this

330
00:19:52,110 --> 00:20:02,668
happened so on the one hand there were

331
00:19:57,740 --> 00:20:05,520
design flaws to the ecosystem of these

332
00:20:02,669 --> 00:20:09,659
ad blocking and privacy extensions so

333
00:20:05,520 --> 00:20:12,899
for instance in Chrome PDFs are rendered

334
00:20:09,659 --> 00:20:15,510
as part of an extension however it's

335
00:20:12,899 --> 00:20:17,158
impossible for one extension to

336
00:20:15,510 --> 00:20:20,220
intercept requests from another

337
00:20:17,159 --> 00:20:23,220
extension so this means that all

338
00:20:20,220 --> 00:20:28,440
requests triggered from a PDF in Chrome

339
00:20:23,220 --> 00:20:31,320
would not pass by the blocking extension

340
00:20:28,440 --> 00:20:38,159
so they could not be these requests

341
00:20:31,320 --> 00:20:41,879
could not be blocked and yeah also in

342
00:20:38,159 --> 00:20:45,029
other browsers there were certain types

343
00:20:41,880 --> 00:20:50,419
of requests for instance in Firefox the

344
00:20:45,029 --> 00:20:53,250
favicon could not be intercepted by the

345
00:20:50,419 --> 00:20:57,260
extensions which meant that all the

346
00:20:53,250 --> 00:21:00,149
requests went true and then another

347
00:20:57,260 --> 00:21:03,480
category of where things went wrong was

348
00:21:00,149 --> 00:21:07,408
that the API and the documentation

349
00:21:03,480 --> 00:21:09,929
around this API was sometimes unclear so

350
00:21:07,409 --> 00:21:13,340
for instance requests triggered by

351
00:21:09,929 --> 00:21:17,220
service workers of our application cache

352
00:21:13,340 --> 00:21:23,129
had an ax so the tap ID that was

353
00:21:17,220 --> 00:21:28,320
associated with it was set to minus 1 in

354
00:21:23,130 --> 00:21:31,230
some cases or for certain browsers so

355
00:21:28,320 --> 00:21:34,080
this made it difficult for developers to

356
00:21:31,230 --> 00:21:36,809
figure out whether they should actually

357
00:21:34,080 --> 00:21:39,120
block this request or not and some of

358
00:21:36,809 --> 00:21:42,928
the extensions did not block it which

359
00:21:39,120 --> 00:21:48,010
allowed or which would allow an attacker

360
00:21:42,929 --> 00:21:50,080
to bypass them and finally they're worse

361
00:21:48,010 --> 00:21:53,919
common mistakes made by the extension

362
00:21:50,080 --> 00:21:56,470
developers for instance they didn't

363
00:21:53,919 --> 00:22:00,460
request permission to intercept the

364
00:21:56,470 --> 00:22:03,820
WebSockets which meant that by using

365
00:22:00,460 --> 00:22:08,520
these WebSockets the extension would be

366
00:22:03,820 --> 00:22:14,470
bypassed so to get a bit more in detail

367
00:22:08,520 --> 00:22:17,110
of how the the design flow of the the

368
00:22:14,470 --> 00:22:22,750
PDFs or the JavaScript embedded in PDFs

369
00:22:17,110 --> 00:22:25,030
existed so yeah JavaScript can run in

370
00:22:22,750 --> 00:22:27,549
PDFs and it can send requests so it can

371
00:22:25,030 --> 00:22:31,210
send both get and post requests to any

372
00:22:27,549 --> 00:22:35,379
type of origin so usually what you would

373
00:22:31,210 --> 00:22:38,980
expect is that if there's this extension

374
00:22:35,380 --> 00:22:41,470
API this requests would go through it

375
00:22:38,980 --> 00:22:44,080
and then the extension API would be able

376
00:22:41,470 --> 00:22:47,250
to make a decision whether this request

377
00:22:44,080 --> 00:22:47,250
should be allowed or not

378
00:22:47,950 --> 00:22:55,330
however since in chrome these PDFs are

379
00:22:53,049 --> 00:22:59,860
rendered as part of a plugin or

380
00:22:55,330 --> 00:23:02,350
extension it doesn't actually go to this

381
00:22:59,860 --> 00:23:04,570
extension API because extensions can't

382
00:23:02,350 --> 00:23:08,469
intercept each other's requests so it

383
00:23:04,570 --> 00:23:11,379
will it will completely bypass all these

384
00:23:08,470 --> 00:23:15,760
extensions and can still be used to

385
00:23:11,380 --> 00:23:19,960
track users online and also we found

386
00:23:15,760 --> 00:23:24,940
that it which also for all the browsers

387
00:23:19,960 --> 00:23:28,540
or for Chrome specifically book by app

388
00:23:24,940 --> 00:23:36,220
as the option where third-party cookies

389
00:23:28,540 --> 00:23:39,190
were blocked then we also evaluated the

390
00:23:36,220 --> 00:23:42,400
same site cookie and also found several

391
00:23:39,190 --> 00:23:45,700
issues there so on Chrome and opera we

392
00:23:42,400 --> 00:23:49,919
found that the same site strict's cookie

393
00:23:45,700 --> 00:23:52,929
was also sent for sent for pre-render

394
00:23:49,919 --> 00:23:57,370
well this is not like a very big flaw

395
00:23:52,929 --> 00:23:58,770
but this same sized cookie should not be

396
00:23:57,370 --> 00:24:02,520
sent in any

397
00:23:58,770 --> 00:24:06,950
requests except for top-level gets and

398
00:24:02,520 --> 00:24:11,668
pre-render is like an exception for

399
00:24:06,950 --> 00:24:14,340
same-side likes cookies but in etch

400
00:24:11,669 --> 00:24:18,000
things were even worse because they're

401
00:24:14,340 --> 00:24:20,510
even for the same side legs there were

402
00:24:18,000 --> 00:24:24,690
different bypasses so by using

403
00:24:20,510 --> 00:24:27,690
WebSockets we found that cookies which

404
00:24:24,690 --> 00:24:30,990
we still send along or if you would

405
00:24:27,690 --> 00:24:34,169
embed an external resource in an embed

406
00:24:30,990 --> 00:24:36,350
or object tag then the same site likes

407
00:24:34,169 --> 00:24:38,970
cookie would still be sent along and

408
00:24:36,350 --> 00:24:41,189
yeah similarly for same size tricks

409
00:24:38,970 --> 00:24:43,890
there were also different bypasses where

410
00:24:41,190 --> 00:24:48,179
the cookie were was sent in ways where

411
00:24:43,890 --> 00:24:51,539
it shouldn't have been sent so there's a

412
00:24:48,179 --> 00:24:54,510
couple of more or quite many more issues

413
00:24:51,539 --> 00:24:57,090
that we discovered unfortunately I won't

414
00:24:54,510 --> 00:24:59,908
have time to go into detail for all of

415
00:24:57,090 --> 00:25:03,449
them so I invite you to take a look at

416
00:24:59,909 --> 00:25:09,480
our paper where we describe everything

417
00:25:03,450 --> 00:25:12,679
and all the books in more detail so now

418
00:25:09,480 --> 00:25:17,070
well we've elevated to cookie policies

419
00:25:12,679 --> 00:25:19,799
and we have this nice framework that

420
00:25:17,070 --> 00:25:22,260
allows us to do so and then we thought

421
00:25:19,799 --> 00:25:24,809
well what about all the other security

422
00:25:22,260 --> 00:25:29,250
and privacy policies that are currently

423
00:25:24,809 --> 00:25:32,279
in the browser so this is still a

424
00:25:29,250 --> 00:25:35,730
working product progress but it I think

425
00:25:32,279 --> 00:25:37,440
it's looking quite promising so we have

426
00:25:35,730 --> 00:25:41,460
to make some modifications to our

427
00:25:37,440 --> 00:25:44,700
framework but the basic concept is still

428
00:25:41,460 --> 00:25:48,450
the same so we have a bunch of different

429
00:25:44,700 --> 00:25:55,679
browsers that we point at several test

430
00:25:48,450 --> 00:25:58,770
cases and when a browser runs one of

431
00:25:55,679 --> 00:26:02,700
these test cases it will emit a certain

432
00:25:58,770 --> 00:26:06,000
number of browser or system events so it

433
00:26:02,700 --> 00:26:08,580
will make certain HP requests it will

434
00:26:06,000 --> 00:26:11,310
write things to the disk it will make

435
00:26:08,580 --> 00:26:13,379
certain sis calls and

436
00:26:11,310 --> 00:26:15,000
we want to capture all of these things

437
00:26:13,380 --> 00:26:18,060
and then store them into the database

438
00:26:15,000 --> 00:26:21,600
and we will associate all these events

439
00:26:18,060 --> 00:26:24,540
with the specific policy at the specific

440
00:26:21,600 --> 00:26:28,560
policy that was enforced in the test

441
00:26:24,540 --> 00:26:30,899
case and request methods and so on so

442
00:26:28,560 --> 00:26:34,470
all kinds of meta information associated

443
00:26:30,900 --> 00:26:40,020
with these events and then when we want

444
00:26:34,470 --> 00:26:42,960
to validate a certain security policy we

445
00:26:40,020 --> 00:26:44,580
can just create this database so if we

446
00:26:42,960 --> 00:26:47,400
want to know whether strict Transport

447
00:26:44,580 --> 00:26:51,929
Security is correctly implemented in all

448
00:26:47,400 --> 00:26:55,860
the browsers that we tested we can run

449
00:26:51,930 --> 00:26:57,870
like query where we look I'll look for

450
00:26:55,860 --> 00:27:00,600
all the test cases where the strict

451
00:26:57,870 --> 00:27:04,860
Transport Security header was set and if

452
00:27:00,600 --> 00:27:07,260
there was a still a request over HTTP

453
00:27:04,860 --> 00:27:09,419
that went through now we know that

454
00:27:07,260 --> 00:27:14,100
something went wrong and then we can

455
00:27:09,420 --> 00:27:16,680
indicate that this test case caused the

456
00:27:14,100 --> 00:27:20,250
strict Transport Security policy to be

457
00:27:16,680 --> 00:27:25,080
bypassed I should mention that what's

458
00:27:20,250 --> 00:27:27,540
shown here is like a lot simplified but

459
00:27:25,080 --> 00:27:31,679
this is like the main concept of how

460
00:27:27,540 --> 00:27:35,190
these things work similarly if we want

461
00:27:31,680 --> 00:27:37,140
to figure out whether incognito mode or

462
00:27:35,190 --> 00:27:40,020
private browsing mode is correctly

463
00:27:37,140 --> 00:27:42,960
implemented we can write a similar query

464
00:27:40,020 --> 00:27:45,360
where we look for the test cases where

465
00:27:42,960 --> 00:27:49,910
the browser was loaded in incognito mode

466
00:27:45,360 --> 00:27:54,360
and then we see if there is a certain

467
00:27:49,910 --> 00:27:57,570
change persistent on the disk which

468
00:27:54,360 --> 00:27:58,379
shouldn't happen but if we do manage to

469
00:27:57,570 --> 00:28:00,360
find it

470
00:27:58,380 --> 00:28:05,040
it indicates that there might be an

471
00:28:00,360 --> 00:28:10,350
issue there and that's even people might

472
00:28:05,040 --> 00:28:14,129
be tracked through incognito mode so our

473
00:28:10,350 --> 00:28:18,629
framework would allow to validate the

474
00:28:14,130 --> 00:28:20,820
correctness of how certain privacy or

475
00:28:18,630 --> 00:28:24,840
security policies are enforced by the

476
00:28:20,820 --> 00:28:29,580
browser it will by design support

477
00:28:24,840 --> 00:28:31,830
different browsers because we don't look

478
00:28:29,580 --> 00:28:33,510
at any type of source code we just need

479
00:28:31,830 --> 00:28:37,889
to point the browser's at the different

480
00:28:33,510 --> 00:28:39,900
test cases and not only will we be able

481
00:28:37,890 --> 00:28:41,549
to test the different browsers but we

482
00:28:39,900 --> 00:28:47,370
can test them in different types of

483
00:28:41,549 --> 00:28:50,029
configurations and also we can see if

484
00:28:47,370 --> 00:28:54,239
certain browser extensions may influence

485
00:28:50,029 --> 00:29:01,500
the validity of certain security

486
00:28:54,240 --> 00:29:04,289
features and one of the main things is

487
00:29:01,500 --> 00:29:08,309
that or the difficult things is that we

488
00:29:04,289 --> 00:29:12,330
should make the test cases as complete

489
00:29:08,309 --> 00:29:14,399
as possible such that like we cover the

490
00:29:12,330 --> 00:29:17,039
entire spectrum of what could possibly

491
00:29:14,399 --> 00:29:22,199
go wrong so therefore we will have to

492
00:29:17,039 --> 00:29:26,940
first the different ways of how requests

493
00:29:22,200 --> 00:29:29,789
can be made or how different operations

494
00:29:26,940 --> 00:29:32,429
happen in the browser but firstly

495
00:29:29,789 --> 00:29:36,929
there's the web platform tests which

496
00:29:32,429 --> 00:29:43,200
already has a large set of different use

497
00:29:36,929 --> 00:29:46,020
cases and well hopefully sometime in the

498
00:29:43,200 --> 00:29:49,830
future this framework will be could be

499
00:29:46,020 --> 00:29:52,700
used by browser vendors to test their

500
00:29:49,830 --> 00:29:54,860
browser and validate that they are

501
00:29:52,700 --> 00:29:59,909
implemented correctly and that the

502
00:29:54,860 --> 00:30:03,779
features are correctly enforced that

503
00:29:59,909 --> 00:30:06,149
brings me to the conclusion so I believe

504
00:30:03,779 --> 00:30:06,750
that we all know that browsers are very

505
00:30:06,149 --> 00:30:10,590
complex

506
00:30:06,750 --> 00:30:12,870
they consist of many different API or

507
00:30:10,590 --> 00:30:15,720
they support many different API s and

508
00:30:12,870 --> 00:30:20,510
they need millions of lines of code to

509
00:30:15,720 --> 00:30:25,080
do so therefore I think that an

510
00:30:20,510 --> 00:30:27,510
extensive evaluation is required because

511
00:30:25,080 --> 00:30:31,830
there's all these different mechanisms

512
00:30:27,510 --> 00:30:35,030
that has have unexpected influences on

513
00:30:31,830 --> 00:30:36,790
each other so we should cover the entire

514
00:30:35,030 --> 00:30:39,270
ecosystem

515
00:30:36,790 --> 00:30:42,310
so we should look at all the different

516
00:30:39,270 --> 00:30:44,860
mechanisms that can be used to send

517
00:30:42,310 --> 00:30:47,590
their requests we should see what the

518
00:30:44,860 --> 00:30:52,629
influence of browser extensions are and

519
00:30:47,590 --> 00:30:56,740
so on and our evaluation on the cookie

520
00:30:52,630 --> 00:30:58,600
policies already showed that this is a

521
00:30:56,740 --> 00:31:03,340
good approach because we discovered

522
00:30:58,600 --> 00:31:06,490
several issues so several bypasses for

523
00:31:03,340 --> 00:31:10,120
as the security policies as well as the

524
00:31:06,490 --> 00:31:14,050
privacy policies by browser extensions

525
00:31:10,120 --> 00:31:16,719
and so we are working on a framework to

526
00:31:14,050 --> 00:31:20,500
evaluate the different security and

527
00:31:16,720 --> 00:31:23,490
privacy policies in the browsers so I'd

528
00:31:20,500 --> 00:31:36,160
like to thank you for coming here and

529
00:31:23,490 --> 00:31:38,320
watching me talk and oh thank you for

530
00:31:36,160 --> 00:31:42,310
your talk and the research you have

531
00:31:38,320 --> 00:31:47,639
mentioned that you had discovered same

532
00:31:42,310 --> 00:31:53,080
set cookies with duty to boot enable it

533
00:31:47,640 --> 00:31:57,190
sends with rear-ended requests yeah it

534
00:31:53,080 --> 00:32:01,149
was for the original origin or for

535
00:31:57,190 --> 00:32:04,120
different origins I mean is it possible

536
00:32:01,150 --> 00:32:06,730
here cross-site scripting requests

537
00:32:04,120 --> 00:32:18,669
cross-site request forgery attack or not

538
00:32:06,730 --> 00:32:27,430
I can't find site so in the case of in

539
00:32:18,670 --> 00:32:33,310
chrome wait so maybe ok for the same

540
00:32:27,430 --> 00:32:36,670
origin sorry make such requests maybe

541
00:32:33,310 --> 00:32:39,100
it's not security sure I mean if we if

542
00:32:36,670 --> 00:32:42,040
we have the same origin and we use

543
00:32:39,100 --> 00:32:43,549
parental it requests maybe is not

544
00:32:42,040 --> 00:32:47,119
security issue

545
00:32:43,549 --> 00:32:54,860
who sent it this Sam site struct

546
00:32:47,119 --> 00:32:57,168
quickest what is security impact of send

547
00:32:54,860 --> 00:33:01,340
cookies for parental request with Sam

548
00:32:57,169 --> 00:33:05,269
site trick a t-butyl Ablett so here in

549
00:33:01,340 --> 00:33:10,129
edge the same size cookies could be well

550
00:33:05,269 --> 00:33:15,110
or worse and along with well the

551
00:33:10,129 --> 00:33:18,519
websocket api and embed an object so of

552
00:33:15,110 --> 00:33:25,850
these only allowed to send get requests

553
00:33:18,519 --> 00:33:31,690
which is I think for it's not such a big

554
00:33:25,850 --> 00:33:34,969
problem for cross-site request forgery

555
00:33:31,690 --> 00:33:39,830
but there are other issues such as

556
00:33:34,970 --> 00:33:45,320
cross-site leaks where this will be an

557
00:33:39,830 --> 00:33:48,139
issue actually and it was discovered in

558
00:33:45,320 --> 00:33:51,139
case of the same origin or original were

559
00:33:48,139 --> 00:33:54,859
different yeah yeah different origins of

560
00:33:51,139 --> 00:33:59,139
course okay thank you by the way did you

561
00:33:54,859 --> 00:34:02,449
contact with some browsers of voters

562
00:33:59,139 --> 00:34:04,908
yeah we reported all the issues that we

563
00:34:02,450 --> 00:34:08,409
discovered both to the browser vendors

564
00:34:04,909 --> 00:34:12,290
as well as to the extension developers

565
00:34:08,409 --> 00:34:15,409
unfortunately there's still quite some

566
00:34:12,290 --> 00:34:17,469
issues that are not fixed yet okay thank

567
00:34:15,409 --> 00:34:17,470
you

