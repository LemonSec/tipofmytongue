1
00:00:00,060 --> 00:00:05,670
hello everyone thanks a lot for coming

2
00:00:02,340 --> 00:00:07,109
to my talk let's talk about JavaScript I

3
00:00:05,670 --> 00:00:12,900
have a feeling it's an important topic

4
00:00:07,109 --> 00:00:14,400
in this conference this year so Who am I

5
00:00:12,900 --> 00:00:17,310
I'm Vladimir the jerk mmm

6
00:00:14,400 --> 00:00:19,830
I work in a ASM company application

7
00:00:17,310 --> 00:00:21,419
security management we basically do

8
00:00:19,830 --> 00:00:23,159
runtime protection for diverse

9
00:00:21,420 --> 00:00:25,500
applications but they work specially on

10
00:00:23,160 --> 00:00:27,448
node.js and I'm one of the founding

11
00:00:25,500 --> 00:00:29,759
member of the node.js security working

12
00:00:27,449 --> 00:00:33,059
group at the level of Xia nodejs

13
00:00:29,760 --> 00:00:35,430
soup andreas foundation and I am NOT gs

14
00:00:33,059 --> 00:00:38,040
collaborator meaning that this talk will

15
00:00:35,430 --> 00:00:41,100
be mostly about what's the current state

16
00:00:38,040 --> 00:00:43,110
of security on OGS from the point of

17
00:00:41,100 --> 00:00:46,680
view of the node.js Foundation and the

18
00:00:43,110 --> 00:00:48,870
security working group obviously it will

19
00:00:46,680 --> 00:00:50,460
be my take on that because some of the

20
00:00:48,870 --> 00:00:52,500
members of the working group are in the

21
00:00:50,460 --> 00:00:58,739
room I won't point finger on them right

22
00:00:52,500 --> 00:01:00,660
now so just to make sure everyone is at

23
00:00:58,739 --> 00:01:03,419
the same page on node.js I will do a

24
00:01:00,660 --> 00:01:04,890
short intro on that and I promise the

25
00:01:03,420 --> 00:01:06,720
rest of the talk will be much more

26
00:01:04,890 --> 00:01:10,439
interesting than this first boring but

27
00:01:06,720 --> 00:01:12,030
so no js' it's a JavaScript runtime

28
00:01:10,439 --> 00:01:14,580
basically it enables you to run

29
00:01:12,030 --> 00:01:17,430
JavaScript server sites not in a browser

30
00:01:14,580 --> 00:01:20,280
or directly on and on a server-side or

31
00:01:17,430 --> 00:01:21,630
desktop it's mono threaded it's single

32
00:01:20,280 --> 00:01:23,100
threaded and that's actually pretty

33
00:01:21,630 --> 00:01:26,189
important for the rest of the talk

34
00:01:23,100 --> 00:01:28,439
meaning that when you run some piece of

35
00:01:26,189 --> 00:01:30,750
JavaScript code nothing else is running

36
00:01:28,439 --> 00:01:33,600
there is no other piece of JavaScript

37
00:01:30,750 --> 00:01:37,650
code running concurrently your power to

38
00:01:33,600 --> 00:01:39,720
your code execution because we still

39
00:01:37,650 --> 00:01:41,549
want nodejs to be performant and being

40
00:01:39,720 --> 00:01:43,979
able to do the other thing at the same

41
00:01:41,549 --> 00:01:47,640
time no js' is fully a synchronous

42
00:01:43,979 --> 00:01:50,460
meaning that access to database or

43
00:01:47,640 --> 00:01:52,649
network access or anything actually that

44
00:01:50,460 --> 00:01:55,380
is not directly written in JavaScript

45
00:01:52,649 --> 00:01:57,390
happens somewhere else as synchronously

46
00:01:55,380 --> 00:01:59,670
meaning I want to do a query in my

47
00:01:57,390 --> 00:02:02,219
database I don't have to stop my thread

48
00:01:59,670 --> 00:02:04,469
until the result of the database queries

49
00:02:02,219 --> 00:02:06,329
available I can just you know do

50
00:02:04,469 --> 00:02:08,098
something else and come back to that

51
00:02:06,329 --> 00:02:11,068
query later and that's basically the

52
00:02:08,098 --> 00:02:12,890
main paradigm of magis everything is

53
00:02:11,068 --> 00:02:15,200
asynchronous accessing the files

54
00:02:12,890 --> 00:02:17,208
is asynchronous you don't need to block

55
00:02:15,200 --> 00:02:18,950
what you are doing when you want the

56
00:02:17,209 --> 00:02:22,580
content of a fight you can do something

57
00:02:18,950 --> 00:02:25,369
else at the same time also worth

58
00:02:22,580 --> 00:02:28,880
noticing not Jes has the widest and

59
00:02:25,370 --> 00:02:33,050
biggest ecosystem in the world meaning

60
00:02:28,880 --> 00:02:35,690
that NPM as a company hosting the Modi's

61
00:02:33,050 --> 00:02:38,060
dependencies is basically the biggest

62
00:02:35,690 --> 00:02:41,120
repository in the world and you can take

63
00:02:38,060 --> 00:02:43,580
this this picture every other month

64
00:02:41,120 --> 00:02:46,040
every other year it will always have the

65
00:02:43,580 --> 00:02:48,290
same shape no js' ecosystem and

66
00:02:46,040 --> 00:02:53,299
JavaScript ecosystem in general because

67
00:02:48,290 --> 00:02:55,910
that's also JavaScript is much more much

68
00:02:53,300 --> 00:02:58,340
more popular than any other ecosystem

69
00:02:55,910 --> 00:03:00,620
combined and it's not growing slowly we

70
00:02:58,340 --> 00:03:05,480
will reach a million of packaged hosted

71
00:03:00,620 --> 00:03:07,970
on NPM this year so what is not a is

72
00:03:05,480 --> 00:03:10,100
good for obviously web servers but

73
00:03:07,970 --> 00:03:11,780
because it's JavaScript and people love

74
00:03:10,100 --> 00:03:14,600
to hack around with JavaScript

75
00:03:11,780 --> 00:03:17,390
they put JavaScript everywhere so you

76
00:03:14,600 --> 00:03:19,459
can use node.js for IOT for scripting

77
00:03:17,390 --> 00:03:21,768
and one of the most important issues of

78
00:03:19,459 --> 00:03:24,079
nodejs right now with web servers is

79
00:03:21,769 --> 00:03:26,000
front-end tooling meaning like if you

80
00:03:24,079 --> 00:03:28,040
want to build a front-end web site or

81
00:03:26,000 --> 00:03:29,840
even if you're using WordPress you're

82
00:03:28,040 --> 00:03:32,209
likely to have Nagy is running on your

83
00:03:29,840 --> 00:03:34,070
computer for bundling are getting

84
00:03:32,209 --> 00:03:36,500
dependencies for the front-end part of

85
00:03:34,070 --> 00:03:39,230
your application node.js is everywhere

86
00:03:36,500 --> 00:03:41,810
and it cannot be avoided with requesting

87
00:03:39,230 --> 00:03:44,869
the city of the NPM company when asked

88
00:03:41,810 --> 00:03:47,239
why your client the answer basically

89
00:03:44,870 --> 00:03:49,430
every company in the world is my clients

90
00:03:47,239 --> 00:03:53,660
every company in the world use the NPM

91
00:03:49,430 --> 00:03:58,489
ecosystem so I like to think it's a big

92
00:03:53,660 --> 00:04:00,470
deal and the question is okay no js' is

93
00:03:58,489 --> 00:04:02,180
a 10 years old technology and I like

94
00:04:00,470 --> 00:04:04,700
there is a second boring party may talk

95
00:04:02,180 --> 00:04:06,620
sorry not jeaious is a 10 years old

96
00:04:04,700 --> 00:04:09,260
technology based on a language that has

97
00:04:06,620 --> 00:04:11,930
not really been widely popular in the

98
00:04:09,260 --> 00:04:15,380
computing so in the serious computing

99
00:04:11,930 --> 00:04:17,810
science world for decades and now we

100
00:04:15,380 --> 00:04:20,750
can't carry on like that we have to take

101
00:04:17,810 --> 00:04:24,350
measures because big company began to

102
00:04:20,750 --> 00:04:27,170
prize using node.js in production and

103
00:04:24,350 --> 00:04:29,330
how can we make it safer for everyone

104
00:04:27,170 --> 00:04:32,170
it's not a Thai language to make moving

105
00:04:29,330 --> 00:04:34,460
menus in a webpage anymore

106
00:04:32,170 --> 00:04:36,830
introducing the open Jas foundation

107
00:04:34,460 --> 00:04:38,900
that's brand new so I can't tell a lot

108
00:04:36,830 --> 00:04:41,270
about that yet because I don't

109
00:04:38,900 --> 00:04:43,909
understand the function meant of this

110
00:04:41,270 --> 00:04:46,340
new foundation basically it used to be a

111
00:04:43,910 --> 00:04:48,770
no js' foundation for a few years

112
00:04:46,340 --> 00:04:50,719
that was handling no GS and the jealous

113
00:04:48,770 --> 00:04:52,549
J's Foundation and League of Europe and

114
00:04:50,720 --> 00:04:55,250
sauce project both of this foundation

115
00:04:52,550 --> 00:04:57,290
has made two months ago and the first

116
00:04:55,250 --> 00:04:59,360
summit of the open areas foundation is

117
00:04:57,290 --> 00:05:00,980
happening right now in Berlin so I have

118
00:04:59,360 --> 00:05:04,970
huge firm all of that because of that

119
00:05:00,980 --> 00:05:07,220
but I'm happy to be in Tel Aviv still so

120
00:05:04,970 --> 00:05:10,310
you want to take a look at that because

121
00:05:07,220 --> 00:05:12,470
it's a basically foundation of the Linux

122
00:05:10,310 --> 00:05:15,200
Foundation that's in charge of managing

123
00:05:12,470 --> 00:05:20,750
the JavaScript ecosystem at large and

124
00:05:15,200 --> 00:05:23,330
Nadia's in particular so in the node.js

125
00:05:20,750 --> 00:05:25,610
part there is a technical steering

126
00:05:23,330 --> 00:05:28,130
committee basically those other people

127
00:05:25,610 --> 00:05:30,760
who own the github repository of no js'

128
00:05:28,130 --> 00:05:33,710
and they do whatever they want with it

129
00:05:30,760 --> 00:05:36,349
they have chartered a security working

130
00:05:33,710 --> 00:05:38,840
group that is made of diverse was a

131
00:05:36,350 --> 00:05:42,590
member of the node.js organization that

132
00:05:38,840 --> 00:05:44,840
in charge of diverse topics including

133
00:05:42,590 --> 00:05:48,340
writing policies and managing process

134
00:05:44,840 --> 00:05:50,630
for node.js curve and node ecosystem

135
00:05:48,340 --> 00:05:52,789
vulnerability database management we'll

136
00:05:50,630 --> 00:05:54,920
come back to that later and evangelism

137
00:05:52,790 --> 00:05:57,200
and assistance so I'm currently doing

138
00:05:54,920 --> 00:05:58,880
the evangelism parts feel free to ping

139
00:05:57,200 --> 00:06:05,000
me if you want help with the assistance

140
00:05:58,880 --> 00:06:07,460
part so variable christian who do we

141
00:06:05,000 --> 00:06:09,800
under secretary for node.js core itself

142
00:06:07,460 --> 00:06:11,570
we've got a big booty programs that

143
00:06:09,800 --> 00:06:14,900
hacker ones providers for free and

144
00:06:11,570 --> 00:06:16,510
hacker when people are awesome and we

145
00:06:14,900 --> 00:06:19,340
distribute reward thanks to a

146
00:06:16,510 --> 00:06:21,560
consumption name the IBB internet

147
00:06:19,340 --> 00:06:23,570
bhagwanti that's basically big player of

148
00:06:21,560 --> 00:06:25,820
the internet that found bug bounty

149
00:06:23,570 --> 00:06:29,540
programs for some critical projects such

150
00:06:25,820 --> 00:06:31,550
as Ruby Peyton and nodejs so if you find

151
00:06:29,540 --> 00:06:34,220
a real vulnerability in node.js please

152
00:06:31,550 --> 00:06:35,529
don't report issues in the test of a

153
00:06:34,220 --> 00:06:37,089
dependency

154
00:06:35,529 --> 00:06:39,099
happened and I'm not giving you ability

155
00:06:37,089 --> 00:06:40,419
for that if you have a real definite

156
00:06:39,099 --> 00:06:43,359
vulnerability node Ria's

157
00:06:40,419 --> 00:06:45,248
feel free to report it our hacker 1e

158
00:06:43,359 --> 00:06:47,109
will be more than happy to give you a

159
00:06:45,249 --> 00:06:49,389
few thousand dollars if he is a truly

160
00:06:47,109 --> 00:06:53,349
valuable and you will get the fame of

161
00:06:49,389 --> 00:06:55,269
finding vulnerabilities in node.js also

162
00:06:53,349 --> 00:06:57,308
we've got a private Fork and not sure

163
00:06:55,269 --> 00:06:59,799
this will remain with a new DTaP feature

164
00:06:57,309 --> 00:07:01,359
but basically to give you an overview of

165
00:06:59,799 --> 00:07:03,789
what happens when someone reports a

166
00:07:01,359 --> 00:07:06,068
vulnerability in node.js the renewer it

167
00:07:03,789 --> 00:07:07,899
is reported we decided that the

168
00:07:06,069 --> 00:07:10,149
vulnerability of or not at a triage

169
00:07:07,899 --> 00:07:11,859
phase and then if we are able to

170
00:07:10,149 --> 00:07:14,079
reproduce this and consider it as a

171
00:07:11,859 --> 00:07:16,568
vulnerability we think that on a private

172
00:07:14,079 --> 00:07:19,379
fork where only a few members of the

173
00:07:16,569 --> 00:07:21,999
node core team have access to then we

174
00:07:19,379 --> 00:07:23,829
blog and tweet that there will be a

175
00:07:21,999 --> 00:07:27,039
security release that day at that time

176
00:07:23,829 --> 00:07:29,349
and we embargo the CI that is public and

177
00:07:27,039 --> 00:07:31,929
we publish the patch so you want to

178
00:07:29,349 --> 00:07:34,029
follow node.js on myself on Twitter

179
00:07:31,929 --> 00:07:36,638
because you will get the information of

180
00:07:34,029 --> 00:07:40,209
a new version of node.js with security

181
00:07:36,639 --> 00:07:41,889
fixes being published I tried the last

182
00:07:40,209 --> 00:07:44,549
few boring slight we will get to the

183
00:07:41,889 --> 00:07:47,019
hacking part in a few seconds for the

184
00:07:44,549 --> 00:07:48,849
ecosystem one we also have a backbone

185
00:07:47,019 --> 00:07:51,879
tea program we don't really distribute

186
00:07:48,849 --> 00:07:54,429
bounty yet but a few big players of the

187
00:07:51,879 --> 00:07:57,129
Internet including coinbase I started to

188
00:07:54,429 --> 00:07:59,289
find us and decided that we could give

189
00:07:57,129 --> 00:08:01,149
back but you are still figuring out what

190
00:07:59,289 --> 00:08:04,389
will be the criterias for giving that

191
00:08:01,149 --> 00:08:06,459
and we hold a public repo of elvenar it

192
00:08:04,389 --> 00:08:09,099
is firms in the ecosystem meaning that

193
00:08:06,459 --> 00:08:11,259
if you find a vulnerability in something

194
00:08:09,099 --> 00:08:13,419
that's hosted on NPM you can report that

195
00:08:11,259 --> 00:08:15,459
to us and we will get in touch with the

196
00:08:13,419 --> 00:08:17,739
maintainer have it fixed gives you the

197
00:08:15,459 --> 00:08:21,969
fame and potentially even give you money

198
00:08:17,739 --> 00:08:24,429
for that and we've got a public Draenor

199
00:08:21,969 --> 00:08:27,189
ability database available and deep rich

200
00:08:24,429 --> 00:08:28,869
github repo name security advisories so

201
00:08:27,189 --> 00:08:31,359
feel free to use that and build tools

202
00:08:28,869 --> 00:08:32,889
around it it's really fun to use and

203
00:08:31,359 --> 00:08:35,529
that's it for the boring process

204
00:08:32,889 --> 00:08:38,860
management part let's go to hacking

205
00:08:35,529 --> 00:08:41,198
because action is fun and first question

206
00:08:38,860 --> 00:08:43,300
what are the security issues in node.js

207
00:08:41,198 --> 00:08:45,639
and I'm pretty sure nobody will be

208
00:08:43,299 --> 00:08:46,469
surprised I will start with the OS top

209
00:08:45,639 --> 00:08:50,220
ten

210
00:08:46,470 --> 00:08:52,440
item injections Oh No okay terrible

211
00:08:50,220 --> 00:08:55,470
transition there will be cold sorry

212
00:08:52,440 --> 00:08:57,180
there will be code showing injections so

213
00:08:55,470 --> 00:09:00,720
we'll start with the sequel injection

214
00:08:57,180 --> 00:09:02,729
because it's basically the the kid story

215
00:09:00,720 --> 00:09:04,290
in the security world everyone wants to

216
00:09:02,730 --> 00:09:05,820
learn how to do them everyone wants to

217
00:09:04,290 --> 00:09:09,689
see them everyone want to learn about

218
00:09:05,820 --> 00:09:11,730
them so let's just I am sure everyone

219
00:09:09,690 --> 00:09:13,500
knows in about them in this room but

220
00:09:11,730 --> 00:09:16,710
that really helped me introduce the

221
00:09:13,500 --> 00:09:19,860
syntax of node.js and framework in

222
00:09:16,710 --> 00:09:22,590
express so and this piece of code we

223
00:09:19,860 --> 00:09:25,050
just have endpoint a controller define

224
00:09:22,590 --> 00:09:27,540
win the most popular images framework

225
00:09:25,050 --> 00:09:30,599
name Express so we call a get method

226
00:09:27,540 --> 00:09:33,420
meaning we will define a get endpoint

227
00:09:30,600 --> 00:09:34,800
and then we put the URL slash first

228
00:09:33,420 --> 00:09:37,079
slash :

229
00:09:34,800 --> 00:09:40,530
ID meaning that ID will be a dynamic

230
00:09:37,080 --> 00:09:43,410
parameter and when seven someone does

231
00:09:40,530 --> 00:09:45,480
requests on that endpoint what happens

232
00:09:43,410 --> 00:09:48,000
function we passed as parameter is

233
00:09:45,480 --> 00:09:50,430
called with two arguments one being req

234
00:09:48,000 --> 00:09:52,740
request and the other one being response

235
00:09:50,430 --> 00:09:54,839
I know I should write rec and response

236
00:09:52,740 --> 00:09:58,200
but the slide will be too small for that

237
00:09:54,840 --> 00:10:01,740
on line two we are building a sequel

238
00:09:58,200 --> 00:10:03,810
query by appending the ID we take from

239
00:10:01,740 --> 00:10:06,120
the requests or the framework but it's

240
00:10:03,810 --> 00:10:09,000
and parents that's basically Express

241
00:10:06,120 --> 00:10:11,220
documentation but it tells us the ID in

242
00:10:09,000 --> 00:10:12,960
the URL will be available on the request

243
00:10:11,220 --> 00:10:16,980
object and the params

244
00:10:12,960 --> 00:10:19,770
object in the ID key and then we throw

245
00:10:16,980 --> 00:10:22,020
that into the database and as you can

246
00:10:19,770 --> 00:10:24,120
see we don't wait synchronously for the

247
00:10:22,020 --> 00:10:26,880
result of the database we don't do x

248
00:10:24,120 --> 00:10:28,320
equals database dot query we do database

249
00:10:26,880 --> 00:10:30,270
no trend and then we pass a callback

250
00:10:28,320 --> 00:10:31,500
function and this code back function

251
00:10:30,270 --> 00:10:32,970
will be called by the asynchronous

252
00:10:31,500 --> 00:10:35,370
manager libuv

253
00:10:32,970 --> 00:10:38,180
when the results are available and then

254
00:10:35,370 --> 00:10:41,580
with Jesus sends a result to the user so

255
00:10:38,180 --> 00:10:44,160
no surprise if the ID of my request is

256
00:10:41,580 --> 00:10:46,290
just the integer one my secret query

257
00:10:44,160 --> 00:10:48,870
becomes a next a from a times where ID

258
00:10:46,290 --> 00:10:50,730
equals one and the outcome would be the

259
00:10:48,870 --> 00:10:52,680
document which has an ID equals one and

260
00:10:50,730 --> 00:10:54,060
I hope it's a primary field in your

261
00:10:52,680 --> 00:10:56,550
database and you don't have multiple

262
00:10:54,060 --> 00:10:59,069
documents with the same ID

263
00:10:56,550 --> 00:11:00,959
and as we are all security aware people

264
00:10:59,070 --> 00:11:02,640
we can check that there is a terrible

265
00:11:00,959 --> 00:11:05,399
secret injection in this piece of code

266
00:11:02,640 --> 00:11:07,980
because we are appending string so if a

267
00:11:05,399 --> 00:11:11,550
man issues that I can use one all true

268
00:11:07,980 --> 00:11:13,620
as an ID as a value for ID the sequel

269
00:11:11,550 --> 00:11:16,769
query becomes obviously select star from

270
00:11:13,620 --> 00:11:18,720
ATM so Aldi equals 1 all true and we get

271
00:11:16,769 --> 00:11:21,829
all the item in the database it's Yahoo

272
00:11:18,720 --> 00:11:25,500
style bad and you should avoid that so

273
00:11:21,829 --> 00:11:28,140
usually a usual mitigation solution

274
00:11:25,500 --> 00:11:30,000
works like use prepare statements they

275
00:11:28,140 --> 00:11:31,560
exist in the drivers say exist in the

276
00:11:30,000 --> 00:11:33,149
database it's not because it's

277
00:11:31,560 --> 00:11:35,930
JavaScript that everything we learned

278
00:11:33,149 --> 00:11:38,700
from PHP and Java has disappeared and

279
00:11:35,930 --> 00:11:40,829
let's go to something a bit more Noddy

280
00:11:38,700 --> 00:11:44,399
even if yesterday so great demo of that

281
00:11:40,829 --> 00:11:46,170
in PHP will move to object injection

282
00:11:44,399 --> 00:11:48,540
because javascript is an untyped

283
00:11:46,170 --> 00:11:51,060
language so unlike Java when you

284
00:11:48,540 --> 00:11:53,189
digitize data it won't crash when you

285
00:11:51,060 --> 00:11:55,979
deserve as data to a class that does not

286
00:11:53,190 --> 00:11:59,490
respect the same shape basically you

287
00:11:55,980 --> 00:12:02,220
could tell a web application hey here is

288
00:11:59,490 --> 00:12:03,600
a value and you're expecting a certain

289
00:12:02,220 --> 00:12:05,940
type that nothing prevents me from

290
00:12:03,600 --> 00:12:08,160
giving you another kind of value at this

291
00:12:05,940 --> 00:12:10,620
position so here we'll use a post

292
00:12:08,160 --> 00:12:14,010
endpoint first slash document slash find

293
00:12:10,620 --> 00:12:16,440
and we create an object in query and if

294
00:12:14,010 --> 00:12:18,839
the body of the incoming HTTP request

295
00:12:16,440 --> 00:12:21,060
has a field name title we put that in

296
00:12:18,839 --> 00:12:23,790
the query and if the body of the HTTP

297
00:12:21,060 --> 00:12:25,739
request as a field name desired title we

298
00:12:23,790 --> 00:12:29,360
put that in the query too and we send

299
00:12:25,740 --> 00:12:33,450
that to MongoDB for the Mongo driver and

300
00:12:29,360 --> 00:12:35,820
if we react to that locally if we have

301
00:12:33,450 --> 00:12:38,760
reg dead body being desired type string

302
00:12:35,820 --> 00:12:40,890
blog and I am phases of the string blog

303
00:12:38,760 --> 00:12:43,410
the sequel cockapoo

304
00:12:40,890 --> 00:12:47,010
the Mongo DB query becomes document that

305
00:12:43,410 --> 00:12:48,750
find type string blog right and the

306
00:12:47,010 --> 00:12:50,279
outcome of this query will be all the

307
00:12:48,750 --> 00:12:52,620
documents in the collection name

308
00:12:50,279 --> 00:12:55,230
documents that have a field and blog

309
00:12:52,620 --> 00:12:57,930
that is a string that has a field name

310
00:12:55,230 --> 00:13:00,449
type that has a string value name blog

311
00:12:57,930 --> 00:13:02,599
and since it's MongoDB you could have

312
00:13:00,449 --> 00:13:05,569
whatever you want you know there is no

313
00:13:02,600 --> 00:13:08,690
there is nothing enforcing any schemas

314
00:13:05,570 --> 00:13:12,350
on your data so any query in Mongo can

315
00:13:08,690 --> 00:13:14,810
give unexpected results but enough with

316
00:13:12,350 --> 00:13:17,210
trolling MongoDB let's inject something

317
00:13:14,810 --> 00:13:19,760
so there's nothing in that piece of code

318
00:13:17,210 --> 00:13:22,310
that prevents someone from crafting an

319
00:13:19,760 --> 00:13:25,460
HTTP request with a curl command a

320
00:13:22,310 --> 00:13:27,709
postman or even hacking into your

321
00:13:25,460 --> 00:13:30,470
front-end application to send another

322
00:13:27,710 --> 00:13:33,260
kind of body payload and in that case

323
00:13:30,470 --> 00:13:34,010
the field desired type is not the string

324
00:13:33,260 --> 00:13:36,680
blog anymore

325
00:13:34,010 --> 00:13:39,560
if the server objects dollar in dole are

326
00:13:36,680 --> 00:13:41,540
not equal to zero that's an instruction

327
00:13:39,560 --> 00:13:44,060
from MongoDB and at the end of the day

328
00:13:41,540 --> 00:13:46,459
sequel is a document of the MongoDB

329
00:13:44,060 --> 00:13:49,969
query becomes document that fine type

330
00:13:46,460 --> 00:13:51,710
not zero and you get everything that is

331
00:13:49,970 --> 00:13:54,650
in the collection so that's basically

332
00:13:51,710 --> 00:13:57,110
equivalent to what we did previously in

333
00:13:54,650 --> 00:14:01,640
sequel by getting everything in a table

334
00:13:57,110 --> 00:14:03,530
and once again it's Yahoo bad so enough

335
00:14:01,640 --> 00:14:05,330
with injections I want to talk about

336
00:14:03,530 --> 00:14:07,370
something that is more dangerous in

337
00:14:05,330 --> 00:14:10,190
JavaScript and in some other languages

338
00:14:07,370 --> 00:14:12,470
so remember javascript is single

339
00:14:10,190 --> 00:14:15,740
threaded meaning that if you run

340
00:14:12,470 --> 00:14:18,440
something in JavaScript that's going to

341
00:14:15,740 --> 00:14:22,100
be the only thing running in the

342
00:14:18,440 --> 00:14:24,770
JavaScript process at this point so long

343
00:14:22,100 --> 00:14:26,510
synchronous separation does what we call

344
00:14:24,770 --> 00:14:28,760
blocking event loop meaning that your

345
00:14:26,510 --> 00:14:31,010
web server your process won't be able to

346
00:14:28,760 --> 00:14:33,170
do it won't be able to do anything else

347
00:14:31,010 --> 00:14:36,920
than handling this piece of synchronous

348
00:14:33,170 --> 00:14:39,110
code right so if you manage to find a

349
00:14:36,920 --> 00:14:41,209
very slow regs and that can happen by

350
00:14:39,110 --> 00:14:44,180
accident that happened by accident when

351
00:14:41,210 --> 00:14:46,070
you write your own reg X you you can get

352
00:14:44,180 --> 00:14:48,530
your up being unresponsive because it

353
00:14:46,070 --> 00:14:52,340
will be just working on the red X for an

354
00:14:48,530 --> 00:14:54,579
infinite time so let's go with an

355
00:14:52,340 --> 00:14:58,010
example I never do live demo because

356
00:14:54,580 --> 00:15:00,050
usually but let's go with an A example

357
00:14:58,010 --> 00:15:02,480
at this point we just have on line one

358
00:15:00,050 --> 00:15:06,020
rhaggy acts that is define an online to

359
00:15:02,480 --> 00:15:08,900
a string name s with an exclamation mark

360
00:15:06,020 --> 00:15:11,180
and we will just happened ace at the

361
00:15:08,900 --> 00:15:12,850
beginning of that string and pass that

362
00:15:11,180 --> 00:15:15,160
teams already acts and monitored

363
00:15:12,850 --> 00:15:17,470
takes so let's say we have the string

364
00:15:15,160 --> 00:15:19,240
only exclamation mark the time to

365
00:15:17,470 --> 00:15:21,220
execute the regex on that string is

366
00:15:19,240 --> 00:15:23,290
fairly small it's a quarter of a

367
00:15:21,220 --> 00:15:25,779
millisecond and there is a warm-up thing

368
00:15:23,290 --> 00:15:28,990
so okay good enough when we've got five

369
00:15:25,779 --> 00:15:31,360
days and one exclamation mark we still

370
00:15:28,990 --> 00:15:33,970
are be way below the millisecond so it's

371
00:15:31,360 --> 00:15:36,790
still really good but things get funnier

372
00:15:33,970 --> 00:15:39,579
when you get to 15s and one exclamation

373
00:15:36,790 --> 00:15:42,430
mark you are up to one millisecond and

374
00:15:39,579 --> 00:15:45,790
if you happened five more days you go

375
00:15:42,430 --> 00:15:48,638
directly to up to 30 milliseconds and if

376
00:15:45,790 --> 00:15:50,889
you go to 30 s you've got to 30 seconds

377
00:15:48,639 --> 00:15:52,839
so I tried to plot that on a graph and

378
00:15:50,889 --> 00:15:54,370
as you can see it doesn't mean anything

379
00:15:52,839 --> 00:15:58,540
because I did not use a logarithmic

380
00:15:54,370 --> 00:16:02,050
scale and basically the it's so

381
00:15:58,540 --> 00:16:04,000
exponential that string long enough will

382
00:16:02,050 --> 00:16:06,310
make your application and responsive for

383
00:16:04,000 --> 00:16:08,680
a while and it can be used maliciously

384
00:16:06,310 --> 00:16:11,410
but it's also shooting yourself in the

385
00:16:08,680 --> 00:16:13,839
foot if you have that in production with

386
00:16:11,410 --> 00:16:17,050
not malicious users you know it happens

387
00:16:13,839 --> 00:16:19,959
so readers are really problematic and

388
00:16:17,050 --> 00:16:22,630
can be basically a source of denial of

389
00:16:19,959 --> 00:16:26,349
service in no dry-ass application or in

390
00:16:22,630 --> 00:16:28,449
all single threaded technologies okay

391
00:16:26,350 --> 00:16:31,180
and let's go for fannia thing because

392
00:16:28,449 --> 00:16:32,920
the talk is about node.js and javascript

393
00:16:31,180 --> 00:16:34,839
this ecosystem right and I've been

394
00:16:32,920 --> 00:16:38,709
talking earlier but not J's so let's

395
00:16:34,839 --> 00:16:43,569
talk about the ecosystem okay who here

396
00:16:38,709 --> 00:16:45,399
knows web patch okay so for those who

397
00:16:43,569 --> 00:16:47,380
don't use it will not know it it's

398
00:16:45,399 --> 00:16:49,029
basically one of the most popular module

399
00:16:47,380 --> 00:16:50,829
in the world if you do front-end

400
00:16:49,029 --> 00:16:52,509
programming you are probably using

401
00:16:50,829 --> 00:16:55,089
webpack probably your colleagues are

402
00:16:52,509 --> 00:16:57,009
using it it's a very handy tool to a

403
00:16:55,089 --> 00:17:00,279
bundle of front-end application

404
00:16:57,009 --> 00:17:02,470
transforms a code inject CSS direct in

405
00:17:00,279 --> 00:17:04,869
J's with XML because why not

406
00:17:02,470 --> 00:17:07,569
and it's one of the most popular package

407
00:17:04,869 --> 00:17:09,069
in the JavaScript world so in the

408
00:17:07,569 --> 00:17:11,829
programming world in the web world at

409
00:17:09,069 --> 00:17:14,168
least and when you npm install web back

410
00:17:11,829 --> 00:17:18,609
you don't install web back you instant

411
00:17:14,169 --> 00:17:19,970
web back and its 336 differences meaning

412
00:17:18,609 --> 00:17:22,520
that all these people

413
00:17:19,970 --> 00:17:26,059
left-hand side of this table this screen

414
00:17:22,520 --> 00:17:27,619
have execution right on your machine

415
00:17:26,059 --> 00:17:31,100
because you are running their piece of

416
00:17:27,619 --> 00:17:34,489
software and it's right because for

417
00:17:31,100 --> 00:17:36,879
instance the fourth guy on this line

418
00:17:34,490 --> 00:17:39,950
it's easy I know him so I trust him and

419
00:17:36,880 --> 00:17:43,270
I know him but I don't know all of these

420
00:17:39,950 --> 00:17:47,690
people so yeah it's a bit were roaring

421
00:17:43,270 --> 00:17:51,559
and that's basically the thing abusing

422
00:17:47,690 --> 00:17:54,110
that will make attack attackers able to

423
00:17:51,559 --> 00:17:58,370
attacks not your web production

424
00:17:54,110 --> 00:18:00,949
but the desktop the workstation of the

425
00:17:58,370 --> 00:18:02,870
developers you work with and that's

426
00:18:00,950 --> 00:18:05,299
what's interesting and that's not only a

427
00:18:02,870 --> 00:18:06,739
prediction because it actually happened

428
00:18:05,299 --> 00:18:09,830
last year last summer

429
00:18:06,740 --> 00:18:12,740
yes lint has been breached so do you

430
00:18:09,830 --> 00:18:14,689
know yes lint windows eslint yes lint is

431
00:18:12,740 --> 00:18:17,299
like one of the most popular tool for

432
00:18:14,690 --> 00:18:19,309
code carotene JavaScript and it's one of

433
00:18:17,299 --> 00:18:21,470
the most downloaded package on NPM once

434
00:18:19,309 --> 00:18:24,678
again these slides have been written in

435
00:18:21,470 --> 00:18:28,490
January that it's downloaded 2 million

436
00:18:24,679 --> 00:18:31,190
times a year like just 2 million times a

437
00:18:28,490 --> 00:18:34,610
year and that's a lot this package is

438
00:18:31,190 --> 00:18:38,480
massively popular and actually someone

439
00:18:34,610 --> 00:18:41,090
were able to compromise the action to

440
00:18:38,480 --> 00:18:43,250
NPM account of one of the maintain of es

441
00:18:41,090 --> 00:18:46,039
means because this person was reusing a

442
00:18:43,250 --> 00:18:48,049
password with other thing and the new

443
00:18:46,039 --> 00:18:50,330
list of passwords that breached and they

444
00:18:48,049 --> 00:18:54,110
used that an NPM and the attacker were

445
00:18:50,330 --> 00:18:56,928
smart they did not attach by publishing

446
00:18:54,110 --> 00:19:01,070
the wrong version of ES liens but they

447
00:18:56,929 --> 00:19:03,860
published two malicious versions upon

448
00:19:01,070 --> 00:19:06,950
which es means depends so two packages

449
00:19:03,860 --> 00:19:10,760
that justice uses with malicious

450
00:19:06,950 --> 00:19:13,700
versions basically the script fetch to

451
00:19:10,760 --> 00:19:16,640
payload and paste bin and was aiming at

452
00:19:13,700 --> 00:19:19,789
correcting the NPC content of the npm SE

453
00:19:16,640 --> 00:19:22,190
file that contains the token for

454
00:19:19,789 --> 00:19:24,379
accessing npm meaning that if that

455
00:19:22,190 --> 00:19:26,780
exploit run on your machine and you have

456
00:19:24,380 --> 00:19:28,640
published right say you are working for

457
00:19:26,780 --> 00:19:30,830
a company publishing npm modules and you

458
00:19:28,640 --> 00:19:33,310
have published right for one of them

459
00:19:30,830 --> 00:19:35,800
those publishing rights will be

460
00:19:33,310 --> 00:19:38,260
or if your company is using private

461
00:19:35,800 --> 00:19:40,210
registry and you have tokens to fetch

462
00:19:38,260 --> 00:19:43,750
these modules these tokens would have

463
00:19:40,210 --> 00:19:48,490
been stolen so actually it was not that

464
00:19:43,750 --> 00:19:51,370
good and NPM reacted pretty quickly by

465
00:19:48,490 --> 00:19:53,620
revoking all access tokens at once they

466
00:19:51,370 --> 00:19:55,570
consider that 4.5 days I can't might

467
00:19:53,620 --> 00:19:58,330
have been compromised and binaries I

468
00:19:55,570 --> 00:20:01,030
learned and now you can force people to

469
00:19:58,330 --> 00:20:04,360
use to FA when publishing a package not

470
00:20:01,030 --> 00:20:06,550
only went to login to NPM so obviously

471
00:20:04,360 --> 00:20:08,949
we are learning from our mistakes and

472
00:20:06,550 --> 00:20:12,220
making the ecosystem safer but we are

473
00:20:08,950 --> 00:20:13,840
security people we know that valid proof

474
00:20:12,220 --> 00:20:17,080
does not really exist at the end of the

475
00:20:13,840 --> 00:20:20,020
day actually buried items because I

476
00:20:17,080 --> 00:20:22,300
promise to tell you who to defend

477
00:20:20,020 --> 00:20:24,940
against these attacks so let's go for

478
00:20:22,300 --> 00:20:28,720
the saving private no Dre as part of the

479
00:20:24,940 --> 00:20:30,520
talk first of all update nodejs like you

480
00:20:28,720 --> 00:20:33,070
would be surprised how many people are

481
00:20:30,520 --> 00:20:35,110
still using node.js for introduction and

482
00:20:33,070 --> 00:20:37,899
I'm not even mentioning logistics that

483
00:20:35,110 --> 00:20:40,780
is out of support for one month now

484
00:20:37,900 --> 00:20:43,420
meaning that when you come back at work

485
00:20:40,780 --> 00:20:45,520
and Sunday or Monday just check what the

486
00:20:43,420 --> 00:20:48,490
version of node.js are running on your

487
00:20:45,520 --> 00:20:50,770
prediction if that node is six you won't

488
00:20:48,490 --> 00:20:54,070
get security patches anymore for that

489
00:20:50,770 --> 00:20:55,900
version time to migrate to node.js 10 or

490
00:20:54,070 --> 00:20:58,810
even better 12 because it will be

491
00:20:55,900 --> 00:21:01,450
available soon self-promotion moment I

492
00:20:58,810 --> 00:21:04,240
publish nightly build local version of

493
00:21:01,450 --> 00:21:07,180
node.js so you want if you want to try

494
00:21:04,240 --> 00:21:09,280
your your application against the future

495
00:21:07,180 --> 00:21:11,470
version of not genius just check my

496
00:21:09,280 --> 00:21:14,889
github there is a Duke your link where

497
00:21:11,470 --> 00:21:16,750
you can get make rebuilds so that goes

498
00:21:14,890 --> 00:21:20,140
without saying but it's still better to

499
00:21:16,750 --> 00:21:22,840
remind everyone about it review the use

500
00:21:20,140 --> 00:21:26,140
of critical core modules so at the top

501
00:21:22,840 --> 00:21:28,600
at a birdie on the first line there is a

502
00:21:26,140 --> 00:21:31,330
few of these booklets we've got a lot of

503
00:21:28,600 --> 00:21:34,330
recommendation one of them being these

504
00:21:31,330 --> 00:21:35,169
crazies critical module file system

505
00:21:34,330 --> 00:21:39,040
shell process

506
00:21:35,170 --> 00:21:41,980
vn must not be called with unsanitized

507
00:21:39,040 --> 00:21:43,810
user input so if you don't manage to get

508
00:21:41,980 --> 00:21:46,629
one of these just protect me I get one

509
00:21:43,810 --> 00:21:49,239
sent to you or send you a PDF link

510
00:21:46,629 --> 00:21:51,070
so make sure you know what gets into

511
00:21:49,239 --> 00:21:55,570
your app and what gets into the critical

512
00:21:51,070 --> 00:21:58,019
modules that have system access sanitize

513
00:21:55,570 --> 00:22:00,970
input so remember the MongoDB injection

514
00:21:58,019 --> 00:22:03,940
basically type-checking protects against

515
00:22:00,970 --> 00:22:05,320
that so type check with the libraries

516
00:22:03,940 --> 00:22:08,049
that is really cool from the happy

517
00:22:05,320 --> 00:22:10,299
community that is named joy that is easy

518
00:22:08,049 --> 00:22:12,820
to use and that will help you to say oh

519
00:22:10,299 --> 00:22:14,710
the shape of data that get into my app

520
00:22:12,820 --> 00:22:16,899
most complied with that string must

521
00:22:14,710 --> 00:22:19,840
comply to the Tradex don't drag those

522
00:22:16,899 --> 00:22:23,918
through that but yeah check that library

523
00:22:19,840 --> 00:22:26,379
I know I have been really scary about

524
00:22:23,919 --> 00:22:28,960
reg X dose but hopefully the solutions

525
00:22:26,379 --> 00:22:32,379
for that so Jamie Davis who is doing a

526
00:22:28,960 --> 00:22:34,869
PhD at IBM right now has a tool that's

527
00:22:32,379 --> 00:22:37,059
the text reg X should give the code base

528
00:22:34,869 --> 00:22:38,738
and it detects reg X and I forgot to the

529
00:22:37,059 --> 00:22:40,869
destroyed because I published a module

530
00:22:38,739 --> 00:22:43,419
that basically enables you through time

531
00:22:40,869 --> 00:22:45,609
bomb racks you can say this reg X cannot

532
00:22:43,419 --> 00:22:47,619
ruin formulas and to milliseconds also

533
00:22:45,609 --> 00:22:49,809
wise please stop this execution and that

534
00:22:47,619 --> 00:22:52,689
the only way you can stop synchronous

535
00:22:49,809 --> 00:22:55,418
chunk of code in node.js so check that

536
00:22:52,690 --> 00:22:59,349
and check my github because hey I want

537
00:22:55,419 --> 00:23:01,840
something to monitor your dependencies

538
00:22:59,349 --> 00:23:04,720
for known issues there are awesome

539
00:23:01,840 --> 00:23:07,599
vendors for that who do that chroma

540
00:23:04,720 --> 00:23:09,789
sherry for you one of them even being in

541
00:23:07,599 --> 00:23:11,649
the room not only in the conference so

542
00:23:09,789 --> 00:23:13,929
go talk to these people because they do

543
00:23:11,649 --> 00:23:16,299
a tremendous job to help you being safe

544
00:23:13,929 --> 00:23:18,789
also you can build your own tool using

545
00:23:16,299 --> 00:23:20,440
the security working group database and

546
00:23:18,789 --> 00:23:23,220
I would be more than happy to see what

547
00:23:20,440 --> 00:23:26,080
oh something you built internally on it

548
00:23:23,220 --> 00:23:29,259
monitors a dependency tree like go on

549
00:23:26,080 --> 00:23:30,879
this website so rack and recast two

550
00:23:29,259 --> 00:23:34,210
modules will do exactly the same thing

551
00:23:30,879 --> 00:23:37,269
that HTTP clients salable you to perform

552
00:23:34,210 --> 00:23:39,580
HTTP request from an up process one of

553
00:23:37,269 --> 00:23:41,559
them as those ends of dependency the

554
00:23:39,580 --> 00:23:43,090
other as two that are part of same

555
00:23:41,559 --> 00:23:43,749
organization and have the same

556
00:23:43,090 --> 00:23:45,759
maintainer

557
00:23:43,749 --> 00:23:48,039
I know which one is the most stable and

558
00:23:45,759 --> 00:23:51,340
are less likely to have mal walls into

559
00:23:48,039 --> 00:23:53,559
these dependencies thanks so much for

560
00:23:51,340 --> 00:23:54,040
your attention let's keep in touch the

561
00:23:53,559 --> 00:24:00,370
present

562
00:23:54,040 --> 00:24:02,580
Joanie's online and I have time for a

563
00:24:00,370 --> 00:24:06,929
couple questions if you want

564
00:24:02,580 --> 00:24:06,929
or maybe you're sleeping now

565
00:24:12,610 --> 00:24:18,469
that's a good question

566
00:24:14,929 --> 00:24:21,020
it's not really not jeaious to say that

567
00:24:18,470 --> 00:24:23,150
it's mozi people who make javascript to

568
00:24:21,020 --> 00:24:25,460
decide if if that will go in that

569
00:24:23,150 --> 00:24:28,640
direction what I can say is that

570
00:24:25,460 --> 00:24:29,720
regarding time trusting a lot of efforts

571
00:24:28,640 --> 00:24:32,390
are happening right now

572
00:24:29,720 --> 00:24:34,640
and regarding typescript it's a great

573
00:24:32,390 --> 00:24:36,980
technology for quote quality but it's

574
00:24:34,640 --> 00:24:38,960
not a great tool for safety because

575
00:24:36,980 --> 00:24:41,960
basically it will prevent you for

576
00:24:38,960 --> 00:24:44,659
calling a method with types you don't

577
00:24:41,960 --> 00:24:46,640
expect because at compilation it will

578
00:24:44,659 --> 00:24:50,059
check your code but there is no type

579
00:24:46,640 --> 00:24:52,429
checking included at runtime meaning

580
00:24:50,059 --> 00:24:54,678
that when your application will get

581
00:24:52,429 --> 00:24:58,309
external inputs people can still type

582
00:24:54,679 --> 00:25:02,320
temper so I don't see any initiative

583
00:24:58,309 --> 00:25:02,320
actively in the node community right now

584
00:25:03,940 --> 00:25:06,940
yeah

585
00:25:07,419 --> 00:25:11,320
that's an excellent question you total

586
00:25:09,789 --> 00:25:14,679
stranger who is not involved in the

587
00:25:11,320 --> 00:25:16,450
security working group basically if

588
00:25:14,679 --> 00:25:18,429
you're based in tel-aviv you for a beer

589
00:25:16,450 --> 00:25:21,159
or coffee to rental and he will tell you

590
00:25:18,429 --> 00:25:23,289
everything as always feel free to ping

591
00:25:21,159 --> 00:25:25,419
us on Twitter or just to show up on the

592
00:25:23,289 --> 00:25:27,759
github repo we have a lot of open the

593
00:25:25,419 --> 00:25:30,639
issues that can use a lot of help so you

594
00:25:27,759 --> 00:25:33,669
go to node.js and github and you find

595
00:25:30,639 --> 00:25:35,349
the representing security WG and there's

596
00:25:33,669 --> 00:25:37,619
a lot of open issues a lot of

597
00:25:35,349 --> 00:25:40,029
initiatives we have monthly meeting and

598
00:25:37,619 --> 00:25:41,439
technically is our only open two member

599
00:25:40,029 --> 00:25:43,299
of the Working Group but we'll be more

600
00:25:41,440 --> 00:25:44,739
than happy to have you here because we

601
00:25:43,299 --> 00:25:47,408
are an open community and we know

602
00:25:44,739 --> 00:25:49,989
everyone so if you have spare time and

603
00:25:47,409 --> 00:25:52,269
you want a bit of the node.js security

604
00:25:49,989 --> 00:25:54,849
Fame - give talk in conference because

605
00:25:52,269 --> 00:25:56,859
it's a great line on your business card

606
00:25:54,849 --> 00:26:01,239
just join us we would be more than happy

607
00:25:56,859 --> 00:26:08,468
to work with you yeah

608
00:26:01,239 --> 00:26:11,109
I love your t-shirt by the way my

609
00:26:08,469 --> 00:26:14,649
question is related to this you short

610
00:26:11,109 --> 00:26:18,789
you have mentioned that nowadays like a

611
00:26:14,649 --> 00:26:22,718
system of node.js and NPM is the most

612
00:26:18,789 --> 00:26:25,179
biggest one so NPM has the Mogul is the

613
00:26:22,719 --> 00:26:27,219
most big number of packages in it at the

614
00:26:25,179 --> 00:26:29,349
same time you have mentioned that for

615
00:26:27,219 --> 00:26:32,379
example the problem with web pack when

616
00:26:29,349 --> 00:26:37,029
you simply don't know ever what

617
00:26:32,379 --> 00:26:41,349
dependencies do do this do some packages

618
00:26:37,029 --> 00:26:43,209
and who is written by do the plan to

619
00:26:41,349 --> 00:26:45,609
make maybe some guidelines for new

620
00:26:43,209 --> 00:26:48,549
developers of packages to reduce the

621
00:26:45,609 --> 00:26:51,789
number of dependencies because you know

622
00:26:48,549 --> 00:26:54,609
this funny story with some little

623
00:26:51,789 --> 00:26:58,719
package which was the letter and that

624
00:26:54,609 --> 00:27:02,349
was some kind of curls so yeah that's

625
00:26:58,719 --> 00:27:04,599
really true and that happened so there's

626
00:27:02,349 --> 00:27:07,239
an initiative in the security working

627
00:27:04,599 --> 00:27:09,579
group upon helping developers making

628
00:27:07,239 --> 00:27:11,859
safer packages and better packages that

629
00:27:09,579 --> 00:27:14,829
will be guidelines also at the same

630
00:27:11,859 --> 00:27:17,499
times as a commercial tool helping you

631
00:27:14,829 --> 00:27:18,830
finding quality packages and I know that

632
00:27:17,499 --> 00:27:22,580
too Kerberos are actors

633
00:27:18,830 --> 00:27:24,139
coming in that direction so also another

634
00:27:22,580 --> 00:27:27,350
best practice will be to lock your

635
00:27:24,140 --> 00:27:30,080
dependencies once you've found a good

636
00:27:27,350 --> 00:27:32,480
set of dependencies you use what we call

637
00:27:30,080 --> 00:27:34,549
a lock file meaning that when you

638
00:27:32,480 --> 00:27:36,830
reinstall your project you will get the

639
00:27:34,549 --> 00:27:38,779
dependencies only in the certain

640
00:27:36,830 --> 00:27:41,449
versions that you had when you created

641
00:27:38,779 --> 00:27:44,720
the log file also NPM has a policy

642
00:27:41,450 --> 00:27:46,429
against and publishing packages now you

643
00:27:44,720 --> 00:27:48,289
can only open and publish a package that

644
00:27:46,429 --> 00:27:50,330
has been published in the last 24 hours

645
00:27:48,289 --> 00:27:52,820
otherwise you have to contact NPM

646
00:27:50,330 --> 00:27:54,110
directly and my understanding is that

647
00:27:52,820 --> 00:27:56,899
github

648
00:27:54,110 --> 00:27:59,990
package hosting is will be following the

649
00:27:56,899 --> 00:28:04,850
same policy at this point okay thank you

650
00:27:59,990 --> 00:28:05,510
a pleasure okay yeah thanks so much for

651
00:28:04,850 --> 00:28:07,399
your attention

652
00:28:05,510 --> 00:28:09,289
I'm all around the conference if you

653
00:28:07,399 --> 00:28:12,678
want to learn about applications

654
00:28:09,289 --> 00:28:15,340
security management rasp and nodejs feel

655
00:28:12,679 --> 00:28:15,340
free to let me know

