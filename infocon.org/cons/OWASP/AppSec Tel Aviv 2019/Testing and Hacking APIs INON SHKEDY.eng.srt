1
00:00:00,030 --> 00:00:07,460
so hi guys today we are going to talk

2
00:00:03,899 --> 00:00:10,320
about API security the agenda is to

3
00:00:07,460 --> 00:00:13,590
understand the new battleground in API

4
00:00:10,320 --> 00:00:15,839
security and talk a little bit about API

5
00:00:13,590 --> 00:00:18,448
pentesting what is the required mindset

6
00:00:15,839 --> 00:00:21,570
in concepts for pen testing for api's

7
00:00:18,449 --> 00:00:24,750
and also about hunting for the hospital

8
00:00:21,570 --> 00:00:26,250
10 for API which is a new project I'm

9
00:00:24,750 --> 00:00:28,500
one of the co-leaders together with

10
00:00:26,250 --> 00:00:30,720
everything alone from check marks and we

11
00:00:28,500 --> 00:00:34,050
will also see real examples for API

12
00:00:30,720 --> 00:00:35,969
bridges so just a few words about myself

13
00:00:34,050 --> 00:00:37,860
my name is Anand Shetty

14
00:00:35,969 --> 00:00:40,079
I'm the head of research soul security

15
00:00:37,860 --> 00:00:42,600
have seven years of research and

16
00:00:40,079 --> 00:00:44,989
fantastic experience and I've grown up

17
00:00:42,600 --> 00:00:47,850
with api's so what does it mean I

18
00:00:44,989 --> 00:00:48,930
started my career back in Israel it was

19
00:00:47,850 --> 00:00:51,120
a security consultant

20
00:00:48,930 --> 00:00:54,510
mostly for financial military and

21
00:00:51,120 --> 00:00:56,730
government organizations I used to be in

22
00:00:54,510 --> 00:00:58,949
the red team of the Israeli army yeah

23
00:00:56,730 --> 00:01:03,809
and as you can imagine in these types of

24
00:00:58,949 --> 00:01:06,810
companies I saw mostly aspx JSP and SCP

25
00:01:03,809 --> 00:01:09,658
with traditional concepts like multi

26
00:01:06,810 --> 00:01:12,240
page applications on Prem and the api's

27
00:01:09,659 --> 00:01:14,369
will more like a niche component in the

28
00:01:12,240 --> 00:01:17,610
application more like for b2b

29
00:01:14,369 --> 00:01:20,250
communication then I decided to leave

30
00:01:17,610 --> 00:01:22,259
Israel I bought a one-way ticket to the

31
00:01:20,250 --> 00:01:25,770
Silicon Valley in California and I

32
00:01:22,259 --> 00:01:28,049
started a new a new episode where I'm a

33
00:01:25,770 --> 00:01:31,350
security consultant for startups and t1

34
00:01:28,049 --> 00:01:34,470
companies and I saw new technologies

35
00:01:31,350 --> 00:01:36,240
like Ruby on Rails le stelle no des with

36
00:01:34,470 --> 00:01:38,908
the new concepts like single page

37
00:01:36,240 --> 00:01:41,399
applications cloud CI CD and the most

38
00:01:38,909 --> 00:01:45,630
important part it's all these

39
00:01:41,400 --> 00:01:48,540
applications deeply rely on api's so

40
00:01:45,630 --> 00:01:50,759
before we even start talking about API

41
00:01:48,540 --> 00:01:53,189
security let's start understand let's

42
00:01:50,759 --> 00:01:54,509
try to understand what is the api's and

43
00:01:53,189 --> 00:01:57,508
how are they different than traditional

44
00:01:54,509 --> 00:01:58,920
applications so if you took a look at

45
00:01:57,509 --> 00:02:01,259
the traffic between the client and the

46
00:01:58,920 --> 00:02:03,600
server about five or ten years ago you

47
00:02:01,259 --> 00:02:07,740
could see something like that the client

48
00:02:03,600 --> 00:02:10,679
would request some aspx page for example

49
00:02:07,740 --> 00:02:12,750
default.aspx then the application server

50
00:02:10,679 --> 00:02:13,020
would communicate with the database you

51
00:02:12,750 --> 00:02:16,080
know

52
00:02:13,020 --> 00:02:18,270
to fetch data the server would filter

53
00:02:16,080 --> 00:02:21,240
out data and render a nice and visual

54
00:02:18,270 --> 00:02:25,380
HTML page that would be presented to the

55
00:02:21,240 --> 00:02:27,570
client to the user by the browser so

56
00:02:25,380 --> 00:02:31,380
what happens today in modern

57
00:02:27,570 --> 00:02:33,329
applications first of all you have more

58
00:02:31,380 --> 00:02:35,880
types of times you can you can find

59
00:02:33,330 --> 00:02:38,430
developers that use the API you can find

60
00:02:35,880 --> 00:02:41,040
IOT devices mobile devices together with

61
00:02:38,430 --> 00:02:44,100
modern web applications and on the other

62
00:02:41,040 --> 00:02:47,100
hand you can you can find more types of

63
00:02:44,100 --> 00:02:49,410
database including sequel no sequel

64
00:02:47,100 --> 00:02:54,210
Redis and internal micro services that

65
00:02:49,410 --> 00:02:55,560
are used to to fetch data so today if

66
00:02:54,210 --> 00:02:57,690
you take a look at a traffic between the

67
00:02:55,560 --> 00:02:59,550
clients and the server you can see that

68
00:02:57,690 --> 00:03:01,920
the clients would ask for very specific

69
00:02:59,550 --> 00:03:04,380
types of data or actions from the API

70
00:03:01,920 --> 00:03:07,850
and then application server would fetch

71
00:03:04,380 --> 00:03:11,310
or update data from the data sources and

72
00:03:07,850 --> 00:03:14,489
return to the client raw data in the

73
00:03:11,310 --> 00:03:16,830
form of JSON it's very different from a

74
00:03:14,490 --> 00:03:17,310
traffic perspective and if you think

75
00:03:16,830 --> 00:03:19,950
about it

76
00:03:17,310 --> 00:03:22,140
APR the more about the data and I would

77
00:03:19,950 --> 00:03:24,350
like to say that aps are kind of a proxy

78
00:03:22,140 --> 00:03:28,589
between the client and the databases

79
00:03:24,350 --> 00:03:31,380
it's a very big change so it has many

80
00:03:28,590 --> 00:03:32,780
implications in the security field there

81
00:03:31,380 --> 00:03:35,310
is good news and bad news

82
00:03:32,780 --> 00:03:38,720
like we like to do in Israel I would

83
00:03:35,310 --> 00:03:41,010
start with the good news the first point

84
00:03:38,720 --> 00:03:44,400
many of the traditional application

85
00:03:41,010 --> 00:03:47,160
vulnerabilities barely exist in api's if

86
00:03:44,400 --> 00:03:49,020
we talk about reflected XSS o CSRF

87
00:03:47,160 --> 00:03:51,630
many of them are solved that just by the

88
00:03:49,020 --> 00:03:55,230
use of authorization header instead of a

89
00:03:51,630 --> 00:03:56,700
cookie based authentication I mean in

90
00:03:55,230 --> 00:03:59,640
model application it's very rare to find

91
00:03:56,700 --> 00:04:03,119
sequel injections because the use of our

92
00:03:59,640 --> 00:04:04,980
realms environments and if we talk about

93
00:04:03,120 --> 00:04:05,970
path manipulation vulnerability like

94
00:04:04,980 --> 00:04:08,100
directory traversal

95
00:04:05,970 --> 00:04:10,620
many of them are solved just because

96
00:04:08,100 --> 00:04:13,799
companies decided to move to s3 and

97
00:04:10,620 --> 00:04:15,720
cloud-based storage the second point is

98
00:04:13,800 --> 00:04:17,910
traffic the traffic is very structured

99
00:04:15,720 --> 00:04:20,579
so it's easier to understand and to

100
00:04:17,910 --> 00:04:23,490
analyze the traffic let's move that the

101
00:04:20,579 --> 00:04:26,280
bad news so first of all there are more

102
00:04:23,490 --> 00:04:28,889
entry points the attack surface is much

103
00:04:26,280 --> 00:04:31,679
it is more exposed data and less

104
00:04:28,889 --> 00:04:33,060
obstruction alleles API is exposed the

105
00:04:31,680 --> 00:04:36,930
underlying implementation of the

106
00:04:33,060 --> 00:04:39,569
application also modern concepts like CA

107
00:04:36,930 --> 00:04:41,729
CD and the fact that you have so many

108
00:04:39,569 --> 00:04:47,580
types of clients it makes it really hard

109
00:04:41,729 --> 00:04:49,979
to keep on track with the API so all of

110
00:04:47,580 --> 00:04:52,318
these changes require a new mindset into

111
00:04:49,979 --> 00:04:54,990
if you're if you are pen gesture and you

112
00:04:52,319 --> 00:04:56,729
test api's it requires you to understand

113
00:04:54,990 --> 00:04:59,759
the new battleground and to to adapt

114
00:04:56,729 --> 00:05:03,060
yourself so just a few words about the

115
00:04:59,759 --> 00:05:05,759
Oh stop turn for api's project the API

116
00:05:03,060 --> 00:05:06,210
project actually follow us we are trying

117
00:05:05,759 --> 00:05:07,770
to differ

118
00:05:06,210 --> 00:05:11,609
we are trying to define the new

119
00:05:07,770 --> 00:05:13,560
battleground application security and we

120
00:05:11,610 --> 00:05:16,529
will talk we have a talk tomorrow

121
00:05:13,560 --> 00:05:19,620
I think it's around noon together with

122
00:05:16,529 --> 00:05:20,759
errors about it's a kickoff for this for

123
00:05:19,620 --> 00:05:23,400
this product you are more than welcome

124
00:05:20,759 --> 00:05:26,039
to to comment to give your feedback and

125
00:05:23,400 --> 00:05:28,469
the main pitfalls that we find today in

126
00:05:26,039 --> 00:05:30,389
API security its first of all access

127
00:05:28,469 --> 00:05:32,610
control problems authorization problems

128
00:05:30,389 --> 00:05:35,610
data filtering and rate limiting

129
00:05:32,610 --> 00:05:36,900
but from a tackle perspective it's it's

130
00:05:35,610 --> 00:05:39,000
really important to understand that

131
00:05:36,900 --> 00:05:40,159
exploitation today requires the better

132
00:05:39,000 --> 00:05:43,310
understanding of the app and

133
00:05:40,159 --> 00:05:47,279
vulnerabilities have become more logical

134
00:05:43,310 --> 00:05:49,409
so what is the new mindset first of all

135
00:05:47,279 --> 00:05:53,250
you have to be more curious about the

136
00:05:49,409 --> 00:05:55,879
API and to understand the data flow you

137
00:05:53,250 --> 00:05:58,620
should get to know the API better by

138
00:05:55,879 --> 00:06:02,580
asking questions about traffic and API

139
00:05:58,620 --> 00:06:06,120
calls and the second point always leave

140
00:06:02,580 --> 00:06:09,210
the traffic and you should do it

141
00:06:06,120 --> 00:06:11,250
yourself of duty stop using GUI in every

142
00:06:09,210 --> 00:06:13,739
task that you do in every step in the a

143
00:06:11,250 --> 00:06:17,189
pen test don't be afraid to generate API

144
00:06:13,740 --> 00:06:18,810
calls from from scratch because many

145
00:06:17,189 --> 00:06:24,089
times you get only the documentation of

146
00:06:18,810 --> 00:06:27,110
the API so how can you be API cares how

147
00:06:24,089 --> 00:06:29,550
can you be curious about the api's so

148
00:06:27,110 --> 00:06:31,259
stop being methodical stop looking for a

149
00:06:29,550 --> 00:06:34,050
simple injection you're in every

150
00:06:31,259 --> 00:06:36,539
parameter it's not a good approach for a

151
00:06:34,050 --> 00:06:38,169
parent testing for API and be more

152
00:06:36,539 --> 00:06:41,889
focused on their data flow

153
00:06:38,169 --> 00:06:44,258
and you can use my my methodology about

154
00:06:41,889 --> 00:06:47,259
the evaluation phases it includes three

155
00:06:44,259 --> 00:06:50,020
different phases about how to evaluate

156
00:06:47,259 --> 00:06:51,639
the api's high level evaluation drill

157
00:06:50,020 --> 00:06:54,128
down information and access control

158
00:06:51,639 --> 00:06:56,529
evaluation they lead you to better

159
00:06:54,129 --> 00:06:58,449
understanding of the app and it helps

160
00:06:56,529 --> 00:07:03,099
you to perform more efficient and faster

161
00:06:58,449 --> 00:07:06,669
a penetration test with verification so

162
00:07:03,099 --> 00:07:08,979
this is an API call from a some type of

163
00:07:06,669 --> 00:07:11,109
fair ride-sharing up and let's try to

164
00:07:08,979 --> 00:07:14,110
understand how can you understand the

165
00:07:11,110 --> 00:07:16,330
API better just from the API call so

166
00:07:14,110 --> 00:07:18,610
first of all you can understand its

167
00:07:16,330 --> 00:07:21,789
breadth base because it is is JSON you

168
00:07:18,610 --> 00:07:23,409
can understand that it has Kyle pooling

169
00:07:21,789 --> 00:07:27,580
feature it allows you to share the ride

170
00:07:23,409 --> 00:07:31,569
with other riders at the drill-down

171
00:07:27,580 --> 00:07:36,099
evaluation and first of all you can find

172
00:07:31,569 --> 00:07:38,949
trips and I'm sorry trips and users are

173
00:07:36,099 --> 00:07:41,169
represented by numbers by integers while

174
00:07:38,949 --> 00:07:44,879
driving impairments represented by

175
00:07:41,169 --> 00:07:48,279
duties which are their random strings

176
00:07:44,879 --> 00:07:50,919
you should ask yourself if is the more

177
00:07:48,279 --> 00:07:53,379
than one version of the API Oh does the

178
00:07:50,919 --> 00:07:55,389
in another very interesting point if you

179
00:07:53,379 --> 00:07:57,550
take a look at the JSON you can see that

180
00:07:55,389 --> 00:07:59,169
the payment options it's not just a

181
00:07:57,550 --> 00:08:02,860
string it's a string in southern an

182
00:07:59,169 --> 00:08:05,080
array so you could you can assume it has

183
00:08:02,860 --> 00:08:07,419
some feature that supports a payment

184
00:08:05,080 --> 00:08:09,849
splitting just just because it's inside

185
00:08:07,419 --> 00:08:14,620
an array and the next step is to find

186
00:08:09,849 --> 00:08:16,089
this splitting the feature you should

187
00:08:14,620 --> 00:08:18,610
also ask yourself if does the API

188
00:08:16,089 --> 00:08:21,189
support soap as well and just asking

189
00:08:18,610 --> 00:08:23,169
more most questions about the API what

190
00:08:21,189 --> 00:08:25,330
can you do it this step is to copy

191
00:08:23,169 --> 00:08:26,649
samples of each object so you have a

192
00:08:25,330 --> 00:08:30,310
better understanding of the relations

193
00:08:26,649 --> 00:08:32,198
between the resources in the API and

194
00:08:30,310 --> 00:08:35,320
also it's a good idea to just cause

195
00:08:32,198 --> 00:08:38,289
their elbows in the api's instead of

196
00:08:35,320 --> 00:08:40,390
sending a number in the trips Justin

197
00:08:38,289 --> 00:08:42,848
like some weird the combination of face

198
00:08:40,390 --> 00:08:47,519
like letters and numbers and to siege

199
00:08:42,849 --> 00:08:47,519
learn how the API handles ellos

200
00:08:47,890 --> 00:08:52,420
in the access control evaluation you can

201
00:08:50,500 --> 00:08:54,550
understand the two types of users in the

202
00:08:52,420 --> 00:08:58,599
app the first one it's drivers and the

203
00:08:54,550 --> 00:09:00,760
second is riders and also users access

204
00:08:58,600 --> 00:09:04,329
to other users which are the core idols

205
00:09:00,760 --> 00:09:05,980
you should ask yourself first of all if

206
00:09:04,329 --> 00:09:07,479
you take a look at the API response you

207
00:09:05,980 --> 00:09:10,149
can see that the name of the choroidal

208
00:09:07,480 --> 00:09:12,310
includes the first name and last name

209
00:09:10,149 --> 00:09:16,990
you should ask yourself if the last name

210
00:09:12,310 --> 00:09:18,310
of the core Idol should be exposed or is

211
00:09:16,990 --> 00:09:21,490
there a difference between a core Ida

212
00:09:18,310 --> 00:09:26,050
that we invited from your application or

213
00:09:21,490 --> 00:09:28,240
just a random Cal pudding core Idol or

214
00:09:26,050 --> 00:09:30,010
can one use it be a rider and a driver

215
00:09:28,240 --> 00:09:31,360
at the same time what would happen with

216
00:09:30,010 --> 00:09:34,839
the access control mechanism in this

217
00:09:31,360 --> 00:09:38,019
case or does the API support cookies

218
00:09:34,839 --> 00:09:40,060
authorization as well what can you do at

219
00:09:38,019 --> 00:09:42,640
this point is to identify the session

220
00:09:40,060 --> 00:09:44,469
label the session label is just a term

221
00:09:42,640 --> 00:09:46,360
that I made up but it's basically a

222
00:09:44,470 --> 00:09:49,240
generic name to describe every string

223
00:09:46,360 --> 00:09:51,490
that is used by the API to identify the

224
00:09:49,240 --> 00:09:51,970
user it might be a session ID in the

225
00:09:51,490 --> 00:09:54,220
cookies

226
00:09:51,970 --> 00:10:01,959
it might be authorization header or any

227
00:09:54,220 --> 00:10:03,820
type of token so after we understood it

228
00:10:01,959 --> 00:10:05,729
there is a new battleground and it

229
00:10:03,820 --> 00:10:08,290
requires a new mindset let's talk about

230
00:10:05,730 --> 00:10:10,149
how can you handful api's

231
00:10:08,290 --> 00:10:12,430
vulnerabilities the most common

232
00:10:10,149 --> 00:10:14,290
vulnerability today is a broken object

233
00:10:12,430 --> 00:10:17,649
level access control you probably know

234
00:10:14,290 --> 00:10:20,260
this vulnerability as either we decided

235
00:10:17,649 --> 00:10:24,070
to change the name because of many

236
00:10:20,260 --> 00:10:25,839
reasons I can elaborate it's a very

237
00:10:24,070 --> 00:10:28,360
simple vulnerability it allows one user

238
00:10:25,839 --> 00:10:30,730
to access an object that should be

239
00:10:28,360 --> 00:10:32,440
accessed only by other users but it

240
00:10:30,730 --> 00:10:35,290
should not have access to this object so

241
00:10:32,440 --> 00:10:38,199
for example you have an endpoint of down

242
00:10:35,290 --> 00:10:40,360
document and this API call to this

243
00:10:38,199 --> 00:10:43,269
endpoint contains a document ID

244
00:10:40,360 --> 00:10:46,029
parameters and if you just a legit user

245
00:10:43,269 --> 00:10:48,220
you would ask for your own documents for

246
00:10:46,029 --> 00:10:50,350
example 102 this is a document that

247
00:10:48,220 --> 00:10:52,570
belongs to me and if I change the

248
00:10:50,350 --> 00:10:56,690
document ID in the request I would be

249
00:10:52,570 --> 00:10:59,360
able to access documents of other users

250
00:10:56,690 --> 00:11:02,830
it's a very severe vulnerability they

251
00:10:59,360 --> 00:11:05,750
find it in every almost every API today

252
00:11:02,830 --> 00:11:07,730
and why is it so severe and it's so

253
00:11:05,750 --> 00:11:10,190
common in API is like the top one

254
00:11:07,730 --> 00:11:12,740
vulnerability because if you think about

255
00:11:10,190 --> 00:11:16,670
it it's really hard to implement a

256
00:11:12,740 --> 00:11:18,650
proper access control mechanism you

257
00:11:16,670 --> 00:11:21,890
should call like access control checks

258
00:11:18,650 --> 00:11:23,090
in objects almost in every function that

259
00:11:21,890 --> 00:11:26,590
you implement that access to that

260
00:11:23,090 --> 00:11:30,580
database by using input from the client

261
00:11:26,590 --> 00:11:34,370
it's a very spread out mechanism and

262
00:11:30,580 --> 00:11:37,100
some tips about how to find a idols and

263
00:11:34,370 --> 00:11:39,980
how to exploit them so first of all you

264
00:11:37,100 --> 00:11:44,900
should use the session label this like

265
00:11:39,980 --> 00:11:47,270
this token or this session ID that

266
00:11:44,900 --> 00:11:51,319
identifies the user in the app you can

267
00:11:47,270 --> 00:11:56,480
just log in as one user and have a short

268
00:11:51,320 --> 00:11:58,880
video just explain it so this is the OS

269
00:11:56,480 --> 00:12:02,650
juice shop it's a great app that allows

270
00:11:58,880 --> 00:12:05,390
you to practice API vulnerabilities and

271
00:12:02,650 --> 00:12:07,400
have two session labels the first one is

272
00:12:05,390 --> 00:12:10,910
a user one and the second one is for

273
00:12:07,400 --> 00:12:14,660
user two I'm logged in as user one adapt

274
00:12:10,910 --> 00:12:20,600
and I'm performing some some actions on

275
00:12:14,660 --> 00:12:23,569
the app and then I go to fiddler I found

276
00:12:20,600 --> 00:12:26,600
some API call I'm not sure if you can

277
00:12:23,570 --> 00:12:30,380
see but it contains an ID in the request

278
00:12:26,600 --> 00:12:33,080
a basket slash four and instead of you

279
00:12:30,380 --> 00:12:35,750
know trying to call the same API call

280
00:12:33,080 --> 00:12:38,420
from another client after like some GUI

281
00:12:35,750 --> 00:12:41,810
after like some GUI interaction you can

282
00:12:38,420 --> 00:12:43,880
just duplicate the request remove the

283
00:12:41,810 --> 00:12:48,859
session label and replace it with the

284
00:12:43,880 --> 00:12:50,180
session level of user two and then you

285
00:12:48,860 --> 00:12:52,820
can easily compare between the two

286
00:12:50,180 --> 00:12:56,719
responses and to see if it's the same if

287
00:12:52,820 --> 00:12:59,510
you decide the same data it makes it

288
00:12:56,720 --> 00:13:03,380
really easier to enter fester to define

289
00:12:59,510 --> 00:13:05,750
dials you should ask yourself if does

290
00:13:03,380 --> 00:13:07,530
the object have multiple representations

291
00:13:05,750 --> 00:13:10,500
like good and numbers

292
00:13:07,530 --> 00:13:12,689
and if you got some a full of excel-like

293
00:13:10,500 --> 00:13:15,450
sedation level you should try to

294
00:13:12,690 --> 00:13:17,730
enumerate small IDs many in many cases

295
00:13:15,450 --> 00:13:20,130
the access control mechanisms are

296
00:13:17,730 --> 00:13:24,530
implemented in some weed way and some

297
00:13:20,130 --> 00:13:24,530
objects available and some object or not

298
00:13:25,820 --> 00:13:31,290
so the second rule nobility which is

299
00:13:28,740 --> 00:13:33,840
kind of unique to api's it's the mass

300
00:13:31,290 --> 00:13:35,189
assignment a are you familiar with mass

301
00:13:33,840 --> 00:13:40,650
assignment who knows what it's

302
00:13:35,190 --> 00:13:43,140
assignment in the group audience okay so

303
00:13:40,650 --> 00:13:46,079
it's one of the vulnerabilities I find

304
00:13:43,140 --> 00:13:47,580
hard to explain but this line of code

305
00:13:46,080 --> 00:13:52,110
can I help you to understand basically

306
00:13:47,580 --> 00:13:54,780
it's when the developer decides to use a

307
00:13:52,110 --> 00:13:59,010
function that takes input from the

308
00:13:54,780 --> 00:14:01,170
client like the pound's user it came

309
00:13:59,010 --> 00:14:04,530
directly from the get parameter and it

310
00:14:01,170 --> 00:14:07,760
updates an object in the database just

311
00:14:04,530 --> 00:14:10,589
based on this input from the client and

312
00:14:07,760 --> 00:14:13,740
in many cases it allows the user to

313
00:14:10,590 --> 00:14:15,630
update properties inside these objects

314
00:14:13,740 --> 00:14:18,180
you should not have have accessed you

315
00:14:15,630 --> 00:14:21,890
and modern frameworks encourage

316
00:14:18,180 --> 00:14:24,239
developers to use these family functions

317
00:14:21,890 --> 00:14:27,930
it's really it's really common to find

318
00:14:24,240 --> 00:14:32,070
them in an API so let's assume that we

319
00:14:27,930 --> 00:14:36,300
have this endpoint to update a specific

320
00:14:32,070 --> 00:14:38,760
video file on the API and we found is

321
00:14:36,300 --> 00:14:40,709
vulnerable to I too must assignment it

322
00:14:38,760 --> 00:14:44,100
means that we can update every property

323
00:14:40,710 --> 00:14:46,680
of this object of this video object so

324
00:14:44,100 --> 00:14:48,750
it's not so easy to understand how to

325
00:14:46,680 --> 00:14:50,300
exploit the masked assignment because

326
00:14:48,750 --> 00:14:54,570
there are many properties that you can

327
00:14:50,300 --> 00:14:56,099
change in the object and in traditional

328
00:14:54,570 --> 00:14:59,100
application it was really hard to

329
00:14:56,100 --> 00:15:01,440
exploit math assignment because you need

330
00:14:59,100 --> 00:15:03,090
to some internal data about the

331
00:15:01,440 --> 00:15:07,410
properties and the properties names in

332
00:15:03,090 --> 00:15:09,600
the database but today in AP is you can

333
00:15:07,410 --> 00:15:12,390
just find another endpoint this exposes

334
00:15:09,600 --> 00:15:14,730
this data about this object in this case

335
00:15:12,390 --> 00:15:17,850
it's just a video file and you can see

336
00:15:14,730 --> 00:15:19,340
that this object this endpoint shows you

337
00:15:17,850 --> 00:15:22,400
that

338
00:15:19,340 --> 00:15:24,620
video file has a parameter of conversion

339
00:15:22,400 --> 00:15:27,980
powers and it looks like a part of a

340
00:15:24,620 --> 00:15:30,470
short command and because I found this I

341
00:15:27,980 --> 00:15:32,779
could exploit the math assignment

342
00:15:30,470 --> 00:15:35,330
feature to call to cause shell injection

343
00:15:32,779 --> 00:15:38,000
and as you can see I just change the

344
00:15:35,330 --> 00:15:39,770
conversion params it's it's some

345
00:15:38,000 --> 00:15:41,810
internal property that should be used

346
00:15:39,770 --> 00:15:45,620
only by the API only by the backend

347
00:15:41,810 --> 00:15:48,640
server and to update the property by

348
00:15:45,620 --> 00:15:51,560
using the massive sign vulnerability you

349
00:15:48,640 --> 00:15:54,380
should try to exploit math assignment

350
00:15:51,560 --> 00:15:58,189
with past oh and also with Putin patch

351
00:15:54,380 --> 00:16:00,950
and it's a good idea to use mass

352
00:15:58,190 --> 00:16:04,190
assignment to bypass other security

353
00:16:00,950 --> 00:16:08,660
mechanisms a a really cool example that

354
00:16:04,190 --> 00:16:11,390
I like to show ready to api's it's in a

355
00:16:08,660 --> 00:16:12,920
situation that you have to at you have

356
00:16:11,390 --> 00:16:14,750
one application server that runs two

357
00:16:12,920 --> 00:16:16,939
applications one of them is a legacy

358
00:16:14,750 --> 00:16:19,460
multi page application and the second

359
00:16:16,940 --> 00:16:23,060
one is a mobile application which is a

360
00:16:19,460 --> 00:16:25,130
mobile app a mobile API and the mobile

361
00:16:23,060 --> 00:16:27,770
API uses the authorization header while

362
00:16:25,130 --> 00:16:30,650
the legacy application uses cookie based

363
00:16:27,770 --> 00:16:32,720
authentication and the interesting part

364
00:16:30,650 --> 00:16:36,050
that they share the same the same

365
00:16:32,720 --> 00:16:37,940
authentication configuration so it means

366
00:16:36,050 --> 00:16:40,240
that API supports cookie based

367
00:16:37,940 --> 00:16:43,970
authentication and it usually leads to

368
00:16:40,240 --> 00:16:46,490
CSRF because if the developers choose to

369
00:16:43,970 --> 00:16:48,860
implement a authorization header

370
00:16:46,490 --> 00:16:51,470
authentication is based on the header

371
00:16:48,860 --> 00:16:56,089
they usually don't implement CSRF

372
00:16:51,470 --> 00:16:58,160
protections so ok so we have a CSRF

373
00:16:56,089 --> 00:17:02,390
let's exploit let's exploit it in order

374
00:16:58,160 --> 00:17:05,689
to change the user's email so I tried to

375
00:17:02,390 --> 00:17:09,230
use the endpoint of API flash v1 /

376
00:17:05,689 --> 00:17:11,720
update mo to update user email and then

377
00:17:09,230 --> 00:17:14,929
to reset his password but it requires me

378
00:17:11,720 --> 00:17:18,800
to enter the old password which is it's

379
00:17:14,929 --> 00:17:21,530
sad because I couldn't exploit it anyhow

380
00:17:18,800 --> 00:17:23,959
the endpoint of poot / mobile flash API

381
00:17:21,530 --> 00:17:26,959
slash user slash me that should be is

382
00:17:23,959 --> 00:17:29,390
just to to update a basic data about the

383
00:17:26,959 --> 00:17:30,790
user like first name and last name it's

384
00:17:29,390 --> 00:17:34,090
vulnerable to mass assignment

385
00:17:30,790 --> 00:17:37,659
so it means that I can I can update

386
00:17:34,090 --> 00:17:40,689
every property of the user so I actually

387
00:17:37,660 --> 00:17:43,090
can update the user email using the math

388
00:17:40,690 --> 00:17:45,340
assignment so the expectation would be

389
00:17:43,090 --> 00:17:47,320
to target a victim who uses the old

390
00:17:45,340 --> 00:17:50,110
applications it means that the cookie L

391
00:17:47,320 --> 00:17:52,809
stood in his browser to create a

392
00:17:50,110 --> 00:17:56,110
malicious HTML page and to exploit the

393
00:17:52,809 --> 00:17:57,970
CSRF and inside the CSRF payload I can

394
00:17:56,110 --> 00:18:01,449
use I can exploit the mass assignment in

395
00:17:57,970 --> 00:18:03,400
order to to update the users email I can

396
00:18:01,450 --> 00:18:06,370
send it to the victim and changing his

397
00:18:03,400 --> 00:18:08,590
MO and to his which is password it's a

398
00:18:06,370 --> 00:18:09,879
very common from the built-in api's it's

399
00:18:08,590 --> 00:18:11,770
a combination of CS or F and mass

400
00:18:09,880 --> 00:18:14,679
assignment and it's a good example how

401
00:18:11,770 --> 00:18:17,110
can you bypass this mechanism of enter

402
00:18:14,679 --> 00:18:21,910
old password in order to reset the users

403
00:18:17,110 --> 00:18:24,370
password another vulnerability which is

404
00:18:21,910 --> 00:18:26,230
very common API if it's improper data

405
00:18:24,370 --> 00:18:28,030
filtering the first part of this

406
00:18:26,230 --> 00:18:31,419
vulnerability which is very common to

407
00:18:28,030 --> 00:18:32,559
see the api's it's a client-side data

408
00:18:31,419 --> 00:18:35,380
filtering it's a very simple

409
00:18:32,559 --> 00:18:38,168
vulnerability basically the API exposes

410
00:18:35,380 --> 00:18:42,549
by design sensitive data about the users

411
00:18:38,169 --> 00:18:45,280
that the API should not expose so we

412
00:18:42,549 --> 00:18:47,799
have a mobile app it's called super safe

413
00:18:45,280 --> 00:18:50,860
app very promising name and it has a

414
00:18:47,799 --> 00:18:53,260
feature of viewing a profile of one user

415
00:18:50,860 --> 00:18:56,770
in this case it's Bob and you can find

416
00:18:53,260 --> 00:18:59,830
the public data about Bob like the fact

417
00:18:56,770 --> 00:19:01,150
he is a minion and his hobbies but if

418
00:18:59,830 --> 00:19:03,309
you take a look the traffic between the

419
00:19:01,150 --> 00:19:05,980
client and the API you can see something

420
00:19:03,309 --> 00:19:08,080
very interesting the API call to view on

421
00:19:05,980 --> 00:19:10,750
slash user slash profile slash seven one

422
00:19:08,080 --> 00:19:13,270
seven which is the idea of bob contains

423
00:19:10,750 --> 00:19:14,860
all the public data like user ID and the

424
00:19:13,270 --> 00:19:16,809
profile picture which is not very

425
00:19:14,860 --> 00:19:18,820
interesting but also the address is the

426
00:19:16,809 --> 00:19:23,379
address of bob which is PII is a very

427
00:19:18,820 --> 00:19:24,928
sensitive data so what happens is the

428
00:19:23,380 --> 00:19:27,549
developers choose to filter the data

429
00:19:24,929 --> 00:19:30,790
before it's showing to the club to the

430
00:19:27,549 --> 00:19:33,070
user itself so the mobile app would

431
00:19:30,790 --> 00:19:36,909
filter this data before showing it the

432
00:19:33,070 --> 00:19:38,770
the profile of Bob it's a very it's a

433
00:19:36,910 --> 00:19:39,950
very good idea to filter a sensitive

434
00:19:38,770 --> 00:19:41,539
data in the client side

435
00:19:39,950 --> 00:19:45,730
not a good approach from security

436
00:19:41,539 --> 00:19:49,760
perspective and it's very common api's

437
00:19:45,730 --> 00:19:52,010
how can you find this one ability first

438
00:19:49,760 --> 00:19:56,000
of all it be you should be curious about

439
00:19:52,010 --> 00:19:58,580
the API responses and to look for all

440
00:19:56,000 --> 00:20:01,340
the possible ways to access the specific

441
00:19:58,580 --> 00:20:03,949
resource so let's say that we have some

442
00:20:01,340 --> 00:20:07,220
feature that allows user to comment on

443
00:20:03,950 --> 00:20:09,200
articles in the website so if you take a

444
00:20:07,220 --> 00:20:12,380
look if you take a look here at this

445
00:20:09,200 --> 00:20:15,169
endpoint you can see that this endpoint

446
00:20:12,380 --> 00:20:18,260
exposes just basic data about the people

447
00:20:15,169 --> 00:20:20,779
who commented on this article like first

448
00:20:18,260 --> 00:20:23,360
name and the content of the comment but

449
00:20:20,779 --> 00:20:26,750
if you used the export feature it allows

450
00:20:23,360 --> 00:20:30,139
you to export an article you can see it

451
00:20:26,750 --> 00:20:32,380
returns more data including the email of

452
00:20:30,139 --> 00:20:32,379
the user

453
00:20:36,670 --> 00:20:43,120
so let's talk a little bit how can we

454
00:20:38,950 --> 00:20:45,970
expand the attack surface in a api's so

455
00:20:43,120 --> 00:20:48,159
many times when you test an API you got

456
00:20:45,970 --> 00:20:51,610
into a dead end and you don't really

457
00:20:48,160 --> 00:20:53,740
know how to proceed so the first thing

458
00:20:51,610 --> 00:20:55,600
that you can do is to find more

459
00:20:53,740 --> 00:20:59,290
endpoints how to communicate with the

460
00:20:55,600 --> 00:21:01,270
API is more entry points and I would

461
00:20:59,290 --> 00:21:04,420
like to see to say that the two types of

462
00:21:01,270 --> 00:21:06,280
endpoints the wet endpoints it means

463
00:21:04,420 --> 00:21:10,330
that you have an active time that can

464
00:21:06,280 --> 00:21:13,780
communicate with the API and you should

465
00:21:10,330 --> 00:21:15,970
find as much as possible you should say

466
00:21:13,780 --> 00:21:17,170
find as much as possible clients and

467
00:21:15,970 --> 00:21:19,870
different types of clients that

468
00:21:17,170 --> 00:21:21,550
communicate with the API in order to

469
00:21:19,870 --> 00:21:22,959
find more wet endpoints that you can

470
00:21:21,550 --> 00:21:26,800
actually see the traffic between the

471
00:21:22,960 --> 00:21:30,910
clients and the API you can use

472
00:21:26,800 --> 00:21:33,250
different clients for the API a mobile

473
00:21:30,910 --> 00:21:35,710
or web in the very interesting point

474
00:21:33,250 --> 00:21:37,720
it's many companies large companies many

475
00:21:35,710 --> 00:21:40,690
times have a different web application

476
00:21:37,720 --> 00:21:43,390
for mobile so if you access the API if

477
00:21:40,690 --> 00:21:44,830
you access the application from a

478
00:21:43,390 --> 00:21:47,920
browser on a mobile it would be a

479
00:21:44,830 --> 00:21:49,960
different application you can use old

480
00:21:47,920 --> 00:21:52,030
versions of the application if if we

481
00:21:49,960 --> 00:21:53,920
talk about APK if you talk about Android

482
00:21:52,030 --> 00:21:55,660
you can use the APK pure in order to

483
00:21:53,920 --> 00:21:59,350
download all the versions of the android

484
00:21:55,660 --> 00:22:00,880
apps or elk I've come to find all Java

485
00:21:59,350 --> 00:22:05,500
scripts of the application of the web

486
00:22:00,880 --> 00:22:07,930
application and there is the second type

487
00:22:05,500 --> 00:22:10,150
of endpoints I would like to call them a

488
00:22:07,930 --> 00:22:11,920
drying point if you can see only the

489
00:22:10,150 --> 00:22:13,510
documentation and you can't really see

490
00:22:11,920 --> 00:22:15,160
the traffic between the client you don't

491
00:22:13,510 --> 00:22:16,960
have an active time that communicates

492
00:22:15,160 --> 00:22:20,590
with these endpoints so we can assume

493
00:22:16,960 --> 00:22:24,750
how the input should look like you can

494
00:22:20,590 --> 00:22:28,179
use tools like J's can or just scan the

495
00:22:24,750 --> 00:22:31,510
strings inside the APK files and the IP

496
00:22:28,180 --> 00:22:35,050
ipi files the clients F files in order

497
00:22:31,510 --> 00:22:36,700
to find more dry endpoints it's not so

498
00:22:35,050 --> 00:22:38,860
easy to to work with dry endpoints

499
00:22:36,700 --> 00:22:41,380
because many times don't really know or

500
00:22:38,860 --> 00:22:44,080
understand which inputs should be sent

501
00:22:41,380 --> 00:22:46,000
to these endpoints but sometimes the

502
00:22:44,080 --> 00:22:48,429
server would return little arrows it

503
00:22:46,000 --> 00:22:49,630
allows you to to understand what should

504
00:22:48,430 --> 00:22:52,460
be sent

505
00:22:49,630 --> 00:22:55,309
also you can look forward for non

506
00:22:52,460 --> 00:22:58,059
documentation five like swaggy JSON API

507
00:22:55,309 --> 00:23:04,009
dogs so applications or to a point

508
00:22:58,059 --> 00:23:05,899
Waddell and another good idea something

509
00:23:04,009 --> 00:23:08,690
that you can do is to use website like

510
00:23:05,899 --> 00:23:11,570
by with total and the census just to

511
00:23:08,690 --> 00:23:15,740
find more hosts from the same domain and

512
00:23:11,570 --> 00:23:18,439
the Tron the same API what expound in

513
00:23:15,740 --> 00:23:21,379
many pencils that if two different hosts

514
00:23:18,440 --> 00:23:23,299
around the semi API many times they run

515
00:23:21,379 --> 00:23:26,509
with different configuration or maybe

516
00:23:23,299 --> 00:23:30,158
with the older version so sometimes if

517
00:23:26,509 --> 00:23:32,750
you use another in the Facebook for like

518
00:23:30,159 --> 00:23:35,419
like a few years ago some researchers

519
00:23:32,750 --> 00:23:37,309
found something in Facebook and it

520
00:23:35,419 --> 00:23:39,500
allowed him to perform brute force and

521
00:23:37,309 --> 00:23:41,960
username and password the fuses using

522
00:23:39,500 --> 00:23:43,909
the Samba API because in the better API

523
00:23:41,960 --> 00:23:47,200
they didn't implement the the brute

524
00:23:43,909 --> 00:23:50,600
force protection so many times API is I

525
00:23:47,200 --> 00:23:53,750
mean host like if you have some better

526
00:23:50,600 --> 00:23:55,610
QA or staging hast the Tron the same API

527
00:23:53,750 --> 00:23:56,840
sometimes they don't run the same

528
00:23:55,610 --> 00:24:01,699
security configuration or the same

529
00:23:56,840 --> 00:24:03,199
security mechanisms and it would be a

530
00:24:01,700 --> 00:24:06,620
good idea to always look for the most

531
00:24:03,200 --> 00:24:08,090
niche features so if it's the main the

532
00:24:06,620 --> 00:24:09,979
main page of the app many times it will

533
00:24:08,090 --> 00:24:11,809
not be vulnerable to two common

534
00:24:09,980 --> 00:24:13,279
vulnerabilities because because of bug

535
00:24:11,809 --> 00:24:16,158
bounties or because the developers

536
00:24:13,279 --> 00:24:20,990
thought about that but developers tends

537
00:24:16,159 --> 00:24:23,149
to to put less resources to think about

538
00:24:20,990 --> 00:24:24,950
let about security when it comes to some

539
00:24:23,149 --> 00:24:28,449
niche feature so you always try to look

540
00:24:24,950 --> 00:24:30,500
for these niche features and also also

541
00:24:28,450 --> 00:24:32,750
don't forget different different

542
00:24:30,500 --> 00:24:34,580
protocols it means many times it means

543
00:24:32,750 --> 00:24:36,350
different implementations so a model

544
00:24:34,580 --> 00:24:38,720
application might expose so

545
00:24:36,350 --> 00:24:42,289
elasticsearch graph QL and WebSockets

546
00:24:38,720 --> 00:24:43,220
and at the same time and you should test

547
00:24:42,289 --> 00:24:45,590
each one of them is a different

548
00:24:43,220 --> 00:24:47,389
application don't assume that they

549
00:24:45,590 --> 00:24:51,590
implement the same security mechanisms

550
00:24:47,389 --> 00:24:52,668
and also this is like a short list of

551
00:24:51,590 --> 00:24:57,080
interesting features

552
00:24:52,669 --> 00:24:59,090
it's tend to be vulnerable to do some

553
00:24:57,080 --> 00:25:00,320
types of attacks like export mechanism

554
00:24:59,090 --> 00:25:02,000
user management

555
00:25:00,320 --> 00:25:06,860
some users or custom views of the

556
00:25:02,000 --> 00:25:09,700
dashboard mm I would like to share with

557
00:25:06,860 --> 00:25:09,699
you a quick example

558
00:25:21,499 --> 00:25:27,059
so let's let's see a quick example for a

559
00:25:24,359 --> 00:25:29,519
real ap attack it was one of the biggest

560
00:25:27,059 --> 00:25:30,928
food delivery applications and the

561
00:25:29,519 --> 00:25:33,809
security team had done pretty good job

562
00:25:30,929 --> 00:25:35,070
with the API I hadn't found it something

563
00:25:33,809 --> 00:25:36,779
interesting for a couple of days and it

564
00:25:35,070 --> 00:25:39,019
was pretty sad about that I really

565
00:25:36,779 --> 00:25:41,850
wanted to find something interesting so

566
00:25:39,019 --> 00:25:44,100
the attack steps were to download an old

567
00:25:41,850 --> 00:25:45,869
version of the app and I found a really

568
00:25:44,100 --> 00:25:48,418
neat feature it was hidden deep inside

569
00:25:45,869 --> 00:25:51,509
the GUI it was to update the users phone

570
00:25:48,419 --> 00:25:54,210
number it was only available in the old

571
00:25:51,509 --> 00:25:56,279
version of the of the app and this

572
00:25:54,210 --> 00:25:59,429
process includes two steps the first one

573
00:25:56,279 --> 00:26:01,980
was to get confirmation code for the new

574
00:25:59,429 --> 00:26:03,330
number it was vulnerable to mask to a

575
00:26:01,980 --> 00:26:07,019
idle sorry

576
00:26:03,330 --> 00:26:10,678
and then using this code I could I

577
00:26:07,019 --> 00:26:11,970
should verify with these endpoints that

578
00:26:10,679 --> 00:26:15,389
the verify update number

579
00:26:11,970 --> 00:26:18,929
I should have sent the confirmation code

580
00:26:15,389 --> 00:26:22,529
I got using the SMS token in order to

581
00:26:18,929 --> 00:26:23,879
complete the process so it was an

582
00:26:22,529 --> 00:26:25,559
interesting vector but I couldn't really

583
00:26:23,879 --> 00:26:26,939
update and other users phone number

584
00:26:25,559 --> 00:26:31,080
because of the second step it wasn't

585
00:26:26,940 --> 00:26:32,580
vulnerable to either so after after some

586
00:26:31,080 --> 00:26:35,730
research I found something very

587
00:26:32,580 --> 00:26:39,119
interesting the confirmation code token

588
00:26:35,730 --> 00:26:41,129
I got in the SMS if from the SMS could

589
00:26:39,119 --> 00:26:42,959
be used for the login mechanism we found

590
00:26:41,129 --> 00:26:45,059
some endpoint that allowed me to to

591
00:26:42,960 --> 00:26:48,090
login with the code in with an SMS a

592
00:26:45,059 --> 00:26:50,100
code and I could use the code from the

593
00:26:48,090 --> 00:26:55,350
first feature to login with the second

594
00:26:50,100 --> 00:26:57,658
feature but the bad news is that the

595
00:26:55,350 --> 00:26:59,369
endpoint verifies the device good it was

596
00:26:57,659 --> 00:27:01,499
some a header that was sent together

597
00:26:59,369 --> 00:27:03,809
with every API call it means there is a

598
00:27:01,499 --> 00:27:06,090
double verification I couldn't really

599
00:27:03,809 --> 00:27:07,379
exploit it but if you think about it it

600
00:27:06,090 --> 00:27:10,619
sounds like a feature that might have

601
00:27:07,379 --> 00:27:13,678
been added recently to the API and so

602
00:27:10,619 --> 00:27:15,749
what I did I just scanned all the

603
00:27:13,679 --> 00:27:19,980
endpoints with the same URL structure I

604
00:27:15,749 --> 00:27:23,039
just change all the like from V 0.02

605
00:27:19,980 --> 00:27:25,859
point 5 point 5 a oh sorry

606
00:27:23,039 --> 00:27:28,649
et URL and after I run the script I

607
00:27:25,859 --> 00:27:30,840
found that version 2.7 was exposed and

608
00:27:28,649 --> 00:27:33,159
didn't verify the device ID it was a

609
00:27:30,840 --> 00:27:36,220
very simple way to bypass this neck and

610
00:27:33,160 --> 00:27:38,730
and it means full account take over for

611
00:27:36,220 --> 00:27:42,670
this food delivery up

612
00:27:38,730 --> 00:27:45,550
this is the last slide and I just like

613
00:27:42,670 --> 00:27:48,250
to I think it's a good example how API

614
00:27:45,550 --> 00:27:50,649
is vulnerabilities require you to turn

615
00:27:48,250 --> 00:27:52,480
the stand the logic of the API it's not

616
00:27:50,650 --> 00:27:55,090
so easy to find it like good API from

617
00:27:52,480 --> 00:27:56,980
relatives but if you use the attack

618
00:27:55,090 --> 00:27:59,020
vectors like the known attack vectors

619
00:27:56,980 --> 00:28:02,550
for API and you understand logic if the

620
00:27:59,020 --> 00:28:02,550
API you can find very interesting stuff

621
00:28:04,020 --> 00:28:08,280
any questions any thoughts

622
00:28:14,070 --> 00:28:16,600
[Applause]

623
00:28:15,310 --> 00:28:19,470
[Music]

624
00:28:16,600 --> 00:28:19,469
[Applause]

