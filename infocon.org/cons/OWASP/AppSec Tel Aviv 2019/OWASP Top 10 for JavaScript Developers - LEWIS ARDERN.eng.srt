1
00:00:01,429 --> 00:00:06,029
wonderful okay I'll get started so hi

2
00:00:04,080 --> 00:00:07,798
everyone today I'm going to talk to you

3
00:00:06,029 --> 00:00:10,099
about the OWASP top 10 for JavaScript

4
00:00:07,799 --> 00:00:17,250
developers and see if I can find my

5
00:00:10,099 --> 00:00:19,080
mouse I'll just use this then okay so

6
00:00:17,250 --> 00:00:20,939
just a little bit about myself I'm a

7
00:00:19,080 --> 00:00:23,038
senior security consultant at synopsis

8
00:00:20,939 --> 00:00:24,510
it used to be with digital but we've got

9
00:00:23,039 --> 00:00:25,529
acquired by synopsis and I've been there

10
00:00:24,510 --> 00:00:28,170
for about four years

11
00:00:25,529 --> 00:00:30,119
I'm also the angular one of the angular

12
00:00:28,170 --> 00:00:32,279
San Francisco organizers where we do

13
00:00:30,119 --> 00:00:35,130
monthly meetups around javascript

14
00:00:32,279 --> 00:00:37,370
typescript and specifically angular and

15
00:00:35,130 --> 00:00:39,600
I also did a degree in ethical hacking

16
00:00:37,370 --> 00:00:42,209
where I founded the lead ethical hacking

17
00:00:39,600 --> 00:00:44,010
Society and the reason why I'm talking

18
00:00:42,210 --> 00:00:44,789
to you today is because I'm a JavaScript

19
00:00:44,010 --> 00:00:47,219
enthusiast

20
00:00:44,789 --> 00:00:49,079
I love JavaScript I'm sure a few people

21
00:00:47,219 --> 00:00:51,270
in the room also agree with that but a

22
00:00:49,079 --> 00:00:59,100
lot of people tend to hate JavaScript

23
00:00:51,270 --> 00:01:01,260
but I am NOT one of those people so what

24
00:00:59,100 --> 00:01:03,329
is the OWASP top ten most of you know

25
00:01:01,260 --> 00:01:05,580
what the OWASP top 10 is but the OWASP

26
00:01:03,329 --> 00:01:08,100
top 10 is a powerful awareness document

27
00:01:05,580 --> 00:01:10,229
for web application security and the

28
00:01:08,100 --> 00:01:12,298
OWASP top 10 represents a broad

29
00:01:10,229 --> 00:01:14,549
consensus about what most critical where

30
00:01:12,299 --> 00:01:16,830
application flaws are and that exists in

31
00:01:14,549 --> 00:01:18,299
web applications so the reason why

32
00:01:16,830 --> 00:01:20,789
there's multiple colors is because the

33
00:01:18,299 --> 00:01:23,310
items in green are data-driven the items

34
00:01:20,790 --> 00:01:25,320
in orange our community chosen and the

35
00:01:23,310 --> 00:01:28,579
items in red are ever substantially new

36
00:01:25,320 --> 00:01:31,258
or changed since the olaf's 2013 version

37
00:01:28,579 --> 00:01:33,059
so what I intend to do today is try and

38
00:01:31,259 --> 00:01:35,070
cover as much as I can in 30 minutes on

39
00:01:33,060 --> 00:01:37,740
the OWASP top 10 and how it relates to

40
00:01:35,070 --> 00:01:40,139
JavaScript and I can't cover it all but

41
00:01:37,740 --> 00:01:42,060
there is an extended slide deck online

42
00:01:40,140 --> 00:01:43,409
after this presentation with lots more

43
00:01:42,060 --> 00:01:48,720
demos that you can go through at your

44
00:01:43,409 --> 00:01:50,700
own leisure so let's talk about a one

45
00:01:48,720 --> 00:01:54,479
injection first the dangers of mixing

46
00:01:50,700 --> 00:01:56,520
data and code so the main issue that is

47
00:01:54,479 --> 00:01:59,310
caused through injection is when we mix

48
00:01:56,520 --> 00:02:01,670
data and code where user input is

49
00:01:59,310 --> 00:02:03,869
treated part of the code context itself

50
00:02:01,670 --> 00:02:05,340
there are many types of injection

51
00:02:03,869 --> 00:02:08,848
attacks so there's like sequel injection

52
00:02:05,340 --> 00:02:10,780
no sequel injection log injection and

53
00:02:08,848 --> 00:02:12,518
also command injection but

54
00:02:10,780 --> 00:02:13,870
the list goes on and I don't want to

55
00:02:12,519 --> 00:02:15,430
bore you to death because most of you

56
00:02:13,870 --> 00:02:18,400
know the different kind of injection

57
00:02:15,430 --> 00:02:20,319
attacks that exist in common

58
00:02:18,400 --> 00:02:22,389
applications but let's take a look at

59
00:02:20,319 --> 00:02:24,458
two that you might see when you're

60
00:02:22,389 --> 00:02:28,959
looking at JavaScript or node

61
00:02:24,459 --> 00:02:30,579
applications in general so the first

62
00:02:28,959 --> 00:02:33,250
thing that I want to talk about is no

63
00:02:30,579 --> 00:02:35,230
secret injection and the official Mongo

64
00:02:33,250 --> 00:02:37,629
documentation that it's not vulnerable

65
00:02:35,230 --> 00:02:40,480
to the traditional sequel injection

66
00:02:37,629 --> 00:02:42,969
attacks because objects are represented

67
00:02:40,480 --> 00:02:45,159
in vs on query or B some queries are

68
00:02:42,969 --> 00:02:46,540
represented in beasts on objects and

69
00:02:45,159 --> 00:02:49,239
most it might not be vulnerable to

70
00:02:46,540 --> 00:02:51,370
traditional sequel injection it's still

71
00:02:49,239 --> 00:02:54,280
vulnerable to injection attacks if user

72
00:02:51,370 --> 00:02:57,579
input is directly included in a and

73
00:02:54,280 --> 00:03:00,639
collection method so one example of this

74
00:02:57,579 --> 00:03:02,349
might be that you have a find one method

75
00:03:00,639 --> 00:03:04,449
collection method and you're trying to

76
00:03:02,349 --> 00:03:07,659
retrieve a user from the database and

77
00:03:04,449 --> 00:03:10,060
this can be abused if you can include a

78
00:03:07,659 --> 00:03:11,739
Mongo query selector such as Dollar and

79
00:03:10,060 --> 00:03:13,510
E which is short for not equals to if

80
00:03:11,739 --> 00:03:15,609
you can include that or dollar GT to

81
00:03:13,510 --> 00:03:17,228
something that's greater than you can

82
00:03:15,609 --> 00:03:21,250
use this to abuse and login to the

83
00:03:17,229 --> 00:03:23,530
application so let's just take a quick

84
00:03:21,250 --> 00:03:25,449
look at a MongoDB example so we have

85
00:03:23,530 --> 00:03:27,180
this find one collection while its

86
00:03:25,449 --> 00:03:29,620
collection with a fine one query and

87
00:03:27,180 --> 00:03:31,840
this is coming from user input because

88
00:03:29,620 --> 00:03:34,299
we have the request user request or

89
00:03:31,840 --> 00:03:36,250
query dot user and passwords but the

90
00:03:34,299 --> 00:03:37,959
injection here would be if you included

91
00:03:36,250 --> 00:03:40,780
a and dollar

92
00:03:37,959 --> 00:03:42,669
e on the password field because what

93
00:03:40,780 --> 00:03:44,859
this actually would do is convert the

94
00:03:42,669 --> 00:03:47,019
query output to basically say that the

95
00:03:44,859 --> 00:03:49,540
password is not equal to an empty string

96
00:03:47,019 --> 00:03:53,199
so you want to make sure that you're

97
00:03:49,540 --> 00:03:54,879
trying to prevent this in general and of

98
00:03:53,199 --> 00:03:56,769
course under the hood this will check to

99
00:03:54,879 --> 00:03:58,509
see if it's an empty string and 99% of

100
00:03:56,769 --> 00:04:00,069
the time the password isn't going to be

101
00:03:58,509 --> 00:04:02,018
an empty string it's going to be a hash

102
00:04:00,069 --> 00:04:04,780
password or clear text password

103
00:04:02,019 --> 00:04:06,370
hopefully not so let's just take a look

104
00:04:04,780 --> 00:04:07,289
at how that might actually work in

105
00:04:06,370 --> 00:04:11,469
practice

106
00:04:07,289 --> 00:04:13,899
so we have a simple login post route

107
00:04:11,469 --> 00:04:16,570
where we have this authenticate function

108
00:04:13,900 --> 00:04:18,280
its authenticate function takes in the

109
00:04:16,570 --> 00:04:21,250
body and it takes in the user and the

110
00:04:18,279 --> 00:04:22,969
password so from the body parameter and

111
00:04:21,250 --> 00:04:25,160
then it takes into the authentication

112
00:04:22,970 --> 00:04:27,620
and it tries to it goes to connect to

113
00:04:25,160 --> 00:04:30,440
the MongoDB instance so this time it's

114
00:04:27,620 --> 00:04:33,320
localhost and then we have that simple

115
00:04:30,440 --> 00:04:34,610
collection now obviously this would be

116
00:04:33,320 --> 00:04:36,590
vulnerable for various different

117
00:04:34,610 --> 00:04:38,690
collections but in this case we're going

118
00:04:36,590 --> 00:04:40,609
to talk about five one so this will just

119
00:04:38,690 --> 00:04:42,469
try and find one user make sure it

120
00:04:40,610 --> 00:04:44,390
matches and obviously under the hood

121
00:04:42,470 --> 00:04:46,010
this may do some other things but for

122
00:04:44,390 --> 00:04:48,890
all intents purposes this is a very

123
00:04:46,010 --> 00:04:50,539
simple application so obviously this can

124
00:04:48,890 --> 00:04:52,159
be bypassed with it which I mentioned

125
00:04:50,540 --> 00:04:53,750
with the username of admin this could

126
00:04:52,160 --> 00:04:55,340
also just be greater than and then the

127
00:04:53,750 --> 00:04:56,630
password would be greater than and it

128
00:04:55,340 --> 00:04:58,760
will return back the entire collection

129
00:04:56,630 --> 00:05:00,460
but as we can see here we have the fine

130
00:04:58,760 --> 00:05:03,170
one with the user and passwords so if we

131
00:05:00,460 --> 00:05:05,930
include that password with the dollar GT

132
00:05:03,170 --> 00:05:07,430
and we go to the application we try and

133
00:05:05,930 --> 00:05:08,960
log in with a fake password first

134
00:05:07,430 --> 00:05:13,670
obviously you should never do this in

135
00:05:08,960 --> 00:05:15,140
clear text but anyway so as we saw if we

136
00:05:13,670 --> 00:05:17,870
intercept that request and send that

137
00:05:15,140 --> 00:05:20,030
again to the server and we do fake

138
00:05:17,870 --> 00:05:21,620
password again once we capture that

139
00:05:20,030 --> 00:05:24,789
request we can now delete the fake

140
00:05:21,620 --> 00:05:28,370
password and just include the dollar GT

141
00:05:24,790 --> 00:05:30,500
so this will allow us to and because the

142
00:05:28,370 --> 00:05:32,300
password is greater than and whatever

143
00:05:30,500 --> 00:05:34,070
was supplied which is 90 straightened

144
00:05:32,300 --> 00:05:41,480
this is going to allow us to log into

145
00:05:34,070 --> 00:05:44,800
the application so the simplest way to

146
00:05:41,480 --> 00:05:47,900
prevent Mongo injection is to ensure

147
00:05:44,800 --> 00:05:50,690
obviously the safest way is to basically

148
00:05:47,900 --> 00:05:53,539
ensure what you're expecting is either

149
00:05:50,690 --> 00:05:56,719
of a part string so it's directly used

150
00:05:53,540 --> 00:05:59,570
in the global string object directly or

151
00:05:56,720 --> 00:06:02,750
you can perform custom data validation

152
00:05:59,570 --> 00:06:05,540
so one popular library and from happy

153
00:06:02,750 --> 00:06:08,840
and is joy and you can define custom

154
00:06:05,540 --> 00:06:11,450
info validation on on particular on

155
00:06:08,840 --> 00:06:13,520
particular either user inputs or on a

156
00:06:11,450 --> 00:06:16,039
scheme so you can do this by defining

157
00:06:13,520 --> 00:06:18,620
with like it must be a string and must

158
00:06:16,040 --> 00:06:20,840
be required it must be over type and you

159
00:06:18,620 --> 00:06:22,160
know between 30 and 50 characters you

160
00:06:20,840 --> 00:06:27,909
know whatever you want to do you can do

161
00:06:22,160 --> 00:06:31,160
that with joy so even sequel injection

162
00:06:27,910 --> 00:06:33,080
exists in node applications today we

163
00:06:31,160 --> 00:06:33,950
cannot escape that relational databases

164
00:06:33,080 --> 00:06:35,810
are here too

165
00:06:33,950 --> 00:06:37,820
they're gonna be around for a long time

166
00:06:35,810 --> 00:06:39,980
so as you can see Drake is not very

167
00:06:37,820 --> 00:06:43,099
happy when we dynamically include the

168
00:06:39,980 --> 00:06:46,310
object user through string concatenation

169
00:06:43,100 --> 00:06:47,630
and parvis as part of a query string but

170
00:06:46,310 --> 00:06:49,490
Drake is very happy when we're using

171
00:06:47,630 --> 00:06:54,560
parameterize queries to ensure user

172
00:06:49,490 --> 00:06:57,560
input is safe so let's get back to some

173
00:06:54,560 --> 00:07:00,890
serious content as enough Drake what we

174
00:06:57,560 --> 00:07:02,660
when we think about info prevention we

175
00:07:00,890 --> 00:07:05,930
want to make sure that we're doing first

176
00:07:02,660 --> 00:07:07,760
input validation and we want to try and

177
00:07:05,930 --> 00:07:09,590
do data normalization so that input

178
00:07:07,760 --> 00:07:13,070
validation is actually sane and it can

179
00:07:09,590 --> 00:07:14,659
be properly validated but then we may

180
00:07:13,070 --> 00:07:16,640
also want to consider when we're dealing

181
00:07:14,660 --> 00:07:18,260
with xml files or various different

182
00:07:16,640 --> 00:07:20,150
files performing something like output

183
00:07:18,260 --> 00:07:22,099
encoding because that's fit to recap

184
00:07:20,150 --> 00:07:23,510
anyone went to his presentation input

185
00:07:22,100 --> 00:07:25,490
validation cannot be used as a

186
00:07:23,510 --> 00:07:28,330
stand-alone protection it has to be

187
00:07:25,490 --> 00:07:31,250
conjoined with something else such as

188
00:07:28,330 --> 00:07:32,960
output encoding and then we're working

189
00:07:31,250 --> 00:07:34,490
when we're working with databases you

190
00:07:32,960 --> 00:07:36,919
might want to consider parameterised

191
00:07:34,490 --> 00:07:39,140
queries or safe api's such as stored

192
00:07:36,920 --> 00:07:40,670
procedures because you know stored

193
00:07:39,140 --> 00:07:42,409
procedures don't always save you from

194
00:07:40,670 --> 00:07:46,810
sequel sequel injection but if you're

195
00:07:42,410 --> 00:07:49,040
doing it correctly and you generally are

196
00:07:46,810 --> 00:07:53,360
okay so now we're going to move on to

197
00:07:49,040 --> 00:07:56,390
broken authentication so one of my

198
00:07:53,360 --> 00:07:58,130
colleagues I'm envious Ankur reviewed an

199
00:07:56,390 --> 00:08:00,349
Internet of Things application in China

200
00:07:58,130 --> 00:08:02,240
while he was on site and it was built

201
00:08:00,350 --> 00:08:04,430
with node and it was using the Express

202
00:08:02,240 --> 00:08:08,060
framework and they wanted to preserve

203
00:08:04,430 --> 00:08:10,070
memory space space on the device by not

204
00:08:08,060 --> 00:08:12,590
writing not using custom middleware or

205
00:08:10,070 --> 00:08:13,790
an authentication like passport they

206
00:08:12,590 --> 00:08:15,830
wanted to write their own because it

207
00:08:13,790 --> 00:08:18,380
would be cheaper so what you can see

208
00:08:15,830 --> 00:08:20,060
here and obviously this is vulnerable to

209
00:08:18,380 --> 00:08:21,830
node but it also could be vulnerable to

210
00:08:20,060 --> 00:08:23,750
the client-side too but it would be less

211
00:08:21,830 --> 00:08:26,630
impactful but what we have here is a

212
00:08:23,750 --> 00:08:28,580
simple and object called sessions and

213
00:08:26,630 --> 00:08:30,409
then we have this must be authenticated

214
00:08:28,580 --> 00:08:32,600
middleware which takes in the request

215
00:08:30,410 --> 00:08:34,310
response and next and then we take a

216
00:08:32,600 --> 00:08:36,409
look at the cookie and that cookie is

217
00:08:34,309 --> 00:08:39,059
basically a sign to the token and then

218
00:08:36,409 --> 00:08:41,699
we check to see if that session token

219
00:08:39,059 --> 00:08:43,949
exists in in the intercession object and

220
00:08:41,700 --> 00:08:45,840
if it does exist then we'll go to the

221
00:08:43,950 --> 00:08:49,170
next otherwise it will say not

222
00:08:45,840 --> 00:08:51,000
authorized now this looks like it could

223
00:08:49,170 --> 00:08:53,160
be okay but if anyone's looked at

224
00:08:51,000 --> 00:08:54,840
JavaScript for a long time or enough

225
00:08:53,160 --> 00:08:56,550
they're going to take a look at this

226
00:08:54,840 --> 00:08:59,250
comparison table and see some weird

227
00:08:56,550 --> 00:09:00,810
wonky things so let's just say that the

228
00:08:59,250 --> 00:09:02,760
sessioned object contained look at the

229
00:09:00,810 --> 00:09:05,099
authentication session and it was

230
00:09:02,760 --> 00:09:07,380
checking against that value but if you

231
00:09:05,100 --> 00:09:09,240
had an input validation string which

232
00:09:07,380 --> 00:09:11,550
said import which was an invalid string

233
00:09:09,240 --> 00:09:13,380
or against that session object it's

234
00:09:11,550 --> 00:09:15,329
gonna return false which makes sense

235
00:09:13,380 --> 00:09:18,450
because if it's not there it shouldn't

236
00:09:15,330 --> 00:09:20,280
return true the same for if was what all

237
00:09:18,450 --> 00:09:22,680
that was supplied was an empty cookie

238
00:09:20,280 --> 00:09:25,730
and that would obviously return false as

239
00:09:22,680 --> 00:09:27,959
well but then we get to some weird and

240
00:09:25,730 --> 00:09:29,490
interesting concepts where if you have

241
00:09:27,960 --> 00:09:31,620
the session which is constructor it's

242
00:09:29,490 --> 00:09:33,750
going to return to true and the same for

243
00:09:31,620 --> 00:09:37,680
hazard property which is going to return

244
00:09:33,750 --> 00:09:40,860
to true now the interesting thing here

245
00:09:37,680 --> 00:09:43,890
is because when you create a JavaScript

246
00:09:40,860 --> 00:09:46,020
object it essentially descends the base

247
00:09:43,890 --> 00:09:47,370
objects so by default you have these

248
00:09:46,020 --> 00:09:49,770
values such as underscore underscore

249
00:09:47,370 --> 00:09:51,570
proto which can be used for various

250
00:09:49,770 --> 00:09:53,819
dangerous things I prototype pollution I

251
00:09:51,570 --> 00:09:55,410
which is I don't cover today but I'm

252
00:09:53,820 --> 00:09:58,230
sure someone in the audience probably

253
00:09:55,410 --> 00:10:00,750
will looking at you there's also a

254
00:09:58,230 --> 00:10:04,590
constructor and has own property and is

255
00:10:00,750 --> 00:10:06,690
prototype of so what we saw before is

256
00:10:04,590 --> 00:10:08,550
basically saying the same thing as if it

257
00:10:06,690 --> 00:10:10,530
does the sessions constructor equal to

258
00:10:08,550 --> 00:10:12,719
session has got constructor and now of

259
00:10:10,530 --> 00:10:15,240
course is going to be true so the

260
00:10:12,720 --> 00:10:16,710
exploit here would be fairly trivial all

261
00:10:15,240 --> 00:10:18,690
we would do is basically do a car

262
00:10:16,710 --> 00:10:20,760
request and include a cookie which says

263
00:10:18,690 --> 00:10:22,350
token equals two constructor or

264
00:10:20,760 --> 00:10:24,530
alternatively you could just go into the

265
00:10:22,350 --> 00:10:27,390
browser and open the developer tools

266
00:10:24,530 --> 00:10:30,810
add-in and the document cookie and

267
00:10:27,390 --> 00:10:33,270
assign it to the token constructor so

268
00:10:30,810 --> 00:10:42,810
let's take a look at another example if

269
00:10:33,270 --> 00:10:48,590
I can so I've lost the mouse okay okay

270
00:10:42,810 --> 00:10:48,589
no yep okay so let's just replay this

271
00:10:49,160 --> 00:10:59,189
the replay nope

272
00:10:56,069 --> 00:11:03,509
let me just kill it and try again okay

273
00:10:59,189 --> 00:11:05,639
so play okay so let's just say we have

274
00:11:03,509 --> 00:11:07,230
the simple Express application and as

275
00:11:05,639 --> 00:11:09,149
you can see with using the cookie parser

276
00:11:07,230 --> 00:11:10,920
to be able to retrieve the cookie we

277
00:11:09,149 --> 00:11:12,629
have that sessions object which is empty

278
00:11:10,920 --> 00:11:15,149
and we have that must be authenticated

279
00:11:12,629 --> 00:11:16,800
middleware so what will happen now is

280
00:11:15,149 --> 00:11:19,110
obviously we take the request cookies we

281
00:11:16,800 --> 00:11:20,609
assign that to the token which then is

282
00:11:19,110 --> 00:11:23,519
obviously checked to see if there exists

283
00:11:20,610 --> 00:11:26,310
and if the session token contains that

284
00:11:23,519 --> 00:11:28,800
value and if it does go next otherwise

285
00:11:26,310 --> 00:11:30,599
say not authorized and then obviously

286
00:11:28,800 --> 00:11:32,639
we're appending that as middleware so

287
00:11:30,600 --> 00:11:34,680
before it even makes it to the get route

288
00:11:32,639 --> 00:11:36,329
it's going to check that and as you can

289
00:11:34,680 --> 00:11:38,430
see when we refresh the page it says not

290
00:11:36,329 --> 00:11:40,649
authenticated but all we're going to do

291
00:11:38,430 --> 00:11:43,170
is go into the developer console define

292
00:11:40,649 --> 00:11:45,089
the document cookie assign that token

293
00:11:43,170 --> 00:11:47,219
constructor and then refresh the page

294
00:11:45,089 --> 00:11:49,350
and as you can see now it says we're

295
00:11:47,220 --> 00:11:53,790
authenticated and then i zoom in for

296
00:11:49,350 --> 00:11:56,040
dramatic effect so obviously this is

297
00:11:53,790 --> 00:11:59,399
quite bad and this definitely shouldn't

298
00:11:56,040 --> 00:12:01,849
have happened but it's an unfortunate

299
00:11:59,399 --> 00:12:01,850
consequence

300
00:12:05,560 --> 00:12:09,890
so how do we correctly correctly check

301
00:12:08,120 --> 00:12:12,940
this and whilst I would never recommend

302
00:12:09,890 --> 00:12:14,689
you write your own authentication

303
00:12:12,940 --> 00:12:17,570
unfortunately sometimes it's a necessity

304
00:12:14,690 --> 00:12:19,160
so I would highly recommend looking into

305
00:12:17,570 --> 00:12:21,709
using the crypto library which has

306
00:12:19,160 --> 00:12:23,329
timing safe equal because when you're

307
00:12:21,709 --> 00:12:25,399
doing things like sensitive password

308
00:12:23,329 --> 00:12:26,689
comparisons and various other things if

309
00:12:25,399 --> 00:12:28,490
you have a double equals or triple

310
00:12:26,690 --> 00:12:30,050
equals this is vulnerable to timing

311
00:12:28,490 --> 00:12:33,769
attacks so you should never do that

312
00:12:30,050 --> 00:12:35,959
anyway the next thing is of course it

313
00:12:33,769 --> 00:12:37,579
performs a safe comparison so it's not

314
00:12:35,959 --> 00:12:39,649
going to chase it's not going to check

315
00:12:37,579 --> 00:12:42,079
the base object it's only going to check

316
00:12:39,649 --> 00:12:43,790
the input string and then you can also

317
00:12:42,079 --> 00:12:45,649
just do this very happily it's not

318
00:12:43,790 --> 00:12:47,480
hacking actually it's a relatively okay

319
00:12:45,649 --> 00:12:50,089
solution but you can use the object

320
00:12:47,480 --> 00:12:54,019
hazard property or the if you're using

321
00:12:50,089 --> 00:12:56,329
maps es6 maps you can use dot has oh I

322
00:12:54,019 --> 00:12:58,370
repeated the thing anyway that was meant

323
00:12:56,329 --> 00:13:01,519
to be the house so basically these do

324
00:12:58,370 --> 00:13:05,660
not check the base property so these are

325
00:13:01,519 --> 00:13:12,470
safe to use in this context okay so now

326
00:13:05,660 --> 00:13:16,250
let's move on to xxe so we all know that

327
00:13:12,470 --> 00:13:17,930
an extra XML external entities xxe

328
00:13:16,250 --> 00:13:20,810
injection is very common in pretty much

329
00:13:17,930 --> 00:13:23,120
all languages that we see and note in

330
00:13:20,810 --> 00:13:24,829
this context is no different if we want

331
00:13:23,120 --> 00:13:27,800
a quick recap where everyone knows what

332
00:13:24,829 --> 00:13:29,930
XML injection is but we have XML the XML

333
00:13:27,800 --> 00:13:32,180
standard includes the idea of external

334
00:13:29,930 --> 00:13:34,819
external general past entities an

335
00:13:32,180 --> 00:13:37,699
external entity and in during the

336
00:13:34,820 --> 00:13:39,380
parsing process the XML document the

337
00:13:37,700 --> 00:13:42,320
parser will expand these links and

338
00:13:39,380 --> 00:13:45,680
include the content of the URI in the

339
00:13:42,320 --> 00:13:47,240
returned return document and a common

340
00:13:45,680 --> 00:13:49,399
attack is basically to include like a

341
00:13:47,240 --> 00:13:52,100
DTD so a document type definition where

342
00:13:49,399 --> 00:13:54,350
you include some entities you can do and

343
00:13:52,100 --> 00:13:56,029
whatever other malicious things like try

344
00:13:54,350 --> 00:13:58,160
and do denial of service through a

345
00:13:56,029 --> 00:14:01,880
billion lapse attack you can do trying

346
00:13:58,160 --> 00:14:03,709
to access internal resources and various

347
00:14:01,880 --> 00:14:06,040
other you know means like trying to do

348
00:14:03,709 --> 00:14:08,839
port scanning on your internal host and

349
00:14:06,040 --> 00:14:10,069
node is no different it has a lot of XML

350
00:14:08,839 --> 00:14:11,959
parsing libraries

351
00:14:10,070 --> 00:14:13,560
I had an arguable someone told me that

352
00:14:11,959 --> 00:14:15,390
no one uses them note that

353
00:14:13,560 --> 00:14:17,880
now but I mean I beg to differ when

354
00:14:15,390 --> 00:14:20,939
there's 80 48 thousand weekly downloads

355
00:14:17,880 --> 00:14:22,860
and 47,000 weekly downloads so no tax

356
00:14:20,940 --> 00:14:24,480
but a note expert is actually in

357
00:14:22,860 --> 00:14:27,180
particularly vulnerable dub by design

358
00:14:24,480 --> 00:14:29,580
you can its long if user input is being

359
00:14:27,180 --> 00:14:31,500
entered into this into this past

360
00:14:29,580 --> 00:14:32,790
function it's actually vulnerable by

361
00:14:31,500 --> 00:14:34,740
design and you can't do anything about

362
00:14:32,790 --> 00:14:37,550
it you would have to do extra layers of

363
00:14:34,740 --> 00:14:41,279
security on top of that to make it safe

364
00:14:37,550 --> 00:14:43,770
there's also lib XML jus and that live

365
00:14:41,279 --> 00:14:46,680
xml j s is vulnerable if no end is set

366
00:14:43,770 --> 00:14:47,790
to true and this means no entities which

367
00:14:46,680 --> 00:14:49,380
doesn't really make sense from a

368
00:14:47,790 --> 00:14:51,300
configuration perspective maybe there

369
00:14:49,380 --> 00:14:53,670
should be entities set to true rather

370
00:14:51,300 --> 00:14:56,010
than no entities but that thing that's a

371
00:14:53,670 --> 00:14:58,199
generic java or previous standard that

372
00:14:56,010 --> 00:15:00,510
was set in the old implementations

373
00:14:58,200 --> 00:15:05,100
because this is like a port of other

374
00:15:00,510 --> 00:15:06,990
implementation libraries so let's just

375
00:15:05,100 --> 00:15:08,550
take a look at an the DB na which is

376
00:15:06,990 --> 00:15:10,010
down vulnerable node application this

377
00:15:08,550 --> 00:15:13,529
has been created years ago to

378
00:15:10,010 --> 00:15:15,150
demonstrate some particular issues so as

379
00:15:13,529 --> 00:15:17,790
you can see here we have the request

380
00:15:15,150 --> 00:15:19,980
stop files and basically it's taking in

381
00:15:17,790 --> 00:15:22,980
some data and obviously the mime type is

382
00:15:19,980 --> 00:15:25,710
set set to text XML and it's going into

383
00:15:22,980 --> 00:15:28,620
the parse XML string that would be saved

384
00:15:25,710 --> 00:15:31,470
by default but unfortunately we have

385
00:15:28,620 --> 00:15:34,800
this no end set to true which means you

386
00:15:31,470 --> 00:15:36,660
would be able to achieve XML injection

387
00:15:34,800 --> 00:15:39,660
in this context you could retrieve local

388
00:15:36,660 --> 00:15:41,370
local instances from the files you could

389
00:15:39,660 --> 00:15:42,900
do denial of service you could attack

390
00:15:41,370 --> 00:15:44,970
the web server or whatever you wanted

391
00:15:42,900 --> 00:15:47,160
because the source here is obviously the

392
00:15:44,970 --> 00:15:49,020
request dot files going into parse XML

393
00:15:47,160 --> 00:15:55,680
and then the misc configuration and the

394
00:15:49,020 --> 00:15:57,810
sink here is the no end to true so how

395
00:15:55,680 --> 00:16:00,329
would you try and prevent this in note

396
00:15:57,810 --> 00:16:03,150
in general you may want to consider just

397
00:16:00,330 --> 00:16:06,180
using a library that doesn't pass ID TDs

398
00:16:03,150 --> 00:16:08,610
so the sax j s & sax j s doesn't even

399
00:16:06,180 --> 00:16:10,739
process entities you can configure it in

400
00:16:08,610 --> 00:16:12,029
a way where you can do that but by

401
00:16:10,740 --> 00:16:15,990
default it's technically a safe

402
00:16:12,029 --> 00:16:18,240
implementation and when you'll want to

403
00:16:15,990 --> 00:16:20,160
use safe libraries definitely consider

404
00:16:18,240 --> 00:16:22,570
using Lib XM out is over

405
00:16:20,160 --> 00:16:24,370
nodaks part because it is safe by

406
00:16:22,570 --> 00:16:25,810
default but you have to make that

407
00:16:24,370 --> 00:16:27,760
configuration change to make it

408
00:16:25,810 --> 00:16:29,199
vulnerable and then if there are

409
00:16:27,760 --> 00:16:31,120
contexts where you need like the

410
00:16:29,200 --> 00:16:33,250
ampersand or greater than converted into

411
00:16:31,120 --> 00:16:36,040
actual attributes you may want to

412
00:16:33,250 --> 00:16:38,470
consider using lodash or underscore or M

413
00:16:36,040 --> 00:16:41,439
he to basically do an escape functions

414
00:16:38,470 --> 00:16:44,350
on you know technically on HTML but you

415
00:16:41,440 --> 00:16:45,880
know in this context XML and of course

416
00:16:44,350 --> 00:16:46,930
if you can't really approach those

417
00:16:45,880 --> 00:16:48,730
things you want to make sure you're

418
00:16:46,930 --> 00:16:51,310
doing strict input validation and output

419
00:16:48,730 --> 00:16:56,980
encoding before actually passing the

420
00:16:51,310 --> 00:17:01,300
data okay so let's talk about brokering

421
00:16:56,980 --> 00:17:03,070
access control for a second so we now

422
00:17:01,300 --> 00:17:04,809
live in a world where most of the

423
00:17:03,070 --> 00:17:07,089
routing is done on the client side and

424
00:17:04,809 --> 00:17:09,849
the client and server trust boundaries

425
00:17:07,089 --> 00:17:11,770
are started to meld together you know we

426
00:17:09,849 --> 00:17:13,899
have many client-side frameworks and

427
00:17:11,770 --> 00:17:17,319
libraries now that offer some kind of

428
00:17:13,900 --> 00:17:19,150
authorization but this intended purpose

429
00:17:17,319 --> 00:17:21,309
from the client side is purely only for

430
00:17:19,150 --> 00:17:24,939
aesthetics it's not meant to be used for

431
00:17:21,309 --> 00:17:26,800
security so but the sad truth is this is

432
00:17:24,939 --> 00:17:28,720
often neglected when we look at many

433
00:17:26,800 --> 00:17:31,330
applications now from your source code

434
00:17:28,720 --> 00:17:33,520
review or from a penetration test we

435
00:17:31,330 --> 00:17:35,260
tend to see that these server and client

436
00:17:33,520 --> 00:17:37,389
side boundaries have melded together and

437
00:17:35,260 --> 00:17:39,040
you're all they're doing is doing

438
00:17:37,390 --> 00:17:42,790
client-side controls to protect

439
00:17:39,040 --> 00:17:45,520
themselves against an elevated privilege

440
00:17:42,790 --> 00:17:47,500
so when you are working with node.js

441
00:17:45,520 --> 00:17:49,900
there are some things you can consider

442
00:17:47,500 --> 00:17:51,880
for the server side so first you want

443
00:17:49,900 --> 00:17:55,480
may want to use like node Casman for

444
00:17:51,880 --> 00:17:57,850
authorization and so that node node has

445
00:17:55,480 --> 00:17:59,140
been allows you to write access control

446
00:17:57,850 --> 00:18:02,760
lists allows you to write rollbase

447
00:17:59,140 --> 00:18:06,340
role-based access controls and

448
00:18:02,760 --> 00:18:08,230
attribute based access control you may

449
00:18:06,340 --> 00:18:09,820
want to move this over to a framework to

450
00:18:08,230 --> 00:18:12,880
do all the hard hard and heavy lifting

451
00:18:09,820 --> 00:18:15,070
for you so sales j/s allows you to

452
00:18:12,880 --> 00:18:17,020
easily write policies that might be good

453
00:18:15,070 --> 00:18:19,510
to make sure that a person is of a type

454
00:18:17,020 --> 00:18:22,600
admin it's very easy to do this inside

455
00:18:19,510 --> 00:18:24,940
your sales j/s and then finally you may

456
00:18:22,600 --> 00:18:27,040
want to write some custom middleware so

457
00:18:24,940 --> 00:18:28,600
custom middleware is very important when

458
00:18:27,040 --> 00:18:31,418
you're working with things i JWT

459
00:18:28,600 --> 00:18:32,820
or JSON web tokens or job however you

460
00:18:31,419 --> 00:18:34,590
want to call it and

461
00:18:32,820 --> 00:18:37,049
do this at various different levels you

462
00:18:34,590 --> 00:18:38,459
can do this at the actual route level so

463
00:18:37,049 --> 00:18:40,830
as you can see in this example we're

464
00:18:38,460 --> 00:18:43,080
doing like off requires role admin you

465
00:18:40,830 --> 00:18:45,449
would obviously you know verify the JWT

466
00:18:43,080 --> 00:18:47,220
then check against that or you could do

467
00:18:45,450 --> 00:18:49,649
it at if you wanted to make sure someone

468
00:18:47,220 --> 00:18:51,539
was authenticated first you may do it at

469
00:18:49,649 --> 00:18:53,729
the pre route level so before it even

470
00:18:51,539 --> 00:18:56,039
reaches these routes or you may want to

471
00:18:53,730 --> 00:18:58,529
do some things afterwards after at the

472
00:18:56,039 --> 00:19:00,539
after route it's entirely up to you how

473
00:18:58,529 --> 00:19:02,159
you want to deploy that but these are

474
00:19:00,539 --> 00:19:04,200
just some potential solutions you might

475
00:19:02,159 --> 00:19:08,730
be able to deploy in your organization

476
00:19:04,200 --> 00:19:10,470
so just to give a quick angular example

477
00:19:08,730 --> 00:19:13,919
and I've highly recommend taking a look

478
00:19:10,470 --> 00:19:15,240
at the second link here but angular has

479
00:19:13,919 --> 00:19:17,549
some built-in client-side validation

480
00:19:15,240 --> 00:19:20,460
checks which can be used to load

481
00:19:17,549 --> 00:19:22,019
resources or show in hide States you

482
00:19:20,460 --> 00:19:24,299
have things like can activate can

483
00:19:22,019 --> 00:19:27,720
activate child can deactivate can load

484
00:19:24,299 --> 00:19:30,090
resolve and so on and obviously this is

485
00:19:27,720 --> 00:19:32,759
nice from a user experience and what

486
00:19:30,090 --> 00:19:34,529
should be shown to it to a user but

487
00:19:32,759 --> 00:19:36,809
obviously these things can easily be

488
00:19:34,529 --> 00:19:38,340
trivially bypassed and only you know

489
00:19:36,809 --> 00:19:40,350
maybe if they're doing on the server and

490
00:19:38,340 --> 00:19:42,480
only then rendering the data it might be

491
00:19:40,350 --> 00:19:44,370
okay but most of the time single page

492
00:19:42,480 --> 00:19:46,529
applications throw everything to the

493
00:19:44,370 --> 00:19:48,029
client and then depending on the you

494
00:19:46,529 --> 00:19:50,279
know the JSON responses they receive

495
00:19:48,029 --> 00:19:54,389
what data they have that is how it's

496
00:19:50,279 --> 00:19:56,190
represented on the client side but the

497
00:19:54,389 --> 00:19:58,649
one interesting thing about angular as

498
00:19:56,190 --> 00:20:00,059
well I'm not picking on young angular

499
00:19:58,649 --> 00:20:01,949
because it's bad it's actually a super

500
00:20:00,059 --> 00:20:04,740
great framework but you can basically

501
00:20:01,950 --> 00:20:06,269
use it's super powerful energy probe and

502
00:20:04,740 --> 00:20:08,250
that's what the second argument the

503
00:20:06,269 --> 00:20:10,139
second blog post talks about it's how

504
00:20:08,250 --> 00:20:12,240
you can use energy probe to probe the

505
00:20:10,139 --> 00:20:13,678
client side and you can do this

506
00:20:12,240 --> 00:20:15,389
basically to take a look at its

507
00:20:13,679 --> 00:20:17,429
components and if they had like

508
00:20:15,389 --> 00:20:19,500
authentication component or an admin

509
00:20:17,429 --> 00:20:21,450
component you could then basically start

510
00:20:19,500 --> 00:20:27,629
to manipulate the changes and in in that

511
00:20:21,450 --> 00:20:31,860
aspect so now I'm moving on to security

512
00:20:27,629 --> 00:20:33,330
mists configuration so nodejs and most

513
00:20:31,860 --> 00:20:34,110
of the frameworks that are built on top

514
00:20:33,330 --> 00:20:36,509
of nodejs

515
00:20:34,110 --> 00:20:39,178
return verbose error messages as you can

516
00:20:36,509 --> 00:20:41,940
see from the top example if the default

517
00:20:39,179 --> 00:20:43,860
value is set so if you tend to see you

518
00:20:41,940 --> 00:20:44,260
like you know a file is not found or a

519
00:20:43,860 --> 00:20:46,209
certain

520
00:20:44,260 --> 00:20:49,030
era came back you would want to make

521
00:20:46,210 --> 00:20:50,890
sure that this is a set properly and

522
00:20:49,030 --> 00:20:53,290
then you can do this by defining the

523
00:20:50,890 --> 00:20:55,510
production mode and with the node

524
00:20:53,290 --> 00:20:57,940
environment you can also actually set

525
00:20:55,510 --> 00:20:59,620
this up as a middle as a middleware so

526
00:20:57,940 --> 00:21:00,880
you can kind of consider this at you

527
00:20:59,620 --> 00:21:02,530
know are all routes you want to make

528
00:21:00,880 --> 00:21:04,390
sure this middleware is set so before

529
00:21:02,530 --> 00:21:06,220
anything runs it's set to production

530
00:21:04,390 --> 00:21:09,240
with a node environment so that

531
00:21:06,220 --> 00:21:11,110
technically would save you from if your

532
00:21:09,240 --> 00:21:12,970
client if your actual server

533
00:21:11,110 --> 00:21:15,040
implementation changes or it gets

534
00:21:12,970 --> 00:21:16,660
deployed to a new server and the node

535
00:21:15,040 --> 00:21:20,830
environment changes so you can do this

536
00:21:16,660 --> 00:21:22,540
at the middleware layer and of course we

537
00:21:20,830 --> 00:21:24,129
all know about am the dangerous of

538
00:21:22,540 --> 00:21:26,080
running as routes for any Linux

539
00:21:24,130 --> 00:21:27,580
application running as you know running

540
00:21:26,080 --> 00:21:29,110
with sudo has a greater chance of

541
00:21:27,580 --> 00:21:31,270
modifying the underlying operating

542
00:21:29,110 --> 00:21:32,560
system if they have like a command

543
00:21:31,270 --> 00:21:35,830
injection for example they could

544
00:21:32,560 --> 00:21:36,850
obviously just do RTFM forward slash but

545
00:21:35,830 --> 00:21:39,879
there are some things that you may want

546
00:21:36,850 --> 00:21:42,370
to consider so for example and if you

547
00:21:39,880 --> 00:21:46,330
know go through you may want to go

548
00:21:42,370 --> 00:21:47,560
through the default run scripts to make

549
00:21:46,330 --> 00:21:49,570
sure they're not running with sudo

550
00:21:47,560 --> 00:21:51,460
that's the first thing you can do and

551
00:21:49,570 --> 00:21:54,520
the second thing you can do is sudo is

552
00:21:51,460 --> 00:21:56,980
required after the port is bound you can

553
00:21:54,520 --> 00:21:59,290
essentially then you know call process

554
00:21:56,980 --> 00:22:03,090
and set the GID a new ID so these are

555
00:21:59,290 --> 00:22:06,870
some things you can consider in nodejs

556
00:22:03,090 --> 00:22:09,220
so let's move on to my most arguably

557
00:22:06,870 --> 00:22:11,790
strongest topic and I have a lot of

558
00:22:09,220 --> 00:22:16,000
things to say about cross-site scripting

559
00:22:11,790 --> 00:22:19,870
okay so XSS is super easy to introduce

560
00:22:16,000 --> 00:22:21,040
and I think koto and Mike's talk talked

561
00:22:19,870 --> 00:22:23,949
about the same things and I'm about to

562
00:22:21,040 --> 00:22:28,690
talk about now but as we all know dahm

563
00:22:23,950 --> 00:22:31,120
dahm dahm XSS generally occurs when you

564
00:22:28,690 --> 00:22:33,610
know inputs injection sinks in the Dom

565
00:22:31,120 --> 00:22:35,620
or other browser API is a called we've

566
00:22:33,610 --> 00:22:37,870
used as a controlled input so as you can

567
00:22:35,620 --> 00:22:39,729
see here we have a source such as

568
00:22:37,870 --> 00:22:41,709
location dot hash and then it's being

569
00:22:39,730 --> 00:22:44,110
assigned to the NHD ánow which says

570
00:22:41,710 --> 00:22:48,520
welcome username or is being appended in

571
00:22:44,110 --> 00:22:50,620
this case and of course and of course

572
00:22:48,520 --> 00:22:52,300
the script execution context here would

573
00:22:50,620 --> 00:22:53,280
be just to include the username and that

574
00:22:52,300 --> 00:22:57,450
should be a hash

575
00:22:53,280 --> 00:22:58,918
not a not a not a parameter but

576
00:22:57,450 --> 00:23:04,110
obviously if you had a hash here this

577
00:22:58,919 --> 00:23:06,360
would allow for the execution so and Dom

578
00:23:04,110 --> 00:23:08,610
XSS in today's ecosystem is super

579
00:23:06,360 --> 00:23:10,949
difficult to find you'll notice that

580
00:23:08,610 --> 00:23:13,070
most static code analysis tools cannot

581
00:23:10,950 --> 00:23:15,690
identify Dom XSS it's it's pretty

582
00:23:13,070 --> 00:23:17,428
paramount that it's so difficult and

583
00:23:15,690 --> 00:23:18,990
obviously when you're defining variables

584
00:23:17,429 --> 00:23:21,000
in a way if you take a look at these

585
00:23:18,990 --> 00:23:22,559
hacker 1 reports and you take a look at

586
00:23:21,000 --> 00:23:24,510
the code you're gonna go where is the

587
00:23:22,559 --> 00:23:28,678
Dom access s but it is actually quite

588
00:23:24,510 --> 00:23:31,110
difficult to identify and browsers

589
00:23:28,679 --> 00:23:34,020
actually tend to pass and render HTML

590
00:23:31,110 --> 00:23:35,908
differently so the Dom specification for

591
00:23:34,020 --> 00:23:37,530
each browser while there are standards

592
00:23:35,909 --> 00:23:39,299
they're not always conforming to those

593
00:23:37,530 --> 00:23:41,700
standards and they implement things a

594
00:23:39,299 --> 00:23:45,150
little differently so there's a good

595
00:23:41,700 --> 00:23:46,530
explanation from live overflow where he

596
00:23:45,150 --> 00:23:48,960
goes into a lot of detail about the

597
00:23:46,530 --> 00:23:50,970
Google XSS but then he also goes into

598
00:23:48,960 --> 00:23:53,159
detail about why is this thing rendering

599
00:23:50,970 --> 00:23:55,110
this way on Firefox or why is this way

600
00:23:53,159 --> 00:23:57,659
rendering on Chrome and there's some

601
00:23:55,110 --> 00:24:00,120
wonderful examples on shadow shadow at

602
00:23:57,659 --> 00:24:02,610
UK which is basically a fuzzing website

603
00:24:00,120 --> 00:24:05,129
for browsers and insert script known as

604
00:24:02,610 --> 00:24:07,020
Alex and also gareth Hayes have some

605
00:24:05,130 --> 00:24:08,970
wonderful examples on there about how

606
00:24:07,020 --> 00:24:10,950
you can get quirks like there was like

607
00:24:08,970 --> 00:24:12,570
things trying to remove a greater than

608
00:24:10,950 --> 00:24:14,850
character to bring an entire string

609
00:24:12,570 --> 00:24:17,730
together and various different contexts

610
00:24:14,850 --> 00:24:20,039
and of course the dangers of the Dom as

611
00:24:17,730 --> 00:24:21,870
well or the browsers in general is that

612
00:24:20,039 --> 00:24:24,270
there's so many execution contexts

613
00:24:21,870 --> 00:24:26,610
there's wonderful resources like html5

614
00:24:24,270 --> 00:24:29,370
sect org that you can take those

615
00:24:26,610 --> 00:24:31,949
payloads and basically use them inside

616
00:24:29,370 --> 00:24:32,360
your security unit tests five minutes

617
00:24:31,950 --> 00:24:35,669
okay

618
00:24:32,360 --> 00:24:37,770
and of course and there's also character

619
00:24:35,669 --> 00:24:40,159
sets so browsers come with various

620
00:24:37,770 --> 00:24:45,990
different character sets like utf-8

621
00:24:40,159 --> 00:24:47,400
utf-16 pleura six was crazy and just

622
00:24:45,990 --> 00:24:50,309
threw a ton of character sets in there

623
00:24:47,400 --> 00:24:53,039
at some point so there's tons of

624
00:24:50,309 --> 00:24:55,200
different and ways to basically get

625
00:24:53,039 --> 00:24:57,000
JavaScript execution even when it

626
00:24:55,200 --> 00:24:59,370
doesn't look like JavaScript execution

627
00:24:57,000 --> 00:25:01,409
and then you also have script gadgets

628
00:24:59,370 --> 00:25:03,928
where it's basically taking HTML

629
00:25:01,409 --> 00:25:06,029
injection and being processed in a way

630
00:25:03,929 --> 00:25:07,919
where it's executed by JavaScript so

631
00:25:06,029 --> 00:25:09,929
highly recommend taking a look look at

632
00:25:07,919 --> 00:25:11,429
all these resources and then you'll kind

633
00:25:09,929 --> 00:25:13,769
of get to the point why you understand

634
00:25:11,429 --> 00:25:15,809
things are so difficult so have five

635
00:25:13,769 --> 00:25:19,830
minutes and 20 slides let's let's do it

636
00:25:15,809 --> 00:25:22,590
so frameworks like angular react in view

637
00:25:19,830 --> 00:25:23,939
definitely reduce the attack surface but

638
00:25:22,590 --> 00:25:26,668
I'm not going to go through all of these

639
00:25:23,940 --> 00:25:29,429
but essentially there are abundance of

640
00:25:26,669 --> 00:25:31,979
ways that you can introduce XSS by

641
00:25:29,429 --> 00:25:33,479
basically using frameworks in a way

642
00:25:31,979 --> 00:25:36,779
which are either being abused and

643
00:25:33,479 --> 00:25:38,729
various different aspects so the first

644
00:25:36,779 --> 00:25:40,589
example would be to combine templating

645
00:25:38,729 --> 00:25:43,169
engines with and third-party libraries

646
00:25:40,589 --> 00:25:45,899
and frameworks so in angularjs if you

647
00:25:43,169 --> 00:25:47,820
included jQuery text which in general

648
00:25:45,899 --> 00:25:51,779
websites that's actually a safe way to

649
00:25:47,820 --> 00:25:53,309
insert HTML but with jQuery dot text

650
00:25:51,779 --> 00:25:55,529
angular would actually render curly

651
00:25:53,309 --> 00:25:57,450
braces as part of the angular

652
00:25:55,529 --> 00:25:59,279
expressions so you were technically get

653
00:25:57,450 --> 00:26:01,409
XSS you could obviously do all the

654
00:25:59,279 --> 00:26:03,119
others as well one interesting one is

655
00:26:01,409 --> 00:26:09,269
element ref because it allows you to

656
00:26:03,119 --> 00:26:11,369
access the Dom so you get in HTML so I'm

657
00:26:09,269 --> 00:26:13,679
not going to click that so basically I'm

658
00:26:11,369 --> 00:26:15,749
gonna ignore this video you can watch it

659
00:26:13,679 --> 00:26:17,909
online with through the video and but

660
00:26:15,749 --> 00:26:19,289
base owner now it's playing okay so as

661
00:26:17,909 --> 00:26:22,559
you can see here we get remote code

662
00:26:19,289 --> 00:26:25,950
execution and it's quite strange why and

663
00:26:22,559 --> 00:26:29,759
this is because one line of code in the

664
00:26:25,950 --> 00:26:32,460
signal application basically was using

665
00:26:29,759 --> 00:26:35,219
danger to set in HTML and this allowed

666
00:26:32,460 --> 00:26:37,409
you to essentially get various different

667
00:26:35,219 --> 00:26:38,879
execution contexts on the client side or

668
00:26:37,409 --> 00:26:42,059
sorry in the mobile applications

669
00:26:38,879 --> 00:26:43,488
it was XSS on electron it was a remote

670
00:26:42,059 --> 00:26:46,649
code execution

671
00:26:43,489 --> 00:26:49,710
so the general prevention techniques is

672
00:26:46,649 --> 00:26:51,869
quite critical here and you know there's

673
00:26:49,710 --> 00:26:54,929
various different ways to achieve this

674
00:26:51,869 --> 00:26:57,689
so you can use templating engines such

675
00:26:54,929 --> 00:27:00,450
as mustache or pork or ejs and they do

676
00:26:57,690 --> 00:27:03,509
HTML contextual encoding you can use

677
00:27:00,450 --> 00:27:05,339
angular react or view to ensure that and

678
00:27:03,509 --> 00:27:08,039
you're making sure they're using their

679
00:27:05,339 --> 00:27:10,109
sanitization functions by design and of

680
00:27:08,039 --> 00:27:11,519
course they're secure filters you want

681
00:27:10,109 --> 00:27:13,889
to make sure that you're doing Dom

682
00:27:11,519 --> 00:27:15,750
purify or doing client-side sanitization

683
00:27:13,889 --> 00:27:17,429
because whilst it's built on the server

684
00:27:15,750 --> 00:27:19,500
once you can render it in the browser

685
00:27:17,430 --> 00:27:21,630
you can make a better safe assumption

686
00:27:19,500 --> 00:27:23,820
that it is secure or it is sanitized

687
00:27:21,630 --> 00:27:25,620
properly and of course if you can use

688
00:27:23,820 --> 00:27:28,200
that in a text or in code you awry in

689
00:27:25,620 --> 00:27:31,979
the correct context and that is quite

690
00:27:28,200 --> 00:27:33,750
important so I'm gonna skip this very

691
00:27:31,980 --> 00:27:34,560
this next topic very quickly but you

692
00:27:33,750 --> 00:27:36,840
should definitely look at

693
00:27:34,560 --> 00:27:39,330
defense-in-depth strategies so you want

694
00:27:36,840 --> 00:27:40,980
to try and deploy CSP and take a look

695
00:27:39,330 --> 00:27:43,080
obviously Cotto and Mike just talked

696
00:27:40,980 --> 00:27:44,700
about trusted types but I would highly

697
00:27:43,080 --> 00:27:46,590
recommend looking at these as extra

698
00:27:44,700 --> 00:27:50,850
layers of security on top of your

699
00:27:46,590 --> 00:27:52,350
applications okay

700
00:27:50,850 --> 00:27:55,350
so two minutes left and this is the most

701
00:27:52,350 --> 00:27:58,800
important part every one so I'm going to

702
00:27:55,350 --> 00:28:01,350
go over time sorry so this is the most

703
00:27:58,800 --> 00:28:03,180
important thing when it comes to I guess

704
00:28:01,350 --> 00:28:06,560
the node ecosystem and it's using

705
00:28:03,180 --> 00:28:09,480
components with known vulnerabilities so

706
00:28:06,560 --> 00:28:12,090
it's very important to carefully audit

707
00:28:09,480 --> 00:28:13,890
third pipe code and obviously doing

708
00:28:12,090 --> 00:28:15,929
source code review is very critical in

709
00:28:13,890 --> 00:28:18,360
this aspect but if you take a look at an

710
00:28:15,930 --> 00:28:20,550
NPM package list or any kind of package

711
00:28:18,360 --> 00:28:22,620
JSON you're gonna see a thousands of

712
00:28:20,550 --> 00:28:24,480
different kind of packages in there and

713
00:28:22,620 --> 00:28:27,060
it's not going to be feasible to do

714
00:28:24,480 --> 00:28:28,920
source code review but if you do find an

715
00:28:27,060 --> 00:28:30,629
issue in an NPM package you can now use

716
00:28:28,920 --> 00:28:32,580
the new github feature where you can

717
00:28:30,630 --> 00:28:35,520
directly report that issue to the

718
00:28:32,580 --> 00:28:37,199
project itself in a safe way and of

719
00:28:35,520 --> 00:28:39,240
course if you want to implement and

720
00:28:37,200 --> 00:28:42,210
auditing tools in your CI CD pipeline

721
00:28:39,240 --> 00:28:45,450
you can use NPM audit yarn order audit

722
00:28:42,210 --> 00:28:47,190
j/s retire jeaious and sneak tests so

723
00:28:45,450 --> 00:28:48,750
you can use these in different contexts

724
00:28:47,190 --> 00:28:51,240
you would use snick if you're using open

725
00:28:48,750 --> 00:28:52,250
source node you could use retire j/s if

726
00:28:51,240 --> 00:28:55,110
you're looking at client-side JavaScript

727
00:28:52,250 --> 00:28:58,470
you could use bower for client client

728
00:28:55,110 --> 00:29:00,449
side and package manager yarn with yarn

729
00:28:58,470 --> 00:29:05,040
audit fix which basically wraps over NPM

730
00:29:00,450 --> 00:29:07,710
and then also NPM audit fix so these are

731
00:29:05,040 --> 00:29:09,960
some simple examples and what you see

732
00:29:07,710 --> 00:29:12,300
here is that obviously things like next

733
00:29:09,960 --> 00:29:14,430
is next year's is super important in the

734
00:29:12,300 --> 00:29:16,379
react world but in two cases it was

735
00:29:14,430 --> 00:29:18,360
vulnerable to arbitrary read through

736
00:29:16,380 --> 00:29:21,060
directory traversal it was also

737
00:29:18,360 --> 00:29:22,649
vulnerable to an X access which

738
00:29:21,060 --> 00:29:24,629
obviously is quite bad because react

739
00:29:22,650 --> 00:29:26,730
that adds a lot of properties but if you

740
00:29:24,630 --> 00:29:27,520
build on top of that you essentially are

741
00:29:26,730 --> 00:29:30,010
seeing a lot of

742
00:29:27,520 --> 00:29:32,910
Mantic areas so it's super important to

743
00:29:30,010 --> 00:29:35,050
do dependency checking on node modules

744
00:29:32,910 --> 00:29:40,630
so I saw someone was taking a screenshot

745
00:29:35,050 --> 00:29:42,639
so feel free to finish that okay so our

746
00:29:40,630 --> 00:29:44,020
mitigation techniques so this is

747
00:29:42,640 --> 00:29:45,460
probably the most important part that

748
00:29:44,020 --> 00:29:47,980
you might want to consider this is my

749
00:29:45,460 --> 00:29:50,080
last slide actually so you want to make

750
00:29:47,980 --> 00:29:53,200
sure that you track outdated libraries

751
00:29:50,080 --> 00:29:56,620
and components for using snick or retire

752
00:29:53,200 --> 00:29:58,150
j/s or yarn or Bower and so on and you

753
00:29:56,620 --> 00:30:00,250
want to try and maintain a technology

754
00:29:58,150 --> 00:30:02,620
list asset registry list or in some way

755
00:30:00,250 --> 00:30:04,840
but there was an interesting talk from

756
00:30:02,620 --> 00:30:06,820
loco moco sec that basically talks about

757
00:30:04,840 --> 00:30:09,909
you know code province and application

758
00:30:06,820 --> 00:30:12,090
security in applications and what they

759
00:30:09,910 --> 00:30:14,320
tend to do is only do a subset of those

760
00:30:12,090 --> 00:30:16,360
dependencies because if you go too far

761
00:30:14,320 --> 00:30:18,460
down the chain there's less likely of a

762
00:30:16,360 --> 00:30:20,439
code sink actually happening from user

763
00:30:18,460 --> 00:30:22,360
input but then you can build a

764
00:30:20,440 --> 00:30:25,030
technology list through things like the

765
00:30:22,360 --> 00:30:28,000
CL is so you can use it for MPM there's

766
00:30:25,030 --> 00:30:30,250
little s for yong there's yarn Alice and

767
00:30:28,000 --> 00:30:33,910
yarn Y and then of course there's Bower

768
00:30:30,250 --> 00:30:36,040
Bower list as well and one thing that I

769
00:30:33,910 --> 00:30:38,050
also might want to recommend for you to

770
00:30:36,040 --> 00:30:40,690
do but it's obviously up to your

771
00:30:38,050 --> 00:30:42,340
interpretation has basically pin your

772
00:30:40,690 --> 00:30:43,810
dependency versions where possible

773
00:30:42,340 --> 00:30:45,760
because there was obviously an

774
00:30:43,810 --> 00:30:48,370
interesting scenario with event stream

775
00:30:45,760 --> 00:30:50,650
and event stream allow obviously was

776
00:30:48,370 --> 00:30:52,149
affected a lot of organizations but if

777
00:30:50,650 --> 00:30:53,980
you can pin your dependencies to

778
00:30:52,150 --> 00:30:56,110
something that you once knew was safe

779
00:30:53,980 --> 00:30:58,750
and include that in the package when

780
00:30:56,110 --> 00:31:01,629
other developers install it by using NPM

781
00:30:58,750 --> 00:31:03,550
shrink wrap or yarn lock they're going

782
00:31:01,630 --> 00:31:04,960
to use this exact same dependency

783
00:31:03,550 --> 00:31:06,970
version that you were using and

784
00:31:04,960 --> 00:31:09,850
therefore it may actually save them for

785
00:31:06,970 --> 00:31:12,400
being compromised so that was everything

786
00:31:09,850 --> 00:31:14,980
that I had the online version is at the

787
00:31:12,400 --> 00:31:16,870
bottom there's the 30-minute version and

788
00:31:14,980 --> 00:31:19,480
the hour version with multiple demos

789
00:31:16,870 --> 00:31:21,310
there so feel free to go ahead and take

790
00:31:19,480 --> 00:31:25,200
a look at it and if you have any

791
00:31:21,310 --> 00:31:25,200
questions I'll be around so thank you

