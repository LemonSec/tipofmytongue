1
00:00:00,030 --> 00:00:05,819
hello everybody Ryu nice to meet you

2
00:00:03,240 --> 00:00:07,400
I hope you're not starving it try to

3
00:00:05,819 --> 00:00:10,950
speed up a bit

4
00:00:07,400 --> 00:00:13,429
yes welcome everyone to of us and to my

5
00:00:10,950 --> 00:00:17,490
talk about securing web apps with modern

6
00:00:13,429 --> 00:00:21,000
platform security features today's talk

7
00:00:17,490 --> 00:00:22,650
will be about a couple new features in

8
00:00:21,000 --> 00:00:24,779
the web platform that you can actually

9
00:00:22,650 --> 00:00:29,310
use to protect your occasions and users

10
00:00:24,779 --> 00:00:31,109
from common weapon abilities and my name

11
00:00:29,310 --> 00:00:32,820
is Lukas weichselbraun I'm an

12
00:00:31,109 --> 00:00:36,390
information security engineer at Google

13
00:00:32,820 --> 00:00:37,980
I work in the Zurich office and my team

14
00:00:36,390 --> 00:00:40,860
is focusing on improving product

15
00:00:37,980 --> 00:00:43,680
security by targeting proactive projects

16
00:00:40,860 --> 00:00:49,170
with the aim of mitigating whole classes

17
00:00:43,680 --> 00:00:52,350
of parts and today I will split the talk

18
00:00:49,170 --> 00:00:54,780
into sections first a very quick run

19
00:00:52,350 --> 00:00:56,550
through common web security flaws not

20
00:00:54,780 --> 00:01:00,059
like explaining what they are but more

21
00:00:56,550 --> 00:01:01,500
like looking at VRP data and seeing

22
00:01:00,059 --> 00:01:03,718
which ones recommen and try to

23
00:01:01,500 --> 00:01:07,229
categorize them and map them to web

24
00:01:03,719 --> 00:01:08,760
platform security features and in the

25
00:01:07,229 --> 00:01:11,369
second part we'll talk about this web

26
00:01:08,760 --> 00:01:13,470
platform security features that are some

27
00:01:11,369 --> 00:01:14,970
of them are super new actually we

28
00:01:13,470 --> 00:01:17,729
probably not even have heard about them

29
00:01:14,970 --> 00:01:19,350
yet but it would be super cool to start

30
00:01:17,729 --> 00:01:22,920
a discussion about them maybe later

31
00:01:19,350 --> 00:01:26,220
outside as well so let's start with two

32
00:01:22,920 --> 00:01:29,490
security flaws Google has a VP program I

33
00:01:26,220 --> 00:01:31,470
think for over eight years now and it's

34
00:01:29,490 --> 00:01:33,960
not only a great source for you know

35
00:01:31,470 --> 00:01:36,030
finding bugs and fixing them but it also

36
00:01:33,960 --> 00:01:39,839
allows us to actually look at the root

37
00:01:36,030 --> 00:01:42,600
causes and identify new classes of parks

38
00:01:39,840 --> 00:01:44,549
and kind of try to get a feeling of

39
00:01:42,600 --> 00:01:48,390
trends within these back classes right

40
00:01:44,549 --> 00:01:52,829
so there's thousands of parks submitted

41
00:01:48,390 --> 00:01:55,680
every year and in particular the web

42
00:01:52,829 --> 00:01:58,919
application bugs are out of interest for

43
00:01:55,680 --> 00:02:00,689
us if you look at the left side of the

44
00:01:58,920 --> 00:02:04,380
chart you'll see that less than the half

45
00:02:00,689 --> 00:02:06,719
is non web parks like you know server

46
00:02:04,380 --> 00:02:08,878
side miss configuration or Android

47
00:02:06,719 --> 00:02:10,919
applications will not focus about these

48
00:02:08,878 --> 00:02:13,090
today will focus on the right side of

49
00:02:10,919 --> 00:02:16,799
the chart which is slightly more than 50

50
00:02:13,090 --> 00:02:21,730
cent and these are web a Democrat

51
00:02:16,800 --> 00:02:23,560
so of course cross-site scripting is a

52
00:02:21,730 --> 00:02:25,450
big offender in this space right and

53
00:02:23,560 --> 00:02:26,920
it's still around

54
00:02:25,450 --> 00:02:28,839
and then there's other things like

55
00:02:26,920 --> 00:02:32,170
cross-site request forgery click

56
00:02:28,840 --> 00:02:33,849
checking and other web box which we'll

57
00:02:32,170 --> 00:02:37,750
cover in a little bit more detail in the

58
00:02:33,849 --> 00:02:39,730
later sections so the first big category

59
00:02:37,750 --> 00:02:41,830
is of course injection bugs right and

60
00:02:39,730 --> 00:02:43,899
I'm not going into detail about what

61
00:02:41,830 --> 00:02:47,620
cross-site scripting is because I assume

62
00:02:43,900 --> 00:02:50,170
most of you know the only thing I want

63
00:02:47,620 --> 00:02:52,569
to mention is the second type of process

64
00:02:50,170 --> 00:02:53,920
scripting lockdown based XSS is actually

65
00:02:52,569 --> 00:02:55,660
becoming more relevant these days

66
00:02:53,920 --> 00:02:57,280
because more and more code is moving

67
00:02:55,660 --> 00:02:59,290
from the server side to the client side

68
00:02:57,280 --> 00:03:01,269
and it's actually quite easy for

69
00:02:59,290 --> 00:03:03,250
developers to introduce non based XSS by

70
00:03:01,269 --> 00:03:05,980
accident and it's on the other hand very

71
00:03:03,250 --> 00:03:08,940
hard for security reviewers to spot

72
00:03:05,980 --> 00:03:13,359
these bugs in code reviews right so

73
00:03:08,940 --> 00:03:16,480
that's cross scripting and part of the

74
00:03:13,360 --> 00:03:20,139
talk will be about to prevent and

75
00:03:16,480 --> 00:03:22,450
mitigate these bugs but the larger part

76
00:03:20,139 --> 00:03:24,910
of the talk will be about insufficient

77
00:03:22,450 --> 00:03:28,230
isolation and new web platform features

78
00:03:24,910 --> 00:03:32,349
that help you to address this category

79
00:03:28,230 --> 00:03:34,869
so the classical example here is cross a

80
00:03:32,349 --> 00:03:38,220
request forgery right and I'm not going

81
00:03:34,870 --> 00:03:42,459
into the detail how that works but the

82
00:03:38,220 --> 00:03:45,000
very important feature of it is that the

83
00:03:42,459 --> 00:03:50,019
server has not enough information to

84
00:03:45,000 --> 00:03:53,470
actually tell apart a request from your

85
00:03:50,019 --> 00:03:56,950
lecture sites or origin compared to a

86
00:03:53,470 --> 00:03:59,230
request that originates from evil.com

87
00:03:56,950 --> 00:04:01,988
side right like from a random origin on

88
00:03:59,230 --> 00:04:04,418
the Internet so evil.com can put a form

89
00:04:01,989 --> 00:04:06,700
that looks exactly the same on their

90
00:04:04,419 --> 00:04:10,060
side and have JavaScript submit that

91
00:04:06,700 --> 00:04:11,410
form and for the server since the

92
00:04:10,060 --> 00:04:13,510
browser will append cookies to both

93
00:04:11,410 --> 00:04:16,180
requests these two requests look exactly

94
00:04:13,510 --> 00:04:17,858
the same right and one of the web

95
00:04:16,180 --> 00:04:21,478
platform mechanism we want to present

96
00:04:17,858 --> 00:04:24,640
today is exactly about this so and

97
00:04:21,478 --> 00:04:27,050
cross-site request forgery is just one

98
00:04:24,640 --> 00:04:31,990
of these isolation related

99
00:04:27,050 --> 00:04:36,169
shoes there's also cross-site leaks

100
00:04:31,990 --> 00:04:37,909
timing attacks and lately also a couple

101
00:04:36,169 --> 00:04:40,669
of new classes of vulnerabilities that

102
00:04:37,909 --> 00:04:42,680
are have popped up that also fall into

103
00:04:40,669 --> 00:04:46,940
this category of insufficient isolation

104
00:04:42,680 --> 00:04:50,449
in the browser platform the most known

105
00:04:46,940 --> 00:04:56,330
new one is probably Spectre which is a

106
00:04:50,449 --> 00:04:57,949
micro architectural issue and yes so you

107
00:04:56,330 --> 00:04:59,960
could say like this chart looks great

108
00:04:57,949 --> 00:05:02,240
but it's maybe a bit Google biased and

109
00:04:59,960 --> 00:05:04,789
you're right it's the data from our VIP

110
00:05:02,240 --> 00:05:09,620
so it's it has a Google bias but if you

111
00:05:04,789 --> 00:05:11,870
look at other ERP data for example from

112
00:05:09,620 --> 00:05:15,169
hacker one you will see that they

113
00:05:11,870 --> 00:05:16,490
actually see similar trends when it

114
00:05:15,169 --> 00:05:19,370
comes to cross-site scripting cross-site

115
00:05:16,490 --> 00:05:22,520
request forgery etc etcetera right so

116
00:05:19,370 --> 00:05:26,030
this is still a big issue for industry

117
00:05:22,520 --> 00:05:28,008
and also our friends at Mozilla report

118
00:05:26,030 --> 00:05:32,000
similar statistics about these

119
00:05:28,009 --> 00:05:35,419
vulnerabilities so what we want to do

120
00:05:32,000 --> 00:05:38,419
now is to address these classes of parks

121
00:05:35,419 --> 00:05:41,330
on in the web platform in the browser

122
00:05:38,419 --> 00:05:45,169
right and there's a couple of new things

123
00:05:41,330 --> 00:05:48,380
that have been already launched and are

124
00:05:45,169 --> 00:05:53,029
coming up soon which I want to show you

125
00:05:48,380 --> 00:05:55,990
today and as I mentioned we basically

126
00:05:53,029 --> 00:05:59,960
have divided this up into two categories

127
00:05:55,990 --> 00:06:04,069
isolation mechanisms and injection

128
00:05:59,960 --> 00:06:06,258
defenses in the browser and in this talk

129
00:06:04,069 --> 00:06:09,319
at OVAs I will mostly focus on the

130
00:06:06,259 --> 00:06:12,349
isolation part mostly because of timing

131
00:06:09,319 --> 00:06:14,240
reasons but if you want to see the full

132
00:06:12,349 --> 00:06:18,620
fledge to talk you can also get

133
00:06:14,240 --> 00:06:21,770
recording from Google i/o and so let's

134
00:06:18,620 --> 00:06:26,120
start with isolation so you might ask

135
00:06:21,770 --> 00:06:30,219
why do we need isolation and the answer

136
00:06:26,120 --> 00:06:33,469
to that is that because of certain

137
00:06:30,219 --> 00:06:35,750
issues in the way the browser's isolate

138
00:06:33,469 --> 00:06:37,940
different origins from each other

139
00:06:35,750 --> 00:06:39,949
there is move abilities like cross

140
00:06:37,940 --> 00:06:41,270
request poetry cross-site script

141
00:06:39,949 --> 00:06:43,330
inclusion

142
00:06:41,270 --> 00:06:46,130
click checking web timing attacks

143
00:06:43,330 --> 00:06:49,849
Spectre they all fall into that category

144
00:06:46,130 --> 00:06:53,900
and in particular into this subcategory

145
00:06:49,850 --> 00:06:56,630
of attacks on resources so attacks and

146
00:06:53,900 --> 00:07:00,590
resources are usually caused by the fact

147
00:06:56,630 --> 00:07:02,570
that any site on the Internet can load a

148
00:07:00,590 --> 00:07:04,940
resource from your server and your

149
00:07:02,570 --> 00:07:07,219
server cannot tell apart that resource

150
00:07:04,940 --> 00:07:10,310
load from a recess load originating from

151
00:07:07,220 --> 00:07:14,830
your own side right so there's a tax on

152
00:07:10,310 --> 00:07:18,440
resources and a second subcategory of

153
00:07:14,830 --> 00:07:22,609
isolation related attacks are attacks on

154
00:07:18,440 --> 00:07:25,040
Windows more specifically on attacks

155
00:07:22,610 --> 00:07:27,530
based on like having a reference to a

156
00:07:25,040 --> 00:07:29,030
window of a different origin so the web

157
00:07:27,530 --> 00:07:32,059
is very open when it comes to that

158
00:07:29,030 --> 00:07:35,780
regard any site on the Internet can open

159
00:07:32,060 --> 00:07:37,310
a new window and navigate that window to

160
00:07:35,780 --> 00:07:41,270
your document right or to your domain

161
00:07:37,310 --> 00:07:44,060
and that per se is fine but by doing so

162
00:07:41,270 --> 00:07:47,349
that site will still have a reference of

163
00:07:44,060 --> 00:07:49,640
in the reference to your window and

164
00:07:47,350 --> 00:07:51,920
because of that being the reference you

165
00:07:49,640 --> 00:07:54,169
can do a couple of things that are may

166
00:07:51,920 --> 00:07:58,280
or may not be surprising to you right

167
00:07:54,170 --> 00:08:02,810
for example you can count frames in your

168
00:07:58,280 --> 00:08:05,770
site the original window can also do

169
00:08:02,810 --> 00:08:09,140
some other you know side channel attacks

170
00:08:05,770 --> 00:08:10,849
often used in cross-site search the new

171
00:08:09,140 --> 00:08:14,510
cross had search attacks they can do

172
00:08:10,850 --> 00:08:17,060
like tap nabbing etc and especially for

173
00:08:14,510 --> 00:08:20,210
browsers like Firefox that don't have a

174
00:08:17,060 --> 00:08:23,180
full side isolation implemented yet it

175
00:08:20,210 --> 00:08:25,219
also means that they cannot put the new

176
00:08:23,180 --> 00:08:28,460
window document in a separate process

177
00:08:25,220 --> 00:08:31,910
and protect you from Specter because of

178
00:08:28,460 --> 00:08:34,760
this window reference so the second

179
00:08:31,910 --> 00:08:38,440
platform mechanism I'll show in a bit

180
00:08:34,760 --> 00:08:41,450
will be about that particular feature

181
00:08:38,440 --> 00:08:44,300
but before we get into that a super

182
00:08:41,450 --> 00:08:46,850
quick review on origins and sites I

183
00:08:44,300 --> 00:08:49,250
assume most of you know what same-origin

184
00:08:46,850 --> 00:08:52,760
means but maybe not everyone knows about

185
00:08:49,250 --> 00:08:54,560
the concept of same site so same origin

186
00:08:52,760 --> 00:08:58,339
is basically the two

187
00:08:54,560 --> 00:09:01,550
of scheme host and port and whenever

188
00:08:58,339 --> 00:09:03,709
two-year-olds have the same values in

189
00:09:01,550 --> 00:09:05,748
these tuple they're considered same

190
00:09:03,709 --> 00:09:08,569
origin for example dr. dopler google.com

191
00:09:05,749 --> 00:09:12,860
stash foo is same origin to adapt to

192
00:09:08,569 --> 00:09:16,009
deploy Google Chrome stash bar same site

193
00:09:12,860 --> 00:09:20,509
is similar but different in the sense

194
00:09:16,009 --> 00:09:23,329
that neighboring subdomains on the same

195
00:09:20,509 --> 00:09:25,189
ret registerable domain would be

196
00:09:23,329 --> 00:09:27,439
considered same site so mail that

197
00:09:25,189 --> 00:09:29,899
google.com and photostat google.com

198
00:09:27,439 --> 00:09:32,899
would be considered same site but not

199
00:09:29,899 --> 00:09:36,559
same origin and basically everything

200
00:09:32,899 --> 00:09:38,360
else is just cross-site and this

201
00:09:36,559 --> 00:09:40,339
distinction is very important because

202
00:09:38,360 --> 00:09:42,230
based on that the browser enforces

203
00:09:40,339 --> 00:09:46,999
different isolation mechanisms on your

204
00:09:42,230 --> 00:09:50,240
side right and with that we come to the

205
00:09:46,999 --> 00:09:53,420
first new web platform feature to

206
00:09:50,240 --> 00:09:57,879
address the resource isolation problem

207
00:09:53,420 --> 00:10:01,360
we showed you on the first slide and

208
00:09:57,879 --> 00:10:04,939
it's actually quite simple it is just

209
00:10:01,360 --> 00:10:08,600
free new request headers set by the

210
00:10:04,939 --> 00:10:12,980
browser that basically gives the server

211
00:10:08,600 --> 00:10:16,009
a chance to are to reason about the

212
00:10:12,980 --> 00:10:16,519
context and the source of an HTTP

213
00:10:16,009 --> 00:10:19,970
request

214
00:10:16,519 --> 00:10:23,449
so implementation wise it's really

215
00:10:19,970 --> 00:10:27,529
simple it's just free request headers

216
00:10:23,449 --> 00:10:30,800
the first one is fetch site this is sent

217
00:10:27,529 --> 00:10:33,680
by the browser for every request and it

218
00:10:30,800 --> 00:10:35,779
basically just indicates the source of a

219
00:10:33,680 --> 00:10:38,540
request right it just tells the server

220
00:10:35,779 --> 00:10:41,000
this request was made like cross-site or

221
00:10:38,540 --> 00:10:43,759
for example this request came from your

222
00:10:41,000 --> 00:10:46,550
own site from the same origin and that

223
00:10:43,759 --> 00:10:48,860
is extremely helpful for the server

224
00:10:46,550 --> 00:10:51,199
because suddenly in the cross-site

225
00:10:48,860 --> 00:10:53,929
request forgery in case the server can

226
00:10:51,199 --> 00:10:56,569
actually reason and say oh wow this

227
00:10:53,929 --> 00:11:00,649
request came from evil calm and not from

228
00:10:56,569 --> 00:11:03,110
mysite.com so I may just want to block

229
00:11:00,649 --> 00:11:05,600
it or strip cookies or do whatever with

230
00:11:03,110 --> 00:11:07,689
it right you can have custom logic on

231
00:11:05,600 --> 00:11:11,789
the server dealing with that information

232
00:11:07,689 --> 00:11:15,539
the second header is sec fetch mode

233
00:11:11,789 --> 00:11:19,389
indicating the type of the request and

234
00:11:15,539 --> 00:11:21,339
most simply put this means this header

235
00:11:19,389 --> 00:11:25,029
indicates if this was like a resource

236
00:11:21,339 --> 00:11:27,159
load or if it was a navigation and we'll

237
00:11:25,029 --> 00:11:30,069
see in a second that this information is

238
00:11:27,159 --> 00:11:32,199
also quite handy to protect on the

239
00:11:30,069 --> 00:11:35,139
server side against a couple of web

240
00:11:32,199 --> 00:11:38,498
vulnerabilities and the last header is

241
00:11:35,139 --> 00:11:41,769
sec fetch user which basically informs

242
00:11:38,499 --> 00:11:44,019
the server if the navigation was caused

243
00:11:41,769 --> 00:11:46,659
as a direct consequence of a user

244
00:11:44,019 --> 00:11:50,769
interaction like a click or a key press

245
00:11:46,659 --> 00:11:55,569
or if it was you know JavaScript based

246
00:11:50,769 --> 00:11:59,439
or something else so let's look at a

247
00:11:55,569 --> 00:12:04,779
super simple example for this on the top

248
00:11:59,439 --> 00:12:09,549
you see same origin resource load site

249
00:12:04,779 --> 00:12:12,699
dot example loads a file from site dot

250
00:12:09,549 --> 00:12:15,749
example server and by that the browser

251
00:12:12,699 --> 00:12:18,968
sends an additional request header

252
00:12:15,749 --> 00:12:21,909
called sec fetch site with the value

253
00:12:18,969 --> 00:12:24,999
same origin because it's the same origin

254
00:12:21,909 --> 00:12:26,889
request and the dessert the server can

255
00:12:24,999 --> 00:12:29,499
say Belle same origin requests are

256
00:12:26,889 --> 00:12:31,989
allowed that's perfectly fine

257
00:12:29,499 --> 00:12:34,659
the example below is actually a

258
00:12:31,989 --> 00:12:38,259
cross-site request evil.com request

259
00:12:34,659 --> 00:12:40,689
something from sighted example and by

260
00:12:38,259 --> 00:12:43,779
doing so the user's browser will

261
00:12:40,689 --> 00:12:46,029
basically indicate on the request that

262
00:12:43,779 --> 00:12:50,559
this request was made across site

263
00:12:46,029 --> 00:12:56,289
because the host and of the request and

264
00:12:50,559 --> 00:12:58,629
the actual source don't match so that's

265
00:12:56,289 --> 00:13:01,059
still very simple and simple information

266
00:12:58,629 --> 00:13:03,249
but you can actually use these building

267
00:13:01,059 --> 00:13:06,459
blocks to build some quite powerful

268
00:13:03,249 --> 00:13:08,859
server-side logic to protect web

269
00:13:06,459 --> 00:13:13,508
applications against a couple of common

270
00:13:08,859 --> 00:13:16,179
web application security flaws and that

271
00:13:13,509 --> 00:13:20,290
example here is a little bit simplified

272
00:13:16,179 --> 00:13:22,930
but this basically prevents a car

273
00:13:20,290 --> 00:13:26,980
full of resource isolation related

274
00:13:22,930 --> 00:13:28,630
issues and most commonly known like it

275
00:13:26,980 --> 00:13:32,050
will prevent across that request for

276
00:13:28,630 --> 00:13:35,070
tree across the script inclusion click

277
00:13:32,050 --> 00:13:38,920
checking and similar issues right

278
00:13:35,070 --> 00:13:41,620
the logic is actually easy the first

279
00:13:38,920 --> 00:13:43,479
condition just checks if the sec fetch

280
00:13:41,620 --> 00:13:46,959
header request header is available

281
00:13:43,480 --> 00:13:49,269
because if not it's a browser that does

282
00:13:46,959 --> 00:13:51,219
not support this and will just allow the

283
00:13:49,269 --> 00:13:53,319
request because we don't want to break

284
00:13:51,220 --> 00:13:56,230
the side for you know users on all the

285
00:13:53,319 --> 00:13:57,490
browsers for example but eventually when

286
00:13:56,230 --> 00:14:00,600
all the browser's will support a feature

287
00:13:57,490 --> 00:14:04,120
this like dis acuity will also be

288
00:14:00,600 --> 00:14:07,990
available to two more users

289
00:14:04,120 --> 00:14:11,170
the second condition is basically there

290
00:14:07,990 --> 00:14:13,899
to ensure that all same site or same

291
00:14:11,170 --> 00:14:16,329
origin requests are allowed to proceed

292
00:14:13,899 --> 00:14:18,970
right so if your site makes a request

293
00:14:16,329 --> 00:14:20,829
for JavaScript or navigation or whatever

294
00:14:18,970 --> 00:14:23,740
right the server will just normally

295
00:14:20,829 --> 00:14:27,160
respond to it because it's the same

296
00:14:23,740 --> 00:14:30,550
origin or same site navigation and the

297
00:14:27,160 --> 00:14:34,029
third one basically ensures that cross

298
00:14:30,550 --> 00:14:37,089
site navigation top-level navigation is

299
00:14:34,029 --> 00:14:39,730
also allowed if you don't have the third

300
00:14:37,089 --> 00:14:41,560
condition your site will basically be

301
00:14:39,730 --> 00:14:43,589
siloed in the Internet and no one can

302
00:14:41,560 --> 00:14:45,939
will be able to link to your side right

303
00:14:43,589 --> 00:14:49,660
there's some use cases for that as well

304
00:14:45,940 --> 00:14:51,579
but in the normal case you still want

305
00:14:49,660 --> 00:14:55,029
other places to be able to link to your

306
00:14:51,579 --> 00:14:57,310
site so you still would allow top-level

307
00:14:55,029 --> 00:15:01,779
navigation even if it happens across

308
00:14:57,310 --> 00:15:04,569
origin so everything else is blocked

309
00:15:01,779 --> 00:15:08,649
what that means for example if you had

310
00:15:04,569 --> 00:15:11,229
take the XSS I example if evil comm

311
00:15:08,649 --> 00:15:13,269
loads a JavaScript from your site and

312
00:15:11,230 --> 00:15:17,829
the browser sends cookies with that

313
00:15:13,269 --> 00:15:20,170
request right your server will basically

314
00:15:17,829 --> 00:15:22,630
block that request because it's a cross

315
00:15:20,170 --> 00:15:24,939
origin resource load and you did not

316
00:15:22,630 --> 00:15:28,750
explicitly allow this here

317
00:15:24,939 --> 00:15:30,279
so there's actually many many more

318
00:15:28,750 --> 00:15:33,730
things you can do with fetch metadata

319
00:15:30,279 --> 00:15:37,929
but this is like a trivial example

320
00:15:33,730 --> 00:15:41,069
to address resource resource isolation

321
00:15:37,929 --> 00:15:43,629
related issues with that mechanism

322
00:15:41,069 --> 00:15:46,118
usually you would roll out a fetch

323
00:15:43,629 --> 00:15:49,600
metadata based protection in the form of

324
00:15:46,119 --> 00:15:52,689
a middleware on the server side you

325
00:15:49,600 --> 00:15:55,660
would start monitoring blocked requests

326
00:15:52,689 --> 00:15:57,549
not actually blocking them and review

327
00:15:55,660 --> 00:16:00,129
all the requests that actually got

328
00:15:57,549 --> 00:16:02,290
blocked right because potentially your

329
00:16:00,129 --> 00:16:04,359
application has endpoints that are meant

330
00:16:02,290 --> 00:16:06,358
for cross-origin communication for

331
00:16:04,359 --> 00:16:08,819
example if you have a course endpoint

332
00:16:06,359 --> 00:16:10,419
that is meant for cross origin

333
00:16:08,819 --> 00:16:12,189
communication and you would probably

334
00:16:10,419 --> 00:16:15,029
want to whitelist that endpoint from

335
00:16:12,189 --> 00:16:17,829
that logic to still allow that right and

336
00:16:15,029 --> 00:16:20,319
if you've done if you if you have done

337
00:16:17,829 --> 00:16:23,498
that you would switch to enforcement

338
00:16:20,319 --> 00:16:26,139
mode and actually you know for example

339
00:16:23,499 --> 00:16:28,689
block all requests that don't fulfill

340
00:16:26,139 --> 00:16:30,369
this criteria or you can also do

341
00:16:28,689 --> 00:16:33,129
something custom like you know stripping

342
00:16:30,369 --> 00:16:36,339
cookies redirecting to the you know

343
00:16:33,129 --> 00:16:41,109
entry site or doing other things right

344
00:16:36,339 --> 00:16:42,850
and also very important to note here you

345
00:16:41,109 --> 00:16:44,739
would also have to set the Barry header

346
00:16:42,850 --> 00:16:47,949
for sec fetch site and sec fetch mode

347
00:16:44,739 --> 00:16:51,549
and this also has a very nice side

348
00:16:47,949 --> 00:16:54,599
effect that browsers will basically be

349
00:16:51,549 --> 00:16:58,269
forced to have a per origin cache

350
00:16:54,600 --> 00:17:02,309
compared to having a cache for all sites

351
00:16:58,269 --> 00:17:04,870
right and implicitly by that you will

352
00:17:02,309 --> 00:17:07,599
prevent a couple of excess search

353
00:17:04,869 --> 00:17:11,879
related issues just by ensuring that

354
00:17:07,599 --> 00:17:15,309
stuff is not cached across origins and

355
00:17:11,880 --> 00:17:19,630
so fetch metadata shipping in chrome in

356
00:17:15,309 --> 00:17:21,970
the next version in 76 but you can

357
00:17:19,630 --> 00:17:24,419
already play with it by enabling the

358
00:17:21,970 --> 00:17:28,720
experimental that platform features flag

359
00:17:24,419 --> 00:17:32,590
and yes there's also already two

360
00:17:28,720 --> 00:17:34,960
projects on github that provide a proof

361
00:17:32,590 --> 00:17:39,760
of concept implementation for a resource

362
00:17:34,960 --> 00:17:43,539
isolation based middle we're using fetch

363
00:17:39,760 --> 00:17:46,720
metadata give it a try

364
00:17:43,539 --> 00:17:47,500
give us feedback and super curious to

365
00:17:46,720 --> 00:17:51,070
hear here what

366
00:17:47,500 --> 00:17:55,180
think about the approach and with that

367
00:17:51,070 --> 00:17:57,040
I'm switching to the next feature new

368
00:17:55,180 --> 00:18:00,910
feature which is cross-origin opener

369
00:17:57,040 --> 00:18:04,600
policy and that in particular addresses

370
00:18:00,910 --> 00:18:05,560
the isolation issues related to window

371
00:18:04,600 --> 00:18:08,860
references

372
00:18:05,560 --> 00:18:12,730
the second category we had the slides

373
00:18:08,860 --> 00:18:15,250
before so what is this about as we

374
00:18:12,730 --> 00:18:17,680
already said with beginning any site on

375
00:18:15,250 --> 00:18:19,720
the Internet can open your site in a new

376
00:18:17,680 --> 00:18:22,150
window and have a reference to that

377
00:18:19,720 --> 00:18:24,310
window and with that reference they can

378
00:18:22,150 --> 00:18:27,490
you know they can send post messages

379
00:18:24,310 --> 00:18:31,450
they can count frames they may be

380
00:18:27,490 --> 00:18:34,300
leveraged other side channels to you

381
00:18:31,450 --> 00:18:35,950
know learn about something about your

382
00:18:34,300 --> 00:18:37,690
site for example they could find out if

383
00:18:35,950 --> 00:18:39,100
the user is logged in or not based on

384
00:18:37,690 --> 00:18:41,260
some things

385
00:18:39,100 --> 00:18:44,699
and they can also navigate your site

386
00:18:41,260 --> 00:18:47,860
away to an arbitrary other site and

387
00:18:44,700 --> 00:18:50,440
there's a very easy way to prevent that

388
00:18:47,860 --> 00:18:53,620
and that's the cross origin open a

389
00:18:50,440 --> 00:18:56,770
policy response header you basically

390
00:18:53,620 --> 00:19:00,629
second set this header to same origin or

391
00:18:56,770 --> 00:19:04,960
same site and by that any cross site

392
00:19:00,630 --> 00:19:06,880
page that opens your window we'll still

393
00:19:04,960 --> 00:19:08,830
be able to open the window right but it

394
00:19:06,880 --> 00:19:11,170
will not have the reference anymore and

395
00:19:08,830 --> 00:19:13,629
by that it will not be able to navigate

396
00:19:11,170 --> 00:19:18,480
your window on your site anymore

397
00:19:13,630 --> 00:19:21,160
and especially nice the same site value

398
00:19:18,480 --> 00:19:23,200
can be used if you for example have a

399
00:19:21,160 --> 00:19:25,810
cup of subdomains and they you know

400
00:19:23,200 --> 00:19:27,190
communicate through post message and you

401
00:19:25,810 --> 00:19:32,320
would still have on to allow that right

402
00:19:27,190 --> 00:19:34,990
so this response header is quite new

403
00:19:32,320 --> 00:19:37,389
it's already implemented in Firefox

404
00:19:34,990 --> 00:19:41,560
nightly so we can try it

405
00:19:37,390 --> 00:19:44,200
chrome is working on it but as of now I

406
00:19:41,560 --> 00:19:47,770
think there's nothing implemented yet

407
00:19:44,200 --> 00:19:50,020
but we'll hope it will come soon and and

408
00:19:47,770 --> 00:19:52,900
not a very nice side effect of setting

409
00:19:50,020 --> 00:19:55,870
this response header is that browsers

410
00:19:52,900 --> 00:19:57,870
like Firefox who don't have a full side

411
00:19:55,870 --> 00:20:00,659
isolation to protect against Specter

412
00:19:57,870 --> 00:20:03,719
will be able to put

413
00:20:00,660 --> 00:20:07,350
the open window or you know the other

414
00:20:03,720 --> 00:20:10,560
domain in the different browsing context

415
00:20:07,350 --> 00:20:13,439
group which means the browser will be

416
00:20:10,560 --> 00:20:16,169
able to separate the domains the origins

417
00:20:13,440 --> 00:20:19,050
in with different processes right and by

418
00:20:16,170 --> 00:20:23,460
that protecting against specter like

419
00:20:19,050 --> 00:20:25,230
attacks so especially for Firefox users

420
00:20:23,460 --> 00:20:26,610
this header would be quite interesting

421
00:20:25,230 --> 00:20:29,400
as well because I think it will take

422
00:20:26,610 --> 00:20:34,129
some more time for Firefox to actually

423
00:20:29,400 --> 00:20:38,910
natively implement a full side isolation

424
00:20:34,130 --> 00:20:43,500
yes and with that I will do a couple

425
00:20:38,910 --> 00:20:46,410
more slide on injection defenses there

426
00:20:43,500 --> 00:20:49,130
is CSP which you can use to protect

427
00:20:46,410 --> 00:20:55,830
against stored and reflected XSS and

428
00:20:49,130 --> 00:20:59,520
partially dom-based xss it's it was a

429
00:20:55,830 --> 00:21:01,560
long long ride for CSP I don't know I

430
00:20:59,520 --> 00:21:02,970
guess some of you have seen CSP and work

431
00:21:01,560 --> 00:21:07,460
with CSP before and you have seen

432
00:21:02,970 --> 00:21:10,320
policies like that it's it's not great

433
00:21:07,460 --> 00:21:12,630
this type of policies are super bad

434
00:21:10,320 --> 00:21:14,370
because they are trivially by possible

435
00:21:12,630 --> 00:21:18,120
they are incredibly hard to maintain

436
00:21:14,370 --> 00:21:20,750
without breaking things and yeah they're

437
00:21:18,120 --> 00:21:24,479
just not really worth your time right

438
00:21:20,750 --> 00:21:27,990
what we would suggest instead is using a

439
00:21:24,480 --> 00:21:30,780
CSP based analysis because it has two

440
00:21:27,990 --> 00:21:33,540
critical advantage advantages and the

441
00:21:30,780 --> 00:21:36,860
first is that this policy does not need

442
00:21:33,540 --> 00:21:39,600
configuration or / endpoint or per site

443
00:21:36,860 --> 00:21:41,189
as a matter of fact we use almost the

444
00:21:39,600 --> 00:21:43,770
same policy across all Google

445
00:21:41,190 --> 00:21:47,520
applications and the second thing is

446
00:21:43,770 --> 00:21:51,629
it's not susceptible to the right list

447
00:21:47,520 --> 00:21:54,030
based CSP PI passes which the previous

448
00:21:51,630 --> 00:21:58,110
policy and the whitelist based policy

449
00:21:54,030 --> 00:22:00,930
would be so we actually use this type of

450
00:21:58,110 --> 00:22:04,050
policy and almost 60% of all outgoing

451
00:22:00,930 --> 00:22:06,420
Google text HTML traffic and I think on

452
00:22:04,050 --> 00:22:09,060
over 100 domains and it was quite

453
00:22:06,420 --> 00:22:11,250
effective just in the last 12 months it

454
00:22:09,060 --> 00:22:14,460
actually blocked 20 high-risk XSS box

455
00:22:11,250 --> 00:22:17,280
and for us that's very valuable time to

456
00:22:14,460 --> 00:22:20,610
actually fix the bugs and preventing

457
00:22:17,280 --> 00:22:22,410
them from being exploited so I'm not

458
00:22:20,610 --> 00:22:25,740
going into the details how to roll out

459
00:22:22,410 --> 00:22:27,930
this ESP based on ounces but there is a

460
00:22:25,740 --> 00:22:30,600
nice write-up on CSP debrief google.com

461
00:22:27,930 --> 00:22:33,900
that gives you a step-by-step guide on

462
00:22:30,600 --> 00:22:35,699
how to do that and I also strongly

463
00:22:33,900 --> 00:22:37,560
recommend if you already have a CSP or

464
00:22:35,700 --> 00:22:40,530
if you diverge from the template to

465
00:22:37,560 --> 00:22:43,200
actually use the CSP evaluator because

466
00:22:40,530 --> 00:22:45,750
it actually is very useful to spot

467
00:22:43,200 --> 00:22:48,150
common bypasses in a policy that make it

468
00:22:45,750 --> 00:22:49,560
completely by possible so whenever you

469
00:22:48,150 --> 00:22:51,600
have a red exclamation mark in your

470
00:22:49,560 --> 00:22:54,200
policy you might want to do something

471
00:22:51,600 --> 00:22:57,270
about it or to steal into policy and

472
00:22:54,200 --> 00:23:00,240
yeah the till the our is the nice thing

473
00:22:57,270 --> 00:23:01,410
is is like always the same except of the

474
00:23:00,240 --> 00:23:04,470
nonce which has to change on error

475
00:23:01,410 --> 00:23:07,680
response it's definitely better than

476
00:23:04,470 --> 00:23:09,420
widely spaced CSP and it's a good

477
00:23:07,680 --> 00:23:12,510
mitigation against stored and reflects

478
00:23:09,420 --> 00:23:15,000
to X XSS and if the new CSP free strict

479
00:23:12,510 --> 00:23:18,540
dynamic javert you actually can use the

480
00:23:15,000 --> 00:23:20,580
non-space CSP even in the case when

481
00:23:18,540 --> 00:23:21,210
you'll have third-party JavaScript code

482
00:23:20,580 --> 00:23:23,699
that loads

483
00:23:21,210 --> 00:23:26,630
resources right like payment integration

484
00:23:23,700 --> 00:23:29,340
host using javascript obsidians or

485
00:23:26,630 --> 00:23:31,710
widgets right in that case earlier you

486
00:23:29,340 --> 00:23:34,770
couldn't use a nonce only CSP but we've

487
00:23:31,710 --> 00:23:38,160
strict dynamic you can also now use a

488
00:23:34,770 --> 00:23:41,129
non space CSP in these cases and here is

489
00:23:38,160 --> 00:23:43,650
a small pitch for another talk there's

490
00:23:41,130 --> 00:23:47,180
also trusted types coming up in the web

491
00:23:43,650 --> 00:23:49,710
platform and it's an amazing new feature

492
00:23:47,180 --> 00:23:51,930
especially extremely well-suited for

493
00:23:49,710 --> 00:23:56,130
preventing it against don't based XSS

494
00:23:51,930 --> 00:23:59,070
and there's a talk by Christophe Cote

495
00:23:56,130 --> 00:24:02,070
ovitch and Mike Samuel I think after the

496
00:23:59,070 --> 00:24:03,780
lunch break and of course I don't want

497
00:24:02,070 --> 00:24:10,560
to steal their thunder right so you

498
00:24:03,780 --> 00:24:13,139
should sorry whole c130 so you should

499
00:24:10,560 --> 00:24:14,370
totally check that out it's one of my

500
00:24:13,140 --> 00:24:18,810
favorite favorite new web platform

501
00:24:14,370 --> 00:24:21,179
features and what's really nice about it

502
00:24:18,810 --> 00:24:24,090
is it also plays very well with the

503
00:24:21,180 --> 00:24:28,050
classical CSP so you can set a single

504
00:24:24,090 --> 00:24:31,560
policy with trusted types and nonces

505
00:24:28,050 --> 00:24:34,050
and together they are very effective in

506
00:24:31,560 --> 00:24:36,950
actually preventing and mitigating the

507
00:24:34,050 --> 00:24:42,360
vast majority of XSS issues right so

508
00:24:36,950 --> 00:24:46,770
that should be your 2019 goal and yes

509
00:24:42,360 --> 00:24:48,929
with that I will wrap up and basically

510
00:24:46,770 --> 00:24:50,820
you can now wake up again I put

511
00:24:48,930 --> 00:24:52,440
everything on a single slides you can

512
00:24:50,820 --> 00:24:55,889
take a photo and pretend you know

513
00:24:52,440 --> 00:25:00,180
everything about these features now the

514
00:24:55,890 --> 00:25:02,760
TLDR is that you can use CSP free for

515
00:25:00,180 --> 00:25:06,090
reflected and stored XSS trusted types

516
00:25:02,760 --> 00:25:08,010
for Dom based XSS fetch metadata request

517
00:25:06,090 --> 00:25:10,800
header to protect against isolation

518
00:25:08,010 --> 00:25:13,110
issues that are based on resource loads

519
00:25:10,800 --> 00:25:15,450
and you can use cross-origin open a

520
00:25:13,110 --> 00:25:18,629
policy to protect your window references

521
00:25:15,450 --> 00:25:21,300
from tampering and with that I wanted to

522
00:25:18,630 --> 00:25:25,290
thank you for being here today the

523
00:25:21,300 --> 00:25:28,919
slides are online as well and I put some

524
00:25:25,290 --> 00:25:30,300
of the links also here just in case you

525
00:25:28,920 --> 00:25:33,780
were not able to note them down

526
00:25:30,300 --> 00:25:36,889
previously and I will hang around a bit

527
00:25:33,780 --> 00:25:41,790
longer in case you have questions and

528
00:25:36,890 --> 00:25:47,510
sorry ok even have some time for

529
00:25:41,790 --> 00:25:47,510
questions if you are some so yeah

530
00:25:53,669 --> 00:25:56,669
sure

531
00:26:03,220 --> 00:26:10,490
so until the slide until the slide that

532
00:26:06,080 --> 00:26:15,199
you have that it's clickable and it was

533
00:26:10,490 --> 00:26:27,289
a get request clickable was it fetch

534
00:26:15,200 --> 00:26:29,509
metadata yes one second so was it that

535
00:26:27,289 --> 00:26:33,408
slide you just passed it this one next

536
00:26:29,509 --> 00:26:37,850
one yeah yes so so the third condition

537
00:26:33,409 --> 00:26:39,259
why does it have to be a get so this is

538
00:26:37,850 --> 00:26:43,009
mostly for cross-site request forgery

539
00:26:39,259 --> 00:26:45,110
protection so classical cross-site

540
00:26:43,009 --> 00:26:48,919
request forgery case is a postmessage

541
00:26:45,110 --> 00:26:51,229
cross origin and if you would for

542
00:26:48,919 --> 00:26:53,029
example au poste here you would still be

543
00:26:51,230 --> 00:26:56,299
able to protect it against XSS I and

544
00:26:53,029 --> 00:26:57,860
other issues but post based cross-site

545
00:26:56,299 --> 00:26:59,869
request forgery would not be protected

546
00:26:57,860 --> 00:27:02,658
if you would allow post here and you

547
00:26:59,869 --> 00:27:04,189
need to get because otherwise your site

548
00:27:02,659 --> 00:27:08,080
would not be reachable from the internet

549
00:27:04,190 --> 00:27:11,090
anymore so if you also prevent get then

550
00:27:08,080 --> 00:27:12,830
any link from a cross origin domain

551
00:27:11,090 --> 00:27:14,570
would not work because your server would

552
00:27:12,830 --> 00:27:17,809
reject it what you could do is you can

553
00:27:14,570 --> 00:27:19,939
redirect to the main page if you don't

554
00:27:17,809 --> 00:27:21,860
want to allow gate as well but that's

555
00:27:19,940 --> 00:27:24,440
already quite advanced but just use

556
00:27:21,860 --> 00:27:27,799
cases for that basically we are only

557
00:27:24,440 --> 00:27:30,080
allowing a get request clicked but if it

558
00:27:27,799 --> 00:27:32,539
was a post request we are blocking it

559
00:27:30,080 --> 00:27:35,029
yes if it's a cross origin post that

560
00:27:32,539 --> 00:27:36,590
logic would block it if you have a

561
00:27:35,029 --> 00:27:39,110
course endpoint or something that

562
00:27:36,590 --> 00:27:41,149
actually is expected to receive post

563
00:27:39,110 --> 00:27:43,219
requests cross origin you can have an

564
00:27:41,149 --> 00:27:48,439
additional whitelist to you know allow

565
00:27:43,220 --> 00:27:50,659
these kind of requests okay thanks are

566
00:27:48,440 --> 00:27:52,399
you working with the w3c for things like

567
00:27:50,659 --> 00:27:54,350
fetch metadata to standardize the

568
00:27:52,399 --> 00:27:57,590
headers because it's just in chrome you

569
00:27:54,350 --> 00:28:00,889
know yes of course there is actually a

570
00:27:57,590 --> 00:28:03,199
w3c spec for fetch metadata it just got

571
00:28:00,889 --> 00:28:08,059
moved from my quests github repository

572
00:28:03,200 --> 00:28:10,369
to w3c and I think there's like there is

573
00:28:08,059 --> 00:28:11,899
consensus that it makes sense chrome

574
00:28:10,369 --> 00:28:12,830
already just already has the prototype

575
00:28:11,899 --> 00:28:15,530
and

576
00:28:12,830 --> 00:28:20,210
others will follow soon oh thank you

577
00:28:15,530 --> 00:28:22,910
thank you I wanted to ask about the

578
00:28:20,210 --> 00:28:26,090
fetch metadata yeah I didn't really

579
00:28:22,910 --> 00:28:29,090
understand if how does it improve the

580
00:28:26,090 --> 00:28:32,540
security because in case an attacker

581
00:28:29,090 --> 00:28:35,629
wants to for example send a get request

582
00:28:32,540 --> 00:28:39,320
to some resource of another site I mean

583
00:28:35,630 --> 00:28:41,300
it could maybe just I mean equal send an

584
00:28:39,320 --> 00:28:43,970
AJAX request where he controls the

585
00:28:41,300 --> 00:28:45,919
request headers and then he could change

586
00:28:43,970 --> 00:28:48,170
the search metadata

587
00:28:45,920 --> 00:28:52,040
it's a sec metadata is has the sec

588
00:28:48,170 --> 00:28:54,380
prefetch prefetch prefix sorry so you

589
00:28:52,040 --> 00:28:56,180
cannot set this header through the

590
00:28:54,380 --> 00:28:57,740
JavaScript API this is a protected

591
00:28:56,180 --> 00:29:00,490
header by the browser only the browser

592
00:28:57,740 --> 00:29:04,760
can sent and set these headers so which

593
00:29:00,490 --> 00:29:06,680
every bars implement this enforcement

594
00:29:04,760 --> 00:29:10,730
that you're not allowed to set SEC

595
00:29:06,680 --> 00:29:14,780
headers I think all browsers disallow

596
00:29:10,730 --> 00:29:17,810
setting certain headers and that the SEC

597
00:29:14,780 --> 00:29:19,550
prefix prefix is one that is I think

598
00:29:17,810 --> 00:29:21,530
protected in all browsers I think

599
00:29:19,550 --> 00:29:23,870
there's also other headers request

600
00:29:21,530 --> 00:29:26,149
headers that you cannot set in the

601
00:29:23,870 --> 00:29:32,270
JavaScript API explicit or security

602
00:29:26,150 --> 00:29:36,530
reasons sorry yeah sorry can you repeat

603
00:29:32,270 --> 00:29:38,120
that what you said to refer a header you

604
00:29:36,530 --> 00:29:43,399
cannot set an arbitrary valid a okay

605
00:29:38,120 --> 00:29:48,229
thank you yeah and I think we're over

606
00:29:43,400 --> 00:29:53,050
time already or no okay but also hang

607
00:29:48,230 --> 00:29:53,050
around and let Philippe talk so

608
00:29:53,540 --> 00:29:58,670
[Applause]

609
00:29:56,580 --> 00:29:58,669
[Music]

