1
00:00:00,030 --> 00:00:06,480
thank you everyone my name is Wilfred

2
00:00:02,730 --> 00:00:10,110
tuna I'm here to present rhyming with

3
00:00:06,480 --> 00:00:12,019
hacks but let's set expectations rights

4
00:00:10,110 --> 00:00:15,928
I'm not singing today

5
00:00:12,019 --> 00:00:17,400
sorry I'm not hip-hopping but as a

6
00:00:15,929 --> 00:00:20,910
compensation

7
00:00:17,400 --> 00:00:22,709
I'll have written a poem that you can

8
00:00:20,910 --> 00:00:27,090
follow along through some of the slides

9
00:00:22,710 --> 00:00:30,060
and hopefully that will compensate but

10
00:00:27,090 --> 00:00:32,610
later today in the in the social if you

11
00:00:30,060 --> 00:00:37,829
buy me a couple of beers maybe I'll sing

12
00:00:32,610 --> 00:00:40,170
let's see all right about me

13
00:00:37,829 --> 00:00:42,690
I've been working with security for the

14
00:00:40,170 --> 00:00:45,300
last 15 years I started more in the

15
00:00:42,690 --> 00:00:48,149
systems and network security side then

16
00:00:45,300 --> 00:00:52,530
very early on I moved to bot detection I

17
00:00:48,149 --> 00:00:54,539
worked in a few stuff and more or less

18
00:00:52,530 --> 00:00:56,640
ten years ago I moved into the

19
00:00:54,539 --> 00:01:00,180
client-side security space application

20
00:00:56,640 --> 00:01:02,190
security code protection and everything

21
00:01:00,180 --> 00:01:06,960
surrounding the browser and JavaScript

22
00:01:02,190 --> 00:01:09,780
security so the agenda for today I'm

23
00:01:06,960 --> 00:01:14,130
covering supply chain attacks

24
00:01:09,780 --> 00:01:17,490
I'll cover the basics then will follow

25
00:01:14,130 --> 00:01:20,039
through existing solutions or approaches

26
00:01:17,490 --> 00:01:23,548
to solve web-based supply chain attacks

27
00:01:20,040 --> 00:01:26,640
then I'll cover the approach I've been

28
00:01:23,549 --> 00:01:29,400
working out in the last couple of years

29
00:01:26,640 --> 00:01:34,950
and will conclude will have a couple of

30
00:01:29,400 --> 00:01:38,610
demos as well so let's start with supply

31
00:01:34,950 --> 00:01:41,009
chain attacks so in the context of this

32
00:01:38,610 --> 00:01:44,280
talk because we we only had 30 minutes

33
00:01:41,009 --> 00:01:46,979
I'm sticking to web-based supply chain

34
00:01:44,280 --> 00:01:49,409
attacks it refers to mostly to

35
00:01:46,979 --> 00:01:52,590
third-party Java scripts that someway

36
00:01:49,409 --> 00:01:54,990
somehow got compromised and now is

37
00:01:52,590 --> 00:02:01,380
injecting arbitrary codes in the same

38
00:01:54,990 --> 00:02:03,360
context as your client side code we

39
00:02:01,380 --> 00:02:05,699
could also refer or talk about

40
00:02:03,360 --> 00:02:07,680
compromised repos or compromised NPM

41
00:02:05,700 --> 00:02:10,890
packages we don't have time for that

42
00:02:07,680 --> 00:02:12,170
today so the context is web-based supply

43
00:02:10,889 --> 00:02:15,390
chain attacks

44
00:02:12,170 --> 00:02:17,130
so like I said compromising Tegrity of

45
00:02:15,390 --> 00:02:21,000
the of the client-side code it means

46
00:02:17,130 --> 00:02:23,970
arbitrary code execution some examples

47
00:02:21,000 --> 00:02:27,690
of third-party scripts that usually get

48
00:02:23,970 --> 00:02:31,950
compromised our analytics adds customer

49
00:02:27,690 --> 00:02:36,140
support plugins or I've shed BOTS this

50
00:02:31,950 --> 00:02:39,810
there are a whole plethora of different

51
00:02:36,140 --> 00:02:41,549
browser vendor plug-ins that are getting

52
00:02:39,810 --> 00:02:44,010
compromised in the last couple of years

53
00:02:41,550 --> 00:02:47,610
I'll talk about that a little bit later

54
00:02:44,010 --> 00:02:48,600
and the consequence is usually our data

55
00:02:47,610 --> 00:02:51,209
leakage

56
00:02:48,600 --> 00:02:53,340
they usually insert what is called a web

57
00:02:51,209 --> 00:02:55,170
scheming or credit card scheming they

58
00:02:53,340 --> 00:02:57,540
start leaking data and credit card

59
00:02:55,170 --> 00:03:00,030
information they can also leak

60
00:02:57,540 --> 00:03:04,590
credentials they can do things like

61
00:03:00,030 --> 00:03:08,850
crypto mining usually it's around these

62
00:03:04,590 --> 00:03:10,709
consequences so how how does it work so

63
00:03:08,850 --> 00:03:13,440
you have considered the first party code

64
00:03:10,709 --> 00:03:17,090
you might have some scripting scripts

65
00:03:13,440 --> 00:03:20,060
included in there and those scripts are

66
00:03:17,090 --> 00:03:23,730
loaded from third-party vendors directly

67
00:03:20,060 --> 00:03:26,340
you can have an iframe you can load HTML

68
00:03:23,730 --> 00:03:28,980
from that HTML you can load additional

69
00:03:26,340 --> 00:03:31,260
code so there's second level and third

70
00:03:28,980 --> 00:03:35,340
level JavaScript potentially being

71
00:03:31,260 --> 00:03:37,709
loaded and and also JavaScript can pull

72
00:03:35,340 --> 00:03:41,040
additional JavaScript so the level of

73
00:03:37,709 --> 00:03:42,739
dynamics it can be huge you have to

74
00:03:41,040 --> 00:03:45,900
account for for this type of attacks

75
00:03:42,739 --> 00:03:49,140
when something in this chain gets

76
00:03:45,900 --> 00:03:51,660
compromised potentially your first party

77
00:03:49,140 --> 00:03:57,720
code and application gets compromised as

78
00:03:51,660 --> 00:03:59,519
well and what happens is they scrape the

79
00:03:57,720 --> 00:04:02,700
data they want to leak and then they

80
00:03:59,519 --> 00:04:05,250
just send it to a drop server usually in

81
00:04:02,700 --> 00:04:09,570
a third party domain so it's usually

82
00:04:05,250 --> 00:04:12,890
cross-origin but one thing that is

83
00:04:09,570 --> 00:04:15,959
certain possible is because they

84
00:04:12,890 --> 00:04:18,510
compromised a third party server they

85
00:04:15,959 --> 00:04:22,120
might as well just use that third party

86
00:04:18,510 --> 00:04:25,419
server to exit rate data to as

87
00:04:22,120 --> 00:04:28,690
in on their way to accelerate it to a

88
00:04:25,419 --> 00:04:31,389
server controlled by the attacker that

89
00:04:28,690 --> 00:04:33,940
potentially can be any domain the the

90
00:04:31,389 --> 00:04:36,310
biggest difference is that usually the

91
00:04:33,940 --> 00:04:37,930
the vendor domain is already white

92
00:04:36,310 --> 00:04:41,949
listed because it's very common for

93
00:04:37,930 --> 00:04:46,690
people to just use CSP version one using

94
00:04:41,949 --> 00:04:50,020
white base the domain black listing I'll

95
00:04:46,690 --> 00:04:53,680
talk about it in a second the motivation

96
00:04:50,020 --> 00:04:56,139
for these attacks are are easy to

97
00:04:53,680 --> 00:04:58,060
understand it scales because they

98
00:04:56,139 --> 00:05:00,010
compromise the vendor and immediately

99
00:04:58,060 --> 00:05:02,770
they compromise every website there is

100
00:05:00,010 --> 00:05:05,860
linking directly to that vendor and with

101
00:05:02,770 --> 00:05:08,549
that all the users that are visiting

102
00:05:05,860 --> 00:05:12,910
those web sites as a counterexample

103
00:05:08,550 --> 00:05:15,100
consider for instance reflected XSS when

104
00:05:12,910 --> 00:05:18,460
you find such vulnerability you still

105
00:05:15,100 --> 00:05:22,090
have to somehow fool someone into using

106
00:05:18,460 --> 00:05:25,210
that crafted URL and and still you are

107
00:05:22,090 --> 00:05:27,159
only attacking one person so it's a lot

108
00:05:25,210 --> 00:05:30,250
of effort compared with supply chain

109
00:05:27,160 --> 00:05:33,099
attacks where everyone basically is

110
00:05:30,250 --> 00:05:37,510
executing arbitrary JavaScript at the

111
00:05:33,099 --> 00:05:40,090
same time it's also about because of the

112
00:05:37,510 --> 00:05:43,120
weakest link are usually the third

113
00:05:40,090 --> 00:05:45,520
parties so you consider big companies

114
00:05:43,120 --> 00:05:47,889
having security departments and

115
00:05:45,520 --> 00:05:51,580
sometimes they use third parties that

116
00:05:47,889 --> 00:05:54,520
are small companies with a with a huge

117
00:05:51,580 --> 00:05:56,770
lack of resources probably just one or

118
00:05:54,520 --> 00:05:58,659
two guys handling all the security so

119
00:05:56,770 --> 00:06:02,859
it's hard for them to cover all the

120
00:05:58,660 --> 00:06:06,669
angles and it becomes very attractive to

121
00:06:02,860 --> 00:06:11,289
attackers these attacks are also known

122
00:06:06,669 --> 00:06:13,990
as mage cards mage cards we think that

123
00:06:11,289 --> 00:06:18,639
mage card comes from either magazine

124
00:06:13,990 --> 00:06:22,479
which is the Russian word for store or

125
00:06:18,639 --> 00:06:26,530
because most of the attacks or a huge

126
00:06:22,479 --> 00:06:28,930
chunk of those attacks are Magento

127
00:06:26,530 --> 00:06:31,840
installations that are compromised and

128
00:06:28,930 --> 00:06:35,349
so mage guard might be based on that as

129
00:06:31,840 --> 00:06:36,070
well so we started with a simple single

130
00:06:35,349 --> 00:06:40,510
group

131
00:06:36,070 --> 00:06:42,340
in 2015 and right now we have dozens of

132
00:06:40,510 --> 00:06:44,080
different groups

133
00:06:42,340 --> 00:06:45,989
just following slightly different

134
00:06:44,080 --> 00:06:49,659
approaches with slightly different

135
00:06:45,990 --> 00:06:52,510
schemers and it kept evolving and since

136
00:06:49,660 --> 00:06:58,000
last year the sophistication of these

137
00:06:52,510 --> 00:07:00,460
attacks have been growing a lot what

138
00:06:58,000 --> 00:07:03,430
they do is they as I said they perform

139
00:07:00,460 --> 00:07:06,520
digital credit card skimming some some

140
00:07:03,430 --> 00:07:09,250
people call this form jacking although

141
00:07:06,520 --> 00:07:12,520
there's not a consensus about what terms

142
00:07:09,250 --> 00:07:15,130
should be used and they do this because

143
00:07:12,520 --> 00:07:17,830
there's a whole economy behind this so

144
00:07:15,130 --> 00:07:19,810
they once they they they scheme the

145
00:07:17,830 --> 00:07:22,300
credit card data that they have

146
00:07:19,810 --> 00:07:26,680
elaborate ways of just purchasing

147
00:07:22,300 --> 00:07:29,800
products and then either they usually

148
00:07:26,680 --> 00:07:32,530
reshape the products to their countries

149
00:07:29,800 --> 00:07:36,280
the attackers countries and then they

150
00:07:32,530 --> 00:07:40,200
sell the products or they just sell the

151
00:07:36,280 --> 00:07:43,719
credit card information on the dark web

152
00:07:40,200 --> 00:07:45,690
so we don't have time to cover many of

153
00:07:43,720 --> 00:07:50,170
the attacks that have been going on

154
00:07:45,690 --> 00:07:51,850
today so I'll just highlight a few of

155
00:07:50,170 --> 00:07:53,770
the attacks and what they have in

156
00:07:51,850 --> 00:07:59,430
particular to my opinion

157
00:07:53,770 --> 00:08:02,710
so it started with jQuery early on in

158
00:07:59,430 --> 00:08:06,360
2014 for a few hours they were infected

159
00:08:02,710 --> 00:08:09,430
they were serving a reek exploit kit

160
00:08:06,360 --> 00:08:11,590
that was probably not the first time but

161
00:08:09,430 --> 00:08:14,640
the first time it was really like

162
00:08:11,590 --> 00:08:19,450
visible to everyone in the community

163
00:08:14,640 --> 00:08:23,010
then last year the Ticketmaster attack

164
00:08:19,450 --> 00:08:26,159
in lasted for five months five months

165
00:08:23,010 --> 00:08:30,789
EXO trading credit card information

166
00:08:26,160 --> 00:08:34,360
without being mitigated so I think it's

167
00:08:30,790 --> 00:08:38,080
it's it's concerning the British Airways

168
00:08:34,360 --> 00:08:39,760
was also very referred and it's

169
00:08:38,080 --> 00:08:41,830
different from the previous ones because

170
00:08:39,760 --> 00:08:43,510
in that case it wasn't a third party

171
00:08:41,830 --> 00:08:45,850
that got compromised but rather the

172
00:08:43,510 --> 00:08:49,060
first particle so they were able to

173
00:08:45,850 --> 00:08:49,880
breach into the network of British

174
00:08:49,060 --> 00:08:52,339
Airways

175
00:08:49,880 --> 00:08:57,380
and compromise the code directly on the

176
00:08:52,340 --> 00:08:58,720
server another example more recently

177
00:08:57,380 --> 00:09:03,890
this year

178
00:08:58,720 --> 00:09:05,740
Edward line which is a ad company was

179
00:09:03,890 --> 00:09:09,199
compromised and what's particularly

180
00:09:05,740 --> 00:09:11,480
attack is that their web schemer the web

181
00:09:09,200 --> 00:09:13,670
schemer that was used in this attack was

182
00:09:11,480 --> 00:09:15,890
very sophisticated compared with their

183
00:09:13,670 --> 00:09:19,099
previous versions so it actually had

184
00:09:15,890 --> 00:09:23,300
anti-bot defenses so there if people are

185
00:09:19,100 --> 00:09:26,890
trying to see if the schemer is doing

186
00:09:23,300 --> 00:09:29,689
certain things using like automated

187
00:09:26,890 --> 00:09:32,000
mechanisms they are trying to spot if

188
00:09:29,690 --> 00:09:34,090
such mechanisms are being used and then

189
00:09:32,000 --> 00:09:37,700
they just prevent themselves from

190
00:09:34,090 --> 00:09:39,560
executing in those moments and therefore

191
00:09:37,700 --> 00:09:42,470
they avoid the problem of being detected

192
00:09:39,560 --> 00:09:44,359
they also use integrity checks so if the

193
00:09:42,470 --> 00:09:48,260
code is modified they prevent themselves

194
00:09:44,360 --> 00:09:50,390
from from executing and and they check

195
00:09:48,260 --> 00:09:52,939
if the browser debugger is open they

196
00:09:50,390 --> 00:09:56,150
check a lot of stuff so clearly they're

197
00:09:52,940 --> 00:10:03,260
sophisticated the sophistication of web

198
00:09:56,150 --> 00:10:08,209
schemers is on the rise this month we

199
00:10:03,260 --> 00:10:10,250
have also a series of supply chain

200
00:10:08,210 --> 00:10:15,110
attacks that compromised a few vendors

201
00:10:10,250 --> 00:10:17,720
and so usually historically they only

202
00:10:15,110 --> 00:10:20,150
collect the fields from forms they care

203
00:10:17,720 --> 00:10:21,590
about but now we started seeing a

204
00:10:20,150 --> 00:10:23,959
different behavior where they are

205
00:10:21,590 --> 00:10:28,040
basically collecting every form field

206
00:10:23,960 --> 00:10:30,800
they've defined in the page so it's just

207
00:10:28,040 --> 00:10:33,140
an example to see how fast they are

208
00:10:30,800 --> 00:10:37,939
adapting and and doing different stuffs

209
00:10:33,140 --> 00:10:41,710
we also have examples of compromises

210
00:10:37,940 --> 00:10:46,400
that went after the the crypto exchanges

211
00:10:41,710 --> 00:10:47,810
keys and and yeah so there's a lot of

212
00:10:46,400 --> 00:10:50,480
things that are going on and

213
00:10:47,810 --> 00:10:53,390
unfortunately we don't have time to to

214
00:10:50,480 --> 00:10:56,090
go through all of this so let me show

215
00:10:53,390 --> 00:10:59,540
you the anatomy of one attack this is a

216
00:10:56,090 --> 00:11:01,520
the mentor web schemer so in bento was

217
00:10:59,540 --> 00:11:03,260
the vendor that got compromised in the

218
00:11:01,520 --> 00:11:06,500
Ticketmaster

219
00:11:03,260 --> 00:11:08,930
last year this code is obviously office

220
00:11:06,500 --> 00:11:12,710
gated but the obfuscation is very weak

221
00:11:08,930 --> 00:11:16,579
so it's very easy to after a few minutes

222
00:11:12,710 --> 00:11:20,540
to get nicely indented code that you can

223
00:11:16,580 --> 00:11:23,270
understand very quickly and so usually

224
00:11:20,540 --> 00:11:25,849
what it does is checks if the code is

225
00:11:23,270 --> 00:11:28,970
running in a certain URL that contains

226
00:11:25,850 --> 00:11:33,760
these key words like order or check outs

227
00:11:28,970 --> 00:11:36,380
or one step' then they just hook into a

228
00:11:33,760 --> 00:11:39,380
few elements that they can find in the

229
00:11:36,380 --> 00:11:41,779
page you can see up there if they see a

230
00:11:39,380 --> 00:11:44,660
button or an input they hook into those

231
00:11:41,779 --> 00:11:48,770
elements they want to listen for they

232
00:11:44,660 --> 00:11:53,270
want to install the event listeners like

233
00:11:48,770 --> 00:11:56,600
the click and unclick then they collect

234
00:11:53,270 --> 00:11:59,060
once this function is triggered they

235
00:11:56,600 --> 00:12:01,970
collect all the information belonging to

236
00:11:59,060 --> 00:12:06,709
those elements they replace the onsubmit

237
00:12:01,970 --> 00:12:09,770
event and they eventually they send this

238
00:12:06,710 --> 00:12:13,459
data to the drop server and this code is

239
00:12:09,770 --> 00:12:15,230
executing every 30 milliseconds all

240
00:12:13,459 --> 00:12:21,589
right so it's pretty simple to

241
00:12:15,230 --> 00:12:23,990
understand and now I have a demo of one

242
00:12:21,589 --> 00:12:27,050
web-based supply chain attack

243
00:12:23,990 --> 00:12:30,730
it's actually an emulation so this is a

244
00:12:27,050 --> 00:12:33,770
Ticketmaster website it's not the real

245
00:12:30,730 --> 00:12:36,770
web schemer that it's running we

246
00:12:33,770 --> 00:12:39,079
actually implemented a draw our own drop

247
00:12:36,770 --> 00:12:41,870
server and as you can see on the Left

248
00:12:39,080 --> 00:12:44,540
we're running this and we are injecting

249
00:12:41,870 --> 00:12:47,690
directly the the schemer in the page

250
00:12:44,540 --> 00:12:51,410
using browser extension so we're

251
00:12:47,690 --> 00:12:54,490
starting we are starting the the drop

252
00:12:51,410 --> 00:12:59,510
server so it's just waiting for

253
00:12:54,490 --> 00:13:06,410
credit-card information to be sent and

254
00:12:59,510 --> 00:13:10,850
we are doing purchase so please bear

255
00:13:06,410 --> 00:13:12,800
with me actually accelerated the video a

256
00:13:10,850 --> 00:13:15,430
little bit but maybe not too much so

257
00:13:12,800 --> 00:13:15,430
don't fall asleep

258
00:13:16,560 --> 00:13:24,280
okay so this is what the user sees it's

259
00:13:21,760 --> 00:13:32,110
just filling out the form and ordering

260
00:13:24,280 --> 00:13:36,040
tickets and then at the very end

261
00:13:32,110 --> 00:13:40,750
the codes exit rates the data to the

262
00:13:36,040 --> 00:13:42,760
server and you cannot possibly see that

263
00:13:40,750 --> 00:13:44,410
happening unless you're looking at your

264
00:13:42,760 --> 00:13:49,450
network settings or something like that

265
00:13:44,410 --> 00:13:52,780
all right so let's get into the existing

266
00:13:49,450 --> 00:13:56,430
solutions that we see in the market we

267
00:13:52,780 --> 00:14:00,390
cannot go very deeply into its every

268
00:13:56,430 --> 00:14:03,430
solution but we'll cover the majority

269
00:14:00,390 --> 00:14:06,069
but starting with very quick fixes that

270
00:14:03,430 --> 00:14:08,380
you can implement so the probably the

271
00:14:06,070 --> 00:14:10,660
most efficient fix at least if you're

272
00:14:08,380 --> 00:14:13,150
concerned about third parties is simply

273
00:14:10,660 --> 00:14:16,270
not including the third party in the

274
00:14:13,150 --> 00:14:18,610
pages where you are handling sensitive

275
00:14:16,270 --> 00:14:22,960
information so for instance why would

276
00:14:18,610 --> 00:14:25,600
you need I don't know live chats in your

277
00:14:22,960 --> 00:14:28,750
payments page maybe you don't need it so

278
00:14:25,600 --> 00:14:31,330
you can remove that live chat from that

279
00:14:28,750 --> 00:14:33,520
page and just leave that third party on

280
00:14:31,330 --> 00:14:37,210
different pages where you are not

281
00:14:33,520 --> 00:14:42,660
collecting credit card information so

282
00:14:37,210 --> 00:14:47,170
another one hosting the files yourself

283
00:14:42,660 --> 00:14:48,790
so something some companies do this the

284
00:14:47,170 --> 00:14:51,040
problem with this is

285
00:14:48,790 --> 00:14:52,959
well first parties can still be

286
00:14:51,040 --> 00:14:55,650
compromised there are a few things that

287
00:14:52,960 --> 00:14:59,590
you can do but you are basically

288
00:14:55,650 --> 00:15:02,050
assuming this responsibility and and

289
00:14:59,590 --> 00:15:04,690
there's the problem of being of dragging

290
00:15:02,050 --> 00:15:08,170
behind inversions because now the vendor

291
00:15:04,690 --> 00:15:10,750
cannot update the code every time he

292
00:15:08,170 --> 00:15:14,439
wants which if you ask me it's a good

293
00:15:10,750 --> 00:15:17,860
thing but they don't think so so vendors

294
00:15:14,440 --> 00:15:19,920
usually don't like this you can also try

295
00:15:17,860 --> 00:15:22,630
to roll out like file integrity

296
00:15:19,920 --> 00:15:26,050
read-only file systems you can try to

297
00:15:22,630 --> 00:15:27,680
check if refresh the the system every

298
00:15:26,050 --> 00:15:30,319
once in a while to make sure that

299
00:15:27,680 --> 00:15:32,149
hasn't been tampered with no one has

300
00:15:30,319 --> 00:15:35,779
been able to breach the server and

301
00:15:32,149 --> 00:15:38,089
modify the files on the disk but this

302
00:15:35,779 --> 00:15:42,860
type of solutions they get complicated

303
00:15:38,089 --> 00:15:46,910
very fast you can also consider using

304
00:15:42,860 --> 00:15:48,529
some resource integrity if you don't if

305
00:15:46,910 --> 00:15:50,629
you are not familiar with some resource

306
00:15:48,529 --> 00:15:53,149
integrity it allows you to set a

307
00:15:50,629 --> 00:15:56,420
checksum for you for the scripts being

308
00:15:53,149 --> 00:16:00,800
loaded using an attribute the problem is

309
00:15:56,420 --> 00:16:02,509
where I already mentioned is that the

310
00:16:00,800 --> 00:16:04,729
third parties don't want you to do this

311
00:16:02,509 --> 00:16:09,439
they simply don't want to lose the

312
00:16:04,730 --> 00:16:12,199
ability of the updating the the the file

313
00:16:09,439 --> 00:16:15,410
that you're using and and deal with the

314
00:16:12,199 --> 00:16:18,439
fact that a lot of their clients are

315
00:16:15,410 --> 00:16:23,029
dragging behind in inversions so they

316
00:16:18,439 --> 00:16:25,040
just force you to load the file directly

317
00:16:23,029 --> 00:16:29,540
from their servers and you either accept

318
00:16:25,040 --> 00:16:32,029
that or you don't so obviously it

319
00:16:29,540 --> 00:16:34,219
doesn't cover the self hosting you can

320
00:16:32,029 --> 00:16:35,929
you can you can use sub resource

321
00:16:34,220 --> 00:16:39,879
integrity with your own files and you

322
00:16:35,929 --> 00:16:42,740
probably you should it's one way of

323
00:16:39,879 --> 00:16:48,230
Mabley mitigating the problem if your

324
00:16:42,740 --> 00:16:51,259
server was compromised but but surely if

325
00:16:48,230 --> 00:16:53,569
they can if they compromised the system

326
00:16:51,259 --> 00:16:55,839
maybe they can just remove the text and

327
00:16:53,569 --> 00:16:58,969
then they just everything just falls off

328
00:16:55,839 --> 00:17:01,759
you can also do domain sync Holling

329
00:16:58,970 --> 00:17:03,470
usually this technique requires some

330
00:17:01,759 --> 00:17:06,140
sort of monitoring system using a

331
00:17:03,470 --> 00:17:08,990
server-side rendering so every once in a

332
00:17:06,140 --> 00:17:12,679
while they start pulling the websites

333
00:17:08,990 --> 00:17:16,339
and pulling out the data and and code

334
00:17:12,679 --> 00:17:19,970
that is being executed they execute that

335
00:17:16,339 --> 00:17:22,369
that codes but then at a certain point

336
00:17:19,970 --> 00:17:24,980
the third party gets or the website gets

337
00:17:22,369 --> 00:17:28,750
compromised through a third party or

338
00:17:24,980 --> 00:17:32,330
something and what they do is they have

339
00:17:28,750 --> 00:17:34,640
they have signatures that try to match

340
00:17:32,330 --> 00:17:36,889
malicious content or malicious code and

341
00:17:34,640 --> 00:17:40,490
if they detect malicious code what they

342
00:17:36,889 --> 00:17:43,969
do is they simply update the

343
00:17:40,490 --> 00:17:46,280
entry because they find out what's the

344
00:17:43,970 --> 00:17:49,930
drop server domain and they update that

345
00:17:46,280 --> 00:17:53,270
domain to basically a null value and

346
00:17:49,930 --> 00:17:56,570
what happens is that everyone that's

347
00:17:53,270 --> 00:17:59,270
using that DNS information will not be

348
00:17:56,570 --> 00:18:02,030
able to solve the exfiltration will will

349
00:17:59,270 --> 00:18:03,980
not work but the problem with this

350
00:18:02,030 --> 00:18:08,090
approach is that there are a few

351
00:18:03,980 --> 00:18:09,950
problems actually the thing is first you

352
00:18:08,090 --> 00:18:12,800
need to ingest this threat intelligence

353
00:18:09,950 --> 00:18:15,740
information so you know you either are

354
00:18:12,800 --> 00:18:20,389
consuming this information and get

355
00:18:15,740 --> 00:18:23,900
mitigation or it doesn't work but there

356
00:18:20,390 --> 00:18:27,350
are a few other problems the whole

357
00:18:23,900 --> 00:18:30,490
approach is based on signatures which

358
00:18:27,350 --> 00:18:34,550
means that they're looking for things

359
00:18:30,490 --> 00:18:37,520
and sometimes a lot of times that fails

360
00:18:34,550 --> 00:18:40,190
and that was the case with the British

361
00:18:37,520 --> 00:18:42,860
Airways so the attackers in that case

362
00:18:40,190 --> 00:18:45,200
they changed the schemer code and the

363
00:18:42,860 --> 00:18:48,490
signatures failed to detect this in

364
00:18:45,200 --> 00:18:52,520
real-time so eventually they notice but

365
00:18:48,490 --> 00:18:54,890
they couldn't mitigate the attack and

366
00:18:52,520 --> 00:18:57,440
and the thing is you cannot possibly

367
00:18:54,890 --> 00:19:00,620
predict how the web schemers are

368
00:18:57,440 --> 00:19:02,330
evolving and have signatures that will

369
00:19:00,620 --> 00:19:04,850
always work because they the attackers

370
00:19:02,330 --> 00:19:07,159
can always off escape the codes in many

371
00:19:04,850 --> 00:19:11,030
different ways and it's a it's very

372
00:19:07,160 --> 00:19:14,500
difficult to to work obviously you can I

373
00:19:11,030 --> 00:19:18,410
already mentioned this you can use CSP

374
00:19:14,500 --> 00:19:20,780
but the problem is that every solution I

375
00:19:18,410 --> 00:19:24,380
know is using first-generation CSP so

376
00:19:20,780 --> 00:19:27,010
they are like leasing domains and that

377
00:19:24,380 --> 00:19:31,490
doesn't work because there are many

378
00:19:27,010 --> 00:19:34,970
bypasses even Lucas mentioned that in

379
00:19:31,490 --> 00:19:39,970
his talk earlier today and I actually

380
00:19:34,970 --> 00:19:45,380
have a quote from your research Lucas

381
00:19:39,970 --> 00:19:48,710
and the problem with that is that like I

382
00:19:45,380 --> 00:19:51,350
said schemers can start using the third

383
00:19:48,710 --> 00:19:54,080
parties that are compromised if not one

384
00:19:51,350 --> 00:19:58,969
of the many bypasses that CS

385
00:19:54,080 --> 00:20:01,189
version one has so that CSP doesn't work

386
00:19:58,970 --> 00:20:03,710
to prevent exfiltration of data this is

387
00:20:01,190 --> 00:20:07,429
a fair warning so there are too many

388
00:20:03,710 --> 00:20:10,309
ways of accomplishing that and so you

389
00:20:07,429 --> 00:20:17,710
should probably consider other solutions

390
00:20:10,309 --> 00:20:20,870
as well all right so the last one is

391
00:20:17,710 --> 00:20:24,440
it's based on what I call JavaScript

392
00:20:20,870 --> 00:20:26,479
virtualization there are different

393
00:20:24,440 --> 00:20:29,389
solutions out there this is my

394
00:20:26,480 --> 00:20:32,630
understanding of like the typical

395
00:20:29,389 --> 00:20:34,479
solution based on this approach so you

396
00:20:32,630 --> 00:20:37,190
need to use some sort of library

397
00:20:34,480 --> 00:20:40,519
JavaScript virtualization library that

398
00:20:37,190 --> 00:20:44,360
needs to run first and then what it does

399
00:20:40,519 --> 00:20:47,299
is it changes some methods that are used

400
00:20:44,360 --> 00:20:49,668
to add code to the page like the

401
00:20:47,299 --> 00:20:55,820
examples that you're seeing so these

402
00:20:49,669 --> 00:20:58,750
methods become proxied and this gives

403
00:20:55,820 --> 00:21:02,510
you a certain level of security because

404
00:20:58,750 --> 00:21:06,159
like I said the the assumption is that

405
00:21:02,510 --> 00:21:12,260
our library has executed first

406
00:21:06,159 --> 00:21:14,870
and so when you load a third party Lib

407
00:21:12,260 --> 00:21:18,649
what happens is it will use one of the

408
00:21:14,870 --> 00:21:22,100
proxy methods and then what the library

409
00:21:18,649 --> 00:21:25,729
does is it runs that code in a sandbox

410
00:21:22,100 --> 00:21:29,029
iframe that is cross-origin so hoping

411
00:21:25,730 --> 00:21:31,940
for that to get some isolation and and

412
00:21:29,029 --> 00:21:34,340
and whatever malicious things the code

413
00:21:31,940 --> 00:21:40,039
is doing it will do it in the sandbox

414
00:21:34,340 --> 00:21:43,340
environments but the thing is they need

415
00:21:40,039 --> 00:21:45,260
to screen the behavior of this library

416
00:21:43,340 --> 00:21:47,240
because they somehow they need to

417
00:21:45,260 --> 00:21:50,090
propagate what what the library is doing

418
00:21:47,240 --> 00:21:53,690
to the main window otherwise that that

419
00:21:50,090 --> 00:21:56,029
code is not doing anything so they

420
00:21:53,690 --> 00:21:59,000
either allow the behavior or disallow

421
00:21:56,029 --> 00:22:01,100
the behavior and if they allow the

422
00:21:59,000 --> 00:22:03,799
behavior they will need to sync this

423
00:22:01,100 --> 00:22:06,350
behavior to the main window and that's

424
00:22:03,799 --> 00:22:08,029
basically how it works so the main

425
00:22:06,350 --> 00:22:10,070
problems I see with this is

426
00:22:08,029 --> 00:22:14,149
that the whole thing is super tricky to

427
00:22:10,070 --> 00:22:16,039
accomplish it needs to it can break the

428
00:22:14,149 --> 00:22:18,468
application actually because it needs to

429
00:22:16,039 --> 00:22:21,529
all the events that are synchronous need

430
00:22:18,469 --> 00:22:24,440
to be also secret nicely propagated to

431
00:22:21,529 --> 00:22:27,200
the main window and that is impossible

432
00:22:24,440 --> 00:22:29,749
to do so there has a potential of

433
00:22:27,200 --> 00:22:33,289
breaking the the application or just

434
00:22:29,749 --> 00:22:35,409
creating racing conditions and this is

435
00:22:33,289 --> 00:22:38,179
to the best of my knowledge of course

436
00:22:35,409 --> 00:22:41,330
also it doesn't seem to be another way

437
00:22:38,179 --> 00:22:46,190
of doing it but by duplicating the the

438
00:22:41,330 --> 00:22:47,839
Dom in the sandbox iframes so there if

439
00:22:46,190 --> 00:22:50,269
we start digging we'll find other

440
00:22:47,839 --> 00:22:53,299
problems so in a nutshell it's super

441
00:22:50,269 --> 00:22:55,539
tricky to accomplish in my opinion it

442
00:22:53,299 --> 00:22:58,820
can easily break the third party

443
00:22:55,539 --> 00:23:01,639
application and also it's a problem to

444
00:22:58,820 --> 00:23:04,099
know what's like the normal behavior of

445
00:23:01,639 --> 00:23:06,168
the third party library because that

446
00:23:04,099 --> 00:23:07,908
behavior can change over time so it's

447
00:23:06,169 --> 00:23:10,309
hard to keep up it's hard to know

448
00:23:07,909 --> 00:23:13,519
whether or not a new behavior should be

449
00:23:10,309 --> 00:23:17,889
allowed or not so it's a very complex in

450
00:23:13,519 --> 00:23:21,049
general all right so we are ready for

451
00:23:17,889 --> 00:23:23,359
the getting into the webpage integrity

452
00:23:21,049 --> 00:23:26,469
this is a new approach that we have been

453
00:23:23,359 --> 00:23:30,189
working on in the last couple of years

454
00:23:26,469 --> 00:23:32,929
it's it can be used to try to mitigate

455
00:23:30,190 --> 00:23:36,080
web-based supply chain attacks let me

456
00:23:32,929 --> 00:23:37,820
explain how it works so on the client

457
00:23:36,080 --> 00:23:39,139
side you have all these different

458
00:23:37,820 --> 00:23:41,539
elements you have the Dom you have

459
00:23:39,139 --> 00:23:44,059
JavaScript API you have haven't handlers

460
00:23:41,539 --> 00:23:46,999
you have first party and third party

461
00:23:44,059 --> 00:23:49,580
Java scripts but with web page integrity

462
00:23:46,999 --> 00:23:52,759
you also have this extra JavaScript that

463
00:23:49,580 --> 00:23:55,849
we call real time monitoring agents so

464
00:23:52,759 --> 00:23:58,639
it doesn't look or monitor the first

465
00:23:55,849 --> 00:24:02,149
party or third party code all it does is

466
00:23:58,639 --> 00:24:05,570
monitors the other elements so as you

467
00:24:02,149 --> 00:24:08,268
can see it's periodically looking to the

468
00:24:05,570 --> 00:24:14,989
Dom and all the other things that you

469
00:24:08,269 --> 00:24:17,599
can see there so so it's based on

470
00:24:14,989 --> 00:24:18,259
mutation of servers and it has a few

471
00:24:17,599 --> 00:24:20,450
checksumming

472
00:24:18,259 --> 00:24:21,530
techniques built in and poisoning

473
00:24:20,450 --> 00:24:26,090
detection techniques

474
00:24:21,530 --> 00:24:28,310
and it assumes that is running in an

475
00:24:26,090 --> 00:24:32,540
environment where malicious code is

476
00:24:28,310 --> 00:24:34,190
running alongside of it so once first

477
00:24:32,540 --> 00:24:37,430
part your third party it gets

478
00:24:34,190 --> 00:24:39,440
compromised the the first thing that you

479
00:24:37,430 --> 00:24:40,280
can do it can go after the Dom by

480
00:24:39,440 --> 00:24:43,850
changing it

481
00:24:40,280 --> 00:24:46,010
maybe modifying it for maybe inserting

482
00:24:43,850 --> 00:24:48,550
elements I don't know and the other

483
00:24:46,010 --> 00:24:52,490
thing is it can poison JavaScript native

484
00:24:48,550 --> 00:24:57,530
functions or event handlers to be able

485
00:24:52,490 --> 00:25:03,920
to scheme information out it can also go

486
00:24:57,530 --> 00:25:08,720
after our codes but that's difficult

487
00:25:03,920 --> 00:25:10,460
because it's everything that we have out

488
00:25:08,720 --> 00:25:13,280
there is protected with tamper

489
00:25:10,460 --> 00:25:16,490
resistance polymorphic code this is a

490
00:25:13,280 --> 00:25:17,840
big this is a mouthful I guess and I

491
00:25:16,490 --> 00:25:21,170
don't have time to explain it all but

492
00:25:17,840 --> 00:25:23,300
it's basically obfuscated it has temper

493
00:25:21,170 --> 00:25:27,230
integrity checks so it's checking if it

494
00:25:23,300 --> 00:25:29,389
has been modified and from from request

495
00:25:27,230 --> 00:25:31,970
to request the change the the code

496
00:25:29,390 --> 00:25:34,220
changes completely so the if the

497
00:25:31,970 --> 00:25:36,380
attacker tries to automate some attack

498
00:25:34,220 --> 00:25:40,460
against that code it's it's not

499
00:25:36,380 --> 00:25:42,470
impossible but it's difficult so what we

500
00:25:40,460 --> 00:25:44,840
do once we detect something is off we

501
00:25:42,470 --> 00:25:47,090
try to heal it we try to annul it so we

502
00:25:44,840 --> 00:25:49,159
if we see some injection in the Dom we

503
00:25:47,090 --> 00:25:51,860
try to remove that injection if possible

504
00:25:49,160 --> 00:25:54,500
and if we see poisoning we try to remove

505
00:25:51,860 --> 00:25:58,909
the poisoning and fix it or prevent it

506
00:25:54,500 --> 00:26:00,560
in some cases so it also has a server

507
00:25:58,910 --> 00:26:04,130
component so we send this information

508
00:26:00,560 --> 00:26:06,230
back to the server and this information

509
00:26:04,130 --> 00:26:08,960
is then compared with historical data

510
00:26:06,230 --> 00:26:11,270
and if we think that this is malicious

511
00:26:08,960 --> 00:26:13,700
we send it to the back end of the

512
00:26:11,270 --> 00:26:14,780
application through a web hook so this

513
00:26:13,700 --> 00:26:18,110
means that the application is

514
00:26:14,780 --> 00:26:19,639
continuously hearing a stream of events

515
00:26:18,110 --> 00:26:22,610
that are happening on the client side

516
00:26:19,640 --> 00:26:26,210
and this is good because then you can

517
00:26:22,610 --> 00:26:28,100
set additional reactions or policies on

518
00:26:26,210 --> 00:26:30,220
the server side and this is done in real

519
00:26:28,100 --> 00:26:33,620
time so if you just hear that

520
00:26:30,220 --> 00:26:35,180
anyone just tampered with the form then

521
00:26:33,620 --> 00:26:37,370
obviously

522
00:26:35,180 --> 00:26:39,920
we try to mitigate it but if we can't

523
00:26:37,370 --> 00:26:41,780
you can always like do additional

524
00:26:39,920 --> 00:26:46,130
measures to try to deal with it with

525
00:26:41,780 --> 00:26:47,570
that and you can adjust like the what is

526
00:26:46,130 --> 00:26:52,040
happening on the client side based on

527
00:26:47,570 --> 00:26:57,800
that information so we have a second

528
00:26:52,040 --> 00:26:58,790
demo very quickly so it's the whole

529
00:26:57,800 --> 00:27:01,639
thing again

530
00:26:58,790 --> 00:27:04,040
so we are redoing the same demo but now

531
00:27:01,640 --> 00:27:11,090
with with the agent is being included as

532
00:27:04,040 --> 00:27:13,850
well so we start the drop server let me

533
00:27:11,090 --> 00:27:16,610
try to speed this up a little bit okay

534
00:27:13,850 --> 00:27:20,870
so this is the dashboard of the solution

535
00:27:16,610 --> 00:27:24,770
so it's currently empty and now we are

536
00:27:20,870 --> 00:27:30,139
just purchasing tickets let me speed

537
00:27:24,770 --> 00:27:35,590
this up a little bit all right so you

538
00:27:30,140 --> 00:27:37,760
see let me for you can see that

539
00:27:35,590 --> 00:27:39,679
something is happening in the back so

540
00:27:37,760 --> 00:27:44,420
this is the dashboard again and it just

541
00:27:39,680 --> 00:27:47,780
detected some poisoning and this is

542
00:27:44,420 --> 00:27:50,180
information that we we detect and we we

543
00:27:47,780 --> 00:27:55,820
can show you the basically the schemer

544
00:27:50,180 --> 00:27:58,850
code that was detected a countermeasure

545
00:27:55,820 --> 00:28:02,060
could be executed at this moment but in

546
00:27:58,850 --> 00:28:05,389
this demo we are not doing that and then

547
00:28:02,060 --> 00:28:09,460
at the very end you will see that what

548
00:28:05,390 --> 00:28:09,460
happens with the with a drop server

549
00:28:09,910 --> 00:28:16,700
all right so finishing the process and

550
00:28:14,060 --> 00:28:19,510
it says form jacking mitigated so

551
00:28:16,700 --> 00:28:22,640
basically we prevented that web schemer

552
00:28:19,510 --> 00:28:24,890
from successfully poisoning the form and

553
00:28:22,640 --> 00:28:27,710
we prevented the information from being

554
00:28:24,890 --> 00:28:30,920
mitigated all right

555
00:28:27,710 --> 00:28:33,440
to conclude so web based supply chain

556
00:28:30,920 --> 00:28:34,850
attacks they usually go for the weakest

557
00:28:33,440 --> 00:28:37,640
link

558
00:28:34,850 --> 00:28:41,510
they usually finds our smaller vendors

559
00:28:37,640 --> 00:28:44,540
or enterprise with no security in place

560
00:28:41,510 --> 00:28:47,649
or no real security in place to be the

561
00:28:44,540 --> 00:28:50,619
weakest link they scale

562
00:28:47,649 --> 00:28:53,508
this is a huge problem since last year

563
00:28:50,619 --> 00:28:55,728
it's I'm seeing a race in the market so

564
00:28:53,509 --> 00:28:58,339
a lot of companies are just rushing to

565
00:28:55,729 --> 00:29:01,159
get some some kind of protection there's

566
00:28:58,339 --> 00:29:02,809
a lot of confusion around the solutions

567
00:29:01,159 --> 00:29:05,690
that you see out there and their

568
00:29:02,809 --> 00:29:08,719
effectiveness and I think this is a

569
00:29:05,690 --> 00:29:13,249
business problem actually because if you

570
00:29:08,719 --> 00:29:16,210
if your company ends up on the news but

571
00:29:13,249 --> 00:29:19,749
because your customers data was somehow

572
00:29:16,210 --> 00:29:22,159
accelerated this is very concerning I

573
00:29:19,749 --> 00:29:24,830
don't think it's a very hard problem to

574
00:29:22,159 --> 00:29:28,669
solve so we should consider the

575
00:29:24,830 --> 00:29:31,399
solutions and we should also consider

576
00:29:28,669 --> 00:29:33,229
that schemers will evolve will become

577
00:29:31,399 --> 00:29:35,478
more sophisticated and start doing a

578
00:29:33,229 --> 00:29:40,580
temper detection and I bought and

579
00:29:35,479 --> 00:29:44,570
whatnot and so in our approach in my

580
00:29:40,580 --> 00:29:46,999
opinion it's their benefit there it's

581
00:29:44,570 --> 00:29:50,149
it's simple it's efficient you don't

582
00:29:46,999 --> 00:29:54,080
have to do the whole thing of just

583
00:29:50,149 --> 00:29:55,639
marshalling the events to iframes it

584
00:29:54,080 --> 00:29:58,309
doesn't break the code because it's not

585
00:29:55,639 --> 00:30:01,339
changing anything about it it's kind of

586
00:29:58,309 --> 00:30:04,070
holistic because not only detects this

587
00:30:01,339 --> 00:30:06,979
kind of threats but also can detect XSS

588
00:30:04,070 --> 00:30:10,339
and other types of tampering from

589
00:30:06,979 --> 00:30:14,539
malicious extensions for instance and it

590
00:30:10,339 --> 00:30:16,719
has the also installed already protected

591
00:30:14,539 --> 00:30:19,269
with the JavaScript code protection

592
00:30:16,719 --> 00:30:22,669
obviously I'm not saying this is an

593
00:30:19,269 --> 00:30:24,830
invincible nothing is but it raises the

594
00:30:22,669 --> 00:30:27,830
bar a little bit and it makes it harder

595
00:30:24,830 --> 00:30:31,070
for the bad guys so in the end is always

596
00:30:27,830 --> 00:30:33,799
an arms race but that doesn't mean that

597
00:30:31,070 --> 00:30:36,168
you shouldn't do anything all right so

598
00:30:33,799 --> 00:30:38,539
last but not least I recommend this

599
00:30:36,169 --> 00:30:41,539
white paper from risk IQ inside match

600
00:30:38,539 --> 00:30:44,419
card it's a pretty substantial write-up

601
00:30:41,539 --> 00:30:46,639
it's I find it very interesting and you

602
00:30:44,419 --> 00:30:48,979
have a couple other references that you

603
00:30:46,639 --> 00:30:53,280
can read if you are interested in this

604
00:30:48,979 --> 00:30:56,400
topic this is all I have thank you

605
00:30:53,280 --> 00:30:56,399
[Music]

606
00:30:58,799 --> 00:31:04,589
if you are interested grab the full poem

607
00:31:01,509 --> 00:31:04,589
using that link

