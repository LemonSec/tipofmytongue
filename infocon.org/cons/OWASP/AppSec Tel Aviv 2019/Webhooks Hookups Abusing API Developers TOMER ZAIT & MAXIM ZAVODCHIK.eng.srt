1
00:00:00,030 --> 00:00:03,750
modeling you know when you look at when

2
00:00:02,190 --> 00:00:06,209
you design your application to support

3
00:00:03,750 --> 00:00:09,269
web hooks or to consume incoming web

4
00:00:06,210 --> 00:00:12,629
hooks and by definition web hooks are

5
00:00:09,269 --> 00:00:16,529
open-ended integration with arbitrary

6
00:00:12,630 --> 00:00:18,600
web services that means and this guy

7
00:00:16,529 --> 00:00:19,800
loves the stuff right and it's really

8
00:00:18,600 --> 00:00:22,619
good for security when there's

9
00:00:19,800 --> 00:00:25,199
open-ended in orbit rewards right so you

10
00:00:22,619 --> 00:00:27,830
don't know how you should trust the

11
00:00:25,199 --> 00:00:32,399
service that are sending this this arm

12
00:00:27,830 --> 00:00:34,829
those web hooks and also if you expose

13
00:00:32,399 --> 00:00:37,020
and support web hooks outgoing web hooks

14
00:00:34,829 --> 00:00:40,350
we don't know how it could be abused and

15
00:00:37,020 --> 00:00:41,879
different just go over quickly about

16
00:00:40,350 --> 00:00:45,239
different like threads that could be

17
00:00:41,879 --> 00:00:47,940
here so it's designed to send requests

18
00:00:45,239 --> 00:00:51,089
or non servers right so anybody can go

19
00:00:47,940 --> 00:00:54,120
to your online servers and just paste in

20
00:00:51,090 --> 00:00:55,530
like the URL right with so one of the

21
00:00:54,120 --> 00:00:57,510
attack vectors is like attacking

22
00:00:55,530 --> 00:00:59,730
arbitrary servers like for Judas or

23
00:00:57,510 --> 00:01:01,379
others and just in triggering different

24
00:00:59,730 --> 00:01:05,840
events in the system and lots of

25
00:01:01,379 --> 00:01:08,310
requests will go to those servers no

26
00:01:05,840 --> 00:01:10,680
manipulating the IP address maybe IP

27
00:01:08,310 --> 00:01:13,229
addresses validations of those services

28
00:01:10,680 --> 00:01:18,450
instead of sending directly to your

29
00:01:13,229 --> 00:01:22,259
targets SS RF you could just blow and

30
00:01:18,450 --> 00:01:24,479
less like localhost right so when you

31
00:01:22,259 --> 00:01:25,680
trigger an event in the system it will

32
00:01:24,479 --> 00:01:29,100
send a request to itself

33
00:01:25,680 --> 00:01:31,079
that's classic for SS RF application

34
00:01:29,100 --> 00:01:35,579
eavesdropping so if your application

35
00:01:31,079 --> 00:01:37,889
user third party a service that supports

36
00:01:35,579 --> 00:01:40,889
web hooks if you have access to this

37
00:01:37,890 --> 00:01:42,570
third party and the authorization scheme

38
00:01:40,890 --> 00:01:45,390
is different from your application

39
00:01:42,570 --> 00:01:47,758
transition scheme and probably in those

40
00:01:45,390 --> 00:01:49,890
applications you could just no proxy

41
00:01:47,759 --> 00:01:51,570
change this URL to proxy all the web

42
00:01:49,890 --> 00:01:53,970
hooks request to your application and

43
00:01:51,570 --> 00:01:57,360
then proxy back to the original URL and

44
00:01:53,970 --> 00:02:00,119
nobody will know about this one hiding

45
00:01:57,360 --> 00:02:02,219
data exfiltration so instead of just

46
00:02:00,119 --> 00:02:04,110
know if you have a malware instead

47
00:02:02,219 --> 00:02:06,419
inside the network instead of just

48
00:02:04,110 --> 00:02:07,300
sending directly to your fiancée from

49
00:02:06,420 --> 00:02:09,190
the endpoint

50
00:02:07,300 --> 00:02:11,380
to your senses server could just

51
00:02:09,190 --> 00:02:13,750
register a web book on some internal

52
00:02:11,380 --> 00:02:16,960
service like geet

53
00:02:13,750 --> 00:02:19,600
for example and the web hook URL will be

54
00:02:16,960 --> 00:02:21,790
your C&C so your endpoint won't be

55
00:02:19,600 --> 00:02:24,400
sending any direct traffic to your

56
00:02:21,790 --> 00:02:26,440
sincere but just sending some commits to

57
00:02:24,400 --> 00:02:29,200
get which is like a legitimate traffic

58
00:02:26,440 --> 00:02:33,160
inside the network right and the git

59
00:02:29,200 --> 00:02:36,010
server will send those requests to your

60
00:02:33,160 --> 00:02:39,700
C&C server incoming web hook tracks

61
00:02:36,010 --> 00:02:44,940
that's like on the receiving part so the

62
00:02:39,700 --> 00:02:48,070
main issue here is that you don't know

63
00:02:44,940 --> 00:02:51,250
as I said the authorization models for

64
00:02:48,070 --> 00:02:53,560
example if you integrate with slack and

65
00:02:51,250 --> 00:02:55,990
you'd like to receive different you use

66
00:02:53,560 --> 00:02:58,330
slack people or like bots different

67
00:02:55,990 --> 00:03:02,830
boards that part of your role like says

68
00:02:58,330 --> 00:03:04,930
the pipeline or something else and so

69
00:03:02,830 --> 00:03:07,150
you have different roles and levels in

70
00:03:04,930 --> 00:03:09,510
your application right but it doesn't

71
00:03:07,150 --> 00:03:11,620
it's not the same as there's slack

72
00:03:09,510 --> 00:03:14,350
authorization schemes on different roles

73
00:03:11,620 --> 00:03:16,959
so sometimes when you design your

74
00:03:14,350 --> 00:03:21,190
application using slack sometimes

75
00:03:16,959 --> 00:03:24,340
someone who has less permissions in your

76
00:03:21,190 --> 00:03:25,870
application but have like the same

77
00:03:24,340 --> 00:03:27,940
permissions as others in the slack

78
00:03:25,870 --> 00:03:30,850
Channel right so he could abuse a select

79
00:03:27,940 --> 00:03:34,720
channel to get in your application and

80
00:03:30,850 --> 00:03:37,510
in a real example some bug bug like in

81
00:03:34,720 --> 00:03:40,330
github online service and SS RAF that

82
00:03:37,510 --> 00:03:42,700
was actually exploited to a full remote

83
00:03:40,330 --> 00:03:46,540
code execution on github and one like

84
00:03:42,700 --> 00:03:49,810
seven thousand dollars but bonding so

85
00:03:46,540 --> 00:03:52,480
why should we care right everybody use

86
00:03:49,810 --> 00:03:58,600
to their web hooks any platform today

87
00:03:52,480 --> 00:04:01,510
and use web hooks you anyone so let's

88
00:03:58,600 --> 00:04:04,540
see several like the point is how we

89
00:04:01,510 --> 00:04:07,690
abuse the API developers and how web

90
00:04:04,540 --> 00:04:10,090
hooks changed not only the mmm our

91
00:04:07,690 --> 00:04:12,070
concerns in production but also during

92
00:04:10,090 --> 00:04:14,230
the development itself and how it's

93
00:04:12,070 --> 00:04:15,810
different from the regular development

94
00:04:14,230 --> 00:04:18,329
practices

95
00:04:15,810 --> 00:04:20,850
and so one of the challenges when you

96
00:04:18,329 --> 00:04:23,580
build web hooks you rely on third-party

97
00:04:20,850 --> 00:04:25,470
applications right and if you're like

98
00:04:23,580 --> 00:04:29,219
developing on your computer on your

99
00:04:25,470 --> 00:04:32,010
laptop on your station you have some

100
00:04:29,220 --> 00:04:35,520
api's right how do you test web

101
00:04:32,010 --> 00:04:37,469
integrations you need to receive to have

102
00:04:35,520 --> 00:04:39,900
like a listing port right in your

103
00:04:37,470 --> 00:04:42,110
organization but that's requires the

104
00:04:39,900 --> 00:04:44,520
regular process right going to the

105
00:04:42,110 --> 00:04:46,830
security department asking you know to

106
00:04:44,520 --> 00:04:50,370
open some port and forward it to a

107
00:04:46,830 --> 00:04:56,280
specific area which like the militarized

108
00:04:50,370 --> 00:04:59,840
zone so it's the challenge and there are

109
00:04:56,280 --> 00:05:02,909
solutions remember the end group service

110
00:04:59,840 --> 00:05:05,429
so there are several solutions out there

111
00:05:02,910 --> 00:05:08,760
online tools right great people love

112
00:05:05,430 --> 00:05:11,729
online tools instead of installing so

113
00:05:08,760 --> 00:05:13,860
you start seeing we're going deeper and

114
00:05:11,729 --> 00:05:16,650
understanding like what's what's those

115
00:05:13,860 --> 00:05:18,960
services like why people use it and how

116
00:05:16,650 --> 00:05:21,270
much they use it we've seen like on

117
00:05:18,960 --> 00:05:23,940
almost all the forums we're not talking

118
00:05:21,270 --> 00:05:27,030
about those types of services and that's

119
00:05:23,940 --> 00:05:28,500
how easy to just you know redirect this

120
00:05:27,030 --> 00:05:31,109
traffic and tunnel it to your

121
00:05:28,500 --> 00:05:33,360
application the problem is that the

122
00:05:31,110 --> 00:05:34,080
developers don't really understand what

123
00:05:33,360 --> 00:05:36,810
they are doing

124
00:05:34,080 --> 00:05:38,460
they'll just will go to this server down

125
00:05:36,810 --> 00:05:40,740
at some client and they don't understand

126
00:05:38,460 --> 00:05:46,770
that they have a cache ttp tournament

127
00:05:40,740 --> 00:05:49,550
they're directly to their endpoint soon

128
00:05:46,770 --> 00:05:54,390
from there an example from in Atlassian

129
00:05:49,550 --> 00:05:58,380
forum and many more of those services

130
00:05:54,390 --> 00:06:01,080
out there and they're just laundering

131
00:05:58,380 --> 00:06:05,190
the all good channels with web hook

132
00:06:01,080 --> 00:06:08,640
testing words so let's see an example

133
00:06:05,190 --> 00:06:10,440
like just showcase the problem you know

134
00:06:08,640 --> 00:06:12,830
that's that's the main challenge you

135
00:06:10,440 --> 00:06:15,870
know we are talking about when you use

136
00:06:12,830 --> 00:06:17,760
it's a classic like architecture today

137
00:06:15,870 --> 00:06:20,280
for the organization's and you know

138
00:06:17,760 --> 00:06:21,430
there's the internal zone there's the

139
00:06:20,280 --> 00:06:23,619
DMZ

140
00:06:21,430 --> 00:06:25,840
so usually someone who would like to

141
00:06:23,620 --> 00:06:28,389
hack your organization right they will

142
00:06:25,840 --> 00:06:30,820
go for you you know that there isn't the

143
00:06:28,389 --> 00:06:33,759
military zone which is separate from the

144
00:06:30,820 --> 00:06:37,300
internal zone but once you have those no

145
00:06:33,759 --> 00:06:39,250
yeah applications directly exposed to

146
00:06:37,300 --> 00:06:42,280
the Internet's internet by the

147
00:06:39,250 --> 00:06:45,850
developers someone could happen you know

148
00:06:42,280 --> 00:06:47,650
the meaning of this hack and the damage

149
00:06:45,850 --> 00:06:52,780
is to be inside your corporate network

150
00:06:47,650 --> 00:06:55,710
and not inside the DMZ and the other

151
00:06:52,780 --> 00:06:59,469
thing and the other concern here is that

152
00:06:55,710 --> 00:07:02,198
actually you know there's no like all

153
00:06:59,470 --> 00:07:04,210
this SDLC Pro process right the secure

154
00:07:02,199 --> 00:07:05,830
development life cycle and the hardening

155
00:07:04,210 --> 00:07:09,400
of your application before it goes

156
00:07:05,830 --> 00:07:12,280
through to the DMZ for production or

157
00:07:09,400 --> 00:07:14,380
even for like staging environment you

158
00:07:12,280 --> 00:07:17,650
don't have those processes so most

159
00:07:14,380 --> 00:07:19,509
probably you will expose an application

160
00:07:17,650 --> 00:07:22,030
that wasn't been tested it wasn't

161
00:07:19,509 --> 00:07:22,539
audited your environment is not hard and

162
00:07:22,030 --> 00:07:24,580
right

163
00:07:22,539 --> 00:07:27,159
adjust your development environment and

164
00:07:24,580 --> 00:07:29,409
that's different from the classic

165
00:07:27,160 --> 00:07:33,370
development cycle because the Colossus

166
00:07:29,410 --> 00:07:36,280
development cycle developers want won't

167
00:07:33,370 --> 00:07:39,610
expose you know a web server locally on

168
00:07:36,280 --> 00:07:43,780
their endpoint but gold on the regular

169
00:07:39,610 --> 00:07:45,909
death so that see case study with their

170
00:07:43,780 --> 00:07:49,059
specifically focus on this and group

171
00:07:45,909 --> 00:07:56,710
service to see like what can we check

172
00:07:49,060 --> 00:07:59,860
out this one see switch - Tomer ok so

173
00:07:56,710 --> 00:08:03,880
let's see a case study by exploiting

174
00:07:59,860 --> 00:08:08,919
yang crock so I will start them engross

175
00:08:03,880 --> 00:08:11,280
server this server is now online it's

176
00:08:08,919 --> 00:08:11,280
just

177
00:08:15,760 --> 00:08:19,900
hope we will see it now

178
00:08:22,700 --> 00:08:28,370
so the presentation is fine but okay

179
00:08:32,900 --> 00:08:39,968
now we can see it okay so I will start

180
00:08:37,490 --> 00:08:44,660
the in group client again

181
00:08:39,969 --> 00:08:47,960
now this angry client is a link to

182
00:08:44,660 --> 00:08:51,020
another application inside my internal

183
00:08:47,960 --> 00:08:54,860
network and now this internal

184
00:08:51,020 --> 00:08:56,449
application could be accessed by people

185
00:08:54,860 --> 00:08:58,370
from the outside world

186
00:08:56,450 --> 00:09:03,110
and not just from the internal network

187
00:08:58,370 --> 00:09:07,160
or the local host so now I can just surf

188
00:09:03,110 --> 00:09:10,550
this web and I will see the application

189
00:09:07,160 --> 00:09:16,000
now those applications like Mac said

190
00:09:10,550 --> 00:09:19,880
doesn't have an as DLC and people won't

191
00:09:16,000 --> 00:09:21,860
fix those bugs automatically because

192
00:09:19,880 --> 00:09:23,810
those are internal applications and

193
00:09:21,860 --> 00:09:25,760
every developer knows that if it's

194
00:09:23,810 --> 00:09:30,849
internally it's okay that we all have

195
00:09:25,760 --> 00:09:34,370
security bugs but no no it's not so

196
00:09:30,850 --> 00:09:36,560
let's see what happens when you put this

197
00:09:34,370 --> 00:09:42,170
internal application that's all right so

198
00:09:36,560 --> 00:09:45,790
let's say it's actually a tomcat and

199
00:09:42,170 --> 00:09:49,400
this tomcat server is vulnerable to a

200
00:09:45,790 --> 00:09:51,680
put method that means that when I send

201
00:09:49,400 --> 00:09:58,730
put method with data it will create a

202
00:09:51,680 --> 00:10:06,260
file with this data so I can just take

203
00:09:58,730 --> 00:10:17,450
this command it's empty

204
00:10:06,260 --> 00:10:26,510
I will send it to my server and I should

205
00:10:17,450 --> 00:10:33,530
have CH SP that's right and I have

206
00:10:26,510 --> 00:10:36,110
simply touch SP so I am I am rue it

207
00:10:33,530 --> 00:10:42,500
and that's it I'm in the internal

208
00:10:36,110 --> 00:10:46,010
network no problem so um now I will show

209
00:10:42,500 --> 00:10:50,210
another example of how people can see

210
00:10:46,010 --> 00:10:53,510
those end points so this end point is

211
00:10:50,210 --> 00:10:55,520
actually my end point it's never posted

212
00:10:53,510 --> 00:10:58,970
on the internet so no one's supposed to

213
00:10:55,520 --> 00:11:02,090
know what is the end point is what where

214
00:10:58,970 --> 00:11:07,460
to find it but sometimes people create

215
00:11:02,090 --> 00:11:09,800
their own certificates like SSL pinning

216
00:11:07,460 --> 00:11:13,180
or just they want to create their own

217
00:11:09,800 --> 00:11:17,270
significant for security reasons so

218
00:11:13,180 --> 00:11:23,599
let's take the domain name and put it

219
00:11:17,270 --> 00:11:25,850
here in the sub domain in CRT dot s age

220
00:11:23,600 --> 00:11:28,490
that will show us lots of City

221
00:11:25,850 --> 00:11:33,770
certifications that were created lately

222
00:11:28,490 --> 00:11:36,170
and you will see that we have here the

223
00:11:33,770 --> 00:11:40,370
domain that I showed the vulnerability

224
00:11:36,170 --> 00:11:43,430
on so that's another way to find those

225
00:11:40,370 --> 00:11:49,880
endpoints to enumerate the domains by

226
00:11:43,430 --> 00:11:51,949
using tools like subdomain analyzer and

227
00:11:49,880 --> 00:11:56,600
another tools that will find subdomains

228
00:11:51,950 --> 00:12:00,140
by looking at lots of websites and then

229
00:11:56,600 --> 00:12:02,530
you will be able to exploit them so back

230
00:12:00,140 --> 00:12:02,530
to max

231
00:12:04,000 --> 00:12:10,190
so you just wanted to understand like

232
00:12:07,010 --> 00:12:12,920
how popular this one and no we just

233
00:12:10,190 --> 00:12:16,370
enumerated different domains both by

234
00:12:12,920 --> 00:12:20,599
using like you know subject as no domain

235
00:12:16,370 --> 00:12:23,589
analyzer on state service age and just

236
00:12:20,600 --> 00:12:27,680
in working on dictionaries like no

237
00:12:23,589 --> 00:12:31,070
different domains and found Italian post

238
00:12:27,680 --> 00:12:33,709
you know website and that was actually

239
00:12:31,070 --> 00:12:38,029
like a lung uploading apk and like

240
00:12:33,709 --> 00:12:40,149
different iOS apps to their store which

241
00:12:38,029 --> 00:12:42,890
seems like a development environment

242
00:12:40,149 --> 00:12:45,200
another example some travel group with

243
00:12:42,890 --> 00:12:49,000
like a login password right everything

244
00:12:45,200 --> 00:12:52,550
is okay but vulnerable sequel injection

245
00:12:49,000 --> 00:12:54,860
some other websites in tumors example

246
00:12:52,550 --> 00:12:57,109
default Tomcat installation with just

247
00:12:54,860 --> 00:12:59,920
note indication the manager just upload

248
00:12:57,110 --> 00:13:04,519
any jar and you have your own this

249
00:12:59,920 --> 00:13:07,939
endpoint another company which like

250
00:13:04,519 --> 00:13:10,040
allowed guest authentication an

251
00:13:07,940 --> 00:13:13,880
interesting one was some banking service

252
00:13:10,040 --> 00:13:15,800
which is like attacked Sam Swift ap I've

253
00:13:13,880 --> 00:13:19,520
see the same term K that means up in

254
00:13:15,800 --> 00:13:21,500
there on this endpoint and when we

255
00:13:19,520 --> 00:13:23,120
looked at the API we found the source

256
00:13:21,500 --> 00:13:27,260
code on the get bucket you know like

257
00:13:23,120 --> 00:13:29,779
that's and many more examples it's just

258
00:13:27,260 --> 00:13:32,839
few and like the domain selling company

259
00:13:29,779 --> 00:13:36,920
had like to see like internal server

260
00:13:32,839 --> 00:13:38,690
using and grog and there were like PHP

261
00:13:36,920 --> 00:13:44,479
my admin without an education with lots

262
00:13:38,690 --> 00:13:47,060
of databases so testing web hooks right

263
00:13:44,480 --> 00:13:50,540
that's just one attack vector right so

264
00:13:47,060 --> 00:13:52,550
that's like not specifically nobility in

265
00:13:50,540 --> 00:13:54,709
this channel right but how people use

266
00:13:52,550 --> 00:13:57,620
how people develop those applications

267
00:13:54,709 --> 00:13:59,719
that's real concern today because the

268
00:13:57,620 --> 00:14:01,310
thread escaped changes not just for the

269
00:13:59,720 --> 00:14:05,120
productions we said but also for the

270
00:14:01,310 --> 00:14:08,000
development and the web book testing

271
00:14:05,120 --> 00:14:09,860
online tools it's just one example there

272
00:14:08,000 --> 00:14:12,440
are other categories that you could

273
00:14:09,860 --> 00:14:14,880
inspect using online tool suspect

274
00:14:12,440 --> 00:14:19,500
incoming like API requests

275
00:14:14,880 --> 00:14:21,990
stead of deploying in a proxy tool on

276
00:14:19,500 --> 00:14:24,120
the server you just use some online

277
00:14:21,990 --> 00:14:26,190
service and provide this URL as the

278
00:14:24,120 --> 00:14:28,680
endpoint that you can use those online

279
00:14:26,190 --> 00:14:30,560
tools and many of them are indexed and

280
00:14:28,680 --> 00:14:33,000
not protected with any you know like

281
00:14:30,560 --> 00:14:36,089
password or credentials so anyone could

282
00:14:33,000 --> 00:14:38,880
just enumerate those pages and see real

283
00:14:36,090 --> 00:14:42,960
requests in production even on those

284
00:14:38,880 --> 00:14:45,960
websites so we wanted to try to see like

285
00:14:42,960 --> 00:14:47,730
okay let's look for more vulnerabilities

286
00:14:45,960 --> 00:14:49,830
like okay what happens if those guys

287
00:14:47,730 --> 00:14:51,870
install those clients how we can use

288
00:14:49,830 --> 00:14:54,000
also those clients right because to

289
00:14:51,870 --> 00:14:56,970
create this channel those channels you

290
00:14:54,000 --> 00:15:00,090
need to deploy this executable this

291
00:14:56,970 --> 00:15:02,340
channel locally and then you know it

292
00:15:00,090 --> 00:15:03,900
says like take advantage of a powerful

293
00:15:02,340 --> 00:15:07,320
local inspector that means after you

294
00:15:03,900 --> 00:15:11,750
install this tool on your device as a

295
00:15:07,320 --> 00:15:14,520
developer you have also a local website

296
00:15:11,750 --> 00:15:17,640
that you could see all the incoming

297
00:15:14,520 --> 00:15:21,270
requests for debugging as a proxy right

298
00:15:17,640 --> 00:15:23,280
on this tunnel so we found some ability

299
00:15:21,270 --> 00:15:25,829
there that allow actually to enumerate

300
00:15:23,280 --> 00:15:28,650
like if we could convince anyone to get

301
00:15:25,830 --> 00:15:32,580
in Tower into any developer with this

302
00:15:28,650 --> 00:15:34,860
tool and start our phishing website we

303
00:15:32,580 --> 00:15:37,560
could just you know mur eight all the

304
00:15:34,860 --> 00:15:39,740
channels tunnels and also do some more

305
00:15:37,560 --> 00:15:46,439
interesting stuff so take advantage

306
00:15:39,740 --> 00:15:49,350
please take advantage ok so again if we

307
00:15:46,440 --> 00:15:53,070
have we if we know a developer that use

308
00:15:49,350 --> 00:15:56,640
n Grogg we can do lots of stuff so in

309
00:15:53,070 --> 00:15:59,640
the older version of course this fix

310
00:15:56,640 --> 00:16:01,860
this bug was fixed because we told and

311
00:15:59,640 --> 00:16:04,319
grow guys that they have this bug and

312
00:16:01,860 --> 00:16:07,380
they fix it actually they don't use

313
00:16:04,320 --> 00:16:10,620
WebSocket anymore so this bug is a

314
00:16:07,380 --> 00:16:13,500
WebSocket bug they just have a WebSocket

315
00:16:10,620 --> 00:16:17,100
connection I will show it right now so

316
00:16:13,500 --> 00:16:23,339
if we use they have the local host so

317
00:16:17,100 --> 00:16:27,630
local host 4040 and i'm in the inspector

318
00:16:23,339 --> 00:16:30,690
so here the inspector and

319
00:16:27,630 --> 00:16:34,410
get all the information from one

320
00:16:30,690 --> 00:16:37,020
WebSocket connection I will refresh and

321
00:16:34,410 --> 00:16:39,300
you see this connection so here in this

322
00:16:37,020 --> 00:16:41,900
connection there's just messages that

323
00:16:39,300 --> 00:16:44,760
show all the information about the

324
00:16:41,900 --> 00:16:47,160
tunnels that you have right now so they

325
00:16:44,760 --> 00:16:50,660
just stopped using WebSocket

326
00:16:47,160 --> 00:16:54,569
so this vulnerability is removed but

327
00:16:50,660 --> 00:16:56,520
still there another vulnerability does

328
00:16:54,570 --> 00:16:58,350
that I will show here so here is an

329
00:16:56,520 --> 00:17:01,860
example what happens when someone

330
00:16:58,350 --> 00:17:05,040
entered a website and this website only

331
00:17:01,860 --> 00:17:07,829
connects to the internal network tilted

332
00:17:05,040 --> 00:17:10,290
to the localhost WebSocket server and

333
00:17:07,829 --> 00:17:13,290
just get all the information about all

334
00:17:10,290 --> 00:17:15,389
the hooks and even requests that got to

335
00:17:13,290 --> 00:17:19,139
those hooks and statistics and

336
00:17:15,390 --> 00:17:22,319
everything so this is okay this is a

337
00:17:19,140 --> 00:17:25,890
really short example I will show another

338
00:17:22,319 --> 00:17:27,899
example of a vulnerability that was

339
00:17:25,890 --> 00:17:30,270
never fixed and I'm not sure if they

340
00:17:27,900 --> 00:17:35,220
will fix it because this vulnerability

341
00:17:30,270 --> 00:17:39,780
is presented in every almost every web

342
00:17:35,220 --> 00:17:42,260
server so I will show a sneak peak of

343
00:17:39,780 --> 00:17:45,330
red tunnel that I will show in a

344
00:17:42,260 --> 00:17:49,260
presentation and besides and oh and

345
00:17:45,330 --> 00:17:51,899
black yet and other conventions as well

346
00:17:49,260 --> 00:17:56,040
so this is example of someone that lay

347
00:17:51,900 --> 00:17:58,140
just soul eater and of course behind the

348
00:17:56,040 --> 00:18:02,159
scenes there is the red tunnel iframe

349
00:17:58,140 --> 00:18:04,770
and this retinal iframe connected to the

350
00:18:02,160 --> 00:18:08,070
net and elk or a management system so

351
00:18:04,770 --> 00:18:10,800
this is the retinal management of course

352
00:18:08,070 --> 00:18:13,460
you can see that someone connected it

353
00:18:10,800 --> 00:18:16,830
started pinging the hosts of course

354
00:18:13,460 --> 00:18:22,110
localhost is there it's a fishing slab

355
00:18:16,830 --> 00:18:24,540
yes Gaming card online gaming developer

356
00:18:22,110 --> 00:18:26,669
access and we have like our malicious

357
00:18:24,540 --> 00:18:28,470
JavaScript and following the

358
00:18:26,670 --> 00:18:29,850
vulnerabilities and those clients that

359
00:18:28,470 --> 00:18:32,100
are bounded listening to

360
00:18:29,850 --> 00:18:35,250
connections on localhost you could

361
00:18:32,100 --> 00:18:39,090
actually exploit those services so the

362
00:18:35,250 --> 00:18:42,809
whole DNS rebinding process is automatic

363
00:18:39,090 --> 00:18:45,418
in retinal so it's scanned for the port

364
00:18:42,809 --> 00:18:51,918
it found the port it it knows that this

365
00:18:45,419 --> 00:18:56,190
port is HTTP port and now it starts to

366
00:18:51,919 --> 00:18:59,460
do the DNS rebinding process and how we

367
00:18:56,190 --> 00:19:03,179
can see it here on the log is the same

368
00:18:59,460 --> 00:19:05,820
thing it just because it's debugger

369
00:19:03,179 --> 00:19:08,640
version and we can see the rebinding

370
00:19:05,820 --> 00:19:12,389
process is over so let's go back here

371
00:19:08,640 --> 00:19:15,570
and we can explore the application and

372
00:19:12,390 --> 00:19:20,539
now we actually surf this the same

373
00:19:15,570 --> 00:19:24,720
application but externally from art from

374
00:19:20,539 --> 00:19:28,350
retinol and we can just use the API like

375
00:19:24,720 --> 00:19:31,590
any any normal guy that used a developer

376
00:19:28,350 --> 00:19:34,260
development version of this inspector so

377
00:19:31,590 --> 00:19:37,949
we see that we have an API and we can

378
00:19:34,260 --> 00:19:42,059
call slash API slash panels to create a

379
00:19:37,950 --> 00:19:46,710
tunnel so let's use it to our advantage

380
00:19:42,059 --> 00:19:49,799
so I will go here I will take this

381
00:19:46,710 --> 00:19:54,200
JavaScript simple code just send post

382
00:19:49,799 --> 00:19:56,700
request to slash API slash tunnels I

383
00:19:54,200 --> 00:20:01,380
will clear the logs to see that it's

384
00:19:56,700 --> 00:20:09,080
here let's say that I didn't messed up

385
00:20:01,380 --> 00:20:09,080
and I have a TCP connection let's try

386
00:20:13,210 --> 00:20:23,960
and now also our DP is in we have tunnel

387
00:20:20,360 --> 00:20:26,689
to the RDP as well that's the thing that

388
00:20:23,960 --> 00:20:30,410
we couldn't do with a regular DNS

389
00:20:26,690 --> 00:20:40,400
rebinding attack okay

390
00:20:30,410 --> 00:20:43,070
max so just to summarize the attack so

391
00:20:40,400 --> 00:20:45,500
Tomer exploit we here the client not the

392
00:20:43,070 --> 00:20:49,340
developer did install this client and

393
00:20:45,500 --> 00:20:52,760
the client was vulnerable to this now

394
00:20:49,340 --> 00:20:54,740
had this website not versus like the

395
00:20:52,760 --> 00:20:57,650
tools the debugging tool the proxy

396
00:20:54,740 --> 00:20:59,960
running on localhost and when we used

397
00:20:57,650 --> 00:21:02,480
industry binding attack to actually to

398
00:20:59,960 --> 00:21:05,510
bypass the cross origin policy and the

399
00:21:02,480 --> 00:21:06,620
problem is that this though this

400
00:21:05,510 --> 00:21:08,360
debugging tool didn't use any

401
00:21:06,620 --> 00:21:10,540
authentication right because it's on

402
00:21:08,360 --> 00:21:13,189
localhost right why should you care and

403
00:21:10,540 --> 00:21:15,409
if it doesn't have any authentication

404
00:21:13,190 --> 00:21:17,630
could just do the DNS rebinding attack

405
00:21:15,410 --> 00:21:21,400
where you quickly switch the DNS record

406
00:21:17,630 --> 00:21:24,380
to the localhost and so you load one

407
00:21:21,400 --> 00:21:26,419
page you know they manage the email you

408
00:21:24,380 --> 00:21:28,820
load it from your website right because

409
00:21:26,419 --> 00:21:30,770
the DNS points to your website but the

410
00:21:28,820 --> 00:21:34,189
time to leave for these DNS record is

411
00:21:30,770 --> 00:21:36,910
like zero so the if you try to render

412
00:21:34,190 --> 00:21:39,770
another iframe inside the original code

413
00:21:36,910 --> 00:21:42,740
the browser will go to the your DNS

414
00:21:39,770 --> 00:21:47,840
again but now you return the record with

415
00:21:42,740 --> 00:21:50,660
localhost and then the browser will go

416
00:21:47,840 --> 00:21:53,149
to the local server and load the website

417
00:21:50,660 --> 00:21:54,440
the local website in this iframe but

418
00:21:53,150 --> 00:21:56,630
from the browser perspective it's

419
00:21:54,440 --> 00:21:58,850
running in the same region because both

420
00:21:56,630 --> 00:22:00,919
the iframe and the top frame are in the

421
00:21:58,850 --> 00:22:03,080
same domain which is your domain so you

422
00:22:00,919 --> 00:22:04,820
could read all this information and the

423
00:22:03,080 --> 00:22:06,889
red tunnel tools actually exploitation

424
00:22:04,820 --> 00:22:11,330
framework for this one okay so what

425
00:22:06,890 --> 00:22:16,070
Thomas did is exploited actually on this

426
00:22:11,330 --> 00:22:18,179
Angra client with this local tools -

427
00:22:16,070 --> 00:22:19,560
doesn't have any authentication to

428
00:22:18,180 --> 00:22:21,390
create another channel because that's

429
00:22:19,560 --> 00:22:23,550
what it supports it has REST API to

430
00:22:21,390 --> 00:22:25,560
create another tunnel and it creates not

431
00:22:23,550 --> 00:22:28,470
only it supports not only HTTP tunnels

432
00:22:25,560 --> 00:22:30,960
but also TCP tunnels and an arc has just

433
00:22:28,470 --> 00:22:33,720
created TCP tunnel for like the RDP port

434
00:22:30,960 --> 00:22:36,540
right at the forward all the RDP traffic

435
00:22:33,720 --> 00:22:41,180
with our own user and just connect over

436
00:22:36,540 --> 00:22:44,670
you know to control over this device and

437
00:22:41,180 --> 00:22:47,010
they promise much more right so in that

438
00:22:44,670 --> 00:22:49,500
just one service out of many services

439
00:22:47,010 --> 00:22:52,530
and you see like hundreds of thousands

440
00:22:49,500 --> 00:22:55,530
of users just for this service if you

441
00:22:52,530 --> 00:22:59,310
just Google and I or other service

442
00:22:55,530 --> 00:23:02,330
you'll see lots of results so what we

443
00:22:59,310 --> 00:23:06,240
can do don't panic

444
00:23:02,330 --> 00:23:10,679
this guy has a build so from the

445
00:23:06,240 --> 00:23:12,540
defenders perspective you could of

446
00:23:10,680 --> 00:23:14,520
course monitoring a blessed black

447
00:23:12,540 --> 00:23:17,370
listing those services in your firewall

448
00:23:14,520 --> 00:23:19,020
right because those clients like the

449
00:23:17,370 --> 00:23:21,209
regular channels they will try to

450
00:23:19,020 --> 00:23:24,720
connect this specific like domain and

451
00:23:21,210 --> 00:23:28,080
group that I or others so I guess feral

452
00:23:24,720 --> 00:23:30,570
vendors might be aware of those or at

453
00:23:28,080 --> 00:23:32,669
least you know these security teams IT

454
00:23:30,570 --> 00:23:34,500
team should be aware of those and start

455
00:23:32,670 --> 00:23:36,810
monitoring those services and blocking

456
00:23:34,500 --> 00:23:38,660
those IP addresses and domains if

457
00:23:36,810 --> 00:23:41,790
someone will try to download and use it

458
00:23:38,660 --> 00:23:44,220
and I think the most important it's that

459
00:23:41,790 --> 00:23:45,780
you know we know within this security

460
00:23:44,220 --> 00:23:48,180
community understand that it's a tunnel

461
00:23:45,780 --> 00:23:50,399
right and what's the meaning of creating

462
00:23:48,180 --> 00:23:53,250
a tunnel directly to your endpoint

463
00:23:50,400 --> 00:23:55,770
inside the corporate and but I think

464
00:23:53,250 --> 00:23:59,190
developers don't understand it many like

465
00:23:55,770 --> 00:24:02,490
more like less security where developers

466
00:23:59,190 --> 00:24:04,590
and the problem is that there's no

467
00:24:02,490 --> 00:24:06,030
warning on those website saying like oh

468
00:24:04,590 --> 00:24:08,580
that's what could happen to you right

469
00:24:06,030 --> 00:24:13,320
it's just a web book testing to where

470
00:24:08,580 --> 00:24:15,030
poke debugging tool or and also there

471
00:24:13,320 --> 00:24:17,189
could be some solutions we have some

472
00:24:15,030 --> 00:24:19,170
something will develop internally we

473
00:24:17,190 --> 00:24:21,330
call the WebSocket hooks or like you

474
00:24:19,170 --> 00:24:24,360
could also expose

475
00:24:21,330 --> 00:24:26,580
a service an HTTP application Without

476
00:24:24,360 --> 00:24:29,159
Really creating a tunnel to your

477
00:24:26,580 --> 00:24:32,399
computer but just you know proxying the

478
00:24:29,160 --> 00:24:35,040
data to a specific page we use the

479
00:24:32,400 --> 00:24:38,280
WebSocket that's why we call it so for

480
00:24:35,040 --> 00:24:40,920
the pen testers it's a nice opportunity

481
00:24:38,280 --> 00:24:43,500
to write web hooks so first of all you

482
00:24:40,920 --> 00:24:44,970
could just search for some functionality

483
00:24:43,500 --> 00:24:46,830
web box functionality that you have here

484
00:24:44,970 --> 00:24:48,960
there aren't like use one of the threats

485
00:24:46,830 --> 00:24:51,419
they're like SS Aria for others to

486
00:24:48,960 --> 00:24:54,420
exploit it yeah see whether it's like

487
00:24:51,420 --> 00:24:57,240
unbound or no black listing for local

488
00:24:54,420 --> 00:24:59,970
house and others and also reconnaissance

489
00:24:57,240 --> 00:25:02,010
for incoming web hooks and if you see

490
00:24:59,970 --> 00:25:04,920
that this application has integrations

491
00:25:02,010 --> 00:25:06,180
with third parties and that's how micro

492
00:25:04,920 --> 00:25:08,820
services like all the modern

493
00:25:06,180 --> 00:25:10,950
applications work they combine a

494
00:25:08,820 --> 00:25:13,620
combination of different services today

495
00:25:10,950 --> 00:25:15,510
so you could attack this service for

496
00:25:13,620 --> 00:25:17,429
example just like I know if it's a

497
00:25:15,510 --> 00:25:19,470
burner ability but you know in slack for

498
00:25:17,430 --> 00:25:22,260
example the channels if you have the

499
00:25:19,470 --> 00:25:24,750
same email address for you know the same

500
00:25:22,260 --> 00:25:29,190
organization anyone can join this

501
00:25:24,750 --> 00:25:30,510
channel so if you take over an email one

502
00:25:29,190 --> 00:25:33,030
of the corporate emails we could use

503
00:25:30,510 --> 00:25:35,790
this email to get into all the channels

504
00:25:33,030 --> 00:25:37,290
of the company and so that's something

505
00:25:35,790 --> 00:25:41,250
that maybe people don't know when they

506
00:25:37,290 --> 00:25:45,290
rely on those services enumeration of

507
00:25:41,250 --> 00:25:48,480
different domains to find your targets

508
00:25:45,290 --> 00:25:51,120
also services called like request being

509
00:25:48,480 --> 00:25:54,620
in others so thank you that was toner

510
00:25:51,120 --> 00:25:54,620
and myself thank you

