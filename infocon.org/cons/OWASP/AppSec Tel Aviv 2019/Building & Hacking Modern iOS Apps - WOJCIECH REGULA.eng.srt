1
00:00:00,030 --> 00:00:07,319
all right so I think it's time to start

2
00:00:02,840 --> 00:00:10,879
welcome to my presentation in last OPSEC

3
00:00:07,319 --> 00:00:13,379
in London I wanted to show you that

4
00:00:10,880 --> 00:00:17,359
contesting iOS applications without

5
00:00:13,380 --> 00:00:21,180
jailbreak is possible and in this year I

6
00:00:17,359 --> 00:00:23,939
wanted to change the sides and show you

7
00:00:21,180 --> 00:00:27,840
how to build and hack modern iOS

8
00:00:23,939 --> 00:00:30,619
applications so my name is Vijay

9
00:00:27,840 --> 00:00:34,260
Gregoire and I am a senior IT security

10
00:00:30,619 --> 00:00:38,040
consultant at securing I'm mostly

11
00:00:34,260 --> 00:00:40,860
focused on iOS security and Apple

12
00:00:38,040 --> 00:00:44,519
product research mmm if you are

13
00:00:40,860 --> 00:00:47,670
interested in this topic you can visit

14
00:00:44,520 --> 00:00:51,690
my blog so the link is on the slide and

15
00:00:47,670 --> 00:00:53,969
some of you may know me from our

16
00:00:51,690 --> 00:00:59,190
security knowledge framework that I

17
00:00:53,969 --> 00:01:02,219
contributed to all right so I introduce

18
00:00:59,190 --> 00:01:07,100
myself now now I want to know something

19
00:01:02,219 --> 00:01:14,270
about you so security division and

20
00:01:07,100 --> 00:01:16,759
builders hands up all right and

21
00:01:14,270 --> 00:01:23,429
programmers hands up

22
00:01:16,759 --> 00:01:27,560
okay and iOS developers if any all right

23
00:01:23,430 --> 00:01:32,100
so there are iOS developers it's cool

24
00:01:27,560 --> 00:01:34,740
all right so we do not have to time to

25
00:01:32,100 --> 00:01:37,408
speak about everything in 30 minutes so

26
00:01:34,740 --> 00:01:40,169
I'll cover selected vulnerabilities that

27
00:01:37,409 --> 00:01:43,259
I found your in conducting penetration

28
00:01:40,170 --> 00:01:46,140
tests the extended version of this

29
00:01:43,259 --> 00:01:49,140
presentation will be available on my

30
00:01:46,140 --> 00:01:53,450
Twitter so if you wish to see the full

31
00:01:49,140 --> 00:01:57,960
version you can check it on my Twitter

32
00:01:53,450 --> 00:02:00,689
all right so the agenda at first we are

33
00:01:57,960 --> 00:02:04,880
going to talk about iOS platform is and

34
00:02:00,689 --> 00:02:08,098
the reality so we will be a Mythbusters

35
00:02:04,880 --> 00:02:11,280
then we will go through selected

36
00:02:08,098 --> 00:02:16,769
problems and solutions for for

37
00:02:11,280 --> 00:02:19,800
kind of box and myths then I will be

38
00:02:16,770 --> 00:02:22,620
presenting you the new Apple WWDC

39
00:02:19,800 --> 00:02:27,990
features that may help improving your

40
00:02:22,620 --> 00:02:31,440
application security in the fourth point

41
00:02:27,990 --> 00:02:34,140
my new library I asked security suit but

42
00:02:31,440 --> 00:02:37,800
I won't spoiler it at this moment

43
00:02:34,140 --> 00:02:41,130
and at the end as a samurai's give you

44
00:02:37,800 --> 00:02:45,510
short and long term things to implement

45
00:02:41,130 --> 00:02:50,340
in your iOS applications code so the

46
00:02:45,510 --> 00:02:52,920
part one platform myths and reality and

47
00:02:50,340 --> 00:02:57,560
this section I wanted to show you that

48
00:02:52,920 --> 00:03:04,040
we cannot rely on Apple platform as a

49
00:02:57,560 --> 00:03:09,239
100% secure so the first myth that there

50
00:03:04,040 --> 00:03:13,560
Apple's review is 100% reliable and as

51
00:03:09,239 --> 00:03:17,400
you can see on the slide guys from

52
00:03:13,560 --> 00:03:20,610
Guardian Mobile firewall was we're

53
00:03:17,400 --> 00:03:24,329
inspecting a malicious application with

54
00:03:20,610 --> 00:03:28,440
malicious activity and they find out

55
00:03:24,329 --> 00:03:31,489
that this application had a need bypass

56
00:03:28,440 --> 00:03:34,590
for Apple's review and as you can see

57
00:03:31,489 --> 00:03:39,209
there is a method called East Cupertino

58
00:03:34,590 --> 00:03:41,970
and as we all know Apple tests and does

59
00:03:39,209 --> 00:03:45,329
did a review in Cupertino so if the

60
00:03:41,970 --> 00:03:47,459
application was run there the you know

61
00:03:45,329 --> 00:03:51,209
the malicious activity were hidden from

62
00:03:47,459 --> 00:03:55,500
them so they didn't find it so as you

63
00:03:51,209 --> 00:03:59,489
can see some apples review by us happen

64
00:03:55,500 --> 00:04:03,299
in the wild the myth too there is no

65
00:03:59,489 --> 00:04:06,030
jailbreak for modern iOS versions and no

66
00:04:03,299 --> 00:04:06,900
it's again not true we have uncovered

67
00:04:06,030 --> 00:04:10,530
jailbreak

68
00:04:06,900 --> 00:04:13,340
that is even open source you can look

69
00:04:10,530 --> 00:04:17,548
into the details of their code on github

70
00:04:13,340 --> 00:04:20,649
so even i OS 12 as you can see is

71
00:04:17,548 --> 00:04:24,460
covered some of this version of course

72
00:04:20,649 --> 00:04:29,049
and the myth free no jailbreak means no

73
00:04:24,460 --> 00:04:32,409
reversing applications well whenever you

74
00:04:29,050 --> 00:04:34,510
try to download the IPA the application

75
00:04:32,410 --> 00:04:41,320
package from up sir

76
00:04:34,510 --> 00:04:45,039
it's encrypted using Apple DRM so in if

77
00:04:41,320 --> 00:04:49,180
you want to inspect what's inside you

78
00:04:45,040 --> 00:04:53,620
need to have or in the past you need to

79
00:04:49,180 --> 00:04:55,690
have physical device the jig broken

80
00:04:53,620 --> 00:04:58,950
physical device because you had to

81
00:04:55,690 --> 00:05:02,020
install the application and dump the

82
00:04:58,950 --> 00:05:04,870
decrypted version right and things had

83
00:05:02,020 --> 00:05:08,889
changed because now we have a tool

84
00:05:04,870 --> 00:05:12,039
called Karelian and Karelian is a full

85
00:05:08,889 --> 00:05:14,740
virtualization of iOS device so it's

86
00:05:12,039 --> 00:05:19,320
very interesting because now the process

87
00:05:14,740 --> 00:05:22,330
of dumping iOS applications will will

88
00:05:19,320 --> 00:05:24,669
look like this you just really just

89
00:05:22,330 --> 00:05:27,520
visit their sites register pay for the

90
00:05:24,669 --> 00:05:31,000
license and then you create a new device

91
00:05:27,520 --> 00:05:35,229
so it may be for example iPhone 6 you

92
00:05:31,000 --> 00:05:38,320
press ok ok and you just tick the button

93
00:05:35,229 --> 00:05:40,750
whether you want this device to be

94
00:05:38,320 --> 00:05:45,070
jailbroken and then as shown on the

95
00:05:40,750 --> 00:05:48,400
screen shot you have an SSH connection

96
00:05:45,070 --> 00:05:51,010
so you don't need a physical device

97
00:05:48,400 --> 00:05:53,260
anymore if you want to dump the

98
00:05:51,010 --> 00:05:58,000
decrypted versions of your applications

99
00:05:53,260 --> 00:06:01,710
it's pretty cool so we're going to part

100
00:05:58,000 --> 00:06:04,360
to this secure development and before

101
00:06:01,710 --> 00:06:07,830
starting developing modernized

102
00:06:04,360 --> 00:06:10,780
application or just an iOS application

103
00:06:07,830 --> 00:06:13,630
we have to think about the architecture

104
00:06:10,780 --> 00:06:17,109
and choose the programming language that

105
00:06:13,630 --> 00:06:20,680
we want to use so in our iOS the

106
00:06:17,110 --> 00:06:25,389
situation is very simple because we have

107
00:06:20,680 --> 00:06:29,469
swift and Objective C and Objective C is

108
00:06:25,389 --> 00:06:32,650
only let's say a wrapper on C because

109
00:06:29,469 --> 00:06:34,130
whenever you try to compile Objective C

110
00:06:32,650 --> 00:06:37,609
codes it's at fir

111
00:06:34,130 --> 00:06:41,150
Trane's the code is translated to pure C

112
00:06:37,610 --> 00:06:45,080
and then compiled so the vulnerabilities

113
00:06:41,150 --> 00:06:51,650
that you know from C will also exist in

114
00:06:45,080 --> 00:06:55,750
Objective C Swift is the modern Apple

115
00:06:51,650 --> 00:07:00,919
language to develop the applications so

116
00:06:55,750 --> 00:07:03,080
in Swift for example if you meet integer

117
00:07:00,920 --> 00:07:06,230
overflow in your application it will

118
00:07:03,080 --> 00:07:09,289
cause a runtime error so no

119
00:07:06,230 --> 00:07:13,010
vulnerabilities like that in Swift you

120
00:07:09,290 --> 00:07:16,790
do not have direct memory access of

121
00:07:13,010 --> 00:07:19,370
course you can access directly the

122
00:07:16,790 --> 00:07:22,940
memory but the methods will be prefixed

123
00:07:19,370 --> 00:07:24,650
by unsafe strings like on the example

124
00:07:22,940 --> 00:07:26,570
show through the slide unsafe pointer

125
00:07:24,650 --> 00:07:30,770
for example right and the

126
00:07:26,570 --> 00:07:34,580
vulnerabilities like format strings want

127
00:07:30,770 --> 00:07:37,039
existence with because we have you know

128
00:07:34,580 --> 00:07:41,330
like in every modern programming

129
00:07:37,040 --> 00:07:41,720
language string interpolation right all

130
00:07:41,330 --> 00:07:44,690
right

131
00:07:41,720 --> 00:07:47,870
and when developing iOS applications in

132
00:07:44,690 --> 00:07:50,450
Swift there are a few moves that I

133
00:07:47,870 --> 00:07:52,550
wanted to bust the first one is that

134
00:07:50,450 --> 00:07:57,740
Swift out of Busquets

135
00:07:52,550 --> 00:08:00,770
itself it's not true guys I have I had a

136
00:07:57,740 --> 00:08:02,990
client that needed to be compliant with

137
00:08:00,770 --> 00:08:07,210
mobile application security verification

138
00:08:02,990 --> 00:08:10,250
standard that was one and in the

139
00:08:07,210 --> 00:08:11,900
category eight in the residency

140
00:08:10,250 --> 00:08:15,520
requirements there is a check called

141
00:08:11,900 --> 00:08:19,340
obfuscation and my client claimed that

142
00:08:15,520 --> 00:08:22,219
they did not have do anything with it

143
00:08:19,340 --> 00:08:24,950
because with out of skates itself and I

144
00:08:22,220 --> 00:08:27,470
wanted to officially bus the bus bust

145
00:08:24,950 --> 00:08:29,990
this myth there is no obfuscation there

146
00:08:27,470 --> 00:08:32,180
is a mechanism called name mangling that

147
00:08:29,990 --> 00:08:38,719
you probably may know from for example

148
00:08:32,179 --> 00:08:41,150
programming in C C++ so as an example we

149
00:08:38,719 --> 00:08:43,600
have a test class with one instance

150
00:08:41,150 --> 00:08:46,250
variable constructor and two methods the

151
00:08:43,600 --> 00:08:47,329
functionality is just it's just a simple

152
00:08:46,250 --> 00:08:50,720
clock it everyone

153
00:08:47,329 --> 00:08:56,508
ii will print incremented number by one

154
00:08:50,720 --> 00:08:59,869
right and we when we compile it and use

155
00:08:56,509 --> 00:09:02,989
nm on the binary you can see this whole

156
00:08:59,869 --> 00:09:06,019
weird strings these are the symbols of

157
00:09:02,989 --> 00:09:10,100
this binary and as you can see they can

158
00:09:06,019 --> 00:09:14,059
be reversed or translated to the human

159
00:09:10,100 --> 00:09:16,519
readable once so at first you can see

160
00:09:14,059 --> 00:09:18,589
that underscore dollar indicates that

161
00:09:16,519 --> 00:09:21,709
it's a swift symbol then you have

162
00:09:18,589 --> 00:09:25,179
lengths with module name like this it's

163
00:09:21,709 --> 00:09:28,849
it's just it's it can be reversed right

164
00:09:25,179 --> 00:09:31,670
Apple even provided an automated tool to

165
00:09:28,850 --> 00:09:35,360
do this so if you pass the the previous

166
00:09:31,670 --> 00:09:38,779
grep to experience with the mango you

167
00:09:35,360 --> 00:09:44,660
will see the symbols in human readable

168
00:09:38,779 --> 00:09:47,389
version right all right and another myth

169
00:09:44,660 --> 00:09:52,040
swift methods cannot be dynamically

170
00:09:47,389 --> 00:09:55,459
changed and no it's not true you we can

171
00:09:52,040 --> 00:09:59,269
use freedom if you don't know what

172
00:09:55,459 --> 00:10:02,059
fritter is it's just the dynamic

173
00:09:59,269 --> 00:10:05,209
instrumentation toolkit for developers

174
00:10:02,059 --> 00:10:08,179
so all we need to do is just hook the

175
00:10:05,209 --> 00:10:12,319
swift symbol is it's as simple as that

176
00:10:08,179 --> 00:10:16,569
so example of frida code that we will be

177
00:10:12,319 --> 00:10:20,149
using in the demo so we hook this symbol

178
00:10:16,569 --> 00:10:23,419
and whenever it returns a value we enter

179
00:10:20,149 --> 00:10:26,809
we will intercept this and change the

180
00:10:23,419 --> 00:10:33,850
value to lead right so it's now a live

181
00:10:26,809 --> 00:10:39,469
demo time all right

182
00:10:33,850 --> 00:10:41,589
so at first I'll open this binary and as

183
00:10:39,470 --> 00:10:49,369
you can see it's just a regular clock

184
00:10:41,589 --> 00:10:50,839
and now with this parameters will open

185
00:10:49,369 --> 00:10:55,910
freed out of the script that I showed

186
00:10:50,839 --> 00:10:59,089
you before and as you can see the number

187
00:10:55,910 --> 00:11:01,130
now is always late right so we change

188
00:10:59,089 --> 00:11:13,580
the code execution flow and

189
00:11:01,130 --> 00:11:17,390
we changed the return value okay so

190
00:11:13,580 --> 00:11:20,080
takeaway is from this section swift's

191
00:11:17,390 --> 00:11:22,750
protects your application against binary

192
00:11:20,080 --> 00:11:25,940
vulnerabilities the typical ones and

193
00:11:22,750 --> 00:11:28,430
enforces the liber8 usage of unsecure

194
00:11:25,940 --> 00:11:32,540
methods like showed before unsafe

195
00:11:28,430 --> 00:11:35,949
pointer there is no obfuscation if you

196
00:11:32,540 --> 00:11:39,380
want to make your application to be

197
00:11:35,950 --> 00:11:41,450
reverse engineer it harder you can use

198
00:11:39,380 --> 00:11:44,770
for example Swift shield that is free

199
00:11:41,450 --> 00:11:48,260
open source and works well

200
00:11:44,770 --> 00:11:52,280
alright so data storage the next

201
00:11:48,260 --> 00:11:54,080
category and when talking about the data

202
00:11:52,280 --> 00:11:59,329
storage we have to consider the data

203
00:11:54,080 --> 00:12:02,000
that shouldn't be on your devices you

204
00:11:59,330 --> 00:12:05,930
know and this can be API keys like

205
00:12:02,000 --> 00:12:09,290
firebase private key I saw that few

206
00:12:05,930 --> 00:12:12,709
times in the wild SSH keys cloud

207
00:12:09,290 --> 00:12:16,010
credentials or even test accounts that

208
00:12:12,710 --> 00:12:21,020
work on production environment as well

209
00:12:16,010 --> 00:12:23,000
right and when we know which data

210
00:12:21,020 --> 00:12:26,420
shouldn't be stored on device there are

211
00:12:23,000 --> 00:12:28,430
there are different type of data that

212
00:12:26,420 --> 00:12:29,660
sensitive type of data that should be

213
00:12:28,430 --> 00:12:31,819
stored on device like for example

214
00:12:29,660 --> 00:12:36,079
session tokens right that should be

215
00:12:31,820 --> 00:12:38,360
stored and the places that that this

216
00:12:36,080 --> 00:12:42,170
kind of data shouldn't be stored our

217
00:12:38,360 --> 00:12:45,290
info Palast s-- user defaults regular

218
00:12:42,170 --> 00:12:47,300
files or this sensitive data may be in

219
00:12:45,290 --> 00:12:51,730
maybe even hard-coded into binary

220
00:12:47,300 --> 00:12:54,260
especially I found very a lot of times

221
00:12:51,730 --> 00:12:58,690
when conducting penetration tests the

222
00:12:54,260 --> 00:13:01,640
cloud credentials hard-coded into the

223
00:12:58,690 --> 00:13:05,390
executable file right and when we are

224
00:13:01,640 --> 00:13:07,760
talking about the data from this

225
00:13:05,390 --> 00:13:10,760
category that shouldn't be on the device

226
00:13:07,760 --> 00:13:12,350
anytime you shouldn't start you

227
00:13:10,760 --> 00:13:13,950
shouldn't store it in the kitchen right

228
00:13:12,350 --> 00:13:16,230
the keychain is secure

229
00:13:13,950 --> 00:13:18,240
mechons to store data but if some data

230
00:13:16,230 --> 00:13:23,450
shouldn't be on the device it shouldn't

231
00:13:18,240 --> 00:13:27,300
be stored even in keychain right okay so

232
00:13:23,450 --> 00:13:31,560
the C user famous I as security

233
00:13:27,300 --> 00:13:34,800
researcher shared his research where he

234
00:13:31,560 --> 00:13:37,649
shows the different types of spyware and

235
00:13:34,800 --> 00:13:41,040
as you can see there is a lot of spiral

236
00:13:37,649 --> 00:13:46,440
on iOS that as a technique use iCloud

237
00:13:41,040 --> 00:13:49,319
backup so when we are developing iOS

238
00:13:46,440 --> 00:13:52,740
application and we need to store some

239
00:13:49,320 --> 00:13:55,050
data in files we have to know which the

240
00:13:52,740 --> 00:13:57,330
the which of this data which types of

241
00:13:55,050 --> 00:14:02,010
this data will be backed up into cloud

242
00:13:57,330 --> 00:14:05,120
right so this are directories that are

243
00:14:02,010 --> 00:14:07,890
backed up so for example documents

244
00:14:05,120 --> 00:14:10,770
library application support library

245
00:14:07,890 --> 00:14:13,890
preferences and any other director in a

246
00:14:10,770 --> 00:14:16,649
library without caches and of course

247
00:14:13,890 --> 00:14:22,740
temporary director or you want to be

248
00:14:16,649 --> 00:14:26,100
backed up into iCloud okay and that will

249
00:14:22,740 --> 00:14:28,700
double the see feature that I wanted to

250
00:14:26,100 --> 00:14:32,459
show is credential provider extension as

251
00:14:28,700 --> 00:14:35,520
now you can use iCloud keychain and your

252
00:14:32,459 --> 00:14:37,979
password managers also in your native

253
00:14:35,520 --> 00:14:40,290
application that's really cool but if

254
00:14:37,980 --> 00:14:43,100
you want to your application to be

255
00:14:40,290 --> 00:14:46,680
optimized to work with this extensions

256
00:14:43,100 --> 00:14:49,680
it's a good practice to add UI text

257
00:14:46,680 --> 00:14:52,140
content type to your text inputs so the

258
00:14:49,680 --> 00:14:55,130
password managers will will be better

259
00:14:52,140 --> 00:14:58,589
know which input they should autofill

260
00:14:55,130 --> 00:15:02,670
okay and architect and the takeaways

261
00:14:58,589 --> 00:15:06,770
from data storage are always check if

262
00:15:02,670 --> 00:15:09,990
any sensitive data is stored in your APA

263
00:15:06,770 --> 00:15:11,939
for sensitive data stored in kitchen

264
00:15:09,990 --> 00:15:15,660
that you don't want to be saved in

265
00:15:11,940 --> 00:15:17,850
iCloud use this weird string Kasich

266
00:15:15,660 --> 00:15:20,219
attribute accessible one with this

267
00:15:17,850 --> 00:15:24,300
device only Suffolk so they won't be

268
00:15:20,220 --> 00:15:25,260
backed up to iCloud if we need to store

269
00:15:24,300 --> 00:15:28,589
some

270
00:15:25,260 --> 00:15:32,270
sensitive data in regular files you may

271
00:15:28,590 --> 00:15:36,840
consider the UI key data production API

272
00:15:32,270 --> 00:15:40,319
and of course latest the the last

273
00:15:36,840 --> 00:15:43,130
takeaway may be optimizing Europe with

274
00:15:40,320 --> 00:15:47,810
credential provider with adding this UI

275
00:15:43,130 --> 00:15:50,880
text type right so now cryptography the

276
00:15:47,810 --> 00:15:54,780
vulnerabilities that we found in this ms

277
00:15:50,880 --> 00:15:57,720
forest section are for example insecure

278
00:15:54,780 --> 00:16:00,470
token generation and I'm gonna show you

279
00:15:57,720 --> 00:16:04,290
that on the example where is an

280
00:16:00,470 --> 00:16:07,440
alternative to Evernote it's just about

281
00:16:04,290 --> 00:16:11,250
noting here your votes

282
00:16:07,440 --> 00:16:15,270
so beer had a functionality above on Mac

283
00:16:11,250 --> 00:16:20,010
OS and iOS that via URL schemes allowed

284
00:16:15,270 --> 00:16:21,780
to retrieve a private note from from

285
00:16:20,010 --> 00:16:25,130
this from from where from from your

286
00:16:21,780 --> 00:16:30,720
installed instance of this application

287
00:16:25,130 --> 00:16:33,150
and it's pretty sensitive right to

288
00:16:30,720 --> 00:16:36,270
retrieve sensitive notes so their

289
00:16:33,150 --> 00:16:40,470
developers decided to authorize this

290
00:16:36,270 --> 00:16:43,290
operation with a user user token so I

291
00:16:40,470 --> 00:16:46,740
wanted to show and investigate how this

292
00:16:43,290 --> 00:16:51,150
token is generated so I opened Hooper

293
00:16:46,740 --> 00:16:54,420
and I loaded it into it this is episode

294
00:16:51,150 --> 00:16:57,120
the code I rewrote it to objective-c

295
00:16:54,420 --> 00:17:03,060
version and without reading this code

296
00:16:57,120 --> 00:17:07,770
you can see here we create a new date we

297
00:17:03,060 --> 00:17:11,250
use md5 sum bit shuffling and here we go

298
00:17:07,770 --> 00:17:14,400
here we have a token right so it's it's

299
00:17:11,250 --> 00:17:18,300
it can be easily brute-force so I did

300
00:17:14,400 --> 00:17:20,699
the same and I wrote the full exploit

301
00:17:18,300 --> 00:17:24,599
and I retrieved the private notes from

302
00:17:20,699 --> 00:17:27,360
bar if you are interested in details of

303
00:17:24,599 --> 00:17:29,219
how I wrote this exploit you can read it

304
00:17:27,359 --> 00:17:31,850
on my blog so I give you a few seconds

305
00:17:29,220 --> 00:17:31,850
to take a photo

306
00:17:47,640 --> 00:17:50,390
all right

307
00:17:51,670 --> 00:17:57,970
okay I think everyone took the photo so

308
00:17:55,770 --> 00:18:02,200
automatic strength password as a feature

309
00:17:57,970 --> 00:18:06,960
of last WWDC so they mentioned before

310
00:18:02,200 --> 00:18:09,250
autofill now can create natively

311
00:18:06,960 --> 00:18:14,190
passwords connected to your domain and

312
00:18:09,250 --> 00:18:18,460
apply a specific password policy with

313
00:18:14,190 --> 00:18:21,280
with providing such string so just type

314
00:18:18,460 --> 00:18:25,450
required upper and the policy you want

315
00:18:21,280 --> 00:18:29,440
to apply on the passwords and take ways

316
00:18:25,450 --> 00:18:32,350
for developers from cryptography are

317
00:18:29,440 --> 00:18:36,280
please do not create your homemade

318
00:18:32,350 --> 00:18:42,060
ciphers since since it's very hard to do

319
00:18:36,280 --> 00:18:44,379
it securely and treat your encryption

320
00:18:42,060 --> 00:18:48,250
algorithm as should before can be easily

321
00:18:44,380 --> 00:18:50,080
reversed even even if you restrict the

322
00:18:48,250 --> 00:18:51,730
iOS version to the latest one you can

323
00:18:50,080 --> 00:18:55,659
use curl you and just decrypt your

324
00:18:51,730 --> 00:19:00,130
application and know how your secret

325
00:18:55,660 --> 00:19:04,090
algorithm were made and if you need to

326
00:19:00,130 --> 00:19:07,390
deal with crypto cryptography and AAS or

327
00:19:04,090 --> 00:19:10,389
RSA now you can use sec key create

328
00:19:07,390 --> 00:19:13,920
encrypted data and its native mechanism

329
00:19:10,390 --> 00:19:16,120
in Swift so you can use natively both

330
00:19:13,920 --> 00:19:19,480
symmetric and a symmetric cryptography

331
00:19:16,120 --> 00:19:21,850
and you can now enforce your password

332
00:19:19,480 --> 00:19:26,260
policy using a native mechanism without

333
00:19:21,850 --> 00:19:29,669
using any other third-party libraries so

334
00:19:26,260 --> 00:19:34,720
now we go to network communication and

335
00:19:29,670 --> 00:19:38,440
selected vulnerabilities here so avoid

336
00:19:34,720 --> 00:19:41,050
HTTP its unencrypted channel we all know

337
00:19:38,440 --> 00:19:42,940
that I don't think I have to explain

338
00:19:41,050 --> 00:19:47,230
this on this kind of conference that you

339
00:19:42,940 --> 00:19:53,260
shouldn't be using HTTP is HTTPS instead

340
00:19:47,230 --> 00:19:56,380
and from iOS 9 Apple introduced it up

341
00:19:53,260 --> 00:19:59,950
Transport Security which is a mechanism

342
00:19:56,380 --> 00:20:05,290
that by default will disallow the

343
00:19:59,950 --> 00:20:09,590
the HTTP unencrypted connections so

344
00:20:05,290 --> 00:20:11,990
developers in practice usually disable

345
00:20:09,590 --> 00:20:15,560
this mechanism and it's really not a

346
00:20:11,990 --> 00:20:17,390
good practice Apple knew why they need

347
00:20:15,560 --> 00:20:20,169
to implement such mekinese to protect

348
00:20:17,390 --> 00:20:26,480
your application so please try not to

349
00:20:20,170 --> 00:20:29,000
turn it off and if you use HTTP you

350
00:20:26,480 --> 00:20:33,590
should make sure always if your

351
00:20:29,000 --> 00:20:35,570
certificate is trusted and not checking

352
00:20:33,590 --> 00:20:37,750
if the circuits trust that is a really

353
00:20:35,570 --> 00:20:41,179
common case when developers implement

354
00:20:37,750 --> 00:20:44,150
certificate pinning and when sometimes

355
00:20:41,180 --> 00:20:47,330
they stop using certificate being the

356
00:20:44,150 --> 00:20:49,520
mechanism that will not check the

357
00:20:47,330 --> 00:20:52,100
assertive ldt of the certificate is

358
00:20:49,520 --> 00:20:55,250
still in the application so for example

359
00:20:52,100 --> 00:20:59,840
Twitter has a similar bug they paid for

360
00:20:55,250 --> 00:21:02,210
it over $2000 so as you can see twitter

361
00:20:59,840 --> 00:21:05,060
IRS fails to validate server certificate

362
00:21:02,210 --> 00:21:09,890
and sends off token without checking the

363
00:21:05,060 --> 00:21:12,710
certificate was was right okay and the

364
00:21:09,890 --> 00:21:15,760
next category that is platform

365
00:21:12,710 --> 00:21:17,750
interaction so when talking about

366
00:21:15,760 --> 00:21:21,350
platfrom interaction

367
00:21:17,750 --> 00:21:24,320
I mean inter application communication

368
00:21:21,350 --> 00:21:26,649
because every application in iOS that

369
00:21:24,320 --> 00:21:32,689
you will install from the App Store is

370
00:21:26,650 --> 00:21:35,350
sandbox right so in iOS we have X PC Mac

371
00:21:32,690 --> 00:21:38,600
messages URL schemes airdrop and

372
00:21:35,350 --> 00:21:42,040
clipboard but please do not use

373
00:21:38,600 --> 00:21:45,110
clipboard as a inter application

374
00:21:42,040 --> 00:21:49,399
communication mechanism the Clipper can

375
00:21:45,110 --> 00:21:52,159
be easily intercepted and modified we

376
00:21:49,400 --> 00:21:59,150
all know that but I really found such

377
00:21:52,160 --> 00:22:03,380
box in in pen tests so in iOS we should

378
00:21:59,150 --> 00:22:04,720
use these two kinds of mechanism so URL

379
00:22:03,380 --> 00:22:07,470
schemes

380
00:22:04,720 --> 00:22:10,929
the most important thing here is

381
00:22:07,470 --> 00:22:14,109
checking the sender because in most

382
00:22:10,929 --> 00:22:16,210
cases we can whitelist the applications

383
00:22:14,109 --> 00:22:18,639
that we'll be communicating to us right

384
00:22:16,210 --> 00:22:23,190
so it's just about whitelist and

385
00:22:18,639 --> 00:22:28,658
checking the sender in the box from the

386
00:22:23,190 --> 00:22:32,289
from the real word for example grab both

387
00:22:28,659 --> 00:22:35,950
on Android and iOS version via this URL

388
00:22:32,289 --> 00:22:38,499
schemes had a problem with information

389
00:22:35,950 --> 00:22:45,639
disclosure and as you can see they paid

390
00:22:38,499 --> 00:22:47,710
over $7,000 for it again Twitter bias

391
00:22:45,639 --> 00:22:51,369
application can establish FaceTime calls

392
00:22:47,710 --> 00:22:54,190
without user permission maybe a little

393
00:22:51,369 --> 00:22:56,789
bit less bounty but but still a neat

394
00:22:54,190 --> 00:22:59,440
back and the takeaways from here are

395
00:22:56,789 --> 00:23:02,349
check if a message crumbs from the

396
00:22:59,440 --> 00:23:05,200
expected sender list so I'd always try

397
00:23:02,349 --> 00:23:08,470
to whitelist the sender's I don't need

398
00:23:05,200 --> 00:23:10,299
to probably mention that the parameters

399
00:23:08,470 --> 00:23:15,279
that are passed should be validated by

400
00:23:10,299 --> 00:23:18,158
you and the first tip here is if the

401
00:23:15,279 --> 00:23:20,799
message that you retrieve from URL

402
00:23:18,159 --> 00:23:24,879
schemes is passed directly to the

403
00:23:20,799 --> 00:23:27,158
webview please check it twice and valley

404
00:23:24,879 --> 00:23:30,070
the valley and and check what the

405
00:23:27,159 --> 00:23:34,239
webview has permission to because there

406
00:23:30,070 --> 00:23:37,359
were a lot of bugs with it and the next

407
00:23:34,239 --> 00:23:40,119
section called quality so the three main

408
00:23:37,359 --> 00:23:43,869
points are easy here try not to use

409
00:23:40,119 --> 00:23:46,330
deprecated API s-- libraries that you

410
00:23:43,869 --> 00:23:49,799
use in your iOS application also may

411
00:23:46,330 --> 00:23:52,658
have vulnerabilities and if you use

412
00:23:49,799 --> 00:23:56,649
packet managers like cocoa pods or

413
00:23:52,659 --> 00:23:59,379
cartage please do not use fixed versions

414
00:23:56,649 --> 00:24:01,840
there I know it's very hard but there

415
00:23:59,379 --> 00:24:05,799
were a lot of bugs with it as an example

416
00:24:01,840 --> 00:24:09,039
AF not working in this version allowed

417
00:24:05,799 --> 00:24:14,049
to perform a man-in-the-middle attack

418
00:24:09,039 --> 00:24:17,440
because it failed to verify the cert SSL

419
00:24:14,049 --> 00:24:21,009
certificate so as you can see

420
00:24:17,440 --> 00:24:23,080
if you have hard-coded via for example

421
00:24:21,009 --> 00:24:25,440
cocoapods this AF not working with this

422
00:24:23,080 --> 00:24:28,539
version you're still vulnerable and

423
00:24:25,440 --> 00:24:31,899
during conducting penetration test I

424
00:24:28,539 --> 00:24:35,379
really commonly see the applications

425
00:24:31,899 --> 00:24:39,008
that have such old versions like this AF

426
00:24:35,379 --> 00:24:44,110
not working so try not to hard code your

427
00:24:39,009 --> 00:24:47,830
the fixed version and Apple in the last

428
00:24:44,110 --> 00:24:51,219
WWC deprecated the uiwebview

429
00:24:47,830 --> 00:24:54,428
class and they were right

430
00:24:51,220 --> 00:24:57,639
because by default you are uiwebview

431
00:24:54,429 --> 00:25:02,950
allowed to access your local files via

432
00:24:57,639 --> 00:25:05,949
this file handler and by the way WebKit

433
00:25:02,950 --> 00:25:07,840
webview also allows to retrieve your

434
00:25:05,950 --> 00:25:11,259
local files from the application

435
00:25:07,840 --> 00:25:14,408
container but it's not by default you

436
00:25:11,259 --> 00:25:16,929
have to turn on the specific flag so and

437
00:25:14,409 --> 00:25:19,629
what's the problem of it if attacker was

438
00:25:16,929 --> 00:25:23,049
able to exploit a cross-site scripting

439
00:25:19,629 --> 00:25:27,639
vulnerability the attacker was also able

440
00:25:23,049 --> 00:25:32,200
to steal your files and now some

441
00:25:27,639 --> 00:25:35,019
examples from from Apple applications so

442
00:25:32,200 --> 00:25:37,929
as you can see I found similar back in

443
00:25:35,019 --> 00:25:39,490
dictionary in Mac OS dictionary it's

444
00:25:37,929 --> 00:25:42,970
just a simple application that will

445
00:25:39,490 --> 00:25:45,490
translate words from one language to

446
00:25:42,970 --> 00:25:49,029
another but but the interesting thing

447
00:25:45,490 --> 00:25:54,429
was that they at first used UI webview

448
00:25:49,029 --> 00:25:58,379
and you could insert your own dictionary

449
00:25:54,429 --> 00:26:02,259
to the dictionary application so I

450
00:25:58,379 --> 00:26:04,178
created a malicious entry and as you can

451
00:26:02,259 --> 00:26:08,679
see the code is very simple it's just

452
00:26:04,179 --> 00:26:13,929
using Ajax it retrieves the ITC password

453
00:26:08,679 --> 00:26:16,899
and sends it to my server and the theme

454
00:26:13,929 --> 00:26:19,809
of time I shall show you how it worked

455
00:26:16,899 --> 00:26:22,689
so on the right dictionnaire application

456
00:26:19,809 --> 00:26:27,340
would left terminal I open that cat with

457
00:26:22,690 --> 00:26:29,330
listen parameter and now I press the

458
00:26:27,340 --> 00:26:31,429
mouse dictionary try to

459
00:26:29,330 --> 00:26:34,040
search for something and boom a TC

460
00:26:31,430 --> 00:26:40,700
password is was sent directly to my

461
00:26:34,040 --> 00:26:42,889
server there was also a similar problem

462
00:26:40,700 --> 00:26:45,140
with viewer but I don't have time to

463
00:26:42,890 --> 00:26:47,360
explain it to you if you are interested

464
00:26:45,140 --> 00:26:51,820
contact me to me after the presentation

465
00:26:47,360 --> 00:26:57,590
and looki heart from Google project 0

466
00:26:51,820 --> 00:27:00,230
fundus - so kudos for him and an example

467
00:26:57,590 --> 00:27:04,189
from non-apple applications

468
00:27:00,230 --> 00:27:09,070
Yahoo iOS version had a similar problem

469
00:27:04,190 --> 00:27:11,720
and attacker was able to as you can see

470
00:27:09,070 --> 00:27:13,520
retrieve full cookies from the

471
00:27:11,720 --> 00:27:19,970
applications and the who paid for it

472
00:27:13,520 --> 00:27:23,110
over $3,000 okay so now the latest

473
00:27:19,970 --> 00:27:27,050
category that I wanted to show you is

474
00:27:23,110 --> 00:27:29,689
resiliency requirements so in this

475
00:27:27,050 --> 00:27:34,310
section we are going to talk about anti

476
00:27:29,690 --> 00:27:36,980
tampering and anti tampering is a kind

477
00:27:34,310 --> 00:27:38,629
of additional security layer that you

478
00:27:36,980 --> 00:27:40,760
may be interested to implement it to

479
00:27:38,630 --> 00:27:45,530
your application and this is especially

480
00:27:40,760 --> 00:27:48,680
for those who just don't want to be the

481
00:27:45,530 --> 00:27:50,870
curve tampered with our consider malware

482
00:27:48,680 --> 00:27:53,480
as a risk because usually malware will

483
00:27:50,870 --> 00:27:56,449
will at first Jack broke jailbreak your

484
00:27:53,480 --> 00:27:58,810
phone and then do some malicious

485
00:27:56,450 --> 00:28:01,370
activities and there are of course

486
00:27:58,810 --> 00:28:03,800
developers that are just need to be

487
00:28:01,370 --> 00:28:06,189
compliant with mobile application

488
00:28:03,800 --> 00:28:12,139
security verification standard and just

489
00:28:06,190 --> 00:28:17,390
you know check the check the column in

490
00:28:12,140 --> 00:28:21,560
anti tampering so I prepared a special

491
00:28:17,390 --> 00:28:27,430
library for it iOS security suit that's

492
00:28:21,560 --> 00:28:31,310
now in a pre-release stage it is

493
00:28:27,430 --> 00:28:33,680
available github but the features that I

494
00:28:31,310 --> 00:28:35,990
wanted to say that it's in pure Swift so

495
00:28:33,680 --> 00:28:40,430
no legacy objective code in your

496
00:28:35,990 --> 00:28:42,800
applications it will detect for the new

497
00:28:40,430 --> 00:28:46,130
jailbreak with new

498
00:28:42,800 --> 00:28:49,940
indicators it will check for attached

499
00:28:46,130 --> 00:28:52,400
debuggers or even will find tampering

500
00:28:49,940 --> 00:28:55,970
tools like freedom needle passionfruit

501
00:28:52,400 --> 00:28:58,280
and any other common tools and also it

502
00:28:55,970 --> 00:29:02,330
will check if your application was run

503
00:28:58,280 --> 00:29:06,050
under the emulator so if you are

504
00:29:02,330 --> 00:29:11,600
interested there is a QR code to the

505
00:29:06,050 --> 00:29:14,770
github page I released it on MIT license

506
00:29:11,600 --> 00:29:19,719
so feel free to use it for free

507
00:29:14,770 --> 00:29:19,720
alright few seconds to take a photo

508
00:29:28,310 --> 00:29:38,960
okay and under summary so the most

509
00:29:36,350 --> 00:29:41,360
common vulnerabilities that we find in

510
00:29:38,960 --> 00:29:44,060
modernist applications are sensitive

511
00:29:41,360 --> 00:29:47,419
data without any protection that may be

512
00:29:44,060 --> 00:29:50,179
backed up the API key is cloud

513
00:29:47,420 --> 00:29:54,710
credentials working on production test

514
00:29:50,180 --> 00:29:57,680
accounts the network issues like HTTP

515
00:29:54,710 --> 00:30:00,440
connections poorly protected

516
00:29:57,680 --> 00:30:04,280
URL schemes or fixed library version

517
00:30:00,440 --> 00:30:07,820
with commonly known vulnerabilities and

518
00:30:04,280 --> 00:30:12,649
the recommendations for developers in

519
00:30:07,820 --> 00:30:15,770
short term you should try to optimize

520
00:30:12,650 --> 00:30:19,190
your application to work properly with

521
00:30:15,770 --> 00:30:21,830
password managers and autofill and if

522
00:30:19,190 --> 00:30:25,130
you are developing a high risk

523
00:30:21,830 --> 00:30:29,449
application you may consider applying

524
00:30:25,130 --> 00:30:33,530
additional anti tampering checks in your

525
00:30:29,450 --> 00:30:35,780
app and in long term if you used UI

526
00:30:33,530 --> 00:30:38,840
webview that I showed you before with

527
00:30:35,780 --> 00:30:43,040
this vulnerabilities you may need to

528
00:30:38,840 --> 00:30:46,520
change to WebKit web view from the last

529
00:30:43,040 --> 00:30:48,440
WWDC you now can use native password

530
00:30:46,520 --> 00:30:53,629
policy in your applications so no more

531
00:30:48,440 --> 00:30:55,790
third-party poll policy enforcers and if

532
00:30:53,630 --> 00:30:58,910
your application is written in

533
00:30:55,790 --> 00:31:01,790
objective-c it's not a good time to

534
00:30:58,910 --> 00:31:02,750
start thinking and considering migrating

535
00:31:01,790 --> 00:31:05,540
in it

536
00:31:02,750 --> 00:31:09,830
Swift I know it can be painful but now

537
00:31:05,540 --> 00:31:13,250
Swift is I can say it's stable so so

538
00:31:09,830 --> 00:31:16,730
it's a good time to think about it all

539
00:31:13,250 --> 00:31:18,860
right so basically on our experience in

540
00:31:16,730 --> 00:31:21,620
most applications that we test

541
00:31:18,860 --> 00:31:24,649
vulnerabilities are exists and in my

542
00:31:21,620 --> 00:31:26,750
opinion and it's only my opinion most of

543
00:31:24,650 --> 00:31:30,200
the vulnerabilities can be fixed by

544
00:31:26,750 --> 00:31:32,840
security our developers but we're only

545
00:31:30,200 --> 00:31:36,410
humans right and even security aware

546
00:31:32,840 --> 00:31:39,020
developers may miss something so if you

547
00:31:36,410 --> 00:31:41,090
develop a high-risk application I would

548
00:31:39,020 --> 00:31:44,990
recommend you

549
00:31:41,090 --> 00:31:50,449
/ from penetration tests security is

550
00:31:44,990 --> 00:31:53,370
very important here so for everyone who

551
00:31:50,450 --> 00:31:55,740
leaves the business the business card I

552
00:31:53,370 --> 00:31:59,370
will send this presentation directly to

553
00:31:55,740 --> 00:32:02,150
their email and for now it's all thank

554
00:31:59,370 --> 00:32:02,149
you for your attention

555
00:32:05,830 --> 00:32:09,639
[Applause]

556
00:32:16,549 --> 00:32:21,639
I take a photo of you it's my tradition

557
00:32:21,909 --> 00:32:30,879
all right if you have any questions feel

558
00:32:28,489 --> 00:32:30,879
free to ask

