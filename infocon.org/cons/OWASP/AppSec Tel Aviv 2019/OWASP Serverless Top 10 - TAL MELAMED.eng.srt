1
00:00:00,030 --> 00:00:06,600
hi everyone can you hear me great thanks

2
00:00:04,170 --> 00:00:09,450
for coming

3
00:00:06,600 --> 00:00:13,340
my name is tal tal Mohammad I'm the head

4
00:00:09,450 --> 00:00:15,870
of security research at proteger labs

5
00:00:13,340 --> 00:00:18,480
Israel is a start-up for service

6
00:00:15,870 --> 00:00:22,100
security and today we're gonna talk

7
00:00:18,480 --> 00:00:22,100
about Server last top 10

8
00:00:22,580 --> 00:00:29,669
so before I start about me you can read

9
00:00:26,400 --> 00:00:34,980
about me online if you want to follow me

10
00:00:29,670 --> 00:00:36,210
use one of those I'm working at a

11
00:00:34,980 --> 00:00:40,620
company called proteger

12
00:00:36,210 --> 00:00:42,570
we do serve a less security solution of

13
00:00:40,620 --> 00:00:46,559
course if it interests you come back

14
00:00:42,570 --> 00:00:48,930
after the talk well two talks after this

15
00:00:46,559 --> 00:00:52,500
talk you are all invited to the project

16
00:00:48,930 --> 00:00:53,879
showcase where I have another talk so

17
00:00:52,500 --> 00:00:57,120
what are we gonna talk today

18
00:00:53,879 --> 00:01:00,480
intro usually I give about 10-15 minutes

19
00:00:57,120 --> 00:01:02,910
intro about service because it's a

20
00:01:00,480 --> 00:01:05,000
relatively new technology but I don't

21
00:01:02,910 --> 00:01:07,590
have time for that so I'll make it short

22
00:01:05,000 --> 00:01:09,420
just to make you understand what our

23
00:01:07,590 --> 00:01:14,760
cloud functions and then we'll dive into

24
00:01:09,420 --> 00:01:17,340
the top ten so first before we invent

25
00:01:14,760 --> 00:01:21,930
AWS latest reinvent no one knew what

26
00:01:17,340 --> 00:01:24,420
services usually this the first question

27
00:01:21,930 --> 00:01:26,159
that people ask me after I tell them

28
00:01:24,420 --> 00:01:30,780
yeah I do service security they say

29
00:01:26,159 --> 00:01:33,119
server what so after the talk after the

30
00:01:30,780 --> 00:01:35,430
reinvent people start noticing it and

31
00:01:33,119 --> 00:01:38,579
you can see most of the talk wer about

32
00:01:35,430 --> 00:01:42,450
service and after that security which is

33
00:01:38,579 --> 00:01:44,789
interesting because if I go to Google

34
00:01:42,450 --> 00:01:48,360
Trends and I look at service you can see

35
00:01:44,790 --> 00:01:50,250
it's a constant increase over time yeah

36
00:01:48,360 --> 00:01:57,600
people hear more and more about server

37
00:01:50,250 --> 00:01:59,399
as they want to participate but we're

38
00:01:57,600 --> 00:02:04,469
interesting and interested in

39
00:01:59,399 --> 00:02:05,640
there's nothing and maybe one but that's

40
00:02:04,469 --> 00:02:09,389
me

41
00:02:05,640 --> 00:02:10,830
so we're not really there yet in the

42
00:02:09,389 --> 00:02:11,489
security people will start an

43
00:02:10,830 --> 00:02:12,990
understanding

44
00:02:11,490 --> 00:02:15,510
after their getting hacked like always

45
00:02:12,990 --> 00:02:20,000
like with every new technology Oh mobile

46
00:02:15,510 --> 00:02:23,329
we don't need a new security right sorry

47
00:02:20,000 --> 00:02:27,120
but it's a thing and how do I know

48
00:02:23,330 --> 00:02:29,660
because this is from last night Palo

49
00:02:27,120 --> 00:02:33,000
Alto just acquired our competitors so

50
00:02:29,660 --> 00:02:35,700
raises also our values so that's also

51
00:02:33,000 --> 00:02:39,080
good so people are starting to

52
00:02:35,700 --> 00:02:42,329
understand that service is a thing and

53
00:02:39,080 --> 00:02:45,600
how do I know that as well is because

54
00:02:42,330 --> 00:02:47,850
all the major companies are doing

55
00:02:45,600 --> 00:02:53,670
service providing that service so as

56
00:02:47,850 --> 00:02:57,090
your AWS GCP Google SAP IBM you name it

57
00:02:53,670 --> 00:03:00,209
the big ones are going service so what

58
00:02:57,090 --> 00:03:02,250
are serverless what is service exactly

59
00:03:00,210 --> 00:03:04,320
just this is the only intro that you'll

60
00:03:02,250 --> 00:03:07,980
get about service if you want do some

61
00:03:04,320 --> 00:03:11,850
homework after that so service is just

62
00:03:07,980 --> 00:03:14,130
giving you compute powers on the class

63
00:03:11,850 --> 00:03:16,560
so I'll I'll mention usually I'll say

64
00:03:14,130 --> 00:03:19,620
AWS because they rule the market but I

65
00:03:16,560 --> 00:03:22,230
mean every service provider so for

66
00:03:19,620 --> 00:03:25,740
example when you want to run your code

67
00:03:22,230 --> 00:03:27,750
your application a container spins up in

68
00:03:25,740 --> 00:03:29,610
the cloud you do not have to deal with

69
00:03:27,750 --> 00:03:33,150
anything related to that container and

70
00:03:29,610 --> 00:03:36,690
it's it's like a standard container that

71
00:03:33,150 --> 00:03:38,850
is built-in for for you for any of the

72
00:03:36,690 --> 00:03:40,890
functions so this container runs your

73
00:03:38,850 --> 00:03:43,710
code and when it's when the code ends

74
00:03:40,890 --> 00:03:48,450
and finish its execution the container

75
00:03:43,710 --> 00:03:51,570
dies there it's not completely true

76
00:03:48,450 --> 00:03:54,209
maybe we'll talk about it later so it

77
00:03:51,570 --> 00:03:56,670
only spins up when required and you pay

78
00:03:54,210 --> 00:03:59,370
only for what you use it is triggered by

79
00:03:56,670 --> 00:04:00,780
events so it does not have to be what we

80
00:03:59,370 --> 00:04:04,860
were used to in the monolithic

81
00:04:00,780 --> 00:04:06,990
application API call code runs back we

82
00:04:04,860 --> 00:04:10,280
get the the output it doesn't have to be

83
00:04:06,990 --> 00:04:13,080
like that the power of service is that

84
00:04:10,280 --> 00:04:18,480
functions can be triggered from various

85
00:04:13,080 --> 00:04:22,400
of different events like uploading file

86
00:04:18,480 --> 00:04:25,289
modifying database table

87
00:04:22,400 --> 00:04:27,840
time based like crown job or something

88
00:04:25,289 --> 00:04:32,130
like that it could could make MQTT IOT

89
00:04:27,840 --> 00:04:34,770
you name it so it's not only API it's a

90
00:04:32,130 --> 00:04:36,710
read-only environment except from the

91
00:04:34,770 --> 00:04:41,340
slash temp so everything else is

92
00:04:36,710 --> 00:04:42,780
read-only and you cannot modify it so

93
00:04:41,340 --> 00:04:46,169
you helped me have this nice temp

94
00:04:42,780 --> 00:04:49,679
library it so I said container

95
00:04:46,169 --> 00:04:53,969
terminates when code finishes its

96
00:04:49,680 --> 00:04:57,090
execution they are not wired to the

97
00:04:53,970 --> 00:05:01,229
internet so you cannot ssh to the

98
00:04:57,090 --> 00:05:04,500
containers the data is temporary so

99
00:05:01,229 --> 00:05:06,990
again when the container ends its cycle

100
00:05:04,500 --> 00:05:12,360
they shut down everything that was there

101
00:05:06,990 --> 00:05:14,729
under the slash temp is deleted we'll

102
00:05:12,360 --> 00:05:17,849
talk about these Walters Astrix after

103
00:05:14,729 --> 00:05:20,729
that the code is inside the environment

104
00:05:17,849 --> 00:05:22,530
so when the container spins up it has

105
00:05:20,729 --> 00:05:25,889
the code there so it knows what to

106
00:05:22,530 --> 00:05:28,530
execute and also the keys that gives the

107
00:05:25,889 --> 00:05:31,370
function its abilities in the cloud are

108
00:05:28,530 --> 00:05:35,758
also there and will abuse some of those

109
00:05:31,370 --> 00:05:39,060
during the talk so I'm here to introduce

110
00:05:35,759 --> 00:05:40,560
the OS service top ten so the current

111
00:05:39,060 --> 00:05:43,580
state of the project is an

112
00:05:40,560 --> 00:05:46,770
interpretation of the original OS top 10

113
00:05:43,580 --> 00:05:50,520
2017 we are running an open that data

114
00:05:46,770 --> 00:05:52,380
call you are if you were using server

115
00:05:50,520 --> 00:05:56,039
less that you're more than welcome to

116
00:05:52,380 --> 00:05:58,889
contribute of course it's a no apps os

117
00:05:56,039 --> 00:06:01,620
project so it's open so currently we

118
00:05:58,889 --> 00:06:03,960
have a report that is the interpretation

119
00:06:01,620 --> 00:06:06,960
of the OS original OS top ten but the

120
00:06:03,960 --> 00:06:10,888
goal is to have a service tailored top

121
00:06:06,960 --> 00:06:16,229
ten we also have a Chinese translation

122
00:06:10,889 --> 00:06:18,479
thanks for where are you yeah hey so we

123
00:06:16,229 --> 00:06:22,590
have a trans Chinese translation from

124
00:06:18,479 --> 00:06:27,389
the from OS pagina for the for this

125
00:06:22,590 --> 00:06:30,919
project okay gif doesn't work let's go

126
00:06:27,389 --> 00:06:33,180
so let's dive I don't have much time so

127
00:06:30,919 --> 00:06:35,180
what I'm going to do is I'm going to go

128
00:06:33,180 --> 00:06:37,820
over each of the top ten so I don't

129
00:06:35,180 --> 00:06:39,520
much time and we're gonna see and we're

130
00:06:37,820 --> 00:06:43,370
gonna talk about why it's different and

131
00:06:39,520 --> 00:06:47,030
what do we how do we need to to deal

132
00:06:43,370 --> 00:06:48,259
with it so injections wire injections on

133
00:06:47,030 --> 00:06:51,280
server lists are different than

134
00:06:48,259 --> 00:06:57,289
injection attacks on a regular

135
00:06:51,280 --> 00:07:00,020
application first there is no API input

136
00:06:57,289 --> 00:07:01,909
come not only API input coming in you

137
00:07:00,020 --> 00:07:04,008
cannot put your barriers there there is

138
00:07:01,910 --> 00:07:08,210
no firewall you can put it's not yours

139
00:07:04,009 --> 00:07:10,910
so you have basically interval as its

140
00:07:08,210 --> 00:07:13,909
code centric so it's only app SEC which

141
00:07:10,910 --> 00:07:16,849
is why it's a very good talk topic at OS

142
00:07:13,910 --> 00:07:18,830
so there are various of entry points for

143
00:07:16,849 --> 00:07:20,870
your code for your functions your

144
00:07:18,830 --> 00:07:23,599
application logic that can come from

145
00:07:20,870 --> 00:07:25,900
multiple events so this is why we refer

146
00:07:23,599 --> 00:07:29,509
to it as an event injection rather than

147
00:07:25,900 --> 00:07:31,698
what we're used to the traditional

148
00:07:29,509 --> 00:07:33,949
injections still apply

149
00:07:31,699 --> 00:07:38,810
SQL injection if you use SQL in the

150
00:07:33,949 --> 00:07:41,570
cloud no SQL if you use other no sick no

151
00:07:38,810 --> 00:07:44,330
sequel databases command injection it

152
00:07:41,570 --> 00:07:46,460
works if you have a vulnerable code but

153
00:07:44,330 --> 00:07:48,289
what you can do on the server is

154
00:07:46,460 --> 00:07:52,359
different so for example you don't have

155
00:07:48,289 --> 00:07:55,010
remote code execution or server a server

156
00:07:52,360 --> 00:07:59,300
hijacking because there is no server so

157
00:07:55,010 --> 00:08:01,400
we'll see how it works differently so

158
00:07:59,300 --> 00:08:03,680
you can you have per language of course

159
00:08:01,400 --> 00:08:06,020
code injection because functions run

160
00:08:03,680 --> 00:08:11,680
with different languages so most common

161
00:08:06,020 --> 00:08:14,030
one like eighty percent is Python anode

162
00:08:11,680 --> 00:08:19,610
current you can also have c-sharp

163
00:08:14,030 --> 00:08:22,940
especially if you use Azure and there

164
00:08:19,610 --> 00:08:24,919
are some new methods of injecting of

165
00:08:22,940 --> 00:08:26,810
injection attacks that comes through

166
00:08:24,919 --> 00:08:29,539
different types of event they weren't

167
00:08:26,810 --> 00:08:32,029
actually there weren't very common in

168
00:08:29,539 --> 00:08:35,828
the regular app which is for example and

169
00:08:32,029 --> 00:08:38,539
qtt injection through emails

170
00:08:35,828 --> 00:08:42,708
notifications and different various of

171
00:08:38,539 --> 00:08:44,959
events coming in of course the impact

172
00:08:42,708 --> 00:08:47,000
and we'll get to that later in the top

173
00:08:44,959 --> 00:08:50,780
ten the impact that you can

174
00:08:47,000 --> 00:08:54,560
you threw an injection depends on what

175
00:08:50,780 --> 00:08:58,010
the function can do so the the ability

176
00:08:54,560 --> 00:09:04,699
to or well it can be both a liability

177
00:08:58,010 --> 00:09:06,530
and an opportunity that you have to give

178
00:09:04,700 --> 00:09:08,330
or in depends also on the service

179
00:09:06,530 --> 00:09:10,250
provider but you you can give different

180
00:09:08,330 --> 00:09:12,080
permissions for different functions so

181
00:09:10,250 --> 00:09:14,480
if you think about it from the app sack

182
00:09:12,080 --> 00:09:17,090
world it's a dream right if you could

183
00:09:14,480 --> 00:09:19,760
take an application and give different

184
00:09:17,090 --> 00:09:22,430
permissions for each function inside the

185
00:09:19,760 --> 00:09:24,860
your PHP code or whatever it it could be

186
00:09:22,430 --> 00:09:27,890
it's a list privilege dream so in server

187
00:09:24,860 --> 00:09:30,110
less it also it's actually possible

188
00:09:27,890 --> 00:09:32,870
because you can actually give or in some

189
00:09:30,110 --> 00:09:35,540
providers you you have to provide

190
00:09:32,870 --> 00:09:39,920
different permissions so the injection

191
00:09:35,540 --> 00:09:42,980
impact is depends on the permissions or

192
00:09:39,920 --> 00:09:45,890
what the capabilities of the function so

193
00:09:42,980 --> 00:09:50,030
if before we had an attacker coming in

194
00:09:45,890 --> 00:09:52,370
through the also only parameter now on

195
00:09:50,030 --> 00:09:54,230
server less it could be through an API

196
00:09:52,370 --> 00:09:56,420
gateway of course but it can be also

197
00:09:54,230 --> 00:09:59,060
through different various different

198
00:09:56,420 --> 00:10:01,370
types of events so there is no here you

199
00:09:59,060 --> 00:10:03,949
can put your security controls right and

200
00:10:01,370 --> 00:10:07,610
everything goes through it but you don't

201
00:10:03,950 --> 00:10:09,740
own anything that that goes in you have

202
00:10:07,610 --> 00:10:14,720
only the code that runs when an event

203
00:10:09,740 --> 00:10:16,940
hits let's see a demo again I wanted to

204
00:10:14,720 --> 00:10:22,400
show a lot of demo but we're short in

205
00:10:16,940 --> 00:10:27,550
time so we'll settle for settle for a

206
00:10:22,400 --> 00:10:30,420
video injection yeah

207
00:10:27,550 --> 00:10:30,420
all right

208
00:10:33,460 --> 00:10:42,610
oh sorry okay so we have a slack slack

209
00:10:38,649 --> 00:10:46,839
chat bot here that interacts with me

210
00:10:42,610 --> 00:10:48,880
writing messages yeah but it's also

211
00:10:46,839 --> 00:10:51,279
vulnerable to SQL injection at two

212
00:10:48,880 --> 00:10:53,740
injections sorry not SQL he's also

213
00:10:51,279 --> 00:10:55,870
vulnerable to injection attack through a

214
00:10:53,740 --> 00:10:58,839
vulnerable library so if you see saw

215
00:10:55,870 --> 00:11:01,779
snake it was good continuance to for

216
00:10:58,839 --> 00:11:03,580
that so I am doing now required child

217
00:11:01,779 --> 00:11:06,070
process so what I'm going to do here is

218
00:11:03,580 --> 00:11:08,589
I'm gonna execute a child process within

219
00:11:06,070 --> 00:11:12,459
the function and I'm gonna send this to

220
00:11:08,589 --> 00:11:18,610
this my address at Angra the simple HTTP

221
00:11:12,459 --> 00:11:21,219
tunnel here a curl through curl so yeah

222
00:11:18,610 --> 00:11:23,410
I got that that request came from the

223
00:11:21,220 --> 00:11:25,240
container from the lambda function or

224
00:11:23,410 --> 00:11:28,480
sorry in this case it's a lambda

225
00:11:25,240 --> 00:11:31,240
function could be also a cloud function

226
00:11:28,480 --> 00:11:33,220
as your function or whatever provider

227
00:11:31,240 --> 00:11:36,430
now what I'm gonna do I'm gonna use the

228
00:11:33,220 --> 00:11:39,670
same technique but now instead of just

229
00:11:36,430 --> 00:11:43,989
standing / hack with nothing I'm gonna

230
00:11:39,670 --> 00:11:47,260
take the slash sorry I'm gonna archive

231
00:11:43,990 --> 00:11:53,020
the dot slash library which is where the

232
00:11:47,260 --> 00:11:55,660
code is and then write it into a a tar

233
00:11:53,020 --> 00:11:57,250
file under slash temp because it's the

234
00:11:55,660 --> 00:12:00,209
only location where I can write it to

235
00:11:57,250 --> 00:12:04,470
and then when I'll shoot that request up

236
00:12:00,209 --> 00:12:07,180
you can see that I got the source here

237
00:12:04,470 --> 00:12:09,220
looking through my anger oh yeah I

238
00:12:07,180 --> 00:12:17,489
wrapped it in by 64 so I can get it as

239
00:12:09,220 --> 00:12:17,490
an HTML I'm gonna just decode that

240
00:12:25,070 --> 00:12:34,399
very slowly I got all the packages and

241
00:12:29,320 --> 00:12:38,480
the code index J s so on only left for

242
00:12:34,399 --> 00:12:40,490
me is to look inside the index J s and I

243
00:12:38,480 --> 00:12:43,000
got the source code of the function

244
00:12:40,490 --> 00:12:47,209
running on the back end on the

245
00:12:43,000 --> 00:12:49,940
application so I cannot really run code

246
00:12:47,209 --> 00:12:52,609
shell on the server because there is no

247
00:12:49,940 --> 00:12:54,440
server but I can steal code and I can

248
00:12:52,610 --> 00:12:55,819
steal that and now I can investigate

249
00:12:54,440 --> 00:12:57,709
that I cut that because we don't have

250
00:12:55,819 --> 00:12:59,990
time I can see everything that goes here

251
00:12:57,709 --> 00:13:04,029
and then continue my attacks of course

252
00:12:59,990 --> 00:13:04,029
to steal some more sensitive information

253
00:13:17,050 --> 00:13:23,120
okay - broken authentication again this

254
00:13:21,170 --> 00:13:27,620
is very brief we don't have much time to

255
00:13:23,120 --> 00:13:29,420
go through ten so you can after the talk

256
00:13:27,620 --> 00:13:32,540
of course go to the documentation and

257
00:13:29,420 --> 00:13:34,639
read more see the examples broken

258
00:13:32,540 --> 00:13:36,860
authentication so the functions are

259
00:13:34,639 --> 00:13:39,170
stateless if you if you think about how

260
00:13:36,860 --> 00:13:40,819
it works when the container spins up and

261
00:13:39,170 --> 00:13:44,240
the function starts running it doesn't

262
00:13:40,819 --> 00:13:46,279
have anything that it's built in there

263
00:13:44,240 --> 00:13:48,560
is no session or something like that you

264
00:13:46,279 --> 00:13:50,029
have to take care of that by yourself so

265
00:13:48,560 --> 00:13:52,638
the functions are stateless they don't

266
00:13:50,029 --> 00:13:55,310
know what's going on before or after you

267
00:13:52,639 --> 00:13:57,620
have to take care of that again multiple

268
00:13:55,310 --> 00:14:00,170
entry points services events and

269
00:13:57,620 --> 00:14:02,449
triggers can cause a broken

270
00:14:00,170 --> 00:14:05,060
authentication because if you're

271
00:14:02,449 --> 00:14:07,550
thinking about ok it's an IP I get well

272
00:14:05,060 --> 00:14:09,529
put everything there but not all your

273
00:14:07,550 --> 00:14:13,000
code will run through a PA gateway in

274
00:14:09,529 --> 00:14:17,810
fact according to our customers about

275
00:14:13,000 --> 00:14:20,899
70% ruff roughly are going through API

276
00:14:17,810 --> 00:14:22,729
gateways 30% of the traffic is not

277
00:14:20,899 --> 00:14:25,220
coming through API gateway that means

278
00:14:22,730 --> 00:14:29,269
that putting the authentication there

279
00:14:25,220 --> 00:14:31,600
won't work for for all cases and in fact

280
00:14:29,269 --> 00:14:34,490
we saw that on some customers that were

281
00:14:31,600 --> 00:14:37,459
assuming that if the request or that the

282
00:14:34,490 --> 00:14:40,850
function is triggered outside of the API

283
00:14:37,459 --> 00:14:42,800
no one really disabled was going to be

284
00:14:40,850 --> 00:14:44,689
able to attack it but that was not true

285
00:14:42,800 --> 00:14:50,748
not the case you could attack three

286
00:14:44,689 --> 00:14:56,360
different events so for example there is

287
00:14:50,749 --> 00:15:00,350
a scenario where you can use your code

288
00:14:56,360 --> 00:15:04,279
commits and code control over for

289
00:15:00,350 --> 00:15:07,249
example this AWS you can go use the sum

290
00:15:04,279 --> 00:15:09,379
the code commit service and it sends an

291
00:15:07,249 --> 00:15:12,199
automatic notification to the to the

292
00:15:09,379 --> 00:15:16,220
manager to go to review the code and

293
00:15:12,199 --> 00:15:19,008
once the manager approves the code there

294
00:15:16,220 --> 00:15:22,009
is a lambda function that does something

295
00:15:19,009 --> 00:15:25,220
into the integrations or whatever we

296
00:15:22,009 --> 00:15:28,850
want but if we do not protect also these

297
00:15:25,220 --> 00:15:31,100
parts a malicious user can just send an

298
00:15:28,850 --> 00:15:33,350
email yeah you of course you have to

299
00:15:31,100 --> 00:15:34,999
learn something about the environment to

300
00:15:33,350 --> 00:15:35,480
be able to attack but we know that's

301
00:15:34,999 --> 00:15:37,249
possible

302
00:15:35,480 --> 00:15:39,439
why your security where a security

303
00:15:37,249 --> 00:15:43,089
conference I don't have to breach that

304
00:15:39,439 --> 00:15:47,480
so an attacker can just send an email

305
00:15:43,089 --> 00:15:50,149
that will trigger an SES an email event

306
00:15:47,480 --> 00:15:54,670
that will trigger the function so thus

307
00:15:50,149 --> 00:16:00,649
bypassing the authentication okay

308
00:15:54,670 --> 00:16:04,579
sensitive data exposure so it's the same

309
00:16:00,649 --> 00:16:06,079
as any cloud risk of course if you are

310
00:16:04,579 --> 00:16:08,209
in the cloud there is the risk although

311
00:16:06,079 --> 00:16:12,559
it's not really in a risk anymore I'm

312
00:16:08,209 --> 00:16:15,498
trusting as you're an AWS I'm trusting

313
00:16:12,559 --> 00:16:17,449
you more than I trust either my my own I

314
00:16:15,499 --> 00:16:21,309
don't know DevOps or something to store

315
00:16:17,449 --> 00:16:23,959
the data so but the risk are to say the

316
00:16:21,309 --> 00:16:27,799
things that what you are going to target

317
00:16:23,959 --> 00:16:30,859
are different so the data that the

318
00:16:27,799 --> 00:16:34,639
application interacts with or creating

319
00:16:30,860 --> 00:16:36,949
or modifying is always stored in one

320
00:16:34,639 --> 00:16:39,139
location it's the slash tab because any

321
00:16:36,949 --> 00:16:42,618
data that you want to process has to get

322
00:16:39,139 --> 00:16:45,259
there because it's the only right folder

323
00:16:42,619 --> 00:16:46,950
so if you have access to the function

324
00:16:45,259 --> 00:16:50,520
through injections or what

325
00:16:46,950 --> 00:16:53,880
you want to steal that data out of the /

326
00:16:50,520 --> 00:16:55,589
damn now before I said it's going to be

327
00:16:53,880 --> 00:17:00,210
terminated one the fact once the

328
00:16:55,589 --> 00:17:01,830
function is and its execution but that's

329
00:17:00,210 --> 00:17:04,890
is not completely true they have

330
00:17:01,830 --> 00:17:08,160
something for performance where they

331
00:17:04,890 --> 00:17:10,770
recycle containers if there is enough

332
00:17:08,160 --> 00:17:14,250
requests so you can actually keep old

333
00:17:10,770 --> 00:17:18,929
containers alive if your keep requesting

334
00:17:14,250 --> 00:17:21,650
more and more scaling the data scaling

335
00:17:18,929 --> 00:17:25,439
the application so you can keep the data

336
00:17:21,650 --> 00:17:28,500
remain to remain and you can still sort

337
00:17:25,439 --> 00:17:31,740
you can still customer data environment

338
00:17:28,500 --> 00:17:33,780
variables in the environment also

339
00:17:31,740 --> 00:17:38,640
contain sensitive data and we'll see

340
00:17:33,780 --> 00:17:41,100
that later so actually the keys for the

341
00:17:38,640 --> 00:17:42,510
function the session keys what the

342
00:17:41,100 --> 00:17:45,240
function can actually do in the

343
00:17:42,510 --> 00:17:47,820
environment and in the cloud is stored

344
00:17:45,240 --> 00:17:51,059
there so also that you can steal

345
00:17:47,820 --> 00:17:55,230
sensitive data in open buckets and open

346
00:17:51,059 --> 00:17:58,620
blobs and any storage cloud storage that

347
00:17:55,230 --> 00:18:00,480
you not configure correctly will end up

348
00:17:58,620 --> 00:18:03,360
and we've seen in we've seen in the news

349
00:18:00,480 --> 00:18:06,510
you can look at look it up many buckets

350
00:18:03,360 --> 00:18:09,689
are just open and I don't have time

351
00:18:06,510 --> 00:18:11,520
there is a website called grey warfare

352
00:18:09,690 --> 00:18:14,190
thing something like that it's it's the

353
00:18:11,520 --> 00:18:17,490
showdown of buckets so you can go there

354
00:18:14,190 --> 00:18:21,679
and start exploring back at you can you

355
00:18:17,490 --> 00:18:24,780
can if you want fake passports go there

356
00:18:21,679 --> 00:18:29,360
there is really everything there you can

357
00:18:24,780 --> 00:18:32,220
find government files opened and any

358
00:18:29,360 --> 00:18:35,899
company that stores data in there in the

359
00:18:32,220 --> 00:18:38,760
cloud sometimes they leave this open

360
00:18:35,900 --> 00:18:40,950
source code we already saw so the source

361
00:18:38,760 --> 00:18:42,440
code is also located in environment so

362
00:18:40,950 --> 00:18:47,160
you should be aware of that

363
00:18:42,440 --> 00:18:49,740
stealing keys so if you want and on AWS

364
00:18:47,160 --> 00:18:53,429
to get the keys you just type and so

365
00:18:49,740 --> 00:18:55,320
it's like so if you have execute instead

366
00:18:53,429 --> 00:18:59,340
of stealing the source code I can just

367
00:18:55,320 --> 00:19:02,250
type and get all the keys here you can

368
00:18:59,340 --> 00:19:06,060
the session token' and the exercise key

369
00:19:02,250 --> 00:19:09,480
and all that I need is there so if I

370
00:19:06,060 --> 00:19:15,570
have this I can from my own computer at

371
00:19:09,480 --> 00:19:18,060
home I can communicate or interact with

372
00:19:15,570 --> 00:19:21,090
the cloud of the probe of the of the

373
00:19:18,060 --> 00:19:23,580
company so well it's enough that I'm I

374
00:19:21,090 --> 00:19:25,500
have access to one function then I can

375
00:19:23,580 --> 00:19:27,780
do whatever this function can do from my

376
00:19:25,500 --> 00:19:30,540
own computer I don't have to interact

377
00:19:27,780 --> 00:19:33,300
with the function anymore I just still

378
00:19:30,540 --> 00:19:39,470
store those on my computer and then I

379
00:19:33,300 --> 00:19:39,470
use API calls directly to the server

380
00:19:41,360 --> 00:19:45,300
okay

381
00:19:42,510 --> 00:19:49,320
stealing function keys we just saw that

382
00:19:45,300 --> 00:19:51,629
so I have the keys I stole the keys now

383
00:19:49,320 --> 00:19:54,929
all I have to do is AWS this is an

384
00:19:51,630 --> 00:19:57,180
example AWS DynamoDB these tables with

385
00:19:54,930 --> 00:20:00,090
those kids this is from my computer at

386
00:19:57,180 --> 00:20:03,930
home and I can get all the all the

387
00:20:00,090 --> 00:20:06,870
tables in there and the companies they

388
00:20:03,930 --> 00:20:09,900
yeah in the company's cloud account

389
00:20:06,870 --> 00:20:14,909
again depends on the permissions they

390
00:20:09,900 --> 00:20:17,880
for XML xxe so it's going to be the same

391
00:20:14,910 --> 00:20:19,650
I don't have to explain more about Excel

392
00:20:17,880 --> 00:20:21,810
see the only difference is that this is

393
00:20:19,650 --> 00:20:24,900
code that we found in in github it

394
00:20:21,810 --> 00:20:26,429
exists so it exists so the only

395
00:20:24,900 --> 00:20:29,190
different if we were used to do

396
00:20:26,430 --> 00:20:33,000
something like that it's the password

397
00:20:29,190 --> 00:20:35,940
was our ground Joe Joe we don't need

398
00:20:33,000 --> 00:20:40,230
that anymore in fact this file is

399
00:20:35,940 --> 00:20:42,990
useless because it's a regular template

400
00:20:40,230 --> 00:20:45,030
file on the container so what we can do

401
00:20:42,990 --> 00:20:47,280
or want to do is something like that

402
00:20:45,030 --> 00:20:49,860
which will give us the source code so

403
00:20:47,280 --> 00:20:52,379
the attack is the same what we need to

404
00:20:49,860 --> 00:20:55,429
steal or what where we need to steal the

405
00:20:52,380 --> 00:20:55,430
data from is different

406
00:20:55,890 --> 00:21:00,860
broken access control so this is a major

407
00:20:58,830 --> 00:21:03,929
problem maybe the biggest problem today

408
00:21:00,860 --> 00:21:06,840
functions are over privileged because no

409
00:21:03,930 --> 00:21:07,470
one is able to actually go through 5,000

410
00:21:06,840 --> 00:21:09,470
D

411
00:21:07,470 --> 00:21:12,269
actions that the function is able to do

412
00:21:09,470 --> 00:21:13,950
manually and select the correct ones so

413
00:21:12,269 --> 00:21:18,179
of course you'll have to automate that

414
00:21:13,950 --> 00:21:20,279
but what we've seen 98% of all the

415
00:21:18,179 --> 00:21:25,409
thousands and thousand factions that we

416
00:21:20,279 --> 00:21:28,789
we saw 98% have over privilege from some

417
00:21:25,409 --> 00:21:31,529
of them critical some of them lower but

418
00:21:28,789 --> 00:21:35,158
let's take an example again from AWS

419
00:21:31,529 --> 00:21:37,440
sorry the other providers so this is a

420
00:21:35,159 --> 00:21:40,049
simple code that reads file from reads

421
00:21:37,440 --> 00:21:42,269
the file from the cloud storage so the

422
00:21:40,049 --> 00:21:43,950
developer the the manager tools the

423
00:21:42,269 --> 00:21:45,750
developer go give me the permissions for

424
00:21:43,950 --> 00:21:48,840
the function and it does it goes to the

425
00:21:45,750 --> 00:21:50,909
documentation on AWS comm and he gets

426
00:21:48,840 --> 00:21:53,100
this one this one works because it

427
00:21:50,909 --> 00:21:55,889
allows the developer to do whatever he

428
00:21:53,100 --> 00:21:59,158
wants so any action on a3 and any

429
00:21:55,889 --> 00:22:01,350
resource on a3 that works but what's the

430
00:21:59,159 --> 00:22:03,539
problem it's a security it means that if

431
00:22:01,350 --> 00:22:06,570
the function is compromised the attacker

432
00:22:03,539 --> 00:22:10,019
can do whatever he wants on any s3

433
00:22:06,570 --> 00:22:11,549
bucket India in the cloud account so it

434
00:22:10,019 --> 00:22:14,370
goes and this does some more research

435
00:22:11,549 --> 00:22:16,470
and it comes up with this ok whatever

436
00:22:14,370 --> 00:22:18,899
action you can do the function can do

437
00:22:16,470 --> 00:22:21,450
but only on this specific bucket that

438
00:22:18,899 --> 00:22:24,500
narrows it down the attack attack

439
00:22:21,450 --> 00:22:26,669
surface but if you can do that

440
00:22:24,500 --> 00:22:28,950
automatically maybe or maybe you have a

441
00:22:26,669 --> 00:22:30,899
genius developer then you can come over

442
00:22:28,950 --> 00:22:33,299
a security team that is very good you

443
00:22:30,899 --> 00:22:36,239
can come up with this which tells you

444
00:22:33,299 --> 00:22:38,850
that the function now can only do get

445
00:22:36,240 --> 00:22:41,340
object from the database so yes it can

446
00:22:38,850 --> 00:22:43,500
be vulnerable yes you can still get an

447
00:22:41,340 --> 00:22:45,689
object from the database from the sorry

448
00:22:43,500 --> 00:22:49,740
so click loud storage but that is all

449
00:22:45,690 --> 00:22:53,779
you can do and quickly we're gonna see

450
00:22:49,740 --> 00:22:53,779
the second and last video for

451
00:23:02,330 --> 00:23:06,710
yeah that's a surprise

452
00:23:07,540 --> 00:23:13,480
so I have a function that is vulnerable

453
00:23:09,670 --> 00:23:16,360
to command injection yeah yeah we don't

454
00:23:13,480 --> 00:23:18,720
have time so you can see here that what

455
00:23:16,360 --> 00:23:23,620
the function has in the permissions is

456
00:23:18,720 --> 00:23:28,780
f3 whatever whatever welcome wildcard so

457
00:23:23,620 --> 00:23:30,850
now I can do some with the stolen keys

458
00:23:28,780 --> 00:23:34,149
of course I'm upload to the cloud

459
00:23:30,850 --> 00:23:36,850
storage now I'm going to attack the

460
00:23:34,150 --> 00:23:39,250
function and steal least all the objects

461
00:23:36,850 --> 00:23:41,949
in in another bucket because I can do

462
00:23:39,250 --> 00:23:44,680
whatever I want in the account how much

463
00:23:41,950 --> 00:23:46,710
time okay and I got the request all the

464
00:23:44,680 --> 00:23:49,480
objects in the bucket now I'm gonna do

465
00:23:46,710 --> 00:23:53,280
quickly quickly I'm gonna change that to

466
00:23:49,480 --> 00:23:57,730
f3 put object only and only sorry and

467
00:23:53,280 --> 00:24:00,129
only on this specific bucket and now I'm

468
00:23:57,730 --> 00:24:02,880
going to do the same attacks over deploy

469
00:24:00,130 --> 00:24:07,450
the function of course again okay and

470
00:24:02,880 --> 00:24:09,700
then I'm gonna run the same attacks you

471
00:24:07,450 --> 00:24:11,410
can see that it works it it does the put

472
00:24:09,700 --> 00:24:14,800
object but now when I do the list

473
00:24:11,410 --> 00:24:17,170
objects from the database it's not gonna

474
00:24:14,800 --> 00:24:19,120
work because the function cannot do that

475
00:24:17,170 --> 00:24:20,710
it's not that the attacker is not able

476
00:24:19,120 --> 00:24:23,590
to do the same attack it's just the

477
00:24:20,710 --> 00:24:26,530
function is blocked by the provider so

478
00:24:23,590 --> 00:24:30,010
that's that's good thing if you can do

479
00:24:26,530 --> 00:24:33,430
that ok security configurations again

480
00:24:30,010 --> 00:24:36,550
open buckets permissions things like

481
00:24:33,430 --> 00:24:38,500
that can cause a timeout can cause

482
00:24:36,550 --> 00:24:41,409
denial of service or denial of what if

483
00:24:38,500 --> 00:24:42,790
you have too much timeout can cause you

484
00:24:41,410 --> 00:24:48,610
know of service if you give the function

485
00:24:42,790 --> 00:24:51,520
to lower concurrency abilities they can

486
00:24:48,610 --> 00:24:54,100
cause also denial of service or denial

487
00:24:51,520 --> 00:24:55,930
of world if you allow too much we're

488
00:24:54,100 --> 00:24:58,439
gonna skip that demo process scripting

489
00:24:55,930 --> 00:25:01,360
again it's the same attack coming from

490
00:24:58,440 --> 00:25:04,480
locations where you weren't expecting so

491
00:25:01,360 --> 00:25:07,659
he can come from an SES from an email if

492
00:25:04,480 --> 00:25:09,160
you'll join me the the DVS a talk later

493
00:25:07,660 --> 00:25:10,510
after this one I'll show you a

494
00:25:09,160 --> 00:25:12,310
cross-site scripting coming from an

495
00:25:10,510 --> 00:25:15,550
email so it's gonna be cool this

496
00:25:12,310 --> 00:25:16,990
realization is also the same but we're

497
00:25:15,550 --> 00:25:18,658
going to target sorry different

498
00:25:16,990 --> 00:25:21,450
locations so this your

499
00:25:18,659 --> 00:25:24,210
we'll target here and and then I'll

500
00:25:21,450 --> 00:25:26,879
gonna get the keys from the lambda

501
00:25:24,210 --> 00:25:28,789
function into my computer and do that

502
00:25:26,879 --> 00:25:31,439
myself five minutes great

503
00:25:28,789 --> 00:25:34,609
vulnerable dependencies so you heard

504
00:25:31,440 --> 00:25:38,639
maybe some of you heard this Nick talk

505
00:25:34,609 --> 00:25:42,749
this becomes a really problem a real

506
00:25:38,639 --> 00:25:48,449
problem in our era in survey less it

507
00:25:42,749 --> 00:25:50,700
even it's even increases why because the

508
00:25:48,450 --> 00:25:54,570
functions are that's usually that small

509
00:25:50,700 --> 00:25:56,700
are usually a type of micro-services

510
00:25:54,570 --> 00:25:58,590
architecture and you give the function a

511
00:25:56,700 --> 00:26:01,679
specific action that you want it to do

512
00:25:58,590 --> 00:26:04,080
and this is it so in order to be able to

513
00:26:01,679 --> 00:26:07,229
do that specific action it needs to

514
00:26:04,080 --> 00:26:08,999
bring up a bunch of dependencies so

515
00:26:07,229 --> 00:26:13,039
usually what we you will see in cloud

516
00:26:08,999 --> 00:26:16,889
functions is a lot of imports and then

517
00:26:13,039 --> 00:26:19,109
100 lines of code this is a typical

518
00:26:16,889 --> 00:26:24,449
function so it's very common to come up

519
00:26:19,109 --> 00:26:26,849
with a vulnerable dependency and sorry

520
00:26:24,450 --> 00:26:28,830
and of course all the examples that I

521
00:26:26,849 --> 00:26:32,009
showed you or some of them and some of

522
00:26:28,830 --> 00:26:33,749
the L shown next are going are due to

523
00:26:32,009 --> 00:26:35,639
vulnerable dependencies that brought

524
00:26:33,749 --> 00:26:37,710
your function some vulnerabilities so

525
00:26:35,639 --> 00:26:39,959
even if you think you're aligned 100

526
00:26:37,710 --> 00:26:42,119
lines of codes are ok you still have

527
00:26:39,960 --> 00:26:45,029
thousands of lines of code that coming

528
00:26:42,119 --> 00:26:48,299
wisdom that might might break your

529
00:26:45,029 --> 00:26:51,529
application down in sufficient logging

530
00:26:48,299 --> 00:26:54,599
and monitoring so different from

531
00:26:51,529 --> 00:26:56,539
containers where you have to inspect and

532
00:26:54,599 --> 00:26:59,489
know what's in there in the container

533
00:26:56,539 --> 00:27:01,139
you you you get what you use or and you

534
00:26:59,489 --> 00:27:03,149
get what you want so if you want to

535
00:27:01,139 --> 00:27:04,769
interact with the service you just talk

536
00:27:03,149 --> 00:27:06,840
to the service you don't have anything

537
00:27:04,769 --> 00:27:09,419
that you don't know about so that's a

538
00:27:06,840 --> 00:27:13,529
good thing but you also have to create

539
00:27:09,419 --> 00:27:16,200
your own logging and monitoring well

540
00:27:13,529 --> 00:27:19,049
there you have it in the cloud account

541
00:27:16,200 --> 00:27:20,700
but you have to inspect the services to

542
00:27:19,049 --> 00:27:22,710
know what's going on in your account so

543
00:27:20,700 --> 00:27:24,840
if you just leave your function to run

544
00:27:22,710 --> 00:27:26,609
they will run but you won't know what

545
00:27:24,840 --> 00:27:28,510
happens in your application because you

546
00:27:26,609 --> 00:27:31,240
cannot put anything in the network

547
00:27:28,510 --> 00:27:34,900
you go you have to go to the providers

548
00:27:31,240 --> 00:27:37,570
logging resources and start filtering so

549
00:27:34,900 --> 00:27:40,120
it's it's difficult how do you find

550
00:27:37,570 --> 00:27:42,720
security events it's difficult so you

551
00:27:40,120 --> 00:27:45,520
have to come up with a plan to do that

552
00:27:42,720 --> 00:27:47,200
plus you're going to see millions and

553
00:27:45,520 --> 00:27:50,379
millions of invitations if you have a

554
00:27:47,200 --> 00:27:52,510
production account to each of the

555
00:27:50,380 --> 00:27:56,130
functions so you won't be a bit will be

556
00:27:52,510 --> 00:27:59,650
hard to understand what's going on can

557
00:27:56,130 --> 00:28:02,470
that be real complex yes this is an

558
00:27:59,650 --> 00:28:04,090
architecture of several is function each

559
00:28:02,470 --> 00:28:07,059
of them are the different function and

560
00:28:04,090 --> 00:28:08,799
resource they have become one

561
00:28:07,059 --> 00:28:11,200
application but individual they are

562
00:28:08,799 --> 00:28:17,889
individuals and you have to monitor each

563
00:28:11,200 --> 00:28:19,360
one separately so yeah we created OSD

564
00:28:17,890 --> 00:28:22,360
VSA they're vulnerable several

565
00:28:19,360 --> 00:28:28,479
application it's also an open source

566
00:28:22,360 --> 00:28:31,059
Twitter and live version it is now in

567
00:28:28,480 --> 00:28:33,309
the one now right after this talk I'm

568
00:28:31,059 --> 00:28:35,879
gonna run there so you can join me it's

569
00:28:33,309 --> 00:28:38,139
just a vulnerable the first real-world

570
00:28:35,880 --> 00:28:39,549
vulnerable civilus application it's a

571
00:28:38,140 --> 00:28:43,929
working serverless

572
00:28:39,549 --> 00:28:46,389
with eekum flows that you can they're

573
00:28:43,929 --> 00:28:50,890
all 100% service that you can hack and

574
00:28:46,390 --> 00:28:53,880
fix that's it thank you thank you very

575
00:28:50,890 --> 00:28:53,880
much for joining me

