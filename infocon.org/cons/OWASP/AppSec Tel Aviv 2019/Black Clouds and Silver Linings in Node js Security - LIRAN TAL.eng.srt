1
00:00:00,030 --> 00:00:04,740
so before we get started let's get

2
00:00:03,270 --> 00:00:07,080
something straight because someone had

3
00:00:04,740 --> 00:00:13,049
mistaken this hat to be Shrek it's not

4
00:00:07,080 --> 00:00:15,929
it's Yoda all good they're great happy

5
00:00:13,049 --> 00:00:18,410
to get my screen working all right okay

6
00:00:15,929 --> 00:00:21,300
I think it's coming back thank you

7
00:00:18,410 --> 00:00:23,279
all right cool so we're gonna have more

8
00:00:21,300 --> 00:00:27,930
security talks today which is I don't

9
00:00:23,279 --> 00:00:29,609
know expect that I guess so introducing

10
00:00:27,930 --> 00:00:31,830
myself my name is Ron tal I work at

11
00:00:29,609 --> 00:00:33,630
sneaked as a developer advocate we build

12
00:00:31,830 --> 00:00:36,390
developer friendly security tooling for

13
00:00:33,630 --> 00:00:39,000
open source some of my other projects

14
00:00:36,390 --> 00:00:41,280
that I'm involved with are nodejs I'm

15
00:00:39,000 --> 00:00:44,370
part of the security working group for

16
00:00:41,280 --> 00:00:46,170
the node foundation I also Komeito

17
00:00:44,370 --> 00:00:48,718
maintain on the core team for our wasp

18
00:00:46,170 --> 00:00:51,480
node goat I have a secret passion for

19
00:00:48,719 --> 00:00:53,760
building C allies so something like that

20
00:00:51,480 --> 00:00:54,800
and a couple of years ago I wrote I

21
00:00:53,760 --> 00:00:57,390
think one of the first books about

22
00:00:54,800 --> 00:00:59,459
nodejs so essential no di securities

23
00:00:57,390 --> 00:01:00,780
I've been doing this for a while and if

24
00:00:59,460 --> 00:01:03,229
you want to talk about any of these

25
00:01:00,780 --> 00:01:07,470
topics to welcome to ping me at Twitter

26
00:01:03,229 --> 00:01:09,090
Charlie run underscore tell so in this

27
00:01:07,470 --> 00:01:11,490
talk today I want to take you to a

28
00:01:09,090 --> 00:01:13,320
journey of understanding some horror

29
00:01:11,490 --> 00:01:15,390
stories some bad things that happened in

30
00:01:13,320 --> 00:01:17,669
node security ecosystem as well as

31
00:01:15,390 --> 00:01:19,049
JavaScript go through maybe if we have

32
00:01:17,670 --> 00:01:20,549
time a small demo for one of the

33
00:01:19,049 --> 00:01:22,799
vulnerabilities that is typical for node

34
00:01:20,549 --> 00:01:24,689
projects and then kind of end with

35
00:01:22,799 --> 00:01:27,060
positive note about about the silver

36
00:01:24,689 --> 00:01:28,559
linings in node security so starting off

37
00:01:27,060 --> 00:01:31,320
I think we've talked about it a couple

38
00:01:28,560 --> 00:01:32,759
of times here in this conference NPM was

39
00:01:31,320 --> 00:01:36,539
the biggest like a system you know has

40
00:01:32,759 --> 00:01:37,740
has actually been almost surpassing 1

41
00:01:36,540 --> 00:01:39,780
million packages probably this will

42
00:01:37,740 --> 00:01:40,740
happen this year probably tomorrow or

43
00:01:39,780 --> 00:01:43,170
something like that when more people

44
00:01:40,740 --> 00:01:45,179
publish more interesting and

45
00:01:43,170 --> 00:01:47,990
entertaining packages to the registry

46
00:01:45,180 --> 00:01:51,270
and what I want to talk about is that

47
00:01:47,990 --> 00:01:54,449
have been the biggest repository as NPM

48
00:01:51,270 --> 00:01:55,740
is invites big risks as well so for

49
00:01:54,450 --> 00:01:58,170
example it is a very lucrative

50
00:01:55,740 --> 00:02:01,020
playground for attackers because

51
00:01:58,170 --> 00:02:03,840
infecting mulisch being having being

52
00:02:01,020 --> 00:02:07,020
able to infect or compromise one package

53
00:02:03,840 --> 00:02:10,470
translates into many many open-source

54
00:02:07,020 --> 00:02:12,599
users of this package right and the

55
00:02:10,470 --> 00:02:13,620
other thing is that NPM by itself is a

56
00:02:12,599 --> 00:02:15,659
very open and free to

57
00:02:13,620 --> 00:02:18,530
public repository so there's nothing

58
00:02:15,659 --> 00:02:20,730
like an automated security review or

59
00:02:18,530 --> 00:02:22,799
identification of who you are when you

60
00:02:20,730 --> 00:02:24,510
submit something unlike things like iOS

61
00:02:22,799 --> 00:02:25,980
and stuff like that so you're welcome to

62
00:02:24,510 --> 00:02:28,260
submit and build whatever you want and

63
00:02:25,980 --> 00:02:30,450
just send it off to the registry and at

64
00:02:28,260 --> 00:02:32,578
this scale that NPM is right being a

65
00:02:30,450 --> 00:02:34,379
very big big basically the biggest

66
00:02:32,579 --> 00:02:36,569
repository of open source packages is

67
00:02:34,379 --> 00:02:39,030
having scale issues how do you automate

68
00:02:36,569 --> 00:02:41,129
finding malicious packages exploits

69
00:02:39,030 --> 00:02:43,530
really bad code in terms of security

70
00:02:41,129 --> 00:02:46,018
audit so all of those are kind of the

71
00:02:43,530 --> 00:02:49,410
risks that we're seeing coming up and up

72
00:02:46,019 --> 00:02:50,760
for a long time one of those is that I'm

73
00:02:49,410 --> 00:02:52,530
going to talk about today is malicious

74
00:02:50,760 --> 00:02:53,819
packages and want to look at it with you

75
00:02:52,530 --> 00:02:56,760
together and see what's going on there

76
00:02:53,819 --> 00:02:59,940
so when we talk about malicious packages

77
00:02:56,760 --> 00:03:02,099
we can kind of translate them into three

78
00:02:59,940 --> 00:03:04,079
ways that they manifest and one of them

79
00:03:02,099 --> 00:03:06,858
is type of squating attacks the other

80
00:03:04,079 --> 00:03:10,170
one is compromised accounts being

81
00:03:06,859 --> 00:03:12,030
happening on NPM and so someone is able

82
00:03:10,170 --> 00:03:14,129
to publish a malicious model on behalf

83
00:03:12,030 --> 00:03:16,650
of someone else and unwantedly of course

84
00:03:14,129 --> 00:03:18,840
and a social engineering way and all of

85
00:03:16,650 --> 00:03:20,639
those we've seen happening truly

86
00:03:18,840 --> 00:03:21,090
ecosystem in the car in the past couple

87
00:03:20,639 --> 00:03:23,940
of years

88
00:03:21,090 --> 00:03:25,769
what hadn't happened yet and oh god

89
00:03:23,940 --> 00:03:27,900
please don't let it happen is the NPM

90
00:03:25,769 --> 00:03:30,840
repository itself being compromised so I

91
00:03:27,900 --> 00:03:34,410
hope that does not ever happen but can

92
00:03:30,840 --> 00:03:35,730
be you know wishful so going back onto a

93
00:03:34,410 --> 00:03:37,200
timeline of understanding how a

94
00:03:35,730 --> 00:03:39,298
malicious packages evolve they want to

95
00:03:37,200 --> 00:03:41,849
start with something that is kind of

96
00:03:39,299 --> 00:03:42,180
familiar but just would go to this very

97
00:03:41,849 --> 00:03:44,129
quickly

98
00:03:42,180 --> 00:03:47,819
so remember fall is a package that has

99
00:03:44,129 --> 00:03:49,918
been put into the registry the way that

100
00:03:47,819 --> 00:03:51,750
it acts as a package you can see the

101
00:03:49,919 --> 00:03:53,849
package manifest and those of you who

102
00:03:51,750 --> 00:03:56,190
aren't familiar with the package itself

103
00:03:53,849 --> 00:03:57,929
but are familiar with NPM packages you

104
00:03:56,190 --> 00:04:00,269
would see that there is a install script

105
00:03:57,930 --> 00:04:01,620
that once you install the package you

106
00:04:00,269 --> 00:04:04,049
would get your hard drive kind of

107
00:04:01,620 --> 00:04:07,699
deleted it's a great package if you want

108
00:04:04,049 --> 00:04:10,859
to delete you know browser history so

109
00:04:07,699 --> 00:04:12,959
this is kind of what this is this is

110
00:04:10,859 --> 00:04:14,819
built into the NPM CLI lifecycle right

111
00:04:12,959 --> 00:04:15,989
this is how things work so when you

112
00:04:14,819 --> 00:04:19,260
install something you give those

113
00:04:15,989 --> 00:04:21,449
permissions cross and is a popular

114
00:04:19,260 --> 00:04:22,800
package as well that was introduced into

115
00:04:21,449 --> 00:04:24,659
the into the package registry

116
00:04:22,800 --> 00:04:26,580
basically what it does is it allows

117
00:04:24,659 --> 00:04:28,800
someone to manage and viral

118
00:04:26,580 --> 00:04:30,960
trebles so if you heard me or someone

119
00:04:28,800 --> 00:04:32,490
else or the talk talked about it and you

120
00:04:30,960 --> 00:04:33,568
wanted to go install it and you would

121
00:04:32,490 --> 00:04:35,550
have typed it like that you would get

122
00:04:33,569 --> 00:04:39,330
something else not the actual percent

123
00:04:35,550 --> 00:04:42,240
package so what does it actually do so

124
00:04:39,330 --> 00:04:44,099
cross and is a package malicious package

125
00:04:42,240 --> 00:04:47,219
that is actually we can see here

126
00:04:44,099 --> 00:04:49,650
actually bundling the real cross and

127
00:04:47,219 --> 00:04:52,169
package right it's giving you the exact

128
00:04:49,650 --> 00:04:54,030
same functionality but then as we have

129
00:04:52,169 --> 00:04:56,430
already kind of been noticing and

130
00:04:54,030 --> 00:04:58,229
running here it also does something when

131
00:04:56,430 --> 00:05:01,710
it gets installed it runs this package

132
00:04:58,229 --> 00:05:03,539
setup script which when we look at we're

133
00:05:01,710 --> 00:05:05,370
seeing that some things are kind of you

134
00:05:03,539 --> 00:05:08,159
know odd and weird and not something

135
00:05:05,370 --> 00:05:10,050
that a package should do there's this

136
00:05:08,159 --> 00:05:12,659
host name remote host name that's called

137
00:05:10,050 --> 00:05:14,490
NPM that hack stack that net that is

138
00:05:12,659 --> 00:05:16,379
what this script does is basically read

139
00:05:14,490 --> 00:05:17,789
your process dot n which is your

140
00:05:16,379 --> 00:05:19,800
environment variables available to the

141
00:05:17,789 --> 00:05:21,240
process basically for encoding all of

142
00:05:19,800 --> 00:05:22,699
that so that you know nothing maybe get

143
00:05:21,240 --> 00:05:25,590
through a Nawaf or something like that

144
00:05:22,699 --> 00:05:27,629
putting all of that into a post request

145
00:05:25,590 --> 00:05:29,938
and sending it off so basically when you

146
00:05:27,629 --> 00:05:31,710
install it it's gonna go and eat all of

147
00:05:29,939 --> 00:05:33,180
your environment variables giving you

148
00:05:31,710 --> 00:05:34,979
the exact same functionality no one

149
00:05:33,180 --> 00:05:37,889
suspects it but at the same time sending

150
00:05:34,979 --> 00:05:40,199
all of that to a malicious actor and I

151
00:05:37,889 --> 00:05:42,080
bet no one is saving here passwords your

152
00:05:40,199 --> 00:05:45,539
secret in environment variables right

153
00:05:42,080 --> 00:05:47,909
good what we had a trait so that's a

154
00:05:45,539 --> 00:05:50,250
typo squatting attack right and what if

155
00:05:47,909 --> 00:05:52,889
I told you that one of those NPM modules

156
00:05:50,250 --> 00:05:54,360
for a very popular module are also type

157
00:05:52,889 --> 00:05:58,370
of supported so take a second and try to

158
00:05:54,360 --> 00:06:00,539
think which one of them is is that right

159
00:05:58,370 --> 00:06:02,610
confusing both of them were typo scoring

160
00:06:00,539 --> 00:06:06,479
attacks and this is not something that

161
00:06:02,610 --> 00:06:08,990
happens you know two or three years ago

162
00:06:06,479 --> 00:06:11,128
if I take a look at for example

163
00:06:08,990 --> 00:06:12,719
vulnerabilities and you know of packages

164
00:06:11,129 --> 00:06:15,000
that we were tracking we can see that

165
00:06:12,719 --> 00:06:17,759
malicious packages have been sent in

166
00:06:15,000 --> 00:06:19,469
just two weeks ago this is 14 of my 2019

167
00:06:17,759 --> 00:06:21,360
malicious package type was quoting

168
00:06:19,469 --> 00:06:23,339
attack that was sent in just two weeks

169
00:06:21,360 --> 00:06:25,560
ago trying to type was quite the popular

170
00:06:23,339 --> 00:06:27,810
package request which is I assume

171
00:06:25,560 --> 00:06:29,669
someone had done that because request is

172
00:06:27,810 --> 00:06:32,339
kind of going on maintained etc so

173
00:06:29,669 --> 00:06:35,039
someone is trying to write on the same

174
00:06:32,339 --> 00:06:36,750
idea so what we learned so far we've

175
00:06:35,039 --> 00:06:38,490
seen post install scripts we're seeing

176
00:06:36,750 --> 00:06:39,679
scripts that actually when you install

177
00:06:38,490 --> 00:06:41,629
them call home

178
00:06:39,679 --> 00:06:43,159
to send some payload but the question is

179
00:06:41,629 --> 00:06:45,080
how are we finding out about those

180
00:06:43,159 --> 00:06:47,899
vulnerabilities right how are we finding

181
00:06:45,080 --> 00:06:49,698
out about this malicious package so no

182
00:06:47,899 --> 00:06:51,409
one caught it right none at 10:00 p.m.

183
00:06:49,699 --> 00:06:53,029
no other player in the industry actually

184
00:06:51,409 --> 00:06:54,289
developer cut it and posted it on

185
00:06:53,029 --> 00:06:55,339
Twitter because he saw that something

186
00:06:54,289 --> 00:06:57,289
weird is happening

187
00:06:55,339 --> 00:06:59,449
when he installed a package and alerted

188
00:06:57,289 --> 00:07:01,938
Kent who is the original order of the

189
00:06:59,449 --> 00:07:05,330
the okay package right across - and

190
00:07:01,939 --> 00:07:07,999
which is just fine tears so this brings

191
00:07:05,330 --> 00:07:09,979
me to just when 18 just last you right

192
00:07:07,999 --> 00:07:10,489
meet last year get cookies let's talk

193
00:07:09,979 --> 00:07:13,128
about it

194
00:07:10,489 --> 00:07:15,068
it's an NPM package that parses HTTP

195
00:07:13,129 --> 00:07:20,569
header so you can work with cookie data

196
00:07:15,069 --> 00:07:22,119
or does it so in fact get cookies is

197
00:07:20,569 --> 00:07:24,589
nothing less than a command and control

198
00:07:22,119 --> 00:07:26,829
backdoor that allows someone to run

199
00:07:24,589 --> 00:07:29,929
arbitrary commands when you install it

200
00:07:26,829 --> 00:07:32,719
it is so elaborate in the way that it

201
00:07:29,929 --> 00:07:34,609
was created that someone had actually

202
00:07:32,719 --> 00:07:37,569
the malicious actor had actually put it

203
00:07:34,610 --> 00:07:40,039
behind several levels or layers of

204
00:07:37,569 --> 00:07:42,289
hiding it between something else

205
00:07:40,039 --> 00:07:44,599
so someone understands how the how

206
00:07:42,289 --> 00:07:46,009
complex the NPM ecosystem is so for

207
00:07:44,599 --> 00:07:47,959
example if you were looking just that

208
00:07:46,009 --> 00:07:50,389
get cookies to get it maybe you'd find

209
00:07:47,959 --> 00:07:52,279
it but if you if it looks legit and some

210
00:07:50,389 --> 00:07:53,809
other packages are actually bundling it

211
00:07:52,279 --> 00:07:55,369
itself maybe you don't look you know

212
00:07:53,809 --> 00:07:58,490
three levels down the tree to find it

213
00:07:55,369 --> 00:07:59,899
and an NPM package the malicious package

214
00:07:58,490 --> 00:08:01,999
like three of them on there and the

215
00:07:59,899 --> 00:08:03,769
registry part of being a million other

216
00:08:01,999 --> 00:08:05,119
packages as well you're not gonna find

217
00:08:03,769 --> 00:08:06,619
it so we need to inject it into

218
00:08:05,119 --> 00:08:08,300
something that is popular so maybe we

219
00:08:06,619 --> 00:08:09,349
can put it into mail parser and that's

220
00:08:08,300 --> 00:08:11,209
exactly what they did

221
00:08:09,349 --> 00:08:14,300
they injected the top one into mail

222
00:08:11,209 --> 00:08:17,749
parser in some way so let's look at this

223
00:08:14,300 --> 00:08:19,579
44 lines of code backdoor it starts with

224
00:08:17,749 --> 00:08:21,019
something that should look familiar to

225
00:08:19,579 --> 00:08:23,929
anyone who has been doing a node or

226
00:08:21,019 --> 00:08:26,749
Express development it has a function

227
00:08:23,929 --> 00:08:28,188
signature of an Express middleware route

228
00:08:26,749 --> 00:08:29,329
middle word that takes the request and

229
00:08:28,189 --> 00:08:31,969
the response and when this gets

230
00:08:29,329 --> 00:08:34,399
introduced into a webs web service like

231
00:08:31,969 --> 00:08:36,708
Express it allows someone to do

232
00:08:34,399 --> 00:08:39,078
something with this data what exactly so

233
00:08:36,708 --> 00:08:41,239
first of all this backdoor allocates 64

234
00:08:39,078 --> 00:08:43,878
bytes of data so it can do something

235
00:08:41,240 --> 00:08:46,430
with that I'll put this on this dot log

236
00:08:43,879 --> 00:08:48,079
buffer then you know stringify is all

237
00:08:46,430 --> 00:08:50,449
the data from request headers and tries

238
00:08:48,079 --> 00:08:52,550
to find a specific pattern using these

239
00:08:50,449 --> 00:08:52,910
projects to pass those commands that

240
00:08:52,550 --> 00:08:56,150
some

241
00:08:52,910 --> 00:08:58,280
sending remotely for whatever reason I

242
00:08:56,150 --> 00:09:00,620
don't know they had been able to format

243
00:08:58,280 --> 00:09:02,660
it so this is a little Indian in Indian

244
00:09:00,620 --> 00:09:05,150
I don't know if this is because they've

245
00:09:02,660 --> 00:09:08,030
been trying to obfuscate it or make it a

246
00:09:05,150 --> 00:09:10,189
little complicated or not but as we can

247
00:09:08,030 --> 00:09:12,920
see in the back door itself it has is

248
00:09:10,190 --> 00:09:14,900
exposing three of those commands one of

249
00:09:12,920 --> 00:09:17,540
them is actually always resetting the

250
00:09:14,900 --> 00:09:19,160
data so it's trying to empty the buffer

251
00:09:17,540 --> 00:09:21,770
reset it from time to time if it's

252
00:09:19,160 --> 00:09:24,410
needed the last command is actually

253
00:09:21,770 --> 00:09:26,360
getting the JavaScript payload on to the

254
00:09:24,410 --> 00:09:29,750
log buffer so whatever is get gets sent

255
00:09:26,360 --> 00:09:32,120
is get loaded into the log and when it's

256
00:09:29,750 --> 00:09:34,400
time to all the data all the JavaScript

257
00:09:32,120 --> 00:09:36,320
payload basically had been transferred

258
00:09:34,400 --> 00:09:38,300
over the wire it's gonna go and execute

259
00:09:36,320 --> 00:09:41,480
it so it's gonna turn things into to

260
00:09:38,300 --> 00:09:43,969
string require this hex encoded VM

261
00:09:41,480 --> 00:09:46,280
module which allows you to use sorry to

262
00:09:43,970 --> 00:09:47,870
use something that's called a function

263
00:09:46,280 --> 00:09:49,939
that is available that's called run in

264
00:09:47,870 --> 00:09:52,550
this context and gives all them all of

265
00:09:49,940 --> 00:09:54,650
the data so to simplify this the way

266
00:09:52,550 --> 00:09:57,170
that this would work is someone would

267
00:09:54,650 --> 00:09:59,319
just get send whatever request to this

268
00:09:57,170 --> 00:10:03,290
web server that he is available to do

269
00:09:59,320 --> 00:10:06,830
use this pattern of G command H than

270
00:10:03,290 --> 00:10:08,120
data and and I and this exposes the

271
00:10:06,830 --> 00:10:10,340
whole workflow so for example we're

272
00:10:08,120 --> 00:10:13,430
setting that resetting the buffer with

273
00:10:10,340 --> 00:10:14,900
the GF e FF right and if they wanted to

274
00:10:13,430 --> 00:10:16,430
load some JavaScript code they would do

275
00:10:14,900 --> 00:10:18,260
something similar and said this payload

276
00:10:16,430 --> 00:10:20,300
over the wire when everything is done

277
00:10:18,260 --> 00:10:24,140
and everything is over there we're gonna

278
00:10:20,300 --> 00:10:25,520
go and execute it so this this really

279
00:10:24,140 --> 00:10:27,260
this is of course a real example right

280
00:10:25,520 --> 00:10:30,560
this is really what happened we'd get

281
00:10:27,260 --> 00:10:32,800
cookies introduced into into into mail

282
00:10:30,560 --> 00:10:35,569
parser and of course this was a thing

283
00:10:32,800 --> 00:10:37,760
it's it's let's take some observation

284
00:10:35,570 --> 00:10:39,980
here because it didn't really affect the

285
00:10:37,760 --> 00:10:42,770
entire the entire ecosystem just because

286
00:10:39,980 --> 00:10:45,650
it was seen very fast but also at the

287
00:10:42,770 --> 00:10:48,020
same time it was seen that specifically

288
00:10:45,650 --> 00:10:50,510
male parser didn't do any use of of

289
00:10:48,020 --> 00:10:53,090
these get cookies of the of the top

290
00:10:50,510 --> 00:10:55,010
level HTTP fetch cookies that was

291
00:10:53,090 --> 00:10:56,240
introduced but it happened and all of

292
00:10:55,010 --> 00:10:57,950
this code is ruled and made it to a

293
00:10:56,240 --> 00:10:59,840
malicious package that was sent in a

294
00:10:57,950 --> 00:11:01,670
malicious version of a specific package

295
00:10:59,840 --> 00:11:03,650
that gets downloaded almost half a

296
00:11:01,670 --> 00:11:05,360
million times a month so one observation

297
00:11:03,650 --> 00:11:07,550
that we can make here on

298
00:11:05,360 --> 00:11:10,519
happened is that if you were trying to

299
00:11:07,550 --> 00:11:12,140
code review one package by you know one

300
00:11:10,519 --> 00:11:13,399
by one and go to all of their packages

301
00:11:12,140 --> 00:11:16,550
you know this will be a very

302
00:11:13,399 --> 00:11:17,959
time-consuming and very difficult thing

303
00:11:16,550 --> 00:11:19,490
for you to do so you need to get it

304
00:11:17,959 --> 00:11:21,739
right all the time while attacker is

305
00:11:19,490 --> 00:11:24,649
trying to get lucky once and maybe

306
00:11:21,740 --> 00:11:25,910
making it in let's talk about ds3 in

307
00:11:24,649 --> 00:11:27,649
scope and see what happened there that

308
00:11:25,910 --> 00:11:30,140
just happened couple of months after

309
00:11:27,649 --> 00:11:32,570
after get cookies and the essence is

310
00:11:30,140 --> 00:11:34,279
link scope is a child package obviously

311
00:11:32,570 --> 00:11:35,720
in the project itself so it's a very

312
00:11:34,279 --> 00:11:38,209
popular static code analysis for

313
00:11:35,720 --> 00:11:39,709
JavaScript projects the project itself

314
00:11:38,209 --> 00:11:42,439
of course is not malicious just this

315
00:11:39,709 --> 00:11:44,329
specific version that was published you

316
00:11:42,440 --> 00:11:47,240
can see it is getting downloaded quite a

317
00:11:44,329 --> 00:11:48,439
bit and what was going on there is very

318
00:11:47,240 --> 00:11:49,850
similar to what we have seen actually

319
00:11:48,440 --> 00:11:51,410
before so you already recognize this

320
00:11:49,850 --> 00:11:52,820
partner and something when you install

321
00:11:51,410 --> 00:11:55,100
that something was calling a post

322
00:11:52,820 --> 00:11:58,160
intel's install script and running this

323
00:11:55,100 --> 00:12:00,050
lib bill j/s which what it is was

324
00:11:58,160 --> 00:12:01,790
basically similar to what cross done

325
00:12:00,050 --> 00:12:04,160
with it right then if cross and was

326
00:12:01,790 --> 00:12:06,529
trying to to take your environment

327
00:12:04,160 --> 00:12:08,660
variables then this was actually calling

328
00:12:06,529 --> 00:12:10,480
paste pin care calling a remote payload

329
00:12:08,660 --> 00:12:13,040
to get whatever javascript was there and

330
00:12:10,480 --> 00:12:15,170
when it got it it evaluated it so it

331
00:12:13,040 --> 00:12:17,089
received everything back to quality or

332
00:12:15,170 --> 00:12:18,939
and PMRC tokens which basically what

333
00:12:17,089 --> 00:12:22,040
happened and send them to a remote

334
00:12:18,940 --> 00:12:23,810
attacker the thing is what you put in

335
00:12:22,040 --> 00:12:25,699
npm RC is very important these are your

336
00:12:23,810 --> 00:12:27,649
tokens and if you're a maintainer you're

337
00:12:25,699 --> 00:12:29,750
publishing packages then this gets

338
00:12:27,649 --> 00:12:31,699
important because now someone is able to

339
00:12:29,750 --> 00:12:33,829
publish packages on your name so it's

340
00:12:31,699 --> 00:12:36,019
kind of like a JavaScript form that as

341
00:12:33,829 --> 00:12:38,709
more people install it this spreads out

342
00:12:36,019 --> 00:12:41,149
and more maintainer czar compromised

343
00:12:38,709 --> 00:12:42,768
funny thing is if you are recognizing

344
00:12:41,149 --> 00:12:45,529
the code and the mistake that was

345
00:12:42,769 --> 00:12:47,899
happening here is it evaluated the

346
00:12:45,529 --> 00:12:50,029
JavaScript code on an event getting the

347
00:12:47,899 --> 00:12:52,010
data so for example this could be an

348
00:12:50,029 --> 00:12:56,300
issue if the data itself didn't fit

349
00:12:52,010 --> 00:12:58,459
didn't fit into into one specific chunk

350
00:12:56,300 --> 00:13:00,229
of the data stream that got him and this

351
00:12:58,459 --> 00:13:02,599
is how he found out about it someone was

352
00:13:00,230 --> 00:13:04,850
basically opening an issue saying oh I

353
00:13:02,600 --> 00:13:06,890
install the eslint scope or whatever and

354
00:13:04,850 --> 00:13:09,140
I got this error what what's happening

355
00:13:06,890 --> 00:13:12,290
this looks like a virus or something so

356
00:13:09,140 --> 00:13:14,779
again another example of this problem in

357
00:13:12,290 --> 00:13:17,029
the ecosystem and we have no automatic

358
00:13:14,779 --> 00:13:18,560
controls on the NPM ecosystem and

359
00:13:17,029 --> 00:13:20,120
registry to be able to code

360
00:13:18,560 --> 00:13:22,790
automatically so someone had to bring

361
00:13:20,120 --> 00:13:25,430
this up who depends on es lead scope

362
00:13:22,790 --> 00:13:27,170
well just a few packages I don't know if

363
00:13:25,430 --> 00:13:29,359
you've heard of them but basically kind

364
00:13:27,170 --> 00:13:33,229
of powering the entire front end Decker

365
00:13:29,360 --> 00:13:35,360
system so what happened is npm of course

366
00:13:33,230 --> 00:13:37,220
had to invalidate all of this all of the

367
00:13:35,360 --> 00:13:39,770
tokens from the date of this package

368
00:13:37,220 --> 00:13:43,700
making it in and you know estimating

369
00:13:39,770 --> 00:13:45,170
almost 5,000 compromised accounts so our

370
00:13:43,700 --> 00:13:47,390
observation that we can make you right

371
00:13:45,170 --> 00:13:50,089
yes things go published an NPM package

372
00:13:47,390 --> 00:13:51,650
but the malicious actors that were able

373
00:13:50,089 --> 00:13:53,630
to get access to yes in scope didn't

374
00:13:51,650 --> 00:13:55,189
have access to the github repository so

375
00:13:53,630 --> 00:13:58,430
basically what happened there is that

376
00:13:55,190 --> 00:14:00,680
the source code on github was different

377
00:13:58,430 --> 00:14:03,800
from that on on on the NPM publish

378
00:14:00,680 --> 00:14:04,760
module how does something like this

379
00:14:03,800 --> 00:14:06,680
happen right we're talking about

380
00:14:04,760 --> 00:14:08,120
compromised the malicious packages that

381
00:14:06,680 --> 00:14:10,550
are not typosquatting it back it's not

382
00:14:08,120 --> 00:14:13,040
someone deliberately making a package

383
00:14:10,550 --> 00:14:16,670
malicious but taking someone else's

384
00:14:13,040 --> 00:14:18,980
package and making it happen so what if

385
00:14:16,670 --> 00:14:21,500
I told you that contributors maintainers

386
00:14:18,980 --> 00:14:22,790
on NPM were actually compromised what if

387
00:14:21,500 --> 00:14:25,580
I told you that a security researcher

388
00:14:22,790 --> 00:14:27,680
had actually compromised at one point in

389
00:14:25,580 --> 00:14:31,820
time fourteen percent of all the

390
00:14:27,680 --> 00:14:34,250
packages on NPM would on NPM right it is

391
00:14:31,820 --> 00:14:36,170
20 percent it's accounting for 20

392
00:14:34,250 --> 00:14:38,060
percent of all of the NPM monthly

393
00:14:36,170 --> 00:14:41,990
downloads maybe you know some of these

394
00:14:38,060 --> 00:14:45,050
packages right so all of them at one

395
00:14:41,990 --> 00:14:46,480
point were indeed someone was able to

396
00:14:45,050 --> 00:14:48,650
get publish access to all of those

397
00:14:46,480 --> 00:14:50,839
luckily for us he is someone who is

398
00:14:48,650 --> 00:14:52,850
working with us and a good citizen so

399
00:14:50,839 --> 00:14:53,720
nothing bad happened but you understand

400
00:14:52,850 --> 00:14:57,020
that this could have happened

401
00:14:53,720 --> 00:14:58,970
how right how does something like that

402
00:14:57,020 --> 00:15:01,310
happen how are you able to compromise

403
00:14:58,970 --> 00:15:03,170
something like Express or react or debug

404
00:15:01,310 --> 00:15:06,790
these are very popular packages that

405
00:15:03,170 --> 00:15:09,800
modest by millions of millions every day

406
00:15:06,790 --> 00:15:12,589
well it turns out from his research

407
00:15:09,800 --> 00:15:17,540
about 600 users used the amazing

408
00:15:12,589 --> 00:15:19,940
password 1 2 3 4 5 6 the one of about

409
00:15:17,540 --> 00:15:21,860
one one thousand and four hundred had

410
00:15:19,940 --> 00:15:24,440
used the password set to their username

411
00:15:21,860 --> 00:15:28,520
which is a bit better from 1 to 6 I

412
00:15:24,440 --> 00:15:29,930
guess and the 11% of them not

413
00:15:28,520 --> 00:15:31,760
understanding and realizing the

414
00:15:29,930 --> 00:15:32,370
importance of password security had

415
00:15:31,760 --> 00:15:34,890
actually

416
00:15:32,370 --> 00:15:37,320
we use the password that was was being

417
00:15:34,890 --> 00:15:38,460
I've been able to get to get that from

418
00:15:37,320 --> 00:15:41,370
from a data bridge

419
00:15:38,460 --> 00:15:43,170
so this is something you know about the

420
00:15:41,370 --> 00:15:45,240
state of security I think in general in

421
00:15:43,170 --> 00:15:46,709
open source right maintainer is who we

422
00:15:45,240 --> 00:15:49,110
look up to and you know what probably

423
00:15:46,710 --> 00:15:51,450
amazing people but it lacks some kind of

424
00:15:49,110 --> 00:15:53,760
you know best practices on basic things

425
00:15:51,450 --> 00:15:55,620
like password security and if something

426
00:15:53,760 --> 00:15:58,529
like one of those popular packages gets

427
00:15:55,620 --> 00:16:00,480
get compromised and gets into malicious

428
00:15:58,529 --> 00:16:01,920
or you know backdoors inside it

429
00:16:00,480 --> 00:16:03,300
we're at a problem because we're all

430
00:16:01,920 --> 00:16:06,959
using that everyone in this room is

431
00:16:03,300 --> 00:16:08,250
probably using one of those packages I'm

432
00:16:06,960 --> 00:16:10,260
not going to talk about the event stream

433
00:16:08,250 --> 00:16:12,720
too much so just kind of to sum it up

434
00:16:10,260 --> 00:16:14,490
it's been a popular story I think in the

435
00:16:12,720 --> 00:16:15,779
JavaScript ecosystem probably one of the

436
00:16:14,490 --> 00:16:19,170
most sophisticated attack that we've

437
00:16:15,779 --> 00:16:21,420
seen to date there's a timeline that is

438
00:16:19,170 --> 00:16:22,709
building a post-mortem to you know

439
00:16:21,420 --> 00:16:24,449
explain exactly what happened there but

440
00:16:22,710 --> 00:16:25,860
that is a different case from what we've

441
00:16:24,450 --> 00:16:27,570
seen so far so now type of squatting and

442
00:16:25,860 --> 00:16:32,010
not compromised accounts but actual

443
00:16:27,570 --> 00:16:34,140
social engineering attempt to send in a

444
00:16:32,010 --> 00:16:37,200
malicious package that was able to

445
00:16:34,140 --> 00:16:38,959
actually target specific developers of a

446
00:16:37,200 --> 00:16:43,440
Bitcoin platform in order to make

447
00:16:38,959 --> 00:16:45,180
transactions to to a third party and you

448
00:16:43,440 --> 00:16:46,740
know II only found out about like two

449
00:16:45,180 --> 00:16:48,359
months after it happened so definitely

450
00:16:46,740 --> 00:16:50,220
one of the most important things that

451
00:16:48,360 --> 00:16:51,900
we've seen so far if you're interested

452
00:16:50,220 --> 00:16:54,540
to read more you can just go to this

453
00:16:51,900 --> 00:16:56,760
link it brings a sec a trailer

454
00:16:54,540 --> 00:16:59,029
observation because specifically what

455
00:16:56,760 --> 00:17:02,760
happened with the event stream was that

456
00:16:59,029 --> 00:17:05,189
the code for the malicious package that

457
00:17:02,760 --> 00:17:07,379
event stream included by itself was

458
00:17:05,189 --> 00:17:09,630
minified was transpiled you know people

459
00:17:07,380 --> 00:17:11,400
used x great today so even if you wanted

460
00:17:09,630 --> 00:17:13,890
to code review and check source to

461
00:17:11,400 --> 00:17:15,870
publish package it's not specifically an

462
00:17:13,890 --> 00:17:18,209
easy task because the source can and may

463
00:17:15,869 --> 00:17:19,859
be different from what you have on the

464
00:17:18,209 --> 00:17:24,600
publish package so it's not a one-to-one

465
00:17:19,859 --> 00:17:26,010
match all the time this brings us to

466
00:17:24,599 --> 00:17:28,159
talk about dependency management right

467
00:17:26,010 --> 00:17:30,720
how do we track all of this all of those

468
00:17:28,160 --> 00:17:33,330
packages that we have npm a very

469
00:17:30,720 --> 00:17:37,380
convoluted place packages are in all

470
00:17:33,330 --> 00:17:40,470
nested trees or are a thing if so to say

471
00:17:37,380 --> 00:17:42,929
a research had shown that the the

472
00:17:40,470 --> 00:17:46,080
average def of any package is more than

473
00:17:42,929 --> 00:17:47,490
four levels dip that's pretty big to two

474
00:17:46,080 --> 00:17:49,559
to figure out exactly what's going on in

475
00:17:47,490 --> 00:17:52,649
a package and many times vulnerabilities

476
00:17:49,559 --> 00:17:53,760
coming from from just indirect

477
00:17:52,649 --> 00:17:56,010
dependencies that you have in your

478
00:17:53,760 --> 00:17:57,809
project or even if you are gonna go and

479
00:17:56,010 --> 00:17:59,970
code review ever and go into you know

480
00:17:57,809 --> 00:18:01,559
change logs and and use that are for

481
00:17:59,970 --> 00:18:04,080
security issues for everything that

482
00:18:01,559 --> 00:18:05,700
react or Express or whatever brings in

483
00:18:04,080 --> 00:18:06,840
actually most of the vulnerabilities

484
00:18:05,700 --> 00:18:08,760
will come in from those indirect

485
00:18:06,840 --> 00:18:10,740
dependencies the exact number is about

486
00:18:08,760 --> 00:18:12,360
78% of the times when we find those

487
00:18:10,740 --> 00:18:13,890
vulnerabilities we find them in those

488
00:18:12,360 --> 00:18:16,889
indirect dependences not in those days

489
00:18:13,890 --> 00:18:19,440
not in the direct ones which we're going

490
00:18:16,890 --> 00:18:21,240
to talk about this revelation where when

491
00:18:19,440 --> 00:18:22,409
developers are building their apps you

492
00:18:21,240 --> 00:18:24,269
know they are thinking that you're

493
00:18:22,409 --> 00:18:27,750
writing a lot of code but in reality

494
00:18:24,269 --> 00:18:30,059
their code is just very single and small

495
00:18:27,750 --> 00:18:31,590
glimpse on the radar in terms of the

496
00:18:30,059 --> 00:18:32,700
entire application and this is something

497
00:18:31,590 --> 00:18:34,678
that we're trying to raise awareness of

498
00:18:32,700 --> 00:18:36,600
and know taking more responsibility in

499
00:18:34,679 --> 00:18:38,820
terms of developers building their

500
00:18:36,600 --> 00:18:43,889
applications using open source software

501
00:18:38,820 --> 00:18:45,990
so maybe let's try and do a 1-1 life

502
00:18:43,889 --> 00:18:47,939
than what you kind of see also typical

503
00:18:45,990 --> 00:18:57,750
vulnerabilities that we have affecting

504
00:18:47,940 --> 00:19:01,080
the ecosystem right so I have here let's

505
00:18:57,750 --> 00:19:03,929
see we do that I have here this example

506
00:19:01,080 --> 00:19:08,189
app it has an endpoint called about new

507
00:19:03,929 --> 00:19:09,570
as you can see when I render something I

508
00:19:08,190 --> 00:19:12,389
just I just call it it render something

509
00:19:09,570 --> 00:19:14,700
on the string on the screen I am able to

510
00:19:12,389 --> 00:19:16,830
give it things like device is desktop

511
00:19:14,700 --> 00:19:19,769
and then maybe it it renders it a bit

512
00:19:16,830 --> 00:19:23,519
smaller and if I did something like

513
00:19:19,769 --> 00:19:26,250
mobile it will kind of make it which

514
00:19:23,519 --> 00:19:27,090
just as work make it a bit bigger and so

515
00:19:26,250 --> 00:19:29,580
far so good

516
00:19:27,090 --> 00:19:32,189
if I were trying to find out what

517
00:19:29,580 --> 00:19:33,689
happened here maybe I would understand

518
00:19:32,190 --> 00:19:36,630
that this goes in something get

519
00:19:33,690 --> 00:19:39,179
evaluated maybe I'll try and escape it

520
00:19:36,630 --> 00:19:41,220
some way so maybe I'll add like a quote

521
00:19:39,179 --> 00:19:42,690
and figure out maybe I can escape

522
00:19:41,220 --> 00:19:44,850
something that's happening but I can't

523
00:19:42,690 --> 00:19:46,980
and let's see what what's really

524
00:19:44,850 --> 00:19:51,570
happening so to give you context into

525
00:19:46,980 --> 00:19:53,250
this basically this is the dust gs the

526
00:19:51,570 --> 00:19:56,559
dust jeaious

527
00:19:53,250 --> 00:19:58,840
templating engine for-for-for nodejs and

528
00:19:56,559 --> 00:20:00,760
it's a very popular one not as popular

529
00:19:58,840 --> 00:20:02,139
as maybe handlebars etc but it's been

530
00:20:00,760 --> 00:20:04,390
used by you know thousands of projects

531
00:20:02,140 --> 00:20:07,090
probably and as we can see this actually

532
00:20:04,390 --> 00:20:08,380
has this escape HTML so it's actually

533
00:20:07,090 --> 00:20:09,790
trying to do something good right it's

534
00:20:08,380 --> 00:20:11,920
checking if something that I'm sending

535
00:20:09,790 --> 00:20:14,710
is a string and if it does it's gonna go

536
00:20:11,920 --> 00:20:16,540
and and and change and escape all of

537
00:20:14,710 --> 00:20:19,270
those single quotes to something that is

538
00:20:16,540 --> 00:20:22,780
encoded into the correct context of HTML

539
00:20:19,270 --> 00:20:27,070
so that looks okay except it's actually

540
00:20:22,780 --> 00:20:29,440
looking for a string right over here go

541
00:20:27,070 --> 00:20:31,389
ahead and make that more readable for

542
00:20:29,440 --> 00:20:32,890
you so it's actually looking for a

543
00:20:31,390 --> 00:20:34,000
string but what if you were able to send

544
00:20:32,890 --> 00:20:35,799
it something that's not a string it

545
00:20:34,000 --> 00:20:39,250
would not go through this

546
00:20:35,799 --> 00:20:41,470
sanitization process so far what if I

547
00:20:39,250 --> 00:20:43,620
were able to go and send something like

548
00:20:41,470 --> 00:20:43,620
this

549
00:21:05,440 --> 00:21:09,499
right so at this point in time maybe I'm

550
00:21:07,789 --> 00:21:12,139
sending something else maybe I'm sending

551
00:21:09,499 --> 00:21:13,369
I'm doing what's referred to as an HTTP

552
00:21:12,139 --> 00:21:15,199
parameter pollution I'm basically

553
00:21:13,369 --> 00:21:17,119
sending something that looks like an

554
00:21:15,200 --> 00:21:18,889
array like an object so it's not anymore

555
00:21:17,119 --> 00:21:20,779
a string in the JavaScript context but

556
00:21:18,889 --> 00:21:22,129
when things get you know to string I'm

557
00:21:20,779 --> 00:21:23,899
gonna get the first element and I'm

558
00:21:22,129 --> 00:21:25,939
going to get desktop so when I do that

559
00:21:23,899 --> 00:21:27,738
then I try to maybe escape it I'm saying

560
00:21:25,940 --> 00:21:29,869
that something is actually happening

561
00:21:27,739 --> 00:21:32,869
right just to give you an example of

562
00:21:29,869 --> 00:21:34,218
what that looks like is something like

563
00:21:32,869 --> 00:21:36,019
this so I know that something bad is

564
00:21:34,219 --> 00:21:38,389
happening there and not every case is

565
00:21:36,019 --> 00:21:40,070
covered and now I can go in and figure

566
00:21:38,389 --> 00:21:46,668
out what is going on with the dust

567
00:21:40,070 --> 00:21:48,799
helpers so what does tell press shows me

568
00:21:46,669 --> 00:21:50,450
is that the way dust is built it's

569
00:21:48,799 --> 00:21:53,059
actually evaluating some code something

570
00:21:50,450 --> 00:21:55,999
to deafen into a condition so when I

571
00:21:53,059 --> 00:21:57,619
have code in my template like this which

572
00:21:55,999 --> 00:21:59,149
is by the way just fine right this is

573
00:21:57,619 --> 00:22:00,529
how template engines work they need to

574
00:21:59,149 --> 00:22:03,589
evaluate stuff and add some kind of

575
00:22:00,529 --> 00:22:05,419
logic into something that you build this

576
00:22:03,589 --> 00:22:07,789
data actually gets escaped and then I

577
00:22:05,419 --> 00:22:10,459
can do a lot of stuff like inject inject

578
00:22:07,789 --> 00:22:16,969
code into it so I can go ahead and do

579
00:22:10,459 --> 00:22:18,829
something like escape it console.log it

580
00:22:16,969 --> 00:22:21,320
and then I no need to escape it back

581
00:22:18,829 --> 00:22:27,129
again so at that point in time I'm

582
00:22:21,320 --> 00:22:30,139
actually able to send something in right

583
00:22:27,129 --> 00:22:32,809
there we go so as you seen I've been

584
00:22:30,139 --> 00:22:35,779
able to basically append here a console

585
00:22:32,809 --> 00:22:39,049
log into one and over here you see that

586
00:22:35,779 --> 00:22:40,909
the server actually evaluated one so

587
00:22:39,049 --> 00:22:42,320
evaluation happening in the way that

588
00:22:40,909 --> 00:22:44,899
template engines are supposed to work

589
00:22:42,320 --> 00:22:46,639
but it's not always safe and this is an

590
00:22:44,899 --> 00:22:52,158
example of vulnerabilities that we're

591
00:22:46,639 --> 00:22:54,589
seeing a lot in open source packages all

592
00:22:52,159 --> 00:22:56,599
right so let's go into the positive part

593
00:22:54,589 --> 00:22:59,989
of you know the good part of the future

594
00:22:56,599 --> 00:23:01,700
that's I think is is very interesting so

595
00:22:59,989 --> 00:23:03,289
we can talk about NPM as an ecosystem

596
00:23:01,700 --> 00:23:04,609
right and we talked about malicious

597
00:23:03,289 --> 00:23:06,940
modules and typosquatting attacks in

598
00:23:04,609 --> 00:23:09,189
specific so how does NPM

599
00:23:06,940 --> 00:23:11,080
handled that so there's react native for

600
00:23:09,190 --> 00:23:13,570
example if I would want to typo score it

601
00:23:11,080 --> 00:23:14,649
I could have maybe sent in a package a

602
00:23:13,570 --> 00:23:16,149
malicious one that's called react native

603
00:23:14,649 --> 00:23:19,539
without the dash or you know different

604
00:23:16,149 --> 00:23:21,580
cases of it right now there is some kind

605
00:23:19,539 --> 00:23:23,950
of measures on the NPM registry to

606
00:23:21,580 --> 00:23:25,119
disallow you to send these kind of

607
00:23:23,950 --> 00:23:26,799
packages because what it's going to do

608
00:23:25,119 --> 00:23:28,689
is gonna strip all the punctuation mark

609
00:23:26,799 --> 00:23:30,450
like that I'm gonna try and compare the

610
00:23:28,690 --> 00:23:32,830
packages and if they are close enough

611
00:23:30,450 --> 00:23:35,229
you know they value the same thing it

612
00:23:32,830 --> 00:23:36,820
will not allow you to send them in and

613
00:23:35,229 --> 00:23:38,049
you won't be able to publish them except

614
00:23:36,820 --> 00:23:39,700
that's not smart enough as we've seen

615
00:23:38,049 --> 00:23:42,220
there are other ways of typosquatting

616
00:23:39,700 --> 00:23:43,960
packages the recommended way to do that

617
00:23:42,220 --> 00:23:45,999
of course is to create a new scope and

618
00:23:43,960 --> 00:23:48,429
if you really wanted to use you know

619
00:23:45,999 --> 00:23:50,080
this exact namespace you could you could

620
00:23:48,429 --> 00:23:52,359
do it like that under your own scope and

621
00:23:50,080 --> 00:23:53,999
use this and use react native as it

622
00:23:52,359 --> 00:23:56,889
should be written

623
00:23:53,999 --> 00:23:59,200
funny thing about NPM is at one point in

624
00:23:56,889 --> 00:24:01,508
time it allowed the exact same package

625
00:23:59,200 --> 00:24:03,309
to be created even if it's if it's

626
00:24:01,509 --> 00:24:05,349
different in terms of upper upper case

627
00:24:03,309 --> 00:24:08,139
and lower case so these are actually two

628
00:24:05,349 --> 00:24:09,939
different packages on NPM the fact is

629
00:24:08,139 --> 00:24:11,049
that right now we cannot break any one

630
00:24:09,940 --> 00:24:13,629
of them because breaking it will

631
00:24:11,049 --> 00:24:16,289
probably break the ecosystem so this is

632
00:24:13,629 --> 00:24:19,178
something we have to live with for now I

633
00:24:16,289 --> 00:24:21,039
don't think that NPM has added is the

634
00:24:19,179 --> 00:24:23,859
ability to send the notifications when

635
00:24:21,039 --> 00:24:25,330
packages get published so this is kind

636
00:24:23,859 --> 00:24:27,070
of related to malicious packages you

637
00:24:25,330 --> 00:24:29,199
know being sent in terms of compromised

638
00:24:27,070 --> 00:24:31,658
accounts someone might be getting this

639
00:24:29,200 --> 00:24:34,210
notification of of his package being

640
00:24:31,659 --> 00:24:36,159
compromised and if he didn't of course

641
00:24:34,210 --> 00:24:38,889
publish it himself it would raise

642
00:24:36,159 --> 00:24:40,840
awareness so we have that as well to a

643
00:24:38,889 --> 00:24:42,908
PHA right EA we have to a failure in the

644
00:24:40,840 --> 00:24:44,799
registry so it's been available actually

645
00:24:42,909 --> 00:24:47,440
for almost two years you can enable it

646
00:24:44,799 --> 00:24:48,879
from the UI from the from the command

647
00:24:47,440 --> 00:24:51,009
line just like that

648
00:24:48,879 --> 00:24:54,699
I have a quote here of Adam Baldwin the

649
00:24:51,009 --> 00:24:55,989
security person inside of NPM saying a

650
00:24:54,700 --> 00:24:58,059
couple of months ago that you know he

651
00:24:55,989 --> 00:25:02,739
kind of cranked the numbers and found

652
00:24:58,059 --> 00:25:05,559
out that about 7% of NPM packages only

653
00:25:02,739 --> 00:25:07,989
those have TFA enabled which is bit of a

654
00:25:05,559 --> 00:25:09,908
sad story choose so of course I'm

655
00:25:07,989 --> 00:25:13,090
encouraging everyone here to enable 2fa

656
00:25:09,909 --> 00:25:15,759
there's a flipside of TFA right the

657
00:25:13,090 --> 00:25:18,000
caveat for that is what happens if your

658
00:25:15,759 --> 00:25:19,650
project a lot of those all of us

659
00:25:18,000 --> 00:25:21,660
dinner's actually have those automatic

660
00:25:19,650 --> 00:25:23,880
releases so we used to like semantic

661
00:25:21,660 --> 00:25:26,010
release to be able to once we merge code

662
00:25:23,880 --> 00:25:29,010
it had passed all 12 tests we were able

663
00:25:26,010 --> 00:25:31,470
to go ahead and release it so to effect

664
00:25:29,010 --> 00:25:33,390
how does that work in right and you're

665
00:25:31,470 --> 00:25:36,750
able to create tokens you can curate

666
00:25:33,390 --> 00:25:39,570
like a limited to FA in a way that it

667
00:25:36,750 --> 00:25:40,680
only works for login attempts but not

668
00:25:39,570 --> 00:25:42,750
for publishing so then you can use

669
00:25:40,680 --> 00:25:44,640
tokens but then tokens are actually

670
00:25:42,750 --> 00:25:45,990
created for all of your packages right

671
00:25:44,640 --> 00:25:48,300
for all of your user all of the exits

672
00:25:45,990 --> 00:25:49,590
that you have so even if I wanted to use

673
00:25:48,300 --> 00:25:51,720
that that's not really helpful because

674
00:25:49,590 --> 00:25:54,389
someone getting one token is able to

675
00:25:51,720 --> 00:25:56,280
compromise all of my packages and PM

676
00:25:54,390 --> 00:25:59,370
kind of recommends in a chat with them

677
00:25:56,280 --> 00:26:00,780
to create a second user the thing is the

678
00:25:59,370 --> 00:26:02,040
second user has the exact same problem

679
00:26:00,780 --> 00:26:05,430
right all the tokens created for that

680
00:26:02,040 --> 00:26:07,110
specific user are going to be used for

681
00:26:05,430 --> 00:26:10,080
all of the packages that that user uses

682
00:26:07,110 --> 00:26:11,790
so to actually you know kind of limited

683
00:26:10,080 --> 00:26:14,370
I would need to create a specific user

684
00:26:11,790 --> 00:26:15,930
for every package that I own and then

685
00:26:14,370 --> 00:26:17,340
just use that single token for every

686
00:26:15,930 --> 00:26:19,620
single package which is of course not

687
00:26:17,340 --> 00:26:23,480
scalable so we're hoping to see more

688
00:26:19,620 --> 00:26:25,800
more advancements in terms of 2fa on NPM

689
00:26:23,480 --> 00:26:28,350
the developer is taking ownership right

690
00:26:25,800 --> 00:26:29,520
that's a really good point and ownership

691
00:26:28,350 --> 00:26:30,629
or application secure that's a really

692
00:26:29,520 --> 00:26:32,790
good point that we're seeing a lot in

693
00:26:30,630 --> 00:26:34,980
the industry so we asked you know

694
00:26:32,790 --> 00:26:36,720
developers in one of the recent reports

695
00:26:34,980 --> 00:26:39,630
you know who you think should be owning

696
00:26:36,720 --> 00:26:41,790
application security and I don't know if

697
00:26:39,630 --> 00:26:44,100
surprising a lot or not but 81% of them

698
00:26:41,790 --> 00:26:45,870
are saying that you know developers who

699
00:26:44,100 --> 00:26:48,689
take ownership and of course that

700
00:26:45,870 --> 00:26:50,790
doesn't dismisses or removes the need

701
00:26:48,690 --> 00:26:52,110
for applicator for security people right

702
00:26:50,790 --> 00:26:53,730
we're gonna need that expertise all the

703
00:26:52,110 --> 00:26:54,750
time but the fellow pros are simply

704
00:26:53,730 --> 00:26:56,760
stating they are taking more ownership

705
00:26:54,750 --> 00:26:58,380
on like their docker files right full

706
00:26:56,760 --> 00:27:00,450
stack development on the cloud they want

707
00:26:58,380 --> 00:27:02,310
to be empowered with good security tools

708
00:27:00,450 --> 00:27:03,840
that work in the way that they work

709
00:27:02,310 --> 00:27:05,129
right they're not they're not in to

710
00:27:03,840 --> 00:27:07,320
replace us they're not going to be

711
00:27:05,130 --> 00:27:09,090
security experts so I think one good

712
00:27:07,320 --> 00:27:11,129
attempt in that is now we have NPM audit

713
00:27:09,090 --> 00:27:13,199
it already bundles in when you install

714
00:27:11,130 --> 00:27:14,520
NPM and when you when you when you scan

715
00:27:13,200 --> 00:27:16,350
something or when you just install you

716
00:27:14,520 --> 00:27:17,840
get you get an audit with something that

717
00:27:16,350 --> 00:27:20,429
may be malicious

718
00:27:17,840 --> 00:27:22,260
but what if security was easier what if

719
00:27:20,430 --> 00:27:24,090
security was more developer-friendly

720
00:27:22,260 --> 00:27:26,010
what if it's something that you it is

721
00:27:24,090 --> 00:27:27,570
not an afterthought what if it is just

722
00:27:26,010 --> 00:27:29,910
another check on your CI to make sure

723
00:27:27,570 --> 00:27:31,500
that nothing gets introduced in terms of

724
00:27:29,910 --> 00:27:33,240
a vulnerable package

725
00:27:31,500 --> 00:27:34,770
what if security was more actionable for

726
00:27:33,240 --> 00:27:36,600
developers what if instead of getting a

727
00:27:34,770 --> 00:27:39,450
report that you know two three four or

728
00:27:36,600 --> 00:27:41,250
five whatever packages are vulnerable we

729
00:27:39,450 --> 00:27:43,200
would instead be able to help developers

730
00:27:41,250 --> 00:27:45,360
in this ecosystem in workflows that are

731
00:27:43,200 --> 00:27:47,640
very familiar to them that we can open

732
00:27:45,360 --> 00:27:49,979
automatic pool requests to apply fixes

733
00:27:47,640 --> 00:27:51,270
right with really smart tools we can a

734
00:27:49,980 --> 00:27:54,510
we can do that and make them more

735
00:27:51,270 --> 00:27:55,770
powerful so lastly I want to say a few

736
00:27:54,510 --> 00:27:58,470
words about the node security working

737
00:27:55,770 --> 00:28:00,210
group which is what a couple of us here

738
00:27:58,470 --> 00:28:01,560
are taking part of I want to say

739
00:28:00,210 --> 00:28:03,330
basically you know if you need any help

740
00:28:01,560 --> 00:28:05,129
with security we are here for you right

741
00:28:03,330 --> 00:28:06,919
there is a security working group

742
00:28:05,130 --> 00:28:09,570
working within the node foundation and

743
00:28:06,920 --> 00:28:11,370
hopefully with the open GS foundation

744
00:28:09,570 --> 00:28:13,470
kind of merge maybe for the broader

745
00:28:11,370 --> 00:28:13,739
JavaScript ecosystem we meet once a

746
00:28:13,470 --> 00:28:16,530
month

747
00:28:13,740 --> 00:28:18,540
everyone kind of affiliated with

748
00:28:16,530 --> 00:28:20,250
security expertise but you know at the

749
00:28:18,540 --> 00:28:22,200
most part trying to better help the

750
00:28:20,250 --> 00:28:23,820
ecosystem some of the stuff that we do

751
00:28:22,200 --> 00:28:25,770
in terms of improving the ecosystem is

752
00:28:23,820 --> 00:28:27,810
things that are related to node core so

753
00:28:25,770 --> 00:28:30,629
for example a bug bounty program

754
00:28:27,810 --> 00:28:33,330
another example is for example we have

755
00:28:30,630 --> 00:28:35,550
processes and best practices so

756
00:28:33,330 --> 00:28:37,649
processes like how do you release a new

757
00:28:35,550 --> 00:28:39,419
security release for node core how does

758
00:28:37,650 --> 00:28:43,800
that work how do you announce it we

759
00:28:39,420 --> 00:28:45,780
maintain our own hacker one bug bounty

760
00:28:43,800 --> 00:28:48,210
program as well so anyone who wants to

761
00:28:45,780 --> 00:28:50,670
actually send something unrelated to two

762
00:28:48,210 --> 00:28:52,290
node but specifically to any NPN package

763
00:28:50,670 --> 00:28:53,730
can send either and of course maintain

764
00:28:52,290 --> 00:28:57,030
our own public vulnerability database

765
00:28:53,730 --> 00:28:59,190
out of all of this knowledge so coming

766
00:28:57,030 --> 00:29:01,379
up and just to give you an idea of what

767
00:28:59,190 --> 00:29:03,300
the thing that the security working

768
00:29:01,380 --> 00:29:04,650
group has been tasked with I do not know

769
00:29:03,300 --> 00:29:06,659
if you know all of those models but

770
00:29:04,650 --> 00:29:08,520
react as VG you know servpro table of

771
00:29:06,660 --> 00:29:10,230
basics before URL some of those are

772
00:29:08,520 --> 00:29:12,180
nested dependencies of others so you may

773
00:29:10,230 --> 00:29:13,950
not know them as direct dependencies but

774
00:29:12,180 --> 00:29:16,080
you know spanning millions of downloads

775
00:29:13,950 --> 00:29:17,610
all have been tried and worked on from

776
00:29:16,080 --> 00:29:19,470
the security working group and powering

777
00:29:17,610 --> 00:29:21,270
tools like NPM audit and snake right

778
00:29:19,470 --> 00:29:25,050
this is stuff that we are trying to help

779
00:29:21,270 --> 00:29:26,760
the ecosystem so summarizing our talk I

780
00:29:25,050 --> 00:29:29,450
think we talked about malicious modules

781
00:29:26,760 --> 00:29:32,190
how contributors get compromised

782
00:29:29,450 --> 00:29:33,420
enable to FA for that of course common

783
00:29:32,190 --> 00:29:35,730
security pitfalls like code injection

784
00:29:33,420 --> 00:29:37,710
happening through on the server side

785
00:29:35,730 --> 00:29:40,830
through insecure

786
00:29:37,710 --> 00:29:42,450
ways of protecting code and I think the

787
00:29:40,830 --> 00:29:44,460
future is kind of right we're doing a

788
00:29:42,450 --> 00:29:45,059
lot of work in terms of tooling in terms

789
00:29:44,460 --> 00:29:46,289
of involve

790
00:29:45,059 --> 00:29:47,730
met with a security working group so

791
00:29:46,289 --> 00:29:49,230
there's a lot of developer awareness

792
00:29:47,730 --> 00:29:52,049
coming out which is I think is a very

793
00:29:49,230 --> 00:29:53,429
very very good good thing you know fix

794
00:29:52,049 --> 00:29:55,139
and find vulnerabilities in your open

795
00:29:53,429 --> 00:29:56,340
source dependencies and just talk to us

796
00:29:55,139 --> 00:29:59,248
on the working group if you have

797
00:29:56,340 --> 00:30:00,389
anything else thank you so much if you

798
00:29:59,249 --> 00:30:02,580
want to talk to me about anything

799
00:30:00,389 --> 00:30:04,590
related to node the working group

800
00:30:02,580 --> 00:30:06,059
security open source maintaining

801
00:30:04,590 --> 00:30:08,510
packages and difficulties you're welcome

802
00:30:06,059 --> 00:30:13,440
to hit me up thank you

803
00:30:08,510 --> 00:30:13,440
[Applause]

