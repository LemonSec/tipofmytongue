1
00:00:00,030 --> 00:00:06,810
okay thank you very first staying up and

2
00:00:03,689 --> 00:00:08,330
awake so late in the day after so many

3
00:00:06,810 --> 00:00:10,649
days

4
00:00:08,330 --> 00:00:12,780
welcome to my talk on crypto failures

5
00:00:10,650 --> 00:00:15,000
where I hope to take the next 30 minutes

6
00:00:12,780 --> 00:00:18,029
and walk you through some interesting

7
00:00:15,000 --> 00:00:21,000
failures in crypto usages more than

8
00:00:18,029 --> 00:00:22,050
implementations which I find to be most

9
00:00:21,000 --> 00:00:25,830
of the issues when people use

10
00:00:22,050 --> 00:00:27,990
cryptography in libraries so my name is

11
00:00:25,830 --> 00:00:30,598
guy Barnhart McGann I'm a security

12
00:00:27,990 --> 00:00:32,729
consultant today also some track record

13
00:00:30,599 --> 00:00:35,910
in start-up companies some large

14
00:00:32,729 --> 00:00:38,669
enterprises also speak quite a bit

15
00:00:35,910 --> 00:00:41,250
usually on the offensive side I run

16
00:00:38,670 --> 00:00:44,219
besides Celebi which is a very large

17
00:00:41,250 --> 00:00:46,950
conference in June during cyber week

18
00:00:44,219 --> 00:00:49,289
about 1200 people and it's more geared

19
00:00:46,950 --> 00:00:54,980
into the security research community

20
00:00:49,289 --> 00:00:58,590
which I am part of and often speak at

21
00:00:54,980 --> 00:01:01,108
before I begin I want to take 30 seconds

22
00:00:58,590 --> 00:01:03,600
of your time and to rent on something

23
00:01:01,109 --> 00:01:05,700
personal to me I think that it's wrong

24
00:01:03,600 --> 00:01:07,320
that all of us decided to invite the

25
00:01:05,700 --> 00:01:09,119
keynote from a company called and so

26
00:01:07,320 --> 00:01:12,839
which you might be familiar with that

27
00:01:09,119 --> 00:01:15,360
malware named Pegasus and various

28
00:01:12,840 --> 00:01:17,250
incidents around the world from going

29
00:01:15,360 --> 00:01:20,549
after gay people in Turkey from

30
00:01:17,250 --> 00:01:23,610
murdering Mexican students in Mexico

31
00:01:20,549 --> 00:01:26,670
City to a lot of other places around the

32
00:01:23,610 --> 00:01:29,070
world but most importantly I think that

33
00:01:26,670 --> 00:01:31,200
a security company that is built on

34
00:01:29,070 --> 00:01:33,419
monetizing and weaponizing security

35
00:01:31,200 --> 00:01:36,659
vulnerabilities should not have a front

36
00:01:33,420 --> 00:01:40,670
stage seat in a security community

37
00:01:36,659 --> 00:01:40,670
conference and with that I'll continue

38
00:01:41,450 --> 00:01:46,220
thank you

39
00:01:43,690 --> 00:01:47,509
I'm not going to go into math so if

40
00:01:46,220 --> 00:01:49,280
you're afraid of math you're in the

41
00:01:47,510 --> 00:01:51,140
right place we don't have time to really

42
00:01:49,280 --> 00:01:52,580
go into that but I don't I do want to

43
00:01:51,140 --> 00:01:55,310
remind you a couple of important things

44
00:01:52,580 --> 00:01:57,170
the first three-way acronym is the CIA

45
00:01:55,310 --> 00:01:59,330
which is a good acronym which we all

46
00:01:57,170 --> 00:02:01,250
like and hope and finding sharing the

47
00:01:59,330 --> 00:02:02,450
integrity and authenticity this just for

48
00:02:01,250 --> 00:02:06,860
background so we are speaking the same

49
00:02:02,450 --> 00:02:09,949
language hash functions a lot of people

50
00:02:06,860 --> 00:02:12,050
are know what hand hash functions are

51
00:02:09,949 --> 00:02:14,299
not all of them under cent what exactly

52
00:02:12,050 --> 00:02:15,800
do they mean and the reason I say that

53
00:02:14,300 --> 00:02:17,630
is because I have conversational

54
00:02:15,800 --> 00:02:21,260
developers and they often use the phrase

55
00:02:17,630 --> 00:02:23,600
I'm encrypting this with sha-1 which is

56
00:02:21,260 --> 00:02:24,890
wrong but not all not just from a

57
00:02:23,600 --> 00:02:27,560
mathematical perspective but just from a

58
00:02:24,890 --> 00:02:29,029
conceptual and usage perspective so in

59
00:02:27,560 --> 00:02:30,590
order to understand what the hash is is

60
00:02:29,030 --> 00:02:32,510
basically it's a one-way function

61
00:02:30,590 --> 00:02:34,220
meaning that I would take some input and

62
00:02:32,510 --> 00:02:35,780
again get some garbage at the end and

63
00:02:34,220 --> 00:02:38,660
that specific garbage has unique

64
00:02:35,780 --> 00:02:40,460
properties and if it's not held to these

65
00:02:38,660 --> 00:02:42,710
unique properties this is not a

66
00:02:40,460 --> 00:02:44,330
cryptographic hash so whenever you read

67
00:02:42,710 --> 00:02:45,740
somewhere or look for something and you

68
00:02:44,330 --> 00:02:47,860
hear someone say hash you should ask

69
00:02:45,740 --> 00:02:50,480
yourself what exactly do they mean and

70
00:02:47,860 --> 00:02:53,120
the lock must test here is that if you

71
00:02:50,480 --> 00:02:54,829
change a single bit a single bit in the

72
00:02:53,120 --> 00:02:56,959
input you should have a very wide

73
00:02:54,830 --> 00:02:59,180
distribution of change over the output

74
00:02:56,959 --> 00:03:01,310
so you can see the letter D change to

75
00:02:59,180 --> 00:03:03,050
the letter C here and that really

76
00:03:01,310 --> 00:03:08,630
changes the output which you can see

77
00:03:03,050 --> 00:03:10,459
bolded okay

78
00:03:08,630 --> 00:03:11,870
generally speaking hash functions

79
00:03:10,459 --> 00:03:14,390
cryptographic hash functions were

80
00:03:11,870 --> 00:03:18,440
thought to be relatively impervious to

81
00:03:14,390 --> 00:03:21,500
attacks so sha-1 used to be too too big

82
00:03:18,440 --> 00:03:23,420
too cumbersome to brute-force but with

83
00:03:21,500 --> 00:03:25,790
the current state of the art we are

84
00:03:23,420 --> 00:03:28,040
talking about the reduction from 2 to

85
00:03:25,790 --> 00:03:31,540
the power of 80 to 2 to the power of 16

86
00:03:28,040 --> 00:03:35,060
68 which realistically speaking is about

87
00:03:31,540 --> 00:03:37,010
$100,000 of ec2 instances so this is not

88
00:03:35,060 --> 00:03:39,470
exact as something that I can spin up at

89
00:03:37,010 --> 00:03:41,269
home but is this is not exactly far away

90
00:03:39,470 --> 00:03:43,250
from a company who wants to do this for

91
00:03:41,269 --> 00:03:46,720
commercial use or definitely not for any

92
00:03:43,250 --> 00:03:48,860
kind of government symmetric encryption

93
00:03:46,720 --> 00:03:50,300
encryption in general we are very

94
00:03:48,860 --> 00:03:52,820
familiar with AES there are a couple of

95
00:03:50,300 --> 00:03:54,290
other options as well and here we are

96
00:03:52,820 --> 00:03:55,850
also expecting the same kind of

97
00:03:54,290 --> 00:03:56,549
properties if we take some sort of

98
00:03:55,850 --> 00:03:59,340
message and

99
00:03:56,550 --> 00:04:02,070
to encrypt it with a key we will need

100
00:03:59,340 --> 00:04:04,080
the property that says if I change a

101
00:04:02,070 --> 00:04:08,280
single bit in the input I will get a

102
00:04:04,080 --> 00:04:10,410
very nicely that randomly distributed

103
00:04:08,280 --> 00:04:11,220
output this is my expectation if this is

104
00:04:10,410 --> 00:04:13,470
not happening

105
00:04:11,220 --> 00:04:16,019
that means that this is not a really

106
00:04:13,470 --> 00:04:18,870
good cryptography scheme another thing

107
00:04:16,019 --> 00:04:20,700
is is that we do have an expectation on

108
00:04:18,870 --> 00:04:22,530
the size of the input the size of the

109
00:04:20,700 --> 00:04:24,900
output and stuff like that the reason

110
00:04:22,530 --> 00:04:27,239
I'm mentioning it is because those sizes

111
00:04:24,900 --> 00:04:28,950
leak information about what kind of

112
00:04:27,240 --> 00:04:31,530
scheme you are using and what the types

113
00:04:28,950 --> 00:04:33,479
of things you can expect for example if

114
00:04:31,530 --> 00:04:35,520
you remember the linkedin breach that

115
00:04:33,480 --> 00:04:37,710
was about three four years ago i think

116
00:04:35,520 --> 00:04:40,560
it was a sum on the order of 50 million

117
00:04:37,710 --> 00:04:42,239
records that were leaked out and in

118
00:04:40,560 --> 00:04:45,150
their database all of the passwords were

119
00:04:42,240 --> 00:04:46,800
encrypted but it was almost rudimentary

120
00:04:45,150 --> 00:04:47,880
easy to understand what kind of scheme

121
00:04:46,800 --> 00:04:49,830
and the fact that they use the same

122
00:04:47,880 --> 00:04:52,290
password because you could see that

123
00:04:49,830 --> 00:04:57,419
there are repeated blocks and all blocks

124
00:04:52,290 --> 00:04:59,460
were a factor of 56 bits so the block

125
00:04:57,420 --> 00:05:02,669
size was 56 bits and you can actually

126
00:04:59,460 --> 00:05:04,830
look at the data and just analyze it and

127
00:05:02,669 --> 00:05:06,270
get into those kinds of fair results so

128
00:05:04,830 --> 00:05:08,280
you know it was Blowfish and then you

129
00:05:06,270 --> 00:05:10,380
can take other steps on top of that and

130
00:05:08,280 --> 00:05:13,080
they use the same key for all of the

131
00:05:10,380 --> 00:05:14,400
different 60 50 million records because

132
00:05:13,080 --> 00:05:16,890
you could see different records that are

133
00:05:14,400 --> 00:05:19,010
encrypted into the same value so people

134
00:05:16,890 --> 00:05:23,900
who had the same password got the same

135
00:05:19,010 --> 00:05:23,900
encrypted stored text in the database

136
00:05:24,260 --> 00:05:30,419
public private keep the cryptography is

137
00:05:28,530 --> 00:05:33,510
a bit more difficult to explain and

138
00:05:30,419 --> 00:05:36,240
people who are using it usually use it

139
00:05:33,510 --> 00:05:37,950
in a very high-level manner or in a way

140
00:05:36,240 --> 00:05:40,680
that's not exactly as they offer

141
00:05:37,950 --> 00:05:42,900
intended and this is important so

142
00:05:40,680 --> 00:05:44,910
basically we have a way to generate a

143
00:05:42,900 --> 00:05:46,799
public and private key they have some

144
00:05:44,910 --> 00:05:49,590
properties I'm not going to go into them

145
00:05:46,800 --> 00:05:52,050
and you want to give everybody your

146
00:05:49,590 --> 00:05:53,489
public key so they can just create new

147
00:05:52,050 --> 00:05:55,830
messages and encrypt them with the

148
00:05:53,490 --> 00:05:59,580
public key but because you hold the

149
00:05:55,830 --> 00:06:03,260
private key you can decrypt it so that's

150
00:05:59,580 --> 00:06:06,450
the basic of a public/private key scheme

151
00:06:03,260 --> 00:06:08,849
there are some assumptions here the

152
00:06:06,450 --> 00:06:10,529
assumptions here is that the

153
00:06:08,849 --> 00:06:12,119
operation of encrypting something on

154
00:06:10,529 --> 00:06:14,899
operation of decrypting something is not

155
00:06:12,119 --> 00:06:18,509
the same they they are held in two

156
00:06:14,899 --> 00:06:20,339
different kind of schemes for example if

157
00:06:18,509 --> 00:06:22,020
I am the server and I want to prove to

158
00:06:20,339 --> 00:06:24,089
the world that I'm the owner of a

159
00:06:22,020 --> 00:06:25,589
specific public key then I need to hold

160
00:06:24,089 --> 00:06:27,509
the private key in order to perform

161
00:06:25,589 --> 00:06:28,979
computations with it so when you're

162
00:06:27,509 --> 00:06:31,889
spinning up a server and you want to put

163
00:06:28,979 --> 00:06:33,688
a certificate on it a certificate is

164
00:06:31,889 --> 00:06:36,270
fine for some use cases but if you want

165
00:06:33,689 --> 00:06:37,889
to actually do a full way to a full

166
00:06:36,270 --> 00:06:39,029
weight communication you have to prove

167
00:06:37,889 --> 00:06:41,399
that you're the owner and you actually

168
00:06:39,029 --> 00:06:43,199
had have to hold the private key which

169
00:06:41,399 --> 00:06:44,999
might be an issue the other ways to

170
00:06:43,199 --> 00:06:48,839
deploy it without holding that private

171
00:06:44,999 --> 00:06:51,689
key signatures is the parade that

172
00:06:48,839 --> 00:06:53,879
usually stuff like that sort of boils

173
00:06:51,689 --> 00:06:56,789
down together when you're talking about

174
00:06:53,879 --> 00:06:59,429
signatures you want to actually to prove

175
00:06:56,789 --> 00:07:01,318
to someone that you hold an identity an

176
00:06:59,429 --> 00:07:03,479
identity might be anything from Misa

177
00:07:01,319 --> 00:07:06,209
claiming to be God Bernhardt McGann and

178
00:07:03,479 --> 00:07:08,878
I can prove the time guy by showing you

179
00:07:06,209 --> 00:07:10,229
a proof that I have the private key but

180
00:07:08,879 --> 00:07:14,039
more than that I want to show to the

181
00:07:10,229 --> 00:07:15,568
world that I am that owner of the key

182
00:07:14,039 --> 00:07:17,459
and the scheme to do that will be

183
00:07:15,569 --> 00:07:19,769
something like this I will take a

184
00:07:17,459 --> 00:07:22,259
message with a hash function I will save

185
00:07:19,769 --> 00:07:25,079
the hash of that message and then I want

186
00:07:22,259 --> 00:07:27,139
to encrypt the hash of that message with

187
00:07:25,079 --> 00:07:29,939
a private key and you get a signature

188
00:07:27,139 --> 00:07:32,879
now everybody in the world can take my

189
00:07:29,939 --> 00:07:34,740
public key which I said it was mine but

190
00:07:32,879 --> 00:07:36,479
I don't have any way to prove it but

191
00:07:34,740 --> 00:07:39,449
then they can compute the hash of the

192
00:07:36,479 --> 00:07:41,938
message themselves and get some H dot

193
00:07:39,449 --> 00:07:43,469
and compare it to the decrypted message

194
00:07:41,939 --> 00:07:45,179
which they can be critical they have the

195
00:07:43,469 --> 00:07:48,029
public key which I claimed to be mine

196
00:07:45,179 --> 00:07:50,008
but I haven't proved yet and if H is the

197
00:07:48,029 --> 00:07:52,889
same as H tag that means that whoever

198
00:07:50,009 --> 00:07:55,589
created that encrypted message was

199
00:07:52,889 --> 00:07:58,379
holding the private key therefore I am

200
00:07:55,589 --> 00:08:01,439
who I say I am so this is a signature

201
00:07:58,379 --> 00:08:06,089
scheme very high level hand wavy kind of

202
00:08:01,439 --> 00:08:08,789
thing random another very important

203
00:08:06,089 --> 00:08:10,199
component of cryptography and basically

204
00:08:08,789 --> 00:08:12,959
what it means that I want a random

205
00:08:10,199 --> 00:08:15,149
source it means that whenever I pull a

206
00:08:12,959 --> 00:08:17,610
bit from the source I don't have any way

207
00:08:15,149 --> 00:08:19,400
to determine what the next bit is going

208
00:08:17,610 --> 00:08:23,060
to be with a better

209
00:08:19,400 --> 00:08:25,340
chance than 50% that means I am I am a

210
00:08:23,060 --> 00:08:27,410
asking from a source to give me more

211
00:08:25,340 --> 00:08:29,539
bits it might be zero it might be one

212
00:08:27,410 --> 00:08:31,880
but I don't have any way to predict if

213
00:08:29,539 --> 00:08:35,000
it's going to be zero one if it is this

214
00:08:31,880 --> 00:08:37,099
is not a very good random source so the

215
00:08:35,000 --> 00:08:39,559
two basic components we usually talk

216
00:08:37,099 --> 00:08:43,370
about our trng and a PNG maybe someday

217
00:08:39,559 --> 00:08:45,800
place equality RPG but basic thing is if

218
00:08:43,370 --> 00:08:49,940
it's a true random number generator a

219
00:08:45,800 --> 00:08:52,459
couple of oscillators maybe something

220
00:08:49,940 --> 00:08:54,410
thats related to breakdown of isotope

221
00:08:52,459 --> 00:08:56,359
stuff like that which is hardware in the

222
00:08:54,410 --> 00:08:59,060
real world will actually put out bits

223
00:08:56,360 --> 00:09:02,660
with some probability however what we

224
00:08:59,060 --> 00:09:04,699
all use everywhere is called PNG PNG is

225
00:09:02,660 --> 00:09:07,550
where the random number generator which

226
00:09:04,700 --> 00:09:10,520
is basically saying I have a predictable

227
00:09:07,550 --> 00:09:12,740
way to cause unpredictable outputs or in

228
00:09:10,520 --> 00:09:15,319
other words I will put him some sort of

229
00:09:12,740 --> 00:09:16,790
seen some sort of input and I will hatch

230
00:09:15,320 --> 00:09:18,020
the result and I will hatch the result

231
00:09:16,790 --> 00:09:19,640
again and hatch it again and again again

232
00:09:18,020 --> 00:09:21,890
and again and if I may using a

233
00:09:19,640 --> 00:09:23,810
cryptographic hash then I can show that

234
00:09:21,890 --> 00:09:25,910
that I cannot predict what the output is

235
00:09:23,810 --> 00:09:27,800
going to be therefore the output looks

236
00:09:25,910 --> 00:09:29,959
to be random it's not really random

237
00:09:27,800 --> 00:09:32,240
because if I am aware of what this seed

238
00:09:29,959 --> 00:09:34,010
is I can predict the entire chain up to

239
00:09:32,240 --> 00:09:39,020
the moment where you are actually

240
00:09:34,010 --> 00:09:41,360
putting the beats out of the system so

241
00:09:39,020 --> 00:09:43,160
what happens when the random isn't

242
00:09:41,360 --> 00:09:45,220
random and that is a good question to

243
00:09:43,160 --> 00:09:47,060
ask but also whenever you are

244
00:09:45,220 --> 00:09:49,130
implementing or using some sort of

245
00:09:47,060 --> 00:09:50,839
implementation and somewhere along the

246
00:09:49,130 --> 00:09:54,709
line is written something like nonce Ori

247
00:09:50,839 --> 00:09:57,560
or it's a temporary value or temporarily

248
00:09:54,709 --> 00:09:59,719
random value and people treat it as non

249
00:09:57,560 --> 00:10:01,609
cryptographically secure element or I

250
00:09:59,720 --> 00:10:03,320
just copied from the other

251
00:10:01,610 --> 00:10:03,830
implementation that I had or stuff like

252
00:10:03,320 --> 00:10:06,440
that

253
00:10:03,830 --> 00:10:10,870
bad things happen and this is the first

254
00:10:06,440 --> 00:10:13,690
thing that what I want to talk about so

255
00:10:10,870 --> 00:10:17,000
how many of you have heard of bitcoins

256
00:10:13,690 --> 00:10:20,420
at least one yeah maybe

257
00:10:17,000 --> 00:10:22,370
so basically speaking Bitcoin or the

258
00:10:20,420 --> 00:10:23,810
Bitcoin protocol is sitting on top

259
00:10:22,370 --> 00:10:26,569
something called blockchain which is

260
00:10:23,810 --> 00:10:31,279
basically cryptography in the real world

261
00:10:26,569 --> 00:10:34,579
so a couple of examples which will help

262
00:10:31,279 --> 00:10:36,350
us understand a coin basically is I want

263
00:10:34,579 --> 00:10:38,779
to find two different inputs that will

264
00:10:36,350 --> 00:10:41,689
provide or I want to sorry I want to

265
00:10:38,779 --> 00:10:44,180
find an input to provide a hash results

266
00:10:41,689 --> 00:10:46,040
so it's not a very easy thing to do but

267
00:10:44,180 --> 00:10:49,008
it's possible if you dedicate enough CPU

268
00:10:46,040 --> 00:10:51,110
cycles and this the result of that

269
00:10:49,009 --> 00:10:53,050
computation is basically a coin so we're

270
00:10:51,110 --> 00:10:55,519
talking about Bitcoin it's actually me

271
00:10:53,050 --> 00:10:58,040
investing a lot of mining operation a

272
00:10:55,519 --> 00:11:01,790
lot of CPU cycles to find an input that

273
00:10:58,040 --> 00:11:04,610
will have a specific hash output wallets

274
00:11:01,790 --> 00:11:06,050
are basically the private the private

275
00:11:04,610 --> 00:11:07,939
keys public keys that you have the

276
00:11:06,050 --> 00:11:10,339
hashed results of those addresses are

277
00:11:07,939 --> 00:11:13,550
the wallets or their dresses for the

278
00:11:10,339 --> 00:11:15,500
Bitcoin protocol and transactions moving

279
00:11:13,550 --> 00:11:18,199
money from wallet a to wallet B is

280
00:11:15,500 --> 00:11:20,750
basically me signing with my private key

281
00:11:18,199 --> 00:11:23,750
in order that says move funds from

282
00:11:20,750 --> 00:11:26,059
wallet a to the destination wallet B of

283
00:11:23,750 --> 00:11:27,949
this amount and I affirm this action

284
00:11:26,059 --> 00:11:35,360
with my private key so this is a

285
00:11:27,949 --> 00:11:37,569
blockchain transaction basically an

286
00:11:35,360 --> 00:11:40,399
important thing to note here is that

287
00:11:37,569 --> 00:11:42,349
because the identity is strictly tied to

288
00:11:40,399 --> 00:11:44,420
your private key if you lose your

289
00:11:42,350 --> 00:11:47,329
private key you lost your money there is

290
00:11:44,420 --> 00:11:49,370
no way to move money out of that wallet

291
00:11:47,329 --> 00:11:51,170
if you lost your private key because you

292
00:11:49,370 --> 00:11:53,209
cannot create it you you don't have any

293
00:11:51,170 --> 00:11:54,920
tool any way to create a transaction

294
00:11:53,209 --> 00:11:57,018
that will move money out of that wallet

295
00:11:54,920 --> 00:11:59,149
without providing the private key and

296
00:11:57,019 --> 00:12:01,399
it's very interesting because the

297
00:11:59,149 --> 00:12:04,009
vice-versa also happens if somebody else

298
00:12:01,399 --> 00:12:06,290
has your private key he can move funds

299
00:12:04,009 --> 00:12:08,240
outside of your wallet without anybody

300
00:12:06,290 --> 00:12:10,639
being able to prove that it wasn't you

301
00:12:08,240 --> 00:12:14,259
moving there and found the funds out of

302
00:12:10,639 --> 00:12:16,850
that wallet so it's a difficult thing to

303
00:12:14,259 --> 00:12:19,250
grasp when when you are designing the

304
00:12:16,850 --> 00:12:23,660
system that things can break both ways

305
00:12:19,250 --> 00:12:26,269
and here I want to show you an example a

306
00:12:23,660 --> 00:12:27,889
specific implementation of public key

307
00:12:26,269 --> 00:12:30,380
cryptography called elliptic curves

308
00:12:27,889 --> 00:12:33,980
anybody heard of ECC

309
00:12:30,380 --> 00:12:36,520
six people okay so seven will fit sick

310
00:12:33,980 --> 00:12:38,690
so I'm going to wave my hands a bit

311
00:12:36,520 --> 00:12:40,220
elliptic curves I'm not going to extend

312
00:12:38,690 --> 00:12:43,130
what it is it's just a different scheme

313
00:12:40,220 --> 00:12:45,800
to provide private and public keys but

314
00:12:43,130 --> 00:12:50,840
in this scheme which is used by a

315
00:12:45,800 --> 00:12:53,089
Bitcoin is very tightly coupled to the

316
00:12:50,840 --> 00:12:54,650
randoms that you're using so part of the

317
00:12:53,090 --> 00:12:56,510
scheme is the choice of the random

318
00:12:54,650 --> 00:12:58,340
numbers and if you are not choosing them

319
00:12:56,510 --> 00:13:02,150
correctly you're gonna have at that time

320
00:12:58,340 --> 00:13:05,690
and I'll show examples a transaction is

321
00:13:02,150 --> 00:13:07,569
basically this is the money I can spend

322
00:13:05,690 --> 00:13:09,950
and move it into this account or

323
00:13:07,570 --> 00:13:11,690
something that look like this so on the

324
00:13:09,950 --> 00:13:14,600
left you have the addresses which is the

325
00:13:11,690 --> 00:13:16,100
hash of the the key and on the right you

326
00:13:14,600 --> 00:13:19,340
have the breakdown of where do you want

327
00:13:16,100 --> 00:13:22,370
to transfer your bitcoins values so it's

328
00:13:19,340 --> 00:13:25,580
a float so you can see a lot of accuracy

329
00:13:22,370 --> 00:13:27,440
after the the decimal period but the

330
00:13:25,580 --> 00:13:29,900
bottom line is once I submit this

331
00:13:27,440 --> 00:13:31,820
transaction it's get registered on the

332
00:13:29,900 --> 00:13:33,620
blockchain and then officially this

333
00:13:31,820 --> 00:13:36,200
money has moved from Allah to a2 will it

334
00:13:33,620 --> 00:13:38,750
be okay

335
00:13:36,200 --> 00:13:40,460
so in order to understand the operations

336
00:13:38,750 --> 00:13:43,040
in and this is the bit of the Matthew

337
00:13:40,460 --> 00:13:45,080
thing but I will go in my hand here you

338
00:13:43,040 --> 00:13:47,540
have a couple of different things that

339
00:13:45,080 --> 00:13:49,640
come into play so there's some no net

340
00:13:47,540 --> 00:13:51,290
parameters for the for the curve for the

341
00:13:49,640 --> 00:13:53,990
algorithm which we would just call them

342
00:13:51,290 --> 00:13:56,060
G and we have H which is the hash of the

343
00:13:53,990 --> 00:13:58,220
message we have our D this is our

344
00:13:56,060 --> 00:14:00,739
private key and we have K which is a

345
00:13:58,220 --> 00:14:03,560
random number I point your attention to

346
00:14:00,740 --> 00:14:05,720
K and basically what it means that when

347
00:14:03,560 --> 00:14:08,540
I sign something I do this operation

348
00:14:05,720 --> 00:14:10,610
here on the bottom right which is a adds

349
00:14:08,540 --> 00:14:12,439
something I multiply something I divide

350
00:14:10,610 --> 00:14:17,150
something and this is basically the

351
00:14:12,440 --> 00:14:19,220
signature but this is problematic it's

352
00:14:17,150 --> 00:14:22,220
problematic because people who write

353
00:14:19,220 --> 00:14:23,810
wallet software made assumptions and

354
00:14:22,220 --> 00:14:27,020
they made assumptions for example that

355
00:14:23,810 --> 00:14:28,969
this number K needs to be random they

356
00:14:27,020 --> 00:14:30,650
read the spec they didn't understand

357
00:14:28,970 --> 00:14:33,200
that it needs to be random each and

358
00:14:30,650 --> 00:14:36,220
every time you perform a transaction so

359
00:14:33,200 --> 00:14:36,220
why is that important

360
00:14:36,360 --> 00:14:40,889
well assume that you have two different

361
00:14:38,519 --> 00:14:44,069
transactions performed by the same

362
00:14:40,889 --> 00:14:46,709
wallet software and both transaction had

363
00:14:44,069 --> 00:14:48,299
the same K because they did not choose a

364
00:14:46,709 --> 00:14:51,089
different random for each transaction

365
00:14:48,299 --> 00:14:54,959
that means that you can now take two

366
00:14:51,089 --> 00:14:58,290
different values of art they are comma s

367
00:14:54,959 --> 00:15:01,229
and do some additions subtractions

368
00:14:58,290 --> 00:15:04,709
multiplications some algebra algebra

369
00:15:01,230 --> 00:15:07,139
quirk and you can extract K and once you

370
00:15:04,709 --> 00:15:09,628
know K you can extract s and once you

371
00:15:07,139 --> 00:15:11,850
know s you can extract D the private key

372
00:15:09,629 --> 00:15:16,199
once you have the private key you have

373
00:15:11,850 --> 00:15:20,999
the money so this is from when the

374
00:15:16,199 --> 00:15:23,878
actually text started in 2013 August 10

375
00:15:20,999 --> 00:15:25,619
2013 and somebody posted messages on the

376
00:15:23,879 --> 00:15:27,720
boards we're getting a lot of feedback

377
00:15:25,619 --> 00:15:29,970
that people are seeing transaction that

378
00:15:27,720 --> 00:15:32,519
they didn't actually do does anybody

379
00:15:29,970 --> 00:15:34,439
know what's going on well the answer was

380
00:15:32,519 --> 00:15:36,029
somebody understood what's going on and

381
00:15:34,439 --> 00:15:38,160
just fun a lot of the money in two

382
00:15:36,029 --> 00:15:41,459
different wallets and you would assume

383
00:15:38,160 --> 00:15:43,499
okay this is like a bad bad this

384
00:15:41,459 --> 00:15:45,449
shouldn't really happen but it happens

385
00:15:43,499 --> 00:15:46,919
the tower box but then you see that

386
00:15:45,449 --> 00:15:49,139
these kind of things keeps happening

387
00:15:46,919 --> 00:15:51,360
every I don't know every quarter every

388
00:15:49,139 --> 00:15:53,189
six months some wallets software is

389
00:15:51,360 --> 00:15:54,299
getting hacked and when you look into

390
00:15:53,189 --> 00:15:55,799
the hack you understand that they

391
00:15:54,299 --> 00:15:57,809
actually implemented the software wrong

392
00:15:55,799 --> 00:16:02,309
they didn't understand how to implement

393
00:15:57,809 --> 00:16:04,679
ECC correctly so I hope this is a an

394
00:16:02,309 --> 00:16:06,689
example just illustrative enough of how

395
00:16:04,679 --> 00:16:08,009
this actually works in Bitcoin but

396
00:16:06,689 --> 00:16:11,959
that's not the only place that these

397
00:16:08,009 --> 00:16:16,049
kind of things happened for example and

398
00:16:11,959 --> 00:16:18,899
you would expect when somebody is trying

399
00:16:16,049 --> 00:16:20,850
to get a random value they would go to

400
00:16:18,899 --> 00:16:22,759
the system to the kernel or something

401
00:16:20,850 --> 00:16:25,949
similar and then we read for example

402
00:16:22,759 --> 00:16:29,009
/dev random or slash the view random get

403
00:16:25,949 --> 00:16:31,319
some bytes and store them and that's

404
00:16:29,009 --> 00:16:33,360
true that's what should happen what

405
00:16:31,319 --> 00:16:36,809
should not happen as we take those bytes

406
00:16:33,360 --> 00:16:40,350
and store them as static keys or static

407
00:16:36,809 --> 00:16:42,839
values so what happened with Sony

408
00:16:40,350 --> 00:16:45,660
Playstation 3 a couple of years ago is

409
00:16:42,839 --> 00:16:46,839
that a very nice group called fail

410
00:16:45,660 --> 00:16:49,810
overflow

411
00:16:46,839 --> 00:16:52,389
looked into the signature scheme for the

412
00:16:49,810 --> 00:16:54,969
downloadable content and patches for the

413
00:16:52,389 --> 00:16:56,709
Sony Playstation 3 and what they found

414
00:16:54,970 --> 00:16:58,810
when they compared different downloads

415
00:16:56,709 --> 00:17:00,849
different patches that were all signed

416
00:16:58,810 --> 00:17:04,119
with the same key and all those keys

417
00:17:00,850 --> 00:17:05,919
were using the same random value so they

418
00:17:04,119 --> 00:17:07,869
just did some algebraic operations and

419
00:17:05,919 --> 00:17:10,559
found the private key and lo and behold

420
00:17:07,869 --> 00:17:13,030
now everybody has hacked PlayStation 3

421
00:17:10,559 --> 00:17:15,160
so it's not like this is something that

422
00:17:13,030 --> 00:17:16,869
you can easily recover from when you are

423
00:17:15,160 --> 00:17:19,150
licking your private keys out to the

424
00:17:16,869 --> 00:17:21,069
world this is a major issue and it's not

425
00:17:19,150 --> 00:17:23,169
because somebody didn't think about

426
00:17:21,069 --> 00:17:27,730
security you just didn't understand the

427
00:17:23,169 --> 00:17:30,250
cryptography behind it another thing

428
00:17:27,730 --> 00:17:31,690
that's important to note and is the

429
00:17:30,250 --> 00:17:35,020
difference between anonymity and

430
00:17:31,690 --> 00:17:37,960
confident confidentiality and the basic

431
00:17:35,020 --> 00:17:39,789
tenant is that I can be anonymous it

432
00:17:37,960 --> 00:17:43,049
does not mean that I can hide what I'm

433
00:17:39,789 --> 00:17:45,640
doing so on the blockchain on Bitcoin

434
00:17:43,049 --> 00:17:47,049
everybody knows what you're doing every

435
00:17:45,640 --> 00:17:49,000
time that you are moving funds from

436
00:17:47,049 --> 00:17:50,980
wallet a to wallet B from B to C tooth

437
00:17:49,000 --> 00:17:52,690
from C to D it's all logged it's all

438
00:17:50,980 --> 00:17:56,200
register it's all shared that's the

439
00:17:52,690 --> 00:17:58,870
basic way that the distributed chain is

440
00:17:56,200 --> 00:18:00,760
working on the other hand it does not

441
00:17:58,870 --> 00:18:03,939
necessarily have any kind of identity

442
00:18:00,760 --> 00:18:07,120
tied into it but if you want to move

443
00:18:03,940 --> 00:18:09,460
money from Bitcoin out to the real world

444
00:18:07,120 --> 00:18:12,459
or from the real world they back into

445
00:18:09,460 --> 00:18:13,929
the into the Bitcoin some identity has

446
00:18:12,460 --> 00:18:15,850
to be involved somebody has to give the

447
00:18:13,929 --> 00:18:18,580
credit card details somebody has to go

448
00:18:15,850 --> 00:18:22,260
and give real money to get fake bitcoins

449
00:18:18,580 --> 00:18:24,668
so this is something that some malware

450
00:18:22,260 --> 00:18:26,559
people forgot or didn't really think

451
00:18:24,669 --> 00:18:30,039
through and this is a very nice example

452
00:18:26,559 --> 00:18:31,360
you all remember this screen two and a

453
00:18:30,039 --> 00:18:35,260
half years ago more or less two years

454
00:18:31,360 --> 00:18:36,879
ago around May so I kept track kept tabs

455
00:18:35,260 --> 00:18:38,950
on this and it was very interesting

456
00:18:36,880 --> 00:18:41,559
because for about seven to nine months

457
00:18:38,950 --> 00:18:43,450
they had money funneling into their

458
00:18:41,559 --> 00:18:46,090
wallet they want to cry people had money

459
00:18:43,450 --> 00:18:48,549
funneled into the world about $100,000

460
00:18:46,090 --> 00:18:50,678
more or less they didn't touch it

461
00:18:48,549 --> 00:18:54,340
they couldn't touch it because there was

462
00:18:50,679 --> 00:18:56,350
so much attention on that wallet that if

463
00:18:54,340 --> 00:18:58,090
somebody went and converted it into real

464
00:18:56,350 --> 00:19:00,998
currencies anywhere in the world

465
00:18:58,090 --> 00:19:03,789
the interpol would be all over them so

466
00:19:00,999 --> 00:19:04,539
anonymity and confidentiality are not

467
00:19:03,789 --> 00:19:06,549
the same thing

468
00:19:04,539 --> 00:19:08,679
by the way they solve this problem in

469
00:19:06,549 --> 00:19:10,779
the end by using something called

470
00:19:08,679 --> 00:19:12,309
bitcoin mixers where they split the

471
00:19:10,779 --> 00:19:14,320
money into a lot of different components

472
00:19:12,309 --> 00:19:16,239
and send it into different wallets then

473
00:19:14,320 --> 00:19:18,399
we recombine them in the end for the

474
00:19:16,239 --> 00:19:22,229
other agencies etc it's not unsolvable

475
00:19:18,399 --> 00:19:22,228
you just have to think it through so

476
00:19:22,590 --> 00:19:28,749
this is a case of how bad crypto looks

477
00:19:26,919 --> 00:19:34,029
by design I want to show you and of a

478
00:19:28,749 --> 00:19:37,389
couple of other examples do you remember

479
00:19:34,029 --> 00:19:40,149
this piece of code at least one person

480
00:19:37,389 --> 00:19:41,769
okay two person Wow

481
00:19:40,149 --> 00:19:43,330
this is very interesting this is piece

482
00:19:41,769 --> 00:19:45,460
of code that was used if I remember

483
00:19:43,330 --> 00:19:48,070
currently by Apple in their certificate

484
00:19:45,460 --> 00:19:50,769
verification code and what this code

485
00:19:48,070 --> 00:19:52,359
actually means is that I am trying to

486
00:19:50,769 --> 00:19:54,999
verify that a specific certificate

487
00:19:52,359 --> 00:19:56,379
belongs to a service so I will check a

488
00:19:54,999 --> 00:19:57,669
and I will check B and I will check C

489
00:19:56,379 --> 00:19:58,839
and in the end I will come to the

490
00:19:57,669 --> 00:20:00,609
conclusion that this is a valid

491
00:19:58,839 --> 00:20:03,009
certificate and if one of the checks

492
00:20:00,609 --> 00:20:04,389
would fail then I should maybe not trust

493
00:20:03,009 --> 00:20:04,809
that certificate and do something about

494
00:20:04,389 --> 00:20:08,649
it

495
00:20:04,809 --> 00:20:11,799
but somebody did this probably by

496
00:20:08,649 --> 00:20:13,418
mistake and what this code now means is

497
00:20:11,799 --> 00:20:14,830
that I will check this and I will check

498
00:20:13,419 --> 00:20:16,089
this and I'll check this and if I

499
00:20:14,830 --> 00:20:18,549
haven't found any fault

500
00:20:16,089 --> 00:20:20,979
up till now I will go to fail and

501
00:20:18,549 --> 00:20:24,700
because fail has been called without a

502
00:20:20,979 --> 00:20:27,669
failed state it will exit with a non

503
00:20:24,700 --> 00:20:29,769
error status code which means I can

504
00:20:27,669 --> 00:20:31,450
craft a certificate that would be

505
00:20:29,769 --> 00:20:35,200
completely malicious as long as I

506
00:20:31,450 --> 00:20:37,450
fulfill the first kind of issues it will

507
00:20:35,200 --> 00:20:40,539
not trigger any kind of alarm and it

508
00:20:37,450 --> 00:20:42,940
will fail out of the code with a correct

509
00:20:40,539 --> 00:20:44,889
status code with a verified and secure

510
00:20:42,940 --> 00:20:47,080
status code so this was a very

511
00:20:44,889 --> 00:20:49,508
interesting vulnerability in the sense

512
00:20:47,080 --> 00:20:51,668
that it's not that somebody did it

513
00:20:49,509 --> 00:20:53,649
maliciously most probably there are

514
00:20:51,669 --> 00:20:56,499
rumors about NSA doing stuff it's

515
00:20:53,649 --> 00:20:58,869
probably not true and someone just copy

516
00:20:56,499 --> 00:21:01,269
and pasted code based on the line and

517
00:20:58,869 --> 00:21:03,158
double pasted it and it's pretty not

518
00:21:01,269 --> 00:21:06,999
that easy to find out in code reviews

519
00:21:03,159 --> 00:21:09,339
etc that there's a double go to here but

520
00:21:06,999 --> 00:21:10,780
it has huge ramifications show you when

521
00:21:09,339 --> 00:21:12,370
you audit the code you are

522
00:21:10,780 --> 00:21:17,170
somebody can just bypass your entire

523
00:21:12,370 --> 00:21:20,350
mechanism okay

524
00:21:17,170 --> 00:21:22,390
another interesting aspect is BitLocker

525
00:21:20,350 --> 00:21:26,679
how many of you use BitLocker on your

526
00:21:22,390 --> 00:21:27,400
laptops do you enjoy it did you do it on

527
00:21:26,680 --> 00:21:31,420
purpose

528
00:21:27,400 --> 00:21:34,480
no I'm joking so a very interesting work

529
00:21:31,420 --> 00:21:36,760
was a work on a couple of different SSD

530
00:21:34,480 --> 00:21:39,430
vendors that supported the beach

531
00:21:36,760 --> 00:21:41,080
BitLocker or actually supported the an

532
00:21:39,430 --> 00:21:43,270
encryption scheme and BitLocker was

533
00:21:41,080 --> 00:21:45,699
using that encryption scheme and the way

534
00:21:43,270 --> 00:21:47,260
that it works is BitLocker we use the

535
00:21:45,700 --> 00:21:51,640
encryption on the hardware if it's

536
00:21:47,260 --> 00:21:53,620
available because a encryption closer to

537
00:21:51,640 --> 00:21:55,960
the hardware by hardware components is

538
00:21:53,620 --> 00:21:58,239
much faster than using CPU cycles to

539
00:21:55,960 --> 00:22:00,580
perform the same kind of work but there

540
00:21:58,240 --> 00:22:02,170
is an underlying assumption here sorry

541
00:22:00,580 --> 00:22:03,760
there is an underlying assumption here

542
00:22:02,170 --> 00:22:05,620
and that is that the code that's running

543
00:22:03,760 --> 00:22:08,710
on the piece of hardware on your SSD is

544
00:22:05,620 --> 00:22:10,629
secure so an very nice group of people

545
00:22:08,710 --> 00:22:13,420
looked into it and found that it wasn't

546
00:22:10,630 --> 00:22:16,030
less secure that you would assume so the

547
00:22:13,420 --> 00:22:18,220
password and the data encryption key

548
00:22:16,030 --> 00:22:19,690
were not linked basically meaning that

549
00:22:18,220 --> 00:22:23,260
there's no connection between the

550
00:22:19,690 --> 00:22:26,080
password that you're using to type into

551
00:22:23,260 --> 00:22:28,450
your BitLocker interface and the key

552
00:22:26,080 --> 00:22:31,330
that is used to encrypt your drive so if

553
00:22:28,450 --> 00:22:35,200
somebody can break your can just pull

554
00:22:31,330 --> 00:22:37,540
the image and look at their token at

555
00:22:35,200 --> 00:22:39,640
your key you can decrypt the entire

556
00:22:37,540 --> 00:22:41,260
Drive because it has no real implication

557
00:22:39,640 --> 00:22:43,780
and actually knowing the user password

558
00:22:41,260 --> 00:22:45,340
so the entire evil made attack or

559
00:22:43,780 --> 00:22:47,080
whatever you want to call it has no

560
00:22:45,340 --> 00:22:49,149
dependency of me understanding what your

561
00:22:47,080 --> 00:22:50,310
beat local password is it just doesn't

562
00:22:49,150 --> 00:22:52,900
matter

563
00:22:50,310 --> 00:22:55,090
another thing is the entire disk was

564
00:22:52,900 --> 00:22:56,650
being encrypted with the same key so

565
00:22:55,090 --> 00:23:00,100
that means that if I understood how to

566
00:22:56,650 --> 00:23:02,350
decrypt one file or one block I can

567
00:23:00,100 --> 00:23:06,969
understand how to keep the entire this

568
00:23:02,350 --> 00:23:09,550
all of the blocks and the most important

569
00:23:06,970 --> 00:23:13,270
thing is that the DK was not random

570
00:23:09,550 --> 00:23:16,149
it was predictably chosen and could be

571
00:23:13,270 --> 00:23:19,470
predictably scripted in order to

572
00:23:16,150 --> 00:23:22,320
understand well you have

573
00:23:19,470 --> 00:23:24,450
very nice this is d you use BitLocker on

574
00:23:22,320 --> 00:23:26,460
it but I don't need your password I just

575
00:23:24,450 --> 00:23:28,470
need to understand the key and the key

576
00:23:26,460 --> 00:23:31,169
is not random it is deterministic I can

577
00:23:28,470 --> 00:23:33,870
find out what it is it's tied to the

578
00:23:31,169 --> 00:23:35,940
hardware identifier such as your serial

579
00:23:33,870 --> 00:23:38,340
number and your model type stuff like

580
00:23:35,940 --> 00:23:40,980
that which means that if I have access

581
00:23:38,340 --> 00:23:44,428
to the device I can probably discern the

582
00:23:40,980 --> 00:23:46,200
key and decrypt the entire drive another

583
00:23:44,429 --> 00:23:47,700
thing which was very interesting was

584
00:23:46,200 --> 00:23:49,559
something that a feature called wear

585
00:23:47,700 --> 00:23:52,500
leavening this is more Hardware oriented

586
00:23:49,559 --> 00:23:55,440
how will you how do you prevent your SSD

587
00:23:52,500 --> 00:23:57,750
from wearing out what it means is if you

588
00:23:55,440 --> 00:23:59,370
write something into the disk and then

589
00:23:57,750 --> 00:24:01,289
you erase it and want to write it into

590
00:23:59,370 --> 00:24:03,029
somewhere else it will not overwrite the

591
00:24:01,289 --> 00:24:05,340
same space it will try to write into

592
00:24:03,029 --> 00:24:06,929
other spaces first which means that

593
00:24:05,340 --> 00:24:10,740
there are pieces in memory which were

594
00:24:06,929 --> 00:24:12,720
once holding secure content and there

595
00:24:10,740 --> 00:24:13,940
are arrays meaning there's no pointer

596
00:24:12,720 --> 00:24:16,769
pointing to them anymore

597
00:24:13,940 --> 00:24:18,899
but now I can go and read those values

598
00:24:16,769 --> 00:24:21,600
and they're still containing the

599
00:24:18,899 --> 00:24:23,789
passwords the keys that I want so this

600
00:24:21,600 --> 00:24:26,969
feature which was very beneficial from

601
00:24:23,789 --> 00:24:28,590
the disk where out kind of thing is very

602
00:24:26,970 --> 00:24:31,409
beneficial for security because now I

603
00:24:28,590 --> 00:24:35,639
can just go and read if the old password

604
00:24:31,409 --> 00:24:39,149
or stuff like that and of course the

605
00:24:35,639 --> 00:24:40,889
time-honored favorite just use zeros for

606
00:24:39,149 --> 00:24:43,918
password because that's always a good

607
00:24:40,889 --> 00:24:45,649
idea so what happened with the BitLocker

608
00:24:43,919 --> 00:24:48,029
is what that it was shown because

609
00:24:45,649 --> 00:24:50,549
BitLocker preferred to work with

610
00:24:48,029 --> 00:24:53,279
whatever the hardware device was

611
00:24:50,549 --> 00:24:55,110
offering it was often less secure than

612
00:24:53,279 --> 00:24:57,480
it was actually using the same doing the

613
00:24:55,110 --> 00:24:59,100
same thing in software and the software

614
00:24:57,480 --> 00:25:01,649
implementation of BitLocker was actually

615
00:24:59,100 --> 00:25:06,269
pretty good but it was not used because

616
00:25:01,649 --> 00:25:09,479
there is a flag use Hardware first okay

617
00:25:06,269 --> 00:25:13,169
another example and this is just a funny

618
00:25:09,480 --> 00:25:15,539
one there's a sorry there is a very nice

619
00:25:13,169 --> 00:25:18,299
utility which I currently forgot it's

620
00:25:15,539 --> 00:25:21,450
name I'll talk about it in a moment but

621
00:25:18,299 --> 00:25:24,509
somebody had a discussion on Twitter on

622
00:25:21,450 --> 00:25:26,879
LinkedIn I think it was probably from

623
00:25:24,509 --> 00:25:29,970
the GUI and they had a discussion about

624
00:25:26,879 --> 00:25:32,120
should you use md5 to hash password yes

625
00:25:29,970 --> 00:25:34,850
or no pros and cons and

626
00:25:32,120 --> 00:25:36,709
this bright young fellow just suggested

627
00:25:34,850 --> 00:25:38,810
I have a better scheme it's much more

628
00:25:36,710 --> 00:25:41,110
performant just do this so I'll just in

629
00:25:38,810 --> 00:25:44,080
largest to make it easier for you so

630
00:25:41,110 --> 00:25:47,389
basically the scheme he suggested was

631
00:25:44,080 --> 00:25:49,100
take the input base64-encoded

632
00:25:47,390 --> 00:25:52,640
or as people like to call it bakes this

633
00:25:49,100 --> 00:25:54,679
before encrypt it reverse the order of

634
00:25:52,640 --> 00:25:58,610
the characters and now you have an

635
00:25:54,680 --> 00:26:00,350
encryption scheme that was seriously

636
00:25:58,610 --> 00:26:04,159
that was the offer on the on the table

637
00:26:00,350 --> 00:26:07,310
and he was pretty badly scathed

638
00:26:04,160 --> 00:26:09,710
for that unprofessional remark but my

639
00:26:07,310 --> 00:26:11,960
point is that if you frequent Stack

640
00:26:09,710 --> 00:26:15,050
Overflow or other places there are a lot

641
00:26:11,960 --> 00:26:17,930
of non security cryptography advice

642
00:26:15,050 --> 00:26:20,240
floating around and relatively few

643
00:26:17,930 --> 00:26:23,420
places we can get solid good advice of

644
00:26:20,240 --> 00:26:25,840
how to actually perform and implement in

645
00:26:23,420 --> 00:26:27,560
news cryptography correctly and

646
00:26:25,840 --> 00:26:29,990
unfortunately there are a lot of places

647
00:26:27,560 --> 00:26:33,230
that you can do this wrong even if you

648
00:26:29,990 --> 00:26:34,610
had the best of intentions so the two

649
00:26:33,230 --> 00:26:37,220
lata he was trying to remember the name

650
00:26:34,610 --> 00:26:39,350
earlier was called crypt hawk crypt hook

651
00:26:37,220 --> 00:26:41,240
was actually a very nice concept it said

652
00:26:39,350 --> 00:26:43,070
I want to provide security two pieces of

653
00:26:41,240 --> 00:26:45,680
software where I don't have any way to

654
00:26:43,070 --> 00:26:47,240
over there in to change their code so

655
00:26:45,680 --> 00:26:49,700
what I'll do I just hook the system

656
00:26:47,240 --> 00:26:51,980
calls on the network the network system

657
00:26:49,700 --> 00:26:54,970
calls and I will encrypt the traffic

658
00:26:51,980 --> 00:26:59,180
going from the client to the server

659
00:26:54,970 --> 00:27:01,460
wrapping around the original software

660
00:26:59,180 --> 00:27:03,710
which has no security capabilities so

661
00:27:01,460 --> 00:27:05,930
that was the basic concept it's not that

662
00:27:03,710 --> 00:27:11,390
bad and they were using something called

663
00:27:05,930 --> 00:27:14,840
GCM Galois counter mode and they used a

664
00:27:11,390 --> 00:27:16,850
fixed key to do so so they use the same

665
00:27:14,840 --> 00:27:19,310
key they did not use sequence numbers

666
00:27:16,850 --> 00:27:21,409
and they really did the bare minimum to

667
00:27:19,310 --> 00:27:23,929
actually get the code to work without

668
00:27:21,410 --> 00:27:25,490
giving a lot of thought of to the what

669
00:27:23,930 --> 00:27:27,230
would it mean that you dropped all of

670
00:27:25,490 --> 00:27:29,600
those options that you selected these

671
00:27:27,230 --> 00:27:31,760
options instead and what happened was

672
00:27:29,600 --> 00:27:33,469
that you don't have sequence numbers it

673
00:27:31,760 --> 00:27:35,600
means that I can take any kind of packet

674
00:27:33,470 --> 00:27:36,950
from the network send it again and it

675
00:27:35,600 --> 00:27:38,629
would be accepted because there are no

676
00:27:36,950 --> 00:27:40,790
sequence numbers there's no way to tell

677
00:27:38,630 --> 00:27:45,020
what kind of order the packet should've

678
00:27:40,790 --> 00:27:47,899
arrived in I could also change the order

679
00:27:45,020 --> 00:27:50,179
of the messages I can curate sequence by

680
00:27:47,900 --> 00:27:54,080
my control that will have a completely

681
00:27:50,179 --> 00:27:56,120
different meaning just a small example

682
00:27:54,080 --> 00:27:58,399
here there's a big difference from your

683
00:27:56,120 --> 00:28:00,678
bank account Kay kind of let's assume

684
00:27:58,400 --> 00:28:02,179
that your balance is the $100 and you

685
00:28:00,679 --> 00:28:04,760
have two transactions coming in the

686
00:28:02,179 --> 00:28:07,970
first one is plus $500 and the second

687
00:28:04,760 --> 00:28:10,220
one is minus 500 dollars so if the order

688
00:28:07,970 --> 00:28:11,480
of the transaction is first add 500 and

689
00:28:10,220 --> 00:28:13,429
then subtract 100

690
00:28:11,480 --> 00:28:15,770
you're good you're in the clear but if

691
00:28:13,429 --> 00:28:19,460
you had $100 and you first had subtract

692
00:28:15,770 --> 00:28:21,410
$500 now you're in debt for $400 and now

693
00:28:19,460 --> 00:28:23,900
you had 500 s comes in you're back in

694
00:28:21,410 --> 00:28:26,270
the green for $100 except now you will

695
00:28:23,900 --> 00:28:29,150
have to pay the bank some fees because

696
00:28:26,270 --> 00:28:31,400
you're overdrawn and by the way this is

697
00:28:29,150 --> 00:28:33,260
a cool little trick done by banks in

698
00:28:31,400 --> 00:28:35,929
order to increase their margins so

699
00:28:33,260 --> 00:28:38,090
whenever they have a lot of transactions

700
00:28:35,929 --> 00:28:42,890
coming in they will order this in a way

701
00:28:38,090 --> 00:28:45,110
that will usually benefit them also you

702
00:28:42,890 --> 00:28:46,550
can always drop specific messages if you

703
00:28:45,110 --> 00:28:48,199
know what the message is supposed to be

704
00:28:46,550 --> 00:28:49,820
because of the order the origin message

705
00:28:48,200 --> 00:28:51,260
is supposed to be you know you have

706
00:28:49,820 --> 00:28:53,780
transaction a transaction B and

707
00:28:51,260 --> 00:28:57,230
verification drop the verification see

708
00:28:53,780 --> 00:28:59,210
what happens if multiple and there was

709
00:28:57,230 --> 00:29:02,090
no session key and this is a bit tricky

710
00:28:59,210 --> 00:29:04,280
but what it means is that because the

711
00:29:02,090 --> 00:29:06,649
key was fixed for all sessions it means

712
00:29:04,280 --> 00:29:09,050
I can decrypt all of the sessions at any

713
00:29:06,650 --> 00:29:11,090
time the check the key would not change

714
00:29:09,050 --> 00:29:14,000
from session to session which means that

715
00:29:11,090 --> 00:29:15,559
if I recorded all of the traffic and it

716
00:29:14,000 --> 00:29:17,330
took me six months to analyze what

717
00:29:15,559 --> 00:29:19,040
happened I would understand what

718
00:29:17,330 --> 00:29:20,840
happened not only from the original

719
00:29:19,040 --> 00:29:22,820
content that was analyzing but for any

720
00:29:20,840 --> 00:29:24,320
Content that I recorded since because

721
00:29:22,820 --> 00:29:29,870
it's always using the same kind of key

722
00:29:24,320 --> 00:29:32,510
so no forward secrecy is a big issue so

723
00:29:29,870 --> 00:29:35,809
to wrap this up is everything on fire

724
00:29:32,510 --> 00:29:39,650
are we facing the dumpster fire of that

725
00:29:35,809 --> 00:29:42,080
for security so probably not but we

726
00:29:39,650 --> 00:29:44,960
could do better so in order to do better

727
00:29:42,080 --> 00:29:47,210
I suggest the following the first role

728
00:29:44,960 --> 00:29:48,380
the first rule of engagement the first

729
00:29:47,210 --> 00:29:50,780
thing that you should have everybody

730
00:29:48,380 --> 00:29:53,030
tattooed whenever they try for the first

731
00:29:50,780 --> 00:29:55,610
time is never roll your own crypto

732
00:29:53,030 --> 00:29:58,260
rewriting cryptography software is very

733
00:29:55,610 --> 00:30:00,240
very difficult it's prone to mistakes

734
00:29:58,260 --> 00:30:02,010
it's prone to mistakes on a math level

735
00:30:00,240 --> 00:30:05,580
it's prone to mistakes on coding level

736
00:30:02,010 --> 00:30:08,549
but also it's difficult sorry it's

737
00:30:05,580 --> 00:30:10,649
difficult because using cryptography

738
00:30:08,549 --> 00:30:13,200
correctly even if the code is 100

739
00:30:10,650 --> 00:30:15,450
percent correct using it with the right

740
00:30:13,200 --> 00:30:17,790
kind of parameters the right kind of the

741
00:30:15,450 --> 00:30:19,860
API selection the right kind of orders

742
00:30:17,790 --> 00:30:22,200
to do things is also important and

743
00:30:19,860 --> 00:30:25,530
usually people don't know how to do that

744
00:30:22,200 --> 00:30:27,210
so they resort to copy paste from stack

745
00:30:25,530 --> 00:30:29,460
over changers play other places or

746
00:30:27,210 --> 00:30:31,140
google search for blogs which might have

747
00:30:29,460 --> 00:30:34,110
good information or bad information and

748
00:30:31,140 --> 00:30:37,140
incorporate that into their code which

749
00:30:34,110 --> 00:30:39,059
is not a very good practice so where can

750
00:30:37,140 --> 00:30:41,760
you get answers the first place that I

751
00:30:39,059 --> 00:30:43,770
recommend is the subreddit for crypto

752
00:30:41,760 --> 00:30:47,429
they're very serious people and they do

753
00:30:43,770 --> 00:30:49,559
answer questions if you have questions

754
00:30:47,429 --> 00:30:51,660
that need answered also you can go to

755
00:30:49,559 --> 00:30:53,730
their crypto Stack Exchange not for the

756
00:30:51,660 --> 00:30:55,770
nodejs the keychain asking quick crypto

757
00:30:53,730 --> 00:30:57,990
questions go to the crypto Stack

758
00:30:55,770 --> 00:31:00,720
Exchange and a script of questions there

759
00:30:57,990 --> 00:31:03,059
also you can have higher key photography

760
00:31:00,720 --> 00:31:05,400
review firm hire consultants ask experts

761
00:31:03,059 --> 00:31:10,190
just don't don't do this on your own ask

762
00:31:05,400 --> 00:31:13,370
someone who understand how this works a

763
00:31:10,190 --> 00:31:15,929
couple of other suggestions that I have

764
00:31:13,370 --> 00:31:17,969
you're using libraries you're using

765
00:31:15,929 --> 00:31:19,470
libraries that have dependencies one of

766
00:31:17,970 --> 00:31:21,360
those libraries summer is going to

767
00:31:19,470 --> 00:31:24,030
depend on the crypto library it's almost

768
00:31:21,360 --> 00:31:25,979
guaranteed make sure that you understand

769
00:31:24,030 --> 00:31:28,139
what your dependencies are and are they

770
00:31:25,980 --> 00:31:31,400
are they dependent on something strong

771
00:31:28,140 --> 00:31:34,380
and reliable I've listed a selection of

772
00:31:31,400 --> 00:31:36,780
libraries on the right hand I recommend

773
00:31:34,380 --> 00:31:39,419
the top three I have issues with the

774
00:31:36,780 --> 00:31:41,879
bottom three specifically you should

775
00:31:39,419 --> 00:31:43,380
take into account that photography

776
00:31:41,880 --> 00:31:46,080
libraries like any other kind of

777
00:31:43,380 --> 00:31:48,120
software has issues as bugs have

778
00:31:46,080 --> 00:31:49,740
vulnerabilities you have to track them

779
00:31:48,120 --> 00:31:51,840
you have to understand that and you have

780
00:31:49,740 --> 00:31:53,820
to patch and upgrade them as needed

781
00:31:51,840 --> 00:31:56,129
don't take into granda that because

782
00:31:53,820 --> 00:31:57,629
you're using some NPM package that you'd

783
00:31:56,130 --> 00:32:02,400
come with the latest kind of crypto

784
00:31:57,630 --> 00:32:05,130
don't assume that check that also I

785
00:32:02,400 --> 00:32:07,080
don't recommend using open SSL some

786
00:32:05,130 --> 00:32:09,419
people really love open SSL I don't know

787
00:32:07,080 --> 00:32:10,620
why basically I think that they never

788
00:32:09,419 --> 00:32:12,090
experience like

789
00:32:10,620 --> 00:32:15,360
good life or something like that and

790
00:32:12,090 --> 00:32:17,550
they are masochists heart use any any

791
00:32:15,360 --> 00:32:21,090
other library it probably make your life

792
00:32:17,550 --> 00:32:24,480
much better boring SSL is by Google very

793
00:32:21,090 --> 00:32:27,149
strong library I'm very fond of it the

794
00:32:24,480 --> 00:32:29,520
crypto language the lik crypto library

795
00:32:27,150 --> 00:32:31,650
from Golan is also very very strong very

796
00:32:29,520 --> 00:32:35,309
good you can learn a lot from looking at

797
00:32:31,650 --> 00:32:39,120
what they've done NXT NXT Ln Lib sodium

798
00:32:35,309 --> 00:32:41,070
are also very strong choices wolf SSL is

799
00:32:39,120 --> 00:32:43,350
a commercial product but they have an

800
00:32:41,070 --> 00:32:45,480
open-source kind of thing as well

801
00:32:43,350 --> 00:32:52,290
look look around you can find other

802
00:32:45,480 --> 00:32:54,770
alternatives what else if you can

803
00:32:52,290 --> 00:32:57,899
outsource this to people who know better

804
00:32:54,770 --> 00:33:00,179
at least the cryptography part to make

805
00:32:57,900 --> 00:33:03,179
sure that you are vetted correctly you

806
00:33:00,179 --> 00:33:05,220
can also look up at vetting reports that

807
00:33:03,179 --> 00:33:06,570
are out there for example the a couple

808
00:33:05,220 --> 00:33:08,280
of firms that are releasing whenever

809
00:33:06,570 --> 00:33:10,740
they are auditing a piece of software

810
00:33:08,280 --> 00:33:12,960
that will release the audit report look

811
00:33:10,740 --> 00:33:15,390
it up read it you will learn a lot of

812
00:33:12,960 --> 00:33:17,610
ways that attackers are looking at

813
00:33:15,390 --> 00:33:19,980
cryptography in order to think will this

814
00:33:17,610 --> 00:33:21,270
be relevant for my organization probably

815
00:33:19,980 --> 00:33:25,710
it will be relevant for your

816
00:33:21,270 --> 00:33:27,929
organization so look it up to conclude

817
00:33:25,710 --> 00:33:29,220
if you have any questions I'd be happy

818
00:33:27,929 --> 00:33:30,929
to answer at least point you in the

819
00:33:29,220 --> 00:33:34,050
right direction if not give you more

820
00:33:30,929 --> 00:33:36,990
than that and I do recommend very highly

821
00:33:34,050 --> 00:33:38,879
that you take your photography not

822
00:33:36,990 --> 00:33:40,679
seriously not everybody has to be a math

823
00:33:38,880 --> 00:33:42,090
expert but you just read up about it

824
00:33:40,679 --> 00:33:44,370
where are the pitfalls where are the

825
00:33:42,090 --> 00:33:46,409
issues because at the end this is one of

826
00:33:44,370 --> 00:33:48,270
the biggest things that can happen to

827
00:33:46,410 --> 00:33:50,490
software if you assume that crypto works

828
00:33:48,270 --> 00:33:56,200
and it doesn't thank you

829
00:33:50,490 --> 00:33:56,200
[Applause]

