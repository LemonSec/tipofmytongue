1
00:00:06,410 --> 00:00:09,950
[Music]

2
00:00:08,360 --> 00:00:12,350
thanks everyone for<font color="#E5E5E5"> coming after lunch</font>

3
00:00:09,950 --> 00:00:14,450
<font color="#CCCCCC">so today I'm going</font><font color="#E5E5E5"> to talk about</font>

4
00:00:12,350 --> 00:00:17,570
detecting<font color="#E5E5E5"> curtains for compromise in AWS</font>

5
00:00:14,450 --> 00:00:19,220
<font color="#E5E5E5">but also going to then pivot after we</font>

6
00:00:17,570 --> 00:00:20,450
talk<font color="#CCCCCC"> about how to detect</font><font color="#E5E5E5"> that compromise</font>

7
00:00:19,220 --> 00:00:23,090
and talk<font color="#CCCCCC"> about how we can actually</font>

8
00:00:20,450 --> 00:00:24,770
<font color="#E5E5E5">prevent it</font><font color="#CCCCCC"> from the get-go so if you</font>

9
00:00:23,090 --> 00:00:27,198
were in the talk yesterday<font color="#E5E5E5"> that I was</font>

10
00:00:24,770 --> 00:00:29,539
<font color="#CCCCCC">joined with Travis mcpeak I introduced</font>

11
00:00:27,199 --> 00:00:31,430
some<font color="#CCCCCC"> of these concepts about how you</font>

12
00:00:29,539 --> 00:00:33,769
could do some<font color="#E5E5E5"> sort of API protection</font>

13
00:00:31,430 --> 00:00:34,730
<font color="#E5E5E5">protect your metadata service and so</font>

14
00:00:33,769 --> 00:00:37,489
today we're<font color="#E5E5E5"> actually going to deep dive</font>

15
00:00:34,730 --> 00:00:40,370
<font color="#CCCCCC">into those topics and get a</font><font color="#E5E5E5"> little more</font>

16
00:00:37,489 --> 00:00:42,409
detail<font color="#CCCCCC"> and</font><font color="#E5E5E5"> how what what sources were</font>

17
00:00:40,370 --> 00:00:44,690
using for detecting the<font color="#CCCCCC"> compromise</font><font color="#E5E5E5"> and</font>

18
00:00:42,409 --> 00:00:46,760
how we took that and<font color="#E5E5E5"> then decided well</font>

19
00:00:44,690 --> 00:00:49,190
that's not good enough let's pivot<font color="#E5E5E5"> and</font>

20
00:00:46,760 --> 00:00:50,659
<font color="#E5E5E5">try to prevent that but for those</font><font color="#CCCCCC"> that</font>

21
00:00:49,190 --> 00:00:53,119
don't know<font color="#E5E5E5"> I'm will bingston</font>

22
00:00:50,659 --> 00:00:54,589
I am a senior security<font color="#E5E5E5"> engineer on the</font>

23
00:00:53,119 --> 00:00:57,229
cloud infrastructure security<font color="#CCCCCC"> team at</font>

24
00:00:54,589 --> 00:00:59,949
<font color="#E5E5E5">Netflix our team's mission is to protect</font>

25
00:00:57,229 --> 00:01:02,720
<font color="#E5E5E5">the</font><font color="#CCCCCC"> infrastructure security of Netflix</font>

26
00:00:59,949 --> 00:01:06,020
<font color="#E5E5E5">throughout all</font><font color="#CCCCCC"> of our accounts our</font>

27
00:01:02,720 --> 00:01:08,119
environments within AWS mainly and my

28
00:01:06,020 --> 00:01:10,399
team's main goal is protecting<font color="#E5E5E5"> that the</font>

29
00:01:08,119 --> 00:01:12,320
<font color="#E5E5E5">ultimate low level piece of AWS and</font>

30
00:01:10,400 --> 00:01:13,940
that's the credential where everything

31
00:01:12,320 --> 00:01:15,789
starts is the permission<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's</font>

32
00:01:13,940 --> 00:01:18,710
where we're gonna<font color="#E5E5E5"> be</font><font color="#CCCCCC"> focusing</font><font color="#E5E5E5"> today</font><font color="#CCCCCC"> I</font>

33
00:01:15,790 --> 00:01:21,470
want to first<font color="#E5E5E5"> just start and say this is</font>

34
00:01:18,710 --> 00:01:23,179
<font color="#E5E5E5">not a complex machine learning</font><font color="#CCCCCC"> Talk</font>

35
00:01:21,470 --> 00:01:25,460
I don't have<font color="#E5E5E5"> these like really advanced</font>

36
00:01:23,180 --> 00:01:27,530
models I'm not a data scientist<font color="#CCCCCC"> I'm just</font>

37
00:01:25,460 --> 00:01:30,649
a security<font color="#CCCCCC"> person that happens to find</font>

38
00:01:27,530 --> 00:01:32,540
data<font color="#E5E5E5"> very interesting</font><font color="#CCCCCC"> we just set the</font>

39
00:01:30,650 --> 00:01:34,280
<font color="#CCCCCC">mood for everyone so I hope everyone</font>

40
00:01:32,540 --> 00:01:38,330
likes<font color="#E5E5E5"> it dark in here</font><font color="#CCCCCC"> because we're</font>

41
00:01:34,280 --> 00:01:40,159
<font color="#E5E5E5">gonna go deep but we're</font><font color="#CCCCCC"> it's I've</font><font color="#E5E5E5"> been</font>

42
00:01:38,330 --> 00:01:42,320
corrected and<font color="#E5E5E5"> someone has actually told</font>

43
00:01:40,159 --> 00:01:44,090
<font color="#E5E5E5">me this is machine learning because you</font>

44
00:01:42,320 --> 00:01:46,789
it's unsupervised it kind<font color="#E5E5E5"> of learns as</font>

45
00:01:44,090 --> 00:01:48,770
you go but<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can take it call it what</font>

46
00:01:46,790 --> 00:01:51,310
you want<font color="#CCCCCC"> but today we're</font><font color="#E5E5E5"> going to talk</font>

47
00:01:48,770 --> 00:01:54,229
about<font color="#E5E5E5"> how you detect compromise in AWS</font>

48
00:01:51,310 --> 00:01:57,140
so the scope of the detection piece of

49
00:01:54,229 --> 00:01:58,970
<font color="#E5E5E5">this talk is detecting compromised AWS</font>

50
00:01:57,140 --> 00:02:01,970
instance credentials<font color="#E5E5E5"> and so if you're</font>

51
00:01:58,970 --> 00:02:04,610
not<font color="#E5E5E5"> familiar instance credentials in AWS</font>

52
00:02:01,970 --> 00:02:07,548
are short short-lived<font color="#E5E5E5"> keys they're</font>

53
00:02:04,610 --> 00:02:10,008
anywhere<font color="#CCCCCC"> from 1 to 6 hours lived they</font>

54
00:02:07,549 --> 00:02:13,549
are issued<font color="#E5E5E5"> by the service for you</font><font color="#CCCCCC"> and</font>

55
00:02:10,008 --> 00:02:16,760
rotated automatically<font color="#E5E5E5"> the security token</font>

56
00:02:13,549 --> 00:02:18,440
<font color="#CCCCCC">service STS in AWS is what's actually</font>

57
00:02:16,760 --> 00:02:20,630
providing these<font color="#E5E5E5"> temporary credentials</font>

58
00:02:18,440 --> 00:02:21,920
<font color="#CCCCCC">and they're being provided based on</font><font color="#E5E5E5"> the</font>

59
00:02:20,630 --> 00:02:23,870
actual<font color="#CCCCCC"> iam role</font>

60
00:02:21,920 --> 00:02:26,839
that you provide to<font color="#E5E5E5"> your instance when</font>

61
00:02:23,870 --> 00:02:30,080
you<font color="#CCCCCC"> actually deploy</font><font color="#E5E5E5"> so you can use this</font>

62
00:02:26,840 --> 00:02:31,490
within the ec2 world or as well if

63
00:02:30,080 --> 00:02:33,230
you're just<font color="#E5E5E5"> creating</font><font color="#CCCCCC"> temporary</font>

64
00:02:31,490 --> 00:02:36,170
credentials<font color="#E5E5E5"> for</font><font color="#CCCCCC"> your users within</font><font color="#E5E5E5"> your</font>

65
00:02:33,230 --> 00:02:38,869
<font color="#E5E5E5">environment</font><font color="#CCCCCC"> you can also use this</font><font color="#E5E5E5"> STS</font>

66
00:02:36,170 --> 00:02:42,500
service it's<font color="#CCCCCC"> therefore</font><font color="#E5E5E5"> for you</font>

67
00:02:38,870 --> 00:02:45,500
I believe it's 15 minutes<font color="#CCCCCC"> up to 36 hours</font>

68
00:02:42,500 --> 00:02:47,209
depending on<font color="#E5E5E5"> how you actually</font><font color="#CCCCCC"> Federation</font>

69
00:02:45,500 --> 00:02:50,300
to the STS service on how you can<font color="#E5E5E5"> issue</font>

70
00:02:47,209 --> 00:02:51,380
those but<font color="#E5E5E5"> mainly within ec2 it's</font><font color="#CCCCCC"> 1 to 6</font>

71
00:02:50,300 --> 00:02:53,900
hours<font color="#CCCCCC"> that you're going</font><font color="#E5E5E5"> to see these</font>

72
00:02:51,380 --> 00:02:55,220
<font color="#E5E5E5">credentials lived and hopefully AWS</font>

73
00:02:53,900 --> 00:02:56,780
keeps up and rotates<font color="#CCCCCC"> us for you</font>

74
00:02:55,220 --> 00:02:58,940
automatically<font color="#E5E5E5"> so we're going to be</font>

75
00:02:56,780 --> 00:03:02,630
focusing mainly on these types of

76
00:02:58,940 --> 00:03:04,489
<font color="#E5E5E5">credentials around the ec2 world but you</font>

77
00:03:02,630 --> 00:03:06,829
can apply this methodology<font color="#E5E5E5"> across</font>

78
00:03:04,489 --> 00:03:08,570
containers or any other means that<font color="#E5E5E5"> you</font>

79
00:03:06,830 --> 00:03:12,110
can<font color="#E5E5E5"> control how credentials are actually</font>

80
00:03:08,570 --> 00:03:13,940
issued in<font color="#CCCCCC"> your environment</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> what's the</font>

81
00:03:12,110 --> 00:03:17,000
problem<font color="#CCCCCC"> we have all these</font><font color="#E5E5E5"> credentials</font>

82
00:03:13,940 --> 00:03:18,829
<font color="#E5E5E5">moving</font><font color="#CCCCCC"> at throughout our environment by</font>

83
00:03:17,000 --> 00:03:21,680
<font color="#E5E5E5">default in AWS when a</font><font color="#CCCCCC"> Corrine chill is</font>

84
00:03:18,830 --> 00:03:24,200
<font color="#E5E5E5">issued it's issued and available to the</font>

85
00:03:21,680 --> 00:03:25,880
world<font color="#CCCCCC"> Amazon makes it very easy</font><font color="#E5E5E5"> for you</font>

86
00:03:24,200 --> 00:03:28,010
to<font color="#E5E5E5"> operate in the cloud in</font><font color="#CCCCCC"> that</font>

87
00:03:25,880 --> 00:03:29,810
everything<font color="#E5E5E5"> works from everywhere so when</font>

88
00:03:28,010 --> 00:03:31,340
you craft a credential<font color="#E5E5E5"> it's valid from</font>

89
00:03:29,810 --> 00:03:33,739
my<font color="#CCCCCC"> machine from your server from other</font>

90
00:03:31,340 --> 00:03:34,610
servers<font color="#CCCCCC"> wherever you</font><font color="#E5E5E5"> want so that's a</font>

91
00:03:33,739 --> 00:03:36,950
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> that we're trying to</font><font color="#E5E5E5"> address</font>

92
00:03:34,610 --> 00:03:39,890
<font color="#E5E5E5">today is how do we detect when a</font>

93
00:03:36,950 --> 00:03:42,230
credential<font color="#CCCCCC"> issue</font><font color="#E5E5E5"> to Netflix or to slack</font>

94
00:03:39,890 --> 00:03:45,140
or any other provider running an AWS is

95
00:03:42,230 --> 00:03:46,548
only valid<font color="#E5E5E5"> in</font><font color="#CCCCCC"> that environment how do</font>

96
00:03:45,140 --> 00:03:49,279
you detect when it's<font color="#E5E5E5"> actually being</font><font color="#CCCCCC"> used</font>

97
00:03:46,549 --> 00:03:51,410
outside<font color="#E5E5E5"> and today we're gonna focus on</font>

98
00:03:49,280 --> 00:03:54,019
how do<font color="#E5E5E5"> you detect when it's used from</font>

99
00:03:51,410 --> 00:03:57,739
the attackers AWS account and not<font color="#E5E5E5"> just</font>

100
00:03:54,019 --> 00:04:00,440
an attackers laptop from<font color="#E5E5E5"> their house so</font>

101
00:03:57,739 --> 00:04:02,360
who's doing<font color="#E5E5E5"> this well I still haven't</font>

102
00:04:00,440 --> 00:04:04,190
<font color="#E5E5E5">seen</font><font color="#CCCCCC"> anything public</font><font color="#E5E5E5"> that I know about</font>

103
00:04:02,360 --> 00:04:06,350
<font color="#E5E5E5">that where they're detecting this kind</font>

104
00:04:04,190 --> 00:04:08,540
<font color="#CCCCCC">of type</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> compromised</font><font color="#E5E5E5"> as well and as on</font>

105
00:04:06,350 --> 00:04:10,190
guard duty is doing some detections<font color="#E5E5E5"> but</font>

106
00:04:08,540 --> 00:04:12,380
they're doing detections of outside of

107
00:04:10,190 --> 00:04:15,170
AWS<font color="#E5E5E5"> and so if you</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> of the scope of</font>

108
00:04:12,380 --> 00:04:17,390
AWS that's rather large as I mentioned

109
00:04:15,170 --> 00:04:19,849
just<font color="#CCCCCC"> now there's multiple players</font><font color="#E5E5E5"> in the</font>

110
00:04:17,390 --> 00:04:22,099
game<font color="#CCCCCC"> Netflix</font><font color="#E5E5E5"> slack many many other</font>

111
00:04:19,850 --> 00:04:24,950
<font color="#CCCCCC">people were actually using AWS including</font>

112
00:04:22,100 --> 00:04:27,410
the attackers<font color="#E5E5E5"> and so we wanted to</font>

113
00:04:24,950 --> 00:04:29,599
<font color="#CCCCCC">actually detect outside of our</font>

114
00:04:27,410 --> 00:04:32,450
environment within AWS knowing that a

115
00:04:29,600 --> 00:04:34,340
<font color="#E5E5E5">TBS is very large most companies operate</font>

116
00:04:32,450 --> 00:04:35,539
there including<font color="#E5E5E5"> the attackers we wanted</font>

117
00:04:34,340 --> 00:04:37,070
<font color="#E5E5E5">to really narrow down</font>

118
00:04:35,540 --> 00:04:38,780
and know when our<font color="#E5E5E5"> credentials are</font>

119
00:04:37,070 --> 00:04:41,120
actually being<font color="#E5E5E5"> used outside of our</font>

120
00:04:38,780 --> 00:04:44,299
environment<font color="#CCCCCC"> and so that's where we're</font>

121
00:04:41,120 --> 00:04:47,150
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to solve this and why is it so</font>

122
00:04:44,300 --> 00:04:50,210
hard<font color="#E5E5E5"> well at Netflix it's very very hard</font>

123
00:04:47,150 --> 00:04:52,159
for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> just due to our scale we</font><font color="#CCCCCC"> are very</font>

124
00:04:50,210 --> 00:04:54,080
large<font color="#CCCCCC"> I don't know if we are the largest</font>

125
00:04:52,160 --> 00:04:55,880
deployment still in AWS but<font color="#E5E5E5"> we have</font>

126
00:04:54,080 --> 00:04:57,469
hundreds<font color="#E5E5E5"> of thousands of instances at</font>

127
00:04:55,880 --> 00:05:00,020
any given time in our environment

128
00:04:57,470 --> 00:05:01,940
if you've ever operated an AWS there's

129
00:05:00,020 --> 00:05:04,219
things<font color="#E5E5E5"> called rate limits and rate</font>

130
00:05:01,940 --> 00:05:06,200
limits are<font color="#E5E5E5"> as essentially what AWS is</font>

131
00:05:04,220 --> 00:05:08,750
using to<font color="#CCCCCC"> protect their</font><font color="#E5E5E5"> API so that they</font>

132
00:05:06,200 --> 00:05:10,070
can service every customer in order<font color="#E5E5E5"> for</font>

133
00:05:08,750 --> 00:05:11,690
<font color="#CCCCCC">us to</font><font color="#E5E5E5"> describe our production</font>

134
00:05:10,070 --> 00:05:14,240
environment<font color="#E5E5E5"> in the three regions that we</font>

135
00:05:11,690 --> 00:05:16,400
operate<font color="#E5E5E5"> in it can take us an hour</font><font color="#CCCCCC"> to</font>

136
00:05:14,240 --> 00:05:17,810
describe every server running<font color="#E5E5E5"> so if you</font>

137
00:05:16,400 --> 00:05:19,400
think<font color="#E5E5E5"> about trying to constantly</font>

138
00:05:17,810 --> 00:05:21,860
describe those IP addresses<font color="#CCCCCC"> in our</font>

139
00:05:19,400 --> 00:05:25,549
environment to see<font color="#E5E5E5"> are any calls being</font>

140
00:05:21,860 --> 00:05:28,370
made outside<font color="#CCCCCC"> of Netflix AWS</font><font color="#E5E5E5"> it can take</font>

141
00:05:25,550 --> 00:05:30,020
very very<font color="#E5E5E5"> long to get that and if you</font>

142
00:05:28,370 --> 00:05:32,150
think of<font color="#E5E5E5"> how dynamic our environment is</font>

143
00:05:30,020 --> 00:05:34,340
it's a constant change<font color="#E5E5E5"> of IP address</font>

144
00:05:32,150 --> 00:05:37,520
that<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> to constantly be</font><font color="#E5E5E5"> aware of</font>

145
00:05:34,340 --> 00:05:39,109
<font color="#E5E5E5">to correlate back to the data that we're</font>

146
00:05:37,520 --> 00:05:40,880
actually trying<font color="#E5E5E5"> to figure that a</font>

147
00:05:39,110 --> 00:05:42,740
credential get used outs of our

148
00:05:40,880 --> 00:05:44,810
environment<font color="#E5E5E5"> and so it's</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> hard</font><font color="#CCCCCC"> for us</font>

149
00:05:42,740 --> 00:05:47,300
<font color="#CCCCCC">- at any given moment any given second</font>

150
00:05:44,810 --> 00:05:49,340
<font color="#E5E5E5">know exactly what IP is we might have</font>

151
00:05:47,300 --> 00:05:52,400
had<font color="#E5E5E5"> in our environment</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we might</font>

152
00:05:49,340 --> 00:05:54,739
<font color="#E5E5E5">have missed something</font><font color="#CCCCCC"> and so I needed</font><font color="#E5E5E5"> to</font>

153
00:05:52,400 --> 00:05:57,020
try<font color="#E5E5E5"> to focus this solution outside of I</font>

154
00:05:54,740 --> 00:05:58,760
will<font color="#E5E5E5"> never know or with the assumption</font>

155
00:05:57,020 --> 00:06:03,409
that I will<font color="#E5E5E5"> never know the IP space in</font>

156
00:05:58,760 --> 00:06:05,000
my cloud so the tool<font color="#CCCCCC"> that we're actually</font>

157
00:06:03,410 --> 00:06:08,030
<font color="#E5E5E5">going to use</font><font color="#CCCCCC"> today for this</font><font color="#E5E5E5"> detection</font>

158
00:06:05,000 --> 00:06:11,990
mechanism is something that cloud AWS

159
00:06:08,030 --> 00:06:14,719
offers for<font color="#E5E5E5"> free</font><font color="#CCCCCC"> is called cloud trail it</font>

160
00:06:11,990 --> 00:06:17,720
is now enabled<font color="#E5E5E5"> by default and everyone's</font>

161
00:06:14,720 --> 00:06:20,090
account<font color="#E5E5E5"> in the console for 90 days</font><font color="#CCCCCC"> or I</font>

162
00:06:17,720 --> 00:06:22,490
guess previous 90 day access you can<font color="#E5E5E5"> see</font>

163
00:06:20,090 --> 00:06:23,780
every call that's been made<font color="#CCCCCC"> it's the</font>

164
00:06:22,490 --> 00:06:26,480
first<font color="#E5E5E5"> thing you should turn on in your</font>

165
00:06:23,780 --> 00:06:28,669
<font color="#CCCCCC">accounts if you're</font><font color="#E5E5E5"> operating in AWS it's</font>

166
00:06:26,480 --> 00:06:30,290
a hundred percent<font color="#CCCCCC"> free except for the</font>

167
00:06:28,670 --> 00:06:32,840
storage<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the logs that they deliver</font><font color="#CCCCCC"> to</font>

168
00:06:30,290 --> 00:06:34,820
you but it's<font color="#E5E5E5"> very minimal cost</font><font color="#CCCCCC"> and from</font>

169
00:06:32,840 --> 00:06:37,070
a security<font color="#CCCCCC"> perspective and especially</font>

170
00:06:34,820 --> 00:06:41,090
<font color="#E5E5E5">around the focus of this talk it's key</font>

171
00:06:37,070 --> 00:06:42,980
for<font color="#CCCCCC"> this to work so cloud</font><font color="#E5E5E5"> so for those</font>

172
00:06:41,090 --> 00:06:45,859
that aren't<font color="#E5E5E5"> familiar is</font><font color="#CCCCCC"> the audit trail</font>

173
00:06:42,980 --> 00:06:47,450
with an AWS think of it as a recording

174
00:06:45,860 --> 00:06:49,070
of every single<font color="#CCCCCC"> API call that you make</font>

175
00:06:47,450 --> 00:06:52,280
and this

176
00:06:49,070 --> 00:06:54,680
via the console the SDKs<font color="#CCCCCC"> command line</font><font color="#E5E5E5"> or</font>

177
00:06:52,280 --> 00:06:57,020
any AWS service<font color="#E5E5E5"> doing something on your</font>

178
00:06:54,680 --> 00:06:59,210
behalf for<font color="#CCCCCC"> you as I mentioned you can</font>

179
00:06:57,020 --> 00:07:02,450
<font color="#E5E5E5">access access</font><font color="#CCCCCC"> this in the console</font>

180
00:06:59,210 --> 00:07:03,710
<font color="#CCCCCC">ninety-day history by default</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> you can</font>

181
00:07:02,450 --> 00:07:06,409
have<font color="#E5E5E5"> it delivered through cloud watch</font>

182
00:07:03,710 --> 00:07:09,650
logs the simple server storage service

183
00:07:06,410 --> 00:07:12,620
s3 if you choose to<font color="#CCCCCC"> have it delivered to</font>

184
00:07:09,650 --> 00:07:14,210
s3<font color="#E5E5E5"> which we'll cover</font><font color="#CCCCCC"> in this talk the</font>

185
00:07:12,620 --> 00:07:17,450
file name<font color="#E5E5E5"> will be something of</font><font color="#CCCCCC"> this</font>

186
00:07:14,210 --> 00:07:18,830
format<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you can choose to centralize</font>

187
00:07:17,450 --> 00:07:21,430
all<font color="#E5E5E5"> of your cloud trail to a single</font>

188
00:07:18,830 --> 00:07:23,990
bucket<font color="#E5E5E5"> and then kind of centralize your</font>

189
00:07:21,430 --> 00:07:26,600
<font color="#E5E5E5">pipeline of data processing</font><font color="#CCCCCC"> off that</font>

190
00:07:23,990 --> 00:07:29,570
bucket<font color="#E5E5E5"> when you choose the s3 the</font>

191
00:07:26,600 --> 00:07:32,270
delivery option the cloud<font color="#CCCCCC"> file team will</font>

192
00:07:29,570 --> 00:07:34,159
be buffering up API call<font color="#E5E5E5"> audit history</font>

193
00:07:32,270 --> 00:07:35,870
and delivering those<font color="#E5E5E5"> fifteen to twenty</font>

194
00:07:34,160 --> 00:07:38,090
minutes<font color="#E5E5E5"> delayed from when those calls</font>

195
00:07:35,870 --> 00:07:40,160
actually<font color="#E5E5E5"> happened so one thing to note</font>

196
00:07:38,090 --> 00:07:42,349
with<font color="#E5E5E5"> this at least Avenue of detection</font>

197
00:07:40,160 --> 00:07:44,570
<font color="#CCCCCC">today that we're going</font><font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> you</font>

198
00:07:42,350 --> 00:07:46,070
will have a 15 to<font color="#CCCCCC"> 20 minute delay</font><font color="#E5E5E5"> but</font>

199
00:07:44,570 --> 00:07:48,440
there are other<font color="#CCCCCC"> avenues to get</font><font color="#E5E5E5"> these</font>

200
00:07:46,070 --> 00:07:50,960
calls<font color="#E5E5E5"> faster it's just when you think</font>

201
00:07:48,440 --> 00:07:53,000
<font color="#E5E5E5">about the s3 delivery method which is</font>

202
00:07:50,960 --> 00:07:55,880
since the sample<font color="#E5E5E5"> architecture today</font><font color="#CCCCCC"> will</font>

203
00:07:53,000 --> 00:07:59,750
cover<font color="#E5E5E5"> it's a 15 to 20</font><font color="#CCCCCC"> minute blade</font>

204
00:07:55,880 --> 00:08:01,430
window so if we dig a little deeper in

205
00:07:59,750 --> 00:08:03,620
what<font color="#CCCCCC"> clout row</font><font color="#E5E5E5"> actually has and why it's</font>

206
00:08:01,430 --> 00:08:05,480
<font color="#CCCCCC">useful for</font><font color="#E5E5E5"> us we can look here</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> see</font>

207
00:08:03,620 --> 00:08:09,050
<font color="#CCCCCC">that one of the most important</font><font color="#E5E5E5"> features</font>

208
00:08:05,480 --> 00:08:10,850
of Quattro<font color="#E5E5E5"> it's user identity and within</font>

209
00:08:09,050 --> 00:08:12,650
user identity<font color="#E5E5E5"> you can have the type</font><font color="#CCCCCC"> of</font>

210
00:08:10,850 --> 00:08:16,160
credential that's actually making that

211
00:08:12,650 --> 00:08:17,060
call<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case it's an IM user but in</font>

212
00:08:16,160 --> 00:08:20,810
the case<font color="#CCCCCC"> that we're actually</font><font color="#E5E5E5"> going to</font>

213
00:08:17,060 --> 00:08:22,880
<font color="#E5E5E5">focus on here briefly is I am roles but</font>

214
00:08:20,810 --> 00:08:24,470
<font color="#E5E5E5">if we dig in the user identity we have</font>

215
00:08:22,880 --> 00:08:28,100
<font color="#E5E5E5">what's called an Amazon resource number</font>

216
00:08:24,470 --> 00:08:30,890
<font color="#E5E5E5">and this is the unique ID of the thing</font>

217
00:08:28,100 --> 00:08:32,810
<font color="#E5E5E5">making operations or API calls in your</font>

218
00:08:30,890 --> 00:08:34,610
account<font color="#E5E5E5"> and this is what we're going</font><font color="#CCCCCC"> to</font>

219
00:08:32,809 --> 00:08:36,829
track<font color="#E5E5E5"> we're going to track temporary</font>

220
00:08:34,610 --> 00:08:38,870
credentials<font color="#CCCCCC"> issued to these errands and</font>

221
00:08:36,830 --> 00:08:40,460
we're gonna focus on whether or<font color="#E5E5E5"> not</font>

222
00:08:38,870 --> 00:08:42,320
these credentials are being used<font color="#E5E5E5"> in our</font>

223
00:08:40,460 --> 00:08:43,370
environment or<font color="#E5E5E5"> not</font><font color="#CCCCCC"> and once we go</font>

224
00:08:42,320 --> 00:08:45,590
<font color="#CCCCCC">through this</font><font color="#E5E5E5"> we're going to see a live</font>

225
00:08:43,370 --> 00:08:47,330
demo<font color="#E5E5E5"> that was recorded because demo gods</font>

226
00:08:45,590 --> 00:08:49,760
have not been good here at apps at Kali

227
00:08:47,330 --> 00:08:53,090
from what I gather<font color="#E5E5E5"> but you're gonna see</font>

228
00:08:49,760 --> 00:08:53,930
<font color="#CCCCCC">this live</font><font color="#E5E5E5"> and in action in real time so</font>

229
00:08:53,090 --> 00:08:56,000
the demo<font color="#CCCCCC"> that I'm going</font><font color="#E5E5E5"> to show you</font>

230
00:08:53,930 --> 00:08:57,890
<font color="#CCCCCC">today is not based on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> s3 files it's</font>

231
00:08:56,000 --> 00:09:00,170
based on<font color="#E5E5E5"> real</font><font color="#CCCCCC"> time logs via cloud watch</font>

232
00:08:57,890 --> 00:09:02,810
events<font color="#CCCCCC"> but it should hopefully not</font>

233
00:09:00,170 --> 00:09:06,199
disappoint<font color="#E5E5E5"> if we dig a little</font><font color="#CCCCCC"> more into</font>

234
00:09:02,810 --> 00:09:09,109
<font color="#E5E5E5">claw drill we can see what event or API</font>

235
00:09:06,200 --> 00:09:11,150
call is<font color="#E5E5E5"> actually called what region did</font>

236
00:09:09,110 --> 00:09:13,610
it happen<font color="#E5E5E5"> in and most importantly for</font>

237
00:09:11,150 --> 00:09:16,130
this call this talk<font color="#E5E5E5"> the source IP of</font>

238
00:09:13,610 --> 00:09:17,720
this call and so we're<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> build up</font>

239
00:09:16,130 --> 00:09:19,910
this<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of history</font><font color="#CCCCCC"> of source IP is</font>

240
00:09:17,720 --> 00:09:21,500
<font color="#CCCCCC">being made and generalize whether or not</font>

241
00:09:19,910 --> 00:09:25,939
a<font color="#E5E5E5"> calls being</font><font color="#CCCCCC"> made within</font><font color="#E5E5E5"> our</font>

242
00:09:21,500 --> 00:09:27,890
<font color="#CCCCCC">environment</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of the common</font>

243
00:09:25,940 --> 00:09:29,960
best practices for<font color="#CCCCCC"> cloud trail is</font><font color="#E5E5E5"> that</font>

244
00:09:27,890 --> 00:09:32,089
you deliver<font color="#E5E5E5"> it via s3 to a bucket</font><font color="#CCCCCC"> now</font>

245
00:09:29,960 --> 00:09:34,279
you can still choose to<font color="#E5E5E5"> operate on</font>

246
00:09:32,089 --> 00:09:36,440
faster log source via cloud watch logs

247
00:09:34,279 --> 00:09:39,320
or cloud watch<font color="#E5E5E5"> events but it's generally</font>

248
00:09:36,440 --> 00:09:40,820
good to have a audit log<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you store</font>

249
00:09:39,320 --> 00:09:43,100
for a longer period<font color="#CCCCCC"> of time be it for</font>

250
00:09:40,820 --> 00:09:44,600
compliance<font color="#E5E5E5"> or other reasons and one of</font>

251
00:09:43,100 --> 00:09:46,580
the best<font color="#E5E5E5"> practices is if you're</font>

252
00:09:44,600 --> 00:09:48,320
operating<font color="#E5E5E5"> in many accounts that you've</font>

253
00:09:46,580 --> 00:09:50,450
<font color="#E5E5E5">centralized the cloud trail</font><font color="#CCCCCC"> records to a</font>

254
00:09:48,320 --> 00:09:52,339
single<font color="#CCCCCC"> bucket this</font><font color="#E5E5E5"> helps for a lot of</font>

255
00:09:50,450 --> 00:09:54,260
<font color="#CCCCCC">different logistical reasons</font><font color="#E5E5E5"> from an</font>

256
00:09:52,339 --> 00:09:55,940
orchestration of infrastructure<font color="#E5E5E5"> but if</font>

257
00:09:54,260 --> 00:09:57,950
you can have<font color="#E5E5E5"> all logs go into a central</font>

258
00:09:55,940 --> 00:09:59,810
bucket you<font color="#CCCCCC"> can control</font><font color="#E5E5E5"> access to those</font>

259
00:09:57,950 --> 00:10:01,580
logs as well<font color="#CCCCCC"> you can then kick off your</font>

260
00:09:59,810 --> 00:10:03,439
<font color="#E5E5E5">pipeline for data</font><font color="#CCCCCC"> processing from a</font>

261
00:10:01,580 --> 00:10:05,060
central<font color="#E5E5E5"> point and you no longer have to</font>

262
00:10:03,440 --> 00:10:06,800
<font color="#E5E5E5">worry about orchestrating the different</font>

263
00:10:05,060 --> 00:10:09,319
versions of<font color="#CCCCCC"> lambdas or whatever you're</font>

264
00:10:06,800 --> 00:10:11,599
<font color="#E5E5E5">trying to use to orchestrate that from</font>

265
00:10:09,320 --> 00:10:14,089
<font color="#E5E5E5">outside so</font><font color="#CCCCCC"> at Netflix we've chosen to</font>

266
00:10:11,600 --> 00:10:16,460
centralize<font color="#CCCCCC"> all of our cloud shell via s3</font>

267
00:10:14,089 --> 00:10:17,900
<font color="#E5E5E5">to a</font><font color="#CCCCCC"> quadrille bucket</font><font color="#E5E5E5"> and from there we</font>

268
00:10:16,460 --> 00:10:20,089
<font color="#E5E5E5">can then kick off many different</font>

269
00:10:17,900 --> 00:10:21,860
pipelines to analyze<font color="#E5E5E5"> those logs for</font>

270
00:10:20,089 --> 00:10:23,930
anomaly detection credential<font color="#CCCCCC"> compromise</font>

271
00:10:21,860 --> 00:10:27,050
detection and so on and so forth

272
00:10:23,930 --> 00:10:28,760
whatever<font color="#E5E5E5"> we'd like to look at so when I</font>

273
00:10:27,050 --> 00:10:31,370
first<font color="#E5E5E5"> started</font><font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> do solve this</font>

274
00:10:28,760 --> 00:10:34,310
problem I was attacking it<font color="#CCCCCC"> from a very</font>

275
00:10:31,370 --> 00:10:35,810
<font color="#CCCCCC">straightforward approach</font><font color="#E5E5E5"> and some of the</font>

276
00:10:34,310 --> 00:10:37,849
<font color="#E5E5E5">problems</font><font color="#CCCCCC"> that I talked about earlier of</font>

277
00:10:35,810 --> 00:10:40,339
why it's<font color="#E5E5E5"> so hard</font><font color="#CCCCCC"> I defined some</font>

278
00:10:37,850 --> 00:10:42,530
requirements to say I wanted to<font color="#E5E5E5"> know</font><font color="#CCCCCC"> all</font>

279
00:10:40,339 --> 00:10:45,650
the IPS in my<font color="#E5E5E5"> environment for all of our</font>

280
00:10:42,530 --> 00:10:47,660
accounts for the last hour<font color="#CCCCCC"> so I needed</font>

281
00:10:45,650 --> 00:10:49,819
<font color="#E5E5E5">to</font><font color="#CCCCCC"> have this window</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> time that I was</font>

282
00:10:47,660 --> 00:10:51,770
actually<font color="#E5E5E5"> keeping the</font><font color="#CCCCCC"> ip's history in our</font>

283
00:10:49,820 --> 00:10:54,080
environment mainly<font color="#E5E5E5"> because I needed a</font>

284
00:10:51,770 --> 00:10:57,199
history of<font color="#E5E5E5"> it knowing</font><font color="#CCCCCC"> that I was 15 to</font>

285
00:10:54,080 --> 00:10:59,860
20 minute delayed in log delivery but I

286
00:10:57,200 --> 00:11:02,540
wanted<font color="#E5E5E5"> to keep some extra data around</font>

287
00:10:59,860 --> 00:11:05,060
once if I if I<font color="#CCCCCC"> could have all the IPS in</font>

288
00:11:02,540 --> 00:11:07,250
my<font color="#CCCCCC"> environment</font><font color="#E5E5E5"> to the resolution</font><font color="#CCCCCC"> that I</font>

289
00:11:05,060 --> 00:11:09,020
needed<font color="#E5E5E5"> well then as I'm analyzing these</font>

290
00:11:07,250 --> 00:11:11,390
<font color="#CCCCCC">quadrille logs I can just look at</font><font color="#E5E5E5"> the IP</font>

291
00:11:09,020 --> 00:11:13,939
source and say did<font color="#CCCCCC"> not</font><font color="#E5E5E5"> have this IP at</font>

292
00:11:11,390 --> 00:11:15,890
this time if the answer<font color="#E5E5E5"> is yes all as</font>

293
00:11:13,940 --> 00:11:17,620
well if the<font color="#E5E5E5"> answer is no then potential</font>

294
00:11:15,890 --> 00:11:20,290
<font color="#E5E5E5">compromise</font>

295
00:11:17,620 --> 00:11:23,570
so alert if you don't have the IP

296
00:11:20,290 --> 00:11:25,880
continue<font color="#CCCCCC"> moving if you do the problem</font>

297
00:11:23,570 --> 00:11:27,800
was in our environment<font color="#E5E5E5"> were rather large</font>

298
00:11:25,880 --> 00:11:30,920
<font color="#E5E5E5">there's things called pagination with</font>

299
00:11:27,800 --> 00:11:32,689
<font color="#CCCCCC">api's</font><font color="#E5E5E5"> in AWS</font><font color="#CCCCCC"> which is essentially</font><font color="#E5E5E5"> you</font>

300
00:11:30,920 --> 00:11:34,790
have so<font color="#E5E5E5"> much data that you</font><font color="#CCCCCC"> have to make</font>

301
00:11:32,690 --> 00:11:37,130
several<font color="#E5E5E5"> calls to actually describe that</font>

302
00:11:34,790 --> 00:11:39,110
data and once you're making several

303
00:11:37,130 --> 00:11:41,000
calls in a<font color="#CCCCCC"> row at our scale you get</font><font color="#E5E5E5"> rate</font>

304
00:11:39,110 --> 00:11:42,800
limited quite a bit and<font color="#E5E5E5"> that's where the</font>

305
00:11:41,000 --> 00:11:44,360
<font color="#E5E5E5">previous mention of it could take an</font>

306
00:11:42,800 --> 00:11:45,709
<font color="#E5E5E5">hour to describe our production</font>

307
00:11:44,360 --> 00:11:49,519
environment and three regions comes

308
00:11:45,709 --> 00:11:51,829
about we operate in a<font color="#E5E5E5"> very large account</font>

309
00:11:49,519 --> 00:11:53,570
structure<font color="#E5E5E5"> lots of calls need to happen</font>

310
00:11:51,829 --> 00:11:55,519
<font color="#E5E5E5">in order</font><font color="#CCCCCC"> for us</font><font color="#E5E5E5"> to describe our entire</font>

311
00:11:53,570 --> 00:11:57,800
environment<font color="#CCCCCC"> and it became basically</font>

312
00:11:55,519 --> 00:12:00,019
<font color="#CCCCCC">impossible for me to actually assert at</font>

313
00:11:57,800 --> 00:12:01,609
a given second of time what IPS I

314
00:12:00,019 --> 00:12:04,370
actually had and do that actual

315
00:12:01,610 --> 00:12:05,870
<font color="#E5E5E5">comparison that I was looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> so</font>

316
00:12:04,370 --> 00:12:08,660
while our<font color="#E5E5E5"> cloud networking team was rear</font>

317
00:12:05,870 --> 00:12:12,320
connecting some<font color="#CCCCCC"> event-driven</font><font color="#E5E5E5"> data</font>

318
00:12:08,660 --> 00:12:14,600
structures for networking IP allocations

319
00:12:12,320 --> 00:12:16,610
<font color="#CCCCCC">I</font><font color="#E5E5E5"> went off to figure out how could I</font>

320
00:12:14,600 --> 00:12:17,060
solve<font color="#E5E5E5"> this is it possible to do it</font>

321
00:12:16,610 --> 00:12:18,589
another way

322
00:12:17,060 --> 00:12:19,849
and that's where I<font color="#CCCCCC"> came up with this</font>

323
00:12:18,589 --> 00:12:23,540
approach<font color="#CCCCCC"> that we're here to</font><font color="#E5E5E5"> discuss</font>

324
00:12:19,850 --> 00:12:26,089
today<font color="#E5E5E5"> so this approach</font><font color="#CCCCCC"> uses a</font><font color="#E5E5E5"> leverage</font>

325
00:12:23,540 --> 00:12:27,829
or an<font color="#E5E5E5"> understanding of how AWS works to</font>

326
00:12:26,089 --> 00:12:29,240
our advantage which<font color="#E5E5E5"> we'll discuss</font><font color="#CCCCCC"> how</font>

327
00:12:27,829 --> 00:12:30,979
credential are actually crafted and

328
00:12:29,240 --> 00:12:32,959
delivered to<font color="#E5E5E5"> the servers and how they're</font>

329
00:12:30,980 --> 00:12:35,060
actually<font color="#CCCCCC"> used so once we have an</font>

330
00:12:32,959 --> 00:12:37,790
<font color="#CCCCCC">understanding of</font><font color="#E5E5E5"> how AWS works we can</font>

331
00:12:35,060 --> 00:12:39,619
make a strong<font color="#E5E5E5"> assumption that I feels</font>

332
00:12:37,790 --> 00:12:41,930
reasonable and<font color="#E5E5E5"> you can decide whether</font>

333
00:12:39,620 --> 00:12:43,100
you<font color="#E5E5E5"> agree</font><font color="#CCCCCC"> with me or</font><font color="#E5E5E5"> not and after</font><font color="#CCCCCC"> we</font>

334
00:12:41,930 --> 00:12:44,930
<font color="#E5E5E5">have</font><font color="#CCCCCC"> that understanding and</font><font color="#E5E5E5"> an</font>

335
00:12:43,100 --> 00:12:46,579
assumption<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> then run this</font>

336
00:12:44,930 --> 00:12:48,680
processing on<font color="#CCCCCC"> it and then hopefully</font>

337
00:12:46,579 --> 00:12:50,540
profit and<font color="#CCCCCC"> by profit I mean we can</font>

338
00:12:48,680 --> 00:12:52,120
detect potential<font color="#E5E5E5"> misuse of our</font>

339
00:12:50,540 --> 00:12:54,529
credentials in our environment via

340
00:12:52,120 --> 00:12:55,910
employees<font color="#E5E5E5"> being curious doing things</font>

341
00:12:54,529 --> 00:12:58,010
that are an anti-pattern<font color="#CCCCCC"> to our</font>

342
00:12:55,910 --> 00:13:01,850
deployment methodologies<font color="#E5E5E5"> or perhaps even</font>

343
00:12:58,010 --> 00:13:03,410
a malicious actor and the method<font color="#E5E5E5"> that</font>

344
00:13:01,850 --> 00:13:06,620
I'm about<font color="#CCCCCC"> to</font><font color="#E5E5E5"> describe can be used</font>

345
00:13:03,410 --> 00:13:08,510
historically<font color="#CCCCCC"> as a have we ever been</font>

346
00:13:06,620 --> 00:13:10,519
<font color="#CCCCCC">potentially compromised in the past</font><font color="#E5E5E5"> or</font>

347
00:13:08,510 --> 00:13:12,560
<font color="#CCCCCC">you can start that detection method</font>

348
00:13:10,519 --> 00:13:14,120
mechanism today and within<font color="#E5E5E5"> six hours</font>

349
00:13:12,560 --> 00:13:15,890
<font color="#E5E5E5">coverage you'll have full coverage</font>

350
00:13:14,120 --> 00:13:17,630
<font color="#E5E5E5">within your environment</font><font color="#CCCCCC"> if you are</font>

351
00:13:15,890 --> 00:13:20,180
<font color="#E5E5E5">centralizing cloud shell the way that I</font>

352
00:13:17,630 --> 00:13:21,500
described earlier<font color="#CCCCCC"> now I say</font><font color="#E5E5E5"> six hours</font>

353
00:13:20,180 --> 00:13:23,689
and that's because as<font color="#E5E5E5"> I mentioned</font>

354
00:13:21,500 --> 00:13:26,750
<font color="#E5E5E5">earlier when credentials are crafted by</font>

355
00:13:23,690 --> 00:13:29,630
<font color="#E5E5E5">the ec2 and STS service they're between</font>

356
00:13:26,750 --> 00:13:30,350
<font color="#E5E5E5">one to six hours long from a valid</font>

357
00:13:29,630 --> 00:13:32,330
period

358
00:13:30,350 --> 00:13:34,760
and so those are<font color="#E5E5E5"> being rotated at least</font>

359
00:13:32,330 --> 00:13:36,800
once<font color="#CCCCCC"> every six hours so you could start</font>

360
00:13:34,760 --> 00:13:39,860
this today<font color="#E5E5E5"> and</font><font color="#CCCCCC"> within six hours have</font>

361
00:13:36,800 --> 00:13:41,689
full<font color="#E5E5E5"> coverage in your environment</font><font color="#CCCCCC"> so</font>

362
00:13:39,860 --> 00:13:45,260
let's take a look<font color="#E5E5E5"> at how AWS actually</font>

363
00:13:41,690 --> 00:13:47,930
works<font color="#E5E5E5"> given these services we have our</font>

364
00:13:45,260 --> 00:13:49,640
Amazon ec2 instance<font color="#E5E5E5"> running on the Left</font>

365
00:13:47,930 --> 00:13:50,810
we're going to<font color="#CCCCCC"> interact with very</font>

366
00:13:49,640 --> 00:13:52,400
<font color="#E5E5E5">different things</font>

367
00:13:50,810 --> 00:13:54,920
excuse me we<font color="#CCCCCC"> have our</font><font color="#E5E5E5"> server in the</font>

368
00:13:52,400 --> 00:13:57,230
middle so when you first launch a

369
00:13:54,920 --> 00:14:00,740
<font color="#E5E5E5">service in AWS you're launching an ec2</font>

370
00:13:57,230 --> 00:14:02,990
server the Amazon ec2<font color="#E5E5E5"> service is</font>

371
00:14:00,740 --> 00:14:06,020
actually<font color="#CCCCCC"> going to call out</font><font color="#E5E5E5"> to the I</font><font color="#CCCCCC"> am</font>

372
00:14:02,990 --> 00:14:08,600
service via the STS protocol and do an

373
00:14:06,020 --> 00:14:10,790
assumed<font color="#E5E5E5"> role the I am service is</font>

374
00:14:08,600 --> 00:14:12,980
<font color="#E5E5E5">actually going to respond back to ec2</font>

375
00:14:10,790 --> 00:14:15,290
and give you the temporary credentials

376
00:14:12,980 --> 00:14:17,810
<font color="#CCCCCC">those</font><font color="#E5E5E5"> credentials are available in three</font>

377
00:14:15,290 --> 00:14:20,569
forms an access key a secret key and a

378
00:14:17,810 --> 00:14:22,819
session token<font color="#E5E5E5"> these are then going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

379
00:14:20,570 --> 00:14:25,250
passed to<font color="#E5E5E5"> the metadata service and the</font>

380
00:14:22,820 --> 00:14:27,830
metadata service is an HTTP endpoint

381
00:14:25,250 --> 00:14:30,650
<font color="#CCCCCC">that is essentially virtually available</font>

382
00:14:27,830 --> 00:14:32,180
to your<font color="#E5E5E5"> server these credentials are</font>

383
00:14:30,650 --> 00:14:34,790
hosted<font color="#E5E5E5"> on a certain path of that</font>

384
00:14:32,180 --> 00:14:36,800
endpoint<font color="#CCCCCC"> and provided to</font><font color="#E5E5E5"> the SDKs</font><font color="#CCCCCC"> and</font>

385
00:14:34,790 --> 00:14:38,770
various<font color="#E5E5E5"> different pieces of software</font>

386
00:14:36,800 --> 00:14:42,589
<font color="#CCCCCC">that you might be running</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> server</font>

387
00:14:38,770 --> 00:14:44,569
<font color="#CCCCCC">when your SDK needs to make calls</font><font color="#E5E5E5"> to AWS</font>

388
00:14:42,590 --> 00:14:46,310
it's going to reach out<font color="#CCCCCC"> to the metadata</font>

389
00:14:44,570 --> 00:14:48,470
service to look for the<font color="#E5E5E5"> credentials</font>

390
00:14:46,310 --> 00:14:50,900
it'll then<font color="#E5E5E5"> cache those credentials</font><font color="#CCCCCC"> and</font>

391
00:14:48,470 --> 00:14:52,610
then use the<font color="#E5E5E5"> credentials to sign API</font>

392
00:14:50,900 --> 00:14:55,579
calls<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> be made to the API</font>

393
00:14:52,610 --> 00:14:58,190
service when an API calls made to the

394
00:14:55,580 --> 00:15:01,040
service the<font color="#CCCCCC"> service will then check the</font>

395
00:14:58,190 --> 00:15:02,450
validation of the signature<font color="#CCCCCC"> I</font><font color="#E5E5E5"> am behind</font>

396
00:15:01,040 --> 00:15:06,439
the scenes<font color="#CCCCCC"> is checking the permission</font>

397
00:15:02,450 --> 00:15:08,060
and then the<font color="#CCCCCC"> the AWS service is</font><font color="#E5E5E5"> actually</font>

398
00:15:06,440 --> 00:15:10,640
going to decide<font color="#E5E5E5"> whether or not it's</font>

399
00:15:08,060 --> 00:15:12,079
going<font color="#E5E5E5"> to log that</font><font color="#CCCCCC"> call in</font><font color="#E5E5E5"> Quattro</font><font color="#CCCCCC"> and</font>

400
00:15:10,640 --> 00:15:15,110
we'll discuss<font color="#CCCCCC"> while that's important</font>

401
00:15:12,080 --> 00:15:17,300
<font color="#E5E5E5">here in a little bit but the most</font>

402
00:15:15,110 --> 00:15:20,750
important piece is the<font color="#E5E5E5"> ec2 service is</font>

403
00:15:17,300 --> 00:15:23,359
<font color="#E5E5E5">going to craft a temporary token for you</font>

404
00:15:20,750 --> 00:15:25,130
and pass that<font color="#CCCCCC"> to the service one of the</font>

405
00:15:23,360 --> 00:15:27,230
<font color="#E5E5E5">great benefits</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have and what</font>

406
00:15:25,130 --> 00:15:29,420
we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use here is that when the</font>

407
00:15:27,230 --> 00:15:31,370
ec2 service<font color="#E5E5E5"> is crafting a session</font>

408
00:15:29,420 --> 00:15:34,640
credential a temporary token<font color="#E5E5E5"> it's</font>

409
00:15:31,370 --> 00:15:37,220
passing the server instance ID<font color="#E5E5E5"> in as the</font>

410
00:15:34,640 --> 00:15:39,290
<font color="#E5E5E5">session name and with an Amazon instance</font>

411
00:15:37,220 --> 00:15:41,300
IDs are globally unique across all

412
00:15:39,290 --> 00:15:42,860
customers and so we know that<font color="#E5E5E5"> that</font>

413
00:15:41,300 --> 00:15:44,240
temporary credential that's crafted is

414
00:15:42,860 --> 00:15:46,459
for my server<font color="#E5E5E5"> and my sir</font>

415
00:15:44,240 --> 00:15:49,339
only and from there we<font color="#E5E5E5"> can track that</font>

416
00:15:46,459 --> 00:15:51,829
<font color="#CCCCCC">unique token</font><font color="#E5E5E5"> and see how it's being</font><font color="#CCCCCC"> used</font>

417
00:15:49,339 --> 00:15:53,240
<font color="#CCCCCC">in our environment so the strong</font>

418
00:15:51,829 --> 00:15:55,998
assumption that<font color="#E5E5E5"> we're going to use here</font>

419
00:15:53,240 --> 00:15:57,860
<font color="#E5E5E5">is that first call</font><font color="#CCCCCC"> winds</font><font color="#E5E5E5"> as we see these</font>

420
00:15:55,999 --> 00:16:00,170
temporary credentials<font color="#E5E5E5"> being crafted for</font>

421
00:15:57,860 --> 00:16:02,149
the individual service the first IP

422
00:16:00,170 --> 00:16:03,979
address that<font color="#CCCCCC"> we see being used by this</font>

423
00:16:02,149 --> 00:16:05,899
temporary credential is the one that

424
00:16:03,980 --> 00:16:07,879
<font color="#E5E5E5">we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> assume is</font><font color="#CCCCCC"> the source of</font>

425
00:16:05,899 --> 00:16:09,980
<font color="#E5E5E5">truth</font><font color="#CCCCCC"> we're going to lock that curtain</font>

426
00:16:07,879 --> 00:16:12,110
to that<font color="#E5E5E5"> IP address</font><font color="#CCCCCC"> and then any</font>

427
00:16:09,980 --> 00:16:13,970
deviation from<font color="#E5E5E5"> that IP address will be</font><font color="#CCCCCC"> a</font>

428
00:16:12,110 --> 00:16:17,240
potential compromise<font color="#E5E5E5"> or a</font><font color="#CCCCCC"> misuse of this</font>

429
00:16:13,970 --> 00:16:19,670
credential<font color="#E5E5E5"> so we were to diagram this</font>

430
00:16:17,240 --> 00:16:22,249
out of a<font color="#E5E5E5"> flow chart the pink areas would</font>

431
00:16:19,670 --> 00:16:23,899
actually be the path to compromise<font color="#CCCCCC"> it</font>

432
00:16:22,249 --> 00:16:25,670
will<font color="#CCCCCC"> zoom in on each</font><font color="#E5E5E5"> one and</font><font color="#CCCCCC"> discuss how</font>

433
00:16:23,899 --> 00:16:29,569
we<font color="#CCCCCC"> actually do that so if you think</font>

434
00:16:25,670 --> 00:16:32,360
we're centralizing cloud shell via a

435
00:16:29,569 --> 00:16:34,009
single s3 bucket and then doing some

436
00:16:32,360 --> 00:16:36,170
analysis as files are<font color="#E5E5E5"> being delivered</font>

437
00:16:34,009 --> 00:16:38,869
<font color="#E5E5E5">we're going to actually go</font><font color="#CCCCCC"> through and</font>

438
00:16:36,170 --> 00:16:40,849
process<font color="#E5E5E5"> the cloud row as we receive</font><font color="#CCCCCC"> it</font>

439
00:16:38,869 --> 00:16:42,649
in a cloud<font color="#CCCCCC"> trail follow you'll have an</font>

440
00:16:40,850 --> 00:16:44,329
array<font color="#CCCCCC"> of</font><font color="#E5E5E5"> records that</font><font color="#CCCCCC"> you'll go through</font>

441
00:16:42,649 --> 00:16:45,679
<font color="#E5E5E5">so you're going</font><font color="#CCCCCC"> to go through</font><font color="#E5E5E5"> the</font>

442
00:16:44,329 --> 00:16:48,319
<font color="#E5E5E5">records and we're going to look for that</font>

443
00:16:45,679 --> 00:16:50,149
initial easy to assume<font color="#E5E5E5"> roll call that</font>

444
00:16:48,319 --> 00:16:52,040
they're crafting those first set of

445
00:16:50,149 --> 00:16:56,720
temporary credentials<font color="#E5E5E5"> for your instance</font>

446
00:16:52,040 --> 00:16:58,129
<font color="#E5E5E5">if we have it in a session table or</font>

447
00:16:56,720 --> 00:17:00,980
we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to ask that question</font><font color="#E5E5E5"> is it</font>

448
00:16:58,129 --> 00:17:02,569
in the session table<font color="#CCCCCC"> if not we're</font><font color="#E5E5E5"> going</font>

449
00:17:00,980 --> 00:17:04,220
<font color="#E5E5E5">to add it to this temporary session</font>

450
00:17:02,569 --> 00:17:05,688
table that we're<font color="#CCCCCC"> building</font><font color="#E5E5E5"> and then we're</font>

451
00:17:04,220 --> 00:17:07,339
going to continue<font color="#CCCCCC"> go we're going to</font><font color="#E5E5E5"> just</font>

452
00:17:05,689 --> 00:17:09,350
<font color="#E5E5E5">continue on and go</font><font color="#CCCCCC"> through and process</font>

453
00:17:07,339 --> 00:17:11,178
more cloud trail and we're gonna<font color="#E5E5E5"> just</font>

454
00:17:09,349 --> 00:17:13,309
continue forward<font color="#E5E5E5"> and forward until we</font>

455
00:17:11,179 --> 00:17:16,579
<font color="#CCCCCC">actually have built up every single</font>

456
00:17:13,309 --> 00:17:19,220
credential in our environment<font color="#E5E5E5"> if it's</font>

457
00:17:16,579 --> 00:17:21,678
not the ec2 service<font color="#CCCCCC"> doing the assumed</font>

458
00:17:19,220 --> 00:17:23,569
<font color="#CCCCCC">roll call we're going to see if it's a</font>

459
00:17:21,679 --> 00:17:25,819
call from an assumed role credential<font color="#E5E5E5"> if</font>

460
00:17:23,569 --> 00:17:27,949
you remember back the example clot roll

461
00:17:25,819 --> 00:17:30,440
record that I showed was an<font color="#CCCCCC"> IM user in</font>

462
00:17:27,949 --> 00:17:33,409
this<font color="#CCCCCC"> case we're looking for an IM</font><font color="#E5E5E5"> role</font>

463
00:17:30,440 --> 00:17:35,750
of a type assumed<font color="#CCCCCC"> role</font><font color="#E5E5E5"> if it's an</font>

464
00:17:33,409 --> 00:17:37,850
assumed<font color="#E5E5E5"> role call that means that it's a</font>

465
00:17:35,750 --> 00:17:39,470
temporary<font color="#E5E5E5"> credential making an API call</font>

466
00:17:37,850 --> 00:17:41,480
on<font color="#E5E5E5"> our environment</font><font color="#CCCCCC"> and so then we're</font>

467
00:17:39,470 --> 00:17:43,840
<font color="#CCCCCC">going to move on and</font><font color="#E5E5E5"> ask do we</font><font color="#CCCCCC"> have</font>

468
00:17:41,480 --> 00:17:46,730
record of<font color="#E5E5E5"> this session credential being</font>

469
00:17:43,840 --> 00:17:49,039
minted already and this is where that 0

470
00:17:46,730 --> 00:17:51,950
<font color="#E5E5E5">to 6 hours comes in if we don't know</font>

471
00:17:49,039 --> 00:17:53,840
<font color="#E5E5E5">that the credential has been minted we</font>

472
00:17:51,950 --> 00:17:56,840
just throw<font color="#E5E5E5"> that record away and continue</font>

473
00:17:53,840 --> 00:17:57,449
<font color="#CCCCCC">processing now you can choose to</font><font color="#E5E5E5"> just as</font>

474
00:17:56,840 --> 00:18:00,120
you

475
00:17:57,450 --> 00:18:02,760
<font color="#CCCCCC">unique record</font><font color="#E5E5E5"> even if you haven't seen</font>

476
00:18:00,120 --> 00:18:05,039
that<font color="#CCCCCC"> an</font><font color="#E5E5E5"> initial mint of</font><font color="#CCCCCC"> body ec2</font>

477
00:18:02,760 --> 00:18:06,539
<font color="#CCCCCC">services you</font><font color="#E5E5E5"> can choose to lock on</font><font color="#CCCCCC"> that</font>

478
00:18:05,039 --> 00:18:08,129
IP at that point<font color="#E5E5E5"> but in this</font>

479
00:18:06,539 --> 00:18:09,929
implementation<font color="#CCCCCC"> we've chosen to just</font>

480
00:18:08,130 --> 00:18:11,730
continue moving<font color="#CCCCCC"> forward</font><font color="#E5E5E5"> knowing</font><font color="#CCCCCC"> that</font>

481
00:18:09,929 --> 00:18:14,460
<font color="#CCCCCC">eventually you will see that actual ec2</font>

482
00:18:11,730 --> 00:18:16,860
<font color="#E5E5E5">instant</font><font color="#CCCCCC"> minting that</font><font color="#E5E5E5"> credential and then</font>

483
00:18:14,460 --> 00:18:19,710
we can continue<font color="#E5E5E5"> processing</font><font color="#CCCCCC"> from there</font><font color="#E5E5E5"> if</font>

484
00:18:16,860 --> 00:18:22,289
you have it in the session table we're

485
00:18:19,710 --> 00:18:24,090
<font color="#E5E5E5">going to check a edge case which we'll</font>

486
00:18:22,289 --> 00:18:26,429
cover in<font color="#E5E5E5"> a bit and these edge cases are</font>

487
00:18:24,090 --> 00:18:28,620
whether or not is AWS making a call on

488
00:18:26,429 --> 00:18:30,809
<font color="#CCCCCC">your</font><font color="#E5E5E5"> behalf or whether you've chosen to</font>

489
00:18:28,620 --> 00:18:32,610
whitelist<font color="#E5E5E5"> a specific set of IP</font><font color="#CCCCCC"> addresses</font>

490
00:18:30,809 --> 00:18:35,668
that<font color="#CCCCCC"> you allow credentials to be issued</font>

491
00:18:32,610 --> 00:18:37,168
<font color="#E5E5E5">for used from maybe</font><font color="#CCCCCC"> uoy</font><font color="#E5E5E5"> your developers</font>

492
00:18:35,669 --> 00:18:39,360
that actually pull credentials down and

493
00:18:37,169 --> 00:18:43,019
use<font color="#CCCCCC"> it from</font><font color="#E5E5E5"> your VPN but in this case</font>

494
00:18:39,360 --> 00:18:45,059
<font color="#CCCCCC">we're actually</font><font color="#E5E5E5"> able</font><font color="#CCCCCC"> to move credentials</font>

495
00:18:43,019 --> 00:18:47,220
a little bit in your<font color="#E5E5E5"> environment</font><font color="#CCCCCC"> if it's</font>

496
00:18:45,059 --> 00:18:49,200
not AWS or<font color="#E5E5E5"> within the whitelist that you</font>

497
00:18:47,220 --> 00:18:54,419
might have we're going to check the

498
00:18:49,200 --> 00:18:57,210
source IP if the source IP matches or if

499
00:18:54,419 --> 00:18:59,159
it has the source IP in the in our list

500
00:18:57,210 --> 00:19:01,139
<font color="#CCCCCC">we're going to see if it matches if it</font>

501
00:18:59,159 --> 00:19:02,789
doesn't then we're going to alert<font color="#E5E5E5"> if it</font>

502
00:19:01,139 --> 00:19:04,199
does match<font color="#E5E5E5"> then we know</font><font color="#CCCCCC"> that this</font>

503
00:19:02,789 --> 00:19:06,330
credential<font color="#E5E5E5"> is being issued in our</font>

504
00:19:04,200 --> 00:19:08,100
environment<font color="#E5E5E5"> from an area that we already</font>

505
00:19:06,330 --> 00:19:09,480
<font color="#E5E5E5">know and we're going to just continue on</font>

506
00:19:08,100 --> 00:19:11,010
<font color="#E5E5E5">as normal</font><font color="#CCCCCC"> and so you're going to</font>

507
00:19:09,480 --> 00:19:13,559
continue<font color="#CCCCCC"> processing</font><font color="#E5E5E5"> these cloud</font><font color="#CCCCCC"> row</font>

508
00:19:11,010 --> 00:19:17,519
<font color="#E5E5E5">records on and on and on and only alert</font>

509
00:19:13,559 --> 00:19:19,950
from<font color="#E5E5E5"> a deviation when you're making</font>

510
00:19:17,519 --> 00:19:23,190
<font color="#E5E5E5">calls in AWS it's somewhat important to</font>

511
00:19:19,950 --> 00:19:25,110
understand how traffic flows<font color="#E5E5E5"> this will</font>

512
00:19:23,190 --> 00:19:27,720
give you an<font color="#E5E5E5"> idea of how what IP</font>

513
00:19:25,110 --> 00:19:29,039
<font color="#E5E5E5">addresses you might expect as well as if</font>

514
00:19:27,720 --> 00:19:31,200
you're actually<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> a public or</font>

515
00:19:29,039 --> 00:19:33,779
a private IP address so in this network

516
00:19:31,200 --> 00:19:36,299
diagram we have<font color="#E5E5E5"> a simple</font><font color="#CCCCCC"> VPC virtual</font>

517
00:19:33,779 --> 00:19:39,659
private cloud in AWS with an external

518
00:19:36,299 --> 00:19:42,450
and internal subnet if you look at the

519
00:19:39,659 --> 00:19:44,580
flow one<font color="#E5E5E5"> we have an instance in an</font>

520
00:19:42,450 --> 00:19:45,630
external subnet talking<font color="#E5E5E5"> making an API</font>

521
00:19:44,580 --> 00:19:47,580
call<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> Internet</font>

522
00:19:45,630 --> 00:19:50,490
this call is<font color="#CCCCCC"> going to go</font><font color="#E5E5E5"> directly to the</font>

523
00:19:47,580 --> 00:19:52,230
<font color="#CCCCCC">Internet</font><font color="#E5E5E5"> directly to the API for Amazon</font>

524
00:19:50,490 --> 00:19:56,159
<font color="#E5E5E5">and you're going</font><font color="#CCCCCC"> to see a</font><font color="#E5E5E5"> public IP</font>

525
00:19:52,230 --> 00:19:58,860
registered in the source IP if if we're

526
00:19:56,159 --> 00:20:01,049
deployed internally and<font color="#E5E5E5"> you see number</font>

527
00:19:58,860 --> 00:20:02,370
<font color="#CCCCCC">two the network flow</font><font color="#E5E5E5"> the internal</font>

528
00:20:01,049 --> 00:20:04,950
network<font color="#E5E5E5"> traffic is</font><font color="#CCCCCC"> actually going to</font>

529
00:20:02,370 --> 00:20:06,539
flow outbound via in that gateway<font color="#E5E5E5"> and so</font>

530
00:20:04,950 --> 00:20:08,700
in this case<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> going to see the</font><font color="#CCCCCC"> net</font>

531
00:20:06,539 --> 00:20:11,580
<font color="#CCCCCC">gateway public IP is the source IP</font><font color="#E5E5E5"> and</font>

532
00:20:08,700 --> 00:20:14,080
so<font color="#E5E5E5"> what</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> means internal</font>

533
00:20:11,580 --> 00:20:15,519
internally<font color="#E5E5E5"> deployed instances are going</font>

534
00:20:14,080 --> 00:20:17,019
to share that same public IP in the

535
00:20:15,519 --> 00:20:18,669
<font color="#E5E5E5">table that we're actually going to build</font>

536
00:20:17,019 --> 00:20:20,470
so don't be alarmed as you're building

537
00:20:18,669 --> 00:20:22,779
<font color="#CCCCCC">this table that you see</font><font color="#E5E5E5"> multiple keys</font>

538
00:20:20,470 --> 00:20:25,929
<font color="#E5E5E5">being valid from the same ip address</font>

539
00:20:22,779 --> 00:20:27,940
across your infrastructure now one

540
00:20:25,929 --> 00:20:31,179
caveat to this<font color="#E5E5E5"> entire thing is if you</font>

541
00:20:27,940 --> 00:20:35,860
have VPN BBC endpoints<font color="#E5E5E5"> or V PC gateways</font>

542
00:20:31,179 --> 00:20:38,799
<font color="#CCCCCC">like the s3 endpoint</font><font color="#E5E5E5"> Gateway flow 3</font><font color="#CCCCCC"> &</font><font color="#E5E5E5"> 4</font>

543
00:20:35,860 --> 00:20:40,539
here no matter<font color="#E5E5E5"> which subnet you're</font>

544
00:20:38,799 --> 00:20:42,879
deployed in<font color="#E5E5E5"> an external or internal</font><font color="#CCCCCC"> if</font>

545
00:20:40,539 --> 00:20:45,220
you make a call that happens to go over

546
00:20:42,880 --> 00:20:48,610
<font color="#E5E5E5">a private endpoint you're going to see a</font>

547
00:20:45,220 --> 00:20:50,529
private<font color="#E5E5E5"> IP actually in your private or</font>

548
00:20:48,610 --> 00:20:52,269
in your source IP address<font color="#CCCCCC"> so you're</font>

549
00:20:50,529 --> 00:20:54,940
<font color="#E5E5E5">going to need to account for potentially</font>

550
00:20:52,269 --> 00:20:57,340
seeing a public IP and a private IP for

551
00:20:54,940 --> 00:20:59,529
the same key<font color="#E5E5E5"> but at that point</font><font color="#CCCCCC"> hopefully</font>

552
00:20:57,340 --> 00:21:01,870
<font color="#CCCCCC">you know what</font><font color="#E5E5E5"> your private IP subtype</font>

553
00:20:59,529 --> 00:21:07,450
<font color="#CCCCCC">espaces and you'll be able</font><font color="#E5E5E5"> to say is</font>

554
00:21:01,870 --> 00:21:09,489
this within my IP space or<font color="#CCCCCC"> not</font><font color="#E5E5E5"> I debated</font>

555
00:21:07,450 --> 00:21:11,019
<font color="#CCCCCC">for a long time</font><font color="#E5E5E5"> whether to actually put</font>

556
00:21:09,490 --> 00:21:12,519
what the sample<font color="#E5E5E5"> architecture was for</font>

557
00:21:11,019 --> 00:21:14,409
<font color="#E5E5E5">this because</font><font color="#CCCCCC"> it just seemed very</font><font color="#E5E5E5"> very</font>

558
00:21:12,519 --> 00:21:18,159
simple<font color="#E5E5E5"> has anyone</font><font color="#CCCCCC"> in the</font><font color="#E5E5E5"> crowd ever</font>

559
00:21:14,409 --> 00:21:19,750
drawn a<font color="#CCCCCC"> straight line architecture it</font>

560
00:21:18,159 --> 00:21:21,070
<font color="#E5E5E5">was kind of amazing after I drew it it's</font>

561
00:21:19,750 --> 00:21:23,110
like wow this is<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> quite simple</font>

562
00:21:21,070 --> 00:21:25,750
<font color="#CCCCCC">and it kind of</font><font color="#E5E5E5"> leads back</font><font color="#CCCCCC"> to my this is</font>

563
00:21:23,110 --> 00:21:27,789
<font color="#E5E5E5">not this complex machine learning hard</font>

564
00:21:25,750 --> 00:21:30,519
problem<font color="#CCCCCC"> you can deploy this rather</font>

565
00:21:27,789 --> 00:21:32,559
quickly<font color="#E5E5E5"> and can be very very effective</font>

566
00:21:30,519 --> 00:21:34,840
<font color="#E5E5E5">but here we once</font><font color="#CCCCCC"> again we have cloud</font>

567
00:21:32,559 --> 00:21:38,408
<font color="#CCCCCC">trail being centralized</font><font color="#E5E5E5"> to a bucket in</font>

568
00:21:34,840 --> 00:21:40,809
our case<font color="#E5E5E5"> we chose to</font><font color="#CCCCCC"> have an SNS topic</font>

569
00:21:38,409 --> 00:21:42,700
be invoked on file<font color="#CCCCCC"> delivery</font><font color="#E5E5E5"> to the</font>

570
00:21:40,809 --> 00:21:44,559
bucket<font color="#E5E5E5"> this allows</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> to kick off</font>

571
00:21:42,700 --> 00:21:46,450
multiple pipelines you can have<font color="#CCCCCC"> multiple</font>

572
00:21:44,559 --> 00:21:48,399
things subscribe<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that SNS topic and</font>

573
00:21:46,450 --> 00:21:50,740
do multiple<font color="#E5E5E5"> things on the files being</font>

574
00:21:48,399 --> 00:21:52,299
<font color="#CCCCCC">delivered in this case and in the demo</font>

575
00:21:50,740 --> 00:21:54,100
<font color="#CCCCCC">that we're going to</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> today we have a</font>

576
00:21:52,299 --> 00:21:55,929
lambda<font color="#E5E5E5"> function</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be kicked</font><font color="#CCCCCC"> off</font>

577
00:21:54,100 --> 00:21:57,428
and that lambda<font color="#CCCCCC"> function is going</font><font color="#E5E5E5"> to be</font>

578
00:21:55,929 --> 00:21:59,710
doing<font color="#E5E5E5"> that processing and using a</font>

579
00:21:57,429 --> 00:22:01,570
<font color="#CCCCCC">dynamodb on the backend to create that</font>

580
00:21:59,710 --> 00:22:03,429
<font color="#CCCCCC">session state</font><font color="#E5E5E5"> as we see the credentials</font>

581
00:22:01,570 --> 00:22:05,740
being<font color="#E5E5E5"> minted</font><font color="#CCCCCC"> and lock into the</font><font color="#E5E5E5"> IP</font>

582
00:22:03,429 --> 00:22:08,559
addresses<font color="#CCCCCC"> and we'll build one</font><font color="#E5E5E5"> right here</font>

583
00:22:05,740 --> 00:22:10,419
in a second manually<font color="#E5E5E5"> we're using dynamo</font>

584
00:22:08,559 --> 00:22:12,970
<font color="#E5E5E5">to kind of leverage what they have</font>

585
00:22:10,419 --> 00:22:15,850
called<font color="#E5E5E5"> the TTL feature so in dynamo you</font>

586
00:22:12,970 --> 00:22:18,100
can set a column up and have it<font color="#CCCCCC"> be the</font>

587
00:22:15,850 --> 00:22:19,870
TTL value<font color="#CCCCCC"> and Dynamo will actually start</font>

588
00:22:18,100 --> 00:22:23,139
<font color="#E5E5E5">deleting records automatically once that</font>

589
00:22:19,870 --> 00:22:24,998
TTL value<font color="#E5E5E5"> has expired</font><font color="#CCCCCC"> and so in this</font>

590
00:22:23,139 --> 00:22:28,119
<font color="#E5E5E5">case the software all it's doing is</font>

591
00:22:24,999 --> 00:22:29,949
<font color="#CCCCCC">rose and updating them at will and as we</font>

592
00:22:28,119 --> 00:22:32,349
see instances<font color="#CCCCCC"> die off those sessions</font>

593
00:22:29,949 --> 00:22:34,329
state table<font color="#CCCCCC"> or Rose are just going to</font>

594
00:22:32,349 --> 00:22:36,458
<font color="#E5E5E5">fall off automatically</font><font color="#CCCCCC"> so we're using</font>

595
00:22:34,329 --> 00:22:38,559
dynamo just as a leverage tool to be

596
00:22:36,459 --> 00:22:42,039
able<font color="#CCCCCC"> to make fast queries as well as</font>

597
00:22:38,559 --> 00:22:44,709
clean up the data by<font color="#CCCCCC"> itself so if we had</font>

598
00:22:42,039 --> 00:22:46,689
a session table look<font color="#CCCCCC"> like this we have</font>

599
00:22:44,709 --> 00:22:47,829
an identifier which in our case is<font color="#CCCCCC"> going</font>

600
00:22:46,689 --> 00:22:50,199
<font color="#E5E5E5">to be the instance ID</font>

601
00:22:47,829 --> 00:22:52,359
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> that globally unique identifier</font><font color="#CCCCCC"> for</font>

602
00:22:50,199 --> 00:22:54,099
a server<font color="#E5E5E5"> within Amazon we're</font><font color="#CCCCCC"> going to</font>

603
00:22:52,359 --> 00:22:56,079
have the source IP for the call that we

604
00:22:54,099 --> 00:22:58,448
made we're going<font color="#CCCCCC"> to lock on the air in</font>

605
00:22:56,079 --> 00:23:00,938
which is the key that was minted for

606
00:22:58,449 --> 00:23:03,369
that instance<font color="#E5E5E5"> and then the TTL value</font>

607
00:23:00,939 --> 00:23:04,989
which we're going<font color="#E5E5E5"> to create with a six</font>

608
00:23:03,369 --> 00:23:06,999
or<font color="#E5E5E5"> eight hour window however long you</font>

609
00:23:04,989 --> 00:23:08,859
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> keep the data around but</font>

610
00:23:06,999 --> 00:23:10,989
<font color="#E5E5E5">ultimately you just want this table to</font>

611
00:23:08,859 --> 00:23:12,519
be as lean as possible<font color="#CCCCCC"> and the the end</font>

612
00:23:10,989 --> 00:23:14,439
result of this table<font color="#CCCCCC"> will be every</font>

613
00:23:12,519 --> 00:23:17,679
<font color="#E5E5E5">session token' crafted in your</font>

614
00:23:14,439 --> 00:23:19,809
<font color="#CCCCCC">environment that's valid so if we were</font>

615
00:23:17,679 --> 00:23:22,809
to build<font color="#E5E5E5"> this manually we'd go in here</font>

616
00:23:19,809 --> 00:23:25,539
and we'd see<font color="#CCCCCC"> that the user identity was</font>

617
00:23:22,809 --> 00:23:28,869
an AWS service called the<font color="#E5E5E5"> ec2 service</font>

618
00:23:25,539 --> 00:23:30,158
<font color="#CCCCCC">and as we if you</font><font color="#E5E5E5"> remember the flow chart</font>

619
00:23:28,869 --> 00:23:32,319
the<font color="#E5E5E5"> first thing we want to look</font><font color="#CCCCCC"> for is</font>

620
00:23:30,159 --> 00:23:34,179
the assumed role call by the ec2 service

621
00:23:32,319 --> 00:23:36,639
<font color="#CCCCCC">so you're gonna see</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the service</font>

622
00:23:34,179 --> 00:23:37,749
<font color="#CCCCCC">type and the user identity was</font><font color="#E5E5E5"> ec2 but</font>

623
00:23:36,639 --> 00:23:40,889
they're also going to fill out the

624
00:23:37,749 --> 00:23:43,629
source IP<font color="#CCCCCC"> address as ec2 Amazon AWS</font><font color="#E5E5E5"> com</font>

625
00:23:40,889 --> 00:23:45,248
<font color="#E5E5E5">from here if we</font><font color="#CCCCCC"> look in the request</font>

626
00:23:43,629 --> 00:23:47,438
parameters this is<font color="#E5E5E5"> the data that we're</font>

627
00:23:45,249 --> 00:23:49,389
really interested<font color="#E5E5E5"> in the session name is</font>

628
00:23:47,439 --> 00:23:51,819
going<font color="#E5E5E5"> to be that instance ID in this</font>

629
00:23:49,389 --> 00:23:53,319
case ending in<font color="#CCCCCC"> two</font><font color="#E5E5E5"> 131 and we're going</font>

630
00:23:51,819 --> 00:23:55,629
<font color="#E5E5E5">to see the</font><font color="#CCCCCC"> actual role that</font><font color="#E5E5E5"> they're</font>

631
00:23:53,319 --> 00:23:59,319
<font color="#CCCCCC">issuing that credential off of the role</font>

632
00:23:55,629 --> 00:24:00,579
in this case<font color="#E5E5E5"> is called my cool role in</font>

633
00:23:59,319 --> 00:24:02,979
the response<font color="#E5E5E5"> elements you're going to</font>

634
00:24:00,579 --> 00:24:04,658
see the<font color="#CCCCCC"> session</font><font color="#E5E5E5"> token returned and a</font>

635
00:24:02,979 --> 00:24:06,369
bunch of other<font color="#CCCCCC"> information but in this</font>

636
00:24:04,659 --> 00:24:08,439
case we have what we need<font color="#E5E5E5"> to fill out</font>

637
00:24:06,369 --> 00:24:10,718
that first<font color="#E5E5E5"> row so if we're gonna add</font>

638
00:24:08,439 --> 00:24:13,629
this data into<font color="#E5E5E5"> the session table we have</font>

639
00:24:10,719 --> 00:24:16,689
our instance ID<font color="#CCCCCC"> two</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> one of my</font>

640
00:24:13,629 --> 00:24:18,188
cool role and we<font color="#E5E5E5"> created a TTL value to</font>

641
00:24:16,689 --> 00:24:20,679
start off with<font color="#E5E5E5"> so we're going to</font>

642
00:24:18,189 --> 00:24:23,829
continue<font color="#CCCCCC"> processing and this as we go on</font>

643
00:24:20,679 --> 00:24:26,109
<font color="#E5E5E5">when that token actually becomes invalid</font>

644
00:24:23,829 --> 00:24:28,389
and the ec2 service refreshes that for

645
00:24:26,109 --> 00:24:30,218
us the identifier is going to be the

646
00:24:28,389 --> 00:24:32,889
exact<font color="#CCCCCC"> same you're</font><font color="#E5E5E5"> going to have</font><font color="#CCCCCC"> this</font>

647
00:24:30,219 --> 00:24:34,659
same<font color="#E5E5E5"> two one three one instance ID</font><font color="#CCCCCC"> and</font>

648
00:24:32,889 --> 00:24:36,849
in that case all you're going<font color="#E5E5E5"> to do is</font>

649
00:24:34,659 --> 00:24:38,830
update the<font color="#E5E5E5"> TTL value in your session</font>

650
00:24:36,849 --> 00:24:40,418
table to say hey this instance

651
00:24:38,830 --> 00:24:43,418
still<font color="#E5E5E5"> alive and we want to keep this</font>

652
00:24:40,419 --> 00:24:45,580
record available<font color="#CCCCCC"> so now we have the</font>

653
00:24:43,419 --> 00:24:47,260
first instance of<font color="#CCCCCC"> the of a session</font>

654
00:24:45,580 --> 00:24:50,470
<font color="#E5E5E5">token' but we haven't</font><font color="#CCCCCC"> actually locked it</font>

655
00:24:47,260 --> 00:24:52,480
to an IP address yet so we'll go<font color="#CCCCCC"> through</font>

656
00:24:50,470 --> 00:24:54,789
here and<font color="#CCCCCC"> we say the user identity is</font>

657
00:24:52,480 --> 00:24:57,100
type<font color="#CCCCCC"> assumed</font><font color="#E5E5E5"> role so that's triggering</font>

658
00:24:54,789 --> 00:24:58,990
us that it's a session<font color="#CCCCCC"> token' a</font>

659
00:24:57,100 --> 00:25:02,049
temporary credential actually<font color="#CCCCCC"> making the</font>

660
00:24:58,990 --> 00:25:05,500
call<font color="#E5E5E5"> the</font><font color="#CCCCCC"> errand in this case is the</font>

661
00:25:02,049 --> 00:25:08,200
assumed role<font color="#E5E5E5"> my cool role and as you see</font>

662
00:25:05,500 --> 00:25:11,139
at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> of this</font><font color="#CCCCCC"> a RN is the</font><font color="#E5E5E5"> actual</font>

663
00:25:08,200 --> 00:25:13,419
session<font color="#E5E5E5"> that the ec2 had split put in on</font>

664
00:25:11,139 --> 00:25:15,340
that<font color="#CCCCCC"> assumed</font><font color="#E5E5E5"> roll call so we know this</font>

665
00:25:13,419 --> 00:25:19,360
<font color="#CCCCCC">is being</font><font color="#E5E5E5"> made</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> two one three one</font>

666
00:25:15,340 --> 00:25:21,158
instance ID<font color="#E5E5E5"> in that case we could go</font>

667
00:25:19,360 --> 00:25:24,010
down<font color="#E5E5E5"> and see what call did they actually</font>

668
00:25:21,159 --> 00:25:26,679
<font color="#CCCCCC">make we</font><font color="#E5E5E5"> can see that it was an ec2 call</font>

669
00:25:24,010 --> 00:25:29,470
with an<font color="#E5E5E5"> event name of describe instances</font>

670
00:25:26,679 --> 00:25:31,210
in<font color="#E5E5E5"> region</font><font color="#CCCCCC"> US West too but most</font>

671
00:25:29,470 --> 00:25:34,120
importantly we now have a source IP

672
00:25:31,210 --> 00:25:37,179
address<font color="#CCCCCC"> of fifty to ninety five</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> five</font>

673
00:25:34,120 --> 00:25:39,029
<font color="#CCCCCC">5.1 to one and so</font><font color="#E5E5E5"> this is the first time</font>

674
00:25:37,179 --> 00:25:42,130
<font color="#CCCCCC">that we've seen a call from this</font>

675
00:25:39,029 --> 00:25:44,350
temporary<font color="#E5E5E5"> unique credential and so we're</font>

676
00:25:42,130 --> 00:25:47,440
gonna go<font color="#E5E5E5"> into this table and say do we</font>

677
00:25:44,350 --> 00:25:49,779
have<font color="#E5E5E5"> something already in do we have a</font>

678
00:25:47,440 --> 00:25:51,490
row for<font color="#E5E5E5"> this instance if we do then</font>

679
00:25:49,779 --> 00:25:54,220
we're just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to update this row and</font>

680
00:25:51,490 --> 00:25:55,690
<font color="#CCCCCC">this becomes our LOC IP so from now on</font>

681
00:25:54,220 --> 00:25:58,179
<font color="#CCCCCC">anytime that</font><font color="#E5E5E5"> we see this session</font>

682
00:25:55,690 --> 00:26:00,190
credential being used<font color="#E5E5E5"> we can compare</font><font color="#CCCCCC"> it</font>

683
00:25:58,179 --> 00:26:01,899
<font color="#CCCCCC">to that source IP and determine</font><font color="#E5E5E5"> whether</font>

684
00:26:00,190 --> 00:26:03,820
it's being<font color="#E5E5E5"> used in our environment or</font>

685
00:26:01,899 --> 00:26:06,039
<font color="#E5E5E5">not</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> most importantly is</font><font color="#CCCCCC"> it being</font>

686
00:26:03,820 --> 00:26:08,649
<font color="#CCCCCC">used on the server that it was minted on</font>

687
00:26:06,039 --> 00:26:10,840
or in the<font color="#CCCCCC"> worst</font><font color="#E5E5E5"> case scenario</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> the</font>

688
00:26:08,649 --> 00:26:13,090
same internal subnet that it was minted

689
00:26:10,840 --> 00:26:15,668
from<font color="#E5E5E5"> knowing that all internal subnet</font>

690
00:26:13,090 --> 00:26:18,189
source IPS will be the<font color="#E5E5E5"> net gateway that</font>

691
00:26:15,669 --> 00:26:20,620
we have in<font color="#E5E5E5"> our environment so let's</font>

692
00:26:18,190 --> 00:26:22,450
<font color="#CCCCCC">continue to process a little</font><font color="#E5E5E5"> more we see</font>

693
00:26:20,620 --> 00:26:25,959
here<font color="#CCCCCC"> again we have a user identity</font><font color="#E5E5E5"> type</font>

694
00:26:22,450 --> 00:26:27,760
<font color="#E5E5E5">of assumed</font><font color="#CCCCCC"> rule the AR n is my cool role</font>

695
00:26:25,960 --> 00:26:31,090
once again with the instance ID of to

696
00:26:27,760 --> 00:26:33,129
131 we go down<font color="#CCCCCC"> here and see</font><font color="#E5E5E5"> it's a</font>

697
00:26:31,090 --> 00:26:36,039
<font color="#E5E5E5">describe volumes call this time and the</font>

698
00:26:33,130 --> 00:26:38,200
source IP is 52.95<font color="#CCCCCC"> dot 255 dot</font>

699
00:26:36,039 --> 00:26:40,809
<font color="#CCCCCC">one-to-one if you're really good with</font>

700
00:26:38,200 --> 00:26:42,789
<font color="#CCCCCC">numbers</font><font color="#E5E5E5"> you might already know that we</font>

701
00:26:40,809 --> 00:26:44,740
just<font color="#CCCCCC"> saw this IP so when you make the</font>

702
00:26:42,789 --> 00:26:47,710
comparison we know we<font color="#E5E5E5"> already have this</font>

703
00:26:44,740 --> 00:26:50,049
<font color="#E5E5E5">IP and so we know this is</font><font color="#CCCCCC"> a good call we</font>

704
00:26:47,710 --> 00:26:52,029
can continue moving<font color="#CCCCCC"> forward so we</font>

705
00:26:50,049 --> 00:26:52,750
continue on and in this case we have

706
00:26:52,029 --> 00:26:55,420
assumed<font color="#CCCCCC"> rule</font>

707
00:26:52,750 --> 00:26:58,150
once again<font color="#E5E5E5"> as you can</font><font color="#CCCCCC"> guess it's my cool</font>

708
00:26:55,420 --> 00:27:00,370
<font color="#CCCCCC">roll for the same instance</font><font color="#E5E5E5"> we'll move</font>

709
00:26:58,150 --> 00:27:01,810
down<font color="#CCCCCC"> here</font><font color="#E5E5E5"> and see in the event name it's</font>

710
00:27:00,370 --> 00:27:02,560
actually a call called get<font color="#CCCCCC"> caller</font>

711
00:27:01,810 --> 00:27:05,320
identity

712
00:27:02,560 --> 00:27:07,899
now get call our identity is similar in

713
00:27:05,320 --> 00:27:09,070
<font color="#E5E5E5">linux to Who am I it's going to tell you</font>

714
00:27:07,900 --> 00:27:11,470
this

715
00:27:09,070 --> 00:27:13,360
who the keys are or what key you're

716
00:27:11,470 --> 00:27:15,850
actually running<font color="#E5E5E5"> with this might be in a</font>

717
00:27:13,360 --> 00:27:18,610
<font color="#E5E5E5">malicious actors first step in the cloud</font>

718
00:27:15,850 --> 00:27:20,439
<font color="#E5E5E5">when they find credentials it's a good</font>

719
00:27:18,610 --> 00:27:23,709
way to<font color="#CCCCCC"> determine is the credential that</font>

720
00:27:20,440 --> 00:27:25,840
<font color="#E5E5E5">I found actually valid and what is it</font>

721
00:27:23,710 --> 00:27:28,300
<font color="#E5E5E5">what potentially</font><font color="#CCCCCC"> could the permissions</font>

722
00:27:25,840 --> 00:27:30,760
mean<font color="#CCCCCC"> other</font><font color="#E5E5E5"> people are actually using it</font>

723
00:27:28,300 --> 00:27:32,649
call our identity to<font color="#E5E5E5"> do a source of</font>

724
00:27:30,760 --> 00:27:34,390
identity<font color="#E5E5E5"> trust for an initial</font>

725
00:27:32,650 --> 00:27:36,640
bootstrapping of other<font color="#E5E5E5"> credentials like</font>

726
00:27:34,390 --> 00:27:38,380
<font color="#CCCCCC">has</font><font color="#E5E5E5"> you court bolt but it could be</font>

727
00:27:36,640 --> 00:27:40,330
something that<font color="#E5E5E5"> now you don't see in your</font>

728
00:27:38,380 --> 00:27:42,340
environment<font color="#E5E5E5"> and you could trigger off of</font>

729
00:27:40,330 --> 00:27:44,169
by itself<font color="#CCCCCC"> but in our</font><font color="#E5E5E5"> case we</font><font color="#CCCCCC"> don't</font>

730
00:27:42,340 --> 00:27:46,600
really care<font color="#E5E5E5"> what the event is what we</font>

731
00:27:44,170 --> 00:27:49,450
care about<font color="#E5E5E5"> is the source IP and in and</font>

732
00:27:46,600 --> 00:27:51,610
here you can see it's a<font color="#CCCCCC"> six 7.17 8.5 two</font>

733
00:27:49,450 --> 00:27:55,240
<font color="#CCCCCC">two three two if you're familiar with</font>

734
00:27:51,610 --> 00:27:57,580
AWS you know this is an<font color="#CCCCCC"> amazon IP space</font>

735
00:27:55,240 --> 00:28:00,760
but if we<font color="#CCCCCC"> just followed the process</font><font color="#E5E5E5"> that</font>

736
00:27:57,580 --> 00:28:02,470
we've we've talked about we compare this

737
00:28:00,760 --> 00:28:05,590
to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> IP that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> know about for my cool</font>

738
00:28:02,470 --> 00:28:07,780
role of the instance ID<font color="#CCCCCC"> to 131 and we</font>

739
00:28:05,590 --> 00:28:09,639
know that these aren't the same<font color="#E5E5E5"> so this</font>

740
00:28:07,780 --> 00:28:11,080
<font color="#E5E5E5">is where we alert so this</font><font color="#CCCCCC"> is where</font><font color="#E5E5E5"> I</font>

741
00:28:09,640 --> 00:28:12,520
mentioned it might be just<font color="#CCCCCC"> say a</font>

742
00:28:11,080 --> 00:28:14,860
developer<font color="#E5E5E5"> that might have</font><font color="#CCCCCC"> pulled</font>

743
00:28:12,520 --> 00:28:16,540
credentials down but potentially<font color="#CCCCCC"> it's</font>

744
00:28:14,860 --> 00:28:18,070
<font color="#CCCCCC">that malicious</font><font color="#E5E5E5"> actor but it's an</font><font color="#CCCCCC"> it's</font>

745
00:28:16,540 --> 00:28:19,270
enough data that<font color="#CCCCCC"> we've gathered that</font><font color="#E5E5E5"> we</font>

746
00:28:18,070 --> 00:28:21,040
know it's not<font color="#E5E5E5"> operating in our</font>

747
00:28:19,270 --> 00:28:23,889
environment and we<font color="#CCCCCC"> should probably go</font>

748
00:28:21,040 --> 00:28:25,570
look at<font color="#CCCCCC"> it so we're going to walk</font>

749
00:28:23,890 --> 00:28:26,950
<font color="#CCCCCC">through</font><font color="#E5E5E5"> a quick video demo but</font>

750
00:28:25,570 --> 00:28:29,260
essentially<font color="#E5E5E5"> I've launched a sample</font>

751
00:28:26,950 --> 00:28:32,770
service<font color="#E5E5E5"> and I'm going to be pulling</font><font color="#CCCCCC"> down</font>

752
00:28:29,260 --> 00:28:35,860
<font color="#E5E5E5">the credentials using them from this</font>

753
00:28:32,770 --> 00:28:37,930
<font color="#E5E5E5">instance my laptop and then a another</font>

754
00:28:35,860 --> 00:28:41,639
<font color="#E5E5E5">AWS account of mine and we'll see how</font>

755
00:28:37,930 --> 00:28:41,640
this<font color="#E5E5E5"> method actually detects</font>

756
00:28:44,760 --> 00:28:51,210
so here I have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> sample service launched</font>

757
00:28:47,010 --> 00:28:54,230
in my reinvent account<font color="#E5E5E5"> I've launched it</font>

758
00:28:51,210 --> 00:29:00,000
with my<font color="#CCCCCC"> role</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> an IP address of 50</font>

759
00:28:54,230 --> 00:29:02,640
4.20 9.1<font color="#E5E5E5"> 8 3.1 I already have in an</font>

760
00:29:00,000 --> 00:29:04,440
initial<font color="#E5E5E5"> table row filled out for this</font><font color="#CCCCCC"> I</font>

761
00:29:02,640 --> 00:29:06,690
have the instance ID that was shown

762
00:29:04,440 --> 00:29:08,940
previously<font color="#CCCCCC"> we see that it's my role</font>

763
00:29:06,690 --> 00:29:11,549
running and I have the source IP locked

764
00:29:08,940 --> 00:29:16,980
<font color="#CCCCCC">and</font><font color="#E5E5E5"> so this is a just a simple view of</font>

765
00:29:11,549 --> 00:29:19,710
<font color="#E5E5E5">the dynamo table that we have so</font><font color="#CCCCCC"> shortly</font>

766
00:29:16,980 --> 00:29:22,290
now<font color="#CCCCCC"> i'll</font><font color="#E5E5E5"> ssh</font><font color="#CCCCCC"> into that instance and i'm</font>

767
00:29:19,710 --> 00:29:24,720
going<font color="#E5E5E5"> to create an s3 bucket the s3</font>

768
00:29:22,290 --> 00:29:28,440
create is actually a call that you will

769
00:29:24,720 --> 00:29:30,690
get<font color="#E5E5E5"> within s3</font><font color="#CCCCCC"> so first</font><font color="#E5E5E5"> i'm going to show</font>

770
00:29:28,440 --> 00:29:33,540
<font color="#CCCCCC">you that I actually have credentials</font><font color="#E5E5E5"> for</font>

771
00:29:30,690 --> 00:29:35,880
this instance I'm gonna run the s3<font color="#E5E5E5"> API</font>

772
00:29:33,540 --> 00:29:40,350
create bucket call<font color="#E5E5E5"> I'm gonna call it</font>

773
00:29:35,880 --> 00:29:42,450
something like<font color="#E5E5E5"> good from instance in</font>

774
00:29:40,350 --> 00:29:44,520
this<font color="#CCCCCC"> case I did this for reinvent so I</font>

775
00:29:42,450 --> 00:29:46,770
created a<font color="#CCCCCC"> bucket</font><font color="#E5E5E5"> and we're gonna go back</font>

776
00:29:44,520 --> 00:29:49,860
to<font color="#E5E5E5"> a slack where we're gonna actually</font>

777
00:29:46,770 --> 00:29:52,799
<font color="#E5E5E5">have some semi real-time detection so</font>

778
00:29:49,860 --> 00:29:54,629
here we see<font color="#E5E5E5"> that we know that this IP</font>

779
00:29:52,799 --> 00:29:56,700
I'm on the instance where the credential

780
00:29:54,630 --> 00:29:59,820
<font color="#E5E5E5">was minted</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case I'm actually</font>

781
00:29:56,700 --> 00:30:02,490
having<font color="#E5E5E5"> my methodology print out whether</font>

782
00:29:59,820 --> 00:30:04,889
the call is good or not<font color="#CCCCCC"> so we actually</font>

783
00:30:02,490 --> 00:30:08,340
have a view from<font color="#E5E5E5"> Autobots saying this</font>

784
00:30:04,890 --> 00:30:10,620
call is great<font color="#CCCCCC"> so now</font><font color="#E5E5E5"> I have a script</font>

785
00:30:08,340 --> 00:30:13,110
<font color="#CCCCCC">that I've written</font><font color="#E5E5E5"> that essentially SSH</font>

786
00:30:10,620 --> 00:30:14,520
into<font color="#E5E5E5"> our instance curls the metadata</font>

787
00:30:13,110 --> 00:30:16,770
service for the credentials<font color="#CCCCCC"> that I'm</font>

788
00:30:14,520 --> 00:30:18,480
running<font color="#E5E5E5"> with and then exports them into</font>

789
00:30:16,770 --> 00:30:21,090
my local<font color="#CCCCCC"> environment so that I can use</font>

790
00:30:18,480 --> 00:30:22,260
them<font color="#E5E5E5"> so we're going to go</font><font color="#CCCCCC"> ahead and</font>

791
00:30:21,090 --> 00:30:24,480
steal<font color="#E5E5E5"> the credentials and bring them</font>

792
00:30:22,260 --> 00:30:29,220
down<font color="#CCCCCC"> to</font><font color="#E5E5E5"> my laptop</font><font color="#CCCCCC"> and try</font><font color="#E5E5E5"> creating a</font>

793
00:30:24,480 --> 00:30:30,770
bucket<font color="#CCCCCC"> again so here I just</font><font color="#E5E5E5"> echoed out</font>

794
00:30:29,220 --> 00:30:33,990
the credentials I'm going to export<font color="#E5E5E5"> them</font>

795
00:30:30,770 --> 00:30:35,639
later<font color="#CCCCCC"> but here let's create a bucket and</font>

796
00:30:33,990 --> 00:30:39,660
see whether<font color="#E5E5E5"> or not this can actually be</font>

797
00:30:35,640 --> 00:30:41,910
detected so<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to create</font><font color="#CCCCCC"> a bucket</font>

798
00:30:39,660 --> 00:30:44,490
called good from lab or bad from laptop

799
00:30:41,910 --> 00:30:46,970
and hopefully this<font color="#E5E5E5"> methodology will</font>

800
00:30:44,490 --> 00:30:46,970
detect it

801
00:30:49,400 --> 00:30:53,900
if we go back to Autobot<font color="#E5E5E5"> within seconds</font>

802
00:30:52,130 --> 00:30:58,490
we have Autobot actually showing<font color="#E5E5E5"> me that</font>

803
00:30:53,900 --> 00:31:00,290
<font color="#E5E5E5">the source IP 69.2</font><font color="#CCCCCC"> 3.13 4.9 2 does not</font>

804
00:30:58,490 --> 00:31:02,450
<font color="#CCCCCC">equal the</font><font color="#E5E5E5"> expected IP that we would have</font>

805
00:31:00,290 --> 00:31:04,639
<font color="#E5E5E5">seen and so this is something</font><font color="#CCCCCC"> that AWS</font>

806
00:31:02,450 --> 00:31:07,490
guarded<font color="#E5E5E5"> you can do as</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> it won't be</font>

807
00:31:04,640 --> 00:31:09,230
necessarily<font color="#CCCCCC"> in delivered as fast as this</font>

808
00:31:07,490 --> 00:31:12,190
as we're actually using<font color="#E5E5E5"> the cloud watch</font>

809
00:31:09,230 --> 00:31:14,570
event<font color="#CCCCCC"> cloud</font><font color="#E5E5E5"> trail stream</font><font color="#CCCCCC"> in this demo</font>

810
00:31:12,190 --> 00:31:16,610
but guard duty does a good job<font color="#E5E5E5"> of</font>

811
00:31:14,570 --> 00:31:19,610
actually<font color="#E5E5E5"> telling you that credentials</font>

812
00:31:16,610 --> 00:31:20,870
are being used outside of AWS<font color="#CCCCCC"> but if you</font>

813
00:31:19,610 --> 00:31:22,939
<font color="#E5E5E5">remember I copied the credentials</font>

814
00:31:20,870 --> 00:31:25,489
earlier I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> show you that on</font>

815
00:31:22,940 --> 00:31:27,140
<font color="#E5E5E5">this rogue AWS account of mine</font><font color="#CCCCCC"> I</font>

816
00:31:25,490 --> 00:31:29,870
actually don't have<font color="#CCCCCC"> a role on</font><font color="#E5E5E5"> this</font>

817
00:31:27,140 --> 00:31:32,450
instance so the STS get<font color="#E5E5E5"> caller identity</font>

818
00:31:29,870 --> 00:31:36,139
fails<font color="#E5E5E5"> I don't have actual</font><font color="#CCCCCC"> credentials</font><font color="#E5E5E5"> so</font>

819
00:31:32,450 --> 00:31:37,429
I can't do<font color="#E5E5E5"> anything I'm gonna paste in</font>

820
00:31:36,140 --> 00:31:41,320
the credentials<font color="#E5E5E5"> that I pulled from</font><font color="#CCCCCC"> the</font>

821
00:31:37,429 --> 00:31:44,240
instance run get<font color="#CCCCCC"> caller identity again</font>

822
00:31:41,320 --> 00:31:46,389
show<font color="#E5E5E5"> that I'm running as the credentials</font>

823
00:31:44,240 --> 00:31:48,500
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the first instance that I was</font><font color="#E5E5E5"> on and</font>

824
00:31:46,390 --> 00:31:55,010
then I'm<font color="#E5E5E5"> gonna try to</font><font color="#CCCCCC"> create an s3</font>

825
00:31:48,500 --> 00:31:57,290
bucket so this bucket is being created

826
00:31:55,010 --> 00:32:00,350
from the rogue instance in a different

827
00:31:57,290 --> 00:32:02,360
AWS account in this<font color="#E5E5E5"> methodology will</font>

828
00:32:00,350 --> 00:32:10,280
detect<font color="#E5E5E5"> that was actually being run as</font>

829
00:32:02,360 --> 00:32:14,059
well and so here<font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> two Amazon</font>

830
00:32:10,280 --> 00:32:16,428
<font color="#E5E5E5">IPs one is the expected the</font><font color="#CCCCCC"> 50 4.20</font><font color="#E5E5E5"> 9.1</font>

831
00:32:14,059 --> 00:32:20,149
<font color="#E5E5E5">80 3.1 and the call from the rogue</font>

832
00:32:16,429 --> 00:32:21,800
instance was from<font color="#E5E5E5"> 54 89.1</font><font color="#CCCCCC"> or 2.8 so</font>

833
00:32:20,150 --> 00:32:23,870
we've successfully detected credential

834
00:32:21,800 --> 00:32:28,100
<font color="#CCCCCC">compromise and a pivot to a different</font>

835
00:32:23,870 --> 00:32:29,389
AWS account and so that's a key

836
00:32:28,100 --> 00:32:32,300
<font color="#E5E5E5">differentiator that</font><font color="#CCCCCC"> I was trying</font><font color="#E5E5E5"> to</font>

837
00:32:29,390 --> 00:32:34,070
solve when implementing this is I wanted

838
00:32:32,300 --> 00:32:35,659
<font color="#E5E5E5">to actually be able to tell when</font>

839
00:32:34,070 --> 00:32:38,149
credentials were being used outside of

840
00:32:35,660 --> 00:32:43,760
Netflix's AWS environment<font color="#E5E5E5"> and not just a</font>

841
00:32:38,150 --> 00:32:45,740
<font color="#E5E5E5">DBS in general so let's switch</font><font color="#CCCCCC"> back and</font>

842
00:32:43,760 --> 00:32:47,540
talk about<font color="#E5E5E5"> those edge cases</font><font color="#CCCCCC"> so I</font>

843
00:32:45,740 --> 00:32:49,490
mentioned<font color="#E5E5E5"> that there</font><font color="#CCCCCC"> are a few edge</font>

844
00:32:47,540 --> 00:32:51,590
cases<font color="#E5E5E5"> we talked about the</font><font color="#CCCCCC"> VPC endpoint</font>

845
00:32:49,490 --> 00:32:52,610
<font color="#E5E5E5">so every so often you're making the call</font>

846
00:32:51,590 --> 00:32:54,620
that actually goes<font color="#CCCCCC"> through an</font><font color="#E5E5E5"> endpoint</font>

847
00:32:52,610 --> 00:32:58,040
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> IP</font><font color="#E5E5E5"> that you're gonna see in your</font>

848
00:32:54,620 --> 00:33:00,860
claw<font color="#CCCCCC"> trail is actually a private IP when</font>

849
00:32:58,040 --> 00:33:02,750
Amazon<font color="#E5E5E5"> makes calls on your behalf</font><font color="#CCCCCC"> the IP</font>

850
00:33:00,860 --> 00:33:03,240
<font color="#E5E5E5">address you see in source IP address</font><font color="#CCCCCC"> is</font>

851
00:33:02,750 --> 00:33:05,970
<font color="#E5E5E5">actually</font>

852
00:33:03,240 --> 00:33:07,710
to be that of an<font color="#E5E5E5"> Amazon domain so if ec2</font>

853
00:33:05,970 --> 00:33:10,100
is doing<font color="#E5E5E5"> things on your behalf</font><font color="#CCCCCC"> you're</font>

854
00:33:07,710 --> 00:33:13,559
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> see the or the source IP of ec2</font>

855
00:33:10,100 --> 00:33:15,300
<font color="#CCCCCC">dot</font><font color="#E5E5E5"> Amazon AWS com if if</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> auto</font>

856
00:33:13,559 --> 00:33:18,660
<font color="#E5E5E5">scaling your server group for you you're</font>

857
00:33:15,300 --> 00:33:19,889
gonna<font color="#CCCCCC"> see auto scaling Amazon AWS com</font><font color="#E5E5E5"> so</font>

858
00:33:18,660 --> 00:33:21,750
you need to keep in<font color="#CCCCCC"> mind that</font><font color="#E5E5E5"> your</font>

859
00:33:19,890 --> 00:33:23,670
credential is going to be used<font color="#E5E5E5"> from</font>

860
00:33:21,750 --> 00:33:26,190
<font color="#E5E5E5">outside of your environment by a trusted</font>

861
00:33:23,670 --> 00:33:29,700
AWS<font color="#E5E5E5"> so as long as</font><font color="#CCCCCC"> you trust AWS to use</font>

862
00:33:26,190 --> 00:33:32,490
your credential<font color="#E5E5E5"> why within</font><font color="#CCCCCC"> reason</font>

863
00:33:29,700 --> 00:33:36,240
you can whitelist<font color="#E5E5E5"> the Amazon domain and</font>

864
00:33:32,490 --> 00:33:37,890
then just continue<font color="#CCCCCC"> on if you see that if</font>

865
00:33:36,240 --> 00:33:39,960
you're deploying<font color="#E5E5E5"> an instance into an</font>

866
00:33:37,890 --> 00:33:42,780
external subnet<font color="#E5E5E5"> the first thing it does</font>

867
00:33:39,960 --> 00:33:45,690
<font color="#CCCCCC">is going</font><font color="#E5E5E5"> to get a public</font><font color="#CCCCCC"> IP</font><font color="#E5E5E5"> if it's</font>

868
00:33:42,780 --> 00:33:48,090
going<font color="#CCCCCC"> to attach a elastic IP and elastic</font>

869
00:33:45,690 --> 00:33:50,610
IP is a static IP assigned to your AWS

870
00:33:48,090 --> 00:33:55,770
account<font color="#E5E5E5"> that you can attach</font><font color="#CCCCCC"> to one</font>

871
00:33:50,610 --> 00:33:57,419
server<font color="#E5E5E5"> in the public address space if if</font>

872
00:33:55,770 --> 00:34:00,179
you've launched and<font color="#E5E5E5"> then attached an</font>

873
00:33:57,420 --> 00:34:03,450
elastic IP chances are you might<font color="#E5E5E5"> see two</font>

874
00:34:00,179 --> 00:34:05,429
different<font color="#E5E5E5"> public</font><font color="#CCCCCC"> IPs for that minted</font>

875
00:34:03,450 --> 00:34:08,970
credential<font color="#E5E5E5"> so in this case you want to</font>

876
00:34:05,429 --> 00:34:11,550
<font color="#E5E5E5">keep track of any associate address</font>

877
00:34:08,969 --> 00:34:14,489
calls<font color="#E5E5E5"> that target your your instances</font>

878
00:34:11,550 --> 00:34:17,399
and allow one deviation or n deviations

879
00:34:14,489 --> 00:34:19,649
from<font color="#E5E5E5"> that potential</font><font color="#CCCCCC"> pub first public IP</font>

880
00:34:17,399 --> 00:34:21,480
so if<font color="#E5E5E5"> I've launched with</font><font color="#CCCCCC"> an external</font>

881
00:34:19,649 --> 00:34:24,179
subnet I've assigned<font color="#E5E5E5"> that myself a</font>

882
00:34:21,480 --> 00:34:27,359
public IP<font color="#E5E5E5"> I've made a call</font><font color="#CCCCCC"> to attach a</font>

883
00:34:24,179 --> 00:34:29,730
new IP<font color="#CCCCCC"> I'm now gonna every subsequent</font>

884
00:34:27,359 --> 00:34:32,100
<font color="#CCCCCC">call from there actually be logged with</font>

885
00:34:29,730 --> 00:34:33,780
<font color="#E5E5E5">that new IP so you're going</font><font color="#CCCCCC"> to be you're</font>

886
00:34:32,100 --> 00:34:36,330
<font color="#CCCCCC">gonna want</font><font color="#E5E5E5"> to be able to determine</font>

887
00:34:33,780 --> 00:34:38,280
whether or<font color="#E5E5E5"> not you can deviate one or in</font>

888
00:34:36,330 --> 00:34:40,049
number of<font color="#CCCCCC"> times depending on</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> many</font>

889
00:34:38,280 --> 00:34:41,970
<font color="#E5E5E5">times your IP</font><font color="#CCCCCC"> changes for that</font><font color="#E5E5E5"> external</font>

890
00:34:40,050 --> 00:34:44,970
subnet<font color="#E5E5E5"> so keep those kind of edge</font><font color="#CCCCCC"> cases</font>

891
00:34:41,969 --> 00:34:47,219
in mind so now<font color="#CCCCCC"> that we've talked</font><font color="#E5E5E5"> about</font>

892
00:34:44,969 --> 00:34:49,699
detecting<font color="#E5E5E5"> compromise let's pivot briefly</font>

893
00:34:47,219 --> 00:34:51,928
to how can we prevent it<font color="#E5E5E5"> altogether</font>

894
00:34:49,699 --> 00:34:54,540
<font color="#E5E5E5">ultimately that's the solution</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> us</font>

895
00:34:51,929 --> 00:34:57,240
security<font color="#E5E5E5"> people want to do is let's</font>

896
00:34:54,540 --> 00:35:00,960
prevent it<font color="#CCCCCC"> from the get-go and</font><font color="#E5E5E5"> so</font>

897
00:34:57,240 --> 00:35:03,600
169.254<font color="#E5E5E5"> dot 169.254</font><font color="#CCCCCC"> for those familiar</font>

898
00:35:00,960 --> 00:35:06,810
with AWS<font color="#E5E5E5"> is the IP</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> dreaded</font>

899
00:35:03,600 --> 00:35:08,880
metadata service<font color="#E5E5E5"> it's an attackers first</font>

900
00:35:06,810 --> 00:35:10,290
point<font color="#E5E5E5"> of entry if they find a</font>

901
00:35:08,880 --> 00:35:12,810
<font color="#E5E5E5">vulnerabilities such as server</font><font color="#CCCCCC"> side</font>

902
00:35:10,290 --> 00:35:14,850
request forgery or XML external entity

903
00:35:12,810 --> 00:35:16,650
ejection it's where credentials are

904
00:35:14,850 --> 00:35:17,910
being stored and most

905
00:35:16,650 --> 00:35:21,089
importantly<font color="#E5E5E5"> for an attacker it's</font>

906
00:35:17,910 --> 00:35:22,920
<font color="#E5E5E5">unauthenticated</font><font color="#CCCCCC"> any-any plaintext</font><font color="#E5E5E5"> curl</font>

907
00:35:21,089 --> 00:35:25,770
<font color="#CCCCCC">request to the midpoint will get you</font>

908
00:35:22,920 --> 00:35:28,799
lots and lots of<font color="#CCCCCC"> data</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> so an example</font>

909
00:35:25,770 --> 00:35:30,589
<font color="#CCCCCC">server-side request forgery</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> you're an</font>

910
00:35:28,799 --> 00:35:32,640
attacker<font color="#CCCCCC"> you've found a web application</font>

911
00:35:30,589 --> 00:35:34,740
<font color="#E5E5E5">when you make a get request to that</font>

912
00:35:32,640 --> 00:35:37,680
<font color="#CCCCCC">application it's actually making a fetch</font>

913
00:35:34,740 --> 00:35:38,848
to a remote application as well it's

914
00:35:37,680 --> 00:35:40,500
taking the response from<font color="#CCCCCC"> that</font>

915
00:35:38,849 --> 00:35:43,069
application combining it and then

916
00:35:40,500 --> 00:35:46,589
providing you a combined<font color="#CCCCCC"> response back</font>

917
00:35:43,069 --> 00:35:48,720
<font color="#E5E5E5">that's a normal flow for the application</font>

918
00:35:46,589 --> 00:35:51,150
but if an attacker<font color="#E5E5E5"> or malicious actor is</font>

919
00:35:48,720 --> 00:35:53,399
actually able to<font color="#E5E5E5"> abuse</font><font color="#CCCCCC"> the application</font>

920
00:35:51,150 --> 00:35:56,039
and<font color="#E5E5E5"> trick it to request metadata</font>

921
00:35:53,400 --> 00:35:58,529
credentials<font color="#E5E5E5"> what's going to happen is</font>

922
00:35:56,039 --> 00:36:00,480
they're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> the common</font><font color="#CCCCCC"> request in AWS</font>

923
00:35:58,529 --> 00:36:02,549
is to go for<font color="#E5E5E5"> the credential path in the</font>

924
00:36:00,480 --> 00:36:04,380
metadata<font color="#CCCCCC"> service so the malicious actor</font>

925
00:36:02,549 --> 00:36:06,569
is going to trick this application<font color="#E5E5E5"> to</font>

926
00:36:04,380 --> 00:36:08,700
make<font color="#E5E5E5"> a request on your on its behalf to</font>

927
00:36:06,569 --> 00:36:10,140
the<font color="#E5E5E5"> metadata service in this case the</font>

928
00:36:08,700 --> 00:36:12,149
metadata service is going<font color="#E5E5E5"> to return</font>

929
00:36:10,140 --> 00:36:15,089
<font color="#E5E5E5">those credentials and then pass those</font>

930
00:36:12,150 --> 00:36:18,450
<font color="#CCCCCC">back to</font><font color="#E5E5E5"> the malicious actor and that's</font>

931
00:36:15,089 --> 00:36:20,069
in<font color="#E5E5E5"> my opinion</font><font color="#CCCCCC"> or what I've heard is the</font>

932
00:36:18,450 --> 00:36:21,750
number one attack vector<font color="#E5E5E5"> for</font>

933
00:36:20,069 --> 00:36:24,119
<font color="#E5E5E5">applications in the cloud that has</font>

934
00:36:21,750 --> 00:36:26,730
<font color="#E5E5E5">server-side request forgery</font><font color="#CCCCCC"> typically a</font>

935
00:36:24,119 --> 00:36:28,500
<font color="#E5E5E5">compromised</font><font color="#CCCCCC"> Atos credential is a</font>

936
00:36:26,730 --> 00:36:32,130
critical finding<font color="#CCCCCC"> and a bug bounty</font>

937
00:36:28,500 --> 00:36:33,809
<font color="#E5E5E5">program and max payout in many cases a</font>

938
00:36:32,130 --> 00:36:35,549
<font color="#E5E5E5">exposed credential depending on the</font>

939
00:36:33,809 --> 00:36:37,500
privilege<font color="#CCCCCC"> that it has can lead to</font>

940
00:36:35,549 --> 00:36:38,910
account compromised as well or further

941
00:36:37,500 --> 00:36:42,210
pivoting within that<font color="#CCCCCC"> environment</font>

942
00:36:38,910 --> 00:36:43,770
potential leakage<font color="#E5E5E5"> of sensitive data if</font>

943
00:36:42,210 --> 00:36:47,609
you've ever tried to<font color="#E5E5E5"> block this in a</font>

944
00:36:43,770 --> 00:36:49,770
<font color="#CCCCCC">laughs it's very very hard</font><font color="#E5E5E5"> there's many</font>

945
00:36:47,609 --> 00:36:51,750
many IPS that<font color="#CCCCCC"> you're trying</font><font color="#E5E5E5"> to block and</font>

946
00:36:49,770 --> 00:36:53,700
you can enumerate all those IP<font color="#CCCCCC"> addresses</font>

947
00:36:51,750 --> 00:36:57,059
<font color="#E5E5E5">and all the different representations</font>

948
00:36:53,700 --> 00:36:59,098
from decimal<font color="#CCCCCC"> to octal to ipv6 and then</font>

949
00:36:57,059 --> 00:37:01,079
you can create that blacklist for<font color="#E5E5E5"> your</font>

950
00:36:59,099 --> 00:37:03,420
wife address and if you ever see these

951
00:37:01,079 --> 00:37:06,390
in the the full path<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the domain then</font>

952
00:37:03,420 --> 00:37:08,339
you can block that but then<font color="#CCCCCC"> you take as</font>

953
00:37:06,390 --> 00:37:09,960
an attacker say<font color="#E5E5E5"> okay they're</font><font color="#CCCCCC"> blocking</font>

954
00:37:08,339 --> 00:37:11,849
this let<font color="#CCCCCC"> me just go</font><font color="#E5E5E5"> create a short URL</font>

955
00:37:09,960 --> 00:37:13,619
<font color="#E5E5E5">and then all of a sudden</font><font color="#CCCCCC"> you've I passed</font>

956
00:37:11,849 --> 00:37:15,750
that last protection and you're right

957
00:37:13,619 --> 00:37:18,480
where you<font color="#CCCCCC"> were</font><font color="#E5E5E5"> from the</font><font color="#CCCCCC"> beginning so we</font>

958
00:37:15,750 --> 00:37:20,640
wanted<font color="#CCCCCC"> to try to first</font><font color="#E5E5E5"> tackle it like</font>

959
00:37:18,480 --> 00:37:22,710
this and<font color="#E5E5E5"> we figured</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> okay this might</font>

960
00:37:20,640 --> 00:37:24,328
<font color="#CCCCCC">not be</font><font color="#E5E5E5"> the best way to do it let's</font>

961
00:37:22,710 --> 00:37:25,920
figure out<font color="#E5E5E5"> how we can just protect the</font>

962
00:37:24,329 --> 00:37:27,539
credentials or prevent them from ever

963
00:37:25,920 --> 00:37:29,849
being compromised through this type of

964
00:37:27,539 --> 00:37:30,309
scenario<font color="#CCCCCC"> the first approach that we did</font>

965
00:37:29,849 --> 00:37:33,039
was

966
00:37:30,309 --> 00:37:35,109
we call API enforcement or API protect

967
00:37:33,039 --> 00:37:38,380
it a Netflix and it's essentially<font color="#E5E5E5"> a</font>

968
00:37:35,109 --> 00:37:42,459
managed policy<font color="#E5E5E5"> a managed policy at in</font>

969
00:37:38,380 --> 00:37:44,650
AWS is a a man I am policy that<font color="#E5E5E5"> you can</font>

970
00:37:42,459 --> 00:37:47,649
<font color="#E5E5E5">apply to one or many different</font><font color="#CCCCCC"> roles so</font>

971
00:37:44,650 --> 00:37:50,289
<font color="#CCCCCC">in this</font><font color="#E5E5E5"> case the manage policy for API</font>

972
00:37:47,650 --> 00:37:52,779
protect internally is an enumeration of

973
00:37:50,289 --> 00:37:56,079
<font color="#CCCCCC">the of each account</font><font color="#E5E5E5"> the enumeration</font>

974
00:37:52,779 --> 00:37:57,369
contains every<font color="#CCCCCC"> nat gateway IP</font><font color="#E5E5E5"> if you</font>

975
00:37:56,079 --> 00:37:59,640
remember back to<font color="#E5E5E5"> the network diagram</font>

976
00:37:57,369 --> 00:38:02,319
that<font color="#E5E5E5"> we showed earlier internals</font>

977
00:37:59,640 --> 00:38:04,029
<font color="#E5E5E5">internally deployed applications</font><font color="#CCCCCC"> the</font>

978
00:38:02,319 --> 00:38:06,640
public IP that<font color="#CCCCCC"> you see is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> net</font>

979
00:38:04,029 --> 00:38:08,680
gateway<font color="#E5E5E5"> so we're gonna enumerate all the</font>

980
00:38:06,640 --> 00:38:10,959
<font color="#CCCCCC">nat gateway</font><font color="#E5E5E5"> IPS in our accounts all of</font>

981
00:38:08,680 --> 00:38:12,489
<font color="#CCCCCC">the VP C's and all the V PC endpoints in</font>

982
00:38:10,959 --> 00:38:14,799
our accounts<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we're going</font><font color="#E5E5E5"> to attach</font>

983
00:38:12,489 --> 00:38:17,410
this<font color="#CCCCCC"> manage policy to all internally</font>

984
00:38:14,799 --> 00:38:20,049
deployed roles with<font color="#E5E5E5"> the idea that these</font>

985
00:38:17,410 --> 00:38:22,209
roles will only work<font color="#E5E5E5"> from the conditions</font>

986
00:38:20,049 --> 00:38:24,400
that<font color="#E5E5E5"> we've supplied and so the manager</font>

987
00:38:22,209 --> 00:38:27,430
this<font color="#CCCCCC"> manage</font><font color="#E5E5E5"> policy here is doing a deny</font>

988
00:38:24,400 --> 00:38:29,529
on any action against any resource in

989
00:38:27,430 --> 00:38:31,390
our accounts<font color="#E5E5E5"> if these conditions aren't</font>

990
00:38:29,529 --> 00:38:34,299
met<font color="#CCCCCC"> if one of these conditions are met</font>

991
00:38:31,390 --> 00:38:36,670
<font color="#E5E5E5">and what that's</font><font color="#CCCCCC"> allowed us</font><font color="#E5E5E5"> to do is</font>

992
00:38:34,299 --> 00:38:40,119
actually<font color="#E5E5E5"> in cases where a credential</font>

993
00:38:36,670 --> 00:38:42,609
might have been leaked<font color="#CCCCCC"> via an SSR f4 x</font>

994
00:38:40,119 --> 00:38:45,339
<font color="#CCCCCC">XE when the attacker malicious actor</font>

995
00:38:42,609 --> 00:38:47,709
gets<font color="#E5E5E5"> that credential themselves their IP</font>

996
00:38:45,339 --> 00:38:49,479
address is not the same<font color="#E5E5E5"> their</font><font color="#CCCCCC"> V PC ID is</font>

997
00:38:47,709 --> 00:38:52,239
not the same there's<font color="#E5E5E5"> no way that they</font>

998
00:38:49,479 --> 00:38:53,379
can<font color="#CCCCCC"> take that that a set of credentials</font>

999
00:38:52,239 --> 00:38:55,509
<font color="#E5E5E5">that they've been able to pull</font>

1000
00:38:53,380 --> 00:38:58,029
maliciously from the app and use it in

1001
00:38:55,509 --> 00:38:59,289
their<font color="#E5E5E5"> environment effectively we had one</font>

1002
00:38:58,029 --> 00:39:01,119
case in<font color="#E5E5E5"> the bug bounty where a</font>

1003
00:38:59,289 --> 00:39:03,429
researcher<font color="#CCCCCC"> was able to</font><font color="#E5E5E5"> get a set of</font>

1004
00:39:01,119 --> 00:39:05,739
credentials<font color="#E5E5E5"> they were invalid because of</font>

1005
00:39:03,429 --> 00:39:08,589
this<font color="#E5E5E5"> protection</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> actually asked</font>

1006
00:39:05,739 --> 00:39:10,209
the researcher<font color="#CCCCCC"> to try to bypass</font><font color="#E5E5E5"> see if</font>

1007
00:39:08,589 --> 00:39:12,489
they could<font color="#E5E5E5"> find a way</font><font color="#CCCCCC"> or a single API</font>

1008
00:39:10,209 --> 00:39:14,529
<font color="#E5E5E5">call</font><font color="#CCCCCC"> that would work</font><font color="#E5E5E5"> and luckily</font><font color="#CCCCCC"> the</font>

1009
00:39:12,489 --> 00:39:17,459
results were very much in favor of<font color="#E5E5E5"> us</font>

1010
00:39:14,529 --> 00:39:20,739
<font color="#E5E5E5">and this protection actually worked</font><font color="#CCCCCC"> the</font>

1011
00:39:17,459 --> 00:39:23,469
<font color="#CCCCCC">one gap here is as as we know with the</font>

1012
00:39:20,739 --> 00:39:25,929
the<font color="#E5E5E5"> network flow this can only be</font>

1013
00:39:23,469 --> 00:39:28,209
assigned<font color="#E5E5E5"> to things deployed internally</font>

1014
00:39:25,929 --> 00:39:31,859
so if if you have something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

1015
00:39:28,209 --> 00:39:33,969
<font color="#CCCCCC">have a role in the external subnet</font><font color="#E5E5E5"> the</font>

1016
00:39:31,859 --> 00:39:36,640
IP that<font color="#CCCCCC"> you're going to see is the</font>

1017
00:39:33,969 --> 00:39:39,069
public IP<font color="#E5E5E5"> of that instance in our world</font>

1018
00:39:36,640 --> 00:39:42,400
at<font color="#E5E5E5"> Netflix we have so many public IPS</font>

1019
00:39:39,069 --> 00:39:43,930
that<font color="#E5E5E5"> in our environments dynamically</font>

1020
00:39:42,400 --> 00:39:46,240
changing so much that<font color="#CCCCCC"> we</font>

1021
00:39:43,930 --> 00:39:48,308
continuously update this<font color="#CCCCCC"> manage policy</font>

1022
00:39:46,240 --> 00:39:50,288
to reflect every public IP<font color="#E5E5E5"> in our</font>

1023
00:39:48,309 --> 00:39:52,359
environment<font color="#E5E5E5"> so all we can protect is</font>

1024
00:39:50,289 --> 00:39:54,250
actually the internal<font color="#E5E5E5"> resources that</font>

1025
00:39:52,359 --> 00:39:56,529
we've deployed so we know this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> at</font>

1026
00:39:54,250 --> 00:39:58,529
least<font color="#E5E5E5"> effective to a certain extent but</font>

1027
00:39:56,529 --> 00:40:00,579
can we take it<font color="#CCCCCC"> one step farther and</font>

1028
00:39:58,529 --> 00:40:04,960
that's where we get<font color="#E5E5E5"> into metadata</font>

1029
00:40:00,579 --> 00:40:06,730
protection and so<font color="#E5E5E5"> instead of focusing on</font>

1030
00:40:04,960 --> 00:40:10,000
protecting<font color="#CCCCCC"> the credential in the case</font>

1031
00:40:06,730 --> 00:40:12,190
<font color="#E5E5E5">that it is X X filled by a malicious</font>

1032
00:40:10,000 --> 00:40:13,890
actor<font color="#E5E5E5"> can we</font><font color="#CCCCCC"> actually protect against</font>

1033
00:40:12,190 --> 00:40:15,160
the credential<font color="#E5E5E5"> from ever being</font>

1034
00:40:13,890 --> 00:40:17,200
compromised

1035
00:40:15,160 --> 00:40:19,089
can we<font color="#E5E5E5"> actually prevent the credential</font>

1036
00:40:17,200 --> 00:40:20,589
from being X filled by a given

1037
00:40:19,089 --> 00:40:22,119
<font color="#E5E5E5">vulnerability such as server side</font>

1038
00:40:20,589 --> 00:40:24,279
request forgery

1039
00:40:22,119 --> 00:40:25,690
when we<font color="#E5E5E5"> first started looking at this we</font>

1040
00:40:24,279 --> 00:40:26,740
sort of analyzing<font color="#CCCCCC"> how do other cloud</font>

1041
00:40:25,690 --> 00:40:29,020
providers<font color="#CCCCCC"> do it</font>

1042
00:40:26,740 --> 00:40:31,899
<font color="#CCCCCC">GCP has a header</font><font color="#E5E5E5"> on their metadata</font>

1043
00:40:29,020 --> 00:40:33,220
service it turns out that's<font color="#CCCCCC"> very</font>

1044
00:40:31,900 --> 00:40:35,170
effective towards<font color="#E5E5E5"> this type of attack</font>

1045
00:40:33,220 --> 00:40:37,328
<font color="#CCCCCC">typically in a server side requests</font>

1046
00:40:35,170 --> 00:40:39,789
forgery attack as an attacker or

1047
00:40:37,329 --> 00:40:42,490
malicious actor you do not have control

1048
00:40:39,789 --> 00:40:44,230
<font color="#CCCCCC">of the actual HTTP headers</font><font color="#E5E5E5"> that are</font>

1049
00:40:42,490 --> 00:40:46,118
being with sent with the<font color="#CCCCCC"> request</font><font color="#E5E5E5"> that</font>

1050
00:40:44,230 --> 00:40:47,890
you've tricked the app to make and so if

1051
00:40:46,119 --> 00:40:49,359
you can require a header that's<font color="#E5E5E5"> needed</font>

1052
00:40:47,890 --> 00:40:51,160
<font color="#CCCCCC">to</font><font color="#E5E5E5"> make a request to the metadata</font>

1053
00:40:49,359 --> 00:40:52,960
service then you<font color="#CCCCCC"> can potentially</font>

1054
00:40:51,160 --> 00:40:56,109
mitigate<font color="#E5E5E5"> this class of attack all</font>

1055
00:40:52,960 --> 00:40:58,779
together against<font color="#E5E5E5"> the credentials GCB has</font>

1056
00:40:56,109 --> 00:41:01,390
it<font color="#E5E5E5"> a lot of people talk about how nice</font>

1057
00:40:58,779 --> 00:41:02,890
that is<font color="#E5E5E5"> it turns out</font><font color="#CCCCCC"> GCP also has a beta</font>

1058
00:41:01,390 --> 00:41:04,868
<font color="#E5E5E5">endpoint that's still enabled that</font>

1059
00:41:02,890 --> 00:41:07,480
doesn't have this protection<font color="#E5E5E5"> as well so</font>

1060
00:41:04,869 --> 00:41:10,059
kind<font color="#E5E5E5"> of a pivot across but when we tried</font>

1061
00:41:07,480 --> 00:41:12,250
to<font color="#E5E5E5"> work with Amazon on this it became</font>

1062
00:41:10,059 --> 00:41:13,960
clear that<font color="#E5E5E5"> it's very difficult to after</font>

1063
00:41:12,250 --> 00:41:15,640
the fact<font color="#CCCCCC"> to add a</font><font color="#E5E5E5"> header without</font>

1064
00:41:13,960 --> 00:41:17,500
potentially breaking customers and how

1065
00:41:15,640 --> 00:41:19,299
do you<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> deploy that</font><font color="#E5E5E5"> and so it</font>

1066
00:41:17,500 --> 00:41:21,160
seemed like we<font color="#E5E5E5"> weren't going to get much</font>

1067
00:41:19,299 --> 00:41:23,440
traction in<font color="#CCCCCC"> this movement any time soon</font>

1068
00:41:21,160 --> 00:41:25,240
so we tried<font color="#E5E5E5"> thinking what else could</font><font color="#CCCCCC"> we</font>

1069
00:41:23,440 --> 00:41:27,130
do we had already done some

1070
00:41:25,240 --> 00:41:29,379
<font color="#E5E5E5">experimentation with how do you actually</font>

1071
00:41:27,130 --> 00:41:31,750
rotate credentials in the cloud when we

1072
00:41:29,380 --> 00:41:33,730
did<font color="#E5E5E5"> that we found some gaps in the SDKs</font>

1073
00:41:31,750 --> 00:41:36,069
<font color="#E5E5E5">with</font><font color="#CCCCCC"> an Amazon</font><font color="#E5E5E5"> and so we already had a</font>

1074
00:41:33,730 --> 00:41:38,049
<font color="#CCCCCC">relationship</font><font color="#E5E5E5"> with the SDK team</font><font color="#CCCCCC"> and so I</font>

1075
00:41:36,069 --> 00:41:40,930
reached out<font color="#E5E5E5"> to them</font><font color="#CCCCCC"> to see</font><font color="#E5E5E5"> hey could we</font>

1076
00:41:38,049 --> 00:41:43,750
just add a header<font color="#E5E5E5"> that's being sent to</font>

1077
00:41:40,930 --> 00:41:46,690
<font color="#E5E5E5">every metadata request and then that</font>

1078
00:41:43,750 --> 00:41:47,980
will enable us<font color="#E5E5E5"> to build a proxy they</font>

1079
00:41:46,690 --> 00:41:49,299
<font color="#E5E5E5">went back and thought</font><font color="#CCCCCC"> about it and said</font>

1080
00:41:47,980 --> 00:41:51,160
<font color="#CCCCCC">you</font><font color="#E5E5E5"> know we</font><font color="#CCCCCC"> really don't</font><font color="#E5E5E5"> feel</font>

1081
00:41:49,299 --> 00:41:53,619
comfortable adding a header<font color="#CCCCCC"> that our</font>

1082
00:41:51,160 --> 00:41:56,259
partner<font color="#E5E5E5"> service the metadata isn't</font>

1083
00:41:53,619 --> 00:41:58,119
expecting so<font color="#E5E5E5"> we can't do this for</font><font color="#CCCCCC"> you</font>

1084
00:41:56,260 --> 00:42:00,039
right<font color="#CCCCCC"> now so I went ahead</font>

1085
00:41:58,119 --> 00:42:01,720
built a POC just to see what<font color="#E5E5E5"> this</font>

1086
00:42:00,039 --> 00:42:03,940
traffic<font color="#CCCCCC"> look like</font><font color="#E5E5E5"> could we potentially</font>

1087
00:42:01,720 --> 00:42:06,640
do some anomaly detection by looking at

1088
00:42:03,940 --> 00:42:09,609
paths and how often<font color="#E5E5E5"> things are being hit</font>

1089
00:42:06,640 --> 00:42:11,470
<font color="#E5E5E5">and the one thing I</font><font color="#CCCCCC"> forgot and noticed</font>

1090
00:42:09,609 --> 00:42:14,380
<font color="#E5E5E5">right away was</font><font color="#CCCCCC"> every request</font><font color="#E5E5E5"> being sent</font>

1091
00:42:11,470 --> 00:42:17,410
<font color="#E5E5E5">by the SDK</font><font color="#CCCCCC"> to the metadata service there</font>

1092
00:42:14,380 --> 00:42:19,450
was a user<font color="#E5E5E5"> agent being sent and lucky</font>

1093
00:42:17,410 --> 00:42:22,089
for me the user agent was<font color="#CCCCCC"> not being</font><font color="#E5E5E5"> sent</font>

1094
00:42:19,450 --> 00:42:25,149
<font color="#E5E5E5">to anything or I you could say unlucky</font>

1095
00:42:22,089 --> 00:42:28,599
<font color="#CCCCCC">and so what I did</font><font color="#E5E5E5"> is an experiment was I</font>

1096
00:42:25,150 --> 00:42:33,519
made a PR request to the AWS<font color="#CCCCCC"> Ruby</font><font color="#E5E5E5"> SDK</font>

1097
00:42:28,599 --> 00:42:35,650
all the AWS SDKs<font color="#E5E5E5"> are open-source feel</font>

1098
00:42:33,519 --> 00:42:38,078
free to contribute to all<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> so</font>

1099
00:42:35,650 --> 00:42:41,769
what I did<font color="#E5E5E5"> was I made a PR request to</font>

1100
00:42:38,079 --> 00:42:43,749
the Ruby SDK wrote up a nice blurb about

1101
00:42:41,769 --> 00:42:45,249
<font color="#CCCCCC">how this would enable us to</font><font color="#E5E5E5"> protect</font>

1102
00:42:43,749 --> 00:42:47,410
ourselves against<font color="#CCCCCC"> server side request</font>

1103
00:42:45,249 --> 00:42:50,319
forgery and therefore protecting our

1104
00:42:47,410 --> 00:42:52,720
credentials the Ruby library actually

1105
00:42:50,319 --> 00:42:55,509
<font color="#E5E5E5">said hey this is cool</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> we'll accept</font>

1106
00:42:52,720 --> 00:42:58,149
this they merged it I took<font color="#CCCCCC"> this PR I</font>

1107
00:42:55,509 --> 00:43:01,420
went to the Java SDK<font color="#E5E5E5"> did the same thing</font>

1108
00:42:58,150 --> 00:43:03,339
<font color="#CCCCCC">went to the bo2 SDK Python</font><font color="#E5E5E5"> so on and so</font>

1109
00:43:01,420 --> 00:43:06,670
forth<font color="#CCCCCC"> and so I'm happy to</font><font color="#E5E5E5"> today to say</font>

1110
00:43:03,339 --> 00:43:09,519
that<font color="#E5E5E5"> the latest SDKs as of I think</font><font color="#CCCCCC"> it</font>

1111
00:43:06,670 --> 00:43:13,390
was like August last year<font color="#E5E5E5"> have this new</font>

1112
00:43:09,519 --> 00:43:16,569
this user agent being set as I got the

1113
00:43:13,390 --> 00:43:19,359
SDKs<font color="#E5E5E5"> to merge these I then took that</font>

1114
00:43:16,569 --> 00:43:22,390
<font color="#E5E5E5">back to the global SDK team at AWS and</font>

1115
00:43:19,359 --> 00:43:24,009
they were able<font color="#E5E5E5"> to get them</font><font color="#CCCCCC"> to agree that</font>

1116
00:43:22,390 --> 00:43:25,989
they will<font color="#E5E5E5"> make sure these user agents</font>

1117
00:43:24,009 --> 00:43:28,079
<font color="#E5E5E5">never change</font><font color="#CCCCCC"> so that you can actually</font>

1118
00:43:25,989 --> 00:43:31,660
deploy<font color="#E5E5E5"> something like this and protect</font>

1119
00:43:28,079 --> 00:43:33,099
your metadata service so while I wasn't

1120
00:43:31,660 --> 00:43:35,049
the<font color="#E5E5E5"> initial result that we were hoping</font>

1121
00:43:33,099 --> 00:43:36,880
<font color="#CCCCCC">for</font><font color="#E5E5E5"> word the</font><font color="#CCCCCC"> metadata would just have</font>

1122
00:43:35,049 --> 00:43:39,130
<font color="#E5E5E5">this header that was required from now</font>

1123
00:43:36,880 --> 00:43:41,200
on we actually<font color="#CCCCCC"> have a path forward for</font>

1124
00:43:39,130 --> 00:43:43,029
protecting credentials and preventing

1125
00:43:41,200 --> 00:43:44,529
this<font color="#E5E5E5"> class of attack</font><font color="#CCCCCC"> and hopefully</font>

1126
00:43:43,029 --> 00:43:46,509
mitigating<font color="#E5E5E5"> it in the entire environment</font>

1127
00:43:44,529 --> 00:43:49,329
<font color="#CCCCCC">so if we were to look</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> what this would</font>

1128
00:43:46,509 --> 00:43:52,059
actually<font color="#CCCCCC"> look like</font><font color="#E5E5E5"> now in this case I'm</font>

1129
00:43:49,329 --> 00:43:55,930
running a Python project<font color="#E5E5E5"> the Python Lite</font>

1130
00:43:52,059 --> 00:43:58,299
SDK in AWS is called<font color="#CCCCCC"> boto 3 and so the</font>

1131
00:43:55,930 --> 00:44:01,180
user agent<font color="#E5E5E5"> is boto 3 slash version slash</font>

1132
00:43:58,299 --> 00:44:03,489
a bunch of other<font color="#CCCCCC"> things and so a request</font>

1133
00:44:01,180 --> 00:44:05,680
to get<font color="#E5E5E5"> credentials from the boto library</font>

1134
00:44:03,489 --> 00:44:08,289
would now look like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> the user agent</font>

1135
00:44:05,680 --> 00:44:10,118
would say boto 3 the metadata proxy

1136
00:44:08,289 --> 00:44:12,270
could have a<font color="#E5E5E5"> whitelist that looks for</font>

1137
00:44:10,119 --> 00:44:15,190
user agents that<font color="#E5E5E5"> start with something</font>

1138
00:44:12,270 --> 00:44:18,880
the proxy<font color="#E5E5E5"> sees that the user agents what</font>

1139
00:44:15,190 --> 00:44:20,829
it expects actually allows that<font color="#E5E5E5"> request</font>

1140
00:44:18,880 --> 00:44:22,869
<font color="#E5E5E5">to go through and then the application</font>

1141
00:44:20,829 --> 00:44:24,250
actually<font color="#E5E5E5"> gets its credentials</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if we</font>

1142
00:44:22,869 --> 00:44:26,770
look back<font color="#CCCCCC"> at what</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> server-side</font>

1143
00:44:24,250 --> 00:44:28,960
requests<font color="#E5E5E5"> forgery of an attacker would</font>

1144
00:44:26,770 --> 00:44:32,470
look like<font color="#E5E5E5"> in this case it's a Python</font>

1145
00:44:28,960 --> 00:44:35,109
<font color="#CCCCCC">flash</font><font color="#E5E5E5"> cap</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> nor one of the most</font>

1146
00:44:32,470 --> 00:44:37,589
popular HTTP requests library and<font color="#E5E5E5"> Python</font>

1147
00:44:35,109 --> 00:44:40,029
is called requests and so in this<font color="#E5E5E5"> case</font>

1148
00:44:37,589 --> 00:44:42,759
I've tricked the application<font color="#E5E5E5"> into making</font>

1149
00:44:40,030 --> 00:44:45,160
<font color="#E5E5E5">a request to the metadata service for</font>

1150
00:44:42,760 --> 00:44:47,290
credentials<font color="#E5E5E5"> the metadata proxy would see</font>

1151
00:44:45,160 --> 00:44:50,109
the user agent of Python - requests

1152
00:44:47,290 --> 00:44:51,759
<font color="#E5E5E5">which is the</font><font color="#CCCCCC"> default user agent</font><font color="#E5E5E5"> and in</font>

1153
00:44:50,109 --> 00:44:54,730
this case it<font color="#E5E5E5"> would block it</font><font color="#CCCCCC"> and send</font>

1154
00:44:51,760 --> 00:44:56,079
back a 401 unauthorized or 403 or<font color="#CCCCCC"> nine</font>

1155
00:44:54,730 --> 00:44:58,059
<font color="#CCCCCC">one five get the hell out of here</font>

1156
00:44:56,079 --> 00:45:00,010
whatever<font color="#E5E5E5"> code you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to send back to</font>

1157
00:44:58,059 --> 00:45:01,960
the attacker to<font color="#E5E5E5"> kind of troll them feel</font>

1158
00:45:00,010 --> 00:45:04,119
<font color="#E5E5E5">free but in this case the most important</font>

1159
00:45:01,960 --> 00:45:06,280
piece is<font color="#E5E5E5"> we're now able to</font><font color="#CCCCCC"> actually</font>

1160
00:45:04,119 --> 00:45:08,290
mitigate<font color="#E5E5E5"> a entire class of vulnerability</font>

1161
00:45:06,280 --> 00:45:10,150
in our environment against AWS

1162
00:45:08,290 --> 00:45:12,279
credentials<font color="#E5E5E5"> and from a team standpoint</font>

1163
00:45:10,150 --> 00:45:14,470
that<font color="#E5E5E5"> sole responsibility is protection</font>

1164
00:45:12,280 --> 00:45:16,240
<font color="#E5E5E5">of eight</font><font color="#CCCCCC"> I am and the credentials that</font>

1165
00:45:14,470 --> 00:45:17,709
was pretty<font color="#E5E5E5"> powerful</font><font color="#CCCCCC"> so it was</font><font color="#E5E5E5"> really</font>

1166
00:45:16,240 --> 00:45:19,569
cool<font color="#E5E5E5"> to work with</font><font color="#CCCCCC"> our apps tech team on</font>

1167
00:45:17,710 --> 00:45:21,520
coming up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> how we could actually do</font>

1168
00:45:19,569 --> 00:45:25,450
<font color="#E5E5E5">this and get</font><font color="#CCCCCC"> it rolled out and prove it</font>

1169
00:45:21,520 --> 00:45:27,700
to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> very effective and so the SDK is</font>

1170
00:45:25,450 --> 00:45:29,319
<font color="#E5E5E5">that I know are supported today because</font>

1171
00:45:27,700 --> 00:45:32,379
<font color="#CCCCCC">I've verified</font><font color="#E5E5E5"> in at least have touched</font>

1172
00:45:29,319 --> 00:45:36,250
our PR disease or all the Python SDK is

1173
00:45:32,380 --> 00:45:40,089
the<font color="#E5E5E5"> golang both Java SDKs nodejs and</font>

1174
00:45:36,250 --> 00:45:42,490
<font color="#CCCCCC">Ruby if you do</font><font color="#E5E5E5"> PHP or c-sharp</font><font color="#CCCCCC"> my</font>

1175
00:45:40,089 --> 00:45:45,279
apologies<font color="#CCCCCC"> I didn't want</font><font color="#E5E5E5"> to relearn all</font>

1176
00:45:42,490 --> 00:45:46,990
languages<font color="#CCCCCC"> only a few and most</font>

1177
00:45:45,280 --> 00:45:48,490
<font color="#E5E5E5">importantly it was probably I didn't</font>

1178
00:45:46,990 --> 00:45:51,250
want to set<font color="#E5E5E5"> up a dev</font><font color="#CCCCCC"> environment to try</font>

1179
00:45:48,490 --> 00:45:53,589
to<font color="#E5E5E5"> figure those out but the SDK team has</font>

1180
00:45:51,250 --> 00:45:56,260
<font color="#E5E5E5">agreed to support these types of changes</font>

1181
00:45:53,589 --> 00:45:58,328
<font color="#CCCCCC">and I just have</font><font color="#E5E5E5"> not gone to verify it to</font>

1182
00:45:56,260 --> 00:46:00,549
see have the changes propagated<font color="#CCCCCC"> to those</font>

1183
00:45:58,329 --> 00:46:02,290
libraries but today you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> go</font>

1184
00:46:00,549 --> 00:46:06,609
<font color="#CCCCCC">out</font><font color="#E5E5E5"> and protect</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> metadata services</font>

1185
00:46:02,290 --> 00:46:09,490
yourself<font color="#CCCCCC"> we've actually released an</font>

1186
00:46:06,609 --> 00:46:10,900
<font color="#E5E5E5">open-source version of a proxy to</font><font color="#CCCCCC"> give</font>

1187
00:46:09,490 --> 00:46:13,118
you a sample of<font color="#CCCCCC"> what you</font><font color="#E5E5E5"> could actually</font>

1188
00:46:10,900 --> 00:46:15,460
go deploy<font color="#E5E5E5"> it's written in go</font><font color="#CCCCCC"> lang it's</font>

1189
00:46:13,119 --> 00:46:17,319
about<font color="#E5E5E5"> 80 or</font><font color="#CCCCCC"> 100 lines that go you can</font>

1190
00:46:15,460 --> 00:46:19,119
literally clone the repo go build and

1191
00:46:17,319 --> 00:46:21,849
start<font color="#E5E5E5"> protecting your metadata service</font>

1192
00:46:19,119 --> 00:46:24,700
<font color="#E5E5E5">today</font><font color="#CCCCCC"> the user agents that I know</font><font color="#E5E5E5"> about</font>

1193
00:46:21,849 --> 00:46:25,660
that<font color="#E5E5E5"> are in the existing SDKs they start</font>

1194
00:46:24,700 --> 00:46:31,180
with AWS

1195
00:46:25,660 --> 00:46:34,180
<font color="#E5E5E5">SDK - it's usually SDK - language but oh</font>

1196
00:46:31,180 --> 00:46:36,490
<font color="#E5E5E5">but a core and the CLI</font><font color="#CCCCCC"> and chalice are</font>

1197
00:46:34,180 --> 00:46:38,410
all python-based libraries the<font color="#CCCCCC"> Python</font>

1198
00:46:36,490 --> 00:46:40,660
team chose to go away<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the other</font>

1199
00:46:38,410 --> 00:46:43,509
libraries<font color="#E5E5E5"> and use their own user agents</font>

1200
00:46:40,660 --> 00:46:44,920
that's<font color="#E5E5E5"> why there's five</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> these are</font>

1201
00:46:43,510 --> 00:46:47,559
the user<font color="#CCCCCC"> agent set if you wanted to</font>

1202
00:46:44,920 --> 00:46:48,970
build a proxy<font color="#E5E5E5"> that's not off of our</font>

1203
00:46:47,559 --> 00:46:51,520
example proxy<font color="#E5E5E5"> that these are the user</font>

1204
00:46:48,970 --> 00:46:55,118
agents you'd want to look for<font color="#CCCCCC"> patterns</font>

1205
00:46:51,520 --> 00:46:57,549
that<font color="#E5E5E5"> were like this so to wrap things up</font>

1206
00:46:55,119 --> 00:46:59,109
we've now detected<font color="#E5E5E5"> compromise and we've</font>

1207
00:46:57,549 --> 00:47:01,329
figured out<font color="#E5E5E5"> some ways</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> prevent</font>

1208
00:46:59,109 --> 00:47:05,200
compromise and most importantly there's

1209
00:47:01,329 --> 00:47:06,520
a whole experience the more you

1210
00:47:05,200 --> 00:47:08,200
understand<font color="#E5E5E5"> Quattro and how a dubious</font>

1211
00:47:06,520 --> 00:47:10,780
works<font color="#E5E5E5"> the easier it is in your</font>

1212
00:47:08,200 --> 00:47:13,990
<font color="#CCCCCC">environment to detect and work off</font>

1213
00:47:10,780 --> 00:47:15,400
anomalous behavior<font color="#CCCCCC"> I mentioned that it's</font>

1214
00:47:13,990 --> 00:47:17,680
or if you remember<font color="#E5E5E5"> that when we were</font>

1215
00:47:15,400 --> 00:47:20,710
looking<font color="#CCCCCC"> through how AWS actually works</font>

1216
00:47:17,680 --> 00:47:22,690
<font color="#CCCCCC">it's up</font><font color="#E5E5E5"> to the API and the service that</font>

1217
00:47:20,710 --> 00:47:24,369
<font color="#E5E5E5">you're calling the API against to</font>

1218
00:47:22,690 --> 00:47:25,750
actually log it to cloud<font color="#CCCCCC"> shell and so</font>

1219
00:47:24,369 --> 00:47:27,280
what that<font color="#CCCCCC"> really means is not</font>

1220
00:47:25,750 --> 00:47:29,230
everything's logged in<font color="#E5E5E5"> clout drill and</font>

1221
00:47:27,280 --> 00:47:31,119
it's important to<font color="#E5E5E5"> understand what's</font>

1222
00:47:29,230 --> 00:47:32,470
actually logged<font color="#E5E5E5"> and so I have an open</font>

1223
00:47:31,119 --> 00:47:34,750
<font color="#E5E5E5">source project where I'm attempting to</font>

1224
00:47:32,470 --> 00:47:37,029
<font color="#E5E5E5">actually do that and enumerate every API</font>

1225
00:47:34,750 --> 00:47:39,190
call in AWS and then cross-reference

1226
00:47:37,029 --> 00:47:40,599
that<font color="#E5E5E5"> to what it's logged in</font><font color="#CCCCCC"> Quattro</font><font color="#E5E5E5"> feel</font>

1227
00:47:39,190 --> 00:47:42,940
<font color="#E5E5E5">free to take a</font><font color="#CCCCCC"> look at it it's called</font>

1228
00:47:40,599 --> 00:47:47,079
<font color="#CCCCCC">Trailblazer because we're blazing</font><font color="#E5E5E5"> Cloud</font>

1229
00:47:42,940 --> 00:47:49,779
trail since 2018<font color="#CCCCCC"> there's an</font><font color="#E5E5E5"> example</font>

1230
00:47:47,079 --> 00:47:51,789
<font color="#CCCCCC">implementation of the credential</font>

1231
00:47:49,779 --> 00:47:53,950
<font color="#E5E5E5">compromise detection and our</font><font color="#CCCCCC"> skunk works</font>

1232
00:47:51,789 --> 00:47:56,770
repo as well as the metadata proxy

1233
00:47:53,950 --> 00:48:00,460
example<font color="#E5E5E5"> so I urge you</font><font color="#CCCCCC"> all if you have</font>

1234
00:47:56,770 --> 00:48:02,049
<font color="#CCCCCC">any sort</font><font color="#E5E5E5"> of itching to take</font><font color="#CCCCCC"> a look and</font>

1235
00:48:00,460 --> 00:48:04,450
<font color="#E5E5E5">try</font><font color="#CCCCCC"> to fix</font><font color="#E5E5E5"> these kind of things in your</font>

1236
00:48:02,049 --> 00:48:06,099
<font color="#E5E5E5">environment</font><font color="#CCCCCC"> please</font><font color="#E5E5E5"> take a look</font><font color="#CCCCCC"> if you</font>

1237
00:48:04,450 --> 00:48:07,720
have any questions or feedback<font color="#E5E5E5"> I'm happy</font>

1238
00:48:06,099 --> 00:48:10,180
to answer those as well

1239
00:48:07,720 --> 00:48:12,419
but thank you<font color="#E5E5E5"> all for</font><font color="#CCCCCC"> coming out today</font>

1240
00:48:10,180 --> 00:48:15,740
once again<font color="#E5E5E5"> I'm will from Netflix and</font>

1241
00:48:12,420 --> 00:48:19,130
<font color="#E5E5E5">Thank You</font><font color="#CCCCCC"> app sect for having me</font>

1242
00:48:15,740 --> 00:48:19,129
[Applause]

1243
00:48:19,560 --> 00:48:27,290
[Music]

