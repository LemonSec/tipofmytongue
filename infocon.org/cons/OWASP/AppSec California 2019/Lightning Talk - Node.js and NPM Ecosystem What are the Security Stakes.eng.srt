1
00:00:08,270 --> 00:00:13,800
everyone thanks a lot for coming to my

2
00:00:10,440 --> 00:00:16,110
<font color="#CCCCCC">torch there is some swag at</font><font color="#E5E5E5"> the end of</font>

3
00:00:13,800 --> 00:00:17,820
the room so feel free to take<font color="#CCCCCC"> them after</font>

4
00:00:16,110 --> 00:00:20,430
<font color="#CCCCCC">the talk because now I'm talking</font><font color="#E5E5E5"> and I'm</font>

5
00:00:17,820 --> 00:00:22,860
expecting you<font color="#E5E5E5"> to so</font><font color="#CCCCCC"> i'm vladimir</font>

6
00:00:20,430 --> 00:00:25,710
<font color="#CCCCCC">duthiers I was a lead nodejs engineer in</font>

7
00:00:22,860 --> 00:00:28,349
a security<font color="#E5E5E5"> startup we do</font><font color="#CCCCCC"> web sake real</font>

8
00:00:25,710 --> 00:00:30,750
name<font color="#CCCCCC"> scream but today I'm mostly talking</font>

9
00:00:28,349 --> 00:00:33,180
on behalf of the<font color="#E5E5E5"> no des security working</font>

10
00:00:30,750 --> 00:00:37,860
group<font color="#CCCCCC"> I'm a member that</font><font color="#E5E5E5"> a member so no</font>

11
00:00:33,180 --> 00:00:39,570
<font color="#E5E5E5">js' crabber a collaborator you can</font>

12
00:00:37,860 --> 00:00:43,350
follow me on<font color="#E5E5E5"> twitter at</font><font color="#CCCCCC"> paul the fate of</font>

13
00:00:39,570 --> 00:00:45,600
<font color="#E5E5E5">finally on github</font><font color="#CCCCCC"> I think the first</font>

14
00:00:43,350 --> 00:00:48,360
thing we<font color="#CCCCCC"> should discuss is what is not</font>

15
00:00:45,600 --> 00:00:51,210
<font color="#CCCCCC">jeaious</font><font color="#E5E5E5"> to do everyone knows which is</font>

16
00:00:48,360 --> 00:00:54,450
not joyous or in the room<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> okay</font>

17
00:00:51,210 --> 00:00:55,800
let's quickly go<font color="#CCCCCC"> around what it is no</font>

18
00:00:54,450 --> 00:00:58,680
dress<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> runtime</font>

19
00:00:55,800 --> 00:01:01,769
like<font color="#E5E5E5"> Java like will be like pythons</font><font color="#CCCCCC"> and</font>

20
00:00:58,680 --> 00:01:03,780
the main language you use with<font color="#CCCCCC"> that is</font>

21
00:01:01,770 --> 00:01:06,090
JavaScript<font color="#CCCCCC"> thanks to a piece of</font><font color="#E5E5E5"> software</font>

22
00:01:03,780 --> 00:01:09,930
named v8 that<font color="#CCCCCC"> has</font><font color="#E5E5E5"> been developed by</font>

23
00:01:06,090 --> 00:01:12,570
Google<font color="#CCCCCC"> for the Chrome web browser so</font>

24
00:01:09,930 --> 00:01:15,090
most of<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a web browser</font><font color="#E5E5E5"> on their</font>

25
00:01:12,570 --> 00:01:17,669
laptops<font color="#E5E5E5"> so on their cell phone so you</font>

26
00:01:15,090 --> 00:01:20,130
have a JavaScript<font color="#E5E5E5"> runtime locally in the</font>

27
00:01:17,670 --> 00:01:22,260
browser node.js is another one<font color="#CCCCCC"> that does</font>

28
00:01:20,130 --> 00:01:25,530
not<font color="#E5E5E5"> really need a web browser to execute</font>

29
00:01:22,260 --> 00:01:28,020
<font color="#E5E5E5">JavaScript it has when specificity is</font>

30
00:01:25,530 --> 00:01:30,240
that it's mono threaded so you have only

31
00:01:28,020 --> 00:01:32,580
<font color="#E5E5E5">one thread for the wool</font><font color="#CCCCCC"> JavaScript</font>

32
00:01:30,240 --> 00:01:34,979
process what does that mean<font color="#E5E5E5"> that means</font>

33
00:01:32,580 --> 00:01:37,050
<font color="#E5E5E5">you can do only one</font><font color="#CCCCCC"> thing at a time</font><font color="#E5E5E5"> in a</font>

34
00:01:34,980 --> 00:01:39,659
java web<font color="#E5E5E5"> server</font><font color="#CCCCCC"> each time you've got an</font>

35
00:01:37,050 --> 00:01:42,780
HTTP request<font color="#CCCCCC"> it creates a new thread</font><font color="#E5E5E5"> and</font>

36
00:01:39,659 --> 00:01:45,000
the HTTP<font color="#CCCCCC"> request is is handled in that</font>

37
00:01:42,780 --> 00:01:47,550
new thread in<font color="#CCCCCC"> Nadia's you've got mono</font>

38
00:01:45,000 --> 00:01:50,010
thread where everything happens<font color="#CCCCCC"> so the</font>

39
00:01:47,550 --> 00:01:52,080
question is who<font color="#CCCCCC"> can node.js handles more</font>

40
00:01:50,010 --> 00:01:54,090
than one HTTP request at a time<font color="#CCCCCC"> because</font>

41
00:01:52,080 --> 00:01:56,850
<font color="#E5E5E5">if you've got one thread you</font><font color="#CCCCCC"> can do</font><font color="#E5E5E5"> only</font>

42
00:01:54,090 --> 00:01:59,640
<font color="#E5E5E5">one</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that fine node.js</font><font color="#E5E5E5"> is a</font>

43
00:01:56,850 --> 00:02:02,070
synchronous by default<font color="#E5E5E5"> that means that</font>

44
00:01:59,640 --> 00:02:04,170
when you are<font color="#CCCCCC"> having a web server</font>

45
00:02:02,070 --> 00:02:06,298
most of what it does is<font color="#E5E5E5"> waiting it's</font>

46
00:02:04,170 --> 00:02:09,568
waiting<font color="#CCCCCC"> for connections it's waiting for</font>

47
00:02:06,299 --> 00:02:10,080
<font color="#CCCCCC">an HTTP 5 sequel database to answer</font><font color="#E5E5E5"> our</font>

48
00:02:09,568 --> 00:02:12,208
query

49
00:02:10,080 --> 00:02:14,610
<font color="#CCCCCC">it's rating for another service trance</font>

50
00:02:12,209 --> 00:02:16,870
or something all this time basically<font color="#E5E5E5"> is</font>

51
00:02:14,610 --> 00:02:20,829
lost in a<font color="#E5E5E5"> multi-threaded environment</font>

52
00:02:16,870 --> 00:02:23,140
<font color="#E5E5E5">in not</font><font color="#CCCCCC"> Jas when we went to</font><font color="#E5E5E5"> answer an</font>

53
00:02:20,829 --> 00:02:25,299
HTTP request you are<font color="#CCCCCC"> waiting for</font><font color="#E5E5E5"> the</font>

54
00:02:23,140 --> 00:02:27,488
<font color="#E5E5E5">data you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> start to endure</font><font color="#CCCCCC"> another</font>

55
00:02:25,299 --> 00:02:29,650
<font color="#E5E5E5">HTTP request start doing other things</font>

56
00:02:27,489 --> 00:02:33,340
<font color="#E5E5E5">that's why we call it as synchronous</font>

57
00:02:29,650 --> 00:02:35,799
<font color="#E5E5E5">because most of</font><font color="#CCCCCC"> what you do will</font><font color="#E5E5E5"> happen</font>

58
00:02:33,340 --> 00:02:38,739
when there<font color="#E5E5E5"> will be time for you to have</font>

59
00:02:35,799 --> 00:02:41,230
<font color="#E5E5E5">it it's actually extremely efficient and</font>

60
00:02:38,739 --> 00:02:43,420
that's how the nginx web server is

61
00:02:41,230 --> 00:02:47,108
<font color="#CCCCCC">working in handling</font><font color="#E5E5E5"> so many requests at</font>

62
00:02:43,420 --> 00:02:47,950
the<font color="#E5E5E5"> same time one</font><font color="#CCCCCC"> of the large interest</font>

63
00:02:47,109 --> 00:02:50,530
of<font color="#CCCCCC"> nodejs</font>

64
00:02:47,950 --> 00:02:53,108
is the<font color="#E5E5E5"> ecosystem the ecosystem is built</font>

65
00:02:50,530 --> 00:02:56,799
<font color="#E5E5E5">around a tool named NPM that is also</font><font color="#CCCCCC"> a</font>

66
00:02:53,109 --> 00:03:00,010
commercial<font color="#CCCCCC"> company that handle</font><font color="#E5E5E5"> a package</font>

67
00:02:56,799 --> 00:03:03,250
registry and NPM is currently<font color="#E5E5E5"> the</font><font color="#CCCCCC"> most</font>

68
00:03:00,010 --> 00:03:06,668
popular package registry in the world<font color="#E5E5E5"> as</font>

69
00:03:03,250 --> 00:03:08,379
you can see it's out<font color="#E5E5E5"> run</font><font color="#CCCCCC"> Melvin central</font>

70
00:03:06,669 --> 00:03:11,680
pretty quickly and it's still growing

71
00:03:08,379 --> 00:03:13,870
exponentially<font color="#E5E5E5"> you look at this curve</font>

72
00:03:11,680 --> 00:03:18,419
<font color="#CCCCCC">every other year</font><font color="#E5E5E5"> it has the same shape</font>

73
00:03:13,870 --> 00:03:23,409
<font color="#E5E5E5">because NPM ecosystem is always growing</font>

74
00:03:18,419 --> 00:03:26,620
incredibly nodejs is used for<font color="#E5E5E5"> a lot of</font>

75
00:03:23,409 --> 00:03:28,209
<font color="#E5E5E5">things the main idea is</font><font color="#CCCCCC"> to build web</font>

76
00:03:26,620 --> 00:03:31,209
servers with it<font color="#E5E5E5"> and it's pretty powerful</font>

77
00:03:28,209 --> 00:03:34,419
<font color="#E5E5E5">at it</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of people like</font><font color="#CCCCCC"> to hack</font>

78
00:03:31,209 --> 00:03:35,979
around and do IOT and one of the other

79
00:03:34,419 --> 00:03:39,849
<font color="#CCCCCC">menus of nodejs</font>

80
00:03:35,979 --> 00:03:41,109
is front-end tooling so if you're

81
00:03:39,849 --> 00:03:44,078
<font color="#CCCCCC">working</font><font color="#E5E5E5"> in a company</font><font color="#CCCCCC"> that has a</font>

82
00:03:41,109 --> 00:03:46,690
front-end web<font color="#E5E5E5"> site it's extremely likely</font>

83
00:03:44,079 --> 00:03:48,819
<font color="#E5E5E5">that the front-end developers have</font>

84
00:03:46,690 --> 00:03:51,849
<font color="#CCCCCC">node.js locally and</font><font color="#E5E5E5"> used when p.m.</font>

85
00:03:48,819 --> 00:03:54,518
ecosystem<font color="#E5E5E5"> to get react to get view to</font>

86
00:03:51,849 --> 00:04:00,760
get lodash ing<font color="#CCCCCC"> query</font><font color="#E5E5E5"> and they are using</font>

87
00:03:54,519 --> 00:04:03,340
<font color="#E5E5E5">NPM and node.js locally daily</font><font color="#CCCCCC"> a quick</font>

88
00:04:00,760 --> 00:04:07,689
<font color="#CCCCCC">word about</font><font color="#E5E5E5"> movies and</font><font color="#CCCCCC"> Link nodejs</font>

89
00:04:03,340 --> 00:04:10,900
<font color="#E5E5E5">and who is in charge</font><font color="#CCCCCC"> of nodejs</font><font color="#E5E5E5"> security</font>

90
00:04:07,689 --> 00:04:15,250
so not<font color="#CCCCCC"> j/s is actually under foundation</font>

91
00:04:10,900 --> 00:04:16,449
<font color="#E5E5E5">names node.js foundation that's under</font>

92
00:04:15,250 --> 00:04:19,870
the umbrella of<font color="#E5E5E5"> the</font>

93
00:04:16,449 --> 00:04:22,240
<font color="#E5E5E5">line-x</font><font color="#CCCCCC"> foundation the node.js foundation</font>

94
00:04:19,870 --> 00:04:25,120
is vendor-neutral sponsored by a few

95
00:04:22,240 --> 00:04:27,840
<font color="#E5E5E5">gloria sponsors like Microsoft hacker</font>

96
00:04:25,120 --> 00:04:30,639
one<font color="#E5E5E5"> or Google and it's currently</font>

97
00:04:27,840 --> 00:04:32,169
<font color="#E5E5E5">deciding to merge with the JavaScript</font>

98
00:04:30,639 --> 00:04:35,229
foundation that is another<font color="#CCCCCC"> open-source</font>

99
00:04:32,169 --> 00:04:37,359
foundation<font color="#E5E5E5"> node.js is no person an open</font>

100
00:04:35,229 --> 00:04:40,120
source project<font color="#CCCCCC"> and technical dishes</font>

101
00:04:37,360 --> 00:04:43,150
<font color="#E5E5E5">decisions are taken by</font><font color="#CCCCCC"> a technical</font>

102
00:04:40,120 --> 00:04:46,330
steering committee for<font color="#CCCCCC"> no js' also known</font>

103
00:04:43,150 --> 00:04:50,409
as the TSC<font color="#E5E5E5"> that is made of most active</font>

104
00:04:46,330 --> 00:04:53,200
node.js<font color="#CCCCCC"> open source collaborators the</font>

105
00:04:50,409 --> 00:04:56,020
<font color="#E5E5E5">TSE has chartered</font><font color="#CCCCCC"> a security working</font>

106
00:04:53,200 --> 00:04:58,360
<font color="#E5E5E5">group that is in charge of policies and</font>

107
00:04:56,020 --> 00:05:00,219
<font color="#E5E5E5">process regarding</font><font color="#CCCCCC"> security for node.js</font>

108
00:04:58,360 --> 00:05:04,180
score and<font color="#CCCCCC"> nodejs</font>

109
00:05:00,219 --> 00:05:07,360
ecosystem<font color="#CCCCCC"> we handle vulnerable open</font>

110
00:05:04,180 --> 00:05:10,150
<font color="#E5E5E5">source a native a licensed vulnerability</font>

111
00:05:07,360 --> 00:05:12,460
base meaning if you want that about

112
00:05:10,150 --> 00:05:15,429
vulnerabilities in the node.js ecosystem

113
00:05:12,460 --> 00:05:18,460
<font color="#E5E5E5">or about node.js</font><font color="#CCCCCC"> Co we handle that</font><font color="#E5E5E5"> and</font>

114
00:05:15,430 --> 00:05:21,250
we<font color="#E5E5E5"> are also in charge of evangelism</font><font color="#CCCCCC"> an</font>

115
00:05:18,460 --> 00:05:25,419
assistant<font color="#CCCCCC"> has a wool ecosystem</font><font color="#E5E5E5"> to help</font>

116
00:05:21,250 --> 00:05:28,060
maintainer building safer modules<font color="#E5E5E5"> this</font>

117
00:05:25,419 --> 00:05:31,090
<font color="#E5E5E5">working</font><font color="#CCCCCC"> group is actually</font><font color="#E5E5E5"> handling</font><font color="#CCCCCC"> two</font>

118
00:05:28,060 --> 00:05:33,610
bug bounty programs that are offered<font color="#CCCCCC"> by</font>

119
00:05:31,090 --> 00:05:37,210
hacker<font color="#CCCCCC"> 1 and we thank them</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> that</font>

120
00:05:33,610 --> 00:05:39,580
the first one is a<font color="#CCCCCC"> baboon Tufano GS core</font>

121
00:05:37,210 --> 00:05:42,870
itself<font color="#E5E5E5"> if people find vulnerabilities in</font>

122
00:05:39,580 --> 00:05:45,729
the runtime<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> this a cure one</font>

123
00:05:42,870 --> 00:05:48,339
program distribute rewards thanks to a

124
00:05:45,729 --> 00:05:50,380
<font color="#E5E5E5">sponsor that is the Internet backbone TC</font>

125
00:05:48,339 --> 00:05:54,279
<font color="#E5E5E5">I babysat from source</font><font color="#CCCCCC"> author</font><font color="#E5E5E5"> project</font>

126
00:05:50,380 --> 00:05:56,560
<font color="#E5E5E5">like Python or Ruby</font><font color="#CCCCCC"> so if you find a</font>

127
00:05:54,279 --> 00:05:58,150
<font color="#CCCCCC">vulnerability in</font><font color="#E5E5E5"> the scope of the bug</font>

128
00:05:56,560 --> 00:06:00,520
bounty<font color="#E5E5E5"> program please don't find</font>

129
00:05:58,150 --> 00:06:03,460
vulnerabilities in the<font color="#E5E5E5"> test of libraries</font>

130
00:06:00,520 --> 00:06:07,389
we used in<font color="#E5E5E5"> Nadia's that happens</font><font color="#CCCCCC"> we might</font>

131
00:06:03,460 --> 00:06:09,870
give you a reward for<font color="#CCCCCC"> that also</font><font color="#E5E5E5"> after</font>

132
00:06:07,389 --> 00:06:13,900
<font color="#CCCCCC">that there</font><font color="#E5E5E5"> is a private repository where</font>

133
00:06:09,870 --> 00:06:16,570
selected contributors<font color="#CCCCCC"> and third party</font>

134
00:06:13,900 --> 00:06:19,388
members<font color="#CCCCCC"> we of the community can fix</font>

135
00:06:16,570 --> 00:06:23,610
node.js<font color="#E5E5E5"> please feel free to sit down now</font>

136
00:06:19,389 --> 00:06:26,320
few<font color="#CCCCCC"> free chairs don't stay at the back</font>

137
00:06:23,610 --> 00:06:28,750
also<font color="#E5E5E5"> there is a second</font><font color="#CCCCCC"> backbone T</font>

138
00:06:26,320 --> 00:06:31,510
program for the ecosystem

139
00:06:28,750 --> 00:06:32,680
meaning<font color="#E5E5E5"> you remember those millions of</font>

140
00:06:31,510 --> 00:06:35,019
packages<font color="#CCCCCC"> on</font><font color="#E5E5E5"> NPM</font>

141
00:06:32,680 --> 00:06:39,940
<font color="#E5E5E5">we are having a bug bounty program for</font>

142
00:06:35,019 --> 00:06:42,580
that<font color="#E5E5E5"> you can't get</font><font color="#CCCCCC"> reward</font><font color="#E5E5E5"> for it yet</font>

143
00:06:39,940 --> 00:06:44,680
two weeks ago<font color="#CCCCCC"> conveys contacted us</font><font color="#E5E5E5"> as I</font>

144
00:06:42,580 --> 00:06:47,340
want to sponsor<font color="#CCCCCC"> it will soon start to</font>

145
00:06:44,680 --> 00:06:51,130
<font color="#CCCCCC">give rewards for some some</font>

146
00:06:47,340 --> 00:06:53,049
vulnerabilities<font color="#E5E5E5"> and for instance there</font>

147
00:06:51,130 --> 00:06:55,390
is<font color="#E5E5E5"> a guy named Olivia</font>

148
00:06:53,050 --> 00:06:57,340
<font color="#CCCCCC">Taub is giving a talk right</font><font color="#E5E5E5"> now and last</font>

149
00:06:55,390 --> 00:06:59,169
week<font color="#CCCCCC"> he just came at us and say hey I</font>

150
00:06:57,340 --> 00:07:00,820
<font color="#E5E5E5">found 20</font><font color="#CCCCCC"> on our abilities in the</font>

151
00:06:59,170 --> 00:07:03,250
ecosystem it's the same one<font color="#CCCCCC"> in twenty</font>

152
00:07:00,820 --> 00:07:05,800
different packages can you help me<font color="#E5E5E5"> I</font>

153
00:07:03,250 --> 00:07:07,750
think<font color="#CCCCCC"> that</font><font color="#E5E5E5"> fixed in the war ecosystem</font>

154
00:07:05,800 --> 00:07:09,580
and we did<font color="#E5E5E5"> that together and other kind</font>

155
00:07:07,750 --> 00:07:11,830
<font color="#CCCCCC">of thing we do so if you're maintaining</font>

156
00:07:09,580 --> 00:07:14,169
a package and you receive an<font color="#E5E5E5"> email from</font>

157
00:07:11,830 --> 00:07:18,340
us<font color="#E5E5E5"> we will help you make your package</font>

158
00:07:14,170 --> 00:07:20,230
safer also we've got<font color="#CCCCCC"> a public repo of</font>

159
00:07:18,340 --> 00:07:22,349
vulnerabilities for<font color="#CCCCCC"> core and the</font>

160
00:07:20,230 --> 00:07:24,460
ecosystem so feel free to build tooling

161
00:07:22,350 --> 00:07:27,190
<font color="#E5E5E5">open-source or internally in your</font>

162
00:07:24,460 --> 00:07:29,500
<font color="#E5E5E5">computer in your company this is an MIT</font>

163
00:07:27,190 --> 00:07:36,040
license so<font color="#CCCCCC"> you are totally free to use</font>

164
00:07:29,500 --> 00:07:38,440
this data set<font color="#E5E5E5"> so now I will talk it's no</font>

165
00:07:36,040 --> 00:07:41,080
<font color="#E5E5E5">js' security when a while and I will</font>

166
00:07:38,440 --> 00:07:44,469
<font color="#E5E5E5">discuss</font><font color="#CCCCCC"> Hewitt AG vectors I've seen in</font>

167
00:07:41,080 --> 00:07:46,960
the<font color="#E5E5E5"> wild in</font><font color="#CCCCCC"> node.js and</font><font color="#E5E5E5"> b1 there will be</font>

168
00:07:44,470 --> 00:07:49,120
code<font color="#E5E5E5"> that's the only part and I will be</font>

169
00:07:46,960 --> 00:07:52,510
<font color="#E5E5E5">JavaScript code</font><font color="#CCCCCC"> and I know I</font><font color="#E5E5E5"> know it's</font>

170
00:07:49,120 --> 00:07:55,200
<font color="#CCCCCC">JavaScript so don't love too much</font><font color="#E5E5E5"> please</font>

171
00:07:52,510 --> 00:07:58,060
that's<font color="#E5E5E5"> my favorite</font><font color="#CCCCCC"> language in the world</font>

172
00:07:55,200 --> 00:08:00,340
so we will start easy with<font color="#CCCCCC"> sequin</font>

173
00:07:58,060 --> 00:08:02,470
injections and I hope most of<font color="#CCCCCC"> you are</font>

174
00:08:00,340 --> 00:08:04,840
familiar<font color="#CCCCCC"> with</font><font color="#E5E5E5"> them and we will go</font>

175
00:08:02,470 --> 00:08:07,330
<font color="#E5E5E5">through a secret injection in nodejs</font>

176
00:08:04,840 --> 00:08:10,450
<font color="#E5E5E5">that will be just to familiarize you</font>

177
00:08:07,330 --> 00:08:13,870
with<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> so here you've got a</font>

178
00:08:10,450 --> 00:08:16,380
<font color="#CCCCCC">simple JavaScript</font><font color="#E5E5E5"> node.js endpoint using</font>

179
00:08:13,870 --> 00:08:19,090
the web framework<font color="#E5E5E5"> Express which</font><font color="#CCCCCC"> is most</font>

180
00:08:16,380 --> 00:08:22,810
popular<font color="#E5E5E5"> with framework</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the node.js</font>

181
00:08:19,090 --> 00:08:25,780
galaxy<font color="#E5E5E5"> so on line</font><font color="#CCCCCC"> one we take</font><font color="#E5E5E5"> the</font>

182
00:08:22,810 --> 00:08:27,880
<font color="#CCCCCC">application object and we</font><font color="#E5E5E5"> add a get met</font>

183
00:08:25,780 --> 00:08:30,729
method on<font color="#CCCCCC"> it meaning that we are</font>

184
00:08:27,880 --> 00:08:34,179
registering a<font color="#E5E5E5"> new endpoint and that will</font>

185
00:08:30,730 --> 00:08:37,419
be a HTTP GET endpoint as the first

186
00:08:34,179 --> 00:08:41,348
argument to<font color="#CCCCCC"> that</font><font color="#E5E5E5"> method we pass we pass</font>

187
00:08:37,419 --> 00:08:44,439
the endpoint<font color="#CCCCCC"> you re</font><font color="#E5E5E5"> write this endpoint</font>

188
00:08:41,349 --> 00:08:45,040
<font color="#E5E5E5">will be a get method on the path slash</font>

189
00:08:44,440 --> 00:08:46,680
<font color="#CCCCCC">post</font>

190
00:08:45,040 --> 00:08:48,689
slash ID

191
00:08:46,680 --> 00:08:51,839
<font color="#E5E5E5">and the current theme in the ID is</font>

192
00:08:48,690 --> 00:08:53,430
dynamic and then<font color="#CCCCCC"> the sermon thing we</font>

193
00:08:51,839 --> 00:08:55,050
passed as a method is a callback

194
00:08:53,430 --> 00:08:57,569
function that's a function that<font color="#E5E5E5"> will be</font>

195
00:08:55,050 --> 00:09:00,029
called<font color="#E5E5E5"> each time someone makes an HTTP</font>

196
00:08:57,570 --> 00:09:01,740
requests to<font color="#CCCCCC"> that endpoint and it takes</font>

197
00:09:00,029 --> 00:09:05,100
two arguments the<font color="#CCCCCC"> first one being the</font>

198
00:09:01,740 --> 00:09:08,580
HTTP<font color="#CCCCCC"> request</font><font color="#E5E5E5"> rack and the HTTP response</font>

199
00:09:05,100 --> 00:09:12,630
<font color="#CCCCCC">race and we</font><font color="#E5E5E5"> will get data from rack and</font>

200
00:09:08,580 --> 00:09:16,290
<font color="#CCCCCC">perch that time to res so on line two</font>

201
00:09:12,630 --> 00:09:19,140
what we do we<font color="#CCCCCC"> actually prepare an sequel</font>

202
00:09:16,290 --> 00:09:22,800
query select star from items<font color="#E5E5E5"> where ID</font>

203
00:09:19,140 --> 00:09:25,080
equals and then we check<font color="#E5E5E5"> the parents of</font>

204
00:09:22,800 --> 00:09:27,479
the HTTP<font color="#CCCCCC"> requests from</font><font color="#E5E5E5"> the request</font>

205
00:09:25,080 --> 00:09:30,690
<font color="#E5E5E5">object</font><font color="#CCCCCC"> here we</font><font color="#E5E5E5"> take the narrow one named</font>

206
00:09:27,480 --> 00:09:32,640
ID and we add that<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the sequel query</font>

207
00:09:30,690 --> 00:09:34,649
and as you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> there is a terrible</font>

208
00:09:32,640 --> 00:09:37,640
secret injection<font color="#E5E5E5"> because we are just</font>

209
00:09:34,649 --> 00:09:40,440
concatenating strings with user inputs

210
00:09:37,640 --> 00:09:42,779
then we<font color="#CCCCCC"> swirl that to the database</font>

211
00:09:40,440 --> 00:09:44,850
database dot read query and the database

212
00:09:42,779 --> 00:09:46,770
<font color="#CCCCCC">elsewhere with another callback</font>

213
00:09:44,850 --> 00:09:49,230
functions that's because<font color="#E5E5E5"> node.js is a</font>

214
00:09:46,770 --> 00:09:51,449
synchronous you can't do synchronous

215
00:09:49,230 --> 00:09:53,880
call as you will do in Java you can<font color="#E5E5E5"> put</font>

216
00:09:51,450 --> 00:09:56,580
the result in a variable with assignment

217
00:09:53,880 --> 00:09:59,100
then you just provide a<font color="#CCCCCC"> function and the</font>

218
00:09:56,580 --> 00:10:00,990
framework will say hey<font color="#CCCCCC"> know the result</font>

219
00:09:59,100 --> 00:10:03,870
<font color="#E5E5E5">are available I will call the</font><font color="#CCCCCC"> function</font>

220
00:10:00,990 --> 00:10:07,380
with<font color="#E5E5E5"> the result of</font><font color="#CCCCCC"> the query and then we</font>

221
00:10:03,870 --> 00:10:10,830
<font color="#CCCCCC">purge that in the</font><font color="#E5E5E5"> JSON file to the HTTP</font>

222
00:10:07,380 --> 00:10:13,529
response<font color="#E5E5E5"> so no surprise if the first</font>

223
00:10:10,830 --> 00:10:16,920
pair<font color="#E5E5E5"> is the ID parameter is the</font><font color="#CCCCCC"> integer</font>

224
00:10:13,529 --> 00:10:20,490
one the sequel query becomes select star

225
00:10:16,920 --> 00:10:22,770
from<font color="#E5E5E5"> items where ID equals</font><font color="#CCCCCC"> one and the</font>

226
00:10:20,490 --> 00:10:25,529
outcome of the HTTP<font color="#E5E5E5"> request</font><font color="#CCCCCC"> will be all</font>

227
00:10:22,770 --> 00:10:27,900
the<font color="#CCCCCC"> document</font><font color="#E5E5E5"> in the table</font><font color="#CCCCCC"> that have an</font>

228
00:10:25,529 --> 00:10:29,670
ID name one<font color="#E5E5E5"> and give the curve the table</font>

229
00:10:27,900 --> 00:10:33,630
is well made there will be only<font color="#CCCCCC"> one</font>

230
00:10:29,670 --> 00:10:35,790
element let's hack into that<font color="#CCCCCC"> because a</font>

231
00:10:33,630 --> 00:10:39,660
we are at<font color="#CCCCCC"> Apps X we want to do an AB</font>

232
00:10:35,790 --> 00:10:42,120
section<font color="#E5E5E5"> and what if instead of just an</font>

233
00:10:39,660 --> 00:10:45,870
integer someone was mad<font color="#E5E5E5"> and would put</font>

234
00:10:42,120 --> 00:10:49,470
<font color="#E5E5E5">one or true as a</font><font color="#CCCCCC"> nighty as a parameter</font>

235
00:10:45,870 --> 00:10:51,630
<font color="#E5E5E5">in the HTTP</font><font color="#CCCCCC"> request the sequel query</font>

236
00:10:49,470 --> 00:10:55,529
becomes<font color="#E5E5E5"> select star from a times reality</font>

237
00:10:51,630 --> 00:10:58,230
ID equals 1 or<font color="#E5E5E5"> true and the</font><font color="#CCCCCC"> result</font><font color="#E5E5E5"> of</font>

238
00:10:55,529 --> 00:11:00,120
the HTTP<font color="#E5E5E5"> calls is totally</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> it's</font>

239
00:10:58,230 --> 00:11:03,930
all the document<font color="#CCCCCC"> in</font>

240
00:11:00,120 --> 00:11:06,509
table<font color="#E5E5E5"> and so far so</font><font color="#CCCCCC"> good that's just a</font>

241
00:11:03,930 --> 00:11:09,120
basic sequel query<font color="#CCCCCC"> secret injection</font>

242
00:11:06,509 --> 00:11:11,370
<font color="#E5E5E5">after we seen some in PHP in Java in</font>

243
00:11:09,120 --> 00:11:15,959
Ruby in Python in every web language

244
00:11:11,370 --> 00:11:19,319
really let's go through more<font color="#CCCCCC"> node GSC</font>

245
00:11:15,959 --> 00:11:22,018
attacks<font color="#CCCCCC"> so we'll be doing</font><font color="#E5E5E5"> type inferring</font>

246
00:11:19,319 --> 00:11:25,680
<font color="#E5E5E5">or object injection the idea of this</font>

247
00:11:22,019 --> 00:11:28,529
attack is to push data into<font color="#CCCCCC"> a web server</font>

248
00:11:25,680 --> 00:11:30,449
with a type that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not expected because</font>

249
00:11:28,529 --> 00:11:33,689
javascript is<font color="#E5E5E5"> not a typed language and</font>

250
00:11:30,449 --> 00:11:37,769
web framework in<font color="#CCCCCC"> node.js</font><font color="#E5E5E5"> don't have by</font>

251
00:11:33,689 --> 00:11:40,649
default<font color="#E5E5E5"> type checking meaning</font><font color="#CCCCCC"> that for</font>

252
00:11:37,769 --> 00:11:43,470
instance<font color="#E5E5E5"> where a framework where a web</font>

253
00:11:40,649 --> 00:11:45,629
app will be expecting a string<font color="#CCCCCC"> you could</font>

254
00:11:43,470 --> 00:11:48,180
put an<font color="#CCCCCC"> object</font><font color="#E5E5E5"> so let's go through this</font>

255
00:11:45,629 --> 00:11:50,639
<font color="#E5E5E5">other controller first line we've got</font>

256
00:11:48,180 --> 00:11:52,620
<font color="#E5E5E5">something we already know this were this</font>

257
00:11:50,639 --> 00:11:56,399
time we won't register<font color="#CCCCCC"> or</font><font color="#E5E5E5"> get endpoint</font>

258
00:11:52,620 --> 00:11:59,339
we will register<font color="#CCCCCC"> past one and we will</font>

259
00:11:56,399 --> 00:12:01,019
start<font color="#E5E5E5"> to create a bongo DB query so in</font>

260
00:11:59,339 --> 00:12:02,879
MongoDB you don't do<font color="#E5E5E5"> queries with</font>

261
00:12:01,019 --> 00:12:05,610
strings you do that with objects and

262
00:12:02,879 --> 00:12:07,949
method on a database<font color="#E5E5E5"> object so on line</font>

263
00:12:05,610 --> 00:12:10,079
<font color="#E5E5E5">two we</font><font color="#CCCCCC"> just create a query object and we</font>

264
00:12:07,949 --> 00:12:12,389
will populate that with<font color="#E5E5E5"> what</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to</font>

265
00:12:10,079 --> 00:12:14,670
fetch from the MongoDB collection

266
00:12:12,389 --> 00:12:15,209
collection is the equivalent of table in

267
00:12:14,670 --> 00:12:19,469
<font color="#CCCCCC">magadi</font>

268
00:12:15,209 --> 00:12:22,559
so what we say on line<font color="#E5E5E5"> three</font><font color="#CCCCCC"> is if there</font>

269
00:12:19,470 --> 00:12:26,279
<font color="#CCCCCC">is in the request body in the</font><font color="#E5E5E5"> payload</font><font color="#CCCCCC"> of</font>

270
00:12:22,559 --> 00:12:29,519
<font color="#CCCCCC">the request field name</font><font color="#E5E5E5"> title let's just</font>

271
00:12:26,279 --> 00:12:32,610
put that into the query object<font color="#E5E5E5"> and if</font>

272
00:12:29,519 --> 00:12:35,550
there is in the HTTP body<font color="#CCCCCC"> field name</font>

273
00:12:32,610 --> 00:12:39,059
desired type<font color="#CCCCCC"> let's put it under the type</font>

274
00:12:35,550 --> 00:12:41,429
name in the query object and then we

275
00:12:39,059 --> 00:12:43,679
<font color="#CCCCCC">throw that at MongoDB and we wait</font><font color="#E5E5E5"> for</font>

276
00:12:41,429 --> 00:12:47,399
<font color="#E5E5E5">the response for the result of the query</font>

277
00:12:43,679 --> 00:12:50,550
<font color="#E5E5E5">so once again let's hear it goes in real</font>

278
00:12:47,399 --> 00:12:54,779
life<font color="#E5E5E5"> if the body contains desired type</font>

279
00:12:50,550 --> 00:12:58,469
blog the Mongo DB query becomes document

280
00:12:54,779 --> 00:13:01,079
got find<font color="#CCCCCC"> typed blog</font><font color="#E5E5E5"> which means give me</font>

281
00:12:58,470 --> 00:13:04,290
<font color="#E5E5E5">everything in your collection that</font><font color="#CCCCCC"> has a</font>

282
00:13:01,079 --> 00:13:07,378
field name type and<font color="#E5E5E5"> a value name blog</font>

283
00:13:04,290 --> 00:13:09,179
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> a string blog</font><font color="#E5E5E5"> and as a result</font>

284
00:13:07,379 --> 00:13:10,000
you<font color="#CCCCCC"> would get the document which have a</font>

285
00:13:09,179 --> 00:13:13,240
field named

286
00:13:10,000 --> 00:13:16,000
and the value blog since since<font color="#CCCCCC"> it's no</font>

287
00:13:13,240 --> 00:13:17,800
sequel you don't know if documents have

288
00:13:16,000 --> 00:13:19,629
this field<font color="#E5E5E5"> you don't know what's the</font>

289
00:13:17,800 --> 00:13:21,609
type of the<font color="#CCCCCC"> field you don't</font><font color="#E5E5E5"> even know if</font>

290
00:13:19,629 --> 00:13:25,509
document exists<font color="#E5E5E5"> as no sequel nobody</font>

291
00:13:21,610 --> 00:13:28,300
knows whether that are<font color="#E5E5E5"> and let's say we</font>

292
00:13:25,509 --> 00:13:30,730
want<font color="#CCCCCC"> to inject</font><font color="#E5E5E5"> that with object</font>

293
00:13:28,300 --> 00:13:32,649
injection<font color="#E5E5E5"> so in the nominal case the</font>

294
00:13:30,730 --> 00:13:35,350
developer<font color="#CCCCCC"> who created this endpoint</font><font color="#E5E5E5"> is</font>

295
00:13:32,649 --> 00:13:38,649
expecting your string as a value for

296
00:13:35,350 --> 00:13:40,870
desired type in the HTTP payload<font color="#E5E5E5"> but</font>

297
00:13:38,649 --> 00:13:43,389
nothing actually<font color="#E5E5E5"> is preventing anyone</font>

298
00:13:40,870 --> 00:13:45,759
from crafting a request in which they

299
00:13:43,389 --> 00:13:49,120
<font color="#E5E5E5">will put an object at this point so</font>

300
00:13:45,759 --> 00:13:51,490
<font color="#CCCCCC">let's say</font><font color="#E5E5E5"> desired type is a sub object</font>

301
00:13:49,120 --> 00:13:54,490
then with dollar any which translates to

302
00:13:51,490 --> 00:13:57,670
not equal<font color="#CCCCCC"> in MongoDB query language and</font>

303
00:13:54,490 --> 00:14:00,699
then the integer<font color="#CCCCCC"> zero the sequence in</font>

304
00:13:57,670 --> 00:14:03,610
Mongo DB query becomes document<font color="#E5E5E5"> that</font>

305
00:14:00,699 --> 00:14:06,310
find type not equal to zero which

306
00:14:03,610 --> 00:14:09,670
translates to give me all the documents

307
00:14:06,310 --> 00:14:13,029
in<font color="#CCCCCC"> the collection</font><font color="#E5E5E5"> which field type is</font>

308
00:14:09,670 --> 00:14:15,610
not the integer<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> and as a result we</font>

309
00:14:13,029 --> 00:14:17,709
<font color="#E5E5E5">will get all these documents</font><font color="#CCCCCC"> in the</font>

310
00:14:15,610 --> 00:14:19,750
collection<font color="#CCCCCC"> because if it's properly made</font>

311
00:14:17,709 --> 00:14:23,979
we can expect<font color="#CCCCCC"> that it contains a string</font>

312
00:14:19,750 --> 00:14:26,889
as a value for the<font color="#CCCCCC"> fields type so since</font>

313
00:14:23,980 --> 00:14:28,990
there is no data match a type matching

314
00:14:26,889 --> 00:14:31,269
in node.js by default you<font color="#CCCCCC"> have to add</font>

315
00:14:28,990 --> 00:14:33,579
<font color="#CCCCCC">about yourself you can do object</font>

316
00:14:31,269 --> 00:14:35,559
injection pretty easily<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that also</font>

317
00:14:33,579 --> 00:14:37,779
work with other types where integer I

318
00:14:35,559 --> 00:14:39,399
expected you can<font color="#E5E5E5"> throw strings and the</font>

319
00:14:37,779 --> 00:14:42,910
framework will not protect you<font color="#E5E5E5"> from</font>

320
00:14:39,399 --> 00:14:46,269
against that<font color="#E5E5E5"> now let's go to something</font>

321
00:14:42,910 --> 00:14:48,430
<font color="#CCCCCC">that is even more</font><font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> T reg X dos</font>

322
00:14:46,269 --> 00:14:53,319
does anyone has<font color="#E5E5E5"> heard about reg ex dos</font>

323
00:14:48,430 --> 00:14:55,138
here<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> let's go through that</font><font color="#E5E5E5"> reg X</font>

324
00:14:53,319 --> 00:14:59,649
dos

325
00:14:55,139 --> 00:15:01,569
it's the idea in node.js<font color="#E5E5E5"> it's it's mono</font>

326
00:14:59,649 --> 00:15:04,389
<font color="#CCCCCC">freddied remember so you can do only one</font>

327
00:15:01,569 --> 00:15:07,569
<font color="#CCCCCC">thing at</font><font color="#E5E5E5"> a time</font><font color="#CCCCCC"> so if</font><font color="#E5E5E5"> I've got a very</font>

328
00:15:04,389 --> 00:15:10,360
very very slow synchronous chunk of code

329
00:15:07,569 --> 00:15:12,610
<font color="#CCCCCC">no js' will never go back to also a</font>

330
00:15:10,360 --> 00:15:14,529
synchronous operation<font color="#E5E5E5"> it will be just</font>

331
00:15:12,610 --> 00:15:18,459
running<font color="#E5E5E5"> that synchronous piece of code</font>

332
00:15:14,529 --> 00:15:19,569
<font color="#E5E5E5">forever until it ends so if you can find</font>

333
00:15:18,459 --> 00:15:22,839
<font color="#E5E5E5">a</font><font color="#CCCCCC"> regex</font>

334
00:15:19,569 --> 00:15:23,680
in some code<font color="#CCCCCC"> that is extremely slow you</font>

335
00:15:22,839 --> 00:15:25,360
can craft

336
00:15:23,680 --> 00:15:27,160
payload<font color="#CCCCCC"> you will send</font><font color="#E5E5E5"> us an end point</font>

337
00:15:25,360 --> 00:15:29,200
and the end point<font color="#E5E5E5"> will just take forever</font>

338
00:15:27,160 --> 00:15:31,300
to run<font color="#E5E5E5"> but since we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> in the</font>

339
00:15:29,200 --> 00:15:35,320
JavaScript main thread<font color="#E5E5E5"> it will just</font>

340
00:15:31,300 --> 00:15:37,569
block<font color="#E5E5E5"> the world process so let's go</font>

341
00:15:35,320 --> 00:15:39,640
<font color="#E5E5E5">through numbers so on the left hand side</font>

342
00:15:37,570 --> 00:15:41,589
<font color="#CCCCCC">we've just a small piece</font><font color="#E5E5E5"> of code the</font>

343
00:15:39,640 --> 00:15:45,189
idea is<font color="#E5E5E5"> to have regex</font>

344
00:15:41,589 --> 00:15:48,160
in the<font color="#E5E5E5"> stranger</font><font color="#CCCCCC"> and then we'll have a</font>

345
00:15:45,190 --> 00:15:50,170
string in s that<font color="#CCCCCC"> is an exclamation</font><font color="#E5E5E5"> mark</font>

346
00:15:48,160 --> 00:15:52,510
<font color="#E5E5E5">at the first iteration</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we just</font>

347
00:15:50,170 --> 00:15:56,890
happened<font color="#CCCCCC"> days at the left-hand</font><font color="#E5E5E5"> side of</font>

348
00:15:52,510 --> 00:15:59,140
<font color="#CCCCCC">the string so I will only check that for</font>

349
00:15:56,890 --> 00:16:01,779
multiple<font color="#E5E5E5"> of five because</font><font color="#CCCCCC"> it's really</font>

350
00:15:59,140 --> 00:16:04,630
real slow to run this kind<font color="#E5E5E5"> of bench so</font>

351
00:16:01,779 --> 00:16:07,330
when the<font color="#E5E5E5"> string s</font><font color="#CCCCCC"> only compared contains</font>

352
00:16:04,630 --> 00:16:10,149
an exclamation mark<font color="#CCCCCC"> the time to computer</font>

353
00:16:07,330 --> 00:16:13,870
reg X<font color="#E5E5E5"> the</font><font color="#CCCCCC"> rest is pretty small</font><font color="#E5E5E5"> it's like</font>

354
00:16:10,149 --> 00:16:16,480
a fifth of a millisecond when you've got

355
00:16:13,870 --> 00:16:19,300
five days<font color="#E5E5E5"> and an exclamation mark it's</font>

356
00:16:16,480 --> 00:16:21,370
still pretty<font color="#E5E5E5"> fast</font><font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> it's way under</font>

357
00:16:19,300 --> 00:16:23,550
milliseconds it's a tenth of a million

358
00:16:21,370 --> 00:16:26,320
pretty much the same order of magnitude

359
00:16:23,550 --> 00:16:28,390
<font color="#E5E5E5">when you've got 10s but what's</font>

360
00:16:26,320 --> 00:16:31,930
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> is what</font><font color="#CCCCCC"> happens when</font><font color="#E5E5E5"> you've</font>

361
00:16:28,390 --> 00:16:34,390
got 15s<font color="#E5E5E5"> you</font><font color="#CCCCCC"> almost get to</font><font color="#E5E5E5"> 1 milliseconds</font>

362
00:16:31,930 --> 00:16:37,180
<font color="#E5E5E5">and when you've got 20 of</font><font color="#CCCCCC"> them you go to</font>

363
00:16:34,390 --> 00:16:40,270
28 milliseconds<font color="#CCCCCC"> and</font><font color="#E5E5E5"> when you've got 25</font>

364
00:16:37,180 --> 00:16:43,959
<font color="#CCCCCC">of them</font><font color="#E5E5E5"> you almost get to 1/7 just to</font>

365
00:16:40,270 --> 00:16:48,160
compute<font color="#E5E5E5"> one regex synchronously so I</font>

366
00:16:43,959 --> 00:16:50,920
went until<font color="#CCCCCC"> 38</font><font color="#E5E5E5"> it took 28 seconds</font><font color="#CCCCCC"> and to</font>

367
00:16:48,160 --> 00:16:52,900
be truthfully transparent with 35 it

368
00:16:50,920 --> 00:16:56,709
took more than<font color="#CCCCCC"> 100</font><font color="#E5E5E5"> else</font><font color="#CCCCCC"> I stopped</font><font color="#E5E5E5"> the</font>

369
00:16:52,900 --> 00:16:59,800
bench<font color="#E5E5E5"> with 25 days and one</font><font color="#CCCCCC"> exclamation</font>

370
00:16:56,709 --> 00:17:02,079
mark<font color="#E5E5E5"> you can break a regex</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that</font>

371
00:16:59,800 --> 00:17:04,329
means that the<font color="#E5E5E5"> world node.js server is</font>

372
00:17:02,080 --> 00:17:06,730
unresponsive<font color="#CCCCCC"> while</font><font color="#E5E5E5"> it's computing this</font>

373
00:17:04,329 --> 00:17:10,659
<font color="#E5E5E5">reg X so you want to protect your</font>

374
00:17:06,730 --> 00:17:13,720
applications about battery<font color="#E5E5E5"> text so as</font>

375
00:17:10,660 --> 00:17:16,420
you can<font color="#E5E5E5"> see the chart doesn't mean</font>

376
00:17:13,720 --> 00:17:18,670
anything because<font color="#CCCCCC"> the impacts are so high</font>

377
00:17:16,420 --> 00:17:21,459
and<font color="#E5E5E5"> that's a log scale the impacts are</font>

378
00:17:18,670 --> 00:17:23,380
<font color="#CCCCCC">so high Z it's the exponential growth of</font>

379
00:17:21,459 --> 00:17:27,520
the computing time is so high that<font color="#E5E5E5"> you</font>

380
00:17:23,380 --> 00:17:30,190
can't even<font color="#E5E5E5"> see anything on a graph and</font>

381
00:17:27,520 --> 00:17:32,080
that's<font color="#E5E5E5"> it for the code attacks and now</font>

382
00:17:30,190 --> 00:17:36,370
we'll go<font color="#E5E5E5"> to something a bit</font><font color="#CCCCCC"> sneaky</font><font color="#E5E5E5"> here</font>

383
00:17:32,080 --> 00:17:40,750
<font color="#E5E5E5">that what I call ecosystem attacks so</font>

384
00:17:36,370 --> 00:17:42,879
is that so so<font color="#CCCCCC"> wooing this company as a</font>

385
00:17:40,750 --> 00:17:45,400
website<font color="#CCCCCC"> boost company as a website</font>

386
00:17:42,880 --> 00:17:48,490
<font color="#E5E5E5">everyone right so it's really likely</font>

387
00:17:45,400 --> 00:17:50,320
that<font color="#E5E5E5"> your website is</font><font color="#CCCCCC"> using this package</font>

388
00:17:48,490 --> 00:17:52,120
that's<font color="#CCCCCC"> name</font><font color="#E5E5E5"> wetback</font>

389
00:17:50,320 --> 00:17:54,700
that's a package that<font color="#CCCCCC"> front-end</font>

390
00:17:52,120 --> 00:17:58,110
developer<font color="#CCCCCC"> use to burn</font><font color="#E5E5E5"> the their web</font>

391
00:17:54,700 --> 00:18:01,510
application into one file or<font color="#E5E5E5"> few bundles</font>

392
00:17:58,110 --> 00:18:03,279
that's<font color="#E5E5E5"> each node and this graph</font>

393
00:18:01,510 --> 00:18:05,020
<font color="#CCCCCC">represent</font><font color="#E5E5E5"> a package</font><font color="#CCCCCC"> that will</font><font color="#E5E5E5"> be</font>

394
00:18:03,279 --> 00:18:10,419
downloaded on your machine when<font color="#CCCCCC"> you</font>

395
00:18:05,020 --> 00:18:13,539
<font color="#E5E5E5">download web pack there are</font><font color="#CCCCCC"> 30</font><font color="#E5E5E5"> 3337 of</font>

396
00:18:10,419 --> 00:18:15,909
them<font color="#E5E5E5"> and that's all the people</font><font color="#CCCCCC"> who have</font>

397
00:18:13,539 --> 00:18:18,730
published right over<font color="#E5E5E5"> these packages that</font>

398
00:18:15,909 --> 00:18:20,980
<font color="#E5E5E5">means all these people basically can run</font>

399
00:18:18,730 --> 00:18:23,289
arbitrary<font color="#CCCCCC"> code on your</font><font color="#E5E5E5"> developers</font>

400
00:18:20,980 --> 00:18:25,419
desktop and the developers desktop of

401
00:18:23,289 --> 00:18:27,070
your<font color="#E5E5E5"> company and that's a mess and</font>

402
00:18:25,419 --> 00:18:29,740
<font color="#E5E5E5">that's the default installation you do</font>

403
00:18:27,070 --> 00:18:32,408
<font color="#E5E5E5">npm install web pack</font><font color="#CCCCCC"> you get all of</font>

404
00:18:29,740 --> 00:18:35,320
these downloaded on<font color="#CCCCCC"> your machine</font><font color="#E5E5E5"> meaning</font>

405
00:18:32,409 --> 00:18:38,230
<font color="#CCCCCC">that the possible point of failure</font><font color="#E5E5E5"> are</font>

406
00:18:35,320 --> 00:18:40,870
huge<font color="#CCCCCC"> if I compromised</font><font color="#E5E5E5"> this package I can</font>

407
00:18:38,230 --> 00:18:42,580
compromise<font color="#E5E5E5"> every user of it back same</font>

408
00:18:40,870 --> 00:18:45,428
for this<font color="#E5E5E5"> one same for this one same for</font>

409
00:18:42,580 --> 00:18:48,129
that one<font color="#E5E5E5"> and that's a prediction</font><font color="#CCCCCC"> I'm</font>

410
00:18:45,429 --> 00:18:52,029
making today<font color="#E5E5E5"> here at</font><font color="#CCCCCC"> AB SEC OSP</font>

411
00:18:48,130 --> 00:18:54,549
California<font color="#CCCCCC"> 2008</font><font color="#E5E5E5"> 18 more and more attacks</font>

412
00:18:52,029 --> 00:18:57,840
this year<font color="#E5E5E5"> will target developers desktop</font>

413
00:18:54,549 --> 00:19:02,168
not through email phishing<font color="#CCCCCC"> not for bad</font>

414
00:18:57,840 --> 00:19:04,750
documents<font color="#E5E5E5"> not for</font><font color="#CCCCCC"> word documents with</font>

415
00:19:02,169 --> 00:19:07,990
macros but with tentative of using

416
00:19:04,750 --> 00:19:11,230
malicious NPM packages<font color="#E5E5E5"> and to</font>

417
00:19:07,990 --> 00:19:13,750
<font color="#CCCCCC">demonstrate that</font><font color="#E5E5E5"> that actually happened</font>

418
00:19:11,230 --> 00:19:15,159
last year<font color="#CCCCCC"> a couple time and the main one</font>

419
00:19:13,750 --> 00:19:20,260
is<font color="#CCCCCC"> years wind</font>

420
00:19:15,159 --> 00:19:22,870
so yes lint is one of the most popular

421
00:19:20,260 --> 00:19:25,779
package<font color="#E5E5E5"> in the JavaScript world everyone</font>

422
00:19:22,870 --> 00:19:27,250
use it to check code quality<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not</font>

423
00:19:25,779 --> 00:19:29,169
supposed to<font color="#E5E5E5"> be in production in your</font>

424
00:19:27,250 --> 00:19:31,299
<font color="#E5E5E5">servers but it's supposed to be run</font>

425
00:19:29,169 --> 00:19:33,309
everywhere<font color="#E5E5E5"> on</font><font color="#CCCCCC"> your under developers</font>

426
00:19:31,299 --> 00:19:35,330
desktop machine<font color="#E5E5E5"> when they want to check</font>

427
00:19:33,309 --> 00:19:37,970
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the code is</font>

428
00:19:35,330 --> 00:19:40,100
is formatted<font color="#E5E5E5"> properly and following</font>

429
00:19:37,970 --> 00:19:42,169
certain<font color="#E5E5E5"> rule set and you can define</font><font color="#CCCCCC"> your</font>

430
00:19:40,100 --> 00:19:45,498
<font color="#E5E5E5">own rule set like never use this method</font>

431
00:19:42,169 --> 00:19:48,769
yes lint is downloaded half a<font color="#E5E5E5"> million</font>

432
00:19:45,499 --> 00:19:51,730
<font color="#E5E5E5">times a</font><font color="#CCCCCC"> day</font><font color="#E5E5E5"> half a million times a day</font>

433
00:19:48,769 --> 00:19:51,730
it's huge

434
00:19:52,840 --> 00:20:01,610
July 12 last year<font color="#E5E5E5"> someone managed to</font>

435
00:19:58,330 --> 00:20:04,850
compromise<font color="#E5E5E5"> the account of</font><font color="#CCCCCC"> the maintainer</font>

436
00:20:01,610 --> 00:20:07,340
of<font color="#CCCCCC"> es liens</font><font color="#E5E5E5"> and this person</font><font color="#CCCCCC"> actually</font>

437
00:20:04,850 --> 00:20:09,678
published two modules that are<font color="#E5E5E5"> not yet</font>

438
00:20:07,340 --> 00:20:11,539
<font color="#E5E5E5">linked but upon which es</font><font color="#CCCCCC"> kin depends</font>

439
00:20:09,679 --> 00:20:13,879
meaning when you install es means you

440
00:20:11,539 --> 00:20:15,710
get this module downloaded it<font color="#CCCCCC"> compromise</font>

441
00:20:13,879 --> 00:20:19,369
<font color="#E5E5E5">this person compromise those two modules</font>

442
00:20:15,710 --> 00:20:22,090
with a small warm that actually fetched

443
00:20:19,369 --> 00:20:24,470
pay an attack payload from<font color="#CCCCCC"> PES beam and</font>

444
00:20:22,090 --> 00:20:26,928
hopefully someone managed to collect

445
00:20:24,470 --> 00:20:29,840
<font color="#E5E5E5">this payload before it wasn't published</font>

446
00:20:26,929 --> 00:20:32,450
and basically<font color="#CCCCCC"> this payload was leaking</font>

447
00:20:29,840 --> 00:20:35,359
the content of dot<font color="#E5E5E5"> and kms he filed on</font>

448
00:20:32,450 --> 00:20:38,119
developers machine<font color="#E5E5E5"> that's where the NPM</font>

449
00:20:35,359 --> 00:20:40,279
token stand<font color="#CCCCCC"> meaning</font><font color="#E5E5E5"> that if I can still</font>

450
00:20:38,119 --> 00:20:43,309
the NPM token of someone I can publish

451
00:20:40,279 --> 00:20:46,159
<font color="#E5E5E5">any package I want on their behalf</font><font color="#CCCCCC"> so if</font>

452
00:20:43,309 --> 00:20:48,559
I steal the pose NPM token of<font color="#E5E5E5"> someone</font>

453
00:20:46,159 --> 00:20:51,289
was<font color="#E5E5E5"> published right over</font><font color="#CCCCCC"> expressed</font><font color="#E5E5E5"> for</font>

454
00:20:48,559 --> 00:20:55,850
instance<font color="#E5E5E5"> I can basically warm 90% of</font>

455
00:20:51,289 --> 00:20:58,700
node.js servers in the world so when

456
00:20:55,850 --> 00:21:01,158
this was<font color="#CCCCCC"> discovered and p.m. as a</font>

457
00:20:58,700 --> 00:21:03,830
company revoked<font color="#CCCCCC"> all users token at once</font>

458
00:21:01,159 --> 00:21:06,919
<font color="#CCCCCC">all</font><font color="#E5E5E5"> of them</font><font color="#CCCCCC"> offer all users they</font>

459
00:21:03,830 --> 00:21:10,220
<font color="#E5E5E5">estimated that 4.5 K user accounts have</font>

460
00:21:06,919 --> 00:21:12,980
<font color="#CCCCCC">been compromised</font><font color="#E5E5E5"> and they took measure</font>

461
00:21:10,220 --> 00:21:15,559
by adding the ability<font color="#E5E5E5"> to enforce</font><font color="#CCCCCC"> 2fa</font><font color="#E5E5E5"> at</font>

462
00:21:12,980 --> 00:21:17,359
publication<font color="#CCCCCC"> of modules</font><font color="#E5E5E5"> like if you want</font>

463
00:21:15,559 --> 00:21:19,609
to<font color="#E5E5E5"> publish</font><font color="#CCCCCC"> this module you will have to</font>

464
00:21:17,359 --> 00:21:22,100
provide<font color="#CCCCCC"> it with</font><font color="#E5E5E5"> a code it's still not</font>

465
00:21:19,609 --> 00:21:24,999
<font color="#E5E5E5">widely used in the community</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font>

466
00:21:22,100 --> 00:21:27,439
time the<font color="#E5E5E5"> node.js working group issued</font>

467
00:21:24,999 --> 00:21:30,859
<font color="#E5E5E5">communique for everyone in the community</font>

468
00:21:27,440 --> 00:21:33,169
and pinned some<font color="#E5E5E5"> enterprise user of</font>

469
00:21:30,859 --> 00:21:35,629
<font color="#CCCCCC">Nadia's</font><font color="#E5E5E5"> to ensure that they were not</font>

470
00:21:33,169 --> 00:21:40,249
<font color="#E5E5E5">using malicious version of years Clint</font>

471
00:21:35,629 --> 00:21:42,559
and<font color="#CCCCCC"> now for the last part</font><font color="#E5E5E5"> let's give you</font>

472
00:21:40,249 --> 00:21:45,289
a few actionable<font color="#E5E5E5"> data items if you</font><font color="#CCCCCC"> have</font>

473
00:21:42,559 --> 00:21:48,090
<font color="#CCCCCC">not Julia's in</font><font color="#E5E5E5"> production or on your</font>

474
00:21:45,289 --> 00:21:52,830
developers desktop

475
00:21:48,090 --> 00:21:55,500
so first one I'm surprised I have to say

476
00:21:52,830 --> 00:21:58,530
that<font color="#E5E5E5"> keep it up to date</font><font color="#CCCCCC"> we've got a</font>

477
00:21:55,500 --> 00:22:01,920
predictable release cycle with<font color="#E5E5E5"> LTS</font>

478
00:21:58,530 --> 00:22:04,410
versions<font color="#E5E5E5"> and maintenance version just</font>

479
00:22:01,920 --> 00:22:07,020
<font color="#E5E5E5">make sure you are never using</font><font color="#CCCCCC"> something</font>

480
00:22:04,410 --> 00:22:09,810
<font color="#CCCCCC">that is not under maintenance fashion</font>

481
00:22:07,020 --> 00:22:14,490
anywhere that<font color="#E5E5E5"> high</font><font color="#CCCCCC"> hazard</font><font color="#E5E5E5"> and we won't</font>

482
00:22:09,810 --> 00:22:16,050
issue patch for them review the use of

483
00:22:14,490 --> 00:22:19,380
critical modules<font color="#CCCCCC"> so there are some</font>

484
00:22:16,050 --> 00:22:21,810
modules in NPM<font color="#E5E5E5"> in node core like file</font>

485
00:22:19,380 --> 00:22:24,360
system child process that should never

486
00:22:21,810 --> 00:22:26,370
be called with user data that I've not

487
00:22:24,360 --> 00:22:28,320
been sanitized<font color="#E5E5E5"> and that's the first</font>

488
00:22:26,370 --> 00:22:30,419
<font color="#E5E5E5">thing and that's in the booklet</font><font color="#CCCCCC"> you can</font>

489
00:22:28,320 --> 00:22:33,540
<font color="#CCCCCC">fetch at the end of the room</font><font color="#E5E5E5"> most of</font>

490
00:22:30,420 --> 00:22:36,150
<font color="#E5E5E5">this advice are in the booklet</font><font color="#CCCCCC"> sanitize</font>

491
00:22:33,540 --> 00:22:38,070
input to prevent no sequel injection as

492
00:22:36,150 --> 00:22:40,080
I showed you<font color="#CCCCCC"> before I recommend using</font>

493
00:22:38,070 --> 00:22:41,669
the<font color="#CCCCCC"> Joye module for that</font><font color="#E5E5E5"> not only</font>

494
00:22:40,080 --> 00:22:43,409
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it's made by a friend of mine</font>

495
00:22:41,670 --> 00:22:45,210
because<font color="#E5E5E5"> it's high quality and the</font>

496
00:22:43,410 --> 00:22:48,060
dependency tree of this module<font color="#E5E5E5"> is system</font>

497
00:22:45,210 --> 00:22:51,200
is<font color="#E5E5E5"> small</font><font color="#CCCCCC"> you are</font><font color="#E5E5E5"> not getting</font><font color="#CCCCCC"> 1000 of</font>

498
00:22:48,060 --> 00:22:54,060
modules when you just download<font color="#E5E5E5"> this one</font>

499
00:22:51,200 --> 00:22:56,570
test your code for bad<font color="#CCCCCC"> regex there</font><font color="#E5E5E5"> is a</font>

500
00:22:54,060 --> 00:22:59,399
<font color="#E5E5E5">recall tool by my friend</font><font color="#CCCCCC"> jamie davis</font>

501
00:22:56,570 --> 00:23:03,439
<font color="#E5E5E5">that basically scan your code base for</font>

502
00:22:59,400 --> 00:23:03,440
bad<font color="#CCCCCC"> rejects</font><font color="#E5E5E5"> use it it's on github</font>

503
00:23:03,620 --> 00:23:08,280
<font color="#E5E5E5">monitoring</font><font color="#CCCCCC"> your dependencies</font><font color="#E5E5E5"> from known</font>

504
00:23:05,850 --> 00:23:09,840
issues either you can use<font color="#E5E5E5"> the open</font>

505
00:23:08,280 --> 00:23:12,690
<font color="#CCCCCC">source database</font><font color="#E5E5E5"> we provide</font><font color="#CCCCCC"> you and</font>

506
00:23:09,840 --> 00:23:14,100
github<font color="#E5E5E5"> either you can just go next to</font>

507
00:23:12,690 --> 00:23:16,920
the pool and<font color="#E5E5E5"> they are like two or three</font>

508
00:23:14,100 --> 00:23:18,719
<font color="#E5E5E5">companies doing that professionally with</font>

509
00:23:16,920 --> 00:23:21,540
high support<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I've got</font><font color="#E5E5E5"> security</font>

510
00:23:18,720 --> 00:23:23,730
researcher who<font color="#E5E5E5"> always look for new bad</font>

511
00:23:21,540 --> 00:23:28,710
things in<font color="#CCCCCC"> the ecosystem</font><font color="#E5E5E5"> and tell you</font>

512
00:23:23,730 --> 00:23:30,480
about<font color="#E5E5E5"> it</font><font color="#CCCCCC"> monitors the dependency tree so</font>

513
00:23:28,710 --> 00:23:33,420
on the right hand<font color="#CCCCCC"> side we've got</font><font color="#E5E5E5"> a</font>

514
00:23:30,480 --> 00:23:35,940
module<font color="#E5E5E5"> named requests that perform HTTP</font>

515
00:23:33,420 --> 00:23:37,530
requests from a node.js process<font color="#E5E5E5"> and on</font>

516
00:23:35,940 --> 00:23:40,230
the<font color="#CCCCCC"> left-hand side we've got</font><font color="#E5E5E5"> a module</font>

517
00:23:37,530 --> 00:23:42,899
<font color="#E5E5E5">named</font><font color="#CCCCCC"> rec</font><font color="#E5E5E5"> that perform HTTP request from</font>

518
00:23:40,230 --> 00:23:45,300
an<font color="#CCCCCC"> odious process both modules do the</font>

519
00:23:42,900 --> 00:23:47,340
same thing<font color="#E5E5E5"> rec is slightly less popular</font>

520
00:23:45,300 --> 00:23:49,980
<font color="#CCCCCC">than request that is one of the most</font>

521
00:23:47,340 --> 00:23:52,530
popular in<font color="#E5E5E5"> in the ecosystem but when you</font>

522
00:23:49,980 --> 00:23:54,900
don't know<font color="#E5E5E5"> rec you only download boom</font>

523
00:23:52,530 --> 00:23:57,389
and hook at the<font color="#E5E5E5"> same time and</font><font color="#CCCCCC"> that the</font>

524
00:23:54,900 --> 00:23:58,950
only dependencies you're having when you

525
00:23:57,390 --> 00:24:00,340
download<font color="#CCCCCC"> requests you don't load more</font>

526
00:23:58,950 --> 00:24:03,039
than<font color="#E5E5E5"> four to five</font><font color="#CCCCCC"> depending</font>

527
00:24:00,340 --> 00:24:04,809
is<font color="#E5E5E5"> with hazard</font><font color="#CCCCCC"> that come with it</font><font color="#E5E5E5"> and if</font>

528
00:24:03,039 --> 00:24:07,720
you look at the dependencies of boomin

529
00:24:04,809 --> 00:24:10,240
<font color="#CCCCCC">oak</font><font color="#E5E5E5"> they actually don't have any except</font>

530
00:24:07,720 --> 00:24:11,919
each other<font color="#CCCCCC"> so when you download rec you</font>

531
00:24:10,240 --> 00:24:13,659
have only three modules when you don't

532
00:24:11,919 --> 00:24:15,880
know<font color="#CCCCCC"> requests</font><font color="#E5E5E5"> you've got contrast</font>

533
00:24:13,659 --> 00:24:18,460
modules<font color="#E5E5E5"> and that really involve what the</font>

534
00:24:15,880 --> 00:24:21,370
difference<font color="#CCCCCC"> request is a standard project</font>

535
00:24:18,460 --> 00:24:24,309
<font color="#E5E5E5">rec is part of the happy projects at</font>

536
00:24:21,370 --> 00:24:26,590
another<font color="#CCCCCC"> node.js with framework that is</font>

537
00:24:24,309 --> 00:24:29,230
created<font color="#E5E5E5"> to go</font><font color="#CCCCCC"> toward</font><font color="#E5E5E5"> enterprise is free</font>

538
00:24:26,590 --> 00:24:30,699
to use it<font color="#E5E5E5"> and</font><font color="#CCCCCC"> open-source license</font><font color="#E5E5E5"> but</font>

539
00:24:29,230 --> 00:24:32,980
one<font color="#CCCCCC"> of the philosophy of</font><font color="#E5E5E5"> the happy</font>

540
00:24:30,700 --> 00:24:35,590
<font color="#E5E5E5">project is to minimize dependencies</font><font color="#CCCCCC"> that</font>

541
00:24:32,980 --> 00:24:36,820
come from<font color="#E5E5E5"> outside the happy project so</font>

542
00:24:35,590 --> 00:24:39,189
<font color="#E5E5E5">you can be sure</font><font color="#CCCCCC"> that there will be</font>

543
00:24:36,820 --> 00:24:41,799
limited maintainer<font color="#E5E5E5"> and limited hazard</font>

544
00:24:39,190 --> 00:24:44,320
with these packages<font color="#E5E5E5"> feel free to go to</font>

545
00:24:41,799 --> 00:24:48,450
<font color="#E5E5E5">that website before</font><font color="#CCCCCC"> downloading any NPM</font>

546
00:24:44,320 --> 00:24:51,279
package to compute the what will arrive

547
00:24:48,450 --> 00:24:53,529
thanks a<font color="#E5E5E5"> lot for</font><font color="#CCCCCC"> your attention you've</font>

548
00:24:51,279 --> 00:24:55,870
been an amazing<font color="#CCCCCC"> crowd you can ping me</font><font color="#E5E5E5"> at</font>

549
00:24:53,529 --> 00:24:59,440
<font color="#CCCCCC">vlad at trinity or</font><font color="#E5E5E5"> follow me</font><font color="#CCCCCC"> on twitter</font>

550
00:24:55,870 --> 00:25:01,029
so<font color="#CCCCCC"> slides are already an</font><font color="#E5E5E5"> apple cloud is</font>

551
00:24:59,440 --> 00:25:03,970
a slightly different<font color="#CCCCCC"> but I will probably</font>

552
00:25:01,029 --> 00:25:05,679
update<font color="#E5E5E5"> them please take the</font><font color="#CCCCCC"> booklets at</font>

553
00:25:03,970 --> 00:25:08,620
<font color="#CCCCCC">at the end of the room I don't want to</font>

554
00:25:05,679 --> 00:25:10,029
fly<font color="#CCCCCC"> back to Paris with that Evie</font><font color="#E5E5E5"> and I</font>

555
00:25:08,620 --> 00:25:13,629
will take a couple question is<font color="#CCCCCC"> the</font>

556
00:25:10,029 --> 00:25:15,760
reason<font color="#E5E5E5"> he yeah</font>

557
00:25:13,630 --> 00:25:21,659
<font color="#CCCCCC">oh there</font><font color="#E5E5E5"> is a question at the back first</font>

558
00:25:15,760 --> 00:25:24,850
so<font color="#CCCCCC"> you mentioned there are some</font>

559
00:25:21,659 --> 00:25:26,740
vulnerabilities with types<font color="#E5E5E5"> if you use</font>

560
00:25:24,850 --> 00:25:31,590
something like typescript or flow script

561
00:25:26,740 --> 00:25:33,850
with that mitigate not really because

562
00:25:31,590 --> 00:25:35,678
<font color="#E5E5E5">typescript when you use it your code</font>

563
00:25:33,850 --> 00:25:37,899
will<font color="#CCCCCC"> be transformed into</font><font color="#E5E5E5"> JavaScript</font>

564
00:25:35,679 --> 00:25:39,429
<font color="#CCCCCC">before going to production</font><font color="#E5E5E5"> and text read</font>

565
00:25:37,899 --> 00:25:42,879
there's nothing<font color="#E5E5E5"> exact any type checking</font>

566
00:25:39,429 --> 00:25:44,980
at<font color="#E5E5E5"> runtime so</font><font color="#CCCCCC"> it's only</font><font color="#E5E5E5"> a dev tool it</font>

567
00:25:42,880 --> 00:25:53,590
won't provide you with<font color="#E5E5E5"> tech protection</font>

568
00:25:44,980 --> 00:25:55,690
at runtime angular angular since angular

569
00:25:53,590 --> 00:25:57,879
2 is widely using typescript for

570
00:25:55,690 --> 00:26:00,159
everything but you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have you have</font>

571
00:25:57,880 --> 00:26:02,500
typed protection<font color="#E5E5E5"> only</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> runtime like</font>

572
00:26:00,159 --> 00:26:04,510
<font color="#E5E5E5">you can prevent people</font><font color="#CCCCCC"> sorry</font>

573
00:26:02,500 --> 00:26:05,740
only at<font color="#E5E5E5"> Build time you can prevent</font>

574
00:26:04,510 --> 00:26:08,408
people from adding

575
00:26:05,740 --> 00:26:09,820
bad typing during runtime in<font color="#E5E5E5"> JavaScript</font>

576
00:26:08,409 --> 00:26:12,260
except if you inject

577
00:26:09,820 --> 00:26:15,320
type protection algorithm using

578
00:26:12,260 --> 00:26:18,590
<font color="#CCCCCC">joy all the type-checking libraries is</font>

579
00:26:15,320 --> 00:26:24,080
<font color="#E5E5E5">that</font><font color="#CCCCCC"> clearer yeah do you recommend</font><font color="#E5E5E5"> any</font>

580
00:26:18,590 --> 00:26:27,320
particular packages<font color="#CCCCCC"> open</font><font color="#E5E5E5"> source packages</font>

581
00:26:24,080 --> 00:26:29,449
to help<font color="#E5E5E5"> like in your CI CD to make sure</font>

582
00:26:27,320 --> 00:26:35,570
<font color="#E5E5E5">that you're staying up-to-date with CVS</font>

583
00:26:29,450 --> 00:26:37,640
<font color="#E5E5E5">so basically</font><font color="#CCCCCC"> is our couple open source</font>

584
00:26:35,570 --> 00:26:43,760
tools I<font color="#CCCCCC"> don't really</font><font color="#E5E5E5"> know them I know</font>

585
00:26:37,640 --> 00:26:44,990
that<font color="#E5E5E5"> NPM CLI</font><font color="#CCCCCC"> is added</font><font color="#E5E5E5"> CV checking</font><font color="#CCCCCC"> sneak</font>

586
00:26:43,760 --> 00:26:47,870
does that<font color="#E5E5E5"> professional is our</font>

587
00:26:44,990 --> 00:26:50,810
<font color="#E5E5E5">cooperative vendors and so a shameless</font>

588
00:26:47,870 --> 00:26:53,239
plug in at screen we do even<font color="#E5E5E5"> check at</font>

589
00:26:50,810 --> 00:26:54,889
run time like you have a<font color="#E5E5E5"> production</font><font color="#CCCCCC"> you</font>

590
00:26:53,240 --> 00:26:56,810
<font color="#E5E5E5">have not been looking at for six months</font>

591
00:26:54,890 --> 00:27:01,970
we tell you the reason variability in

592
00:26:56,810 --> 00:27:03,800
production at this point so when your

593
00:27:01,970 --> 00:27:06,950
download and PM packages you<font color="#CCCCCC"> have two</font>

594
00:27:03,800 --> 00:27:10,520
<font color="#CCCCCC">issues one</font><font color="#E5E5E5"> is staying</font><font color="#CCCCCC"> up-to-date</font><font color="#E5E5E5"> to</font>

595
00:27:06,950 --> 00:27:12,740
prevent CVS the second one is staying

596
00:27:10,520 --> 00:27:14,780
not<font color="#CCCCCC"> up-to-date to prevent malicious code</font>

597
00:27:12,740 --> 00:27:16,960
from<font color="#E5E5E5"> being downloaded exactly</font>

598
00:27:14,780 --> 00:27:20,389
so how would you solve this problem

599
00:27:16,960 --> 00:27:23,360
<font color="#E5E5E5">considering</font><font color="#CCCCCC"> that there is new releases</font>

600
00:27:20,390 --> 00:27:25,970
<font color="#E5E5E5">of malicious packages that once you</font>

601
00:27:23,360 --> 00:27:32,719
upload once you are on release<font color="#E5E5E5"> then you</font>

602
00:27:25,970 --> 00:27:34,700
pick<font color="#CCCCCC"> the new package so that's a tricky</font>

603
00:27:32,720 --> 00:27:36,830
question because<font color="#E5E5E5"> basically there</font><font color="#CCCCCC"> are not</font>

604
00:27:34,700 --> 00:27:39,740
CVS are not vulnerabilities in all

605
00:27:36,830 --> 00:27:44,659
<font color="#E5E5E5">packages and they come with a cycle and</font>

606
00:27:39,740 --> 00:27:48,980
they don't pop every other day<font color="#E5E5E5"> we try</font>

607
00:27:44,660 --> 00:27:52,280
<font color="#E5E5E5">not to exist the idea is don't go</font>

608
00:27:48,980 --> 00:27:54,770
updated but monitor closely your

609
00:27:52,280 --> 00:27:58,580
dependency tree<font color="#E5E5E5"> know who are the</font><font color="#CCCCCC"> people</font>

610
00:27:54,770 --> 00:28:00,170
<font color="#CCCCCC">who have code in your app I know it's a</font>

611
00:27:58,580 --> 00:28:02,090
<font color="#E5E5E5">lot to</font><font color="#CCCCCC"> do and I know</font><font color="#E5E5E5"> that there is a</font>

612
00:28:00,170 --> 00:28:03,710
<font color="#CCCCCC">start up with name I</font><font color="#E5E5E5"> forgot who is</font>

613
00:28:02,090 --> 00:28:05,750
starting<font color="#E5E5E5"> to provide that commercially</font>

614
00:28:03,710 --> 00:28:08,210
<font color="#CCCCCC">they</font><font color="#E5E5E5"> are based in San</font><font color="#CCCCCC"> Francisco and</font>

615
00:28:05,750 --> 00:28:10,700
<font color="#CCCCCC">Anna's</font><font color="#E5E5E5"> actual name another company</font><font color="#CCCCCC"> name</font>

616
00:28:08,210 --> 00:28:13,550
not<font color="#CCCCCC"> source as what they could certified</font>

617
00:28:10,700 --> 00:28:15,830
packages in which<font color="#E5E5E5"> they advise to use</font>

618
00:28:13,550 --> 00:28:18,200
certain packages or not another<font color="#E5E5E5"> thing</font>

619
00:28:15,830 --> 00:28:21,350
you can do at company level is to have

620
00:28:18,200 --> 00:28:23,720
your own NPM proxy locally<font color="#E5E5E5"> and other</font>

621
00:28:21,350 --> 00:28:25,860
security teams that will vet only

622
00:28:23,720 --> 00:28:27,420
certain version of packages but

623
00:28:25,860 --> 00:28:29,549
you really<font color="#E5E5E5"> needed security teams that</font>

624
00:28:27,420 --> 00:28:33,990
<font color="#E5E5E5">will have enough resources to maintain</font>

625
00:28:29,549 --> 00:28:36,420
that<font color="#E5E5E5"> so basically don't download any</font>

626
00:28:33,990 --> 00:28:38,010
packages when you<font color="#E5E5E5"> true the package make</font>

627
00:28:36,420 --> 00:28:40,920
sure you're<font color="#E5E5E5"> not adding something weird</font>

628
00:28:38,010 --> 00:28:42,660
and<font color="#CCCCCC"> follow a press release</font><font color="#E5E5E5"> read release</font>

629
00:28:40,920 --> 00:28:45,240
note and check the dependency of<font color="#E5E5E5"> the</font>

630
00:28:42,660 --> 00:28:47,490
<font color="#E5E5E5">dependencies except of</font><font color="#CCCCCC"> our healthy</font>

631
00:28:45,240 --> 00:28:49,260
behavior in the JavaScript<font color="#E5E5E5"> ecosystem I</font>

632
00:28:47,490 --> 00:28:52,110
don't have any<font color="#CCCCCC"> a silver bullet solution</font>

633
00:28:49,260 --> 00:28:54,000
to that problem<font color="#CCCCCC"> which website did you</font>

634
00:28:52,110 --> 00:28:55,709
use to generate<font color="#E5E5E5"> the dependency graph</font>

635
00:28:54,000 --> 00:28:58,410
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the maintainer</font>

636
00:28:55,710 --> 00:29:03,650
<font color="#E5E5E5">pictures on the left not</font><font color="#CCCCCC"> this one</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> you</font>

637
00:28:58,410 --> 00:29:06,570
it's the same it's just<font color="#E5E5E5"> it's just a</font><font color="#CCCCCC"> Serb</font>

638
00:29:03,650 --> 00:29:09,210
this one yeah is<font color="#E5E5E5"> that the same</font><font color="#CCCCCC"> website</font>

639
00:29:06,570 --> 00:29:14,040
<font color="#E5E5E5">as a last one</font><font color="#CCCCCC"> wiki</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> just get the</font>

640
00:29:09,210 --> 00:29:18,960
<font color="#E5E5E5">slides on you will have the link</font><font color="#CCCCCC"> sorry</font>

641
00:29:14,040 --> 00:29:21,090
<font color="#CCCCCC">that one in</font><font color="#E5E5E5"> you - Christians once again</font>

642
00:29:18,960 --> 00:29:22,830
feel free to ping<font color="#CCCCCC"> me I'd be more than</font>

643
00:29:21,090 --> 00:29:25,770
happy to help<font color="#E5E5E5"> you with your predictions</font>

644
00:29:22,830 --> 00:29:28,250
<font color="#CCCCCC">I was a resistor</font><font color="#E5E5E5"> and sorry so to avoid</font>

645
00:29:25,770 --> 00:29:31,559
the secret injection kind of attacks

646
00:29:28,250 --> 00:29:34,049
<font color="#CCCCCC">means we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> using sequel eyes like it's</font>

647
00:29:31,559 --> 00:29:37,110
<font color="#E5E5E5">like a</font><font color="#CCCCCC"> warm tool so easy is that</font><font color="#E5E5E5"> helpful</font>

648
00:29:34,049 --> 00:29:38,220
<font color="#E5E5E5">because we already using like Jo I it's</font>

649
00:29:37,110 --> 00:29:41,580
<font color="#E5E5E5">like pretty good actually</font>

650
00:29:38,220 --> 00:29:44,429
yeah so is that<font color="#CCCCCC"> enough</font><font color="#E5E5E5"> otherwise we need</font>

651
00:29:41,580 --> 00:29:46,678
to do any<font color="#E5E5E5"> other so the cool</font><font color="#CCCCCC"> thing about</font>

652
00:29:44,429 --> 00:29:48,690
secure<font color="#E5E5E5"> light is it will prevent this</font>

653
00:29:46,679 --> 00:29:51,450
kind of injection<font color="#E5E5E5"> except if there is a</font>

654
00:29:48,690 --> 00:29:53,400
flow in the<font color="#E5E5E5"> library which is pretty good</font>

655
00:29:51,450 --> 00:29:56,250
<font color="#E5E5E5">because it shows preparedstatement under</font>

656
00:29:53,400 --> 00:29:58,770
the hood<font color="#E5E5E5"> so it's a good library but</font>

657
00:29:56,250 --> 00:30:01,650
that's a bit why<font color="#CCCCCC"> I put sequel injection</font>

658
00:29:58,770 --> 00:30:04,230
at this point because<font color="#CCCCCC"> seek realized is</font>

659
00:30:01,650 --> 00:30:07,100
an ORM<font color="#E5E5E5"> that actually</font><font color="#CCCCCC"> mimics the</font><font color="#E5E5E5"> behavior</font>

660
00:30:04,230 --> 00:30:09,960
of MongoDB queries to build sequel

661
00:30:07,100 --> 00:30:12,240
queries and basically when you're using

662
00:30:09,960 --> 00:30:14,040
sequel eyes you might be vulnerable to

663
00:30:12,240 --> 00:30:16,309
<font color="#CCCCCC">this kind of</font><font color="#E5E5E5"> attacks</font><font color="#CCCCCC"> to object</font>

664
00:30:14,040 --> 00:30:19,320
injections<font color="#E5E5E5"> so you want to put</font>

665
00:30:16,309 --> 00:30:22,590
<font color="#CCCCCC">type-checking library</font><font color="#E5E5E5"> to ensure</font><font color="#CCCCCC"> nobody's</font>

666
00:30:19,320 --> 00:30:24,629
injecting sequel eyes operator or in sub

667
00:30:22,590 --> 00:30:27,209
objects where<font color="#E5E5E5"> you are expecting native</font>

668
00:30:24,630 --> 00:30:30,870
types<font color="#CCCCCC"> yeah means we are we are we are</font>

669
00:30:27,210 --> 00:30:32,490
using<font color="#E5E5E5"> like a GOI I'm not yeah with the</font>

670
00:30:30,870 --> 00:30:34,439
typescript actually<font color="#CCCCCC"> okay</font>

671
00:30:32,490 --> 00:30:36,080
so<font color="#E5E5E5"> just make</font><font color="#CCCCCC"> sure you've got type</font>

672
00:30:34,440 --> 00:30:39,110
checking at<font color="#CCCCCC"> runtime</font>

673
00:30:36,080 --> 00:30:41,300
and for each HTTP request that entails

674
00:30:39,110 --> 00:30:42,709
<font color="#E5E5E5">don't trust user data don't rest user</font>

675
00:30:41,300 --> 00:30:48,710
inputs thank you

676
00:30:42,710 --> 00:30:50,150
that problem<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> it's 10:10 right</font>

677
00:30:48,710 --> 00:30:54,080
now so we're going<font color="#CCCCCC"> to go ahead and take</font>

678
00:30:50,150 --> 00:30:56,200
a<font color="#E5E5E5"> break I'm gonna get lucky block thank</font>

679
00:30:54,080 --> 00:30:56,199
<font color="#E5E5E5">you</font>

