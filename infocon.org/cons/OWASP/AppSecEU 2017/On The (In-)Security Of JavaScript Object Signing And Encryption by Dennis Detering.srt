1
00:00:02,540 --> 00:00:08,590
<font color="#E5E5E5">much and welcome to my</font><font color="#CCCCCC"> talk I'm really</font>

2
00:00:06,529 --> 00:00:11,150
<font color="#E5E5E5">excited to be</font><font color="#CCCCCC"> R this</font><font color="#E5E5E5"> is not only my</font>

3
00:00:08,590 --> 00:00:12,710
<font color="#E5E5E5">first time at an office apps tech</font>

4
00:00:11,150 --> 00:00:15,230
conference but<font color="#CCCCCC"> also my very</font><font color="#E5E5E5"> first time</font>

5
00:00:12,710 --> 00:00:18,520
as<font color="#E5E5E5"> a speaker so I'm really curious where</font>

6
00:00:15,230 --> 00:00:21,980
this<font color="#CCCCCC"> rego and how it is how it</font><font color="#E5E5E5"> could go</font>

7
00:00:18,520 --> 00:00:23,539
<font color="#CCCCCC">my talk will be about the</font><font color="#E5E5E5"> insecurity</font><font color="#CCCCCC"> of</font>

8
00:00:21,980 --> 00:00:25,460
JavaScript<font color="#CCCCCC"> objects signing and</font>

9
00:00:23,539 --> 00:00:29,990
<font color="#E5E5E5">encryption or just in short</font>

10
00:00:25,460 --> 00:00:32,719
<font color="#CCCCCC">Jozy which is basically the</font><font color="#E5E5E5"> results of</font>

11
00:00:29,990 --> 00:00:36,199
my master see this at the<font color="#CCCCCC"> University in</font>

12
00:00:32,719 --> 00:00:38,120
<font color="#CCCCCC">boham and yes just as a short</font>

13
00:00:36,199 --> 00:00:40,638
introduction my<font color="#CCCCCC"> name is Dennis</font><font color="#E5E5E5"> Beijing</font>

14
00:00:38,120 --> 00:00:44,419
<font color="#E5E5E5">I'm working as a penetration tester at</font>

15
00:00:40,639 --> 00:00:45,829
the CSPI in Cologne in Germany<font color="#E5E5E5"> and those</font>

16
00:00:44,420 --> 00:00:49,039
three guys at the bottom<font color="#E5E5E5"> where my</font>

17
00:00:45,829 --> 00:00:52,219
supervisors<font color="#E5E5E5"> and they happen a lot and</font>

18
00:00:49,039 --> 00:00:53,179
supported me and answer the tons of<font color="#E5E5E5"> tons</font>

19
00:00:52,219 --> 00:00:57,469
<font color="#E5E5E5">of mails</font>

20
00:00:53,179 --> 00:01:00,319
I<font color="#E5E5E5"> sent to them to ask them for to ask</font>

21
00:00:57,469 --> 00:01:02,449
any questions<font color="#E5E5E5"> during</font><font color="#CCCCCC"> my research and</font>

22
00:01:00,319 --> 00:01:05,570
during my<font color="#CCCCCC"> master's thesis so thank you</font>

23
00:01:02,449 --> 00:01:07,190
<font color="#CCCCCC">very much for</font><font color="#E5E5E5"> helping me and yeah that's</font>

24
00:01:05,570 --> 00:01:10,429
why I'm<font color="#CCCCCC"> now standing here and presenting</font>

25
00:01:07,190 --> 00:01:13,759
our results what you might expect from

26
00:01:10,430 --> 00:01:17,000
<font color="#E5E5E5">today's</font><font color="#CCCCCC"> talk is basically this so I will</font>

27
00:01:13,760 --> 00:01:20,120
give a short and quick introduction<font color="#CCCCCC"> to</font>

28
00:01:17,000 --> 00:01:22,880
what the<font color="#E5E5E5"> Jason that family</font><font color="#CCCCCC"> basically is</font>

29
00:01:20,120 --> 00:01:25,820
and then I will show you some practical

30
00:01:22,880 --> 00:01:28,759
<font color="#CCCCCC">egg texts and vulnerabilities which is a</font>

31
00:01:25,820 --> 00:01:30,800
signature exclusion key confusion the

32
00:01:28,760 --> 00:01:33,140
<font color="#CCCCCC">Reichenbach a million message attack and</font>

33
00:01:30,800 --> 00:01:36,740
if we have enough<font color="#CCCCCC"> time also</font><font color="#E5E5E5"> a timing</font>

34
00:01:33,140 --> 00:01:39,110
<font color="#CCCCCC">attack on certain libraries and then I</font>

35
00:01:36,740 --> 00:01:42,530
will<font color="#CCCCCC"> introduce our developed</font><font color="#E5E5E5"> pursuit</font>

36
00:01:39,110 --> 00:01:45,260
extension with the<font color="#E5E5E5"> name Joseph to help</font>

37
00:01:42,530 --> 00:01:46,670
testing those libraries and then just a

38
00:01:45,260 --> 00:01:51,230
short yeah

39
00:01:46,670 --> 00:01:54,470
summary end and<font color="#E5E5E5"> a hook so let's get</font>

40
00:01:51,230 --> 00:01:57,620
started was what is Josie<font color="#E5E5E5"> um does</font>

41
00:01:54,470 --> 00:02:01,789
anybody of you already know Josie<font color="#E5E5E5"> or</font><font color="#CCCCCC"> the</font>

42
00:01:57,620 --> 00:02:07,909
Jason that family<font color="#E5E5E5"> stand up to</font><font color="#CCCCCC"> three five</font>

43
00:02:01,790 --> 00:02:13,129
<font color="#CCCCCC">cool</font><font color="#E5E5E5"> so just very click Jason or Josie</font>

44
00:02:07,909 --> 00:02:15,230
is all in all a are all in all<font color="#CCCCCC"> five</font><font color="#E5E5E5"> RFC</font>

45
00:02:13,129 --> 00:02:16,310
standards which<font color="#CCCCCC"> cause the proposed</font>

46
00:02:15,230 --> 00:02:19,040
standard status

47
00:02:16,310 --> 00:02:22,640
in May 2015 so<font color="#CCCCCC"> they are</font><font color="#E5E5E5"> quite new quite</font>

48
00:02:19,040 --> 00:02:24,700
<font color="#CCCCCC">young</font><font color="#E5E5E5"> and the main goal is basically to</font>

49
00:02:22,640 --> 00:02:27,470
<font color="#E5E5E5">be</font><font color="#CCCCCC"> real really simple especially</font>

50
00:02:24,700 --> 00:02:30,250
<font color="#E5E5E5">compared to XML encryption and XML</font>

51
00:02:27,470 --> 00:02:33,910
signatures and they were<font color="#E5E5E5"> designed to be</font>

52
00:02:30,250 --> 00:02:36,470
<font color="#E5E5E5">URL safe</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> they have a</font><font color="#CCCCCC"> so-called</font>

53
00:02:33,910 --> 00:02:39,799
<font color="#E5E5E5">compact sterilization representation</font>

54
00:02:36,470 --> 00:02:42,050
which uses base64 URL encoding<font color="#E5E5E5"> so that</font>

55
00:02:39,800 --> 00:02:45,500
you<font color="#E5E5E5"> are able to use it and within the</font><font color="#CCCCCC"> UL</font>

56
00:02:42,050 --> 00:02:47,810
itself as<font color="#CCCCCC"> an query parameter</font><font color="#E5E5E5"> and they</font>

57
00:02:45,500 --> 00:02:49,880
are designed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> used in spaceman's</font>

58
00:02:47,810 --> 00:02:52,250
range of environments<font color="#E5E5E5"> so they're really</font>

59
00:02:49,880 --> 00:02:54,769
kept small<font color="#E5E5E5"> you will see that later so</font>

60
00:02:52,250 --> 00:02:57,890
<font color="#E5E5E5">that they can also be</font><font color="#CCCCCC"> used in HTTP</font>

61
00:02:54,769 --> 00:03:01,190
authorization headers or<font color="#E5E5E5"> yeah within the</font>

62
00:02:57,890 --> 00:03:04,339
URL<font color="#E5E5E5"> itself and another good thing is</font>

63
00:03:01,190 --> 00:03:06,500
they're self-contained<font color="#CCCCCC"> so there can be</font>

64
00:03:04,340 --> 00:03:09,920
<font color="#E5E5E5">used in status protocols like HTTP and</font>

65
00:03:06,500 --> 00:03:15,890
every<font color="#E5E5E5"> information you need</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> inside</font>

66
00:03:09,920 --> 00:03:18,738
this token<font color="#CCCCCC"> wire</font><font color="#E5E5E5"> those standards might be</font>

67
00:03:15,890 --> 00:03:20,660
quite<font color="#CCCCCC"> good or will be used</font><font color="#E5E5E5"> even</font><font color="#CCCCCC"> more in</font>

68
00:03:18,739 --> 00:03:22,610
the<font color="#E5E5E5"> futures</font><font color="#CCCCCC"> because on the one hand</font>

69
00:03:20,660 --> 00:03:25,280
<font color="#E5E5E5">people from big</font><font color="#CCCCCC"> companies are working</font>

70
00:03:22,610 --> 00:03:28,700
out<font color="#E5E5E5"> so it's people</font><font color="#CCCCCC"> from Google</font><font color="#E5E5E5"> from</font>

71
00:03:25,280 --> 00:03:31,450
Microsoft<font color="#E5E5E5"> and Francisco and the the</font>

72
00:03:28,700 --> 00:03:33,828
standards<font color="#CCCCCC"> were already</font><font color="#E5E5E5"> implemented in</font>

73
00:03:31,450 --> 00:03:36,828
quite early and<font color="#E5E5E5"> really well-known</font>

74
00:03:33,829 --> 00:03:39,410
protocols<font color="#E5E5E5"> and products like for example</font>

75
00:03:36,829 --> 00:03:43,570
<font color="#CCCCCC">in the ACMA protocol for let's encrypt</font>

76
00:03:39,410 --> 00:03:46,130
<font color="#E5E5E5">for the automatic certificate issuance</font>

77
00:03:43,570 --> 00:03:48,680
<font color="#CCCCCC">they are used as authentication</font>

78
00:03:46,130 --> 00:03:52,190
<font color="#E5E5E5">mechanism for</font><font color="#CCCCCC"> Atlassian add-ons</font><font color="#E5E5E5"> and they</font>

79
00:03:48,680 --> 00:03:55,989
are<font color="#E5E5E5"> already used in SSL protocols like</font>

80
00:03:52,190 --> 00:03:57,109
<font color="#CCCCCC">Open ID Connect so what are those</font>

81
00:03:55,989 --> 00:03:58,880
standards

82
00:03:57,109 --> 00:04:02,480
the first one is<font color="#E5E5E5"> chasing that algorithm</font>

83
00:03:58,880 --> 00:04:05,870
<font color="#E5E5E5">which basically describes and specifies</font>

84
00:04:02,480 --> 00:04:07,459
which algorithms can be<font color="#E5E5E5"> used with the</font>

85
00:04:05,870 --> 00:04:09,859
signatures and<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> encryption and</font>

86
00:04:07,459 --> 00:04:12,200
which additional parameters are

87
00:04:09,859 --> 00:04:15,500
necessary and if<font color="#E5E5E5"> you want to use those</font>

88
00:04:12,200 --> 00:04:18,019
algorithms<font color="#E5E5E5"> the second one is</font><font color="#CCCCCC"> chasing</font>

89
00:04:15,500 --> 00:04:21,079
that<font color="#E5E5E5"> P which</font><font color="#CCCCCC"> is simple a specification</font>

90
00:04:18,019 --> 00:04:24,140
<font color="#CCCCCC">of how to what's going</font><font color="#E5E5E5"> on there</font><font color="#CCCCCC"> about</font>

91
00:04:21,079 --> 00:04:26,930
<font color="#CCCCCC">you</font><font color="#E5E5E5"> and represent a cryptographic key in</font>

92
00:04:24,140 --> 00:04:28,490
<font color="#E5E5E5">an</font><font color="#CCCCCC"> Jason based format so here</font><font color="#E5E5E5"> on the</font>

93
00:04:26,930 --> 00:04:29,729
right<font color="#CCCCCC"> side there is an example of</font><font color="#E5E5E5"> an</font>

94
00:04:28,490 --> 00:04:33,569
<font color="#E5E5E5">Jason that</font>

95
00:04:29,729 --> 00:04:36,719
is set so it's<font color="#CCCCCC"> contain</font><font color="#E5E5E5"> multiple keys the</font>

96
00:04:33,569 --> 00:04:39,089
upper<font color="#E5E5E5"> one is is in a elliptic curve</font>

97
00:04:36,719 --> 00:04:41,729
public key<font color="#E5E5E5"> and the the bottom one is an</font>

98
00:04:39,089 --> 00:04:47,370
<font color="#CCCCCC">ARS</font><font color="#E5E5E5"> a public key so</font><font color="#CCCCCC"> that everything is</font>

99
00:04:41,729 --> 00:04:52,199
in a JSON based format the<font color="#E5E5E5"> Jason</font><font color="#CCCCCC"> web</font>

100
00:04:47,370 --> 00:04:55,259
signature is a specification of<font color="#CCCCCC"> how to</font>

101
00:04:52,199 --> 00:04:58,409
integrity project<font color="#E5E5E5"> average error messages</font>

102
00:04:55,259 --> 00:05:01,259
<font color="#E5E5E5">in adjacent based formats with for</font>

103
00:04:58,409 --> 00:05:04,589
example<font color="#CCCCCC"> digital signatures or message</font>

104
00:05:01,259 --> 00:05:06,749
authentication codes<font color="#E5E5E5"> and this snippet at</font>

105
00:05:04,589 --> 00:05:09,990
the bottom is basically the result<font color="#E5E5E5"> of</font>

106
00:05:06,749 --> 00:05:12,990
such an<font color="#CCCCCC"> Jason DEP</font><font color="#E5E5E5"> signatures so this is</font>

107
00:05:09,990 --> 00:05:18,419
really<font color="#E5E5E5"> really short</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> really simple</font>

108
00:05:12,990 --> 00:05:20,819
and it's it it's always built up with

109
00:05:18,419 --> 00:05:23,460
three<font color="#E5E5E5"> parts</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> there's the header at the</font>

110
00:05:20,819 --> 00:05:26,159
top then comes our payload<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is</font>

111
00:05:23,460 --> 00:05:31,739
which is<font color="#E5E5E5"> our</font><font color="#CCCCCC"> message and then comes the</font>

112
00:05:26,159 --> 00:05:34,379
extra signature at the<font color="#CCCCCC"> end to show you</font>

113
00:05:31,740 --> 00:05:37,409
even<font color="#CCCCCC"> though to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> it even easier to</font>

114
00:05:34,379 --> 00:05:42,089
understand<font color="#CCCCCC"> I try to visualize it a bit</font>

115
00:05:37,409 --> 00:05:45,569
and<font color="#CCCCCC"> then not encoded format so we have</font>

116
00:05:42,089 --> 00:05:48,449
our header which basically contains<font color="#E5E5E5"> all</font>

117
00:05:45,569 --> 00:05:50,729
the<font color="#CCCCCC"> meta data or the cryptographic</font>

118
00:05:48,449 --> 00:05:54,120
information about<font color="#E5E5E5"> this tome as in this</font>

119
00:05:50,729 --> 00:05:58,289
<font color="#CCCCCC">case which algorithm we used this is</font>

120
00:05:54,120 --> 00:06:02,399
then basics for URL<font color="#E5E5E5"> encoded and it's our</font>

121
00:05:58,289 --> 00:06:05,099
first<font color="#E5E5E5"> part then we</font><font color="#CCCCCC"> have our payload</font><font color="#E5E5E5"> our</font>

122
00:06:02,399 --> 00:06:10,050
message which is<font color="#CCCCCC"> also a JSON object and</font>

123
00:06:05,099 --> 00:06:12,990
then so in a key value<font color="#CCCCCC"> format as in this</font>

124
00:06:10,050 --> 00:06:16,469
<font color="#E5E5E5">case</font><font color="#CCCCCC"> it and in</font><font color="#E5E5E5"> this case it contains my</font>

125
00:06:12,990 --> 00:06:19,680
name<font color="#E5E5E5"> a university and a master's degree</font>

126
00:06:16,469 --> 00:06:22,319
flag<font color="#E5E5E5"> this is also basically for ul</font>

127
00:06:19,680 --> 00:06:25,919
encoded and then simply concatenate it

128
00:06:22,319 --> 00:06:28,889
with a<font color="#E5E5E5"> period</font><font color="#CCCCCC"> together</font><font color="#E5E5E5"> which is then</font>

129
00:06:25,919 --> 00:06:33,568
used<font color="#E5E5E5"> as input for our signature or max</font>

130
00:06:28,889 --> 00:06:39,029
function in our example we selected the

131
00:06:33,569 --> 00:06:42,599
<font color="#E5E5E5">H mech with sha-256 and the key secret</font>

132
00:06:39,029 --> 00:06:43,200
<font color="#E5E5E5">so we're taking this this first output</font>

133
00:06:42,599 --> 00:06:45,510
as

134
00:06:43,200 --> 00:06:48,870
to our<font color="#E5E5E5"> function the</font><font color="#CCCCCC"> result is our</font>

135
00:06:45,510 --> 00:06:51,480
signature which also gets base64 URL

136
00:06:48,870 --> 00:06:53,700
encoded simply again concatenated at the

137
00:06:51,480 --> 00:06:56,190
end with a period<font color="#E5E5E5"> and this is our final</font>

138
00:06:53,700 --> 00:07:00,599
<font color="#CCCCCC">result of a fully valid JSON web</font>

139
00:06:56,190 --> 00:07:03,150
signature token<font color="#CCCCCC"> this is really easy</font>

140
00:07:00,600 --> 00:07:05,040
<font color="#CCCCCC">especially compared to exit messengers</font>

141
00:07:03,150 --> 00:07:07,349
that I know if you are familiar with

142
00:07:05,040 --> 00:07:09,630
<font color="#CCCCCC">that</font><font color="#E5E5E5"> they have</font><font color="#CCCCCC"> to do a lot of</font>

143
00:07:07,350 --> 00:07:12,540
transformation<font color="#CCCCCC"> a lot of wrapping and</font>

144
00:07:09,630 --> 00:07:15,930
it's it's really really complex and and

145
00:07:12,540 --> 00:07:18,690
crazy<font color="#E5E5E5"> stuff going on they're</font><font color="#CCCCCC"> a little</font>

146
00:07:15,930 --> 00:07:21,600
<font color="#CCCCCC">more</font><font color="#E5E5E5"> complex but also quite simple is</font>

147
00:07:18,690 --> 00:07:23,850
the JSON<font color="#CCCCCC"> that encryption</font><font color="#E5E5E5"> as the name</font>

148
00:07:21,600 --> 00:07:29,040
<font color="#E5E5E5">might indicate it's used for encryption</font>

149
00:07:23,850 --> 00:07:31,470
and this token contains<font color="#E5E5E5"> five parts</font><font color="#CCCCCC"> so</font>

150
00:07:29,040 --> 00:07:33,780
there we have again our<font color="#E5E5E5"> header with all</font>

151
00:07:31,470 --> 00:07:35,880
the<font color="#CCCCCC"> cryptographic information then comes</font>

152
00:07:33,780 --> 00:07:38,909
the encrypted key which is also known as

153
00:07:35,880 --> 00:07:42,900
<font color="#CCCCCC">a session</font><font color="#E5E5E5"> key or content encryption key</font>

154
00:07:38,910 --> 00:07:45,000
<font color="#E5E5E5">so it's just</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> you do secure</font>

155
00:07:42,900 --> 00:07:47,789
communication you're having a symmetric

156
00:07:45,000 --> 00:07:51,090
<font color="#CCCCCC">key for the extra encryption and then</font>

157
00:07:47,790 --> 00:07:54,450
<font color="#E5E5E5">you're using your a symmetric</font><font color="#CCCCCC"> key</font><font color="#E5E5E5"> to to</font>

158
00:07:51,090 --> 00:07:56,849
transport<font color="#E5E5E5"> that symmetric</font><font color="#CCCCCC"> key in secure</font>

159
00:07:54,450 --> 00:07:59,130
way then the third part is the

160
00:07:56,850 --> 00:08:01,950
initialization vector<font color="#E5E5E5"> if</font><font color="#CCCCCC"> needed for your</font>

161
00:07:59,130 --> 00:08:04,800
selected<font color="#E5E5E5"> algorithm then comes to the</font>

162
00:08:01,950 --> 00:08:06,780
<font color="#CCCCCC">ciphertext and in certain</font><font color="#E5E5E5"> algorithms we</font>

163
00:08:04,800 --> 00:08:10,610
also have the authentication tag which

164
00:08:06,780 --> 00:08:13,890
<font color="#E5E5E5">is some additional integrity protection</font>

165
00:08:10,610 --> 00:08:20,130
<font color="#CCCCCC">if you select authenticated encryption</font>

166
00:08:13,890 --> 00:08:21,780
algorithms<font color="#CCCCCC"> yeah again some some nice</font>

167
00:08:20,130 --> 00:08:24,360
picture<font color="#CCCCCC"> to visualize it a bit we have</font>

168
00:08:21,780 --> 00:08:26,609
our header which<font color="#CCCCCC"> may contains</font><font color="#E5E5E5"> the</font>

169
00:08:24,360 --> 00:08:29,880
algorithm so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to use and then get</font>

170
00:08:26,610 --> 00:08:33,000
basis for<font color="#E5E5E5"> your</font><font color="#CCCCCC"> L encoded</font><font color="#E5E5E5"> we generate our</font>

171
00:08:29,880 --> 00:08:36,030
session key<font color="#E5E5E5"> the actual encryption and</font>

172
00:08:33,000 --> 00:08:38,729
then use our recipients public key<font color="#CCCCCC"> in</font>

173
00:08:36,030 --> 00:08:42,659
this<font color="#E5E5E5"> case it's RSA to encrypt this</font>

174
00:08:38,729 --> 00:08:44,160
session<font color="#E5E5E5"> key we have our actual plaintext</font>

175
00:08:42,659 --> 00:08:46,880
we want to<font color="#E5E5E5"> hide to provide</font>

176
00:08:44,159 --> 00:08:49,620
confidentiality<font color="#E5E5E5"> live long and prosper</font>

177
00:08:46,880 --> 00:08:54,420
<font color="#CCCCCC">then we have our initialization</font><font color="#E5E5E5"> vector</font>

178
00:08:49,620 --> 00:08:57,209
and optionally you<font color="#CCCCCC"> can use also</font>

179
00:08:54,420 --> 00:09:00,209
<font color="#E5E5E5">so-called additional authenticated data</font>

180
00:08:57,209 --> 00:09:03,179
this might<font color="#E5E5E5"> be used this is simply input</font>

181
00:09:00,209 --> 00:09:06,599
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can use</font><font color="#E5E5E5"> to integrity protect but</font>

182
00:09:03,179 --> 00:09:08,699
which gets not encrypted itself in this

183
00:09:06,600 --> 00:09:12,269
<font color="#CCCCCC">case this is</font><font color="#E5E5E5"> the header so</font><font color="#CCCCCC"> there is not</font>

184
00:09:08,699 --> 00:09:14,368
some some information<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to hide</font>

185
00:09:12,269 --> 00:09:16,529
but<font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to keep sure that its</font>

186
00:09:14,369 --> 00:09:19,439
integrity particularly nobody<font color="#E5E5E5"> mess</font>

187
00:09:16,529 --> 00:09:21,449
<font color="#E5E5E5">around with</font><font color="#CCCCCC"> is that all that that</font>

188
00:09:19,439 --> 00:09:23,939
<font color="#E5E5E5">components are then used as input for</font>

189
00:09:21,449 --> 00:09:25,529
<font color="#E5E5E5">your encryption function and as all put</font>

190
00:09:23,939 --> 00:09:27,240
you get on the one hand<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ciphertext</font>

191
00:09:25,529 --> 00:09:31,319
<font color="#E5E5E5">and on the other</font><font color="#CCCCCC"> end the authentication</font>

192
00:09:27,240 --> 00:09:35,040
<font color="#CCCCCC">tag and the final result is then our</font>

193
00:09:31,319 --> 00:09:40,040
<font color="#E5E5E5">again our our</font><font color="#CCCCCC"> JSON that</font><font color="#E5E5E5"> encryption token</font>

194
00:09:35,040 --> 00:09:43,040
<font color="#E5E5E5">with the five parts base64 URL encoded</font>

195
00:09:40,040 --> 00:09:46,559
<font color="#CCCCCC">last but not least</font><font color="#E5E5E5"> adjacent that token</font>

196
00:09:43,040 --> 00:09:50,160
<font color="#CCCCCC">the specification basically describes</font>

197
00:09:46,559 --> 00:09:53,009
the<font color="#E5E5E5"> some some</font><font color="#CCCCCC"> so-called claims so</font>

198
00:09:50,160 --> 00:09:56,089
assertion assertions<font color="#E5E5E5"> about a subject you</font>

199
00:09:53,009 --> 00:09:59,910
might use but<font color="#E5E5E5"> you</font><font color="#CCCCCC"> er don't</font><font color="#E5E5E5"> have to use</font>

200
00:09:56,089 --> 00:10:03,720
for<font color="#CCCCCC"> example the ISS at the Israel</font><font color="#E5E5E5"> so who</font>

201
00:09:59,910 --> 00:10:06,059
who created this token the IIT issued at

202
00:10:03,720 --> 00:10:09,600
not<font color="#CCCCCC"> valid before</font><font color="#E5E5E5"> expiration and those</font>

203
00:10:06,059 --> 00:10:11,549
are<font color="#E5E5E5"> simply best practices or options you</font>

204
00:10:09,600 --> 00:10:15,119
might use<font color="#CCCCCC"> to protect</font><font color="#E5E5E5"> against replay</font>

205
00:10:11,549 --> 00:10:16,829
attacks or you should use if you<font color="#CCCCCC"> wonder</font>

206
00:10:15,119 --> 00:10:21,119
use this token a session token for

207
00:10:16,829 --> 00:10:24,149
example so<font color="#CCCCCC"> that was really quick and</font>

208
00:10:21,119 --> 00:10:26,730
<font color="#E5E5E5">really much I hope I have</font><font color="#CCCCCC"> not yet lost</font>

209
00:10:24,149 --> 00:10:29,100
you<font color="#CCCCCC"> because now comes the interesting</font>

210
00:10:26,730 --> 00:10:35,970
part<font color="#E5E5E5"> the attacks and the vulnerabilities</font>

211
00:10:29,100 --> 00:10:38,429
we try to apply we analyzed the first

212
00:10:35,970 --> 00:10:41,429
one is the secondary exclusion so this

213
00:10:38,429 --> 00:10:46,410
is a list of<font color="#CCCCCC"> possible algorithms to use</font>

214
00:10:41,429 --> 00:10:49,139
for Jason<font color="#CCCCCC"> DEP signatures on the on the</font>

215
00:10:46,410 --> 00:10:51,719
top there is<font color="#E5E5E5"> the there's the HTML</font>

216
00:10:49,139 --> 00:10:54,809
algorithms we try we used in our example

217
00:10:51,720 --> 00:10:59,699
then<font color="#CCCCCC"> RSA and at the very</font><font color="#E5E5E5"> bottom there's</font>

218
00:10:54,809 --> 00:11:02,490
a<font color="#E5E5E5"> algorithm called none this is quite</font>

219
00:10:59,699 --> 00:11:04,769
suspicious<font color="#E5E5E5"> and if you're looking at the</font>

220
00:11:02,490 --> 00:11:07,890
<font color="#CCCCCC">description that says that no Digitas</font>

221
00:11:04,769 --> 00:11:12,360
<font color="#E5E5E5">insurer or</font><font color="#CCCCCC"> MEC is performed at all</font>

222
00:11:07,890 --> 00:11:14,089
this<font color="#CCCCCC"> is right quite strange if we</font><font color="#E5E5E5"> keep</font>

223
00:11:12,360 --> 00:11:16,560
in mind<font color="#CCCCCC"> that we are looking</font><font color="#E5E5E5"> at an</font>

224
00:11:14,089 --> 00:11:19,950
specification for signatures for

225
00:11:16,560 --> 00:11:23,489
integrity<font color="#CCCCCC"> protection and this algorithm</font>

226
00:11:19,950 --> 00:11:26,459
<font color="#CCCCCC">has been</font><font color="#E5E5E5"> added for scenarios and systems</font>

227
00:11:23,490 --> 00:11:29,760
where the protection<font color="#E5E5E5"> is done by other</font>

228
00:11:26,459 --> 00:11:33,390
means<font color="#CCCCCC"> so let's say if you have a</font><font color="#E5E5E5"> direct</font>

229
00:11:29,760 --> 00:11:36,269
server to server connection with a TLS

230
00:11:33,390 --> 00:11:38,880
<font color="#CCCCCC">China</font><font color="#E5E5E5"> and you don't need to be into the</font>

231
00:11:36,269 --> 00:11:42,149
message itself to be protected again

232
00:11:38,880 --> 00:11:44,250
<font color="#E5E5E5">then you might</font><font color="#CCCCCC"> use this algorithm</font><font color="#E5E5E5"> and</font>

233
00:11:42,149 --> 00:11:48,000
<font color="#E5E5E5">still can</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> these same libraries and</font>

234
00:11:44,250 --> 00:11:51,029
the same<font color="#E5E5E5"> JSON format but there is</font>

235
00:11:48,000 --> 00:11:53,820
<font color="#CCCCCC">obviously some problem with that if we</font>

236
00:11:51,029 --> 00:11:57,930
<font color="#CCCCCC">have such an token which is</font><font color="#E5E5E5"> variously</font>

237
00:11:53,820 --> 00:12:06,029
<font color="#E5E5E5">signed using</font><font color="#CCCCCC"> hmx what would you do as an</font>

238
00:11:57,930 --> 00:12:08,790
attacker<font color="#E5E5E5"> any guesses correct you simply</font>

239
00:12:06,029 --> 00:12:11,519
change the<font color="#E5E5E5"> algorithm value to none strip</font>

240
00:12:08,790 --> 00:12:14,000
<font color="#E5E5E5">away the signature and there were many</font>

241
00:12:11,519 --> 00:12:16,320
many many libraries out there who still

242
00:12:14,000 --> 00:12:18,029
who did not check whether the<font color="#CCCCCC"> nante</font>

243
00:12:16,320 --> 00:12:20,690
<font color="#E5E5E5">grism should be allowed</font><font color="#CCCCCC"> or not</font><font color="#E5E5E5"> and</font>

244
00:12:18,029 --> 00:12:23,850
simply<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have validated this signature</font>

245
00:12:20,690 --> 00:12:27,449
correctly this was first<font color="#E5E5E5"> discovered by</font>

246
00:12:23,850 --> 00:12:31,170
<font color="#E5E5E5">m2</font><font color="#CCCCCC"> McLean who then informed a lot</font><font color="#E5E5E5"> of</font>

247
00:12:27,449 --> 00:12:34,800
library maintainer<font color="#CCCCCC"> and they</font><font color="#E5E5E5"> try to fix</font>

248
00:12:31,170 --> 00:12:37,589
it<font color="#CCCCCC"> and we want to know how such</font><font color="#E5E5E5"> a</font>

249
00:12:34,800 --> 00:12:39,300
vulnerability<font color="#E5E5E5"> recurs and and how they</font>

250
00:12:37,589 --> 00:12:41,550
try<font color="#E5E5E5"> to fix it and</font><font color="#CCCCCC"> analyze those</font>

251
00:12:39,300 --> 00:12:46,410
libraries and this is one<font color="#E5E5E5"> example of</font>

252
00:12:41,550 --> 00:12:48,870
<font color="#CCCCCC">that in version 2.1 point 3</font><font color="#E5E5E5"> they added a</font>

253
00:12:46,410 --> 00:12:51,420
allow<font color="#E5E5E5"> an secure flag which</font><font color="#CCCCCC"> was set to</font>

254
00:12:48,870 --> 00:12:54,120
false by default<font color="#E5E5E5"> which is quite good</font><font color="#CCCCCC"> so</font>

255
00:12:51,420 --> 00:12:56,040
if you're using it as<font color="#CCCCCC"> a developer UF</font><font color="#E5E5E5"> you</font>

256
00:12:54,120 --> 00:12:58,529
don't have to<font color="#E5E5E5"> have read through all the</font>

257
00:12:56,040 --> 00:13:02,550
<font color="#E5E5E5">documentation</font><font color="#CCCCCC"> beforehand to be secure</font>

258
00:12:58,529 --> 00:13:04,110
and they also added this if condition so

259
00:13:02,550 --> 00:13:06,750
if the<font color="#CCCCCC"> algorithm</font><font color="#E5E5E5"> has there is none and</font>

260
00:13:04,110 --> 00:13:09,240
our<font color="#E5E5E5"> allow</font><font color="#CCCCCC"> unsecure flag is set to</font><font color="#E5E5E5"> false</font>

261
00:13:06,750 --> 00:13:12,510
then we're<font color="#E5E5E5"> throwing</font><font color="#CCCCCC"> an exception saying</font>

262
00:13:09,240 --> 00:13:17,760
okay<font color="#CCCCCC"> this</font><font color="#E5E5E5"> cannot be validated in a</font>

263
00:13:12,510 --> 00:13:21,580
secure context but there<font color="#E5E5E5"> is some some</font>

264
00:13:17,760 --> 00:13:25,920
<font color="#E5E5E5">more codes in below</font>

265
00:13:21,580 --> 00:13:31,200
this is the snippet<font color="#E5E5E5"> over here this one</font>

266
00:13:25,920 --> 00:13:34,719
which takes the algorithm value and then

267
00:13:31,200 --> 00:13:36,940
searches for a class with this name<font color="#E5E5E5"> so</font>

268
00:13:34,720 --> 00:13:40,110
if you have<font color="#CCCCCC"> a CH neck it</font><font color="#E5E5E5"> searches for</font>

269
00:13:36,940 --> 00:13:42,910
<font color="#E5E5E5">the class</font><font color="#CCCCCC"> h meg if this class exists its</font>

270
00:13:40,110 --> 00:13:45,279
<font color="#E5E5E5">initiating a new instance and performing</font>

271
00:13:42,910 --> 00:13:47,890
the actual<font color="#E5E5E5"> validation and if not</font><font color="#CCCCCC"> its</font>

272
00:13:45,279 --> 00:13:51,700
throwing an exception claiming<font color="#E5E5E5"> okay this</font>

273
00:13:47,890 --> 00:13:55,269
is not a valid algorithm if we go back

274
00:13:51,700 --> 00:13:59,079
<font color="#CCCCCC">again I know</font><font color="#E5E5E5"> if we take a look at the</font>

275
00:13:55,269 --> 00:14:01,180
PHP documentation<font color="#E5E5E5"> there is a sentence</font>

276
00:13:59,079 --> 00:14:04,140
<font color="#CCCCCC">which says okay the class name</font><font color="#E5E5E5"> is</font>

277
00:14:01,180 --> 00:14:08,859
matched in the case insensitive manner

278
00:14:04,140 --> 00:14:10,569
which means<font color="#CCCCCC"> meow wiki use we can</font><font color="#E5E5E5"> maybe</font>

279
00:14:08,860 --> 00:14:12,730
mess around with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> if you go back and</font>

280
00:14:10,570 --> 00:14:15,760
look<font color="#E5E5E5"> at the actual comparison this is</font><font color="#CCCCCC"> a</font>

281
00:14:12,730 --> 00:14:19,390
<font color="#E5E5E5">native string comparison which is typing</font>

282
00:14:15,760 --> 00:14:22,120
<font color="#CCCCCC">save good in the context</font><font color="#E5E5E5"> of PHP but it's</font>

283
00:14:19,390 --> 00:14:24,640
a very simple string comparison and if

284
00:14:22,120 --> 00:14:27,310
we<font color="#E5E5E5"> note as</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> at record simply try</font>

285
00:14:24,640 --> 00:14:32,170
different capitalizations<font color="#E5E5E5"> we can bypass</font>

286
00:14:27,310 --> 00:14:35,260
this<font color="#CCCCCC"> this additional feature this</font>

287
00:14:32,170 --> 00:14:40,120
additional check and to create or over

288
00:14:35,260 --> 00:14:43,420
let's say enter tokens again and this

289
00:14:40,120 --> 00:14:46,390
<font color="#E5E5E5">was the maintenance</font><font color="#CCCCCC"> we informed and this</font>

290
00:14:43,420 --> 00:14:52,959
was fixed<font color="#E5E5E5"> in version 5 or something</font><font color="#CCCCCC"> 502</font>

291
00:14:46,390 --> 00:14:55,360
I<font color="#E5E5E5"> think so quite quite quite late our</font>

292
00:14:52,959 --> 00:14:57,939
second attack is<font color="#E5E5E5"> the key confusion</font>

293
00:14:55,360 --> 00:14:59,920
attack which<font color="#E5E5E5"> is quite interesting</font><font color="#CCCCCC"> one</font>

294
00:14:57,940 --> 00:15:03,430
it was also again first<font color="#CCCCCC"> discovered</font><font color="#E5E5E5"> by it</font>

295
00:14:59,920 --> 00:15:05,250
to McLean<font color="#CCCCCC"> that many libraries use</font>

296
00:15:03,430 --> 00:15:09,279
verification functions with that

297
00:15:05,250 --> 00:15:11,440
specific API with<font color="#E5E5E5"> this specific format</font>

298
00:15:09,279 --> 00:15:15,670
<font color="#E5E5E5">over here so they are calling the</font>

299
00:15:11,440 --> 00:15:18,310
verification function and providing as

300
00:15:15,670 --> 00:15:21,010
<font color="#E5E5E5">the token</font><font color="#CCCCCC"> as string and as the</font><font color="#E5E5E5"> first</font>

301
00:15:18,310 --> 00:15:24,489
<font color="#E5E5E5">parameter and the verification key as</font>

302
00:15:21,010 --> 00:15:27,990
second parameter<font color="#E5E5E5"> also as string so in</font>

303
00:15:24,490 --> 00:15:31,600
systems where you<font color="#E5E5E5"> want to use symmetric</font>

304
00:15:27,990 --> 00:15:33,790
cryptography<font color="#E5E5E5"> you're providing the token</font>

305
00:15:31,600 --> 00:15:34,360
as first parameter<font color="#E5E5E5"> and then the H max</font>

306
00:15:33,790 --> 00:15:36,099
equal

307
00:15:34,360 --> 00:15:39,850
which would be<font color="#E5E5E5"> private a second</font>

308
00:15:36,100 --> 00:15:43,060
parameter<font color="#CCCCCC"> and systems using a symmetric</font>

309
00:15:39,850 --> 00:15:45,459
signatures<font color="#E5E5E5"> like ours a here again</font>

310
00:15:43,060 --> 00:15:48,250
providing the<font color="#CCCCCC"> token as first parameter</font>

311
00:15:45,459 --> 00:15:51,339
<font color="#E5E5E5">and then the RSA public key</font><font color="#CCCCCC"> a second</font>

312
00:15:48,250 --> 00:15:56,260
parameter so<font color="#CCCCCC"> there quite a few</font><font color="#E5E5E5"> problems</font>

313
00:15:51,339 --> 00:15:58,269
<font color="#CCCCCC">with</font><font color="#E5E5E5"> that the first one is how</font><font color="#CCCCCC"> does the</font>

314
00:15:56,260 --> 00:16:03,250
system<font color="#E5E5E5"> return there is a</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> algorithm</font>

315
00:15:58,269 --> 00:16:06,339
so the the header is<font color="#E5E5E5"> user controlled so</font>

316
00:16:03,250 --> 00:16:08,500
there it says<font color="#E5E5E5"> okay use the algorithm</font><font color="#CCCCCC"> H</font>

317
00:16:06,339 --> 00:16:12,070
make in this case but<font color="#E5E5E5"> we as an attacker</font>

318
00:16:08,500 --> 00:16:13,750
can manipulate it<font color="#E5E5E5"> and the second problem</font>

319
00:16:12,070 --> 00:16:17,980
is the<font color="#E5E5E5"> use</font><font color="#CCCCCC"> of so-called primitive</font>

320
00:16:13,750 --> 00:16:20,649
obsession so complex data structures<font color="#E5E5E5"> are</font>

321
00:16:17,980 --> 00:16:23,430
represented as primitive data types as

322
00:16:20,649 --> 00:16:27,490
in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> case it's a cryptographic key</font>

323
00:16:23,430 --> 00:16:31,359
represented as<font color="#E5E5E5"> a simple string and how</font>

324
00:16:27,490 --> 00:16:33,910
can we exploit it<font color="#E5E5E5"> in systems where the</font>

325
00:16:31,360 --> 00:16:37,240
token is signed or where the system

326
00:16:33,910 --> 00:16:39,819
expects a token signed with<font color="#E5E5E5"> us a but</font>

327
00:16:37,240 --> 00:16:43,630
<font color="#CCCCCC">receives a token which was signed</font><font color="#E5E5E5"> using</font>

328
00:16:39,820 --> 00:16:46,480
HTML there's a system will think that

329
00:16:43,630 --> 00:16:50,140
<font color="#E5E5E5">the public</font><font color="#CCCCCC"> key</font><font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> the H make</font>

330
00:16:46,480 --> 00:16:54,670
secret key so we<font color="#E5E5E5"> can use some</font><font color="#CCCCCC"> public</font>

331
00:16:50,140 --> 00:16:58,720
information to be used as private secret

332
00:16:54,670 --> 00:17:01,269
key<font color="#CCCCCC"> let's have some beautiful</font><font color="#E5E5E5"> picture</font>

333
00:16:58,720 --> 00:17:03,820
again how such an attack<font color="#CCCCCC"> scenario might</font>

334
00:17:01,269 --> 00:17:06,309
look like<font color="#E5E5E5"> so we as an attacker obtain</font>

335
00:17:03,820 --> 00:17:09,309
the RSA public key which as the name

336
00:17:06,309 --> 00:17:12,790
says<font color="#CCCCCC"> is public</font><font color="#E5E5E5"> then we generate our</font>

337
00:17:09,309 --> 00:17:14,918
token<font color="#E5E5E5"> using the HTML</font><font color="#CCCCCC"> given and we're</font>

338
00:17:12,790 --> 00:17:18,879
using our<font color="#CCCCCC"> public key and then string</font>

339
00:17:14,919 --> 00:17:20,890
representation as<font color="#E5E5E5"> as secret key then</font>

340
00:17:18,880 --> 00:17:24,459
we're sending<font color="#E5E5E5"> this malicious token to</font>

341
00:17:20,890 --> 00:17:26,620
<font color="#CCCCCC">the to the service the service</font><font color="#E5E5E5"> is</font>

342
00:17:24,459 --> 00:17:30,280
calling the verification function<font color="#E5E5E5"> and</font>

343
00:17:26,619 --> 00:17:33,399
because<font color="#CCCCCC"> it's expecting and</font><font color="#E5E5E5"> essa</font>

344
00:17:30,280 --> 00:17:35,740
metrically<font color="#E5E5E5"> signs token it's calling the</font>

345
00:17:33,400 --> 00:17:37,780
function by providing the token<font color="#CCCCCC"> as first</font>

346
00:17:35,740 --> 00:17:42,280
parameter<font color="#E5E5E5"> and the errors a public key</font><font color="#CCCCCC"> a</font>

347
00:17:37,780 --> 00:17:46,330
second parameter<font color="#E5E5E5"> the underlying library</font>

348
00:17:42,280 --> 00:17:47,678
however takes a look at the

349
00:17:46,330 --> 00:17:50,080
<font color="#CCCCCC">you</font><font color="#E5E5E5"> rhythm header within the token</font>

350
00:17:47,679 --> 00:17:52,390
itself<font color="#CCCCCC"> and there it says okay this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> H</font>

351
00:17:50,080 --> 00:17:55,299
<font color="#CCCCCC">MEC then I</font><font color="#E5E5E5"> performing my H make</font>

352
00:17:52,390 --> 00:17:57,100
verification it's simply taking<font color="#E5E5E5"> the</font>

353
00:17:55,299 --> 00:17:59,740
<font color="#E5E5E5">second parameter which in this case is</font>

354
00:17:57,100 --> 00:18:01,600
the RSA public key and then performing

355
00:17:59,740 --> 00:18:03,190
the edge make algorithm to<font color="#E5E5E5"> create its</font>

356
00:18:01,600 --> 00:18:05,620
<font color="#E5E5E5">own signature and compare both</font>

357
00:18:03,190 --> 00:18:07,450
signatures if they're the same<font color="#CCCCCC"> and of</font>

358
00:18:05,620 --> 00:18:09,549
course as<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> an attacker did it the</font>

359
00:18:07,450 --> 00:18:13,059
same way<font color="#CCCCCC"> all signatures</font><font color="#E5E5E5"> are the same and</font>

360
00:18:09,549 --> 00:18:15,639
<font color="#E5E5E5">we again have a</font><font color="#CCCCCC"> very signed token but we</font>

361
00:18:13,059 --> 00:18:19,539
are involved in control of how to sign

362
00:18:15,640 --> 00:18:25,899
it<font color="#E5E5E5"> and I</font><font color="#CCCCCC"> will show you some some some</font>

363
00:18:19,539 --> 00:18:28,240
good examples<font color="#CCCCCC"> in demonstration later our</font>

364
00:18:25,899 --> 00:18:30,850
third<font color="#E5E5E5"> to check now focusing on the</font>

365
00:18:28,240 --> 00:18:33,789
encryption part is the<font color="#E5E5E5"> Blythe</font><font color="#CCCCCC"> Mohammadi</font>

366
00:18:30,850 --> 00:18:38,168
message attack<font color="#E5E5E5"> which is quite</font><font color="#CCCCCC"> more</font>

367
00:18:33,789 --> 00:18:40,480
complex<font color="#CCCCCC"> it was described first 1998 by</font>

368
00:18:38,169 --> 00:18:45,450
<font color="#E5E5E5">denervation Baja and he applied it</font><font color="#CCCCCC"> to</font>

369
00:18:40,480 --> 00:18:50,860
SSL in version 3 and<font color="#E5E5E5"> it focused</font><font color="#CCCCCC"> or</font>

370
00:18:45,450 --> 00:18:54,149
<font color="#E5E5E5">exploited the pkcs 1.5 heading</font><font color="#CCCCCC"> format</font>

371
00:18:50,860 --> 00:18:57,908
within<font color="#E5E5E5"> the RSA encryption scheme and</font>

372
00:18:54,149 --> 00:18:59,518
since then many others did their

373
00:18:57,909 --> 00:19:01,960
<font color="#CCCCCC">research and applied it to other</font>

374
00:18:59,519 --> 00:19:03,909
protocols<font color="#CCCCCC"> and</font><font color="#E5E5E5"> other standards as well</font>

375
00:19:01,960 --> 00:19:07,510
and also improved it and made it<font color="#E5E5E5"> a lot</font>

376
00:19:03,909 --> 00:19:09,399
<font color="#E5E5E5">faster like for example they some</font>

377
00:19:07,510 --> 00:19:13,408
<font color="#CCCCCC">researchers applied it to XML encryption</font>

378
00:19:09,399 --> 00:19:16,120
in 2012<font color="#E5E5E5"> so almost 15 years</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> and</font>

379
00:19:13,409 --> 00:19:19,360
they were<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> recover the session</font>

380
00:19:16,120 --> 00:19:24,070
key<font color="#CCCCCC"> and with that able</font><font color="#E5E5E5"> to decrypt the</font>

381
00:19:19,360 --> 00:19:27,070
hidden content and then again in<font color="#E5E5E5"> 2012 it</font>

382
00:19:24,070 --> 00:19:30,610
<font color="#E5E5E5">was responsible to break free Casillas</font>

383
00:19:27,070 --> 00:19:33,580
11 with it and even in 2016

384
00:19:30,610 --> 00:19:35,979
<font color="#E5E5E5">TLS or</font><font color="#CCCCCC"> a version</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> by heart attack</font>

385
00:19:33,580 --> 00:19:41,529
was used to break<font color="#E5E5E5"> TLS</font>

386
00:19:35,980 --> 00:19:44,169
so the<font color="#E5E5E5"> RSA with piquancy as</font><font color="#CCCCCC"> 1.5</font>

387
00:19:41,529 --> 00:19:47,470
algorithm is known to have quite some

388
00:19:44,169 --> 00:19:50,320
problems but why should<font color="#E5E5E5"> we expect that</font>

389
00:19:47,470 --> 00:19:53,019
such an algorithm<font color="#CCCCCC"> is not part of</font><font color="#E5E5E5"> an</font>

390
00:19:50,320 --> 00:19:55,990
quite new specification so this is also

391
00:19:53,019 --> 00:19:58,750
<font color="#CCCCCC">one of the recommended algorithms again</font>

392
00:19:55,990 --> 00:20:02,140
in the<font color="#CCCCCC"> J's and</font><font color="#E5E5E5"> that encryption standard</font>

393
00:19:58,750 --> 00:20:05,890
and which were cool<font color="#CCCCCC"> we thought cool</font>

394
00:20:02,140 --> 00:20:09,790
let's let's try if anything has<font color="#CCCCCC"> changed</font>

395
00:20:05,890 --> 00:20:13,840
and<font color="#E5E5E5"> if the libraries are are vulnerable</font>

396
00:20:09,790 --> 00:20:15,940
again or not just in short<font color="#E5E5E5"> how this</font>

397
00:20:13,840 --> 00:20:18,699
attack works because it's really quite

398
00:20:15,940 --> 00:20:21,220
complex<font color="#E5E5E5"> it's a it's classified as a</font>

399
00:20:18,700 --> 00:20:23,770
depth of chosen ciphertext attack<font color="#E5E5E5"> so we</font>

400
00:20:21,220 --> 00:20:26,680
as an attacker<font color="#CCCCCC"> are able to</font><font color="#E5E5E5"> send</font>

401
00:20:23,770 --> 00:20:29,530
different<font color="#CCCCCC"> ciphertext to</font><font color="#E5E5E5"> the system and</font>

402
00:20:26,680 --> 00:20:33,130
get a response<font color="#E5E5E5"> and based on this</font>

403
00:20:29,530 --> 00:20:36,280
response we can<font color="#E5E5E5"> yeah measure or observe</font>

404
00:20:33,130 --> 00:20:42,670
any differences in<font color="#E5E5E5"> occurring errors or</font>

405
00:20:36,280 --> 00:20:45,790
in the timing consumption the<font color="#CCCCCC"> pkc is 1.5</font>

406
00:20:42,670 --> 00:20:48,330
<font color="#CCCCCC">format has this</font><font color="#E5E5E5"> specific format so we</font>

407
00:20:45,790 --> 00:20:53,080
first<font color="#CCCCCC"> 2 bytes are fixed oh oh and</font><font color="#E5E5E5"> no 2</font>

408
00:20:48,330 --> 00:20:54,580
then comes a random padding string<font color="#E5E5E5"> this</font>

409
00:20:53,080 --> 00:20:56,620
<font color="#E5E5E5">is separated by a null byte and then</font>

410
00:20:54,580 --> 00:20:58,480
<font color="#E5E5E5">comes our</font><font color="#CCCCCC"> external</font><font color="#E5E5E5"> message</font><font color="#CCCCCC"> and what we</font>

411
00:20:56,620 --> 00:21:00,219
do as an<font color="#E5E5E5"> integral is we are abusing</font><font color="#CCCCCC"> or</font>

412
00:20:58,480 --> 00:21:03,940
exploiting the system<font color="#E5E5E5"> as a</font><font color="#CCCCCC"> so-called</font>

413
00:21:00,220 --> 00:21:08,140
padding Oracle<font color="#E5E5E5"> so we're observing error</font>

414
00:21:03,940 --> 00:21:12,810
messages and<font color="#E5E5E5"> timing differences to see</font>

415
00:21:08,140 --> 00:21:16,390
whether this format was valid<font color="#E5E5E5"> or not</font><font color="#CCCCCC"> and</font>

416
00:21:12,810 --> 00:21:18,970
this can be<font color="#CCCCCC"> done because of</font><font color="#E5E5E5"> malleability</font>

417
00:21:16,390 --> 00:21:22,980
of<font color="#E5E5E5"> the RSA encryption scheme which is</font>

418
00:21:18,970 --> 00:21:27,700
<font color="#E5E5E5">called binding so if we have a given</font>

419
00:21:22,980 --> 00:21:30,760
<font color="#E5E5E5">valid</font><font color="#CCCCCC"> ciphertext by sniffing or in a</font>

420
00:21:27,700 --> 00:21:34,260
foreign blog post or something<font color="#CCCCCC"> we're</font>

421
00:21:30,760 --> 00:21:37,390
<font color="#E5E5E5">able to generate our own integer s and</font>

422
00:21:34,260 --> 00:21:41,140
by using this mathematical<font color="#CCCCCC"> equation so</font>

423
00:21:37,390 --> 00:21:44,950
using<font color="#CCCCCC"> e to the power</font><font color="#E5E5E5"> of e to the power</font>

424
00:21:41,140 --> 00:21:48,460
<font color="#E5E5E5">to V which</font><font color="#CCCCCC"> is publicly</font><font color="#E5E5E5"> known</font><font color="#CCCCCC"> we can we</font>

425
00:21:44,950 --> 00:21:55,450
<font color="#E5E5E5">are able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> create a at the end</font><font color="#CCCCCC"> of valid</font>

426
00:21:48,460 --> 00:21:58,540
plaintext in the context of RSA yes

427
00:21:55,450 --> 00:22:00,640
there's quite some crazy math going<font color="#E5E5E5"> on</font>

428
00:21:58,540 --> 00:22:03,550
within<font color="#E5E5E5"> the</font><font color="#CCCCCC"> original paper sizing bar</font><font color="#E5E5E5"> so</font>

429
00:22:00,640 --> 00:22:06,040
there's a lot<font color="#E5E5E5"> of formulas</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it took me</font>

430
00:22:03,550 --> 00:22:12,110
like<font color="#E5E5E5"> weeks to understand even a bit of</font>

431
00:22:06,040 --> 00:22:15,799
it<font color="#CCCCCC"> so I will</font><font color="#E5E5E5"> not go into detail yeah</font>

432
00:22:12,110 --> 00:22:18,949
now but I<font color="#E5E5E5"> would I have included in in</font>

433
00:22:15,799 --> 00:22:22,429
the<font color="#E5E5E5"> demonstration later to see how</font><font color="#CCCCCC"> what</font>

434
00:22:18,950 --> 00:22:29,750
you can<font color="#CCCCCC"> do in real life with with this</font>

435
00:22:22,429 --> 00:22:34,040
attack even<font color="#E5E5E5"> if the math behind it is</font>

436
00:22:29,750 --> 00:22:35,510
<font color="#CCCCCC">quite complex</font><font color="#E5E5E5"> it's it's yeah if you able</font>

437
00:22:34,040 --> 00:22:38,120
to<font color="#E5E5E5"> see the source code if you're</font>

438
00:22:35,510 --> 00:22:40,670
performing a<font color="#CCCCCC"> saucepot audit or analyzing</font>

439
00:22:38,120 --> 00:22:44,449
open source libraries it's quite easy to

440
00:22:40,670 --> 00:22:47,929
<font color="#E5E5E5">see in the code because an developer you</font>

441
00:22:44,450 --> 00:22:50,360
want<font color="#CCCCCC"> to check every single step</font><font color="#E5E5E5"> of your</font>

442
00:22:47,929 --> 00:22:52,850
decryption function for example<font color="#CCCCCC"> and you</font>

443
00:22:50,360 --> 00:22:56,418
<font color="#CCCCCC">want to provide detailed error messages</font>

444
00:22:52,850 --> 00:22:58,790
if something went wrong<font color="#E5E5E5"> which is quite</font>

445
00:22:56,419 --> 00:23:02,030
<font color="#CCCCCC">good</font><font color="#E5E5E5"> but might</font><font color="#CCCCCC"> be bad in a cryptographic</font>

446
00:22:58,790 --> 00:23:04,340
context<font color="#E5E5E5"> so if we're throwing very</font>

447
00:23:02,030 --> 00:23:08,809
detailed exceptions at the wrong

448
00:23:04,340 --> 00:23:13,010
<font color="#CCCCCC">notations we as an attacker can observe</font>

449
00:23:08,809 --> 00:23:16,490
and learn if the padding formula was

450
00:23:13,010 --> 00:23:19,160
<font color="#CCCCCC">welded or not and the attack scenario is</font>

451
00:23:16,490 --> 00:23:22,760
simple we need<font color="#E5E5E5"> one simple</font><font color="#CCCCCC"> cipher text</font><font color="#E5E5E5"> in</font>

452
00:23:19,160 --> 00:23:25,460
most cases<font color="#CCCCCC"> and then if</font><font color="#E5E5E5"> we're able to</font>

453
00:23:22,760 --> 00:23:28,220
send our own<font color="#E5E5E5"> modified cipher text to the</font>

454
00:23:25,460 --> 00:23:32,000
server and<font color="#E5E5E5"> get</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> response we can observe</font>

455
00:23:28,220 --> 00:23:38,450
then we're able to<font color="#CCCCCC"> use this attack to</font>

456
00:23:32,000 --> 00:23:43,340
exploit<font color="#E5E5E5"> the service our fourth attack</font>

457
00:23:38,450 --> 00:23:45,049
timing attack it's also really easy<font color="#E5E5E5"> to</font>

458
00:23:43,340 --> 00:23:47,870
see if we were able<font color="#CCCCCC"> to see the source</font>

459
00:23:45,049 --> 00:23:51,110
code<font color="#CCCCCC"> but it's quite quite challenging to</font>

460
00:23:47,870 --> 00:23:54,709
<font color="#E5E5E5">exploit in real life because you need to</font>

461
00:23:51,110 --> 00:23:56,870
measure<font color="#E5E5E5"> quite precisely the easy time</font>

462
00:23:54,710 --> 00:24:00,919
<font color="#E5E5E5">consumption but there are a lot of</font>

463
00:23:56,870 --> 00:24:02,469
papers<font color="#CCCCCC"> far too practically practically</font>

464
00:24:00,919 --> 00:24:07,669
abused and exploited

465
00:24:02,470 --> 00:24:11,450
so in code this is in PHP example it's

466
00:24:07,669 --> 00:24:14,710
basically a comparison<font color="#E5E5E5"> of the of two</font>

467
00:24:11,450 --> 00:24:18,169
signatures<font color="#CCCCCC"> just as we will</font><font color="#E5E5E5"> do it</font><font color="#CCCCCC"> on</font>

468
00:24:14,710 --> 00:24:19,760
taking<font color="#CCCCCC"> the signature you</font><font color="#E5E5E5"> got generating</font>

469
00:24:18,169 --> 00:24:21,899
your<font color="#E5E5E5"> own signature and then comparing as</font>

470
00:24:19,760 --> 00:24:24,639
<font color="#CCCCCC">both are the same</font>

471
00:24:21,899 --> 00:24:26,349
in order<font color="#E5E5E5"> to understand how such a timing</font>

472
00:24:24,639 --> 00:24:28,869
attack<font color="#E5E5E5"> might work you need to know</font><font color="#CCCCCC"> be</font>

473
00:24:26,349 --> 00:24:32,379
how the<font color="#E5E5E5"> underlying comparison function</font>

474
00:24:28,869 --> 00:24:35,589
<font color="#E5E5E5">works which for PHP is the seam</font><font color="#CCCCCC"> M</font>

475
00:24:32,379 --> 00:24:37,089
compare function<font color="#E5E5E5"> and what it does it</font>

476
00:24:35,589 --> 00:24:39,489
<font color="#E5E5E5">simply takes both strings</font>

477
00:24:37,089 --> 00:24:42,789
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> iterating through every character</font>

478
00:24:39,489 --> 00:24:44,529
of both strings<font color="#E5E5E5"> and as soon</font><font color="#CCCCCC"> as the first</font>

479
00:24:42,789 --> 00:24:46,539
character<font color="#E5E5E5"> is different</font>

480
00:24:44,529 --> 00:24:49,659
<font color="#E5E5E5">it returns saying okay those strings are</font>

481
00:24:46,539 --> 00:24:51,849
<font color="#E5E5E5">not not equal this</font><font color="#CCCCCC"> is really good in</font>

482
00:24:49,659 --> 00:24:54,909
<font color="#CCCCCC">terms</font><font color="#E5E5E5"> of performance</font><font color="#CCCCCC"> so if you have two</font>

483
00:24:51,849 --> 00:24:57,218
really<font color="#E5E5E5"> long strings and they already</font>

484
00:24:54,909 --> 00:24:59,129
differ at the beginning then<font color="#E5E5E5"> you don't</font>

485
00:24:57,219 --> 00:25:01,839
have to<font color="#E5E5E5"> check all the other characters</font>

486
00:24:59,129 --> 00:25:04,059
<font color="#CCCCCC">but</font><font color="#E5E5E5"> in terms of cryptography there's</font>

487
00:25:01,839 --> 00:25:06,639
quite an issue<font color="#E5E5E5"> with this because we can</font>

488
00:25:04,059 --> 00:25:09,519
<font color="#E5E5E5">I'm everything the time comes</font><font color="#CCCCCC"> I mean we</font>

489
00:25:06,639 --> 00:25:13,869
can learn at which at<font color="#E5E5E5"> which specific</font>

490
00:25:09,519 --> 00:25:17,889
position<font color="#E5E5E5"> the difference occurred so just</font>

491
00:25:13,869 --> 00:25:21,579
to give<font color="#CCCCCC"> you an example</font><font color="#E5E5E5"> this is these are</font>

492
00:25:17,889 --> 00:25:26,468
<font color="#CCCCCC">the results</font><font color="#E5E5E5"> of our measuring at the at</font>

493
00:25:21,579 --> 00:25:28,809
the top we have<font color="#E5E5E5"> our our hash or a</font>

494
00:25:26,469 --> 00:25:32,159
<font color="#E5E5E5">signature which</font><font color="#CCCCCC"> is not known to us</font><font color="#E5E5E5"> and</font>

495
00:25:28,809 --> 00:25:34,869
then we're sending a different<font color="#E5E5E5"> interest</font>

496
00:25:32,159 --> 00:25:37,539
<font color="#E5E5E5">we're only the first part of the first</font>

497
00:25:34,869 --> 00:25:41,320
character differs so iterating all

498
00:25:37,539 --> 00:25:43,690
possible<font color="#E5E5E5"> bytes and we can</font><font color="#CCCCCC"> by by</font>

499
00:25:41,320 --> 00:25:48,428
performing a<font color="#E5E5E5"> lot of samples I think this</font>

500
00:25:43,690 --> 00:25:52,179
example is took<font color="#CCCCCC"> ten million</font><font color="#E5E5E5"> examples or</font>

501
00:25:48,429 --> 00:25:55,089
<font color="#CCCCCC">ten million requests to measure we can</font>

502
00:25:52,179 --> 00:25:57,789
see that<font color="#E5E5E5"> at the village</font><font color="#CCCCCC"> PI's which in</font>

503
00:25:55,089 --> 00:26:00,549
this case is<font color="#E5E5E5"> seven we can observe a</font>

504
00:25:57,789 --> 00:26:02,559
slightly higher timing consumption and

505
00:26:00,549 --> 00:26:06,579
this<font color="#E5E5E5"> is because then the comparison</font>

506
00:26:02,559 --> 00:26:08,709
function checks<font color="#CCCCCC"> ok those</font><font color="#E5E5E5"> are false</font><font color="#CCCCCC"> a</font>

507
00:26:06,579 --> 00:26:10,539
correct<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> continued to the second</font>

508
00:26:08,709 --> 00:26:13,239
iteration of the compare of the of the

509
00:26:10,539 --> 00:26:15,969
for<font color="#CCCCCC"> loop and all the others</font><font color="#E5E5E5"> simply</font>

510
00:26:13,239 --> 00:26:18,389
<font color="#E5E5E5">returned saying okay those are not equal</font>

511
00:26:15,969 --> 00:26:23,049
and this can be used<font color="#CCCCCC"> by an attacker to</font>

512
00:26:18,389 --> 00:26:25,059
<font color="#CCCCCC">step-by-step</font><font color="#E5E5E5"> your calculate your own the</font>

513
00:26:23,049 --> 00:26:31,479
let's say enter<font color="#CCCCCC"> two without</font><font color="#E5E5E5"> knowing the</font>

514
00:26:25,059 --> 00:26:34,389
cryptographic key again a lot<font color="#E5E5E5"> of theory</font>

515
00:26:31,479 --> 00:26:35,470
<font color="#CCCCCC">arm now I'd like to</font><font color="#E5E5E5"> introduce our</font>

516
00:26:34,389 --> 00:26:38,139
developed

517
00:26:35,470 --> 00:26:41,020
<font color="#E5E5E5">that suit extension called Joseph which</font>

518
00:26:38,140 --> 00:26:45,390
stands for JavaScript<font color="#CCCCCC"> object signing an</font>

519
00:26:41,020 --> 00:26:49,470
encryption<font color="#E5E5E5"> pentesting helpful as you</font><font color="#CCCCCC"> of</font>

520
00:26:45,390 --> 00:26:53,559
<font color="#E5E5E5">users</font><font color="#CCCCCC"> and/or</font><font color="#E5E5E5"> now's the bird suit</font>

521
00:26:49,470 --> 00:26:56,440
<font color="#E5E5E5">regulatory as quite a lot at school</font><font color="#CCCCCC"> so</font>

522
00:26:53,559 --> 00:26:59,139
hopefully<font color="#CCCCCC"> you will like</font><font color="#E5E5E5"> this extension</font>

523
00:26:56,440 --> 00:27:01,210
<font color="#E5E5E5">and use it in</font><font color="#CCCCCC"> your in your tests</font><font color="#E5E5E5"> and you</font>

524
00:26:59,140 --> 00:27:03,429
can<font color="#CCCCCC"> now download it from our posit</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> e</font>

525
00:27:01,210 --> 00:27:07,120
or simply if you're quick enough<font color="#CCCCCC"> scan</font>

526
00:27:03,429 --> 00:27:11,409
the QR code<font color="#E5E5E5"> so you don't have to type or</font>

527
00:27:07,120 --> 00:27:14,139
you will and in order<font color="#CCCCCC"> to make sure</font><font color="#E5E5E5"> that</font>

528
00:27:11,409 --> 00:27:16,059
there's a lot<font color="#E5E5E5"> of things that I possibly</font>

529
00:27:14,140 --> 00:27:21,820
go<font color="#E5E5E5"> wrong and my first</font><font color="#CCCCCC"> presentation I</font>

530
00:27:16,059 --> 00:27:24,460
decided to do it<font color="#CCCCCC"> in a live demo I think</font>

531
00:27:21,820 --> 00:27:29,639
that's more<font color="#CCCCCC"> interesting than</font><font color="#E5E5E5"> just giving</font>

532
00:27:24,460 --> 00:27:32,710
some more<font color="#E5E5E5"> slides so there's our</font><font color="#CCCCCC"> web suit</font>

533
00:27:29,640 --> 00:27:40,059
<font color="#CCCCCC">there's our extension Joseph loaded in a</font>

534
00:27:32,710 --> 00:27:42,570
separate<font color="#E5E5E5"> tab you can see it somehow</font><font color="#CCCCCC"> do</font>

535
00:27:40,059 --> 00:27:42,570
<font color="#E5E5E5">it this way</font>

536
00:27:43,530 --> 00:27:50,980
<font color="#E5E5E5">okay so if you load it there's not that</font>

537
00:27:48,220 --> 00:27:56,140
much to see simple some tabs which has

538
00:27:50,980 --> 00:27:58,690
manual decoder preferences help<font color="#CCCCCC"> I will</font>

539
00:27:56,140 --> 00:28:01,299
not go into detail into this now because

540
00:27:58,690 --> 00:28:06,640
I think the attacks are<font color="#CCCCCC"> more interesting</font>

541
00:28:01,299 --> 00:28:09,158
<font color="#E5E5E5">I also created a very very basic demo</font>

542
00:28:06,640 --> 00:28:11,530
application which is<font color="#CCCCCC"> simply simply a</font>

543
00:28:09,159 --> 00:28:13,030
lock in<font color="#E5E5E5"> mask</font><font color="#CCCCCC"> and it's loading</font><font color="#E5E5E5"> that's</font>

544
00:28:11,530 --> 00:28:15,158
good

545
00:28:13,030 --> 00:28:18,700
<font color="#CCCCCC">I will first try</font><font color="#E5E5E5"> the forgot password</font>

546
00:28:15,159 --> 00:28:21,789
feature and this<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> real life scenario</font>

547
00:28:18,700 --> 00:28:24,220
<font color="#E5E5E5">because you know I already saw it in the</font>

548
00:28:21,789 --> 00:28:27,010
wild<font color="#CCCCCC"> that that their services and</font>

549
00:28:24,220 --> 00:28:29,740
applications using it if you click<font color="#E5E5E5"> on</font>

550
00:28:27,010 --> 00:28:32,770
<font color="#E5E5E5">the forgot password it's asking us for</font>

551
00:28:29,740 --> 00:28:35,620
<font color="#E5E5E5">for a username</font><font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> we're giving our</font>

552
00:28:32,770 --> 00:28:37,600
<font color="#CCCCCC">user name saying submit and it's saying</font>

553
00:28:35,620 --> 00:28:42,570
okay<font color="#E5E5E5"> reset link has</font><font color="#CCCCCC"> been set to</font><font color="#E5E5E5"> your</font>

554
00:28:37,600 --> 00:28:47,110
email<font color="#CCCCCC"> address</font><font color="#E5E5E5"> that's as you should do it</font>

555
00:28:42,570 --> 00:28:49,360
there is the email<font color="#E5E5E5"> stood up and it's</font>

556
00:28:47,110 --> 00:28:51,399
containing<font color="#E5E5E5"> a</font>

557
00:28:49,360 --> 00:28:56,129
and there we cannot receive that there's

558
00:28:51,400 --> 00:29:00,910
a quite long a token appended to the UL

559
00:28:56,130 --> 00:29:05,260
<font color="#E5E5E5">recalling this or requesting this URL</font>

560
00:29:00,910 --> 00:29:10,000
now<font color="#CCCCCC"> says hi</font><font color="#E5E5E5"> Dennis set your password</font><font color="#CCCCCC"> set</font>

561
00:29:05,260 --> 00:29:12,400
<font color="#E5E5E5">your new password so</font><font color="#CCCCCC"> there if they're</font>

562
00:29:10,000 --> 00:29:15,160
having<font color="#E5E5E5"> some kind</font><font color="#CCCCCC"> of authentication or</font>

563
00:29:12,400 --> 00:29:18,430
verification<font color="#E5E5E5"> that I am the user Dennis</font>

564
00:29:15,160 --> 00:29:21,700
<font color="#CCCCCC">if we now go back</font><font color="#E5E5E5"> to our</font><font color="#CCCCCC"> bure cute</font>

565
00:29:18,430 --> 00:29:24,220
extension<font color="#CCCCCC"> our web student general we can</font>

566
00:29:21,700 --> 00:29:26,679
<font color="#E5E5E5">observe that</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> request</font><font color="#CCCCCC"> bookmarks all</font>

567
00:29:24,220 --> 00:29:29,800
got highlighted this is already<font color="#E5E5E5"> done by</font>

568
00:29:26,679 --> 00:29:32,500
our extension so it's trying<font color="#E5E5E5"> to find</font>

569
00:29:29,800 --> 00:29:34,928
<font color="#E5E5E5">Jason Beth tokens which might be a</font>

570
00:29:32,500 --> 00:29:37,929
signature or<font color="#CCCCCC"> an encryption</font><font color="#E5E5E5"> and then it's</font>

571
00:29:34,929 --> 00:29:41,280
an it's highlighting this request<font color="#E5E5E5"> if you</font>

572
00:29:37,929 --> 00:29:44,530
<font color="#E5E5E5">checked the box in the preferences</font><font color="#CCCCCC"> and</font>

573
00:29:41,280 --> 00:29:48,100
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> also additionally giving a content</font>

574
00:29:44,530 --> 00:29:51,010
whether this was a<font color="#E5E5E5"> signature or a Veck</font>

575
00:29:48,100 --> 00:29:54,309
encryption then<font color="#E5E5E5"> we can click</font><font color="#CCCCCC"> on this</font>

576
00:29:51,010 --> 00:29:56,740
<font color="#E5E5E5">request and see an additional editor</font>

577
00:29:54,309 --> 00:29:59,460
<font color="#E5E5E5">called a double yes and they're all the</font>

578
00:29:56,740 --> 00:30:02,170
separate components<font color="#E5E5E5"> are split up and</font>

579
00:29:59,460 --> 00:30:05,710
where<font color="#E5E5E5"> feasible also decoded so that we</font>

580
00:30:02,170 --> 00:30:07,780
can already<font color="#E5E5E5"> see</font><font color="#CCCCCC"> what's what is the plain</font>

581
00:30:05,710 --> 00:30:11,410
text<font color="#CCCCCC"> of this so in this case</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this</font>

582
00:30:07,780 --> 00:30:15,160
is an H make token we have our payload

583
00:30:11,410 --> 00:30:17,950
<font color="#E5E5E5">saying issuer</font><font color="#CCCCCC"> app sack demo user ID</font><font color="#E5E5E5"> -</font>

584
00:30:15,160 --> 00:30:21,420
this might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> interesting then we have</font>

585
00:30:17,950 --> 00:30:25,390
an action and in issued at timestamp the

586
00:30:21,420 --> 00:30:28,030
<font color="#CCCCCC">NTX rest enter at the end so</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> we're</font>

587
00:30:25,390 --> 00:30:31,990
<font color="#CCCCCC">now</font><font color="#E5E5E5"> going to do is simply send it to the</font>

588
00:30:28,030 --> 00:30:34,059
repeater<font color="#E5E5E5"> and see click go again</font><font color="#CCCCCC"> okay</font>

589
00:30:31,990 --> 00:30:37,000
<font color="#CCCCCC">same requested saying hi Dennis such a</font>

590
00:30:34,059 --> 00:30:40,149
new password<font color="#E5E5E5"> so far so good if you now</font>

591
00:30:37,000 --> 00:30:42,970
try<font color="#CCCCCC"> to mess with</font><font color="#E5E5E5"> a payload let's say we</font>

592
00:30:40,150 --> 00:30:46,360
want to<font color="#CCCCCC"> become user number 1 which is</font>

593
00:30:42,970 --> 00:30:49,000
hopefully<font color="#E5E5E5"> admin and click and go it says</font>

594
00:30:46,360 --> 00:30:51,189
<font color="#CCCCCC">oh error invalid token so there's</font>

595
00:30:49,000 --> 00:30:56,290
<font color="#E5E5E5">actually some verification on the server</font>

596
00:30:51,190 --> 00:30:59,560
side<font color="#E5E5E5"> which is good</font><font color="#CCCCCC"> there is an</font>

597
00:30:56,290 --> 00:31:01,240
<font color="#E5E5E5">additional context menu saying sent to</font>

598
00:30:59,560 --> 00:31:02,470
Joseph<font color="#CCCCCC"> if you click on the highlighted</font>

599
00:31:01,240 --> 00:31:05,890
request

600
00:31:02,470 --> 00:31:10,419
and then there's an additional attacker

601
00:31:05,890 --> 00:31:14,770
<font color="#E5E5E5">tab on our</font><font color="#CCCCCC"> Joseph tab</font><font color="#E5E5E5"> they're all</font>

602
00:31:10,419 --> 00:31:18,100
<font color="#E5E5E5">available</font><font color="#CCCCCC"> texts are</font><font color="#E5E5E5"> there are shown and</font>

603
00:31:14,770 --> 00:31:20,980
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can select which attack to to use to</font>

604
00:31:18,100 --> 00:31:23,969
<font color="#E5E5E5">try this case we want to try signature</font>

605
00:31:20,980 --> 00:31:26,590
exclusion<font color="#E5E5E5"> because I know that is working</font>

606
00:31:23,970 --> 00:31:29,409
we click on load<font color="#CCCCCC"> and then we get</font><font color="#E5E5E5"> some</font>

607
00:31:26,590 --> 00:31:32,408
additional<font color="#CCCCCC"> information</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case</font>

608
00:31:29,409 --> 00:31:35,909
a short<font color="#E5E5E5"> description of what</font><font color="#CCCCCC"> the attack</font>

609
00:31:32,409 --> 00:31:39,669
actually is and<font color="#CCCCCC"> what it exploits and</font>

610
00:31:35,909 --> 00:31:41,890
depending<font color="#E5E5E5"> on the attack we maybe need to</font>

611
00:31:39,669 --> 00:31:45,789
<font color="#E5E5E5">provide some</font><font color="#CCCCCC"> more some more information</font>

612
00:31:41,890 --> 00:31:48,760
<font color="#CCCCCC">like the public key which is</font><font color="#E5E5E5"> later if we</font>

613
00:31:45,789 --> 00:31:51,309
then click on attack then another window

614
00:31:48,760 --> 00:31:56,169
<font color="#CCCCCC">opens which has the look</font><font color="#E5E5E5"> and feel of the</font>

615
00:31:51,309 --> 00:31:58,480
intruder<font color="#E5E5E5"> so we see simply different</font>

616
00:31:56,169 --> 00:32:01,780
different requests with different

617
00:31:58,480 --> 00:32:03,520
payloads we<font color="#E5E5E5"> send and also the status</font>

618
00:32:01,780 --> 00:32:06,220
code the length of the response<font color="#E5E5E5"> et</font>

619
00:32:03,520 --> 00:32:10,270
<font color="#E5E5E5">cetera</font><font color="#CCCCCC"> so if we look</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example at D</font>

620
00:32:06,220 --> 00:32:13,270
this one with the algorithm<font color="#CCCCCC"> num</font><font color="#E5E5E5"> you can</font>

621
00:32:10,270 --> 00:32:16,360
also see it<font color="#E5E5E5"> in the editor so</font><font color="#CCCCCC"> egular the</font>

622
00:32:13,270 --> 00:32:19,690
nun<font color="#CCCCCC"> was used and the signature was cut</font>

623
00:32:16,360 --> 00:32:23,168
away just as explained<font color="#E5E5E5"> in our in our</font>

624
00:32:19,690 --> 00:32:24,010
attack scenario then we<font color="#E5E5E5"> get as response</font>

625
00:32:23,169 --> 00:32:27,039
<font color="#CCCCCC">okay</font>

626
00:32:24,010 --> 00:32:28,740
error invalid token but if we take a

627
00:32:27,039 --> 00:32:31,890
look at the other<font color="#E5E5E5"> requests there is a</font>

628
00:32:28,740 --> 00:32:36,010
difference in<font color="#E5E5E5"> the response tanks so</font>

629
00:32:31,890 --> 00:32:36,700
let's take a look what it<font color="#CCCCCC"> says</font><font color="#E5E5E5"> there</font>

630
00:32:36,010 --> 00:32:39,520
says again

631
00:32:36,700 --> 00:32:41,470
hi Dennis<font color="#CCCCCC"> set you know passwords so even</font>

632
00:32:39,520 --> 00:32:44,590
by using the different algorithm we were

633
00:32:41,470 --> 00:32:47,260
able<font color="#CCCCCC"> to ability perform this</font><font color="#E5E5E5"> request</font>

634
00:32:44,590 --> 00:32:49,780
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is good for others in the attacker</font>

635
00:32:47,260 --> 00:32:52,860
so this payload seems to work<font color="#E5E5E5"> we can now</font>

636
00:32:49,780 --> 00:32:54,270
send this again to the repeater

637
00:32:52,860 --> 00:32:56,649
try it again

638
00:32:54,270 --> 00:32:59,830
identity new password<font color="#CCCCCC"> ok that's working</font>

639
00:32:56,650 --> 00:33:03,669
<font color="#E5E5E5">and if we now mess around with the</font><font color="#CCCCCC"> PL</font>

640
00:32:59,830 --> 00:33:08,350
payload<font color="#E5E5E5"> saying okay now I'm user</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> trust</font>

641
00:33:03,669 --> 00:33:10,559
me<font color="#CCCCCC"> funky quest</font><font color="#E5E5E5"> there this high admin set</font>

642
00:33:08,350 --> 00:33:13,360
a new<font color="#E5E5E5"> password and</font><font color="#CCCCCC"> we are now able to</font>

643
00:33:10,559 --> 00:33:16,220
set<font color="#E5E5E5"> a password for every user within</font>

644
00:33:13,360 --> 00:33:18,799
<font color="#CCCCCC">this system and by skipping</font><font color="#E5E5E5"> the first</font>

645
00:33:16,220 --> 00:33:20,690
<font color="#CCCCCC">Steff of sending the actual</font><font color="#E5E5E5"> email for</font>

646
00:33:18,799 --> 00:33:22,520
the password<font color="#CCCCCC"> reset we are</font><font color="#E5E5E5"> even able to</font>

647
00:33:20,690 --> 00:33:26,600
<font color="#E5E5E5">change the password without the user</font>

648
00:33:22,520 --> 00:33:37,908
being notified so this was our<font color="#E5E5E5"> first</font>

649
00:33:26,600 --> 00:33:40,280
attack our second attack is<font color="#E5E5E5"> let's say we</font>

650
00:33:37,909 --> 00:33:44,600
have a valid account on<font color="#E5E5E5"> this service and</font>

651
00:33:40,280 --> 00:33:48,710
we do<font color="#E5E5E5"> login then says hi Dennis Europe</font>

652
00:33:44,600 --> 00:33:51,408
<font color="#E5E5E5">role is user which is quite good this</font>

653
00:33:48,710 --> 00:33:54,380
time<font color="#E5E5E5"> there is</font><font color="#CCCCCC"> no token within the within</font>

654
00:33:51,409 --> 00:33:56,419
<font color="#CCCCCC">the URL</font><font color="#E5E5E5"> as query parameter so we're</font>

655
00:33:54,380 --> 00:34:01,159
going<font color="#E5E5E5"> back again tor extension and</font>

656
00:33:56,419 --> 00:34:03,080
there's another highlighted request<font color="#CCCCCC"> we</font>

657
00:34:01,159 --> 00:34:05,360
go to the<font color="#CCCCCC"> rods app that we can see ok</font>

658
00:34:03,080 --> 00:34:08,869
this<font color="#CCCCCC"> time with token</font><font color="#E5E5E5"> has been issued as</font>

659
00:34:05,360 --> 00:34:13,940
cookie<font color="#E5E5E5"> a session cookie</font><font color="#CCCCCC"> and then we can</font>

660
00:34:08,869 --> 00:34:16,580
observe again<font color="#CCCCCC"> that there is that the</font>

661
00:34:13,940 --> 00:34:19,639
header<font color="#E5E5E5"> contains the algorithm in this</font>

662
00:34:16,580 --> 00:34:21,649
case<font color="#CCCCCC"> ours a was used and its</font><font color="#E5E5E5"> payload we</font>

663
00:34:19,639 --> 00:34:27,139
have now<font color="#E5E5E5"> okay again the issuer</font><font color="#CCCCCC"> a</font>

664
00:34:21,649 --> 00:34:32,989
<font color="#CCCCCC">username</font><font color="#E5E5E5"> and an admin flag can again</font>

665
00:34:27,139 --> 00:34:35,990
send this to our repeater<font color="#CCCCCC"> ok there's</font>

666
00:34:32,989 --> 00:34:38,330
<font color="#E5E5E5">still working if we now</font><font color="#CCCCCC"> mess around with</font>

667
00:34:35,989 --> 00:34:41,719
the<font color="#E5E5E5"> payloads we want to become admin of</font>

668
00:34:38,330 --> 00:34:43,489
course set the flag to true<font color="#E5E5E5"> and saying</font>

669
00:34:41,719 --> 00:34:45,799
<font color="#CCCCCC">ok you're not</font><font color="#E5E5E5"> authorized to</font><font color="#CCCCCC"> view</font><font color="#E5E5E5"> this</font>

670
00:34:43,489 --> 00:34:49,879
page so again<font color="#CCCCCC"> there's some verification</font>

671
00:34:45,800 --> 00:34:51,440
<font color="#CCCCCC">as we learned we can try the signature</font>

672
00:34:49,879 --> 00:34:54,879
exclusion text by<font color="#CCCCCC"> using different</font>

673
00:34:51,440 --> 00:34:57,950
capitalization of<font color="#CCCCCC"> seen</font><font color="#E5E5E5"> an algorithm can</font>

674
00:34:54,879 --> 00:35:00,799
simply cut away the signature<font color="#E5E5E5"> and hit go</font>

675
00:34:57,950 --> 00:35:03,290
<font color="#E5E5E5">and we're still not authorized to</font><font color="#CCCCCC"> view</font>

676
00:35:00,800 --> 00:35:07,040
<font color="#E5E5E5">this page so signature execution and</font>

677
00:35:03,290 --> 00:35:11,290
cannot be applied<font color="#E5E5E5"> here so again sending</font>

678
00:35:07,040 --> 00:35:14,839
this request to<font color="#CCCCCC"> our extension and now</font>

679
00:35:11,290 --> 00:35:16,910
<font color="#CCCCCC">choose the key confusion as attack we</font>

680
00:35:14,839 --> 00:35:18,980
load it<font color="#E5E5E5"> and again there's some</font>

681
00:35:16,910 --> 00:35:23,060
description and it's asking<font color="#CCCCCC"> for a</font><font color="#E5E5E5"> public</font>

682
00:35:18,980 --> 00:35:26,450
<font color="#E5E5E5">key as a</font><font color="#CCCCCC"> public key as</font><font color="#E5E5E5"> usual public we</font>

683
00:35:23,060 --> 00:35:29,630
<font color="#CCCCCC">can search search the server and see the</font>

684
00:35:26,450 --> 00:35:30,850
each a jwk<font color="#CCCCCC"> Dutch Jason which is an RSA</font>

685
00:35:29,630 --> 00:35:35,510
public

686
00:35:30,850 --> 00:35:38,120
<font color="#E5E5E5">this is a raw format we simply copy that</font>

687
00:35:35,510 --> 00:35:41,750
and provide<font color="#E5E5E5"> this to our attack engine</font>

688
00:35:38,120 --> 00:35:43,250
and hit<font color="#CCCCCC"> attack this</font><font color="#E5E5E5"> is not a</font><font color="#CCCCCC"> valid come</font>

689
00:35:41,750 --> 00:35:45,440
<font color="#CCCCCC">format that</font><font color="#E5E5E5"> is correct because we</font>

690
00:35:43,250 --> 00:35:48,830
support<font color="#E5E5E5"> both</font><font color="#CCCCCC"> the PM</font><font color="#E5E5E5"> and he and Jason</font>

691
00:35:45,440 --> 00:35:53,030
<font color="#CCCCCC">Beghe formant we select Jason that key</font>

692
00:35:48,830 --> 00:35:55,970
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we can perform the attack and again</font>

693
00:35:53,030 --> 00:36:00,490
we can sort by<font color="#CCCCCC"> lengths to see any</font>

694
00:35:55,970 --> 00:36:03,169
differences in<font color="#E5E5E5"> the responses and quite</font>

695
00:36:00,490 --> 00:36:04,819
some requests were performed in the

696
00:36:03,170 --> 00:36:07,250
background so we have around<font color="#E5E5E5"> I think</font>

697
00:36:04,820 --> 00:36:11,690
<font color="#CCCCCC">twelve</font><font color="#E5E5E5"> transformations of the public key</font>

698
00:36:07,250 --> 00:36:13,640
<font color="#CCCCCC">to really match the the</font><font color="#E5E5E5"> used string</font>

699
00:36:11,690 --> 00:36:19,790
representation that's used<font color="#E5E5E5"> on this</font>

700
00:36:13,640 --> 00:36:23,029
server<font color="#E5E5E5"> if you simply check this one</font><font color="#CCCCCC"> okay</font>

701
00:36:19,790 --> 00:36:26,270
<font color="#CCCCCC">North Road</font><font color="#E5E5E5"> Northwest and payload number</font>

702
00:36:23,030 --> 00:36:28,700
<font color="#CCCCCC">OC has a different</font><font color="#E5E5E5"> length and</font><font color="#CCCCCC"> there the</font>

703
00:36:26,270 --> 00:36:31,850
response<font color="#E5E5E5"> seems to be valid saying</font>

704
00:36:28,700 --> 00:36:35,450
identity<font color="#CCCCCC"> role as user it's pretty good</font>

705
00:36:31,850 --> 00:36:40,130
so this payload seems to work<font color="#CCCCCC"> we now</font>

706
00:36:35,450 --> 00:36:43,850
send it<font color="#E5E5E5"> to our repeater again</font><font color="#CCCCCC"> we can</font>

707
00:36:40,130 --> 00:36:46,670
again change the<font color="#E5E5E5"> payload set our mo flag</font>

708
00:36:43,850 --> 00:36:48,860
to true just check it<font color="#CCCCCC"> okay it's not</font>

709
00:36:46,670 --> 00:36:52,010
valid<font color="#E5E5E5"> then</font><font color="#CCCCCC"> we have an</font><font color="#E5E5E5"> additional attack</font>

710
00:36:48,860 --> 00:36:57,590
attack over here and that<font color="#CCCCCC"> we'd simply</font>

711
00:36:52,010 --> 00:37:00,140
<font color="#E5E5E5">choose the same attack we try</font><font color="#CCCCCC"> to give it</font>

712
00:36:57,590 --> 00:37:03,070
<font color="#CCCCCC">our public key and then we have to</font>

713
00:37:00,140 --> 00:37:08,660
choose<font color="#E5E5E5"> the payload which word which was</font>

714
00:37:03,070 --> 00:37:10,730
transformation 1200<font color="#E5E5E5"> CE and if we now</font>

715
00:37:08,660 --> 00:37:13,430
click<font color="#E5E5E5"> on update and the background the</font>

716
00:37:10,730 --> 00:37:15,290
signature is created and we<font color="#CCCCCC"> can now</font>

717
00:37:13,430 --> 00:37:17,690
click again<font color="#E5E5E5"> and go perform the oppressed</font>

718
00:37:15,290 --> 00:37:19,880
and<font color="#CCCCCC"> there says hi Dennis your</font><font color="#E5E5E5"> own admin</font>

719
00:37:17,690 --> 00:37:22,370
and we with this attack we<font color="#E5E5E5"> know</font>

720
00:37:19,880 --> 00:37:24,550
escalated our privileges<font color="#E5E5E5"> and the image</font>

721
00:37:22,370 --> 00:37:24,549
system

722
00:37:27,670 --> 00:37:34,870
last but<font color="#E5E5E5"> not least the black</font><font color="#CCCCCC"> humor high</font>

723
00:37:30,460 --> 00:37:38,860
tech so there's a service which simply

724
00:37:34,870 --> 00:37:41,740
<font color="#CCCCCC">takes a encrypted token</font><font color="#E5E5E5"> and then says</font>

725
00:37:38,860 --> 00:37:45,250
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> pedrad it was</font><font color="#CCCCCC"> successful successful</font>

726
00:37:41,740 --> 00:37:48,879
<font color="#CCCCCC">or not if we go</font><font color="#E5E5E5"> back to</font><font color="#CCCCCC"> our extension</font>

727
00:37:45,250 --> 00:37:52,630
again it's again highlighted<font color="#E5E5E5"> and we have</font>

728
00:37:48,880 --> 00:37:55,000
another editor tab where all the five

729
00:37:52,630 --> 00:37:58,330
parts<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> DJs in</font><font color="#E5E5E5"> that encryption are</font>

730
00:37:55,000 --> 00:37:59,380
<font color="#CCCCCC">not shown there are the earth</font><font color="#E5E5E5"> a because</font>

731
00:37:58,330 --> 00:38:02,380
<font color="#CCCCCC">a is</font><font color="#E5E5E5"> one point five</font>

732
00:37:59,380 --> 00:38:06,550
everything was<font color="#CCCCCC"> reused which is good</font><font color="#E5E5E5"> for</font>

733
00:38:02,380 --> 00:38:09,460
<font color="#E5E5E5">us and the other parts are not not</font>

734
00:38:06,550 --> 00:38:13,330
decoded because<font color="#CCCCCC"> that will result in</font>

735
00:38:09,460 --> 00:38:18,370
<font color="#CCCCCC">garbage if we now send it</font><font color="#E5E5E5"> to our</font>

736
00:38:13,330 --> 00:38:19,840
extension we are only able to select the

737
00:38:18,370 --> 00:38:22,240
<font color="#E5E5E5">Blythe</font><font color="#CCCCCC"> Muhammed</font><font color="#E5E5E5"> a message</font><font color="#CCCCCC"> detects so</font>

738
00:38:19,840 --> 00:38:25,450
it's already recognizing<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> there's</font>

739
00:38:22,240 --> 00:38:27,399
<font color="#E5E5E5">Jason</font><font color="#CCCCCC"> web signature or</font><font color="#E5E5E5"> encryption and it</font>

740
00:38:25,450 --> 00:38:29,370
knows which which it take might be

741
00:38:27,400 --> 00:38:31,540
applied to<font color="#E5E5E5"> it or not</font>

742
00:38:29,370 --> 00:38:36,069
again<font color="#E5E5E5"> we've loaded there's some</font>

743
00:38:31,540 --> 00:38:37,840
description and then it's<font color="#E5E5E5"> asked for the</font>

744
00:38:36,070 --> 00:38:42,310
public key again<font color="#E5E5E5"> this time we're</font><font color="#CCCCCC"> using</font>

745
00:38:37,840 --> 00:38:44,350
and are a<font color="#E5E5E5"> public key in the PM</font><font color="#CCCCCC"> forma to</font>

746
00:38:42,310 --> 00:38:49,840
show you that both formats<font color="#E5E5E5"> are supported</font>

747
00:38:44,350 --> 00:38:51,160
and we're performing<font color="#E5E5E5"> the attack and this</font>

748
00:38:49,840 --> 00:38:55,450
one is a<font color="#CCCCCC"> little</font><font color="#E5E5E5"> different to the other</font>

749
00:38:51,160 --> 00:38:58,740
ones because now we have to manually

750
00:38:55,450 --> 00:39:03,490
<font color="#E5E5E5">review the requests and build our</font>

751
00:38:58,740 --> 00:39:07,029
<font color="#E5E5E5">padding Oracle so we have to review</font>

752
00:39:03,490 --> 00:39:07,209
whether the<font color="#E5E5E5"> pkcs1 formula was correct or</font>

753
00:39:07,030 --> 00:39:09,160
not

754
00:39:07,210 --> 00:39:13,690
it's simply<font color="#CCCCCC"> information gathering</font>

755
00:39:09,160 --> 00:39:15,670
<font color="#E5E5E5">beforehand or a</font><font color="#CCCCCC"> a guessing and</font><font color="#E5E5E5"> we can</font>

756
00:39:13,690 --> 00:39:17,740
see different errors so expected key

757
00:39:15,670 --> 00:39:21,010
<font color="#CCCCCC">length</font><font color="#E5E5E5"> what's wrong</font>

758
00:39:17,740 --> 00:39:23,109
the description<font color="#CCCCCC"> failed or anything so we</font>

759
00:39:21,010 --> 00:39:25,390
are performing several<font color="#CCCCCC"> fellows to check</font>

760
00:39:23,110 --> 00:39:29,290
whether we can determine any differences

761
00:39:25,390 --> 00:39:31,720
and if we<font color="#E5E5E5"> check those those requests</font><font color="#CCCCCC"> I</font>

762
00:39:29,290 --> 00:39:32,910
<font color="#E5E5E5">now know which ones are valid and which</font>

763
00:39:31,720 --> 00:39:36,730
are not

764
00:39:32,910 --> 00:39:38,920
so basically<font color="#CCCCCC"> supposed to</font><font color="#E5E5E5"> indicate</font><font color="#CCCCCC"> that</font>

765
00:39:36,730 --> 00:39:40,900
the padding format was not correct<font color="#E5E5E5"> then</font>

766
00:39:38,920 --> 00:39:44,079
we built our<font color="#E5E5E5"> petting or</font>

767
00:39:40,900 --> 00:39:47,289
and can use this second tab to perform

768
00:39:44,079 --> 00:39:49,569
the actual<font color="#E5E5E5"> attack which is now using the</font>

769
00:39:47,289 --> 00:39:52,029
blocking buffer mathematical formulas in

770
00:39:49,569 --> 00:39:55,089
the background<font color="#E5E5E5"> to send all these</font><font color="#CCCCCC"> geese</font>

771
00:39:52,029 --> 00:39:58,390
requests<font color="#CCCCCC"> and performing the attack and</font>

772
00:39:55,089 --> 00:39:59,920
because I'm sure in<font color="#E5E5E5"> time it let it run</font>

773
00:39:58,390 --> 00:40:02,200
in the<font color="#E5E5E5"> background and finish with my</font>

774
00:39:59,920 --> 00:40:04,680
<font color="#E5E5E5">success lights</font><font color="#CCCCCC"> those are not that</font><font color="#E5E5E5"> much</font>

775
00:40:02,200 --> 00:40:04,680
oops

776
00:40:09,150 --> 00:40:15,069
so simple in a conclusion or<font color="#CCCCCC"> our</font>

777
00:40:13,509 --> 00:40:17,529
contribution on the<font color="#E5E5E5"> one hand the main</font>

778
00:40:15,069 --> 00:40:21,069
contribution is our<font color="#CCCCCC"> budget</font><font color="#E5E5E5"> extension</font><font color="#CCCCCC"> I</font>

779
00:40:17,529 --> 00:40:23,140
hope that helps<font color="#CCCCCC"> you</font><font color="#E5E5E5"> then we were able</font><font color="#CCCCCC"> to</font>

780
00:40:21,069 --> 00:40:25,569
help fixing all in all six libraries of

781
00:40:23,140 --> 00:40:28,089
different languages and speech<font color="#CCCCCC"> V Python</font>

782
00:40:25,569 --> 00:40:30,038
<font color="#CCCCCC">Ruby and</font><font color="#E5E5E5"> C and got quite some</font><font color="#CCCCCC"> CVS for</font>

783
00:40:28,089 --> 00:40:32,049
<font color="#E5E5E5">that and it was really nice to work</font>

784
00:40:30,039 --> 00:40:34,359
together with the developers because all

785
00:40:32,049 --> 00:40:38,019
of<font color="#E5E5E5"> them responded within like 24 hours</font>

786
00:40:34,359 --> 00:40:40,808
and<font color="#E5E5E5"> already also fixed all</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> issues</font>

787
00:40:38,019 --> 00:40:44,470
within 24<font color="#CCCCCC"> or 48 hours so it was quite</font>

788
00:40:40,809 --> 00:40:46,210
quite<font color="#E5E5E5"> nice to work with them and there's</font>

789
00:40:44,470 --> 00:40:48,819
a short conclusion the standard is<font color="#E5E5E5"> not</font>

790
00:40:46,210 --> 00:40:52,239
perfect but the main problem<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually</font>

791
00:40:48,819 --> 00:40:54,430
the implementations and we definitely<font color="#E5E5E5"> as</font>

792
00:40:52,239 --> 00:40:57,339
a security community have to look<font color="#E5E5E5"> into</font>

793
00:40:54,430 --> 00:41:00,669
<font color="#E5E5E5">it and have to help improving it and</font>

794
00:40:57,339 --> 00:41:03,308
making it secure and of course<font color="#CCCCCC"> we would</font>

795
00:41:00,670 --> 00:41:06,880
<font color="#E5E5E5">like if you use the Joseph extension and</font>

796
00:41:03,309 --> 00:41:09,660
improve it like in this<font color="#CCCCCC"> example I think</font>

797
00:41:06,880 --> 00:41:12,910
<font color="#E5E5E5">two months ago</font><font color="#CCCCCC"> as a</font><font color="#E5E5E5"> March there was the</font>

798
00:41:09,660 --> 00:41:15,399
<font color="#CCCCCC">got</font><font color="#E5E5E5"> media attraction that some libraries</font>

799
00:41:12,910 --> 00:41:17,649
I will<font color="#E5E5E5"> member to the envelop coffee tech</font>

800
00:41:15,400 --> 00:41:21,749
so this is<font color="#E5E5E5"> definitely one attack</font><font color="#CCCCCC"> we want</font>

801
00:41:17,650 --> 00:41:26,079
to add to the website extension as<font color="#CCCCCC"> well</font>

802
00:41:21,749 --> 00:41:28,660
<font color="#CCCCCC">now let's see</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> we detect finished not</font>

803
00:41:26,079 --> 00:41:32,890
yet<font color="#E5E5E5"> so it's taking only some seconds</font><font color="#CCCCCC"> I</font>

804
00:41:28,660 --> 00:41:35,170
<font color="#E5E5E5">guess there</font><font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> that different s</font>

805
00:41:32,890 --> 00:41:38,848
values we found so as soon as<font color="#E5E5E5"> we the</font>

806
00:41:35,170 --> 00:41:42,640
attack found one s value which created a

807
00:41:38,849 --> 00:41:45,700
valid<font color="#E5E5E5"> heading at the end at the server</font>

808
00:41:42,640 --> 00:41:48,759
then it can use<font color="#E5E5E5"> this s value to generate</font>

809
00:41:45,700 --> 00:41:52,210
<font color="#E5E5E5">other s values and then</font><font color="#CCCCCC"> step-by-step</font>

810
00:41:48,759 --> 00:41:54,460
find our org or<font color="#E5E5E5"> step by step decrease</font>

811
00:41:52,210 --> 00:41:56,560
the possible interval

812
00:41:54,460 --> 00:42:01,089
within the where the actual messages

813
00:41:56,560 --> 00:42:07,359
contained in and<font color="#E5E5E5"> recover the original</font>

814
00:42:01,089 --> 00:42:14,080
<font color="#CCCCCC">message taking</font><font color="#E5E5E5"> some more seconds</font><font color="#CCCCCC"> I hope</font>

815
00:42:07,359 --> 00:42:16,509
that's<font color="#E5E5E5"> okay it's already fun to see</font>

816
00:42:14,080 --> 00:42:28,470
those<font color="#CCCCCC"> those numbers</font><font color="#E5E5E5"> flowing around there</font>

817
00:42:16,510 --> 00:42:28,470
<font color="#CCCCCC">I think five more seconds or something</font>

818
00:42:30,030 --> 00:42:47,380
<font color="#E5E5E5">come on Joseph you can do it yes there</font>

819
00:42:39,130 --> 00:42:49,750
it's got<font color="#E5E5E5"> the was able to thank you it</font>

820
00:42:47,380 --> 00:42:52,060
was<font color="#E5E5E5"> able to recover the youth session</font>

821
00:42:49,750 --> 00:42:55,119
key<font color="#CCCCCC"> and then it's</font><font color="#E5E5E5"> looking at the header</font>

822
00:42:52,060 --> 00:42:57,310
again which actual algorithm was used to

823
00:42:55,119 --> 00:42:59,530
encrypt<font color="#E5E5E5"> the content it's using the</font>

824
00:42:57,310 --> 00:43:01,690
session<font color="#E5E5E5"> key to decrypt the hidden</font>

825
00:42:59,530 --> 00:43:04,180
message and then it's<font color="#E5E5E5"> also</font><font color="#CCCCCC"> stopped</font>

826
00:43:01,690 --> 00:43:07,420
throwing<font color="#E5E5E5"> the message which says okay</font>

827
00:43:04,180 --> 00:43:13,419
<font color="#E5E5E5">password</font><font color="#CCCCCC"> EPS</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> crock and some meta</font>

828
00:43:07,420 --> 00:43:17,080
<font color="#CCCCCC">information just for debugging yes that</font>

829
00:43:13,420 --> 00:43:18,670
was basically it thank you<font color="#CCCCCC"> very much for</font>

830
00:43:17,080 --> 00:43:20,470
<font color="#E5E5E5">your attention and if you have any</font>

831
00:43:18,670 --> 00:43:23,250
questions feel<font color="#E5E5E5"> free to ask</font>

832
00:43:20,470 --> 00:43:23,250
Thank You<font color="#CCCCCC"> Ellis</font>

833
00:43:28,850 --> 00:43:41,910
okay folks<font color="#CCCCCC"> we're a little short on time</font>

834
00:43:31,050 --> 00:43:46,050
<font color="#CCCCCC">here so just one or two</font><font color="#E5E5E5"> questions called</font>

835
00:43:41,910 --> 00:43:50,129
the<font color="#E5E5E5"> timing attack</font><font color="#CCCCCC"> network latency</font><font color="#E5E5E5"> does</font>

836
00:43:46,050 --> 00:43:53,820
<font color="#E5E5E5">matter a lot and</font><font color="#CCCCCC"> network latency for</font>

837
00:43:50,130 --> 00:43:55,740
timing<font color="#E5E5E5"> attack that was one</font><font color="#CCCCCC"> reason why we</font>

838
00:43:53,820 --> 00:43:58,080
did not include<font color="#E5E5E5"> the timing in tech into</font>

839
00:43:55,740 --> 00:44:00,750
the<font color="#CCCCCC"> website</font><font color="#E5E5E5"> attention because in order</font>

840
00:43:58,080 --> 00:44:03,569
<font color="#E5E5E5">to measure timing differences that</font>

841
00:44:00,750 --> 00:44:04,980
precisely you need<font color="#CCCCCC"> special hardware and</font>

842
00:44:03,570 --> 00:44:08,700
you need to be able to configure<font color="#E5E5E5"> your</font>

843
00:44:04,980 --> 00:44:11,430
system<font color="#CCCCCC"> like really</font><font color="#E5E5E5"> really in-depth and</font>

844
00:44:08,700 --> 00:44:13,169
that it's not possible<font color="#E5E5E5"> as java</font>

845
00:44:11,430 --> 00:44:16,319
application within<font color="#E5E5E5"> the</font><font color="#CCCCCC"> pursuit extension</font>

846
00:44:13,170 --> 00:44:18,180
so timing<font color="#E5E5E5"> attack unfortunately yes</font>

847
00:44:16,320 --> 00:44:21,350
the only<font color="#CCCCCC"> attack of those</font><font color="#E5E5E5"> for which is</font>

848
00:44:18,180 --> 00:44:26,580
not<font color="#E5E5E5"> included in the</font><font color="#CCCCCC"> website extension</font>

849
00:44:21,350 --> 00:44:29,400
one more possible<font color="#E5E5E5"> no that's great well</font>

850
00:44:26,580 --> 00:44:31,350
if anyone wants to converse with<font color="#E5E5E5"> a</font>

851
00:44:29,400 --> 00:44:33,540
mistake on afterwards<font color="#CCCCCC"> go</font><font color="#E5E5E5"> for shorter</font>

852
00:44:31,350 --> 00:44:35,130
times<font color="#E5E5E5"> we'll</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> covered here again</font>

853
00:44:33,540 --> 00:44:38,130
thanks very<font color="#CCCCCC"> much</font><font color="#E5E5E5"> folks</font>

854
00:44:35,130 --> 00:44:42,090
<font color="#CCCCCC">McKeon could you please vote as you're</font>

855
00:44:38,130 --> 00:44:44,490
going out there or internal either blue

856
00:44:42,090 --> 00:44:46,440
<font color="#E5E5E5">you</font><font color="#CCCCCC"> obviously</font><font color="#E5E5E5"> if you find that</font>

857
00:44:44,490 --> 00:44:49,549
informative<font color="#E5E5E5"> thanks very much folks</font>

858
00:44:46,440 --> 00:44:49,550
thank you very<font color="#E5E5E5"> much</font>

