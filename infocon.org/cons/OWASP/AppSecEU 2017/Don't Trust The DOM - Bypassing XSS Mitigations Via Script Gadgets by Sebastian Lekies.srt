1
00:00:02,500 --> 00:00:07,950
thank you for<font color="#E5E5E5"> the introduction</font>

2
00:00:05,950 --> 00:00:11,700
<font color="#CCCCCC">yesterday</font><font color="#E5E5E5"> today we are</font><font color="#CCCCCC"> talking about</font>

3
00:00:07,950 --> 00:00:15,219
breaking XSS mitigation so we are

4
00:00:11,700 --> 00:00:17,769
<font color="#E5E5E5">Christophe Kovac and Eduardo</font><font color="#CCCCCC"> Eila</font><font color="#E5E5E5"> and</font>

5
00:00:15,220 --> 00:00:19,240
myself<font color="#E5E5E5"> and pretty</font><font color="#CCCCCC"> waters</font><font color="#E5E5E5"> unfortunate not</font>

6
00:00:17,769 --> 00:00:21,130
<font color="#CCCCCC">you today</font><font color="#E5E5E5"> so we are giving this</font><font color="#CCCCCC"> talk so</font>

7
00:00:19,240 --> 00:00:23,979
I will be<font color="#E5E5E5"> giving the</font><font color="#CCCCCC"> first part of the</font>

8
00:00:21,130 --> 00:00:27,698
<font color="#E5E5E5">presentation and Christophe will give</font>

9
00:00:23,980 --> 00:00:30,310
the second part of the presentation<font color="#CCCCCC"> so</font>

10
00:00:27,699 --> 00:00:31,860
let's see what<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> all about this is</font>

11
00:00:30,310 --> 00:00:35,290
<font color="#E5E5E5">about XSS and mitigation and</font>

12
00:00:31,860 --> 00:00:38,080
specifically<font color="#E5E5E5"> we want to bypass XSS</font>

13
00:00:35,290 --> 00:00:40,860
mitigation<font color="#E5E5E5"> and here you can see</font><font color="#CCCCCC"> mr.</font><font color="#E5E5E5"> XSS</font>

14
00:00:38,080 --> 00:00:45,030
mitigation trying to mitigate<font color="#E5E5E5"> xsss and</font>

15
00:00:40,860 --> 00:00:47,440
well he's<font color="#CCCCCC"> not</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> very real solid</font>

16
00:00:45,030 --> 00:00:51,610
let's talk about exercise mitigations

17
00:00:47,440 --> 00:00:53,589
first<font color="#E5E5E5"> so one of the major problems in</font>

18
00:00:51,610 --> 00:00:55,720
web<font color="#E5E5E5"> security is cross-site scripting and</font>

19
00:00:53,590 --> 00:00:58,240
we have put a lot<font color="#E5E5E5"> of effort into</font>

20
00:00:55,720 --> 00:01:00,400
cross-site scripting to<font color="#E5E5E5"> perfect it or to</font>

21
00:00:58,240 --> 00:01:03,250
<font color="#E5E5E5">prevent it and despite of all this</font>

22
00:01:00,400 --> 00:01:05,229
effort<font color="#E5E5E5"> exercise is still only present so</font>

23
00:01:03,250 --> 00:01:07,900
as a data<font color="#E5E5E5"> point for example</font><font color="#CCCCCC"> in the</font>

24
00:01:05,229 --> 00:01:10,179
Google vulnerability reward program XSS

25
00:01:07,900 --> 00:01:12,970
<font color="#E5E5E5">make 70% of all the reported</font>

26
00:01:10,180 --> 00:01:15,820
vulnerabilities and we have<font color="#E5E5E5"> literally</font>

27
00:01:12,970 --> 00:01:18,250
dozens of<font color="#E5E5E5"> people working just on XSS</font>

28
00:01:15,820 --> 00:01:20,440
Prevention's by rewriting applications

29
00:01:18,250 --> 00:01:22,120
by creating auto escaping templating

30
00:01:20,440 --> 00:01:24,370
systems by creating<font color="#E5E5E5"> detectors and</font>

31
00:01:22,120 --> 00:01:26,560
scanners and still we have such a huge

32
00:01:24,370 --> 00:01:28,810
number of<font color="#CCCCCC"> exodus so this is really a</font>

33
00:01:26,560 --> 00:01:31,290
<font color="#CCCCCC">fundamental problem</font><font color="#E5E5E5"> of the web platform</font>

34
00:01:28,810 --> 00:01:34,240
<font color="#E5E5E5">and that's basically the basic</font>

35
00:01:31,290 --> 00:01:36,610
assumption of XSS mitigation<font color="#E5E5E5"> technique</font>

36
00:01:34,240 --> 00:01:39,429
so after that<font color="#E5E5E5"> mitigation techniques say</font>

37
00:01:36,610 --> 00:01:41,289
XSS vulnerability will always exist<font color="#CCCCCC"> so</font>

38
00:01:39,430 --> 00:01:43,090
<font color="#E5E5E5">even if we try very</font><font color="#CCCCCC"> hard we cannot</font>

39
00:01:41,290 --> 00:01:46,299
create an application<font color="#E5E5E5"> without an</font><font color="#CCCCCC"> exodus</font>

40
00:01:43,090 --> 00:01:48,970
so<font color="#CCCCCC"> let's not focus not only focus on</font>

41
00:01:46,299 --> 00:01:51,190
<font color="#CCCCCC">preventing XSS</font><font color="#E5E5E5"> but let's try to mitigate</font>

42
00:01:48,970 --> 00:01:53,320
attacks that results from XSS

43
00:01:51,190 --> 00:01:54,548
vulnerability<font color="#E5E5E5"> so the attacker model that</font>

44
00:01:53,320 --> 00:01:56,850
we will<font color="#E5E5E5"> talk about today looks as</font>

45
00:01:54,549 --> 00:02:00,040
follows so you have a<font color="#CCCCCC"> website</font><font color="#E5E5E5"> and we</font>

46
00:01:56,850 --> 00:02:02,559
<font color="#CCCCCC">just</font><font color="#E5E5E5"> learned at some point you will</font><font color="#CCCCCC"> have</font>

47
00:02:00,040 --> 00:02:04,330
<font color="#E5E5E5">an exercise in your website and there is</font>

48
00:02:02,560 --> 00:02:05,970
<font color="#E5E5E5">where the exercise mitigation kicks in</font>

49
00:02:04,330 --> 00:02:09,310
so it tries<font color="#CCCCCC"> to prevent</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> exploitation</font>

50
00:02:05,970 --> 00:02:11,770
<font color="#CCCCCC">so how is this how is this working so</font>

51
00:02:09,310 --> 00:02:14,459
basically all the XSS mitigation have

52
00:02:11,770 --> 00:02:16,270
one main assumptions they try to

53
00:02:14,459 --> 00:02:19,300
<font color="#E5E5E5">identify good</font>

54
00:02:16,270 --> 00:02:20,590
and potentially malicious<font color="#E5E5E5"> HTML and try</font>

55
00:02:19,300 --> 00:02:22,750
to block the malicious ones while

56
00:02:20,590 --> 00:02:24,130
allowing the good ones<font color="#E5E5E5"> and today we will</font>

57
00:02:22,750 --> 00:02:25,330
look at four different<font color="#E5E5E5"> mitigation</font>

58
00:02:24,130 --> 00:02:27,460
techniques we<font color="#CCCCCC"> will look at</font><font color="#E5E5E5"> a web</font>

59
00:02:25,330 --> 00:02:29,860
<font color="#CCCCCC">application firewalls</font><font color="#E5E5E5"> at browser-based</font>

60
00:02:27,460 --> 00:02:31,690
<font color="#E5E5E5">cross-site scripting filters at HTML</font>

61
00:02:29,860 --> 00:02:34,570
sanitizers<font color="#E5E5E5"> and the content security</font>

62
00:02:31,690 --> 00:02:36,430
policy<font color="#CCCCCC"> and so for</font><font color="#E5E5E5"> example web</font>

63
00:02:34,570 --> 00:02:40,299
application firewalls and XSS filters

64
00:02:36,430 --> 00:02:42,220
<font color="#E5E5E5">try to prevent XSS attacks by blocking</font>

65
00:02:40,300 --> 00:02:43,450
malicious maliciously looking<font color="#E5E5E5"> requests</font>

66
00:02:42,220 --> 00:02:45,310
<font color="#CCCCCC">so they will look at the</font><font color="#E5E5E5"> request</font><font color="#CCCCCC"> will</font>

67
00:02:43,450 --> 00:02:48,760
see oh<font color="#CCCCCC"> there is a script tag in there or</font>

68
00:02:45,310 --> 00:02:51,400
and a<font color="#E5E5E5"> JavaScript event handler so</font><font color="#CCCCCC"> let's</font>

69
00:02:48,760 --> 00:02:53,049
just block<font color="#E5E5E5"> this request HTML sanitizers</font>

70
00:02:51,400 --> 00:02:55,090
have a different approach<font color="#E5E5E5"> like you have</font>

71
00:02:53,050 --> 00:02:56,800
a piece<font color="#E5E5E5"> of HTML</font><font color="#CCCCCC"> that comes from the user</font>

72
00:02:55,090 --> 00:02:58,510
and<font color="#E5E5E5"> you would like to make sure</font><font color="#CCCCCC"> the user</font>

73
00:02:56,800 --> 00:03:00,580
<font color="#E5E5E5">cannot do anything bad so you give this</font>

74
00:02:58,510 --> 00:03:02,320
<font color="#E5E5E5">to the sanitizer</font><font color="#CCCCCC"> the sanitizer will</font>

75
00:03:00,580 --> 00:03:05,230
parse the HTML and<font color="#CCCCCC"> will try to</font><font color="#E5E5E5"> remove</font>

76
00:03:02,320 --> 00:03:08,049
<font color="#E5E5E5">all the known bad things or only lets</font>

77
00:03:05,230 --> 00:03:09,190
through the good<font color="#CCCCCC"> non good things and the</font>

78
00:03:08,050 --> 00:03:11,470
<font color="#E5E5E5">same is true</font><font color="#CCCCCC"> for the content security</font>

79
00:03:09,190 --> 00:03:13,930
policy<font color="#CCCCCC"> so the content security policy</font>

80
00:03:11,470 --> 00:03:16,840
tries to identify legitimate scripts and

81
00:03:13,930 --> 00:03:18,670
illegitimate<font color="#CCCCCC"> scripts by forcing</font>

82
00:03:16,840 --> 00:03:21,070
developers to put all the<font color="#E5E5E5"> legitimate</font>

83
00:03:18,670 --> 00:03:22,989
<font color="#E5E5E5">script into separate scripts and then by</font>

84
00:03:21,070 --> 00:03:24,970
<font color="#E5E5E5">whitelisting these scripts and you</font><font color="#CCCCCC"> have</font>

85
00:03:22,990 --> 00:03:26,440
<font color="#E5E5E5">different ways of</font><font color="#CCCCCC"> widely</font><font color="#E5E5E5"> single script</font>

86
00:03:24,970 --> 00:03:28,330
so<font color="#CCCCCC"> you can either to get on an origin</font>

87
00:03:26,440 --> 00:03:30,790
basis you can say everything<font color="#CCCCCC"> that comes</font>

88
00:03:28,330 --> 00:03:33,070
from example the rorg<font color="#E5E5E5"> is trusted or you</font>

89
00:03:30,790 --> 00:03:35,500
can say you can<font color="#E5E5E5"> use nonsense or hashes</font>

90
00:03:33,070 --> 00:03:37,359
<font color="#CCCCCC">so last year we</font><font color="#E5E5E5"> had a paper where we</font>

91
00:03:35,500 --> 00:03:40,180
<font color="#E5E5E5">showed that whitelist origin based</font><font color="#CCCCCC"> white</font>

92
00:03:37,360 --> 00:03:42,250
lists are insecure<font color="#E5E5E5"> so CSP is currently</font>

93
00:03:40,180 --> 00:03:44,470
<font color="#CCCCCC">moving to this</font><font color="#E5E5E5"> non spaced approach where</font>

94
00:03:42,250 --> 00:03:46,480
you say the developer puts everything in

95
00:03:44,470 --> 00:03:48,340
every legitimate<font color="#E5E5E5"> code into a script then</font>

96
00:03:46,480 --> 00:03:49,660
put the<font color="#E5E5E5"> nonce to the script and is known</font>

97
00:03:48,340 --> 00:03:51,400
<font color="#E5E5E5">as a random number that the attacker</font>

98
00:03:49,660 --> 00:03:53,260
cannot guess so when the attacker wants

99
00:03:51,400 --> 00:03:55,720
<font color="#E5E5E5">to do an injection</font><font color="#CCCCCC"> the attacker</font><font color="#E5E5E5"> can</font>

100
00:03:53,260 --> 00:03:57,190
create a payload but<font color="#E5E5E5"> cannot outfit the</font>

101
00:03:55,720 --> 00:03:59,200
script with the<font color="#E5E5E5"> right nonce because it's</font>

102
00:03:57,190 --> 00:04:01,000
regenerated at every page load<font color="#E5E5E5"> and it's</font>

103
00:03:59,200 --> 00:04:04,839
not known before<font color="#CCCCCC"> the</font><font color="#E5E5E5"> page actually loads</font>

104
00:04:01,000 --> 00:04:06,580
<font color="#E5E5E5">so really the main assumption of</font><font color="#CCCCCC"> XSS</font>

105
00:04:04,840 --> 00:04:08,770
mitigations is that you can stop

106
00:04:06,580 --> 00:04:11,800
exercise attacks by blocking dangerous

107
00:04:08,770 --> 00:04:13,720
tags<font color="#E5E5E5"> and dangerous attributes and what</font>

108
00:04:11,800 --> 00:04:16,180
we do what we<font color="#CCCCCC"> offers in this research is</font>

109
00:04:13,720 --> 00:04:18,250
is this<font color="#E5E5E5"> main assumptions of XSS</font>

110
00:04:16,180 --> 00:04:20,410
<font color="#CCCCCC">mitigation is really true when building</font>

111
00:04:18,250 --> 00:04:22,540
a modern<font color="#E5E5E5"> application</font><font color="#CCCCCC"> not like the</font>

112
00:04:20,410 --> 00:04:24,040
classical reflected XSS that we've seen

113
00:04:22,540 --> 00:04:25,090
<font color="#CCCCCC">ten years ago but</font><font color="#E5E5E5"> really a modern</font>

114
00:04:24,040 --> 00:04:27,040
<font color="#CCCCCC">application that uses</font>

115
00:04:25,090 --> 00:04:29,479
<font color="#E5E5E5">makes every use</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> JavaScript libraries</font>

116
00:04:27,040 --> 00:04:31,640
and has all the<font color="#CCCCCC"> modern stuff that</font>

117
00:04:29,480 --> 00:04:33,800
want to have in an<font color="#CCCCCC"> application</font><font color="#E5E5E5"> and well</font>

118
00:04:31,640 --> 00:04:35,210
the short answer<font color="#CCCCCC"> is no</font><font color="#E5E5E5"> this assumption</font>

119
00:04:33,800 --> 00:04:38,890
<font color="#E5E5E5">is not true</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font>

120
00:04:35,210 --> 00:04:41,150
<font color="#E5E5E5">show you in the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> 35 to 40</font><font color="#CCCCCC"> minutes</font>

121
00:04:38,890 --> 00:04:43,070
<font color="#E5E5E5">but in order to do so I would first like</font>

122
00:04:41,150 --> 00:04:46,039
to talk a bit<font color="#CCCCCC"> about the basics about</font>

123
00:04:43,070 --> 00:04:48,050
JavaScript frameworks<font color="#E5E5E5"> so the main</font>

124
00:04:46,040 --> 00:04:50,780
<font color="#E5E5E5">purpose</font><font color="#CCCCCC"> of a modern JavaScript</font><font color="#E5E5E5"> library</font>

125
00:04:48,050 --> 00:04:53,180
is to<font color="#E5E5E5"> interact with the Dom so the goal</font>

126
00:04:50,780 --> 00:04:55,700
is<font color="#CCCCCC"> to either write to the Dom to read</font>

127
00:04:53,180 --> 00:04:57,350
data<font color="#CCCCCC"> from the Dom to do user interact</font><font color="#E5E5E5"> or</font>

128
00:04:55,700 --> 00:04:59,210
to react<font color="#E5E5E5"> on user interactions and then</font>

129
00:04:57,350 --> 00:05:01,610
change the Dom<font color="#E5E5E5"> based on the behavior</font><font color="#CCCCCC"> of</font>

130
00:04:59,210 --> 00:05:05,840
<font color="#E5E5E5">the user and so on and the main way</font><font color="#CCCCCC"> of</font>

131
00:05:01,610 --> 00:05:07,760
doing so<font color="#E5E5E5"> is</font><font color="#CCCCCC"> so called selectors</font><font color="#E5E5E5"> so here</font>

132
00:05:05,840 --> 00:05:10,159
we see a very<font color="#E5E5E5"> simple example</font><font color="#CCCCCC"> so we see</font>

133
00:05:07,760 --> 00:05:11,930
you<font color="#CCCCCC"> like a custom tag and it has some ID</font>

134
00:05:10,160 --> 00:05:13,940
attributes and<font color="#E5E5E5"> class</font><font color="#CCCCCC"> attributes and</font><font color="#E5E5E5"> some</font>

135
00:05:11,930 --> 00:05:17,090
some attributes<font color="#E5E5E5"> and selectors allow you</font>

136
00:05:13,940 --> 00:05:18,740
to query the Dom<font color="#E5E5E5"> for these these</font>

137
00:05:17,090 --> 00:05:21,080
elements<font color="#E5E5E5"> so for example you can query</font>

138
00:05:18,740 --> 00:05:23,540
elements by by the name of<font color="#CCCCCC"> the class you</font>

139
00:05:21,080 --> 00:05:26,690
<font color="#E5E5E5">can query them by the ID by the class or</font>

140
00:05:23,540 --> 00:05:27,830
you can even<font color="#CCCCCC"> curry</font><font color="#E5E5E5"> the Dom by attributes</font>

141
00:05:26,690 --> 00:05:29,600
you can<font color="#E5E5E5"> say give</font><font color="#CCCCCC"> me all the attributes</font>

142
00:05:27,830 --> 00:05:32,330
<font color="#CCCCCC">that</font><font color="#E5E5E5"> have for</font><font color="#CCCCCC"> example a data foo</font>

143
00:05:29,600 --> 00:05:33,980
attribute<font color="#E5E5E5"> and you can even do more</font><font color="#CCCCCC"> you</font>

144
00:05:32,330 --> 00:05:36,320
can say give me<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> elements that</font>

145
00:05:33,980 --> 00:05:38,540
<font color="#CCCCCC">have a data foo attribute begin to a bar</font>

146
00:05:36,320 --> 00:05:41,330
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the last example in this row</font>

147
00:05:38,540 --> 00:05:42,980
and if selectors come in various flavors

148
00:05:41,330 --> 00:05:44,780
and<font color="#CCCCCC"> there are a lot of like alias</font>

149
00:05:42,980 --> 00:05:46,580
functions for example<font color="#CCCCCC"> get element by ID</font>

150
00:05:44,780 --> 00:05:48,830
or get element by class name<font color="#CCCCCC"> in the Dom</font>

151
00:05:46,580 --> 00:05:51,800
<font color="#E5E5E5">that allow you to to interact</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> some</font>

152
00:05:48,830 --> 00:05:53,150
<font color="#E5E5E5">sort but basically you can use the query</font>

153
00:05:51,800 --> 00:05:56,000
selector all function to run all kinds

154
00:05:53,150 --> 00:05:58,340
of selectors and these selectors are

155
00:05:56,000 --> 00:06:01,340
really core<font color="#CCCCCC"> to all</font><font color="#E5E5E5"> JavaScript libraries</font>

156
00:05:58,340 --> 00:06:04,729
and I guess all of<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know the super</font>

157
00:06:01,340 --> 00:06:07,190
famous<font color="#E5E5E5"> jQuery dollar function so that's</font>

158
00:06:04,730 --> 00:06:08,930
so<font color="#E5E5E5"> jQuery is the fundamental of the web</font>

159
00:06:07,190 --> 00:06:10,700
almost every website uses it almost

160
00:06:08,930 --> 00:06:12,860
every<font color="#E5E5E5"> framework is based on jQuery and</font>

161
00:06:10,700 --> 00:06:14,479
the core<font color="#CCCCCC"> of jQuery is this dollar</font>

162
00:06:12,860 --> 00:06:16,880
function and<font color="#E5E5E5"> actually it's just a</font>

163
00:06:14,480 --> 00:06:18,620
glorified<font color="#E5E5E5"> wrapper around query selector</font>

164
00:06:16,880 --> 00:06:20,510
all the function<font color="#CCCCCC"> that we've seen in the</font>

165
00:06:18,620 --> 00:06:22,580
<font color="#CCCCCC">last example</font><font color="#E5E5E5"> so you the dollar function</font>

166
00:06:20,510 --> 00:06:24,590
accepts an arbitrary selector<font color="#CCCCCC"> the</font>

167
00:06:22,580 --> 00:06:26,030
selector then select elements from the

168
00:06:24,590 --> 00:06:27,950
Dom so you get a set<font color="#CCCCCC"> of</font><font color="#E5E5E5"> elements and</font>

169
00:06:26,030 --> 00:06:31,929
then with jQuery you you you do some

170
00:06:27,950 --> 00:06:33,830
actions based on<font color="#E5E5E5"> this selector and</font>

171
00:06:31,930 --> 00:06:35,330
selectors come in<font color="#CCCCCC"> different kind of</font>

172
00:06:33,830 --> 00:06:37,490
<font color="#E5E5E5">flavors so this is the most famous one</font>

173
00:06:35,330 --> 00:06:39,680
<font color="#E5E5E5">another example for example is the boot</font>

174
00:06:37,490 --> 00:06:41,780
the Twitter bootstrap framework<font color="#E5E5E5"> so</font>

175
00:06:39,680 --> 00:06:43,520
Twitter bootstrap uses<font color="#E5E5E5"> what they call a</font>

176
00:06:41,780 --> 00:06:46,008
data data API

177
00:06:43,520 --> 00:06:48,409
data attributes based<font color="#E5E5E5"> API</font><font color="#CCCCCC"> so they also</font>

178
00:06:46,009 --> 00:06:49,580
use selectors<font color="#E5E5E5"> to find all the all the</font>

179
00:06:48,410 --> 00:06:51,590
elements<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the Dom that have a certain</font>

180
00:06:49,580 --> 00:06:53,479
<font color="#E5E5E5">certain attribute set and here we have a</font>

181
00:06:51,590 --> 00:06:55,099
tooltip example so if you want to write

182
00:06:53,479 --> 00:06:58,550
a tooltip in the bootstrap framework

183
00:06:55,099 --> 00:07:00,650
which is<font color="#E5E5E5"> like a set of UI</font><font color="#CCCCCC"> components you</font>

184
00:06:58,550 --> 00:07:02,360
just put some data attributes into<font color="#E5E5E5"> your</font>

185
00:07:00,650 --> 00:07:04,130
onto your element for example<font color="#CCCCCC"> you say</font>

186
00:07:02,360 --> 00:07:06,110
data<font color="#E5E5E5"> table equals to tip and then</font>

187
00:07:04,130 --> 00:07:07,940
there's some<font color="#E5E5E5"> userland and bootstrap code</font>

188
00:07:06,110 --> 00:07:11,419
that<font color="#E5E5E5"> bootstraps</font><font color="#CCCCCC"> a tooltip</font><font color="#E5E5E5"> functionality</font>

189
00:07:07,940 --> 00:07:12,979
and then to bootstrap we'll just create

190
00:07:11,419 --> 00:07:15,500
<font color="#E5E5E5">this tooltip functionality for this</font>

191
00:07:12,979 --> 00:07:17,330
element<font color="#E5E5E5"> and render this title call</font><font color="#CCCCCC"> onto</font>

192
00:07:15,500 --> 00:07:19,190
this page<font color="#E5E5E5"> so this is also done by</font>

193
00:07:17,330 --> 00:07:21,050
selectors although you cannot see from

194
00:07:19,190 --> 00:07:23,120
from this example and this<font color="#E5E5E5"> is an example</font>

195
00:07:21,050 --> 00:07:26,060
<font color="#E5E5E5">I would like to</font><font color="#CCCCCC"> to dig into a bit and</font>

196
00:07:23,120 --> 00:07:29,630
see<font color="#E5E5E5"> how a library would implement such</font>

197
00:07:26,060 --> 00:07:32,780
such<font color="#E5E5E5"> functionality and here we can see a</font>

198
00:07:29,630 --> 00:07:34,550
simple<font color="#E5E5E5"> example of a</font><font color="#CCCCCC"> button</font><font color="#E5E5E5"> so you see we</font>

199
00:07:32,780 --> 00:07:36,138
<font color="#CCCCCC">have a data</font><font color="#E5E5E5"> role attribute that says hey</font>

200
00:07:34,550 --> 00:07:37,610
I'm a button and<font color="#E5E5E5"> that may be a</font>

201
00:07:36,139 --> 00:07:39,500
functionality<font color="#E5E5E5"> that</font><font color="#CCCCCC"> enriches the button</font>

202
00:07:37,610 --> 00:07:42,020
with some CSS functionality<font color="#E5E5E5"> styles it</font>

203
00:07:39,500 --> 00:07:44,000
does a few<font color="#E5E5E5"> crazy JavaScript and CSS</font>

204
00:07:42,020 --> 00:07:46,130
magic to it so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it looks</font><font color="#CCCCCC"> nice and</font>

205
00:07:44,000 --> 00:07:48,830
behaves nice when you click it or hover

206
00:07:46,130 --> 00:07:50,090
over<font color="#E5E5E5"> it and what is here we</font><font color="#CCCCCC"> have a data</font>

207
00:07:48,830 --> 00:07:51,919
<font color="#E5E5E5">role attribute that says this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

208
00:07:50,090 --> 00:07:53,299
<font color="#E5E5E5">button and you have a data text</font>

209
00:07:51,919 --> 00:07:54,979
attribute that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the text that should</font>

210
00:07:53,300 --> 00:07:57,349
be rendered<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the button</font><font color="#E5E5E5"> so how would</font>

211
00:07:54,979 --> 00:08:00,139
you go go to<font color="#E5E5E5"> implement this so in this</font>

212
00:07:57,349 --> 00:08:02,780
case we just use jQuery<font color="#E5E5E5"> right and we use</font>

213
00:08:00,139 --> 00:08:04,219
selectors over here<font color="#E5E5E5"> we say hey as a</font>

214
00:08:02,780 --> 00:08:06,440
framework give me all the things<font color="#CCCCCC"> that</font>

215
00:08:04,219 --> 00:08:07,940
have this data attribute set on the page

216
00:08:06,440 --> 00:08:09,860
so<font color="#CCCCCC"> to turn this into</font><font color="#E5E5E5"> button then you</font>

217
00:08:07,940 --> 00:08:12,440
have some<font color="#E5E5E5"> magic that turns it into the</font>

218
00:08:09,860 --> 00:08:14,659
button adding adding<font color="#E5E5E5"> styles and other</font>

219
00:08:12,440 --> 00:08:16,400
functionality<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> in the end you</font>

220
00:08:14,659 --> 00:08:19,580
<font color="#E5E5E5">you take this data text attribute and</font>

221
00:08:16,400 --> 00:08:22,789
you just render it as the text of the

222
00:08:19,580 --> 00:08:25,250
<font color="#CCCCCC">button and now I have a</font><font color="#E5E5E5"> question for you</font>

223
00:08:22,789 --> 00:08:27,500
<font color="#E5E5E5">so are there</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> security issues in</font><font color="#CCCCCC"> this</font>

224
00:08:25,250 --> 00:08:29,840
code you think this code is perfectly

225
00:08:27,500 --> 00:08:35,419
safe<font color="#CCCCCC"> are there any issues especially</font>

226
00:08:29,840 --> 00:08:37,718
<font color="#E5E5E5">with keeping mitigations in mind there's</font>

227
00:08:35,419 --> 00:08:37,718
an<font color="#E5E5E5"> idea</font>

228
00:08:39,070 --> 00:08:42,979
yes

229
00:08:40,339 --> 00:08:46,820
so the problem<font color="#E5E5E5"> particular problem is</font>

230
00:08:42,979 --> 00:08:48,560
here<font color="#E5E5E5"> so in general in a normal web</font>

231
00:08:46,820 --> 00:08:49,970
application or library<font color="#CCCCCC"> this would not be</font>

232
00:08:48,560 --> 00:08:51,949
a<font color="#E5E5E5"> security issue the same size like</font>

233
00:08:49,970 --> 00:08:53,990
<font color="#E5E5E5">normal code that you</font><font color="#CCCCCC"> see very often but</font>

234
00:08:51,950 --> 00:08:56,110
<font color="#E5E5E5">the problem here is that this data text</font>

235
00:08:53,990 --> 00:09:00,230
<font color="#E5E5E5">attribute is actually rendered as HTML</font>

236
00:08:56,110 --> 00:09:02,089
<font color="#CCCCCC">so basically this code here</font><font color="#E5E5E5"> turns this</font>

237
00:09:00,230 --> 00:09:04,190
data text attribute in a magic property

238
00:09:02,089 --> 00:09:07,880
that<font color="#E5E5E5"> suddenly has to</font><font color="#CCCCCC"> get capability of</font>

239
00:09:04,190 --> 00:09:09,620
executing arbitrary<font color="#E5E5E5"> HTML</font><font color="#CCCCCC"> code and this</font>

240
00:09:07,880 --> 00:09:13,490
<font color="#E5E5E5">is exactly what</font><font color="#CCCCCC"> we call a script gadget</font>

241
00:09:09,620 --> 00:09:15,649
and here you can<font color="#E5E5E5"> see an</font><font color="#CCCCCC"> example of how</font>

242
00:09:13,490 --> 00:09:17,660
you can exploit<font color="#E5E5E5"> a script gadget so now</font>

243
00:09:15,649 --> 00:09:19,880
we have this button functionality let's

244
00:09:17,660 --> 00:09:22,100
assume<font color="#E5E5E5"> we have an XSS and we have an XSS</font>

245
00:09:19,880 --> 00:09:23,779
mitigation<font color="#E5E5E5"> for example an HTML sanitizer</font>

246
00:09:22,100 --> 00:09:26,420
in the page where<font color="#E5E5E5"> you can render some</font>

247
00:09:23,779 --> 00:09:28,490
limited HTML so the sanitizer<font color="#CCCCCC"> will block</font>

248
00:09:26,420 --> 00:09:30,770
all the<font color="#E5E5E5"> script tags and</font><font color="#CCCCCC"> onload tags</font><font color="#E5E5E5"> but</font>

249
00:09:28,490 --> 00:09:32,990
some sanitizers will actually<font color="#E5E5E5"> not touch</font>

250
00:09:30,770 --> 00:09:34,220
data attributes because data attributes

251
00:09:32,990 --> 00:09:36,860
are just data they<font color="#E5E5E5"> don't they don't</font>

252
00:09:34,220 --> 00:09:39,110
<font color="#E5E5E5">execute code by</font><font color="#CCCCCC"> default right but now</font>

253
00:09:36,860 --> 00:09:41,600
this code down here turns this data

254
00:09:39,110 --> 00:09:43,310
attribute in a code execution attribute

255
00:09:41,600 --> 00:09:45,620
basically so what you can do for example

256
00:09:43,310 --> 00:09:48,560
<font color="#E5E5E5">to bypass the sanitizers you just put</font>

257
00:09:45,620 --> 00:09:50,270
<font color="#CCCCCC">arbitrary elements here</font><font color="#E5E5E5"> and what you see</font>

258
00:09:48,560 --> 00:09:53,150
<font color="#CCCCCC">here is for</font><font color="#E5E5E5"> example a sanitizer bypass</font>

259
00:09:50,270 --> 00:09:55,760
it will probably bypass XSS filters and

260
00:09:53,150 --> 00:09:58,610
this also bypasses the content security

261
00:09:55,760 --> 00:10:00,260
policy<font color="#E5E5E5"> because this is the jQuery HTML</font>

262
00:09:58,610 --> 00:10:04,730
function<font color="#E5E5E5"> and doesn't magic but we will</font>

263
00:10:00,260 --> 00:10:06,140
see later<font color="#CCCCCC"> later on so basically let's</font>

264
00:10:04,730 --> 00:10:09,260
talk<font color="#E5E5E5"> about these script gadgets</font>

265
00:10:06,140 --> 00:10:11,270
so to summarize the script gadgets<font color="#E5E5E5"> is a</font>

266
00:10:09,260 --> 00:10:13,640
piece of<font color="#E5E5E5"> legitimate code in your page</font>

267
00:10:11,270 --> 00:10:15,620
<font color="#CCCCCC">that can</font><font color="#E5E5E5"> be triggered</font><font color="#CCCCCC"> why an HTML</font>

268
00:10:13,640 --> 00:10:18,319
injection<font color="#E5E5E5"> so by injecting some benign</font>

269
00:10:15,620 --> 00:10:21,050
looking<font color="#CCCCCC"> element</font><font color="#E5E5E5"> you can execute code in</font>

270
00:10:18,320 --> 00:10:25,160
a function that<font color="#E5E5E5"> does a certain certain</font>

271
00:10:21,050 --> 00:10:27,650
<font color="#E5E5E5">thing and what we asked ourselves at</font>

272
00:10:25,160 --> 00:10:28,939
first is are these gadgets common so do

273
00:10:27,650 --> 00:10:30,980
we see a lot of<font color="#E5E5E5"> gadgets or is</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> just</font>

274
00:10:28,940 --> 00:10:33,860
<font color="#E5E5E5">like a weird behavior that no one would</font>

275
00:10:30,980 --> 00:10:35,329
use so what we<font color="#E5E5E5"> did is we took 16 more</font>

276
00:10:33,860 --> 00:10:37,339
than JavaScript<font color="#CCCCCC"> framework so</font><font color="#E5E5E5"> mainly</font>

277
00:10:35,329 --> 00:10:40,160
<font color="#CCCCCC">based on popularity and like github</font>

278
00:10:37,339 --> 00:10:44,149
likes and and and<font color="#E5E5E5"> user stats and so on</font>

279
00:10:40,160 --> 00:10:46,219
<font color="#CCCCCC">and we tried</font><font color="#E5E5E5"> to look at them and build</font>

280
00:10:44,149 --> 00:10:47,420
applications out of these<font color="#CCCCCC"> frameworks so</font>

281
00:10:46,220 --> 00:10:49,370
for each framework we build an

282
00:10:47,420 --> 00:10:50,360
application<font color="#CCCCCC"> and then we added</font><font color="#E5E5E5"> an XSS</font>

283
00:10:49,370 --> 00:10:53,750
flow to this application

284
00:10:50,360 --> 00:10:56,300
and then we also<font color="#CCCCCC"> setup mitigations for</font>

285
00:10:53,750 --> 00:10:59,510
every applications<font color="#E5E5E5"> so we set up four</font>

286
00:10:56,300 --> 00:11:01,939
different<font color="#E5E5E5"> mitigation classes or CSP XSS</font>

287
00:10:59,510 --> 00:11:04,610
filters sanitizers and<font color="#E5E5E5"> web application</font>

288
00:11:01,940 --> 00:11:06,589
firewalls<font color="#E5E5E5"> and we use we kind of use the</font>

289
00:11:04,610 --> 00:11:08,209
default settings<font color="#E5E5E5"> but we use the kind of</font>

290
00:11:06,589 --> 00:11:10,370
different<font color="#CCCCCC"> configurations</font><font color="#E5E5E5"> for example we</font>

291
00:11:08,209 --> 00:11:12,649
set up<font color="#E5E5E5"> widely spaced</font><font color="#CCCCCC"> ESP is</font><font color="#E5E5E5"> non-space</font>

292
00:11:10,370 --> 00:11:14,959
DSPs<font color="#CCCCCC"> and for XSS filters we use</font>

293
00:11:12,649 --> 00:11:16,279
different XSS filters and sanitizers<font color="#CCCCCC"> and</font>

294
00:11:14,959 --> 00:11:18,739
<font color="#CCCCCC">graphs we also</font><font color="#E5E5E5"> had</font><font color="#CCCCCC"> different examples</font>

295
00:11:16,279 --> 00:11:20,269
<font color="#E5E5E5">and then we manually</font><font color="#CCCCCC"> analyze the</font>

296
00:11:18,740 --> 00:11:23,510
framework<font color="#E5E5E5"> code to look for these gadgets</font>

297
00:11:20,269 --> 00:11:25,430
<font color="#CCCCCC">and try to find out how</font><font color="#E5E5E5"> much how many</font><font color="#CCCCCC"> of</font>

298
00:11:23,510 --> 00:11:27,860
them we can<font color="#CCCCCC"> find and this is a sneak</font>

299
00:11:25,430 --> 00:11:29,689
<font color="#CCCCCC">peak on</font><font color="#E5E5E5"> the results so basically we we</font>

300
00:11:27,860 --> 00:11:31,790
were<font color="#CCCCCC"> able to widely scheduled</font><font color="#E5E5E5"> to bypass</font>

301
00:11:29,690 --> 00:11:33,170
all the tested mitigation and in all the

302
00:11:31,790 --> 00:11:35,779
configuration in different frameworks

303
00:11:33,170 --> 00:11:37,610
<font color="#E5E5E5">and what you can</font><font color="#CCCCCC"> see here</font><font color="#E5E5E5"> is we will</font>

304
00:11:35,779 --> 00:11:39,589
pick deeper into<font color="#CCCCCC"> these results later on</font>

305
00:11:37,610 --> 00:11:41,200
but what<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see here is a so I'd</font>

306
00:11:39,589 --> 00:11:43,790
<font color="#E5E5E5">listen on</font><font color="#CCCCCC"> since we're the</font><font color="#E5E5E5"> strongest ones</font>

307
00:11:41,200 --> 00:11:45,589
<font color="#E5E5E5">but then we can see here we unsafe evil</font>

308
00:11:43,790 --> 00:11:47,689
is pretty pretty bad in terms<font color="#E5E5E5"> of by</font>

309
00:11:45,589 --> 00:11:50,050
possibility<font color="#CCCCCC"> also strict dynamic weakens</font>

310
00:11:47,690 --> 00:11:52,279
the policy and also firewalls and

311
00:11:50,050 --> 00:11:54,649
<font color="#E5E5E5">exercise filters and sanitizers they are</font>

312
00:11:52,279 --> 00:11:55,970
not doing<font color="#CCCCCC"> very well so we we bypass more</font>

313
00:11:54,649 --> 00:12:00,260
than<font color="#E5E5E5"> 50%</font><font color="#CCCCCC"> of the different combinations</font>

314
00:11:55,970 --> 00:12:01,459
<font color="#CCCCCC">and</font><font color="#E5E5E5"> this is what we actually found in</font>

315
00:12:00,260 --> 00:12:03,290
the<font color="#CCCCCC"> framework so we looked</font><font color="#E5E5E5"> at the</font>

316
00:12:01,459 --> 00:12:05,768
framework<font color="#E5E5E5"> code and frameworks have many</font>

317
00:12:03,290 --> 00:12:07,939
different<font color="#E5E5E5"> kinds of gadgets</font><font color="#CCCCCC"> and the first</font>

318
00:12:05,769 --> 00:12:09,500
things that<font color="#E5E5E5"> you see is that frameworks</font>

319
00:12:07,940 --> 00:12:11,449
make heavy use of<font color="#CCCCCC"> d selectors as I</font>

320
00:12:09,500 --> 00:12:12,800
explained before<font color="#CCCCCC"> so you see document</font>

321
00:12:11,449 --> 00:12:14,630
<font color="#E5E5E5">query select a lot you see</font>

322
00:12:12,800 --> 00:12:17,000
document.getelementbyid ilat' and so on

323
00:12:14,630 --> 00:12:19,040
so they frequently read data and what

324
00:12:17,000 --> 00:12:20,720
they also do a<font color="#E5E5E5"> lot is inner HTML</font><font color="#CCCCCC"> and</font>

325
00:12:19,040 --> 00:12:22,430
stuff<font color="#E5E5E5"> and evolving stuff so these are</font>

326
00:12:20,720 --> 00:12:23,959
the classical Dom XSS<font color="#E5E5E5"> things that you</font>

327
00:12:22,430 --> 00:12:26,810
<font color="#E5E5E5">might know when testing photonics is</font><font color="#CCCCCC"> s</font>

328
00:12:23,959 --> 00:12:28,849
but we<font color="#E5E5E5"> also saw that a lot of frameworks</font>

329
00:12:26,810 --> 00:12:31,339
do for example<font color="#CCCCCC"> create script elements</font>

330
00:12:28,850 --> 00:12:33,320
based on some user content<font color="#E5E5E5"> and also</font>

331
00:12:31,339 --> 00:12:36,440
interestingly we saw that<font color="#E5E5E5"> there's a lot</font>

332
00:12:33,320 --> 00:12:38,390
<font color="#E5E5E5">of JavaScript stuff going on so we see</font>

333
00:12:36,440 --> 00:12:40,550
<font color="#E5E5E5">that a lot of for</font><font color="#CCCCCC"> example properties are</font>

334
00:12:38,390 --> 00:12:42,500
set on user user control data or

335
00:12:40,550 --> 00:12:45,140
functions are called<font color="#E5E5E5"> based on user</font>

336
00:12:42,500 --> 00:12:47,600
provided<font color="#E5E5E5"> data and this will be the two</font>

337
00:12:45,140 --> 00:12:49,069
parts of<font color="#E5E5E5"> this talk</font><font color="#CCCCCC"> so in the first talk</font>

338
00:12:47,600 --> 00:12:51,860
<font color="#E5E5E5">I will talk about these these</font>

339
00:12:49,070 --> 00:12:53,420
traditional Dom based gadgets<font color="#E5E5E5"> and in the</font>

340
00:12:51,860 --> 00:12:57,819
second part<font color="#CCCCCC"> Christophe will talk about</font>

341
00:12:53,420 --> 00:12:59,930
<font color="#E5E5E5">these more JavaScript</font><font color="#CCCCCC"> like get it and</font>

342
00:12:57,819 --> 00:13:02,420
what we found out is that<font color="#E5E5E5"> these gadgets</font>

343
00:12:59,930 --> 00:13:03,859
<font color="#CCCCCC">that do a certain functionality can</font><font color="#E5E5E5"> be</font>

344
00:13:02,420 --> 00:13:04,910
<font color="#E5E5E5">chained together</font>

345
00:13:03,860 --> 00:13:06,380
you can can<font color="#CCCCCC"> take different</font>

346
00:13:04,910 --> 00:13:08,240
<font color="#CCCCCC">functionalities from different libraries</font>

347
00:13:06,380 --> 00:13:10,189
and trigger<font color="#E5E5E5"> them individually and then</font>

348
00:13:08,240 --> 00:13:12,050
chain them together to produce<font color="#E5E5E5"> security</font>

349
00:13:10,190 --> 00:13:15,430
<font color="#CCCCCC">sensitive actions</font><font color="#E5E5E5"> and in the worst case</font>

350
00:13:12,050 --> 00:13:18,380
<font color="#CCCCCC">to trigger arbitrary JavaScript code</font><font color="#E5E5E5"> and</font>

351
00:13:15,430 --> 00:13:19,790
<font color="#E5E5E5">we have a couple of examples</font><font color="#CCCCCC"> so in the</font>

352
00:13:18,380 --> 00:13:21,649
<font color="#CCCCCC">next slide I will</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> knock out as an</font>

353
00:13:19,790 --> 00:13:22,819
<font color="#E5E5E5">example but these examples</font><font color="#CCCCCC"> really work</font>

354
00:13:21,649 --> 00:13:25,310
for all<font color="#E5E5E5"> the libraries that are out there</font>

355
00:13:22,820 --> 00:13:27,709
<font color="#CCCCCC">and we will</font><font color="#E5E5E5"> see a few</font><font color="#CCCCCC"> more and</font>

356
00:13:25,310 --> 00:13:29,839
afterwards<font color="#CCCCCC"> so here we have a very simple</font>

357
00:13:27,709 --> 00:13:32,750
<font color="#CCCCCC">example of a data binding functionality</font>

358
00:13:29,839 --> 00:13:34,730
<font color="#CCCCCC">knock out</font><font color="#E5E5E5"> so we see there's a data bind</font>

359
00:13:32,750 --> 00:13:36,470
<font color="#E5E5E5">you already see the data attribute so it</font>

360
00:13:34,730 --> 00:13:38,899
seems to<font color="#CCCCCC"> be benign right</font><font color="#E5E5E5"> and it has a</font>

361
00:13:36,470 --> 00:13:41,300
functionality<font color="#E5E5E5"> to just assign this tool</font>

362
00:13:38,899 --> 00:13:43,339
value so let's see what<font color="#CCCCCC"> knockout does in</font>

363
00:13:41,300 --> 00:13:45,920
the background<font color="#E5E5E5"> so the first thing that</font>

364
00:13:43,339 --> 00:13:48,410
<font color="#E5E5E5">not the does it reach this data bind</font>

365
00:13:45,920 --> 00:13:50,089
attribute why this this selector you can

366
00:13:48,410 --> 00:13:52,250
see the users your<font color="#CCCCCC"> selector and then</font><font color="#E5E5E5"> it</font>

367
00:13:50,089 --> 00:13:54,110
processes it in a way and the second

368
00:13:52,250 --> 00:13:56,720
step<font color="#E5E5E5"> is it creates a binding</font><font color="#CCCCCC"> object and</font>

369
00:13:54,110 --> 00:14:00,380
what you can see<font color="#CCCCCC"> here</font><font color="#E5E5E5"> it constructs</font>

370
00:13:56,720 --> 00:14:02,360
<font color="#E5E5E5">JavaScript from from this binding and</font>

371
00:14:00,380 --> 00:14:04,820
then it puts<font color="#E5E5E5"> this</font><font color="#CCCCCC"> JavaScript into</font>

372
00:14:02,360 --> 00:14:07,070
<font color="#E5E5E5">function and luckily it also executed</font>

373
00:14:04,820 --> 00:14:08,420
<font color="#CCCCCC">this function for us</font><font color="#E5E5E5"> so in this this</font>

374
00:14:07,070 --> 00:14:10,250
call we can see here's a binding

375
00:14:08,420 --> 00:14:13,370
function<font color="#E5E5E5"> and then it</font><font color="#CCCCCC"> calls</font><font color="#E5E5E5"> it with with</font>

376
00:14:10,250 --> 00:14:15,550
the node which is<font color="#CCCCCC"> this one so how can</font><font color="#E5E5E5"> we</font>

377
00:14:13,370 --> 00:14:19,760
turn this<font color="#CCCCCC"> into an XSS mitigation bypass</font>

378
00:14:15,550 --> 00:14:22,040
<font color="#E5E5E5">so this is the bypass so what we've seen</font>

379
00:14:19,760 --> 00:14:23,870
<font color="#E5E5E5">is that the value that is read</font><font color="#CCCCCC"> from the</font>

380
00:14:22,040 --> 00:14:26,120
data bind attribute is put into eval and

381
00:14:23,870 --> 00:14:29,750
there is no validation happening at all

382
00:14:26,120 --> 00:14:32,570
that this this thing is<font color="#E5E5E5"> benign or not so</font>

383
00:14:29,750 --> 00:14:35,769
this is a very simple simple<font color="#E5E5E5"> gadget</font><font color="#CCCCCC"> that</font>

384
00:14:32,570 --> 00:14:37,940
for example bypasses HTML sanitizers<font color="#CCCCCC"> and</font>

385
00:14:35,769 --> 00:14:39,680
probably also<font color="#CCCCCC"> accessor Soto's yeah we</font>

386
00:14:37,940 --> 00:14:41,449
see here so what we bypass with this

387
00:14:39,680 --> 00:14:43,399
gadget<font color="#E5E5E5"> or variations of visits dump you</font>

388
00:14:41,449 --> 00:14:45,769
fire all the XSS filters like no script

389
00:14:43,399 --> 00:14:48,170
<font color="#E5E5E5">edge</font><font color="#CCCCCC"> equals s filters and and the Google</font>

390
00:14:45,769 --> 00:14:50,709
<font color="#CCCCCC">Chrome</font><font color="#E5E5E5"> one and we also bypass</font>

391
00:14:48,170 --> 00:14:54,079
<font color="#CCCCCC">modsecurity</font><font color="#E5E5E5"> with the core will set</font>

392
00:14:50,709 --> 00:14:55,910
<font color="#E5E5E5">configured so but we can also turn these</font>

393
00:14:54,079 --> 00:14:57,410
knockout gadgets into<font color="#E5E5E5"> other</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> so as</font>

394
00:14:55,910 --> 00:14:58,370
<font color="#CCCCCC">I</font><font color="#E5E5E5"> said we can</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> different gadgets in</font>

395
00:14:57,410 --> 00:15:01,490
the library<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> can chain them</font>

396
00:14:58,370 --> 00:15:02,930
<font color="#E5E5E5">together into different things</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> for</font>

397
00:15:01,490 --> 00:15:05,449
<font color="#CCCCCC">example here we have</font><font color="#E5E5E5"> the same example</font>

398
00:15:02,930 --> 00:15:07,760
<font color="#E5E5E5">but we just</font><font color="#CCCCCC"> use the HTML functionality</font>

399
00:15:05,449 --> 00:15:09,829
and interestingly what happens here is

400
00:15:07,760 --> 00:15:15,410
it reached<font color="#E5E5E5"> this value so that the hello</font>

401
00:15:09,829 --> 00:15:17,719
world<font color="#E5E5E5"> above here and reach this then it</font>

402
00:15:15,410 --> 00:15:20,180
processes this and sets this as HTML and

403
00:15:17,720 --> 00:15:23,180
what we see<font color="#CCCCCC"> here is that knock</font><font color="#E5E5E5"> out falls</font>

404
00:15:20,180 --> 00:15:24,829
back to<font color="#CCCCCC"> jQuery</font><font color="#E5E5E5"> when when doing so so</font>

405
00:15:23,180 --> 00:15:26,630
there's a<font color="#CCCCCC"> combination of libraries in</font>

406
00:15:24,829 --> 00:15:28,640
here that are<font color="#CCCCCC"> a place so you can</font><font color="#E5E5E5"> even</font>

407
00:15:26,630 --> 00:15:30,470
<font color="#CCCCCC">chain like edges across libraries and</font>

408
00:15:28,640 --> 00:15:32,180
we've seen that<font color="#CCCCCC"> actually a</font><font color="#E5E5E5"> lot so for</font>

409
00:15:30,470 --> 00:15:34,190
<font color="#E5E5E5">example a lot</font><font color="#CCCCCC"> of libraries make use of</font>

410
00:15:32,180 --> 00:15:35,390
<font color="#E5E5E5">jQuery when it is available</font><font color="#CCCCCC"> or when it's</font>

411
00:15:34,190 --> 00:15:37,069
not<font color="#CCCCCC"> available they jump to</font><font color="#E5E5E5"> their own</font>

412
00:15:35,390 --> 00:15:39,500
code<font color="#E5E5E5"> or what we've also seen is</font>

413
00:15:37,069 --> 00:15:41,240
polyfills<font color="#E5E5E5"> for example the so the library</font>

414
00:15:39,500 --> 00:15:43,069
always checks is dysfunctional<font color="#CCCCCC"> there is</font>

415
00:15:41,240 --> 00:15:44,890
not then load the polyfill<font color="#E5E5E5"> that that</font>

416
00:15:43,069 --> 00:15:46,219
does some<font color="#CCCCCC"> magic on</font><font color="#E5E5E5"> on the HTML and</font>

417
00:15:44,890 --> 00:15:48,589
interestingly

418
00:15:46,220 --> 00:15:50,540
<font color="#CCCCCC">jQuery has a special behavior for script</font>

419
00:15:48,589 --> 00:15:54,130
<font color="#CCCCCC">tags</font><font color="#E5E5E5"> because if you assign script types</font>

420
00:15:50,540 --> 00:15:57,380
to inner HTML they will not execute so

421
00:15:54,130 --> 00:16:00,439
what's happening here<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that we we have</font>

422
00:15:57,380 --> 00:16:02,660
this HTML<font color="#E5E5E5"> and this node will be will</font><font color="#CCCCCC"> be</font>

423
00:16:00,440 --> 00:16:04,339
passed to<font color="#E5E5E5"> the HTML</font><font color="#CCCCCC"> function and this</font>

424
00:16:02,660 --> 00:16:05,899
HTML<font color="#E5E5E5"> function will grab for script</font><font color="#CCCCCC"> tags</font>

425
00:16:04,339 --> 00:16:08,180
and<font color="#E5E5E5"> whenever there</font><font color="#CCCCCC"> is a script</font><font color="#E5E5E5"> led it</font>

426
00:16:05,899 --> 00:16:11,269
will just<font color="#CCCCCC"> execute it</font><font color="#E5E5E5"> and it was executed</font>

427
00:16:08,180 --> 00:16:13,069
by creating a script element and writing

428
00:16:11,269 --> 00:16:15,110
the<font color="#E5E5E5"> code to the script or text and</font>

429
00:16:13,069 --> 00:16:17,630
appended to the<font color="#CCCCCC"> Dom</font><font color="#E5E5E5"> and this for example</font>

430
00:16:15,110 --> 00:16:19,880
<font color="#CCCCCC">is a CSP strict dynamic bypass because</font>

431
00:16:17,630 --> 00:16:22,819
<font color="#E5E5E5">strict dynamic works that it propagates</font>

432
00:16:19,880 --> 00:16:25,699
<font color="#CCCCCC">Trust</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> scripts that are created by</font>

433
00:16:22,819 --> 00:16:27,800
trusted script so<font color="#E5E5E5"> this this</font><font color="#CCCCCC"> dumb eval is</font>

434
00:16:25,699 --> 00:16:29,839
part of<font color="#E5E5E5"> jQuery so probably in your page</font>

435
00:16:27,800 --> 00:16:32,359
<font color="#E5E5E5">jQuery is a trusted script that you that</font>

436
00:16:29,839 --> 00:16:33,920
<font color="#E5E5E5">you</font><font color="#CCCCCC"> I've listed</font><font color="#E5E5E5"> in CSP so it will just</font>

437
00:16:32,360 --> 00:16:36,410
transfer<font color="#E5E5E5"> trust to the newly created</font>

438
00:16:33,920 --> 00:16:40,790
script but this newly created script can

439
00:16:36,410 --> 00:16:43,250
come from user input Y and XSS<font color="#CCCCCC"> and here</font>

440
00:16:40,790 --> 00:16:45,110
we see the full CSP strict dynamic

441
00:16:43,250 --> 00:16:46,850
bypass<font color="#E5E5E5"> so we can just put</font><font color="#CCCCCC"> a script tag</font>

442
00:16:45,110 --> 00:16:50,600
arbitrary script tag it will be<font color="#CCCCCC"> executed</font>

443
00:16:46,850 --> 00:16:53,180
despite<font color="#CCCCCC"> sees P in the page so let's look</font>

444
00:16:50,600 --> 00:16:55,730
at other gadgets<font color="#E5E5E5"> so we call these simple</font>

445
00:16:53,180 --> 00:16:59,420
gadgets and<font color="#CCCCCC"> Christopher's like to talk</font>

446
00:16:55,730 --> 00:17:01,190
about<font color="#E5E5E5"> like some more crazy stuff so we</font>

447
00:16:59,420 --> 00:17:03,890
have a couple<font color="#E5E5E5"> of examples</font><font color="#CCCCCC"> here so here</font>

448
00:17:01,190 --> 00:17:05,449
we have a strict dynamic bypass in

449
00:17:03,890 --> 00:17:06,589
<font color="#E5E5E5">bootstrap for example this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> tools</font>

450
00:17:05,449 --> 00:17:08,780
<font color="#E5E5E5">have functionality</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I've showed you</font>

451
00:17:06,589 --> 00:17:10,369
<font color="#E5E5E5">before and interestingly the tooltip</font>

452
00:17:08,780 --> 00:17:12,319
bootstrap does everything<font color="#CCCCCC"> while data</font>

453
00:17:10,369 --> 00:17:15,109
attributes<font color="#E5E5E5"> they call it data data</font>

454
00:17:12,319 --> 00:17:17,119
attributed<font color="#CCCCCC"> lab and so here we have a</font>

455
00:17:15,109 --> 00:17:19,839
tooltip<font color="#CCCCCC"> and by default</font><font color="#E5E5E5"> this tooltip is</font>

456
00:17:17,119 --> 00:17:21,889
rendered as text but as the bootstrap

457
00:17:19,839 --> 00:17:23,418
functionality works<font color="#E5E5E5"> by data attributes</font>

458
00:17:21,890 --> 00:17:24,860
<font color="#E5E5E5">you can just change</font><font color="#CCCCCC"> the internal</font>

459
00:17:23,419 --> 00:17:26,510
<font color="#E5E5E5">configuration of bootstrap</font>

460
00:17:24,859 --> 00:17:29,418
so you can just say<font color="#E5E5E5"> you can just</font><font color="#CCCCCC"> edit</font>

461
00:17:26,510 --> 00:17:30,650
<font color="#E5E5E5">data - HTML equals true which bootstrap</font>

462
00:17:29,419 --> 00:17:33,980
will turn into configuration

463
00:17:30,650 --> 00:17:35,690
property and then it will happily<font color="#E5E5E5"> assign</font>

464
00:17:33,980 --> 00:17:38,030
this to script<font color="#E5E5E5"> and it will use jQuery</font>

465
00:17:35,690 --> 00:17:41,420
which will create script notes for this

466
00:17:38,030 --> 00:17:43,460
bypasses CSP<font color="#E5E5E5"> straight dynamic</font><font color="#CCCCCC"> another</font>

467
00:17:41,420 --> 00:17:45,350
<font color="#E5E5E5">example is a bypass</font><font color="#CCCCCC"> for sanitizer in</font>

468
00:17:43,460 --> 00:17:48,170
jQuery Mobile<font color="#CCCCCC"> this is an interesting one</font>

469
00:17:45,350 --> 00:17:49,790
<font color="#E5E5E5">is an ID</font><font color="#CCCCCC"> attribute and all</font><font color="#E5E5E5"> the</font>

470
00:17:48,170 --> 00:17:52,580
sanitizers that we looked at<font color="#E5E5E5"> they</font>

471
00:17:49,790 --> 00:17:54,740
happily accept<font color="#E5E5E5"> ID attributes to say well</font>

472
00:17:52,580 --> 00:17:56,629
ID attribute what<font color="#E5E5E5"> can be bad about an ID</font>

473
00:17:54,740 --> 00:17:58,460
attribute<font color="#CCCCCC"> and you also</font><font color="#E5E5E5"> needed</font><font color="#CCCCCC"> to let</font><font color="#E5E5E5"> it</font>

474
00:17:56,630 --> 00:18:01,520
<font color="#CCCCCC">through the thing here</font><font color="#E5E5E5"> is the jQuery</font>

475
00:17:58,460 --> 00:18:03,440
Mobile<font color="#CCCCCC"> Printer</font><font color="#E5E5E5"> debugging instruction it</font>

476
00:18:01,520 --> 00:18:06,320
says something like<font color="#E5E5E5"> so it creates a new</font>

477
00:18:03,440 --> 00:18:08,240
element for<font color="#E5E5E5"> this for this</font><font color="#CCCCCC"> pop-up</font><font color="#E5E5E5"> that it</font>

478
00:18:06,320 --> 00:18:10,280
creates here and it<font color="#E5E5E5"> just has a debugging</font>

479
00:18:08,240 --> 00:18:13,970
instruction with an<font color="#E5E5E5"> HTML comment is</font><font color="#CCCCCC"> that</font>

480
00:18:10,280 --> 00:18:15,889
this is a placeholder<font color="#E5E5E5"> for ID</font><font color="#CCCCCC"> x</font><font color="#E5E5E5"> and it</font>

481
00:18:13,970 --> 00:18:17,930
puts it<font color="#E5E5E5"> into an HTML comment so you can</font>

482
00:18:15,890 --> 00:18:20,210
just break out<font color="#E5E5E5"> of the HTML comment add a</font>

483
00:18:17,930 --> 00:18:22,040
<font color="#E5E5E5">script tag and the ID attribute</font>

484
00:18:20,210 --> 00:18:26,840
magically becomes<font color="#E5E5E5"> the script execution</font>

485
00:18:22,040 --> 00:18:29,060
<font color="#E5E5E5">attribute another example is the closure</font>

486
00:18:26,840 --> 00:18:30,980
library<font color="#E5E5E5"> and this is an interesting</font>

487
00:18:29,060 --> 00:18:34,280
attack vector because it uses<font color="#E5E5E5"> Dom</font>

488
00:18:30,980 --> 00:18:36,140
clobbering so closure<font color="#E5E5E5"> like loads</font><font color="#CCCCCC"> other</font>

489
00:18:34,280 --> 00:18:38,480
<font color="#E5E5E5">JavaScript files and it</font><font color="#CCCCCC"> uses a base pass</font>

490
00:18:36,140 --> 00:18:40,040
to do that and the base class is an

491
00:18:38,480 --> 00:18:41,870
internal configuration property<font color="#E5E5E5"> that</font>

492
00:18:40,040 --> 00:18:44,330
isn't done<font color="#E5E5E5"> and actually you can clobber</font>

493
00:18:41,870 --> 00:18:46,550
the variable so what<font color="#E5E5E5"> you do is you just</font>

494
00:18:44,330 --> 00:18:49,610
<font color="#E5E5E5">inject an a tag because a</font><font color="#CCCCCC"> two string of</font>

495
00:18:46,550 --> 00:18:51,320
<font color="#E5E5E5">an</font><font color="#CCCCCC"> H</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> a tag results in the URL</font><font color="#E5E5E5"> and then</font>

496
00:18:49,610 --> 00:18:54,260
you put this as<font color="#E5E5E5"> the ID this overrides</font>

497
00:18:51,320 --> 00:18:56,830
the internal closure configuration

498
00:18:54,260 --> 00:18:59,900
<font color="#CCCCCC">properties</font><font color="#E5E5E5"> so closure will just use all</font>

499
00:18:56,830 --> 00:19:01,639
will load all the scripts<font color="#E5E5E5"> from this from</font>

500
00:18:59,900 --> 00:19:03,860
this<font color="#CCCCCC"> URL relative to the</font><font color="#E5E5E5"> zero and</font>

501
00:19:01,640 --> 00:19:06,410
interestingly<font color="#E5E5E5"> closure create script tags</font>

502
00:19:03,860 --> 00:19:09,020
<font color="#E5E5E5">and</font><font color="#CCCCCC"> appends into the Dom so this is</font>

503
00:19:06,410 --> 00:19:13,550
again a CSP bypass and also an old

504
00:19:09,020 --> 00:19:15,590
<font color="#E5E5E5">script bypass</font><font color="#CCCCCC"> here's</font><font color="#E5E5E5"> another example</font>

505
00:19:13,550 --> 00:19:17,540
<font color="#CCCCCC">bypassing</font><font color="#E5E5E5"> on more security with the</font>

506
00:19:15,590 --> 00:19:20,090
<font color="#E5E5E5">charoset</font><font color="#CCCCCC"> installed</font><font color="#E5E5E5"> in the dojo toolkit</font>

507
00:19:17,540 --> 00:19:22,580
<font color="#E5E5E5">so here you can just take an arbitrary</font>

508
00:19:20,090 --> 00:19:25,310
div tag and<font color="#E5E5E5"> you just put a data</font>

509
00:19:22,580 --> 00:19:27,860
attribute<font color="#E5E5E5"> and put some type into it to</font>

510
00:19:25,310 --> 00:19:29,149
make bootstrap process<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then you</font>

511
00:19:27,860 --> 00:19:31,250
see this<font color="#CCCCCC"> this attribute and this</font>

512
00:19:29,150 --> 00:19:34,670
attribute gets put into into an<font color="#E5E5E5"> eval I</font>

513
00:19:31,250 --> 00:19:35,930
think eval function call<font color="#E5E5E5"> so it so you</font>

514
00:19:34,670 --> 00:19:37,550
can<font color="#E5E5E5"> just break out</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> current</font>

515
00:19:35,930 --> 00:19:40,970
context in this<font color="#E5E5E5"> evals</font><font color="#CCCCCC"> and just put an</font>

516
00:19:37,550 --> 00:19:42,379
alert here and it<font color="#E5E5E5"> will execute and</font><font color="#CCCCCC"> mod</font>

517
00:19:40,970 --> 00:19:43,370
<font color="#CCCCCC">security will not be able to find this</font>

518
00:19:42,380 --> 00:19:45,260
<font color="#CCCCCC">because it</font>

519
00:19:43,370 --> 00:19:46,870
for script tags and event handlers and

520
00:19:45,260 --> 00:19:49,240
so on and it<font color="#E5E5E5"> will have no way to</font>

521
00:19:46,870 --> 00:19:51,739
identifying<font color="#E5E5E5"> this</font>

522
00:19:49,240 --> 00:19:53,840
another example is underscore template

523
00:19:51,740 --> 00:19:56,180
<font color="#E5E5E5">so for example underscore has</font><font color="#CCCCCC"> a magic</font>

524
00:19:53,840 --> 00:19:58,899
functionality<font color="#E5E5E5"> to execute scripts so</font>

525
00:19:56,180 --> 00:20:02,570
instead of writing<font color="#CCCCCC"> script</font><font color="#E5E5E5"> my script code</font>

526
00:19:58,900 --> 00:20:07,730
<font color="#E5E5E5">closing script</font><font color="#CCCCCC"> you just write smaller</font>

527
00:20:02,570 --> 00:20:09,649
than percent and script and it will evil

528
00:20:07,730 --> 00:20:11,110
it so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> CSP</font>

529
00:20:09,650 --> 00:20:16,730
<font color="#CCCCCC">unsavable</font>

530
00:20:11,110 --> 00:20:18,889
<font color="#E5E5E5">bypass okay so these were the simple</font>

531
00:20:16,730 --> 00:20:21,160
gadget<font color="#CCCCCC"> and now we have some more crazy</font>

532
00:20:18,890 --> 00:20:25,910
stuff<font color="#CCCCCC"> and I will hand over to crystal</font>

533
00:20:21,160 --> 00:20:28,670
<font color="#CCCCCC">toggle</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so yes the more</font><font color="#E5E5E5"> crazy stuff</font>

534
00:20:25,910 --> 00:20:30,559
<font color="#E5E5E5">some of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> gadgets</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> found</font><font color="#E5E5E5"> were</font>

535
00:20:28,670 --> 00:20:33,830
in a functionality<font color="#E5E5E5"> of a couple of</font>

536
00:20:30,559 --> 00:20:36,320
frameworks that<font color="#E5E5E5"> have the expression</font>

537
00:20:33,830 --> 00:20:38,178
process so the more complex<font color="#E5E5E5"> removes</font>

538
00:20:36,320 --> 00:20:40,790
essentially and those got it turned<font color="#E5E5E5"> out</font>

539
00:20:38,179 --> 00:20:43,670
to<font color="#E5E5E5"> be really powerful in bypassing</font>

540
00:20:40,790 --> 00:20:46,399
mitigations<font color="#CCCCCC"> so examples</font><font color="#E5E5E5"> of such</font>

541
00:20:43,670 --> 00:20:51,400
frameworks<font color="#E5E5E5"> aralia angular polymer</font>

542
00:20:46,400 --> 00:20:54,500
practice<font color="#E5E5E5"> and view all</font><font color="#CCCCCC"> of those use</font>

543
00:20:51,400 --> 00:20:57,559
expressions in the<font color="#CCCCCC"> dom there's a piece</font>

544
00:20:54,500 --> 00:21:01,130
of piece<font color="#CCCCCC"> of code that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> being evaluated</font>

545
00:20:57,559 --> 00:21:02,899
using a custom<font color="#E5E5E5"> framework specific parser</font>

546
00:21:01,130 --> 00:21:04,820
that is not based<font color="#E5E5E5"> on evil this is the</font>

547
00:21:02,900 --> 00:21:07,910
important part because<font color="#E5E5E5"> like for</font><font color="#CCCCCC"> example</font>

548
00:21:04,820 --> 00:21:09,710
the<font color="#E5E5E5"> Sebastian showed before</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> of the</font>

549
00:21:07,910 --> 00:21:12,470
<font color="#E5E5E5">expressions in the</font><font color="#CCCCCC"> unders</font><font color="#E5E5E5"> contemplating</font>

550
00:21:09,710 --> 00:21:14,750
<font color="#E5E5E5">the like that</font><font color="#CCCCCC"> percent tax let's say</font><font color="#E5E5E5"> and</font>

551
00:21:12,470 --> 00:21:16,160
those were simply<font color="#E5E5E5"> passed to evil this</font><font color="#CCCCCC"> is</font>

552
00:21:14,750 --> 00:21:19,100
not the ones<font color="#E5E5E5"> that we are talking</font><font color="#CCCCCC"> about</font>

553
00:21:16,160 --> 00:21:20,450
so those expressions in in those

554
00:21:19,100 --> 00:21:22,520
payments<font color="#E5E5E5"> are being compiled to</font>

555
00:21:20,450 --> 00:21:25,880
JavaScript using custom custom code

556
00:21:22,520 --> 00:21:27,770
custom passes<font color="#CCCCCC"> ASDs tokenizer and all</font>

557
00:21:25,880 --> 00:21:31,820
that

558
00:21:27,770 --> 00:21:33,710
however when those resulting expressions

559
00:21:31,820 --> 00:21:39,200
or resulting resultant code is being

560
00:21:33,710 --> 00:21:41,059
<font color="#E5E5E5">evaluated it does operate on in the</font>

561
00:21:39,200 --> 00:21:43,670
regular<font color="#E5E5E5"> JavaScript education environment</font>

562
00:21:41,059 --> 00:21:45,530
in in the<font color="#E5E5E5"> browsers so they have the</font>

563
00:21:43,670 --> 00:21:48,559
capabilities of<font color="#E5E5E5"> caching Dom objects we</font>

564
00:21:45,530 --> 00:21:51,230
have<font color="#E5E5E5"> the capabilities of reading or</font>

565
00:21:48,559 --> 00:21:55,970
writing attributes they also hook on

566
00:21:51,230 --> 00:21:56,669
native objects or native arrays<font color="#CCCCCC"> so there</font>

567
00:21:55,970 --> 00:21:59,220
is a possibility

568
00:21:56,669 --> 00:22:00,869
of interacting<font color="#CCCCCC"> with the actual Dom on</font>

569
00:21:59,220 --> 00:22:02,639
the page<font color="#E5E5E5"> and this is something that we</font>

570
00:22:00,869 --> 00:22:06,178
that we've actually wanted from the

571
00:22:02,639 --> 00:22:08,699
gadgets what we found out is like with

572
00:22:06,179 --> 00:22:11,850
substantive complex expression languages

573
00:22:08,700 --> 00:22:14,999
<font color="#CCCCCC">we can run arbitrary</font><font color="#E5E5E5"> J's code and make</font>

574
00:22:11,850 --> 00:22:18,748
it exercise mitigation<font color="#CCCCCC"> bypass</font><font color="#E5E5E5"> an obvious</font>

575
00:22:14,999 --> 00:22:23,480
<font color="#CCCCCC">example of this is the whole</font><font color="#E5E5E5"> family of</font>

576
00:22:18,749 --> 00:22:26,210
angularjs Santos bypasses<font color="#E5E5E5"> angularjs</font><font color="#CCCCCC"> all</font>

577
00:22:23,480 --> 00:22:29,220
<font color="#E5E5E5">aiming</font><font color="#CCCCCC"> behaved like that right</font><font color="#E5E5E5"> so</font>

578
00:22:26,210 --> 00:22:31,950
<font color="#E5E5E5">angularjs has a custom based expression</font>

579
00:22:29,220 --> 00:22:33,769
parser<font color="#E5E5E5"> and what most of the samples</font>

580
00:22:31,950 --> 00:22:37,409
bypass is for angularjs framework<font color="#E5E5E5"> showed</font>

581
00:22:33,769 --> 00:22:41,730
throughout last<font color="#CCCCCC"> years</font><font color="#E5E5E5"> I believe is that</font>

582
00:22:37,409 --> 00:22:43,710
<font color="#CCCCCC">you can escape</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> path or escape the</font>

583
00:22:41,730 --> 00:22:46,049
execution environment<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is beautiful</font>

584
00:22:43,710 --> 00:22:48,989
sandbox<font color="#E5E5E5"> it tries to</font><font color="#CCCCCC"> limit what you can</font>

585
00:22:46,049 --> 00:22:52,230
<font color="#E5E5E5">execute from within the expression</font>

586
00:22:48,989 --> 00:22:53,730
language<font color="#E5E5E5"> into well alerting essentially</font>

587
00:22:52,230 --> 00:22:56,759
<font color="#E5E5E5">writers as a proof of concept</font>

588
00:22:53,730 --> 00:23:00,779
so our research kind of builds upon<font color="#E5E5E5"> that</font>

589
00:22:56,759 --> 00:23:04,049
<font color="#E5E5E5">but in a slightly different context now</font>

590
00:23:00,779 --> 00:23:08,009
let's see an example so for example<font color="#CCCCCC"> this</font>

591
00:23:04,049 --> 00:23:09,869
<font color="#E5E5E5">irelia framework that this is an example</font>

592
00:23:08,009 --> 00:23:15,419
expression<font color="#E5E5E5"> language expression language</font>

593
00:23:09,869 --> 00:23:19,408
<font color="#E5E5E5">expression here</font><font color="#CCCCCC"> so within</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> beta cell</font>

594
00:23:15,419 --> 00:23:23,309
just output<font color="#CCCCCC"> the customer customers name</font>

595
00:23:19,409 --> 00:23:25,799
<font color="#E5E5E5">right so how does</font><font color="#CCCCCC"> irelia implement this</font>

596
00:23:23,309 --> 00:23:28,019
<font color="#E5E5E5">well it has a couple of gadgets as we as</font>

597
00:23:25,799 --> 00:23:32,009
we<font color="#CCCCCC"> call them</font><font color="#E5E5E5"> right so in the expression</font>

598
00:23:28,019 --> 00:23:34,679
parser first<font color="#E5E5E5"> when it encounters the dot</font>

599
00:23:32,009 --> 00:23:36,330
symbol<font color="#E5E5E5"> so this one from the customer</font><font color="#CCCCCC"> it</font>

600
00:23:34,679 --> 00:23:39,389
creates a new<font color="#CCCCCC"> object which is called</font>

601
00:23:36,330 --> 00:23:41,668
<font color="#CCCCCC">access member just so later</font><font color="#E5E5E5"> on it can</font>

602
00:23:39,389 --> 00:23:44,070
<font color="#E5E5E5">you know traverse this object graph and</font>

603
00:23:41,669 --> 00:23:47,960
execute those particular members and

604
00:23:44,070 --> 00:23:51,029
when this expression<font color="#E5E5E5"> is being evaluated</font>

605
00:23:47,960 --> 00:23:53,100
<font color="#E5E5E5">the access member evaluates property is</font>

606
00:23:51,029 --> 00:23:56,460
being called<font color="#E5E5E5"> and in this case it simply</font>

607
00:23:53,100 --> 00:23:59,009
<font color="#E5E5E5">returns</font><font color="#CCCCCC"> well some property of an object</font>

608
00:23:56,460 --> 00:24:01,350
so in this case there would be an object

609
00:23:59,009 --> 00:24:03,499
<font color="#E5E5E5">named customer representing a customer</font>

610
00:24:01,350 --> 00:24:05,730
and it<font color="#E5E5E5"> would have a name</font><font color="#CCCCCC"> property</font><font color="#E5E5E5"> and</font>

611
00:24:03,499 --> 00:24:08,549
evaluation<font color="#E5E5E5"> calling evaluate function</font>

612
00:24:05,730 --> 00:24:09,970
will just return<font color="#E5E5E5"> this</font><font color="#CCCCCC"> name the value of</font>

613
00:24:08,549 --> 00:24:13,299
the same property

614
00:24:09,970 --> 00:24:16,179
now they also have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> function called</font>

615
00:24:13,299 --> 00:24:19,629
gadgets in this particular framework<font color="#E5E5E5"> so</font>

616
00:24:16,179 --> 00:24:22,360
for<font color="#E5E5E5"> example you can you can call a say</font>

617
00:24:19,629 --> 00:24:24,240
say<font color="#E5E5E5"> hello function which is part of the</font>

618
00:24:22,360 --> 00:24:27,309
legitimate

619
00:24:24,240 --> 00:24:29,279
<font color="#E5E5E5">órale application code like this is not</font>

620
00:24:27,309 --> 00:24:31,539
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that we actually inject</font><font color="#E5E5E5"> and</font>

621
00:24:29,279 --> 00:24:32,679
<font color="#CCCCCC">the</font><font color="#E5E5E5"> function does something</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't</font>

622
00:24:31,539 --> 00:24:35,350
really matter here

623
00:24:32,679 --> 00:24:37,750
what matters is when already it tries<font color="#CCCCCC"> to</font>

624
00:24:35,350 --> 00:24:39,668
pass this it encounters like these<font color="#E5E5E5"> open</font>

625
00:24:37,750 --> 00:24:43,990
<font color="#E5E5E5">parenthesis</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then it creates</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> call</font>

626
00:24:39,669 --> 00:24:45,909
member object passing all like function

627
00:24:43,990 --> 00:24:47,620
name and<font color="#E5E5E5"> potential arguments being</font>

628
00:24:45,909 --> 00:24:48,070
extracted from here and so on and<font color="#CCCCCC"> so</font>

629
00:24:47,620 --> 00:24:50,799
forth

630
00:24:48,070 --> 00:24:52,689
later on when<font color="#E5E5E5"> this expression is to be</font>

631
00:24:50,799 --> 00:24:54,370
evaluated which usually<font color="#E5E5E5"> happens when</font>

632
00:24:52,690 --> 00:24:59,409
<font color="#E5E5E5">well the template is</font><font color="#CCCCCC"> being rendered for</font>

633
00:24:54,370 --> 00:25:02,529
example is the<font color="#CCCCCC"> function so</font><font color="#E5E5E5"> this is</font>

634
00:24:59,409 --> 00:25:04,480
supposed to<font color="#E5E5E5"> be like the thunk is</font>

635
00:25:02,529 --> 00:25:06,940
supposed to<font color="#E5E5E5"> be reference to the say</font>

636
00:25:04,480 --> 00:25:08,950
hello function here<font color="#E5E5E5"> again a piece of</font>

637
00:25:06,940 --> 00:25:10,659
legitimate JavaScript code part of the

638
00:25:08,950 --> 00:25:12,309
application<font color="#CCCCCC"> using</font><font color="#E5E5E5"> Oralia framework and</font>

639
00:25:10,659 --> 00:25:14,289
this country instantly being called

640
00:25:12,309 --> 00:25:17,289
function<font color="#CCCCCC"> dot applying</font><font color="#E5E5E5"> javascript is just</font>

641
00:25:14,289 --> 00:25:19,419
calling the function<font color="#CCCCCC"> bounce to a given</font>

642
00:25:17,289 --> 00:25:24,750
<font color="#E5E5E5">object and with certain arguments being</font>

643
00:25:19,419 --> 00:25:27,039
passed so as you can probably<font color="#E5E5E5"> see those</font>

644
00:25:24,750 --> 00:25:30,429
expressions<font color="#CCCCCC"> are</font><font color="#E5E5E5"> though those gadgets</font>

645
00:25:27,039 --> 00:25:33,850
<font color="#E5E5E5">those snippets of code are pretty benign</font>

646
00:25:30,429 --> 00:25:35,669
<font color="#E5E5E5">on on their own like they only implement</font>

647
00:25:33,850 --> 00:25:38,860
the functionality<font color="#E5E5E5"> of the framework</font>

648
00:25:35,669 --> 00:25:40,389
<font color="#E5E5E5">however we can still</font><font color="#CCCCCC"> turn them into R</font>

649
00:25:38,860 --> 00:25:47,590
which<font color="#E5E5E5"> I called education how do we do</font>

650
00:25:40,389 --> 00:25:49,719
<font color="#E5E5E5">that usually well usually when we start</font>

651
00:25:47,590 --> 00:25:51,939
the expression so expressions are

652
00:25:49,720 --> 00:25:55,330
evaluated in<font color="#E5E5E5"> certain</font><font color="#CCCCCC"> contexts the</font>

653
00:25:51,940 --> 00:25:57,759
context of them is some kind of element

654
00:25:55,330 --> 00:26:00,879
<font color="#E5E5E5">in the Dom or element in a template</font>

655
00:25:57,759 --> 00:26:03,909
<font color="#CCCCCC">within them and we can traverse that</font>

656
00:26:00,879 --> 00:26:05,320
using the property accessors<font color="#CCCCCC"> to from</font>

657
00:26:03,909 --> 00:26:07,720
from<font color="#CCCCCC"> a</font><font color="#E5E5E5"> node</font><font color="#CCCCCC"> to window you will</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> an</font>

658
00:26:05,320 --> 00:26:09,189
example<font color="#CCCCCC"> in a second</font><font color="#E5E5E5"> and then once we</font>

659
00:26:07,720 --> 00:26:11,320
have the<font color="#CCCCCC"> reference to the window we can</font>

660
00:26:09,190 --> 00:26:13,179
again abuse this expression language<font color="#E5E5E5"> in</font>

661
00:26:11,320 --> 00:26:14,799
<font color="#E5E5E5">order to get the reference to the alert</font>

662
00:26:13,179 --> 00:26:17,950
function of the window<font color="#E5E5E5"> as a proof of</font>

663
00:26:14,799 --> 00:26:20,200
<font color="#E5E5E5">concept right</font><font color="#CCCCCC"> and then we</font><font color="#E5E5E5"> can abuse the</font>

664
00:26:17,950 --> 00:26:23,770
expression language<font color="#CCCCCC"> the</font><font color="#E5E5E5"> the function</font>

665
00:26:20,200 --> 00:26:26,290
call<font color="#CCCCCC"> one two well essentially</font><font color="#E5E5E5"> as</font>

666
00:26:23,770 --> 00:26:29,010
<font color="#CCCCCC">keep the solid function</font><font color="#E5E5E5"> and this is how</font>

667
00:26:26,290 --> 00:26:31,120
it looks<font color="#E5E5E5"> like for irelia so we have</font>

668
00:26:29,010 --> 00:26:33,910
<font color="#E5E5E5">restored</font><font color="#CCCCCC"> the reference to the current</font>

669
00:26:31,120 --> 00:26:37,060
node which is<font color="#CCCCCC"> versus</font><font color="#E5E5E5"> the ref attribute</font>

670
00:26:33,910 --> 00:26:39,670
simply and then we execute<font color="#E5E5E5"> this</font>

671
00:26:37,060 --> 00:26:43,300
particular<font color="#E5E5E5"> expression right so this will</font>

672
00:26:39,670 --> 00:26:45,850
evaluate<font color="#E5E5E5"> to this element then we</font><font color="#CCCCCC"> check</font>

673
00:26:43,300 --> 00:26:48,790
<font color="#E5E5E5">the owner document which will return the</font>

674
00:26:45,850 --> 00:26:50,740
document element or<font color="#E5E5E5"> the document object</font>

675
00:26:48,790 --> 00:26:52,060
then we<font color="#CCCCCC"> check</font><font color="#E5E5E5"> the default view which is</font>

676
00:26:50,740 --> 00:26:55,210
<font color="#CCCCCC">reference to</font><font color="#E5E5E5"> the window then we just</font>

677
00:26:52,060 --> 00:26:57,850
call the<font color="#CCCCCC"> alert assumption why is this</font>

678
00:26:55,210 --> 00:27:00,790
one interesting<font color="#CCCCCC"> well because we</font>

679
00:26:57,850 --> 00:27:06,760
essentially<font color="#CCCCCC"> dislike</font><font color="#E5E5E5"> a code reuse attack</font>

680
00:27:00,790 --> 00:27:08,620
so<font color="#E5E5E5"> we never actually created a new</font>

681
00:27:06,760 --> 00:27:13,180
script element we never actually created

682
00:27:08,620 --> 00:27:15,639
something that<font color="#E5E5E5"> was</font><font color="#CCCCCC"> not there before in</font>

683
00:27:13,180 --> 00:27:18,130
<font color="#CCCCCC">the Dom or in the execution environment</font>

684
00:27:15,640 --> 00:27:20,800
<font color="#E5E5E5">we reuse the functions that were always</font>

685
00:27:18,130 --> 00:27:24,100
available and this successfully bypasses

686
00:27:20,800 --> 00:27:27,960
all<font color="#CCCCCC"> mitigation</font><font color="#E5E5E5"> that we tested even the</font>

687
00:27:24,100 --> 00:27:30,550
ones<font color="#E5E5E5"> that we found</font><font color="#CCCCCC"> most strict or most</font>

688
00:27:27,960 --> 00:27:33,670
resistance to<font color="#E5E5E5"> to get</font><font color="#CCCCCC"> it so whitelist</font><font color="#E5E5E5"> and</font>

689
00:27:30,550 --> 00:27:35,740
<font color="#CCCCCC">non-state csps and there's</font><font color="#E5E5E5"> a couple of</font>

690
00:27:33,670 --> 00:27:37,780
examples<font color="#CCCCCC"> like that some of them are like</font>

691
00:27:35,740 --> 00:27:40,180
Sebastian<font color="#E5E5E5"> said more crazy because you</font>

692
00:27:37,780 --> 00:27:41,860
need to trigger some tricks in<font color="#E5E5E5"> those</font>

693
00:27:40,180 --> 00:27:44,770
frameworks<font color="#E5E5E5"> but you can still do</font><font color="#CCCCCC"> that</font>

694
00:27:41,860 --> 00:27:48,879
<font color="#E5E5E5">like here I override some private</font>

695
00:27:44,770 --> 00:27:52,060
<font color="#E5E5E5">property</font><font color="#CCCCCC"> of the expression parser in in</font>

696
00:27:48,880 --> 00:27:53,950
polymer and assign it<font color="#CCCCCC"> well the view</font><font color="#E5E5E5"> the</font>

697
00:27:52,060 --> 00:27:56,230
window object<font color="#E5E5E5"> essentially right and then</font>

698
00:27:53,950 --> 00:27:58,210
I call<font color="#E5E5E5"> the alert function which is</font><font color="#CCCCCC"> being</font>

699
00:27:56,230 --> 00:28:02,320
evaluated against this route data house

700
00:27:58,210 --> 00:28:04,330
which now is the window<font color="#E5E5E5"> so yes we just</font>

701
00:28:02,320 --> 00:28:06,939
<font color="#CCCCCC">call alert here or for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> in</font>

702
00:28:04,330 --> 00:28:09,280
angular<font color="#CCCCCC"> well this one</font><font color="#E5E5E5"> is kind of popular</font>

703
00:28:06,940 --> 00:28:12,160
<font color="#E5E5E5">the angular JS bypasses are putting on</font>

704
00:28:09,280 --> 00:28:14,889
so again<font color="#E5E5E5"> we just take the event object</font>

705
00:28:12,160 --> 00:28:17,860
and then get the reference to to the

706
00:28:14,890 --> 00:28:19,660
window<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> just call the alert on</font>

707
00:28:17,860 --> 00:28:23,290
this window<font color="#E5E5E5"> and what is important here</font>

708
00:28:19,660 --> 00:28:25,290
like angular makes it invisible sort of

709
00:28:23,290 --> 00:28:28,750
to the mitigations because it does

710
00:28:25,290 --> 00:28:33,580
repass the whole thing and executed on

711
00:28:28,750 --> 00:28:35,440
our behalf let's say and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can again</font>

712
00:28:33,580 --> 00:28:36,730
<font color="#E5E5E5">change those gadgets into making</font>

713
00:28:35,440 --> 00:28:39,230
<font color="#E5E5E5">something</font>

714
00:28:36,730 --> 00:28:41,150
way more<font color="#CCCCCC"> powerful or to antiquity</font>

715
00:28:39,230 --> 00:28:43,540
arbitrary scripts because alert is too

716
00:28:41,150 --> 00:28:47,210
simple<font color="#E5E5E5"> right so here for example I</font>

717
00:28:43,540 --> 00:28:49,730
overwrite the factory arguments the

718
00:28:47,210 --> 00:28:52,640
<font color="#E5E5E5">first factory argument with a string</font>

719
00:28:49,730 --> 00:28:55,760
script<font color="#E5E5E5"> so I try to convince the factory</font>

720
00:28:52,640 --> 00:28:57,230
function<font color="#E5E5E5"> being called the next</font><font color="#CCCCCC"> time to</font>

721
00:28:55,760 --> 00:28:59,390
<font color="#E5E5E5">create a script element instead of</font>

722
00:28:57,230 --> 00:29:01,720
<font color="#E5E5E5">whatever it was supposed to create and</font>

723
00:28:59,390 --> 00:29:04,520
then<font color="#E5E5E5"> I just call this factory function</font>

724
00:29:01,720 --> 00:29:06,290
<font color="#E5E5E5">and assign the result so a new script</font>

725
00:29:04,520 --> 00:29:10,639
element to the scripture operty here<font color="#CCCCCC"> of</font>

726
00:29:06,290 --> 00:29:13,100
this particular div element then I kind

727
00:29:10,640 --> 00:29:16,130
of Traverse here and set the source

728
00:29:13,100 --> 00:29:18,260
element of this script to data<font color="#E5E5E5"> alert one</font>

729
00:29:16,130 --> 00:29:21,770
so this<font color="#E5E5E5"> is a data URL that will alert</font>

730
00:29:18,260 --> 00:29:25,040
when loaded as a script then I do<font color="#E5E5E5"> some</font>

731
00:29:21,770 --> 00:29:29,059
reference and essentially<font color="#E5E5E5"> set up me</font>

732
00:29:25,040 --> 00:29:32,030
reference to this<font color="#E5E5E5"> particular div then I</font>

733
00:29:29,059 --> 00:29:34,190
call the insert function or sorry I set

734
00:29:32,030 --> 00:29:36,920
the insert property to the reference of

735
00:29:34,190 --> 00:29:39,800
the<font color="#E5E5E5"> appendchild function and then I call</font>

736
00:29:36,920 --> 00:29:42,950
the insert function because I needed

737
00:29:39,800 --> 00:29:44,629
<font color="#E5E5E5">that trick for example to overcome the</font>

738
00:29:42,950 --> 00:29:48,280
<font color="#CCCCCC">limitations of the expression language</font>

739
00:29:44,630 --> 00:29:50,809
here<font color="#E5E5E5"> because I can only call functions</font>

740
00:29:48,280 --> 00:29:52,490
function by literals I cannot<font color="#E5E5E5"> like do</font>

741
00:29:50,809 --> 00:29:54,800
the dots<font color="#CCCCCC"> too</font><font color="#E5E5E5"> to resolve a given function</font>

742
00:29:52,490 --> 00:29:57,010
<font color="#E5E5E5">right so I call the offensive function</font>

743
00:29:54,800 --> 00:29:59,840
on the script element which will

744
00:29:57,010 --> 00:30:02,300
basically create<font color="#E5E5E5"> a new new element by</font>

745
00:29:59,840 --> 00:30:06,290
passing for example<font color="#CCCCCC"> the strict dynamic</font>

746
00:30:02,300 --> 00:30:09,590
CSP<font color="#CCCCCC"> what we found out</font><font color="#E5E5E5"> is we can also</font><font color="#CCCCCC"> see</font>

747
00:30:06,290 --> 00:30:15,860
nonces which is an interesting attack

748
00:30:09,590 --> 00:30:18,760
because<font color="#CCCCCC"> kicking</font><font color="#E5E5E5"> nonces was a target of a</font>

749
00:30:15,860 --> 00:30:22,490
very<font color="#CCCCCC"> interesting research</font><font color="#E5E5E5"> late last year</font>

750
00:30:18,760 --> 00:30:24,559
in which<font color="#CCCCCC"> Sebastien and</font><font color="#E5E5E5"> Eduardo found a</font>

751
00:30:22,490 --> 00:30:28,130
couple<font color="#E5E5E5"> of ways of seeing the</font><font color="#CCCCCC"> dancers</font>

752
00:30:24,559 --> 00:30:30,290
using<font color="#E5E5E5"> filling</font><font color="#CCCCCC"> it announces from CSP</font>

753
00:30:28,130 --> 00:30:33,710
<font color="#E5E5E5">policy so in the Dom that</font><font color="#CCCCCC"> were supposed</font>

754
00:30:30,290 --> 00:30:36,770
to<font color="#E5E5E5"> prevent script execution of using</font>

755
00:30:33,710 --> 00:30:38,300
browser quirks<font color="#E5E5E5"> and those are slowly</font>

756
00:30:36,770 --> 00:30:43,250
being addressed<font color="#E5E5E5"> by the browsers but this</font>

757
00:30:38,300 --> 00:30:46,129
is a way<font color="#CCCCCC"> of stealing</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> nonce</font><font color="#E5E5E5"> by just</font>

758
00:30:43,250 --> 00:30:47,600
getting<font color="#E5E5E5"> the property of a script of a</font>

759
00:30:46,130 --> 00:30:49,920
legitimate<font color="#E5E5E5"> script</font><font color="#CCCCCC"> from the application</font>

760
00:30:47,600 --> 00:30:54,540
<font color="#E5E5E5">and then just creating a new script with</font>

761
00:30:49,920 --> 00:30:58,410
<font color="#CCCCCC">is nones correct the</font><font color="#E5E5E5"> nuns value in order</font>

762
00:30:54,540 --> 00:30:59,879
to bypass<font color="#CCCCCC"> genomespace ESB and this is a</font>

763
00:30:58,410 --> 00:31:05,400
functionality<font color="#E5E5E5"> of</font><font color="#CCCCCC"> attractive framework</font>

764
00:30:59,880 --> 00:31:07,440
for example so there are we<font color="#CCCCCC"> have</font>

765
00:31:05,400 --> 00:31:09,420
identified ways of bypassing<font color="#E5E5E5"> various</font>

766
00:31:07,440 --> 00:31:11,460
kinds of<font color="#CCCCCC"> litigations using the script</font>

767
00:31:09,420 --> 00:31:13,590
<font color="#E5E5E5">gardens in chaining them and we have</font>

768
00:31:11,460 --> 00:31:17,400
some tips<font color="#E5E5E5"> for your how to achieve that</font>

769
00:31:13,590 --> 00:31:19,590
<font color="#E5E5E5">right so if you want to use</font><font color="#CCCCCC"> gadgets to</font>

770
00:31:17,400 --> 00:31:21,930
bypass<font color="#CCCCCC"> access</font><font color="#E5E5E5"> figures or web application</font>

771
00:31:19,590 --> 00:31:23,780
firewalls<font color="#CCCCCC"> well the obvious</font><font color="#E5E5E5"> trick is just</font>

772
00:31:21,930 --> 00:31:25,950
<font color="#CCCCCC">include the payloads like even the</font>

773
00:31:23,780 --> 00:31:28,200
expression languages give you various

774
00:31:25,950 --> 00:31:30,930
ways<font color="#E5E5E5"> of representing the very same</font>

775
00:31:28,200 --> 00:31:32,910
expressions in different ways<font color="#CCCCCC"> you can</font>

776
00:31:30,930 --> 00:31:35,340
<font color="#E5E5E5">also confuse the password parser or a</font>

777
00:31:32,910 --> 00:31:37,080
trick that<font color="#CCCCCC"> we often used was to</font>

778
00:31:35,340 --> 00:31:38,790
<font color="#E5E5E5">externalize the</font><font color="#CCCCCC"> payload so the actual</font>

779
00:31:37,080 --> 00:31:40,740
alert or whatever we wanted<font color="#E5E5E5"> to execute</font>

780
00:31:38,790 --> 00:31:44,480
was part<font color="#E5E5E5"> of the window main reference</font>

781
00:31:40,740 --> 00:31:48,840
and we<font color="#E5E5E5"> simply just sort of bound to it</font>

782
00:31:44,480 --> 00:31:54,920
<font color="#E5E5E5">this is by the way a regression in no</font>

783
00:31:48,840 --> 00:31:54,919
scripts so client site sanitizes<font color="#CCCCCC"> that's</font>

784
00:31:55,310 --> 00:32:00,330
relatively<font color="#CCCCCC"> easy to bypass</font><font color="#E5E5E5"> you just need</font>

785
00:31:57,840 --> 00:32:02,220
to work with a framework that uses<font color="#E5E5E5"> say</font>

786
00:32:00,330 --> 00:32:05,610
benign attributes<font color="#E5E5E5"> like data attributes</font>

787
00:32:02,220 --> 00:32:07,380
or some like<font color="#CCCCCC"> list of element types like</font>

788
00:32:05,610 --> 00:32:08,790
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> weakness that</font><font color="#E5E5E5"> we found in</font>

789
00:32:07,380 --> 00:32:10,860
the<font color="#E5E5E5"> default setting of Dom purify</font><font color="#CCCCCC"> for</font>

790
00:32:08,790 --> 00:32:12,570
example because it lets through the data

791
00:32:10,860 --> 00:32:15,689
tubules and<font color="#CCCCCC"> a lot of frameworks use data</font>

792
00:32:12,570 --> 00:32:18,120
attributes<font color="#CCCCCC"> and turn them into code is</font>

793
00:32:15,690 --> 00:32:20,700
effectively<font color="#E5E5E5"> if you have a</font><font color="#CCCCCC"> isodyne</font>

794
00:32:18,120 --> 00:32:22,889
<font color="#CCCCCC">sugreeva</font><font color="#E5E5E5"> just try to find a gadget chain</font>

795
00:32:20,700 --> 00:32:25,770
that takes something from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Dom</font><font color="#E5E5E5"> and</font>

796
00:32:22,890 --> 00:32:28,860
passes<font color="#E5E5E5"> it to eval sometimes through say</font>

797
00:32:25,770 --> 00:32:31,080
<font color="#CCCCCC">the jQuery</font><font color="#E5E5E5"> function or</font><font color="#CCCCCC"> disk where HTML</font>

798
00:32:28,860 --> 00:32:35,159
<font color="#CCCCCC">function for example for</font><font color="#E5E5E5"> this script</font>

799
00:32:31,080 --> 00:32:37,290
dynamic you have<font color="#CCCCCC"> a very similar target</font>

800
00:32:35,160 --> 00:32:39,690
<font color="#CCCCCC">or very</font><font color="#E5E5E5"> similar approach you just</font>

801
00:32:37,290 --> 00:32:41,760
<font color="#E5E5E5">instead of eval you want to create the</font>

802
00:32:39,690 --> 00:32:46,020
element<font color="#E5E5E5"> script and again jQuery lets you</font>

803
00:32:41,760 --> 00:32:48,060
do<font color="#E5E5E5"> that those various tricks of making</font>

804
00:32:46,020 --> 00:32:50,700
<font color="#CCCCCC">jQuery HTML function create script</font>

805
00:32:48,060 --> 00:32:54,899
elements dynamically<font color="#E5E5E5"> and for why this</font>

806
00:32:50,700 --> 00:32:57,030
<font color="#CCCCCC">non-space CSPs just try to look for</font>

807
00:32:54,900 --> 00:32:59,250
working<font color="#CCCCCC"> gadget changing famous with</font>

808
00:32:57,030 --> 00:33:01,680
custom expression<font color="#E5E5E5"> parser this is the way</font>

809
00:32:59,250 --> 00:33:02,830
that we that<font color="#CCCCCC"> we found is the most</font>

810
00:33:01,680 --> 00:33:05,330
<font color="#CCCCCC">successful one</font>

811
00:33:02,830 --> 00:33:07,689
<font color="#E5E5E5">all right and now will I will head back</font>

812
00:33:05,330 --> 00:33:10,550
<font color="#E5E5E5">to Sebastian for the overall results or</font>

813
00:33:07,690 --> 00:33:12,470
not<font color="#CCCCCC"> okay I will do this section</font><font color="#E5E5E5"> again so</font>

814
00:33:10,550 --> 00:33:14,720
other I'll result<font color="#E5E5E5"> how</font><font color="#CCCCCC"> come on Rd has it</font>

815
00:33:12,470 --> 00:33:16,880
<font color="#CCCCCC">changed this</font><font color="#E5E5E5"> is the question</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

816
00:33:14,720 --> 00:33:18,710
asked<font color="#E5E5E5"> and how effective are they in</font>

817
00:33:16,880 --> 00:33:24,380
<font color="#E5E5E5">bypassing</font><font color="#CCCCCC"> excess mitigations</font>

818
00:33:18,710 --> 00:33:26,630
well we found bypass<font color="#E5E5E5"> change for every</font>

819
00:33:24,380 --> 00:33:31,670
mitigation that<font color="#E5E5E5"> we tested with varying</font>

820
00:33:26,630 --> 00:33:33,650
success<font color="#CCCCCC"> rates right what we find</font><font color="#E5E5E5"> found</font>

821
00:33:31,670 --> 00:33:37,940
interesting is that<font color="#E5E5E5"> Whiteley's based</font>

822
00:33:33,650 --> 00:33:41,960
<font color="#E5E5E5">DSPs and</font><font color="#CCCCCC"> non-state csps we're the</font>

823
00:33:37,940 --> 00:33:43,970
strongest<font color="#CCCCCC"> to to bypass there's some</font>

824
00:33:41,960 --> 00:33:47,450
caveats<font color="#CCCCCC"> to it that we speak about in a</font>

825
00:33:43,970 --> 00:33:50,390
moment<font color="#E5E5E5"> but surprisingly both</font><font color="#CCCCCC"> unsafe</font><font color="#E5E5E5"> evil</font>

826
00:33:47,450 --> 00:33:55,940
and strict dynamic versions of the CSP

827
00:33:50,390 --> 00:34:00,560
policies of the CSP policies<font color="#E5E5E5"> we're</font>

828
00:33:55,940 --> 00:34:04,160
really by possible via gadgets in a lot

829
00:34:00,560 --> 00:34:05,690
<font color="#E5E5E5">of in a lot of cases that's solely</font>

830
00:34:04,160 --> 00:34:07,870
because they<font color="#E5E5E5"> relaxed the content</font>

831
00:34:05,690 --> 00:34:13,940
security policy<font color="#E5E5E5"> into being more</font>

832
00:34:07,870 --> 00:34:15,859
approachable<font color="#CCCCCC"> or more easily</font><font color="#E5E5E5"> apply up so</font>

833
00:34:13,940 --> 00:34:17,330
that you<font color="#E5E5E5"> can install the CSP more easily</font>

834
00:34:15,860 --> 00:34:19,399
on<font color="#CCCCCC"> your website</font><font color="#E5E5E5"> essentially and</font>

835
00:34:17,330 --> 00:34:22,580
especially<font color="#E5E5E5"> when combined this resulted</font>

836
00:34:19,399 --> 00:34:24,380
<font color="#CCCCCC">in a lot of bypasses using gadgets</font><font color="#E5E5E5"> what</font>

837
00:34:22,580 --> 00:34:27,668
we also found is some of the<font color="#CCCCCC"> resulting</font>

838
00:34:24,380 --> 00:34:31,970
are kind of artificial<font color="#E5E5E5"> in a way so</font>

839
00:34:27,668 --> 00:34:36,440
mitigations that over do<font color="#CCCCCC"> their job</font><font color="#E5E5E5"> so</font>

840
00:34:31,969 --> 00:34:39,678
our false negative<font color="#CCCCCC"> drone so</font><font color="#E5E5E5"> will block</font>

841
00:34:36,440 --> 00:34:42,350
even<font color="#E5E5E5"> if there is no</font><font color="#CCCCCC"> XSS payload inside</font>

842
00:34:39,679 --> 00:34:43,790
<font color="#E5E5E5">the request they do perform better right</font>

843
00:34:42,350 --> 00:34:45,799
<font color="#E5E5E5">but this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the obvious cases like</font>

844
00:34:43,790 --> 00:34:47,060
<font color="#CCCCCC">blocking</font><font color="#E5E5E5"> everything yes</font><font color="#CCCCCC"> we'll stop all</font>

845
00:34:45,800 --> 00:34:48,860
the vulnerabilities<font color="#E5E5E5"> but that's probably</font>

846
00:34:47,060 --> 00:34:51,770
<font color="#E5E5E5">not the correct approach</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is for</font>

847
00:34:48,860 --> 00:34:53,600
<font color="#CCCCCC">example</font><font color="#E5E5E5"> the case for the edge versus</font>

848
00:34:51,770 --> 00:34:57,560
<font color="#CCCCCC">chrome XSS</font><font color="#E5E5E5"> filter this one tends to be</font>

849
00:34:53,600 --> 00:35:00,220
<font color="#E5E5E5">more tends to be more permissive so it</font>

850
00:34:57,560 --> 00:35:03,560
allows<font color="#E5E5E5"> more gadgets</font><font color="#CCCCCC"> in the end Y edge is</font>

851
00:35:00,220 --> 00:35:05,600
<font color="#E5E5E5">very panicky it blocks a lot of things</font>

852
00:35:03,560 --> 00:35:09,640
that would<font color="#E5E5E5"> not be exercised in the first</font>

853
00:35:05,600 --> 00:35:14,799
place<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the whole</font><font color="#E5E5E5"> table</font>

854
00:35:09,640 --> 00:35:16,460
<font color="#E5E5E5">so you can see which framework and which</font>

855
00:35:14,800 --> 00:35:21,349
mitigation we were<font color="#CCCCCC"> F</font>

856
00:35:16,460 --> 00:35:26,869
to be able<font color="#CCCCCC"> to bypass and which were sort</font>

857
00:35:21,349 --> 00:35:29,660
<font color="#CCCCCC">of immune to that</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> that problem</font><font color="#E5E5E5"> you</font>

858
00:35:26,869 --> 00:35:32,030
can take<font color="#CCCCCC"> screen choose</font><font color="#E5E5E5"> of that or take</font>

859
00:35:29,660 --> 00:35:34,910
<font color="#E5E5E5">photos but we are also open sourcing</font>

860
00:35:32,030 --> 00:35:38,030
this<font color="#CCCCCC"> whole</font><font color="#E5E5E5"> research so there's no much</font>

861
00:35:34,910 --> 00:35:41,750
pointing into talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> table</font>

862
00:35:38,030 --> 00:35:44,119
model<font color="#CCCCCC"> the</font><font color="#E5E5E5"> boxes here we just made the</font>

863
00:35:41,750 --> 00:35:45,260
repository on github<font color="#E5E5E5"> with all the</font>

864
00:35:44,119 --> 00:35:48,050
working change

865
00:35:45,260 --> 00:35:52,099
well not for no script<font color="#CCCCCC"> because no script</font>

866
00:35:48,050 --> 00:35:55,580
<font color="#E5E5E5">just updated all of them so yep</font><font color="#CCCCCC"> we</font>

867
00:35:52,099 --> 00:35:58,700
<font color="#E5E5E5">bypass all over half of the combinations</font>

868
00:35:55,580 --> 00:36:02,140
essentially<font color="#E5E5E5"> surprisingly we did not find</font>

869
00:35:58,700 --> 00:36:05,029
any<font color="#E5E5E5"> working change in</font><font color="#CCCCCC"> react so kudos and</font>

870
00:36:02,140 --> 00:36:09,290
<font color="#E5E5E5">ember.js was also pretty</font><font color="#CCCCCC"> good because</font>

871
00:36:05,030 --> 00:36:11,060
<font color="#E5E5E5">amber</font><font color="#CCCCCC"> J is</font><font color="#E5E5E5"> in the default mode or in the</font>

872
00:36:09,290 --> 00:36:13,880
production<font color="#E5E5E5"> mode pre</font><font color="#CCCCCC"> comprise</font><font color="#E5E5E5"> the</font>

873
00:36:11,060 --> 00:36:17,180
template so you have no way of actually

874
00:36:13,880 --> 00:36:19,700
<font color="#E5E5E5">supplying arbitrary expressions in the</font>

875
00:36:17,180 --> 00:36:23,598
Dom<font color="#E5E5E5"> because amber would simply know them</font>

876
00:36:19,700 --> 00:36:27,230
<font color="#E5E5E5">and what is surprising is accessing</font>

877
00:36:23,599 --> 00:36:29,930
irelia angular polymer can bypass all

878
00:36:27,230 --> 00:36:32,839
<font color="#E5E5E5">the mitigations using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> expression</font>

879
00:36:29,930 --> 00:36:36,589
parser tricks now there are some caveats

880
00:36:32,839 --> 00:36:39,259
to that right so this research alone

881
00:36:36,589 --> 00:36:40,730
cannot<font color="#E5E5E5"> be or should not</font><font color="#CCCCCC"> be used</font><font color="#E5E5E5"> to</font>

882
00:36:39,260 --> 00:36:43,520
compare<font color="#E5E5E5"> the mitigations between</font>

883
00:36:40,730 --> 00:36:45,440
themselves<font color="#E5E5E5"> solely because we only</font>

884
00:36:43,520 --> 00:36:46,900
<font color="#E5E5E5">evaluated one aspect which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> by</font>

885
00:36:45,440 --> 00:36:49,730
possibility via script cutters

886
00:36:46,900 --> 00:36:52,910
mitigations on their own have way more

887
00:36:49,730 --> 00:36:55,490
properties<font color="#E5E5E5"> and the decision of whether</font>

888
00:36:52,910 --> 00:36:59,210
to<font color="#E5E5E5"> implement a mitigation or use it</font>

889
00:36:55,490 --> 00:37:00,830
should also take those into

890
00:36:59,210 --> 00:37:03,980
consideration like the deployment<font color="#E5E5E5"> cost</font>

891
00:37:00,830 --> 00:37:07,220
performance<font color="#CCCCCC"> or update ability or in the</font>

892
00:37:03,980 --> 00:37:10,280
end<font color="#E5E5E5"> Vanaras regular plain ten-years-old</font>

893
00:37:07,220 --> 00:37:14,480
exercises<font color="#E5E5E5"> also obviously you should not</font>

894
00:37:10,280 --> 00:37:17,839
use the frame of the first let's<font color="#E5E5E5"> cards</font>

895
00:37:14,480 --> 00:37:19,640
or no gadgets<font color="#E5E5E5"> unconditionally right</font>

896
00:37:17,839 --> 00:37:23,779
<font color="#E5E5E5">there's other considerations to take</font>

897
00:37:19,640 --> 00:37:25,819
into account<font color="#E5E5E5"> there are some problematic</font>

898
00:37:23,780 --> 00:37:28,130
<font color="#E5E5E5">things with with us using the default</font>

899
00:37:25,820 --> 00:37:29,440
<font color="#CCCCCC">settings which came out</font><font color="#E5E5E5"> with for</font><font color="#CCCCCC"> example</font>

900
00:37:28,130 --> 00:37:31,960
when discussing the stream

901
00:37:29,440 --> 00:37:33,760
<font color="#CCCCCC">marry hydrate</font><font color="#E5E5E5"> who did the jump you fi</font>

902
00:37:31,960 --> 00:37:36,490
and there is a setting<font color="#E5E5E5"> for example for</font>

903
00:37:33,760 --> 00:37:39,370
dump<font color="#CCCCCC"> unified</font><font color="#E5E5E5"> that will stop some</font><font color="#CCCCCC"> of the</font>

904
00:37:36,490 --> 00:37:42,009
gadgets<font color="#CCCCCC"> it's called save</font><font color="#E5E5E5"> for template so</font>

905
00:37:39,370 --> 00:37:43,390
go go look<font color="#E5E5E5"> into it</font><font color="#CCCCCC"> we decided to just</font>

906
00:37:42,010 --> 00:37:45,010
<font color="#CCCCCC">use the default</font><font color="#E5E5E5"> setting</font><font color="#CCCCCC"> for every</font>

907
00:37:43,390 --> 00:37:47,440
mitigation to have some sort<font color="#CCCCCC"> of</font>

908
00:37:45,010 --> 00:37:50,700
comparable<font color="#E5E5E5"> results and the user</font><font color="#CCCCCC"> lung</font>

909
00:37:47,440 --> 00:37:52,930
code was necessary in<font color="#CCCCCC"> some instances</font><font color="#E5E5E5"> but</font>

910
00:37:50,700 --> 00:37:54,460
the code that we used actually to

911
00:37:52,930 --> 00:37:56,560
<font color="#E5E5E5">trigger the gadgets we think it</font>

912
00:37:54,460 --> 00:37:58,480
reasonably existing in a<font color="#E5E5E5"> real world</font>

913
00:37:56,560 --> 00:38:00,970
application so like for<font color="#CCCCCC"> example we</font><font color="#E5E5E5"> use</font>

914
00:37:58,480 --> 00:38:04,540
like a very<font color="#E5E5E5"> basic to</font><font color="#CCCCCC"> very function in</font>

915
00:38:00,970 --> 00:38:07,060
one of the instances<font color="#E5E5E5"> and now I will go</font>

916
00:38:04,540 --> 00:38:08,670
<font color="#CCCCCC">back to this question</font><font color="#E5E5E5"> to give you some</font>

917
00:38:07,060 --> 00:38:10,930
sort of summary

918
00:38:08,670 --> 00:38:13,150
<font color="#E5E5E5">summary in conclusion I</font><font color="#CCCCCC"> think we need to</font>

919
00:38:10,930 --> 00:38:16,330
hurry bit<font color="#CCCCCC"> because</font><font color="#E5E5E5"> time is</font><font color="#CCCCCC"> running out so</font>

920
00:38:13,150 --> 00:38:18,460
summary what we showed you is that XSS

921
00:38:16,330 --> 00:38:20,500
mitigations work by blocking<font color="#CCCCCC"> attacks not</font>

922
00:38:18,460 --> 00:38:22,870
preventing the vulnerabilities<font color="#E5E5E5"> and that</font>

923
00:38:20,500 --> 00:38:24,760
we can use<font color="#CCCCCC"> scope gadgets to bypass these</font>

924
00:38:22,870 --> 00:38:27,520
mitigations and what we found out to our

925
00:38:24,760 --> 00:38:29,680
like<font color="#CCCCCC"> manual study is that</font><font color="#E5E5E5"> gadgets are</font>

926
00:38:27,520 --> 00:38:34,630
very prevalent in modern<font color="#E5E5E5"> JavaScript</font>

927
00:38:29,680 --> 00:38:36,250
libraries so the problem<font color="#E5E5E5"> here is</font><font color="#CCCCCC"> that if</font>

928
00:38:34,630 --> 00:38:38,230
<font color="#E5E5E5">necessity</font><font color="#CCCCCC"> Gatien are not very</font><font color="#E5E5E5"> well</font>

929
00:38:36,250 --> 00:38:39,610
aligned with<font color="#E5E5E5"> the web today</font><font color="#CCCCCC"> so most of</font>

930
00:38:38,230 --> 00:38:41,560
the mitigations<font color="#E5E5E5"> have been built with</font><font color="#CCCCCC"> the</font>

931
00:38:39,610 --> 00:38:43,930
mindset<font color="#CCCCCC"> of like applications 10 years</font>

932
00:38:41,560 --> 00:38:45,970
ago<font color="#E5E5E5"> with the classical reflected XSS but</font>

933
00:38:43,930 --> 00:38:48,009
not with modern JavaScript<font color="#E5E5E5"> libraries</font>

934
00:38:45,970 --> 00:38:51,819
that have<font color="#E5E5E5"> like all these expression</font>

935
00:38:48,010 --> 00:38:53,710
languages and so on so and we<font color="#E5E5E5"> personally</font>

936
00:38:51,820 --> 00:38:56,200
consider<font color="#E5E5E5"> this as a game changer in</font>

937
00:38:53,710 --> 00:38:58,030
mitigations<font color="#E5E5E5"> because I think we've shown</font>

938
00:38:56,200 --> 00:39:01,240
<font color="#E5E5E5">that</font><font color="#CCCCCC"> mitigations are problematic</font><font color="#E5E5E5"> and we</font>

939
00:38:58,030 --> 00:39:03,070
need to change some<font color="#E5E5E5"> add-ons</font><font color="#CCCCCC"> on some</font>

940
00:39:01,240 --> 00:39:06,220
priorities in some ways we create

941
00:39:03,070 --> 00:39:08,050
<font color="#CCCCCC">mitigation</font><font color="#E5E5E5"> and in this research we</font><font color="#CCCCCC"> only</font>

942
00:39:06,220 --> 00:39:09,910
looked at frameworks right and that<font color="#E5E5E5"> was</font>

943
00:39:08,050 --> 00:39:12,040
you<font color="#E5E5E5"> can say our study is quite small</font>

944
00:39:09,910 --> 00:39:14,410
scale 16 framework that's probably not

945
00:39:12,040 --> 00:39:16,450
what's out there<font color="#CCCCCC"> so we're currently</font>

946
00:39:14,410 --> 00:39:18,370
<font color="#E5E5E5">program preparing study actually the</font>

947
00:39:16,450 --> 00:39:20,770
crawlers finished yesterday<font color="#E5E5E5"> of the Alexa</font>

948
00:39:18,370 --> 00:39:22,359
<font color="#CCCCCC">top</font><font color="#E5E5E5"> 5,000</font><font color="#CCCCCC"> website and we build a tool</font>

949
00:39:20,770 --> 00:39:24,910
chain to detect the edges<font color="#E5E5E5"> in</font><font color="#CCCCCC"> userland</font>

950
00:39:22,360 --> 00:39:26,950
code and we don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> full results yet</font>

951
00:39:24,910 --> 00:39:29,850
we will present results<font color="#E5E5E5"> later this year</font>

952
00:39:26,950 --> 00:39:32,319
at blackhat and we also write<font color="#E5E5E5"> a paper</font>

953
00:39:29,850 --> 00:39:33,520
<font color="#CCCCCC">where</font><font color="#E5E5E5"> we will</font><font color="#CCCCCC"> present more numbers but I</font>

954
00:39:32,320 --> 00:39:35,470
have just<font color="#CCCCCC"> a sneak peek</font>

955
00:39:33,520 --> 00:39:36,810
so in<font color="#E5E5E5"> these</font><font color="#CCCCCC"> 5,000 pages we crawl the</font>

956
00:39:35,470 --> 00:39:40,600
first level links which results in

957
00:39:36,810 --> 00:39:42,619
around<font color="#CCCCCC"> 700,000</font><font color="#E5E5E5"> pages we found more than</font>

958
00:39:40,600 --> 00:39:44,990
<font color="#CCCCCC">three million data flows</font>

959
00:39:42,619 --> 00:39:47,480
from the<font color="#CCCCCC"> Dom into a</font><font color="#E5E5E5"> security centered</font>

960
00:39:44,990 --> 00:39:49,549
assumptions<font color="#E5E5E5"> so and we already found a</font>

961
00:39:47,480 --> 00:39:51,259
lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> gadgets</font><font color="#E5E5E5"> through this so</font><font color="#CCCCCC"> many of</font>

962
00:39:49,549 --> 00:39:52,849
these data<font color="#E5E5E5"> flow we have still a lots of</font>

963
00:39:51,259 --> 00:39:55,730
duplicates and we are<font color="#E5E5E5"> very conservative</font>

964
00:39:52,849 --> 00:39:57,799
<font color="#CCCCCC">we will still end</font><font color="#E5E5E5"> up with tens of</font>

965
00:39:55,730 --> 00:39:59,539
thousands<font color="#E5E5E5"> or thousands or tens of</font>

966
00:39:57,799 --> 00:40:03,049
thousands of gadgets in the Alexa<font color="#E5E5E5"> top</font>

967
00:39:59,539 --> 00:40:04,759
<font color="#CCCCCC">5,000 webpages so what do</font><font color="#E5E5E5"> we do about it</font>

968
00:40:03,049 --> 00:40:07,460
<font color="#CCCCCC">we have different strategies and</font><font color="#E5E5E5"> I will</font>

969
00:40:04,759 --> 00:40:08,779
<font color="#E5E5E5">talk about three so the first way we</font>

970
00:40:07,460 --> 00:40:10,519
could deal with<font color="#E5E5E5"> this is adding gadget</font>

971
00:40:08,779 --> 00:40:12,019
awareness to<font color="#E5E5E5"> mitigation and this is</font>

972
00:40:10,519 --> 00:40:15,288
already<font color="#CCCCCC"> what's happening</font><font color="#E5E5E5"> right no script</font>

973
00:40:12,019 --> 00:40:17,660
for example<font color="#E5E5E5"> blocks all</font><font color="#CCCCCC"> the gadgets</font><font color="#E5E5E5"> that</font>

974
00:40:15,289 --> 00:40:19,549
<font color="#E5E5E5">we</font><font color="#CCCCCC"> found nowadays</font><font color="#E5E5E5"> but it's kind of an</font>

975
00:40:17,660 --> 00:40:21,440
incomplete fix<font color="#E5E5E5"> it's problematic</font><font color="#CCCCCC"> because</font>

976
00:40:19,549 --> 00:40:22,730
<font color="#E5E5E5">you in a mitigation you probably cannot</font>

977
00:40:21,440 --> 00:40:24,650
cover<font color="#CCCCCC"> all the different expression</font>

978
00:40:22,730 --> 00:40:27,259
languages and all the<font color="#E5E5E5"> different ways you</font>

979
00:40:24,650 --> 00:40:29,809
<font color="#E5E5E5">can execute code through gadgets and</font>

980
00:40:27,259 --> 00:40:31,400
also we have the problems of false

981
00:40:29,809 --> 00:40:32,930
positives as soon as you are<font color="#E5E5E5"> starting</font><font color="#CCCCCC"> to</font>

982
00:40:31,400 --> 00:40:34,670
over catch and try to identify

983
00:40:32,930 --> 00:40:36,140
<font color="#E5E5E5">everything that might be</font><font color="#CCCCCC"> gadget you</font>

984
00:40:34,670 --> 00:40:38,569
might run into<font color="#CCCCCC"> cases and there's already</font>

985
00:40:36,140 --> 00:40:40,578
one in<font color="#CCCCCC"> Dom purify with another another</font>

986
00:40:38,569 --> 00:40:43,519
<font color="#E5E5E5">feature that is addressing something</font>

987
00:40:40,579 --> 00:40:45,200
<font color="#E5E5E5">similar to the edges and the second</font>

988
00:40:43,519 --> 00:40:48,019
<font color="#CCCCCC">approach that you can take is touching</font>

989
00:40:45,200 --> 00:40:50,749
gadgets and frameworks<font color="#CCCCCC"> so so remove them</font>

990
00:40:48,019 --> 00:40:52,970
from the<font color="#E5E5E5"> framework and I think while it</font>

991
00:40:50,749 --> 00:40:55,249
is<font color="#E5E5E5"> possible it can be difficult in</font>

992
00:40:52,970 --> 00:40:56,480
practice<font color="#CCCCCC"> so because we</font><font color="#E5E5E5"> just have</font><font color="#CCCCCC"> so many</font>

993
00:40:55,249 --> 00:40:57,980
different libraries and you need to

994
00:40:56,480 --> 00:40:59,809
patch<font color="#E5E5E5"> all of them we found gadgets in</font>

995
00:40:57,980 --> 00:41:03,410
all of them except<font color="#E5E5E5"> for react because</font><font color="#CCCCCC"> of</font>

996
00:40:59,809 --> 00:41:05,779
the special<font color="#E5E5E5"> way they handle the Dom but</font>

997
00:41:03,410 --> 00:41:08,569
<font color="#E5E5E5">also the edges are hard to find right so</font>

998
00:41:05,779 --> 00:41:09,739
some<font color="#CCCCCC"> are</font><font color="#E5E5E5"> very easy to find it right now</font>

999
00:41:08,569 --> 00:41:12,319
it's<font color="#E5E5E5"> very easy</font><font color="#CCCCCC"> because nobody ever</font>

1000
00:41:09,739 --> 00:41:15,289
looked<font color="#E5E5E5"> at</font><font color="#CCCCCC"> it but</font><font color="#E5E5E5"> I would say it is hard</font>

1001
00:41:12,319 --> 00:41:16,579
<font color="#CCCCCC">to find</font><font color="#E5E5E5"> as an XSS flaw so basically the</font>

1002
00:41:15,289 --> 00:41:19,339
problem<font color="#E5E5E5"> of finding all the</font><font color="#CCCCCC"> getters and</font>

1003
00:41:16,579 --> 00:41:21,589
<font color="#E5E5E5">fixing all the</font><font color="#CCCCCC"> gadgets in</font><font color="#E5E5E5"> at scale might</font>

1004
00:41:19,339 --> 00:41:23,779
be as<font color="#E5E5E5"> difficult as fixing</font><font color="#CCCCCC"> exodus which</font>

1005
00:41:21,589 --> 00:41:25,640
<font color="#E5E5E5">we haven't</font><font color="#CCCCCC"> achieved yet right so and</font>

1006
00:41:23,779 --> 00:41:28,130
<font color="#E5E5E5">sometimes the</font><font color="#CCCCCC"> guesses are just features</font>

1007
00:41:25,640 --> 00:41:30,618
right we can remove<font color="#CCCCCC"> expressions</font><font color="#E5E5E5"> puzzles</font>

1008
00:41:28,130 --> 00:41:33,049
and get rid of<font color="#CCCCCC"> gadgets but then we don't</font>

1009
00:41:30,619 --> 00:41:34,460
<font color="#E5E5E5">have expressions anymore right so most</font>

1010
00:41:33,049 --> 00:41:35,930
<font color="#E5E5E5">of the developers will probably push</font>

1011
00:41:34,460 --> 00:41:37,640
<font color="#E5E5E5">back if you</font><font color="#CCCCCC"> send them</font><font color="#E5E5E5"> a patch because</font>

1012
00:41:35,930 --> 00:41:39,259
<font color="#CCCCCC">it's not a direct</font><font color="#E5E5E5"> part it only turns</font>

1013
00:41:37,640 --> 00:41:43,069
into a bug if you have a<font color="#CCCCCC"> mitigation</font><font color="#E5E5E5"> and</font>

1014
00:41:39,259 --> 00:41:45,380
another XSS<font color="#CCCCCC"> combined</font><font color="#E5E5E5"> with so we believe</font>

1015
00:41:43,069 --> 00:41:47,538
<font color="#E5E5E5">in another way and I think</font><font color="#CCCCCC"> one of the</font>

1016
00:41:45,380 --> 00:41:50,029
key<font color="#CCCCCC"> problems of the web on our of XS</font>

1017
00:41:47,539 --> 00:41:51,920
<font color="#E5E5E5">today's that let's say you have a novice</font>

1018
00:41:50,029 --> 00:41:53,869
programmer and<font color="#CCCCCC"> you give this programmer</font>

1019
00:41:51,920 --> 00:41:55,910
a task to write<font color="#E5E5E5"> a complex</font><font color="#CCCCCC"> application</font>

1020
00:41:53,869 --> 00:41:56,630
<font color="#E5E5E5">will it be secure and I think we all</font>

1021
00:41:55,910 --> 00:41:58,730
know the answer

1022
00:41:56,630 --> 00:42:01,190
it will never be<font color="#CCCCCC"> secure it will be full</font>

1023
00:41:58,730 --> 00:42:02,660
<font color="#E5E5E5">of bugs</font><font color="#CCCCCC"> and that's a huge problems and</font>

1024
00:42:01,190 --> 00:42:05,090
the task is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> getting easier</font><font color="#CCCCCC"> getting</font>

1025
00:42:02,660 --> 00:42:07,339
<font color="#E5E5E5">harder because applications are getting</font>

1026
00:42:05,090 --> 00:42:10,390
more complex<font color="#CCCCCC"> and that's why we</font><font color="#E5E5E5"> think we</font>

1027
00:42:07,340 --> 00:42:12,350
need to to<font color="#E5E5E5"> move to a secure by default</font>

1028
00:42:10,390 --> 00:42:14,210
<font color="#CCCCCC">direction so we need to harden the</font>

1029
00:42:12,350 --> 00:42:16,040
platform<font color="#E5E5E5"> we need to provide the tools</font>

1030
00:42:14,210 --> 00:42:18,020
that a novice programmer that<font color="#E5E5E5"> has never</font>

1031
00:42:16,040 --> 00:42:20,660
learned about<font color="#E5E5E5"> security is not able to</font>

1032
00:42:18,020 --> 00:42:22,730
<font color="#E5E5E5">introduce XSS and we can do that for</font>

1033
00:42:20,660 --> 00:42:24,440
<font color="#CCCCCC">example by providing state</font><font color="#E5E5E5"> api's by</font>

1034
00:42:22,730 --> 00:42:26,990
removing all the old<font color="#CCCCCC"> craft like inner</font>

1035
00:42:24,440 --> 00:42:28,370
HTML and document right from from the

1036
00:42:26,990 --> 00:42:30,620
<font color="#CCCCCC">browser's and replace them with</font><font color="#E5E5E5"> safe</font>

1037
00:42:28,370 --> 00:42:32,720
templating systems<font color="#E5E5E5"> and so on so we</font><font color="#CCCCCC"> need</font>

1038
00:42:30,620 --> 00:42:34,370
<font color="#E5E5E5">better browser primitives we need also</font>

1039
00:42:32,720 --> 00:42:36,049
better build some security<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font>

1040
00:42:34,370 --> 00:42:37,880
some frameworks of a pretty<font color="#E5E5E5"> good</font><font color="#CCCCCC"> day</font><font color="#E5E5E5"> as</font>

1041
00:42:36,050 --> 00:42:40,070
they're compiling their templates<font color="#E5E5E5"> at</font>

1042
00:42:37,880 --> 00:42:41,810
compile time so<font color="#E5E5E5"> there is a compiler</font>

1043
00:42:40,070 --> 00:42:44,090
before you deployed the framework<font color="#E5E5E5"> and</font>

1044
00:42:41,810 --> 00:42:46,790
that that<font color="#E5E5E5"> gives you some nice security</font>

1045
00:42:44,090 --> 00:42:49,580
<font color="#E5E5E5">properties that you can check before you</font>

1046
00:42:46,790 --> 00:42:51,290
<font color="#CCCCCC">actually compile and we also need better</font>

1047
00:42:49,580 --> 00:42:52,759
<font color="#E5E5E5">isolation primitives so that's something</font>

1048
00:42:51,290 --> 00:42:54,529
that<font color="#E5E5E5"> we see in the binary world it seems</font>

1049
00:42:52,760 --> 00:42:56,120
in the binary<font color="#E5E5E5"> world mitigations are also</font>

1050
00:42:54,530 --> 00:42:58,850
kind<font color="#CCCCCC"> of problematic</font><font color="#E5E5E5"> like data execution</font>

1051
00:42:56,120 --> 00:43:00,470
prevention or<font color="#CCCCCC"> aslr</font><font color="#E5E5E5"> but what works well</font>

1052
00:42:58,850 --> 00:43:02,330
is<font color="#E5E5E5"> isolation techniques like</font><font color="#CCCCCC"> send</font>

1053
00:43:00,470 --> 00:43:03,919
<font color="#CCCCCC">focusing techniques</font><font color="#E5E5E5"> and we already have</font>

1054
00:43:02,330 --> 00:43:04,850
a couple<font color="#E5E5E5"> of of these isolation</font>

1055
00:43:03,920 --> 00:43:07,970
techniques in the browser<font color="#E5E5E5"> for example</font>

1056
00:43:04,850 --> 00:43:10,040
<font color="#E5E5E5">sub origins iframe sandbox</font><font color="#CCCCCC"> or there's</font>

1057
00:43:07,970 --> 00:43:12,620
another<font color="#E5E5E5"> proposal of Eduardo M which is</font>

1058
00:43:10,040 --> 00:43:14,480
<font color="#E5E5E5">called isolated script so I think we</font>

1059
00:43:12,620 --> 00:43:16,370
<font color="#E5E5E5">should look into those and for example</font><font color="#CCCCCC"> I</font>

1060
00:43:14,480 --> 00:43:18,350
from<font color="#CCCCCC"> sent foxes</font><font color="#E5E5E5"> is pretty solid if you</font>

1061
00:43:16,370 --> 00:43:20,540
just put user input into a sense into

1062
00:43:18,350 --> 00:43:22,009
iframe sandbox even if there is an

1063
00:43:20,540 --> 00:43:24,350
exercise<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the sandbox there's nothing</font>

1064
00:43:22,010 --> 00:43:26,690
the<font color="#E5E5E5"> exercise can do</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> we should</font>

1065
00:43:24,350 --> 00:43:28,400
<font color="#CCCCCC">shake shift our focus to hardening the</font>

1066
00:43:26,690 --> 00:43:31,820
<font color="#E5E5E5">DOM and creating</font><font color="#CCCCCC"> these isolation</font>

1067
00:43:28,400 --> 00:43:32,990
primitives in the future<font color="#E5E5E5"> and with this</font>

1068
00:43:31,820 --> 00:43:35,360
we<font color="#E5E5E5"> would like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> thank you for</font><font color="#CCCCCC"> your</font>

1069
00:43:32,990 --> 00:43:38,859
attention<font color="#E5E5E5"> and feel free to ask any</font>

1070
00:43:35,360 --> 00:43:38,860
<font color="#CCCCCC">questions</font><font color="#E5E5E5"> in my house</font>

1071
00:43:48,569 --> 00:43:54,999
no questions<font color="#CCCCCC"> yes</font>

1072
00:43:51,369 --> 00:43:57,819
so<font color="#CCCCCC"> you there was no gadget</font><font color="#E5E5E5"> chain and</font>

1073
00:43:54,999 --> 00:44:00,220
angular 2<font color="#E5E5E5"> because it pre compels the</font>

1074
00:43:57,819 --> 00:44:01,900
<font color="#E5E5E5">template so that what</font><font color="#CCCCCC"> years are there so</font>

1075
00:44:00,220 --> 00:44:04,419
we haven't looked<font color="#E5E5E5"> at</font><font color="#CCCCCC"> angular 2 in this</font>

1076
00:44:01,900 --> 00:44:06,849
research<font color="#E5E5E5"> that we look at react and react</font>

1077
00:44:04,420 --> 00:44:08,769
didn't have any any<font color="#E5E5E5"> gadgets because they</font>

1078
00:44:06,849 --> 00:44:10,720
have a<font color="#E5E5E5"> very special way of handling the</font>

1079
00:44:08,769 --> 00:44:12,220
Dom interaction<font color="#E5E5E5"> so so usually frameworks</font>

1080
00:44:10,720 --> 00:44:15,220
read from the Dom like all the templates

1081
00:44:12,220 --> 00:44:16,868
<font color="#E5E5E5">are in the Dom and then they are written</font>

1082
00:44:15,220 --> 00:44:19,269
<font color="#E5E5E5">back to the Dom right so you read and</font>

1083
00:44:16,869 --> 00:44:21,249
<font color="#E5E5E5">write and react takes a different</font>

1084
00:44:19,269 --> 00:44:22,749
approach<font color="#E5E5E5"> so in react you can write your</font>

1085
00:44:21,249 --> 00:44:24,759
templates directly in<font color="#E5E5E5"> your</font><font color="#CCCCCC"> JavaScript</font>

1086
00:44:22,749 --> 00:44:27,339
<font color="#E5E5E5">file you just</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> really write HTML in</font>

1087
00:44:24,759 --> 00:44:29,410
and you compile the JavaScript<font color="#E5E5E5"> files so</font>

1088
00:44:27,339 --> 00:44:31,538
the template from the<font color="#CCCCCC"> JavaScript side</font><font color="#E5E5E5"> is</font>

1089
00:44:29,410 --> 00:44:34,450
turned into a<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> of JavaScript</font><font color="#E5E5E5"> by the</font>

1090
00:44:31,539 --> 00:44:37,119
compiler<font color="#E5E5E5"> and this and they never read</font>

1091
00:44:34,450 --> 00:44:38,890
from the Dom just<font color="#E5E5E5"> they always only write</font>

1092
00:44:37,119 --> 00:44:41,769
from the Dom<font color="#CCCCCC"> editor here right to</font><font color="#E5E5E5"> the</font>

1093
00:44:38,890 --> 00:44:43,240
Dom so there is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> templated whenever you</font>

1094
00:44:41,769 --> 00:44:45,609
update it it will be rewritten<font color="#E5E5E5"> and</font>

1095
00:44:43,240 --> 00:44:47,529
updated so<font color="#E5E5E5"> you only have</font><font color="#CCCCCC"> a write flow</font>

1096
00:44:45,609 --> 00:44:48,848
but never<font color="#CCCCCC"> recur</font><font color="#E5E5E5"> but the current can only</font>

1097
00:44:47,529 --> 00:44:49,359
<font color="#E5E5E5">achieve this because</font><font color="#CCCCCC"> they have pre</font>

1098
00:44:48,849 --> 00:44:51,549
compiling

1099
00:44:49,359 --> 00:44:57,029
<font color="#CCCCCC">so you couldn't do this</font><font color="#E5E5E5"> functionality in</font>

1100
00:44:51,549 --> 00:44:57,029
the like a standard<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> I</font>

1101
00:45:01,170 --> 00:45:06,460
<font color="#CCCCCC">question</font><font color="#E5E5E5"> about angular</font><font color="#CCCCCC"> one specifically</font>

1102
00:45:03,759 --> 00:45:08,950
would<font color="#E5E5E5"> you say it suffices to simply</font>

1103
00:45:06,460 --> 00:45:11,589
avoid injection before angular is

1104
00:45:08,950 --> 00:45:16,359
running so<font color="#CCCCCC"> is angular capable of Clannad</font>

1105
00:45:11,589 --> 00:45:17,940
izing these things<font color="#E5E5E5"> itself yes</font>

1106
00:45:16,359 --> 00:45:21,249
so when<font color="#E5E5E5"> the angular bootstraps it</font>

1107
00:45:17,940 --> 00:45:23,140
<font color="#E5E5E5">basically treats a subset of it of the</font>

1108
00:45:21,249 --> 00:45:25,899
<font color="#E5E5E5">Dom as the template right and identity</font>

1109
00:45:23,140 --> 00:45:28,118
is all the expressions from<font color="#E5E5E5"> from it</font><font color="#CCCCCC"> so</font>

1110
00:45:25,900 --> 00:45:30,759
yes in theory<font color="#E5E5E5"> if you prevent that</font>

1111
00:45:28,119 --> 00:45:33,999
<font color="#E5E5E5">exercises pre bootstrap then you would</font>

1112
00:45:30,759 --> 00:45:35,460
have a secure let's<font color="#E5E5E5"> say a basic angular</font>

1113
00:45:33,999 --> 00:45:38,379
application will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> secure in this case</font>

1114
00:45:35,460 --> 00:45:41,079
<font color="#E5E5E5">however first of all yes</font><font color="#CCCCCC"> we cannot fix</font>

1115
00:45:38,380 --> 00:45:44,410
<font color="#CCCCCC">accesses that</font><font color="#E5E5E5"> turns out</font><font color="#CCCCCC"> to be a very</font>

1116
00:45:41,079 --> 00:45:46,059
prevalent problem<font color="#E5E5E5"> of the web so the even</font>

1117
00:45:44,410 --> 00:45:48,279
if you have say<font color="#CCCCCC"> either no server-side</font>

1118
00:45:46,059 --> 00:45:49,989
injection in<font color="#E5E5E5"> the sensor like a regular</font>

1119
00:45:48,279 --> 00:45:51,249
<font color="#E5E5E5">reflected exercise that is being</font>

1120
00:45:49,989 --> 00:45:53,390
sanitized on a<font color="#CCCCCC"> server-side</font>

1121
00:45:51,249 --> 00:45:54,980
this will still be a problem<font color="#CCCCCC"> for angular</font>

1122
00:45:53,390 --> 00:45:56,598
but second<font color="#E5E5E5"> of all what is important in</font>

1123
00:45:54,980 --> 00:45:58,730
practice<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of angular</font><font color="#CCCCCC"> application</font>

1124
00:45:56,599 --> 00:46:02,239
<font color="#CCCCCC">especially the I'm talking about</font><font color="#E5E5E5"> angular</font>

1125
00:45:58,730 --> 00:46:03,650
<font color="#CCCCCC">1 applications they</font><font color="#E5E5E5"> compile it can place</font>

1126
00:46:02,239 --> 00:46:05,869
at one<font color="#E5E5E5"> time like in the angular</font>

1127
00:46:03,650 --> 00:46:08,900
directive<font color="#E5E5E5"> a</font><font color="#CCCCCC"> doodler pass or dollar</font>

1128
00:46:05,869 --> 00:46:10,279
compile again taking data from<font color="#CCCCCC"> the Dom</font>

1129
00:46:08,900 --> 00:46:12,170
and doing some sort of like a<font color="#CCCCCC"> double</font>

1130
00:46:10,279 --> 00:46:14,539
interpolation<font color="#E5E5E5"> dynamic template</font>

1131
00:46:12,170 --> 00:46:18,309
<font color="#E5E5E5">computations and</font><font color="#CCCCCC"> if that part of data</font>

1132
00:46:14,539 --> 00:46:20,779
even injected post bootstrap was

1133
00:46:18,309 --> 00:46:22,579
tampered with<font color="#CCCCCC"> right was a result</font><font color="#E5E5E5"> of</font>

1134
00:46:20,779 --> 00:46:35,079
<font color="#CCCCCC">index and then you have the original</font>

1135
00:46:22,579 --> 00:46:35,079
problem<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> much</font>

