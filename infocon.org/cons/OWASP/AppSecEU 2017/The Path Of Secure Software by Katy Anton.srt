1
00:00:03,460 --> 00:00:10,010
<font color="#CCCCCC">all right two</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> in order to</font>

2
00:00:07,910 --> 00:00:17,300
better<font color="#CCCCCC"> understand my audience how many</font>

3
00:00:10,010 --> 00:00:21,259
<font color="#CCCCCC">of</font><font color="#E5E5E5"> you are developers Java developers</font>

4
00:00:17,300 --> 00:00:24,849
dotnet and how many of you are security

5
00:00:21,259 --> 00:00:24,849
professionals working with<font color="#E5E5E5"> developers</font>

6
00:00:25,269 --> 00:00:31,070
excellent<font color="#E5E5E5"> the reality is that developers</font>

7
00:00:28,519 --> 00:00:33,579
have not learned about<font color="#E5E5E5"> secure coding or</font>

8
00:00:31,070 --> 00:00:36,379
crypto in school at university level

9
00:00:33,579 --> 00:00:38,149
<font color="#CCCCCC">secure coding</font><font color="#E5E5E5"> or software</font><font color="#CCCCCC"> security is</font>

10
00:00:36,379 --> 00:00:41,059
not part of the curriculum<font color="#CCCCCC"> in</font><font color="#E5E5E5"> most</font>

11
00:00:38,149 --> 00:00:42,920
<font color="#CCCCCC">universities at the same time cyber</font>

12
00:00:41,059 --> 00:00:46,190
<font color="#CCCCCC">attacks are real and</font><font color="#E5E5E5"> growing threat to</font>

13
00:00:42,920 --> 00:00:48,230
businesses<font color="#E5E5E5"> an increasing number of these</font>

14
00:00:46,190 --> 00:00:50,390
attacks<font color="#CCCCCC"> takes place at the application</font>

15
00:00:48,230 --> 00:00:53,300
layer<font color="#E5E5E5"> the best</font><font color="#CCCCCC"> defense for this is</font>

16
00:00:50,390 --> 00:00:58,280
<font color="#E5E5E5">develop applications where the security</font>

17
00:00:53,300 --> 00:01:00,739
<font color="#E5E5E5">has been incorporated in</font><font color="#CCCCCC"> our top 10</font>

18
00:00:58,280 --> 00:01:03,170
<font color="#E5E5E5">proactive controls consider</font><font color="#CCCCCC"> security as</font>

19
00:01:00,739 --> 00:01:05,330
part<font color="#CCCCCC"> of the software design cycle in</font>

20
00:01:03,170 --> 00:01:07,490
this presentation of we are going to go

21
00:01:05,330 --> 00:01:09,980
through the security<font color="#CCCCCC"> controls that</font><font color="#E5E5E5"> you</font>

22
00:01:07,490 --> 00:01:12,759
as developers can<font color="#CCCCCC"> use while writing your</font>

23
00:01:09,980 --> 00:01:15,530
<font color="#E5E5E5">software and for each</font><font color="#CCCCCC"> of these control</font>

24
00:01:12,760 --> 00:01:17,300
you are<font color="#E5E5E5"> going to learn of which of the</font>

25
00:01:15,530 --> 00:01:20,600
most common vulnerabilities you<font color="#E5E5E5"> can</font>

26
00:01:17,300 --> 00:01:23,300
prevent a little bit about myself<font color="#CCCCCC"> my</font>

27
00:01:20,600 --> 00:01:25,160
<font color="#CCCCCC">name is Jay</font><font color="#E5E5E5"> gentle I come from a</font>

28
00:01:23,300 --> 00:01:27,500
<font color="#E5E5E5">software development veteran when I have</font>

29
00:01:25,160 --> 00:01:29,420
<font color="#E5E5E5">led in creating created teams of</font>

30
00:01:27,500 --> 00:01:33,050
developers<font color="#CCCCCC"> I currently work as</font>

31
00:01:29,420 --> 00:01:36,800
application studio as<font color="#E5E5E5"> backup where I</font>

32
00:01:33,050 --> 00:01:52,220
help<font color="#E5E5E5"> developers around the</font><font color="#CCCCCC"> world to</font><font color="#E5E5E5"> help</font>

33
00:01:36,800 --> 00:01:56,660
secure their software the earth<font color="#CCCCCC"> top 10</font>

34
00:01:52,220 --> 00:02:03,050
risks<font color="#CCCCCC"> is by</font><font color="#E5E5E5"> far the most cited</font><font color="#CCCCCC"> source</font>

35
00:01:56,660 --> 00:02:07,670
document this presentation is<font color="#E5E5E5"> going to</font>

36
00:02:03,050 --> 00:02:10,038
<font color="#E5E5E5">be based on this table version the 2013</font>

37
00:02:07,670 --> 00:02:12,230
not very recently<font color="#E5E5E5"> because this version</font>

38
00:02:10,038 --> 00:02:15,899
<font color="#E5E5E5">has been out there for</font><font color="#CCCCCC"> almost four years</font>

39
00:02:12,230 --> 00:02:19,709
<font color="#CCCCCC">but how many of you have tried</font>

40
00:02:15,900 --> 00:02:21,480
starting from this list to steer

41
00:02:19,709 --> 00:02:24,239
<font color="#CCCCCC">yourself here</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> knew</font><font color="#E5E5E5"> this while</font>

42
00:02:21,480 --> 00:02:27,149
writing the code<font color="#CCCCCC"> as I mentioned I</font>

43
00:02:24,239 --> 00:02:29,819
previously<font color="#E5E5E5"> worked in</font><font color="#CCCCCC"> materials lab</font><font color="#E5E5E5"> I was</font>

44
00:02:27,150 --> 00:02:33,480
head<font color="#CCCCCC"> of development I was working with</font>

45
00:02:29,819 --> 00:02:36,060
development teams<font color="#E5E5E5"> and our responsibility</font>

46
00:02:33,480 --> 00:02:40,170
was to<font color="#E5E5E5"> deliver software to retailers we</font>

47
00:02:36,060 --> 00:02:42,780
have every two weeks releases<font color="#E5E5E5"> and in</font>

48
00:02:40,170 --> 00:02:45,450
each release the<font color="#E5E5E5"> entire focus was on</font>

49
00:02:42,780 --> 00:02:49,049
delivering<font color="#E5E5E5"> a new functionality</font><font color="#CCCCCC"> to our</font>

50
00:02:45,450 --> 00:02:51,030
customers and has you know has

51
00:02:49,049 --> 00:02:53,250
developers when a developer starts

52
00:02:51,030 --> 00:02:55,220
<font color="#E5E5E5">writing the code for a new functionality</font>

53
00:02:53,250 --> 00:02:58,739
or for<font color="#CCCCCC"> a bostic's</font>

54
00:02:55,220 --> 00:03:01,890
its entire focus is on writing<font color="#E5E5E5"> the code</font>

55
00:02:58,739 --> 00:03:08,489
for that<font color="#E5E5E5"> functionality</font><font color="#CCCCCC"> and this is very</font>

56
00:03:01,890 --> 00:03:11,548
difficult<font color="#E5E5E5"> to ask a developer to think</font>

57
00:03:08,489 --> 00:03:13,310
about always injections<font color="#E5E5E5"> and how to</font>

58
00:03:11,549 --> 00:03:17,239
prevent it

59
00:03:13,310 --> 00:03:20,220
SQL injection<font color="#CCCCCC"> and how to prevent it so</font>

60
00:03:17,239 --> 00:03:23,220
<font color="#CCCCCC">for</font><font color="#E5E5E5"> me the question was or what are the</font>

61
00:03:20,220 --> 00:03:26,040
security<font color="#E5E5E5"> techniques that we as</font>

62
00:03:23,220 --> 00:03:31,079
developers can<font color="#CCCCCC"> use every</font><font color="#E5E5E5"> day who are</font>

63
00:03:26,040 --> 00:03:32,970
writing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> code without</font><font color="#E5E5E5"> being security</font>

64
00:03:31,079 --> 00:03:34,590
<font color="#E5E5E5">expert</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> can help to prevent this the</font>

65
00:03:32,970 --> 00:03:36,660
most<font color="#E5E5E5"> common vulnerabilities found in</font>

66
00:03:34,590 --> 00:03:40,290
<font color="#E5E5E5">software applications because when this</font>

67
00:03:36,660 --> 00:03:43,769
<font color="#E5E5E5">occur here are some of the</font><font color="#CCCCCC"> exploits</font><font color="#E5E5E5"> that</font>

68
00:03:40,290 --> 00:03:47,429
can take place<font color="#E5E5E5"> like for example</font><font color="#CCCCCC"> top-top</font>

69
00:03:43,769 --> 00:03:49,139
from a<font color="#CCCCCC"> SQL injection actually medicine a</font>

70
00:03:47,430 --> 00:03:51,650
lot of material<font color="#E5E5E5"> out there and I'm going</font>

71
00:03:49,139 --> 00:03:53,940
to give<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of it in this presentation</font>

72
00:03:51,650 --> 00:03:57,329
most accidents<font color="#CCCCCC"> occurred due to</font><font color="#E5E5E5"> attacks</font>

73
00:03:53,940 --> 00:03:59,940
<font color="#E5E5E5">Austria a very interesting one that</font>

74
00:03:57,329 --> 00:04:01,919
<font color="#E5E5E5">maybe is not that</font><font color="#CCCCCC"> no which happened in</font>

75
00:03:59,940 --> 00:04:05,040
<font color="#E5E5E5">the</font><font color="#CCCCCC"> software that was powering</font><font color="#E5E5E5"> the slot</font>

76
00:04:01,919 --> 00:04:08,040
<font color="#CCCCCC">machine in US casinos</font><font color="#E5E5E5"> and what happened</font>

77
00:04:05,040 --> 00:04:11,040
there was that the<font color="#CCCCCC"> numbers generated</font><font color="#E5E5E5"> by</font>

78
00:04:08,040 --> 00:04:12,959
that<font color="#CCCCCC"> sucker were not random this meant</font>

79
00:04:11,040 --> 00:04:14,459
that it<font color="#E5E5E5"> was possible for the attacker to</font>

80
00:04:12,959 --> 00:04:15,180
<font color="#E5E5E5">guess them and this is exactly what</font>

81
00:04:14,459 --> 00:04:17,160
<font color="#E5E5E5">happened</font>

82
00:04:15,180 --> 00:04:18,660
the attacker slowed<font color="#E5E5E5"> the sequence as the</font>

83
00:04:17,160 --> 00:04:21,419
<font color="#E5E5E5">numbers generated by the software</font>

84
00:04:18,660 --> 00:04:25,610
<font color="#E5E5E5">analyzes and then predict the next ones</font>

85
00:04:21,418 --> 00:04:28,200
<font color="#E5E5E5">in this way increasing their wings</font><font color="#CCCCCC"> and</font>

86
00:04:25,610 --> 00:04:29,350
the most recent one which happened this

87
00:04:28,200 --> 00:04:32,770
weeks

88
00:04:29,350 --> 00:04:35,170
the data breach<font color="#E5E5E5"> into HipChat</font><font color="#CCCCCC"> these to</font>

89
00:04:32,770 --> 00:04:40,930
serve<font color="#E5E5E5"> vulnerabilities into a third</font>

90
00:04:35,170 --> 00:04:44,640
particle library so as developers<font color="#CCCCCC"> will</font>

91
00:04:40,930 --> 00:04:48,040
<font color="#E5E5E5">write applications from enterprise</font>

92
00:04:44,640 --> 00:04:50,740
applications<font color="#E5E5E5"> web services micro services</font>

93
00:04:48,040 --> 00:04:52,390
or<font color="#E5E5E5"> even a small</font><font color="#CCCCCC"> websites like these</font>

94
00:04:50,740 --> 00:04:57,220
gorgeous<font color="#CCCCCC"> little website</font><font color="#E5E5E5"> with balloons</font>

95
00:04:52,390 --> 00:05:00,550
<font color="#E5E5E5">and butterflies regardless of the size</font>

96
00:04:57,220 --> 00:05:03,430
of the<font color="#CCCCCC"> application we write the question</font>

97
00:05:00,550 --> 00:05:05,730
is how can we<font color="#E5E5E5"> write it more secure but</font>

98
00:05:03,430 --> 00:05:08,670
where do<font color="#CCCCCC"> we even start</font>

99
00:05:05,730 --> 00:05:10,750
well a good starting point<font color="#E5E5E5"> is our</font>

100
00:05:08,670 --> 00:05:15,880
application<font color="#CCCCCC"> security verification</font>

101
00:05:10,750 --> 00:05:17,620
standard for short as years this

102
00:05:15,880 --> 00:05:19,450
<font color="#E5E5E5">document helps you to</font><font color="#CCCCCC"> choose the</font>

103
00:05:17,620 --> 00:05:22,960
<font color="#E5E5E5">appropriate level of security for</font><font color="#CCCCCC"> your</font>

104
00:05:19,450 --> 00:05:24,550
own application<font color="#CCCCCC"> where level 1 is the</font>

105
00:05:22,960 --> 00:05:27,849
minimum<font color="#CCCCCC"> level every application should</font>

106
00:05:24,550 --> 00:05:29,350
<font color="#E5E5E5">be</font><font color="#CCCCCC"> verified as level</font><font color="#E5E5E5"> 1 level 2 is for</font>

107
00:05:27,850 --> 00:05:32,140
those applications<font color="#CCCCCC"> that in case of a</font>

108
00:05:29,350 --> 00:05:34,030
data breach<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> it's going to</font><font color="#CCCCCC"> be</font>

109
00:05:32,140 --> 00:05:35,409
<font color="#CCCCCC">embarrassing it's going to create a</font>

110
00:05:34,030 --> 00:05:39,369
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> mess that</font><font color="#CCCCCC"> needs to be</font>

111
00:05:35,410 --> 00:05:42,280
cleaned up but it's<font color="#CCCCCC"> not</font><font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be the</font>

112
00:05:39,370 --> 00:05:44,320
end<font color="#E5E5E5"> of the world and</font><font color="#CCCCCC"> level 3 is for</font>

113
00:05:42,280 --> 00:05:47,080
those<font color="#E5E5E5"> applications that you really do</font>

114
00:05:44,320 --> 00:05:49,450
<font color="#CCCCCC">care about those applications that are</font>

115
00:05:47,080 --> 00:05:51,130
critical<font color="#CCCCCC"> to business and in case of a</font>

116
00:05:49,450 --> 00:05:53,890
data breach<font color="#E5E5E5"> well they're going to be</font>

117
00:05:51,130 --> 00:05:55,930
serious financial consequences<font color="#E5E5E5"> those</font>

118
00:05:53,890 --> 00:06:00,010
types of applications<font color="#CCCCCC"> is they must</font><font color="#E5E5E5"> be</font>

119
00:05:55,930 --> 00:06:02,980
<font color="#E5E5E5">very high</font><font color="#CCCCCC"> at level 3</font><font color="#E5E5E5"> and here is an</font>

120
00:06:00,010 --> 00:06:06,090
extract<font color="#CCCCCC"> of how the replication</font>

121
00:06:02,980 --> 00:06:08,980
requirements<font color="#E5E5E5"> will look</font><font color="#CCCCCC"> into ask ASVs</font>

122
00:06:06,090 --> 00:06:11,409
where each requirement<font color="#E5E5E5"> is</font><font color="#CCCCCC"> clearly</font><font color="#E5E5E5"> marked</font>

123
00:06:08,980 --> 00:06:14,890
<font color="#E5E5E5">if it applies to level 1 level 2</font><font color="#CCCCCC"> over</font>

124
00:06:11,410 --> 00:06:16,690
level 3<font color="#E5E5E5"> and I particularly choose the</font>

125
00:06:14,890 --> 00:06:21,520
requirements the cryptography

126
00:06:16,690 --> 00:06:24,490
requirements<font color="#E5E5E5"> we're at 7.50 7.6 it</font>

127
00:06:21,520 --> 00:06:28,090
actually says<font color="#CCCCCC"> that when your software</font>

128
00:06:24,490 --> 00:06:31,540
needs random numbers generators<font color="#E5E5E5"> then you</font>

129
00:06:28,090 --> 00:06:35,409
should use<font color="#E5E5E5"> the cryptography module</font>

130
00:06:31,540 --> 00:06:38,680
accrued random numbers generators so if

131
00:06:35,410 --> 00:06:41,500
the<font color="#E5E5E5"> verification requirements would have</font>

132
00:06:38,680 --> 00:06:43,090
<font color="#E5E5E5">been used in the case of the software</font>

133
00:06:41,500 --> 00:06:46,180
powering<font color="#E5E5E5"> the slope</font>

134
00:06:43,090 --> 00:06:55,599
is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> Spooner ability could have been</font>

135
00:06:46,180 --> 00:06:57,040
<font color="#E5E5E5">avoided so we can use</font><font color="#CCCCCC"> both ACS to choose</font>

136
00:06:55,600 --> 00:07:00,220
the<font color="#E5E5E5"> appropriate level of security for</font>

137
00:06:57,040 --> 00:07:03,580
<font color="#E5E5E5">our own application from their extract</font>

138
00:07:00,220 --> 00:07:07,600
<font color="#CCCCCC">requirements</font><font color="#E5E5E5"> and use those requirements</font>

139
00:07:03,580 --> 00:07:10,780
<font color="#CCCCCC">further to generate the test cases that</font>

140
00:07:07,600 --> 00:07:13,780
<font color="#E5E5E5">can help force to verify for security</font>

141
00:07:10,780 --> 00:07:17,590
early and<font color="#E5E5E5"> often and here here is our</font>

142
00:07:13,780 --> 00:07:19,570
first control very high force it is the

143
00:07:17,590 --> 00:07:22,929
early<font color="#E5E5E5"> and often and when I say early and</font>

144
00:07:19,570 --> 00:07:25,810
often we actually<font color="#CCCCCC"> mean throughout the</font>

145
00:07:22,930 --> 00:07:27,100
<font color="#E5E5E5">software development cycle where you</font><font color="#CCCCCC"> can</font>

146
00:07:25,810 --> 00:07:29,110
<font color="#CCCCCC">find from the time when you</font><font color="#E5E5E5"> actually</font>

147
00:07:27,100 --> 00:07:31,900
write<font color="#E5E5E5"> the code apart from the unity you</font>

148
00:07:29,110 --> 00:07:35,800
can also have further checks at<font color="#CCCCCC"> the code</font>

149
00:07:31,900 --> 00:07:37,659
review<font color="#E5E5E5"> point so let's go</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to the</font>

150
00:07:35,800 --> 00:07:40,330
software<font color="#CCCCCC"> that was powering</font><font color="#E5E5E5"> the slot</font>

151
00:07:37,660 --> 00:07:41,710
machines<font color="#E5E5E5"> we have used the</font><font color="#CCCCCC"> ACS</font><font color="#E5E5E5"> we</font>

152
00:07:40,330 --> 00:07:44,580
understand that we need<font color="#CCCCCC"> to use an</font>

153
00:07:41,710 --> 00:07:46,989
approved<font color="#E5E5E5"> algorithm one that one is</font>

154
00:07:44,580 --> 00:07:52,109
understand<font color="#E5E5E5"> the application</font><font color="#CCCCCC"> level that</font>

155
00:07:46,990 --> 00:07:52,110
can get into<font color="#CCCCCC"> the check review checklist</font>

156
00:07:52,770 --> 00:07:56,979
so now<font color="#CCCCCC"> suppose that</font><font color="#E5E5E5"> the developer</font><font color="#CCCCCC"> has</font>

157
00:07:55,270 --> 00:07:59,260
actually finished<font color="#CCCCCC"> to deliver this new</font>

158
00:07:56,979 --> 00:08:03,340
functionality<font color="#CCCCCC"> and it's</font><font color="#E5E5E5"> about Connecticut</font>

159
00:07:59,260 --> 00:08:07,690
at that point<font color="#E5E5E5"> extra security checks can</font>

160
00:08:03,340 --> 00:08:10,299
<font color="#CCCCCC">be done using the</font><font color="#E5E5E5"> pre</font><font color="#CCCCCC"> committee six here</font>

161
00:08:07,690 --> 00:08:12,330
you can<font color="#CCCCCC"> actually check to see if the</font>

162
00:08:10,300 --> 00:08:17,289
software<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is about to be committed</font>

163
00:08:12,330 --> 00:08:20,020
<font color="#E5E5E5">hasn't got passwords secret keys tokens</font>

164
00:08:17,289 --> 00:08:25,450
you can also add chicks for<font color="#E5E5E5"> duplicated</font>

165
00:08:20,020 --> 00:08:29,590
algorithms like<font color="#CCCCCC"> md5</font><font color="#E5E5E5"> and for dangerous</font>

166
00:08:25,450 --> 00:08:31,630
<font color="#E5E5E5">functions like a bar or exact</font><font color="#CCCCCC"> I actually</font>

167
00:08:29,590 --> 00:08:33,789
<font color="#E5E5E5">had a developer that kept committing</font>

168
00:08:31,630 --> 00:08:35,860
<font color="#E5E5E5">into the production</font><font color="#CCCCCC"> curve into the code</font>

169
00:08:33,789 --> 00:08:39,458
that<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be which gets delivered into</font>

170
00:08:35,860 --> 00:08:40,930
production bottom and printer<font color="#E5E5E5"> not only</font>

171
00:08:39,458 --> 00:08:45,699
does it create<font color="#CCCCCC"> bugs in the production</font>

172
00:08:40,929 --> 00:08:48,069
but also disclose information the way we

173
00:08:45,700 --> 00:08:51,010
<font color="#E5E5E5">thought it this one will actually add</font>

174
00:08:48,070 --> 00:08:54,540
those functions into<font color="#CCCCCC"> our list of</font>

175
00:08:51,010 --> 00:08:57,150
forbidden functions<font color="#CCCCCC"> at the pre</font><font color="#E5E5E5"> commit</font>

176
00:08:54,540 --> 00:08:59,920
point

177
00:08:57,150 --> 00:09:02,230
so now I suppose<font color="#CCCCCC"> that occurred it</font><font color="#E5E5E5"> has</font>

178
00:08:59,920 --> 00:09:04,140
been committed<font color="#E5E5E5"> it is</font><font color="#CCCCCC"> now into the main</font>

179
00:09:02,230 --> 00:09:07,000
<font color="#CCCCCC">development branch the branch</font><font color="#E5E5E5"> that is</font>

180
00:09:04,140 --> 00:09:09,730
going to be prepared<font color="#E5E5E5"> for delays at this</font>

181
00:09:07,000 --> 00:09:12,670
point you can<font color="#CCCCCC"> have apart</font><font color="#E5E5E5"> from the normal</font>

182
00:09:09,730 --> 00:09:16,030
regression<font color="#E5E5E5"> test you can also have the</font>

183
00:09:12,670 --> 00:09:18,040
security<font color="#E5E5E5"> checklist</font><font color="#CCCCCC"> and this is the point</font>

184
00:09:16,030 --> 00:09:21,400
where you<font color="#E5E5E5"> can actually use the test</font>

185
00:09:18,040 --> 00:09:24,189
<font color="#E5E5E5">generated from the</font><font color="#CCCCCC"> SDS</font><font color="#E5E5E5"> furthermore you</font>

186
00:09:21,400 --> 00:09:26,650
can<font color="#E5E5E5"> automate those for example using a</font>

187
00:09:24,190 --> 00:09:29,680
<font color="#CCCCCC">stuck in headless mode you can further</font>

188
00:09:26,650 --> 00:09:31,750
integrate those into your tools like

189
00:09:29,680 --> 00:09:33,609
<font color="#CCCCCC">drinking's</font><font color="#E5E5E5"> and make them part of your</font>

190
00:09:31,750 --> 00:09:38,350
<font color="#E5E5E5">continuous</font><font color="#CCCCCC"> integration and continuous</font>

191
00:09:33,610 --> 00:09:42,630
delivery so<font color="#CCCCCC"> control number</font><font color="#E5E5E5"> one helps you</font>

192
00:09:38,350 --> 00:09:42,630
from<font color="#E5E5E5"> the start not as an afterthought to</font>

193
00:09:43,800 --> 00:09:50,170
<font color="#CCCCCC">prevent all the</font><font color="#E5E5E5"> our top</font><font color="#CCCCCC"> ten risks</font><font color="#E5E5E5"> this</font>

194
00:09:47,980 --> 00:09:52,770
control<font color="#CCCCCC"> gives you a</font><font color="#E5E5E5"> very nice framework</font>

195
00:09:50,170 --> 00:09:57,069
where<font color="#E5E5E5"> rather than starting with security</font>

196
00:09:52,770 --> 00:09:58,720
<font color="#E5E5E5">at the end as an afterthought you start</font>

197
00:09:57,070 --> 00:10:00,820
with the requirements from<font color="#E5E5E5"> the beginning</font>

198
00:09:58,720 --> 00:10:03,450
and instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> testing for</font><font color="#E5E5E5"> security at</font>

199
00:10:00,820 --> 00:10:06,760
the end of a project<font color="#E5E5E5"> or project phase</font>

200
00:10:03,450 --> 00:10:08,140
you automate testing and make it part of

201
00:10:06,760 --> 00:10:10,900
your continuous integration<font color="#E5E5E5"> and</font>

202
00:10:08,140 --> 00:10:15,420
<font color="#CCCCCC">continuous delivery so great so let's</font>

203
00:10:10,900 --> 00:10:17,470
see what<font color="#E5E5E5"> else can</font><font color="#CCCCCC"> we do SQL injection</font>

204
00:10:15,420 --> 00:10:19,229
2017 and there are plenty<font color="#E5E5E5"> out there</font>

205
00:10:17,470 --> 00:10:22,330
<font color="#E5E5E5">instruction</font>

206
00:10:19,230 --> 00:10:26,170
the problem<font color="#E5E5E5"> with SQL injection is that</font>

207
00:10:22,330 --> 00:10:28,140
untrusted input is executed as part of

208
00:10:26,170 --> 00:10:31,199
the SQL<font color="#E5E5E5"> command</font><font color="#CCCCCC"> that depends for this</font>

209
00:10:28,140 --> 00:10:33,970
control<font color="#E5E5E5"> number to</font><font color="#CCCCCC"> parametrize queries</font>

210
00:10:31,200 --> 00:10:36,040
the parametrized queries prevent

211
00:10:33,970 --> 00:10:40,510
untrusted input from being interpreted

212
00:10:36,040 --> 00:10:43,930
as part of<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> kill command so let's see</font>

213
00:10:40,510 --> 00:10:47,800
how<font color="#E5E5E5"> he</font><font color="#CCCCCC"> should be so and this is</font><font color="#E5E5E5"> what is</font>

214
00:10:43,930 --> 00:10:49,510
<font color="#E5E5E5">for dotnet yes we use string format we</font>

215
00:10:47,800 --> 00:10:52,420
separate the<font color="#E5E5E5"> inputs from</font><font color="#CCCCCC"> the command and</font>

216
00:10:49,510 --> 00:10:53,710
my favorite to the<font color="#E5E5E5"> Java how many of you</font>

217
00:10:52,420 --> 00:10:56,770
think that<font color="#E5E5E5"> this is the correct way to</font>

218
00:10:53,710 --> 00:10:58,900
date<font color="#E5E5E5"> okay I'm</font><font color="#CCCCCC"> just checking to</font><font color="#E5E5E5"> see that</font>

219
00:10:56,770 --> 00:11:00,660
<font color="#E5E5E5">everybody is still awake of the lovely</font>

220
00:10:58,900 --> 00:11:03,810
lunch

221
00:11:00,660 --> 00:11:07,930
this<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> the correct</font><font color="#E5E5E5"> way to do it and</font>

222
00:11:03,810 --> 00:11:09,719
the<font color="#E5E5E5"> underlying issue here is at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> end</font>

223
00:11:07,930 --> 00:11:12,449
of the day you end<font color="#E5E5E5"> up with one string</font>

224
00:11:09,720 --> 00:11:17,730
the string replace the underlying issue

225
00:11:12,449 --> 00:11:20,430
is<font color="#E5E5E5"> that the one string contains both</font><font color="#CCCCCC"> the</font>

226
00:11:17,730 --> 00:11:23,279
client and the<font color="#CCCCCC"> input and this guilt</font>

227
00:11:20,430 --> 00:11:25,109
<font color="#E5E5E5">artha cannot differentiate</font><font color="#CCCCCC"> between</font><font color="#E5E5E5"> a</font>

228
00:11:23,279 --> 00:11:28,740
button input<font color="#E5E5E5"> and what is the actual</font>

229
00:11:25,110 --> 00:11:32,610
command the correct way to read<font color="#E5E5E5"> is to</font>

230
00:11:28,740 --> 00:11:34,500
separate the<font color="#CCCCCC"> two and we do this by</font>

231
00:11:32,610 --> 00:11:36,689
writing this kill command<font color="#E5E5E5"> and having</font>

232
00:11:34,500 --> 00:11:39,569
some placeholders<font color="#E5E5E5"> and then using</font>

233
00:11:36,689 --> 00:11:42,089
specific commands to bind<font color="#CCCCCC"> those</font>

234
00:11:39,569 --> 00:11:44,128
variables to<font color="#E5E5E5"> the placeholders this is a</font>

235
00:11:42,089 --> 00:11:45,810
very nice way to tell the obscure parts

236
00:11:44,129 --> 00:11:48,079
by the<font color="#E5E5E5"> way here is</font><font color="#CCCCCC"> my Cologne and</font>

237
00:11:45,810 --> 00:11:50,729
<font color="#CCCCCC">there's some place for</font><font color="#E5E5E5"> those in it and</font>

238
00:11:48,079 --> 00:11:55,800
here are the variables to<font color="#CCCCCC"> use for those</font>

239
00:11:50,730 --> 00:11:59,220
placeholders<font color="#E5E5E5"> in</font><font color="#CCCCCC"> this way the</font><font color="#E5E5E5"> SQL parser</font>

240
00:11:55,800 --> 00:12:01,859
knows what what<font color="#E5E5E5"> are the variables</font><font color="#CCCCCC"> and</font>

241
00:11:59,220 --> 00:12:04,680
from that point on<font color="#CCCCCC"> its treats them like</font>

242
00:12:01,860 --> 00:12:06,480
simple<font color="#CCCCCC"> strings so the actual difference</font>

243
00:12:04,680 --> 00:12:10,589
happens<font color="#E5E5E5"> at least your parser level and</font>

244
00:12:06,480 --> 00:12:12,360
for<font color="#E5E5E5"> this reason control number two this</font>

245
00:12:10,589 --> 00:12:15,389
controller parameters<font color="#E5E5E5"> queries is the</font>

246
00:12:12,360 --> 00:12:17,100
best defense against<font color="#CCCCCC"> mr. injection so</font>

247
00:12:15,389 --> 00:12:18,930
using control number two to parametrize

248
00:12:17,100 --> 00:12:21,569
queries<font color="#E5E5E5"> we can prevent injection</font>

249
00:12:18,930 --> 00:12:24,209
most types anyway and I'm going to go

250
00:12:21,569 --> 00:12:27,209
further in this presentation<font color="#E5E5E5"> into an</font>

251
00:12:24,209 --> 00:12:31,469
<font color="#E5E5E5">example where this</font><font color="#CCCCCC"> control cannot</font>

252
00:12:27,209 --> 00:12:34,800
prevent great<font color="#CCCCCC"> the next one is a</font>

253
00:12:31,470 --> 00:12:36,870
cross-site scripting<font color="#E5E5E5"> and here is just a</font>

254
00:12:34,800 --> 00:12:40,139
<font color="#E5E5E5">simple example of</font><font color="#CCCCCC"> inject</font><font color="#E5E5E5"> and it of</font>

255
00:12:36,870 --> 00:12:45,689
injections<font color="#E5E5E5"> payload now the coolest</font>

256
00:12:40,139 --> 00:12:47,639
keeping<font color="#CCCCCC"> are it's capable</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> actually</font>

257
00:12:45,689 --> 00:12:52,319
from a simple process<font color="#CCCCCC"> shipping to bring</font>

258
00:12:47,639 --> 00:12:54,930
down<font color="#E5E5E5"> systems servers within networks and</font>

259
00:12:52,319 --> 00:12:57,479
it was a case<font color="#E5E5E5"> like</font><font color="#CCCCCC"> this in</font><font color="#E5E5E5"> 2010 where</font>

260
00:12:54,930 --> 00:13:01,969
from a simple process scripting servers

261
00:12:57,480 --> 00:13:04,559
<font color="#E5E5E5">within the Apache</font><font color="#CCCCCC"> Network war shuts down</font>

262
00:13:01,970 --> 00:13:07,470
the difference<font color="#CCCCCC"> four days is control</font>

263
00:13:04,559 --> 00:13:12,120
<font color="#E5E5E5">number three</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> code your output encoded</font>

264
00:13:07,470 --> 00:13:15,779
before sending it to<font color="#CCCCCC"> the person it's</font>

265
00:13:12,120 --> 00:13:17,970
also important to consider contextual

266
00:13:15,779 --> 00:13:19,860
including and<font color="#E5E5E5"> discipline</font><font color="#CCCCCC"> what this means</font>

267
00:13:17,970 --> 00:13:21,870
is that you applied the right<font color="#E5E5E5"> methods</font>

268
00:13:19,860 --> 00:13:23,030
for the right contact<font color="#CCCCCC"> where your dynamic</font>

269
00:13:21,870 --> 00:13:26,270
<font color="#CCCCCC">variable is</font>

270
00:13:23,030 --> 00:13:28,730
so for your for<font color="#E5E5E5"> example if your dynamic</font>

271
00:13:26,270 --> 00:13:31,340
data is into an HTML<font color="#E5E5E5"> then you're going</font>

272
00:13:28,730 --> 00:13:33,980
to<font color="#E5E5E5"> using code for HTML if your dynamic</font>

273
00:13:31,340 --> 00:13:35,750
data is placed into<font color="#E5E5E5"> JavaScript content</font>

274
00:13:33,980 --> 00:13:40,330
then you're going<font color="#CCCCCC"> to use in code for</font>

275
00:13:35,750 --> 00:13:43,700
JavaScript context<font color="#E5E5E5"> this can be quite</font>

276
00:13:40,330 --> 00:13:48,170
complex in<font color="#E5E5E5"> overall overwhelming for a</font>

277
00:13:43,700 --> 00:13:49,790
developer to<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do correctly so the best</font>

278
00:13:48,170 --> 00:13:52,160
way<font color="#E5E5E5"> is to</font><font color="#CCCCCC"> use a</font><font color="#E5E5E5"> library that has been</font>

279
00:13:49,790 --> 00:13:53,569
already<font color="#E5E5E5"> designed for this purpose</font><font color="#CCCCCC"> in the</font>

280
00:13:52,160 --> 00:13:55,130
case<font color="#E5E5E5"> of</font><font color="#CCCCCC"> Java</font><font color="#E5E5E5"> applications the base</font>

281
00:13:53,570 --> 00:13:57,350
<font color="#CCCCCC">library out there is the earth Java</font>

282
00:13:55,130 --> 00:13:59,270
encoder<font color="#E5E5E5"> it's a simple has no</font>

283
00:13:57,350 --> 00:14:02,900
dependencies<font color="#E5E5E5"> and it is regularly updated</font>

284
00:13:59,270 --> 00:14:05,090
<font color="#CCCCCC">in the case of dot</font><font color="#E5E5E5"> an application the</font>

285
00:14:02,900 --> 00:14:08,900
best<font color="#E5E5E5"> library out there is the antique</font>

286
00:14:05,090 --> 00:14:12,050
<font color="#E5E5E5">restricting the library now sometimes</font>

287
00:14:08,900 --> 00:14:15,050
I'm told that the dotnet<font color="#E5E5E5"> framework have</font>

288
00:14:12,050 --> 00:14:17,599
already different coding which is<font color="#E5E5E5"> sure</font>

289
00:14:15,050 --> 00:14:19,130
it has but<font color="#E5E5E5"> it is a difference between</font>

290
00:14:17,600 --> 00:14:20,840
the different coding of<font color="#E5E5E5"> the.net</font>

291
00:14:19,130 --> 00:14:22,700
framework and the anti cross-site

292
00:14:20,840 --> 00:14:26,000
scripting library<font color="#E5E5E5"> how many of you knows</font>

293
00:14:22,700 --> 00:14:28,010
the difference<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the main</font><font color="#CCCCCC"> difference</font>

294
00:14:26,000 --> 00:14:30,950
<font color="#E5E5E5">between the two</font><font color="#CCCCCC"> types of</font><font color="#E5E5E5"> encoding is</font>

295
00:14:28,010 --> 00:14:32,330
that the different clothing<font color="#E5E5E5"> is based on</font>

296
00:14:30,950 --> 00:14:35,030
blacklist<font color="#E5E5E5"> and as security professionals</font>

297
00:14:32,330 --> 00:14:38,839
<font color="#CCCCCC">we don't like blacklist</font><font color="#E5E5E5"> because it is</font>

298
00:14:35,030 --> 00:14:42,800
<font color="#E5E5E5">possible to bypass</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> bypass them using</font>

299
00:14:38,839 --> 00:14:44,720
canonical<font color="#E5E5E5"> representation attacks the</font>

300
00:14:42,800 --> 00:14:46,760
<font color="#CCCCCC">antico</font><font color="#E5E5E5"> site scripting library is based</font>

301
00:14:44,720 --> 00:14:50,750
on whitelist what this means it has<font color="#CCCCCC"> a</font>

302
00:14:46,760 --> 00:14:53,600
widely defined of characters anything

303
00:14:50,750 --> 00:14:56,200
outside that<font color="#E5E5E5"> list is automatically</font>

304
00:14:53,600 --> 00:14:59,660
<font color="#CCCCCC">included for this reason</font><font color="#E5E5E5"> from version</font>

305
00:14:56,200 --> 00:15:00,890
<font color="#E5E5E5">4.5 the article says to think is pocket</font>

306
00:14:59,660 --> 00:15:02,480
part of the framework

307
00:15:00,890 --> 00:15:05,060
you still need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> change your web</font>

308
00:15:02,480 --> 00:15:09,620
<font color="#E5E5E5">content to have it in place</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it is</font>

309
00:15:05,060 --> 00:15:12,170
part of the framework<font color="#E5E5E5"> by the home so</font>

310
00:15:09,620 --> 00:15:15,080
conditionally including all your<font color="#E5E5E5"> output</font>

311
00:15:12,170 --> 00:15:18,890
prevents injection and process scripting

312
00:15:15,080 --> 00:15:21,500
what about the input for this we have

313
00:15:18,890 --> 00:15:24,980
<font color="#CCCCCC">Control Number 4 validate all the input</font>

314
00:15:21,500 --> 00:15:27,440
and when we refer to<font color="#E5E5E5"> all them but we</font>

315
00:15:24,980 --> 00:15:30,110
<font color="#E5E5E5">referred</font><font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> only later that hit</font>

316
00:15:27,440 --> 00:15:33,140
our enters the application and this can

317
00:15:30,110 --> 00:15:36,730
be from<font color="#CCCCCC"> variables</font><font color="#E5E5E5"> that comes from</font>

318
00:15:33,140 --> 00:15:40,060
posting it including hidden<font color="#CCCCCC"> field</font>

319
00:15:36,730 --> 00:15:42,920
file uploads<font color="#E5E5E5"> HTTP headers cookies</font>

320
00:15:40,060 --> 00:15:46,939
including data<font color="#E5E5E5"> from the database because</font>

321
00:15:42,920 --> 00:15:49,339
when we<font color="#E5E5E5"> validate also this is data that</font>

322
00:15:46,940 --> 00:15:51,890
comes from<font color="#E5E5E5"> the database we can prevent</font>

323
00:15:49,340 --> 00:15:53,630
for example<font color="#E5E5E5"> second</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> SQL injection</font>

324
00:15:51,890 --> 00:15:58,930
how many of you have heard of second

325
00:15:53,630 --> 00:16:01,700
<font color="#E5E5E5">order is your injection here great for</font>

326
00:15:58,930 --> 00:16:03,589
the most majority of you that haven't

327
00:16:01,700 --> 00:16:06,530
<font color="#E5E5E5">heard I'm</font><font color="#CCCCCC"> going to go through a</font><font color="#E5E5E5"> very</font>

328
00:16:03,590 --> 00:16:08,300
simple<font color="#E5E5E5"> example</font><font color="#CCCCCC"> to take</font><font color="#E5E5E5"> an order SQL</font>

329
00:16:06,530 --> 00:16:11,990
injection works when the injection

330
00:16:08,300 --> 00:16:15,410
payload stays dormant in the database

331
00:16:11,990 --> 00:16:16,790
and therefore it actually<font color="#E5E5E5"> occurs when it</font>

332
00:16:15,410 --> 00:16:18,920
is used in other<font color="#CCCCCC"> parts of the software</font>

333
00:16:16,790 --> 00:16:21,589
<font color="#E5E5E5">so now let's suppose that we have a</font>

334
00:16:18,920 --> 00:16:23,810
simple<font color="#E5E5E5"> form and we register a user we</font>

335
00:16:21,590 --> 00:16:28,750
already have a user John but now<font color="#E5E5E5"> they</font>

336
00:16:23,810 --> 00:16:28,750
<font color="#E5E5E5">just another user John single</font><font color="#CCCCCC"> third - -</font>

337
00:16:28,870 --> 00:16:34,490
this value is going<font color="#CCCCCC"> to become the SQL</font>

338
00:16:32,300 --> 00:16:36,560
injection payload when<font color="#CCCCCC"> use in other</font>

339
00:16:34,490 --> 00:16:38,660
parts of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> software</font><font color="#E5E5E5"> so let's suppose</font>

340
00:16:36,560 --> 00:16:42,829
<font color="#CCCCCC">that we</font><font color="#E5E5E5"> do for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> change the</font>

341
00:16:38,660 --> 00:16:45,560
password and this<font color="#E5E5E5"> clear injection for</font>

342
00:16:42,830 --> 00:16:47,060
changing the password<font color="#E5E5E5"> it's going to</font>

343
00:16:45,560 --> 00:16:51,439
<font color="#CCCCCC">become</font><font color="#E5E5E5"> from changing the</font><font color="#CCCCCC"> Baskerville</font>

344
00:16:47,060 --> 00:16:53,630
from<font color="#CCCCCC"> there for</font><font color="#E5E5E5"> the initial user to</font>

345
00:16:51,440 --> 00:16:58,130
<font color="#E5E5E5">actually changing the password for a</font>

346
00:16:53,630 --> 00:17:00,650
different user<font color="#E5E5E5"> this</font><font color="#CCCCCC"> way we can say that</font>

347
00:16:58,130 --> 00:17:03,080
we have<font color="#E5E5E5"> successfully change the password</font>

348
00:17:00,650 --> 00:17:05,060
for another<font color="#E5E5E5"> modified</font><font color="#CCCCCC"> data for another</font>

349
00:17:03,080 --> 00:17:07,160
user<font color="#E5E5E5"> and we have performed that they can</font>

350
00:17:05,060 --> 00:17:09,129
order SQL injection the defense against

351
00:17:07,160 --> 00:17:11,840
<font color="#CCCCCC">this is developing the data from that</font>

352
00:17:09,130 --> 00:17:13,790
<font color="#CCCCCC">comes from your</font><font color="#E5E5E5"> database as well so</font>

353
00:17:11,839 --> 00:17:15,560
validating<font color="#E5E5E5"> all the input including the</font>

354
00:17:13,790 --> 00:17:18,440
one that<font color="#E5E5E5"> comes</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the database can</font>

355
00:17:15,560 --> 00:17:22,399
prevent injections<font color="#CCCCCC"> close exiting and</font>

356
00:17:18,440 --> 00:17:24,200
unvalidated<font color="#CCCCCC"> redirect import so let's go</font>

357
00:17:22,400 --> 00:17:26,240
<font color="#CCCCCC">back to our gorgeous websites and let's</font>

358
00:17:24,200 --> 00:17:28,730
see<font color="#E5E5E5"> right</font><font color="#CCCCCC"> now which are</font><font color="#E5E5E5"> the controls</font>

359
00:17:26,240 --> 00:17:32,330
that<font color="#E5E5E5"> we have put in place so we have a</font>

360
00:17:28,730 --> 00:17:34,760
way<font color="#E5E5E5"> to verify</font><font color="#CCCCCC"> for security early</font><font color="#E5E5E5"> and</font>

361
00:17:32,330 --> 00:17:36,889
often<font color="#CCCCCC"> with prompt tries the quiz</font><font color="#E5E5E5"> by</font>

362
00:17:34,760 --> 00:17:39,470
binding the variables we can't actually

363
00:17:36,890 --> 00:17:42,140
encode all the output and validate all

364
00:17:39,470 --> 00:17:45,470
the input<font color="#E5E5E5"> including</font><font color="#CCCCCC"> the one that comes</font>

365
00:17:42,140 --> 00:17:48,890
<font color="#E5E5E5">from the database so let's see what else</font>

366
00:17:45,470 --> 00:17:50,260
we<font color="#CCCCCC"> can do our websites</font><font color="#E5E5E5"> like many</font>

367
00:17:48,890 --> 00:17:54,580
applications out<font color="#E5E5E5"> there</font>

368
00:17:50,260 --> 00:17:55,990
has a session<font color="#CCCCCC"> that is available to</font>

369
00:17:54,580 --> 00:17:58,600
everybody<font color="#E5E5E5"> and the session that</font><font color="#CCCCCC"> is</font>

370
00:17:55,990 --> 00:18:01,120
<font color="#E5E5E5">restricted</font><font color="#CCCCCC"> to certain users for</font><font color="#E5E5E5"> this we</font>

371
00:17:58,600 --> 00:18:02,980
have<font color="#CCCCCC"> Control Number five</font><font color="#E5E5E5"> identity and</font>

372
00:18:01,120 --> 00:18:04,929
authentication controls<font color="#E5E5E5"> now when it</font>

373
00:18:02,980 --> 00:18:07,030
comes<font color="#E5E5E5"> to authentication this can be a</font>

374
00:18:04,930 --> 00:18:09,370
<font color="#CCCCCC">complex security</font><font color="#E5E5E5"> control in this session</font>

375
00:18:07,030 --> 00:18:12,420
<font color="#E5E5E5">I'm just going to go</font><font color="#CCCCCC"> through some of the</font>

376
00:18:09,370 --> 00:18:14,919
best<font color="#E5E5E5"> practices</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> for example</font>

377
00:18:12,420 --> 00:18:16,600
implement a secure<font color="#CCCCCC"> password storage is</font>

378
00:18:14,920 --> 00:18:17,950
multi-factor authentication having

379
00:18:16,600 --> 00:18:20,350
<font color="#E5E5E5">placed a secure password recovery</font>

380
00:18:17,950 --> 00:18:22,810
mechanism and<font color="#E5E5E5"> transmitted any sensitive</font>

381
00:18:20,350 --> 00:18:24,820
<font color="#CCCCCC">data</font><font color="#E5E5E5"> that TLS ideally won't bring</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you</font>

382
00:18:22,810 --> 00:18:26,679
apart from<font color="#E5E5E5"> that and it's also important</font>

383
00:18:24,820 --> 00:18:29,530
<font color="#CCCCCC">to have</font><font color="#E5E5E5"> in place</font><font color="#CCCCCC"> well-designed</font>

384
00:18:26,680 --> 00:18:31,180
error messages next I'm going to<font color="#E5E5E5"> go a</font>

385
00:18:29,530 --> 00:18:34,200
little bit more<font color="#E5E5E5"> detail for each of these</font>

386
00:18:31,180 --> 00:18:36,460
<font color="#E5E5E5">now when it comes to password storage</font>

387
00:18:34,200 --> 00:18:38,320
we want to make it as<font color="#CCCCCC"> difficult as</font>

388
00:18:36,460 --> 00:18:41,620
<font color="#E5E5E5">possible for the attacker that in case</font>

389
00:18:38,320 --> 00:18:43,120
that the database is<font color="#E5E5E5"> leaked it's</font>

390
00:18:41,620 --> 00:18:46,719
<font color="#E5E5E5">difficult for them</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get the</font><font color="#CCCCCC"> actual</font>

391
00:18:43,120 --> 00:18:48,879
password<font color="#E5E5E5"> it's important to use strong</font>

392
00:18:46,720 --> 00:18:51,000
cryptographic algorithms and the ones

393
00:18:48,880 --> 00:18:52,720
<font color="#E5E5E5">that are recommended out there are best</font>

394
00:18:51,000 --> 00:18:57,760
password-based key derivation function

395
00:18:52,720 --> 00:18:59,500
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be Krypton a script now also</font><font color="#E5E5E5"> when it</font>

396
00:18:57,760 --> 00:19:01,900
comes<font color="#CCCCCC"> to the actual password</font><font color="#E5E5E5"> the latest</font>

397
00:18:59,500 --> 00:19:05,800
NIST guidelines which are at the moment

398
00:19:01,900 --> 00:19:07,180
<font color="#CCCCCC">in draft mode</font><font color="#E5E5E5"> as of April 2017 recommend</font>

399
00:19:05,800 --> 00:19:10,330
to<font color="#E5E5E5"> have a minimum of eight characters</font>

400
00:19:07,180 --> 00:19:15,880
<font color="#E5E5E5">and it's important to actually use all</font>

401
00:19:10,330 --> 00:19:18,159
the characters including<font color="#E5E5E5"> spaces one</font>

402
00:19:15,880 --> 00:19:20,380
thing<font color="#E5E5E5"> that you need to be aware is about</font>

403
00:19:18,160 --> 00:19:22,660
the maximum<font color="#CCCCCC"> length of the password now</font>

404
00:19:20,380 --> 00:19:24,540
in the password<font color="#E5E5E5"> is way too long and</font>

405
00:19:22,660 --> 00:19:26,320
there is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> risk of</font><font color="#CCCCCC"> denial-of-service</font>

406
00:19:24,540 --> 00:19:29,350
<font color="#E5E5E5">apart from that one there is some</font>

407
00:19:26,320 --> 00:19:31,090
<font color="#E5E5E5">certain algorithms like</font><font color="#CCCCCC"> liquid which</font>

408
00:19:29,350 --> 00:19:34,899
automatically truncates

409
00:19:31,090 --> 00:19:36,909
anything that is over 72 bytes<font color="#E5E5E5"> I did it</font>

410
00:19:34,900 --> 00:19:42,430
in this<font color="#CCCCCC"> case you would use</font><font color="#E5E5E5"> a modern hash</font>

411
00:19:36,910 --> 00:19:44,890
like sha-512<font color="#CCCCCC"> because what is does it</font>

412
00:19:42,430 --> 00:19:47,860
actually<font color="#E5E5E5"> prevents dinner offset of</font>

413
00:19:44,890 --> 00:19:51,100
service and<font color="#E5E5E5"> also solves the problem of</font>

414
00:19:47,860 --> 00:19:53,080
truncation<font color="#E5E5E5"> so if we</font><font color="#CCCCCC"> are to recap when it</font>

415
00:19:51,100 --> 00:19:55,090
comes to a secure<font color="#CCCCCC"> password storage you</font>

416
00:19:53,080 --> 00:19:57,220
should use a modern shot to protect

417
00:19:55,090 --> 00:20:00,010
<font color="#E5E5E5">against the amount of service or</font>

418
00:19:57,220 --> 00:20:02,830
truncation<font color="#E5E5E5"> you should use a user</font>

419
00:20:00,010 --> 00:20:04,210
specific salt strong cryptographic

420
00:20:02,830 --> 00:20:06,250
algorithms

421
00:20:04,210 --> 00:20:08,890
or like for<font color="#E5E5E5"> example password-based key</font>

422
00:20:06,250 --> 00:20:12,100
derivation function to<font color="#CCCCCC"> Victoria script</font>

423
00:20:08,890 --> 00:20:13,210
<font color="#E5E5E5">and a second factor ideally now when it</font>

424
00:20:12,100 --> 00:20:16,719
comes<font color="#E5E5E5"> to the second factor</font>

425
00:20:13,210 --> 00:20:19,870
authentication<font color="#CCCCCC"> it should be either a</font>

426
00:20:16,720 --> 00:20:21,790
dedicated<font color="#E5E5E5"> app or an action of key it's</font>

427
00:20:19,870 --> 00:20:25,149
worth noting that the latest<font color="#CCCCCC"> guidelines</font>

428
00:20:21,790 --> 00:20:26,500
from<font color="#E5E5E5"> this actually do not recommend SMS</font>

429
00:20:25,150 --> 00:20:32,200
<font color="#CCCCCC">as a second</font><font color="#E5E5E5"> factor and they actually</font>

430
00:20:26,500 --> 00:20:34,870
<font color="#E5E5E5">plan to ban it but if we implement a</font>

431
00:20:32,200 --> 00:20:38,770
secure password<font color="#CCCCCC"> storage it is</font><font color="#E5E5E5"> important</font>

432
00:20:34,870 --> 00:20:40,629
to<font color="#E5E5E5"> be consistent and it's so free for</font>

433
00:20:38,770 --> 00:20:42,070
the entire<font color="#CCCCCC"> software</font><font color="#E5E5E5"> and this is an</font>

434
00:20:40,630 --> 00:20:44,440
example from Ashley Madison website

435
00:20:42,070 --> 00:20:47,679
where they actually have used<font color="#E5E5E5"> the pretty</font>

436
00:20:44,440 --> 00:20:51,460
good<font color="#E5E5E5"> password click cryptographic</font>

437
00:20:47,680 --> 00:20:55,090
algorithm<font color="#CCCCCC"> decrypt but what they did next</font>

438
00:20:51,460 --> 00:20:57,790
was at the same password<font color="#CCCCCC"> that the users</font>

439
00:20:55,090 --> 00:21:00,490
would enter was used to create<font color="#E5E5E5"> a fast</font>

440
00:20:57,790 --> 00:21:03,580
<font color="#E5E5E5">logging key and that was sort using the</font>

441
00:21:00,490 --> 00:21:06,610
deprecated<font color="#E5E5E5"> md5 one</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> was understood</font>

442
00:21:03,580 --> 00:21:10,090
<font color="#CCCCCC">it was very easy for the the attackers</font>

443
00:21:06,610 --> 00:21:12,370
<font color="#E5E5E5">to crack this password about</font><font color="#CCCCCC"> eleven</font>

444
00:21:10,090 --> 00:21:15,310
million passwords were cracked were

445
00:21:12,370 --> 00:21:18,969
disclosed<font color="#E5E5E5"> due to this flaw in their</font>

446
00:21:15,310 --> 00:21:22,629
software<font color="#E5E5E5"> now when it comes to</font><font color="#CCCCCC"> a forgot</font>

447
00:21:18,970 --> 00:21:25,660
password<font color="#CCCCCC"> a good design workflow will ask</font>

448
00:21:22,630 --> 00:21:28,600
some security questions then we'll send

449
00:21:25,660 --> 00:21:31,300
a user generated token will verify the

450
00:21:28,600 --> 00:21:32,980
token within the same<font color="#E5E5E5"> session and allow</font>

451
00:21:31,300 --> 00:21:35,230
the<font color="#E5E5E5"> user to change the password this</font>

452
00:21:32,980 --> 00:21:37,180
might not be<font color="#E5E5E5"> the perfect workflow but it</font>

453
00:21:35,230 --> 00:21:38,770
is a multi-factor one because first are

454
00:21:37,180 --> 00:21:41,770
some security<font color="#CCCCCC"> questions</font><font color="#E5E5E5"> something you</font>

455
00:21:38,770 --> 00:21:44,830
know and then send<font color="#E5E5E5"> the user a token to</font><font color="#CCCCCC"> a</font>

456
00:21:41,770 --> 00:21:47,080
device something<font color="#E5E5E5"> you own also error</font>

457
00:21:44,830 --> 00:21:50,020
messages are very important<font color="#E5E5E5"> so it is</font>

458
00:21:47,080 --> 00:21:51,939
important to have in place<font color="#E5E5E5"> well design</font>

459
00:21:50,020 --> 00:21:56,050
error messages that<font color="#E5E5E5"> doesn't disclose</font>

460
00:21:51,940 --> 00:21:58,030
information about your users<font color="#CCCCCC"> and here is</font>

461
00:21:56,050 --> 00:22:00,490
an example<font color="#CCCCCC"> of how not to</font><font color="#E5E5E5"> date and you</font>

462
00:21:58,030 --> 00:22:03,450
can find like this plenty<font color="#CCCCCC"> out there on</font>

463
00:22:00,490 --> 00:22:07,270
the<font color="#CCCCCC"> internet</font><font color="#E5E5E5"> if you look where the</font>

464
00:22:03,450 --> 00:22:08,770
<font color="#CCCCCC">visitor is actually presented with a</font>

465
00:22:07,270 --> 00:22:10,600
message if the user exists in the

466
00:22:08,770 --> 00:22:14,740
<font color="#E5E5E5">database and a different message if the</font>

467
00:22:10,600 --> 00:22:17,659
user does<font color="#CCCCCC"> not exist in the database so</font>

468
00:22:14,740 --> 00:22:20,840
the correct way<font color="#CCCCCC"> to do is</font><font color="#E5E5E5"> to actually use</font>

469
00:22:17,660 --> 00:22:25,670
the same HTTP header<font color="#E5E5E5"> 200 okay and same</font>

470
00:22:20,840 --> 00:22:27,830
<font color="#E5E5E5">HTML message in both scenarios if</font><font color="#CCCCCC"> the</font>

471
00:22:25,670 --> 00:22:30,470
<font color="#CCCCCC">user exists and if the user does not</font>

472
00:22:27,830 --> 00:22:32,300
exist in<font color="#CCCCCC"> your</font><font color="#E5E5E5"> database so like I</font>

473
00:22:30,470 --> 00:22:34,190
mentioned<font color="#E5E5E5"> the subject of authentication</font>

474
00:22:32,300 --> 00:22:38,210
<font color="#E5E5E5">is a complex one</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> session</font><font color="#CCCCCC"> I've</font>

475
00:22:34,190 --> 00:22:40,490
just been through some points<font color="#E5E5E5"> like for</font>

476
00:22:38,210 --> 00:22:44,330
example<font color="#E5E5E5"> how to make it harder for the</font>

477
00:22:40,490 --> 00:22:48,140
attacker with a strong password storage

478
00:22:44,330 --> 00:22:50,120
<font color="#CCCCCC">how to protect the identities of users</font>

479
00:22:48,140 --> 00:22:53,450
with a<font color="#E5E5E5"> well-designed password recovery</font>

480
00:22:50,120 --> 00:22:55,820
mechanism and error messages<font color="#CCCCCC"> now these</font>

481
00:22:53,450 --> 00:22:59,330
are<font color="#E5E5E5"> not the</font><font color="#CCCCCC"> only controls</font><font color="#E5E5E5"> but it's a</font>

482
00:22:55,820 --> 00:23:01,000
good way to prevent<font color="#CCCCCC"> the broken</font>

483
00:22:59,330 --> 00:23:03,439
authentication and session<font color="#E5E5E5"> management</font>

484
00:23:01,000 --> 00:23:05,720
great so let's see by now<font color="#CCCCCC"> I have this</font>

485
00:23:03,440 --> 00:23:09,410
class<font color="#E5E5E5"> about who is accessing the page</font>

486
00:23:05,720 --> 00:23:10,790
what<font color="#CCCCCC"> about what pages are</font><font color="#E5E5E5"> our access for</font>

487
00:23:09,410 --> 00:23:14,180
this<font color="#CCCCCC"> may</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> Control Number six</font>

488
00:23:10,790 --> 00:23:15,950
<font color="#E5E5E5">implement appropriate</font><font color="#CCCCCC"> access controls</font>

489
00:23:14,180 --> 00:23:18,470
now when it<font color="#E5E5E5"> comes to access controls</font>

490
00:23:15,950 --> 00:23:20,750
<font color="#E5E5E5">this can be complex security controls in</font>

491
00:23:18,470 --> 00:23:22,970
this<font color="#E5E5E5"> session I'm just saying the ideal</font>

492
00:23:20,750 --> 00:23:25,160
way<font color="#E5E5E5"> to deal</font><font color="#CCCCCC"> with this because</font><font color="#E5E5E5"> of their</font>

493
00:23:22,970 --> 00:23:27,490
complexity is actually<font color="#E5E5E5"> bringing and use</font>

494
00:23:25,160 --> 00:23:32,240
a framework that is<font color="#E5E5E5"> already designed</font>

495
00:23:27,490 --> 00:23:34,340
with these<font color="#E5E5E5"> principles in mind and using</font>

496
00:23:32,240 --> 00:23:37,310
a framework and using it correctly<font color="#E5E5E5"> can</font>

497
00:23:34,340 --> 00:23:39,379
<font color="#E5E5E5">help you to prevent</font><font color="#CCCCCC"> unsecure</font><font color="#E5E5E5"> direct</font>

498
00:23:37,310 --> 00:23:42,050
object reference and missing functional

499
00:23:39,380 --> 00:23:43,820
level access controls what else can we

500
00:23:42,050 --> 00:23:45,560
do what about<font color="#CCCCCC"> the data</font><font color="#E5E5E5"> for this we</font><font color="#CCCCCC"> have</font>

501
00:23:43,820 --> 00:23:48,770
control number<font color="#E5E5E5"> seven protect data both</font>

502
00:23:45,560 --> 00:23:50,480
at<font color="#E5E5E5"> rest and in transit</font><font color="#CCCCCC"> now when it comes</font>

503
00:23:48,770 --> 00:23:52,610
<font color="#E5E5E5">to data internally the best protection</font>

504
00:23:50,480 --> 00:23:55,220
<font color="#E5E5E5">out there is still a GPS which helps</font>

505
00:23:52,610 --> 00:23:58,850
<font color="#E5E5E5">with confidentiality in integrity and</font>

506
00:23:55,220 --> 00:24:01,040
<font color="#E5E5E5">authenticity the HTTPS does not cover</font>

507
00:23:58,850 --> 00:24:04,159
all<font color="#CCCCCC"> the man-in-the-middle attacks</font><font color="#E5E5E5"> so for</font>

508
00:24:01,040 --> 00:24:07,070
this ideal you would also<font color="#E5E5E5"> use an extra</font>

509
00:24:04,160 --> 00:24:08,990
header<font color="#E5E5E5"> strict Transport Security header</font>

510
00:24:07,070 --> 00:24:13,340
<font color="#CCCCCC">how many of you are</font><font color="#E5E5E5"> actually using this</font>

511
00:24:08,990 --> 00:24:16,700
header here great so this is a very easy

512
00:24:13,340 --> 00:24:19,100
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> add to your application it can</font>

513
00:24:16,700 --> 00:24:21,650
<font color="#E5E5E5">be either added</font><font color="#CCCCCC"> bar code or server</font>

514
00:24:19,100 --> 00:24:28,459
configuration what this header do is

515
00:24:21,650 --> 00:24:31,130
that this header<font color="#E5E5E5"> is downloaded by the</font>

516
00:24:28,460 --> 00:24:34,100
application<font color="#CCCCCC"> on to a client server</font>

517
00:24:31,130 --> 00:24:36,230
so it is a browser standard<font color="#E5E5E5"> but from</font>

518
00:24:34,100 --> 00:24:39,049
<font color="#E5E5E5">that point on the communication between</font>

519
00:24:36,230 --> 00:24:40,940
<font color="#E5E5E5">the browser and the</font><font color="#CCCCCC"> remote server the</font>

520
00:24:39,049 --> 00:24:45,700
client<font color="#CCCCCC"> browser</font><font color="#E5E5E5"> and the remote server is</font>

521
00:24:40,940 --> 00:24:48,559
always done<font color="#E5E5E5"> by the secure</font><font color="#CCCCCC"> channel HTTPS</font>

522
00:24:45,700 --> 00:24:50,900
now when it comes<font color="#E5E5E5"> to</font><font color="#CCCCCC"> data address the</font>

523
00:24:48,559 --> 00:24:53,090
best cryptographic algorithm is little

524
00:24:50,900 --> 00:24:55,190
areas and you should also have in place

525
00:24:53,090 --> 00:24:57,260
<font color="#CCCCCC">the</font><font color="#E5E5E5"> security management and adequate</font>

526
00:24:55,190 --> 00:24:59,299
access<font color="#E5E5E5"> controls and auditing in place</font>

527
00:24:57,260 --> 00:25:02,419
that is for managing the keys for

528
00:24:59,299 --> 00:25:04,100
encrypting decrypted<font color="#E5E5E5"> data so using</font>

529
00:25:02,419 --> 00:25:06,520
controller number<font color="#CCCCCC"> seven to protect data</font>

530
00:25:04,100 --> 00:25:10,090
<font color="#CCCCCC">box at rest and in transit</font>

531
00:25:06,520 --> 00:25:12,889
you can prevent sensitive<font color="#CCCCCC"> data exposure</font>

532
00:25:10,090 --> 00:25:14,570
another thing<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> can do is to have</font>

533
00:25:12,890 --> 00:25:17,710
in place<font color="#CCCCCC"> logging and</font><font color="#E5E5E5"> intrusion detection</font>

534
00:25:14,570 --> 00:25:20,330
<font color="#E5E5E5">now logging should not be used</font><font color="#CCCCCC"> to</font>

535
00:25:17,710 --> 00:25:24,320
debugging<font color="#E5E5E5"> or troubleshooting goli can</font>

536
00:25:20,330 --> 00:25:26,330
also be used for application monitoring

537
00:25:24,320 --> 00:25:28,309
compliance monitoring and<font color="#E5E5E5"> intrusion</font>

538
00:25:26,330 --> 00:25:30,020
detection and having in place<font color="#CCCCCC"> a well</font>

539
00:25:28,309 --> 00:25:32,450
<font color="#CCCCCC">designed logging mechanism</font><font color="#E5E5E5"> coupled with</font>

540
00:25:30,020 --> 00:25:34,429
a good detection one detection mechanism

541
00:25:32,450 --> 00:25:42,100
<font color="#E5E5E5">can help to prevent all the other octan</font>

542
00:25:34,429 --> 00:25:42,100
risks now let's see what<font color="#CCCCCC"> else</font><font color="#E5E5E5"> can we do</font>

543
00:25:42,400 --> 00:25:47,780
now starting from<font color="#E5E5E5"> the scratch to write a</font>

544
00:25:45,799 --> 00:25:49,460
new security control<font color="#E5E5E5"> every time we write</font>

545
00:25:47,780 --> 00:25:53,210
a new application<font color="#E5E5E5"> or a new web series</font>

546
00:25:49,460 --> 00:25:56,650
<font color="#E5E5E5">not</font><font color="#CCCCCC"> only that is</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> consuming but can</font>

547
00:25:53,210 --> 00:25:59,360
also<font color="#E5E5E5"> lead to security design flaws and</font>

548
00:25:56,650 --> 00:26:02,750
implementation flaws<font color="#CCCCCC"> I think for example</font>

549
00:25:59,360 --> 00:26:07,158
access<font color="#E5E5E5"> controls these are not the</font>

550
00:26:02,750 --> 00:26:08,990
simplest<font color="#CCCCCC"> thing these</font><font color="#E5E5E5"> are complex design</font>

551
00:26:07,159 --> 00:26:11,570
heavy<font color="#CCCCCC"> security controls you don't want</font>

552
00:26:08,990 --> 00:26:13,850
to do this<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the scratch or even a</font>

553
00:26:11,570 --> 00:26:16,010
library<font color="#E5E5E5"> to protect against cross-site</font>

554
00:26:13,850 --> 00:26:18,230
scripting<font color="#E5E5E5"> is not a simple thing</font><font color="#CCCCCC"> to do</font>

555
00:26:16,010 --> 00:26:22,190
<font color="#E5E5E5">from the scratch so way to deal with</font>

556
00:26:18,230 --> 00:26:24,919
<font color="#CCCCCC">this is to leverage</font><font color="#E5E5E5"> security frame</font>

557
00:26:22,190 --> 00:26:28,039
frameworks and libraries that<font color="#CCCCCC"> have</font>

558
00:26:24,919 --> 00:26:30,490
security embedded in for this we<font color="#E5E5E5"> have</font>

559
00:26:28,039 --> 00:26:33,830
control number 911<font color="#CCCCCC"> security framework</font>

560
00:26:30,490 --> 00:26:36,169
<font color="#E5E5E5">and a library so for example we can</font>

561
00:26:33,830 --> 00:26:37,879
choose a framework<font color="#E5E5E5"> that has well</font>

562
00:26:36,169 --> 00:26:41,809
designed<font color="#CCCCCC"> access controls in place and</font>

563
00:26:37,880 --> 00:26:44,000
<font color="#CCCCCC">CSRF protection we can bring in</font><font color="#E5E5E5"> the</font>

564
00:26:41,809 --> 00:26:44,809
library to protect against process<font color="#E5E5E5"> we</font>

565
00:26:44,000 --> 00:26:50,049
think

566
00:26:44,809 --> 00:26:53,450
<font color="#E5E5E5">and bringing</font><font color="#CCCCCC"> on Orem for SQL injection</font>

567
00:26:50,049 --> 00:26:56,440
but<font color="#E5E5E5"> there is a problem out there</font><font color="#CCCCCC"> and the</font>

568
00:26:53,450 --> 00:27:00,139
<font color="#E5E5E5">problem is that there is a lot of</font>

569
00:26:56,440 --> 00:27:03,710
<font color="#E5E5E5">software with vulnerable components in</font>

570
00:27:00,139 --> 00:27:05,570
fact in the<font color="#E5E5E5"> case of java application 97%</font>

571
00:27:03,710 --> 00:27:08,840
of job applications<font color="#CCCCCC"> have a list of one</font>

572
00:27:05,570 --> 00:27:11,029
component with at least one<font color="#E5E5E5"> known</font>

573
00:27:08,840 --> 00:27:12,799
vulnerability<font color="#E5E5E5"> now when we say non</font>

574
00:27:11,029 --> 00:27:14,990
vulnerability we actually refer to<font color="#E5E5E5"> those</font>

575
00:27:12,799 --> 00:27:18,740
vulnerabilities that have<font color="#E5E5E5"> been published</font>

576
00:27:14,990 --> 00:27:22,899
<font color="#E5E5E5">out there</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> internet available for</font>

577
00:27:18,740 --> 00:27:27,019
everyone<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see in databases</font><font color="#E5E5E5"> of</font>

578
00:27:22,899 --> 00:27:30,399
vulnerabilities and the main<font color="#E5E5E5"> problem is</font>

579
00:27:27,019 --> 00:27:32,419
that<font color="#CCCCCC"> the proprietary</font><font color="#E5E5E5"> code is entangled</font>

580
00:27:30,399 --> 00:27:35,149
with<font color="#CCCCCC"> occurs</font><font color="#E5E5E5"> from the third-party</font>

581
00:27:32,419 --> 00:27:39,799
<font color="#E5E5E5">libraries this makes it difficult to</font>

582
00:27:35,149 --> 00:27:42,168
<font color="#CCCCCC">upgrade and almost impossible to replace</font>

583
00:27:39,799 --> 00:27:44,960
that library so let's consider the

584
00:27:42,169 --> 00:27:49,309
<font color="#CCCCCC">following structure</font><font color="#E5E5E5"> so you have our own</font>

585
00:27:44,960 --> 00:27:50,629
nice code and now we bring<font color="#E5E5E5"> a library and</font>

586
00:27:49,309 --> 00:27:52,309
that depends<font color="#E5E5E5"> but not the librarian</font>

587
00:27:50,629 --> 00:27:53,959
depends of another library now we start

588
00:27:52,309 --> 00:27:58,279
implementing that functionality<font color="#E5E5E5"> into our</font>

589
00:27:53,960 --> 00:28:01,820
own code so<font color="#E5E5E5"> implemented into Moodle and</font>

590
00:27:58,279 --> 00:28:04,179
<font color="#E5E5E5">then in another module</font><font color="#CCCCCC"> setting up the</font>

591
00:28:01,820 --> 00:28:08,960
code from the third-party<font color="#E5E5E5"> library</font>

592
00:28:04,179 --> 00:28:11,720
touches<font color="#E5E5E5"> hundreds or even</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> point in your</font>

593
00:28:08,960 --> 00:28:13,999
<font color="#E5E5E5">own or even thousands of points in your</font>

594
00:28:11,720 --> 00:28:16,220
own software<font color="#CCCCCC"> in the case of course I</font>

595
00:28:13,999 --> 00:28:18,379
still think it can easily get into

596
00:28:16,220 --> 00:28:20,389
thousands<font color="#CCCCCC"> of points</font><font color="#E5E5E5"> where the</font>

597
00:28:18,379 --> 00:28:24,619
third-party<font color="#E5E5E5"> library touches your own</font>

598
00:28:20,389 --> 00:28:27,619
code<font color="#CCCCCC"> and now a</font><font color="#E5E5E5"> vulnerability is reported</font>

599
00:28:24,619 --> 00:28:32,240
somewhere into a component of a

600
00:28:27,619 --> 00:28:35,360
component<font color="#E5E5E5"> so the question is how can</font><font color="#CCCCCC"> we</font>

601
00:28:32,240 --> 00:28:38,059
protect<font color="#E5E5E5"> our own software but how to</font>

602
00:28:35,360 --> 00:28:40,248
understand if the vulnerability reported

603
00:28:38,059 --> 00:28:42,139
in<font color="#CCCCCC"> that library actually</font><font color="#E5E5E5"> affects our</font>

604
00:28:40,249 --> 00:28:44,869
software because if it<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> fit we</font>

605
00:28:42,139 --> 00:28:46,820
<font color="#E5E5E5">don't we need to do nothing but if it</font>

606
00:28:44,869 --> 00:28:48,049
affects then how<font color="#E5E5E5"> does it affect it and</font>

607
00:28:46,820 --> 00:28:52,789
what are the<font color="#E5E5E5"> controls that we need to</font>

608
00:28:48,049 --> 00:28:54,950
put in<font color="#E5E5E5"> place the problem</font><font color="#CCCCCC"> is that just by</font>

609
00:28:52,789 --> 00:28:57,860
<font color="#E5E5E5">bringing in components third-party</font>

610
00:28:54,950 --> 00:28:59,620
libraries but not incorporate them nor

611
00:28:57,860 --> 00:29:03,169
manage<font color="#E5E5E5"> the</font>

612
00:28:59,620 --> 00:29:05,600
appropriately<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Sofia is at risk of</font>

613
00:29:03,170 --> 00:29:08,120
<font color="#E5E5E5">being breached through its vulnerable</font>

614
00:29:05,600 --> 00:29:12,230
<font color="#CCCCCC">component at the</font><font color="#E5E5E5"> end of the day an</font>

615
00:29:08,120 --> 00:29:14,510
attacker would not spend any time to try

616
00:29:12,230 --> 00:29:19,000
<font color="#E5E5E5">to break into your nicely</font><font color="#CCCCCC"> secure</font>

617
00:29:14,510 --> 00:29:19,000
software<font color="#E5E5E5"> when they can do the same thing</font>

618
00:29:19,180 --> 00:29:24,590
we much less effort<font color="#E5E5E5"> using</font><font color="#CCCCCC"> a</font>

619
00:29:22,220 --> 00:29:26,360
vulnerability<font color="#E5E5E5"> that exists in to one of</font>

620
00:29:24,590 --> 00:29:31,790
<font color="#E5E5E5">your components incorporated into</font><font color="#CCCCCC"> your</font>

621
00:29:26,360 --> 00:29:33,919
software<font color="#CCCCCC"> so the question is when we</font>

622
00:29:31,790 --> 00:29:36,110
bring the<font color="#E5E5E5"> third-party libraries how can</font>

623
00:29:33,920 --> 00:29:38,090
we make<font color="#E5E5E5"> it</font><font color="#CCCCCC"> Oh what's the best way to</font>

624
00:29:36,110 --> 00:29:42,709
deal<font color="#CCCCCC"> with this how to incorporate</font><font color="#E5E5E5"> it</font>

625
00:29:38,090 --> 00:29:45,949
well a good starting for the<font color="#CCCCCC"> answer</font><font color="#E5E5E5"> to</font>

626
00:29:42,710 --> 00:29:48,020
this question<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> Robert C Martin book</font>

627
00:29:45,950 --> 00:29:53,420
<font color="#CCCCCC">clincal how many of you have heard of</font>

628
00:29:48,020 --> 00:29:58,700
<font color="#E5E5E5">clean</font><font color="#CCCCCC"> Gert also ankle</font><font color="#E5E5E5"> bulb so what he</font>

629
00:29:53,420 --> 00:30:02,090
says there is<font color="#E5E5E5"> that when you write an API</font>

630
00:29:58,700 --> 00:30:04,400
is a best practice<font color="#E5E5E5"> because you minimize</font>

631
00:30:02,090 --> 00:30:06,050
your dependencies<font color="#E5E5E5"> not only this but if</font>

632
00:30:04,400 --> 00:30:11,090
you want<font color="#CCCCCC"> replace</font><font color="#E5E5E5"> it you can</font><font color="#CCCCCC"> do it</font>

633
00:30:06,050 --> 00:30:14,419
without<font color="#E5E5E5"> much penalty so these are some</font>

634
00:30:11,090 --> 00:30:16,100
benefits from a software design point of

635
00:30:14,420 --> 00:30:20,230
<font color="#E5E5E5">view there are</font><font color="#CCCCCC"> further</font><font color="#E5E5E5"> benefits from a</font>

636
00:30:16,100 --> 00:30:22,189
security point of view<font color="#E5E5E5"> I can mention</font>

637
00:30:20,230 --> 00:30:23,960
<font color="#E5E5E5">replacing or updating this very</font>

638
00:30:22,190 --> 00:30:25,700
important one in the world of security

639
00:30:23,960 --> 00:30:27,260
<font color="#CCCCCC">there is a continuous</font><font color="#E5E5E5"> cat-and-mouse</font>

640
00:30:25,700 --> 00:30:30,080
<font color="#E5E5E5">chase</font><font color="#CCCCCC"> between the developers and</font><font color="#E5E5E5"> the</font>

641
00:30:27,260 --> 00:30:31,970
<font color="#CCCCCC">attackers the developers write a library</font>

642
00:30:30,080 --> 00:30:33,649
attackers<font color="#E5E5E5"> break</font><font color="#CCCCCC"> it developers</font><font color="#E5E5E5"> fixes</font>

643
00:30:31,970 --> 00:30:35,390
attackers break it again<font color="#CCCCCC"> so it's</font>

644
00:30:33,650 --> 00:30:37,460
important<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> this flexibility to</font>

645
00:30:35,390 --> 00:30:39,620
actually<font color="#E5E5E5"> operating or even</font><font color="#CCCCCC"> replace them</font>

646
00:30:37,460 --> 00:30:45,040
if you need<font color="#E5E5E5"> to be by wrapping the</font>

647
00:30:39,620 --> 00:30:45,040
library<font color="#E5E5E5"> you also are in a position to</font>

648
00:30:45,370 --> 00:30:50,290
exposing<font color="#CCCCCC"> to your code only</font><font color="#E5E5E5"> the</font>

649
00:30:47,570 --> 00:30:52,970
functionality<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> need and hide</font>

650
00:30:50,290 --> 00:30:58,520
unwanted behavior<font color="#E5E5E5"> in this way you reduce</font>

651
00:30:52,970 --> 00:31:02,390
<font color="#E5E5E5">your attack surface now if it's a</font>

652
00:30:58,520 --> 00:31:04,580
<font color="#CCCCCC">vulnerability is discovered</font><font color="#E5E5E5"> into your</font>

653
00:31:02,390 --> 00:31:09,740
<font color="#CCCCCC">third-party</font><font color="#E5E5E5"> library then you have that</font>

654
00:31:04,580 --> 00:31:12,350
<font color="#E5E5E5">record that document of what</font><font color="#CCCCCC"> you use and</font>

655
00:31:09,740 --> 00:31:15,350
<font color="#CCCCCC">how you use it and</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> that</font>

656
00:31:12,350 --> 00:31:17,360
that helps you a lot<font color="#E5E5E5"> to understand of</font>

657
00:31:15,350 --> 00:31:20,629
where to put the controls and which

658
00:31:17,360 --> 00:31:23,840
controls to put in place plus you<font color="#E5E5E5"> don't</font>

659
00:31:20,630 --> 00:31:26,390
<font color="#CCCCCC">indicate a wrapper</font><font color="#E5E5E5"> you end up from to</font>

660
00:31:23,840 --> 00:31:28,789
<font color="#E5E5E5">reducing from a thousands of points</font>

661
00:31:26,390 --> 00:31:30,559
<font color="#E5E5E5">where the code can touch to only one</font>

662
00:31:28,789 --> 00:31:32,030
<font color="#E5E5E5">point the wrapper so you end up with</font>

663
00:31:30,559 --> 00:31:35,030
<font color="#CCCCCC">only one</font><font color="#E5E5E5"> point where you need to apply</font>

664
00:31:32,030 --> 00:31:37,129
<font color="#E5E5E5">or control now depending</font><font color="#CCCCCC"> of the</font>

665
00:31:35,030 --> 00:31:38,928
<font color="#E5E5E5">complexity of the support libraries you</font>

666
00:31:37,130 --> 00:31:41,809
<font color="#E5E5E5">have to release of the design patterns</font>

667
00:31:38,929 --> 00:31:44,419
<font color="#E5E5E5">you can use a wrapper for example if you</font>

668
00:31:41,809 --> 00:31:46,250
<font color="#CCCCCC">just</font><font color="#E5E5E5"> want to expose in</font><font color="#CCCCCC"> Kyoto</font><font color="#E5E5E5"> the</font>

669
00:31:44,419 --> 00:31:51,280
functionality that<font color="#CCCCCC"> you need and want</font><font color="#E5E5E5"> to</font>

670
00:31:46,250 --> 00:31:51,280
hide<font color="#CCCCCC"> unwanted behavior</font><font color="#E5E5E5"> in the case of</font>

671
00:31:52,539 --> 00:31:59,360
libraries that<font color="#E5E5E5"> provides you the</font>

672
00:31:55,630 --> 00:32:00,770
different interface from what your

673
00:31:59,360 --> 00:32:03,530
software<font color="#E5E5E5"> needs then you can use the</font>

674
00:32:00,770 --> 00:32:06,260
adapter<font color="#E5E5E5"> and in the case</font><font color="#CCCCCC"> of complex</font>

675
00:32:03,530 --> 00:32:08,928
systems<font color="#E5E5E5"> then you can use the side</font>

676
00:32:06,260 --> 00:32:15,260
opposite design pattern actually<font color="#E5E5E5"> helps</font>

677
00:32:08,929 --> 00:32:17,690
you<font color="#E5E5E5"> to simplify the connection between</font>

678
00:32:15,260 --> 00:32:22,158
your own software<font color="#CCCCCC"> and the complex</font><font color="#E5E5E5"> system</font>

679
00:32:17,690 --> 00:32:24,080
<font color="#E5E5E5">and</font><font color="#CCCCCC"> as you can see in the</font><font color="#E5E5E5"> facility in</font>

680
00:32:22,159 --> 00:32:27,260
the<font color="#E5E5E5"> say class you actually have one</font>

681
00:32:24,080 --> 00:32:28,699
point where in case you need to like sir

682
00:32:27,260 --> 00:32:32,450
<font color="#CCCCCC">control that's your point where you</font><font color="#E5E5E5"> can</font>

683
00:32:28,700 --> 00:32:34,250
<font color="#CCCCCC">apply them</font><font color="#E5E5E5"> easily so in the case of</font>

684
00:32:32,450 --> 00:32:35,900
Chavez<font color="#CCCCCC"> or</font><font color="#E5E5E5"> in the case of applications</font>

685
00:32:34,250 --> 00:32:38,320
large applications in particular<font color="#E5E5E5"> the</font>

686
00:32:35,900 --> 00:32:41,720
<font color="#E5E5E5">number of third-party libraries can be</font>

687
00:32:38,320 --> 00:32:44,080
<font color="#E5E5E5">large from tens to hundreds so these</font>

688
00:32:41,720 --> 00:32:47,350
manually to manage those manually it's

689
00:32:44,080 --> 00:32:50,120
impossible so you need to automate<font color="#E5E5E5"> those</font>

690
00:32:47,350 --> 00:32:54,889
you can use<font color="#CCCCCC"> this one like us</font><font color="#E5E5E5"> this</font>

691
00:32:50,120 --> 00:32:57,860
dependency<font color="#CCCCCC"> check which has which at the</font>

692
00:32:54,890 --> 00:33:01,159
<font color="#CCCCCC">moment supports dope</font><font color="#E5E5E5"> net and Java</font>

693
00:32:57,860 --> 00:33:04,549
languages so if<font color="#CCCCCC"> our</font><font color="#E5E5E5"> to wrap up when</font>

694
00:33:01,159 --> 00:33:06,640
bringing<font color="#E5E5E5"> in third-party libraries it's</font>

695
00:33:04,549 --> 00:33:09,260
important<font color="#E5E5E5"> to use from trusted sources</font>

696
00:33:06,640 --> 00:33:12,289
when you incorporate them is important

697
00:33:09,260 --> 00:33:13,879
to encapsulate<font color="#CCCCCC"> them</font><font color="#E5E5E5"> so you expose</font><font color="#CCCCCC"> into</font>

698
00:33:12,289 --> 00:33:15,679
your software<font color="#E5E5E5"> only the functionality</font>

699
00:33:13,880 --> 00:33:17,900
<font color="#CCCCCC">that you need and you</font><font color="#E5E5E5"> hide</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> good</font>

700
00:33:15,679 --> 00:33:19,909
behavior<font color="#E5E5E5"> in this way you reduce your</font>

701
00:33:17,900 --> 00:33:23,779
attack service it's also important to

702
00:33:19,909 --> 00:33:27,729
<font color="#E5E5E5">verify for</font><font color="#CCCCCC"> those</font><font color="#E5E5E5"> often</font><font color="#CCCCCC"> and update</font>

703
00:33:23,779 --> 00:33:30,619
or even replace<font color="#E5E5E5"> them if needs be so in</font>

704
00:33:27,729 --> 00:33:32,330
using this control<font color="#CCCCCC"> tool every security</font>

705
00:33:30,619 --> 00:33:34,699
frameworks and libraries<font color="#CCCCCC"> but more</font>

706
00:33:32,330 --> 00:33:37,489
importantly<font color="#E5E5E5"> using it in a correct manner</font>

707
00:33:34,700 --> 00:33:40,159
<font color="#E5E5E5">that ensures that your</font><font color="#CCCCCC"> software is and</font>

708
00:33:37,489 --> 00:33:43,519
stay secure<font color="#CCCCCC"> can how to prevent all the</font>

709
00:33:40,159 --> 00:33:48,830
other octan risks and the last control

710
00:33:43,519 --> 00:33:52,609
is error and exception handling<font color="#E5E5E5"> now when</font>

711
00:33:48,830 --> 00:33:54,889
it<font color="#E5E5E5"> comes</font><font color="#CCCCCC"> to error is important to have a</font>

712
00:33:52,609 --> 00:33:56,389
centralized to manage the errors and

713
00:33:54,889 --> 00:34:00,289
exception handling<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> segment</font>

714
00:33:56,389 --> 00:34:03,619
centralized manner it's important<font color="#E5E5E5"> to</font>

715
00:34:00,289 --> 00:34:06,099
give the user enough information about

716
00:34:03,619 --> 00:34:10,779
uber to the next but don't link

717
00:34:06,099 --> 00:34:14,058
<font color="#CCCCCC">information about your</font><font color="#E5E5E5"> own application</font>

718
00:34:10,779 --> 00:34:16,940
now when you design your errors and

719
00:34:14,059 --> 00:34:20,629
exception<font color="#CCCCCC"> handling you can think as an</font>

720
00:34:16,940 --> 00:34:22,609
analogy<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> coordinate by themselves</font>

721
00:34:20,629 --> 00:34:24,618
a latitude<font color="#E5E5E5"> and longitude have no value</font>

722
00:34:22,609 --> 00:34:26,960
<font color="#E5E5E5">but put in together and they can</font>

723
00:34:24,619 --> 00:34:29,659
pinpoint the exact<font color="#E5E5E5"> location on</font><font color="#CCCCCC"> earth the</font>

724
00:34:26,960 --> 00:34:31,760
same is<font color="#CCCCCC"> valid for our messages one error</font>

725
00:34:29,659 --> 00:34:33,980
messages at a time might mean<font color="#CCCCCC"> nothing</font>

726
00:34:31,760 --> 00:34:36,679
but one of<font color="#E5E5E5"> the things an attacker would</font>

727
00:34:33,980 --> 00:34:38,690
do is poke around the<font color="#E5E5E5"> application see</font>

728
00:34:36,679 --> 00:34:41,299
which are all the error<font color="#CCCCCC"> messages like by</font>

729
00:34:38,690 --> 00:34:42,679
the software<font color="#CCCCCC"> aggregating and then</font>

730
00:34:41,299 --> 00:34:44,449
extract<font color="#CCCCCC"> information about your</font>

731
00:34:42,679 --> 00:34:50,270
<font color="#E5E5E5">application business</font><font color="#CCCCCC"> logic or its</font>

732
00:34:44,449 --> 00:34:52,759
structure<font color="#CCCCCC"> so having in place well design</font>

733
00:34:50,270 --> 00:34:55,159
<font color="#E5E5E5">our messages where an exception handling</font>

734
00:34:52,760 --> 00:34:58,039
that doesn't disclose information about

735
00:34:55,159 --> 00:35:00,470
<font color="#E5E5E5">your application can prevent all the</font><font color="#CCCCCC"> are</font>

736
00:34:58,039 --> 00:35:02,450
<font color="#CCCCCC">certain</font><font color="#E5E5E5"> risks so let's go back</font><font color="#CCCCCC"> to our</font>

737
00:35:00,470 --> 00:35:04,910
<font color="#E5E5E5">website</font><font color="#CCCCCC"> and we see by now which</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font>

738
00:35:02,450 --> 00:35:07,669
<font color="#E5E5E5">control that we</font><font color="#CCCCCC"> have put in place so we</font>

739
00:35:04,910 --> 00:35:12,049
<font color="#CCCCCC">have a way</font><font color="#E5E5E5"> to verify</font><font color="#CCCCCC"> for security early</font>

740
00:35:07,670 --> 00:35:13,940
<font color="#E5E5E5">and often we parameterize the queries by</font>

741
00:35:12,049 --> 00:35:17,420
<font color="#E5E5E5">binding the variable so we contextual</font>

742
00:35:13,940 --> 00:35:19,940
<font color="#CCCCCC">encode all the days out we evaluate all</font>

743
00:35:17,420 --> 00:35:23,260
the input including<font color="#E5E5E5"> the one from the</font>

744
00:35:19,940 --> 00:35:25,609
database we implement appropriate

745
00:35:23,260 --> 00:35:28,369
<font color="#E5E5E5">authentication and access controls and</font>

746
00:35:25,609 --> 00:35:31,400
we<font color="#E5E5E5"> protect the data both at rest and in</font>

747
00:35:28,369 --> 00:35:35,680
transit<font color="#E5E5E5"> on top of that we have adequate</font>

748
00:35:31,400 --> 00:35:37,320
<font color="#E5E5E5">loading and intrusion detection in place</font>

749
00:35:35,680 --> 00:35:40,169
for complex

750
00:35:37,320 --> 00:35:42,690
<font color="#CCCCCC">user controls we leverage security</font>

751
00:35:40,170 --> 00:35:47,070
<font color="#CCCCCC">promoting libraries</font><font color="#E5E5E5"> and we have in place</font>

752
00:35:42,690 --> 00:35:51,270
<font color="#CCCCCC">well design our messages using these</font>

753
00:35:47,070 --> 00:35:54,990
controls<font color="#E5E5E5"> while you write the code on a</font>

754
00:35:51,270 --> 00:35:57,110
<font color="#CCCCCC">consistent that manner</font><font color="#E5E5E5"> can help you to</font>

755
00:35:54,990 --> 00:35:58,890
<font color="#E5E5E5">prevent the most common</font><font color="#CCCCCC"> boundaries</font>

756
00:35:57,110 --> 00:36:03,330
<font color="#CCCCCC">vulnerabilities found in software</font>

757
00:35:58,890 --> 00:36:07,350
<font color="#E5E5E5">applications now what I want you</font><font color="#CCCCCC"> to take</font>

758
00:36:03,330 --> 00:36:09,750
<font color="#E5E5E5">home</font><font color="#CCCCCC"> are the controls that you can use</font>

759
00:36:07,350 --> 00:36:14,160
implementing your<font color="#E5E5E5"> own software project</font>

760
00:36:09,750 --> 00:36:16,680
<font color="#E5E5E5">and use them I've consistently while</font>

761
00:36:14,160 --> 00:36:20,339
writing the code I<font color="#E5E5E5"> think it is important</font>

762
00:36:16,680 --> 00:36:23,299
<font color="#E5E5E5">to remember that an attacker is only one</font>

763
00:36:20,340 --> 00:36:26,910
<font color="#CCCCCC">floor to bring</font><font color="#E5E5E5"> down an entire system</font><font color="#CCCCCC"> so</font>

764
00:36:23,300 --> 00:36:31,020
<font color="#CCCCCC">consistency is equally important</font><font color="#E5E5E5"> to</font>

765
00:36:26,910 --> 00:36:32,670
<font color="#E5E5E5">using them in the first</font><font color="#CCCCCC"> place now</font><font color="#E5E5E5"> if</font>

766
00:36:31,020 --> 00:36:34,530
you'd<font color="#CCCCCC"> like</font><font color="#E5E5E5"> to know more about this</font>

767
00:36:32,670 --> 00:36:37,170
project<font color="#E5E5E5"> you can actually visit the</font>

768
00:36:34,530 --> 00:36:40,830
project page which is the ask for<font color="#E5E5E5"> active</font>

769
00:36:37,170 --> 00:36:43,620
<font color="#E5E5E5">control stage mmm I think</font><font color="#CCCCCC"> and from there</font>

770
00:36:40,830 --> 00:36:45,810
you<font color="#E5E5E5"> can actually</font><font color="#CCCCCC"> dive deeper into each</font>

771
00:36:43,620 --> 00:36:48,270
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the controls</font><font color="#E5E5E5"> to see how you can use</font>

772
00:36:45,810 --> 00:36:50,130
them<font color="#CCCCCC"> for your</font><font color="#E5E5E5"> own projects also</font><font color="#CCCCCC"> I think</font>

773
00:36:48,270 --> 00:36:51,900
it's all<font color="#CCCCCC"> worth noting</font><font color="#E5E5E5"> that at the moment</font>

774
00:36:50,130 --> 00:36:55,440
we are working<font color="#E5E5E5"> on the next</font><font color="#CCCCCC"> version</font><font color="#E5E5E5"> and</font>

775
00:36:51,900 --> 00:36:57,990
if you have feedback that you want to

776
00:36:55,440 --> 00:37:00,330
give<font color="#CCCCCC"> to us</font><font color="#E5E5E5"> please feel free either you</font>

777
00:36:57,990 --> 00:37:03,209
reach me at the end of this after this

778
00:37:00,330 --> 00:37:06,880
presentation<font color="#CCCCCC"> or you can subscribe to the</font>

779
00:37:03,210 --> 00:37:11,350
project list<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very much</font>

780
00:37:06,880 --> 00:37:11,350
[Laughter]

