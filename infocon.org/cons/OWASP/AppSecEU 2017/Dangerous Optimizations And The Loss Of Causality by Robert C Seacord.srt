1
00:00:04,479 --> 00:00:14,809
so<font color="#CCCCCC"> sittin come</font><font color="#E5E5E5"> and surprise I'm novices</font>

2
00:00:08,599 --> 00:00:17,840
<font color="#CCCCCC">Oh hopefully never will be and so this</font>

3
00:00:14,809 --> 00:00:21,519
is a rather technical talk<font color="#CCCCCC"> if you're</font>

4
00:00:17,840 --> 00:00:21,519
<font color="#CCCCCC">Sissel you're probably in over your head</font>

5
00:00:22,240 --> 00:00:31,729
<font color="#CCCCCC">okay good it's good if I haven't</font><font color="#E5E5E5"> scared</font>

6
00:00:25,009 --> 00:00:37,070
<font color="#E5E5E5">anyone away yet um so what I'm going to</font>

7
00:00:31,730 --> 00:00:42,980
talk<font color="#CCCCCC"> about today how to use</font><font color="#E5E5E5"> electronic</font>

8
00:00:37,070 --> 00:00:45,469
<font color="#E5E5E5">equipment apparently so increasingly</font>

9
00:00:42,980 --> 00:00:48,559
compiler writers are taking<font color="#CCCCCC"> advantage of</font>

10
00:00:45,469 --> 00:00:50,390
undefined behaviors in C and C++

11
00:00:48,559 --> 00:00:53,899
programming languages<font color="#CCCCCC"> to improve</font>

12
00:00:50,390 --> 00:00:56,090
optimizations<font color="#CCCCCC"> I've been participating</font><font color="#E5E5E5"> on</font>

13
00:00:53,899 --> 00:01:02,449
the C<font color="#E5E5E5"> Standards Committee since about</font>

14
00:00:56,090 --> 00:01:04,960
2004<font color="#CCCCCC"> so I actually was</font><font color="#E5E5E5"> involved in</font><font color="#CCCCCC"> C the</font>

15
00:01:02,449 --> 00:01:07,640
development of C 11 from start to end

16
00:01:04,959 --> 00:01:10,548
<font color="#CCCCCC">which has recently occurred to me that</font>

17
00:01:07,640 --> 00:01:15,350
<font color="#CCCCCC">now I'm sort of responsible</font><font color="#E5E5E5"> in a way for</font>

18
00:01:10,549 --> 00:01:16,970
<font color="#E5E5E5">for C and and you know during that time</font>

19
00:01:15,350 --> 00:01:19,699
we like<font color="#E5E5E5"> to think the language is getting</font>

20
00:01:16,970 --> 00:01:23,360
better but more secure<font color="#E5E5E5"> but actually it's</font>

21
00:01:19,700 --> 00:01:26,150
becoming less secure<font color="#CCCCCC"> because</font><font color="#E5E5E5"> the still</font>

22
00:01:23,360 --> 00:01:28,310
the the<font color="#E5E5E5"> biggest driver for the evolution</font>

23
00:01:26,150 --> 00:01:30,920
of C<font color="#CCCCCC"> language is opportunity</font><font color="#E5E5E5"> for greater</font>

24
00:01:28,310 --> 00:01:32,420
<font color="#E5E5E5">optimization and</font><font color="#CCCCCC"> less</font><font color="#E5E5E5"> well defined the</font>

25
00:01:30,920 --> 00:01:35,270
languages the more opportunity you have

26
00:01:32,420 --> 00:01:37,310
<font color="#CCCCCC">to optimize</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> you know so I frequently</font>

27
00:01:35,270 --> 00:01:40,908
get into<font color="#E5E5E5"> these discussions where we're</font>

28
00:01:37,310 --> 00:01:42,619
saying you know<font color="#CCCCCC"> you know if six</font><font color="#E5E5E5"> turns</font>

29
00:01:40,909 --> 00:01:45,909
out to be<font color="#E5E5E5"> nine do you care how fast you</font>

30
00:01:42,619 --> 00:01:49,460
got that<font color="#E5E5E5"> result and apparently they do</font>

31
00:01:45,909 --> 00:01:50,990
<font color="#CCCCCC">so so frequently these optimizations</font>

32
00:01:49,460 --> 00:01:53,000
<font color="#E5E5E5">tend to interfere</font><font color="#CCCCCC"> with the ability of</font>

33
00:01:50,990 --> 00:01:56,060
<font color="#E5E5E5">developers or security analysts or</font>

34
00:01:53,000 --> 00:01:58,579
security tools to really<font color="#E5E5E5"> analyze the</font>

35
00:01:56,060 --> 00:02:00,829
code and determine what it's doing right

36
00:01:58,579 --> 00:02:02,000
<font color="#CCCCCC">and so what happens is there's code that</font>

37
00:02:00,829 --> 00:02:03,860
looks<font color="#CCCCCC"> like it's there it looks</font><font color="#E5E5E5"> like it's</font>

38
00:02:02,000 --> 00:02:06,170
<font color="#E5E5E5">doing something but it's actually being</font>

39
00:02:03,860 --> 00:02:08,690
removed from the compiler<font color="#E5E5E5"> and then it</font>

40
00:02:06,170 --> 00:02:10,960
<font color="#E5E5E5">becomes</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> difficult for humans or</font>

41
00:02:08,690 --> 00:02:14,210
source<font color="#CCCCCC"> Canales tool that's not</font>

42
00:02:10,960 --> 00:02:16,380
implementation specific<font color="#E5E5E5"> to analyze the</font>

43
00:02:14,210 --> 00:02:19,370
behavior<font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> leading</font>

44
00:02:16,380 --> 00:02:21,570
to increase faults and software<font color="#E5E5E5"> and</font>

45
00:02:19,370 --> 00:02:24,390
those are leading to increased

46
00:02:21,570 --> 00:02:28,109
vulnerabilities<font color="#CCCCCC"> there we</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> set the</font>

47
00:02:24,390 --> 00:02:31,170
wrong direction<font color="#CCCCCC"> so um so some</font><font color="#E5E5E5"> years ago</font>

48
00:02:28,110 --> 00:02:33,930
<font color="#CCCCCC">i authored this vulnerability note with</font>

49
00:02:31,170 --> 00:02:36,720
a<font color="#CCCCCC"> chad dougherty</font><font color="#E5E5E5"> at cert this was</font><font color="#CCCCCC"> april</font>

50
00:02:33,930 --> 00:02:38,730
2008 this was<font color="#E5E5E5"> quite a while</font><font color="#CCCCCC"> ago and this</font>

51
00:02:36,720 --> 00:02:39,150
<font color="#E5E5E5">was about GCC but maybe</font><font color="#CCCCCC"> the last two</font>

52
00:02:38,730 --> 00:02:41,869
<font color="#E5E5E5">weeks</font>

53
00:02:39,150 --> 00:02:44,100
<font color="#E5E5E5">there was the exact same sort of</font>

54
00:02:41,870 --> 00:02:46,740
vulnerability<font color="#E5E5E5"> was noted</font><font color="#CCCCCC"> in the clang</font>

55
00:02:44,100 --> 00:02:48,960
compiler so<font color="#E5E5E5"> i'm not sure</font><font color="#CCCCCC"> if it took them</font>

56
00:02:46,740 --> 00:02:51,870
nine years to catch<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with how bad GCC</font>

57
00:02:48,960 --> 00:02:55,230
is or<font color="#E5E5E5"> they you know people</font><font color="#CCCCCC"> just got</font>

58
00:02:51,870 --> 00:02:57,000
<font color="#E5E5E5">around to noticing but some of these</font>

59
00:02:55,230 --> 00:03:00,450
<font color="#CCCCCC">open source compilers</font><font color="#E5E5E5"> are sort of the</font>

60
00:02:57,000 --> 00:03:01,560
<font color="#CCCCCC">wild west of compilers and</font><font color="#E5E5E5"> I'll chat a</font>

61
00:03:00,450 --> 00:03:08,299
little<font color="#E5E5E5"> bit more about why that's the</font>

62
00:03:01,560 --> 00:03:14,100
<font color="#CCCCCC">case</font><font color="#E5E5E5"> um yep still going to run way so</font>

63
00:03:08,300 --> 00:03:15,840
undefined behaviors<font color="#E5E5E5"> so I you know when I</font>

64
00:03:14,100 --> 00:03:17,460
<font color="#E5E5E5">joined the C</font><font color="#CCCCCC"> Committee my goal was to</font>

65
00:03:15,840 --> 00:03:19,290
<font color="#E5E5E5">make more or C a more secure language</font>

66
00:03:17,460 --> 00:03:21,150
and then you know to<font color="#E5E5E5"> change C to make it</font>

67
00:03:19,290 --> 00:03:23,810
more secure<font color="#E5E5E5"> and of course what happened</font>

68
00:03:21,150 --> 00:03:27,600
was that C wound up changing me instead

69
00:03:23,810 --> 00:03:29,820
<font color="#CCCCCC">and and</font><font color="#E5E5E5"> really you know it's a very it's</font>

70
00:03:27,600 --> 00:03:32,760
a<font color="#CCCCCC"> very bright group of people who</font><font color="#E5E5E5"> are</font>

71
00:03:29,820 --> 00:03:34,920
involved in C<font color="#CCCCCC"> Standards Committee</font><font color="#E5E5E5"> and if</font>

72
00:03:32,760 --> 00:03:36,510
you give<font color="#CCCCCC"> to give a very</font><font color="#E5E5E5"> great group of</font>

73
00:03:34,920 --> 00:03:39,450
<font color="#E5E5E5">people the set of requirements that they</font>

74
00:03:36,510 --> 00:03:40,679
were given they produce a C language<font color="#E5E5E5"> you</font>

75
00:03:39,450 --> 00:03:43,220
know if you give<font color="#E5E5E5"> them a different set of</font>

76
00:03:40,680 --> 00:03:45,930
<font color="#E5E5E5">requirements they produce Java right but</font>

77
00:03:43,220 --> 00:03:48,900
but C is the<font color="#CCCCCC"> language that you get given</font>

78
00:03:45,930 --> 00:03:52,260
given<font color="#E5E5E5"> the goals they had and undefined</font>

79
00:03:48,900 --> 00:03:55,140
behaviors<font color="#E5E5E5"> you know although this is sort</font>

80
00:03:52,260 --> 00:03:56,790
of misunderstood<font color="#E5E5E5"> or they're not there by</font>

81
00:03:55,140 --> 00:03:59,220
<font color="#CCCCCC">accident they are intentionally</font><font color="#E5E5E5"> put</font>

82
00:03:56,790 --> 00:04:02,760
there and you know the idea<font color="#CCCCCC"> is that</font>

83
00:03:59,220 --> 00:04:05,160
<font color="#E5E5E5">there because they belong there</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> one</font>

84
00:04:02,760 --> 00:04:07,950
of<font color="#E5E5E5"> the mistakes I think the committee</font>

85
00:04:05,160 --> 00:04:09,570
made was the this term undefined

86
00:04:07,950 --> 00:04:11,429
behavior is actually<font color="#E5E5E5"> too broad because</font>

87
00:04:09,570 --> 00:04:13,380
<font color="#CCCCCC">it encompasses really three completely</font>

88
00:04:11,430 --> 00:04:16,108
different kinds of<font color="#E5E5E5"> things so</font><font color="#CCCCCC"> the first</font>

89
00:04:13,380 --> 00:04:18,089
one is it<font color="#E5E5E5"> gives the implementers license</font>

90
00:04:16,108 --> 00:04:20,700
not<font color="#E5E5E5"> to catch certain kinds of errors</font>

91
00:04:18,089 --> 00:04:22,048
<font color="#E5E5E5">that</font><font color="#CCCCCC"> are difficult to diagnose and it's</font>

92
00:04:20,700 --> 00:04:24,000
<font color="#E5E5E5">the one thing</font><font color="#CCCCCC"> about the committee</font><font color="#E5E5E5"> it's</font>

93
00:04:22,048 --> 00:04:26,489
<font color="#E5E5E5">weensy standards</font><font color="#CCCCCC"> written by C developers</font>

94
00:04:24,000 --> 00:04:28,110
of C compiler vendors for C compiler

95
00:04:26,490 --> 00:04:29,800
vendors<font color="#E5E5E5"> and they don't like to</font><font color="#CCCCCC"> be</font>

96
00:04:28,110 --> 00:04:31,900
particularly<font color="#E5E5E5"> hard on</font><font color="#CCCCCC"> each other</font>

97
00:04:29,800 --> 00:04:33,580
so kind of<font color="#E5E5E5"> like oh hey Jeff it's too</font>

98
00:04:31,900 --> 00:04:35,530
rough<font color="#CCCCCC"> you know don't</font><font color="#E5E5E5"> worry</font><font color="#CCCCCC"> about it go</font>

99
00:04:33,580 --> 00:04:40,180
home have dinner with your wife<font color="#CCCCCC"> you know</font>

100
00:04:35,530 --> 00:04:41,559
<font color="#E5E5E5">no problem</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> so but this</font><font color="#CCCCCC"> is also meant</font>

101
00:04:40,180 --> 00:04:44,169
because there are you<font color="#CCCCCC"> know there cases</font>

102
00:04:41,560 --> 00:04:47,169
<font color="#E5E5E5">that our</font><font color="#CCCCCC"> NP complete or np-hard that</font>

103
00:04:44,169 --> 00:04:50,318
just take too much processing<font color="#E5E5E5"> to you</font>

104
00:04:47,169 --> 00:04:52,479
know be you know to<font color="#E5E5E5"> always know that</font>

105
00:04:50,319 --> 00:04:55,060
<font color="#E5E5E5">you're going to diagnose a problem so</font>

106
00:04:52,479 --> 00:04:57,250
consequently<font color="#E5E5E5"> these</font><font color="#CCCCCC"> compilers not</font>

107
00:04:55,060 --> 00:04:59,680
required to diagnose these problems<font color="#E5E5E5"> the</font>

108
00:04:57,250 --> 00:05:04,060
second ones to avoid defining obscure

109
00:04:59,680 --> 00:05:06,550
corner cases<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so it turns</font><font color="#CCCCCC"> out let's</font>

110
00:05:04,060 --> 00:05:09,280
say you have int<font color="#CCCCCC"> min smallest signed</font>

111
00:05:06,550 --> 00:05:11,889
integer number most negative number<font color="#E5E5E5"> and</font>

112
00:05:09,280 --> 00:05:15,190
<font color="#E5E5E5">you take the remainder after dividing by</font>

113
00:05:11,889 --> 00:05:18,250
minus<font color="#E5E5E5"> one okay</font><font color="#CCCCCC"> can't</font><font color="#E5E5E5"> tell me what result</font>

114
00:05:15,190 --> 00:05:20,710
you get okay large negative number

115
00:05:18,250 --> 00:05:27,460
divided<font color="#CCCCCC"> by</font><font color="#E5E5E5"> minus one what's the</font>

116
00:05:20,710 --> 00:05:31,508
remainder anybody<font color="#CCCCCC"> you're thinking this</font>

117
00:05:27,460 --> 00:05:32,169
log you're thinking too<font color="#E5E5E5"> hard</font><font color="#CCCCCC"> ciara</font><font color="#E5E5E5"> you</font>

118
00:05:31,509 --> 00:05:34,180
say<font color="#E5E5E5"> zero</font>

119
00:05:32,169 --> 00:05:35,650
yeah you get zero<font color="#E5E5E5"> okay you divide</font>

120
00:05:34,180 --> 00:05:37,599
something<font color="#CCCCCC"> I minus one there's zero</font>

121
00:05:35,650 --> 00:05:40,359
things left<font color="#E5E5E5"> over</font><font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> the same thing</font>

122
00:05:37,599 --> 00:05:42,159
as<font color="#E5E5E5"> dividing by one okay</font><font color="#CCCCCC"> on an Intel</font>

123
00:05:40,360 --> 00:05:44,289
processor if you do that what you<font color="#CCCCCC"> get is</font>

124
00:05:42,159 --> 00:05:49,240
a segmentation<font color="#CCCCCC"> fault okay</font>

125
00:05:44,289 --> 00:05:51,460
and in in c99<font color="#CCCCCC"> that was what</font><font color="#E5E5E5"> was called</font>

126
00:05:49,240 --> 00:05:52,719
implicit undefined behavior so it was

127
00:05:51,460 --> 00:05:55,930
undefined<font color="#E5E5E5"> behavior but they didn't tell</font>

128
00:05:52,719 --> 00:05:58,930
you about<font color="#CCCCCC"> it and so for c11</font><font color="#E5E5E5"> you know I</font>

129
00:05:55,930 --> 00:06:00,400
submitted a proposal and we discussed<font color="#E5E5E5"> it</font>

130
00:05:58,930 --> 00:06:02,139
in committing we want<font color="#CCCCCC"> up modifying</font><font color="#E5E5E5"> the</font>

131
00:06:00,400 --> 00:06:04,810
<font color="#CCCCCC">language to make</font><font color="#E5E5E5"> an explicit undefined</font>

132
00:06:02,139 --> 00:06:08,050
behavior<font color="#E5E5E5"> and the reason is the C</font>

133
00:06:04,810 --> 00:06:10,509
<font color="#CCCCCC">committee doesn't</font><font color="#E5E5E5"> want to publish</font><font color="#CCCCCC"> people</font>

134
00:06:08,050 --> 00:06:12,729
who write code<font color="#E5E5E5"> for the Intel platform to</font>

135
00:06:10,509 --> 00:06:14,050
make them add an extra test to test for

136
00:06:12,729 --> 00:06:16,508
this<font color="#E5E5E5"> edge condition because that would</font>

137
00:06:14,050 --> 00:06:19,509
slow<font color="#E5E5E5"> down their compilers and the result</font>

138
00:06:16,509 --> 00:06:21,879
of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> burden of doing</font><font color="#E5E5E5"> these</font>

139
00:06:19,509 --> 00:06:24,969
checks<font color="#E5E5E5"> kind of gets deferred to</font><font color="#CCCCCC"> the</font>

140
00:06:21,879 --> 00:06:27,699
programmer so that's the second<font color="#E5E5E5"> reason</font>

141
00:06:24,969 --> 00:06:30,250
the third reason is to<font color="#CCCCCC"> identify</font><font color="#E5E5E5"> areas of</font>

142
00:06:27,699 --> 00:06:32,529
possible possible conforming language

143
00:06:30,250 --> 00:06:34,810
extension so here for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> when you</font>

144
00:06:32,529 --> 00:06:36,669
an F open<font color="#CCCCCC"> on a file there's a few</font>

145
00:06:34,810 --> 00:06:37,810
different<font color="#E5E5E5"> modes that you can specify and</font>

146
00:06:36,669 --> 00:06:40,029
if you specify anything<font color="#E5E5E5"> else is</font>

147
00:06:37,810 --> 00:06:42,490
undefined behavior<font color="#E5E5E5"> okay so if you put a</font>

148
00:06:40,029 --> 00:06:43,980
<font color="#E5E5E5">Y in</font><font color="#CCCCCC"> as a mode you know do you think</font>

149
00:06:42,490 --> 00:06:46,770
<font color="#E5E5E5">it's going to crash</font>

150
00:06:43,980 --> 00:06:49,350
absolutely not<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so the reason they</font>

151
00:06:46,770 --> 00:06:51,840
did that was<font color="#E5E5E5"> you know the</font><font color="#CCCCCC"> standard</font><font color="#E5E5E5"> has</font>

152
00:06:49,350 --> 00:06:53,280
to<font color="#E5E5E5"> run on</font><font color="#CCCCCC"> a variety</font><font color="#E5E5E5"> of platforms</font><font color="#CCCCCC"> file</font>

153
00:06:51,840 --> 00:06:55,469
systems have a lot<font color="#CCCCCC"> of inconsistencies</font>

154
00:06:53,280 --> 00:06:57,450
and different features<font color="#CCCCCC"> that aren't</font>

155
00:06:55,470 --> 00:06:59,610
available<font color="#E5E5E5"> in all platforms</font><font color="#CCCCCC"> so that's a</font>

156
00:06:57,450 --> 00:07:01,200
mechanism<font color="#CCCCCC"> to allow implementations to</font>

157
00:06:59,610 --> 00:07:03,390
extend the behavior<font color="#CCCCCC"> of their</font>

158
00:07:01,200 --> 00:07:05,190
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> to match</font><font color="#E5E5E5"> the file system</font>

159
00:07:03,390 --> 00:07:06,870
so that's<font color="#E5E5E5"> a third completely different</font>

160
00:07:05,190 --> 00:07:09,860
reason<font color="#CCCCCC"> but they're all</font><font color="#E5E5E5"> classifieds</font>

161
00:07:06,870 --> 00:07:12,120
<font color="#E5E5E5">undefined behavior and a compiler can</font>

162
00:07:09,860 --> 00:07:14,820
ignore undefined behavior completely

163
00:07:12,120 --> 00:07:16,830
<font color="#E5E5E5">with unpredictable results typically the</font>

164
00:07:14,820 --> 00:07:18,150
<font color="#CCCCCC">Committee will say</font><font color="#E5E5E5"> the compiler can go</font>

165
00:07:16,830 --> 00:07:20,520
out<font color="#E5E5E5"> and</font><font color="#CCCCCC"> play the game of life at that</font>

166
00:07:18,150 --> 00:07:22,799
<font color="#E5E5E5">point and</font><font color="#CCCCCC"> that's allowed for by the</font>

167
00:07:20,520 --> 00:07:24,299
standard the second is<font color="#CCCCCC"> behave in a</font>

168
00:07:22,800 --> 00:07:26,070
documented manner<font color="#CCCCCC"> characters</font><font color="#E5E5E5"> the</font>

169
00:07:24,300 --> 00:07:28,470
environments example when you say int

170
00:07:26,070 --> 00:07:30,030
<font color="#E5E5E5">main remainder minus</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> on Intel</font>

171
00:07:28,470 --> 00:07:31,890
platform it characteristically<font color="#CCCCCC"> false</font>

172
00:07:30,030 --> 00:07:35,280
that's the behavior of<font color="#CCCCCC"> that platform</font>

173
00:07:31,890 --> 00:07:37,169
<font color="#CCCCCC">that's a loud behavior</font><font color="#E5E5E5"> or it could</font>

174
00:07:35,280 --> 00:07:39,119
terminate translation or execution<font color="#E5E5E5"> with</font>

175
00:07:37,170 --> 00:07:42,860
the diagnostic that's that's the<font color="#E5E5E5"> most</font>

176
00:07:39,120 --> 00:07:45,090
<font color="#E5E5E5">you could hope for so the the basic</font>

177
00:07:42,860 --> 00:07:47,910
<font color="#CCCCCC">concept the basic</font><font color="#E5E5E5"> design of an</font>

178
00:07:45,090 --> 00:07:50,219
optimizing compiler<font color="#CCCCCC"> for</font><font color="#E5E5E5"> C is largely the</font>

179
00:07:47,910 --> 00:07:54,660
same as<font color="#CCCCCC"> for any other</font><font color="#E5E5E5"> language basically</font>

180
00:07:50,220 --> 00:07:57,540
you try to replace computations with

181
00:07:54,660 --> 00:08:01,950
more efficient methods that produce<font color="#E5E5E5"> the</font>

182
00:07:57,540 --> 00:08:04,850
same result<font color="#E5E5E5"> so so some so here's the you</font>

183
00:08:01,950 --> 00:08:07,860
know gross oversimplification I have

184
00:08:04,850 --> 00:08:09,420
some optimizations<font color="#CCCCCC"> limonade</font><font color="#E5E5E5"> undefined</font>

185
00:08:07,860 --> 00:08:11,460
behaviors<font color="#E5E5E5"> we'll call those</font><font color="#CCCCCC"> the good</font>

186
00:08:09,420 --> 00:08:12,690
optimizations<font color="#E5E5E5"> and then we have the ones</font>

187
00:08:11,460 --> 00:08:15,840
<font color="#E5E5E5">that</font><font color="#CCCCCC"> introduce vulnerabilities and</font><font color="#E5E5E5"> we</font>

188
00:08:12,690 --> 00:08:18,150
call<font color="#E5E5E5"> those the bad optimizations</font><font color="#CCCCCC"> oh by</font>

189
00:08:15,840 --> 00:08:19,979
the way I worked<font color="#E5E5E5"> with this</font><font color="#CCCCCC"> I used to</font>

190
00:08:18,150 --> 00:08:22,260
work<font color="#CCCCCC"> with</font><font color="#E5E5E5"> David</font><font color="#CCCCCC"> keen who's the chair</font><font color="#E5E5E5"> of</font>

191
00:08:19,980 --> 00:08:24,030
the C standards can<font color="#CCCCCC"> be now that convener</font>

192
00:08:22,260 --> 00:08:26,370
<font color="#E5E5E5">of the international standards</font><font color="#CCCCCC"> committee</font>

193
00:08:24,030 --> 00:08:28,200
<font color="#CCCCCC">and he he didn't like the</font><font color="#E5E5E5"> fact that I</font>

194
00:08:26,370 --> 00:08:29,760
called this talk dangerous optimizations

195
00:08:28,200 --> 00:08:32,789
<font color="#E5E5E5">he thought I should just called it</font>

196
00:08:29,760 --> 00:08:34,799
optimizations and that's a<font color="#E5E5E5"> little window</font>

197
00:08:32,789 --> 00:08:41,959
<font color="#CCCCCC">into the</font><font color="#E5E5E5"> mindset of</font><font color="#CCCCCC"> people in the C</font>

198
00:08:34,799 --> 00:08:44,760
committee<font color="#CCCCCC"> okay so so the C standard</font>

199
00:08:41,960 --> 00:08:48,060
specifies the results of the computation

200
00:08:44,760 --> 00:08:51,270
<font color="#CCCCCC">as if on an abstract</font><font color="#E5E5E5"> machine</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> doesn't</font>

201
00:08:48,060 --> 00:08:53,939
specify the methods that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> so in</font>

202
00:08:51,270 --> 00:08:55,230
the abstract machine<font color="#E5E5E5"> the semantics</font><font color="#CCCCCC"> have</font>

203
00:08:53,940 --> 00:08:56,800
to closely follow what<font color="#E5E5E5"> this</font>

204
00:08:55,230 --> 00:08:58,420
<font color="#CCCCCC">specification says</font>

205
00:08:56,800 --> 00:09:01,569
<font color="#E5E5E5">but an actual implementation doesn't</font>

206
00:08:58,420 --> 00:09:04,420
have to you know reproduce all the same

207
00:09:01,570 --> 00:09:07,540
steps<font color="#CCCCCC"> if it can conduce that</font><font color="#E5E5E5"> you know</font>

208
00:09:04,420 --> 00:09:09,790
for<font color="#E5E5E5"> example values not need it or that</font>

209
00:09:07,540 --> 00:09:12,760
there's no<font color="#E5E5E5"> side</font><font color="#CCCCCC"> effects occurring that</font>

210
00:09:09,790 --> 00:09:16,469
would<font color="#CCCCCC"> require you know that code to be</font>

211
00:09:12,760 --> 00:09:18,640
executed<font color="#CCCCCC"> so basically the compilers</font>

212
00:09:16,470 --> 00:09:23,110
optimizers free to choose any<font color="#CCCCCC"> method</font>

213
00:09:18,640 --> 00:09:24,880
that<font color="#E5E5E5"> produces the</font><font color="#CCCCCC"> correct result</font><font color="#E5E5E5"> so so</font>

214
00:09:23,110 --> 00:09:27,399
this gives the compiler the<font color="#E5E5E5"> leeway to</font>

215
00:09:24,880 --> 00:09:29,350
remove cause that's deemed unused<font color="#E5E5E5"> or</font>

216
00:09:27,399 --> 00:09:31,870
unneeded when building<font color="#E5E5E5"> a</font><font color="#CCCCCC"> program and</font>

217
00:09:29,350 --> 00:09:34,149
this<font color="#E5E5E5"> is typically referred</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> at the as</font>

218
00:09:31,870 --> 00:09:35,920
if rule because the<font color="#E5E5E5"> program has</font><font color="#CCCCCC"> to it</font>

219
00:09:34,149 --> 00:09:37,390
has<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run as if it we're executing on</font>

220
00:09:35,920 --> 00:09:40,140
the<font color="#E5E5E5"> abstract machine but it doesn't have</font>

221
00:09:37,390 --> 00:09:42,069
<font color="#E5E5E5">to follow all</font><font color="#CCCCCC"> the exact methods and</font>

222
00:09:40,140 --> 00:09:45,970
occasionally you'll you'll see a<font color="#E5E5E5"> little</font>

223
00:09:42,070 --> 00:09:48,190
<font color="#E5E5E5">bit of you know you'll see two</font><font color="#CCCCCC"> places in</font>

224
00:09:45,970 --> 00:09:50,019
<font color="#E5E5E5">the standard you'll see a volatile with</font>

225
00:09:48,190 --> 00:09:51,459
volatile and with memset underbar s

226
00:09:50,019 --> 00:09:55,089
where there's<font color="#CCCCCC"> language</font><font color="#E5E5E5"> in the standard</font>

227
00:09:51,459 --> 00:09:56,649
<font color="#CCCCCC">that says</font><font color="#E5E5E5"> must operate you know</font>

228
00:09:55,089 --> 00:09:58,750
according<font color="#E5E5E5"> to the rules of the abstract</font>

229
00:09:56,649 --> 00:10:02,320
machine<font color="#E5E5E5"> so those are two places where</font>

230
00:09:58,750 --> 00:10:04,060
the<font color="#CCCCCC"> standard says that</font><font color="#E5E5E5"> you know you</font>

231
00:10:02,320 --> 00:10:05,920
can't use the as if rule doesn't apply

232
00:10:04,060 --> 00:10:07,989
<font color="#CCCCCC">you have to implement the semantics</font>

233
00:10:05,920 --> 00:10:10,870
exactly so as volatile for example if

234
00:10:07,990 --> 00:10:13,149
you say x<font color="#E5E5E5"> equals x and x is volatile</font>

235
00:10:10,870 --> 00:10:14,920
qualified you need to read the variable

236
00:10:13,149 --> 00:10:16,959
<font color="#CCCCCC">x and then you need to</font><font color="#E5E5E5"> write</font><font color="#CCCCCC"> the</font>

237
00:10:14,920 --> 00:10:18,670
variable<font color="#E5E5E5"> x back out but if that was</font>

238
00:10:16,959 --> 00:10:21,790
<font color="#E5E5E5">involved to qualify</font><font color="#CCCCCC"> that code would be</font>

239
00:10:18,670 --> 00:10:25,209
optimized out for sure

240
00:10:21,790 --> 00:10:28,120
okay so compiler vendors<font color="#E5E5E5"> use various</font>

241
00:10:25,209 --> 00:10:30,849
implementation strategies<font color="#CCCCCC"> one strategies</font>

242
00:10:28,120 --> 00:10:32,800
<font color="#E5E5E5">hardware behavior where you basically</font>

243
00:10:30,850 --> 00:10:34,120
generate the assembly<font color="#E5E5E5"> code and you let</font>

244
00:10:32,800 --> 00:10:37,060
the hardware do whatever the hardware

245
00:10:34,120 --> 00:10:39,430
<font color="#E5E5E5">does and for many years that was kind of</font>

246
00:10:37,060 --> 00:10:41,469
how C worked<font color="#E5E5E5"> so you know the people in</font>

247
00:10:39,430 --> 00:10:42,870
<font color="#E5E5E5">the room with the</font><font color="#CCCCCC"> grey hair the white</font>

248
00:10:41,470 --> 00:10:45,070
hair<font color="#CCCCCC"> the no hair</font>

249
00:10:42,870 --> 00:10:47,949
probably have been exposed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that type</font>

250
00:10:45,070 --> 00:10:50,310
of<font color="#E5E5E5"> programming another model super debug</font>

251
00:10:47,949 --> 00:10:53,609
where you trap any undefined behavior

252
00:10:50,310 --> 00:10:56,680
<font color="#CCCCCC">great for</font><font color="#E5E5E5"> debugging very impractical for</font>

253
00:10:53,610 --> 00:10:59,440
<font color="#CCCCCC">deploying code because it has</font>

254
00:10:56,680 --> 00:11:02,319
significant slowdowns<font color="#CCCCCC"> and</font><font color="#E5E5E5"> third is total</font>

255
00:10:59,440 --> 00:11:04,720
license and total license you can treat

256
00:11:02,320 --> 00:11:07,209
any possible undefined behaviors that

257
00:11:04,720 --> 00:11:09,089
can't happen condition<font color="#E5E5E5"> which allows you</font>

258
00:11:07,209 --> 00:11:12,599
<font color="#CCCCCC">to optimize</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> Optima</font>

259
00:11:09,089 --> 00:11:15,329
<font color="#E5E5E5">aggressively so just to</font><font color="#CCCCCC"> start with</font><font color="#E5E5E5"> a</font>

260
00:11:12,600 --> 00:11:16,889
<font color="#E5E5E5">simple one constant folding is the</font>

261
00:11:15,329 --> 00:11:18,120
process<font color="#E5E5E5"> of simplifying constant</font>

262
00:11:16,889 --> 00:11:21,540
expressions at compile time

263
00:11:18,120 --> 00:11:23,779
<font color="#E5E5E5">so cost expression x' can be simple</font>

264
00:11:21,540 --> 00:11:25,860
literal<font color="#E5E5E5"> such as the integer</font><font color="#CCCCCC"> two</font>

265
00:11:23,779 --> 00:11:27,959
variables are never modified or

266
00:11:25,860 --> 00:11:30,089
variables that<font color="#E5E5E5"> are explicitly marked as</font>

267
00:11:27,959 --> 00:11:32,459
constant<font color="#E5E5E5"> so again to go back</font><font color="#CCCCCC"> to my old</font>

268
00:11:30,089 --> 00:11:34,889
<font color="#E5E5E5">example if you get your Intel processor</font>

269
00:11:32,459 --> 00:11:37,199
out and you say it<font color="#E5E5E5"> man</font>

270
00:11:34,889 --> 00:11:39,600
remainder<font color="#CCCCCC"> -1 you print the results</font><font color="#E5E5E5"> as 0</font>

271
00:11:37,199 --> 00:11:41,809
and that<font color="#CCCCCC"> gives you a sort of a</font>

272
00:11:39,600 --> 00:11:44,220
<font color="#E5E5E5">misleading sense of warmth that your</font>

273
00:11:41,809 --> 00:11:46,740
your your implementation is going<font color="#CCCCCC"> to</font>

274
00:11:44,220 --> 00:11:49,649
produce a<font color="#CCCCCC"> 0 result</font><font color="#E5E5E5"> but what's happening</font>

275
00:11:46,740 --> 00:11:51,180
in this case<font color="#CCCCCC"> is that int main remainder</font>

276
00:11:49,649 --> 00:11:53,519
1 is a cost<font color="#CCCCCC"> expression so it's actually</font>

277
00:11:51,180 --> 00:11:55,859
<font color="#CCCCCC">the compiler</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we places that with a</font>

278
00:11:53,519 --> 00:11:58,079
<font color="#CCCCCC">0 so there's no runtime code</font><font color="#E5E5E5"> being</font>

279
00:11:55,860 --> 00:12:01,370
generated so if you were to<font color="#CCCCCC"> replace this</font>

280
00:11:58,079 --> 00:12:04,109
code<font color="#CCCCCC"> oh I think I have so here's a</font>

281
00:12:01,370 --> 00:12:06,749
here's<font color="#E5E5E5"> this code compiled on Microsoft</font>

282
00:12:04,110 --> 00:12:10,170
Visual Studio with optimization disabled

283
00:12:06,749 --> 00:12:11,999
<font color="#E5E5E5">so you</font><font color="#CCCCCC"> know these these optimizations</font>

284
00:12:10,170 --> 00:12:15,509
are so automatic<font color="#E5E5E5"> that you cannot disable</font>

285
00:12:11,999 --> 00:12:17,610
<font color="#E5E5E5">them they</font><font color="#CCCCCC"> just happen</font><font color="#E5E5E5"> and you can see</font>

286
00:12:15,509 --> 00:12:18,660
that<font color="#E5E5E5"> we're just pushing</font><font color="#CCCCCC"> 0 onto the stack</font>

287
00:12:17,610 --> 00:12:21,509
and<font color="#E5E5E5"> printing it out so there's no</font>

288
00:12:18,660 --> 00:12:23,550
<font color="#E5E5E5">division operation of being generated</font>

289
00:12:21,509 --> 00:12:27,360
<font color="#E5E5E5">here so if you actually want to see</font>

290
00:12:23,550 --> 00:12:29,939
what's<font color="#E5E5E5"> happening</font><font color="#CCCCCC"> you have to use sort of</font>

291
00:12:27,360 --> 00:12:31,110
<font color="#CCCCCC">non-deterministic values and then you</font>

292
00:12:29,939 --> 00:12:34,319
can see that<font color="#CCCCCC"> we're going to generate</font><font color="#E5E5E5"> an</font>

293
00:12:31,110 --> 00:12:37,050
idea of instruction<font color="#E5E5E5"> which will now fault</font>

294
00:12:34,319 --> 00:12:41,339
<font color="#E5E5E5">when you provide it min and minus 1 is</font>

295
00:12:37,050 --> 00:12:42,839
<font color="#E5E5E5">the arguments so so a little lesson</font><font color="#CCCCCC"> here</font>

296
00:12:41,339 --> 00:12:44,569
<font color="#CCCCCC">is</font><font color="#E5E5E5"> that when you're writing these little</font>

297
00:12:42,839 --> 00:12:47,009
tests to test behavior

298
00:12:44,569 --> 00:12:48,660
be very<font color="#E5E5E5"> careful that the program is</font>

299
00:12:47,009 --> 00:12:51,179
doing<font color="#E5E5E5"> something otherwise the compiler</font>

300
00:12:48,660 --> 00:12:52,800
<font color="#CCCCCC">is very very likely to optimize out your</font>

301
00:12:51,179 --> 00:12:54,679
little<font color="#CCCCCC"> test and</font><font color="#E5E5E5"> you're not going to be</font>

302
00:12:52,800 --> 00:12:59,790
testing what you think you were testing

303
00:12:54,679 --> 00:13:02,160
um<font color="#CCCCCC"> ok so this is the</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the kind of</font>

304
00:12:59,790 --> 00:13:04,259
the major<font color="#CCCCCC"> voll that I'm going to chat</font>

305
00:13:02,160 --> 00:13:07,769
<font color="#CCCCCC">about</font><font color="#E5E5E5"> this is the one that Chad and</font><font color="#CCCCCC"> I</font>

306
00:13:04,259 --> 00:13:10,499
published back<font color="#CCCCCC"> in 2008 but you know it's</font>

307
00:13:07,769 --> 00:13:12,300
I mean<font color="#E5E5E5"> the thing</font><font color="#CCCCCC"> is it's</font><font color="#E5E5E5"> not really bold</font>

308
00:13:10,499 --> 00:13:15,029
this is how the compiler works that

309
00:13:12,300 --> 00:13:17,040
still works this way today<font color="#E5E5E5"> so when you</font>

310
00:13:15,029 --> 00:13:20,339
read the C standard<font color="#E5E5E5"> there's a clause</font>

311
00:13:17,040 --> 00:13:21,599
that<font color="#E5E5E5"> says when an expression that has</font>

312
00:13:20,339 --> 00:13:22,710
<font color="#E5E5E5">endured type is added</font><font color="#CCCCCC"> to or subtracted</font>

313
00:13:21,600 --> 00:13:24,330
from point

314
00:13:22,710 --> 00:13:26,640
the result has<font color="#CCCCCC"> a type of</font><font color="#E5E5E5"> the pointer</font>

315
00:13:24,330 --> 00:13:29,960
<font color="#CCCCCC">operand so that's basically just</font>

316
00:13:26,640 --> 00:13:32,370
defining<font color="#E5E5E5"> pointer arithmetic and array</font>

317
00:13:29,960 --> 00:13:34,950
indexing notation is is sort of a

318
00:13:32,370 --> 00:13:38,310
syntactic veneer for<font color="#CCCCCC"> point</font><font color="#E5E5E5"> arithmetic</font><font color="#CCCCCC"> if</font>

319
00:13:34,950 --> 00:13:41,250
you index an array P at index<font color="#E5E5E5"> n it's</font>

320
00:13:38,310 --> 00:13:44,430
just<font color="#E5E5E5"> going to expand to 2p plus and</font>

321
00:13:41,250 --> 00:13:48,900
scaled for the size of the element type

322
00:13:44,430 --> 00:13:50,219
and then be referenced so<font color="#CCCCCC"> C</font><font color="#E5E5E5"> goes further</font>

323
00:13:48,900 --> 00:13:54,030
to<font color="#E5E5E5"> say</font>

324
00:13:50,220 --> 00:13:56,400
<font color="#CCCCCC">I got a laser pointy thing on here I</font><font color="#E5E5E5"> can</font>

325
00:13:54,030 --> 00:13:59,640
remember<font color="#E5E5E5"> here we are</font><font color="#CCCCCC"> so what this</font>

326
00:13:56,400 --> 00:14:02,490
paragraph<font color="#CCCCCC"> says is that you can form</font><font color="#E5E5E5"> this</font>

327
00:13:59,640 --> 00:14:05,850
pointer dereference<font color="#E5E5E5"> this value and you</font>

328
00:14:02,490 --> 00:14:08,970
can<font color="#E5E5E5"> form every pointer up to here and</font>

329
00:14:05,850 --> 00:14:11,160
<font color="#CCCCCC">you can dereference this value</font><font color="#E5E5E5"> and the c</font>

330
00:14:08,970 --> 00:14:13,110
standard requires that<font color="#E5E5E5"> you can form this</font>

331
00:14:11,160 --> 00:14:15,510
pointer okay this is<font color="#E5E5E5"> well-defined</font>

332
00:14:13,110 --> 00:14:18,000
<font color="#E5E5E5">behavior the</font><font color="#CCCCCC"> C standard has to</font><font color="#E5E5E5"> support</font>

333
00:14:15,510 --> 00:14:19,620
<font color="#E5E5E5">the formation</font><font color="#CCCCCC"> this pointer but if you</font>

334
00:14:18,000 --> 00:14:21,840
<font color="#CCCCCC">dereference this value it's undefined</font>

335
00:14:19,620 --> 00:14:24,660
behavior<font color="#E5E5E5"> and if you form this next</font>

336
00:14:21,840 --> 00:14:27,180
pointer it's<font color="#E5E5E5"> also undefined behavior</font><font color="#CCCCCC"> so</font>

337
00:14:24,660 --> 00:14:30,120
what the<font color="#CCCCCC"> c standard allows is that you</font>

338
00:14:27,180 --> 00:14:33,000
can form<font color="#E5E5E5"> the one to four pointer the too</font>

339
00:14:30,120 --> 00:14:35,010
far pointer<font color="#CCCCCC"> and the reason for that was</font>

340
00:14:33,000 --> 00:14:36,300
in the early<font color="#CCCCCC"> days of</font><font color="#E5E5E5"> c programming</font>

341
00:14:35,010 --> 00:14:38,760
people wrote loops where they

342
00:14:36,300 --> 00:14:40,229
incremented<font color="#E5E5E5"> the pointer and then test it</font>

343
00:14:38,760 --> 00:14:42,150
to see if<font color="#E5E5E5"> it was this one</font><font color="#CCCCCC"> and then</font>

344
00:14:40,230 --> 00:14:43,650
<font color="#CCCCCC">stopped the loop and so the state</font><font color="#E5E5E5"> of</font>

345
00:14:42,150 --> 00:14:47,640
<font color="#CCCCCC">standards</font><font color="#E5E5E5"> committee</font><font color="#CCCCCC"> decided to allow</font>

346
00:14:43,650 --> 00:14:53,069
that behavior<font color="#CCCCCC"> and</font><font color="#E5E5E5"> and so it's now</font>

347
00:14:47,640 --> 00:14:57,150
enshrined<font color="#E5E5E5"> in the language okay so so a</font>

348
00:14:53,070 --> 00:15:00,150
typical<font color="#E5E5E5"> thing a</font><font color="#CCCCCC"> c programmer might do if</font>

349
00:14:57,150 --> 00:15:02,750
they've taken<font color="#E5E5E5"> my you know secure coding</font>

350
00:15:00,150 --> 00:15:05,939
in c and<font color="#CCCCCC"> c++ course is they might decide</font>

351
00:15:02,750 --> 00:15:09,390
you<font color="#CCCCCC"> know we should</font><font color="#E5E5E5"> be concerned about</font>

352
00:15:05,940 --> 00:15:13,170
buffer<font color="#CCCCCC"> overflows because they've got</font>

353
00:15:09,390 --> 00:15:15,750
unintended consequences<font color="#CCCCCC"> so to do that</font>

354
00:15:13,170 --> 00:15:18,150
<font color="#E5E5E5">you might have a say a pointer to the</font>

355
00:15:15,750 --> 00:15:21,210
<font color="#CCCCCC">beginning of array pointer to the end of</font>

356
00:15:18,150 --> 00:15:23,250
the<font color="#E5E5E5"> rain you might have a size</font><font color="#CCCCCC"> which you</font>

357
00:15:21,210 --> 00:15:27,600
<font color="#CCCCCC">would express as a size</font><font color="#E5E5E5"> the argument not</font>

358
00:15:23,250 --> 00:15:30,540
an int and<font color="#CCCCCC"> part</font><font color="#E5E5E5"> of my secure coding</font>

359
00:15:27,600 --> 00:15:34,890
course I have<font color="#E5E5E5"> one day committed to</font>

360
00:15:30,540 --> 00:15:36,480
<font color="#E5E5E5">talking about integers so if you you</font>

361
00:15:34,890 --> 00:15:38,189
ever<font color="#E5E5E5"> have time for that</font>

362
00:15:36,480 --> 00:15:40,320
explain why it needs to be side<font color="#CCCCCC"> t but</font>

363
00:15:38,190 --> 00:15:43,860
the easy thing is<font color="#E5E5E5"> just to declare it</font>

364
00:15:40,320 --> 00:15:45,480
<font color="#E5E5E5">size</font><font color="#CCCCCC"> D for now and so we'll do a test</font><font color="#E5E5E5"> to</font>

365
00:15:43,860 --> 00:15:48,329
see if<font color="#E5E5E5"> pointer plus Len is greater than</font>

366
00:15:45,480 --> 00:15:51,000
max that means<font color="#E5E5E5"> we're trying to to</font>

367
00:15:48,329 --> 00:15:53,430
reference a location beyond the bounds

368
00:15:51,000 --> 00:15:55,500
of<font color="#E5E5E5"> the array and so we'll return an</font>

369
00:15:53,430 --> 00:15:57,630
error<font color="#CCCCCC"> condition that</font><font color="#E5E5E5"> case but no matter</font>

370
00:15:55,500 --> 00:15:59,699
what your implementation is what your

371
00:15:57,630 --> 00:16:01,889
model<font color="#E5E5E5"> is there's a bug</font><font color="#CCCCCC"> in this code</font>

372
00:15:59,699 --> 00:16:05,160
which is for very large<font color="#CCCCCC"> values of Len</font>

373
00:16:01,889 --> 00:16:06,920
<font color="#E5E5E5">point applause</font><font color="#CCCCCC"> Len can wrap around which</font>

374
00:16:05,160 --> 00:16:10,260
would create undefined behavior<font color="#CCCCCC"> and</font>

375
00:16:06,920 --> 00:16:12,810
under the hardware<font color="#E5E5E5"> behavior model the</font>

376
00:16:10,260 --> 00:16:14,699
result would typically wrap<font color="#E5E5E5"> around and</font>

377
00:16:12,810 --> 00:16:19,199
point to an<font color="#CCCCCC"> address is actually</font><font color="#E5E5E5"> lower in</font>

378
00:16:14,699 --> 00:16:21,599
memory than pointer<font color="#E5E5E5"> okay so to fix the</font>

379
00:16:19,199 --> 00:16:23,939
bug an experienced<font color="#CCCCCC"> programmer who sort</font>

380
00:16:21,600 --> 00:16:26,579
of<font color="#CCCCCC"> internalize this</font><font color="#E5E5E5"> hardware behavior</font>

381
00:16:23,940 --> 00:16:29,190
model<font color="#E5E5E5"> of undefined behavior</font><font color="#CCCCCC"> might add a</font>

382
00:16:26,579 --> 00:16:31,349
test where they test to see if pointer

383
00:16:29,190 --> 00:16:36,209
plus Len is less the pointer to detect

384
00:16:31,350 --> 00:16:37,980
the the<font color="#E5E5E5"> wraparound behavior okay so the</font>

385
00:16:36,209 --> 00:16:39,329
<font color="#E5E5E5">reason I said experienced programmer</font>

386
00:16:37,980 --> 00:16:40,800
there and I'll give you a<font color="#E5E5E5"> little more</font>

387
00:16:39,329 --> 00:16:42,989
insight<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the C Standards Committee</font>

388
00:16:40,800 --> 00:16:44,670
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> say you're trying to get a feature</font>

389
00:16:42,990 --> 00:16:47,610
<font color="#E5E5E5">or</font><font color="#CCCCCC"> something change in the</font><font color="#E5E5E5"> C standard</font>

390
00:16:44,670 --> 00:16:50,250
<font color="#E5E5E5">the best way to do that is say you know</font>

391
00:16:47,610 --> 00:16:52,649
<font color="#E5E5E5">hey I work for Intel and we've</font><font color="#CCCCCC"> just add</font>

392
00:16:50,250 --> 00:16:56,430
this vectorized instruction but there's

393
00:16:52,649 --> 00:16:58,380
no way to to use<font color="#E5E5E5"> it from C code can we</font>

394
00:16:56,430 --> 00:17:00,209
modify the C language so that

395
00:16:58,380 --> 00:17:02,189
<font color="#E5E5E5">programmers can use our new</font><font color="#CCCCCC"> vectorized</font>

396
00:17:00,209 --> 00:17:04,290
<font color="#E5E5E5">instruction and they'll say yes because</font>

397
00:17:02,190 --> 00:17:06,870
the<font color="#E5E5E5"> C standard very you know</font><font color="#CCCCCC"> they like</font>

398
00:17:04,290 --> 00:17:08,490
to<font color="#CCCCCC"> support hardware</font><font color="#E5E5E5"> you know that's the</font>

399
00:17:06,869 --> 00:17:10,589
purpose is to<font color="#E5E5E5"> give you access to the</font>

400
00:17:08,490 --> 00:17:12,929
<font color="#E5E5E5">hardware okay the second</font><font color="#CCCCCC"> thing you could</font>

401
00:17:10,589 --> 00:17:14,869
do is you can go and say you know we've

402
00:17:12,929 --> 00:17:16,770
noticed that naive programmers

403
00:17:14,869 --> 00:17:19,770
frequently make the following<font color="#E5E5E5"> error</font>

404
00:17:16,770 --> 00:17:21,270
right and it turns<font color="#CCCCCC"> out the C standard</font>

405
00:17:19,770 --> 00:17:24,230
can make does not give a shit<font color="#CCCCCC"> about</font>

406
00:17:21,270 --> 00:17:28,770
naive programmers<font color="#E5E5E5"> okay so that argument</font>

407
00:17:24,230 --> 00:17:30,600
<font color="#E5E5E5">doesn't fly at all you know</font><font color="#CCCCCC"> we had an</font>

408
00:17:28,770 --> 00:17:32,850
<font color="#E5E5E5">hour discussion about some behavior</font>

409
00:17:30,600 --> 00:17:34,740
where no one in the committee knew the

410
00:17:32,850 --> 00:17:36,030
answer<font color="#CCCCCC"> we had to spend an hour kind of</font>

411
00:17:34,740 --> 00:17:38,010
going back and<font color="#CCCCCC"> forth to we could sort</font>

412
00:17:36,030 --> 00:17:39,720
<font color="#CCCCCC">out how</font><font color="#E5E5E5"> something worked and then a guy</font>

413
00:17:38,010 --> 00:17:42,090
<font color="#CCCCCC">from Cisco who doesn't have</font><font color="#E5E5E5"> a compiler</font>

414
00:17:39,720 --> 00:17:44,280
<font color="#E5E5E5">he's got a bunch of developers said and</font>

415
00:17:42,090 --> 00:17:48,260
you expect developers know this and<font color="#E5E5E5"> it</font>

416
00:17:44,280 --> 00:17:48,260
in unison<font color="#E5E5E5"> entirely said yes absolutely</font>

417
00:17:49,630 --> 00:17:54,940
so if you come<font color="#E5E5E5"> to</font><font color="#CCCCCC"> them and you</font><font color="#E5E5E5"> say you</font>

418
00:17:53,230 --> 00:17:57,909
know an experienced<font color="#CCCCCC"> programmer such as</font>

419
00:17:54,940 --> 00:17:59,830
yourself might<font color="#E5E5E5"> make this mistake</font><font color="#CCCCCC"> you've</font>

420
00:17:57,909 --> 00:18:01,690
got a chance of them listen<font color="#CCCCCC"> to you so</font>

421
00:17:59,830 --> 00:18:05,830
that's that's<font color="#E5E5E5"> why it was couched in</font>

422
00:18:01,690 --> 00:18:08,890
those<font color="#CCCCCC"> B terms so so a compiler that</font>

423
00:18:05,830 --> 00:18:13,330
follows a total<font color="#E5E5E5"> license model like GCC</font>

424
00:18:08,890 --> 00:18:15,159
and now clang<font color="#CCCCCC"> may optimize out the first</font>

425
00:18:13,330 --> 00:18:18,010
part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this check leaving the bounds to</font>

426
00:18:15,159 --> 00:18:21,309
feed it<font color="#E5E5E5"> okay so the</font><font color="#CCCCCC"> reason for</font><font color="#E5E5E5"> this is</font>

427
00:18:18,010 --> 00:18:23,950
<font color="#CCCCCC">because if a pointer plus an unsigned</font>

428
00:18:21,309 --> 00:18:26,740
<font color="#E5E5E5">Len compares less than pointer then</font>

429
00:18:23,950 --> 00:18:29,260
undefined behavior has occurred<font color="#E5E5E5"> okay so</font>

430
00:18:26,740 --> 00:18:32,529
the<font color="#CCCCCC"> the exact</font><font color="#E5E5E5"> undefined behavior that</font>

431
00:18:29,260 --> 00:18:35,020
has occurred is that<font color="#E5E5E5"> you know if I take</font>

432
00:18:32,529 --> 00:18:37,000
<font color="#CCCCCC">a pointer to this array and I add a size</font>

433
00:18:35,020 --> 00:18:40,059
and now I'm checking to<font color="#E5E5E5"> see if it</font>

434
00:18:37,000 --> 00:18:41,799
wrapped around<font color="#CCCCCC"> without a doubt I just</font>

435
00:18:40,059 --> 00:18:43,570
try to form a pointer<font color="#E5E5E5"> which was outside</font>

436
00:18:41,799 --> 00:18:45,279
<font color="#CCCCCC">the bounds of the array</font><font color="#E5E5E5"> and by this</font>

437
00:18:43,570 --> 00:18:48,820
language<font color="#E5E5E5"> and the standard that makes</font>

438
00:18:45,279 --> 00:18:55,510
that undefined behavior<font color="#CCCCCC"> okay so this</font>

439
00:18:48,820 --> 00:18:59,620
this<font color="#CCCCCC"> code invokes</font><font color="#E5E5E5"> undefined behavior you</font>

440
00:18:55,510 --> 00:19:01,029
know so consequently<font color="#E5E5E5"> the the compiler</font>

441
00:18:59,620 --> 00:19:03,639
can assume undefined behavior doesn't

442
00:19:01,029 --> 00:19:05,799
<font color="#E5E5E5">occur and it can remove</font><font color="#CCCCCC"> that code is</font>

443
00:19:03,640 --> 00:19:08,289
dead code okay

444
00:19:05,799 --> 00:19:09,429
so that sounds bad<font color="#CCCCCC"> but then you know</font>

445
00:19:08,289 --> 00:19:12,370
when<font color="#E5E5E5"> you look at it he starts to see how</font>

446
00:19:09,429 --> 00:19:13,840
this<font color="#E5E5E5"> comes about right so what's going</font>

447
00:19:12,370 --> 00:19:17,110
<font color="#E5E5E5">on here the optimization is called</font>

448
00:19:13,840 --> 00:19:19,120
algebraic simplification<font color="#CCCCCC"> which you know</font>

449
00:19:17,110 --> 00:19:22,809
<font color="#E5E5E5">sounds like something we all did in</font>

450
00:19:19,120 --> 00:19:26,320
sixth grade algebra<font color="#CCCCCC"> so the the</font>

451
00:19:22,809 --> 00:19:28,270
optimization says that optimization may

452
00:19:26,320 --> 00:19:31,779
be<font color="#CCCCCC"> may be perform</font><font color="#E5E5E5"> for comparisons</font>

453
00:19:28,270 --> 00:19:33,789
between P and<font color="#CCCCCC"> V 1 and P and V 2 where P</font>

454
00:19:31,779 --> 00:19:37,419
<font color="#CCCCCC">is the same pointer and V 1 and V</font><font color="#E5E5E5"> 2 are</font>

455
00:19:33,789 --> 00:19:39,039
integer variables and so total license

456
00:19:37,419 --> 00:19:41,010
<font color="#CCCCCC">model allows that to be reduced to</font>

457
00:19:39,039 --> 00:19:45,820
comparison between V 1<font color="#CCCCCC"> and V 2</font>

458
00:19:41,010 --> 00:19:48,580
however if<font color="#CCCCCC"> v1 or</font><font color="#E5E5E5"> v2 overflow when</font><font color="#CCCCCC"> add it</font>

459
00:19:45,820 --> 00:19:51,399
to P<font color="#CCCCCC"> the results of comparing</font><font color="#E5E5E5"> those two</font>

460
00:19:48,580 --> 00:19:52,689
values directly<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> the same as doing</font>

461
00:19:51,399 --> 00:19:54,820
the arithmetic<font color="#E5E5E5"> and then doing</font><font color="#CCCCCC"> the</font>

462
00:19:52,690 --> 00:19:57,520
<font color="#E5E5E5">comparison and so the one of the fun</font>

463
00:19:54,820 --> 00:20:00,189
things<font color="#CCCCCC"> about</font><font color="#E5E5E5"> digital arithmetic is that</font>

464
00:19:57,520 --> 00:20:02,200
because<font color="#CCCCCC"> of possible</font><font color="#E5E5E5"> overflows computer</font>

465
00:20:00,190 --> 00:20:05,039
arithmetic doesn't<font color="#E5E5E5"> always obey</font>

466
00:20:02,200 --> 00:20:09,850
the algebraic identities of mathematics

467
00:20:05,039 --> 00:20:11,440
<font color="#CCCCCC">so you know so it does there is Matt</font>

468
00:20:09,850 --> 00:20:16,149
there are mathematical<font color="#CCCCCC"> models that</font>

469
00:20:11,440 --> 00:20:19,470
describe<font color="#CCCCCC"> digital arithmetic but they're</font>

470
00:20:16,149 --> 00:20:19,469
not the<font color="#E5E5E5"> ones you learned in sixth grade</font>

471
00:20:19,649 --> 00:20:26,018
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so if you go back to our example</font>

472
00:20:22,480 --> 00:20:27,820
<font color="#CCCCCC">what you'll</font><font color="#E5E5E5"> see is this expression</font>

473
00:20:26,019 --> 00:20:32,019
<font color="#CCCCCC">pointer</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> a little lesson pointer is</font>

474
00:20:27,820 --> 00:20:33,990
the same<font color="#CCCCCC"> we can add zero to the right</font>

475
00:20:32,019 --> 00:20:38,289
<font color="#CCCCCC">hand</font><font color="#E5E5E5"> expression without changing that</font>

476
00:20:33,990 --> 00:20:42,820
and<font color="#E5E5E5"> now basically we have a comparison</font>

477
00:20:38,289 --> 00:20:44,379
<font color="#CCCCCC">of P plus v1 compared to P plus v2 this</font>

478
00:20:42,820 --> 00:20:47,980
can be simplified<font color="#CCCCCC"> to a comparison</font>

479
00:20:44,380 --> 00:20:49,870
<font color="#E5E5E5">between v1 and v2 and lend cannot be</font>

480
00:20:47,980 --> 00:20:52,389
less than zero because<font color="#E5E5E5"> Len is unsigned</font>

481
00:20:49,870 --> 00:20:54,189
<font color="#E5E5E5">so consequently this code doesn't do</font>

482
00:20:52,389 --> 00:20:59,289
anything and the compiler removes it

483
00:20:54,190 --> 00:21:02,860
okay and are consequently<font color="#E5E5E5"> our you know</font>

484
00:20:59,289 --> 00:21:05,320
<font color="#CCCCCC">our balance check has been defeated</font><font color="#E5E5E5"> okay</font>

485
00:21:02,860 --> 00:21:10,029
so once you're aware of<font color="#E5E5E5"> this problem</font>

486
00:21:05,320 --> 00:21:11,649
<font color="#CCCCCC">it's actually quite</font><font color="#E5E5E5"> simple to fix so so</font>

487
00:21:10,029 --> 00:21:13,269
if you know that<font color="#E5E5E5"> pointer</font><font color="#CCCCCC"> is less</font><font color="#E5E5E5"> than or</font>

488
00:21:11,649 --> 00:21:14,949
equal<font color="#E5E5E5"> to max which we do in this case</font>

489
00:21:13,269 --> 00:21:17,470
<font color="#E5E5E5">because pointer points beginning the</font><font color="#CCCCCC"> Ray</font>

490
00:21:14,950 --> 00:21:20,080
max points<font color="#CCCCCC"> at the end</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> just</font>

491
00:21:17,470 --> 00:21:21,639
subtract<font color="#E5E5E5"> a pointer from both sides and</font>

492
00:21:20,080 --> 00:21:24,610
compare to see if Len is greater than

493
00:21:21,639 --> 00:21:26,668
<font color="#CCCCCC">maximize pointer</font><font color="#E5E5E5"> so this wraparound</font>

494
00:21:24,610 --> 00:21:28,959
because max is<font color="#CCCCCC"> greater than pointer and</font>

495
00:21:26,669 --> 00:21:31,389
consequently there is<font color="#E5E5E5"> no undefined</font>

496
00:21:28,960 --> 00:21:33,970
behavior here and the compiler is

497
00:21:31,389 --> 00:21:35,469
required to<font color="#CCCCCC"> evaluate this</font><font color="#E5E5E5"> expression at</font>

498
00:21:33,970 --> 00:21:39,220
runtime<font color="#CCCCCC"> to generate the code</font><font color="#E5E5E5"> and</font>

499
00:21:35,470 --> 00:21:41,620
evaluate<font color="#E5E5E5"> the expression so so this code</font>

500
00:21:39,220 --> 00:21:44,380
will<font color="#E5E5E5"> always succeed</font><font color="#CCCCCC"> and it's a very</font><font color="#E5E5E5"> easy</font>

501
00:21:41,620 --> 00:21:46,600
fix to<font color="#CCCCCC"> make but you know</font><font color="#E5E5E5"> developers are</font>

502
00:21:44,380 --> 00:21:48,880
<font color="#CCCCCC">know is aware of this</font><font color="#E5E5E5"> and in</font><font color="#CCCCCC"> fact this</font>

503
00:21:46,600 --> 00:21:51,129
<font color="#E5E5E5">particular defect occurred in some in</font>

504
00:21:48,880 --> 00:21:53,110
the plan<font color="#CCCCCC"> nine code written</font><font color="#E5E5E5"> at Bell Labs</font>

505
00:21:51,130 --> 00:21:54,519
<font color="#E5E5E5">so you know when I say experienced</font>

506
00:21:53,110 --> 00:21:58,769
programmers make this mistake<font color="#E5E5E5"> you know</font>

507
00:21:54,519 --> 00:22:02,559
those guys<font color="#E5E5E5"> are pretty pretty experienced</font>

508
00:21:58,769 --> 00:22:05,470
<font color="#CCCCCC">okay so thanks to</font><font color="#E5E5E5"> the magic of</font><font color="#CCCCCC"> Google</font>

509
00:22:02,559 --> 00:22:07,658
and the<font color="#CCCCCC"> internet</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can google the</font>

510
00:22:05,470 --> 00:22:11,980
history of this on like the GCC devilís

511
00:22:07,659 --> 00:22:14,590
and<font color="#E5E5E5"> you'll see that a</font><font color="#CCCCCC"> lot of people said</font>

512
00:22:11,980 --> 00:22:18,039
<font color="#CCCCCC">a lot of bad things</font><font color="#E5E5E5"> to me without try</font><font color="#CCCCCC"> to</font>

513
00:22:14,590 --> 00:22:19,870
<font color="#E5E5E5">or this problem on the</font><font color="#CCCCCC"> GCT devilís so</font>

514
00:22:18,039 --> 00:22:22,658
you know one<font color="#E5E5E5"> thing that</font><font color="#CCCCCC"> developers came</font>

515
00:22:19,870 --> 00:22:24,820
back with was they said well hey if you

516
00:22:22,659 --> 00:22:26,649
have something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> this actually</font>

517
00:22:24,820 --> 00:22:28,840
<font color="#CCCCCC">works your advantage because it'll</font>

518
00:22:26,649 --> 00:22:34,178
simplify this to comparison between<font color="#CCCCCC"> N</font>

519
00:22:28,840 --> 00:22:35,860
and<font color="#CCCCCC"> 100 and that eliminates</font><font color="#E5E5E5"> a possible</font>

520
00:22:34,179 --> 00:22:38,830
wraparound in both those expressions so

521
00:22:35,860 --> 00:22:40,600
this this would the obstetrician here

522
00:22:38,830 --> 00:22:43,330
would eliminate undefined behaviors<font color="#E5E5E5"> that</font>

523
00:22:40,600 --> 00:22:44,980
makes it a<font color="#CCCCCC"> good optimization in</font><font color="#E5E5E5"> this</font>

524
00:22:43,330 --> 00:22:47,100
case is<font color="#CCCCCC"> probably not</font><font color="#E5E5E5"> a big deal unless</font>

525
00:22:44,980 --> 00:22:52,059
<font color="#CCCCCC">one expression wraps</font><font color="#E5E5E5"> but not the other</font>

526
00:22:47,100 --> 00:22:54,189
so<font color="#E5E5E5"> but you know you don't you</font><font color="#CCCCCC"> don't want</font>

527
00:22:52,059 --> 00:22:55,779
to ship this code<font color="#E5E5E5"> and the reason you</font>

528
00:22:54,190 --> 00:22:57,580
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> want to ship this code is because</font>

529
00:22:55,779 --> 00:22:59,919
optimizations are optional<font color="#E5E5E5"> right they're</font>

530
00:22:57,580 --> 00:23:01,539
<font color="#CCCCCC">not required you</font><font color="#E5E5E5"> don't want to depend on</font>

531
00:22:59,919 --> 00:23:04,119
an optimization<font color="#E5E5E5"> to make your code</font>

532
00:23:01,539 --> 00:23:06,100
correct<font color="#CCCCCC"> and so as a developer what you'd</font>

533
00:23:04,119 --> 00:23:09,189
want<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> perform this</font>

534
00:23:06,100 --> 00:23:11,439
simplification yourself and and ship

535
00:23:09,190 --> 00:23:13,779
this code so and not<font color="#E5E5E5"> rely on the</font>

536
00:23:11,440 --> 00:23:16,509
compiler<font color="#E5E5E5"> to make your code correct now</font>

537
00:23:13,779 --> 00:23:19,539
the other thing I'll say<font color="#CCCCCC"> is you know a</font>

538
00:23:16,509 --> 00:23:22,299
lot of<font color="#E5E5E5"> developers would spot this code</font>

539
00:23:19,539 --> 00:23:24,340
<font color="#E5E5E5">but frequently the problem is that this</font>

540
00:23:22,299 --> 00:23:26,019
sort of thing<font color="#CCCCCC"> is hidden in macros so</font>

541
00:23:24,340 --> 00:23:28,480
it's not apparent<font color="#E5E5E5"> when you</font><font color="#CCCCCC"> look at the</font>

542
00:23:26,019 --> 00:23:29,950
source code<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> apparent</font>

543
00:23:28,480 --> 00:23:34,619
<font color="#CCCCCC">this is happening</font><font color="#E5E5E5"> until you see the</font>

544
00:23:29,950 --> 00:23:36,909
macro<font color="#E5E5E5"> expansion no questions so far</font><font color="#CCCCCC"> I</font>

545
00:23:34,619 --> 00:23:41,379
scared a couple<font color="#CCCCCC"> people away they're like</font>

546
00:23:36,909 --> 00:23:43,269
wait a second I'm a<font color="#CCCCCC"> CISO and this guy is</font>

547
00:23:41,379 --> 00:23:49,748
speaking some odd<font color="#E5E5E5"> language I don't</font>

548
00:23:43,269 --> 00:23:52,029
understand<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so the behavior points</font>

549
00:23:49,749 --> 00:23:54,369
<font color="#E5E5E5">are overflow change as of the following</font>

550
00:23:52,029 --> 00:23:56,379
versions of the compiler<font color="#CCCCCC"> I believe we're</font>

551
00:23:54,369 --> 00:23:58,059
now on<font color="#CCCCCC"> GCC</font><font color="#E5E5E5"> seven one so this has</font>

552
00:23:56,379 --> 00:24:00,879
happened<font color="#CCCCCC"> a while ago but one of</font><font color="#E5E5E5"> the</font>

553
00:23:58,059 --> 00:24:02,918
things you'll see here is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this</font>

554
00:24:00,879 --> 00:24:06,009
changed<font color="#E5E5E5"> in a maintenance release okay</font>

555
00:24:02,919 --> 00:24:09,129
and and when you<font color="#CCCCCC"> look at when you look</font>

556
00:24:06,009 --> 00:24:10,330
at portability behaviors undefined

557
00:24:09,129 --> 00:24:12,158
making implementation defined

558
00:24:10,330 --> 00:24:15,869
unspecified behavior and undefined

559
00:24:12,159 --> 00:24:17,980
behaviors are all portability issues<font color="#E5E5E5"> but</font>

560
00:24:15,869 --> 00:24:21,759
undefined behavior is the<font color="#E5E5E5"> most severe</font>

561
00:24:17,980 --> 00:24:24,909
<font color="#E5E5E5">right because there is no specification</font>

562
00:24:21,759 --> 00:24:27,820
<font color="#CCCCCC">of that behavior and so the compiler</font><font color="#E5E5E5"> can</font>

563
00:24:24,909 --> 00:24:29,920
do whatever it<font color="#CCCCCC"> wants</font><font color="#E5E5E5"> right and</font>

564
00:24:27,820 --> 00:24:31,870
and and you know I say a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> things</font>

565
00:24:29,920 --> 00:24:33,940
that<font color="#E5E5E5"> sound like compiler writers evil</font>

566
00:24:31,870 --> 00:24:37,330
but they're<font color="#CCCCCC"> they're you know</font><font color="#E5E5E5"> they're</font>

567
00:24:33,940 --> 00:24:39,820
trying to do the best<font color="#CCCCCC"> they</font><font color="#E5E5E5"> can for your</font>

568
00:24:37,330 --> 00:24:41,439
<font color="#CCCCCC">codebase right so so usually what</font>

569
00:24:39,820 --> 00:24:43,809
they're doing is when they see undefined

570
00:24:41,440 --> 00:24:46,030
behavior<font color="#E5E5E5"> they take a guess as to</font><font color="#CCCCCC"> what</font>

571
00:24:43,809 --> 00:24:48,220
maybe you were after<font color="#CCCCCC"> right and but if</font>

572
00:24:46,030 --> 00:24:49,600
they guess wrong<font color="#CCCCCC"> if their guest</font><font color="#E5E5E5"> doesn't</font>

573
00:24:48,220 --> 00:24:51,490
meet your<font color="#E5E5E5"> expectations then you're going</font>

574
00:24:49,600 --> 00:24:53,169
<font color="#E5E5E5">to have a defect and the other thing</font>

575
00:24:51,490 --> 00:24:55,300
that happens<font color="#E5E5E5"> is undefined behaviors is</font>

576
00:24:53,170 --> 00:24:57,550
that you know compiler writers look at

577
00:24:55,300 --> 00:25:00,010
these<font color="#E5E5E5"> as opportunities</font><font color="#CCCCCC"> for optimizations</font>

578
00:24:57,550 --> 00:25:01,419
and so when they you<font color="#E5E5E5"> know when they're</font>

579
00:25:00,010 --> 00:25:02,710
done<font color="#E5E5E5"> writing optimizations they'll</font>

580
00:25:01,420 --> 00:25:05,440
release it is part of a maintenance

581
00:25:02,710 --> 00:25:07,450
<font color="#E5E5E5">release and if your code had undefined</font>

582
00:25:05,440 --> 00:25:10,570
behaviors it may have worked<font color="#CCCCCC"> previously</font>

583
00:25:07,450 --> 00:25:12,580
and now<font color="#E5E5E5"> it might might fail because the</font>

584
00:25:10,570 --> 00:25:16,990
compiler now deals with<font color="#CCCCCC"> that undefined</font>

585
00:25:12,580 --> 00:25:19,419
behavior differently<font color="#CCCCCC"> so this particular</font>

586
00:25:16,990 --> 00:25:21,460
<font color="#CCCCCC">optimizations perform</font><font color="#E5E5E5"> by default and</font><font color="#CCCCCC"> Oh</font>

587
00:25:19,420 --> 00:25:25,360
<font color="#CCCCCC">to nabob include optimizing for space</font>

588
00:25:21,460 --> 00:25:27,280
not performed<font color="#E5E5E5"> Oh 100 0 it can be enabled</font>

589
00:25:25,360 --> 00:25:30,070
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a strict overflow option or</font>

590
00:25:27,280 --> 00:25:32,230
disabled<font color="#E5E5E5"> 402 and above with the no</font>

591
00:25:30,070 --> 00:25:34,360
strict overflow option the only<font color="#CCCCCC"> way you</font>

592
00:25:32,230 --> 00:25:36,429
could<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so here's how this</font>

593
00:25:34,360 --> 00:25:39,100
optimization came about there's a guy

594
00:25:36,429 --> 00:25:41,410
named Ian<font color="#CCCCCC"> Lance</font><font color="#E5E5E5"> Taylor and he's at</font>

595
00:25:39,100 --> 00:25:45,070
Google and he implemented this

596
00:25:41,410 --> 00:25:48,400
optimization<font color="#CCCCCC"> okay and of all the</font><font color="#E5E5E5"> people</font>

597
00:25:45,070 --> 00:25:49,990
on the<font color="#CCCCCC"> GCC</font><font color="#E5E5E5"> dev list</font><font color="#CCCCCC"> you know he was the</font>

598
00:25:48,400 --> 00:25:51,340
<font color="#E5E5E5">only one who didn't you know scream with</font>

599
00:25:49,990 --> 00:25:54,340
<font color="#CCCCCC">me he was the only one who had like a</font>

600
00:25:51,340 --> 00:25:57,669
<font color="#E5E5E5">rational</font><font color="#CCCCCC"> conversation with me</font><font color="#E5E5E5"> and and</font>

601
00:25:54,340 --> 00:26:01,059
basically<font color="#E5E5E5"> okay here's Google's kind of</font>

602
00:25:57,670 --> 00:26:03,309
deal<font color="#E5E5E5"> right</font><font color="#CCCCCC"> they have a few applications</font>

603
00:26:01,059 --> 00:26:05,530
they run a lot<font color="#E5E5E5"> okay so they have</font><font color="#CCCCCC"> these</font>

604
00:26:03,309 --> 00:26:07,059
farms<font color="#E5E5E5"> and computers</font><font color="#CCCCCC"> and they looked at</font>

605
00:26:05,530 --> 00:26:09,370
you<font color="#CCCCCC"> know they looked at</font><font color="#E5E5E5"> this</font>

606
00:26:07,059 --> 00:26:12,250
optimization<font color="#E5E5E5"> then they discovered but we</font>

607
00:26:09,370 --> 00:26:14,678
could get a half percent<font color="#E5E5E5"> improvement</font>

608
00:26:12,250 --> 00:26:17,370
that would allow us<font color="#E5E5E5"> to get rid and we</font>

609
00:26:14,679 --> 00:26:20,950
know<font color="#E5E5E5"> our code doesn't</font><font color="#CCCCCC"> have this error</font>

610
00:26:17,370 --> 00:26:22,719
<font color="#E5E5E5">right and they'll give us a half percent</font>

611
00:26:20,950 --> 00:26:24,460
<font color="#CCCCCC">improvement we could get rid of this</font>

612
00:26:22,720 --> 00:26:26,860
<font color="#CCCCCC">number of machines and</font><font color="#E5E5E5"> save four hundred</font>

613
00:26:24,460 --> 00:26:28,960
thousand<font color="#E5E5E5"> dollars a</font><font color="#CCCCCC"> year</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so it</font>

614
00:26:26,860 --> 00:26:31,360
looks<font color="#CCCCCC"> really good to them to do this</font>

615
00:26:28,960 --> 00:26:33,640
<font color="#CCCCCC">optimization</font><font color="#E5E5E5"> so they do it</font><font color="#CCCCCC"> and then</font>

616
00:26:31,360 --> 00:26:35,800
everyone<font color="#CCCCCC"> else gets this</font><font color="#E5E5E5"> and your</font>

617
00:26:33,640 --> 00:26:39,100
<font color="#CCCCCC">codebase maybe does have this problem</font>

618
00:26:35,800 --> 00:26:41,110
<font color="#E5E5E5">right so so we had discussion with Ian</font>

619
00:26:39,100 --> 00:26:44,260
<font color="#E5E5E5">and base</font>

620
00:26:41,110 --> 00:26:47,159
they<font color="#E5E5E5"> they kept this optimization end</font>

621
00:26:44,260 --> 00:26:54,400
right<font color="#CCCCCC"> but what we agreed was that they</font>

622
00:26:47,160 --> 00:26:55,900
they set a flag<font color="#CCCCCC"> - sorry</font><font color="#E5E5E5"> -</font><font color="#CCCCCC"> to notify you</font>

623
00:26:54,400 --> 00:26:58,300
that the<font color="#CCCCCC"> optimization was being</font>

624
00:26:55,900 --> 00:27:00,520
performed<font color="#E5E5E5"> so what you can do now is</font><font color="#CCCCCC"> you</font>

625
00:26:58,300 --> 00:27:02,649
<font color="#CCCCCC">can set strict</font><font color="#E5E5E5"> overflow equals n where n</font>

626
00:27:00,520 --> 00:27:04,570
is<font color="#CCCCCC"> greater</font><font color="#E5E5E5"> than or equal to 3 and now</font>

627
00:27:02,650 --> 00:27:07,300
the<font color="#CCCCCC"> compiler will</font><font color="#E5E5E5"> warn when this</font>

628
00:27:04,570 --> 00:27:10,120
optimization is taking<font color="#E5E5E5"> place</font><font color="#CCCCCC"> now the</font>

629
00:27:07,300 --> 00:27:12,550
problem is this is<font color="#CCCCCC"> not included in wall</font>

630
00:27:10,120 --> 00:27:14,590
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> and probably the only way you would</font>

631
00:27:12,550 --> 00:27:17,290
<font color="#E5E5E5">find out</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> this is if</font><font color="#CCCCCC"> you came to</font><font color="#E5E5E5"> my</font>

632
00:27:14,590 --> 00:27:19,360
talk<font color="#CCCCCC"> and if you came to</font><font color="#E5E5E5"> my talk you</font>

633
00:27:17,290 --> 00:27:22,659
probably know not to have this undefined

634
00:27:19,360 --> 00:27:27,580
behavior so so today this is<font color="#CCCCCC"> still you</font>

635
00:27:22,660 --> 00:27:31,180
<font color="#E5E5E5">know a pretty significant problem</font><font color="#CCCCCC"> okay</font>

636
00:27:27,580 --> 00:27:33,070
so there's a bunch<font color="#E5E5E5"> of GCC options F</font>

637
00:27:31,180 --> 00:27:36,720
strict overflow allows the compiler<font color="#E5E5E5"> to</font>

638
00:27:33,070 --> 00:27:39,220
<font color="#E5E5E5">assume strict signed overflow behavior</font>

639
00:27:36,720 --> 00:27:41,200
signed arithmetic overflow undefined

640
00:27:39,220 --> 00:27:43,630
behavior so the<font color="#CCCCCC"> compiler will</font><font color="#E5E5E5"> assume</font>

641
00:27:41,200 --> 00:27:46,060
that it<font color="#E5E5E5"> doesn't happen and that permits</font>

642
00:27:43,630 --> 00:27:48,900
aggressive optimization<font color="#E5E5E5"> so for example</font>

643
00:27:46,060 --> 00:27:51,370
if you write I plus penny greater than I

644
00:27:48,900 --> 00:27:55,060
the compiler would just assume<font color="#E5E5E5"> that's</font>

645
00:27:51,370 --> 00:27:57,790
always true for<font color="#E5E5E5"> any sign value</font><font color="#CCCCCC"> I and of</font>

646
00:27:55,060 --> 00:28:01,450
course that's only<font color="#E5E5E5"> true if that that</font>

647
00:27:57,790 --> 00:28:04,510
expression<font color="#E5E5E5"> doesn't wrap around so when</font>

648
00:28:01,450 --> 00:28:06,820
<font color="#E5E5E5">this option is in effect any attempt</font><font color="#CCCCCC"> to</font>

649
00:28:04,510 --> 00:28:13,210
determine<font color="#CCCCCC"> okay so this is kind of a key</font>

650
00:28:06,820 --> 00:28:15,760
to this you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> so most the worst code</font>

651
00:28:13,210 --> 00:28:19,210
is code that's written for<font color="#E5E5E5"> security</font>

652
00:28:15,760 --> 00:28:22,320
either by developers or by security

653
00:28:19,210 --> 00:28:26,710
folks<font color="#E5E5E5"> okay and part of the reason is</font>

654
00:28:22,320 --> 00:28:28,000
<font color="#E5E5E5">it's it's</font><font color="#CCCCCC"> very easy to invoke undefined</font>

655
00:28:26,710 --> 00:28:30,490
behavior when you're<font color="#E5E5E5"> testing for</font>

656
00:28:28,000 --> 00:28:32,590
undefined behavior<font color="#E5E5E5"> right so you kind of</font>

657
00:28:30,490 --> 00:28:35,140
say hey does this undefined behavior

658
00:28:32,590 --> 00:28:36,939
<font color="#E5E5E5">exist and the compiler says oh he's just</font>

659
00:28:35,140 --> 00:28:39,790
<font color="#E5E5E5">invoke undefined behavior and they take</font>

660
00:28:36,940 --> 00:28:42,370
your<font color="#CCCCCC"> tests away so your</font><font color="#E5E5E5"> test disappears</font>

661
00:28:39,790 --> 00:28:43,930
<font color="#E5E5E5">so when you're writing tests for</font>

662
00:28:42,370 --> 00:28:46,090
undefined behavior for security

663
00:28:43,930 --> 00:28:49,650
vulnerabilities<font color="#CCCCCC"> you have to be very</font>

664
00:28:46,090 --> 00:28:55,029
careful not to<font color="#CCCCCC"> invoke undefined behavior</font>

665
00:28:49,650 --> 00:28:57,399
<font color="#CCCCCC">so FV instructs GCC to</font>

666
00:28:55,029 --> 00:28:59,259
assume that<font color="#CCCCCC"> signed</font><font color="#E5E5E5"> arithmetic overflow</font>

667
00:28:57,399 --> 00:29:01,928
of addition<font color="#CCCCCC"> subtraction multiplication</font>

668
00:28:59,259 --> 00:29:05,529
will wrap around<font color="#E5E5E5"> so it's similar to no</font>

669
00:29:01,929 --> 00:29:07,629
strict overflow and it will disable

670
00:29:05,529 --> 00:29:10,389
<font color="#E5E5E5">optimizations assume integer overflow</font>

671
00:29:07,629 --> 00:29:13,119
behaviors undefined<font color="#CCCCCC"> so this is the</font>

672
00:29:10,389 --> 00:29:15,820
option<font color="#CCCCCC"> that</font><font color="#E5E5E5"> was enabled for the</font><font color="#CCCCCC"> Java</font>

673
00:29:13,119 --> 00:29:17,428
front-end as required by the<font color="#E5E5E5"> Java</font>

674
00:29:15,820 --> 00:29:20,139
language specification so<font color="#E5E5E5"> Java language</font>

675
00:29:17,429 --> 00:29:22,389
Java language only<font color="#E5E5E5"> has signed integers</font>

676
00:29:20,139 --> 00:29:26,099
<font color="#E5E5E5">and the sign integers have well-defined</font>

677
00:29:22,389 --> 00:29:28,149
wraparound behavior in C you<font color="#E5E5E5"> have</font>

678
00:29:26,099 --> 00:29:30,489
unsigned integers which have

679
00:29:28,149 --> 00:29:33,008
well-defined wraparound behavior<font color="#E5E5E5"> and you</font>

680
00:29:30,489 --> 00:29:34,629
have sign into you have signed integers

681
00:29:33,009 --> 00:29:38,590
which have undefined<font color="#E5E5E5"> behavior on</font>

682
00:29:34,629 --> 00:29:40,178
overflow<font color="#CCCCCC"> and of course now she</font><font color="#E5E5E5"> doesn't</font>

683
00:29:38,590 --> 00:29:44,549
<font color="#E5E5E5">have a Java front-end anymore it just</font>

684
00:29:40,179 --> 00:29:44,549
<font color="#E5E5E5">got removed as of</font><font color="#CCCCCC"> 71</font>

685
00:29:47,039 --> 00:29:52,539
<font color="#CCCCCC">okay so strict over 4 equals n this of</font>

686
00:29:50,529 --> 00:29:56,679
course<font color="#CCCCCC"> only applies when strict overflow</font>

687
00:29:52,539 --> 00:29:59,529
is active<font color="#CCCCCC"> right so in other words this</font>

688
00:29:56,679 --> 00:30:01,840
flag<font color="#CCCCCC"> to diagnose this problem</font><font color="#E5E5E5"> this</font>

689
00:29:59,529 --> 00:30:03,429
optimization<font color="#E5E5E5"> is only going to be</font>

690
00:30:01,840 --> 00:30:06,970
triggered<font color="#E5E5E5"> when you're performing the</font>

691
00:30:03,429 --> 00:30:08,559
optimization so if you so you have to

692
00:30:06,970 --> 00:30:10,720
make<font color="#E5E5E5"> sure that you're</font><font color="#CCCCCC"> optimizing your</font>

693
00:30:08,559 --> 00:30:17,769
code in order<font color="#E5E5E5"> to detect these</font>

694
00:30:10,720 --> 00:30:22,869
optimization errors<font color="#E5E5E5"> so there's three</font>

695
00:30:17,769 --> 00:30:24,909
warning levels<font color="#E5E5E5"> so an optimization which</font>

696
00:30:22,869 --> 00:30:27,459
assumes find overflow doesn't occur<font color="#CCCCCC"> SATA</font>

697
00:30:24,909 --> 00:30:29,049
yeah<font color="#E5E5E5"> this is always kind of the promisee</font>

698
00:30:27,460 --> 00:30:31,840
<font color="#E5E5E5">right so one of the</font><font color="#CCCCCC"> premises of the</font><font color="#E5E5E5"> C</font>

699
00:30:29,049 --> 00:30:35,529
<font color="#CCCCCC">languages trust the programmer</font><font color="#E5E5E5"> right and</font>

700
00:30:31,840 --> 00:30:37,209
<font color="#E5E5E5">and a good</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> that is say you take</font>

701
00:30:35,529 --> 00:30:39,729
an<font color="#CCCCCC"> INT and</font><font color="#E5E5E5"> you assign it</font><font color="#CCCCCC"> to a short</font>

702
00:30:37,210 --> 00:30:42,519
<font color="#CCCCCC">write the compiler will look at</font><font color="#E5E5E5"> that and</font>

703
00:30:39,729 --> 00:30:46,479
think huh that looks pretty dodgy<font color="#CCCCCC"> right</font>

704
00:30:42,519 --> 00:30:48,399
<font color="#E5E5E5">I mean clearly you can't store all the</font>

705
00:30:46,479 --> 00:30:50,679
values<font color="#E5E5E5"> that we represent as an</font><font color="#CCCCCC"> int</font><font color="#E5E5E5"> in a</font>

706
00:30:48,399 --> 00:30:53,799
short but we're going<font color="#E5E5E5"> to trust</font><font color="#CCCCCC"> the</font>

707
00:30:50,679 --> 00:30:55,330
<font color="#E5E5E5">programmer</font><font color="#CCCCCC"> and we're going</font><font color="#E5E5E5"> to trust</font><font color="#CCCCCC"> that</font>

708
00:30:53,799 --> 00:30:57,399
the programmer knows<font color="#CCCCCC"> that the range</font><font color="#E5E5E5"> of</font>

709
00:30:55,330 --> 00:30:58,840
values being<font color="#E5E5E5"> stored in this integer can</font>

710
00:30:57,399 --> 00:31:01,029
<font color="#E5E5E5">be represented as a short we're going to</font>

711
00:30:58,840 --> 00:31:03,970
go ahead and make<font color="#CCCCCC"> that conversion</font><font color="#E5E5E5"> and</font>

712
00:31:01,029 --> 00:31:06,700
the same thing is true with these this

713
00:31:03,970 --> 00:31:08,450
code right<font color="#CCCCCC"> these expressions don't</font>

714
00:31:06,700 --> 00:31:14,570
necessarily overflow it depends

715
00:31:08,450 --> 00:31:17,390
on the<font color="#E5E5E5"> the values that they take so at a</font>

716
00:31:14,570 --> 00:31:18,950
setting<font color="#E5E5E5"> of</font><font color="#CCCCCC"> one it will warn about cases</font>

717
00:31:17,390 --> 00:31:21,790
<font color="#CCCCCC">that are both questionable and</font><font color="#E5E5E5"> easy to</font>

718
00:31:18,950 --> 00:31:24,290
avoid such as X plus 1<font color="#E5E5E5"> greater than X</font>

719
00:31:21,790 --> 00:31:27,710
<font color="#E5E5E5">with strict overflow the compiler will</font>

720
00:31:24,290 --> 00:31:30,530
simplify this to<font color="#CCCCCC"> 1 and this</font><font color="#E5E5E5"> is the the</font>

721
00:31:27,710 --> 00:31:32,840
<font color="#CCCCCC">only level you that's enabled by wall</font>

722
00:31:30,530 --> 00:31:36,470
<font color="#E5E5E5">higher levels aren't and have to be</font>

723
00:31:32,840 --> 00:31:38,929
explicitly requested<font color="#CCCCCC"> so</font><font color="#E5E5E5"> strict</font><font color="#CCCCCC"> air</font><font color="#E5E5E5"> flow</font>

724
00:31:36,470 --> 00:31:40,730
equals<font color="#CCCCCC"> to</font><font color="#E5E5E5"> will tell you about other</font>

725
00:31:38,930 --> 00:31:42,920
cases where comparisons simplify to a

726
00:31:40,730 --> 00:31:45,130
constant<font color="#E5E5E5"> so for example if you take the</font>

727
00:31:42,920 --> 00:31:49,150
absolute value of a signed integer<font color="#E5E5E5"> value</font>

728
00:31:45,130 --> 00:31:51,770
<font color="#CCCCCC">it will</font><font color="#E5E5E5"> be turning</font><font color="#CCCCCC"> negative values for</font>

729
00:31:49,150 --> 00:31:54,830
<font color="#E5E5E5">you know the most negative so if you say</font>

730
00:31:51,770 --> 00:31:56,900
absolute value<font color="#E5E5E5"> of int</font><font color="#CCCCCC"> men the answers</font>

731
00:31:54,830 --> 00:32:02,379
<font color="#E5E5E5">int men you get the same</font><font color="#CCCCCC"> negative value</font>

732
00:31:56,900 --> 00:32:10,420
back and that's because on a to stop the

733
00:32:02,380 --> 00:32:13,040
<font color="#E5E5E5">the negation of in men so level</font><font color="#CCCCCC"> 3 is the</font>

734
00:32:10,420 --> 00:32:15,770
<font color="#E5E5E5">also</font><font color="#CCCCCC"> one of other cases we're comparing</font>

735
00:32:13,040 --> 00:32:17,659
<font color="#CCCCCC">as simple comparison simplified</font><font color="#E5E5E5"> for</font>

736
00:32:15,770 --> 00:32:20,210
example<font color="#E5E5E5"> X plus 1 greater than Y being</font>

737
00:32:17,660 --> 00:32:22,160
simplified to<font color="#E5E5E5"> X greater than</font><font color="#CCCCCC"> 0 and this</font>

738
00:32:20,210 --> 00:32:25,460
is the<font color="#CCCCCC"> lowest</font><font color="#E5E5E5"> warning level which will</font>

739
00:32:22,160 --> 00:32:27,410
warn on the specific optimization I was

740
00:32:25,460 --> 00:32:31,070
describing<font color="#E5E5E5"> earlier that eliminates the</font>

741
00:32:27,410 --> 00:32:34,010
bounds check<font color="#E5E5E5"> strict overflow because 4</font>

742
00:32:31,070 --> 00:32:36,290
will<font color="#CCCCCC"> also warn on other simplifications</font>

743
00:32:34,010 --> 00:32:38,450
like this arithmetic simplification

744
00:32:36,290 --> 00:32:41,920
which I would<font color="#E5E5E5"> think in almost all cases</font>

745
00:32:38,450 --> 00:32:45,170
<font color="#E5E5E5">you would want to have this and then 5</font>

746
00:32:41,920 --> 00:32:51,110
<font color="#CCCCCC">you know will warn about cases where the</font>

747
00:32:45,170 --> 00:32:53,060
compiler reduces the magnitude<font color="#CCCCCC"> so so</font>

748
00:32:51,110 --> 00:32:56,000
we've some of the work I've done in the

749
00:32:53,060 --> 00:32:59,750
C Standards Committee we we<font color="#CCCCCC"> introduced a</font>

750
00:32:56,000 --> 00:33:02,720
<font color="#CCCCCC">C</font><font color="#E5E5E5"> analyze ability annex into the C 11</font>

751
00:32:59,750 --> 00:33:05,660
standard<font color="#E5E5E5"> it's a normative but optional</font>

752
00:33:02,720 --> 00:33:09,140
annex<font color="#CCCCCC"> so not everyone has</font><font color="#E5E5E5"> to implement</font>

753
00:33:05,660 --> 00:33:11,210
<font color="#E5E5E5">it</font><font color="#CCCCCC"> I know for certain the Oracle you</font>

754
00:33:09,140 --> 00:33:14,660
know the old<font color="#CCCCCC"> Sun C compiler guys they're</font>

755
00:33:11,210 --> 00:33:16,520
implementing those annex so what we did

756
00:33:14,660 --> 00:33:18,710
was<font color="#CCCCCC"> we defined we added a couple</font>

757
00:33:16,520 --> 00:33:22,110
<font color="#CCCCCC">definitions so we defined out about</font>

758
00:33:18,710 --> 00:33:24,840
store and we<font color="#CCCCCC"> found</font><font color="#E5E5E5"> defined</font>

759
00:33:22,110 --> 00:33:26,790
<font color="#E5E5E5">undefined behavior as undefined behavior</font>

760
00:33:24,840 --> 00:33:30,149
that doesn't<font color="#E5E5E5"> perform an out of bounds</font>

761
00:33:26,790 --> 00:33:32,220
store and then<font color="#E5E5E5"> we define</font><font color="#CCCCCC"> the term</font>

762
00:33:30,150 --> 00:33:33,900
critical undefined behavior was which<font color="#E5E5E5"> is</font>

763
00:33:32,220 --> 00:33:35,730
basically the<font color="#E5E5E5"> old-style critical and</font>

764
00:33:33,900 --> 00:33:38,310
defined behavior<font color="#E5E5E5"> so there are by the way</font>

765
00:33:35,730 --> 00:33:41,460
200<font color="#E5E5E5"> explicit undefined behaviors in the</font>

766
00:33:38,310 --> 00:33:44,190
C language<font color="#E5E5E5"> and all 200 of them used to</font>

767
00:33:41,460 --> 00:33:48,500
<font color="#E5E5E5">be critical and defined behaviors so the</font>

768
00:33:44,190 --> 00:33:51,090
requirement is that<font color="#E5E5E5"> basically besides a</font>

769
00:33:48,500 --> 00:33:54,060
short list of critical<font color="#E5E5E5"> undefined</font>

770
00:33:51,090 --> 00:33:55,860
behaviors<font color="#CCCCCC"> all undefined behaviors have</font>

771
00:33:54,060 --> 00:33:59,520
to be bounded undefined behaviors if

772
00:33:55,860 --> 00:34:01,800
your compiler implements an Excel<font color="#CCCCCC"> and so</font>

773
00:33:59,520 --> 00:34:03,060
now instead<font color="#CCCCCC"> they're being 200 undefined</font>

774
00:34:01,800 --> 00:34:05,100
behaviors you have to worry<font color="#CCCCCC"> about</font>

775
00:34:03,060 --> 00:34:09,270
<font color="#E5E5E5">writing out of bounds you're limited</font><font color="#CCCCCC"> to</font>

776
00:34:05,100 --> 00:34:11,250
nine and<font color="#E5E5E5"> the nine are</font><font color="#CCCCCC"> are this</font>

777
00:34:09,270 --> 00:34:16,080
particular<font color="#CCCCCC"> list</font><font color="#E5E5E5"> the sorts of things that</font>

778
00:34:11,250 --> 00:34:20,460
<font color="#CCCCCC">usually result in</font><font color="#E5E5E5"> that okay so to kind</font>

779
00:34:16,080 --> 00:34:23,670
of wrap<font color="#CCCCCC"> this up</font><font color="#E5E5E5"> and I the wrap-up</font><font color="#CCCCCC"> here</font>

780
00:34:20,460 --> 00:34:27,770
<font color="#E5E5E5">sometimes</font><font color="#CCCCCC"> my recommendation surprises</font>

781
00:34:23,670 --> 00:34:31,320
people<font color="#CCCCCC"> at the end of this which is okay</font>

782
00:34:27,770 --> 00:34:35,880
ignore undefined behaviors<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> not a</font>

783
00:34:31,320 --> 00:34:37,350
<font color="#E5E5E5">surprise</font><font color="#CCCCCC"> you know having undefined</font>

784
00:34:35,880 --> 00:34:41,400
behavior in your<font color="#E5E5E5"> code doesn't mean your</font>

785
00:34:37,350 --> 00:34:44,069
code is wrong but it means<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you know</font>

786
00:34:41,400 --> 00:34:45,510
the compiler can change and<font color="#E5E5E5"> in a future</font>

787
00:34:44,070 --> 00:34:48,270
<font color="#CCCCCC">version of your</font><font color="#E5E5E5"> code might be wrong</font><font color="#CCCCCC"> and</font>

788
00:34:45,510 --> 00:34:51,330
<font color="#CCCCCC">so it's best not to depend</font><font color="#E5E5E5"> on undefined</font>

789
00:34:48,270 --> 00:34:53,489
behaviors<font color="#CCCCCC"> I would</font><font color="#E5E5E5"> recommend trying to</font>

790
00:34:51,330 --> 00:34:55,799
find and eliminate dead code<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

791
00:34:53,489 --> 00:34:58,500
<font color="#E5E5E5">letting the compiler do it so if you can</font>

792
00:34:55,800 --> 00:35:00,720
use a strict overflow flag to indicate

793
00:34:58,500 --> 00:35:02,640
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> rewriting the code because there's</font>

794
00:35:00,720 --> 00:35:05,700
undefined behavior like<font color="#E5E5E5"> that example of</font>

795
00:35:02,640 --> 00:35:08,129
you know n plus 100 compared to you know

796
00:35:05,700 --> 00:35:10,020
n plus<font color="#CCCCCC"> 3 or whatever you know do they do</font>

797
00:35:08,130 --> 00:35:12,240
the simplification yourself<font color="#E5E5E5"> so you're</font>

798
00:35:10,020 --> 00:35:18,000
not<font color="#E5E5E5"> relying on the compiler</font><font color="#CCCCCC"> to do the</font>

799
00:35:12,240 --> 00:35:19,770
<font color="#CCCCCC">optimization so so we've seen that</font><font color="#E5E5E5"> some</font>

800
00:35:18,000 --> 00:35:21,420
optimizations can<font color="#E5E5E5"> eliminate undefined</font>

801
00:35:19,770 --> 00:35:26,040
behaviors while others will introduce

802
00:35:21,420 --> 00:35:28,650
vulnerabilities so a lot of you know

803
00:35:26,040 --> 00:35:30,690
<font color="#E5E5E5">security people who don't quite know</font>

804
00:35:28,650 --> 00:35:32,970
what they're talking about<font color="#E5E5E5"> will you know</font>

805
00:35:30,690 --> 00:35:35,090
well first<font color="#CCCCCC"> you know most a lot of people</font>

806
00:35:32,970 --> 00:35:36,290
will ignore<font color="#E5E5E5"> this completely right</font>

807
00:35:35,090 --> 00:35:38,120
know anything<font color="#CCCCCC"> about</font><font color="#E5E5E5"> this but then you</font>

808
00:35:36,290 --> 00:35:40,340
<font color="#E5E5E5">learn a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> about it</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then you</font>

809
00:35:38,120 --> 00:35:43,310
think we should have<font color="#E5E5E5"> enforced wraparound</font>

810
00:35:40,340 --> 00:35:45,110
behavior<font color="#E5E5E5"> and frankly that's not the</font>

811
00:35:43,310 --> 00:35:46,940
recommendation I would<font color="#E5E5E5"> give and the</font>

812
00:35:45,110 --> 00:35:49,070
reason is<font color="#E5E5E5"> because you're turning</font><font color="#CCCCCC"> off all</font>

813
00:35:46,940 --> 00:35:51,140
<font color="#E5E5E5">the optimizations</font><font color="#CCCCCC"> and many of those</font>

814
00:35:49,070 --> 00:35:53,300
optimizations<font color="#E5E5E5"> are fixing your code and</font>

815
00:35:51,140 --> 00:35:54,710
some<font color="#E5E5E5"> of those</font><font color="#CCCCCC"> optimizations are breaking</font>

816
00:35:53,300 --> 00:35:57,170
your<font color="#E5E5E5"> code but generally</font><font color="#CCCCCC"> speaking if you</font>

817
00:35:54,710 --> 00:35:59,750
just turn them off your code is<font color="#E5E5E5"> going to</font>

818
00:35:57,170 --> 00:36:02,060
get worse<font color="#CCCCCC"> in terms of quality and</font>

819
00:35:59,750 --> 00:36:04,790
security<font color="#E5E5E5"> and it's going to</font><font color="#CCCCCC"> get slower</font><font color="#E5E5E5"> at</font>

820
00:36:02,060 --> 00:36:07,880
the same time so my<font color="#E5E5E5"> recommendation is go</font>

821
00:36:04,790 --> 00:36:10,040
<font color="#CCCCCC">ahead</font><font color="#E5E5E5"> and build optimized code but turn</font>

822
00:36:07,880 --> 00:36:11,210
on the warning flag to find out where

823
00:36:10,040 --> 00:36:13,100
the compiler<font color="#CCCCCC"> is doing these</font>

824
00:36:11,210 --> 00:36:15,380
optimizations<font color="#CCCCCC"> for you</font><font color="#E5E5E5"> and take a look</font>

825
00:36:13,100 --> 00:36:16,759
<font color="#E5E5E5">and if it's optimizing on the assumption</font>

826
00:36:15,380 --> 00:36:19,700
that's different than your assumption

827
00:36:16,760 --> 00:36:25,280
<font color="#CCCCCC">your assumptions wrong if you need to</font>

828
00:36:19,700 --> 00:36:27,020
revise your<font color="#CCCCCC"> code and finally you know</font>

829
00:36:25,280 --> 00:36:31,270
tell your<font color="#E5E5E5"> vendor to implement an</font><font color="#CCCCCC"> excel</font>

830
00:36:27,020 --> 00:36:33,590
and use it<font color="#E5E5E5"> because it's cool</font><font color="#CCCCCC"> and finally</font>

831
00:36:31,270 --> 00:36:35,450
the<font color="#E5E5E5"> C standard is a contract between</font>

832
00:36:33,590 --> 00:36:37,790
compiler writers and programmers but

833
00:36:35,450 --> 00:36:39,919
really only compiler writers show up<font color="#E5E5E5"> for</font>

834
00:36:37,790 --> 00:36:42,980
these and me and the guy<font color="#CCCCCC"> from Cisco</font><font color="#E5E5E5"> and</font>

835
00:36:39,920 --> 00:36:45,770
so we've had votes<font color="#E5E5E5"> that have been</font><font color="#CCCCCC"> 32</font><font color="#E5E5E5"> to</font>

836
00:36:42,980 --> 00:36:47,060
where Cisco you know Cisco<font color="#E5E5E5"> and me vote</font>

837
00:36:45,770 --> 00:36:49,490
the same<font color="#E5E5E5"> way and everyone else is</font>

838
00:36:47,060 --> 00:36:52,009
against us<font color="#E5E5E5"> and and sometimes</font><font color="#CCCCCC"> that reason</font>

839
00:36:49,490 --> 00:36:55,490
is<font color="#CCCCCC"> because well</font><font color="#E5E5E5"> that's hard to do you</font>

840
00:36:52,010 --> 00:36:58,400
know so they<font color="#CCCCCC"> don't want</font><font color="#E5E5E5"> to do it</font><font color="#CCCCCC"> so the</font>

841
00:36:55,490 --> 00:37:00,169
contracts continually being<font color="#CCCCCC"> amended and</font>

842
00:36:58,400 --> 00:37:01,940
you know less more security<font color="#E5E5E5"> cautious</font>

843
00:37:00,170 --> 00:37:04,100
<font color="#E5E5E5">group sort of get involved</font><font color="#CCCCCC"> the tendency</font>

844
00:37:01,940 --> 00:37:05,900
<font color="#CCCCCC">is</font><font color="#E5E5E5"> to is to eliminate guarantees from</font>

845
00:37:04,100 --> 00:37:07,670
<font color="#E5E5E5">the standard it's kind of like you know</font>

846
00:37:05,900 --> 00:37:09,740
<font color="#E5E5E5">getting divorce from your spouse and</font>

847
00:37:07,670 --> 00:37:12,920
telling your<font color="#E5E5E5"> spells to you know just</font>

848
00:37:09,740 --> 00:37:15,979
handle the divorce<font color="#E5E5E5"> and you'll be happy</font>

849
00:37:12,920 --> 00:37:17,330
whatever<font color="#E5E5E5"> the outcome is you know that's</font>

850
00:37:15,980 --> 00:37:22,580
not going to<font color="#CCCCCC"> work out</font><font color="#E5E5E5"> good for you my</font>

851
00:37:17,330 --> 00:37:23,210
friend okay so I'm done<font color="#E5E5E5"> take</font><font color="#CCCCCC"> some</font>

852
00:37:22,580 --> 00:37:30,040
questions

853
00:37:23,210 --> 00:37:30,040
yes sir yeah

854
00:37:31,650 --> 00:37:35,940
um yeah I teach<font color="#CCCCCC"> it conferences I did a</font>

855
00:37:34,170 --> 00:37:38,160
<font color="#CCCCCC">three-day course here on secure coding</font>

856
00:37:35,940 --> 00:37:40,080
in<font color="#E5E5E5"> Java but we also come on</font><font color="#CCCCCC"> site and</font>

857
00:37:38,160 --> 00:37:42,480
deliver on site and the<font color="#CCCCCC"> on-site</font>

858
00:37:40,080 --> 00:37:44,850
deliveries are generally more popular

859
00:37:42,480 --> 00:37:47,370
just<font color="#CCCCCC"> because it's easier to</font><font color="#E5E5E5"> fly me</font>

860
00:37:44,850 --> 00:37:50,549
somewhere<font color="#E5E5E5"> that needs to fly 30 people to</font>

861
00:37:47,370 --> 00:37:54,900
a conference but yeah<font color="#E5E5E5"> let me know and we</font>

862
00:37:50,550 --> 00:38:04,950
<font color="#CCCCCC">can come come to your site</font><font color="#E5E5E5"> and deliver</font>

863
00:37:54,900 --> 00:38:08,400
<font color="#E5E5E5">that for you sir how the compilers tend</font>

864
00:38:04,950 --> 00:38:09,870
to be<font color="#CCCCCC"> so other compilers I haven't</font>

865
00:38:08,400 --> 00:38:12,150
looked<font color="#E5E5E5"> at all</font><font color="#CCCCCC"> of them</font>

866
00:38:09,870 --> 00:38:15,720
you know<font color="#E5E5E5"> I now know that clang behaves</font>

867
00:38:12,150 --> 00:38:18,180
similarly you know Visual Studio for

868
00:38:15,720 --> 00:38:19,770
<font color="#E5E5E5">however much people hate Microsoft I</font>

869
00:38:18,180 --> 00:38:22,379
mean they're they're a<font color="#E5E5E5"> little bit more</font>

870
00:38:19,770 --> 00:38:23,970
reasonable<font color="#E5E5E5"> because they they're</font>

871
00:38:22,380 --> 00:38:25,470
controlled by<font color="#E5E5E5"> one vendor they don't have</font>

872
00:38:23,970 --> 00:38:26,939
this<font color="#E5E5E5"> wild-west where everyone's looking</font>

873
00:38:25,470 --> 00:38:31,890
out for their own<font color="#E5E5E5"> interests sort of</font>

874
00:38:26,940 --> 00:38:34,380
thing<font color="#CCCCCC"> so</font><font color="#E5E5E5"> yeah so</font><font color="#CCCCCC"> it's kind of you have</font>

875
00:38:31,890 --> 00:38:36,390
<font color="#E5E5E5">to look you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> I mean I'll tell</font><font color="#CCCCCC"> you</font>

876
00:38:34,380 --> 00:38:38,490
I'll<font color="#CCCCCC"> tell</font><font color="#E5E5E5"> you some</font><font color="#CCCCCC"> other like random</font>

877
00:38:36,390 --> 00:38:42,990
frightening things but you know when you

878
00:38:38,490 --> 00:38:44,609
get<font color="#E5E5E5"> a C compiler it it will happen</font>

879
00:38:42,990 --> 00:38:46,560
there'll be an implementation a set of

880
00:38:44,610 --> 00:38:48,690
flags where it conforms to the standard

881
00:38:46,560 --> 00:38:51,210
it might not be the default set<font color="#CCCCCC"> of flags</font>

882
00:38:48,690 --> 00:38:53,880
<font color="#E5E5E5">so you know the out-of-the-box compiler</font>

883
00:38:51,210 --> 00:38:55,770
you use might be<font color="#E5E5E5"> non conforming to the</font><font color="#CCCCCC"> C</font>

884
00:38:53,880 --> 00:38:58,530
standard<font color="#E5E5E5"> you know so some of those</font>

885
00:38:55,770 --> 00:39:02,990
compilers do really wacky things

886
00:38:58,530 --> 00:39:05,550
<font color="#E5E5E5">the IBM compiler actually</font><font color="#CCCCCC"> treats</font>

887
00:39:02,990 --> 00:39:07,859
<font color="#E5E5E5">unsigned integers is</font><font color="#CCCCCC"> unwrap arounds</font>

888
00:39:05,550 --> 00:39:10,950
undefined behavior<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> a violation</font>

889
00:39:07,860 --> 00:39:13,020
<font color="#E5E5E5">of the standard so by default it behaves</font>

890
00:39:10,950 --> 00:39:15,600
in a<font color="#CCCCCC"> non-conforming mode</font><font color="#E5E5E5"> but they</font>

891
00:39:13,020 --> 00:39:18,330
<font color="#E5E5E5">basically you know these compilers grow</font>

892
00:39:15,600 --> 00:39:20,460
up with their users<font color="#CCCCCC"> and their code bases</font>

893
00:39:18,330 --> 00:39:23,670
and they're sort<font color="#E5E5E5"> of designed to work</font>

894
00:39:20,460 --> 00:39:27,900
with<font color="#E5E5E5"> the code that's you know uses these</font>

895
00:39:23,670 --> 00:39:34,950
compilers<font color="#CCCCCC"> to for compilation under the</font>

896
00:39:27,900 --> 00:39:36,650
questions sir<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a problem</font>

897
00:39:34,950 --> 00:39:40,310
generally for static<font color="#E5E5E5"> analysis tools</font>

898
00:39:36,650 --> 00:39:42,690
<font color="#CCCCCC">because a lot of static analysis</font><font color="#E5E5E5"> tools</font>

899
00:39:40,310 --> 00:39:44,970
<font color="#CCCCCC">work for</font><font color="#E5E5E5"> multiple different platforms</font>

900
00:39:42,690 --> 00:39:45,690
<font color="#CCCCCC">right so they can sell it</font><font color="#E5E5E5"> more widely</font>

901
00:39:44,970 --> 00:39:48,270
and

902
00:39:45,690 --> 00:39:51,510
so it's kind of<font color="#E5E5E5"> very difficult for them</font>

903
00:39:48,270 --> 00:39:53,100
<font color="#CCCCCC">to know what the specific</font><font color="#E5E5E5"> optimizations</font>

904
00:39:51,510 --> 00:39:55,620
are that different<font color="#E5E5E5"> compilers are</font>

905
00:39:53,100 --> 00:39:57,089
performing so this class of<font color="#E5E5E5"> problems</font>

906
00:39:55,620 --> 00:39:58,799
frequently<font color="#CCCCCC"> not diagnosed and that was</font>

907
00:39:57,090 --> 00:40:01,130
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> my first slide</font><font color="#CCCCCC"> that these</font>

908
00:39:58,800 --> 00:40:05,640
optimizations really make<font color="#CCCCCC"> it</font><font color="#E5E5E5"> hard for</font>

909
00:40:01,130 --> 00:40:08,430
human analysts static analysis or you

910
00:40:05,640 --> 00:40:10,830
<font color="#E5E5E5">know anything else to detect and</font>

911
00:40:08,430 --> 00:40:12,810
certainly you know the thing that

912
00:40:10,830 --> 00:40:15,360
<font color="#CCCCCC">irritates me the</font><font color="#E5E5E5"> most about all</font><font color="#CCCCCC"> of this</font>

913
00:40:12,810 --> 00:40:17,100
is you<font color="#E5E5E5"> know when the compiler vendor</font>

914
00:40:15,360 --> 00:40:19,380
says hey this<font color="#E5E5E5"> is undefined</font>

915
00:40:17,100 --> 00:40:21,390
I can optimize here they know it's

916
00:40:19,380 --> 00:40:24,300
undefined<font color="#CCCCCC"> they could generate a</font><font color="#E5E5E5"> warning</font>

917
00:40:21,390 --> 00:40:26,940
at that point but usually they don't<font color="#E5E5E5"> so</font>

918
00:40:24,300 --> 00:40:29,370
you have to kind of<font color="#E5E5E5"> bug them</font><font color="#CCCCCC"> to like</font>

919
00:40:26,940 --> 00:40:32,750
this GCC case to go back and add the

920
00:40:29,370 --> 00:40:35,190
<font color="#E5E5E5">warning</font><font color="#CCCCCC"> so anyone's even being</font><font color="#E5E5E5"> notified</font>

921
00:40:32,750 --> 00:40:36,540
that the undefined<font color="#CCCCCC"> behaviors</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> I</font>

922
00:40:35,190 --> 00:40:43,470
mean they know<font color="#CCCCCC"> it's there and they're</font>

923
00:40:36,540 --> 00:40:48,660
<font color="#E5E5E5">not frequently not diagnosing it sorry</font>

924
00:40:43,470 --> 00:40:52,680
<font color="#E5E5E5">oh yeah so you</font><font color="#CCCCCC"> should look</font><font color="#E5E5E5"> at your</font>

925
00:40:48,660 --> 00:40:54,149
warnings<font color="#CCCCCC"> I mean so I</font><font color="#E5E5E5"> I've had a lot of</font>

926
00:40:52,680 --> 00:40:56,520
<font color="#E5E5E5">customers</font><font color="#CCCCCC"> who are going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> buy</font>

927
00:40:54,150 --> 00:40:58,980
fortify<font color="#E5E5E5"> or Coverity of some expensive</font>

928
00:40:56,520 --> 00:41:00,509
analysis tool but they<font color="#E5E5E5"> aren't you know</font>

929
00:40:58,980 --> 00:41:02,160
they don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> their warning level set</font>

930
00:41:00,510 --> 00:41:05,760
and aren't paying<font color="#CCCCCC"> attention to the</font>

931
00:41:02,160 --> 00:41:08,940
<font color="#E5E5E5">warnings</font><font color="#CCCCCC"> I have done a</font><font color="#E5E5E5"> study while I was</font>

932
00:41:05,760 --> 00:41:10,920
at CMU and and<font color="#E5E5E5"> really the compilers are</font>

933
00:41:08,940 --> 00:41:13,320
more effective at diagnosing these type

934
00:41:10,920 --> 00:41:16,950
of<font color="#CCCCCC"> problems</font><font color="#E5E5E5"> than the analysis tools so</font>

935
00:41:13,320 --> 00:41:18,630
before<font color="#E5E5E5"> you go you know</font><font color="#CCCCCC"> I think you know</font>

936
00:41:16,950 --> 00:41:20,939
you should use<font color="#E5E5E5"> static analysis tools but</font>

937
00:41:18,630 --> 00:41:22,740
before you buy them<font color="#CCCCCC"> you know set your</font>

938
00:41:20,940 --> 00:41:24,720
warning level to the highest level<font color="#E5E5E5"> and</font>

939
00:41:22,740 --> 00:41:26,069
address those warnings<font color="#E5E5E5"> and you know</font>

940
00:41:24,720 --> 00:41:27,899
<font color="#E5E5E5">address them smartly</font><font color="#CCCCCC"> because they're a</font>

941
00:41:26,070 --> 00:41:29,460
lot of<font color="#CCCCCC"> people go in and</font><font color="#E5E5E5"> say well</font><font color="#CCCCCC"> if I</font>

942
00:41:27,900 --> 00:41:31,740
click<font color="#E5E5E5"> cast all over the place</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> will</font>

943
00:41:29,460 --> 00:41:33,690
shut<font color="#E5E5E5"> the warnings up</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> your codes</font>

944
00:41:31,740 --> 00:41:35,220
worse than it<font color="#CCCCCC"> was</font><font color="#E5E5E5"> before because</font><font color="#CCCCCC"> you</font>

945
00:41:33,690 --> 00:41:37,340
have all the same<font color="#CCCCCC"> problems but</font><font color="#E5E5E5"> now</font>

946
00:41:35,220 --> 00:41:41,669
you're<font color="#E5E5E5"> not getting Diagnostics anymore</font>

947
00:41:37,340 --> 00:41:54,680
<font color="#CCCCCC">okay any other questions that's</font><font color="#E5E5E5"> fun come</font>

948
00:41:41,670 --> 00:41:54,680
on<font color="#E5E5E5"> done</font><font color="#CCCCCC"> No yeah yep</font>

949
00:42:00,050 --> 00:42:06,930
<font color="#CCCCCC">um you know it's</font><font color="#E5E5E5"> so it's a little bit of</font>

950
00:42:04,230 --> 00:42:08,960
give<font color="#CCCCCC"> and take you know I mean so there</font>

951
00:42:06,930 --> 00:42:12,600
are<font color="#CCCCCC"> places where guarantees are weakened</font>

952
00:42:08,960 --> 00:42:15,870
<font color="#CCCCCC">I'll give you a quick example when you</font>

953
00:42:12,600 --> 00:42:17,759
read on initialize memory now<font color="#CCCCCC"> this</font>

954
00:42:15,870 --> 00:42:19,950
committees<font color="#CCCCCC"> introduce a concept of wobbly</font>

955
00:42:17,760 --> 00:42:21,870
values<font color="#E5E5E5"> right so that means that every</font>

956
00:42:19,950 --> 00:42:23,970
time<font color="#CCCCCC"> you read a uninitialized value you</font>

957
00:42:21,870 --> 00:42:26,160
can<font color="#E5E5E5"> get a different value so you could</font>

958
00:42:23,970 --> 00:42:29,100
have an express you can say if X do this

959
00:42:26,160 --> 00:42:30,990
and then and it<font color="#E5E5E5"> will do it and then down</font>

960
00:42:29,100 --> 00:42:34,440
below you<font color="#E5E5E5"> can say if not X do this and</font>

961
00:42:30,990 --> 00:42:37,560
it would do that too because<font color="#CCCCCC"> if it's</font>

962
00:42:34,440 --> 00:42:40,170
uninitialized<font color="#CCCCCC"> it can now vary</font><font color="#E5E5E5"> every time</font>

963
00:42:37,560 --> 00:42:42,350
you read<font color="#CCCCCC"> it so so that's</font><font color="#E5E5E5"> an area where</font>

964
00:42:40,170 --> 00:42:46,260
the<font color="#E5E5E5"> language is becoming</font><font color="#CCCCCC"> less defined</font>

965
00:42:42,350 --> 00:42:47,730
<font color="#CCCCCC">but</font><font color="#E5E5E5"> you know we've added an excact</font>

966
00:42:46,260 --> 00:42:49,230
interfaces those are nice secure

967
00:42:47,730 --> 00:42:51,900
functions

968
00:42:49,230 --> 00:42:54,300
<font color="#E5E5E5">you know we've added memset underbar s</font>

969
00:42:51,900 --> 00:42:57,270
which can't be optimized out so it lets

970
00:42:54,300 --> 00:42:58,860
you say clear passwords from memory

971
00:42:57,270 --> 00:43:02,100
before<font color="#E5E5E5"> you pass that memory</font><font color="#CCCCCC"> to free</font>

972
00:42:58,860 --> 00:43:04,440
normally if you just say<font color="#E5E5E5"> mem set and</font>

973
00:43:02,100 --> 00:43:06,680
then free that<font color="#CCCCCC"> memphis'</font><font color="#E5E5E5"> always optimize</font>

974
00:43:04,440 --> 00:43:08,910
out because it's a dead code store and

975
00:43:06,680 --> 00:43:11,310
developers don't realize that<font color="#E5E5E5"> whenever</font>

976
00:43:08,910 --> 00:43:12,839
<font color="#E5E5E5">you see memset followed by free it's</font>

977
00:43:11,310 --> 00:43:14,520
basically a vulnerability<font color="#E5E5E5"> because</font>

978
00:43:12,840 --> 00:43:18,690
they're trying<font color="#E5E5E5"> to clear it out but it's</font>

979
00:43:14,520 --> 00:43:21,660
not<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> happen</font><font color="#CCCCCC"> so yeah it's back</font>

980
00:43:18,690 --> 00:43:24,390
and<font color="#E5E5E5"> forth but you</font><font color="#CCCCCC"> know basically you</font>

981
00:43:21,660 --> 00:43:25,920
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to just you know you</font><font color="#E5E5E5"> just need to</font>

982
00:43:24,390 --> 00:43:30,900
know how the language works<font color="#E5E5E5"> and</font>

983
00:43:25,920 --> 00:43:32,970
<font color="#CCCCCC">programmed correctly</font><font color="#E5E5E5"> well yeah I mean</font>

984
00:43:30,900 --> 00:43:37,680
there's this<font color="#E5E5E5"> no there's no substitute</font>

985
00:43:32,970 --> 00:43:40,609
for<font color="#CCCCCC"> knowledge</font><font color="#E5E5E5"> okay anyone else I'm</font>

986
00:43:37,680 --> 00:43:40,609
having fun so yes sir

987
00:43:47,210 --> 00:44:08,480
oh well I think<font color="#CCCCCC"> what I was trying to say</font>

988
00:44:01,310 --> 00:44:10,430
with<font color="#E5E5E5"> those slides is is that you if you</font>

989
00:44:08,480 --> 00:44:12,470
want to<font color="#E5E5E5"> test for the existence of these</font>

990
00:44:10,430 --> 00:44:13,970
optimizations<font color="#E5E5E5"> you need to do two things</font>

991
00:44:12,470 --> 00:44:16,189
<font color="#E5E5E5">one is you need to</font><font color="#CCCCCC"> have the strict</font>

992
00:44:13,970 --> 00:44:18,640
<font color="#E5E5E5">overflow flag set and you also need to</font>

993
00:44:16,190 --> 00:44:22,310
<font color="#CCCCCC">have the optimizations being performed</font>

994
00:44:18,640 --> 00:44:24,799
<font color="#CCCCCC">so you have to set strict overflow on</font><font color="#E5E5E5"> or</font>

995
00:44:22,310 --> 00:44:26,509
set<font color="#CCCCCC"> knops</font><font color="#E5E5E5"> a high optimization level so</font>

996
00:44:24,800 --> 00:44:28,760
it's going to optimize<font color="#E5E5E5"> the code in order</font>

997
00:44:26,510 --> 00:44:31,250
<font color="#E5E5E5">to get the Diagnostics so we just set</font>

998
00:44:28,760 --> 00:44:35,510
strict overflow and hit optimization<font color="#CCCCCC"> 0</font>

999
00:44:31,250 --> 00:44:37,760
you<font color="#E5E5E5"> owe the order doesn't matter but you</font>

1000
00:44:35,510 --> 00:44:39,470
need to specify both if it's<font color="#E5E5E5"> not</font>

1001
00:44:37,760 --> 00:44:43,070
optimizing it won't diagnose the

1002
00:44:39,470 --> 00:44:46,879
optimizations<font color="#CCCCCC"> ok any of the</font><font color="#E5E5E5"> questions</font>

1003
00:44:43,070 --> 00:44:47,450
<font color="#CCCCCC">you are</font><font color="#E5E5E5"> recording all this right that's</font>

1004
00:44:46,880 --> 00:44:48,980
good

1005
00:44:47,450 --> 00:44:52,810
<font color="#E5E5E5">I'm out now I'm running back in my head</font>

1006
00:44:48,980 --> 00:44:56,109
it's<font color="#CCCCCC"> like who died</font><font color="#E5E5E5"> and sold Google</font>

1007
00:44:52,810 --> 00:44:59,210
<font color="#CCCCCC">mm-hmm any other questions</font>

1008
00:44:56,109 --> 00:45:00,290
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> thanks for that info Cisco track I</font>

1009
00:44:59,210 --> 00:45:02,530
think<font color="#CCCCCC"> for the weekend</font>

1010
00:45:00,290 --> 00:45:06,889
<font color="#E5E5E5">Thanks thank you very much</font>

1011
00:45:02,530 --> 00:45:06,889
[Applause]

