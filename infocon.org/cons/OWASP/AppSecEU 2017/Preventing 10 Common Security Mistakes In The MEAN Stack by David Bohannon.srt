1
00:00:02,560 --> 00:00:07,480
okay I think<font color="#E5E5E5"> I was on the door to doing</font>

2
00:00:04,569 --> 00:00:09,580
<font color="#E5E5E5">well thank you</font><font color="#CCCCCC"> well welcome</font><font color="#E5E5E5"> everyone to</font>

3
00:00:07,480 --> 00:00:12,309
preventing<font color="#E5E5E5"> ten common securities</font>

4
00:00:09,580 --> 00:00:14,950
mistakes<font color="#E5E5E5"> in the mean stack</font><font color="#CCCCCC"> brief</font>

5
00:00:12,309 --> 00:00:17,430
introduction who am I am<font color="#E5E5E5"> David Bohannon</font>

6
00:00:14,950 --> 00:00:20,799
<font color="#E5E5E5">I'm a security consultant with synopsis</font>

7
00:00:17,430 --> 00:00:23,590
<font color="#CCCCCC">based</font><font color="#E5E5E5"> out of Atlanta</font><font color="#CCCCCC"> and I've</font><font color="#E5E5E5"> spent the</font>

8
00:00:20,800 --> 00:00:26,470
last<font color="#E5E5E5"> year</font><font color="#CCCCCC"> or so</font><font color="#E5E5E5"> working with mean stack</font>

9
00:00:23,590 --> 00:00:29,109
applications<font color="#E5E5E5"> so more specifically mining</font>

10
00:00:26,470 --> 00:00:31,090
vulnerabilities in these technologies

11
00:00:29,109 --> 00:00:33,580
frameworks<font color="#E5E5E5"> and plugins and then</font>

12
00:00:31,090 --> 00:00:37,059
converting those vulnerabilities<font color="#E5E5E5"> into</font>

13
00:00:33,580 --> 00:00:38,589
triggers for a static analysis<font color="#CCCCCC"> engine so</font>

14
00:00:37,059 --> 00:00:40,300
who is this tall<font color="#E5E5E5"> contended</font><font color="#CCCCCC"> for well</font>

15
00:00:38,590 --> 00:00:42,430
really for<font color="#E5E5E5"> both developers and security</font>

16
00:00:40,300 --> 00:00:45,610
<font color="#CCCCCC">professionals and what can</font><font color="#E5E5E5"> you expect</font>

17
00:00:42,430 --> 00:00:47,140
<font color="#E5E5E5">from this talk well so I designed to</font>

18
00:00:45,610 --> 00:00:49,059
talk with the assumption that the

19
00:00:47,140 --> 00:00:52,840
audience has a basic understanding of

20
00:00:49,059 --> 00:00:54,309
Mongo<font color="#E5E5E5"> Express angular and nodejs so that</font>

21
00:00:52,840 --> 00:00:56,230
allows us to<font color="#E5E5E5"> forget a lot</font><font color="#CCCCCC"> of the basic</font>

22
00:00:54,309 --> 00:00:58,169
introduction<font color="#CCCCCC"> to</font><font color="#E5E5E5"> these technologies and</font>

23
00:00:56,230 --> 00:01:01,089
<font color="#E5E5E5">rather focus</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the actual</font>

24
00:00:58,170 --> 00:01:04,330
<font color="#CCCCCC">vulnerabilities and</font><font color="#E5E5E5"> common mistakes</font><font color="#CCCCCC"> now</font>

25
00:01:01,090 --> 00:01:05,740
what makes<font color="#E5E5E5"> these common</font><font color="#CCCCCC"> mistakes</font><font color="#E5E5E5"> many</font><font color="#CCCCCC"> of</font>

26
00:01:04,330 --> 00:01:06,939
them are the<font color="#CCCCCC"> result of using</font><font color="#E5E5E5"> these</font>

27
00:01:05,740 --> 00:01:09,309
<font color="#E5E5E5">components in their default</font>

28
00:01:06,939 --> 00:01:12,610
configuration<font color="#E5E5E5"> or they're simply the</font>

29
00:01:09,310 --> 00:01:15,939
result of mistakes that are<font color="#CCCCCC"> easily</font>

30
00:01:12,610 --> 00:01:19,900
implemented by developers so I've also

31
00:01:15,939 --> 00:01:21,669
<font color="#E5E5E5">created a intentionally vulnerable mean</font>

32
00:01:19,900 --> 00:01:24,720
stack application that<font color="#E5E5E5"> we'll use to</font>

33
00:01:21,670 --> 00:01:27,790
<font color="#CCCCCC">demonstrate</font><font color="#E5E5E5"> these these problems issues</font>

34
00:01:24,720 --> 00:01:29,619
<font color="#E5E5E5">as well as the solution so we'll show</font>

35
00:01:27,790 --> 00:01:32,680
<font color="#CCCCCC">you not only how to exploit these these</font>

36
00:01:29,619 --> 00:01:33,729
mistakes but<font color="#E5E5E5"> also how</font><font color="#CCCCCC"> to fix them we've</font>

37
00:01:32,680 --> 00:01:35,590
got<font color="#E5E5E5"> ten</font><font color="#CCCCCC"> different things</font><font color="#E5E5E5"> we're going to</font>

38
00:01:33,729 --> 00:01:37,590
<font color="#E5E5E5">talk about in the course of</font><font color="#CCCCCC"> about 40</font>

39
00:01:35,590 --> 00:01:40,570
minutes<font color="#E5E5E5"> or them be moving pretty quickly</font>

40
00:01:37,590 --> 00:01:44,170
<font color="#E5E5E5">so without any further introduction hang</font>

41
00:01:40,570 --> 00:01:45,398
on and here we go<font color="#E5E5E5"> so the first</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> of</font>

42
00:01:44,170 --> 00:01:48,310
the<font color="#E5E5E5"> technology stack we're going to pick</font>

43
00:01:45,399 --> 00:01:51,130
on is<font color="#CCCCCC"> Mongo DB so Mongo DB</font><font color="#E5E5E5"> is a no</font>

44
00:01:48,310 --> 00:01:52,479
sequel database so it doesn't use it

45
00:01:51,130 --> 00:01:54,880
does have a concept of a structured

46
00:01:52,479 --> 00:01:57,970
query language<font color="#E5E5E5"> and I'm sure everyone</font>

47
00:01:54,880 --> 00:02:00,130
knows one of<font color="#CCCCCC"> the historically one of</font><font color="#E5E5E5"> the</font>

48
00:01:57,970 --> 00:02:02,380
big<font color="#E5E5E5"> problems with a sequel database is</font>

49
00:02:00,130 --> 00:02:04,240
sequel injection<font color="#E5E5E5"> so we have some sort of</font>

50
00:02:02,380 --> 00:02:07,030
untrusted input that's appended to<font color="#CCCCCC"> our</font>

51
00:02:04,240 --> 00:02:10,090
query statement that allows a malicious

52
00:02:07,030 --> 00:02:12,020
user<font color="#CCCCCC"> to alter that query drop databases</font>

53
00:02:10,090 --> 00:02:14,330
<font color="#E5E5E5">add rows things like the</font>

54
00:02:12,020 --> 00:02:17,960
so the question is there's no<font color="#E5E5E5"> sequel</font>

55
00:02:14,330 --> 00:02:21,080
mean no<font color="#E5E5E5"> injections well the answer is No</font>

56
00:02:17,960 --> 00:02:24,140
MongoDB has a concept of<font color="#E5E5E5"> query selector</font>

57
00:02:21,080 --> 00:02:26,050
operators<font color="#E5E5E5"> and these are all operators</font>

58
00:02:24,140 --> 00:02:28,880
<font color="#E5E5E5">that start</font><font color="#CCCCCC"> with a dollar sign dollar GT</font>

59
00:02:26,050 --> 00:02:31,670
<font color="#CCCCCC">means greater than dollar</font><font color="#E5E5E5"> any or not</font>

60
00:02:28,880 --> 00:02:34,700
equal<font color="#CCCCCC"> to and dollar not for negation</font><font color="#E5E5E5"> and</font>

61
00:02:31,670 --> 00:02:38,089
if an attacker can inject these queries

62
00:02:34,700 --> 00:02:40,640
are these<font color="#CCCCCC"> queries selector</font><font color="#E5E5E5"> operators</font>

63
00:02:38,090 --> 00:02:44,330
<font color="#E5E5E5">into the query they can</font><font color="#CCCCCC"> alter the logic</font>

64
00:02:40,640 --> 00:02:47,649
of<font color="#E5E5E5"> that query so for example let's</font><font color="#CCCCCC"> look</font>

65
00:02:44,330 --> 00:02:49,190
<font color="#E5E5E5">at this</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> query</font><font color="#CCCCCC"> despond one and</font>

66
00:02:47,650 --> 00:02:52,400
essentially what this is<font color="#CCCCCC"> doing is</font>

67
00:02:49,190 --> 00:02:54,950
<font color="#E5E5E5">looking doing a</font><font color="#CCCCCC"> lookup for a username</font>

68
00:02:52,400 --> 00:02:56,990
that<font color="#E5E5E5"> matches our variable user and a</font>

69
00:02:54,950 --> 00:02:59,890
password<font color="#E5E5E5"> that matches our variable pass</font>

70
00:02:56,990 --> 00:03:06,410
<font color="#E5E5E5">so it's part of our tent</font><font color="#CCCCCC"> ocation flow</font>

71
00:02:59,890 --> 00:03:09,320
and what happens if the<font color="#CCCCCC"> user inputs</font><font color="#E5E5E5"> this</font>

72
00:03:06,410 --> 00:03:11,420
so it's object<font color="#CCCCCC"> where</font><font color="#E5E5E5"> the user</font><font color="#CCCCCC"> is admin</font>

73
00:03:09,320 --> 00:03:16,850
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the password is object not equal to</font>

74
00:03:11,420 --> 00:03:19,970
null well the result is we're looking

75
00:03:16,850 --> 00:03:21,350
<font color="#E5E5E5">for the password</font><font color="#CCCCCC"> where the username</font><font color="#E5E5E5"> or</font>

76
00:03:19,970 --> 00:03:23,840
the the<font color="#E5E5E5"> entry where the username</font><font color="#CCCCCC"> is</font>

77
00:03:21,350 --> 00:03:25,459
admin and<font color="#CCCCCC"> the password is object not</font>

78
00:03:23,840 --> 00:03:27,200
equal to null which is<font color="#E5E5E5"> always going to</font>

79
00:03:25,459 --> 00:03:28,640
return truth<font color="#E5E5E5"> which is going to allow</font><font color="#CCCCCC"> us</font>

80
00:03:27,200 --> 00:03:31,390
<font color="#E5E5E5">to authenticate</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the application</font>

81
00:03:28,640 --> 00:03:35,480
<font color="#E5E5E5">without actually having a valid admin</font>

82
00:03:31,390 --> 00:03:38,299
credentials so this is great<font color="#E5E5E5"> but how do</font>

83
00:03:35,480 --> 00:03:42,070
<font color="#E5E5E5">we do that how do we inject these these</font>

84
00:03:38,300 --> 00:03:43,580
<font color="#E5E5E5">nested operators like this well Express</font>

85
00:03:42,070 --> 00:03:45,530
helps us out

86
00:03:43,580 --> 00:03:47,480
so if we reason the means that<font color="#E5E5E5"> we have</font>

87
00:03:45,530 --> 00:03:50,380
our Mongo database we're also expect to

88
00:03:47,480 --> 00:03:53,750
have an<font color="#CCCCCC"> express server</font><font color="#E5E5E5"> and when Express</font>

89
00:03:50,380 --> 00:03:55,609
<font color="#E5E5E5">sees these nested URL encoded parameters</font>

90
00:03:53,750 --> 00:03:56,810
in our input<font color="#E5E5E5"> it's going to automatically</font>

91
00:03:55,610 --> 00:04:01,720
parse them<font color="#E5E5E5"> for us</font>

92
00:03:56,810 --> 00:04:07,340
so what happens is in either<font color="#E5E5E5"> our our our</font>

93
00:04:01,720 --> 00:04:11,420
get URI or<font color="#E5E5E5"> our simple post form the URL</font>

94
00:04:07,340 --> 00:04:13,520
<font color="#CCCCCC">encode is parameter pass bracket dollar</font>

95
00:04:11,420 --> 00:04:16,459
<font color="#CCCCCC">NE equals it's actually going to be</font>

96
00:04:13,520 --> 00:04:20,359
translated to<font color="#E5E5E5"> the password is the value</font>

97
00:04:16,459 --> 00:04:24,380
<font color="#CCCCCC">of the object</font><font color="#E5E5E5"> dollar</font><font color="#CCCCCC"> ne</font><font color="#E5E5E5"> or not</font><font color="#CCCCCC"> equal</font><font color="#E5E5E5"> to</font>

98
00:04:20,358 --> 00:04:25,700
<font color="#CCCCCC">know so this allows us</font><font color="#E5E5E5"> to again inject</font>

99
00:04:24,380 --> 00:04:29,000
our query operator

100
00:04:25,700 --> 00:04:34,520
into our<font color="#CCCCCC"> find one statement and alter</font>

101
00:04:29,000 --> 00:04:36,530
the the logic of<font color="#E5E5E5"> this operation so one</font>

102
00:04:34,520 --> 00:04:39,229
way<font color="#CCCCCC"> that we can fix this is to simply</font>

103
00:04:36,530 --> 00:04:41,150
cast our input to<font color="#CCCCCC"> a string</font><font color="#E5E5E5"> so what we</font>

104
00:04:39,230 --> 00:04:43,250
end up<font color="#E5E5E5"> with is a result of looking for</font>

105
00:04:41,150 --> 00:04:45,260
the<font color="#CCCCCC"> username our query</font><font color="#E5E5E5"> is looking for</font>

106
00:04:43,250 --> 00:04:47,480
the<font color="#E5E5E5"> username admin in the past where the</font>

107
00:04:45,260 --> 00:04:50,780
string representation<font color="#E5E5E5"> bracket dollar</font><font color="#CCCCCC"> NE</font>

108
00:04:47,480 --> 00:04:53,180
<font color="#E5E5E5">:</font><font color="#CCCCCC"> null so that's one</font><font color="#E5E5E5"> way that we can</font>

109
00:04:50,780 --> 00:04:56,059
prevent<font color="#E5E5E5"> users from injecting our query</font>

110
00:04:53,180 --> 00:04:59,000
selectors<font color="#CCCCCC"> the other option is</font><font color="#E5E5E5"> to simply</font>

111
00:04:56,060 --> 00:05:01,730
sanitize<font color="#E5E5E5"> our</font><font color="#CCCCCC"> parameters that</font><font color="#E5E5E5"> begin with</font>

112
00:04:59,000 --> 00:05:06,560
dollar keys<font color="#E5E5E5"> so we can do this manually</font>

113
00:05:01,730 --> 00:05:08,330
<font color="#E5E5E5">or we can</font><font color="#CCCCCC"> use one of</font><font color="#E5E5E5"> the off-the-shelf</font>

114
00:05:06,560 --> 00:05:11,420
packages that<font color="#E5E5E5"> will do this for us right</font>

115
00:05:08,330 --> 00:05:13,190
<font color="#CCCCCC">so if</font><font color="#E5E5E5"> a attacker tries to inject these</font>

116
00:05:11,420 --> 00:05:18,500
query operators it's going to strip them

117
00:05:13,190 --> 00:05:21,110
<font color="#E5E5E5">out for us so what we're going to do is</font>

118
00:05:18,500 --> 00:05:22,970
look<font color="#E5E5E5"> at the mean bug application if we</font>

119
00:05:21,110 --> 00:05:24,860
attempt<font color="#E5E5E5"> to log into it with just</font>

120
00:05:22,970 --> 00:05:27,020
username admin password admin<font color="#CCCCCC"> it doesn't</font>

121
00:05:24,860 --> 00:05:28,160
work<font color="#E5E5E5"> but what we're</font><font color="#CCCCCC"> going to do is</font>

122
00:05:27,020 --> 00:05:31,039
actually<font color="#E5E5E5"> going to intercept this</font>

123
00:05:28,160 --> 00:05:33,140
authentication<font color="#CCCCCC"> request using burp suite</font>

124
00:05:31,040 --> 00:05:35,420
proxy<font color="#E5E5E5"> and then we're going</font><font color="#CCCCCC"> to change the</font>

125
00:05:33,140 --> 00:05:38,180
password value<font color="#E5E5E5"> to our payload dollar</font><font color="#CCCCCC"> NE</font>

126
00:05:35,420 --> 00:05:39,800
equals null<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then we're going to</font>

127
00:05:38,180 --> 00:05:41,900
forward<font color="#E5E5E5"> that</font><font color="#CCCCCC"> request on</font><font color="#E5E5E5"> to the</font>

128
00:05:39,800 --> 00:05:43,070
application<font color="#CCCCCC"> and we see that</font><font color="#E5E5E5"> we're able</font>

129
00:05:41,900 --> 00:05:46,070
to<font color="#CCCCCC"> authenticate without actually</font>

130
00:05:43,070 --> 00:05:47,420
providing a valid<font color="#CCCCCC"> password</font><font color="#E5E5E5"> so if we</font>

131
00:05:46,070 --> 00:05:49,010
navigate into<font color="#E5E5E5"> application we see we can</font>

132
00:05:47,420 --> 00:05:51,740
<font color="#CCCCCC">also query some invoices and do some</font>

133
00:05:49,010 --> 00:05:56,420
other interesting<font color="#CCCCCC"> things</font><font color="#E5E5E5"> so we're going</font>

134
00:05:51,740 --> 00:05:57,680
<font color="#E5E5E5">to attempt the same attack here so we're</font>

135
00:05:56,420 --> 00:05:59,450
going to<font color="#E5E5E5"> do is we're going to intercept</font>

136
00:05:57,680 --> 00:06:02,480
the request<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if we notice this is</font><font color="#CCCCCC"> not</font>

137
00:05:59,450 --> 00:06:05,330
a simple<font color="#CCCCCC"> toast form this is a more</font>

138
00:06:02,480 --> 00:06:07,640
complex form uses<font color="#CCCCCC"> JSON</font><font color="#E5E5E5"> body</font><font color="#CCCCCC"> solar is</font>

139
00:06:05,330 --> 00:06:11,870
we're going<font color="#E5E5E5"> to change the content type</font>

140
00:06:07,640 --> 00:06:13,430
to form<font color="#E5E5E5"> your URL encoded and then we're</font>

141
00:06:11,870 --> 00:06:16,070
<font color="#CCCCCC">simply going</font><font color="#E5E5E5"> to change our payload to</font>

142
00:06:13,430 --> 00:06:17,900
<font color="#E5E5E5">the URL</font><font color="#CCCCCC"> encoded payload containing value</font>

143
00:06:16,070 --> 00:06:19,219
in e equals null and<font color="#E5E5E5"> what</font><font color="#CCCCCC"> that's going</font>

144
00:06:17,900 --> 00:06:21,370
to<font color="#E5E5E5"> do is going to return all</font><font color="#CCCCCC"> the entries</font>

145
00:06:19,220 --> 00:06:24,700
<font color="#CCCCCC">in our database</font>

146
00:06:21,370 --> 00:06:24,700
just like so

147
00:06:27,840 --> 00:06:32,239
so the way we're going to fix<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

148
00:06:29,370 --> 00:06:35,520
we're going<font color="#E5E5E5"> to go to our authentication</font>

149
00:06:32,240 --> 00:06:40,530
<font color="#CCCCCC">find one query</font><font color="#E5E5E5"> and we're going to cast</font>

150
00:06:35,520 --> 00:06:42,719
our user variable to<font color="#CCCCCC"> a string</font><font color="#E5E5E5"> and we're</font>

151
00:06:40,530 --> 00:06:45,419
going<font color="#E5E5E5"> to test our password variable to</font>

152
00:06:42,720 --> 00:06:48,000
string so there's no<font color="#E5E5E5"> longer acting as</font>

153
00:06:45,419 --> 00:06:49,859
that query operator<font color="#E5E5E5"> but what</font><font color="#CCCCCC"> query</font>

154
00:06:48,000 --> 00:06:52,169
selector operator but rather is a string

155
00:06:49,860 --> 00:06:59,100
representation so we restart our server

156
00:06:52,169 --> 00:07:01,380
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we're going to</font><font color="#E5E5E5"> do the same same</font>

157
00:06:59,100 --> 00:07:05,460
attack of the<font color="#CCCCCC"> for so we're going to</font>

158
00:07:01,380 --> 00:07:07,710
intercept the request<font color="#E5E5E5"> we're going to</font>

159
00:07:05,460 --> 00:07:08,789
submit the request<font color="#E5E5E5"> we're going to alter</font>

160
00:07:07,710 --> 00:07:13,979
it again

161
00:07:08,790 --> 00:07:17,180
the password dollar<font color="#E5E5E5"> any null and we're</font>

162
00:07:13,979 --> 00:07:22,380
going<font color="#E5E5E5"> to pour that onto the</font><font color="#CCCCCC"> application</font>

163
00:07:17,180 --> 00:07:28,229
and this<font color="#E5E5E5"> is now the injection attack no</font>

164
00:07:22,380 --> 00:07:30,510
longer works<font color="#E5E5E5"> so again the basically for</font>

165
00:07:28,229 --> 00:07:32,940
express to parse this out<font color="#E5E5E5"> we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

166
00:07:30,510 --> 00:07:35,490
a<font color="#E5E5E5"> URL encoded payload either in the get</font>

167
00:07:32,940 --> 00:07:36,780
request<font color="#E5E5E5"> or in the simple post request</font>

168
00:07:35,490 --> 00:07:40,550
but even if we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have that we can</font>

169
00:07:36,780 --> 00:07:44,549
still change the the content type and

170
00:07:40,550 --> 00:07:46,770
instead change our body as well<font color="#E5E5E5"> so that</font>

171
00:07:44,550 --> 00:07:48,650
we're in sending<font color="#E5E5E5"> of that URL encoded</font>

172
00:07:46,770 --> 00:07:54,000
request and we're actually<font color="#E5E5E5"> able to</font>

173
00:07:48,650 --> 00:07:56,909
exploit<font color="#E5E5E5"> non simple post forms as well so</font>

174
00:07:54,000 --> 00:07:59,070
it<font color="#CCCCCC"> can</font><font color="#E5E5E5"> continue with a MongoDB</font><font color="#CCCCCC"> one of</font>

175
00:07:56,910 --> 00:08:01,229
the other issues<font color="#CCCCCC"> is in security</font>

176
00:07:59,070 --> 00:08:03,659
configuration so by<font color="#E5E5E5"> default</font>

177
00:08:01,229 --> 00:08:07,080
MongoDB does not have authentication<font color="#E5E5E5"> is</font>

178
00:08:03,660 --> 00:08:10,500
disabled<font color="#E5E5E5"> there's a CSO online article</font>

179
00:08:07,080 --> 00:08:12,570
<font color="#E5E5E5">back in January detailing of how more</font>

180
00:08:10,500 --> 00:08:14,490
<font color="#CCCCCC">than 40,000 MongoDB instances were</font>

181
00:08:12,570 --> 00:08:15,930
compromised by ransomware because

182
00:08:14,490 --> 00:08:18,539
<font color="#E5E5E5">they're publicly exposed to internet</font>

183
00:08:15,930 --> 00:08:21,570
with no<font color="#CCCCCC"> authentication</font><font color="#E5E5E5"> not a good</font>

184
00:08:18,539 --> 00:08:24,120
combination<font color="#E5E5E5"> the shadow server project</font><font color="#CCCCCC"> is</font>

185
00:08:21,570 --> 00:08:27,659
another interesting<font color="#E5E5E5"> project that does</font>

186
00:08:24,120 --> 00:08:30,810
<font color="#E5E5E5">periodic queries</font><font color="#CCCCCC"> of entire ipv4 space</font>

187
00:08:27,660 --> 00:08:34,140
<font color="#E5E5E5">looking for MongoDB instances of</font><font color="#CCCCCC"> Aleph n</font>

188
00:08:30,810 --> 00:08:36,390
<font color="#CCCCCC">occation and as of just</font><font color="#E5E5E5"> a few days ago</font>

189
00:08:34,140 --> 00:08:38,880
there<font color="#E5E5E5"> were still almost 28,000 instances</font>

190
00:08:36,390 --> 00:08:41,150
again publicly<font color="#CCCCCC"> exposed with new</font>

191
00:08:38,880 --> 00:08:41,150
authentication

192
00:08:41,230 --> 00:08:47,650
so it's a<font color="#E5E5E5"> problem but it gets worse</font><font color="#CCCCCC"> so</font>

193
00:08:45,220 --> 00:08:49,270
if you use an older version of MongoDB

194
00:08:47,650 --> 00:08:51,189
<font color="#E5E5E5">not only does it have no authentication</font>

195
00:08:49,270 --> 00:08:54,220
<font color="#CCCCCC">by</font><font color="#E5E5E5"> default you're also going to be</font>

196
00:08:51,190 --> 00:08:57,250
binding<font color="#E5E5E5"> to all</font><font color="#CCCCCC"> interfaces by default</font><font color="#E5E5E5"> so</font>

197
00:08:54,220 --> 00:08:59,290
again<font color="#E5E5E5"> you have an out-of-the-box</font><font color="#CCCCCC"> a</font>

198
00:08:57,250 --> 00:09:00,910
database server that as soon<font color="#E5E5E5"> as you</font>

199
00:08:59,290 --> 00:09:04,510
stand<font color="#E5E5E5"> it up it's going to</font><font color="#CCCCCC"> be publicly</font>

200
00:09:00,910 --> 00:09:09,219
with publicly exposed<font color="#CCCCCC"> and have an</font>

201
00:09:04,510 --> 00:09:11,830
<font color="#E5E5E5">authentication some other configuration</font>

202
00:09:09,220 --> 00:09:14,680
<font color="#E5E5E5">issues with MongoDB</font><font color="#CCCCCC"> they provide the</font>

203
00:09:11,830 --> 00:09:16,750
option to<font color="#CCCCCC"> enable an HTTP and rest</font>

204
00:09:14,680 --> 00:09:19,300
interface<font color="#CCCCCC"> now these guys aren't enabled</font>

205
00:09:16,750 --> 00:09:21,370
<font color="#CCCCCC">by default but if they have been</font><font color="#E5E5E5"> enabled</font>

206
00:09:19,300 --> 00:09:24,880
it's going to<font color="#E5E5E5"> present some information</font>

207
00:09:21,370 --> 00:09:27,160
<font color="#E5E5E5">leakage issues so they're configured in</font>

208
00:09:24,880 --> 00:09:29,620
the<font color="#E5E5E5"> SC MongoDB configuration file</font><font color="#CCCCCC"> and</font>

209
00:09:27,160 --> 00:09:35,740
there's<font color="#E5E5E5"> simply</font><font color="#CCCCCC"> two two options that can</font>

210
00:09:29,620 --> 00:09:37,990
<font color="#E5E5E5">be turned on</font><font color="#CCCCCC"> or off</font><font color="#E5E5E5"> and how do we fix</font>

211
00:09:35,740 --> 00:09:39,700
these well first we need<font color="#E5E5E5"> to make</font><font color="#CCCCCC"> sure</font>

212
00:09:37,990 --> 00:09:42,430
<font color="#E5E5E5">that we're considering bond IP to only</font>

213
00:09:39,700 --> 00:09:44,230
bind to our necessary interfaces<font color="#CCCCCC"> turn</font><font color="#E5E5E5"> on</font>

214
00:09:42,430 --> 00:09:48,310
<font color="#E5E5E5">authentication and turn off HTTP</font>

215
00:09:44,230 --> 00:09:51,760
interface and rest<font color="#E5E5E5"> options so we'll look</font>

216
00:09:48,310 --> 00:09:53,619
<font color="#E5E5E5">at an example MongoDB instance that's in</font>

217
00:09:51,760 --> 00:10:02,620
securely configured in show how<font color="#CCCCCC"> many of</font>

218
00:09:53,620 --> 00:10:04,210
these<font color="#CCCCCC"> pour options can be exploited so</font>

219
00:10:02,620 --> 00:10:06,250
we're going<font color="#CCCCCC"> to navigate to our MongoDB</font>

220
00:10:04,210 --> 00:10:08,260
instance and by default<font color="#E5E5E5"> the rest</font>

221
00:10:06,250 --> 00:10:10,750
interface<font color="#E5E5E5"> is exposed on port two zero</font>

222
00:10:08,260 --> 00:10:12,100
two<font color="#CCCCCC"> eight zero one</font><font color="#E5E5E5"> seven so when you</font>

223
00:10:10,750 --> 00:10:14,140
navigate to it we<font color="#CCCCCC"> have these various</font>

224
00:10:12,100 --> 00:10:15,430
commands at top at our<font color="#E5E5E5"> rest interfaces</font>

225
00:10:14,140 --> 00:10:17,910
and<font color="#E5E5E5"> we can do things like get build</font>

226
00:10:15,430 --> 00:10:24,339
<font color="#CCCCCC">information on the</font><font color="#E5E5E5"> database instance</font>

227
00:10:17,910 --> 00:10:26,620
<font color="#E5E5E5">show the databases and we can also</font>

228
00:10:24,340 --> 00:10:29,860
scroll down and look<font color="#E5E5E5"> at the various logs</font>

229
00:10:26,620 --> 00:10:31,120
for this<font color="#E5E5E5"> smoggy DB</font><font color="#CCCCCC"> instance</font><font color="#E5E5E5"> so while to</font>

230
00:10:29,860 --> 00:10:32,850
get information that<font color="#E5E5E5"> we can glean as an</font>

231
00:10:31,120 --> 00:10:35,530
attacker if we can gain access to this

232
00:10:32,850 --> 00:10:37,630
again because authentication is disabled

233
00:10:35,530 --> 00:10:39,730
<font color="#E5E5E5">we can connect directly to</font><font color="#CCCCCC"> our database</font>

234
00:10:37,630 --> 00:10:42,040
<font color="#CCCCCC">using the Mongo shell utility and query</font>

235
00:10:39,730 --> 00:10:45,670
directly<font color="#E5E5E5"> and get things like user</font>

236
00:10:42,040 --> 00:10:46,810
credentials so how do<font color="#E5E5E5"> we fix this well</font>

237
00:10:45,670 --> 00:10:48,969
we're going to<font color="#CCCCCC"> go to</font><font color="#E5E5E5"> the Mongo DB</font>

238
00:10:46,810 --> 00:10:52,359
configuration file and<font color="#CCCCCC"> first thing we</font>

239
00:10:48,970 --> 00:10:53,920
will do<font color="#E5E5E5"> is turn on authentication next</font>

240
00:10:52,360 --> 00:10:55,059
if we<font color="#E5E5E5"> don't want to bind to all</font>

241
00:10:53,920 --> 00:10:56,259
interfaces then we need

242
00:10:55,059 --> 00:11:00,218
specify which interface we're going to

243
00:10:56,259 --> 00:11:01,989
bind to<font color="#CCCCCC"> and then we need</font><font color="#E5E5E5"> to turn off</font><font color="#CCCCCC"> the</font>

244
00:11:00,219 --> 00:11:05,769
HTTP interface and rest interface

245
00:11:01,989 --> 00:11:10,539
options so now we're going to<font color="#E5E5E5"> restart</font>

246
00:11:05,769 --> 00:11:13,389
our MongoDB instance and we're going to

247
00:11:10,539 --> 00:11:15,309
connect<font color="#CCCCCC"> to it again and once we connect</font>

248
00:11:13,389 --> 00:11:17,739
to it<font color="#CCCCCC"> we're we see that when</font><font color="#E5E5E5"> we try to</font>

249
00:11:15,309 --> 00:11:20,079
<font color="#CCCCCC">do</font><font color="#E5E5E5"> the same find query we don't get</font>

250
00:11:17,739 --> 00:11:22,869
<font color="#CCCCCC">anything we're unauthorized and if we</font>

251
00:11:20,079 --> 00:11:28,988
try<font color="#E5E5E5"> to access the HTTP interface again</font>

252
00:11:22,869 --> 00:11:30,809
it's<font color="#E5E5E5"> not being served</font><font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> all right</font>

253
00:11:28,989 --> 00:11:35,169
enough of MongoDB let's look at Express

254
00:11:30,809 --> 00:11:39,159
so Express is the the server component

255
00:11:35,169 --> 00:11:41,889
of our mean stack and<font color="#CCCCCC"> Express of the</font>

256
00:11:39,159 --> 00:11:43,689
concept of routes and middleware<font color="#CCCCCC"> okay so</font>

257
00:11:41,889 --> 00:11:46,029
we can define various<font color="#E5E5E5"> routes we can</font>

258
00:11:43,689 --> 00:11:47,529
define various<font color="#E5E5E5"> middle</font><font color="#CCCCCC"> our components and</font>

259
00:11:46,029 --> 00:11:50,409
apply that middleware to those routes

260
00:11:47,529 --> 00:11:52,479
but our<font color="#E5E5E5"> middleware it applied globally</font>

261
00:11:50,409 --> 00:11:54,939
<font color="#CCCCCC">so we're saying hey apply this to all</font>

262
00:11:52,479 --> 00:11:56,289
the<font color="#E5E5E5"> routes in our</font><font color="#CCCCCC"> Express stack that</font>

263
00:11:54,939 --> 00:11:58,179
<font color="#CCCCCC">middleware</font><font color="#E5E5E5"> is only going to be applied</font>

264
00:11:56,289 --> 00:11:59,619
to routes that<font color="#E5E5E5"> are lower</font><font color="#CCCCCC"> down in our</font>

265
00:11:58,179 --> 00:12:02,589
<font color="#CCCCCC">Express stack so that</font><font color="#E5E5E5"> route</font><font color="#CCCCCC"> that have</font>

266
00:11:59,619 --> 00:12:05,429
been defined<font color="#CCCCCC"> after</font><font color="#E5E5E5"> that middleware so</font>

267
00:12:02,589 --> 00:12:07,719
this can present<font color="#E5E5E5"> a problem if we</font><font color="#CCCCCC"> have</font>

268
00:12:05,429 --> 00:12:11,319
sensitive routes that<font color="#CCCCCC"> are defined before</font>

269
00:12:07,719 --> 00:12:15,819
<font color="#E5E5E5">our our middleware that performs some</font>

270
00:12:11,319 --> 00:12:17,319
sort of security function right<font color="#E5E5E5"> so we</font>

271
00:12:15,819 --> 00:12:18,459
have the middleware is logged in<font color="#E5E5E5"> this is</font>

272
00:12:17,319 --> 00:12:20,348
<font color="#E5E5E5">our authentication middleware that</font>

273
00:12:18,459 --> 00:12:22,179
<font color="#E5E5E5">checks to see is this user actually</font>

274
00:12:20,349 --> 00:12:24,819
authenticated for this resource<font color="#E5E5E5"> at</font><font color="#CCCCCC"> the</font>

275
00:12:22,179 --> 00:12:27,069
requesting so we have two routes<font color="#CCCCCC"> first</font>

276
00:12:24,819 --> 00:12:28,779
is the secure add invoice<font color="#CCCCCC"> route this</font>

277
00:12:27,069 --> 00:12:30,909
lets<font color="#E5E5E5"> us add an invoice or application</font>

278
00:12:28,779 --> 00:12:32,139
and it's defined after<font color="#E5E5E5"> this middleware</font>

279
00:12:30,909 --> 00:12:33,399
so it's going to<font color="#E5E5E5"> be protected we have to</font>

280
00:12:32,139 --> 00:12:35,589
be authenticated<font color="#CCCCCC"> before we can access</font>

281
00:12:33,399 --> 00:12:37,539
this the other<font color="#E5E5E5"> route</font>

282
00:12:35,589 --> 00:12:39,879
remove invoice is defined before<font color="#CCCCCC"> this</font>

283
00:12:37,539 --> 00:12:41,109
middleware so the problem here is<font color="#CCCCCC"> even</font>

284
00:12:39,879 --> 00:12:43,449
<font color="#E5E5E5">though we're applying this middle or</font>

285
00:12:41,109 --> 00:12:44,589
globally it's being<font color="#CCCCCC"> applied after the</font>

286
00:12:43,449 --> 00:12:49,449
<font color="#CCCCCC">set of route</font><font color="#E5E5E5"> and it's not actually</font><font color="#CCCCCC"> going</font>

287
00:12:44,589 --> 00:12:51,819
<font color="#E5E5E5">to protect it so the remediation here is</font>

288
00:12:49,449 --> 00:12:52,539
simply<font color="#CCCCCC"> to check the</font><font color="#E5E5E5"> order of our routes</font>

289
00:12:51,819 --> 00:12:55,809
<font color="#E5E5E5">on our middleware</font>

290
00:12:52,539 --> 00:12:57,669
and where this<font color="#E5E5E5"> becomes more prominent</font>

291
00:12:55,809 --> 00:12:58,959
issues we're dealing with<font color="#E5E5E5"> an older</font>

292
00:12:57,669 --> 00:13:00,848
application something<font color="#E5E5E5"> that we're</font>

293
00:12:58,959 --> 00:13:02,949
performing<font color="#CCCCCC"> maintenance</font><font color="#E5E5E5"> on adding routes</font>

294
00:13:00,849 --> 00:13:04,179
to it<font color="#E5E5E5"> before we just drop a route into</font>

295
00:13:02,949 --> 00:13:05,699
<font color="#E5E5E5">the stack way to look at all the other</font>

296
00:13:04,179 --> 00:13:07,959
middleware and<font color="#E5E5E5"> make sure that we're not</font>

297
00:13:05,699 --> 00:13:08,380
defining this route before<font color="#E5E5E5"> some sort</font><font color="#CCCCCC"> of</font>

298
00:13:07,959 --> 00:13:12,310
middle

299
00:13:08,380 --> 00:13:14,050
that needs to<font color="#CCCCCC"> be protecting it alright</font>

300
00:13:12,310 --> 00:13:17,709
continue to express case-insensitive

301
00:13:14,050 --> 00:13:19,390
routing so by default<font color="#E5E5E5"> Express uses</font>

302
00:13:17,710 --> 00:13:22,180
<font color="#E5E5E5">case-insensitive routing meaning that</font>

303
00:13:19,390 --> 00:13:24,069
capital<font color="#CCCCCC"> secure</font><font color="#E5E5E5"> managed invoices is going</font>

304
00:13:22,180 --> 00:13:26,949
to be the same as lowercase<font color="#CCCCCC"> secured</font>

305
00:13:24,070 --> 00:13:29,190
managed invoices well<font color="#E5E5E5"> this becomes</font><font color="#CCCCCC"> a</font>

306
00:13:26,950 --> 00:13:33,160
<font color="#CCCCCC">problem if our</font><font color="#E5E5E5"> middleware is applied</font>

307
00:13:29,190 --> 00:13:35,710
based on<font color="#E5E5E5"> that route</font><font color="#CCCCCC"> pad</font><font color="#E5E5E5"> so we have our</font>

308
00:13:33,160 --> 00:13:39,280
authentication middleware<font color="#E5E5E5"> and we're</font>

309
00:13:35,710 --> 00:13:42,910
applying it<font color="#E5E5E5"> to all routes that have that</font>

310
00:13:39,280 --> 00:13:44,920
begin with<font color="#E5E5E5"> the path slash secure but the</font>

311
00:13:42,910 --> 00:13:46,300
regex<font color="#E5E5E5"> reunion is case insensitive so</font>

312
00:13:44,920 --> 00:13:50,050
it's<font color="#E5E5E5"> only looking</font><font color="#CCCCCC"> for route that being</font>

313
00:13:46,300 --> 00:13:52,150
with slash<font color="#E5E5E5"> lowercase secure and we have</font>

314
00:13:50,050 --> 00:13:55,800
in our application the only route that

315
00:13:52,150 --> 00:14:01,420
is defined is slash<font color="#E5E5E5"> lowercase secure</font>

316
00:13:55,800 --> 00:14:02,680
well<font color="#E5E5E5"> this becomes a problem if we're</font>

317
00:14:01,420 --> 00:14:06,069
using case insensitive routing which

318
00:14:02,680 --> 00:14:08,609
<font color="#CCCCCC">Express does by default because capitals</font>

319
00:14:06,070 --> 00:14:10,750
secure<font color="#CCCCCC"> it's going to return</font><font color="#E5E5E5"> the same</font>

320
00:14:08,610 --> 00:14:14,260
resource<font color="#E5E5E5"> but it's not going to be</font>

321
00:14:10,750 --> 00:14:16,450
<font color="#E5E5E5">protected by this middleware so how we</font>

322
00:14:14,260 --> 00:14:18,189
fix this well we<font color="#E5E5E5"> have two options</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

323
00:14:16,450 --> 00:14:20,590
<font color="#CCCCCC">either design</font><font color="#E5E5E5"> our application around</font>

324
00:14:18,190 --> 00:14:22,630
these<font color="#E5E5E5"> case insensitive routes in this</font>

325
00:14:20,590 --> 00:14:24,460
example we<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> change this regular</font>

326
00:14:22,630 --> 00:14:27,160
expression<font color="#CCCCCC"> to a case insensitive regular</font>

327
00:14:24,460 --> 00:14:29,440
expression<font color="#CCCCCC"> or we can tell Express</font><font color="#E5E5E5"> they</font>

328
00:14:27,160 --> 00:14:30,670
only<font color="#E5E5E5"> use case sensitive routes</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> here</font>

329
00:14:29,440 --> 00:14:33,910
<font color="#E5E5E5">that by setting the case</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the</font>

330
00:14:30,670 --> 00:14:37,420
<font color="#E5E5E5">routing option to true in which</font><font color="#CCCCCC"> case the</font>

331
00:14:33,910 --> 00:14:40,510
<font color="#E5E5E5">Express server will no longer return the</font>

332
00:14:37,420 --> 00:14:42,370
same resource for<font color="#E5E5E5"> capital secure</font><font color="#CCCCCC"> managed</font>

333
00:14:40,510 --> 00:14:44,890
invoices as it does for<font color="#E5E5E5"> lower case</font>

334
00:14:42,370 --> 00:14:48,370
<font color="#E5E5E5">secure management voices so let's look</font>

335
00:14:44,890 --> 00:14:50,980
at an example if<font color="#E5E5E5"> we try</font><font color="#CCCCCC"> to force browse</font>

336
00:14:48,370 --> 00:14:53,020
to locate<font color="#CCCCCC"> secure manage invoices we see</font>

337
00:14:50,980 --> 00:14:54,250
that we're unable<font color="#CCCCCC"> to do so</font><font color="#E5E5E5"> it rejects</font>

338
00:14:53,020 --> 00:14:56,800
<font color="#E5E5E5">our request and sends us back to the</font>

339
00:14:54,250 --> 00:15:00,820
<font color="#CCCCCC">login screen</font><font color="#E5E5E5"> however</font><font color="#CCCCCC"> if we change this</font>

340
00:14:56,800 --> 00:15:04,240
<font color="#CCCCCC">to capital secure</font><font color="#E5E5E5"> manage invoices then</font>

341
00:15:00,820 --> 00:15:07,120
we can actually<font color="#CCCCCC"> force browse to a dented</font>

342
00:15:04,240 --> 00:15:09,760
page and again<font color="#CCCCCC"> this is because Express</font>

343
00:15:07,120 --> 00:15:11,110
is using this case insensitive<font color="#E5E5E5"> routes so</font>

344
00:15:09,760 --> 00:15:13,900
<font color="#E5E5E5">we have two authors and fixes we can</font>

345
00:15:11,110 --> 00:15:16,180
either again go in and set this regular

346
00:15:13,900 --> 00:15:18,069
<font color="#CCCCCC">expression is case insensitive</font><font color="#E5E5E5"> so that</font>

347
00:15:16,180 --> 00:15:21,099
it's applying to<font color="#E5E5E5"> lower case secure or</font>

348
00:15:18,070 --> 00:15:22,610
<font color="#E5E5E5">upper case secure or we can set the case</font>

349
00:15:21,100 --> 00:15:24,589
sensitive routing options

350
00:15:22,610 --> 00:15:26,959
<font color="#CCCCCC">true for express to tell</font><font color="#E5E5E5"> it he's only</font>

351
00:15:24,589 --> 00:15:29,089
<font color="#CCCCCC">case-sensitive brows</font><font color="#E5E5E5"> so that's we're</font>

352
00:15:26,959 --> 00:15:32,630
going<font color="#E5E5E5"> to do in this case we're going to</font>

353
00:15:29,089 --> 00:15:34,579
restart<font color="#E5E5E5"> our server</font><font color="#CCCCCC"> and we're going to</font>

354
00:15:32,630 --> 00:15:36,200
try the same<font color="#E5E5E5"> force browsing attempt</font>

355
00:15:34,579 --> 00:15:37,609
again<font color="#E5E5E5"> and it's either this time it</font>

356
00:15:36,200 --> 00:15:39,920
doesn't return<font color="#E5E5E5"> the resource</font>

357
00:15:37,610 --> 00:15:44,959
it says the<font color="#CCCCCC"> capital secure manager</font>

358
00:15:39,920 --> 00:15:47,660
invoices doesn't exist<font color="#CCCCCC"> alright</font>

359
00:15:44,959 --> 00:15:50,469
<font color="#E5E5E5">continuing</font><font color="#CCCCCC"> to express sea</font><font color="#E5E5E5"> surf and get</font>

360
00:15:47,660 --> 00:15:53,350
<font color="#CCCCCC">requests</font><font color="#E5E5E5"> so the sea surf is a popular</font>

361
00:15:50,470 --> 00:15:56,959
anti sea surf middle layer<font color="#E5E5E5"> for Express</font>

362
00:15:53,350 --> 00:15:59,870
has 1.2 million downloads<font color="#E5E5E5"> as of March</font>

363
00:15:56,959 --> 00:16:01,880
and the link<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> package is located</font>

364
00:15:59,870 --> 00:16:04,550
in the slide and basically<font color="#E5E5E5"> with this</font>

365
00:16:01,880 --> 00:16:07,579
this<font color="#CCCCCC"> middle er does is it provides the</font>

366
00:16:04,550 --> 00:16:10,760
<font color="#CCCCCC">server side checking of our anti-sea</font>

367
00:16:07,579 --> 00:16:13,569
surf token right so it<font color="#E5E5E5"> looks for the the</font>

368
00:16:10,760 --> 00:16:15,980
inbound requests<font color="#E5E5E5"> on the route if the</font>

369
00:16:13,570 --> 00:16:17,540
parses out the the<font color="#E5E5E5"> seat surf token and</font>

370
00:16:15,980 --> 00:16:19,399
checks<font color="#CCCCCC"> to make sure</font><font color="#E5E5E5"> that it's actually</font>

371
00:16:17,540 --> 00:16:23,599
<font color="#E5E5E5">valid</font><font color="#CCCCCC"> requests coming</font><font color="#E5E5E5"> from one of our</font>

372
00:16:19,399 --> 00:16:25,399
pages<font color="#E5E5E5"> rather than a sea surface</font><font color="#CCCCCC"> AK but</font>

373
00:16:23,600 --> 00:16:28,040
the problem is if we<font color="#E5E5E5"> apply this</font>

374
00:16:25,399 --> 00:16:30,290
<font color="#E5E5E5">middleware globally so we're telling</font>

375
00:16:28,040 --> 00:16:33,380
<font color="#E5E5E5">Express to apply to all routes it's not</font>

376
00:16:30,290 --> 00:16:35,719
going to get applied to any route that

377
00:16:33,380 --> 00:16:38,209
uses the get method<font color="#E5E5E5"> so if</font><font color="#CCCCCC"> we look</font><font color="#E5E5E5"> at our</font>

378
00:16:35,720 --> 00:16:40,940
example<font color="#CCCCCC"> here it's</font><font color="#E5E5E5"> going to be applied to</font>

379
00:16:38,209 --> 00:16:44,689
secure add<font color="#E5E5E5"> invoice but not to secure</font>

380
00:16:40,940 --> 00:16:48,399
<font color="#E5E5E5">remove invoice again because the secure</font>

381
00:16:44,690 --> 00:16:48,399
remove<font color="#E5E5E5"> invoice is using the get method</font>

382
00:16:48,940 --> 00:16:54,829
so how do<font color="#E5E5E5"> we fix this well the the</font>

383
00:16:51,920 --> 00:16:57,290
<font color="#CCCCCC">recommend</font><font color="#E5E5E5"> remediation in the the most</font>

384
00:16:54,829 --> 00:16:59,569
appropriate order is first to avoid

385
00:16:57,290 --> 00:17:01,760
state<font color="#E5E5E5"> changing requests with the get</font>

386
00:16:59,570 --> 00:17:03,680
method<font color="#E5E5E5"> so anything that changes state on</font>

387
00:17:01,760 --> 00:17:05,929
<font color="#CCCCCC">our servers it's generally bad hygiene</font>

388
00:17:03,680 --> 00:17:08,209
<font color="#E5E5E5">to to perform those requests with the</font>

389
00:17:05,929 --> 00:17:09,919
get method<font color="#E5E5E5"> so as we see in the excerpt</font>

390
00:17:08,209 --> 00:17:13,160
here we<font color="#E5E5E5"> simply change this to a post</font>

391
00:17:09,919 --> 00:17:16,130
request<font color="#CCCCCC"> I'm sorry to a post</font><font color="#E5E5E5"> a route</font>

392
00:17:13,160 --> 00:17:18,169
expecting the post method<font color="#CCCCCC"> and in this</font>

393
00:17:16,130 --> 00:17:21,500
case it's going to<font color="#CCCCCC"> be properly protected</font>

394
00:17:18,169 --> 00:17:23,839
by<font color="#CCCCCC"> our</font><font color="#E5E5E5"> C surf middleware</font><font color="#CCCCCC"> the other</font>

395
00:17:21,500 --> 00:17:26,869
option is to<font color="#CCCCCC"> remove the get method</font><font color="#E5E5E5"> from</font>

396
00:17:23,839 --> 00:17:29,090
the ignore methods option so again with

397
00:17:26,869 --> 00:17:31,428
the sea<font color="#E5E5E5"> surface model where we can</font>

398
00:17:29,090 --> 00:17:33,559
define<font color="#E5E5E5"> the</font><font color="#CCCCCC"> nor methods option as only</font>

399
00:17:31,429 --> 00:17:34,980
head and options we've removed get from

400
00:17:33,559 --> 00:17:36,360
<font color="#E5E5E5">that array</font>

401
00:17:34,980 --> 00:17:38,790
and it's going to<font color="#E5E5E5"> tell</font><font color="#CCCCCC"> the middle we're</font>

402
00:17:36,360 --> 00:17:40,709
no<font color="#E5E5E5"> longer ignore the get</font><font color="#CCCCCC"> method go ahead</font>

403
00:17:38,790 --> 00:17:47,730
and<font color="#E5E5E5"> apply yourself</font><font color="#CCCCCC"> to routes</font><font color="#E5E5E5"> that they</font>

404
00:17:40,710 --> 00:17:49,860
use<font color="#CCCCCC"> the get method and the final option</font>

405
00:17:47,730 --> 00:17:51,900
<font color="#E5E5E5">is to simply apply our middleware</font>

406
00:17:49,860 --> 00:17:53,850
<font color="#CCCCCC">/ route</font><font color="#E5E5E5"> rather than globally so</font>

407
00:17:51,900 --> 00:17:56,220
previously<font color="#E5E5E5"> we're applying it to the</font>

408
00:17:53,850 --> 00:17:58,049
entire<font color="#CCCCCC"> application stack</font><font color="#E5E5E5"> well we can</font>

409
00:17:56,220 --> 00:18:00,720
also<font color="#E5E5E5"> apply it to each individual route</font>

410
00:17:58,049 --> 00:18:02,760
by manually<font color="#E5E5E5"> inserting into that route</font>

411
00:18:00,720 --> 00:18:05,130
definition now this is the least

412
00:18:02,760 --> 00:18:06,450
recommended option<font color="#E5E5E5"> primarily</font><font color="#CCCCCC"> because it</font>

413
00:18:05,130 --> 00:18:08,250
<font color="#E5E5E5">increases</font><font color="#CCCCCC"> the likelihood</font><font color="#E5E5E5"> that a</font>

414
00:18:06,450 --> 00:18:11,250
developer is going<font color="#E5E5E5"> to forget to include</font>

415
00:18:08,250 --> 00:18:15,330
<font color="#E5E5E5">it on a sensitive route but it is a</font>

416
00:18:11,250 --> 00:18:18,120
viable option so we look<font color="#E5E5E5"> at an example</font>

417
00:18:15,330 --> 00:18:21,740
<font color="#CCCCCC">again we're logged</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> our mean bug</font>

418
00:18:18,120 --> 00:18:29,219
application<font color="#E5E5E5"> and we see that we can</font>

419
00:18:21,740 --> 00:18:36,419
navigate over to<font color="#CCCCCC"> the invoice page and if</font>

420
00:18:29,220 --> 00:18:39,390
we look at our<font color="#E5E5E5"> database</font><font color="#CCCCCC"> of invoices we</font>

421
00:18:36,419 --> 00:18:44,730
see that it contains two invoices<font color="#CCCCCC"> ID 3</font>

422
00:18:39,390 --> 00:18:46,290
and ID 4 so what<font color="#E5E5E5"> what is click on this</font>

423
00:18:44,730 --> 00:18:48,570
<font color="#E5E5E5">link this is represent the malicious</font>

424
00:18:46,290 --> 00:18:50,309
<font color="#CCCCCC">link sisters by an attacker that call a</font>

425
00:18:48,570 --> 00:18:55,110
search<font color="#E5E5E5"> request to remove invoice route</font>

426
00:18:50,309 --> 00:18:58,379
for ID 0 0 0 0 0<font color="#E5E5E5"> 4 and</font><font color="#CCCCCC"> by simply click</font>

427
00:18:55,110 --> 00:19:00,479
on<font color="#E5E5E5"> that link we've deleted that invoice</font>

428
00:18:58,380 --> 00:19:02,760
<font color="#E5E5E5">if we go back and look at the database</font>

429
00:19:00,480 --> 00:19:06,870
<font color="#CCCCCC">query</font><font color="#E5E5E5"> again we see</font><font color="#CCCCCC"> that number 4 is</font><font color="#E5E5E5"> that</font>

430
00:19:02,760 --> 00:19:09,900
<font color="#CCCCCC">are moved only 3 remain</font><font color="#E5E5E5"> so that's a</font>

431
00:19:06,870 --> 00:19:13,979
prime example<font color="#E5E5E5"> of our our</font><font color="#CCCCCC"> CTO of attack</font>

432
00:19:09,900 --> 00:19:17,040
<font color="#E5E5E5">how do we fix it well we can change that</font>

433
00:19:13,980 --> 00:19:20,070
<font color="#CCCCCC">get request</font><font color="#E5E5E5"> to a post request or post</font>

434
00:19:17,040 --> 00:19:22,470
route<font color="#CCCCCC"> or we can go</font><font color="#E5E5E5"> to the C surf middle</font>

435
00:19:20,070 --> 00:19:24,659
<font color="#CCCCCC">er definition here and change the ignore</font>

436
00:19:22,470 --> 00:19:26,970
options method<font color="#E5E5E5"> to only include head and</font>

437
00:19:24,660 --> 00:19:28,530
options so that's what's done<font color="#E5E5E5"> this case</font>

438
00:19:26,970 --> 00:19:31,830
<font color="#E5E5E5">we've told the middleware hey apply</font>

439
00:19:28,530 --> 00:19:34,110
yourself to<font color="#E5E5E5"> the get routes as well we've</font>

440
00:19:31,830 --> 00:19:36,689
restarted our server<font color="#E5E5E5"> and now we'll</font>

441
00:19:34,110 --> 00:19:40,350
perform<font color="#E5E5E5"> the same attack again so we'll</font>

442
00:19:36,690 --> 00:19:43,200
create a new URL<font color="#E5E5E5"> again it's going to our</font>

443
00:19:40,350 --> 00:19:46,469
mean bug application for<font color="#E5E5E5"> move invoice</font>

444
00:19:43,200 --> 00:19:47,960
with the value the sum<font color="#CCCCCC"> we'll use 0 0 0 0</font>

445
00:19:46,470 --> 00:19:50,809
0<font color="#E5E5E5"> 3</font>

446
00:19:47,960 --> 00:19:53,509
and will seem<font color="#E5E5E5"> like the tack again so</font>

447
00:19:50,809 --> 00:19:55,759
when we click<font color="#E5E5E5"> on</font><font color="#CCCCCC"> that link instead of</font>

448
00:19:53,509 --> 00:19:57,679
removing<font color="#E5E5E5"> the actual invoice we see we</font>

449
00:19:55,759 --> 00:20:01,039
get<font color="#E5E5E5"> a form camford with message</font>

450
00:19:57,679 --> 00:20:02,720
so our<font color="#CCCCCC"> C surf protection is now being</font>

451
00:20:01,039 --> 00:20:05,330
applied<font color="#CCCCCC"> to</font><font color="#E5E5E5"> that route appropriately</font><font color="#CCCCCC"> and</font>

452
00:20:02,720 --> 00:20:07,249
<font color="#E5E5E5">if we look at the database of our</font>

453
00:20:05,330 --> 00:20:07,879
<font color="#E5E5E5">invoices we see that our invoice is</font>

454
00:20:07,249 --> 00:20:09,919
still there

455
00:20:07,879 --> 00:20:16,369
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we've prevented that</font><font color="#E5E5E5"> cross-site</font>

456
00:20:09,919 --> 00:20:18,440
request forgery attack alright

457
00:20:16,369 --> 00:20:22,039
<font color="#E5E5E5">continuing with</font><font color="#CCCCCC"> Express session</font>

458
00:20:18,440 --> 00:20:25,309
revocation and<font color="#CCCCCC"> JWT s so a data bikies or</font>

459
00:20:22,039 --> 00:20:29,090
JSON web tokens are becoming more<font color="#E5E5E5"> and</font>

460
00:20:25,309 --> 00:20:32,928
<font color="#CCCCCC">more popular as a mean to soar our users</font>

461
00:20:29,090 --> 00:20:34,850
session data<font color="#E5E5E5"> client-side so the latest</font>

462
00:20:32,929 --> 00:20:38,240
works the data data is digitally signed

463
00:20:34,850 --> 00:20:40,610
our our<font color="#E5E5E5"> data</font><font color="#CCCCCC"> P has a header</font><font color="#E5E5E5"> and has our</font>

464
00:20:38,240 --> 00:20:42,769
body which has the actual data for<font color="#E5E5E5"> that</font>

465
00:20:40,610 --> 00:20:45,019
user session<font color="#E5E5E5"> and then it has a signature</font>

466
00:20:42,769 --> 00:20:49,450
<font color="#E5E5E5">so the signature is what validates that</font>

467
00:20:45,019 --> 00:20:51,409
<font color="#E5E5E5">this JWT hasn't been</font><font color="#CCCCCC"> tampered with</font><font color="#E5E5E5"> and</font>

468
00:20:49,450 --> 00:20:52,970
<font color="#CCCCCC">that signature</font><font color="#E5E5E5"> is going to be checked</font>

469
00:20:51,409 --> 00:20:56,899
<font color="#CCCCCC">server-side</font><font color="#E5E5E5"> to make sure that again the</font>

470
00:20:52,970 --> 00:20:58,730
no tampering has occurred so the big

471
00:20:56,899 --> 00:21:01,070
advantage<font color="#CCCCCC"> here is our server no longer</font>

472
00:20:58,730 --> 00:21:02,840
need<font color="#CCCCCC"> to maintain session state data</font>

473
00:21:01,070 --> 00:21:05,480
server-side we can push that over<font color="#E5E5E5"> to the</font>

474
00:21:02,840 --> 00:21:08,480
client<font color="#E5E5E5"> right and because the JDBC is</font>

475
00:21:05,480 --> 00:21:10,220
signed<font color="#E5E5E5"> we can have a level of</font><font color="#CCCCCC"> assurance</font>

476
00:21:08,480 --> 00:21:13,789
that<font color="#E5E5E5"> this the state of T hasn't actually</font>

477
00:21:10,220 --> 00:21:15,379
been tampered with<font color="#E5E5E5"> but this</font><font color="#CCCCCC"> also means</font>

478
00:21:13,789 --> 00:21:18,379
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the application cannot revoke our</font>

479
00:21:15,379 --> 00:21:20,719
session so even if we set the expires

480
00:21:18,379 --> 00:21:22,189
dinner<font color="#CCCCCC"> max age attribute on the session</font>

481
00:21:20,720 --> 00:21:24,169
cookie all we're doing is requesting

482
00:21:22,190 --> 00:21:26,090
<font color="#E5E5E5">that the browser</font><font color="#CCCCCC"> purge</font><font color="#E5E5E5"> the session after</font>

483
00:21:24,169 --> 00:21:28,519
that set amount of<font color="#E5E5E5"> time</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not</font>

484
00:21:26,090 --> 00:21:30,350
actually in validating<font color="#E5E5E5"> the session so if</font>

485
00:21:28,519 --> 00:21:32,919
all we're relying on is expires in or

486
00:21:30,350 --> 00:21:36,439
<font color="#CCCCCC">maxed age this session will last forever</font>

487
00:21:32,919 --> 00:21:39,440
<font color="#E5E5E5">it can be replayed indefinitely</font><font color="#CCCCCC"> days</font>

488
00:21:36,440 --> 00:21:40,960
weeks months down the<font color="#CCCCCC"> road and the</font>

489
00:21:39,440 --> 00:21:43,129
server doesn't<font color="#E5E5E5"> know any better</font>

490
00:21:40,960 --> 00:21:45,129
<font color="#E5E5E5">so the other problem here is</font><font color="#CCCCCC"> Iger can't</font>

491
00:21:43,129 --> 00:21:46,879
log out<font color="#CCCCCC"> of their session</font><font color="#E5E5E5"> so if</font><font color="#CCCCCC"> the user</font>

492
00:21:45,129 --> 00:21:49,399
programmatically logs out of<font color="#CCCCCC"> our</font>

493
00:21:46,879 --> 00:21:51,949
application<font color="#E5E5E5"> all it's going to do is</font>

494
00:21:49,399 --> 00:21:55,518
simply redirect them<font color="#CCCCCC"> to the login page</font>

495
00:21:51,950 --> 00:21:57,379
<font color="#E5E5E5">it could potentially purge the session</font>

496
00:21:55,519 --> 00:21:59,149
<font color="#E5E5E5">from the browser</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> that session is</font>

497
00:21:57,379 --> 00:22:01,280
<font color="#CCCCCC">still going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> be valid</font><font color="#E5E5E5"> if it's been</font>

498
00:21:59,149 --> 00:22:05,840
captured it can be replayed<font color="#E5E5E5"> even though</font>

499
00:22:01,280 --> 00:22:07,879
our<font color="#E5E5E5"> easer has quote logged out so how do</font>

500
00:22:05,840 --> 00:22:10,360
you fix this<font color="#E5E5E5"> well our data beauties have</font>

501
00:22:07,880 --> 00:22:13,370
<font color="#E5E5E5">to</font><font color="#CCCCCC"> maintain an internal expiration value</font>

502
00:22:10,360 --> 00:22:15,740
<font color="#E5E5E5">so what that means is inside</font><font color="#CCCCCC"> that body</font>

503
00:22:13,370 --> 00:22:17,750
of our<font color="#E5E5E5"> day WT remember that data is</font>

504
00:22:15,740 --> 00:22:19,640
signed it can't be tampered<font color="#E5E5E5"> with we have</font>

505
00:22:17,750 --> 00:22:21,200
to<font color="#CCCCCC"> maintain an expiration value that the</font>

506
00:22:19,640 --> 00:22:23,330
server will check to<font color="#CCCCCC"> see</font><font color="#E5E5E5"> if this</font>

507
00:22:21,200 --> 00:22:27,620
jadibooti is still valid<font color="#CCCCCC"> or if it's been</font>

508
00:22:23,330 --> 00:22:30,010
expired one package<font color="#E5E5E5"> that's fairly common</font>

509
00:22:27,620 --> 00:22:32,209
<font color="#CCCCCC">that does this for us</font><font color="#E5E5E5"> is client sessions</font>

510
00:22:30,010 --> 00:22:33,740
again we can use<font color="#E5E5E5"> this off-the-shelf</font>

511
00:22:32,210 --> 00:22:37,850
package to implement this functionality

512
00:22:33,740 --> 00:22:40,010
for us in our<font color="#CCCCCC"> Xpress stack another</font>

513
00:22:37,850 --> 00:22:43,129
<font color="#E5E5E5">consideration is generally we want to</font>

514
00:22:40,010 --> 00:22:44,330
make this JWT session time<font color="#E5E5E5"> a little bit</font>

515
00:22:43,130 --> 00:22:46,100
shorter<font color="#CCCCCC"> than what we would use</font><font color="#E5E5E5"> with</font>

516
00:22:44,330 --> 00:22:48,500
conventional sessions and again that's

517
00:22:46,100 --> 00:22:50,780
<font color="#E5E5E5">because our user can't log out of a</font>

518
00:22:48,500 --> 00:22:53,000
<font color="#E5E5E5">session that's that's persisted with</font><font color="#CCCCCC"> j-b</font>

519
00:22:50,780 --> 00:22:55,250
<font color="#CCCCCC">beauties</font><font color="#E5E5E5"> so the only way that session is</font>

520
00:22:53,000 --> 00:23:00,560
going<font color="#E5E5E5"> to actually</font><font color="#CCCCCC"> be terminated is for</font>

521
00:22:55,250 --> 00:23:01,730
that internal value to expire<font color="#E5E5E5"> so again</font>

522
00:23:00,560 --> 00:23:04,340
this is using<font color="#E5E5E5"> the client sessions</font>

523
00:23:01,730 --> 00:23:05,990
package it<font color="#E5E5E5"> has an internal duration</font>

524
00:23:04,340 --> 00:23:08,270
option where we<font color="#E5E5E5"> can set that internal</font>

525
00:23:05,990 --> 00:23:10,280
duration of the<font color="#E5E5E5"> state</font><font color="#CCCCCC"> W</font><font color="#E5E5E5"> key and also</font>

526
00:23:08,270 --> 00:23:11,960
<font color="#CCCCCC">this</font><font color="#E5E5E5"> max age we can set the max age of</font>

527
00:23:10,280 --> 00:23:14,000
the cookie from<font color="#E5E5E5"> the security perspective</font>

528
00:23:11,960 --> 00:23:15,680
<font color="#CCCCCC">the max age doesn't</font><font color="#E5E5E5"> mean anything</font>

529
00:23:14,000 --> 00:23:18,620
because<font color="#E5E5E5"> again we're just requesting but</font>

530
00:23:15,680 --> 00:23:20,000
browser<font color="#CCCCCC"> perched that</font><font color="#E5E5E5"> session it's not</font>

531
00:23:18,620 --> 00:23:21,350
actually invalidating it so the duration

532
00:23:20,000 --> 00:23:25,570
<font color="#CCCCCC">is what we're</font><font color="#E5E5E5"> really concerned</font><font color="#CCCCCC"> about</font>

533
00:23:21,350 --> 00:23:28,760
<font color="#CCCCCC">when we're looking at</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> all right so</font>

534
00:23:25,570 --> 00:23:30,649
to demonstrate<font color="#E5E5E5"> this we've authenticated</font>

535
00:23:28,760 --> 00:23:33,230
to our application we've logged in to

536
00:23:30,650 --> 00:23:35,600
<font color="#E5E5E5">our session</font><font color="#CCCCCC"> and this first</font><font color="#E5E5E5"> value is the</font>

537
00:23:33,230 --> 00:23:38,840
time<font color="#E5E5E5"> that our JWT session</font><font color="#CCCCCC"> token was</font>

538
00:23:35,600 --> 00:23:40,699
created and<font color="#CCCCCC"> that</font><font color="#E5E5E5"> second value is how</font>

539
00:23:38,840 --> 00:23:44,449
<font color="#E5E5E5">long it's going to be valid these are</font>

540
00:23:40,700 --> 00:23:49,190
milliseconds so we will log out of the

541
00:23:44,450 --> 00:23:52,850
application and we see we're redirected

542
00:23:49,190 --> 00:23:54,920
to the login<font color="#E5E5E5"> page and if you look at our</font>

543
00:23:52,850 --> 00:23:58,669
session<font color="#E5E5E5"> the</font><font color="#CCCCCC"> session has been purged from</font>

544
00:23:54,920 --> 00:24:01,580
<font color="#E5E5E5">our browser it's now set to null but if</font>

545
00:23:58,670 --> 00:24:04,880
we go into<font color="#E5E5E5"> our HTTP proxy we've captured</font>

546
00:24:01,580 --> 00:24:06,949
<font color="#E5E5E5">the session</font><font color="#CCCCCC"> value this JWT</font><font color="#E5E5E5"> we can replay</font>

547
00:24:04,880 --> 00:24:08,270
it<font color="#E5E5E5"> and it's still going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be valid all</font>

548
00:24:06,950 --> 00:24:10,610
right it's going<font color="#E5E5E5"> to continue</font><font color="#CCCCCC"> to be valid</font>

549
00:24:08,270 --> 00:24:13,000
<font color="#CCCCCC">until that internal expiration time</font>

550
00:24:10,610 --> 00:24:13,000
expires

551
00:24:13,940 --> 00:24:18,770
so<font color="#CCCCCC"> JT bikies they're cool but</font><font color="#E5E5E5"> they have</font>

552
00:24:16,580 --> 00:24:20,060
some some interesting<font color="#CCCCCC"> quirks from a</font>

553
00:24:18,770 --> 00:24:24,080
<font color="#E5E5E5">security perspective that you know we</font>

554
00:24:20,060 --> 00:24:25,190
need to<font color="#E5E5E5"> be aware of all right so enough</font>

555
00:24:24,080 --> 00:24:28,550
<font color="#CCCCCC">with Express</font><font color="#E5E5E5"> next one I'll talk</font><font color="#CCCCCC"> about</font>

556
00:24:25,190 --> 00:24:31,160
<font color="#E5E5E5">angular specifically expression</font>

557
00:24:28,550 --> 00:24:34,580
injection<font color="#E5E5E5"> so angular templates are</font>

558
00:24:31,160 --> 00:24:38,330
defined by our<font color="#E5E5E5"> ng-app directive which is</font>

559
00:24:34,580 --> 00:24:40,760
bound to<font color="#E5E5E5"> our body HTML element in this</font>

560
00:24:38,330 --> 00:24:43,699
example and then the expressions are

561
00:24:40,760 --> 00:24:46,870
denoted by our double curly braces<font color="#E5E5E5"> in</font>

562
00:24:43,700 --> 00:24:52,790
this case the double curly braces are

563
00:24:46,870 --> 00:24:55,280
calling the the variable user so one of

564
00:24:52,790 --> 00:24:56,840
<font color="#E5E5E5">the problems are the causes of our</font>

565
00:24:55,280 --> 00:24:58,340
angular expression objection is curly

566
00:24:56,840 --> 00:25:01,100
braces are not included by<font color="#E5E5E5"> off-the-shelf</font>

567
00:24:58,340 --> 00:25:03,080
<font color="#E5E5E5">HTML coding solutions so what that means</font>

568
00:25:01,100 --> 00:25:07,429
is<font color="#CCCCCC"> even</font><font color="#E5E5E5"> if we are encoding our untrusted</font>

569
00:25:03,080 --> 00:25:09,379
input<font color="#E5E5E5"> for use within an HTML context our</font>

570
00:25:07,430 --> 00:25:10,610
our angular expression injection<font color="#E5E5E5"> may</font>

571
00:25:09,380 --> 00:25:12,350
<font color="#E5E5E5">still be</font><font color="#CCCCCC"> possible because</font><font color="#E5E5E5"> we're not</font>

572
00:25:10,610 --> 00:25:13,909
<font color="#CCCCCC">actually encoding those curly braces and</font>

573
00:25:12,350 --> 00:25:15,020
those curly braces<font color="#E5E5E5"> are the control</font>

574
00:25:13,910 --> 00:25:18,640
<font color="#CCCCCC">characters that are used to denote</font>

575
00:25:15,020 --> 00:25:20,900
denote<font color="#CCCCCC"> our angular expression so</font>

576
00:25:18,640 --> 00:25:23,720
injecting curly braces also means an

577
00:25:20,900 --> 00:25:27,230
attacker can evaluate arbitrary

578
00:25:23,720 --> 00:25:31,400
expressions and expressions are not

579
00:25:27,230 --> 00:25:34,100
sandbox as of angular 1.6 so what that

580
00:25:31,400 --> 00:25:37,300
means is we're<font color="#E5E5E5"> not confined to the</font>

581
00:25:34,100 --> 00:25:41,480
<font color="#E5E5E5">angular scope object</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can access other</font>

582
00:25:37,300 --> 00:25:43,040
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> anything</font><font color="#E5E5E5"> that we'd like by not</font>

583
00:25:41,480 --> 00:25:44,300
<font color="#CCCCCC">having to</font><font color="#E5E5E5"> worry about that sandbox</font><font color="#CCCCCC"> and</font>

584
00:25:43,040 --> 00:25:45,110
even if we're using<font color="#E5E5E5"> an older</font><font color="#CCCCCC"> version</font>

585
00:25:44,300 --> 00:25:47,389
<font color="#E5E5E5">sandbox</font>

586
00:25:45,110 --> 00:25:51,169
<font color="#CCCCCC">escaping payloads still exist for</font>

587
00:25:47,390 --> 00:25:51,640
previous<font color="#CCCCCC"> versions so what does this look</font>

588
00:25:51,170 --> 00:25:55,220
like

589
00:25:51,640 --> 00:25:56,740
so our<font color="#CCCCCC"> malicious angular code is</font>

590
00:25:55,220 --> 00:25:58,910
injected<font color="#CCCCCC"> through our untrusted input</font>

591
00:25:56,740 --> 00:26:02,810
<font color="#E5E5E5">even</font><font color="#CCCCCC"> if we're passing it through</font><font color="#E5E5E5"> some</font>

592
00:25:58,910 --> 00:26:04,700
<font color="#CCCCCC">sort of HTML coding solution only our</font>

593
00:26:02,810 --> 00:26:06,560
HTML<font color="#E5E5E5"> special characters are encoded so</font>

594
00:26:04,700 --> 00:26:08,870
our angular curly braces are<font color="#E5E5E5"> not going</font>

595
00:26:06,560 --> 00:26:11,629
to be encoded<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> they're going to</font><font color="#CCCCCC"> be</font>

596
00:26:08,870 --> 00:26:13,520
<font color="#CCCCCC">written</font><font color="#E5E5E5"> to our angular template our</font>

597
00:26:11,630 --> 00:26:16,130
angular template is then passed over to

598
00:26:13,520 --> 00:26:17,510
our angular expression engine<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

599
00:26:16,130 --> 00:26:19,550
going<font color="#E5E5E5"> to render those expressions</font>

600
00:26:17,510 --> 00:26:21,980
including<font color="#E5E5E5"> our</font><font color="#CCCCCC"> moshus code that has</font><font color="#E5E5E5"> been</font>

601
00:26:19,550 --> 00:26:23,870
inserted by our attacker<font color="#E5E5E5"> and then it's</font>

602
00:26:21,980 --> 00:26:27,140
<font color="#E5E5E5">going to execute with them to view now</font>

603
00:26:23,870 --> 00:26:27,559
this can all occur client-side<font color="#E5E5E5"> or it can</font>

604
00:26:27,140 --> 00:26:30,220
<font color="#E5E5E5">occur</font>

605
00:26:27,559 --> 00:26:33,289
<font color="#CCCCCC">server-side if we're</font><font color="#E5E5E5"> eating things like</font>

606
00:26:30,220 --> 00:26:35,840
like<font color="#E5E5E5"> Jade ejs pug some of the</font>

607
00:26:33,289 --> 00:26:37,309
server-side templates to create<font color="#CCCCCC"> our</font>

608
00:26:35,840 --> 00:26:45,499
angular<font color="#E5E5E5"> template and then sending it to</font>

609
00:26:37,309 --> 00:26:47,840
the client like so<font color="#E5E5E5"> so how do we fix this</font>

610
00:26:45,499 --> 00:26:49,519
well<font color="#E5E5E5"> one of the options is</font><font color="#CCCCCC"> to reduce the</font>

611
00:26:47,840 --> 00:26:52,129
scope of the<font color="#E5E5E5"> ng app directive so instead</font>

612
00:26:49,519 --> 00:26:54,470
of<font color="#E5E5E5"> binding</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the body we can bind to a</font>

613
00:26:52,129 --> 00:26:58,070
specific<font color="#CCCCCC"> div or table element or some</font>

614
00:26:54,470 --> 00:27:01,149
sort of element<font color="#CCCCCC"> that has a smaller scope</font>

615
00:26:58,070 --> 00:27:05,090
<font color="#E5E5E5">and if we're not writing untrusted input</font>

616
00:27:01,149 --> 00:27:07,820
to that<font color="#E5E5E5"> to</font><font color="#CCCCCC"> that element before things</font>

617
00:27:05,090 --> 00:27:10,309
sent to our angular<font color="#E5E5E5"> template engine then</font>

618
00:27:07,820 --> 00:27:11,389
we can inject anything<font color="#E5E5E5"> right because the</font>

619
00:27:10,309 --> 00:27:14,450
<font color="#E5E5E5">template engine is only going to be</font>

620
00:27:11,389 --> 00:27:15,979
<font color="#E5E5E5">looking at that limited scope the other</font>

621
00:27:14,450 --> 00:27:19,730
option is<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> engine on bindable</font>

622
00:27:15,980 --> 00:27:22,070
directive this attribute if we add it to

623
00:27:19,730 --> 00:27:24,169
<font color="#CCCCCC">our HTML</font><font color="#E5E5E5"> element is going</font><font color="#CCCCCC"> to tell</font><font color="#E5E5E5"> the</font>

624
00:27:22,070 --> 00:27:25,939
angular expression<font color="#E5E5E5"> engine hey don't</font>

625
00:27:24,169 --> 00:27:29,529
render<font color="#E5E5E5"> this this is not part of the</font>

626
00:27:25,940 --> 00:27:31,850
<font color="#E5E5E5">actual template the third option is</font><font color="#CCCCCC"> the</font>

627
00:27:29,529 --> 00:27:34,970
<font color="#E5E5E5">Sanatana</font><font color="#CCCCCC"> ties are untrusted</font><font color="#E5E5E5"> input</font><font color="#CCCCCC"> remove</font>

628
00:27:31,850 --> 00:27:36,289
curly braces<font color="#E5E5E5"> again because our HTML</font>

629
00:27:34,970 --> 00:27:37,970
solutions are going<font color="#E5E5E5"> to do this for us</font>

630
00:27:36,289 --> 00:27:40,940
<font color="#CCCCCC">it generally</font><font color="#E5E5E5"> means we have to use</font><font color="#CCCCCC"> some</font>

631
00:27:37,970 --> 00:27:42,590
<font color="#E5E5E5">sort of custom implemented solution to</font>

632
00:27:40,940 --> 00:27:48,529
remove<font color="#E5E5E5"> those curly braces from our</font>

633
00:27:42,590 --> 00:27:50,570
untrusted input so as an example<font color="#E5E5E5"> if</font><font color="#CCCCCC"> we</font>

634
00:27:48,529 --> 00:27:51,860
log<font color="#E5E5E5"> in</font><font color="#CCCCCC"> your application with invalid</font>

635
00:27:50,570 --> 00:27:55,220
credentials<font color="#E5E5E5"> we see that they're</font>

636
00:27:51,860 --> 00:27:57,350
reflected back<font color="#CCCCCC"> onto the page</font><font color="#E5E5E5"> for us so</font>

637
00:27:55,220 --> 00:27:59,869
if we<font color="#E5E5E5"> try a conventional script alert</font>

638
00:27:57,350 --> 00:28:02,600
one attack<font color="#E5E5E5"> we see that it's it's</font>

639
00:27:59,869 --> 00:28:05,480
unsuccessful<font color="#CCCCCC"> in this instance it's</font>

640
00:28:02,600 --> 00:28:08,539
actually being<font color="#CCCCCC"> written to a</font><font color="#E5E5E5"> text text</font>

641
00:28:05,480 --> 00:28:11,629
<font color="#E5E5E5">node and it's not within HTML context</font>

642
00:28:08,539 --> 00:28:13,850
but if we inject our angular expression

643
00:28:11,629 --> 00:28:16,850
<font color="#E5E5E5">one plus one it renders</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> two so we</font>

644
00:28:13,850 --> 00:28:18,529
only have<font color="#CCCCCC"> expression injection so we're</font>

645
00:28:16,850 --> 00:28:24,459
going<font color="#E5E5E5"> to use a constructor constructor</font>

646
00:28:18,529 --> 00:28:27,249
<font color="#E5E5E5">to call alert</font><font color="#CCCCCC"> we'll inject</font><font color="#E5E5E5"> that into our</font>

647
00:28:24,460 --> 00:28:29,360
insert then to<font color="#CCCCCC"> our user name</font><font color="#E5E5E5"> field</font>

648
00:28:27,249 --> 00:28:31,700
<font color="#E5E5E5">submit it and we see that we have</font>

649
00:28:29,360 --> 00:28:35,539
successful cross-site scripting using

650
00:28:31,700 --> 00:28:36,169
angular expression injection so how do

651
00:28:35,539 --> 00:28:38,990
we<font color="#E5E5E5"> fix</font>

652
00:28:36,169 --> 00:28:42,110
well one option<font color="#E5E5E5"> again is to limit the</font>

653
00:28:38,990 --> 00:28:43,730
<font color="#E5E5E5">scope of the</font><font color="#CCCCCC"> ngf directive if we go down</font>

654
00:28:42,110 --> 00:28:47,918
<font color="#CCCCCC">here this</font><font color="#E5E5E5"> is where</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> untrusted input</font>

655
00:28:43,730 --> 00:28:50,360
is<font color="#E5E5E5"> actually being written into</font><font color="#CCCCCC"> our HTML</font>

656
00:28:47,919 --> 00:28:53,360
and this is where it's grabbing<font color="#CCCCCC"> that</font>

657
00:28:50,360 --> 00:28:56,748
untrusted input from the from the URI

658
00:28:53,360 --> 00:29:00,049
<font color="#CCCCCC">and inserting</font><font color="#E5E5E5"> it into that that text</font>

659
00:28:56,749 --> 00:29:01,460
<font color="#E5E5E5">mode so all we're going to do is in this</font>

660
00:29:00,049 --> 00:29:03,499
paragraph<font color="#E5E5E5"> element we're going</font><font color="#CCCCCC"> to insert</font>

661
00:29:01,460 --> 00:29:04,999
the<font color="#CCCCCC"> in Jinan bindable directive</font><font color="#E5E5E5"> so again</font>

662
00:29:03,499 --> 00:29:08,090
we're telling the angular expression

663
00:29:04,999 --> 00:29:13,159
<font color="#CCCCCC">engine don't treat this as an</font><font color="#E5E5E5"> angular</font>

664
00:29:08,090 --> 00:29:15,499
template ignore it so when we<font color="#CCCCCC"> execute</font>

665
00:29:13,159 --> 00:29:17,529
the<font color="#E5E5E5"> same attack again we see</font><font color="#CCCCCC"> that</font>

666
00:29:15,499 --> 00:29:21,230
instead<font color="#E5E5E5"> of expression injection our</font>

667
00:29:17,529 --> 00:29:24,320
<font color="#E5E5E5">untrusted input is safely written at the</font>

668
00:29:21,230 --> 00:29:27,139
page again because we told<font color="#E5E5E5"> the the</font>

669
00:29:24,320 --> 00:29:31,249
angular expression engine ignore this

670
00:29:27,139 --> 00:29:33,320
<font color="#E5E5E5">part of the template</font><font color="#CCCCCC"> alright next</font><font color="#E5E5E5"> local</font>

671
00:29:31,249 --> 00:29:34,700
<font color="#E5E5E5">storage information leakage again</font>

672
00:29:33,320 --> 00:29:38,658
<font color="#E5E5E5">dealing with angular so one of</font><font color="#CCCCCC"> the</font>

673
00:29:34,700 --> 00:29:40,909
things that<font color="#E5E5E5"> html5 gave us was additional</font>

674
00:29:38,659 --> 00:29:42,470
storage options<font color="#CCCCCC"> client-side</font><font color="#E5E5E5"> right so</font>

675
00:29:40,909 --> 00:29:44,570
instead of just storing stuff in cookies

676
00:29:42,470 --> 00:29:48,950
we can now store stuff in<font color="#E5E5E5"> local storage</font>

677
00:29:44,570 --> 00:29:50,269
storage<font color="#E5E5E5"> and session storage so the key</font>

678
00:29:48,950 --> 00:29:52,639
difference<font color="#CCCCCC"> may be</font><font color="#E5E5E5"> to use local</font><font color="#CCCCCC"> storage</font>

679
00:29:50,269 --> 00:29:54,580
persist indefinitely and once we

680
00:29:52,639 --> 00:29:57,229
explicitly<font color="#E5E5E5"> clear it</font>

681
00:29:54,580 --> 00:29:58,850
<font color="#CCCCCC">whereas session stores</font><font color="#E5E5E5"> only persist as</font>

682
00:29:57,230 --> 00:30:00,139
long as that browser session is active

683
00:29:58,850 --> 00:30:01,879
so<font color="#E5E5E5"> if we close our browser windows</font>

684
00:30:00,139 --> 00:30:06,699
session<font color="#E5E5E5"> storage is automatically cleared</font>

685
00:30:01,879 --> 00:30:06,699
<font color="#E5E5E5">for us from a security perspective the</font>

686
00:30:06,940 --> 00:30:14,269
<font color="#E5E5E5">represent some problems primarily</font>

687
00:30:09,499 --> 00:30:17,210
<font color="#CCCCCC">because if we go to our</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> we long</font><font color="#E5E5E5"> about</font>

688
00:30:14,269 --> 00:30:19,009
leave our application<font color="#E5E5E5"> close the window</font>

689
00:30:17,210 --> 00:30:20,869
<font color="#CCCCCC">and then open</font><font color="#E5E5E5"> it back</font><font color="#CCCCCC"> up if we're</font>

690
00:30:19,009 --> 00:30:22,840
<font color="#E5E5E5">storing data in local storage we</font><font color="#CCCCCC"> can go</font>

691
00:30:20,869 --> 00:30:24,740
and<font color="#CCCCCC"> inspect that local storage</font><font color="#E5E5E5"> and see</font>

692
00:30:22,840 --> 00:30:28,158
whatever<font color="#E5E5E5"> data was there previously</font>

693
00:30:24,740 --> 00:30:30,080
whether<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> for a previous user and if</font>

694
00:30:28,159 --> 00:30:31,879
we're<font color="#CCCCCC"> putting anything</font><font color="#E5E5E5"> a sensitive</font>

695
00:30:30,080 --> 00:30:33,668
<font color="#E5E5E5">nature in there then that can</font>

696
00:30:31,879 --> 00:30:37,459
potentially be<font color="#CCCCCC"> exposed</font>

697
00:30:33,669 --> 00:30:40,549
so most angular services<font color="#E5E5E5"> use the less</font>

698
00:30:37,460 --> 00:30:42,110
secure<font color="#E5E5E5"> local storage by default these</font>

699
00:30:40,549 --> 00:30:44,418
are three common ones angular storage

700
00:30:42,110 --> 00:30:47,310
uses<font color="#E5E5E5"> local storage by default and your</font>

701
00:30:44,419 --> 00:30:48,630
<font color="#CCCCCC">Locker uses local storage by default</font>

702
00:30:47,310 --> 00:30:50,550
<font color="#CCCCCC">energy storage it actually doesn't</font>

703
00:30:48,630 --> 00:30:52,260
define one or the other so it's up to

704
00:30:50,550 --> 00:30:54,149
<font color="#E5E5E5">the developer</font><font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> choose which</font>

705
00:30:52,260 --> 00:30:56,250
<font color="#CCCCCC">ones</font><font color="#E5E5E5"> they want to use but none of these</font>

706
00:30:54,150 --> 00:30:59,580
use<font color="#CCCCCC"> the more secure session storage by</font>

707
00:30:56,250 --> 00:31:01,980
default<font color="#E5E5E5"> and say so what I clear local</font>

708
00:30:59,580 --> 00:31:03,990
storage on<font color="#E5E5E5"> logout well we can't</font>

709
00:31:01,980 --> 00:31:05,280
necessarily rely<font color="#E5E5E5"> on the user to</font>

710
00:31:03,990 --> 00:31:06,840
programmatically log out of<font color="#CCCCCC"> our</font>

711
00:31:05,280 --> 00:31:09,480
application if they just close that

712
00:31:06,840 --> 00:31:11,879
<font color="#CCCCCC">window and we have sensitive</font><font color="#E5E5E5"> data that's</font>

713
00:31:09,480 --> 00:31:15,510
being<font color="#E5E5E5"> stored in local storage it's going</font>

714
00:31:11,880 --> 00:31:16,800
to persist there<font color="#CCCCCC"> indefinitely so how do</font>

715
00:31:15,510 --> 00:31:17,970
you fix this<font color="#CCCCCC"> well we need to ask</font>

716
00:31:16,800 --> 00:31:19,500
yourself does the<font color="#CCCCCC"> application really</font>

717
00:31:17,970 --> 00:31:22,260
<font color="#E5E5E5">need to store some for the data</font><font color="#CCCCCC"> and web</font>

718
00:31:19,500 --> 00:31:23,520
storage if not we<font color="#E5E5E5"> shouldn't do</font><font color="#CCCCCC"> it</font>

719
00:31:22,260 --> 00:31:27,570
<font color="#E5E5E5">because remember anything client-side is</font>

720
00:31:23,520 --> 00:31:28,580
inherently<font color="#E5E5E5"> untrusted if we decide yet we</font>

721
00:31:27,570 --> 00:31:30,899
<font color="#E5E5E5">really do need</font><font color="#CCCCCC"> to store this data</font>

722
00:31:28,580 --> 00:31:33,449
client-side then we need to configure

723
00:31:30,900 --> 00:31:35,460
<font color="#E5E5E5">the service to use session storage this</font>

724
00:31:33,450 --> 00:31:38,190
example uses<font color="#CCCCCC"> the angular storage module</font>

725
00:31:35,460 --> 00:31:41,220
and you see we're going accessing the

726
00:31:38,190 --> 00:31:42,540
sole provider set store method and<font color="#CCCCCC"> just</font>

727
00:31:41,220 --> 00:31:44,730
<font color="#E5E5E5">changing that from local storage to</font>

728
00:31:42,540 --> 00:31:47,610
<font color="#E5E5E5">session storage so now the application</font>

729
00:31:44,730 --> 00:31:51,270
<font color="#E5E5E5">will</font><font color="#CCCCCC"> use a session</font><font color="#E5E5E5"> storage rather than</font>

730
00:31:47,610 --> 00:31:53,010
local<font color="#E5E5E5"> storage and</font><font color="#CCCCCC"> even once we set</font><font color="#E5E5E5"> this</font>

731
00:31:51,270 --> 00:31:54,570
<font color="#E5E5E5">to you session storage we still need to</font>

732
00:31:53,010 --> 00:31:56,820
programmatically clear our session

733
00:31:54,570 --> 00:31:58,470
stores on<font color="#E5E5E5"> logout right because if the</font>

734
00:31:56,820 --> 00:32:00,240
user logs out<font color="#E5E5E5"> application and then</font>

735
00:31:58,470 --> 00:32:02,910
navigates to some other page does

736
00:32:00,240 --> 00:32:04,440
whatever whatever else that's data<font color="#E5E5E5"> is</font>

737
00:32:02,910 --> 00:32:05,820
still<font color="#E5E5E5"> going to sit there</font><font color="#CCCCCC"> in session</font>

738
00:32:04,440 --> 00:32:08,040
storage if we didn't programmatically

739
00:32:05,820 --> 00:32:09,899
<font color="#CCCCCC">clear the log out so even though it's</font>

740
00:32:08,040 --> 00:32:12,320
cleared once the windows closed we still

741
00:32:09,900 --> 00:32:15,960
want<font color="#E5E5E5"> to programmatically clear it</font>

742
00:32:12,320 --> 00:32:18,149
<font color="#CCCCCC">alright continue with angular</font><font color="#E5E5E5"> bypassing</font>

743
00:32:15,960 --> 00:32:21,450
<font color="#E5E5E5">is a strict contextual escaping service</font>

744
00:32:18,150 --> 00:32:23,940
so angular<font color="#CCCCCC"> provides the</font><font color="#E5E5E5"> SE service which</font>

745
00:32:21,450 --> 00:32:26,370
standardizes malicious or<font color="#E5E5E5"> commonly</font>

746
00:32:23,940 --> 00:32:29,340
abused<font color="#E5E5E5"> HTML tags attributes protocols</font>

747
00:32:26,370 --> 00:32:31,709
<font color="#E5E5E5">and so forth so it can remove things</font>

748
00:32:29,340 --> 00:32:34,740
like scripts<font color="#E5E5E5"> script tags on-air</font>

749
00:32:31,710 --> 00:32:38,070
attributes<font color="#E5E5E5"> onmouseover the</font><font color="#CCCCCC"> javascript</font>

750
00:32:34,740 --> 00:32:39,450
protocol so forth and so on<font color="#CCCCCC"> so the</font>

751
00:32:38,070 --> 00:32:41,429
<font color="#CCCCCC">street contextual escaping service is a</font>

752
00:32:39,450 --> 00:32:43,470
good thing<font color="#E5E5E5"> but it can be disabled you</font>

753
00:32:41,430 --> 00:32:47,250
can<font color="#CCCCCC"> disable it per instance</font><font color="#E5E5E5"> by calling</font>

754
00:32:43,470 --> 00:32:50,490
<font color="#CCCCCC">the trust as HTML trust as CSS trust as</font>

755
00:32:47,250 --> 00:32:52,020
URI<font color="#CCCCCC"> or the shorter versions</font><font color="#E5E5E5"> trust as and</font>

756
00:32:50,490 --> 00:32:55,830
then specifying what<font color="#E5E5E5"> you want to trust</font>

757
00:32:52,020 --> 00:32:58,260
<font color="#E5E5E5">it as so again this is per per instance</font>

758
00:32:55,830 --> 00:33:01,080
of whatever this data is we're saying

759
00:32:58,260 --> 00:33:03,420
<font color="#E5E5E5">trust this specific piece of data</font>

760
00:33:01,080 --> 00:33:05,189
<font color="#E5E5E5">it can also be disabled globally and</font>

761
00:33:03,420 --> 00:33:07,080
there's really no<font color="#E5E5E5"> reason why you would</font>

762
00:33:05,190 --> 00:33:11,430
<font color="#E5E5E5">ever do</font><font color="#CCCCCC"> this in production right if we</font>

763
00:33:07,080 --> 00:33:13,199
set the C provider enabled to false then

764
00:33:11,430 --> 00:33:15,180
we're telling it we're telling angular

765
00:33:13,200 --> 00:33:16,830
don't do any strict contextual escaping

766
00:33:15,180 --> 00:33:19,130
<font color="#E5E5E5">and again there's no really there's no</font>

767
00:33:16,830 --> 00:33:22,260
<font color="#CCCCCC">reason why we want to do that</font>

768
00:33:19,130 --> 00:33:27,000
globally front globally across<font color="#E5E5E5"> our whole</font>

769
00:33:22,260 --> 00:33:29,100
<font color="#CCCCCC">application so we look at</font><font color="#E5E5E5"> an example</font>

770
00:33:27,000 --> 00:33:32,250
<font color="#E5E5E5">again with our mean bug application if</font>

771
00:33:29,100 --> 00:33:34,939
we clearly<font color="#E5E5E5"> an invalid invoice ID we see</font>

772
00:33:32,250 --> 00:33:38,100
that<font color="#E5E5E5"> it's reflected back onto the page</font>

773
00:33:34,940 --> 00:33:41,310
so we're going to do is insert this

774
00:33:38,100 --> 00:33:44,909
image tag where the source is X which is

775
00:33:41,310 --> 00:33:47,879
going to not evaluate anything<font color="#E5E5E5"> and where</font>

776
00:33:44,910 --> 00:33:49,530
the<font color="#E5E5E5"> on error attribute is an alert</font>

777
00:33:47,880 --> 00:33:51,690
<font color="#E5E5E5">message but we see it didn't actually</font>

778
00:33:49,530 --> 00:33:54,810
<font color="#E5E5E5">work but I all we got was the empty</font>

779
00:33:51,690 --> 00:34:01,560
<font color="#CCCCCC">image</font><font color="#E5E5E5"> tag so if we inspect this actual</font>

780
00:33:54,810 --> 00:34:03,629
<font color="#E5E5E5">HTML element then we see</font><font color="#CCCCCC"> that all we</font>

781
00:34:01,560 --> 00:34:07,710
have is image source equals<font color="#CCCCCC"> X are on</font>

782
00:34:03,630 --> 00:34:11,400
error alert<font color="#CCCCCC"> attribute has been stripped</font>

783
00:34:07,710 --> 00:34:13,560
from from that<font color="#E5E5E5"> element</font><font color="#CCCCCC"> so if</font><font color="#E5E5E5"> we go into</font>

784
00:34:11,400 --> 00:34:15,990
our<font color="#E5E5E5"> angular application code</font><font color="#CCCCCC"> you see</font>

785
00:34:13,560 --> 00:34:21,049
we're eating<font color="#E5E5E5"> the</font><font color="#CCCCCC"> SCE service here we're</font>

786
00:34:15,989 --> 00:34:24,409
going to<font color="#E5E5E5"> disable the CT service globally</font>

787
00:34:21,050 --> 00:34:27,210
we're going to reload our angular page

788
00:34:24,409 --> 00:34:32,699
and then we're<font color="#E5E5E5"> going to submit the same</font>

789
00:34:27,210 --> 00:34:35,310
<font color="#E5E5E5">tailored again and this time</font><font color="#CCCCCC"> when we</font>

790
00:34:32,699 --> 00:34:38,399
submitted the<font color="#CCCCCC"> across</font><font color="#E5E5E5"> that scripting</font>

791
00:34:35,310 --> 00:34:44,190
attack is successful<font color="#CCCCCC"> and if we look at</font>

792
00:34:38,400 --> 00:34:46,590
the<font color="#E5E5E5"> HTML we see that we see that</font><font color="#CCCCCC"> our</font>

793
00:34:44,190 --> 00:34:47,940
<font color="#CCCCCC">on-air</font><font color="#E5E5E5"> attribute is still there right</font>

794
00:34:46,590 --> 00:34:50,250
we've disabled our<font color="#E5E5E5"> straight contextual</font>

795
00:34:47,940 --> 00:34:52,650
escaping service and it's no<font color="#CCCCCC"> longer</font>

796
00:34:50,250 --> 00:34:54,690
sanitizing these commonly<font color="#E5E5E5"> abused</font>

797
00:34:52,650 --> 00:34:57,440
<font color="#E5E5E5">attribute scripts and protocol script</font>

798
00:34:54,690 --> 00:34:57,440
tags and protocols

799
00:35:00,240 --> 00:35:07,529
finally<font color="#CCCCCC"> nodejs</font><font color="#E5E5E5"> so nodejs is our</font>

800
00:35:05,090 --> 00:35:11,070
server-side JavaScript<font color="#CCCCCC"> environment that</font>

801
00:35:07,530 --> 00:35:14,900
lets<font color="#E5E5E5"> us run this these is technology</font>

802
00:35:11,070 --> 00:35:18,300
stack so with with<font color="#E5E5E5"> nodejs</font>

803
00:35:14,900 --> 00:35:21,170
<font color="#CCCCCC">it requires</font><font color="#E5E5E5"> root privileges to bind to</font>

804
00:35:18,300 --> 00:35:23,820
any port lower than<font color="#E5E5E5"> 1000 so if we're</font>

805
00:35:21,170 --> 00:35:28,020
spinning<font color="#E5E5E5"> up our application server</font><font color="#CCCCCC"> on</font>

806
00:35:23,820 --> 00:35:30,119
<font color="#E5E5E5">port 80 port 443 we've got to use</font><font color="#CCCCCC"> sudo</font>

807
00:35:28,020 --> 00:35:32,340
to our root<font color="#CCCCCC"> account or use an account</font>

808
00:35:30,119 --> 00:35:34,380
<font color="#E5E5E5">with elevated privileges to do so which</font>

809
00:35:32,340 --> 00:35:36,360
is generally<font color="#E5E5E5"> not a good</font><font color="#CCCCCC"> idea right we</font>

810
00:35:34,380 --> 00:35:38,820
generally don't<font color="#CCCCCC"> want our web app server</font>

811
00:35:36,360 --> 00:35:40,440
running<font color="#E5E5E5"> as root because in the bit of a</font>

812
00:35:38,820 --> 00:35:41,970
compromise<font color="#CCCCCC"> there in fact it's</font><font color="#E5E5E5"> gonna be</font>

813
00:35:40,440 --> 00:35:46,650
much higher<font color="#E5E5E5"> right</font>

814
00:35:41,970 --> 00:35:49,140
if a tacher can<font color="#E5E5E5"> compromise that account</font>

815
00:35:46,650 --> 00:35:51,720
<font color="#E5E5E5">that we're</font><font color="#CCCCCC"> running under then they can</font>

816
00:35:49,140 --> 00:35:53,279
do a lot<font color="#CCCCCC"> more so what we do is go ahead</font>

817
00:35:51,720 --> 00:35:56,490
<font color="#CCCCCC">and use these elevated</font><font color="#E5E5E5"> privileges to</font>

818
00:35:53,280 --> 00:35:57,900
bind to these low ports<font color="#E5E5E5"> and then once we</font>

819
00:35:56,490 --> 00:35:59,790
start our<font color="#E5E5E5"> surveillance we do the binding</font>

820
00:35:57,900 --> 00:36:02,760
<font color="#E5E5E5">then drop</font><font color="#CCCCCC"> down to a less privileged</font>

821
00:35:59,790 --> 00:36:07,440
account<font color="#E5E5E5"> using process set user ID and</font>

822
00:36:02,760 --> 00:36:10,140
process set group ID and then another

823
00:36:07,440 --> 00:36:15,450
quirk<font color="#CCCCCC"> with node.js</font><font color="#E5E5E5"> is by default it runs</font>

824
00:36:10,140 --> 00:36:18,240
in development<font color="#E5E5E5"> mode so nodejs has a node</font>

825
00:36:15,450 --> 00:36:20,910
environmental node env variable<font color="#CCCCCC"> that</font>

826
00:36:18,240 --> 00:36:22,709
lets us set the the<font color="#CCCCCC"> environment that</font>

827
00:36:20,910 --> 00:36:25,799
we're running<font color="#E5E5E5"> in so by default it runs</font>

828
00:36:22,710 --> 00:36:28,020
in development mode and if<font color="#E5E5E5"> Express is</font>

829
00:36:25,800 --> 00:36:30,420
running on<font color="#E5E5E5"> top of nodejs it looks at</font>

830
00:36:28,020 --> 00:36:32,640
this node env variable<font color="#E5E5E5"> to determine how</font>

831
00:36:30,420 --> 00:36:34,859
it's going to react in<font color="#E5E5E5"> certain certain</font>

832
00:36:32,640 --> 00:36:36,480
scenarios right<font color="#E5E5E5"> one of those being if it</font>

833
00:36:34,859 --> 00:36:39,450
gets an uncaught error

834
00:36:36,480 --> 00:36:42,270
so if<font color="#E5E5E5"> Express encounters uncaught error</font>

835
00:36:39,450 --> 00:36:43,830
<font color="#E5E5E5">and it's running on nodejs and</font>

836
00:36:42,270 --> 00:36:46,650
development mode then<font color="#E5E5E5"> it turns the whole</font>

837
00:36:43,830 --> 00:36:49,770
<font color="#E5E5E5">error back to the user so</font><font color="#CCCCCC"> that error can</font>

838
00:36:46,650 --> 00:36:51,810
include things like file paths<font color="#E5E5E5"> stack</font>

839
00:36:49,770 --> 00:36:54,600
traces<font color="#E5E5E5"> other sensitive</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> that</font>

840
00:36:51,810 --> 00:36:57,950
we probably don't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to disclose so</font>

841
00:36:54,600 --> 00:37:00,420
how we fix this<font color="#E5E5E5"> well when we run our</font>

842
00:36:57,950 --> 00:37:02,040
nodejs we want to set the node<font color="#E5E5E5"> env</font>

843
00:37:00,420 --> 00:37:04,820
variable to something<font color="#E5E5E5"> other than</font>

844
00:37:02,040 --> 00:37:08,220
development so we can set<font color="#CCCCCC"> its</font><font color="#E5E5E5"> production</font>

845
00:37:04,820 --> 00:37:11,040
<font color="#CCCCCC">really any string or any</font><font color="#E5E5E5"> value other</font>

846
00:37:08,220 --> 00:37:14,730
than development is<font color="#E5E5E5"> going to prevent</font>

847
00:37:11,040 --> 00:37:17,550
this<font color="#E5E5E5"> right so in this solution we've set</font>

848
00:37:14,730 --> 00:37:20,250
no<font color="#E5E5E5"> DMV variable to production on the</font>

849
00:37:17,550 --> 00:37:22,859
command line when<font color="#E5E5E5"> we start our Express</font>

850
00:37:20,250 --> 00:37:26,090
server in our<font color="#E5E5E5"> node environment and you</font>

851
00:37:22,859 --> 00:37:27,930
<font color="#E5E5E5">can see that now when we request a</font>

852
00:37:26,090 --> 00:37:30,090
resource that<font color="#E5E5E5"> doesn't exist</font>

853
00:37:27,930 --> 00:37:32,220
instead of passing the uncaught<font color="#E5E5E5"> error</font>

854
00:37:30,090 --> 00:37:39,330
back to the user<font color="#E5E5E5"> it simply returns a</font>

855
00:37:32,220 --> 00:37:42,000
more benign not found and that is a very

856
00:37:39,330 --> 00:37:45,480
quick<font color="#E5E5E5"> walk through the mean stack and</font>

857
00:37:42,000 --> 00:37:48,330
some common mistakes<font color="#E5E5E5"> and vulnerabilities</font>

858
00:37:45,480 --> 00:37:57,420
<font color="#CCCCCC">that you may encounter that's</font><font color="#E5E5E5"> it for</font>

859
00:37:48,330 --> 00:38:12,150
this<font color="#E5E5E5"> talk are there any questions anyway</font>

860
00:37:57,420 --> 00:38:15,630
let's do it<font color="#CCCCCC"> all right questions hello</font>

861
00:38:12,150 --> 00:38:17,190
so if this is an<font color="#CCCCCC"> obvious answer but</font><font color="#E5E5E5"> at</font>

862
00:38:15,630 --> 00:38:20,010
the start when you were<font color="#E5E5E5"> chatting</font><font color="#CCCCCC"> about</font>

863
00:38:17,190 --> 00:38:22,140
not using get to delete things<font color="#E5E5E5"> and you</font>

864
00:38:20,010 --> 00:38:23,730
switch to<font color="#E5E5E5"> using posts yes was the reason</font>

865
00:38:22,140 --> 00:38:29,790
why you didn't<font color="#E5E5E5"> use</font><font color="#CCCCCC"> the delete verb</font><font color="#E5E5E5"> with</font>

866
00:38:23,730 --> 00:38:31,890
us<font color="#CCCCCC"> so in that in that</font><font color="#E5E5E5"> situation we</font>

867
00:38:29,790 --> 00:38:35,009
weren't<font color="#E5E5E5"> actually deleting a resource on</font>

868
00:38:31,890 --> 00:38:36,900
the server we were hitting an API<font color="#E5E5E5"> that</font>

869
00:38:35,010 --> 00:38:39,359
<font color="#E5E5E5">was then clearing our database and</font>

870
00:38:36,900 --> 00:38:44,010
removing that that invoice<font color="#E5E5E5"> from the</font>

871
00:38:39,359 --> 00:38:47,279
database but<font color="#E5E5E5"> you could still have used</font>

872
00:38:44,010 --> 00:38:51,000
the HTTP delete verb<font color="#CCCCCC"> on your REST API so</font>

873
00:38:47,280 --> 00:38:52,470
yeah we so so we could use other<font color="#E5E5E5"> other</font>

874
00:38:51,000 --> 00:38:55,470
verbs they don't have to use the post

875
00:38:52,470 --> 00:38:58,589
method<font color="#CCCCCC"> right the point</font><font color="#E5E5E5"> there was simply</font>

876
00:38:55,470 --> 00:39:00,240
if we can avoid changing state with get

877
00:38:58,590 --> 00:39:01,680
<font color="#CCCCCC">requests</font><font color="#E5E5E5"> right then we</font><font color="#CCCCCC"> should be so</font>

878
00:39:00,240 --> 00:39:04,529
<font color="#E5E5E5">because that's considered poor hygiene</font>

879
00:39:01,680 --> 00:39:06,149
<font color="#E5E5E5">that's right just wanted</font><font color="#CCCCCC"> to check that</font>

880
00:39:04,530 --> 00:39:08,250
wasn't some reason that I didn't<font color="#CCCCCC"> no no</font>

881
00:39:06,150 --> 00:39:11,550
no no and if<font color="#CCCCCC"> if we</font><font color="#E5E5E5"> were</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> delete</font>

882
00:39:08,250 --> 00:39:13,260
then<font color="#E5E5E5"> the C surf middle</font><font color="#CCCCCC"> error would</font><font color="#E5E5E5"> be</font>

883
00:39:11,550 --> 00:39:14,580
<font color="#E5E5E5">applied to</font><font color="#CCCCCC"> it appropriately we just want</font>

884
00:39:13,260 --> 00:39:18,530
to<font color="#E5E5E5"> avoid using get for their state</font>

885
00:39:14,580 --> 00:39:18,529
<font color="#CCCCCC">changing good</font><font color="#E5E5E5"> resources</font>

886
00:39:29,090 --> 00:39:34,320
<font color="#CCCCCC">any other</font><font color="#E5E5E5"> questions</font><font color="#CCCCCC"> okay folks well then</font>

887
00:39:33,780 --> 00:39:36,270
that's it

888
00:39:34,320 --> 00:39:37,830
if<font color="#CCCCCC"> I give us again just</font><font color="#E5E5E5"> to remind</font><font color="#CCCCCC"> you</font>

889
00:39:36,270 --> 00:39:39,630
please if you would put<font color="#E5E5E5"> one of the</font>

890
00:39:37,830 --> 00:39:43,200
ticket in on your way out

891
00:39:39,630 --> 00:39:45,220
just<font color="#E5E5E5"> as feedback for sales again thanks</font>

892
00:39:43,200 --> 00:39:50,020
very<font color="#CCCCCC"> much do it thank you</font>

893
00:39:45,220 --> 00:39:50,020
[Applause]

