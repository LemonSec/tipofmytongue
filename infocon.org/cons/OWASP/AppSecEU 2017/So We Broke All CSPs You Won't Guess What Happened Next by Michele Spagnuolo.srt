1
00:00:04,090 --> 00:00:09,250
yes hello and welcome<font color="#E5E5E5"> everyone to talk</font>

2
00:00:06,460 --> 00:00:11,349
<font color="#CCCCCC">about content</font><font color="#E5E5E5"> security policy in this</font>

3
00:00:09,250 --> 00:00:14,139
presentation we'll be talking<font color="#E5E5E5"> about what</font>

4
00:00:11,349 --> 00:00:18,698
happened in the world of CSP<font color="#CCCCCC"> in the last</font>

5
00:00:14,139 --> 00:00:22,448
<font color="#E5E5E5">12 months</font><font color="#CCCCCC"> we will show you how we rolled</font>

6
00:00:18,699 --> 00:00:25,210
out<font color="#E5E5E5"> CSP</font><font color="#CCCCCC"> large-scale at Google to over a</font>

7
00:00:22,449 --> 00:00:28,779
<font color="#CCCCCC">hundred</font><font color="#E5E5E5"> products</font><font color="#CCCCCC"> and we'll also</font><font color="#E5E5E5"> show you</font>

8
00:00:25,210 --> 00:00:31,390
<font color="#CCCCCC">some new keywords that finally made CSP</font>

9
00:00:28,779 --> 00:00:34,769
<font color="#E5E5E5">violation reports in my opinion useful</font>

10
00:00:31,390 --> 00:00:37,630
for the first<font color="#E5E5E5"> time in history of CSP</font><font color="#CCCCCC"> and</font>

11
00:00:34,770 --> 00:00:41,110
finally last<font color="#E5E5E5"> but not least we will talk</font>

12
00:00:37,630 --> 00:00:44,620
about recent bypasses how we address

13
00:00:41,110 --> 00:00:47,200
<font color="#E5E5E5">them and but also like limitations and</font>

14
00:00:44,620 --> 00:00:51,419
<font color="#E5E5E5">what you have to be careful when using</font>

15
00:00:47,200 --> 00:00:55,030
CSP<font color="#E5E5E5"> as a defense in-depth mechanism so</font>

16
00:00:51,420 --> 00:00:57,090
<font color="#E5E5E5">my name is</font><font color="#CCCCCC"> Lucas this is</font><font color="#E5E5E5"> Micaela we both</font>

17
00:00:55,030 --> 00:00:59,500
work for<font color="#CCCCCC"> Google in Zurich</font>

18
00:00:57,090 --> 00:01:01,840
<font color="#CCCCCC">we've</font><font color="#E5E5E5"> looked</font><font color="#CCCCCC"> in a focus area that kind</font>

19
00:00:59,500 --> 00:01:05,470
of investigates promising education

20
00:01:01,840 --> 00:01:07,299
technologies like CSP<font color="#E5E5E5"> and new platform</font>

21
00:01:05,470 --> 00:01:10,658
features for example<font color="#CCCCCC"> like sapore teens</font>

22
00:01:07,299 --> 00:01:12,250
and<font color="#CCCCCC"> fifties</font><font color="#E5E5E5"> we try to address cross-site</font>

23
00:01:10,659 --> 00:01:14,380
scripting which is<font color="#E5E5E5"> unfortunate still a</font>

24
00:01:12,250 --> 00:01:21,970
big<font color="#CCCCCC"> issue at Google it's getting</font><font color="#E5E5E5"> better</font>

25
00:01:14,380 --> 00:01:23,979
<font color="#E5E5E5">but yeah</font><font color="#CCCCCC"> yeah before I ask before I</font>

26
00:01:21,970 --> 00:01:27,100
start with<font color="#CCCCCC"> the recap</font><font color="#E5E5E5"> may I ask you guys</font>

27
00:01:23,979 --> 00:01:29,350
like who has worked with CSP before the

28
00:01:27,100 --> 00:01:31,329
content security policy<font color="#E5E5E5"> who has seen</font><font color="#CCCCCC"> an</font>

29
00:01:29,350 --> 00:01:34,658
<font color="#E5E5E5">awesome a lot of folks that's really</font>

30
00:01:31,329 --> 00:01:37,779
cool<font color="#E5E5E5"> for those of you who haven't have a</font>

31
00:01:34,659 --> 00:01:40,509
couple of interest slides<font color="#E5E5E5"> like two or</font>

32
00:01:37,780 --> 00:01:47,079
three just<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> your boot strapped in</font>

33
00:01:40,509 --> 00:01:49,360
a moment so yeah so brief recap<font color="#E5E5E5"> so one</font>

34
00:01:47,079 --> 00:01:51,699
year<font color="#E5E5E5"> ago we presented also in Rome at</font>

35
00:01:49,360 --> 00:01:53,560
<font color="#CCCCCC">OPSEC at this time we did a lot of</font>

36
00:01:51,700 --> 00:01:56,409
<font color="#E5E5E5">research on</font><font color="#CCCCCC"> violence based</font><font color="#E5E5E5"> content</font>

37
00:01:53,560 --> 00:02:01,299
security<font color="#E5E5E5"> policies and how CSP is used in</font>

38
00:01:56,409 --> 00:02:03,549
general for mitigation<font color="#E5E5E5"> on in into that</font>

39
00:02:01,299 --> 00:02:05,530
<font color="#E5E5E5">basically so we did a large-scale study</font>

40
00:02:03,549 --> 00:02:09,160
<font color="#E5E5E5">and we kind of found out that most of</font>

41
00:02:05,530 --> 00:02:11,410
the policies<font color="#E5E5E5"> are widely spaced and most</font>

42
00:02:09,160 --> 00:02:14,150
policies are extremely<font color="#E5E5E5"> by possible by</font>

43
00:02:11,410 --> 00:02:17,870
you know automatically<font color="#CCCCCC"> generate of all</font>

44
00:02:14,150 --> 00:02:20,450
<font color="#CCCCCC">arm bypasses so a</font><font color="#E5E5E5"> little bit</font>

45
00:02:17,870 --> 00:02:22,730
disappointing because if<font color="#CCCCCC"> UCSB offers</font>

46
00:02:20,450 --> 00:02:25,670
<font color="#CCCCCC">like very nice properties right but it</font>

47
00:02:22,730 --> 00:02:29,569
seems to be<font color="#CCCCCC"> the case that life is speech</font>

48
00:02:25,670 --> 00:02:33,738
did not really work<font color="#CCCCCC"> out in practice so</font>

49
00:02:29,569 --> 00:02:35,958
we thought that<font color="#E5E5E5"> maybe a</font><font color="#CCCCCC"> North Face</font><font color="#E5E5E5"> CSP</font>

50
00:02:33,739 --> 00:02:37,730
would be a nice option here instead of

51
00:02:35,959 --> 00:02:39,290
<font color="#CCCCCC">itis</font><font color="#E5E5E5"> pasty speech because it</font><font color="#CCCCCC"> has like a</font>

52
00:02:37,730 --> 00:02:42,290
couple of<font color="#E5E5E5"> advantages over</font><font color="#CCCCCC"> viability</font>

53
00:02:39,290 --> 00:02:45,769
<font color="#CCCCCC">space</font><font color="#E5E5E5"> CSP but</font><font color="#CCCCCC"> there's some hurdles</font><font color="#E5E5E5"> and</font>

54
00:02:42,290 --> 00:02:48,349
to really<font color="#E5E5E5"> make adoption of</font><font color="#CCCCCC"> non-space you</font>

55
00:02:45,769 --> 00:02:49,909
see kind of possible in<font color="#CCCCCC"> practice we</font>

56
00:02:48,349 --> 00:02:53,328
worked on<font color="#E5E5E5"> strict dynamic it was like a</font>

57
00:02:49,909 --> 00:02:55,519
new<font color="#CCCCCC"> keyboard</font><font color="#E5E5E5"> that kind of</font><font color="#CCCCCC"> transitivity</font>

58
00:02:53,329 --> 00:02:57,440
propagates<font color="#CCCCCC"> trust</font><font color="#E5E5E5"> to newly created</font>

59
00:02:55,519 --> 00:03:02,480
<font color="#CCCCCC">scripts which I'll show you in</font><font color="#E5E5E5"> a second</font>

60
00:02:57,440 --> 00:03:05,299
<font color="#E5E5E5">and yeah so this is</font><font color="#CCCCCC"> the research paper</font>

61
00:03:02,480 --> 00:03:06,768
be presented at<font color="#CCCCCC"> CCS</font><font color="#E5E5E5"> if you want to know</font>

62
00:03:05,299 --> 00:03:09,319
more<font color="#E5E5E5"> about</font><font color="#CCCCCC"> that your Institute e of</font>

63
00:03:06,769 --> 00:03:13,700
white lists<font color="#CCCCCC"> we</font><font color="#E5E5E5"> won't go into detail</font><font color="#CCCCCC"> on</font>

64
00:03:09,319 --> 00:03:14,470
that<font color="#E5E5E5"> today but yeah very nice summary of</font>

65
00:03:13,700 --> 00:03:19,429
<font color="#E5E5E5">that</font>

66
00:03:14,470 --> 00:03:22,910
<font color="#E5E5E5">so a quick bootstrap how does</font><font color="#CCCCCC"> an</font>

67
00:03:19,430 --> 00:03:25,220
<font color="#CCCCCC">on-stage</font><font color="#E5E5E5"> CSP work in practice the idea</font>

68
00:03:22,910 --> 00:03:29,000
is basically that<font color="#CCCCCC"> you have a content</font>

69
00:03:25,220 --> 00:03:33,470
security policy<font color="#E5E5E5"> like the one on the top</font>

70
00:03:29,000 --> 00:03:36,440
here<font color="#E5E5E5"> and basically the browser will only</font>

71
00:03:33,470 --> 00:03:39,290
execute JavaScript tags on the page<font color="#CCCCCC"> if</font>

72
00:03:36,440 --> 00:03:42,530
the script tag has a nonce attribute and

73
00:03:39,290 --> 00:03:45,769
the nonce<font color="#CCCCCC"> altitude value is the same as</font>

74
00:03:42,530 --> 00:03:48,229
the value<font color="#E5E5E5"> in the nonce attribute or of</font>

75
00:03:45,769 --> 00:03:50,690
the CSP header in<font color="#CCCCCC"> the response</font><font color="#E5E5E5"> from the</font>

76
00:03:48,229 --> 00:03:53,000
<font color="#E5E5E5">server so it's all client-side these are</font>

77
00:03:50,690 --> 00:03:56,859
important that<font color="#E5E5E5"> this non-spell you has to</font>

78
00:03:53,000 --> 00:03:59,449
<font color="#E5E5E5">be random for for every response and</font>

79
00:03:56,859 --> 00:04:02,060
<font color="#CCCCCC">deep behind</font><font color="#E5E5E5"> that is if there's a</font>

80
00:03:59,449 --> 00:04:05,299
cross-site scripting vector and an

81
00:04:02,060 --> 00:04:08,989
attacker can inject HTML for example

82
00:04:05,299 --> 00:04:11,030
then he should not<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> know the</font>

83
00:04:08,989 --> 00:04:12,530
nonce<font color="#E5E5E5"> random nonce because it's like</font>

84
00:04:11,030 --> 00:04:15,409
<font color="#E5E5E5">different for every response that's the</font>

85
00:04:12,530 --> 00:04:17,810
idea behind it<font color="#CCCCCC"> in addition to</font><font color="#E5E5E5"> that</font>

86
00:04:15,409 --> 00:04:19,159
<font color="#E5E5E5">non-space CSP has some very nice other</font>

87
00:04:17,810 --> 00:04:22,400
<font color="#E5E5E5">properties that are especially</font>

88
00:04:19,159 --> 00:04:24,849
interesting for<font color="#E5E5E5"> deployment which are you</font>

89
00:04:22,400 --> 00:04:27,979
don't<font color="#E5E5E5"> have to come up with</font><font color="#CCCCCC"> a host or</font>

90
00:04:24,849 --> 00:04:30,169
<font color="#E5E5E5">path</font><font color="#CCCCCC"> whitelist in the first place</font>

91
00:04:27,979 --> 00:04:32,090
which is tremendously<font color="#CCCCCC"> time-consuming</font>

92
00:04:30,169 --> 00:04:35,659
<font color="#E5E5E5">very error-prone often leads to</font>

93
00:04:32,090 --> 00:04:40,159
<font color="#CCCCCC">breakages</font><font color="#E5E5E5"> and as</font><font color="#CCCCCC"> you saw by our research</font>

94
00:04:35,659 --> 00:04:41,800
also<font color="#E5E5E5"> is often by possible because of you</font>

95
00:04:40,159 --> 00:04:44,120
know she simply like<font color="#CCCCCC"> endpoints or</font>

96
00:04:41,800 --> 00:04:47,979
libraries like angular ingredients which

97
00:04:44,120 --> 00:04:54,590
usually<font color="#E5E5E5"> write lists in your application</font>

98
00:04:47,979 --> 00:04:57,289
yes so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> how it</font><font color="#CCCCCC"> works basically if</font>

99
00:04:54,590 --> 00:04:59,359
you take like<font color="#E5E5E5"> money example.com</font><font color="#CCCCCC"> and it</font>

100
00:04:57,289 --> 00:05:03,378
has like this content security policy in

101
00:04:59,360 --> 00:05:06,379
the response header<font color="#CCCCCC"> scripts with nonstop</font>

102
00:05:03,379 --> 00:05:08,629
<font color="#CCCCCC">to field</font><font color="#E5E5E5"> whether that matches the value</font>

103
00:05:06,379 --> 00:05:10,759
<font color="#E5E5E5">of the nonce here will be allowed to</font>

104
00:05:08,629 --> 00:05:12,889
<font color="#E5E5E5">execute by the browser</font><font color="#CCCCCC"> because all</font>

105
00:05:10,759 --> 00:05:14,599
browser side<font color="#CCCCCC"> right and</font><font color="#E5E5E5"> it doesn't matter</font>

106
00:05:12,889 --> 00:05:18,740
<font color="#E5E5E5">if it's like inline script or source</font>

107
00:05:14,599 --> 00:05:20,539
script right<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> other hand classical</font>

108
00:05:18,740 --> 00:05:24,199
<font color="#CCCCCC">reflected cross-site scripting like the</font>

109
00:05:20,539 --> 00:05:27,229
one<font color="#CCCCCC"> we see here like if an attacker just</font>

110
00:05:24,199 --> 00:05:30,710
injects<font color="#E5E5E5"> the script tag he does not know</font>

111
00:05:27,229 --> 00:05:33,529
<font color="#CCCCCC">the nonce value right</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> she cannot set</font>

112
00:05:30,710 --> 00:05:34,940
the proper nouns attribute and the

113
00:05:33,529 --> 00:05:36,469
browser will<font color="#E5E5E5"> reject these kind of</font>

114
00:05:34,940 --> 00:05:41,509
scripts<font color="#E5E5E5"> so that's the basic</font><font color="#CCCCCC"> idea behind</font>

115
00:05:36,469 --> 00:05:45,050
the<font color="#CCCCCC"> unknown spaced CSP so what's up to</font>

116
00:05:41,509 --> 00:05:47,300
<font color="#CCCCCC">stick dynamic</font><font color="#E5E5E5"> right strict dynamic is</font>

117
00:05:45,050 --> 00:05:51,319
basically an<font color="#E5E5E5"> extension which came in CSP</font>

118
00:05:47,300 --> 00:05:55,969
free<font color="#E5E5E5"> and it is meant to help non-space</font>

119
00:05:51,319 --> 00:05:58,520
that also has<font color="#E5E5E5"> a CSP to basically each</font>

120
00:05:55,969 --> 00:06:00,379
deployment<font color="#E5E5E5"> because in theory you have to</font>

121
00:05:58,520 --> 00:06:02,529
propagate<font color="#CCCCCC"> a</font><font color="#E5E5E5"> nonce</font><font color="#CCCCCC"> to every script and</font>

122
00:06:00,379 --> 00:06:05,629
every<font color="#E5E5E5"> subscript that gets generated</font>

123
00:06:02,529 --> 00:06:08,330
<font color="#CCCCCC">which can be very hard</font><font color="#E5E5E5"> especially if you</font>

124
00:06:05,629 --> 00:06:10,340
use a<font color="#E5E5E5"> library that</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> do like</font>

125
00:06:08,330 --> 00:06:11,449
dynamically loading or for modules and

126
00:06:10,340 --> 00:06:13,758
stuff like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> also if they are</font>

127
00:06:11,449 --> 00:06:15,770
<font color="#CCCCCC">constants right so it's hard for</font>

128
00:06:13,759 --> 00:06:16,129
developers<font color="#CCCCCC"> to patch</font><font color="#E5E5E5"> libraries of others</font>

129
00:06:15,770 --> 00:06:19,508
right

130
00:06:16,129 --> 00:06:23,539
so what stricter<font color="#CCCCCC"> Namek does it basically</font>

131
00:06:19,509 --> 00:06:25,520
<font color="#E5E5E5">propagates trust from a non stripped to</font>

132
00:06:23,539 --> 00:06:26,719
a dynamic dynamically created script for

133
00:06:25,520 --> 00:06:29,750
example if it<font color="#E5E5E5"> is created through</font>

134
00:06:26,719 --> 00:06:32,960
document element<font color="#E5E5E5"> document grade element</font>

135
00:06:29,750 --> 00:06:35,870
script<font color="#CCCCCC"> ID with this you</font><font color="#E5E5E5"> can for example</font>

136
00:06:32,960 --> 00:06:38,210
monster I don't know the<font color="#E5E5E5"> widget you're</font>

137
00:06:35,870 --> 00:06:40,130
using<font color="#E5E5E5"> and all subsequent scripts</font><font color="#CCCCCC"> that</font>

138
00:06:38,210 --> 00:06:41,049
the<font color="#E5E5E5"> widget is creating are automatically</font>

139
00:06:40,130 --> 00:06:42,789
<font color="#E5E5E5">blessed right</font>

140
00:06:41,050 --> 00:06:44,979
so you have to trust the widget in the

141
00:06:42,789 --> 00:06:48,789
first place you usually do if you load

142
00:06:44,979 --> 00:06:50,530
it on your page right and yes so in

143
00:06:48,789 --> 00:06:52,690
practice this is<font color="#CCCCCC"> very important and</font>

144
00:06:50,530 --> 00:06:56,619
basically allowed us to<font color="#E5E5E5"> do like</font>

145
00:06:52,690 --> 00:06:58,479
<font color="#E5E5E5">large-scale deployment of</font><font color="#CCCCCC"> nantes TSP it</font>

146
00:06:56,620 --> 00:07:00,009
is<font color="#E5E5E5"> also stepping stone somehow right</font>

147
00:06:58,479 --> 00:07:01,300
because you can slowly<font color="#E5E5E5"> reach start with</font>

148
00:07:00,009 --> 00:07:04,150
<font color="#CCCCCC">accent libraries to propagate the</font>

149
00:07:01,300 --> 00:07:06,909
<font color="#E5E5E5">nuances themselves but</font><font color="#CCCCCC"> this is a yeah</font>

150
00:07:04,150 --> 00:07:10,750
<font color="#E5E5E5">quite handy for deployment</font><font color="#CCCCCC"> quick</font>

151
00:07:06,909 --> 00:07:13,750
overview<font color="#CCCCCC"> for example stuff like also</font>

152
00:07:10,750 --> 00:07:16,449
inserted scripts<font color="#E5E5E5"> like document right</font><font color="#CCCCCC"> is</font>

153
00:07:13,750 --> 00:07:20,139
not less<font color="#E5E5E5"> specific dynamic what is left</font>

154
00:07:16,449 --> 00:07:22,240
is like scripts that are created through

155
00:07:20,139 --> 00:07:23,110
like the Dom<font color="#CCCCCC"> API like for example create</font>

156
00:07:22,240 --> 00:07:25,330
element script and then

157
00:07:23,110 --> 00:07:29,550
document.body.appendchild<font color="#CCCCCC"> script</font><font color="#E5E5E5"> so at</font>

158
00:07:25,330 --> 00:07:33,159
the time between it is<font color="#E5E5E5"> this pattern we</font>

159
00:07:29,550 --> 00:07:35,560
we were saying<font color="#E5E5E5"> that like you</font><font color="#CCCCCC"> know parcel</font>

160
00:07:33,159 --> 00:07:37,150
inserted<font color="#CCCCCC"> scripts are very likely to</font>

161
00:07:35,560 --> 00:07:39,789
contain user input<font color="#CCCCCC"> and</font><font color="#E5E5E5"> are like really</font>

162
00:07:37,150 --> 00:07:41,530
<font color="#E5E5E5">kind of dangerous and also it's like</font><font color="#CCCCCC"> a</font>

163
00:07:39,789 --> 00:07:43,810
bad pattern anyway<font color="#E5E5E5"> so this was</font>

164
00:07:41,530 --> 00:07:45,909
disallowed<font color="#E5E5E5"> and great element script</font>

165
00:07:43,810 --> 00:07:48,930
<font color="#E5E5E5">penned child script is much more</font>

166
00:07:45,909 --> 00:07:51,699
controlled right because it's a code and

167
00:07:48,930 --> 00:07:53,830
at this time it<font color="#E5E5E5"> seems</font><font color="#CCCCCC"> like this is like</font>

168
00:07:51,699 --> 00:07:55,650
very rare<font color="#E5E5E5"> it was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> very interesting talk</font>

169
00:07:53,830 --> 00:07:59,940
just before<font color="#CCCCCC"> this</font><font color="#E5E5E5"> one in the other track</font>

170
00:07:55,650 --> 00:08:02,440
by the<font color="#CCCCCC"> Bastion that he's and Kota and</font>

171
00:07:59,940 --> 00:08:06,940
they kind of showed that these patterns

172
00:08:02,440 --> 00:08:08,800
<font color="#CCCCCC">are actually not so rare but we'll</font><font color="#E5E5E5"> talk</font>

173
00:08:06,940 --> 00:08:14,979
<font color="#E5E5E5">about this in at the end of the</font>

174
00:08:08,800 --> 00:08:17,380
presentation so<font color="#CCCCCC"> SSS like</font><font color="#E5E5E5"> we'll also talk</font>

175
00:08:14,979 --> 00:08:20,710
a bit how we kind of<font color="#E5E5E5"> mask deployed CSP</font>

176
00:08:17,380 --> 00:08:23,380
at Google<font color="#CCCCCC"> we kind</font><font color="#E5E5E5"> of switched hat from</font>

177
00:08:20,710 --> 00:08:25,330
like breaking<font color="#E5E5E5"> everything to try to make</font>

178
00:08:23,380 --> 00:08:27,310
<font color="#CCCCCC">it work and make something</font><font color="#E5E5E5"> else more</font>

179
00:08:25,330 --> 00:08:34,449
secure<font color="#E5E5E5"> turns out this is actually not</font>

180
00:08:27,310 --> 00:08:36,849
easy<font color="#CCCCCC"> so basically I don't</font><font color="#E5E5E5"> know if you</font>

181
00:08:34,450 --> 00:08:39,490
have ever<font color="#E5E5E5"> tried to</font><font color="#CCCCCC"> deploy</font><font color="#E5E5E5"> a likely space</font>

182
00:08:36,849 --> 00:08:42,159
to speed to a big product<font color="#E5E5E5"> right it is</font>

183
00:08:39,490 --> 00:08:43,990
<font color="#E5E5E5">very hard and it usually like for</font>

184
00:08:42,159 --> 00:08:45,970
products<font color="#CCCCCC"> like Gmail it can take multiple</font>

185
00:08:43,990 --> 00:08:48,850
people multiple years to come<font color="#E5E5E5"> up with a</font>

186
00:08:45,970 --> 00:08:51,660
<font color="#E5E5E5">virus based policy and it will cause</font>

187
00:08:48,850 --> 00:08:54,910
breakage<font color="#E5E5E5"> is it's like very hard right</font>

188
00:08:51,660 --> 00:08:56,709
<font color="#CCCCCC">with the</font><font color="#E5E5E5"> non spaced</font><font color="#CCCCCC"> CSPs and</font>

189
00:08:54,910 --> 00:09:00,670
<font color="#CCCCCC">Slick's dynamic we were able to kind</font><font color="#E5E5E5"> of</font>

190
00:08:56,710 --> 00:09:03,550
deploy a handful of<font color="#E5E5E5"> people</font><font color="#CCCCCC"> were able to</font>

191
00:09:00,670 --> 00:09:06,280
<font color="#E5E5E5">deploy strict</font><font color="#CCCCCC"> CSP</font><font color="#E5E5E5"> to over hundred</font>

192
00:09:03,550 --> 00:09:09,550
products<font color="#E5E5E5"> in I don't know six or nine</font>

193
00:09:06,280 --> 00:09:14,860
months<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is a big difference to the</font>

194
00:09:09,550 --> 00:09:16,900
how useful CSP was previously right<font color="#CCCCCC"> so</font>

195
00:09:14,860 --> 00:09:19,750
nowadays<font color="#E5E5E5"> like about the</font><font color="#CCCCCC"> building</font><font color="#E5E5E5"> users</font>

196
00:09:16,900 --> 00:09:21,939
get served a strict CSP<font color="#CCCCCC"> it's like I</font><font color="#E5E5E5"> said</font>

197
00:09:19,750 --> 00:09:25,810
like over 150 services that have<font color="#E5E5E5"> to</font><font color="#CCCCCC"> six</font>

198
00:09:21,940 --> 00:09:29,040
<font color="#E5E5E5">ESP header and in addition to that we</font>

199
00:09:25,810 --> 00:09:32,349
get like<font color="#E5E5E5"> over 50 million CSP reports</font>

200
00:09:29,040 --> 00:09:34,390
<font color="#CCCCCC">yeah that's a lot and</font><font color="#E5E5E5"> no we didn't break</font>

201
00:09:32,350 --> 00:09:36,940
<font color="#E5E5E5">everything it's just</font><font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> noise</font><font color="#CCCCCC"> and</font>

202
00:09:34,390 --> 00:09:38,530
I will also talk about<font color="#E5E5E5"> how we deal with</font>

203
00:09:36,940 --> 00:09:42,040
this noise<font color="#CCCCCC"> and how we kind of try to</font>

204
00:09:38,530 --> 00:09:44,740
<font color="#CCCCCC">make sense out of these millions of CSP</font>

205
00:09:42,040 --> 00:09:47,969
reports right so there's a couple<font color="#E5E5E5"> of</font>

206
00:09:44,740 --> 00:09:50,680
examples<font color="#CCCCCC"> a bigger</font><font color="#E5E5E5"> product like you know</font>

207
00:09:47,970 --> 00:09:53,830
<font color="#E5E5E5">Google photos has a</font><font color="#CCCCCC"> 60 SP nowadays</font>

208
00:09:50,680 --> 00:09:59,280
<font color="#CCCCCC">Google+ passwords</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> google.com</font><font color="#E5E5E5"> like</font>

209
00:09:53,830 --> 00:10:03,910
sensitive domains right<font color="#CCCCCC"> the one of the</font>

210
00:09:59,280 --> 00:10:06,459
you<font color="#CCCCCC"> know for us very important things is</font>

211
00:10:03,910 --> 00:10:08,079
that<font color="#E5E5E5"> we actually built in the 60s</font><font color="#CCCCCC"> P</font>

212
00:10:06,460 --> 00:10:10,870
support into core frameworks and<font color="#E5E5E5"> the</font>

213
00:10:08,080 --> 00:10:12,820
<font color="#CCCCCC">idea is that</font><font color="#E5E5E5"> it is on by default for all</font>

214
00:10:10,870 --> 00:10:15,100
<font color="#E5E5E5">the new services</font><font color="#CCCCCC"> right so developer</font>

215
00:10:12,820 --> 00:10:17,170
<font color="#CCCCCC">actually has don't have to have to know</font>

216
00:10:15,100 --> 00:10:19,420
anything<font color="#E5E5E5"> about</font><font color="#CCCCCC"> CSP or whatever right</font>

217
00:10:17,170 --> 00:10:21,550
it's just enabled for a new<font color="#E5E5E5"> service out</font>

218
00:10:19,420 --> 00:10:23,709
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> box and</font><font color="#CCCCCC"> ideally it would not</font>

219
00:10:21,550 --> 00:10:26,050
interfere<font color="#E5E5E5"> with the developer at all it</font>

220
00:10:23,710 --> 00:10:29,020
would just be supported by the framework

221
00:10:26,050 --> 00:10:31,900
<font color="#E5E5E5">and silently broke this is very nice</font>

222
00:10:29,020 --> 00:10:33,699
because if this model<font color="#E5E5E5"> works what it</font>

223
00:10:31,900 --> 00:10:35,680
means that<font color="#CCCCCC"> basically rolling</font><font color="#E5E5E5"> out to</font><font color="#CCCCCC"> six</font>

224
00:10:33,700 --> 00:10:37,330
CSP is zero effort once you have

225
00:10:35,680 --> 00:10:39,130
<font color="#E5E5E5">impacted into the framework right and</font>

226
00:10:37,330 --> 00:10:41,410
this<font color="#E5E5E5"> is actually the case now</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's</font>

227
00:10:39,130 --> 00:10:43,600
really<font color="#E5E5E5"> nice because there's a lot of</font>

228
00:10:41,410 --> 00:10:45,719
benefits as a<font color="#CCCCCC"> dependent that mechanism</font>

229
00:10:43,600 --> 00:10:47,800
<font color="#CCCCCC">if you have a</font><font color="#E5E5E5"> strict policy right and</font>

230
00:10:45,720 --> 00:10:49,510
deploying<font color="#E5E5E5"> it is very cheap nowadays</font>

231
00:10:47,800 --> 00:10:52,949
right so like that's a<font color="#E5E5E5"> very good</font>

232
00:10:49,510 --> 00:10:55,689
trade-off for<font color="#E5E5E5"> mitigation</font><font color="#CCCCCC"> I think so</font>

233
00:10:52,950 --> 00:10:58,290
<font color="#E5E5E5">Google+</font><font color="#CCCCCC"> is a prime example here so we</font>

234
00:10:55,690 --> 00:11:01,270
added the support of the framework and

235
00:10:58,290 --> 00:11:04,030
<font color="#E5E5E5">Google+ is a big</font><font color="#CCCCCC"> application</font><font color="#E5E5E5"> right and</font>

236
00:11:01,270 --> 00:11:05,500
<font color="#E5E5E5">usually it takes a long time to make</font><font color="#CCCCCC"> it</font>

237
00:11:04,030 --> 00:11:08,319
just<font color="#CCCCCC"> be compatible but in this case</font>

238
00:11:05,500 --> 00:11:11,380
since<font color="#CCCCCC"> it was built</font><font color="#E5E5E5"> on a core framework</font>

239
00:11:08,320 --> 00:11:14,170
<font color="#CCCCCC">have to</font><font color="#E5E5E5"> talk about black and it had 60s</font>

240
00:11:11,380 --> 00:11:18,400
be enabled and so<font color="#E5E5E5"> probably</font><font color="#CCCCCC"> no nothing</font>

241
00:11:14,170 --> 00:11:20,290
broke<font color="#E5E5E5"> but I don't know yeah so there's a</font>

242
00:11:18,400 --> 00:11:22,329
<font color="#E5E5E5">couple of</font><font color="#CCCCCC"> requirements here</font><font color="#E5E5E5"> for this</font>

243
00:11:20,290 --> 00:11:24,910
<font color="#E5E5E5">model to work right and that might also</font>

244
00:11:22,330 --> 00:11:26,530
<font color="#CCCCCC">be a bit google specific what we still</font>

245
00:11:24,910 --> 00:11:29,110
thought it'll<font color="#E5E5E5"> work share how we did it</font>

246
00:11:26,530 --> 00:11:32,470
and maybe it is useful<font color="#CCCCCC"> for other people</font>

247
00:11:29,110 --> 00:11:36,370
as well<font color="#E5E5E5"> right</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> thing that is</font><font color="#CCCCCC"> very</font>

248
00:11:32,470 --> 00:11:38,530
important<font color="#E5E5E5"> to have is a kind of service</font>

249
00:11:36,370 --> 00:11:40,120
<font color="#CCCCCC">independent CSP configuration like</font>

250
00:11:38,530 --> 00:11:43,180
previously the<font color="#CCCCCC"> whitelist</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to</font>

251
00:11:40,120 --> 00:11:44,620
come up<font color="#CCCCCC"> with the CSP that is tailored to</font>

252
00:11:43,180 --> 00:11:45,849
<font color="#E5E5E5">your application may be tailored to</font>

253
00:11:44,620 --> 00:11:48,370
<font color="#CCCCCC">every page right</font>

254
00:11:45,850 --> 00:11:50,950
very hard<font color="#E5E5E5"> to maintain</font><font color="#CCCCCC"> it doesn't scale</font>

255
00:11:48,370 --> 00:11:52,900
<font color="#E5E5E5">really right next slide I will</font><font color="#CCCCCC"> show you</font>

256
00:11:50,950 --> 00:11:54,010
what the<font color="#CCCCCC"> uses a</font><font color="#E5E5E5"> CSP but</font><font color="#CCCCCC"> that's basically</font>

257
00:11:52,900 --> 00:11:56,079
<font color="#E5E5E5">the nice property of</font><font color="#CCCCCC"> nonce</font><font color="#E5E5E5"> based</font>

258
00:11:54,010 --> 00:11:57,580
<font color="#E5E5E5">policies</font><font color="#CCCCCC"> they all the same</font><font color="#E5E5E5"> regardless of</font>

259
00:11:56,080 --> 00:12:00,790
your service<font color="#E5E5E5"> right so you don't have to</font>

260
00:11:57,580 --> 00:12:03,880
<font color="#CCCCCC">maintain the policy itself on</font><font color="#E5E5E5"> regular</font>

261
00:12:00,790 --> 00:12:05,469
basis usually so another<font color="#CCCCCC"> thing that</font>

262
00:12:03,880 --> 00:12:09,730
really<font color="#E5E5E5"> helped us a lot</font>

263
00:12:05,470 --> 00:12:12,460
our conformance tests<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a some</font>

264
00:12:09,730 --> 00:12:13,740
just a name<font color="#E5E5E5"> for tests we call internally</font>

265
00:12:12,460 --> 00:12:17,800
<font color="#E5E5E5">that make sure that developers</font><font color="#CCCCCC"> don't</font>

266
00:12:13,740 --> 00:12:19,720
<font color="#E5E5E5">submit bad patterns in the code and what</font>

267
00:12:17,800 --> 00:12:21,640
these tests are<font color="#CCCCCC"> actually they</font><font color="#E5E5E5"> are</font>

268
00:12:19,720 --> 00:12:24,010
<font color="#CCCCCC">already</font><font color="#E5E5E5"> for a</font><font color="#CCCCCC"> longer time like even</font>

269
00:12:21,640 --> 00:12:25,600
before CSP and<font color="#E5E5E5"> stuff like that but they</font>

270
00:12:24,010 --> 00:12:27,310
were really really<font color="#CCCCCC"> really helpful for</font><font color="#E5E5E5"> us</font>

271
00:12:25,600 --> 00:12:30,220
because<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of these tests</font><font color="#E5E5E5"> kind of</font>

272
00:12:27,310 --> 00:12:33,310
disallows inline<font color="#E5E5E5"> event handlers in HTML</font>

273
00:12:30,220 --> 00:12:34,930
code<font color="#E5E5E5"> and so the code did not have these</font>

274
00:12:33,310 --> 00:12:37,270
patterns<font color="#CCCCCC"> in the first place</font>

275
00:12:34,930 --> 00:12:38,920
so it makes it much<font color="#CCCCCC"> easier to actually</font>

276
00:12:37,270 --> 00:12:41,410
roll out<font color="#E5E5E5"> to CSP right because doesn't</font>

277
00:12:38,920 --> 00:12:43,479
<font color="#E5E5E5">repel within an event handles</font>

278
00:12:41,410 --> 00:12:46,329
<font color="#CCCCCC">another very important and crucial thing</font>

279
00:12:43,480 --> 00:12:49,300
is that the<font color="#E5E5E5"> template you're using to</font>

280
00:12:46,330 --> 00:12:51,520
render HTML<font color="#CCCCCC"> support auto 19</font><font color="#E5E5E5"> I will show</font>

281
00:12:49,300 --> 00:12:52,660
you in a second what<font color="#E5E5E5"> that means and yeah</font>

282
00:12:51,520 --> 00:12:54,100
last but not least you also need

283
00:12:52,660 --> 00:12:56,199
sophisticated monitoring<font color="#E5E5E5"> tools because</font>

284
00:12:54,100 --> 00:12:57,790
if you get<font color="#E5E5E5"> like 50 million CSP reports</font>

285
00:12:56,200 --> 00:13:01,630
you<font color="#CCCCCC"> kind of have to deal with</font><font color="#E5E5E5"> that and</font>

286
00:12:57,790 --> 00:13:03,790
make sense out of them right yeah<font color="#E5E5E5"> so as</font>

287
00:13:01,630 --> 00:13:06,580
I mentioned just<font color="#E5E5E5"> basically one policy</font>

288
00:13:03,790 --> 00:13:08,620
<font color="#E5E5E5">you can technically use for almost all</font>

289
00:13:06,580 --> 00:13:11,890
applications<font color="#E5E5E5"> right</font>

290
00:13:08,620 --> 00:13:13,630
at Google we mostly use this one<font color="#E5E5E5"> you</font>

291
00:13:11,890 --> 00:13:16,770
might<font color="#CCCCCC"> be concerned about</font><font color="#E5E5E5"> the answers in</font>

292
00:13:13,630 --> 00:13:21,420
<font color="#E5E5E5">line and HTTP and this policy</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

293
00:13:16,770 --> 00:13:21,420
<font color="#E5E5E5">only for backward compatibility</font><font color="#CCCCCC"> reasons</font>

294
00:13:22,140 --> 00:13:28,949
so a new browser like Chrome or Firefox

295
00:13:25,010 --> 00:13:31,019
<font color="#CCCCCC">that supports ESP</font><font color="#E5E5E5"> free will be able to</font>

296
00:13:28,950 --> 00:13:32,760
pass the<font color="#CCCCCC"> strict dynamic and one side</font>

297
00:13:31,019 --> 00:13:35,940
effects<font color="#E5E5E5"> of strict and enmities is that</font>

298
00:13:32,760 --> 00:13:37,740
makes the policy more narrow<font color="#E5E5E5"> by dropping</font>

299
00:13:35,940 --> 00:13:41,880
all the whitelist entries and unsafe<font color="#CCCCCC"> in</font>

300
00:13:37,740 --> 00:13:43,920
<font color="#CCCCCC">line</font><font color="#E5E5E5"> so new browser just ignores these</font>

301
00:13:41,880 --> 00:13:45,420
directives because of the economic an

302
00:13:43,920 --> 00:13:47,550
older browser who does not understand

303
00:13:45,420 --> 00:13:51,410
<font color="#E5E5E5">sir dynamic just falls back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

304
00:13:47,550 --> 00:13:53,579
unsafe behavior<font color="#E5E5E5"> but that is okay</font><font color="#CCCCCC"> because</font>

305
00:13:51,410 --> 00:13:55,680
<font color="#E5E5E5">you don't want to break the side right</font>

306
00:13:53,579 --> 00:13:56,969
so the policy<font color="#CCCCCC"> is effective</font><font color="#E5E5E5"> for new</font>

307
00:13:55,680 --> 00:13:58,800
<font color="#E5E5E5">process that support these platform</font>

308
00:13:56,970 --> 00:14:00,630
features all browsers just<font color="#E5E5E5"> use to fall</font>

309
00:13:58,800 --> 00:14:04,349
back so you don't<font color="#CCCCCC"> have to do user agent</font>

310
00:14:00,630 --> 00:14:05,850
sniffing or so like<font color="#E5E5E5"> that right and</font><font color="#CCCCCC"> of</font>

311
00:14:04,350 --> 00:14:07,950
course<font color="#CCCCCC"> there's like also other pieces</font>

312
00:14:05,850 --> 00:14:09,720
<font color="#E5E5E5">that make the policy more robust like</font>

313
00:14:07,950 --> 00:14:11,670
you have to restrict object<font color="#CCCCCC"> rows and</font>

314
00:14:09,720 --> 00:14:16,350
base<font color="#CCCCCC"> your</font><font color="#E5E5E5"> other vices</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> the</font>

315
00:14:11,670 --> 00:14:19,140
<font color="#E5E5E5">bypasses</font><font color="#CCCCCC"> you can do yes</font><font color="#E5E5E5"> so the other</font>

316
00:14:16,350 --> 00:14:21,540
thing that is<font color="#CCCCCC"> very important</font><font color="#E5E5E5"> for kind of</font>

317
00:14:19,140 --> 00:14:24,060
easy<font color="#E5E5E5"> large-scale deployment of</font><font color="#CCCCCC"> a</font>

318
00:14:21,540 --> 00:14:26,550
<font color="#CCCCCC">non-space</font><font color="#E5E5E5"> CSP is a templating systems</font>

319
00:14:24,060 --> 00:14:28,260
that support<font color="#E5E5E5"> or announcing there's a</font>

320
00:14:26,550 --> 00:14:31,290
couple<font color="#E5E5E5"> we patched</font><font color="#CCCCCC"> our things too if we</font>

321
00:14:28,260 --> 00:14:33,990
internally<font color="#CCCCCC"> but one</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is also</font>

322
00:14:31,290 --> 00:14:36,689
<font color="#CCCCCC">available to the</font><font color="#E5E5E5"> is also open sources</font>

323
00:14:33,990 --> 00:14:38,430
like closure templates<font color="#CCCCCC"> and it's really</font>

324
00:14:36,690 --> 00:14:41,880
cool<font color="#CCCCCC"> because</font><font color="#E5E5E5"> you basically have on the</font>

325
00:14:38,430 --> 00:14:42,329
<font color="#E5E5E5">server side</font><font color="#CCCCCC"> one place</font><font color="#E5E5E5"> there you generate</font>

326
00:14:41,880 --> 00:14:45,560
<font color="#E5E5E5">the nonce</font>

327
00:14:42,329 --> 00:14:48,870
you set the response<font color="#E5E5E5"> header and you</font><font color="#CCCCCC"> also</font>

328
00:14:45,560 --> 00:14:51,000
<font color="#E5E5E5">provide this random nonce value to the</font>

329
00:14:48,870 --> 00:14:52,290
templating system so this is done in<font color="#E5E5E5"> the</font>

330
00:14:51,000 --> 00:14:54,600
core framework in exactly one place

331
00:14:52,290 --> 00:14:56,640
<font color="#E5E5E5">right and then the templating system</font>

332
00:14:54,600 --> 00:14:58,170
takes care<font color="#CCCCCC"> of everything else</font><font color="#E5E5E5"> in this</font>

333
00:14:56,640 --> 00:15:00,439
case you have like a closure template

334
00:14:58,170 --> 00:15:04,769
that just like creates a script tag<font color="#E5E5E5"> and</font>

335
00:15:00,440 --> 00:15:06,870
set some parameters right and the output

336
00:15:04,769 --> 00:15:09,660
rendered output<font color="#E5E5E5"> looks</font><font color="#CCCCCC"> like that the</font>

337
00:15:06,870 --> 00:15:11,610
framework<font color="#E5E5E5"> automatically adds a nonce</font>

338
00:15:09,660 --> 00:15:15,000
attribute for you with the value<font color="#E5E5E5"> that</font>

339
00:15:11,610 --> 00:15:17,610
was set on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> back end</font><font color="#E5E5E5"> and the nice</font>

340
00:15:15,000 --> 00:15:20,670
<font color="#CCCCCC">thing is all your HTML templates</font>

341
00:15:17,610 --> 00:15:22,649
magically<font color="#CCCCCC"> happen on set and you don't</font>

342
00:15:20,670 --> 00:15:24,599
have to refactor every single<font color="#E5E5E5"> HTML page</font>

343
00:15:22,649 --> 00:15:27,390
<font color="#E5E5E5">propagate the nonce value through all</font>

344
00:15:24,600 --> 00:15:29,040
these channels<font color="#CCCCCC"> to the single pages</font><font color="#E5E5E5"> set</font>

345
00:15:27,390 --> 00:15:32,760
to manual<font color="#CCCCCC"> delight and maybe forget some</font>

346
00:15:29,040 --> 00:15:35,339
and whatnot<font color="#CCCCCC"> right so it's really a much</font>

347
00:15:32,760 --> 00:15:35,689
<font color="#CCCCCC">easier this way</font><font color="#E5E5E5"> basically and this is</font>

348
00:15:35,339 --> 00:15:37,100
<font color="#E5E5E5">what</font>

349
00:15:35,690 --> 00:15:39,410
scales right so this<font color="#CCCCCC"> is also where you</font>

350
00:15:37,100 --> 00:15:45,410
<font color="#CCCCCC">can</font><font color="#E5E5E5"> just talk about</font><font color="#CCCCCC"> Black Flag on G+ and</font>

351
00:15:39,410 --> 00:15:49,329
<font color="#CCCCCC">it has a strict dynamic PSD enabled so</font>

352
00:15:45,410 --> 00:15:52,490
yeah<font color="#CCCCCC"> keep it</font><font color="#E5E5E5"> yeah there's a problem</font>

353
00:15:49,330 --> 00:15:54,500
<font color="#E5E5E5">there's how do you find out</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> something</font>

354
00:15:52,490 --> 00:15:55,760
<font color="#E5E5E5">is broken right what you really don't</font>

355
00:15:54,500 --> 00:15:58,670
want is<font color="#E5E5E5"> you don't want to roll</font><font color="#CCCCCC"> out this</font>

356
00:15:55,760 --> 00:16:01,460
<font color="#CCCCCC">ESP that breaks</font><font color="#E5E5E5"> Gmail because</font><font color="#CCCCCC"> you see</font><font color="#E5E5E5"> is</font>

357
00:15:58,670 --> 00:16:03,860
<font color="#E5E5E5">people be rolled back</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> fast that you</font>

358
00:16:01,460 --> 00:16:06,170
probably<font color="#E5E5E5"> yeah you probably won't have a</font>

359
00:16:03,860 --> 00:16:07,490
<font color="#E5E5E5">chance to roll it out again</font><font color="#CCCCCC"> right so you</font>

360
00:16:06,170 --> 00:16:08,959
<font color="#E5E5E5">really have</font><font color="#CCCCCC"> to be careful that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't</font>

361
00:16:07,490 --> 00:16:12,740
break existing functionality with the

362
00:16:08,960 --> 00:16:14,810
content security policy<font color="#CCCCCC"> originally CSP</font>

363
00:16:12,740 --> 00:16:16,670
violation reports were fought to help

364
00:16:14,810 --> 00:16:18,859
with that right<font color="#E5E5E5"> because</font><font color="#CCCCCC"> then you have</font><font color="#E5E5E5"> a</font>

365
00:16:16,670 --> 00:16:20,209
<font color="#CCCCCC">violation on the browser</font><font color="#E5E5E5"> and reporting</font>

366
00:16:18,860 --> 00:16:22,490
is enabled the browser sends back a

367
00:16:20,210 --> 00:16:25,160
violation<font color="#E5E5E5"> report and this violation</font>

368
00:16:22,490 --> 00:16:28,190
<font color="#CCCCCC">report then is meant for the developer</font>

369
00:16:25,160 --> 00:16:30,680
to<font color="#E5E5E5"> you know make some sense and tell him</font>

370
00:16:28,190 --> 00:16:32,540
what went wrong<font color="#E5E5E5"> if he you know forgot to</font>

371
00:16:30,680 --> 00:16:34,520
<font color="#E5E5E5">nonce script or if you forgot</font><font color="#CCCCCC"> an inline</font>

372
00:16:32,540 --> 00:16:37,240
<font color="#CCCCCC">event handler or basically</font><font color="#E5E5E5"> if something</font>

373
00:16:34,520 --> 00:16:39,980
is<font color="#CCCCCC"> broken right</font><font color="#E5E5E5"> so the problem</font><font color="#CCCCCC"> here is</font>

374
00:16:37,240 --> 00:16:42,880
that<font color="#CCCCCC"> most</font><font color="#E5E5E5"> of these violation reports are</font>

375
00:16:39,980 --> 00:16:45,590
not actionable<font color="#E5E5E5"> I'll show in a second why</font>

376
00:16:42,880 --> 00:16:47,150
<font color="#E5E5E5">it is basically not possible to</font>

377
00:16:45,590 --> 00:16:49,400
<font color="#E5E5E5">distinguish between noise from browser</font>

378
00:16:47,150 --> 00:16:51,470
extensions and real violations<font color="#E5E5E5"> and if</font>

379
00:16:49,400 --> 00:16:52,910
you get like 50 million reports per day

380
00:16:51,470 --> 00:16:54,770
and<font color="#E5E5E5"> most of it is noise it's really</font>

381
00:16:52,910 --> 00:16:56,719
problematic<font color="#E5E5E5"> to find out what is</font><font color="#CCCCCC"> actually</font>

382
00:16:54,770 --> 00:16:58,400
you<font color="#E5E5E5"> know if something is</font><font color="#CCCCCC"> broken at all</font>

383
00:16:56,720 --> 00:17:02,060
it's<font color="#CCCCCC"> just all fine is</font><font color="#E5E5E5"> just know it's</font>

384
00:16:58,400 --> 00:17:04,129
<font color="#E5E5E5">right so there's a really new</font><font color="#CCCCCC"> there's a</font>

385
00:17:02,060 --> 00:17:08,030
<font color="#E5E5E5">really cool new keyword which is called</font>

386
00:17:04,130 --> 00:17:10,520
repot sample and it is<font color="#E5E5E5"> basically similar</font>

387
00:17:08,030 --> 00:17:12,500
<font color="#E5E5E5">to what firefox already does</font><font color="#CCCCCC"> it</font>

388
00:17:10,520 --> 00:17:14,060
<font color="#E5E5E5">basically sends the first 40 bytes of</font>

389
00:17:12,500 --> 00:17:17,180
<font color="#E5E5E5">the script that was blocked from</font>

390
00:17:14,060 --> 00:17:20,240
executing and it's already shipped in

391
00:17:17,180 --> 00:17:21,800
from 59 which is in<font color="#E5E5E5"> beta now</font><font color="#CCCCCC"> and in</font>

392
00:17:20,240 --> 00:17:23,750
<font color="#E5E5E5">addition</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> fire</font><font color="#CCCCCC"> front functionality</font>

393
00:17:21,800 --> 00:17:27,020
it also does that for inland event

394
00:17:23,750 --> 00:17:28,490
<font color="#E5E5E5">handlers which is really</font><font color="#CCCCCC"> necessary</font>

395
00:17:27,020 --> 00:17:29,900
because<font color="#CCCCCC"> otherwise you</font><font color="#E5E5E5"> run into the same</font>

396
00:17:28,490 --> 00:17:31,430
problem again<font color="#E5E5E5"> and you don't know if like</font>

397
00:17:29,900 --> 00:17:33,020
a violation<font color="#CCCCCC"> caused by an event and</font>

398
00:17:31,430 --> 00:17:36,620
<font color="#CCCCCC">levels by an</font><font color="#E5E5E5"> extension or your code</font>

399
00:17:33,020 --> 00:17:39,800
right<font color="#CCCCCC"> so quick example to</font><font color="#E5E5E5"> illustrate</font>

400
00:17:36,620 --> 00:17:41,689
that<font color="#E5E5E5"> let's assume you</font><font color="#CCCCCC"> have like an</font>

401
00:17:39,800 --> 00:17:45,830
inline script and you forgot<font color="#E5E5E5"> the nonce</font>

402
00:17:41,690 --> 00:17:47,570
<font color="#E5E5E5">you will get a report like</font><font color="#CCCCCC"> that our</font><font color="#E5E5E5"> same</font>

403
00:17:45,830 --> 00:17:49,129
with an event<font color="#CCCCCC"> handler you forgot to</font>

404
00:17:47,570 --> 00:17:52,040
remove<font color="#CCCCCC"> the reflexology</font>

405
00:17:49,130 --> 00:17:54,470
<font color="#E5E5E5">handler CSP blocks</font><font color="#CCCCCC"> it's right</font><font color="#E5E5E5"> so you get</font>

406
00:17:52,040 --> 00:17:56,710
a<font color="#E5E5E5"> report like that which looks</font><font color="#CCCCCC"> exactly</font>

407
00:17:54,470 --> 00:17:59,270
like the<font color="#E5E5E5"> first one and then the</font>

408
00:17:56,710 --> 00:18:01,490
<font color="#CCCCCC">problematic case is a browser extension</font>

409
00:17:59,270 --> 00:18:03,800
Chrome or Firefox extension injects the

410
00:18:01,490 --> 00:18:05,750
script into your page<font color="#CCCCCC"> inline or an</font>

411
00:18:03,800 --> 00:18:07,430
inline event<font color="#CCCCCC"> handler and</font><font color="#E5E5E5"> what will</font>

412
00:18:05,750 --> 00:18:09,890
<font color="#E5E5E5">happen is you</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> get exactly</font><font color="#CCCCCC"> the same</font>

413
00:18:07,430 --> 00:18:11,810
<font color="#E5E5E5">CSP report so this is very problematic</font>

414
00:18:09,890 --> 00:18:13,850
right because just like three different

415
00:18:11,810 --> 00:18:17,060
<font color="#E5E5E5">causes and they all can</font><font color="#CCCCCC"> write the same</font>

416
00:18:13,850 --> 00:18:18,649
report and if like Chrome extensions or

417
00:18:17,060 --> 00:18:21,530
Firefox extensions<font color="#CCCCCC"> they're very popular</font>

418
00:18:18,650 --> 00:18:22,970
<font color="#CCCCCC">right</font><font color="#E5E5E5"> so you get like a ton of</font><font color="#CCCCCC"> Violation</font>

419
00:18:21,530 --> 00:18:24,800
<font color="#CCCCCC">report right and you have no idea from</font>

420
00:18:22,970 --> 00:18:26,030
<font color="#CCCCCC">there looking at</font><font color="#E5E5E5"> the report if this is</font>

421
00:18:24,800 --> 00:18:29,419
like a breakage<font color="#CCCCCC"> from your site or if</font>

422
00:18:26,030 --> 00:18:30,950
it's<font color="#E5E5E5"> just noise</font><font color="#CCCCCC"> the report sample</font>

423
00:18:29,420 --> 00:18:32,780
<font color="#CCCCCC">keyword</font><font color="#E5E5E5"> is tremendously helpful here</font>

424
00:18:30,950 --> 00:18:35,030
because it tends to first 40 bytes<font color="#E5E5E5"> of</font>

425
00:18:32,780 --> 00:18:35,540
<font color="#E5E5E5">the script</font><font color="#CCCCCC"> that was blocked in this case</font>

426
00:18:35,030 --> 00:18:37,370
hello

427
00:18:35,540 --> 00:18:40,520
in this case loaded and in this case

428
00:18:37,370 --> 00:18:43,010
like some<font color="#E5E5E5"> I know browser extension</font>

429
00:18:40,520 --> 00:18:44,900
injected script<font color="#E5E5E5"> and with that you</font><font color="#CCCCCC"> can</font>

430
00:18:43,010 --> 00:18:47,300
basically<font color="#E5E5E5"> start building signatures for</font>

431
00:18:44,900 --> 00:18:49,970
popular browser extensions<font color="#E5E5E5"> and you can</font>

432
00:18:47,300 --> 00:18:52,399
take the sample<font color="#E5E5E5"> and search in your</font>

433
00:18:49,970 --> 00:18:54,080
<font color="#E5E5E5">codebase to find out if this is actually</font>

434
00:18:52,400 --> 00:18:55,720
<font color="#CCCCCC">in your</font><font color="#E5E5E5"> code right and if yes</font><font color="#CCCCCC"> you</font>

435
00:18:54,080 --> 00:19:00,139
probably<font color="#E5E5E5"> have a breakage no violation</font>

436
00:18:55,720 --> 00:19:01,820
<font color="#E5E5E5">and you</font><font color="#CCCCCC"> have to fix it right</font><font color="#E5E5E5"> yes and</font>

437
00:19:00,140 --> 00:19:03,500
with<font color="#E5E5E5"> that I will hand over to</font><font color="#CCCCCC"> Mickey who</font>

438
00:19:01,820 --> 00:19:05,899
will talk<font color="#CCCCCC"> about the tools</font><font color="#E5E5E5"> we developed</font>

439
00:19:03,500 --> 00:19:11,300
<font color="#E5E5E5">at Google to make this task of the</font>

440
00:19:05,900 --> 00:19:14,990
points<font color="#E5E5E5"> used easier thanks Lucas so what</font>

441
00:19:11,300 --> 00:19:16,520
we did to briefly<font color="#E5E5E5"> recap is we took 50</font>

442
00:19:14,990 --> 00:19:18,740
has it was a<font color="#E5E5E5"> little more than one year</font>

443
00:19:16,520 --> 00:19:21,080
<font color="#E5E5E5">ago we found out there was a</font><font color="#CCCCCC"> problem</font>

444
00:19:18,740 --> 00:19:25,460
with what is the origin<font color="#E5E5E5"> whitelist model</font>

445
00:19:21,080 --> 00:19:27,500
<font color="#E5E5E5">and so we added</font><font color="#CCCCCC"> SiC dynamic and with</font>

446
00:19:25,460 --> 00:19:30,620
this modification<font color="#E5E5E5"> we were able</font><font color="#CCCCCC"> to to</font>

447
00:19:27,500 --> 00:19:32,870
<font color="#E5E5E5">deploy it at scale at Google</font><font color="#CCCCCC"> this</font>

448
00:19:30,620 --> 00:19:36,439
<font color="#E5E5E5">created</font><font color="#CCCCCC"> the need for some serious</font>

449
00:19:32,870 --> 00:19:38,659
tooling to prototype<font color="#E5E5E5"> policies to monitor</font>

450
00:19:36,440 --> 00:19:41,930
violations<font color="#E5E5E5"> and to actually assess the</font>

451
00:19:38,660 --> 00:19:44,690
<font color="#E5E5E5">quality of the policy itself so here I</font>

452
00:19:41,930 --> 00:19:46,520
present<font color="#E5E5E5"> three tools</font><font color="#CCCCCC"> two of</font><font color="#E5E5E5"> which are</font>

453
00:19:44,690 --> 00:19:49,070
<font color="#E5E5E5">open source one is importantly history</font>

454
00:19:46,520 --> 00:19:50,750
internal but we have some<font color="#E5E5E5"> plans to</font>

455
00:19:49,070 --> 00:19:53,030
<font color="#E5E5E5">eventually</font><font color="#CCCCCC"> open source it in the</font><font color="#E5E5E5"> future</font>

456
00:19:50,750 --> 00:19:55,190
so the first one is<font color="#CCCCCC"> a browser extension</font>

457
00:19:53,030 --> 00:19:55,840
a Chrome<font color="#CCCCCC"> extension which</font><font color="#E5E5E5"> we call cs50</font>

458
00:19:55,190 --> 00:19:59,720
mitigator

459
00:19:55,840 --> 00:20:01,459
which is very useful<font color="#CCCCCC"> as CFG deployment</font>

460
00:19:59,720 --> 00:20:02,810
analysis tool and it basically

461
00:20:01,460 --> 00:20:05,870
identifies

462
00:20:02,810 --> 00:20:09,050
of a page<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are not compatible with</font>

463
00:20:05,870 --> 00:20:11,389
<font color="#CCCCCC">CSP even graphically as you see</font><font color="#E5E5E5"> it also</font>

464
00:20:09,050 --> 00:20:14,060
helps the developer make necessary

465
00:20:11,390 --> 00:20:17,810
changes<font color="#E5E5E5"> before deployment</font><font color="#CCCCCC"> to make the</font>

466
00:20:14,060 --> 00:20:22,250
the web application CSP compliant<font color="#CCCCCC"> and I</font>

467
00:20:17,810 --> 00:20:24,530
have a very quick demo<font color="#E5E5E5"> here</font><font color="#CCCCCC"> let's take</font>

468
00:20:22,250 --> 00:20:30,110
for example<font color="#E5E5E5"> Google Finance which is not</font>

469
00:20:24,530 --> 00:20:33,379
yet CSP already and it's right like

470
00:20:30,110 --> 00:20:36,620
screen resolution<font color="#E5E5E5"> so we start the</font>

471
00:20:33,380 --> 00:20:41,690
extension and then we reload and we

472
00:20:36,620 --> 00:20:42,590
immediately see that some here are some

473
00:20:41,690 --> 00:20:44,630
borders

474
00:20:42,590 --> 00:20:48,530
so basically green border means<font color="#E5E5E5"> there is</font>

475
00:20:44,630 --> 00:20:52,430
an inline event<font color="#E5E5E5"> handler the red border</font>

476
00:20:48,530 --> 00:20:54,470
<font color="#E5E5E5">means that there</font><font color="#CCCCCC"> is a dryer scriptures</font>

477
00:20:52,430 --> 00:20:57,140
are not<font color="#E5E5E5"> announced and so we can for</font>

478
00:20:54,470 --> 00:21:03,560
example<font color="#E5E5E5"> I can go around a little bit the</font>

479
00:20:57,140 --> 00:21:05,540
<font color="#CCCCCC">stock stuff greener</font><font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> yes I was</font>

480
00:21:03,560 --> 00:21:09,860
hoping<font color="#CCCCCC"> to trigger</font><font color="#E5E5E5"> I was hoping to</font>

481
00:21:05,540 --> 00:21:16,370
trigger one that had an inline event

482
00:21:09,860 --> 00:21:20,810
<font color="#E5E5E5">handler so that you see border but I'm</font>

483
00:21:16,370 --> 00:21:26,270
<font color="#E5E5E5">not that lucky</font><font color="#CCCCCC"> anyway at the end when</font>

484
00:21:20,810 --> 00:21:27,679
you know<font color="#E5E5E5"> okay there are lots of things</font>

485
00:21:26,270 --> 00:21:29,000
<font color="#CCCCCC">that are not compatible</font><font color="#E5E5E5"> to you you see</font>

486
00:21:27,680 --> 00:21:31,940
<font color="#E5E5E5">you can see here the</font><font color="#CCCCCC"> little counter</font>

487
00:21:29,000 --> 00:21:34,520
<font color="#E5E5E5">going up and up okay so when when you're</font>

488
00:21:31,940 --> 00:21:38,570
ready<font color="#CCCCCC"> to stop and a</font><font color="#E5E5E5"> report is generated</font>

489
00:21:34,520 --> 00:21:40,700
<font color="#E5E5E5">and here you have</font><font color="#CCCCCC"> everything that is not</font>

490
00:21:38,570 --> 00:21:41,929
<font color="#E5E5E5">compatible with a lot</font><font color="#CCCCCC"> divided by</font>

491
00:21:40,700 --> 00:21:43,760
<font color="#CCCCCC">categories</font><font color="#E5E5E5"> so for example you have</font>

492
00:21:41,930 --> 00:21:45,920
<font color="#CCCCCC">unknown script</font><font color="#E5E5E5"> you have inline event</font>

493
00:21:43,760 --> 00:21:48,440
<font color="#E5E5E5">handlers and you can click on more and</font>

494
00:21:45,920 --> 00:21:51,880
you have<font color="#E5E5E5"> the full code and then there</font>

495
00:21:48,440 --> 00:21:53,990
are<font color="#E5E5E5"> some actionable information such as</font>

496
00:21:51,880 --> 00:21:55,580
you<font color="#E5E5E5"> should do this you should with</font>

497
00:21:53,990 --> 00:21:59,390
factor markups<font color="#CCCCCC"> we should avoid</font>

498
00:21:55,580 --> 00:22:02,480
<font color="#E5E5E5">JavaScript your eyes and so on this</font>

499
00:21:59,390 --> 00:22:04,670
second<font color="#E5E5E5"> tool is</font><font color="#CCCCCC"> a 50 evaluator</font><font color="#E5E5E5"> which is</font>

500
00:22:02,480 --> 00:22:07,250
open source<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> can go 250 -</font>

501
00:22:04,670 --> 00:22:10,940
evaluator<font color="#E5E5E5"> dot with Google</font><font color="#CCCCCC"> comm or</font><font color="#E5E5E5"> use</font>

502
00:22:07,250 --> 00:22:13,820
the QR code<font color="#E5E5E5"> and it is basically a tool</font>

503
00:22:10,940 --> 00:22:16,039
for evaluating how good a policy is

504
00:22:13,820 --> 00:22:19,820
which is a very very hard<font color="#E5E5E5"> task</font>

505
00:22:16,039 --> 00:22:22,129
<font color="#E5E5E5">a few tools online but it is very</font><font color="#CCCCCC"> very</font>

506
00:22:19,820 --> 00:22:25,158
hard<font color="#E5E5E5"> to score</font><font color="#CCCCCC"> a policy because TSP is</font>

507
00:22:22,129 --> 00:22:27,320
<font color="#E5E5E5">evolving and look at it represented yes</font>

508
00:22:25,159 --> 00:22:28,340
so it's a very repetitive task well just

509
00:22:27,320 --> 00:22:32,749
like a lot<font color="#E5E5E5"> of things you have to take</font>

510
00:22:28,340 --> 00:22:34,459
care<font color="#E5E5E5"> when</font><font color="#CCCCCC"> you evaluate</font><font color="#E5E5E5"> a CSP and this is</font>

511
00:22:32,749 --> 00:22:36,830
just a collection<font color="#E5E5E5"> of all</font><font color="#CCCCCC"> the checks</font><font color="#E5E5E5"> you</font>

512
00:22:34,460 --> 00:22:40,399
<font color="#CCCCCC">pasted in a policy</font><font color="#E5E5E5"> and will tell you</font>

513
00:22:36,830 --> 00:22:42,949
everything<font color="#CCCCCC"> that is basically are in the</font>

514
00:22:40,399 --> 00:22:49,789
policy<font color="#E5E5E5"> that allows like a</font><font color="#CCCCCC"> crude</font><font color="#E5E5E5"> bypass</font>

515
00:22:42,950 --> 00:22:51,859
you can also source script<font color="#E5E5E5"> from some</font>

516
00:22:49,789 --> 00:22:53,539
other sites right<font color="#E5E5E5"> and we'll just try to</font>

517
00:22:51,859 --> 00:22:55,749
<font color="#CCCCCC">fetch it doesn't always work but when it</font>

518
00:22:53,539 --> 00:23:05,408
<font color="#E5E5E5">works it's it's convenient right or</font>

519
00:22:55,749 --> 00:23:07,879
safer one is<font color="#CCCCCC"> a bark stud go to</font><font color="#E5E5E5"> org and</font>

520
00:23:05,409 --> 00:23:10,609
you see like if everything is green is

521
00:23:07,879 --> 00:23:12,738
usually a good sign<font color="#CCCCCC"> because parts of</font>

522
00:23:10,609 --> 00:23:15,228
chromodoris has<font color="#E5E5E5"> project zero and release</font>

523
00:23:12,739 --> 00:23:17,539
bugs<font color="#E5E5E5"> yeah makes sense</font><font color="#CCCCCC"> to have</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> policy</font>

524
00:23:15,229 --> 00:23:22,039
there right so<font color="#E5E5E5"> play around with it and</font>

525
00:23:17,539 --> 00:23:24,259
yeah feedback is always welcome<font color="#CCCCCC"> okay and</font>

526
00:23:22,039 --> 00:23:26,710
then internally<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have another tool</font>

527
00:23:24,259 --> 00:23:30,080
<font color="#E5E5E5">which will CSP</font><font color="#CCCCCC"> fronting which is for</font>

528
00:23:26,710 --> 00:23:32,210
visualizing the sheer<font color="#CCCCCC"> amount of</font><font color="#E5E5E5"> CSP</font>

529
00:23:30,080 --> 00:23:35,389
violation reports that we get as<font color="#E5E5E5"> Lucas</font>

530
00:23:32,210 --> 00:23:38,570
explained earlier on<font color="#E5E5E5"> so we had to come</font>

531
00:23:35,389 --> 00:23:41,449
up with<font color="#E5E5E5"> some interesting design choices</font>

532
00:23:38,570 --> 00:23:43,158
for<font color="#E5E5E5"> example for</font><font color="#CCCCCC"> deduplication so we have</font>

533
00:23:41,450 --> 00:23:45,019
a lot of duplicates<font color="#E5E5E5"> reported are not</font>

534
00:23:43,159 --> 00:23:48,279
exactly<font color="#E5E5E5"> the same but they are</font><font color="#CCCCCC"> exactly</font>

535
00:23:45,019 --> 00:23:50,929
the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> in meaning so we found out that</font>

536
00:23:48,279 --> 00:23:52,879
leveraging<font color="#CCCCCC"> script sample is very useful</font>

537
00:23:50,929 --> 00:23:54,979
and<font color="#E5E5E5"> actually sometimes it was the only</font>

538
00:23:52,879 --> 00:23:57,289
piece<font color="#E5E5E5"> of signal the only signal that</font>

539
00:23:54,979 --> 00:23:59,450
actually made a<font color="#CCCCCC"> difference</font><font color="#E5E5E5"> so we have an</font>

540
00:23:57,289 --> 00:24:01,369
interface with<font color="#CCCCCC"> real-time filtering you</font>

541
00:23:59,450 --> 00:24:03,169
see at the<font color="#E5E5E5"> top which</font><font color="#CCCCCC"> is performed</font>

542
00:24:01,369 --> 00:24:06,619
<font color="#CCCCCC">client-side</font><font color="#E5E5E5"> of for</font><font color="#CCCCCC"> example document your</font>

543
00:24:03,169 --> 00:24:08,149
<font color="#CCCCCC">I and so on I think due to</font><font color="#E5E5E5"> resolution</font>

544
00:24:06,619 --> 00:24:08,509
issue is not<font color="#E5E5E5"> very readable and sorry</font>

545
00:24:08,149 --> 00:24:11,988
about<font color="#CCCCCC"> that</font>

546
00:24:08,509 --> 00:24:14,419
<font color="#CCCCCC">I saw online</font><font color="#E5E5E5"> so yeah and then there is a</font>

547
00:24:11,989 --> 00:24:17,749
high level<font color="#CCCCCC"> view and there is a detailed</font>

548
00:24:14,419 --> 00:24:22,970
violation view and you can<font color="#E5E5E5"> drill down</font><font color="#CCCCCC"> by</font>

549
00:24:17,749 --> 00:24:26,239
clicking<font color="#E5E5E5"> on the orange orange</font><font color="#CCCCCC"> bill icon</font>

550
00:24:22,970 --> 00:24:29,620
to see similar<font color="#CCCCCC"> report</font><font color="#E5E5E5"> across for example</font>

551
00:24:26,239 --> 00:24:31,490
browser versions browser<font color="#E5E5E5"> and so on</font>

552
00:24:29,620 --> 00:24:34,669
finally we have<font color="#E5E5E5"> some tools to measure</font>

553
00:24:31,490 --> 00:24:36,230
coverage for HTML responses at Google

554
00:24:34,670 --> 00:24:37,930
<font color="#CCCCCC">scale so for example we can find out</font>

555
00:24:36,230 --> 00:24:39,650
regressions we can found<font color="#E5E5E5"> out when</font>

556
00:24:37,930 --> 00:24:42,200
appropriately<font color="#E5E5E5"> that was previously</font>

557
00:24:39,650 --> 00:24:44,590
sending a good CSP<font color="#E5E5E5"> policies now is</font>

558
00:24:42,200 --> 00:24:47,390
sending a bad CSP policy or none at all

559
00:24:44,590 --> 00:24:50,090
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is done</font><font color="#CCCCCC"> by integrating the</font><font color="#E5E5E5"> CC</font>

560
00:24:47,390 --> 00:24:51,470
evaluator logic<font color="#E5E5E5"> in such automated checks</font>

561
00:24:50,090 --> 00:24:55,730
which is which we<font color="#E5E5E5"> found to be</font><font color="#CCCCCC"> very</font>

562
00:24:51,470 --> 00:25:00,080
useful<font color="#E5E5E5"> so I am going quickly to go</font>

563
00:24:55,730 --> 00:25:01,550
through some recent bypass and what can

564
00:25:00,080 --> 00:25:03,350
<font color="#E5E5E5">go wrong what</font><font color="#CCCCCC"> are the</font><font color="#E5E5E5"> imitation of the</font>

565
00:25:01,550 --> 00:25:06,590
straight dynamic approach because it's

566
00:25:03,350 --> 00:25:10,280
very important to to be clear<font color="#CCCCCC"> about that</font>

567
00:25:06,590 --> 00:25:11,870
so strict dynamic is not<font color="#E5E5E5"> a silver a</font>

568
00:25:10,280 --> 00:25:15,139
<font color="#E5E5E5">silver bullet and</font><font color="#CCCCCC"> 50 internal is not a</font>

569
00:25:11,870 --> 00:25:17,899
silver<font color="#CCCCCC"> bullet you can't just add CSP to</font>

570
00:25:15,140 --> 00:25:21,650
a<font color="#E5E5E5"> side to make it invulnerable to XSS</font>

571
00:25:17,900 --> 00:25:25,130
and in fact<font color="#E5E5E5"> while it provides a pretty</font>

572
00:25:21,650 --> 00:25:27,470
good degree of<font color="#E5E5E5"> security in its list as a</font>

573
00:25:25,130 --> 00:25:29,600
defense in that<font color="#E5E5E5"> mechanism for most</font>

574
00:25:27,470 --> 00:25:33,200
<font color="#E5E5E5">properties there</font><font color="#CCCCCC"> are some somehow</font>

575
00:25:29,600 --> 00:25:36,080
<font color="#E5E5E5">complex and bypasses so for example in</font>

576
00:25:33,200 --> 00:25:38,690
this<font color="#CCCCCC"> case</font><font color="#E5E5E5"> you just the policy is just</font><font color="#CCCCCC"> an</font>

577
00:25:36,080 --> 00:25:40,760
<font color="#E5E5E5">on space policy with script SRC</font><font color="#CCCCCC"> but an</font>

578
00:25:38,690 --> 00:25:43,580
important attacker could do is inject<font color="#E5E5E5"> a</font>

579
00:25:40,760 --> 00:25:45,500
base tag and<font color="#E5E5E5"> to evil comm and if you</font>

580
00:25:43,580 --> 00:25:49,100
have<font color="#E5E5E5"> an on script that has a relative</font>

581
00:25:45,500 --> 00:25:50,960
SRC<font color="#E5E5E5"> well that SRC gets rebase to evil</font>

582
00:25:49,100 --> 00:25:53,360
<font color="#CCCCCC">comm and</font><font color="#E5E5E5"> the solution here</font><font color="#CCCCCC"> is just to</font>

583
00:25:50,960 --> 00:25:56,930
restrict base your<font color="#E5E5E5"> eye to none or self</font>

584
00:25:53,360 --> 00:26:01,669
as you see fit<font color="#CCCCCC"> and another another</font>

585
00:25:56,930 --> 00:26:03,980
bypass<font color="#E5E5E5"> is by using a combination of</font><font color="#CCCCCC"> SVG</font>

586
00:26:01,670 --> 00:26:07,400
<font color="#E5E5E5">and</font><font color="#CCCCCC"> dangling</font><font color="#E5E5E5"> markup which is a not</font>

587
00:26:03,980 --> 00:26:09,410
particularly new technique but it can be

588
00:26:07,400 --> 00:26:13,370
a pretty powerful so in<font color="#E5E5E5"> this case the</font>

589
00:26:09,410 --> 00:26:16,970
attacker<font color="#CCCCCC"> add injects an SVG</font><font color="#E5E5E5"> tag and then</font>

590
00:26:13,370 --> 00:26:20,620
uses set to animate<font color="#E5E5E5"> attributes of the</font>

591
00:26:16,970 --> 00:26:24,170
SVG<font color="#E5E5E5"> this makes us originally originally</font>

592
00:26:20,620 --> 00:26:26,120
present script tag in the page<font color="#E5E5E5"> part of</font>

593
00:26:24,170 --> 00:26:28,450
the SVG<font color="#E5E5E5"> which is governed by actually</font>

594
00:26:26,120 --> 00:26:31,790
another parser and<font color="#E5E5E5"> another doctype and</font>

595
00:26:28,450 --> 00:26:33,520
<font color="#E5E5E5">basically this means that it is</font><font color="#CCCCCC"> possible</font>

596
00:26:31,790 --> 00:26:36,500
<font color="#CCCCCC">to change attributes of the script tag</font>

597
00:26:33,520 --> 00:26:40,790
from SVG<font color="#E5E5E5"> this has been fixed</font><font color="#CCCCCC"> in chrome</font>

598
00:26:36,500 --> 00:26:42,390
<font color="#E5E5E5">58 there are also some techniques to</font>

599
00:26:40,790 --> 00:26:45,270
<font color="#CCCCCC">steal noses</font>

600
00:26:42,390 --> 00:26:48,300
so the hard part<font color="#E5E5E5"> is actually to reuse</font>

601
00:26:45,270 --> 00:26:51,150
them because when you reuse<font color="#E5E5E5"> we want to</font>

602
00:26:48,300 --> 00:26:52,860
reuse<font color="#CCCCCC"> a script</font><font color="#E5E5E5"> unknown well in theory</font>

603
00:26:51,150 --> 00:26:54,210
<font color="#E5E5E5">you have to trigger a browser reload and</font>

604
00:26:52,860 --> 00:26:55,740
this means<font color="#E5E5E5"> that the nulls have changed</font>

605
00:26:54,210 --> 00:26:57,570
in the meantime<font color="#E5E5E5"> so you don't get</font>

606
00:26:55,740 --> 00:26:59,400
scripted script execution<font color="#E5E5E5"> from that but</font>

607
00:26:57,570 --> 00:27:02,129
there<font color="#E5E5E5"> are some some some ways but let's</font>

608
00:26:59,400 --> 00:27:04,110
talk<font color="#E5E5E5"> about stealing nonces first so in</font>

609
00:27:02,130 --> 00:27:06,810
this case we do it we accomplish that<font color="#E5E5E5"> by</font>

610
00:27:04,110 --> 00:27:08,820
using CSS selectors<font color="#E5E5E5"> so</font><font color="#CCCCCC"> css3 is</font><font color="#E5E5E5"> very</font>

611
00:27:06,810 --> 00:27:11,070
<font color="#E5E5E5">powerful and</font><font color="#CCCCCC"> you can say something like</font>

612
00:27:08,820 --> 00:27:13,770
<font color="#CCCCCC">that match all the script tags that have</font>

613
00:27:11,070 --> 00:27:16,830
a nonce attribute that starts<font color="#E5E5E5"> with a and</font>

614
00:27:13,770 --> 00:27:19,470
then replace the content with<font color="#E5E5E5"> record a</font>

615
00:27:16,830 --> 00:27:22,050
<font color="#E5E5E5">so this allows expectation of the nonce</font>

616
00:27:19,470 --> 00:27:25,290
character by selector another<font color="#CCCCCC"> semuc</font>

617
00:27:22,050 --> 00:27:27,840
technique is trying to force a<font color="#CCCCCC"> C data</font>

618
00:27:25,290 --> 00:27:30,060
<font color="#CCCCCC">like mode in the past by using</font><font color="#E5E5E5"> for</font>

619
00:27:27,840 --> 00:27:32,250
example dangling markup so usually it's

620
00:27:30,060 --> 00:27:35,010
a form with an input<font color="#E5E5E5"> and a text area</font>

621
00:27:32,250 --> 00:27:37,790
inside<font color="#E5E5E5"> text area makes basically</font><font color="#CCCCCC"> eats up</font>

622
00:27:35,010 --> 00:27:40,260
all the<font color="#CCCCCC"> mark-up that follows and mix it</font>

623
00:27:37,790 --> 00:27:41,040
submittal to<font color="#CCCCCC"> an attacker in this case</font>

624
00:27:40,260 --> 00:27:44,220
<font color="#CCCCCC">evil.com</font>

625
00:27:41,040 --> 00:27:46,350
<font color="#E5E5E5">slash form well CSP allows</font><font color="#CCCCCC"> to restrict</font>

626
00:27:44,220 --> 00:27:49,110
form action<font color="#E5E5E5"> but this is not really the</font>

627
00:27:46,350 --> 00:27:52,439
point<font color="#CCCCCC"> there could be</font><font color="#E5E5E5"> something much more</font>

628
00:27:49,110 --> 00:27:54,689
<font color="#E5E5E5">sensitive data after like credit</font><font color="#CCCCCC"> cards</font>

629
00:27:52,440 --> 00:27:59,670
number<font color="#CCCCCC"> or excessive tokens</font><font color="#E5E5E5"> and so on in</font>

630
00:27:54,690 --> 00:28:01,710
<font color="#CCCCCC">P I is how do we use nonces that's very</font>

631
00:27:59,670 --> 00:28:04,080
hard<font color="#E5E5E5"> and most of the times you</font><font color="#CCCCCC"> actually</font>

632
00:28:01,710 --> 00:28:06,360
can't reuse analysis<font color="#E5E5E5"> so</font><font color="#CCCCCC"> usually the way</font>

633
00:28:04,080 --> 00:28:09,120
<font color="#CCCCCC">to it is</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> to reuse</font><font color="#E5E5E5"> notices in</font>

634
00:28:06,360 --> 00:28:12,120
the<font color="#E5E5E5"> page only</font><font color="#CCCCCC"> if there</font><font color="#E5E5E5"> is some kind of a</font>

635
00:28:09,120 --> 00:28:14,189
symmetric<font color="#E5E5E5"> set of JavaScript</font><font color="#CCCCCC"> code and</font>

636
00:28:12,120 --> 00:28:15,540
execution on the<font color="#E5E5E5"> same page and</font><font color="#CCCCCC"> you can't</font>

637
00:28:14,190 --> 00:28:18,440
inject<font color="#CCCCCC"> that logic it has to be already</font>

638
00:28:15,540 --> 00:28:21,090
present another another way is by

639
00:28:18,440 --> 00:28:23,310
exploiting<font color="#E5E5E5"> the multiple caches that are</font>

640
00:28:21,090 --> 00:28:25,949
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> browser's so HTTP cache is</font>

641
00:28:23,310 --> 00:28:27,780
usually<font color="#E5E5E5"> not a big</font><font color="#CCCCCC"> problem</font><font color="#E5E5E5"> but for</font>

642
00:28:25,950 --> 00:28:30,480
<font color="#CCCCCC">example</font><font color="#E5E5E5"> back forward cache which is</font><font color="#CCCCCC"> a</font>

643
00:28:27,780 --> 00:28:32,100
<font color="#CCCCCC">dumb cache the same cache that when you</font>

644
00:28:30,480 --> 00:28:35,070
for example<font color="#E5E5E5"> still in a form and you do</font>

645
00:28:32,100 --> 00:28:37,980
you hit the back button in the<font color="#CCCCCC"> browser</font>

646
00:28:35,070 --> 00:28:39,750
<font color="#E5E5E5">and you see that the form is still still</font>

647
00:28:37,980 --> 00:28:43,860
that's<font color="#CCCCCC"> the back</font><font color="#E5E5E5"> forward cache in some</font>

648
00:28:39,750 --> 00:28:48,300
cases it might allow to actually use an

649
00:28:43,860 --> 00:28:50,850
old<font color="#E5E5E5"> known and so we can think of a few</font>

650
00:28:48,300 --> 00:28:52,980
scenarios here for example<font color="#E5E5E5"> an XSS due to</font>

651
00:28:50,850 --> 00:28:55,560
data received<font color="#E5E5E5"> a symmetrically the a post</font>

652
00:28:52,980 --> 00:28:55,740
message or a persistent Dom XSS where

653
00:28:55,560 --> 00:28:58,830
the

654
00:28:55,740 --> 00:29:00,809
dispatch via xhr right<font color="#E5E5E5"> so this would</font>

655
00:28:58,830 --> 00:29:03,300
this will be scenarios<font color="#E5E5E5"> and stealing and</font>

656
00:29:00,809 --> 00:29:05,010
reusing<font color="#E5E5E5"> nonces would be possible so to</font>

657
00:29:03,300 --> 00:29:07,649
<font color="#E5E5E5">recap the injection of base has been</font>

658
00:29:05,010 --> 00:29:09,750
<font color="#E5E5E5">fixed by it can be fixed</font><font color="#CCCCCC"> by a certain</font>

659
00:29:07,650 --> 00:29:12,480
<font color="#CCCCCC">behavior I the SVG bug has been fixed</font>

660
00:29:09,750 --> 00:29:15,179
and<font color="#E5E5E5"> the exfiltration of</font><font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> in general</font>

661
00:29:12,480 --> 00:29:17,670
<font color="#CCCCCC">we dealt with</font><font color="#E5E5E5"> it by</font><font color="#CCCCCC"> just hiding</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> nose</font>

662
00:29:15,179 --> 00:29:19,590
to<font color="#E5E5E5"> the dome</font><font color="#CCCCCC"> so basically during</font><font color="#E5E5E5"> the</font>

663
00:29:17,670 --> 00:29:21,210
<font color="#CCCCCC">building parsing the browser's</font><font color="#E5E5E5"> replace</font>

664
00:29:19,590 --> 00:29:25,139
the nose attribute with a dummy value

665
00:29:21,210 --> 00:29:27,420
<font color="#E5E5E5">and this is in chrome 59 and this means</font>

666
00:29:25,140 --> 00:29:29,850
<font color="#CCCCCC">that CSS selectors and any other</font>

667
00:29:27,420 --> 00:29:34,559
technique<font color="#CCCCCC"> that tries to</font><font color="#E5E5E5"> get the the nose</font>

668
00:29:29,850 --> 00:29:36,570
would not work<font color="#CCCCCC"> dangling</font><font color="#E5E5E5"> multiple</font><font color="#CCCCCC"> stacks</font>

669
00:29:34,559 --> 00:29:39,300
are a little bit<font color="#E5E5E5"> more complex and there</font>

670
00:29:36,570 --> 00:29:41,580
is a proposal<font color="#E5E5E5"> to forbid</font><font color="#CCCCCC"> completely for</font>

671
00:29:39,300 --> 00:29:43,530
<font color="#E5E5E5">beta parser inserted things which are</font>

672
00:29:41,580 --> 00:29:45,720
disallowed by strict dynamic<font color="#E5E5E5"> in the</font>

673
00:29:43,530 --> 00:29:47,280
first place so this would work out of

674
00:29:45,720 --> 00:29:49,230
the box<font color="#E5E5E5"> for economic compatible</font>

675
00:29:47,280 --> 00:29:50,790
properties also<font color="#CCCCCC"> it would enforce best</font>

676
00:29:49,230 --> 00:29:52,590
coding practices<font color="#E5E5E5"> I'm going a little bit</font>

677
00:29:50,790 --> 00:29:58,950
fast here because we have<font color="#CCCCCC"> just a few</font>

678
00:29:52,590 --> 00:30:00,990
<font color="#E5E5E5">minutes left so there are some</font>

679
00:29:58,950 --> 00:30:04,290
JavaScript framework on libraries that

680
00:30:00,990 --> 00:30:07,290
are<font color="#E5E5E5"> very powerful and somehow introduced</font>

681
00:30:04,290 --> 00:30:08,309
<font color="#E5E5E5">bypasses</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> strict dynamic this is</font>

682
00:30:07,290 --> 00:30:10,590
because they have a<font color="#CCCCCC"> needle-like</font>

683
00:30:08,309 --> 00:30:13,020
<font color="#E5E5E5">functionality using usually no script</font>

684
00:30:10,590 --> 00:30:15,540
<font color="#E5E5E5">Dom element as a source it can be a div</font>

685
00:30:13,020 --> 00:30:18,090
tag<font color="#CCCCCC"> it can be a maker</font><font color="#E5E5E5"> tag</font><font color="#CCCCCC"> so basically</font>

686
00:30:15,540 --> 00:30:22,409
they<font color="#CCCCCC"> have query selectors on let's say</font>

687
00:30:18,090 --> 00:30:24,090
inert tags<font color="#E5E5E5"> and somehow they put it to</font>

688
00:30:22,410 --> 00:30:26,100
evil or<font color="#CCCCCC"> evil like functionalities like</font>

689
00:30:24,090 --> 00:30:27,959
<font color="#E5E5E5">the pattern</font><font color="#CCCCCC"> that is allowed by strict</font>

690
00:30:26,100 --> 00:30:31,889
dynamic which is create element script

691
00:30:27,960 --> 00:30:34,020
and ecstasy<font color="#E5E5E5"> or text so this is usually a</font>

692
00:30:31,890 --> 00:30:36,780
<font color="#CCCCCC">problem with unsafe evil or strict</font>

693
00:30:34,020 --> 00:30:38,610
dynamic so the solution in general<font color="#CCCCCC"> is to</font>

694
00:30:36,780 --> 00:30:41,190
make the framework<font color="#E5E5E5"> library CSP aware so</font>

695
00:30:38,610 --> 00:30:42,780
in a way these frameworks<font color="#E5E5E5"> have are so</font>

696
00:30:41,190 --> 00:30:45,420
powerful that often have a full-featured

697
00:30:42,780 --> 00:30:47,700
JavaScript parser in certain inside them

698
00:30:45,420 --> 00:30:49,710
<font color="#E5E5E5">so they are kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a virtual</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> in</font>

699
00:30:47,700 --> 00:30:52,050
a<font color="#CCCCCC"> way so they</font><font color="#E5E5E5"> basically take away power</font>

700
00:30:49,710 --> 00:30:54,690
<font color="#CCCCCC">from the browser and they are the</font>

701
00:30:52,050 --> 00:30:58,080
browser can no longer enforce the

702
00:30:54,690 --> 00:31:00,000
restrictions<font color="#E5E5E5"> and so it makes</font><font color="#CCCCCC"> sense</font><font color="#E5E5E5"> to</font>

703
00:30:58,080 --> 00:31:02,669
<font color="#E5E5E5">have some kind of cSPD of the yes at</font>

704
00:31:00,000 --> 00:31:04,830
least a stripped down<font color="#CCCCCC"> version of CSP</font>

705
00:31:02,670 --> 00:31:05,700
<font color="#E5E5E5">since with great power comes great</font>

706
00:31:04,830 --> 00:31:09,360
<font color="#CCCCCC">responsibility</font>

707
00:31:05,700 --> 00:31:11,490
so two primitives<font color="#E5E5E5"> would be</font>

708
00:31:09,360 --> 00:31:14,729
adding<font color="#CCCCCC"> could</font><font color="#E5E5E5"> whitelist for evil or evil</font>

709
00:31:11,490 --> 00:31:16,770
things that are<font color="#E5E5E5"> similar let's say to</font><font color="#CCCCCC"> CFD</font>

710
00:31:14,730 --> 00:31:18,900
hashes<font color="#E5E5E5"> this is completely different to</font>

711
00:31:16,770 --> 00:31:21,840
<font color="#E5E5E5">origin whitelist that you should really</font>

712
00:31:18,900 --> 00:31:23,610
forget and or non checking<font color="#E5E5E5"> so for</font>

713
00:31:21,840 --> 00:31:26,040
<font color="#E5E5E5">example what happened in jQuery is that</font>

714
00:31:23,610 --> 00:31:29,270
dot HTML dot append<font color="#E5E5E5"> replaced with and so</font>

715
00:31:26,040 --> 00:31:33,570
on<font color="#E5E5E5"> when they you pass a script</font>

716
00:31:29,270 --> 00:31:34,980
<font color="#CCCCCC">JavaScript code</font><font color="#E5E5E5"> the what they do is they</font>

717
00:31:33,570 --> 00:31:37,110
can't provide it<font color="#CCCCCC"> to inner HTML because</font>

718
00:31:34,980 --> 00:31:39,690
<font color="#CCCCCC">the script does not get evaluated when</font><font color="#E5E5E5"> a</font>

719
00:31:37,110 --> 00:31:42,360
<font color="#E5E5E5">path path to inner HTML what we do is</font>

720
00:31:39,690 --> 00:31:46,320
they take the<font color="#E5E5E5"> JavaScript code and they</font>

721
00:31:42,360 --> 00:31:49,439
do create element script and they put it

722
00:31:46,320 --> 00:31:51,178
there<font color="#E5E5E5"> or</font><font color="#CCCCCC"> they call evil this is the code</font>

723
00:31:49,440 --> 00:31:52,980
so<font color="#CCCCCC"> you can see if there is you strict</font>

724
00:31:51,179 --> 00:31:54,870
well<font color="#CCCCCC"> you'd</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> aligned script code</font>

725
00:31:52,980 --> 00:31:56,549
<font color="#CCCCCC">appendchild</font><font color="#E5E5E5"> remove child which is</font>

726
00:31:54,870 --> 00:31:59,428
<font color="#E5E5E5">exactly what strict dynamic allows or</font>

727
00:31:56,549 --> 00:32:02,730
they<font color="#CCCCCC"> just</font><font color="#E5E5E5"> called evil code</font>

728
00:31:59,429 --> 00:32:04,799
well for example<font color="#CCCCCC"> Dropbox fix the each</font>

729
00:32:02,730 --> 00:32:07,590
dish by just patching<font color="#E5E5E5"> required to check</font>

730
00:32:04,799 --> 00:32:11,850
gnosis they just have a<font color="#CCCCCC"> Windows est</font>

731
00:32:07,590 --> 00:32:15,330
script nonce<font color="#E5E5E5"> and basically the check</font>

732
00:32:11,850 --> 00:32:17,219
again against it<font color="#E5E5E5"> we have a more generic</font>

733
00:32:15,330 --> 00:32:19,860
solution<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> using the appendix of</font>

734
00:32:17,220 --> 00:32:24,929
this this<font color="#E5E5E5"> presentation which I invite</font>

735
00:32:19,860 --> 00:32:27,149
you to look up so to wrap up<font color="#E5E5E5"> you should</font>

736
00:32:24,929 --> 00:32:30,150
not<font color="#E5E5E5"> use</font><font color="#CCCCCC"> watches</font><font color="#E5E5E5"> based a CSP because this</font>

737
00:32:27,150 --> 00:32:34,220
is always<font color="#E5E5E5"> by passable</font>

738
00:32:30,150 --> 00:32:36,390
not only is good enough<font color="#CCCCCC"> unless you run</font>

739
00:32:34,220 --> 00:32:38,400
<font color="#E5E5E5">frameworks with symbolic JavaScript</font>

740
00:32:36,390 --> 00:32:39,929
<font color="#E5E5E5">execution capabilities in</font><font color="#CCCCCC"> that case you</font>

741
00:32:38,400 --> 00:32:43,620
should<font color="#E5E5E5"> take responsibility</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that and</font>

742
00:32:39,929 --> 00:32:45,990
<font color="#E5E5E5">ask them simple</font><font color="#CCCCCC"> nonce plastic dynamic</font>

743
00:32:43,620 --> 00:32:48,750
economic slightly<font color="#CCCCCC"> relaxes don't exercise</font>

744
00:32:45,990 --> 00:32:52,140
protection but it is significantly

745
00:32:48,750 --> 00:32:54,270
easier<font color="#E5E5E5"> to deploy in fact we believe</font><font color="#CCCCCC"> that</font>

746
00:32:52,140 --> 00:32:57,570
<font color="#E5E5E5">most of the times nonce only</font>

747
00:32:54,270 --> 00:32:59,940
is impossible to to deploy<font color="#E5E5E5"> a large scale</font>

748
00:32:57,570 --> 00:33:01,439
for complex application also hash only

749
00:32:59,940 --> 00:33:03,030
in a specific dynamic are very

750
00:33:01,440 --> 00:33:06,059
interesting combination so for example

751
00:33:03,030 --> 00:33:07,710
hash<font color="#CCCCCC"> specific dynamic is it's this idea</font>

752
00:33:06,059 --> 00:33:10,740
<font color="#CCCCCC">of having a bootstrapping script</font><font color="#E5E5E5"> just as</font>

753
00:33:07,710 --> 00:33:14,720
one script at<font color="#CCCCCC"> inline script that has</font>

754
00:33:10,740 --> 00:33:16,919
<font color="#CCCCCC">unknown hash and dynamically loads the</font>

755
00:33:14,720 --> 00:33:19,380
scripts so this is very<font color="#E5E5E5"> interesting</font>

756
00:33:16,919 --> 00:33:21,650
<font color="#CCCCCC">because for example you can not</font><font color="#E5E5E5"> even</font>

757
00:33:19,380 --> 00:33:23,360
have a web server<font color="#E5E5E5"> or any a kind of</font>

758
00:33:21,650 --> 00:33:26,750
<font color="#CCCCCC">think content and still benefit from</font>

759
00:33:23,360 --> 00:33:28,040
strict dynamic so in conclusion<font color="#CCCCCC"> fifty</font>

760
00:33:26,750 --> 00:33:31,220
<font color="#CCCCCC">Weiss's are broken</font>

761
00:33:28,040 --> 00:33:33,560
nonspecific dynamic greatly simplify<font color="#E5E5E5"> CSP</font>

762
00:33:31,220 --> 00:33:35,270
<font color="#CCCCCC">rollout ESP is not a</font><font color="#E5E5E5"> silver bullet and</font>

763
00:33:33,560 --> 00:33:36,020
<font color="#E5E5E5">this is very important and I will always</font>

764
00:33:35,270 --> 00:33:38,300
<font color="#CCCCCC">press this</font>

765
00:33:36,020 --> 00:33:41,330
there are bypasses<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is a mitigations</font>

766
00:33:38,300 --> 00:33:44,360
is a<font color="#CCCCCC"> defense-in-depth mechanism and the</font>

767
00:33:41,330 --> 00:33:47,720
<font color="#E5E5E5">bypasses are becoming actually more and</font>

768
00:33:44,360 --> 00:33:49,820
<font color="#E5E5E5">more difficult and complex technically</font>

769
00:33:47,720 --> 00:33:52,910
which is good<font color="#CCCCCC"> means</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> doing a good</font>

770
00:33:49,820 --> 00:33:55,189
job and<font color="#CCCCCC"> 50</font><font color="#E5E5E5"> is still very powerful</font>

771
00:33:52,910 --> 00:34:01,310
defense in<font color="#CCCCCC"> that mechanism</font><font color="#E5E5E5"> to mitigate</font>

772
00:33:55,190 --> 00:34:03,350
XSS<font color="#E5E5E5"> also I'd like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> if a company CP</font>

773
00:34:01,310 --> 00:34:06,290
<font color="#E5E5E5">does not come for</font><font color="#CCCCCC"> free even</font><font color="#E5E5E5"> if strict</font>

774
00:34:03,350 --> 00:34:08,299
dynamic is easier<font color="#CCCCCC"> to deploy</font><font color="#E5E5E5"> you should</font>

775
00:34:06,290 --> 00:34:10,940
still put some effort for example in

776
00:34:08,300 --> 00:34:14,179
having in non sinn script<font color="#CCCCCC"> tags so for</font>

777
00:34:10,940 --> 00:34:15,830
example<font color="#E5E5E5"> having sweet contextual out</font>

778
00:34:14,179 --> 00:34:17,510
escaping<font color="#CCCCCC"> some plating system</font><font color="#E5E5E5"> which is</font>

779
00:34:15,830 --> 00:34:23,529
<font color="#E5E5E5">actually very rare in the industry still</font>

780
00:34:17,510 --> 00:34:27,409
<font color="#E5E5E5">and so it is natural that you</font><font color="#CCCCCC"> would need</font>

781
00:34:23,530 --> 00:34:29,300
<font color="#CCCCCC">to also</font><font color="#E5E5E5"> take care of the bypasses of the</font>

782
00:34:27,409 --> 00:34:31,700
one or<font color="#CCCCCC"> two</font><font color="#E5E5E5"> JavaScript or</font><font color="#CCCCCC"> framework</font><font color="#E5E5E5"> that</font>

783
00:34:29,300 --> 00:34:35,330
might be problematic<font color="#E5E5E5"> in our experience</font>

784
00:34:31,699 --> 00:34:37,730
patching for example jQuery<font color="#CCCCCC"> it is not so</font>

785
00:34:35,330 --> 00:34:41,060
hard<font color="#E5E5E5"> to patch them usually there there</font>

786
00:34:37,730 --> 00:34:44,659
are very<font color="#CCCCCC"> few things per library and we</font>

787
00:34:41,060 --> 00:34:49,790
are we fixed for example internally

788
00:34:44,659 --> 00:34:51,950
<font color="#E5E5E5">Google closure bypasses and we hope</font><font color="#CCCCCC"> to</font>

789
00:34:49,790 --> 00:34:54,440
be able<font color="#E5E5E5"> to upstream some of the other</font>

790
00:34:51,949 --> 00:34:59,720
fixes to<font color="#E5E5E5"> jQuery and other commonly</font><font color="#CCCCCC"> used</font>

791
00:34:54,440 --> 00:35:02,560
libraries<font color="#E5E5E5"> and with that I questions are</font>

792
00:34:59,720 --> 00:35:02,560
very welcome thanks a lot

