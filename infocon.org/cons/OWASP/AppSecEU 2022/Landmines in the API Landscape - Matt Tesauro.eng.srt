1
00:00:04,920 --> 00:00:07,379
hello and welcome everybody to the

2
00:00:07,379 --> 00:00:09,599
Builder strike my name is Tatiana

3
00:00:09,599 --> 00:00:11,880
balendir and I'm a principal security

4
00:00:11,880 --> 00:00:13,980
architect at Diamond track and today I

5
00:00:13,980 --> 00:00:16,199
will be moderating this session

6
00:00:16,199 --> 00:00:19,440
in the next 45 minutes

7
00:00:19,440 --> 00:00:23,600
um Matt will talk us through the

8
00:00:23,600 --> 00:00:26,939
landmines in the API landscape

9
00:00:26,939 --> 00:00:30,420
at the end of the session we have 10 to

10
00:00:30,420 --> 00:00:31,980
15 minutes to address your questions

11
00:00:31,980 --> 00:00:34,680
please put these questions in the text

12
00:00:34,680 --> 00:00:37,079
form in the window close to the on the

13
00:00:37,079 --> 00:00:38,820
right of the Hoover

14
00:00:38,820 --> 00:00:41,940
a streaming panel and we'll be watching

15
00:00:41,940 --> 00:00:44,640
that and addressing this

16
00:00:44,640 --> 00:00:48,239
and the please note that the chat

17
00:00:48,239 --> 00:00:50,219
function in Zoom is blocked for

18
00:00:50,219 --> 00:00:54,300
attendees so use the Hoover app chat

19
00:00:54,300 --> 00:00:58,800
and Q a pain for addressing questions

20
00:00:58,800 --> 00:01:00,899
and with that said

21
00:01:00,899 --> 00:01:03,420
Welcome Matt and

22
00:01:03,420 --> 00:01:06,119
let's enjoy your talk

23
00:01:06,119 --> 00:01:08,040
yes thank you very much let me get my

24
00:01:08,040 --> 00:01:10,159
screen shared

25
00:01:10,159 --> 00:01:13,020
we'll get rolling assuming you're seeing

26
00:01:13,020 --> 00:01:15,540
my screen which should be all good

27
00:01:15,540 --> 00:01:19,320
so as Tatiana said welcome to land mines

28
00:01:19,320 --> 00:01:22,200
and the API landscape let's get started

29
00:01:22,200 --> 00:01:24,360
I this is a bit of a gonna be a bit of a

30
00:01:24,360 --> 00:01:26,700
fire hose I've got lots of lots of

31
00:01:26,700 --> 00:01:29,340
material for you

32
00:01:29,340 --> 00:01:31,920
so quickly just going through the what

33
00:01:31,920 --> 00:01:33,060
we're going to talk about I'll do a

34
00:01:33,060 --> 00:01:34,380
quick intro a little bit of background

35
00:01:34,380 --> 00:01:37,860
and whatnot I'll go into why attack apis

36
00:01:37,860 --> 00:01:39,780
and what makes them interesting and why

37
00:01:39,780 --> 00:01:42,780
they're well I mean I guess it was uh

38
00:01:42,780 --> 00:01:44,100
Gartner was saying that they're going to

39
00:01:44,100 --> 00:01:46,020
be the number one attack Vector in this

40
00:01:46,020 --> 00:01:48,360
year which is probably going to be true

41
00:01:48,360 --> 00:01:50,100
and then I'll talk about finding

42
00:01:50,100 --> 00:01:51,899
landmines where the problems are and I'm

43
00:01:51,899 --> 00:01:53,280
going to take this from the perspective

44
00:01:53,280 --> 00:01:55,619
of both an attacker

45
00:01:55,619 --> 00:01:58,079
what an attacker would do as well as a

46
00:01:58,079 --> 00:01:59,939
Defender and what the defender sees when

47
00:01:59,939 --> 00:02:02,280
those types of attacks happen and then I

48
00:02:02,280 --> 00:02:04,140
have a conclusion a couple of key

49
00:02:04,140 --> 00:02:07,100
takeaways Etc

50
00:02:09,300 --> 00:02:12,480
so who am I I'm Matt tesaro I'm a I call

51
00:02:12,480 --> 00:02:14,640
myself a reformed programmer and an

52
00:02:14,640 --> 00:02:16,620
appsec engineer at my first job out of

53
00:02:16,620 --> 00:02:18,440
college was writing

54
00:02:18,440 --> 00:02:21,300
php3 which tells you how long ago that

55
00:02:21,300 --> 00:02:22,020
was

56
00:02:22,020 --> 00:02:24,420
I currently work as a distinguished

57
00:02:24,420 --> 00:02:26,760
engineer for No Name Labs I've got

58
00:02:26,760 --> 00:02:29,700
14-ish years with the OS Community my

59
00:02:29,700 --> 00:02:32,160
main core maintainer of defect Dojo I'm

60
00:02:32,160 --> 00:02:34,140
a co-lead of the appsec pipeline oh I

61
00:02:34,140 --> 00:02:35,640
need to put it I'm also doing the

62
00:02:35,640 --> 00:02:37,080
podcast now so I should put that in

63
00:02:37,080 --> 00:02:40,200
there too and oswg is kind of dead so I

64
00:02:40,200 --> 00:02:41,160
should probably take that off I'll

65
00:02:41,160 --> 00:02:42,840
replace it with the podcast for my next

66
00:02:42,840 --> 00:02:43,739
deck

67
00:02:43,739 --> 00:02:46,260
I've got 22-ish years of using free

68
00:02:46,260 --> 00:02:48,540
Libra and open source and Linux I'm

69
00:02:48,540 --> 00:02:50,220
currently when I write code I write it

70
00:02:50,220 --> 00:02:52,620
in go and that's a picture of me doing a

71
00:02:52,620 --> 00:02:55,500
dual front kick board break to get my

72
00:02:55,500 --> 00:02:58,019
second degree black belt and I also am a

73
00:02:58,019 --> 00:03:00,440
founder of 10 security

74
00:03:00,440 --> 00:03:04,379
so why why attack apis well apis are

75
00:03:04,379 --> 00:03:06,480
simple right it's it's just you know you

76
00:03:06,480 --> 00:03:08,099
read the Wikipedia definition an

77
00:03:08,099 --> 00:03:10,560
application programming interface is a

78
00:03:10,560 --> 00:03:12,360
connection between computers or between

79
00:03:12,360 --> 00:03:14,459
computer programs right so your program

80
00:03:14,459 --> 00:03:17,879
written in say Ruby makes a rest call

81
00:03:17,879 --> 00:03:20,640
say to my program written and go and I

82
00:03:20,640 --> 00:03:22,879
sent you back some stuff over HTTP

83
00:03:22,879 --> 00:03:26,700
straightforward super simple no biggie

84
00:03:26,700 --> 00:03:29,220
well actually it's much more complicated

85
00:03:29,220 --> 00:03:31,440
than that when you get down to it and

86
00:03:31,440 --> 00:03:33,239
you actually have the setup kind of for

87
00:03:33,239 --> 00:03:35,760
real these end up being very complicated

88
00:03:35,760 --> 00:03:38,540
if you have say a web application here

89
00:03:38,540 --> 00:03:42,180
backed by a bunch of apis you'll usually

90
00:03:42,180 --> 00:03:44,159
have an API Gateway in between that web

91
00:03:44,159 --> 00:03:44,940
app

92
00:03:44,940 --> 00:03:47,519
and the apis you'll have a web

93
00:03:47,519 --> 00:03:50,519
application firewall in place you might

94
00:03:50,519 --> 00:03:52,140
have a mobile app that talks directly to

95
00:03:52,140 --> 00:03:55,080
the API Gateway those first level of

96
00:03:55,080 --> 00:03:57,120
apis may end up calling back to other

97
00:03:57,120 --> 00:04:01,560
apis that are within your uh DC or maybe

98
00:04:01,560 --> 00:04:03,780
off in some other cloud or it could even

99
00:04:03,780 --> 00:04:05,400
be a third-party provider that you're

100
00:04:05,400 --> 00:04:07,560
getting services from so these things

101
00:04:07,560 --> 00:04:09,239
get really tangled really quick when you

102
00:04:09,239 --> 00:04:11,519
do them at scale

103
00:04:11,519 --> 00:04:13,580
okay

104
00:04:13,580 --> 00:04:15,959
so let's say you do have an appsec

105
00:04:15,959 --> 00:04:17,519
program in place and it's pretty solid

106
00:04:17,519 --> 00:04:19,320
and you're pretty happy with it if you

107
00:04:19,320 --> 00:04:20,940
look at the circle on the left that's

108
00:04:20,940 --> 00:04:23,160
kind of the general app set tooling you

109
00:04:23,160 --> 00:04:24,720
would have right you might have a WAFF

110
00:04:24,720 --> 00:04:28,199
and SAS and dust and SCA threat modeling

111
00:04:28,199 --> 00:04:31,220
developer training some kind of anti-bot

112
00:04:31,220 --> 00:04:33,360
in place

113
00:04:33,360 --> 00:04:35,000
um hopefully you have an app inventory

114
00:04:35,000 --> 00:04:37,500
right if you have all those things in

115
00:04:37,500 --> 00:04:40,199
place and you add API security tooling

116
00:04:40,199 --> 00:04:42,060
or well if you consider the API security

117
00:04:42,060 --> 00:04:44,220
tooling you need there is some overlap

118
00:04:44,220 --> 00:04:46,800
like SAS works the same for an API in a

119
00:04:46,800 --> 00:04:49,380
normal application threat modeling same

120
00:04:49,380 --> 00:04:51,180
maybe different questions but generally

121
00:04:51,180 --> 00:04:53,639
the same sea can work for both desks

122
00:04:53,639 --> 00:04:55,440
maybe works for both if you have a

123
00:04:55,440 --> 00:04:57,120
decent Dash tool although Dash tools

124
00:04:57,120 --> 00:04:58,500
generally don't do all that great with

125
00:04:58,500 --> 00:05:00,180
the traditional task tools don't do all

126
00:05:00,180 --> 00:05:02,460
that great with apis but then you have

127
00:05:02,460 --> 00:05:04,440
all these other things that are very API

128
00:05:04,440 --> 00:05:06,960
specific that are probably not in your

129
00:05:06,960 --> 00:05:08,100
tool belt

130
00:05:08,100 --> 00:05:11,220
uh in a traditional or a normal or you

131
00:05:11,220 --> 00:05:13,080
know whatever appsec program that hasn't

132
00:05:13,080 --> 00:05:15,960
seen apis before so there's a lot of Gap

133
00:05:15,960 --> 00:05:18,419
and this this this large gap is I think

134
00:05:18,419 --> 00:05:21,180
where a lot of the issues come from

135
00:05:21,180 --> 00:05:25,139
so you may have a great app set of

136
00:05:25,139 --> 00:05:27,539
controls but API security issues won't

137
00:05:27,539 --> 00:05:30,680
get caught by all of them

138
00:05:31,979 --> 00:05:34,680
and it's all about the data like if you

139
00:05:34,680 --> 00:05:36,660
think about the what was that uh Clive

140
00:05:36,660 --> 00:05:38,940
humby I don't know how to say that for

141
00:05:38,940 --> 00:05:41,160
British band's name

142
00:05:41,160 --> 00:05:43,199
um but he coined the term the data is a

143
00:05:43,199 --> 00:05:46,380
new oil right and if you're moving the

144
00:05:46,380 --> 00:05:48,419
new data around you're going to move it

145
00:05:48,419 --> 00:05:50,940
around in pipelines and in Tech those

146
00:05:50,940 --> 00:05:53,340
pipelines are apis that's how you move

147
00:05:53,340 --> 00:05:54,660
data around

148
00:05:54,660 --> 00:05:57,840
and so now you have the value of a lot

149
00:05:57,840 --> 00:05:59,639
of businesses being the data they hold

150
00:05:59,639 --> 00:06:01,979
and how they move that data around being

151
00:06:01,979 --> 00:06:04,639
apis

152
00:06:05,039 --> 00:06:08,100
and then the flip side of the coin is as

153
00:06:08,100 --> 00:06:10,320
over the years we've had browsers that

154
00:06:10,320 --> 00:06:12,060
have got continually and incrementally

155
00:06:12,060 --> 00:06:13,680
gotten better and better and the

156
00:06:13,680 --> 00:06:15,600
controls we have in place

157
00:06:15,600 --> 00:06:17,639
be they a ton of different security

158
00:06:17,639 --> 00:06:19,380
headers now you can use for web

159
00:06:19,380 --> 00:06:22,740
applications as well as MFA and captchas

160
00:06:22,740 --> 00:06:23,880
and

161
00:06:23,880 --> 00:06:27,180
uh tons and tons of browser

162
00:06:27,180 --> 00:06:29,580
hardening mechanisms that we now have at

163
00:06:29,580 --> 00:06:32,759
play those don't exist for apis and apis

164
00:06:32,759 --> 00:06:35,100
haven't had the years and years of sort

165
00:06:35,100 --> 00:06:37,800
of field deployment at scale that

166
00:06:37,800 --> 00:06:40,560
browsers have had and so in a lot of

167
00:06:40,560 --> 00:06:42,900
cases you'll see that if the same

168
00:06:42,900 --> 00:06:44,759
functionality exists on a website or an

169
00:06:44,759 --> 00:06:48,240
API as an attacker the API represents

170
00:06:48,240 --> 00:06:50,759
something with far less controls or

171
00:06:50,759 --> 00:06:53,639
security guard rails around it so why

172
00:06:53,639 --> 00:06:57,020
wouldn't I attack that API

173
00:06:57,419 --> 00:06:58,919
and then just quick talk about different

174
00:06:58,919 --> 00:07:01,020
types of testing because I'm well I'll

175
00:07:01,020 --> 00:07:02,340
explain why I need that in a minute

176
00:07:02,340 --> 00:07:04,259
right you can have black box where an

177
00:07:04,259 --> 00:07:06,419
attacker has zero knowledge it's you

178
00:07:06,419 --> 00:07:07,740
know quite literally I'm sitting down

179
00:07:07,740 --> 00:07:09,600
with a laptop in a coffee shop somewhere

180
00:07:09,600 --> 00:07:11,759
and just poking at IPS

181
00:07:11,759 --> 00:07:14,639
a gray box where you may have uh limited

182
00:07:14,639 --> 00:07:17,580
information on the target use is usually

183
00:07:17,580 --> 00:07:19,560
for like a penetration test where you'll

184
00:07:19,560 --> 00:07:21,840
have maybe an IP range so at least you

185
00:07:21,840 --> 00:07:23,280
know where to focus your attacks but

186
00:07:23,280 --> 00:07:24,740
they don't give you much more than that

187
00:07:24,740 --> 00:07:26,940
uh white box where you have full

188
00:07:26,940 --> 00:07:28,919
knowledge and a lot of times the some of

189
00:07:28,919 --> 00:07:30,720
the controls like I said a web

190
00:07:30,720 --> 00:07:32,639
application firewall or some kind of

191
00:07:32,639 --> 00:07:35,280
intervening device will be turned off

192
00:07:35,280 --> 00:07:37,020
and then crystal box where you have full

193
00:07:37,020 --> 00:07:39,180
knowledge including source code right so

194
00:07:39,180 --> 00:07:40,740
these are different levels of attack and

195
00:07:40,740 --> 00:07:42,300
the reason I talk about these when I get

196
00:07:42,300 --> 00:07:44,880
into the landmines I'm going to talk

197
00:07:44,880 --> 00:07:46,740
about them from the perspective of Black

198
00:07:46,740 --> 00:07:49,020
Box because that's the least knowledge

199
00:07:49,020 --> 00:07:50,759
you can have hopefully if you're working

200
00:07:50,759 --> 00:07:52,620
at a place you'll be much more white or

201
00:07:52,620 --> 00:07:55,080
crystal box but I wanted to give you

202
00:07:55,080 --> 00:07:58,139
kind of the more full overview of what's

203
00:07:58,139 --> 00:07:59,580
there

204
00:07:59,580 --> 00:08:02,220
and then you cannot forget my favorite

205
00:08:02,220 --> 00:08:04,380
pro bono pen testing otherwise known as

206
00:08:04,380 --> 00:08:06,360
somebody hacking you right this is what

207
00:08:06,360 --> 00:08:08,039
happens when you put an answering port

208
00:08:08,039 --> 00:08:10,080
on the internet somebody starts poking

209
00:08:10,080 --> 00:08:12,180
at you so this is always

210
00:08:12,180 --> 00:08:14,699
in the background uh free with any

211
00:08:14,699 --> 00:08:16,800
internet connection is somebody poking

212
00:08:16,800 --> 00:08:19,880
at your resources

213
00:08:20,280 --> 00:08:22,319
and then finally when I talk about API

214
00:08:22,319 --> 00:08:24,599
security I think there's three major

215
00:08:24,599 --> 00:08:26,940
areas or pillars or categories whatever

216
00:08:26,940 --> 00:08:28,379
you want to say

217
00:08:28,379 --> 00:08:31,139
that are worth talking about

218
00:08:31,139 --> 00:08:33,360
um one is API security posture and and

219
00:08:33,360 --> 00:08:36,000
this is just understanding the inventory

220
00:08:36,000 --> 00:08:38,820
and all of the apis that you have all

221
00:08:38,820 --> 00:08:41,339
the endpoints as well as who's calling

222
00:08:41,339 --> 00:08:44,039
that API are you where is that call

223
00:08:44,039 --> 00:08:46,020
originating from is this an internal you

224
00:08:46,020 --> 00:08:48,420
know API to API call or is this coming

225
00:08:48,420 --> 00:08:50,880
from public internet and then probably

226
00:08:50,880 --> 00:08:53,279
most importantly too what what data is

227
00:08:53,279 --> 00:08:56,160
set and received right am I sending out

228
00:08:56,160 --> 00:08:58,260
pii or some other kind of personal or

229
00:08:58,260 --> 00:09:01,140
gdpr type data is it just public data

230
00:09:01,140 --> 00:09:03,180
what is it right how how sensitive is

231
00:09:03,180 --> 00:09:05,700
that data and so if you have that

232
00:09:05,700 --> 00:09:07,920
inventory and a categorization of how

233
00:09:07,920 --> 00:09:09,779
sensitive the data is you have a very

234
00:09:09,779 --> 00:09:14,220
good sort of map of your apis and you

235
00:09:14,220 --> 00:09:16,740
can make some good decisions in terms of

236
00:09:16,740 --> 00:09:19,320
how much effort is worth putting behind

237
00:09:19,320 --> 00:09:22,620
securing those different apis

238
00:09:22,620 --> 00:09:24,899
and then API runtime security so this is

239
00:09:24,899 --> 00:09:26,760
watching the traffic that goes to and

240
00:09:26,760 --> 00:09:29,220
from your apis through some mechanism

241
00:09:29,220 --> 00:09:31,560
and and getting an idea of what normal

242
00:09:31,560 --> 00:09:34,380
traffic is and then obviously doing

243
00:09:34,380 --> 00:09:36,120
anomaly detection to find out what is

244
00:09:36,120 --> 00:09:38,700
abnormal traffic and doing alerting or

245
00:09:38,700 --> 00:09:40,980
detection or whatever it takes to sort

246
00:09:40,980 --> 00:09:42,300
of let the security team know hey

247
00:09:42,300 --> 00:09:44,339
there's something wonky going on with

248
00:09:44,339 --> 00:09:46,680
this API

249
00:09:46,680 --> 00:09:49,920
and then API security testing so this is

250
00:09:49,920 --> 00:09:51,540
just to get an assessment of the

251
00:09:51,540 --> 00:09:54,560
security state of your API now since

252
00:09:54,560 --> 00:09:57,480
API the the source code that makes up

253
00:09:57,480 --> 00:09:59,220
API and the source code that makes up

254
00:09:59,220 --> 00:10:00,720
applications

255
00:10:00,720 --> 00:10:03,240
are going to be tested the same for SAS

256
00:10:03,240 --> 00:10:07,380
I don't generally include SAS in API

257
00:10:07,380 --> 00:10:09,300
security testing because that really is

258
00:10:09,300 --> 00:10:10,740
just the normal part of what I would

259
00:10:10,740 --> 00:10:12,540
consider appsec

260
00:10:12,540 --> 00:10:14,279
um so really this is generally speaking

261
00:10:14,279 --> 00:10:17,160
dast testing of apis

262
00:10:17,160 --> 00:10:18,180
um and then you need to take those

263
00:10:18,180 --> 00:10:19,560
results that you get and feed them into

264
00:10:19,560 --> 00:10:21,420
whatever makes sense for your business

265
00:10:21,420 --> 00:10:23,339
that's usually something like a jira

266
00:10:23,339 --> 00:10:25,620
backlog or whoever your developers

267
00:10:25,620 --> 00:10:27,779
track issues with the software and

268
00:10:27,779 --> 00:10:29,880
hopefully get them fixed

269
00:10:29,880 --> 00:10:35,600
so it's posture run time and uh testing

270
00:10:36,060 --> 00:10:38,399
and then finally I think one thing from

271
00:10:38,399 --> 00:10:40,440
a security perspective you need to have

272
00:10:40,440 --> 00:10:42,060
a slightly different definition of an

273
00:10:42,060 --> 00:10:44,339
API I think the term apis almost become

274
00:10:44,339 --> 00:10:46,560
like the term website it's so broad that

275
00:10:46,560 --> 00:10:49,800
it kind of means nothing so I I am very

276
00:10:49,800 --> 00:10:52,500
specific when I say API what I mean by

277
00:10:52,500 --> 00:10:54,660
an API particularly in regards to

278
00:10:54,660 --> 00:10:57,540
security controls is three different

279
00:10:57,540 --> 00:10:59,820
things you have a host name right what

280
00:10:59,820 --> 00:11:02,519
what DNS name is that API running on

281
00:11:02,519 --> 00:11:03,660
right you know I don't know

282
00:11:03,660 --> 00:11:06,000
uat.bigport.com

283
00:11:06,000 --> 00:11:09,839
you have a path right slash API slash V3

284
00:11:09,839 --> 00:11:15,959
slash users or API V1 slash cart show

285
00:11:15,959 --> 00:11:18,420
items whatever the the path is

286
00:11:18,420 --> 00:11:20,519
and then you have an HTTP method right

287
00:11:20,519 --> 00:11:23,459
post put git patch delete

288
00:11:23,459 --> 00:11:24,839
Etc

289
00:11:24,839 --> 00:11:26,880
and why you need all three of those is

290
00:11:26,880 --> 00:11:29,820
to make a good security decision you

291
00:11:29,820 --> 00:11:31,019
have to have all three because you can

292
00:11:31,019 --> 00:11:32,700
have only one of those variant very

293
00:11:32,700 --> 00:11:35,040
radically different uh security postures

294
00:11:35,040 --> 00:11:36,540
can exist

295
00:11:36,540 --> 00:11:42,779
for example doing a get request to V2

296
00:11:42,779 --> 00:11:45,060
users all in other words getting a list

297
00:11:45,060 --> 00:11:47,519
of all the users is very different than

298
00:11:47,519 --> 00:11:50,700
a delete request to all users right it

299
00:11:50,700 --> 00:11:53,040
may be bad to go for an attacker let's

300
00:11:53,040 --> 00:11:54,660
say to get a list of all users but it's

301
00:11:54,660 --> 00:11:56,220
even worse if they can delete all your

302
00:11:56,220 --> 00:11:57,120
users

303
00:11:57,120 --> 00:12:00,600
so here's an example where only the HTTP

304
00:12:00,600 --> 00:12:02,519
method changed but the security

305
00:12:02,519 --> 00:12:04,980
ramifications and controls we need Etc

306
00:12:04,980 --> 00:12:07,019
around it are radically different and

307
00:12:07,019 --> 00:12:09,480
then in that that second example we're

308
00:12:09,480 --> 00:12:12,600
posting to uat.example.com

309
00:12:12,600 --> 00:12:15,180
uh user admin

310
00:12:15,180 --> 00:12:18,060
here I'm adding an admin user to a uat

311
00:12:18,060 --> 00:12:20,220
environment may be kind of interesting

312
00:12:20,220 --> 00:12:24,240
not super scary in the second example

313
00:12:24,240 --> 00:12:27,779
we are posting to production and adding

314
00:12:27,779 --> 00:12:29,459
an admin while adding an admin in

315
00:12:29,459 --> 00:12:31,380
production is a very interesting from a

316
00:12:31,380 --> 00:12:32,880
security perspective

317
00:12:32,880 --> 00:12:35,640
something happening so this is another

318
00:12:35,640 --> 00:12:37,680
case where it's just a single method

319
00:12:37,680 --> 00:12:40,200
name change everything else is the same

320
00:12:40,200 --> 00:12:42,120
but the security ramifications are

321
00:12:42,120 --> 00:12:44,700
radically different

322
00:12:44,700 --> 00:12:49,880
okay let's go find us some landmines

323
00:12:50,459 --> 00:12:52,320
so I'm going to start in a traditional

324
00:12:52,320 --> 00:12:55,019
sort of uh pen testing perspective let's

325
00:12:55,019 --> 00:12:57,240
do some Recon let's find apis to attack

326
00:12:57,240 --> 00:13:00,959
from a black box perspective

327
00:13:00,959 --> 00:13:02,700
so the first thing you'd want to do is

328
00:13:02,700 --> 00:13:04,500
just do passive Recon right just gather

329
00:13:04,500 --> 00:13:06,180
all the information you can about your

330
00:13:06,180 --> 00:13:07,860
potential targets and even if you are

331
00:13:07,860 --> 00:13:09,720
internal I think doing this exercise

332
00:13:09,720 --> 00:13:12,480
either at your desk or maybe from a

333
00:13:12,480 --> 00:13:13,920
coffee shop if you want the true

334
00:13:13,920 --> 00:13:16,800
external perspective and a nice coffee

335
00:13:16,800 --> 00:13:18,720
um isn't such a bad thing

336
00:13:18,720 --> 00:13:20,940
but in a passive Recon you're going to

337
00:13:20,940 --> 00:13:22,380
have no direct interaction with the

338
00:13:22,380 --> 00:13:24,660
target this is just to see what is out

339
00:13:24,660 --> 00:13:27,420
in the public internet so to speak for

340
00:13:27,420 --> 00:13:30,060
your apis what can I find out now this

341
00:13:30,060 --> 00:13:32,519
may be a lot if your API is a public API

342
00:13:32,519 --> 00:13:34,200
that's meant to be used

343
00:13:34,200 --> 00:13:36,660
such as like the GitHub API that's very

344
00:13:36,660 --> 00:13:38,760
public they don't hide the documentation

345
00:13:38,760 --> 00:13:42,300
for that Etc right that's by Design if

346
00:13:42,300 --> 00:13:43,920
it isn't internal though API you

347
00:13:43,920 --> 00:13:45,180
probably don't want to find much of

348
00:13:45,180 --> 00:13:47,040
anything about it so this is where you

349
00:13:47,040 --> 00:13:48,720
just want to know what the world sort of

350
00:13:48,720 --> 00:13:51,180
knows about your API you can do things

351
00:13:51,180 --> 00:13:53,820
like Google dorks the oasma mass tool is

352
00:13:53,820 --> 00:13:56,519
fantastic for DNS enumeration you might

353
00:13:56,519 --> 00:13:59,279
look at things like showdan

354
00:13:59,279 --> 00:14:02,220
um programmable web and apis.guru are

355
00:14:02,220 --> 00:14:04,019
two great sites to find lists of

356
00:14:04,019 --> 00:14:06,420
publicly known apis which are yours or

357
00:14:06,420 --> 00:14:08,040
may or may not be listed depending on

358
00:14:08,040 --> 00:14:09,540
the the background

359
00:14:09,540 --> 00:14:12,120
if it is a public or open source thing

360
00:14:12,120 --> 00:14:15,240
this is where GitHub issues and PRS can

361
00:14:15,240 --> 00:14:18,000
be very interesting to find potential uh

362
00:14:18,000 --> 00:14:19,920
security issues and then if it is a

363
00:14:19,920 --> 00:14:22,040
public API there may be stacked over for

364
00:14:22,040 --> 00:14:24,060
overflows or something like that where

365
00:14:24,060 --> 00:14:26,220
someone's trying to get help within a

366
00:14:26,220 --> 00:14:29,120
particular API call

367
00:14:29,120 --> 00:14:31,560
from the defender side

368
00:14:31,560 --> 00:14:33,480
you really can't do much it's public

369
00:14:33,480 --> 00:14:35,399
info now you can do things like I've

370
00:14:35,399 --> 00:14:38,880
seen vendors put the API docs behind a

371
00:14:38,880 --> 00:14:41,160
customer login page right and that may

372
00:14:41,160 --> 00:14:43,019
make sense depending on the use case of

373
00:14:43,019 --> 00:14:44,639
your API and that certainly can sort of

374
00:14:44,639 --> 00:14:46,320
make it harder to find out about your

375
00:14:46,320 --> 00:14:48,120
apis

376
00:14:48,120 --> 00:14:50,160
um so you may not want to advertise them

377
00:14:50,160 --> 00:14:51,779
at all but you may also want to

378
00:14:51,779 --> 00:14:53,760
advertise them because you make money by

379
00:14:53,760 --> 00:14:55,800
people using your apis like if you're a

380
00:14:55,800 --> 00:14:57,779
stripe you want your apis to be as easy

381
00:14:57,779 --> 00:15:00,240
to use as possible so you will have a

382
00:15:00,240 --> 00:15:01,680
getting started page you will have

383
00:15:01,680 --> 00:15:04,380
public documentation so this may or may

384
00:15:04,380 --> 00:15:07,260
not be something you can actively do

385
00:15:07,260 --> 00:15:09,480
something about but in the case of the

386
00:15:09,480 --> 00:15:12,600
tooling posture runtime testing they're

387
00:15:12,600 --> 00:15:14,399
not really in play here because we're

388
00:15:14,399 --> 00:15:16,560
not even sending any kind of traffic to

389
00:15:16,560 --> 00:15:18,720
your API so and you can't really test

390
00:15:18,720 --> 00:15:20,579
your API to see if the dots are public

391
00:15:20,579 --> 00:15:25,880
so this is more just of a human exercise

392
00:15:26,880 --> 00:15:28,920
and so you've done your passive Recon

393
00:15:28,920 --> 00:15:30,959
now it's time to go active and this is

394
00:15:30,959 --> 00:15:33,300
where you gather public information all

395
00:15:33,300 --> 00:15:35,279
that you can from your targets by and

396
00:15:35,279 --> 00:15:38,339
also playing nice right as opposed to uh

397
00:15:38,339 --> 00:15:39,899
not sending any traffic now you're

398
00:15:39,899 --> 00:15:41,339
sending traffic but you're not trying to

399
00:15:41,339 --> 00:15:43,079
be malicious yet you're just sort of

400
00:15:43,079 --> 00:15:46,199
getting a feel for things

401
00:15:46,199 --> 00:15:51,300
so the idea here is to do basic

402
00:15:51,300 --> 00:15:53,279
um Recon do things like you can look at

403
00:15:53,279 --> 00:15:55,199
the robust.text if particularly if

404
00:15:55,199 --> 00:15:56,699
you're completely blindly looking at

405
00:15:56,699 --> 00:15:59,880
this if you're looking at a API backed

406
00:15:59,880 --> 00:16:01,980
website this is where the dev tools the

407
00:16:01,980 --> 00:16:03,899
network Tab and all those different tabs

408
00:16:03,899 --> 00:16:06,060
that you have in your browser Dev tools

409
00:16:06,060 --> 00:16:07,620
will give you great hints at what's out

410
00:16:07,620 --> 00:16:10,380
there obviously local proxies like zap

411
00:16:10,380 --> 00:16:12,899
or burp are fantastic for this either

412
00:16:12,899 --> 00:16:17,399
for API back mobile apps or websites

413
00:16:17,399 --> 00:16:18,839
um you can do things like brute forcing

414
00:16:18,839 --> 00:16:20,940
URLs with something like dirtbuster

415
00:16:20,940 --> 00:16:23,579
Derby Go Buster they're all the sort of

416
00:16:23,579 --> 00:16:27,260
popular uh directory uh

417
00:16:27,260 --> 00:16:30,300
directory brute forcing tools and Kite

418
00:16:30,300 --> 00:16:32,519
Runner is a API focused brute forcer

419
00:16:32,519 --> 00:16:34,860
that's very useful but and maybe even an

420
00:16:34,860 --> 00:16:36,540
nmap scan but

421
00:16:36,540 --> 00:16:40,019
at best for the defender

422
00:16:40,019 --> 00:16:42,000
it's pretty hard to see this this

423
00:16:42,000 --> 00:16:44,100
traffic s attack traffic right if I run

424
00:16:44,100 --> 00:16:46,220
an M app against your

425
00:16:46,220 --> 00:16:49,620
IP range you could probably see that but

426
00:16:49,620 --> 00:16:51,540
honestly if you have an open IP to the

427
00:16:51,540 --> 00:16:54,120
internet everybody's in Mountain

428
00:16:54,120 --> 00:16:55,980
everybody but you're getting enough nmap

429
00:16:55,980 --> 00:16:59,820
that I'll just get lost in the shuffle

430
00:16:59,820 --> 00:17:02,279
um if you have a single page web app or

431
00:17:02,279 --> 00:17:04,799
a API backed mobile app you can't do

432
00:17:04,799 --> 00:17:06,359
anything about Dev tools they're built

433
00:17:06,359 --> 00:17:07,919
into everybody's browser you just have

434
00:17:07,919 --> 00:17:09,599
to deal with that

435
00:17:09,599 --> 00:17:11,280
I have seen interesting things with

436
00:17:11,280 --> 00:17:14,459
robots.txt before where uh one

437
00:17:14,459 --> 00:17:17,220
particular client I was interacting with

438
00:17:17,220 --> 00:17:18,720
had

439
00:17:18,720 --> 00:17:21,540
their CPU intensive Pages listed in

440
00:17:21,540 --> 00:17:24,000
robots.txt because when they got crawled

441
00:17:24,000 --> 00:17:26,760
it was actually spiking CPU usage

442
00:17:26,760 --> 00:17:30,179
on their website and my position to them

443
00:17:30,179 --> 00:17:32,040
was you probably need a better way to

444
00:17:32,040 --> 00:17:34,679
handle this because for as an attacker

445
00:17:34,679 --> 00:17:37,260
that robots.txt is almost like a guide

446
00:17:37,260 --> 00:17:40,919
to doing a Dos of your web application

447
00:17:40,919 --> 00:17:42,419
um

448
00:17:42,419 --> 00:17:44,340
and then for

449
00:17:44,340 --> 00:17:47,280
um the three types of tools posture in

450
00:17:47,280 --> 00:17:48,660
this case really just helps you focus

451
00:17:48,660 --> 00:17:50,460
your limited resources where it needs to

452
00:17:50,460 --> 00:17:53,580
be the most the most risky of your apps

453
00:17:53,580 --> 00:17:56,940
run time can discover active recount if

454
00:17:56,940 --> 00:17:58,380
it's noisy enough certainly something

455
00:17:58,380 --> 00:18:00,780
like durbuster or Kite Runner will be

456
00:18:00,780 --> 00:18:03,720
rather uh obvious particularly if I'm

457
00:18:03,720 --> 00:18:06,179
trying to if you have a non-public API

458
00:18:06,179 --> 00:18:08,580
and I'm trying to Brute Force Brute

459
00:18:08,580 --> 00:18:11,760
Force Uris for that API those will stand

460
00:18:11,760 --> 00:18:14,100
out pretty blatantly and then testing

461
00:18:14,100 --> 00:18:15,900
this is Recon there's not too much you

462
00:18:15,900 --> 00:18:18,840
can do about testing from a recount from

463
00:18:18,840 --> 00:18:21,419
a testing perspective

464
00:18:21,419 --> 00:18:23,640
so we're done with Recon let's move on

465
00:18:23,640 --> 00:18:26,419
to Discovery

466
00:18:26,940 --> 00:18:30,059
so I've got targets how do I use them

467
00:18:30,059 --> 00:18:31,260
legitimately

468
00:18:31,260 --> 00:18:33,299
right so this is where it particularly

469
00:18:33,299 --> 00:18:35,700
if you're first seeing an API and

470
00:18:35,700 --> 00:18:37,740
testing it you need to just understand

471
00:18:37,740 --> 00:18:39,840
how to legitimately use that thing how

472
00:18:39,840 --> 00:18:42,299
do I make legitimate calls how do I

473
00:18:42,299 --> 00:18:44,520
authenticate how do I do whatever the

474
00:18:44,520 --> 00:18:46,860
use for that API is right if it's stripe

475
00:18:46,860 --> 00:18:49,679
how do I make a transaction

476
00:18:49,679 --> 00:18:51,360
if it is something like stripe that's

477
00:18:51,360 --> 00:18:52,799
very public there will be API

478
00:18:52,799 --> 00:18:54,720
documentation getting started guides

479
00:18:54,720 --> 00:18:58,140
blog posts the whole nine about it

480
00:18:58,140 --> 00:18:59,880
um if not it may be kind of interesting

481
00:18:59,880 --> 00:19:01,919
if it's an API that is not publicly

482
00:19:01,919 --> 00:19:02,820
known

483
00:19:02,820 --> 00:19:04,679
this can be really challenging to figure

484
00:19:04,679 --> 00:19:06,299
out how those things work you may be

485
00:19:06,299 --> 00:19:08,100
able to find a Swagger file a lot of

486
00:19:08,100 --> 00:19:10,620
times there there's a URL or yeah URL

487
00:19:10,620 --> 00:19:12,360
that'll have the Swagger file posted for

488
00:19:12,360 --> 00:19:16,919
you or uh raml whistle waddle all those

489
00:19:16,919 --> 00:19:20,640
different ways to specify uh specs

490
00:19:20,640 --> 00:19:23,580
for the API

491
00:19:23,580 --> 00:19:26,039
um I have had cases where the

492
00:19:26,039 --> 00:19:28,500
provider of the API also provides

493
00:19:28,500 --> 00:19:30,600
something like a command line client

494
00:19:30,600 --> 00:19:32,880
even though their apis may not be

495
00:19:32,880 --> 00:19:34,679
publicly known if you put something like

496
00:19:34,679 --> 00:19:38,520
burp or zap as an upstream proxy to that

497
00:19:38,520 --> 00:19:39,660
client

498
00:19:39,660 --> 00:19:41,700
suddenly you can see exactly how those

499
00:19:41,700 --> 00:19:44,100
API requests work I've also had once

500
00:19:44,100 --> 00:19:45,780
where the documentation was so terrible

501
00:19:45,780 --> 00:19:47,700
that I had to use a client just to find

502
00:19:47,700 --> 00:19:50,520
out how to talk to the API

503
00:19:50,520 --> 00:19:52,559
um and then you you once you get those

504
00:19:52,559 --> 00:19:54,240
particularly when you're doing a blind

505
00:19:54,240 --> 00:19:56,520
attack where you don't have the list of

506
00:19:56,520 --> 00:19:59,160
API endpoints you can start to manually

507
00:19:59,160 --> 00:20:01,080
create a list of those either by brute

508
00:20:01,080 --> 00:20:03,419
forcing finding them in in the dev tools

509
00:20:03,419 --> 00:20:05,039
Etc but you do want to start to

510
00:20:05,039 --> 00:20:07,440
enumerate a list of all the API calls

511
00:20:07,440 --> 00:20:10,039
that are available to you

512
00:20:10,039 --> 00:20:14,700
and then on the flip side as an attacker

513
00:20:14,700 --> 00:20:16,210
um

514
00:20:16,210 --> 00:20:17,400
[Music]

515
00:20:17,400 --> 00:20:19,320
most of the traffic just looks like some

516
00:20:19,320 --> 00:20:22,740
excuse me newbie right uh trying to

517
00:20:22,740 --> 00:20:24,360
learn to use your API they're going to

518
00:20:24,360 --> 00:20:26,160
make some bad off calls but it's going

519
00:20:26,160 --> 00:20:28,080
to be a onesie2z kind of call maybe

520
00:20:28,080 --> 00:20:29,940
there might be some curl requests or

521
00:20:29,940 --> 00:20:31,559
something but it won't look too weird

522
00:20:31,559 --> 00:20:34,440
and it won't be all that pronounced

523
00:20:34,440 --> 00:20:37,260
now if you do have an API backed mobile

524
00:20:37,260 --> 00:20:39,840
app or a single page app

525
00:20:39,840 --> 00:20:42,419
our web application right these May

526
00:20:42,419 --> 00:20:44,820
stand out right if you're only expecting

527
00:20:44,820 --> 00:20:48,120
API calls from your mobile clients like

528
00:20:48,120 --> 00:20:51,059
say Android or iOS and suddenly curl

529
00:20:51,059 --> 00:20:53,280
starts calling your API that's a little

530
00:20:53,280 --> 00:20:55,200
weird right that shouldn't happen and

531
00:20:55,200 --> 00:20:57,120
that can stand out from a Defender point

532
00:20:57,120 --> 00:20:58,860
of view

533
00:20:58,860 --> 00:21:00,600
um and if you have an undocumented

534
00:21:00,600 --> 00:21:02,820
non-public kind of API you're going to

535
00:21:02,820 --> 00:21:04,559
see a lot of

536
00:21:04,559 --> 00:21:07,980
failed requests as the attacker is

537
00:21:07,980 --> 00:21:10,380
trying to understand like exactly what

538
00:21:10,380 --> 00:21:12,240
your API looks like

539
00:21:12,240 --> 00:21:13,020
um

540
00:21:13,020 --> 00:21:16,200
so there's a couple cases where these uh

541
00:21:16,200 --> 00:21:19,380
these Discovery uh attacks for lack of a

542
00:21:19,380 --> 00:21:21,059
better order the discovery activity will

543
00:21:21,059 --> 00:21:22,500
will show up and look pretty pretty

544
00:21:22,500 --> 00:21:25,740
obvious so from a posture perspective

545
00:21:25,740 --> 00:21:27,660
obviously you can use that to focus your

546
00:21:27,660 --> 00:21:29,880
your resources but it's also good to be

547
00:21:29,880 --> 00:21:31,919
able to know like this is an internal

548
00:21:31,919 --> 00:21:34,919
only API I should never see a public IP

549
00:21:34,919 --> 00:21:37,080
hit this thing and if that happens you

550
00:21:37,080 --> 00:21:38,460
get some kind of network issue that's

551
00:21:38,460 --> 00:21:40,020
pretty hairy that you need to jump on

552
00:21:40,020 --> 00:21:42,419
quickly or if you have an API Gateway in

553
00:21:42,419 --> 00:21:45,059
place you should only have requests

554
00:21:45,059 --> 00:21:46,799
originating from the API Gateway and

555
00:21:46,799 --> 00:21:49,020
then suddenly they don't then somehow

556
00:21:49,020 --> 00:21:50,700
someone is able to bypass their API

557
00:21:50,700 --> 00:21:51,960
Gateway

558
00:21:51,960 --> 00:21:54,840
runtime you can certainly discover

559
00:21:54,840 --> 00:21:57,480
some of this traffic if it is things

560
00:21:57,480 --> 00:21:59,400
like I said where you expect a very

561
00:21:59,400 --> 00:22:01,440
specific client only to be talking to

562
00:22:01,440 --> 00:22:03,900
your API and you get some Oddball

563
00:22:03,900 --> 00:22:05,940
requests like curl or you know the

564
00:22:05,940 --> 00:22:09,179
request library from python or something

565
00:22:09,179 --> 00:22:11,460
or if you have undocumented apis you'll

566
00:22:11,460 --> 00:22:13,380
probably see a lot of failure so runtime

567
00:22:13,380 --> 00:22:15,240
can definitely help you here

568
00:22:15,240 --> 00:22:17,640
and testing it's proactive it also

569
00:22:17,640 --> 00:22:18,720
doesn't really help you much for

570
00:22:18,720 --> 00:22:20,280
Discovery hopefully you just won't have

571
00:22:20,280 --> 00:22:22,740
issues to begin with but they're still

572
00:22:22,740 --> 00:22:25,520
going to be discoverable

573
00:22:25,559 --> 00:22:27,539
oh and if you are doing this from a

574
00:22:27,539 --> 00:22:29,520
testing perspective and particularly as

575
00:22:29,520 --> 00:22:32,640
a blind test or a non-public test a

576
00:22:32,640 --> 00:22:34,020
discovery can

577
00:22:34,020 --> 00:22:36,299
seem easy but you can spend loads of

578
00:22:36,299 --> 00:22:38,100
time trying to find there's got to be

579
00:22:38,100 --> 00:22:39,840
another API endpoint here there's got to

580
00:22:39,840 --> 00:22:40,799
be

581
00:22:40,799 --> 00:22:43,140
um so be warned if you're doing the

582
00:22:43,140 --> 00:22:45,539
testing side of this uh don't don't let

583
00:22:45,539 --> 00:22:48,360
this be a time sink

584
00:22:48,360 --> 00:22:50,640
okay let's go on to the active side of

585
00:22:50,640 --> 00:22:52,620
things like let's get malicious now so

586
00:22:52,620 --> 00:22:57,000
as a black box tester I found some apis

587
00:22:57,000 --> 00:22:59,820
I've understood how to to talk to them

588
00:22:59,820 --> 00:23:01,500
legitimately and I have a fairly good

589
00:23:01,500 --> 00:23:03,419
idea of what's out there now it's time

590
00:23:03,419 --> 00:23:06,480
to see if there's some vulnerabilities

591
00:23:06,480 --> 00:23:09,179
and just to be to give some structure to

592
00:23:09,179 --> 00:23:10,860
this and not just sort of randomly talk

593
00:23:10,860 --> 00:23:13,500
about things I grabbed the oh wasp API

594
00:23:13,500 --> 00:23:15,299
top 10 and I'm going to walk through all

595
00:23:15,299 --> 00:23:17,640
of those and explain the attacker and

596
00:23:17,640 --> 00:23:21,860
Defender side of those two pieces

597
00:23:22,200 --> 00:23:25,260
so the first one broken object level

598
00:23:25,260 --> 00:23:27,240
authorization

599
00:23:27,240 --> 00:23:30,179
uh in this example right we have

600
00:23:30,179 --> 00:23:34,140
Benjamin here making a request to an API

601
00:23:34,140 --> 00:23:36,900
with the token a bearer token as well as

602
00:23:36,900 --> 00:23:40,620
his user ID and he gets back Benjamin's

603
00:23:40,620 --> 00:23:42,299
information now there is some pii in

604
00:23:42,299 --> 00:23:43,980
there but hopefully Benjamin knows his

605
00:23:43,980 --> 00:23:45,780
own date of birth and his phone number

606
00:23:45,780 --> 00:23:48,000
is SSN

607
00:23:48,000 --> 00:23:48,960
um but

608
00:23:48,960 --> 00:23:51,539
this is actually a valid request this is

609
00:23:51,539 --> 00:23:53,220
how it should look right this is a good

610
00:23:53,220 --> 00:23:55,559
request

611
00:23:55,559 --> 00:23:57,120
however if Benjamin gets a little

612
00:23:57,120 --> 00:23:59,400
nefarious with us and he keeps his same

613
00:23:59,400 --> 00:24:01,740
token and he keeps the same

614
00:24:01,740 --> 00:24:05,820
name but he changes the user ID to a

615
00:24:05,820 --> 00:24:07,799
different numeric value

616
00:24:07,799 --> 00:24:10,320
he now gets Charlotte's information and

617
00:24:10,320 --> 00:24:13,919
her dob and her phone number in SSN and

618
00:24:13,919 --> 00:24:16,799
this is of course a bad request from a

619
00:24:16,799 --> 00:24:19,080
Defender point of view great request if

620
00:24:19,080 --> 00:24:21,000
you're an attacker

621
00:24:21,000 --> 00:24:22,860
um but this is Bola this is what Bola

622
00:24:22,860 --> 00:24:25,200
looks like

623
00:24:25,200 --> 00:24:26,460
so

624
00:24:26,460 --> 00:24:28,620
from an attacker's perspective how do I

625
00:24:28,620 --> 00:24:31,200
find Bola you can look at how resources

626
00:24:31,200 --> 00:24:33,299
are structured and try to find any kind

627
00:24:33,299 --> 00:24:37,260
of IDs or unique values within API API

628
00:24:37,260 --> 00:24:40,140
calls these can be numbers like like we

629
00:24:40,140 --> 00:24:41,700
saw in the previous example or these may

630
00:24:41,700 --> 00:24:43,500
be non-numeric right these can be simple

631
00:24:43,500 --> 00:24:45,960
like strings right they don't have to be

632
00:24:45,960 --> 00:24:48,059
numbers generally they're numbers but

633
00:24:48,059 --> 00:24:50,159
they don't have to be

634
00:24:50,159 --> 00:24:50,820
um

635
00:24:50,820 --> 00:24:53,940
and then you make calls to those

636
00:24:53,940 --> 00:24:57,240
Resources with your same existing token

637
00:24:57,240 --> 00:24:59,340
however you're authenticating

638
00:24:59,340 --> 00:25:02,400
and you just modify those numbers and

639
00:25:02,400 --> 00:25:04,020
see what happens it's really not too

640
00:25:04,020 --> 00:25:06,120
hard you can also do things if you have

641
00:25:06,120 --> 00:25:08,159
two user accounts create something as

642
00:25:08,159 --> 00:25:09,419
user one

643
00:25:09,419 --> 00:25:12,419
and then as user two try to request that

644
00:25:12,419 --> 00:25:14,100
something and this depends on the use

645
00:25:14,100 --> 00:25:17,700
case of the API if the API has resources

646
00:25:17,700 --> 00:25:19,740
isolated to users then this would be an

647
00:25:19,740 --> 00:25:21,419
example of a bull attack if everything's

648
00:25:21,419 --> 00:25:23,640
public obviously this this is not a

649
00:25:23,640 --> 00:25:24,900
whole lot attack

650
00:25:24,900 --> 00:25:27,000
and then as you're doing these look for

651
00:25:27,000 --> 00:25:28,500
response differences kind of like

652
00:25:28,500 --> 00:25:30,539
fuzzing honestly if there's a different

653
00:25:30,539 --> 00:25:33,120
response code 404 means it doesn't exist

654
00:25:33,120 --> 00:25:35,279
generally speaking if apis are well

655
00:25:35,279 --> 00:25:36,480
coded

656
00:25:36,480 --> 00:25:39,000
um 405 means you're unauthorized so that

657
00:25:39,000 --> 00:25:41,100
tells you 405 does tell you hey there's

658
00:25:41,100 --> 00:25:42,480
a resource there of this not going to

659
00:25:42,480 --> 00:25:43,679
let you see it

660
00:25:43,679 --> 00:25:45,659
time to response can sometimes give you

661
00:25:45,659 --> 00:25:47,580
some clues about existing or interesting

662
00:25:47,580 --> 00:25:51,360
IDs and like the response very very

663
00:25:51,360 --> 00:25:54,120
seldomly happens but sometimes it can

664
00:25:54,120 --> 00:25:56,340
from a Defender

665
00:25:56,340 --> 00:25:59,039
unfortunately detection takes a fairly

666
00:25:59,039 --> 00:26:01,980
deep inspection of those API calls right

667
00:26:01,980 --> 00:26:04,860
in the example I showed a minute ago it

668
00:26:04,860 --> 00:26:07,380
was only that one ID string that changed

669
00:26:07,380 --> 00:26:09,360
otherwise the request was the same and

670
00:26:09,360 --> 00:26:12,720
the good and the bad requests so from a

671
00:26:12,720 --> 00:26:15,539
a looking at the HTTP even the the

672
00:26:15,539 --> 00:26:18,299
payload perspective a lot of laughs are

673
00:26:18,299 --> 00:26:19,440
probably going to fall short here

674
00:26:19,440 --> 00:26:21,320
because it looks like a normal

675
00:26:21,320 --> 00:26:24,000
well-structured bit of Json it doesn't

676
00:26:24,000 --> 00:26:26,520
look weird just one of the data values

677
00:26:26,520 --> 00:26:29,520
inside of there isn't doesn't match what

678
00:26:29,520 --> 00:26:32,039
it would it was expected for your token

679
00:26:32,039 --> 00:26:34,440
right your Bearer token in that case

680
00:26:34,440 --> 00:26:35,700
so

681
00:26:35,700 --> 00:26:38,460
this is really kind of tricky for sort

682
00:26:38,460 --> 00:26:41,520
of more web app focused

683
00:26:41,520 --> 00:26:44,580
intervening devices like Wax to find

684
00:26:44,580 --> 00:26:46,200
so you really need a deeper inspection

685
00:26:46,200 --> 00:26:47,880
to be able to understand that this bear

686
00:26:47,880 --> 00:26:50,039
token is generally associated with this

687
00:26:50,039 --> 00:26:52,260
user not this other user

688
00:26:52,260 --> 00:26:54,000
so this is where you kind of need a

689
00:26:54,000 --> 00:26:57,659
specialized tool or API specific tool I

690
00:26:57,659 --> 00:26:59,820
should say for this

691
00:26:59,820 --> 00:27:01,500
um if you if I'm an attacker and I'm

692
00:27:01,500 --> 00:27:03,120
looking for Ebola you're going to see a

693
00:27:03,120 --> 00:27:05,159
lot of failed requests or authorization

694
00:27:05,159 --> 00:27:07,980
issues so this is a great way to sort of

695
00:27:07,980 --> 00:27:09,179
uh

696
00:27:09,179 --> 00:27:11,400
to find those attackers before they get

697
00:27:11,400 --> 00:27:12,840
to do anything interesting with your

698
00:27:12,840 --> 00:27:14,580
apis

699
00:27:14,580 --> 00:27:17,100
if you see two similar requests with

700
00:27:17,100 --> 00:27:18,840
different ID values in them from the

701
00:27:18,840 --> 00:27:20,400
same client in a short period of time

702
00:27:20,400 --> 00:27:22,679
that is a huge clue and this is

703
00:27:22,679 --> 00:27:23,940
something where if you have decent

704
00:27:23,940 --> 00:27:26,340
anomaly detection with AI or ml or

705
00:27:26,340 --> 00:27:28,980
whatever you want to call it

706
00:27:28,980 --> 00:27:31,020
um but they can point that out right

707
00:27:31,020 --> 00:27:32,580
that's something that that a computer

708
00:27:32,580 --> 00:27:35,820
can find very good very well for you

709
00:27:35,820 --> 00:27:37,980
a posture here really tells you the

710
00:27:37,980 --> 00:27:39,840
areas that have that most their most

711
00:27:39,840 --> 00:27:43,440
risk for Bola runtime can detect Ola and

712
00:27:43,440 --> 00:27:45,240
if you have a decent bit of testing it

713
00:27:45,240 --> 00:27:47,460
can find that whole hopefully very early

714
00:27:47,460 --> 00:27:49,320
in the production in pre-broad whatever

715
00:27:49,320 --> 00:27:51,720
whatever you call your early not quite

716
00:27:51,720 --> 00:27:53,940
to production yet that's where you'd

717
00:27:53,940 --> 00:27:56,779
like to find these things

718
00:27:58,200 --> 00:28:00,360
um broken user authentication this is

719
00:28:00,360 --> 00:28:02,279
where you have the ability to log in

720
00:28:02,279 --> 00:28:04,380
basically username and password into an

721
00:28:04,380 --> 00:28:06,779
API to to generally get a token back

722
00:28:06,779 --> 00:28:08,880
that you then use to do the rest of your

723
00:28:08,880 --> 00:28:10,080
requests

724
00:28:10,080 --> 00:28:12,120
as an attacker I can Brute Force

725
00:28:12,120 --> 00:28:15,179
credentials I can do password spring

726
00:28:15,179 --> 00:28:17,100
um apis don't have the nice things that

727
00:28:17,100 --> 00:28:20,340
browser has like MFA or captcha

728
00:28:20,340 --> 00:28:22,559
this can also be the places where

729
00:28:22,559 --> 00:28:25,140
there's no uh anti-automation on

730
00:28:25,140 --> 00:28:27,299
password resets particularly on API

731
00:28:27,299 --> 00:28:30,900
backed uh web apps

732
00:28:30,900 --> 00:28:32,880
you can do the the whole thing of of

733
00:28:32,880 --> 00:28:35,940
playing around with um base64 and and

734
00:28:35,940 --> 00:28:38,220
sometimes uh they'll base 64 things and

735
00:28:38,220 --> 00:28:40,320
thinks it helps it doesn't really or

736
00:28:40,320 --> 00:28:42,179
there can be issues with the tokens

737
00:28:42,179 --> 00:28:43,980
themselves either they generally have

738
00:28:43,980 --> 00:28:48,179
low entropy or there may be some JWT a

739
00:28:48,179 --> 00:28:51,299
jot specific weaknesses like a the none

740
00:28:51,299 --> 00:28:53,340
algorithm attack if you don't know that

741
00:28:53,340 --> 00:28:54,720
do a little bit of reading that's a

742
00:28:54,720 --> 00:28:57,480
that's an amazingly hilarious thing

743
00:28:57,480 --> 00:28:59,520
um you can have weak

744
00:28:59,520 --> 00:29:02,520
uh passwords for jwts you've got people

745
00:29:02,520 --> 00:29:03,900
to crack them there's this nice tool

746
00:29:03,900 --> 00:29:05,820
called JWT tool that'll do some of that

747
00:29:05,820 --> 00:29:07,020
for you but

748
00:29:07,020 --> 00:29:09,480
generally speaking this is uh an

749
00:29:09,480 --> 00:29:11,480
attacker trying to get

750
00:29:11,480 --> 00:29:14,400
authentication bypass so they can get a

751
00:29:14,400 --> 00:29:16,140
valid token to then make requests as

752
00:29:16,140 --> 00:29:18,799
that user

753
00:29:19,140 --> 00:29:20,760
and if they are brute forcing

754
00:29:20,760 --> 00:29:22,200
credentials or doing password spring

755
00:29:22,200 --> 00:29:24,240
this is going to be very noisy so for a

756
00:29:24,240 --> 00:29:27,059
Defender it's not hard to see

757
00:29:27,059 --> 00:29:29,880
um password Springs noisy if crypto is

758
00:29:29,880 --> 00:29:31,740
used incorrectly you can usually find

759
00:29:31,740 --> 00:29:33,600
that more statically than dynamically

760
00:29:33,600 --> 00:29:36,360
honestly although decent API runtime

761
00:29:36,360 --> 00:29:38,159
tools will see that and tell you that

762
00:29:38,159 --> 00:29:40,679
you have weak Secrets there's a great

763
00:29:40,679 --> 00:29:44,460
RFC the JWT best practices RFC if you

764
00:29:44,460 --> 00:29:46,320
are using jots I would recommend looking

765
00:29:46,320 --> 00:29:48,419
at that

766
00:29:48,419 --> 00:29:50,700
um and then some companies have actually

767
00:29:50,700 --> 00:29:53,279
removed often from the API altogether

768
00:29:53,279 --> 00:29:55,860
because they get so many so much better

769
00:29:55,860 --> 00:29:57,840
protection from a traditional web app

770
00:29:57,840 --> 00:30:00,000
they make the human log into a web app

771
00:30:00,000 --> 00:30:02,279
get a token and then add that to

772
00:30:02,279 --> 00:30:05,279
whatever their API automation is

773
00:30:05,279 --> 00:30:07,500
uh GitHub does that actually now

774
00:30:07,500 --> 00:30:09,360
currently which is pretty interesting it

775
00:30:09,360 --> 00:30:11,520
didn't before

776
00:30:11,520 --> 00:30:13,679
um posture this is where you can

777
00:30:13,679 --> 00:30:15,899
identify any kind of offend that exists

778
00:30:15,899 --> 00:30:17,880
in your API so it's very useful to sort

779
00:30:17,880 --> 00:30:19,740
of focus on removing this problem from

780
00:30:19,740 --> 00:30:21,059
your plate

781
00:30:21,059 --> 00:30:23,340
uh obviously brute forcing passwords

782
00:30:23,340 --> 00:30:24,899
bring those things are noisy yeah

783
00:30:24,899 --> 00:30:27,539
manipulating jwts is noisy if you have

784
00:30:27,539 --> 00:30:29,520
deep inspection those are things that

785
00:30:29,520 --> 00:30:31,320
runtime can help you with

786
00:30:31,320 --> 00:30:33,240
and testing can identify those poor

787
00:30:33,240 --> 00:30:36,179
practices with authentication before you

788
00:30:36,179 --> 00:30:39,000
push stuff out to prod

789
00:30:39,000 --> 00:30:42,000
excessive data exposure

790
00:30:42,000 --> 00:30:44,460
this is where you have apis that are two

791
00:30:44,460 --> 00:30:46,440
verbose and their responses this is

792
00:30:46,440 --> 00:30:48,720
generally caused by a developer using a

793
00:30:48,720 --> 00:30:51,720
like a two Json method right that takes

794
00:30:51,720 --> 00:30:53,940
a data structure jsonifies it and then

795
00:30:53,940 --> 00:30:56,399
they just add it as the response to an

796
00:30:56,399 --> 00:30:57,600
API call

797
00:30:57,600 --> 00:30:59,880
generally that'll be the full data model

798
00:30:59,880 --> 00:31:02,460
and it won't be just a subset and in

799
00:31:02,460 --> 00:31:04,559
that case they rely on the clients to

800
00:31:04,559 --> 00:31:07,380
sort of filter or just ignore the extra

801
00:31:07,380 --> 00:31:09,539
data that they send and if you're only

802
00:31:09,539 --> 00:31:11,580
using your client say your mobile app

803
00:31:11,580 --> 00:31:14,820
that's great in theory because the

804
00:31:14,820 --> 00:31:16,620
mobile app will ignore that but as an

805
00:31:16,620 --> 00:31:18,299
attacker I don't have to use the mobile

806
00:31:18,299 --> 00:31:19,860
app I just have to use something that

807
00:31:19,860 --> 00:31:22,860
talks HTTP and I won't ignore that extra

808
00:31:22,860 --> 00:31:25,620
data particularly if it's interesting

809
00:31:25,620 --> 00:31:27,600
so from an attacker's perspective you

810
00:31:27,600 --> 00:31:29,100
want to look at things that generally

811
00:31:29,100 --> 00:31:31,260
will have a lot of data around them this

812
00:31:31,260 --> 00:31:34,320
is like a profile page or a an inventory

813
00:31:34,320 --> 00:31:37,320
page or if there's some kind of linked

814
00:31:37,320 --> 00:31:41,159
like you know friends kind of users

815
00:31:41,159 --> 00:31:42,659
um you can make guesses to where there

816
00:31:42,659 --> 00:31:44,460
might be internal metadata where this is

817
00:31:44,460 --> 00:31:47,220
a different like a role may be implicit

818
00:31:47,220 --> 00:31:49,799
but not shown in a profile you might be

819
00:31:49,799 --> 00:31:52,200
able to get that role out

820
00:31:52,200 --> 00:31:55,020
um as excessive data exposure

821
00:31:55,020 --> 00:31:57,000
and this can be very time consuming if

822
00:31:57,000 --> 00:31:58,620
you're looking at a big API there's a

823
00:31:58,620 --> 00:32:00,720
health care API I looked at that had

824
00:32:00,720 --> 00:32:03,480
like 435 methods

825
00:32:03,480 --> 00:32:05,880
or endpoints I should say

826
00:32:05,880 --> 00:32:07,799
um and then you add the HTTP methods on

827
00:32:07,799 --> 00:32:09,840
top of that they had lots to do there so

828
00:32:09,840 --> 00:32:12,539
this can also kind of be a bit of a Time

829
00:32:12,539 --> 00:32:14,399
sink

830
00:32:14,399 --> 00:32:17,340
now from a Defender unfortunately if you

831
00:32:17,340 --> 00:32:20,520
have excessive data exposure my request

832
00:32:20,520 --> 00:32:22,320
is just a legit request you're just

833
00:32:22,320 --> 00:32:23,880
sending back more data than you should

834
00:32:23,880 --> 00:32:27,720
so this will look like normal traffic

835
00:32:27,720 --> 00:32:30,120
um and this is a place where SAS or

836
00:32:30,120 --> 00:32:32,520
static analysis can help you find or

837
00:32:32,520 --> 00:32:35,760
like uh sem grip can help you find those

838
00:32:35,760 --> 00:32:37,799
two jsons or whatever it is for your

839
00:32:37,799 --> 00:32:39,899
language right where you're having

840
00:32:39,899 --> 00:32:42,059
developers directly dump a data model

841
00:32:42,059 --> 00:32:45,299
out to the response

842
00:32:45,299 --> 00:32:46,620
um and this is where you need to find

843
00:32:46,620 --> 00:32:48,360
out if your clients are relying on

844
00:32:48,360 --> 00:32:49,799
filtering up data because that's a

845
00:32:49,799 --> 00:32:52,440
that's a warning sign if nothing else

846
00:32:52,440 --> 00:32:54,360
and in the better designs you actually

847
00:32:54,360 --> 00:32:57,179
have separate data objects for internal

848
00:32:57,179 --> 00:32:59,100
storage versus what goes out over the

849
00:32:59,100 --> 00:33:03,240
API so maybe you have 15 elements in the

850
00:33:03,240 --> 00:33:06,480
internal representation of that data but

851
00:33:06,480 --> 00:33:08,880
the API only gets six of those and you

852
00:33:08,880 --> 00:33:11,520
have two different data objects in the

853
00:33:11,520 --> 00:33:13,080
language whatever programming language

854
00:33:13,080 --> 00:33:15,299
you're using so that it I have to

855
00:33:15,299 --> 00:33:17,700
consciously as a developer add a new

856
00:33:17,700 --> 00:33:21,659
data item to that API only data object

857
00:33:21,659 --> 00:33:24,120
and that I can safely use those two Json

858
00:33:24,120 --> 00:33:26,159
things because I've done that

859
00:33:26,159 --> 00:33:29,399
segregation of data explicitly when

860
00:33:29,399 --> 00:33:32,580
creating the API data object

861
00:33:32,580 --> 00:33:34,559
a posture can show you where sensitive

862
00:33:34,559 --> 00:33:36,120
data is

863
00:33:36,120 --> 00:33:37,679
um to to know that those are the sort of

864
00:33:37,679 --> 00:33:39,600
spooky Parts potentially shows you large

865
00:33:39,600 --> 00:33:42,059
data responses

866
00:33:42,059 --> 00:33:44,039
um runtime can show you large responses

867
00:33:44,039 --> 00:33:45,899
but you may have those on purpose so

868
00:33:45,899 --> 00:33:48,419
that may or may not be useful to you but

869
00:33:48,419 --> 00:33:50,580
it can definitely detect

870
00:33:50,580 --> 00:33:53,580
the what happens with data exposure from

871
00:33:53,580 --> 00:33:55,380
an attacker perspective is I'll find it

872
00:33:55,380 --> 00:33:57,720
for one user and I'll try to get it from

873
00:33:57,720 --> 00:33:59,460
the rest of them lots of telecoms have

874
00:33:59,460 --> 00:34:00,720
had this problem or they had a

875
00:34:00,720 --> 00:34:03,120
problematic API and I figure out if I'm

876
00:34:03,120 --> 00:34:04,559
going to call it once I can get one

877
00:34:04,559 --> 00:34:07,559
person's information but if I call it 10

878
00:34:07,559 --> 00:34:09,179
000 times or it can help you a million

879
00:34:09,179 --> 00:34:11,159
times I can get a million people's

880
00:34:11,159 --> 00:34:12,540
information so

881
00:34:12,540 --> 00:34:14,699
where this will generally show up for

882
00:34:14,699 --> 00:34:16,918
runtime is I might be able to get the

883
00:34:16,918 --> 00:34:19,918
first requests out and steal that data

884
00:34:19,918 --> 00:34:22,379
but as I try to steal data in Mass it's

885
00:34:22,379 --> 00:34:24,418
really going to show up for runtime so

886
00:34:24,418 --> 00:34:26,760
runtime can definitely help you here and

887
00:34:26,760 --> 00:34:28,800
then testing can find those verbose

888
00:34:28,800 --> 00:34:33,020
responses early in your pre-prod cycle

889
00:34:33,199 --> 00:34:36,300
lack of rate limiting or resource lack

890
00:34:36,300 --> 00:34:37,859
of resource and rate limiting this is

891
00:34:37,859 --> 00:34:40,139
where you don't because apis are meant

892
00:34:40,139 --> 00:34:42,060
to respond quickly to multiple requests

893
00:34:42,060 --> 00:34:43,800
you kind of need to right limit them so

894
00:34:43,800 --> 00:34:45,839
they don't fall over also does that you

895
00:34:45,839 --> 00:34:47,820
can if you're having an API that's used

896
00:34:47,820 --> 00:34:50,219
like say strike by multiple clients you

897
00:34:50,219 --> 00:34:51,899
don't want one client to sort of eat up

898
00:34:51,899 --> 00:34:54,139
all of your resources

899
00:34:54,139 --> 00:34:56,820
so as an attacker this can be fun if you

900
00:34:56,820 --> 00:34:58,560
have a method

901
00:34:58,560 --> 00:35:01,080
or an API call that lets you add items

902
00:35:01,080 --> 00:35:03,420
of some sort like I don't know my

903
00:35:03,420 --> 00:35:06,720
favorite songs addicts several million

904
00:35:06,720 --> 00:35:08,520
songs and then ask for your list of

905
00:35:08,520 --> 00:35:10,800
songs and if they don't have pagination

906
00:35:10,800 --> 00:35:12,900
this is a great way to have a sort of an

907
00:35:12,900 --> 00:35:15,660
application Level dos so sort of lack of

908
00:35:15,660 --> 00:35:17,760
pagination it's a giant clue this is

909
00:35:17,760 --> 00:35:19,140
getting much better but in the early

910
00:35:19,140 --> 00:35:21,960
days I found lots of those

911
00:35:21,960 --> 00:35:24,079
um

912
00:35:24,359 --> 00:35:26,579
the fuzzing and brute force can find

913
00:35:26,579 --> 00:35:28,020
some of these

914
00:35:28,020 --> 00:35:29,760
this is where you're just going to do

915
00:35:29,760 --> 00:35:31,500
interesting things like play around with

916
00:35:31,500 --> 00:35:34,440
the headers or the you do

917
00:35:34,440 --> 00:35:36,960
um different IP requests or just

918
00:35:36,960 --> 00:35:39,240
anything to try to get around the the um

919
00:35:39,240 --> 00:35:41,880
rate limiting you can play null

920
00:35:41,880 --> 00:35:43,740
Terminator K switching games anything

921
00:35:43,740 --> 00:35:46,440
just sort of confuse an intervening

922
00:35:46,440 --> 00:35:47,940
device that's right limiting you if

923
00:35:47,940 --> 00:35:49,800
that's an API Gateway a wife or some

924
00:35:49,800 --> 00:35:52,079
other network device

925
00:35:52,079 --> 00:35:53,280
um

926
00:35:53,280 --> 00:35:55,260
and I have found cases where they did

927
00:35:55,260 --> 00:35:57,300
have rate limiting but it was set so

928
00:35:57,300 --> 00:35:59,520
high that I could already start to

929
00:35:59,520 --> 00:36:01,200
impact their performance before the rate

930
00:36:01,200 --> 00:36:04,140
limiting kicked in so as an attacker

931
00:36:04,140 --> 00:36:05,700
even if you find it that may not

932
00:36:05,700 --> 00:36:09,800
necessarily mean the API is safe

933
00:36:09,800 --> 00:36:13,079
from a depender perspective

934
00:36:13,079 --> 00:36:14,820
most of these requests going to look

935
00:36:14,820 --> 00:36:16,619
normal they might have

936
00:36:16,619 --> 00:36:19,440
um larger responses I've done sort of

937
00:36:19,440 --> 00:36:22,980
stupid API tricks by there was one XML

938
00:36:22,980 --> 00:36:25,980
API where I injected 32 bags of space in

939
00:36:25,980 --> 00:36:28,980
between two x XML elements and sent it

940
00:36:28,980 --> 00:36:32,099
to the API and it fell over so that

941
00:36:32,099 --> 00:36:34,500
would obviously show a very very easily

942
00:36:34,500 --> 00:36:36,780
in runtime

943
00:36:36,780 --> 00:36:38,940
also runtime can see a lot of unusual

944
00:36:38,940 --> 00:36:40,859
headers or weird encoders or null

945
00:36:40,859 --> 00:36:43,380
Terminators that you don't expect so a

946
00:36:43,380 --> 00:36:45,660
lot of the the techniques you do to try

947
00:36:45,660 --> 00:36:48,960
to get around rate limiting end up not

948
00:36:48,960 --> 00:36:50,820
looking like normal requests and

949
00:36:50,820 --> 00:36:52,560
therefore can be spotted with runtime

950
00:36:52,560 --> 00:36:54,960
protections

951
00:36:54,960 --> 00:36:56,760
um and if you have observability decent

952
00:36:56,760 --> 00:36:58,680
monitoring you can see usage spikes a

953
00:36:58,680 --> 00:37:00,480
lot of this I'm testing this I'm going

954
00:37:00,480 --> 00:37:03,060
to be poking things that are CPU or Ram

955
00:37:03,060 --> 00:37:05,820
intensive and this will show up so as a

956
00:37:05,820 --> 00:37:07,800
Defender you can see these odd spikes

957
00:37:07,800 --> 00:37:09,420
and if you're quick enough Nimble enough

958
00:37:09,420 --> 00:37:10,920
you can actually take action against

959
00:37:10,920 --> 00:37:12,540
them

960
00:37:12,540 --> 00:37:13,740
um so posture will help you understand

961
00:37:13,740 --> 00:37:15,839
what things need limits and where it

962
00:37:15,839 --> 00:37:17,640
makes sense to put in limits

963
00:37:17,640 --> 00:37:20,220
a runtime can definitely see the Oddball

964
00:37:20,220 --> 00:37:22,980
traffic that is trying to bypass or get

965
00:37:22,980 --> 00:37:26,400
around any kind of limiting device

966
00:37:26,400 --> 00:37:28,020
um and then fuzzing can sometimes find

967
00:37:28,020 --> 00:37:30,420
data issues these rate limiting and

968
00:37:30,420 --> 00:37:32,520
resource issues early particularly for

969
00:37:32,520 --> 00:37:35,599
app level doses

970
00:37:36,060 --> 00:37:38,880
uh broken function level authorization

971
00:37:38,880 --> 00:37:41,040
this is where you have

972
00:37:41,040 --> 00:37:44,700
um multiple groups or roles for an API

973
00:37:44,700 --> 00:37:47,780
and I can make a a

974
00:37:47,780 --> 00:37:51,420
legitimately tokened request for one

975
00:37:51,420 --> 00:37:54,000
role to another roles method and it'll

976
00:37:54,000 --> 00:37:56,040
it's allowed that's broken function

977
00:37:56,040 --> 00:37:58,079
level authorization

978
00:37:58,079 --> 00:38:00,540
so as an attacker I want to find apis

979
00:38:00,540 --> 00:38:03,380
that have multiple roles or groups

980
00:38:03,380 --> 00:38:05,880
sometimes I think this is poor design

981
00:38:05,880 --> 00:38:07,800
but you will find that backplane or

982
00:38:07,800 --> 00:38:10,140
admin functions are also exposed in the

983
00:38:10,140 --> 00:38:12,119
same API that sort of normal user

984
00:38:12,119 --> 00:38:13,859
functions are exposed at

985
00:38:13,859 --> 00:38:15,720
so those are great places from an

986
00:38:15,720 --> 00:38:16,980
attacker

987
00:38:16,980 --> 00:38:18,839
and then there are I've also seen

988
00:38:18,839 --> 00:38:21,900
instances where the documentation will

989
00:38:21,900 --> 00:38:24,720
not lists kind of dangerous or

990
00:38:24,720 --> 00:38:27,420
state-changing methods like delete put

991
00:38:27,420 --> 00:38:29,579
post patch

992
00:38:29,579 --> 00:38:32,460
um but the API will actually accept

993
00:38:32,460 --> 00:38:34,619
those requests so if you're reading the

994
00:38:34,619 --> 00:38:36,720
docs and only doing the legit thing you

995
00:38:36,720 --> 00:38:39,060
don't try them but there's nothing to

996
00:38:39,060 --> 00:38:40,619
say you can't throw a delete to a

997
00:38:40,619 --> 00:38:42,660
resource even if it's not in the dots

998
00:38:42,660 --> 00:38:45,440
and see what happens

999
00:38:45,660 --> 00:38:48,660
and to find this out usually create uh

1000
00:38:48,660 --> 00:38:52,380
items within one roll and try to access

1001
00:38:52,380 --> 00:38:54,000
those from a separate role and this is

1002
00:38:54,000 --> 00:38:55,460
very context

1003
00:38:55,460 --> 00:38:58,079
context dependent on the API you're

1004
00:38:58,079 --> 00:39:00,240
testing

1005
00:39:00,240 --> 00:39:01,980
um you can use brute force and some

1006
00:39:01,980 --> 00:39:03,720
other techniques to try to find those

1007
00:39:03,720 --> 00:39:06,720
back plane or admin type operations

1008
00:39:06,720 --> 00:39:08,280
and you can play around with headers

1009
00:39:08,280 --> 00:39:10,859
request data Etc to try to to try to

1010
00:39:10,859 --> 00:39:14,160
originate as a trusted IP

1011
00:39:14,160 --> 00:39:16,500
usually by header manipulation like

1012
00:39:16,500 --> 00:39:19,200
exported four Etc

1013
00:39:19,200 --> 00:39:21,420
um to maybe get access to those admin

1014
00:39:21,420 --> 00:39:23,280
functions

1015
00:39:23,280 --> 00:39:26,220
so from a Defender this is obviously uh

1016
00:39:26,220 --> 00:39:27,960
critical for things that have two or

1017
00:39:27,960 --> 00:39:30,000
more roles if you have a single class of

1018
00:39:30,000 --> 00:39:32,820
user across your API then you sort of

1019
00:39:32,820 --> 00:39:34,920
can't have this problem

1020
00:39:34,920 --> 00:39:35,940
um

1021
00:39:35,940 --> 00:39:38,460
and you will see lots of Errors when I'm

1022
00:39:38,460 --> 00:39:40,200
trying to discover these issues because

1023
00:39:40,200 --> 00:39:42,780
I'll I'll send a post request to

1024
00:39:42,780 --> 00:39:44,760
something that doesn't support post and

1025
00:39:44,760 --> 00:39:46,500
you'll get an error right so that can be

1026
00:39:46,500 --> 00:39:48,960
very useful

1027
00:39:48,960 --> 00:39:51,720
um you can also see the same client do

1028
00:39:51,720 --> 00:39:53,579
multiple roles within a small period of

1029
00:39:53,579 --> 00:39:55,500
time this is another great way place

1030
00:39:55,500 --> 00:39:59,579
where ml or AI kind of automation from

1031
00:39:59,579 --> 00:40:02,460
runtime can help you find a tax

1032
00:40:02,460 --> 00:40:05,040
failures if you get failures or requests

1033
00:40:05,040 --> 00:40:07,800
either failures to the back plane or

1034
00:40:07,800 --> 00:40:09,839
failures to requests that look like

1035
00:40:09,839 --> 00:40:11,820
backplane paths that's another great

1036
00:40:11,820 --> 00:40:13,920
sign that somebody is being naughty with

1037
00:40:13,920 --> 00:40:16,020
your API and then if you see funny

1038
00:40:16,020 --> 00:40:18,060
requests headers or bodies where

1039
00:40:18,060 --> 00:40:19,500
someone's playing around to try to

1040
00:40:19,500 --> 00:40:20,880
bypass

1041
00:40:20,880 --> 00:40:22,920
or to try to get around

1042
00:40:22,920 --> 00:40:25,140
um the level of function level

1043
00:40:25,140 --> 00:40:27,839
authorization that's another great sign

1044
00:40:27,839 --> 00:40:29,579
so posture can definitely help you

1045
00:40:29,579 --> 00:40:31,200
determine apis with groups or different

1046
00:40:31,200 --> 00:40:32,760
privilege levels so you know where to

1047
00:40:32,760 --> 00:40:34,260
focus your efforts to try to get rid of

1048
00:40:34,260 --> 00:40:37,760
this particular category of problem

1049
00:40:37,800 --> 00:40:39,839
the unusual and failing requests can

1050
00:40:39,839 --> 00:40:42,300
easily be seen by run time or changes in

1051
00:40:42,300 --> 00:40:44,400
a role with with a single client within

1052
00:40:44,400 --> 00:40:46,020
a short period of time is atypical

1053
00:40:46,020 --> 00:40:48,180
traffic generally speaking for most apis

1054
00:40:48,180 --> 00:40:50,700
so that's very detectable

1055
00:40:50,700 --> 00:40:52,440
and then obviously testing you can run

1056
00:40:52,440 --> 00:40:54,599
this kind of testing early in pre-prod

1057
00:40:54,599 --> 00:40:56,220
to find those issues and hopefully not

1058
00:40:56,220 --> 00:40:59,220
let them go out to prod

1059
00:40:59,220 --> 00:41:01,320
so Mass assignment this is where I'm

1060
00:41:01,320 --> 00:41:04,680
sending data data payload into an API

1061
00:41:04,680 --> 00:41:07,260
and I'm adding additional data in there

1062
00:41:07,260 --> 00:41:09,599
and if I have the the opposite of the

1063
00:41:09,599 --> 00:41:12,180
two Json but I read in Json and I turn

1064
00:41:12,180 --> 00:41:15,660
it into a data model automatically I can

1065
00:41:15,660 --> 00:41:18,720
then change data values that aren't

1066
00:41:18,720 --> 00:41:22,200
supposed to be exposed by your API

1067
00:41:22,200 --> 00:41:25,020
and so from an attacker's perspective

1068
00:41:25,020 --> 00:41:27,359
look at areas where it feels like there

1069
00:41:27,359 --> 00:41:29,280
should be more data this is almost the

1070
00:41:29,280 --> 00:41:32,579
flip side of our previous uh

1071
00:41:32,579 --> 00:41:35,099
previous issue

1072
00:41:35,099 --> 00:41:36,720
and you can find issues where there's

1073
00:41:36,720 --> 00:41:38,579
differences and responses and requests

1074
00:41:38,579 --> 00:41:40,740
for different privileged users right if

1075
00:41:40,740 --> 00:41:42,780
you notice as an admin user I have an

1076
00:41:42,780 --> 00:41:44,700
admin equals true and somewhere in your

1077
00:41:44,700 --> 00:41:46,859
Json We'll add that to a normal user and

1078
00:41:46,859 --> 00:41:48,599
see what happens right a post to that

1079
00:41:48,599 --> 00:41:50,520
normal user

1080
00:41:50,520 --> 00:41:52,320
this is where you can guess in Brute

1081
00:41:52,320 --> 00:41:54,300
Force values a lot of apis will simply

1082
00:41:54,300 --> 00:41:56,700
ignore additional data and just Dev

1083
00:41:56,700 --> 00:41:59,099
Nolan so there's nothing to say you

1084
00:41:59,099 --> 00:42:02,940
can't add 10 possible admin issue admin

1085
00:42:02,940 --> 00:42:06,839
ish key fields to a request and just see

1086
00:42:06,839 --> 00:42:08,520
what happens and maybe you'll get lucky

1087
00:42:08,520 --> 00:42:10,740
on one out of those 12 you added right

1088
00:42:10,740 --> 00:42:13,380
it can't hurt sometimes you'll get error

1089
00:42:13,380 --> 00:42:15,000
messages and other helpful information

1090
00:42:15,000 --> 00:42:16,859
when you're trying to to sort these out

1091
00:42:16,859 --> 00:42:19,140
from the API so thank you API developers

1092
00:42:19,140 --> 00:42:22,140
buzzing can sometimes find these and if

1093
00:42:22,140 --> 00:42:25,320
you do have broken function level off

1094
00:42:25,320 --> 00:42:27,359
authorization

1095
00:42:27,359 --> 00:42:29,339
this can get really interesting because

1096
00:42:29,339 --> 00:42:31,440
then I can change

1097
00:42:31,440 --> 00:42:33,720
email or some other like like

1098
00:42:33,720 --> 00:42:35,400
particularly like a password reset email

1099
00:42:35,400 --> 00:42:37,320
or something sensitive

1100
00:42:37,320 --> 00:42:40,140
about another user from my existing

1101
00:42:40,140 --> 00:42:42,420
users account and this might allow me to

1102
00:42:42,420 --> 00:42:44,400
say compromise One account and then go

1103
00:42:44,400 --> 00:42:46,440
and compromise multiple others so this

1104
00:42:46,440 --> 00:42:48,240
can be very powerful if it's combined

1105
00:42:48,240 --> 00:42:49,920
with that broken function level

1106
00:42:49,920 --> 00:42:52,579
authorization

1107
00:42:52,980 --> 00:42:55,500
so if you have deep inspection

1108
00:42:55,500 --> 00:42:58,440
of your API traffic you can see these

1109
00:42:58,440 --> 00:43:00,119
additional Fields right because I know

1110
00:43:00,119 --> 00:43:02,420
that this API request on every other

1111
00:43:02,420 --> 00:43:05,220
normal user has 10 fields and suddenly

1112
00:43:05,220 --> 00:43:08,280
there's 27. that's that's very easy for

1113
00:43:08,280 --> 00:43:10,400
runtime to find that and

1114
00:43:10,400 --> 00:43:13,020
alert you to that an anomaly

1115
00:43:13,020 --> 00:43:14,940
you'll see a large number of failed or

1116
00:43:14,940 --> 00:43:16,859
invalid requests depending on how your

1117
00:43:16,859 --> 00:43:19,380
API will handle that additional data

1118
00:43:19,380 --> 00:43:20,339
added

1119
00:43:20,339 --> 00:43:24,060
the API sizes will increase you'll see

1120
00:43:24,060 --> 00:43:26,119
um

1121
00:43:26,480 --> 00:43:29,579
apis with different roles oh that's

1122
00:43:29,579 --> 00:43:30,900
you need to watch this board

1123
00:43:30,900 --> 00:43:32,520
particularly for apis that have

1124
00:43:32,520 --> 00:43:35,339
different severities it's going to

1125
00:43:35,339 --> 00:43:36,660
increase the severity if you have

1126
00:43:36,660 --> 00:43:38,040
different rules or privileges let me put

1127
00:43:38,040 --> 00:43:39,240
it that way in other words if you're

1128
00:43:39,240 --> 00:43:40,740
subject to Broken function level

1129
00:43:40,740 --> 00:43:42,119
authorization

1130
00:43:42,119 --> 00:43:45,359
or you have that multiple role in the

1131
00:43:45,359 --> 00:43:48,599
API that you're looking at that makes

1132
00:43:48,599 --> 00:43:52,079
this even more of a problem if it exists

1133
00:43:52,079 --> 00:43:54,720
and then posture can focus on rules with

1134
00:43:54,720 --> 00:43:56,880
sensitive data or

1135
00:43:56,880 --> 00:43:58,680
um multiple roles

1136
00:43:58,680 --> 00:44:01,440
runtime you can see a lot of this if you

1137
00:44:01,440 --> 00:44:03,540
have a larger request add fields that

1138
00:44:03,540 --> 00:44:05,339
don't typically exist or all that's

1139
00:44:05,339 --> 00:44:07,140
going to show up fairly broadly or

1140
00:44:07,140 --> 00:44:10,020
easily for runtime

1141
00:44:10,020 --> 00:44:13,800
and then testing can show the additional

1142
00:44:13,800 --> 00:44:15,300
um

1143
00:44:15,300 --> 00:44:18,420
fields very early in Discovery and

1144
00:44:18,420 --> 00:44:20,770
hopefully get that done in pre-broad

1145
00:44:20,770 --> 00:44:24,359
[Music]

1146
00:44:24,359 --> 00:44:26,220
security misconfiguration this is just

1147
00:44:26,220 --> 00:44:29,819
basic stuff TLS you have headers with X

1148
00:44:29,819 --> 00:44:31,920
powered by that leak information about

1149
00:44:31,920 --> 00:44:33,480
your API

1150
00:44:33,480 --> 00:44:36,060
I have default creds if it's a like say

1151
00:44:36,060 --> 00:44:37,440
an open source project or something

1152
00:44:37,440 --> 00:44:39,480
where the default credits are known you

1153
00:44:39,480 --> 00:44:41,520
might be able to upload an icar file if

1154
00:44:41,520 --> 00:44:44,040
it takes in files icar is a test virus

1155
00:44:44,040 --> 00:44:46,500
file this is where recounted Discovery

1156
00:44:46,500 --> 00:44:48,300
can kind of give you an idea

1157
00:44:48,300 --> 00:44:50,400
for most error messages or another issue

1158
00:44:50,400 --> 00:44:51,960
that you can find as an attacker that

1159
00:44:51,960 --> 00:44:53,160
can kind of help you target other

1160
00:44:53,160 --> 00:44:54,960
attacks

1161
00:44:54,960 --> 00:44:57,000
um there may be misconfigured things

1162
00:44:57,000 --> 00:44:59,579
like Django has a debug mode that is

1163
00:44:59,579 --> 00:45:01,740
very verbose if there are issues and if

1164
00:45:01,740 --> 00:45:03,300
I can trigger an issue and get a ton of

1165
00:45:03,300 --> 00:45:04,740
information about say that Django

1166
00:45:04,740 --> 00:45:06,900
install

1167
00:45:06,900 --> 00:45:08,760
um you can find things like intermediate

1168
00:45:08,760 --> 00:45:10,980
devices like API gateways Etc they

1169
00:45:10,980 --> 00:45:12,359
usually add

1170
00:45:12,359 --> 00:45:15,060
um headers somewhere

1171
00:45:15,060 --> 00:45:17,579
and then you can play games like doing X

1172
00:45:17,579 --> 00:45:19,740
remote Adder to try to call internal

1173
00:45:19,740 --> 00:45:21,119
functions

1174
00:45:21,119 --> 00:45:24,000
if they only trust the headers and don't

1175
00:45:24,000 --> 00:45:25,740
actually look at the truly true

1176
00:45:25,740 --> 00:45:26,910
originating IP

1177
00:45:26,910 --> 00:45:29,520
[Music]

1178
00:45:29,520 --> 00:45:31,500
and from a Defender this is kind of just

1179
00:45:31,500 --> 00:45:34,980
to be blunt running like nessus or the

1180
00:45:34,980 --> 00:45:36,839
whatever kind of network traditional

1181
00:45:36,839 --> 00:45:38,520
Network scanner can find a lot of these

1182
00:45:38,520 --> 00:45:40,920
basic mistakes

1183
00:45:40,920 --> 00:45:42,900
um also passive traffic monitoring can

1184
00:45:42,900 --> 00:45:44,280
find a lot of these things like weird

1185
00:45:44,280 --> 00:45:47,819
header issues API Gateway bypass if I

1186
00:45:47,819 --> 00:45:49,079
have an internal

1187
00:45:49,079 --> 00:45:51,599
um an internal API getting public IPS

1188
00:45:51,599 --> 00:45:53,220
hitting it all those things are very

1189
00:45:53,220 --> 00:45:54,900
easy just just by watching the traffic

1190
00:45:54,900 --> 00:45:56,880
to see

1191
00:45:56,880 --> 00:45:58,859
um if you have clients that have lots of

1192
00:45:58,859 --> 00:46:00,720
erroring or malformed requests that's

1193
00:46:00,720 --> 00:46:03,200
another sort of indication

1194
00:46:03,200 --> 00:46:05,520
posture can show you weak configurations

1195
00:46:05,520 --> 00:46:08,099
or API bypass particularly if you have

1196
00:46:08,099 --> 00:46:10,200
things like the data classified to where

1197
00:46:10,200 --> 00:46:12,480
like I said this API should only receive

1198
00:46:12,480 --> 00:46:13,920
internal requests and suddenly I'm

1199
00:46:13,920 --> 00:46:16,380
getting public IPS

1200
00:46:16,380 --> 00:46:19,800
um and I kind of put passive uh passive

1201
00:46:19,800 --> 00:46:21,599
traffic monitoring under posture

1202
00:46:21,599 --> 00:46:24,060
although it might be done by a runtime

1203
00:46:24,060 --> 00:46:27,540
piece of uh Tech depending on what you

1204
00:46:27,540 --> 00:46:29,339
buy Etc

1205
00:46:29,339 --> 00:46:32,160
um runtime unexpected traffic multiple

1206
00:46:32,160 --> 00:46:33,540
errors these things kind of show up

1207
00:46:33,540 --> 00:46:37,140
fairly easily malformed responses

1208
00:46:37,140 --> 00:46:39,960
and then um testing it just this is just

1209
00:46:39,960 --> 00:46:42,000
the basics you could do fuzzing for API

1210
00:46:42,000 --> 00:46:43,260
specific things or hopefully you're

1211
00:46:43,260 --> 00:46:45,240
running some kind of network scanner to

1212
00:46:45,240 --> 00:46:48,078
find these issues

1213
00:46:48,660 --> 00:46:50,280
um injection this is traditional

1214
00:46:50,280 --> 00:46:51,480
injection

1215
00:46:51,480 --> 00:46:53,280
um in any kind of places and tokens

1216
00:46:53,280 --> 00:46:55,940
headers any of the body or the request

1217
00:46:55,940 --> 00:46:58,140
Recon can kind of give you an idea where

1218
00:46:58,140 --> 00:47:01,079
it might be interesting to do injections

1219
00:47:01,079 --> 00:47:03,300
um there's tons of different great

1220
00:47:03,300 --> 00:47:05,160
um places to find injections there's

1221
00:47:05,160 --> 00:47:07,200
loads of fuzzing lists

1222
00:47:07,200 --> 00:47:08,400
um you can go to the Lost testing guide

1223
00:47:08,400 --> 00:47:10,200
will give you a lot of these there's a

1224
00:47:10,200 --> 00:47:12,599
bunch of cheat sheets for this

1225
00:47:12,599 --> 00:47:14,220
um but one interesting thing is second

1226
00:47:14,220 --> 00:47:16,140
order injections a lot of apis will take

1227
00:47:16,140 --> 00:47:18,660
in really focused data

1228
00:47:18,660 --> 00:47:20,819
um and it may not take it may not have

1229
00:47:20,819 --> 00:47:24,180
effect within the API but it can be used

1230
00:47:24,180 --> 00:47:27,420
by Downstream or internal systems and

1231
00:47:27,420 --> 00:47:29,339
then pop up somewhere else and I saw

1232
00:47:29,339 --> 00:47:31,859
this for real at Rackspace been years

1233
00:47:31,859 --> 00:47:36,960
ago we injected into an API a xss string

1234
00:47:36,960 --> 00:47:39,060
and that exercise string went through

1235
00:47:39,060 --> 00:47:41,160
seven different systems before it popped

1236
00:47:41,160 --> 00:47:43,200
up on an internal admin panel so second

1237
00:47:43,200 --> 00:47:46,200
order injections really do exist they're

1238
00:47:46,200 --> 00:47:47,520
really hard to tell when you're black

1239
00:47:47,520 --> 00:47:49,680
box testing but if you are internal you

1240
00:47:49,680 --> 00:47:52,520
can find these things out

1241
00:47:52,619 --> 00:47:54,480
um from a Defender point of view

1242
00:47:54,480 --> 00:47:56,880
obviously the the 101 thing to do is

1243
00:47:56,880 --> 00:47:59,940
input validation and output encoding but

1244
00:47:59,940 --> 00:48:01,800
from a runtime perspective you're going

1245
00:48:01,800 --> 00:48:03,540
to see lots of failed or malformed

1246
00:48:03,540 --> 00:48:06,119
requests and the traditional fuzzing

1247
00:48:06,119 --> 00:48:08,700
strings are very well known by both the

1248
00:48:08,700 --> 00:48:10,319
attacker and the defender if you have a

1249
00:48:10,319 --> 00:48:12,300
decent run time so those will stand out

1250
00:48:12,300 --> 00:48:14,579
right or one equals one stuck into a

1251
00:48:14,579 --> 00:48:16,200
request is probably going to be found by

1252
00:48:16,200 --> 00:48:19,319
even a reasonably good networking device

1253
00:48:19,319 --> 00:48:21,900
this watching traffic right you also can

1254
00:48:21,900 --> 00:48:23,460
see

1255
00:48:23,460 --> 00:48:25,260
a large number of requests that have

1256
00:48:25,260 --> 00:48:27,240
validation errors to a particular apis

1257
00:48:27,240 --> 00:48:29,099
I'm trying a fuzzing string because I'm

1258
00:48:29,099 --> 00:48:30,540
basically brute forcing a bunch of

1259
00:48:30,540 --> 00:48:31,980
fuzzing vectors

1260
00:48:31,980 --> 00:48:34,079
so those will stand out

1261
00:48:34,079 --> 00:48:35,640
um and one area where this can be really

1262
00:48:35,640 --> 00:48:38,460
problematic is if overly trusting east

1263
00:48:38,460 --> 00:48:41,099
to west or internal API to API calls

1264
00:48:41,099 --> 00:48:43,560
where if I can get an injection into one

1265
00:48:43,560 --> 00:48:45,660
that passes to the second and it's

1266
00:48:45,660 --> 00:48:47,579
overly trusting because it's an internal

1267
00:48:47,579 --> 00:48:49,980
API calling another internal API even

1268
00:48:49,980 --> 00:48:52,140
though the data came from outside you

1269
00:48:52,140 --> 00:48:53,339
can have some really interesting things

1270
00:48:53,339 --> 00:48:55,200
happen there

1271
00:48:55,200 --> 00:48:57,599
um posture is good to understand which

1272
00:48:57,599 --> 00:48:59,220
APS have sensitive data which would be

1273
00:48:59,220 --> 00:49:01,740
something I'd want to inject into as an

1274
00:49:01,740 --> 00:49:03,660
attacker and then East West API so it's

1275
00:49:03,660 --> 00:49:05,400
internal only apis

1276
00:49:05,400 --> 00:49:07,140
for runtime you're going to see a surge

1277
00:49:07,140 --> 00:49:09,000
of errors or weird valid mail form

1278
00:49:09,000 --> 00:49:11,339
requests or fuzzing strings show up very

1279
00:49:11,339 --> 00:49:12,839
blatantly if you have even a reasonably

1280
00:49:12,839 --> 00:49:14,640
good runtime detection

1281
00:49:14,640 --> 00:49:17,040
and then obviously you can do those same

1282
00:49:17,040 --> 00:49:19,200
fuzzing vectors in your pre-prod testing

1283
00:49:19,200 --> 00:49:20,819
if you do that you can hopefully find

1284
00:49:20,819 --> 00:49:24,079
those before attackers do

1285
00:49:25,819 --> 00:49:28,920
we have 10 minutes to go okay oh okay

1286
00:49:28,920 --> 00:49:30,660
I'm gonna go really fast these these

1287
00:49:30,660 --> 00:49:33,020
last ones are luckily not that hard

1288
00:49:33,020 --> 00:49:35,940
improper Asset Management means uh

1289
00:49:35,940 --> 00:49:37,560
improper Asset Management means you

1290
00:49:37,560 --> 00:49:39,119
don't have a handle on what apis you

1291
00:49:39,119 --> 00:49:40,800
have out there and honestly from an

1292
00:49:40,800 --> 00:49:42,359
attacker I can sum up all those bullet

1293
00:49:42,359 --> 00:49:44,579
points into that bottom line my pen test

1294
00:49:44,579 --> 00:49:46,859
was really easy if apis are unmanaged

1295
00:49:46,859 --> 00:49:50,040
and unloved and unwatched as an attacker

1296
00:49:50,040 --> 00:49:52,020
I'm gonna have a productive time

1297
00:49:52,020 --> 00:49:54,000
as a Defender I need to know all those

1298
00:49:54,000 --> 00:49:57,000
apis and to classify them probably have

1299
00:49:57,000 --> 00:49:58,440
an API or something else in place

1300
00:49:58,440 --> 00:49:59,880
whatever you should understand your

1301
00:49:59,880 --> 00:50:01,079
landscape

1302
00:50:01,079 --> 00:50:03,060
posture that's what it's designed to

1303
00:50:03,060 --> 00:50:05,760
solve this very top 10 issue so that

1304
00:50:05,760 --> 00:50:07,680
should do it for you if you have good

1305
00:50:07,680 --> 00:50:09,839
run time it'll update your posture so

1306
00:50:09,839 --> 00:50:11,760
that as you add apis to get added to

1307
00:50:11,760 --> 00:50:14,099
your inventory and testing honestly not

1308
00:50:14,099 --> 00:50:16,099
very useful here

1309
00:50:16,099 --> 00:50:18,240
insufficient logging and monitoring is

1310
00:50:18,240 --> 00:50:20,579
also one as an attacker you just kind of

1311
00:50:20,579 --> 00:50:22,500
have to infer that because Chuck gosh

1312
00:50:22,500 --> 00:50:24,599
I've been spraying crappy traffic to

1313
00:50:24,599 --> 00:50:26,579
this API for three hours and it hasn't

1314
00:50:26,579 --> 00:50:28,920
reacted but it's really hard to tell

1315
00:50:28,920 --> 00:50:31,319
from external

1316
00:50:31,319 --> 00:50:34,079
from internal you don't see attacks like

1317
00:50:34,079 --> 00:50:35,700
if you don't have walking and monitoring

1318
00:50:35,700 --> 00:50:37,140
you may be getting attacked and you have

1319
00:50:37,140 --> 00:50:40,020
no clue unplanned downtime is a resource

1320
00:50:40,020 --> 00:50:41,040
that you really should have better

1321
00:50:41,040 --> 00:50:42,839
monitoring and logging

1322
00:50:42,839 --> 00:50:44,819
um in the diagnosing API issues is is

1323
00:50:44,819 --> 00:50:47,099
difficult this is just a general idea I

1324
00:50:47,099 --> 00:50:49,380
mean this is more of a SRE kind of thing

1325
00:50:49,380 --> 00:50:51,780
but if you can't diagnose API issues you

1326
00:50:51,780 --> 00:50:53,280
probably have insufficient logging and

1327
00:50:53,280 --> 00:50:55,079
monitoring

1328
00:50:55,079 --> 00:50:56,700
um posture can tell you how much logging

1329
00:50:56,700 --> 00:50:57,920
you should have

1330
00:50:57,920 --> 00:51:00,420
obviously runtime this is what runtime

1331
00:51:00,420 --> 00:51:02,760
is supposed to do monitor so if you need

1332
00:51:02,760 --> 00:51:04,500
you know if you have a run a good

1333
00:51:04,500 --> 00:51:06,240
runtime tool you can kind of knock this

1334
00:51:06,240 --> 00:51:08,880
one off your list and testing can kind

1335
00:51:08,880 --> 00:51:11,040
of tell you what's logged but it's not

1336
00:51:11,040 --> 00:51:12,900
that useful

1337
00:51:12,900 --> 00:51:15,480
look at that I made it bonus material

1338
00:51:15,480 --> 00:51:16,920
I'm going to quickly cover this and we

1339
00:51:16,920 --> 00:51:19,200
should be good on time

1340
00:51:19,200 --> 00:51:20,940
fuzzing

1341
00:51:20,940 --> 00:51:23,359
um well this is covered in the the

1342
00:51:23,359 --> 00:51:25,319
testing guide I'm going to kind of go

1343
00:51:25,319 --> 00:51:26,880
quick here because I'm running short on

1344
00:51:26,880 --> 00:51:28,980
time but obviously from a Defender

1345
00:51:28,980 --> 00:51:31,079
fuzzing is very very loud and this is

1346
00:51:31,079 --> 00:51:33,900
where runtime can find it for you

1347
00:51:33,900 --> 00:51:35,520
um one thing I did want to point out is

1348
00:51:35,520 --> 00:51:37,020
there's two different ways that I like

1349
00:51:37,020 --> 00:51:39,599
to think about attacking apis you either

1350
00:51:39,599 --> 00:51:42,000
attack the structure or I have valid

1351
00:51:42,000 --> 00:51:44,700
data but I fiddle with the how the data

1352
00:51:44,700 --> 00:51:46,740
is laid out in Json or XML or whatever

1353
00:51:46,740 --> 00:51:49,140
the whatever the API takes

1354
00:51:49,140 --> 00:51:53,099
versus data attacks which is I have a

1355
00:51:53,099 --> 00:51:54,900
well-structured

1356
00:51:54,900 --> 00:51:58,319
data payload and I just modify the data

1357
00:51:58,319 --> 00:52:00,180
elements inside of that payload and I

1358
00:52:00,180 --> 00:52:01,740
found some really interesting things

1359
00:52:01,740 --> 00:52:03,680
doing structural attacks where I add

1360
00:52:03,680 --> 00:52:06,780
three of whatever it expects only one of

1361
00:52:06,780 --> 00:52:09,900
or a dozen of them or you remove one

1362
00:52:09,900 --> 00:52:13,140
right so don't forget structural attacks

1363
00:52:13,140 --> 00:52:16,859
when you're being naughty with apis

1364
00:52:16,859 --> 00:52:19,920
I'm graphql it's pretty much the same

1365
00:52:19,920 --> 00:52:22,200
for graphql except for graphql it's a

1366
00:52:22,200 --> 00:52:24,000
query language if it allows

1367
00:52:24,000 --> 00:52:26,520
introspection I can get tons of I can

1368
00:52:26,520 --> 00:52:28,200
pull the whole schema honestly for the

1369
00:52:28,200 --> 00:52:30,720
graphql API but to be honest with you

1370
00:52:30,720 --> 00:52:33,660
graphql is a huge area so I'm leaving

1371
00:52:33,660 --> 00:52:37,020
that as an exercise for you guys

1372
00:52:37,020 --> 00:52:39,680
foreign

1373
00:52:40,020 --> 00:52:42,480
four key takeaways if you know how to

1374
00:52:42,480 --> 00:52:44,400
test web applications you're really far

1375
00:52:44,400 --> 00:52:47,160
into being able to test apis yeah

1376
00:52:47,160 --> 00:52:48,660
there's a couple things you need to to

1377
00:52:48,660 --> 00:52:51,359
know that are different but honestly if

1378
00:52:51,359 --> 00:52:53,640
you're if not if not go read the Lost

1379
00:52:53,640 --> 00:52:55,079
testing guide that's all I got started

1380
00:52:55,079 --> 00:52:56,339
years ago

1381
00:52:56,339 --> 00:52:58,980
um but if if you know how to test apis

1382
00:52:58,980 --> 00:53:01,319
you're really far ahead into testing if

1383
00:53:01,319 --> 00:53:02,640
you know to test web apps you're far

1384
00:53:02,640 --> 00:53:04,020
ahead into testing apis because

1385
00:53:04,020 --> 00:53:06,059
basically an API is a web app without a

1386
00:53:06,059 --> 00:53:07,800
UI

1387
00:53:07,800 --> 00:53:08,520
um

1388
00:53:08,520 --> 00:53:10,140
there's special knowledge and tools

1389
00:53:10,140 --> 00:53:11,940
needed that are definitely for API

1390
00:53:11,940 --> 00:53:14,400
testing I'll give you more on that a bit

1391
00:53:14,400 --> 00:53:16,319
and there are definitely gaps in API

1392
00:53:16,319 --> 00:53:18,359
security controls if you have a solid

1393
00:53:18,359 --> 00:53:21,480
API shop API security shop you probably

1394
00:53:21,480 --> 00:53:23,819
don't have what you need for apis and it

1395
00:53:23,819 --> 00:53:26,640
might be time to sort of do a a sanity

1396
00:53:26,640 --> 00:53:29,520
check on what you have in place in terms

1397
00:53:29,520 --> 00:53:31,980
of controls Etc

1398
00:53:31,980 --> 00:53:33,780
um I created this webpage of API

1399
00:53:33,780 --> 00:53:35,520
security tools because I kept finding a

1400
00:53:35,520 --> 00:53:36,839
bunch of them and I wanted to put them

1401
00:53:36,839 --> 00:53:39,059
in something sensible

1402
00:53:39,059 --> 00:53:40,319
um you can find us on the community

1403
00:53:40,319 --> 00:53:43,200
pages on the OAS website I'm happy to

1404
00:53:43,200 --> 00:53:44,940
take PR's there have been several that

1405
00:53:44,940 --> 00:53:46,680
people have added or you can hit me up

1406
00:53:46,680 --> 00:53:48,960
on slack and I will add them and I do

1407
00:53:48,960 --> 00:53:50,819
categorize them into those three types

1408
00:53:50,819 --> 00:53:52,680
of tools if they're posture runtime or

1409
00:53:52,680 --> 00:53:55,020
testing and I have open source versus

1410
00:53:55,020 --> 00:53:58,440
commercial Etc so I I I hope this is

1411
00:53:58,440 --> 00:53:59,819
useful to you and if you have some

1412
00:53:59,819 --> 00:54:02,220
additions just let me know

1413
00:54:02,220 --> 00:54:04,200
and then very very quickly

1414
00:54:04,200 --> 00:54:07,920
here is a places where the API the three

1415
00:54:07,920 --> 00:54:09,660
different tools and the top ten tens

1416
00:54:09,660 --> 00:54:11,520
where they're weak and where I have week

1417
00:54:11,520 --> 00:54:12,900
they really support but they don't

1418
00:54:12,900 --> 00:54:15,420
directly Impact versus where they have a

1419
00:54:15,420 --> 00:54:16,559
direct impact

1420
00:54:16,559 --> 00:54:19,260
and then in some cases

1421
00:54:19,260 --> 00:54:21,359
um like a mass assignment or testing or

1422
00:54:21,359 --> 00:54:23,460
testing for logging and monitoring Etc

1423
00:54:23,460 --> 00:54:26,579
they may not have any impact or like the

1424
00:54:26,579 --> 00:54:30,540
the up Arrow uh arm on improper assets

1425
00:54:30,540 --> 00:54:31,980
management for posture that's what

1426
00:54:31,980 --> 00:54:33,780
posture does

1427
00:54:33,780 --> 00:54:37,740
so I apologize for the fire hose and I

1428
00:54:37,740 --> 00:54:40,879
have six minutes per question

1429
00:54:41,160 --> 00:54:43,980
thank you very much Matt it was

1430
00:54:43,980 --> 00:54:46,859
extremely enlightening and I think it

1431
00:54:46,859 --> 00:54:49,619
covered so many topics and it has to

1432
00:54:49,619 --> 00:54:52,859
sink in first however there is one one

1433
00:54:52,859 --> 00:54:55,380
specific question regarding the best

1434
00:54:55,380 --> 00:54:57,180
tool recommendation is there anything

1435
00:54:57,180 --> 00:55:00,079
that you can recommend

1436
00:55:00,079 --> 00:55:03,300
oh uh wow that's a hard one to answer

1437
00:55:03,300 --> 00:55:05,400
because it's all over the place

1438
00:55:05,400 --> 00:55:07,800
um it so here's the trade-off you need

1439
00:55:07,800 --> 00:55:08,819
to think about I'll tell you how to

1440
00:55:08,819 --> 00:55:10,260
think about it and then you can solve it

1441
00:55:10,260 --> 00:55:13,500
for yourself it's money or time right if

1442
00:55:13,500 --> 00:55:14,640
you have money

1443
00:55:14,640 --> 00:55:16,740
likely a good commercial tool that's

1444
00:55:16,740 --> 00:55:18,780
going to save you time but you have to

1445
00:55:18,780 --> 00:55:20,819
have budget to make that happen right

1446
00:55:20,819 --> 00:55:23,700
versus open source work very well

1447
00:55:23,700 --> 00:55:25,559
generally speaking like zap does a

1448
00:55:25,559 --> 00:55:27,599
decent job of testing apis if you have a

1449
00:55:27,599 --> 00:55:29,400
good Swagger spec and you feed it to zap

1450
00:55:29,400 --> 00:55:31,200
it could do a good job of testing apis

1451
00:55:31,200 --> 00:55:34,680
and it's zero dollars so that may be a

1452
00:55:34,680 --> 00:55:37,260
great place to start I tend to like to

1453
00:55:37,260 --> 00:55:40,140
try a couple of Open Source free tools

1454
00:55:40,140 --> 00:55:42,300
because it's kind of a I trade off a

1455
00:55:42,300 --> 00:55:43,680
little bit of time to understand if

1456
00:55:43,680 --> 00:55:46,079
they're useful and then

1457
00:55:46,079 --> 00:55:48,240
depending on what kind of coverage you

1458
00:55:48,240 --> 00:55:50,579
get you may or may not then decide it's

1459
00:55:50,579 --> 00:55:52,980
time to Pony up or ask for Budget to get

1460
00:55:52,980 --> 00:55:54,960
a to get a commercial tool and in

1461
00:55:54,960 --> 00:55:57,180
because the commercial tools will do a

1462
00:55:57,180 --> 00:55:58,740
lot of hand-holding for you they'll make

1463
00:55:58,740 --> 00:56:01,079
nice output they'll be updated regularly

1464
00:56:01,079 --> 00:56:03,660
you know there's just I mean it's a time

1465
00:56:03,660 --> 00:56:06,059
or money question unfortunately and and

1466
00:56:06,059 --> 00:56:08,700
zapdo is not a bad way to start and if

1467
00:56:08,700 --> 00:56:10,740
nothing else get use a free tool to

1468
00:56:10,740 --> 00:56:13,559
understand sort of get a smell test for

1469
00:56:13,559 --> 00:56:15,960
your apis if the free tool is really

1470
00:56:15,960 --> 00:56:18,059
noisy maybe you just need to solve a lot

1471
00:56:18,059 --> 00:56:19,859
of problems before you pay a vendor to

1472
00:56:19,859 --> 00:56:22,500
fix issues or maybe that might scare

1473
00:56:22,500 --> 00:56:23,940
management enough to give you lots of

1474
00:56:23,940 --> 00:56:26,220
budget and you go buy a tool so it kind

1475
00:56:26,220 --> 00:56:28,140
of depends

1476
00:56:28,140 --> 00:56:30,720
the usual security answer it depends

1477
00:56:30,720 --> 00:56:35,419
like a lawyer I know sorry bad me

1478
00:56:36,240 --> 00:56:38,579
you said in the beginning there and

1479
00:56:38,579 --> 00:56:42,000
nothing yet formalizing sand of API

1480
00:56:42,000 --> 00:56:43,200
hardening

1481
00:56:43,200 --> 00:56:44,940
but what is

1482
00:56:44,940 --> 00:56:48,240
the best practices that you would

1483
00:56:48,240 --> 00:56:53,579
tell us to watch for and go for in the

1484
00:56:53,579 --> 00:56:57,900
priority yeah that's a great one so

1485
00:56:57,900 --> 00:57:01,020
there's several things you can do that I

1486
00:57:01,020 --> 00:57:02,460
think are just kind of fundamental and

1487
00:57:02,460 --> 00:57:05,339
almost design time decisions which are I

1488
00:57:05,339 --> 00:57:07,380
think better to fix than bugs obviously

1489
00:57:07,380 --> 00:57:09,180
so

1490
00:57:09,180 --> 00:57:12,900
I I like the the for lack of a better

1491
00:57:12,900 --> 00:57:16,760
term the auto magical data binding from

1492
00:57:16,760 --> 00:57:21,359
say a DB table to a post or a response

1493
00:57:21,359 --> 00:57:23,640
to our API request right you have these

1494
00:57:23,640 --> 00:57:25,260
to Json like I mentioned earlier

1495
00:57:25,260 --> 00:57:28,140
functions that will just take a data

1496
00:57:28,140 --> 00:57:29,880
model internally however that data is

1497
00:57:29,880 --> 00:57:32,900
represented in your app and turn it into

1498
00:57:32,900 --> 00:57:35,760
a Json and then send it over the wire

1499
00:57:35,760 --> 00:57:38,160
now from a developer like uh

1500
00:57:38,160 --> 00:57:40,079
productivity perspective those are

1501
00:57:40,079 --> 00:57:43,079
awesome those Rock from a I don't want a

1502
00:57:43,079 --> 00:57:45,859
leak data perspective those are horrific

1503
00:57:45,859 --> 00:57:49,260
and on the flip side if you have a read

1504
00:57:49,260 --> 00:57:51,420
in data and magically turn it into table

1505
00:57:51,420 --> 00:57:55,880
data I have mass assignment problems so

1506
00:57:55,880 --> 00:57:58,500
although it is more work which is always

1507
00:57:58,500 --> 00:58:01,140
an interesting uh conundrum to sell to

1508
00:58:01,140 --> 00:58:02,160
management

1509
00:58:02,160 --> 00:58:05,640
having specific data objects for the API

1510
00:58:05,640 --> 00:58:08,040
that are different than your internal

1511
00:58:08,040 --> 00:58:09,780
objects I think is really important

1512
00:58:09,780 --> 00:58:12,180
because it it makes it explicit right

1513
00:58:12,180 --> 00:58:15,240
instead of it magically happens

1514
00:58:15,240 --> 00:58:16,980
because it could be the developer one

1515
00:58:16,980 --> 00:58:21,240
used it to Json right and then there are

1516
00:58:21,240 --> 00:58:23,220
three jobs later where some new person

1517
00:58:23,220 --> 00:58:25,800
who inherited Legacy code is told to add

1518
00:58:25,800 --> 00:58:27,420
a field and they add a field and

1519
00:58:27,420 --> 00:58:29,880
suddenly that's exposed and and it's

1520
00:58:29,880 --> 00:58:32,520
really kind of well it I mean I guess

1521
00:58:32,520 --> 00:58:34,260
maybe it's somebody's fault but that

1522
00:58:34,260 --> 00:58:35,520
could very accidentally and

1523
00:58:35,520 --> 00:58:37,859
non-maliciously happen but if you have

1524
00:58:37,859 --> 00:58:40,799
the explicit objects I have to add that

1525
00:58:40,799 --> 00:58:43,380
very very you know explicitly to make

1526
00:58:43,380 --> 00:58:45,299
that not happen

1527
00:58:45,299 --> 00:58:48,119
um the other big area is authentication

1528
00:58:48,119 --> 00:58:50,520
or authorization excuse me and actually

1529
00:58:50,520 --> 00:58:52,440
the whole token management can be really

1530
00:58:52,440 --> 00:58:55,079
interesting for apis

1531
00:58:55,079 --> 00:58:56,460
um

1532
00:58:56,460 --> 00:58:58,619
this is where I think having an API

1533
00:58:58,619 --> 00:59:00,599
Gateway makes a lot of sense

1534
00:59:00,599 --> 00:59:03,240
because if you have 12 apis behind an

1535
00:59:03,240 --> 00:59:05,640
API Gateway and API Gateway is handling

1536
00:59:05,640 --> 00:59:09,420
the like say jwts for you

1537
00:59:09,420 --> 00:59:11,880
you don't have 12 different potential

1538
00:59:11,880 --> 00:59:13,859
potentially different implementations of

1539
00:59:13,859 --> 00:59:16,980
JWT handling you have one and it's at

1540
00:59:16,980 --> 00:59:19,140
the API Gateway so this is one of those

1541
00:59:19,140 --> 00:59:21,059
kind of rare cases that if you do it

1542
00:59:21,059 --> 00:59:23,819
right you can get more security and have

1543
00:59:23,819 --> 00:59:26,339
less work for the developers now granted

1544
00:59:26,339 --> 00:59:28,440
you if I can bypass that API Gateway

1545
00:59:28,440 --> 00:59:30,599
things get really interesting

1546
00:59:30,599 --> 00:59:32,400
um so that's it's not without its cost

1547
00:59:32,400 --> 00:59:34,859
but that's another great area to get

1548
00:59:34,859 --> 00:59:36,140
some benefits

1549
00:59:36,140 --> 00:59:38,280
unfortunately we have to rub our book

1550
00:59:38,280 --> 00:59:40,200
here thank you very much Matt for your

1551
00:59:40,200 --> 00:59:44,118
talk and the input you gave

