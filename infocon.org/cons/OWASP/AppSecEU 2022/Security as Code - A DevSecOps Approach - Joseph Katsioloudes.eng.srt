1
00:00:04,140 --> 00:00:06,359
hi everyone good afternoon welcome back

2
00:00:06,359 --> 00:00:09,240
welcome to OAS appsec EU and the

3
00:00:09,240 --> 00:00:11,340
devsecops track

4
00:00:11,340 --> 00:00:13,259
um my name is Nathan Britton I'm an OAS

5
00:00:13,259 --> 00:00:15,839
volunteer I'm an earth chapter leader in

6
00:00:15,839 --> 00:00:17,340
Birmingham in the West Midlands in the

7
00:00:17,340 --> 00:00:19,980
UK and uh pleased to help

8
00:00:19,980 --> 00:00:21,720
um today's session

9
00:00:21,720 --> 00:00:24,140
um so we're gonna talk today all things

10
00:00:24,140 --> 00:00:26,400
devsecops and the importance of getting

11
00:00:26,400 --> 00:00:29,820
security into your Ci City pipeline

12
00:00:29,820 --> 00:00:32,520
so during the next 45 minutes you'll

13
00:00:32,520 --> 00:00:34,920
hear from Joe presents his talk on

14
00:00:34,920 --> 00:00:38,460
Securities code at devsecops approach

15
00:00:38,460 --> 00:00:40,680
that'll last about 45 minutes and then

16
00:00:40,680 --> 00:00:43,260
10 minutes we'll have the Q a afterwards

17
00:00:43,260 --> 00:00:45,360
so please within your Hoover app or the

18
00:00:45,360 --> 00:00:48,239
Hoover browser please locate the Q a

19
00:00:48,239 --> 00:00:51,480
session uh and add your questions there

20
00:00:51,480 --> 00:00:52,980
and I'll keep an eye on them and at the

21
00:00:52,980 --> 00:00:55,260
end we'll we'll Grill Joe with all those

22
00:00:55,260 --> 00:00:57,840
uh with all those questions

23
00:00:57,840 --> 00:00:59,280
um but that's all

24
00:00:59,280 --> 00:01:01,140
that I need to say enough for me I'd

25
00:01:01,140 --> 00:01:03,239
like now to hand over to Joe who's part

26
00:01:03,239 --> 00:01:05,700
of GitHub security lab to begin his

27
00:01:05,700 --> 00:01:08,939
presentation go for it Joe

28
00:01:08,939 --> 00:01:11,100
thanks so much Nathan hi everyone

29
00:01:11,100 --> 00:01:13,380
welcome to my presentation I'm sharing

30
00:01:13,380 --> 00:01:16,260
my screen so we get started

31
00:01:16,260 --> 00:01:18,420
so welcome everyone hello from the

32
00:01:18,420 --> 00:01:20,460
GitHub security lab my name is Joseph

33
00:01:20,460 --> 00:01:23,580
a bit about me is that first of all I am

34
00:01:23,580 --> 00:01:25,619
doing security from my early teenage

35
00:01:25,619 --> 00:01:27,360
years because it was my own way to

36
00:01:27,360 --> 00:01:30,119
provide dedicated and ethical service to

37
00:01:30,119 --> 00:01:32,340
organizations and the society as as a

38
00:01:32,340 --> 00:01:33,060
whole

39
00:01:33,060 --> 00:01:36,180
through the years I studied software and

40
00:01:36,180 --> 00:01:38,640
I focused on cyber security I've worked

41
00:01:38,640 --> 00:01:40,799
as a consultant for IBM advising

42
00:01:40,799 --> 00:01:43,200
directly caesos and CEO on pressing

43
00:01:43,200 --> 00:01:45,240
security monitors and for the past year

44
00:01:45,240 --> 00:01:47,600
now I'm part of the GitHub security lab

45
00:01:47,600 --> 00:01:51,360
because I want to help software

46
00:01:51,360 --> 00:01:53,700
developers directly in the open source

47
00:01:53,700 --> 00:01:56,460
to secure the open source software that

48
00:01:56,460 --> 00:01:59,280
we all depend on uh some carrier

49
00:01:59,280 --> 00:02:01,619
highlights include a zero day

50
00:02:01,619 --> 00:02:03,180
vulnerability for a top 10

51
00:02:03,180 --> 00:02:06,439
cryptocurrency back in 2018

52
00:02:06,439 --> 00:02:09,899
I showed through my thesis a way to post

53
00:02:09,899 --> 00:02:12,660
legitimate transactions randomly

54
00:02:12,660 --> 00:02:16,560
uh as a result of attaching directly

55
00:02:16,560 --> 00:02:19,379
blockchain Innovations so that we secure

56
00:02:19,379 --> 00:02:22,920
them and other career highlights lately

57
00:02:22,920 --> 00:02:24,840
include the YouTube series that is

58
00:02:24,840 --> 00:02:26,580
called security bytes that you can find

59
00:02:26,580 --> 00:02:28,500
in the GitHub Channel

60
00:02:28,500 --> 00:02:31,980
in this series I focus on uh common

61
00:02:31,980 --> 00:02:34,140
mistakes that software developers are

62
00:02:34,140 --> 00:02:37,980
making so that these are avoided and

63
00:02:37,980 --> 00:02:41,819
everybody is coding securely

64
00:02:41,819 --> 00:02:44,519
um The Gap I found in the market let's

65
00:02:44,519 --> 00:02:47,220
say and I introduced this series was

66
00:02:47,220 --> 00:02:49,260
that normally you see videos that

67
00:02:49,260 --> 00:02:52,140
hackers are trying to exploit code and

68
00:02:52,140 --> 00:02:54,780
trying to show you how to

69
00:02:54,780 --> 00:02:57,599
um make benefit of bugs I chose the

70
00:02:57,599 --> 00:03:01,500
other way I I use code that I see often

71
00:03:01,500 --> 00:03:04,500
online and I show what is wrong with it

72
00:03:04,500 --> 00:03:05,519
foreign

73
00:03:05,519 --> 00:03:08,340
other Publications I have lately include

74
00:03:08,340 --> 00:03:10,680
blogging again in the GitHub official

75
00:03:10,680 --> 00:03:13,319
blog like for example today's most

76
00:03:13,319 --> 00:03:15,260
common security vulnerabilities

77
00:03:15,260 --> 00:03:18,659
explained alongside how you can get help

78
00:03:18,659 --> 00:03:22,319
for free from GitHub to avoid those and

79
00:03:22,319 --> 00:03:24,300
I'm writing all this content because I'm

80
00:03:24,300 --> 00:03:26,580
part of a team with the goal to secure

81
00:03:26,580 --> 00:03:30,120
the word software together with you

82
00:03:30,120 --> 00:03:32,640
we are doing two things towards that

83
00:03:32,640 --> 00:03:35,159
direction the first one is to produce

84
00:03:35,159 --> 00:03:37,920
educational content like the one

85
00:03:37,920 --> 00:03:40,319
um I just described but also we are

86
00:03:40,319 --> 00:03:42,060
doing security research

87
00:03:42,060 --> 00:03:44,599
which includes

88
00:03:44,599 --> 00:03:49,140
331 zero days over the past 26 months

89
00:03:49,140 --> 00:03:52,080
that we publish and we explain in our

90
00:03:52,080 --> 00:03:54,959
Twitter and in our blog and at the end

91
00:03:54,959 --> 00:03:56,700
of the presentation I'll speak a bit

92
00:03:56,700 --> 00:03:59,340
about the future and what we are going

93
00:03:59,340 --> 00:04:01,620
to publish because many people are

94
00:04:01,620 --> 00:04:04,980
finding those uh very useful it has to

95
00:04:04,980 --> 00:04:07,620
do with free consultation on how you can

96
00:04:07,620 --> 00:04:09,900
secure your open source project and

97
00:04:09,900 --> 00:04:12,599
content on security for actions and all

98
00:04:12,599 --> 00:04:14,819
these nice features that you have has

99
00:04:14,819 --> 00:04:16,738
so today

100
00:04:16,738 --> 00:04:19,320
um she has to speak about security ask

101
00:04:19,320 --> 00:04:21,680
code which is a new deaf second

102
00:04:21,680 --> 00:04:25,740
methodology that I'm gonna explain how

103
00:04:25,740 --> 00:04:28,680
we got inspired form and show you how

104
00:04:28,680 --> 00:04:30,840
you can apply in your code starting

105
00:04:30,840 --> 00:04:33,960
straight away after today's session

106
00:04:33,960 --> 00:04:35,699
first of all I want to start with a

107
00:04:35,699 --> 00:04:39,240
little story that is real it doesn't

108
00:04:39,240 --> 00:04:42,300
come from a Netflix original scenario or

109
00:04:42,300 --> 00:04:44,880
from anything like that 10 years ago

110
00:04:44,880 --> 00:04:48,960
when NASA tried to go to Mars to explore

111
00:04:48,960 --> 00:04:51,419
the sacrifice of Mars they use a little

112
00:04:51,419 --> 00:04:54,360
Rover called curiosity

113
00:04:54,360 --> 00:04:57,360
so that rubber would land in the surface

114
00:04:57,360 --> 00:05:00,840
of Mars using a little parachute but in

115
00:05:00,840 --> 00:05:03,660
the same way that some of us when we are

116
00:05:03,660 --> 00:05:06,000
going like in a trip with a family you

117
00:05:06,000 --> 00:05:08,040
have a family member asking 20 minutes

118
00:05:08,040 --> 00:05:11,880
after you left home if uh the heater is

119
00:05:11,880 --> 00:05:13,800
turned off and if you are sure that you

120
00:05:13,800 --> 00:05:15,360
locked your door

121
00:05:15,360 --> 00:05:18,660
someone in the NASA team asked are we

122
00:05:18,660 --> 00:05:22,740
sure that everything will be working as

123
00:05:22,740 --> 00:05:25,259
expected do you want to make a final

124
00:05:25,259 --> 00:05:27,300
check do you want to make a final code

125
00:05:27,300 --> 00:05:28,139
review

126
00:05:28,139 --> 00:05:31,979
so there was a snippet of code very

127
00:05:31,979 --> 00:05:34,160
similar to the one on screen right now

128
00:05:34,160 --> 00:05:37,919
that the NASA Engineers took a look and

129
00:05:37,919 --> 00:05:39,860
they found a potential

130
00:05:39,860 --> 00:05:42,419
vulnerability about

131
00:05:42,419 --> 00:05:45,060
so I don't know if anybody has spotted

132
00:05:45,060 --> 00:05:48,539
that already but in the first line you

133
00:05:48,539 --> 00:05:50,280
have a method that is expecting an array

134
00:05:50,280 --> 00:05:53,100
of 12 elements

135
00:05:53,100 --> 00:05:56,160
but an array of three elements is

136
00:05:56,160 --> 00:05:58,020
actually being created in line seven

137
00:05:58,020 --> 00:06:01,940
which can cause a random memory access

138
00:06:01,940 --> 00:06:06,259
leading to random Behavior in line two

139
00:06:06,259 --> 00:06:09,960
because the array is gonna be looped

140
00:06:09,960 --> 00:06:13,320
correctly until the third element and

141
00:06:13,320 --> 00:06:15,060
then you are going to have the elements

142
00:06:15,060 --> 00:06:18,000
4 to 12 accessing random memory

143
00:06:18,000 --> 00:06:21,780
this means that the Rover could crash in

144
00:06:21,780 --> 00:06:24,720
the surface of Mars and on top of that

145
00:06:24,720 --> 00:06:27,600
the NASA Engineers did something smarter

146
00:06:27,600 --> 00:06:30,360
they didn't just fix that specific

147
00:06:30,360 --> 00:06:33,960
vulnerable instance of the code but they

148
00:06:33,960 --> 00:06:36,300
wrote a generic query in the language

149
00:06:36,300 --> 00:06:38,940
I'm going to introduce in our demo to

150
00:06:38,940 --> 00:06:42,360
find instances of that vulnerability in

151
00:06:42,360 --> 00:06:44,220
the rest of their code base

152
00:06:44,220 --> 00:06:48,300
so they wrote a generic code ql query in

153
00:06:48,300 --> 00:06:50,460
order to pick similar issues in the code

154
00:06:50,460 --> 00:06:54,660
and they found 30 other issues

155
00:06:54,660 --> 00:06:58,020
these 30 other issues could together

156
00:06:58,020 --> 00:07:01,680
lead into the Rover being crushed so

157
00:07:01,680 --> 00:07:05,220
this would be a very very late fix in

158
00:07:05,220 --> 00:07:08,220
production it's a costly one it causes

159
00:07:08,220 --> 00:07:11,819
effort time and potentially money in the

160
00:07:11,819 --> 00:07:13,979
case of damage

161
00:07:13,979 --> 00:07:16,680
the smart thing that they did was that

162
00:07:16,680 --> 00:07:18,900
they fixed all of them with a single

163
00:07:18,900 --> 00:07:20,520
query

164
00:07:20,520 --> 00:07:23,819
10 years that was 10 years ago one year

165
00:07:23,819 --> 00:07:26,580
ago NASA sent another over to Mars This

166
00:07:26,580 --> 00:07:29,580
Time called Ingenuity but they learned

167
00:07:29,580 --> 00:07:32,280
from the mistakes of the past they used

168
00:07:32,280 --> 00:07:35,160
a collection of our products alongside

169
00:07:35,160 --> 00:07:37,560
code 12 that we are gonna see in today's

170
00:07:37,560 --> 00:07:38,699
demo

171
00:07:38,699 --> 00:07:41,940
and they shifted security left by

172
00:07:41,940 --> 00:07:44,699
picking up problems like that or others

173
00:07:44,699 --> 00:07:47,220
very early in the software development

174
00:07:47,220 --> 00:07:50,160
life cycle and not just at the end when

175
00:07:50,160 --> 00:07:52,020
the part when the Rover is literally

176
00:07:52,020 --> 00:07:54,300
mid-flight which is very late in

177
00:07:54,300 --> 00:07:55,860
production

178
00:07:55,860 --> 00:07:57,120
so

179
00:07:57,120 --> 00:07:59,699
if I would end the presentation here

180
00:07:59,699 --> 00:08:02,880
today it will be just some oh today I've

181
00:08:02,880 --> 00:08:04,800
learned about a very good feature that's

182
00:08:04,800 --> 00:08:07,979
called codeql I can't enable it in my

183
00:08:07,979 --> 00:08:09,120
code

184
00:08:09,120 --> 00:08:11,880
um as well and I could benefit from the

185
00:08:11,880 --> 00:08:15,000
same security as NASA and other teams in

186
00:08:15,000 --> 00:08:17,580
the world today's presentation is about

187
00:08:17,580 --> 00:08:20,819
showing you how you can write your own

188
00:08:20,819 --> 00:08:24,539
code URL code towards devsecups

189
00:08:24,539 --> 00:08:27,660
I'm trying to make you an actor instead

190
00:08:27,660 --> 00:08:31,560
of a passive user of course

191
00:08:31,560 --> 00:08:34,500
um it's open to you to turn it off to

192
00:08:34,500 --> 00:08:36,179
turn it on I'm gonna show you how you

193
00:08:36,179 --> 00:08:39,240
can enable code ql later

194
00:08:39,240 --> 00:08:41,940
but the point I want to make is that we

195
00:08:41,940 --> 00:08:45,120
are working as a community when NASA

196
00:08:45,120 --> 00:08:48,120
Engineers write a query to pick up a

197
00:08:48,120 --> 00:08:50,940
vulnerability in their code this query

198
00:08:50,940 --> 00:08:54,000
is also available to you to me to

199
00:08:54,000 --> 00:08:56,940
everybody really when the security team

200
00:08:56,940 --> 00:08:58,980
of another team in another Enterprise is

201
00:08:58,980 --> 00:09:01,140
doing the same then this query is

202
00:09:01,140 --> 00:09:03,839
available to everyone and in that query

203
00:09:03,839 --> 00:09:06,600
set you have my team contributing which

204
00:09:06,600 --> 00:09:09,300
is the team with 351 zero daily

205
00:09:09,300 --> 00:09:11,820
vulnerabilities and we also have back

206
00:09:11,820 --> 00:09:14,459
bouncers back Hunters

207
00:09:14,459 --> 00:09:16,800
um that are contributing queries to pick

208
00:09:16,800 --> 00:09:18,959
up zero level abilities that they find

209
00:09:18,959 --> 00:09:22,740
so that they get paid paid bounties

210
00:09:22,740 --> 00:09:24,600
so we are all working as a community

211
00:09:24,600 --> 00:09:25,980
here

212
00:09:25,980 --> 00:09:28,800
and now I want to introduce security ask

213
00:09:28,800 --> 00:09:30,120
code

214
00:09:30,120 --> 00:09:33,060
we were inspired for security as code

215
00:09:33,060 --> 00:09:35,519
through the lessons learned from devops

216
00:09:35,519 --> 00:09:37,620
and quality assurance

217
00:09:37,620 --> 00:09:39,200
so traditionally

218
00:09:39,200 --> 00:09:42,140
we believe that historically actually

219
00:09:42,140 --> 00:09:46,080
devops succeeded because the developers

220
00:09:46,080 --> 00:09:47,940
didn't need to open tickets to

221
00:09:47,940 --> 00:09:50,580
infrastructure teams and they got their

222
00:09:50,580 --> 00:09:54,120
hands dirty with infrastructure they

223
00:09:54,120 --> 00:09:58,140
could write manage change and control

224
00:09:58,140 --> 00:10:00,839
their own infrastructure

225
00:10:00,839 --> 00:10:03,420
in the same way

226
00:10:03,420 --> 00:10:06,480
they could Now read execute and

227
00:10:06,480 --> 00:10:09,480
understand readable code without the

228
00:10:09,480 --> 00:10:13,440
need to get involved and lose time with

229
00:10:13,440 --> 00:10:15,720
other teams internally

230
00:10:15,720 --> 00:10:18,480
in the same way you have called the

231
00:10:18,480 --> 00:10:19,800
assurance

232
00:10:19,800 --> 00:10:22,320
in the pre-orderline days teams will

233
00:10:22,320 --> 00:10:26,160
work in silos so you have the testing

234
00:10:26,160 --> 00:10:28,880
team making sure that the code is

235
00:10:28,880 --> 00:10:33,300
functional but also secure and providing

236
00:10:33,300 --> 00:10:34,519
the

237
00:10:34,519 --> 00:10:37,800
developers team with potential changes

238
00:10:37,800 --> 00:10:40,680
in the code that they want and some

239
00:10:40,680 --> 00:10:42,839
let's say recommendations

240
00:10:42,839 --> 00:10:45,540
today I think that this approach will

241
00:10:45,540 --> 00:10:47,820
not resonate with the vast majority of

242
00:10:47,820 --> 00:10:51,360
people because we shift towards a more

243
00:10:51,360 --> 00:10:53,880
deaf second way of doing things that

244
00:10:53,880 --> 00:10:55,860
people want to have the control in their

245
00:10:55,860 --> 00:10:57,240
hands

246
00:10:57,240 --> 00:10:59,880
we got inspired from that and we want to

247
00:10:59,880 --> 00:11:02,760
promote security as code which is the

248
00:11:02,760 --> 00:11:04,860
methodology of codifying security

249
00:11:04,860 --> 00:11:07,500
decisions that are then shared with

250
00:11:07,500 --> 00:11:08,760
other teams

251
00:11:08,760 --> 00:11:12,180
we therefore expect the Security Experts

252
00:11:12,180 --> 00:11:15,540
of an organization to codify their

253
00:11:15,540 --> 00:11:19,019
security knowledge in readable and

254
00:11:19,019 --> 00:11:22,500
executable form and then socialize this

255
00:11:22,500 --> 00:11:26,279
knowledge with the rest of the company

256
00:11:26,279 --> 00:11:29,540
so that developers can read understand

257
00:11:29,540 --> 00:11:33,120
change and execute security decisions

258
00:11:33,120 --> 00:11:36,120
that are codified this way

259
00:11:36,120 --> 00:11:39,899
we believe that the speed of devops

260
00:11:39,899 --> 00:11:42,660
would not be affected and Security will

261
00:11:42,660 --> 00:11:46,260
be a seamless Observer just for when

262
00:11:46,260 --> 00:11:48,600
there are security alerts that as I'm

263
00:11:48,600 --> 00:11:50,700
gonna show you later in the demo they

264
00:11:50,700 --> 00:11:53,540
are very readable very understandable

265
00:11:53,540 --> 00:11:56,760
explained very well with references and

266
00:11:56,760 --> 00:11:58,760
security can become

267
00:11:58,760 --> 00:12:02,220
uh not a stopper because traditionally I

268
00:12:02,220 --> 00:12:04,079
know that especially in the past we were

269
00:12:04,079 --> 00:12:07,800
seeing as people who say no and stopping

270
00:12:07,800 --> 00:12:09,839
the progress and the speed of an

271
00:12:09,839 --> 00:12:11,700
organization

272
00:12:11,700 --> 00:12:15,899
the way we propose to do securely as

273
00:12:15,899 --> 00:12:18,959
code is via a new language which is

274
00:12:18,959 --> 00:12:21,420
called code ql

275
00:12:21,420 --> 00:12:23,640
cultural is a language that allows you

276
00:12:23,640 --> 00:12:26,940
to query code as if it was data by

277
00:12:26,940 --> 00:12:29,940
describing what you want to find and not

278
00:12:29,940 --> 00:12:32,579
how to find it

279
00:12:32,579 --> 00:12:35,100
this means that is a declarative

280
00:12:35,100 --> 00:12:36,360
language

281
00:12:36,360 --> 00:12:39,180
but it's also a logical language so that

282
00:12:39,180 --> 00:12:42,300
you can use operators like and and or

283
00:12:42,300 --> 00:12:45,360
to show relationships uh between what

284
00:12:45,360 --> 00:12:46,620
you are looking for

285
00:12:46,620 --> 00:12:48,959
the way that it works behind the scenes

286
00:12:48,959 --> 00:12:51,899
is through creating an abstract abstract

287
00:12:51,899 --> 00:12:54,180
syntax tree for your code

288
00:12:54,180 --> 00:12:57,000
which is called a database so this

289
00:12:57,000 --> 00:12:59,880
database is relational and it can find

290
00:12:59,880 --> 00:13:02,220
what you are looking for in a very fast

291
00:13:02,220 --> 00:13:03,959
way

292
00:13:03,959 --> 00:13:07,760
culture is an object-oriented language

293
00:13:07,760 --> 00:13:10,740
which means that you can benefit from

294
00:13:10,740 --> 00:13:13,139
features like encapsulation and

295
00:13:13,139 --> 00:13:16,260
inheritance composition but also the

296
00:13:16,260 --> 00:13:17,940
object-oriented nature which is like

297
00:13:17,940 --> 00:13:20,300
relationships in the form of

298
00:13:20,300 --> 00:13:23,880
lions are animals so that you can talk

299
00:13:23,880 --> 00:13:26,459
as generic as possible in the same way

300
00:13:26,459 --> 00:13:29,760
as NASA spoke as generic as possible and

301
00:13:29,760 --> 00:13:32,279
they pick vulnerabilities across their

302
00:13:32,279 --> 00:13:34,680
whole code base

303
00:13:34,680 --> 00:13:38,459
code Trail is free for open source and

304
00:13:38,459 --> 00:13:41,760
uh it it's also on on a paid license for

305
00:13:41,760 --> 00:13:43,800
Enterprises

306
00:13:43,800 --> 00:13:46,200
I'm gonna show you how you can enable it

307
00:13:46,200 --> 00:13:48,540
in a bit but like I said before the

308
00:13:48,540 --> 00:13:50,579
point for today's presentation is to

309
00:13:50,579 --> 00:13:53,639
show you how you can write in control so

310
00:13:53,639 --> 00:13:56,639
my goal today is for everybody to live

311
00:13:56,639 --> 00:14:00,360
with knowing the basics of this language

312
00:14:00,360 --> 00:14:03,480
I started as a beginner myself around

313
00:14:03,480 --> 00:14:07,200
five to six months ago and I got very

314
00:14:07,200 --> 00:14:09,779
fast with it very easily and quite

315
00:14:09,779 --> 00:14:12,480
quickly because I could benefit from

316
00:14:12,480 --> 00:14:15,420
templates there are so many templates

317
00:14:15,420 --> 00:14:17,760
and ready-made code there that is just

318
00:14:17,760 --> 00:14:21,240
asking for placeholders in order for you

319
00:14:21,240 --> 00:14:23,100
to find what you want

320
00:14:23,100 --> 00:14:25,320
I don't reinvent the wheel in the

321
00:14:25,320 --> 00:14:27,120
language and I don't expect people to

322
00:14:27,120 --> 00:14:29,240
invent their wheel either

323
00:14:29,240 --> 00:14:32,160
NASA or other teams around the world and

324
00:14:32,160 --> 00:14:33,899
back Hunters they don't start from

325
00:14:33,899 --> 00:14:36,180
scratch but you are also very welcome to

326
00:14:36,180 --> 00:14:38,100
start from from scratch if it's gonna

327
00:14:38,100 --> 00:14:40,800
help you we start from a very good level

328
00:14:40,800 --> 00:14:43,139
from the existing queries in the code

329
00:14:43,139 --> 00:14:46,260
base in the database and we are building

330
00:14:46,260 --> 00:14:48,360
on top of those

331
00:14:48,360 --> 00:14:50,160
another another thing I want to say

332
00:14:50,160 --> 00:14:53,100
about code 12 is that internal supports

333
00:14:53,100 --> 00:14:59,459
JavaScript Java python go brust C C plus

334
00:14:59,459 --> 00:15:03,240
plus C sharp Ruby is coming in the next

335
00:15:03,240 --> 00:15:06,060
year as well as kotlin and many other

336
00:15:06,060 --> 00:15:09,300
languages are in the road

337
00:15:09,300 --> 00:15:13,139
so before going to the today's demo

338
00:15:13,139 --> 00:15:16,199
I want to make sure that everybody is in

339
00:15:16,199 --> 00:15:18,959
the same line I'm gonna show how I can

340
00:15:18,959 --> 00:15:21,540
pick an SQL injection vulnerability for

341
00:15:21,540 --> 00:15:24,660
a tailored code base so imagine that

342
00:15:24,660 --> 00:15:28,320
this code base is private to me I want

343
00:15:28,320 --> 00:15:32,220
to use code 12 to pick up SQL injections

344
00:15:32,220 --> 00:15:35,220
and I want to pick it up in a genetic

345
00:15:35,220 --> 00:15:37,740
fashion like NASA did with the

346
00:15:37,740 --> 00:15:39,660
vulnerability we've seen

347
00:15:39,660 --> 00:15:42,420
for those that are not familiar with ski

348
00:15:42,420 --> 00:15:44,399
injection just have a look in the meme

349
00:15:44,399 --> 00:15:45,660
and I'm going to explain the

350
00:15:45,660 --> 00:15:49,699
vulnerability in 20 seconds

351
00:15:59,120 --> 00:16:01,740
so this movement is very famous in the

352
00:16:01,740 --> 00:16:05,820
cyber security industry it's from XKCD

353
00:16:05,820 --> 00:16:09,139
the root cause of the vulnerability is

354
00:16:09,139 --> 00:16:12,500
input sanitization really that is either

355
00:16:12,500 --> 00:16:15,420
not happening at all or happening

356
00:16:15,420 --> 00:16:16,920
incorrectly

357
00:16:16,920 --> 00:16:19,500
so behind the scenes you have codes

358
00:16:19,500 --> 00:16:21,720
similar to this one which is written in

359
00:16:21,720 --> 00:16:23,040
SQL

360
00:16:23,040 --> 00:16:26,519
where the developer is expecting

361
00:16:26,519 --> 00:16:30,180
a student's name to be added into the

362
00:16:30,180 --> 00:16:32,880
database but the problem is that the

363
00:16:32,880 --> 00:16:35,880
developer here assumes that the user is

364
00:16:35,880 --> 00:16:38,040
very innocent and the only thing they

365
00:16:38,040 --> 00:16:39,800
can pass is indeed

366
00:16:39,800 --> 00:16:42,779
a student's name they trust the user

367
00:16:42,779 --> 00:16:45,720
really but in reality if we can see in

368
00:16:45,720 --> 00:16:48,480
the SQL code below

369
00:16:48,480 --> 00:16:51,240
someone that has malicious intentions

370
00:16:51,240 --> 00:16:55,320
can can indeed close the quote that is

371
00:16:55,320 --> 00:16:57,300
expected above

372
00:16:57,300 --> 00:16:59,699
to close naturally because you just pass

373
00:16:59,699 --> 00:17:02,519
a name add a semicolon and through that

374
00:17:02,519 --> 00:17:05,099
semicolon are the malicious command that

375
00:17:05,099 --> 00:17:08,760
can be to drop the students table or it

376
00:17:08,760 --> 00:17:11,579
can be to create another admin user that

377
00:17:11,579 --> 00:17:13,079
will have access to the students

378
00:17:13,079 --> 00:17:16,520
database personal data

379
00:17:16,520 --> 00:17:18,660
card information

380
00:17:18,660 --> 00:17:20,160
etc etc

381
00:17:20,160 --> 00:17:22,140
the possibilities are endless really

382
00:17:22,140 --> 00:17:25,020
with UNESCO injection vulnerability I

383
00:17:25,020 --> 00:17:26,760
just want to make sure that everybody

384
00:17:26,760 --> 00:17:29,280
understands where the vulnerability

385
00:17:29,280 --> 00:17:30,720
occurs here

386
00:17:30,720 --> 00:17:33,720
so it occurs in the way that the

387
00:17:33,720 --> 00:17:35,940
untrusted user input enters into the

388
00:17:35,940 --> 00:17:38,419
database

389
00:17:38,580 --> 00:17:41,220
and just before start writing on codeql

390
00:17:41,220 --> 00:17:42,960
I want to introduce some terminology

391
00:17:42,960 --> 00:17:45,419
that it's going to help us with the

392
00:17:45,419 --> 00:17:48,240
templates of the language first of all

393
00:17:48,240 --> 00:17:49,980
we have sources

394
00:17:49,980 --> 00:17:53,820
sources are vulnerability sources that

395
00:17:53,820 --> 00:17:55,740
are places in the program that receive

396
00:17:55,740 --> 00:17:58,500
untrusted user input

397
00:17:58,500 --> 00:18:01,140
in the example I've shown you the source

398
00:18:01,140 --> 00:18:04,980
is this one is the execution of

399
00:18:04,980 --> 00:18:07,799
the ins is a call of the insert into

400
00:18:07,799 --> 00:18:10,320
methods where you have untrusted user

401
00:18:10,320 --> 00:18:12,720
input entering the code base

402
00:18:12,720 --> 00:18:15,780
and then you have six things are places

403
00:18:15,780 --> 00:18:18,480
in the program that the malicious user

404
00:18:18,480 --> 00:18:22,200
input is actually being executed

405
00:18:22,200 --> 00:18:24,600
if you don't have malicious input

406
00:18:24,600 --> 00:18:27,120
execution you have an unexploitable

407
00:18:27,120 --> 00:18:28,559
vulnerability

408
00:18:28,559 --> 00:18:31,980
in our example if the untrusted user

409
00:18:31,980 --> 00:18:35,340
input never reaches the sync we don't

410
00:18:35,340 --> 00:18:37,740
have a vulnerability so we will suffer

411
00:18:37,740 --> 00:18:41,640
from many false positives that my demo

412
00:18:41,640 --> 00:18:45,380
is gonna Focus to lower

413
00:18:45,419 --> 00:18:47,460
the sync is actually the place in the

414
00:18:47,460 --> 00:18:51,299
program that the SQL command is actually

415
00:18:51,299 --> 00:18:53,460
being executed it can be the query

416
00:18:53,460 --> 00:18:55,320
execute command

417
00:18:55,320 --> 00:18:58,559
you do have a vulnerability when you

418
00:18:58,559 --> 00:19:02,700
have data flow from sources to things

419
00:19:02,700 --> 00:19:06,179
in no other situation that's the only

420
00:19:06,179 --> 00:19:08,880
situation where you have an SQL

421
00:19:08,880 --> 00:19:11,640
injectionable rabbits now let's go to

422
00:19:11,640 --> 00:19:14,640
our demo to start writing code ql

423
00:19:14,640 --> 00:19:15,660
together

424
00:19:15,660 --> 00:19:19,500
I'm switching to my code editor which is

425
00:19:19,500 --> 00:19:21,660
the vs code

426
00:19:21,660 --> 00:19:24,480
here on the left I have installed the

427
00:19:24,480 --> 00:19:27,299
code ql extension

428
00:19:27,299 --> 00:19:29,940
and I have made my

429
00:19:29,940 --> 00:19:31,980
the code base the intentionally

430
00:19:31,980 --> 00:19:34,200
vulnerable code base that together we

431
00:19:34,200 --> 00:19:37,320
are gonna find vulnerabilities on I

432
00:19:37,320 --> 00:19:39,360
create the abstract syntax Tree by using

433
00:19:39,360 --> 00:19:42,120
a command from the code ql

434
00:19:42,120 --> 00:19:44,820
um command line which is here it's the

435
00:19:44,820 --> 00:19:48,059
mobile Shepherd from o wasp it's an

436
00:19:48,059 --> 00:19:49,860
Android mobile app that is intentionally

437
00:19:49,860 --> 00:19:51,299
vulnerable

438
00:19:51,299 --> 00:19:54,480
so if we explore the database the code

439
00:19:54,480 --> 00:19:57,059
base a bit

440
00:19:57,059 --> 00:19:59,340
just an OTR if I use the where code base

441
00:19:59,340 --> 00:20:01,500
or database they are interchangeable

442
00:20:01,500 --> 00:20:04,500
because the code base is transformed to

443
00:20:04,500 --> 00:20:06,840
the database here

444
00:20:06,840 --> 00:20:09,600
so if we have a look around I want you

445
00:20:09,600 --> 00:20:13,500
to consider a mobile app like that's my

446
00:20:13,500 --> 00:20:14,640
phone here

447
00:20:14,640 --> 00:20:18,240
you enter in the mobile app and you have

448
00:20:18,240 --> 00:20:20,640
a normal application that is asking for

449
00:20:20,640 --> 00:20:22,919
your username and your password to log

450
00:20:22,919 --> 00:20:25,980
in Imagine something very similar the

451
00:20:25,980 --> 00:20:28,320
code behind asking for your username and

452
00:20:28,320 --> 00:20:31,640
your and your password to login is here

453
00:20:31,640 --> 00:20:36,780
line 98 and line 99.

454
00:20:36,780 --> 00:20:41,400
in line 98 and line 99 we can see that

455
00:20:41,400 --> 00:20:44,580
we have the method get text which is

456
00:20:44,580 --> 00:20:47,700
responsible for getting the user input

457
00:20:47,700 --> 00:20:49,740
into the code base

458
00:20:49,740 --> 00:20:53,220
you need to remember that that's the

459
00:20:53,220 --> 00:20:56,520
room for error it's the place where a

460
00:20:56,520 --> 00:20:59,640
malicious user like myself can enter

461
00:20:59,640 --> 00:21:02,220
something malicious in the code base

462
00:21:02,220 --> 00:21:05,100
uh or a user that is trusted can enter

463
00:21:05,100 --> 00:21:07,200
something which is not malicious but

464
00:21:07,200 --> 00:21:09,960
that's the same place that's a place we

465
00:21:09,960 --> 00:21:13,380
need to focus our attention

466
00:21:13,380 --> 00:21:16,260
so if we plan a bit now and I'm back to

467
00:21:16,260 --> 00:21:18,299
my slides

468
00:21:18,299 --> 00:21:21,900
the source is essentially the get text

469
00:21:21,900 --> 00:21:23,820
method

470
00:21:23,820 --> 00:21:28,080
the way code 12 works is similar to SQL

471
00:21:28,080 --> 00:21:32,039
you need to find all the methods in the

472
00:21:32,039 --> 00:21:36,000
program and then filter just those that

473
00:21:36,000 --> 00:21:38,700
are the get text method

474
00:21:38,700 --> 00:21:40,440
so the way that we are going to write

475
00:21:40,440 --> 00:21:43,919
this code today is that first we are

476
00:21:43,919 --> 00:21:46,020
gonna find all the methods in the

477
00:21:46,020 --> 00:21:48,900
program no matter what they are doing

478
00:21:48,900 --> 00:21:52,140
and then I'm gonna specifically restrict

479
00:21:52,140 --> 00:21:54,960
those methods that are accepting user

480
00:21:54,960 --> 00:21:56,820
inputs

481
00:21:56,820 --> 00:22:00,299
so if I switch to my code editor

482
00:22:00,299 --> 00:22:02,760
starting from scratch I'm gonna import

483
00:22:02,760 --> 00:22:06,179
the standard library from java

484
00:22:06,179 --> 00:22:08,820
which is gonna give me all these nice

485
00:22:08,820 --> 00:22:13,200
out of the box ready made functions so I

486
00:22:13,200 --> 00:22:15,419
can be productive and I can write code

487
00:22:15,419 --> 00:22:17,159
faster

488
00:22:17,159 --> 00:22:19,620
some important Java

489
00:22:19,620 --> 00:22:23,340
and then like I said similar to SQL I

490
00:22:23,340 --> 00:22:27,840
can use from where select close like for

491
00:22:27,840 --> 00:22:29,640
example from all the methods of this

492
00:22:29,640 --> 00:22:32,940
code base give me some methods that meet

493
00:22:32,940 --> 00:22:35,820
some specific criteria and return those

494
00:22:35,820 --> 00:22:38,400
methods by the select

495
00:22:38,400 --> 00:22:40,799
let's first start since we are beginners

496
00:22:40,799 --> 00:22:43,679
now and uh in a few moments we are going

497
00:22:43,679 --> 00:22:46,740
to be knowing all the basics let's start

498
00:22:46,740 --> 00:22:47,700
from

499
00:22:47,700 --> 00:22:49,260
to

500
00:22:49,260 --> 00:22:52,860
keywords the from and the select in

501
00:22:52,860 --> 00:22:54,840
plain English I'm gonna ask the language

502
00:22:54,840 --> 00:22:57,840
to give me from all the methods in the

503
00:22:57,840 --> 00:23:01,140
program that are being invoked those all

504
00:23:01,140 --> 00:23:02,580
those methods

505
00:23:02,580 --> 00:23:06,000
so I'm gonna use a type which is called

506
00:23:06,000 --> 00:23:08,520
method access

507
00:23:08,520 --> 00:23:10,559
which is going to return all those

508
00:23:10,559 --> 00:23:12,659
access methods

509
00:23:12,659 --> 00:23:15,480
and if I hover on top of it I can get

510
00:23:15,480 --> 00:23:18,059
some nice help here a method access is

511
00:23:18,059 --> 00:23:20,100
an invocation of a method with a list of

512
00:23:20,100 --> 00:23:21,240
arguments

513
00:23:21,240 --> 00:23:24,120
I also want to have a variable which I

514
00:23:24,120 --> 00:23:26,880
can name call or I can name c i can name

515
00:23:26,880 --> 00:23:30,480
whatever I like and I want to have all

516
00:23:30,480 --> 00:23:32,039
these methods that are being invoked

517
00:23:32,039 --> 00:23:33,179
returns

518
00:23:33,179 --> 00:23:35,880
I'm gonna run this now

519
00:23:35,880 --> 00:23:39,120
and in fact on the right hand side I

520
00:23:39,120 --> 00:23:40,919
have all the methods that are being

521
00:23:40,919 --> 00:23:42,780
invoked in the program

522
00:23:42,780 --> 00:23:46,260
so if I click in here or here you can

523
00:23:46,260 --> 00:23:50,159
see where each method uh lands so by

524
00:23:50,159 --> 00:23:52,380
this I can also say that

525
00:23:52,380 --> 00:23:54,720
I can use codeql just to search my code

526
00:23:54,720 --> 00:23:56,880
and get get myself familiarized with the

527
00:23:56,880 --> 00:23:59,039
code not necessarily to pick security

528
00:23:59,039 --> 00:24:01,620
ruler abilities

529
00:24:01,620 --> 00:24:05,940
so let's get a bit more of help here uh

530
00:24:05,940 --> 00:24:08,520
let's be a bit more specific

531
00:24:08,520 --> 00:24:12,299
by restricting the invoked methods to

532
00:24:12,299 --> 00:24:14,820
just those that are receiving user

533
00:24:14,820 --> 00:24:16,860
inputs

534
00:24:16,860 --> 00:24:18,620
I can use

535
00:24:18,620 --> 00:24:22,140
the code completion functionality of my

536
00:24:22,140 --> 00:24:25,440
ID and get proposals of what functions I

537
00:24:25,440 --> 00:24:26,460
can use

538
00:24:26,460 --> 00:24:29,039
system I'm looking for an argument sorry

539
00:24:29,039 --> 00:24:31,140
I'm looking for a method that is

540
00:24:31,140 --> 00:24:35,220
specific method I can use get methods

541
00:24:35,220 --> 00:24:37,260
so if I hover a bit

542
00:24:37,260 --> 00:24:39,419
get the method gets you the methodox

543
00:24:39,419 --> 00:24:43,200
test by a specific methods it expects

544
00:24:43,200 --> 00:24:46,860
something specific so I can use further

545
00:24:46,860 --> 00:24:50,400
methods like the Hast qualified name

546
00:24:50,400 --> 00:24:54,840
which is expecting a package name a type

547
00:24:54,840 --> 00:24:56,700
and a method name

548
00:24:56,700 --> 00:24:59,460
so when I hover over you can see how I

549
00:24:59,460 --> 00:25:02,240
get the help here

550
00:25:02,760 --> 00:25:05,640
and until I complete the package which

551
00:25:05,640 --> 00:25:08,280
is Android dot widget here

552
00:25:08,280 --> 00:25:11,400
and the type which or the example with

553
00:25:11,400 --> 00:25:14,220
the animals where a lion is an animal we

554
00:25:14,220 --> 00:25:18,000
have the generic type of edit text

555
00:25:18,000 --> 00:25:20,280
and the specific method I'm looking for

556
00:25:20,280 --> 00:25:23,220
is the get text

557
00:25:23,220 --> 00:25:25,860
before I run this I just want to

558
00:25:25,860 --> 00:25:29,159
emphasize the chaining functionality how

559
00:25:29,159 --> 00:25:31,740
expressive it is and how I can use

560
00:25:31,740 --> 00:25:34,260
inheritance composition to get from one

561
00:25:34,260 --> 00:25:35,640
place to another

562
00:25:35,640 --> 00:25:37,860
so I just run this

563
00:25:37,860 --> 00:25:41,100
and I came up with the three invocations

564
00:25:41,100 --> 00:25:44,760
of the get text method in the program it

565
00:25:44,760 --> 00:25:47,039
doesn't mean that they are all

566
00:25:47,039 --> 00:25:50,520
vulnerable I just want to emphasize but

567
00:25:50,520 --> 00:25:55,559
where we are now is the the we know the

568
00:25:55,559 --> 00:25:57,240
places of the program that receive

569
00:25:57,240 --> 00:25:59,760
untrusted user input it can be malicious

570
00:25:59,760 --> 00:26:03,440
or it can be okay

571
00:26:03,659 --> 00:26:07,559
so if I go back so far we have all the

572
00:26:07,559 --> 00:26:09,720
methods of the program that are

573
00:26:09,720 --> 00:26:11,340
receiving user input

574
00:26:11,340 --> 00:26:14,700
let's now find the sink

575
00:26:14,700 --> 00:26:17,480
the sinks are the places in the program

576
00:26:17,480 --> 00:26:22,200
but you have S12 being executed

577
00:26:22,200 --> 00:26:25,500
specifically is the raw query method but

578
00:26:25,500 --> 00:26:27,720
the first argument of it by Nature

579
00:26:27,720 --> 00:26:30,299
because the rest of arguments are like

580
00:26:30,299 --> 00:26:33,779
decoration to the query being executed

581
00:26:33,779 --> 00:26:37,279
so if I go back to the code

582
00:26:37,320 --> 00:26:41,640
and I go to the line 147

583
00:26:41,640 --> 00:26:44,460
we can't see here that we indeed have

584
00:26:44,460 --> 00:26:47,100
zero query methods with the first

585
00:26:47,100 --> 00:26:50,220
argument being passed

586
00:26:50,220 --> 00:26:54,720
and that's exactly our Sig normally in

587
00:26:54,720 --> 00:26:57,419
my day-to-day job I would then go to the

588
00:26:57,419 --> 00:26:59,460
code and search for their query method

589
00:26:59,460 --> 00:27:01,740
manually because I will use code 12 to

590
00:27:01,740 --> 00:27:04,140
do this I will just familiarize myself

591
00:27:04,140 --> 00:27:07,380
with the language which is Java with the

592
00:27:07,380 --> 00:27:10,140
Android package and I will then know

593
00:27:10,140 --> 00:27:12,299
what are the pain points and what to

594
00:27:12,299 --> 00:27:14,880
look for I just want to show you where

595
00:27:14,880 --> 00:27:17,820
everything is invoked so that we are all

596
00:27:17,820 --> 00:27:20,940
more clear on the same page

597
00:27:20,940 --> 00:27:24,179
so the tactic that I'm gonna follow to

598
00:27:24,179 --> 00:27:26,880
pick up things in the program

599
00:27:26,880 --> 00:27:28,620
is the following

600
00:27:28,620 --> 00:27:31,440
I'm gonna start from all the methods in

601
00:27:31,440 --> 00:27:34,320
the program I'm gonna further restrict

602
00:27:34,320 --> 00:27:38,580
my input to those methods that are the

603
00:27:38,580 --> 00:27:40,980
raw query methods specifically

604
00:27:40,980 --> 00:27:43,799
but because I want to avoid false

605
00:27:43,799 --> 00:27:47,039
positive reduce the pressure to the

606
00:27:47,039 --> 00:27:49,980
security team and to the time that

607
00:27:49,980 --> 00:27:52,559
security Engineers would spend to fix

608
00:27:52,559 --> 00:27:56,220
stuff and developers etc etc

609
00:27:56,220 --> 00:27:59,820
I will be more specific and I will only

610
00:27:59,820 --> 00:28:02,940
ask for the first argument of the raw

611
00:28:02,940 --> 00:28:06,480
query method if that first argument is

612
00:28:06,480 --> 00:28:09,539
actually being set I know that I have

613
00:28:09,539 --> 00:28:11,279
things

614
00:28:11,279 --> 00:28:14,159
so if I go now back to my code and I can

615
00:28:14,159 --> 00:28:16,140
code this

616
00:28:16,140 --> 00:28:18,600
on top I have the same functionality

617
00:28:18,600 --> 00:28:23,279
like before for example we get method

618
00:28:23,279 --> 00:28:25,679
has qualified name you see some change

619
00:28:25,679 --> 00:28:27,600
here

620
00:28:27,600 --> 00:28:29,520
um we are not on the Android dot widget

621
00:28:29,520 --> 00:28:32,700
we are looking for the net SQL Cipher

622
00:28:32,700 --> 00:28:34,440
database

623
00:28:34,440 --> 00:28:37,940
the sqlite database is the

624
00:28:37,940 --> 00:28:41,460
hierarchically higher methods and

625
00:28:41,460 --> 00:28:43,080
specifically we are looking for the raw

626
00:28:43,080 --> 00:28:45,600
query but like we said we are looking

627
00:28:45,600 --> 00:28:48,179
for the first argument of the raw query

628
00:28:48,179 --> 00:28:51,600
method so we avoid false positives

629
00:28:51,600 --> 00:28:53,880
so I can use

630
00:28:53,880 --> 00:28:56,340
The Logical features of the language

631
00:28:56,340 --> 00:29:00,480
here by using the end operator

632
00:29:00,480 --> 00:29:02,880
and further restrict

633
00:29:02,880 --> 00:29:05,820
um the call so I can say

634
00:29:05,820 --> 00:29:09,779
that's what we are looking for is the

635
00:29:09,779 --> 00:29:13,700
argument in the first

636
00:29:13,919 --> 00:29:17,700
uh position before the comma so I'm also

637
00:29:17,700 --> 00:29:20,220
introducing another variable here which

638
00:29:20,220 --> 00:29:22,860
is the variable argument which is of

639
00:29:22,860 --> 00:29:25,740
type expression because anything that is

640
00:29:25,740 --> 00:29:28,080
passed inside a method like get argument

641
00:29:28,080 --> 00:29:31,940
or there are clear methods is of type

642
00:29:31,940 --> 00:29:35,640
expression and it's an argument

643
00:29:35,640 --> 00:29:38,460
so I want to be more specific here so

644
00:29:38,460 --> 00:29:40,980
I'm looking for calls in the Raw query

645
00:29:40,980 --> 00:29:42,240
methods

646
00:29:42,240 --> 00:29:43,640
where

647
00:29:43,640 --> 00:29:47,340
the argument is the one

648
00:29:47,340 --> 00:29:49,620
in index

649
00:29:49,620 --> 00:29:52,919
sorry uh we are the argument

650
00:29:52,919 --> 00:29:56,039
is the call to that row query method in

651
00:29:56,039 --> 00:29:57,120
index

652
00:29:57,120 --> 00:29:58,440
zero

653
00:29:58,440 --> 00:30:00,960
because we are software Engineers index

654
00:30:00,960 --> 00:30:04,620
0 is the first argument

655
00:30:04,620 --> 00:30:08,460
so in plain English this query here says

656
00:30:08,460 --> 00:30:11,399
get me all the invocations to the raw

657
00:30:11,399 --> 00:30:14,159
query methods that are having the first

658
00:30:14,159 --> 00:30:18,120
argument being set

659
00:30:18,120 --> 00:30:22,679
so far so good we have sources the sinks

660
00:30:22,679 --> 00:30:25,380
what we are looking for is confirmed

661
00:30:25,380 --> 00:30:29,340
data flow from sources to syncs

662
00:30:29,340 --> 00:30:33,480
without confirm data flow there's no SQL

663
00:30:33,480 --> 00:30:36,539
injection vulnerability happening

664
00:30:36,539 --> 00:30:38,940
and now I'm gonna show you the real

665
00:30:38,940 --> 00:30:42,179
power of the language

666
00:30:42,179 --> 00:30:45,960
by showing you the data flow template

667
00:30:45,960 --> 00:30:49,140
I didn't write this code this code was

668
00:30:49,140 --> 00:30:52,320
ready-made from the language maybe the

669
00:30:52,320 --> 00:30:54,600
NASA team wrote this code maybe my team

670
00:30:54,600 --> 00:30:56,580
will this code or someone else from the

671
00:30:56,580 --> 00:30:57,600
community

672
00:30:57,600 --> 00:31:00,240
well it is asked from me is just to fill

673
00:31:00,240 --> 00:31:03,720
the students here in line 15 and line 19

674
00:31:03,720 --> 00:31:06,179
with the functions that we've done

675
00:31:06,179 --> 00:31:09,120
before for search tests and things

676
00:31:09,120 --> 00:31:11,820
if I explain the code a bit here

677
00:31:11,820 --> 00:31:14,520
on top you have some metadata that are

678
00:31:14,520 --> 00:31:16,140
coming with the language you don't need

679
00:31:16,140 --> 00:31:19,140
to bother with them then you have the

680
00:31:19,140 --> 00:31:21,659
Java Library being push that alongside

681
00:31:21,659 --> 00:31:23,940
some other libraries that are going to

682
00:31:23,940 --> 00:31:27,480
help with the data visualization

683
00:31:27,480 --> 00:31:29,520
and the data flow which is going to help

684
00:31:29,520 --> 00:31:32,940
us to find confirmed flow from data

685
00:31:32,940 --> 00:31:34,799
sources and seeks

686
00:31:34,799 --> 00:31:37,380
then you have the real power of the

687
00:31:37,380 --> 00:31:40,679
language which is what we bring on top

688
00:31:40,679 --> 00:31:43,380
of SQL which is

689
00:31:43,380 --> 00:31:45,480
the object oriented nature you have a

690
00:31:45,480 --> 00:31:49,080
class here a class that extends its

691
00:31:49,080 --> 00:31:52,679
super type getting everything from its

692
00:31:52,679 --> 00:31:54,960
super type so it can make you more

693
00:31:54,960 --> 00:31:58,380
productive less errors much easier to

694
00:31:58,380 --> 00:32:01,820
write less for more

695
00:32:02,039 --> 00:32:04,320
um in here you see

696
00:32:04,320 --> 00:32:07,380
The Constructor that you can use to

697
00:32:07,380 --> 00:32:09,240
initiate further classes

698
00:32:09,240 --> 00:32:11,039
and then I want to speak a bit about

699
00:32:11,039 --> 00:32:14,220
credit Gates credit Gates is the same

700
00:32:14,220 --> 00:32:15,960
thing with functions in other language

701
00:32:15,960 --> 00:32:17,640
or methods

702
00:32:17,640 --> 00:32:20,940
it allows they allow you to reuse logic

703
00:32:20,940 --> 00:32:24,659
they can encapsulate portions of logic

704
00:32:24,659 --> 00:32:27,539
and create functions that are reusable

705
00:32:27,539 --> 00:32:30,659
so since we have time we are 33 minutes

706
00:32:30,659 --> 00:32:31,860
past

707
00:32:31,860 --> 00:32:35,460
let me show you how I can create how I

708
00:32:35,460 --> 00:32:37,860
can transform this to be a predicate so

709
00:32:37,860 --> 00:32:39,659
I don't write the same code over and

710
00:32:39,659 --> 00:32:40,799
over again

711
00:32:40,799 --> 00:32:44,100
uh and I give my team reusable code so

712
00:32:44,100 --> 00:32:46,200
for example if I create a predicate here

713
00:32:46,200 --> 00:32:49,679
and I made I name it sync that is

714
00:32:49,679 --> 00:32:53,700
expecting a method access and also an

715
00:32:53,700 --> 00:32:55,380
argument

716
00:32:55,380 --> 00:32:57,360
I can copy and paste what is in the

717
00:32:57,360 --> 00:32:59,460
where clause

718
00:32:59,460 --> 00:33:01,380
like that

719
00:33:01,380 --> 00:33:02,820
be

720
00:33:02,820 --> 00:33:06,299
and in here I don't need this I'm just

721
00:33:06,299 --> 00:33:07,559
gonna use

722
00:33:07,559 --> 00:33:10,320
the predicate from above passing inside

723
00:33:10,320 --> 00:33:13,559
the call and the argument so if we run

724
00:33:13,559 --> 00:33:15,860
this

725
00:33:16,980 --> 00:33:19,260
on the right you are gonna see that we

726
00:33:19,260 --> 00:33:21,419
arrive at those raw query invocations

727
00:33:21,419 --> 00:33:25,559
that the first argument is being set

728
00:33:25,559 --> 00:33:27,299
so back to the

729
00:33:27,299 --> 00:33:30,179
code here I also want to introduce

730
00:33:30,179 --> 00:33:33,179
another keyword that I find very very

731
00:33:33,179 --> 00:33:36,059
useful and very readable which is the

732
00:33:36,059 --> 00:33:39,240
exists keyword

733
00:33:39,240 --> 00:33:42,120
um I like to joke a bit about it is less

734
00:33:42,120 --> 00:33:45,299
context is more so for example I'm gonna

735
00:33:45,299 --> 00:33:46,380
delete

736
00:33:46,380 --> 00:33:48,659
the fact that we have method calls here

737
00:33:48,659 --> 00:33:50,220
because at the end of the day

738
00:33:50,220 --> 00:33:52,640
vulnerabilities start with method cost

739
00:33:52,640 --> 00:33:56,760
so I'm completely deleting the method

740
00:33:56,760 --> 00:33:58,620
code here

741
00:33:58,620 --> 00:34:02,340
the sync is not expecting an argument

742
00:34:02,340 --> 00:34:05,159
and I can use the exist keyword which

743
00:34:05,159 --> 00:34:08,699
goes like that there exists

744
00:34:08,699 --> 00:34:11,658
a method access

745
00:34:11,940 --> 00:34:14,720
such that

746
00:34:16,020 --> 00:34:18,839
this and this happens

747
00:34:18,839 --> 00:34:22,320
so in plain English here we have

748
00:34:22,320 --> 00:34:24,719
a variable that

749
00:34:24,719 --> 00:34:29,520
lives and dies inside the context of the

750
00:34:29,520 --> 00:34:32,219
methods which makes your code much

751
00:34:32,219 --> 00:34:35,659
faster much readable much more readable

752
00:34:35,659 --> 00:34:39,239
way less confusion for a team to

753
00:34:39,239 --> 00:34:41,760
understand what is this guy talking

754
00:34:41,760 --> 00:34:42,960
about

755
00:34:42,960 --> 00:34:44,940
so if we run this code

756
00:34:44,940 --> 00:34:47,399
we expect to have the exact same results

757
00:34:47,399 --> 00:34:50,000
as before

758
00:34:50,219 --> 00:34:54,599
so having said this let's go back here

759
00:34:54,599 --> 00:34:57,420
and fill that through this

760
00:34:57,420 --> 00:34:59,400
so I'm gonna use the same tactic as

761
00:34:59,400 --> 00:35:02,160
before there exists a medical

762
00:35:02,160 --> 00:35:05,220
such dots when this method is the get

763
00:35:05,220 --> 00:35:06,240
text

764
00:35:06,240 --> 00:35:09,599
I know that I have untrusted user input

765
00:35:09,599 --> 00:35:13,079
entering my code base

766
00:35:13,079 --> 00:35:16,200
so if I copy and paste this

767
00:35:16,200 --> 00:35:18,799
here

768
00:35:19,619 --> 00:35:22,280
here

769
00:35:23,880 --> 00:35:25,740
the final thing I want to show you from

770
00:35:25,740 --> 00:35:28,560
the presentation is this idea for notes

771
00:35:28,560 --> 00:35:31,800
uh and you see that notes is a special

772
00:35:31,800 --> 00:35:35,280
type in the library data flow here

773
00:35:35,280 --> 00:35:37,380
because if I switch back

774
00:35:37,380 --> 00:35:40,980
we'll present data flow by nodes you

775
00:35:40,980 --> 00:35:46,260
have this idea of a node a having a flow

776
00:35:46,260 --> 00:35:49,619
to another node node D so in the

777
00:35:49,619 --> 00:35:53,099
specific template I show you we need to

778
00:35:53,099 --> 00:35:56,220
represent everything under the node type

779
00:35:56,220 --> 00:35:58,320
in the same way before I use the

780
00:35:58,320 --> 00:36:00,720
Expression type and the method access

781
00:36:00,720 --> 00:36:04,380
type I now need to use the node type so

782
00:36:04,380 --> 00:36:06,839
that I speak the same language with my

783
00:36:06,839 --> 00:36:10,440
template which what I mean is that

784
00:36:10,440 --> 00:36:13,500
well there's a method access that is the

785
00:36:13,500 --> 00:36:15,359
get text method access

786
00:36:15,359 --> 00:36:18,000
I want this node

787
00:36:18,000 --> 00:36:20,520
to equal

788
00:36:20,520 --> 00:36:21,900
but

789
00:36:21,900 --> 00:36:23,400
method call

790
00:36:23,400 --> 00:36:27,599
so if you imagine that on the left here

791
00:36:27,599 --> 00:36:30,900
we have the get text expressed as a node

792
00:36:30,900 --> 00:36:34,320
on the other hand side for the sync we

793
00:36:34,320 --> 00:36:36,839
are gonna have a specific argument the

794
00:36:36,839 --> 00:36:39,180
first argument of the rockware method

795
00:36:39,180 --> 00:36:42,119
uh being the low destination

796
00:36:42,119 --> 00:36:46,440
so if we express this in the same way

797
00:36:46,440 --> 00:36:50,420
there exists a metal access

798
00:36:52,920 --> 00:36:56,339
such that something happens which is

799
00:36:56,339 --> 00:36:58,020
more specific it's ready from here

800
00:36:58,020 --> 00:36:59,460
actually

801
00:36:59,460 --> 00:37:03,619
for coping and paste that

802
00:37:05,160 --> 00:37:07,800
the only change I need to do is that

803
00:37:07,800 --> 00:37:10,140
here we don't have the expression

804
00:37:10,140 --> 00:37:12,599
argument we have the node expression

805
00:37:12,599 --> 00:37:14,760
which is like that okay

806
00:37:14,760 --> 00:37:17,640
if I run this code you are gonna see the

807
00:37:17,640 --> 00:37:20,400
real power of code 12 which are are

808
00:37:20,400 --> 00:37:24,660
confirmed SQL findings with specific

809
00:37:24,660 --> 00:37:28,680
Pathways without any

810
00:37:28,680 --> 00:37:30,420
um false positives

811
00:37:30,420 --> 00:37:32,880
so I just run a code and on the on the

812
00:37:32,880 --> 00:37:35,520
right you can see we have two SQL

813
00:37:35,520 --> 00:37:37,680
injection vulnerabilities to confirmed

814
00:37:37,680 --> 00:37:40,619
findings let's break them down

815
00:37:40,619 --> 00:37:44,339
the first finding has two paths

816
00:37:44,339 --> 00:37:47,160
so a security professional I need to fix

817
00:37:47,160 --> 00:37:50,040
all the paths but from my experience

818
00:37:50,040 --> 00:37:53,400
from before I can guarantee that the

819
00:37:53,400 --> 00:37:56,000
best teams I've seen in my life can fix

820
00:37:56,000 --> 00:37:58,640
one or two

821
00:37:58,640 --> 00:38:01,740
paths at a time they need to run more

822
00:38:01,740 --> 00:38:04,740
tests and they need to fail more to fix

823
00:38:04,740 --> 00:38:06,480
everything

824
00:38:06,480 --> 00:38:09,599
if I go here and I click on the path

825
00:38:09,599 --> 00:38:13,980
I can first click on get text to see the

826
00:38:13,980 --> 00:38:18,180
first let's say uh

827
00:38:18,180 --> 00:38:20,040
half of the journey that this

828
00:38:20,040 --> 00:38:22,740
vulnerability starts from so the first

829
00:38:22,740 --> 00:38:26,160
is where the first untrusted user input

830
00:38:26,160 --> 00:38:28,020
is getting to the language which is here

831
00:38:28,020 --> 00:38:30,119
line 98.

832
00:38:30,119 --> 00:38:32,880
let me zoom out a bit

833
00:38:32,880 --> 00:38:35,040
let's follow the flow

834
00:38:35,040 --> 00:38:37,920
if we click on check name you have that

835
00:38:37,920 --> 00:38:42,180
this check name is now passed into a try

836
00:38:42,180 --> 00:38:45,079
catch block where we try to understand

837
00:38:45,079 --> 00:38:48,020
by using the login method

838
00:38:48,020 --> 00:38:51,720
if the user has passed credentials that

839
00:38:51,720 --> 00:38:54,420
are indeed part of the database I.E if

840
00:38:54,420 --> 00:38:57,599
the username exists in the database and

841
00:38:57,599 --> 00:39:00,359
if I now follow the login method

842
00:39:00,359 --> 00:39:02,520
I go to the signature of the login

843
00:39:02,520 --> 00:39:06,060
method that is expecting a username

844
00:39:06,060 --> 00:39:07,440
Etc

845
00:39:07,440 --> 00:39:11,760
and then these specific flow continues

846
00:39:11,760 --> 00:39:15,960
into the raw query where you have the

847
00:39:15,960 --> 00:39:19,140
place in the program that is being

848
00:39:19,140 --> 00:39:21,720
uh pass to the Rock query method which

849
00:39:21,720 --> 00:39:23,160
is going to execute

850
00:39:23,160 --> 00:39:25,740
an SQL command

851
00:39:25,740 --> 00:39:28,320
that's the very first flow

852
00:39:28,320 --> 00:39:30,960
the next flow is this one

853
00:39:30,960 --> 00:39:34,079
which is actually the exact same way of

854
00:39:34,079 --> 00:39:37,380
doing things but instead of checking

855
00:39:37,380 --> 00:39:40,440
that the user has passed the correct

856
00:39:40,440 --> 00:39:42,119
username and password so the login

857
00:39:42,119 --> 00:39:44,119
method

858
00:39:44,119 --> 00:39:48,780
equals true it now equals false so I

859
00:39:48,780 --> 00:39:49,920
want you to notice the difference

860
00:39:49,920 --> 00:39:54,000
between the lines 102

861
00:39:54,359 --> 00:39:56,599
and the lines

862
00:39:56,599 --> 00:40:01,200
116. you have the exact same flow but

863
00:40:01,200 --> 00:40:03,780
the one equals true the other equals

864
00:40:03,780 --> 00:40:07,260
false in reality they are both

865
00:40:07,260 --> 00:40:09,359
vulnerabilities

866
00:40:09,359 --> 00:40:12,359
I've seen many teams fixing just the one

867
00:40:12,359 --> 00:40:14,579
of the two but in reality you need to

868
00:40:14,579 --> 00:40:16,920
fix everything

869
00:40:16,920 --> 00:40:20,520
so SQL the code 12 will give you all the

870
00:40:20,520 --> 00:40:21,720
pathways

871
00:40:21,720 --> 00:40:24,119
to that place

872
00:40:24,119 --> 00:40:27,660
and in here we have another confirmed

873
00:40:27,660 --> 00:40:30,900
finding that is now the password

874
00:40:30,900 --> 00:40:33,960
following the exact same Journey

875
00:40:33,960 --> 00:40:36,000
to uh

876
00:40:36,000 --> 00:40:37,680
the database

877
00:40:37,680 --> 00:40:41,160
and here that's the one for the password

878
00:40:41,160 --> 00:40:43,920
so I now want to highlight that

879
00:40:43,920 --> 00:40:47,280
okay this is a very simple example but

880
00:40:47,280 --> 00:40:49,800
in a real code base

881
00:40:49,800 --> 00:40:53,579
with a flow between tens or

882
00:40:53,579 --> 00:40:55,320
hundreds

883
00:40:55,320 --> 00:40:58,440
of places you will need something very

884
00:40:58,440 --> 00:41:01,619
powerful like code 12 to give you all

885
00:41:01,619 --> 00:41:04,500
the confirmed flow of the data so that

886
00:41:04,500 --> 00:41:07,680
you don't have to follow manual in

887
00:41:07,680 --> 00:41:09,900
general what you do manually is very

888
00:41:09,900 --> 00:41:14,400
error prone and in cases specifically

889
00:41:14,400 --> 00:41:18,660
when you have this kind of

890
00:41:18,660 --> 00:41:21,540
um let's say equals true equals false

891
00:41:21,540 --> 00:41:27,000
and all these flow between the codebacks

892
00:41:27,000 --> 00:41:29,520
if I go back to my slides

893
00:41:29,520 --> 00:41:32,160
I promise to show you how you can enable

894
00:41:32,160 --> 00:41:36,000
codeql passively so that you can use out

895
00:41:36,000 --> 00:41:37,920
of the box all these queries that my

896
00:41:37,920 --> 00:41:40,200
team is writing massage writing other

897
00:41:40,200 --> 00:41:41,880
Enterprise teams are writing in the back

898
00:41:41,880 --> 00:41:43,079
counters

899
00:41:43,079 --> 00:41:46,440
it's very easy it's a few clicks if I

900
00:41:46,440 --> 00:41:49,320
head to my personal profile

901
00:41:49,320 --> 00:41:52,020
and I pick one of my open source

902
00:41:52,020 --> 00:41:55,940
projects like for example Matthew paxos

903
00:41:57,300 --> 00:42:00,060
you can see here that I can just

904
00:42:00,060 --> 00:42:03,359
navigate to security

905
00:42:03,359 --> 00:42:06,660
code scanning alerts click setup code

906
00:42:06,660 --> 00:42:09,180
scanning

907
00:42:09,180 --> 00:42:12,599
configure scanning tool

908
00:42:12,599 --> 00:42:16,260
and I can choose code URL analysis which

909
00:42:16,260 --> 00:42:17,760
is here

910
00:42:17,760 --> 00:42:20,040
so I click configure

911
00:42:20,040 --> 00:42:23,040
and there's a yaml file being created

912
00:42:23,040 --> 00:42:27,060
for me I can just commit this file and

913
00:42:27,060 --> 00:42:29,640
every time I'm gonna commit and push

914
00:42:29,640 --> 00:42:32,820
code uh I'm gonna get alerts I'm gonna

915
00:42:32,820 --> 00:42:36,060
show you how they look I can specify

916
00:42:36,060 --> 00:42:38,339
which language I want to pick Alex from

917
00:42:38,339 --> 00:42:41,339
and I also want to specify how vocal is

918
00:42:41,339 --> 00:42:43,500
the language like for example I want the

919
00:42:43,500 --> 00:42:45,900
language to touch I want the alerts to

920
00:42:45,900 --> 00:42:49,040
touch on quality stuff or be very like

921
00:42:49,040 --> 00:42:51,900
uh conservative and just give me back

922
00:42:51,900 --> 00:42:53,940
from findings

923
00:42:53,940 --> 00:42:56,460
uh so back to the slides the next thing

924
00:42:56,460 --> 00:42:59,040
I want to show you is how alerts are

925
00:42:59,040 --> 00:43:00,780
looking

926
00:43:00,780 --> 00:43:04,020
so if I go to another code I have

927
00:43:04,020 --> 00:43:07,980
another project I go to security

928
00:43:07,980 --> 00:43:11,040
I click so here code scanning is already

929
00:43:11,040 --> 00:43:15,420
up I click oh sorry not on the secrets I

930
00:43:15,420 --> 00:43:17,400
need to click on code scanning alerts

931
00:43:17,400 --> 00:43:19,140
few alerts

932
00:43:19,140 --> 00:43:21,540
and I can see here that I have nine open

933
00:43:21,540 --> 00:43:25,980
alerts and five that I've closed

934
00:43:25,980 --> 00:43:28,380
um if I click on one of the alerts

935
00:43:28,380 --> 00:43:31,200
you have the explanation here I have use

936
00:43:31,200 --> 00:43:33,839
of protein or weak cryptographic hashing

937
00:43:33,839 --> 00:43:36,300
algorithm on sensitive data

938
00:43:36,300 --> 00:43:39,599
you see exactly where the others are

939
00:43:39,599 --> 00:43:40,680
carrying

940
00:43:40,680 --> 00:43:43,319
you have some nice explanation that is

941
00:43:43,319 --> 00:43:46,020
clickable and also on the right you can

942
00:43:46,020 --> 00:43:49,619
see the pattern CW is that you can click

943
00:43:49,619 --> 00:43:53,119
and understand more about them

944
00:43:53,280 --> 00:43:54,660
uh

945
00:43:54,660 --> 00:43:57,540
that's how another Earth is looking

946
00:43:57,540 --> 00:43:59,700
and finally

947
00:43:59,700 --> 00:44:03,000
to start your journey these are some

948
00:44:03,000 --> 00:44:05,760
resources that I found useful in my own

949
00:44:05,760 --> 00:44:06,780
Journey

950
00:44:06,780 --> 00:44:09,420
codehere.com security lab help come get

951
00:44:09,420 --> 00:44:13,319
involved some ctfs that we run

952
00:44:13,319 --> 00:44:17,280
some time ago in general like I said you

953
00:44:17,280 --> 00:44:18,900
don't start from scratch

954
00:44:18,900 --> 00:44:22,079
you start and build on top of code that

955
00:44:22,079 --> 00:44:24,180
already exists

956
00:44:24,180 --> 00:44:26,280
and uh

957
00:44:26,280 --> 00:44:28,260
you can be very productive very easily

958
00:44:28,260 --> 00:44:30,240
with the templates like the one I use

959
00:44:30,240 --> 00:44:32,400
for the demo

960
00:44:32,400 --> 00:44:33,780
finally

961
00:44:33,780 --> 00:44:36,000
there are some new initiative that my

962
00:44:36,000 --> 00:44:39,720
team is has started over the past two

963
00:44:39,720 --> 00:44:42,839
and a half months where we open our

964
00:44:42,839 --> 00:44:46,680
doors in in a project called Community

965
00:44:46,680 --> 00:44:50,280
office hours we welcome open source

966
00:44:50,280 --> 00:44:51,599
maintainers

967
00:44:51,599 --> 00:44:55,079
we sit down with them for an hour or

968
00:44:55,079 --> 00:44:57,300
more through different meetings and we

969
00:44:57,300 --> 00:45:00,839
can discuss the security surface of a

970
00:45:00,839 --> 00:45:03,140
program

971
00:45:03,300 --> 00:45:05,579
um what there are security problems are

972
00:45:05,579 --> 00:45:08,760
concerns often maintainers come to us

973
00:45:08,760 --> 00:45:11,940
and they don't know what they don't know

974
00:45:11,940 --> 00:45:13,619
in terms of security

975
00:45:13,619 --> 00:45:17,280
so we have helped them in defining their

976
00:45:17,280 --> 00:45:20,400
security policies we help them to

977
00:45:20,400 --> 00:45:23,940
understand how they can quickly

978
00:45:23,940 --> 00:45:25,579
and effectively

979
00:45:25,579 --> 00:45:28,560
notify the community about the potential

980
00:45:28,560 --> 00:45:31,260
vulnerability in their code base and

981
00:45:31,260 --> 00:45:33,119
this is something that the community has

982
00:45:33,119 --> 00:45:35,760
embraced and when we open some more

983
00:45:35,760 --> 00:45:38,880
slots you can find about them in GA

984
00:45:38,880 --> 00:45:41,220
security lab in Twitter

985
00:45:41,220 --> 00:45:43,560
we publish our research there we publish

986
00:45:43,560 --> 00:45:45,900
our educational content there and I

987
00:45:45,900 --> 00:45:47,819
would love to have more open source

988
00:45:47,819 --> 00:45:51,480
project so that our impact is

989
00:45:51,480 --> 00:45:53,700
um is growing more and more

990
00:45:53,700 --> 00:45:56,880
so I would like to thank you on exactly

991
00:45:56,880 --> 00:46:00,180
45 minutes uh I was upsetting you for

992
00:46:00,180 --> 00:46:03,420
having me and you for listening uh to me

993
00:46:03,420 --> 00:46:05,940
let's use the remaining time for

994
00:46:05,940 --> 00:46:07,800
questions and if you think about

995
00:46:07,800 --> 00:46:10,140
questions later I will be more than

996
00:46:10,140 --> 00:46:14,160
happy uh to contact me in in my own

997
00:46:14,160 --> 00:46:17,400
media like for example Twitter at jkcso

998
00:46:17,400 --> 00:46:21,319
or you can add me in

999
00:46:21,900 --> 00:46:24,540
and that was it I'm open for your

1000
00:46:24,540 --> 00:46:26,460
questions and let me stop sharing my

1001
00:46:26,460 --> 00:46:28,640
screen

1002
00:46:28,680 --> 00:46:30,960
thanks Joseph great talk

1003
00:46:30,960 --> 00:46:32,819
yes we've got we've got a couple of

1004
00:46:32,819 --> 00:46:34,619
questions coming in I'm going to start

1005
00:46:34,619 --> 00:46:36,000
off with a couple of simple ones

1006
00:46:36,000 --> 00:46:38,640
actually before we get to those so a lot

1007
00:46:38,640 --> 00:46:40,980
of people may be more familiar with

1008
00:46:40,980 --> 00:46:44,460
sast dust SCA those kind of kind of

1009
00:46:44,460 --> 00:46:46,980
terms so could you just clarify the high

1010
00:46:46,980 --> 00:46:51,599
level is it a dust tool is it a SAS tool

1011
00:46:51,599 --> 00:46:54,000
um is it neither of those just yeah

1012
00:46:54,000 --> 00:46:56,339
start off with that one that's a great

1013
00:46:56,339 --> 00:46:58,319
question Nathan and thanks so much the

1014
00:46:58,319 --> 00:47:01,380
audience for asking uh code ql is a SAS

1015
00:47:01,380 --> 00:47:02,940
tool

1016
00:47:02,940 --> 00:47:05,040
um I know that those two are very

1017
00:47:05,040 --> 00:47:08,520
helpful they can help you find things uh

1018
00:47:08,520 --> 00:47:11,160
out when you run real variables on them

1019
00:47:11,160 --> 00:47:15,000
and find things on the way cultural

1020
00:47:15,000 --> 00:47:18,480
doesn't run the code it doesn't is not

1021
00:47:18,480 --> 00:47:21,780
able to pick variables it's a SAS tool

1022
00:47:21,780 --> 00:47:23,700
but

1023
00:47:23,700 --> 00:47:25,680
um something very useful that I've seen

1024
00:47:25,680 --> 00:47:28,940
from clients in the community is that

1025
00:47:28,940 --> 00:47:34,460
some code URL alerts we are not 100

1026
00:47:34,460 --> 00:47:37,319
let's say

1027
00:47:37,319 --> 00:47:40,319
um correct at the time but through

1028
00:47:40,319 --> 00:47:42,900
specific data that they found with dust

1029
00:47:42,900 --> 00:47:46,280
tools they were indeed true code ql

1030
00:47:46,280 --> 00:47:50,520
alerts this means that the false

1031
00:47:50,520 --> 00:47:52,920
positives are very low and it's a it's a

1032
00:47:52,920 --> 00:47:54,900
product that they can it can complement

1033
00:47:54,900 --> 00:47:57,780
Your Dust a lot

1034
00:47:57,780 --> 00:48:00,300
I assume therefore that you can use the

1035
00:48:00,300 --> 00:48:02,400
output of Das scanners to then perhaps

1036
00:48:02,400 --> 00:48:05,160
Drive some queries within code ql for

1037
00:48:05,160 --> 00:48:06,540
other projects that you might have in

1038
00:48:06,540 --> 00:48:08,940
your organization exactly to reduce

1039
00:48:08,940 --> 00:48:11,220
their false positives and to have a more

1040
00:48:11,220 --> 00:48:14,579
data driven approach in you tailoring

1041
00:48:14,579 --> 00:48:16,859
your queries

1042
00:48:16,859 --> 00:48:20,280
okay so a specific question about

1043
00:48:20,280 --> 00:48:22,560
um advantages perhaps so where would you

1044
00:48:22,560 --> 00:48:24,480
see are the key advantages then between

1045
00:48:24,480 --> 00:48:28,520
something like code ql and a traditional

1046
00:48:28,520 --> 00:48:31,619
SCA or SAS tool that that you know

1047
00:48:31,619 --> 00:48:33,240
people on this are watching this video

1048
00:48:33,240 --> 00:48:35,460
or or viewing this will or perhaps

1049
00:48:35,460 --> 00:48:36,920
having their own organization today

1050
00:48:36,920 --> 00:48:39,599
that's another great question

1051
00:48:39,599 --> 00:48:40,800
um I think the three main

1052
00:48:40,800 --> 00:48:43,380
differentiators of code ql uh in

1053
00:48:43,380 --> 00:48:45,540
comparison to other tools is first of

1054
00:48:45,540 --> 00:48:48,839
all the 10 tracking functionality

1055
00:48:48,839 --> 00:48:51,300
um as we've seen in the demo in the data

1056
00:48:51,300 --> 00:48:53,640
flow we had at the end that's something

1057
00:48:53,640 --> 00:48:56,520
that other SAS tools are not so powerful

1058
00:48:56,520 --> 00:48:58,020
on

1059
00:48:58,020 --> 00:48:59,780
um which is very useful for security

1060
00:48:59,780 --> 00:49:02,280
vulnerability research at least

1061
00:49:02,280 --> 00:49:05,220
for someone who wants to follow a change

1062
00:49:05,220 --> 00:49:08,520
across the way see where data flows

1063
00:49:08,520 --> 00:49:11,819
where exactly in which situation like

1064
00:49:11,819 --> 00:49:14,040
when something is true or when something

1065
00:49:14,040 --> 00:49:16,680
is false is something that can save you

1066
00:49:16,680 --> 00:49:19,619
a lot of time and can make your fixing

1067
00:49:19,619 --> 00:49:22,859
process much much easier the second

1068
00:49:22,859 --> 00:49:25,260
thing I want to touch on is the open

1069
00:49:25,260 --> 00:49:27,359
source element of it

1070
00:49:27,359 --> 00:49:31,680
someone can enable code ql for free for

1071
00:49:31,680 --> 00:49:34,140
an open source project and benefit out

1072
00:49:34,140 --> 00:49:37,200
of the box for all these Collective

1073
00:49:37,200 --> 00:49:39,839
knowledge we've built all together as a

1074
00:49:39,839 --> 00:49:42,780
community for the past 10 years the fact

1075
00:49:42,780 --> 00:49:46,880
that teams like nasas my team with the

1076
00:49:46,880 --> 00:49:50,460
331 zero day ruler abilities other teams

1077
00:49:50,460 --> 00:49:52,740
that are public and we have spoke

1078
00:49:52,740 --> 00:49:54,660
publicly about and you can find our

1079
00:49:54,660 --> 00:49:56,280
interview and YouTube is the one for

1080
00:49:56,280 --> 00:49:59,520
Mercado Libre which is the Amazon of

1081
00:49:59,520 --> 00:50:01,740
South America

1082
00:50:01,740 --> 00:50:03,839
um they can also contribute queries

1083
00:50:03,839 --> 00:50:06,720
trust so this is very powerful when you

1084
00:50:06,720 --> 00:50:09,359
are an Enterprise or someone who wants

1085
00:50:09,359 --> 00:50:12,540
to have private repo you can build on

1086
00:50:12,540 --> 00:50:13,560
top of that

1087
00:50:13,560 --> 00:50:16,800
and finally the other thing that I think

1088
00:50:16,800 --> 00:50:20,220
differentiates us is that the amount of

1089
00:50:20,220 --> 00:50:23,160
time and the resources I don't want to

1090
00:50:23,160 --> 00:50:25,920
say resources and speak about people the

1091
00:50:25,920 --> 00:50:28,680
teams we have that they focus on

1092
00:50:28,680 --> 00:50:32,339
reducing false positives no query is

1093
00:50:32,339 --> 00:50:35,579
gonna make it to the database unless we

1094
00:50:35,579 --> 00:50:37,200
absolutely

1095
00:50:37,200 --> 00:50:40,440
that's Siri unless we absolutely reduced

1096
00:50:40,440 --> 00:50:44,819
to the uh minimum false positives uh

1097
00:50:44,819 --> 00:50:47,099
some people joke in my team and they are

1098
00:50:47,099 --> 00:50:49,800
like oh it's much easier for you to like

1099
00:50:49,800 --> 00:50:52,319
achieve this super amazing thing that is

1100
00:50:52,319 --> 00:50:54,599
I don't know once in a Million

1101
00:50:54,599 --> 00:50:58,319
van a query getting into our database

1102
00:50:58,319 --> 00:51:01,079
that is not polished for the minimum

1103
00:51:01,079 --> 00:51:04,920
false positives so these three

1104
00:51:04,920 --> 00:51:07,440
okay thank you and actually we've got a

1105
00:51:07,440 --> 00:51:09,119
follow-up question really around around

1106
00:51:09,119 --> 00:51:12,420
the time and around uh the maintenance

1107
00:51:12,420 --> 00:51:14,400
to create the tests especially if you're

1108
00:51:14,400 --> 00:51:16,680
in an organization which has some pretty

1109
00:51:16,680 --> 00:51:18,480
big applications that they've built

1110
00:51:18,480 --> 00:51:21,000
perhaps over a number of years and even

1111
00:51:21,000 --> 00:51:23,040
ones that perhaps haven't had code ql or

1112
00:51:23,040 --> 00:51:25,260
even any security scanning previously

1113
00:51:25,260 --> 00:51:27,119
what's the kind of

1114
00:51:27,119 --> 00:51:29,640
you know practical maintenance elements

1115
00:51:29,640 --> 00:51:31,500
that you could um you can give us your

1116
00:51:31,500 --> 00:51:34,040
experience about

1117
00:51:35,339 --> 00:51:38,760
I would say that it doesn't have a huge

1118
00:51:38,760 --> 00:51:43,440
overhead like you see on my demo iron I

1119
00:51:43,440 --> 00:51:46,440
specified specifically I specified the

1120
00:51:46,440 --> 00:51:49,800
get text method as the method where

1121
00:51:49,800 --> 00:51:52,980
untrusted user input is coming in

1122
00:51:52,980 --> 00:51:56,099
but anybody could just be way more

1123
00:51:56,099 --> 00:52:00,180
generic and just say all those methods

1124
00:52:00,180 --> 00:52:04,020
of type edit text that's if you remember

1125
00:52:04,020 --> 00:52:06,359
when I've used the hash clarified name I

1126
00:52:06,359 --> 00:52:09,240
use the package android.widget the

1127
00:52:09,240 --> 00:52:12,300
generic type edit text and then instead

1128
00:52:12,300 --> 00:52:15,780
of saying get text I will say any so an

1129
00:52:15,780 --> 00:52:18,000
organization with rapidly changing code

1130
00:52:18,000 --> 00:52:20,940
to avoid fragile queries they can be as

1131
00:52:20,940 --> 00:52:24,079
generic as possible they can use the

1132
00:52:24,079 --> 00:52:28,260
object-oriented in hrf code 12 by using

1133
00:52:28,260 --> 00:52:31,140
the generic types and then they can use

1134
00:52:31,140 --> 00:52:33,420
the keyword any so that they can get

1135
00:52:33,420 --> 00:52:36,059
started quickly without the false

1136
00:52:36,059 --> 00:52:38,220
positives and the overhead that an

1137
00:52:38,220 --> 00:52:41,220
organization will need

1138
00:52:41,220 --> 00:52:44,339
okay thanks um another question actually

1139
00:52:44,339 --> 00:52:46,319
is regarding

1140
00:52:46,319 --> 00:52:47,339
um

1141
00:52:47,339 --> 00:52:48,900
these other possible it's a very

1142
00:52:48,900 --> 00:52:50,640
powerful tool it's very obvious for me

1143
00:52:50,640 --> 00:52:52,380
from the demo how powerful at all it

1144
00:52:52,380 --> 00:52:54,839
actually is what else could we use it

1145
00:52:54,839 --> 00:52:56,700
for right you know we can obviously find

1146
00:52:56,700 --> 00:52:58,559
vulnerabilities I'm thinking whether

1147
00:52:58,559 --> 00:53:00,839
manual code reviews could possibly use

1148
00:53:00,839 --> 00:53:03,660
it peer reviews of code but what else

1149
00:53:03,660 --> 00:53:05,579
where else can we use it

1150
00:53:05,579 --> 00:53:07,859
I will say to that's another great

1151
00:53:07,859 --> 00:53:11,160
question I would say to to set your code

1152
00:53:11,160 --> 00:53:12,599
so

1153
00:53:12,599 --> 00:53:14,220
um I've told you about the zero day

1154
00:53:14,220 --> 00:53:17,400
vulnerability I found in 2018 I wish I

1155
00:53:17,400 --> 00:53:20,520
knew about codeql at the time uh the way

1156
00:53:20,520 --> 00:53:22,920
I found this vulnerability was by

1157
00:53:22,920 --> 00:53:26,280
reading the whole code for Bitcoin

1158
00:53:26,280 --> 00:53:30,119
that another project has support and I

1159
00:53:30,119 --> 00:53:31,859
found the vulnerability for that top 10

1160
00:53:31,859 --> 00:53:34,020
cryptocurrency that was uh for for

1161
00:53:34,020 --> 00:53:37,140
Bitcoin I didn't have or I didn't know

1162
00:53:37,140 --> 00:53:42,000
about coach at the time so I had to like

1163
00:53:42,000 --> 00:53:44,400
um manually go over the code and

1164
00:53:44,400 --> 00:53:47,040
establish mental relationships I go from

1165
00:53:47,040 --> 00:53:51,000
X to Y I could use code 12 for that I

1166
00:53:51,000 --> 00:53:53,880
could write a few lines of code to go

1167
00:53:53,880 --> 00:53:58,380
specifically to that method understand

1168
00:53:58,380 --> 00:54:01,619
um or Express in code where I want to go

1169
00:54:01,619 --> 00:54:05,280
next what I want to find instead of how

1170
00:54:05,280 --> 00:54:07,440
to find it and in general I'll search

1171
00:54:07,440 --> 00:54:11,220
for all those pain points in the code

1172
00:54:11,220 --> 00:54:12,660
um it can be just to familiarize

1173
00:54:12,660 --> 00:54:14,460
yourself with a code base not

1174
00:54:14,460 --> 00:54:16,500
specifically or necessarily for

1175
00:54:16,500 --> 00:54:18,540
vulnerability research

1176
00:54:18,540 --> 00:54:21,359
it's a method of querying your code as

1177
00:54:21,359 --> 00:54:24,059
if it was data

1178
00:54:24,059 --> 00:54:26,280
so how long does Coquille been around

1179
00:54:26,280 --> 00:54:28,260
then

1180
00:54:28,260 --> 00:54:31,740
um it's around for 10 years uh more than

1181
00:54:31,740 --> 00:54:33,900
that it's around 12 years originally

1182
00:54:33,900 --> 00:54:37,500
being created by semol a small startup

1183
00:54:37,500 --> 00:54:43,260
in words by 29 and then after 10 years

1184
00:54:43,260 --> 00:54:45,180
of implementation and working with

1185
00:54:45,180 --> 00:54:48,900
Enterprises it was acquired by GitHub in

1186
00:54:48,900 --> 00:54:50,640
late 2019

1187
00:54:50,640 --> 00:54:53,520
and GitHub was previously acquired in

1188
00:54:53,520 --> 00:54:57,780
2018 by Microsoft so think about uh code

1189
00:54:57,780 --> 00:55:01,260
12 being the code scanning feature of

1190
00:55:01,260 --> 00:55:05,460
GitHub and also for Microsoft

1191
00:55:05,460 --> 00:55:08,280
okay and just going back to actually

1192
00:55:08,280 --> 00:55:09,900
understanding element we talked about

1193
00:55:09,900 --> 00:55:13,079
SCA the dependent we didn't find

1194
00:55:13,079 --> 00:55:16,079
dependencies or insecure dependencies in

1195
00:55:16,079 --> 00:55:17,540
your code

1196
00:55:17,540 --> 00:55:19,440
[Music]

1197
00:55:19,440 --> 00:55:22,440
um I love this question uh because it's

1198
00:55:22,440 --> 00:55:24,900
so pressing many organizations are

1199
00:55:24,900 --> 00:55:26,960
suffering from Supply chains attacks

1200
00:55:26,960 --> 00:55:30,240
they are so prevalent these days

1201
00:55:30,240 --> 00:55:33,720
that way I will do it is the following

1202
00:55:33,720 --> 00:55:38,520
I would use 100 code Trail to scan the

1203
00:55:38,520 --> 00:55:41,640
dependencies I have if those are open

1204
00:55:41,640 --> 00:55:42,680
source

1205
00:55:42,680 --> 00:55:45,980
if those are not open source I will use

1206
00:55:45,980 --> 00:55:49,140
dependables in order to which is another

1207
00:55:49,140 --> 00:55:51,359
uh feature we have another product we

1208
00:55:51,359 --> 00:55:55,079
have to get notified about secure

1209
00:55:55,079 --> 00:55:58,260
versions so that I can update

1210
00:55:58,260 --> 00:55:59,700
um on the spot really

1211
00:55:59,700 --> 00:56:04,380
so to summarize here while code 12 is

1212
00:56:04,380 --> 00:56:06,839
a tool you can use to search for

1213
00:56:06,839 --> 00:56:09,059
vulnerabilities in code or general to

1214
00:56:09,059 --> 00:56:12,359
query your code you can query your

1215
00:56:12,359 --> 00:56:15,540
dependencies for vulnerabilities in if

1216
00:56:15,540 --> 00:56:17,400
those are open source in the same way

1217
00:56:17,400 --> 00:56:21,300
you will query your own code

1218
00:56:21,300 --> 00:56:23,640
okay thank you and can you just run

1219
00:56:23,640 --> 00:56:25,140
through the languages it supports as

1220
00:56:25,140 --> 00:56:26,940
well it's quite a long list and I think

1221
00:56:26,940 --> 00:56:29,280
it's been added to as well so of course

1222
00:56:29,280 --> 00:56:32,220
so uh My Demo was in Java other language

1223
00:56:32,220 --> 00:56:37,319
supported this subscript python go rust

1224
00:56:37,319 --> 00:56:43,200
C C plus plus C sharp and it's always

1225
00:56:43,200 --> 00:56:43,859
um

1226
00:56:43,859 --> 00:56:46,140
how can I say culture is always under

1227
00:56:46,140 --> 00:56:48,119
development there are huge software

1228
00:56:48,119 --> 00:56:50,579
engineering teams that are introducing

1229
00:56:50,579 --> 00:56:53,099
new features in the language based on

1230
00:56:53,099 --> 00:56:56,400
user feedback and new languages that are

1231
00:56:56,400 --> 00:57:00,960
coming is Ruby uh actually very soon in

1232
00:57:00,960 --> 00:57:03,300
a few months from now kotlin as well is

1233
00:57:03,300 --> 00:57:06,780
coming in many many languages are

1234
00:57:06,780 --> 00:57:08,960
underway that I can't really

1235
00:57:08,960 --> 00:57:12,180
publicly disclose unless they go on the

1236
00:57:12,180 --> 00:57:13,980
public roadmap

1237
00:57:13,980 --> 00:57:16,500
Okay cool so we're running out of time

1238
00:57:16,500 --> 00:57:17,520
we've got about a couple of minutes I

1239
00:57:17,520 --> 00:57:18,660
think trying to squeeze in perhaps

1240
00:57:18,660 --> 00:57:21,000
another one or two

1241
00:57:21,000 --> 00:57:23,099
um so if people were starting from

1242
00:57:23,099 --> 00:57:25,680
scratch can you just remind us how they

1243
00:57:25,680 --> 00:57:28,200
would get it onto their projects just a

1244
00:57:28,200 --> 00:57:29,940
very very quick overview of how they

1245
00:57:29,940 --> 00:57:31,859
might enable that

1246
00:57:31,859 --> 00:57:33,780
sure so

1247
00:57:33,780 --> 00:57:34,800
um

1248
00:57:34,800 --> 00:57:37,619
let me can I show my screen

1249
00:57:37,619 --> 00:57:40,980
yeah we've got about a minute so

1250
00:57:40,980 --> 00:57:43,319
yeah that's vs code you just go to

1251
00:57:43,319 --> 00:57:46,079
extensions which is here by clicking

1252
00:57:46,079 --> 00:57:48,660
extensions you write code 12.

1253
00:57:48,660 --> 00:57:50,760
that's the official code ql extension

1254
00:57:50,760 --> 00:57:52,740
when you install it you are gonna see

1255
00:57:52,740 --> 00:57:55,559
code ql being here and you can connect

1256
00:57:55,559 --> 00:57:58,740
uh with your with the code base you want

1257
00:57:58,740 --> 00:58:02,160
to query by passing in a GitHub URL

1258
00:58:02,160 --> 00:58:03,900
that's pretty much it

1259
00:58:03,900 --> 00:58:07,800
uh otherwise you need to compress create

1260
00:58:07,800 --> 00:58:09,599
an abstract syntax tree for your code

1261
00:58:09,599 --> 00:58:12,240
base and connect it to the

1262
00:58:12,240 --> 00:58:14,460
vs code it's very simple it takes one

1263
00:58:14,460 --> 00:58:16,559
click and from there you are going to

1264
00:58:16,559 --> 00:58:18,960
have all the queries that exist from

1265
00:58:18,960 --> 00:58:21,900
before all this Collective knowledge you

1266
00:58:21,900 --> 00:58:25,020
can either run the queries out of the

1267
00:58:25,020 --> 00:58:26,940
box or you can double clicking on

1268
00:58:26,940 --> 00:58:30,240
existing query like I did with the data

1269
00:58:30,240 --> 00:58:33,240
flow template and you can code a bit on

1270
00:58:33,240 --> 00:58:35,040
that if you want you can start from

1271
00:58:35,040 --> 00:58:37,020
scratch in the way we started with the

1272
00:58:37,020 --> 00:58:39,839
source great that's great Joe what a

1273
00:58:39,839 --> 00:58:41,940
great session really appreciate your

1274
00:58:41,940 --> 00:58:43,500
time I really appreciate you coming on

1275
00:58:43,500 --> 00:58:45,480
to appsec EU

1276
00:58:45,480 --> 00:58:46,680
um and once again

1277
00:58:46,680 --> 00:58:48,299
um yeah yeah thanks thanks for me and

1278
00:58:48,299 --> 00:58:50,220
everyone else for your time today thank

1279
00:58:50,220 --> 00:58:53,940
you so much for today and

1280
00:58:53,940 --> 00:58:55,980
um thanks so much it has been amazing

1281
00:58:55,980 --> 00:58:58,980
the organization was superb I'm very

1282
00:58:58,980 --> 00:59:00,839
looking forward to hear back from the

1283
00:59:00,839 --> 00:59:02,880
audience and to help everybody let's

1284
00:59:02,880 --> 00:59:05,480
keep in touch

