1
00:00:04,560 --> 00:00:07,859
hello everyone welcome to uh the last

2
00:00:07,859 --> 00:00:10,740
session uh before the keynote this is

3
00:00:10,740 --> 00:00:14,519
alemay I will be uh I am a volunteer in

4
00:00:14,519 --> 00:00:16,440
visawas community I am moderating

5
00:00:16,440 --> 00:00:20,039
session today I am working today uh with

6
00:00:20,039 --> 00:00:22,439
synopsis where I developed a partner

7
00:00:22,439 --> 00:00:25,560
said with a leading si uh synopsis is a

8
00:00:25,560 --> 00:00:28,140
leading application security provider

9
00:00:28,140 --> 00:00:30,900
so during the next 45 minutes you will

10
00:00:30,900 --> 00:00:35,280
be listening to uh Anders uh falc oh

11
00:00:35,280 --> 00:00:38,600
yeah we talk about Chief left security

12
00:00:38,600 --> 00:00:42,000
with a secure test pyramid please submit

13
00:00:42,000 --> 00:00:45,600
any questions you have in the Q a tab

14
00:00:45,600 --> 00:00:48,719
which is uh in on the Hoover platform

15
00:00:48,719 --> 00:00:51,600
yeah not here on on the YouTube

16
00:00:51,600 --> 00:00:55,199
uh I will leave 42 minutes as I said to

17
00:00:55,199 --> 00:00:57,780
address the talk and then you will have

18
00:00:57,780 --> 00:01:00,140
uh we will have all together 10 minutes

19
00:01:00,140 --> 00:01:03,660
uh for the Q a and the wrap-up

20
00:01:03,660 --> 00:01:06,119
and maybe a short word to introduce

21
00:01:06,119 --> 00:01:09,000
Andres he has over 20 years of

22
00:01:09,000 --> 00:01:11,100
experience in Enterprise application

23
00:01:11,100 --> 00:01:13,979
development he's working today as a

24
00:01:13,979 --> 00:01:16,680
Management Consultant for novatech

25
00:01:16,680 --> 00:01:20,159
Consulting in Germany and his focus is

26
00:01:20,159 --> 00:01:21,960
Agile development and Cloud native

27
00:01:21,960 --> 00:01:24,900
Enterprise Java apps using the complete

28
00:01:24,900 --> 00:01:27,299
spring platform I hope it was a good

29
00:01:27,299 --> 00:01:30,600
introduction Andreas you can always add

30
00:01:30,600 --> 00:01:33,479
a few more details if you wish and I

31
00:01:33,479 --> 00:01:36,540
hand over to you and I go in mute thank

32
00:01:36,540 --> 00:01:38,700
you okay thank you very much for the

33
00:01:38,700 --> 00:01:41,280
introduction so I share my screen

34
00:01:41,280 --> 00:01:43,880
foreign

35
00:01:46,439 --> 00:01:49,500
so welcome to my presentation on shift

36
00:01:49,500 --> 00:01:51,420
left security with the security test

37
00:01:51,420 --> 00:01:53,100
pyramid

38
00:01:53,100 --> 00:01:54,180
um

39
00:01:54,180 --> 00:01:57,240
so I make it short so I already

40
00:01:57,240 --> 00:02:00,960
introduced myself so I'm from Germany uh

41
00:02:00,960 --> 00:02:02,880
I just have to add that I'm also a

42
00:02:02,880 --> 00:02:04,619
member of the open web application

43
00:02:04,619 --> 00:02:07,500
security project so I always support

44
00:02:07,500 --> 00:02:10,739
stats for several years now and I'm also

45
00:02:10,739 --> 00:02:12,480
a member of the of my D Foundation

46
00:02:12,480 --> 00:02:14,819
because I'm also doing lots of stuff for

47
00:02:14,819 --> 00:02:17,819
identity access management

48
00:02:17,819 --> 00:02:19,260
um

49
00:02:19,260 --> 00:02:20,580
yeah

50
00:02:20,580 --> 00:02:22,800
so my company that's the only slide of

51
00:02:22,800 --> 00:02:24,360
my company just through our I.T

52
00:02:24,360 --> 00:02:27,780
consultancy doing different things and

53
00:02:27,780 --> 00:02:30,720
we provide some consultancy special for

54
00:02:30,720 --> 00:02:33,900
security like fat budgeting iot security

55
00:02:33,900 --> 00:02:37,580
or open ID connect

56
00:02:37,739 --> 00:02:41,280
um and now let's dive into uh our topic

57
00:02:41,280 --> 00:02:44,099
of the day the testing pyramid

58
00:02:44,099 --> 00:02:47,400
um I think most developers or builders

59
00:02:47,400 --> 00:02:51,180
in in overstorming play to uh know the

60
00:02:51,180 --> 00:02:53,340
testing pyramid already

61
00:02:53,340 --> 00:02:55,560
so the main idea of the testing pyramid

62
00:02:55,560 --> 00:02:59,940
is that it shows uh what type of tests

63
00:02:59,940 --> 00:03:01,920
you should have in your projects and and

64
00:03:01,920 --> 00:03:05,099
what amount of tests you should write

65
00:03:05,099 --> 00:03:07,860
um what about the feedback of the tests

66
00:03:07,860 --> 00:03:10,980
how big is the effort of tests right and

67
00:03:10,980 --> 00:03:13,019
so at the bottom you see the unit tests

68
00:03:13,019 --> 00:03:16,099
the unit tests built data

69
00:03:16,099 --> 00:03:18,840
should be that the most tests you build

70
00:03:18,840 --> 00:03:23,459
because this serves as kind of a safety

71
00:03:23,459 --> 00:03:25,860
net for the developers

72
00:03:25,860 --> 00:03:28,800
um so if you do refactorings build new

73
00:03:28,800 --> 00:03:31,440
things always run the unit tests to see

74
00:03:31,440 --> 00:03:34,860
if you broke anything with your new

75
00:03:34,860 --> 00:03:37,739
feature or refactoring and these tests

76
00:03:37,739 --> 00:03:40,500
tend to run really fast you get feedback

77
00:03:40,500 --> 00:03:42,900
in milliseconds

78
00:03:42,900 --> 00:03:43,620
um

79
00:03:43,620 --> 00:03:45,420
on the next level you have the service

80
00:03:45,420 --> 00:03:49,140
tests uh that's also sometimes are

81
00:03:49,140 --> 00:03:51,480
called integration tests in spring for

82
00:03:51,480 --> 00:03:55,319
example and these are a bit harder to uh

83
00:03:55,319 --> 00:03:56,280
write

84
00:03:56,280 --> 00:03:56,940
um

85
00:03:56,940 --> 00:04:01,560
typically also using database uh some

86
00:04:01,560 --> 00:04:05,519
other third-party Integrations maybe and

87
00:04:05,519 --> 00:04:07,379
have much slower feedback already

88
00:04:07,379 --> 00:04:10,620
because usually they start a container

89
00:04:10,620 --> 00:04:13,620
doing things and on the top level you

90
00:04:13,620 --> 00:04:15,659
have the UI tests

91
00:04:15,659 --> 00:04:18,298
that are written for example using

92
00:04:18,298 --> 00:04:21,298
selenium and these tests are the slowest

93
00:04:21,298 --> 00:04:24,660
tests with very slow feedback and these

94
00:04:24,660 --> 00:04:27,660
tests usually are halves to maintain

95
00:04:27,660 --> 00:04:29,699
so if you have written selenium tests so

96
00:04:29,699 --> 00:04:33,300
far you know that these tests tend to

97
00:04:33,300 --> 00:04:35,639
break very often

98
00:04:35,639 --> 00:04:37,919
um and so that's why you should not have

99
00:04:37,919 --> 00:04:40,560
too many of these tests

100
00:04:40,560 --> 00:04:43,500
um otherwise it's hard

101
00:04:43,500 --> 00:04:48,240
because of that high effort to take

102
00:04:48,240 --> 00:04:51,000
and there's some other alternative which

103
00:04:51,000 --> 00:04:53,759
I like a bit more uh the testing permit

104
00:04:53,759 --> 00:04:56,699
by Gregory and Lisa Crispin and so this

105
00:04:56,699 --> 00:04:58,800
is a bit more detailed one so at the

106
00:04:58,800 --> 00:05:00,419
bottom still you have to program our

107
00:05:00,419 --> 00:05:03,240
tests can be unit tests or component

108
00:05:03,240 --> 00:05:06,060
tests and above that you have the API

109
00:05:06,060 --> 00:05:09,540
service layer tests and usually this

110
00:05:09,540 --> 00:05:11,940
kind of tests already tests more

111
00:05:11,940 --> 00:05:16,139
business rules and function testing and

112
00:05:16,139 --> 00:05:18,660
on the top level you have the workflow

113
00:05:18,660 --> 00:05:23,520
tests so this uh tests don't need to be

114
00:05:23,520 --> 00:05:26,220
UI tests so it can also be some kind of

115
00:05:26,220 --> 00:05:27,960
workflow test that

116
00:05:27,960 --> 00:05:30,720
have a bigger workflow implemented just

117
00:05:30,720 --> 00:05:33,479
calling different rest API calls for

118
00:05:33,479 --> 00:05:36,120
example so it does not have to be

119
00:05:36,120 --> 00:05:37,979
selenium tests

120
00:05:37,979 --> 00:05:40,380
but still it is a bigger workflow with

121
00:05:40,380 --> 00:05:43,020
some some business uh facing thing to

122
00:05:43,020 --> 00:05:45,900
test and typically also runs a bit

123
00:05:45,900 --> 00:05:48,000
longer and the top level you have the

124
00:05:48,000 --> 00:05:50,460
manual testing and also explorative

125
00:05:50,460 --> 00:05:51,900
testing

126
00:05:51,900 --> 00:05:54,720
but now what about security

127
00:05:54,720 --> 00:05:56,580
um so in all these testing permits you

128
00:05:56,580 --> 00:05:59,220
never read about any security testing

129
00:05:59,220 --> 00:06:00,900
here

130
00:06:00,900 --> 00:06:01,560
um

131
00:06:01,560 --> 00:06:04,500
so if the developer asks itself so so

132
00:06:04,500 --> 00:06:07,620
what to do about security then typically

133
00:06:07,620 --> 00:06:10,979
the number one thing the developer sees

134
00:06:10,979 --> 00:06:14,039
is the ovas top 10 lists

135
00:06:14,039 --> 00:06:16,979
um the latest one is for from uh last

136
00:06:16,979 --> 00:06:18,660
year

137
00:06:18,660 --> 00:06:21,000
um with broken Access Control now number

138
00:06:21,000 --> 00:06:23,160
one so so before it it has been

139
00:06:23,160 --> 00:06:25,560
injection that's number one place that

140
00:06:25,560 --> 00:06:27,360
changed

141
00:06:27,360 --> 00:06:28,500
um

142
00:06:28,500 --> 00:06:30,479
I showed that over after 10 years

143
00:06:30,479 --> 00:06:33,120
especially because I'm really glad that

144
00:06:33,120 --> 00:06:36,840
they also added a completely new uh

145
00:06:36,840 --> 00:06:40,440
topic here to at least uh which is

146
00:06:40,440 --> 00:06:42,780
called insecure design

147
00:06:42,780 --> 00:06:44,699
and that is

148
00:06:44,699 --> 00:06:48,060
is completely into the main focus that

149
00:06:48,060 --> 00:06:51,180
I'm currently talking about so so it

150
00:06:51,180 --> 00:06:54,080
deals about how to find uh security

151
00:06:54,080 --> 00:06:57,479
requirements and how to to make sure

152
00:06:57,479 --> 00:07:00,240
that that you test for all the security

153
00:07:00,240 --> 00:07:01,319
stuff

154
00:07:01,319 --> 00:07:03,600
and so it starts with few threat

155
00:07:03,600 --> 00:07:06,000
modeling for all the critical parts of

156
00:07:06,000 --> 00:07:08,400
your application then integrate

157
00:07:08,400 --> 00:07:11,340
integrate the security language and all

158
00:07:11,340 --> 00:07:13,560
the controls into your user stories you

159
00:07:13,560 --> 00:07:18,240
are writing in your Sprints or kanban uh

160
00:07:18,240 --> 00:07:21,180
uh there are processes

161
00:07:21,180 --> 00:07:22,620
and then

162
00:07:22,620 --> 00:07:24,479
very important right unit and

163
00:07:24,479 --> 00:07:26,520
integration test to validate all the

164
00:07:26,520 --> 00:07:28,979
flows that you identified using fat

165
00:07:28,979 --> 00:07:30,599
modeling

166
00:07:30,599 --> 00:07:33,240
um or in your user stories and then also

167
00:07:33,240 --> 00:07:36,840
compile use cases or misuse cases uh so

168
00:07:36,840 --> 00:07:39,960
so don't only write a business facing

169
00:07:39,960 --> 00:07:43,139
user stories but also try to write a

170
00:07:43,139 --> 00:07:45,419
misuse cases for each business use case

171
00:07:45,419 --> 00:07:50,099
from the view of a an attacker so so

172
00:07:50,099 --> 00:07:52,620
what's typically uh

173
00:07:52,620 --> 00:07:54,900
that's an attacker want to achieve with

174
00:07:54,900 --> 00:07:59,060
your business facing use case

175
00:08:00,419 --> 00:08:04,080
so that the most critical thing uh if

176
00:08:04,080 --> 00:08:07,560
you think about security testing is you

177
00:08:07,560 --> 00:08:10,740
cannot really write good security tests

178
00:08:10,740 --> 00:08:13,139
if you don't have any clue about the

179
00:08:13,139 --> 00:08:15,539
security requirements so the first thing

180
00:08:15,539 --> 00:08:17,580
to do is find concrete security

181
00:08:17,580 --> 00:08:19,680
requirements

182
00:08:19,680 --> 00:08:22,560
um and in my experience this is a really

183
00:08:22,560 --> 00:08:25,319
big serious problem in typical projects

184
00:08:25,319 --> 00:08:26,879
because

185
00:08:26,879 --> 00:08:27,840
um

186
00:08:27,840 --> 00:08:31,199
uh very often managers go to their

187
00:08:31,199 --> 00:08:34,200
developers and tell their developers so

188
00:08:34,200 --> 00:08:37,620
uh the the project you are building that

189
00:08:37,620 --> 00:08:39,360
the application you are building should

190
00:08:39,360 --> 00:08:42,360
be secure sometimes they also tell so it

191
00:08:42,360 --> 00:08:45,180
should be secure according to the overs

192
00:08:45,180 --> 00:08:48,000
top 10 lists so so they also see the

193
00:08:48,000 --> 00:08:51,019
overs top 10 list as some kind of uh

194
00:08:51,019 --> 00:08:54,300
certification for the application which

195
00:08:54,300 --> 00:08:57,180
is typically not

196
00:08:57,180 --> 00:08:59,720
um just to to have a checklist to check

197
00:08:59,720 --> 00:09:03,779
for these kind of requirements but that

198
00:09:03,779 --> 00:09:05,820
does not help the developers pretty much

199
00:09:05,820 --> 00:09:07,740
so so

200
00:09:07,740 --> 00:09:08,580
um

201
00:09:08,580 --> 00:09:11,160
uh Additionally you won't tell the

202
00:09:11,160 --> 00:09:13,860
developers so the application has to be

203
00:09:13,860 --> 00:09:16,740
fast and has Fast Response times so

204
00:09:16,740 --> 00:09:19,380
every developer then ask spec what does

205
00:09:19,380 --> 00:09:21,899
that mean a fast response time 10

206
00:09:21,899 --> 00:09:24,920
milliseconds one seconds uh two seconds

207
00:09:24,920 --> 00:09:27,959
and for security requirements right

208
00:09:27,959 --> 00:09:30,839
requirements you need that as well you

209
00:09:30,839 --> 00:09:34,080
need concrete security requirements

210
00:09:34,080 --> 00:09:38,700
and and two helpful tools

211
00:09:38,700 --> 00:09:41,820
are here to help you to find concrete

212
00:09:41,820 --> 00:09:44,100
security requirements the number one

213
00:09:44,100 --> 00:09:46,560
thing is also from the overusp

214
00:09:46,560 --> 00:09:48,240
application security verification

215
00:09:48,240 --> 00:09:51,839
standard so you get a PDF document with

216
00:09:51,839 --> 00:09:54,080
a whole catalog of typical security

217
00:09:54,080 --> 00:09:57,360
requirements and you also can get a

218
00:09:57,360 --> 00:10:00,000
Excel sheet where you can then just

219
00:10:00,000 --> 00:10:03,420
check what is applicable for your

220
00:10:03,420 --> 00:10:06,420
project and then you have a complete

221
00:10:06,420 --> 00:10:09,899
list of typical security requirements

222
00:10:09,899 --> 00:10:13,260
that you can directly put in to your

223
00:10:13,260 --> 00:10:16,140
backlog into your Gyra issue tracker and

224
00:10:16,140 --> 00:10:18,060
something like that

225
00:10:18,060 --> 00:10:21,480
and additionally you also conduct threat

226
00:10:21,480 --> 00:10:25,140
marketing sessions to identify flaws in

227
00:10:25,140 --> 00:10:27,839
really critical security points in your

228
00:10:27,839 --> 00:10:30,180
application in your architecture

229
00:10:30,180 --> 00:10:32,399
and with these two helpful things you

230
00:10:32,399 --> 00:10:34,920
then identify all the security

231
00:10:34,920 --> 00:10:37,019
requirements

232
00:10:37,019 --> 00:10:40,440
um to help for testing these security

233
00:10:40,440 --> 00:10:44,040
requirements to to evolve tests out of

234
00:10:44,040 --> 00:10:45,779
these requirements then there's another

235
00:10:45,779 --> 00:10:47,700
helpful guide called the web security

236
00:10:47,700 --> 00:10:51,180
testing guide by the overs that is also

237
00:10:51,180 --> 00:10:54,120
used by professional penetration testers

238
00:10:54,120 --> 00:10:57,839
to conduct penetration tests and this is

239
00:10:57,839 --> 00:11:02,220
full of ideas how to build tests how to

240
00:11:02,220 --> 00:11:05,399
to how to create tests like for example

241
00:11:05,399 --> 00:11:07,620
testing SQL injections and stuff like

242
00:11:07,620 --> 00:11:08,519
that

243
00:11:08,519 --> 00:11:11,640
and then you can use the overs top 10

244
00:11:11,640 --> 00:11:14,360
list just to make sure that you covered

245
00:11:14,360 --> 00:11:18,839
all the important aspects of of uh the

246
00:11:18,839 --> 00:11:21,180
most critical security issues that can

247
00:11:21,180 --> 00:11:24,779
happen just to to have some some uh yeah

248
00:11:24,779 --> 00:11:27,959
some security check at the end if your

249
00:11:27,959 --> 00:11:31,019
security tests uh cover all the

250
00:11:31,019 --> 00:11:33,420
important aspects

251
00:11:33,420 --> 00:11:36,180
so for fat modeling we can just talk

252
00:11:36,180 --> 00:11:39,000
about that in one hour

253
00:11:39,000 --> 00:11:41,220
um thread modeling is always asking for

254
00:11:41,220 --> 00:11:43,560
questions so what are we working on for

255
00:11:43,560 --> 00:11:47,339
that you typically draw a data flow

256
00:11:47,339 --> 00:11:49,260
diagram like the one you see on the

257
00:11:49,260 --> 00:11:51,839
slide for login service for example here

258
00:11:51,839 --> 00:11:54,060
you have all the data flows with the

259
00:11:54,060 --> 00:11:55,279
protocols

260
00:11:55,279 --> 00:11:58,200
with the different components you have a

261
00:11:58,200 --> 00:12:01,140
user that calls a login service via HTTP

262
00:12:01,140 --> 00:12:04,140
protocol the login service in which is a

263
00:12:04,140 --> 00:12:07,500
user database and using gdpc as a

264
00:12:07,500 --> 00:12:09,779
protocol and then you have different

265
00:12:09,779 --> 00:12:12,600
trust boundaries where you have changes

266
00:12:12,600 --> 00:12:16,860
uh of user trusts

267
00:12:16,860 --> 00:12:19,380
um like for example login service might

268
00:12:19,380 --> 00:12:22,800
run in some Cloud provided service and

269
00:12:22,800 --> 00:12:25,940
the user database might work into some

270
00:12:25,940 --> 00:12:28,860
data center you own so there are

271
00:12:28,860 --> 00:12:31,560
different trust boundaries defined here

272
00:12:31,560 --> 00:12:34,560
and then you just check what can go

273
00:12:34,560 --> 00:12:37,860
wrong in that picture uh so so one thing

274
00:12:37,860 --> 00:12:40,260
that could go wrong here is that you are

275
00:12:40,260 --> 00:12:42,779
using unsecured HTTP connection for

276
00:12:42,779 --> 00:12:47,160
example so somebody could just grab your

277
00:12:47,160 --> 00:12:49,740
password from the connection

278
00:12:49,740 --> 00:12:52,380
um that could be one thing that could go

279
00:12:52,380 --> 00:12:54,180
wrong and then you are thinking about

280
00:12:54,180 --> 00:12:57,300
what are we going to do about it so in

281
00:12:57,300 --> 00:12:59,339
that case just change to https

282
00:12:59,339 --> 00:13:01,200
connection

283
00:13:01,200 --> 00:13:03,240
um and at the end you always do some

284
00:13:03,240 --> 00:13:05,339
kind of retrospective should we do a

285
00:13:05,339 --> 00:13:08,120
good enough job

286
00:13:09,540 --> 00:13:11,760
um and then

287
00:13:11,760 --> 00:13:14,700
if you have done all these things

288
00:13:14,700 --> 00:13:18,360
regarding security requirements then you

289
00:13:18,360 --> 00:13:22,019
can go further to to find security tests

290
00:13:22,019 --> 00:13:24,720
that are fitting these requirements and

291
00:13:24,720 --> 00:13:26,700
now we will dive into the different

292
00:13:26,700 --> 00:13:29,300
layers of the security testing pyramid

293
00:13:29,300 --> 00:13:33,180
so that I can show you ideas uh how to

294
00:13:33,180 --> 00:13:34,019
really

295
00:13:34,019 --> 00:13:38,279
start testing security uh already on the

296
00:13:38,279 --> 00:13:42,060
unit testing level and here clearly have

297
00:13:42,060 --> 00:13:46,040
uh already uh tests like like the static

298
00:13:46,040 --> 00:13:49,440
application security testing

299
00:13:49,440 --> 00:13:52,800
um you also test for dependencies so

300
00:13:52,800 --> 00:13:54,720
that your your spring hibernate

301
00:13:54,720 --> 00:13:56,820
dependencies do not have any known

302
00:13:56,820 --> 00:13:59,639
vulnerabilities also if you're using

303
00:13:59,639 --> 00:14:02,880
container images or kubernetes

304
00:14:02,880 --> 00:14:05,220
um then you also conduct a container

305
00:14:05,220 --> 00:14:07,920
image scan at that stage and then you

306
00:14:07,920 --> 00:14:10,440
typically add unit and component tests

307
00:14:10,440 --> 00:14:12,380
in an automatic

308
00:14:12,380 --> 00:14:14,540
execution fashion

309
00:14:14,540 --> 00:14:17,519
and here typical test you can already

310
00:14:17,519 --> 00:14:20,940
put as a unit test or testing input

311
00:14:20,940 --> 00:14:23,579
validation you can test for broken

312
00:14:23,579 --> 00:14:26,940
authentication stuff you can also do the

313
00:14:26,940 --> 00:14:29,459
typical unit testing stuff like trying

314
00:14:29,459 --> 00:14:31,860
to bypass business logic that you have

315
00:14:31,860 --> 00:14:35,160
defined rights on negative tests that

316
00:14:35,160 --> 00:14:38,579
try to break your business logic to do a

317
00:14:38,579 --> 00:14:42,320
malicious stuff then also write tests

318
00:14:42,320 --> 00:14:47,060
that's check errors and logging messages

319
00:14:47,060 --> 00:14:51,420
so if these messages are not uh

320
00:14:51,420 --> 00:14:55,440
yeah returning sensitive data interlock

321
00:14:55,440 --> 00:14:58,199
messages or the errors do not return

322
00:14:58,199 --> 00:15:01,620
complete stack traces for example you

323
00:15:01,620 --> 00:15:04,380
can also easily test that in your unit

324
00:15:04,380 --> 00:15:07,079
test already and also an important thing

325
00:15:07,079 --> 00:15:09,240
is to test for secure architecture I

326
00:15:09,240 --> 00:15:12,660
will also show that a bit later

327
00:15:12,660 --> 00:15:16,199
so the number one thing that I see in

328
00:15:16,199 --> 00:15:18,360
most projects that is already been

329
00:15:18,360 --> 00:15:20,040
performed is the static application

330
00:15:20,040 --> 00:15:22,560
security testing you have your source

331
00:15:22,560 --> 00:15:23,820
code

332
00:15:23,820 --> 00:15:26,519
um then you run that source code

333
00:15:26,519 --> 00:15:29,820
we've solve some tool that that checks

334
00:15:29,820 --> 00:15:31,680
the source code against some rule set

335
00:15:31,680 --> 00:15:33,660
and there are different tools available

336
00:15:33,660 --> 00:15:36,600
like sonar Cube spot box especially for

337
00:15:36,600 --> 00:15:41,100
Java semprep is is some tool that can

338
00:15:41,100 --> 00:15:44,339
cover lots of different programming

339
00:15:44,339 --> 00:15:47,399
languages and at the end you get a

340
00:15:47,399 --> 00:15:49,820
report reporting

341
00:15:49,820 --> 00:15:52,519
flaws and and also security

342
00:15:52,519 --> 00:15:56,160
issues in your source code

343
00:15:56,160 --> 00:15:59,639
and the next step would be that the

344
00:15:59,639 --> 00:16:01,620
dependency check or the software

345
00:16:01,620 --> 00:16:04,199
composition analysis that is also called

346
00:16:04,199 --> 00:16:05,820
sometimes

347
00:16:05,820 --> 00:16:09,240
um here you have the software bill of

348
00:16:09,240 --> 00:16:13,260
materials as an input strategy s-bomb

349
00:16:13,260 --> 00:16:17,100
um then you run your SCA tool that then

350
00:16:17,100 --> 00:16:20,399
checks vulnerability databases uh like

351
00:16:20,399 --> 00:16:23,399
official ones by the nists

352
00:16:23,399 --> 00:16:27,620
um and then also create some reports on

353
00:16:27,620 --> 00:16:30,240
vulnerabilities it it found in your

354
00:16:30,240 --> 00:16:32,399
third-party dependencies and there are

355
00:16:32,399 --> 00:16:34,320
several good tools that have that

356
00:16:34,320 --> 00:16:37,680
already built in like npm you can just

357
00:16:37,680 --> 00:16:41,639
call npm audits to see the issues it is

358
00:16:41,639 --> 00:16:44,459
now also directly built in into IntelliJ

359
00:16:44,459 --> 00:16:47,699
in the latest version with the package

360
00:16:47,699 --> 00:16:50,880
or Plugin that uses for example check

361
00:16:50,880 --> 00:16:53,399
marks behind the scenes so to do that

362
00:16:53,399 --> 00:16:57,480
for you so you get automatic information

363
00:16:57,480 --> 00:17:01,800
in your grater or Maven build files for

364
00:17:01,800 --> 00:17:04,380
for dependency problems

365
00:17:04,380 --> 00:17:06,900
and you can also use the ovas dependency

366
00:17:06,900 --> 00:17:09,199
check

367
00:17:10,679 --> 00:17:11,280
um

368
00:17:11,280 --> 00:17:13,919
then the next thing I I thought to

369
00:17:13,919 --> 00:17:15,780
stress a bit is testing secure

370
00:17:15,780 --> 00:17:19,319
architecture and design and this is a

371
00:17:19,319 --> 00:17:21,240
very important thing and you can easily

372
00:17:21,240 --> 00:17:24,240
use that do that with using a tool

373
00:17:24,240 --> 00:17:25,939
called Arc unit

374
00:17:25,939 --> 00:17:30,000
so typically this tool is intended to

375
00:17:30,000 --> 00:17:32,640
prove your architecture so that you

376
00:17:32,640 --> 00:17:34,620
don't have any violations in your

377
00:17:34,620 --> 00:17:37,559
architecture patterns so for example if

378
00:17:37,559 --> 00:17:39,960
you implement a layout eye texture then

379
00:17:39,960 --> 00:17:42,200
it just checks if

380
00:17:42,200 --> 00:17:46,679
the calls are according the rules so so

381
00:17:46,679 --> 00:17:50,280
no calls from the

382
00:17:50,280 --> 00:17:52,380
um from from the persistence layer to

383
00:17:52,380 --> 00:17:55,080
the UI layer for example

384
00:17:55,080 --> 00:17:58,140
um then you but can also test for other

385
00:17:58,140 --> 00:18:00,600
aspects like for security relevant

386
00:18:00,600 --> 00:18:03,419
aspects you can check if your password

387
00:18:03,419 --> 00:18:07,620
policies are correctly implemented uh if

388
00:18:07,620 --> 00:18:11,580
you have the input validation in place

389
00:18:11,580 --> 00:18:15,240
um and also for broken authorization and

390
00:18:15,240 --> 00:18:17,940
also important for invalid calls to

391
00:18:17,940 --> 00:18:20,640
persistence apis so that is also quite

392
00:18:20,640 --> 00:18:24,360
helpful to avoid SQL injections I will

393
00:18:24,360 --> 00:18:28,440
show that in a demo just in some minutes

394
00:18:28,440 --> 00:18:32,039
um and then uh one typical thing I also

395
00:18:32,039 --> 00:18:33,299
wanted to

396
00:18:33,299 --> 00:18:36,179
uh to show in the demo is

397
00:18:36,179 --> 00:18:39,480
um how to make sure for example uh to to

398
00:18:39,480 --> 00:18:42,000
to have a password policy in place in

399
00:18:42,000 --> 00:18:43,740
your application

400
00:18:43,740 --> 00:18:45,360
um so the application security

401
00:18:45,360 --> 00:18:47,880
verification standard also have has

402
00:18:47,880 --> 00:18:50,700
clear rules how to build a secure

403
00:18:50,700 --> 00:18:53,280
password security policy

404
00:18:53,280 --> 00:18:53,940
um

405
00:18:53,940 --> 00:18:57,059
so that the user does not register

406
00:18:57,059 --> 00:19:01,080
Itself by using a password that only has

407
00:19:01,080 --> 00:19:03,660
five characters and only uses numbers

408
00:19:03,660 --> 00:19:05,400
for example as you can see in the

409
00:19:05,400 --> 00:19:07,799
picture such a password is quite

410
00:19:07,799 --> 00:19:11,640
insecure and it's a correct instantly

411
00:19:11,640 --> 00:19:14,820
and in Java for example you could use a

412
00:19:14,820 --> 00:19:17,880
framework for that called pasai which I

413
00:19:17,880 --> 00:19:20,760
have in the demos that can create

414
00:19:20,760 --> 00:19:23,700
password policies that can then also be

415
00:19:23,700 --> 00:19:28,500
checked using pin validation for example

416
00:19:28,500 --> 00:19:31,679
so it's time for some demo um here is

417
00:19:31,679 --> 00:19:33,660
also the link for the corresponding

418
00:19:33,660 --> 00:19:37,260
GitHub repository I have provided with

419
00:19:37,260 --> 00:19:40,080
all the demos I will only show a part of

420
00:19:40,080 --> 00:19:42,539
that of that demos available here for

421
00:19:42,539 --> 00:19:44,340
time reasons

422
00:19:44,340 --> 00:19:47,580
um just go there and also try to to look

423
00:19:47,580 --> 00:19:51,059
yourself and and try to execute some of

424
00:19:51,059 --> 00:19:52,140
the news

425
00:19:52,140 --> 00:19:55,500
and what I've built here is actually a

426
00:19:55,500 --> 00:19:58,440
sample application that administs

427
00:19:58,440 --> 00:20:02,520
bookmarks similar to the web browsers uh

428
00:20:02,520 --> 00:20:04,799
are doing that

429
00:20:04,799 --> 00:20:07,080
um you have a API for administrating

430
00:20:07,080 --> 00:20:10,140
users and you also have a API to

431
00:20:10,140 --> 00:20:13,260
administer bookmarks just a stand-up

432
00:20:13,260 --> 00:20:16,679
rest API that I provided here as a demo

433
00:20:16,679 --> 00:20:18,620
application

434
00:20:18,620 --> 00:20:22,320
and to start things up I already have

435
00:20:22,320 --> 00:20:27,059
run uh some code analysis uh over my

436
00:20:27,059 --> 00:20:29,100
demo application

437
00:20:29,100 --> 00:20:32,280
um and as you can see it's identified uh

438
00:20:32,280 --> 00:20:35,160
some security hotspots with sonar Cube

439
00:20:35,160 --> 00:20:37,620
so it failed already with the quality

440
00:20:37,620 --> 00:20:39,419
gate here

441
00:20:39,419 --> 00:20:41,220
um

442
00:20:41,220 --> 00:20:45,179
I I built uh lots of security problems

443
00:20:45,179 --> 00:20:48,179
into the application by intention

444
00:20:48,179 --> 00:20:49,080
um

445
00:20:49,080 --> 00:20:51,900
so in that case it identified some of

446
00:20:51,900 --> 00:20:53,660
these uh built-in

447
00:20:53,660 --> 00:20:56,520
issues already so I built in some

448
00:20:56,520 --> 00:20:59,039
sequence action problems in the

449
00:20:59,039 --> 00:21:01,799
application that have been identified by

450
00:21:01,799 --> 00:21:04,860
sonar Cube interstatic analysis already

451
00:21:04,860 --> 00:21:07,700
are also used

452
00:21:07,700 --> 00:21:11,340
disabled csrf protection in Spring

453
00:21:11,340 --> 00:21:14,700
Security that is also reported here

454
00:21:14,700 --> 00:21:15,299
um

455
00:21:15,299 --> 00:21:18,059
I have also some others so I also use

456
00:21:18,059 --> 00:21:21,780
some weak hashing algorithm as well so

457
00:21:21,780 --> 00:21:23,340
these are the kind of things that are

458
00:21:23,340 --> 00:21:27,600
identified already on in at that stage

459
00:21:27,600 --> 00:21:28,740
um

460
00:21:28,740 --> 00:21:31,260
can I also have a

461
00:21:31,260 --> 00:21:35,400
spot box so you get similar reportings

462
00:21:35,400 --> 00:21:39,419
here also the md5 also some Sigma

463
00:21:39,419 --> 00:21:42,900
injection problems so quite similar

464
00:21:42,900 --> 00:21:44,580
um

465
00:21:44,580 --> 00:21:46,520
you know also

466
00:21:46,520 --> 00:21:50,159
can show how same prep reports that so

467
00:21:50,159 --> 00:21:53,760
so here you can see a sample of Sam prep

468
00:21:53,760 --> 00:21:56,760
that I have run just before the

469
00:21:56,760 --> 00:21:58,919
start of the session

470
00:21:58,919 --> 00:22:01,919
um here you see uh also other stuff so

471
00:22:01,919 --> 00:22:05,039
so it does not only check the Java

472
00:22:05,039 --> 00:22:07,140
source code in that case it has lots of

473
00:22:07,140 --> 00:22:10,520
rules for for other types of uh

474
00:22:10,520 --> 00:22:13,559
files for example it also checks yaml

475
00:22:13,559 --> 00:22:16,260
files bash files pipe files here that

476
00:22:16,260 --> 00:22:18,780
are included like for example it checks

477
00:22:18,780 --> 00:22:21,900
uh for for API keys and passwords that

478
00:22:21,900 --> 00:22:24,179
are hard coded here

479
00:22:24,179 --> 00:22:26,220
um but it also

480
00:22:26,220 --> 00:22:31,440
checks for for privileged containers

481
00:22:31,679 --> 00:22:34,140
um that are not used correctly like

482
00:22:34,140 --> 00:22:36,600
using the root user for example

483
00:22:36,600 --> 00:22:39,120
and it also checks for

484
00:22:39,120 --> 00:22:42,840
uh let me show also again for the md5

485
00:22:42,840 --> 00:22:46,620
problem here and it also reports the

486
00:22:46,620 --> 00:22:48,240
csrf

487
00:22:48,240 --> 00:22:51,179
blob problem down here somewhere and

488
00:22:51,179 --> 00:22:55,679
also the uh the SQL injection problem

489
00:22:55,679 --> 00:22:59,820
so so these tools report similar things

490
00:22:59,820 --> 00:23:01,080
um

491
00:23:01,080 --> 00:23:04,020
so I would advise that that you at least

492
00:23:04,020 --> 00:23:06,500
use one of these tools in your project

493
00:23:06,500 --> 00:23:09,780
and maybe from time to time just recheck

494
00:23:09,780 --> 00:23:10,799
with some

495
00:23:10,799 --> 00:23:13,559
the additional tool just to make sure

496
00:23:13,559 --> 00:23:15,780
that that

497
00:23:15,780 --> 00:23:18,900
this other tool may find uh also

498
00:23:18,900 --> 00:23:21,559
different things

499
00:23:21,780 --> 00:23:22,620
um

500
00:23:22,620 --> 00:23:24,659
then the next thing I want to show in

501
00:23:24,659 --> 00:23:27,600
the demo um are the architecture tests

502
00:23:27,600 --> 00:23:30,000
that you can use for the security facing

503
00:23:30,000 --> 00:23:33,980
testing and here you see a typical

504
00:23:33,980 --> 00:23:37,580
architecture tests with Arc units and

505
00:23:37,580 --> 00:23:40,559
this is a predefined Google

506
00:23:40,559 --> 00:23:43,679
um so here for example I want to test if

507
00:23:43,679 --> 00:23:48,240
my application fulfills all the rules

508
00:23:48,240 --> 00:23:50,400
that are used for our layout

509
00:23:50,400 --> 00:23:51,900
architecture so in the layered

510
00:23:51,900 --> 00:23:53,400
architecture you typically have a

511
00:23:53,400 --> 00:23:55,380
presentation layer where you have to

512
00:23:55,380 --> 00:23:57,720
rest API then you have a business logic

513
00:23:57,720 --> 00:24:01,500
layer here called Services because I use

514
00:24:01,500 --> 00:24:04,620
spring services and then you have a data

515
00:24:04,620 --> 00:24:07,080
access layer here called the persistence

516
00:24:07,080 --> 00:24:08,760
layer

517
00:24:08,760 --> 00:24:10,860
um and then you define the packages

518
00:24:10,860 --> 00:24:13,799
where these layers are located and then

519
00:24:13,799 --> 00:24:18,299
you can just add checks and so that's

520
00:24:18,299 --> 00:24:20,580
for example the controllers layers or

521
00:24:20,580 --> 00:24:23,780
the presentation layer uh

522
00:24:23,780 --> 00:24:26,700
is not allowed to be accessed directly

523
00:24:26,700 --> 00:24:30,299
by any other layer but the rest API

524
00:24:30,299 --> 00:24:32,940
layer can access the service layer and

525
00:24:32,940 --> 00:24:34,320
the service layer can access the

526
00:24:34,320 --> 00:24:36,419
persistence layer but not the other way

527
00:24:36,419 --> 00:24:37,980
around

528
00:24:37,980 --> 00:24:40,980
so this is make sure by by these tests

529
00:24:40,980 --> 00:24:44,159
we just can try to run that test

530
00:24:44,159 --> 00:24:47,520
so as it is a unit test that should run

531
00:24:47,520 --> 00:24:50,940
quite fast so so we can see that the

532
00:24:50,940 --> 00:24:52,919
test is is uh

533
00:24:52,919 --> 00:24:57,299
screen so so all the dependencies are

534
00:24:57,299 --> 00:25:00,059
respected in that case

535
00:25:00,059 --> 00:25:02,880
but now you can also try these things

536
00:25:02,880 --> 00:25:06,720
for for using it for security related

537
00:25:06,720 --> 00:25:08,159
stuff

538
00:25:08,159 --> 00:25:10,620
um like for example

539
00:25:10,620 --> 00:25:14,039
for uh checking

540
00:25:14,039 --> 00:25:14,640
um

541
00:25:14,640 --> 00:25:19,200
if you implemented the authorization on

542
00:25:19,200 --> 00:25:21,480
for example authorization under the

543
00:25:21,480 --> 00:25:23,640
method layer in Spring

544
00:25:23,640 --> 00:25:27,000
so I use Bing boot all all over the way

545
00:25:27,000 --> 00:25:29,100
here in my projects

546
00:25:29,100 --> 00:25:32,000
um and in Spring you typically have a

547
00:25:32,000 --> 00:25:34,500
annotation for that called The

548
00:25:34,500 --> 00:25:36,960
pre-authorized annotation that you just

549
00:25:36,960 --> 00:25:40,260
put on every operation

550
00:25:40,260 --> 00:25:43,440
um and then here declare uh what the

551
00:25:43,440 --> 00:25:45,840
authorization should look like if it's a

552
00:25:45,840 --> 00:25:49,039
role-based authorization or some Dynamic

553
00:25:49,039 --> 00:25:52,260
facing authorization

554
00:25:52,260 --> 00:25:54,260
um you can do both with that

555
00:25:54,260 --> 00:25:56,820
pre-authorized annotation and here in

556
00:25:56,820 --> 00:26:00,000
that case you just check any methods

557
00:26:00,000 --> 00:26:03,120
that are public that reside in that

558
00:26:03,120 --> 00:26:05,940
package in the service package

559
00:26:05,940 --> 00:26:09,120
um because we are on the method level to

560
00:26:09,120 --> 00:26:10,679
check the authorization a different

561
00:26:10,679 --> 00:26:13,799
thing would be the the web UI the rest

562
00:26:13,799 --> 00:26:16,919
API level that would be checked later in

563
00:26:16,919 --> 00:26:19,200
the integration tests

564
00:26:19,200 --> 00:26:19,919
um

565
00:26:19,919 --> 00:26:23,039
and they have simple names that end with

566
00:26:23,039 --> 00:26:24,600
service at the end

567
00:26:24,600 --> 00:26:26,220
um

568
00:26:26,220 --> 00:26:28,679
and are declared in classes that are

569
00:26:28,679 --> 00:26:31,679
annotated with the service annotation uh

570
00:26:31,679 --> 00:26:33,900
Offspring and then

571
00:26:33,900 --> 00:26:36,600
each and every method should be

572
00:26:36,600 --> 00:26:38,760
annotated with The pre-authorized

573
00:26:38,760 --> 00:26:42,080
annotation audio forward class should be

574
00:26:42,080 --> 00:26:44,760
annotated with that thing

575
00:26:44,760 --> 00:26:47,460
and we can also check if that is uh

576
00:26:47,460 --> 00:26:50,460
fulfilled by our application

577
00:26:50,460 --> 00:26:51,419
um

578
00:26:51,419 --> 00:26:54,779
and in that case the test fails and

579
00:26:54,779 --> 00:26:59,039
because let's just own a pitch

580
00:26:59,039 --> 00:26:59,880
um

581
00:26:59,880 --> 00:27:03,480
so so we we don't have any authorization

582
00:27:03,480 --> 00:27:06,000
checks at all in place because I built

583
00:27:06,000 --> 00:27:09,240
that in an insecure way so it really

584
00:27:09,240 --> 00:27:12,539
identifies that we really need some kind

585
00:27:12,539 --> 00:27:14,580
of authorization checks for all these

586
00:27:14,580 --> 00:27:17,640
operations and you can easily just have

587
00:27:17,640 --> 00:27:21,360
that inter unit test layer already

588
00:27:21,360 --> 00:27:25,919
a different demo that I can show is

589
00:27:25,919 --> 00:27:28,500
um that you can easily test if the

590
00:27:28,500 --> 00:27:32,520
developers are using invalid calls for

591
00:27:32,520 --> 00:27:35,580
for uh for data access

592
00:27:35,580 --> 00:27:38,159
so in in that case uh it is a spring

593
00:27:38,159 --> 00:27:41,340
boot application that also uses a spring

594
00:27:41,340 --> 00:27:45,480
data jpa so it uses jpa the Java

595
00:27:45,480 --> 00:27:49,500
persistence API for accessing data and

596
00:27:49,500 --> 00:27:52,740
in that case it is not allowed to

597
00:27:52,740 --> 00:27:57,240
directly use the Java SQL packages and

598
00:27:57,240 --> 00:27:58,320
it is

599
00:27:58,320 --> 00:28:01,080
it is also not allowed to to use the T

600
00:28:01,080 --> 00:28:02,700
or hibernate

601
00:28:02,700 --> 00:28:05,400
um packages directly and also not the

602
00:28:05,400 --> 00:28:09,840
Java X persistence directly and

603
00:28:09,840 --> 00:28:14,100
um because uh we use spring data and it

604
00:28:14,100 --> 00:28:17,039
can only use uh packages of all spring

605
00:28:17,039 --> 00:28:18,900
firmware data

606
00:28:18,900 --> 00:28:21,659
in that case I have implemented two

607
00:28:21,659 --> 00:28:25,279
rules so the first rule is that's

608
00:28:25,279 --> 00:28:28,500
the service layer should not call any

609
00:28:28,500 --> 00:28:31,080
data access layer at all so it's not

610
00:28:31,080 --> 00:28:33,779
intended to call the data access layer

611
00:28:33,779 --> 00:28:37,200
directly from service classes so it's

612
00:28:37,200 --> 00:28:40,020
only attended uh to to have the data

613
00:28:40,020 --> 00:28:43,200
access layer clearly at the data package

614
00:28:43,200 --> 00:28:46,320
and so that's why also here that that

615
00:28:46,320 --> 00:28:48,480
package is not allowed

616
00:28:48,480 --> 00:28:50,880
and here from the data access layer only

617
00:28:50,880 --> 00:28:53,279
these packages are allowed so let me

618
00:28:53,279 --> 00:28:55,500
also try to run depth

619
00:28:55,500 --> 00:28:58,220
test here

620
00:28:59,700 --> 00:29:03,059
so so if also

621
00:29:03,059 --> 00:29:07,500
um violates uh both of these tests

622
00:29:07,500 --> 00:29:09,059
um

623
00:29:09,059 --> 00:29:11,580
but you can see

624
00:29:11,580 --> 00:29:12,539
um

625
00:29:12,539 --> 00:29:16,039
that's the The Bookmark service I have

626
00:29:16,039 --> 00:29:19,100
implemented here a bookmark search

627
00:29:19,100 --> 00:29:23,340
method that directly has a call to Java

628
00:29:23,340 --> 00:29:26,159
X persistence entity manager

629
00:29:26,159 --> 00:29:28,799
um which tends to be some really a

630
00:29:28,799 --> 00:29:30,539
strange thing

631
00:29:30,539 --> 00:29:35,039
um so if I just open up that source code

632
00:29:35,039 --> 00:29:36,899
then you see

633
00:29:36,899 --> 00:29:39,659
that we use the Entertainer manager here

634
00:29:39,659 --> 00:29:42,120
directly which is an empty pattern when

635
00:29:42,120 --> 00:29:45,000
you're using a spring data jpa so you

636
00:29:45,000 --> 00:29:47,340
should never have to directly call The

637
00:29:47,340 --> 00:29:50,220
Entity manager and here you

638
00:29:50,220 --> 00:29:54,539
find the really nasty Source Code by

639
00:29:54,539 --> 00:29:58,919
directly using low level gdpc API and

640
00:29:58,919 --> 00:30:01,440
then just concatenating the inputs

641
00:30:01,440 --> 00:30:04,559
directly with the SQL statement which is

642
00:30:04,559 --> 00:30:09,299
a good reason to have a SQL injection

643
00:30:09,299 --> 00:30:12,360
and you clearly can find that already on

644
00:30:12,360 --> 00:30:15,600
unit test level with The Arc unit tests

645
00:30:15,600 --> 00:30:19,740
on unit test level you can also have uh

646
00:30:19,740 --> 00:30:22,220
tests for for password security

647
00:30:22,220 --> 00:30:25,020
requirements tests like here for example

648
00:30:25,020 --> 00:30:29,460
and here I also just

649
00:30:29,460 --> 00:30:33,539
have taken uh chapters from the asbs

650
00:30:33,539 --> 00:30:35,539
document of the ovas with the security

651
00:30:35,539 --> 00:30:38,700
requirements and then also implement the

652
00:30:38,700 --> 00:30:41,580
test for each and every subsection of

653
00:30:41,580 --> 00:30:43,860
that paragraph

654
00:30:43,860 --> 00:30:45,120
um

655
00:30:45,120 --> 00:30:47,760
like for example that passwords are at

656
00:30:47,760 --> 00:30:50,399
least 12 characters in length

657
00:30:50,399 --> 00:30:51,659
um

658
00:30:51,659 --> 00:30:55,640
and also uh that's that you can also use

659
00:30:55,640 --> 00:30:58,559
passwords that are 64 characters or even

660
00:30:58,559 --> 00:31:00,419
longer

661
00:31:00,419 --> 00:31:03,000
um what else do we have so also a

662
00:31:03,000 --> 00:31:05,100
typical thing that no password

663
00:31:05,100 --> 00:31:07,260
truncation is performed behind the

664
00:31:07,260 --> 00:31:09,240
scenes which is also quite bad for the

665
00:31:09,240 --> 00:31:11,220
user experience

666
00:31:11,220 --> 00:31:12,000
um

667
00:31:12,000 --> 00:31:14,640
let me check if we have

668
00:31:14,640 --> 00:31:18,679
some results here

669
00:31:20,640 --> 00:31:23,760
as you can see here it it violates uh

670
00:31:23,760 --> 00:31:27,539
something so it is not checked uh

671
00:31:27,539 --> 00:31:30,480
that's that passwords are at least 12

672
00:31:30,480 --> 00:31:34,440
characters in length so so we have uh

673
00:31:34,440 --> 00:31:37,799
no no uh violation that was expected

674
00:31:37,799 --> 00:31:40,980
here so we expected one violation of the

675
00:31:40,980 --> 00:31:44,460
bill validation constraints but we have

676
00:31:44,460 --> 00:31:48,179
zero so that's an error here and we can

677
00:31:48,179 --> 00:31:51,059
test that for different kinds of uh

678
00:31:51,059 --> 00:31:53,360
password policy

679
00:31:53,360 --> 00:31:57,419
aspects so you can basically Implement

680
00:31:57,419 --> 00:32:00,779
most of the subsections of that ASV

681
00:32:00,779 --> 00:32:02,520
section here

682
00:32:02,520 --> 00:32:06,240
so some sections are difficult to to uh

683
00:32:06,240 --> 00:32:07,679
to test

684
00:32:07,679 --> 00:32:09,779
um like for example here verify users

685
00:32:09,779 --> 00:32:12,360
can change their password so usually you

686
00:32:12,360 --> 00:32:14,520
can only test that in the integration

687
00:32:14,520 --> 00:32:19,320
test by just calling uh so some method

688
00:32:19,320 --> 00:32:21,480
that changes the password and then

689
00:32:21,480 --> 00:32:26,100
checks for for authorization here

690
00:32:27,000 --> 00:32:29,640
so these have been the uh

691
00:32:29,640 --> 00:32:33,120
typical things you can do on the

692
00:32:33,120 --> 00:32:36,379
unit testing level

693
00:32:36,539 --> 00:32:40,080
um under the service testing level

694
00:32:40,080 --> 00:32:40,919
um

695
00:32:40,919 --> 00:32:43,860
you can test for uh

696
00:32:43,860 --> 00:32:46,799
for additional things like like input

697
00:32:46,799 --> 00:32:50,460
validation again uh but here you can

698
00:32:50,460 --> 00:32:52,980
also already tested on the rest API

699
00:32:52,980 --> 00:32:55,679
level for example then you can also test

700
00:32:55,679 --> 00:32:57,720
authentication Parts

701
00:32:57,720 --> 00:33:00,299
um authorization paths on the rest API

702
00:33:00,299 --> 00:33:03,000
on the web layer as well you can also

703
00:33:03,000 --> 00:33:04,760
test for session management

704
00:33:04,760 --> 00:33:06,380
and

705
00:33:06,380 --> 00:33:08,940
especially if you have implemented a

706
00:33:08,940 --> 00:33:10,860
session management by yourself which I

707
00:33:10,860 --> 00:33:12,899
would not recommend and I always

708
00:33:12,899 --> 00:33:14,940
recommend using a session management

709
00:33:14,940 --> 00:33:17,279
provided by your framework like Spring

710
00:33:17,279 --> 00:33:19,740
Security or from the application server

711
00:33:19,740 --> 00:33:22,440
side yeah

712
00:33:22,440 --> 00:33:24,600
for example if you use web logic still

713
00:33:24,600 --> 00:33:26,299
or or

714
00:33:26,299 --> 00:33:30,419
from jpos White fly then use the session

715
00:33:30,419 --> 00:33:33,600
management provided from that uh

716
00:33:33,600 --> 00:33:36,299
framework you can also test for file

717
00:33:36,299 --> 00:33:40,799
uploads tests that only uh

718
00:33:40,799 --> 00:33:45,000
defined types of files are accepted when

719
00:33:45,000 --> 00:33:48,539
uploading and and with that I mean

720
00:33:48,539 --> 00:33:51,360
that's not only you check the extension

721
00:33:51,360 --> 00:33:53,880
of a file but you also check for example

722
00:33:53,880 --> 00:33:57,840
that the magic bytes and so that a user

723
00:33:57,840 --> 00:34:00,659
cannot upload a executable file for

724
00:34:00,659 --> 00:34:03,539
example instead of a PDF

725
00:34:03,539 --> 00:34:07,140
and you can then also add tests for for

726
00:34:07,140 --> 00:34:09,719
injections and also test for security

727
00:34:09,719 --> 00:34:12,899
means for configuration like uh the

728
00:34:12,899 --> 00:34:16,139
typical misconfiguration that you might

729
00:34:16,139 --> 00:34:20,399
have for for cross origin resource

730
00:34:20,399 --> 00:34:22,320
um security

731
00:34:22,320 --> 00:34:25,859
um that you configure for your browser

732
00:34:25,859 --> 00:34:26,780
um

733
00:34:26,780 --> 00:34:31,739
security uh and precautions

734
00:34:31,739 --> 00:34:34,320
and you can also make big Mistakes by

735
00:34:34,320 --> 00:34:36,780
putting for example White cards in your

736
00:34:36,780 --> 00:34:39,440
origin here

737
00:34:40,859 --> 00:34:43,199
um so one thing I also want to stress

738
00:34:43,199 --> 00:34:45,060
here is is that the general Access

739
00:34:45,060 --> 00:34:47,280
Control design is an example from the

740
00:34:47,280 --> 00:34:50,520
asvs and which I can also show in the

741
00:34:50,520 --> 00:34:53,339
Deep moisture shortly so then let's jump

742
00:34:53,339 --> 00:34:56,699
directly to the email again

743
00:34:56,699 --> 00:34:58,140
um

744
00:34:58,140 --> 00:35:01,080
so we had the unit testing and the

745
00:35:01,080 --> 00:35:02,700
architecture level

746
00:35:02,700 --> 00:35:05,700
if we look at the integration testing

747
00:35:05,700 --> 00:35:09,599
level I just want to show uh

748
00:35:09,599 --> 00:35:12,960
how to test for SQL injections as an

749
00:35:12,960 --> 00:35:14,640
example here

750
00:35:14,640 --> 00:35:15,599
um

751
00:35:15,599 --> 00:35:17,940
so for testing sequence actions you can

752
00:35:17,940 --> 00:35:21,780
just start with some easy payload that

753
00:35:21,780 --> 00:35:24,180
you find everywhere if you just have a

754
00:35:24,180 --> 00:35:26,339
simple Google search for for testing

755
00:35:26,339 --> 00:35:29,099
sequence sections you typically will

756
00:35:29,099 --> 00:35:31,980
find a payload just like that one so

757
00:35:31,980 --> 00:35:33,720
take with that payload you just add that

758
00:35:33,720 --> 00:35:35,700
payload to your where statement at the

759
00:35:35,700 --> 00:35:38,700
end of the SQL statement and with that

760
00:35:38,700 --> 00:35:40,700
you can easily check

761
00:35:40,700 --> 00:35:45,420
your own service calls or

762
00:35:45,420 --> 00:35:49,020
data access calls if you have some

763
00:35:49,020 --> 00:35:51,599
problems regarding SQL injections

764
00:35:51,599 --> 00:35:55,040
with that payload I just called my

765
00:35:55,040 --> 00:35:59,280
search bookmarks method where I built in

766
00:35:59,280 --> 00:36:02,400
such a problem by intention I just put

767
00:36:02,400 --> 00:36:05,040
in that SQL injection payload

768
00:36:05,040 --> 00:36:07,380
and usually if you

769
00:36:07,380 --> 00:36:09,540
do not have any sequence action problem

770
00:36:09,540 --> 00:36:10,940
you would expect

771
00:36:10,940 --> 00:36:14,520
that you get an empty result when

772
00:36:14,520 --> 00:36:17,700
testing your search operation by putting

773
00:36:17,700 --> 00:36:20,460
that payload inside because I did not

774
00:36:20,460 --> 00:36:23,119
have defined any bookmark

775
00:36:23,119 --> 00:36:26,579
that would match that search criteria

776
00:36:26,579 --> 00:36:28,800
but let's see what

777
00:36:28,800 --> 00:36:32,040
this test will tell us

778
00:36:32,040 --> 00:36:34,680
so this is an integration test so you

779
00:36:34,680 --> 00:36:37,020
will recognize that it runs a bit

780
00:36:37,020 --> 00:36:38,579
slower but

781
00:36:38,579 --> 00:36:41,220
I just have run that before sometimes so

782
00:36:41,220 --> 00:36:43,980
that's why it's it's now it runs really

783
00:36:43,980 --> 00:36:45,780
faster

784
00:36:45,780 --> 00:36:49,200
and as you can see here we did not get

785
00:36:49,200 --> 00:36:53,820
back an empty list but instead so it was

786
00:36:53,820 --> 00:36:57,000
expecting empty but instead because it

787
00:36:57,000 --> 00:36:59,160
we have a sequence action problem here

788
00:36:59,160 --> 00:37:02,520
we just return have been returned to the

789
00:37:02,520 --> 00:37:05,579
complete contents of the table that is

790
00:37:05,579 --> 00:37:08,520
built in an H2 in memory database in

791
00:37:08,520 --> 00:37:11,760
that case so this is a clear sign that

792
00:37:11,760 --> 00:37:14,040
we have a sequence action problem here

793
00:37:14,040 --> 00:37:16,380
and you can easily just

794
00:37:16,380 --> 00:37:19,740
add tests to test uh

795
00:37:19,740 --> 00:37:24,180
pets for all your service calls in that

796
00:37:24,180 --> 00:37:27,119
case so I have also put in some other

797
00:37:27,119 --> 00:37:29,220
security problems as well in different

798
00:37:29,220 --> 00:37:31,260
locations here

799
00:37:31,260 --> 00:37:34,560
um this is just one example that you can

800
00:37:34,560 --> 00:37:36,799
test

801
00:37:37,200 --> 00:37:40,680
but this was about the

802
00:37:40,680 --> 00:37:44,700
service layer and on the top layer you

803
00:37:44,700 --> 00:37:46,619
can then have your Dynamic application

804
00:37:46,619 --> 00:37:48,960
security testing stuff

805
00:37:48,960 --> 00:37:50,880
um

806
00:37:50,880 --> 00:37:54,420
like for example uh the the over set

807
00:37:54,420 --> 00:37:58,200
tool there's also commercial uh variant

808
00:37:58,200 --> 00:38:01,140
of that by stackhawk and then you have

809
00:38:01,140 --> 00:38:03,480
the parts we could burp Suite that is

810
00:38:03,480 --> 00:38:06,119
the commercial thing compared to the

811
00:38:06,119 --> 00:38:08,579
over sub tool then you have also

812
00:38:08,579 --> 00:38:10,800
specialized tool you can just use the

813
00:38:10,800 --> 00:38:12,599
SQL map tool for finding SQL

814
00:38:12,599 --> 00:38:16,020
instructions the nmap tool to find uh

815
00:38:16,020 --> 00:38:19,920
open ports on your environments and and

816
00:38:19,920 --> 00:38:22,260
yeah check what services are running

817
00:38:22,260 --> 00:38:26,160
there but you can as well use just

818
00:38:26,160 --> 00:38:28,320
standard tools like like the ketling

819
00:38:28,320 --> 00:38:31,380
tool that is usually used for performing

820
00:38:31,380 --> 00:38:35,760
stress testing yes some load testing

821
00:38:35,760 --> 00:38:38,760
stuff and with that you can also easily

822
00:38:38,760 --> 00:38:42,420
just test locally already if your

823
00:38:42,420 --> 00:38:45,480
application has problems uh according to

824
00:38:45,480 --> 00:38:49,380
to denial of service attacks so so just

825
00:38:49,380 --> 00:38:50,400
uh

826
00:38:50,400 --> 00:38:52,980
put in some some stress testing with the

827
00:38:52,980 --> 00:38:55,260
Gatling tool we put lots of loads on

828
00:38:55,260 --> 00:38:57,900
your rest API and see

829
00:38:57,900 --> 00:39:00,780
um if you can improve things uh

830
00:39:00,780 --> 00:39:02,940
regarding denial of service attacks like

831
00:39:02,940 --> 00:39:06,060
for example adding an API Gateway with

832
00:39:06,060 --> 00:39:07,160
some some

833
00:39:07,160 --> 00:39:10,500
resilience patterns like rate limiting

834
00:39:10,500 --> 00:39:14,000
stuff for example

835
00:39:16,380 --> 00:39:18,900
um regarding the the test tools also

836
00:39:18,900 --> 00:39:21,540
these typically run uh in that way that

837
00:39:21,540 --> 00:39:23,820
you have a running client like a single

838
00:39:23,820 --> 00:39:25,740
page application then you have a running

839
00:39:25,740 --> 00:39:28,020
server with a spring boot backend for

840
00:39:28,020 --> 00:39:32,760
example and then you put that test tool

841
00:39:32,760 --> 00:39:37,140
just in the middle of these two sites as

842
00:39:37,140 --> 00:39:39,300
some kind of proxy

843
00:39:39,300 --> 00:39:40,079
um

844
00:39:40,079 --> 00:39:43,400
and this proxy then

845
00:39:43,400 --> 00:39:47,280
gets all the requests and responses uh

846
00:39:47,280 --> 00:39:49,500
from the client to the server and the

847
00:39:49,500 --> 00:39:51,960
responses back from the server it can

848
00:39:51,960 --> 00:39:55,320
record all the request responses and

849
00:39:55,320 --> 00:39:57,599
then you can run a scanner automated

850
00:39:57,599 --> 00:40:01,380
Scanner with some predefined rule set

851
00:40:01,380 --> 00:40:03,960
um that can conduct passive or active

852
00:40:03,960 --> 00:40:07,700
scanning passive scanning is just uh

853
00:40:07,700 --> 00:40:09,980
checks that are

854
00:40:09,980 --> 00:40:13,440
conducted when executing the requests

855
00:40:13,440 --> 00:40:16,079
and responses by just looking at request

856
00:40:16,079 --> 00:40:19,320
responses for some unusual patterns and

857
00:40:19,320 --> 00:40:22,380
the active scanner just twice to attack

858
00:40:22,380 --> 00:40:24,900
the application using the well-known

859
00:40:24,900 --> 00:40:28,440
URLs you have identified and just trying

860
00:40:28,440 --> 00:40:30,599
to put sequence action attacks

861
00:40:30,599 --> 00:40:32,760
cross-site scripting attacks and all the

862
00:40:32,760 --> 00:40:35,579
stuff that you know about from the ovas

863
00:40:35,579 --> 00:40:38,180
top 10.

864
00:40:39,359 --> 00:40:41,339
um for our set tool this is quite

865
00:40:41,339 --> 00:40:43,740
convenient to also include that in your

866
00:40:43,740 --> 00:40:46,560
cicd pipeline with the container that

867
00:40:46,560 --> 00:40:48,359
are provided

868
00:40:48,359 --> 00:40:50,099
um here you have a baseline scan just

869
00:40:50,099 --> 00:40:52,500
doing passive scanning uh the most

870
00:40:52,500 --> 00:40:55,020
important one for my rest API would be

871
00:40:55,020 --> 00:40:59,099
the API scan here you can just put open

872
00:40:59,099 --> 00:41:03,359
API definition to oversap with all the

873
00:41:03,359 --> 00:41:06,000
URLs that you have defined

874
00:41:06,000 --> 00:41:06,960
um

875
00:41:06,960 --> 00:41:10,020
and with that you can easily just test

876
00:41:10,020 --> 00:41:13,320
against that defined apis and you can

877
00:41:13,320 --> 00:41:15,960
also conduct a full scan but a full scan

878
00:41:15,960 --> 00:41:18,599
I would advise not to put in your

879
00:41:18,599 --> 00:41:21,060
regular cicd pipeline because the full

880
00:41:21,060 --> 00:41:23,820
scan might run for hours depending on

881
00:41:23,820 --> 00:41:26,640
your size of the application so just put

882
00:41:26,640 --> 00:41:29,160
that one in some nightly scan and put

883
00:41:29,160 --> 00:41:32,400
the Baseline scan or apis can as part of

884
00:41:32,400 --> 00:41:36,380
your usual cicd pipeline

885
00:41:36,540 --> 00:41:39,780
but can also show you some

886
00:41:39,780 --> 00:41:42,660
only short demo here I've

887
00:41:42,660 --> 00:41:44,760
set up the

888
00:41:44,760 --> 00:41:47,099
application already so so the

889
00:41:47,099 --> 00:41:49,859
application is running here as you can

890
00:41:49,859 --> 00:41:51,359
see

891
00:41:51,359 --> 00:41:53,760
um now this is the wrong one this is the

892
00:41:53,760 --> 00:41:57,000
application so I clear the locks already

893
00:41:57,000 --> 00:42:01,099
um and I can now start

894
00:42:01,099 --> 00:42:05,520
the sap API skin I have also a script

895
00:42:05,520 --> 00:42:07,020
already in

896
00:42:07,020 --> 00:42:09,480
inside the projects

897
00:42:09,480 --> 00:42:12,060
so I just start that because it takes

898
00:42:12,060 --> 00:42:15,000
some time to to show the results

899
00:42:15,000 --> 00:42:18,180
um I already have run that before

900
00:42:18,180 --> 00:42:20,820
um you can see the results that oversep

901
00:42:20,820 --> 00:42:24,480
has found in an automatic fashion

902
00:42:24,480 --> 00:42:26,940
um so it detected some server errors

903
00:42:26,940 --> 00:42:32,400
that it detected with 500 https status

904
00:42:32,400 --> 00:42:33,359
um

905
00:42:33,359 --> 00:42:36,119
uh the really critical ones are again

906
00:42:36,119 --> 00:42:39,300
sequence sections it detected some

907
00:42:39,300 --> 00:42:41,520
application error disclosure with some

908
00:42:41,520 --> 00:42:44,579
some stack trace it detected and also

909
00:42:44,579 --> 00:42:47,160
some cross-eyed scripting uh

910
00:42:47,160 --> 00:42:49,200
with persistent course apps scripting

911
00:42:49,200 --> 00:42:51,540
maybe and also reflected for site

912
00:42:51,540 --> 00:42:53,339
scripting as well

913
00:42:53,339 --> 00:42:54,839
so where's cross-site scripting you

914
00:42:54,839 --> 00:42:59,040
would not uh fix that basic primarily on

915
00:42:59,040 --> 00:43:01,020
the back end you would fix that in your

916
00:43:01,020 --> 00:43:03,240
single page application

917
00:43:03,240 --> 00:43:03,839
um

918
00:43:03,839 --> 00:43:06,240
by using some good framework like

919
00:43:06,240 --> 00:43:11,160
angular that has context aware encoding

920
00:43:11,160 --> 00:43:13,980
uh on already in place and also

921
00:43:13,980 --> 00:43:16,680
sanitization in place it is really

922
00:43:16,680 --> 00:43:18,540
difficult to solve cross-site scripting

923
00:43:18,540 --> 00:43:20,579
on the back end the only thing you can

924
00:43:20,579 --> 00:43:25,440
do here is also put input validation

925
00:43:25,440 --> 00:43:27,900
so the last thing I would just to show

926
00:43:27,900 --> 00:43:31,680
is uh because the time is already quite

927
00:43:31,680 --> 00:43:33,060
up

928
00:43:33,060 --> 00:43:36,780
um is that all the things I have shown

929
00:43:36,780 --> 00:43:40,160
to you so far uh you should automate

930
00:43:40,160 --> 00:43:43,140
completely so automate the static code

931
00:43:43,140 --> 00:43:45,480
analysis automate the dependency check

932
00:43:45,480 --> 00:43:48,720
as part of your CI CD pipeline

933
00:43:48,720 --> 00:43:49,859
um

934
00:43:49,859 --> 00:43:53,819
and then also do a container image scan

935
00:43:53,819 --> 00:43:56,700
with 3v for example as an open source

936
00:43:56,700 --> 00:43:59,579
tool if you're using containers and also

937
00:43:59,579 --> 00:44:02,880
kubernetes stuff like that and then you

938
00:44:02,880 --> 00:44:05,819
put that the image into the registry

939
00:44:05,819 --> 00:44:08,040
then you've deployed it to a kubernetes

940
00:44:08,040 --> 00:44:09,839
cluster and then you have to running

941
00:44:09,839 --> 00:44:13,560
application and then you can conduct

942
00:44:13,560 --> 00:44:16,560
Dynamic Securities scan using over step

943
00:44:16,560 --> 00:44:19,880
for example as shown

944
00:44:20,220 --> 00:44:22,700
um and on the top you have the manual

945
00:44:22,700 --> 00:44:25,619
testing here you can also conduct

946
00:44:25,619 --> 00:44:29,040
security related manual testing like uh

947
00:44:29,040 --> 00:44:32,640
explorative security tests you can uh

948
00:44:32,640 --> 00:44:35,760
you should do security code previous so

949
00:44:35,760 --> 00:44:38,160
this is a really critical point uh you

950
00:44:38,160 --> 00:44:40,500
always should have security code reviews

951
00:44:40,500 --> 00:44:42,060
in place

952
00:44:42,060 --> 00:44:44,160
um as part of your projects also in our

953
00:44:44,160 --> 00:44:47,640
projects no code will be pushed to the

954
00:44:47,640 --> 00:44:50,400
master branch in our kit version control

955
00:44:50,400 --> 00:44:54,740
without any security code review so so

956
00:44:54,740 --> 00:44:58,980
it always requires at least one human

957
00:44:58,980 --> 00:45:01,800
person to conduct a security code review

958
00:45:01,800 --> 00:45:04,319
and then clear you also have the pen

959
00:45:04,319 --> 00:45:07,440
tests so with explorative security tests

960
00:45:07,440 --> 00:45:11,400
you just try to to test some special

961
00:45:11,400 --> 00:45:13,859
functionality like for example you want

962
00:45:13,859 --> 00:45:17,339
to test some special business function

963
00:45:17,339 --> 00:45:20,040
today in your application for action

964
00:45:20,040 --> 00:45:23,940
attacks and with for that there's also a

965
00:45:23,940 --> 00:45:26,040
quite useful tool called Bug magnet

966
00:45:26,040 --> 00:45:28,319
which you can install in your Chrome

967
00:45:28,319 --> 00:45:31,680
browser for example and then you have a

968
00:45:31,680 --> 00:45:35,700
context aware menu available on each and

969
00:45:35,700 --> 00:45:38,700
every input Fields where you can just

970
00:45:38,700 --> 00:45:41,280
try out different payloads and try to

971
00:45:41,280 --> 00:45:43,800
find nasty things

972
00:45:43,800 --> 00:45:46,980
then one anti-pattern I still find in

973
00:45:46,980 --> 00:45:50,819
lots of projects unfortunately is that's

974
00:45:50,819 --> 00:45:53,520
lots of projects only rely on

975
00:45:53,520 --> 00:45:55,859
penetration testing

976
00:45:55,859 --> 00:45:59,220
um and don't contact any uh continuously

977
00:45:59,220 --> 00:46:03,000
uh perform security tests at all so

978
00:46:03,000 --> 00:46:06,119
they've followed a devops approach

979
00:46:06,119 --> 00:46:08,280
already they do continuous delivery

980
00:46:08,280 --> 00:46:09,480
deploy

981
00:46:09,480 --> 00:46:13,079
uh several times a day for example

982
00:46:13,079 --> 00:46:15,780
um but only to penetration tests maybe

983
00:46:15,780 --> 00:46:18,480
two times a year so that's a typical

984
00:46:18,480 --> 00:46:22,200
pattern I often see at companies and on

985
00:46:22,200 --> 00:46:24,300
the top you see the work that an

986
00:46:24,300 --> 00:46:26,280
attacker is doing so attacker typically

987
00:46:26,280 --> 00:46:30,060
work 24 7 they don't know holidays they

988
00:46:30,060 --> 00:46:32,880
don't know nothing about project

989
00:46:32,880 --> 00:46:35,160
vacations and stuff like that or

990
00:46:35,160 --> 00:46:38,160
weekends so they try to hammer on your

991
00:46:38,160 --> 00:46:40,380
application all the time

992
00:46:40,380 --> 00:46:43,500
and if you only have penetration tests

993
00:46:43,500 --> 00:46:45,480
like two times a year all the

994
00:46:45,480 --> 00:46:48,359
deployments uh that are running after

995
00:46:48,359 --> 00:46:50,760
such penetration tests

996
00:46:50,760 --> 00:46:53,819
um will be a blind spot completely so so

997
00:46:53,819 --> 00:46:57,240
you can never be sure if you are safe

998
00:46:57,240 --> 00:46:59,119
from attacking so that's why

999
00:46:59,119 --> 00:47:01,920
continuously testing for yourself is so

1000
00:47:01,920 --> 00:47:03,780
important

1001
00:47:03,780 --> 00:47:05,579
as a summary

1002
00:47:05,579 --> 00:47:08,280
um you should put security testing on

1003
00:47:08,280 --> 00:47:10,200
each and every layer of your security

1004
00:47:10,200 --> 00:47:12,359
testing permit

1005
00:47:12,359 --> 00:47:14,099
um as shown

1006
00:47:14,099 --> 00:47:18,480
in demos and also on the slides and a

1007
00:47:18,480 --> 00:47:21,660
second summary is that uh it is not

1008
00:47:21,660 --> 00:47:24,180
sufficient to only have Tooling in place

1009
00:47:24,180 --> 00:47:27,060
and in contact automated testing but it

1010
00:47:27,060 --> 00:47:29,819
is really important uh

1011
00:47:29,819 --> 00:47:33,020
to understand each other very good so so

1012
00:47:33,020 --> 00:47:36,300
developers should also show empathy for

1013
00:47:36,300 --> 00:47:39,180
operations and also for security and

1014
00:47:39,180 --> 00:47:40,859
vice versa

1015
00:47:40,859 --> 00:47:43,260
um so our main idea for example would be

1016
00:47:43,260 --> 00:47:47,099
that a developer just tries to work one

1017
00:47:47,099 --> 00:47:51,300
day at a security role at the security

1018
00:47:51,300 --> 00:47:54,240
person works for one day as a developer

1019
00:47:54,240 --> 00:47:56,880
and and also operations with that way

1020
00:47:56,880 --> 00:48:00,060
you can much more improve the

1021
00:48:00,060 --> 00:48:02,160
understanding for the other side what

1022
00:48:02,160 --> 00:48:04,319
which are typical problems you have to

1023
00:48:04,319 --> 00:48:05,819
care about

1024
00:48:05,819 --> 00:48:07,560
um and this is a really critical point

1025
00:48:07,560 --> 00:48:10,319
to understand each other so so devops is

1026
00:48:10,319 --> 00:48:13,800
basically a thing of cultural things and

1027
00:48:13,800 --> 00:48:16,140
not just putting tools everywhere so

1028
00:48:16,140 --> 00:48:19,440
this is an important thing here

1029
00:48:19,440 --> 00:48:23,220
uh so that's all I wanted to tell so I'm

1030
00:48:23,220 --> 00:48:26,160
open for questions now I just put in the

1031
00:48:26,160 --> 00:48:28,920
the URL of all the demos on the bottom

1032
00:48:28,920 --> 00:48:32,280
so you can note that down you can scan

1033
00:48:32,280 --> 00:48:34,200
my code for any contact details if you

1034
00:48:34,200 --> 00:48:37,140
want to contact me so feel free to ask

1035
00:48:37,140 --> 00:48:39,980
your questions

1036
00:48:40,260 --> 00:48:43,880
thanks a lot this was very clear

1037
00:48:44,720 --> 00:48:47,280
I have looked can you watch a look I did

1038
00:48:47,280 --> 00:48:50,819
not see any questions I refreshed it

1039
00:48:50,819 --> 00:48:53,520
yeah I hope I have the right link

1040
00:48:53,520 --> 00:48:55,500
so it was so clear that nobody has

1041
00:48:55,500 --> 00:48:57,000
questions so that

1042
00:48:57,000 --> 00:48:59,640
so it was very clear I guess I have a

1043
00:48:59,640 --> 00:49:01,260
question for you just a moment I'm

1044
00:49:01,260 --> 00:49:03,420
really checking on the uh

1045
00:49:03,420 --> 00:49:07,160
on the Hoover platform

1046
00:49:07,920 --> 00:49:10,560
yeah we still have 10 minutes left

1047
00:49:10,560 --> 00:49:12,960
yeah we have uh

1048
00:49:12,960 --> 00:49:17,339
okay I come back here to the zoom

1049
00:49:17,339 --> 00:49:19,740
yeah we have an audience of a 29

1050
00:49:19,740 --> 00:49:22,760
attendees plus your knee that's 31.

1051
00:49:22,760 --> 00:49:24,300
so

1052
00:49:24,300 --> 00:49:26,280
um I repeat for the benefit of the

1053
00:49:26,280 --> 00:49:28,440
audience please do not hesitate to uh

1054
00:49:28,440 --> 00:49:32,700
raise a question in the Q a not here uh

1055
00:49:32,700 --> 00:49:34,680
on zoom on YouTube but on the Hoover

1056
00:49:34,680 --> 00:49:35,819
platform

1057
00:49:35,819 --> 00:49:38,640
we still have an over 500 minutes

1058
00:49:38,640 --> 00:49:41,400
uh in fact I will uh raise a short

1059
00:49:41,400 --> 00:49:44,940
question I like the the last

1060
00:49:44,940 --> 00:49:46,440
slide where you talked about

1061
00:49:46,440 --> 00:49:49,800
communication and you uh you you

1062
00:49:49,800 --> 00:49:51,599
mentioned something which I I have never

1063
00:49:51,599 --> 00:49:54,540
heard before in 20 years of of

1064
00:49:54,540 --> 00:49:57,119
development and security whereby you

1065
00:49:57,119 --> 00:49:58,859
said that the developers should spend

1066
00:49:58,859 --> 00:50:02,040
maybe a day a year or so with the

1067
00:50:02,040 --> 00:50:03,599
security folks and basically the

1068
00:50:03,599 --> 00:50:05,640
security photo operations and vice versa

1069
00:50:05,640 --> 00:50:08,520
right so this is basically what I call

1070
00:50:08,520 --> 00:50:11,700
the cultural a cultural change yeah yeah

1071
00:50:11,700 --> 00:50:14,400
and so that people understand that but

1072
00:50:14,400 --> 00:50:16,260
all the free

1073
00:50:16,260 --> 00:50:19,800
let's say functions have different goals

1074
00:50:19,800 --> 00:50:22,920
and challenges yeah now theater work as

1075
00:50:22,920 --> 00:50:24,920
a consultant

1076
00:50:24,920 --> 00:50:28,079
do people start to implement such a best

1077
00:50:28,079 --> 00:50:30,540
practice and such a good advice but

1078
00:50:30,540 --> 00:50:32,520
you're listed do they start to do that

1079
00:50:32,520 --> 00:50:36,000
is this a big company uh let's say uh

1080
00:50:36,000 --> 00:50:39,839
attitude or rather a small company

1081
00:50:39,839 --> 00:50:43,560
yeah it's it's better works at smaller

1082
00:50:43,560 --> 00:50:45,300
companies I have to admit so so in

1083
00:50:45,300 --> 00:50:47,819
bigger companies you have much more

1084
00:50:47,819 --> 00:50:50,700
problems because these companies tend to

1085
00:50:50,700 --> 00:50:53,940
fulfill all the compliance issues all

1086
00:50:53,940 --> 00:50:56,160
the time so in 10 companies so it might

1087
00:50:56,160 --> 00:50:59,460
yeah that companies you you only do uh

1088
00:50:59,460 --> 00:51:02,160
security by bureaucracy so as I tell

1089
00:51:02,160 --> 00:51:04,740
sometimes so these people are interested

1090
00:51:04,740 --> 00:51:07,260
just to to check marks so they can

1091
00:51:07,260 --> 00:51:09,540
report to their management oh we have

1092
00:51:09,540 --> 00:51:12,119
done our things here so we have made

1093
00:51:12,119 --> 00:51:14,819
sure that we looked at each and every

1094
00:51:14,819 --> 00:51:17,040
component here but that does not improve

1095
00:51:17,040 --> 00:51:20,220
anything on security from my mind so

1096
00:51:20,220 --> 00:51:22,579
it's much better to really

1097
00:51:22,579 --> 00:51:26,099
exchange a role sometimes because I

1098
00:51:26,099 --> 00:51:28,500
always hear developers are that security

1099
00:51:28,500 --> 00:51:30,780
folks they don't want us to deploy

1100
00:51:30,780 --> 00:51:32,880
anything to production so they always

1101
00:51:32,880 --> 00:51:36,000
say no to our new features and then Vice

1102
00:51:36,000 --> 00:51:39,300
Versa Security people oh the developers

1103
00:51:39,300 --> 00:51:41,760
don't have any clue about security they

1104
00:51:41,760 --> 00:51:45,420
always built insecure things and and we

1105
00:51:45,420 --> 00:51:47,579
should teach them all the time so to not

1106
00:51:47,579 --> 00:51:49,800
do that and they don't understand our

1107
00:51:49,800 --> 00:51:52,920
penetration testing reports at all and

1108
00:51:52,920 --> 00:51:55,559
these are the misunderstandings and you

1109
00:51:55,559 --> 00:51:56,700
can clearly

1110
00:51:56,700 --> 00:51:59,339
understand much better if you just take

1111
00:51:59,339 --> 00:52:02,220
over the role for one day and and see

1112
00:52:02,220 --> 00:52:04,380
that also the security people have their

1113
00:52:04,380 --> 00:52:08,240
own problems to to deal with so

1114
00:52:08,240 --> 00:52:13,040
uh but have you seen companies uh

1115
00:52:13,040 --> 00:52:15,540
experience this uh

1116
00:52:15,540 --> 00:52:18,059
I don't know how you call that a rolling

1117
00:52:18,059 --> 00:52:21,359
job whereby uh they switch here so that

1118
00:52:21,359 --> 00:52:22,740
they understand because today I know

1119
00:52:22,740 --> 00:52:25,140
that there is this frustration that you

1120
00:52:25,140 --> 00:52:27,240
just mentioned yeah if sometimes even

1121
00:52:27,240 --> 00:52:28,760
the hate yeah

1122
00:52:28,760 --> 00:52:31,740
but the better perceive the other ones

1123
00:52:31,740 --> 00:52:33,960
are delaying yeah

1124
00:52:33,960 --> 00:52:37,319
um the Sprints and and the timelines the

1125
00:52:37,319 --> 00:52:39,660
operations people of course see the risk

1126
00:52:39,660 --> 00:52:43,740
of having a a regular updates and this

1127
00:52:43,740 --> 00:52:46,380
Ricky folks are a bit in between right

1128
00:52:46,380 --> 00:52:48,720
the code between operations and

1129
00:52:48,720 --> 00:52:50,640
basically you know we moved from

1130
00:52:50,640 --> 00:52:53,520
development to to devops and however

1131
00:52:53,520 --> 00:52:57,800
it's devsecops yeah yeah but uh

1132
00:52:57,800 --> 00:53:00,960
I mean do companies I mean is it you

1133
00:53:00,960 --> 00:53:02,520
know does it in the sponsorship of a

1134
00:53:02,520 --> 00:53:06,000
Caesar or the CIO to get this uh I don't

1135
00:53:06,000 --> 00:53:07,920
know how you call that rolling rolling

1136
00:53:07,920 --> 00:53:12,300
job uh cultural uh uh updates happen I

1137
00:53:12,300 --> 00:53:14,220
mean I've never heard about that and

1138
00:53:14,220 --> 00:53:15,720
actually this is very interesting that

1139
00:53:15,720 --> 00:53:18,359
you mentioned this I I only tried it out

1140
00:53:18,359 --> 00:53:20,640
so far in a smaller company in my

1141
00:53:20,640 --> 00:53:22,319
current project and big companies it's

1142
00:53:22,319 --> 00:53:25,740
it's almost impossible to do that so

1143
00:53:25,740 --> 00:53:30,300
you have so many standards in yeah you

1144
00:53:30,300 --> 00:53:32,520
guys are so far away from our developers

1145
00:53:32,520 --> 00:53:35,280
they'll sit in their own apartment and

1146
00:53:35,280 --> 00:53:37,740
they are not integrated somehow in our

1147
00:53:37,740 --> 00:53:39,780
project so that's the main issue we have

1148
00:53:39,780 --> 00:53:43,319
so so they always tell us or not to that

1149
00:53:43,319 --> 00:53:46,920
one not to do this one and yeah

1150
00:53:46,920 --> 00:53:50,099
that's the biggest issue we have there

1151
00:53:50,099 --> 00:53:52,740
no that's a very good point okay I'm

1152
00:53:52,740 --> 00:53:55,079
still looking uh we still have five six

1153
00:53:55,079 --> 00:53:57,540
minutes left uh just for the benefit of

1154
00:53:57,540 --> 00:54:00,119
your audience this was the last uh

1155
00:54:00,119 --> 00:54:01,800
session yeah we have five sessions

1156
00:54:01,800 --> 00:54:03,960
parallel and

1157
00:54:03,960 --> 00:54:04,680
um

1158
00:54:04,680 --> 00:54:07,680
we will soon have uh the final session

1159
00:54:07,680 --> 00:54:10,319
which is a keynote 15 years of robust

1160
00:54:10,319 --> 00:54:12,780
top 10 has the cloud made a difference

1161
00:54:12,780 --> 00:54:15,059
which of course is a very interesting

1162
00:54:15,059 --> 00:54:17,880
topic for all of us let me quickly check

1163
00:54:17,880 --> 00:54:20,700
if some more questions have

1164
00:54:20,700 --> 00:54:23,760
come up I refresh I just wanted to

1165
00:54:23,760 --> 00:54:26,579
mention as well so I don't like the term

1166
00:54:26,579 --> 00:54:28,700
devsecopes pretty much

1167
00:54:28,700 --> 00:54:33,000
because I I see security is always have

1168
00:54:33,000 --> 00:54:35,819
to be in devops already so so for me

1169
00:54:35,819 --> 00:54:37,740
what does the security thing should be a

1170
00:54:37,740 --> 00:54:40,079
silent thing so you should not have to

1171
00:54:40,079 --> 00:54:43,619
stress devsec officers also yeah so

1172
00:54:43,619 --> 00:54:46,859
that's a security is built in in the

1173
00:54:46,859 --> 00:54:49,920
development cycle tools uh culture yeah

1174
00:54:49,920 --> 00:54:54,359
yeah that's a good two point point I'm

1175
00:54:54,359 --> 00:54:56,460
sure you always have problems to to put

1176
00:54:56,460 --> 00:54:59,760
it to sect devops to devsecops or

1177
00:54:59,760 --> 00:55:02,760
devopsex so that's the number one

1178
00:55:02,760 --> 00:55:06,480
problems I already have so so and also

1179
00:55:06,480 --> 00:55:09,000
um shift left there's also some some

1180
00:55:09,000 --> 00:55:11,700
confusion sometimes so by shift left I

1181
00:55:11,700 --> 00:55:13,920
don't mean basically you just have to

1182
00:55:13,920 --> 00:55:16,200
shift left everything but you should

1183
00:55:16,200 --> 00:55:18,660
rather put Security in all your project

1184
00:55:18,660 --> 00:55:21,800
faces and so put it yeah yeah

1185
00:55:21,800 --> 00:55:25,020
that synopsis we say shift everywhere

1186
00:55:25,020 --> 00:55:27,420
because security should be you know from

1187
00:55:27,420 --> 00:55:30,480
a beginning to the end yeah exactly and

1188
00:55:30,480 --> 00:55:33,359
it's more a cultural habit than uh yeah

1189
00:55:33,359 --> 00:55:36,480
not just a process and also don't forget

1190
00:55:36,480 --> 00:55:40,020
your applications that are not uh in

1191
00:55:40,020 --> 00:55:42,059
active development anymore so that's

1192
00:55:42,059 --> 00:55:44,400
also a problem lots of companies forget

1193
00:55:44,400 --> 00:55:45,599
about

1194
00:55:45,599 --> 00:55:48,000
so that you know those applications need

1195
00:55:48,000 --> 00:55:49,980
some security fixes from time to time

1196
00:55:49,980 --> 00:55:52,859
yeah you're talking about then uh like

1197
00:55:52,859 --> 00:55:55,619
more Legacy applications exactly your

1198
00:55:55,619 --> 00:55:57,839
application that are subject to a yeah

1199
00:55:57,839 --> 00:56:01,920
to lesser updates yeah yeah okay yeah

1200
00:56:01,920 --> 00:56:03,960
okay

1201
00:56:03,960 --> 00:56:07,800
well uh any maybe final uh advice or

1202
00:56:07,800 --> 00:56:12,440
tips from your uh excellent presentation

1203
00:56:12,599 --> 00:56:15,480
it just starts with some some easy tests

1204
00:56:15,480 --> 00:56:18,000
like like putting tests for sequence

1205
00:56:18,000 --> 00:56:19,980
action or at least for for the

1206
00:56:19,980 --> 00:56:22,500
authorization so as we have seen broken

1207
00:56:22,500 --> 00:56:25,200
authorization is the number one uh issue

1208
00:56:25,200 --> 00:56:27,420
on the overstop 10 list so so you

1209
00:56:27,420 --> 00:56:29,640
clearly should put lots of effort make

1210
00:56:29,640 --> 00:56:31,559
sure that you don't have any holes in

1211
00:56:31,559 --> 00:56:36,140
your uh authorization metrics

1212
00:56:36,900 --> 00:56:38,700
okay and we spring security and

1213
00:56:38,700 --> 00:56:41,040
Frameworks like that they have so so uh

1214
00:56:41,040 --> 00:56:44,160
excellent testing support built in

1215
00:56:44,160 --> 00:56:46,920
already so so you can easily write that

1216
00:56:46,920 --> 00:56:50,480
kind of automated tests

1217
00:56:50,819 --> 00:56:52,440
okay

1218
00:56:52,440 --> 00:56:55,440
well thanks a lot Andreas and thanks a

1219
00:56:55,440 --> 00:56:58,079
lot to the audience for making it uh on

1220
00:56:58,079 --> 00:56:59,880
the first day afternoon here it's close

1221
00:56:59,880 --> 00:57:02,660
to 5 PM

