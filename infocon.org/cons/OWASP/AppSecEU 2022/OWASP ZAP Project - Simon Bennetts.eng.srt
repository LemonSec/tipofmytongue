1
00:00:04,080 --> 00:00:07,440
all right Hello everybody welcome back

2
00:00:07,440 --> 00:00:10,380
after hopefully a good lunch to the

3
00:00:10,380 --> 00:00:12,960
breaker track my name is Dan Gora and

4
00:00:12,960 --> 00:00:14,639
I'm currently a volunteer here in the

5
00:00:14,639 --> 00:00:16,740
OAS community and currently leading the

6
00:00:16,740 --> 00:00:19,440
OAS Frankfurt Meetup and also serving as

7
00:00:19,440 --> 00:00:21,420
the board member for the OAS Germany

8
00:00:21,420 --> 00:00:24,060
chapter I'm delighted today uh to be

9
00:00:24,060 --> 00:00:25,859
moderating the session and as the first

10
00:00:25,859 --> 00:00:29,400
talk today uh in this after lunch talks

11
00:00:29,400 --> 00:00:31,080
we have Simon Bennett's talking about

12
00:00:31,080 --> 00:00:34,140
the recent updates of the OS zap project

13
00:00:34,140 --> 00:00:36,660
so just to keep in mind if you have any

14
00:00:36,660 --> 00:00:38,700
questions please submit them in the Q a

15
00:00:38,700 --> 00:00:40,739
tab just on the right hand side of this

16
00:00:40,739 --> 00:00:43,140
video so we will leave about 10 minutes

17
00:00:43,140 --> 00:00:45,239
in the end to cover any questions that

18
00:00:45,239 --> 00:00:46,500
you have and I'm sure you will there

19
00:00:46,500 --> 00:00:47,820
will be lots of questions so really

20
00:00:47,820 --> 00:00:49,739
looking forward for that keep in mind

21
00:00:49,739 --> 00:00:51,480
that the chat is disabled so feel free

22
00:00:51,480 --> 00:00:53,160
to leave your comments in the movie chat

23
00:00:53,160 --> 00:00:54,840
provided

24
00:00:54,840 --> 00:00:58,140
all right let's get started

25
00:00:58,140 --> 00:01:00,059
so as most of you are probably aware

26
00:01:00,059 --> 00:01:03,120
Simon is the OSF attack proxy project

27
00:01:03,120 --> 00:01:05,760
leader the zap project is probably the

28
00:01:05,760 --> 00:01:07,439
most widely open source Dynamic

29
00:01:07,439 --> 00:01:09,299
application security testing tool and

30
00:01:09,299 --> 00:01:11,700
also an OS Flagship project

31
00:01:11,700 --> 00:01:13,979
Simon itself is a distinguished engineer

32
00:01:13,979 --> 00:01:16,920
at stackhawk a company that uses zap to

33
00:01:16,920 --> 00:01:19,020
help users fix application security bugs

34
00:01:19,020 --> 00:01:20,880
before they actually hit production

35
00:01:20,880 --> 00:01:22,979
and also Simon has a strong track of

36
00:01:22,979 --> 00:01:24,960
having talked about a demonstrated zap

37
00:01:24,960 --> 00:01:27,240
as a tool that conferences all over the

38
00:01:27,240 --> 00:01:30,060
world including blackhead Java one four

39
00:01:30,060 --> 00:01:32,220
step and of course all the good always

40
00:01:32,220 --> 00:01:35,280
conferences like OS apps like EU USA and

41
00:01:35,280 --> 00:01:36,600
Asia Pacific

42
00:01:36,600 --> 00:01:38,280
other prior to making the move into

43
00:01:38,280 --> 00:01:40,200
security Simon has been a developer for

44
00:01:40,200 --> 00:01:42,600
almost a quarter of a century and

45
00:01:42,600 --> 00:01:43,979
strongly believes that you cannot build

46
00:01:43,979 --> 00:01:45,900
secure web applications without actually

47
00:01:45,900 --> 00:01:48,240
knowing how to attack them

48
00:01:48,240 --> 00:01:51,420
all right Simon are you ready to present

49
00:01:51,420 --> 00:01:53,820
I am hopefully thank you very much Dan

50
00:01:53,820 --> 00:01:58,220
uh I will share my screen

51
00:01:58,220 --> 00:02:02,100
and hopefully you can now see that

52
00:02:02,100 --> 00:02:04,320
yes we can see your screen

53
00:02:04,320 --> 00:02:06,780
great uh well I don't need to do any

54
00:02:06,780 --> 00:02:08,880
more of an instruction uh because Dan's

55
00:02:08,880 --> 00:02:11,340
done that uh so this is a general talk

56
00:02:11,340 --> 00:02:14,220
about the zap project

57
00:02:14,220 --> 00:02:16,800
and in this talk I'm going to give a

58
00:02:16,800 --> 00:02:18,959
general introduction to zap uh for those

59
00:02:18,959 --> 00:02:20,819
of you who aren't too familiar with it

60
00:02:20,819 --> 00:02:23,580
I'm then going to talk about uh the work

61
00:02:23,580 --> 00:02:25,379
in progress the stuff we're doing on zap

62
00:02:25,379 --> 00:02:28,260
at the moment and for a significant part

63
00:02:28,260 --> 00:02:30,239
of the talk I'm going to have a demo

64
00:02:30,239 --> 00:02:32,400
um it will be live so uh fingers crossed

65
00:02:32,400 --> 00:02:34,260
the demo Gods like me

66
00:02:34,260 --> 00:02:36,120
um and I'm going to show a whole range

67
00:02:36,120 --> 00:02:37,800
of things really I'm going to I'm not

68
00:02:37,800 --> 00:02:39,540
going to any great depths here because

69
00:02:39,540 --> 00:02:41,700
there's a lot of debt to go into but I

70
00:02:41,700 --> 00:02:43,860
will show the desktop app I will show

71
00:02:43,860 --> 00:02:45,780
how you can set up Authentication

72
00:02:45,780 --> 00:02:48,060
put it all together and show you how you

73
00:02:48,060 --> 00:02:50,220
can actually set up the automation

74
00:02:50,220 --> 00:02:54,120
framework using authentication as well

75
00:02:54,120 --> 00:02:56,099
so that's the plan

76
00:02:56,099 --> 00:02:59,459
so uh what is that always a good place

77
00:02:59,459 --> 00:03:00,780
to start

78
00:03:00,780 --> 00:03:03,239
um so zap is a tool for finding

79
00:03:03,239 --> 00:03:06,239
vulnerabilities in web applications and

80
00:03:06,239 --> 00:03:10,080
I think the key thing here is that it's

81
00:03:10,080 --> 00:03:11,760
really look it's trying to find

82
00:03:11,760 --> 00:03:13,200
vulnerabilities and custom web

83
00:03:13,200 --> 00:03:16,080
applications so we're not looking for

84
00:03:16,080 --> 00:03:19,440
cves typically and we look for some

85
00:03:19,440 --> 00:03:21,180
um but we're not looking for known

86
00:03:21,180 --> 00:03:22,800
vulnerabilities and known applications

87
00:03:22,800 --> 00:03:24,659
there are other tools that do that very

88
00:03:24,659 --> 00:03:27,060
well we're looking for new

89
00:03:27,060 --> 00:03:28,560
vulnerabilities and new applications

90
00:03:28,560 --> 00:03:31,680
this means if you write a new

91
00:03:31,680 --> 00:03:34,739
application web application and no one's

92
00:03:34,739 --> 00:03:36,420
ever looked at it so there'll be no cves

93
00:03:36,420 --> 00:03:38,519
that will still potentially find a whole

94
00:03:38,519 --> 00:03:42,440
load of potential problems with it

95
00:03:43,019 --> 00:03:46,200
it is a flagship OS Project

96
00:03:46,200 --> 00:03:48,000
um as audio mentioned so these are the

97
00:03:48,000 --> 00:03:50,760
projects that are most mature and really

98
00:03:50,760 --> 00:03:53,459
recommended uh for getting started with

99
00:03:53,459 --> 00:03:55,319
application security

100
00:03:55,319 --> 00:03:57,720
like all levels projects is completely

101
00:03:57,720 --> 00:03:59,700
free and open source

102
00:03:59,700 --> 00:04:03,180
and it is cross-platform so uh zap is

103
00:04:03,180 --> 00:04:05,580
written in Java if you've got a jvm then

104
00:04:05,580 --> 00:04:07,799
zap should run on it I think I've got it

105
00:04:07,799 --> 00:04:09,659
working on a Raspberry Pi a few years

106
00:04:09,659 --> 00:04:11,879
ago so uh it was a bit slow but it still

107
00:04:11,879 --> 00:04:12,799
worked

108
00:04:12,799 --> 00:04:15,540
it is well maintained and I kind of make

109
00:04:15,540 --> 00:04:18,180
this point because over the years we've

110
00:04:18,180 --> 00:04:19,858
seen a lot of

111
00:04:19,858 --> 00:04:23,759
um uh web security tools come and go and

112
00:04:23,759 --> 00:04:25,620
quite a few of them you know start well

113
00:04:25,620 --> 00:04:28,500
but then they uh languish and don't get

114
00:04:28,500 --> 00:04:31,199
many updates zap is one of the few uh

115
00:04:31,199 --> 00:04:32,880
open source web security tools has been

116
00:04:32,880 --> 00:04:35,100
maintained consistently for the last 12

117
00:04:35,100 --> 00:04:37,080
years and it's obviously going very

118
00:04:37,080 --> 00:04:39,060
still going strong

119
00:04:39,060 --> 00:04:41,820
and finally uh we believe it is the

120
00:04:41,820 --> 00:04:44,160
world's most popular web scanner

121
00:04:44,160 --> 00:04:45,720
um that is a bit of a bold claim but

122
00:04:45,720 --> 00:04:47,100
I've been making it for quite a few

123
00:04:47,100 --> 00:04:48,840
years of various security conferences

124
00:04:48,840 --> 00:04:50,639
and no one's disagreed so it must be

125
00:04:50,639 --> 00:04:52,860
true but as you'll see from the chart

126
00:04:52,860 --> 00:04:53,940
down there

127
00:04:53,940 --> 00:04:56,580
um we have uh we had over three million

128
00:04:56,580 --> 00:04:58,800
check for updates um last month so real

129
00:04:58,800 --> 00:05:00,720
time zap starts up unless you turn it

130
00:05:00,720 --> 00:05:02,220
off um it will do a check for updates

131
00:05:02,220 --> 00:05:04,740
check we do know people turn it off so

132
00:05:04,740 --> 00:05:07,620
with example we run a lot more than that

133
00:05:07,620 --> 00:05:09,900
uh it is used by Enterprises and

134
00:05:09,900 --> 00:05:11,940
individuals all over the world

135
00:05:11,940 --> 00:05:14,100
and it is the foundation for many

136
00:05:14,100 --> 00:05:16,440
commercial tools and we have a whole set

137
00:05:16,440 --> 00:05:19,820
of Statistics available on Saturday

138
00:05:19,820 --> 00:05:23,820
proxy.org statistics

139
00:05:25,139 --> 00:05:27,419
so who is that for

140
00:05:27,419 --> 00:05:32,220
so when I really sap uh back in 2010 uh

141
00:05:32,220 --> 00:05:33,900
originally I was just aiming at ad

142
00:05:33,900 --> 00:05:36,300
developers and functional testers and

143
00:05:36,300 --> 00:05:38,639
the reason for that was because

144
00:05:38,639 --> 00:05:40,919
um I really didn't feel I'd cheek to a

145
00:05:40,919 --> 00:05:42,300
bigger developer myself didn't have the

146
00:05:42,300 --> 00:05:43,560
cheek to

147
00:05:43,560 --> 00:05:46,199
um claim that this zap was ready for

148
00:05:46,199 --> 00:05:49,979
security people as well but

149
00:05:49,979 --> 00:05:52,080
we know students make a lot of use for

150
00:05:52,080 --> 00:05:54,240
it of Zap and it's particularly useful

151
00:05:54,240 --> 00:05:56,039
because obviously there's nothing to

152
00:05:56,039 --> 00:05:58,380
hide all the source code is available so

153
00:05:58,380 --> 00:06:01,199
you can see exactly how zap works and

154
00:06:01,199 --> 00:06:03,660
you can get involved and help um makes

155
00:06:03,660 --> 00:06:04,919
that better as well

156
00:06:04,919 --> 00:06:07,139
but uh a lot of security you

157
00:06:07,139 --> 00:06:09,840
professionals use up now

158
00:06:09,840 --> 00:06:11,220
um it was only a couple of years in when

159
00:06:11,220 --> 00:06:13,139
I had to change the title line for which

160
00:06:13,139 --> 00:06:14,759
used to be um the security tool for

161
00:06:14,759 --> 00:06:17,000
developers because so many Security

162
00:06:17,000 --> 00:06:19,139
Professionals complained and said hey

163
00:06:19,139 --> 00:06:22,080
it's for us too so we know that zap is

164
00:06:22,080 --> 00:06:23,819
used by a wide range of people from

165
00:06:23,819 --> 00:06:25,259
people who are just starting out on a

166
00:06:25,259 --> 00:06:27,479
security journey to people who are very

167
00:06:27,479 --> 00:06:28,919
experienced and use a lot of other

168
00:06:28,919 --> 00:06:31,699
security tools

169
00:06:31,699 --> 00:06:34,199
so how can you run that

170
00:06:34,199 --> 00:06:37,860
so we have a desktop GUI which I'll be

171
00:06:37,860 --> 00:06:39,960
showing you later that does require Java

172
00:06:39,960 --> 00:06:41,220
although you can actually write in

173
00:06:41,220 --> 00:06:43,139
Docker as well if you want

174
00:06:43,139 --> 00:06:46,080
we have a heads up display so this

175
00:06:46,080 --> 00:06:49,080
actually basically in GX sap or zap

176
00:06:49,080 --> 00:06:51,780
content into your browser that's not

177
00:06:51,780 --> 00:06:53,759
something I'm going to demo this time uh

178
00:06:53,759 --> 00:06:55,500
but demoed it quite a few more times

179
00:06:55,500 --> 00:06:57,979
we've got loads of videos on Zeta

180
00:06:57,979 --> 00:07:00,120
proxy.org so have a look there if you

181
00:07:00,120 --> 00:07:03,600
want to see that in in action

182
00:07:03,600 --> 00:07:05,000
um and automation

183
00:07:05,000 --> 00:07:08,340
automation is a key thing for zap uh it

184
00:07:08,340 --> 00:07:10,440
is one of Zap strengths and something we

185
00:07:10,440 --> 00:07:12,479
do particularly well and we know a lot

186
00:07:12,479 --> 00:07:13,800
of people use zap and automation

187
00:07:13,800 --> 00:07:16,259
probably use it in automation more than

188
00:07:16,259 --> 00:07:19,280
um manual testing right now

189
00:07:20,220 --> 00:07:22,380
and and there are lots of different ways

190
00:07:22,380 --> 00:07:24,240
to automate that

191
00:07:24,240 --> 00:07:26,699
we do have a command line

192
00:07:26,699 --> 00:07:29,880
um so I kind of don't recommend this

193
00:07:29,880 --> 00:07:31,860
um because it's quite simple and doesn't

194
00:07:31,860 --> 00:07:33,300
really

195
00:07:33,300 --> 00:07:35,400
um you know there aren't very many

196
00:07:35,400 --> 00:07:37,560
options it's quite simplified

197
00:07:37,560 --> 00:07:40,020
uh but we do have these Docker package

198
00:07:40,020 --> 00:07:42,780
scans and these are

199
00:07:42,780 --> 00:07:45,479
um very well used

200
00:07:45,479 --> 00:07:47,099
um and they allow you to do a whole set

201
00:07:47,099 --> 00:07:49,199
of things we've got the the

202
00:07:49,199 --> 00:07:50,340
um

203
00:07:50,340 --> 00:07:52,380
we've got the Baseline scan which is

204
00:07:52,380 --> 00:07:54,720
kind of a very simple explores app using

205
00:07:54,720 --> 00:07:56,880
one or both of the spiders and then

206
00:07:56,880 --> 00:07:58,500
passive scanning so it's actually quite

207
00:07:58,500 --> 00:07:59,580
quick

208
00:07:59,580 --> 00:08:01,500
um it means it's um very good to include

209
00:08:01,500 --> 00:08:05,220
in CI CD we also have an API scan where

210
00:08:05,220 --> 00:08:06,900
you can import your API definition

211
00:08:06,900 --> 00:08:10,259
whether it's open API soap graphql

212
00:08:10,259 --> 00:08:12,360
anything like that and we have a full

213
00:08:12,360 --> 00:08:14,639
scan whereas that will do you one of

214
00:08:14,639 --> 00:08:17,099
both the spiders or the passive scanning

215
00:08:17,099 --> 00:08:18,960
and then we'll do the active scanning as

216
00:08:18,960 --> 00:08:21,960
well so the docker package scans offer

217
00:08:21,960 --> 00:08:24,960
you a lot of functionality a lot of

218
00:08:24,960 --> 00:08:26,879
useful functionality and provide some

219
00:08:26,879 --> 00:08:28,860
simpler options so those are good

220
00:08:28,860 --> 00:08:30,060
options

221
00:08:30,060 --> 00:08:33,599
um for using zap in automated way

222
00:08:33,599 --> 00:08:36,120
we also have the GitHub actions and they

223
00:08:36,120 --> 00:08:37,799
actually match those same Dockers

224
00:08:37,799 --> 00:08:39,479
package scans they use the docker

225
00:08:39,479 --> 00:08:42,020
package scans uh but they are available

226
00:08:42,020 --> 00:08:45,180
on GitHub and therefore you can

227
00:08:45,180 --> 00:08:47,580
run them on github's infrastructure

228
00:08:47,580 --> 00:08:49,440
rather than your own and they do have

229
00:08:49,440 --> 00:08:51,080
the advantage and that they actually

230
00:08:51,080 --> 00:08:53,459
integrate with GitHub issues if you want

231
00:08:53,459 --> 00:08:55,380
if you provide the right credentials

232
00:08:55,380 --> 00:08:57,540
then the actions will be able to raise

233
00:08:57,540 --> 00:09:00,480
issues on your repos

234
00:09:00,480 --> 00:09:02,700
we do have uh something new called the

235
00:09:02,700 --> 00:09:04,260
automation framework not quite so new

236
00:09:04,260 --> 00:09:06,240
anymore but it's something which is kind

237
00:09:06,240 --> 00:09:09,600
of ongoing and so happens that we are

238
00:09:09,600 --> 00:09:11,459
migrating the package scans to use the

239
00:09:11,459 --> 00:09:13,860
automation framework so if you're using

240
00:09:13,860 --> 00:09:15,839
the Baseline scan right now with some of

241
00:09:15,839 --> 00:09:17,700
the default options chances are you're

242
00:09:17,700 --> 00:09:20,399
already using the automation framework

243
00:09:20,399 --> 00:09:22,860
now I think it's worth pointing out that

244
00:09:22,860 --> 00:09:24,500
we do have

245
00:09:24,500 --> 00:09:28,260
uh a lot of information online so if we

246
00:09:28,260 --> 00:09:30,200
go to Za

247
00:09:30,200 --> 00:09:32,760
proxy.org and we have a look at

248
00:09:32,760 --> 00:09:34,500
documentation

249
00:09:34,500 --> 00:09:37,200
one of the things you'll see is automate

250
00:09:37,200 --> 00:09:39,120
and we have

251
00:09:39,120 --> 00:09:41,399
all of those options down here and if

252
00:09:41,399 --> 00:09:42,360
you have a look at something like the

253
00:09:42,360 --> 00:09:44,640
GitHub actions that will then take you

254
00:09:44,640 --> 00:09:46,980
to the GitHub Marketplace and you can

255
00:09:46,980 --> 00:09:48,480
see the the actions and you can then

256
00:09:48,480 --> 00:09:50,160
install them from there

257
00:09:50,160 --> 00:09:52,560
so we have a lot of really useful

258
00:09:52,560 --> 00:09:55,019
information on zapropsy.org so I

259
00:09:55,019 --> 00:09:56,640
strongly recommend that you kind of have

260
00:09:56,640 --> 00:09:59,100
a look at that if you um

261
00:09:59,100 --> 00:10:02,180
want to learn more

262
00:10:04,980 --> 00:10:07,560
finally we have the API in Demon mode

263
00:10:07,560 --> 00:10:10,080
and this is something that I mean this

264
00:10:10,080 --> 00:10:12,480
was the original way the only way you

265
00:10:12,480 --> 00:10:15,959
could automate this app really and it is

266
00:10:15,959 --> 00:10:18,839
um very full functional so you could

267
00:10:18,839 --> 00:10:21,120
start zapping demon mode so there's no

268
00:10:21,120 --> 00:10:24,420
GUI at all and then you have nearly full

269
00:10:24,420 --> 00:10:27,180
control of it by the API it is very

270
00:10:27,180 --> 00:10:29,040
similar to actually running it via the

271
00:10:29,040 --> 00:10:31,080
desktop except using the API into the

272
00:10:31,080 --> 00:10:31,920
desktop

273
00:10:31,920 --> 00:10:33,839
and you can do nearly everything you can

274
00:10:33,839 --> 00:10:35,640
do via the desktop

275
00:10:35,640 --> 00:10:37,140
a couple of things I think fuzzing is

276
00:10:37,140 --> 00:10:38,700
not possible at the moment we plan to

277
00:10:38,700 --> 00:10:41,459
add API calls for that but the reason we

278
00:10:41,459 --> 00:10:43,740
introduce the package scans and the

279
00:10:43,740 --> 00:10:46,140
automation framework is that we found a

280
00:10:46,140 --> 00:10:47,820
lot of people found the API quite

281
00:10:47,820 --> 00:10:49,440
complex

282
00:10:49,440 --> 00:10:51,180
um and you know if you want to do some

283
00:10:51,180 --> 00:10:53,040
standard things then the package scans

284
00:10:53,040 --> 00:10:55,860
the automation framework are easier to

285
00:10:55,860 --> 00:10:59,459
use but if you want full control then

286
00:10:59,459 --> 00:11:03,180
use the API and the package scans in the

287
00:11:03,180 --> 00:11:05,040
GitHub actions actually use the API

288
00:11:05,040 --> 00:11:06,480
unless they're using the automation

289
00:11:06,480 --> 00:11:08,519
framework the automation framework

290
00:11:08,519 --> 00:11:11,160
doesn't use the API but still uses the

291
00:11:11,160 --> 00:11:14,279
same functionality underneath

292
00:11:14,279 --> 00:11:15,500
foreign

293
00:11:15,500 --> 00:11:19,079
so how often is set released

294
00:11:19,079 --> 00:11:22,079
we try to do a full release at least

295
00:11:22,079 --> 00:11:23,339
once a year

296
00:11:23,339 --> 00:11:24,779
so

297
00:11:24,779 --> 00:11:28,260
zap is has a plug-in architecture and

298
00:11:28,260 --> 00:11:31,320
this means we can update add

299
00:11:31,320 --> 00:11:33,540
functionality to zap and update them

300
00:11:33,540 --> 00:11:37,260
whenever we want but the core we can

301
00:11:37,260 --> 00:11:38,880
only update when we do it for release

302
00:11:38,880 --> 00:11:40,980
and we want to do we try and do those at

303
00:11:40,980 --> 00:11:42,180
least once a year we've been trying to

304
00:11:42,180 --> 00:11:44,100
do them twice a year and not succeeding

305
00:11:44,100 --> 00:11:46,140
very well last release was sometime

306
00:11:46,140 --> 00:11:47,459
towards the end of the last year I think

307
00:11:47,459 --> 00:11:49,459
which is

308
00:11:49,459 --> 00:11:51,600
2.11.1 now

309
00:11:51,600 --> 00:11:53,339
so I said zap's got a plug-in

310
00:11:53,339 --> 00:11:55,740
architecture so we have add-ons and they

311
00:11:55,740 --> 00:11:58,019
are released as and when required and if

312
00:11:58,019 --> 00:12:00,899
I actually switch over to

313
00:12:00,899 --> 00:12:04,260
um is there a proxy.org again we can see

314
00:12:04,260 --> 00:12:05,940
we've got the marketplace here this

315
00:12:05,940 --> 00:12:08,339
Marketplace is accessible within zap you

316
00:12:08,339 --> 00:12:10,019
can actually show

317
00:12:10,019 --> 00:12:12,060
um install all these add-ons from within

318
00:12:12,060 --> 00:12:14,519
zap but we've also got all the

319
00:12:14,519 --> 00:12:16,680
information online as well if you want

320
00:12:16,680 --> 00:12:18,600
to have a look at that

321
00:12:18,600 --> 00:12:21,600
foreign

322
00:12:22,320 --> 00:12:25,260
but we do uh have weekly releases so

323
00:12:25,260 --> 00:12:27,360
this is a ZIP file and a weekly Docker

324
00:12:27,360 --> 00:12:29,339
image as well and we have actually a

325
00:12:29,339 --> 00:12:31,380
live Docker image I say live it probably

326
00:12:31,380 --> 00:12:32,940
should be daily now

327
00:12:32,940 --> 00:12:36,240
um so these images are um and releases

328
00:12:36,240 --> 00:12:38,880
are available uh so once a week and once

329
00:12:38,880 --> 00:12:41,339
a day and occasionally we've had the

330
00:12:41,339 --> 00:12:43,740
case where people have

331
00:12:43,740 --> 00:12:46,440
um got in contact us with us Say by IRC

332
00:12:46,440 --> 00:12:48,300
reported a problem and we've been able

333
00:12:48,300 --> 00:12:50,220
to fix it and release it and have them

334
00:12:50,220 --> 00:12:52,800
try out the live Docker image within an

335
00:12:52,800 --> 00:12:54,480
hour I'm certainly not promising we'll

336
00:12:54,480 --> 00:12:56,100
do that every time but it has happened

337
00:12:56,100 --> 00:12:58,880
more than once

338
00:13:00,380 --> 00:13:04,200
so that was a very general uh overview

339
00:13:04,200 --> 00:13:08,240
of that do we have any questions so far

340
00:13:08,579 --> 00:13:12,480
there's a one question by svedlana would

341
00:13:12,480 --> 00:13:14,760
you like to ask how can zap be used to

342
00:13:14,760 --> 00:13:17,220
test mobile apps

343
00:13:17,220 --> 00:13:22,500
right so that is if I go over to

344
00:13:22,500 --> 00:13:25,500
proxy.org

345
00:13:26,279 --> 00:13:29,339
if you have a look at the documentation

346
00:13:29,339 --> 00:13:31,440
we have a set of frequently asked

347
00:13:31,440 --> 00:13:34,680
questions uh these get quite bigger

348
00:13:34,680 --> 00:13:38,639
um so I'll just do a search for

349
00:13:38,639 --> 00:13:42,000
and down here is technology supported

350
00:13:42,000 --> 00:13:45,660
can zap use test mobile apps and yes so

351
00:13:45,660 --> 00:13:48,060
we actually have a video from zapcon

352
00:13:48,060 --> 00:13:51,360
2021 so you can actually watch that

353
00:13:51,360 --> 00:13:54,060
video and there are set of other videos

354
00:13:54,060 --> 00:13:56,399
third-party ones about settings

355
00:13:56,399 --> 00:13:59,700
up for Android and iPad and there are

356
00:13:59,700 --> 00:14:02,579
online articles about um from third

357
00:14:02,579 --> 00:14:05,880
parties again for how to use zap 2 uh

358
00:14:05,880 --> 00:14:07,980
instead intercept and or trap it traffic

359
00:14:07,980 --> 00:14:11,160
debugging iOS apps and ways to bypass

360
00:14:11,160 --> 00:14:13,560
Android SSL verification certificate

361
00:14:13,560 --> 00:14:15,779
pinning uh you'll see none of this

362
00:14:15,779 --> 00:14:18,420
content has been created by me I don't

363
00:14:18,420 --> 00:14:20,100
tend to get involved with Testing mobile

364
00:14:20,100 --> 00:14:23,639
apps but people clearly do and that's

365
00:14:23,639 --> 00:14:24,899
all that's a whole set of information

366
00:14:24,899 --> 00:14:27,440
which hopefully will be very useful

367
00:14:27,440 --> 00:14:29,940
great thank you Simon there's no further

368
00:14:29,940 --> 00:14:31,920
questions so we can cover the the other

369
00:14:31,920 --> 00:14:35,540
ones at the end I guess great

370
00:14:39,360 --> 00:14:42,060
um on oh yeah work in progress I thought

371
00:14:42,060 --> 00:14:43,740
it was a demo but uh no still something

372
00:14:43,740 --> 00:14:45,660
to go through so the second part is

373
00:14:45,660 --> 00:14:47,279
talking about the work in progress I

374
00:14:47,279 --> 00:14:50,040
stuff with doing on zap right now

375
00:14:50,040 --> 00:14:53,339
and zap is one of the most active

376
00:14:53,339 --> 00:14:55,620
um OS projects code project certainly

377
00:14:55,620 --> 00:14:58,740
and there's a lot of stuff going on

378
00:14:58,740 --> 00:15:00,779
um got a load of stuff to release uh but

379
00:15:00,779 --> 00:15:02,579
the stuff we're working on now

380
00:15:02,579 --> 00:15:05,579
um one of the key ones is networking so

381
00:15:05,579 --> 00:15:07,320
snap is actually using the same

382
00:15:07,320 --> 00:15:09,300
networking stack

383
00:15:09,300 --> 00:15:12,480
um that was in Paris when I forked it in

384
00:15:12,480 --> 00:15:16,380
2009 2010 uh this networking stack is

385
00:15:16,380 --> 00:15:18,959
really showing its age and we've had

386
00:15:18,959 --> 00:15:20,399
various problems with it there are

387
00:15:20,399 --> 00:15:22,560
certain types of attack that we can't do

388
00:15:22,560 --> 00:15:24,660
because of restrictions

389
00:15:24,660 --> 00:15:26,100
um it's a bit slow and it's not being

390
00:15:26,100 --> 00:15:28,019
well maintained or not this particular

391
00:15:28,019 --> 00:15:30,240
the branch run is not maintained at all

392
00:15:30,240 --> 00:15:33,480
so uh Ricardo has been working really

393
00:15:33,480 --> 00:15:35,820
hard on completely replacing the

394
00:15:35,820 --> 00:15:37,980
networking layer this is a massive

395
00:15:37,980 --> 00:15:40,860
change uh it's changed the core it's

396
00:15:40,860 --> 00:15:43,620
changed the add-ons but it's progressing

397
00:15:43,620 --> 00:15:46,260
very well it's not finished yet but

398
00:15:46,260 --> 00:15:48,600
we're moving to use a new library called

399
00:15:48,600 --> 00:15:51,000
Nettie and a couple other libraries as

400
00:15:51,000 --> 00:15:53,160
well but modern libraries which are well

401
00:15:53,160 --> 00:15:54,180
maintained

402
00:15:54,180 --> 00:15:57,000
and in time it will allow the plan is it

403
00:15:57,000 --> 00:16:00,180
will allow us to support HTTP 2 and

404
00:16:00,180 --> 00:16:03,240
other modern protocols going forward so

405
00:16:03,240 --> 00:16:07,079
this is a very big very significant

406
00:16:07,079 --> 00:16:08,699
um change which we've actually wanted to

407
00:16:08,699 --> 00:16:11,160
do for for a long time I think I was

408
00:16:11,160 --> 00:16:12,720
talking to a chatting with Ricardo about

409
00:16:12,720 --> 00:16:15,540
it in 2011 so uh it's been a long time

410
00:16:15,540 --> 00:16:17,579
coming

411
00:16:17,579 --> 00:16:19,740
the automation framework is something

412
00:16:19,740 --> 00:16:21,420
we're still working on

413
00:16:21,420 --> 00:16:22,860
um you'll see that it's pretty

414
00:16:22,860 --> 00:16:25,680
functional it's you can use it right now

415
00:16:25,680 --> 00:16:28,139
um it is you know we're starting to

416
00:16:28,139 --> 00:16:30,000
migrate the package scans to using it

417
00:16:30,000 --> 00:16:31,440
but there's still a lot more we can do

418
00:16:31,440 --> 00:16:33,839
so this is something which is ongoing

419
00:16:33,839 --> 00:16:35,880
and if you have any feedback or you know

420
00:16:35,880 --> 00:16:37,500
things you'd like to change or improve

421
00:16:37,500 --> 00:16:39,480
to do with the automation framework or

422
00:16:39,480 --> 00:16:40,920
anything else for that matter just get

423
00:16:40,920 --> 00:16:43,019
in touch

424
00:16:43,019 --> 00:16:45,420
then there are the scandals now this is

425
00:16:45,420 --> 00:16:47,880
something we haven't had um kind of

426
00:16:47,880 --> 00:16:49,079
focused on as much as we should have

427
00:16:49,079 --> 00:16:51,120
done over the years but we're now

428
00:16:51,120 --> 00:16:53,339
focusing more on those and one of the

429
00:16:53,339 --> 00:16:55,920
things we've been able to do is we've

430
00:16:55,920 --> 00:16:58,680
got this new stack hook sap fund and

431
00:16:58,680 --> 00:17:01,199
we've got bounties so what I'll just do

432
00:17:01,199 --> 00:17:03,959
is switch back to

433
00:17:03,959 --> 00:17:08,760
study proxy.org and what we've done is

434
00:17:08,760 --> 00:17:10,579
if you have a look at the documentation

435
00:17:10,579 --> 00:17:13,799
and scroll down to the bottom you'll see

436
00:17:13,799 --> 00:17:16,679
some test scans so what we're doing is

437
00:17:16,679 --> 00:17:19,679
we are automating zap to run a set of

438
00:17:19,679 --> 00:17:21,780
against a set of well-known test

439
00:17:21,780 --> 00:17:23,579
applications

440
00:17:23,579 --> 00:17:25,020
um the moment these include Google

441
00:17:25,020 --> 00:17:27,959
firing range Google security crawl maze

442
00:17:27,959 --> 00:17:30,840
websites vulnerable to ssti which there

443
00:17:30,840 --> 00:17:34,980
was project and Yahoo website lab and if

444
00:17:34,980 --> 00:17:36,660
you go into any of these you actually

445
00:17:36,660 --> 00:17:37,860
see

446
00:17:37,860 --> 00:17:39,780
um the results so you can see how we're

447
00:17:39,780 --> 00:17:42,360
doing and you can see exactly where

448
00:17:42,360 --> 00:17:45,120
we're passing and failing so we've been

449
00:17:45,120 --> 00:17:48,480
very honest about this and you're very

450
00:17:48,480 --> 00:17:51,840
open about it and these run every day

451
00:17:51,840 --> 00:17:54,419
and you can see some of these escaped

452
00:17:54,419 --> 00:17:56,220
xss we know some of these are not

453
00:17:56,220 --> 00:17:57,900
vulnerable so we're probably scoring

454
00:17:57,900 --> 00:18:00,000
less than we should do but one thing you

455
00:18:00,000 --> 00:18:02,880
will see is that we are actually we've

456
00:18:02,880 --> 00:18:05,160
got bounties on these um according to

457
00:18:05,160 --> 00:18:08,160
the stack orcsap fund so the stack Hawk

458
00:18:08,160 --> 00:18:10,740
sap fund is a fund dedicating to

459
00:18:10,740 --> 00:18:14,160
improving zap and there are bounties on

460
00:18:14,160 --> 00:18:16,380
a whole set of issues and if you

461
00:18:16,380 --> 00:18:17,820
actually want to go back here I think

462
00:18:17,820 --> 00:18:20,280
we've got a blog post about that as well

463
00:18:20,280 --> 00:18:22,919
so

464
00:18:22,919 --> 00:18:27,179
yeah and so what happens is if you go

465
00:18:27,179 --> 00:18:29,400
back to these

466
00:18:29,400 --> 00:18:32,100
examples you'll see that quite a few of

467
00:18:32,100 --> 00:18:32,820
them

468
00:18:32,820 --> 00:18:36,059
um are eligible for bounties so if you

469
00:18:36,059 --> 00:18:38,340
want to make a bit of money and help zap

470
00:18:38,340 --> 00:18:40,980
get better then you can

471
00:18:40,980 --> 00:18:43,320
work on these it's both the scan rules

472
00:18:43,320 --> 00:18:46,200
and actually the Crusty crawl maze is

473
00:18:46,200 --> 00:18:49,140
for spiders so you can see

474
00:18:49,140 --> 00:18:50,760
um if you make that better against any

475
00:18:50,760 --> 00:18:52,500
of these things then that could well be

476
00:18:52,500 --> 00:18:54,660
eligible for a bounty all the stuff is

477
00:18:54,660 --> 00:18:56,520
available online

478
00:18:56,520 --> 00:18:58,020
um so if you want any more information

479
00:18:58,020 --> 00:19:00,299
just get in touch with myself or anyone

480
00:19:00,299 --> 00:19:01,919
else in the core team

481
00:19:01,919 --> 00:19:03,900
uh but this is something that we're

482
00:19:03,900 --> 00:19:06,539
focusing a lot more on now we want zap

483
00:19:06,539 --> 00:19:08,700
to get the Scandal to get better and the

484
00:19:08,700 --> 00:19:10,620
zap tool to explore web applications

485
00:19:10,620 --> 00:19:13,080
more effectively uh so it's a real focus

486
00:19:13,080 --> 00:19:16,140
and uh we'd love your help and if you do

487
00:19:16,140 --> 00:19:18,059
know of any uh if you have any

488
00:19:18,059 --> 00:19:20,760
applications where zap doesn't crawl

489
00:19:20,760 --> 00:19:23,640
them effectively please let us know uh

490
00:19:23,640 --> 00:19:26,039
I've asked on Twitter and I've got some

491
00:19:26,039 --> 00:19:28,740
responses but nowhere near as many as

492
00:19:28,740 --> 00:19:31,140
I'd like I want to have more and more

493
00:19:31,140 --> 00:19:34,380
examples of where zap doesn't

494
00:19:34,380 --> 00:19:36,000
um explore web app web applications

495
00:19:36,000 --> 00:19:38,340
effectively particularly modern ones

496
00:19:38,340 --> 00:19:39,299
um because that's something we're

497
00:19:39,299 --> 00:19:42,139
focusing on as well

498
00:19:42,179 --> 00:19:44,940
we are taking part in Google summary of

499
00:19:44,940 --> 00:19:46,799
code once again this year

500
00:19:46,799 --> 00:19:48,419
um Google summer of code great

501
00:19:48,419 --> 00:19:50,640
Initiative for those who you don't know

502
00:19:50,640 --> 00:19:52,799
about it Google will pay students to

503
00:19:52,799 --> 00:19:55,559
work on open source projects osw has

504
00:19:55,559 --> 00:19:57,900
taken part many years

505
00:19:57,900 --> 00:19:59,940
um zap has taken part of at least nine

506
00:19:59,940 --> 00:20:01,799
or ten years I think

507
00:20:01,799 --> 00:20:03,900
um and this year we've got a student

508
00:20:03,900 --> 00:20:06,900
working on param miner so this is

509
00:20:06,900 --> 00:20:09,120
actually a burp Suite add-on

510
00:20:09,120 --> 00:20:10,740
um written by James Kettle originally

511
00:20:10,740 --> 00:20:13,440
which is open source and so we've got a

512
00:20:13,440 --> 00:20:15,720
student Archer who is working on this

513
00:20:15,720 --> 00:20:18,240
and porting that to zap so this is

514
00:20:18,240 --> 00:20:20,400
something I'm very excited about and be

515
00:20:20,400 --> 00:20:23,340
great to see how it gets on and just so

516
00:20:23,340 --> 00:20:25,260
you know

517
00:20:25,260 --> 00:20:28,080
um if we go back to

518
00:20:28,080 --> 00:20:29,940
uh does that mean you have a look at the

519
00:20:29,940 --> 00:20:33,360
community section you will see we have a

520
00:20:33,360 --> 00:20:36,059
student Hall of Fame so we've had loads

521
00:20:36,059 --> 00:20:37,500
of student contributions very

522
00:20:37,500 --> 00:20:40,500
significant student contributions and

523
00:20:40,500 --> 00:20:42,660
all the ones have been released uh are

524
00:20:42,660 --> 00:20:46,320
listed in this Hall of Fame uh and one

525
00:20:46,320 --> 00:20:48,419
thing I do want to stress is that zap is

526
00:20:48,419 --> 00:20:51,120
very much a community project so if

527
00:20:51,120 --> 00:20:53,940
you'd like to get involved please get in

528
00:20:53,940 --> 00:20:55,500
touch with yourself or anyone else in

529
00:20:55,500 --> 00:20:58,100
the core team

530
00:21:00,440 --> 00:21:02,520
kind of I mean it's a bit of a cheat to

531
00:21:02,520 --> 00:21:04,440
say it's work in progress but it has

532
00:21:04,440 --> 00:21:06,179
just started progressing

533
00:21:06,179 --> 00:21:09,660
um we put a pro uh proposal into OAS to

534
00:21:09,660 --> 00:21:13,260
get a commercial company to create a zap

535
00:21:13,260 --> 00:21:15,600
train the trainer course that proposal

536
00:21:15,600 --> 00:21:17,700
has just been approved

537
00:21:17,700 --> 00:21:19,559
um so that's something that's just

538
00:21:19,559 --> 00:21:22,320
started so this commercial company will

539
00:21:22,320 --> 00:21:25,080
work with us to create this that train

540
00:21:25,080 --> 00:21:26,880
the trainer course and we will release

541
00:21:26,880 --> 00:21:28,799
all of the material

542
00:21:28,799 --> 00:21:31,080
um open source for free of course like

543
00:21:31,080 --> 00:21:33,659
all over material so that's something

544
00:21:33,659 --> 00:21:37,080
which uh yeah I'm announcing now and

545
00:21:37,080 --> 00:21:40,460
something really looking forward to

546
00:21:41,600 --> 00:21:44,340
so that's everything that's going to go

547
00:21:44,340 --> 00:21:45,240
through

548
00:21:45,240 --> 00:21:47,460
um background and what we're doing

549
00:21:47,460 --> 00:21:50,940
and now it's demo time so fingers

550
00:21:50,940 --> 00:21:54,260
crossed for the demigods

551
00:22:00,539 --> 00:22:02,700
so first of all

552
00:22:02,700 --> 00:22:06,140
um this is the zap GUI

553
00:22:06,140 --> 00:22:09,120
and if you're so you're not aware of

554
00:22:09,120 --> 00:22:10,799
this this is what zap would look like

555
00:22:10,799 --> 00:22:13,140
when you started I'm not going to go

556
00:22:13,140 --> 00:22:15,240
through everything but I'm just going to

557
00:22:15,240 --> 00:22:17,400
show you just how you might get started

558
00:22:17,400 --> 00:22:20,340
I'm going to try and show you how to

559
00:22:20,340 --> 00:22:22,860
start exploring application and go set

560
00:22:22,860 --> 00:22:24,299
up authentication go all the way through

561
00:22:24,299 --> 00:22:26,280
to setting up the automation framework

562
00:22:26,280 --> 00:22:28,919
it will be kind of very high level

563
00:22:28,919 --> 00:22:30,600
although I will be doing everything in

564
00:22:30,600 --> 00:22:33,000
actually doing everything but I won't

565
00:22:33,000 --> 00:22:35,159
show all the options because that would

566
00:22:35,159 --> 00:22:37,620
take well take many many hours and we

567
00:22:37,620 --> 00:22:39,179
have got lots of videos

568
00:22:39,179 --> 00:22:40,860
um going into details on many of these

569
00:22:40,860 --> 00:22:41,880
things

570
00:22:41,880 --> 00:22:44,280
so if you're starting with exploring

571
00:22:44,280 --> 00:22:46,020
application or you want to test an

572
00:22:46,020 --> 00:22:48,059
application even if you want to end up

573
00:22:48,059 --> 00:22:50,520
automating that testing we recommend you

574
00:22:50,520 --> 00:22:53,039
start off by exploring it manually and

575
00:22:53,039 --> 00:22:55,980
the best way to do that is to do it via

576
00:22:55,980 --> 00:22:58,020
this manual Explorer option

577
00:22:58,020 --> 00:23:00,980
and the reason we say that is because

578
00:23:00,980 --> 00:23:04,140
you can configure your browser to proxy

579
00:23:04,140 --> 00:23:05,820
through zap but then you need to import

580
00:23:05,820 --> 00:23:07,860
the zap root CA certificate and what

581
00:23:07,860 --> 00:23:10,620
kind of mess messing around whereas zap

582
00:23:10,620 --> 00:23:12,659
can do that all for you and we can just

583
00:23:12,659 --> 00:23:14,760
launch the browser from zap

584
00:23:14,760 --> 00:23:16,799
and then you can explore your

585
00:23:16,799 --> 00:23:18,480
application and I've chosen a very

586
00:23:18,480 --> 00:23:19,799
simple one because I want to keep things

587
00:23:19,799 --> 00:23:22,440
nice and simple so what you want to do

588
00:23:22,440 --> 00:23:24,480
is you will then want to explore your

589
00:23:24,480 --> 00:23:25,980
application I'm not going to do a very

590
00:23:25,980 --> 00:23:28,559
good job of that but you also want to

591
00:23:28,559 --> 00:23:31,200
authenticate as well

592
00:23:31,200 --> 00:23:31,860
um

593
00:23:31,860 --> 00:23:34,639
and

594
00:23:34,679 --> 00:23:37,400
hopefully tested test.com will work and

595
00:23:37,400 --> 00:23:40,919
test123 amazingly secure I know

596
00:23:40,919 --> 00:23:43,200
and yeah so I've successfully logged in

597
00:23:43,200 --> 00:23:44,460
so

598
00:23:44,460 --> 00:23:47,700
what we'll see now is within snap we

599
00:23:47,700 --> 00:23:49,440
have the history you can see all the

600
00:23:49,440 --> 00:23:50,840
quests that I've made

601
00:23:50,840 --> 00:23:53,940
and if you select any of those requests

602
00:23:53,940 --> 00:23:56,340
you can see the actual request and you

603
00:23:56,340 --> 00:23:58,500
can see the responses here as well

604
00:23:58,500 --> 00:23:59,700
so this is

605
00:23:59,700 --> 00:24:01,799
history of everything you've done

606
00:24:01,799 --> 00:24:03,780
um as part of your testing all the

607
00:24:03,780 --> 00:24:06,179
requests been symbolize Apple proxy for

608
00:24:06,179 --> 00:24:07,200
example

609
00:24:07,200 --> 00:24:09,539
and then on the left hand side we will

610
00:24:09,539 --> 00:24:11,940
see the site Stream So This is a

611
00:24:11,940 --> 00:24:14,100
hierarchical representation of your site

612
00:24:14,100 --> 00:24:16,440
it's actually important that this is an

613
00:24:16,440 --> 00:24:19,320
accurate representation we kind of need

614
00:24:19,320 --> 00:24:22,080
to have each of these nodes as separate

615
00:24:22,080 --> 00:24:24,480
functionality so you'll see here the get

616
00:24:24,480 --> 00:24:28,320
to login.jsp is different from the post

617
00:24:28,320 --> 00:24:29,940
um partly because it's using a different

618
00:24:29,940 --> 00:24:31,260
method but also because it's got

619
00:24:31,260 --> 00:24:35,100
parameters which you can see here and

620
00:24:35,100 --> 00:24:36,780
because it's got a different method and

621
00:24:36,780 --> 00:24:38,460
different parameters we assume it's

622
00:24:38,460 --> 00:24:40,140
different functionality and that means

623
00:24:40,140 --> 00:24:42,360
we will attack these two nodes

624
00:24:42,360 --> 00:24:43,980
separately which is important because

625
00:24:43,980 --> 00:24:45,960
otherwise we tax just one of them we

626
00:24:45,960 --> 00:24:49,140
wouldn't be testing all of the

627
00:24:49,140 --> 00:24:51,539
applications functionality

628
00:24:51,539 --> 00:24:54,360
uh one thing I will note here um is down

629
00:24:54,360 --> 00:24:56,820
here we already have a number of alerts

630
00:24:56,820 --> 00:25:00,360
so because we are proxying through zap

631
00:25:00,360 --> 00:25:03,120
zap performs passive scanning

632
00:25:03,120 --> 00:25:05,039
um so it is looking at all of the

633
00:25:05,039 --> 00:25:07,880
requests and responses and it is finding

634
00:25:07,880 --> 00:25:10,020
vulnerabilities just based on that

635
00:25:10,020 --> 00:25:12,900
without doing anything nasty at all so

636
00:25:12,900 --> 00:25:16,020
just by proxying your requests through

637
00:25:16,020 --> 00:25:18,000
zap it will start telling you things

638
00:25:18,000 --> 00:25:19,500
that are potentially wrong with your

639
00:25:19,500 --> 00:25:21,840
application

640
00:25:21,840 --> 00:25:24,500
foreign

641
00:25:24,919 --> 00:25:26,940
so I'm not going to explore the

642
00:25:26,940 --> 00:25:28,200
application anymore I'm just going to

643
00:25:28,200 --> 00:25:30,059
leave it there but what I want to do now

644
00:25:30,059 --> 00:25:32,400
is set up Authentication

645
00:25:32,400 --> 00:25:35,640
and to do that we need to have a context

646
00:25:35,640 --> 00:25:37,559
that's where we hang these things off

647
00:25:37,559 --> 00:25:38,760
with zap

648
00:25:38,760 --> 00:25:40,020
so

649
00:25:40,020 --> 00:25:42,059
in zap right clicking right click

650
00:25:42,059 --> 00:25:43,799
everywhere there's always a whole load

651
00:25:43,799 --> 00:25:46,679
of options we try and put a lot of stuff

652
00:25:46,679 --> 00:25:48,779
into right click click options just to

653
00:25:48,779 --> 00:25:50,940
make sure we don't overwhelm you in the

654
00:25:50,940 --> 00:25:51,779
UI

655
00:25:51,779 --> 00:25:54,720
so we want to create a new context with

656
00:25:54,720 --> 00:25:56,039
budget

657
00:25:56,039 --> 00:25:58,919
and here it is and you'll see it's named

658
00:25:58,919 --> 00:26:01,799
something extensible like budget and

659
00:26:01,799 --> 00:26:04,380
it already because I've right clicked on

660
00:26:04,380 --> 00:26:07,320
that node it's everything under budget

661
00:26:07,320 --> 00:26:10,020
dot star so it's all based on rejects is

662
00:26:10,020 --> 00:26:13,260
don't need to exclude anything we do

663
00:26:13,260 --> 00:26:15,360
have this authentication section where

664
00:26:15,360 --> 00:26:16,740
you can set up the authentication

665
00:26:16,740 --> 00:26:18,720
manually I'm not going to do that

666
00:26:18,720 --> 00:26:20,400
because it's Error prone and there are

667
00:26:20,400 --> 00:26:22,620
better ways of doing it we also have an

668
00:26:22,620 --> 00:26:25,380
option for users which I will set up

669
00:26:25,380 --> 00:26:27,500
um and session management

670
00:26:27,500 --> 00:26:30,600
I will just okay that

671
00:26:30,600 --> 00:26:34,260
and one thing I will go back to is we

672
00:26:34,260 --> 00:26:37,679
did see we had this post request

673
00:26:37,679 --> 00:26:39,120
um following the login which is good to

674
00:26:39,120 --> 00:26:42,779
know and if we have a look at some of

675
00:26:42,779 --> 00:26:45,720
these responses so it's worth always

676
00:26:45,720 --> 00:26:48,299
keeping an eye on the

677
00:26:48,299 --> 00:26:50,159
um your application while you're testing

678
00:26:50,159 --> 00:26:52,320
it have you noticed we've got this user

679
00:26:52,320 --> 00:26:55,620
test at test.com and if we log out we've

680
00:26:55,620 --> 00:26:59,760
got guest user so here we can see we've

681
00:26:59,760 --> 00:27:02,520
got this test.com

682
00:27:02,520 --> 00:27:05,940
um and here once we've logged out we'll

683
00:27:05,940 --> 00:27:07,919
see we've got guest user

684
00:27:07,919 --> 00:27:10,799
so I said we can actually set up this

685
00:27:10,799 --> 00:27:13,200
stuff manually or other thing I should

686
00:27:13,200 --> 00:27:17,840
mention is if we have a look

687
00:27:18,419 --> 00:27:21,179
here we'll see you've got a j session ID

688
00:27:21,179 --> 00:27:24,360
cookie and actually if we go to the

689
00:27:24,360 --> 00:27:27,299
params tab you'll see anywhere you see a

690
00:27:27,299 --> 00:27:29,820
blue um sorry a green plus we have a

691
00:27:29,820 --> 00:27:31,320
load more tabs available we don't want

692
00:27:31,320 --> 00:27:32,640
to show them all because we found it

693
00:27:32,640 --> 00:27:34,679
overwhelmed a lot of people but you'll

694
00:27:34,679 --> 00:27:36,480
see we've got a whole set of parameters

695
00:27:36,480 --> 00:27:38,159
that zap is aware of including this

696
00:27:38,159 --> 00:27:42,120
cookie J session ID and that is has got

697
00:27:42,120 --> 00:27:44,760
a flag of session

698
00:27:44,760 --> 00:27:47,820
um so we know it's session ID so that's

699
00:27:47,820 --> 00:27:49,080
good

700
00:27:49,080 --> 00:27:50,880
and what I'm going to do is I'm going to

701
00:27:50,880 --> 00:27:53,460
select the post request I'm going to

702
00:27:53,460 --> 00:27:56,520
right click and I'm going to flag it as

703
00:27:56,520 --> 00:27:59,720
a context so it's a budget form-based

704
00:27:59,720 --> 00:28:03,000
authentication login request and that

705
00:28:03,000 --> 00:28:04,559
then fills all this information out for

706
00:28:04,559 --> 00:28:06,179
me which is what I wanted I didn't want

707
00:28:06,179 --> 00:28:08,400
to put this stuff in manually and why do

708
00:28:08,400 --> 00:28:10,620
it when zap can do for you

709
00:28:10,620 --> 00:28:12,419
'll see we've got the post data in there

710
00:28:12,419 --> 00:28:14,340
the username parameters write the

711
00:28:14,340 --> 00:28:17,580
password isn't right so we'll set that

712
00:28:17,580 --> 00:28:19,140
you see we've got this authentic

713
00:28:19,140 --> 00:28:21,779
authentication verification so we can

714
00:28:21,779 --> 00:28:24,059
check every response every request

715
00:28:24,059 --> 00:28:27,120
request response or polar specific URL

716
00:28:27,120 --> 00:28:29,100
uh every response will work in this

717
00:28:29,100 --> 00:28:31,200
particular case

718
00:28:31,200 --> 00:28:32,700
and

719
00:28:32,700 --> 00:28:36,500
I will add the user

720
00:28:41,820 --> 00:28:46,140
oh actually that is just a a useful name

721
00:28:46,140 --> 00:28:48,380
so

722
00:28:50,940 --> 00:28:53,340
these are the real credentials test one

723
00:28:53,340 --> 00:28:55,200
two three

724
00:28:55,200 --> 00:28:57,600
and session management you'll see we

725
00:28:57,600 --> 00:29:00,419
support cookie based HTTP auth and

726
00:29:00,419 --> 00:29:05,039
script based cookie based is the default

727
00:29:05,039 --> 00:29:06,840
um in Authentication

728
00:29:06,840 --> 00:29:09,900
we do want to check every response but

729
00:29:09,900 --> 00:29:11,220
again I'm not going to bother filling

730
00:29:11,220 --> 00:29:13,380
that stuff in manually because there's a

731
00:29:13,380 --> 00:29:15,419
good chance I'll get it wrong to have a

732
00:29:15,419 --> 00:29:18,059
look here we've got

733
00:29:18,059 --> 00:29:21,299
I will just search for that string there

734
00:29:21,299 --> 00:29:23,159
right click it

735
00:29:23,159 --> 00:29:27,779
and flag as context that's a budget

736
00:29:27,779 --> 00:29:31,080
authentication logged in indicator which

737
00:29:31,080 --> 00:29:34,140
gets filled in there and if we go back

738
00:29:34,140 --> 00:29:36,840
to the history and pick one of the early

739
00:29:36,840 --> 00:29:39,000
requests then hopefully that'll just

740
00:29:39,000 --> 00:29:41,960
have guest user so we can right click

741
00:29:41,960 --> 00:29:46,140
and we flag that as the budget logged

742
00:29:46,140 --> 00:29:48,659
out indicator we recommend if you've got

743
00:29:48,659 --> 00:29:50,580
both of these using them it just gives

744
00:29:50,580 --> 00:29:53,520
us extra data and I'll show you a bit

745
00:29:53,520 --> 00:29:56,700
more about that in a minute

746
00:29:56,700 --> 00:29:59,520
so that should be

747
00:29:59,520 --> 00:30:03,419
um everything I we need

748
00:30:03,419 --> 00:30:05,399
so what I'm going to do now I mean you

749
00:30:05,399 --> 00:30:07,080
can test this stuff in isolation but I'm

750
00:30:07,080 --> 00:30:09,059
feeling um kind of

751
00:30:09,059 --> 00:30:11,820
feeling lucky so I'm gonna try and

752
00:30:11,820 --> 00:30:13,320
spider this

753
00:30:13,320 --> 00:30:14,820
um with

754
00:30:14,820 --> 00:30:16,380
Authentication

755
00:30:16,380 --> 00:30:20,159
so right click attack and spider

756
00:30:20,159 --> 00:30:21,720
so

757
00:30:21,720 --> 00:30:23,760
we've selected the starting point we've

758
00:30:23,760 --> 00:30:26,399
got the budget context and it knows it's

759
00:30:26,399 --> 00:30:28,320
in that one and oh good we can select

760
00:30:28,320 --> 00:30:29,779
the test user

761
00:30:29,779 --> 00:30:33,059
and we will start the spider

762
00:30:33,059 --> 00:30:35,640
and you'll see a whole load of requests

763
00:30:35,640 --> 00:30:38,399
here and in the sites tree you'll see

764
00:30:38,399 --> 00:30:39,720
new

765
00:30:39,720 --> 00:30:41,580
um entries being added that fuzzy icon

766
00:30:41,580 --> 00:30:44,039
there is actually a little spider so we

767
00:30:44,039 --> 00:30:46,980
know that in the about.jsp we visited

768
00:30:46,980 --> 00:30:49,260
that manually but the admin.jsp we

769
00:30:49,260 --> 00:30:50,580
didn't so we can actually tell which

770
00:30:50,580 --> 00:30:52,559
things we failed to find

771
00:30:52,559 --> 00:30:53,779
and give a look at the messages

772
00:30:53,779 --> 00:30:55,980
hopefully if we select any of them and

773
00:30:55,980 --> 00:30:57,600
look at the response

774
00:30:57,600 --> 00:31:00,179
if things went well

775
00:31:00,179 --> 00:31:04,380
then yes user tested test.com so zap

776
00:31:04,380 --> 00:31:07,020
automatically authenticated us

777
00:31:07,020 --> 00:31:09,299
um using the details we provided

778
00:31:09,299 --> 00:31:12,080
however that's you know that one's okay

779
00:31:12,080 --> 00:31:14,520
hopefully this one will be okay as well

780
00:31:14,520 --> 00:31:15,659
but you don't want to go through and

781
00:31:15,659 --> 00:31:17,880
check everyone in detail

782
00:31:17,880 --> 00:31:18,899
um so

783
00:31:18,899 --> 00:31:20,580
and you don't have to

784
00:31:20,580 --> 00:31:22,559
um that's because sap maintained a set

785
00:31:22,559 --> 00:31:23,940
of statistics

786
00:31:23,940 --> 00:31:27,000
so if we go over here and I'm going to

787
00:31:27,000 --> 00:31:29,419
put in

788
00:31:30,360 --> 00:31:34,919
the zap URL so this is the host Reports

789
00:31:34,919 --> 00:31:37,320
app is listening on uh and we've got a

790
00:31:37,320 --> 00:31:39,659
link to the local API so we can explore

791
00:31:39,659 --> 00:31:41,880
the local API Let's see we can make that

792
00:31:41,880 --> 00:31:43,500
a bit bigger for you

793
00:31:43,500 --> 00:31:45,120
uh and there's a whole load of

794
00:31:45,120 --> 00:31:47,460
components but I'll scroll down to the

795
00:31:47,460 --> 00:31:48,480
stats

796
00:31:48,480 --> 00:31:50,880
and in this particular case so we've got

797
00:31:50,880 --> 00:31:53,220
site specific stats and

798
00:31:53,220 --> 00:31:55,799
um General stats I look at the all site

799
00:31:55,799 --> 00:31:58,740
stats and show everything

800
00:31:58,740 --> 00:32:01,279
so we can see for HTTP

801
00:32:01,279 --> 00:32:04,080
localhost 8080

802
00:32:04,080 --> 00:32:08,100
we have a set of auth stats so there

803
00:32:08,100 --> 00:32:09,899
were 101

804
00:32:09,899 --> 00:32:12,480
requests which were logged in and so

805
00:32:12,480 --> 00:32:13,980
those are ones which had the logged in

806
00:32:13,980 --> 00:32:15,419
indicator

807
00:32:15,419 --> 00:32:17,399
four were logged out so they had the

808
00:32:17,399 --> 00:32:21,419
logged out indicator and two unknown so

809
00:32:21,419 --> 00:32:23,640
those are probably things like um CSP

810
00:32:23,640 --> 00:32:25,620
pages so they didn't have either logged

811
00:32:25,620 --> 00:32:28,500
in or logged out indicator with 101

812
00:32:28,500 --> 00:32:29,940
logged in that's a pretty good

813
00:32:29,940 --> 00:32:33,059
indication that everything was okay so

814
00:32:33,059 --> 00:32:35,580
we now have some level of confidence

815
00:32:35,580 --> 00:32:39,480
that this spider actually worked

816
00:32:39,480 --> 00:32:42,899
so uh that was a very quick run through

817
00:32:42,899 --> 00:32:46,159
of how we can set up zap

818
00:32:46,159 --> 00:32:48,799
so doing it manually

819
00:32:48,799 --> 00:32:51,840
so what I'm going to do now is show you

820
00:32:51,840 --> 00:32:54,840
the automation framework and one of the

821
00:32:54,840 --> 00:32:57,360
reasons we as already mentioned that the

822
00:32:57,360 --> 00:32:59,100
automation framework is a bit easier

823
00:32:59,100 --> 00:33:01,919
than using the API but also it's more

824
00:33:01,919 --> 00:33:05,520
integrated with the desktop now we plan

825
00:33:05,520 --> 00:33:07,260
to add more integration but I'll show

826
00:33:07,260 --> 00:33:08,640
you how far we've got

827
00:33:08,640 --> 00:33:12,179
and what we have is we have a new

828
00:33:12,179 --> 00:33:15,840
automation tab so we can create uh the

829
00:33:15,840 --> 00:33:18,000
automation plan within the desktop and

830
00:33:18,000 --> 00:33:19,799
we can test it in the desktop and then

831
00:33:19,799 --> 00:33:21,539
we can export it because the automation

832
00:33:21,539 --> 00:33:23,940
plan is just a yaml file which we can

833
00:33:23,940 --> 00:33:26,220
then run from the command line

834
00:33:26,220 --> 00:33:30,480
so what I do now is I am going to create

835
00:33:30,480 --> 00:33:31,620
a new plan

836
00:33:31,620 --> 00:33:33,960
and you'll see it already recognizes

837
00:33:33,960 --> 00:33:36,000
we've got the default context and budget

838
00:33:36,000 --> 00:33:39,179
and these are all the jobs so automation

839
00:33:39,179 --> 00:33:41,279
plan has a set of jobs and you can have

840
00:33:41,279 --> 00:33:44,399
as many of these make sense so you can

841
00:33:44,399 --> 00:33:45,840
run the spider multiple times if you

842
00:33:45,840 --> 00:33:47,519
want you can have them in any order but

843
00:33:47,519 --> 00:33:49,380
we have a order we expect them to be

844
00:33:49,380 --> 00:33:50,760
running most of the time

845
00:33:50,760 --> 00:33:53,640
and we have a set of profiles uh I'm

846
00:33:53,640 --> 00:33:55,080
going to go for the Baseline one to

847
00:33:55,080 --> 00:33:57,419
start with because this will be quicker

848
00:33:57,419 --> 00:33:59,460
and I'm going to turn off the Ajax

849
00:33:59,460 --> 00:34:00,960
spider because we don't need it for

850
00:34:00,960 --> 00:34:03,059
budget and it'll take longer and I don't

851
00:34:03,059 --> 00:34:04,919
want to take up too much time

852
00:34:04,919 --> 00:34:08,040
so I will now create this plan

853
00:34:08,040 --> 00:34:10,500
so we will see you can double click on

854
00:34:10,500 --> 00:34:12,418
any of these things and you'll see we've

855
00:34:12,418 --> 00:34:16,500
got uh the budget context there I've got

856
00:34:16,500 --> 00:34:18,899
the include exclude we haven't got the

857
00:34:18,899 --> 00:34:21,480
authentication details in there they are

858
00:34:21,480 --> 00:34:22,859
still there we just don't expose them

859
00:34:22,859 --> 00:34:25,699
via the UI yet

860
00:34:25,918 --> 00:34:28,918
um and

861
00:34:28,918 --> 00:34:31,440
double check what I'll just check my

862
00:34:31,440 --> 00:34:33,540
thing to make sure so one thing I want

863
00:34:33,540 --> 00:34:36,780
to do is the spider we do actually want

864
00:34:36,780 --> 00:34:40,379
to run this as an authenticated user so

865
00:34:40,379 --> 00:34:44,699
that's how we put that information in

866
00:34:44,699 --> 00:34:47,399
and what you'll see is down here there's

867
00:34:47,399 --> 00:34:49,080
actually

868
00:34:49,080 --> 00:34:51,119
um there's a bit of a hierarchy so we

869
00:34:51,119 --> 00:34:54,418
have a test here so this is a Statistics

870
00:34:54,418 --> 00:34:57,480
test to check that at least 100 URLs are

871
00:34:57,480 --> 00:34:58,980
found

872
00:34:58,980 --> 00:35:00,720
um so you can see that

873
00:35:00,720 --> 00:35:03,540
um we're checking that the Spider Run

874
00:35:03,540 --> 00:35:05,640
for the automation framework adds at

875
00:35:05,640 --> 00:35:08,220
least 100 URLs which is kind of useful

876
00:35:08,220 --> 00:35:11,700
so we'll know if the spider actually

877
00:35:11,700 --> 00:35:14,700
fails to um find as many URLs as we

878
00:35:14,700 --> 00:35:15,480
expect

879
00:35:15,480 --> 00:35:17,640
but we also want to check it's

880
00:35:17,640 --> 00:35:21,180
authenticated so we can add another

881
00:35:21,180 --> 00:35:26,060
Statistics check and this time

882
00:35:29,040 --> 00:35:33,300
we will want to check and I'll just copy

883
00:35:33,300 --> 00:35:36,480
and paste this so I don't make a typo so

884
00:35:36,480 --> 00:35:39,240
the statistic is that we're logged in

885
00:35:39,240 --> 00:35:43,260
and we're going to fail the plan and we

886
00:35:43,260 --> 00:35:45,420
do need to put the site in because these

887
00:35:45,420 --> 00:35:47,400
are site-based stats so if you don't put

888
00:35:47,400 --> 00:35:49,440
the site in as I did when I was trying

889
00:35:49,440 --> 00:35:52,020
this out then it won't work because it

890
00:35:52,020 --> 00:35:54,420
won't find her generic a global stat

891
00:35:54,420 --> 00:35:56,579
like that I want to check that it's more

892
00:35:56,579 --> 00:35:59,520
than I'll go for 100 again

893
00:35:59,520 --> 00:36:02,640
so the idea is this will actually then

894
00:36:02,640 --> 00:36:06,079
check that we have have made as many

895
00:36:06,079 --> 00:36:10,020
authenticated requests as we expect

896
00:36:10,020 --> 00:36:11,940
and what I'll do now is I'm going to

897
00:36:11,940 --> 00:36:14,280
create a news app session

898
00:36:14,280 --> 00:36:18,540
now normally this would actually wipe

899
00:36:18,540 --> 00:36:20,339
everything you see it wipes the sites

900
00:36:20,339 --> 00:36:22,200
tree and wipes the history tree it

901
00:36:22,200 --> 00:36:23,640
doesn't wipe the automation plan because

902
00:36:23,640 --> 00:36:25,500
we think it's a kind of useful thing to

903
00:36:25,500 --> 00:36:27,420
for testing automation

904
00:36:27,420 --> 00:36:29,339
so I'm now going to keep my fingers

905
00:36:29,339 --> 00:36:32,400
crossed and run the automation plan

906
00:36:32,400 --> 00:36:34,320
and you'll see there we kicked off The

907
00:36:34,320 --> 00:36:37,980
Spider and you can see down here we've

908
00:36:37,980 --> 00:36:40,020
actually got the passive scan running so

909
00:36:40,020 --> 00:36:42,060
that's why that is still going

910
00:36:42,060 --> 00:36:45,119
and we can see that at least 100 URLs

911
00:36:45,119 --> 00:36:47,040
were found and the authentication was

912
00:36:47,040 --> 00:36:47,880
okay

913
00:36:47,880 --> 00:36:50,160
and if we switch over to the output

914
00:36:50,160 --> 00:36:52,500
panel this is the output that you'd get

915
00:36:52,500 --> 00:36:53,880
if you're running it from the command

916
00:36:53,880 --> 00:36:57,119
line as well and you can see that 132

917
00:36:57,119 --> 00:37:00,440
URLs were found by The Spider and 110

918
00:37:00,440 --> 00:37:03,599
authenticated requests were made so

919
00:37:03,599 --> 00:37:05,880
that's why these things passed

920
00:37:05,880 --> 00:37:08,880
and you can see uh the passive scan

921
00:37:08,880 --> 00:37:10,380
finished and we've actually generated

922
00:37:10,380 --> 00:37:14,940
report so let's see if I can actually

923
00:37:14,940 --> 00:37:17,460
high note these things properly copy

924
00:37:17,460 --> 00:37:21,800
that and have a look at

925
00:37:22,079 --> 00:37:24,540
the report and you may notice the very

926
00:37:24,540 --> 00:37:26,460
different report from the old style zap

927
00:37:26,460 --> 00:37:28,560
ones so we've got a whole new reporting

928
00:37:28,560 --> 00:37:30,900
framework and we've got lots of

929
00:37:30,900 --> 00:37:32,760
different types of reports which as well

930
00:37:32,760 --> 00:37:34,320
worth playing around with if you're

931
00:37:34,320 --> 00:37:37,500
interested and you'll actually see we've

932
00:37:37,500 --> 00:37:39,599
got a lot more detail and you can

933
00:37:39,599 --> 00:37:41,760
actually see the request or not the body

934
00:37:41,760 --> 00:37:43,980
because it's zero but the response body

935
00:37:43,980 --> 00:37:45,480
here so you can see a lot more

936
00:37:45,480 --> 00:37:47,820
information so our reports are a lot

937
00:37:47,820 --> 00:37:49,859
better than these to be that was

938
00:37:49,859 --> 00:37:52,920
something which was done a while ago and

939
00:37:52,920 --> 00:37:55,859
so zap reporting is a lot more uh

940
00:37:55,859 --> 00:37:59,040
effective and useful than it used to be

941
00:37:59,040 --> 00:38:01,440
so that was a quick run through

942
00:38:01,440 --> 00:38:04,619
um of how you can go from manual testing

943
00:38:04,619 --> 00:38:07,920
to setting up an automation plan and

944
00:38:07,920 --> 00:38:09,960
because I'm on a bit of a role I'm going

945
00:38:09,960 --> 00:38:11,220
to try adding

946
00:38:11,220 --> 00:38:14,520
um active scanning as well so see here

947
00:38:14,520 --> 00:38:18,420
we can actually I'm going to add a new

948
00:38:18,420 --> 00:38:21,300
job and we're going to go for the active

949
00:38:21,300 --> 00:38:23,900
scan job

950
00:38:23,960 --> 00:38:28,079
and in this case I'm going to turn most

951
00:38:28,079 --> 00:38:29,400
things off because this would take quite

952
00:38:29,400 --> 00:38:32,099
a while uh much longer than I've got but

953
00:38:32,099 --> 00:38:34,140
what I want to do is I'm just going to

954
00:38:34,140 --> 00:38:36,060
test for one thing which is cross-site

955
00:38:36,060 --> 00:38:39,540
scripting so turn everything off go here

956
00:38:39,540 --> 00:38:41,400
and add

957
00:38:41,400 --> 00:38:44,579
cross-site scripting reflected if I said

958
00:38:44,579 --> 00:38:46,680
and change the default also the

959
00:38:46,680 --> 00:38:48,720
threshold to medium so that will turn

960
00:38:48,720 --> 00:38:50,400
this one on

961
00:38:50,400 --> 00:38:53,520
that's the default strength and again we

962
00:38:53,520 --> 00:38:55,500
want to use the context and the

963
00:38:55,500 --> 00:38:57,420
authenticated user

964
00:38:57,420 --> 00:39:00,599
so that then has been added and you'll

965
00:39:00,599 --> 00:39:02,520
see it's kind of a gray box because this

966
00:39:02,520 --> 00:39:04,320
one didn't actually run

967
00:39:04,320 --> 00:39:08,820
and while I'm here I will

968
00:39:08,820 --> 00:39:11,160
see if I'm feeling really lucky and

969
00:39:11,160 --> 00:39:13,140
choose a different report

970
00:39:13,140 --> 00:39:14,839
just because

971
00:39:14,839 --> 00:39:18,359
and I think that's everything so I will

972
00:39:18,359 --> 00:39:20,940
create a brand new session which is

973
00:39:20,940 --> 00:39:22,320
always good when you're testing the

974
00:39:22,320 --> 00:39:23,880
automation framework just to make sure

975
00:39:23,880 --> 00:39:26,040
that everything is working the way you

976
00:39:26,040 --> 00:39:26,880
expect

977
00:39:26,880 --> 00:39:29,579
and there we go

978
00:39:29,579 --> 00:39:32,400
and we will see

979
00:39:32,400 --> 00:39:34,619
so that's just the audience so we can

980
00:39:34,619 --> 00:39:36,800
see authentication is

981
00:39:36,800 --> 00:39:39,839
successful there and what we can do is

982
00:39:39,839 --> 00:39:42,480
we can go and go back and see these

983
00:39:42,480 --> 00:39:46,500
stats anytime so again you can see load

984
00:39:46,500 --> 00:39:48,480
a logged in requests logged out and

985
00:39:48,480 --> 00:39:51,060
here's that authentication success and

986
00:39:51,060 --> 00:39:53,339
there are no failures if you are

987
00:39:53,339 --> 00:39:58,200
actually interested then go to the

988
00:39:58,200 --> 00:40:02,220
what we have under the documentation we

989
00:40:02,220 --> 00:40:05,160
scroll right down we have internal

990
00:40:05,160 --> 00:40:07,500
statistics so these are all of the

991
00:40:07,500 --> 00:40:10,320
statistics that are maintained by zap

992
00:40:10,320 --> 00:40:11,940
but this is the only place you can

993
00:40:11,940 --> 00:40:13,800
actually see all of them because

994
00:40:13,800 --> 00:40:15,480
um add-ons can have their own statistics

995
00:40:15,480 --> 00:40:18,480
and many of them do but here are the

996
00:40:18,480 --> 00:40:21,000
full details and if you actually so

997
00:40:21,000 --> 00:40:22,680
let's have a look and obviously this is

998
00:40:22,680 --> 00:40:25,759
filterable as well

999
00:40:26,040 --> 00:40:28,380
so authentication logged in and we can

1000
00:40:28,380 --> 00:40:31,200
actually take you to the code so this is

1001
00:40:31,200 --> 00:40:34,440
the code where that authentication

1002
00:40:34,440 --> 00:40:37,160
statistic is maintained

1003
00:40:37,160 --> 00:40:39,960
and there you can see it so if you

1004
00:40:39,960 --> 00:40:41,400
actually want to get stuck into the code

1005
00:40:41,400 --> 00:40:43,619
and see where everything is we try and

1006
00:40:43,619 --> 00:40:45,720
make that as easy as possible actually

1007
00:40:45,720 --> 00:40:48,660
while I'm here I will mention let's go

1008
00:40:48,660 --> 00:40:51,300
back and we have all of the alert

1009
00:40:51,300 --> 00:40:53,700
details here so say you want to have a

1010
00:40:53,700 --> 00:40:56,880
look at the cross-site scripting

1011
00:40:56,880 --> 00:41:00,000
so I scripting reflected

1012
00:41:00,000 --> 00:41:00,599
um

1013
00:41:00,599 --> 00:41:03,000
you can see all the details and you can

1014
00:41:03,000 --> 00:41:04,980
actually again this takes you directly

1015
00:41:04,980 --> 00:41:06,720
to the code

1016
00:41:06,720 --> 00:41:10,920
um so or the main class involved so what

1017
00:41:10,920 --> 00:41:12,839
we're trying to do is make it as easy as

1018
00:41:12,839 --> 00:41:14,400
possible for people to see what's going

1019
00:41:14,400 --> 00:41:17,400
on and to get involved as well uh said

1020
00:41:17,400 --> 00:41:20,160
zap is a community project and we are

1021
00:41:20,160 --> 00:41:22,140
really Keen for people to get involved

1022
00:41:22,140 --> 00:41:25,079
and so we try and make it as easy as

1023
00:41:25,079 --> 00:41:26,460
possible

1024
00:41:26,460 --> 00:41:29,000
foreign

1025
00:41:31,760 --> 00:41:34,200
passive scan can take a little while to

1026
00:41:34,200 --> 00:41:37,800
run but we'll see again that we have 100

1027
00:41:37,800 --> 00:41:39,839
URLs

1028
00:41:39,839 --> 00:41:41,460
um more than 100 and the authentication

1029
00:41:41,460 --> 00:41:43,740
is okay

1030
00:41:43,740 --> 00:41:46,380
um haven't got to the active scan yet

1031
00:41:46,380 --> 00:41:48,900
which covers the longest budget runs up

1032
00:41:48,900 --> 00:41:50,940
the more pages are found and some of

1033
00:41:50,940 --> 00:41:54,020
them can get a little bit complex

1034
00:41:57,780 --> 00:42:00,320
foreign

1035
00:42:03,680 --> 00:42:07,500
that you can install add-ons from within

1036
00:42:07,500 --> 00:42:10,800
tap so here is the manage add-ons option

1037
00:42:10,800 --> 00:42:13,440
so you can actually these are all the

1038
00:42:13,440 --> 00:42:15,720
add-ons that I've got installed and if

1039
00:42:15,720 --> 00:42:17,640
we do a check for updates then we will

1040
00:42:17,640 --> 00:42:20,099
see the marketplace as well so these are

1041
00:42:20,099 --> 00:42:23,520
all the add-ons on the marketplace uh

1042
00:42:23,520 --> 00:42:25,320
that I haven't got installed and have

1043
00:42:25,320 --> 00:42:26,880
got installed and obviously I can select

1044
00:42:26,880 --> 00:42:30,660
anything I want and install them

1045
00:42:30,660 --> 00:42:33,660
foreign

1046
00:42:35,060 --> 00:42:37,800
so this passive scan queue is going down

1047
00:42:37,800 --> 00:42:39,300
very slowly

1048
00:42:39,300 --> 00:42:41,160
um one of the problems we have with the

1049
00:42:41,160 --> 00:42:43,440
current version of Zap is there is only

1050
00:42:43,440 --> 00:42:45,599
one passive scan thread

1051
00:42:45,599 --> 00:42:47,160
um and this means the passive scanning

1052
00:42:47,160 --> 00:42:51,660
can take uh longer than it could do and

1053
00:42:51,660 --> 00:42:53,820
the good news is that that is no longer

1054
00:42:53,820 --> 00:42:54,780
the case

1055
00:42:54,780 --> 00:42:56,940
um you'll see I am actually running

1056
00:42:56,940 --> 00:43:01,440
um zap to 11 1 if I was running the

1057
00:43:01,440 --> 00:43:03,540
um the latest Dev release or weekly then

1058
00:43:03,540 --> 00:43:05,400
this wouldn't be a problem because we've

1059
00:43:05,400 --> 00:43:09,240
added passive stand threading so

1060
00:43:09,240 --> 00:43:11,099
basically we've got a configurable

1061
00:43:11,099 --> 00:43:13,980
number of threads and that significantly

1062
00:43:13,980 --> 00:43:16,440
improves this problem where I'm sitting

1063
00:43:16,440 --> 00:43:18,599
around in a demo um waiting for this to

1064
00:43:18,599 --> 00:43:21,900
finish and it can improve scan times

1065
00:43:21,900 --> 00:43:24,000
quite a bit as well so the passive

1066
00:43:24,000 --> 00:43:26,339
scanning we know can take a while

1067
00:43:26,339 --> 00:43:29,280
um but that is solved in the latest Dev

1068
00:43:29,280 --> 00:43:32,660
and weekly releases

1069
00:43:41,040 --> 00:43:43,980
and while I'm here and wait of this I

1070
00:43:43,980 --> 00:43:47,460
will mention the reporting so we do have

1071
00:43:47,460 --> 00:43:50,040
a so the reporting option obviously you

1072
00:43:50,040 --> 00:43:53,819
can look at it via the GUI as well and

1073
00:43:53,819 --> 00:43:56,040
here are the

1074
00:43:56,040 --> 00:43:58,920
um what we've got is a whole set of

1075
00:43:58,920 --> 00:44:01,200
different types of reports

1076
00:44:01,200 --> 00:44:03,540
um different templates and each of them

1077
00:44:03,540 --> 00:44:06,180
supports different sets of sections so

1078
00:44:06,180 --> 00:44:08,700
you can choose what you want to go into

1079
00:44:08,700 --> 00:44:11,760
the report they'd have different filters

1080
00:44:11,760 --> 00:44:14,040
like on risk and confidences you can

1081
00:44:14,040 --> 00:44:15,900
change a scope you can change the title

1082
00:44:15,900 --> 00:44:18,839
a whole load of options so there's a lot

1083
00:44:18,839 --> 00:44:22,200
of things you can do and if we have a

1084
00:44:22,200 --> 00:44:26,339
look at the website and look at the

1085
00:44:26,339 --> 00:44:29,099
reporting add-on

1086
00:44:29,099 --> 00:44:31,640
foreign

1087
00:44:42,140 --> 00:44:45,660
go down you can see the templates so

1088
00:44:45,660 --> 00:44:48,300
these are all of the templates we have

1089
00:44:48,300 --> 00:44:50,579
available and if you actually have a

1090
00:44:50,579 --> 00:44:51,780
look at them then they've got

1091
00:44:51,780 --> 00:44:53,700
screenshots as well so you can get an

1092
00:44:53,700 --> 00:44:55,920
idea of what the reports will actually

1093
00:44:55,920 --> 00:44:59,520
look like and you'll see that these are

1094
00:44:59,520 --> 00:45:02,339
quite

1095
00:45:02,339 --> 00:45:06,000
these are all quite different and it is

1096
00:45:06,000 --> 00:45:08,460
much easier to actually

1097
00:45:08,460 --> 00:45:11,400
um create reports as well it's got Json

1098
00:45:11,400 --> 00:45:13,619
we've got all sorts of different options

1099
00:45:13,619 --> 00:45:16,800
including a PDF one

1100
00:45:16,800 --> 00:45:18,839
um and if you want to create your own

1101
00:45:18,839 --> 00:45:20,400
reports it is much easier than it used

1102
00:45:20,400 --> 00:45:21,960
to be

1103
00:45:21,960 --> 00:45:26,099
and hopefully now uh it looks like the

1104
00:45:26,099 --> 00:45:28,980
passive scanners run so yep we'll see

1105
00:45:28,980 --> 00:45:31,400
that the passive the active scan has run

1106
00:45:31,400 --> 00:45:34,020
and hopefully yep it looks like we've

1107
00:45:34,020 --> 00:45:36,319
got a cross-site scripting vulnerability

1108
00:45:36,319 --> 00:45:41,880
but it should be the same

1109
00:45:41,880 --> 00:45:44,760
right browser

1110
00:45:44,760 --> 00:45:47,300
nope

1111
00:45:48,660 --> 00:45:51,980
try and get the right browser

1112
00:46:02,880 --> 00:46:05,760
and they can go we've got a very

1113
00:46:05,760 --> 00:46:08,760
different report but it's reporting it's

1114
00:46:08,760 --> 00:46:10,800
got the cross-site scripting reflected

1115
00:46:10,800 --> 00:46:13,280
vulnerability

1116
00:46:13,280 --> 00:46:15,660
so that is

1117
00:46:15,660 --> 00:46:18,240
um so basically what I've done is I have

1118
00:46:18,240 --> 00:46:21,000
gone through from uh exploring an

1119
00:46:21,000 --> 00:46:23,940
application manually uh having a look at

1120
00:46:23,940 --> 00:46:26,040
the how it authenticates and how it

1121
00:46:26,040 --> 00:46:28,500
handles sessions I've configured that in

1122
00:46:28,500 --> 00:46:30,660
zap manually

1123
00:46:30,660 --> 00:46:32,880
um and I tested it using the spider I've

1124
00:46:32,880 --> 00:46:36,119
shown you the stats and then uh actually

1125
00:46:36,119 --> 00:46:38,700
creating an automation plan

1126
00:46:38,700 --> 00:46:41,339
um got it running a spider and then and

1127
00:46:41,339 --> 00:46:43,020
changed it so that checks the stats as

1128
00:46:43,020 --> 00:46:44,640
well so we can be sure that the

1129
00:46:44,640 --> 00:46:46,579
authentication is still working

1130
00:46:46,579 --> 00:46:49,980
and I've then added active scanning as

1131
00:46:49,980 --> 00:46:53,520
well and so what you can now do we can

1132
00:46:53,520 --> 00:46:57,300
save that as a yaml file and we can run

1133
00:46:57,300 --> 00:46:58,140
it

1134
00:46:58,140 --> 00:46:58,740
um

1135
00:46:58,740 --> 00:47:01,079
from the command line with zap and

1136
00:47:01,079 --> 00:47:02,339
automate everything and if anything

1137
00:47:02,339 --> 00:47:05,160
significant changes so so we don't find

1138
00:47:05,160 --> 00:47:07,800
as many URLs as we expect or if we find

1139
00:47:07,800 --> 00:47:10,319
too much we could add extra test checks

1140
00:47:10,319 --> 00:47:13,380
in there or if we don't authenticate

1141
00:47:13,380 --> 00:47:14,700
enough or if you have between the

1142
00:47:14,700 --> 00:47:16,619
authentication failures you can add as

1143
00:47:16,619 --> 00:47:20,819
many of those tests as you like so it is

1144
00:47:20,819 --> 00:47:23,220
very flexible and should give you a lot

1145
00:47:23,220 --> 00:47:25,140
more confidence that your automated

1146
00:47:25,140 --> 00:47:26,819
scans are doing what you really think

1147
00:47:26,819 --> 00:47:28,740
they are doing

1148
00:47:28,740 --> 00:47:30,780
so that is the demo

1149
00:47:30,780 --> 00:47:35,280
um and now I can switch back to the um

1150
00:47:35,280 --> 00:47:36,480
the

1151
00:47:36,480 --> 00:47:39,920
slide and I said more details said

1152
00:47:39,920 --> 00:47:43,140
aproxy.org but now I think I've got time

1153
00:47:43,140 --> 00:47:45,660
some questions

1154
00:47:45,660 --> 00:47:48,359
thank you very much Simon amazing so

1155
00:47:48,359 --> 00:47:51,480
we've got actually quite a few questions

1156
00:47:51,480 --> 00:47:52,920
um we probably won't be able to cover

1157
00:47:52,920 --> 00:47:55,619
them all but let's just get started with

1158
00:47:55,619 --> 00:47:58,800
one of the the biggest questions is what

1159
00:47:58,800 --> 00:48:00,839
is the best language in your opinion to

1160
00:48:00,839 --> 00:48:03,900
write authentication scripts in

1161
00:48:03,900 --> 00:48:07,380
oh good question uh authentication

1162
00:48:07,380 --> 00:48:11,160
scripts so basically

1163
00:48:11,160 --> 00:48:15,480
um so we have scripting here and I've

1164
00:48:15,480 --> 00:48:18,060
probably got quite a few uh

1165
00:48:18,060 --> 00:48:20,579
I'd say I mean zap supports a whole set

1166
00:48:20,579 --> 00:48:22,740
of scripting languages I think it's

1167
00:48:22,740 --> 00:48:24,599
whatever scripting language you're most

1168
00:48:24,599 --> 00:48:26,339
comfortable with

1169
00:48:26,339 --> 00:48:29,119
um so we support things like jython and

1170
00:48:29,119 --> 00:48:32,520
JavaScript and zest scripts uh which I

1171
00:48:32,520 --> 00:48:34,260
it's kind of it's graphical scripting

1172
00:48:34,260 --> 00:48:35,700
language

1173
00:48:35,700 --> 00:48:39,240
um I'd say I mean JavaScript is pretty

1174
00:48:39,240 --> 00:48:41,640
good the only problem with JavaScript is

1175
00:48:41,640 --> 00:48:42,960
um there are two different JavaScript

1176
00:48:42,960 --> 00:48:47,339
engines thanks to uh Oracle um so it you

1177
00:48:47,339 --> 00:48:48,780
do need to make sure that JavaScript

1178
00:48:48,780 --> 00:48:50,099
will work with the engine that you

1179
00:48:50,099 --> 00:48:51,540
choose

1180
00:48:51,540 --> 00:48:54,000
um but yeah it's whichever one works for

1181
00:48:54,000 --> 00:48:56,160
you they all should work in the same way

1182
00:48:56,160 --> 00:48:58,680
there shouldn't be any but apart from

1183
00:48:58,680 --> 00:49:01,140
zest zest is significantly different uh

1184
00:49:01,140 --> 00:49:02,579
because it's more of a graphical um

1185
00:49:02,579 --> 00:49:04,560
templating language uh but yeah

1186
00:49:04,560 --> 00:49:07,500
whichever one works for you

1187
00:49:07,500 --> 00:49:08,940
great thank you Simon and that actually

1188
00:49:08,940 --> 00:49:10,319
leads to the second question by

1189
00:49:10,319 --> 00:49:12,599
Jeremiah's which is about assessed

1190
00:49:12,599 --> 00:49:14,099
scripting languages which was created

1191
00:49:14,099 --> 00:49:16,560
Mozilla but is not actively maintained

1192
00:49:16,560 --> 00:49:18,960
so are you planning to invest more time

1193
00:49:18,960 --> 00:49:21,240
or into zest as a scripting language or

1194
00:49:21,240 --> 00:49:22,859
do you want to Sunset it at some point

1195
00:49:22,859 --> 00:49:25,200
well it is actively maintained I mean we

1196
00:49:25,200 --> 00:49:26,819
haven't updated it very much recently

1197
00:49:26,819 --> 00:49:28,380
I'll have to admit

1198
00:49:28,380 --> 00:49:30,599
um but when I left Mozilla uh we went

1199
00:49:30,599 --> 00:49:32,760
through the process and zest was

1200
00:49:32,760 --> 00:49:36,240
transferred to the zap project so it was

1201
00:49:36,240 --> 00:49:39,180
created in Mozilla but the zap pro

1202
00:49:39,180 --> 00:49:42,180
project now owns the zest language we

1203
00:49:42,180 --> 00:49:44,700
are certainly planning on maintaining it

1204
00:49:44,700 --> 00:49:48,359
uh one of the problems we have is that

1205
00:49:48,359 --> 00:49:50,579
there's too much to do and not enough

1206
00:49:50,579 --> 00:49:53,640
people we need more volunteers so if

1207
00:49:53,640 --> 00:49:55,260
you'd like to get involved with zap

1208
00:49:55,260 --> 00:49:57,599
there's always a million things to do

1209
00:49:57,599 --> 00:49:58,980
um to just get in touch with yourself or

1210
00:49:58,980 --> 00:50:01,339
any other project leaders

1211
00:50:01,339 --> 00:50:03,000
and

1212
00:50:03,000 --> 00:50:04,980
but zest is something we plan on

1213
00:50:04,980 --> 00:50:06,420
maintaining

1214
00:50:06,420 --> 00:50:08,339
um we haven't spent as much time on us

1215
00:50:08,339 --> 00:50:11,099
as we'd like to have done but it does

1216
00:50:11,099 --> 00:50:13,200
kind of mostly with it works pretty well

1217
00:50:13,200 --> 00:50:14,760
for what it does there are lots more

1218
00:50:14,760 --> 00:50:18,060
things it could do I agree but uh yeah

1219
00:50:18,060 --> 00:50:21,000
we will maintain it uh we're not no

1220
00:50:21,000 --> 00:50:24,780
plans to Sunset it yet okay great and

1221
00:50:24,780 --> 00:50:26,940
there's another question by Mark so um

1222
00:50:26,940 --> 00:50:29,280
how does zap upload tests in its

1223
00:50:29,280 --> 00:50:31,200
automated scans and can that be actually

1224
00:50:31,200 --> 00:50:32,819
included

1225
00:50:32,819 --> 00:50:35,280
upload tests sorry

1226
00:50:35,280 --> 00:50:37,140
I think it's probably just the the way

1227
00:50:37,140 --> 00:50:39,480
you can import tests and how you can

1228
00:50:39,480 --> 00:50:40,980
include that

1229
00:50:40,980 --> 00:50:44,280
okay so um we have

1230
00:50:44,280 --> 00:50:46,680
um so both active scandals and passive

1231
00:50:46,680 --> 00:50:50,099
scan rules and we have

1232
00:50:50,099 --> 00:50:52,020
um different add-ons for the release

1233
00:50:52,020 --> 00:50:54,780
quality add-on scandals which get

1234
00:50:54,780 --> 00:50:57,059
included with zap then we have beta

1235
00:50:57,059 --> 00:50:58,680
quality scan laws and Alpha counts

1236
00:50:58,680 --> 00:51:00,359
quality scandals

1237
00:51:00,359 --> 00:51:04,020
um well is status rod and quality so any

1238
00:51:04,020 --> 00:51:06,300
new scan rule will start off as Alpha

1239
00:51:06,300 --> 00:51:08,280
status then get promoted to Beta wants

1240
00:51:08,280 --> 00:51:09,660
to have a bit of exposure and then

1241
00:51:09,660 --> 00:51:11,579
hopefully get promoted to release as

1242
00:51:11,579 --> 00:51:13,280
long as it's uh well behaving

1243
00:51:13,280 --> 00:51:17,099
so those are all in the marketplace and

1244
00:51:17,099 --> 00:51:19,579
uh

1245
00:51:19,880 --> 00:51:23,520
so I've actually oh that's the

1246
00:51:23,520 --> 00:51:27,079
marketplace so

1247
00:51:27,960 --> 00:51:30,660
so you can see I've got the

1248
00:51:30,660 --> 00:51:32,520
um release

1249
00:51:32,520 --> 00:51:35,040
um status Alpha session beta status and

1250
00:51:35,040 --> 00:51:36,300
a passive

1251
00:51:36,300 --> 00:51:39,359
um release and beta status scandals some

1252
00:51:39,359 --> 00:51:42,359
things like soap actually add their own

1253
00:51:42,359 --> 00:51:44,819
um scan rules so add-ons can add their

1254
00:51:44,819 --> 00:51:47,940
own scan rules uh so any ad on Canon

1255
00:51:47,940 --> 00:51:49,619
scandals as long as it's specific to

1256
00:51:49,619 --> 00:51:51,900
what it's actually trying to do you can

1257
00:51:51,900 --> 00:51:53,940
also have scripting

1258
00:51:53,940 --> 00:51:56,280
um scandals so I've got some here and

1259
00:51:56,280 --> 00:51:58,380
there's actually a project for Community

1260
00:51:58,380 --> 00:51:59,880
Scripts

1261
00:51:59,880 --> 00:52:01,380
can

1262
00:52:01,380 --> 00:52:02,819
go

1263
00:52:02,819 --> 00:52:05,819
so

1264
00:52:07,140 --> 00:52:10,319
so there is a community scripts add-on

1265
00:52:10,319 --> 00:52:13,800
so this has got a whole set of example

1266
00:52:13,800 --> 00:52:15,119
add-ons

1267
00:52:15,119 --> 00:52:17,040
um written by the community and that's

1268
00:52:17,040 --> 00:52:18,839
actually there is a an add-on which just

1269
00:52:18,839 --> 00:52:20,640
includes the community scripts which you

1270
00:52:20,640 --> 00:52:22,920
can put in um so we've got a set of

1271
00:52:22,920 --> 00:52:26,940
active ones there and passive ones so

1272
00:52:26,940 --> 00:52:28,680
you know you can

1273
00:52:28,680 --> 00:52:32,520
import rules oh sorry zap add-ons which

1274
00:52:32,520 --> 00:52:34,619
include scan rules or you can import

1275
00:52:34,619 --> 00:52:37,140
scripts as well so there's lots of

1276
00:52:37,140 --> 00:52:39,540
option opportunities there

1277
00:52:39,540 --> 00:52:42,000
great thank you now there's another

1278
00:52:42,000 --> 00:52:44,700
question by Mark on uh how can you

1279
00:52:44,700 --> 00:52:46,619
actually have a multi-step or multi-page

1280
00:52:46,619 --> 00:52:49,920
authentication as part of the automation

1281
00:52:49,920 --> 00:52:53,040
so uh scripting that is that'll be your

1282
00:52:53,040 --> 00:52:57,000
friend and you can either do it

1283
00:52:57,000 --> 00:52:59,160
um by just making those requests from

1284
00:52:59,160 --> 00:53:01,619
the script or this is where zest

1285
00:53:01,619 --> 00:53:03,599
probably does come into its own uh

1286
00:53:03,599 --> 00:53:05,099
because what you can do is you can

1287
00:53:05,099 --> 00:53:08,099
record uh requests

1288
00:53:08,099 --> 00:53:10,319
um the kind of the ones made to the

1289
00:53:10,319 --> 00:53:12,780
server you can record those uh using

1290
00:53:12,780 --> 00:53:15,240
zest and replay them and with zest you

1291
00:53:15,240 --> 00:53:17,940
can you can add Loops you can pull stuff

1292
00:53:17,940 --> 00:53:19,200
out of

1293
00:53:19,200 --> 00:53:21,300
um requests and responses you can reuse

1294
00:53:21,300 --> 00:53:23,280
them so zest is very much a macro

1295
00:53:23,280 --> 00:53:25,940
language designed for manipulating

1296
00:53:25,940 --> 00:53:29,040
requests and responses so

1297
00:53:29,040 --> 00:53:31,619
you can if you want to go down the

1298
00:53:31,619 --> 00:53:33,720
um kind of JavaScript

1299
00:53:33,720 --> 00:53:35,760
um jython script whatever and make all

1300
00:53:35,760 --> 00:53:37,680
those requests yourself or you can get

1301
00:53:37,680 --> 00:53:40,380
zest to do it um so that's one area

1302
00:53:40,380 --> 00:53:42,059
where zest is pretty good

1303
00:53:42,059 --> 00:53:44,280
okay awesome and there's actually a

1304
00:53:44,280 --> 00:53:45,599
question for myself

1305
00:53:45,599 --> 00:53:47,640
um which I find always like as a

1306
00:53:47,640 --> 00:53:50,460
comparison between OSAP and verb proxy

1307
00:53:50,460 --> 00:53:52,559
so some from your opinion what do you

1308
00:53:52,559 --> 00:53:54,300
think are the main advantages of using

1309
00:53:54,300 --> 00:53:56,640
Whatsapp over proxy especially

1310
00:53:56,640 --> 00:53:57,960
especially for automated security

1311
00:53:57,960 --> 00:53:59,180
testing

1312
00:53:59,180 --> 00:54:03,180
well first of all uh I have to say books

1313
00:54:03,180 --> 00:54:05,339
which is an amazing tool um you know

1314
00:54:05,339 --> 00:54:06,780
it's industry leader for very good

1315
00:54:06,780 --> 00:54:10,680
reason uh but I do think zap has a lot

1316
00:54:10,680 --> 00:54:11,880
of strengths and one of them is

1317
00:54:11,880 --> 00:54:14,400
automation so automation is something

1318
00:54:14,400 --> 00:54:17,700
we've really focused on the API is

1319
00:54:17,700 --> 00:54:20,280
incredibly powerful uh you can do pretty

1320
00:54:20,280 --> 00:54:23,579
much anything you want with the API and

1321
00:54:23,579 --> 00:54:26,760
I said the automation framework makes it

1322
00:54:26,760 --> 00:54:28,819
so much easier to go from the zap

1323
00:54:28,819 --> 00:54:31,140
desktop where you try things out get

1324
00:54:31,140 --> 00:54:33,119
things working then you can move that

1325
00:54:33,119 --> 00:54:34,800
into you can create an automation

1326
00:54:34,800 --> 00:54:36,960
framework plan within the desktop you

1327
00:54:36,960 --> 00:54:39,119
can test it there then you can export it

1328
00:54:39,119 --> 00:54:41,700
and run it from the command line and of

1329
00:54:41,700 --> 00:54:42,420
course

1330
00:54:42,420 --> 00:54:44,460
um the fact that zap is open source and

1331
00:54:44,460 --> 00:54:46,380
completely free means it's so much

1332
00:54:46,380 --> 00:54:50,119
easier and cheaper to run zap at scale

1333
00:54:50,119 --> 00:54:53,880
great thank you and that's just a time

1334
00:54:53,880 --> 00:54:55,559
for two more questions

1335
00:54:55,559 --> 00:54:57,900
um the first question is do you need a

1336
00:54:57,900 --> 00:55:00,900
larger number of application to test zap

1337
00:55:00,900 --> 00:55:03,180
against if so what application with what

1338
00:55:03,180 --> 00:55:05,220
technology do you want or need to do

1339
00:55:05,220 --> 00:55:06,359
this test

1340
00:55:06,359 --> 00:55:11,099
yeah uh I mean so one of the things we

1341
00:55:11,099 --> 00:55:13,920
find it difficult to get good feedback

1342
00:55:13,920 --> 00:55:16,319
from our customers because you know we

1343
00:55:16,319 --> 00:55:17,700
don't have

1344
00:55:17,700 --> 00:55:19,319
um any sort of agreement with them so

1345
00:55:19,319 --> 00:55:21,480
getting information about real

1346
00:55:21,480 --> 00:55:23,880
vulnerability is tricky because uh the

1347
00:55:23,880 --> 00:55:25,020
customers can't always share enough

1348
00:55:25,020 --> 00:55:28,380
details with us but it also takes a long

1349
00:55:28,380 --> 00:55:31,800
time so if we have a look at something

1350
00:55:31,800 --> 00:55:33,240
like

1351
00:55:33,240 --> 00:55:35,400
the scans we're doing is up against the

1352
00:55:35,400 --> 00:55:39,059
moment uh these uh it takes a while to

1353
00:55:39,059 --> 00:55:41,280
actually set up we're actually setting

1354
00:55:41,280 --> 00:55:42,780
that up to scan these things is pretty

1355
00:55:42,780 --> 00:55:45,540
straightforward uh points up at it tweak

1356
00:55:45,540 --> 00:55:46,920
the configurations and we can run that

1357
00:55:46,920 --> 00:55:50,040
up against it the fun part is the

1358
00:55:50,040 --> 00:55:52,680
scoring so it's these things here it's

1359
00:55:52,680 --> 00:55:55,859
the does SAP actually find something uh

1360
00:55:55,859 --> 00:55:57,720
either find something or you know find a

1361
00:55:57,720 --> 00:56:00,780
page or find a vulnerability and those

1362
00:56:00,780 --> 00:56:02,640
are the things that take time now

1363
00:56:02,640 --> 00:56:05,040
something like um crawl maze was very

1364
00:56:05,040 --> 00:56:06,480
easy because it has these kind of found

1365
00:56:06,480 --> 00:56:08,400
pages so scripting that was

1366
00:56:08,400 --> 00:56:09,839
straightforward

1367
00:56:09,839 --> 00:56:12,000
um websites vulnerable thrusters TI that

1368
00:56:12,000 --> 00:56:13,859
was another please do you want to see

1369
00:56:13,859 --> 00:56:14,760
where

1370
00:56:14,760 --> 00:56:16,440
showing all the different rules that

1371
00:56:16,440 --> 00:56:19,559
find these things and so that was an

1372
00:56:19,559 --> 00:56:21,119
easy one to score I mean all of these

1373
00:56:21,119 --> 00:56:23,240
were relatively straightforward to score

1374
00:56:23,240 --> 00:56:26,819
but a brand new application finding out

1375
00:56:26,819 --> 00:56:29,339
the running Gap against it is easy

1376
00:56:29,339 --> 00:56:31,619
knowing how well zap did against it and

1377
00:56:31,619 --> 00:56:33,599
be able to reproduce those

1378
00:56:33,599 --> 00:56:37,920
um that score is harder I've tried to

1379
00:56:37,920 --> 00:56:39,480
get contributors to help with that and

1380
00:56:39,480 --> 00:56:42,359
it's not been straightforward so it

1381
00:56:42,359 --> 00:56:44,040
typically ends up being me who does that

1382
00:56:44,040 --> 00:56:45,480
integration

1383
00:56:45,480 --> 00:56:47,160
um so and I'm kind of a bit time

1384
00:56:47,160 --> 00:56:48,420
constrained

1385
00:56:48,420 --> 00:56:51,119
so we definitely want more applications

1386
00:56:51,119 --> 00:56:53,280
to test up against

1387
00:56:53,280 --> 00:56:54,839
um if it comes if you're talking about

1388
00:56:54,839 --> 00:56:57,180
modern apps we'd love to have those

1389
00:56:57,180 --> 00:56:59,880
particularly for uh exploring and

1390
00:56:59,880 --> 00:57:01,260
finding problems where zap doesn't

1391
00:57:01,260 --> 00:57:03,240
explore them properly and I'm not so

1392
00:57:03,240 --> 00:57:04,559
worried about the scoring there because

1393
00:57:04,559 --> 00:57:06,240
we can always see how those things work

1394
00:57:06,240 --> 00:57:09,240
and then test um create test cases from

1395
00:57:09,240 --> 00:57:13,500
them or do the manual testing but yeah

1396
00:57:13,500 --> 00:57:15,480
if someone would like to get involved

1397
00:57:15,480 --> 00:57:17,640
help us scores up against other

1398
00:57:17,640 --> 00:57:19,920
vulnerable applications then please get

1399
00:57:19,920 --> 00:57:21,720
in touch there's loads of fun things you

1400
00:57:21,720 --> 00:57:24,180
can do and for those of you don't know

1401
00:57:24,180 --> 00:57:26,099
there's a an almost vulnerable web

1402
00:57:26,099 --> 00:57:28,319
applications directory project that uh

1403
00:57:28,319 --> 00:57:30,420
I'm one of the co-leads and so is uh

1404
00:57:30,420 --> 00:57:33,480
Rick one of the that project leads we

1405
00:57:33,480 --> 00:57:34,920
um co-lead that along with a couple

1406
00:57:34,920 --> 00:57:36,240
other guys

1407
00:57:36,240 --> 00:57:38,280
um and there's loads of vulnerable apps

1408
00:57:38,280 --> 00:57:40,020
on there so there's loads of vulnerable

1409
00:57:40,020 --> 00:57:41,520
apps I'd like to run zap against it's

1410
00:57:41,520 --> 00:57:44,400
just finding the time to get that set

1411
00:57:44,400 --> 00:57:46,380
that automation up and the the scoring

1412
00:57:46,380 --> 00:57:47,940
to work out how well zap does and make

1413
00:57:47,940 --> 00:57:50,819
sure we're always improving great thank

1414
00:57:50,819 --> 00:57:53,760
you so if you have any more questions to

1415
00:57:53,760 --> 00:57:55,619
to Simon just feel free to reach out to

1416
00:57:55,619 --> 00:57:56,339
him

1417
00:57:56,339 --> 00:57:58,099
um either through

1418
00:57:58,099 --> 00:58:00,780
or just reach out to him in slack I mean

1419
00:58:00,780 --> 00:58:02,640
it's just more questions but I think

1420
00:58:02,640 --> 00:58:04,920
with uh probably more that you'd be able

1421
00:58:04,920 --> 00:58:07,260
to cover afterwards

1422
00:58:07,260 --> 00:58:09,000
um I'd like to thank Simon very much for

1423
00:58:09,000 --> 00:58:10,800
your presentation so we've seen a really

1424
00:58:10,800 --> 00:58:13,380
great overview of Oasis app how to set

1425
00:58:13,380 --> 00:58:15,599
up automated testing

1426
00:58:15,599 --> 00:58:17,940
um things like improve passive scan so

1427
00:58:17,940 --> 00:58:20,760
all the cutting-edge features as well as

1428
00:58:20,760 --> 00:58:22,500
statistics one thing I'd like to point

1429
00:58:22,500 --> 00:58:25,380
out is the huge Community Access app has

1430
00:58:25,380 --> 00:58:27,059
so I just checked on slack and has over

1431
00:58:27,059 --> 00:58:29,819
1 000 active users just on the zap

1432
00:58:29,819 --> 00:58:32,099
Channel and as Simon mentioned if you

1433
00:58:32,099 --> 00:58:33,780
want to get involved just feel free to

1434
00:58:33,780 --> 00:58:35,760
to join slack just look at the issues

1435
00:58:35,760 --> 00:58:39,059
and GitHub and uh yeah just just reach

1436
00:58:39,059 --> 00:58:40,799
out and also there's a really good

1437
00:58:40,799 --> 00:58:43,380
conference every year the zapcon that

1438
00:58:43,380 --> 00:58:45,359
probably also myself highly recommend

1439
00:58:45,359 --> 00:58:46,920
attending

1440
00:58:46,920 --> 00:58:48,599
so again it's time very much thank you

1441
00:58:48,599 --> 00:58:50,099
very much for attending

1442
00:58:50,099 --> 00:58:54,020
um next thank you

