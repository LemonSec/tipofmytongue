1
00:00:04,080 --> 00:00:07,200
hi everyone and welcome to this morning

2
00:00:07,200 --> 00:00:10,019
session my name is JP and I will be your

3
00:00:10,019 --> 00:00:13,080
moderator and I'd love to introduce Anna

4
00:00:13,080 --> 00:00:14,700
East to you who's going to be talking to

5
00:00:14,700 --> 00:00:17,279
you about container Security today and

6
00:00:17,279 --> 00:00:18,539
she's going to be talking about how

7
00:00:18,539 --> 00:00:19,920
containers and orchestration are

8
00:00:19,920 --> 00:00:21,840
implemented and some awesome security

9
00:00:21,840 --> 00:00:23,460
edge cases

10
00:00:23,460 --> 00:00:26,279
so the format of the session is um

11
00:00:26,279 --> 00:00:28,560
roughly 50 minutes of talk and 10

12
00:00:28,560 --> 00:00:31,080
minutes of q a if you would like to

13
00:00:31,080 --> 00:00:33,180
submit your questions in the Q a and

14
00:00:33,180 --> 00:00:34,920
Hoover that would be awesome and feel

15
00:00:34,920 --> 00:00:37,680
free to utilize the chat to interact

16
00:00:37,680 --> 00:00:38,820
with the community

17
00:00:38,820 --> 00:00:40,860
so take it away and I eat we're looking

18
00:00:40,860 --> 00:00:43,079
forward to this awesome thank you so

19
00:00:43,079 --> 00:00:45,239
much so yeah I'm going to give this

20
00:00:45,239 --> 00:00:47,100
presentation avonda through the Vault of

21
00:00:47,100 --> 00:00:49,200
container security now I have to mention

22
00:00:49,200 --> 00:00:51,420
that I jumped in for my colleague Rory

23
00:00:51,420 --> 00:00:54,120
McCune who could sadly not give the

24
00:00:54,120 --> 00:00:55,860
presentation himself so the entire

25
00:00:55,860 --> 00:00:58,379
content is by him I'm just the one who's

26
00:00:58,379 --> 00:00:59,820
presenting it

27
00:00:59,820 --> 00:01:02,699
um I also have his demo recordings so

28
00:01:02,699 --> 00:01:04,739
I'm going to show him between uh his

29
00:01:04,739 --> 00:01:06,540
theme or so it's kind of it's a joint

30
00:01:06,540 --> 00:01:09,479
co-speaking presentation in a way but uh

31
00:01:09,479 --> 00:01:11,939
he's just not gonna be here live uh

32
00:01:11,939 --> 00:01:13,979
amazing so let's get started well

33
00:01:13,979 --> 00:01:16,439
something a bit about Rory who whom

34
00:01:16,439 --> 00:01:18,479
created this content he's an

35
00:01:18,479 --> 00:01:21,780
ex-pentester and a t Security person uh

36
00:01:21,780 --> 00:01:23,939
he worked in the security space for a

37
00:01:23,939 --> 00:01:25,560
very long time he's very experienced in

38
00:01:25,560 --> 00:01:26,580
that field

39
00:01:26,580 --> 00:01:28,860
um different areas now he's a cloud

40
00:01:28,860 --> 00:01:31,439
native security advocate for Akram and

41
00:01:31,439 --> 00:01:33,600
he's also one of the authors for the cas

42
00:01:33,600 --> 00:01:36,479
benchmarks for dark and kubernetes and a

43
00:01:36,479 --> 00:01:38,520
member of six Security in sick honk so

44
00:01:38,520 --> 00:01:40,079
he's very very active in the cloud

45
00:01:40,079 --> 00:01:42,420
native security space and this is kind

46
00:01:42,420 --> 00:01:44,159
of his mascot his logo over there which

47
00:01:44,159 --> 00:01:45,780
I think is really cute so we kept it

48
00:01:45,780 --> 00:01:46,740
there

49
00:01:46,740 --> 00:01:48,540
um no a bit more about myself who am I

50
00:01:48,540 --> 00:01:50,579
why am I giving this presentation

51
00:01:50,579 --> 00:01:54,720
uh so my journey is not as ex detailed

52
00:01:54,720 --> 00:01:56,939
in the security space let's say

53
00:01:56,939 --> 00:01:59,520
um which can have benefits so I was

54
00:01:59,520 --> 00:02:01,079
working in the blockchain and he opened

55
00:02:01,079 --> 00:02:03,299
this blockchain space uh for some time

56
00:02:03,299 --> 00:02:06,180
ended up there in developer advocacy and

57
00:02:06,180 --> 00:02:09,840
then at the end of 2020 I decided that I

58
00:02:09,840 --> 00:02:11,099
actually want to change Industries I

59
00:02:11,099 --> 00:02:13,020
want to explore something new

60
00:02:13,020 --> 00:02:15,420
um something more infrastructure focused

61
00:02:15,420 --> 00:02:19,140
as well so I got in a cognitive space as

62
00:02:19,140 --> 00:02:21,420
developer Advocate and around the same

63
00:02:21,420 --> 00:02:23,040
time I started my YouTube channel where

64
00:02:23,040 --> 00:02:25,140
I basically share tutorials

65
00:02:25,140 --> 00:02:26,760
um on using kubernetes on using

66
00:02:26,760 --> 00:02:28,980
containers and different tools across

67
00:02:28,980 --> 00:02:31,080
the cognitive ecosystem you know last

68
00:02:31,080 --> 00:02:32,940
year I tried myself a side reliability

69
00:02:32,940 --> 00:02:35,040
engineer that didn't last too long

70
00:02:35,040 --> 00:02:37,800
because I got uh pulled back into the

71
00:02:37,800 --> 00:02:39,660
open source full-time open source world

72
00:02:39,660 --> 00:02:42,060
and now I'm an open source developer

73
00:02:42,060 --> 00:02:44,640
Advocate at Aqua security I also just

74
00:02:44,640 --> 00:02:46,560
want to share that I reached 10 000

75
00:02:46,560 --> 00:02:48,180
subscribers on YouTube which I'm very

76
00:02:48,180 --> 00:02:50,400
excited about so if you're one of them

77
00:02:50,400 --> 00:02:52,560
big shout out to you

78
00:02:52,560 --> 00:02:54,120
um yeah just one of those achievements

79
00:02:54,120 --> 00:02:56,099
that I'm yeah really happy about

80
00:02:56,099 --> 00:03:00,180
um no before we get started uh with the

81
00:03:00,180 --> 00:03:02,459
the content itself on like container

82
00:03:02,459 --> 00:03:04,739
security what is container security

83
00:03:04,739 --> 00:03:07,200
um I just want to kind of

84
00:03:07,200 --> 00:03:09,000
um share with you why we're talking

85
00:03:09,000 --> 00:03:11,519
about in the first place so uh what we

86
00:03:11,519 --> 00:03:12,959
included this pretty picture in the

87
00:03:12,959 --> 00:03:15,000
original presentation I was like oh this

88
00:03:15,000 --> 00:03:16,140
is a nice picture I don't want to delete

89
00:03:16,140 --> 00:03:16,980
it

90
00:03:16,980 --> 00:03:18,180
um

91
00:03:18,180 --> 00:03:19,860
um the way to think about container

92
00:03:19,860 --> 00:03:22,440
security and the cognitive landscape is

93
00:03:22,440 --> 00:03:23,940
really just like an ever-changing

94
00:03:23,940 --> 00:03:25,140
landscape

95
00:03:25,140 --> 00:03:26,819
um so since I got started in the cloud

96
00:03:26,819 --> 00:03:29,700
native space I've learned so many new

97
00:03:29,700 --> 00:03:31,140
technologies

98
00:03:31,140 --> 00:03:33,120
um well when I got started my first role

99
00:03:33,120 --> 00:03:35,220
in the end of 2020 was actually the

100
00:03:35,220 --> 00:03:36,780
first time that I Googled what is a

101
00:03:36,780 --> 00:03:39,540
container and since then I've uh went

102
00:03:39,540 --> 00:03:40,739
over

103
00:03:40,739 --> 00:03:43,739
um using containers supplying containers

104
00:03:43,739 --> 00:03:45,959
um using kubernetes clusters using

105
00:03:45,959 --> 00:03:47,519
different cognitive applications to

106
00:03:47,519 --> 00:03:49,319
manage my workloads on those clusters

107
00:03:49,319 --> 00:03:51,299
and so on and there was always something

108
00:03:51,299 --> 00:03:53,400
new popping up and also

109
00:03:53,400 --> 00:03:55,140
um just over time there's so much new

110
00:03:55,140 --> 00:03:57,599
that you just come across if you're in

111
00:03:57,599 --> 00:03:59,879
this in this environment and some things

112
00:03:59,879 --> 00:04:01,500
will stay the same over longer terms of

113
00:04:01,500 --> 00:04:03,200
a change which is other things that just

114
00:04:03,200 --> 00:04:05,340
consistently changing

115
00:04:05,340 --> 00:04:06,540
um and I think this is a really nice

116
00:04:06,540 --> 00:04:08,819
metaphor just to highlight that

117
00:04:08,819 --> 00:04:09,659
um no

118
00:04:09,659 --> 00:04:11,819
more specific to container security why

119
00:04:11,819 --> 00:04:13,019
are we talking about this in the first

120
00:04:13,019 --> 00:04:14,099
place

121
00:04:14,099 --> 00:04:16,260
um a lot of people when I talk to them

122
00:04:16,260 --> 00:04:17,760
they might not be using doc or

123
00:04:17,760 --> 00:04:20,160
kubernetes or containerization yeah and

124
00:04:20,160 --> 00:04:23,280
that's that's cool uh but why do we want

125
00:04:23,280 --> 00:04:25,139
to start talking about why do I like

126
00:04:25,139 --> 00:04:27,120
talking about it well first of all I

127
00:04:27,120 --> 00:04:29,639
really got into the space only knowing

128
00:04:29,639 --> 00:04:32,040
uh containerization and kubernetes so

129
00:04:32,040 --> 00:04:33,360
this is what I know this is my

130
00:04:33,360 --> 00:04:35,580
perspective I don't have experience

131
00:04:35,580 --> 00:04:38,460
um for infrastructure management uh

132
00:04:38,460 --> 00:04:40,860
before that but here is the stack

133
00:04:40,860 --> 00:04:44,639
Overflow 2021 survey and kubernetes and

134
00:04:44,639 --> 00:04:47,520
Docker are in the top five technologies

135
00:04:47,520 --> 00:04:50,520
that developers are adopting uh it's

136
00:04:50,520 --> 00:04:51,960
really something that more and more

137
00:04:51,960 --> 00:04:53,759
people get involved with we could also

138
00:04:53,759 --> 00:04:55,680
just see it at the recent kubecon in

139
00:04:55,680 --> 00:04:58,320
Valencia there were 7 000 people who

140
00:04:58,320 --> 00:05:00,960
attended in person and I think over 11

141
00:05:00,960 --> 00:05:04,139
000 people attended virtually

142
00:05:04,139 --> 00:05:07,680
um online so there are lots and lots of

143
00:05:07,680 --> 00:05:09,419
people entering the space with different

144
00:05:09,419 --> 00:05:11,280
perspectives with different experiences

145
00:05:11,280 --> 00:05:13,500
people like me who are completely they

146
00:05:13,500 --> 00:05:16,020
who don't have existing experience until

147
00:05:16,020 --> 00:05:18,479
they get started in this space

148
00:05:18,479 --> 00:05:20,940
um so and so we have to keep all those

149
00:05:20,940 --> 00:05:23,220
different user groups in mind now also

150
00:05:23,220 --> 00:05:24,300
here at this point I want to mention

151
00:05:24,300 --> 00:05:27,120
when they talk about Docker I'm most of

152
00:05:27,120 --> 00:05:29,100
the time talking about darker containers

153
00:05:29,100 --> 00:05:31,080
now if you already experienced in

154
00:05:31,080 --> 00:05:33,000
containerization you might know that

155
00:05:33,000 --> 00:05:34,919
there are different ways uh to create

156
00:05:34,919 --> 00:05:37,500
containers not just Docker but in this

157
00:05:37,500 --> 00:05:39,479
case when I'm talking about Docker I'm

158
00:05:39,479 --> 00:05:42,120
mainly talking about uh containers or a

159
00:05:42,120 --> 00:05:44,520
company I don't want to to disregard any

160
00:05:44,520 --> 00:05:45,539
of the other containerization

161
00:05:45,539 --> 00:05:47,280
Technologies out there however so that's

162
00:05:47,280 --> 00:05:50,280
just why I'm mentioning now I never

163
00:05:50,280 --> 00:05:51,840
think that we need to highlight that we

164
00:05:51,840 --> 00:05:54,780
need to focus on is that across the

165
00:05:54,780 --> 00:05:56,820
cloud ecosystem across the cloud space

166
00:05:56,820 --> 00:05:59,100
related to kubernetes there are lots and

167
00:05:59,100 --> 00:06:00,360
lots of different vendors lots of

168
00:06:00,360 --> 00:06:02,340
different distributions and all of those

169
00:06:02,340 --> 00:06:04,020
different distributions they do some

170
00:06:04,020 --> 00:06:06,600
things kind of differently so when we're

171
00:06:06,600 --> 00:06:08,160
talking for example about container

172
00:06:08,160 --> 00:06:09,900
security we have to keep in mind that

173
00:06:09,900 --> 00:06:12,419
it's also it will vary slightly between

174
00:06:12,419 --> 00:06:13,860
different

175
00:06:13,860 --> 00:06:15,600
um installations different distributions

176
00:06:15,600 --> 00:06:17,880
such as kubernetes has different

177
00:06:17,880 --> 00:06:19,560
distributions across different Cloud

178
00:06:19,560 --> 00:06:21,780
vendors and they will all be slightly

179
00:06:21,780 --> 00:06:23,160
different

180
00:06:23,160 --> 00:06:25,080
um in how they especially get the lower

181
00:06:25,080 --> 00:06:27,479
levels on how they handle things

182
00:06:27,479 --> 00:06:29,039
um but this image is just again to

183
00:06:29,039 --> 00:06:31,680
illustrate like this is a really complex

184
00:06:31,680 --> 00:06:33,900
ecosystem with lots of different moving

185
00:06:33,900 --> 00:06:36,780
parts and um we just have to keep that

186
00:06:36,780 --> 00:06:38,100
in mind that

187
00:06:38,100 --> 00:06:39,600
um it's very complex so when we talk

188
00:06:39,600 --> 00:06:42,240
about one thing it really it always will

189
00:06:42,240 --> 00:06:43,979
depend on how it applies to something

190
00:06:43,979 --> 00:06:45,660
else

191
00:06:45,660 --> 00:06:47,280
um no something else we want to

192
00:06:47,280 --> 00:06:50,280
highlight is that they're um actually

193
00:06:50,280 --> 00:06:53,400
um around like 1.2 million

194
00:06:53,400 --> 00:06:56,100
um public hosts that use

195
00:06:56,100 --> 00:06:58,440
um kubernetes under the hood

196
00:06:58,440 --> 00:07:01,199
um that you can find on the internet uh

197
00:07:01,199 --> 00:07:03,600
now these include

198
00:07:03,600 --> 00:07:05,940
um all kinds of clusters also clusters

199
00:07:05,940 --> 00:07:08,039
that somebody might have spun up by

200
00:07:08,039 --> 00:07:10,319
themselves to play around with and then

201
00:07:10,319 --> 00:07:12,600
expose it to the outside world which is

202
00:07:12,600 --> 00:07:14,340
not something you should be doing and

203
00:07:14,340 --> 00:07:16,199
it's definitely something that I did the

204
00:07:16,199 --> 00:07:18,419
first time I was using my own kubernetes

205
00:07:18,419 --> 00:07:20,400
classes and playing around with it and

206
00:07:20,400 --> 00:07:22,080
it's something that you want to avoid so

207
00:07:22,080 --> 00:07:25,020
out of those hosts all of those also we

208
00:07:25,020 --> 00:07:26,160
can find it

209
00:07:26,160 --> 00:07:28,620
um using kubernetes under the hood

210
00:07:28,620 --> 00:07:30,660
um those really like Encompass everybody

211
00:07:30,660 --> 00:07:33,060
like all kinds of users

212
00:07:33,060 --> 00:07:35,039
um and obviously given that there's so

213
00:07:35,039 --> 00:07:38,340
many there's a lot of attack surface and

214
00:07:38,340 --> 00:07:39,900
um different vulnerabilities that are

215
00:07:39,900 --> 00:07:41,880
found in each of those different uh

216
00:07:41,880 --> 00:07:44,520
environments we have a research group at

217
00:07:44,520 --> 00:07:47,220
Aqua security routine which is there

218
00:07:47,220 --> 00:07:49,380
basically to put out honey pots and just

219
00:07:49,380 --> 00:07:51,060
see how our attackers are explaining

220
00:07:51,060 --> 00:07:52,919
them how tickles are like what kind of

221
00:07:52,919 --> 00:07:55,139
strategies are they using right

222
00:07:55,139 --> 00:07:57,599
um and well a lot of these clusters are

223
00:07:57,599 --> 00:07:58,860
like some of these classes I don't know

224
00:07:58,860 --> 00:08:00,419
actually represent it but

225
00:08:00,419 --> 00:08:01,800
um some of these classes are really just

226
00:08:01,800 --> 00:08:03,780
users who want to get started right who

227
00:08:03,780 --> 00:08:05,340
don't want to be

228
00:08:05,340 --> 00:08:06,660
um in a

229
00:08:06,660 --> 00:08:09,120
um like in a situation where they expose

230
00:08:09,120 --> 00:08:11,400
themselves to other security risks uh so

231
00:08:11,400 --> 00:08:12,780
whether you're just getting started or

232
00:08:12,780 --> 00:08:14,280
you experience of kubernetes uh

233
00:08:14,280 --> 00:08:15,840
container security and Community

234
00:08:15,840 --> 00:08:17,340
security is something really something

235
00:08:17,340 --> 00:08:18,840
you should think about from from the

236
00:08:18,840 --> 00:08:20,639
start now I see that there are two

237
00:08:20,639 --> 00:08:22,259
messages in the chat but I only have one

238
00:08:22,259 --> 00:08:24,060
screen so please if there's something I

239
00:08:24,060 --> 00:08:26,639
should pay attention to uh just jump in

240
00:08:26,639 --> 00:08:28,020
that would be highly appreciated

241
00:08:28,020 --> 00:08:29,759
obviously I'm going to continue the

242
00:08:29,759 --> 00:08:31,680
presentation

243
00:08:31,680 --> 00:08:33,779
um so let's talk more about container

244
00:08:33,779 --> 00:08:35,399
security and then how it relates to

245
00:08:35,399 --> 00:08:37,979
Cloud native security and kubernetes

246
00:08:37,979 --> 00:08:40,140
um when you're thinking about containers

247
00:08:40,140 --> 00:08:42,299
processes so our container

248
00:08:42,299 --> 00:08:44,399
um it's ultimately just a Linux process

249
00:08:44,399 --> 00:08:47,220
that's isolated two different layers

250
00:08:47,220 --> 00:08:49,019
from the underlying host

251
00:08:49,019 --> 00:08:51,180
um it's not a virtual machine in in that

252
00:08:51,180 --> 00:08:52,740
way it operates differently to a virtual

253
00:08:52,740 --> 00:08:54,839
machine and I could go into more detail

254
00:08:54,839 --> 00:08:57,000
and I could show you like those

255
00:08:57,000 --> 00:08:58,680
um standard diagrams where you basically

256
00:08:58,680 --> 00:09:00,180
see a virtual machine and the different

257
00:09:00,180 --> 00:09:02,100
layers of a virtual machine

258
00:09:02,100 --> 00:09:04,620
um and then you see

259
00:09:04,620 --> 00:09:07,440
um the in comparison of container and

260
00:09:07,440 --> 00:09:09,120
how the container kind of the different

261
00:09:09,120 --> 00:09:11,640
the stack that it utilizes but

262
00:09:11,640 --> 00:09:13,500
ultimately think about

263
00:09:13,500 --> 00:09:16,500
um a container not as something like

264
00:09:16,500 --> 00:09:17,820
um

265
00:09:17,820 --> 00:09:19,500
how should I compare this

266
00:09:19,500 --> 00:09:20,640
um not I wouldn't say like

267
00:09:20,640 --> 00:09:22,260
infrastructure so when I think of

268
00:09:22,260 --> 00:09:24,360
infrastructure it's like something

269
00:09:24,360 --> 00:09:26,820
um usually something

270
00:09:26,820 --> 00:09:28,560
um I don't know more tangible I would

271
00:09:28,560 --> 00:09:30,839
say versus a container more like a

272
00:09:30,839 --> 00:09:32,760
process like an evolving process that

273
00:09:32,760 --> 00:09:34,560
changes its state and then you have

274
00:09:34,560 --> 00:09:36,600
different layers like the further down

275
00:09:36,600 --> 00:09:38,760
you go into the stack that help you to

276
00:09:38,760 --> 00:09:42,060
isolate it from the underlying host now

277
00:09:42,060 --> 00:09:43,380
um when I got started with

278
00:09:43,380 --> 00:09:45,120
containerization and you might be

279
00:09:45,120 --> 00:09:46,080
somebody who's getting cyber

280
00:09:46,080 --> 00:09:48,000
containerization you might not think

281
00:09:48,000 --> 00:09:50,339
about all those different layers

282
00:09:50,339 --> 00:09:52,620
um and to be honest the further down the

283
00:09:52,620 --> 00:09:55,740
stack I go the more I lack knowledge on

284
00:09:55,740 --> 00:09:57,959
actually how to make the best out of

285
00:09:57,959 --> 00:09:59,399
those different components or different

286
00:09:59,399 --> 00:10:00,600
layers

287
00:10:00,600 --> 00:10:02,580
um now here's the first thing mom let me

288
00:10:02,580 --> 00:10:05,700
just charge you I hope you can hear it

289
00:10:05,700 --> 00:10:07,140
um so what we're going to do here is

290
00:10:07,140 --> 00:10:08,459
we're going to demonstrate

291
00:10:08,459 --> 00:10:10,620
um how containers are actually Linux

292
00:10:10,620 --> 00:10:12,899
processes first of all we'll do is we'll

293
00:10:12,899 --> 00:10:14,580
do a psef and we're going to grab for

294
00:10:14,580 --> 00:10:16,620
nginx just to see at the moment

295
00:10:16,620 --> 00:10:18,360
sure we don't have any nginx processors

296
00:10:18,360 --> 00:10:20,100
currently running so when we run that

297
00:10:20,100 --> 00:10:21,959
command what we get back is just our

298
00:10:21,959 --> 00:10:23,339
grab commands there's nothing currently

299
00:10:23,339 --> 00:10:25,680
running in the way of nginx what we're

300
00:10:25,680 --> 00:10:27,420
going to do now is we're then going to

301
00:10:27,420 --> 00:10:30,480
run a new dock container using the nginx

302
00:10:30,480 --> 00:10:32,700
image so we Docker run

303
00:10:32,700 --> 00:10:35,339
as well as name web so we'll call it web

304
00:10:35,339 --> 00:10:37,560
server run in the background and we're

305
00:10:37,560 --> 00:10:39,899
going to use the nginx image

306
00:10:39,899 --> 00:10:42,000
so that's going to go away and find and

307
00:10:42,000 --> 00:10:44,100
pull that down onto our local Docker

308
00:10:44,100 --> 00:10:46,140
install and as you can see that's done

309
00:10:46,140 --> 00:10:49,440
that now and if we do Docker PS we can

310
00:10:49,440 --> 00:10:51,899
see that Docker has this new web server

311
00:10:51,899 --> 00:10:53,640
container running but from a host

312
00:10:53,640 --> 00:10:55,260
perspective what does I actually think

313
00:10:55,260 --> 00:10:57,120
because like the Linux host doesn't

314
00:10:57,120 --> 00:10:58,260
actually know anything about containers

315
00:10:58,260 --> 00:11:00,240
it just knows about processes so if I

316
00:11:00,240 --> 00:11:03,360
run our PS command from before

317
00:11:03,360 --> 00:11:05,700
um what we can see is actually as far as

318
00:11:05,700 --> 00:11:07,620
the host is concerned this is literally

319
00:11:07,620 --> 00:11:10,560
just nginx running on the machine uh and

320
00:11:10,560 --> 00:11:12,360
that's essentially how a Linux host sees

321
00:11:12,360 --> 00:11:14,220
Docker containers and we can actually

322
00:11:14,220 --> 00:11:16,380
kind of demonstrate that as well uh um

323
00:11:16,380 --> 00:11:17,760
through another kind of mechanism if I

324
00:11:17,760 --> 00:11:20,040
do a Docker exec just executes the

325
00:11:20,040 --> 00:11:22,500
command inside of a Docker container and

326
00:11:22,500 --> 00:11:23,399
we're going to execute something inside

327
00:11:23,399 --> 00:11:25,079
the web server container and we're going

328
00:11:25,079 --> 00:11:27,920
to create a new file

329
00:11:29,339 --> 00:11:31,380
so that's created a file inside the

330
00:11:31,380 --> 00:11:33,480
container I can actually get to that

331
00:11:33,480 --> 00:11:35,940
file without actually

332
00:11:35,940 --> 00:11:37,560
um using Docker at all just by using

333
00:11:37,560 --> 00:11:39,720
Linux commands because this is literally

334
00:11:39,720 --> 00:11:41,880
just a Linux process we can get

335
00:11:41,880 --> 00:11:43,920
essentially this here which is the

336
00:11:43,920 --> 00:11:45,000
process ID

337
00:11:45,000 --> 00:11:47,100
and what we can do is we can say uh I'll

338
00:11:47,100 --> 00:11:49,260
be sudo class

339
00:11:49,260 --> 00:11:51,720
slash proc so proc is a special Linux

340
00:11:51,720 --> 00:11:53,040
file system that holds all the

341
00:11:53,040 --> 00:11:55,079
information about running processes I

342
00:11:55,079 --> 00:11:56,399
want to find information about that

343
00:11:56,399 --> 00:11:58,740
process ID and we're going to say show

344
00:11:58,740 --> 00:12:03,420
me the root file system of that process

345
00:12:03,420 --> 00:12:04,620
and usually when you're doing the

346
00:12:04,620 --> 00:12:06,000
ordering process you'll see the ordinary

347
00:12:06,000 --> 00:12:07,620
root file system but because we're using

348
00:12:07,620 --> 00:12:09,480
namespaces which is how Docker isolates

349
00:12:09,480 --> 00:12:10,920
resources we should see something

350
00:12:10,920 --> 00:12:12,360
different

351
00:12:12,360 --> 00:12:14,399
and what you'll see is this is the root

352
00:12:14,399 --> 00:12:17,459
of the nginx image apart from this here

353
00:12:17,459 --> 00:12:19,620
which is the my new file that we just

354
00:12:19,620 --> 00:12:22,560
created so as you can see from our hosts

355
00:12:22,560 --> 00:12:24,420
perspective Docker containers are

356
00:12:24,420 --> 00:12:28,079
literally just processes

357
00:12:28,079 --> 00:12:30,779
amazing so this is the first day Mom we

358
00:12:30,779 --> 00:12:32,160
have multiple demos throughout the

359
00:12:32,160 --> 00:12:34,079
presentation I'm sure I can share

360
00:12:34,079 --> 00:12:36,000
everything afterwards as well so you can

361
00:12:36,000 --> 00:12:37,740
revisit that maybe play around with the

362
00:12:37,740 --> 00:12:39,660
different demons yourself

363
00:12:39,660 --> 00:12:42,300
um so ultimately to summarize

364
00:12:42,300 --> 00:12:44,459
um darker is really command execution as

365
00:12:44,459 --> 00:12:47,040
a service now something to know about

366
00:12:47,040 --> 00:12:48,720
DACA if there's something you're taking

367
00:12:48,720 --> 00:12:50,940
away from this presentation it has a

368
00:12:50,940 --> 00:12:53,459
very flexible security model and

369
00:12:53,459 --> 00:12:56,339
flexibility is is great if you know if

370
00:12:56,339 --> 00:12:58,019
you know what you're doing

371
00:12:58,019 --> 00:13:00,060
um no but it's it that's obviously

372
00:13:00,060 --> 00:13:02,579
flexibility also adds more complexity to

373
00:13:02,579 --> 00:13:04,620
the mix meaning there are more options

374
00:13:04,620 --> 00:13:08,399
for us to to make errors right

375
00:13:08,399 --> 00:13:11,100
um the more options we have the more

376
00:13:11,100 --> 00:13:13,800
who wrongly configured installations we

377
00:13:13,800 --> 00:13:15,420
can we can have

378
00:13:15,420 --> 00:13:17,880
um and ultimately

379
00:13:17,880 --> 00:13:21,540
um every user with access to Docker on

380
00:13:21,540 --> 00:13:24,120
the host should be considered a like

381
00:13:24,120 --> 00:13:25,980
root on that host

382
00:13:25,980 --> 00:13:27,899
um that's that's really important and we

383
00:13:27,899 --> 00:13:29,459
will demonstrate it in the next demo

384
00:13:29,459 --> 00:13:31,079
because this is ultimately the most kind

385
00:13:31,079 --> 00:13:32,880
of stuff come out ever that you see here

386
00:13:32,880 --> 00:13:34,800
and we will share that now in the next

387
00:13:34,800 --> 00:13:36,480
day month of why it's the most useless

388
00:13:36,480 --> 00:13:39,380
Taco command ever

389
00:13:41,880 --> 00:13:43,860
so as we said one of the main things

390
00:13:43,860 --> 00:13:46,200
about Docker security is that any user

391
00:13:46,200 --> 00:13:48,899
with rights to Run Dock containers can

392
00:13:48,899 --> 00:13:51,360
easily become root on the host and we

393
00:13:51,360 --> 00:13:53,040
can see that as I demonstrated here at

394
00:13:53,040 --> 00:13:54,360
the moment we have a user who's an

395
00:13:54,360 --> 00:13:56,279
ordinary user of the system because at

396
00:13:56,279 --> 00:13:58,500
rights to run Docker commands and what

397
00:13:58,500 --> 00:14:00,300
we can do is we can pick up the document

398
00:14:00,300 --> 00:14:02,399
from the previous slide and we can

399
00:14:02,399 --> 00:14:04,440
actually run that on this machine

400
00:14:04,440 --> 00:14:06,180
so what we'll do here is let's walk

401
00:14:06,180 --> 00:14:07,680
through it before we hit enter we're

402
00:14:07,680 --> 00:14:09,360
going to Docker run and we're going to

403
00:14:09,360 --> 00:14:11,639
get a shell inside the container that

404
00:14:11,639 --> 00:14:13,019
we're going to run we're going to add

405
00:14:13,019 --> 00:14:14,519
the minus minus the privileged flag

406
00:14:14,519 --> 00:14:16,139
which says basically make this privilege

407
00:14:16,139 --> 00:14:18,120
turn off all the security and then we're

408
00:14:18,120 --> 00:14:19,500
going to add these three flags here

409
00:14:19,500 --> 00:14:21,839
which basically say give us access to

410
00:14:21,839 --> 00:14:24,779
the host resources the host PID hostnet

411
00:14:24,779 --> 00:14:28,019
and host IPC we're then going to mount a

412
00:14:28,019 --> 00:14:30,240
volume from the root of the underlying

413
00:14:30,240 --> 00:14:32,519
host into slash host inside the

414
00:14:32,519 --> 00:14:35,399
container run the BusyBox image and then

415
00:14:35,399 --> 00:14:37,740
use the command true root host

416
00:14:37,740 --> 00:14:39,120
and you can see before we run this

417
00:14:39,120 --> 00:14:41,100
command we are the Rory amp user on this

418
00:14:41,100 --> 00:14:43,560
machine and then when we hit enter it'll

419
00:14:43,560 --> 00:14:45,360
say I can't find this image I'll go and

420
00:14:45,360 --> 00:14:47,339
get it once it's downloaded it we can

421
00:14:47,339 --> 00:14:49,260
then see we've changed user and we are

422
00:14:49,260 --> 00:14:51,600
now the root user so it's just showing

423
00:14:51,600 --> 00:14:54,000
that any user with Docker Run Access can

424
00:14:54,000 --> 00:14:56,220
get to be root on a machine very easily

425
00:14:56,220 --> 00:14:59,540
and this is essentially by Design

426
00:15:00,480 --> 00:15:05,040
awesome well not awesome but I hope that

427
00:15:05,040 --> 00:15:07,560
um kind of illustrates it

428
00:15:07,560 --> 00:15:10,139
um now so how does it relate to Cuban

429
00:15:10,139 --> 00:15:12,120
meters how does how do containers relate

430
00:15:12,120 --> 00:15:13,260
to kubernetes what actually is

431
00:15:13,260 --> 00:15:15,000
kubernetes those are people who are

432
00:15:15,000 --> 00:15:16,019
using

433
00:15:16,019 --> 00:15:18,060
um containers who are using maybe Docker

434
00:15:18,060 --> 00:15:20,519
might not be using kubernetes Germany

435
00:15:20,519 --> 00:15:22,260
this might also not the best option for

436
00:15:22,260 --> 00:15:24,600
you if you're using containers to manage

437
00:15:24,600 --> 00:15:27,000
and run those containers but here's

438
00:15:27,000 --> 00:15:28,620
basically a brief introduction of what

439
00:15:28,620 --> 00:15:30,060
kubernetes actually is under the hood

440
00:15:30,060 --> 00:15:32,519
how does it work and what does it do so

441
00:15:32,519 --> 00:15:34,680
this is a high level very high level

442
00:15:34,680 --> 00:15:36,779
overview of what's inside of our

443
00:15:36,779 --> 00:15:38,820
kubernetes customer so usually you have

444
00:15:38,820 --> 00:15:41,100
a main note also called the masternode

445
00:15:41,100 --> 00:15:42,779
where with the control plane and then

446
00:15:42,779 --> 00:15:44,940
you have different worker nodes

447
00:15:44,940 --> 00:15:46,980
um and now in the control plane we have

448
00:15:46,980 --> 00:15:49,980
our API server and the API server is

449
00:15:49,980 --> 00:15:52,260
really like the heart of our kubernetes

450
00:15:52,260 --> 00:15:54,779
cluster so whenever you send any

451
00:15:54,779 --> 00:15:56,459
requests to your business cluster

452
00:15:56,459 --> 00:15:58,560
through for example a tool called Cube

453
00:15:58,560 --> 00:15:59,880
CTL

454
00:15:59,880 --> 00:16:02,579
um Cube cuddle then at the API server

455
00:16:02,579 --> 00:16:04,199
it's responsible to fulfilling that

456
00:16:04,199 --> 00:16:05,699
request to taking care of that request

457
00:16:05,699 --> 00:16:07,199
and make sure that different parts

458
00:16:07,199 --> 00:16:09,300
within your Cuban needs faster will know

459
00:16:09,300 --> 00:16:11,399
about what you actually want to do

460
00:16:11,399 --> 00:16:13,500
so the API server is really Central

461
00:16:13,500 --> 00:16:16,680
component here uh now and it's also

462
00:16:16,680 --> 00:16:18,420
actually the power of of kubernetes

463
00:16:18,420 --> 00:16:20,519
because it allows so many new features

464
00:16:20,519 --> 00:16:22,139
to be added to kubernetes but we're not

465
00:16:22,139 --> 00:16:24,120
going to really talk about that now

466
00:16:24,120 --> 00:16:27,000
um so the other part is etcd LCD is a

467
00:16:27,000 --> 00:16:29,639
highly available key value storage

468
00:16:29,639 --> 00:16:31,500
um and it basically keeps track of

469
00:16:31,500 --> 00:16:33,779
everything that's up in your custom like

470
00:16:33,779 --> 00:16:35,100
um everything that starts with your

471
00:16:35,100 --> 00:16:37,259
secrets within your q a needles cluster

472
00:16:37,259 --> 00:16:40,259
so it's another like really important uh

473
00:16:40,259 --> 00:16:42,839
part from a security perspective

474
00:16:42,839 --> 00:16:44,459
um then on the control room we also have

475
00:16:44,459 --> 00:16:46,199
a controller manager no but in

476
00:16:46,199 --> 00:16:48,360
kubernetes you have controllers and

477
00:16:48,360 --> 00:16:50,639
operators now if you're completely new

478
00:16:50,639 --> 00:16:52,320
to this all you have to remember about

479
00:16:52,320 --> 00:16:54,000
controllers and operators the new

480
00:16:54,000 --> 00:16:55,860
communities cluster is that they

481
00:16:55,860 --> 00:16:58,199
basically take care about of really

482
00:16:58,199 --> 00:17:00,600
specific processes within your classes

483
00:17:00,600 --> 00:17:04,079
so let's assume you you usually doing

484
00:17:04,079 --> 00:17:06,299
something manually and you don't want to

485
00:17:06,299 --> 00:17:08,400
do that manually classic anymore like

486
00:17:08,400 --> 00:17:09,959
within your environment

487
00:17:09,959 --> 00:17:12,959
um you can get a control operator to

488
00:17:12,959 --> 00:17:15,000
take care of this process now in this

489
00:17:15,000 --> 00:17:17,339
case the controller manager it's really

490
00:17:17,339 --> 00:17:19,260
responsible to keep track of the state

491
00:17:19,260 --> 00:17:20,520
of your class and like is everything

492
00:17:20,520 --> 00:17:22,919
working as it's supposed to be

493
00:17:22,919 --> 00:17:24,480
um is anything like what's the state of

494
00:17:24,480 --> 00:17:26,520
the cluster and then we also have the

495
00:17:26,520 --> 00:17:28,439
scheduler on the control plane and the

496
00:17:28,439 --> 00:17:29,820
scheduler is basically responsible to

497
00:17:29,820 --> 00:17:32,460
know which notes which worker nodes are

498
00:17:32,460 --> 00:17:34,799
available to schedule new workloads on

499
00:17:34,799 --> 00:17:37,620
to schedule your new deployments on now

500
00:17:37,620 --> 00:17:40,440
on the worker notes we have q proxy

501
00:17:40,440 --> 00:17:42,840
which is important for uh routing within

502
00:17:42,840 --> 00:17:44,039
the cluster

503
00:17:44,039 --> 00:17:46,559
um and then we have to cubelet and the

504
00:17:46,559 --> 00:17:49,140
cubelet is really important for the

505
00:17:49,140 --> 00:17:50,880
worker notes every worker will have also

506
00:17:50,880 --> 00:17:53,220
its own couplet and the cubelet is

507
00:17:53,220 --> 00:17:55,320
basically responsible to communicate

508
00:17:55,320 --> 00:17:57,600
with the container engine that's within

509
00:17:57,600 --> 00:18:00,240
kubernetes so the container engine is

510
00:18:00,240 --> 00:18:03,360
there to run containers

511
00:18:03,360 --> 00:18:05,280
um so it could be for example the docker

512
00:18:05,280 --> 00:18:06,780
engine or it could be container D or

513
00:18:06,780 --> 00:18:08,880
similar and it's there to run the

514
00:18:08,880 --> 00:18:11,580
containers on the worker nodes and it's

515
00:18:11,580 --> 00:18:13,380
communicating with the cubelet and the

516
00:18:13,380 --> 00:18:15,419
cubelet is responsible to make sure that

517
00:18:15,419 --> 00:18:17,460
the containers are actually spin up now

518
00:18:17,460 --> 00:18:20,220
containers are sped up in a resource

519
00:18:20,220 --> 00:18:22,500
called a pod a part within kubernetes is

520
00:18:22,500 --> 00:18:24,660
like the smallest uh resource that you

521
00:18:24,660 --> 00:18:25,860
can have

522
00:18:25,860 --> 00:18:28,080
um and within a part you can have well

523
00:18:28,080 --> 00:18:29,880
you usually have like one or multiple

524
00:18:29,880 --> 00:18:32,460
containers depending on the use case I

525
00:18:32,460 --> 00:18:34,020
would have one container per part

526
00:18:34,020 --> 00:18:35,700
because it makes debugging a lot easier

527
00:18:35,700 --> 00:18:37,559
but

528
00:18:37,559 --> 00:18:39,480
um ultimately this is how it uh all

529
00:18:39,480 --> 00:18:41,880
works together so here kubernetes really

530
00:18:41,880 --> 00:18:44,280
is responsible for

531
00:18:44,280 --> 00:18:46,980
um scheduling managing and monitoring

532
00:18:46,980 --> 00:18:48,900
your containers and if you think about

533
00:18:48,900 --> 00:18:50,400
it you can have in some environments you

534
00:18:50,400 --> 00:18:51,780
can have thousands of containers running

535
00:18:51,780 --> 00:18:52,860
right

536
00:18:52,860 --> 00:18:54,960
um You don't want to spin them up and

537
00:18:54,960 --> 00:18:56,640
manage them on penalty right you want to

538
00:18:56,640 --> 00:18:58,620
have an automated system that kind of

539
00:18:58,620 --> 00:19:00,419
abstracts a lot of the underlying

540
00:19:00,419 --> 00:19:02,640
components from you so you can

541
00:19:02,640 --> 00:19:04,500
um have access to the underlying or like

542
00:19:04,500 --> 00:19:05,940
the lower level components or individual

543
00:19:05,940 --> 00:19:08,460
components of individual containers

544
00:19:08,460 --> 00:19:11,700
without having to always directly

545
00:19:11,700 --> 00:19:14,100
interact with those uh small resources

546
00:19:14,100 --> 00:19:15,059
yourself

547
00:19:15,059 --> 00:19:17,039
so this is ultimately given here it's a

548
00:19:17,039 --> 00:19:18,960
very complex system I don't expect you

549
00:19:18,960 --> 00:19:21,600
to remember all of the details uh just

550
00:19:21,600 --> 00:19:23,520
think about it that there's a pipe that

551
00:19:23,520 --> 00:19:25,020
interacts with the outside world and

552
00:19:25,020 --> 00:19:26,340
there's another part that's responsible

553
00:19:26,340 --> 00:19:28,799
to schedule your containers

554
00:19:28,799 --> 00:19:29,460
um

555
00:19:29,460 --> 00:19:32,880
next slide so kubernetes is ultimately

556
00:19:32,880 --> 00:19:35,039
distributed remote command execution as

557
00:19:35,039 --> 00:19:36,780
a service so that's the additional

558
00:19:36,780 --> 00:19:38,760
complexity of being distributed in

559
00:19:38,760 --> 00:19:41,640
remote to the mix also depending on your

560
00:19:41,640 --> 00:19:43,860
environment you might even module more

561
00:19:43,860 --> 00:19:46,380
complexities such as multi-tenancy you

562
00:19:46,380 --> 00:19:48,120
want to have multiple kubernetes

563
00:19:48,120 --> 00:19:50,100
clusters that all communicate with each

564
00:19:50,100 --> 00:19:51,419
other as well or you want to have

565
00:19:51,419 --> 00:19:54,299
multiple regions where each there's one

566
00:19:54,299 --> 00:19:55,919
kubernetes class and the more complexity

567
00:19:55,919 --> 00:19:57,419
you add to the mix

568
00:19:57,419 --> 00:19:59,160
um the more difficult will be to manage

569
00:19:59,160 --> 00:20:00,660
it and the more

570
00:20:00,660 --> 00:20:01,260
um

571
00:20:01,260 --> 00:20:04,140
issues you can face I guess

572
00:20:04,140 --> 00:20:06,240
um but that's ultimately what kubernetes

573
00:20:06,240 --> 00:20:08,880
does it also helps us in well it brings

574
00:20:08,880 --> 00:20:11,520
a lot of challenges it also

575
00:20:11,520 --> 00:20:14,520
um helps with a lot of the um with the

576
00:20:14,520 --> 00:20:16,020
lower level management and and

577
00:20:16,020 --> 00:20:18,900
especially large-scale infrastructures

578
00:20:18,900 --> 00:20:20,460
um so for example when I was working

579
00:20:20,460 --> 00:20:22,679
inside reliability engineer and I will

580
00:20:22,679 --> 00:20:24,780
talk a bit about that later as well but

581
00:20:24,780 --> 00:20:26,280
we had

582
00:20:26,280 --> 00:20:28,140
um different regions and in each region

583
00:20:28,140 --> 00:20:29,940
so for example in Frankfurt and London

584
00:20:29,940 --> 00:20:32,520
and New York we had like a big main

585
00:20:32,520 --> 00:20:34,020
cluster

586
00:20:34,020 --> 00:20:35,760
um and then within those main classes

587
00:20:35,760 --> 00:20:37,440
they were basically

588
00:20:37,440 --> 00:20:39,840
um on each compute rack and within those

589
00:20:39,840 --> 00:20:41,580
compute racks we had notes and each of

590
00:20:41,580 --> 00:20:42,960
those notes could schedule tenant

591
00:20:42,960 --> 00:20:44,640
classes so we had like main classes and

592
00:20:44,640 --> 00:20:46,260
not in those main classes we had then

593
00:20:46,260 --> 00:20:48,900
all those tenant clusters so there's

594
00:20:48,900 --> 00:20:50,580
like a lot of different components that

595
00:20:50,580 --> 00:20:52,440
you will have to manage

596
00:20:52,440 --> 00:20:53,940
um so kubernetes is essentially

597
00:20:53,940 --> 00:20:57,539
orchestrating DACA or like containers

598
00:20:57,539 --> 00:20:59,280
um and the same challenges that we have

599
00:20:59,280 --> 00:21:01,380
faced directly with containers and

600
00:21:01,380 --> 00:21:03,299
issues that we face and security issues

601
00:21:03,299 --> 00:21:05,460
we face with containers we will also

602
00:21:05,460 --> 00:21:07,620
have those in kubernetes but within

603
00:21:07,620 --> 00:21:09,299
kubernetes we will also have all the

604
00:21:09,299 --> 00:21:11,520
additional complexity built on top so

605
00:21:11,520 --> 00:21:13,799
it's not just a container and everything

606
00:21:13,799 --> 00:21:15,600
all of the configurations everything we

607
00:21:15,600 --> 00:21:17,100
can do within the containers directly

608
00:21:17,100 --> 00:21:19,020
themselves but with kubernetes we also

609
00:21:19,020 --> 00:21:21,600
have the kubernetes components on top

610
00:21:21,600 --> 00:21:25,039
yes they move free for you

611
00:21:25,860 --> 00:21:28,500
so in the same way as with Docker uh

612
00:21:28,500 --> 00:21:31,080
it's possible to get root uh um by

613
00:21:31,080 --> 00:21:33,000
executing a container we can also do

614
00:21:33,000 --> 00:21:35,460
that with kubernetes because kubernetes

615
00:21:35,460 --> 00:21:37,380
is essentially just orchestrating Docker

616
00:21:37,380 --> 00:21:39,900
or similar to Docker containers so what

617
00:21:39,900 --> 00:21:41,580
we're going to do here is we've got a

618
00:21:41,580 --> 00:21:43,980
kubernetes cluster

619
00:21:43,980 --> 00:21:45,780
which currently doesn't have any pods

620
00:21:45,780 --> 00:21:46,500
running

621
00:21:46,500 --> 00:21:47,760
and what we're going to do is we're

622
00:21:47,760 --> 00:21:50,220
going to create a container inside a pod

623
00:21:50,220 --> 00:21:51,299
that's going to give us access to the

624
00:21:51,299 --> 00:21:52,740
underlying node and this is something

625
00:21:52,740 --> 00:21:55,620
that any user of kubernetes could do

626
00:21:55,620 --> 00:21:57,120
unless you've got additional security

627
00:21:57,120 --> 00:21:59,520
controls in place so what we're going to

628
00:21:59,520 --> 00:22:02,640
do is we're going to do qptl create

629
00:22:02,640 --> 00:22:04,640
um

630
00:22:05,580 --> 00:22:08,580
manifests

631
00:22:08,700 --> 00:22:11,159
and node root

632
00:22:11,159 --> 00:22:12,900
and then whilst that's creating with a

633
00:22:12,900 --> 00:22:16,100
quick look at what we've created

634
00:22:18,539 --> 00:22:20,159
or you can see this is a fairly simple

635
00:22:20,159 --> 00:22:22,679
kubernetes pod specification in there

636
00:22:22,679 --> 00:22:23,760
there's a couple things that would look

637
00:22:23,760 --> 00:22:25,380
familiar from our previous demonstration

638
00:22:25,380 --> 00:22:27,419
around Docker run you see here we're

639
00:22:27,419 --> 00:22:29,460
asking for host resources and we're also

640
00:22:29,460 --> 00:22:31,760
using this security context privilege

641
00:22:31,760 --> 00:22:33,780
flag as well

642
00:22:33,780 --> 00:22:35,940
so now hopefully we should have that up

643
00:22:35,940 --> 00:22:37,260
and running

644
00:22:37,260 --> 00:22:40,020
what we can do is we can just say Cube

645
00:22:40,020 --> 00:22:43,440
ctdl SEC minus it

646
00:22:43,440 --> 00:22:45,780
no drip pod

647
00:22:45,780 --> 00:22:48,240
root

648
00:22:48,240 --> 00:22:50,580
by host now before I run this command

649
00:22:50,580 --> 00:22:52,200
you see that I am the user but I'm on my

650
00:22:52,200 --> 00:22:53,940
local machine so I'm on a local

651
00:22:53,940 --> 00:22:56,340
workstation then when I hit enter on

652
00:22:56,340 --> 00:22:59,760
this command for now the root user on

653
00:22:59,760 --> 00:23:01,740
the cluster control plane that means

654
00:23:01,740 --> 00:23:03,059
that any when you could do this would

655
00:23:03,059 --> 00:23:04,559
have full access to the unlike control

656
00:23:04,559 --> 00:23:06,120
plane they could go and you know change

657
00:23:06,120 --> 00:23:08,940
files modify things modify EC Shadow or

658
00:23:08,940 --> 00:23:10,860
anything else and that is by Design

659
00:23:10,860 --> 00:23:12,960
essentially how kubernetes works out of

660
00:23:12,960 --> 00:23:15,260
the box

661
00:23:16,919 --> 00:23:18,539
amazing

662
00:23:18,539 --> 00:23:22,320
um let's go back to the presentation

663
00:23:22,320 --> 00:23:25,380
um so ultimately kubernetes is really

664
00:23:25,380 --> 00:23:27,179
like you have to imagine it's like a

665
00:23:27,179 --> 00:23:29,760
layered cake I like this comparison

666
00:23:29,760 --> 00:23:31,980
um so in a cake you will also have

667
00:23:31,980 --> 00:23:33,780
different ingredients right and you have

668
00:23:33,780 --> 00:23:35,280
to make sure that the mix of ingredients

669
00:23:35,280 --> 00:23:36,419
is right

670
00:23:36,419 --> 00:23:39,120
um so the cake actually tastes good and

671
00:23:39,120 --> 00:23:40,440
similar in kubernetes you have to make

672
00:23:40,440 --> 00:23:41,820
sure that the configurations are right

673
00:23:41,820 --> 00:23:44,159
so you can actually use it properly uh

674
00:23:44,159 --> 00:23:45,659
the thing is within human needs you will

675
00:23:45,659 --> 00:23:47,280
have different

676
00:23:47,280 --> 00:23:48,900
um different components right you will

677
00:23:48,900 --> 00:23:50,520
have maybe on top you will impact them

678
00:23:50,520 --> 00:23:52,260
to communities faster we'll have the

679
00:23:52,260 --> 00:23:54,179
container runtime and everything is

680
00:23:54,179 --> 00:23:56,340
working on the Linux kernel so you have

681
00:23:56,340 --> 00:23:58,140
all those different layers

682
00:23:58,140 --> 00:24:00,600
um and then in addition to that you have

683
00:24:00,600 --> 00:24:02,760
outside components as well such as your

684
00:24:02,760 --> 00:24:04,559
container registry that you will have to

685
00:24:04,559 --> 00:24:06,600
keep in mind like how secure is you if

686
00:24:06,600 --> 00:24:08,400
you're using a private registry what are

687
00:24:08,400 --> 00:24:09,900
the configurations of the container

688
00:24:09,900 --> 00:24:12,539
registry that you're using externally so

689
00:24:12,539 --> 00:24:14,760
there are lots of different components

690
00:24:14,760 --> 00:24:17,179
the thing here is that each of those

691
00:24:17,179 --> 00:24:19,679
components is meant managed by different

692
00:24:19,679 --> 00:24:21,480
projects by different interests group

693
00:24:21,480 --> 00:24:23,520
let's say so for example the container

694
00:24:23,520 --> 00:24:25,980
registry might be provided by Docker it

695
00:24:25,980 --> 00:24:28,799
might be provided by a cloud render or

696
00:24:28,799 --> 00:24:32,159
it might be provided by a git repository

697
00:24:32,159 --> 00:24:36,059
such as as just GitHub um so a similar

698
00:24:36,059 --> 00:24:37,500
with like all of those different other

699
00:24:37,500 --> 00:24:38,820
components whether or not they're open

700
00:24:38,820 --> 00:24:41,039
source they will have different projects

701
00:24:41,039 --> 00:24:43,860
behind that are ultimately managing

702
00:24:43,860 --> 00:24:46,080
those components and that are working on

703
00:24:46,080 --> 00:24:47,460
those components and they have different

704
00:24:47,460 --> 00:24:49,320
interests and different goals and the

705
00:24:49,320 --> 00:24:51,840
other thing is that people maintainers

706
00:24:51,840 --> 00:24:53,940
who are working lower down respect right

707
00:24:53,940 --> 00:24:55,380
who are not having in mind

708
00:24:55,380 --> 00:24:57,600
containerization and kubernetes and all

709
00:24:57,600 --> 00:24:59,640
the cloud native things on top they will

710
00:24:59,640 --> 00:25:00,720
not they will not take that into

711
00:25:00,720 --> 00:25:03,240
consideration right it will not

712
00:25:03,240 --> 00:25:05,520
um so a lot of it will work or like

713
00:25:05,520 --> 00:25:06,780
people will

714
00:25:06,780 --> 00:25:09,179
um work on it independently and I've

715
00:25:09,179 --> 00:25:10,260
seen like

716
00:25:10,260 --> 00:25:12,659
um kubernetes installations or platforms

717
00:25:12,659 --> 00:25:14,580
that didn't also didn't care really

718
00:25:14,580 --> 00:25:16,440
about what's actually going on in their

719
00:25:16,440 --> 00:25:18,419
hood and I've started so much away so

720
00:25:18,419 --> 00:25:20,580
you could actually not really understand

721
00:25:20,580 --> 00:25:23,159
what's going on underneath and in a

722
00:25:23,159 --> 00:25:25,260
complex system such as kubernetes you

723
00:25:25,260 --> 00:25:27,360
really do want to have the option to

724
00:25:27,360 --> 00:25:28,679
also understand

725
00:25:28,679 --> 00:25:30,299
um the different components underneath

726
00:25:30,299 --> 00:25:31,919
that you might not be interacting with

727
00:25:31,919 --> 00:25:34,380
on a day-to-day basis the other thing is

728
00:25:34,380 --> 00:25:36,299
that each of those components

729
00:25:36,299 --> 00:25:39,120
will have different uh container

730
00:25:39,120 --> 00:25:41,279
security issues container breakouts and

731
00:25:41,279 --> 00:25:43,140
those are different cves

732
00:25:43,140 --> 00:25:45,360
um Rory knows them all by Heart Like if

733
00:25:45,360 --> 00:25:47,159
you ask them about specific activities

734
00:25:47,159 --> 00:25:48,960
he will know the entire number like that

735
00:25:48,960 --> 00:25:51,360
everything by heart which is fascinating

736
00:25:51,360 --> 00:25:53,640
so try out when you have a chance to

737
00:25:53,640 --> 00:25:54,559
meet them

738
00:25:54,559 --> 00:25:57,179
uh ultimately what I want to like the

739
00:25:57,179 --> 00:25:59,100
point of the slide is really that while

740
00:25:59,100 --> 00:26:01,440
you to like run containers high up on

741
00:26:01,440 --> 00:26:03,539
the stack on for example kubernetes for

742
00:26:03,539 --> 00:26:05,220
your coordinative environment

743
00:26:05,220 --> 00:26:08,159
um you can it can be affected by issues

744
00:26:08,159 --> 00:26:09,960
further down and you will have to keep

745
00:26:09,960 --> 00:26:12,299
that in mind so just just understanding

746
00:26:12,299 --> 00:26:14,159
the top which is already a lot

747
00:26:14,159 --> 00:26:16,500
um you will still have to

748
00:26:16,500 --> 00:26:18,179
um pay attention to everything that's

749
00:26:18,179 --> 00:26:21,480
running underneath yes demo number four

750
00:26:21,480 --> 00:26:23,820
for you

751
00:26:23,820 --> 00:26:24,900
so to demonstrate one of the

752
00:26:24,900 --> 00:26:26,279
vulnerabilities that can occur in the

753
00:26:26,279 --> 00:26:29,659
container stack let's look at cve

754
00:26:29,659 --> 00:26:31,980
2022-23648 which is a vulnerability in

755
00:26:31,980 --> 00:26:33,539
container D

756
00:26:33,539 --> 00:26:34,980
um what we can see in order to exploit

757
00:26:34,980 --> 00:26:37,500
this vulnerability is that we have a

758
00:26:37,500 --> 00:26:39,779
container file here

759
00:26:39,779 --> 00:26:42,900
which has a standard pretty standard

760
00:26:42,900 --> 00:26:44,820
setup from an entry point and then we've

761
00:26:44,820 --> 00:26:46,620
got this volume line here which what it

762
00:26:46,620 --> 00:26:48,059
does here is it goes dot dot slash dot

763
00:26:48,059 --> 00:26:50,159
slash dot slash so directory traversal

764
00:26:50,159 --> 00:26:53,220
and then the pki directory or the

765
00:26:53,220 --> 00:26:55,020
cubelet this contains sensitive

766
00:26:55,020 --> 00:26:57,240
information such as the private key of

767
00:26:57,240 --> 00:26:59,820
the cubelet so if an attacker can get

768
00:26:59,820 --> 00:27:01,500
access to this by running this container

769
00:27:01,500 --> 00:27:03,059
then obviously they can then use that to

770
00:27:03,059 --> 00:27:04,559
try and get additional access to the

771
00:27:04,559 --> 00:27:06,720
cluster so

772
00:27:06,720 --> 00:27:10,320
what we're going to do is we're going to

773
00:27:10,320 --> 00:27:13,080
create that manifest inside the cluster

774
00:27:13,080 --> 00:27:14,820
and then what we're going to do is we're

775
00:27:14,820 --> 00:27:19,100
going to do a couple exact minus it

776
00:27:19,260 --> 00:27:20,760
um

777
00:27:20,760 --> 00:27:23,520
and actually execute into the container

778
00:27:23,520 --> 00:27:26,480
and then do

779
00:27:27,120 --> 00:27:29,220
look inside that directory now typically

780
00:27:29,220 --> 00:27:30,600
this image shouldn't have any files in

781
00:27:30,600 --> 00:27:31,919
that directory but with this

782
00:27:31,919 --> 00:27:33,659
vulnerability it's been possible to copy

783
00:27:33,659 --> 00:27:35,820
those files in from the underlying host

784
00:27:35,820 --> 00:27:37,440
and we can see that if we do this and

785
00:27:37,440 --> 00:27:39,600
here you can see we have cubelet's

786
00:27:39,600 --> 00:27:41,640
private key so because this cluster is

787
00:27:41,640 --> 00:27:43,140
vulnerable to this issue in container D

788
00:27:43,140 --> 00:27:44,400
it's possible to get access to

789
00:27:44,400 --> 00:27:48,260
privileged bars from the underlying host

790
00:27:48,480 --> 00:27:49,679
amazing

791
00:27:49,679 --> 00:27:52,320
um well again does this really like to

792
00:27:52,320 --> 00:27:53,340
show

793
00:27:53,340 --> 00:27:54,779
um those issues

794
00:27:54,779 --> 00:27:55,740
um

795
00:27:55,740 --> 00:27:58,980
now let's move on to some other parts

796
00:27:58,980 --> 00:28:01,020
and issues within

797
00:28:01,020 --> 00:28:02,700
um kubernetes so that may be more

798
00:28:02,700 --> 00:28:05,640
specific so

799
00:28:05,640 --> 00:28:07,679
this slide was tile February Community

800
00:28:07,679 --> 00:28:09,179
we need to start working as fun I don't

801
00:28:09,179 --> 00:28:11,580
think it's fine it's very complex to me

802
00:28:11,580 --> 00:28:13,200
um ultimately what you have to remember

803
00:28:13,200 --> 00:28:15,600
in kubernetes networking is that it

804
00:28:15,600 --> 00:28:17,580
reuses a lot of the Linux networking

805
00:28:17,580 --> 00:28:19,080
features

806
00:28:19,080 --> 00:28:21,720
um so it's adapting a lot of the Linux

807
00:28:21,720 --> 00:28:25,200
networking features uh two Cuban meters

808
00:28:25,200 --> 00:28:27,779
um and building on top the problem like

809
00:28:27,779 --> 00:28:29,340
not the promise but the thing is that

810
00:28:29,340 --> 00:28:32,220
kubernetes changes or Builds on parts of

811
00:28:32,220 --> 00:28:34,320
it and modifies it so some parts will

812
00:28:34,320 --> 00:28:35,940
work differently

813
00:28:35,940 --> 00:28:39,059
um and that kind of builds up some sharp

814
00:28:39,059 --> 00:28:40,919
edges as where we calls them that we

815
00:28:40,919 --> 00:28:43,760
have to be aware of

816
00:28:44,159 --> 00:28:46,140
um ultimately we have to think of

817
00:28:46,140 --> 00:28:49,080
cluster notes are routers uh so by

818
00:28:49,080 --> 00:28:50,820
default in many classes you can get to

819
00:28:50,820 --> 00:28:52,320
The Container network from outside the

820
00:28:52,320 --> 00:28:54,480
cluster But ultimately cluster nodes are

821
00:28:54,480 --> 00:28:57,539
routed so uh the thing is that um when

822
00:28:57,539 --> 00:28:59,880
you're like in an on-premise clusters

823
00:28:59,880 --> 00:29:01,980
you would have a separate subnet for the

824
00:29:01,980 --> 00:29:04,440
cluster that you can't access from the

825
00:29:04,440 --> 00:29:05,760
outside world

826
00:29:05,760 --> 00:29:08,159
um no the thing is that if you're on the

827
00:29:08,159 --> 00:29:10,919
same IP subnet as the cluster you will

828
00:29:10,919 --> 00:29:12,600
be able to access

829
00:29:12,600 --> 00:29:14,520
um the container traffic off of the

830
00:29:14,520 --> 00:29:15,960
cluster itself

831
00:29:15,960 --> 00:29:16,740
um

832
00:29:16,740 --> 00:29:20,179
just one of those things

833
00:29:20,279 --> 00:29:23,659
um no use theme of five

834
00:29:25,740 --> 00:29:28,020
so we can demonstrate the idea that

835
00:29:28,020 --> 00:29:29,700
kubernetes cluster nodes are just

836
00:29:29,700 --> 00:29:32,159
routers by showing what happens if you

837
00:29:32,159 --> 00:29:34,380
try to get access to a pod from outside

838
00:29:34,380 --> 00:29:35,880
the cluster

839
00:29:35,880 --> 00:29:37,679
the machine we're currently on is a

840
00:29:37,679 --> 00:29:39,179
machine on the same network but not

841
00:29:39,179 --> 00:29:41,279
inside the cluster we can have a look

842
00:29:41,279 --> 00:29:42,960
and see what IP addresses we're looking

843
00:29:42,960 --> 00:29:46,559
for with Q cattle get you one or so why

844
00:29:46,559 --> 00:29:48,179
now what you see here we've got a pod

845
00:29:48,179 --> 00:29:50,279
called test web which has got an IP

846
00:29:50,279 --> 00:29:52,820
address of

847
00:29:52,820 --> 00:29:58,140
10.0.1.71 now if we try and curl

848
00:29:58,140 --> 00:30:00,419
that Chris

849
00:30:00,419 --> 00:30:02,279
initially we'll get no response right

850
00:30:02,279 --> 00:30:03,960
because we can't get that Network we

851
00:30:03,960 --> 00:30:06,000
can't root traffic to it from outside of

852
00:30:06,000 --> 00:30:07,440
the cluster

853
00:30:07,440 --> 00:30:11,460
however if we do sudo root add honest

854
00:30:11,460 --> 00:30:13,039
net

855
00:30:13,039 --> 00:30:14,940
10.0.0.0

856
00:30:14,940 --> 00:30:19,080
net mask 255.0.0

857
00:30:19,080 --> 00:30:21,600
ew and then we use the Gateway of the

858
00:30:21,600 --> 00:30:23,640
cluster node IP address which in this

859
00:30:23,640 --> 00:30:27,299
case is 19268 41.78

860
00:30:27,299 --> 00:30:29,640
we can now try and curl that again

861
00:30:29,640 --> 00:30:31,080
and when we do so

862
00:30:31,080 --> 00:30:32,760
you get back the response from the Pod

863
00:30:32,760 --> 00:30:34,860
inside the container Network because

864
00:30:34,860 --> 00:30:37,799
kubernetes nodes are just routers and if

865
00:30:37,799 --> 00:30:39,120
you tell your local machine that you

866
00:30:39,120 --> 00:30:41,100
need to root traffic into the cluster it

867
00:30:41,100 --> 00:30:44,539
will happily do just that

868
00:30:47,159 --> 00:30:49,919
Okay so

869
00:30:49,919 --> 00:30:52,380
um let's discuss

870
00:30:52,380 --> 00:30:55,620
so this is Tyler Uranus localhost not

871
00:30:55,620 --> 00:30:58,380
only local as part of kubernetes uh

872
00:30:58,380 --> 00:31:01,020
using Linux networking it means that uh

873
00:31:01,020 --> 00:31:02,520
you can configure the network stack on

874
00:31:02,520 --> 00:31:05,039
the cluster notes and one setting you

875
00:31:05,039 --> 00:31:06,960
spank kubernetes that had had some

876
00:31:06,960 --> 00:31:08,820
interesting consequences so it is

877
00:31:08,820 --> 00:31:10,440
related to an older version of

878
00:31:10,440 --> 00:31:12,000
kubernetes where basically you could

879
00:31:12,000 --> 00:31:15,240
access the containers localhost

880
00:31:15,240 --> 00:31:17,039
um from somewhere else on the local

881
00:31:17,039 --> 00:31:20,640
network which should not be possible

882
00:31:20,640 --> 00:31:25,220
um now let me share next theme up

883
00:31:26,220 --> 00:31:28,440
Name six

884
00:31:28,440 --> 00:31:30,419
so we can demonstrate this vulnerability

885
00:31:30,419 --> 00:31:33,059
and show that in a situation where the

886
00:31:33,059 --> 00:31:34,380
cluster is vulnerable we can actually

887
00:31:34,380 --> 00:31:36,720
get access to a port running on the

888
00:31:36,720 --> 00:31:38,520
localhost interface of a remote machine

889
00:31:38,520 --> 00:31:41,340
from another system in the network

890
00:31:41,340 --> 00:31:43,140
to start off what we're going to do is

891
00:31:43,140 --> 00:31:45,240
we are going to show that there's no

892
00:31:45,240 --> 00:31:47,700
kubernetes cluster running locally

893
00:31:47,700 --> 00:31:49,919
and it's going to say nope you can't get

894
00:31:49,919 --> 00:31:51,480
access to that because we don't have a

895
00:31:51,480 --> 00:31:53,820
cluster running on this port on

896
00:31:53,820 --> 00:31:55,020
localhost

897
00:31:55,020 --> 00:31:56,700
so then what we need to do is tell our

898
00:31:56,700 --> 00:31:58,679
cluster to allow us to send localhost

899
00:31:58,679 --> 00:32:01,020
traffic to a remote machine

900
00:32:01,020 --> 00:32:03,059
to do that we need to set some sys

901
00:32:03,059 --> 00:32:04,140
cuddles

902
00:32:04,140 --> 00:32:05,279
which will allow us to do this because

903
00:32:05,279 --> 00:32:06,600
they're pretty non-standard Linux

904
00:32:06,600 --> 00:32:08,220
configuration but Linux being fairly

905
00:32:08,220 --> 00:32:10,020
flexible will allow us to make these

906
00:32:10,020 --> 00:32:11,340
changes

907
00:32:11,340 --> 00:32:13,260
these two commands just allow us to move

908
00:32:13,260 --> 00:32:15,480
traffic to local us or local traffic

909
00:32:15,480 --> 00:32:17,820
remote machines we then need to modify

910
00:32:17,820 --> 00:32:19,740
our routing table

911
00:32:19,740 --> 00:32:22,140
so first off we remove the route that

912
00:32:22,140 --> 00:32:25,919
sends this host traffic to 127001 to

913
00:32:25,919 --> 00:32:28,260
local machine and have it root out to

914
00:32:28,260 --> 00:32:30,659
our vulnerable kubernetes cluster which

915
00:32:30,659 --> 00:32:33,659
in this case is on 41.93

916
00:32:33,659 --> 00:32:35,760
so now we should have a root set so

917
00:32:35,760 --> 00:32:37,559
they'll actually go to the cluster and

918
00:32:37,559 --> 00:32:39,179
we should be able to replay our cube

919
00:32:39,179 --> 00:32:40,919
cutter command from before and see if

920
00:32:40,919 --> 00:32:42,179
it'll give us access the cluster that

921
00:32:42,179 --> 00:32:44,039
has to be running on this port on that

922
00:32:44,039 --> 00:32:45,000
machine

923
00:32:45,000 --> 00:32:46,620
and as you can see that now works

924
00:32:46,620 --> 00:32:48,299
indicating that we've been able to

925
00:32:48,299 --> 00:32:52,220
successfully exploit this vulnerability

926
00:32:53,399 --> 00:32:54,720
okay

927
00:32:54,720 --> 00:32:57,720
let me go back to the presentation so

928
00:32:57,720 --> 00:33:00,360
another CV a tech of the services I

929
00:33:00,360 --> 00:33:02,100
think there was an amazing title

930
00:33:02,100 --> 00:33:05,399
um I might call a cubecon talk but but

931
00:33:05,399 --> 00:33:08,399
ultimately the thing is here that

932
00:33:08,399 --> 00:33:10,260
um kubernetes adds a lot of different

933
00:33:10,260 --> 00:33:12,360
components on top to make networking

934
00:33:12,360 --> 00:33:13,860
between different other different

935
00:33:13,860 --> 00:33:16,799
components such as Parts happen so the

936
00:33:16,799 --> 00:33:17,700
thing is

937
00:33:17,700 --> 00:33:21,360
um parts are ephemeral you never know

938
00:33:21,360 --> 00:33:23,100
how to pronounce a word but it's like

939
00:33:23,100 --> 00:33:26,100
basically parts are there to they're not

940
00:33:26,100 --> 00:33:27,960
there to be persistent like they live

941
00:33:27,960 --> 00:33:29,820
and dive very quickly like there are

942
00:33:29,820 --> 00:33:32,220
lots of things that can break apart uh

943
00:33:32,220 --> 00:33:35,159
from different configurations to um it

944
00:33:35,159 --> 00:33:36,899
just you know

945
00:33:36,899 --> 00:33:39,720
buying every once in a while

946
00:33:39,720 --> 00:33:41,880
um so basically pots are not like a

947
00:33:41,880 --> 00:33:44,880
reliable connection let's say every part

948
00:33:44,880 --> 00:33:46,380
that is spin up will have its own IP

949
00:33:46,380 --> 00:33:49,260
address and then you could use that

950
00:33:49,260 --> 00:33:51,059
um to configure within like everything

951
00:33:51,059 --> 00:33:52,919
within the cluster But ultimately the

952
00:33:52,919 --> 00:33:54,600
next time a new product spin up it will

953
00:33:54,600 --> 00:33:55,980
have a different IP address so you can't

954
00:33:55,980 --> 00:33:57,419
really like have

955
00:33:57,419 --> 00:33:59,600
um the data be persistent across your

956
00:33:59,600 --> 00:34:02,279
cluster over time without having to be

957
00:34:02,279 --> 00:34:04,740
consider everything all the time so what

958
00:34:04,740 --> 00:34:06,960
kubernetes did is Building Services kind

959
00:34:06,960 --> 00:34:09,418
of as a wrapper around that so you can

960
00:34:09,418 --> 00:34:11,760
connect services in kubernetes with the

961
00:34:11,760 --> 00:34:13,980
parts of the underlying workloads and

962
00:34:13,980 --> 00:34:15,300
through that

963
00:34:15,300 --> 00:34:16,379
um you will connect with different

964
00:34:16,379 --> 00:34:18,780
services with each other and the parts

965
00:34:18,780 --> 00:34:20,219
underneath they can do whatever they

966
00:34:20,219 --> 00:34:22,679
want it won't affect the networking of

967
00:34:22,679 --> 00:34:24,119
the services

968
00:34:24,119 --> 00:34:27,359
um so the thing is that um

969
00:34:27,359 --> 00:34:29,399
that this cve basically showed

970
00:34:29,399 --> 00:34:31,379
consequence of malicious Services what

971
00:34:31,379 --> 00:34:33,780
does CDE was about is

972
00:34:33,780 --> 00:34:36,899
that um basically anybody who was able

973
00:34:36,899 --> 00:34:38,339
to or who is able to create on our

974
00:34:38,339 --> 00:34:40,560
kubernetes cluster service will be able

975
00:34:40,560 --> 00:34:42,239
to intercept the traffic of other

976
00:34:42,239 --> 00:34:45,359
services within the cluster and um

977
00:34:45,359 --> 00:34:48,300
there's no patch for this out of box

978
00:34:48,300 --> 00:34:50,639
within kubernetes however you can use

979
00:34:50,639 --> 00:34:52,679
admission controllers to kind of

980
00:34:52,679 --> 00:34:54,418
mitigate that

981
00:34:54,418 --> 00:34:56,280
um so you can use the admission

982
00:34:56,280 --> 00:34:57,900
controller comes to kubernetes or you

983
00:34:57,900 --> 00:34:59,160
can use other additional admission

984
00:34:59,160 --> 00:35:00,660
controllers

985
00:35:00,660 --> 00:35:02,820
um and yeah that's basically the issue

986
00:35:02,820 --> 00:35:03,780
so

987
00:35:03,780 --> 00:35:06,060
um just because you have access on like

988
00:35:06,060 --> 00:35:07,800
when you've asked one part of the

989
00:35:07,800 --> 00:35:09,480
cluster it can easily happen that you

990
00:35:09,480 --> 00:35:11,339
have access to other parts even though

991
00:35:11,339 --> 00:35:13,800
it's not um the configuration between

992
00:35:13,800 --> 00:35:16,740
the different Services is not explicit

993
00:35:16,740 --> 00:35:19,500
let's try the next thing

994
00:35:19,500 --> 00:35:22,500
so we can demonstrate cve 2020 8554 in a

995
00:35:22,500 --> 00:35:24,540
standard cluster as by default is not

996
00:35:24,540 --> 00:35:26,400
mitigated unless you deploy additional

997
00:35:26,400 --> 00:35:28,380
admission controllers

998
00:35:28,380 --> 00:35:32,160
um here we've got a kubernetes cluster

999
00:35:32,160 --> 00:35:34,380
it's just an empty cluster and the first

1000
00:35:34,380 --> 00:35:35,820
thing we're going to do is we're going

1001
00:35:35,820 --> 00:35:38,900
to create a client pod

1002
00:35:40,320 --> 00:35:42,720
and this just spins up pod for us and

1003
00:35:42,720 --> 00:35:45,599
then from inside that client pod what

1004
00:35:45,599 --> 00:35:47,280
we're going to do is we're going to curl

1005
00:35:47,280 --> 00:35:49,079
an address on the internet in this case

1006
00:35:49,079 --> 00:35:51,599
the icann has IP service and just see

1007
00:35:51,599 --> 00:35:53,520
what it comes back with

1008
00:35:53,520 --> 00:35:57,780
so if you pedal exact client odd

1009
00:35:57,780 --> 00:36:01,339
and then curl minus s

1010
00:36:01,440 --> 00:36:04,020
I can't smp.com

1011
00:36:04,020 --> 00:36:05,400
and what you see is you come back with

1012
00:36:05,400 --> 00:36:08,099
this is my external internet facing IP

1013
00:36:08,099 --> 00:36:10,140
address which is what I can has IP is

1014
00:36:10,140 --> 00:36:11,520
meant to do it's recent returns your

1015
00:36:11,520 --> 00:36:12,960
internet IP address

1016
00:36:12,960 --> 00:36:14,400
so now what we're going to do is we're

1017
00:36:14,400 --> 00:36:17,280
going to deploy a service which actually

1018
00:36:17,280 --> 00:36:19,140
intercepts that call and this is

1019
00:36:19,140 --> 00:36:20,640
something that any service order can do

1020
00:36:20,640 --> 00:36:22,619
in a cluster by intercepting the IP

1021
00:36:22,619 --> 00:36:25,200
address for that service and then we're

1022
00:36:25,200 --> 00:36:26,460
going to also going to spin up a server

1023
00:36:26,460 --> 00:36:28,859
to actually redirect it to so let's do

1024
00:36:28,859 --> 00:36:29,940
that

1025
00:36:29,940 --> 00:36:32,220
so first we're going to create the uh

1026
00:36:32,220 --> 00:36:34,380
the server that's going to receive our

1027
00:36:34,380 --> 00:36:35,940
redirected traffic

1028
00:36:35,940 --> 00:36:37,800
and then what we're going to do is we're

1029
00:36:37,800 --> 00:36:40,700
going to create a service

1030
00:36:40,980 --> 00:36:42,540
which essentially is going to intersect

1031
00:36:42,540 --> 00:36:45,240
that traffic and and send it in the

1032
00:36:45,240 --> 00:36:46,440
other array

1033
00:36:46,440 --> 00:36:48,359
so uh we can actually quickly look at

1034
00:36:48,359 --> 00:36:50,579
this service as well and you can see

1035
00:36:50,579 --> 00:36:51,839
here what we're doing these are the

1036
00:36:51,839 --> 00:36:54,000
external IP addresses which correspond

1037
00:36:54,000 --> 00:36:57,000
to icann has IPS uh servers so this is

1038
00:36:57,000 --> 00:36:57,900
what essentially what we're going to

1039
00:36:57,900 --> 00:36:59,339
hijack

1040
00:36:59,339 --> 00:37:01,320
so now if we run the Sim command we did

1041
00:37:01,320 --> 00:37:03,720
before which is this literally to use

1042
00:37:03,720 --> 00:37:06,240
Curl to go to the icon as IP server

1043
00:37:06,240 --> 00:37:07,500
address

1044
00:37:07,500 --> 00:37:09,180
what we get back is not what we got

1045
00:37:09,180 --> 00:37:11,040
before we get back this is essentially

1046
00:37:11,040 --> 00:37:12,660
the echo server which we deployed which

1047
00:37:12,660 --> 00:37:14,820
is where we redirected the traffic to so

1048
00:37:14,820 --> 00:37:15,960
essentially if you think about this this

1049
00:37:15,960 --> 00:37:17,520
would allow an attacker I can create

1050
00:37:17,520 --> 00:37:19,560
services to intercept traffic for some

1051
00:37:19,560 --> 00:37:21,180
other user in the cluster and direct it

1052
00:37:21,180 --> 00:37:24,500
somewhere else that they want to send it

1053
00:37:25,380 --> 00:37:27,980
okay

1054
00:37:29,820 --> 00:37:33,660
so uh how does how does the attack

1055
00:37:33,660 --> 00:37:36,780
vector or security is actually evolve or

1056
00:37:36,780 --> 00:37:39,180
like how does where we see it change

1057
00:37:39,180 --> 00:37:41,460
um so with more and more people joining

1058
00:37:41,460 --> 00:37:43,619
the ecosystem obviously they are first

1059
00:37:43,619 --> 00:37:46,260
of all they're new more people who don't

1060
00:37:46,260 --> 00:37:49,260
have uh detailed understanding of those

1061
00:37:49,260 --> 00:37:51,660
underlying components and

1062
00:37:51,660 --> 00:37:53,880
um all of their details around it

1063
00:37:53,880 --> 00:37:55,079
um and at the same time you have

1064
00:37:55,079 --> 00:37:58,500
projects that kind of they try to make

1065
00:37:58,500 --> 00:38:00,300
um kubernetes less complex what I

1066
00:38:00,300 --> 00:38:01,740
mentioned earlier there are a lot of

1067
00:38:01,740 --> 00:38:03,540
projects try to abstract as much of the

1068
00:38:03,540 --> 00:38:05,579
underlying components as possible the

1069
00:38:05,579 --> 00:38:07,440
thing is the complexity underneath even

1070
00:38:07,440 --> 00:38:09,240
if you try to abstract it won't go away

1071
00:38:09,240 --> 00:38:12,660
right so first of all

1072
00:38:12,660 --> 00:38:17,280
um kubernetes uh has ipv four and six

1073
00:38:17,280 --> 00:38:18,599
dual stack

1074
00:38:18,599 --> 00:38:20,880
um clusters released to stable so that's

1075
00:38:20,880 --> 00:38:23,760
a component to it and then also there

1076
00:38:23,760 --> 00:38:25,619
are lots of container network interface

1077
00:38:25,619 --> 00:38:28,079
add-ons for kubernetes

1078
00:38:28,079 --> 00:38:29,760
um such as helium

1079
00:38:29,760 --> 00:38:32,400
so you can like as kubernetes becomes

1080
00:38:32,400 --> 00:38:34,619
more mature the networking part is

1081
00:38:34,619 --> 00:38:36,359
actually becoming more tailored to

1082
00:38:36,359 --> 00:38:38,640
specific use cases and specific type of

1083
00:38:38,640 --> 00:38:42,119
cluster specific environments so with

1084
00:38:42,119 --> 00:38:45,240
um Network plugins from like that are

1085
00:38:45,240 --> 00:38:46,920
provided like by A specific group you

1086
00:38:46,920 --> 00:38:49,079
can actually also create your own

1087
00:38:49,079 --> 00:38:52,079
um network interface and in similar

1088
00:38:52,079 --> 00:38:54,240
versus using like a project such as

1089
00:38:54,240 --> 00:38:56,160
celium instead

1090
00:38:56,160 --> 00:38:57,960
um so that's one of the things that's

1091
00:38:57,960 --> 00:39:00,060
going to add more complexity to the

1092
00:39:00,060 --> 00:39:01,140
entire

1093
00:39:01,140 --> 00:39:03,480
um ecosystem to running kubernetes

1094
00:39:03,480 --> 00:39:05,400
classes and workloads within

1095
00:39:05,400 --> 00:39:06,660
um another part is what I mentioned

1096
00:39:06,660 --> 00:39:08,579
earlier that

1097
00:39:08,579 --> 00:39:10,440
um as the ecosystem becomes more mature

1098
00:39:10,440 --> 00:39:13,440
like that's many companies are expanding

1099
00:39:13,440 --> 00:39:15,540
their usage and making their usage of

1100
00:39:15,540 --> 00:39:17,640
kubernetes more complex

1101
00:39:17,640 --> 00:39:20,339
um this will also add a lot of more

1102
00:39:20,339 --> 00:39:22,440
areas to the mix of like things that you

1103
00:39:22,440 --> 00:39:24,060
have to take into consideration for your

1104
00:39:24,060 --> 00:39:26,040
container security such as who

1105
00:39:26,040 --> 00:39:29,040
multi-tenancy how do you make sure that

1106
00:39:29,040 --> 00:39:31,920
um in multi and multi regions how do you

1107
00:39:31,920 --> 00:39:35,400
make sure that different clusters and

1108
00:39:35,400 --> 00:39:36,300
different components within their

1109
00:39:36,300 --> 00:39:37,920
classes can reliably communicate with

1110
00:39:37,920 --> 00:39:39,839
each other even if they are not

1111
00:39:39,839 --> 00:39:42,599
um in proximity

1112
00:39:42,599 --> 00:39:44,099
so

1113
00:39:44,099 --> 00:39:46,200
um the next part is something else

1114
00:39:46,200 --> 00:39:47,820
that's really specific to kubernetes is

1115
00:39:47,820 --> 00:39:51,599
that kubernetes unlike other multi-user

1116
00:39:51,599 --> 00:39:53,640
systems it doesn't have user accounts so

1117
00:39:53,640 --> 00:39:55,079
you don't have like by default like a

1118
00:39:55,079 --> 00:39:56,880
list of different users who can access

1119
00:39:56,880 --> 00:39:58,560
your cluster meaning you have different

1120
00:39:58,560 --> 00:40:00,300
other ways to keep track of and keep

1121
00:40:00,300 --> 00:40:02,160
track of who can actually access your

1122
00:40:02,160 --> 00:40:04,980
resources which is a lot of fun so how

1123
00:40:04,980 --> 00:40:07,020
does kubernetes ultimately do it how do

1124
00:40:07,020 --> 00:40:09,060
they know that the request is legitimate

1125
00:40:09,060 --> 00:40:11,339
it's really through the authentication

1126
00:40:11,339 --> 00:40:13,020
mechanisms that you're using so for

1127
00:40:13,020 --> 00:40:15,240
example fully authentication mechanisms

1128
00:40:15,240 --> 00:40:17,280
of the cloud provider so for instance if

1129
00:40:17,280 --> 00:40:19,440
I have limited access on my Google Cloud

1130
00:40:19,440 --> 00:40:20,579
account

1131
00:40:20,579 --> 00:40:22,079
um two different resources and what I

1132
00:40:22,079 --> 00:40:24,720
can modify then obviously then also you

1133
00:40:24,720 --> 00:40:27,480
can like configure the access within the

1134
00:40:27,480 --> 00:40:30,000
kubernetes cluster you can also add

1135
00:40:30,000 --> 00:40:31,380
additional access rights of like maybe

1136
00:40:31,380 --> 00:40:33,000
I'm only allowed to access specific

1137
00:40:33,000 --> 00:40:35,280
namespace similar within their class or

1138
00:40:35,280 --> 00:40:37,740
specific resources

1139
00:40:37,740 --> 00:40:40,879
um here's demo eight

1140
00:40:42,599 --> 00:40:45,119
so as mentioned on the previous slide

1141
00:40:45,119 --> 00:40:47,520
and kubernetes itself doesn't have a

1142
00:40:47,520 --> 00:40:50,280
user database but relies on external

1143
00:40:50,280 --> 00:40:52,320
authenticators and the identity they

1144
00:40:52,320 --> 00:40:54,180
provide and we can actually look at this

1145
00:40:54,180 --> 00:40:55,980
by looking at some of the identities

1146
00:40:55,980 --> 00:40:57,839
used in a kind of standard kubernetes

1147
00:40:57,839 --> 00:40:59,040
cluster

1148
00:40:59,040 --> 00:41:00,660
the first one what we're going to do is

1149
00:41:00,660 --> 00:41:03,060
we're going to use this command here to

1150
00:41:03,060 --> 00:41:05,820
extract information from the cubeconfig

1151
00:41:05,820 --> 00:41:07,380
file which is how users often

1152
00:41:07,380 --> 00:41:09,359
authenticate to clusters and we're going

1153
00:41:09,359 --> 00:41:11,579
to get the client certificate data and

1154
00:41:11,579 --> 00:41:12,960
have a look and see what user we are

1155
00:41:12,960 --> 00:41:14,579
actually authenticating to as this

1156
00:41:14,579 --> 00:41:16,020
cluster

1157
00:41:16,020 --> 00:41:18,599
so this gives us our information and we

1158
00:41:18,599 --> 00:41:20,400
can see here that in this case the

1159
00:41:20,400 --> 00:41:21,960
username that we are using is the

1160
00:41:21,960 --> 00:41:24,000
Enfield which is kubernetes admin and

1161
00:41:24,000 --> 00:41:26,339
the group name is system Masters we'll

1162
00:41:26,339 --> 00:41:27,720
talk a bit more about system Masters on

1163
00:41:27,720 --> 00:41:29,339
the next slide so that user essentially

1164
00:41:29,339 --> 00:41:31,740
is usernames kubernetes admin and a

1165
00:41:31,740 --> 00:41:33,839
group of system Masters

1166
00:41:33,839 --> 00:41:35,940
also kubernetes has service account

1167
00:41:35,940 --> 00:41:37,260
tokens which is how you Services

1168
00:41:37,260 --> 00:41:40,140
authenticate into the cluster and we can

1169
00:41:40,140 --> 00:41:42,359
do a similar idea there's our JWT tokens

1170
00:41:42,359 --> 00:41:44,520
as we mentioned so we can look at how

1171
00:41:44,520 --> 00:41:46,380
they are constructed and what username

1172
00:41:46,380 --> 00:41:48,180
is being presented there as well

1173
00:41:48,180 --> 00:41:50,040
so here what we're going to do is get

1174
00:41:50,040 --> 00:41:52,619
the default secret Pro M from the

1175
00:41:52,619 --> 00:41:54,240
default namespace and we're going to

1176
00:41:54,240 --> 00:41:55,619
decode that and have a look at what it

1177
00:41:55,619 --> 00:41:57,180
looks like

1178
00:41:57,180 --> 00:42:00,420
and here what we can see is that um

1179
00:42:00,420 --> 00:42:03,720
we've got our subject name here which is

1180
00:42:03,720 --> 00:42:05,940
system service account default default

1181
00:42:05,940 --> 00:42:07,560
so it's the default service account in

1182
00:42:07,560 --> 00:42:09,480
the default namespace

1183
00:42:09,480 --> 00:42:11,160
um so that's the username that would be

1184
00:42:11,160 --> 00:42:12,960
used for any role-based access control

1185
00:42:12,960 --> 00:42:15,960
decisions uh there one thing you might

1186
00:42:15,960 --> 00:42:17,579
notice here

1187
00:42:17,579 --> 00:42:19,680
um if you're used to jwts is what's

1188
00:42:19,680 --> 00:42:21,960
missing and what's missing is any form

1189
00:42:21,960 --> 00:42:23,339
of expiry

1190
00:42:23,339 --> 00:42:25,560
these tokens don't expire they last

1191
00:42:25,560 --> 00:42:27,720
forever so any uh any user is able to

1192
00:42:27,720 --> 00:42:29,579
get access on these tokens

1193
00:42:29,579 --> 00:42:30,960
um will actually have persistent access

1194
00:42:30,960 --> 00:42:33,060
to the cluster and this is something

1195
00:42:33,060 --> 00:42:34,200
which has been addressed or being

1196
00:42:34,200 --> 00:42:35,940
addressed in the most recent versions of

1197
00:42:35,940 --> 00:42:37,980
kubernetes specifically in about 1.22

1198
00:42:37,980 --> 00:42:39,420
and above

1199
00:42:39,420 --> 00:42:41,220
um workloads don't actually use these

1200
00:42:41,220 --> 00:42:43,619
anymore they use time bounce tokens and

1201
00:42:43,619 --> 00:42:44,640
we can actually look at one of those

1202
00:42:44,640 --> 00:42:46,800
tokens by looking at a workload that's

1203
00:42:46,800 --> 00:42:48,839
running in our cluster and looking at

1204
00:42:48,839 --> 00:42:50,579
what the token is for that

1205
00:42:50,579 --> 00:42:53,579
so if we do cubecutio we can see here

1206
00:42:53,579 --> 00:42:55,079
we've got something called test web

1207
00:42:55,079 --> 00:42:56,820
which is just a pod running in our

1208
00:42:56,820 --> 00:42:58,859
cluster and we can look and see what

1209
00:42:58,859 --> 00:43:01,640
token that is running

1210
00:43:02,280 --> 00:43:04,440
we do that using this command here we're

1211
00:43:04,440 --> 00:43:06,359
going to exec inside the test web pod

1212
00:43:06,359 --> 00:43:08,640
and we're going to cat VAR run Secrets

1213
00:43:08,640 --> 00:43:10,619
kubernetes.io service account token

1214
00:43:10,619 --> 00:43:12,480
which is the default location this is

1215
00:43:12,480 --> 00:43:14,520
still a JWT token and we can actually

1216
00:43:14,520 --> 00:43:17,700
then um look at what it looks like

1217
00:43:17,700 --> 00:43:20,280
and here what you can see is the subject

1218
00:43:20,280 --> 00:43:21,839
interestingly is the same right this

1219
00:43:21,839 --> 00:43:23,640
isn't the same token but it's got the

1220
00:43:23,640 --> 00:43:24,960
same subject

1221
00:43:24,960 --> 00:43:26,520
um it just because all workloads get

1222
00:43:26,520 --> 00:43:27,660
assigned the default service account

1223
00:43:27,660 --> 00:43:29,339
token if they don't have one of their

1224
00:43:29,339 --> 00:43:31,319
own but what we do have here is an

1225
00:43:31,319 --> 00:43:33,660
expiry so these tokens that are are used

1226
00:43:33,660 --> 00:43:35,220
in more modern versions of kubernetes

1227
00:43:35,220 --> 00:43:36,900
actually do expire which obviously is

1228
00:43:36,900 --> 00:43:38,940
great from a security standpoint but

1229
00:43:38,940 --> 00:43:41,160
that is how kubernetes decides on the

1230
00:43:41,160 --> 00:43:43,800
user identity uh um because it doesn't

1231
00:43:43,800 --> 00:43:46,520
have its own database

1232
00:43:46,740 --> 00:43:48,300
okay

1233
00:43:48,300 --> 00:43:50,400
so

1234
00:43:50,400 --> 00:43:52,380
another thing is

1235
00:43:52,380 --> 00:43:54,119
um that there's a

1236
00:43:54,119 --> 00:43:57,000
I hope you can't see okay here we go so

1237
00:43:57,000 --> 00:43:59,099
there's a group within kubernetes called

1238
00:43:59,099 --> 00:44:01,740
system asterisk and they have by default

1239
00:44:01,740 --> 00:44:03,960
hard-coded plus the admin rights within

1240
00:44:03,960 --> 00:44:06,900
your cluster and this is like on by

1241
00:44:06,900 --> 00:44:08,339
default there

1242
00:44:08,339 --> 00:44:13,500
um and any group like any uh valid

1243
00:44:13,500 --> 00:44:15,780
um group of India both in your class tab

1244
00:44:15,780 --> 00:44:18,119
will have who's part of that group of

1245
00:44:18,119 --> 00:44:19,859
the sister Masters group will have by

1246
00:44:19,859 --> 00:44:20,880
default

1247
00:44:20,880 --> 00:44:22,319
um also

1248
00:44:22,319 --> 00:44:23,940
um cluster admin writes within your

1249
00:44:23,940 --> 00:44:25,560
cluster which is something that you

1250
00:44:25,560 --> 00:44:27,060
should be aware of because we don't want

1251
00:44:27,060 --> 00:44:28,560
to accidentally

1252
00:44:28,560 --> 00:44:31,800
um make a user part of this group this

1253
00:44:31,800 --> 00:44:33,180
is the master group because then it will

1254
00:44:33,180 --> 00:44:35,400
have cost admin rights right

1255
00:44:35,400 --> 00:44:39,000
here's the last demo

1256
00:44:39,000 --> 00:44:40,619
so if you remember from the previous

1257
00:44:40,619 --> 00:44:42,839
demonstration uh the user we are

1258
00:44:42,839 --> 00:44:44,280
currently connected to this cluster is

1259
00:44:44,280 --> 00:44:47,460
is uses the group system Masters which

1260
00:44:47,460 --> 00:44:49,380
as we just explained is a hard-coded

1261
00:44:49,380 --> 00:44:51,540
group which gets administrator rights to

1262
00:44:51,540 --> 00:44:52,980
the cluster

1263
00:44:52,980 --> 00:44:54,240
um and we can actually demonstrate

1264
00:44:54,240 --> 00:44:55,500
exactly how the fact it doesn't actually

1265
00:44:55,500 --> 00:44:57,839
use the rbac system uh with a couple of

1266
00:44:57,839 --> 00:45:00,119
simple kubernetes commands we're going

1267
00:45:00,119 --> 00:45:03,540
to run the command cubecattle off can I

1268
00:45:03,540 --> 00:45:05,819
list which lists the permissions that a

1269
00:45:05,819 --> 00:45:07,260
user's got

1270
00:45:07,260 --> 00:45:09,599
and you can see here at the top we have

1271
00:45:09,599 --> 00:45:11,819
startup star so we've got everything and

1272
00:45:11,819 --> 00:45:13,079
that's obviously via the r back well

1273
00:45:13,079 --> 00:45:15,060
that is via the r back system so save

1274
00:45:15,060 --> 00:45:16,500
for the sake of argument we then delete

1275
00:45:16,500 --> 00:45:18,119
this access we essentially delete the

1276
00:45:18,119 --> 00:45:19,680
rights we've got

1277
00:45:19,680 --> 00:45:21,000
um so what we can do here is we can see

1278
00:45:21,000 --> 00:45:22,020
Cube couple

1279
00:45:22,020 --> 00:45:25,980
delete cluster role binding

1280
00:45:25,980 --> 00:45:28,880
cluster admin

1281
00:45:29,099 --> 00:45:31,319
and it will remove that if we now run

1282
00:45:31,319 --> 00:45:33,960
the command again you cuttle off can I

1283
00:45:33,960 --> 00:45:36,359
list you'll see we no longer have that

1284
00:45:36,359 --> 00:45:38,880
star.star so in reality we shouldn't be

1285
00:45:38,880 --> 00:45:40,440
able to do anything these are just the

1286
00:45:40,440 --> 00:45:42,300
default rates that any authenticated

1287
00:45:42,300 --> 00:45:44,099
user gets we have no rights to any

1288
00:45:44,099 --> 00:45:46,319
resources So in theory we shouldn't be

1289
00:45:46,319 --> 00:45:47,400
able to do anything

1290
00:45:47,400 --> 00:45:50,040
however if I do coupon we'll get fuel

1291
00:45:50,040 --> 00:45:52,079
when I say in Cube system

1292
00:45:52,079 --> 00:45:53,760
we see we still have all the rights we

1293
00:45:53,760 --> 00:45:55,500
used to have even though the our back

1294
00:45:55,500 --> 00:45:57,180
system doesn't think we've got any

1295
00:45:57,180 --> 00:45:58,980
rights because we're a member of system

1296
00:45:58,980 --> 00:46:01,079
Masters we essentially bypass that

1297
00:46:01,079 --> 00:46:03,480
entire service and retain our access

1298
00:46:03,480 --> 00:46:04,920
which is why you need to be so very

1299
00:46:04,920 --> 00:46:07,200
careful with giving anyone membership of

1300
00:46:07,200 --> 00:46:09,740
that group

1301
00:46:11,099 --> 00:46:13,380
okay so the last thing that we want to

1302
00:46:13,380 --> 00:46:17,220
cover is the kubernetes ultimately

1303
00:46:17,220 --> 00:46:20,400
follows rest API structure but

1304
00:46:20,400 --> 00:46:23,460
um for parts of it let's say so here

1305
00:46:23,460 --> 00:46:25,500
um the pipes that are generally thought

1306
00:46:25,500 --> 00:46:27,720
of as rest API of like the different

1307
00:46:27,720 --> 00:46:29,220
changes that you can make to resources

1308
00:46:29,220 --> 00:46:31,859
however then we have been

1309
00:46:31,859 --> 00:46:34,200
um our back we have restless Forbes

1310
00:46:34,200 --> 00:46:36,599
that's not part of it

1311
00:46:36,599 --> 00:46:38,579
um no I'm just skimming over it because

1312
00:46:38,579 --> 00:46:40,140
I know I have like 10 minutes left and I

1313
00:46:40,140 --> 00:46:41,400
want to have maybe some time for

1314
00:46:41,400 --> 00:46:43,980
questions so

1315
00:46:43,980 --> 00:46:45,780
um here about kubernetes itself doesn't

1316
00:46:45,780 --> 00:46:47,220
have an understanding of like users

1317
00:46:47,220 --> 00:46:49,560
Arabic has

1318
00:46:49,560 --> 00:46:52,440
um a personal work on users

1319
00:46:52,440 --> 00:46:53,760
um in groups

1320
00:46:53,760 --> 00:46:56,460
now concluding of all of them everything

1321
00:46:56,460 --> 00:46:58,440
I just told you about in this

1322
00:46:58,440 --> 00:47:00,060
presentation

1323
00:47:00,060 --> 00:47:01,619
um containers and kubernetes are

1324
00:47:01,619 --> 00:47:03,660
becoming ubiquitous in modern I.T

1325
00:47:03,660 --> 00:47:05,579
environment it's there and sooner or

1326
00:47:05,579 --> 00:47:08,160
later if you're in your tea career you

1327
00:47:08,160 --> 00:47:09,420
probably will have to get started with

1328
00:47:09,420 --> 00:47:11,339
it if you haven't already

1329
00:47:11,339 --> 00:47:14,220
um they're complex systems with lots of

1330
00:47:14,220 --> 00:47:15,780
different layers A friend of mine

1331
00:47:15,780 --> 00:47:17,220
constantly tells me you either want to

1332
00:47:17,220 --> 00:47:19,020
be a Linux expert or you want to be a

1333
00:47:19,020 --> 00:47:21,780
kubernetes expert in order to deal with

1334
00:47:21,780 --> 00:47:23,280
kubernetes

1335
00:47:23,280 --> 00:47:27,300
um I'm still working on both so they're

1336
00:47:27,300 --> 00:47:29,579
obviously because it's such a it's such

1337
00:47:29,579 --> 00:47:31,800
a complex system there are plenty plenty

1338
00:47:31,800 --> 00:47:34,040
of possibilities for vulnerabilities for

1339
00:47:34,040 --> 00:47:36,720
misconfigurations to make things more

1340
00:47:36,720 --> 00:47:39,060
difficult now there's lots of like also

1341
00:47:39,060 --> 00:47:40,560
for people are getting started with

1342
00:47:40,560 --> 00:47:42,420
kubernetes something that may help me a

1343
00:47:42,420 --> 00:47:44,760
lot is like using this configuration and

1344
00:47:44,760 --> 00:47:47,280
security scanners uh to just tell me

1345
00:47:47,280 --> 00:47:49,260
like hey maybe you want to configure

1346
00:47:49,260 --> 00:47:50,700
your resources differently because

1347
00:47:50,700 --> 00:47:52,500
you're exposing yourself to unnecessary

1348
00:47:52,500 --> 00:47:54,660
security risks things like that you

1349
00:47:54,660 --> 00:47:55,680
don't know when you're just getting

1350
00:47:55,680 --> 00:47:58,020
started but misconfiguration scanners

1351
00:47:58,020 --> 00:47:59,940
won't tell you that

1352
00:47:59,940 --> 00:48:01,380
um and then the last thing to remember

1353
00:48:01,380 --> 00:48:03,180
is if you don't understand a component

1354
00:48:03,180 --> 00:48:05,460
within kubernetes look at how this

1355
00:48:05,460 --> 00:48:07,200
similar component works with Ventures

1356
00:48:07,200 --> 00:48:08,460
within Linux

1357
00:48:08,460 --> 00:48:10,800
um since kubernetes is re-implementing a

1358
00:48:10,800 --> 00:48:12,660
lot of Linux Primitives

1359
00:48:12,660 --> 00:48:15,119
and that's it I think I have still some

1360
00:48:15,119 --> 00:48:17,520
minutes for questions however since you

1361
00:48:17,520 --> 00:48:19,020
have to bear in mind that I just gave

1362
00:48:19,020 --> 00:48:20,640
this presentation right I might not be

1363
00:48:20,640 --> 00:48:22,680
able to answer your question

1364
00:48:22,680 --> 00:48:24,660
um so the best thing is if you have more

1365
00:48:24,660 --> 00:48:26,339
complex questions reach out to Rory

1366
00:48:26,339 --> 00:48:28,380
here's a Twitter handle also if you

1367
00:48:28,380 --> 00:48:30,000
don't have checked that he's on LinkedIn

1368
00:48:30,000 --> 00:48:31,500
so you can find them there at Rory

1369
00:48:31,500 --> 00:48:33,900
McCune and then there's my Twitter as

1370
00:48:33,900 --> 00:48:35,880
well if you like this presentation we

1371
00:48:35,880 --> 00:48:38,160
want to see more of my presentations for

1372
00:48:38,160 --> 00:48:41,339
example okay thank you so much

1373
00:48:41,339 --> 00:48:43,500
awesome I know you that was an amazing

1374
00:48:43,500 --> 00:48:45,540
presentation so would you like to hear

1375
00:48:45,540 --> 00:48:47,160
the two questions that you've received

1376
00:48:47,160 --> 00:48:48,780
in the Q a

1377
00:48:48,780 --> 00:48:52,200
I can see let's see if I can um and

1378
00:48:52,200 --> 00:48:54,180
please put them on Twitter or send them

1379
00:48:54,180 --> 00:48:55,140
to us

1380
00:48:55,140 --> 00:48:57,180
um well I'm gonna look I'm gonna go on

1381
00:48:57,180 --> 00:48:58,740
the platform afterwards and I'm sure

1382
00:48:58,740 --> 00:49:00,060
like I can find all the questions and

1383
00:49:00,060 --> 00:49:01,260
I'm gonna make sure if I can't answer

1384
00:49:01,260 --> 00:49:03,000
them I'm gonna

1385
00:49:03,000 --> 00:49:05,880
um post like anonymously the answers uh

1386
00:49:05,880 --> 00:49:07,500
before we so we're gonna make sure we

1387
00:49:07,500 --> 00:49:09,839
answer them but yeah other questions

1388
00:49:09,839 --> 00:49:11,700
there are indeed you have two and

1389
00:49:11,700 --> 00:49:13,500
they're good ones so the first one is

1390
00:49:13,500 --> 00:49:15,359
why I still use Docker when it's

1391
00:49:15,359 --> 00:49:18,900
obviously in kubernetes 1.24

1392
00:49:18,900 --> 00:49:21,000
so the thing is huh

1393
00:49:21,000 --> 00:49:23,400
um so the thing is um that kubernetes

1394
00:49:23,400 --> 00:49:24,660
doesn't like the project make the

1395
00:49:24,660 --> 00:49:26,700
decision to replace a Docker Engine with

1396
00:49:26,700 --> 00:49:28,560
container d as it's as its container

1397
00:49:28,560 --> 00:49:31,800
runtime now Docker is not just it's not

1398
00:49:31,800 --> 00:49:33,960
just the container runtime it's awesome

1399
00:49:33,960 --> 00:49:36,480
like you have like a desktop to view

1400
00:49:36,480 --> 00:49:38,880
your containers and to build containers

1401
00:49:38,880 --> 00:49:40,440
to manage containers

1402
00:49:40,440 --> 00:49:41,760
um you have to Docker up right like

1403
00:49:41,760 --> 00:49:43,140
there are lots of different components

1404
00:49:43,140 --> 00:49:44,579
when you're talking about Docker we

1405
00:49:44,579 --> 00:49:46,740
actually should really specify what are

1406
00:49:46,740 --> 00:49:49,319
we talking about right like Docker is

1407
00:49:49,319 --> 00:49:52,200
still like from my perspective like to

1408
00:49:52,200 --> 00:49:54,720
um build containers and and just test

1409
00:49:54,720 --> 00:49:57,599
them with our kubernetes it's a it's it

1410
00:49:57,599 --> 00:49:59,700
has a nice ux it's user friendly it's

1411
00:49:59,700 --> 00:50:01,500
beginner friendly and that's personally

1412
00:50:01,500 --> 00:50:03,780
what why I would use

1413
00:50:03,780 --> 00:50:06,300
um use Docker

1414
00:50:06,300 --> 00:50:08,400
um to build my containers now you can

1415
00:50:08,400 --> 00:50:10,560
use other tools as well

1416
00:50:10,560 --> 00:50:12,720
um to build containers there's some by

1417
00:50:12,720 --> 00:50:15,000
for example Red Hat has one I think with

1418
00:50:15,000 --> 00:50:17,040
Rancher you can do it as well so there

1419
00:50:17,040 --> 00:50:18,300
are different tools with which you can

1420
00:50:18,300 --> 00:50:19,500
also

1421
00:50:19,500 --> 00:50:21,480
um that offer similar functionality But

1422
00:50:21,480 --> 00:50:23,400
ultimately I would view it as like the

1423
00:50:23,400 --> 00:50:26,700
tools that you use to manage and build

1424
00:50:26,700 --> 00:50:28,740
like or like not manage to build your

1425
00:50:28,740 --> 00:50:30,900
containers and to test them out

1426
00:50:30,900 --> 00:50:32,579
um are kind of separate then like

1427
00:50:32,579 --> 00:50:34,079
they're more at the beginning of your

1428
00:50:34,079 --> 00:50:36,240
development and testing workflow versus

1429
00:50:36,240 --> 00:50:38,940
once you have the contain an image you

1430
00:50:38,940 --> 00:50:40,140
can actually you can store it on any

1431
00:50:40,140 --> 00:50:41,460
container registry you don't have to

1432
00:50:41,460 --> 00:50:43,260
start on a Docker Hub and that's kind of

1433
00:50:43,260 --> 00:50:45,359
then when you will leave kind of the

1434
00:50:45,359 --> 00:50:48,839
darker specific ecosystem and where it

1435
00:50:48,839 --> 00:50:50,520
doesn't really like like for example for

1436
00:50:50,520 --> 00:50:52,200
me it really like I haven't really seen

1437
00:50:52,200 --> 00:50:54,420
a difference using different kubernetes

1438
00:50:54,420 --> 00:50:56,099
versions between the different runtimes

1439
00:50:56,099 --> 00:50:59,160
and my containers like it just like

1440
00:50:59,160 --> 00:51:01,140
obviously for specifically like for the

1441
00:51:01,140 --> 00:51:02,579
details you want to pay attention to

1442
00:51:02,579 --> 00:51:04,680
that but ultimately

1443
00:51:04,680 --> 00:51:06,420
um if you have the container it doesn't

1444
00:51:06,420 --> 00:51:08,520
so much matter to you

1445
00:51:08,520 --> 00:51:10,980
um in a lot of ways like the underlying

1446
00:51:10,980 --> 00:51:13,260
runtime of in your cluster and I mean

1447
00:51:13,260 --> 00:51:14,640
that really depends on your environment

1448
00:51:14,640 --> 00:51:16,559
again but we have to be when we're

1449
00:51:16,559 --> 00:51:17,880
talking about DACA we have to be

1450
00:51:17,880 --> 00:51:20,099
specific what part of actually talking

1451
00:51:20,099 --> 00:51:22,200
about so when we said here in this

1452
00:51:22,200 --> 00:51:23,880
presentation Docker we referred to

1453
00:51:23,880 --> 00:51:25,559
actually the containers like it applies

1454
00:51:25,559 --> 00:51:27,059
to all containers not just Docker

1455
00:51:27,059 --> 00:51:28,319
containers

1456
00:51:28,319 --> 00:51:29,339
yeah

1457
00:51:29,339 --> 00:51:30,780
a good answer the question if not please

1458
00:51:30,780 --> 00:51:32,339
we chat

1459
00:51:32,339 --> 00:51:35,700
one down one's a go so we go on here

1460
00:51:35,700 --> 00:51:37,920
from Andrew as well if in the demo we

1461
00:51:37,920 --> 00:51:39,839
can connect to a kubernetes cluster

1462
00:51:39,839 --> 00:51:42,000
remotely does that mean we should be

1463
00:51:42,000 --> 00:51:45,800
keeping clusters behind the DMZ

1464
00:51:46,319 --> 00:51:47,760
um so

1465
00:51:47,760 --> 00:51:49,920
yes well I would

1466
00:51:49,920 --> 00:51:52,020
um so we had like um when I was working

1467
00:51:52,020 --> 00:51:54,300
inside reliability engineer we I

1468
00:51:54,300 --> 00:51:57,180
obviously had to access not only our

1469
00:51:57,180 --> 00:51:59,819
um Regional clusters from my local work

1470
00:51:59,819 --> 00:52:01,260
machine right

1471
00:52:01,260 --> 00:52:02,579
um because it didn't have access to

1472
00:52:02,579 --> 00:52:04,220
those data centers

1473
00:52:04,220 --> 00:52:06,420
for instance

1474
00:52:06,420 --> 00:52:10,319
um and we used so we used a VPN but you

1475
00:52:10,319 --> 00:52:13,619
had to be on to ultimately access

1476
00:52:13,619 --> 00:52:15,119
um the cube config and access the

1477
00:52:15,119 --> 00:52:16,859
classes so you want to have additional

1478
00:52:16,859 --> 00:52:19,079
security measures in place

1479
00:52:19,079 --> 00:52:21,480
um that can prevent anybody who has the

1480
00:52:21,480 --> 00:52:23,640
cubeconfect to just access the cluster

1481
00:52:23,640 --> 00:52:26,359
itself as well

