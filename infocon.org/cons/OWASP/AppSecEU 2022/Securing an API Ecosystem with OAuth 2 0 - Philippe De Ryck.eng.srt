1
00:00:04,019 --> 00:00:07,440
we're alive and we are doing today this

2
00:00:07,440 --> 00:00:10,320
wonderful session of course presented by

3
00:00:10,320 --> 00:00:13,860
Dr Philip Turek he is the pragmatic web

4
00:00:13,860 --> 00:00:16,560
security this is how he describes

5
00:00:16,560 --> 00:00:18,980
himself and of course a web security

6
00:00:18,980 --> 00:00:22,560
expert so today we are on the defender

7
00:00:22,560 --> 00:00:24,539
track and we are going to do a

8
00:00:24,539 --> 00:00:25,820
presentation

9
00:00:25,820 --> 00:00:30,240
presented by him on securing apis in an

10
00:00:30,240 --> 00:00:33,300
ecosystem with zero Authority version

11
00:00:33,300 --> 00:00:37,140
2.0 so I will pass I will pass the turn

12
00:00:37,140 --> 00:00:39,600
to Dr Philip of course for everyone who

13
00:00:39,600 --> 00:00:41,399
wants to pause the question of course in

14
00:00:41,399 --> 00:00:43,500
the Q a session they might do that

15
00:00:43,500 --> 00:00:45,780
through the Hoover platform we'll be

16
00:00:45,780 --> 00:00:48,780
happy to answer your questions and I

17
00:00:48,780 --> 00:00:50,460
will be happy to pass my word to Philip

18
00:00:50,460 --> 00:00:52,500
Philip I wish you all the best and good

19
00:00:52,500 --> 00:00:54,239
luck with her presentation

20
00:00:54,239 --> 00:00:57,360
all right thank you very much Angela and

21
00:00:57,360 --> 00:00:59,340
she'll be back afterwards with some

22
00:00:59,340 --> 00:01:00,360
questions so if you have any questions

23
00:01:00,360 --> 00:01:01,860
throughout the presentation just drop

24
00:01:01,860 --> 00:01:04,019
them in the the app and they'll appear

25
00:01:04,019 --> 00:01:06,119
in the list and probably be asked at the

26
00:01:06,119 --> 00:01:07,920
end so you can Grill me towards the end

27
00:01:07,920 --> 00:01:10,500
of this presentation all right welcome

28
00:01:10,500 --> 00:01:12,060
to the defender track we're going to

29
00:01:12,060 --> 00:01:13,799
talk about how to build more secure

30
00:01:13,799 --> 00:01:15,180
applications and I want to talk about

31
00:01:15,180 --> 00:01:17,640
how to secure your apis with oauth and

32
00:01:17,640 --> 00:01:20,220
I'm going to take you on a journey on

33
00:01:20,220 --> 00:01:21,600
I'm going to start with things we're not

34
00:01:21,600 --> 00:01:22,979
going to talk about just to set the

35
00:01:22,979 --> 00:01:24,780
picture to make things straight and then

36
00:01:24,780 --> 00:01:26,400
we're gonna walk through a whole bunch

37
00:01:26,400 --> 00:01:28,380
of takeaways on what to do which

38
00:01:28,380 --> 00:01:30,479
techniques to use which parts to use and

39
00:01:30,479 --> 00:01:33,360
how to use them in practice all right

40
00:01:33,360 --> 00:01:35,400
let's Zephyr I didn't and let me start

41
00:01:35,400 --> 00:01:37,320
by saying what we're not gonna talk

42
00:01:37,320 --> 00:01:39,479
about so what you have in in this whole

43
00:01:39,479 --> 00:01:41,159
ecosystem is a lot of complexity because

44
00:01:41,159 --> 00:01:43,200
oat is has been around for a while it's

45
00:01:43,200 --> 00:01:45,180
about 10 years uh this year so it's

46
00:01:45,180 --> 00:01:46,920
about 10 years old which is quite a long

47
00:01:46,920 --> 00:01:48,840
time for technology and it has evolved

48
00:01:48,840 --> 00:01:51,840
quite a bit and on top of Oats well

49
00:01:51,840 --> 00:01:53,280
people started using a watch for all

50
00:01:53,280 --> 00:01:55,439
kinds of well not weird things but all

51
00:01:55,439 --> 00:01:56,820
kind of things it wasn't designed for

52
00:01:56,820 --> 00:01:59,640
such as user authentication and a while

53
00:01:59,640 --> 00:02:01,799
ago like also a long time ago I don't

54
00:02:01,799 --> 00:02:03,659
know the exact date for this one but a

55
00:02:03,659 --> 00:02:05,219
while ago um

56
00:02:05,219 --> 00:02:07,500
the people building these designers and

57
00:02:07,500 --> 00:02:08,580
specifications said like you know what

58
00:02:08,580 --> 00:02:10,679
let's let's build people need this so

59
00:02:10,679 --> 00:02:12,120
let's build an Authentication Protocol

60
00:02:12,120 --> 00:02:14,220
on top of oauth and that's open ID

61
00:02:14,220 --> 00:02:16,739
connect and in open ID connect a client

62
00:02:16,739 --> 00:02:19,319
application can basically go to an

63
00:02:19,319 --> 00:02:20,640
authorization server to an identity

64
00:02:20,640 --> 00:02:22,860
provider and ask information about who

65
00:02:22,860 --> 00:02:24,420
the user is like can you authenticate

66
00:02:24,420 --> 00:02:25,680
this user for me and it will return

67
00:02:25,680 --> 00:02:28,020
information about the authenticated user

68
00:02:28,020 --> 00:02:30,060
whenever you use something like sign in

69
00:02:30,060 --> 00:02:32,400
with Google or sign in with apple or one

70
00:02:32,400 --> 00:02:34,080
of these things or your Enterprise login

71
00:02:34,080 --> 00:02:36,060
is very likely open ID connect as well

72
00:02:36,060 --> 00:02:38,340
and open educonnect has nothing to do

73
00:02:38,340 --> 00:02:40,800
with API security so now that we know

74
00:02:40,800 --> 00:02:42,780
what oidc is it uses oauth under the

75
00:02:42,780 --> 00:02:44,519
hood but it doesn't do anything for API

76
00:02:44,519 --> 00:02:47,040
security it's only for offloading user

77
00:02:47,040 --> 00:02:48,959
authentication that's what it does it's

78
00:02:48,959 --> 00:02:51,000
a whole different use case just using a

79
00:02:51,000 --> 00:02:53,160
similar underlying technology as you use

80
00:02:53,160 --> 00:02:55,680
for accessing apis all right with that

81
00:02:55,680 --> 00:02:58,140
out of the way let's talk about oauth

82
00:02:58,140 --> 00:02:59,819
actually oauth is what we really want to

83
00:02:59,819 --> 00:03:02,220
talk about and where we want to go to

84
00:03:02,220 --> 00:03:04,980
and oauth is about accessing apis so a

85
00:03:04,980 --> 00:03:06,540
client an application

86
00:03:06,540 --> 00:03:08,640
can be a back-end web app a third-party

87
00:03:08,640 --> 00:03:10,260
backend web app can be a mobile app can

88
00:03:10,260 --> 00:03:12,120
be a front-end web application or even

89
00:03:12,120 --> 00:03:13,980
an app that doesn't involve users at all

90
00:03:13,980 --> 00:03:16,500
can go to that authorization server and

91
00:03:16,500 --> 00:03:18,060
basically ask like hey I would like to

92
00:03:18,060 --> 00:03:20,819
access this API on behalf of the user or

93
00:03:20,819 --> 00:03:22,680
as a client application we'll talk about

94
00:03:22,680 --> 00:03:24,780
that later can you make that happen can

95
00:03:24,780 --> 00:03:26,879
you give me something to actually go to

96
00:03:26,879 --> 00:03:28,620
the API and be like hey I'm this client

97
00:03:28,620 --> 00:03:30,780
I would like to handle this or send this

98
00:03:30,780 --> 00:03:32,760
request an API can process that and

99
00:03:32,760 --> 00:03:34,680
that's all out that's a lot that's an

100
00:03:34,680 --> 00:03:36,420
all-out flow is going to run which

101
00:03:36,420 --> 00:03:39,599
results in a token an access token and

102
00:03:39,599 --> 00:03:41,700
that access token allows those clients

103
00:03:41,700 --> 00:03:43,440
to access apis

104
00:03:43,440 --> 00:03:45,360
sometimes on behalf of users sometimes

105
00:03:45,360 --> 00:03:47,340
just as a client that's different use

106
00:03:47,340 --> 00:03:49,560
cases but it's basically

107
00:03:49,560 --> 00:03:51,780
that access token gives the client the

108
00:03:51,780 --> 00:03:53,640
authority to contact the API to access

109
00:03:53,640 --> 00:03:55,980
the API and the API will use that access

110
00:03:55,980 --> 00:03:57,599
token to make authorization decisions

111
00:03:57,599 --> 00:03:59,819
and that again involves that's the third

112
00:03:59,819 --> 00:04:01,319
leg of the triangle here that

113
00:04:01,319 --> 00:04:03,540
authorization decision at the API side

114
00:04:03,540 --> 00:04:05,400
that involves

115
00:04:05,400 --> 00:04:08,340
interaction either explicit or implicit

116
00:04:08,340 --> 00:04:10,620
with the authorization server API will

117
00:04:10,620 --> 00:04:12,060
either have to ask help from the

118
00:04:12,060 --> 00:04:13,379
authorization server can you help me

119
00:04:13,379 --> 00:04:15,900
figure out what this means or the API

120
00:04:15,900 --> 00:04:17,639
can just use metadata from the

121
00:04:17,639 --> 00:04:20,160
authorization server to validate an

122
00:04:20,160 --> 00:04:22,139
access token on their own and I'm going

123
00:04:22,139 --> 00:04:24,240
to talk about that later as well

124
00:04:24,240 --> 00:04:26,940
so that's the picture already see just

125
00:04:26,940 --> 00:04:29,340
offloading user authentication about the

126
00:04:29,340 --> 00:04:31,259
complex part of oild is mostly getting

127
00:04:31,259 --> 00:04:33,000
that access token so the left part of

128
00:04:33,000 --> 00:04:34,500
the triangle and then we have these

129
00:04:34,500 --> 00:04:36,060
other two lags in the Triangle that's

130
00:04:36,060 --> 00:04:37,800
also allowed a little bit less

131
00:04:37,800 --> 00:04:40,020
complicated but still very important to

132
00:04:40,020 --> 00:04:41,580
get right otherwise you can imagine

133
00:04:41,580 --> 00:04:43,500
you'll have massive authorization issues

134
00:04:43,500 --> 00:04:45,960
in your apis all right that's the

135
00:04:45,960 --> 00:04:48,060
picture that I want to talk about

136
00:04:48,060 --> 00:04:49,919
why on Earth would you want to use oauth

137
00:04:49,919 --> 00:04:51,720
because when it's so complex like why

138
00:04:51,720 --> 00:04:53,280
would I want to use it if it makes my

139
00:04:53,280 --> 00:04:56,040
life harder well it actually has a very

140
00:04:56,040 --> 00:04:57,780
nice feature and you can see that in

141
00:04:57,780 --> 00:04:59,040
this image that's why I kind of like

142
00:04:59,040 --> 00:05:00,600
this image even though I made it myself

143
00:05:00,600 --> 00:05:03,540
I still like it quite much because it

144
00:05:03,540 --> 00:05:07,380
shows you that the clients and the apis

145
00:05:07,380 --> 00:05:09,180
are sort of decoupled from all of the

146
00:05:09,180 --> 00:05:11,040
dirty details of having to interact the

147
00:05:11,040 --> 00:05:12,660
client just uses an access token to

148
00:05:12,660 --> 00:05:14,580
conduct the API and an API doesn't

149
00:05:14,580 --> 00:05:16,020
really have to worry about how to

150
00:05:16,020 --> 00:05:18,060
authenticate a specific client or how to

151
00:05:18,060 --> 00:05:20,040
authenticate a specific user or how to

152
00:05:20,040 --> 00:05:21,960
handle these details that's what the

153
00:05:21,960 --> 00:05:23,280
authorization server does the

154
00:05:23,280 --> 00:05:24,660
authorization server does all of the

155
00:05:24,660 --> 00:05:26,460
heavy lifting here and basically gives

156
00:05:26,460 --> 00:05:28,440
an access token representing that

157
00:05:28,440 --> 00:05:30,720
metadata to the client which sends it to

158
00:05:30,720 --> 00:05:32,759
the API and that's the abstraction that

159
00:05:32,759 --> 00:05:34,740
oauth offers and that allows you to

160
00:05:34,740 --> 00:05:37,560
build like flexible architectures uh

161
00:05:37,560 --> 00:05:39,120
decoupled architecture scalable

162
00:05:39,120 --> 00:05:41,580
architectures and so on and so on

163
00:05:41,580 --> 00:05:43,199
all right

164
00:05:43,199 --> 00:05:46,080
before we dive into more details let

165
00:05:46,080 --> 00:05:47,460
maybe let's

166
00:05:47,460 --> 00:05:49,440
let me make this a bit more concrete

167
00:05:49,440 --> 00:05:51,900
like how does this translate to real

168
00:05:51,900 --> 00:05:53,820
world applications and I know we all

169
00:05:53,820 --> 00:05:55,320
have different backgrounds so I'm going

170
00:05:55,320 --> 00:05:56,639
to use an example and everybody knows

171
00:05:56,639 --> 00:05:57,900
even if you don't use it we're going to

172
00:05:57,900 --> 00:05:59,759
talk about Twitter this is totally

173
00:05:59,759 --> 00:06:00,900
fictional by the way because Twitter

174
00:06:00,900 --> 00:06:04,500
doesn't use a lot at 2.0 but whatever I

175
00:06:04,500 --> 00:06:06,720
just imagine that they do doesn't matter

176
00:06:06,720 --> 00:06:07,560
here

177
00:06:07,560 --> 00:06:09,720
the authorization server that glue

178
00:06:09,720 --> 00:06:11,160
holding everything together here is

179
00:06:11,160 --> 00:06:13,139
Twitter Twitter offers a developer

180
00:06:13,139 --> 00:06:15,539
platform they use about one and some

181
00:06:15,539 --> 00:06:17,340
parts of or2 it's a bit weird but

182
00:06:17,340 --> 00:06:19,139
Twitter offers a developer platform

183
00:06:19,139 --> 00:06:21,060
that's what matters where you as a

184
00:06:21,060 --> 00:06:22,620
developer can you can build a client and

185
00:06:22,620 --> 00:06:24,300
then register it with Twitter so you can

186
00:06:24,300 --> 00:06:25,860
tell Twitter like hey here's a client

187
00:06:25,860 --> 00:06:27,840
application I'm going to register it set

188
00:06:27,840 --> 00:06:29,940
it up so it can later come to you ask

189
00:06:29,940 --> 00:06:32,340
for an access token and so on in this

190
00:06:32,340 --> 00:06:34,680
ecosystem the apis are Twitter apis

191
00:06:34,680 --> 00:06:36,780
we're basically building a client that

192
00:06:36,780 --> 00:06:38,880
would like to access a Twitter API maybe

193
00:06:38,880 --> 00:06:41,580
on behalf of a user maybe on behalf as a

194
00:06:41,580 --> 00:06:43,560
client as a client directly

195
00:06:43,560 --> 00:06:45,360
so what are the client applications well

196
00:06:45,360 --> 00:06:48,360
whatever you want basically one type of

197
00:06:48,360 --> 00:06:49,620
client is definitely going to be

198
00:06:49,620 --> 00:06:51,360
Twitter's front end Twitter's own

199
00:06:51,360 --> 00:06:54,240
front-end applications are a lot client

200
00:06:54,240 --> 00:06:55,500
applications they coded that

201
00:06:55,500 --> 00:06:56,940
authorizations are like hey I'm Twitter

202
00:06:56,940 --> 00:06:58,919
I would like to access Twitter and well

203
00:06:58,919 --> 00:06:59,940
you can kind of guess what's going to

204
00:06:59,940 --> 00:07:01,199
happen the authorization service like oh

205
00:07:01,199 --> 00:07:03,120
yeah of course you can do that and the

206
00:07:03,120 --> 00:07:05,520
client can access the apis on behalf of

207
00:07:05,520 --> 00:07:08,160
a user because if I log into the client

208
00:07:08,160 --> 00:07:09,960
I give that client permission to access

209
00:07:09,960 --> 00:07:12,000
to those apis on my behalf so Twitter

210
00:07:12,000 --> 00:07:14,520
can do Twitter things and make tweets

211
00:07:14,520 --> 00:07:17,580
happen basically a lot of Twitter tweets

212
00:07:17,580 --> 00:07:19,139
going on here

213
00:07:19,139 --> 00:07:20,759
what other clients do you have well

214
00:07:20,759 --> 00:07:22,800
there's undoubtedly mobile apps Twitter

215
00:07:22,800 --> 00:07:24,120
has their own mobile apps I'm going to

216
00:07:24,120 --> 00:07:26,099
add another bird on the slide we have

217
00:07:26,099 --> 00:07:28,259
enough perks now but mobile apps can be

218
00:07:28,259 --> 00:07:30,360
clients as well or you can have Services

219
00:07:30,360 --> 00:07:32,940
as a client as well for example you can

220
00:07:32,940 --> 00:07:35,340
build a standalone application that

221
00:07:35,340 --> 00:07:37,020
that's not used by a user but just

222
00:07:37,020 --> 00:07:38,880
collects statistics every day it could

223
00:07:38,880 --> 00:07:40,620
go to Twitter and be like give me all

224
00:07:40,620 --> 00:07:43,400
tweets from today with the hashtag

225
00:07:43,400 --> 00:07:46,440
Global virtual appsec that would be one

226
00:07:46,440 --> 00:07:48,120
way of using a client that's not on

227
00:07:48,120 --> 00:07:49,560
behalf of the user you're not accessing

228
00:07:49,560 --> 00:07:51,060
a user-specific timeline you're just

229
00:07:51,060 --> 00:07:53,039
sending a request to Twitter directly as

230
00:07:53,039 --> 00:07:55,020
a client application and you still want

231
00:07:55,020 --> 00:07:56,160
to have that access token because

232
00:07:56,160 --> 00:07:58,380
Twitter's apis are not open you still

233
00:07:58,380 --> 00:08:00,180
need to be a registered client before

234
00:08:00,180 --> 00:08:02,340
you could contact the apis

235
00:08:02,340 --> 00:08:06,360
all right third scenario that back-end

236
00:08:06,360 --> 00:08:09,840
clients back-end web applications can be

237
00:08:09,840 --> 00:08:12,419
oauth client applications which is kind

238
00:08:12,419 --> 00:08:14,580
of a weird terminology but once you get

239
00:08:14,580 --> 00:08:15,960
used to it it actually makes perfect

240
00:08:15,960 --> 00:08:17,940
sense so what would be a good scenario

241
00:08:17,940 --> 00:08:20,340
here well buffer I'm using buffer uh you

242
00:08:20,340 --> 00:08:21,960
may have seen that I I tweeted out the

243
00:08:21,960 --> 00:08:23,819
link to the slides on Twitter if you are

244
00:08:23,819 --> 00:08:25,199
on Twitter and you may have seen that

245
00:08:25,199 --> 00:08:27,180
it's not like I was tweeting live right

246
00:08:27,180 --> 00:08:29,460
before the session I actually like to be

247
00:08:29,460 --> 00:08:31,680
calm and relaxed before I start speaking

248
00:08:31,680 --> 00:08:33,659
so what I use is I use buffer a social

249
00:08:33,659 --> 00:08:35,880
media scheduling tool so I basically I

250
00:08:35,880 --> 00:08:37,440
have a buffer account and I have linked

251
00:08:37,440 --> 00:08:40,140
buffer to Twitter that's the the left

252
00:08:40,140 --> 00:08:42,779
top Arrow buffer has access to Twitter

253
00:08:42,779 --> 00:08:45,060
on my behalf and that's a backend web

254
00:08:45,060 --> 00:08:47,160
application so the buffer server knew

255
00:08:47,160 --> 00:08:49,740
that that 1055 local time they had to

256
00:08:49,740 --> 00:08:51,660
send out a tweet so they contacted

257
00:08:51,660 --> 00:08:53,279
Twitter's API and we're like hey can you

258
00:08:53,279 --> 00:08:55,560
post this tweet on Philips timeline and

259
00:08:55,560 --> 00:08:57,180
here's an access token to prove that I

260
00:08:57,180 --> 00:08:59,519
have the authority to contact uh to

261
00:08:59,519 --> 00:09:01,140
handle that operation on behalf of

262
00:09:01,140 --> 00:09:02,160
Philip

263
00:09:02,160 --> 00:09:04,920
then a final part of this picture

264
00:09:04,920 --> 00:09:06,720
yes I can talk a long time about a

265
00:09:06,720 --> 00:09:08,519
single slide a final part of this

266
00:09:08,519 --> 00:09:11,279
picture is that you also have API to API

267
00:09:11,279 --> 00:09:13,320
communication so let's say that there's

268
00:09:13,320 --> 00:09:15,540
internal communication between apis not

269
00:09:15,540 --> 00:09:17,399
necessarily on behalf of a user but just

270
00:09:17,399 --> 00:09:19,620
in their service communication those

271
00:09:19,620 --> 00:09:22,740
apis can become clients and consumers of

272
00:09:22,740 --> 00:09:24,779
access tokens as well so API to API

273
00:09:24,779 --> 00:09:27,120
communication is often implemented with

274
00:09:27,120 --> 00:09:30,540
a lot as well with access tokens

275
00:09:30,540 --> 00:09:31,920
all right that brings me to the first

276
00:09:31,920 --> 00:09:33,660
takeaway the first takeaway I'm going to

277
00:09:33,660 --> 00:09:35,160
have a whole bunch of these takeaway

278
00:09:35,160 --> 00:09:37,320
slides here the first takeaway is use

279
00:09:37,320 --> 00:09:40,140
oauth and open ID connect as intended

280
00:09:40,140 --> 00:09:42,240
so sometimes people get confused like

281
00:09:42,240 --> 00:09:44,100
what do I use for what open ID connect

282
00:09:44,100 --> 00:09:46,440
is only for user authentication if

283
00:09:46,440 --> 00:09:47,880
you're not dealing with users if you

284
00:09:47,880 --> 00:09:49,620
have a client a machine to machine

285
00:09:49,620 --> 00:09:52,019
access scenario oidc is meaningless it

286
00:09:52,019 --> 00:09:54,180
doesn't make any sense to use oidc so

287
00:09:54,180 --> 00:09:57,360
IDC is about user authentication oauth

288
00:09:57,360 --> 00:09:59,760
on the other hand is about enabling a

289
00:09:59,760 --> 00:10:02,040
uniform authorization framework so you

290
00:10:02,040 --> 00:10:04,019
can access protected resources that's

291
00:10:04,019 --> 00:10:05,760
the official terminology but in practice

292
00:10:05,760 --> 00:10:08,399
it's likely apis modern systems that

293
00:10:08,399 --> 00:10:11,640
protective resource is an API so oad is

294
00:10:11,640 --> 00:10:13,800
about getting that access token so you

295
00:10:13,800 --> 00:10:15,899
can access apis or YDC is about getting

296
00:10:15,899 --> 00:10:18,480
information about the user

297
00:10:18,480 --> 00:10:20,459
all right that was the introduction to

298
00:10:20,459 --> 00:10:22,080
my session let me introduce myself I'm

299
00:10:22,080 --> 00:10:24,420
Dr Philip Drake thank you Angela for the

300
00:10:24,420 --> 00:10:26,220
host for getting my name right that's

301
00:10:26,220 --> 00:10:27,899
not often that that happens so that's

302
00:10:27,899 --> 00:10:30,000
absolutely awesome and I run a company

303
00:10:30,000 --> 00:10:32,040
called pragmatic web security and true

304
00:10:32,040 --> 00:10:33,540
pragmatic web security I basically

305
00:10:33,540 --> 00:10:36,180
deliver in-depth security training to

306
00:10:36,180 --> 00:10:37,920
developers so I actually just finished

307
00:10:37,920 --> 00:10:40,260
the two-day workshop in in Sweden and I

308
00:10:40,260 --> 00:10:42,000
flew in this morning right before my

309
00:10:42,000 --> 00:10:44,700
talk I'm back home now so I I made it on

310
00:10:44,700 --> 00:10:46,260
time so that's a good thing especially

311
00:10:46,260 --> 00:10:48,240
with airports these days so I do online

312
00:10:48,240 --> 00:10:50,700
training uh online on-site training

313
00:10:50,700 --> 00:10:53,459
online training and also help companies

314
00:10:53,459 --> 00:10:55,980
figure out how to approach security best

315
00:10:55,980 --> 00:10:57,720
practices and designing their

316
00:10:57,720 --> 00:11:00,240
applications in a secure array all right

317
00:11:00,240 --> 00:11:02,399
what else I'm a Google developer expert

318
00:11:02,399 --> 00:11:04,620
and our xero ambassador these are like a

319
00:11:04,620 --> 00:11:06,540
community outreach programs of these

320
00:11:06,540 --> 00:11:08,160
companies so they recognize the efforts

321
00:11:08,160 --> 00:11:09,899
I'm doing with giving presentations like

322
00:11:09,899 --> 00:11:12,180
this one and so on and so on so I'm not

323
00:11:12,180 --> 00:11:14,640
employed by Google or Azure I'm just uh

324
00:11:14,640 --> 00:11:16,440
I'm part of their deferral programs and

325
00:11:16,440 --> 00:11:18,360
so on and so on and I organize a course

326
00:11:18,360 --> 00:11:20,279
in Belgium called SEC updef which

327
00:11:20,279 --> 00:11:22,200
actually starts next week Monday so in

328
00:11:22,200 --> 00:11:24,120
three days so I'm pretty busy with that

329
00:11:24,120 --> 00:11:26,339
as well and that's a week-long course on

330
00:11:26,339 --> 00:11:28,380
appsack with speakers from all over the

331
00:11:28,380 --> 00:11:30,720
world teaching their expertise to our

332
00:11:30,720 --> 00:11:34,140
attendees all right enough about me

333
00:11:34,140 --> 00:11:36,480
let's talk about apis

334
00:11:36,480 --> 00:11:39,300
let's talk about apis clients and access

335
00:11:39,300 --> 00:11:41,279
tokens

336
00:11:41,279 --> 00:11:43,860
on this slide my question becomes where

337
00:11:43,860 --> 00:11:46,980
does that access token come from

338
00:11:46,980 --> 00:11:48,720
well from the authorization server

339
00:11:48,720 --> 00:11:50,100
that's that's an easy question right

340
00:11:50,100 --> 00:11:51,720
where does it come from well obviously

341
00:11:51,720 --> 00:11:53,339
from the authorization server I mean we

342
00:11:53,339 --> 00:11:55,320
talked about that before the better

343
00:11:55,320 --> 00:11:56,459
question that's not a good question

344
00:11:56,459 --> 00:11:58,800
actually the better question is how do

345
00:11:58,800 --> 00:12:00,300
you get the access token from the

346
00:12:00,300 --> 00:12:03,060
authorization server it's like ah

347
00:12:03,060 --> 00:12:06,360
that depends on what you're building it

348
00:12:06,360 --> 00:12:07,620
depends on whether you're building an

349
00:12:07,620 --> 00:12:10,380
application used by users

350
00:12:10,380 --> 00:12:12,480
like buffer going to Twitter on my

351
00:12:12,480 --> 00:12:14,040
behalf or an application that's

352
00:12:14,040 --> 00:12:16,380
accessing apis directly like collecting

353
00:12:16,380 --> 00:12:18,779
tweets with a specific hashtag without

354
00:12:18,779 --> 00:12:21,120
acting on behalf of the user and let's

355
00:12:21,120 --> 00:12:22,560
talk about the second scenario first

356
00:12:22,560 --> 00:12:25,339
machine to machine access a client

357
00:12:25,339 --> 00:12:28,560
accessing an API without users involved

358
00:12:28,560 --> 00:12:30,720
you just set it up configure a client

359
00:12:30,720 --> 00:12:32,279
and the client can now contact the API

360
00:12:32,279 --> 00:12:33,899
directly whenever it wants to do

361
00:12:33,899 --> 00:12:36,060
whatever it needs to do and here's how

362
00:12:36,060 --> 00:12:37,920
that flow works in the oauth roads so

363
00:12:37,920 --> 00:12:39,660
that flow is called a client credentials

364
00:12:39,660 --> 00:12:41,579
Grant because the client is going to the

365
00:12:41,579 --> 00:12:43,139
authorization server with its

366
00:12:43,139 --> 00:12:45,720
credentials typically an ID and a secret

367
00:12:45,720 --> 00:12:47,279
is going to ask that authorization

368
00:12:47,279 --> 00:12:49,620
server for an access toker like hey I am

369
00:12:49,620 --> 00:12:52,079
the hashtag collector client uh you know

370
00:12:52,079 --> 00:12:53,639
me because somebody registered me before

371
00:12:53,639 --> 00:12:55,560
can I get an access token to access the

372
00:12:55,560 --> 00:12:57,360
API space and the authorization server

373
00:12:57,360 --> 00:12:59,339
will verify the details typically return

374
00:12:59,339 --> 00:13:00,899
an access token if everything checks out

375
00:13:00,899 --> 00:13:03,420
and allows that client application to

376
00:13:03,420 --> 00:13:05,220
access the API with that access token

377
00:13:05,220 --> 00:13:08,160
and get the tweets from that API

378
00:13:08,160 --> 00:13:10,440
this is as simple as it gets that's the

379
00:13:10,440 --> 00:13:12,480
simplest or flow we have and that is the

380
00:13:12,480 --> 00:13:14,040
one we use for machine to machine access

381
00:13:14,040 --> 00:13:16,740
scenarios that do not involve users and

382
00:13:16,740 --> 00:13:18,360
we call this the client credentials

383
00:13:18,360 --> 00:13:19,920
Grant because we're exchanging client

384
00:13:19,920 --> 00:13:21,120
credentials

385
00:13:21,120 --> 00:13:24,360
for Access tokens that's what we do take

386
00:13:24,360 --> 00:13:26,160
away number two the client credentials

387
00:13:26,160 --> 00:13:27,839
Grant allows machine to machine access

388
00:13:27,839 --> 00:13:30,660
why do we have it because it absolves

389
00:13:30,660 --> 00:13:32,820
the API of the responsibility to have to

390
00:13:32,820 --> 00:13:34,139
figure out how to authenticate the

391
00:13:34,139 --> 00:13:35,940
clients you can have like 20 of these

392
00:13:35,940 --> 00:13:37,740
clients and they will all go to the

393
00:13:37,740 --> 00:13:39,240
other do the authorization server get

394
00:13:39,240 --> 00:13:40,800
their access tokens and send them to the

395
00:13:40,800 --> 00:13:42,779
API so the only thing the API needs to

396
00:13:42,779 --> 00:13:44,339
know is like how do I handle this access

397
00:13:44,339 --> 00:13:46,860
token and how do I make our transition

398
00:13:46,860 --> 00:13:48,959
decisions with that access token I will

399
00:13:48,959 --> 00:13:51,480
get to that later in this session we

400
00:13:51,480 --> 00:13:53,339
still have half an hour to go so that

401
00:13:53,339 --> 00:13:57,860
detail will be covered soon I promise

402
00:13:58,440 --> 00:14:01,680
all right so that was easy so let's get

403
00:14:01,680 --> 00:14:04,019
to the hard Parts what happens when a

404
00:14:04,019 --> 00:14:06,060
user is involved well when a user is

405
00:14:06,060 --> 00:14:07,620
involved things get a little bit more

406
00:14:07,620 --> 00:14:10,079
complicated as in well that's a lie they

407
00:14:10,079 --> 00:14:11,940
get a lot more complicated because the

408
00:14:11,940 --> 00:14:13,920
user talks communicates with the browser

409
00:14:13,920 --> 00:14:15,420
and we have to Loop in the browser and

410
00:14:15,420 --> 00:14:16,980
we have a bunch of redirects going back

411
00:14:16,980 --> 00:14:19,019
and forth and that makes things kind of

412
00:14:19,019 --> 00:14:20,160
challenging

413
00:14:20,160 --> 00:14:22,440
here's what that means in practice

414
00:14:22,440 --> 00:14:25,079
let's imagine a scenario with a back-end

415
00:14:25,079 --> 00:14:27,300
web application as a client buffer and

416
00:14:27,300 --> 00:14:30,000
Twitter I am logged into buffer and I

417
00:14:30,000 --> 00:14:31,380
want to connect buffer to my Twitter

418
00:14:31,380 --> 00:14:32,940
account give them permission to access

419
00:14:32,940 --> 00:14:35,519
Twitter on my behalf to post tweets so

420
00:14:35,519 --> 00:14:37,320
I'm going to click a button somewhere

421
00:14:37,320 --> 00:14:39,300
that says connect my Twitter account or

422
00:14:39,300 --> 00:14:40,620
my LinkedIn account on my Facebook

423
00:14:40,620 --> 00:14:42,480
account or my install I'm not on

424
00:14:42,480 --> 00:14:44,040
Instagram so I don't have an Instagram

425
00:14:44,040 --> 00:14:45,180
account

426
00:14:45,180 --> 00:14:48,120
yes I'm that old I know all right so you

427
00:14:48,120 --> 00:14:49,320
click that button and that's going to

428
00:14:49,320 --> 00:14:50,820
initialize the flow so the back end is

429
00:14:50,820 --> 00:14:53,100
the client the backend is in control of

430
00:14:53,100 --> 00:14:55,320
starting that flow so the back end will

431
00:14:55,320 --> 00:14:57,480
basically initialize that oauth flow

432
00:14:57,480 --> 00:14:59,100
with a redirect so it responds to the

433
00:14:59,100 --> 00:15:01,199
browser with a redirect response which

434
00:15:01,199 --> 00:15:02,459
will take the browser to the

435
00:15:02,459 --> 00:15:04,199
authorization server

436
00:15:04,199 --> 00:15:06,000
goes to the authorization server the URL

437
00:15:06,000 --> 00:15:08,040
contains all the dirty parameters I'm

438
00:15:08,040 --> 00:15:10,019
not going to talk about those but tells

439
00:15:10,019 --> 00:15:11,459
the authorization server who the client

440
00:15:11,459 --> 00:15:12,839
is what kind of access they're

441
00:15:12,839 --> 00:15:15,120
requesting and so on and so on and the

442
00:15:15,120 --> 00:15:17,519
authorization server maybe recognizes

443
00:15:17,519 --> 00:15:19,860
that user step 3 can carry a cookie in

444
00:15:19,860 --> 00:15:21,120
that case the authorization server

445
00:15:21,120 --> 00:15:23,639
Twitter may know like oh yeah I know you

446
00:15:23,639 --> 00:15:25,260
from before because of your session

447
00:15:25,260 --> 00:15:27,959
cookie on step 3. if there's no such

448
00:15:27,959 --> 00:15:29,519
cookie if there's no active session then

449
00:15:29,519 --> 00:15:30,660
Twitter is going to be like who the hell

450
00:15:30,660 --> 00:15:32,519
are you I don't know who you are and

451
00:15:32,519 --> 00:15:34,440
it's going to ask me as a user to

452
00:15:34,440 --> 00:15:36,240
authenticate to Twitter like log into

453
00:15:36,240 --> 00:15:37,860
your Twitter account for me

454
00:15:37,860 --> 00:15:41,040
feedback password test1234 not my real

455
00:15:41,040 --> 00:15:43,380
password by the way so don't try it out

456
00:15:43,380 --> 00:15:44,880
um that's what I do and then Twitter is

457
00:15:44,880 --> 00:15:46,320
going to ask me that's an optional step

458
00:15:46,320 --> 00:15:48,120
the consent step but it's in this case

459
00:15:48,120 --> 00:15:50,399
very very uh recommended it's going to

460
00:15:50,399 --> 00:15:51,779
ask me like hey Philip

461
00:15:51,779 --> 00:15:54,420
buffer is asking permission to read your

462
00:15:54,420 --> 00:15:56,579
tweets and write and create tweets on

463
00:15:56,579 --> 00:15:58,980
your timeline are you sure you want that

464
00:15:58,980 --> 00:16:01,019
and I as user can think about that and

465
00:16:01,019 --> 00:16:03,600
be like yeah that's okay yes I approve

466
00:16:03,600 --> 00:16:06,540
all right next the authorization server

467
00:16:06,540 --> 00:16:08,220
is happy it's like okay the user I know

468
00:16:08,220 --> 00:16:10,019
that it's Philip I know Philip approves

469
00:16:10,019 --> 00:16:11,519
of buffer getting access to his Twitter

470
00:16:11,519 --> 00:16:14,220
account so awesome I'm gonna create a

471
00:16:14,220 --> 00:16:16,019
one-time code called the authorization

472
00:16:16,019 --> 00:16:19,199
code and send that back to buffer

473
00:16:19,199 --> 00:16:21,420
however you can't send it back directly

474
00:16:21,420 --> 00:16:23,040
you have to go through the browser of

475
00:16:23,040 --> 00:16:24,660
the user that's how this thing works so

476
00:16:24,660 --> 00:16:26,040
it's going to respond to the redirect

477
00:16:26,040 --> 00:16:27,779
again which will take the browser to an

478
00:16:27,779 --> 00:16:30,540
endpoint hosted at buffer.com buffer.com

479
00:16:30,540 --> 00:16:32,880
callback or something like that and in

480
00:16:32,880 --> 00:16:34,680
the URL that's being loaded there's a

481
00:16:34,680 --> 00:16:36,480
parameter called code and that code

482
00:16:36,480 --> 00:16:38,759
contains that authorization code

483
00:16:38,759 --> 00:16:40,620
so the backend web application can now

484
00:16:40,620 --> 00:16:43,079
read that URL parameter extract it from

485
00:16:43,079 --> 00:16:44,459
there it's very easy and straightforward

486
00:16:44,459 --> 00:16:46,500
and go back to the authorization server

487
00:16:46,500 --> 00:16:48,779
in Step 7 to exchange that authorization

488
00:16:48,779 --> 00:16:51,779
code for client for an access token and

489
00:16:51,779 --> 00:16:53,940
that's what happens right here

490
00:16:53,940 --> 00:16:56,579
all right with that access token you can

491
00:16:56,579 --> 00:16:57,720
kind of Guess The Next Step because

492
00:16:57,720 --> 00:16:59,820
that's the whole point of using oi that

493
00:16:59,820 --> 00:17:01,800
the API site only deals with access

494
00:17:01,800 --> 00:17:04,020
tokens so now buffer can go to the API

495
00:17:04,020 --> 00:17:05,579
and be like hey man create a street

496
00:17:05,579 --> 00:17:07,740
please here's an access token API looks

497
00:17:07,740 --> 00:17:10,140
at it and it's like sure why not and

498
00:17:10,140 --> 00:17:13,260
that is how this flow Works in practice

499
00:17:13,260 --> 00:17:15,000
we're exchanging in Step seven we're

500
00:17:15,000 --> 00:17:16,740
exchanging an authorization code for

501
00:17:16,740 --> 00:17:17,819
tokens

502
00:17:17,819 --> 00:17:19,199
so you can kind of guess what the name

503
00:17:19,199 --> 00:17:20,819
of this flow is it's the authorization

504
00:17:20,819 --> 00:17:22,319
code Grant

505
00:17:22,319 --> 00:17:24,240
and then if you want to know more

506
00:17:24,240 --> 00:17:26,280
details we use a mechanism an additional

507
00:17:26,280 --> 00:17:27,900
mechanism called pixie proof key for

508
00:17:27,900 --> 00:17:29,400
code exchange which I'm not going to

509
00:17:29,400 --> 00:17:31,080
explain here it's a client specific

510
00:17:31,080 --> 00:17:32,520
thing that you have to implement there

511
00:17:32,520 --> 00:17:34,980
just know that you have to use pixie if

512
00:17:34,980 --> 00:17:36,539
you want to use this flow

513
00:17:36,539 --> 00:17:38,840
all right take away

514
00:17:38,840 --> 00:17:42,299
user-based access scenarios rely or use

515
00:17:42,299 --> 00:17:44,460
the authorization code Grant I know

516
00:17:44,460 --> 00:17:45,960
there's other oauth flows but they are

517
00:17:45,960 --> 00:17:47,220
deprecated you don't use them anymore

518
00:17:47,220 --> 00:17:49,260
like the implicit flow is off limits the

519
00:17:49,260 --> 00:17:50,880
resource owner password credential slow

520
00:17:50,880 --> 00:17:53,039
is off limits everybody uses the

521
00:17:53,039 --> 00:17:55,260
authorization code Grant with Pixie

522
00:17:55,260 --> 00:17:57,840
mobile apps front-end web apps back-end

523
00:17:57,840 --> 00:18:00,120
web apps all of them

524
00:18:00,120 --> 00:18:02,600
awesome

525
00:18:03,720 --> 00:18:04,860
now

526
00:18:04,860 --> 00:18:06,539
let's think about that buffer scenario

527
00:18:06,539 --> 00:18:09,059
right buffer is accessing Twitter on my

528
00:18:09,059 --> 00:18:11,580
behalf but if they I have actually I

529
00:18:11,580 --> 00:18:13,080
have another presentation in in two

530
00:18:13,080 --> 00:18:15,179
hours for a different event also online

531
00:18:15,179 --> 00:18:16,919
so kind of easy

532
00:18:16,919 --> 00:18:19,260
um what if I also tweet I have a tweet

533
00:18:19,260 --> 00:18:20,820
scheduled for that event so what if that

534
00:18:20,820 --> 00:18:22,679
tweet goes out and buffer goes to

535
00:18:22,679 --> 00:18:24,419
Twitter and Twitter's like yeah man that

536
00:18:24,419 --> 00:18:26,760
access token is no longer valid what do

537
00:18:26,760 --> 00:18:29,340
we do then well buffer could send me a

538
00:18:29,340 --> 00:18:31,320
mail and be like hey Philip can you come

539
00:18:31,320 --> 00:18:32,640
back to buffer and click that button

540
00:18:32,640 --> 00:18:34,440
again so we can run that flow and get a

541
00:18:34,440 --> 00:18:35,820
new access token but that would not be

542
00:18:35,820 --> 00:18:37,679
very user friendly because I'm probably

543
00:18:37,679 --> 00:18:39,059
not going to see that mail until it's

544
00:18:39,059 --> 00:18:41,820
too late but in the previous image you

545
00:18:41,820 --> 00:18:43,380
may have seen that when buffer exchange

546
00:18:43,380 --> 00:18:44,760
that authorization code they also

547
00:18:44,760 --> 00:18:47,100
received a refresh token and the refresh

548
00:18:47,100 --> 00:18:48,960
token is a token that gives you or gives

549
00:18:48,960 --> 00:18:51,539
the client long-term access and allows

550
00:18:51,539 --> 00:18:53,520
the client to get a fresh access token

551
00:18:53,520 --> 00:18:55,440
with a refresh token

552
00:18:55,440 --> 00:18:57,059
so the client can request a new access

553
00:18:57,059 --> 00:18:58,980
token in this case the authorization

554
00:18:58,980 --> 00:19:00,840
server will verify that refresh token

555
00:19:00,840 --> 00:19:02,340
and if everything is valid it will

556
00:19:02,340 --> 00:19:04,320
provide a new access token with a new

557
00:19:04,320 --> 00:19:06,960
lifetime valid for another 15 minutes 30

558
00:19:06,960 --> 00:19:09,299
minutes whatever so that the client can

559
00:19:09,299 --> 00:19:11,580
now go to the API again and post a tweet

560
00:19:11,580 --> 00:19:13,200
when necessary

561
00:19:13,200 --> 00:19:15,419
that's what a refresh token does it

562
00:19:15,419 --> 00:19:17,220
provides a client long-term access

563
00:19:17,220 --> 00:19:19,679
without a need to involve the user in

564
00:19:19,679 --> 00:19:22,679
that process it also enables you to keep

565
00:19:22,679 --> 00:19:24,660
your access token short-lived which is a

566
00:19:24,660 --> 00:19:26,340
best practice if you can keep your

567
00:19:26,340 --> 00:19:28,080
access tokens short-lived like 5 minutes

568
00:19:28,080 --> 00:19:30,000
10 minutes that's a good practice

569
00:19:30,000 --> 00:19:31,679
because the client can always use that

570
00:19:31,679 --> 00:19:33,179
refresh token to get a new one if

571
00:19:33,179 --> 00:19:34,200
necessary

572
00:19:34,200 --> 00:19:36,539
and short-lived tokens reduce the window

573
00:19:36,539 --> 00:19:39,120
of abuse in case somebody would steal a

574
00:19:39,120 --> 00:19:42,419
token and abuse a token

575
00:19:42,419 --> 00:19:45,860
all right good

576
00:19:48,059 --> 00:19:50,760
I also have pitfalls like slides in

577
00:19:50,760 --> 00:19:52,559
bluish backgrounds with green letters

578
00:19:52,559 --> 00:19:54,360
that's a good slide that's a takeaway

579
00:19:54,360 --> 00:19:57,360
bit files look a bit more ominous like a

580
00:19:57,360 --> 00:19:59,520
dark gray background and some reddish

581
00:19:59,520 --> 00:20:01,620
text are still readable though full red

582
00:20:01,620 --> 00:20:03,660
was not readable so a somewhat readable

583
00:20:03,660 --> 00:20:05,880
red text and a pitfall here is that

584
00:20:05,880 --> 00:20:08,039
people often misuse tokens in this whole

585
00:20:08,039 --> 00:20:10,740
oad stuff like there's access tokens

586
00:20:10,740 --> 00:20:12,720
refresh tokens identity tokens when you

587
00:20:12,720 --> 00:20:14,520
use open ID connect and authorization

588
00:20:14,520 --> 00:20:16,500
codes and people get confused and

589
00:20:16,500 --> 00:20:18,419
sometimes they start sending identity

590
00:20:18,419 --> 00:20:20,880
tokens to apis or accepting them in apis

591
00:20:20,880 --> 00:20:23,059
and all of that stuff absolutely

592
00:20:23,059 --> 00:20:26,520
horribly bad idea don't do that

593
00:20:26,520 --> 00:20:29,460
remember apis only consume access tokens

594
00:20:29,460 --> 00:20:31,440
that's what an API does it accepts an

595
00:20:31,440 --> 00:20:32,820
access token

596
00:20:32,820 --> 00:20:34,860
nothing else no identity token no

597
00:20:34,860 --> 00:20:37,260
refresh token none of that remember that

598
00:20:37,260 --> 00:20:39,120
use the tokens for their original

599
00:20:39,120 --> 00:20:42,299
purpose not for other things because it

600
00:20:42,299 --> 00:20:44,520
seems convenient it's probably it is

601
00:20:44,520 --> 00:20:45,960
probably convenient but it's also a very

602
00:20:45,960 --> 00:20:47,720
bad idea because it will result in

603
00:20:47,720 --> 00:20:50,280
authorization issues on the API side of

604
00:20:50,280 --> 00:20:52,460
things

605
00:20:52,559 --> 00:20:55,039
yeah

606
00:20:55,320 --> 00:20:58,039
all right

607
00:20:58,919 --> 00:21:01,500
so enough pretty pictures right I know I

608
00:21:01,500 --> 00:21:03,539
like I make nice PowerPoint graphs but

609
00:21:03,539 --> 00:21:05,400
we are developers we're in the Builder

610
00:21:05,400 --> 00:21:06,780
our Defender track

611
00:21:06,780 --> 00:21:09,299
so you want to see things in monospace

612
00:21:09,299 --> 00:21:11,640
font so here's an access though two

613
00:21:11,640 --> 00:21:13,140
access tokens actually on the left you

614
00:21:13,140 --> 00:21:15,539
have a reference access token and on the

615
00:21:15,539 --> 00:21:17,160
right you have a self-contained access

616
00:21:17,160 --> 00:21:20,460
token two tokens representing the same

617
00:21:20,460 --> 00:21:23,460
Authority just in a different format so

618
00:21:23,460 --> 00:21:24,780
what is this all about let's talk about

619
00:21:24,780 --> 00:21:27,120
the reference access token first a

620
00:21:27,120 --> 00:21:29,460
reference access token is actually a

621
00:21:29,460 --> 00:21:32,039
random identifier that is meaningless to

622
00:21:32,039 --> 00:21:35,820
everyone except the authorization server

623
00:21:35,820 --> 00:21:38,280
what does that mean well first of all I

624
00:21:38,280 --> 00:21:40,140
lied about no pretty pictures anymore I

625
00:21:40,140 --> 00:21:42,179
have more pictures to explain how these

626
00:21:42,179 --> 00:21:43,740
things are going to work in practice

627
00:21:43,740 --> 00:21:45,179
so what does that mean the client is

628
00:21:45,179 --> 00:21:46,860
going to get an access token by running

629
00:21:46,860 --> 00:21:48,840
that oi flow depending on what client

630
00:21:48,840 --> 00:21:50,220
you're building and it's going to get a

631
00:21:50,220 --> 00:21:52,679
reference access token and with that

632
00:21:52,679 --> 00:21:54,539
access token it can contact the API just

633
00:21:54,539 --> 00:21:56,820
like before and that token means nothing

634
00:21:56,820 --> 00:21:59,340
it's a random identifier

635
00:21:59,340 --> 00:22:01,320
kind of comparable to a session ID it

636
00:22:01,320 --> 00:22:03,720
means nothing so the API now has to go

637
00:22:03,720 --> 00:22:05,100
back to the authorization server and be

638
00:22:05,100 --> 00:22:07,740
like hey man I got this random token

639
00:22:07,740 --> 00:22:08,940
this access token I don't know what it

640
00:22:08,940 --> 00:22:10,860
means can you help me translate that and

641
00:22:10,860 --> 00:22:12,360
the authorization server will look up

642
00:22:12,360 --> 00:22:14,700
that token in its list of tokens in this

643
00:22:14,700 --> 00:22:16,740
data store and like oh yeah that token

644
00:22:16,740 --> 00:22:18,539
is associated with Philip for the buffer

645
00:22:18,539 --> 00:22:20,580
client and so on and so on here's a set

646
00:22:20,580 --> 00:22:23,400
of claims associated with that token and

647
00:22:23,400 --> 00:22:25,980
we call that token introspection the API

648
00:22:25,980 --> 00:22:28,260
has to translate that access token to

649
00:22:28,260 --> 00:22:29,280
claims

650
00:22:29,280 --> 00:22:32,100
at the authorization server API can't do

651
00:22:32,100 --> 00:22:33,299
that on its own

652
00:22:33,299 --> 00:22:35,580
and what's the

653
00:22:35,580 --> 00:22:37,860
what's the the setup here well whenever

654
00:22:37,860 --> 00:22:39,419
the client sends another request so a

655
00:22:39,419 --> 00:22:41,100
bit later the client sends a second API

656
00:22:41,100 --> 00:22:43,260
request in Step six the API gets that

657
00:22:43,260 --> 00:22:45,600
same random tokens like I don't know

658
00:22:45,600 --> 00:22:47,100
what that means and a client has to do

659
00:22:47,100 --> 00:22:49,080
step seven again and get the response in

660
00:22:49,080 --> 00:22:51,600
Step eight and it happens over and over

661
00:22:51,600 --> 00:22:53,400
and over again

662
00:22:53,400 --> 00:22:57,240
which sounds heavy which it is heavy but

663
00:22:57,240 --> 00:22:58,559
there's one major benefit of having

664
00:22:58,559 --> 00:23:00,840
reference tokens and the major benefit

665
00:23:00,840 --> 00:23:02,760
of having such reference tokens is that

666
00:23:02,760 --> 00:23:04,980
you can always terminate a token

667
00:23:04,980 --> 00:23:07,500
whenever you desire to do so

668
00:23:07,500 --> 00:23:10,380
when you are in the need to prevent a

669
00:23:10,380 --> 00:23:12,000
client from accessing the API any

670
00:23:12,000 --> 00:23:13,440
further you can go to the authorization

671
00:23:13,440 --> 00:23:15,600
server as an administrator or through a

672
00:23:15,600 --> 00:23:18,059
user interface if that's provided and

673
00:23:18,059 --> 00:23:20,580
terminate access immediately that access

674
00:23:20,580 --> 00:23:22,740
token will be refocused and the next

675
00:23:22,740 --> 00:23:24,659
time the API goes there to introspect

676
00:23:24,659 --> 00:23:27,840
that token instead after count here then

677
00:23:27,840 --> 00:23:31,260
that would be or seven or four and the

678
00:23:31,260 --> 00:23:32,640
token is revoked to a transition service

679
00:23:32,640 --> 00:23:35,100
like oh no no that's no longer valid and

680
00:23:35,100 --> 00:23:36,900
the API or the clients will not have

681
00:23:36,900 --> 00:23:39,179
access to that API anymore

682
00:23:39,179 --> 00:23:41,820
so that's the the upside that's the

683
00:23:41,820 --> 00:23:43,440
benefit of reference access tokens the

684
00:23:43,440 --> 00:23:45,960
downside is the cost

685
00:23:45,960 --> 00:23:48,120
it causes overhead because every request

686
00:23:48,120 --> 00:23:50,760
on step three and six that side results

687
00:23:50,760 --> 00:23:52,620
in a request in step four and seven so

688
00:23:52,620 --> 00:23:57,139
it's security at the cost of performance

689
00:23:57,600 --> 00:23:59,220
you can kind of guess where we're going

690
00:23:59,220 --> 00:24:00,600
with this right so reference access

691
00:24:00,600 --> 00:24:02,039
tokens that's

692
00:24:02,039 --> 00:24:05,220
good it's highly secure but highly much

693
00:24:05,220 --> 00:24:07,440
overhead so what about self-contained

694
00:24:07,440 --> 00:24:09,600
access tokens well self-contained access

695
00:24:09,600 --> 00:24:12,780
tokens are Json web tokens mostly Json

696
00:24:12,780 --> 00:24:14,940
web tokens and it works like this the

697
00:24:14,940 --> 00:24:16,799
client is going to obtain that token and

698
00:24:16,799 --> 00:24:18,419
it's going to get that Json web token

699
00:24:18,419 --> 00:24:21,120
that self-contained access token and

700
00:24:21,120 --> 00:24:22,799
with that access token the client makes

701
00:24:22,799 --> 00:24:25,140
a request to the API and the API can now

702
00:24:25,140 --> 00:24:27,419
verify the signature extract the claims

703
00:24:27,419 --> 00:24:29,159
from the token everything is embedded in

704
00:24:29,159 --> 00:24:31,380
the token and make its authorization

705
00:24:31,380 --> 00:24:33,539
decision awesome no introspection

706
00:24:33,539 --> 00:24:34,919
required

707
00:24:34,919 --> 00:24:36,480
and when a client sends another request

708
00:24:36,480 --> 00:24:38,640
in Step 4 guess what the API can do the

709
00:24:38,640 --> 00:24:41,460
same and the same and the same the API

710
00:24:41,460 --> 00:24:44,039
can now independently verify the

711
00:24:44,039 --> 00:24:45,780
validity of the token and use the claims

712
00:24:45,780 --> 00:24:47,580
for authorization decisions because it's

713
00:24:47,580 --> 00:24:50,460
all embedded in the token

714
00:24:50,460 --> 00:24:53,059
awesome

715
00:24:53,100 --> 00:24:56,520
sure there's a big upside performance is

716
00:24:56,520 --> 00:24:58,919
a lot better no constant back and forth

717
00:24:58,919 --> 00:25:00,539
between apis and authorization servers

718
00:25:00,539 --> 00:25:02,700
the downside is that we can't really

719
00:25:02,700 --> 00:25:04,679
revoke a token anymore

720
00:25:04,679 --> 00:25:06,539
well the downside is somewhat nuanced

721
00:25:06,539 --> 00:25:09,059
you always can revoke refresh tokens

722
00:25:09,059 --> 00:25:11,100
because when the access token expires

723
00:25:11,100 --> 00:25:13,140
after 10 minutes let's say the access

724
00:25:13,140 --> 00:25:15,179
token is no longer valid the client has

725
00:25:15,179 --> 00:25:16,799
to go back to the authorization server

726
00:25:16,799 --> 00:25:18,659
with that refresh token and at that

727
00:25:18,659 --> 00:25:19,919
point the authorization server can be

728
00:25:19,919 --> 00:25:22,020
like no the user said you no longer have

729
00:25:22,020 --> 00:25:23,159
access so you don't get a new access

730
00:25:23,159 --> 00:25:26,220
token bye bye no access for you

731
00:25:26,220 --> 00:25:28,620
so refresh token revocation is always

732
00:25:28,620 --> 00:25:29,640
possible

733
00:25:29,640 --> 00:25:31,980
but for the duration of the lifetime of

734
00:25:31,980 --> 00:25:33,600
an access token revocation is typically

735
00:25:33,600 --> 00:25:35,159
not possible unless you build like

736
00:25:35,159 --> 00:25:36,380
additional

737
00:25:36,380 --> 00:25:38,460
non-or-specific infrastructure to

738
00:25:38,460 --> 00:25:39,659
support that which is a whole different

739
00:25:39,659 --> 00:25:40,440
story

740
00:25:40,440 --> 00:25:42,539
so that means if your tokens are valid

741
00:25:42,539 --> 00:25:43,980
for 10 minutes and somebody steals a

742
00:25:43,980 --> 00:25:45,419
token there's going to be a potential

743
00:25:45,419 --> 00:25:47,700
window of abuse for 10 minutes

744
00:25:47,700 --> 00:25:49,140
of course if your tokens are valid for

745
00:25:49,140 --> 00:25:50,880
two weeks then well you can see where

746
00:25:50,880 --> 00:25:51,960
this goes then you have a potential

747
00:25:51,960 --> 00:25:55,260
window of abuse of two weeks

748
00:25:55,260 --> 00:25:57,240
the trade-off here is revocation versus

749
00:25:57,240 --> 00:25:58,740
performance

750
00:25:58,740 --> 00:26:00,480
what does that mean in practice it means

751
00:26:00,480 --> 00:26:01,860
that highly security sensitive

752
00:26:01,860 --> 00:26:04,260
applications Financial app e-health apps

753
00:26:04,260 --> 00:26:07,080
they are willing to pay the cost and

754
00:26:07,080 --> 00:26:08,640
have and use reference access tokens

755
00:26:08,640 --> 00:26:10,140
with token introspection for them it

756
00:26:10,140 --> 00:26:12,059
makes perfect sense

757
00:26:12,059 --> 00:26:15,840
to accept that cost for security

758
00:26:15,840 --> 00:26:18,059
however for most applications the

759
00:26:18,059 --> 00:26:19,799
recommendation of having short-lived

760
00:26:19,799 --> 00:26:21,840
self-contained access tokens is good

761
00:26:21,840 --> 00:26:24,179
that offers a good balance it gives you

762
00:26:24,179 --> 00:26:25,740
the level of control you need five

763
00:26:25,740 --> 00:26:27,360
minutes to minutes that's acceptable for

764
00:26:27,360 --> 00:26:29,340
most applications and it gives you the

765
00:26:29,340 --> 00:26:30,900
performance and flexibility you need as

766
00:26:30,900 --> 00:26:32,760
well so that's a good trade-off in

767
00:26:32,760 --> 00:26:36,260
practice for many applications

768
00:26:36,900 --> 00:26:39,679
all right

769
00:26:41,940 --> 00:26:44,520
so how do we make our translation

770
00:26:44,520 --> 00:26:47,159
decisions with access tokens

771
00:26:47,159 --> 00:26:48,539
I'm going to make a promise I'm not

772
00:26:48,539 --> 00:26:50,580
exactly sure I don't know every Slide by

773
00:26:50,580 --> 00:26:52,080
heart but I kind of guessed we're

774
00:26:52,080 --> 00:26:53,760
through with the arrows and the pictures

775
00:26:53,760 --> 00:26:56,220
so let's talk about the claims in Access

776
00:26:56,220 --> 00:26:57,720
tokens

777
00:26:57,720 --> 00:27:00,419
all right on the left we have the claims

778
00:27:00,419 --> 00:27:02,580
you obtain after token introspection so

779
00:27:02,580 --> 00:27:04,020
the client goes to the authorization

780
00:27:04,020 --> 00:27:05,640
server like what does this mean that's

781
00:27:05,640 --> 00:27:07,620
the response you get a bunch of Json

782
00:27:07,620 --> 00:27:10,679
claims key value pairs basically on the

783
00:27:10,679 --> 00:27:12,419
right we have a say or not the same

784
00:27:12,419 --> 00:27:14,340
similar claims but the claims that are

785
00:27:14,340 --> 00:27:16,260
embedded in a jot-based access token

786
00:27:16,260 --> 00:27:18,720
like an adjacent web token and you can

787
00:27:18,720 --> 00:27:19,980
see that there are some similarities but

788
00:27:19,980 --> 00:27:21,539
also some differences so let's talk

789
00:27:21,539 --> 00:27:23,580
about those for a second

790
00:27:23,580 --> 00:27:25,620
the first thing is the introspection

791
00:27:25,620 --> 00:27:27,840
response will have an active clay which

792
00:27:27,840 --> 00:27:30,059
is true or false and your developers

793
00:27:30,059 --> 00:27:32,400
your Defenders you build stuff you know

794
00:27:32,400 --> 00:27:34,440
how a Boolean works like true means this

795
00:27:34,440 --> 00:27:36,779
token is active false means it's expired

796
00:27:36,779 --> 00:27:38,940
it's revoked it whatever we no longer

797
00:27:38,940 --> 00:27:41,039
consider this to be a valid token that's

798
00:27:41,039 --> 00:27:43,020
the thing on the left that's what you

799
00:27:43,020 --> 00:27:45,419
check when you get such a token well an

800
00:27:45,419 --> 00:27:46,860
introspection response at least like is

801
00:27:46,860 --> 00:27:49,500
the active claim true if yes move

802
00:27:49,500 --> 00:27:53,340
forward if not will reject 403 probably

803
00:27:53,340 --> 00:27:56,279
and go away or 401 whatever you want on

804
00:27:56,279 --> 00:27:58,919
the right we have an exp claim exp means

805
00:27:58,919 --> 00:28:01,320
expiration timestamp it's a timestamp

806
00:28:01,320 --> 00:28:03,659
when a Json web token becomes invalid

807
00:28:03,659 --> 00:28:05,400
that's that five minute that minute

808
00:28:05,400 --> 00:28:07,260
timestamp since the creation of that

809
00:28:07,260 --> 00:28:09,419
docker we also have additional

810
00:28:09,419 --> 00:28:11,580
time-based claims in jots we have I 80

811
00:28:11,580 --> 00:28:15,059
issued at or NBF not before which can

812
00:28:15,059 --> 00:28:17,580
also play a role in making sure that the

813
00:28:17,580 --> 00:28:19,559
token is silent

814
00:28:19,559 --> 00:28:21,840
all right one down what else do we do

815
00:28:21,840 --> 00:28:22,860
well

816
00:28:22,860 --> 00:28:24,299
we want to make sure that the access

817
00:28:24,299 --> 00:28:27,600
token is applicable to us which means it

818
00:28:27,600 --> 00:28:29,820
has to be issued by a service that we

819
00:28:29,820 --> 00:28:32,279
trust in this case I'm using the one for

820
00:28:32,279 --> 00:28:34,320
my restaurant review demo application

821
00:28:34,320 --> 00:28:36,900
the restograde and it's running at SDS

822
00:28:36,900 --> 00:28:38,940
restway.com it could be running at

823
00:28:38,940 --> 00:28:41,100
art.twitter.com or whatever that's the

824
00:28:41,100 --> 00:28:43,140
issuer that's a party that has created

825
00:28:43,140 --> 00:28:47,039
this access token is that the expected

826
00:28:47,039 --> 00:28:49,320
party if we're a Twitter API we likely

827
00:28:49,320 --> 00:28:50,940
only accept tokens from Twitter's

828
00:28:50,940 --> 00:28:52,799
authorization server so we check that

829
00:28:52,799 --> 00:28:54,539
issue is pointing to that specific

830
00:28:54,539 --> 00:28:56,820
authorization server

831
00:28:56,820 --> 00:28:58,740
additionally it's like the audience

832
00:28:58,740 --> 00:29:03,120
claim AUD audience means which API is

833
00:29:03,120 --> 00:29:05,700
supposed to consume this access token

834
00:29:05,700 --> 00:29:07,140
and this looks like a very strict

835
00:29:07,140 --> 00:29:09,240
identifier but it's just a string so you

836
00:29:09,240 --> 00:29:10,980
can put whatever you want in there as an

837
00:29:10,980 --> 00:29:12,840
identifier but it's basically the API

838
00:29:12,840 --> 00:29:14,820
knows its own identifier like hey I am

839
00:29:14,820 --> 00:29:17,100
API 7 and it's gonna look does the

840
00:29:17,100 --> 00:29:19,860
audience contain API 7. yes it does

841
00:29:19,860 --> 00:29:22,140
awesome this token is intended for me if

842
00:29:22,140 --> 00:29:24,360
it says API 3 then API 7 should be like

843
00:29:24,360 --> 00:29:26,340
what why the hell are you sending me a

844
00:29:26,340 --> 00:29:29,460
token for API 3 no I don't want that out

845
00:29:29,460 --> 00:29:32,460
that's what the audience claimed us

846
00:29:32,460 --> 00:29:34,799
awesome

847
00:29:34,799 --> 00:29:36,419
well actually add some text for a

848
00:29:36,419 --> 00:29:37,980
reference later on as well

849
00:29:37,980 --> 00:29:40,200
finally if you want to this is not this

850
00:29:40,200 --> 00:29:42,240
is very optional but if you want to you

851
00:29:42,240 --> 00:29:44,159
can also look further in the access

852
00:29:44,159 --> 00:29:46,020
token and you might find it's not

853
00:29:46,020 --> 00:29:47,520
necessarily there but you might find

854
00:29:47,520 --> 00:29:50,340
claims that identify the client to which

855
00:29:50,340 --> 00:29:52,860
this access token was issued could be a

856
00:29:52,860 --> 00:29:54,840
client ID claim can be an ASAP B claim

857
00:29:54,840 --> 00:29:56,100
this is somewhat custom to every

858
00:29:56,100 --> 00:29:58,080
implementation on how they represent

859
00:29:58,080 --> 00:30:00,360
that and this would allow the API to

860
00:30:00,360 --> 00:30:02,580
decide like oh it's this client making a

861
00:30:02,580 --> 00:30:04,500
call do I want to allow that yes or no

862
00:30:04,500 --> 00:30:06,240
most of the time you don't need

863
00:30:06,240 --> 00:30:08,279
client-specific authorization so the API

864
00:30:08,279 --> 00:30:09,840
doesn't have to look at this but there

865
00:30:09,840 --> 00:30:11,279
might be cases where this does make

866
00:30:11,279 --> 00:30:12,059
sense

867
00:30:12,059 --> 00:30:14,220
all right takeaway here is the first

868
00:30:14,220 --> 00:30:16,380
thing your apis have to do is make sure

869
00:30:16,380 --> 00:30:19,320
that the access tokens are acceptable as

870
00:30:19,320 --> 00:30:21,299
in that they're valid that the active

871
00:30:21,299 --> 00:30:22,559
claim is true that the signature is

872
00:30:22,559 --> 00:30:23,820
valid that the issuer makes sense that

873
00:30:23,820 --> 00:30:26,940
audience makes sense and so on and so on

874
00:30:26,940 --> 00:30:29,279
and when you've done that you know that

875
00:30:29,279 --> 00:30:30,960
you now have a valid access token so

876
00:30:30,960 --> 00:30:32,520
let's talk about how to make

877
00:30:32,520 --> 00:30:34,380
authorization decisions what do you

878
00:30:34,380 --> 00:30:36,539
check next

879
00:30:36,539 --> 00:30:39,620
that's a good question

880
00:30:46,200 --> 00:30:48,240
in the access token

881
00:30:48,240 --> 00:30:49,860
you may find

882
00:30:49,860 --> 00:30:52,620
there's like Nuance here may find as in

883
00:30:52,620 --> 00:30:55,740
the old spec is full of optional so yes

884
00:30:55,740 --> 00:30:57,240
it may be there maybe it's not there

885
00:30:57,240 --> 00:30:59,100
depends on how you interpret things how

886
00:30:59,100 --> 00:31:00,419
you build things what features are

887
00:31:00,419 --> 00:31:02,460
supported and so on and so on but there

888
00:31:02,460 --> 00:31:04,860
may be a scope click so what does a

889
00:31:04,860 --> 00:31:06,899
scope mean a scope represents the

890
00:31:06,899 --> 00:31:07,980
authority

891
00:31:07,980 --> 00:31:09,779
that has been granted to the access

892
00:31:09,779 --> 00:31:12,779
token and this is typically Authority

893
00:31:12,779 --> 00:31:14,520
granted by the user

894
00:31:14,520 --> 00:31:17,220
so imagine that's

895
00:31:17,220 --> 00:31:19,020
on Twitter I have full access to my

896
00:31:19,020 --> 00:31:21,000
Twitter account right I can access my

897
00:31:21,000 --> 00:31:22,980
private messages I can access my tweets

898
00:31:22,980 --> 00:31:24,720
I can write tweets I can change my

899
00:31:24,720 --> 00:31:27,299
profile and so on as well but a buffer

900
00:31:27,299 --> 00:31:29,940
client only has requires a limited set

901
00:31:29,940 --> 00:31:32,039
of these permissions like read my tweets

902
00:31:32,039 --> 00:31:34,679
and write my tweets so buffer can

903
00:31:34,679 --> 00:31:36,960
request a specific Scope when asking for

904
00:31:36,960 --> 00:31:38,220
an access token you can say like hey

905
00:31:38,220 --> 00:31:39,659
Twitter I would like to have right

906
00:31:39,659 --> 00:31:42,000
access to a timeline

907
00:31:42,000 --> 00:31:45,120
and that scope allows me to give consent

908
00:31:45,120 --> 00:31:47,700
like yes I grant buffer right access and

909
00:31:47,700 --> 00:31:49,980
allows me to delegate a partial set of

910
00:31:49,980 --> 00:31:52,020
permissions to a specific client that's

911
00:31:52,020 --> 00:31:54,539
the idea behind the scope it gets

912
00:31:54,539 --> 00:31:56,520
somewhat more vague and confusing in

913
00:31:56,520 --> 00:31:58,140
actual implementations but that's the

914
00:31:58,140 --> 00:32:00,600
true ID behind the scope and you'll find

915
00:32:00,600 --> 00:32:02,100
that once you know what that means

916
00:32:02,100 --> 00:32:03,720
you'll find it everywhere for example

917
00:32:03,720 --> 00:32:05,520
Zoom if you want to add a zoom meeting

918
00:32:05,520 --> 00:32:07,679
to your calendar your Google calendar

919
00:32:07,679 --> 00:32:09,720
you'll get a pop-up from Google saying

920
00:32:09,720 --> 00:32:11,640
like hey Zoom would like to have access

921
00:32:11,640 --> 00:32:13,260
to a few and edit events on all your

922
00:32:13,260 --> 00:32:17,340
calendars all arts and Scopes that's a

923
00:32:17,340 --> 00:32:19,559
scope requested by Zoom so that they can

924
00:32:19,559 --> 00:32:21,059
create events in your calendar update

925
00:32:21,059 --> 00:32:23,640
events or see when when you have a zoom

926
00:32:23,640 --> 00:32:25,440
meeting and so on and so on

927
00:32:25,440 --> 00:32:27,299
and as a user you have your Google is

928
00:32:27,299 --> 00:32:28,679
asking your consent to do that and you

929
00:32:28,679 --> 00:32:30,720
can choose continue or cancel

930
00:32:30,720 --> 00:32:32,700
I chose cancel because I only did this

931
00:32:32,700 --> 00:32:34,799
first screenshot I don't use a zoom

932
00:32:34,799 --> 00:32:36,419
Google Calendar integration for anything

933
00:32:36,419 --> 00:32:39,419
so uh that's how consent works

934
00:32:39,419 --> 00:32:41,399
so what what other what other Scopes

935
00:32:41,399 --> 00:32:42,960
does Google have well they literally

936
00:32:42,960 --> 00:32:44,820
have thousands of scopes

937
00:32:44,820 --> 00:32:46,919
if you go look for Google oauth Scopes

938
00:32:46,919 --> 00:32:48,659
you'll find this page with like hundreds

939
00:32:48,659 --> 00:32:51,299
of apis and for each API they have this

940
00:32:51,299 --> 00:32:53,399
list of Scopes that are available for

941
00:32:53,399 --> 00:32:55,260
example on on the laptop top left you

942
00:32:55,260 --> 00:32:57,659
can see Gmail Scopes and you can find

943
00:32:57,659 --> 00:32:59,520
one interesting one a bit down let me

944
00:32:59,520 --> 00:33:00,960
see if I can highlight that very

945
00:33:00,960 --> 00:33:02,580
professionally with my PowerPoint pen

946
00:33:02,580 --> 00:33:05,820
you can see one Gmail or read only

947
00:33:05,820 --> 00:33:08,520
that scope gives a client read-only

948
00:33:08,520 --> 00:33:11,100
access to Gmail allowing a client to

949
00:33:11,100 --> 00:33:13,260
request the minimal necessary set of

950
00:33:13,260 --> 00:33:15,480
Scopes to perform its functionality

951
00:33:15,480 --> 00:33:18,240
let's say you build a productivity tool

952
00:33:18,240 --> 00:33:19,980
that gives you like daily statistics of

953
00:33:19,980 --> 00:33:22,080
your Gmail activity probably the most

954
00:33:22,080 --> 00:33:23,640
depressing tool you can build but sure

955
00:33:23,640 --> 00:33:25,320
whatever and it's going to say like oh

956
00:33:25,320 --> 00:33:26,940
you sent so many emails today you got so

957
00:33:26,940 --> 00:33:28,620
many mails and you have this many mails

958
00:33:28,620 --> 00:33:30,299
left in your inbox like probably a few

959
00:33:30,299 --> 00:33:32,340
thousand something like that

960
00:33:32,340 --> 00:33:34,559
a tool like that would never need right

961
00:33:34,559 --> 00:33:36,059
access to Gmail it doesn't require

962
00:33:36,059 --> 00:33:38,340
access to send mails or create messages

963
00:33:38,340 --> 00:33:40,080
or delete messages or whatever it just

964
00:33:40,080 --> 00:33:42,600
needs to read only access so with this

965
00:33:42,600 --> 00:33:44,279
kind of scope definitions it can request

966
00:33:44,279 --> 00:33:46,380
read-only access

967
00:33:46,380 --> 00:33:48,779
one example of how you use Scopes in

968
00:33:48,779 --> 00:33:51,000
practice and for that matter a crazy

969
00:33:51,000 --> 00:33:53,100
example because Google has like a

970
00:33:53,100 --> 00:33:56,700
massive amount of systems available

971
00:33:56,700 --> 00:33:59,460
maybe a less structured example maybe a

972
00:33:59,460 --> 00:34:01,740
more realistic example as well is GitHub

973
00:34:01,740 --> 00:34:03,600
GitHub also has a bunch of Scopes

974
00:34:03,600 --> 00:34:05,460
because you can use or to access GitHub

975
00:34:05,460 --> 00:34:08,159
accounts and you can see that they their

976
00:34:08,159 --> 00:34:09,899
scope definitions grew a bit more

977
00:34:09,899 --> 00:34:11,520
organically like you have some things

978
00:34:11,520 --> 00:34:13,139
with colons in between or some things

979
00:34:13,139 --> 00:34:15,000
with underscores which is perfectly fine

980
00:34:15,000 --> 00:34:17,699
because Scopes are just strings but you

981
00:34:17,699 --> 00:34:19,679
can also see how it translates to

982
00:34:19,679 --> 00:34:22,379
delegating certain authority to a client

983
00:34:22,379 --> 00:34:24,359
like hey I can give a client access to

984
00:34:24,359 --> 00:34:27,239
uh get status of repositories or to get

985
00:34:27,239 --> 00:34:29,339
user information or to send

986
00:34:29,339 --> 00:34:31,500
notifications all of those things are

987
00:34:31,500 --> 00:34:33,179
individual scopes

988
00:34:33,179 --> 00:34:36,179
in an API based world we can translate

989
00:34:36,179 --> 00:34:38,520
that Concepts to function level Access

990
00:34:38,520 --> 00:34:39,599
Control

991
00:34:39,599 --> 00:34:41,520
like if you're building an API Twitter

992
00:34:41,520 --> 00:34:43,679
and you want to allow a client to write

993
00:34:43,679 --> 00:34:45,540
tweets you would perform functional

994
00:34:45,540 --> 00:34:47,399
level Access Control by checking does

995
00:34:47,399 --> 00:34:48,960
this client have the permission the

996
00:34:48,960 --> 00:34:52,080
scope to create or to write data

997
00:34:52,080 --> 00:34:53,940
on the timeline

998
00:34:53,940 --> 00:34:56,099
that's checking proper function level

999
00:34:56,099 --> 00:34:58,560
Access Control by the way a big thing in

1000
00:34:58,560 --> 00:35:01,260
the oasp API security top 10.

1001
00:35:01,260 --> 00:35:04,160
remember that

1002
00:35:05,640 --> 00:35:07,740
sometimes Scopes are not good enough

1003
00:35:07,740 --> 00:35:10,380
Scopes have this

1004
00:35:10,380 --> 00:35:11,700
well people have a love-hate

1005
00:35:11,700 --> 00:35:13,200
relationship with Scopes and sometimes

1006
00:35:13,200 --> 00:35:15,060
you want to have some something more

1007
00:35:15,060 --> 00:35:16,680
fine-grained with a different meaning

1008
00:35:16,680 --> 00:35:19,200
and you'll often find the use of custom

1009
00:35:19,200 --> 00:35:21,420
permission claims many implementations

1010
00:35:21,420 --> 00:35:23,160
actually support a claims called

1011
00:35:23,160 --> 00:35:24,359
permissions where you can add

1012
00:35:24,359 --> 00:35:26,160
permissions based on an authorization

1013
00:35:26,160 --> 00:35:29,099
policy for example you can configure

1014
00:35:29,099 --> 00:35:31,020
your your authorization server and say

1015
00:35:31,020 --> 00:35:33,480
like hey these users always get these

1016
00:35:33,480 --> 00:35:35,339
permissions or these users have the

1017
00:35:35,339 --> 00:35:37,440
admin role and by definition they get

1018
00:35:37,440 --> 00:35:39,060
these permissions or this client gets

1019
00:35:39,060 --> 00:35:40,440
these permissions and so on and so on

1020
00:35:40,440 --> 00:35:42,540
and that's an authorization policy you

1021
00:35:42,540 --> 00:35:44,460
define at the authorization server which

1022
00:35:44,460 --> 00:35:47,280
allows you to include specific scope or

1023
00:35:47,280 --> 00:35:49,200
specific permissions in an access token

1024
00:35:49,200 --> 00:35:51,900
which the API in turn can use to make

1025
00:35:51,900 --> 00:35:53,940
authorization decisions that's

1026
00:35:53,940 --> 00:35:57,240
essentially what this is all about

1027
00:35:57,240 --> 00:35:59,579
all right so what's the takeaway here if

1028
00:35:59,579 --> 00:36:01,200
you need a bit more flexibility if you

1029
00:36:01,200 --> 00:36:03,300
want to include authorization

1030
00:36:03,300 --> 00:36:05,520
information that is based on a policy

1031
00:36:05,520 --> 00:36:07,200
then Scopes are probably not the right

1032
00:36:07,200 --> 00:36:08,700
mechanism but you might want to look

1033
00:36:08,700 --> 00:36:10,200
into using such a custom permission

1034
00:36:10,200 --> 00:36:12,180
claim that's a recommended approach

1035
00:36:12,180 --> 00:36:15,000
that's an a frequently used approach to

1036
00:36:15,000 --> 00:36:17,520
get that information to an API so that

1037
00:36:17,520 --> 00:36:21,440
the API can make authorization decisions

1038
00:36:26,760 --> 00:36:29,160
awesome

1039
00:36:29,160 --> 00:36:31,079
we talked about functional level

1040
00:36:31,079 --> 00:36:32,579
authorization

1041
00:36:32,579 --> 00:36:34,320
but do you know what number one is in

1042
00:36:34,320 --> 00:36:36,900
the OS API security depth then well you

1043
00:36:36,900 --> 00:36:38,040
should know and if you don't know you

1044
00:36:38,040 --> 00:36:39,900
should look it up and learn what it is

1045
00:36:39,900 --> 00:36:41,820
it's broken object level authorization

1046
00:36:41,820 --> 00:36:43,740
not function level but object level

1047
00:36:43,740 --> 00:36:46,020
authorization so how does that work or

1048
00:36:46,020 --> 00:36:48,060
what's the problem here well it's a

1049
00:36:48,060 --> 00:36:49,140
problem that has been around since

1050
00:36:49,140 --> 00:36:50,820
forever because I've been using this

1051
00:36:50,820 --> 00:36:52,579
slide for like four years and a bit

1052
00:36:52,579 --> 00:36:55,320
because it just happens everywhere and

1053
00:36:55,320 --> 00:36:56,940
it's always the same story

1054
00:36:56,940 --> 00:36:58,619
in this team mobile story what happened

1055
00:36:58,619 --> 00:37:00,300
is that you could access your account

1056
00:37:00,300 --> 00:37:02,460
information by sending a requests to

1057
00:37:02,460 --> 00:37:04,200
their backends using your phone number

1058
00:37:04,200 --> 00:37:06,359
as the identifier your phone number is

1059
00:37:06,359 --> 00:37:08,160
kind of unique so why not use that as an

1060
00:37:08,160 --> 00:37:09,180
ID right

1061
00:37:09,180 --> 00:37:11,700
and T-Mobile check if you're

1062
00:37:11,700 --> 00:37:13,619
authenticated like are you an

1063
00:37:13,619 --> 00:37:15,240
authenticated user yes okay here's your

1064
00:37:15,240 --> 00:37:16,920
account information good

1065
00:37:16,920 --> 00:37:19,740
makes sense but they forgot to check if

1066
00:37:19,740 --> 00:37:21,900
the the phone number you provided belong

1067
00:37:21,900 --> 00:37:24,240
to your account they just use the phone

1068
00:37:24,240 --> 00:37:25,680
number looked up the account info and

1069
00:37:25,680 --> 00:37:27,720
returned that info which means if I do

1070
00:37:27,720 --> 00:37:28,920
it from my account everything is

1071
00:37:28,920 --> 00:37:30,720
perfectly fine but if I do it for your

1072
00:37:30,720 --> 00:37:32,579
account with your phone number they will

1073
00:37:32,579 --> 00:37:34,200
check if I'm authenticated like yes I am

1074
00:37:34,200 --> 00:37:36,900
as me and they would return your account

1075
00:37:36,900 --> 00:37:39,060
information just like that

1076
00:37:39,060 --> 00:37:42,420
not good that is a bit of a problem

1077
00:37:42,420 --> 00:37:44,040
that's broken object level authorization

1078
00:37:44,040 --> 00:37:46,020
because we forgot to check that the

1079
00:37:46,020 --> 00:37:48,000
object being accessed is allowed to be

1080
00:37:48,000 --> 00:37:49,980
accessed by this particular user and

1081
00:37:49,980 --> 00:37:52,560
this problem exists everywhere

1082
00:37:52,560 --> 00:37:54,540
we had a story from a bit later from a

1083
00:37:54,540 --> 00:37:55,740
patient portal Healthcare information

1084
00:37:55,740 --> 00:37:57,599
very sensitive millions of people

1085
00:37:57,599 --> 00:37:59,640
exposed Tudor had an issue where he

1086
00:37:59,640 --> 00:38:01,859
could associate phone numbers with user

1087
00:38:01,859 --> 00:38:04,140
accounts and Facebook had an issue where

1088
00:38:04,140 --> 00:38:05,880
it could change the name for any

1089
00:38:05,880 --> 00:38:07,320
Facebook page and then register a new

1090
00:38:07,320 --> 00:38:08,940
one with the same name worked with the

1091
00:38:08,940 --> 00:38:10,740
old name and take control of people

1092
00:38:10,740 --> 00:38:13,920
coming to that page so a lot of very

1093
00:38:13,920 --> 00:38:16,260
similar problems and they exist in

1094
00:38:16,260 --> 00:38:20,599
virtually every API out there today

1095
00:38:21,780 --> 00:38:23,940
why am I talking about this well because

1096
00:38:23,940 --> 00:38:25,980
you have to perform object level

1097
00:38:25,980 --> 00:38:27,960
authorization checks with access tokens

1098
00:38:27,960 --> 00:38:30,240
as well here's an example of a

1099
00:38:30,240 --> 00:38:32,460
user-specific access token a

1100
00:38:32,460 --> 00:38:34,800
user-specific access tokens they can

1101
00:38:34,800 --> 00:38:38,400
always contain an SUV claim an SUV is a

1102
00:38:38,400 --> 00:38:40,079
three-letter abbreviation abbreviation

1103
00:38:40,079 --> 00:38:42,900
for subject it's basically a claim

1104
00:38:42,900 --> 00:38:45,780
representing the user associated with

1105
00:38:45,780 --> 00:38:48,119
this access token and it's a user ID

1106
00:38:48,119 --> 00:38:50,760
that is the value of that claim

1107
00:38:50,760 --> 00:38:53,760
so in this token we have two things we

1108
00:38:53,760 --> 00:38:55,260
use for authorization we have the

1109
00:38:55,260 --> 00:38:57,359
permissions claim which allows us to do

1110
00:38:57,359 --> 00:38:59,220
functional level access control like can

1111
00:38:59,220 --> 00:39:00,920
the user access the endpoint that

1112
00:39:00,920 --> 00:39:04,500
returns review information yes they have

1113
00:39:04,500 --> 00:39:06,599
the reviews read permission good

1114
00:39:06,599 --> 00:39:08,400
can the user access this particular

1115
00:39:08,400 --> 00:39:10,680
review well let me check because let's

1116
00:39:10,680 --> 00:39:12,839
use that user identifier compare that to

1117
00:39:12,839 --> 00:39:14,640
the author of the review make sure

1118
00:39:14,640 --> 00:39:16,200
they're the same in that case this is

1119
00:39:16,200 --> 00:39:17,760
the user's review yes they can access

1120
00:39:17,760 --> 00:39:20,220
that review that's how you use this in

1121
00:39:20,220 --> 00:39:22,260
practice so we basically rely on that

1122
00:39:22,260 --> 00:39:24,660
user's identifier which is unique in

1123
00:39:24,660 --> 00:39:27,119
that authorization service ecosystem so

1124
00:39:27,119 --> 00:39:29,040
that identifier will always be the same

1125
00:39:29,040 --> 00:39:31,020
and will never change and will be unique

1126
00:39:31,020 --> 00:39:34,200
immutable and we use that to ensure that

1127
00:39:34,200 --> 00:39:36,240
the object being accessed is indeed

1128
00:39:36,240 --> 00:39:37,859
allowed to be accessed by that user

1129
00:39:37,859 --> 00:39:40,560
which can be simple by comparing IDs of

1130
00:39:40,560 --> 00:39:42,720
the user versus the author or it can be

1131
00:39:42,720 --> 00:39:44,099
a bit more complex

1132
00:39:44,099 --> 00:39:46,140
for example checking if the user belongs

1133
00:39:46,140 --> 00:39:48,480
to a restaurant or a shared project to

1134
00:39:48,480 --> 00:39:49,859
which the review belongs or whatever

1135
00:39:49,859 --> 00:39:52,260
that's an authorization policy that's

1136
00:39:52,260 --> 00:39:53,820
specific to your application and that's

1137
00:39:53,820 --> 00:39:55,619
not something we can discuss in detail

1138
00:39:55,619 --> 00:39:57,960
right here but we have to be aware that

1139
00:39:57,960 --> 00:39:59,700
we have to perform this object level

1140
00:39:59,700 --> 00:40:02,339
authorization checks that is absolutely

1141
00:40:02,339 --> 00:40:04,800
critical and if you mess that up things

1142
00:40:04,800 --> 00:40:07,500
are going to end badly and you'll suffer

1143
00:40:07,500 --> 00:40:09,480
from OS APS here to top 10 issue number

1144
00:40:09,480 --> 00:40:12,720
one and trust me almost every API does

1145
00:40:12,720 --> 00:40:14,520
at some point in time

1146
00:40:14,520 --> 00:40:17,180
hmm

1147
00:40:23,160 --> 00:40:25,200
what do we do

1148
00:40:25,200 --> 00:40:27,119
when we need more information to make

1149
00:40:27,119 --> 00:40:29,280
our translation decisions

1150
00:40:29,280 --> 00:40:30,780
like

1151
00:40:30,780 --> 00:40:33,000
you'll often find multi-tenant scenarios

1152
00:40:33,000 --> 00:40:35,099
where you have users sure but the user

1153
00:40:35,099 --> 00:40:37,560
belongs to a tenant a customer in your

1154
00:40:37,560 --> 00:40:39,300
application and you have like a bunch of

1155
00:40:39,300 --> 00:40:40,619
tenants and each tenant has a bunch of

1156
00:40:40,619 --> 00:40:42,540
users and you'll need that tenant

1157
00:40:42,540 --> 00:40:44,160
information that customer information to

1158
00:40:44,160 --> 00:40:46,140
make authorization decisions so the

1159
00:40:46,140 --> 00:40:48,480
question becomes how do you solve that

1160
00:40:48,480 --> 00:40:52,380
can you include that in the access token

1161
00:40:52,380 --> 00:40:55,980
that's a good question like maybe

1162
00:40:55,980 --> 00:40:58,440
and actually yes you can it's not maybe

1163
00:40:58,440 --> 00:41:00,300
yes you can so first of all access

1164
00:41:00,300 --> 00:41:03,240
tokens they perfectly well support

1165
00:41:03,240 --> 00:41:05,820
custom claims so an access token there's

1166
00:41:05,820 --> 00:41:08,220
no problem for including a tenant ID or

1167
00:41:08,220 --> 00:41:10,619
tenant name or the name of your dog or

1168
00:41:10,619 --> 00:41:12,540
whatever in the access token that's

1169
00:41:12,540 --> 00:41:15,119
perfectly legal and perfectly possible

1170
00:41:15,119 --> 00:41:17,520
the main question is is it a good idea

1171
00:41:17,520 --> 00:41:19,500
do you really want to include an

1172
00:41:19,500 --> 00:41:21,180
information in your access token and

1173
00:41:21,180 --> 00:41:23,280
which information is okay to include and

1174
00:41:23,280 --> 00:41:25,140
which information should be probably not

1175
00:41:25,140 --> 00:41:27,839
include and there's no rules for that

1176
00:41:27,839 --> 00:41:30,300
there's only rules of thumb like

1177
00:41:30,300 --> 00:41:32,700
experience guidelines but that's the

1178
00:41:32,700 --> 00:41:34,500
best we have at this point

1179
00:41:34,500 --> 00:41:36,540
so first of all we can include

1180
00:41:36,540 --> 00:41:38,220
additional metadata

1181
00:41:38,220 --> 00:41:40,619
a good guideline to decide if it's

1182
00:41:40,619 --> 00:41:41,940
something you want to include in an

1183
00:41:41,940 --> 00:41:43,740
access token yes or no

1184
00:41:43,740 --> 00:41:46,920
um is to think about whether the custom

1185
00:41:46,920 --> 00:41:49,800
claim you're adding is associated with

1186
00:41:49,800 --> 00:41:51,960
the user's identity because the access

1187
00:41:51,960 --> 00:41:53,820
token represents the authority of a

1188
00:41:53,820 --> 00:41:56,400
client to act on behalf of the user so

1189
00:41:56,400 --> 00:41:58,980
user specific information sure we can

1190
00:41:58,980 --> 00:42:01,460
include that

1191
00:42:01,500 --> 00:42:03,839
API specific information like probably

1192
00:42:03,839 --> 00:42:06,359
not that's something we shouldn't do so

1193
00:42:06,359 --> 00:42:08,460
in this case a tenant ID is something

1194
00:42:08,460 --> 00:42:10,140
that belongs to the user's identity

1195
00:42:10,140 --> 00:42:13,140
that's a core part of who the user is

1196
00:42:13,140 --> 00:42:15,240
so yeah if the authorization server has

1197
00:42:15,240 --> 00:42:17,099
that information it can perfectly fine

1198
00:42:17,099 --> 00:42:19,020
it's perfectly fine to include that in

1199
00:42:19,020 --> 00:42:21,000
the access token allowing the API to

1200
00:42:21,000 --> 00:42:23,099
make authorization decisions based on

1201
00:42:23,099 --> 00:42:25,140
that tenant ID

1202
00:42:25,140 --> 00:42:27,000
which I just noticed is the same as the

1203
00:42:27,000 --> 00:42:29,579
user ID let's say PowerPoint copy paste

1204
00:42:29,579 --> 00:42:31,260
mistake I'm going to fix that in the

1205
00:42:31,260 --> 00:42:32,760
future so it's supposed to be a

1206
00:42:32,760 --> 00:42:35,720
different ID in this case

1207
00:42:35,940 --> 00:42:38,339
what shouldn't you include well API

1208
00:42:38,339 --> 00:42:40,560
specific authorization details you

1209
00:42:40,560 --> 00:42:43,140
shouldn't be mimicking API authorization

1210
00:42:43,140 --> 00:42:45,359
policies at the authorization server so

1211
00:42:45,359 --> 00:42:46,680
that the authorization server can

1212
00:42:46,680 --> 00:42:48,359
include an access tokens that's going to

1213
00:42:48,359 --> 00:42:50,640
be a recipe for problems because it will

1214
00:42:50,640 --> 00:42:53,820
tie your authorization policy of the API

1215
00:42:53,820 --> 00:42:55,859
to the authorization server it will make

1216
00:42:55,859 --> 00:42:57,119
it very difficult to update something

1217
00:42:57,119 --> 00:42:58,500
it's going to be a nightmare to keep it

1218
00:42:58,500 --> 00:43:00,720
in sync and so on and so on so

1219
00:43:00,720 --> 00:43:03,839
user-specific information or user

1220
00:43:03,839 --> 00:43:06,359
Associated information sure API specific

1221
00:43:06,359 --> 00:43:09,839
information or details not not good so

1222
00:43:09,839 --> 00:43:11,460
the pit file here

1223
00:43:11,460 --> 00:43:13,800
gray and red the pitfall is that you

1224
00:43:13,800 --> 00:43:15,359
want to avoid overloading the access

1225
00:43:15,359 --> 00:43:17,940
token with details so you shouldn't be

1226
00:43:17,940 --> 00:43:20,280
replicating API authorization policies

1227
00:43:20,280 --> 00:43:22,319
at the authorization server so you can

1228
00:43:22,319 --> 00:43:24,599
include them in claims and then use them

1229
00:43:24,599 --> 00:43:26,760
at the API that's not a good idea limit

1230
00:43:26,760 --> 00:43:29,640
the information to user-specific claims

1231
00:43:29,640 --> 00:43:31,740
making it possible for the API to

1232
00:43:31,740 --> 00:43:33,240
enforce their own authorization

1233
00:43:33,240 --> 00:43:35,700
decisions

1234
00:43:35,700 --> 00:43:38,400
and it brings me to

1235
00:43:38,400 --> 00:43:41,579
a last point in this session

1236
00:43:41,579 --> 00:43:44,099
whenever you use

1237
00:43:44,099 --> 00:43:45,660
information

1238
00:43:45,660 --> 00:43:48,180
and a common example is that tenant ID

1239
00:43:48,180 --> 00:43:49,859
that's often present in tokens whether

1240
00:43:49,859 --> 00:43:51,660
it's a tenant ID or customer ID or

1241
00:43:51,660 --> 00:43:53,819
whatever that's a value that's often

1242
00:43:53,819 --> 00:43:56,339
present in tokens however depends a bit

1243
00:43:56,339 --> 00:43:58,200
on how you design your API but you'll

1244
00:43:58,200 --> 00:43:59,819
often find that information in other

1245
00:43:59,819 --> 00:44:02,220
places as well so here's an example from

1246
00:44:02,220 --> 00:44:04,619
a spring boot application and you can

1247
00:44:04,619 --> 00:44:07,140
see on line two that the parts the the

1248
00:44:07,140 --> 00:44:10,440
uh the URL to access the API also

1249
00:44:10,440 --> 00:44:12,119
includes a tenant ID

1250
00:44:12,119 --> 00:44:15,359
it's a parameter present in that URL

1251
00:44:15,359 --> 00:44:17,220
it's a path variable so you have slash

1252
00:44:17,220 --> 00:44:19,260
10 and slash sum ID 17 slash restaurants

1253
00:44:19,260 --> 00:44:20,640
and we get the restaurants for that

1254
00:44:20,640 --> 00:44:22,319
specific tenant and it makes perfect

1255
00:44:22,319 --> 00:44:23,640
sense

1256
00:44:23,640 --> 00:44:25,680
and that's often a patch variable or a

1257
00:44:25,680 --> 00:44:28,560
query parameter or whatever and you'll

1258
00:44:28,560 --> 00:44:30,420
find implementations like this one that

1259
00:44:30,420 --> 00:44:34,319
use the tenant ID from that URL but in

1260
00:44:34,319 --> 00:44:36,839
that case in this case we have a bit of

1261
00:44:36,839 --> 00:44:37,740
a problem

1262
00:44:37,740 --> 00:44:39,300
because you might assume that the tenant

1263
00:44:39,300 --> 00:44:41,160
ID is trustworthy because yeah it's a

1264
00:44:41,160 --> 00:44:42,540
user standard ID and it's also in the

1265
00:44:42,540 --> 00:44:45,240
access token it's perfectly fine but if

1266
00:44:45,240 --> 00:44:47,460
you never check that then an attacker

1267
00:44:47,460 --> 00:44:49,800
can change a tenant ID in the URL

1268
00:44:49,800 --> 00:44:52,619
and potentially bypass our transition

1269
00:44:52,619 --> 00:44:53,880
checks in this case there is no

1270
00:44:53,880 --> 00:44:56,460
authorization check the API in this case

1271
00:44:56,460 --> 00:44:58,500
mistakenly assumes that the tenant ID is

1272
00:44:58,500 --> 00:45:00,300
trustworthy but it's really not because

1273
00:45:00,300 --> 00:45:02,220
it's request data and it can be tampered

1274
00:45:02,220 --> 00:45:04,260
to it so what you have to do in this

1275
00:45:04,260 --> 00:45:06,359
case if you want to design an API like

1276
00:45:06,359 --> 00:45:09,300
this if you want to use the tenant ID in

1277
00:45:09,300 --> 00:45:12,119
in the part of the API you have to match

1278
00:45:12,119 --> 00:45:14,339
that against the tenant ID in the access

1279
00:45:14,339 --> 00:45:17,339
token you have to ensure that the ID in

1280
00:45:17,339 --> 00:45:19,440
the URL is the same as the ID in the

1281
00:45:19,440 --> 00:45:21,180
access token that should be a generic

1282
00:45:21,180 --> 00:45:22,920
authorization check and only then can

1283
00:45:22,920 --> 00:45:24,359
you move forward and retrieve the

1284
00:45:24,359 --> 00:45:25,800
information for that specific tenant

1285
00:45:25,800 --> 00:45:28,440
because if you don't then you have an

1286
00:45:28,440 --> 00:45:30,420
authorization bypass and you have a

1287
00:45:30,420 --> 00:45:31,740
problem

1288
00:45:31,740 --> 00:45:33,839
and this seems very

1289
00:45:33,839 --> 00:45:36,060
logical in in a PowerPoint slide with

1290
00:45:36,060 --> 00:45:38,339
only three lines of code it's like of

1291
00:45:38,339 --> 00:45:41,160
course trust me in a real API endpoint

1292
00:45:41,160 --> 00:45:43,260
this is actually quite common in a real

1293
00:45:43,260 --> 00:45:44,880
API implementation you'll often find

1294
00:45:44,880 --> 00:45:46,800
these vulnerabilities because it's very

1295
00:45:46,800 --> 00:45:49,440
easy to make a mistake like this very

1296
00:45:49,440 --> 00:45:51,720
easy to overlook something like this so

1297
00:45:51,720 --> 00:45:53,880
the pitfall here is don't use untrusted

1298
00:45:53,880 --> 00:45:56,460
values for authorization

1299
00:45:56,460 --> 00:45:59,099
use trusted values check them if you use

1300
00:45:59,099 --> 00:46:01,020
them from there first check them against

1301
00:46:01,020 --> 00:46:03,000
the trusted source to ensure that

1302
00:46:03,000 --> 00:46:04,440
they're valid before you actually use

1303
00:46:04,440 --> 00:46:07,260
them for something in the system

1304
00:46:07,260 --> 00:46:10,079
and that brings me to a slide with key

1305
00:46:10,079 --> 00:46:12,060
takeaways

1306
00:46:12,060 --> 00:46:15,000
three takeaways to summarize this entire

1307
00:46:15,000 --> 00:46:16,319
session

1308
00:46:16,319 --> 00:46:18,599
first of all use oauth to enable

1309
00:46:18,599 --> 00:46:21,300
authorization in a complex architecture

1310
00:46:21,300 --> 00:46:23,160
oauth and IDC have totally different

1311
00:46:23,160 --> 00:46:25,500
purposes ovad is about a clients

1312
00:46:25,500 --> 00:46:27,480
accessing apis or what they see is about

1313
00:46:27,480 --> 00:46:29,460
clients getting information about an

1314
00:46:29,460 --> 00:46:31,220
authenticated user two separate things

1315
00:46:31,220 --> 00:46:34,079
using the same underlying flows and

1316
00:46:34,079 --> 00:46:36,240
mechanisms

1317
00:46:36,240 --> 00:46:38,099
learn and respect the purpose of these

1318
00:46:38,099 --> 00:46:40,500
oauth flows and these tokens

1319
00:46:40,500 --> 00:46:42,720
people often

1320
00:46:42,720 --> 00:46:45,000
fail to fully grasp the details of a

1321
00:46:45,000 --> 00:46:46,260
flow and then don't really understand

1322
00:46:46,260 --> 00:46:48,599
how to use it and they often ask me like

1323
00:46:48,599 --> 00:46:50,220
yeah but what if we just change this and

1324
00:46:50,220 --> 00:46:52,740
that and send this there and more often

1325
00:46:52,740 --> 00:46:54,359
than not it results in potential

1326
00:46:54,359 --> 00:46:56,160
vulnerabilities these flows are

1327
00:46:56,160 --> 00:46:58,319
extremely complex the security of these

1328
00:46:58,319 --> 00:47:00,660
flows is handled with formal models

1329
00:47:00,660 --> 00:47:02,280
because people can't think of these

1330
00:47:02,280 --> 00:47:03,359
attacks we actually have to ask

1331
00:47:03,359 --> 00:47:04,920
computers like make sure that this is

1332
00:47:04,920 --> 00:47:07,440
safe and when people do that research

1333
00:47:07,440 --> 00:47:09,480
those formal models they pop up and say

1334
00:47:09,480 --> 00:47:11,760
like we found a scenario where something

1335
00:47:11,760 --> 00:47:13,859
can go wrong and people look at that in

1336
00:47:13,859 --> 00:47:16,380
like two hours later probably like huh

1337
00:47:16,380 --> 00:47:18,540
that's a good one crap we never thought

1338
00:47:18,540 --> 00:47:21,180
of that so please be aware this is

1339
00:47:21,180 --> 00:47:23,280
extremely difficult to do yourself so

1340
00:47:23,280 --> 00:47:25,140
you just use the flows and respect the

1341
00:47:25,140 --> 00:47:26,640
flows and their meaning

1342
00:47:26,640 --> 00:47:28,619
and then finally and force API

1343
00:47:28,619 --> 00:47:31,140
authorization using information from the

1344
00:47:31,140 --> 00:47:33,060
access token using the steps we talked

1345
00:47:33,060 --> 00:47:34,800
about here the active claim the

1346
00:47:34,800 --> 00:47:36,960
signature the expiration the issuer the

1347
00:47:36,960 --> 00:47:38,940
audience and then functional level and

1348
00:47:38,940 --> 00:47:42,380
object level Access Control

1349
00:47:42,540 --> 00:47:44,400
all right

1350
00:47:44,400 --> 00:47:46,020
with that

1351
00:47:46,020 --> 00:47:48,000
I want to mention that I have additional

1352
00:47:48,000 --> 00:47:50,520
material on web security if you want to

1353
00:47:50,520 --> 00:47:52,319
learn more I have some online courses if

1354
00:47:52,319 --> 00:47:53,400
you can definitely take a look at

1355
00:47:53,400 --> 00:47:55,619
there's a free course on oauth and open

1356
00:47:55,619 --> 00:47:57,359
ID connect containing a lot more details

1357
00:47:57,359 --> 00:47:59,099
so that's something you definitely can

1358
00:47:59,099 --> 00:48:01,079
look into and there's courses on API

1359
00:48:01,079 --> 00:48:04,020
security and react security as well

1360
00:48:04,020 --> 00:48:06,240
with that I want to thank you for being

1361
00:48:06,240 --> 00:48:08,880
here I hope you enjoyed the session and

1362
00:48:08,880 --> 00:48:10,319
feel free to connect with me on social

1363
00:48:10,319 --> 00:48:12,240
media Twitter and Linkedin is the best

1364
00:48:12,240 --> 00:48:15,119
platform the only platforms I'm on so um

1365
00:48:15,119 --> 00:48:17,940
join me there and follow me uh to stay

1366
00:48:17,940 --> 00:48:19,859
in touch on security thank you very much

1367
00:48:19,859 --> 00:48:21,420
and if you have any questions our

1368
00:48:21,420 --> 00:48:23,579
wonderful host is gonna pick them up

1369
00:48:23,579 --> 00:48:25,560
from the app and will ask me about them

1370
00:48:25,560 --> 00:48:28,020
in the next few minutes thank you very

1371
00:48:28,020 --> 00:48:30,200
much

1372
00:48:30,359 --> 00:48:33,000
thank you very much Philip as well this

1373
00:48:33,000 --> 00:48:35,700
was a wonderful presentation especially

1374
00:48:35,700 --> 00:48:38,280
for us that are researchers you really

1375
00:48:38,280 --> 00:48:40,560
gave us Insight on the matter and it

1376
00:48:40,560 --> 00:48:43,200
really gave us a few advices that I'm

1377
00:48:43,200 --> 00:48:45,480
sure me at least will put into practice

1378
00:48:45,480 --> 00:48:49,079
so let's uh jump a little bit on the Q a

1379
00:48:49,079 --> 00:48:51,960
session I'm happy to tell you that we

1380
00:48:51,960 --> 00:48:55,020
have a lot of feedback and also a lot of

1381
00:48:55,020 --> 00:48:57,000
questions people are really interested

1382
00:48:57,000 --> 00:48:58,740
in the subject and they really want to

1383
00:48:58,740 --> 00:49:01,740
know your opinion on a few matters so if

1384
00:49:01,740 --> 00:49:04,859
we would like to continue uh Christopher

1385
00:49:04,859 --> 00:49:08,880
major is asking how best to use os2

1386
00:49:08,880 --> 00:49:10,740
tokens in the machine to machine

1387
00:49:10,740 --> 00:49:12,780
contacts

1388
00:49:12,780 --> 00:49:15,420
and he's also asking the same token for

1389
00:49:15,420 --> 00:49:18,300
each service to service is bad so a new

1390
00:49:18,300 --> 00:49:20,220
token exchange for each service to

1391
00:49:20,220 --> 00:49:23,700
service adds a lot of overheads do

1392
00:49:23,700 --> 00:49:25,680
authentication 2 does not support

1393
00:49:25,680 --> 00:49:30,060
requesting all talkers front up

1394
00:49:30,060 --> 00:49:32,160
all right so in the machine the machine

1395
00:49:32,160 --> 00:49:33,660
access scenario

1396
00:49:33,660 --> 00:49:36,540
you basically need request tokens so a

1397
00:49:36,540 --> 00:49:38,760
client Let Me Maybe jump back to to the

1398
00:49:38,760 --> 00:49:40,319
slides because well that's going to make

1399
00:49:40,319 --> 00:49:42,480
things a little bit more clear and we

1400
00:49:42,480 --> 00:49:44,339
have that ability here anyway so let's

1401
00:49:44,339 --> 00:49:46,440
let's go for that basically the idea is

1402
00:49:46,440 --> 00:49:48,900
whenever we require a different access

1403
00:49:48,900 --> 00:49:53,940
or permission in this scenario yeah so

1404
00:49:53,940 --> 00:49:56,280
there is an in theory there is a way to

1405
00:49:56,280 --> 00:49:58,140
request a token you could say like hey I

1406
00:49:58,140 --> 00:50:00,000
want an access token to contact API one

1407
00:50:00,000 --> 00:50:01,859
two three and four but that's that's

1408
00:50:01,859 --> 00:50:03,480
kind of a best practice that's that's a

1409
00:50:03,480 --> 00:50:05,760
bit of a a that's not a bad practice a

1410
00:50:05,760 --> 00:50:08,339
bit of a bad smell in in systems because

1411
00:50:08,339 --> 00:50:10,380
access tokens should be

1412
00:50:10,380 --> 00:50:11,880
um should follow the principle of least

1413
00:50:11,880 --> 00:50:13,859
privilege like you should make them as

1414
00:50:13,859 --> 00:50:16,020
Tiny as possible

1415
00:50:16,020 --> 00:50:19,560
um to avoid any risk or harm in case an

1416
00:50:19,560 --> 00:50:21,660
access token gets compromised or stolen

1417
00:50:21,660 --> 00:50:23,940
or abused in one way or another so in

1418
00:50:23,940 --> 00:50:25,800
this case you would request different

1419
00:50:25,800 --> 00:50:27,960
permissions or different Scopes within

1420
00:50:27,960 --> 00:50:29,400
an access token as long as they belong

1421
00:50:29,400 --> 00:50:31,200
to the same API so let's say you want to

1422
00:50:31,200 --> 00:50:33,540
count like three apis in this case the

1423
00:50:33,540 --> 00:50:35,160
recommendation would be to request three

1424
00:50:35,160 --> 00:50:38,339
access tokens one for each API and of

1425
00:50:38,339 --> 00:50:40,020
course inside an access token you can

1426
00:50:40,020 --> 00:50:42,060
have multiple permissions for one of

1427
00:50:42,060 --> 00:50:44,700
these um what is this API so that's fine

1428
00:50:44,700 --> 00:50:46,500
so API one can have read and write

1429
00:50:46,500 --> 00:50:48,359
permissions that can be a single token

1430
00:50:48,359 --> 00:50:50,460
you would have a token for API 2 and a

1431
00:50:50,460 --> 00:50:52,380
token for API 3. so that's essentially

1432
00:50:52,380 --> 00:50:54,240
how how this would be approached in

1433
00:50:54,240 --> 00:50:56,579
practice and the principle here is not

1434
00:50:56,579 --> 00:50:58,640
different with front-end applications or

1435
00:50:58,640 --> 00:51:01,440
user-facing applications the client can

1436
00:51:01,440 --> 00:51:02,760
request certain permissions the

1437
00:51:02,760 --> 00:51:04,460
authorization server can

1438
00:51:04,460 --> 00:51:06,480
automatically Grant certain permissions

1439
00:51:06,480 --> 00:51:08,520
based on a configuration policy and the

1440
00:51:08,520 --> 00:51:10,559
token just represents the authority of

1441
00:51:10,559 --> 00:51:13,099
the clients

1442
00:51:13,440 --> 00:51:16,020
thank you very much I hope that answered

1443
00:51:16,020 --> 00:51:18,180
your question also would like to jump to

1444
00:51:18,180 --> 00:51:20,400
another question from Nathan Britton he

1445
00:51:20,400 --> 00:51:22,859
says he asking that would you recommend

1446
00:51:22,859 --> 00:51:25,800
an API getaway in front of your apis to

1447
00:51:25,800 --> 00:51:28,140
do the token validation in the scenario

1448
00:51:28,140 --> 00:51:30,780
exactly that you described were a stolen

1449
00:51:30,780 --> 00:51:34,940
token could be used maliciously

1450
00:51:35,400 --> 00:51:36,839
hmm

1451
00:51:36,839 --> 00:51:38,900
um

1452
00:51:39,720 --> 00:51:42,180
yes and

1453
00:51:42,180 --> 00:51:44,040
that that's actually a tricky question

1454
00:51:44,040 --> 00:51:46,260
like let me start with the first part

1455
00:51:46,260 --> 00:51:48,420
yes API gateways are absolutely useful

1456
00:51:48,420 --> 00:51:50,880
so in in a full architecture

1457
00:51:50,880 --> 00:51:52,200
um you would probably have an API

1458
00:51:52,200 --> 00:51:54,059
Gateway sitting in front of there which

1459
00:51:54,059 --> 00:51:56,640
would perform some rudimentary upfront

1460
00:51:56,640 --> 00:51:58,440
checks like hey is there an invalid

1461
00:51:58,440 --> 00:52:00,300
access token attached here and so on and

1462
00:52:00,300 --> 00:52:04,079
so on however you can't really move your

1463
00:52:04,079 --> 00:52:06,180
full authorization checks that we we

1464
00:52:06,180 --> 00:52:07,800
talked about into the API Gateway

1465
00:52:07,800 --> 00:52:09,119
because that would basically mean that

1466
00:52:09,119 --> 00:52:10,760
the API Gateway will have to start

1467
00:52:10,760 --> 00:52:13,980
enforcing API specific authorization and

1468
00:52:13,980 --> 00:52:15,839
that's not recommended because if you

1469
00:52:15,839 --> 00:52:17,520
have five apis behind one gateway then

1470
00:52:17,520 --> 00:52:18,780
the API Gateway would have the

1471
00:52:18,780 --> 00:52:20,339
authorization policy for all the apis

1472
00:52:20,339 --> 00:52:22,500
and that that would just be way too fine

1473
00:52:22,500 --> 00:52:24,720
grain to do that in practice but an API

1474
00:52:24,720 --> 00:52:26,579
Gateway could be like hey you're sending

1475
00:52:26,579 --> 00:52:28,559
a request to API one I'm gonna check if

1476
00:52:28,559 --> 00:52:30,059
your access token actually has the

1477
00:52:30,059 --> 00:52:31,740
audience API one because if it hasn't

1478
00:52:31,740 --> 00:52:34,079
you know what get out you don't I'm not

1479
00:52:34,079 --> 00:52:35,400
even gonna forward this because it makes

1480
00:52:35,400 --> 00:52:37,559
no sense so yeah you could reject things

1481
00:52:37,559 --> 00:52:39,780
at that level absolutely but it's always

1482
00:52:39,780 --> 00:52:41,940
going to be a cooperation between both

1483
00:52:41,940 --> 00:52:44,099
to enforce proper authorization so the

1484
00:52:44,099 --> 00:52:45,900
API shouldn't rely on the Gateway like

1485
00:52:45,900 --> 00:52:47,400
yeah the gate will handle everything for

1486
00:52:47,400 --> 00:52:49,680
me no the Gateway can be a first line of

1487
00:52:49,680 --> 00:52:51,359
defense but your apis should always

1488
00:52:51,359 --> 00:52:53,099
handle their authorization checks

1489
00:52:53,099 --> 00:52:55,020
themselves as well maybe some

1490
00:52:55,020 --> 00:52:56,940
duplication but that's going to give you

1491
00:52:56,940 --> 00:53:01,940
a secure design that avoids any bypasses

1492
00:53:02,640 --> 00:53:05,099
thank you Philip uh throughout the

1493
00:53:05,099 --> 00:53:07,440
presentation you give us reasons why we

1494
00:53:07,440 --> 00:53:11,220
should use authentication for apis but

1495
00:53:11,220 --> 00:53:13,380
the Jordan Norton is asking when should

1496
00:53:13,380 --> 00:53:19,339
we not use oet for API Authentication

1497
00:53:20,640 --> 00:53:22,200
um

1498
00:53:22,200 --> 00:53:23,819
yeah that is a good question

1499
00:53:23,819 --> 00:53:25,880
um

1500
00:53:26,099 --> 00:53:28,140
that's that's a hard question to answer

1501
00:53:28,140 --> 00:53:29,940
as well so

1502
00:53:29,940 --> 00:53:34,260
I would say o art is overkill if you

1503
00:53:34,260 --> 00:53:37,700
let me jump back

1504
00:53:38,460 --> 00:53:40,319
to this slide if you

1505
00:53:40,319 --> 00:53:42,359
let's take Twitter as an example if the

1506
00:53:42,359 --> 00:53:44,640
only scenario would be that you have one

1507
00:53:44,640 --> 00:53:48,420
front-end client accessing a Twitter API

1508
00:53:48,420 --> 00:53:50,040
and nothing else like no additional

1509
00:53:50,040 --> 00:53:52,980
clients no third parties no API to API

1510
00:53:52,980 --> 00:53:55,079
access none of that stuff then all that

1511
00:53:55,079 --> 00:53:56,640
is probably Overkill then all you need

1512
00:53:56,640 --> 00:53:58,680
is a way to authenticate a user and

1513
00:53:58,680 --> 00:54:00,960
maintain a session of that authenticated

1514
00:54:00,960 --> 00:54:03,599
user and that's all you need and as much

1515
00:54:03,599 --> 00:54:05,099
as people hate to hear it it actually

1516
00:54:05,099 --> 00:54:06,900
works in such an application works kind

1517
00:54:06,900 --> 00:54:08,339
quite well with server-side session

1518
00:54:08,339 --> 00:54:10,559
information like a j session ID that is

1519
00:54:10,559 --> 00:54:12,240
the perfect way to get that done in a

1520
00:54:12,240 --> 00:54:13,579
small

1521
00:54:13,579 --> 00:54:15,780
non-distributed application that just

1522
00:54:15,780 --> 00:54:16,800
works

1523
00:54:16,800 --> 00:54:18,660
that would be the the simple step

1524
00:54:18,660 --> 00:54:20,640
however if you have multiple clients

1525
00:54:20,640 --> 00:54:23,400
multiple apis if you want to kind of

1526
00:54:23,400 --> 00:54:25,800
decouple the responsibility to for every

1527
00:54:25,800 --> 00:54:27,839
API to know how to authenticate clients

1528
00:54:27,839 --> 00:54:29,460
and users and that stuff

1529
00:54:29,460 --> 00:54:31,680
then you're gonna have to build like an

1530
00:54:31,680 --> 00:54:34,140
external authentication Service somehow

1531
00:54:34,140 --> 00:54:36,660
and before you know it it evolves into

1532
00:54:36,660 --> 00:54:38,640
something that looks a lot like oauth

1533
00:54:38,640 --> 00:54:40,380
and at that point you're just rebuilding

1534
00:54:40,380 --> 00:54:43,559
oauth so the advice is if you well

1535
00:54:43,559 --> 00:54:46,559
decouple your clients from your apis and

1536
00:54:46,559 --> 00:54:49,440
make it easier for apis to make

1537
00:54:49,440 --> 00:54:51,119
authorization decisions with a uniform

1538
00:54:51,119 --> 00:54:53,640
structure or what is a good approach if

1539
00:54:53,640 --> 00:54:55,200
you want to build like a very scalable

1540
00:54:55,200 --> 00:54:56,579
system if you have millions and millions

1541
00:54:56,579 --> 00:54:58,920
of users or you plan to have millions

1542
00:54:58,920 --> 00:55:01,200
and millions of users this would also be

1543
00:55:01,200 --> 00:55:03,359
a good idea because keeping track of

1544
00:55:03,359 --> 00:55:04,980
sessions yourself is not going to work

1545
00:55:04,980 --> 00:55:06,900
well and authorization servers are

1546
00:55:06,900 --> 00:55:08,579
actually built for use cases like that

1547
00:55:08,579 --> 00:55:10,559
so I would say if you run into those

1548
00:55:10,559 --> 00:55:12,420
needs or expect to have those needs in

1549
00:55:12,420 --> 00:55:15,000
the future then this is definitely the

1550
00:55:15,000 --> 00:55:16,500
right approach it's the standardized

1551
00:55:16,500 --> 00:55:18,300
approach it's it's what everybody else

1552
00:55:18,300 --> 00:55:20,220
is doing it's definitely not going away

1553
00:55:20,220 --> 00:55:22,619
anytime soon nobody's going to drop

1554
00:55:22,619 --> 00:55:24,720
support for that it's this is definitely

1555
00:55:24,720 --> 00:55:27,680
the way forward

1556
00:55:28,559 --> 00:55:30,720
thank you again Philip and we would like

1557
00:55:30,720 --> 00:55:31,859
to thank you for the wonderful

1558
00:55:31,859 --> 00:55:34,740
presentation it was very insightful for

1559
00:55:34,740 --> 00:55:36,300
everyone who wants to follow Philip on

1560
00:55:36,300 --> 00:55:38,819
his media platforms you can find the

1561
00:55:38,819 --> 00:55:41,940
details shown on his slides and thank

1562
00:55:41,940 --> 00:55:43,980
you everyone for taking part in our

1563
00:55:43,980 --> 00:55:46,680
before conference uh

1564
00:55:46,680 --> 00:55:48,720
I wish you could stay with us for the

1565
00:55:48,720 --> 00:55:50,880
other for this track and for the other

1566
00:55:50,880 --> 00:55:53,880
sessions that we have today and I'd like

1567
00:55:53,880 --> 00:55:56,099
to thank you Philip for having this

1568
00:55:56,099 --> 00:55:58,619
wonderful talk hope to see you again

1569
00:55:58,619 --> 00:56:00,420
you're very welcome thank you for

1570
00:56:00,420 --> 00:56:02,220
hosting us and enjoy the rest of the day

1571
00:56:02,220 --> 00:56:04,819
to everybody else

