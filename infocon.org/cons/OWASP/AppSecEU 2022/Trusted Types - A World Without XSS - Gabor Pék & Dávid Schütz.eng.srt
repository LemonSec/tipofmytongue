1
00:00:04,319 --> 00:00:06,480
uh welcome to the speakers I would give

2
00:00:06,480 --> 00:00:09,240
you a a few minutes to introduce

3
00:00:09,240 --> 00:00:11,219
yourself a few seconds actually this is

4
00:00:11,219 --> 00:00:13,740
Alan may I will be the moderator of this

5
00:00:13,740 --> 00:00:16,139
session which will be structured uh as

6
00:00:16,139 --> 00:00:18,300
follows and as usual uh after the

7
00:00:18,300 --> 00:00:21,359
presentation of myself and speakers we

8
00:00:21,359 --> 00:00:24,320
will have uh 45 minutes of presentation

9
00:00:24,320 --> 00:00:28,920
then uh 10 minutes of q a and then a few

10
00:00:28,920 --> 00:00:32,460
more minutes for final q a and a summary

11
00:00:32,460 --> 00:00:35,820
so this is uh Alan may I am a volunteer

12
00:00:35,820 --> 00:00:38,420
on this oasp

13
00:00:38,420 --> 00:00:41,520
conference I am working at synopsis

14
00:00:41,520 --> 00:00:44,579
where I develop sales with a leading

15
00:00:44,579 --> 00:00:46,140
seat integrators

16
00:00:46,140 --> 00:00:48,539
and I'm based in France for the time

17
00:00:48,539 --> 00:00:52,500
being thanks a lot uh Gabor and David if

18
00:00:52,500 --> 00:00:55,460
you want to introduce yourself

19
00:00:56,280 --> 00:00:59,399
um yes my name is glauer and um just in

20
00:00:59,399 --> 00:01:01,800
a few words I'm one of the co-founders

21
00:01:01,800 --> 00:01:03,539
of our security company called avatel

22
00:01:03,539 --> 00:01:07,020
and this is uh where we are from we are

23
00:01:07,020 --> 00:01:10,439
based in Hungary mainly and in the US

24
00:01:10,439 --> 00:01:12,060
so

25
00:01:12,060 --> 00:01:15,659
I have also secretive backgrounds and uh

26
00:01:15,659 --> 00:01:17,220
mainly in Marvel security and

27
00:01:17,220 --> 00:01:19,560
virtualization and uh I played a lot of

28
00:01:19,560 --> 00:01:22,920
ctfs back in time so this is my short

29
00:01:22,920 --> 00:01:26,400
bio David the mic is yours yeah thank

30
00:01:26,400 --> 00:01:28,380
you my name is David

31
00:01:28,380 --> 00:01:31,380
um I am currently working at Avatar as a

32
00:01:31,380 --> 00:01:34,439
full stack engineer and uh besides that

33
00:01:34,439 --> 00:01:38,280
I also do bug bounties and I work around

34
00:01:38,280 --> 00:01:40,979
the web security field for for a few

35
00:01:40,979 --> 00:01:43,920
years uh for a few years now currently

36
00:01:43,920 --> 00:01:45,780
I'm in San Francisco and it's in the

37
00:01:45,780 --> 00:01:48,259
morning and Gabor is back in Budapest

38
00:01:48,259 --> 00:01:51,299
it's the afternoon yeah thank you that's

39
00:01:51,299 --> 00:01:55,460
that's for for my introduction

40
00:01:57,360 --> 00:02:00,679
you can start immediately

41
00:02:01,380 --> 00:02:05,939
okay uh do you see my shared screen yes

42
00:02:05,939 --> 00:02:08,340
actually yeah the the audience can uh

43
00:02:08,340 --> 00:02:11,459
put questions here in the Hoover q a and

44
00:02:11,459 --> 00:02:13,200
we'll take them at the end

45
00:02:13,200 --> 00:02:15,840
okay and so uh since you're two speakers

46
00:02:15,840 --> 00:02:20,000
right it will be interactive correct

47
00:02:21,920 --> 00:02:24,959
so we will be switching around uh yeah

48
00:02:24,959 --> 00:02:26,940
one time in the middle essentially okay

49
00:02:26,940 --> 00:02:28,860
yeah go ahead

50
00:02:28,860 --> 00:02:31,800
yeah so all right so

51
00:02:31,800 --> 00:02:35,760
uh thanks for for joining uh we are

52
00:02:35,760 --> 00:02:37,620
going to talk a little bit about trusted

53
00:02:37,620 --> 00:02:41,340
types and trusted types is

54
00:02:41,340 --> 00:02:44,300
trying to handle or literally

55
00:02:44,300 --> 00:02:46,700
interesting issue which is called

56
00:02:46,700 --> 00:02:50,220
loan-based process scripting so what is

57
00:02:50,220 --> 00:02:51,780
cross-site scripting so process

58
00:02:51,780 --> 00:02:54,300
scripting is is everybody thinks when an

59
00:02:54,300 --> 00:02:56,760
alert window pops up as a result of an

60
00:02:56,760 --> 00:02:58,620
injected script is a process scripting

61
00:02:58,620 --> 00:03:00,780
but as the name suggests process

62
00:03:00,780 --> 00:03:03,660
scripting is something which crosses the

63
00:03:03,660 --> 00:03:06,540
borders of different sides and this is

64
00:03:06,540 --> 00:03:08,760
reached by injecting a script for

65
00:03:08,760 --> 00:03:10,980
example into the application into the

66
00:03:10,980 --> 00:03:13,560
application and according to different

67
00:03:13,560 --> 00:03:16,379
background is it is reported to be one

68
00:03:16,379 --> 00:03:19,379
of the most popular thread factors today

69
00:03:19,379 --> 00:03:23,760
so this report is from hackerron from

70
00:03:23,760 --> 00:03:26,819
2020 and um you know back when the

71
00:03:26,819 --> 00:03:29,879
platforms just publish different uh

72
00:03:29,879 --> 00:03:32,819
different websites which promote the

73
00:03:32,819 --> 00:03:36,300
opportunity to be be hacked by different

74
00:03:36,300 --> 00:03:39,480
different hackers and according to this

75
00:03:39,480 --> 00:03:42,180
report process scripting comprises 23

76
00:03:42,180 --> 00:03:44,700
percent of all the reports found in

77
00:03:44,700 --> 00:03:46,200
2020.

78
00:03:46,200 --> 00:03:48,780
this is quite a large demand so it means

79
00:03:48,780 --> 00:03:50,640
that the problem still exists and this

80
00:03:50,640 --> 00:03:52,700
is something which we should take into

81
00:03:52,700 --> 00:03:56,159
uh which we should take into account at

82
00:03:56,159 --> 00:03:57,780
the same time if you remember in 2018

83
00:03:57,780 --> 00:04:00,540
Maria Henrich had a really interesting

84
00:04:00,540 --> 00:04:03,000
talk on crossette scripting what he said

85
00:04:03,000 --> 00:04:04,799
is process scripting is there we just

86
00:04:04,799 --> 00:04:07,560
don't get it so he what he meant is that

87
00:04:07,560 --> 00:04:09,959
we already had the tools we already have

88
00:04:09,959 --> 00:04:12,019
all the all the knowledge to stop

89
00:04:12,019 --> 00:04:14,580
cross-eye scripting he mentioned for

90
00:04:14,580 --> 00:04:16,738
example content sanitization content

91
00:04:16,738 --> 00:04:19,019
transformation or content restriction as

92
00:04:19,019 --> 00:04:21,238
a methodology to stop concept scripting

93
00:04:21,238 --> 00:04:23,100
as a whole but at the same time he

94
00:04:23,100 --> 00:04:24,240
highlighted that there are some edge

95
00:04:24,240 --> 00:04:27,300
cases where process scripting still

96
00:04:27,300 --> 00:04:29,759
exists and one of them was Dom based

97
00:04:29,759 --> 00:04:32,520
crosses scripting so

98
00:04:32,520 --> 00:04:35,220
why is it a problem

99
00:04:35,220 --> 00:04:38,460
um as you know today we tend to use

100
00:04:38,460 --> 00:04:42,120
single page applications Spas which

101
00:04:42,120 --> 00:04:45,720
means that the server rendered uh

102
00:04:45,720 --> 00:04:49,440
option to to generate a new website is

103
00:04:49,440 --> 00:04:53,160
getting a bit uh deprecated and we try

104
00:04:53,160 --> 00:04:55,800
to solve everything on the client side

105
00:04:55,800 --> 00:04:58,020
so we try to push the logic to the

106
00:04:58,020 --> 00:05:00,120
client side it means that the number of

107
00:05:00,120 --> 00:05:03,720
JavaScript code will grow day by day and

108
00:05:03,720 --> 00:05:06,479
of course if the JavaScript code itself

109
00:05:06,479 --> 00:05:09,900
closed then it's going to give a really

110
00:05:09,900 --> 00:05:14,100
really fertile grant for drone based xss

111
00:05:14,100 --> 00:05:15,660
so

112
00:05:15,660 --> 00:05:18,720
how does it look like uh really simple

113
00:05:18,720 --> 00:05:22,680
don't exercise is like this so you have

114
00:05:22,680 --> 00:05:23,940
a

115
00:05:23,940 --> 00:05:28,199
on HTML file in the HTML file you have a

116
00:05:28,199 --> 00:05:30,479
left value and you have a right value in

117
00:05:30,479 --> 00:05:32,940
our case the document body dot innerhtml

118
00:05:32,940 --> 00:05:35,220
is the left value which is called adom

119
00:05:35,220 --> 00:05:36,360
sync

120
00:05:36,360 --> 00:05:38,280
but don't sync means that something

121
00:05:38,280 --> 00:05:42,660
which consumes an input from a user

122
00:05:42,660 --> 00:05:46,500
or from from an assignment and in this

123
00:05:46,500 --> 00:05:49,500
case what you see here is that we assign

124
00:05:49,500 --> 00:05:52,500
to this body.inner HTML their window

125
00:05:52,500 --> 00:05:54,539
location hash

126
00:05:54,539 --> 00:05:57,240
and of course we embrace it into a

127
00:05:57,240 --> 00:05:58,440
header

128
00:05:58,440 --> 00:06:01,440
so what we do here is that we simply

129
00:06:01,440 --> 00:06:04,680
merge two channels a data Channel and a

130
00:06:04,680 --> 00:06:06,120
control channel the control channel is

131
00:06:06,120 --> 00:06:08,160
something which is controlled by the

132
00:06:08,160 --> 00:06:10,680
attacker or user which is location.hash

133
00:06:10,680 --> 00:06:13,919
and the data channel is the left y so

134
00:06:13,919 --> 00:06:17,820
inner HTML so what we try to do now is

135
00:06:17,820 --> 00:06:19,979
by merging these two channels and as a

136
00:06:19,979 --> 00:06:22,380
result we give the control to the

137
00:06:22,380 --> 00:06:26,120
attacker so if we

138
00:06:26,120 --> 00:06:29,460
have a website like this with a Dom

139
00:06:29,460 --> 00:06:32,280
thing like this then what we are going

140
00:06:32,280 --> 00:06:35,940
to have is a simple cross-site scripting

141
00:06:35,940 --> 00:06:39,180
which is in that case an alert window is

142
00:06:39,180 --> 00:06:40,979
popped up

143
00:06:40,979 --> 00:06:43,740
so as you see the problem is

144
00:06:43,740 --> 00:06:46,919
is with us and why is it a problem

145
00:06:46,919 --> 00:06:50,460
because as you so it's really easy to

146
00:06:50,460 --> 00:06:52,500
create such a thing the Dom API was

147
00:06:52,500 --> 00:06:55,259
designed without a security mindset so

148
00:06:55,259 --> 00:06:57,419
there was no real security engineering

149
00:06:57,419 --> 00:06:59,940
when the Dome API the document object

150
00:06:59,940 --> 00:07:03,060
model API was designed so it means that

151
00:07:03,060 --> 00:07:06,419
there are many many ways to give a value

152
00:07:06,419 --> 00:07:09,360
to Adam saying there are over 60 domes

153
00:07:09,360 --> 00:07:12,840
things or run in the Dom API so we just

154
00:07:12,840 --> 00:07:15,240
enumerate a couple of them here so you

155
00:07:15,240 --> 00:07:17,940
can use evil or you can use the script

156
00:07:17,940 --> 00:07:21,479
to be assigned by it for the script that

157
00:07:21,479 --> 00:07:24,840
can be can be assigned or the diff that

158
00:07:24,840 --> 00:07:28,199
can be assigned or the a a element can

159
00:07:28,199 --> 00:07:30,180
be assigned so basically there are

160
00:07:30,180 --> 00:07:33,240
various ways to assign a value to a Dom

161
00:07:33,240 --> 00:07:34,259
element

162
00:07:34,259 --> 00:07:35,759
so it means that it's really really

163
00:07:35,759 --> 00:07:39,180
difficult to track where a given value

164
00:07:39,180 --> 00:07:42,300
comes from so you can imagine that where

165
00:07:42,300 --> 00:07:45,000
you might arrive land at a given

166
00:07:45,000 --> 00:07:46,680
specific

167
00:07:46,680 --> 00:07:49,560
specific Dom sync from from really

168
00:07:49,560 --> 00:07:51,419
various resources

169
00:07:51,419 --> 00:07:52,500
so

170
00:07:52,500 --> 00:07:54,599
Google had

171
00:07:54,599 --> 00:07:55,800
um

172
00:07:55,800 --> 00:07:57,660
a really really interesting research

173
00:07:57,660 --> 00:08:00,840
back in them and they created

174
00:08:00,840 --> 00:08:01,800
um

175
00:08:01,800 --> 00:08:04,520
a two record safe types and safe types

176
00:08:04,520 --> 00:08:07,740
was a solution where they

177
00:08:07,740 --> 00:08:10,740
where they wanted to somehow handle

178
00:08:10,740 --> 00:08:13,380
don't base color side switching and from

179
00:08:13,380 --> 00:08:15,539
these safe types after six years of

180
00:08:15,539 --> 00:08:18,539
research research and uh realizing that

181
00:08:18,539 --> 00:08:20,220
this is something that which is works

182
00:08:20,220 --> 00:08:22,620
the Google team decided to release it to

183
00:08:22,620 --> 00:08:25,680
the public and kind of tries to now

184
00:08:25,680 --> 00:08:27,539
standardize it as a trusted type so

185
00:08:27,539 --> 00:08:28,860
trusted types comes from Google

186
00:08:28,860 --> 00:08:31,379
originally and this they are the driving

187
00:08:31,379 --> 00:08:33,539
force behind this research project

188
00:08:33,539 --> 00:08:36,299
so the main idea behind trusted type is

189
00:08:36,299 --> 00:08:39,659
the following so the Dom API supports

190
00:08:39,659 --> 00:08:42,479
not only the string based assignment but

191
00:08:42,479 --> 00:08:45,480
you can also assign objects to all fyu

192
00:08:45,480 --> 00:08:47,880
so on the left lane you see that there's

193
00:08:47,880 --> 00:08:50,000
an application JavaScript

194
00:08:50,000 --> 00:08:54,899
which uh which tries to tries to assign

195
00:08:54,899 --> 00:08:57,779
us pure string a plain text string to

196
00:08:57,779 --> 00:09:00,120
Adam sing to the Dom element and what

197
00:09:00,120 --> 00:09:02,459
Frosty type does that it restricts that

198
00:09:02,459 --> 00:09:05,820
only type objects trusted types objects

199
00:09:05,820 --> 00:09:08,700
can be assigned to a value so if

200
00:09:08,700 --> 00:09:11,640
something is not flagged not tainted as

201
00:09:11,640 --> 00:09:16,200
a trusted input then the the browser

202
00:09:16,200 --> 00:09:19,980
will not uh do this operation so it will

203
00:09:19,980 --> 00:09:22,500
not do this time it will it will drop an

204
00:09:22,500 --> 00:09:24,120
error there are different configurations

205
00:09:24,120 --> 00:09:27,420
but ideally it it drops and it won't run

206
00:09:27,420 --> 00:09:30,060
the assignment so on the right lane you

207
00:09:30,060 --> 00:09:33,300
see how it works so basically in the

208
00:09:33,300 --> 00:09:34,860
first place you have the input which is

209
00:09:34,860 --> 00:09:36,540
the very same string

210
00:09:36,540 --> 00:09:38,399
and um

211
00:09:38,399 --> 00:09:41,519
uh first uh you you you would like to

212
00:09:41,519 --> 00:09:43,740
somehow transform it to a trusted HTML

213
00:09:43,740 --> 00:09:46,500
so to transform it you have the trusted

214
00:09:46,500 --> 00:09:49,140
types types policy and The Trusted types

215
00:09:49,140 --> 00:09:50,880
process is something that you as a user

216
00:09:50,880 --> 00:09:52,260
can Define

217
00:09:52,260 --> 00:09:53,940
there are also some restrictions that

218
00:09:53,940 --> 00:09:56,100
who is the one who can Define such a

219
00:09:56,100 --> 00:09:58,920
policy but ideally you have restricted

220
00:09:58,920 --> 00:10:00,600
whitelistic policy that these are the

221
00:10:00,600 --> 00:10:03,240
policies that can be used only by the

222
00:10:03,240 --> 00:10:04,680
application itself

223
00:10:04,680 --> 00:10:09,959
so once this policy retrieves this uh

224
00:10:09,959 --> 00:10:12,480
this string is going to transform it to

225
00:10:12,480 --> 00:10:14,100
a trusted HTML

226
00:10:14,100 --> 00:10:16,920
and this trusted HTML will be done later

227
00:10:16,920 --> 00:10:19,200
passed to the Dom sync

228
00:10:19,200 --> 00:10:23,360
so from now on we can create a rule that

229
00:10:23,360 --> 00:10:25,980
this all of those things all the over

230
00:10:25,980 --> 00:10:27,959
six domain scenes can only accept

231
00:10:27,959 --> 00:10:31,500
trusted htms or trusted URLs or strategy

232
00:10:31,500 --> 00:10:33,360
scripts which I'm going to mention later

233
00:10:33,360 --> 00:10:37,019
on so type based protection is

234
00:10:37,019 --> 00:10:40,080
introduced by this idea

235
00:10:40,080 --> 00:10:43,440
so as I said earlier it is enforced by

236
00:10:43,440 --> 00:10:45,420
the browser itself so there's no way to

237
00:10:45,420 --> 00:10:47,700
to cheat it so there is no way to to say

238
00:10:47,700 --> 00:10:50,940
that hey I wouldn't like to to have this

239
00:10:50,940 --> 00:10:53,579
and this part of the code be regulated

240
00:10:53,579 --> 00:10:57,600
by by typescript by by um trusted types

241
00:10:57,600 --> 00:11:01,320
but this is an overall production so

242
00:11:01,320 --> 00:11:03,839
even if you are about to introduce a

243
00:11:03,839 --> 00:11:06,060
surprise library

244
00:11:06,060 --> 00:11:08,519
is going to affect this as well that's

245
00:11:08,519 --> 00:11:11,700
that's why it's a great idea and

246
00:11:11,700 --> 00:11:13,500
how you can use it in practice it's

247
00:11:13,500 --> 00:11:16,200
quite simple so just back to the

248
00:11:16,200 --> 00:11:19,140
previous example when we used body dot

249
00:11:19,140 --> 00:11:22,260
in our HTML so we now assign a Simple

250
00:11:22,260 --> 00:11:26,339
Pure string head to this body inner HTML

251
00:11:26,339 --> 00:11:29,820
and you see when this Transit device is

252
00:11:29,820 --> 00:11:32,160
turned on the browser will report an

253
00:11:32,160 --> 00:11:34,620
error that this document requires a

254
00:11:34,620 --> 00:11:37,079
trusted HTML assignment so it enforces

255
00:11:37,079 --> 00:11:40,140
that only a trusted HTML object can be

256
00:11:40,140 --> 00:11:43,680
assigned to all fyu and also it drops an

257
00:11:43,680 --> 00:11:46,260
error type error say to set the

258
00:11:46,260 --> 00:11:48,000
iteration of property on an end this

259
00:11:48,000 --> 00:11:49,620
document requires process HTML

260
00:11:49,620 --> 00:11:51,779
assignment so it's quite clear

261
00:11:51,779 --> 00:11:54,480
so how do you turn it on so to turn it

262
00:11:54,480 --> 00:11:56,399
on you need to use content security

263
00:11:56,399 --> 00:11:58,320
policy and in your content security

264
00:11:58,320 --> 00:12:00,480
space is something which is written by

265
00:12:00,480 --> 00:12:02,579
the by the server and the browser will

266
00:12:02,579 --> 00:12:06,120
will force it and and and understands

267
00:12:06,120 --> 00:12:07,620
what kind of options what kind of

268
00:12:07,620 --> 00:12:10,200
restrictions are turned on so

269
00:12:10,200 --> 00:12:12,480
here we Define it we would like to use a

270
00:12:12,480 --> 00:12:14,160
policy in our cases it's called my

271
00:12:14,160 --> 00:12:15,180
policy

272
00:12:15,180 --> 00:12:18,420
this is uh this is the policy which we

273
00:12:18,420 --> 00:12:20,100
are going to use and where our

274
00:12:20,100 --> 00:12:21,779
regulation where our restrictions will

275
00:12:21,779 --> 00:12:24,000
be inserted into and the required

276
00:12:24,000 --> 00:12:26,640
trusted types for script means that any

277
00:12:26,640 --> 00:12:30,540
type of script will go under the the

278
00:12:30,540 --> 00:12:32,880
Restriction mechanism the sanitization

279
00:12:32,880 --> 00:12:36,779
mechanism of trusted types so

280
00:12:36,779 --> 00:12:39,660
why is it good because you can use any

281
00:12:39,660 --> 00:12:41,760
type of sanitizer from now on for

282
00:12:41,760 --> 00:12:44,700
example don't purify or or any kind of

283
00:12:44,700 --> 00:12:47,519
HTML purifier whatever you uh sanitizer

284
00:12:47,519 --> 00:12:49,740
you would like to use

285
00:12:49,740 --> 00:12:52,860
uh in inside the policy so creating a

286
00:12:52,860 --> 00:12:55,500
policy is also really really uh easy

287
00:12:55,500 --> 00:12:57,120
because it's in an extra extract

288
00:12:57,120 --> 00:13:01,740
abstraction layer a top um just um a

289
00:13:01,740 --> 00:13:04,079
simple standardization mechanism so you

290
00:13:04,079 --> 00:13:06,540
create a policy which in our business is

291
00:13:06,540 --> 00:13:09,480
called my policy and basically it takes

292
00:13:09,480 --> 00:13:12,779
a string as an input why the create HTML

293
00:13:12,779 --> 00:13:15,420
function and it returns a saved version

294
00:13:15,420 --> 00:13:18,060
of course there is no no standardization

295
00:13:18,060 --> 00:13:20,639
in this very simple example but you can

296
00:13:20,639 --> 00:13:23,040
write any type of safety logic here so

297
00:13:23,040 --> 00:13:25,380
it's quite simple

298
00:13:25,380 --> 00:13:28,079
so as I said earlier

299
00:13:28,079 --> 00:13:31,019
there are by definition by the standard

300
00:13:31,019 --> 00:13:33,899
there are three different types of of

301
00:13:33,899 --> 00:13:37,680
um of uh elements that you can define a

302
00:13:37,680 --> 00:13:39,959
trusted type four so you can Define

303
00:13:39,959 --> 00:13:42,720
attrustive type for scripts URL so this

304
00:13:42,720 --> 00:13:44,700
is something where

305
00:13:44,700 --> 00:13:47,820
um a script for example Google analytics

306
00:13:47,820 --> 00:13:49,980
will be embedded somewhere into your

307
00:13:49,980 --> 00:13:51,899
site so you'd like to make sure that

308
00:13:51,899 --> 00:13:54,600
this very script the URL which refers to

309
00:13:54,600 --> 00:13:58,980
a script is safe and sound you can refer

310
00:13:58,980 --> 00:14:01,200
to a script which is any any kind of

311
00:14:01,200 --> 00:14:03,000
script which is which is assigned to a

312
00:14:03,000 --> 00:14:06,420
Dom sync or HTML Melbourne HTML tag is

313
00:14:06,420 --> 00:14:08,399
assigned to a Dom's thing and there is

314
00:14:08,399 --> 00:14:10,620
also a fourth option mentioned by Google

315
00:14:10,620 --> 00:14:13,019
which is the URL itself but this is not

316
00:14:13,019 --> 00:14:16,019
part of the standardization as we as we

317
00:14:16,019 --> 00:14:18,720
realize it so just wrapping up what I

318
00:14:18,720 --> 00:14:21,120
was talking about is just first and

319
00:14:21,120 --> 00:14:23,820
foremost uh you must approve all values

320
00:14:23,820 --> 00:14:26,820
before getting inserted into the Dom so

321
00:14:26,820 --> 00:14:29,880
no matter where the data comes from

322
00:14:29,880 --> 00:14:32,760
everything needs to be accepted by The

323
00:14:32,760 --> 00:14:34,380
Trusted types policy and this is a

324
00:14:34,380 --> 00:14:36,480
really really great win so nothing can

325
00:14:36,480 --> 00:14:38,100
accidentally end up in the Dom so there

326
00:14:38,100 --> 00:14:40,260
is no way to circumvent somehow and say

327
00:14:40,260 --> 00:14:42,000
that oh I'm an exception there's no such

328
00:14:42,000 --> 00:14:44,820
a thing and and here is an also really

329
00:14:44,820 --> 00:14:47,040
important takeaway that if there is a

330
00:14:47,040 --> 00:14:50,279
bug in the policy then you might pass

331
00:14:50,279 --> 00:14:52,800
trusted types otherwise it's impossible

332
00:14:52,800 --> 00:14:56,279
so if your sanitization procedure is

333
00:14:56,279 --> 00:14:58,500
working properly inside the policy that

334
00:14:58,500 --> 00:15:01,139
there is no bug that can pass this kind

335
00:15:01,139 --> 00:15:02,519
of mechanism

336
00:15:02,519 --> 00:15:05,639
so another key key thing is that there

337
00:15:05,639 --> 00:15:11,040
is a centralized location for security

338
00:15:11,040 --> 00:15:14,699
um operations so once you once you

339
00:15:14,699 --> 00:15:18,959
decide to review the the website to find

340
00:15:18,959 --> 00:15:22,139
don't xss you need to only parse the

341
00:15:22,139 --> 00:15:25,320
policies so if you write these places

342
00:15:25,320 --> 00:15:28,199
properly the circuitry review has to

343
00:15:28,199 --> 00:15:30,360
cover only these policies

344
00:15:30,360 --> 00:15:32,399
and um

345
00:15:32,399 --> 00:15:34,500
and these are the most important things

346
00:15:34,500 --> 00:15:36,000
so

347
00:15:36,000 --> 00:15:38,279
um basically process process scripting

348
00:15:38,279 --> 00:15:41,160
don't miss process scripting uh is

349
00:15:41,160 --> 00:15:45,710
reported to be totally totally

350
00:15:45,710 --> 00:15:46,139
[Music]

351
00:15:46,139 --> 00:15:47,480
um

352
00:15:47,480 --> 00:15:50,760
circumvented by trusted types reported

353
00:15:50,760 --> 00:15:54,120
by Google and um I think this is the

354
00:15:54,120 --> 00:15:56,820
time when I give the mic to my colleague

355
00:15:56,820 --> 00:15:59,880
David and he is going to tell you why so

356
00:15:59,880 --> 00:16:02,040
thank you thank you

357
00:16:02,040 --> 00:16:05,459
thank you Gabor I'm going to uh go ahead

358
00:16:05,459 --> 00:16:08,940
and share my screen just so I can

359
00:16:08,940 --> 00:16:12,440
I can control the slides

360
00:16:15,779 --> 00:16:18,079
okay

361
00:16:19,560 --> 00:16:21,420
sorry I might be having a little bit of

362
00:16:21,420 --> 00:16:24,920
technical difficulties let me just

363
00:16:25,079 --> 00:16:27,079
now this is Allen

364
00:16:27,079 --> 00:16:30,300
memories so far but do not hesitate to

365
00:16:30,300 --> 00:16:32,880
um to leave questions or comments on the

366
00:16:32,880 --> 00:16:34,380
Hoover q a

367
00:16:34,380 --> 00:16:36,360
back to you David thank you thank you

368
00:16:36,360 --> 00:16:38,279
thank you so much so uh my screen share

369
00:16:38,279 --> 00:16:42,380
let me just rejoin uh just a second

370
00:17:02,100 --> 00:17:06,380
okay here I am can you guys hear me

371
00:17:08,520 --> 00:17:11,699
yes we hear you

372
00:17:11,699 --> 00:17:14,099
thank you it says your screen screen

373
00:17:14,099 --> 00:17:16,380
sharing is paused

374
00:17:16,380 --> 00:17:20,699
yeah it's it's a started but uh okay

375
00:17:20,699 --> 00:17:24,179
okay now you can see the slides right

376
00:17:24,179 --> 00:17:27,439
yeah here we go okay

377
00:17:27,439 --> 00:17:30,540
thank you awesome sorry about that all

378
00:17:30,540 --> 00:17:33,120
right so uh what my part uh in this

379
00:17:33,120 --> 00:17:35,340
presentation is going to be about uh how

380
00:17:35,340 --> 00:17:38,580
we experienced this uh at the hotel

381
00:17:38,580 --> 00:17:40,140
because

382
00:17:40,140 --> 00:17:42,299
um we planned this sort of experiment of

383
00:17:42,299 --> 00:17:46,020
of uh of you know trusted type sounded

384
00:17:46,020 --> 00:17:48,120
great in theory but uh we wanted to try

385
00:17:48,120 --> 00:17:49,799
it out how does it look like to actually

386
00:17:49,799 --> 00:17:52,620
implement it into into a in this sort of

387
00:17:52,620 --> 00:17:57,000
uh mid-sized uh application and and I'm

388
00:17:57,000 --> 00:17:59,100
going to tell you all of the challenges

389
00:17:59,100 --> 00:18:01,140
that I was personally doing this sort of

390
00:18:01,140 --> 00:18:02,520
This research and this implementation

391
00:18:02,520 --> 00:18:04,559
and I'm going to tell you uh what

392
00:18:04,559 --> 00:18:07,380
challenges I have faced and uh and how

393
00:18:07,380 --> 00:18:10,080
what kind of experience it was to

394
00:18:10,080 --> 00:18:13,020
to you know convert a a website that

395
00:18:13,020 --> 00:18:15,360
doesn't support traffic types into uh

396
00:18:15,360 --> 00:18:18,480
supporting trusted types so I think from

397
00:18:18,480 --> 00:18:21,660
the first and most important uh part to

398
00:18:21,660 --> 00:18:25,080
mention is that our platform is uh our

399
00:18:25,080 --> 00:18:29,000
website is uh running on angular and

400
00:18:29,000 --> 00:18:32,340
angular handles most of the stuff that

401
00:18:32,340 --> 00:18:34,140
we that we do

402
00:18:34,140 --> 00:18:37,520
this means that the core uh the core

403
00:18:37,520 --> 00:18:40,740
stuff should be solved by angular itself

404
00:18:40,740 --> 00:18:43,740
and indeed it is so if you go to the

405
00:18:43,740 --> 00:18:46,380
angular angular documentation there is a

406
00:18:46,380 --> 00:18:48,419
section about the enforcing trusted

407
00:18:48,419 --> 00:18:51,900
types and it clearly says that it should

408
00:18:51,900 --> 00:18:53,700
be quite easy and straightforward the

409
00:18:53,700 --> 00:18:55,400
documentation is very slow very very

410
00:18:55,400 --> 00:18:59,940
small and and it mentions that there are

411
00:18:59,940 --> 00:19:02,700
three specific policies that if you

412
00:19:02,700 --> 00:19:04,799
enable as gambo showed before these

413
00:19:04,799 --> 00:19:06,299
policies are handled by angular you

414
00:19:06,299 --> 00:19:07,740
don't have to do anything with them you

415
00:19:07,740 --> 00:19:09,840
just have to enable them in the content

416
00:19:09,840 --> 00:19:12,419
security policy header that we looked at

417
00:19:12,419 --> 00:19:15,419
and and based on angular's documentation

418
00:19:15,419 --> 00:19:19,260
which all these policies then everything

419
00:19:19,260 --> 00:19:21,660
will just work and angularly use these

420
00:19:21,660 --> 00:19:24,179
policies to actually render the page and

421
00:19:24,179 --> 00:19:28,140
and to inject the inject the the HTML

422
00:19:28,140 --> 00:19:30,299
into the Dom now with this of course

423
00:19:30,299 --> 00:19:32,220
you're putting it putting the trust into

424
00:19:32,220 --> 00:19:33,960
angular's hands but that's sort of what

425
00:19:33,960 --> 00:19:37,140
you when you're using a paper like this

426
00:19:37,140 --> 00:19:39,600
one so I thought that this you know this

427
00:19:39,600 --> 00:19:41,640
is very easy I just I just enable all of

428
00:19:41,640 --> 00:19:43,380
these policies I actually didn't even

429
00:19:43,380 --> 00:19:45,720
needed the unsafe thing because we are

430
00:19:45,720 --> 00:19:48,840
not using the digit compiler stuff so I

431
00:19:48,840 --> 00:19:50,820
enabled angular and angular and save

432
00:19:50,820 --> 00:19:53,460
bypass and uh

433
00:19:53,460 --> 00:19:56,820
and it sort of worked it wasn't that

434
00:19:56,820 --> 00:19:59,340
easy the first challenge that that

435
00:19:59,340 --> 00:20:01,500
happened was that we are using well

436
00:20:01,500 --> 00:20:03,539
webpack under the hood or angular sort

437
00:20:03,539 --> 00:20:05,820
of uses it under the hood and it has a

438
00:20:05,820 --> 00:20:07,620
feature called lazy loading which means

439
00:20:07,620 --> 00:20:10,380
that it loads modules only when they are

440
00:20:10,380 --> 00:20:12,780
necessary like they that the sort of

441
00:20:12,780 --> 00:20:14,100
means that there are specific JavaScript

442
00:20:14,100 --> 00:20:17,160
files in the final uh of the site and

443
00:20:17,160 --> 00:20:18,900
when you navigate to a specific feature

444
00:20:18,900 --> 00:20:20,640
of the application it will load that

445
00:20:20,640 --> 00:20:24,620
given Javascript file now this sort of

446
00:20:24,620 --> 00:20:28,260
dynamic loading of JavaScript files uh

447
00:20:28,260 --> 00:20:30,480
wasn't really compatible with trusted

448
00:20:30,480 --> 00:20:33,360
types at the at the webpack version that

449
00:20:33,360 --> 00:20:37,740
we were using so I started and I found a

450
00:20:37,740 --> 00:20:39,660
GitHub issue that build a bunch of

451
00:20:39,660 --> 00:20:40,919
screenshots of GitHub issues because

452
00:20:40,919 --> 00:20:42,780
people are still figuring this out they

453
00:20:42,780 --> 00:20:45,660
found the GitHub issue uh which reported

454
00:20:45,660 --> 00:20:47,400
exactly this that you enabled the the

455
00:20:47,400 --> 00:20:49,679
you go over the official angular docs

456
00:20:49,679 --> 00:20:51,900
and you enable the policies and it's not

457
00:20:51,900 --> 00:20:54,000
going to work because lazy loading is is

458
00:20:54,000 --> 00:20:56,640
not is not supported properly and the

459
00:20:56,640 --> 00:20:59,299
the arrest response of the angular team

460
00:20:59,299 --> 00:21:02,640
to this or like like the GitHub issued

461
00:21:02,640 --> 00:21:05,700
response was simply that uh they they

462
00:21:05,700 --> 00:21:07,919
they opened up a pull request to remove

463
00:21:07,919 --> 00:21:10,380
the documentation about trusted Types on

464
00:21:10,380 --> 00:21:12,660
the from the angular dots so they stated

465
00:21:12,660 --> 00:21:14,160
that okay so we are actually not

466
00:21:14,160 --> 00:21:16,440
supporting trusted types let's remove

467
00:21:16,440 --> 00:21:19,860
the documentation from the angular Docs

468
00:21:19,860 --> 00:21:21,960
well that was sort of an unexpected

469
00:21:21,960 --> 00:21:23,700
thing you know I wasn't looking for it I

470
00:21:23,700 --> 00:21:25,260
was looking for a solution and not not

471
00:21:25,260 --> 00:21:28,559
removing it from docs so I had to I had

472
00:21:28,559 --> 00:21:30,480
to look a little bit uh

473
00:21:30,480 --> 00:21:33,659
a little bit deeper and um and there

474
00:21:33,659 --> 00:21:36,360
were two ways to to kind of work this

475
00:21:36,360 --> 00:21:39,059
first web webpack uh lazy loading issue

476
00:21:39,059 --> 00:21:42,419
the first was that first of all we were

477
00:21:42,419 --> 00:21:45,059
using webpack four point something and

478
00:21:45,059 --> 00:21:47,580
webpack 5 is actually supporting

479
00:21:47,580 --> 00:21:49,799
prostate types when you load these

480
00:21:49,799 --> 00:21:51,120
Dynamic modules

481
00:21:51,120 --> 00:21:54,480
um and we needed that now to get webpack

482
00:21:54,480 --> 00:21:57,980
5 you have access to do it you either

483
00:21:57,980 --> 00:22:00,840
we had angular 11 I have to say that

484
00:22:00,840 --> 00:22:03,419
first because angular 11 is sort of an

485
00:22:03,419 --> 00:22:05,520
older version of angular already so

486
00:22:05,520 --> 00:22:07,740
there are newer versions already but we

487
00:22:07,740 --> 00:22:10,140
we were running on angular 11 and that

488
00:22:10,140 --> 00:22:13,380
had the webpack for a version uh

489
00:22:13,380 --> 00:22:16,799
connected tape now there is uh something

490
00:22:16,799 --> 00:22:18,539
called the experimental webpack 5

491
00:22:18,539 --> 00:22:21,000
support in a angular 11 which is not

492
00:22:21,000 --> 00:22:23,159
really supported for production but you

493
00:22:23,159 --> 00:22:26,100
can you can essentially use webpack 5

494
00:22:26,100 --> 00:22:29,520
with angular 11. if you specify if you

495
00:22:29,520 --> 00:22:31,980
pull in a few you like third-party

496
00:22:31,980 --> 00:22:33,840
config packages and configure it and

497
00:22:33,840 --> 00:22:36,299
manually band the dependency so that was

498
00:22:36,299 --> 00:22:38,039
one way to do it and the other way to do

499
00:22:38,039 --> 00:22:40,080
it was to upgrade to upgrade the whole

500
00:22:40,080 --> 00:22:41,640
application to angular 12 because

501
00:22:41,640 --> 00:22:45,059
angular 12 was actually using the newer

502
00:22:45,059 --> 00:22:47,580
webpack version it was actually using

503
00:22:47,580 --> 00:22:50,460
support uh it was including support for

504
00:22:50,460 --> 00:22:52,799
the whole webpack Port of trusted types

505
00:22:52,799 --> 00:22:57,059
now in this third process it was you

506
00:22:57,059 --> 00:22:59,159
know weighing all these options and and

507
00:22:59,159 --> 00:23:02,159
we decided to uh based on the fact that

508
00:23:02,159 --> 00:23:04,880
angular angular 11 is already deprecated

509
00:23:04,880 --> 00:23:08,600
and it already should be

510
00:23:08,600 --> 00:23:11,700
upgraded anyways we decided the way to

511
00:23:11,700 --> 00:23:14,039
go is to upgrade to m012 because that's

512
00:23:14,039 --> 00:23:16,020
that's already a supported version of

513
00:23:16,020 --> 00:23:17,580
angular

514
00:23:17,580 --> 00:23:22,200
um and that that uh sort of work now a

515
00:23:22,200 --> 00:23:25,140
angular update to an application is is

516
00:23:25,140 --> 00:23:28,020
quite a big deal I would say so you

517
00:23:28,020 --> 00:23:29,520
wouldn't expect to like do it every

518
00:23:29,520 --> 00:23:33,480
single day but but it went well smoothly

519
00:23:33,480 --> 00:23:35,100
enough I guess if you have an angular

520
00:23:35,100 --> 00:23:37,380
application you experience this a few

521
00:23:37,380 --> 00:23:39,059
times because you have to you know keep

522
00:23:39,059 --> 00:23:41,520
on upgrading there is a very helpful guy

523
00:23:41,520 --> 00:23:44,280
that update.angular.io which tells you a

524
00:23:44,280 --> 00:23:45,900
little checklist if you provide what

525
00:23:45,900 --> 00:23:47,820
version from and what version two you

526
00:23:47,820 --> 00:23:49,559
are upgrading and it tells you to what

527
00:23:49,559 --> 00:23:54,440
specific code uh what sort of like

528
00:23:54,440 --> 00:23:56,820
usages you should check in your code

529
00:23:56,820 --> 00:23:59,460
which might might break in in regard to

530
00:23:59,460 --> 00:24:01,140
this upgrade and what you you should do

531
00:24:01,140 --> 00:24:04,740
to upgrade I went through all of this uh

532
00:24:04,740 --> 00:24:07,080
of the checklist and I looked at

533
00:24:07,080 --> 00:24:09,419
everything and it's everything looked

534
00:24:09,419 --> 00:24:13,380
smooth so I upgraded to NGO 12. now we

535
00:24:13,380 --> 00:24:15,059
had running up and running on angular

536
00:24:15,059 --> 00:24:18,240
12. and once again the documentation

537
00:24:18,240 --> 00:24:20,460
here was was straight up terrible so

538
00:24:20,460 --> 00:24:24,000
even though uh webpack 5 was now used

539
00:24:24,000 --> 00:24:26,580
and angular 12 was not used which had

540
00:24:26,580 --> 00:24:29,100
support for trusted types

541
00:24:29,100 --> 00:24:32,820
you still have to enable a new policy

542
00:24:32,820 --> 00:24:35,400
which was used by webpacks the webpack

543
00:24:35,400 --> 00:24:37,140
has a policy just as I showed you

544
00:24:37,140 --> 00:24:39,659
earlier the angular had free now webpack

545
00:24:39,659 --> 00:24:41,760
also had one in this new configuration

546
00:24:41,760 --> 00:24:43,799
and and you had to enable that now but

547
00:24:43,799 --> 00:24:45,240
it wasn't obvious what's the name of

548
00:24:45,240 --> 00:24:48,600
that one but in the GitHub and angular's

549
00:24:48,600 --> 00:24:50,700
GitHub code or like angular source code

550
00:24:50,700 --> 00:24:52,440
you can sort of find it out from or by

551
00:24:52,440 --> 00:24:54,299
the crash loads that it's called angular

552
00:24:54,299 --> 00:24:57,000
hashtag Builders so if you enable this

553
00:24:57,000 --> 00:24:59,159
policy with the other three that I

554
00:24:59,159 --> 00:25:01,140
showed you earlier and upgraded to

555
00:25:01,140 --> 00:25:03,140
angular 12 at least

556
00:25:03,140 --> 00:25:06,120
they were sort of good to go in terms of

557
00:25:06,120 --> 00:25:08,940
angular so after doing that and enabling

558
00:25:08,940 --> 00:25:11,760
those three or four policies in the CSP

559
00:25:11,760 --> 00:25:13,500
header

560
00:25:13,500 --> 00:25:15,900
um our core application logic was

561
00:25:15,900 --> 00:25:18,840
working well and trusted types were

562
00:25:18,840 --> 00:25:20,360
enforced

563
00:25:20,360 --> 00:25:24,360
but it it's not where the story ends

564
00:25:24,360 --> 00:25:27,480
because you rarely only use native or

565
00:25:27,480 --> 00:25:31,200
like pure angular you already you sort

566
00:25:31,200 --> 00:25:33,960
of have other stuff too sometimes

567
00:25:33,960 --> 00:25:36,240
yes this is the this is the free

568
00:25:36,240 --> 00:25:38,100
policies that I talked about I'm sorry

569
00:25:38,100 --> 00:25:40,620
about that the angular danger and say

570
00:25:40,620 --> 00:25:43,340
pipest and the angular bundle bundler

571
00:25:43,340 --> 00:25:48,140
enabling these three enabled the Avatar

572
00:25:48,140 --> 00:25:50,880
web application to function quite

573
00:25:50,880 --> 00:25:54,179
normally except a few exceptions and and

574
00:25:54,179 --> 00:25:59,279
the exceptions or you get so tricky

575
00:25:59,279 --> 00:26:02,760
so I went on and started you know using

576
00:26:02,760 --> 00:26:04,980
testing the application to figure out uh

577
00:26:04,980 --> 00:26:07,500
okay it sort of works but what is still

578
00:26:07,500 --> 00:26:08,760
broken

579
00:26:08,760 --> 00:26:12,480
and I found a few things and

580
00:26:12,480 --> 00:26:16,080
these were mainly free specifications

581
00:26:16,080 --> 00:26:19,440
first issue was with as you already

582
00:26:19,440 --> 00:26:21,419
noticed these are with third-party

583
00:26:21,419 --> 00:26:23,880
packages that we are using that's that's

584
00:26:23,880 --> 00:26:27,059
the theme really uh and our own

585
00:26:27,059 --> 00:26:29,640
analytics implementation so first issue

586
00:26:29,640 --> 00:26:34,740
was was very obvious is that we have

587
00:26:34,740 --> 00:26:37,080
we have this Challenge and exercise

588
00:26:37,080 --> 00:26:39,299
pages on the platform where our users

589
00:26:39,299 --> 00:26:42,059
can start up exercises and these

590
00:26:42,059 --> 00:26:44,940
exercise Pages have descriptions and

591
00:26:44,940 --> 00:26:47,700
these descriptions are written using

592
00:26:47,700 --> 00:26:50,880
markdown and when we are displaying

593
00:26:50,880 --> 00:26:52,559
these descriptions on the on the web

594
00:26:52,559 --> 00:26:57,720
application we are using a ngx markdown

595
00:26:57,720 --> 00:27:00,960
to to pause the markdown and display it

596
00:27:00,960 --> 00:27:05,820
in in some type of HTML and this package

597
00:27:05,820 --> 00:27:09,059
was of course not not supporting trusted

598
00:27:09,059 --> 00:27:11,100
types because it's still in a very early

599
00:27:11,100 --> 00:27:15,000
early phases so as you can clearly see

600
00:27:15,000 --> 00:27:19,080
uh it was crashing when it tried to put

601
00:27:19,080 --> 00:27:22,440
the the pause HTML description into the

602
00:27:22,440 --> 00:27:26,400
into the Dom I will go into more detail

603
00:27:26,400 --> 00:27:28,860
in a bit on the right side there is

604
00:27:28,860 --> 00:27:32,640
another area which was a bit painful to

605
00:27:32,640 --> 00:27:36,059
to fix this was with a a feature that we

606
00:27:36,059 --> 00:27:39,179
have when you complete a specific set of

607
00:27:39,179 --> 00:27:43,020
exercises you get a certificate now

608
00:27:43,020 --> 00:27:45,900
there is a little button here which says

609
00:27:45,900 --> 00:27:48,179
download certificate and what this

610
00:27:48,179 --> 00:27:50,580
feature it pops up a new pop-up window

611
00:27:50,580 --> 00:27:53,520
and in this new pop-up window it puts

612
00:27:53,520 --> 00:27:55,500
the contents of the HTML contents of the

613
00:27:55,500 --> 00:27:58,380
certificate and IT issues a window.print

614
00:27:58,380 --> 00:28:00,360
function and in print of the print color

615
00:28:00,360 --> 00:28:02,820
which triggers the browser's the

616
00:28:02,820 --> 00:28:04,860
printing view of the certificate so

617
00:28:04,860 --> 00:28:06,120
essentially you click download

618
00:28:06,120 --> 00:28:08,460
certificate and you get a pop-up which

619
00:28:08,460 --> 00:28:12,539
pops up a print printing UI

620
00:28:12,539 --> 00:28:15,240
of the browser that way you can save

621
00:28:15,240 --> 00:28:17,279
your certificate as a PDF or print it

622
00:28:17,279 --> 00:28:20,820
using uh printed using whatever you use

623
00:28:20,820 --> 00:28:24,240
to print and that was also problematic

624
00:28:24,240 --> 00:28:26,520
you can you can see why because it's

625
00:28:26,520 --> 00:28:28,500
it's it's directly interacting with the

626
00:28:28,500 --> 00:28:31,260
Dom as the nginx markdown as well and

627
00:28:31,260 --> 00:28:33,240
the first show was our own analytics

628
00:28:33,240 --> 00:28:35,760
implementation which which we will get

629
00:28:35,760 --> 00:28:37,980
back into a bit that was also

630
00:28:37,980 --> 00:28:39,600
interesting directly with the Dom and

631
00:28:39,600 --> 00:28:42,960
that's why it was problematic so with

632
00:28:42,960 --> 00:28:46,679
ngx markdown as I said before it as you

633
00:28:46,679 --> 00:28:49,200
can see on the left there are no there

634
00:28:49,200 --> 00:28:51,000
should be descriptions there like text

635
00:28:51,000 --> 00:28:53,400
and differently formatted text on the

636
00:28:53,400 --> 00:28:55,559
left side but nothing is there and in

637
00:28:55,559 --> 00:28:58,620
the console uh it it visible that it is

638
00:28:58,620 --> 00:29:01,559
crashing because it says that this

639
00:29:01,559 --> 00:29:03,900
document requires trusted HTM assignment

640
00:29:03,900 --> 00:29:05,760
and it's trying to the the little

641
00:29:05,760 --> 00:29:07,919
package more than packages trying to

642
00:29:07,919 --> 00:29:10,020
assign a string directly into the Dom it

643
00:29:10,020 --> 00:29:12,240
forces the markdown generates an HTM and

644
00:29:12,240 --> 00:29:13,860
trap to do that number it doesn't work

645
00:29:13,860 --> 00:29:17,039
because you have to put trusted

646
00:29:17,039 --> 00:29:20,600
and to solve this issue with the package

647
00:29:20,600 --> 00:29:24,000
I used what's called a a default policy

648
00:29:24,000 --> 00:29:26,880
this is in the specification this is you

649
00:29:26,880 --> 00:29:28,320
shouldn't really use this in production

650
00:29:28,320 --> 00:29:31,140
but for these sort of situations it can

651
00:29:31,140 --> 00:29:34,919
be very helpful so what a default policy

652
00:29:34,919 --> 00:29:38,520
in terms of types do is that if it

653
00:29:38,520 --> 00:29:40,860
catches everything that

654
00:29:40,860 --> 00:29:44,580
is not explicitly sent to a given policy

655
00:29:44,580 --> 00:29:46,559
so as Governor mentioned earlier you can

656
00:29:46,559 --> 00:29:48,179
create a policy you can specify some

657
00:29:48,179 --> 00:29:49,679
sort of parsing logic in it and then

658
00:29:49,679 --> 00:29:52,020
later on you can generate a trusted HTML

659
00:29:52,020 --> 00:29:54,960
using that policy by by calling out the

660
00:29:54,960 --> 00:29:57,539
policy with HTML function for example

661
00:29:57,539 --> 00:30:00,899
but uh if you if you name your policy

662
00:30:00,899 --> 00:30:02,940
default and enable the default policy

663
00:30:02,940 --> 00:30:04,740
the policy will catch everything

664
00:30:04,740 --> 00:30:07,260
everything that is trying to directly

665
00:30:07,260 --> 00:30:09,899
end up into Dome as a string is going to

666
00:30:09,899 --> 00:30:11,880
go to your default policy and your

667
00:30:11,880 --> 00:30:13,799
default policy will have the final

668
00:30:13,799 --> 00:30:15,659
chance to do something with it adjust

669
00:30:15,659 --> 00:30:18,600
the HTML for the browser will not crash

670
00:30:18,600 --> 00:30:20,159
immediately it will give it to your

671
00:30:20,159 --> 00:30:22,799
default policy and then that can handle

672
00:30:22,799 --> 00:30:24,799
um

673
00:30:25,940 --> 00:30:30,240
markdown so ngx markdown could still you

674
00:30:30,240 --> 00:30:33,000
know behave as as usual try to assign a

675
00:30:33,000 --> 00:30:34,740
string but when it tries to assign scene

676
00:30:34,740 --> 00:30:37,140
it will go to my post I will I would

677
00:30:37,140 --> 00:30:39,539
perform some sort of HTML uh

678
00:30:39,539 --> 00:30:42,059
sanitization my default policy

679
00:30:42,059 --> 00:30:44,220
so to create a default policy uh in

680
00:30:44,220 --> 00:30:46,500
angular I first had to install the types

681
00:30:46,500 --> 00:30:48,779
Starship types package this was

682
00:30:48,779 --> 00:30:51,059
necessary for uh to write actually

683
00:30:51,059 --> 00:30:53,039
interact with the with the trusted types

684
00:30:53,039 --> 00:30:55,080
API because other if if you don't

685
00:30:55,080 --> 00:30:56,880
install this then we know that traffic

686
00:30:56,880 --> 00:31:01,260
types is going to crash and it's going

687
00:31:01,260 --> 00:31:03,179
to cause issues when you try to compile

688
00:31:03,179 --> 00:31:05,460
the typescript because the typescript

689
00:31:05,460 --> 00:31:07,679
will not know about the process types

690
00:31:07,679 --> 00:31:10,980
syntax so yeah you install this one I I

691
00:31:10,980 --> 00:31:13,740
use the because there is no real way to

692
00:31:13,740 --> 00:31:16,980
do it I I figured I could create a new

693
00:31:16,980 --> 00:31:18,840
service in angular for traffic type so I

694
00:31:18,840 --> 00:31:21,059
created a new trusted type service and

695
00:31:21,059 --> 00:31:23,940
in that service I set up a new default

696
00:31:23,940 --> 00:31:26,220
policy this is how I did it uh

697
00:31:26,220 --> 00:31:28,620
essentially in the service created a new

698
00:31:28,620 --> 00:31:31,140
policy called default and the default

699
00:31:31,140 --> 00:31:34,020
policy had uh you can even see my little

700
00:31:34,020 --> 00:31:37,380
laser pointer I I hope uh had this

701
00:31:37,380 --> 00:31:40,559
create HTML function which just simply

702
00:31:40,559 --> 00:31:44,460
passed the HTML that it perceived into

703
00:31:44,460 --> 00:31:47,940
the angular Dom sanitizer and sanitized

704
00:31:47,940 --> 00:31:51,000
it as an HTML and and this is what

705
00:31:51,000 --> 00:31:53,399
angular is also using under the hood to

706
00:31:53,399 --> 00:31:56,520
sanitize the untrusted HTML

707
00:31:56,520 --> 00:32:00,480
so this way any data that was directly

708
00:32:00,480 --> 00:32:02,820
assigned into into the interdome as a

709
00:32:02,820 --> 00:32:04,140
string will go through this difficult

710
00:32:04,140 --> 00:32:06,899
policy and we'll get sanitized by

711
00:32:06,899 --> 00:32:09,799
angular sanitizer so hopefully nothing

712
00:32:09,799 --> 00:32:12,899
malicious or like the unintended can end

713
00:32:12,899 --> 00:32:15,299
up in in the Dom this way because we

714
00:32:15,299 --> 00:32:18,779
have control over over this logic uh of

715
00:32:18,779 --> 00:32:21,360
course the real solution would be uh

716
00:32:21,360 --> 00:32:24,299
trusted types supporting ngx markdown so

717
00:32:24,299 --> 00:32:26,279
that it would have its own policy for

718
00:32:26,279 --> 00:32:28,440
example and we could just enable the ngx

719
00:32:28,440 --> 00:32:31,200
more than policy in our CSV header so we

720
00:32:31,200 --> 00:32:33,000
don't have to hack around with the

721
00:32:33,000 --> 00:32:36,080
default policy to intercept the the

722
00:32:36,080 --> 00:32:38,399
nginx markdowns

723
00:32:38,399 --> 00:32:40,799
issues essentially but but this works

724
00:32:40,799 --> 00:32:43,260
for now a little bit of a hack but it

725
00:32:43,260 --> 00:32:47,460
works so we have ngx markdown fixed and

726
00:32:47,460 --> 00:32:50,580
ready to go with the default policy now

727
00:32:50,580 --> 00:32:53,520
ngx print was a was a bit of a tough one

728
00:32:53,520 --> 00:32:56,640
I spent quite a bit of time with that

729
00:32:56,640 --> 00:33:00,419
one uh and and it was it was a bit it

730
00:33:00,419 --> 00:33:02,399
was a bit annoying so this is how it

731
00:33:02,399 --> 00:33:04,559
worked you have this certificate page

732
00:33:04,559 --> 00:33:06,720
you have to download certificate button

733
00:33:06,720 --> 00:33:08,580
you click the download certificate a new

734
00:33:08,580 --> 00:33:11,100
a blank windowed option and it only

735
00:33:11,100 --> 00:33:13,320
contains the certificate contents and

736
00:33:13,320 --> 00:33:15,000
then you immediately get the print

737
00:33:15,000 --> 00:33:17,700
pop-up on that network and on that uh on

738
00:33:17,700 --> 00:33:19,260
that window

739
00:33:19,260 --> 00:33:22,679
uh it's using this package called ngx

740
00:33:22,679 --> 00:33:25,559
print it's a plug and play angular

741
00:33:25,559 --> 00:33:28,500
directive to print your stuff as a

742
00:33:28,500 --> 00:33:30,899
storage description uh what it's what

743
00:33:30,899 --> 00:33:33,240
it's doing in very simple terms it pops

744
00:33:33,240 --> 00:33:35,880
up a new window and and then it grabs

745
00:33:35,880 --> 00:33:38,519
some sort of HTML from from your main

746
00:33:38,519 --> 00:33:41,100
page and whatever you specify and then

747
00:33:41,100 --> 00:33:42,659
puts it in the new window and calls

748
00:33:42,659 --> 00:33:45,179
print on the new window uh as you can

749
00:33:45,179 --> 00:33:46,980
clearly see there is a lot of string

750
00:33:46,980 --> 00:33:49,019
operations or I think there's a lot of

751
00:33:49,019 --> 00:33:50,700
string operations happening here and

752
00:33:50,700 --> 00:33:54,179
it's not at all uh trust types compliant

753
00:33:54,179 --> 00:33:56,399
there is no support for trusted studies

754
00:33:56,399 --> 00:33:59,820
this third-party Library so we had to do

755
00:33:59,820 --> 00:34:03,240
something I had to do something myself

756
00:34:03,240 --> 00:34:05,940
this is what it did it first opened a

757
00:34:05,940 --> 00:34:08,580
new window with window that open then it

758
00:34:08,580 --> 00:34:11,460
took the certificates HTML and it's a

759
00:34:11,460 --> 00:34:13,560
document that write the certificates

760
00:34:13,560 --> 00:34:16,080
HTML into the new empty window and tried

761
00:34:16,080 --> 00:34:18,739
window.printing the new active window

762
00:34:18,739 --> 00:34:22,859
because CSP rules for inherited from the

763
00:34:22,859 --> 00:34:25,080
parent page to the child page a the new

764
00:34:25,080 --> 00:34:27,300
pop-up window still had trusted types

765
00:34:27,300 --> 00:34:29,520
the same types rules as the parent

766
00:34:29,520 --> 00:34:31,440
window therefore you could have just put

767
00:34:31,440 --> 00:34:33,980
a string in there and and unfortunately

768
00:34:33,980 --> 00:34:37,320
uh the defaulty hack didn't work here

769
00:34:37,320 --> 00:34:39,719
because the default policy only works if

770
00:34:39,719 --> 00:34:42,179
you have the policy registered on the

771
00:34:42,179 --> 00:34:44,399
page and when you pop open up a new

772
00:34:44,399 --> 00:34:47,699
window it will have all of the CSP rules

773
00:34:47,699 --> 00:34:51,000
so it will require traffic types but it

774
00:34:51,000 --> 00:34:53,159
will not have the default policy default

775
00:34:53,159 --> 00:34:54,719
policy is registered in the other page

776
00:34:54,719 --> 00:34:57,000
if your default policy you have to

777
00:34:57,000 --> 00:34:58,619
register it in the pop-up as well but

778
00:34:58,619 --> 00:35:00,900
there is no not really an easy way to do

779
00:35:00,900 --> 00:35:02,580
it because format is completely empty

780
00:35:02,580 --> 00:35:05,640
there is nothing it's in about blank

781
00:35:05,640 --> 00:35:09,599
popup so I I thought that the only way

782
00:35:09,599 --> 00:35:13,680
to fix this is to using document.write

783
00:35:13,680 --> 00:35:16,680
on the new pop-up we must send a trusted

784
00:35:16,680 --> 00:35:18,839
HTML object because we can't do the

785
00:35:18,839 --> 00:35:20,940
default policy hacking here

786
00:35:20,940 --> 00:35:23,460
I spent like around like two days

787
00:35:23,460 --> 00:35:26,460
re-implementing the whole ngx uh print

788
00:35:26,460 --> 00:35:29,099
feature and then when creating something

789
00:35:29,099 --> 00:35:31,619
that behaves exactly the same way but

790
00:35:31,619 --> 00:35:33,780
rather than using strings it sends it to

791
00:35:33,780 --> 00:35:35,640
my my custom policy

792
00:35:35,640 --> 00:35:38,339
but I face multiple difficulties and and

793
00:35:38,339 --> 00:35:40,500
the whole thing just felt very hecky and

794
00:35:40,500 --> 00:35:43,920
very uh and and professional and that's

795
00:35:43,920 --> 00:35:46,619
something you would really want to uh

796
00:35:46,619 --> 00:35:48,780
you know you really want to trust and

797
00:35:48,780 --> 00:35:50,780
and um

798
00:35:50,780 --> 00:35:54,359
because of this I I ended up using a a

799
00:35:54,359 --> 00:35:57,240
clearer yeah I what I

800
00:35:57,240 --> 00:36:00,240
find as a cleaner solution so instead of

801
00:36:00,240 --> 00:36:03,180
messing around with the with the Dome

802
00:36:03,180 --> 00:36:05,579
with the

803
00:36:05,579 --> 00:36:08,160
with HTML by you know manually grabbing

804
00:36:08,160 --> 00:36:09,900
it from the other page and putting it in

805
00:36:09,900 --> 00:36:13,320
the print page I I decided that I will

806
00:36:13,320 --> 00:36:16,980
create a new angular View and in this

807
00:36:16,980 --> 00:36:20,579
new angular view it will what it will do

808
00:36:20,579 --> 00:36:21,839
is that it will only display the

809
00:36:21,839 --> 00:36:24,000
contents of the certificate so it will

810
00:36:24,000 --> 00:36:26,280
have a it will have a path of learning

811
00:36:26,280 --> 00:36:27,960
paths certificate the idea of the

812
00:36:27,960 --> 00:36:30,540
certificate print and when you open this

813
00:36:30,540 --> 00:36:32,640
angular view it will it will not do any

814
00:36:32,640 --> 00:36:34,560
magic string handling it will only

815
00:36:34,560 --> 00:36:38,160
angular open this page and and only

816
00:36:38,160 --> 00:36:40,800
render the the certificate so it

817
00:36:40,800 --> 00:36:42,599
required me to create a new angular

818
00:36:42,599 --> 00:36:46,020
angular view which is which is once

819
00:36:46,020 --> 00:36:48,359
again quite a bit of a quite a bit of

820
00:36:48,359 --> 00:36:50,940
work unexpected work if you if you will

821
00:36:50,940 --> 00:36:53,160
because you would only think you know we

822
00:36:53,160 --> 00:36:54,839
can just turn on classic types but it's

823
00:36:54,839 --> 00:36:57,060
it's not not really that easy so this

824
00:36:57,060 --> 00:36:59,339
required a bunch of development just to

825
00:36:59,339 --> 00:37:01,980
fix this one specific dependency and

826
00:37:01,980 --> 00:37:03,359
then later on with the download

827
00:37:03,359 --> 00:37:05,940
certificate button I opened up a new new

828
00:37:05,940 --> 00:37:07,920
pop-up which is was nothing blank popup

829
00:37:07,920 --> 00:37:12,000
was actually the pop-up to this URL and

830
00:37:12,000 --> 00:37:14,640
when this URL loaded up this actual uh

831
00:37:14,640 --> 00:37:17,339
component and your opponent issued a

832
00:37:17,339 --> 00:37:20,099
window that print on itself which which

833
00:37:20,099 --> 00:37:22,680
was a bit hecky you know itself but it

834
00:37:22,680 --> 00:37:24,660
worked and it was trusted types

835
00:37:24,660 --> 00:37:26,460
compliant because now angular was doing

836
00:37:26,460 --> 00:37:28,680
the rendering just as in in the case of

837
00:37:28,680 --> 00:37:31,020
the application and angular is working

838
00:37:31,020 --> 00:37:32,640
fine we already enabled all of the

839
00:37:32,640 --> 00:37:35,640
policies that it requires

840
00:37:35,640 --> 00:37:37,940
uh

841
00:37:37,940 --> 00:37:41,460
so the takeaway of this issue

842
00:37:41,460 --> 00:37:44,820
specifically is that a custom Dom

843
00:37:44,820 --> 00:37:47,579
manipulation logic could be hard or it

844
00:37:47,579 --> 00:37:49,200
could be even impossible to implement

845
00:37:49,200 --> 00:37:52,200
with trusted types and and

846
00:37:52,200 --> 00:37:55,800
I think you can clearly see a team here

847
00:37:55,800 --> 00:37:57,780
with these two examples with ngx

848
00:37:57,780 --> 00:38:01,800
markdown with the ngx print it's a it's

849
00:38:01,800 --> 00:38:02,700
sort of

850
00:38:02,700 --> 00:38:05,460
um obvious that when you use third-party

851
00:38:05,460 --> 00:38:07,500
libraries you go off the of the main

852
00:38:07,500 --> 00:38:10,920
road of just using pure angular you will

853
00:38:10,920 --> 00:38:12,599
have to deal with this stuff if you plan

854
00:38:12,599 --> 00:38:14,579
on using trusted types unfortunately

855
00:38:14,579 --> 00:38:15,720
because

856
00:38:15,720 --> 00:38:17,579
every Library

857
00:38:17,579 --> 00:38:19,680
in an ideal world would support trusted

858
00:38:19,680 --> 00:38:21,300
types but they don't in the real world

859
00:38:21,300 --> 00:38:23,640
so you either you either hack around it

860
00:38:23,640 --> 00:38:25,859
you either modify the code of the

861
00:38:25,859 --> 00:38:28,079
library or you implement re-implement

862
00:38:28,079 --> 00:38:29,940
the library and stop using search for

863
00:38:29,940 --> 00:38:32,579
the library itself we did a bunch of uh

864
00:38:32,579 --> 00:38:36,480
development heavy considerations even if

865
00:38:36,480 --> 00:38:38,400
you especially if you have like hundreds

866
00:38:38,400 --> 00:38:39,900
of third-party dependencies that you

867
00:38:39,900 --> 00:38:41,780
rely on

868
00:38:41,780 --> 00:38:45,060
but thankfully we only had two of these

869
00:38:45,060 --> 00:38:46,980
specific cases so we were lucky enough

870
00:38:46,980 --> 00:38:50,160
in this regard but we still had our

871
00:38:50,160 --> 00:38:52,500
analytics implementation left

872
00:38:52,500 --> 00:38:58,859
um now our objects implantation was a

873
00:38:58,859 --> 00:39:03,300
was necessary for this cookie uh uh

874
00:39:03,300 --> 00:39:05,460
accept or cookie pop-up that we had on

875
00:39:05,460 --> 00:39:08,700
the website so without going into too

876
00:39:08,700 --> 00:39:11,220
much details what what happened on the

877
00:39:11,220 --> 00:39:14,280
there was a there is a very extensive

878
00:39:14,280 --> 00:39:17,220
and and and and and a complex system

879
00:39:17,220 --> 00:39:19,380
that we have implemented in the code

880
00:39:19,380 --> 00:39:24,480
base which uh handles these analytics

881
00:39:24,480 --> 00:39:28,140
providers on on the application so a

882
00:39:28,140 --> 00:39:29,820
developer can register an analytics

883
00:39:29,820 --> 00:39:32,040
provider for example Google analytics

884
00:39:32,040 --> 00:39:34,980
and when the user accepts the cookies

885
00:39:34,980 --> 00:39:37,140
Google analytics and all of the other

886
00:39:37,140 --> 00:39:39,660
providers will get injected into the Dom

887
00:39:39,660 --> 00:39:42,540
before they if they don't accept the

888
00:39:42,540 --> 00:39:44,520
pop-up then it will not get injected so

889
00:39:44,520 --> 00:39:48,060
it will get injected in in runtime

890
00:39:48,060 --> 00:39:52,140
and they provider could inject a script

891
00:39:52,140 --> 00:39:54,480
URL or an actual JavaScript knee but it

892
00:39:54,480 --> 00:39:56,460
was implemented that way see that you

893
00:39:56,460 --> 00:39:58,740
know say that okay when the user clicks

894
00:39:58,740 --> 00:40:00,980
accept please pull in Google

895
00:40:00,980 --> 00:40:04,920
tagmanager.com Google analytics.js or

896
00:40:04,920 --> 00:40:07,020
you could give it a full-blown

897
00:40:07,020 --> 00:40:09,060
JavaScript blob and you could say that

898
00:40:09,060 --> 00:40:11,460
when the user clicks except just push

899
00:40:11,460 --> 00:40:13,440
this JavaScript Globe into the page and

900
00:40:13,440 --> 00:40:16,140
execute it because these analytics will

901
00:40:16,140 --> 00:40:18,480
work this way or that way

902
00:40:18,480 --> 00:40:21,420
this is hard if you if you start to

903
00:40:21,420 --> 00:40:23,460
think of how this could work with

904
00:40:23,460 --> 00:40:26,280
trusted ties because clearly there is a

905
00:40:26,280 --> 00:40:29,700
string assignment in the Dom going on

906
00:40:29,700 --> 00:40:32,160
it's called issues and it was causing

907
00:40:32,160 --> 00:40:34,200
issues so it was straight up not working

908
00:40:34,200 --> 00:40:37,320
one trusted ties was enforced

909
00:40:37,320 --> 00:40:38,339
um

910
00:40:38,339 --> 00:40:41,339
so I faced once again a challenge and

911
00:40:41,339 --> 00:40:43,560
this challenge was was uh was something

912
00:40:43,560 --> 00:40:45,480
that I faced multiple times on This

913
00:40:45,480 --> 00:40:48,240
research is that I wanted to stick with

914
00:40:48,240 --> 00:40:50,940
the trusted types principles and I

915
00:40:50,940 --> 00:40:52,800
wanted to actually keep the policies

916
00:40:52,800 --> 00:40:56,940
secure because the policies are the

917
00:40:56,940 --> 00:40:59,579
pieces of code that contain the security

918
00:40:59,579 --> 00:41:01,980
sensitive logic so

919
00:41:01,980 --> 00:41:04,619
um you know as example said that these

920
00:41:04,619 --> 00:41:06,660
are the core security logic in your

921
00:41:06,660 --> 00:41:08,880
application in terms of Dom exercise if

922
00:41:08,880 --> 00:41:11,099
you enable it and that's very very nice

923
00:41:11,099 --> 00:41:16,700
but it might be hard in some cases so it

924
00:41:16,700 --> 00:41:20,099
multiple times it was very Charming to

925
00:41:20,099 --> 00:41:21,780
just create a policy that allows

926
00:41:21,780 --> 00:41:24,839
everything and you know call it internal

927
00:41:24,839 --> 00:41:28,619
Avatar policy do not use and and that

928
00:41:28,619 --> 00:41:30,599
policy will allow everything and for

929
00:41:30,599 --> 00:41:33,500
example in my own

930
00:41:45,660 --> 00:41:48,480
they can use and and you know it would

931
00:41:48,480 --> 00:41:52,220
just complicate things much

932
00:41:57,359 --> 00:42:01,200
developers so um but you know to stick

933
00:42:01,200 --> 00:42:02,880
with the trust types principles you

934
00:42:02,880 --> 00:42:04,800
shouldn't create a policy that allows

935
00:42:04,800 --> 00:42:07,400
everything that's

936
00:42:07,800 --> 00:42:11,359
so so

937
00:42:16,800 --> 00:42:18,900
the T-shirt every policy

938
00:42:18,900 --> 00:42:23,220
station before approving the given input

939
00:42:23,220 --> 00:42:24,000
um

940
00:42:24,000 --> 00:42:27,900
so uh this is what I came up with as you

941
00:42:27,900 --> 00:42:31,140
can see uh this is clearly where this is

942
00:42:31,140 --> 00:42:33,900
what I mean when I say it's harder to to

943
00:42:33,900 --> 00:42:34,740
actually

944
00:42:34,740 --> 00:42:37,520
think

945
00:42:41,220 --> 00:42:43,759
morning

946
00:42:54,200 --> 00:42:57,300
because I'm not using HTML here but

947
00:42:57,300 --> 00:42:59,940
script URLs you can this is I wouldn't

948
00:42:59,940 --> 00:43:02,040
go into too much detail but essentially

949
00:43:02,040 --> 00:43:04,700
it depends

950
00:43:04,920 --> 00:43:06,960
if you're working with HTML you have to

951
00:43:06,960 --> 00:43:08,640
use this

952
00:43:08,640 --> 00:43:11,040
until you have to use this for for the

953
00:43:11,040 --> 00:43:13,140
interested type policy and we are

954
00:43:13,140 --> 00:43:17,000
working with script URLs here and I play

955
00:43:17,000 --> 00:43:21,420
uh pause the the URL in the browser and

956
00:43:21,420 --> 00:43:24,420
I checked if the origin feature and if

957
00:43:24,420 --> 00:43:27,900
the path is equal to gtech.js

958
00:43:27,900 --> 00:43:30,599
case then I approved distance

959
00:43:30,599 --> 00:43:33,000
I did not approve and I returned back an

960
00:43:33,000 --> 00:43:34,980
empty string it's only this specific

961
00:43:34,980 --> 00:43:37,160
script could be loaded

962
00:43:37,160 --> 00:43:40,099
and um

963
00:43:40,099 --> 00:43:42,599
once again this is where the secure

964
00:43:42,599 --> 00:43:44,160
circuit logic is you have to be very

965
00:43:44,160 --> 00:43:46,680
careful with the with the way you parse

966
00:43:46,680 --> 00:43:48,540
URLs and you do all of that sort of

967
00:43:48,540 --> 00:43:50,819
foundation but that's beside beyond the

968
00:43:50,819 --> 00:43:54,180
scope of of this this specific talk

969
00:43:54,180 --> 00:43:55,079
um

970
00:43:55,079 --> 00:43:58,800
and and in the in the code I just simply

971
00:43:58,800 --> 00:44:02,220
went uh and actually

972
00:44:02,220 --> 00:44:05,819
um just instead of putting the the URL

973
00:44:05,819 --> 00:44:09,060
into the tag.r SRC attribute or into the

974
00:44:09,060 --> 00:44:11,339
inter HTML I use the trusted type

975
00:44:11,339 --> 00:44:13,800
service analytics policy and created the

976
00:44:13,800 --> 00:44:16,079
script URL and put it in the SRC The

977
00:44:16,079 --> 00:44:17,579
Trusted scripture at this point they're

978
00:44:17,579 --> 00:44:20,280
not not string so this way it it worked

979
00:44:20,280 --> 00:44:24,240
because I was using trusted types and uh

980
00:44:24,240 --> 00:44:27,119
we I and I talked with other team

981
00:44:27,119 --> 00:44:29,339
members and we decided to skip the

982
00:44:29,339 --> 00:44:31,859
validation of actual JavaScript Snippets

983
00:44:31,859 --> 00:44:34,140
because you could sort of do that but

984
00:44:34,140 --> 00:44:36,660
that would be way way way way harder to

985
00:44:36,660 --> 00:44:39,900
decide whether a block of JavaScript uh

986
00:44:39,900 --> 00:44:42,240
slip that is secure or not so we decided

987
00:44:42,240 --> 00:44:43,880
that this analytics policy will only do

988
00:44:43,880 --> 00:44:48,359
uh we'll only do URLs and and the last

989
00:44:48,359 --> 00:44:50,700
and final issue

990
00:44:50,700 --> 00:44:52,440
you

991
00:44:52,440 --> 00:44:54,359
um you know and you use this analytics

992
00:44:54,359 --> 00:44:56,280
policy that I have made that I just

993
00:44:56,280 --> 00:44:58,440
showed you and then I got this error in

994
00:44:58,440 --> 00:45:01,380
vs code saying uh trusted script URL is

995
00:45:01,380 --> 00:45:03,660
not a sign about the type it's really

996
00:45:03,660 --> 00:45:06,599
and I was surprised by this error

997
00:45:06,599 --> 00:45:08,700
message because this is a Dom element

998
00:45:08,700 --> 00:45:13,819
for example in a tag or script tag on

999
00:45:17,300 --> 00:45:19,680
SRC attribute that's the whole point of

1000
00:45:19,680 --> 00:45:23,099
trusted types but types was drawing an

1001
00:45:23,099 --> 00:45:25,380
error because typescript wanted me to

1002
00:45:25,380 --> 00:45:28,380
assign a script I wanted to assign a

1003
00:45:28,380 --> 00:45:29,400
string

1004
00:45:29,400 --> 00:45:33,500
the SRC attribute now

1005
00:45:33,500 --> 00:45:36,420
that was very surprising to me because I

1006
00:45:36,420 --> 00:45:38,099
already installed the types trusted

1007
00:45:38,099 --> 00:45:40,380
types type package so I figured that

1008
00:45:40,380 --> 00:45:43,079
this would take care of all of the of

1009
00:45:43,079 --> 00:45:44,880
the typescript issues that I might say

1010
00:45:44,880 --> 00:45:46,619
it's but I was wrong

1011
00:45:46,619 --> 00:45:48,839
and I was very wrong

1012
00:45:48,839 --> 00:45:54,060
and there is an open issue on GitHub on

1013
00:45:54,060 --> 00:45:56,700
most of the typescript report and it

1014
00:45:56,700 --> 00:45:57,599
says

1015
00:45:57,599 --> 00:46:02,160
path support for trucks API

1016
00:46:02,160 --> 00:46:05,099
and this is where I start to feel that

1017
00:46:05,099 --> 00:46:06,440
this is

1018
00:46:06,440 --> 00:46:10,619
already at this point so

1019
00:46:10,619 --> 00:46:13,920
the script has a as a sort of syntax of

1020
00:46:13,920 --> 00:46:16,260
what they don't API could accept the

1021
00:46:16,260 --> 00:46:18,780
typescript things that the domain API

1022
00:46:18,780 --> 00:46:21,900
only has a string so the domain the

1023
00:46:21,900 --> 00:46:23,339
typescript will

1024
00:46:23,339 --> 00:46:25,319
code itself

1025
00:46:25,319 --> 00:46:29,220
extended to add support for trust until

1026
00:46:29,220 --> 00:46:32,160
that you can't actually you can't

1027
00:46:32,160 --> 00:46:34,560
actually reuse it

1028
00:46:34,560 --> 00:46:37,560
and other people were complaining of for

1029
00:46:37,560 --> 00:46:39,720
example uh this person was saying that

1030
00:46:39,720 --> 00:46:41,400
we were prototyping the use of trusted

1031
00:46:41,400 --> 00:46:43,800
HTML GitHub and we would really love to

1032
00:46:43,800 --> 00:46:46,200
see this land and so 20 days ago so this

1033
00:46:46,200 --> 00:46:47,880
is very fresh

1034
00:46:47,880 --> 00:46:50,220
um so we are blocked by the types with

1035
00:46:50,220 --> 00:46:52,500
Dominic support and and at this point I

1036
00:46:52,500 --> 00:46:54,300
I felt like this might not make it into

1037
00:46:54,300 --> 00:46:56,220
production we already did much of again

1038
00:46:56,220 --> 00:46:58,619
I didn't want to hack it even more

1039
00:46:58,619 --> 00:47:02,640
uh and and and uh yes there was a way to

1040
00:47:02,640 --> 00:47:04,980
hack around this I just put a PS no

1041
00:47:04,980 --> 00:47:07,800
check into the analytics providers First

1042
00:47:07,800 --> 00:47:10,680
Line and this caused type checking for

1043
00:47:10,680 --> 00:47:14,599
the whole analytics provider uh code uh

1044
00:47:14,599 --> 00:47:18,540
file which is a terrible thing and you

1045
00:47:18,540 --> 00:47:21,240
shouldn't do it but it it allowed me to

1046
00:47:21,240 --> 00:47:23,400
get past this specific issue and and

1047
00:47:23,400 --> 00:47:26,819
ignore the typescript error and yeah

1048
00:47:26,819 --> 00:47:28,859
it's it's all working now and I only

1049
00:47:28,859 --> 00:47:30,180
have a few minutes left I'm just going

1050
00:47:30,180 --> 00:47:31,920
to wrap this up real quick so it's all

1051
00:47:31,920 --> 00:47:33,960
working now right we have we hacked

1052
00:47:33,960 --> 00:47:35,460
everything and press the types it now

1053
00:47:35,460 --> 00:47:36,720
enforced

1054
00:47:36,720 --> 00:47:40,740
in Google Chrome and that's a problem

1055
00:47:40,740 --> 00:47:44,540
only chromium supports this specific

1056
00:47:44,540 --> 00:47:47,280
trusted types implementation natively by

1057
00:47:47,280 --> 00:47:48,960
default and if you want to support

1058
00:47:48,960 --> 00:47:51,420
non-chromium browsers then you will have

1059
00:47:51,420 --> 00:47:53,160
to use something called a polyfill which

1060
00:47:53,160 --> 00:47:54,900
is a snippet of JavaScript that you put

1061
00:47:54,900 --> 00:47:57,480
into your page it will add support for

1062
00:47:57,480 --> 00:47:59,579
trusted times to browsers like Safari

1063
00:47:59,579 --> 00:48:02,940
and Firefox and this was the last step I

1064
00:48:02,940 --> 00:48:05,520
had to put this into into the page and

1065
00:48:05,520 --> 00:48:09,599
they provide a a nice uh nice URL they

1066
00:48:09,599 --> 00:48:11,520
host and they say that you can just put

1067
00:48:11,520 --> 00:48:13,140
the script tag into your web page and it

1068
00:48:13,140 --> 00:48:15,359
will add The Trusted type support for

1069
00:48:15,359 --> 00:48:18,000
non-order browsers and I tried it and

1070
00:48:18,000 --> 00:48:20,640
that web page was giving a 404. so even

1071
00:48:20,640 --> 00:48:23,220
the official web the traffic types

1072
00:48:23,220 --> 00:48:25,800
documentations links were broken for

1073
00:48:25,800 --> 00:48:27,660
some reason and that was also once again

1074
00:48:27,660 --> 00:48:30,960
a not really comforting experience I was

1075
00:48:30,960 --> 00:48:32,700
able to get around this by downloading

1076
00:48:32,700 --> 00:48:34,680
the polyfill code from GitHub and

1077
00:48:34,680 --> 00:48:37,560
locally loading into the web location by

1078
00:48:37,560 --> 00:48:39,240
saving it to the assets folder and

1079
00:48:39,240 --> 00:48:42,000
downloading it later on in the in the

1080
00:48:42,000 --> 00:48:44,880
angular page and this way I was able to

1081
00:48:44,880 --> 00:48:48,180
get uh get it working but but once again

1082
00:48:48,180 --> 00:48:50,160
the whole process felt very hecky and

1083
00:48:50,160 --> 00:48:51,660
the fact that they the whole poly field

1084
00:48:51,660 --> 00:48:53,819
was not really working by the way they

1085
00:48:53,819 --> 00:48:56,819
they described really didn't made me

1086
00:48:56,819 --> 00:48:59,640
feel you know secure about this so

1087
00:48:59,640 --> 00:49:01,980
anyways this was all working now we

1088
00:49:01,980 --> 00:49:04,260
fixed all the issues and other browsers

1089
00:49:04,260 --> 00:49:06,720
were working as expected even suffering

1090
00:49:06,720 --> 00:49:09,119
and even Firefox was enforcing its

1091
00:49:09,119 --> 00:49:11,640
prostate times we had a poly field but

1092
00:49:11,640 --> 00:49:13,500
as I mentioned due to all of these

1093
00:49:13,500 --> 00:49:15,300
difficulties and all of this hacky

1094
00:49:15,300 --> 00:49:17,579
Solutions decided to keep it as a proof

1095
00:49:17,579 --> 00:49:19,260
of constant but not actually really is

1096
00:49:19,260 --> 00:49:23,760
it into into production and this this

1097
00:49:23,760 --> 00:49:26,160
research and this implementation just to

1098
00:49:26,160 --> 00:49:28,200
give you some actual numbers and and a

1099
00:49:28,200 --> 00:49:30,440
little data for your own applications

1100
00:49:30,440 --> 00:49:33,420
took around like eight days of like

1101
00:49:33,420 --> 00:49:36,540
part-time effort which which consists

1102
00:49:36,540 --> 00:49:39,660
around first two hours of of work from

1103
00:49:39,660 --> 00:49:43,500
from my side and that's not a that's

1104
00:49:43,500 --> 00:49:46,140
that's a big that might be a big uh

1105
00:49:46,140 --> 00:49:48,839
development cost for you and it feels

1106
00:49:48,839 --> 00:49:50,940
like to me that we are still in the very

1107
00:49:50,940 --> 00:49:53,280
early stages of trusted type so you

1108
00:49:53,280 --> 00:49:55,800
might face way more issues than what I

1109
00:49:55,800 --> 00:49:57,720
what I did face

1110
00:49:57,720 --> 00:50:00,060
and that's that's really for for my

1111
00:50:00,060 --> 00:50:02,339
implementation story and uh I think I

1112
00:50:02,339 --> 00:50:05,160
finished just just in time if he if you

1113
00:50:05,160 --> 00:50:08,400
have any any questions thank you

1114
00:50:08,400 --> 00:50:10,319
yeah thank you David then thank you

1115
00:50:10,319 --> 00:50:13,500
Gabor uh I hope you I have not seen any

1116
00:50:13,500 --> 00:50:15,060
question can you check on your side

1117
00:50:15,060 --> 00:50:19,700
maybe they came in at the last moment

1118
00:50:20,280 --> 00:50:25,079
no we we can see I can't see it no

1119
00:50:25,079 --> 00:50:27,480
yeah and um

1120
00:50:27,480 --> 00:50:29,640
right now okay hold on let me go back to

1121
00:50:29,640 --> 00:50:31,920
the screen what's my connection was my

1122
00:50:31,920 --> 00:50:34,260
connection uh understandable I see some

1123
00:50:34,260 --> 00:50:37,680
messages it was it was okay in fact we

1124
00:50:37,680 --> 00:50:39,020
have uh

1125
00:50:39,020 --> 00:50:41,880
precisely eight more minutes left

1126
00:50:41,880 --> 00:50:42,839
um

1127
00:50:42,839 --> 00:50:46,140
uh I had to quickly step out if you

1128
00:50:46,140 --> 00:50:50,220
would summarize you know your

1129
00:50:50,220 --> 00:50:54,240
Four Hands two-man presentation whatever

1130
00:50:54,240 --> 00:50:56,099
the top three of the top five key

1131
00:50:56,099 --> 00:50:58,020
messages that uh

1132
00:50:58,020 --> 00:51:00,780
you you want to leave with us and with

1133
00:51:00,780 --> 00:51:03,260
the audience

1134
00:51:03,740 --> 00:51:06,200
yes

1135
00:51:06,200 --> 00:51:09,720
I I dropped in a few anime you can you

1136
00:51:09,720 --> 00:51:13,020
can you can uh yeah go ahead extend it

1137
00:51:13,020 --> 00:51:15,059
so

1138
00:51:15,059 --> 00:51:17,700
one of the first thing is that

1139
00:51:17,700 --> 00:51:20,819
uh process scripting is still an active

1140
00:51:20,819 --> 00:51:24,319
problem and it

1141
00:51:24,420 --> 00:51:25,559
it

1142
00:51:25,559 --> 00:51:28,859
has to it we have a lot of tools to

1143
00:51:28,859 --> 00:51:30,000
solve it

1144
00:51:30,000 --> 00:51:31,740
but at the same time you have to use

1145
00:51:31,740 --> 00:51:34,800
these tools so we have to

1146
00:51:34,800 --> 00:51:38,420
and we have to use these tools properly

1147
00:51:38,420 --> 00:51:40,859
this is the number one

1148
00:51:40,859 --> 00:51:43,980
the second thing is that trusted types

1149
00:51:43,980 --> 00:51:46,740
is a really really promising solution to

1150
00:51:46,740 --> 00:51:49,619
solve handle Dom based cross-scripting

1151
00:51:49,619 --> 00:51:54,059
totally so the idea if you if you write

1152
00:51:54,059 --> 00:51:56,940
a proper policy or you have proper

1153
00:51:56,940 --> 00:51:59,540
policies for different use cases

1154
00:51:59,540 --> 00:52:02,579
this will handle Dom based process

1155
00:52:02,579 --> 00:52:04,200
scripting for sure

1156
00:52:04,200 --> 00:52:06,540
this is the second takeaway the third

1157
00:52:06,540 --> 00:52:09,180
takeaway don't base prostate scripting

1158
00:52:09,180 --> 00:52:11,160
is only

1159
00:52:11,160 --> 00:52:13,380
a part of the whole process scripting

1160
00:52:13,380 --> 00:52:16,260
family so you have to take into account

1161
00:52:16,260 --> 00:52:18,300
other Solutions so if you use servers

1162
00:52:18,300 --> 00:52:21,059
like templating crosstalk process type

1163
00:52:21,059 --> 00:52:24,000
is not your solution so be careful what

1164
00:52:24,000 --> 00:52:26,339
kind of protection guide race you

1165
00:52:26,339 --> 00:52:28,920
implement because for example a nouns

1166
00:52:28,920 --> 00:52:31,980
with CSP would be much better for for

1167
00:52:31,980 --> 00:52:34,980
several side templating so this is the

1168
00:52:34,980 --> 00:52:38,160
third thing that to to

1169
00:52:38,160 --> 00:52:39,720
find

1170
00:52:39,720 --> 00:52:41,099
where

1171
00:52:41,099 --> 00:52:43,079
trusted types fits into your

1172
00:52:43,079 --> 00:52:45,300
implementation process

1173
00:52:45,300 --> 00:52:48,000
so this is from me and David I give you

1174
00:52:48,000 --> 00:52:49,040
also

1175
00:52:49,040 --> 00:52:51,480
some credits

1176
00:52:51,480 --> 00:52:54,540
thank you yes what I what I feel like uh

1177
00:52:54,540 --> 00:52:57,839
said yes this is a very uh promising and

1178
00:52:57,839 --> 00:52:59,160
very

1179
00:52:59,160 --> 00:53:02,520
nice way of going to

1180
00:53:02,520 --> 00:53:05,460
of looking at the Dome access defense so

1181
00:53:05,460 --> 00:53:08,760
I really support this video

1182
00:53:08,760 --> 00:53:11,520
using specification which is still in

1183
00:53:11,520 --> 00:53:14,339
very much in a in an early phase and

1184
00:53:14,339 --> 00:53:16,740
this is what I wanted to what was the

1185
00:53:16,740 --> 00:53:18,960
highlight if that as you've seen in my

1186
00:53:18,960 --> 00:53:22,619
my little story uh the takeaway is that

1187
00:53:22,619 --> 00:53:25,020
it was still very in the early phases it

1188
00:53:25,020 --> 00:53:26,460
was still very

1189
00:53:26,460 --> 00:53:29,880
you know GitHub and Microsoft are still

1190
00:53:29,880 --> 00:53:33,420
blocking this they are still way uh you

1191
00:53:33,420 --> 00:53:35,460
know working on implementing this in a

1192
00:53:35,460 --> 00:53:39,540
major projects such as typescript so it

1193
00:53:39,540 --> 00:53:41,460
would be

1194
00:53:41,460 --> 00:53:44,579
it would take time to have everything

1195
00:53:44,579 --> 00:53:48,359
running very smoothly and until then

1196
00:53:48,359 --> 00:53:50,579
unfortunately we have to we have to

1197
00:53:50,579 --> 00:53:53,280
really think of types as a little

1198
00:53:53,280 --> 00:53:57,300
experimental new new technology and try

1199
00:53:57,300 --> 00:53:59,400
pushing all of the tools and vendors

1200
00:53:59,400 --> 00:54:01,680
that we are using and you know try

1201
00:54:01,680 --> 00:54:04,559
making them making them implement this

1202
00:54:04,559 --> 00:54:07,440
so we could we could use trusted types

1203
00:54:07,440 --> 00:54:10,380
as it is intended to be used which is a

1204
00:54:10,380 --> 00:54:14,099
very very powerful and very very nice uh

1205
00:54:14,099 --> 00:54:15,900
tool I guess

1206
00:54:15,900 --> 00:54:18,660
don't based exercise

1207
00:54:18,660 --> 00:54:21,200
okay

1208
00:54:21,300 --> 00:54:25,220
and maybe to conclude any best practice

1209
00:54:25,220 --> 00:54:27,660
besides what you have you have given us

1210
00:54:27,660 --> 00:54:30,780
the different solutions right

1211
00:54:30,780 --> 00:54:34,319
uh I think in David you showed us by

1212
00:54:34,319 --> 00:54:36,599
Solutions

1213
00:54:36,599 --> 00:54:38,640
um these were based on your on your

1214
00:54:38,640 --> 00:54:43,759
practice or gabors one that you favor

1215
00:54:44,220 --> 00:54:45,240
um

1216
00:54:45,240 --> 00:54:46,619
sure

1217
00:54:46,619 --> 00:54:50,040
um what I would say is that

1218
00:54:50,040 --> 00:54:53,240
is that uh

1219
00:54:53,240 --> 00:54:56,339
I mean implementation in looking at the

1220
00:54:56,339 --> 00:54:58,800
implementation what I would say is that

1221
00:54:58,800 --> 00:55:02,160
it really depends on how many custom uh

1222
00:55:02,160 --> 00:55:03,960
stuff you are doing in your application

1223
00:55:03,960 --> 00:55:05,220
so

1224
00:55:05,220 --> 00:55:07,440
ideally if you want to if you want to

1225
00:55:07,440 --> 00:55:09,059
build a new application from the ground

1226
00:55:09,059 --> 00:55:11,400
that you can easily make interest types

1227
00:55:11,400 --> 00:55:13,680
compatible you can just have to you know

1228
00:55:13,680 --> 00:55:15,660
think of using trusted types Superstar

1229
00:55:15,660 --> 00:55:18,260
if you have a legacy application

1230
00:55:18,260 --> 00:55:20,220
you should

1231
00:55:20,220 --> 00:55:22,020
you should really the biggest challenge

1232
00:55:22,020 --> 00:55:24,119
is to if you think of how you can

1233
00:55:24,119 --> 00:55:27,000
convert it into types compliant and what

1234
00:55:27,000 --> 00:55:28,440
you can do with all of the third party

1235
00:55:28,440 --> 00:55:30,660
dependencies it's really up for your

1236
00:55:30,660 --> 00:55:34,260
development or your or your you know

1237
00:55:34,260 --> 00:55:36,660
priorities to decide whether or not

1238
00:55:36,660 --> 00:55:39,599
seeing if you want to do that

1239
00:55:39,599 --> 00:55:42,020
okay

1240
00:55:42,839 --> 00:55:45,119
uh looking at time we have three minutes

1241
00:55:45,119 --> 00:55:48,300
left so I think it's time to say thank

1242
00:55:48,300 --> 00:55:51,300
you for your presentation thank you for

1243
00:55:51,300 --> 00:55:54,440
the hard work of coordinating

1244
00:55:54,440 --> 00:55:57,359
to speaker presentation which was I

1245
00:55:57,359 --> 00:56:00,680
think quite a lively thanks a lot again

1246
00:56:00,680 --> 00:56:04,020
uh for the benefit of the audience

1247
00:56:04,020 --> 00:56:06,660
um you have the choice between five

1248
00:56:06,660 --> 00:56:08,760
sessions that are running concurrently

1249
00:56:08,760 --> 00:56:11,760
yeah the next session uh will start here

1250
00:56:11,760 --> 00:56:15,180
in the three minutes it will be uh

1251
00:56:15,180 --> 00:56:18,300
titled shift left security with security

1252
00:56:18,300 --> 00:56:21,059
test period and speaker will be

1253
00:56:21,059 --> 00:56:24,180
addressed foot out of German

1254
00:56:24,180 --> 00:56:26,579
thank you David again thank you Gabor

1255
00:56:26,579 --> 00:56:28,500
you cannot disconnect and I will stay

1256
00:56:28,500 --> 00:56:31,020
here to welcome your successor

1257
00:56:31,020 --> 00:56:36,140
bye-bye thank you thank you guys bye bye

