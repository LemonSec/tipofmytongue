1
00:00:05,299 --> 00:00:08,220
Dev SEC abstract

2
00:00:08,220 --> 00:00:09,720
um or those who have just joined I'll

3
00:00:09,720 --> 00:00:12,120
introduce myself again so I'm Denise

4
00:00:12,120 --> 00:00:14,639
Worth to Dunn and I'm a volunteer in the

5
00:00:14,639 --> 00:00:17,400
OAS community and currently the Dublin

6
00:00:17,400 --> 00:00:20,220
OAS chapter lead and I'm be moderating

7
00:00:20,220 --> 00:00:23,279
this session today so during the next 45

8
00:00:23,279 --> 00:00:25,560
minutes on this track we'll be listening

9
00:00:25,560 --> 00:00:28,140
to Jeremy Long who's going to present to

10
00:00:28,140 --> 00:00:30,840
us on the oauth dependency check project

11
00:00:30,840 --> 00:00:33,840
this is a software composition analysis

12
00:00:33,840 --> 00:00:36,420
tool to identify known vulnerable

13
00:00:36,420 --> 00:00:39,120
third-party libraries within code

14
00:00:39,120 --> 00:00:42,840
so again uh similar to before if you

15
00:00:42,840 --> 00:00:45,000
want to submit any questions you do so

16
00:00:45,000 --> 00:00:47,520
during the session in the Q a tab to the

17
00:00:47,520 --> 00:00:49,020
right of the video in the Hoover

18
00:00:49,020 --> 00:00:51,719
platform and then I'll be asking Jeremy

19
00:00:51,719 --> 00:00:53,460
these questions in the last 10 minutes

20
00:00:53,460 --> 00:00:55,440
of the session so we leave the last 10

21
00:00:55,440 --> 00:00:58,980
minutes for Q a and just to let you all

22
00:00:58,980 --> 00:01:00,960
know again or to remind you that the

23
00:01:00,960 --> 00:01:03,660
chat function in Zoom is disabled for

24
00:01:03,660 --> 00:01:06,000
attendees but feel free to leave

25
00:01:06,000 --> 00:01:08,939
comments and chat using the chat tab in

26
00:01:08,939 --> 00:01:10,500
the Hoover app

27
00:01:10,500 --> 00:01:13,680
so just to introduce Jeremy Jeremy is a

28
00:01:13,680 --> 00:01:15,840
principal engineer specializing in all

29
00:01:15,840 --> 00:01:19,560
aspects of secure sdlc from training

30
00:01:19,560 --> 00:01:21,479
building standards creating and

31
00:01:21,479 --> 00:01:23,700
implementing tooling such as static code

32
00:01:23,700 --> 00:01:25,979
analysis to ensure Securities included

33
00:01:25,979 --> 00:01:28,280
throughout our development life cycle

34
00:01:28,280 --> 00:01:30,659
Jeremy is also the founder and project

35
00:01:30,659 --> 00:01:33,180
leader of the OAS dependency check

36
00:01:33,180 --> 00:01:36,180
project and for it now I'm going to hand

37
00:01:36,180 --> 00:01:38,220
it over to Jeremy let him introduce

38
00:01:38,220 --> 00:01:42,320
yourself and begin the talk thank you

39
00:01:42,360 --> 00:01:45,840
hello everyone uh just get started with

40
00:01:45,840 --> 00:01:47,670
this screen share here

41
00:01:47,670 --> 00:01:49,020
[Music]

42
00:01:49,020 --> 00:01:51,720
hopefully this all works

43
00:01:51,720 --> 00:01:54,860
as expected

44
00:01:57,180 --> 00:02:02,780
okay we see the uh slides correctly

45
00:02:04,500 --> 00:02:06,840
yes I can see them thanks Jeremy okay

46
00:02:06,840 --> 00:02:08,699
cool just wanted to make sure that was

47
00:02:08,699 --> 00:02:09,538
all

48
00:02:09,538 --> 00:02:12,540
working correctly there okay

49
00:02:12,540 --> 00:02:14,760
um so as we said uh this is a talk on

50
00:02:14,760 --> 00:02:16,920
OAS dependency check

51
00:02:16,920 --> 00:02:18,900
um one of the flagship projects for

52
00:02:18,900 --> 00:02:21,239
software composition analysis at

53
00:02:21,239 --> 00:02:24,239
uh a wasp

54
00:02:24,239 --> 00:02:25,200
um you know we kind of did an

55
00:02:25,200 --> 00:02:28,739
introduction of me I'm at ctxt on

56
00:02:28,739 --> 00:02:30,599
Twitter or my email address is

57
00:02:30,599 --> 00:02:32,599
jeremylong gmail.com

58
00:02:32,599 --> 00:02:35,280
uh feel free to reach out to me if you

59
00:02:35,280 --> 00:02:38,700
have any questions Beyond this talk

60
00:02:38,700 --> 00:02:41,160
uh

61
00:02:41,160 --> 00:02:43,920
uh okay so software composition analysis

62
00:02:43,920 --> 00:02:46,500
is identifying potential risk from the

63
00:02:46,500 --> 00:02:48,780
use of third-party uh libraries

64
00:02:48,780 --> 00:02:50,900
traditionally this started off with

65
00:02:50,900 --> 00:02:55,080
legal risk with tools like palomita uh

66
00:02:55,080 --> 00:02:58,800
way back in like the 2008 maybe around

67
00:02:58,800 --> 00:03:01,080
that time frame 2008 2009 somewhere in

68
00:03:01,080 --> 00:03:01,980
that range

69
00:03:01,980 --> 00:03:03,680
um

70
00:03:03,680 --> 00:03:07,739
things slowly started branching out in I

71
00:03:07,739 --> 00:03:11,819
believe around 2009 2010 where we very

72
00:03:11,819 --> 00:03:13,800
early started seeing people looking for

73
00:03:13,800 --> 00:03:15,300
known vulnerabilities

74
00:03:15,300 --> 00:03:18,420
um really more in 2010 is is a lot where

75
00:03:18,420 --> 00:03:20,340
they are you know kind of when some of

76
00:03:20,340 --> 00:03:21,959
this stuff started taking off

77
00:03:21,959 --> 00:03:23,760
uh

78
00:03:23,760 --> 00:03:28,500
and so this SCA has evolved quite a bit

79
00:03:28,500 --> 00:03:30,680
over these last 10 years we've seen an

80
00:03:30,680 --> 00:03:34,940
explosion of uh vendors in this space

81
00:03:34,940 --> 00:03:37,800
and we're even starting to see an

82
00:03:37,800 --> 00:03:40,799
evolution of SCA where it's we're no

83
00:03:40,799 --> 00:03:42,540
longer just looking for vulnerable

84
00:03:42,540 --> 00:03:44,760
dependencies trying to push automated

85
00:03:44,760 --> 00:03:46,200
patching for

86
00:03:46,200 --> 00:03:48,599
um for vulnerable dependencies but we've

87
00:03:48,599 --> 00:03:51,599
actually seen some increase in the

88
00:03:51,599 --> 00:03:53,720
vendor space around SCA

89
00:03:53,720 --> 00:03:56,459
where we're almost starting to look for

90
00:03:56,459 --> 00:04:00,239
zero days where we have uh some of our

91
00:04:00,239 --> 00:04:02,280
vendors are out there looking at things

92
00:04:02,280 --> 00:04:04,799
like depend developer reputation

93
00:04:04,799 --> 00:04:07,680
developer commit history and using some

94
00:04:07,680 --> 00:04:10,680
of this to identify when unusual or

95
00:04:10,680 --> 00:04:14,099
suspicious activities happen within the

96
00:04:14,099 --> 00:04:16,858
open source code repos as kind of a

97
00:04:16,858 --> 00:04:18,680
interesting way to look at things

98
00:04:18,680 --> 00:04:21,298
unfortunately dependency check is not

99
00:04:21,298 --> 00:04:22,800
doing any of that I just wanted to raise

100
00:04:22,800 --> 00:04:25,020
awareness around some of that really

101
00:04:25,020 --> 00:04:26,820
cool stuff that happened happening in

102
00:04:26,820 --> 00:04:28,680
the sca space

103
00:04:28,680 --> 00:04:31,020
[Music]

104
00:04:31,020 --> 00:04:33,419
there's just been so much really cool

105
00:04:33,419 --> 00:04:34,860
stuff happening over the years in this

106
00:04:34,860 --> 00:04:35,960
space I'm

107
00:04:35,960 --> 00:04:38,160
really glad that it's kind of taken off

108
00:04:38,160 --> 00:04:40,440
as how it has

109
00:04:40,440 --> 00:04:43,560
um but to kind of just really highlight

110
00:04:43,560 --> 00:04:45,960
some of that I mean or to go back and

111
00:04:45,960 --> 00:04:47,110
talk about the history

112
00:04:47,110 --> 00:04:47,639
[Music]

113
00:04:47,639 --> 00:04:48,479
um

114
00:04:48,479 --> 00:04:51,000
the first line of code of dependency

115
00:04:51,000 --> 00:04:53,340
check was written in about November

116
00:04:53,340 --> 00:04:57,000
2011. so a little over 10 years ago I

117
00:04:57,000 --> 00:04:58,380
can't believe I've been maintaining this

118
00:04:58,380 --> 00:05:00,419
thing for that long

119
00:05:00,419 --> 00:05:03,780
um the first paper really talking about

120
00:05:03,780 --> 00:05:05,759
software composition analysis it wasn't

121
00:05:05,759 --> 00:05:06,960
even called software composition

122
00:05:06,960 --> 00:05:09,180
analysis then was the unfortunate

123
00:05:09,180 --> 00:05:11,280
realities of insecure software by Jeff

124
00:05:11,280 --> 00:05:14,340
Williams and and our Shan and others uh

125
00:05:14,340 --> 00:05:16,320
in April 2012.

126
00:05:16,320 --> 00:05:19,560
I first released dependency check in mid

127
00:05:19,560 --> 00:05:23,220
2012 and as I said we've just seen an

128
00:05:23,220 --> 00:05:25,139
explosion of what's happening in the

129
00:05:25,139 --> 00:05:25,979
market

130
00:05:25,979 --> 00:05:27,380
um

131
00:05:27,380 --> 00:05:31,020
Beyond just uh you know some of the the

132
00:05:31,020 --> 00:05:32,699
traditional SCA stuff that I've seen

133
00:05:32,699 --> 00:05:33,720
that I've been talking about we're

134
00:05:33,720 --> 00:05:36,000
seeing some very cool stuff just now

135
00:05:36,000 --> 00:05:37,500
starting to come out from some of these

136
00:05:37,500 --> 00:05:39,800
vendors

137
00:05:41,479 --> 00:05:43,919
so one of the things I always like to

138
00:05:43,919 --> 00:05:46,680
point out about dependency check is

139
00:05:46,680 --> 00:05:49,800
while it initially was implemented to

140
00:05:49,800 --> 00:05:51,720
support Java I also want to point out

141
00:05:51,720 --> 00:05:54,360
that it was initially

142
00:05:54,360 --> 00:05:57,240
developed as an auditor tool and this

143
00:05:57,240 --> 00:05:59,460
was not designed to be something that

144
00:05:59,460 --> 00:06:01,680
people would drop in their in their

145
00:06:01,680 --> 00:06:03,720
devops pipeline because you know they're

146
00:06:03,720 --> 00:06:05,880
really weren't devops pipelines back

147
00:06:05,880 --> 00:06:08,940
when I first coded this thing

148
00:06:08,940 --> 00:06:09,900
um

149
00:06:09,900 --> 00:06:12,539
and so uh it's been a little interesting

150
00:06:12,539 --> 00:06:14,639
trying to help help support this over

151
00:06:14,639 --> 00:06:16,979
the years as people are putting tools

152
00:06:16,979 --> 00:06:18,780
like dependency check right in their

153
00:06:18,780 --> 00:06:22,319
Pipeline and and using it all the time

154
00:06:22,319 --> 00:06:24,960
um but the good thing is how I built it

155
00:06:24,960 --> 00:06:27,000
it was a very extensible

156
00:06:27,000 --> 00:06:29,699
um you know framework that I used are

157
00:06:29,699 --> 00:06:32,340
designed and built so that it could be

158
00:06:32,340 --> 00:06:35,479
extended and we did see a lot of other

159
00:06:35,479 --> 00:06:39,440
contributors add in uh support for other

160
00:06:39,440 --> 00:06:42,720
uh Frameworks uh other languages

161
00:06:42,720 --> 00:06:45,120
Technologies Etc

162
00:06:45,120 --> 00:06:46,500
um

163
00:06:46,500 --> 00:06:48,660
you know I think the most recent

164
00:06:48,660 --> 00:06:51,419
addition was golang we we now we now

165
00:06:51,419 --> 00:06:53,280
support some golang

166
00:06:53,280 --> 00:06:54,660
um the one thing to point out about some

167
00:06:54,660 --> 00:06:57,419
of these is that not all of the support

168
00:06:57,419 --> 00:07:00,600
for every language is the same uh some

169
00:07:00,600 --> 00:07:02,460
of these analyzers are still marked as

170
00:07:02,460 --> 00:07:04,560
experimental and you have to explicitly

171
00:07:04,560 --> 00:07:06,780
enable the experimental analyzers when

172
00:07:06,780 --> 00:07:08,759
you're using dependency check and that's

173
00:07:08,759 --> 00:07:11,039
just to kind of make sure people know

174
00:07:11,039 --> 00:07:12,840
that they may have a slightly higher

175
00:07:12,840 --> 00:07:14,580
false positive false negative rate with

176
00:07:14,580 --> 00:07:17,039
some of these experimental analyzers as

177
00:07:17,039 --> 00:07:20,099
opposed to uh the more tried and true

178
00:07:20,099 --> 00:07:22,860
Java analyzer that's in there that's

179
00:07:22,860 --> 00:07:26,360
probably the most accurate of them all

180
00:07:26,639 --> 00:07:28,080
um one of the other things we do is we

181
00:07:28,080 --> 00:07:30,900
do Wrap other tools like Ruby's bundle

182
00:07:30,900 --> 00:07:34,080
or audit uh retire.js uh one thing to

183
00:07:34,080 --> 00:07:37,080
note about the retire JS uh the usage of

184
00:07:37,080 --> 00:07:42,180
that we're not using any of their npm

185
00:07:42,180 --> 00:07:44,220
um code in fact I think they are no

186
00:07:44,220 --> 00:07:45,900
longer supporting the npm side of code

187
00:07:45,900 --> 00:07:47,160
I'd have to go back and double check

188
00:07:47,160 --> 00:07:50,520
that but uh with the retire.js they do a

189
00:07:50,520 --> 00:07:52,680
lot of the client-side.js so if you've

190
00:07:52,680 --> 00:07:54,840
got jQuery and things like that and

191
00:07:54,840 --> 00:07:57,500
we're using that to to find vulnerable

192
00:07:57,500 --> 00:08:01,199
client-side libraries we also wrap npm

193
00:08:01,199 --> 00:08:06,180
audit PNP M audit and yarn audit

194
00:08:06,180 --> 00:08:09,660
um if you are just doing a node

195
00:08:09,660 --> 00:08:11,400
application and that's the only thing

196
00:08:11,400 --> 00:08:13,680
you're analyzing

197
00:08:13,680 --> 00:08:15,780
I would highly recommend just using npm

198
00:08:15,780 --> 00:08:19,979
audit npm fix because uh

199
00:08:19,979 --> 00:08:21,900
if you've seen some of the issues on the

200
00:08:21,900 --> 00:08:23,940
dependency checkboard you may run into

201
00:08:23,940 --> 00:08:25,560
some issues but one of the reasons why

202
00:08:25,560 --> 00:08:29,300
we wrap some of these other tools is for

203
00:08:29,300 --> 00:08:32,458
consistency allowing the ability to have

204
00:08:32,458 --> 00:08:34,260
suppression rules

205
00:08:34,260 --> 00:08:35,820
um because in some cases you may not

206
00:08:35,820 --> 00:08:38,700
want to fix something and and it's just

207
00:08:38,700 --> 00:08:40,080
causing noise because you know that

208
00:08:40,080 --> 00:08:41,219
you're not vulnerable to something

209
00:08:41,219 --> 00:08:44,039
that's being reported by npm audit and

210
00:08:44,039 --> 00:08:46,080
and with uh dependency check you do have

211
00:08:46,080 --> 00:08:48,720
the ability to do suppression rules on

212
00:08:48,720 --> 00:08:50,459
specific findings if you've got if

213
00:08:50,459 --> 00:08:52,740
you've got issues the other important

214
00:08:52,740 --> 00:08:55,920
integration is with the OSS index

215
00:08:55,920 --> 00:08:58,680
um the really really glad to have that

216
00:08:58,680 --> 00:09:01,200
uh support from sonotype where they've

217
00:09:01,200 --> 00:09:04,680
uh provided uh access to the OSS index

218
00:09:04,680 --> 00:09:06,120
they actually helped write that

219
00:09:06,120 --> 00:09:08,220
integration

220
00:09:08,220 --> 00:09:10,920
um and with OSS index we're actually

221
00:09:10,920 --> 00:09:12,839
getting additional vulnerabilities

222
00:09:12,839 --> 00:09:16,320
beyond what is just included in the

223
00:09:16,320 --> 00:09:17,220
um

224
00:09:17,220 --> 00:09:20,339
raw data sources that we use with the

225
00:09:20,339 --> 00:09:23,600
national vulnerability database

226
00:09:24,420 --> 00:09:25,740
so

227
00:09:25,740 --> 00:09:28,459
along that the the 10 plus year Journey

228
00:09:28,459 --> 00:09:32,700
we have created several Integrations

229
00:09:32,700 --> 00:09:34,620
um I just realized that I didn't put the

230
00:09:34,620 --> 00:09:37,740
GitHub action on here yet that was uh

231
00:09:37,740 --> 00:09:41,040
probably the most recent uh addition to

232
00:09:41,040 --> 00:09:44,519
the dependency check ecosystem was uh

233
00:09:44,519 --> 00:09:47,399
that we had somebody build out a

234
00:09:47,399 --> 00:09:49,440
and action and the cool thing about the

235
00:09:49,440 --> 00:09:50,880
action for those that have used

236
00:09:50,880 --> 00:09:52,320
dependency check

237
00:09:52,320 --> 00:09:53,940
is

238
00:09:53,940 --> 00:09:55,620
we actually have it set up so that it's

239
00:09:55,620 --> 00:09:57,480
building nightly so it's got a

240
00:09:57,480 --> 00:10:00,060
completely up-to-date database there's

241
00:10:00,060 --> 00:10:02,760
it doesn't need to go out and pull down

242
00:10:02,760 --> 00:10:05,519
new data from the nvd so it's got a

243
00:10:05,519 --> 00:10:08,100
complete nightly refresh of that on that

244
00:10:08,100 --> 00:10:10,680
Docker images data so that that's pretty

245
00:10:10,680 --> 00:10:12,240
cool

246
00:10:12,240 --> 00:10:13,200
um

247
00:10:13,200 --> 00:10:15,300
but the one thing to point out we've got

248
00:10:15,300 --> 00:10:16,980
a lot of different Integrations I've

249
00:10:16,980 --> 00:10:19,080
kind of put asterisks on on some of

250
00:10:19,080 --> 00:10:21,480
these here and the main reason that I've

251
00:10:21,480 --> 00:10:24,540
highlighted these are these are the

252
00:10:24,540 --> 00:10:27,120
um Integrations that

253
00:10:27,120 --> 00:10:29,300
work with the within the build system

254
00:10:29,300 --> 00:10:31,440
these are going to be a lot more

255
00:10:31,440 --> 00:10:34,200
accurate than the command line or the

256
00:10:34,200 --> 00:10:36,480
docker image

257
00:10:36,480 --> 00:10:39,540
um and that's because they actually pull

258
00:10:39,540 --> 00:10:41,760
additional information from the build

259
00:10:41,760 --> 00:10:43,860
itself

260
00:10:43,860 --> 00:10:46,320
um as opposed to just trying to analyze

261
00:10:46,320 --> 00:10:48,959
the the files on disk

262
00:10:48,959 --> 00:10:50,940
and so they're a little bit more

263
00:10:50,940 --> 00:10:52,140
accurate

264
00:10:52,140 --> 00:10:54,380
and you might get better results

265
00:10:54,380 --> 00:10:56,579
scanning with the maven Plug-In or the

266
00:10:56,579 --> 00:10:59,579
radial plug-in then scanning the same

267
00:10:59,579 --> 00:11:02,579
application with the CLI or docker

268
00:11:02,579 --> 00:11:05,300
image

269
00:11:06,180 --> 00:11:09,420
um where we are today uh I know I saw

270
00:11:09,420 --> 00:11:12,899
the uh the the the pull count from uh

271
00:11:12,899 --> 00:11:15,480
from The Juice Shop and uh you know that

272
00:11:15,480 --> 00:11:18,060
that's a little uh 40 I think I think he

273
00:11:18,060 --> 00:11:19,560
posted it again like something like 45

274
00:11:19,560 --> 00:11:22,320
million uh polls on the docker image

275
00:11:22,320 --> 00:11:24,660
which is amazing

276
00:11:24,660 --> 00:11:27,600
um but even for me with just this little

277
00:11:27,600 --> 00:11:30,120
dependency check project in the last

278
00:11:30,120 --> 00:11:32,459
well it's less than a year

279
00:11:32,459 --> 00:11:35,600
um I pulled the stats for August 2021

280
00:11:35,600 --> 00:11:38,519
and for the CLI and the docker these are

281
00:11:38,519 --> 00:11:42,300
like all time downloads of the tool

282
00:11:42,300 --> 00:11:44,160
um where the maven and Gradle plug-in

283
00:11:44,160 --> 00:11:47,339
are just the downloads for the

284
00:11:47,339 --> 00:11:49,380
individual month

285
00:11:49,380 --> 00:11:50,040
um

286
00:11:50,040 --> 00:11:53,519
and we can see that in for for the CLI

287
00:11:53,519 --> 00:11:56,160
the maven and Gradle plugins the

288
00:11:56,160 --> 00:11:58,920
downloaded usage of these in less than a

289
00:11:58,920 --> 00:12:01,079
year has almost doubled

290
00:12:01,079 --> 00:12:04,980
uh which is just amazing to me uh the

291
00:12:04,980 --> 00:12:06,300
amount of people that are actually using

292
00:12:06,300 --> 00:12:08,660
this product and uh

293
00:12:08,660 --> 00:12:10,980
and uh hopefully securing their

294
00:12:10,980 --> 00:12:12,720
applications a little bit better because

295
00:12:12,720 --> 00:12:14,519
of it

296
00:12:14,519 --> 00:12:16,320
um and the docker image we're up to

297
00:12:16,320 --> 00:12:18,420
about three and a half million uh

298
00:12:18,420 --> 00:12:20,940
downloads all time

299
00:12:20,940 --> 00:12:26,100
so that that's pretty uh pretty amazing

300
00:12:26,100 --> 00:12:29,160
um so as I mentioned we use the national

301
00:12:29,160 --> 00:12:31,920
vulnerability database as our primary

302
00:12:31,920 --> 00:12:36,060
source of uh vulnerability information

303
00:12:36,060 --> 00:12:38,640
uh one thing to note is the nvd did

304
00:12:38,640 --> 00:12:41,820
introduce rate limiting uh about a year

305
00:12:41,820 --> 00:12:43,620
ago I believe

306
00:12:43,620 --> 00:12:46,019
um so it's vital that anybody using

307
00:12:46,019 --> 00:12:49,320
dependency check actually keep a cache

308
00:12:49,320 --> 00:12:52,019
of the data directory especially if

309
00:12:52,019 --> 00:12:53,279
you're doing things like ephemeral

310
00:12:53,279 --> 00:12:55,440
builds

311
00:12:55,440 --> 00:12:57,720
um alternatively consider setting up a

312
00:12:57,720 --> 00:13:00,300
mirror of the NPD uh that's that's

313
00:13:00,300 --> 00:13:01,740
another option

314
00:13:01,740 --> 00:13:03,899
um if you're using the docker image

315
00:13:03,899 --> 00:13:06,540
um I forgot to put a link to this if

316
00:13:06,540 --> 00:13:07,740
you're using the docker image I can try

317
00:13:07,740 --> 00:13:09,000
and pull it up here in the Q a section

318
00:13:09,000 --> 00:13:11,279
if people are interested

319
00:13:11,279 --> 00:13:14,100
um you can instead of using the the base

320
00:13:14,100 --> 00:13:16,320
uh published Docker image that the

321
00:13:16,320 --> 00:13:18,360
dependence check uses uh there's

322
00:13:18,360 --> 00:13:21,180
actually another Docker image that is

323
00:13:21,180 --> 00:13:23,100
used by the GitHub action that you can

324
00:13:23,100 --> 00:13:24,180
use

325
00:13:24,180 --> 00:13:26,220
directly and that's always kept up to

326
00:13:26,220 --> 00:13:28,560
date and so that will alleviate some of

327
00:13:28,560 --> 00:13:30,959
the uh rate limiting concerns with the

328
00:13:30,959 --> 00:13:33,380
nvd

329
00:13:33,839 --> 00:13:35,700
um we also as I mentioned we also use

330
00:13:35,700 --> 00:13:38,459
the OSS index uh what's great about that

331
00:13:38,459 --> 00:13:40,680
is there are some vulnerabilities in the

332
00:13:40,680 --> 00:13:42,779
OSS index that aren't included in the

333
00:13:42,779 --> 00:13:44,220
nvd

334
00:13:44,220 --> 00:13:46,220
um and so we get a little bit more

335
00:13:46,220 --> 00:13:50,100
accuracy from uh well one we get higher

336
00:13:50,100 --> 00:13:51,779
accuracy and we get some additional

337
00:13:51,779 --> 00:13:55,079
vulnerabilities from the OSS index so as

338
00:13:55,079 --> 00:13:57,420
I said you know real really thankful

339
00:13:57,420 --> 00:13:59,459
that uh sonotype provided that

340
00:13:59,459 --> 00:14:02,760
integration for the project

341
00:14:02,760 --> 00:14:04,620
um and as I mentioned earlier we also

342
00:14:04,620 --> 00:14:06,899
use data from npm audit bundle audit

343
00:14:06,899 --> 00:14:10,079
retire.js those are other you know data

344
00:14:10,079 --> 00:14:12,180
sources some of the things in the future

345
00:14:12,180 --> 00:14:16,260
that we are considering is using uh some

346
00:14:16,260 --> 00:14:19,320
of the data sources from

347
00:14:19,320 --> 00:14:22,139
GitHub where they have

348
00:14:22,139 --> 00:14:25,260
some vulnerability information and again

349
00:14:25,260 --> 00:14:28,079
that is would provide a little bit more

350
00:14:28,079 --> 00:14:30,120
accuracy as well because of how their

351
00:14:30,120 --> 00:14:32,700
data is structured we just haven't had

352
00:14:32,700 --> 00:14:34,320
time to

353
00:14:34,320 --> 00:14:38,220
Implement any of those Integrations yet

354
00:14:38,220 --> 00:14:40,079
so a little bit about how dependency

355
00:14:40,079 --> 00:14:42,600
check works

356
00:14:42,600 --> 00:14:43,519
um

357
00:14:43,519 --> 00:14:46,380
and the first thing to know is you know

358
00:14:46,380 --> 00:14:47,339
going back to that National

359
00:14:47,339 --> 00:14:49,860
vulnerability database um and the data

360
00:14:49,860 --> 00:14:51,240
source

361
00:14:51,240 --> 00:14:53,339
uh for those that don't know the NPD

362
00:14:53,339 --> 00:14:55,560
contains a list of common vulnerability

363
00:14:55,560 --> 00:14:58,860
and exposures known as cves

364
00:14:58,860 --> 00:15:00,180
um there are other commercially

365
00:15:00,180 --> 00:15:02,100
available vulnerability databases that

366
00:15:02,100 --> 00:15:03,839
contain more vulnerabilities than are in

367
00:15:03,839 --> 00:15:06,360
the nvd but you know dependence chip

368
00:15:06,360 --> 00:15:08,880
being a free tool we're just using the

369
00:15:08,880 --> 00:15:11,940
freely available data source um luckily

370
00:15:11,940 --> 00:15:14,519
we also have the OSS index to help out a

371
00:15:14,519 --> 00:15:16,139
little bit with some of those other uh

372
00:15:16,139 --> 00:15:17,820
vulnerabilities but there's other

373
00:15:17,820 --> 00:15:22,079
vendors like uh sneak there's a few

374
00:15:22,079 --> 00:15:23,940
others that actually sell access to

375
00:15:23,940 --> 00:15:26,959
their database as well

376
00:15:27,779 --> 00:15:31,100
so each of these cdes has an identifier

377
00:15:31,100 --> 00:15:34,500
a description of the vulnerability risk

378
00:15:34,500 --> 00:15:36,959
rating based on the common vulnerability

379
00:15:36,959 --> 00:15:38,880
scoring system and a list of the

380
00:15:38,880 --> 00:15:41,040
affected platforms which are identified

381
00:15:41,040 --> 00:15:43,380
by the common platform in numerator

382
00:15:43,380 --> 00:15:46,139
enumeration of that

383
00:15:46,139 --> 00:15:48,720
um so

384
00:15:48,720 --> 00:15:51,420
the the biggest challenge is Library

385
00:15:51,420 --> 00:15:54,720
identification because in order to you

386
00:15:54,720 --> 00:15:55,980
know

387
00:15:55,980 --> 00:15:58,500
say that something is uh vulnerable you

388
00:15:58,500 --> 00:16:00,360
have to know exactly what the product is

389
00:16:00,360 --> 00:16:02,639
doesn't sound hard does it

390
00:16:02,639 --> 00:16:05,940
well that's because it's a little

391
00:16:05,940 --> 00:16:08,220
difficult because

392
00:16:08,220 --> 00:16:09,660
um development and security use

393
00:16:09,660 --> 00:16:12,300
different identifiers as I said in

394
00:16:12,300 --> 00:16:16,740
security we're using the uh the CPE the

395
00:16:16,740 --> 00:16:18,800
common platform enumeration whereas in

396
00:16:18,800 --> 00:16:22,260
development we tend to use

397
00:16:22,260 --> 00:16:24,360
um you know the coordinates for Java we

398
00:16:24,360 --> 00:16:26,180
use the the group artifact version

399
00:16:26,180 --> 00:16:28,139
coordinates uh depending on your

400
00:16:28,139 --> 00:16:31,139
ecosystem uh what's included in the

401
00:16:31,139 --> 00:16:32,519
coordinates is a little different but

402
00:16:32,519 --> 00:16:35,100
you know for for Java development we use

403
00:16:35,100 --> 00:16:37,199
the gav

404
00:16:37,199 --> 00:16:39,660
and as I said we use the common platform

405
00:16:39,660 --> 00:16:41,579
enumeration in

406
00:16:41,579 --> 00:16:44,639
uh in security because we like to

407
00:16:44,639 --> 00:16:47,279
attribute the owner

408
00:16:47,279 --> 00:16:49,560
or the offender along with the platform

409
00:16:49,560 --> 00:16:51,660
where this gets interesting and

410
00:16:51,660 --> 00:16:56,579
problematic and it is historically has

411
00:16:56,579 --> 00:17:00,480
been when you have uh products change

412
00:17:00,480 --> 00:17:03,660
owners like spring Source was bought by

413
00:17:03,660 --> 00:17:07,020
by VMware and VMware then spun off

414
00:17:07,020 --> 00:17:11,939
pivotal and even within the 3.2.0 range

415
00:17:11,939 --> 00:17:15,599
pivotal even had two different names in

416
00:17:15,599 --> 00:17:18,059
the nvd data for the same spring

417
00:17:18,059 --> 00:17:22,859
framework now there's no comprehensive

418
00:17:22,859 --> 00:17:25,380
publicly available database to map

419
00:17:25,380 --> 00:17:27,900
between these two and so

420
00:17:27,900 --> 00:17:29,760
you know I had to come up with a way of

421
00:17:29,760 --> 00:17:31,679
how do we match these

422
00:17:31,679 --> 00:17:33,179
the one thing I do want to point out

423
00:17:33,179 --> 00:17:34,679
about the nvd and some of the things

424
00:17:34,679 --> 00:17:36,960
that have been happening recently

425
00:17:36,960 --> 00:17:38,640
is

426
00:17:38,640 --> 00:17:41,700
the problem of multiple cpes for the

427
00:17:41,700 --> 00:17:43,500
same product

428
00:17:43,500 --> 00:17:45,720
has been going away they have been going

429
00:17:45,720 --> 00:17:48,360
in and updating a lot of these to

430
00:17:48,360 --> 00:17:51,120
standardize on single

431
00:17:51,120 --> 00:17:52,679
uh so that you've got a single vendor

432
00:17:52,679 --> 00:17:56,100
for the single you know product Etc

433
00:17:56,100 --> 00:17:58,320
um which has been very helpful uh it

434
00:17:58,320 --> 00:18:00,720
however has caused uh for any of the

435
00:18:00,720 --> 00:18:03,720
reason users recently uh there have

436
00:18:03,720 --> 00:18:05,220
definitely been an uptick in false

437
00:18:05,220 --> 00:18:07,440
positives uh because we were kind of

438
00:18:07,440 --> 00:18:10,200
tuned to use these uh three especially

439
00:18:10,200 --> 00:18:13,080
for the spring framework but with the

440
00:18:13,080 --> 00:18:16,100
next release which should be tomorrow

441
00:18:16,100 --> 00:18:19,020
again a lot of these you know false

442
00:18:19,020 --> 00:18:20,880
false positives should be corrected

443
00:18:20,880 --> 00:18:24,620
again in the next release Here

444
00:18:24,900 --> 00:18:27,299
um so

445
00:18:27,299 --> 00:18:29,640
how does dependency check actually you

446
00:18:29,640 --> 00:18:32,640
know map these two different identifiers

447
00:18:32,640 --> 00:18:34,380
together we use an evidence-based

448
00:18:34,380 --> 00:18:36,000
identification

449
00:18:36,000 --> 00:18:37,320
where

450
00:18:37,320 --> 00:18:39,660
we extract as much textual information

451
00:18:39,660 --> 00:18:43,140
as we can from the dependencies from the

452
00:18:43,140 --> 00:18:46,740
build system uh you know within a within

453
00:18:46,740 --> 00:18:49,160
a jar file it'll actually look at the

454
00:18:49,160 --> 00:18:51,360
palm.xml if it exists we'll look at the

455
00:18:51,360 --> 00:18:53,820
Manifest we'll look at the file name and

456
00:18:53,820 --> 00:18:55,919
extract as much information we even look

457
00:18:55,919 --> 00:18:57,059
at the

458
00:18:57,059 --> 00:19:01,039
at the name spaces or you know within

459
00:19:01,039 --> 00:19:04,500
the classes themselves to try and

460
00:19:04,500 --> 00:19:06,059
identify the product as well because a

461
00:19:06,059 --> 00:19:07,919
lot of times the product name will be in

462
00:19:07,919 --> 00:19:09,000
the

463
00:19:09,000 --> 00:19:12,480
um in the package name

464
00:19:12,480 --> 00:19:13,799
and

465
00:19:13,799 --> 00:19:15,600
we collect all of that textual

466
00:19:15,600 --> 00:19:17,520
information we kind of categorize it as

467
00:19:17,520 --> 00:19:19,320
this is vendor information this is

468
00:19:19,320 --> 00:19:20,820
product information and this is version

469
00:19:20,820 --> 00:19:22,799
information

470
00:19:22,799 --> 00:19:27,360
and then we use leucine which is an

471
00:19:27,360 --> 00:19:31,919
amazing uh high performance uh you know

472
00:19:31,919 --> 00:19:33,539
search engine

473
00:19:33,539 --> 00:19:36,179
and instead of the standard use case

474
00:19:36,179 --> 00:19:38,640
where you're indexing the Library of

475
00:19:38,640 --> 00:19:40,580
Congress and searching for two words

476
00:19:40,580 --> 00:19:43,380
we've kind of flipped it around and

477
00:19:43,380 --> 00:19:46,140
we're actually having a losing index of

478
00:19:46,140 --> 00:19:50,039
the product and vendor from the cpes and

479
00:19:50,039 --> 00:19:54,480
we're throwing a glob of Search terms

480
00:19:54,480 --> 00:19:56,640
against that to identify we've we've

481
00:19:56,640 --> 00:19:58,919
added some additional analyzers and

482
00:19:58,919 --> 00:20:00,240
whatnot to kind of make that work under

483
00:20:00,240 --> 00:20:01,640
the hood

484
00:20:01,640 --> 00:20:04,919
and this has actually worked out really

485
00:20:04,919 --> 00:20:06,840
really pretty well

486
00:20:06,840 --> 00:20:09,240
um we've had a fairly good

487
00:20:09,240 --> 00:20:10,020
um

488
00:20:10,020 --> 00:20:11,820
you know

489
00:20:11,820 --> 00:20:13,919
it it turned out to be a fairly good way

490
00:20:13,919 --> 00:20:16,380
of identifying the dependencies

491
00:20:16,380 --> 00:20:19,580
and matching things up

492
00:20:20,100 --> 00:20:22,200
so what are some of the issues with this

493
00:20:22,200 --> 00:20:25,559
method well obviously false positives

494
00:20:25,559 --> 00:20:27,059
um

495
00:20:27,059 --> 00:20:30,419
however in general it's not that hard to

496
00:20:30,419 --> 00:20:32,580
deal with false positives the HTML

497
00:20:32,580 --> 00:20:34,320
report which we'll get into a little bit

498
00:20:34,320 --> 00:20:39,360
later has some very good capabilities to

499
00:20:39,360 --> 00:20:41,580
help generate suppression rules for

500
00:20:41,580 --> 00:20:43,260
these false positives so it's usually

501
00:20:43,260 --> 00:20:44,820
just a little bit of an onboarding task

502
00:20:44,820 --> 00:20:46,930
for a new project

503
00:20:46,930 --> 00:20:47,520
[Music]

504
00:20:47,520 --> 00:20:48,120
um

505
00:20:48,120 --> 00:20:50,640
the other problem is of course

506
00:20:50,640 --> 00:20:53,400
false negatives uh in some cases we

507
00:20:53,400 --> 00:20:55,799
don't have enough information or the

508
00:20:55,799 --> 00:20:58,380
correct textual information from the

509
00:20:58,380 --> 00:21:01,620
dependency to correctly match to what is

510
00:21:01,620 --> 00:21:03,960
in the common platform enumeration

511
00:21:03,960 --> 00:21:06,539
uh we do have ways of dealing with these

512
00:21:06,539 --> 00:21:09,480
in terms of uh we have a hint analyzer

513
00:21:09,480 --> 00:21:12,000
and there's a there's a file format

514
00:21:12,000 --> 00:21:13,620
there it's used a little bit less by

515
00:21:13,620 --> 00:21:16,380
client by users of dependency check but

516
00:21:16,380 --> 00:21:17,299
we do

517
00:21:17,299 --> 00:21:19,740
uh when we have reports of false

518
00:21:19,740 --> 00:21:22,080
negatives we do go in and update that

519
00:21:22,080 --> 00:21:25,039
hint file to help identify some of those

520
00:21:25,039 --> 00:21:28,080
uh libraries that we are missing

521
00:21:28,080 --> 00:21:31,559
missing or not identifying correctly

522
00:21:31,559 --> 00:21:34,679
um so I have seen

523
00:21:34,679 --> 00:21:37,020
uh just just to be clear I have seen

524
00:21:37,020 --> 00:21:38,820
both false negatives

525
00:21:38,820 --> 00:21:41,460
and false positives occur in dependency

526
00:21:41,460 --> 00:21:43,679
check and in the commercial tools in the

527
00:21:43,679 --> 00:21:46,380
space Library identification is not an

528
00:21:46,380 --> 00:21:48,659
easy task

529
00:21:48,659 --> 00:21:50,520
um some of the tools I know use have

530
00:21:50,520 --> 00:21:54,900
have used hashes uh to identify things

531
00:21:54,900 --> 00:21:57,780
and you know that fails if somebody

532
00:21:57,780 --> 00:22:01,799
compiled uh the dependency from Source

533
00:22:01,799 --> 00:22:04,500
um very few in the grand scheme of

534
00:22:04,500 --> 00:22:06,059
things very few people are using

535
00:22:06,059 --> 00:22:10,020
reproducible builds and so the hash is

536
00:22:10,020 --> 00:22:11,340
actually going to be different if you

537
00:22:11,340 --> 00:22:14,640
build from source and so just using that

538
00:22:14,640 --> 00:22:17,039
that that hash based identification is

539
00:22:17,039 --> 00:22:19,080
not always as accurate

540
00:22:19,080 --> 00:22:20,340
um and there's there's other things that

541
00:22:20,340 --> 00:22:23,640
have come up to cause uh issues for both

542
00:22:23,640 --> 00:22:24,960
dependence check and the commercial

543
00:22:24,960 --> 00:22:28,010
tools to misidentify things

544
00:22:28,010 --> 00:22:29,760
[Music]

545
00:22:29,760 --> 00:22:32,700
if you ever do run into you know false

546
00:22:32,700 --> 00:22:34,320
positives or false negatives please open

547
00:22:34,320 --> 00:22:36,120
an issue

548
00:22:36,120 --> 00:22:37,919
um one of the cool things we've done

549
00:22:37,919 --> 00:22:41,039
recently is we are using GitHub uh what

550
00:22:41,039 --> 00:22:43,380
they refer to as issue Ops so if you're

551
00:22:43,380 --> 00:22:45,440
if you correctly report a false positive

552
00:22:45,440 --> 00:22:49,320
into the dependency check repo we will

553
00:22:49,320 --> 00:22:50,580
actually

554
00:22:50,580 --> 00:22:52,820
um run some automated tests against it

555
00:22:52,820 --> 00:22:56,400
and put the proposed suppression rule

556
00:22:56,400 --> 00:22:59,039
right into the GitHub issue makes it a

557
00:22:59,039 --> 00:23:00,659
little bit easier for us for the for the

558
00:23:00,659 --> 00:23:03,960
maintainers to go in and and uh you know

559
00:23:03,960 --> 00:23:06,900
verify the evidence and then that it is

560
00:23:06,900 --> 00:23:08,640
truly a false positive and then add that

561
00:23:08,640 --> 00:23:10,799
suppression right into the dependency

562
00:23:10,799 --> 00:23:13,020
check so that's kind of something that

563
00:23:13,020 --> 00:23:14,640
was pretty cool that we set up and I

564
00:23:14,640 --> 00:23:17,640
intend to expand the issue Ops um and

565
00:23:17,640 --> 00:23:19,559
support for false positives uh quite a

566
00:23:19,559 --> 00:23:21,960
bit more but again if you do run into

567
00:23:21,960 --> 00:23:23,700
false positives false negatives please

568
00:23:23,700 --> 00:23:26,240
report them

569
00:23:26,940 --> 00:23:28,440
um as I said

570
00:23:28,440 --> 00:23:31,380
dealing with false policies is fairly

571
00:23:31,380 --> 00:23:33,900
easy with independency check because we

572
00:23:33,900 --> 00:23:35,400
can just generate these suppression

573
00:23:35,400 --> 00:23:38,100
rules the HTML report

574
00:23:38,100 --> 00:23:42,179
um has a button on there to click uh and

575
00:23:42,179 --> 00:23:44,280
just generate these suppression rules so

576
00:23:44,280 --> 00:23:46,799
that we can quickly and easily remove

577
00:23:46,799 --> 00:23:50,280
these from the reports in uh your

578
00:23:50,280 --> 00:23:53,159
running instance uh as I said you can

579
00:23:53,159 --> 00:23:55,200
always report this back to dependency

580
00:23:55,200 --> 00:23:56,640
check and we can try and get some of

581
00:23:56,640 --> 00:23:58,200
these false positives taken care of at

582
00:23:58,200 --> 00:23:59,830
the source

583
00:23:59,830 --> 00:24:00,299
[Music]

584
00:24:00,299 --> 00:24:01,260
um

585
00:24:01,260 --> 00:24:04,320
this one is a suppression rule for

586
00:24:04,320 --> 00:24:06,539
Spring Security obviously

587
00:24:06,539 --> 00:24:08,580
if you can read there

588
00:24:08,580 --> 00:24:10,980
um because it's misidentified as mod

589
00:24:10,980 --> 00:24:13,740
security the spring framework and so we

590
00:24:13,740 --> 00:24:15,720
have suppression rules against those

591
00:24:15,720 --> 00:24:18,600
uh one thing to point out with

592
00:24:18,600 --> 00:24:20,520
the false positives that we generally

593
00:24:20,520 --> 00:24:22,980
get from dependency check in a lot of

594
00:24:22,980 --> 00:24:25,200
cases they're really obvious if you just

595
00:24:25,200 --> 00:24:27,900
look at the HTML report

596
00:24:27,900 --> 00:24:31,140
um they're going to be complete

597
00:24:31,140 --> 00:24:32,880
mismatches there might be a different

598
00:24:32,880 --> 00:24:35,520
technology stack and if you just look at

599
00:24:35,520 --> 00:24:40,380
the CPE the identified CPE and the and

600
00:24:40,380 --> 00:24:43,320
the basically what the dependency is you

601
00:24:43,320 --> 00:24:45,600
know most of most security aware

602
00:24:45,600 --> 00:24:48,120
developers should be able to go that

603
00:24:48,120 --> 00:24:51,179
though that's a misidentification

604
00:24:51,179 --> 00:24:53,400
um and then quickly and easily suppress

605
00:24:53,400 --> 00:24:56,880
based on the CPE or the package URL

606
00:24:56,880 --> 00:24:57,480
um

607
00:24:57,480 --> 00:24:59,460
the expression rules while the CPE one

608
00:24:59,460 --> 00:25:02,840
still does work uh we are more commonly

609
00:25:02,840 --> 00:25:05,220
using the package URL and the

610
00:25:05,220 --> 00:25:07,620
suppression rules uh it's just a a

611
00:25:07,620 --> 00:25:10,380
standard a different standard on how do

612
00:25:10,380 --> 00:25:12,600
I uh instead of using sorry instead of

613
00:25:12,600 --> 00:25:14,580
using the gav the group artifact version

614
00:25:14,580 --> 00:25:17,400
we're using the package URL

615
00:25:17,400 --> 00:25:19,260
um and that's just us a more standard

616
00:25:19,260 --> 00:25:20,880
way to

617
00:25:20,880 --> 00:25:21,780
um

618
00:25:21,780 --> 00:25:24,240
be able to identify packages across

619
00:25:24,240 --> 00:25:25,799
different dependencies across different

620
00:25:25,799 --> 00:25:30,140
types of uh technology Stacks uh nougat

621
00:25:30,140 --> 00:25:32,880
Maven Etc

622
00:25:32,880 --> 00:25:34,140
um

623
00:25:34,140 --> 00:25:36,960
so that is a little bit about the false

624
00:25:36,960 --> 00:25:39,600
positives so

625
00:25:39,600 --> 00:25:42,000
if you actually go in and start using

626
00:25:42,000 --> 00:25:44,640
dependency check how

627
00:25:44,640 --> 00:25:46,799
how would you go about doing this um as

628
00:25:46,799 --> 00:25:47,640
I said

629
00:25:47,640 --> 00:25:51,120
generally you would go in uh it's a you

630
00:25:51,120 --> 00:25:53,940
know fairly simple task you'd go in uh

631
00:25:53,940 --> 00:25:55,440
hopefully you're using one of the build

632
00:25:55,440 --> 00:25:57,659
plugins as opposed to like the docker or

633
00:25:57,659 --> 00:25:59,520
the CLI

634
00:25:59,520 --> 00:26:00,960
um so you'd go and you'd configure the

635
00:26:00,960 --> 00:26:03,720
build plug-in if you are in an

636
00:26:03,720 --> 00:26:06,299
environment where you have to use a

637
00:26:06,299 --> 00:26:07,380
proxy you will have to configure

638
00:26:07,380 --> 00:26:09,419
dependency check to use the to use the

639
00:26:09,419 --> 00:26:10,919
proxy because we do pull down

640
00:26:10,919 --> 00:26:12,720
information from the internet such as

641
00:26:12,720 --> 00:26:14,340
you know we cache a local copy of the

642
00:26:14,340 --> 00:26:15,360
nvd

643
00:26:15,360 --> 00:26:18,120
depending on the integration we you know

644
00:26:18,120 --> 00:26:20,520
and how things are configured uh the

645
00:26:20,520 --> 00:26:22,260
tool may also reach out to GitHub to

646
00:26:22,260 --> 00:26:25,200
pull down the latest retired.js data

647
00:26:25,200 --> 00:26:28,860
um if you're scanning npm we use the npm

648
00:26:28,860 --> 00:26:31,860
audit apis so it will be reaching out to

649
00:26:31,860 --> 00:26:35,340
npm so it does it's not just something

650
00:26:35,340 --> 00:26:37,620
that runs very easily in an offline mode

651
00:26:37,620 --> 00:26:39,659
although you can completely configure

652
00:26:39,659 --> 00:26:41,400
dependency check to run in an offline

653
00:26:41,400 --> 00:26:42,900
mode

654
00:26:42,900 --> 00:26:44,400
uh but you'll have to look at some of

655
00:26:44,400 --> 00:26:46,320
the documentation to get that to fully

656
00:26:46,320 --> 00:26:47,700
work and you'll have to do some things

657
00:26:47,700 --> 00:26:50,760
in your environment to Cache some of the

658
00:26:50,760 --> 00:26:52,740
data and to turn some of the analyzers

659
00:26:52,740 --> 00:26:53,760
off

660
00:26:53,760 --> 00:26:55,919
um just so that they can correctly work

661
00:26:55,919 --> 00:26:58,140
in the offline mode

662
00:26:58,140 --> 00:26:59,520
um

663
00:26:59,520 --> 00:27:01,799
if your build environment cannot reach

664
00:27:01,799 --> 00:27:03,840
out to the internet

665
00:27:03,840 --> 00:27:06,000
um one of the things that people have

666
00:27:06,000 --> 00:27:10,500
done is set up the uh a a mirror of the

667
00:27:10,500 --> 00:27:12,360
national vulnerability database and that

668
00:27:12,360 --> 00:27:13,679
way they have that locally in their

669
00:27:13,679 --> 00:27:16,320
environment and they can just update

670
00:27:16,320 --> 00:27:17,940
based off of that mirror and they don't

671
00:27:17,940 --> 00:27:19,020
actually have to reach out to the

672
00:27:19,020 --> 00:27:21,000
internet

673
00:27:21,000 --> 00:27:22,380
um that that's another thing that people

674
00:27:22,380 --> 00:27:24,059
do quite commonly

675
00:27:24,059 --> 00:27:26,340
um so once you get the plugin set up and

676
00:27:26,340 --> 00:27:27,480
configured

677
00:27:27,480 --> 00:27:28,679
um some of that initial depending on

678
00:27:28,679 --> 00:27:29,880
your environment some of that initial

679
00:27:29,880 --> 00:27:32,640
setup is easier or not

680
00:27:32,640 --> 00:27:34,320
um all depending on how secure your

681
00:27:34,320 --> 00:27:36,419
build environment is and how isolated it

682
00:27:36,419 --> 00:27:40,440
is in in your organization

683
00:27:40,440 --> 00:27:41,580
um

684
00:27:41,580 --> 00:27:43,919
once you've got it set up the steps are

685
00:27:43,919 --> 00:27:46,200
you just run your initial scan look at

686
00:27:46,200 --> 00:27:47,240
the results

687
00:27:47,240 --> 00:27:49,919
uh determine if there's any false

688
00:27:49,919 --> 00:27:51,600
positive that you would need to create a

689
00:27:51,600 --> 00:27:55,140
suppression file for and then plan the

690
00:27:55,140 --> 00:27:56,640
upgrade for any of the identified

691
00:27:56,640 --> 00:27:58,620
vulnerable components

692
00:27:58,620 --> 00:28:01,980
um that's you know it's fairly

693
00:28:01,980 --> 00:28:05,220
straightforward and we will try and do a

694
00:28:05,220 --> 00:28:07,919
demo here uh

695
00:28:07,919 --> 00:28:08,760
foreign

696
00:28:08,760 --> 00:28:13,140
so again I actually have not

697
00:28:13,140 --> 00:28:14,039
um

698
00:28:14,039 --> 00:28:16,500
done this yet we're just going to do

699
00:28:16,500 --> 00:28:18,600
this live here I no idea if there's

700
00:28:18,600 --> 00:28:20,700
anything in J soup or not

701
00:28:20,700 --> 00:28:24,000
uh but we'll just start by cloning JSU

702
00:28:24,000 --> 00:28:25,559
and

703
00:28:25,559 --> 00:28:28,879
it's just a

704
00:28:29,400 --> 00:28:31,140
um

705
00:28:31,140 --> 00:28:35,340
a library that's used for

706
00:28:35,340 --> 00:28:36,539
um

707
00:28:36,539 --> 00:28:38,940
parsing HTML

708
00:28:38,940 --> 00:28:39,799
foreign

709
00:28:39,799 --> 00:28:42,240
so one of the first things that we'll do

710
00:28:42,240 --> 00:28:44,279
here I need to

711
00:28:44,279 --> 00:28:48,260
move some stuff around here one second

712
00:28:57,900 --> 00:29:00,620
so

713
00:29:07,020 --> 00:29:09,900
so NJ soup one of the first things we

714
00:29:09,900 --> 00:29:13,980
have to do is go into the palm.xml

715
00:29:14,000 --> 00:29:17,039
and right here in the build plug-in

716
00:29:17,039 --> 00:29:20,000
section of the Palm

717
00:29:20,000 --> 00:29:23,760
I did cheat and then I have this copied

718
00:29:23,760 --> 00:29:25,440
um but we just add the dependency check

719
00:29:25,440 --> 00:29:28,919
uh Maven plugin to the palm

720
00:29:28,919 --> 00:29:33,000
and uh then we can save that change

721
00:29:33,000 --> 00:29:35,100
um

722
00:29:35,100 --> 00:29:38,658
jump back over to the command line

723
00:29:39,000 --> 00:29:39,779
um

724
00:29:39,779 --> 00:29:41,820
normally this would you could run this

725
00:29:41,820 --> 00:29:44,840
just based off of

726
00:29:44,960 --> 00:29:50,940
the verify goal but because uh

727
00:29:50,940 --> 00:29:53,399
because I don't know if J soup has any

728
00:29:53,399 --> 00:29:54,840
weird

729
00:29:54,840 --> 00:29:58,559
um issues with how it compiles and runs

730
00:29:58,559 --> 00:30:00,720
its tests I may not have everything set

731
00:30:00,720 --> 00:30:03,299
up in my environment for JSU I have

732
00:30:03,299 --> 00:30:05,580
again like I said I have not actually

733
00:30:05,580 --> 00:30:07,140
tested this

734
00:30:07,140 --> 00:30:11,159
uh so uh we'll hope this demo goes goes

735
00:30:11,159 --> 00:30:12,360
well

736
00:30:12,360 --> 00:30:14,340
so I'm just gonna run the uh aggregate

737
00:30:14,340 --> 00:30:15,360
goal

738
00:30:15,360 --> 00:30:17,580
um there's also a check goal aggregate

739
00:30:17,580 --> 00:30:19,799
is used when you have a

740
00:30:19,799 --> 00:30:21,899
um in

741
00:30:21,899 --> 00:30:24,899
a project with Mo with child projects or

742
00:30:24,899 --> 00:30:27,600
like a multi-gradle a multi-project

743
00:30:27,600 --> 00:30:29,340
Gradle build

744
00:30:29,340 --> 00:30:30,840
um there's there's an aggregate goal for

745
00:30:30,840 --> 00:30:33,059
the Gradle plug-in as well

746
00:30:33,059 --> 00:30:36,179
um this did run fairly quickly uh here

747
00:30:36,179 --> 00:30:37,159
because

748
00:30:37,159 --> 00:30:42,059
I do have I I did update the uh the

749
00:30:42,059 --> 00:30:44,399
cache of the NBD that can take you know

750
00:30:44,399 --> 00:30:46,140
a couple of minutes two to three minutes

751
00:30:46,140 --> 00:30:48,659
uh or so

752
00:30:48,659 --> 00:30:51,840
um depending on things uh on the

753
00:30:51,840 --> 00:30:53,460
configuration and how fast your internet

754
00:30:53,460 --> 00:30:55,679
connection is if you hit rate limiting

755
00:30:55,679 --> 00:30:58,980
issues with the nvd ETC so

756
00:30:58,980 --> 00:30:59,880
um

757
00:30:59,880 --> 00:31:02,880
looks like a fairly small report so

758
00:31:02,880 --> 00:31:04,620
I will

759
00:31:04,620 --> 00:31:07,559
pull that up here

760
00:31:07,559 --> 00:31:10,080
and unfortunately

761
00:31:10,080 --> 00:31:11,820
you know for me well actually great for

762
00:31:11,820 --> 00:31:13,620
J sub

763
00:31:13,620 --> 00:31:14,580
um

764
00:31:14,580 --> 00:31:16,919
they only have one dependency uh it

765
00:31:16,919 --> 00:31:19,140
looks like and that there's zero

766
00:31:19,140 --> 00:31:21,419
vulnerabilities found in it

767
00:31:21,419 --> 00:31:23,460
um and you can kind of click this little

768
00:31:23,460 --> 00:31:26,159
button to that we start off just showing

769
00:31:26,159 --> 00:31:27,899
only the vulnerable libraries but you

770
00:31:27,899 --> 00:31:29,159
can click this little button to actually

771
00:31:29,159 --> 00:31:32,279
show all the vulnerabilities and this

772
00:31:32,279 --> 00:31:34,980
just shows some of the information about

773
00:31:34,980 --> 00:31:37,080
the one dependency they have

774
00:31:37,080 --> 00:31:40,740
um looks like the jsr 305 annotations

775
00:31:40,740 --> 00:31:42,240
for fine bugs is the only thing that

776
00:31:42,240 --> 00:31:44,340
they have in their code base

777
00:31:44,340 --> 00:31:46,919
uh as a dependency

778
00:31:46,919 --> 00:31:47,940
um

779
00:31:47,940 --> 00:31:49,919
one of the things to point out I'll just

780
00:31:49,919 --> 00:31:51,960
show this really quick is as I said

781
00:31:51,960 --> 00:31:53,460
there's a lot of evidence that's

782
00:31:53,460 --> 00:31:55,740
collected and we put that into like the

783
00:31:55,740 --> 00:31:58,140
vendor the product and the version

784
00:31:58,140 --> 00:32:02,220
evidence and that's how we then use to

785
00:32:02,220 --> 00:32:05,700
um search again search for vulnerable uh

786
00:32:05,700 --> 00:32:09,539
versions uh for cpes within the nvd so

787
00:32:09,539 --> 00:32:11,760
that we can identify the vulnerabilities

788
00:32:11,760 --> 00:32:15,179
okay so we didn't really see anything in

789
00:32:15,179 --> 00:32:16,799
uh

790
00:32:16,799 --> 00:32:19,559
in J sub I was hoping to actually you

791
00:32:19,559 --> 00:32:21,779
know randomly pick a project earlier and

792
00:32:21,779 --> 00:32:23,760
and uh

793
00:32:23,760 --> 00:32:25,860
see what something looks and just see

794
00:32:25,860 --> 00:32:28,679
what it looks like but good deal for JSU

795
00:32:28,679 --> 00:32:30,899
they don't have anything

796
00:32:30,899 --> 00:32:32,940
um so to show you what a what a report

797
00:32:32,940 --> 00:32:35,940
with actual vulnerabilities looks like I

798
00:32:35,940 --> 00:32:37,380
do have

799
00:32:37,380 --> 00:32:39,840
um I have a little side project that I

800
00:32:39,840 --> 00:32:42,179
have ODC false positives

801
00:32:42,179 --> 00:32:44,539
and that's one of the things that I have

802
00:32:44,539 --> 00:32:48,240
historically before I built the issue

803
00:32:48,240 --> 00:32:50,220
Ops I've just had this little side

804
00:32:50,220 --> 00:32:52,080
project with the mate with the with the

805
00:32:52,080 --> 00:32:53,760
maven plug-in set up and I would just

806
00:32:53,760 --> 00:32:55,380
put when somebody reported false

807
00:32:55,380 --> 00:32:56,760
positive I would just put it in this

808
00:32:56,760 --> 00:32:58,020
project

809
00:32:58,020 --> 00:33:01,260
so I could create the suppression rule

810
00:33:01,260 --> 00:33:01,980
um

811
00:33:01,980 --> 00:33:04,559
this one does have a

812
00:33:04,559 --> 00:33:06,659
a vulnerable version of the common

813
00:33:06,659 --> 00:33:08,760
collections 3.hr

814
00:33:08,760 --> 00:33:12,120
uh here we can see that you know the CP

815
00:33:12,120 --> 00:33:14,940
is Apache comments collection so that is

816
00:33:14,940 --> 00:33:18,179
likely a 100 accurate match

817
00:33:18,179 --> 00:33:21,480
I mentioned the package URL that is what

818
00:33:21,480 --> 00:33:24,600
we were using now uh for as many of the

819
00:33:24,600 --> 00:33:27,539
ecosystems as we possibly can uh trying

820
00:33:27,539 --> 00:33:29,279
to to correctly determine the package

821
00:33:29,279 --> 00:33:30,299
URL

822
00:33:30,299 --> 00:33:33,200
because it's a fairly um

823
00:33:33,200 --> 00:33:37,080
good standard for uh

824
00:33:37,080 --> 00:33:39,000
to have a single

825
00:33:39,000 --> 00:33:41,940
um you know identifier that can go cross

826
00:33:41,940 --> 00:33:44,279
uh technology you know because you could

827
00:33:44,279 --> 00:33:45,360
have this is made but you can have

828
00:33:45,360 --> 00:33:48,299
nougat other types of packages all

829
00:33:48,299 --> 00:33:51,659
identified by this single schema

830
00:33:51,659 --> 00:33:53,460
going out to the versions and and

831
00:33:53,460 --> 00:33:55,380
there's other information in there

832
00:33:55,380 --> 00:33:58,679
and as I said before

833
00:33:58,679 --> 00:34:01,980
um if this was a false positive it's

834
00:34:01,980 --> 00:34:03,779
generally going to be fairly easy to

835
00:34:03,779 --> 00:34:04,919
identify

836
00:34:04,919 --> 00:34:07,019
that it's a false positive

837
00:34:07,019 --> 00:34:08,000
um

838
00:34:08,000 --> 00:34:09,960
but it's one of those where I don't have

839
00:34:09,960 --> 00:34:12,300
a good example to show you what that

840
00:34:12,300 --> 00:34:13,918
what why we think some of these are

841
00:34:13,918 --> 00:34:16,260
false positive if this was a false

842
00:34:16,260 --> 00:34:17,820
positive I said it was very easy to

843
00:34:17,820 --> 00:34:19,500
generate expression files you can just

844
00:34:19,500 --> 00:34:22,679
click this button and it generates the

845
00:34:22,679 --> 00:34:24,960
suppression node if this is the first

846
00:34:24,960 --> 00:34:26,339
time that you're generating a

847
00:34:26,339 --> 00:34:27,780
suppression file you can actually click

848
00:34:27,780 --> 00:34:30,359
this complete the XML file and it'll

849
00:34:30,359 --> 00:34:32,760
actually put the uh the headers and

850
00:34:32,760 --> 00:34:35,159
everything in there to use the the

851
00:34:35,159 --> 00:34:37,739
latest schemas and everything else and

852
00:34:37,739 --> 00:34:40,080
then you can just simply go in here and

853
00:34:40,080 --> 00:34:43,619
you know copy that and just hitting Ctrl

854
00:34:43,619 --> 00:34:47,699
C with that in there closes that window

855
00:34:47,699 --> 00:34:49,980
and you can go paste that into a file

856
00:34:49,980 --> 00:34:52,980
and then configure

857
00:34:52,980 --> 00:34:55,320
um the plugin to use the suppression

858
00:34:55,320 --> 00:34:57,480
file that you created

859
00:34:57,480 --> 00:35:00,359
one thing I will point out I've seen a

860
00:35:00,359 --> 00:35:03,660
lot of people trying to suppress or even

861
00:35:03,660 --> 00:35:06,720
report that

862
00:35:06,720 --> 00:35:09,540
you know hey dependency check identified

863
00:35:09,540 --> 00:35:13,980
that the commons collection

864
00:35:13,980 --> 00:35:17,700
um Maven Library you know or sorry uh

865
00:35:17,700 --> 00:35:19,560
Java Library

866
00:35:19,560 --> 00:35:20,339
um

867
00:35:20,339 --> 00:35:22,980
has a false positive on this specific

868
00:35:22,980 --> 00:35:24,780
cve

869
00:35:24,780 --> 00:35:26,579
and

870
00:35:26,579 --> 00:35:29,400
99 of the time it's not that it's a

871
00:35:29,400 --> 00:35:31,859
false positive on this cve it's that

872
00:35:31,859 --> 00:35:35,099
it's a false positive on the CPE and so

873
00:35:35,099 --> 00:35:37,380
people try and report and suppress on

874
00:35:37,380 --> 00:35:40,440
individual CVS and that's kind of the

875
00:35:40,440 --> 00:35:42,119
wrong way to go about it

876
00:35:42,119 --> 00:35:44,460
um because it's generally that we have

877
00:35:44,460 --> 00:35:46,560
the common platform enumeration just due

878
00:35:46,560 --> 00:35:48,960
to the evidence-based matching is

879
00:35:48,960 --> 00:35:50,880
incorrect

880
00:35:50,880 --> 00:35:51,680
um

881
00:35:51,680 --> 00:35:54,780
just just suppressing on these on the

882
00:35:54,780 --> 00:35:58,740
specific cves is generally going to end

883
00:35:58,740 --> 00:36:01,560
up uh being problematic and you're just

884
00:36:01,560 --> 00:36:03,300
going to see the next time a new CV

885
00:36:03,300 --> 00:36:04,680
comes out for that Library you're going

886
00:36:04,680 --> 00:36:06,000
to see it you're going to see that a

887
00:36:06,000 --> 00:36:08,280
false positive show up again

888
00:36:08,280 --> 00:36:10,440
um there are cases where I know we we

889
00:36:10,440 --> 00:36:11,880
have this capability in here because

890
00:36:11,880 --> 00:36:15,720
there are cases when uh people will want

891
00:36:15,720 --> 00:36:18,720
to suppress a specific CE because they

892
00:36:18,720 --> 00:36:20,359
know that they're not vulnerable

893
00:36:20,359 --> 00:36:24,180
or within the suppression schema there's

894
00:36:24,180 --> 00:36:27,900
actually an into an until attribute and

895
00:36:27,900 --> 00:36:30,599
so you can suppress something until

896
00:36:30,599 --> 00:36:33,180
a future date uh maybe that you've

897
00:36:33,180 --> 00:36:34,500
worked out with the development team

898
00:36:34,500 --> 00:36:36,079
that

899
00:36:36,079 --> 00:36:39,960
uh they're going to patch this but they

900
00:36:39,960 --> 00:36:41,940
but it's a lower risk issue and they

901
00:36:41,940 --> 00:36:45,480
need six months to to go about that uh

902
00:36:45,480 --> 00:36:48,540
and maybe they put it on their backlog

903
00:36:48,540 --> 00:36:51,300
Etc and I've seen some users actually

904
00:36:51,300 --> 00:36:53,579
then just go put a suppression in for

905
00:36:53,579 --> 00:36:56,160
that CBE

906
00:36:56,160 --> 00:37:00,119
for using the until attribute so that it

907
00:37:00,119 --> 00:37:02,400
stops being reported because it's on

908
00:37:02,400 --> 00:37:04,020
because they know it's on the backlog

909
00:37:04,020 --> 00:37:07,079
they know it's a lower risk issue and

910
00:37:07,079 --> 00:37:09,060
they then the development team just due

911
00:37:09,060 --> 00:37:11,940
to needing to deliver features what not

912
00:37:11,940 --> 00:37:13,619
have not

913
00:37:13,619 --> 00:37:18,119
spent the time to upgrade this Library

914
00:37:18,119 --> 00:37:20,579
so that's just kind of a high level of

915
00:37:20,579 --> 00:37:22,980
overview of dependency check

916
00:37:22,980 --> 00:37:23,640
um

917
00:37:23,640 --> 00:37:27,180
there is some great information

918
00:37:27,180 --> 00:37:28,740
um out here on how to read the report

919
00:37:28,740 --> 00:37:31,320
and suppressing false positives and of

920
00:37:31,320 --> 00:37:32,339
course you can go out to the GitHub

921
00:37:32,339 --> 00:37:33,900
issues to

922
00:37:33,900 --> 00:37:37,339
um get more information about this

923
00:37:37,500 --> 00:37:39,420
okay

924
00:37:39,420 --> 00:37:43,880
so we'll go back to the slide deck here

925
00:37:45,839 --> 00:37:47,640
so what are some of the use cases for

926
00:37:47,640 --> 00:37:50,180
dependency check like

927
00:37:50,180 --> 00:37:53,700
one uh if you're not aware of this of

928
00:37:53,700 --> 00:37:55,200
the software composition analysis

929
00:37:55,200 --> 00:37:56,339
problem

930
00:37:56,339 --> 00:37:59,700
um yet and your company for better or

931
00:37:59,700 --> 00:38:02,820
worse hasn't done anything in here with

932
00:38:02,820 --> 00:38:04,140
software composition analysis to

933
00:38:04,140 --> 00:38:06,599
identify new vulnerable libraries

934
00:38:06,599 --> 00:38:08,460
you can at least use dependency check to

935
00:38:08,460 --> 00:38:11,960
prove that the problem exists

936
00:38:12,060 --> 00:38:13,079
um

937
00:38:13,079 --> 00:38:15,240
another one I've seen people use

938
00:38:15,240 --> 00:38:17,339
dependency check as a baseline test when

939
00:38:17,339 --> 00:38:19,140
conducting pocs with some of the

940
00:38:19,140 --> 00:38:20,660
commercial products

941
00:38:20,660 --> 00:38:23,460
you'll see you know as I mentioned you

942
00:38:23,460 --> 00:38:24,839
might see some false positive you might

943
00:38:24,839 --> 00:38:26,359
see some false negatives

944
00:38:26,359 --> 00:38:28,740
depending on

945
00:38:28,740 --> 00:38:31,700
uh what technology stack you're using

946
00:38:31,700 --> 00:38:34,500
I've seen bake offs where dependency

947
00:38:34,500 --> 00:38:38,640
check you know was a fairly good

948
00:38:38,640 --> 00:38:40,460
head-to-head competitor

949
00:38:40,460 --> 00:38:43,260
one of the main differences why people

950
00:38:43,260 --> 00:38:46,079
vendors or some of the companies have

951
00:38:46,079 --> 00:38:47,760
gone with the vendor Solutions as

952
00:38:47,760 --> 00:38:50,099
opposed to dependency check well

953
00:38:50,099 --> 00:38:51,720
they wanted to ensure that they had

954
00:38:51,720 --> 00:38:52,920
support

955
00:38:52,920 --> 00:38:56,760
um that is not just relying on a handful

956
00:38:56,760 --> 00:38:58,320
of developers in the open source

957
00:38:58,320 --> 00:39:00,180
Community not saying that that's a bad

958
00:39:00,180 --> 00:39:02,760
thing but you know I mean it all depends

959
00:39:02,760 --> 00:39:05,940
on the company and and and

960
00:39:05,940 --> 00:39:07,619
how much support they want to have for

961
00:39:07,619 --> 00:39:08,940
some of these things there are many

962
00:39:08,940 --> 00:39:10,500
companies that I know of that use

963
00:39:10,500 --> 00:39:12,240
dependency check

964
00:39:12,240 --> 00:39:14,579
within their CI CD pipelines

965
00:39:14,579 --> 00:39:16,140
um they are just continually scanning

966
00:39:16,140 --> 00:39:18,180
all the time

967
00:39:18,180 --> 00:39:20,640
uh that's part of why the uh download

968
00:39:20,640 --> 00:39:23,339
counts have been increasing uh and I

969
00:39:23,339 --> 00:39:25,200
believe that's partially due to some of

970
00:39:25,200 --> 00:39:28,140
the uh usage of ephemeral builds that we

971
00:39:28,140 --> 00:39:30,359
have going on uh in the in the

972
00:39:30,359 --> 00:39:32,820
environment right now

973
00:39:32,820 --> 00:39:35,160
um another one like I said it's just

974
00:39:35,160 --> 00:39:37,859
uses the primary tool for some but for

975
00:39:37,859 --> 00:39:39,480
some companies

976
00:39:39,480 --> 00:39:40,260
um

977
00:39:40,260 --> 00:39:43,020
and the interesting thing is that some

978
00:39:43,020 --> 00:39:46,200
companies actually use multiple SCA

979
00:39:46,200 --> 00:39:47,160
tools

980
00:39:47,160 --> 00:39:50,040
uh that's because

981
00:39:50,040 --> 00:39:52,920
in in my opinion uh software composition

982
00:39:52,920 --> 00:39:56,460
analysis is one of the most critical

983
00:39:56,460 --> 00:39:58,500
um

984
00:39:58,500 --> 00:40:00,839
um security scanning security testing

985
00:40:00,839 --> 00:40:02,280
that can be done

986
00:40:02,280 --> 00:40:04,980
because when there are like a lot of the

987
00:40:04,980 --> 00:40:08,940
stuff identified by SCA tools is really

988
00:40:08,940 --> 00:40:11,400
you you question the exploitability of

989
00:40:11,400 --> 00:40:12,839
it

990
00:40:12,839 --> 00:40:16,020
um or or sometimes it's a lower risk but

991
00:40:16,020 --> 00:40:18,180
there are some vulnerabilities

992
00:40:18,180 --> 00:40:19,020
um

993
00:40:19,020 --> 00:40:23,700
hey log for Jay for instance uh where

994
00:40:23,700 --> 00:40:26,339
you need to identify this and you need

995
00:40:26,339 --> 00:40:29,820
to patch it as soon as possible it um

996
00:40:29,820 --> 00:40:32,160
software composition analysis identifies

997
00:40:32,160 --> 00:40:34,380
these known vulnerable risks to your

998
00:40:34,380 --> 00:40:36,480
application because it's a known

999
00:40:36,480 --> 00:40:38,300
vulnerable risk

1000
00:40:38,300 --> 00:40:42,300
there are uh there may be exploits

1001
00:40:42,300 --> 00:40:44,579
available in the wild that script

1002
00:40:44,579 --> 00:40:46,740
kitties can just scan the internet you

1003
00:40:46,740 --> 00:40:49,380
know trying to exploit these things

1004
00:40:49,380 --> 00:40:50,940
um some of the big some of the big

1005
00:40:50,940 --> 00:40:52,980
breaches over you know the past several

1006
00:40:52,980 --> 00:40:53,940
years

1007
00:40:53,940 --> 00:40:56,400
had a starting point with software

1008
00:40:56,400 --> 00:40:58,140
composition analysis where you know

1009
00:40:58,140 --> 00:40:59,700
somebody had a vulnerable version of

1010
00:40:59,700 --> 00:41:02,760
struts or a vulnerable version of you

1011
00:41:02,760 --> 00:41:03,420
know

1012
00:41:03,420 --> 00:41:05,400
whatever library and it had a remote

1013
00:41:05,400 --> 00:41:09,119
code execution in it and that was the

1014
00:41:09,119 --> 00:41:11,940
starting point to a breach within that

1015
00:41:11,940 --> 00:41:14,160
organization

1016
00:41:14,160 --> 00:41:14,940
um

1017
00:41:14,940 --> 00:41:16,619
but definitely

1018
00:41:16,619 --> 00:41:19,500
not all SCA findings are equal but it is

1019
00:41:19,500 --> 00:41:22,980
a critical piece because when those uh

1020
00:41:22,980 --> 00:41:24,720
severe vulnerabilities come up you need

1021
00:41:24,720 --> 00:41:26,099
to know about them

1022
00:41:26,099 --> 00:41:30,300
uh because they're well known and

1023
00:41:30,300 --> 00:41:32,460
and because they're well known they

1024
00:41:32,460 --> 00:41:36,680
become easier for attackers to exploit

1025
00:41:37,920 --> 00:41:39,920
so how can you help

1026
00:41:39,920 --> 00:41:44,599
if anybody really wants to help out uh

1027
00:41:44,599 --> 00:41:48,359
one we have about 350 open issues

1028
00:41:48,359 --> 00:41:51,420
questions enhancements bugs false

1029
00:41:51,420 --> 00:41:52,680
positives

1030
00:41:52,680 --> 00:41:54,720
Etc and unfortunately due to the usage

1031
00:41:54,720 --> 00:41:57,660
this number has been increasing and

1032
00:41:57,660 --> 00:41:59,760
you know we could really use some

1033
00:41:59,760 --> 00:42:03,480
additional uh support uh we have several

1034
00:42:03,480 --> 00:42:07,920
contributors uh Mark uh Mark Prime I

1035
00:42:07,920 --> 00:42:08,760
believe

1036
00:42:08,760 --> 00:42:11,660
um is the guy's name

1037
00:42:11,660 --> 00:42:14,460
amazing contributor he goes in and

1038
00:42:14,460 --> 00:42:16,859
answers so many people's questions about

1039
00:42:16,859 --> 00:42:19,500
dependency check

1040
00:42:19,500 --> 00:42:22,740
um Hans uh is one of the con um

1041
00:42:22,740 --> 00:42:25,619
uh is one of the other main contributors

1042
00:42:25,619 --> 00:42:28,020
to this to the project right now he's

1043
00:42:28,020 --> 00:42:30,920
been doing a ton of development work

1044
00:42:30,920 --> 00:42:33,599
supporting uh you know get helping clean

1045
00:42:33,599 --> 00:42:35,040
up some of these false positives

1046
00:42:35,040 --> 00:42:38,280
answering questions Etc

1047
00:42:38,280 --> 00:42:39,300
um

1048
00:42:39,300 --> 00:42:42,780
but we really could use more help

1049
00:42:42,780 --> 00:42:45,359
um as as the tool continues to evolve

1050
00:42:45,359 --> 00:42:47,160
and and

1051
00:42:47,160 --> 00:42:49,680
and expand

1052
00:42:49,680 --> 00:42:51,060
um one of the things that we've been

1053
00:42:51,060 --> 00:42:52,619
talking about for a few years now is

1054
00:42:52,619 --> 00:42:54,300
actually building out a full Enterprise

1055
00:42:54,300 --> 00:42:57,839
deployment guide because we've seen

1056
00:42:57,839 --> 00:43:01,319
people do it correctly and incorrectly

1057
00:43:01,319 --> 00:43:02,760
over the years

1058
00:43:02,760 --> 00:43:04,560
um talking to people

1059
00:43:04,560 --> 00:43:06,180
um so if it's something where you have

1060
00:43:06,180 --> 00:43:08,579
successfully deployed dependency check

1061
00:43:08,579 --> 00:43:10,680
within your Enterprise it would really

1062
00:43:10,680 --> 00:43:13,560
be great if somebody could contribute

1063
00:43:13,560 --> 00:43:15,960
back to the project

1064
00:43:15,960 --> 00:43:18,119
um the best practices that they've used

1065
00:43:18,119 --> 00:43:19,560
as they're deploying it within their

1066
00:43:19,560 --> 00:43:21,780
Enterprise

1067
00:43:21,780 --> 00:43:25,200
um lastly we could really use well I've

1068
00:43:25,200 --> 00:43:27,000
been the core maintainer of the Gradle

1069
00:43:27,000 --> 00:43:28,619
plug-in

1070
00:43:28,619 --> 00:43:29,760
um

1071
00:43:29,760 --> 00:43:32,280
we could really use a Gradle expert

1072
00:43:32,280 --> 00:43:33,780
something you can really understands

1073
00:43:33,780 --> 00:43:35,280
plugins

1074
00:43:35,280 --> 00:43:37,079
because we have occasionally run into

1075
00:43:37,079 --> 00:43:39,119
issues with Gradle

1076
00:43:39,119 --> 00:43:40,920
where we have

1077
00:43:40,920 --> 00:43:41,520
um

1078
00:43:41,520 --> 00:43:43,380
dependency

1079
00:43:43,380 --> 00:43:46,619
um uh collision and the plug-in stop

1080
00:43:46,619 --> 00:43:49,319
doesn't work on some projects uh my

1081
00:43:49,319 --> 00:43:50,760
understanding is that we can rewrite the

1082
00:43:50,760 --> 00:43:53,700
plugin to use the worker API instead of

1083
00:43:53,700 --> 00:43:56,579
the how it's written as a plug-in today

1084
00:43:56,579 --> 00:43:59,640
and that should isolate uh the

1085
00:43:59,640 --> 00:44:01,260
dependencies so that we don't run into

1086
00:44:01,260 --> 00:44:03,300
that conflict anymore

1087
00:44:03,300 --> 00:44:05,579
um we have an open issue on that uh

1088
00:44:05,579 --> 00:44:07,680
again I just have not

1089
00:44:07,680 --> 00:44:10,380
personally had the time to to work on

1090
00:44:10,380 --> 00:44:11,640
that

1091
00:44:11,640 --> 00:44:12,720
um

1092
00:44:12,720 --> 00:44:15,839
so we would really appreciate if anybody

1093
00:44:15,839 --> 00:44:17,700
does have the time or inclination to

1094
00:44:17,700 --> 00:44:18,900
help out with the project there's a

1095
00:44:18,900 --> 00:44:22,020
there's a lot of work to be done

1096
00:44:22,020 --> 00:44:23,940
um so I think

1097
00:44:23,940 --> 00:44:27,599
right at about uh 45 minutes or so I

1098
00:44:27,599 --> 00:44:29,520
think we're ready for questions

1099
00:44:29,520 --> 00:44:31,800
yep that was great thank you so much

1100
00:44:31,800 --> 00:44:34,500
Jeremy that was really interesting and

1101
00:44:34,500 --> 00:44:37,200
we do have a few questions in here for

1102
00:44:37,200 --> 00:44:39,900
the audience so I will get started with

1103
00:44:39,900 --> 00:44:41,040
those

1104
00:44:41,040 --> 00:44:42,420
um

1105
00:44:42,420 --> 00:44:45,420
they have asked does the tool identify

1106
00:44:45,420 --> 00:44:47,700
vulnerabilities on second level

1107
00:44:47,700 --> 00:44:50,700
dependencies

1108
00:44:50,940 --> 00:44:54,119
okay uh second level dependencies

1109
00:44:54,119 --> 00:44:55,619
um a lot of time those are referred to

1110
00:44:55,619 --> 00:45:00,119
as transitive dependencies and yes uh

1111
00:45:00,119 --> 00:45:01,859
well

1112
00:45:01,859 --> 00:45:04,380
to a point let me let me re-answer that

1113
00:45:04,380 --> 00:45:08,099
to a point it will if you were using a

1114
00:45:08,099 --> 00:45:10,079
build plug-in like the maven or Gradle

1115
00:45:10,079 --> 00:45:12,119
build plug-in absolutely that's one of

1116
00:45:12,119 --> 00:45:14,520
the benefits of using

1117
00:45:14,520 --> 00:45:17,819
um the build plug-in uh if you're not

1118
00:45:17,819 --> 00:45:19,680
using the build plug-in and you're just

1119
00:45:19,680 --> 00:45:21,599
using the command line tool

1120
00:45:21,599 --> 00:45:24,200
the only time the transitive

1121
00:45:24,200 --> 00:45:27,300
dependencies will be identified

1122
00:45:27,300 --> 00:45:30,599
is if they're in the scan path that I

1123
00:45:30,599 --> 00:45:33,960
you've you've downloaded and put all of

1124
00:45:33,960 --> 00:45:36,660
the dependencies in a single path

1125
00:45:36,660 --> 00:45:37,859
um that's one of the mistakes that I've

1126
00:45:37,859 --> 00:45:40,319
seen people make with

1127
00:45:40,319 --> 00:45:43,200
um like Maven or Gradle projects

1128
00:45:43,200 --> 00:45:45,060
is

1129
00:45:45,060 --> 00:45:45,599
um

1130
00:45:45,599 --> 00:45:48,800
here let me see if I can actually

1131
00:45:48,960 --> 00:45:52,040
show the example

1132
00:45:52,619 --> 00:45:54,800
um

1133
00:45:56,040 --> 00:45:58,560
again I've not actually built this

1134
00:45:58,560 --> 00:46:02,640
project but um let's see if it works

1135
00:46:02,640 --> 00:46:04,759
um

1136
00:46:05,160 --> 00:46:08,280
I just ran Maven package on

1137
00:46:08,280 --> 00:46:11,579
on the J soup uh you saw that it had one

1138
00:46:11,579 --> 00:46:14,000
dependency

1139
00:46:14,880 --> 00:46:18,240
um so if I just did the build

1140
00:46:18,240 --> 00:46:20,579
you know it's going down

1141
00:46:20,579 --> 00:46:22,020
um

1142
00:46:22,020 --> 00:46:23,339
some of these things might be build

1143
00:46:23,339 --> 00:46:25,319
plug-ins and other types of things not

1144
00:46:25,319 --> 00:46:27,119
not necessarily dependencies again I

1145
00:46:27,119 --> 00:46:29,460
haven't I I haven't gone in and looked

1146
00:46:29,460 --> 00:46:31,740
at this project at all

1147
00:46:31,740 --> 00:46:33,140
um

1148
00:46:33,140 --> 00:46:36,180
so hopefully this will this will be able

1149
00:46:36,180 --> 00:46:37,440
to demonstrate

1150
00:46:37,440 --> 00:46:38,819
um

1151
00:46:38,819 --> 00:46:41,400
uh the problem that I've seen people do

1152
00:46:41,400 --> 00:46:44,819
with just running dependency check on a

1153
00:46:44,819 --> 00:46:47,040
maven build and where they're

1154
00:46:47,040 --> 00:46:49,920
um running into problems

1155
00:46:49,920 --> 00:46:53,040
um so we did a build it was successful

1156
00:46:53,040 --> 00:46:54,720
and if we look at the Target directory a

1157
00:46:54,720 --> 00:46:56,220
lot of people may just scan the target

1158
00:46:56,220 --> 00:46:58,560
directory well

1159
00:46:58,560 --> 00:47:01,560
all we have is the jsuit lib here we

1160
00:47:01,560 --> 00:47:03,960
don't actually have

1161
00:47:03,960 --> 00:47:05,700
I mean if you actually dug into a lot of

1162
00:47:05,700 --> 00:47:08,040
these directories we don't have that any

1163
00:47:08,040 --> 00:47:10,440
annotations library or any of the others

1164
00:47:10,440 --> 00:47:14,700
but if we then go in here and run

1165
00:47:14,700 --> 00:47:16,759
um

1166
00:47:23,819 --> 00:47:26,819
foreign

1167
00:47:30,000 --> 00:47:34,859
hey I got it right okay so

1168
00:47:34,859 --> 00:47:36,660
um one of the things about the copy

1169
00:47:36,660 --> 00:47:39,839
dependencies then it actually puts the

1170
00:47:39,839 --> 00:47:41,160
wow I'm gonna have to go back and look

1171
00:47:41,160 --> 00:47:43,020
at this project why are we having oh

1172
00:47:43,020 --> 00:47:44,579
some of your tests look like test

1173
00:47:44,579 --> 00:47:46,800
dependencies okay so it copied all of

1174
00:47:46,800 --> 00:47:49,680
them that's uh Within

1175
00:47:49,680 --> 00:47:53,520
with independency check we do uh ignore

1176
00:47:53,520 --> 00:47:55,319
test dependencies so that may be

1177
00:47:55,319 --> 00:47:56,520
something I'll have to look at a little

1178
00:47:56,520 --> 00:47:58,940
bit but you can see the jsr right here

1179
00:47:58,940 --> 00:48:01,319
is identified that was the dependency

1180
00:48:01,319 --> 00:48:02,880
that was identified by dependency check

1181
00:48:02,880 --> 00:48:06,660
again uh my guess is that some of these

1182
00:48:06,660 --> 00:48:11,160
are either in scope like in in

1183
00:48:11,160 --> 00:48:11,760
um

1184
00:48:11,760 --> 00:48:13,619
part of the testing

1185
00:48:13,619 --> 00:48:16,760
um because this is a

1186
00:48:16,760 --> 00:48:20,520
HTML parser I could easily see some of

1187
00:48:20,520 --> 00:48:22,020
these things being part of the test case

1188
00:48:22,020 --> 00:48:24,359
and may not be a core dependency again

1189
00:48:24,359 --> 00:48:26,099
I'll have to go back out after this talk

1190
00:48:26,099 --> 00:48:29,520
and and look at that but my guess is a

1191
00:48:29,520 --> 00:48:31,440
lot of these are test dependent most if

1192
00:48:31,440 --> 00:48:34,380
not all of these are test dependencies

1193
00:48:34,380 --> 00:48:36,839
um so unless unless you actually were

1194
00:48:36,839 --> 00:48:39,020
unless you were doing a maven build

1195
00:48:39,020 --> 00:48:42,180
unless it was building a war or a spring

1196
00:48:42,180 --> 00:48:43,619
boot

1197
00:48:43,619 --> 00:48:45,599
um

1198
00:48:45,599 --> 00:48:49,520
um as as the target

1199
00:48:49,700 --> 00:48:52,200
dependency check may not actually find

1200
00:48:52,200 --> 00:48:54,420
the dependencies if you were using the

1201
00:48:54,420 --> 00:48:56,520
command line or the docker after doing a

1202
00:48:56,520 --> 00:49:00,119
build unless you did the um copy

1203
00:49:00,119 --> 00:49:02,660
dependencies

1204
00:49:02,760 --> 00:49:04,319
task

1205
00:49:04,319 --> 00:49:06,300
any other questions

1206
00:49:06,300 --> 00:49:08,460
yeah we still have another couple here

1207
00:49:08,460 --> 00:49:11,579
the next one is does the two work on

1208
00:49:11,579 --> 00:49:14,460
vendored slivers

1209
00:49:14,460 --> 00:49:17,940
on vendor one vendored Library so I'm

1210
00:49:17,940 --> 00:49:19,680
presuming that means on libraries that

1211
00:49:19,680 --> 00:49:21,900
are owned specifically by specifically

1212
00:49:21,900 --> 00:49:24,599
owned by a vendor um yeah yeah so so

1213
00:49:24,599 --> 00:49:26,339
commercial libraries

1214
00:49:26,339 --> 00:49:30,060
um yes it would uh if you if you know it

1215
00:49:30,060 --> 00:49:31,740
for instance if you had like an internal

1216
00:49:31,740 --> 00:49:34,260
Nexus or or

1217
00:49:34,260 --> 00:49:37,500
um the artifactory or something in your

1218
00:49:37,500 --> 00:49:39,359
build and you and you had loaded some

1219
00:49:39,359 --> 00:49:41,339
commercial libraries and you brought

1220
00:49:41,339 --> 00:49:44,819
them into your build yes they will be

1221
00:49:44,819 --> 00:49:46,020
identified

1222
00:49:46,020 --> 00:49:48,180
will there be known vulnerabilities with

1223
00:49:48,180 --> 00:49:50,760
them maybe maybe not uh it all depends

1224
00:49:50,760 --> 00:49:53,819
on whether or not

1225
00:49:53,819 --> 00:49:56,520
um the nvd has

1226
00:49:56,520 --> 00:49:58,980
uh if any of these those cves have been

1227
00:49:58,980 --> 00:50:02,099
published against that library because

1228
00:50:02,099 --> 00:50:04,619
sometimes the commercial libraries uh

1229
00:50:04,619 --> 00:50:07,020
some of the data may not end up in the

1230
00:50:07,020 --> 00:50:08,940
public data sources or even some of the

1231
00:50:08,940 --> 00:50:10,700
private data sources just because it's a

1232
00:50:10,700 --> 00:50:13,200
private library or a commercial library

1233
00:50:13,200 --> 00:50:16,140
that not everybody has access to

1234
00:50:16,140 --> 00:50:17,700
foreign

1235
00:50:17,700 --> 00:50:21,359
okay that's great and the next question

1236
00:50:21,359 --> 00:50:22,560
is

1237
00:50:22,560 --> 00:50:24,240
um are you working full-time on

1238
00:50:24,240 --> 00:50:27,380
dependency check not a bit of it

1239
00:50:27,380 --> 00:50:30,900
I have a full-time day job uh what

1240
00:50:30,900 --> 00:50:32,819
shocks a lot of people about dependency

1241
00:50:32,819 --> 00:50:34,619
check is

1242
00:50:34,619 --> 00:50:37,980
um my at my day job we don't even use it

1243
00:50:37,980 --> 00:50:39,200
okay

1244
00:50:39,200 --> 00:50:43,380
that is a huge yeah it was used for

1245
00:50:43,380 --> 00:50:47,760
about the maybe the first year maybe the

1246
00:50:47,760 --> 00:50:50,400
first year or two the dependency check

1247
00:50:50,400 --> 00:50:53,579
was around uh but you know for many

1248
00:50:53,579 --> 00:50:54,980
reasons

1249
00:50:54,980 --> 00:50:58,740
uh we went with a commercial product

1250
00:50:58,740 --> 00:51:02,460
um and uh dependency check was was used

1251
00:51:02,460 --> 00:51:06,599
for a while within a group doing audits

1252
00:51:06,599 --> 00:51:08,640
like I said it was originally built as

1253
00:51:08,640 --> 00:51:10,800
an auditor Tool uh where we were

1254
00:51:10,800 --> 00:51:13,500
auditing source code and

1255
00:51:13,500 --> 00:51:15,420
software composition analysis was one of

1256
00:51:15,420 --> 00:51:16,859
the things that we were looking at even

1257
00:51:16,859 --> 00:51:19,140
even though it wasn't called SCA back

1258
00:51:19,140 --> 00:51:20,520
then

1259
00:51:20,520 --> 00:51:22,079
um but yeah no I've continued to

1260
00:51:22,079 --> 00:51:23,579
maintain this

1261
00:51:23,579 --> 00:51:25,680
um historically a lot of my development

1262
00:51:25,680 --> 00:51:27,839
work has been if you look at my commit

1263
00:51:27,839 --> 00:51:30,359
history uh it's been between 5 a.m and 7

1264
00:51:30,359 --> 00:51:31,079
am

1265
00:51:31,079 --> 00:51:33,170
before the rest of my family is awake

1266
00:51:33,170 --> 00:51:36,839
[Laughter]

1267
00:51:36,839 --> 00:51:39,319
commitment

1268
00:51:40,500 --> 00:51:43,200
I guess the next question is have you

1269
00:51:43,200 --> 00:51:45,900
worked with universities to improve the

1270
00:51:45,900 --> 00:51:48,599
results such as the false positives and

1271
00:51:48,599 --> 00:51:50,220
false negatives

1272
00:51:50,220 --> 00:51:51,839
no

1273
00:51:51,839 --> 00:51:55,319
um really have not uh I know that I have

1274
00:51:55,319 --> 00:51:57,420
had some conversations uh throughout the

1275
00:51:57,420 --> 00:51:58,740
years with various people doing

1276
00:51:58,740 --> 00:52:02,880
interesting work in their PHD programs

1277
00:52:02,880 --> 00:52:03,599
um

1278
00:52:03,599 --> 00:52:07,200
around identifying if the vulnerable

1279
00:52:07,200 --> 00:52:10,380
vulnerable code was used uh because

1280
00:52:10,380 --> 00:52:12,119
that's one of the big issues with with

1281
00:52:12,119 --> 00:52:14,339
SCA is

1282
00:52:14,339 --> 00:52:15,720
um yeah I may have a vulnerable library

1283
00:52:15,720 --> 00:52:18,240
but it's the vulnerable code actually

1284
00:52:18,240 --> 00:52:21,540
used or exploitable in any way shape or

1285
00:52:21,540 --> 00:52:23,460
form and there's been some some really

1286
00:52:23,460 --> 00:52:25,680
interesting things going on around that

1287
00:52:25,680 --> 00:52:27,119
type of research

1288
00:52:27,119 --> 00:52:27,960
um

1289
00:52:27,960 --> 00:52:30,000
I think merge base may be doing

1290
00:52:30,000 --> 00:52:32,160
something interesting in that space

1291
00:52:32,160 --> 00:52:34,740
about if if things are vulnerable not so

1292
00:52:34,740 --> 00:52:37,260
that may be a company to go look at

1293
00:52:37,260 --> 00:52:39,839
okay that's really interesting thank you

1294
00:52:39,839 --> 00:52:40,980
for that

1295
00:52:40,980 --> 00:52:42,540
um another question that has just come

1296
00:52:42,540 --> 00:52:45,359
in is most modern projects use several

1297
00:52:45,359 --> 00:52:47,579
programming languages

1298
00:52:47,579 --> 00:52:49,680
are you trying to support more

1299
00:52:49,680 --> 00:52:53,359
programming languages going forward

1300
00:52:53,900 --> 00:52:56,960
yes uh

1301
00:52:56,960 --> 00:52:59,339
we are I mean that's that's one of the

1302
00:52:59,339 --> 00:53:01,859
reasons uh use cases for dependency

1303
00:53:01,859 --> 00:53:05,640
check is like even if you're using npm

1304
00:53:05,640 --> 00:53:07,859
uh you might be just doing your front

1305
00:53:07,859 --> 00:53:09,839
end with node

1306
00:53:09,839 --> 00:53:11,460
um but your back end is written in

1307
00:53:11,460 --> 00:53:14,400
another technology stack and that's one

1308
00:53:14,400 --> 00:53:16,319
of the reasons why uh some people are

1309
00:53:16,319 --> 00:53:17,880
using dependency check is because it

1310
00:53:17,880 --> 00:53:20,880
consolidates your npm which you can do

1311
00:53:20,880 --> 00:53:24,000
with npm audit and npm fix

1312
00:53:24,000 --> 00:53:25,859
but you can really get a more

1313
00:53:25,859 --> 00:53:27,240
Consolidated view of your entire

1314
00:53:27,240 --> 00:53:31,020
application by using dependency check uh

1315
00:53:31,020 --> 00:53:33,839
I will say a lot of the Integrations

1316
00:53:33,839 --> 00:53:36,000
that we have have come from pull

1317
00:53:36,000 --> 00:53:38,160
requests from people requesting support

1318
00:53:38,160 --> 00:53:40,140
for other languages

1319
00:53:40,140 --> 00:53:42,420
more than happy to help work on those

1320
00:53:42,420 --> 00:53:44,579
and improve them

1321
00:53:44,579 --> 00:53:45,660
um

1322
00:53:45,660 --> 00:53:47,520
but it all starts with somebody at least

1323
00:53:47,520 --> 00:53:50,339
raising an issue providing some sample

1324
00:53:50,339 --> 00:53:53,579
you know projects for us to look at and

1325
00:53:53,579 --> 00:53:57,140
we can take it from there

1326
00:53:58,140 --> 00:54:01,319
excellent thank you and are you trying

1327
00:54:01,319 --> 00:54:04,500
to improve the CLI detection which does

1328
00:54:04,500 --> 00:54:06,839
not require to add dependency check into

1329
00:54:06,839 --> 00:54:09,619
the bill system

1330
00:54:10,079 --> 00:54:12,260
uh

1331
00:54:12,260 --> 00:54:15,119
well I'm not necessarily sure that I'm

1332
00:54:15,119 --> 00:54:18,540
working to improve the CLI a whole lot I

1333
00:54:18,540 --> 00:54:20,160
mean other than just improving the

1334
00:54:20,160 --> 00:54:21,780
entire

1335
00:54:21,780 --> 00:54:23,819
um tool because all of the Integrations

1336
00:54:23,819 --> 00:54:26,520
do run off of a base

1337
00:54:26,520 --> 00:54:29,760
um dependency check uh core Library

1338
00:54:29,760 --> 00:54:32,460
and we do continue to work on that what

1339
00:54:32,460 --> 00:54:34,619
one of the interesting things there is

1340
00:54:34,619 --> 00:54:37,440
uh I am seeing some

1341
00:54:37,440 --> 00:54:40,260
hints that the nvd may may be

1342
00:54:40,260 --> 00:54:42,660
incorporating additional data that will

1343
00:54:42,660 --> 00:54:45,839
improve our accuracy quite a bit and get

1344
00:54:45,839 --> 00:54:47,099
rid of some that false negative false

1345
00:54:47,099 --> 00:54:49,619
positive one of the things that I am

1346
00:54:49,619 --> 00:54:51,540
have been working on is

1347
00:54:51,540 --> 00:54:54,000
um we kind of a script that we've slowly

1348
00:54:54,000 --> 00:54:56,819
been building out it's posted in a

1349
00:54:56,819 --> 00:54:58,400
couple of the issues

1350
00:54:58,400 --> 00:55:00,780
where instead of necessarily just

1351
00:55:00,780 --> 00:55:03,540
running the CLI

1352
00:55:03,540 --> 00:55:04,260
um

1353
00:55:04,260 --> 00:55:07,020
you could just run this script and it

1354
00:55:07,020 --> 00:55:08,339
would pick

1355
00:55:08,339 --> 00:55:10,859
between it would identify if it's a

1356
00:55:10,859 --> 00:55:13,920
maven build if it's a Gradle build

1357
00:55:13,920 --> 00:55:15,540
um or something else but it would pick

1358
00:55:15,540 --> 00:55:17,400
the maven and Gradle are the main ones

1359
00:55:17,400 --> 00:55:20,339
and if it was a major Gradle build it

1360
00:55:20,339 --> 00:55:22,440
will actually run dependency check using

1361
00:55:22,440 --> 00:55:23,640
the plug-in

1362
00:55:23,640 --> 00:55:26,880
and if it's not it will revert to just

1363
00:55:26,880 --> 00:55:28,140
using

1364
00:55:28,140 --> 00:55:30,599
um the the CLI or the docker image I

1365
00:55:30,599 --> 00:55:32,099
forget but I mean you could swap the

1366
00:55:32,099 --> 00:55:33,839
docker image or CLI out in that script

1367
00:55:33,839 --> 00:55:36,000
fairly easily that's something that I

1368
00:55:36,000 --> 00:55:37,140
probably need to promote a little bit

1369
00:55:37,140 --> 00:55:39,059
better because that script would be

1370
00:55:39,059 --> 00:55:40,680
something that would be very

1371
00:55:40,680 --> 00:55:43,200
useful to drop into some of the build

1372
00:55:43,200 --> 00:55:45,740
Pipelines

1373
00:55:46,440 --> 00:55:48,660
okay great that's fair enough and

1374
00:55:48,660 --> 00:55:50,520
another question that has just come in

1375
00:55:50,520 --> 00:55:53,700
is can we create our own data source

1376
00:55:53,700 --> 00:55:56,579
with internal Library information that

1377
00:55:56,579 --> 00:55:59,940
one that is an outstanding issue or

1378
00:55:59,940 --> 00:56:03,240
enhancement request on dependency check

1379
00:56:03,240 --> 00:56:04,079
um

1380
00:56:04,079 --> 00:56:05,579
at the moment

1381
00:56:05,579 --> 00:56:08,280
it wouldn't be that easy

1382
00:56:08,280 --> 00:56:11,220
um you you don't yeah it just wouldn't

1383
00:56:11,220 --> 00:56:13,680
be that easy to do

1384
00:56:13,680 --> 00:56:15,839
um I could Envision a way kind of a

1385
00:56:15,839 --> 00:56:19,819
hacky way of making that happen uh

1386
00:56:19,819 --> 00:56:24,319
but you know I just

1387
00:56:24,359 --> 00:56:26,099
open up the you know comment on the

1388
00:56:26,099 --> 00:56:29,099
issue on GitHub if you want to know more

1389
00:56:29,099 --> 00:56:31,559
um and and I can kind of come up I might

1390
00:56:31,559 --> 00:56:33,059
be able to come up with it with a way of

1391
00:56:33,059 --> 00:56:34,980
doing that now but no it is not

1392
00:56:34,980 --> 00:56:36,780
something the team has

1393
00:56:36,780 --> 00:56:39,480
really started building out yet

1394
00:56:39,480 --> 00:56:41,579
um it would be easy enough for a

1395
00:56:41,579 --> 00:56:45,660
developer to extend the product to add

1396
00:56:45,660 --> 00:56:48,480
additional data sources though so

1397
00:56:48,480 --> 00:56:50,940
okay and just to confirm has that

1398
00:56:50,940 --> 00:56:53,579
already been put in as a enhancement

1399
00:56:53,579 --> 00:56:55,859
request or are you asked okay so it has

1400
00:56:55,859 --> 00:56:57,960
no yeah sorry I should have been clear

1401
00:56:57,960 --> 00:56:59,940
there is

1402
00:56:59,940 --> 00:57:01,500
um almost positive it is still an open

1403
00:57:01,500 --> 00:57:05,099
enhancement request on in the 350 or so

1404
00:57:05,099 --> 00:57:07,640
open issues okay so

1405
00:57:07,640 --> 00:57:11,819
as I said there's 350 so

1406
00:57:11,819 --> 00:57:15,119
great and and then another question that

1407
00:57:15,119 --> 00:57:17,700
came in so how do you go about gaining

1408
00:57:17,700 --> 00:57:20,099
the support from your partners such as

1409
00:57:20,099 --> 00:57:24,260
OSS index for integration

1410
00:57:24,859 --> 00:57:28,380
I haven't yet I want to reach out to any

1411
00:57:28,380 --> 00:57:30,300
of the people in the

1412
00:57:30,300 --> 00:57:31,079
um

1413
00:57:31,079 --> 00:57:33,480
in any of these other uh groups uh

1414
00:57:33,480 --> 00:57:36,540
there's I've got a lot of interest in in

1415
00:57:36,540 --> 00:57:39,180
several of the things that that

1416
00:57:39,180 --> 00:57:40,859
that have been going on there with the

1417
00:57:40,859 --> 00:57:42,540
ossf

1418
00:57:42,540 --> 00:57:43,619
um

1419
00:57:43,619 --> 00:57:46,200
and I just have not between my my day

1420
00:57:46,200 --> 00:57:48,359
job the time I spend on dependency check

1421
00:57:48,359 --> 00:57:50,099
and some other personal projects I have

1422
00:57:50,099 --> 00:57:52,680
not uh reached out

1423
00:57:52,680 --> 00:57:55,559
um to them and and work on anything with

1424
00:57:55,559 --> 00:57:57,119
them although it's on my list of things

1425
00:57:57,119 --> 00:57:58,200
to do

1426
00:57:58,200 --> 00:58:00,240
we'll see

1427
00:58:00,240 --> 00:58:02,520
okay grace and last question just before

1428
00:58:02,520 --> 00:58:03,420
we

1429
00:58:03,420 --> 00:58:06,960
um finish up when in the stlc do you

1430
00:58:06,960 --> 00:58:09,960
recommend this tool to be used

1431
00:58:09,960 --> 00:58:11,520
uh

1432
00:58:11,520 --> 00:58:14,160
uh early and often

1433
00:58:14,160 --> 00:58:16,460
um honestly it's it's one of those where

1434
00:58:16,460 --> 00:58:18,720
uh the sooner that you know about

1435
00:58:18,720 --> 00:58:20,819
vulnerabilities

1436
00:58:20,819 --> 00:58:21,740
um

1437
00:58:21,740 --> 00:58:25,440
the sooner you can you know remediate

1438
00:58:25,440 --> 00:58:26,400
them

1439
00:58:26,400 --> 00:58:29,880
um especially again I I tend to more

1440
00:58:29,880 --> 00:58:32,520
Focus uh personally as my own personal

1441
00:58:32,520 --> 00:58:36,540
opinion not any of my employers Etc

1442
00:58:36,540 --> 00:58:38,099
um

1443
00:58:38,099 --> 00:58:42,240
I I tend to really you know focus on

1444
00:58:42,240 --> 00:58:44,160
some of those deserialization remote

1445
00:58:44,160 --> 00:58:46,920
code execution type vulnerabilities

1446
00:58:46,920 --> 00:58:50,040
just because those are truly truly

1447
00:58:50,040 --> 00:58:51,359
dangerous

1448
00:58:51,359 --> 00:58:53,099
um out of the gate try and get those

1449
00:58:53,099 --> 00:58:54,780
cleaned up as

1450
00:58:54,780 --> 00:58:58,020
quickly as possible and that's why I say

1451
00:58:58,020 --> 00:59:01,380
you know run it I mean like if you have

1452
00:59:01,380 --> 00:59:03,119
the capability there is a GitHub action

1453
00:59:03,119 --> 00:59:04,980
if you're using GitHub you can use this

1454
00:59:04,980 --> 00:59:06,359
GitHub action

1455
00:59:06,359 --> 00:59:08,040
um again you could also depending on

1456
00:59:08,040 --> 00:59:09,660
your environment if you're in and are

1457
00:59:09,660 --> 00:59:11,460
using Enterprise GitHub Enterprise or

1458
00:59:11,460 --> 00:59:14,940
not uh there's also Dependable which uh

1459
00:59:14,940 --> 00:59:17,339
does if you're using GitHub can do some

1460
00:59:17,339 --> 00:59:19,380
similar things the one thing about

1461
00:59:19,380 --> 00:59:20,819
depend about depending on your

1462
00:59:20,819 --> 00:59:23,460
technology stack they may not cover

1463
00:59:23,460 --> 00:59:25,799
transitive dependencies

1464
00:59:25,799 --> 00:59:27,059
um

1465
00:59:27,059 --> 00:59:29,460
so uh but there's a there's a GitHub

1466
00:59:29,460 --> 00:59:32,579
action for dependency check uh so run it

1467
00:59:32,579 --> 00:59:34,079
early and often

1468
00:59:34,079 --> 00:59:35,160
um

1469
00:59:35,160 --> 00:59:37,260
even on your pull requests if possible

1470
00:59:37,260 --> 00:59:39,119
because that way if somebody does

1471
00:59:39,119 --> 00:59:41,579
introduce a a new library

1472
00:59:41,579 --> 00:59:44,640
um to your application or a new version

1473
00:59:44,640 --> 00:59:47,280
you can get notified immediately if

1474
00:59:47,280 --> 00:59:49,260
there's a if there's an issue even

1475
00:59:49,260 --> 00:59:51,240
before merging on it and then you can

1476
00:59:51,240 --> 00:59:53,839
work to clean that up and rather than

1477
00:59:53,839 --> 00:59:57,440
propagate having risk in your code base

1478
00:59:57,440 --> 01:00:00,540
you can clean it up before you push that

1479
01:00:00,540 --> 01:00:01,680
release

1480
01:00:01,680 --> 01:00:04,079
okay yeah so early in Austin everyone

1481
01:00:04,079 --> 01:00:06,540
and that's ish that's a wrap so we just

1482
01:00:06,540 --> 01:00:08,400
want to say thank you for taking the

1483
01:00:08,400 --> 01:00:10,500
time to speak to us today Jeremy there's

1484
01:00:10,500 --> 01:00:14,099
a lot of comments in the Q a section as

1485
01:00:14,099 --> 01:00:16,140
well saying thank you one person saying

1486
01:00:16,140 --> 01:00:19,200
you're a legend so take that as you will

1487
01:00:19,200 --> 01:00:22,380
yeah and and hope to see you again soon

1488
01:00:22,380 --> 01:00:25,880
for everybody else

