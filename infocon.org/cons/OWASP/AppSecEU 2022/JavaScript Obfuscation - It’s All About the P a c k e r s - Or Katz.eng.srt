1
00:00:04,200 --> 00:00:07,140
hello and welcome to the breaker track

2
00:00:07,140 --> 00:00:10,500
today we are going to be listening to or

3
00:00:10,500 --> 00:00:12,540
cats who will be presenting about

4
00:00:12,540 --> 00:00:15,299
JavaScript obfuscation

5
00:00:15,299 --> 00:00:17,640
um or cats is a principal lead security

6
00:00:17,640 --> 00:00:21,060
researcher with Akamai Technologies

7
00:00:21,060 --> 00:00:23,699
um as you'll notice to the right you'll

8
00:00:23,699 --> 00:00:25,920
be able to submit any questions that you

9
00:00:25,920 --> 00:00:28,920
have for um or during the presentation

10
00:00:28,920 --> 00:00:30,539
and we'll be taking those questions

11
00:00:30,539 --> 00:00:32,399
during the last 10 minutes of our

12
00:00:32,399 --> 00:00:35,280
session today so please note that that

13
00:00:35,280 --> 00:00:37,500
chat function is disabled for you here

14
00:00:37,500 --> 00:00:39,480
in Zoom but you can't submit those

15
00:00:39,480 --> 00:00:43,260
questions in the huba app so at this

16
00:00:43,260 --> 00:00:46,620
time I'd like to go ahead and give the

17
00:00:46,620 --> 00:00:49,440
mic over to or and we'll go ahead and

18
00:00:49,440 --> 00:00:52,620
get going thank you for attending today

19
00:00:52,620 --> 00:00:55,559
thank you Christina let me just share my

20
00:00:55,559 --> 00:00:59,160
screen my screen hi everybody so

21
00:00:59,160 --> 00:01:00,780
um what I'm going to present to you

22
00:01:00,780 --> 00:01:02,699
today is a research about JavaScript

23
00:01:02,699 --> 00:01:05,519
application it's all about the Packer uh

24
00:01:05,519 --> 00:01:07,020
let's get started with a short

25
00:01:07,020 --> 00:01:09,240
introduction of myself

26
00:01:09,240 --> 00:01:12,119
um I'm a former former OS Israel chapter

27
00:01:12,119 --> 00:01:15,420
lead I think that I really proud uh

28
00:01:15,420 --> 00:01:17,340
doing in the past and leaving the

29
00:01:17,340 --> 00:01:20,159
activity on Israeli chapter I'm a data

30
00:01:20,159 --> 00:01:22,140
driven security researcher and hopefully

31
00:01:22,140 --> 00:01:24,479
that may will make sense for the end of

32
00:01:24,479 --> 00:01:27,060
representation presentation as I will

33
00:01:27,060 --> 00:01:28,860
present a lot of you know data that is

34
00:01:28,860 --> 00:01:30,960
associated so research that is

35
00:01:30,960 --> 00:01:34,439
associated with data uh when I try to

36
00:01:34,439 --> 00:01:38,400
Define my role in life uh my

37
00:01:38,400 --> 00:01:41,460
professional I I'm saying that

38
00:01:41,460 --> 00:01:43,920
um I'm trying to move security challenge

39
00:01:43,920 --> 00:01:46,079
into the science and solution space that

40
00:01:46,079 --> 00:01:47,759
part of the thing that I'm doing and

41
00:01:47,759 --> 00:01:49,860
hopefully that also will make sense for

42
00:01:49,860 --> 00:01:51,960
the end of the presentation

43
00:01:51,960 --> 00:01:55,079
and I have and that's the the most

44
00:01:55,079 --> 00:01:56,820
important thing here today I have a

45
00:01:56,820 --> 00:01:59,700
really boring Network social networker

46
00:01:59,700 --> 00:02:03,060
sauna therefore I don't encourage any of

47
00:02:03,060 --> 00:02:05,460
you to follow me at or underscore cats

48
00:02:05,460 --> 00:02:08,160
at Twitter don't do that boring Persona

49
00:02:08,160 --> 00:02:11,760
don't do that again uh cool so let's get

50
00:02:11,760 --> 00:02:14,480
started so how did I ended up here today

51
00:02:14,480 --> 00:02:17,340
uh so over 18 months ago I was doing

52
00:02:17,340 --> 00:02:18,599
some research about JavaScript

53
00:02:18,599 --> 00:02:21,480
obfuscation and the outcome of that

54
00:02:21,480 --> 00:02:23,459
research was me publishing three

55
00:02:23,459 --> 00:02:25,980
different blog posts the first blog post

56
00:02:25,980 --> 00:02:28,560
was more about

57
00:02:28,560 --> 00:02:32,099
um a dictionary kind of blogs mentioning

58
00:02:32,099 --> 00:02:34,260
the different techniques being used for

59
00:02:34,260 --> 00:02:36,720
obfuscating JavaScript the second blog

60
00:02:36,720 --> 00:02:38,700
was more into the trending thing that

61
00:02:38,700 --> 00:02:40,500
we're seeing out there when it comes to

62
00:02:40,500 --> 00:02:43,040
obfuscation and and

63
00:02:43,040 --> 00:02:45,540
fishing website and we were able to see

64
00:02:45,540 --> 00:02:47,280
some trending how many of those fishing

65
00:02:47,280 --> 00:02:49,379
websites are being obfuscated or those

66
00:02:49,379 --> 00:02:50,940
techniques being used on those phishing

67
00:02:50,940 --> 00:02:54,480
websites and the third blog which is

68
00:02:54,480 --> 00:02:56,040
um related to the image that you see in

69
00:02:56,040 --> 00:02:58,980
front of you was me taking a relatively

70
00:02:58,980 --> 00:03:02,519
simple obfuscated Javascript file and

71
00:03:02,519 --> 00:03:04,920
breaking up breaking down to small

72
00:03:04,920 --> 00:03:06,840
pieces trying to explain what really

73
00:03:06,840 --> 00:03:10,500
happened on that part and and as you can

74
00:03:10,500 --> 00:03:12,480
see on this image it it's not an easy

75
00:03:12,480 --> 00:03:13,980
file to be

76
00:03:13,980 --> 00:03:16,019
um and while I was doing that kind of

77
00:03:16,019 --> 00:03:18,239
research I asked myself the question

78
00:03:18,239 --> 00:03:20,640
well I can do that once that's right or

79
00:03:20,640 --> 00:03:23,040
even a few times but it's very time

80
00:03:23,040 --> 00:03:25,319
consuming effort to do that uh and it's

81
00:03:25,319 --> 00:03:27,780
not easy to do that in many cases and I

82
00:03:27,780 --> 00:03:29,400
asked myself a question whether I will

83
00:03:29,400 --> 00:03:32,340
be able to detect those kind of

84
00:03:32,340 --> 00:03:35,220
malicious JavaScript obfuscating

85
00:03:35,220 --> 00:03:37,800
JavaScript files in a much higher scale

86
00:03:37,800 --> 00:03:40,140
and create some sort of environment to

87
00:03:40,140 --> 00:03:42,840
do that so that was the beginning of my

88
00:03:42,840 --> 00:03:44,640
research and and it's part of that I

89
00:03:44,640 --> 00:03:47,580
created my well I I created the four

90
00:03:47,580 --> 00:03:49,140
kind of objective for me for that

91
00:03:49,140 --> 00:03:51,540
research and here are those objectives

92
00:03:51,540 --> 00:03:53,640
so the first objective was you tried to

93
00:03:53,640 --> 00:03:55,260
figure out if I can find a technique

94
00:03:55,260 --> 00:03:58,980
that will enable me to uh detect and

95
00:03:58,980 --> 00:04:00,959
obfuscated JavaScript but more

96
00:04:00,959 --> 00:04:02,760
preferably

97
00:04:02,760 --> 00:04:04,319
um being able to detect a malicious

98
00:04:04,319 --> 00:04:05,640
JavaScript

99
00:04:05,640 --> 00:04:07,980
the second objective do that it's scale

100
00:04:07,980 --> 00:04:10,739
right it's not about me doing that or

101
00:04:10,739 --> 00:04:13,500
others doing that kind of work we knew

102
00:04:13,500 --> 00:04:17,220
that in in in a scale of 100 or 11 000

103
00:04:17,220 --> 00:04:19,320
per day files being scanned and being

104
00:04:19,320 --> 00:04:21,478
able to detect those files

105
00:04:21,478 --> 00:04:23,400
the third objective which is actually

106
00:04:23,400 --> 00:04:27,300
well derived from the second one is as I

107
00:04:27,300 --> 00:04:30,600
had some you know limitations and my

108
00:04:30,600 --> 00:04:32,820
research was in the com in the context

109
00:04:32,820 --> 00:04:35,160
of looking into traffic and making

110
00:04:35,160 --> 00:04:37,740
decision based on the data

111
00:04:37,740 --> 00:04:40,740
being transferred over traffic over the

112
00:04:40,740 --> 00:04:44,280
wire I needed to use a technique that is

113
00:04:44,280 --> 00:04:47,040
not a technique that will enable me to

114
00:04:47,040 --> 00:04:49,620
render those JavaScript files meaning I

115
00:04:49,620 --> 00:04:52,320
need to look on a static kind of code

116
00:04:52,320 --> 00:04:54,720
analysis approach look into the files

117
00:04:54,720 --> 00:04:57,180
being transferred make decision based on

118
00:04:57,180 --> 00:04:59,340
that and much of that is related to

119
00:04:59,340 --> 00:05:01,199
Performance right once you take a

120
00:05:01,199 --> 00:05:03,120
Javascript file and try to render it it

121
00:05:03,120 --> 00:05:05,880
might take a few milliseconds or even

122
00:05:05,880 --> 00:05:08,580
more than that I had less time than that

123
00:05:08,580 --> 00:05:10,680
I just wanted to look into the file in a

124
00:05:10,680 --> 00:05:13,020
quick decision on the file as it being

125
00:05:13,020 --> 00:05:15,900
transferred without being rendered and

126
00:05:15,900 --> 00:05:17,759
the first objective that I have is that

127
00:05:17,759 --> 00:05:19,680
I would assume that I wanted to assume

128
00:05:19,680 --> 00:05:21,600
the Pareto Principle which means

129
00:05:21,600 --> 00:05:23,820
I'm not trying to cover all kind of

130
00:05:23,820 --> 00:05:25,800
obfuscation out there in the context of

131
00:05:25,800 --> 00:05:28,139
JavaScript obviously and looking into

132
00:05:28,139 --> 00:05:31,080
the most common most used

133
00:05:31,080 --> 00:05:33,000
um JavaScript Packer being used in the

134
00:05:33,000 --> 00:05:34,740
one when I'm saying JavaScript Packer

135
00:05:34,740 --> 00:05:36,840
eventually meaning the software that

136
00:05:36,840 --> 00:05:39,240
will take a JavaScript code and do an

137
00:05:39,240 --> 00:05:41,880
obfuscation for that code to get a much

138
00:05:41,880 --> 00:05:44,880
obfuscated much not well a not readable

139
00:05:44,880 --> 00:05:48,660
hard to be debugged kind of code and in

140
00:05:48,660 --> 00:05:50,820
that sense if I would be able to take 20

141
00:05:50,820 --> 00:05:53,580
of those Packers videos in the wild the

142
00:05:53,580 --> 00:05:55,800
most common most used kind of Packers

143
00:05:55,800 --> 00:05:58,380
and what I will be able to detect those

144
00:05:58,380 --> 00:06:01,979
I will be able to detect 80 of the

145
00:06:01,979 --> 00:06:03,900
samples out there and that was the

146
00:06:03,900 --> 00:06:06,360
objective of my research so you know

147
00:06:06,360 --> 00:06:08,100
obviously if someone is doing a

148
00:06:08,100 --> 00:06:10,820
proprietary kind of obfuscation or some

149
00:06:10,820 --> 00:06:13,740
highly dedicated unique tool being used

150
00:06:13,740 --> 00:06:16,139
to obfuscate those kind of scenarios are

151
00:06:16,139 --> 00:06:17,639
a bit less

152
00:06:17,639 --> 00:06:19,800
um were not in the scope of my research

153
00:06:19,800 --> 00:06:22,259
that's called like that

154
00:06:22,259 --> 00:06:24,360
and here are some links to that research

155
00:06:24,360 --> 00:06:27,720
that I was doing in 18 months ago so

156
00:06:27,720 --> 00:06:29,759
um I started the research and I had a

157
00:06:29,759 --> 00:06:31,139
few questions that I needed to address

158
00:06:31,139 --> 00:06:33,060
that's part of the process of the

159
00:06:33,060 --> 00:06:35,759
research so why and why and how

160
00:06:35,759 --> 00:06:37,319
JavaScript is being obviously that was

161
00:06:37,319 --> 00:06:38,940
the first question that came to mind

162
00:06:38,940 --> 00:06:41,400
what are the numbers behind the usage of

163
00:06:41,400 --> 00:06:43,860
JavaScript in the wild that was also a

164
00:06:43,860 --> 00:06:45,780
relevant question whether my research is

165
00:06:45,780 --> 00:06:48,840
really uh relevant in that sense in the

166
00:06:48,840 --> 00:06:50,759
amount of samples that we can see out

167
00:06:50,759 --> 00:06:52,080
there

168
00:06:52,080 --> 00:06:54,840
uh is it possible to detect

169
00:06:54,840 --> 00:06:57,120
um office created JavaScript right can I

170
00:06:57,120 --> 00:06:59,400
do that can I come up with a solution

171
00:06:59,400 --> 00:07:01,440
that will enable me to detect JavaScript

172
00:07:01,440 --> 00:07:02,639
application

173
00:07:02,639 --> 00:07:05,039
and on top of that and that's a question

174
00:07:05,039 --> 00:07:07,259
that I will give you as the answer for

175
00:07:07,259 --> 00:07:09,300
that does does JavaScript Association

176
00:07:09,300 --> 00:07:11,220
mean malicious right it doesn't equal to

177
00:07:11,220 --> 00:07:13,860
malicious and the answer is no and we'll

178
00:07:13,860 --> 00:07:17,280
go into that in details but the basic

179
00:07:17,280 --> 00:07:19,080
concept that we see JavaScript

180
00:07:19,080 --> 00:07:21,060
description and it could be a benign

181
00:07:21,060 --> 00:07:23,220
file it could be a malicious file and

182
00:07:23,220 --> 00:07:25,500
we'll try to figure out why is that and

183
00:07:25,500 --> 00:07:28,080
how we can differentiate between those

184
00:07:28,080 --> 00:07:31,139
so with those questions in mind let's do

185
00:07:31,139 --> 00:07:32,580
some sort of an introduction of

186
00:07:32,580 --> 00:07:34,080
JavaScript application what does it mean

187
00:07:34,080 --> 00:07:36,780
so try to imagine that you will don't

188
00:07:36,780 --> 00:07:38,580
imagine and you can see on screen three

189
00:07:38,580 --> 00:07:40,620
lines of code for JavaScript a very

190
00:07:40,620 --> 00:07:43,560
basic hello word kind of an example of a

191
00:07:43,560 --> 00:07:46,099
function and and some writing to console

192
00:07:46,099 --> 00:07:48,960
and if you take that those three lines

193
00:07:48,960 --> 00:07:51,000
of code and you put it into a JavaScript

194
00:07:51,000 --> 00:07:53,639
backer as I mentioned the software that

195
00:07:53,639 --> 00:07:55,319
will take that code and create an

196
00:07:55,319 --> 00:07:58,199
obfuscation on top of that code you will

197
00:07:58,199 --> 00:08:01,039
get a very large file with many lines

198
00:08:01,039 --> 00:08:03,500
unreadable and very hard to understand

199
00:08:03,500 --> 00:08:06,780
you can see that on screen but if if not

200
00:08:06,780 --> 00:08:09,300
if it's a bit blurry it's not the issue

201
00:08:09,300 --> 00:08:10,979
the issue is that it's very hard to

202
00:08:10,979 --> 00:08:13,199
understand it but if you will do that

203
00:08:13,199 --> 00:08:16,220
same kind of action on the same Packer

204
00:08:16,220 --> 00:08:19,020
one second after you did the previous

205
00:08:19,020 --> 00:08:22,020
obfuscation you will get another

206
00:08:22,020 --> 00:08:24,780
code being off skin the same three lines

207
00:08:24,780 --> 00:08:26,639
that you were trying to obfuscate you

208
00:08:26,639 --> 00:08:29,280
will try to opposite them again you will

209
00:08:29,280 --> 00:08:31,440
get different results right because when

210
00:08:31,440 --> 00:08:33,779
you compare those different obfuscated

211
00:08:33,779 --> 00:08:36,539
files after the world after being

212
00:08:36,539 --> 00:08:38,760
obfuscated in that sense the three kinds

213
00:08:38,760 --> 00:08:40,620
of code being obfuscated twice we can

214
00:08:40,620 --> 00:08:42,179
see that they are not the same meaning

215
00:08:42,179 --> 00:08:44,399
obfuscation created challenge in that

216
00:08:44,399 --> 00:08:46,920
sense that if we will come and try to

217
00:08:46,920 --> 00:08:49,620
solve the detection issue of those kind

218
00:08:49,620 --> 00:08:52,680
of files in the context of trying to

219
00:08:52,680 --> 00:08:54,959
create a signature for a nose file or

220
00:08:54,959 --> 00:08:57,240
hash those files we will have different

221
00:08:57,240 --> 00:08:59,399
results because they are constantly

222
00:08:59,399 --> 00:09:01,680
changing and from a defensive point of

223
00:09:01,680 --> 00:09:03,660
view obviously that's a problem and

224
00:09:03,660 --> 00:09:05,279
that's a problem that I would like to

225
00:09:05,279 --> 00:09:07,500
address in some of my research

226
00:09:07,500 --> 00:09:10,200
so we did an introduction now let's talk

227
00:09:10,200 --> 00:09:12,000
about how JavaScript is being obfuscated

228
00:09:12,000 --> 00:09:14,580
so the most common kind of techniques

229
00:09:14,580 --> 00:09:17,160
being used to obfuscate Javascript file

230
00:09:17,160 --> 00:09:19,980
will include heading a repetitive kind

231
00:09:19,980 --> 00:09:23,100
of patterns and repetitive uh

232
00:09:23,100 --> 00:09:25,260
functioning and variables name into a

233
00:09:25,260 --> 00:09:29,100
file uh some meaningless or hard to

234
00:09:29,100 --> 00:09:30,779
understand functioning variables the

235
00:09:30,779 --> 00:09:33,000
name as well right trying to create the

236
00:09:33,000 --> 00:09:35,880
the file that you look into not readable

237
00:09:35,880 --> 00:09:38,640
in that sense using a variety of

238
00:09:38,640 --> 00:09:41,040
techniques to do anti-debacking meaning

239
00:09:41,040 --> 00:09:42,899
if someone will try to debug your code

240
00:09:42,899 --> 00:09:45,060
it will be harder for you to do that

241
00:09:45,060 --> 00:09:48,779
uh and consuming compute Computing

242
00:09:48,779 --> 00:09:51,120
resources in time and meaning

243
00:09:51,120 --> 00:09:54,120
introducing into the code uh some Dev

244
00:09:54,120 --> 00:09:55,980
code meaning code that will be executed

245
00:09:55,980 --> 00:09:59,760
but will not do nothing just will be

246
00:09:59,760 --> 00:10:01,860
executing itself and create a bit more

247
00:10:01,860 --> 00:10:03,600
challenges to understand the code and

248
00:10:03,600 --> 00:10:06,120
follow the code in that in that sense or

249
00:10:06,120 --> 00:10:08,160
adding timers to the code making the

250
00:10:08,160 --> 00:10:09,120
code

251
00:10:09,120 --> 00:10:12,420
um execute uh much more time and in that

252
00:10:12,420 --> 00:10:15,540
sense again in the context of detection

253
00:10:15,540 --> 00:10:18,480
it create more challenges because it's

254
00:10:18,480 --> 00:10:20,700
all about time for you to detect a

255
00:10:20,700 --> 00:10:23,220
malicious file and if that time takes

256
00:10:23,220 --> 00:10:25,380
more than a few milliseconds it can take

257
00:10:25,380 --> 00:10:27,839
a few seconds obviously from a

258
00:10:27,839 --> 00:10:29,640
computational point of view that's a

259
00:10:29,640 --> 00:10:30,839
challenge

260
00:10:30,839 --> 00:10:33,180
so this is the how let's talk about the

261
00:10:33,180 --> 00:10:36,180
why so the Y goes down to the fact that

262
00:10:36,180 --> 00:10:38,160
let's talk about JavaScript right what's

263
00:10:38,160 --> 00:10:40,320
JavaScript all about so JavaScript is a

264
00:10:40,320 --> 00:10:42,600
client-side code right running on our

265
00:10:42,600 --> 00:10:45,120
browsers in most cases

266
00:10:45,120 --> 00:10:47,279
um and once we are saying that the

267
00:10:47,279 --> 00:10:49,740
giving code is running on our browser

268
00:10:49,740 --> 00:10:51,899
meaning that code is visible to us it's

269
00:10:51,899 --> 00:10:54,899
not a secret it's not as the example of

270
00:10:54,899 --> 00:10:57,500
of service sign code that we are not

271
00:10:57,500 --> 00:10:59,399
familiar with or we don't have

272
00:10:59,399 --> 00:11:01,620
visibility to that code and we don't

273
00:11:01,620 --> 00:11:04,079
know what that code is execute we try to

274
00:11:04,079 --> 00:11:07,140
guess that we try to to to do some sort

275
00:11:07,140 --> 00:11:08,820
of a black box thing and try to

276
00:11:08,820 --> 00:11:10,019
understand what happens on the server

277
00:11:10,019 --> 00:11:11,760
side but we are not the code is not

278
00:11:11,760 --> 00:11:13,740
visible to us and that's as opposed to

279
00:11:13,740 --> 00:11:15,839
JavaScript which we are have this

280
00:11:15,839 --> 00:11:17,579
ability to code and we can see what the

281
00:11:17,579 --> 00:11:20,160
code is doing therefore we can do some

282
00:11:20,160 --> 00:11:23,160
sort of uh debugging for the code and in

283
00:11:23,160 --> 00:11:25,680
that sense creating obfuscation for that

284
00:11:25,680 --> 00:11:27,959
kind of code it's a security by

285
00:11:27,959 --> 00:11:30,420
obscurity it's our ability to create

286
00:11:30,420 --> 00:11:33,300
much more challenging environment to

287
00:11:33,300 --> 00:11:34,980
those that try to understand what really

288
00:11:34,980 --> 00:11:36,959
happened on the code that we just send

289
00:11:36,959 --> 00:11:39,600
them to be executed on another browser

290
00:11:39,600 --> 00:11:42,480
so that's part of the the the the reason

291
00:11:42,480 --> 00:11:44,040
why we're seeing JavaScript being

292
00:11:44,040 --> 00:11:46,440
obfuscated to make it the code harder to

293
00:11:46,440 --> 00:11:47,880
be read

294
00:11:47,880 --> 00:11:50,579
more to that make the code harder to be

295
00:11:50,579 --> 00:11:52,920
debugged that's the same objective right

296
00:11:52,920 --> 00:11:55,140
to create some sort of a code that

297
00:11:55,140 --> 00:11:57,899
it will be harder for for some of us to

298
00:11:57,899 --> 00:12:00,120
understand and develop that it's not

299
00:12:00,120 --> 00:12:02,100
impossible it's harder that's the

300
00:12:02,100 --> 00:12:03,720
objective

301
00:12:03,720 --> 00:12:06,959
and the second reason for that uh on the

302
00:12:06,959 --> 00:12:08,640
why you know JavaScript is being

303
00:12:08,640 --> 00:12:10,800
obfuscated and and as I mentioned and

304
00:12:10,800 --> 00:12:13,560
that I mentioned before it's a way to

305
00:12:13,560 --> 00:12:17,279
create much more challenge for us uh the

306
00:12:17,279 --> 00:12:20,100
defensive side of thing

307
00:12:20,100 --> 00:12:23,760
um because trying to Hash or use a

308
00:12:23,760 --> 00:12:26,459
signature based text on a given

309
00:12:26,459 --> 00:12:28,560
Javascript file will be harder because

310
00:12:28,560 --> 00:12:31,260
JavaScript is constantly changing and

311
00:12:31,260 --> 00:12:33,480
it's very hard to find patterns and it's

312
00:12:33,480 --> 00:12:35,700
very hard to Hash those kind of files as

313
00:12:35,700 --> 00:12:37,079
a result of that

314
00:12:37,079 --> 00:12:39,360
but there is another explanation that I

315
00:12:39,360 --> 00:12:41,640
would like to share in that sense which

316
00:12:41,640 --> 00:12:44,880
is from a defensive point of view

317
00:12:44,880 --> 00:12:47,100
um and that's an and kind of an equation

318
00:12:47,100 --> 00:12:49,680
that I have in mind hopefully you will

319
00:12:49,680 --> 00:12:52,920
uh see as relevant so what from a

320
00:12:52,920 --> 00:12:54,720
defensive point of view once you need

321
00:12:54,720 --> 00:12:57,899
more resources and more time to do your

322
00:12:57,899 --> 00:12:59,160
work

323
00:12:59,160 --> 00:13:01,620
the outcome for that would be lower

324
00:13:01,620 --> 00:13:05,160
detection rates right because again if I

325
00:13:05,160 --> 00:13:07,139
need to make a decision on a file that's

326
00:13:07,139 --> 00:13:09,000
being transferred and and I need to

327
00:13:09,000 --> 00:13:10,860
render each file and some of those files

328
00:13:10,860 --> 00:13:13,980
contain uh that code over timers into

329
00:13:13,980 --> 00:13:16,260
those files and it will take much more

330
00:13:16,260 --> 00:13:18,660
time to do the rendering part then

331
00:13:18,660 --> 00:13:20,100
obviously it will take more

332
00:13:20,100 --> 00:13:22,320
computational kind of resources for us

333
00:13:22,320 --> 00:13:24,420
and as a result of that if I will be

334
00:13:24,420 --> 00:13:26,940
overwhelmed overwhelmed with those kind

335
00:13:26,940 --> 00:13:28,860
of examples or those kind of samples

336
00:13:28,860 --> 00:13:31,380
that are being obfuscated that obviously

337
00:13:31,380 --> 00:13:33,360
will limit my detection at one point of

338
00:13:33,360 --> 00:13:35,820
time because we don't live in a in an

339
00:13:35,820 --> 00:13:37,800
environment of unlimited resources it's

340
00:13:37,800 --> 00:13:39,600
always about resources and the same

341
00:13:39,600 --> 00:13:41,700
equation can be applied to the human

342
00:13:41,700 --> 00:13:44,700
resources right if we need researchers

343
00:13:44,700 --> 00:13:46,079
and analysts to do some sort of

344
00:13:46,079 --> 00:13:48,300
debugging or do analysis for a

345
00:13:48,300 --> 00:13:51,240
JavaScript cut file uh if we have a lot

346
00:13:51,240 --> 00:13:54,240
of those out there obviously we have

347
00:13:54,240 --> 00:13:55,920
limitation in the amount of resource

348
00:13:55,920 --> 00:13:57,720
from a human point of view and that's

349
00:13:57,720 --> 00:14:00,300
also a challenge which is very similar

350
00:14:00,300 --> 00:14:02,040
but there's another approach for that or

351
00:14:02,040 --> 00:14:03,600
that another point of view on that from

352
00:14:03,600 --> 00:14:05,700
an adversary point of view because what

353
00:14:05,700 --> 00:14:07,200
I mentioned was a defensive point of

354
00:14:07,200 --> 00:14:08,880
view but an adversary point of view

355
00:14:08,880 --> 00:14:11,100
means that they will have higher success

356
00:14:11,100 --> 00:14:12,720
rate and that's what they're trying to

357
00:14:12,720 --> 00:14:14,940
achieve they are not trying to evade

358
00:14:14,940 --> 00:14:17,279
detection whatsoever they're trying to

359
00:14:17,279 --> 00:14:19,260
make our life harder and the result of

360
00:14:19,260 --> 00:14:21,480
that have better success rates as a

361
00:14:21,480 --> 00:14:23,579
result of that get more money out of us

362
00:14:23,579 --> 00:14:25,920
that's the equation that I have in mind

363
00:14:25,920 --> 00:14:28,680
so that's the how and the why but let's

364
00:14:28,680 --> 00:14:30,420
get started with the research itself

365
00:14:30,420 --> 00:14:31,740
right so

366
00:14:31,740 --> 00:14:34,079
when I started doing my research and I

367
00:14:34,079 --> 00:14:36,180
pulled up four different samples out

368
00:14:36,180 --> 00:14:37,260
there

369
00:14:37,260 --> 00:14:39,300
um and those samples uh as you can see

370
00:14:39,300 --> 00:14:41,459
here that's a snapshot from some of

371
00:14:41,459 --> 00:14:43,620
those samples and when you look first

372
00:14:43,620 --> 00:14:45,360
well first look into those different

373
00:14:45,360 --> 00:14:47,660
Snapshot from different four different

374
00:14:47,660 --> 00:14:50,820
files JavaScript files being obfuscated

375
00:14:50,820 --> 00:14:53,459
as you can see on screen uh led me to

376
00:14:53,459 --> 00:14:55,860
the conclusion that these are not the

377
00:14:55,860 --> 00:14:58,440
same snapshot it's not the same code

378
00:14:58,440 --> 00:14:59,699
well

379
00:14:59,699 --> 00:15:01,680
looks similar but it's not the same

380
00:15:01,680 --> 00:15:03,779
right if you will follow the examples

381
00:15:03,779 --> 00:15:05,760
you're they're not the same but it's

382
00:15:05,760 --> 00:15:07,500
more than that I want to tell you it's

383
00:15:07,500 --> 00:15:09,360
not the same entirely not this thing

384
00:15:09,360 --> 00:15:10,199
right

385
00:15:10,199 --> 00:15:11,579
um and the reason for that because there

386
00:15:11,579 --> 00:15:13,500
are these are four different files for

387
00:15:13,500 --> 00:15:16,019
different threads out there the upper

388
00:15:16,019 --> 00:15:18,600
two files are phishing files right on

389
00:15:18,600 --> 00:15:20,220
the right side

390
00:15:20,220 --> 00:15:23,220
um phishing website again some Financial

391
00:15:23,220 --> 00:15:25,860
Service on on the left side

392
00:15:25,860 --> 00:15:27,959
um phishing attack against some sort of

393
00:15:27,959 --> 00:15:30,199
an enterprise-associated kind of service

394
00:15:30,199 --> 00:15:32,519
and on the bottom you can see on the

395
00:15:32,519 --> 00:15:34,500
right side and now we're dropper that

396
00:15:34,500 --> 00:15:36,480
was written in JavaScript and on the

397
00:15:36,480 --> 00:15:38,959
left side you can see a mage card

398
00:15:38,959 --> 00:15:41,820
Javascript file that was used to try to

399
00:15:41,820 --> 00:15:42,779
steal

400
00:15:42,779 --> 00:15:46,199
uh credit cards uh from uh from a

401
00:15:46,199 --> 00:15:49,500
website that that file was injected

402
00:15:49,500 --> 00:15:52,139
wait so they are entirely you know

403
00:15:52,139 --> 00:15:54,000
different in that thing in that sense

404
00:15:54,000 --> 00:15:56,820
but I'm telling you that's very similar

405
00:15:56,820 --> 00:15:59,639
code because when you do zoom out from

406
00:15:59,639 --> 00:16:01,019
that code you can see that there is

407
00:16:01,019 --> 00:16:03,660
actually pattern that repeats itself in

408
00:16:03,660 --> 00:16:06,000
those four different snapshots

409
00:16:06,000 --> 00:16:07,800
and the pattern said the following thing

410
00:16:07,800 --> 00:16:10,320
we have a Anonymous function here with

411
00:16:10,320 --> 00:16:13,079
two variables and inside that function

412
00:16:13,079 --> 00:16:15,660
you can see a variable that contains a

413
00:16:15,660 --> 00:16:18,360
function inside of that with a while

414
00:16:18,360 --> 00:16:21,180
with a decreasing value and then we can

415
00:16:21,180 --> 00:16:22,740
see that there is a push and shift

416
00:16:22,740 --> 00:16:23,940
meaning there is some sort of

417
00:16:23,940 --> 00:16:26,399
functionality that taking

418
00:16:26,399 --> 00:16:26,940
um

419
00:16:26,940 --> 00:16:29,040
um JavaScript array and doing some sort

420
00:16:29,040 --> 00:16:31,500
of a rotation on that file think about

421
00:16:31,500 --> 00:16:35,300
it as a payload mean constantly changed

422
00:16:35,300 --> 00:16:38,279
and obviously that means that we have

423
00:16:38,279 --> 00:16:41,100
something new right if we have a pattern

424
00:16:41,100 --> 00:16:43,380
maybe we have the ability to detect that

425
00:16:43,380 --> 00:16:46,279
pattern because that pattern represents

426
00:16:46,279 --> 00:16:49,500
that given Javascript file or sorry that

427
00:16:49,500 --> 00:16:53,100
given JavaScript Packer trying to do

428
00:16:53,100 --> 00:16:54,899
some obfuscation for a variety of

429
00:16:54,899 --> 00:16:57,779
different files so that led me to the

430
00:16:57,779 --> 00:17:00,240
next phase of my research saying hey so

431
00:17:00,240 --> 00:17:02,699
okay I can see that code on the left

432
00:17:02,699 --> 00:17:05,520
side let's try to represent that code in

433
00:17:05,520 --> 00:17:07,500
a different way let's try to put it into

434
00:17:07,500 --> 00:17:10,559
a structural kind of

435
00:17:10,559 --> 00:17:11,220
um

436
00:17:11,220 --> 00:17:12,419
um

437
00:17:12,419 --> 00:17:15,959
the data uh set and in that sense I was

438
00:17:15,959 --> 00:17:16,980
using

439
00:17:16,980 --> 00:17:17,579
um

440
00:17:17,579 --> 00:17:20,339
um the ability to do that I was using an

441
00:17:20,339 --> 00:17:22,439
abstract extensive straight ASD which

442
00:17:22,439 --> 00:17:24,119
means you take it even file and you

443
00:17:24,119 --> 00:17:26,579
create a Json kind of format for that

444
00:17:26,579 --> 00:17:29,640
file which enabled enabled you to go

445
00:17:29,640 --> 00:17:31,980
over a given file and look for the

446
00:17:31,980 --> 00:17:34,799
relevant things on that file meaning in

447
00:17:34,799 --> 00:17:37,260
other words I don't want to detect the

448
00:17:37,260 --> 00:17:39,480
file as it is I don't want to detect the

449
00:17:39,480 --> 00:17:41,100
verbal's name that are constantly

450
00:17:41,100 --> 00:17:43,020
changing or the functioning I want to

451
00:17:43,020 --> 00:17:46,260
detect some sort of a structure of a

452
00:17:46,260 --> 00:17:49,380
functionality that always happens and in

453
00:17:49,380 --> 00:17:51,419
that sense if we are going to the kind

454
00:17:51,419 --> 00:17:53,340
of of an abstract kind of structure that

455
00:17:53,340 --> 00:17:56,160
we saw before we can go on the ASP file

456
00:17:56,160 --> 00:17:58,679
and find different things or different

457
00:17:58,679 --> 00:18:01,320
structure based detection on that file

458
00:18:01,320 --> 00:18:03,360
to be able to detect that kind of

459
00:18:03,360 --> 00:18:04,620
activity

460
00:18:04,620 --> 00:18:06,720
so in that sense I created an open

461
00:18:06,720 --> 00:18:09,539
source open source tool well it wasn't

462
00:18:09,539 --> 00:18:11,400
open source at the time and it's still

463
00:18:11,400 --> 00:18:13,820
not available

464
00:18:37,520 --> 00:18:40,679
in that sense

465
00:18:40,679 --> 00:18:43,440
so I have that in mind now I have to

466
00:18:43,440 --> 00:18:45,539
create those kind of structure-based

467
00:18:45,539 --> 00:18:48,059
signatures and in order to do that I

468
00:18:48,059 --> 00:18:50,700
flagged five different Packers that were

469
00:18:50,700 --> 00:18:53,640
the most interesting and the most used

470
00:18:53,640 --> 00:18:56,340
according to the data sets that I have

471
00:18:56,340 --> 00:18:58,620
uh and you can see it's the three first

472
00:18:58,620 --> 00:19:01,559
one which are well relatively trivial in

473
00:19:01,559 --> 00:19:03,360
that sense that they are doing a very

474
00:19:03,360 --> 00:19:06,900
basic kind of uh obfuscation taking a

475
00:19:06,900 --> 00:19:09,720
given payload doing some reshuffling of

476
00:19:09,720 --> 00:19:12,299
that of that payload in order to extract

477
00:19:12,299 --> 00:19:14,460
the original

478
00:19:14,460 --> 00:19:17,340
um code the JavaScript code that was

479
00:19:17,340 --> 00:19:21,900
encrypted by uh those Packers and here

480
00:19:21,900 --> 00:19:24,360
the the fourth and the fifth

481
00:19:24,360 --> 00:19:26,400
um Packer that I was

482
00:19:26,400 --> 00:19:28,980
um looking into and creating uh well

483
00:19:28,980 --> 00:19:30,840
structure based signature for those

484
00:19:30,840 --> 00:19:33,900
Packers and and what I wanted you to to

485
00:19:33,900 --> 00:19:36,299
see here is that the number four the

486
00:19:36,299 --> 00:19:39,000
Packer the number The Fourth Kind of

487
00:19:39,000 --> 00:19:41,880
Packer that I was looking into uh I call

488
00:19:41,880 --> 00:19:44,820
it Packer with dashes between the uh the

489
00:19:44,820 --> 00:19:46,679
letters and the reason for that is that

490
00:19:46,679 --> 00:19:48,840
when you look into the function itself

491
00:19:48,840 --> 00:19:50,580
you can see that the variables of that

492
00:19:50,580 --> 00:19:53,299
on the other function that function are

493
00:19:53,299 --> 00:19:55,260
p-a-c-k-e-r right that's the reason why

494
00:19:55,260 --> 00:19:56,820
I call it that

495
00:19:56,820 --> 00:20:00,240
and the fifth one which is shift push

496
00:20:00,240 --> 00:20:02,880
um kind of backer that's the name that I

497
00:20:02,880 --> 00:20:05,160
gave it uh the attacker is the reason

498
00:20:05,160 --> 00:20:07,200
that we can see a constant kind of

499
00:20:07,200 --> 00:20:09,000
looping and doing some sort of a

500
00:20:09,000 --> 00:20:10,620
rotation on the data and we'll talk

501
00:20:10,620 --> 00:20:14,059
about that later as well

502
00:20:14,100 --> 00:20:16,919
so we have we have now that in mind we

503
00:20:16,919 --> 00:20:19,380
have a um

504
00:20:19,380 --> 00:20:22,020
um a tool a script that will enable me

505
00:20:22,020 --> 00:20:24,240
to look into files and make decision

506
00:20:24,240 --> 00:20:27,539
right I know which Packers that I want

507
00:20:27,539 --> 00:20:30,059
to focus on which are the five factor

508
00:20:30,059 --> 00:20:32,460
that we just go over them right and then

509
00:20:32,460 --> 00:20:34,799
create a signature that uh structural

510
00:20:34,799 --> 00:20:37,980
based signature for those Packers now

511
00:20:37,980 --> 00:20:39,840
it's time to see some results now it's

512
00:20:39,840 --> 00:20:42,240
time to validate the fact that I was

513
00:20:42,240 --> 00:20:44,640
doing that on the Wild on a variety of

514
00:20:44,640 --> 00:20:48,000
samples of data sets of samples so it's

515
00:20:48,000 --> 00:20:50,220
doing that so on the left side you can

516
00:20:50,220 --> 00:20:52,620
see the name of the five Packers and you

517
00:20:52,620 --> 00:20:54,419
start to see the data sets that I was

518
00:20:54,419 --> 00:20:56,100
using in the first data set that I was

519
00:20:56,100 --> 00:20:58,260
using was a phishing data set with over

520
00:20:58,260 --> 00:20:59,760
100

521
00:20:59,760 --> 00:21:02,640
000 files the interesting part here is

522
00:21:02,640 --> 00:21:05,460
that that data set was really big but

523
00:21:05,460 --> 00:21:08,039
was not uh let's call it stable as I

524
00:21:08,039 --> 00:21:10,140
would like that to be or not as accurate

525
00:21:10,140 --> 00:21:12,299
as I would like it to be I had a lot of

526
00:21:12,299 --> 00:21:14,400
noise in that data set I have a lot of

527
00:21:14,400 --> 00:21:16,260
things that were not classified as

528
00:21:16,260 --> 00:21:18,299
fishing from the beginning but still I

529
00:21:18,299 --> 00:21:23,400
was able see the 2.1 percent of the

530
00:21:23,400 --> 00:21:25,740
files that were examined were actually

531
00:21:25,740 --> 00:21:29,400
matched by this well pattern-based

532
00:21:29,400 --> 00:21:30,840
signature

533
00:21:30,840 --> 00:21:33,539
um capability that I created meaning I

534
00:21:33,539 --> 00:21:35,220
have new detection this is a detection

535
00:21:35,220 --> 00:21:38,100
that I had didn't have before right uh

536
00:21:38,100 --> 00:21:39,840
as before those kind of detection was

537
00:21:39,840 --> 00:21:42,600
impossible again as the result of the

538
00:21:42,600 --> 00:21:45,179
fact that those

539
00:21:45,179 --> 00:21:47,280
um JavaScript office key JavaScript

540
00:21:47,280 --> 00:21:48,960
files aren't creating a much more

541
00:21:48,960 --> 00:21:51,120
challenged in a detection point of view

542
00:21:51,120 --> 00:21:52,559
because they are constantly changing

543
00:21:52,559 --> 00:21:54,539
right it's very hard for me to do that

544
00:21:54,539 --> 00:21:56,880
so that was the first data set in the

545
00:21:56,880 --> 00:21:59,340
first step the second data set that I

546
00:21:59,340 --> 00:22:02,340
was using was a malware Associated data

547
00:22:02,340 --> 00:22:05,760
set which was much much better with 9

548
00:22:05,760 --> 00:22:08,700
000 different samples and in that case

549
00:22:08,700 --> 00:22:10,620
when we did the examination we were able

550
00:22:10,620 --> 00:22:14,460
to see that 26 of that data set was

551
00:22:14,460 --> 00:22:17,100
using JavaScript obfuscation techniques

552
00:22:17,100 --> 00:22:21,059
on the data set data set itself which

553
00:22:21,059 --> 00:22:22,799
mean in other words and that's the the

554
00:22:22,799 --> 00:22:24,659
lesson learned from you here is the fact

555
00:22:24,659 --> 00:22:27,120
that we are seeing a lot of those

556
00:22:27,120 --> 00:22:29,460
Javascript file being offers code well

557
00:22:29,460 --> 00:22:31,200
malicious JavaScript filed being

558
00:22:31,200 --> 00:22:33,780
obfuscate in the wild means that that

559
00:22:33,780 --> 00:22:36,600
technique is well used that means that

560
00:22:36,600 --> 00:22:39,059
that kind of technique was something

561
00:22:39,059 --> 00:22:41,760
that motivates and been used by threat

562
00:22:41,760 --> 00:22:43,980
actors to try to create much more

563
00:22:43,980 --> 00:22:46,799
elusive kind of files to be detected

564
00:22:46,799 --> 00:22:48,780
right security by obscurity we said that

565
00:22:48,780 --> 00:22:49,679
before

566
00:22:49,679 --> 00:22:52,620
that's an interesting point

567
00:22:52,620 --> 00:22:55,260
the third and the fourth data statutory

568
00:22:55,260 --> 00:22:57,480
was doing was we're more into this side

569
00:22:57,480 --> 00:22:59,940
of false positive me saying hey so cool

570
00:22:59,940 --> 00:23:01,860
I have a technique I know how to detect

571
00:23:01,860 --> 00:23:04,980
uh obfuscated file I was checking that

572
00:23:04,980 --> 00:23:07,440
on malicious data set it was doing a

573
00:23:07,440 --> 00:23:09,299
great job no false positive the

574
00:23:09,299 --> 00:23:10,860
detection was accurate meaning I

575
00:23:10,860 --> 00:23:13,260
detected those kind of files and they

576
00:23:13,260 --> 00:23:14,940
were truly obfuscated it was not

577
00:23:14,940 --> 00:23:16,500
something else for some reason or the

578
00:23:16,500 --> 00:23:18,539
other now let's try to figure out what

579
00:23:18,539 --> 00:23:20,580
happened when I'm looking looking into a

580
00:23:20,580 --> 00:23:24,000
B9 data set such as for example Alexa

581
00:23:24,000 --> 00:23:27,179
top 18 000 website Alexa is the ranking

582
00:23:27,179 --> 00:23:28,799
kind of um

583
00:23:28,799 --> 00:23:32,580
uh website for different

584
00:23:32,580 --> 00:23:35,280
um highly popular uh websites like out

585
00:23:35,280 --> 00:23:37,200
there so I took the 18 most popular

586
00:23:37,200 --> 00:23:40,080
website out there and check them and the

587
00:23:40,080 --> 00:23:41,580
interesting part is that I was able to

588
00:23:41,580 --> 00:23:43,380
see that there is some detection on that

589
00:23:43,380 --> 00:23:45,980
data set meaning in other words

590
00:23:45,980 --> 00:23:49,260
that some of those website contains an

591
00:23:49,260 --> 00:23:51,419
obfuscated JavaScript code and I looked

592
00:23:51,419 --> 00:23:53,400
into that code and those files were

593
00:23:53,400 --> 00:23:56,159
accurate again good detection in that

594
00:23:56,159 --> 00:23:58,799
sense it's not some sort of um detection

595
00:23:58,799 --> 00:24:00,900
of pattern that looks very similar to

596
00:24:00,900 --> 00:24:02,760
obfuscation those were actually

597
00:24:02,760 --> 00:24:04,919
detection of office station on those

598
00:24:04,919 --> 00:24:07,679
files and more to that I validated those

599
00:24:07,679 --> 00:24:09,299
websites and I was able to see that

600
00:24:09,299 --> 00:24:10,919
those websites are benign they are not

601
00:24:10,919 --> 00:24:13,679
malicious right uh which is an

602
00:24:13,679 --> 00:24:15,600
interesting part and I was doing the

603
00:24:15,600 --> 00:24:18,179
same kind of test now on a random data

604
00:24:18,179 --> 00:24:19,020
set

605
00:24:19,020 --> 00:24:21,059
over 60

606
00:24:21,059 --> 00:24:24,299
000 different websites in that sense

607
00:24:24,299 --> 00:24:26,460
and still getting some detection on that

608
00:24:26,460 --> 00:24:28,559
site meaning in other words and that's

609
00:24:28,559 --> 00:24:31,440
my conclusion from from that data set is

610
00:24:31,440 --> 00:24:33,539
that

611
00:24:33,539 --> 00:24:36,000
obfuscation is

612
00:24:36,000 --> 00:24:39,120
used more heavily to

613
00:24:39,120 --> 00:24:42,179
well in the context of malicious files

614
00:24:42,179 --> 00:24:44,280
but that doesn't mean that obfuscation

615
00:24:44,280 --> 00:24:46,380
equals to malicious right because we're

616
00:24:46,380 --> 00:24:49,620
seeing benign websites uh that are also

617
00:24:49,620 --> 00:24:52,200
doing obfuscation and here are some of

618
00:24:52,200 --> 00:24:54,120
those insects right that related to some

619
00:24:54,120 --> 00:24:56,280
of the data that we saw before so I have

620
00:24:56,280 --> 00:24:58,559
the ability to to work in that sense I

621
00:24:58,559 --> 00:25:00,480
know now that I created a technique that

622
00:25:00,480 --> 00:25:02,220
will enable me to detect an office

623
00:25:02,220 --> 00:25:05,159
created files uh which is great right

624
00:25:05,159 --> 00:25:06,900
because I was validating a lot of those

625
00:25:06,900 --> 00:25:08,580
detection and I was able to see that

626
00:25:08,580 --> 00:25:11,039
there's no false positive I was able to

627
00:25:11,039 --> 00:25:13,020
see that there's over 4 000 new

628
00:25:13,020 --> 00:25:14,700
detections that I have meaning in other

629
00:25:14,700 --> 00:25:16,260
words that create a technique that

630
00:25:16,260 --> 00:25:19,440
enable me in a sense uh to have better

631
00:25:19,440 --> 00:25:21,059
detection detection that I didn't have

632
00:25:21,059 --> 00:25:23,580
before uh we can see that some of those

633
00:25:23,580 --> 00:25:26,340
Packers are more associated with

634
00:25:26,340 --> 00:25:29,039
malicious activity right because we can

635
00:25:29,039 --> 00:25:31,740
see the sum of those Packers uh only

636
00:25:31,740 --> 00:25:35,220
have detections on malicious uh samples

637
00:25:35,220 --> 00:25:38,940
for example the AES CTR degree right uh

638
00:25:38,940 --> 00:25:41,220
you can see hits on phishing data set on

639
00:25:41,220 --> 00:25:43,380
malware but we cannot see any hits on

640
00:25:43,380 --> 00:25:46,140
Alexa and random which means the usage

641
00:25:46,140 --> 00:25:48,179
of that Packer is much more oriented

642
00:25:48,179 --> 00:25:50,600
attempted to malicious activity

643
00:25:50,600 --> 00:25:52,760
statistically wise

644
00:25:52,760 --> 00:25:55,400
and finally right as I mentioned

645
00:25:55,400 --> 00:25:57,779
obfuscation doesn't equal to malicious

646
00:25:57,779 --> 00:26:00,120
meaning some of those papers and their

647
00:26:00,120 --> 00:26:02,100
core capabilities of obfuscating

648
00:26:02,100 --> 00:26:05,120
JavaScript code are being used for

649
00:26:05,120 --> 00:26:07,679
malicious activities but also being used

650
00:26:07,679 --> 00:26:10,500
for benign activities and that led me to

651
00:26:10,500 --> 00:26:12,539
the following question right the first

652
00:26:12,539 --> 00:26:14,700
one is what's the re what is the reason

653
00:26:14,700 --> 00:26:17,840
behind the fact that some of those

654
00:26:17,840 --> 00:26:20,520
benign websites are using obfuscation

655
00:26:20,520 --> 00:26:22,380
that's an interesting one and we'll go

656
00:26:22,380 --> 00:26:24,419
over to that and the second question is

657
00:26:24,419 --> 00:26:26,640
yes so obfuscation doesn't include

658
00:26:26,640 --> 00:26:28,080
demolition so I have a technique to

659
00:26:28,080 --> 00:26:29,580
detect obfuscation but how can I

660
00:26:29,580 --> 00:26:31,980
differentiate between something that is

661
00:26:31,980 --> 00:26:34,200
obfuscated and is malicious versus

662
00:26:34,200 --> 00:26:36,779
something that is obfuscation and benign

663
00:26:36,779 --> 00:26:39,360
and I will try to introduce uh at least

664
00:26:39,360 --> 00:26:42,059
a high level approach or a concept to be

665
00:26:42,059 --> 00:26:44,179
able to do that

666
00:26:44,179 --> 00:26:46,320
so let's start with the first question

667
00:26:46,320 --> 00:26:48,678
right

668
00:26:50,279 --> 00:26:52,860
what are the benign use cases for

669
00:26:52,860 --> 00:26:55,260
JavaScript infuscation

670
00:26:55,260 --> 00:26:57,840
um so I was going over some of those

671
00:26:57,840 --> 00:27:01,080
samples looking into them

672
00:27:01,080 --> 00:27:04,020
um and what I was able to see uh for

673
00:27:04,020 --> 00:27:06,120
example the reason why some of those

674
00:27:06,120 --> 00:27:07,260
files

675
00:27:07,260 --> 00:27:09,179
um or some of the that JavaScript being

676
00:27:09,179 --> 00:27:11,820
obfuscated are for reasons such as

677
00:27:11,820 --> 00:27:13,500
um email address masking for example

678
00:27:13,500 --> 00:27:16,860
some website wanna put some email

679
00:27:16,860 --> 00:27:19,980
addresses on the website as part of the

680
00:27:19,980 --> 00:27:22,500
website I want to make sure that for

681
00:27:22,500 --> 00:27:25,320
example search engines or crawlers or

682
00:27:25,320 --> 00:27:27,600
whatever will not crawl the star and

683
00:27:27,600 --> 00:27:29,520
decide and do harvesting for those kind

684
00:27:29,520 --> 00:27:31,500
of email addresses and then use them for

685
00:27:31,500 --> 00:27:33,900
spending or whatever so doing a very

686
00:27:33,900 --> 00:27:35,640
simple obfuscation for those email

687
00:27:35,640 --> 00:27:37,440
addresses will create a bit more

688
00:27:37,440 --> 00:27:39,299
challenge for those kind of search

689
00:27:39,299 --> 00:27:41,640
engines and scanners because they are

690
00:27:41,640 --> 00:27:43,200
not rendering the page therefore they

691
00:27:43,200 --> 00:27:45,120
will have a Hardline to extract those

692
00:27:45,120 --> 00:27:46,980
email addresses so that's a very naive

693
00:27:46,980 --> 00:27:49,440
but first first example

694
00:27:49,440 --> 00:27:51,720
um cookies uh cooking client-side

695
00:27:51,720 --> 00:27:55,440
cookies functionality don't don't try I

696
00:27:55,440 --> 00:27:57,000
I don't I'm not trying to explain that

697
00:27:57,000 --> 00:27:59,940
that's really bad practicing in the

698
00:27:59,940 --> 00:28:02,279
context of security but some website

699
00:28:02,279 --> 00:28:03,900
they're doing that and then doing some

700
00:28:03,900 --> 00:28:06,000
investigation for those uh JavaScript

701
00:28:06,000 --> 00:28:08,700
files the most interesting and most

702
00:28:08,700 --> 00:28:11,340
prevalent kind of approach was the third

703
00:28:11,340 --> 00:28:13,320
party scripts try to imagine that you

704
00:28:13,320 --> 00:28:17,400
have uh some sort of a service that you

705
00:28:17,400 --> 00:28:19,620
are consuming or using as part of your

706
00:28:19,620 --> 00:28:22,140
website let's say translation services

707
00:28:22,140 --> 00:28:24,240
right it's a third-party kind of service

708
00:28:24,240 --> 00:28:27,299
and you take some code from that third

709
00:28:27,299 --> 00:28:30,480
party and add it to your website and

710
00:28:30,480 --> 00:28:33,000
that third-party service is doing an

711
00:28:33,000 --> 00:28:35,640
obfuscation for reasons as you know

712
00:28:35,640 --> 00:28:37,559
security by security right as we

713
00:28:37,559 --> 00:28:38,820
mentioned before trying to create the

714
00:28:38,820 --> 00:28:41,340
code that is not readable or hard to be

715
00:28:41,340 --> 00:28:44,400
read in that sense

716
00:28:44,400 --> 00:28:46,020
um

717
00:28:46,020 --> 00:28:48,659
so in that sense you suddenly have an

718
00:28:48,659 --> 00:28:51,480
obfuscated code on your website that you

719
00:28:51,480 --> 00:28:53,340
were not aware of and I was able to see

720
00:28:53,340 --> 00:28:55,440
translation services in that sense and

721
00:28:55,440 --> 00:28:58,679
advertising Services as well and the

722
00:28:58,679 --> 00:29:00,779
last reason that I'm obviously not going

723
00:29:00,779 --> 00:29:02,520
to get into

724
00:29:02,520 --> 00:29:04,799
um a lot of adult content websites are

725
00:29:04,799 --> 00:29:06,960
using obfuscation for one reason or the

726
00:29:06,960 --> 00:29:09,120
other I'm not getting into that but a

727
00:29:09,120 --> 00:29:10,799
lot of mess happens on those websites

728
00:29:10,799 --> 00:29:11,520
and

729
00:29:11,520 --> 00:29:14,039
and that's one of that events that

730
00:29:14,039 --> 00:29:15,840
happening there

731
00:29:15,840 --> 00:29:18,659
um so we answered the first question on

732
00:29:18,659 --> 00:29:20,460
what's the reason we are seeing all of

733
00:29:20,460 --> 00:29:21,840
those things out there let's try to

734
00:29:21,840 --> 00:29:24,480
answer the second question with which is

735
00:29:24,480 --> 00:29:26,460
to try to address the issue of how can

736
00:29:26,460 --> 00:29:28,740
we differentiate between

737
00:29:28,740 --> 00:29:31,440
um benign of uh and officecaled

738
00:29:31,440 --> 00:29:33,179
JavaScript which is B9 versus malicious

739
00:29:33,179 --> 00:29:35,539
so in order to do that I'm suggesting it

740
00:29:35,539 --> 00:29:38,460
two complementary approach saying the

741
00:29:38,460 --> 00:29:40,500
following thing let's do the first step

742
00:29:40,500 --> 00:29:42,720
which is false positive how we can deal

743
00:29:42,720 --> 00:29:44,820
with false positive let's look on the

744
00:29:44,820 --> 00:29:46,860
benign side of thing and try to figure

745
00:29:46,860 --> 00:29:48,779
out what we can do there and then look

746
00:29:48,779 --> 00:29:51,120
into the true positive kind of approach

747
00:29:51,120 --> 00:29:53,840
going uh doing a machine learning

748
00:29:53,840 --> 00:29:57,059
classification kind of solution for the

749
00:29:57,059 --> 00:29:59,760
the problem space we're seeing let's

750
00:29:59,760 --> 00:30:02,880
start from the beginning false positives

751
00:30:02,880 --> 00:30:04,679
um so think about it like that so we

752
00:30:04,679 --> 00:30:06,600
have two data sets one is random the

753
00:30:06,600 --> 00:30:09,539
other one is Alexa and we have for each

754
00:30:09,539 --> 00:30:12,320
one of those different different

755
00:30:12,320 --> 00:30:17,100
websites that contains an obfuscated

756
00:30:17,100 --> 00:30:18,720
JavaScript that was part of our

757
00:30:18,720 --> 00:30:21,299
detection now what I was doing I was

758
00:30:21,299 --> 00:30:23,880
taking those JavaScript files and I was

759
00:30:23,880 --> 00:30:26,039
doing hash for those files and once I

760
00:30:26,039 --> 00:30:28,320
was able to do hashing for those parts I

761
00:30:28,320 --> 00:30:30,179
will do I was able to create this kind

762
00:30:30,179 --> 00:30:31,860
of map that we see in our relationship

763
00:30:31,860 --> 00:30:34,340
now because you're here on on the screen

764
00:30:34,340 --> 00:30:38,039
where we are having the the the blue

765
00:30:38,039 --> 00:30:40,980
dots are the actual website themselves

766
00:30:40,980 --> 00:30:42,960
and then the orange are the hash value

767
00:30:42,960 --> 00:30:45,120
so we can start to see that the same

768
00:30:45,120 --> 00:30:47,399
hash value is being used by many

769
00:30:47,399 --> 00:30:49,500
different websites and what does that

770
00:30:49,500 --> 00:30:52,200
mean that means that the same source

771
00:30:52,200 --> 00:30:54,600
code was obfuscated and then being

772
00:30:54,600 --> 00:30:57,059
reused by different website and the

773
00:30:57,059 --> 00:30:59,640
answer for why it happens in most cases

774
00:30:59,640 --> 00:31:01,500
it's the third party kind of scenario

775
00:31:01,500 --> 00:31:03,720
that we saw before right the same

776
00:31:03,720 --> 00:31:06,720
translation service has the same source

777
00:31:06,720 --> 00:31:08,580
code that source code being obfuscated

778
00:31:08,580 --> 00:31:10,440
and then being pushed to many different

779
00:31:10,440 --> 00:31:13,500
websites out there right and as a result

780
00:31:13,500 --> 00:31:15,059
of that we're starting to see those kind

781
00:31:15,059 --> 00:31:17,220
of relationships and when we have those

782
00:31:17,220 --> 00:31:19,320
kind of relationships that can lead led

783
00:31:19,320 --> 00:31:21,480
us to the point where we would say hey

784
00:31:21,480 --> 00:31:24,600
so a given hash file is being used well

785
00:31:24,600 --> 00:31:27,000
which we know it's now as part of

786
00:31:27,000 --> 00:31:28,559
architecture it's office kitchen

787
00:31:28,559 --> 00:31:31,080
obfuscating code

788
00:31:31,080 --> 00:31:34,080
um now we can see that that given Phi is

789
00:31:34,080 --> 00:31:36,059
being used on many different domains

790
00:31:36,059 --> 00:31:38,880
maybe we should say that that in those

791
00:31:38,880 --> 00:31:41,460
domains it has high popularity in that

792
00:31:41,460 --> 00:31:44,399
sense so we can easily flag that given

793
00:31:44,399 --> 00:31:47,580
hash file as being benign right and once

794
00:31:47,580 --> 00:31:50,880
we do that that can eliminate or try to

795
00:31:50,880 --> 00:31:52,980
reduce the problem space that we are

796
00:31:52,980 --> 00:31:55,380
facing because we can whitelist in that

797
00:31:55,380 --> 00:31:58,620
sense a lot of those websites by

798
00:31:58,620 --> 00:32:02,700
uh our ability to identify uh officecale

799
00:32:02,700 --> 00:32:04,200
JavaScript files that we've already

800
00:32:04,200 --> 00:32:05,820
flagged behind because those files are

801
00:32:05,820 --> 00:32:07,980
being reused and shared by different

802
00:32:07,980 --> 00:32:10,380
domains out there and only by doing a

803
00:32:10,380 --> 00:32:12,059
very minimal kind of experiment we were

804
00:32:12,059 --> 00:32:14,700
able to reduce the problem by 20 right

805
00:32:14,700 --> 00:32:17,940
uh if we had much more samples on the

806
00:32:17,940 --> 00:32:20,340
benign benign side of thing random and

807
00:32:20,340 --> 00:32:22,440
benign side of things we would probably

808
00:32:22,440 --> 00:32:24,600
have higher percentage but that's a

809
00:32:24,600 --> 00:32:26,520
really good start and that by itself but

810
00:32:26,520 --> 00:32:29,039
I mean 20 of the space of the false

811
00:32:29,039 --> 00:32:31,620
bottom side that we're able to see

812
00:32:31,620 --> 00:32:33,779
the second approach as I mentioned is

813
00:32:33,779 --> 00:32:36,000
the two positive approach which is I I

814
00:32:36,000 --> 00:32:38,520
was using machine learning kind of

815
00:32:38,520 --> 00:32:41,279
exercise to do that and when we talk

816
00:32:41,279 --> 00:32:42,659
about machine learning we talk about

817
00:32:42,659 --> 00:32:45,419
features so here you can see again the

818
00:32:45,419 --> 00:32:48,480
same uh file that I the obfuscated over

819
00:32:48,480 --> 00:32:50,640
18 months ago and break it down to small

820
00:32:50,640 --> 00:32:51,720
pieces

821
00:32:51,720 --> 00:32:53,820
but when you look into that file you can

822
00:32:53,820 --> 00:32:55,620
actually look at the file

823
00:32:55,620 --> 00:32:58,320
and look for the features on that file

824
00:32:58,320 --> 00:33:01,620
so for example if you have a array on

825
00:33:01,620 --> 00:33:03,480
the font and that array contains

826
00:33:03,480 --> 00:33:06,600
elements the number of elements on that

827
00:33:06,600 --> 00:33:09,360
file can be a feature uh the length of

828
00:33:09,360 --> 00:33:11,760
the element can be a feature

829
00:33:11,760 --> 00:33:12,960
um

830
00:33:12,960 --> 00:33:16,380
um the the type of characters being used

831
00:33:16,380 --> 00:33:18,419
on those elements can also be features

832
00:33:18,419 --> 00:33:20,519
so these are features again

833
00:33:20,519 --> 00:33:22,500
uh a different kind of set of feature

834
00:33:22,500 --> 00:33:25,220
would be hey let's try to count how many

835
00:33:25,220 --> 00:33:27,659
identifier we can see on a given file

836
00:33:27,659 --> 00:33:30,720
identifier would be uh the variable's

837
00:33:30,720 --> 00:33:33,659
name or function names or you know those

838
00:33:33,659 --> 00:33:35,640
kind of things on a file so how many

839
00:33:35,640 --> 00:33:37,620
variable names do you see on a given

840
00:33:37,620 --> 00:33:39,720
file that's a feature

841
00:33:39,720 --> 00:33:41,940
um what are those some of those variable

842
00:33:41,940 --> 00:33:43,559
name or functioning stuck with

843
00:33:43,559 --> 00:33:45,659
underscore zero each which is a notation

844
00:33:45,659 --> 00:33:49,080
kind of or or a way to create a variable

845
00:33:49,080 --> 00:33:50,760
names that are not readable which is

846
00:33:50,760 --> 00:33:52,320
frequently used by a lot of the office

847
00:33:52,320 --> 00:33:54,779
scaling uh tools or Packers in that

848
00:33:54,779 --> 00:33:57,059
sense that could also be a feature right

849
00:33:57,059 --> 00:33:59,940
how many you know start with underscore

850
00:33:59,940 --> 00:34:03,840
um uh zero is a feature right with that

851
00:34:03,840 --> 00:34:07,620
in mind now let's try to look on on this

852
00:34:07,620 --> 00:34:09,239
graph and try to better understand what

853
00:34:09,239 --> 00:34:12,179
I was trying to aim to so you can see on

854
00:34:12,179 --> 00:34:14,099
this graph that I took only two features

855
00:34:14,099 --> 00:34:17,339
right out of any given file that I was

856
00:34:17,339 --> 00:34:20,879
able to identify as being obfuscated

857
00:34:20,879 --> 00:34:24,359
under very specific Packer which is the

858
00:34:24,359 --> 00:34:26,339
push shift backer right one of the

859
00:34:26,339 --> 00:34:28,080
Packers that I was able to create as

860
00:34:28,080 --> 00:34:30,119
structural kind of signature with that

861
00:34:30,119 --> 00:34:33,060
funnel for for that so we have to

862
00:34:33,060 --> 00:34:35,099
feature on the left side the unique the

863
00:34:35,099 --> 00:34:37,260
number of unique identifiers right the

864
00:34:37,260 --> 00:34:40,260
number of unique verbal name and

865
00:34:40,260 --> 00:34:42,300
functioning and on the right side on the

866
00:34:42,300 --> 00:34:44,580
bottom if you see the number of elements

867
00:34:44,580 --> 00:34:47,040
in an array that we're able to see on a

868
00:34:47,040 --> 00:34:49,918
given file right two features only by

869
00:34:49,918 --> 00:34:52,139
looking into those those two features

870
00:34:52,139 --> 00:34:55,619
and using three data sets the red and

871
00:34:55,619 --> 00:34:57,660
the blue which are random and Alexa and

872
00:34:57,660 --> 00:35:00,119
the green one representing malware only

873
00:35:00,119 --> 00:35:02,339
by using those three data sets with

874
00:35:02,339 --> 00:35:04,020
those two features we can start to see

875
00:35:04,020 --> 00:35:06,300
that there is groups and in other words

876
00:35:06,300 --> 00:35:09,540
those future features enable me

877
00:35:09,540 --> 00:35:11,760
um to differentiate between different

878
00:35:11,760 --> 00:35:14,579
behaviors or different characteristics

879
00:35:14,579 --> 00:35:17,460
of files and being able to say who is

880
00:35:17,460 --> 00:35:19,260
benign and who's malicious because on

881
00:35:19,260 --> 00:35:21,359
the most right side and on the upper

882
00:35:21,359 --> 00:35:24,000
left side you can see two groups all

883
00:35:24,000 --> 00:35:26,339
files that all of them are malware

884
00:35:26,339 --> 00:35:28,800
related right and they are really

885
00:35:28,800 --> 00:35:30,900
distinct from any other data that we

886
00:35:30,900 --> 00:35:33,180
have on this graph but it's more than

887
00:35:33,180 --> 00:35:36,300
that if we will focus on the center of

888
00:35:36,300 --> 00:35:37,859
the graph where we see a variety of

889
00:35:37,859 --> 00:35:40,440
colors over there even going there we

890
00:35:40,440 --> 00:35:42,780
can see that we actually can do a better

891
00:35:42,780 --> 00:35:46,740
differentiation and have better features

892
00:35:46,740 --> 00:35:49,500
that describe describe and be able to

893
00:35:49,500 --> 00:35:51,359
differentiate between something that is

894
00:35:51,359 --> 00:35:53,339
benign versus something that is

895
00:35:53,339 --> 00:35:55,079
malicious something that is associated

896
00:35:55,079 --> 00:35:57,599
with malware data set right

897
00:35:57,599 --> 00:36:00,359
so having this in mind thinking about

898
00:36:00,359 --> 00:36:02,760
features and our ability to use those

899
00:36:02,760 --> 00:36:05,700
features to this to disable to well to

900
00:36:05,700 --> 00:36:07,500
differentiate and classify different

901
00:36:07,500 --> 00:36:09,839
groups or different files by those

902
00:36:09,839 --> 00:36:13,200
features I was using a decision tree to

903
00:36:13,200 --> 00:36:15,780
make those kind of decisions I will and

904
00:36:15,780 --> 00:36:18,119
I was using three different features on

905
00:36:18,119 --> 00:36:20,099
that decision tree

906
00:36:20,099 --> 00:36:22,440
um the the first two ones is the one

907
00:36:22,440 --> 00:36:24,420
well let's start from the beginning the

908
00:36:24,420 --> 00:36:27,060
first one is the number of

909
00:36:27,060 --> 00:36:29,579
uh identifiers right verbal name

910
00:36:29,579 --> 00:36:31,380
functioning that start with underscore

911
00:36:31,380 --> 00:36:34,980
zero reads the second feature was the

912
00:36:34,980 --> 00:36:37,440
number of elements in Array that we're

913
00:36:37,440 --> 00:36:39,660
able to see in a given file and the

914
00:36:39,660 --> 00:36:40,980
third one is the number of unique

915
00:36:40,980 --> 00:36:43,380
identifier again you've identify a

916
00:36:43,380 --> 00:36:45,540
verbal name and function so those three

917
00:36:45,540 --> 00:36:47,160
features enabled me to do better

918
00:36:47,160 --> 00:36:49,200
decision making right from a statistical

919
00:36:49,200 --> 00:36:52,020
point of view and if we look on the most

920
00:36:52,020 --> 00:36:54,540
right side of this tree of this decision

921
00:36:54,540 --> 00:36:55,680
tree

922
00:36:55,680 --> 00:36:58,320
we will be able to see the following

923
00:36:58,320 --> 00:37:01,079
thing so if the number of identifiers

924
00:37:01,079 --> 00:37:04,500
starting with underscore zero X is

925
00:37:04,500 --> 00:37:06,599
greater than 20 and the number of

926
00:37:06,599 --> 00:37:09,660
elements in Array is greater than 17 on

927
00:37:09,660 --> 00:37:12,260
a given five and the number of unique

928
00:37:12,260 --> 00:37:15,119
identifiers greater than 92 only using

929
00:37:15,119 --> 00:37:17,460
those three features with those values

930
00:37:17,460 --> 00:37:20,660
will enable us to detect

931
00:37:20,660 --> 00:37:24,599
757 of those files as being malicious

932
00:37:24,599 --> 00:37:27,920
and that number is out of the uh over

933
00:37:27,920 --> 00:37:31,460
1500 files that were initially

934
00:37:31,460 --> 00:37:34,200
identified as being obfuscated by the

935
00:37:34,200 --> 00:37:36,000
push shift

936
00:37:36,000 --> 00:37:38,880
um Packer so in other words only that

937
00:37:38,880 --> 00:37:41,700
side of the tree eliminate 50 of the

938
00:37:41,700 --> 00:37:45,480
problem and enable us to detect 50 of

939
00:37:45,480 --> 00:37:48,119
the sample that we will look into as

940
00:37:48,119 --> 00:37:50,400
being malicious so this is decision

941
00:37:50,400 --> 00:37:52,740
making and statistical decision making

942
00:37:52,740 --> 00:37:55,680
in that sense and how we can use that

943
00:37:55,680 --> 00:37:57,960
right and again this is a concept kind

944
00:37:57,960 --> 00:38:00,000
of thing that I'm showing you here it's

945
00:38:00,000 --> 00:38:03,060
less about the details and with the

946
00:38:03,060 --> 00:38:05,220
tuning that might be done or needed to

947
00:38:05,220 --> 00:38:07,320
be done on the decision tree more about

948
00:38:07,320 --> 00:38:09,000
the concept that I'm trying to introduce

949
00:38:09,000 --> 00:38:09,839
you

950
00:38:09,839 --> 00:38:11,940
so we have a few of those questions in

951
00:38:11,940 --> 00:38:13,560
the beginning let's try to see if we

952
00:38:13,560 --> 00:38:15,720
answered those questions why and how

953
00:38:15,720 --> 00:38:17,700
JavaScript is being obfuscated I think

954
00:38:17,700 --> 00:38:19,800
we answered that uh what are the numbers

955
00:38:19,800 --> 00:38:21,420
behind the usage of JavaScript

956
00:38:21,420 --> 00:38:24,140
application and we're able to see the 26

957
00:38:24,140 --> 00:38:28,260
of the malware Associated data set that

958
00:38:28,260 --> 00:38:30,240
by the way it was not just nowhere it

959
00:38:30,240 --> 00:38:32,220
was some some of that was phishing some

960
00:38:32,220 --> 00:38:34,079
of that was crypto Miner some of that

961
00:38:34,079 --> 00:38:36,720
was you know Mage card kind of attack it

962
00:38:36,720 --> 00:38:39,780
was a variety of samples but it was

963
00:38:39,780 --> 00:38:42,720
really great and very valid kind of data

964
00:38:42,720 --> 00:38:44,339
sets we're able to see really great

965
00:38:44,339 --> 00:38:46,980
detections on that uh we were able to

966
00:38:46,980 --> 00:38:48,780
see to answer the question in that

967
00:38:48,780 --> 00:38:50,099
JavaScript

968
00:38:50,099 --> 00:38:53,099
um does not equal the malicious right

969
00:38:53,099 --> 00:38:56,160
um meaning sorry obscation does not

970
00:38:56,160 --> 00:38:58,079
equal to malicious meaning Obsession can

971
00:38:58,079 --> 00:39:00,599
happen also be nice we're able to see

972
00:39:00,599 --> 00:39:02,160
some examples for that and why it

973
00:39:02,160 --> 00:39:03,599
happened

974
00:39:03,599 --> 00:39:05,160
um and more to that we were able to

975
00:39:05,160 --> 00:39:08,640
introduce a concept on how to be able to

976
00:39:08,640 --> 00:39:11,040
detect an obfuscated malicious

977
00:39:11,040 --> 00:39:15,800
JavaScript files uh as we saw before

978
00:39:15,839 --> 00:39:18,060
so we have those in mind let's charge

979
00:39:18,060 --> 00:39:21,500
start to talk about the next step

980
00:39:22,020 --> 00:39:24,660
well the next step for me obviously

981
00:39:24,660 --> 00:39:26,820
um here a few of the the things that I

982
00:39:26,820 --> 00:39:28,320
would like to do next and I would like

983
00:39:28,320 --> 00:39:30,240
to release the code for for this you

984
00:39:30,240 --> 00:39:32,640
know tool that I was writing I mean the

985
00:39:32,640 --> 00:39:34,500
process of doing that

986
00:39:34,500 --> 00:39:36,240
um I would like to add more signature

987
00:39:36,240 --> 00:39:39,660
for additional Packers uh refine the

988
00:39:39,660 --> 00:39:41,760
data set being used as I mentioned at

989
00:39:41,760 --> 00:39:44,820
the presentation uh some of the phishing

990
00:39:44,820 --> 00:39:46,740
data set was not really that great I

991
00:39:46,740 --> 00:39:48,960
would like to improve that

992
00:39:48,960 --> 00:39:51,420
um add more features uh to using the

993
00:39:51,420 --> 00:39:53,700
machine learning kind of approach and

994
00:39:53,700 --> 00:39:55,920
we'll try to explore the ability to

995
00:39:55,920 --> 00:39:58,500
create an algorithm that will enable me

996
00:39:58,500 --> 00:40:00,599
to detect those kind of

997
00:40:00,599 --> 00:40:03,060
let's call it structure based signature

998
00:40:03,060 --> 00:40:05,460
that I have on on backer files that will

999
00:40:05,460 --> 00:40:07,560
enable me doing that much more quickly

1000
00:40:07,560 --> 00:40:09,660
because some of the work that I was

1001
00:40:09,660 --> 00:40:12,200
doing was manual to try to extract those

1002
00:40:12,200 --> 00:40:15,060
pattern-based signature from different

1003
00:40:15,060 --> 00:40:16,920
Packers with a manual work that I was

1004
00:40:16,920 --> 00:40:18,540
doing

1005
00:40:18,540 --> 00:40:19,320
um

1006
00:40:19,320 --> 00:40:21,599
so we are toward the end of our

1007
00:40:21,599 --> 00:40:24,660
presentation and as you remember right

1008
00:40:24,660 --> 00:40:26,579
the name of the present thank you was uh

1009
00:40:26,579 --> 00:40:29,099
JavaScript it's all about the attackers

1010
00:40:29,099 --> 00:40:32,220
with the dashes on the Packers right

1011
00:40:32,220 --> 00:40:35,160
and I showed you said that the reason uh

1012
00:40:35,160 --> 00:40:38,339
that one of the attackers that I I named

1013
00:40:38,339 --> 00:40:40,099
it was

1014
00:40:40,099 --> 00:40:42,300
p-a-c-k-e-r and the reason for that is

1015
00:40:42,300 --> 00:40:44,400
because you know these are the variable

1016
00:40:44,400 --> 00:40:47,540
names being used on that function

1017
00:40:47,540 --> 00:40:50,940
now wait so

1018
00:40:50,940 --> 00:40:53,280
part of that project I was saying hey

1019
00:40:53,280 --> 00:40:56,280
don't use the Viber name as a signature

1020
00:40:56,280 --> 00:40:58,859
right they can change easel right

1021
00:40:58,859 --> 00:41:01,140
um don't use you know if you have white

1022
00:41:01,140 --> 00:41:04,800
spaces or or someone push some some code

1023
00:41:04,800 --> 00:41:08,220
into a given functionality well try to

1024
00:41:08,220 --> 00:41:09,599
figure out how you can create a

1025
00:41:09,599 --> 00:41:11,579
structure to to detect some of those

1026
00:41:11,579 --> 00:41:13,680
things right structure can be the fact

1027
00:41:13,680 --> 00:41:15,540
that you're using a function and then

1028
00:41:15,540 --> 00:41:17,460
doing some sort of uh

1029
00:41:17,460 --> 00:41:19,560
Loop inside of that function that could

1030
00:41:19,560 --> 00:41:21,660
be also be structured without naming you

1031
00:41:21,660 --> 00:41:24,060
know variable name without uh assuming

1032
00:41:24,060 --> 00:41:25,619
that there's other parts of code that

1033
00:41:25,619 --> 00:41:28,440
can be changed on that given source code

1034
00:41:28,440 --> 00:41:31,320
so the first one was Packer right but as

1035
00:41:31,320 --> 00:41:33,599
I was moving forward I was sampling a

1036
00:41:33,599 --> 00:41:35,339
lot of you know more data it will start

1037
00:41:35,339 --> 00:41:37,020
to see the different use case so I

1038
00:41:37,020 --> 00:41:39,480
decided to see that in some cases they

1039
00:41:39,480 --> 00:41:42,060
changed the Packer to pact right which

1040
00:41:42,060 --> 00:41:43,980
was a good sign that I'm using the right

1041
00:41:43,980 --> 00:41:45,780
approach right the my Approach of not

1042
00:41:45,780 --> 00:41:47,880
looking into variable name was a good

1043
00:41:47,880 --> 00:41:50,400
approach but then as I move forward I

1044
00:41:50,400 --> 00:41:53,040
start to see these kind of odd you know

1045
00:41:53,040 --> 00:41:56,400
underscore uh zero X and variable name

1046
00:41:56,400 --> 00:41:58,020
right and we mentioned that before

1047
00:41:58,020 --> 00:42:00,839
making the file unreadable obviously

1048
00:42:00,839 --> 00:42:03,540
much more unreadable

1049
00:42:03,540 --> 00:42:06,480
um and and that led me to well a

1050
00:42:06,480 --> 00:42:08,339
question that I had to ask myself well

1051
00:42:08,339 --> 00:42:10,020
maybe I should change the name of the

1052
00:42:10,020 --> 00:42:11,940
presentation right maybe it should be

1053
00:42:11,940 --> 00:42:14,480
it's all about the underscore

1054
00:42:14,480 --> 00:42:17,480
0x1761 right that that might be the name

1055
00:42:17,480 --> 00:42:19,320
representation because it's constantly

1056
00:42:19,320 --> 00:42:21,119
changing

1057
00:42:21,119 --> 00:42:23,640
um so that was my job for today uh

1058
00:42:23,640 --> 00:42:25,200
hopefully funny

1059
00:42:25,200 --> 00:42:27,660
um so I think and toward the end of the

1060
00:42:27,660 --> 00:42:31,500
presentation and I think it's good time

1061
00:42:31,500 --> 00:42:34,260
for me to have some question if you have

1062
00:42:34,260 --> 00:42:36,960
any yes we did receive a couple of

1063
00:42:36,960 --> 00:42:40,020
questions the first one is how resilient

1064
00:42:40,020 --> 00:42:42,300
is your approach versus Packer

1065
00:42:42,300 --> 00:42:44,400
developers changing their packers to

1066
00:42:44,400 --> 00:42:46,320
bypass your malware detection ml

1067
00:42:46,320 --> 00:42:47,579
features

1068
00:42:47,579 --> 00:42:50,780
so that's a good question right it's

1069
00:42:50,780 --> 00:42:52,920
I'm not saying everything is perfect

1070
00:42:52,920 --> 00:42:55,380
right if someone is changing Packers

1071
00:42:55,380 --> 00:42:58,140
functionality in that sense and

1072
00:42:58,140 --> 00:43:00,960
introducing different you know

1073
00:43:00,960 --> 00:43:03,359
approaches for doing obfuscation that

1074
00:43:03,359 --> 00:43:06,960
obviously will lead let me to do some

1075
00:43:06,960 --> 00:43:09,720
changes in my ability to do some

1076
00:43:09,720 --> 00:43:11,579
detection but here's the big bad right

1077
00:43:11,579 --> 00:43:13,980
it's all we always try to chase you know

1078
00:43:13,980 --> 00:43:16,140
our own tail in that sense of detection

1079
00:43:16,140 --> 00:43:18,839
right when we try to face adversary

1080
00:43:18,839 --> 00:43:20,880
Improvement and we try to increase our

1081
00:43:20,880 --> 00:43:23,880
own detection as well so basically what

1082
00:43:23,880 --> 00:43:25,500
I'm saying is that those kind of changes

1083
00:43:25,500 --> 00:43:27,660
doesn't happen frequently and we

1084
00:43:27,660 --> 00:43:29,700
constantly need to monitor the changes

1085
00:43:29,700 --> 00:43:32,160
of those packing and adjust to those but

1086
00:43:32,160 --> 00:43:33,660
again since they are not frequently

1087
00:43:33,660 --> 00:43:36,180
happening that creative well if they had

1088
00:43:36,180 --> 00:43:38,099
to create if the word that have been

1089
00:43:38,099 --> 00:43:39,599
changed very frequently that means the

1090
00:43:39,599 --> 00:43:41,339
adversary are working hard as well and

1091
00:43:41,339 --> 00:43:44,160
they're not into that uh so so that's

1092
00:43:44,160 --> 00:43:46,800
first answer for that and the

1093
00:43:46,800 --> 00:43:48,839
complementary thing here as as the

1094
00:43:48,839 --> 00:43:50,700
question said is that moving into a

1095
00:43:50,700 --> 00:43:52,380
machine learning approach and using

1096
00:43:52,380 --> 00:43:55,260
those features can eliminate a lot of

1097
00:43:55,260 --> 00:43:57,839
those changes that might happen on

1098
00:43:57,839 --> 00:44:00,300
Packers functionality and enable us to

1099
00:44:00,300 --> 00:44:03,960
do um better detection I didn't if I be

1100
00:44:03,960 --> 00:44:06,060
honest I didn't validated that in the

1101
00:44:06,060 --> 00:44:08,579
wild but my assumption is that that

1102
00:44:08,579 --> 00:44:10,740
approach might close some of those gap

1103
00:44:10,740 --> 00:44:12,720
of changes and might lead to a better

1104
00:44:12,720 --> 00:44:16,319
reaction and changing detection much

1105
00:44:16,319 --> 00:44:18,920
more quickly

1106
00:44:20,460 --> 00:44:23,339
great the second question that we

1107
00:44:23,339 --> 00:44:25,380
received is what's the difference

1108
00:44:25,380 --> 00:44:29,760
between minification and observation

1109
00:44:29,760 --> 00:44:31,079
sorry what's the difference between

1110
00:44:31,079 --> 00:44:35,960
between minification and obstacation

1111
00:44:35,960 --> 00:44:38,640
uh good question if I understand

1112
00:44:38,640 --> 00:44:41,099
correctly and remember correctly if

1113
00:44:41,099 --> 00:44:43,619
notification is more about

1114
00:44:43,619 --> 00:44:46,920
changing the structure of of how the

1115
00:44:46,920 --> 00:44:48,839
code is being written while obvious

1116
00:44:48,839 --> 00:44:51,000
question tried to actually obfuscate I

1117
00:44:51,000 --> 00:44:52,920
hope that's the right definition for

1118
00:44:52,920 --> 00:44:56,160
that if not I apologize uh but

1119
00:44:56,160 --> 00:44:58,440
some of my assumption when it comes to

1120
00:44:58,440 --> 00:45:01,319
authentication is that someone is doing

1121
00:45:01,319 --> 00:45:05,160
a hard job or trying to make um

1122
00:45:05,160 --> 00:45:08,280
and kind of obfuscation that will not be

1123
00:45:08,280 --> 00:45:10,560
detected easily meaning someone is

1124
00:45:10,560 --> 00:45:12,119
trying to repair detection that's that's

1125
00:45:12,119 --> 00:45:14,760
the concept that obfuscation put

1126
00:45:14,760 --> 00:45:17,280
on the table and that's created much

1127
00:45:17,280 --> 00:45:18,780
more challenges because it's not just

1128
00:45:18,780 --> 00:45:21,240
about you know changing how the

1129
00:45:21,240 --> 00:45:22,859
Javascript file looks like it's more

1130
00:45:22,859 --> 00:45:24,660
about someone trying not to be detected

1131
00:45:24,660 --> 00:45:27,300
and doing a lot of you know aggressive

1132
00:45:27,300 --> 00:45:31,260
moves into into that so so I will assume

1133
00:45:31,260 --> 00:45:33,180
um that would be the bigger the biggest

1134
00:45:33,180 --> 00:45:36,260
difference between those two approaches

1135
00:45:36,260 --> 00:45:38,099
thank you

1136
00:45:38,099 --> 00:45:40,859
those were the questions that we

1137
00:45:40,859 --> 00:45:42,180
received

1138
00:45:42,180 --> 00:45:43,500
um

1139
00:45:43,500 --> 00:45:45,540
is there anything else you would like to

1140
00:45:45,540 --> 00:45:47,220
add or if anyone else has any other

1141
00:45:47,220 --> 00:45:48,900
questions we have a couple more moments

1142
00:45:48,900 --> 00:45:52,920
for another question or two

1143
00:45:52,920 --> 00:45:56,520
uh I I think I'm you know is there any

1144
00:45:56,520 --> 00:45:57,839
other question I would love to answer

1145
00:45:57,839 --> 00:45:59,520
those or you can reach out to me later

1146
00:45:59,520 --> 00:46:02,060
on but basically

1147
00:46:02,060 --> 00:46:03,720
right

1148
00:46:03,720 --> 00:46:08,220
um or is on Twitter as he mentioned so

1149
00:46:08,220 --> 00:46:10,160
we can follow him boring person

1150
00:46:10,160 --> 00:46:11,579
[Laughter]

1151
00:46:11,579 --> 00:46:13,380
foreign

1152
00:46:13,380 --> 00:46:15,480
well thank you so much or for your

1153
00:46:15,480 --> 00:46:17,220
presentation today and thank you to

1154
00:46:17,220 --> 00:46:20,160
everyone who has attended

1155
00:46:20,160 --> 00:46:22,380
um it's great to have all of you here

1156
00:46:22,380 --> 00:46:25,200
and uh thank you again for all of your

1157
00:46:25,200 --> 00:46:28,079
support to Owasso abstract EU

1158
00:46:28,079 --> 00:46:29,700
thank you very much hopefully next year

1159
00:46:29,700 --> 00:46:32,460
we'll meet in person yes that would be

1160
00:46:32,460 --> 00:46:34,200
awesome yeah

1161
00:46:34,200 --> 00:46:36,799
thank you thank you

