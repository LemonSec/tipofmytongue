1
00:00:04,440 --> 00:00:06,600
it is 9 A.M

2
00:00:06,600 --> 00:00:08,940
um my time it's almost certainly beer

3
00:00:08,940 --> 00:00:11,219
o'clock your time so I will keep this

4
00:00:11,219 --> 00:00:12,780
nice and short

5
00:00:12,780 --> 00:00:14,099
um thank you for joining us at the last

6
00:00:14,099 --> 00:00:16,320
keynote at the OAS Global appsec EU

7
00:00:16,320 --> 00:00:18,900
virtual next year

8
00:00:18,900 --> 00:00:21,000
um the global appsec virtual will no

9
00:00:21,000 --> 00:00:22,500
longer be a virtual it'll be an

10
00:00:22,500 --> 00:00:24,660
in-person event at Dublin in February

11
00:00:24,660 --> 00:00:27,960
next year so please do come along RSVP

12
00:00:27,960 --> 00:00:30,960
in your calendars today we look forward

13
00:00:30,960 --> 00:00:34,200
to seeing you there and I can't honestly

14
00:00:34,200 --> 00:00:36,180
can't say how excited I am to be able to

15
00:00:36,180 --> 00:00:38,460
finally be able to go to Ireland so

16
00:00:38,460 --> 00:00:39,980
please do

17
00:00:39,980 --> 00:00:43,920
come to the in-person event next year

18
00:00:43,920 --> 00:00:46,140
along those lines we have a virtual

19
00:00:46,140 --> 00:00:48,660
Global appsec Asia Pacific it actually

20
00:00:48,660 --> 00:00:51,480
has a native Japanese track as well as

21
00:00:51,480 --> 00:00:55,920
English tracks we also have the cfp and

22
00:00:55,920 --> 00:00:58,559
CFT are extended at the moment so if you

23
00:00:58,559 --> 00:00:59,940
want to actually present at that

24
00:00:59,940 --> 00:01:02,699
particular conference please um have a

25
00:01:02,699 --> 00:01:04,080
look at our website and see how you can

26
00:01:04,080 --> 00:01:05,280
get going

27
00:01:05,280 --> 00:01:07,020
in November we're actually going to get

28
00:01:07,020 --> 00:01:11,159
back to in-person events yay so we're

29
00:01:11,159 --> 00:01:12,420
looking forward to meeting everybody

30
00:01:12,420 --> 00:01:15,720
again at San Francisco we will try our

31
00:01:15,720 --> 00:01:17,580
very hardest to make sure that there's

32
00:01:17,580 --> 00:01:20,939
many of the Keynotes and primary tracks

33
00:01:20,939 --> 00:01:22,560
will be

34
00:01:22,560 --> 00:01:23,759
um

35
00:01:23,759 --> 00:01:26,220
let me just turn this out down there

36
00:01:26,220 --> 00:01:28,920
um we'll be broadcast for a hybrid but

37
00:01:28,920 --> 00:01:31,619
in person is where to go we look forward

38
00:01:31,619 --> 00:01:33,420
to seeing everyone there that's in early

39
00:01:33,420 --> 00:01:34,979
November

40
00:01:34,979 --> 00:01:37,740
lastly we need to actually review and

41
00:01:37,740 --> 00:01:40,619
renew our bylaws and to do so requires

42
00:01:40,619 --> 00:01:42,900
all of the members to vote and in fact

43
00:01:42,900 --> 00:01:44,939
we need 50 of you

44
00:01:44,939 --> 00:01:48,600
so 3 000 out of six thousand to vote for

45
00:01:48,600 --> 00:01:50,939
the new bylaws we've never had more than

46
00:01:50,939 --> 00:01:54,600
1100 people vote before so that's going

47
00:01:54,600 --> 00:01:57,479
to be excitement please keep an eye on

48
00:01:57,479 --> 00:02:00,000
your email as the vote goes through for

49
00:02:00,000 --> 00:02:02,759
the bylaws please vote it's really

50
00:02:02,759 --> 00:02:04,860
important that we can replace them and

51
00:02:04,860 --> 00:02:07,200
we actually get your settings into the

52
00:02:07,200 --> 00:02:09,899
bylaws and we can keep them that way for

53
00:02:09,899 --> 00:02:12,180
many years to come

54
00:02:12,180 --> 00:02:14,700
and I'm now pleased to announce Dr Alan

55
00:02:14,700 --> 00:02:16,860
Shulman pelik she's the managing

56
00:02:16,860 --> 00:02:18,660
director of cloud cyber security and

57
00:02:18,660 --> 00:02:20,640
Ernst Young and the Americas

58
00:02:20,640 --> 00:02:22,319
she's going to be talking to us today

59
00:02:22,319 --> 00:02:24,599
about Cloud attack service management

60
00:02:24,599 --> 00:02:27,000
typically cloud and infrastructure

61
00:02:27,000 --> 00:02:30,780
platform teams are separate and

62
00:02:30,780 --> 00:02:33,720
with the way that the world is going the

63
00:02:33,720 --> 00:02:34,920
infrastructure side of cloud

64
00:02:34,920 --> 00:02:37,440
implementations is infrastructure is

65
00:02:37,440 --> 00:02:39,180
code so we should be bringing them

66
00:02:39,180 --> 00:02:40,560
together and that's what this talk is

67
00:02:40,560 --> 00:02:42,000
going to be about

68
00:02:42,000 --> 00:02:45,720
Dr Adam Alex Shulman peleg is the

69
00:02:45,720 --> 00:02:47,640
managing director of the cloud cyber

70
00:02:47,640 --> 00:02:49,379
security Consulting Services events and

71
00:02:49,379 --> 00:02:51,660
young she helps multiple clients secure

72
00:02:51,660 --> 00:02:53,160
their public clouds and contain

73
00:02:53,160 --> 00:02:55,140
Technologies addressing the involved

74
00:02:55,140 --> 00:02:56,760
risk cyber security and regulatory

75
00:02:56,760 --> 00:02:59,400
requirements in her previous role she

76
00:02:59,400 --> 00:03:01,019
was the director of cloud security at

77
00:03:01,019 --> 00:03:01,980
Citibank

78
00:03:01,980 --> 00:03:03,780
and prior to that she was at IBM

79
00:03:03,780 --> 00:03:04,920
research

80
00:03:04,920 --> 00:03:08,160
she holds Decades of technological

81
00:03:08,160 --> 00:03:10,860
leadership and holds a PhD in MSC and

82
00:03:10,860 --> 00:03:13,319
BSC in computer science she holds

83
00:03:13,319 --> 00:03:15,900
multiple patents and has more than 36 30

84
00:03:15,900 --> 00:03:18,599
scientific Publications with thousands

85
00:03:18,599 --> 00:03:21,599
of citations I can only imagine your H

86
00:03:21,599 --> 00:03:23,899
score

87
00:03:24,739 --> 00:03:27,480
mine was accidental I'm sure yours is

88
00:03:27,480 --> 00:03:30,500
not accidental at all

89
00:03:31,200 --> 00:03:33,300
and with that he here you go thank you

90
00:03:33,300 --> 00:03:34,379
take it away

91
00:03:34,379 --> 00:03:36,060
thank you Andrew and thank you everyone

92
00:03:36,060 --> 00:03:37,920
for joining good afternoon in Europe

93
00:03:37,920 --> 00:03:40,680
good morning in the US I'm super excited

94
00:03:40,680 --> 00:03:43,319
to close this week of amazing what was

95
00:03:43,319 --> 00:03:46,080
talks and sessions with this wonderful

96
00:03:46,080 --> 00:03:48,900
topic of cloud attack surface management

97
00:03:48,900 --> 00:03:52,620
and today we'll talk about how to manage

98
00:03:52,620 --> 00:03:55,140
the attack vectors that we're seeing in

99
00:03:55,140 --> 00:03:57,720
the cloud and how they are changing our

100
00:03:57,720 --> 00:04:00,000
cyber security posture posture and

101
00:04:00,000 --> 00:04:02,640
practices and what Caesars should be

102
00:04:02,640 --> 00:04:04,200
doing to protect the organizations

103
00:04:04,200 --> 00:04:08,760
against these new attack factors

104
00:04:08,760 --> 00:04:11,040
first let me start with the disclaimer

105
00:04:11,040 --> 00:04:12,299
that everything that I will be

106
00:04:12,299 --> 00:04:15,000
presenting is based on my 14 years of

107
00:04:15,000 --> 00:04:17,100
experience in Cloud security and not

108
00:04:17,100 --> 00:04:19,199
necessarily representative use of

109
00:04:19,199 --> 00:04:22,199
everyone in my organization

110
00:04:22,199 --> 00:04:24,540
during the talk we'll go through the

111
00:04:24,540 --> 00:04:27,300
following first of all start with what

112
00:04:27,300 --> 00:04:30,000
are Cloud attack vectors why cloud is

113
00:04:30,000 --> 00:04:32,220
different from what we know in our

114
00:04:32,220 --> 00:04:34,620
traditional environments then we'll take

115
00:04:34,620 --> 00:04:36,660
several examples and we'll analyze

116
00:04:36,660 --> 00:04:39,360
deeper what are the attack factors who

117
00:04:39,360 --> 00:04:41,520
is responsible for them and what are the

118
00:04:41,520 --> 00:04:43,680
techniques that we are seeing from the

119
00:04:43,680 --> 00:04:46,080
application security standpoint which

120
00:04:46,080 --> 00:04:48,060
means how can someone exploit these

121
00:04:48,060 --> 00:04:51,180
environments then we'll go to protection

122
00:04:51,180 --> 00:04:53,460
and prevention what should we be doing

123
00:04:53,460 --> 00:04:56,820
how can we mitigate these risks what

124
00:04:56,820 --> 00:04:59,340
organizations should be doing to provide

125
00:04:59,340 --> 00:05:01,199
the holistic view over this attack

126
00:05:01,199 --> 00:05:02,460
surface

127
00:05:02,460 --> 00:05:05,280
and then our last topic will be the

128
00:05:05,280 --> 00:05:06,780
cease of you

129
00:05:06,780 --> 00:05:09,960
what should ciso be doing how can Cecil

130
00:05:09,960 --> 00:05:12,000
reduce the risk

131
00:05:12,000 --> 00:05:15,240
um across all the environments but from

132
00:05:15,240 --> 00:05:16,740
the application and Cloud security

133
00:05:16,740 --> 00:05:19,500
standpoints

134
00:05:19,500 --> 00:05:21,500
so let's start with some definitions

135
00:05:21,500 --> 00:05:25,259
what is attack surface a type surface is

136
00:05:25,259 --> 00:05:27,900
defined as a set of points on the

137
00:05:27,900 --> 00:05:30,240
boundary of a software system its

138
00:05:30,240 --> 00:05:32,940
elements or environments when an

139
00:05:32,940 --> 00:05:36,060
attacker can try to enter affected or

140
00:05:36,060 --> 00:05:37,680
extract data

141
00:05:37,680 --> 00:05:39,960
in simple words what are the entry

142
00:05:39,960 --> 00:05:42,120
points for an attacker to exploit our

143
00:05:42,120 --> 00:05:44,160
system

144
00:05:44,160 --> 00:05:46,320
then what do we mean when we're saying

145
00:05:46,320 --> 00:05:49,199
when analyzing the attack surface it is

146
00:05:49,199 --> 00:05:50,880
actually an assessment it's an

147
00:05:50,880 --> 00:05:52,320
assessment of the exploitable

148
00:05:52,320 --> 00:05:55,259
vulnerabilities or weaknesses that can

149
00:05:55,259 --> 00:05:58,979
lead to a potential system compromise

150
00:05:58,979 --> 00:06:00,240
foreign

151
00:06:00,240 --> 00:06:03,300
cloud is different let's look at what we

152
00:06:03,300 --> 00:06:06,360
had in our traditional environments

153
00:06:06,360 --> 00:06:08,699
in our data centers we had

154
00:06:08,699 --> 00:06:11,520
infrastructures and platforms that were

155
00:06:11,520 --> 00:06:14,479
provisioned by dedicated skilled system

156
00:06:14,479 --> 00:06:17,039
administrators these were responsible

157
00:06:17,039 --> 00:06:19,139
for the provisioning of the firewalls

158
00:06:19,139 --> 00:06:21,419
for the provisioning of the service

159
00:06:21,419 --> 00:06:23,520
for the provisioning of platforms like

160
00:06:23,520 --> 00:06:25,080
kubernetes

161
00:06:25,080 --> 00:06:27,300
and then developed developers were

162
00:06:27,300 --> 00:06:30,060
operating inside this well-established

163
00:06:30,060 --> 00:06:32,880
perimeter protecting the applications

164
00:06:32,880 --> 00:06:36,240
from lower level misconfigurations

165
00:06:36,240 --> 00:06:38,940
they were operating safely without

166
00:06:38,940 --> 00:06:42,539
managing any lower level dependencies or

167
00:06:42,539 --> 00:06:44,699
infrastructures for example in our

168
00:06:44,699 --> 00:06:46,819
traditional environments developers

169
00:06:46,819 --> 00:06:49,560
cannot impact the configuration of

170
00:06:49,560 --> 00:06:52,020
firewalls but in the cloud things are

171
00:06:52,020 --> 00:06:53,819
different because Cloud native

172
00:06:53,819 --> 00:06:56,160
applications are forcing the developers

173
00:06:56,160 --> 00:07:00,780
to provision and manage multiple lower

174
00:07:00,780 --> 00:07:03,360
level dependencies

175
00:07:03,360 --> 00:07:05,699
let's maybe think why this is happening

176
00:07:05,699 --> 00:07:08,460
because the entire promise of cloud is

177
00:07:08,460 --> 00:07:11,039
to simplify the management the

178
00:07:11,039 --> 00:07:13,620
infrastructures and platforms

179
00:07:13,620 --> 00:07:15,380
so we're getting everything

180
00:07:15,380 --> 00:07:18,479
transparently as a service just with one

181
00:07:18,479 --> 00:07:21,960
API call but are we doing this API call

182
00:07:21,960 --> 00:07:22,919
right

183
00:07:22,919 --> 00:07:25,380
can we misconfigure it

184
00:07:25,380 --> 00:07:27,000
so these are the new questions that

185
00:07:27,000 --> 00:07:28,979
developers should be asking

186
00:07:28,979 --> 00:07:31,620
and even more than that resources and

187
00:07:31,620 --> 00:07:34,380
platforms are deployed now as code

188
00:07:34,380 --> 00:07:36,360
and they are deployed over the public

189
00:07:36,360 --> 00:07:37,919
internet

190
00:07:37,919 --> 00:07:40,500
and there is no network perimeter to

191
00:07:40,500 --> 00:07:44,520
protect from services misconfigurations

192
00:07:47,940 --> 00:07:50,280
now let's analyze let's take some

193
00:07:50,280 --> 00:07:52,319
examples and go deeper in what we can

194
00:07:52,319 --> 00:07:54,440
see

195
00:07:59,160 --> 00:08:01,340
yeah

196
00:08:01,380 --> 00:08:04,740
let's first look at this from the layer

197
00:08:04,740 --> 00:08:06,960
standpoint

198
00:08:06,960 --> 00:08:09,060
and this is how we're managing this

199
00:08:09,060 --> 00:08:11,639
today we are looking at layers we have

200
00:08:11,639 --> 00:08:13,500
infrastructure as a service we have

201
00:08:13,500 --> 00:08:15,360
platform as a service and we have the

202
00:08:15,360 --> 00:08:18,060
applications which may be containerized

203
00:08:18,060 --> 00:08:21,720
services or Cloud native each layer has

204
00:08:21,720 --> 00:08:24,120
its own attack vectors

205
00:08:24,120 --> 00:08:26,400
let's start with infrastructure when

206
00:08:26,400 --> 00:08:28,860
provisioning the infrastructure there

207
00:08:28,860 --> 00:08:31,379
are so many misconfigurations or

208
00:08:31,379 --> 00:08:34,080
mistakes that people can make it's also

209
00:08:34,080 --> 00:08:36,179
with firewalls that in the cloud and

210
00:08:36,179 --> 00:08:38,399
people may misconfigure them but any

211
00:08:38,399 --> 00:08:40,620
misconfiguration of identity and access

212
00:08:40,620 --> 00:08:43,440
management instance instance metadata

213
00:08:43,440 --> 00:08:45,959
service policies permissions anything

214
00:08:45,959 --> 00:08:48,600
can be exploited

215
00:08:48,600 --> 00:08:50,820
as an attack Vector to compromise the

216
00:08:50,820 --> 00:08:52,500
entire system

217
00:08:52,500 --> 00:08:54,300
and this is why wave Cloud security

218
00:08:54,300 --> 00:08:56,399
posture management tools addressing

219
00:08:56,399 --> 00:08:59,339
exactly this layer and this type of

220
00:08:59,339 --> 00:09:00,240
attack

221
00:09:00,240 --> 00:09:02,760
now let's look at the platform we have

222
00:09:02,760 --> 00:09:05,120
platforms like kubernetes SQL Server

223
00:09:05,120 --> 00:09:08,399
Jupiter lab and many more each platform

224
00:09:08,399 --> 00:09:12,180
once again may be miscon misconfigured

225
00:09:12,180 --> 00:09:14,220
so people who are provisioning this

226
00:09:14,220 --> 00:09:16,860
should be aware of all the requirements

227
00:09:16,860 --> 00:09:18,779
they should be provisioning them in the

228
00:09:18,779 --> 00:09:22,380
secure way and we have dedicated tools

229
00:09:22,380 --> 00:09:24,779
once again kubernetes posture management

230
00:09:24,779 --> 00:09:27,180
and other products that are helping us

231
00:09:27,180 --> 00:09:29,760
to prevent these misconfigurations and

232
00:09:29,760 --> 00:09:32,640
manage this layer of our tax service

233
00:09:32,640 --> 00:09:35,160
and then finally we have workloads we

234
00:09:35,160 --> 00:09:36,899
have containerized applications or

235
00:09:36,899 --> 00:09:39,360
serverless applications that operate the

236
00:09:39,360 --> 00:09:41,519
platform and the infrastructure

237
00:09:41,519 --> 00:09:43,320
and today we address we are looking at

238
00:09:43,320 --> 00:09:45,779
them as applications so we'll do

239
00:09:45,779 --> 00:09:48,600
application scaling at the Java level we

240
00:09:48,600 --> 00:09:51,180
are not always looking at them

241
00:09:51,180 --> 00:09:53,279
as they interact with the platform and

242
00:09:53,279 --> 00:09:55,500
the infrastructure

243
00:09:55,500 --> 00:09:57,420
so what is happening today they're being

244
00:09:57,420 --> 00:09:58,980
scan phone a little bit from the

245
00:09:58,980 --> 00:10:01,320
vulnerabilities they are scanned for

246
00:10:01,320 --> 00:10:03,899
supply chain but today I would like to

247
00:10:03,899 --> 00:10:06,180
focus on the interaction between all

248
00:10:06,180 --> 00:10:08,339
these layers because our serverless

249
00:10:08,339 --> 00:10:10,680
applications some are interacting with

250
00:10:10,680 --> 00:10:12,779
the platform in the infrastructure they

251
00:10:12,779 --> 00:10:14,700
need to provision buckets they need to

252
00:10:14,700 --> 00:10:18,360
provision certain services that are

253
00:10:18,360 --> 00:10:20,100
needed for this application to operate

254
00:10:20,100 --> 00:10:22,019
and this is what we call Cloud native

255
00:10:22,019 --> 00:10:24,899
because in Cloud native applications are

256
00:10:24,899 --> 00:10:28,320
using and benefiting from the wonderful

257
00:10:28,320 --> 00:10:31,140
services and the transparency of using

258
00:10:31,140 --> 00:10:32,459
them in the cloud

259
00:10:32,459 --> 00:10:35,760
but these are also the new risks that we

260
00:10:35,760 --> 00:10:37,980
should be considering so today we'll

261
00:10:37,980 --> 00:10:40,440
look at interaction between the layers

262
00:10:40,440 --> 00:10:42,779
and let's start with who's responsible

263
00:10:42,779 --> 00:10:44,519
for what

264
00:10:44,519 --> 00:10:46,980
and let's look at the attack surface

265
00:10:46,980 --> 00:10:49,140
from the standpoint on who is

266
00:10:49,140 --> 00:10:50,820
responsible for this part of the attack

267
00:10:50,820 --> 00:10:52,140
surface

268
00:10:52,140 --> 00:10:54,660
how it is being managed today and how

269
00:10:54,660 --> 00:10:58,079
can we do better by combining all these

270
00:10:58,079 --> 00:11:00,959
roles responsibilities and layers

271
00:11:00,959 --> 00:11:03,480
so most of you are familiar with what is

272
00:11:03,480 --> 00:11:05,100
called the shared responsibility model

273
00:11:05,100 --> 00:11:07,079
that was announced by cloud service

274
00:11:07,079 --> 00:11:08,279
providers

275
00:11:08,279 --> 00:11:10,860
in this model cloud service providers

276
00:11:10,860 --> 00:11:13,920
are responsible for the security of the

277
00:11:13,920 --> 00:11:14,820
cloud

278
00:11:14,820 --> 00:11:18,360
well Cloud users are responsible for the

279
00:11:18,360 --> 00:11:21,000
security in the cloud which means Cloud

280
00:11:21,000 --> 00:11:23,220
users are managing the attack surface

281
00:11:23,220 --> 00:11:25,500
from their side from how they are using

282
00:11:25,500 --> 00:11:27,959
the cloud and cloud service providers

283
00:11:27,959 --> 00:11:30,959
are managing the effect surface of what

284
00:11:30,959 --> 00:11:33,240
can happen to the infrastructures

285
00:11:33,240 --> 00:11:35,459
but let's review some of the examples

286
00:11:35,459 --> 00:11:38,399
most of the cloud breaches today are

287
00:11:38,399 --> 00:11:39,600
starting with some type of

288
00:11:39,600 --> 00:11:42,060
misconfiguration exposed credentials

289
00:11:42,060 --> 00:11:45,000
open buckets Network misconfigurations

290
00:11:45,000 --> 00:11:47,579
public IP addresses improp

291
00:11:47,579 --> 00:11:49,620
authentication authorization and of

292
00:11:49,620 --> 00:11:52,200
course application vulnerabilities

293
00:11:52,200 --> 00:11:55,500
so obviously users of the cloud should

294
00:11:55,500 --> 00:11:57,660
be managing all of this but are they

295
00:11:57,660 --> 00:11:59,940
influenced by other things as well let's

296
00:11:59,940 --> 00:12:02,700
look at several examples so first there

297
00:12:02,700 --> 00:12:05,339
is the supply chain these packages that

298
00:12:05,339 --> 00:12:07,920
everyone is using application developers

299
00:12:07,920 --> 00:12:10,019
are using them and Cloud providers are

300
00:12:10,019 --> 00:12:12,899
using them one of the most if

301
00:12:12,899 --> 00:12:15,060
unfortunately famous examples recently

302
00:12:15,060 --> 00:12:18,360
was the log4j library this is the Java

303
00:12:18,360 --> 00:12:21,019
library that was vulnerable and the

304
00:12:21,019 --> 00:12:23,760
vulnerability is called log4j

305
00:12:23,760 --> 00:12:26,339
when this became public in December

306
00:12:26,339 --> 00:12:29,880
everyone became vulnerable because

307
00:12:29,880 --> 00:12:31,279
everyone

308
00:12:31,279 --> 00:12:34,500
was using this in the applications so

309
00:12:34,500 --> 00:12:36,779
for the cloud users they had to quickly

310
00:12:36,779 --> 00:12:39,839
fetch their part right where the

311
00:12:39,839 --> 00:12:42,480
applications are using this library but

312
00:12:42,480 --> 00:12:44,880
Cloud providers also had to patch this

313
00:12:44,880 --> 00:12:47,339
very quickly and some of them for

314
00:12:47,339 --> 00:12:49,800
example unfortunately if I applied

315
00:12:49,800 --> 00:12:52,399
automated batches

316
00:12:52,399 --> 00:12:55,440
uh that didn't go very well and actually

317
00:12:55,440 --> 00:12:58,620
introduced new attack vectors like

318
00:12:58,620 --> 00:13:00,480
container exploitation and privilege

319
00:13:00,480 --> 00:13:01,920
escalation

320
00:13:01,920 --> 00:13:05,279
so Cloud users at the same time and to

321
00:13:05,279 --> 00:13:07,860
manage what their vulnerabilities as

322
00:13:07,860 --> 00:13:09,959
well as with additional risks that cloud

323
00:13:09,959 --> 00:13:12,899
providers added to the mix

324
00:13:12,899 --> 00:13:15,360
and so obviously Cloud users need to

325
00:13:15,360 --> 00:13:18,540
take all this into account when planning

326
00:13:18,540 --> 00:13:22,139
their protection a tools environments

327
00:13:22,139 --> 00:13:25,560
and layers for their Cloud applications

328
00:13:25,560 --> 00:13:28,320
let me touch on an additional topic

329
00:13:28,320 --> 00:13:33,180
and these are the CSD bugs and Witnesses

330
00:13:33,180 --> 00:13:35,820
we don't call them vulnerabilities now

331
00:13:35,820 --> 00:13:38,700
because these are misconfigurations that

332
00:13:38,700 --> 00:13:40,380
may allow exploitation

333
00:13:40,380 --> 00:13:42,000
but because these are not public

334
00:13:42,000 --> 00:13:45,000
libraries we're not designing cdes to

335
00:13:45,000 --> 00:13:46,980
them

336
00:13:46,980 --> 00:13:49,440
some of the examples even in the Capital

337
00:13:49,440 --> 00:13:53,040
One Bridge what causes is actually a

338
00:13:53,040 --> 00:13:55,079
design issue

339
00:13:55,079 --> 00:13:58,339
which allowed exploiting temporary

340
00:13:58,339 --> 00:14:02,399
credentials for the metadata service

341
00:14:02,399 --> 00:14:04,920
the cloud provider updated this and

342
00:14:04,920 --> 00:14:06,360
release the new version

343
00:14:06,360 --> 00:14:08,880
but actually the old one was still

344
00:14:08,880 --> 00:14:09,660
available

345
00:14:09,660 --> 00:14:12,480
for backwards compatibility

346
00:14:12,480 --> 00:14:14,660
but we're still not calling this

347
00:14:14,660 --> 00:14:18,060
vulnerability uh and there is no CB

348
00:14:18,060 --> 00:14:21,839
number sign it is a design issue that

349
00:14:21,839 --> 00:14:23,459
was resolved

350
00:14:23,459 --> 00:14:25,680
but still Cloud users should be aware of

351
00:14:25,680 --> 00:14:27,060
this because there are so many

352
00:14:27,060 --> 00:14:29,639
organizations where developers are not

353
00:14:29,639 --> 00:14:32,220
reading all the blogs about breaches and

354
00:14:32,220 --> 00:14:34,260
they do not know that they need to

355
00:14:34,260 --> 00:14:36,660
update applications to the new version

356
00:14:36,660 --> 00:14:40,019
and there is no one driving for this and

357
00:14:40,019 --> 00:14:41,639
our traditional vulnerability management

358
00:14:41,639 --> 00:14:45,120
programs are now checking for this

359
00:14:45,120 --> 00:14:46,980
let's look at some additional examples

360
00:14:46,980 --> 00:14:49,139
of such bugs and Witnesses

361
00:14:49,139 --> 00:14:52,380
and there are two Israeli cspn companies

362
00:14:52,380 --> 00:14:55,440
that recently jointly each of them

363
00:14:55,440 --> 00:14:57,839
separately but all together it boils

364
00:14:57,839 --> 00:15:01,199
down to eight very significant Banks and

365
00:15:01,199 --> 00:15:04,019
weaknesses that were discovered in the

366
00:15:04,019 --> 00:15:05,639
infrastructures and platforms of the

367
00:15:05,639 --> 00:15:07,560
cloud providers

368
00:15:07,560 --> 00:15:09,660
and it is it and there was an excellent

369
00:15:09,660 --> 00:15:11,940
collaboration so Cloud providers are

370
00:15:11,940 --> 00:15:14,279
resolving all these issues but let's

371
00:15:14,279 --> 00:15:16,560
just review them for us to better

372
00:15:16,560 --> 00:15:19,260
understand the attack surface and what

373
00:15:19,260 --> 00:15:22,320
should we be doing to better manage this

374
00:15:22,320 --> 00:15:25,380
there are two we can actually Define two

375
00:15:25,380 --> 00:15:28,920
categories of this uh newly discovered

376
00:15:28,920 --> 00:15:30,959
weaknesses

377
00:15:30,959 --> 00:15:33,779
first of all of them are breaking the

378
00:15:33,779 --> 00:15:36,959
multi-tense isolation which means these

379
00:15:36,959 --> 00:15:39,899
companies have demonstrated that the

380
00:15:39,899 --> 00:15:42,300
exploitation code allowed going from

381
00:15:42,300 --> 00:15:44,220
there a

382
00:15:44,220 --> 00:15:46,800
account or their service

383
00:15:46,800 --> 00:15:49,139
to the service account or date of

384
00:15:49,139 --> 00:15:50,459
someone else

385
00:15:50,459 --> 00:15:52,560
which means breaking the multi-tenant

386
00:15:52,560 --> 00:15:55,079
isolation because Cloud providers should

387
00:15:55,079 --> 00:15:57,720
be isolating and separating between the

388
00:15:57,720 --> 00:16:00,540
data of the different Cloud users

389
00:16:00,540 --> 00:16:04,320
but then there are two types of of these

390
00:16:04,320 --> 00:16:07,019
exploitation techniques one allows

391
00:16:07,019 --> 00:16:09,060
exploitation just for the specific

392
00:16:09,060 --> 00:16:12,300
service which means if this is being

393
00:16:12,300 --> 00:16:15,000
executed on the behalf of let's say one

394
00:16:15,000 --> 00:16:18,360
user of a certain cloud service it

395
00:16:18,360 --> 00:16:19,800
allows accessing the data of another

396
00:16:19,800 --> 00:16:23,100
user but it is still limited to this

397
00:16:23,100 --> 00:16:25,800
specific service

398
00:16:25,800 --> 00:16:28,440
um so we call this cross-service day

399
00:16:28,440 --> 00:16:29,940
program

400
00:16:29,940 --> 00:16:32,279
but there is also another type that

401
00:16:32,279 --> 00:16:34,800
actually allows going broader to any

402
00:16:34,800 --> 00:16:37,079
service of any client so this is cross

403
00:16:37,079 --> 00:16:40,079
account cross-service takeover which is

404
00:16:40,079 --> 00:16:43,320
which was shown to be possible

405
00:16:43,320 --> 00:16:46,500
um through exploitation of weaknesses in

406
00:16:46,500 --> 00:16:49,860
deployment mechanisms or similar nature

407
00:16:49,860 --> 00:16:52,259
because this is what allows

408
00:16:52,259 --> 00:16:55,079
to go broader so once again these are

409
00:16:55,079 --> 00:16:58,820
not uh real attacks uh this is just

410
00:16:58,820 --> 00:17:01,440
researchers finding these weaknesses

411
00:17:01,440 --> 00:17:03,480
reporting and resolving them

412
00:17:03,480 --> 00:17:05,939
but what we're learning from this

413
00:17:05,939 --> 00:17:09,660
exercise in a way that multi-tenant

414
00:17:09,660 --> 00:17:12,179
isolation can be broken

415
00:17:12,179 --> 00:17:14,640
this this is why we need to have several

416
00:17:14,640 --> 00:17:16,199
layers of Defense

417
00:17:16,199 --> 00:17:19,319
so that if something bad happens we can

418
00:17:19,319 --> 00:17:21,480
still manage with the situation

419
00:17:21,480 --> 00:17:24,720
and we also need to start treating these

420
00:17:24,720 --> 00:17:26,640
design issues and weaknesses is

421
00:17:26,640 --> 00:17:28,740
vulnerabilities because we need to

422
00:17:28,740 --> 00:17:30,600
ensure that our application developers

423
00:17:30,600 --> 00:17:33,059
are aware of them and they're improving

424
00:17:33,059 --> 00:17:35,100
their code and addressing them and

425
00:17:35,100 --> 00:17:36,840
they're always using the most recent

426
00:17:36,840 --> 00:17:39,960
design the most recent version and they

427
00:17:39,960 --> 00:17:41,340
are updating everything that the

428
00:17:41,340 --> 00:17:44,340
application needs to actually consume

429
00:17:44,340 --> 00:17:46,440
the solution the resolution of these

430
00:17:46,440 --> 00:17:50,240
weaknesses as soon as possible

431
00:17:50,700 --> 00:17:52,860
from the application security standpoint

432
00:17:52,860 --> 00:17:54,120
let's look at the exploitation

433
00:17:54,120 --> 00:17:56,580
techniques

434
00:17:56,580 --> 00:18:00,840
oh no this is very similar to what is

435
00:18:00,840 --> 00:18:04,200
typically published by a wasp

436
00:18:04,200 --> 00:18:04,860
um

437
00:18:04,860 --> 00:18:06,900
the most probably the most common

438
00:18:06,900 --> 00:18:09,600
technique is server-side request forgery

439
00:18:09,600 --> 00:18:12,179
where an attacker can make out arbitrary

440
00:18:12,179 --> 00:18:14,880
web requests from a compromised server

441
00:18:14,880 --> 00:18:16,980
to some other targets and this is what

442
00:18:16,980 --> 00:18:18,780
allows actually cross-account

443
00:18:18,780 --> 00:18:22,320
cross-service exploitation

444
00:18:22,320 --> 00:18:25,799
and then extraction from environment

445
00:18:25,799 --> 00:18:28,620
variables third party exploitation as

446
00:18:28,620 --> 00:18:30,799
well because it was shown that actually

447
00:18:30,799 --> 00:18:33,720
a there are many companies that are

448
00:18:33,720 --> 00:18:36,179
unknowning they're just not aware of

449
00:18:36,179 --> 00:18:38,520
this and when they're consuming such

450
00:18:38,520 --> 00:18:40,980
services such services and requesting

451
00:18:40,980 --> 00:18:43,380
certain access to Cloud environments and

452
00:18:43,380 --> 00:18:45,780
they're just granting this access so the

453
00:18:45,780 --> 00:18:49,320
these overprivileged SAS Services is an

454
00:18:49,320 --> 00:18:54,020
is another attack Vector that we've seen

455
00:18:54,600 --> 00:18:56,520
um but we're putting this in a category

456
00:18:56,520 --> 00:18:57,960
of credentials because there's a

457
00:18:57,960 --> 00:19:00,840
overprivileged roles or tokens or

458
00:19:00,840 --> 00:19:03,179
exposed credentials that may be used to

459
00:19:03,179 --> 00:19:05,580
attack the environment

460
00:19:05,580 --> 00:19:07,520
then another

461
00:19:07,520 --> 00:19:10,740
technique is a cloud deployment code

462
00:19:10,740 --> 00:19:12,539
exploitation

463
00:19:12,539 --> 00:19:16,260
but uh injection of code

464
00:19:16,260 --> 00:19:19,320
for example through weak access controls

465
00:19:19,320 --> 00:19:22,620
on repositories of buckets objects

466
00:19:22,620 --> 00:19:24,840
actually storing the code itself for an

467
00:19:24,840 --> 00:19:27,559
attacker can update the code and inject

468
00:19:27,559 --> 00:19:29,940
malicious pieces

469
00:19:29,940 --> 00:19:32,940
all the techniques as XML external

470
00:19:32,940 --> 00:19:35,280
entity and this is these are the

471
00:19:35,280 --> 00:19:37,620
techniques that we've seen both in

472
00:19:37,620 --> 00:19:40,860
breaches and research projects showing

473
00:19:40,860 --> 00:19:43,140
and demonstrating various effect

474
00:19:43,140 --> 00:19:45,179
scenarios

475
00:19:45,179 --> 00:19:47,160
and then obviously there are SQL

476
00:19:47,160 --> 00:19:50,100
injections that can be done also via

477
00:19:50,100 --> 00:19:51,539
functions

478
00:19:51,539 --> 00:19:55,440
and no SQL injections because no SQL

479
00:19:55,440 --> 00:19:58,559
databases may still be exploited

480
00:19:58,559 --> 00:20:00,720
via techniques that are very similar in

481
00:20:00,720 --> 00:20:03,600
nature to SQL injection techniques but

482
00:20:03,600 --> 00:20:05,220
essentially getting the data through

483
00:20:05,220 --> 00:20:07,260
these queries

484
00:20:07,260 --> 00:20:10,980
um and remote account access takeover is

485
00:20:10,980 --> 00:20:13,020
also something that we've seen repeating

486
00:20:13,020 --> 00:20:16,440
throughout this demonstrations of attack

487
00:20:16,440 --> 00:20:19,799
vectors or the bridges that were

488
00:20:19,799 --> 00:20:23,100
published and we could analyze the data

489
00:20:23,100 --> 00:20:25,679
so now let me summarize what we've seen

490
00:20:25,679 --> 00:20:28,799
first we saw that cloud can be exploited

491
00:20:28,799 --> 00:20:31,980
the application exploitation techniques

492
00:20:31,980 --> 00:20:34,020
then we also know that cloud management

493
00:20:34,020 --> 00:20:37,140
code is accessible via internet and

494
00:20:37,140 --> 00:20:39,960
exposed application exploitations

495
00:20:39,960 --> 00:20:43,080
so in a way the situation is

496
00:20:43,080 --> 00:20:45,419
we have more risk than we had we had

497
00:20:45,419 --> 00:20:48,539
before because the same application

498
00:20:48,539 --> 00:20:50,940
exploitation techniques can now be

499
00:20:50,940 --> 00:20:54,000
applied to infrastructures code and it

500
00:20:54,000 --> 00:20:56,100
is over the Internet so overall the

501
00:20:56,100 --> 00:20:59,640
risks in some cases are higher

502
00:20:59,640 --> 00:21:02,880
and then we're coming to this conclusion

503
00:21:02,880 --> 00:21:04,919
that application security processes and

504
00:21:04,919 --> 00:21:07,500
approaches should be applied to Cloud

505
00:21:07,500 --> 00:21:10,140
code and environments and this is what

506
00:21:10,140 --> 00:21:13,520
we'll be talking about today

507
00:21:13,980 --> 00:21:16,679
so let's move to the next topic what

508
00:21:16,679 --> 00:21:18,660
should we be doing to protect our

509
00:21:18,660 --> 00:21:21,480
environments to prevent all this from

510
00:21:21,480 --> 00:21:24,720
happening because obviously new attack

511
00:21:24,720 --> 00:21:27,660
vectors will be occurring all the time

512
00:21:27,660 --> 00:21:30,480
and it may also be pause to explain that

513
00:21:30,480 --> 00:21:32,240
we need to accept this

514
00:21:32,240 --> 00:21:34,320
this is the nature of our modern

515
00:21:34,320 --> 00:21:37,020
environments we do need cloud cloud is

516
00:21:37,020 --> 00:21:39,000
not a question it's the reality of our

517
00:21:39,000 --> 00:21:40,620
modern applications

518
00:21:40,620 --> 00:21:43,679
it we need this to deliver business

519
00:21:43,679 --> 00:21:46,500
value uh companies need us to build

520
00:21:46,500 --> 00:21:48,419
their businesses so it's not a matter of

521
00:21:48,419 --> 00:21:51,120
choice that's the reality we have the

522
00:21:51,120 --> 00:21:53,280
cloud we have these effect vectors and

523
00:21:53,280 --> 00:21:56,220
we need to to establish processes for

524
00:21:56,220 --> 00:21:59,340
the solicit management and prevention of

525
00:21:59,340 --> 00:22:01,879
Paris

526
00:22:03,299 --> 00:22:07,140
so first of all defense syntax most

527
00:22:07,140 --> 00:22:09,419
probably all we've heard this so many

528
00:22:09,419 --> 00:22:10,380
times

529
00:22:10,380 --> 00:22:12,960
still it is not always happening so

530
00:22:12,960 --> 00:22:14,760
let's review this on the example Vlog

531
00:22:14,760 --> 00:22:16,860
for Shell which was announced in

532
00:22:16,860 --> 00:22:17,880
December

533
00:22:17,880 --> 00:22:20,100
and suddenly everyone became vulnerable

534
00:22:20,100 --> 00:22:21,840
so all the applications are vulnerable

535
00:22:21,840 --> 00:22:25,320
the cloud provider itself is vulnerable

536
00:22:25,320 --> 00:22:28,919
so everyone can be exploited through

537
00:22:28,919 --> 00:22:30,659
just one issue

538
00:22:30,659 --> 00:22:33,299
in a library that everyone is using

539
00:22:33,299 --> 00:22:35,880
so many organizations were able to

540
00:22:35,880 --> 00:22:38,760
quickly manage with this issue through

541
00:22:38,760 --> 00:22:41,039
things like graph so even before they

542
00:22:41,039 --> 00:22:42,840
managed to patch all the environments

543
00:22:42,840 --> 00:22:45,480
what was their first solution let's just

544
00:22:45,480 --> 00:22:48,000
block this let's let's prevent this from

545
00:22:48,000 --> 00:22:50,220
being exploited through web application

546
00:22:50,220 --> 00:22:52,020
firewalls

547
00:22:52,020 --> 00:22:55,140
and and many of the providers were very

548
00:22:55,140 --> 00:22:57,720
quick with supporting this and many

549
00:22:57,720 --> 00:22:59,820
organizations were very very happy okay

550
00:22:59,820 --> 00:23:02,760
at least we we have this additionally

551
00:23:02,760 --> 00:23:05,700
protecting us and now we can remediate

552
00:23:05,700 --> 00:23:09,000
uh the local social vulnerability

553
00:23:09,000 --> 00:23:11,700
but still as you saw even some of the

554
00:23:11,700 --> 00:23:12,780
issues

555
00:23:12,780 --> 00:23:16,140
for example the cloud provider that did

556
00:23:16,140 --> 00:23:17,940
the right thing automated the patching

557
00:23:17,940 --> 00:23:20,960
but suddenly became vulnerable

558
00:23:20,960 --> 00:23:25,260
allowing because of the mistake allowing

559
00:23:25,260 --> 00:23:28,320
um a bigger the option of privilege

560
00:23:28,320 --> 00:23:30,480
escalation then we need to present

561
00:23:30,480 --> 00:23:32,580
prevent this as well we need to be ready

562
00:23:32,580 --> 00:23:34,260
for this

563
00:23:34,260 --> 00:23:36,120
what's the solution

564
00:23:36,120 --> 00:23:38,039
we need to have both path and

565
00:23:38,039 --> 00:23:41,580
segmentation so that if there is there

566
00:23:41,580 --> 00:23:43,860
are some issues for example exploitation

567
00:23:43,860 --> 00:23:44,940
through

568
00:23:44,940 --> 00:23:47,220
uh breaking domestic tenancy of the

569
00:23:47,220 --> 00:23:49,380
cloud provider this cross account

570
00:23:49,380 --> 00:23:51,600
cross-service

571
00:23:51,600 --> 00:23:53,700
um attack Vector that I have described

572
00:23:53,700 --> 00:23:57,059
if we have segmentation it will prevent

573
00:23:57,059 --> 00:23:59,520
the attacker from propagating further it

574
00:23:59,520 --> 00:24:02,460
was scope and reduce the blast radius of

575
00:24:02,460 --> 00:24:06,539
what may happen so that's another way to

576
00:24:06,539 --> 00:24:10,919
mitigate reduce the risk and entitle the

577
00:24:10,919 --> 00:24:12,600
situation

578
00:24:12,600 --> 00:24:15,000
then additional tools cost-based

579
00:24:15,000 --> 00:24:19,020
intrusion prevention and other Solutions

580
00:24:19,020 --> 00:24:21,120
like runtime application self-protection

581
00:24:21,120 --> 00:24:23,400
that can add additional layer of

582
00:24:23,400 --> 00:24:25,440
protection and there are always new new

583
00:24:25,440 --> 00:24:27,480
and emerging Technologies adding more

584
00:24:27,480 --> 00:24:29,580
and more layers and it is important to

585
00:24:29,580 --> 00:24:31,440
emphasize yes it is important to have

586
00:24:31,440 --> 00:24:33,720
layers of Defense we cannot realize just

587
00:24:33,720 --> 00:24:36,480
on one tool just on one provider and it

588
00:24:36,480 --> 00:24:38,760
is this little approach that will help

589
00:24:38,760 --> 00:24:40,919
us to manage with what we discussed

590
00:24:40,919 --> 00:24:42,480
before

591
00:24:42,480 --> 00:24:44,880
but then there is also Cloud native

592
00:24:44,880 --> 00:24:48,360
because look at the cloud native system

593
00:24:48,360 --> 00:24:51,720
as ecosystem in itself when applications

594
00:24:51,720 --> 00:24:56,039
are using multiple services and it

595
00:24:56,039 --> 00:24:58,260
mentioned containerized serverless so

596
00:24:58,260 --> 00:25:01,380
this this mix of application and

597
00:25:01,380 --> 00:25:04,080
underlying platform and services from

598
00:25:04,080 --> 00:25:05,940
the cloud provider and we need to

599
00:25:05,940 --> 00:25:07,919
properly manage and control this

600
00:25:07,919 --> 00:25:10,740
so these are the three points that we've

601
00:25:10,740 --> 00:25:13,020
seen as the most critical ones to

602
00:25:13,020 --> 00:25:15,600
actually reduce the risk first use

603
00:25:15,600 --> 00:25:18,360
policies code and have processes

604
00:25:18,360 --> 00:25:21,799
to harm them all these environments put

605
00:25:21,799 --> 00:25:24,480
Guardians and patterns helping other

606
00:25:24,480 --> 00:25:26,779
application developers to be more secure

607
00:25:26,779 --> 00:25:29,640
don't rely on just on application

608
00:25:29,640 --> 00:25:32,100
developers give them these patterns and

609
00:25:32,100 --> 00:25:34,620
give these guardrails that will protect

610
00:25:34,620 --> 00:25:36,240
them from making mistakes and

611
00:25:36,240 --> 00:25:39,240
misconfigurations and still be ready to

612
00:25:39,240 --> 00:25:42,179
respond the Cyber response piece is very

613
00:25:42,179 --> 00:25:45,679
critical what happens if if a certain

614
00:25:45,679 --> 00:25:48,419
weakness bug or vulnerabilities being

615
00:25:48,419 --> 00:25:50,580
exploited how should we respond into

616
00:25:50,580 --> 00:25:51,600
this

617
00:25:51,600 --> 00:25:54,480
so now let's go deeper into all these

618
00:25:54,480 --> 00:25:58,620
aspects and we'll see some examples

619
00:25:58,620 --> 00:26:01,320
but first let me also Define how we

620
00:26:01,320 --> 00:26:04,559
should be looking at this let's think

621
00:26:04,559 --> 00:26:08,460
think of ourselves as Caesars

622
00:26:08,460 --> 00:26:11,400
we cannot just think about one weakness

623
00:26:11,400 --> 00:26:14,400
or one but is this major problem because

624
00:26:14,400 --> 00:26:16,140
we need to cover everything it is the

625
00:26:16,140 --> 00:26:19,260
coverage it is the holistic View and the

626
00:26:19,260 --> 00:26:21,539
metrics that will give us some

627
00:26:21,539 --> 00:26:25,080
indication of our going to good are we

628
00:26:25,080 --> 00:26:27,539
doing bad can we improve can we improve

629
00:26:27,539 --> 00:26:30,779
our time and this is the goal of CSO

630
00:26:30,779 --> 00:26:31,919
programs

631
00:26:31,919 --> 00:26:33,900
traditionally with Cloud security

632
00:26:33,900 --> 00:26:36,659
program and application security program

633
00:26:36,659 --> 00:26:39,659
working together and they may remain

634
00:26:39,659 --> 00:26:41,700
separate or maybe combined but let's

635
00:26:41,700 --> 00:26:44,159
review the roles of both

636
00:26:44,159 --> 00:26:47,580
so what application Security Programs

637
00:26:47,580 --> 00:26:49,679
typically doing in in large

638
00:26:49,679 --> 00:26:52,320
organizations first ensuring that there

639
00:26:52,320 --> 00:26:56,760
are these gates to scan the applications

640
00:26:56,760 --> 00:26:59,100
um static code analysis Dynamic code

641
00:26:59,100 --> 00:27:01,200
analysis all the application security

642
00:27:01,200 --> 00:27:04,380
best practices developer training of and

643
00:27:04,380 --> 00:27:06,960
awareness they're also initiating threat

644
00:27:06,960 --> 00:27:08,220
modeling for the most critical

645
00:27:08,220 --> 00:27:11,700
applications pen testing and running

646
00:27:11,700 --> 00:27:14,039
these programs for the detection and

647
00:27:14,039 --> 00:27:16,380
resolution of vulnerabilities and of

648
00:27:16,380 --> 00:27:18,840
course adding devsecops practices

649
00:27:18,840 --> 00:27:21,320
for the application itself

650
00:27:21,320 --> 00:27:23,520
adding all the application security

651
00:27:23,520 --> 00:27:27,539
tools to the devops processes

652
00:27:27,539 --> 00:27:29,039
now let's look at the cloud Security

653
00:27:29,039 --> 00:27:31,380
Programs and what are they doing today

654
00:27:31,380 --> 00:27:33,419
and the way they are augmenting

655
00:27:33,419 --> 00:27:35,700
application Security Programs and they

656
00:27:35,700 --> 00:27:37,340
have a very similar in nature typically

657
00:27:37,340 --> 00:27:40,620
but instead of for example scanning the

658
00:27:40,620 --> 00:27:42,240
job application they're scanning

659
00:27:42,240 --> 00:27:45,059
infrastructures code that is managing

660
00:27:45,059 --> 00:27:46,919
the cloud environments

661
00:27:46,919 --> 00:27:49,559
the initiating threat modeling exercises

662
00:27:49,559 --> 00:27:52,380
both on the cloud service provider

663
00:27:52,380 --> 00:27:56,039
services and applications that are using

664
00:27:56,039 --> 00:27:58,140
these services in the cloud

665
00:27:58,140 --> 00:28:00,140
focusing on cloud native

666
00:28:00,140 --> 00:28:03,900
attack scenarios and attack vectors that

667
00:28:03,900 --> 00:28:06,120
we've been reviewing today initiating

668
00:28:06,120 --> 00:28:08,640
pen testing and monitoring for

669
00:28:08,640 --> 00:28:11,279
misconfigurations and then driving for a

670
00:28:11,279 --> 00:28:12,600
solution

671
00:28:12,600 --> 00:28:14,880
and of course doing this developer

672
00:28:14,880 --> 00:28:16,860
training but Cloud native developer

673
00:28:16,860 --> 00:28:18,240
training is slightly different from

674
00:28:18,240 --> 00:28:20,400
traditional developer training so Cloud

675
00:28:20,400 --> 00:28:22,559
Security Programs today are building an

676
00:28:22,559 --> 00:28:24,779
exactly this what should developers know

677
00:28:24,779 --> 00:28:28,260
in addition to what they know today

678
00:28:28,260 --> 00:28:30,360
they need to learn how to secure the

679
00:28:30,360 --> 00:28:31,740
operate cloud

680
00:28:31,740 --> 00:28:34,020
when the application is using the

681
00:28:34,020 --> 00:28:36,299
underlying Cloud platform platforms and

682
00:28:36,299 --> 00:28:39,120
services what are the risks and what

683
00:28:39,120 --> 00:28:40,799
should application developers be aware

684
00:28:40,799 --> 00:28:43,980
of so all of these on the agenda of

685
00:28:43,980 --> 00:28:46,020
cloud Security Programs

686
00:28:46,020 --> 00:28:48,000
and these programs May remain separate

687
00:28:48,000 --> 00:28:50,340
only be combined but there is a need to

688
00:28:50,340 --> 00:28:53,959
cover for all of these aspects

689
00:28:55,260 --> 00:28:57,840
let's review this graph actually shows

690
00:28:57,840 --> 00:29:01,220
the life cycle of such a program

691
00:29:01,220 --> 00:29:05,039
and let me explain this on the example

692
00:29:05,039 --> 00:29:06,779
of a cloud security program

693
00:29:06,779 --> 00:29:10,320
uh typically many systems are initiating

694
00:29:10,320 --> 00:29:12,720
this please come and check how are we

695
00:29:12,720 --> 00:29:14,700
doing what is Alpha Security posture

696
00:29:14,700 --> 00:29:16,980
what is the amount of misconfigurations

697
00:29:16,980 --> 00:29:19,080
vulnerabilities that we have in the

698
00:29:19,080 --> 00:29:20,820
cloud and help us to analyze our attack

699
00:29:20,820 --> 00:29:21,899
vectors

700
00:29:21,899 --> 00:29:24,539
so when we're coming to to do this

701
00:29:24,539 --> 00:29:27,899
assessments typically uh we're expanding

702
00:29:27,899 --> 00:29:30,600
uh divisibility bring more tools or

703
00:29:30,600 --> 00:29:32,820
adding more policies to get visibility

704
00:29:32,820 --> 00:29:35,279
into the environments and then typically

705
00:29:35,279 --> 00:29:37,980
we'll see more so you will see this what

706
00:29:37,980 --> 00:29:40,980
you can see in this graph is the wire

707
00:29:40,980 --> 00:29:43,799
access these are the findings so

708
00:29:43,799 --> 00:29:46,740
typically if we initiate

709
00:29:46,740 --> 00:29:49,559
um additional search additional tools

710
00:29:49,559 --> 00:29:51,620
for visibility mapping of

711
00:29:51,620 --> 00:29:54,720
misconfigurations we'll see more

712
00:29:54,720 --> 00:29:56,880
but the secret is actually how to

713
00:29:56,880 --> 00:29:59,520
resolve them and how to keep everything

714
00:29:59,520 --> 00:30:02,279
green and secure over time

715
00:30:02,279 --> 00:30:05,000
let me give you some examples

716
00:30:05,000 --> 00:30:08,760
it in almost every case we can see that

717
00:30:08,760 --> 00:30:10,320
for example instances are not properly

718
00:30:10,320 --> 00:30:12,779
encrypted that's never a common mistake

719
00:30:12,779 --> 00:30:13,640
of

720
00:30:13,640 --> 00:30:16,440
application Developers

721
00:30:16,440 --> 00:30:19,320
obviously the solution is not to go back

722
00:30:19,320 --> 00:30:22,140
and change this manually for thousands

723
00:30:22,140 --> 00:30:25,260
of instances the solution is go back and

724
00:30:25,260 --> 00:30:27,480
remediate the deployment code

725
00:30:27,480 --> 00:30:30,240
and this is the way to get to the screen

726
00:30:30,240 --> 00:30:33,000
State actually resolving the issues

727
00:30:33,000 --> 00:30:35,460
analyzing what's the root cause and then

728
00:30:35,460 --> 00:30:37,740
going back to the code typically it's

729
00:30:37,740 --> 00:30:41,340
about one or two lines of code that if

730
00:30:41,340 --> 00:30:43,080
result will impact the entire

731
00:30:43,080 --> 00:30:45,799
environment

732
00:30:45,840 --> 00:30:49,620
but it is critical to do two things one

733
00:30:49,620 --> 00:30:52,500
this root cause analysis and second

734
00:30:52,500 --> 00:30:55,440
addressing all types of findings as I

735
00:30:55,440 --> 00:30:57,600
mentioned we cannot look just as at

736
00:30:57,600 --> 00:31:00,179
vulnerabilities with this assigned CVA

737
00:31:00,179 --> 00:31:03,360
number and risk because there are just

738
00:31:03,360 --> 00:31:05,820
so many misconfigurations there are bags

739
00:31:05,820 --> 00:31:08,460
and weaknesses and they're also Opening

740
00:31:08,460 --> 00:31:10,799
Our environments and they are also

741
00:31:10,799 --> 00:31:12,539
putting us at risk

742
00:31:12,539 --> 00:31:14,700
so this is why these three things of

743
00:31:14,700 --> 00:31:17,399
cdes misconfigurations and then products

744
00:31:17,399 --> 00:31:20,299
and weaknesses are so critical

745
00:31:20,299 --> 00:31:24,179
sorry what should we be doing with this

746
00:31:24,179 --> 00:31:27,179
what I've seen it is this combination of

747
00:31:27,179 --> 00:31:30,419
visibility and addressing the root cause

748
00:31:30,419 --> 00:31:32,279
and there is this balance because we

749
00:31:32,279 --> 00:31:34,200
can't do just one of them we need to do

750
00:31:34,200 --> 00:31:36,840
both and we need to do both in parallel

751
00:31:36,840 --> 00:31:40,080
getting visibility seeing all these red

752
00:31:40,080 --> 00:31:44,159
items getting to the root cause and

753
00:31:44,159 --> 00:31:46,799
updating the code resolving them through

754
00:31:46,799 --> 00:31:48,299
these preventative controls and

755
00:31:48,299 --> 00:31:50,520
preventative guardrails and this is how

756
00:31:50,520 --> 00:31:53,460
we're resolving this over time

757
00:31:53,460 --> 00:31:55,980
what are the metrics for Success so let

758
00:31:55,980 --> 00:31:58,380
me give just a few metrics of course the

759
00:31:58,380 --> 00:31:59,940
amount of metrics that we should be

760
00:31:59,940 --> 00:32:02,340
measuring is much higher but this is

761
00:32:02,340 --> 00:32:05,700
just file remediation efforts first

762
00:32:05,700 --> 00:32:08,340
visibility and scanning coverage

763
00:32:08,340 --> 00:32:11,399
when when this graph of findings that we

764
00:32:11,399 --> 00:32:12,840
got thread items

765
00:32:12,840 --> 00:32:14,820
are we looking at everything we should

766
00:32:14,820 --> 00:32:16,260
be looking at or maybe there are

767
00:32:16,260 --> 00:32:17,580
additional environments that we are not

768
00:32:17,580 --> 00:32:19,440
looking at

769
00:32:19,440 --> 00:32:22,620
then for prioritization of high risk

770
00:32:22,620 --> 00:32:24,899
items because everything may be right

771
00:32:24,899 --> 00:32:27,840
there are just maybe too many issues and

772
00:32:27,840 --> 00:32:31,260
we cannot resolve everything at once so

773
00:32:31,260 --> 00:32:33,720
we need to prioritize and we need to

774
00:32:33,720 --> 00:32:36,299
detect these most critical items that

775
00:32:36,299 --> 00:32:39,299
should be resolved first

776
00:32:39,299 --> 00:32:41,399
and there's there are actually two

777
00:32:41,399 --> 00:32:44,640
things two attributes that uh that are

778
00:32:44,640 --> 00:32:46,860
useful to look at first the criticality

779
00:32:46,860 --> 00:32:49,620
of the item and then also the impact for

780
00:32:49,620 --> 00:32:53,340
example if there is this one line uh

781
00:32:53,340 --> 00:32:55,440
with unencrypted volumes and all of the

782
00:32:55,440 --> 00:32:58,260
instances are deployed from this code

783
00:32:58,260 --> 00:33:01,440
not encrypting the volumes if we fix the

784
00:33:01,440 --> 00:33:03,480
slime all the volumes will be encrypted

785
00:33:03,480 --> 00:33:05,880
so by fixing one line we impacted

786
00:33:05,880 --> 00:33:07,679
thousands of instances

787
00:33:07,679 --> 00:33:10,559
and that's a good high priority item to

788
00:33:10,559 --> 00:33:13,919
start with because it is easy to fix the

789
00:33:13,919 --> 00:33:17,460
impact is Big the risk of

790
00:33:17,460 --> 00:33:20,700
exposing the data is

791
00:33:20,700 --> 00:33:23,880
an additional metric is also around life

792
00:33:23,880 --> 00:33:26,820
cycle and gates are we scanning through

793
00:33:26,820 --> 00:33:28,980
the entire life cycle or are we looking

794
00:33:28,980 --> 00:33:31,519
just pre-deployment or just run time

795
00:33:31,519 --> 00:33:34,440
typically it's not enough just to look

796
00:33:34,440 --> 00:33:35,760
at one of them

797
00:33:35,760 --> 00:33:37,980
because if we're scanning just at

798
00:33:37,980 --> 00:33:39,539
runtime

799
00:33:39,539 --> 00:33:42,600
it's it may be too late if if we're

800
00:33:42,600 --> 00:33:45,779
scanning just pre-deployment then still

801
00:33:45,779 --> 00:33:48,240
if there isn't an attack or exploitation

802
00:33:48,240 --> 00:33:50,640
after the code is deployed we'll

803
00:33:50,640 --> 00:33:52,440
completely miss it

804
00:33:52,440 --> 00:33:55,080
so measuring these scanning Gates and

805
00:33:55,080 --> 00:33:57,720
life cycle management is very critical

806
00:33:57,720 --> 00:34:00,539
and then the last phases are actually

807
00:34:00,539 --> 00:34:03,419
how we're responding

808
00:34:03,419 --> 00:34:06,120
because typically the amount of issues

809
00:34:06,120 --> 00:34:08,099
is bigger than we can resolve manually

810
00:34:08,099 --> 00:34:11,219
so having systems for tagging and auto

811
00:34:11,219 --> 00:34:14,099
ticketing assigning the priority and

812
00:34:14,099 --> 00:34:16,080
then resolving the issues is very

813
00:34:16,080 --> 00:34:18,300
critical and without this it is almost

814
00:34:18,300 --> 00:34:22,339
impossible to remediate these findings

815
00:34:23,359 --> 00:34:26,159
and finally and finally

816
00:34:26,159 --> 00:34:29,040
once we are fixing the issues what is

817
00:34:29,040 --> 00:34:31,859
the speed of redeployment let's back to

818
00:34:31,859 --> 00:34:36,020
our example of our encrypted volumes

819
00:34:36,020 --> 00:34:38,820
we detected the problem we fixed this

820
00:34:38,820 --> 00:34:41,460
one line of code if the instances are

821
00:34:41,460 --> 00:34:44,099
not redeployed we didn't really resolve

822
00:34:44,099 --> 00:34:46,280
it so measuring the speed of

823
00:34:46,280 --> 00:34:49,859
redeployment and mean time to resolve

824
00:34:49,859 --> 00:34:51,719
for each and every issue is very

825
00:34:51,719 --> 00:34:54,359
critical and and this is an important

826
00:34:54,359 --> 00:34:56,879
method metric for the success of these

827
00:34:56,879 --> 00:34:59,119
programs

828
00:34:59,119 --> 00:35:03,060
and let me maybe finish this with one

829
00:35:03,060 --> 00:35:05,160
additional example of what a cloud is

830
00:35:05,160 --> 00:35:06,180
different

831
00:35:06,180 --> 00:35:08,940
and where are we talking about Cloud

832
00:35:08,940 --> 00:35:10,440
security combined with application

833
00:35:10,440 --> 00:35:11,839
security

834
00:35:11,839 --> 00:35:15,060
it is about the management of the life

835
00:35:15,060 --> 00:35:18,480
cycle of public cloud services

836
00:35:18,480 --> 00:35:21,000
if we're looking at this every service

837
00:35:21,000 --> 00:35:23,640
may be misconfigured most of these

838
00:35:23,640 --> 00:35:26,040
services are defined as multi-tenant by

839
00:35:26,040 --> 00:35:28,020
nature which means let's take object

840
00:35:28,020 --> 00:35:29,900
storage as an example

841
00:35:29,900 --> 00:35:34,020
it is one service for all the clients it

842
00:35:34,020 --> 00:35:36,240
is not deployed in this dedicated way

843
00:35:36,240 --> 00:35:38,520
just for each account it is shared

844
00:35:38,520 --> 00:35:39,900
between everyone

845
00:35:39,900 --> 00:35:43,200
so if someone is misconfiguring it

846
00:35:43,200 --> 00:35:45,780
then no network can can protect against

847
00:35:45,780 --> 00:35:50,040
us it is just policy misconfiguration

848
00:35:50,040 --> 00:35:52,760
and the bucket is exposed

849
00:35:52,760 --> 00:35:56,040
so this management of the life cycle how

850
00:35:56,040 --> 00:35:57,980
we hardening the services

851
00:35:57,980 --> 00:36:01,260
and what's the life cycle how to secure

852
00:36:01,260 --> 00:36:03,420
the foundations how to secure the build

853
00:36:03,420 --> 00:36:06,000
of the application creating this bucket

854
00:36:06,000 --> 00:36:07,520
foreign

855
00:36:07,520 --> 00:36:10,500
time and then how can we improve over

856
00:36:10,500 --> 00:36:11,520
time

857
00:36:11,520 --> 00:36:15,119
so this uh what many organizations are

858
00:36:15,119 --> 00:36:17,880
doing today they are defining this uh

859
00:36:17,880 --> 00:36:20,160
baselines for each and every service

860
00:36:20,160 --> 00:36:21,720
that they're using in public clouds

861
00:36:21,720 --> 00:36:24,900
creating these rules for example uh for

862
00:36:24,900 --> 00:36:26,700
instances the volume should be encrypted

863
00:36:26,700 --> 00:36:30,240
in this way for storage buckets these

864
00:36:30,240 --> 00:36:31,800
are the policy these are the default

865
00:36:31,800 --> 00:36:34,920
policies inside our organization and

866
00:36:34,920 --> 00:36:36,780
this is a deployment code that should be

867
00:36:36,780 --> 00:36:38,220
used

868
00:36:38,220 --> 00:36:40,859
and then there are monitoring tools to

869
00:36:40,859 --> 00:36:43,980
detect if something is misconfigured to

870
00:36:43,980 --> 00:36:47,339
generate events and then handle them

871
00:36:47,339 --> 00:36:49,859
and do the remediation that we've been

872
00:36:49,859 --> 00:36:51,060
discussing

873
00:36:51,060 --> 00:36:53,040
but we need to do this for each and

874
00:36:53,040 --> 00:36:54,180
every service

875
00:36:54,180 --> 00:36:55,980
and this pipeline is actually very

876
00:36:55,980 --> 00:36:57,480
similar to our traditional abstract

877
00:36:57,480 --> 00:36:59,060
pipeline

878
00:36:59,060 --> 00:37:00,780
sorry

879
00:37:00,780 --> 00:37:02,579
because it should start with threat

880
00:37:02,579 --> 00:37:04,380
analysis exactly is an application

881
00:37:04,380 --> 00:37:07,619
security what are the tax scenarios then

882
00:37:07,619 --> 00:37:09,420
how the service should be configured to

883
00:37:09,420 --> 00:37:11,460
prevent this

884
00:37:11,460 --> 00:37:13,560
then what are the guidelines for

885
00:37:13,560 --> 00:37:16,740
developers what is the deployment code

886
00:37:16,740 --> 00:37:19,560
how are we monitoring this and what are

887
00:37:19,560 --> 00:37:22,619
we doing if something goes wrong

888
00:37:22,619 --> 00:37:24,839
many organizations are going in this

889
00:37:24,839 --> 00:37:27,060
direction but let me emphasize maybe one

890
00:37:27,060 --> 00:37:28,500
of the most critical

891
00:37:28,500 --> 00:37:31,500
points of how to do it right

892
00:37:31,500 --> 00:37:34,260
it is the policies code piece that is

893
00:37:34,260 --> 00:37:37,440
very critical a policies code has many

894
00:37:37,440 --> 00:37:38,700
meanings

895
00:37:38,700 --> 00:37:41,040
essentially it's policy written as code

896
00:37:41,040 --> 00:37:43,560
and it may be implemented at various

897
00:37:43,560 --> 00:37:45,180
stages

898
00:37:45,180 --> 00:37:47,880
in this scenario these are the

899
00:37:47,880 --> 00:37:49,380
compliance rules

900
00:37:49,380 --> 00:37:51,599
that before we're deploying a certain

901
00:37:51,599 --> 00:37:54,000
service we can scan

902
00:37:54,000 --> 00:37:56,640
is it according to what we Define and if

903
00:37:56,640 --> 00:37:59,700
not will not allow the deployment

904
00:37:59,700 --> 00:38:02,400
the same at runtime we can have policies

905
00:38:02,400 --> 00:38:04,740
code monitoring and if something is not

906
00:38:04,740 --> 00:38:06,480
aligned with this Baseline definition

907
00:38:06,480 --> 00:38:08,660
there will be an alert

908
00:38:08,660 --> 00:38:13,040
and Remediation procedures

909
00:38:13,099 --> 00:38:15,980
so let me finish with highlighting

910
00:38:15,980 --> 00:38:19,260
what's how this policies code is helping

911
00:38:19,260 --> 00:38:22,079
us and what's the meaning of it and all

912
00:38:22,079 --> 00:38:23,520
of you are familiar with the concept of

913
00:38:23,520 --> 00:38:24,960
Dev seconds

914
00:38:24,960 --> 00:38:26,700
it's the essential integration of

915
00:38:26,700 --> 00:38:30,240
security tools in our devops processes

916
00:38:30,240 --> 00:38:33,420
through the entire life cycle of our

917
00:38:33,420 --> 00:38:35,240
applications

918
00:38:35,240 --> 00:38:37,859
policy as code is actually a mechanism

919
00:38:37,859 --> 00:38:40,980
to make our Dev Cyclops processes better

920
00:38:40,980 --> 00:38:44,160
by defining the rules by defining these

921
00:38:44,160 --> 00:38:46,859
Gates and saying this is the policy

922
00:38:46,859 --> 00:38:49,619
this is the the gate has brought about

923
00:38:49,619 --> 00:38:51,960
that secops process but it is the

924
00:38:51,960 --> 00:38:55,079
policies code that defines these are the

925
00:38:55,079 --> 00:38:56,579
rules of the road

926
00:38:56,579 --> 00:38:58,800
if you're not following them you will

927
00:38:58,800 --> 00:39:01,140
not pass to the next stage and this is

928
00:39:01,140 --> 00:39:03,060
why devs checkups and policies called

929
00:39:03,060 --> 00:39:05,700
actually complementing each other and we

930
00:39:05,700 --> 00:39:08,118
need both

931
00:39:08,220 --> 00:39:10,859
so let me summarize with what we've seen

932
00:39:10,859 --> 00:39:12,300
today

933
00:39:12,300 --> 00:39:15,180
we saw that cloud can be exploited by

934
00:39:15,180 --> 00:39:17,700
application exploitation techniques so

935
00:39:17,700 --> 00:39:19,380
Cloud security and application security

936
00:39:19,380 --> 00:39:20,940
are coming together

937
00:39:20,940 --> 00:39:23,460
Cloud management code is accessible the

938
00:39:23,460 --> 00:39:26,820
internet exposed uh

939
00:39:26,820 --> 00:39:29,700
to potentially malicious attackers that

940
00:39:29,700 --> 00:39:30,900
can use traditional application

941
00:39:30,900 --> 00:39:33,000
exploitation techniques

942
00:39:33,000 --> 00:39:35,220
that therefore application security

943
00:39:35,220 --> 00:39:37,980
processes should be integrated with

944
00:39:37,980 --> 00:39:40,500
Cloud Security Programs

945
00:39:40,500 --> 00:39:43,020
to check for all these issues and then

946
00:39:43,020 --> 00:39:45,119
finally from the ciso standpoint cloud

947
00:39:45,119 --> 00:39:47,339
and application Security Programs are

948
00:39:47,339 --> 00:39:50,700
essential they should cover attack

949
00:39:50,700 --> 00:39:53,280
service management depth of checkups and

950
00:39:53,280 --> 00:39:55,680
policies

951
00:39:55,680 --> 00:39:57,660
I know this and thank you for listening

952
00:39:57,660 --> 00:40:00,859
and all positive questions

953
00:40:02,300 --> 00:40:05,460
thank you so much and uh I'll give you a

954
00:40:05,460 --> 00:40:07,859
couple of ticks there to get um you know

955
00:40:07,859 --> 00:40:09,900
a little drink going

956
00:40:09,900 --> 00:40:10,619
um

957
00:40:10,619 --> 00:40:13,800
okay we do have a number of questions so

958
00:40:13,800 --> 00:40:15,900
the uh Dorothy dixa which is what we

959
00:40:15,900 --> 00:40:17,640
call a question that we've asked

960
00:40:17,640 --> 00:40:19,260
ourselves

961
00:40:19,260 --> 00:40:21,000
um there's actually four of them that

962
00:40:21,000 --> 00:40:22,920
aren't that come from the audience so

963
00:40:22,920 --> 00:40:25,200
the first question with four votes is

964
00:40:25,200 --> 00:40:27,540
what are the recommended tools for CSP

965
00:40:27,540 --> 00:40:30,740
threat modeling

966
00:40:31,920 --> 00:40:34,020
uh

967
00:40:34,020 --> 00:40:36,420
I wish I could give you a name of

968
00:40:36,420 --> 00:40:38,520
products unfortunately this space is

969
00:40:38,520 --> 00:40:41,640
emerging most of the threat modeling

970
00:40:41,640 --> 00:40:45,060
methodologies were developed

971
00:40:45,060 --> 00:40:47,339
a very application

972
00:40:47,339 --> 00:40:50,339
security Centric

973
00:40:50,339 --> 00:40:52,460
I think this space is still evolving

974
00:40:52,460 --> 00:40:55,380
indeed many organizations need to do

975
00:40:55,380 --> 00:40:57,540
this manually so

976
00:40:57,540 --> 00:41:01,680
okay and I I hope that soon I will be

977
00:41:01,680 --> 00:41:02,640
able to recommend the product

978
00:41:02,640 --> 00:41:05,520
unfortunately I think we're still not at

979
00:41:05,520 --> 00:41:07,980
this winning phase right now

980
00:41:07,980 --> 00:41:11,220
but would love to continue for it if any

981
00:41:11,220 --> 00:41:13,020
of you will hear about this Technologies

982
00:41:13,020 --> 00:41:14,460
please share with the rest of the group

983
00:41:14,460 --> 00:41:15,720
today

984
00:41:15,720 --> 00:41:17,040
yeah I mean we're an open source

985
00:41:17,040 --> 00:41:19,500
organization if there's a person in the

986
00:41:19,500 --> 00:41:21,180
audience who wants to get going on such

987
00:41:21,180 --> 00:41:23,400
a tool we actually do have a tool called

988
00:41:23,400 --> 00:41:27,420
threat Dragon we also have tools called

989
00:41:27,420 --> 00:41:29,520
um that

990
00:41:29,520 --> 00:41:32,460
um the folks to do Iris risk through

991
00:41:32,460 --> 00:41:35,160
Stephen DeVries and others you may want

992
00:41:35,160 --> 00:41:36,540
to just have a look at those and see if

993
00:41:36,540 --> 00:41:39,000
we can extend them to include CSP threat

994
00:41:39,000 --> 00:41:40,560
modeling

995
00:41:40,560 --> 00:41:42,359
um obviously in Microsoft threat

996
00:41:42,359 --> 00:41:44,700
modeling tool exists as well but if you

997
00:41:44,700 --> 00:41:47,160
are interested in doing this work it

998
00:41:47,160 --> 00:41:49,140
doesn't have to be a commercial tool and

999
00:41:49,140 --> 00:41:51,119
I think realistically our goal is to

1000
00:41:51,119 --> 00:41:53,220
help developers all over the world so if

1001
00:41:53,220 --> 00:41:55,560
this is this question had the most

1002
00:41:55,560 --> 00:41:56,940
number of votes so there was obviously

1003
00:41:56,940 --> 00:41:59,400
an interest if you are interested please

1004
00:41:59,400 --> 00:42:01,800
do contact Harold Blankenship who's a

1005
00:42:01,800 --> 00:42:05,280
the technology and projects director and

1006
00:42:05,280 --> 00:42:06,240
let's see if we can get some

1007
00:42:06,240 --> 00:42:08,820
improvements going okay yes thank you we

1008
00:42:08,820 --> 00:42:10,800
would love to continue to be part of

1009
00:42:10,800 --> 00:42:13,500
this forum and indeed there are many

1010
00:42:13,500 --> 00:42:15,000
improvements that we have solid

1011
00:42:15,000 --> 00:42:17,339
foundations inside modeling so it's

1012
00:42:17,339 --> 00:42:19,740
about taking this to the next level and

1013
00:42:19,740 --> 00:42:22,500
an excellent question and definitely a

1014
00:42:22,500 --> 00:42:24,599
great initiative to push forward

1015
00:42:24,599 --> 00:42:28,619
absolutely okay so the next most popular

1016
00:42:28,619 --> 00:42:30,540
question is due to limited knowledge of

1017
00:42:30,540 --> 00:42:32,520
cloud security how to make sure

1018
00:42:32,520 --> 00:42:35,460
developer or SB I'm not too sure what SP

1019
00:42:35,460 --> 00:42:38,240
is but who manages

1020
00:42:38,240 --> 00:42:40,740
who managed to do the rack configuration

1021
00:42:40,740 --> 00:42:42,660
so

1022
00:42:42,660 --> 00:42:44,579
um I'm not too sure what they mean by SB

1023
00:42:44,579 --> 00:42:47,220
but um

1024
00:42:47,220 --> 00:42:49,320
I'm not sure but anyway um how do we

1025
00:42:49,320 --> 00:42:51,180
make sure that the right person has

1026
00:42:51,180 --> 00:42:52,440
actually done the right configuration

1027
00:42:52,440 --> 00:42:55,079
who manages it

1028
00:42:55,079 --> 00:42:57,680
yes it's

1029
00:42:58,140 --> 00:43:01,200
a service maybe a space service provider

1030
00:43:01,200 --> 00:43:04,260
ah lots of this because indeed if we're

1031
00:43:04,260 --> 00:43:06,420
talking about our application

1032
00:43:06,420 --> 00:43:08,640
applications let's say I have developed

1033
00:43:08,640 --> 00:43:10,619
an application I'm putting this into the

1034
00:43:10,619 --> 00:43:14,880
cloud I would use cspm or other tools to

1035
00:43:14,880 --> 00:43:16,800
actually check for misconfigurations and

1036
00:43:16,800 --> 00:43:18,900
other things but sometimes there are

1037
00:43:18,900 --> 00:43:22,700
service providers and third parties that

1038
00:43:22,700 --> 00:43:24,780
that they're responsible for actually

1039
00:43:24,780 --> 00:43:26,640
implementing this

1040
00:43:26,640 --> 00:43:30,599
and and indeed this is actually a an

1041
00:43:30,599 --> 00:43:32,339
excellent question and many many

1042
00:43:32,339 --> 00:43:34,020
organizations are really worried about

1043
00:43:34,020 --> 00:43:36,359
this because they're consuming software

1044
00:43:36,359 --> 00:43:37,980
access

1045
00:43:37,980 --> 00:43:39,540
but actually it's just another company

1046
00:43:39,540 --> 00:43:41,640
another service provider building these

1047
00:43:41,640 --> 00:43:44,359
applications of a public cloud services

1048
00:43:44,359 --> 00:43:48,119
and a many clients of these service

1049
00:43:48,119 --> 00:43:51,300
providers they want to know that this

1050
00:43:51,300 --> 00:43:53,760
application is secure and not exposed

1051
00:43:53,760 --> 00:43:55,800
exposed to the attack factors that we've

1052
00:43:55,800 --> 00:43:59,040
been discussing and so what is emerging

1053
00:43:59,040 --> 00:44:01,200
right now still is a discussion I still

1054
00:44:01,200 --> 00:44:04,500
did see this fully forced but this is

1055
00:44:04,500 --> 00:44:06,480
something to discuss as part of the

1056
00:44:06,480 --> 00:44:08,579
agreements with the service providers

1057
00:44:08,579 --> 00:44:12,180
for them to bring these attestations

1058
00:44:12,180 --> 00:44:14,280
some of the decisions are provided as

1059
00:44:14,280 --> 00:44:17,400
part of soft to processes or others but

1060
00:44:17,400 --> 00:44:20,099
it will not go very deep into this

1061
00:44:20,099 --> 00:44:22,260
emerging attack scenarios and how to

1062
00:44:22,260 --> 00:44:26,160
check them and so discuss one option is

1063
00:44:26,160 --> 00:44:27,480
to discuss this as part of the

1064
00:44:27,480 --> 00:44:29,040
agreements with the service providers

1065
00:44:29,040 --> 00:44:31,619
that will be that they will be providing

1066
00:44:31,619 --> 00:44:33,900
these more advanced statistications from

1067
00:44:33,900 --> 00:44:36,000
more advanced tools or agreeing to

1068
00:44:36,000 --> 00:44:38,520
periodic audit processes

1069
00:44:38,520 --> 00:44:41,520
so the decline will actually ask to

1070
00:44:41,520 --> 00:44:44,339
periodically audit the service provider

1071
00:44:44,339 --> 00:44:47,339
and check for these issues so these are

1072
00:44:47,339 --> 00:44:48,720
the solutions that I've seen in this

1073
00:44:48,720 --> 00:44:50,940
place in the space hopefully this

1074
00:44:50,940 --> 00:44:53,460
answered the question if not then brings

1075
00:44:53,460 --> 00:44:54,900
that additional details on the wall

1076
00:44:54,900 --> 00:44:57,200
Trust

1077
00:44:57,300 --> 00:45:00,420
sure okay so the next question is are

1078
00:45:00,420 --> 00:45:01,920
you aware of any regulation or

1079
00:45:01,920 --> 00:45:03,119
compliance

1080
00:45:03,119 --> 00:45:07,079
um uh standard that prevents using cloud

1081
00:45:07,079 --> 00:45:09,119
and multi-tenant setup and requires a

1082
00:45:09,119 --> 00:45:10,760
customer to have a dedicated hardware

1083
00:45:10,760 --> 00:45:13,859
and the example they give is PCI DSS

1084
00:45:13,859 --> 00:45:16,020
which I'm reasonably certain doesn't

1085
00:45:16,020 --> 00:45:18,300
prevent that but are you aware of any

1086
00:45:18,300 --> 00:45:20,099
other standards or compliance

1087
00:45:20,099 --> 00:45:22,200
requirements that require dedicated

1088
00:45:22,200 --> 00:45:24,540
Hardware

1089
00:45:24,540 --> 00:45:27,900
yeah I think honestly I'm not a lawyer I

1090
00:45:27,900 --> 00:45:30,000
think there may be cases where this may

1091
00:45:30,000 --> 00:45:32,819
be required for some specific use cases

1092
00:45:32,819 --> 00:45:34,220
and

1093
00:45:34,220 --> 00:45:37,260
some defense related scenarios or things

1094
00:45:37,260 --> 00:45:40,980
like that and

1095
00:45:40,980 --> 00:45:44,579
it is of course it will be more secure

1096
00:45:44,579 --> 00:45:47,579
but I think also today

1097
00:45:47,579 --> 00:45:48,180
um

1098
00:45:48,180 --> 00:45:50,099
in many discussions about compliance

1099
00:45:50,099 --> 00:45:52,260
people understand that if they will be

1100
00:45:52,260 --> 00:45:54,240
too strict in these requirements they

1101
00:45:54,240 --> 00:45:55,920
will be preventing Innovation from any

1102
00:45:55,920 --> 00:45:57,180
companies

1103
00:45:57,180 --> 00:46:01,920
um so this is why there is this a gentle

1104
00:46:01,920 --> 00:46:03,839
balance right can we

1105
00:46:03,839 --> 00:46:06,359
actually say no to the cloud can we

1106
00:46:06,359 --> 00:46:08,460
force people to say no to the cloud

1107
00:46:08,460 --> 00:46:10,859
because in many cases they don't have a

1108
00:46:10,859 --> 00:46:12,540
choice there are so many solutions that

1109
00:46:12,540 --> 00:46:14,760
are available today only over

1110
00:46:14,760 --> 00:46:17,819
Cloud environments even

1111
00:46:17,819 --> 00:46:20,339
if we're thinking about blockchain or

1112
00:46:20,339 --> 00:46:21,599
other applications many of them are

1113
00:46:21,599 --> 00:46:24,359
available only over the cloud so

1114
00:46:24,359 --> 00:46:25,920
organizations that need to integrate

1115
00:46:25,920 --> 00:46:28,200
this they actually Force to go into the

1116
00:46:28,200 --> 00:46:29,480
cloud

1117
00:46:29,480 --> 00:46:32,579
and but but this question I think it

1118
00:46:32,579 --> 00:46:34,920
will apply certain organizations yes may

1119
00:46:34,920 --> 00:46:39,119
have based additional requirements based

1120
00:46:39,119 --> 00:46:41,880
on on their use cases but but there's a

1121
00:46:41,880 --> 00:46:45,420
the situations I think are just

1122
00:46:45,420 --> 00:46:47,880
handled separately and and many

1123
00:46:47,880 --> 00:46:50,099
organizations honestly are still very

1124
00:46:50,099 --> 00:46:52,260
concerned to go to public to public

1125
00:46:52,260 --> 00:46:54,420
clouds so many organizations are still

1126
00:46:54,420 --> 00:46:56,400
having data centers not necessarily

1127
00:46:56,400 --> 00:46:58,440
because

1128
00:46:58,440 --> 00:47:00,960
um Regulators are saying you cannot do

1129
00:47:00,960 --> 00:47:03,180
this but they're concerned that if they

1130
00:47:03,180 --> 00:47:05,339
will go maybe they will not fully

1131
00:47:05,339 --> 00:47:06,660
satisfy their part of the shared

1132
00:47:06,660 --> 00:47:08,940
responsibility or the cloud

1133
00:47:08,940 --> 00:47:11,780
the multitant isolation may be broken

1134
00:47:11,780 --> 00:47:15,420
and then they they will expose actually

1135
00:47:15,420 --> 00:47:17,880
their clients so there are organizations

1136
00:47:17,880 --> 00:47:21,240
that are still concerned with us

1137
00:47:21,240 --> 00:47:24,000
yeah I mean honestly a lot of this stuff

1138
00:47:24,000 --> 00:47:26,099
comes back to the people who believe

1139
00:47:26,099 --> 00:47:28,920
that data has a special place

1140
00:47:28,920 --> 00:47:31,260
um on this planet instead of just an IP

1141
00:47:31,260 --> 00:47:32,880
address

1142
00:47:32,880 --> 00:47:36,420
um ever since the 1960s and 1970s where

1143
00:47:36,420 --> 00:47:39,420
IBM were running lpars for various

1144
00:47:39,420 --> 00:47:42,240
clients and that is the underpinning of

1145
00:47:42,240 --> 00:47:44,280
the world financial system

1146
00:47:44,280 --> 00:47:48,000
this is a ridiculous question but there

1147
00:47:48,000 --> 00:47:49,740
are some ridiculous compliance

1148
00:47:49,740 --> 00:47:51,660
requirements out there so there are

1149
00:47:51,660 --> 00:47:54,540
plenty of firms making a lot of money

1150
00:47:54,540 --> 00:47:56,339
from people implementing these

1151
00:47:56,339 --> 00:47:58,079
ridiculous requirements it really should

1152
00:47:58,079 --> 00:47:59,520
be about whether or not it's secure or

1153
00:47:59,520 --> 00:48:02,400
not not where it's located or who whose

1154
00:48:02,400 --> 00:48:04,619
other computer it's on

1155
00:48:04,619 --> 00:48:07,800
um I think if most banks were required

1156
00:48:07,800 --> 00:48:09,920
to host their own mainframes

1157
00:48:09,920 --> 00:48:13,079
particularly for BCP or Dr purposes they

1158
00:48:13,079 --> 00:48:14,700
would fail this compliance check and

1159
00:48:14,700 --> 00:48:17,640
therefore it's a ridiculous compliance

1160
00:48:17,640 --> 00:48:20,700
um I'm extraordinarily unimpressed with

1161
00:48:20,700 --> 00:48:22,680
anybody who thinks along those lines

1162
00:48:22,680 --> 00:48:25,200
because it's not about security it's

1163
00:48:25,200 --> 00:48:27,780
about job security or making sure that

1164
00:48:27,780 --> 00:48:29,300
someone gets paid

1165
00:48:29,300 --> 00:48:32,579
rather than up time or security or some

1166
00:48:32,579 --> 00:48:35,099
other non-performance sorry not a

1167
00:48:35,099 --> 00:48:38,160
non-functional requirement I feel very

1168
00:48:38,160 --> 00:48:40,740
passionately about this and um

1169
00:48:40,740 --> 00:48:43,760
to me I'd I'd take tangible security

1170
00:48:43,760 --> 00:48:47,880
over pretend hand wavy security

1171
00:48:47,880 --> 00:48:51,180
physio security every day of the week

1172
00:48:51,180 --> 00:48:52,619
um just because it's a dashed line

1173
00:48:52,619 --> 00:48:54,599
somewhere as it says this is our private

1174
00:48:54,599 --> 00:48:57,319
virtual Network

1175
00:48:57,780 --> 00:49:01,560
hackers don't care they really don't

1176
00:49:01,560 --> 00:49:04,560
anyway let's just move on I as you can

1177
00:49:04,560 --> 00:49:07,380
tell I'm very biased against the actual

1178
00:49:07,380 --> 00:49:09,180
question

1179
00:49:09,180 --> 00:49:10,200
um

1180
00:49:10,200 --> 00:49:13,260
and um just for the record I also am not

1181
00:49:13,260 --> 00:49:14,819
aware of any regulations that do that

1182
00:49:14,819 --> 00:49:17,579
I'm sure there are some

1183
00:49:17,579 --> 00:49:19,440
um this is the Dorothy Dixon have you

1184
00:49:19,440 --> 00:49:21,060
got any examples of firms or

1185
00:49:21,060 --> 00:49:22,560
organizations that have actually done

1186
00:49:22,560 --> 00:49:24,540
this convergence and what were the

1187
00:49:24,540 --> 00:49:26,460
challenges or successes that you know

1188
00:49:26,460 --> 00:49:28,319
that they had

1189
00:49:28,319 --> 00:49:30,540
yes thank you so I'm maybe I'll just

1190
00:49:30,540 --> 00:49:32,180
share from my personal experience

1191
00:49:32,180 --> 00:49:35,220
because as part of my role at Citibank

1192
00:49:35,220 --> 00:49:37,740
and I I built the C so-called security

1193
00:49:37,740 --> 00:49:40,980
program but day one it was built in this

1194
00:49:40,980 --> 00:49:42,720
close collaboration with application

1195
00:49:42,720 --> 00:49:45,119
security program because we already saw

1196
00:49:45,119 --> 00:49:47,760
these interaction points and they need

1197
00:49:47,760 --> 00:49:51,839
to actually combine our approaches and

1198
00:49:51,839 --> 00:49:54,420
um and have this as one holistic view

1199
00:49:54,420 --> 00:49:56,160
scanning applications and scanning

1200
00:49:56,160 --> 00:49:58,200
containers and scanning infrastructures

1201
00:49:58,200 --> 00:50:01,440
code for example so we started this at

1202
00:50:01,440 --> 00:50:05,040
Citibank now is Ernest and Young it we

1203
00:50:05,040 --> 00:50:07,020
started with two practices called

1204
00:50:07,020 --> 00:50:08,339
security practice and application

1205
00:50:08,339 --> 00:50:10,619
security practice and just throughout

1206
00:50:10,619 --> 00:50:14,040
projects to clients we saw that a most

1207
00:50:14,040 --> 00:50:16,020
of our projects are combining both and

1208
00:50:16,020 --> 00:50:17,819
we need people who are skilled in both

1209
00:50:17,819 --> 00:50:21,119
for both no application security and no

1210
00:50:21,119 --> 00:50:23,640
Cloud security are familiar with all

1211
00:50:23,640 --> 00:50:25,500
these attack factors and how to prevent

1212
00:50:25,500 --> 00:50:28,980
them so internally we merged in our

1213
00:50:28,980 --> 00:50:31,260
practices we have we call it attack

1214
00:50:31,260 --> 00:50:34,500
surface management now and we have a

1215
00:50:34,500 --> 00:50:37,260
team of trained professionals looking at

1216
00:50:37,260 --> 00:50:39,720
cloud and application Security in this

1217
00:50:39,720 --> 00:50:42,540
holistic way so we have actually

1218
00:50:42,540 --> 00:50:45,119
implemented this and this is the the

1219
00:50:45,119 --> 00:50:48,240
mission of our team

1220
00:50:48,240 --> 00:50:51,660
cool the next question is do you know of

1221
00:50:51,660 --> 00:50:53,160
any blogs

1222
00:50:53,160 --> 00:50:56,480
um oh actually it just switched over

1223
00:50:56,480 --> 00:50:58,500
I'll ask someone I was originally going

1224
00:50:58,500 --> 00:51:00,420
to ask do you know of any standard that

1225
00:51:00,420 --> 00:51:04,260
is planning to Define policy as code

1226
00:51:04,260 --> 00:51:06,960
oh that's an excellent question

1227
00:51:06,960 --> 00:51:07,859
um

1228
00:51:07,859 --> 00:51:11,940
I think a oppa is becoming very popular

1229
00:51:11,940 --> 00:51:13,980
as an approach to policies called

1230
00:51:13,980 --> 00:51:16,680
management as this architecture where

1231
00:51:16,680 --> 00:51:20,160
policy decision point is separated

1232
00:51:20,160 --> 00:51:22,319
so I think we're converging not as a

1233
00:51:22,319 --> 00:51:23,780
standard not as

1234
00:51:23,780 --> 00:51:25,800
compliance tunnel but as an

1235
00:51:25,800 --> 00:51:28,680
architectural standard

1236
00:51:28,680 --> 00:51:31,260
um and Architectural concept

1237
00:51:31,260 --> 00:51:33,599
but the mechanisms to the policies code

1238
00:51:33,599 --> 00:51:35,819
is very different and we have and we'll

1239
00:51:35,819 --> 00:51:37,680
continue to have many ways while

1240
00:51:37,680 --> 00:51:39,839
actually doing policy as code and we

1241
00:51:39,839 --> 00:51:41,579
should continue doing this let me give

1242
00:51:41,579 --> 00:51:43,559
you some example examples what we

1243
00:51:43,559 --> 00:51:45,960
mentioned for the deployment of public

1244
00:51:45,960 --> 00:51:48,000
cloud services we can have

1245
00:51:48,000 --> 00:51:51,119
pre-deployment policies code checking

1246
00:51:51,119 --> 00:51:54,180
that what we are deploying aligns with

1247
00:51:54,180 --> 00:51:55,980
our roles for example checking that

1248
00:51:55,980 --> 00:51:57,839
there are no open buckets and all the

1249
00:51:57,839 --> 00:52:00,420
volumes encrypted

1250
00:52:00,420 --> 00:52:03,480
through our pre-deployment code this can

1251
00:52:03,480 --> 00:52:05,819
be done as policies code another example

1252
00:52:05,819 --> 00:52:08,760
of policies code is defined as part of

1253
00:52:08,760 --> 00:52:12,059
cspn tools right so we want to align and

1254
00:52:12,059 --> 00:52:13,819
have exactly the same rules now

1255
00:52:13,819 --> 00:52:16,079
monitoring and alerting if things are

1256
00:52:16,079 --> 00:52:17,940
violated

1257
00:52:17,940 --> 00:52:20,339
but we also have for example policies

1258
00:52:20,339 --> 00:52:22,260
code even as part of network management

1259
00:52:22,260 --> 00:52:24,960
or network segmentation tools even the

1260
00:52:24,960 --> 00:52:26,520
rules how are we doing Network

1261
00:52:26,520 --> 00:52:30,000
segmentation these are also policies and

1262
00:52:30,000 --> 00:52:33,300
we should have them as policies code so

1263
00:52:33,300 --> 00:52:35,880
right now the situation is that and we

1264
00:52:35,880 --> 00:52:38,160
have actually many also ways to do

1265
00:52:38,160 --> 00:52:39,960
policy is called it may be policy in the

1266
00:52:39,960 --> 00:52:42,839
platform policy in the product policy

1267
00:52:42,839 --> 00:52:44,819
organizational policy that we're now

1268
00:52:44,819 --> 00:52:48,059
extracting to offer a so today we have

1269
00:52:48,059 --> 00:52:50,700
many many policies called initiatives we

1270
00:52:50,700 --> 00:52:52,859
should continue progressing with all of

1271
00:52:52,859 --> 00:52:54,660
them we should not be stopping this

1272
00:52:54,660 --> 00:52:57,599
automation effort because there may be

1273
00:52:57,599 --> 00:53:00,720
better ways to consolidate but there is

1274
00:53:00,720 --> 00:53:03,480
a need to have a holistic view on this

1275
00:53:03,480 --> 00:53:06,000
places of policy is called just ensure

1276
00:53:06,000 --> 00:53:07,740
that we're defining the same rules

1277
00:53:07,740 --> 00:53:10,920
across all our environments and places

1278
00:53:10,920 --> 00:53:13,319
so maybe bottom line policies code may

1279
00:53:13,319 --> 00:53:15,900
continue to be distributed although we

1280
00:53:15,900 --> 00:53:18,240
do want to centralize it so we need to

1281
00:53:18,240 --> 00:53:22,640
accept that in spite open inspired

1282
00:53:22,640 --> 00:53:25,260
architectures will still have some

1283
00:53:25,260 --> 00:53:27,839
distribution of policies code so we need

1284
00:53:27,839 --> 00:53:29,700
to continue both trying to centralize

1285
00:53:29,700 --> 00:53:32,040
and then still have this beyond all of

1286
00:53:32,040 --> 00:53:34,619
the decentralized instances and still

1287
00:53:34,619 --> 00:53:36,540
continue to automate so the most

1288
00:53:36,540 --> 00:53:38,220
critical thing is not to stop the

1289
00:53:38,220 --> 00:53:40,319
process automate

1290
00:53:40,319 --> 00:53:42,540
transition from policies that written on

1291
00:53:42,540 --> 00:53:43,319
paper

1292
00:53:43,319 --> 00:53:46,740
to policies written as code and can be

1293
00:53:46,740 --> 00:53:49,319
aggregated and reviewed in this

1294
00:53:49,319 --> 00:53:51,240
automated way

1295
00:53:51,240 --> 00:53:53,780
hopefully this answer the question

1296
00:53:53,780 --> 00:53:56,819
I think it did thank you the last

1297
00:53:56,819 --> 00:53:58,319
question we've got and then we'll wrap

1298
00:53:58,319 --> 00:54:00,720
it up is are there any tools or blogs we

1299
00:54:00,720 --> 00:54:02,819
can follow to find these CSP bugs or

1300
00:54:02,819 --> 00:54:05,700
configs obviously you might want to put

1301
00:54:05,700 --> 00:54:08,040
a URL or two in is do you have social

1302
00:54:08,040 --> 00:54:09,960
media like a Twitter handle that they

1303
00:54:09,960 --> 00:54:11,160
could actually go look at and you can

1304
00:54:11,160 --> 00:54:12,780
paste there

1305
00:54:12,780 --> 00:54:16,079
yes so so first person I'm very careful

1306
00:54:16,079 --> 00:54:19,500
and we'll always need and and the cloud

1307
00:54:19,500 --> 00:54:22,020
provider Cloud CSP typically these are

1308
00:54:22,020 --> 00:54:24,420
published by cspm companies so you can

1309
00:54:24,420 --> 00:54:27,859
follow the blogs of cspm companies

1310
00:54:27,859 --> 00:54:29,880
typically they're publishing because

1311
00:54:29,880 --> 00:54:31,319
they're the standard responsibility

1312
00:54:31,319 --> 00:54:33,540
they're publishing this only once these

1313
00:54:33,540 --> 00:54:36,559
things are resolved

1314
00:54:36,559 --> 00:54:40,079
but looking at Cloud native forums for

1315
00:54:40,079 --> 00:54:41,819
example there is a community called

1316
00:54:41,819 --> 00:54:45,480
Cloud SEC uh through which you can see

1317
00:54:45,480 --> 00:54:47,119
some of these Publications

1318
00:54:47,119 --> 00:54:50,579
and and also just reading the blogs of

1319
00:54:50,579 --> 00:54:53,760
cloud security companies

1320
00:54:53,760 --> 00:54:55,980
they and the most critical thing is

1321
00:54:55,980 --> 00:54:58,559
actually not just to read and say wow

1322
00:54:58,559 --> 00:55:01,920
that's a problem hopefully in most cases

1323
00:55:01,920 --> 00:55:03,240
the cloud providers will continue

1324
00:55:03,240 --> 00:55:05,640
quickly resolving these issues so the

1325
00:55:05,640 --> 00:55:09,680
clients are not impacted by this and

1326
00:55:09,680 --> 00:55:12,240
once these are reported or discovered

1327
00:55:12,240 --> 00:55:14,220
they're doing whatever they can to

1328
00:55:14,220 --> 00:55:16,619
quickly resolve the issues but what is

1329
00:55:16,619 --> 00:55:18,480
critical actually for us to keep in mind

1330
00:55:18,480 --> 00:55:21,839
that it is possible and we need to

1331
00:55:21,839 --> 00:55:23,940
accept this and we need to design our

1332
00:55:23,940 --> 00:55:27,240
architectures in a way that they will be

1333
00:55:27,240 --> 00:55:29,280
able to manage with us and we need to

1334
00:55:29,280 --> 00:55:32,280
design our cyber security processes to

1335
00:55:32,280 --> 00:55:34,800
be able to quickly scope the event and

1336
00:55:34,800 --> 00:55:37,460
respond to it

1337
00:55:37,619 --> 00:55:38,940
okay

1338
00:55:38,940 --> 00:55:40,559
um there is actually one more question

1339
00:55:40,559 --> 00:55:42,300
that just snuck in

1340
00:55:42,300 --> 00:55:44,040
um are there any recommended tool or

1341
00:55:44,040 --> 00:55:47,240
services for Asset Management

1342
00:55:48,119 --> 00:55:51,720
oh that's an excellent point

1343
00:55:51,720 --> 00:55:53,760
because what we've seen there are

1344
00:55:53,760 --> 00:55:55,380
sometimes excellent tools but they will

1345
00:55:55,380 --> 00:55:57,780
be just for one cloud provider because

1346
00:55:57,780 --> 00:55:59,280
you need to speak the cloud native

1347
00:55:59,280 --> 00:56:01,619
language to actually get all the assets

1348
00:56:01,619 --> 00:56:03,900
so there are certain open source seven

1349
00:56:03,900 --> 00:56:06,420
tools for cloud native asset management

1350
00:56:06,420 --> 00:56:09,300
but they will not always have all the

1351
00:56:09,300 --> 00:56:10,859
environments

1352
00:56:10,859 --> 00:56:13,140
so what we've seen organizations today

1353
00:56:13,140 --> 00:56:15,839
sometimes they will use let's say one

1354
00:56:15,839 --> 00:56:18,300
open source tool in one environment but

1355
00:56:18,300 --> 00:56:20,040
then they need to implement something

1356
00:56:20,040 --> 00:56:21,780
similar by themselves in other Cloud

1357
00:56:21,780 --> 00:56:23,059
environments

1358
00:56:23,059 --> 00:56:26,040
and in a way this is also on the agenda

1359
00:56:26,040 --> 00:56:28,800
of CSO Cloud Security Programs

1360
00:56:28,800 --> 00:56:32,579
to check that there are processes doing

1361
00:56:32,579 --> 00:56:34,680
this Asset Management

1362
00:56:34,680 --> 00:56:37,260
actually even just reading the apis from

1363
00:56:37,260 --> 00:56:39,300
the cloud provider

1364
00:56:39,300 --> 00:56:43,319
doing this kind of by themselves doing

1365
00:56:43,319 --> 00:56:46,079
all these API calls mapping what are the

1366
00:56:46,079 --> 00:56:48,420
resources that they have and keeping

1367
00:56:48,420 --> 00:56:51,359
this as a registry on-prem because in

1368
00:56:51,359 --> 00:56:53,339
case of the incident it's very critical

1369
00:56:53,339 --> 00:56:55,980
to know what was imported what is the

1370
00:56:55,980 --> 00:56:58,140
scope of event and without this tools it

1371
00:56:58,140 --> 00:57:00,660
is very difficult to manage so excellent

1372
00:57:00,660 --> 00:57:02,520
question I hope this space will continue

1373
00:57:02,520 --> 00:57:05,520
emerging and once again maybe

1374
00:57:05,520 --> 00:57:08,160
um as part of the WASP organization and

1375
00:57:08,160 --> 00:57:09,480
there will be initial additional

1376
00:57:09,480 --> 00:57:11,280
initiatives to help with Asset

1377
00:57:11,280 --> 00:57:14,240
Management in the cloud

1378
00:57:14,400 --> 00:57:17,240
I have some questions

1379
00:57:17,240 --> 00:57:19,920
exactly the the most critical topics

1380
00:57:19,920 --> 00:57:21,780
where we need additional investment in

1381
00:57:21,780 --> 00:57:24,240
the industry and we need more tools and

1382
00:57:24,240 --> 00:57:26,220
moralistic solutions so both threat

1383
00:57:26,220 --> 00:57:28,760
modeling and asset management

1384
00:57:28,760 --> 00:57:31,280
topics and

1385
00:57:31,280 --> 00:57:35,400
maybe as part of our last we can invest

1386
00:57:35,400 --> 00:57:37,940
more in this

1387
00:57:37,980 --> 00:57:40,440
and with that we are at time thank you

1388
00:57:40,440 --> 00:57:42,780
so much for a great talk and I think we

1389
00:57:42,780 --> 00:57:44,460
had a lot of questions which sort of

1390
00:57:44,460 --> 00:57:46,559
demonstrate the the relevance and

1391
00:57:46,559 --> 00:57:48,059
interests that people have in this

1392
00:57:48,059 --> 00:57:50,520
particular topic and so we do hope to

1393
00:57:50,520 --> 00:57:51,960
see you again at a future conference

1394
00:57:51,960 --> 00:57:53,819
thank you so much for being a keynote at

1395
00:57:53,819 --> 00:57:56,180
ours

1396
00:58:01,440 --> 00:58:04,700
no worries thank you

