1
00:00:04,080 --> 00:00:06,960
hi everyone and welcome

2
00:00:06,960 --> 00:00:09,599
um to the next session on this breaker

3
00:00:09,599 --> 00:00:11,820
track I'm happy to be joined here by

4
00:00:11,820 --> 00:00:14,519
Timo bagel and Stefan fleckenstein and

5
00:00:14,519 --> 00:00:16,079
who are going to talk about that oh wash

6
00:00:16,079 --> 00:00:20,220
project today called project defect Dojo

7
00:00:20,220 --> 00:00:21,180
um so they're going to tell you all

8
00:00:21,180 --> 00:00:22,800
about the project which is an open

9
00:00:22,800 --> 00:00:24,779
source vulnerability management tool

10
00:00:24,779 --> 00:00:27,720
that streamlines testing so good stuff

11
00:00:27,720 --> 00:00:30,119
um so I'm JP I'll be your moderator for

12
00:00:30,119 --> 00:00:31,679
today's session

13
00:00:31,679 --> 00:00:32,820
um we're going to have roughly 20

14
00:00:32,820 --> 00:00:36,360
minutes of talk and 10 minutes of q a so

15
00:00:36,360 --> 00:00:38,820
make sure you use the Q a function in

16
00:00:38,820 --> 00:00:40,980
the Hoover app and to ask all your

17
00:00:40,980 --> 00:00:42,899
questions to the guys

18
00:00:42,899 --> 00:00:44,520
um and yeah we'll answer them towards

19
00:00:44,520 --> 00:00:47,219
the end so guys take it away I'm looking

20
00:00:47,219 --> 00:00:49,260
forward to hearing about this

21
00:00:49,260 --> 00:00:51,920
foreign

22
00:00:54,079 --> 00:00:57,480
you should see my screen now

23
00:00:57,480 --> 00:00:59,760
correct

24
00:00:59,760 --> 00:01:02,520
so we can see you guys

25
00:01:02,520 --> 00:01:06,360
enter screen right not the screen yet

26
00:01:06,360 --> 00:01:09,420
I can see your screen oh well as long as

27
00:01:09,420 --> 00:01:11,400
Stefan can then yeah we should be good

28
00:01:11,400 --> 00:01:13,560
to go all right

29
00:01:13,560 --> 00:01:15,840
thank you yeah Stefan and I would like

30
00:01:15,840 --> 00:01:20,040
to present over defective today

31
00:01:20,040 --> 00:01:23,040
um first of all who we are then I give

32
00:01:23,040 --> 00:01:27,060
you an overview of the agenda I'm Timo

33
00:01:27,060 --> 00:01:30,299
Parker I'm A Cloud security freelancer

34
00:01:30,299 --> 00:01:34,020
I'm living in Hamburg in Germany and I

35
00:01:34,020 --> 00:01:36,720
love open source projects that's why I

36
00:01:36,720 --> 00:01:39,420
present who was defective today how I

37
00:01:39,420 --> 00:01:42,720
use it in my work Stefan

38
00:01:42,720 --> 00:01:43,880
yeah

39
00:01:43,880 --> 00:01:46,560
I'm head of cyber security at the

40
00:01:46,560 --> 00:01:49,020
compound company my one world in Germany

41
00:01:49,020 --> 00:01:52,619
and in my spare time I'm one of the

42
00:01:52,619 --> 00:01:55,680
moderators of the defect Dojo project

43
00:01:55,680 --> 00:01:58,079
which I joined like one and a half years

44
00:01:58,079 --> 00:02:01,500
before so purely a hobby for me but I'll

45
00:02:01,500 --> 00:02:04,259
be that has something to do with my day

46
00:02:04,259 --> 00:02:05,939
job as well

47
00:02:05,939 --> 00:02:08,639
two more

48
00:02:08,639 --> 00:02:11,459
so here you see our agenda for you we

49
00:02:11,459 --> 00:02:13,800
will give you an introduction of what is

50
00:02:13,800 --> 00:02:16,319
the vulnerability management system I

51
00:02:16,319 --> 00:02:18,720
will tell you my use cases so why do I

52
00:02:18,720 --> 00:02:20,580
use defect Georgia what are the tools

53
00:02:20,580 --> 00:02:23,819
I'm using uh to feed findings in defect

54
00:02:23,819 --> 00:02:25,379
Dojo

55
00:02:25,379 --> 00:02:27,660
um then we will explain some some

56
00:02:27,660 --> 00:02:30,300
features which are very important uh

57
00:02:30,300 --> 00:02:33,480
from from from our point of view and

58
00:02:33,480 --> 00:02:36,000
then we will I have a demo because this

59
00:02:36,000 --> 00:02:39,360
is a showcase right so we try to have

60
00:02:39,360 --> 00:02:42,000
most of the time as a demonstration of

61
00:02:42,000 --> 00:02:44,040
the tool itself

62
00:02:44,040 --> 00:02:47,400
so why automatology management system uh

63
00:02:47,400 --> 00:02:49,260
as we heard in the talk before for

64
00:02:49,260 --> 00:02:51,720
example there are kubernetes security

65
00:02:51,720 --> 00:02:54,599
scanners or Docker security scanners and

66
00:02:54,599 --> 00:02:56,640
you also have an application for example

67
00:02:56,640 --> 00:02:58,800
which you want to scan uh on on

68
00:02:58,800 --> 00:03:00,239
different levels for example for

69
00:03:00,239 --> 00:03:02,459
non-vulnerabilities uh or for

70
00:03:02,459 --> 00:03:04,140
availabilities which you introduce in

71
00:03:04,140 --> 00:03:06,000
your code and all these different

72
00:03:06,000 --> 00:03:09,540
scanners produce findings and in case

73
00:03:09,540 --> 00:03:12,140
you you already plan to have multiple

74
00:03:12,140 --> 00:03:14,640
tools you would like to use it would be

75
00:03:14,640 --> 00:03:16,980
good to have one system to consolidate

76
00:03:16,980 --> 00:03:19,620
all the findings that's why you need a

77
00:03:19,620 --> 00:03:21,540
vulnerability management system and

78
00:03:21,540 --> 00:03:23,400
defect Dojo is from my point of view a

79
00:03:23,400 --> 00:03:27,120
very Advanced one you can see here on

80
00:03:27,120 --> 00:03:30,180
the on on the documentation page that

81
00:03:30,180 --> 00:03:32,879
there are a lot of tools already

82
00:03:32,879 --> 00:03:35,459
integrated you see I can scroll like of

83
00:03:35,459 --> 00:03:38,819
endless so you don't have a lot of work

84
00:03:38,819 --> 00:03:41,879
to import these uh different uh findings

85
00:03:41,879 --> 00:03:43,799
from the tools the effect that I have to

86
00:03:43,799 --> 00:03:46,620
say is is kind of a bit dumb it's not

87
00:03:46,620 --> 00:03:49,200
generating these findings it's just

88
00:03:49,200 --> 00:03:50,819
managing the finding that is something

89
00:03:50,819 --> 00:03:53,519
sometimes is misunderstood so defect

90
00:03:53,519 --> 00:03:56,819
Dojo is there to help you to manage the

91
00:03:56,819 --> 00:03:57,959
finding that's why it's a vulnerability

92
00:03:57,959 --> 00:03:59,879
management system it's not a scanning

93
00:03:59,879 --> 00:04:02,220
tool

94
00:04:02,220 --> 00:04:05,299
so how is uh defect Georgia looking

95
00:04:05,299 --> 00:04:10,439
defect to your uh has a structure you

96
00:04:10,439 --> 00:04:12,180
have a product type where you can Define

97
00:04:12,180 --> 00:04:15,060
for example that you have very important

98
00:04:15,060 --> 00:04:16,978
applications and not so critical

99
00:04:16,978 --> 00:04:18,899
applications or you say you have

100
00:04:18,899 --> 00:04:20,579
internet facing applications and

101
00:04:20,579 --> 00:04:22,139
non-internet facing application or

102
00:04:22,139 --> 00:04:24,000
you're divided by Stack front-end and

103
00:04:24,000 --> 00:04:26,160
back-end applications that depends on

104
00:04:26,160 --> 00:04:28,259
how you would like to use it then you

105
00:04:28,259 --> 00:04:30,900
have product the product is a product

106
00:04:30,900 --> 00:04:34,740
which gets tested uh how often it is

107
00:04:34,740 --> 00:04:37,199
corresponding to a GitHub repository so

108
00:04:37,199 --> 00:04:40,199
one application then you have the manage

109
00:04:40,199 --> 00:04:42,720
the engagement so one product can have

110
00:04:42,720 --> 00:04:45,479
multiple engagements I use these

111
00:04:45,479 --> 00:04:47,880
engagements uh to refer to the different

112
00:04:47,880 --> 00:04:51,720
tests then you have the test it's safe

113
00:04:51,720 --> 00:04:55,320
under it uh kind of right now I do a

114
00:04:55,320 --> 00:04:57,120
test and in five minutes I do a test and

115
00:04:57,120 --> 00:05:00,180
so so on each task can have multiple

116
00:05:00,180 --> 00:05:03,540
findings and depending on how you scan

117
00:05:03,540 --> 00:05:05,340
you have endpoints or not so when you

118
00:05:05,340 --> 00:05:07,139
use a dynamic application security

119
00:05:07,139 --> 00:05:09,900
scanner like overstep you will have end

120
00:05:09,900 --> 00:05:11,520
points

121
00:05:11,520 --> 00:05:14,340
um in case you use loan vulnerability

122
00:05:14,340 --> 00:05:16,500
scanning to a software composition and

123
00:05:16,500 --> 00:05:19,500
analysis tool then you will not have

124
00:05:19,500 --> 00:05:22,280
endpoints

125
00:05:22,380 --> 00:05:25,979
so when you use Defector like I do it in

126
00:05:25,979 --> 00:05:29,039
the in in an automated way

127
00:05:29,039 --> 00:05:31,560
um a very important feature is the

128
00:05:31,560 --> 00:05:34,919
deduplication because you scan you scan

129
00:05:34,919 --> 00:05:39,419
yesterday then a developer analyzed the

130
00:05:39,419 --> 00:05:42,060
finding and maybe the developer figured

131
00:05:42,060 --> 00:05:45,360
out this is for its positive or there is

132
00:05:45,360 --> 00:05:47,699
no patch available that's why I want to

133
00:05:47,699 --> 00:05:50,400
accept it for now and in case the

134
00:05:50,400 --> 00:05:52,979
developer made these decisions

135
00:05:52,979 --> 00:05:55,139
it's important that

136
00:05:55,139 --> 00:05:57,539
um the notification is not there on the

137
00:05:57,539 --> 00:06:00,479
next day again so that's when when uh

138
00:06:00,479 --> 00:06:03,840
these duplication comes into picture let

139
00:06:03,840 --> 00:06:05,699
us start with the top picture with the

140
00:06:05,699 --> 00:06:07,500
picture on the top you see the product

141
00:06:07,500 --> 00:06:09,600
which has the engagement which has a

142
00:06:09,600 --> 00:06:11,580
test and then you see here there is a

143
00:06:11,580 --> 00:06:13,860
finding a this is the original finding

144
00:06:13,860 --> 00:06:16,919
and defining B then you on the next day

145
00:06:16,919 --> 00:06:19,500
or after a minute you perform another

146
00:06:19,500 --> 00:06:23,220
test and then defect Dojo identifies I

147
00:06:23,220 --> 00:06:26,280
had this finding in the test before so I

148
00:06:26,280 --> 00:06:29,539
create a real reference that is a

149
00:06:29,539 --> 00:06:31,740
deduplication it deduplicates the

150
00:06:31,740 --> 00:06:34,440
findings they say I saw this one here

151
00:06:34,440 --> 00:06:36,300
beforehand and there is another Finding

152
00:06:36,300 --> 00:06:38,280
which wasn't there before and then this

153
00:06:38,280 --> 00:06:41,060
is a new active finding

154
00:06:41,060 --> 00:06:44,759
and uh now we come to to a more specific

155
00:06:44,759 --> 00:06:46,380
feature which is the lubrication on

156
00:06:46,380 --> 00:06:49,020
product level that means that Defector

157
00:06:49,020 --> 00:06:51,840
will look uh for the

158
00:06:51,840 --> 00:06:53,639
um if if the finding is somewhere in

159
00:06:53,639 --> 00:06:55,740
that product already that you can see

160
00:06:55,740 --> 00:06:56,759
here on the right you have another

161
00:06:56,759 --> 00:06:59,759
engagement uh then a test and then a

162
00:06:59,759 --> 00:07:02,639
finding and when you do it on products

163
00:07:02,639 --> 00:07:04,620
when you do it on engagement level you

164
00:07:04,620 --> 00:07:06,780
see it on the bottom here

165
00:07:06,780 --> 00:07:09,720
um where you have the the division line

166
00:07:09,720 --> 00:07:12,539
here so it Defector only locks in the

167
00:07:12,539 --> 00:07:14,280
same engagement and not in other

168
00:07:14,280 --> 00:07:18,020
engagement for that finding

169
00:07:20,460 --> 00:07:23,759
um I use different tools I use secure

170
00:07:23,759 --> 00:07:26,699
code box and the cluster image scanner

171
00:07:26,699 --> 00:07:29,099
both are actually tools with orchestrate

172
00:07:29,099 --> 00:07:31,919
other scanning tools so that I can feed

173
00:07:31,919 --> 00:07:34,259
the results the defect Dojo

174
00:07:34,259 --> 00:07:37,800
um I very briefly explain these tools

175
00:07:37,800 --> 00:07:40,800
um so this is secure code box uh where

176
00:07:40,800 --> 00:07:42,180
you

177
00:07:42,180 --> 00:07:43,919
um which you deploy in the kubernetes

178
00:07:43,919 --> 00:07:46,440
cluster and in the kubernetes cluster

179
00:07:46,440 --> 00:07:50,220
when you deploy a new service uh the

180
00:07:50,220 --> 00:07:52,259
auto Discovery we recognize hey there is

181
00:07:52,259 --> 00:07:54,660
a new service deployed so I create a

182
00:07:54,660 --> 00:07:59,039
scan for it in over step instance for it

183
00:07:59,039 --> 00:08:02,880
then the over zap instance will be

184
00:08:02,880 --> 00:08:05,580
configured and started to go against the

185
00:08:05,580 --> 00:08:07,919
kubernetes uh service which has been

186
00:08:07,919 --> 00:08:10,199
deployed you will identify findings and

187
00:08:10,199 --> 00:08:11,819
these are getting uploaded to defect

188
00:08:11,819 --> 00:08:14,160
dojo and findings which are not handled

189
00:08:14,160 --> 00:08:16,860
are getting

190
00:08:16,860 --> 00:08:20,340
um uh actually are

191
00:08:20,340 --> 00:08:23,460
handed by sending out notifications for

192
00:08:23,460 --> 00:08:27,060
example via slack or rocketjet

193
00:08:27,060 --> 00:08:29,879
the cluster image scanner works a bit

194
00:08:29,879 --> 00:08:33,299
different it's also deployed in a

195
00:08:33,299 --> 00:08:36,360
cluster uh in each cluster you have then

196
00:08:36,360 --> 00:08:38,159
you have a collector which identifies

197
00:08:38,159 --> 00:08:41,659
which images are running in that cluster

198
00:08:41,659 --> 00:08:44,339
then that is pushed to a GitHub

199
00:08:44,339 --> 00:08:46,620
repository a git repository and then the

200
00:08:46,620 --> 00:08:48,480
orchestrator picks it up and runs

201
00:08:48,480 --> 00:08:50,339
multiple scans for example the

202
00:08:50,339 --> 00:08:52,980
dependency check to identify normal

203
00:08:52,980 --> 00:08:55,080
abilities and also other safe mate

204
00:08:55,080 --> 00:08:57,720
checks and then

205
00:08:57,720 --> 00:09:00,240
um they are getting uploaded to Defector

206
00:09:00,240 --> 00:09:02,160
the defect Dojo identifies these are the

207
00:09:02,160 --> 00:09:04,440
handle the the findings which got

208
00:09:04,440 --> 00:09:05,700
handled already and these are the

209
00:09:05,700 --> 00:09:07,140
findings which are unhandled and the

210
00:09:07,140 --> 00:09:09,920
unhandling unhanded findings are getting

211
00:09:09,920 --> 00:09:13,200
sent to the to the developers or

212
00:09:13,200 --> 00:09:15,980
operations people

213
00:09:17,660 --> 00:09:20,940
has a lot of Enterprise features for

214
00:09:20,940 --> 00:09:23,399
example the API

215
00:09:23,399 --> 00:09:26,640
um which is very powerful you can

216
00:09:26,640 --> 00:09:28,500
connect the gains and get all the

217
00:09:28,500 --> 00:09:29,820
information out to create your own

218
00:09:29,820 --> 00:09:32,339
statistics for example then you have an

219
00:09:32,339 --> 00:09:35,760
Azure ID authentication you have the

220
00:09:35,760 --> 00:09:39,120
ability to perform authorization

221
00:09:39,120 --> 00:09:42,360
um on product level so you can do it

222
00:09:42,360 --> 00:09:45,240
very fine granularly then you are able

223
00:09:45,240 --> 00:09:48,660
to import Aid groups so that you can

224
00:09:48,660 --> 00:09:52,140
make use of that are very a fine

225
00:09:52,140 --> 00:09:54,600
granular authorization system and you

226
00:09:54,600 --> 00:09:57,600
can easily deploy defect dojo for

227
00:09:57,600 --> 00:09:59,220
example this home

228
00:09:59,220 --> 00:10:04,080
this uh is the OPI open API definition

229
00:10:04,080 --> 00:10:07,200
um so it's it's done via Swagger and

230
00:10:07,200 --> 00:10:09,120
here you see that you can browse through

231
00:10:09,120 --> 00:10:12,480
all the different uh possible endpoints

232
00:10:12,480 --> 00:10:15,839
you have for example or the engagements

233
00:10:15,839 --> 00:10:17,820
and you have a key where you can

234
00:10:17,820 --> 00:10:20,160
regenerate the key whenever you feel

235
00:10:20,160 --> 00:10:24,120
like uh through the API I personally use

236
00:10:24,120 --> 00:10:26,279
it to generate response but to

237
00:10:26,279 --> 00:10:28,800
statistics statistics per team so it's

238
00:10:28,800 --> 00:10:31,320
important to know are the teams reacting

239
00:10:31,320 --> 00:10:34,800
in the uh in the way I want to for

240
00:10:34,800 --> 00:10:36,420
example the policy might state that

241
00:10:36,420 --> 00:10:38,279
critical findings

242
00:10:38,279 --> 00:10:42,360
um needs to be tackled within a day or

243
00:10:42,360 --> 00:10:44,700
two so you can generate statistics and

244
00:10:44,700 --> 00:10:46,380
see if that matches or not and then

245
00:10:46,380 --> 00:10:50,700
maybe uh adjust the policy

246
00:10:50,700 --> 00:10:52,860
um or help the team store to to to

247
00:10:52,860 --> 00:10:56,519
actually uh comply to the policy or what

248
00:10:56,519 --> 00:10:59,279
I also do is uh the generation of

249
00:10:59,279 --> 00:11:01,380
container image lifetime statistics out

250
00:11:01,380 --> 00:11:03,060
of defect usual because I have this

251
00:11:03,060 --> 00:11:07,019
information and defect Gojo per team

252
00:11:07,019 --> 00:11:08,160
yes

253
00:11:08,160 --> 00:11:13,339
now I would like to hand over to Stefan

254
00:11:15,000 --> 00:11:19,279
yeah I will just share my screen

255
00:11:21,680 --> 00:11:24,600
that you see how Dojo defect Dojo

256
00:11:24,600 --> 00:11:26,640
actually looks like you should now see

257
00:11:26,640 --> 00:11:30,300
my screen with the defect Dojo dashboard

258
00:11:30,300 --> 00:11:32,940
yes yeah great

259
00:11:32,940 --> 00:11:35,279
um yeah so two more shoulders how data

260
00:11:35,279 --> 00:11:37,980
can come into secure um into defect Dojo

261
00:11:37,980 --> 00:11:40,560
but now let's have a look what we can do

262
00:11:40,560 --> 00:11:43,260
with the data yeah so when we started we

263
00:11:43,260 --> 00:11:45,480
see the dashboard we have some

264
00:11:45,480 --> 00:11:48,000
high level metrics here on the top how

265
00:11:48,000 --> 00:11:50,220
many engagements we have how many

266
00:11:50,220 --> 00:11:52,980
finding came in the last seven days how

267
00:11:52,980 --> 00:11:55,160
many have been closed

268
00:11:55,160 --> 00:11:57,660
accepted stuff like this and on the left

269
00:11:57,660 --> 00:11:59,339
we have the main menu

270
00:11:59,339 --> 00:12:02,519
so we can work in two ways basically

271
00:12:02,519 --> 00:12:04,980
with epic Dodge so we can

272
00:12:04,980 --> 00:12:07,740
look at single products we say we have

273
00:12:07,740 --> 00:12:09,600
one product and we want to know about

274
00:12:09,600 --> 00:12:11,940
this how the security status how much

275
00:12:11,940 --> 00:12:14,880
vulnerabilities we have or we have the

276
00:12:14,880 --> 00:12:17,519
possibility to work on a more holistic

277
00:12:17,519 --> 00:12:20,399
view that we see all the findings that

278
00:12:20,399 --> 00:12:22,500
we have in the system this might be if

279
00:12:22,500 --> 00:12:26,160
you are the ciso of a company you don't

280
00:12:26,160 --> 00:12:28,800
care for single projects but you won't

281
00:12:28,800 --> 00:12:31,560
have an overall look at things you might

282
00:12:31,560 --> 00:12:34,860
use more these things as a product owner

283
00:12:34,860 --> 00:12:38,100
you might look at certain products and

284
00:12:38,100 --> 00:12:41,100
then you can have with the product and

285
00:12:41,100 --> 00:12:43,560
let's have a look for example at the

286
00:12:43,560 --> 00:12:46,380
Juice Shop there was juice shop that has

287
00:12:46,380 --> 00:12:49,440
been checked with um over sub and some

288
00:12:49,440 --> 00:12:52,800
other tools so step with

289
00:12:52,800 --> 00:12:55,019
um how team will show that before with

290
00:12:55,019 --> 00:12:57,240
unsecure code books that's running in

291
00:12:57,240 --> 00:13:00,200
the background on the live

292
00:13:00,200 --> 00:13:03,540
environment and pushes data into defect

293
00:13:03,540 --> 00:13:05,519
dojo

294
00:13:05,519 --> 00:13:07,680
um so I'm going to come in here we see

295
00:13:07,680 --> 00:13:10,500
some high level metrics for this product

296
00:13:10,500 --> 00:13:12,660
now we see we have

297
00:13:12,660 --> 00:13:13,260
um

298
00:13:13,260 --> 00:13:16,620
total 60 findings six of them are

299
00:13:16,620 --> 00:13:19,500
critical and some more data

300
00:13:19,500 --> 00:13:21,899
what else do we have we have components

301
00:13:21,899 --> 00:13:25,620
if we use software composition analysis

302
00:13:25,620 --> 00:13:29,160
like dependency check yarn ordered other

303
00:13:29,160 --> 00:13:32,820
tools it records the components that are

304
00:13:32,820 --> 00:13:35,880
in there that only the vulnerable

305
00:13:35,880 --> 00:13:38,700
components not it's not the asset

306
00:13:38,700 --> 00:13:41,160
management tool or stuff like this but

307
00:13:41,160 --> 00:13:44,040
all the components that have

308
00:13:44,040 --> 00:13:47,339
um vulnerabilities in general findings

309
00:13:47,339 --> 00:13:50,339
next we see metrics so that we have an

310
00:13:50,339 --> 00:13:55,079
overview we see the 60 findings here

311
00:13:55,079 --> 00:13:58,980
um outbreak of the stability and what we

312
00:13:58,980 --> 00:14:01,620
see has a different status we have open

313
00:14:01,620 --> 00:14:04,260
findings we might we none of them are

314
00:14:04,260 --> 00:14:06,420
verified at the moment none of them are

315
00:14:06,420 --> 00:14:10,500
risks in fact that no false positives no

316
00:14:10,500 --> 00:14:12,839
auto scope that we see we have a status

317
00:14:12,839 --> 00:14:15,060
model that is really important when we

318
00:14:15,060 --> 00:14:17,399
assert findings

319
00:14:17,399 --> 00:14:18,019
um

320
00:14:18,019 --> 00:14:21,240
that we do things only one so with the

321
00:14:21,240 --> 00:14:24,060
deduplication algorithm that Timo showed

322
00:14:24,060 --> 00:14:27,060
us before if a finding comes in I asset

323
00:14:27,060 --> 00:14:29,700
say or this is an open uh this is called

324
00:14:29,700 --> 00:14:31,980
positive for example or two other things

325
00:14:31,980 --> 00:14:34,200
that I will show you in a second when we

326
00:14:34,200 --> 00:14:37,380
see it here it stays like this if you do

327
00:14:37,380 --> 00:14:40,740
another import the next day the original

328
00:14:40,740 --> 00:14:42,779
decision will still be there it will not

329
00:14:42,779 --> 00:14:45,740
be reopened again

330
00:14:46,320 --> 00:14:48,720
we see the engagement

331
00:14:48,720 --> 00:14:50,579
um like different kind of groups of

332
00:14:50,579 --> 00:14:53,639
tests like here we have a manual orders

333
00:14:53,639 --> 00:14:56,880
engagement with some manual things use

334
00:14:56,880 --> 00:14:59,699
terms and your own audit or we might

335
00:14:59,699 --> 00:15:01,800
have a pen test where we beat the data

336
00:15:01,800 --> 00:15:05,479
from or um

337
00:15:07,100 --> 00:15:10,740
the automata tests like from the CI CD

338
00:15:10,740 --> 00:15:12,420
environment

339
00:15:12,420 --> 00:15:15,300
um like this app scan that Timo showed

340
00:15:15,300 --> 00:15:17,459
us before and we have three different

341
00:15:17,459 --> 00:15:19,920
possibilities basically to get data into

342
00:15:19,920 --> 00:15:23,160
effect Dojo it's push

343
00:15:23,160 --> 00:15:26,880
like secure code box that pushes data

344
00:15:26,880 --> 00:15:28,740
into

345
00:15:28,740 --> 00:15:31,440
um the effect Dojo via the API of effect

346
00:15:31,440 --> 00:15:34,980
dojo we can do things manually we can

347
00:15:34,980 --> 00:15:38,220
lots of tools produce file station files

348
00:15:38,220 --> 00:15:40,560
XML files or stuff that we can import

349
00:15:40,560 --> 00:15:43,019
into defect Dojo

350
00:15:43,019 --> 00:15:45,480
um either manually via the user

351
00:15:45,480 --> 00:15:48,000
interface or via the API again this is

352
00:15:48,000 --> 00:15:50,399
typically how it works in cicd

353
00:15:50,399 --> 00:15:51,779
environments where you have your

354
00:15:51,779 --> 00:15:53,820
scanners running in the night or with

355
00:15:53,820 --> 00:15:56,120
every commit and then you import it

356
00:15:56,120 --> 00:15:58,680
automatically or you can do it via the

357
00:15:58,680 --> 00:16:01,320
interface manually and there are some

358
00:16:01,320 --> 00:16:04,440
tools where the factors the API of the

359
00:16:04,440 --> 00:16:07,139
tool like sonar Cube to get the data so

360
00:16:07,139 --> 00:16:10,320
we have all kinds of Integrations yeah

361
00:16:10,320 --> 00:16:12,060
okay then

362
00:16:12,060 --> 00:16:14,519
um most important are the findings and

363
00:16:14,519 --> 00:16:17,519
when I came into the project I thought

364
00:16:17,519 --> 00:16:19,079
why is it findings and not

365
00:16:19,079 --> 00:16:20,820
vulnerabilities it's a vulnerability

366
00:16:20,820 --> 00:16:22,920
management tool so where do I find the

367
00:16:22,920 --> 00:16:26,100
vulnerabilities but when stuff comes in

368
00:16:26,100 --> 00:16:28,440
from the scanners we don't know are

369
00:16:28,440 --> 00:16:30,779
these really vulnerabilities or are

370
00:16:30,779 --> 00:16:33,120
these just things to scan around we have

371
00:16:33,120 --> 00:16:35,339
to accept it and we have to deal with it

372
00:16:35,339 --> 00:16:38,579
and this is I think what defect Ojo is

373
00:16:38,579 --> 00:16:41,880
basically for so and just we find in the

374
00:16:41,880 --> 00:16:44,279
status model so we could hear for

375
00:16:44,279 --> 00:16:45,839
example

376
00:16:45,839 --> 00:16:48,360
see these are all our open findings they

377
00:16:48,360 --> 00:16:50,759
are there scanners have reported them

378
00:16:50,759 --> 00:16:54,000
and in the moment they are there we see

379
00:16:54,000 --> 00:16:57,620
them here listed

380
00:16:58,079 --> 00:17:00,240
and we can do different things with it

381
00:17:00,240 --> 00:17:02,279
now so first of all we might have users

382
00:17:02,279 --> 00:17:04,859
who are not or stakeholders who are not

383
00:17:04,859 --> 00:17:07,140
users of the effect also like maybe a

384
00:17:07,140 --> 00:17:09,179
product owner.net access to the system

385
00:17:09,179 --> 00:17:12,900
or for management so we can have a

386
00:17:12,900 --> 00:17:14,880
report like a nice

387
00:17:14,880 --> 00:17:16,280
um

388
00:17:16,280 --> 00:17:19,380
HTML report that we could print as a PDF

389
00:17:19,380 --> 00:17:23,099
and send it to someone or if you want to

390
00:17:23,099 --> 00:17:25,079
do some other things outside with it we

391
00:17:25,079 --> 00:17:27,480
have CSV or Excel exports of the whole

392
00:17:27,480 --> 00:17:28,559
list

393
00:17:28,559 --> 00:17:31,020
um we can filter the list can for

394
00:17:31,020 --> 00:17:33,720
example say we don't want to see

395
00:17:33,720 --> 00:17:37,440
everything but only

396
00:17:37,440 --> 00:17:39,299
intercept scan

397
00:17:39,299 --> 00:17:42,960
tests and then we apply the filter and

398
00:17:42,960 --> 00:17:46,140
we have a much smaller and more usable

399
00:17:46,140 --> 00:17:49,039
list so then we can go into a

400
00:17:49,039 --> 00:17:52,440
vulnerability itself and see lots of

401
00:17:52,440 --> 00:17:54,780
data so we have lots of data it's a huge

402
00:17:54,780 --> 00:17:56,760
data model that's behind the

403
00:17:56,760 --> 00:17:59,940
vulnerability a finding and it's as

404
00:17:59,940 --> 00:18:03,000
populated by the scanner so different

405
00:18:03,000 --> 00:18:05,220
scanners have different information and

406
00:18:05,220 --> 00:18:06,960
you will find all the information we can

407
00:18:06,960 --> 00:18:08,460
gather

408
00:18:08,460 --> 00:18:11,160
all right here in the system so here for

409
00:18:11,160 --> 00:18:14,520
the step scan we have uh title severity

410
00:18:14,520 --> 00:18:16,820
stuff like this we have the description

411
00:18:16,820 --> 00:18:20,400
mitigation we know the connection to the

412
00:18:20,400 --> 00:18:23,400
end point here for example if we go in

413
00:18:23,400 --> 00:18:26,419
another Finding

414
00:18:28,140 --> 00:18:31,020
coming from your audit we see the

415
00:18:31,020 --> 00:18:33,360
component for example we see this

416
00:18:33,360 --> 00:18:35,460
description again we have a

417
00:18:35,460 --> 00:18:38,220
vulnerability ID we can quickly check on

418
00:18:38,220 --> 00:18:40,919
the cve database to get some more

419
00:18:40,919 --> 00:18:43,100
information

420
00:18:45,480 --> 00:18:48,620
um another example would be

421
00:18:48,620 --> 00:18:52,160
find it something coming transcript

422
00:18:52,160 --> 00:18:54,419
where we

423
00:18:54,419 --> 00:18:56,960
see the location in the files of tempra

424
00:18:56,960 --> 00:19:01,380
is as a sus tool is called a

425
00:19:01,380 --> 00:19:04,260
vulnerability in a snippet and we can

426
00:19:04,260 --> 00:19:05,580
for example

427
00:19:05,580 --> 00:19:10,260
then go directly to the GitHub

428
00:19:10,260 --> 00:19:13,799
project here and see the source code and

429
00:19:13,799 --> 00:19:17,360
then start to assess it what kind of

430
00:19:17,360 --> 00:19:19,500
vulnerabilities that should we care

431
00:19:19,500 --> 00:19:22,340
about it or not

432
00:19:22,860 --> 00:19:24,900
um so we get a good look of all the

433
00:19:24,900 --> 00:19:25,760
information

434
00:19:25,760 --> 00:19:29,460
out of the scanner here and then we can

435
00:19:29,460 --> 00:19:32,640
start to work on it as well for example

436
00:19:32,640 --> 00:19:37,160
let's take something of

437
00:19:40,919 --> 00:19:42,780
so I can

438
00:19:42,780 --> 00:19:46,919
and say for example we have

439
00:19:46,919 --> 00:19:50,340
an HTTP site here so the stepscanner has

440
00:19:50,340 --> 00:19:51,539
found

441
00:19:51,539 --> 00:19:55,140
this is not only or not available via

442
00:19:55,140 --> 00:19:57,900
https inside but it's

443
00:19:57,900 --> 00:19:58,559
um

444
00:19:58,559 --> 00:20:00,840
HTTP which we don't want to have

445
00:20:00,840 --> 00:20:03,240
typically but for example here we could

446
00:20:03,240 --> 00:20:05,160
say well

447
00:20:05,160 --> 00:20:06,600
um

448
00:20:06,600 --> 00:20:09,480
it's not ideal but we want to do a risk

449
00:20:09,480 --> 00:20:12,179
acceptance for the moment so we say we

450
00:20:12,179 --> 00:20:15,240
have to accept it and because there's a

451
00:20:15,240 --> 00:20:17,340
we make a recommendation as the security

452
00:20:17,340 --> 00:20:22,220
team we say well it's not perfect

453
00:20:24,539 --> 00:20:27,140
foreign

454
00:20:28,700 --> 00:20:32,220
which only can do HTTP so we want to

455
00:20:32,220 --> 00:20:34,020
accept it for the moment and then

456
00:20:34,020 --> 00:20:36,480
someone else could say Yes We Really

457
00:20:36,480 --> 00:20:38,340
accept it but

458
00:20:38,340 --> 00:20:42,139
it expires like

459
00:20:42,299 --> 00:20:44,340
beginning of September then we want to

460
00:20:44,340 --> 00:20:48,678
reassess the whole thing and save it

461
00:20:49,200 --> 00:20:51,240
and then we will see is now has the

462
00:20:51,240 --> 00:20:53,760
status in African active and risk

463
00:20:53,760 --> 00:20:56,520
accepted and if we go for example on the

464
00:20:56,520 --> 00:20:59,039
metrics page we'll see

465
00:20:59,039 --> 00:21:02,179
we have one in negative with the story

466
00:21:02,179 --> 00:21:05,340
finding and so we can of course what

467
00:21:05,340 --> 00:21:09,360
index assess them we cannot do it one by

468
00:21:09,360 --> 00:21:12,480
one or we could use say

469
00:21:12,480 --> 00:21:15,900
um I have several ones and say okay I

470
00:21:15,900 --> 00:21:18,419
have as best these four

471
00:21:18,419 --> 00:21:22,799
to a bike edit say well these uh let us

472
00:21:22,799 --> 00:21:25,260
say out of scope for a reason

473
00:21:25,260 --> 00:21:27,379
um

474
00:21:28,400 --> 00:21:31,500
and not active again then they are out

475
00:21:31,500 --> 00:21:34,380
of the list now here we see 55 are still

476
00:21:34,380 --> 00:21:38,780
open any metrics we see um

477
00:21:38,940 --> 00:21:41,159
we have four out of school findings and

478
00:21:41,159 --> 00:21:43,980
so we can assess all our vulnerabilities

479
00:21:43,980 --> 00:21:46,740
and then get a really good view

480
00:21:46,740 --> 00:21:48,659
all the time

481
00:21:48,659 --> 00:21:51,299
um about the status of our systems or

482
00:21:51,299 --> 00:21:53,820
the status of our whole company

483
00:21:53,820 --> 00:21:54,600
um

484
00:21:54,600 --> 00:21:56,640
just security status or for

485
00:21:56,640 --> 00:21:58,500
vulnerabilities

486
00:21:58,500 --> 00:22:01,380
and have the possibilities to report it

487
00:22:01,380 --> 00:22:05,100
to get more metrics out of it and just

488
00:22:05,100 --> 00:22:07,080
really work with it and with the API

489
00:22:07,080 --> 00:22:09,299
have lots of other possibilities to

490
00:22:09,299 --> 00:22:12,960
integrate it with other systems

491
00:22:12,960 --> 00:22:16,620
um so I think we said we have 20 to 25

492
00:22:16,620 --> 00:22:19,440
minutes I would be in between that right

493
00:22:19,440 --> 00:22:21,299
now

494
00:22:21,299 --> 00:22:24,980
um Jenna are there any questions

495
00:22:26,220 --> 00:22:27,840
so no

496
00:22:27,840 --> 00:22:30,299
um questions in the chat at present but

497
00:22:30,299 --> 00:22:31,860
um one for me that how can we find out

498
00:22:31,860 --> 00:22:33,659
more about this project do you guys have

499
00:22:33,659 --> 00:22:36,659
a project page or anything like that

500
00:22:36,659 --> 00:22:38,220
of course we have

501
00:22:38,220 --> 00:22:39,600
um

502
00:22:39,600 --> 00:22:44,120
don't you just Google defect dojo

503
00:22:45,000 --> 00:22:47,820
and then you will find the GitHub link

504
00:22:47,820 --> 00:22:49,559
so it's on GitHub

505
00:22:49,559 --> 00:22:51,299
um defect dojo

506
00:22:51,299 --> 00:22:53,150
where you find all the information

507
00:22:53,150 --> 00:22:54,679
[Music]

508
00:22:54,679 --> 00:22:58,940
the source code and links to the

509
00:22:58,940 --> 00:23:02,880
documentation as well for example this

510
00:23:02,880 --> 00:23:05,220
really good documentation of the whole

511
00:23:05,220 --> 00:23:08,039
system how you use it

512
00:23:08,039 --> 00:23:11,520
um how you contribute to it and other

513
00:23:11,520 --> 00:23:14,460
things and for example the long list is

514
00:23:14,460 --> 00:23:18,000
it importing for example

515
00:23:18,000 --> 00:23:19,679
um

516
00:23:19,679 --> 00:23:21,480
and it's supposed to

517
00:23:21,480 --> 00:23:24,179
supported reports I think

518
00:23:24,179 --> 00:23:25,380
that's it

519
00:23:25,380 --> 00:23:29,760
directly under importing oh yeah

520
00:23:29,760 --> 00:23:32,220
um so where you here see the long list

521
00:23:32,220 --> 00:23:35,220
of planners here on the right that we

522
00:23:35,220 --> 00:23:37,380
actually support and it's really long

523
00:23:37,380 --> 00:23:39,659
and

524
00:23:39,659 --> 00:23:41,460
there sometimes are problems with the

525
00:23:41,460 --> 00:23:43,980
scanners because what we see is a lot

526
00:23:43,980 --> 00:23:46,260
all these scanners lots of Open Source

527
00:23:46,260 --> 00:23:48,120
Products or commercial products and they

528
00:23:48,120 --> 00:23:50,159
change their data from time to time then

529
00:23:50,159 --> 00:23:53,100
there's a new version 3.0 and now it's a

530
00:23:53,100 --> 00:23:55,200
different Json and stuff might not

531
00:23:55,200 --> 00:23:57,659
always work or there are new features

532
00:23:57,659 --> 00:24:02,220
and but then write a bug report

533
00:24:02,220 --> 00:24:03,840
um

534
00:24:03,840 --> 00:24:06,320
foreign

535
00:24:07,740 --> 00:24:10,880
you're muted

536
00:24:15,120 --> 00:24:16,500
all right

537
00:24:16,500 --> 00:24:18,419
um yeah you can write a bug report on

538
00:24:18,419 --> 00:24:21,539
our issues page and it will be

539
00:24:21,539 --> 00:24:24,840
um dealt with or if you're brave you um

540
00:24:24,840 --> 00:24:25,799
write

541
00:24:25,799 --> 00:24:28,020
the patch yourself this is how I started

542
00:24:28,020 --> 00:24:30,120
one and a half years ago who didn't do

543
00:24:30,120 --> 00:24:33,419
any python also and said well I need a

544
00:24:33,419 --> 00:24:35,039
scanner and I build it I will learn

545
00:24:35,039 --> 00:24:36,299
twice now

546
00:24:36,299 --> 00:24:40,080
and the team will help you in every way

547
00:24:40,080 --> 00:24:42,900
and the last thing maybe so every month

548
00:24:42,900 --> 00:24:45,659
we have a release so there's a lot of

549
00:24:45,659 --> 00:24:48,120
releases so every month currently it's

550
00:24:48,120 --> 00:24:50,640
2.11 since yesterday and there's a

551
00:24:50,640 --> 00:24:51,600
release

552
00:24:51,600 --> 00:24:53,100
the first

553
00:24:53,100 --> 00:24:55,260
um Tuesday of every month so it's a very

554
00:24:55,260 --> 00:24:58,080
very well maintained project I do love

555
00:24:58,080 --> 00:25:01,260
your documentation I have to say Kudos

556
00:25:01,260 --> 00:25:03,059
so you do actually have a question

557
00:25:03,059 --> 00:25:06,059
that's just come in from Max what is the

558
00:25:06,059 --> 00:25:08,340
best way to deploy and install defect

559
00:25:08,340 --> 00:25:10,980
Dojo on an Enterprise environment for

560
00:25:10,980 --> 00:25:14,460
example AWS ECS and versus run it in an

561
00:25:14,460 --> 00:25:16,679
ec2 instance where can we find

562
00:25:16,679 --> 00:25:19,799
documentation about it

563
00:25:19,799 --> 00:25:24,440
so I would recommend using kubernetes

564
00:25:24,740 --> 00:25:28,039
where we have a document so we support

565
00:25:28,039 --> 00:25:32,220
kubernetes we've got Docker compose and

566
00:25:32,220 --> 00:25:34,919
there's with both Dojo manual

567
00:25:34,919 --> 00:25:37,679
installation if you just have a machine

568
00:25:37,679 --> 00:25:41,640
somewhere running a Linux server

569
00:25:41,640 --> 00:25:45,299
um but um I would go for kubernetes and

570
00:25:45,299 --> 00:25:49,500
just to find some documentation about it

571
00:25:49,500 --> 00:25:51,059
um

572
00:25:51,059 --> 00:25:53,580
don't wrap

573
00:25:53,580 --> 00:25:56,639
um installation

574
00:26:02,640 --> 00:26:04,860
how to deal on kubernetes so this is

575
00:26:04,860 --> 00:26:06,720
what I'm running for example in my

576
00:26:06,720 --> 00:26:08,900
company

577
00:26:09,059 --> 00:26:10,440
awesome I hope that answers your

578
00:26:10,440 --> 00:26:11,700
question Max

579
00:26:11,700 --> 00:26:13,320
um and another one here from Francois

580
00:26:13,320 --> 00:26:16,140
Eric is there an issue an initiative to

581
00:26:16,140 --> 00:26:19,559
standardize tools output

582
00:26:19,559 --> 00:26:22,760
yes there are

583
00:26:24,980 --> 00:26:27,960
that some tools use now

584
00:26:27,960 --> 00:26:30,539
um throughout for their output and this

585
00:26:30,539 --> 00:26:32,940
helps us for example because then we

586
00:26:32,940 --> 00:26:35,640
don't have to write a parcel for lots of

587
00:26:35,640 --> 00:26:37,740
scanners maybe in the future we will

588
00:26:37,740 --> 00:26:40,880
just support us RF output which is for

589
00:26:40,880 --> 00:26:44,760
stuff like zest tools or I think SCA I'm

590
00:26:44,760 --> 00:26:46,440
not sure how good it would work for

591
00:26:46,440 --> 00:26:49,799
dynamic tools but without standard is

592
00:26:49,799 --> 00:26:52,799
there and what we see is

593
00:26:52,799 --> 00:26:53,460
um

594
00:26:53,460 --> 00:26:55,620
DS forms

595
00:26:55,620 --> 00:26:58,020
fill of materials that can be enhanced

596
00:26:58,020 --> 00:27:00,659
with vulnerabilities that come as well

597
00:27:00,659 --> 00:27:01,860
so

598
00:27:01,860 --> 00:27:04,740
as an input partially supported by

599
00:27:04,740 --> 00:27:07,140
effect Dojo at the moment

600
00:27:07,140 --> 00:27:10,520
I think they are supportive

601
00:27:10,740 --> 00:27:13,080
amazing I think we have one more

602
00:27:13,080 --> 00:27:15,539
struggling to get onto the Q a here it

603
00:27:15,539 --> 00:27:16,440
is

604
00:27:16,440 --> 00:27:19,020
um using a setup for example with defect

605
00:27:19,020 --> 00:27:22,260
dojo and secure code box how can or

606
00:27:22,260 --> 00:27:24,299
should you prevent an application or

607
00:27:24,299 --> 00:27:26,460
container with critical vulnerabilities

608
00:27:26,460 --> 00:27:29,039
from being deployed to production via CI

609
00:27:29,039 --> 00:27:31,460
CD

610
00:27:32,900 --> 00:27:36,140
tricky question

611
00:27:36,600 --> 00:27:39,000
is the question if you if you really

612
00:27:39,000 --> 00:27:41,159
want to block right

613
00:27:41,159 --> 00:27:43,919
um that that would be the question do

614
00:27:43,919 --> 00:27:46,700
you want to block it

615
00:27:47,039 --> 00:27:52,320
so when when you newly entered this yes

616
00:27:52,740 --> 00:27:55,200
in in The Code by by a developer then

617
00:27:55,200 --> 00:27:57,539
you want to block I understand that the

618
00:27:57,539 --> 00:28:00,419
trouble is that you will slow down the

619
00:28:00,419 --> 00:28:03,840
pipeline when you block it because these

620
00:28:03,840 --> 00:28:07,520
Dynamic tests are take some time

621
00:28:07,520 --> 00:28:09,600
depending on the environment which you

622
00:28:09,600 --> 00:28:12,960
want to scan so it can be five minutes I

623
00:28:12,960 --> 00:28:15,600
also saw shops where it took a day that

624
00:28:15,600 --> 00:28:17,100
depends on the configuration how many

625
00:28:17,100 --> 00:28:19,440
things you are running but when it's

626
00:28:19,440 --> 00:28:21,480
taking too long from my point of view

627
00:28:21,480 --> 00:28:24,539
the best is to do asynchronously uh like

628
00:28:24,539 --> 00:28:27,360
I have shown uh this is secure secure

629
00:28:27,360 --> 00:28:30,480
code box you could

630
00:28:30,480 --> 00:28:32,820
go to de facto to check when there is a

631
00:28:32,820 --> 00:28:36,480
new uh the new engagement with a new

632
00:28:36,480 --> 00:28:40,080
test uh and then block it in case there

633
00:28:40,080 --> 00:28:42,960
is something new coming up uh but I

634
00:28:42,960 --> 00:28:45,840
would focus for a secure code box which

635
00:28:45,840 --> 00:28:47,880
is mainly Dynamic application security

636
00:28:47,880 --> 00:28:50,100
testing wooden block when you have

637
00:28:50,100 --> 00:28:52,740
static application security testing then

638
00:28:52,740 --> 00:28:55,620
uh that is pretty fast there I would

639
00:28:55,620 --> 00:28:58,260
recommend to block it in case there is

640
00:28:58,260 --> 00:29:00,659
something unandled because then the

641
00:29:00,659 --> 00:29:03,299
developer can directly react to it and

642
00:29:03,299 --> 00:29:05,700
uh you will have a more clean

643
00:29:05,700 --> 00:29:07,440
environment

644
00:29:07,440 --> 00:29:09,240
and the question was I think how to do

645
00:29:09,240 --> 00:29:11,700
that during the build pipeline uh yeah

646
00:29:11,700 --> 00:29:13,740
you go through the to the API I

647
00:29:13,740 --> 00:29:16,020
personally use the defect Dojo client

648
00:29:16,020 --> 00:29:17,760
which I

649
00:29:17,760 --> 00:29:21,120
um created which is an image

650
00:29:21,120 --> 00:29:23,580
um but you can you can also there are

651
00:29:23,580 --> 00:29:26,220
other different uh API

652
00:29:26,220 --> 00:29:29,460
wrappers you can use and you choose one

653
00:29:29,460 --> 00:29:31,740
and then you go to defect dojo and ask

654
00:29:31,740 --> 00:29:36,659
for this test which I just uh for uh the

655
00:29:36,659 --> 00:29:38,039
findings which I just uploaded is there

656
00:29:38,039 --> 00:29:39,539
something unhandled in case there is

657
00:29:39,539 --> 00:29:41,940
something unhandled with a severity of

658
00:29:41,940 --> 00:29:43,559
high for example or critical in case

659
00:29:43,559 --> 00:29:47,120
that is there you stop the build

660
00:29:48,679 --> 00:29:50,880
guys definitely you had a flood of

661
00:29:50,880 --> 00:29:52,200
questions there and a few more that we

662
00:29:52,200 --> 00:29:54,659
couldn't actually get to so um if your

663
00:29:54,659 --> 00:29:56,340
question hasn't been answered today feel

664
00:29:56,340 --> 00:29:59,640
free to reach out to the guys on Hoover

665
00:29:59,640 --> 00:30:01,559
um thank you so much for joining us Timo

666
00:30:01,559 --> 00:30:03,299
Stefan that was awesome good luck with

667
00:30:03,299 --> 00:30:05,760
the project and we hope you all have a

668
00:30:05,760 --> 00:30:09,620
great day ahead take care

