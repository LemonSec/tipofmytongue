1
00:00:03,720 --> 00:00:06,000
uh yeah just sure um if you don't mind

2
00:00:06,000 --> 00:00:07,620
just basically give you a quick overview

3
00:00:07,620 --> 00:00:11,519
of uh who Christian is for everybody

4
00:00:11,519 --> 00:00:13,320
um so as Christian just mentioned he's

5
00:00:13,320 --> 00:00:15,179
going to talk about the latest exciting

6
00:00:15,179 --> 00:00:18,119
updates from the core rule said four and

7
00:00:18,119 --> 00:00:20,760
Christian himself holds is very highly

8
00:00:20,760 --> 00:00:22,800
enthusiastic about open source and the

9
00:00:22,800 --> 00:00:25,980
OS community so he's been in the or ask

10
00:00:25,980 --> 00:00:28,380
me for quite a few years now

11
00:00:28,380 --> 00:00:30,599
um and also holds a PhD in medieval

12
00:00:30,599 --> 00:00:32,579
history and enjoys reenacting medieval

13
00:00:32,579 --> 00:00:34,559
history by defending casts across Europe

14
00:00:34,559 --> 00:00:36,420
of course you can really make a living

15
00:00:36,420 --> 00:00:39,000
out of that so he turned into his

16
00:00:39,000 --> 00:00:41,040
attention to defending web applications

17
00:00:41,040 --> 00:00:43,320
for the past 15 years which he finds

18
00:00:43,320 --> 00:00:46,500
equally challenging so um yeah also he

19
00:00:46,500 --> 00:00:48,239
is the author of the second edition of

20
00:00:48,239 --> 00:00:50,640
The Mod security handbook so feel free

21
00:00:50,640 --> 00:00:53,579
to read that if you want to learn more

22
00:00:53,579 --> 00:00:55,739
and also known as a teacher on the

23
00:00:55,739 --> 00:00:58,620
subject also Christian is a frequent

24
00:00:58,620 --> 00:01:00,480
speaker at conferences including the

25
00:01:00,480 --> 00:01:02,699
optic EU right now as well as various

26
00:01:02,699 --> 00:01:04,500
OAS meetups where he tries to use his

27
00:01:04,500 --> 00:01:05,880
background and Humanities to explain

28
00:01:05,880 --> 00:01:08,760
hardcore tactical topics to audiences of

29
00:01:08,760 --> 00:01:10,140
different backgrounds

30
00:01:10,140 --> 00:01:12,840
Christian feel free to share your screen

31
00:01:12,840 --> 00:01:15,659
and get started okay thank you very much

32
00:01:15,659 --> 00:01:18,180
Dan happy to be here

33
00:01:18,180 --> 00:01:20,640
thank you for the invitation do you see

34
00:01:20,640 --> 00:01:21,600
my screen

35
00:01:21,600 --> 00:01:23,640
yes we can see your screen very good and

36
00:01:23,640 --> 00:01:26,159
so what's difference here is week four

37
00:01:26,159 --> 00:01:27,720
and what's the plan

38
00:01:27,720 --> 00:01:29,520
for today

39
00:01:29,520 --> 00:01:31,979
plan for day is I'm going up giving a

40
00:01:31,979 --> 00:01:33,780
brief overview of what our project

41
00:01:33,780 --> 00:01:37,860
actually is news from planet CRS and

42
00:01:37,860 --> 00:01:39,960
then what you're all really here for is

43
00:01:39,960 --> 00:01:41,939
the new features of the applicant major

44
00:01:41,939 --> 00:01:44,900
release CRS V4

45
00:01:44,900 --> 00:01:48,439
so what is CRS what is mod security

46
00:01:48,439 --> 00:01:52,200
we're wearing safety bells in a car

47
00:01:52,200 --> 00:01:54,840
not because we think it will solve all

48
00:01:54,840 --> 00:01:57,360
safety issues we're no longer go in an

49
00:01:57,360 --> 00:02:00,060
accident no accidents still happen but

50
00:02:00,060 --> 00:02:02,880
if they happen we're better off it's a

51
00:02:02,880 --> 00:02:05,880
good return on investment it's a good

52
00:02:05,880 --> 00:02:09,840
Baseline safety measure and CRS is very

53
00:02:09,840 --> 00:02:13,560
similar it's a good safety measure a

54
00:02:13,560 --> 00:02:16,800
basic security measure a good return on

55
00:02:16,800 --> 00:02:18,599
investment you're still going to be

56
00:02:18,599 --> 00:02:21,180
attacked you might still be exploited

57
00:02:21,180 --> 00:02:22,580
but if it happens

58
00:02:22,580 --> 00:02:25,680
it's less severe you have more time to

59
00:02:25,680 --> 00:02:27,840
defend and

60
00:02:27,840 --> 00:02:32,280
uh more attackers will will give up

61
00:02:32,280 --> 00:02:35,760
because of CRS so CRS is no 100

62
00:02:35,760 --> 00:02:38,640
protection but it's a good Baseline and

63
00:02:38,640 --> 00:02:44,160
we basically say 80 of the attacks uh at

64
00:02:44,160 --> 00:02:45,780
least eighty percent of the tax will no

65
00:02:45,780 --> 00:02:48,660
longer be effective uh if you support if

66
00:02:48,660 --> 00:02:51,560
you secure your site with CRS

67
00:02:51,560 --> 00:02:55,980
mod security is the engine beneath CRS

68
00:02:55,980 --> 00:03:00,060
and that works like a Swiss Swiss watch

69
00:03:00,060 --> 00:03:02,519
if you want it's highly mechanical there

70
00:03:02,519 --> 00:03:04,560
is no artificial intelligence involved

71
00:03:04,560 --> 00:03:07,379
here this is no Next Generation this is

72
00:03:07,379 --> 00:03:10,280
just traditional uh rule-based

73
00:03:10,280 --> 00:03:14,099
engineering but the engine is naked and

74
00:03:14,099 --> 00:03:18,120
what we need to to employ to really get

75
00:03:18,120 --> 00:03:22,319
any protection is rules on top

76
00:03:22,319 --> 00:03:24,959
and the rules on top is the CRS project

77
00:03:24,959 --> 00:03:28,379
so CRS comes in and provides mod

78
00:03:28,379 --> 00:03:31,140
security with the rule set you have the

79
00:03:31,140 --> 00:03:33,900
engine and then the configuration that

80
00:03:33,900 --> 00:03:36,300
is the rules on top and read ourselves

81
00:03:36,300 --> 00:03:39,959
as the first line of defense

82
00:03:39,959 --> 00:03:42,959
meaning we expect a layer defense we

83
00:03:42,959 --> 00:03:44,459
expect the secure application

84
00:03:44,459 --> 00:03:46,440
application developers that are aware of

85
00:03:46,440 --> 00:03:49,379
security coding practices and if they do

86
00:03:49,379 --> 00:03:52,260
the job we can help them by buying them

87
00:03:52,260 --> 00:03:53,459
more time

88
00:03:53,459 --> 00:03:56,940
or if they might make a mistakes maybe

89
00:03:56,940 --> 00:03:59,120
we can cover that maybe we can mitigate

90
00:03:59,120 --> 00:04:01,920
vulnerabilities that's our role we're

91
00:04:01,920 --> 00:04:03,659
not the sole layer of defense for the

92
00:04:03,659 --> 00:04:06,000
first layer of defense and as such we're

93
00:04:06,000 --> 00:04:08,819
not perfect they're pretty good and try

94
00:04:08,819 --> 00:04:10,739
to improve as we move along

95
00:04:10,739 --> 00:04:13,860
good how do we Fair uh Simon Bennett

96
00:04:13,860 --> 00:04:15,239
talked about the vulnerable applications

97
00:04:15,239 --> 00:04:18,478
here is one vulnerable application and

98
00:04:18,478 --> 00:04:21,120
on the left roller application without

99
00:04:21,120 --> 00:04:23,639
any protection and then the second

100
00:04:23,639 --> 00:04:26,820
column is CRS a five minute default

101
00:04:26,820 --> 00:04:29,639
installation and as I just mentioned

102
00:04:29,639 --> 00:04:31,979
eighty percent of the security problem

103
00:04:31,979 --> 00:04:36,120
is not gone but at least hidden 80 of

104
00:04:36,120 --> 00:04:38,880
the exploits no longer work

105
00:04:38,880 --> 00:04:42,780
uh and in this particular example burp

106
00:04:42,780 --> 00:04:46,080
was no longer able to execute

107
00:04:46,080 --> 00:04:49,380
an SQL injection against this vulnerable

108
00:04:49,380 --> 00:04:52,080
application and this was a really a

109
00:04:52,080 --> 00:04:54,120
trained burp user here this is not a

110
00:04:54,120 --> 00:04:56,460
five minute burp user so this is a five

111
00:04:56,460 --> 00:04:58,979
minute CRS against a highly skilled

112
00:04:58,979 --> 00:05:02,040
Master student employing burp and doing

113
00:05:02,040 --> 00:05:04,580
this as his research

114
00:05:04,580 --> 00:05:07,500
so the second column is the basic CRS

115
00:05:07,500 --> 00:05:10,020
and then as he moved to the right the

116
00:05:10,020 --> 00:05:11,940
colored columns get smaller and smaller

117
00:05:11,940 --> 00:05:14,400
these are higher permanent oil levels

118
00:05:14,400 --> 00:05:18,300
CRS works with a a mechanism that we

119
00:05:18,300 --> 00:05:20,940
call paranoia level and the higher

120
00:05:20,940 --> 00:05:23,039
paranoia level basically means more

121
00:05:23,039 --> 00:05:26,100
rules more aggressive rules more

122
00:05:26,100 --> 00:05:29,699
paranoia rules these rules come with

123
00:05:29,699 --> 00:05:32,039
strings attached they lead to more and

124
00:05:32,039 --> 00:05:33,660
more false positives

125
00:05:33,660 --> 00:05:36,720
so when you deploy paranoia level for

126
00:05:36,720 --> 00:05:38,880
CRS the application basically stops

127
00:05:38,880 --> 00:05:40,740
working because it has so many false

128
00:05:40,740 --> 00:05:43,440
positives and then you tune away the

129
00:05:43,440 --> 00:05:46,080
false positives and have it work again

130
00:05:46,080 --> 00:05:48,479
but that is substantial investment in

131
00:05:48,479 --> 00:05:51,300
time and resources well as the default

132
00:05:51,300 --> 00:05:54,000
installation in the second column pretty

133
00:05:54,000 --> 00:05:57,240
much works there might be false positive

134
00:05:57,240 --> 00:05:59,400
there might be rough edges but the

135
00:05:59,400 --> 00:06:01,500
default installation is meant to be a

136
00:06:01,500 --> 00:06:02,880
smooth ride

137
00:06:02,880 --> 00:06:04,500
but then if you have a higher security

138
00:06:04,500 --> 00:06:06,780
appetite then you raise the paranoia

139
00:06:06,780 --> 00:06:08,220
level and get better and better

140
00:06:08,220 --> 00:06:10,800
protection by better better protection

141
00:06:10,800 --> 00:06:12,840
you will also be protected pretty good

142
00:06:12,840 --> 00:06:14,580
from cross-site scripting cross-site

143
00:06:14,580 --> 00:06:17,940
scripting is greatly reduced by default

144
00:06:17,940 --> 00:06:21,000
installation but it's kind of tough to

145
00:06:21,000 --> 00:06:22,860
really protect things cross scripting

146
00:06:22,860 --> 00:06:25,560
because there's so many different attack

147
00:06:25,560 --> 00:06:28,919
techniques involved and and local file

148
00:06:28,919 --> 00:06:31,979
inclusion is mostly really gone already

149
00:06:31,979 --> 00:06:33,660
in default installation even more

150
00:06:33,660 --> 00:06:35,940
certain higher permanently left so this

151
00:06:35,940 --> 00:06:38,400
is a basic overview of the project does

152
00:06:38,400 --> 00:06:40,460
this really work

153
00:06:40,460 --> 00:06:43,259
uh I've talked about this does this

154
00:06:43,259 --> 00:06:45,539
really work this is a blog post by a

155
00:06:45,539 --> 00:06:47,699
Finnish guy called dromo Macon who

156
00:06:47,699 --> 00:06:50,880
looked at the different uh Cloud buff

157
00:06:50,880 --> 00:06:54,180
offerings and he came out with the

158
00:06:54,180 --> 00:06:56,580
result that basically the green columns

159
00:06:56,580 --> 00:06:58,800
are cool and the green columns are based

160
00:06:58,800 --> 00:07:00,240
on CRS

161
00:07:00,240 --> 00:07:05,000
as you can see so the hws vaf is

162
00:07:05,000 --> 00:07:07,919
honestly pretty lame if you compare the

163
00:07:07,919 --> 00:07:10,560
numbers remote command execution four

164
00:07:10,560 --> 00:07:15,120
percent blocked Azure Roth 71 block so

165
00:07:15,120 --> 00:07:17,940
there you go with the AWS one and it's

166
00:07:17,940 --> 00:07:19,800
not very good

167
00:07:19,800 --> 00:07:22,800
um and on the right you have the

168
00:07:22,800 --> 00:07:25,979
cloudflare buff that is based on CRS but

169
00:07:25,979 --> 00:07:27,960
they apparently haven't enabled all the

170
00:07:27,960 --> 00:07:30,000
rules it really depends a bit and it

171
00:07:30,000 --> 00:07:32,280
helps to compare the different offerings

172
00:07:32,280 --> 00:07:34,440
so this was a blog post I think from

173
00:07:34,440 --> 00:07:39,199
last year and lately we saw an article

174
00:07:39,199 --> 00:07:42,419
in dark reading covering a presentation

175
00:07:42,419 --> 00:07:45,780
of black hat Asia this spring where the

176
00:07:45,780 --> 00:07:49,340
guys a group of Chinese researchers

177
00:07:49,340 --> 00:07:51,259
concluded then

178
00:07:51,259 --> 00:07:53,419
mod security

179
00:07:53,419 --> 00:07:56,099
they developed a new tool and it was

180
00:07:56,099 --> 00:07:58,620
able to bypass mod security and module

181
00:07:58,620 --> 00:08:00,840
that's us people always speak of mod

182
00:08:00,840 --> 00:08:03,419
security when they mean CRS so they were

183
00:08:03,419 --> 00:08:06,599
able to bypass CRS and mod Security in

184
00:08:06,599 --> 00:08:11,699
three percent of their cases while as 63

185
00:08:11,699 --> 00:08:15,380
of the cases for Amazon web services

186
00:08:15,380 --> 00:08:18,720
same result as Thomas macom more or less

187
00:08:18,720 --> 00:08:19,979
the number different really depends on

188
00:08:19,979 --> 00:08:22,759
the attack but we're doing pretty good

189
00:08:22,759 --> 00:08:25,740
which doesn't mean we're perfect and

190
00:08:25,740 --> 00:08:29,039
I'll get back to that so it's a constant

191
00:08:29,039 --> 00:08:31,319
strive to improve the rules that to

192
00:08:31,319 --> 00:08:33,719
close existing holes to look at the

193
00:08:33,719 --> 00:08:35,700
remaining three percent here can we do

194
00:08:35,700 --> 00:08:37,679
something about this can we update

195
00:08:37,679 --> 00:08:40,260
something and actually the guy named

196
00:08:40,260 --> 00:08:43,919
here thinking cool from China contacted

197
00:08:43,919 --> 00:08:46,020
us with his findings before he presented

198
00:08:46,020 --> 00:08:48,660
at blackhead Asia

199
00:08:48,660 --> 00:08:53,040
good the news from planet CRS if you're

200
00:08:53,040 --> 00:08:56,160
using mod secure then you probably aware

201
00:08:56,160 --> 00:08:59,760
that the owner of mod security the owner

202
00:08:59,760 --> 00:09:01,440
of the open source software announced

203
00:09:01,440 --> 00:09:03,720
that they were stop they will stop to

204
00:09:03,720 --> 00:09:07,740
develop mod Security in 2024 and they

205
00:09:07,740 --> 00:09:09,480
they have already stopped selling

206
00:09:09,480 --> 00:09:10,800
contracts for that they're selling

207
00:09:10,800 --> 00:09:13,320
support contracts for mod security

208
00:09:13,320 --> 00:09:15,899
and somebody will either have to take

209
00:09:15,899 --> 00:09:17,060
this over

210
00:09:17,060 --> 00:09:21,120
or this software will become a legacy we

211
00:09:21,120 --> 00:09:24,260
tried to take it over already

212
00:09:24,260 --> 00:09:28,140
overspried over and approach trustwave

213
00:09:28,140 --> 00:09:30,720
so the executive director and approach

214
00:09:30,720 --> 00:09:32,820
trust Rave and ask them if you want to

215
00:09:32,820 --> 00:09:35,459
get out of this why don't you hand it

216
00:09:35,459 --> 00:09:38,300
over immediately and we can continue

217
00:09:38,300 --> 00:09:41,399
seamlessly with the development and they

218
00:09:41,399 --> 00:09:44,160
were not interested so they said we

219
00:09:44,160 --> 00:09:47,580
we're going to stop in 2024 and if you

220
00:09:47,580 --> 00:09:51,019
want to take it over let's talk in 2024.

221
00:09:51,019 --> 00:09:53,940
we think that is much too late we think

222
00:09:53,940 --> 00:09:56,160
somebody new should be covering mod

223
00:09:56,160 --> 00:09:58,860
security immediately but that's not how

224
00:09:58,860 --> 00:10:01,080
things stand situation is not as Bleak

225
00:10:01,080 --> 00:10:03,600
as it sounds mod security stable and

226
00:10:03,600 --> 00:10:06,000
software works and the intelligence is

227
00:10:06,000 --> 00:10:08,160
in the rule set and not in the engines

228
00:10:08,160 --> 00:10:12,360
to the widest extent however there is

229
00:10:12,360 --> 00:10:14,640
still a new kid on the block there is

230
00:10:14,640 --> 00:10:17,700
now a new alternative open source web

231
00:10:17,700 --> 00:10:20,240
application firewall engine caratsa

232
00:10:20,240 --> 00:10:23,100
coraza is a new piece of software that

233
00:10:23,100 --> 00:10:25,980
is not really able to be a drop-in

234
00:10:25,980 --> 00:10:28,740
replacement for mod security immediately

235
00:10:28,740 --> 00:10:31,680
but already works for cloud-enabled web

236
00:10:31,680 --> 00:10:34,980
servers like caddy and I think also

237
00:10:34,980 --> 00:10:38,360
traffic and the karatsa developer

238
00:10:38,360 --> 00:10:40,680
developers there are multiple ones now

239
00:10:40,680 --> 00:10:45,540
namely from Pablo tosso is now creating

240
00:10:45,540 --> 00:10:48,899
an nginx module out of karata so the

241
00:10:48,899 --> 00:10:52,079
idea is to become a drop-in replacement

242
00:10:52,079 --> 00:10:54,839
for mod security and I'm pretty

243
00:10:54,839 --> 00:10:57,959
confident by 2024 this will actually be

244
00:10:57,959 --> 00:11:01,620
the case he thinks karatsa on nginx

245
00:11:01,620 --> 00:11:05,100
should be productive during the year

246
00:11:05,100 --> 00:11:07,980
so even if mod security might become

247
00:11:07,980 --> 00:11:10,560
Legacy no longer actively developed

248
00:11:10,560 --> 00:11:13,860
there are alternatives around there is

249
00:11:13,860 --> 00:11:16,500
now a new open source alternative to mob

250
00:11:16,500 --> 00:11:17,940
security and there are additional

251
00:11:17,940 --> 00:11:19,800
commercial implementations quite a few

252
00:11:19,800 --> 00:11:22,019
ones actually I cannot dig into this

253
00:11:22,019 --> 00:11:24,120
here because it takes too much time but

254
00:11:24,120 --> 00:11:27,360
several commercial offerings are based

255
00:11:27,360 --> 00:11:31,079
on Forex or re-implementation of the mod

256
00:11:31,079 --> 00:11:33,480
security rule language so you're not in

257
00:11:33,480 --> 00:11:36,120
the left in the rain with Mod Security

258
00:11:36,120 --> 00:11:38,700
even if it becomes end of life

259
00:11:38,700 --> 00:11:43,579
good we have overall the complete CRS

260
00:11:43,579 --> 00:11:48,420
documentation and I can show you this so

261
00:11:48,420 --> 00:11:51,060
at the coral set

262
00:11:51,060 --> 00:11:53,459
website uh when you click on

263
00:11:53,459 --> 00:11:56,120
documentation you get a completely new

264
00:11:56,120 --> 00:12:00,000
documentation uh really down to the

265
00:12:00,000 --> 00:12:01,740
operating level

266
00:12:01,740 --> 00:12:05,459
use containers log handling these are a

267
00:12:05,459 --> 00:12:08,240
bit Bleak let's look at development

268
00:12:08,240 --> 00:12:11,459
writing rules testing the rules that is

269
00:12:11,459 --> 00:12:13,500
much more detailed yeah that's a good

270
00:12:13,500 --> 00:12:17,220
one isn't it and what is also very

271
00:12:17,220 --> 00:12:19,800
interesting is the sandbox that is

272
00:12:19,800 --> 00:12:22,079
supposed to be the next slide yes the

273
00:12:22,079 --> 00:12:26,180
sandbox sandbox is a demo site for CRS

274
00:12:26,180 --> 00:12:28,560
that means you don't have to install

275
00:12:28,560 --> 00:12:32,279
this yourself to test it out what you

276
00:12:32,279 --> 00:12:36,899
can for example do if you're a a user or

277
00:12:36,899 --> 00:12:39,959
a potential user and you received

278
00:12:39,959 --> 00:12:43,320
a report from a penetration tester a sap

279
00:12:43,320 --> 00:12:45,180
report maybe and say hey look you have a

280
00:12:45,180 --> 00:12:47,220
weakness in your application then you

281
00:12:47,220 --> 00:12:49,920
can take this weakness and try it out

282
00:12:49,920 --> 00:12:53,040
against the CRS sandbox here is an

283
00:12:53,040 --> 00:12:56,160
example call I'm going to do this

284
00:12:56,160 --> 00:12:58,200
take this over

285
00:12:58,200 --> 00:13:01,079
here with what happens I'm making that a

286
00:13:01,079 --> 00:13:03,899
bit larger yeah last one

287
00:13:03,899 --> 00:13:08,399
is pretty big and so I am calling the

288
00:13:08,399 --> 00:13:12,300
sandbox car rules.org I'm giving it an

289
00:13:12,300 --> 00:13:14,339
additional HTTP header and saying give

290
00:13:14,339 --> 00:13:18,720
me the the rules in the response human

291
00:13:18,720 --> 00:13:20,880
readable as text format

292
00:13:20,880 --> 00:13:23,339
and the URI

293
00:13:23,339 --> 00:13:26,820
uh key has a query string that is

294
00:13:26,820 --> 00:13:29,940
actually a local file inclusion attack

295
00:13:29,940 --> 00:13:34,560
or payload so I'm attacking so to say

296
00:13:34,560 --> 00:13:36,959
the sandbox and the sandbox will not

297
00:13:36,959 --> 00:13:39,300
give me a standard HTML response uh

298
00:13:39,300 --> 00:13:42,360
welcome to my website it responds with

299
00:13:42,360 --> 00:13:45,300
the CRS log file so you attack the

300
00:13:45,300 --> 00:13:48,600
sandbox and the sandbox tells you hey I

301
00:13:48,600 --> 00:13:50,639
detected this is an attack in fact I

302
00:13:50,639 --> 00:13:53,880
detect it an OS file access attempt

303
00:13:53,880 --> 00:13:56,160
and I detected the remote command

304
00:13:56,160 --> 00:13:58,380
execution unique Shell Code filed

305
00:13:58,380 --> 00:14:01,500
and this gives us a score of 10 we're

306
00:14:01,500 --> 00:14:04,200
doing as crs's annually scoring whatever

307
00:14:04,200 --> 00:14:07,079
that is but that's a characteristic of

308
00:14:07,079 --> 00:14:09,540
the rule set so first two detection

309
00:14:09,540 --> 00:14:12,660
rules and afterwards two Administration

310
00:14:12,660 --> 00:14:15,839
or reporting rules here let's try this

311
00:14:15,839 --> 00:14:18,839
again I'll do something else

312
00:14:18,839 --> 00:14:21,600
uh been Bash

313
00:14:21,600 --> 00:14:23,880
and I call the parameter exec of course

314
00:14:23,880 --> 00:14:26,820
it doesn't work there is no application

315
00:14:26,820 --> 00:14:28,800
that is vulnerable here

316
00:14:28,800 --> 00:14:30,540
but

317
00:14:30,540 --> 00:14:33,000
CRS is running and now I have a

318
00:14:33,000 --> 00:14:35,339
different route no it's the same one so

319
00:14:35,339 --> 00:14:38,820
unique Shell Code file for the bin Bash

320
00:14:38,820 --> 00:14:42,260
and uh we can also do

321
00:14:42,260 --> 00:14:45,839
let's try out

322
00:14:45,839 --> 00:14:48,800
alert

323
00:14:52,019 --> 00:14:53,760
just

324
00:14:53,760 --> 00:14:56,160
to give you an example so I hope to

325
00:14:56,160 --> 00:14:57,180
trigger

326
00:14:57,180 --> 00:15:00,180
yes three separate cross-site scripting

327
00:15:00,180 --> 00:15:01,800
rules were triggered for a total score

328
00:15:01,800 --> 00:15:05,519
of five so this is the CRS sandbox if

329
00:15:05,519 --> 00:15:07,800
you look at the documentation there is a

330
00:15:07,800 --> 00:15:10,980
lot more to be had and

331
00:15:10,980 --> 00:15:13,920
with the with the sandbox you can try

332
00:15:13,920 --> 00:15:16,139
out different versions of CRS you have

333
00:15:16,139 --> 00:15:18,420
nightly builds you can try out different

334
00:15:18,420 --> 00:15:22,260
paranoia levels like uh would a higher

335
00:15:22,260 --> 00:15:25,019
paranoia level catch this attack that is

336
00:15:25,019 --> 00:15:26,940
not called by default we would have

337
00:15:26,940 --> 00:15:29,160
catch if I raise the paranoia level to

338
00:15:29,160 --> 00:15:31,740
two so before I deploy this on a

339
00:15:31,740 --> 00:15:34,500
production server I try this out via the

340
00:15:34,500 --> 00:15:36,120
sandbox

341
00:15:36,120 --> 00:15:39,660
uh you can have different backends so on

342
00:15:39,660 --> 00:15:42,360
CRS on mod security and Apache you can

343
00:15:42,360 --> 00:15:44,459
have mod Security on nginx or you can

344
00:15:44,459 --> 00:15:48,300
have the new karasa on caddy backend so

345
00:15:48,300 --> 00:15:50,639
many many different options with the

346
00:15:50,639 --> 00:15:54,060
sandbox and this has been really really

347
00:15:54,060 --> 00:15:57,300
useful already we deployed this last

348
00:15:57,300 --> 00:15:59,639
November or we announced this last

349
00:15:59,639 --> 00:16:01,019
November

350
00:16:01,019 --> 00:16:04,380
what else do we have we have run a

351
00:16:04,380 --> 00:16:07,620
private bug Bounty program actually two

352
00:16:07,620 --> 00:16:10,260
of those we did one in February together

353
00:16:10,260 --> 00:16:14,459
with a big big CRS user that paid for

354
00:16:14,459 --> 00:16:17,579
this and back in February they used

355
00:16:17,579 --> 00:16:19,980
Elite back quality hunters and none of

356
00:16:19,980 --> 00:16:22,079
the elite bug bounty hunters found

357
00:16:22,079 --> 00:16:23,480
anything

358
00:16:23,480 --> 00:16:26,820
they probably they didn't dig deep

359
00:16:26,820 --> 00:16:28,980
enough because they were so focused on

360
00:16:28,980 --> 00:16:32,639
their uh favorite vulnerabilities that

361
00:16:32,639 --> 00:16:35,220
they were not interested to really dig

362
00:16:35,220 --> 00:16:37,920
into CRS look at the regular expression

363
00:16:37,920 --> 00:16:41,579
try to find a way around it etc etc they

364
00:16:41,579 --> 00:16:44,519
were pretty much just give up and then

365
00:16:44,519 --> 00:16:46,980
that big integrator approaches again to

366
00:16:46,980 --> 00:16:50,720
do a second bug Bounty with higher

367
00:16:50,720 --> 00:16:53,639
bounties higher payout

368
00:16:53,639 --> 00:16:56,160
and they would select vaf security

369
00:16:56,160 --> 00:16:58,199
researchers so people who had published

370
00:16:58,199 --> 00:17:00,839
about verification firewall bypasses

371
00:17:00,839 --> 00:17:02,639
before they approach them and buy them

372
00:17:02,639 --> 00:17:04,980
to the program and that program has been

373
00:17:04,980 --> 00:17:08,459
a huge success in terms of findings and

374
00:17:08,459 --> 00:17:13,679
payouts not so much a huge success in

375
00:17:13,679 --> 00:17:16,079
in brushing our egos we were really

376
00:17:16,079 --> 00:17:19,980
shocked to Pieces they have found a lot

377
00:17:19,980 --> 00:17:23,520
and a lot of bypasses many of them

378
00:17:23,520 --> 00:17:27,419
highly severe and we're now cleaning up

379
00:17:27,419 --> 00:17:31,380
what happened during the bug bomb and

380
00:17:31,380 --> 00:17:34,740
it's truth be told several dozens of

381
00:17:34,740 --> 00:17:37,080
findings and it's not like this is going

382
00:17:37,080 --> 00:17:39,179
to take an afternoon to fix this is

383
00:17:39,179 --> 00:17:42,660
serious serious work and that will keep

384
00:17:42,660 --> 00:17:45,000
us busy for several months actually

385
00:17:45,000 --> 00:17:48,059
so we had can already say this we had

386
00:17:48,059 --> 00:17:51,600
planned for CS4 to come out but now we

387
00:17:51,600 --> 00:17:53,340
have so many new findings or

388
00:17:53,340 --> 00:17:56,700
vulnerabilities or things that we don't

389
00:17:56,700 --> 00:17:59,940
cover that we cannot bring out CRS for

390
00:17:59,940 --> 00:18:04,320
immediately instead we have to fix these

391
00:18:04,320 --> 00:18:07,220
bypasses

392
00:18:07,559 --> 00:18:10,020
good uh

393
00:18:10,020 --> 00:18:13,020
we also are running a def on duty

394
00:18:13,020 --> 00:18:15,179
program this is not exactly new this has

395
00:18:15,179 --> 00:18:16,980
been running for more than a year and

396
00:18:16,980 --> 00:18:20,160
Death on duty means we're covering

397
00:18:20,160 --> 00:18:23,240
several Channel with first level support

398
00:18:23,240 --> 00:18:26,280
so we're on the over slack if you have a

399
00:18:26,280 --> 00:18:29,039
CRS question approaches on the OS slack

400
00:18:29,039 --> 00:18:32,340
and there is some CRS developer who's

401
00:18:32,340 --> 00:18:34,679
guaranteed to respond to you within a

402
00:18:34,679 --> 00:18:36,179
useful time frame

403
00:18:36,179 --> 00:18:38,419
same happens

404
00:18:38,419 --> 00:18:42,000
on GitHub if you open question GitHub an

405
00:18:42,000 --> 00:18:43,620
issue on GitHub respond to you

406
00:18:43,620 --> 00:18:46,799
guaranteed you can also do that on

407
00:18:46,799 --> 00:18:47,700
Twitter

408
00:18:47,700 --> 00:18:50,400
you can do this on the CRS mailing list

409
00:18:50,400 --> 00:18:52,799
also on the mod security mail list which

410
00:18:52,799 --> 00:18:56,039
is separate and you can even do this on

411
00:18:56,039 --> 00:18:58,260
stack Overflow or stack exchange we're

412
00:18:58,260 --> 00:19:00,960
scanning Twitter and these channels for

413
00:19:00,960 --> 00:19:04,140
certain keyboards and if Coral set is

414
00:19:04,140 --> 00:19:06,299
mentioned or hashtag is mentioned and

415
00:19:06,299 --> 00:19:08,340
recovering then we're going to respond

416
00:19:08,340 --> 00:19:12,000
so we have a Dev on duty program that is

417
00:19:12,000 --> 00:19:15,120
paid by sponsors and that provides first

418
00:19:15,120 --> 00:19:18,660
level support you you have a simple

419
00:19:18,660 --> 00:19:20,940
problem CRS will give you the simple

420
00:19:20,940 --> 00:19:23,400
solution you have a bigger problem with

421
00:19:23,400 --> 00:19:27,419
CRS the Devon Duty will guide you to

422
00:19:27,419 --> 00:19:30,000
open an issue to test this more freely

423
00:19:30,000 --> 00:19:33,179
to give us the bug the log files that we

424
00:19:33,179 --> 00:19:34,740
really need

425
00:19:34,740 --> 00:19:37,860
Etc so that's highly useful paid for by

426
00:19:37,860 --> 00:19:40,740
sponsors very useful and I think it's

427
00:19:40,740 --> 00:19:44,760
also nice for a open source project to

428
00:19:44,760 --> 00:19:47,640
guarantee support for open source users

429
00:19:47,640 --> 00:19:50,100
paying open to its users and having a

430
00:19:50,100 --> 00:19:53,520
sponsors providers with the means to do

431
00:19:53,520 --> 00:19:55,700
that

432
00:19:55,740 --> 00:19:59,640
good so what are now these major changes

433
00:19:59,640 --> 00:20:03,900
for CRS V4 That was supposed to are

434
00:20:03,900 --> 00:20:05,900
planned to be released in June 2022

435
00:20:05,900 --> 00:20:09,299
before we launched that second private

436
00:20:09,299 --> 00:20:10,919
background event

437
00:20:10,919 --> 00:20:14,100
we have a plug-in architecture

438
00:20:14,100 --> 00:20:19,020
CRS is a rule set and CRS is a

439
00:20:19,020 --> 00:20:23,100
collection of mod security rules mostly

440
00:20:23,100 --> 00:20:27,200
regular Expressions that you enable and

441
00:20:27,200 --> 00:20:31,020
plugins are now a way for you to write

442
00:20:31,020 --> 00:20:34,940
your own rules and use existing CRS

443
00:20:34,940 --> 00:20:37,919
functionality but you can very easily do

444
00:20:37,919 --> 00:20:40,919
is you add your own detection rules so

445
00:20:40,919 --> 00:20:43,080
we have a couple of SQL injection rules

446
00:20:43,080 --> 00:20:47,100
and then you add a rule that

447
00:20:47,100 --> 00:20:49,559
detects something else that is not

448
00:20:49,559 --> 00:20:53,340
Mainline so far but give you an example

449
00:20:53,340 --> 00:20:56,160
I'm constantly being scanned with

450
00:20:56,160 --> 00:20:59,220
certain Uris that I don't run on this

451
00:20:59,220 --> 00:21:01,620
server they are going to result in a

452
00:21:01,620 --> 00:21:05,460
404. but I want to block them with four

453
00:21:05,460 --> 00:21:08,460
or three also to have it in the lock as

454
00:21:08,460 --> 00:21:11,880
an attacker for for statistics Etc I'm

455
00:21:11,880 --> 00:21:13,620
not happy with the 404 I want to have

456
00:21:13,620 --> 00:21:16,860
them as a 403. so I wrote my own plugin

457
00:21:16,860 --> 00:21:20,039
that would blend in with CRS and then

458
00:21:20,039 --> 00:21:24,600
use the animal scoring mechanism and the

459
00:21:24,600 --> 00:21:27,780
the error page that I defined for CRS

460
00:21:27,780 --> 00:21:32,039
etc etc so I piggyback the whole

461
00:21:32,039 --> 00:21:35,520
blocking mechanism and the reporting of

462
00:21:35,520 --> 00:21:38,400
crs4 by writing our own rules before

463
00:21:38,400 --> 00:21:41,100
crs4 right now cr3 is relatively

464
00:21:41,100 --> 00:21:45,120
difficult to add a rule into the rule

465
00:21:45,120 --> 00:21:47,880
set it will always be separate you have

466
00:21:47,880 --> 00:21:50,100
to do the housekeeping yourself with

467
00:21:50,100 --> 00:21:54,720
crs4 we include rules deployed to a

468
00:21:54,720 --> 00:21:56,340
certain folder and we give you the

469
00:21:56,340 --> 00:21:59,159
documentation how to write these rules

470
00:21:59,159 --> 00:22:01,679
we're accepting third-party plugins I'm

471
00:22:01,679 --> 00:22:05,240
going to get back to that afterwards and

472
00:22:05,240 --> 00:22:08,039
some existing functionality has been

473
00:22:08,039 --> 00:22:12,659
taken out of CRS and moved into separate

474
00:22:12,659 --> 00:22:16,039
plugins why did we do this

475
00:22:16,039 --> 00:22:18,840
we did this in order to reduce the

476
00:22:18,840 --> 00:22:21,780
attack surface of Cirrus plugins have

477
00:22:21,780 --> 00:22:25,500
been a potential weakness and we had a

478
00:22:25,500 --> 00:22:30,480
cve in 2021 on a broken plug-in it had a

479
00:22:30,480 --> 00:22:32,840
bug and we didn't see that and it was

480
00:22:32,840 --> 00:22:36,500
exploitable and expandable it was a high

481
00:22:36,500 --> 00:22:40,080
severity plug-in effect that affected on

482
00:22:40,080 --> 00:22:41,340
the plugin

483
00:22:41,340 --> 00:22:43,919
sorry not only the rule exclusion thing

484
00:22:43,919 --> 00:22:46,679
but the entire rule set

485
00:22:46,679 --> 00:22:51,000
so rule exclusions have been moved to

486
00:22:51,000 --> 00:22:53,220
plugins rule exclusions are a way to

487
00:22:53,220 --> 00:22:56,159
deal with false positive uh something we

488
00:22:56,159 --> 00:22:58,440
provide and we've removed them now from

489
00:22:58,440 --> 00:23:00,360
the mainland distribution we also

490
00:23:00,360 --> 00:23:02,419
removed exotic mod security

491
00:23:02,419 --> 00:23:05,100
functionality that we use in a very

492
00:23:05,100 --> 00:23:08,000
limited way in CRS that is now a plug-in

493
00:23:08,000 --> 00:23:11,760
meaning the mainline CRS is simpler if

494
00:23:11,760 --> 00:23:16,080
you want to run your own vaf engine

495
00:23:16,080 --> 00:23:19,740
and with CRS so you re-implement mod

496
00:23:19,740 --> 00:23:22,440
security run CRS you have less work to

497
00:23:22,440 --> 00:23:25,700
do because the mainline CRS has less

498
00:23:25,700 --> 00:23:28,320
functionality or uses less functional it

499
00:23:28,320 --> 00:23:30,659
has more rules but less functionality

500
00:23:30,659 --> 00:23:34,380
from Mod security that it uses and of

501
00:23:34,380 --> 00:23:37,500
course plug-in architecture allows us to

502
00:23:37,500 --> 00:23:40,980
accept third-party rule sets in the

503
00:23:40,980 --> 00:23:42,000
future

504
00:23:42,000 --> 00:23:45,120
which is really cool like somebody else

505
00:23:45,120 --> 00:23:48,360
can write rules to integrate with CRS

506
00:23:48,360 --> 00:23:52,799
and that architectural change in terms

507
00:23:52,799 --> 00:23:55,260
of mod security it's an obit thing but

508
00:23:55,260 --> 00:23:58,500
in terms of project uh project

509
00:23:58,500 --> 00:24:00,780
architecture it's a huge thing so big we

510
00:24:00,780 --> 00:24:02,640
decided to name the next major release

511
00:24:02,640 --> 00:24:06,360
Here is four it's a CRS with plugins

512
00:24:06,360 --> 00:24:09,120
and we also bring early blocking if

513
00:24:09,120 --> 00:24:11,820
you're familiar uh with how HTTP works

514
00:24:11,820 --> 00:24:15,900
you have request header HTTP request

515
00:24:15,900 --> 00:24:17,880
header face and then you have HTTP

516
00:24:17,880 --> 00:24:21,539
request body phase a get request will do

517
00:24:21,539 --> 00:24:23,940
the request URI and a few headers and be

518
00:24:23,940 --> 00:24:26,400
done with it a post request or a file

519
00:24:26,400 --> 00:24:30,240
upload will bring a request body and for

520
00:24:30,240 --> 00:24:32,039
the web server and for the web

521
00:24:32,039 --> 00:24:35,220
application firewall that's a separate

522
00:24:35,220 --> 00:24:38,400
a separate face in the request and we do

523
00:24:38,400 --> 00:24:40,380
early blocking meaning we block

524
00:24:40,380 --> 00:24:43,020
immediately after the headers now or we

525
00:24:43,020 --> 00:24:45,059
can immediately block after the handles

526
00:24:45,059 --> 00:24:47,159
now and that is a new feature I mean

527
00:24:47,159 --> 00:24:49,080
this sounds so natural but it's actual

528
00:24:49,080 --> 00:24:53,720
new feature in CRS 3 you we would block

529
00:24:53,720 --> 00:24:57,419
after everything the entire request has

530
00:24:57,419 --> 00:25:00,000
been executed and gantar request has

531
00:25:00,000 --> 00:25:02,220
arrived at the web server with early

532
00:25:02,220 --> 00:25:05,940
blocking we stop after request header

533
00:25:05,940 --> 00:25:08,280
have been received we look at the

534
00:25:08,280 --> 00:25:10,860
anomalyst core and if it has to be then

535
00:25:10,860 --> 00:25:14,820
we block before the file upload has even

536
00:25:14,820 --> 00:25:18,059
started so that is early blocking nice

537
00:25:18,059 --> 00:25:21,000
feature that saves a few resources and

538
00:25:21,000 --> 00:25:23,159
you're no longer talking to people that

539
00:25:23,159 --> 00:25:24,659
want to attack you if it's easily

540
00:25:24,659 --> 00:25:26,220
visible they're an attacker why

541
00:25:26,220 --> 00:25:31,400
accepting a post frequency from them

542
00:25:31,679 --> 00:25:34,919
uh we renamed the scoring various and

543
00:25:34,919 --> 00:25:36,539
paranoia level that doesn't really

544
00:25:36,539 --> 00:25:38,460
change the working of the project but it

545
00:25:38,460 --> 00:25:40,559
affected every rule so that's a big big

546
00:25:40,559 --> 00:25:42,419
change and the naming is now a bit more

547
00:25:42,419 --> 00:25:46,260
consistent it's a bit easier and it has

548
00:25:46,260 --> 00:25:50,760
been cleaned up honestly crf3 scoring

549
00:25:50,760 --> 00:25:52,980
variables and how the scoring worked and

550
00:25:52,980 --> 00:25:54,840
how the arithmetics behind the scoring

551
00:25:54,840 --> 00:25:57,539
work it was really really ugly and it's

552
00:25:57,539 --> 00:26:01,260
much cleaner now and much easier to

553
00:26:01,260 --> 00:26:03,299
understand and of course a lot better

554
00:26:03,299 --> 00:26:07,159
document as well we have configurable

555
00:26:07,159 --> 00:26:10,260
reporting levels going back to this one

556
00:26:10,260 --> 00:26:13,880
here this is a reporting rule and with

557
00:26:13,880 --> 00:26:19,320
crs3 there is no way or no standard way

558
00:26:19,320 --> 00:26:20,820
to disable this if you don't like this

559
00:26:20,820 --> 00:26:22,860
or if you want to have more information

560
00:26:22,860 --> 00:26:24,600
there's also no way you cannot influence

561
00:26:24,600 --> 00:26:25,340
this

562
00:26:25,340 --> 00:26:28,860
crs4 we have a reporting level I

563
00:26:28,860 --> 00:26:30,659
personally for example I don't like this

564
00:26:30,659 --> 00:26:33,240
rule I disable that rule I don't want to

565
00:26:33,240 --> 00:26:35,400
see it this isn't good enough for me and

566
00:26:35,400 --> 00:26:37,159
this one is not interesting

567
00:26:37,159 --> 00:26:40,799
so now with crs34 I can set this

568
00:26:40,799 --> 00:26:42,840
reporting level to zero and everything

569
00:26:42,840 --> 00:26:46,200
is coral gone or you have the ability to

570
00:26:46,200 --> 00:26:49,620
put everything I think on far or

571
00:26:49,620 --> 00:26:51,900
reporting level 5 which is really useful

572
00:26:51,900 --> 00:26:53,700
for nginx which behaves a bit

573
00:26:53,700 --> 00:26:55,380
differently and this gives you

574
00:26:55,380 --> 00:26:57,840
information that you cannot obtain on

575
00:26:57,840 --> 00:27:02,100
nginx with CRS free version 3 you would

576
00:27:02,100 --> 00:27:04,260
have to write your own custom rules with

577
00:27:04,260 --> 00:27:07,380
crs4 and it suddenly works thanks to the

578
00:27:07,380 --> 00:27:09,419
reporting

579
00:27:09,419 --> 00:27:13,559
um we're also no longer depending on the

580
00:27:13,559 --> 00:27:15,480
Pearl compatible regular expression and

581
00:27:15,480 --> 00:27:18,480
the engine that's the traditional uh

582
00:27:18,480 --> 00:27:22,860
fully enhanced big heavy slow regular

583
00:27:22,860 --> 00:27:24,480
expression engines with the tons of

584
00:27:24,480 --> 00:27:26,159
feature

585
00:27:26,159 --> 00:27:30,600
we're uh ready for re2 and hyperscan so

586
00:27:30,600 --> 00:27:33,539
alternative simple regular expression

587
00:27:33,539 --> 00:27:36,240
engines that have less performance issue

588
00:27:36,240 --> 00:27:38,640
and they're not vulnerable to regular

589
00:27:38,640 --> 00:27:41,220
expression denial of service regular

590
00:27:41,220 --> 00:27:44,580
expression denial of service is as the

591
00:27:44,580 --> 00:27:48,059
name implies an attack on the regular

592
00:27:48,059 --> 00:27:51,480
expression parser or library and you

593
00:27:51,480 --> 00:27:54,240
kill the CPU of the server by specially

594
00:27:54,240 --> 00:27:58,020
crafted regular Expressions uh were

595
00:27:58,020 --> 00:27:59,820
especially affected by this because

596
00:27:59,820 --> 00:28:01,440
we're an open source project and

597
00:28:01,440 --> 00:28:03,960
everybody can look up our regular

598
00:28:03,960 --> 00:28:07,440
Expressions identify regular Expressions

599
00:28:07,440 --> 00:28:10,080
that are prone to such attacks and then

600
00:28:10,080 --> 00:28:13,620
develops the special crafted payload to

601
00:28:13,620 --> 00:28:18,419
attack CRS and kill the CPU via mod

602
00:28:18,419 --> 00:28:21,840
security and a pearl compatible regular

603
00:28:21,840 --> 00:28:24,360
expression using a special Advanced

604
00:28:24,360 --> 00:28:27,240
functionality we simply Amplified the

605
00:28:27,240 --> 00:28:30,919
rule set again so again a simplification

606
00:28:30,919 --> 00:28:33,600
like the plugin architecture simpler

607
00:28:33,600 --> 00:28:36,179
like animal scoring variables simpler

608
00:28:36,179 --> 00:28:38,279
and now regular expression

609
00:28:38,279 --> 00:28:40,740
simpler we're no longer depending on the

610
00:28:40,740 --> 00:28:45,179
special pcre dialect we're now using the

611
00:28:45,179 --> 00:28:48,120
simpler Baseline regular expression

612
00:28:48,120 --> 00:28:50,279
functionality that the different engines

613
00:28:50,279 --> 00:28:53,520
share so that's a step forward and a

614
00:28:53,520 --> 00:28:56,340
simplification as well that's this whole

615
00:28:56,340 --> 00:29:01,279
simplification cleanup consolidating

616
00:29:01,279 --> 00:29:02,820
streamlining

617
00:29:02,820 --> 00:29:08,220
is a base I would say it's one of the

618
00:29:08,220 --> 00:29:11,520
goals ever ever since we took over the

619
00:29:11,520 --> 00:29:14,220
project in 2015 or 16. we have

620
00:29:14,220 --> 00:29:17,039
simplified so many things and there's

621
00:29:17,039 --> 00:29:20,159
still things that can be easier easier

622
00:29:20,159 --> 00:29:23,100
to employ easier to develop easier to

623
00:29:23,100 --> 00:29:26,480
use in production easier to operate

624
00:29:26,480 --> 00:29:29,399
making everybody's life easier but it's

625
00:29:29,399 --> 00:29:31,260
hard work to get there and this whole

626
00:29:31,260 --> 00:29:34,559
PCR business has been going on for

627
00:29:34,559 --> 00:29:37,140
several years actually until we've we're

628
00:29:37,140 --> 00:29:41,340
finally ready CRS 3 has uh

629
00:29:41,340 --> 00:29:43,860
quite a few rules I'd say it's one two

630
00:29:43,860 --> 00:29:45,200
dozen

631
00:29:45,200 --> 00:29:49,620
that use uh pcre dialect and receivers

632
00:29:49,620 --> 00:29:52,080
four we're done with that

633
00:29:52,080 --> 00:29:55,200
and finally we added a lot a lot of

634
00:29:55,200 --> 00:29:59,279
tests with every CRS release we added

635
00:29:59,279 --> 00:30:02,520
more tests and we have streamlined this

636
00:30:02,520 --> 00:30:04,399
again or

637
00:30:04,399 --> 00:30:07,260
Consolidated so we have positive and

638
00:30:07,260 --> 00:30:09,779
negative tests on each and every Rule

639
00:30:09,779 --> 00:30:10,500
now

640
00:30:10,500 --> 00:30:12,659
this is of course very useful for us

641
00:30:12,659 --> 00:30:15,840
that's quality measure for us if we

642
00:30:15,840 --> 00:30:17,760
change a rule tests already in place

643
00:30:17,760 --> 00:30:20,279
we'll hopefully immediately notice but

644
00:30:20,279 --> 00:30:22,320
rule no longer works but it's also very

645
00:30:22,320 --> 00:30:24,659
useful for users for example you can

646
00:30:24,659 --> 00:30:27,179
take our test suite and test it against

647
00:30:27,179 --> 00:30:30,120
a cloud provider I can say is this

648
00:30:30,120 --> 00:30:34,940
really blocked is this really working

649
00:30:34,940 --> 00:30:39,059
right now the tests work by looking at

650
00:30:39,059 --> 00:30:41,039
the log file so using it against the

651
00:30:41,039 --> 00:30:43,799
cloud provider is not so easy but

652
00:30:43,799 --> 00:30:47,700
ongoing development is to look at the

653
00:30:47,700 --> 00:30:49,980
status code no longer look at the log

654
00:30:49,980 --> 00:30:52,740
file bit the correct rule trigger no

655
00:30:52,740 --> 00:30:55,620
look at the error code and see oh

656
00:30:55,620 --> 00:30:58,380
apparently the following rule must have

657
00:30:58,380 --> 00:31:01,200
triggered because the attack payload has

658
00:31:01,200 --> 00:31:02,220
been

659
00:31:02,220 --> 00:31:05,460
has been detected this obviously only

660
00:31:05,460 --> 00:31:08,039
works if you have a test that is

661
00:31:08,039 --> 00:31:10,980
distinct that is atomic in the sense

662
00:31:10,980 --> 00:31:15,659
that it is only triggering a single rule

663
00:31:15,659 --> 00:31:19,860
and if that test is being blocked by a

664
00:31:19,860 --> 00:31:22,200
cloud provider then you know they have

665
00:31:22,200 --> 00:31:24,960
the following CRS rule enabled and if

666
00:31:24,960 --> 00:31:26,159
it's not

667
00:31:26,159 --> 00:31:30,179
but our test Suite says it should then

668
00:31:30,179 --> 00:31:31,980
you know they have disabled a certain

669
00:31:31,980 --> 00:31:34,140
rule and

670
00:31:34,140 --> 00:31:36,299
and then you could also start to compare

671
00:31:36,299 --> 00:31:39,059
different valve products so our test

672
00:31:39,059 --> 00:31:41,880
Suite is really important uh important

673
00:31:41,880 --> 00:31:44,340
for us and we will grow in importance As

674
00:31:44,340 --> 00:31:46,260
you move forwards because the tests will

675
00:31:46,260 --> 00:31:50,659
be clearer more narrow more to the point

676
00:31:50,659 --> 00:31:52,980
very useful

677
00:31:52,980 --> 00:31:57,120
good uh the plugins so all rule

678
00:31:57,120 --> 00:31:59,100
exclusions are now plugins we used to

679
00:31:59,100 --> 00:32:02,039
provide rule exclusions packages that

680
00:32:02,039 --> 00:32:05,520
means if you're running WordPress the

681
00:32:05,520 --> 00:32:09,419
following rules are likely to trigger

682
00:32:09,419 --> 00:32:13,440
so what we're doing is giving you a

683
00:32:13,440 --> 00:32:16,080
package of rule exclusions that will

684
00:32:16,080 --> 00:32:18,120
disable the following rule in the

685
00:32:18,120 --> 00:32:20,220
WordPress context

686
00:32:20,220 --> 00:32:24,840
and we did this we had this for uh

687
00:32:24,840 --> 00:32:31,500
for WordPress for Drupal for PHP uh PB

688
00:32:31,500 --> 00:32:34,980
Forum several other standard softwares

689
00:32:34,980 --> 00:32:38,399
not too many half a dozen or a dozen but

690
00:32:38,399 --> 00:32:40,020
still useful

691
00:32:40,020 --> 00:32:43,260
and we move that to plugins also to make

692
00:32:43,260 --> 00:32:45,899
it easier for these communities around

693
00:32:45,899 --> 00:32:48,120
standard software to write rule

694
00:32:48,120 --> 00:32:50,279
exclusion plugins themselves provide

695
00:32:50,279 --> 00:32:52,679
them themselves then we can list them in

696
00:32:52,679 --> 00:32:55,559
our plugin registry so all the rule

697
00:32:55,559 --> 00:32:57,480
exclusions are now plugins we have an

698
00:32:57,480 --> 00:32:59,700
antivirus plugin see your mod security

699
00:32:59,700 --> 00:33:03,179
has antivirus functionality or it allows

700
00:33:03,179 --> 00:33:05,760
you to integrate an antivirus soft looks

701
00:33:05,760 --> 00:33:09,179
relatively easy just can file uploads

702
00:33:09,179 --> 00:33:11,640
and we didn't support this because it's

703
00:33:11,640 --> 00:33:14,179
it's a complicated mod security

704
00:33:14,179 --> 00:33:17,700
functionality to do so it usually works

705
00:33:17,700 --> 00:33:20,820
via Lua code embedded in the web server

706
00:33:20,820 --> 00:33:23,159
and we don't want that in Mainland CRS

707
00:33:23,159 --> 00:33:25,320
CRS supposed to be simple Cris is not

708
00:33:25,320 --> 00:33:27,360
supposed to be program code running on

709
00:33:27,360 --> 00:33:29,880
the buff however they're very useful

710
00:33:29,880 --> 00:33:32,340
situation where you want to have that so

711
00:33:32,340 --> 00:33:36,200
that's a plugin now antivirus plugin

712
00:33:36,200 --> 00:33:40,200
integrates with a

713
00:33:40,200 --> 00:33:43,740
wolf Basin span or antivirus filtering

714
00:33:43,740 --> 00:33:46,500
sorry not Basin but antivirus filtering

715
00:33:46,500 --> 00:33:49,380
like the standard spam key

716
00:33:49,380 --> 00:33:52,919
good then we have the outer decoding

717
00:33:52,919 --> 00:33:55,440
plugin you can

718
00:33:55,440 --> 00:33:58,140
you can encode your attack typically

719
00:33:58,140 --> 00:34:01,980
base64 but you can also hex encode an

720
00:34:01,980 --> 00:34:02,779
attack

721
00:34:02,779 --> 00:34:06,659
and as you maybe know

722
00:34:06,659 --> 00:34:10,199
database servers they hex decode queries

723
00:34:10,199 --> 00:34:13,918
you could submit an SQL query in HEX and

724
00:34:13,918 --> 00:34:16,199
the database server is very likely to

725
00:34:16,199 --> 00:34:19,139
execute it however crass is blind I mean

726
00:34:19,139 --> 00:34:23,339
hex encoded that looks really odd and

727
00:34:23,339 --> 00:34:26,339
and unless you teach mod security by the

728
00:34:26,339 --> 00:34:28,440
way the following payload is supposed to

729
00:34:28,440 --> 00:34:32,099
be hex encoded then mod security and CRS

730
00:34:32,099 --> 00:34:34,320
will be blind now there is an auto

731
00:34:34,320 --> 00:34:36,960
decoding plugin that will test

732
00:34:36,960 --> 00:34:40,020
whether this is hex encoded or not and

733
00:34:40,020 --> 00:34:42,899
whether it's base64 encoded or not or if

734
00:34:42,899 --> 00:34:45,418
it's URI encoded or not and if it is

735
00:34:45,418 --> 00:34:49,440
then it will automatically decode it so

736
00:34:49,440 --> 00:34:54,000
the hex 60 the hex encoded SQL query

737
00:34:54,000 --> 00:34:57,780
will become a readable SQL query then

738
00:34:57,780 --> 00:35:02,040
standard rule CRS rules apply and the

739
00:35:02,040 --> 00:35:05,700
attack will be detected

740
00:35:05,700 --> 00:35:10,079
and to subsequently blocked interesting

741
00:35:10,079 --> 00:35:12,960
on top is the auto decoding thus dual

742
00:35:12,960 --> 00:35:16,400
encoding on top so you can base 64

743
00:35:16,400 --> 00:35:19,500
encode a hex encoded SQL query and the

744
00:35:19,500 --> 00:35:21,540
auto decoding plugin the CRS will

745
00:35:21,540 --> 00:35:25,200
actually detect it of course this uses a

746
00:35:25,200 --> 00:35:29,040
lot of CPU but if you really really want

747
00:35:29,040 --> 00:35:30,960
to be secure in a high security setting

748
00:35:30,960 --> 00:35:32,700
that could really make

749
00:35:32,700 --> 00:35:35,220
uh sends we have a body decompress

750
00:35:35,220 --> 00:35:39,500
plugins because you can upload a

751
00:35:39,500 --> 00:35:44,520
request compressed request button and

752
00:35:44,520 --> 00:35:47,460
request responses and that plugin

753
00:35:47,460 --> 00:35:51,240
decompress them automatically and I

754
00:35:51,240 --> 00:35:53,460
don't run this myself so I cannot really

755
00:35:53,460 --> 00:35:56,040
tell you much about it how this works

756
00:35:56,040 --> 00:35:57,900
and when it is really really useful

757
00:35:57,900 --> 00:35:59,220
because usually you don't you don't want

758
00:35:59,220 --> 00:36:01,740
to have compression on the buff but the

759
00:36:01,740 --> 00:36:04,079
fake bot plugin I use myself what is a

760
00:36:04,079 --> 00:36:07,680
fake bot a flakebot is a is a client

761
00:36:07,680 --> 00:36:10,020
that pretends to be a search engine

762
00:36:10,020 --> 00:36:13,500
crawler it crawls your website

763
00:36:13,500 --> 00:36:16,920
faking a user agent belonging to one of

764
00:36:16,920 --> 00:36:18,839
the big search engines

765
00:36:18,839 --> 00:36:21,060
and you will probably allow it because

766
00:36:21,060 --> 00:36:22,800
hey you want to be indexed by the search

767
00:36:22,800 --> 00:36:23,820
engine

768
00:36:23,820 --> 00:36:25,260
uh

769
00:36:25,260 --> 00:36:27,900
and that's how they work around you your

770
00:36:27,900 --> 00:36:32,640
defenses however the fake bot makes a

771
00:36:32,640 --> 00:36:36,000
link between the client IP address and

772
00:36:36,000 --> 00:36:39,720
the user agent and it does a reverse

773
00:36:39,720 --> 00:36:42,780
lookup and take the idea of the Twitter

774
00:36:42,780 --> 00:36:46,020
bot for example tweet about scans the

775
00:36:46,020 --> 00:36:48,540
internet across the internet or looks up

776
00:36:48,540 --> 00:36:51,480
links on the internet whatever and it's

777
00:36:51,480 --> 00:36:53,460
when it does so we'll actually be a

778
00:36:53,460 --> 00:36:55,260
request it says a new generator hey I'm

779
00:36:55,260 --> 00:36:57,599
the Twitter bot so we do a reverse

780
00:36:57,599 --> 00:37:00,420
lookup on the IP address

781
00:37:00,420 --> 00:37:04,079
and if that says hey I'm a free server

782
00:37:04,079 --> 00:37:06,900
from digitalocean and go hold on you're

783
00:37:06,900 --> 00:37:09,180
not tweet about because Twitter bought

784
00:37:09,180 --> 00:37:11,820
the IP address of Twitter resolves to

785
00:37:11,820 --> 00:37:13,680
trade about we know that that is

786
00:37:13,680 --> 00:37:16,020
guaranteed to work and if you're on a

787
00:37:16,020 --> 00:37:18,839
cheap online server that you that you

788
00:37:18,839 --> 00:37:20,400
purchase somebody installed somewhere

789
00:37:20,400 --> 00:37:22,079
then you're not tweet about and we're

790
00:37:22,079 --> 00:37:24,599
going to flag you as a fake bot and

791
00:37:24,599 --> 00:37:26,940
we're going to block you and ever since

792
00:37:26,940 --> 00:37:29,640
I've been running this about a third of

793
00:37:29,640 --> 00:37:33,359
the surge engine crawlers are

794
00:37:33,359 --> 00:37:36,300
are now identified as fake Bots we can

795
00:37:36,300 --> 00:37:38,040
block them immediately and I think

796
00:37:38,040 --> 00:37:39,480
that's quite substantial namely if

797
00:37:39,480 --> 00:37:42,000
you're a big big site so that that's

798
00:37:42,000 --> 00:37:45,000
quite useful and we can easily expand

799
00:37:45,000 --> 00:37:48,119
the fake bot to additional uh user

800
00:37:48,119 --> 00:37:51,060
agents or that are known to come from

801
00:37:51,060 --> 00:37:53,640
here and known IP addresses that

802
00:37:53,640 --> 00:37:55,619
actually resolve this thing and then we

803
00:37:55,619 --> 00:37:58,740
have a Google all out to a plugin that

804
00:37:58,740 --> 00:38:03,000
simplifies using Google or out too this

805
00:38:03,000 --> 00:38:06,180
is not Google or by itself but if you

806
00:38:06,180 --> 00:38:09,780
are using Google oauth then this plugin

807
00:38:09,780 --> 00:38:12,720
actually helps you work with CRS so

808
00:38:12,720 --> 00:38:16,079
these are all the the plugins that crs4

809
00:38:16,079 --> 00:38:18,480
will be released with you can use them

810
00:38:18,480 --> 00:38:20,160
already

811
00:38:20,160 --> 00:38:22,560
uh but it will take a bit of tweaking

812
00:38:22,560 --> 00:38:25,380
and monster S4 comes out it will be

813
00:38:25,380 --> 00:38:27,960
super easy to use all these plugins

814
00:38:27,960 --> 00:38:30,540
good yes there's still two in the making

815
00:38:30,540 --> 00:38:32,820
they're not done yet and this was

816
00:38:32,820 --> 00:38:36,660
existing crs3 functionality there's now

817
00:38:36,660 --> 00:38:39,839
being moved into the plug-in

818
00:38:39,839 --> 00:38:42,839
architecture we're not yet there

819
00:38:42,839 --> 00:38:46,140
good what new rules do we have we're

820
00:38:46,140 --> 00:38:48,260
better at server side request for entry

821
00:38:48,260 --> 00:38:51,780
uh we're better detecting this we have

822
00:38:51,780 --> 00:38:54,660
new rules that no common server side

823
00:38:54,660 --> 00:38:56,960
request forgery patterns

824
00:38:56,960 --> 00:38:59,460
where they reach out over the internet

825
00:38:59,460 --> 00:39:02,640
to known IP addresses or it looks as if

826
00:39:02,640 --> 00:39:04,740
they reach out over the internet to an

827
00:39:04,740 --> 00:39:08,460
IP address we detect all this in various

828
00:39:08,460 --> 00:39:10,859
crazy formats you can express an IP

829
00:39:10,859 --> 00:39:13,920
address in octal

830
00:39:13,920 --> 00:39:15,839
how do you call it an alcoholic encoding

831
00:39:15,839 --> 00:39:17,700
and it's still an IP address and it

832
00:39:17,700 --> 00:39:20,520
works Linux will happily make such HTTP

833
00:39:20,520 --> 00:39:23,400
requests and we've identified octal

834
00:39:23,400 --> 00:39:24,900
encoded

835
00:39:24,900 --> 00:39:28,079
IP addresses for example

836
00:39:28,079 --> 00:39:31,079
we added rules for the three email

837
00:39:31,079 --> 00:39:35,339
protocols I mean that's quite unusual to

838
00:39:35,339 --> 00:39:39,119
do a pop attack via HTTP but it exists

839
00:39:39,119 --> 00:39:42,680
and now we will detect it

840
00:39:42,800 --> 00:39:45,540
enhance the rule set a bit for lock for

841
00:39:45,540 --> 00:39:47,960
shell and for spring for Shell as well

842
00:39:47,960 --> 00:39:50,579
we had decent rules against lock for

843
00:39:50,579 --> 00:39:54,000
Shell the moment it came out however uh

844
00:39:54,000 --> 00:39:56,160
the way this developed relatively

845
00:39:56,160 --> 00:39:59,099
quickly we had to add addition an

846
00:39:59,099 --> 00:40:01,320
additional rule we were not covering

847
00:40:01,320 --> 00:40:05,280
against all the evasions uh that were

848
00:40:05,280 --> 00:40:08,099
popping up within a few days or weeks so

849
00:40:08,099 --> 00:40:10,440
we had to add an additional rule protect

850
00:40:10,440 --> 00:40:13,020
against lab for a shell and we have

851
00:40:13,020 --> 00:40:15,180
common web shell detection so if

852
00:40:15,180 --> 00:40:17,040
somebody installs a web shall news

853
00:40:17,040 --> 00:40:20,460
against using it over your web server we

854
00:40:20,460 --> 00:40:22,920
will probably the tactic we have I think

855
00:40:22,920 --> 00:40:26,339
more than 50 or 50 40 or 50 web shells

856
00:40:26,339 --> 00:40:30,000
that we detect now on the way out in

857
00:40:30,000 --> 00:40:32,280
response rules and then we improve the

858
00:40:32,280 --> 00:40:33,960
detection across the board for remote

859
00:40:33,960 --> 00:40:35,460
command execution SQL injection

860
00:40:35,460 --> 00:40:37,920
cross-site strictly You Name It We

861
00:40:37,920 --> 00:40:40,800
improved the rule set and we're still

862
00:40:40,800 --> 00:40:43,200
doing that I talked about the bug Bounty

863
00:40:43,200 --> 00:40:46,920
of course the bug Bounty brought to

864
00:40:46,920 --> 00:40:50,700
light existing attacks

865
00:40:50,700 --> 00:40:53,880
and that bypassed the rule set

866
00:40:53,880 --> 00:40:56,420
and we're approving the detection now

867
00:40:56,420 --> 00:40:59,579
based on these findings

868
00:40:59,579 --> 00:41:01,440
let me come to the release plan it's

869
00:41:01,440 --> 00:41:04,560
originally planned for May June 2022 and

870
00:41:04,560 --> 00:41:06,240
then the moment we announced we're going

871
00:41:06,240 --> 00:41:11,460
to release in May June 2022 uh that bug

872
00:41:11,460 --> 00:41:13,320
Bounty program launched I mean there was

873
00:41:13,320 --> 00:41:15,300
a bit The Coincidence was a bit

874
00:41:15,300 --> 00:41:17,940
unfortunate but apparently we have a

875
00:41:17,940 --> 00:41:21,119
sponsor doing this for us somebody paid

876
00:41:21,119 --> 00:41:23,099
for this pack Bounty so they got to

877
00:41:23,099 --> 00:41:24,720
decide when they were going to do this

878
00:41:24,720 --> 00:41:27,480
and they were ready in April so we had

879
00:41:27,480 --> 00:41:30,800
to be ready in April too

880
00:41:30,800 --> 00:41:32,339
and

881
00:41:32,339 --> 00:41:34,339
um

882
00:41:34,859 --> 00:41:38,280
they shot us to Pieces they found many

883
00:41:38,280 --> 00:41:40,440
many bike passes we kind of expected

884
00:41:40,440 --> 00:41:43,079
them but they also find found bypasses

885
00:41:43,079 --> 00:41:46,020
in higher paranoia levels and they also

886
00:41:46,020 --> 00:41:49,740
managed in one or two cases to bypass

887
00:41:49,740 --> 00:41:52,619
mod security altogether so there will be

888
00:41:52,619 --> 00:41:55,280
uh

889
00:41:55,320 --> 00:41:57,540
there are enough vulnerabilities that we

890
00:41:57,540 --> 00:41:59,579
need to fix in mod security so we need

891
00:41:59,579 --> 00:42:01,980
to go approach thrustwave and Order

892
00:42:01,980 --> 00:42:03,440
integrators

893
00:42:03,440 --> 00:42:08,700
of CRS to uh or engines with talking to

894
00:42:08,700 --> 00:42:10,339
karasa as well

895
00:42:10,339 --> 00:42:13,200
about these weaknesses

896
00:42:13,200 --> 00:42:15,359
in the end in the mod security engines

897
00:42:15,359 --> 00:42:17,940
or implementations of the mods

898
00:42:17,940 --> 00:42:19,380
re-implementation of the mod security

899
00:42:19,380 --> 00:42:20,400
engine

900
00:42:20,400 --> 00:42:25,560
so the release plan no longer worked and

901
00:42:25,560 --> 00:42:29,040
we need to literally fix dozens of

902
00:42:29,040 --> 00:42:31,980
findings first because we can look at

903
00:42:31,980 --> 00:42:34,460
the release of series 4. again

904
00:42:34,460 --> 00:42:37,079
apparently this takes time it's really

905
00:42:37,079 --> 00:42:39,599
unfortunate but we cannot release

906
00:42:39,599 --> 00:42:42,480
when we know their weaknesses so we have

907
00:42:42,480 --> 00:42:44,579
to fix first and this postpones the

908
00:42:44,579 --> 00:42:47,220
release some of the filings will going

909
00:42:47,220 --> 00:42:50,460
to be backboarded so existing CRS three

910
00:42:50,460 --> 00:42:52,920
release lines were officially supporting

911
00:42:52,920 --> 00:42:58,079
CRS 3.3 sometimes out of 3.2 and users

912
00:42:58,079 --> 00:42:59,480
are still using

913
00:42:59,480 --> 00:43:04,319
3.1 so we're going to push backwards at

914
00:43:04,319 --> 00:43:07,260
least for three two and three three

915
00:43:07,260 --> 00:43:09,839
uh with some of these filings not all of

916
00:43:09,839 --> 00:43:12,420
them because we usually don't release

917
00:43:12,420 --> 00:43:16,260
new rules for all the releases

918
00:43:16,260 --> 00:43:17,819
because they bring new false positive

919
00:43:17,819 --> 00:43:20,460
that's why we don't do that

920
00:43:20,460 --> 00:43:23,339
but here we might have to do this

921
00:43:23,339 --> 00:43:25,800
for certain of these findings and then

922
00:43:25,800 --> 00:43:28,619
we'll do a new release plan once we see

923
00:43:28,619 --> 00:43:30,859
a bit clearer we're still

924
00:43:30,859 --> 00:43:34,319
recovering from the bug Bounty and we're

925
00:43:34,319 --> 00:43:37,040
still developing a plan how to address

926
00:43:37,040 --> 00:43:40,140
all these findings first we're now in

927
00:43:40,140 --> 00:43:42,420
the assessment phase where we look at

928
00:43:42,420 --> 00:43:45,000
the findings again and again until we

929
00:43:45,000 --> 00:43:46,579
are sure we have

930
00:43:46,579 --> 00:43:49,140
understood the real extent of the

931
00:43:49,140 --> 00:43:51,960
finding some of the findings are

932
00:43:51,960 --> 00:43:56,339
are more dangerous on second side maybe

933
00:43:56,339 --> 00:43:59,119
more dangerous that the reporter

934
00:43:59,119 --> 00:44:02,460
realized him or herself

935
00:44:02,460 --> 00:44:05,220
so we look at them again and again and

936
00:44:05,220 --> 00:44:07,260
we're prioritizing and we're adding

937
00:44:07,260 --> 00:44:09,540
severities it's all quite a bit of work

938
00:44:09,540 --> 00:44:11,099
so this is a bit tedious and it takes

939
00:44:11,099 --> 00:44:13,440
time but after summer we hope to be

940
00:44:13,440 --> 00:44:15,839
ready with a new release plan

941
00:44:15,839 --> 00:44:18,660
obviously delayed a bit of time

942
00:44:18,660 --> 00:44:22,319
good I'd like uh before I come to the

943
00:44:22,319 --> 00:44:23,640
end of my talk

944
00:44:23,640 --> 00:44:26,940
to thank our gold sponsors Engineers

945
00:44:26,940 --> 00:44:31,020
part of F5 and progress our gold spawns

946
00:44:31,020 --> 00:44:32,880
that we have one or two additional gold

947
00:44:32,880 --> 00:44:34,380
spawns that have you haven't announced

948
00:44:34,380 --> 00:44:37,140
yet and we also have a silver sponsor

949
00:44:37,140 --> 00:44:40,020
and Google who is sponsoring as part of

950
00:44:40,020 --> 00:44:41,700
their open source

951
00:44:41,700 --> 00:44:43,680
program

952
00:44:43,680 --> 00:44:45,660
and what we do with the sponsoring money

953
00:44:45,660 --> 00:44:47,339
is financing the death on YouTube

954
00:44:47,339 --> 00:44:50,280
program I mentioned that and we also

955
00:44:50,280 --> 00:44:53,940
finance a developer Summit last year so

956
00:44:53,940 --> 00:44:56,460
this keeps us going and I think it's a

957
00:44:56,460 --> 00:44:58,440
very nice model that we can provide

958
00:44:58,440 --> 00:45:02,160
support thanks to these sponsors and

959
00:45:02,160 --> 00:45:05,160
with this I think I'm perfectly in time

960
00:45:05,160 --> 00:45:07,619
and I'm done with my presentation

961
00:45:07,619 --> 00:45:10,579
happy to answer to your questions

962
00:45:10,579 --> 00:45:14,280
I plan to post that you Uris you saw

963
00:45:14,280 --> 00:45:17,180
this dark reading article Etc on Twitter

964
00:45:17,180 --> 00:45:19,619
after the presentation so maybe you want

965
00:45:19,619 --> 00:45:20,940
to follow me if you're not doing that

966
00:45:20,940 --> 00:45:23,940
already and with that I'm open to the

967
00:45:23,940 --> 00:45:25,020
questions

968
00:45:25,020 --> 00:45:28,079
great thank you very much Christian for

969
00:45:28,079 --> 00:45:30,540
for the great overview of the CS4

970
00:45:30,540 --> 00:45:33,599
including the sandbox and what's what's

971
00:45:33,599 --> 00:45:35,579
been added as well as the release plan

972
00:45:35,579 --> 00:45:38,400
and we actually quite got quite a few

973
00:45:38,400 --> 00:45:41,460
questions from the audience cool so the

974
00:45:41,460 --> 00:45:45,000
first one is uh by Valentine who asked

975
00:45:45,000 --> 00:45:46,740
about the research done from tuomo

976
00:45:46,740 --> 00:45:49,440
Makonnen that is from 2020. is there any

977
00:45:49,440 --> 00:45:51,599
reason you believe the scores are still

978
00:45:51,599 --> 00:45:53,880
similar or do you think the cloud was

979
00:45:53,880 --> 00:45:57,720
has improved yeah yeah uh um I think

980
00:45:57,720 --> 00:46:00,839
they're they're similar because the blog

981
00:46:00,839 --> 00:46:02,000
post

982
00:46:02,000 --> 00:46:04,560
confirmed our impression which has never

983
00:46:04,560 --> 00:46:05,940
had the numbers

984
00:46:05,940 --> 00:46:09,839
but uh yeah let's say our feeling was

985
00:46:09,839 --> 00:46:12,960
that the Azure had better coverage than

986
00:46:12,960 --> 00:46:14,579
cloudflare

987
00:46:14,579 --> 00:46:18,540
by just dealing with it working with

988
00:46:18,540 --> 00:46:21,780
customers sometime I'm I'm working on uh

989
00:46:21,780 --> 00:46:24,599
professionally on CRS my impression was

990
00:46:24,599 --> 00:46:26,940
that Azure is better and he proved it

991
00:46:26,940 --> 00:46:31,200
and the the release cycles of these uh

992
00:46:31,200 --> 00:46:33,119
commercial integrators are relatively

993
00:46:33,119 --> 00:46:36,480
slow I mean if you go to Azure you will

994
00:46:36,480 --> 00:46:38,819
see that they're really supporting old

995
00:46:38,819 --> 00:46:40,859
CRS releases

996
00:46:40,859 --> 00:46:43,680
so I think they're slow in picking up

997
00:46:43,680 --> 00:46:45,900
and why are they slow because they're

998
00:46:45,900 --> 00:46:47,819
really afraid of false positive false

999
00:46:47,819 --> 00:46:51,300
positives are a major major issue for a

1000
00:46:51,300 --> 00:46:53,220
commercial buff provider and the reason

1001
00:46:53,220 --> 00:46:56,760
that cloudflare has uh less good

1002
00:46:56,760 --> 00:47:00,480
coverage for certain attack classes is

1003
00:47:00,480 --> 00:47:03,599
false positive I mean they they get too

1004
00:47:03,599 --> 00:47:07,380
many hits on otherwise Happy users

1005
00:47:07,380 --> 00:47:10,020
and that is risky for them if you if you

1006
00:47:10,020 --> 00:47:12,480
get money from selling above then you

1007
00:47:12,480 --> 00:47:15,119
don't want to see a web application a

1008
00:47:15,119 --> 00:47:18,300
false positive because the customer will

1009
00:47:18,300 --> 00:47:20,400
be pissed I mean if you lose sales

1010
00:47:20,400 --> 00:47:22,079
because of a false positive then you

1011
00:47:22,079 --> 00:47:24,960
will be pissed with the web provider so

1012
00:47:24,960 --> 00:47:27,060
I understand the commercial integrators

1013
00:47:27,060 --> 00:47:30,359
they need to guard some of how how many

1014
00:47:30,359 --> 00:47:32,040
false positive are they willing to

1015
00:47:32,040 --> 00:47:34,560
accept and different integrators have

1016
00:47:34,560 --> 00:47:36,240
different approach to that maybe found

1017
00:47:36,240 --> 00:47:39,119
different solutions to the problem we're

1018
00:47:39,119 --> 00:47:42,540
not really inside we talk to like all of

1019
00:47:42,540 --> 00:47:43,819
them by now

1020
00:47:43,819 --> 00:47:46,260
but we don't always know what they're

1021
00:47:46,260 --> 00:47:48,300
doing exactly and they have found

1022
00:47:48,300 --> 00:47:50,400
different solutions for many of them

1023
00:47:50,400 --> 00:47:53,460
it's only part of their security posture

1024
00:47:53,460 --> 00:47:56,819
they have additional measures on top and

1025
00:47:56,819 --> 00:47:59,579
you kind of buy a whole package from

1026
00:47:59,579 --> 00:48:01,980
them or you run CRS yourself and then

1027
00:48:01,980 --> 00:48:04,319
you're the King of the Hill and you use

1028
00:48:04,319 --> 00:48:06,480
exactly the rules that you want to so I

1029
00:48:06,480 --> 00:48:08,220
would say the image is relatively stable

1030
00:48:08,220 --> 00:48:10,859
it's not changing much

1031
00:48:10,859 --> 00:48:16,380
and news I didn't share uh is uh we're

1032
00:48:16,380 --> 00:48:19,140
working on a so-called status page where

1033
00:48:19,140 --> 00:48:22,680
we're going to do the work by drama Mark

1034
00:48:22,680 --> 00:48:26,819
Colin live so we're going to talk to the

1035
00:48:26,819 --> 00:48:29,400
cloudflare server like every day without

1036
00:48:29,400 --> 00:48:32,339
test suite and report back and say our

1037
00:48:32,339 --> 00:48:34,380
test Suite says the following rules are

1038
00:48:34,380 --> 00:48:35,880
active and the following rules are not

1039
00:48:35,880 --> 00:48:39,660
active on the following installation on

1040
00:48:39,660 --> 00:48:41,119
hws

1041
00:48:41,119 --> 00:48:43,940
hws also has a CRS offering by the way

1042
00:48:43,940 --> 00:48:46,740
there we get these rules in class we get

1043
00:48:46,740 --> 00:48:48,300
this on Azure you get the following and

1044
00:48:48,300 --> 00:48:50,579
faster you get the following and so on

1045
00:48:50,579 --> 00:48:54,300
so you'll be you'll be able to

1046
00:48:54,300 --> 00:48:56,040
differentiate between different

1047
00:48:56,040 --> 00:48:59,339
offerings will bring transparency to the

1048
00:48:59,339 --> 00:49:01,260
markets but we think we're going to

1049
00:49:01,260 --> 00:49:05,040
confirm dormas Marcon right interesting

1050
00:49:05,040 --> 00:49:07,380
thank you Christian

1051
00:49:07,380 --> 00:49:08,760
um there is another question it's

1052
00:49:08,760 --> 00:49:11,280
actually coming for myself and it's just

1053
00:49:11,280 --> 00:49:13,079
out of curiosity what are some of the

1054
00:49:13,079 --> 00:49:14,940
planned features for upcoming releases

1055
00:49:14,940 --> 00:49:19,819
of CSS oh we're going to do crs4 first

1056
00:49:19,819 --> 00:49:24,119
afterwards uh plan features

1057
00:49:24,119 --> 00:49:26,400
I can cannot really tell no the plug-in

1058
00:49:26,400 --> 00:49:30,960
architecture is so cool like I mean we

1059
00:49:30,960 --> 00:49:32,460
had this in mind it's so simple let's do

1060
00:49:32,460 --> 00:49:34,500
a plug-in architecture but once you do

1061
00:49:34,500 --> 00:49:37,859
it the ideas start to pop out

1062
00:49:37,859 --> 00:49:41,400
so we expect third-party plugins

1063
00:49:41,400 --> 00:49:45,359
and we expect to be an inspiration and

1064
00:49:45,359 --> 00:49:47,780
be inspired ourselves to write plugins

1065
00:49:47,780 --> 00:49:51,119
and and we can later on decide hey let's

1066
00:49:51,119 --> 00:49:53,099
take this into the standard rule set

1067
00:49:53,099 --> 00:49:55,140
like say hey look this plugin is really

1068
00:49:55,140 --> 00:49:57,420
popular that's really working like this

1069
00:49:57,420 --> 00:50:00,180
fake bot thing is so cool it's so simple

1070
00:50:00,180 --> 00:50:02,760
and it really works so I think the

1071
00:50:02,760 --> 00:50:05,819
plugin can be like a test bed or the

1072
00:50:05,819 --> 00:50:08,099
crazy stuff is being tried out and and

1073
00:50:08,099 --> 00:50:10,079
the plugin this is where the movement is

1074
00:50:10,079 --> 00:50:12,599
going to be there we see new stuff and

1075
00:50:12,599 --> 00:50:15,300
then CRS the official release line will

1076
00:50:15,300 --> 00:50:17,819
be slower a bit more conservative where

1077
00:50:17,819 --> 00:50:20,040
you have to test that stuff and I cannot

1078
00:50:20,040 --> 00:50:21,920
really say

1079
00:50:21,920 --> 00:50:25,380
what is going to happen I guess we're

1080
00:50:25,380 --> 00:50:28,380
going to be more independent from the

1081
00:50:28,380 --> 00:50:31,560
engine so with koratza arriving mod

1082
00:50:31,560 --> 00:50:34,560
security maybe becoming Legacy uh

1083
00:50:34,560 --> 00:50:36,540
multiple commercial re-implementations

1084
00:50:36,540 --> 00:50:38,940
we become less depending on mod security

1085
00:50:38,940 --> 00:50:41,640
so that is certain a trend and also on

1086
00:50:41,640 --> 00:50:43,800
our a road map we want to become

1087
00:50:43,800 --> 00:50:46,800
independent and that means we're going

1088
00:50:46,800 --> 00:50:48,740
to be more

1089
00:50:48,740 --> 00:50:52,579
rule language agnostic and we are now

1090
00:50:52,579 --> 00:50:55,020
depending apparently on The Mod security

1091
00:50:55,020 --> 00:50:56,760
rule language and if you've read mod

1092
00:50:56,760 --> 00:50:58,680
security rule language yourself then

1093
00:50:58,680 --> 00:51:00,359
that is really painful

1094
00:51:00,359 --> 00:51:03,000
but if we say the intelligence is in the

1095
00:51:03,000 --> 00:51:04,740
rules that means actually in the regular

1096
00:51:04,740 --> 00:51:05,880
expression

1097
00:51:05,880 --> 00:51:07,559
and why do we have to express the

1098
00:51:07,559 --> 00:51:09,240
regular expression in a mod security

1099
00:51:09,240 --> 00:51:11,280
rule language I can take the regular

1100
00:51:11,280 --> 00:51:13,800
expression and use it as a Java input

1101
00:51:13,800 --> 00:51:16,079
validation filter

1102
00:51:16,079 --> 00:51:18,780
so and technically it's relatively easy

1103
00:51:18,780 --> 00:51:20,760
it's already been done by the way and we

1104
00:51:20,760 --> 00:51:22,920
could say hey let's become really

1105
00:51:22,920 --> 00:51:26,880
independent let's have transformation

1106
00:51:26,880 --> 00:51:30,359
tools that allow you to use CRS on your

1107
00:51:30,359 --> 00:51:31,760
existing framework

1108
00:51:31,760 --> 00:51:35,579
and there is a commercial users doing

1109
00:51:35,579 --> 00:51:38,940
this already and we see developing that

1110
00:51:38,940 --> 00:51:40,920
direction as well I'm taking too much

1111
00:51:40,920 --> 00:51:42,839
time for these questions oh that's just

1112
00:51:42,839 --> 00:51:44,579
great thank you

1113
00:51:44,579 --> 00:51:46,619
um and for for everybody there's some

1114
00:51:46,619 --> 00:51:48,960
more questions but if you just head to

1115
00:51:48,960 --> 00:51:51,300
the slack Channel or just on the mova

1116
00:51:51,300 --> 00:51:53,339
app and just get in touch directly with

1117
00:51:53,339 --> 00:51:54,420
Christian

1118
00:51:54,420 --> 00:51:55,980
um just to to answer your question I

1119
00:51:55,980 --> 00:51:57,960
mean he's very active in the community

1120
00:51:57,960 --> 00:52:00,660
and I'm certain that uh we all of the

1121
00:52:00,660 --> 00:52:02,280
answer will be covered there

1122
00:52:02,280 --> 00:52:04,619
sure so thank you Christian very much

1123
00:52:04,619 --> 00:52:07,200
for uh presenting your the the project

1124
00:52:07,200 --> 00:52:10,319
updates really glad to have you here

1125
00:52:10,319 --> 00:52:11,760
um and all like the the interesting

1126
00:52:11,760 --> 00:52:13,079
updates there's a lot of things to come

1127
00:52:13,079 --> 00:52:14,579
I see um

1128
00:52:14,579 --> 00:52:17,579
and as I said there's also it's a very

1129
00:52:17,579 --> 00:52:19,440
active project so if you want to get

1130
00:52:19,440 --> 00:52:22,260
involved just hatch to the ovas project

1131
00:52:22,260 --> 00:52:24,000
page get in touch with Christian

1132
00:52:24,000 --> 00:52:27,300
directly via slack Channel or just um

1133
00:52:27,300 --> 00:52:29,760
yeah go on the GitHub page and check out

1134
00:52:29,760 --> 00:52:31,140
some of the issues

1135
00:52:31,140 --> 00:52:32,819
again thank you very much Christian for

1136
00:52:32,819 --> 00:52:34,140
attending today

1137
00:52:34,140 --> 00:52:36,780
and thanks for having me awesome enjoy

1138
00:52:36,780 --> 00:52:41,300
the rest of conference thank you bye

