1
00:00:04,140 --> 00:00:05,940
hey everyone welcome back to the

2
00:00:05,940 --> 00:00:08,400
defender track I'm Muhammad farahan a

3
00:00:08,400 --> 00:00:10,260
volunteer in awas community and I'll be

4
00:00:10,260 --> 00:00:12,719
moderating this session uh during the

5
00:00:12,719 --> 00:00:14,519
next 45 minutes you'll be listening to

6
00:00:14,519 --> 00:00:17,279
jenko Wong present defending against new

7
00:00:17,279 --> 00:00:19,560
fishing attacks that abuse Earth

8
00:00:19,560 --> 00:00:22,380
authorization form so please submit if

9
00:00:22,380 --> 00:00:23,640
you have any questions during the

10
00:00:23,640 --> 00:00:25,740
session the Q a tab just write to this

11
00:00:25,740 --> 00:00:27,960
video on the Hoover platform I'll be

12
00:00:27,960 --> 00:00:29,519
asking you questions in the last 10

13
00:00:29,519 --> 00:00:32,279
minutes of this session please note that

14
00:00:32,279 --> 00:00:34,079
the chat function in Zoom is disabled

15
00:00:34,079 --> 00:00:36,120
for that indeed so you can leave all

16
00:00:36,120 --> 00:00:40,160
your comments in the chat tab in Hoover

17
00:00:47,239 --> 00:00:50,039
research team researching emerging Cloud

18
00:00:50,039 --> 00:00:52,680
threads prior to net scope he has held

19
00:00:52,680 --> 00:00:53,940
roles in product management and

20
00:00:53,940 --> 00:00:56,340
Engineering at companies such as Cisco

21
00:00:56,340 --> 00:00:59,460
typco as well as security startups uh

22
00:00:59,460 --> 00:01:00,899
which had markets invulnerability

23
00:01:00,899 --> 00:01:02,940
scanning antivirus and these spam

24
00:01:02,940 --> 00:01:04,979
appliances penetration testing threat

25
00:01:04,979 --> 00:01:06,780
intelligence and active directory

26
00:01:06,780 --> 00:01:09,720
security he has had product production

27
00:01:09,720 --> 00:01:11,460
deployments at Enterprise customers

28
00:01:11,460 --> 00:01:14,220
including world mod Microsoft listen

29
00:01:14,220 --> 00:01:16,320
Chase and European pranks so welcome

30
00:01:16,320 --> 00:01:21,119
Genco to the Avast global app CPU otu

31
00:01:21,119 --> 00:01:24,420
thank you Farhan uh thanks everyone for

32
00:01:24,420 --> 00:01:26,640
attending I'm appreciative of the

33
00:01:26,640 --> 00:01:29,100
opportunity to speak at virtual appsec

34
00:01:29,100 --> 00:01:31,680
we have a lot of content I'd like to

35
00:01:31,680 --> 00:01:33,600
talk about how we can defend against a

36
00:01:33,600 --> 00:01:36,119
new class of attacks that are targeting

37
00:01:36,119 --> 00:01:39,360
and using oauth itself

38
00:01:39,360 --> 00:01:42,840
so we have a lot to cover and apologize

39
00:01:42,840 --> 00:01:45,479
in advance we may get um some

40
00:01:45,479 --> 00:01:46,979
information overload but I'll do my best

41
00:01:46,979 --> 00:01:48,960
to abstract it so that you can take away

42
00:01:48,960 --> 00:01:52,560
some key key items so really we want to

43
00:01:52,560 --> 00:01:53,520
talk about what we have to do

44
00:01:53,520 --> 00:01:56,220
differently which really presumes that

45
00:01:56,220 --> 00:01:59,100
we know what's changing on the tax side

46
00:01:59,100 --> 00:02:01,799
and in short what we'll go through in

47
00:02:01,799 --> 00:02:05,399
the next 45 or 50 minutes is a lot of

48
00:02:05,399 --> 00:02:08,220
our assumptions no longer apply a lot of

49
00:02:08,220 --> 00:02:10,020
the defensive controls that we've used

50
00:02:10,020 --> 00:02:12,599
to prevent phishing attacks or

51
00:02:12,599 --> 00:02:15,900
credential attacks are not as effective

52
00:02:15,900 --> 00:02:19,020
or are ineffective we have a high focus

53
00:02:19,020 --> 00:02:22,140
on domain and URL filtering right now

54
00:02:22,140 --> 00:02:24,480
not only for phishing but also for

55
00:02:24,480 --> 00:02:27,599
malware delivery in the new world with

56
00:02:27,599 --> 00:02:31,680
oauth those aren't effective anymore and

57
00:02:31,680 --> 00:02:33,900
we'll talk about why

58
00:02:33,900 --> 00:02:37,980
if oauth credentials are compromised MFA

59
00:02:37,980 --> 00:02:40,379
controls are bypassed effectively they

60
00:02:40,379 --> 00:02:42,000
don't apply so some of our assumptions

61
00:02:42,000 --> 00:02:43,800
of mitigating compromise credentials

62
00:02:43,800 --> 00:02:46,500
don't apply in some cases depending on

63
00:02:46,500 --> 00:02:49,379
the vendor environment it is really easy

64
00:02:49,379 --> 00:02:51,860
for the attacker to move laterally

65
00:02:51,860 --> 00:02:54,360
within your environment

66
00:02:54,360 --> 00:02:56,580
the logging and auditing that is done

67
00:02:56,580 --> 00:02:59,700
with oauth activities is immature and

68
00:02:59,700 --> 00:03:03,180
minimal so all of our detection tooling

69
00:03:03,180 --> 00:03:05,640
and controls are hindered and

70
00:03:05,640 --> 00:03:07,519
handicapped because of a lack of

71
00:03:07,519 --> 00:03:11,220
information and should you be fortunate

72
00:03:11,220 --> 00:03:13,700
to know that you are compromised

73
00:03:13,700 --> 00:03:16,620
remediating the situation namely

74
00:03:16,620 --> 00:03:19,500
revoking access can be a challenge at

75
00:03:19,500 --> 00:03:21,300
best so this is what we're going to talk

76
00:03:21,300 --> 00:03:23,700
about and and why are we in the stage

77
00:03:23,700 --> 00:03:26,400
you might ask it's because attackers are

78
00:03:26,400 --> 00:03:29,220
smart and they are adapting the tax to

79
00:03:29,220 --> 00:03:31,920
now be specific to the protocol at hand

80
00:03:31,920 --> 00:03:34,040
in this case we're talking about oauth

81
00:03:34,040 --> 00:03:37,140
which essentially is the de facto

82
00:03:37,140 --> 00:03:40,500
standard for users to dynamically Grant

83
00:03:40,500 --> 00:03:41,760
access

84
00:03:41,760 --> 00:03:44,159
to third-party applications

85
00:03:44,159 --> 00:03:47,900
to their Cloud resources

86
00:03:49,379 --> 00:03:52,260
so let's dive into oauth and get our

87
00:03:52,260 --> 00:03:53,879
hands around what

88
00:03:53,879 --> 00:03:58,140
what about it is causing us to change

89
00:03:58,140 --> 00:04:00,120
our view

90
00:04:00,120 --> 00:04:02,640
well as consumers we probably use oauth

91
00:04:02,640 --> 00:04:04,799
every single day you could be shopping

92
00:04:04,799 --> 00:04:07,379
at a website and as soon as you check

93
00:04:07,379 --> 00:04:09,659
out and use electronic payments in the

94
00:04:09,659 --> 00:04:11,700
U.S PayPal happens to be a little more

95
00:04:11,700 --> 00:04:12,900
popular

96
00:04:12,900 --> 00:04:15,480
what the third party application in this

97
00:04:15,480 --> 00:04:17,519
case the website does is redirect the

98
00:04:17,519 --> 00:04:20,699
user myself in this case to PayPal

99
00:04:20,699 --> 00:04:22,680
because the third party website wants

100
00:04:22,680 --> 00:04:25,440
secure access to a resource of mine my

101
00:04:25,440 --> 00:04:29,400
currency my my funds which are governed

102
00:04:29,400 --> 00:04:30,540
by PayPal

103
00:04:30,540 --> 00:04:33,960
and so I'm redirected that securely I'm

104
00:04:33,960 --> 00:04:35,940
just dealing with PayPal I do not store

105
00:04:35,940 --> 00:04:38,820
or give my username or password to the

106
00:04:38,820 --> 00:04:40,919
third party app so this is good this is

107
00:04:40,919 --> 00:04:42,660
an improvement in security and part of

108
00:04:42,660 --> 00:04:45,000
why oauth was designed

109
00:04:45,000 --> 00:04:47,639
I go through authentication it could be

110
00:04:47,639 --> 00:04:50,580
more rigorous with multi-factor and

111
00:04:50,580 --> 00:04:52,560
ultimately I get to the last screen

112
00:04:52,560 --> 00:04:55,020
which is the authorization screen this

113
00:04:55,020 --> 00:04:57,960
is where I approve as a user yes

114
00:04:57,960 --> 00:05:00,479
whatever this app is asking for this

115
00:05:00,479 --> 00:05:02,759
amount of money maybe on a recurring

116
00:05:02,759 --> 00:05:05,460
payment schedule I approve and I hit

117
00:05:05,460 --> 00:05:07,020
hit okay

118
00:05:07,020 --> 00:05:09,240
or continue and that works pretty well

119
00:05:09,240 --> 00:05:11,880
in the public internet we do not see

120
00:05:11,880 --> 00:05:14,639
breaches and hacks of that process when

121
00:05:14,639 --> 00:05:17,639
hackers attack that they go more

122
00:05:17,639 --> 00:05:20,699
directly to the vendors uh website or

123
00:05:20,699 --> 00:05:23,160
systems right they're not attacking uh

124
00:05:23,160 --> 00:05:25,440
oauth in that picture but let's talk

125
00:05:25,440 --> 00:05:27,000
about what's happening

126
00:05:27,000 --> 00:05:28,919
and what has been happening in the last

127
00:05:28,919 --> 00:05:30,780
year or two

128
00:05:30,780 --> 00:05:33,419
phishing attack it's called the illicit

129
00:05:33,419 --> 00:05:34,800
consent Grant and I want to review that

130
00:05:34,800 --> 00:05:36,419
quickly

131
00:05:36,419 --> 00:05:39,020
um before we move on so in this scenario

132
00:05:39,020 --> 00:05:41,520
and apologize we're going to get a

133
00:05:41,520 --> 00:05:43,020
little bit more technical here with the

134
00:05:43,020 --> 00:05:44,940
diagrams I have simplified the oauth

135
00:05:44,940 --> 00:05:47,580
flow this is not all of the details just

136
00:05:47,580 --> 00:05:49,020
so we can understand the different parts

137
00:05:49,020 --> 00:05:51,060
of the attack chain and what's happening

138
00:05:51,060 --> 00:05:52,860
there it starts with attacker not

139
00:05:52,860 --> 00:05:54,660
creating a fake website which is our

140
00:05:54,660 --> 00:05:57,180
traditional model of phishing but a fake

141
00:05:57,180 --> 00:06:00,000
oauth application it is a piece of code

142
00:06:00,000 --> 00:06:02,759
it could be a website it could also be a

143
00:06:02,759 --> 00:06:06,479
local or mobile desktop application

144
00:06:06,479 --> 00:06:09,740
uh the attacker must register that

145
00:06:09,740 --> 00:06:13,680
within an identity environment Azure

146
00:06:13,680 --> 00:06:15,120
we're talking about Microsoft in this

147
00:06:15,120 --> 00:06:17,820
this example but it could be any other

148
00:06:17,820 --> 00:06:20,039
application environment and they provide

149
00:06:20,039 --> 00:06:22,199
a couple things uh the permissions that

150
00:06:22,199 --> 00:06:24,000
they're going to ask the user of have to

151
00:06:24,000 --> 00:06:28,199
be itemized uh a redirection URL which

152
00:06:28,199 --> 00:06:30,960
is a way to be notified of important

153
00:06:30,960 --> 00:06:33,660
information during the oauth handshake

154
00:06:33,660 --> 00:06:35,880
process it's it's how the attackers app

155
00:06:35,880 --> 00:06:38,580
gets ultimately gets codes that that

156
00:06:38,580 --> 00:06:41,220
give them credentials and we'll talk

157
00:06:41,220 --> 00:06:42,960
about that later and then they might

158
00:06:42,960 --> 00:06:44,460
have to go through a verification or

159
00:06:44,460 --> 00:06:46,440
validation process

160
00:06:46,440 --> 00:06:49,199
so what's changed now is playing within

161
00:06:49,199 --> 00:06:51,000
the oauth world and creating an actual

162
00:06:51,000 --> 00:06:54,240
oauth app which is important they will

163
00:06:54,240 --> 00:06:56,639
fish the victim and try to give them a

164
00:06:56,639 --> 00:06:57,419
link

165
00:06:57,419 --> 00:06:59,940
that doesn't go to a website but in this

166
00:06:59,940 --> 00:07:01,860
case sends them off to the identity

167
00:07:01,860 --> 00:07:04,680
provider this is Microsoft as an example

168
00:07:04,680 --> 00:07:09,180
so it would be to Microsoft ad and azure

169
00:07:09,180 --> 00:07:11,580
just like the shopping example the user

170
00:07:11,580 --> 00:07:12,960
will be presented with do you want to

171
00:07:12,960 --> 00:07:17,600
Grant this o365 access app uh you know

172
00:07:17,600 --> 00:07:20,160
certain privileges it might show a

173
00:07:20,160 --> 00:07:22,800
screen like this this would be presented

174
00:07:22,800 --> 00:07:24,720
by Microsoft some of the information

175
00:07:24,720 --> 00:07:28,979
here was created by the attacker such as

176
00:07:28,979 --> 00:07:30,479
the list of permissions and you can see

177
00:07:30,479 --> 00:07:32,460
in red there's perhaps an over

178
00:07:32,460 --> 00:07:35,639
privileged permission uh office this

179
00:07:35,639 --> 00:07:38,280
fake Office 365 app might be asking for

180
00:07:38,280 --> 00:07:42,120
full read write access to all files in

181
00:07:42,120 --> 00:07:43,319
OneDrive

182
00:07:43,319 --> 00:07:46,199
and but this is coming from Microsoft if

183
00:07:46,199 --> 00:07:47,819
you looked at the URL traffic it's

184
00:07:47,819 --> 00:07:50,280
coming from valid domain so the user is

185
00:07:50,280 --> 00:07:52,740
tricked into accepting that and as soon

186
00:07:52,740 --> 00:07:55,139
as they do the authenticate and hit that

187
00:07:55,139 --> 00:07:58,319
authorization confirmation attackers won

188
00:07:58,319 --> 00:08:00,599
because they get

189
00:08:00,599 --> 00:08:03,419
what they need which is the oauth tokens

190
00:08:03,419 --> 00:08:07,460
and all the rest API calls today

191
00:08:07,460 --> 00:08:10,319
support oauth tokens directly that's

192
00:08:10,319 --> 00:08:12,599
everyone's adopted it and so now the

193
00:08:12,599 --> 00:08:15,419
attacker has full access as that user

194
00:08:15,419 --> 00:08:17,880
for that list of permissions to the

195
00:08:17,880 --> 00:08:20,220
resource in question right so if we fish

196
00:08:20,220 --> 00:08:23,280
right the attacker in this case would

197
00:08:23,280 --> 00:08:26,340
have access to OneDrive as well as maybe

198
00:08:26,340 --> 00:08:29,639
the regular office data and today the

199
00:08:29,639 --> 00:08:31,500
cloud resources of course are immense

200
00:08:31,500 --> 00:08:33,659
right it is not just your office and

201
00:08:33,659 --> 00:08:35,580
your email it's your Azure Cloud

202
00:08:35,580 --> 00:08:38,339
environment your Google it's a cloud

203
00:08:38,339 --> 00:08:40,799
environment it's your Salesforce or your

204
00:08:40,799 --> 00:08:43,500
CRM it's your your Dropbox and your

205
00:08:43,500 --> 00:08:45,720
corporate box whatever you may use

206
00:08:45,720 --> 00:08:48,440
Google Drive Etc

207
00:08:48,440 --> 00:08:50,940
so in this case you can start to see

208
00:08:50,940 --> 00:08:52,620
that attackers are adapting to the

209
00:08:52,620 --> 00:08:53,640
protocol

210
00:08:53,640 --> 00:08:57,360
what about the defenses okay this this

211
00:08:57,360 --> 00:08:58,920
is the probably one of the easiest

212
00:08:58,920 --> 00:09:01,560
attacks well the problem is in blue I've

213
00:09:01,560 --> 00:09:04,320
outlined sort of natural points where we

214
00:09:04,320 --> 00:09:06,420
might assume we have defenses based on

215
00:09:06,420 --> 00:09:09,000
our past thinking with with uh fishing

216
00:09:09,000 --> 00:09:11,880
of traditional websites URL inspection I

217
00:09:11,880 --> 00:09:14,040
had mentioned earlier and makes sense is

218
00:09:14,040 --> 00:09:16,080
a key component of today's phishing

219
00:09:16,080 --> 00:09:18,839
defenses they are highly ineffective why

220
00:09:18,839 --> 00:09:21,720
because the URLs involved whether

221
00:09:21,720 --> 00:09:23,640
they're come inbound on the phishing

222
00:09:23,640 --> 00:09:27,000
message or after the user clicks same

223
00:09:27,000 --> 00:09:29,820
URL it's microsoft.com or a valid

224
00:09:29,820 --> 00:09:31,980
Microsoft domain a valid Microsoft

225
00:09:31,980 --> 00:09:34,200
search and it's common

226
00:09:34,200 --> 00:09:37,320
uh for the most part it is common to no

227
00:09:37,320 --> 00:09:39,480
matter which application is asking uh

228
00:09:39,480 --> 00:09:40,560
for permission

229
00:09:40,560 --> 00:09:44,459
so blocking that uh usually would bring

230
00:09:44,459 --> 00:09:47,459
your users uh productivity down to zero

231
00:09:47,459 --> 00:09:50,580
right and it's not viable well what else

232
00:09:50,580 --> 00:09:54,140
can we do well often if we move Beyond

233
00:09:54,140 --> 00:09:57,720
prevention we deal with techniques to

234
00:09:57,720 --> 00:09:59,339
mitigate compromise credentials

235
00:09:59,339 --> 00:10:02,160
multi-factor authentication if deployed

236
00:10:02,160 --> 00:10:04,260
can be highly effective traditionally

237
00:10:04,260 --> 00:10:06,360
with stolen or compromised credentials

238
00:10:06,360 --> 00:10:08,640
the problem is it's not effective in a

239
00:10:08,640 --> 00:10:10,320
token system what do I mean by that

240
00:10:10,320 --> 00:10:13,380
oauth is a temporary token system

241
00:10:13,380 --> 00:10:16,800
and all of these work much like web

242
00:10:16,800 --> 00:10:19,500
session uh which is another session

243
00:10:19,500 --> 00:10:21,839
token uh system

244
00:10:21,839 --> 00:10:24,779
authentication stuff done up front and

245
00:10:24,779 --> 00:10:28,440
then users are presented with a token

246
00:10:28,440 --> 00:10:29,880
that represents successful

247
00:10:29,880 --> 00:10:31,740
authentication it means that attacker

248
00:10:31,740 --> 00:10:33,899
will never be presented with another MFA

249
00:10:33,899 --> 00:10:37,140
challenge until that token expires or is

250
00:10:37,140 --> 00:10:39,720
invalidated and the problem with oauth

251
00:10:39,720 --> 00:10:44,519
is it is uh almost uh permanent as a

252
00:10:44,519 --> 00:10:46,320
model and we'll talk about that more but

253
00:10:46,320 --> 00:10:47,940
right now the key point to remember is

254
00:10:47,940 --> 00:10:51,300
MFA will not help it only applied to

255
00:10:51,300 --> 00:10:55,500
step when the user in step two and three

256
00:10:55,500 --> 00:10:57,600
was authenticating directly with

257
00:10:57,600 --> 00:10:59,640
Microsoft that's when MFA is presented

258
00:10:59,640 --> 00:11:01,920
well what about other security

259
00:11:01,920 --> 00:11:05,339
operations techniques well we'll talk

260
00:11:05,339 --> 00:11:08,760
about locking down approvals but if we

261
00:11:08,760 --> 00:11:11,459
move down further into the process of

262
00:11:11,459 --> 00:11:14,339
reacting to this uh potential compromise

263
00:11:14,339 --> 00:11:16,500
revoking tokens are going to be

264
00:11:16,500 --> 00:11:19,200
incomplete in a challenge because it's a

265
00:11:19,200 --> 00:11:21,779
very different set of Technologies and I

266
00:11:21,779 --> 00:11:24,600
just mentioned that these tokens for all

267
00:11:24,600 --> 00:11:27,500
intents and purposes are are permanent

268
00:11:27,500 --> 00:11:30,720
for the attacker so temporary as a

269
00:11:30,720 --> 00:11:34,620
defense or security measure is a bad

270
00:11:34,620 --> 00:11:35,579
idea

271
00:11:35,579 --> 00:11:37,920
but it doesn't even apply to oauth and

272
00:11:37,920 --> 00:11:41,040
we shouldn't fool ourselves despite how

273
00:11:41,040 --> 00:11:42,779
it's been presented

274
00:11:42,779 --> 00:11:45,660
so let's talk about where we can

275
00:11:45,660 --> 00:11:47,100
actually make a difference in this

276
00:11:47,100 --> 00:11:50,040
scenario let me flip back we can try to

277
00:11:50,040 --> 00:11:53,600
ver up front at step one during the

278
00:11:53,600 --> 00:11:56,100
creation of the fake app we can try to

279
00:11:56,100 --> 00:11:59,160
detect and prevent that how well we

280
00:11:59,160 --> 00:12:01,200
don't really know what a fake app is

281
00:12:01,200 --> 00:12:03,120
that's another problem there is no DNS

282
00:12:03,120 --> 00:12:05,519
registry equivalent in the oauth world

283
00:12:05,519 --> 00:12:07,500
there's no registry of these are real

284
00:12:07,500 --> 00:12:10,320
apps it is true the vendors verify and

285
00:12:10,320 --> 00:12:13,560
validate but that information is not

286
00:12:13,560 --> 00:12:16,019
accessible to anyone so it's effectively

287
00:12:16,019 --> 00:12:18,959
useless but what you can do is take the

288
00:12:18,959 --> 00:12:20,519
complementary approach we don't know

289
00:12:20,519 --> 00:12:22,860
what's fake we may want to control

290
00:12:22,860 --> 00:12:25,380
what's authorized and approved and we

291
00:12:25,380 --> 00:12:27,720
have to take those measures right so in

292
00:12:27,720 --> 00:12:30,060
Microsoft's world you have three options

293
00:12:30,060 --> 00:12:32,459
you could centralize approval process

294
00:12:32,459 --> 00:12:34,440
let's take it out of the hands of the

295
00:12:34,440 --> 00:12:36,779
users who are more susceptible to

296
00:12:36,779 --> 00:12:38,399
phishing attacks and centralize it with

297
00:12:38,399 --> 00:12:41,300
administrators or will only allow

298
00:12:41,300 --> 00:12:43,920
approved apps we're not sure what you

299
00:12:43,920 --> 00:12:46,019
know what went into it but it passed the

300
00:12:46,019 --> 00:12:48,959
approval process of the vendor and of

301
00:12:48,959 --> 00:12:50,519
course the last option is we can keep it

302
00:12:50,519 --> 00:12:52,320
wide open and that's usually the default

303
00:12:52,320 --> 00:12:54,480
don't do that right this is part of us

304
00:12:54,480 --> 00:12:56,760
thinking ahead so this is a reasonable

305
00:12:56,760 --> 00:12:59,940
step on the defensive side but I want to

306
00:12:59,940 --> 00:13:02,279
go through in more detail a second

307
00:13:02,279 --> 00:13:04,320
attack that's going to render some of

308
00:13:04,320 --> 00:13:07,500
those assumptions moot

309
00:13:07,500 --> 00:13:10,980
okay let me acknowledge that Dr Cinema

310
00:13:10,980 --> 00:13:13,560
the link at the bottom 18 months ago

311
00:13:13,560 --> 00:13:16,079
blogged about this he's a great resource

312
00:13:16,079 --> 00:13:17,899
on Microsoft

313
00:13:17,899 --> 00:13:20,639
attacks not just phishing attacks but

314
00:13:20,639 --> 00:13:22,980
Microsoft and AD

315
00:13:22,980 --> 00:13:26,700
okay I've pre-recorded a demo

316
00:13:26,700 --> 00:13:29,339
let's and let me explain quickly on the

317
00:13:29,339 --> 00:13:32,160
left is the the victim or the uh someone

318
00:13:32,160 --> 00:13:34,260
who get fished at Feast Health they are

319
00:13:34,260 --> 00:13:36,360
just logging into Outlook there's

320
00:13:36,360 --> 00:13:38,279
nothing special except multi-factor is

321
00:13:38,279 --> 00:13:40,200
turned on and they get into their

322
00:13:40,200 --> 00:13:43,320
outlook 360. on the right side I'm

323
00:13:43,320 --> 00:13:45,420
presenting a terminal session and it's

324
00:13:45,420 --> 00:13:47,399
very busy so I will just highlight the

325
00:13:47,399 --> 00:13:50,220
key points there the attacker in

326
00:13:50,220 --> 00:13:52,920
parallel is deciding to fish the user on

327
00:13:52,920 --> 00:13:55,079
the left and I'll point out what they're

328
00:13:55,079 --> 00:13:56,519
doing is they have a small piece of code

329
00:13:56,519 --> 00:13:58,320
this is not an oauth app they don't even

330
00:13:58,320 --> 00:14:00,660
have a Microsoft or Azure account they

331
00:14:00,660 --> 00:14:02,820
have just about 50 lines of code and

332
00:14:02,820 --> 00:14:05,639
they are starting an oauth dance they

333
00:14:05,639 --> 00:14:07,680
are starting to engage in oauth directly

334
00:14:07,680 --> 00:14:10,200
with Microsoft using what's called a

335
00:14:10,200 --> 00:14:13,620
device code flow it is a part of oauth

336
00:14:13,620 --> 00:14:16,260
that was designed for smart TVs to get

337
00:14:16,260 --> 00:14:19,019
access to say your Netflix subscription

338
00:14:19,019 --> 00:14:21,180
or your Video subscription

339
00:14:21,180 --> 00:14:23,339
so if you can read the terminal I'll

340
00:14:23,339 --> 00:14:25,380
point out that some of the data that is

341
00:14:25,380 --> 00:14:28,440
passed from the attacker to Microsoft is

342
00:14:28,440 --> 00:14:30,600
a client ID it's a unique application ID

343
00:14:30,600 --> 00:14:33,120
when you create an oauth app you get a

344
00:14:33,120 --> 00:14:35,820
unique ID by Microsoft

345
00:14:35,820 --> 00:14:37,740
well what's going on here the attacker

346
00:14:37,740 --> 00:14:40,920
has not created an App no they're

347
00:14:40,920 --> 00:14:44,279
reusing an existing client ID outlooks

348
00:14:44,279 --> 00:14:47,100
in fact Outlook 365. that should make a

349
00:14:47,100 --> 00:14:48,480
note of that

350
00:14:48,480 --> 00:14:51,360
there was no password or secret required

351
00:14:51,360 --> 00:14:53,579
it's publicly known information they are

352
00:14:53,579 --> 00:14:55,860
assuming outlook's identity in this

353
00:14:55,860 --> 00:14:58,199
scenario this fish they also specify a

354
00:14:58,199 --> 00:15:00,720
resource Microsoft terminology sort of a

355
00:15:00,720 --> 00:15:02,820
broad category of apis the graph API

356
00:15:02,820 --> 00:15:04,440
will give access to Outlook information

357
00:15:04,440 --> 00:15:07,680
and some active directory information

358
00:15:07,680 --> 00:15:10,260
what they get back from Microsoft bear

359
00:15:10,260 --> 00:15:12,660
with me I know this gets confusing and

360
00:15:12,660 --> 00:15:14,160
that is part of the problem a very

361
00:15:14,160 --> 00:15:16,560
complicated protocol they get two codes

362
00:15:16,560 --> 00:15:19,380
back a user code and a device code you

363
00:15:19,380 --> 00:15:21,060
can see it on the screen it's not too

364
00:15:21,060 --> 00:15:23,639
small it expires in 900 seconds 15

365
00:15:23,639 --> 00:15:25,019
minutes

366
00:15:25,019 --> 00:15:27,240
to use these codes they will keep the

367
00:15:27,240 --> 00:15:29,220
device code they will fish the user with

368
00:15:29,220 --> 00:15:30,360
the user code

369
00:15:30,360 --> 00:15:32,880
those together are going to allow the

370
00:15:32,880 --> 00:15:36,899
attacker to get oauth credentials in a

371
00:15:36,899 --> 00:15:39,240
minute let's move on and actually see

372
00:15:39,240 --> 00:15:41,699
the email sent out the user code is

373
00:15:41,699 --> 00:15:43,199
included

374
00:15:43,199 --> 00:15:46,800
I'm highlighting that right there

375
00:15:46,800 --> 00:15:48,959
the URL that will be sent in the fish is

376
00:15:48,959 --> 00:15:51,440
a standard Microsoft URL used in this

377
00:15:51,440 --> 00:15:53,579
Olaf flow

378
00:15:53,579 --> 00:15:55,740
it shows up on the left the user clicks

379
00:15:55,740 --> 00:15:57,899
on it please appreciate this for five

380
00:15:57,899 --> 00:15:59,820
seconds I spent a lot of time with my

381
00:15:59,820 --> 00:16:02,639
HTML skills which are poor but I created

382
00:16:02,639 --> 00:16:05,579
a phishing message for increasing

383
00:16:05,579 --> 00:16:08,639
Outlook file storage to one terabyte and

384
00:16:08,639 --> 00:16:10,380
the attachment size to 100 megabytes

385
00:16:10,380 --> 00:16:13,079
what user wouldn't want this promotional

386
00:16:13,079 --> 00:16:15,420
just type in this promotional code right

387
00:16:15,420 --> 00:16:18,120
go to this official Microsoft URL type

388
00:16:18,120 --> 00:16:20,040
in the promotional code and you will get

389
00:16:20,040 --> 00:16:22,860
all the space so that you can send cat

390
00:16:22,860 --> 00:16:26,459
videos and uh your favorite video to

391
00:16:26,459 --> 00:16:29,760
your friends over email which many users

392
00:16:29,760 --> 00:16:32,040
probably still want to do so I want to

393
00:16:32,040 --> 00:16:34,079
note that the user is following the fish

394
00:16:34,079 --> 00:16:35,760
they did they were full they are

395
00:16:35,760 --> 00:16:38,339
clicking the first thing they do is type

396
00:16:38,339 --> 00:16:40,320
in the code it's a generic screen this

397
00:16:40,320 --> 00:16:41,880
is served up from Microsoft by the way

398
00:16:41,880 --> 00:16:44,880
no one's created this no one's has

399
00:16:44,880 --> 00:16:48,120
ability to change this that's step one

400
00:16:48,120 --> 00:16:51,000
meanwhile

401
00:16:51,000 --> 00:16:53,220
um right after that step two what the

402
00:16:53,220 --> 00:16:55,740
user is faced with is to log in there is

403
00:16:55,740 --> 00:16:59,180
a cache session from the Outlook uh

404
00:16:59,180 --> 00:17:02,220
tab but if this were a new browser

405
00:17:02,220 --> 00:17:03,839
session they would go through a full

406
00:17:03,839 --> 00:17:07,199
authentication and MFA included and this

407
00:17:07,199 --> 00:17:08,939
is all dealing with Microsoft attacker

408
00:17:08,939 --> 00:17:10,799
is not in the middle of this that's not

409
00:17:10,799 --> 00:17:13,140
how oauth works this is working as

410
00:17:13,140 --> 00:17:15,599
expected in normal the third thing that

411
00:17:15,599 --> 00:17:17,880
they see the user keep track of this

412
00:17:17,880 --> 00:17:19,260
because this is the user experience

413
00:17:19,260 --> 00:17:20,880
which is important when we talk about

414
00:17:20,880 --> 00:17:22,859
security are you trying to sign into

415
00:17:22,859 --> 00:17:24,660
Microsoft Office a very standard

416
00:17:24,660 --> 00:17:26,220
dialogue build the type build

417
00:17:26,220 --> 00:17:27,900
application would depend on what's being

418
00:17:27,900 --> 00:17:30,299
used Microsoft Office shows up because

419
00:17:30,299 --> 00:17:33,179
the attacker assumed identity of Outlook

420
00:17:33,179 --> 00:17:34,820
365.

421
00:17:34,820 --> 00:17:37,440
if you created an oauth App you get to

422
00:17:37,440 --> 00:17:39,120
choose your title there's not much

423
00:17:39,120 --> 00:17:41,280
checking on it these days Microsoft will

424
00:17:41,280 --> 00:17:44,039
check on keywords so you can't quite

425
00:17:44,039 --> 00:17:46,520
pick Outlook but if you didn't Outlook

426
00:17:46,520 --> 00:17:50,460
or Azure 365 that might get through okay

427
00:17:50,460 --> 00:17:52,440
it's not the most rigorous it's the

428
00:17:52,440 --> 00:17:54,660
early days much like the mobile app

429
00:17:54,660 --> 00:17:59,820
stores uh 10 10 years ago right

430
00:17:59,820 --> 00:18:01,799
the fourth thing that they see and the

431
00:18:01,799 --> 00:18:04,200
final thing that the user sees is you've

432
00:18:04,200 --> 00:18:07,320
signed in that's it okay just bear that

433
00:18:07,320 --> 00:18:09,660
in mind that's what the user sees during

434
00:18:09,660 --> 00:18:11,580
this fish nothing particularly

435
00:18:11,580 --> 00:18:13,500
suspicious the language might be a

436
00:18:13,500 --> 00:18:15,480
little generic but nothing particularly

437
00:18:15,480 --> 00:18:17,520
suspicious they did not get presented

438
00:18:17,520 --> 00:18:19,799
with do you want to Grant Outlook access

439
00:18:19,799 --> 00:18:23,220
to all of this data and so on and so

440
00:18:23,220 --> 00:18:25,140
forth okay it was pretty generic

441
00:18:25,140 --> 00:18:27,059
meanwhile on the right let's go back to

442
00:18:27,059 --> 00:18:29,400
the attacker screen attacker

443
00:18:29,400 --> 00:18:33,600
will be able to get user credentials in

444
00:18:33,600 --> 00:18:35,580
the form of oauth tokens right now

445
00:18:35,580 --> 00:18:38,400
because the user has finished

446
00:18:38,400 --> 00:18:41,220
authentication so you'll see this scroll

447
00:18:41,220 --> 00:18:43,140
and a whole bunch of information is now

448
00:18:43,140 --> 00:18:47,400
returned to the attacker okay and if you

449
00:18:47,400 --> 00:18:49,980
can look at this I know it's really busy

450
00:18:49,980 --> 00:18:51,960
I'm going to highlight a few Fields okay

451
00:18:51,960 --> 00:18:54,600
the scope is typically is oauth language

452
00:18:54,600 --> 00:18:56,039
for permissions

453
00:18:56,039 --> 00:18:58,679
attacker never asked for it or specified

454
00:18:58,679 --> 00:19:00,840
it but they got back a Clarity

455
00:19:00,840 --> 00:19:03,299
clarification of what permissions they

456
00:19:03,299 --> 00:19:06,120
have uh which is a lot of read write

457
00:19:06,120 --> 00:19:09,960
access on on office information

458
00:19:09,960 --> 00:19:11,760
they have an access token the access

459
00:19:11,760 --> 00:19:14,160
token is key that's the longest piece in

460
00:19:14,160 --> 00:19:16,500
the bottom half of the screen it is the

461
00:19:16,500 --> 00:19:18,720
oauth token that now gives them full

462
00:19:18,720 --> 00:19:21,539
access to what the user has uh and what

463
00:19:21,539 --> 00:19:24,480
those permissions specify the attacker

464
00:19:24,480 --> 00:19:26,059
did ask for graph

465
00:19:26,059 --> 00:19:29,400
uh API access since that's clarified in

466
00:19:29,400 --> 00:19:31,320
the response there's also what's called

467
00:19:31,320 --> 00:19:33,059
a refresh token you just have to

468
00:19:33,059 --> 00:19:34,799
remember there are two tokens involved

469
00:19:34,799 --> 00:19:36,720
in oauth the access token is what's used

470
00:19:36,720 --> 00:19:39,240
for current access aspires typically in

471
00:19:39,240 --> 00:19:40,620
one hour

472
00:19:40,620 --> 00:19:42,240
and then all you have to do is use that

473
00:19:42,240 --> 00:19:44,700
refresh token to get a new one that's it

474
00:19:44,700 --> 00:19:45,960
that's

475
00:19:45,960 --> 00:19:49,140
the refresh token usually doesn't expire

476
00:19:49,140 --> 00:19:50,760
unless you don't use it for several

477
00:19:50,760 --> 00:19:53,160
months or unless it's explicitly revoked

478
00:19:53,160 --> 00:19:54,900
so for all intents and purposes the

479
00:19:54,900 --> 00:19:57,600
attacker has permanent eye access in

480
00:19:57,600 --> 00:19:58,799
this scenario

481
00:19:58,799 --> 00:20:01,140
okay so what's the user the attacker

482
00:20:01,140 --> 00:20:02,220
going to do

483
00:20:02,220 --> 00:20:03,539
well

484
00:20:03,539 --> 00:20:05,039
I'm going to show on the right that

485
00:20:05,039 --> 00:20:06,720
they're going to use that access token

486
00:20:06,720 --> 00:20:09,539
to enumerate ad users

487
00:20:09,539 --> 00:20:12,120
there's three ad users and we'll just

488
00:20:12,120 --> 00:20:15,360
double check live this user logged into

489
00:20:15,360 --> 00:20:16,980
azure

490
00:20:16,980 --> 00:20:21,020
and there are the three users

491
00:20:21,179 --> 00:20:22,980
they can also access the user's email

492
00:20:22,980 --> 00:20:24,900
three messages you can see them printed

493
00:20:24,900 --> 00:20:27,080
out

494
00:20:28,919 --> 00:20:30,660
and there are three emails just to

495
00:20:30,660 --> 00:20:31,740
verify

496
00:20:31,740 --> 00:20:34,380
now here's the pivot here's the lateral

497
00:20:34,380 --> 00:20:36,240
movement it gets worse if this weren't

498
00:20:36,240 --> 00:20:38,940
bad enough this fish it gets worse here

499
00:20:38,940 --> 00:20:41,700
they can use

500
00:20:41,700 --> 00:20:44,700
the what happened a lot just scrolled

501
00:20:44,700 --> 00:20:47,520
they can use that refresh token not to

502
00:20:47,520 --> 00:20:50,220
get another access token for Office 365

503
00:20:50,220 --> 00:20:53,280
or graph API they can get it for Azure

504
00:20:53,280 --> 00:20:55,620
access without supplying anything more

505
00:20:55,620 --> 00:21:00,000
to verify Identity or authorization

506
00:21:00,000 --> 00:21:03,559
so let's look at the output

507
00:21:03,559 --> 00:21:06,720
stay with me I know this is confusing my

508
00:21:06,720 --> 00:21:08,700
head hurts looking at it but the key

509
00:21:08,700 --> 00:21:10,740
things here

510
00:21:10,740 --> 00:21:13,020
the attacker switched the resource in

511
00:21:13,020 --> 00:21:14,520
the request they specified

512
00:21:14,520 --> 00:21:17,039
management.azure.com

513
00:21:17,039 --> 00:21:18,120
and

514
00:21:18,120 --> 00:21:20,160
Microsoft gladly returned a fresh new

515
00:21:20,160 --> 00:21:22,440
access token that represents permissions

516
00:21:22,440 --> 00:21:26,039
on that what permissions

517
00:21:26,039 --> 00:21:28,320
it says user impersonation at the top it

518
00:21:28,320 --> 00:21:32,159
essentially means all access that Ed has

519
00:21:32,159 --> 00:21:33,659
in azure

520
00:21:33,659 --> 00:21:36,539
was given we didn't even have to ask for

521
00:21:36,539 --> 00:21:39,480
it we got everything well Ed the user

522
00:21:39,480 --> 00:21:42,840
happens to be a Azure Global admin so

523
00:21:42,840 --> 00:21:45,480
full access to azure

524
00:21:45,480 --> 00:21:48,419
has now been gotten easily by the

525
00:21:48,419 --> 00:21:50,760
attacker along with a refresh token

526
00:21:50,760 --> 00:21:52,140
so now

527
00:21:52,140 --> 00:21:53,520
what's happening on the right is the

528
00:21:53,520 --> 00:21:55,320
attacker continues on and uses that new

529
00:21:55,320 --> 00:21:57,440
access token to enumerate all resources

530
00:21:57,440 --> 00:22:01,440
in azure

531
00:22:01,740 --> 00:22:03,299
and you can see

532
00:22:03,299 --> 00:22:05,760
that there's a whole bunch of resources

533
00:22:05,760 --> 00:22:08,280
they have rewrite but we'll just look

534
00:22:08,280 --> 00:22:10,500
it's the Azure subscription subscription

535
00:22:10,500 --> 00:22:13,380
one is showing and just to convince

536
00:22:13,380 --> 00:22:16,200
ourselves I have the user looking in

537
00:22:16,200 --> 00:22:18,900
their portal Azure portal and it all

538
00:22:18,900 --> 00:22:19,980
matches up

539
00:22:19,980 --> 00:22:22,860
right all of the compute instances all

540
00:22:22,860 --> 00:22:25,980
of the disks all the SSH keys

541
00:22:25,980 --> 00:22:29,340
all of the buckets or storage accounts

542
00:22:29,340 --> 00:22:32,460
and containers and files okay I'm going

543
00:22:32,460 --> 00:22:34,320
to move on in the interest of time

544
00:22:34,320 --> 00:22:35,640
but

545
00:22:35,640 --> 00:22:38,520
here's the architectural sort of flow

546
00:22:38,520 --> 00:22:40,320
diagram of what just happened and it's

547
00:22:40,320 --> 00:22:42,179
really important

548
00:22:42,179 --> 00:22:43,980
highlighted in yellow are sort of

549
00:22:43,980 --> 00:22:45,480
important parts the red it tends to be

550
00:22:45,480 --> 00:22:47,159
the tax side blue will be the defensive

551
00:22:47,159 --> 00:22:49,679
side if that weren't apparent one key

552
00:22:49,679 --> 00:22:52,260
difference versus the first attack

553
00:22:52,260 --> 00:22:55,200
assumed application identity no code was

554
00:22:55,200 --> 00:22:58,799
created in terms of oauth app code

555
00:22:58,799 --> 00:23:01,320
attacker had a little script

556
00:23:01,320 --> 00:23:03,659
but they assumed by just using and

557
00:23:03,659 --> 00:23:05,940
passing in or known ID they assume the

558
00:23:05,940 --> 00:23:08,880
identity of office 365. there are huge

559
00:23:08,880 --> 00:23:10,559
implications when we get up to the SEC

560
00:23:10,559 --> 00:23:13,260
Ops view of the world all that's going

561
00:23:13,260 --> 00:23:15,780
to show in the events or logs is Office

562
00:23:15,780 --> 00:23:18,900
365 and the user doing stuff

563
00:23:18,900 --> 00:23:22,020
there is not a fake app ID or a new

564
00:23:22,020 --> 00:23:25,520
Unknown app ID to detect

565
00:23:25,679 --> 00:23:27,720
during the authorization stage you may

566
00:23:27,720 --> 00:23:29,940
have noticed but I want to point out

567
00:23:29,940 --> 00:23:32,280
that the generic dialogues presented

568
00:23:32,280 --> 00:23:34,140
nothing was ever explicit about the

569
00:23:34,140 --> 00:23:35,400
consent

570
00:23:35,400 --> 00:23:38,340
asking the user for consent do you want

571
00:23:38,340 --> 00:23:42,000
Office 365 to have access to whatever

572
00:23:42,000 --> 00:23:44,039
the graph API gives them which includes

573
00:23:44,039 --> 00:23:46,140
some ad enumeration of users that sounds

574
00:23:46,140 --> 00:23:48,600
suspicious right but that's what the

575
00:23:48,600 --> 00:23:50,159
user actually granted there was

576
00:23:50,159 --> 00:23:52,080
definitely nothing presented to the user

577
00:23:52,080 --> 00:23:55,140
about do you want Office 365 to access

578
00:23:55,140 --> 00:23:58,200
all of your Azure Cloud environment

579
00:23:58,200 --> 00:24:01,500
and the last piece in the attack that

580
00:24:01,500 --> 00:24:04,320
was new and and troubling is in fact the

581
00:24:04,320 --> 00:24:06,000
pivot the lateral movement from Office

582
00:24:06,000 --> 00:24:09,900
365 to Azure with no additional work

583
00:24:09,900 --> 00:24:11,760
required by the attacker other than an

584
00:24:11,760 --> 00:24:13,740
additional call to say please give me a

585
00:24:13,740 --> 00:24:16,500
new Fresh access token

586
00:24:16,500 --> 00:24:20,000
so let's talk about defenses

587
00:24:20,460 --> 00:24:22,260
we've already talked about some of these

588
00:24:22,260 --> 00:24:24,240
with the first attack Melissa consent

589
00:24:24,240 --> 00:24:25,740
Grant let's talk about the new

590
00:24:25,740 --> 00:24:28,679
challenges well if you can follow this

591
00:24:28,679 --> 00:24:32,400
busy slide let's go to step three in the

592
00:24:32,400 --> 00:24:33,840
red where the user's dealing with

593
00:24:33,840 --> 00:24:35,520
Microsoft authenticate and they didn't

594
00:24:35,520 --> 00:24:37,620
really get a consent or approval screen

595
00:24:37,620 --> 00:24:39,720
that was very explicit

596
00:24:39,720 --> 00:24:42,600
well unfortunately you can't force a

597
00:24:42,600 --> 00:24:45,179
better approval screen that is not an

598
00:24:45,179 --> 00:24:48,000
option how about this assumed

599
00:24:48,000 --> 00:24:50,220
application identity up front this idea

600
00:24:50,220 --> 00:24:52,320
can we prevent that no there are no

601
00:24:52,320 --> 00:24:54,900
controls to prevent it's that hard promo

602
00:24:54,900 --> 00:24:57,240
to to detect as well how do you know

603
00:24:57,240 --> 00:24:59,880
that someone's reusing an Office Outlook

604
00:24:59,880 --> 00:25:03,919
365 application ID

605
00:25:04,559 --> 00:25:05,419
um

606
00:25:05,419 --> 00:25:08,039
you can't prevent that pivot

607
00:25:08,039 --> 00:25:10,320
in fact it's not even logged so if we

608
00:25:10,320 --> 00:25:12,059
talk about it from a second Ops

609
00:25:12,059 --> 00:25:15,120
perspective the login this is where it's

610
00:25:15,120 --> 00:25:19,559
it's uh lacking an incomplete you don't

611
00:25:19,559 --> 00:25:24,299
even know that that second refresh uh

612
00:25:24,299 --> 00:25:28,500
access token uh happened at switched

613
00:25:28,500 --> 00:25:31,440
access effectively from Office 365 to

614
00:25:31,440 --> 00:25:35,100
Azure let's talk about other SEC Ops uh

615
00:25:35,100 --> 00:25:37,380
sort of controls or measures that we

616
00:25:37,380 --> 00:25:40,260
might typically think of well we had to

617
00:25:40,260 --> 00:25:42,240
prove apples which could help mitigate

618
00:25:42,240 --> 00:25:45,000
that first scenario that right if I have

619
00:25:45,000 --> 00:25:46,140
an approved less than anything that's

620
00:25:46,140 --> 00:25:48,179
not matching like a fake oauth app I

621
00:25:48,179 --> 00:25:51,120
might be able to prevent well it's not

622
00:25:51,120 --> 00:25:53,220
going to apply here why because we

623
00:25:53,220 --> 00:25:55,200
didn't create a fake oauth attacker

624
00:25:55,200 --> 00:25:57,779
created or reused an existing

625
00:25:57,779 --> 00:25:59,760
application and it's a very popular one

626
00:25:59,760 --> 00:26:01,740
so most likely every Microsoft customer

627
00:26:01,740 --> 00:26:04,559
has Office 365 on their approved app

628
00:26:04,559 --> 00:26:07,559
list to begin with

629
00:26:07,559 --> 00:26:09,120
the pivot's not logged we talked about

630
00:26:09,120 --> 00:26:11,760
that okay so let's move on what what

631
00:26:11,760 --> 00:26:13,140
else could we do if we were just

632
00:26:13,140 --> 00:26:14,480
reacting

633
00:26:14,480 --> 00:26:18,419
brainstorming we might say look

634
00:26:18,419 --> 00:26:20,720
this was a

635
00:26:20,720 --> 00:26:23,940
particular device flow it's not the

636
00:26:23,940 --> 00:26:26,480
mainstream popular oauth

637
00:26:26,480 --> 00:26:29,640
interaction that we see on the web this

638
00:26:29,640 --> 00:26:31,500
was designed for smart TVs and if you

639
00:26:31,500 --> 00:26:33,299
think about that why should we be

640
00:26:33,299 --> 00:26:35,880
allowing approvals for smart TVs to get

641
00:26:35,880 --> 00:26:38,159
access to video streaming the use case

642
00:26:38,159 --> 00:26:39,419
is weak

643
00:26:39,419 --> 00:26:41,460
why don't we just block the device flow

644
00:26:41,460 --> 00:26:43,860
and we can do that this doesn't solve

645
00:26:43,860 --> 00:26:45,779
all the problems that would mitigate the

646
00:26:45,779 --> 00:26:48,179
second attack why because the URL path

647
00:26:48,179 --> 00:26:51,059
not the domain the URL passed that are

648
00:26:51,059 --> 00:26:53,640
involved are listed there and all you

649
00:26:53,640 --> 00:26:56,279
have to know is it contains device in it

650
00:26:56,279 --> 00:26:58,980
and it is unique it would not conflict

651
00:26:58,980 --> 00:27:01,919
with the normal oauth flows that apply

652
00:27:01,919 --> 00:27:04,799
to other application grants and access

653
00:27:04,799 --> 00:27:08,279
that sounds good except there are

654
00:27:08,279 --> 00:27:10,140
Exceptions there are always exceptions

655
00:27:10,140 --> 00:27:12,539
and in this case there are some valid

656
00:27:12,539 --> 00:27:14,880
apps that use Microsoft device flow that

657
00:27:14,880 --> 00:27:17,159
may be important if you are an Azure

658
00:27:17,159 --> 00:27:18,960
shop

659
00:27:18,960 --> 00:27:21,840
you have valid apps namely an admin tool

660
00:27:21,840 --> 00:27:25,980
the CLI tool Azure CLI in certain cases

661
00:27:25,980 --> 00:27:28,380
will not use a browser to authenticate

662
00:27:28,380 --> 00:27:32,159
it has an option to use only text and

663
00:27:32,159 --> 00:27:34,080
command line and device flow so you

664
00:27:34,080 --> 00:27:35,760
could still break functionality for

665
00:27:35,760 --> 00:27:38,279
users but it's a better problem to deal

666
00:27:38,279 --> 00:27:40,679
with in my mind than allowing all of

667
00:27:40,679 --> 00:27:43,020
this in deal with the one percent not

668
00:27:43,020 --> 00:27:44,520
the 99 percent

669
00:27:44,520 --> 00:27:47,340
well you might ask okay this is this is

670
00:27:47,340 --> 00:27:49,559
all bad am I safe if I'm a Google

671
00:27:49,559 --> 00:27:52,140
customer because Google implements a lot

672
00:27:52,140 --> 00:27:56,520
of uh including device flow well the

673
00:27:56,520 --> 00:27:58,440
short answer is it shares a lot of the

674
00:27:58,440 --> 00:28:00,360
same risks but they've mitigated it so

675
00:28:00,360 --> 00:28:02,520
you can feel good you still see a flow

676
00:28:02,520 --> 00:28:04,320
that's very similar here this was

677
00:28:04,320 --> 00:28:06,840
impersonating not Outlook 365 but the

678
00:28:06,840 --> 00:28:09,120
Google Cloud SDK which includes their

679
00:28:09,120 --> 00:28:12,059
CLI admin tool and you can get a

680
00:28:12,059 --> 00:28:15,600
successful uh result so some of the same

681
00:28:15,600 --> 00:28:18,480
risks are there you can assume and reuse

682
00:28:18,480 --> 00:28:20,880
an existing app there's no consent

683
00:28:20,880 --> 00:28:24,240
presented in most cases but the thing

684
00:28:24,240 --> 00:28:26,159
that Google did in their implementation

685
00:28:26,159 --> 00:28:28,440
that was better is they limited the

686
00:28:28,440 --> 00:28:30,480
Privileges you obtained and you you were

687
00:28:30,480 --> 00:28:32,220
effectively sandboxed you cannot pivot

688
00:28:32,220 --> 00:28:34,500
out of that so the damage is contained

689
00:28:34,500 --> 00:28:37,500
you can be fished but your whole

690
00:28:37,500 --> 00:28:42,539
environment is not necessarily at risk

691
00:28:42,539 --> 00:28:45,480
you might ask is all of this a problem

692
00:28:45,480 --> 00:28:47,520
just with this device flow because if it

693
00:28:47,520 --> 00:28:50,039
is we can we can just treat that and

694
00:28:50,039 --> 00:28:51,659
feel good about what what this

695
00:28:51,659 --> 00:28:54,360
authorization code Grant flow is what's

696
00:28:54,360 --> 00:28:56,279
used on the Internet with with the

697
00:28:56,279 --> 00:28:57,960
internet shopping as an example but it's

698
00:28:57,960 --> 00:29:01,260
the predominant part of oauth

699
00:29:01,260 --> 00:29:06,720
well the answer is mostly but no there

700
00:29:06,720 --> 00:29:09,179
are you are exposed there too

701
00:29:09,179 --> 00:29:11,039
so here's a third phishing attack that

702
00:29:11,039 --> 00:29:12,779
uses the main one the one that most

703
00:29:12,779 --> 00:29:14,460
people fear very safe and comfortable

704
00:29:14,460 --> 00:29:15,900
because it's proven every day with

705
00:29:15,900 --> 00:29:17,460
consumer shopping

706
00:29:17,460 --> 00:29:19,200
among other things

707
00:29:19,200 --> 00:29:21,659
there's an extension a customization to

708
00:29:21,659 --> 00:29:24,000
it oauth allowed customizations of

709
00:29:24,000 --> 00:29:26,059
certain things like the redirection

710
00:29:26,059 --> 00:29:29,220
mechanism of how an application receives

711
00:29:29,220 --> 00:29:32,399
codes to get the the secrets uh the

712
00:29:32,399 --> 00:29:36,720
oauth tokens oob out of band Bad Name it

713
00:29:36,720 --> 00:29:38,940
means copy and paste what does that mean

714
00:29:38,940 --> 00:29:42,779
let me show you an action I can create

715
00:29:42,779 --> 00:29:46,020
a web page that doesn't give a it's a

716
00:29:46,020 --> 00:29:47,700
fish it doesn't give the code up front

717
00:29:47,700 --> 00:29:50,100
it tells the user go to this real Google

718
00:29:50,100 --> 00:29:52,200
URL after you log in you'll get your

719
00:29:52,200 --> 00:29:54,059
special code so I created this fish

720
00:29:54,059 --> 00:29:55,380
which says you're an important Google

721
00:29:55,380 --> 00:29:56,820
customer you get to meet our Engineers

722
00:29:56,820 --> 00:29:59,399
to your product roadmaps just sign up

723
00:29:59,399 --> 00:30:02,100
I'm targeting you as a technical user

724
00:30:02,100 --> 00:30:04,260
they go through this process Google

725
00:30:04,260 --> 00:30:07,200
Cloud SDK they end up with a code this

726
00:30:07,200 --> 00:30:09,179
is actual normal oauth presented by

727
00:30:09,179 --> 00:30:10,559
Google

728
00:30:10,559 --> 00:30:13,080
attackers done a few things like an

729
00:30:13,080 --> 00:30:16,380
impersonated the cloud SDK

730
00:30:16,380 --> 00:30:19,559
and they get a copy paste code

731
00:30:19,559 --> 00:30:21,960
if I can get the user to paste it in I

732
00:30:21,960 --> 00:30:23,520
have that code which gives me the keys

733
00:30:23,520 --> 00:30:25,260
to the kingdom I now have their oauth

734
00:30:25,260 --> 00:30:27,779
tokens so what happened underneath

735
00:30:27,779 --> 00:30:30,240
bear with me I know this is super

736
00:30:30,240 --> 00:30:32,279
complicated it's part of the problem I

737
00:30:32,279 --> 00:30:34,020
was still able to assume the application

738
00:30:34,020 --> 00:30:37,140
identity but because Google extended go

739
00:30:37,140 --> 00:30:39,539
off protocol to introduce normally the

740
00:30:39,539 --> 00:30:42,899
oauth token is sent programmatically

741
00:30:42,899 --> 00:30:45,360
to a redirection URL

742
00:30:45,360 --> 00:30:47,279
so it's hard to intercept that but

743
00:30:47,279 --> 00:30:48,779
sometimes that comes through the user

744
00:30:48,779 --> 00:30:52,500
including a manual copy paste request

745
00:30:52,500 --> 00:30:54,960
so once that's done I can fish the user

746
00:30:54,960 --> 00:30:57,659
to give me that code

747
00:30:57,659 --> 00:30:59,100
and I win

748
00:30:59,100 --> 00:31:02,100
so the only thing that matters is not at

749
00:31:02,100 --> 00:31:03,480
this stage understanding the Nitty

750
00:31:03,480 --> 00:31:05,399
Gritty details there it's to know that

751
00:31:05,399 --> 00:31:08,700
this is not just part of oauth different

752
00:31:08,700 --> 00:31:10,799
aspects including the most popular part

753
00:31:10,799 --> 00:31:14,640
of Olaf has certain risks where we can

754
00:31:14,640 --> 00:31:18,419
the identities of of apps can be assumed

755
00:31:18,419 --> 00:31:20,940
and there's no 900 second or 15 minute

756
00:31:20,940 --> 00:31:23,880
time period to act and fish with the

757
00:31:23,880 --> 00:31:25,500
device flow attacks the second attack

758
00:31:25,500 --> 00:31:27,960
the Microsoft attack I had to get the

759
00:31:27,960 --> 00:31:29,880
user to respond within 15 minutes which

760
00:31:29,880 --> 00:31:33,179
is still very doable if I smash them or

761
00:31:33,179 --> 00:31:36,659
send a chat message but in this case I

762
00:31:36,659 --> 00:31:38,700
bypassed that there's no weakness there

763
00:31:38,700 --> 00:31:41,460
I get still get full Cloud access just

764
00:31:41,460 --> 00:31:44,820
like I had full Azure access so at the

765
00:31:44,820 --> 00:31:46,020
end of the day

766
00:31:46,020 --> 00:31:48,240
this is hopeless is this turning worse

767
00:31:48,240 --> 00:31:50,220
and worse no

768
00:31:50,220 --> 00:31:52,080
part of our strategy on the defensive

769
00:31:52,080 --> 00:31:53,700
side is those of us with direct

770
00:31:53,700 --> 00:31:55,740
relationships with vendors like Google

771
00:31:55,740 --> 00:31:58,919
and Microsoft need to get their help

772
00:31:58,919 --> 00:32:01,260
they need to raise the issue and in this

773
00:32:01,260 --> 00:32:03,240
case we did do disclosure over a year

774
00:32:03,240 --> 00:32:07,080
ago of this and I believe that

775
00:32:07,080 --> 00:32:08,940
helped Google

776
00:32:08,940 --> 00:32:11,640
uh phase out this copy and paste

777
00:32:11,640 --> 00:32:14,580
customization it is still supported so

778
00:32:14,580 --> 00:32:16,559
it still works but by October it should

779
00:32:16,559 --> 00:32:19,140
be phased out which should make this

780
00:32:19,140 --> 00:32:21,020
third attack

781
00:32:21,020 --> 00:32:24,120
mitigated and ineffective

782
00:32:24,120 --> 00:32:26,159
so but let's talk about this in a more

783
00:32:26,159 --> 00:32:27,600
structured way because going through

784
00:32:27,600 --> 00:32:30,120
this in a haphazard knee-jerk reaction

785
00:32:30,120 --> 00:32:33,360
is exactly what we cannot do

786
00:32:33,360 --> 00:32:35,580
right we need to get ahead and stop

787
00:32:35,580 --> 00:32:37,559
reacting so that hopefully

788
00:32:37,559 --> 00:32:39,240
that's what we can talk about for the

789
00:32:39,240 --> 00:32:41,279
rest of this session and it all starts

790
00:32:41,279 --> 00:32:43,020
with cabbage cabbage what is cabbage

791
00:32:43,020 --> 00:32:46,559
well 2600 years ago Draco was a Greek

792
00:32:46,559 --> 00:32:49,740
legislature and cabbage was one of the

793
00:32:49,740 --> 00:32:51,419
most highly prized assets and there was

794
00:32:51,419 --> 00:32:53,100
a capital offense if you stole cabbage

795
00:32:53,100 --> 00:32:55,020
so really I'm trying to say if there's

796
00:32:55,020 --> 00:32:57,059
one thing to take away treat your assets

797
00:32:57,059 --> 00:32:59,520
your Cloud assets like cabbage and then

798
00:32:59,520 --> 00:33:00,960
act like Draco

799
00:33:00,960 --> 00:33:04,740
and Security Professionals for the most

800
00:33:04,740 --> 00:33:07,020
part are very used to this it's really

801
00:33:07,020 --> 00:33:10,980
should we say the CEOs the business side

802
00:33:10,980 --> 00:33:14,039
the other folks who who don't want to

803
00:33:14,039 --> 00:33:15,779
necessarily take Draconian measures and

804
00:33:15,779 --> 00:33:17,700
what do I mean by that I really mean a

805
00:33:17,700 --> 00:33:20,100
deny all policy by default all the time

806
00:33:20,100 --> 00:33:23,100
for everyone everywhere right if

807
00:33:23,100 --> 00:33:25,019
anything this is what is under the

808
00:33:25,019 --> 00:33:27,539
buzzword zero trust today let's go back

809
00:33:27,539 --> 00:33:30,179
to not trusting anything

810
00:33:30,179 --> 00:33:32,519
right you are guilty until you've proven

811
00:33:32,519 --> 00:33:34,380
somewhat trustworthy but I'm still going

812
00:33:34,380 --> 00:33:35,580
to watch you

813
00:33:35,580 --> 00:33:38,399
I just want to point out and deny all in

814
00:33:38,399 --> 00:33:40,559
case my accent is bad that's two words

815
00:33:40,559 --> 00:33:42,779
and it's not denial

816
00:33:42,779 --> 00:33:46,740
right cabbages not ostriches so let's

817
00:33:46,740 --> 00:33:49,320
dive into what we can practically do

818
00:33:49,320 --> 00:33:51,059
with a new view I'm going to go through

819
00:33:51,059 --> 00:33:53,399
a wheel of stages of security Ops but

820
00:33:53,399 --> 00:33:54,840
I'm going to throw in some dose of

821
00:33:54,840 --> 00:33:57,360
proactive measures upfront research and

822
00:33:57,360 --> 00:34:00,059
then Innovation we have to get proactive

823
00:34:00,059 --> 00:34:02,340
so if attackers are adjusting to oauth

824
00:34:02,340 --> 00:34:05,880
we need to adjust oauth and we need to

825
00:34:05,880 --> 00:34:08,280
stay ahead easier said than done

826
00:34:08,280 --> 00:34:10,500
but let's give it a shot so what kind of

827
00:34:10,500 --> 00:34:12,719
research well we have to know there's a

828
00:34:12,719 --> 00:34:15,480
lot of uh of Education about oauth but

829
00:34:15,480 --> 00:34:16,679
there's a lot of resources out there

830
00:34:16,679 --> 00:34:19,440
this is doable it's ubiquitous more

831
00:34:19,440 --> 00:34:22,560
ubiquitous than we can probably uh know

832
00:34:22,560 --> 00:34:24,599
beforehand until we do research every

833
00:34:24,599 --> 00:34:27,960
single SAS app uh supports it not just

834
00:34:27,960 --> 00:34:31,440
Microsoft Google Salesforce CRM file

835
00:34:31,440 --> 00:34:35,219
shares Dropbox all the SSO vendors that

836
00:34:35,219 --> 00:34:38,219
speak saml for single sign-on also speak

837
00:34:38,219 --> 00:34:41,460
oauth for authorization but there are

838
00:34:41,460 --> 00:34:43,379
not so obvious uses of oauth that we

839
00:34:43,379 --> 00:34:45,239
need to understand and pull out

840
00:34:45,239 --> 00:34:47,940
Microsoft doesn't say that their CLI

841
00:34:47,940 --> 00:34:50,639
uses device code authorization

842
00:34:50,639 --> 00:34:53,040
but when you look at it and you know oh

843
00:34:53,040 --> 00:34:55,859
it strangely looks like device code

844
00:34:55,859 --> 00:34:57,720
authorization and then you can validate

845
00:34:57,720 --> 00:34:59,339
and look at the traffic and you know it

846
00:34:59,339 --> 00:35:00,780
you don't have to do this all yourself

847
00:35:00,780 --> 00:35:03,780
someone does it they share it you need

848
00:35:03,780 --> 00:35:05,640
to know that same with Google CLI

849
00:35:05,640 --> 00:35:07,380
underneath

850
00:35:07,380 --> 00:35:09,839
you can access Google cloud and you can

851
00:35:09,839 --> 00:35:12,480
have oauth tokens cached at the endpoint

852
00:35:12,480 --> 00:35:14,960
that has that Google

853
00:35:14,960 --> 00:35:17,280
CLI installed that becomes an attack

854
00:35:17,280 --> 00:35:19,380
point you need to know these things in

855
00:35:19,380 --> 00:35:21,300
order to know what to protect and

856
00:35:21,300 --> 00:35:23,040
basically I'm trying to say treat

857
00:35:23,040 --> 00:35:25,680
protocols as seriously as data users and

858
00:35:25,680 --> 00:35:27,359
applications and we shouldn't be

859
00:35:27,359 --> 00:35:29,579
surprised by that because certainly we

860
00:35:29,579 --> 00:35:32,940
are on the lookout for cves for SSL

861
00:35:32,940 --> 00:35:34,680
we don't want to be surprised by the

862
00:35:34,680 --> 00:35:37,820
next heartbeat there's plenty with

863
00:35:37,820 --> 00:35:41,520
SSH as well RDP and most of the TCP

864
00:35:41,520 --> 00:35:43,440
protocols have their problems and they

865
00:35:43,440 --> 00:35:45,599
are on our list please add oauth to it

866
00:35:45,599 --> 00:35:47,700
they are horizontal protocols that tend

867
00:35:47,700 --> 00:35:50,040
to affect a whole multitude of

868
00:35:50,040 --> 00:35:52,200
applications and environments and then

869
00:35:52,200 --> 00:35:55,740
we have to acknowledge and then manage

870
00:35:55,740 --> 00:35:59,180
that this started as a user-driven more

871
00:35:59,180 --> 00:36:02,700
consumer-based protocol and that means a

872
00:36:02,700 --> 00:36:04,619
lot of the defaults are wide open so

873
00:36:04,619 --> 00:36:06,300
that it's easy for consumers or small

874
00:36:06,300 --> 00:36:08,460
organizations to just approve app access

875
00:36:08,460 --> 00:36:11,280
approve app access so this is the sales

876
00:36:11,280 --> 00:36:14,040
side of the vendors I think influencing

877
00:36:14,040 --> 00:36:16,339
default settings that influence security

878
00:36:16,339 --> 00:36:18,839
hard to change that but if we

879
00:36:18,839 --> 00:36:20,280
acknowledge it maybe we're a little more

880
00:36:20,280 --> 00:36:22,260
proactive in taking Draconian measures

881
00:36:22,260 --> 00:36:24,240
to lock things down

882
00:36:24,240 --> 00:36:27,300
at the end of the day also take away

883
00:36:27,300 --> 00:36:30,720
oauth is all about tokens those are the

884
00:36:30,720 --> 00:36:32,640
key to everything those will be under

885
00:36:32,640 --> 00:36:34,500
attack they have their characteristics

886
00:36:34,500 --> 00:36:37,079
like being later or after MFA and

887
00:36:37,079 --> 00:36:38,640
Authentication

888
00:36:38,640 --> 00:36:40,740
they're often unmanaged hard to track

889
00:36:40,740 --> 00:36:42,240
from the vendor side you don't have

890
00:36:42,240 --> 00:36:44,839
visibility not great logins limited

891
00:36:44,839 --> 00:36:47,220
prevention's difficult revocations

892
00:36:47,220 --> 00:36:50,700
challenging but there's hope you can

893
00:36:50,700 --> 00:36:53,460
leverage existing processes that you for

894
00:36:53,460 --> 00:36:56,160
security operations processes we're

895
00:36:56,160 --> 00:36:57,839
dealing with compromise and detection

896
00:36:57,839 --> 00:37:00,240
but the details will differ that's what

897
00:37:00,240 --> 00:37:01,680
we have to put in the work and you have

898
00:37:01,680 --> 00:37:03,720
to remember it's not temporary temporary

899
00:37:03,720 --> 00:37:06,720
is not security but don't let anyone

900
00:37:06,720 --> 00:37:09,480
even try to fool you into it it's there

901
00:37:09,480 --> 00:37:10,920
it's permanent

902
00:37:10,920 --> 00:37:13,440
okay and because it's a token system

903
00:37:13,440 --> 00:37:16,320
expect other attack vectors besides

904
00:37:16,320 --> 00:37:18,000
phishing people will outright try to

905
00:37:18,000 --> 00:37:20,940
steal them there were uh recently in the

906
00:37:20,940 --> 00:37:22,440
last month or so there was just a

907
00:37:22,440 --> 00:37:24,839
published article about a fairly

908
00:37:24,839 --> 00:37:27,599
complicated web attack involving ssrf

909
00:37:27,599 --> 00:37:29,940
and other web techniques to get Google

910
00:37:29,940 --> 00:37:33,480
oauth tokens which are used uh in single

911
00:37:33,480 --> 00:37:37,020
sign-on to have access to Facebook very

912
00:37:37,020 --> 00:37:38,099
complicated

913
00:37:38,099 --> 00:37:39,960
and not having anything to do with

914
00:37:39,960 --> 00:37:43,560
fishing uh directly or traditionally but

915
00:37:43,560 --> 00:37:45,420
because it's the token system attackers

916
00:37:45,420 --> 00:37:48,180
are going after tokens and expect that

917
00:37:48,180 --> 00:37:51,240
so let's go into nuts and bolts security

918
00:37:51,240 --> 00:37:53,760
Ops first thing know what you don't know

919
00:37:53,760 --> 00:37:56,099
and almost everyone I expect doesn't

920
00:37:56,099 --> 00:37:57,720
know where they're at so let's assess

921
00:37:57,720 --> 00:38:00,480
and get a baseline where do you go

922
00:38:00,480 --> 00:38:02,520
almost all the vendors have some kind of

923
00:38:02,520 --> 00:38:04,859
auditing the vendors that provide the

924
00:38:04,859 --> 00:38:07,200
resources and the authentication and and

925
00:38:07,200 --> 00:38:10,520
the authorization so Azure in this case

926
00:38:10,520 --> 00:38:13,380
you can get access to it figure out what

927
00:38:13,380 --> 00:38:15,720
applications are being approved what

928
00:38:15,720 --> 00:38:17,040
permissions are requesting and which

929
00:38:17,040 --> 00:38:19,020
users are doing that okay you don't know

930
00:38:19,020 --> 00:38:20,820
you don't know how big the problem is

931
00:38:20,820 --> 00:38:23,700
get to know the problem here is azure's

932
00:38:23,700 --> 00:38:26,640
console right they have apis of course

933
00:38:26,640 --> 00:38:29,160
very busy but it shows the user at the

934
00:38:29,160 --> 00:38:31,440
bottom it shows the application IP

935
00:38:31,440 --> 00:38:34,619
address of the request the application

936
00:38:34,619 --> 00:38:36,660
ID over on the right

937
00:38:36,660 --> 00:38:38,760
if you get that data together you can

938
00:38:38,760 --> 00:38:40,740
just do some manual massaging and throw

939
00:38:40,740 --> 00:38:42,599
it in a spreadsheet you don't have to be

940
00:38:42,599 --> 00:38:43,760
fancy

941
00:38:43,760 --> 00:38:46,560
I did an analysis of well over a year

942
00:38:46,560 --> 00:38:48,780
ago but it's a big data set so so a lot

943
00:38:48,780 --> 00:38:50,520
of the trends are the same over 500 000

944
00:38:50,520 --> 00:38:52,079
users there's multiple Anonymous

945
00:38:52,079 --> 00:38:54,720
customers but it was big enough that it

946
00:38:54,720 --> 00:38:56,520
would probably reflect uh some of the

947
00:38:56,520 --> 00:38:58,380
biggest Enterprises and probably give us

948
00:38:58,380 --> 00:39:00,780
some idea you'll see trends that you

949
00:39:00,780 --> 00:39:01,859
expect and then you'll see some

950
00:39:01,859 --> 00:39:04,200
surprises Google Chrome no surprise

951
00:39:04,200 --> 00:39:06,420
that's one of the biggest approved oauth

952
00:39:06,420 --> 00:39:10,619
type apps slack maybe oh Pinterest

953
00:39:10,619 --> 00:39:12,660
consumer app Glassdoor looking for jobs

954
00:39:12,660 --> 00:39:15,780
Postman technical tool right some might

955
00:39:15,780 --> 00:39:17,940
surprise you at least figure that out

956
00:39:17,940 --> 00:39:20,579
you can go deeper than the apps you can

957
00:39:20,579 --> 00:39:22,079
start to look at the permissions and

958
00:39:22,079 --> 00:39:23,940
Scopes what's what's asking for read

959
00:39:23,940 --> 00:39:27,119
write read write for Google Drive

960
00:39:27,119 --> 00:39:28,380
right

961
00:39:28,380 --> 00:39:31,560
rewrite an email right what's asking for

962
00:39:31,560 --> 00:39:33,000
broad permissions

963
00:39:33,000 --> 00:39:35,339
and if you do that you have a much

964
00:39:35,339 --> 00:39:36,599
better chance of having the right

965
00:39:36,599 --> 00:39:39,359
policies to sort of uh focus on the hot

966
00:39:39,359 --> 00:39:41,160
spots so let's come back to prevention

967
00:39:41,160 --> 00:39:43,680
and blocking specifically we talked

968
00:39:43,680 --> 00:39:46,440
about blocking and being highly

969
00:39:46,440 --> 00:39:48,000
ineffective but maybe for some things

970
00:39:48,000 --> 00:39:49,859
like device code flow you could block it

971
00:39:49,859 --> 00:39:51,420
in Mass because you just don't allow it

972
00:39:51,420 --> 00:39:52,800
you should do it even if you have

973
00:39:52,800 --> 00:39:56,160
exceptions like Azure CLI start with no

974
00:39:56,160 --> 00:39:57,720
way are we allowing in this part of

975
00:39:57,720 --> 00:39:59,820
oauth in our environment and then let

976
00:39:59,820 --> 00:40:02,460
the justification say no I have to have

977
00:40:02,460 --> 00:40:04,680
an exception because I manage Azure and

978
00:40:04,680 --> 00:40:06,960
I don't have access to a browser blah

979
00:40:06,960 --> 00:40:09,000
blah blah

980
00:40:09,000 --> 00:40:11,339
we have to go back to lockdown what can

981
00:40:11,339 --> 00:40:13,619
we do for lockdown you can absolutely

982
00:40:13,619 --> 00:40:16,859
set these consent settings uh there's a

983
00:40:16,859 --> 00:40:19,440
version in every vendor that controls

984
00:40:19,440 --> 00:40:21,839
like identity and authorization and you

985
00:40:21,839 --> 00:40:24,119
start with the most severe and strict

986
00:40:24,119 --> 00:40:26,339
one it means you have work to do

987
00:40:26,339 --> 00:40:28,079
it means that you have to convince

988
00:40:28,079 --> 00:40:29,880
probably management chain business side

989
00:40:29,880 --> 00:40:31,680
that it's worth doing and you're

990
00:40:31,680 --> 00:40:33,119
basically going to say here are 10

991
00:40:33,119 --> 00:40:35,460
Enterprise apps here are 30

992
00:40:35,460 --> 00:40:37,619
everything else someone has to justify

993
00:40:37,619 --> 00:40:39,720
these are the only things that are loud

994
00:40:39,720 --> 00:40:41,700
or only the admin does it if you have a

995
00:40:41,700 --> 00:40:43,619
good business reason you tell me why you

996
00:40:43,619 --> 00:40:45,180
need a third-party app to go access

997
00:40:45,180 --> 00:40:47,579
every spreadsheet on Google Drive yeah

998
00:40:47,579 --> 00:40:49,800
just tell me that

999
00:40:49,800 --> 00:40:51,900
there's problems with it doesn't solve

1000
00:40:51,900 --> 00:40:53,880
everything it will not work for the

1001
00:40:53,880 --> 00:40:55,500
second attack which is a Microsoft one

1002
00:40:55,500 --> 00:40:59,339
because Outlook is an existing valid app

1003
00:40:59,339 --> 00:41:02,640
probably already approved but

1004
00:41:02,640 --> 00:41:05,099
layers of defense let's chip away at the

1005
00:41:05,099 --> 00:41:07,640
problem in small pieces take your win

1006
00:41:07,640 --> 00:41:11,099
with one attack and then we'll worry

1007
00:41:11,099 --> 00:41:13,260
about the other ones

1008
00:41:13,260 --> 00:41:15,180
what about mitigation I've put this

1009
00:41:15,180 --> 00:41:16,619
under prevention but let's assume you

1010
00:41:16,619 --> 00:41:18,119
have compromised credentials you can do

1011
00:41:18,119 --> 00:41:19,619
things there are things that will work

1012
00:41:19,619 --> 00:41:22,079
there are IP allow lists with almost

1013
00:41:22,079 --> 00:41:24,119
every vendor Microsoft's version is

1014
00:41:24,119 --> 00:41:26,339
conditional access policies it allows

1015
00:41:26,339 --> 00:41:28,680
you to also take in into account device

1016
00:41:28,680 --> 00:41:31,500
or manage endpoints you can put those in

1017
00:41:31,500 --> 00:41:32,940
place so just in case you get

1018
00:41:32,940 --> 00:41:34,980
compromised and they have oauth tokens

1019
00:41:34,980 --> 00:41:38,339
and they execute API calls attackers if

1020
00:41:38,339 --> 00:41:40,500
they don't do it from approved IPS

1021
00:41:40,500 --> 00:41:42,359
they will be blocked

1022
00:41:42,359 --> 00:41:44,940
that of course brings up a difficult

1023
00:41:44,940 --> 00:41:47,579
problem which is can you have a small

1024
00:41:47,579 --> 00:41:51,359
set of ips that your valid users work

1025
00:41:51,359 --> 00:41:54,060
from take some work not every

1026
00:41:54,060 --> 00:41:55,859
organization can do it and I'm saying

1027
00:41:55,859 --> 00:41:57,960
you have to start there you have to use

1028
00:41:57,960 --> 00:42:02,220
proxies or vpns or a private access to

1029
00:42:02,220 --> 00:42:03,900
Cloud apps you have to do something to

1030
00:42:03,900 --> 00:42:06,540
reduce your your IP footprint so then

1031
00:42:06,540 --> 00:42:09,859
that you can navigate these severe

1032
00:42:09,859 --> 00:42:11,839
problems

1033
00:42:11,839 --> 00:42:15,300
like some of these oauth attacks and so

1034
00:42:15,300 --> 00:42:17,520
Microsoft you know they have a GUI one

1035
00:42:17,520 --> 00:42:19,619
they can set up with API and nothing

1036
00:42:19,619 --> 00:42:21,540
fancy here it's what you would expect

1037
00:42:21,540 --> 00:42:24,000
what about timeouts well there are some

1038
00:42:24,000 --> 00:42:26,579
controls not consistent but some vendors

1039
00:42:26,579 --> 00:42:28,740
have an ability to time out that session

1040
00:42:28,740 --> 00:42:31,020
token it's like the web model that we've

1041
00:42:31,020 --> 00:42:33,060
done forever since the internet started

1042
00:42:33,060 --> 00:42:36,000
where if you are after a period of an

1043
00:42:36,000 --> 00:42:37,079
activity

1044
00:42:37,079 --> 00:42:39,060
you're forced to log in again but that's

1045
00:42:39,060 --> 00:42:42,359
not the norm in oauth not sure why but

1046
00:42:42,359 --> 00:42:44,820
you chose to ignore 20 plus years of web

1047
00:42:44,820 --> 00:42:47,760
learning about the attacks and so Google

1048
00:42:47,760 --> 00:42:50,300
has a timeout Microsoft doesn't

1049
00:42:50,300 --> 00:42:53,040
Salesforce I think does you look in your

1050
00:42:53,040 --> 00:42:55,079
app settings it's obvious right off from

1051
00:42:55,079 --> 00:42:56,760
the admin side and if it's there take it

1052
00:42:56,760 --> 00:42:58,980
if it's not okay

1053
00:42:58,980 --> 00:43:01,380
we'll deal with it

1054
00:43:01,380 --> 00:43:04,800
if you put in IPL allow lists you can do

1055
00:43:04,800 --> 00:43:07,440
early warning detection this is you have

1056
00:43:07,440 --> 00:43:09,540
to be careful false positives but if you

1057
00:43:09,540 --> 00:43:11,220
have failures if your users are trained

1058
00:43:11,220 --> 00:43:13,260
and you've deployed a restricted set of

1059
00:43:13,260 --> 00:43:15,180
ips that should be accessing your Cloud

1060
00:43:15,180 --> 00:43:18,240
resources and any violation

1061
00:43:18,240 --> 00:43:21,780
you can start to look at and write train

1062
00:43:21,780 --> 00:43:24,960
your users up but any failed logins

1063
00:43:24,960 --> 00:43:26,940
maybe an early warning that there's a

1064
00:43:26,940 --> 00:43:28,560
compromise credential out there used by

1065
00:43:28,560 --> 00:43:31,800
an attacker on an unauthorized IP and

1066
00:43:31,800 --> 00:43:33,960
there's ways to delve into it to see if

1067
00:43:33,960 --> 00:43:35,700
immediately there's a successful one you

1068
00:43:35,700 --> 00:43:37,560
know wanted the users forgot to jump on

1069
00:43:37,560 --> 00:43:39,900
you know a VPN and then right after they

1070
00:43:39,900 --> 00:43:42,480
remembered or if the attacker keeps

1071
00:43:42,480 --> 00:43:44,640
doing failure because they they don't

1072
00:43:44,640 --> 00:43:48,060
know uh you know policies in place

1073
00:43:48,060 --> 00:43:50,339
something to consider because it's an

1074
00:43:50,339 --> 00:43:52,140
early warning system and then you can

1075
00:43:52,140 --> 00:43:54,240
jump into remediation immediately before

1076
00:43:54,240 --> 00:43:56,460
there's Damage Done the problem though

1077
00:43:56,460 --> 00:43:59,480
with compromise uh

1078
00:43:59,480 --> 00:44:02,220
credentials is it's a behavioral problem

1079
00:44:02,220 --> 00:44:04,740
for the most part it's hard to reduce to

1080
00:44:04,740 --> 00:44:08,220
Simple Rules so our best bet is to have

1081
00:44:08,220 --> 00:44:11,579
good machine learning applied to it and

1082
00:44:11,579 --> 00:44:13,619
we've been at this does an industry for

1083
00:44:13,619 --> 00:44:15,540
way too long so I'm not saying that's

1084
00:44:15,540 --> 00:44:17,819
easy and it's generally a vendor problem

1085
00:44:17,819 --> 00:44:20,940
because almost none of us have resources

1086
00:44:20,940 --> 00:44:23,339
to build our own but this is the

1087
00:44:23,339 --> 00:44:25,260
discussion we have to push the vendors

1088
00:44:25,260 --> 00:44:27,660
on and and there's hope because there

1089
00:44:27,660 --> 00:44:30,060
are ml based detection products in all

1090
00:44:30,060 --> 00:44:31,680
of the cloud vendors

1091
00:44:31,680 --> 00:44:36,119
Microsoft has Cloud Defender uh for apps

1092
00:44:36,119 --> 00:44:38,280
uh Defender for cloud apps I'm sorry the

1093
00:44:38,280 --> 00:44:40,619
name keeps changing and it's ml based

1094
00:44:40,619 --> 00:44:42,780
and the good news is some of the use

1095
00:44:42,780 --> 00:44:46,020
cases are compromised or risky oauth

1096
00:44:46,020 --> 00:44:49,140
apps this is great news Microsoft

1097
00:44:49,140 --> 00:44:51,060
accepts that there might be some risk

1098
00:44:51,060 --> 00:44:53,700
here it is time to engage in this

1099
00:44:53,700 --> 00:44:55,500
dialogue with them of how can you help

1100
00:44:55,500 --> 00:45:00,359
us detect abnormal account activity

1101
00:45:00,359 --> 00:45:02,460
let's move into mitigation what can we

1102
00:45:02,460 --> 00:45:04,280
do there I've been alluding to

1103
00:45:04,280 --> 00:45:08,160
revocation is is hard or incomplete or

1104
00:45:08,160 --> 00:45:10,560
let's talk about in detail what I mean

1105
00:45:10,560 --> 00:45:13,200
remember there's two tokens anyone gets

1106
00:45:13,200 --> 00:45:14,760
during the oauth process one is the

1107
00:45:14,760 --> 00:45:16,380
access token which is the median access

1108
00:45:16,380 --> 00:45:18,420
and then when that expires and typically

1109
00:45:18,420 --> 00:45:20,400
an hour you refresh it with a refresh

1110
00:45:20,400 --> 00:45:22,980
token Microsoft provides you a nice API

1111
00:45:22,980 --> 00:45:25,260
that is I applaud them because not every

1112
00:45:25,260 --> 00:45:27,839
vendor does that however it's incomplete

1113
00:45:27,839 --> 00:45:30,359
it only revokes

1114
00:45:30,359 --> 00:45:32,339
the refresh token and if you dig into

1115
00:45:32,339 --> 00:45:33,800
the

1116
00:45:33,800 --> 00:45:36,359
documentation it is explained clearly

1117
00:45:36,359 --> 00:45:38,400
and you can test it as well the first

1118
00:45:38,400 --> 00:45:40,619
dialogue says here's the API called the

1119
00:45:40,619 --> 00:45:41,960
Powershell

1120
00:45:41,960 --> 00:45:44,520
commandlet it invalidates the refresh

1121
00:45:44,520 --> 00:45:46,560
tokens it doesn't quite tell you it

1122
00:45:46,560 --> 00:45:48,900
ignores the access token but it tells

1123
00:45:48,900 --> 00:45:51,180
you what it does the second one if you

1124
00:45:51,180 --> 00:45:53,520
dig deeper says

1125
00:45:53,520 --> 00:45:55,740
well for Access tokens it's different

1126
00:45:55,740 --> 00:45:57,839
part of the dock the user loses access

1127
00:45:57,839 --> 00:46:01,200
when this token expires huh so you have

1128
00:46:01,200 --> 00:46:03,660
an up to an hour exposure

1129
00:46:03,660 --> 00:46:06,000
how do you how do you revoke the access

1130
00:46:06,000 --> 00:46:07,020
token

1131
00:46:07,020 --> 00:46:09,119
well the third one sort of clarifies

1132
00:46:09,119 --> 00:46:12,920
well if you're still concerned

1133
00:46:13,079 --> 00:46:15,900
well we're working on it it's called

1134
00:46:15,900 --> 00:46:17,880
this it's part of our continuous it's a

1135
00:46:17,880 --> 00:46:20,339
roadmap response which no one ever wants

1136
00:46:20,339 --> 00:46:22,680
to hear but it's better than nothing

1137
00:46:22,680 --> 00:46:25,500
so basically I think the engineer wrote

1138
00:46:25,500 --> 00:46:26,640
the first one and gave it the

1139
00:46:26,640 --> 00:46:29,280
documentation I'm done the engineering

1140
00:46:29,280 --> 00:46:31,140
manager wrote the second one and said

1141
00:46:31,140 --> 00:46:33,420
well you know yeah there's the access

1142
00:46:33,420 --> 00:46:35,760
token and don't worry it expires

1143
00:46:35,760 --> 00:46:37,260
and the third one was the product

1144
00:46:37,260 --> 00:46:39,480
manager who wrote it which is oh don't

1145
00:46:39,480 --> 00:46:41,760
worry it's on the roadmap

1146
00:46:41,760 --> 00:46:42,839
these are the things we have to deal

1147
00:46:42,839 --> 00:46:44,339
with the first is to know what you're

1148
00:46:44,339 --> 00:46:46,619
dealing with this still helps better

1149
00:46:46,619 --> 00:46:48,839
than nothing so what can you do about

1150
00:46:48,839 --> 00:46:51,300
that access token

1151
00:46:51,300 --> 00:46:53,339
this is mitigation the security Ops

1152
00:46:53,339 --> 00:46:55,079
Hope's not a strategy but I want to give

1153
00:46:55,079 --> 00:46:57,839
you hope so what you can do based on my

1154
00:46:57,839 --> 00:47:00,599
testing disable the user account NAD for

1155
00:47:00,599 --> 00:47:01,680
one hour

1156
00:47:01,680 --> 00:47:04,859
the max typically by lacks a token when

1157
00:47:04,859 --> 00:47:06,660
you disable the user account the token

1158
00:47:06,660 --> 00:47:09,660
is not valid so after the hour

1159
00:47:09,660 --> 00:47:12,420
you're safe at that point and then after

1160
00:47:12,420 --> 00:47:14,520
the hour the token disappears is

1161
00:47:14,520 --> 00:47:16,020
invalidated and you can re-enable

1162
00:47:16,020 --> 00:47:17,579
account that will work it's probably the

1163
00:47:17,579 --> 00:47:18,839
most reasonable one you can also delete

1164
00:47:18,839 --> 00:47:20,280
and restore

1165
00:47:20,280 --> 00:47:22,319
the user account that's probably

1166
00:47:22,319 --> 00:47:24,599
dramatically uh impactful

1167
00:47:24,599 --> 00:47:26,520
but it'll work and there's no questions

1168
00:47:26,520 --> 00:47:28,440
about that delete the user restore it so

1169
00:47:28,440 --> 00:47:29,520
if you're one of those that have

1170
00:47:29,520 --> 00:47:31,980
real-time backups of user information

1171
00:47:31,980 --> 00:47:35,460
then two will it will let you sleep at

1172
00:47:35,460 --> 00:47:37,140
night

1173
00:47:37,140 --> 00:47:39,780
but don't forget about other things that

1174
00:47:39,780 --> 00:47:41,760
have authentication and access in

1175
00:47:41,760 --> 00:47:43,380
Microsoft's world there's devices you

1176
00:47:43,380 --> 00:47:44,700
also have to worry about so you have to

1177
00:47:44,700 --> 00:47:47,819
apply that thinking to there

1178
00:47:47,819 --> 00:47:49,859
so if you get through all of that that's

1179
00:47:49,859 --> 00:47:51,599
sort of the active sort of incident part

1180
00:47:51,599 --> 00:47:53,520
you still have to analyze and get better

1181
00:47:53,520 --> 00:47:56,700
for the future so I'm suggesting

1182
00:47:56,700 --> 00:47:59,940
um that you take a look at your high

1183
00:47:59,940 --> 00:48:02,760
risk users and you look at your if you

1184
00:48:02,760 --> 00:48:05,099
have URL filtering of any kind proc web

1185
00:48:05,099 --> 00:48:08,880
proxies Etc look at the URL logs and I'm

1186
00:48:08,880 --> 00:48:10,619
not suggesting this has to be real time

1187
00:48:10,619 --> 00:48:12,240
and and

1188
00:48:12,240 --> 00:48:14,520
super tedious they'll look for certain

1189
00:48:14,520 --> 00:48:16,079
URLs like you if you're worried about

1190
00:48:16,079 --> 00:48:18,119
the second attack you could look at ones

1191
00:48:18,119 --> 00:48:19,200
that are involved in the second

1192
00:48:19,200 --> 00:48:21,180
Microsoft device login attack and what

1193
00:48:21,180 --> 00:48:22,619
you're looking for is early warning

1194
00:48:22,619 --> 00:48:24,119
signs trying to get out of being

1195
00:48:24,119 --> 00:48:26,400
reactive and so incident focused and

1196
00:48:26,400 --> 00:48:28,200
you're trying to see if you have users

1197
00:48:28,200 --> 00:48:30,660
being targeted all users spear phishing

1198
00:48:30,660 --> 00:48:34,079
a few users this is an advanced attack

1199
00:48:34,079 --> 00:48:36,420
try to get ahead of it you would have to

1200
00:48:36,420 --> 00:48:39,180
ideally dig into the parameters and

1201
00:48:39,180 --> 00:48:42,839
headers not just the URI path to get a

1202
00:48:42,839 --> 00:48:44,940
big a better picture of the oauth

1203
00:48:44,940 --> 00:48:47,099
traffic right so you might really want

1204
00:48:47,099 --> 00:48:49,319
to see the application IDs that are

1205
00:48:49,319 --> 00:48:51,599
being re you know passed back and forth

1206
00:48:51,599 --> 00:48:54,839
or the Scopes requested are unusual okay

1207
00:48:54,839 --> 00:48:57,000
that's getting Advanced it's more data

1208
00:48:57,000 --> 00:48:59,880
but you work take baby steps start

1209
00:48:59,880 --> 00:49:02,099
looking and if you do you might be able

1210
00:49:02,099 --> 00:49:04,200
to aggregate data and take a look at

1211
00:49:04,200 --> 00:49:06,960
which applications are highest in terms

1212
00:49:06,960 --> 00:49:09,380
of approval or use what are being

1213
00:49:09,380 --> 00:49:11,460
trusted and this goes to a different

1214
00:49:11,460 --> 00:49:13,260
Source this goes back to the audit logs

1215
00:49:13,260 --> 00:49:16,020
of the identity provider

1216
00:49:16,020 --> 00:49:18,839
and you might focus on just a few high

1217
00:49:18,839 --> 00:49:21,480
risk users your CEO and executive team

1218
00:49:21,480 --> 00:49:23,760
and your admins because they have the

1219
00:49:23,760 --> 00:49:25,200
most to lose they have the most access

1220
00:49:25,200 --> 00:49:27,000
once they're compromised right you can

1221
00:49:27,000 --> 00:49:29,040
be practical but the important part is

1222
00:49:29,040 --> 00:49:31,260
we have to start thinking about this not

1223
00:49:31,260 --> 00:49:33,960
reacting not doing an incident response

1224
00:49:33,960 --> 00:49:35,880
flow but we have to do more of a threat

1225
00:49:35,880 --> 00:49:38,280
hunting flow a longer term analysis flow

1226
00:49:38,280 --> 00:49:40,079
you can look at applications of course

1227
00:49:40,079 --> 00:49:43,980
and requests Scopes and privileges you

1228
00:49:43,980 --> 00:49:46,079
can get very detailed here I've talked

1229
00:49:46,079 --> 00:49:47,420
about some of this

1230
00:49:47,420 --> 00:49:49,859
certainly apps that are used by a large

1231
00:49:49,859 --> 00:49:51,900
number of users have the most aggregate

1232
00:49:51,900 --> 00:49:54,480
potential risk but I would say that's

1233
00:49:54,480 --> 00:49:55,680
not really where you want to look

1234
00:49:55,680 --> 00:49:57,180
because those tend to be the most

1235
00:49:57,180 --> 00:49:59,760
visible applications well known and have

1236
00:49:59,760 --> 00:50:01,980
the most scrutiny on them it

1237
00:50:01,980 --> 00:50:05,579
it's not to say Google or slack might

1238
00:50:05,579 --> 00:50:08,099
not be or Zoom might not be compromised

1239
00:50:08,099 --> 00:50:10,380
of course we we probably are still

1240
00:50:10,380 --> 00:50:12,240
suffering from solar winds and other

1241
00:50:12,240 --> 00:50:15,060
fallouts of popular apps but it is to

1242
00:50:15,060 --> 00:50:17,160
say there's a much better chance that

1243
00:50:17,160 --> 00:50:19,619
those are scrutinized what you want to

1244
00:50:19,619 --> 00:50:22,980
be aware of is the unused apps or the

1245
00:50:22,980 --> 00:50:26,400
rarely used apps the one-offs and so if

1246
00:50:26,400 --> 00:50:28,740
I plot a two-dimensional table of number

1247
00:50:28,740 --> 00:50:31,200
of users you know using or approving

1248
00:50:31,200 --> 00:50:33,180
these apps versus the types of

1249
00:50:33,180 --> 00:50:35,579
permissions Broad and arrow I'm really

1250
00:50:35,579 --> 00:50:38,220
worried about the upper left that's the

1251
00:50:38,220 --> 00:50:41,160
hidden risk that has huge impact this

1252
00:50:41,160 --> 00:50:43,140
why did this one user approve this

1253
00:50:43,140 --> 00:50:45,420
Unknown app from this unknown vendor

1254
00:50:45,420 --> 00:50:48,240
that has read write access to everything

1255
00:50:48,240 --> 00:50:51,720
that's where right if slack were

1256
00:50:51,720 --> 00:50:54,240
compromised everyone would be looking at

1257
00:50:54,240 --> 00:50:56,940
it they would be embarrassed and avoid

1258
00:50:56,940 --> 00:50:59,640
lawsuits you would have a problem but

1259
00:50:59,640 --> 00:51:02,579
there would be patches immediately and a

1260
00:51:02,579 --> 00:51:04,619
lot of analysis but no one would would

1261
00:51:04,619 --> 00:51:07,800
be looking at the bottom or the top left

1262
00:51:07,800 --> 00:51:10,079
and just as an example from some manual

1263
00:51:10,079 --> 00:51:12,240
analysis on this broad data set that uh

1264
00:51:12,240 --> 00:51:15,839
that I did last year cam scanner popped

1265
00:51:15,839 --> 00:51:16,440
up

1266
00:51:16,440 --> 00:51:19,380
only used by 0.04 percent of the users

1267
00:51:19,380 --> 00:51:22,020
but it wanted right access to everything

1268
00:51:22,020 --> 00:51:24,540
Google Drive and if you did a quick

1269
00:51:24,540 --> 00:51:26,760
investigation it was banned by the

1270
00:51:26,760 --> 00:51:28,020
Indian government because first we had

1271
00:51:28,020 --> 00:51:30,540
point one point had it delivering

1272
00:51:30,540 --> 00:51:33,359
malware and even if that were fixed it

1273
00:51:33,359 --> 00:51:35,880
points out how that one-off could pose

1274
00:51:35,880 --> 00:51:38,220
huge risk and that's what you want to

1275
00:51:38,220 --> 00:51:40,680
get your hands around if it's existing

1276
00:51:40,680 --> 00:51:41,880
in your environment by doing some

1277
00:51:41,880 --> 00:51:44,520
analysis the Obscure applications where

1278
00:51:44,520 --> 00:51:46,559
you don't know the reputation of the

1279
00:51:46,559 --> 00:51:48,420
developer and remember our hands are

1280
00:51:48,420 --> 00:51:51,119
tied we do not have a DNS registry that

1281
00:51:51,119 --> 00:51:53,460
we can go do domain analysis and figure

1282
00:51:53,460 --> 00:51:56,040
out if if this is this publisher is

1283
00:51:56,040 --> 00:51:58,319
valid you don't know sometimes that

1284
00:51:58,319 --> 00:52:00,420
appears in the user consent dialogue but

1285
00:52:00,420 --> 00:52:02,579
it you don't have access to that kind of

1286
00:52:02,579 --> 00:52:04,920
Intel

1287
00:52:04,920 --> 00:52:07,200
at the end of the day we don't know

1288
00:52:07,200 --> 00:52:09,059
absolutely what's going to be high risk

1289
00:52:09,059 --> 00:52:11,099
and low risk just start looking at what

1290
00:52:11,099 --> 00:52:13,800
you have and the changes new apps new

1291
00:52:13,800 --> 00:52:16,520
Scopes top end look at the distribution

1292
00:52:16,520 --> 00:52:19,160
that's good enough for the coming year

1293
00:52:19,160 --> 00:52:21,800
those changes will help you highlight

1294
00:52:21,800 --> 00:52:24,059
changes in Risk

1295
00:52:24,059 --> 00:52:25,859
and finally and I know we're running

1296
00:52:25,859 --> 00:52:27,059
late I'm going to be some time for

1297
00:52:27,059 --> 00:52:28,440
questions

1298
00:52:28,440 --> 00:52:31,920
just try to anticipate as we say with

1299
00:52:31,920 --> 00:52:34,260
ice hockey uh you know skate to where

1300
00:52:34,260 --> 00:52:36,660
the puck is try to anticipate what's

1301
00:52:36,660 --> 00:52:39,720
evolving in the protocol get to knowing

1302
00:52:39,720 --> 00:52:42,359
what you don't know inventory assume

1303
00:52:42,359 --> 00:52:43,619
that there's going to be other attacks

1304
00:52:43,619 --> 00:52:45,900
that are non-fishing and try to be

1305
00:52:45,900 --> 00:52:48,180
proactive by looking at early warning

1306
00:52:48,180 --> 00:52:50,760
indicators and you can actually develop

1307
00:52:50,760 --> 00:52:52,980
what I call threat Intel sounds fancy

1308
00:52:52,980 --> 00:52:55,680
but for yourself or your set of approved

1309
00:52:55,680 --> 00:52:57,119
apps you can start to figure out what

1310
00:52:57,119 --> 00:53:00,359
are valid app IDs by looking in logs

1311
00:53:00,359 --> 00:53:02,940
and that will help during incidents to

1312
00:53:02,940 --> 00:53:05,220
verify is this really Outlook 365 or is

1313
00:53:05,220 --> 00:53:07,260
it a fake one right for your small set

1314
00:53:07,260 --> 00:53:09,599
as you test and install apps or approve

1315
00:53:09,599 --> 00:53:11,640
them you can do the work to determine

1316
00:53:11,640 --> 00:53:13,740
what are the valid signs based on the

1317
00:53:13,740 --> 00:53:15,359
logs and that will help

1318
00:53:15,359 --> 00:53:18,720
so I'm going to stop but I do have some

1319
00:53:18,720 --> 00:53:20,520
slides that you can review

1320
00:53:20,520 --> 00:53:23,339
if we can get copies out of how you can

1321
00:53:23,339 --> 00:53:26,220
do concrete steps to apply this right a

1322
00:53:26,220 --> 00:53:28,980
lot of this is you can apply checklists

1323
00:53:28,980 --> 00:53:30,660
ask yourself the right questions ask

1324
00:53:30,660 --> 00:53:32,819
vendors the same questions try to answer

1325
00:53:32,819 --> 00:53:34,619
them to understand what you're being

1326
00:53:34,619 --> 00:53:36,660
faced with and ultimately get to a point

1327
00:53:36,660 --> 00:53:38,460
where you can start to be proactive and

1328
00:53:38,460 --> 00:53:40,559
start refining your policies

1329
00:53:40,559 --> 00:53:42,900
and go through everything that we talked

1330
00:53:42,900 --> 00:53:44,220
about today and then if you want to

1331
00:53:44,220 --> 00:53:46,980
educate yourself I have some links that

1332
00:53:46,980 --> 00:53:47,520
um

1333
00:53:47,520 --> 00:53:50,280
will be a good starting point so on that

1334
00:53:50,280 --> 00:53:54,240
I want to end uh apologize if there are

1335
00:53:54,240 --> 00:53:56,760
questions please post them if you

1336
00:53:56,760 --> 00:53:57,960
haven't already and we'll try to answer

1337
00:53:57,960 --> 00:53:59,460
them

1338
00:53:59,460 --> 00:54:01,440
thank you jenko we are running short of

1339
00:54:01,440 --> 00:54:03,660
time I'll just quickly jump to the Q a

1340
00:54:03,660 --> 00:54:06,660
so the first question is uh if the or

1341
00:54:06,660 --> 00:54:09,180
token expired in short time like five

1342
00:54:09,180 --> 00:54:12,599
minutes would that help better

1343
00:54:12,599 --> 00:54:16,020
yeah so good question will it if it if

1344
00:54:16,020 --> 00:54:17,940
there's a short expiration period five

1345
00:54:17,940 --> 00:54:19,380
minutes

1346
00:54:19,380 --> 00:54:22,380
um yes it would as long as we realize

1347
00:54:22,380 --> 00:54:25,020
that any temporary duration is not

1348
00:54:25,020 --> 00:54:27,000
really solving the problem but it will

1349
00:54:27,000 --> 00:54:29,819
certainly mitigate it uh it in different

1350
00:54:29,819 --> 00:54:31,980
cases may be balanced with usability but

1351
00:54:31,980 --> 00:54:35,640
because oauth has a refresh token then

1352
00:54:35,640 --> 00:54:38,339
part of what apps do automatically is if

1353
00:54:38,339 --> 00:54:41,339
there's an expired access token they

1354
00:54:41,339 --> 00:54:45,359
will immediately refresh and it's unseen

1355
00:54:45,359 --> 00:54:47,400
it's invisible to the user so the user's

1356
00:54:47,400 --> 00:54:49,260
not affected they don't complain the app

1357
00:54:49,260 --> 00:54:50,760
does a little bit more work a little

1358
00:54:50,760 --> 00:54:52,160
more chatty

1359
00:54:52,160 --> 00:54:54,900
and and that's a good part that that

1360
00:54:54,900 --> 00:54:58,680
would be super viable uh now just

1361
00:54:58,680 --> 00:55:00,900
realize there are some apps that that

1362
00:55:00,900 --> 00:55:02,339
don't do that and if you're in an

1363
00:55:02,339 --> 00:55:04,440
interactive CLI you may be forced to

1364
00:55:04,440 --> 00:55:06,300
re-log in so some users will still

1365
00:55:06,300 --> 00:55:08,220
complain but it's a small set of apps

1366
00:55:08,220 --> 00:55:10,140
why are you forcing me to log in so

1367
00:55:10,140 --> 00:55:12,000
really you're generally choosing between

1368
00:55:12,000 --> 00:55:13,859
one hour and eight hours which is sort

1369
00:55:13,859 --> 00:55:16,140
of what you choose for maybe production

1370
00:55:16,140 --> 00:55:19,980
web or apps but it is up to you you

1371
00:55:19,980 --> 00:55:22,559
could certainly go short

1372
00:55:22,559 --> 00:55:25,680
that makes sense uh moving on to the

1373
00:55:25,680 --> 00:55:28,140
next thing so this is the question that

1374
00:55:28,140 --> 00:55:30,359
arise from the demo for the demo shown

1375
00:55:30,359 --> 00:55:33,599
in phishing attack is device code a

1376
00:55:33,599 --> 00:55:35,760
non-issue for particular Earth flow can

1377
00:55:35,760 --> 00:55:38,760
this be mitigated by using or code

1378
00:55:38,760 --> 00:55:42,059
exchange or pixie challenge

1379
00:55:42,059 --> 00:55:44,720
foreign

1380
00:55:47,180 --> 00:55:50,099
interesting question

1381
00:55:50,099 --> 00:55:51,780
the problem with

1382
00:55:51,780 --> 00:55:56,579
device code flow and oauth in general is

1383
00:55:56,579 --> 00:55:59,280
it's very hard to layer on top of it

1384
00:55:59,280 --> 00:56:01,140
extra

1385
00:56:01,140 --> 00:56:03,900
authentication or authorization

1386
00:56:03,900 --> 00:56:05,960
um

1387
00:56:06,540 --> 00:56:09,300
pieces so

1388
00:56:09,300 --> 00:56:10,740
if they're at completely different

1389
00:56:10,740 --> 00:56:13,140
layers I'd have to think about that yes

1390
00:56:13,140 --> 00:56:15,540
it would be doable if it's at the

1391
00:56:15,540 --> 00:56:17,579
application layer you might have some

1392
00:56:17,579 --> 00:56:19,380
trouble inserting into it they didn't

1393
00:56:19,380 --> 00:56:21,420
will be useful as if Olaf had better

1394
00:56:21,420 --> 00:56:24,420
hooks but then if you have hooks to to

1395
00:56:24,420 --> 00:56:27,619
be more secure their hooks to also abuse

1396
00:56:27,619 --> 00:56:31,260
as well but I think that would be worth

1397
00:56:31,260 --> 00:56:33,480
exploring I haven't actually thought

1398
00:56:33,480 --> 00:56:35,400
about that

1399
00:56:35,400 --> 00:56:36,660
awesome

1400
00:56:36,660 --> 00:56:39,960
uh and a follow-up question on that does

1401
00:56:39,960 --> 00:56:41,579
this only affect the application that

1402
00:56:41,579 --> 00:56:43,680
uses device flow the attack that you

1403
00:56:43,680 --> 00:56:45,839
have shown or is it vulnerable to any

1404
00:56:45,839 --> 00:56:47,339
other

1405
00:56:47,339 --> 00:56:49,619
friends so

1406
00:56:49,619 --> 00:56:52,200
it is multiple applications device code

1407
00:56:52,200 --> 00:56:54,180
if we're talking about that part of the

1408
00:56:54,180 --> 00:56:57,300
oauth flow is not popular

1409
00:56:57,300 --> 00:56:59,940
but there's hidden dependencies so it

1410
00:56:59,940 --> 00:57:01,500
was designed for smart TVs you're

1411
00:57:01,500 --> 00:57:04,020
thinking oh well that's easy but then

1412
00:57:04,020 --> 00:57:06,300
there's a copy paste mentality among

1413
00:57:06,300 --> 00:57:08,579
developers so once you see it like oh

1414
00:57:08,579 --> 00:57:10,500
I'm in Microsoft I'm an engineer why not

1415
00:57:10,500 --> 00:57:13,140
just use that and I'm the CLI developer

1416
00:57:13,140 --> 00:57:15,660
and on and on it goes copy and pasting

1417
00:57:15,660 --> 00:57:18,780
code so from an oauth perspective you

1418
00:57:18,780 --> 00:57:20,520
can see how development practices are

1419
00:57:20,520 --> 00:57:22,200
going to lead to it's a much wider

1420
00:57:22,200 --> 00:57:24,240
exposure than you typically expect so

1421
00:57:24,240 --> 00:57:27,599
and then outside of apps Google has its

1422
00:57:27,599 --> 00:57:30,900
version other apps right so generally I

1423
00:57:30,900 --> 00:57:33,119
would say no you have to assume it

1424
00:57:33,119 --> 00:57:35,280
affects a large number of apps it's just

1425
00:57:35,280 --> 00:57:37,200
finding and understanding that is

1426
00:57:37,200 --> 00:57:40,339
actually part of the challenge

1427
00:57:41,119 --> 00:57:44,460
got it and I have like multiple people

1428
00:57:44,460 --> 00:57:46,800
asking whether the script can be shared

1429
00:57:46,800 --> 00:57:50,280
as well as the slides so it's absolute

1430
00:57:50,280 --> 00:57:53,520
absolutely there is a um we can get that

1431
00:57:53,520 --> 00:57:56,280
through the O wasp uh folks both the

1432
00:57:56,280 --> 00:57:58,859
slide deck and the script is uh open

1433
00:57:58,859 --> 00:58:01,140
sourced and I I can point people to that

1434
00:58:01,140 --> 00:58:03,059
public repo and that can all be

1435
00:58:03,059 --> 00:58:05,540
distributed

1436
00:58:05,579 --> 00:58:09,000
thank you uh we have another question

1437
00:58:09,000 --> 00:58:11,880
about the same so uh is the access token

1438
00:58:11,880 --> 00:58:14,400
which was like 900 second valid why was

1439
00:58:14,400 --> 00:58:16,500
the token giving access to the huge list

1440
00:58:16,500 --> 00:58:18,720
of resources was this particularly for

1441
00:58:18,720 --> 00:58:21,780
the demo or like yeah okay good question

1442
00:58:21,780 --> 00:58:23,579
and I apologize because we didn't have

1443
00:58:23,579 --> 00:58:24,900
enough time to go through hours and

1444
00:58:24,900 --> 00:58:27,420
hours of the Gory details it's an

1445
00:58:27,420 --> 00:58:31,140
excellent question okay device code

1446
00:58:31,140 --> 00:58:33,780
has some unique characteristics when you

1447
00:58:33,780 --> 00:58:35,400
initiate it you're in control so

1448
00:58:35,400 --> 00:58:37,440
attackers in control to get this user

1449
00:58:37,440 --> 00:58:40,200
code and device code those last for 15

1450
00:58:40,200 --> 00:58:44,040
minutes if you try to use them one's

1451
00:58:44,040 --> 00:58:46,079
used by the user when they authenticate

1452
00:58:46,079 --> 00:58:48,059
ones used by the attacker to achieve

1453
00:58:48,059 --> 00:58:50,400
oauth tokens so you have a time limit to

1454
00:58:50,400 --> 00:58:51,780
use them otherwise you have to

1455
00:58:51,780 --> 00:58:54,900
regenerate them it's easy to regenerate

1456
00:58:54,900 --> 00:58:57,960
that is a separate time frame from Once

1457
00:58:57,960 --> 00:59:00,059
the oauth tokens are actually obtained

1458
00:59:00,059 --> 00:59:01,619
after the user authenticates and

1459
00:59:01,619 --> 00:59:03,359
authorizes an attacker grabs a lot

1460
00:59:03,359 --> 00:59:05,579
tokens the second time limit which is

1461
00:59:05,579 --> 00:59:09,180
different is that access token and that

1462
00:59:09,180 --> 00:59:12,980
uh in almost all implementations has a

1463
00:59:12,980 --> 00:59:16,260
one hour time limit but you always have

1464
00:59:16,260 --> 00:59:18,000
the refresh tokens so for all intents

1465
00:59:18,000 --> 00:59:19,640
and purposes no one notices the hour

1466
00:59:19,640 --> 00:59:23,460
it's just built into the protocol that

1467
00:59:23,460 --> 00:59:25,380
you can effectively refresh it almost

1468
00:59:25,380 --> 00:59:27,059
indefinitely

1469
00:59:27,059 --> 00:59:28,740
but for some reason I'm going to make it

1470
00:59:28,740 --> 00:59:31,619
refresh like once an hour or you can do

1471
00:59:31,619 --> 00:59:34,380
it later right it's just you're going to

1472
00:59:34,380 --> 00:59:35,400
refresh

1473
00:59:35,400 --> 00:59:38,280
um uh as much as that so

1474
00:59:38,280 --> 00:59:40,260
uh the first one affects the attacker

1475
00:59:40,260 --> 00:59:42,359
the time frame to to get the user to

1476
00:59:42,359 --> 00:59:44,839
respond the second one affects nobody

1477
00:59:44,839 --> 00:59:48,240
that it's a detail but you have a

1478
00:59:48,240 --> 00:59:52,200
refresh token so it affects nobody

1479
00:59:52,200 --> 00:59:54,839
uh that for instance to the end of the

1480
00:59:54,839 --> 00:59:57,000
qnd thank you jenko for this great

1481
00:59:57,000 --> 00:59:59,520
presentation and wonderful session and

1482
00:59:59,520 --> 01:00:01,500
for all the follow-up questions you can

1483
01:00:01,500 --> 01:00:04,020
like contact him on the Hoover platform

1484
01:00:04,020 --> 01:00:05,819
thank you so much

1485
01:00:05,819 --> 01:00:09,020
thank you very much

