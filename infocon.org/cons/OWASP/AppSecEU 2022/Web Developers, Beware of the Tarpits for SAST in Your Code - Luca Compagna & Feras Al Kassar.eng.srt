1
00:00:03,480 --> 00:00:06,120
hello everyone so welcome to the Builder

2
00:00:06,120 --> 00:00:08,639
track so I'm Muskan mangla volunteer in

3
00:00:08,639 --> 00:00:10,679
the West Community I'll be moderating

4
00:00:10,679 --> 00:00:13,200
this session during the next 45 minutes

5
00:00:13,200 --> 00:00:15,780
you'll be listening to Dr Luca and

6
00:00:15,780 --> 00:00:18,660
Shiraz present web developers Beware of

7
00:00:18,660 --> 00:00:21,060
the topics for SAS in your code please

8
00:00:21,060 --> 00:00:22,800
submit any questions you have during

9
00:00:22,800 --> 00:00:24,779
this session in the QA tab just to the

10
00:00:24,779 --> 00:00:26,580
right of the video in the harbor

11
00:00:26,580 --> 00:00:29,340
platform I'll be asking Dr Luca and

12
00:00:29,340 --> 00:00:31,080
Faraz your questions in the last 10

13
00:00:31,080 --> 00:00:33,540
minutes of this session please note that

14
00:00:33,540 --> 00:00:35,820
the chat function in Zoom for attendees

15
00:00:35,820 --> 00:00:38,280
is disabled but you can leave your

16
00:00:38,280 --> 00:00:40,680
comments and chat using the chat tab in

17
00:00:40,680 --> 00:00:42,899
the huaweba well I'll introduce the

18
00:00:42,899 --> 00:00:46,379
speakers briefly Dr Luca is a part of

19
00:00:46,379 --> 00:00:48,719
the security research team at sap where

20
00:00:48,719 --> 00:00:50,460
he is contributing to the research

21
00:00:50,460 --> 00:00:52,559
strategy and to the software security

22
00:00:52,559 --> 00:00:54,899
analysis area in particular

23
00:00:54,899 --> 00:00:57,780
Faraz is a PhD student at sap University

24
00:00:57,780 --> 00:01:00,600
doing his research on the web security

25
00:01:00,600 --> 00:01:03,180
domain in his work he focuses on the

26
00:01:03,180 --> 00:01:05,760
static application security analysis to

27
00:01:05,760 --> 00:01:07,680
point out to the difficulties of these

28
00:01:07,680 --> 00:01:09,479
tools and the solutions to have better

29
00:01:09,479 --> 00:01:12,060
coverage of the source code now handing

30
00:01:12,060 --> 00:01:13,979
over to the speakers for this session

31
00:01:13,979 --> 00:01:18,060
and over to you Dr Luca and Shiraz

32
00:01:18,060 --> 00:01:20,520
thanks a lot for the introduction

33
00:01:20,520 --> 00:01:22,680
um I hope you can hear me well good

34
00:01:22,680 --> 00:01:26,040
morning so a pleasure to be to be here

35
00:01:26,040 --> 00:01:28,320
uh yes I will share this presentation

36
00:01:28,320 --> 00:01:30,479
with farasa we start with the short

37
00:01:30,479 --> 00:01:33,180
introduction context Etc then for us we

38
00:01:33,180 --> 00:01:34,920
go into the technical details and then I

39
00:01:34,920 --> 00:01:36,680
will take over for a few conclusion

40
00:01:36,680 --> 00:01:39,479
remarks this work is also a

41
00:01:39,479 --> 00:01:41,640
collaboration with other security

42
00:01:41,640 --> 00:01:45,320
researchers Julia was a former

43
00:01:45,320 --> 00:01:50,340
internal sap security research Fabian is

44
00:01:50,340 --> 00:01:53,579
a chief scientist she threft and David

45
00:01:53,579 --> 00:01:57,420
balzaroti is professor at a curriculum

46
00:01:57,420 --> 00:02:00,420
um so I end all this work is really uh

47
00:02:00,420 --> 00:02:02,220
let's say applied the research work you

48
00:02:02,220 --> 00:02:05,880
will see today and is uh under under an

49
00:02:05,880 --> 00:02:08,098
European project it is called testable

50
00:02:08,098 --> 00:02:10,800
that started last September and uh what

51
00:02:10,800 --> 00:02:12,300
you're going to see here are first

52
00:02:12,300 --> 00:02:14,580
results coming out from that project so

53
00:02:14,580 --> 00:02:16,800
if you like the results please follow up

54
00:02:16,800 --> 00:02:19,260
on the let's say on the news in that

55
00:02:19,260 --> 00:02:21,480
project uh first if you can move to the

56
00:02:21,480 --> 00:02:22,680
next slide please

57
00:02:22,680 --> 00:02:24,180
thanks a lot yeah okay this is the

58
00:02:24,180 --> 00:02:26,040
agenda I already said I will start with

59
00:02:26,040 --> 00:02:27,959
some context and for us we'll take over

60
00:02:27,959 --> 00:02:29,760
with the technical details because this

61
00:02:29,760 --> 00:02:32,819
is really uh something he did during his

62
00:02:32,819 --> 00:02:35,099
PhD that is still ongoing but it's

63
00:02:35,099 --> 00:02:37,739
really one first good Mission he

64
00:02:37,739 --> 00:02:40,379
achieved in this PhD and so for us we

65
00:02:40,379 --> 00:02:42,660
present a motivational example why it is

66
00:02:42,660 --> 00:02:44,519
important what we are doing the approach

67
00:02:44,519 --> 00:02:47,040
that we developed we developed and then

68
00:02:47,040 --> 00:02:48,599
I will take over for some conclusion and

69
00:02:48,599 --> 00:02:52,500
Next Step next flight to us thanks okay

70
00:02:52,500 --> 00:02:55,739
so the context is really fast static

71
00:02:55,739 --> 00:02:57,720
application security testing so I don't

72
00:02:57,720 --> 00:02:59,400
know who is in the audience but I would

73
00:02:59,400 --> 00:03:02,220
suspect that there are some developers

74
00:03:02,220 --> 00:03:05,340
among you web developers and so perhaps

75
00:03:05,340 --> 00:03:07,920
some of you has used these tools uh but

76
00:03:07,920 --> 00:03:11,840
let me quickly say what these tools do

77
00:03:11,840 --> 00:03:14,459
so essentially imagine you have an

78
00:03:14,459 --> 00:03:16,019
application it can be a web application

79
00:03:16,019 --> 00:03:17,400
but it can be also any software

80
00:03:17,400 --> 00:03:19,680
application right well if you have the

81
00:03:19,680 --> 00:03:22,500
code what you can do is to use a static

82
00:03:22,500 --> 00:03:25,019
analyzer so a SAS tool in order to

83
00:03:25,019 --> 00:03:27,540
analyze this code with the hope of

84
00:03:27,540 --> 00:03:30,239
detecting some vulnerabilities so the

85
00:03:30,239 --> 00:03:31,920
code will analyze the code we will

86
00:03:31,920 --> 00:03:34,140
analyze the the source code of your

87
00:03:34,140 --> 00:03:35,700
application tool will analyze the source

88
00:03:35,700 --> 00:03:37,560
code of your application probably

89
00:03:37,560 --> 00:03:39,599
creating a kind of internal structure

90
00:03:39,599 --> 00:03:42,480
initially abstract syntax 3 with some

91
00:03:42,480 --> 00:03:44,400
additional relationship maybe control

92
00:03:44,400 --> 00:03:47,940
flow also some data flow whatever and

93
00:03:47,940 --> 00:03:50,459
then they will start navigating in these

94
00:03:50,459 --> 00:03:51,780
internal structure to discover

95
00:03:51,780 --> 00:03:53,700
vulnerabilities like cross-size

96
00:03:53,700 --> 00:03:57,080
scripting SQL injection others

97
00:03:57,080 --> 00:03:59,220
however I mean

98
00:03:59,220 --> 00:04:01,739
you you get findings from these two

99
00:04:01,739 --> 00:04:04,799
sometimes you get false positive uh and

100
00:04:04,799 --> 00:04:07,319
uh perhaps you you analyze your audit

101
00:04:07,319 --> 00:04:10,080
all the all the findings you fix the the

102
00:04:10,080 --> 00:04:13,200
two positive that were also reported uh

103
00:04:13,200 --> 00:04:15,720
at some point you reach a verdict that

104
00:04:15,720 --> 00:04:17,279
everything is fine so you get the

105
00:04:17,279 --> 00:04:18,540
traffic light

106
00:04:18,540 --> 00:04:20,358
that is green

107
00:04:20,358 --> 00:04:23,820
okay so now what is the conclusion I

108
00:04:23,820 --> 00:04:26,400
mean can we really say that everything

109
00:04:26,400 --> 00:04:29,460
was analyzed in your code and that there

110
00:04:29,460 --> 00:04:31,560
are no vulnerabilities so are we really

111
00:04:31,560 --> 00:04:33,900
sure there are no false positive false

112
00:04:33,900 --> 00:04:35,639
negative sorry in that in that

113
00:04:35,639 --> 00:04:38,220
application uh so this is the kind of

114
00:04:38,220 --> 00:04:40,340
question we were

115
00:04:40,340 --> 00:04:44,820
investigating uh knowing that SAS tools

116
00:04:44,820 --> 00:04:47,340
are widely used in industry so I'm from

117
00:04:47,340 --> 00:04:50,340
we are from sap sap is a large software

118
00:04:50,340 --> 00:04:53,100
company and we use SAS tools internally

119
00:04:53,100 --> 00:04:55,620
uh to let's say during our software

120
00:04:55,620 --> 00:04:58,080
development life cycle to verify to

121
00:04:58,080 --> 00:05:00,300
analyze a program before shipping right

122
00:05:00,300 --> 00:05:03,660
so it's not the only uh tool that we use

123
00:05:03,660 --> 00:05:05,220
it's not the only approach we also have

124
00:05:05,220 --> 00:05:07,919
some Dynamic analysis inside but static

125
00:05:07,919 --> 00:05:10,320
analysis is for sure one of the means we

126
00:05:10,320 --> 00:05:13,199
use in order to ensure that our products

127
00:05:13,199 --> 00:05:14,340
are more secure

128
00:05:14,340 --> 00:05:16,080
and especially when it is about

129
00:05:16,080 --> 00:05:18,120
injection vulnerabilities these tools

130
00:05:18,120 --> 00:05:19,919
are believed to be pretty pretty good

131
00:05:19,919 --> 00:05:22,500
and actually also in the OS code review

132
00:05:22,500 --> 00:05:25,259
guide there is a version two uh I don't

133
00:05:25,259 --> 00:05:26,759
remember when it was delivered but you

134
00:05:26,759 --> 00:05:29,039
have a link just below and if you go on

135
00:05:29,039 --> 00:05:31,320
figure one and figure two of that guide

136
00:05:31,320 --> 00:05:33,780
you will see a kind of survey that was

137
00:05:33,780 --> 00:05:36,720
done quite some time ago in 2015 but I

138
00:05:36,720 --> 00:05:38,639
don't think the let's say really the

139
00:05:38,639 --> 00:05:41,660
mood of developers that were

140
00:05:41,660 --> 00:05:44,400
participating in that survey changed and

141
00:05:44,400 --> 00:05:46,139
they were really saying that yes he did

142
00:05:46,139 --> 00:05:48,419
such tools they believe is a good weapon

143
00:05:48,419 --> 00:05:50,520
against injection vulnerability

144
00:05:50,520 --> 00:05:53,039
uh for us can you move to the next slide

145
00:05:53,039 --> 00:05:56,039
but so as I was saying before so was all

146
00:05:56,039 --> 00:05:58,500
the code analyzed I really sure that

147
00:05:58,500 --> 00:06:01,560
there are no bugs no uh let's say

148
00:06:01,560 --> 00:06:03,960
undetected vulnerability so Force

149
00:06:03,960 --> 00:06:06,240
negatives that are just under this Gap

150
00:06:06,240 --> 00:06:07,979
and this is the kind of question we have

151
00:06:07,979 --> 00:06:11,400
investigated uh to understand let's say

152
00:06:11,400 --> 00:06:15,600
how good or how easy or how hard it is

153
00:06:15,600 --> 00:06:19,080
to do testing with the sustool and how

154
00:06:19,080 --> 00:06:22,199
can we improve the testing if if we can

155
00:06:22,199 --> 00:06:24,180
of course so and this is what we call

156
00:06:24,180 --> 00:06:26,160
testabilities amount testability for

157
00:06:26,160 --> 00:06:29,819
sust so how easy is to test an

158
00:06:29,819 --> 00:06:31,860
application with the SAS tool what is

159
00:06:31,860 --> 00:06:33,660
that makes really difficult for a sus

160
00:06:33,660 --> 00:06:35,880
tool to to analyze an application what

161
00:06:35,880 --> 00:06:37,020
makes it easy

162
00:06:37,020 --> 00:06:39,600
etc etc so now I leave the first for us

163
00:06:39,600 --> 00:06:43,160
to go into the technical details

164
00:06:43,639 --> 00:06:47,780
thank you Luca I hope my voice is clear

165
00:06:47,780 --> 00:06:51,660
so as Luca mentions that uh

166
00:06:51,660 --> 00:06:54,960
what we are missing or is the static but

167
00:06:54,960 --> 00:06:56,580
what much confidence can we have with

168
00:06:56,580 --> 00:06:58,560
that with the static tools

169
00:06:58,560 --> 00:07:01,100
and with you I would like to go through

170
00:07:01,100 --> 00:07:05,460
an example sorry I went to this an

171
00:07:05,460 --> 00:07:09,360
example so here we have an old cve and

172
00:07:09,360 --> 00:07:10,860
with this old cve there's a

173
00:07:10,860 --> 00:07:12,720
vulnerability and the tool we are not

174
00:07:12,720 --> 00:07:15,300
able to discover is a vulnerability

175
00:07:15,300 --> 00:07:18,660
inside but let us go to understand the

176
00:07:18,660 --> 00:07:21,780
path of this of this code and then we

177
00:07:21,780 --> 00:07:25,020
will go more in more details

178
00:07:25,020 --> 00:07:27,120
so here actually we can see that there's

179
00:07:27,120 --> 00:07:29,460
one line of code which is required one

180
00:07:29,460 --> 00:07:32,039
so here is a PHP code and the required

181
00:07:32,039 --> 00:07:34,680
ones in just including a file and we can

182
00:07:34,680 --> 00:07:37,919
see the file it's it's a variable so if

183
00:07:37,919 --> 00:07:39,900
this variable is controlled by an

184
00:07:39,900 --> 00:07:42,240
attacker he can control which which file

185
00:07:42,240 --> 00:07:44,240
will be included he can do some

186
00:07:44,240 --> 00:07:47,460
manipulation here so he can he we will

187
00:07:47,460 --> 00:07:49,919
have a file inclusion vulnerability

188
00:07:49,919 --> 00:07:53,880
so for this we call that the sync so we

189
00:07:53,880 --> 00:07:56,160
have the thing that we need to to check

190
00:07:56,160 --> 00:07:58,919
if this thing there's a value coming

191
00:07:58,919 --> 00:08:02,280
from a source a source as meaning as a

192
00:08:02,280 --> 00:08:05,400
value coming from an external so the

193
00:08:05,400 --> 00:08:08,280
user can control this this variable then

194
00:08:08,280 --> 00:08:09,660
he can control which file will be

195
00:08:09,660 --> 00:08:12,900
included and then maybe the the user

196
00:08:12,900 --> 00:08:15,120
will it will be an attacker which will

197
00:08:15,120 --> 00:08:17,220
manipulate here and we will have the

198
00:08:17,220 --> 00:08:19,880
vulnerability

199
00:08:19,919 --> 00:08:22,139
so if we go backward from this from this

200
00:08:22,139 --> 00:08:25,379
line we can see that the ACT file is

201
00:08:25,379 --> 00:08:27,479
coming from this from this variable act

202
00:08:27,479 --> 00:08:31,740
and it's coming from this GPC get string

203
00:08:31,740 --> 00:08:34,860
inside GPC get string we can see this

204
00:08:34,860 --> 00:08:37,919
there is this called user Funk array in

205
00:08:37,919 --> 00:08:40,500
PHP called user function array is just

206
00:08:40,500 --> 00:08:43,260
to call a function dynamically

207
00:08:43,260 --> 00:08:45,420
so then the name of the function can be

208
00:08:45,420 --> 00:08:48,720
inside a variable or in in our case the

209
00:08:48,720 --> 00:08:51,360
name of the function is just defined

210
00:08:51,360 --> 00:08:55,560
here statically so from this line the

211
00:08:55,560 --> 00:08:58,560
function GPC gate will be called

212
00:08:58,560 --> 00:09:01,560
sorry

213
00:09:02,040 --> 00:09:04,140
so if you go to the function GPC git

214
00:09:04,140 --> 00:09:07,980
which is as we have the the post

215
00:09:07,980 --> 00:09:11,820
which is the source so we can see now

216
00:09:11,820 --> 00:09:15,300
that there is a path from a source to a

217
00:09:15,300 --> 00:09:16,200
sink

218
00:09:16,200 --> 00:09:18,540
where the source where the user can

219
00:09:18,540 --> 00:09:21,240
enter something and then he can

220
00:09:21,240 --> 00:09:23,339
manipulate which file will be included

221
00:09:23,339 --> 00:09:25,560
and that will call the for a firing

222
00:09:25,560 --> 00:09:27,060
query

223
00:09:27,060 --> 00:09:30,060
it's important to understand the

224
00:09:30,060 --> 00:09:31,760
the

225
00:09:31,760 --> 00:09:34,200
vulnerability here

226
00:09:34,200 --> 00:09:36,180
to check then

227
00:09:36,180 --> 00:09:39,360
with a static tool so we just take this

228
00:09:39,360 --> 00:09:41,420
we just take this

229
00:09:41,420 --> 00:09:43,260
vulnerable codes that we already

230
00:09:43,260 --> 00:09:45,540
discussed and we scan it with static

231
00:09:45,540 --> 00:09:47,459
tool and the static many of the static

232
00:09:47,459 --> 00:09:48,839
tools they didn't discover the

233
00:09:48,839 --> 00:09:50,160
vulnerability

234
00:09:50,160 --> 00:09:52,980
what is the main reason of that

235
00:09:52,980 --> 00:09:56,040
we have a doubt that's okay this call

236
00:09:56,040 --> 00:09:58,320
user Frank array we are calling the

237
00:09:58,320 --> 00:10:00,060
function dynamically what if the tool is

238
00:10:00,060 --> 00:10:02,519
not able to understand this line and how

239
00:10:02,519 --> 00:10:04,200
we can check that

240
00:10:04,200 --> 00:10:06,060
to check that

241
00:10:06,060 --> 00:10:08,279
we just called we'll just use something

242
00:10:08,279 --> 00:10:11,399
called the testability pattern

243
00:10:11,399 --> 00:10:13,800
actually the distributed it's just it's

244
00:10:13,800 --> 00:10:16,260
accessibility better it's very simple

245
00:10:16,260 --> 00:10:19,260
code it has a source and it has a sink

246
00:10:19,260 --> 00:10:21,779
it's the same as we explained it before

247
00:10:21,779 --> 00:10:24,660
the source is an input is coming from

248
00:10:24,660 --> 00:10:27,360
external user and the thing in this case

249
00:10:27,360 --> 00:10:29,940
it's an equal for for the values that

250
00:10:29,940 --> 00:10:32,160
will cause an xss but it's not really

251
00:10:32,160 --> 00:10:33,720
important to understand what type of

252
00:10:33,720 --> 00:10:36,240
vulnerability here but we just say okay

253
00:10:36,240 --> 00:10:38,580
we have a source and we have a sink and

254
00:10:38,580 --> 00:10:41,100
there's a path between this source and

255
00:10:41,100 --> 00:10:42,360
sync

256
00:10:42,360 --> 00:10:46,740
so now we will try to play around try to

257
00:10:46,740 --> 00:10:50,160
make it a bit more difficult inside we

258
00:10:50,160 --> 00:10:53,339
will inject our targets between the

259
00:10:53,339 --> 00:10:55,560
source and sync to check if the tools

260
00:10:55,560 --> 00:10:57,120
they are still able to handle these

261
00:10:57,120 --> 00:10:58,800
targets or not

262
00:10:58,800 --> 00:11:02,160
and now in our case we have the case of

263
00:11:02,160 --> 00:11:04,560
cold user function array

264
00:11:04,560 --> 00:11:06,839
and we want to to test the code user

265
00:11:06,839 --> 00:11:10,279
Frank array what we do

266
00:11:10,800 --> 00:11:14,399
just we just simply we tried with our

267
00:11:14,399 --> 00:11:16,380
patterns we try to be straightforward

268
00:11:16,380 --> 00:11:19,740
cover only the the topics that we want

269
00:11:19,740 --> 00:11:22,140
to cover minimize the code so here we

270
00:11:22,140 --> 00:11:23,700
can we can see that we have the call

271
00:11:23,700 --> 00:11:25,320
user function array

272
00:11:25,320 --> 00:11:28,140
we are calling the function f passing an

273
00:11:28,140 --> 00:11:30,899
input returning the input and then we

274
00:11:30,899 --> 00:11:32,760
are printing it so here's also the

275
00:11:32,760 --> 00:11:34,560
vulnerability

276
00:11:34,560 --> 00:11:37,079
and we are sure that we don't have

277
00:11:37,079 --> 00:11:39,180
another Target only we have the code

278
00:11:39,180 --> 00:11:41,700
user Frank array

279
00:11:41,700 --> 00:11:44,640
what about the static tools

280
00:11:44,640 --> 00:11:47,339
when we run when we scan this code with

281
00:11:47,339 --> 00:11:50,040
the static tools we can see that 4 out

282
00:11:50,040 --> 00:11:51,180
of six

283
00:11:51,180 --> 00:11:53,940
in our Arsenal that's the awareness of

284
00:11:53,940 --> 00:11:55,860
not able to handle this code and

285
00:11:55,860 --> 00:11:57,779
discover this vulnerability

286
00:11:57,779 --> 00:12:00,120
and one of them is the commercial tool

287
00:12:00,120 --> 00:12:01,620
we have two commercial Tools in our

288
00:12:01,620 --> 00:12:03,899
Arsenal one of them is a commercial tool

289
00:12:03,899 --> 00:12:05,880
just didn't detect the vulnerability

290
00:12:05,880 --> 00:12:07,620
here

291
00:12:07,620 --> 00:12:11,459
what we do is we try to transform the

292
00:12:11,459 --> 00:12:13,920
pattern so here actually we are just

293
00:12:13,920 --> 00:12:16,320
calling the function we are using call

294
00:12:16,320 --> 00:12:18,300
user function array a built-in function

295
00:12:18,300 --> 00:12:20,459
to call the function GPC gate but

296
00:12:20,459 --> 00:12:22,680
actually we can call the gbck directly

297
00:12:22,680 --> 00:12:25,079
we don't really need to use this this

298
00:12:25,079 --> 00:12:26,760
line

299
00:12:26,760 --> 00:12:29,399
and then in this way we are fixing the

300
00:12:29,399 --> 00:12:31,860
the targets and there is no targets

301
00:12:31,860 --> 00:12:32,640
anymore

302
00:12:32,640 --> 00:12:35,579
but how we can be sure there is no other

303
00:12:35,579 --> 00:12:37,740
Targets in the past between the source

304
00:12:37,740 --> 00:12:39,779
and the sink after doing this

305
00:12:39,779 --> 00:12:42,260
transformation

306
00:12:42,360 --> 00:12:45,000
we scan the code again and then we found

307
00:12:45,000 --> 00:12:46,920
that the commercial tool is able to

308
00:12:46,920 --> 00:12:48,779
detect the file inclusion vulnerability

309
00:12:48,779 --> 00:12:50,160
in this code

310
00:12:50,160 --> 00:12:53,459
that's meaning now the the volume is

311
00:12:53,459 --> 00:12:55,620
solved and we are detecting this just

312
00:12:55,620 --> 00:12:57,360
the stable Target

313
00:12:57,360 --> 00:13:00,180
it's important to point here the effect

314
00:13:00,180 --> 00:13:02,519
of the testability target it could be

315
00:13:02,519 --> 00:13:04,620
just a simple line of code or multiple

316
00:13:04,620 --> 00:13:07,019
line of codes that they are blocking the

317
00:13:07,019 --> 00:13:09,540
flow for the static tools and the static

318
00:13:09,540 --> 00:13:11,880
tools cannot cover what is after

319
00:13:11,880 --> 00:13:14,220
in this projects that we are discussing

320
00:13:14,220 --> 00:13:16,620
the cve actually this function which is

321
00:13:16,620 --> 00:13:19,740
called GPC gate strings it's called many

322
00:13:19,740 --> 00:13:22,620
many times and every time the the tool

323
00:13:22,620 --> 00:13:24,720
will and it's always returning a source

324
00:13:24,720 --> 00:13:27,540
every time there's a call the tool will

325
00:13:27,540 --> 00:13:30,899
consider that as a safe value that it's

326
00:13:30,899 --> 00:13:32,940
not coming from an external user just

327
00:13:32,940 --> 00:13:35,160
because of one line of codes as it were

328
00:13:35,160 --> 00:13:37,939
not able to hunt

329
00:13:38,720 --> 00:13:41,700
so we discussed the effect

330
00:13:41,700 --> 00:13:46,200
uh also after creating our pattern as we

331
00:13:46,200 --> 00:13:48,420
already already so we create different

332
00:13:48,420 --> 00:13:51,000
instances we try to make it a bit more

333
00:13:51,000 --> 00:13:53,220
difficult and check different cases

334
00:13:53,220 --> 00:13:56,700
between between the tools so we already

335
00:13:56,700 --> 00:13:58,139
discussed showing the function is

336
00:13:58,139 --> 00:14:01,260
defined statically what if it's defined

337
00:14:01,260 --> 00:14:04,139
as a constant inside the code and if we

338
00:14:04,139 --> 00:14:06,420
apply constant propagation we can know

339
00:14:06,420 --> 00:14:07,980
which function will be called so it's

340
00:14:07,980 --> 00:14:09,660
the name of the function is inside the

341
00:14:09,660 --> 00:14:11,760
variable with instance 2 but actually

342
00:14:11,760 --> 00:14:14,519
this F variable is already defined

343
00:14:14,519 --> 00:14:15,839
before

344
00:14:15,839 --> 00:14:20,220
and with nss3 just we can know a part of

345
00:14:20,220 --> 00:14:22,260
the name of the function so we can have

346
00:14:22,260 --> 00:14:25,320
like for example here the function is f

347
00:14:25,320 --> 00:14:28,200
underscore then there's something so I

348
00:14:28,200 --> 00:14:31,380
can have a set of possible functions

349
00:14:31,380 --> 00:14:34,980
that can be called which is F1 or F2

350
00:14:34,980 --> 00:14:38,639
so that will help us to reduce the

351
00:14:38,639 --> 00:14:41,699
search space and maybe we can focus only

352
00:14:41,699 --> 00:14:45,019
with these two functions

353
00:14:46,139 --> 00:14:50,040
so now I will want to to go so after we

354
00:14:50,040 --> 00:14:53,160
discuss the how the effect of one when

355
00:14:53,160 --> 00:14:56,040
the stability with arbit I would like to

356
00:14:56,040 --> 00:14:58,740
go through our Research into theology

357
00:14:58,740 --> 00:15:01,860
our work is is divided on three phases

358
00:15:01,860 --> 00:15:05,040
we will go deeply in each phase but let

359
00:15:05,040 --> 00:15:07,980
me say that in the first phase we create

360
00:15:07,980 --> 00:15:10,260
the patterns and we check them with the

361
00:15:10,260 --> 00:15:12,180
static tools

362
00:15:12,180 --> 00:15:14,160
with the second

363
00:15:14,160 --> 00:15:17,279
uh we want to to find their prevalence

364
00:15:17,279 --> 00:15:20,339
and the real projects and in the third

365
00:15:20,339 --> 00:15:23,220
we want to transform this pattern and

366
00:15:23,220 --> 00:15:25,440
see and see their impact on real

367
00:15:25,440 --> 00:15:27,980
projects

368
00:15:28,560 --> 00:15:31,620
so let me begin with the pattern

369
00:15:31,620 --> 00:15:34,500
creation for the patterns we didn't want

370
00:15:34,500 --> 00:15:37,560
to be a language specific we want to our

371
00:15:37,560 --> 00:15:40,139
approach to be generalized for that we

372
00:15:40,139 --> 00:15:42,300
choose two different languages which is

373
00:15:42,300 --> 00:15:44,760
PHP and JavaScript

374
00:15:44,760 --> 00:15:46,920
for many patterns there is a lot of

375
00:15:46,920 --> 00:15:48,540
intersection between the two languages

376
00:15:48,540 --> 00:15:51,600
but it's also it could have one one

377
00:15:51,600 --> 00:15:54,000
language have more features than other

378
00:15:54,000 --> 00:15:55,980
depending on the features that is

379
00:15:55,980 --> 00:15:58,860
providing depending on the dynamicity of

380
00:15:58,860 --> 00:16:01,860
the language or demanding also how the

381
00:16:01,860 --> 00:16:05,699
tool is is provided behaving with with

382
00:16:05,699 --> 00:16:07,560
this language maybe the tool will be

383
00:16:07,560 --> 00:16:09,540
better with one language than other

384
00:16:09,540 --> 00:16:11,760
language

385
00:16:11,760 --> 00:16:13,620
and because we want to be a

386
00:16:13,620 --> 00:16:14,839
systematically

387
00:16:14,839 --> 00:16:18,420
with our creating for our patterns we go

388
00:16:18,420 --> 00:16:19,860
through the documentation of the

389
00:16:19,860 --> 00:16:21,360
languages

390
00:16:21,360 --> 00:16:24,360
we read the documentation we check the

391
00:16:24,360 --> 00:16:27,000
corner cases we check the discussion of

392
00:16:27,000 --> 00:16:29,220
the community about the difficulties of

393
00:16:29,220 --> 00:16:32,399
some of of some cases for the language

394
00:16:32,399 --> 00:16:35,579
and we were creating the patterns so we

395
00:16:35,579 --> 00:16:39,959
create 120 patterns instances for PHP at

396
00:16:39,959 --> 00:16:43,680
115 instances for JavaScript

397
00:16:43,680 --> 00:16:46,380
after creating the patterns

398
00:16:46,380 --> 00:16:49,500
we measure them with our static units so

399
00:16:49,500 --> 00:16:50,779
we have

400
00:16:50,779 --> 00:16:54,000
some of the research tools and some of

401
00:16:54,000 --> 00:16:55,800
commercial tools

402
00:16:55,800 --> 00:16:58,019
we can see that the commercial Tools in

403
00:16:58,019 --> 00:16:59,639
most of the cases they are behaving

404
00:16:59,639 --> 00:17:00,800
better

405
00:17:00,800 --> 00:17:05,880
but overall for uh for PHP there's no

406
00:17:05,880 --> 00:17:08,099
language support more than 50 percentage

407
00:17:08,099 --> 00:17:11,099
of our patterns while for JavaScript

408
00:17:11,099 --> 00:17:13,919
they reach the 60 percentage

409
00:17:13,919 --> 00:17:16,859
uh meanwhile if we take the combination

410
00:17:16,859 --> 00:17:21,000
just like how many patterns that is not

411
00:17:21,000 --> 00:17:24,059
solved by any tool so the combination

412
00:17:24,059 --> 00:17:27,359
can cover 66 percentage of the patterns

413
00:17:27,359 --> 00:17:30,780
in PHP and God can reach for 82

414
00:17:30,780 --> 00:17:35,000
percentage percentage for JavaScript

415
00:17:35,580 --> 00:17:38,700
so like that we create our the stability

416
00:17:38,700 --> 00:17:43,440
the our patterns library but what if our

417
00:17:43,440 --> 00:17:47,460
our patterns are just Corner cases or

418
00:17:47,460 --> 00:17:51,000
just fancy features are no one used some

419
00:17:51,000 --> 00:17:53,460
something just is not really exist and

420
00:17:53,460 --> 00:17:55,799
maybe it's just like okay we can we can

421
00:17:55,799 --> 00:17:57,539
just ignore them

422
00:17:57,539 --> 00:18:00,840
to answer this equation we we went to

423
00:18:00,840 --> 00:18:03,900
check the prevalence of this project of

424
00:18:03,900 --> 00:18:07,260
this patent and real projects

425
00:18:07,260 --> 00:18:10,020
so we try to create a diverse data set

426
00:18:10,020 --> 00:18:13,140
of projects we went to GitHub and we

427
00:18:13,140 --> 00:18:17,520
clone a low popular projects 1000

428
00:18:17,520 --> 00:18:19,559
projects that they have between 20 and

429
00:18:19,559 --> 00:18:23,880
70 Stars medium popular between 200 and

430
00:18:23,880 --> 00:18:27,419
700 Stars High popular 1000 projects

431
00:18:27,419 --> 00:18:28,740
that they have more than one thousand

432
00:18:28,740 --> 00:18:31,260
stars also we found the website it's

433
00:18:31,260 --> 00:18:33,419
called source codeester that is offering

434
00:18:33,419 --> 00:18:36,080
for the community an open source

435
00:18:36,080 --> 00:18:38,580
websites that they can use a part of the

436
00:18:38,580 --> 00:18:41,400
code or they can use the world code

437
00:18:41,400 --> 00:18:44,400
so we combine this data set and we

438
00:18:44,400 --> 00:18:47,539
create we have in our data set 3

439
00:18:47,539 --> 00:18:50,039
340 projects

440
00:18:50,039 --> 00:18:52,919
after after collecting the projects we

441
00:18:52,919 --> 00:18:56,039
begin to use our patterns as a query

442
00:18:56,039 --> 00:18:58,140
inside the source code to search the

443
00:18:58,140 --> 00:19:00,059
occurrence of this of this pattern in

444
00:19:00,059 --> 00:19:01,980
this project

445
00:19:01,980 --> 00:19:04,860
and we found that our targets are highly

446
00:19:04,860 --> 00:19:06,059
prevalent

447
00:19:06,059 --> 00:19:09,600
actually we will experience

448
00:19:09,600 --> 00:19:12,480
yeah we will have 21 unique patterns in

449
00:19:12,480 --> 00:19:13,919
average per project

450
00:19:13,919 --> 00:19:16,080
and we will experience one pattern every

451
00:19:16,080 --> 00:19:18,720
20 line of of code

452
00:19:18,720 --> 00:19:21,299
just to explain here the the graph that

453
00:19:21,299 --> 00:19:24,120
we have so each point is representing a

454
00:19:24,120 --> 00:19:25,020
project

455
00:19:25,020 --> 00:19:27,419
the colors that's representing the sets

456
00:19:27,419 --> 00:19:29,039
that we have as we said it's a high

457
00:19:29,039 --> 00:19:32,160
popular medium popular low popular and

458
00:19:32,160 --> 00:19:34,380
the source code Ester

459
00:19:34,380 --> 00:19:36,539
the Y will represent the number of

460
00:19:36,539 --> 00:19:39,360
unique patterns per project while the X

461
00:19:39,360 --> 00:19:43,080
it will more make me understand how many

462
00:19:43,080 --> 00:19:45,720
line of code I will pass until I will

463
00:19:45,720 --> 00:19:49,200
experience a pattern so in for that the

464
00:19:49,200 --> 00:19:51,299
x is the number of line of code divided

465
00:19:51,299 --> 00:19:53,280
by the occurrence of all the patterns

466
00:19:53,280 --> 00:19:57,360
so here is the patterns for for only for

467
00:19:57,360 --> 00:20:00,059
for all the for all the tools in our in

468
00:20:00,059 --> 00:20:01,380
our work

469
00:20:01,380 --> 00:20:04,620
but we already saw that the commercial

470
00:20:04,620 --> 00:20:07,980
tools are behaving much better than the

471
00:20:07,980 --> 00:20:11,520
uh the research tools so we focus on the

472
00:20:11,520 --> 00:20:16,380
tool to uh commercial tools for PHP

473
00:20:16,380 --> 00:20:19,919
and we take only the type the patterns

474
00:20:19,919 --> 00:20:22,860
that that was not able to be solved by

475
00:20:22,860 --> 00:20:23,940
these tools

476
00:20:23,940 --> 00:20:28,080
and we all we again see that our our

477
00:20:28,080 --> 00:20:29,880
targets are highly prevalent even for

478
00:20:29,880 --> 00:20:31,740
the commercial tools

479
00:20:31,740 --> 00:20:34,919
so the commercial tool will will have an

480
00:20:34,919 --> 00:20:37,020
average certain unique pattern in a

481
00:20:37,020 --> 00:20:38,640
project and we will experience one

482
00:20:38,640 --> 00:20:41,580
pattern every 47 line of code while the

483
00:20:41,580 --> 00:20:45,900
other tool is a bit better that it we

484
00:20:45,900 --> 00:20:48,419
will have 8.5 unique patterns in average

485
00:20:48,419 --> 00:20:50,280
per project

486
00:20:50,280 --> 00:20:52,919
and we will experience one button every

487
00:20:52,919 --> 00:20:55,860
203 line of codes

488
00:20:55,860 --> 00:20:58,580
so now we see this

489
00:20:58,580 --> 00:21:02,520
the the projects are highly privileged

490
00:21:02,520 --> 00:21:04,980
as the patterns are highly prevalent and

491
00:21:04,980 --> 00:21:07,919
we already saw the effect of one targets

492
00:21:07,919 --> 00:21:11,160
how much it can make difficult for the

493
00:21:11,160 --> 00:21:14,580
static tool to handle so now we can see

494
00:21:14,580 --> 00:21:17,340
we can estimate that how much we are

495
00:21:17,340 --> 00:21:20,280
missing uh for negative

496
00:21:20,280 --> 00:21:23,220
when we are using the static tool and we

497
00:21:23,220 --> 00:21:26,880
see that the tool has cannot handle all

498
00:21:26,880 --> 00:21:28,799
the situations

499
00:21:28,799 --> 00:21:31,020
what will be the main message of this

500
00:21:31,020 --> 00:21:32,880
higher prevalence I will return back to

501
00:21:32,880 --> 00:21:35,700
this point but before I just want to

502
00:21:35,700 --> 00:21:37,980
mention that

503
00:21:37,980 --> 00:21:40,400
we have a table in our in our paper

504
00:21:40,400 --> 00:21:42,720
explaining all the details about the

505
00:21:42,720 --> 00:21:45,600
patterns the name of the patterns the

506
00:21:45,600 --> 00:21:48,900
dimensions the tool the answer and their

507
00:21:48,900 --> 00:21:50,100
prevalence

508
00:21:50,100 --> 00:21:53,520
between the four sets in our that is it

509
00:21:53,520 --> 00:21:56,640
and we have this example actually when I

510
00:21:56,640 --> 00:21:59,159
create this pattern I was saying okay

511
00:21:59,159 --> 00:22:01,860
who will use this call user function

512
00:22:01,860 --> 00:22:04,200
array for calling a function statically

513
00:22:04,200 --> 00:22:05,760
like if they can cause a function

514
00:22:05,760 --> 00:22:08,580
directly but I found that

515
00:22:08,580 --> 00:22:10,760
this

516
00:22:10,760 --> 00:22:14,820
target it's used in 208 projects are for

517
00:22:14,820 --> 00:22:16,679
out of 1000 projects in high popular

518
00:22:16,679 --> 00:22:18,539
projects that they have more than one

519
00:22:18,539 --> 00:22:21,379
thousand stars

520
00:22:21,799 --> 00:22:25,140
and to take to take the

521
00:22:25,140 --> 00:22:27,240
the message from from the higher

522
00:22:27,240 --> 00:22:30,059
prevalent prevalence of our patterns it

523
00:22:30,059 --> 00:22:31,799
will help the user to make them aware

524
00:22:31,799 --> 00:22:35,059
about the area of the code that can be

525
00:22:35,059 --> 00:22:38,100
confusing for the static tools instead

526
00:22:38,100 --> 00:22:41,400
of doing the manual work everywhere they

527
00:22:41,400 --> 00:22:43,200
can focus manually as their manual work

528
00:22:43,200 --> 00:22:45,780
in specific areas as the tool is not

529
00:22:45,780 --> 00:22:47,820
able to handle

530
00:22:47,820 --> 00:22:51,299
or maybe it could be possible to

531
00:22:51,299 --> 00:22:53,760
transform some of these patterns and

532
00:22:53,760 --> 00:22:56,460
then it will be reducing the manual work

533
00:22:56,460 --> 00:22:58,500
for the for the developer or the

534
00:22:58,500 --> 00:23:02,039
security team and we will have more uh

535
00:23:02,039 --> 00:23:04,260
we will reduce the risk of having Force

536
00:23:04,260 --> 00:23:05,580
negative

537
00:23:05,580 --> 00:23:07,320
so how we will do this transformation

538
00:23:07,320 --> 00:23:09,780
and how how is the impact of these

539
00:23:09,780 --> 00:23:12,179
patterns that's what what we we

540
00:23:12,179 --> 00:23:14,460
discussed in our last phase of our

541
00:23:14,460 --> 00:23:16,880
experiment

542
00:23:16,880 --> 00:23:18,960
in this phase

543
00:23:18,960 --> 00:23:20,580
we have the

544
00:23:20,580 --> 00:23:23,340
we we have the manual and the automated

545
00:23:23,340 --> 00:23:24,960
experiment

546
00:23:24,960 --> 00:23:27,600
I just want here to say that okay we

547
00:23:27,600 --> 00:23:31,080
have the just just to to have a a brief

548
00:23:31,080 --> 00:23:34,260
idea before we go in details so I have

549
00:23:34,260 --> 00:23:35,640
the project

550
00:23:35,640 --> 00:23:38,340
I I scan it with the static tool and I

551
00:23:38,340 --> 00:23:40,799
have my reports then I will do some

552
00:23:40,799 --> 00:23:43,620
transformation in the middle and I will

553
00:23:43,620 --> 00:23:45,900
have another version of the project I

554
00:23:45,900 --> 00:23:47,880
will scan it again I will have a new

555
00:23:47,880 --> 00:23:50,760
another alert I will compare between the

556
00:23:50,760 --> 00:23:53,340
old and the new one and I will check the

557
00:23:53,340 --> 00:23:55,500
new one because the new one happened

558
00:23:55,500 --> 00:23:58,679
because of my transformation and then I

559
00:23:58,679 --> 00:24:00,720
will have the alerts the tool will give

560
00:24:00,720 --> 00:24:03,720
me okay this path is possible to be

561
00:24:03,720 --> 00:24:05,580
vulnerable

562
00:24:05,580 --> 00:24:08,340
but in my side I have to check if this

563
00:24:08,340 --> 00:24:11,580
path if it's a true positive or if a

564
00:24:11,580 --> 00:24:14,240
false positive

565
00:24:14,820 --> 00:24:17,700
so the manual pattern transformation

566
00:24:17,700 --> 00:24:20,400
I went to an old CD

567
00:24:20,400 --> 00:24:23,520
I I scan it with a static tool if the

568
00:24:23,520 --> 00:24:25,380
tool couldn't find the vulnerability in

569
00:24:25,380 --> 00:24:28,080
this in the static tool then I will

570
00:24:28,080 --> 00:24:30,960
discover the patterns in this vulnerable

571
00:24:30,960 --> 00:24:32,700
path

572
00:24:32,700 --> 00:24:37,140
after I point point the patterns I will

573
00:24:37,140 --> 00:24:38,460
transform them

574
00:24:38,460 --> 00:24:40,740
in the world project

575
00:24:40,740 --> 00:24:43,500
so it's an old cve so we return to the

576
00:24:43,500 --> 00:24:45,419
version of the old version of the

577
00:24:45,419 --> 00:24:47,520
project when was this this problem

578
00:24:47,520 --> 00:24:50,520
exists and we take we take this version

579
00:24:50,520 --> 00:24:52,620
and we do the transformation on this

580
00:24:52,620 --> 00:24:53,940
version

581
00:24:53,940 --> 00:24:56,159
after doing the transformation we run on

582
00:24:56,159 --> 00:24:58,980
the static tools and we check the new

583
00:24:58,980 --> 00:25:01,080
alerts manually

584
00:25:01,080 --> 00:25:02,760
at the same time

585
00:25:02,760 --> 00:25:05,700
we went to the latest version of this

586
00:25:05,700 --> 00:25:07,500
project

587
00:25:07,500 --> 00:25:10,799
and we do the same transformation and we

588
00:25:10,799 --> 00:25:12,419
run with the static tools

589
00:25:12,419 --> 00:25:13,860
so

590
00:25:13,860 --> 00:25:17,460
is the is a problem or the vulnerability

591
00:25:17,460 --> 00:25:19,740
is already discovered before and it's

592
00:25:19,740 --> 00:25:23,940
already solved so if we think about it

593
00:25:23,940 --> 00:25:26,600
it shouldn't be it shouldn't be now

594
00:25:26,600 --> 00:25:28,679
vulnerabilities in the latest version

595
00:25:28,679 --> 00:25:31,740
but is that is this correct I will

596
00:25:31,740 --> 00:25:35,340
answer this question in few slides

597
00:25:35,340 --> 00:25:38,039
but before I will go to that slide I

598
00:25:38,039 --> 00:25:39,840
just want to say we did the

599
00:25:39,840 --> 00:25:42,059
transformation and we experienced three

600
00:25:42,059 --> 00:25:43,860
type of transformation

601
00:25:43,860 --> 00:25:46,320
in the first one we already discussed

602
00:25:46,320 --> 00:25:49,020
this one it's semantically preserving so

603
00:25:49,020 --> 00:25:51,419
actually the code is the same I'm not

604
00:25:51,419 --> 00:25:53,640
changing anything I'm just going instead

605
00:25:53,640 --> 00:25:55,380
of calling the function using colluder

606
00:25:55,380 --> 00:25:59,120
function array I'm calling it directly

607
00:25:59,220 --> 00:26:01,140
in the second approach in the second

608
00:26:01,140 --> 00:26:03,240
transformation so

609
00:26:03,240 --> 00:26:05,460
I need to apply over approximation

610
00:26:05,460 --> 00:26:08,279
and here in this example actually it's

611
00:26:08,279 --> 00:26:11,580
just like we are forwarding the user

612
00:26:11,580 --> 00:26:15,000
from one PHP file to another PHP file by

613
00:26:15,000 --> 00:26:16,559
using a JavaScript

614
00:26:16,559 --> 00:26:19,020
and the tool is not able to understand

615
00:26:19,020 --> 00:26:21,240
and parse the JavaScript to understand

616
00:26:21,240 --> 00:26:24,539
this flow from one file to another file

617
00:26:24,539 --> 00:26:27,120
what I do simply is that I delete this

618
00:26:27,120 --> 00:26:29,600
this

619
00:26:29,600 --> 00:26:32,520
redirecting and I didn't include a

620
00:26:32,520 --> 00:26:34,860
normal PHP

621
00:26:34,860 --> 00:26:38,940
they are the same almost

622
00:26:38,940 --> 00:26:43,679
but in PHP when I have when I Define a

623
00:26:43,679 --> 00:26:46,799
variable in in file one I can use it in

624
00:26:46,799 --> 00:26:47,820
file two

625
00:26:47,820 --> 00:26:51,059
so there's no problem here but when I do

626
00:26:51,059 --> 00:26:54,419
a redirect and I Define the file as a

627
00:26:54,419 --> 00:26:56,580
variable in file one and I will come to

628
00:26:56,580 --> 00:26:59,760
use it in file 2. it will be not defined

629
00:26:59,760 --> 00:27:02,940
it will be an error

630
00:27:02,940 --> 00:27:04,919
while in the third

631
00:27:04,919 --> 00:27:09,419
type we need a developer helper here I

632
00:27:09,419 --> 00:27:12,419
need to explain a bit this pattern so in

633
00:27:12,419 --> 00:27:14,820
this pattern we already speak about the

634
00:27:14,820 --> 00:27:16,679
source and the thing but here's the

635
00:27:16,679 --> 00:27:18,840
topics here here it's a built-in

636
00:27:18,840 --> 00:27:21,480
function it's called extract extract

637
00:27:21,480 --> 00:27:24,200
will take an array and will generate

638
00:27:24,200 --> 00:27:27,419
variables from this array the keys in

639
00:27:27,419 --> 00:27:28,799
this array it will be the name of the

640
00:27:28,799 --> 00:27:31,380
variables and the values in this array

641
00:27:31,380 --> 00:27:33,179
to be the values of the value

642
00:27:33,179 --> 00:27:34,799
so here

643
00:27:34,799 --> 00:27:38,520
the a actually will carry the value of

644
00:27:38,520 --> 00:27:42,120
AAA which is a which is the source so

645
00:27:42,120 --> 00:27:45,120
here we have an exercise vulnerability

646
00:27:45,120 --> 00:27:48,240
and when I was doing this manual work I

647
00:27:48,240 --> 00:27:51,720
experienced a code like that

648
00:27:51,720 --> 00:27:57,120
extract post and then an SQL query and

649
00:27:57,120 --> 00:27:59,880
then I have username and password from

650
00:27:59,880 --> 00:28:01,679
where this username and password even

651
00:28:01,679 --> 00:28:04,679
for maybe a person who is reading the

652
00:28:04,679 --> 00:28:07,320
code is difficult to know so how the

653
00:28:07,320 --> 00:28:09,740
static tool will deal with that actually

654
00:28:09,740 --> 00:28:12,240
this username and password are coming

655
00:28:12,240 --> 00:28:14,220
from the post

656
00:28:14,220 --> 00:28:17,159
so here we need the developer to do

657
00:28:17,159 --> 00:28:20,580
annotation to say okay this username and

658
00:28:20,580 --> 00:28:24,600
password are part of this post

659
00:28:24,600 --> 00:28:27,240
then if we look to the code

660
00:28:27,240 --> 00:28:29,820
it will be very simple for the static

661
00:28:29,820 --> 00:28:31,740
tool now to discover the SQL injection

662
00:28:31,740 --> 00:28:35,000
in this in these cases okay I have

663
00:28:35,000 --> 00:28:37,740
variables coming from the post going to

664
00:28:37,740 --> 00:28:40,500
SQL query without sanitization so here

665
00:28:40,500 --> 00:28:42,360
we have an escape we have an SQL

666
00:28:42,360 --> 00:28:44,658
injection

667
00:28:47,640 --> 00:28:48,900
so

668
00:28:48,900 --> 00:28:50,340
uh

669
00:28:50,340 --> 00:28:55,380
in our paper we work on five cve for PHP

670
00:28:55,380 --> 00:28:58,620
5 cve for JavaScript

671
00:28:58,620 --> 00:29:01,020
we have all the details on the paper we

672
00:29:01,020 --> 00:29:03,900
put the cve number the vulnerability in

673
00:29:03,900 --> 00:29:07,140
gcpe the pattern that we transform and

674
00:29:07,140 --> 00:29:09,720
the new alerts as we discovered so for

675
00:29:09,720 --> 00:29:10,919
PHP

676
00:29:10,919 --> 00:29:13,559
we transform nine patterns and for

677
00:29:13,559 --> 00:29:17,580
JavaScript we we transform 17 patterns

678
00:29:17,580 --> 00:29:19,980
adding the vulnerable version actually

679
00:29:19,980 --> 00:29:22,980
after doing the transformation

680
00:29:22,980 --> 00:29:27,659
we found 300 204 through positive real

681
00:29:27,659 --> 00:29:29,880
vulnerabilities or exist in the

682
00:29:29,880 --> 00:29:31,740
vulnerable version after transforming

683
00:29:31,740 --> 00:29:33,659
these nine patterns

684
00:29:33,659 --> 00:29:35,580
the static tools were able to detect

685
00:29:35,580 --> 00:29:36,600
them

686
00:29:36,600 --> 00:29:42,240
and 20 uh in JavaScript

687
00:29:42,240 --> 00:29:46,320
so that was about the vulnerable version

688
00:29:46,320 --> 00:29:47,580
while

689
00:29:47,580 --> 00:29:50,100
in the latest version we have we

690
00:29:50,100 --> 00:29:52,320
discovered six and new conferent

691
00:29:52,320 --> 00:29:54,419
vulnerabilities from compared by the

692
00:29:54,419 --> 00:29:57,419
developers and gain the cve about them

693
00:29:57,419 --> 00:30:00,539
it's an old cve it we have an old cve

694
00:30:00,539 --> 00:30:03,480
and the problem is already known

695
00:30:03,480 --> 00:30:06,240
and uh till the moment we are

696
00:30:06,240 --> 00:30:07,500
discovering these vulnerabilities

697
00:30:07,500 --> 00:30:10,440
because of these targets so actually

698
00:30:10,440 --> 00:30:13,020
it's important when we receive a call

699
00:30:13,020 --> 00:30:17,700
when we receive a report from from bug

700
00:30:17,700 --> 00:30:20,039
Bounty or someone to tell us okay you

701
00:30:20,039 --> 00:30:21,899
have a vulnerability here it's not

702
00:30:21,899 --> 00:30:24,059
enough to fix this vulnerability

703
00:30:24,059 --> 00:30:26,820
I need to search for the reason why this

704
00:30:26,820 --> 00:30:28,860
vulnerability was exist and I didn't

705
00:30:28,860 --> 00:30:30,299
found it before

706
00:30:30,299 --> 00:30:33,179
if I'm using static tools and the reason

707
00:30:33,179 --> 00:30:37,679
that I is the targets so I received I

708
00:30:37,679 --> 00:30:39,899
received the report I go to the main

709
00:30:39,899 --> 00:30:42,120
reason which is the target I try to

710
00:30:42,120 --> 00:30:44,399
transform it and then I run the tool

711
00:30:44,399 --> 00:30:46,440
again and I will have a better coverage

712
00:30:46,440 --> 00:30:51,779
I will have less less risk of forcing it

713
00:30:51,779 --> 00:30:52,799
so

714
00:30:52,799 --> 00:30:57,120
this manual transformation done on just

715
00:30:57,120 --> 00:30:58,679
10 projects

716
00:30:58,679 --> 00:31:01,440
but actually this results give us the

717
00:31:01,440 --> 00:31:02,460
motivation

718
00:31:02,460 --> 00:31:04,500
to go to automatic pattern

719
00:31:04,500 --> 00:31:06,299
transformation

720
00:31:06,299 --> 00:31:09,000
for this for that we choose we choose

721
00:31:09,000 --> 00:31:11,340
five pattern that we say okay we will

722
00:31:11,340 --> 00:31:13,980
transfer them manually automatically

723
00:31:13,980 --> 00:31:17,039
sorry we transform them automatically on

724
00:31:17,039 --> 00:31:19,820
the data sets as we discussed before a

725
00:31:19,820 --> 00:31:25,260
300 300 projects inside and we will

726
00:31:25,260 --> 00:31:29,520
compare the the alerts before and after

727
00:31:29,520 --> 00:31:31,500
and we will check the new alerts

728
00:31:31,500 --> 00:31:34,159
manually

729
00:31:34,159 --> 00:31:38,580
so here just a table to explain that we

730
00:31:38,580 --> 00:31:42,539
have R1 R2 to R5 is is the pattern that

731
00:31:42,539 --> 00:31:45,120
we choose and we have their occurrence

732
00:31:45,120 --> 00:31:46,679
in each state in our data State

733
00:31:46,679 --> 00:31:48,480
depending on the occurrence and the

734
00:31:48,480 --> 00:31:50,580
number of separations

735
00:31:50,580 --> 00:31:52,980
then we have the number of new alerts

736
00:31:52,980 --> 00:31:56,700
that we found and out of this new alerts

737
00:31:56,700 --> 00:32:00,120
how many true positive we have

738
00:32:00,120 --> 00:32:02,700
so in this experiment

739
00:32:02,700 --> 00:32:05,899
we refactored a

740
00:32:05,899 --> 00:32:10,320
1170 project with the occurrence of 32

741
00:32:10,320 --> 00:32:12,000
000.

742
00:32:12,000 --> 00:32:16,620
we had nine around 9 000 new alerts in

743
00:32:16,620 --> 00:32:18,299
72 applications

744
00:32:18,299 --> 00:32:21,020
overall we discovered

745
00:32:21,020 --> 00:32:23,700
370 new vulnerabilities in 43

746
00:32:23,700 --> 00:32:25,320
applications

747
00:32:25,320 --> 00:32:28,860
out of this 370 370 new vulnerabilities

748
00:32:28,860 --> 00:32:31,440
55 vulnerabilities in high popular

749
00:32:31,440 --> 00:32:33,539
projects thus they have more than one

750
00:32:33,539 --> 00:32:36,000
thousand stars

751
00:32:36,000 --> 00:32:39,600
so we can see that it's just by

752
00:32:39,600 --> 00:32:42,179
transforming five patterns

753
00:32:42,179 --> 00:32:44,880
but as we have we have already around

754
00:32:44,880 --> 00:32:48,240
the where we have 120 instances for PHP

755
00:32:48,240 --> 00:32:52,140
says we could have this coverage so

756
00:32:52,140 --> 00:32:55,380
it's it's giving us uh it should be

757
00:32:55,380 --> 00:32:58,980
giving us an alert just how to how to

758
00:32:58,980 --> 00:33:01,500
work with the static tool and it's it's

759
00:33:01,500 --> 00:33:05,159
of course it's reducing the manual work

760
00:33:05,159 --> 00:33:08,460
a lot but still we cannot really say

761
00:33:08,460 --> 00:33:10,620
okay we are safe after using the static

762
00:33:10,620 --> 00:33:14,279
tool and the targets will help us and

763
00:33:14,279 --> 00:33:16,260
help the static tool to have better

764
00:33:16,260 --> 00:33:18,799
coverage

765
00:33:19,279 --> 00:33:23,220
so we already discussed as we have many

766
00:33:23,220 --> 00:33:25,799
discoveries depending on two different

767
00:33:25,799 --> 00:33:27,019
uh

768
00:33:27,019 --> 00:33:30,000
experiments manual and automated as we

769
00:33:30,000 --> 00:33:32,460
did we did the responsible disclosure

770
00:33:32,460 --> 00:33:35,340
for all the vulnerabilities and we gain

771
00:33:35,340 --> 00:33:39,360
the CD is all the details actually about

772
00:33:39,360 --> 00:33:42,539
about the manual and the automated

773
00:33:42,539 --> 00:33:45,380
experiments about the cves

774
00:33:45,380 --> 00:33:49,080
about about the the patterns everything

775
00:33:49,080 --> 00:33:52,559
is the is inside our repository on

776
00:33:52,559 --> 00:33:55,860
GitHub so please feel free to to go to

777
00:33:55,860 --> 00:33:58,140
there and and check all the resources as

778
00:33:58,140 --> 00:34:00,860
we have over there

779
00:34:01,140 --> 00:34:05,659
now I pass again to to Luca

780
00:34:07,740 --> 00:34:10,619
sorry just the time to unmute thanks a

781
00:34:10,619 --> 00:34:11,879
lot for us

782
00:34:11,879 --> 00:34:14,879
um so yeah indeed just to wrap up and to

783
00:34:14,879 --> 00:34:17,760
take the main takeaway messages out of

784
00:34:17,760 --> 00:34:20,219
these so you saw that we created the

785
00:34:20,219 --> 00:34:22,859
stability patterns and we created those

786
00:34:22,859 --> 00:34:26,219
for PHP and more or less more than 100

787
00:34:26,219 --> 00:34:28,500
more than 100 also for JavaScript 150

788
00:34:28,500 --> 00:34:31,918
whatever we saw that these patterns this

789
00:34:31,918 --> 00:34:34,800
that that capture what we call targets

790
00:34:34,800 --> 00:34:38,760
so things that might confuse static

791
00:34:38,760 --> 00:34:39,839
analyzers

792
00:34:39,839 --> 00:34:42,659
uh we saw that these targets are real

793
00:34:42,659 --> 00:34:46,440
that uh if you if you search for them in

794
00:34:46,440 --> 00:34:49,080
real application you find them and

795
00:34:49,080 --> 00:34:51,179
actually I think this is also a very

796
00:34:51,179 --> 00:34:53,580
good added value of our war because why

797
00:34:53,580 --> 00:34:56,040
we create a pattern that is a small test

798
00:34:56,040 --> 00:34:59,339
case for a SAS tool we also create what

799
00:34:59,339 --> 00:35:01,320
we call the discovery room so what

800
00:35:01,320 --> 00:35:04,500
allows us to discover the pattern in

801
00:35:04,500 --> 00:35:06,540
real application that discover the tarpy

802
00:35:06,540 --> 00:35:08,700
in the tarpet area application

803
00:35:08,700 --> 00:35:10,859
and then we saw that by transforming

804
00:35:10,859 --> 00:35:12,599
them it's not always possible

805
00:35:12,599 --> 00:35:15,300
and feras mentioned that there are these

806
00:35:15,300 --> 00:35:17,460
three types of transformation we we

807
00:35:17,460 --> 00:35:19,380
identified so far so it's not always

808
00:35:19,380 --> 00:35:21,599
possible perhaps sometimes we need help

809
00:35:21,599 --> 00:35:23,400
from the developer if the developer

810
00:35:23,400 --> 00:35:26,220
wants to you know to help but at least

811
00:35:26,220 --> 00:35:28,560
the developer will know that that part

812
00:35:28,560 --> 00:35:30,960
of the code will not be analyzed by the

813
00:35:30,960 --> 00:35:33,660
tool so that is already quite important

814
00:35:33,660 --> 00:35:34,980
information because it provides

815
00:35:34,980 --> 00:35:36,420
awareness right

816
00:35:36,420 --> 00:35:38,280
and we saw that by doing transformation

817
00:35:38,280 --> 00:35:40,680
so by Transforming Our top it's by

818
00:35:40,680 --> 00:35:42,119
removing our targets we were able to

819
00:35:42,119 --> 00:35:43,800
discover to detect a lot of

820
00:35:43,800 --> 00:35:47,220
vulnerabilities uh that was a very huge

821
00:35:47,220 --> 00:35:49,800
amount of work especially for feras he

822
00:35:49,800 --> 00:35:52,820
mentioned about 9 000 new

823
00:35:52,820 --> 00:35:55,380
findings from the static analyzer he

824
00:35:55,380 --> 00:35:57,359
didn't analyze all of them of course he

825
00:35:57,359 --> 00:36:00,960
analyzed I think 2700 and out of time he

826
00:36:00,960 --> 00:36:02,180
was able to discover

827
00:36:02,180 --> 00:36:04,920
317 new vulnerabilities and if you count

828
00:36:04,920 --> 00:36:06,540
also with the manual experiments is more

829
00:36:06,540 --> 00:36:09,359
than 400 and by doing the responsible

830
00:36:09,359 --> 00:36:11,460
disclosure developments of this project

831
00:36:11,460 --> 00:36:14,820
confirmed that essentially what we were

832
00:36:14,820 --> 00:36:18,300
let's say auditing as true positive was

833
00:36:18,300 --> 00:36:20,579
a real true positive I mean not in all

834
00:36:20,579 --> 00:36:23,940
what what this transformation show is

835
00:36:23,940 --> 00:36:26,880
that by doing that work we can really

836
00:36:26,880 --> 00:36:28,859
increase the testability of the

837
00:36:28,859 --> 00:36:31,020
application when the application is

838
00:36:31,020 --> 00:36:33,060
tested via sas2

839
00:36:33,060 --> 00:36:35,339
uh there is also something nice that we

840
00:36:35,339 --> 00:36:36,960
haven't done in our in our world that

841
00:36:36,960 --> 00:36:39,480
perhaps uh can be can be done and I

842
00:36:39,480 --> 00:36:41,760
think it we believe is something uh

843
00:36:41,760 --> 00:36:44,040
important for the community

844
00:36:44,040 --> 00:36:46,440
um so essentially our targets are

845
00:36:46,440 --> 00:36:48,060
available for the community

846
00:36:48,060 --> 00:36:51,300
and if SAS tools wants to use them in

847
00:36:51,300 --> 00:36:53,640
order to measure what they support and

848
00:36:53,640 --> 00:36:56,700
what they do not support and to see also

849
00:36:56,700 --> 00:36:59,040
what can be supported in the new release

850
00:36:59,040 --> 00:37:01,500
perhaps that is something that can be

851
00:37:01,500 --> 00:37:03,720
done so what I'm what I'm saying is from

852
00:37:03,720 --> 00:37:05,400
one side you can try to improve the

853
00:37:05,400 --> 00:37:08,339
testability of an application by

854
00:37:08,339 --> 00:37:10,619
transforming by removing the target from

855
00:37:10,619 --> 00:37:12,180
the other side you can try to improve

856
00:37:12,180 --> 00:37:15,720
the tool by making them supporting more

857
00:37:15,720 --> 00:37:18,060
targets

858
00:37:18,060 --> 00:37:20,760
um so what are we working right now and

859
00:37:20,760 --> 00:37:23,099
what are our next steps uh so we are

860
00:37:23,099 --> 00:37:26,220
trying to enrich our catalogs one thing

861
00:37:26,220 --> 00:37:27,960
that we are doing is to focus on the

862
00:37:27,960 --> 00:37:29,640
Java language also because this is a

863
00:37:29,640 --> 00:37:31,800
language that is very widely used but

864
00:37:31,800 --> 00:37:35,460
overall in the world but also sap uh and

865
00:37:35,460 --> 00:37:38,099
also we are uh let's say maturing our

866
00:37:38,099 --> 00:37:40,560
research so we can see that our pattern

867
00:37:40,560 --> 00:37:43,740
schema uh can be improved we can add

868
00:37:43,740 --> 00:37:45,960
other features to the pattern that are

869
00:37:45,960 --> 00:37:49,320
that are important uh I I cannot provide

870
00:37:49,320 --> 00:37:51,119
the details right now we don't have the

871
00:37:51,119 --> 00:37:53,280
time we are also developing a framework

872
00:37:53,280 --> 00:37:55,859
to operate this pattern so

873
00:37:55,859 --> 00:37:58,079
we want I mean it would be kind of a

874
00:37:58,079 --> 00:37:59,240
database

875
00:37:59,240 --> 00:38:01,740
or file system based but it doesn't

876
00:38:01,740 --> 00:38:03,480
matter so we can create buttons we can

877
00:38:03,480 --> 00:38:06,359
add those patterns in our catalog we can

878
00:38:06,359 --> 00:38:08,640
measure those patterns against an

879
00:38:08,640 --> 00:38:11,940
arsenal of static analyzers and we can

880
00:38:11,940 --> 00:38:13,740
discover those pattern in real

881
00:38:13,740 --> 00:38:16,320
application and perhaps then we can also

882
00:38:16,320 --> 00:38:18,240
you know have operation for transforming

883
00:38:18,240 --> 00:38:20,460
some of them in an automated manner

884
00:38:20,460 --> 00:38:22,859
what we want to do uh in the context of

885
00:38:22,859 --> 00:38:25,079
these European project called testable

886
00:38:25,079 --> 00:38:29,160
is to have let's say a tie with with

887
00:38:29,160 --> 00:38:31,380
obasp and we're going to propose a

888
00:38:31,380 --> 00:38:33,900
novice project so that we can involve

889
00:38:33,900 --> 00:38:35,820
the ovas community we would do this by

890
00:38:35,820 --> 00:38:38,339
by the end of this year I think and what

891
00:38:38,339 --> 00:38:40,500
we would like to do is our part our

892
00:38:40,500 --> 00:38:42,060
targets are already available to the

893
00:38:42,060 --> 00:38:44,640
community but we would like to uh to

894
00:38:44,640 --> 00:38:46,800
make them more specific to the ovas

895
00:38:46,800 --> 00:38:49,740
community uh because I mean the web is

896
00:38:49,740 --> 00:38:52,200
the area we are we are targeting and we

897
00:38:52,200 --> 00:38:53,940
hope that by doing so the obas community

898
00:38:53,940 --> 00:38:57,359
can also uh you know participate create

899
00:38:57,359 --> 00:39:00,060
perhaps some patterns on their own and

900
00:39:00,060 --> 00:39:02,460
help us and the entire Community to

901
00:39:02,460 --> 00:39:04,920
improve uh the the results of the static

902
00:39:04,920 --> 00:39:06,240
analysis side

903
00:39:06,240 --> 00:39:08,640
so if any of you is interested to to use

904
00:39:08,640 --> 00:39:10,380
already now the patterns get in touch

905
00:39:10,380 --> 00:39:12,300
with us because the link that for us

906
00:39:12,300 --> 00:39:15,180
provided that is in the slide is about

907
00:39:15,180 --> 00:39:18,540
the target we had at the time of paper

908
00:39:18,540 --> 00:39:21,599
that is let's say six months ago more or

909
00:39:21,599 --> 00:39:25,020
less so we have definitely updates that

910
00:39:25,020 --> 00:39:27,060
we didn't push yet because we are still

911
00:39:27,060 --> 00:39:29,160
refining the scheme of the pattern Etc

912
00:39:29,160 --> 00:39:31,140
but if you want to use them get in touch

913
00:39:31,140 --> 00:39:33,359
with us but we can provide anyhow the

914
00:39:33,359 --> 00:39:35,280
latest version so that you will not to

915
00:39:35,280 --> 00:39:38,940
work with let's say an old version but

916
00:39:38,940 --> 00:39:40,920
as I said by the end of the year with

917
00:39:40,920 --> 00:39:43,200
the OS Project I think we will deliver a

918
00:39:43,200 --> 00:39:46,260
good stable version of this these

919
00:39:46,260 --> 00:39:48,420
targets can you move to the next line

920
00:39:48,420 --> 00:39:50,780
for us

921
00:39:54,660 --> 00:39:55,980
to us

922
00:39:55,980 --> 00:39:59,400
can you yeah thanks okay so get in touch

923
00:39:59,400 --> 00:40:01,800
with us you have the emails here I

924
00:40:01,800 --> 00:40:03,180
already mentioned this is a joint work

925
00:40:03,180 --> 00:40:06,180
with other researchers funded by an

926
00:40:06,180 --> 00:40:08,640
European project uh there is a Blog that

927
00:40:08,640 --> 00:40:12,119
we um recently wrote if you want to have

928
00:40:12,119 --> 00:40:15,420
a look you have a link in the slide is I

929
00:40:15,420 --> 00:40:17,940
mean is a short blog you can get a bit

930
00:40:17,940 --> 00:40:19,500
more details if you if you continue

931
00:40:19,500 --> 00:40:22,079
reading but I mean I think I think also

932
00:40:22,079 --> 00:40:25,800
if you if you want to say explain our

933
00:40:25,800 --> 00:40:27,420
work to others that could be a good

934
00:40:27,420 --> 00:40:29,579
means and if you have if you want to

935
00:40:29,579 --> 00:40:31,800
have really full technical details then

936
00:40:31,800 --> 00:40:34,020
I would suggest to go into into our

937
00:40:34,020 --> 00:40:36,720
papers or just come back to us and with

938
00:40:36,720 --> 00:40:38,700
that thanks a lot for your attention and

939
00:40:38,700 --> 00:40:42,680
we are open for questioning

940
00:40:46,940 --> 00:40:49,740
for the wonderful and amazing session it

941
00:40:49,740 --> 00:40:51,900
was so insightful and very deep about

942
00:40:51,900 --> 00:40:54,359
the sast and how you analyze the

943
00:40:54,359 --> 00:40:56,520
patterns how you automated and how you

944
00:40:56,520 --> 00:40:58,800
compare the tools very insightful

945
00:40:58,800 --> 00:41:01,560
session all together now jumping to the

946
00:41:01,560 --> 00:41:05,579
Q a uh if audience has asked any of the

947
00:41:05,579 --> 00:41:06,900
questions

948
00:41:06,900 --> 00:41:09,780
uh yeah one of them has has asked like

949
00:41:09,780 --> 00:41:11,880
are you providing the slides where do

950
00:41:11,880 --> 00:41:14,220
you publish the paper or do you have a

951
00:41:14,220 --> 00:41:16,079
link or any kind of information so that

952
00:41:16,079 --> 00:41:18,599
so that they can have a read of your

953
00:41:18,599 --> 00:41:19,740
paper

954
00:41:19,740 --> 00:41:21,919
foreign

955
00:41:24,140 --> 00:41:26,880
having those links

956
00:41:26,880 --> 00:41:31,140
um so uh just if you if you go in these

957
00:41:31,140 --> 00:41:33,300
two links you will find the information

958
00:41:33,300 --> 00:41:35,339
that you are looking for if there is

959
00:41:35,339 --> 00:41:37,020
anything else that that you need just

960
00:41:37,020 --> 00:41:38,700
get in touch with us I mean not the

961
00:41:38,700 --> 00:41:39,839
problem at all

962
00:41:39,839 --> 00:41:44,160
absolutely sure and the rest uh I do

963
00:41:44,160 --> 00:41:46,380
have the queries so I just wanted to

964
00:41:46,380 --> 00:41:49,020
know basically how do you discover your

965
00:41:49,020 --> 00:41:51,599
testibility targets

966
00:41:51,599 --> 00:41:55,680
okay maybe I can take this question so

967
00:41:55,680 --> 00:41:57,900
as we mentioned at the beginning we have

968
00:41:57,900 --> 00:42:00,900
a joint work with the shift left and

969
00:42:00,900 --> 00:42:04,520
actually they provide to us a

970
00:42:04,520 --> 00:42:07,380
framework that we can generate the code

971
00:42:07,380 --> 00:42:10,380
property graph about the source code if

972
00:42:10,380 --> 00:42:11,579
someone doesn't know about the code

973
00:42:11,579 --> 00:42:13,859
property graph it's a way a data

974
00:42:13,859 --> 00:42:15,780
structure to represent the source code

975
00:42:15,780 --> 00:42:20,820
when they there's the AST that is uh the

976
00:42:20,820 --> 00:42:23,940
flow between between the data flow and

977
00:42:23,940 --> 00:42:26,640
the control flow and the code flow it's

978
00:42:26,640 --> 00:42:28,859
a it's a bit complicated data structures

979
00:42:28,859 --> 00:42:31,380
but it's a it's quite famous for

980
00:42:31,380 --> 00:42:33,599
representing the graph and then they

981
00:42:33,599 --> 00:42:36,660
have this their query language to to to

982
00:42:36,660 --> 00:42:39,839
to run on this code property graph and

983
00:42:39,839 --> 00:42:42,599
that's what we used actually to to to

984
00:42:42,599 --> 00:42:46,160
search inside the big amount of of

985
00:42:46,160 --> 00:42:48,720
projects and to search for our

986
00:42:48,720 --> 00:42:51,480
testability targets inside

987
00:42:51,480 --> 00:42:54,599
thank you that is really awesome and how

988
00:42:54,599 --> 00:42:56,220
do you transform them can you transfer

989
00:42:56,220 --> 00:43:00,500
everything or like uh yeah

990
00:43:00,500 --> 00:43:05,460
so as Luke I mentioned that uh till the

991
00:43:05,460 --> 00:43:09,119
moment it's not really possible uh or we

992
00:43:09,119 --> 00:43:11,940
don't have enough mature in in this

993
00:43:11,940 --> 00:43:13,920
direction of our research to say okay

994
00:43:13,920 --> 00:43:16,500
how we can transform all of them this

995
00:43:16,500 --> 00:43:18,180
would be very interesting for the

996
00:43:18,180 --> 00:43:20,819
community for the upcoming work maybe to

997
00:43:20,819 --> 00:43:22,980
check more how they can to do the

998
00:43:22,980 --> 00:43:24,420
transformation

999
00:43:24,420 --> 00:43:26,940
the five Autumn the five automatic

1000
00:43:26,940 --> 00:43:30,420
Transformations that we used we used use

1001
00:43:30,420 --> 00:43:33,480
them from the T1 type which is a

1002
00:43:33,480 --> 00:43:36,720
semantic preserving and that's uh help

1003
00:43:36,720 --> 00:43:40,859
us to not produce a huge amount of uh

1004
00:43:40,859 --> 00:43:43,140
false false positive when we if you

1005
00:43:43,140 --> 00:43:45,780
apply the overall approximation so it

1006
00:43:45,780 --> 00:43:48,119
does help us to give a specific number

1007
00:43:48,119 --> 00:43:50,700
of alerts and out of this alerts we

1008
00:43:50,700 --> 00:43:52,740
could find the species like we can't

1009
00:43:52,740 --> 00:43:55,020
find the true positive inside

1010
00:43:55,020 --> 00:43:57,300
okay thank you for answering and the

1011
00:43:57,300 --> 00:44:00,420
last question uh so how OS Community can

1012
00:44:00,420 --> 00:44:02,400
take advantage of your testibility

1013
00:44:02,400 --> 00:44:04,140
patents

1014
00:44:04,140 --> 00:44:06,660
maybe I can take that one

1015
00:44:06,660 --> 00:44:10,140
um so yeah as we mentioned before we uh

1016
00:44:10,140 --> 00:44:12,420
okay the the patterns are already

1017
00:44:12,420 --> 00:44:15,119
available so if anyone wants to use them

1018
00:44:15,119 --> 00:44:17,220
it can do that I would suggest again to

1019
00:44:17,220 --> 00:44:18,980
come in touch with us because there is

1020
00:44:18,980 --> 00:44:22,380
an ongoing version so it could that the

1021
00:44:22,380 --> 00:44:24,119
person could just get this ongoing

1022
00:44:24,119 --> 00:44:27,060
version rather than the the oldest one

1023
00:44:27,060 --> 00:44:28,319
um the other one

1024
00:44:28,319 --> 00:44:31,079
um however I mean we will definitely try

1025
00:44:31,079 --> 00:44:34,800
to add this OS Project uh to

1026
00:44:34,800 --> 00:44:37,260
um let's say advertise and to make our

1027
00:44:37,260 --> 00:44:40,380
patterns more tied to the to the overs

1028
00:44:40,380 --> 00:44:43,079
community and I hope we hope that by

1029
00:44:43,079 --> 00:44:44,579
doing so

1030
00:44:44,579 --> 00:44:47,220
um we will have yeah more people uh

1031
00:44:47,220 --> 00:44:50,040
let's say helping us in this work and

1032
00:44:50,040 --> 00:44:52,440
perhaps making so web application more

1033
00:44:52,440 --> 00:44:55,140
testable for SAS at the end of the day

1034
00:44:55,140 --> 00:44:57,839
yeah okay okay for sure thank you so

1035
00:44:57,839 --> 00:45:00,900
much and the last question so sorry uh

1036
00:45:00,900 --> 00:45:03,359
from audience that I somebody has

1037
00:45:03,359 --> 00:45:04,800
mentioned that I would be interested

1038
00:45:04,800 --> 00:45:06,300
what was the response from the

1039
00:45:06,300 --> 00:45:09,060
commercial SAS tools vendors if any

1040
00:45:09,060 --> 00:45:11,579
record regarding missing so many Targets

1041
00:45:11,579 --> 00:45:13,440
in the code

1042
00:45:13,440 --> 00:45:16,319
so okay it's a good question um I mean

1043
00:45:16,319 --> 00:45:19,280
we are in touch especially with the uh

1044
00:45:19,280 --> 00:45:22,680
those providing commercial uh static

1045
00:45:22,680 --> 00:45:26,579
analyzers and we had a few discussion in

1046
00:45:26,579 --> 00:45:29,520
this this respect uh is not something

1047
00:45:29,520 --> 00:45:32,339
easy I mean some of those topics do not

1048
00:45:32,339 --> 00:45:35,880
require much work to be supported I must

1049
00:45:35,880 --> 00:45:39,660
say and so indeed that can be uh pretty

1050
00:45:39,660 --> 00:45:42,000
easy for some of these sus tools to you

1051
00:45:42,000 --> 00:45:43,740
know to release a new version where some

1052
00:45:43,740 --> 00:45:46,380
of these patterns are supported but

1053
00:45:46,380 --> 00:45:49,020
something we saw um is something we we

1054
00:45:49,020 --> 00:45:52,079
are we we are we thought about very

1055
00:45:52,079 --> 00:45:55,440
recently is that for many of these tools

1056
00:45:55,440 --> 00:45:58,560
you can also provide what are called

1057
00:45:58,560 --> 00:46:00,720
kind of modeling rules so essentially

1058
00:46:00,720 --> 00:46:03,839
you can tell the tool how to interpret a

1059
00:46:03,839 --> 00:46:05,099
function that they are not able to

1060
00:46:05,099 --> 00:46:06,660
interpret at the moment

1061
00:46:06,660 --> 00:46:07,920
so

1062
00:46:07,920 --> 00:46:10,140
um that is something that is pretty

1063
00:46:10,140 --> 00:46:12,540
interesting for us because we have the

1064
00:46:12,540 --> 00:46:15,780
pattern that capture a Target that makes

1065
00:46:15,780 --> 00:46:18,359
something difficult for the tool okay we

1066
00:46:18,359 --> 00:46:20,099
have the discovery rule so we we can

1067
00:46:20,099 --> 00:46:22,500
discover this target inside the real

1068
00:46:22,500 --> 00:46:25,260
application and now what we could do for

1069
00:46:25,260 --> 00:46:27,660
some of them at least is to provide this

1070
00:46:27,660 --> 00:46:30,780
modeling rule that will tell the tool

1071
00:46:30,780 --> 00:46:33,660
how to solve the target so how to

1072
00:46:33,660 --> 00:46:35,579
interpret the target so that is not a

1073
00:46:35,579 --> 00:46:37,380
Target anymore so somehow the one

1074
00:46:37,380 --> 00:46:39,720
developing the target the creating the

1075
00:46:39,720 --> 00:46:41,880
target creating the pattern can provide

1076
00:46:41,880 --> 00:46:43,700
these three information and by doing so

1077
00:46:43,700 --> 00:46:46,020
the tool immediately should be able to

1078
00:46:46,020 --> 00:46:48,900
cover that pattern to to not to support

1079
00:46:48,900 --> 00:46:50,940
the Target and so to increase the

1080
00:46:50,940 --> 00:46:52,260
coverage and the testability of the

1081
00:46:52,260 --> 00:46:54,359
application so this is something we we

1082
00:46:54,359 --> 00:46:57,060
uh just started and I hope we will have

1083
00:46:57,060 --> 00:46:59,359
some results

1084
00:46:59,880 --> 00:47:02,520
I hope and I believe I'm sure about that

1085
00:47:02,520 --> 00:47:04,560
that has totally answered the question

1086
00:47:04,560 --> 00:47:07,079
and thank you for you so much for your

1087
00:47:07,079 --> 00:47:08,520
session it was really wonderful and

1088
00:47:08,520 --> 00:47:11,220
amazing to hear you guys and shortly

1089
00:47:11,220 --> 00:47:13,500
we'll be moving to the next session in

1090
00:47:13,500 --> 00:47:16,140
another 10 minutes so let's wait for it

1091
00:47:16,140 --> 00:47:17,760
yeah

1092
00:47:17,760 --> 00:47:20,280
thank you very much thank you very much

1093
00:47:20,280 --> 00:47:21,900
thank you bye

1094
00:47:21,900 --> 00:47:24,140
bye

