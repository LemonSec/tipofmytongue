1
00:00:04,319 --> 00:00:07,379
welcome everyone to everyone attending

2
00:00:07,379 --> 00:00:08,940
the session here

3
00:00:08,940 --> 00:00:13,440
um we will be listening to Nick uh from

4
00:00:13,440 --> 00:00:15,660
Stony Brook University presents on

5
00:00:15,660 --> 00:00:18,539
catching transparent fish and

6
00:00:18,539 --> 00:00:20,220
um if you have any questions during the

7
00:00:20,220 --> 00:00:22,140
presentation please note that you cannot

8
00:00:22,140 --> 00:00:23,699
submit them through Zoom but you can

9
00:00:23,699 --> 00:00:27,240
submit them through the huba app and you

10
00:00:27,240 --> 00:00:29,699
can do that just to the right there's a

11
00:00:29,699 --> 00:00:32,220
button there that you can click click

12
00:00:32,220 --> 00:00:33,540
that button open it up type your

13
00:00:33,540 --> 00:00:35,280
question in and we'll be happy to take

14
00:00:35,280 --> 00:00:38,160
any questions toward the end of that

15
00:00:38,160 --> 00:00:40,739
next session here so thank you very much

16
00:00:40,739 --> 00:00:42,840
and with that I will turn it over to

17
00:00:42,840 --> 00:00:46,079
Nick excellent thank you for having us

18
00:00:46,079 --> 00:00:48,120
um so my name is I'm a professor at

19
00:00:48,120 --> 00:00:50,160
Stony Brook and Brian who's lounging

20
00:00:50,160 --> 00:00:52,140
here on the couch and hiding who will

21
00:00:52,140 --> 00:00:55,079
come in shortly uh here he is uh he will

22
00:00:55,079 --> 00:00:58,079
present uh you know the the better part

23
00:00:58,079 --> 00:01:00,719
uh of the second part of his

24
00:01:00,719 --> 00:01:03,420
presentation so the title is of our talk

25
00:01:03,420 --> 00:01:05,700
is catching transparent fish analyzing

26
00:01:05,700 --> 00:01:07,200
and detecting man in the middle fishing

27
00:01:07,200 --> 00:01:10,200
toolkits uh and if you take that title

28
00:01:10,200 --> 00:01:11,700
and you type into your favorite search

29
00:01:11,700 --> 00:01:13,260
engine you should be able to also find

30
00:01:13,260 --> 00:01:15,540
an academic paper with all the details

31
00:01:15,540 --> 00:01:17,460
uh you know much more than we'll be able

32
00:01:17,460 --> 00:01:20,400
to discuss today so with that

33
00:01:20,400 --> 00:01:23,159
um let's start talking about stolen data

34
00:01:23,159 --> 00:01:25,200
and their value so there are various

35
00:01:25,200 --> 00:01:27,840
online websites that have statistics

36
00:01:27,840 --> 00:01:31,080
regarding the cost or the value of each

37
00:01:31,080 --> 00:01:32,939
piece of stolen data so you can see here

38
00:01:32,939 --> 00:01:35,400
that you start from uh

39
00:01:35,400 --> 00:01:37,680
various credentials to accounts such as

40
00:01:37,680 --> 00:01:40,799
PayPal for a dollar and fifty cents

41
00:01:40,799 --> 00:01:43,500
right Spotify accounts for 275 and then

42
00:01:43,500 --> 00:01:46,380
once you actually start uh stealing

43
00:01:46,380 --> 00:01:48,119
um data that can be used to generate

44
00:01:48,119 --> 00:01:49,799
other data such as the user's driver's

45
00:01:49,799 --> 00:01:52,020
license uh social security number these

46
00:01:52,020 --> 00:01:54,240
prices can then keep going up uh and

47
00:01:54,240 --> 00:01:55,500
this indicates of course that in

48
00:01:55,500 --> 00:01:56,880
phishing you have specialization of

49
00:01:56,880 --> 00:01:59,100
labor labor like you have in the regular

50
00:01:59,100 --> 00:02:01,079
markets so the people who are stealing

51
00:02:01,079 --> 00:02:03,119
credentials from users and they are

52
00:02:03,119 --> 00:02:05,159
stealing Social Security numbers they do

53
00:02:05,159 --> 00:02:06,540
not necessarily immediately monetize

54
00:02:06,540 --> 00:02:08,280
them themselves rather they can just

55
00:02:08,280 --> 00:02:10,619
sell them on to someone else in bulk and

56
00:02:10,619 --> 00:02:12,300
then that someone else can then try to

57
00:02:12,300 --> 00:02:14,280
monetize them

58
00:02:14,280 --> 00:02:15,780
um and have return on their investment

59
00:02:15,780 --> 00:02:18,120
so this is the situation that we have in

60
00:02:18,120 --> 00:02:20,879
phishing and um fishing is actually

61
00:02:20,879 --> 00:02:23,580
becoming uh more and more popular as

62
00:02:23,580 --> 00:02:25,200
years go by rather than less and less

63
00:02:25,200 --> 00:02:27,000
popular so

64
00:02:27,000 --> 00:02:29,280
um you can see here on this graph that

65
00:02:29,280 --> 00:02:30,540
uh

66
00:02:30,540 --> 00:02:33,660
we see the pretty much a Time series of

67
00:02:33,660 --> 00:02:36,300
the instances of fishing and malware uh

68
00:02:36,300 --> 00:02:39,420
malware is in blue and uh fishing is in

69
00:02:39,420 --> 00:02:41,640
red you can see their instances from

70
00:02:41,640 --> 00:02:44,819
2007 until about 2020. and you can see

71
00:02:44,819 --> 00:02:46,140
effectively like we have a crossover

72
00:02:46,140 --> 00:02:49,519
point in around 2017 we're fishing

73
00:02:49,519 --> 00:02:52,080
starts overtaking malware so malware

74
00:02:52,080 --> 00:02:54,420
site serving malware are becoming less

75
00:02:54,420 --> 00:02:56,700
and less popular whereas fishing sites

76
00:02:56,700 --> 00:02:58,500
are becoming more and more popular

77
00:02:58,500 --> 00:03:00,480
and there is a specific reason behind

78
00:03:00,480 --> 00:03:02,459
this so

79
00:03:02,459 --> 00:03:06,239
we did witness uh browser vendors

80
00:03:06,239 --> 00:03:07,379
um

81
00:03:07,379 --> 00:03:09,420
uh strengthening their browsers and

82
00:03:09,420 --> 00:03:10,920
adding sandbox Technologies and

83
00:03:10,920 --> 00:03:12,959
capabilities so it's becoming harder and

84
00:03:12,959 --> 00:03:15,540
harder to actually do drive-by downloads

85
00:03:15,540 --> 00:03:17,700
in browsers and once we remove plugins

86
00:03:17,700 --> 00:03:20,700
like flash uh are more and more

87
00:03:20,700 --> 00:03:22,440
capabilities from exploit kits went away

88
00:03:22,440 --> 00:03:26,400
so attackers just switch to um to the

89
00:03:26,400 --> 00:03:28,680
easiest path to the path of list

90
00:03:28,680 --> 00:03:31,800
resistance and that just remains for the

91
00:03:31,800 --> 00:03:34,680
last two decades phishing uh and so as

92
00:03:34,680 --> 00:03:36,360
you all know effectively phishing

93
00:03:36,360 --> 00:03:37,440
involves

94
00:03:37,440 --> 00:03:40,260
the use of social engineering requires

95
00:03:40,260 --> 00:03:42,780
victims into disclosing Private

96
00:03:42,780 --> 00:03:45,000
Financial information and other sense of

97
00:03:45,000 --> 00:03:46,980
information of interest and attacker so

98
00:03:46,980 --> 00:03:48,780
these can be logging credentials for

99
00:03:48,780 --> 00:03:50,819
private and public services and then

100
00:03:50,819 --> 00:03:52,440
Financial records which could come after

101
00:03:52,440 --> 00:03:54,659
the logging credentials uh where people

102
00:03:54,659 --> 00:03:56,940
can then monetize their credentials that

103
00:03:56,940 --> 00:03:59,420
they've stolen Social Security numbers

104
00:03:59,420 --> 00:04:01,860
get loans in your name potentially and

105
00:04:01,860 --> 00:04:04,260
so on and so forth and

106
00:04:04,260 --> 00:04:06,120
um like I mentioned earlier the human

107
00:04:06,120 --> 00:04:08,879
element Remains the weakest part of the

108
00:04:08,879 --> 00:04:11,340
security chain right so I don't have as

109
00:04:11,340 --> 00:04:13,319
an attacker I don't have to try to break

110
00:04:13,319 --> 00:04:16,260
out of a browser sandbox and you know

111
00:04:16,260 --> 00:04:18,478
link zero day exploits to try to

112
00:04:18,478 --> 00:04:19,500
download code of your machine

113
00:04:19,500 --> 00:04:21,720
automatically if I can just get you to

114
00:04:21,720 --> 00:04:23,940
accept three dialogues and then install

115
00:04:23,940 --> 00:04:27,120
that same malicious binary voluntarily

116
00:04:27,120 --> 00:04:30,600
or provide your credentials under a

117
00:04:30,600 --> 00:04:32,100
specific social engineering case

118
00:04:32,100 --> 00:04:34,740
scenario and so um

119
00:04:34,740 --> 00:04:36,180
various companies have actually

120
00:04:36,180 --> 00:04:38,820
calculated that the average business uh

121
00:04:38,820 --> 00:04:41,040
when it's a victim of a phishing attack

122
00:04:41,040 --> 00:04:43,680
um it incurs a cost of between four and

123
00:04:43,680 --> 00:04:46,620
five million dollars because of all the

124
00:04:46,620 --> 00:04:48,900
um recovery that they need to do of all

125
00:04:48,900 --> 00:04:50,280
the training

126
00:04:50,280 --> 00:04:53,460
um the the the use of the Lost Capital

127
00:04:53,460 --> 00:04:55,860
so it is a very

128
00:04:55,860 --> 00:04:57,660
um expensive

129
00:04:57,660 --> 00:05:01,139
um problem and it is quite similar in

130
00:05:01,139 --> 00:05:02,699
terms of magnitude to another very

131
00:05:02,699 --> 00:05:04,199
important problem which is of ransomware

132
00:05:04,199 --> 00:05:05,400
that we will not be talking too much

133
00:05:05,400 --> 00:05:07,500
about in this talk so

134
00:05:07,500 --> 00:05:09,840
uh we're all familiar with phishing and

135
00:05:09,840 --> 00:05:11,580
how it works but I would like to point

136
00:05:11,580 --> 00:05:13,440
out some of its core elements because

137
00:05:13,440 --> 00:05:16,380
they are very much relevant to how the

138
00:05:16,380 --> 00:05:18,120
tools work that we will analyze in this

139
00:05:18,120 --> 00:05:20,100
talk and how we go about detecting them

140
00:05:20,100 --> 00:05:23,280
so the first thing that attackers do is

141
00:05:23,280 --> 00:05:25,080
that they have to create copies of the

142
00:05:25,080 --> 00:05:26,940
victim sides that they target and

143
00:05:26,940 --> 00:05:28,680
traditionally this would involve either

144
00:05:28,680 --> 00:05:31,620
just creating a copy from scratch right

145
00:05:31,620 --> 00:05:34,440
or perhaps downloading a copy of the

146
00:05:34,440 --> 00:05:36,000
website let's say using wget and then

147
00:05:36,000 --> 00:05:38,639
customizing it manually or using old

148
00:05:38,639 --> 00:05:40,320
templates that someone has built or

149
00:05:40,320 --> 00:05:42,300
perhaps even purchased templates for how

150
00:05:42,300 --> 00:05:44,460
paypal.com looks like PayPal for drop

151
00:05:44,460 --> 00:05:46,620
templates for dropbox.com and they're

152
00:05:46,620 --> 00:05:48,240
just setting up the same templates over

153
00:05:48,240 --> 00:05:49,680
and over again on different fishing

154
00:05:49,680 --> 00:05:53,100
sites trying to lure credentials so

155
00:05:53,100 --> 00:05:54,840
these templates then are then

156
00:05:54,840 --> 00:05:57,000
need to be obviously hosted on some

157
00:05:57,000 --> 00:05:59,520
server and so the attacker then has two

158
00:05:59,520 --> 00:06:01,919
uh possibilities available to him the

159
00:06:01,919 --> 00:06:04,800
first one is to hack a web server so use

160
00:06:04,800 --> 00:06:07,380
some sort of exploit that allows the

161
00:06:07,380 --> 00:06:09,360
attacker to be able to upload content on

162
00:06:09,360 --> 00:06:11,699
a B9 server and then create a new

163
00:06:11,699 --> 00:06:13,320
subdomain on that server or just a new

164
00:06:13,320 --> 00:06:14,820
folder in that server upload the

165
00:06:14,820 --> 00:06:17,100
template of the phishing site and now he

166
00:06:17,100 --> 00:06:19,860
has a link that points to something that

167
00:06:19,860 --> 00:06:23,220
looks like the login page uh of uh of an

168
00:06:23,220 --> 00:06:26,100
important and uh popular uh online

169
00:06:26,100 --> 00:06:27,539
service

170
00:06:27,539 --> 00:06:29,699
um and the alternative to that is to

171
00:06:29,699 --> 00:06:31,560
actually go ahead and purchase a server

172
00:06:31,560 --> 00:06:33,180
like a virtual machine on a public Cloud

173
00:06:33,180 --> 00:06:35,100
which gives the attacker more

174
00:06:35,100 --> 00:06:37,080
capabilities this the attacker can be

175
00:06:37,080 --> 00:06:38,639
root on it so he can install whatever

176
00:06:38,639 --> 00:06:41,100
packages without restrictions but of

177
00:06:41,100 --> 00:06:43,500
course now they're they need the

178
00:06:43,500 --> 00:06:44,580
attacker needs to have a credit card

179
00:06:44,580 --> 00:06:47,039
with which to to link to the account so

180
00:06:47,039 --> 00:06:48,479
there is a risk for the attacker where

181
00:06:48,479 --> 00:06:49,680
he needs to reveal more private

182
00:06:49,680 --> 00:06:51,300
information and so in traditional

183
00:06:51,300 --> 00:06:54,000
phishing uh this was less available so

184
00:06:54,000 --> 00:06:55,919
in most so this is that you'll find

185
00:06:55,919 --> 00:06:58,319
online regarding regular fishing you'll

186
00:06:58,319 --> 00:06:59,880
find that most of this most of the time

187
00:06:59,880 --> 00:07:02,460
fishing sites are hosted on compromise

188
00:07:02,460 --> 00:07:03,960
servers because the attacker then

189
00:07:03,960 --> 00:07:06,120
bypasses the whole need of revealing

190
00:07:06,120 --> 00:07:08,220
himself to a hosting company

191
00:07:08,220 --> 00:07:09,780
and so once these two elements are in

192
00:07:09,780 --> 00:07:11,880
place then the attacker effectively just

193
00:07:11,880 --> 00:07:15,240
needs to be able to blast his link uh to

194
00:07:15,240 --> 00:07:18,720
victims and this blasting can be either

195
00:07:18,720 --> 00:07:21,479
like I mentioned blasting so just reach

196
00:07:21,479 --> 00:07:24,180
as many Warm Bodies as possible playing

197
00:07:24,180 --> 00:07:27,060
the uh the probabilistic game but if I

198
00:07:27,060 --> 00:07:28,680
send this link to a thousand people

199
00:07:28,680 --> 00:07:31,139
maybe 10 or five of them will click and

200
00:07:31,139 --> 00:07:33,060
maybe some fraction of this five or ten

201
00:07:33,060 --> 00:07:35,160
will then proceed to enter credentials

202
00:07:35,160 --> 00:07:37,020
so at the end of the day you know the

203
00:07:37,020 --> 00:07:39,360
more people that I can reach the the

204
00:07:39,360 --> 00:07:41,580
larger the amount of credentials they

205
00:07:41,580 --> 00:07:44,160
can gather right or the variation of

206
00:07:44,160 --> 00:07:46,620
fishing called spear fishing I'm not

207
00:07:46,620 --> 00:07:48,539
interested in you know in anyone's

208
00:07:48,539 --> 00:07:50,099
credentials I mean credentials I'm

209
00:07:50,099 --> 00:07:51,419
interested in one specific person's

210
00:07:51,419 --> 00:07:53,819
credentials and so I will only share

211
00:07:53,819 --> 00:07:55,800
that link that I've created with one

212
00:07:55,800 --> 00:07:57,840
specific person right and so this allows

213
00:07:57,840 --> 00:07:59,940
me to customize it very well and you can

214
00:07:59,940 --> 00:08:02,160
also evade a lot of our spam detection

215
00:08:02,160 --> 00:08:04,380
and fission detection systems because

216
00:08:04,380 --> 00:08:06,900
a lot of the systems are based on

217
00:08:06,900 --> 00:08:07,979
hundreds of thousands of people

218
00:08:07,979 --> 00:08:09,720
receiving the same link so if only one

219
00:08:09,720 --> 00:08:11,099
person or a small number of people

220
00:08:11,099 --> 00:08:13,020
receives a link a lot of the systems

221
00:08:13,020 --> 00:08:14,280
that we have in place don't actually

222
00:08:14,280 --> 00:08:15,479
work

223
00:08:15,479 --> 00:08:16,740
um at least they don't work quite as

224
00:08:16,740 --> 00:08:19,800
well so traditional phishing even though

225
00:08:19,800 --> 00:08:21,240
it's a very simple attack to

226
00:08:21,240 --> 00:08:22,740
conceptualize it does come with

227
00:08:22,740 --> 00:08:25,199
limitations for the attack right so the

228
00:08:25,199 --> 00:08:27,300
first one is that implementation errors

229
00:08:27,300 --> 00:08:30,240
can lead to detection right so maybe the

230
00:08:30,240 --> 00:08:32,880
site is broken the template was not

231
00:08:32,880 --> 00:08:34,979
quite what it should be right so the

232
00:08:34,979 --> 00:08:37,080
attacker can set up a website that looks

233
00:08:37,080 --> 00:08:39,240
broken it doesn't quite give the look

234
00:08:39,240 --> 00:08:41,219
and feel of a professional side of the

235
00:08:41,219 --> 00:08:43,620
user is accustomed to

236
00:08:43,620 --> 00:08:45,300
um the second one has to do with

237
00:08:45,300 --> 00:08:47,640
actually the fact that the changes the

238
00:08:47,640 --> 00:08:49,740
the web page is being mimicked they are

239
00:08:49,740 --> 00:08:52,560
a moving Target right Dropbox and PayPal

240
00:08:52,560 --> 00:08:54,360
and Bank of America they can keep

241
00:08:54,360 --> 00:08:56,279
changing their web pages every single

242
00:08:56,279 --> 00:08:58,019
day if they want to right but the

243
00:08:58,019 --> 00:09:00,779
attacker creates one fishing copy of the

244
00:09:00,779 --> 00:09:03,899
website and now he's just using it so if

245
00:09:03,899 --> 00:09:06,779
the user who clicks on a on a phishing

246
00:09:06,779 --> 00:09:08,700
site on a link to a phishing site

247
00:09:08,700 --> 00:09:10,200
reaches that fishing site and then

248
00:09:10,200 --> 00:09:12,480
observes like an older version of this

249
00:09:12,480 --> 00:09:14,880
uh World obligation he may realize that

250
00:09:14,880 --> 00:09:16,800
something is wrong right and so he may

251
00:09:16,800 --> 00:09:19,140
actually stop and not reveal his

252
00:09:19,140 --> 00:09:20,880
credentials because he's actually

253
00:09:20,880 --> 00:09:24,300
looking at an outdated copy uh of the

254
00:09:24,300 --> 00:09:27,060
fishing website and finally uh the

255
00:09:27,060 --> 00:09:29,160
attacker has to deal with all the

256
00:09:29,160 --> 00:09:30,899
anti-fishing scanners that security

257
00:09:30,899 --> 00:09:32,640
researchers and security companies are

258
00:09:32,640 --> 00:09:34,620
operating where effectively these are

259
00:09:34,620 --> 00:09:36,120
scanning emails these are scanning

260
00:09:36,120 --> 00:09:38,339
domain names so there are many many ways

261
00:09:38,339 --> 00:09:39,680
of building

262
00:09:39,680 --> 00:09:42,480
anti-fishing technology and so the

263
00:09:42,480 --> 00:09:45,180
attacker kind of has a short Horizon of

264
00:09:45,180 --> 00:09:47,580
abuse uh within a few hours and

265
00:09:47,580 --> 00:09:49,560
definitely within the first day one of

266
00:09:49,560 --> 00:09:50,880
these scanners will have detected this

267
00:09:50,880 --> 00:09:52,560
link and will start to take down

268
00:09:52,560 --> 00:09:54,060
procedures with a register with the

269
00:09:54,060 --> 00:09:56,040
hosting provider so there are all of

270
00:09:56,040 --> 00:09:58,260
these elements that make an attacker's

271
00:09:58,260 --> 00:10:00,120
life more complicated

272
00:10:00,120 --> 00:10:01,980
um which of course the attacker doesn't

273
00:10:01,980 --> 00:10:04,920
like and we observed an evolution in the

274
00:10:04,920 --> 00:10:07,620
space of fishing tools which is what

275
00:10:07,620 --> 00:10:09,540
today's talk is all about and so this

276
00:10:09,540 --> 00:10:12,540
Evolution refers to uh what we call man

277
00:10:12,540 --> 00:10:13,740
in the man in the middle fishing

278
00:10:13,740 --> 00:10:16,260
toolkits and so as you can see here on

279
00:10:16,260 --> 00:10:18,120
the figure on your screen

280
00:10:18,120 --> 00:10:22,560
we we stop having this static copy of a

281
00:10:22,560 --> 00:10:24,180
site that the attacker has control over

282
00:10:24,180 --> 00:10:26,940
and we switch to an actual malicious

283
00:10:26,940 --> 00:10:29,339
reverse proxy so now when the victim

284
00:10:29,339 --> 00:10:31,019
user receives a link and clicks on that

285
00:10:31,019 --> 00:10:33,180
link and he reaches the server

286
00:10:33,180 --> 00:10:35,459
controlled by the attacker that Server

287
00:10:35,459 --> 00:10:37,800
doesn't actually host anything in and of

288
00:10:37,800 --> 00:10:40,019
itself what it does is it takes the

289
00:10:40,019 --> 00:10:42,540
user's request and it relays it it

290
00:10:42,540 --> 00:10:46,440
replays it to the real victim side and

291
00:10:46,440 --> 00:10:48,839
that would be step number two that you

292
00:10:48,839 --> 00:10:51,300
see on this slide and then whatever the

293
00:10:51,300 --> 00:10:54,060
victim site responds with the HTTP

294
00:10:54,060 --> 00:10:57,300
response the attacker server can then

295
00:10:57,300 --> 00:10:59,399
rewrite so for example he changed domain

296
00:10:59,399 --> 00:11:01,260
names to his own domain and then

297
00:11:01,260 --> 00:11:03,060
forwards it back to the victim and so

298
00:11:03,060 --> 00:11:04,260
effectively you have this man in the

299
00:11:04,260 --> 00:11:06,480
middling going on between the victim

300
00:11:06,480 --> 00:11:08,459
client and the victim server and the

301
00:11:08,459 --> 00:11:09,899
attacker has positioned himself in the

302
00:11:09,899 --> 00:11:10,500
middle

303
00:11:10,500 --> 00:11:12,120
and it's important to understand that

304
00:11:12,120 --> 00:11:14,279
the attacker is not trying to break SSL

305
00:11:14,279 --> 00:11:16,380
in this process he's not hoping that you

306
00:11:16,380 --> 00:11:17,880
know he'll use self-signed certificates

307
00:11:17,880 --> 00:11:19,620
and the user will click through the

308
00:11:19,620 --> 00:11:21,540
attacker effectively deals with two

309
00:11:21,540 --> 00:11:24,839
separate uh TLS sessions so on the left

310
00:11:24,839 --> 00:11:27,720
you have one PLS session that the victim

311
00:11:27,720 --> 00:11:30,360
established with phishing.com everything

312
00:11:30,360 --> 00:11:32,160
is encrypted the attacker has a let's

313
00:11:32,160 --> 00:11:34,220
encrypt science certificate

314
00:11:34,220 --> 00:11:38,100
with the victim uh observes this uh

315
00:11:38,100 --> 00:11:40,200
valid certificate for fishing.com so he

316
00:11:40,200 --> 00:11:42,000
gets the green lock the green lock icon

317
00:11:42,000 --> 00:11:43,920
in his browsers bar everything is good

318
00:11:43,920 --> 00:11:45,779
the attacker is able to decrypt that

319
00:11:45,779 --> 00:11:48,000
traffic because it is his own key and

320
00:11:48,000 --> 00:11:50,160
then the attacker is actually a client

321
00:11:50,160 --> 00:11:52,500
towards the second TLS connection on the

322
00:11:52,500 --> 00:11:55,079
right and he can just replay

323
00:11:55,079 --> 00:11:56,579
um the user's get requests and post

324
00:11:56,579 --> 00:11:59,100
requests to the real victim server right

325
00:11:59,100 --> 00:12:01,079
so at the end of the day the attacker

326
00:12:01,079 --> 00:12:02,700
has access to everything in clear text

327
00:12:02,700 --> 00:12:05,160
and there are no warnings on either side

328
00:12:05,160 --> 00:12:07,200
of this communication uh that would

329
00:12:07,200 --> 00:12:09,000
indicate that someone is you know man in

330
00:12:09,000 --> 00:12:10,560
the middling is trying to break TLS and

331
00:12:10,560 --> 00:12:12,959
anything like that so credentials are

332
00:12:12,959 --> 00:12:15,540
stolen in transit in this way and what

333
00:12:15,540 --> 00:12:17,640
is even more interesting is that

334
00:12:17,640 --> 00:12:19,500
uh all the signs that are using to

335
00:12:19,500 --> 00:12:21,120
factor authentication where the user

336
00:12:21,120 --> 00:12:24,000
will receive an SMS or will open up like

337
00:12:24,000 --> 00:12:25,740
an app on their phone and we'll copy

338
00:12:25,740 --> 00:12:27,899
paste the code from that app this code

339
00:12:27,899 --> 00:12:30,180
will also go through the attacker server

340
00:12:30,180 --> 00:12:32,760
and so at the end of this process

341
00:12:32,760 --> 00:12:35,399
um the user has logged in for real on

342
00:12:35,399 --> 00:12:37,860
the victim site uh he has an

343
00:12:37,860 --> 00:12:39,360
authenticated cookie that allows the

344
00:12:39,360 --> 00:12:41,279
user to just click through everything's

345
00:12:41,279 --> 00:12:42,600
working pre-authentication and post

346
00:12:42,600 --> 00:12:45,839
authentication but the attacker now is

347
00:12:45,839 --> 00:12:47,579
in control not only of the user's

348
00:12:47,579 --> 00:12:49,800
credentials but also is in possession of

349
00:12:49,800 --> 00:12:51,600
an authenticated cookie and so now the

350
00:12:51,600 --> 00:12:53,100
attacker can use that cookie that is

351
00:12:53,100 --> 00:12:55,079
authenticated and has passed the

352
00:12:55,079 --> 00:12:57,120
two-factor authentication step to then

353
00:12:57,120 --> 00:12:58,940
perform arbitrary

354
00:12:58,940 --> 00:13:01,320
activities on the server in the name of

355
00:13:01,320 --> 00:13:03,779
the user and so today we have a number

356
00:13:03,779 --> 00:13:05,459
of this uh man and middle fishing

357
00:13:05,459 --> 00:13:07,380
talkies in a while uh I believe the most

358
00:13:07,380 --> 00:13:08,760
popular one is evil Gen X and then you

359
00:13:08,760 --> 00:13:11,579
have Moran and moglishka which have

360
00:13:11,579 --> 00:13:13,620
similar but properties but they have

361
00:13:13,620 --> 00:13:16,500
certain differences and officially these

362
00:13:16,500 --> 00:13:17,279
are

363
00:13:17,279 --> 00:13:20,700
um tools that are used for um phishing

364
00:13:20,700 --> 00:13:22,980
training right and I have no doubt that

365
00:13:22,980 --> 00:13:24,480
that's how the developer intended them

366
00:13:24,480 --> 00:13:27,480
to be but these are certain key software

367
00:13:27,480 --> 00:13:29,760
that someone can just download set it up

368
00:13:29,760 --> 00:13:31,740
on a web server as we will show you and

369
00:13:31,740 --> 00:13:33,180
now he's fishing the work so there's

370
00:13:33,180 --> 00:13:34,680
nothing stopping an attacker from taking

371
00:13:34,680 --> 00:13:38,279
the fishing training tool and then just

372
00:13:38,279 --> 00:13:41,220
pointing it to real users on the web and

373
00:13:41,220 --> 00:13:42,959
then stealing the credentials for

374
00:13:42,959 --> 00:13:45,480
popular and less popular services and so

375
00:13:45,480 --> 00:13:47,399
we want to show you a demo of these

376
00:13:47,399 --> 00:13:49,680
tools in case people haven't heard of

377
00:13:49,680 --> 00:13:51,480
them before or haven't quite realized

378
00:13:51,480 --> 00:13:53,880
how it is that they work so let me share

379
00:13:53,880 --> 00:13:55,740
a video with you so that we make sure

380
00:13:55,740 --> 00:13:57,779
that the demo works

381
00:13:57,779 --> 00:13:59,779
um

382
00:14:01,980 --> 00:14:04,680
all right so here you can actually see

383
00:14:04,680 --> 00:14:07,560
that uh we have a split screen on the

384
00:14:07,560 --> 00:14:09,600
left we see the victims browser how it

385
00:14:09,600 --> 00:14:10,860
is that the victim would see things and

386
00:14:10,860 --> 00:14:12,660
on the right you will see

387
00:14:12,660 --> 00:14:13,200
um

388
00:14:13,200 --> 00:14:15,300
the um

389
00:14:15,300 --> 00:14:17,700
the part that the attackers is on his

390
00:14:17,700 --> 00:14:20,160
web server that is under his control so

391
00:14:20,160 --> 00:14:22,019
once we start this

392
00:14:22,019 --> 00:14:25,079
you can actually see here that um the

393
00:14:25,079 --> 00:14:26,240
attacker

394
00:14:26,240 --> 00:14:28,860
is setting up evil Genex and is running

395
00:14:28,860 --> 00:14:31,680
it on his server and

396
00:14:31,680 --> 00:14:34,800
is able to actually set it up and say

397
00:14:34,800 --> 00:14:36,720
that you know the idea of my malicious

398
00:14:36,720 --> 00:14:40,560
server is this and I wish to serve

399
00:14:40,560 --> 00:14:42,360
um to man in the middle GitHub because I

400
00:14:42,360 --> 00:14:44,220
want to steal GitHub credentials and

401
00:14:44,220 --> 00:14:46,440
GitHub authenticated cookies

402
00:14:46,440 --> 00:14:48,000
um so that is what the attacker is

403
00:14:48,000 --> 00:14:49,320
currently doing he's just pretty much

404
00:14:49,320 --> 00:14:52,079
loading up this evil genetics tool

405
00:14:52,079 --> 00:14:54,480
um and instructing it uh with the

406
00:14:54,480 --> 00:14:55,800
phishing campaign that he's about to

407
00:14:55,800 --> 00:14:58,440
start uh and everything as you can see

408
00:14:58,440 --> 00:15:00,480
is quite user friendly because again

409
00:15:00,480 --> 00:15:02,279
this is a real tool that is meant to be

410
00:15:02,279 --> 00:15:04,199
used in real settings but unfortunately

411
00:15:04,199 --> 00:15:06,480
attackers are taking it and abusing it

412
00:15:06,480 --> 00:15:08,820
in the wild to fish real people right so

413
00:15:08,820 --> 00:15:11,639
as you can see here in our notes uh the

414
00:15:11,639 --> 00:15:14,339
server will even take even request let's

415
00:15:14,339 --> 00:15:16,560
encrypt certificates for you so that the

416
00:15:16,560 --> 00:15:18,959
attacker's side will have a perfectly

417
00:15:18,959 --> 00:15:22,680
valid uh TLS certificate and now we can

418
00:15:22,680 --> 00:15:24,660
visit that site as you can see on the

419
00:15:24,660 --> 00:15:26,699
left from the browser

420
00:15:26,699 --> 00:15:29,760
uh and we are actually here getting

421
00:15:29,760 --> 00:15:31,980
redirected to youtube.com because we're

422
00:15:31,980 --> 00:15:34,980
missing a token uh in our URL uh and

423
00:15:34,980 --> 00:15:36,959
this is effectively built-in evasion

424
00:15:36,959 --> 00:15:38,940
Technologies uh in these tools so that

425
00:15:38,940 --> 00:15:40,560
if you just visit the website the

426
00:15:40,560 --> 00:15:42,420
designer under control the attacker you

427
00:15:42,420 --> 00:15:44,399
will not get the phishing site you have

428
00:15:44,399 --> 00:15:46,560
to visit the exact link that the

429
00:15:46,560 --> 00:15:49,019
attacker uh constructs in order to get

430
00:15:49,019 --> 00:15:50,639
access to the phishing content and that

431
00:15:50,639 --> 00:15:52,380
allows those phishing sites to be more

432
00:15:52,380 --> 00:15:54,180
long-lived than if they would just

433
00:15:54,180 --> 00:15:57,540
answer to all all questions on the you

434
00:15:57,540 --> 00:15:58,920
know on the root directory of the web

435
00:15:58,920 --> 00:16:00,839
server so now effectively we are

436
00:16:00,839 --> 00:16:03,300
clicking on the link that includes that

437
00:16:03,300 --> 00:16:05,160
special ID

438
00:16:05,160 --> 00:16:07,980
um and you will see on the left uh

439
00:16:07,980 --> 00:16:09,540
something that should look identical to

440
00:16:09,540 --> 00:16:11,940
github.com right and it is important

441
00:16:11,940 --> 00:16:13,980
here to stress that this is not the

442
00:16:13,980 --> 00:16:16,680
template that the attacker downloaded

443
00:16:16,680 --> 00:16:18,959
um and he's serving like a copy of

444
00:16:18,959 --> 00:16:20,639
GitHub that was made at some point in

445
00:16:20,639 --> 00:16:23,100
time he's serving the real GitHub as it

446
00:16:23,100 --> 00:16:26,519
is right now as it is passing through uh

447
00:16:26,519 --> 00:16:28,079
the malicious server

448
00:16:28,079 --> 00:16:31,139
and so this fishing site will always

449
00:16:31,139 --> 00:16:32,880
look like github.com looks because it's

450
00:16:32,880 --> 00:16:34,980
actually serving github.com it's just

451
00:16:34,980 --> 00:16:37,079
rewriting it on the way back and forth

452
00:16:37,079 --> 00:16:39,300
between a client and a server and so now

453
00:16:39,300 --> 00:16:41,759
the the user can go ahead and proceed to

454
00:16:41,759 --> 00:16:44,639
log in the attacker currently has the

455
00:16:44,639 --> 00:16:46,139
credentials right you can see them

456
00:16:46,139 --> 00:16:48,660
highlighted on the bottom right of the

457
00:16:48,660 --> 00:16:49,620
share

458
00:16:49,620 --> 00:16:51,660
and now actually we have a 2fa account

459
00:16:51,660 --> 00:16:53,339
which in the past would stop the

460
00:16:53,339 --> 00:16:55,560
phishing attack because the attacker

461
00:16:55,560 --> 00:16:56,880
would later try to weaponize his

462
00:16:56,880 --> 00:16:59,579
credentials at that time a 2fa code will

463
00:16:59,579 --> 00:17:01,680
be requested and the victim will be long

464
00:17:01,680 --> 00:17:04,439
gone but in this case the attack is

465
00:17:04,439 --> 00:17:07,260
happening online in real time so now the

466
00:17:07,260 --> 00:17:09,780
user will go ahead and receive an email

467
00:17:09,780 --> 00:17:11,579
from the real github.com

468
00:17:11,579 --> 00:17:13,859
because he's trying to log in he will

469
00:17:13,859 --> 00:17:16,079
copy paste the code located in that

470
00:17:16,079 --> 00:17:18,660
email in the fishing site right again

471
00:17:18,660 --> 00:17:20,040
because he's trying to log into GitHub

472
00:17:20,040 --> 00:17:21,480
and as far as he knows everything is

473
00:17:21,480 --> 00:17:22,740
working as it should he's trying to log

474
00:17:22,740 --> 00:17:24,179
into GitHub and GitHub is sending him a

475
00:17:24,179 --> 00:17:27,359
code so he has no reason not to post

476
00:17:27,359 --> 00:17:29,280
that code uh in the page that he's

477
00:17:29,280 --> 00:17:32,160
asking for it so and at this moment once

478
00:17:32,160 --> 00:17:35,520
the user clicks effectively the user is

479
00:17:35,520 --> 00:17:37,679
logged in everything works as far as the

480
00:17:37,679 --> 00:17:39,900
user is concerned but on the right on

481
00:17:39,900 --> 00:17:41,700
the right hand side of the screen now

482
00:17:41,700 --> 00:17:43,679
the tool that the attacker operates evil

483
00:17:43,679 --> 00:17:46,140
Genex has a fully authenticated session

484
00:17:46,140 --> 00:17:48,120
cookie right not only has the user's

485
00:17:48,120 --> 00:17:49,799
credentials but a fully authenticated

486
00:17:49,799 --> 00:17:51,960
session cookie that the attacker can now

487
00:17:51,960 --> 00:17:54,600
use to perform actions in the user's

488
00:17:54,600 --> 00:17:57,179
name until the user logs up right and of

489
00:17:57,179 --> 00:17:59,160
course the tools can also disable logout

490
00:17:59,160 --> 00:18:01,380
buttons and do other things to increase

491
00:18:01,380 --> 00:18:04,380
the lifetime of the session cookies that

492
00:18:04,380 --> 00:18:05,700
they have stolen right so you can see

493
00:18:05,700 --> 00:18:07,380
that these are super powerful tools

494
00:18:07,380 --> 00:18:09,299
right and they are very much TurnKey

495
00:18:09,299 --> 00:18:11,700
very little configuration necessary uh

496
00:18:11,700 --> 00:18:12,780
and then attack you can just download

497
00:18:12,780 --> 00:18:14,400
them set them up on the web server that

498
00:18:14,400 --> 00:18:16,380
he controls get a domain name get a free

499
00:18:16,380 --> 00:18:18,179
certificate for the domain name and now

500
00:18:18,179 --> 00:18:19,799
he's operational and he's running a

501
00:18:19,799 --> 00:18:21,720
state-of-the-art phishing site with

502
00:18:21,720 --> 00:18:24,780
evasion capabilities built in and that

503
00:18:24,780 --> 00:18:27,900
will that is far above and beyond the

504
00:18:27,900 --> 00:18:29,640
you know what all phishing Sites would

505
00:18:29,640 --> 00:18:31,320
you know would be able to do with all

506
00:18:31,320 --> 00:18:33,059
the limitations that I mentioned to you

507
00:18:33,059 --> 00:18:36,240
so let me switch back to the slides

508
00:18:36,240 --> 00:18:38,299
um

509
00:18:42,240 --> 00:18:45,679
all right so

510
00:18:45,780 --> 00:18:48,440
excuse me

511
00:18:50,280 --> 00:18:52,440
so that was a demo and now I'll switch

512
00:18:52,440 --> 00:18:54,240
over to Brian who will tell you about

513
00:18:54,240 --> 00:18:55,740
the thread model of these new fishing

514
00:18:55,740 --> 00:18:57,600
kits and how it is that we can actually

515
00:18:57,600 --> 00:18:59,700
turn the tables and detect them online

516
00:18:59,700 --> 00:19:01,799
right

517
00:19:01,799 --> 00:19:04,559
all right hi everyone uh thanks Nick uh

518
00:19:04,559 --> 00:19:06,539
for giving the background on these

519
00:19:06,539 --> 00:19:07,799
toolkits

520
00:19:07,799 --> 00:19:10,320
um so as you can see I I hope you know

521
00:19:10,320 --> 00:19:11,700
you you know based on that demo and

522
00:19:11,700 --> 00:19:13,020
based on everything that Nick said you

523
00:19:13,020 --> 00:19:16,740
can understand the the the power of

524
00:19:16,740 --> 00:19:18,120
these toolkits and the threat that they

525
00:19:18,120 --> 00:19:20,940
post to to just regular users

526
00:19:20,940 --> 00:19:25,080
uh so when we're looking to uh detect

527
00:19:25,080 --> 00:19:27,660
these toolkits and and prevent attacks

528
00:19:27,660 --> 00:19:29,880
from occurring we have a very specific

529
00:19:29,880 --> 00:19:32,039
threat model that we have to account for

530
00:19:32,039 --> 00:19:33,360
um that we don't have to account for

531
00:19:33,360 --> 00:19:35,940
with traditional phishing attacks

532
00:19:35,940 --> 00:19:38,340
so first of all as you can as you could

533
00:19:38,340 --> 00:19:40,380
probably tell since these toolkits are

534
00:19:40,380 --> 00:19:42,600
operating in a man in the middle fashion

535
00:19:42,600 --> 00:19:44,880
the attackers control all application

536
00:19:44,880 --> 00:19:47,760
letter content so this means that if say

537
00:19:47,760 --> 00:19:50,280
the uh the online service say paypal.com

538
00:19:50,280 --> 00:19:53,100
wanted to add in some JavaScript to

539
00:19:53,100 --> 00:19:55,980
check if the domain in the URL bar is is

540
00:19:55,980 --> 00:19:58,380
actually paypal.com while the attacker

541
00:19:58,380 --> 00:19:59,880
can simply just remove this if they know

542
00:19:59,880 --> 00:20:03,419
it's there same thing with any CSP or

543
00:20:03,419 --> 00:20:05,640
x-frame options or anything along those

544
00:20:05,640 --> 00:20:07,940
lines

545
00:20:08,780 --> 00:20:12,360
also these toolkits uh have cloaking

546
00:20:12,360 --> 00:20:14,520
capabilities and you know again as they

547
00:20:14,520 --> 00:20:17,400
are acting in man little fashion uh they

548
00:20:17,400 --> 00:20:20,340
have the ability to uh prevent access to

549
00:20:20,340 --> 00:20:22,980
any fishing content to anyone that's not

550
00:20:22,980 --> 00:20:26,059
the intended victim

551
00:20:28,020 --> 00:20:30,660
so due to these things uh any sort of

552
00:20:30,660 --> 00:20:32,940
detection uh cannot rely on the

553
00:20:32,940 --> 00:20:34,320
Integrity of the application of their

554
00:20:34,320 --> 00:20:37,620
content as I said we can't just assume

555
00:20:37,620 --> 00:20:39,679
that some sort of a JavaScript

556
00:20:39,679 --> 00:20:43,679
code that we include in response in

557
00:20:43,679 --> 00:20:46,700
responses uh we'll be able to to run

558
00:20:46,700 --> 00:20:49,140
because we could simply just be changed

559
00:20:49,140 --> 00:20:52,400
or removed entirely

560
00:20:53,340 --> 00:20:55,799
so if we can't fingerprint the content

561
00:20:55,799 --> 00:20:58,799
we decided to look a step lower in the

562
00:20:58,799 --> 00:21:00,360
app in the network stack and actually

563
00:21:00,360 --> 00:21:02,160
fingerprint the server uh because here

564
00:21:02,160 --> 00:21:04,260
the content is the real content it's not

565
00:21:04,260 --> 00:21:07,080
uh different in any sort of way to the

566
00:21:07,080 --> 00:21:09,299
real content from the live service but

567
00:21:09,299 --> 00:21:11,220
the actual server itself

568
00:21:11,220 --> 00:21:13,200
uh is different you know in a

569
00:21:13,200 --> 00:21:15,120
traditional phishing attack uh whether

570
00:21:15,120 --> 00:21:18,419
the attacker compromises a benign web

571
00:21:18,419 --> 00:21:20,940
server or they set up their own Apache

572
00:21:20,940 --> 00:21:23,100
web server the actual server is just

573
00:21:23,100 --> 00:21:25,620
Apache or nginx it's it's not it doesn't

574
00:21:25,620 --> 00:21:28,200
look different to any other Apache or

575
00:21:28,200 --> 00:21:30,600
nginx server but in this case this is

576
00:21:30,600 --> 00:21:32,520
not a real web server this is not Apache

577
00:21:32,520 --> 00:21:34,919
this is not nginx this is evil genetics

578
00:21:34,919 --> 00:21:37,679
or Morena or modliska so we could

579
00:21:37,679 --> 00:21:39,840
fingerprint the actual server itself and

580
00:21:39,840 --> 00:21:42,918
that's that's what we do here

581
00:21:43,640 --> 00:21:46,799
so as I said we're looking at the the

582
00:21:46,799 --> 00:21:48,720
network layer we're looking at Network

583
00:21:48,720 --> 00:21:51,179
level phishing detection

584
00:21:51,179 --> 00:21:54,179
so this reverse proxy architecture that

585
00:21:54,179 --> 00:21:55,799
allows these toolkits to launch these

586
00:21:55,799 --> 00:21:57,360
highly effective attacks

587
00:21:57,360 --> 00:21:59,940
also allows them to be discovered

588
00:21:59,940 --> 00:22:02,340
um allows us to to discover the presence

589
00:22:02,340 --> 00:22:03,780
of these toolkits into network

590
00:22:03,780 --> 00:22:04,980
communication

591
00:22:04,980 --> 00:22:07,080
so we look at two different categories

592
00:22:07,080 --> 00:22:10,919
of features uh to detect their presence

593
00:22:10,919 --> 00:22:12,900
first we look at Network timing analysis

594
00:22:12,900 --> 00:22:15,960
so since these toolkits uh add an extra

595
00:22:15,960 --> 00:22:18,179
hop to the network communication between

596
00:22:18,179 --> 00:22:20,820
a client and an N web server

597
00:22:20,820 --> 00:22:23,760
we can see discrepancies in the time it

598
00:22:23,760 --> 00:22:25,380
takes for packets to be sent and

599
00:22:25,380 --> 00:22:28,020
received that doesn't exist when you're

600
00:22:28,020 --> 00:22:29,280
communicating directly with the online

601
00:22:29,280 --> 00:22:31,639
service

602
00:22:31,740 --> 00:22:34,080
additionally as I said these aren't real

603
00:22:34,080 --> 00:22:36,539
web servers so therefore they look

604
00:22:36,539 --> 00:22:39,360
different on a TLS level so we can use

605
00:22:39,360 --> 00:22:41,340
TLS fingerprinting to determine that

606
00:22:41,340 --> 00:22:43,620
there's some sort of a discrepancy in

607
00:22:43,620 --> 00:22:46,500
the TLs libraries used or other TLS

608
00:22:46,500 --> 00:22:49,620
options used that won't be there in a

609
00:22:49,620 --> 00:22:53,840
real web server like Apache or nginx

610
00:22:54,659 --> 00:22:56,580
on top of this unlike traditional

611
00:22:56,580 --> 00:22:58,440
phishing attacks fingerprinting is

612
00:22:58,440 --> 00:22:59,820
possible from both ends of the

613
00:22:59,820 --> 00:23:01,380
communication channel so this means that

614
00:23:01,380 --> 00:23:04,559
we can detect the phishing server from

615
00:23:04,559 --> 00:23:07,500
the perspective of the victim client uh

616
00:23:07,500 --> 00:23:09,299
by using these these features that I

617
00:23:09,299 --> 00:23:12,960
discussed but also unlike traditional

618
00:23:12,960 --> 00:23:14,760
phishing attacks the actual online

619
00:23:14,760 --> 00:23:17,520
service can also detect uh that there's

620
00:23:17,520 --> 00:23:20,700
a phishing attack going on because uh

621
00:23:20,700 --> 00:23:23,220
when the phishing server is talking to

622
00:23:23,220 --> 00:23:25,679
the online service they don't look like

623
00:23:25,679 --> 00:23:28,260
a typical web client that's using a

624
00:23:28,260 --> 00:23:29,760
browser so I'll talk more about that

625
00:23:29,760 --> 00:23:31,320
towards the end but first we're going to

626
00:23:31,320 --> 00:23:36,120
focus on the client-side detection

627
00:23:36,120 --> 00:23:39,179
so first we'll start with the network

628
00:23:39,179 --> 00:23:43,440
timing analysis so here we have uh two

629
00:23:43,440 --> 00:23:45,840
uh packet sequence diagrams so on the

630
00:23:45,840 --> 00:23:47,840
left here we have a direct connection

631
00:23:47,840 --> 00:23:49,980
and on the right we have a connection

632
00:23:49,980 --> 00:23:54,320
through a reverse proxy server

633
00:23:54,900 --> 00:23:56,460
so we'll start on the left as you can

634
00:23:56,460 --> 00:23:58,080
see you know when you're talking to any

635
00:23:58,080 --> 00:23:59,280
web server

636
00:23:59,280 --> 00:24:02,159
um the first thing that happens is a TCP

637
00:24:02,159 --> 00:24:05,220
handshake so uh we have the time it

638
00:24:05,220 --> 00:24:07,580
takes for a TCP syn packet to be sent

639
00:24:07,580 --> 00:24:10,140
and a syn act packet to be received

640
00:24:10,140 --> 00:24:14,340
we'll call time T1 and this this is uh

641
00:24:14,340 --> 00:24:16,919
talking entirely over HTTP we're not

642
00:24:16,919 --> 00:24:18,240
talking about encryption here this is

643
00:24:18,240 --> 00:24:21,419
just a very basic example uh so we have

644
00:24:21,419 --> 00:24:25,080
that uh uh round trip time we'll call

645
00:24:25,080 --> 00:24:26,400
team one

646
00:24:26,400 --> 00:24:28,860
in the same scenario the time it takes

647
00:24:28,860 --> 00:24:32,039
to send a HTTP get request and get back

648
00:24:32,039 --> 00:24:34,919
the response we'll call time T2

649
00:24:34,919 --> 00:24:37,500
um and when we're talking over HTTP

650
00:24:37,500 --> 00:24:41,100
directly to a web server time T1 and T2

651
00:24:41,100 --> 00:24:43,860
are roughly the same uh the ratio of

652
00:24:43,860 --> 00:24:46,620
those two times will be close to one

653
00:24:46,620 --> 00:24:49,020
however when we look on the right we can

654
00:24:49,020 --> 00:24:50,880
see that we have the same time T1 we

655
00:24:50,880 --> 00:24:54,059
have the same TCP syn packet and synac

656
00:24:54,059 --> 00:24:56,760
response that will happen in roughly or

657
00:24:56,760 --> 00:24:58,799
exactly the same amount of time as the

658
00:24:58,799 --> 00:25:00,000
first example

659
00:25:00,000 --> 00:25:03,480
and this is because the TCP handshake is

660
00:25:03,480 --> 00:25:05,039
actually happening with reverse proxy

661
00:25:05,039 --> 00:25:07,260
server here as opposed to the end web

662
00:25:07,260 --> 00:25:08,159
server

663
00:25:08,159 --> 00:25:10,380
however we could see that time T2 is

664
00:25:10,380 --> 00:25:13,440
much larger in this example here with

665
00:25:13,440 --> 00:25:14,760
the reverse proxy server and that's

666
00:25:14,760 --> 00:25:15,659
because

667
00:25:15,659 --> 00:25:17,580
when we actually send the get request

668
00:25:17,580 --> 00:25:19,919
here the reverse proxy server now needs

669
00:25:19,919 --> 00:25:21,360
to do this entire

670
00:25:21,360 --> 00:25:25,080
uh example from the left with the with

671
00:25:25,080 --> 00:25:27,900
the N web server this time as the client

672
00:25:27,900 --> 00:25:30,419
uh you know completing the TCP handshake

673
00:25:30,419 --> 00:25:33,059
and then getting the actual ATP response

674
00:25:33,059 --> 00:25:36,299
before sending that back here uh to to

675
00:25:36,299 --> 00:25:39,000
the client so in this example

676
00:25:39,000 --> 00:25:41,760
T2 is much larger than T1

677
00:25:41,760 --> 00:25:42,900
um and

678
00:25:42,900 --> 00:25:46,380
uh so we can use the fact that when

679
00:25:46,380 --> 00:25:47,460
we're typically talking to say

680
00:25:47,460 --> 00:25:50,760
paypal.com while over https it's going

681
00:25:50,760 --> 00:25:53,520
to be slightly different uh if we're

682
00:25:53,520 --> 00:25:55,020
talking directly with them it's going to

683
00:25:55,020 --> 00:25:57,000
look like the example on the left you

684
00:25:57,000 --> 00:26:00,179
know closer to that when we go through

685
00:26:00,179 --> 00:26:02,940
this malicious reverse proxy server it's

686
00:26:02,940 --> 00:26:04,260
going to look more like the example on

687
00:26:04,260 --> 00:26:06,059
the right so what we can do is we can

688
00:26:06,059 --> 00:26:09,900
use the ratio of the HTTP request in

689
00:26:09,900 --> 00:26:12,539
response uh the ratio between that and

690
00:26:12,539 --> 00:26:15,900
the TCP handshake to determine

691
00:26:15,900 --> 00:26:18,740
discrepancies here

692
00:26:21,240 --> 00:26:24,600
so before we you know set out to create

693
00:26:24,600 --> 00:26:26,940
any sort of tools to detect these

694
00:26:26,940 --> 00:26:28,500
toolkits we wanted to actually test this

695
00:26:28,500 --> 00:26:30,600
out and this is what we did here so what

696
00:26:30,600 --> 00:26:33,240
you can see uh is the two plots on the

697
00:26:33,240 --> 00:26:36,659
left we have HTTP requests and the two

698
00:26:36,659 --> 00:26:38,820
plots on the right we have HTT or HTTP

699
00:26:38,820 --> 00:26:41,100
on the left https on the right and what

700
00:26:41,100 --> 00:26:44,760
we're looking at here is a CDF of uh the

701
00:26:44,760 --> 00:26:49,380
ratio between the TCP send and synac

702
00:26:49,380 --> 00:26:52,440
round trip time and the get request both

703
00:26:52,440 --> 00:26:55,559
valid get requests and malformed get

704
00:26:55,559 --> 00:26:58,559
requests as a way to try to tease out

705
00:26:58,559 --> 00:27:02,340
direct responses from the toolkit uh

706
00:27:02,340 --> 00:27:05,279
so generally what you could see here is

707
00:27:05,279 --> 00:27:08,580
we're comparing the the the the Rancher

708
00:27:08,580 --> 00:27:10,380
times of all these these three toolkits

709
00:27:10,380 --> 00:27:12,000
to the

710
00:27:12,000 --> 00:27:14,220
known direct which was just an Apache

711
00:27:14,220 --> 00:27:15,779
web server that we set up

712
00:27:15,779 --> 00:27:17,760
uh and we we ran these these

713
00:27:17,760 --> 00:27:19,140
measurements you know multiple times

714
00:27:19,140 --> 00:27:21,059
which is is why we have here these

715
00:27:21,059 --> 00:27:23,520
distributions and the important thing to

716
00:27:23,520 --> 00:27:25,260
note about these plots is when we look

717
00:27:25,260 --> 00:27:27,240
at the known direct which is this dotted

718
00:27:27,240 --> 00:27:28,620
line like up here

719
00:27:28,620 --> 00:27:30,960
um it's the same on all four of these

720
00:27:30,960 --> 00:27:31,919
plots

721
00:27:31,919 --> 00:27:34,380
if we take any combination of these four

722
00:27:34,380 --> 00:27:36,240
plots we can distinguish each of these

723
00:27:36,240 --> 00:27:38,039
three toolkits from the known direct

724
00:27:38,039 --> 00:27:39,620
connections

725
00:27:39,620 --> 00:27:43,200
uh for example uh in this first one over

726
00:27:43,200 --> 00:27:44,700
here we have

727
00:27:44,700 --> 00:27:48,240
uh bobushka so we can see obviously that

728
00:27:48,240 --> 00:27:51,120
the ratio value of a valid get request

729
00:27:51,120 --> 00:27:54,539
to a TCP synac round trip time will be

730
00:27:54,539 --> 00:27:55,860
much larger

731
00:27:55,860 --> 00:27:59,279
um in molishka than uh the the Apache

732
00:27:59,279 --> 00:28:01,919
web server um and so on for the other uh

733
00:28:01,919 --> 00:28:05,000
the other two toolkits

734
00:28:08,400 --> 00:28:10,679
so as I mentioned before on top of the

735
00:28:10,679 --> 00:28:12,120
network timing

736
00:28:12,120 --> 00:28:15,299
um analysis we could also use TLS

737
00:28:15,299 --> 00:28:18,000
fingerprinting so uh

738
00:28:18,000 --> 00:28:20,640
as I said demand metal fishing toolkits

739
00:28:20,640 --> 00:28:22,740
are utilizing unusual TLS Stacks if

740
00:28:22,740 --> 00:28:25,320
we're talking about uh typical TLS

741
00:28:25,320 --> 00:28:27,720
stacks of web server software that's

742
00:28:27,720 --> 00:28:30,000
used by the vast majority of websites

743
00:28:30,000 --> 00:28:30,960
online

744
00:28:30,960 --> 00:28:34,620
uh so what we want to look at here is

745
00:28:34,620 --> 00:28:37,799
first of all TLS version supported

746
00:28:37,799 --> 00:28:41,279
um so uh in this case you know a say

747
00:28:41,279 --> 00:28:44,940
paypal.com is not going to want to for

748
00:28:44,940 --> 00:28:46,320
for the safety of their users they're

749
00:28:46,320 --> 00:28:47,820
not going to want to talk to a client

750
00:28:47,820 --> 00:28:50,820
that's using say you know TLS 1.0 they

751
00:28:50,820 --> 00:28:54,120
might want to restrict that to TLS 1.3

752
00:28:54,120 --> 00:28:57,600
so we but a a fishing kit is one is

753
00:28:57,600 --> 00:28:59,279
going to want to cast a wider net and

754
00:28:59,279 --> 00:29:01,980
you know not uh reject a potential

755
00:29:01,980 --> 00:29:05,340
victim just because uh they're using a a

756
00:29:05,340 --> 00:29:09,020
lesser version of TLS

757
00:29:09,419 --> 00:29:11,880
we also want to look at TLS libraries so

758
00:29:11,880 --> 00:29:14,820
as I mentioned uh when you look at a an

759
00:29:14,820 --> 00:29:18,840
Apache web server from uh from the TLs

760
00:29:18,840 --> 00:29:22,679
from a TLS perspective it will look uh

761
00:29:22,679 --> 00:29:25,320
very similar to every other Apache web

762
00:29:25,320 --> 00:29:26,760
server out there it will use very

763
00:29:26,760 --> 00:29:29,399
similar uh or exactly the same TLS

764
00:29:29,399 --> 00:29:32,279
libraries typically probably openssl

765
00:29:32,279 --> 00:29:36,419
let's say uh but these toolkits they're

766
00:29:36,419 --> 00:29:39,179
written in go so they at least these

767
00:29:39,179 --> 00:29:42,720
three all utilize the golang TLs Library

768
00:29:42,720 --> 00:29:45,960
so what we used uh to determine the TLs

769
00:29:45,960 --> 00:29:48,179
library is this tool called TLS proverb

770
00:29:48,179 --> 00:29:50,100
which is an open source tool and what it

771
00:29:50,100 --> 00:29:52,140
does is it sends out TLS client hello

772
00:29:52,140 --> 00:29:55,620
packets uh a large number of them with

773
00:29:55,620 --> 00:29:58,620
varying formats and it analyzes the

774
00:29:58,620 --> 00:30:02,820
format of the TLs server hello responses

775
00:30:02,820 --> 00:30:05,179
to determine which library is being used

776
00:30:05,179 --> 00:30:08,399
so we uh

777
00:30:08,399 --> 00:30:12,840
it returns a set of all possible uh TLS

778
00:30:12,840 --> 00:30:15,179
libraries it was around 150 of them and

779
00:30:15,179 --> 00:30:16,679
the probabilities that each one is being

780
00:30:16,679 --> 00:30:18,179
used so we each we use these

781
00:30:18,179 --> 00:30:20,700
probabilities as features to determine

782
00:30:20,700 --> 00:30:24,480
which uh you know if it's a toolkit or

783
00:30:24,480 --> 00:30:26,600
not

784
00:30:28,919 --> 00:30:31,559
so with these features in mind with uh

785
00:30:31,559 --> 00:30:33,360
this methodology

786
00:30:33,360 --> 00:30:37,200
um sound based on our our pilot tests we

787
00:30:37,200 --> 00:30:39,899
had to come up with a ground truth data

788
00:30:39,899 --> 00:30:41,520
set in order for us to actually create

789
00:30:41,520 --> 00:30:43,140
some sort of a machine learning

790
00:30:43,140 --> 00:30:45,779
classifier to detect these toolkits at a

791
00:30:45,779 --> 00:30:46,980
network layer

792
00:30:46,980 --> 00:30:50,100
however since this was the first study

793
00:30:50,100 --> 00:30:52,679
on man the middle fishing toolkits there

794
00:30:52,679 --> 00:30:56,159
was no ground truth data set of uh the

795
00:30:56,159 --> 00:30:57,779
behavior of these toolkits uh in

796
00:30:57,779 --> 00:31:00,299
existence we had to make it ourselves

797
00:31:00,299 --> 00:31:02,700
uh so what we did is we

798
00:31:02,700 --> 00:31:05,880
uh we set up an infrastructure of 30

799
00:31:05,880 --> 00:31:08,279
globally distributed nodes so in this

800
00:31:08,279 --> 00:31:10,020
this figure on the bottom right is kind

801
00:31:10,020 --> 00:31:13,440
of just a a simple example with just a

802
00:31:13,440 --> 00:31:14,700
few notes

803
00:31:14,700 --> 00:31:15,299
um

804
00:31:15,299 --> 00:31:18,659
but we set up a node in every region of

805
00:31:18,659 --> 00:31:21,179
the AWS uh

806
00:31:21,179 --> 00:31:22,620
uh

807
00:31:22,620 --> 00:31:24,779
Network Global Network

808
00:31:24,779 --> 00:31:26,880
uh and what we did is we we set up each

809
00:31:26,880 --> 00:31:30,179
node with a uh a web server just an

810
00:31:30,179 --> 00:31:32,399
Apache web server a client program to

811
00:31:32,399 --> 00:31:33,480
record

812
00:31:33,480 --> 00:31:37,260
um the uh the network timing uh of these

813
00:31:37,260 --> 00:31:38,220
requests

814
00:31:38,220 --> 00:31:40,740
uh and each of the three toolkits and we

815
00:31:40,740 --> 00:31:42,480
simply just recorded every permutation

816
00:31:42,480 --> 00:31:45,179
of client node to Mana metal phishing

817
00:31:45,179 --> 00:31:47,520
toolkit it's a web server and the reason

818
00:31:47,520 --> 00:31:51,000
why we had to set up this Global uh

819
00:31:51,000 --> 00:31:53,220
network is because we wanted to since

820
00:31:53,220 --> 00:31:55,080
we're recording Network timing we wanted

821
00:31:55,080 --> 00:31:57,480
to make sure that we can try to remove

822
00:31:57,480 --> 00:32:00,960
the natural delay in network packet

823
00:32:00,960 --> 00:32:03,960
transmission as much as possible so we

824
00:32:03,960 --> 00:32:05,340
wanted to see you know if there was an

825
00:32:05,340 --> 00:32:07,440
attacker that was located in Europe and

826
00:32:07,440 --> 00:32:10,500
you were located in California and the

827
00:32:10,500 --> 00:32:12,179
web server you're trying to talk to is

828
00:32:12,179 --> 00:32:14,520
actually in Japan we wanted to make sure

829
00:32:14,520 --> 00:32:16,380
that that sort of natural delay that

830
00:32:16,380 --> 00:32:17,760
would occur even without the toolkit

831
00:32:17,760 --> 00:32:20,700
being there is accounted for so we

832
00:32:20,700 --> 00:32:23,340
wanted to make sure we had really every

833
00:32:23,340 --> 00:32:25,740
sort of geographical distance between

834
00:32:25,740 --> 00:32:28,620
these three nodes

835
00:32:28,620 --> 00:32:31,140
accounting Porter so in total we

836
00:32:31,140 --> 00:32:34,200
recorded uh just under 150 000 data

837
00:32:34,200 --> 00:32:35,700
points um

838
00:32:35,700 --> 00:32:38,159
uh to feed into our eventual machine

839
00:32:38,159 --> 00:32:41,059
learning classifier

840
00:32:42,960 --> 00:32:45,960
so using this data we trained a random

841
00:32:45,960 --> 00:32:48,480
Forest classifier uh with with this data

842
00:32:48,480 --> 00:32:50,460
as well as data from Real World websites

843
00:32:50,460 --> 00:32:52,320
so we recorded the same TLS

844
00:32:52,320 --> 00:32:54,000
fingerprinting and network timing

845
00:32:54,000 --> 00:32:57,659
analysis from Alexa top 1000 sites as

846
00:32:57,659 --> 00:33:00,419
well as sites behind

847
00:33:00,419 --> 00:33:01,140
um

848
00:33:01,140 --> 00:33:03,840
uh load balancing services like

849
00:33:03,840 --> 00:33:06,059
cloudflare we want to make sure that

850
00:33:06,059 --> 00:33:07,740
that sort of an extra hop that occurs

851
00:33:07,740 --> 00:33:10,380
from a load balancer uh that's in use by

852
00:33:10,380 --> 00:33:12,539
thousands of websites

853
00:33:12,539 --> 00:33:15,419
will not be misattributed to a phishing

854
00:33:15,419 --> 00:33:16,380
toolkit

855
00:33:16,380 --> 00:33:18,840
and then also just some sites from our

856
00:33:18,840 --> 00:33:21,299
local area just small business websites

857
00:33:21,299 --> 00:33:23,279
that don't use these sort of load

858
00:33:23,279 --> 00:33:25,019
balancing services to get a full

859
00:33:25,019 --> 00:33:28,320
distribution of different uh web server

860
00:33:28,320 --> 00:33:30,860
setups

861
00:33:32,580 --> 00:33:33,840
and

862
00:33:33,840 --> 00:33:36,320
upon training this glass bar we achieved

863
00:33:36,320 --> 00:33:39,179
99.9 accuracy and a five full cross

864
00:33:39,179 --> 00:33:41,519
validation score of 99.9

865
00:33:41,519 --> 00:33:43,140
importantly what you can see on the

866
00:33:43,140 --> 00:33:45,480
bottom here uh is a figure

867
00:33:45,480 --> 00:33:46,740
uh

868
00:33:46,740 --> 00:33:48,960
from an experiment which we we used to

869
00:33:48,960 --> 00:33:51,120
determine if our classifier is robust so

870
00:33:51,120 --> 00:33:52,500
essentially what we did

871
00:33:52,500 --> 00:33:55,140
is we ranked our our features so our

872
00:33:55,140 --> 00:33:57,240
feature set from from most important to

873
00:33:57,240 --> 00:34:00,779
least important from left to right and

874
00:34:00,779 --> 00:34:02,519
we iteratively removed the most

875
00:34:02,519 --> 00:34:04,919
important feature retrain and retested

876
00:34:04,919 --> 00:34:08,179
our classifier and recorded the uh

877
00:34:08,179 --> 00:34:10,260
accuracy false positive and false

878
00:34:10,260 --> 00:34:11,580
negative rates

879
00:34:11,580 --> 00:34:13,500
and what this experiment allowed us to

880
00:34:13,500 --> 00:34:15,659
do is determine if an attacker knows

881
00:34:15,659 --> 00:34:17,460
about our classifier and knows that we

882
00:34:17,460 --> 00:34:20,099
have a tool that's searching the web for

883
00:34:20,099 --> 00:34:21,839
their websites

884
00:34:21,839 --> 00:34:24,540
can they simply just patch you know say

885
00:34:24,540 --> 00:34:27,179
the top 10 most important features

886
00:34:27,179 --> 00:34:27,899
um

887
00:34:27,899 --> 00:34:30,179
and complete bypass our classifier

888
00:34:30,179 --> 00:34:32,280
so what you can see here is that we have

889
00:34:32,280 --> 00:34:35,760
in total just under 200 features and

890
00:34:35,760 --> 00:34:37,800
it's not until we remove uh you know

891
00:34:37,800 --> 00:34:39,960
just about 75 percent of them that we

892
00:34:39,960 --> 00:34:41,339
actually start to see a drop off in

893
00:34:41,339 --> 00:34:43,260
performance so this means that our

894
00:34:43,260 --> 00:34:46,619
classifier is very effectively modeling

895
00:34:46,619 --> 00:34:48,418
the entire man in the middle fishing

896
00:34:48,418 --> 00:34:51,179
toolkit architecture and just nature of

897
00:34:51,179 --> 00:34:53,460
them in total so an attacker if they

898
00:34:53,460 --> 00:34:54,719
wanted to actually bypass this

899
00:34:54,719 --> 00:34:56,940
classifier they would have to completely

900
00:34:56,940 --> 00:34:59,580
change the the fundamental

901
00:34:59,580 --> 00:35:02,580
um nature of the toolkit itself

902
00:35:02,580 --> 00:35:04,440
um which would be very difficult to do

903
00:35:04,440 --> 00:35:06,720
since we're really just modeling the

904
00:35:06,720 --> 00:35:12,200
reverse proxy uh nature of the toolkits

905
00:35:15,300 --> 00:35:18,420
so uh using this classifier we created a

906
00:35:18,420 --> 00:35:21,660
framework which we call foca which is

907
00:35:21,660 --> 00:35:24,839
just a command line tool to

908
00:35:24,839 --> 00:35:27,560
um you point a you point at a web host

909
00:35:27,560 --> 00:35:30,480
and it records this network level data

910
00:35:30,480 --> 00:35:32,579
that we talked about and also a class

911
00:35:32,579 --> 00:35:35,820
classification from our classifier for

912
00:35:35,820 --> 00:35:39,180
these fishing websites and the name foca

913
00:35:39,180 --> 00:35:42,300
is comes from the Latin word for seal uh

914
00:35:42,300 --> 00:35:44,520
which is uh I'm sure as we all know an

915
00:35:44,520 --> 00:35:49,079
aquatic mammal and uh before trying to

916
00:35:49,079 --> 00:35:51,300
find the name for this tool I this is

917
00:35:51,300 --> 00:35:53,220
something I I learned they use

918
00:35:53,220 --> 00:35:54,599
vibrations in the water to detect

919
00:35:54,599 --> 00:35:56,940
otherwise hidden prey so it's a a pretty

920
00:35:56,940 --> 00:35:58,920
apt comparison to what we're doing since

921
00:35:58,920 --> 00:36:01,140
these tool kits are

922
00:36:01,140 --> 00:36:03,660
relatively hidden uh if we're just

923
00:36:03,660 --> 00:36:06,599
looking at the the application layer

924
00:36:06,599 --> 00:36:08,520
because the the

925
00:36:08,520 --> 00:36:11,940
you know the visuals of these sites are

926
00:36:11,940 --> 00:36:13,320
completely identical to the real site

927
00:36:13,320 --> 00:36:14,520
there's really nothing that you could do

928
00:36:14,520 --> 00:36:16,560
to determine that it's a phishing site

929
00:36:16,560 --> 00:36:19,740
just by looking at it but using these uh

930
00:36:19,740 --> 00:36:22,560
uh side Channel features we're able to

931
00:36:22,560 --> 00:36:26,299
detect these these hidden websites

932
00:36:28,079 --> 00:36:32,220
okay so we have another demo showing off

933
00:36:32,220 --> 00:36:33,599
um

934
00:36:33,599 --> 00:36:36,560
the tool

935
00:36:36,780 --> 00:36:40,880
maybe yeah easier if you just do it

936
00:36:52,859 --> 00:36:55,400
foreign

937
00:37:01,020 --> 00:37:04,079
so uh here's just a simple example

938
00:37:04,079 --> 00:37:06,780
um of how this tool Works uh

939
00:37:06,780 --> 00:37:08,760
as far as visuals

940
00:37:08,760 --> 00:37:10,020
um

941
00:37:10,020 --> 00:37:11,940
you know there this is a command line

942
00:37:11,940 --> 00:37:13,680
tool so there really isn't much to show

943
00:37:13,680 --> 00:37:15,660
as far as the the inner workings there's

944
00:37:15,660 --> 00:37:17,700
kind of a lot of magic hidden behind the

945
00:37:17,700 --> 00:37:20,160
scenes but this is just to show how fast

946
00:37:20,160 --> 00:37:22,740
we could come up with the classification

947
00:37:22,740 --> 00:37:23,520
um

948
00:37:23,520 --> 00:37:26,160
but as far as the actual analysis this

949
00:37:26,160 --> 00:37:27,900
is all the feature set that I talked

950
00:37:27,900 --> 00:37:30,240
about already and the classifier that

951
00:37:30,240 --> 00:37:33,119
also uh mentioned so we could see if we

952
00:37:33,119 --> 00:37:36,119
we try to uh classify sites like Google

953
00:37:36,119 --> 00:37:37,560
or Facebook

954
00:37:37,560 --> 00:37:40,619
uh we have a label of non-fishing but if

955
00:37:40,619 --> 00:37:42,599
we look at this real fishing site that

956
00:37:42,599 --> 00:37:44,640
we found from

957
00:37:44,640 --> 00:37:48,119
um a phishing block list uh we could see

958
00:37:48,119 --> 00:37:52,020
that we we do get a label of fishing so

959
00:37:52,020 --> 00:37:55,200
it's a very basic example here

960
00:37:55,200 --> 00:37:56,760
um

961
00:37:56,760 --> 00:38:00,200
we'll go back to the slides

962
00:38:11,359 --> 00:38:13,920
okay great thanks

963
00:38:13,920 --> 00:38:15,420
okay

964
00:38:15,420 --> 00:38:17,640
so using this tool

965
00:38:17,640 --> 00:38:21,000
um this framework uh we now wanted to go

966
00:38:21,000 --> 00:38:23,820
out onto the internet and determine are

967
00:38:23,820 --> 00:38:26,280
these tools actually being used uh in

968
00:38:26,280 --> 00:38:29,880
the wild uh or are these just toys like

969
00:38:29,880 --> 00:38:33,420
Nick mentioned uh for pen testing so to

970
00:38:33,420 --> 00:38:35,640
do this we created this phishing website

971
00:38:35,640 --> 00:38:37,440
crawling infrastructure which is broken

972
00:38:37,440 --> 00:38:39,359
into four parts here and I'll I'll

973
00:38:39,359 --> 00:38:42,540
briefly go over each one of these parts

974
00:38:42,540 --> 00:38:44,820
so first we Source our candidate domains

975
00:38:44,820 --> 00:38:47,220
uh from certificate transparency logs

976
00:38:47,220 --> 00:38:49,740
and phishing block lists

977
00:38:49,740 --> 00:38:51,359
uh

978
00:38:51,359 --> 00:38:53,460
and the idea here is that we wanted to

979
00:38:53,460 --> 00:38:56,640
see do fishing block lists effectively

980
00:38:56,640 --> 00:38:59,339
uh capture these these these websites

981
00:38:59,339 --> 00:39:01,740
already or are they relatively hidden

982
00:39:01,740 --> 00:39:04,500
and conversely we wanted to see

983
00:39:04,500 --> 00:39:06,960
uh are there sites you know since these

984
00:39:06,960 --> 00:39:08,220
toolkits like evil Gen X will

985
00:39:08,220 --> 00:39:09,660
automatically create a certificate for

986
00:39:09,660 --> 00:39:11,339
you they're

987
00:39:11,339 --> 00:39:13,859
uh inadvertently they will log their

988
00:39:13,859 --> 00:39:15,780
domain onto a certificate transparency

989
00:39:15,780 --> 00:39:18,420
log as soon as the site goes online so

990
00:39:18,420 --> 00:39:20,099
we wanted to use these these certificate

991
00:39:20,099 --> 00:39:23,040
transparency logs to capture these sites

992
00:39:23,040 --> 00:39:24,900
the second that they go online

993
00:39:24,900 --> 00:39:26,700
and then compare the results between

994
00:39:26,700 --> 00:39:28,140
what we get from the certificate

995
00:39:28,140 --> 00:39:30,000
transparency logs to the phishing block

996
00:39:30,000 --> 00:39:32,579
list to see is there

997
00:39:32,579 --> 00:39:34,800
um a blind spot in these block lists

998
00:39:34,800 --> 00:39:36,480
that these that these toolkits are

999
00:39:36,480 --> 00:39:38,420
occupying

1000
00:39:38,420 --> 00:39:41,640
uh I guess I briefly just mentioned uh

1001
00:39:41,640 --> 00:39:43,920
in a piled experiment we did we found

1002
00:39:43,920 --> 00:39:46,800
that these block lists are in fact not

1003
00:39:46,800 --> 00:39:48,720
capturing them uh I think in total after

1004
00:39:48,720 --> 00:39:53,820
a month of of uh recording and analyzing

1005
00:39:53,820 --> 00:39:55,260
sites from these block lists like open

1006
00:39:55,260 --> 00:39:57,000
fish and fish tank I think we found

1007
00:39:57,000 --> 00:40:01,440
maybe 17 uh total uh websites out of

1008
00:40:01,440 --> 00:40:04,619
hundreds of thousands of sites analyzed

1009
00:40:04,619 --> 00:40:06,359
um so effectively for the majority of

1010
00:40:06,359 --> 00:40:09,359
our of our full data collection we just

1011
00:40:09,359 --> 00:40:11,760
use certificate transparency logs uh

1012
00:40:11,760 --> 00:40:13,140
because there was it was a waste of time

1013
00:40:13,140 --> 00:40:14,880
to even look at the fishing block lists

1014
00:40:14,880 --> 00:40:17,780
uh but moving on

1015
00:40:17,780 --> 00:40:21,119
so the so once we get our domain so

1016
00:40:21,119 --> 00:40:23,220
these come in live from these these URL

1017
00:40:23,220 --> 00:40:25,680
sources uh we move on to our scheduler

1018
00:40:25,680 --> 00:40:27,119
module

1019
00:40:27,119 --> 00:40:30,660
here uh which simply just dispatches a

1020
00:40:30,660 --> 00:40:31,980
worker node

1021
00:40:31,980 --> 00:40:35,579
um containing foca in the classifier and

1022
00:40:35,579 --> 00:40:36,599
also

1023
00:40:36,599 --> 00:40:40,440
um a selenium uh browser to just grab an

1024
00:40:40,440 --> 00:40:43,619
HTML and screenshot of the site

1025
00:40:43,619 --> 00:40:46,140
and then stores it in the database uh

1026
00:40:46,140 --> 00:40:47,460
and the point of the screenshot on the

1027
00:40:47,460 --> 00:40:50,220
HTML is just for us to be able to verify

1028
00:40:50,220 --> 00:40:51,960
that the classifier works because even

1029
00:40:51,960 --> 00:40:53,400
though we had very high performance in

1030
00:40:53,400 --> 00:40:55,800
the lab we wanted to make sure that you

1031
00:40:55,800 --> 00:40:57,000
know there's no sites that were just

1032
00:40:57,000 --> 00:40:58,619
misclassifying and there would be no way

1033
00:40:58,619 --> 00:41:00,480
for us to verify so

1034
00:41:00,480 --> 00:41:02,640
the idea of the screenshot is that we

1035
00:41:02,640 --> 00:41:04,020
can take all of our positive

1036
00:41:04,020 --> 00:41:06,000
classifications look at the screenshots

1037
00:41:06,000 --> 00:41:08,099
and determine does this is this actually

1038
00:41:08,099 --> 00:41:11,839
a phishing website or not

1039
00:41:13,200 --> 00:41:16,200
next all of the collect data is fed into

1040
00:41:16,200 --> 00:41:18,300
the analysis module uh for further

1041
00:41:18,300 --> 00:41:20,220
processing such as content-based

1042
00:41:20,220 --> 00:41:22,980
clustering of the HTML screenshots and

1043
00:41:22,980 --> 00:41:25,140
other website analysis you know such as

1044
00:41:25,140 --> 00:41:27,900
searching for the IP address of the

1045
00:41:27,900 --> 00:41:30,720
domain on on block lists or things like

1046
00:41:30,720 --> 00:41:32,899
that

1047
00:41:34,020 --> 00:41:36,240
and lastly we have a recrawing module

1048
00:41:36,240 --> 00:41:38,700
and this module is very important uh for

1049
00:41:38,700 --> 00:41:41,099
for this study for two reasons

1050
00:41:41,099 --> 00:41:43,260
uh so the point of this is simply just

1051
00:41:43,260 --> 00:41:45,780
to take a subset of the domains that we

1052
00:41:45,780 --> 00:41:48,300
crawled already and just revisit them at

1053
00:41:48,300 --> 00:41:50,099
some later date so we do this for two

1054
00:41:50,099 --> 00:41:52,500
reasons first uh

1055
00:41:52,500 --> 00:41:54,660
as I mentioned we we have sites that you

1056
00:41:54,660 --> 00:41:55,800
sort of that we that we get from

1057
00:41:55,800 --> 00:41:58,079
certificate transparency

1058
00:41:58,079 --> 00:42:00,680
certificate transparency logs a domain

1059
00:42:00,680 --> 00:42:03,660
uh immediately after the certificate is

1060
00:42:03,660 --> 00:42:04,920
created

1061
00:42:04,920 --> 00:42:07,980
um so in the case of evil Gen X this

1062
00:42:07,980 --> 00:42:09,599
would work for us because evil genetics

1063
00:42:09,599 --> 00:42:11,040
will create a certificate the second it

1064
00:42:11,040 --> 00:42:13,079
goes online so we'll get response from

1065
00:42:13,079 --> 00:42:15,480
Evil Gen X in that case

1066
00:42:15,480 --> 00:42:17,820
however it's also very reasonable that

1067
00:42:17,820 --> 00:42:20,460
anybody making a website would you know

1068
00:42:20,460 --> 00:42:21,960
say create a certificate and then decide

1069
00:42:21,960 --> 00:42:23,760
you know tomorrow I'll put the website

1070
00:42:23,760 --> 00:42:26,280
up so if we visit that site the second

1071
00:42:26,280 --> 00:42:28,500
that it's on certificate transparency we

1072
00:42:28,500 --> 00:42:30,420
may not get a response that we're

1073
00:42:30,420 --> 00:42:31,859
looking for we'll just get you know

1074
00:42:31,859 --> 00:42:33,599
connection timed out or something like

1075
00:42:33,599 --> 00:42:36,900
that so we want to for the few days

1076
00:42:36,900 --> 00:42:40,740
following our first uh uh crawling of a

1077
00:42:40,740 --> 00:42:43,140
site we want to just visit a few times

1078
00:42:43,140 --> 00:42:44,940
until we actually get some content back

1079
00:42:44,940 --> 00:42:47,880
in case the scenario happens

1080
00:42:47,880 --> 00:42:51,060
second we wanted to revisit all the

1081
00:42:51,060 --> 00:42:53,099
sites that we got a positive label from

1082
00:42:53,099 --> 00:42:54,060
Boca

1083
00:42:54,060 --> 00:42:56,400
so if we determine that a site is a man

1084
00:42:56,400 --> 00:42:58,140
in the middle fishing website we wanted

1085
00:42:58,140 --> 00:43:01,500
to crawl it for the next uh you know as

1086
00:43:01,500 --> 00:43:03,180
long as we actually get content from it

1087
00:43:03,180 --> 00:43:05,040
to see how long it takes for the site to

1088
00:43:05,040 --> 00:43:06,300
go down

1089
00:43:06,300 --> 00:43:08,220
and I will talk about those statistics

1090
00:43:08,220 --> 00:43:12,259
that we found from this uh shortly

1091
00:43:13,020 --> 00:43:16,260
so using this infrastructure we ran a

1092
00:43:16,260 --> 00:43:19,140
data collection period of exactly one

1093
00:43:19,140 --> 00:43:22,140
year from 2020 to 2021.

1094
00:43:22,140 --> 00:43:27,060
in total we analyzed uh over 840 000 web

1095
00:43:27,060 --> 00:43:28,319
pages

1096
00:43:28,319 --> 00:43:30,000
and

1097
00:43:30,000 --> 00:43:31,440
discovered

1098
00:43:31,440 --> 00:43:36,119
over 1200 manual fishing toolkits online

1099
00:43:36,119 --> 00:43:37,619
and as you can see on the bottom we have

1100
00:43:37,619 --> 00:43:38,880
these three plots so I'll go from from

1101
00:43:38,880 --> 00:43:42,060
Lester right here we have uh first the

1102
00:43:42,060 --> 00:43:43,920
number of toolkits that we discovered

1103
00:43:43,920 --> 00:43:46,200
per month of our data collection period

1104
00:43:46,200 --> 00:43:48,359
and generally what you could see is a

1105
00:43:48,359 --> 00:43:51,540
positive slope in in the number of sites

1106
00:43:51,540 --> 00:43:53,460
that we find each month so so this

1107
00:43:53,460 --> 00:43:57,240
implies that there could be a a greater

1108
00:43:57,240 --> 00:43:59,280
increase in the usage of these toolkits

1109
00:43:59,280 --> 00:44:03,060
by attackers over time and I'm I'm

1110
00:44:03,060 --> 00:44:04,800
fairly confident that if we extended

1111
00:44:04,800 --> 00:44:08,280
this out until say March of 2022 we

1112
00:44:08,280 --> 00:44:10,619
would you know see even a greater number

1113
00:44:10,619 --> 00:44:13,020
of sites every month

1114
00:44:13,020 --> 00:44:16,440
uh the next two figures are kind of

1115
00:44:16,440 --> 00:44:19,200
connected uh so you can see we have a a

1116
00:44:19,200 --> 00:44:20,460
circle

1117
00:44:20,460 --> 00:44:22,680
um in the location the geographic

1118
00:44:22,680 --> 00:44:24,359
location of each IP address associated

1119
00:44:24,359 --> 00:44:26,280
with these toolkits and what we could

1120
00:44:26,280 --> 00:44:28,800
what we found is unsurprisingly uh these

1121
00:44:28,800 --> 00:44:32,819
toolkits uh typically are located on a

1122
00:44:32,819 --> 00:44:34,619
hosting provider um so unlike a

1123
00:44:34,619 --> 00:44:36,660
traditional phishing attack where as

1124
00:44:36,660 --> 00:44:39,480
Nick mentioned uh it's common for an

1125
00:44:39,480 --> 00:44:42,740
attacker to compromise uh an existing

1126
00:44:42,740 --> 00:44:45,480
website and put their fishing content on

1127
00:44:45,480 --> 00:44:46,400
it

1128
00:44:46,400 --> 00:44:49,220
since these toolkits are themselves

1129
00:44:49,220 --> 00:44:51,660
servers that need to listen on say Port

1130
00:44:51,660 --> 00:44:53,400
80 or 443

1131
00:44:53,400 --> 00:44:56,400
they need their own web servers so so it

1132
00:44:56,400 --> 00:44:59,880
commonly attackers are utilizing uh

1133
00:44:59,880 --> 00:45:01,920
popular hosting providers like AWS

1134
00:45:01,920 --> 00:45:03,599
digitalocean

1135
00:45:03,599 --> 00:45:05,700
um Microsoft is our

1136
00:45:05,700 --> 00:45:07,819
Etc

1137
00:45:08,700 --> 00:45:12,060
so quickly some some examples of the

1138
00:45:12,060 --> 00:45:14,700
brands that we found targeted

1139
00:45:14,700 --> 00:45:17,520
um the top three by far our Instagram

1140
00:45:17,520 --> 00:45:19,140
Google and Facebook

1141
00:45:19,140 --> 00:45:21,119
and you can see on the on the right an

1142
00:45:21,119 --> 00:45:24,240
example of the domains that we saw uh

1143
00:45:24,240 --> 00:45:27,979
for each of these targeted brands

1144
00:45:30,780 --> 00:45:34,260
similarly we we analyzed the type of

1145
00:45:34,260 --> 00:45:36,720
phishing domain that was used to Target

1146
00:45:36,720 --> 00:45:38,220
each of these brands

1147
00:45:38,220 --> 00:45:40,140
so we could see that depending on the

1148
00:45:40,140 --> 00:45:43,859
brand we have a varying number of these

1149
00:45:43,859 --> 00:45:45,960
different kinds of phishing domains I

1150
00:45:45,960 --> 00:45:46,980
don't really have the time to go into

1151
00:45:46,980 --> 00:45:49,319
each one exactly but you know we could

1152
00:45:49,319 --> 00:45:51,780
see for example the the

1153
00:45:51,780 --> 00:45:53,160
um really I guess the one that sticks

1154
00:45:53,160 --> 00:45:55,619
out the most is say Yahoo that uses

1155
00:45:55,619 --> 00:45:57,960
almost entirely Target embedding domains

1156
00:45:57,960 --> 00:46:01,260
which simply just uh uses the full

1157
00:46:01,260 --> 00:46:03,960
domain of the targeted site as a

1158
00:46:03,960 --> 00:46:04,920
subdomain so say

1159
00:46:04,920 --> 00:46:07,920
www.yahoo.com.attagr.com

1160
00:46:12,599 --> 00:46:15,180
okay so as I mentioned we recrawl each

1161
00:46:15,180 --> 00:46:17,099
site so we're able to determine the life

1162
00:46:17,099 --> 00:46:19,859
cycle of these websites

1163
00:46:19,859 --> 00:46:21,300
so starting from the left we could see

1164
00:46:21,300 --> 00:46:25,500
that here uh we we show the uh days

1165
00:46:25,500 --> 00:46:27,780
relative to our detection that the

1166
00:46:27,780 --> 00:46:29,339
domain associated with website was

1167
00:46:29,339 --> 00:46:30,420
registered

1168
00:46:30,420 --> 00:46:32,339
so what we found is that most of these

1169
00:46:32,339 --> 00:46:34,020
sites use freshly registered domains so

1170
00:46:34,020 --> 00:46:35,339
an attacker will set up one of these

1171
00:46:35,339 --> 00:46:37,680
sites they'll register a domain for it

1172
00:46:37,680 --> 00:46:39,720
and they'll put it right up

1173
00:46:39,720 --> 00:46:42,839
as opposed to using old domains uh that

1174
00:46:42,839 --> 00:46:46,160
were registered you know long ago

1175
00:46:47,099 --> 00:46:50,880
next uh we could see that uh

1176
00:46:50,880 --> 00:46:52,740
we're here we're looking at the the time

1177
00:46:52,740 --> 00:46:54,720
it takes for a website to come online so

1178
00:46:54,720 --> 00:46:56,880
this is when we recrawl the sites from

1179
00:46:56,880 --> 00:46:58,859
certificate transparency we could see

1180
00:46:58,859 --> 00:47:02,400
that 93 of them so here at the elbow

1181
00:47:02,400 --> 00:47:03,319
here

1182
00:47:03,319 --> 00:47:06,180
93 percent come online immediately after

1183
00:47:06,180 --> 00:47:09,000
the certificate is created which implies

1184
00:47:09,000 --> 00:47:11,160
and uh you know the statistics on the

1185
00:47:11,160 --> 00:47:12,839
usage of these toolkits based on their

1186
00:47:12,839 --> 00:47:14,579
GitHub repositories would back this up

1187
00:47:14,579 --> 00:47:17,099
that evil Jacks is the most popular of

1188
00:47:17,099 --> 00:47:18,900
these toolkits and that's why we see 93

1189
00:47:18,900 --> 00:47:22,260
go online immediately

1190
00:47:22,260 --> 00:47:22,980
um

1191
00:47:22,980 --> 00:47:24,540
evil Gen X is the only of the three

1192
00:47:24,540 --> 00:47:27,180
tools that creates a certificate for you

1193
00:47:27,180 --> 00:47:30,359
um with the remaining seven percent uh

1194
00:47:30,359 --> 00:47:34,160
being the blushka and Morena sites

1195
00:47:35,339 --> 00:47:38,460
also 20 of these toolkits remain online

1196
00:47:38,460 --> 00:47:42,119
for more than uh 10 days uh so ever

1197
00:47:42,119 --> 00:47:45,359
roughly over here we could see uh we we

1198
00:47:45,359 --> 00:47:48,839
have 80 you know 80 yep five percent

1199
00:47:48,839 --> 00:47:53,460
let's say uh that go offline within

1200
00:47:53,460 --> 00:47:54,540
um

1201
00:47:54,540 --> 00:47:57,540
uh 10 days uh but then we have the

1202
00:47:57,540 --> 00:47:58,800
remaining 20 that will just stay online

1203
00:47:58,800 --> 00:48:02,280
for many days following uh either you

1204
00:48:02,280 --> 00:48:03,839
know the the attackers are just never

1205
00:48:03,839 --> 00:48:06,599
detected or you know uh something along

1206
00:48:06,599 --> 00:48:09,060
those lines uh these sites just are able

1207
00:48:09,060 --> 00:48:11,579
to remain online and continue to affect

1208
00:48:11,579 --> 00:48:14,000
users

1209
00:48:14,339 --> 00:48:16,200
and the most important finding that we

1210
00:48:16,200 --> 00:48:19,560
that we discovered is that only 43.7 of

1211
00:48:19,560 --> 00:48:21,960
domains and 18.9 of IP addresses

1212
00:48:21,960 --> 00:48:24,180
associated with these toolkits appeared

1213
00:48:24,180 --> 00:48:26,339
on a block list at the end of our data

1214
00:48:26,339 --> 00:48:27,660
collection period

1215
00:48:27,660 --> 00:48:29,579
um so what this means is that there were

1216
00:48:29,579 --> 00:48:32,880
sites that we discovered you know at the

1217
00:48:32,880 --> 00:48:34,140
beginning of our data collection period

1218
00:48:34,140 --> 00:48:36,660
in an entire year later those domains

1219
00:48:36,660 --> 00:48:38,460
and IP addresses were still not on block

1220
00:48:38,460 --> 00:48:40,980
lists uh meaning that they just were

1221
00:48:40,980 --> 00:48:42,720
able to if they wanted to just continue

1222
00:48:42,720 --> 00:48:44,640
running this phishing site for an entire

1223
00:48:44,640 --> 00:48:47,040
year without ever being detected so

1224
00:48:47,040 --> 00:48:49,140
there is a massive blind spot in the

1225
00:48:49,140 --> 00:48:51,300
anti-fishing ecosystem that these

1226
00:48:51,300 --> 00:48:54,560
toolkits are occupying

1227
00:48:55,099 --> 00:48:57,900
so once we found these sites online we

1228
00:48:57,900 --> 00:49:01,800
wanted to determine what uh you are real

1229
00:49:01,800 --> 00:49:03,180
users actually being affected by this

1230
00:49:03,180 --> 00:49:04,680
you know these sites can be online and

1231
00:49:04,680 --> 00:49:07,920
they could just be say uh pen testers

1232
00:49:07,920 --> 00:49:10,560
but we wanted to know our real users of

1233
00:49:10,560 --> 00:49:12,780
of you know say companies uh being

1234
00:49:12,780 --> 00:49:14,520
affected by these sites so we partnered

1235
00:49:14,520 --> 00:49:17,880
with Palo Alto networks uh who run

1236
00:49:17,880 --> 00:49:21,060
um many firewall devices in Enterprise

1237
00:49:21,060 --> 00:49:23,760
networks so they have an inline view of

1238
00:49:23,760 --> 00:49:27,300
traffic from websites online

1239
00:49:27,300 --> 00:49:31,140
and then users Within These Networks

1240
00:49:31,140 --> 00:49:34,079
so we gave them the list of all 1200 or

1241
00:49:34,079 --> 00:49:35,099
so

1242
00:49:35,099 --> 00:49:35,819
um

1243
00:49:35,819 --> 00:49:38,940
phishing domains and they ran them

1244
00:49:38,940 --> 00:49:41,040
through their databases since they run

1245
00:49:41,040 --> 00:49:44,220
fishing detection Services as well uh

1246
00:49:44,220 --> 00:49:46,740
using content-based means

1247
00:49:46,740 --> 00:49:49,440
and we found that only 56.7 of the

1248
00:49:49,440 --> 00:49:50,880
domains that we found

1249
00:49:50,880 --> 00:49:52,920
were labeled as malicious by Palo Alto

1250
00:49:52,920 --> 00:49:55,980
Networks and of these 15.1 percent

1251
00:49:55,980 --> 00:49:58,680
receive the label at least a week after

1252
00:49:58,680 --> 00:50:01,640
we discovered them

1253
00:50:02,960 --> 00:50:06,240
on top of this they found that there

1254
00:50:06,240 --> 00:50:07,980
were over 6 000 customer requests that

1255
00:50:07,980 --> 00:50:10,020
were directed towards 260 of these

1256
00:50:10,020 --> 00:50:12,359
fishing websites over a six-month period

1257
00:50:12,359 --> 00:50:16,140
and these came from uh 368 distinct

1258
00:50:16,140 --> 00:50:18,300
firewall devices from uh various

1259
00:50:18,300 --> 00:50:21,319
Enterprise Networks

1260
00:50:23,220 --> 00:50:24,780
so as I mentioned earlier

1261
00:50:24,780 --> 00:50:26,640
um on top of the client side

1262
00:50:26,640 --> 00:50:28,740
fingerprinting that we can do we could

1263
00:50:28,740 --> 00:50:30,560
also look at this from the server side

1264
00:50:30,560 --> 00:50:33,300
as from the perspective of an online

1265
00:50:33,300 --> 00:50:37,319
service say like Facebook or PayPal

1266
00:50:37,319 --> 00:50:39,960
so similar similarly to how we can use

1267
00:50:39,960 --> 00:50:41,460
TLS fingerprinting from the client side

1268
00:50:41,460 --> 00:50:43,079
because these toolkits don't look like

1269
00:50:43,079 --> 00:50:44,819
real web servers

1270
00:50:44,819 --> 00:50:46,560
an online service can look at the

1271
00:50:46,560 --> 00:50:48,540
requests coming from these toolkits and

1272
00:50:48,540 --> 00:50:49,380
realize that they don't look like

1273
00:50:49,380 --> 00:50:52,079
typical web clients as far as their TLS

1274
00:50:52,079 --> 00:50:54,000
tags are concerned

1275
00:50:54,000 --> 00:50:56,220
on top of this these toolkits will

1276
00:50:56,220 --> 00:50:58,319
forward the HTTP user agent of the

1277
00:50:58,319 --> 00:51:00,240
victim so if the victim is say using

1278
00:51:00,240 --> 00:51:01,400
Firefox

1279
00:51:01,400 --> 00:51:03,599
that user agent will be sent to the

1280
00:51:03,599 --> 00:51:05,460
online service but the TLs fingerprint

1281
00:51:05,460 --> 00:51:08,700
will not match that of typically what

1282
00:51:08,700 --> 00:51:09,960
Firefox

1283
00:51:09,960 --> 00:51:12,960
um would would have

1284
00:51:12,960 --> 00:51:16,020
so we used uh what's called j3tls

1285
00:51:16,020 --> 00:51:18,119
fingerprinting to identify unique TLS

1286
00:51:18,119 --> 00:51:19,859
implementations and simply what this

1287
00:51:19,859 --> 00:51:22,200
does is just concatenates

1288
00:51:22,200 --> 00:51:24,599
um uh a

1289
00:51:24,599 --> 00:51:27,000
fields from the TLs client hello packet

1290
00:51:27,000 --> 00:51:28,920
and creates a hash to create a

1291
00:51:28,920 --> 00:51:32,280
fingerprint so we purchased 13 000

1292
00:51:32,280 --> 00:51:34,140
advertising Impressions from an online

1293
00:51:34,140 --> 00:51:36,780
advertising service and directed those

1294
00:51:36,780 --> 00:51:38,220
those Impressions toward one of our

1295
00:51:38,220 --> 00:51:39,599
servers where we reported TLS

1296
00:51:39,599 --> 00:51:41,880
fingerprints and it's all we collected

1297
00:51:41,880 --> 00:51:46,140
163 TLS fingerprints from 400 or so uh

1298
00:51:46,140 --> 00:51:48,119
user agents and we found importantly

1299
00:51:48,119 --> 00:51:50,460
that these toolkits are the TLs

1300
00:51:50,460 --> 00:51:51,599
Fingerprints of these toolkits are

1301
00:51:51,599 --> 00:51:53,520
unique in this data set so there aren't

1302
00:51:53,520 --> 00:51:55,800
real users at least in this data set

1303
00:51:55,800 --> 00:51:58,380
that have us the same fingerprint as

1304
00:51:58,380 --> 00:51:59,880
these toolkits meaning that an online

1305
00:51:59,880 --> 00:52:02,280
service can use this as a red flag if

1306
00:52:02,280 --> 00:52:03,540
they see an authentication request

1307
00:52:03,540 --> 00:52:08,040
coming from a fingerprint like this

1308
00:52:08,040 --> 00:52:09,140
foreign

1309
00:52:09,140 --> 00:52:12,180
Running Out of Time some countermeasures

1310
00:52:12,180 --> 00:52:14,099
so first from from a user's perspective

1311
00:52:14,099 --> 00:52:15,780
you as somebody who's browsing the

1312
00:52:15,780 --> 00:52:17,520
internet

1313
00:52:17,520 --> 00:52:19,920
as is the case for any phishing uh

1314
00:52:19,920 --> 00:52:21,680
attack but especially in this case

1315
00:52:21,680 --> 00:52:23,760
analyzing the primary domain of any

1316
00:52:23,760 --> 00:52:26,400
suspicious URL is uh

1317
00:52:26,400 --> 00:52:28,260
highly important

1318
00:52:28,260 --> 00:52:29,460
um everything else is going to look

1319
00:52:29,460 --> 00:52:31,800
identical to the real service except for

1320
00:52:31,800 --> 00:52:33,540
that primary domain that's where you

1321
00:52:33,540 --> 00:52:36,780
will discover that you're being fished

1322
00:52:36,780 --> 00:52:40,339
also utilizing uh Universal two-factor

1323
00:52:40,339 --> 00:52:43,740
authentication methods will help secure

1324
00:52:43,740 --> 00:52:46,800
accounts by preventing credentials from

1325
00:52:46,800 --> 00:52:49,920
being used on these fishing websites

1326
00:52:49,920 --> 00:52:51,300
uh when we're talking about online

1327
00:52:51,300 --> 00:52:53,819
services and anti-fishing entities as I

1328
00:52:53,819 --> 00:52:55,380
mentioned you looking for discrepancies

1329
00:52:55,380 --> 00:52:57,900
in the client TLS fingerprints can help

1330
00:52:57,900 --> 00:53:00,420
stop phishing attacks

1331
00:53:00,420 --> 00:53:02,400
and from the perspective of an

1332
00:53:02,400 --> 00:53:04,200
anti-fishing bot utilizing these Network

1333
00:53:04,200 --> 00:53:06,960
level detection techniques can help when

1334
00:53:06,960 --> 00:53:09,660
searching for fishing websites

1335
00:53:09,660 --> 00:53:11,160
so in conclusion

1336
00:53:11,160 --> 00:53:14,400
manual fishing websites uh men in the

1337
00:53:14,400 --> 00:53:16,079
middle fishing toolkits rather allow

1338
00:53:16,079 --> 00:53:17,520
attackers to launch highly effective

1339
00:53:17,520 --> 00:53:19,020
phishing attacks

1340
00:53:19,020 --> 00:53:21,540
however the unique architecture that

1341
00:53:21,540 --> 00:53:23,280
these toolkits use to create these

1342
00:53:23,280 --> 00:53:24,900
effective phishing attacks allow us to

1343
00:53:24,900 --> 00:53:27,480
fingerprint them at the network layer

1344
00:53:27,480 --> 00:53:29,700
in total we found over 1200 of these

1345
00:53:29,700 --> 00:53:31,740
toolkits in the wild targeting real

1346
00:53:31,740 --> 00:53:33,420
users

1347
00:53:33,420 --> 00:53:35,339
and at the moment anti-fit the

1348
00:53:35,339 --> 00:53:36,720
anti-fishing ecosystem does not

1349
00:53:36,720 --> 00:53:40,140
effectively capture these toolkits

1350
00:53:40,140 --> 00:53:42,660
all the code for foca and the data sets

1351
00:53:42,660 --> 00:53:44,940
that we created are located at this URL

1352
00:53:44,940 --> 00:53:46,619
if you're interested

1353
00:53:46,619 --> 00:53:48,720
um and uh thank you for your time and

1354
00:53:48,720 --> 00:53:51,720
we'll be happy to take any questions

1355
00:53:51,720 --> 00:53:54,180
we do have a couple of questions for the

1356
00:53:54,180 --> 00:53:56,880
both of you the first question is in a

1357
00:53:56,880 --> 00:53:59,940
network time analysis can reverse proxy

1358
00:53:59,940 --> 00:54:02,880
in between not cheat to already trigger

1359
00:54:02,880 --> 00:54:05,280
first send requests to avoid the visible

1360
00:54:05,280 --> 00:54:08,460
gap between T2 you think they were

1361
00:54:08,460 --> 00:54:11,400
referencing back to when you guys were

1362
00:54:11,400 --> 00:54:13,440
going over to send analysis package do

1363
00:54:13,440 --> 00:54:14,520
you want to understand

1364
00:54:14,520 --> 00:54:17,780
so you're saying if they add another

1365
00:54:17,780 --> 00:54:21,599
drug second sheet with the timings

1366
00:54:21,599 --> 00:54:23,819
the toolkit could shoot the timings yeah

1367
00:54:23,819 --> 00:54:26,640
so uh if I understand your question

1368
00:54:26,640 --> 00:54:28,619
correctly you're saying you can you know

1369
00:54:28,619 --> 00:54:31,619
delay say that the the TCP handshake to

1370
00:54:31,619 --> 00:54:32,880
make it look

1371
00:54:32,880 --> 00:54:35,640
the ratio look look more realistic I'm

1372
00:54:35,640 --> 00:54:37,020
assuming

1373
00:54:37,020 --> 00:54:37,680
um

1374
00:54:37,680 --> 00:54:39,660
sure you can assume that that's

1375
00:54:39,660 --> 00:54:40,619
something that maybe one of these

1376
00:54:40,619 --> 00:54:42,300
toolkits could try to do but then when

1377
00:54:42,300 --> 00:54:43,319
you when

1378
00:54:43,319 --> 00:54:45,300
that's another discrepancy that we could

1379
00:54:45,300 --> 00:54:46,619
actually use eventually you know if we

1380
00:54:46,619 --> 00:54:47,640
know that these toolkits are doing

1381
00:54:47,640 --> 00:54:49,740
something like that we can see you know

1382
00:54:49,740 --> 00:54:51,960
an IP address that's located right next

1383
00:54:51,960 --> 00:54:54,240
to that IP address of that toolkit is

1384
00:54:54,240 --> 00:54:57,599
responding with a TCP a TCP handshake in

1385
00:54:57,599 --> 00:55:00,000
half the time or a third of the time uh

1386
00:55:00,000 --> 00:55:01,740
to that IP address so there's these

1387
00:55:01,740 --> 00:55:03,300
delays are artificial so that's another

1388
00:55:03,300 --> 00:55:06,300
artifact

1389
00:55:06,900 --> 00:55:09,300
um the second question is what could

1390
00:55:09,300 --> 00:55:12,420
prevent these mitm phishing sites not

1391
00:55:12,420 --> 00:55:15,420
detected by anti-fishing scanners

1392
00:55:15,420 --> 00:55:18,180
so the

1393
00:55:18,180 --> 00:55:19,980
um we do addresses a little bit on the

1394
00:55:19,980 --> 00:55:21,000
paper if someone is interested in

1395
00:55:21,000 --> 00:55:23,520
reading the full details but effectively

1396
00:55:23,520 --> 00:55:25,859
um I would say the vast vast majority of

1397
00:55:25,859 --> 00:55:28,079
existing anti-fishing scanners were con

1398
00:55:28,079 --> 00:55:29,940
are content based right so they will

1399
00:55:29,940 --> 00:55:33,540
effectively flag a website when the

1400
00:55:33,540 --> 00:55:35,460
content of that website matches a

1401
00:55:35,460 --> 00:55:38,579
phishing Target in this case effectively

1402
00:55:38,579 --> 00:55:40,380
those tools are so powerful and have

1403
00:55:40,380 --> 00:55:43,440
this built-in uh evasion capabilities uh

1404
00:55:43,440 --> 00:55:46,800
unless you have the exact uh URL that

1405
00:55:46,800 --> 00:55:49,680
includes the token that the attacker is

1406
00:55:49,680 --> 00:55:52,079
using uh the phishing server will just

1407
00:55:52,079 --> 00:55:55,079
redirect you to a B9 website so the

1408
00:55:55,079 --> 00:55:57,059
phishing scanner may see the domain

1409
00:55:57,059 --> 00:55:58,920
somewhere but will actually never be

1410
00:55:58,920 --> 00:56:01,260
exposed to the content Unless somehow it

1411
00:56:01,260 --> 00:56:03,599
gets the full URL including that special

1412
00:56:03,599 --> 00:56:06,300
token uh what we are doing for in Focus

1413
00:56:06,300 --> 00:56:07,980
that's different than prior work is that

1414
00:56:07,980 --> 00:56:09,599
we're actually fingerprinting the server

1415
00:56:09,599 --> 00:56:11,819
as opposed to trying to fingerprint the

1416
00:56:11,819 --> 00:56:14,579
content so the the server can try to

1417
00:56:14,579 --> 00:56:18,059
redirect this to you to Google but uh we

1418
00:56:18,059 --> 00:56:19,500
will still be able to say that this is

1419
00:56:19,500 --> 00:56:22,380
an evil genetic server as opposed to you

1420
00:56:22,380 --> 00:56:26,540
know this is just something benign

1421
00:56:27,380 --> 00:56:30,839
okay and our last question uh does it

1422
00:56:30,839 --> 00:56:35,400
work with x-frame options and CSP sets

1423
00:56:35,400 --> 00:56:38,400
yeah so I um you know I I addressed this

1424
00:56:38,400 --> 00:56:39,780
at the beginning

1425
00:56:39,780 --> 00:56:41,460
um but that was a while ago at this

1426
00:56:41,460 --> 00:56:43,680
point uh so

1427
00:56:43,680 --> 00:56:45,420
what happens with when these toolkits

1428
00:56:45,420 --> 00:56:47,400
get a response from a web server if they

1429
00:56:47,400 --> 00:56:49,740
say extreme options or CSP or any other

1430
00:56:49,740 --> 00:56:52,859
sort of of uh you know client-side

1431
00:56:52,859 --> 00:56:54,900
defenses like that they're simply just

1432
00:56:54,900 --> 00:56:56,760
removed there's regular Expressions

1433
00:56:56,760 --> 00:56:58,559
Within These toolkits that will just

1434
00:56:58,559 --> 00:57:00,420
look for that type of a header and just

1435
00:57:00,420 --> 00:57:02,700
you know remove it so it's like it was

1436
00:57:02,700 --> 00:57:05,099
never there so that's why you can't rely

1437
00:57:05,099 --> 00:57:07,740
on anything within the content itself

1438
00:57:07,740 --> 00:57:09,059
because the attacker has full control

1439
00:57:09,059 --> 00:57:11,460
over everything

1440
00:57:11,460 --> 00:57:14,240
Club

1441
00:57:15,260 --> 00:57:17,700
great well thank you to the both of you

1442
00:57:17,700 --> 00:57:19,500
and thank you to everyone who is

1443
00:57:19,500 --> 00:57:21,119
attending this session

1444
00:57:21,119 --> 00:57:23,099
um I'm seeing comments that this was

1445
00:57:23,099 --> 00:57:25,619
very insightful and informational and it

1446
00:57:25,619 --> 00:57:27,599
was very much enjoyed so thank you to

1447
00:57:27,599 --> 00:57:30,240
both of you and um we will be starting

1448
00:57:30,240 --> 00:57:32,339
the next session here in the next few

1449
00:57:32,339 --> 00:57:35,578
minutes bye

