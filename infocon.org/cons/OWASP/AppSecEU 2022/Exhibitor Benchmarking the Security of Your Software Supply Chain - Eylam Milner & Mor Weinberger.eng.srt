1
00:00:04,200 --> 00:00:06,299
hey everyone welcome to the exhibitor

2
00:00:06,299 --> 00:00:07,020
track

3
00:00:07,020 --> 00:00:09,900
I'm hitesh babani a volunteer on the OAS

4
00:00:09,900 --> 00:00:11,639
Community I'll be moderating this

5
00:00:11,639 --> 00:00:12,660
session

6
00:00:12,660 --> 00:00:15,420
during the next 45 minutes you'll be

7
00:00:15,420 --> 00:00:17,760
listening to Elon and more they're

8
00:00:17,760 --> 00:00:20,460
presenting benchmarking the security of

9
00:00:20,460 --> 00:00:22,520
your software supply chain

10
00:00:22,520 --> 00:00:25,080
please submit any questions you have

11
00:00:25,080 --> 00:00:27,720
during the session in the Q a tab that's

12
00:00:27,720 --> 00:00:30,000
just to the right of this video in the

13
00:00:30,000 --> 00:00:31,679
hula platform

14
00:00:31,679 --> 00:00:34,320
I'll be asking them your questions in

15
00:00:34,320 --> 00:00:36,600
the last 10 minutes of the session

16
00:00:36,600 --> 00:00:39,239
also note that the chat function in Zoom

17
00:00:39,239 --> 00:00:42,420
is disabled for attendees but you can

18
00:00:42,420 --> 00:00:44,760
still leave comments in chat in the

19
00:00:44,760 --> 00:00:46,680
whole platform

20
00:00:46,680 --> 00:00:48,600
okay so let's

21
00:00:48,600 --> 00:00:52,079
um let's talk about the speakers Elam

22
00:00:52,079 --> 00:00:55,920
his co-founder and CTO of Argonne

23
00:00:55,920 --> 00:00:58,559
security which is now part of Aqua

24
00:00:58,559 --> 00:00:59,699
company

25
00:00:59,699 --> 00:01:02,100
everyone enables devops and security

26
00:01:02,100 --> 00:01:04,260
teams to protect their software delivery

27
00:01:04,260 --> 00:01:06,720
pipelines against supply chain attacks

28
00:01:06,720 --> 00:01:09,320
you see a lot of those

29
00:01:09,320 --> 00:01:11,900
misconfigurations and vulnerabilities

30
00:01:11,900 --> 00:01:15,840
before founding argon Elam served in

31
00:01:15,840 --> 00:01:18,180
this as a security team lead in the

32
00:01:18,180 --> 00:01:20,820
Israeli military for seven years as I'm

33
00:01:20,820 --> 00:01:22,500
the founder and consultant of various

34
00:01:22,500 --> 00:01:25,979
startups joining him is Moore who is a

35
00:01:25,979 --> 00:01:29,100
senior software engineer at Argonne

36
00:01:29,100 --> 00:01:31,140
um he has more has vast experiences

37
00:01:31,140 --> 00:01:33,840
analyzing threats targeting Cloud native

38
00:01:33,840 --> 00:01:36,420
environments and developing Solutions

39
00:01:36,420 --> 00:01:39,479
against those threats you love swimming

40
00:01:39,479 --> 00:01:41,040
and traveling with his wonderful wife

41
00:01:41,040 --> 00:01:42,420
and kids

42
00:01:42,420 --> 00:01:46,020
so Gentlemen please go ahead and share

43
00:01:46,020 --> 00:01:48,619
us like that

44
00:01:49,920 --> 00:01:54,140
okay great thanks for the introduction

45
00:01:58,020 --> 00:02:01,439
amazing so as he Tash said we'll be

46
00:02:01,439 --> 00:02:03,060
speaking about benchmarking your

47
00:02:03,060 --> 00:02:04,860
software supply chain

48
00:02:04,860 --> 00:02:07,280
um just a very quick introduction of us

49
00:02:07,280 --> 00:02:10,080
so my name is Elam I'm the CTO and

50
00:02:10,080 --> 00:02:12,780
co-founder of argon as part of my

51
00:02:12,780 --> 00:02:15,420
day-to-day job I get to speak with a lot

52
00:02:15,420 --> 00:02:18,780
of devops and security teams uh really

53
00:02:18,780 --> 00:02:21,300
on Amazing topics so hopefully I can

54
00:02:21,300 --> 00:02:22,920
share some of those insights today with

55
00:02:22,920 --> 00:02:25,319
you and more

56
00:02:25,319 --> 00:02:28,140
hi everyone I'm a Weinberger a father of

57
00:02:28,140 --> 00:02:30,720
two awesome kids and I've joined Argonne

58
00:02:30,720 --> 00:02:32,280
as a senior software engineer seven

59
00:02:32,280 --> 00:02:34,860
months ago uh we are on when I worked

60
00:02:34,860 --> 00:02:37,379
for Microsoft for four and a half years

61
00:02:37,379 --> 00:02:40,020
on cloud security threats products and

62
00:02:40,020 --> 00:02:42,120
have quite experience in Cloud native

63
00:02:42,120 --> 00:02:44,340
threats and actually I'm really excited

64
00:02:44,340 --> 00:02:46,760
to be here

65
00:02:48,120 --> 00:02:51,660
great so just a quick word about argon

66
00:02:51,660 --> 00:02:53,700
um so I'll go into the company that

67
00:02:53,700 --> 00:02:56,400
funded on the basis of helping other

68
00:02:56,400 --> 00:02:57,900
companies secure in the software supply

69
00:02:57,900 --> 00:03:00,599
chain we have recently became part of

70
00:03:00,599 --> 00:03:03,599
Aqua Aqua security which does a lot of

71
00:03:03,599 --> 00:03:06,480
awesome work around security as well and

72
00:03:06,480 --> 00:03:07,860
together the mission is really to help

73
00:03:07,860 --> 00:03:10,319
all companies to stop Cloud native

74
00:03:10,319 --> 00:03:12,599
attacks our Focus today is specifically

75
00:03:12,599 --> 00:03:14,159
the software supply chain so that's what

76
00:03:14,159 --> 00:03:15,420
we'll cover

77
00:03:15,420 --> 00:03:17,040
um just to give you a heads up on on the

78
00:03:17,040 --> 00:03:19,080
agenda so we don't have a lot of time

79
00:03:19,080 --> 00:03:20,640
but these are the things that we'll

80
00:03:20,640 --> 00:03:23,220
cover the introvers is done

81
00:03:23,220 --> 00:03:25,260
um next I'll give us just a brief

82
00:03:25,260 --> 00:03:27,180
overview of the software supply chain so

83
00:03:27,180 --> 00:03:28,800
I know this is a technical crowd here

84
00:03:28,800 --> 00:03:30,599
but still I think there's a lot of

85
00:03:30,599 --> 00:03:32,400
confusion around the topic so I'll give

86
00:03:32,400 --> 00:03:34,080
us like a zero to zero kind of an

87
00:03:34,080 --> 00:03:35,060
overview

88
00:03:35,060 --> 00:03:37,440
then we'll talk about some attacks which

89
00:03:37,440 --> 00:03:39,360
is the more interesting part uh we'll

90
00:03:39,360 --> 00:03:42,060
dive deep into some of them and finally

91
00:03:42,060 --> 00:03:44,459
MO is going to share with us a live demo

92
00:03:44,459 --> 00:03:46,680
of a project that will be revealed here

93
00:03:46,680 --> 00:03:48,659
for the first time so the this should be

94
00:03:48,659 --> 00:03:51,980
exciting and that's it for today

95
00:03:52,080 --> 00:03:55,319
so about the software supply chain I

96
00:03:55,319 --> 00:03:56,640
know this is the term that is already

97
00:03:56,640 --> 00:03:59,280
thrown out there a lot but I do see a

98
00:03:59,280 --> 00:04:01,200
lot of confusion about what is the

99
00:04:01,200 --> 00:04:03,780
definition of it so we try to kind of

100
00:04:03,780 --> 00:04:06,780
clearly Define it here so anything that

101
00:04:06,780 --> 00:04:09,299
is in your source code or affects it in

102
00:04:09,299 --> 00:04:11,959
any way from the moment of development

103
00:04:11,959 --> 00:04:14,220
throughout the build pipeline the

104
00:04:14,220 --> 00:04:16,500
packaging and up until the time it is

105
00:04:16,500 --> 00:04:18,600
ready to be deployed to production

106
00:04:18,600 --> 00:04:21,720
so commit to deploy as we see here from

107
00:04:21,720 --> 00:04:24,120
left to right uh this is the time frame

108
00:04:24,120 --> 00:04:25,860
that we often refer to as the software

109
00:04:25,860 --> 00:04:27,660
supply chain and we can see here it's

110
00:04:27,660 --> 00:04:30,120
compa it's a composed of essentially

111
00:04:30,120 --> 00:04:32,820
five different uh layers so the first

112
00:04:32,820 --> 00:04:34,560
one would be the source code where you

113
00:04:34,560 --> 00:04:37,380
work with your team on the code base uh

114
00:04:37,380 --> 00:04:39,900
contributing to it uh the second part is

115
00:04:39,900 --> 00:04:42,540
the dependencies of the code uh known as

116
00:04:42,540 --> 00:04:44,940
material as well um anything you bring

117
00:04:44,940 --> 00:04:47,340
into uh to be part of your development

118
00:04:47,340 --> 00:04:50,820
bosses the build where CI pipelines take

119
00:04:50,820 --> 00:04:53,340
your source code compile it into uh

120
00:04:53,340 --> 00:04:55,380
something that is runnable so in

121
00:04:55,380 --> 00:04:58,259
artifact uh this is the first phase so

122
00:04:58,259 --> 00:05:00,360
managing those artifacts those different

123
00:05:00,360 --> 00:05:03,440
versions of your microservices

124
00:05:03,440 --> 00:05:05,759
until the time you're ready to deploy

125
00:05:05,759 --> 00:05:08,100
them uh to whichever environment you

126
00:05:08,100 --> 00:05:09,540
want so your development environment

127
00:05:09,540 --> 00:05:11,460
your production environment

128
00:05:11,460 --> 00:05:12,540
um so these are kind of the different

129
00:05:12,540 --> 00:05:14,699
layers of the software supply chain and

130
00:05:14,699 --> 00:05:16,500
this is uh the time frame where it

131
00:05:16,500 --> 00:05:18,540
exists

132
00:05:18,540 --> 00:05:21,720
and the thing about it is that uh today

133
00:05:21,720 --> 00:05:25,199
we can see kind of a simple example uh

134
00:05:25,199 --> 00:05:28,259
over here over software supply chain uh

135
00:05:28,259 --> 00:05:29,460
process

136
00:05:29,460 --> 00:05:31,560
um and I guess even the more simplest

137
00:05:31,560 --> 00:05:34,440
examples are still kind of uh very

138
00:05:34,440 --> 00:05:36,479
hectic and very complex

139
00:05:36,479 --> 00:05:38,639
um and it didn't really used to look

140
00:05:38,639 --> 00:05:39,840
like that

141
00:05:39,840 --> 00:05:42,300
um so in the past few years uh in a

142
00:05:42,300 --> 00:05:44,940
relatively short time span we saw a

143
00:05:44,940 --> 00:05:47,100
dramatic shift in technology in the way

144
00:05:47,100 --> 00:05:49,380
this process is composed uh so companies

145
00:05:49,380 --> 00:05:51,300
don't really soft so today as they used

146
00:05:51,300 --> 00:05:54,539
to just two three five years ago so a

147
00:05:54,539 --> 00:05:56,880
very short time spent for a very rapid

148
00:05:56,880 --> 00:05:59,160
change in the process

149
00:05:59,160 --> 00:06:01,680
um so just to kind of demonstrate how

150
00:06:01,680 --> 00:06:03,180
rapid this change was

151
00:06:03,180 --> 00:06:06,000
I tried to teach you on some interesting

152
00:06:06,000 --> 00:06:08,520
points on the timeline uh so we can see

153
00:06:08,520 --> 00:06:12,180
here that gitlab the devops giant one of

154
00:06:12,180 --> 00:06:14,520
the big four which we all know today

155
00:06:14,520 --> 00:06:17,160
um just in 2015 not so long ago was the

156
00:06:17,160 --> 00:06:20,520
10 people operation uh which is insane

157
00:06:20,520 --> 00:06:21,780
to think about

158
00:06:21,780 --> 00:06:23,940
um right after that Google Google Cloud

159
00:06:23,940 --> 00:06:27,240
got into the building software aspect uh

160
00:06:27,240 --> 00:06:29,280
with only a better release of its build

161
00:06:29,280 --> 00:06:30,900
service

162
00:06:30,900 --> 00:06:33,960
um after that in 2017

163
00:06:33,960 --> 00:06:35,940
um bitbucket pipeline was introduced to

164
00:06:35,940 --> 00:06:39,180
the place uh the the older bamboo

165
00:06:39,180 --> 00:06:41,759
um in Azure devops Cloud which is now

166
00:06:41,759 --> 00:06:44,460
one of the more popular platform uh for

167
00:06:44,460 --> 00:06:46,500
software companies out there it's only

168
00:06:46,500 --> 00:06:48,419
officially launched under the name Azure

169
00:06:48,419 --> 00:06:51,720
devops in 2018 and GitHub of course one

170
00:06:51,720 --> 00:06:54,000
of the bigger players in the market

171
00:06:54,000 --> 00:06:56,280
um has actually only introduced its

172
00:06:56,280 --> 00:07:01,080
action its CI platform in 2019 uh when

173
00:07:01,080 --> 00:07:04,139
it became GA and this insane to think

174
00:07:04,139 --> 00:07:06,360
about because today it's the third most

175
00:07:06,360 --> 00:07:09,120
popular CI platform out there and it

176
00:07:09,120 --> 00:07:10,919
only exists a couple of years

177
00:07:10,919 --> 00:07:12,600
um container registry was also

178
00:07:12,600 --> 00:07:14,639
introduced last year

179
00:07:14,639 --> 00:07:16,860
um so you see kind of how things we take

180
00:07:16,860 --> 00:07:20,340
for granted today uh while we develop

181
00:07:20,340 --> 00:07:21,840
um and I will turn to the community of

182
00:07:21,840 --> 00:07:25,080
engineering of developers of devops are

183
00:07:25,080 --> 00:07:27,960
not so uh not so veteran in the market

184
00:07:27,960 --> 00:07:30,539
they are relatively fresh and the

185
00:07:30,539 --> 00:07:32,599
processes that were created around them

186
00:07:32,599 --> 00:07:35,520
are definitely fresh as well and that

187
00:07:35,520 --> 00:07:37,800
this is why it's a challenge to make

188
00:07:37,800 --> 00:07:41,460
sense of it and definitely to secure it

189
00:07:41,460 --> 00:07:43,560
so just kind of uh like a general

190
00:07:43,560 --> 00:07:46,740
overview of how security personnels see

191
00:07:46,740 --> 00:07:49,680
this this market so I would not go over

192
00:07:49,680 --> 00:07:51,599
the numbers here and you shouldn't

193
00:07:51,599 --> 00:07:54,360
either I'll give you the Highlight uh so

194
00:07:54,360 --> 00:07:56,039
we conducted a survey around the

195
00:07:56,039 --> 00:07:59,099
software supply chain security topic uh

196
00:07:59,099 --> 00:08:01,680
we questioned over 200 csos globally so

197
00:08:01,680 --> 00:08:03,479
all over the world

198
00:08:03,479 --> 00:08:05,759
um and we asked them well question about

199
00:08:05,759 --> 00:08:07,680
how they feel about security of the

200
00:08:07,680 --> 00:08:10,020
software supply chain uh which Endeavors

201
00:08:10,020 --> 00:08:12,479
do they take on securing it

202
00:08:12,479 --> 00:08:14,099
um and I won't touch on the on all the

203
00:08:14,099 --> 00:08:16,319
points but just like two major factors

204
00:08:16,319 --> 00:08:17,520
that I took

205
00:08:17,520 --> 00:08:20,400
um it's very interesting was one uh the

206
00:08:20,400 --> 00:08:23,099
majority of companies actually use over

207
00:08:23,099 --> 00:08:25,440
three different platforms uh devops

208
00:08:25,440 --> 00:08:27,840
platforms to build the software

209
00:08:27,840 --> 00:08:29,699
um and every platform is like a small

210
00:08:29,699 --> 00:08:32,219
Universe on its own uh so going across

211
00:08:32,219 --> 00:08:34,080
at least three of them is definitely

212
00:08:34,080 --> 00:08:36,659
part of what makes this process so hard

213
00:08:36,659 --> 00:08:38,458
to manage

214
00:08:38,458 --> 00:08:40,020
um the second point which I find to be

215
00:08:40,020 --> 00:08:41,219
the most interesting

216
00:08:41,219 --> 00:08:43,440
um is we ask them one question those

217
00:08:43,440 --> 00:08:44,760
security Personnel those Security

218
00:08:44,760 --> 00:08:48,060
Experts we ask them what is the number

219
00:08:48,060 --> 00:08:50,459
one uh difficulty in securing your

220
00:08:50,459 --> 00:08:52,140
software supply chain today

221
00:08:52,140 --> 00:08:54,120
and the number one result that we got

222
00:08:54,120 --> 00:08:56,459
was collaboration between devops and

223
00:08:56,459 --> 00:08:58,080
security tips

224
00:08:58,080 --> 00:09:00,120
um and it's an incredible thing to think

225
00:09:00,120 --> 00:09:01,620
about because the number one challenge

226
00:09:01,620 --> 00:09:04,080
is not about code not about technology

227
00:09:04,080 --> 00:09:07,200
not about any other tool out there it's

228
00:09:07,200 --> 00:09:09,360
about people it's about processes so I

229
00:09:09,360 --> 00:09:11,279
think this kind of will reflects like

230
00:09:11,279 --> 00:09:15,260
the the issue of software release

231
00:09:16,320 --> 00:09:19,140
okay so now hopefully that we got a a

232
00:09:19,140 --> 00:09:20,940
little clearer about the software supply

233
00:09:20,940 --> 00:09:23,519
chain and its different aspect uh so

234
00:09:23,519 --> 00:09:26,040
let's talk about recent events uh

235
00:09:26,040 --> 00:09:28,860
including attacking uh the software

236
00:09:28,860 --> 00:09:31,339
supply chain

237
00:09:31,500 --> 00:09:33,899
amazing so we see here

238
00:09:33,899 --> 00:09:37,440
um some four of the bigger more from

239
00:09:37,440 --> 00:09:39,360
known events

240
00:09:39,360 --> 00:09:41,160
um these are kind of events that paved

241
00:09:41,160 --> 00:09:43,140
the way into public knowledge of how

242
00:09:43,140 --> 00:09:45,360
important it is to secure a software

243
00:09:45,360 --> 00:09:47,519
supply chain so I won't Deep dive into

244
00:09:47,519 --> 00:09:49,019
the four of them I'll just give us a

245
00:09:49,019 --> 00:09:50,640
quick overview and then we'll dive later

246
00:09:50,640 --> 00:09:52,080
on

247
00:09:52,080 --> 00:09:53,820
um so the number one on the left on the

248
00:09:53,820 --> 00:09:56,339
top left we see is the case of the spend

249
00:09:56,339 --> 00:09:59,519
uh was 600 roughly 600 code repositor

250
00:09:59,519 --> 00:10:01,440
with private code repositories were

251
00:10:01,440 --> 00:10:04,620
leaked online to the gitlab server the

252
00:10:04,620 --> 00:10:06,959
instance the private instance uh on

253
00:10:06,959 --> 00:10:09,600
premise instance of gitlab server uh due

254
00:10:09,600 --> 00:10:12,300
to failure in configuration of the set

255
00:10:12,300 --> 00:10:14,940
of tools use them uh so a hacker was

256
00:10:14,940 --> 00:10:17,580
able to leak them out online

257
00:10:17,580 --> 00:10:19,740
um the one just below it

258
00:10:19,740 --> 00:10:23,040
um is the case known as CI poisoning

259
00:10:23,040 --> 00:10:25,800
um of a company named codco that an

260
00:10:25,800 --> 00:10:27,180
attacker was able to gain access

261
00:10:27,180 --> 00:10:30,360
directly into the CI environments of

262
00:10:30,360 --> 00:10:32,519
software companies so whether they build

263
00:10:32,519 --> 00:10:34,980
the software this is the most sensitive

264
00:10:34,980 --> 00:10:36,180
area

265
00:10:36,180 --> 00:10:38,220
um and we'll talk about this one

266
00:10:38,220 --> 00:10:42,120
specifically in depth right after this

267
00:10:42,120 --> 00:10:44,220
um the one on the right

268
00:10:44,220 --> 00:10:46,200
um dependency confusion is one of the

269
00:10:46,200 --> 00:10:48,540
more familiar topics

270
00:10:48,540 --> 00:10:50,339
um it it has its own buzzword so

271
00:10:50,339 --> 00:10:53,279
dependency confusion uh the idea is that

272
00:10:53,279 --> 00:10:56,399
attack sorry attackers were able to

273
00:10:56,399 --> 00:10:59,579
demonstrate just how easy it is uh to

274
00:10:59,579 --> 00:11:02,040
confuse your package manager uh your

275
00:11:02,040 --> 00:11:04,440
registry Services uh into pulling

276
00:11:04,440 --> 00:11:06,660
external packages external code packages

277
00:11:06,660 --> 00:11:09,240
into your private environment instead of

278
00:11:09,240 --> 00:11:11,040
the one that you meant to put that are

279
00:11:11,040 --> 00:11:13,260
private to you essentially running

280
00:11:13,260 --> 00:11:15,360
someone else's code on your private

281
00:11:15,360 --> 00:11:17,160
limits very easily

282
00:11:17,160 --> 00:11:20,399
and I think like the fourth one

283
00:11:20,399 --> 00:11:22,079
um doesn't really need any introduction

284
00:11:22,079 --> 00:11:24,360
so solo wind

285
00:11:24,360 --> 00:11:27,540
um in a sentence a code time a build

286
00:11:27,540 --> 00:11:29,579
time code injection

287
00:11:29,579 --> 00:11:32,220
um where attackers gained access to the

288
00:11:32,220 --> 00:11:34,920
build environment of the Orion app uh

289
00:11:34,920 --> 00:11:37,320
were able to inject code into the app

290
00:11:37,320 --> 00:11:39,839
affecting uh tens of thousands of

291
00:11:39,839 --> 00:11:42,740
customers worldwide

292
00:11:44,100 --> 00:11:46,320
and maybe some more recent attacks more

293
00:11:46,320 --> 00:11:48,600
yeah so regarding the mobile recent

294
00:11:48,600 --> 00:11:51,240
Trends we all heard about a lock for J

295
00:11:51,240 --> 00:11:53,160
vulnerability that's effects basically

296
00:11:53,160 --> 00:11:55,560
every organization that depends on

297
00:11:55,560 --> 00:11:58,920
software which written in Java but we

298
00:11:58,920 --> 00:12:00,600
also started seeing in the last year

299
00:12:00,600 --> 00:12:02,480
that even the maintainers of popular

300
00:12:02,480 --> 00:12:05,760
open source project that we all use put

301
00:12:05,760 --> 00:12:09,660
us the consumer at risk so here are just

302
00:12:09,660 --> 00:12:12,839
a few examples and Factory Gs are quite

303
00:12:12,839 --> 00:12:15,600
popular packages with more than 21

304
00:12:15,600 --> 00:12:18,240
million weekly downloads and suddenly

305
00:12:18,240 --> 00:12:20,459
the maintenance the malicious score the

306
00:12:20,459 --> 00:12:24,300
turons in infinity loop which basically

307
00:12:24,300 --> 00:12:27,420
break the system that runs it later on

308
00:12:27,420 --> 00:12:29,519
he published a message that described

309
00:12:29,519 --> 00:12:31,440
the reason behind it it basically was

310
00:12:31,440 --> 00:12:33,360
upset that the commercial product

311
00:12:33,360 --> 00:12:36,120
extensively rely on his contribution

312
00:12:36,120 --> 00:12:39,420
without give back or how he said in his

313
00:12:39,420 --> 00:12:41,820
own world he provided a free work

314
00:12:41,820 --> 00:12:44,339
another APC is another example of what

315
00:12:44,339 --> 00:12:47,100
is now called protest well which is a

316
00:12:47,100 --> 00:12:49,079
marriage of two terms quarters and

317
00:12:49,079 --> 00:12:51,540
software where the maintenance adds code

318
00:12:51,540 --> 00:12:53,399
that checks if the machine that use it

319
00:12:53,399 --> 00:12:56,160
came from a Russian or a Belarusian IP

320
00:12:56,160 --> 00:12:58,860
address and if so we basically wipe the

321
00:12:58,860 --> 00:13:02,100
hard disk and as you guessed this was a

322
00:13:02,100 --> 00:13:03,720
political protest of the maintenance

323
00:13:03,720 --> 00:13:05,820
that aimed to support the Ukraine

324
00:13:05,820 --> 00:13:09,480
efforts in the ongoing War so so we are

325
00:13:09,480 --> 00:13:11,279
really seeing here that the taco

326
00:13:11,279 --> 00:13:13,680
personas and the intention of training

327
00:13:13,680 --> 00:13:15,899
from what we used to

328
00:13:15,899 --> 00:13:19,040
behind the best

329
00:13:19,260 --> 00:13:21,800
great

330
00:13:22,440 --> 00:13:26,040
so finally let's dive into a few attacks

331
00:13:26,040 --> 00:13:28,380
uh the idea is to better understand the

332
00:13:28,380 --> 00:13:30,600
concept of securing your supply chain uh

333
00:13:30,600 --> 00:13:32,459
with looking at some of the

334
00:13:32,459 --> 00:13:35,820
um more sophisticated attacks

335
00:13:35,820 --> 00:13:37,200
so this one is actually kind of nice

336
00:13:37,200 --> 00:13:39,540
because it's not one of the most heard

337
00:13:39,540 --> 00:13:40,620
of

338
00:13:40,620 --> 00:13:42,660
um but it's definitely a widespread one

339
00:13:42,660 --> 00:13:45,060
an important one to read to understand

340
00:13:45,060 --> 00:13:48,120
because it the concept of it is

341
00:13:48,120 --> 00:13:50,279
definitely something any devops team

342
00:13:50,279 --> 00:13:53,459
should uh should be of a werewolf so

343
00:13:53,459 --> 00:13:56,519
this is the case of a GitHub action

344
00:13:56,519 --> 00:14:00,180
um its name was is check spelling action

345
00:14:00,180 --> 00:14:02,160
um and we can see here uh the security

346
00:14:02,160 --> 00:14:04,620
advisory message uh that actually

347
00:14:04,620 --> 00:14:07,860
started uh the whole the whole topic uh

348
00:14:07,860 --> 00:14:10,500
we can see it's about a leakage of a

349
00:14:10,500 --> 00:14:13,579
GitHub access token

350
00:14:14,100 --> 00:14:17,160
so looking at those lines what we see

351
00:14:17,160 --> 00:14:18,000
here

352
00:14:18,000 --> 00:14:20,579
um is the way uh engineering teams use

353
00:14:20,579 --> 00:14:23,160
this action uh so GitHub action is a

354
00:14:23,160 --> 00:14:24,600
small piece of code

355
00:14:24,600 --> 00:14:26,880
um and the check spelling one well it

356
00:14:26,880 --> 00:14:28,800
check spells your code

357
00:14:28,800 --> 00:14:30,899
um to every pull request submitted to

358
00:14:30,899 --> 00:14:32,639
your code repository

359
00:14:32,639 --> 00:14:34,380
um the check spelling action would check

360
00:14:34,380 --> 00:14:37,740
it and verify that you don't have any uh

361
00:14:37,740 --> 00:14:40,639
spelling errors

362
00:14:40,740 --> 00:14:42,540
and this is actually the concept of

363
00:14:42,540 --> 00:14:45,600
actions right so the idea is you take

364
00:14:45,600 --> 00:14:48,060
someone else's code rapid in an action

365
00:14:48,060 --> 00:14:49,740
um it's open source and then you use it

366
00:14:49,740 --> 00:14:52,440
in your CI Pipeline and it's easy to

367
00:14:52,440 --> 00:14:55,440
install them just as it as it is easy to

368
00:14:55,440 --> 00:14:56,579
install applications from the

369
00:14:56,579 --> 00:14:58,680
marketplace so we see here github's

370
00:14:58,680 --> 00:15:00,600
Marketplace for actions

371
00:15:00,600 --> 00:15:02,519
um where you can you can download and

372
00:15:02,519 --> 00:15:04,620
use the check spinning action

373
00:15:04,620 --> 00:15:06,600
um and the thing is that it's no longer

374
00:15:06,600 --> 00:15:08,399
just the application that has the

375
00:15:08,399 --> 00:15:10,260
dependency right

376
00:15:10,260 --> 00:15:13,440
um if it used to be my node model folder

377
00:15:13,440 --> 00:15:14,940
which contains my application dependency

378
00:15:14,940 --> 00:15:18,180
now my CI pipeline itself also got

379
00:15:18,180 --> 00:15:20,880
independencies so my pipeline dependency

380
00:15:20,880 --> 00:15:22,320
um and if you recall the definition of

381
00:15:22,320 --> 00:15:23,760
the software supply chain so anything

382
00:15:23,760 --> 00:15:25,920
affecting my source code from the moment

383
00:15:25,920 --> 00:15:27,899
of commit up until the moment of deploy

384
00:15:27,899 --> 00:15:29,940
uh well those pipeline dependency

385
00:15:29,940 --> 00:15:32,820
definitely do affect my source code

386
00:15:32,820 --> 00:15:35,519
so let's see what happened there

387
00:15:35,519 --> 00:15:38,760
um so check spelling action as we said

388
00:15:38,760 --> 00:15:42,300
um and the problem was with its workflow

389
00:15:42,300 --> 00:15:45,540
so workflow is github's CI

390
00:15:45,540 --> 00:15:47,160
um and it's a yaml file with a set of

391
00:15:47,160 --> 00:15:49,019
instructions on what to do on my source

392
00:15:49,019 --> 00:15:50,760
code now we can see the screenshot from

393
00:15:50,760 --> 00:15:53,820
the documentation uh just copy the spell

394
00:15:53,820 --> 00:15:56,040
check dot githubdirectory into your

395
00:15:56,040 --> 00:15:57,959
project and then you would enjoy the

396
00:15:57,959 --> 00:15:59,220
workflow

397
00:15:59,220 --> 00:16:01,320
um unfortunately this workflow was very

398
00:16:01,320 --> 00:16:03,959
properly configured so it's it opened up

399
00:16:03,959 --> 00:16:08,880
any code repository into the attack uh

400
00:16:08,880 --> 00:16:10,680
essentially it allowed the attackers to

401
00:16:10,680 --> 00:16:13,139
gain right access to the repository so

402
00:16:13,139 --> 00:16:14,399
again right access to your code

403
00:16:14,399 --> 00:16:16,860
repository means someone else that you

404
00:16:16,860 --> 00:16:19,500
didn't Grant access can write code to

405
00:16:19,500 --> 00:16:22,279
your private project

406
00:16:22,920 --> 00:16:25,500
so how exactly did this happen uh so we

407
00:16:25,500 --> 00:16:27,060
can see here the impact definition of

408
00:16:27,060 --> 00:16:28,320
the event

409
00:16:28,320 --> 00:16:30,060
um so the repository explaining action

410
00:16:30,060 --> 00:16:32,579
enable the trigger the trigger name was

411
00:16:32,579 --> 00:16:34,380
on Polar Quest Target so some of you

412
00:16:34,380 --> 00:16:36,000
might be familiar with the name some of

413
00:16:36,000 --> 00:16:38,220
you uh might not be um the pull request

414
00:16:38,220 --> 00:16:40,500
Target event is the name of an event

415
00:16:40,500 --> 00:16:43,139
that GitHub let you choose as the

416
00:16:43,139 --> 00:16:45,600
triggering event of your pipeline of

417
00:16:45,600 --> 00:16:46,920
your workflow

418
00:16:46,920 --> 00:16:49,680
um now it is annoyingly similar to the

419
00:16:49,680 --> 00:16:52,019
other trigger pull request uh without

420
00:16:52,019 --> 00:16:54,120
the target but the idea is that the

421
00:16:54,120 --> 00:16:56,279
pulley was Target event uh is the

422
00:16:56,279 --> 00:16:58,320
trigger that was actually allowing the

423
00:16:58,320 --> 00:16:59,519
attacker

424
00:16:59,519 --> 00:17:02,100
um to send a pull request against your

425
00:17:02,100 --> 00:17:06,059
repository and easily extract your

426
00:17:06,059 --> 00:17:08,819
GitHub access token which has right

427
00:17:08,819 --> 00:17:11,640
access as we'll see in a second and with

428
00:17:11,640 --> 00:17:13,980
it just make an easy API call to change

429
00:17:13,980 --> 00:17:16,640
your source code

430
00:17:16,980 --> 00:17:19,199
so this is the example of the workflow

431
00:17:19,199 --> 00:17:21,240
this is how it looks like so we can see

432
00:17:21,240 --> 00:17:22,740
on the top of the screen we can see the

433
00:17:22,740 --> 00:17:24,959
political Target this is the event

434
00:17:24,959 --> 00:17:27,299
um and the danger the dangerous thing to

435
00:17:27,299 --> 00:17:29,220
do is to combine the pull request Target

436
00:17:29,220 --> 00:17:32,640
uh event together with the checkout of

437
00:17:32,640 --> 00:17:34,740
the specific pull request now the reason

438
00:17:34,740 --> 00:17:36,120
this is dangerous

439
00:17:36,120 --> 00:17:39,539
um is because GitHub CI Runners are

440
00:17:39,539 --> 00:17:42,600
those uh small utils that take your

441
00:17:42,600 --> 00:17:44,340
source code and build it

442
00:17:44,340 --> 00:17:47,400
um they let this pull request run in the

443
00:17:47,400 --> 00:17:49,140
context of your private environment

444
00:17:49,140 --> 00:17:50,760
because you're using the pull request

445
00:17:50,760 --> 00:17:52,559
Target event and you're checking out the

446
00:17:52,559 --> 00:17:55,080
same pull request anything written in

447
00:17:55,080 --> 00:17:57,240
the workflow of this pull request would

448
00:17:57,240 --> 00:17:59,820
be run on your private environment this

449
00:17:59,820 --> 00:18:03,299
means the context it will be used

450
00:18:03,299 --> 00:18:05,580
um is with your own GitHub access token

451
00:18:05,580 --> 00:18:07,799
each one of those Runners is issued a

452
00:18:07,799 --> 00:18:10,140
GitHub access token and if I gain access

453
00:18:10,140 --> 00:18:12,419
to it then I can do whatever I want with

454
00:18:12,419 --> 00:18:13,980
the source store

455
00:18:13,980 --> 00:18:16,740
so some walk around to that uh so

456
00:18:16,740 --> 00:18:18,299
obviously a walk along would be to

457
00:18:18,299 --> 00:18:20,400
disable the workflow uh I guess this is

458
00:18:20,400 --> 00:18:22,020
not really solving the problem but

459
00:18:22,020 --> 00:18:23,940
rather ignoring it

460
00:18:23,940 --> 00:18:26,700
um and then we had this instruction to

461
00:18:26,700 --> 00:18:29,820
allow actions only created by Gita so

462
00:18:29,820 --> 00:18:31,380
this got me thinking

463
00:18:31,380 --> 00:18:33,660
um what's the what's the different level

464
00:18:33,660 --> 00:18:35,700
of allowance that we have right because

465
00:18:35,700 --> 00:18:38,039
if this is the recommendation then uh

466
00:18:38,039 --> 00:18:39,480
what happens when I create a new

467
00:18:39,480 --> 00:18:41,820
repository from sketch so that's what I

468
00:18:41,820 --> 00:18:44,220
did I created a new project

469
00:18:44,220 --> 00:18:46,080
um and you can see here that the

470
00:18:46,080 --> 00:18:49,020
workflow my project CI

471
00:18:49,020 --> 00:18:50,940
um actually has read and write

472
00:18:50,940 --> 00:18:53,880
permissions uh this means when you can

473
00:18:53,880 --> 00:18:55,679
see in the subtitle the GitHub access

474
00:18:55,679 --> 00:18:58,500
token that allows my CI Runners to do

475
00:18:58,500 --> 00:19:01,140
actions on my source code

476
00:19:01,140 --> 00:19:03,840
um is by default granted read and write

477
00:19:03,840 --> 00:19:05,460
access

478
00:19:05,460 --> 00:19:06,840
um and you can obviously go here and

479
00:19:06,840 --> 00:19:08,400
check for yourself

480
00:19:08,400 --> 00:19:09,960
um but not only that the actions

481
00:19:09,960 --> 00:19:13,020
themselves that I choose to install

482
00:19:13,020 --> 00:19:16,620
um are also by allowance are just kind

483
00:19:16,620 --> 00:19:19,080
of very including so all of them uh

484
00:19:19,080 --> 00:19:21,000
anyone that releases an action to

485
00:19:21,000 --> 00:19:23,100
github's Marketplace

486
00:19:23,100 --> 00:19:25,679
um can I I can actually install it and

487
00:19:25,679 --> 00:19:27,960
run it as part of my CI as opposed to

488
00:19:27,960 --> 00:19:30,780
only ones verified by Gita for example

489
00:19:30,780 --> 00:19:34,679
only one verified by my organization

490
00:19:34,679 --> 00:19:37,500
so the solution of that would actually

491
00:19:37,500 --> 00:19:40,880
be to just upgrade to the later version

492
00:19:40,880 --> 00:19:44,360
which already did not include the the

493
00:19:44,360 --> 00:19:46,559
misconfigured workflow

494
00:19:46,559 --> 00:19:48,900
um however there's a catch so the idea

495
00:19:48,900 --> 00:19:50,580
is that if you're an open source

496
00:19:50,580 --> 00:19:51,780
maintainer and you have a public

497
00:19:51,780 --> 00:19:53,280
repository with the check spending

498
00:19:53,280 --> 00:19:55,740
action then it's not enough to update

499
00:19:55,740 --> 00:19:57,600
the checks for in action on your main

500
00:19:57,600 --> 00:20:00,120
branch you would have to go to audio

501
00:20:00,120 --> 00:20:02,280
mentions throughout all the history and

502
00:20:02,280 --> 00:20:04,740
make sure that none of them contain a

503
00:20:04,740 --> 00:20:06,900
copy of the misconfigured workflow

504
00:20:06,900 --> 00:20:09,179
because an attacker can open up a pull

505
00:20:09,179 --> 00:20:10,860
request against one of those branches

506
00:20:10,860 --> 00:20:13,140
and gain the same level of access to

507
00:20:13,140 --> 00:20:15,059
your repository so a solution with the

508
00:20:15,059 --> 00:20:19,820
catch uh not a fun situation to be in

509
00:20:21,320 --> 00:20:25,320
great so another even attack number two

510
00:20:25,320 --> 00:20:27,059
um and then we'll hand it over to you

511
00:20:27,059 --> 00:20:29,100
more

512
00:20:29,100 --> 00:20:31,320
so another action to continue in the

513
00:20:31,320 --> 00:20:33,600
sequence but on a whole other angle of

514
00:20:33,600 --> 00:20:34,500
attack

515
00:20:34,500 --> 00:20:37,559
um would be the instance of code so we

516
00:20:37,559 --> 00:20:39,840
mentioned it briefly very earlier uh we

517
00:20:39,840 --> 00:20:41,820
can see here the lines which I would use

518
00:20:41,820 --> 00:20:45,720
as as a developer as a devops engineer

519
00:20:45,720 --> 00:20:49,500
to upload my test coverage to quadcom's

520
00:20:49,500 --> 00:20:50,880
platform

521
00:20:50,880 --> 00:20:52,740
so what happened there

522
00:20:52,740 --> 00:20:55,500
um so codco is a very popular test

523
00:20:55,500 --> 00:20:58,020
coverage solution and you can see here

524
00:20:58,020 --> 00:20:59,760
how it looks like

525
00:20:59,760 --> 00:21:02,100
um you use it as part of LCI mostly uh

526
00:21:02,100 --> 00:21:03,720
you can either either use the GitHub

527
00:21:03,720 --> 00:21:05,960
action wrapping it or you can just

528
00:21:05,960 --> 00:21:08,400
directly download

529
00:21:08,400 --> 00:21:11,160
um the code of the automation script and

530
00:21:11,160 --> 00:21:14,160
it was hacked it was pretty bad

531
00:21:14,160 --> 00:21:16,559
um and essentially it affected all CI

532
00:21:16,559 --> 00:21:19,700
pipelines using it

533
00:21:20,460 --> 00:21:22,740
so what exactly happened there

534
00:21:22,740 --> 00:21:25,440
um so an Integra was able to modify one

535
00:21:25,440 --> 00:21:27,660
of code Codes automation scripts so

536
00:21:27,660 --> 00:21:29,940
changing the source code

537
00:21:29,940 --> 00:21:31,860
um the reason for it is unknown it has

538
00:21:31,860 --> 00:21:34,080
yet to be publicly exposed

539
00:21:34,080 --> 00:21:36,179
um but it has come to the to our

540
00:21:36,179 --> 00:21:38,580
attention that it was due to gaining

541
00:21:38,580 --> 00:21:41,520
access to kotzkov's private Google Cloud

542
00:21:41,520 --> 00:21:42,960
Storage

543
00:21:42,960 --> 00:21:45,840
um with an access token the access token

544
00:21:45,840 --> 00:21:48,539
was leaked to a build process of a

545
00:21:48,539 --> 00:21:50,640
container image and now this is the

546
00:21:50,640 --> 00:21:52,799
topic all on its own but what I've

547
00:21:52,799 --> 00:21:55,080
learned from researching the topic

548
00:21:55,080 --> 00:21:57,059
um is that it it is an extremely easy

549
00:21:57,059 --> 00:22:00,299
easy thing to do to leak sensitive data

550
00:22:00,299 --> 00:22:02,820
when you're building local containers as

551
00:22:02,820 --> 00:22:05,159
an engineer I was surprised I was very

552
00:22:05,159 --> 00:22:07,500
surprised to learn how easy it was

553
00:22:07,500 --> 00:22:08,880
um you can see here even the docker

554
00:22:08,880 --> 00:22:11,520
history command might be revealing for

555
00:22:11,520 --> 00:22:14,640
you so gaining the access token allowed

556
00:22:14,640 --> 00:22:16,080
the attacker to change the source code

557
00:22:16,080 --> 00:22:18,900
this is how the code itself look like

558
00:22:18,900 --> 00:22:21,500
it's small utility uh nothing special

559
00:22:21,500 --> 00:22:24,659
and this is the single line of code that

560
00:22:24,659 --> 00:22:28,080
was added by the attacker so those of

561
00:22:28,080 --> 00:22:30,539
you who might be coders would definitely

562
00:22:30,539 --> 00:22:32,220
be able to figure out what it does it's

563
00:22:32,220 --> 00:22:33,960
a very simple line

564
00:22:33,960 --> 00:22:35,700
um so it prints out the environment

565
00:22:35,700 --> 00:22:38,159
variable uh which I currently have

566
00:22:38,159 --> 00:22:40,620
access to and sends them out back home

567
00:22:40,620 --> 00:22:43,320
to a remote server and since this is

568
00:22:43,320 --> 00:22:45,480
something running as part of my CI

569
00:22:45,480 --> 00:22:48,900
environment then by definition uh I have

570
00:22:48,900 --> 00:22:52,080
a lot of sensitive environment variables

571
00:22:52,080 --> 00:22:55,860
there so essentially I've exposed access

572
00:22:55,860 --> 00:22:59,240
tokens user credentials API Keys whatnot

573
00:22:59,240 --> 00:23:04,080
write to the attackers server

574
00:23:04,080 --> 00:23:06,659
now the results of the hack was were

575
00:23:06,659 --> 00:23:10,020
pretty massive so um you can see some uh

576
00:23:10,020 --> 00:23:12,360
some companies here large companies who

577
00:23:12,360 --> 00:23:14,340
publicly acknowledge they were indeed

578
00:23:14,340 --> 00:23:16,500
affected by the hack

579
00:23:16,500 --> 00:23:18,539
um but not only private companies so

580
00:23:18,539 --> 00:23:21,780
open source projects a lot of them uh

581
00:23:21,780 --> 00:23:24,240
relied on kodkoff some of them very

582
00:23:24,240 --> 00:23:25,919
popular so we can see here algo City

583
00:23:25,919 --> 00:23:29,220
kubernetes antivirus those were all

584
00:23:29,220 --> 00:23:32,220
projects using quadcom as part of the CI

585
00:23:32,220 --> 00:23:34,500
and potentially with a sensitive data

586
00:23:34,500 --> 00:23:37,760
leaked right out of it

587
00:23:38,340 --> 00:23:40,799
in the time of the attack if you you

588
00:23:40,799 --> 00:23:43,020
would have gone to GitHub

589
00:23:43,020 --> 00:23:45,299
um and search for the lines uh then you

590
00:23:45,299 --> 00:23:48,020
would see roughly around 400 000 results

591
00:23:48,020 --> 00:23:51,360
across code bases the course files uh

592
00:23:51,360 --> 00:23:54,000
which just goes to show how popular the

593
00:23:54,000 --> 00:23:57,080
usage of it was

594
00:23:58,140 --> 00:24:01,260
okay and now Mo would take us to anatomy

595
00:24:01,260 --> 00:24:03,720
of the third attack

596
00:24:03,720 --> 00:24:08,000
amazing the second I will take a control

597
00:24:09,179 --> 00:24:12,179
foreign

598
00:24:20,340 --> 00:24:24,780
yes amazing so uh Elan just show us an

599
00:24:24,780 --> 00:24:26,820
interesting technique documents used to

600
00:24:26,820 --> 00:24:29,159
bridge his social supply chain but one

601
00:24:29,159 --> 00:24:30,900
might think that only sophisticated

602
00:24:30,900 --> 00:24:33,179
orientation State attackers are able to

603
00:24:33,179 --> 00:24:35,159
perform software supply chain attacks

604
00:24:35,159 --> 00:24:37,440
and this is really not the case here in

605
00:24:37,440 --> 00:24:39,480
the last year we saw an increase in

606
00:24:39,480 --> 00:24:42,120
cases of bed actors that has a great

607
00:24:42,120 --> 00:24:44,880
passion for crypto mining by abusing

608
00:24:44,880 --> 00:24:48,120
cicd compute power so what they do they

609
00:24:48,120 --> 00:24:50,120
basically focus on finding vulnerable

610
00:24:50,120 --> 00:24:52,980
platforms like in the KC lamp shows or

611
00:24:52,980 --> 00:24:55,679
they basically look for the free deal of

612
00:24:55,679 --> 00:24:58,440
those platform like GitHub action or

613
00:24:58,440 --> 00:25:01,620
gitlab so let's see how it actually

614
00:25:01,620 --> 00:25:03,960
looks like when your platform been

615
00:25:03,960 --> 00:25:05,520
abused

616
00:25:05,520 --> 00:25:07,200
um so here we can see a GitHub action

617
00:25:07,200 --> 00:25:10,200
statistic history the chose an attacker

618
00:25:10,200 --> 00:25:13,620
that run multiple multiple build steps

619
00:25:13,620 --> 00:25:16,620
in parallel within just a single plan

620
00:25:16,620 --> 00:25:19,679
each jobs here runs for six hours which

621
00:25:19,679 --> 00:25:22,380
is the maximum runtime allowed and a

622
00:25:22,380 --> 00:25:24,779
closer look at the pipeline declaration

623
00:25:24,779 --> 00:25:28,140
reveal the actual instructions behind it

624
00:25:28,140 --> 00:25:30,659
so what we could see here we could see

625
00:25:30,659 --> 00:25:32,700
here a few optimization settings like

626
00:25:32,700 --> 00:25:35,220
limit the parallelism up to the tier

627
00:25:35,220 --> 00:25:38,460
limit and ignoring sales so one job will

628
00:25:38,460 --> 00:25:40,679
not affect the other

629
00:25:40,679 --> 00:25:43,260
um the interesting part here is the

630
00:25:43,260 --> 00:25:45,179
attacker chooses to run his mining

631
00:25:45,179 --> 00:25:48,720
process on Windows image but with WSL

632
00:25:48,720 --> 00:25:50,760
bash which is basically the windows

633
00:25:50,760 --> 00:25:53,100
subsystem for Linux so that you could

634
00:25:53,100 --> 00:25:55,320
run his best scripts and yell of

635
00:25:55,320 --> 00:25:58,620
binaries which is first glance it look a

636
00:25:58,620 --> 00:26:01,380
bit weird right as you can just run is a

637
00:26:01,380 --> 00:26:04,020
workload on a Linux image but the actual

638
00:26:04,020 --> 00:26:06,720
intent of this actor is to create

639
00:26:06,720 --> 00:26:09,240
another sandboxing layer in case there

640
00:26:09,240 --> 00:26:11,600
is some auditing of the system activity

641
00:26:11,600 --> 00:26:14,760
you just want to add an invasion layer

642
00:26:14,760 --> 00:26:18,419
from Marvel scanners lastly we can see

643
00:26:18,419 --> 00:26:20,640
that tackle store is a minor under a

644
00:26:20,640 --> 00:26:22,559
guitar domain then this is another

645
00:26:22,559 --> 00:26:24,480
Invasion layer the attackers had in

646
00:26:24,480 --> 00:26:27,659
order to keep his mining activity under

647
00:26:27,659 --> 00:26:31,140
the down in case of a network auditing

648
00:26:31,140 --> 00:26:33,360
but you can argue one of the actual

649
00:26:33,360 --> 00:26:36,059
risks when attacking abuse my cicd as

650
00:26:36,059 --> 00:26:37,980
the mining farm right it doesn't really

651
00:26:37,980 --> 00:26:41,159
scale or wipe my stock right

652
00:26:41,159 --> 00:26:43,640
um so there are three major risks here

653
00:26:43,640 --> 00:26:47,279
first is the financial Financial loss

654
00:26:47,279 --> 00:26:49,980
either you run on a SAS platform of a

655
00:26:49,980 --> 00:26:51,659
self-hosted you pay for the compute

656
00:26:51,659 --> 00:26:55,440
power it could be a runtime token in

657
00:26:55,440 --> 00:26:58,799
case of SAS or a monthly rent for a

658
00:26:58,799 --> 00:27:00,960
self-hosted

659
00:27:00,960 --> 00:27:03,480
um the second risk here is the line of

660
00:27:03,480 --> 00:27:06,539
service are busy with crypto mining

661
00:27:06,539 --> 00:27:08,059
right and

662
00:27:08,059 --> 00:27:11,100
I just saw a minor drain your compute

663
00:27:11,100 --> 00:27:13,320
power up to the Limit and this

664
00:27:13,320 --> 00:27:15,120
definitely would lead to denial of

665
00:27:15,120 --> 00:27:17,159
service of your software development

666
00:27:17,159 --> 00:27:18,900
life cycle

667
00:27:18,900 --> 00:27:21,360
um and the third one is the most

668
00:27:21,360 --> 00:27:24,779
important in in terms of risk and once

669
00:27:24,779 --> 00:27:27,240
the attacker has foretold in your SDI CD

670
00:27:27,240 --> 00:27:29,279
he can lick your code or even worse

671
00:27:29,279 --> 00:27:31,799
still secret that could lead to

672
00:27:31,799 --> 00:27:33,720
compromise of your entire Cloud

673
00:27:33,720 --> 00:27:35,419
environment

674
00:27:35,419 --> 00:27:38,100
uh here is an open source catalog of

675
00:27:38,100 --> 00:27:41,220
every known supply chain compromises so

676
00:27:41,220 --> 00:27:43,140
we can really see here that supply chain

677
00:27:43,140 --> 00:27:45,600
attacks are just evolving and starting

678
00:27:45,600 --> 00:27:48,480
to happen really often

679
00:27:48,480 --> 00:27:49,440
um

680
00:27:49,440 --> 00:27:52,620
so what we can do so as you see there

681
00:27:52,620 --> 00:27:55,080
are multiple areas and risks when we

682
00:27:55,080 --> 00:27:56,880
look on the software supply chain

683
00:27:56,880 --> 00:27:59,520
landscape so one can try to audit and

684
00:27:59,520 --> 00:28:01,380
mitigate it at a specific risk like

685
00:28:01,380 --> 00:28:03,659
scanning your way artifactory images or

686
00:28:03,659 --> 00:28:05,039
sending your dependencies for

687
00:28:05,039 --> 00:28:07,919
vulnerabilities in your source code or

688
00:28:07,919 --> 00:28:10,760
even try to stick your user permissions

689
00:28:10,760 --> 00:28:13,380
which is extremely extremely important

690
00:28:13,380 --> 00:28:16,020
but as you saw the blanket is too short

691
00:28:16,020 --> 00:28:18,299
in this case it will not provide a

692
00:28:18,299 --> 00:28:20,159
really end-to-end visibility of your

693
00:28:20,159 --> 00:28:22,860
security posture there are too many

694
00:28:22,860 --> 00:28:26,520
multiple areas with multiple risk

695
00:28:26,520 --> 00:28:28,799
um and as you know attackers just need

696
00:28:28,799 --> 00:28:31,860
to find the weak link of the change to

697
00:28:31,860 --> 00:28:34,799
enter your software supply chain

698
00:28:34,799 --> 00:28:37,919
um so again what we could do about it

699
00:28:37,919 --> 00:28:39,960
um so this is why we're partnering right

700
00:28:39,960 --> 00:28:42,120
now with the CIS to create a new

701
00:28:42,120 --> 00:28:44,760
Benchmark that looks on every risk from

702
00:28:44,760 --> 00:28:46,980
code to deploy

703
00:28:46,980 --> 00:28:49,020
um and about CIS there's actually a

704
00:28:49,020 --> 00:28:51,360
global community of cyber security

705
00:28:51,360 --> 00:28:54,480
expert uh which developed Benchmark for

706
00:28:54,480 --> 00:28:56,900
more than 100 configuration guidelines

707
00:28:56,900 --> 00:28:59,700
across different vendor and those are

708
00:28:59,700 --> 00:29:02,159
greatly adopted by organization as part

709
00:29:02,159 --> 00:29:05,039
of the I.T auditing process

710
00:29:05,039 --> 00:29:07,080
um so we actually took album deep

711
00:29:07,080 --> 00:29:08,940
knowledge in software supply chain risk

712
00:29:08,940 --> 00:29:12,000
and experience and problems with the CIS

713
00:29:12,000 --> 00:29:13,100
Community

714
00:29:13,100 --> 00:29:17,240
to create a new benchmark

715
00:29:17,279 --> 00:29:18,020
um

716
00:29:18,020 --> 00:29:22,039
so this Benchmark have more than 100

717
00:29:22,039 --> 00:29:25,200
guided guidance and best practices and

718
00:29:25,200 --> 00:29:27,539
they'll sleep into a different control

719
00:29:27,539 --> 00:29:30,120
and sub control which provide practical

720
00:29:30,120 --> 00:29:33,360
down to earth guidance on every single

721
00:29:33,360 --> 00:29:36,539
risk that allows you to to tackle down

722
00:29:36,539 --> 00:29:39,960
every risk and separate but also provide

723
00:29:39,960 --> 00:29:42,960
you overall security uh posture of your

724
00:29:42,960 --> 00:29:45,240
software supply chain

725
00:29:45,240 --> 00:29:49,200
um so the actual CIS Benchmark is going

726
00:29:49,200 --> 00:29:51,419
to be released in two weeks sells as a

727
00:29:51,419 --> 00:29:53,580
white pattern so I invite you all to

728
00:29:53,580 --> 00:29:55,559
look and provide your feedback and

729
00:29:55,559 --> 00:29:58,559
contribution

730
00:29:58,860 --> 00:30:02,399
um but in meantime we can have a big a

731
00:30:02,399 --> 00:30:06,720
field in aqua avd which is a stencil

732
00:30:06,720 --> 00:30:09,120
Aqua vulnerability database

733
00:30:09,120 --> 00:30:10,919
it contains vulnerabilities

734
00:30:10,919 --> 00:30:13,559
misconfiguration and also a compliance

735
00:30:13,559 --> 00:30:16,639
so let's have a look

736
00:30:18,720 --> 00:30:19,860
um

737
00:30:19,860 --> 00:30:23,580
so can you see my screen right

738
00:30:23,580 --> 00:30:26,460
all right so this is totally free and

739
00:30:26,460 --> 00:30:28,740
open source and it's always keeping up

740
00:30:28,740 --> 00:30:33,600
to date we can find here database of the

741
00:30:33,600 --> 00:30:36,299
latest vulnerabilities

742
00:30:36,299 --> 00:30:39,720
right this is just one example we can

743
00:30:39,720 --> 00:30:41,840
also find here a cloud IAC

744
00:30:41,840 --> 00:30:46,020
misconfiguration of all the known Cloud

745
00:30:46,020 --> 00:30:50,820
platform and also a compliance category

746
00:30:50,820 --> 00:30:55,440
this is where we add a new CIS for a

747
00:30:55,440 --> 00:30:58,200
software supply chain it's crucial to

748
00:30:58,200 --> 00:31:00,659
mention that we finish adding just 20

749
00:31:00,659 --> 00:31:03,659
percent of the entire control so you can

750
00:31:03,659 --> 00:31:06,779
see here right now only partial list

751
00:31:06,779 --> 00:31:08,940
um so here's the the first version

752
00:31:08,940 --> 00:31:11,100
so we actually have five categories

753
00:31:11,100 --> 00:31:13,740
source code build dependency artifacts

754
00:31:13,740 --> 00:31:17,159
and deployments and every one of them

755
00:31:17,159 --> 00:31:20,700
contain the sub control so quick quickly

756
00:31:20,700 --> 00:31:22,679
review some of those

757
00:31:22,679 --> 00:31:24,840
um so so good is all around managing

758
00:31:24,840 --> 00:31:27,659
your sales on uh contribution access for

759
00:31:27,659 --> 00:31:29,460
example is where you verify the members

760
00:31:29,460 --> 00:31:31,980
access aspect

761
00:31:31,980 --> 00:31:34,320
um this one for example insure all

762
00:31:34,320 --> 00:31:37,380
members enforce NFA multi-factor

763
00:31:37,380 --> 00:31:40,200
authentication even if it seems basic we

764
00:31:40,200 --> 00:31:42,240
keep seeing it happen all the time

765
00:31:42,240 --> 00:31:43,679
organization and members are not

766
00:31:43,679 --> 00:31:45,059
applying multi-factor authentication

767
00:31:45,059 --> 00:31:47,820
which puts their identities and their

768
00:31:47,820 --> 00:31:50,220
organization at risk

769
00:31:50,220 --> 00:31:53,520
um another one is

770
00:31:53,520 --> 00:31:57,600
um strict uh uh strictly a minimal based

771
00:31:57,600 --> 00:32:00,559
permission has happened with Mercedes

772
00:32:00,559 --> 00:32:03,480
case that allows free sign up for the

773
00:32:03,480 --> 00:32:06,840
gitlab server with a permissive based

774
00:32:06,840 --> 00:32:10,020
television which end up with Source

775
00:32:10,020 --> 00:32:12,779
called leakage uh let's jump for another

776
00:32:12,779 --> 00:32:15,720
category

777
00:32:15,720 --> 00:32:16,559
um

778
00:32:16,559 --> 00:32:20,159
build one uh so here we have two

779
00:32:20,159 --> 00:32:22,380
different sub control build instruction

780
00:32:22,380 --> 00:32:25,679
and pipeline Integrity

781
00:32:25,679 --> 00:32:27,380
um

782
00:32:27,380 --> 00:32:30,720
so let's see

783
00:32:30,720 --> 00:32:33,240
let's see um Bible instruction for

784
00:32:33,240 --> 00:32:35,159
example

785
00:32:35,159 --> 00:32:38,220
um this one makes you you are

786
00:32:38,220 --> 00:32:40,340
automatically scan your

787
00:32:40,340 --> 00:32:44,399
pipelines for vulnerabilities

788
00:32:44,399 --> 00:32:46,980
um and uh

789
00:32:46,980 --> 00:32:49,380
and this one ensure that you put your uh

790
00:32:49,380 --> 00:32:52,020
you put in place a sensitive data

791
00:32:52,020 --> 00:32:54,539
scanners so for example Secrets this

792
00:32:54,539 --> 00:32:56,760
will make sure no plane attack Secrets

793
00:32:56,760 --> 00:33:01,140
will get into your source code and

794
00:33:01,620 --> 00:33:05,100
um another sub control is pipeline

795
00:33:05,100 --> 00:33:07,500
Integrity which is a very hot topic

796
00:33:07,500 --> 00:33:09,179
these days

797
00:33:09,179 --> 00:33:11,880
um we have here which is just a partial

798
00:33:11,880 --> 00:33:12,720
list

799
00:33:12,720 --> 00:33:15,659
um blocked the dependencies which is

800
00:33:15,659 --> 00:33:17,880
very crucial to prevent future risk of

801
00:33:17,880 --> 00:33:20,100
attacker that compromise the

802
00:33:20,100 --> 00:33:22,559
dependencies and inject a malicious code

803
00:33:22,559 --> 00:33:25,440
or even put your twist with a vulnerable

804
00:33:25,440 --> 00:33:29,279
version as happen with spell check

805
00:33:29,279 --> 00:33:32,039
um s-bomb stands for a software bill of

806
00:33:32,039 --> 00:33:33,840
material which is um

807
00:33:33,840 --> 00:33:36,960
a very popular topic these days and it

808
00:33:36,960 --> 00:33:39,360
basically means that generating a s-bomb

809
00:33:39,360 --> 00:33:41,220
will make sure to sign the artifacts

810
00:33:41,220 --> 00:33:43,320
when they were made and how they were

811
00:33:43,320 --> 00:33:46,980
made this will allow you to verify down

812
00:33:46,980 --> 00:33:49,799
the road before the deployment that it

813
00:33:49,799 --> 00:33:51,720
didn't change since then and we are

814
00:33:51,720 --> 00:33:55,200
approved that all the ingredients are

815
00:33:55,200 --> 00:33:56,880
verified

816
00:33:56,880 --> 00:33:59,460
um last control that I will show you is

817
00:33:59,460 --> 00:34:01,980
around the auto Factory

818
00:34:01,980 --> 00:34:04,440
which basically focused on the uploaded

819
00:34:04,440 --> 00:34:07,320
assets from your build system package

820
00:34:07,320 --> 00:34:10,339
registry and

821
00:34:10,679 --> 00:34:13,139
um we will cover you

822
00:34:13,139 --> 00:34:16,320
um for example this one control

823
00:34:16,320 --> 00:34:19,080
is also responsible to make sure that

824
00:34:19,080 --> 00:34:20,820
private artifacts are not up into

825
00:34:20,820 --> 00:34:23,040
anonymous say access

826
00:34:23,040 --> 00:34:25,619
um the risk is pretty obvious Asylum

827
00:34:25,619 --> 00:34:28,739
shows with codegov case uh that private

828
00:34:28,739 --> 00:34:31,619
Docker image that was publicly accessed

829
00:34:31,619 --> 00:34:33,300
revealed the secret in the docker

830
00:34:33,300 --> 00:34:35,580
history it wouldn't happen if the assets

831
00:34:35,580 --> 00:34:38,639
wasn't allowed Anonymous access

832
00:34:38,639 --> 00:34:42,000
uh okay so we saw a few examples for

833
00:34:42,000 --> 00:34:44,460
those controls and checks

834
00:34:44,460 --> 00:34:48,440
um let's get back to the deck

835
00:34:58,800 --> 00:35:01,260
okay do you see full screen because I

836
00:35:01,260 --> 00:35:03,500
don't

837
00:35:06,060 --> 00:35:08,400
Okay so

838
00:35:08,400 --> 00:35:11,220
so now what so we said that the scope of

839
00:35:11,220 --> 00:35:13,800
this quiz is pretty wide and there is

840
00:35:13,800 --> 00:35:16,320
more than 100 guidance to assess on

841
00:35:16,320 --> 00:35:17,820
different control

842
00:35:17,820 --> 00:35:19,800
so if it makes sense to let the

843
00:35:19,800 --> 00:35:21,660
organization validate those checks by

844
00:35:21,660 --> 00:35:24,000
their own is it going to be yet another

845
00:35:24,000 --> 00:35:26,280
long list software supply chain

846
00:35:26,280 --> 00:35:27,500
guideline

847
00:35:27,500 --> 00:35:30,960
so at organ we love to to ask how can we

848
00:35:30,960 --> 00:35:33,839
out there is the pain

849
00:35:33,839 --> 00:35:35,700
um so I'm happy to share that we are

850
00:35:35,700 --> 00:35:38,220
working these days on a new open source

851
00:35:38,220 --> 00:35:40,859
project called chain bench

852
00:35:40,859 --> 00:35:43,560
chain bench with automate those checks

853
00:35:43,560 --> 00:35:46,320
and provide the first open source free

854
00:35:46,320 --> 00:35:48,420
to use CLI that scans your entire

855
00:35:48,420 --> 00:35:50,940
software supply chain stack and can show

856
00:35:50,940 --> 00:35:53,460
you end-to-end visibility to your risk

857
00:35:53,460 --> 00:35:56,180
pretty fast

858
00:35:56,280 --> 00:35:58,320
um so before explaining further about

859
00:35:58,320 --> 00:36:02,780
chain bench let's start with a demo

860
00:36:03,000 --> 00:36:06,800
the second I will show my

861
00:36:07,859 --> 00:36:11,420
uh another

862
00:36:12,119 --> 00:36:15,619
browser just a second

863
00:36:22,980 --> 00:36:26,540
okay I got it

864
00:36:30,540 --> 00:36:32,339
okay so

865
00:36:32,339 --> 00:36:32,940
um

866
00:36:32,940 --> 00:36:35,460
here we have a dummy repo that was found

867
00:36:35,460 --> 00:36:37,920
from node radish which is redisclined

868
00:36:37,920 --> 00:36:40,200
implementation for node.js just as an

869
00:36:40,200 --> 00:36:41,460
example

870
00:36:41,460 --> 00:36:43,800
um as you can see this is public repo

871
00:36:43,800 --> 00:36:45,960
but you can also try a championship on

872
00:36:45,960 --> 00:36:48,480
your private trip as well

873
00:36:48,480 --> 00:36:50,660
um we have here

874
00:36:50,660 --> 00:36:55,880
23 members and we also have here a few

875
00:36:55,880 --> 00:36:59,940
pipeline under the workflow that just

876
00:36:59,940 --> 00:37:02,760
see one of them

877
00:37:02,760 --> 00:37:05,460
so we have your pipeline dependencies

878
00:37:05,460 --> 00:37:07,440
and a few steps

879
00:37:07,440 --> 00:37:08,940
right

880
00:37:08,940 --> 00:37:10,740
um

881
00:37:10,740 --> 00:37:14,280
so let's run the tool on this dummy repo

882
00:37:14,280 --> 00:37:17,099
and C which is hidden inside all right

883
00:37:17,099 --> 00:37:18,839
so

884
00:37:18,839 --> 00:37:20,760
before we're running chain bench we need

885
00:37:20,760 --> 00:37:24,060
to provide a repository URL and the

886
00:37:24,060 --> 00:37:26,520
access token for retrieving the required

887
00:37:26,520 --> 00:37:29,280
info if your repo is public some of

888
00:37:29,280 --> 00:37:31,140
those info is already available for

889
00:37:31,140 --> 00:37:33,660
everyone right

890
00:37:33,660 --> 00:37:36,680
um so let's run it

891
00:37:38,280 --> 00:37:40,320
so now we are recruiting the required

892
00:37:40,320 --> 00:37:42,200
information it will take few seconds

893
00:37:42,200 --> 00:37:47,280
meantime you can enjoy those nice emojis

894
00:37:47,280 --> 00:37:49,740
um so the output is table format each

895
00:37:49,740 --> 00:37:53,700
row is a single check the ID column is

896
00:37:53,700 --> 00:37:55,820
correlated with the CIS the

897
00:37:55,820 --> 00:37:59,040
identifications and we also have here

898
00:37:59,040 --> 00:38:02,820
the title result and the reasons with

899
00:38:02,820 --> 00:38:05,700
additional information so right now we

900
00:38:05,700 --> 00:38:09,060
have 36 checks that we have implemented

901
00:38:09,060 --> 00:38:10,800
recently

902
00:38:10,800 --> 00:38:14,300
and we could also

903
00:38:14,300 --> 00:38:18,720
use the Json format of it

904
00:38:18,720 --> 00:38:22,020
um with more information such as

905
00:38:22,020 --> 00:38:25,980
description remediation and a link to

906
00:38:25,980 --> 00:38:29,700
the avd that I presented earlier

907
00:38:29,700 --> 00:38:31,140
all right

908
00:38:31,140 --> 00:38:32,820
um so let's say we want to start

909
00:38:32,820 --> 00:38:35,160
reviewing those results and mitigate it

910
00:38:35,160 --> 00:38:37,560
there one by one right so let's have a

911
00:38:37,560 --> 00:38:40,920
closer look on a few of them and let me

912
00:38:40,920 --> 00:38:43,560
clean the mess a little bit

913
00:38:43,560 --> 00:38:45,960
all right so right now I'm running the

914
00:38:45,960 --> 00:38:50,339
same uh command just with uh filtering

915
00:38:50,339 --> 00:38:54,119
um uh arguments that that make sure I

916
00:38:54,119 --> 00:38:56,940
will see just a few of those checks

917
00:38:56,940 --> 00:38:59,400
so on

918
00:38:59,400 --> 00:39:01,980
this check we can see it about 22

919
00:39:01,980 --> 00:39:04,320
inactive users that's mean 22 accounts

920
00:39:04,320 --> 00:39:06,119
that doesn't need to have access to this

921
00:39:06,119 --> 00:39:09,119
report repository since they didn't made

922
00:39:09,119 --> 00:39:10,920
any change or contribution in the last

923
00:39:10,920 --> 00:39:12,599
three months

924
00:39:12,599 --> 00:39:13,339
um

925
00:39:13,339 --> 00:39:15,780
this one tells us there are no

926
00:39:15,780 --> 00:39:18,440
enforcement enforcement for uh

927
00:39:18,440 --> 00:39:22,380
for NFA so in case of a token leakage or

928
00:39:22,380 --> 00:39:24,960
even a chaotic level which is way too

929
00:39:24,960 --> 00:39:27,000
easy without MFA the DACA will have a

930
00:39:27,000 --> 00:39:29,760
food at your software supply chain

931
00:39:29,760 --> 00:39:31,619
um very good lick your source code level

932
00:39:31,619 --> 00:39:33,960
and stickers that you might saw in your

933
00:39:33,960 --> 00:39:35,700
source code

934
00:39:35,700 --> 00:39:38,940
um which is exactly what these checks

935
00:39:38,940 --> 00:39:40,859
looks for it makes sure we are earning

936
00:39:40,859 --> 00:39:43,320
the secret scanner

937
00:39:43,320 --> 00:39:44,400
um

938
00:39:44,400 --> 00:39:47,400
we also have this one that complains

939
00:39:47,400 --> 00:39:48,900
that the base commission is too

940
00:39:48,900 --> 00:39:50,940
permissive so every user has access to

941
00:39:50,940 --> 00:39:53,220
create new report change code and run

942
00:39:53,220 --> 00:39:54,960
pipeline which is what happens with

943
00:39:54,960 --> 00:39:56,700
another this case which allows the

944
00:39:56,700 --> 00:39:59,099
attacker to register a new user in the

945
00:39:59,099 --> 00:40:02,400
gitlab server and basically dump the all

946
00:40:02,400 --> 00:40:05,520
the private source code with just the

947
00:40:05,520 --> 00:40:06,720
base permission

948
00:40:06,720 --> 00:40:09,720
and what about dependencies risk right

949
00:40:09,720 --> 00:40:10,440
um

950
00:40:10,440 --> 00:40:12,480
how do we protect against log

951
00:40:12,480 --> 00:40:16,260
dependencies like Elon shows or even a

952
00:40:16,260 --> 00:40:18,720
vulnerable packages so we have

953
00:40:18,720 --> 00:40:22,020
this checks uh that make sure you run a

954
00:40:22,020 --> 00:40:24,000
vulnerability scanner in your pipeline

955
00:40:24,000 --> 00:40:27,900
some no vulnerabilities packages gets in

956
00:40:27,900 --> 00:40:30,119
all right so let's see how we can fix

957
00:40:30,119 --> 00:40:32,220
some of them some of those

958
00:40:32,220 --> 00:40:33,720
um

959
00:40:33,720 --> 00:40:39,119
so let's get back to the Repository

960
00:40:39,119 --> 00:40:42,119
um so uh first of all

961
00:40:42,119 --> 00:40:45,119
let's apply a multi multi-factor

962
00:40:45,119 --> 00:40:47,660
authentication for all the

963
00:40:47,660 --> 00:40:52,500
members under this organization

964
00:40:52,500 --> 00:40:53,940
okay

965
00:40:53,940 --> 00:40:55,410
so we are done

966
00:40:55,410 --> 00:40:55,800
[Music]

967
00:40:55,800 --> 00:40:57,300
um

968
00:40:57,300 --> 00:40:59,400
and let's change the base permission

969
00:40:59,400 --> 00:41:02,579
from right to read

970
00:41:02,579 --> 00:41:05,400
all right we are good with that

971
00:41:05,400 --> 00:41:08,579
and let's add a new pipeline that scans

972
00:41:08,579 --> 00:41:11,780
for a vulnerability

973
00:41:12,540 --> 00:41:15,140
um packages

974
00:41:18,359 --> 00:41:21,060
so we get into the workflow create new

975
00:41:21,060 --> 00:41:23,480
file

976
00:41:23,660 --> 00:41:28,079
and add this content

977
00:41:28,079 --> 00:41:32,119
I added here just a second

978
00:41:32,280 --> 00:41:34,320
give him a file name so basically what

979
00:41:34,320 --> 00:41:38,700
did this declaration uh means that on

980
00:41:38,700 --> 00:41:40,920
every push and full Quest

981
00:41:40,920 --> 00:41:43,859
um we will run the vulnerabilities scale

982
00:41:43,859 --> 00:41:48,140
preview which is open source

983
00:41:48,300 --> 00:41:49,380
um

984
00:41:49,380 --> 00:41:51,839
so let's uh

985
00:41:51,839 --> 00:41:54,960
get this inside the master all right so

986
00:41:54,960 --> 00:41:56,880
actually push code to master is quite

987
00:41:56,880 --> 00:42:00,359
dangerous but without the reviewers

988
00:42:00,359 --> 00:42:02,760
um this is Dentures both for breaking

989
00:42:02,760 --> 00:42:05,520
stuff and also as a security issue so

990
00:42:05,520 --> 00:42:08,460
let's add some Branch protection

991
00:42:08,460 --> 00:42:10,040
settings

992
00:42:10,040 --> 00:42:12,480
on the main branch

993
00:42:12,480 --> 00:42:15,300
which is the master

994
00:42:15,300 --> 00:42:17,420
um

995
00:42:18,240 --> 00:42:22,619
so here I required a approve of of the

996
00:42:22,619 --> 00:42:27,800
polyquest with at least two members

997
00:42:28,200 --> 00:42:31,260
all right so this will make sure every

998
00:42:31,260 --> 00:42:33,300
new change will be verified by

999
00:42:33,300 --> 00:42:35,220
additional eyes

1000
00:42:35,220 --> 00:42:37,320
um all right so I think we can run the

1001
00:42:37,320 --> 00:42:41,000
tool again

1002
00:42:52,619 --> 00:42:55,020
okay so as you see right away our

1003
00:42:55,020 --> 00:42:57,480
situation is much better

1004
00:42:57,480 --> 00:43:00,000
I would actually go and fix the rest of

1005
00:43:00,000 --> 00:43:02,400
the list if I had enough time but let's

1006
00:43:02,400 --> 00:43:06,440
move on back to the deck I guess

1007
00:43:09,599 --> 00:43:11,700
all right

1008
00:43:11,700 --> 00:43:13,759
um

1009
00:43:13,920 --> 00:43:16,380
so I think with such an automation tool

1010
00:43:16,380 --> 00:43:17,819
you can get a big picture without

1011
00:43:17,819 --> 00:43:21,240
bothering on a specific risk area you

1012
00:43:21,240 --> 00:43:23,220
can start thinking of how you could take

1013
00:43:23,220 --> 00:43:25,859
this to a new capability and leverage it

1014
00:43:25,859 --> 00:43:27,839
even greater

1015
00:43:27,839 --> 00:43:30,839
um so a bit more technical details about

1016
00:43:30,839 --> 00:43:32,099
chain range

1017
00:43:32,099 --> 00:43:34,380
so chain then she's reading in go which

1018
00:43:34,380 --> 00:43:36,300
allows running in performance while

1019
00:43:36,300 --> 00:43:38,280
creating with just one static binary

1020
00:43:38,280 --> 00:43:41,359
that can support multiple environments

1021
00:43:41,359 --> 00:43:44,880
the tool is built in such a way that it

1022
00:43:44,880 --> 00:43:48,359
is it to have new support for new SCM Ci

1023
00:43:48,359 --> 00:43:51,960
or artifactory you name it every new

1024
00:43:51,960 --> 00:43:53,700
integration has a defined set of

1025
00:43:53,700 --> 00:43:56,460
instructions that it needs to implement

1026
00:43:56,460 --> 00:43:59,760
before a integrated so the checks are a

1027
00:43:59,760 --> 00:44:02,700
agnostic to provide us that's mean one

1028
00:44:02,700 --> 00:44:05,760
single checks for all providers and the

1029
00:44:05,760 --> 00:44:08,040
actual checks were written in a regular

1030
00:44:08,040 --> 00:44:10,380
by open policy agent which is policy

1031
00:44:10,380 --> 00:44:13,319
language that is easy to read and write

1032
00:44:13,319 --> 00:44:15,960
specially for non-developers we

1033
00:44:15,960 --> 00:44:20,520
currently support GitHub as SCM with 40

1034
00:44:20,520 --> 00:44:24,480
of the checks coverage and Counting the

1035
00:44:24,480 --> 00:44:26,640
checks information list is automatically

1036
00:44:26,640 --> 00:44:29,819
reflecting avd as you saw once the

1037
00:44:29,819 --> 00:44:32,839
checks are added into a chain change

1038
00:44:32,839 --> 00:44:35,760
with the nightly jobs I mean no hassle

1039
00:44:35,760 --> 00:44:38,579
to make it updated just one place to to

1040
00:44:38,579 --> 00:44:41,099
manage to manage

1041
00:44:41,099 --> 00:44:43,140
um so what next

1042
00:44:43,140 --> 00:44:45,599
um so finally we plan to release chain

1043
00:44:45,599 --> 00:44:48,240
bench as open source project in the next

1044
00:44:48,240 --> 00:44:49,640
two weeks

1045
00:44:49,640 --> 00:44:53,220
so please follow us to stay tuned and I

1046
00:44:53,220 --> 00:44:55,560
invite you all to play with it access

1047
00:44:55,560 --> 00:44:58,200
your software supply chain stack make it

1048
00:44:58,200 --> 00:45:00,780
more security please provide feedback

1049
00:45:00,780 --> 00:45:03,300
and contribution this is crucial for

1050
00:45:03,300 --> 00:45:06,000
this project and to our community

1051
00:45:06,000 --> 00:45:08,819
uh and by the way Elam and I can discuss

1052
00:45:08,819 --> 00:45:11,640
further and show you an on-site demo at

1053
00:45:11,640 --> 00:45:15,420
the Austin open source Summit

1054
00:45:15,420 --> 00:45:20,060
um so let's rip up I guess

1055
00:45:20,460 --> 00:45:23,760
great so with a few minutes that we have

1056
00:45:23,760 --> 00:45:26,040
um let's wrap up real quick

1057
00:45:26,040 --> 00:45:28,859
um this was extremely exciting to see uh

1058
00:45:28,859 --> 00:45:29,880
there's nothing like the feeling of

1059
00:45:29,880 --> 00:45:33,119
seeing that thread warning becomes a

1060
00:45:33,119 --> 00:45:35,040
green pest check

1061
00:45:35,040 --> 00:45:36,540
um and this is I guess this is the power

1062
00:45:36,540 --> 00:45:38,220
of chain mesh this is what we're trying

1063
00:45:38,220 --> 00:45:40,440
to contribute to the community

1064
00:45:40,440 --> 00:45:41,940
um the idea that securing your software

1065
00:45:41,940 --> 00:45:43,980
supply chain really doesn't have to be a

1066
00:45:43,980 --> 00:45:47,579
hassle so if you click one more slide

1067
00:45:47,579 --> 00:45:49,980
um and we'll wrap up

1068
00:45:49,980 --> 00:45:52,740
um so closing with the way we started

1069
00:45:52,740 --> 00:45:54,480
the software supply chain even though we

1070
00:45:54,480 --> 00:45:56,220
often refer to it as a single process

1071
00:45:56,220 --> 00:45:57,960
it's actually composed of a few

1072
00:45:57,960 --> 00:46:00,119
different layers we can see them here

1073
00:46:00,119 --> 00:46:02,400
um so five left uh formula source code

1074
00:46:02,400 --> 00:46:04,859
two out until deployment time

1075
00:46:04,859 --> 00:46:06,599
um and it's equally important to secure

1076
00:46:06,599 --> 00:46:08,460
each and every phase because a failure

1077
00:46:08,460 --> 00:46:11,099
to do so as we can see you can click

1078
00:46:11,099 --> 00:46:12,480
this line

1079
00:46:12,480 --> 00:46:14,400
um a failure to secure your dependencies

1080
00:46:14,400 --> 00:46:16,680
for example your materials uh could

1081
00:46:16,680 --> 00:46:18,599
result in an incidence like the one we

1082
00:46:18,599 --> 00:46:21,660
discussed about code cop and a failure

1083
00:46:21,660 --> 00:46:23,460
to secure your build pipeline your build

1084
00:46:23,460 --> 00:46:24,900
environment

1085
00:46:24,900 --> 00:46:27,420
um is essentially the case of what

1086
00:46:27,420 --> 00:46:29,579
happened with the solo wind attack

1087
00:46:29,579 --> 00:46:31,079
um and again a failure to secure real

1088
00:46:31,079 --> 00:46:33,480
artifacts your package manager uh could

1089
00:46:33,480 --> 00:46:35,819
easily lead you down the path of being a

1090
00:46:35,819 --> 00:46:38,400
part of a dependency confusion attack

1091
00:46:38,400 --> 00:46:41,819
um so securing those chains in the link

1092
00:46:41,819 --> 00:46:45,300
um is important to secure the entire uh

1093
00:46:45,300 --> 00:46:47,520
the entire process itself we can see

1094
00:46:47,520 --> 00:46:49,740
here the framework which uh everything

1095
00:46:49,740 --> 00:46:51,660
starting from chain management uh to

1096
00:46:51,660 --> 00:46:53,940
other Solutions is built around

1097
00:46:53,940 --> 00:46:55,619
um so commit to deploy with the

1098
00:46:55,619 --> 00:46:57,599
different phases and you can see one two

1099
00:46:57,599 --> 00:47:00,359
eight is the set of controls uh that are

1100
00:47:00,359 --> 00:47:02,160
required to put in place in order to

1101
00:47:02,160 --> 00:47:04,079
fully secure the supply chain uh now

1102
00:47:04,079 --> 00:47:06,780
this is what chainbench is based on uh

1103
00:47:06,780 --> 00:47:09,420
so change itself kind of takes away the

1104
00:47:09,420 --> 00:47:11,880
uh the trouble of getting to know each

1105
00:47:11,880 --> 00:47:14,819
and every uh phase of the process

1106
00:47:14,819 --> 00:47:17,220
um and essentially makes it doable to

1107
00:47:17,220 --> 00:47:19,319
protect your software supply chain uh

1108
00:47:19,319 --> 00:47:21,660
which might with much more ease and

1109
00:47:21,660 --> 00:47:24,000
Automation and hopefully uh if you can

1110
00:47:24,000 --> 00:47:26,520
click one more then it would prevent you

1111
00:47:26,520 --> 00:47:29,040
from being anywhere near one of the next

1112
00:47:29,040 --> 00:47:31,980
software supply chain attacks and I

1113
00:47:31,980 --> 00:47:33,420
think that's it for today right that's

1114
00:47:33,420 --> 00:47:35,760
the one slide so thank you everybody for

1115
00:47:35,760 --> 00:47:37,800
the time I guess we'll be taking some

1116
00:47:37,800 --> 00:47:41,420
questions with the time that we have now

1117
00:47:43,020 --> 00:47:45,599
yes thank you alarm and more

1118
00:47:45,599 --> 00:47:48,780
um also congratulations on uh releasing

1119
00:47:48,780 --> 00:47:52,020
uh the new tool and and that tool to

1120
00:47:52,020 --> 00:47:55,079
benefit uh open source Community now

1121
00:47:55,079 --> 00:47:57,240
we're we're very lucky at all of us to

1122
00:47:57,240 --> 00:48:00,060
uh it's because you chose us to release

1123
00:48:00,060 --> 00:48:02,040
this to the world

1124
00:48:02,040 --> 00:48:03,780
um so there yeah there's already a lot

1125
00:48:03,780 --> 00:48:06,420
of interest in chain bench so the

1126
00:48:06,420 --> 00:48:09,660
question that's popular is um is chain

1127
00:48:09,660 --> 00:48:12,359
bench available already and how can I

1128
00:48:12,359 --> 00:48:14,280
get it

1129
00:48:14,280 --> 00:48:16,140
yeah more you can take this one okay

1130
00:48:16,140 --> 00:48:19,440
yeah sure so challenge is currently uh

1131
00:48:19,440 --> 00:48:22,800
still in progress and we are aimed to

1132
00:48:22,800 --> 00:48:26,339
release it in the next uh two weeks

1133
00:48:26,339 --> 00:48:29,160
so we're officially going to release it

1134
00:48:29,160 --> 00:48:33,839
uh in two weeks at uh open so Summit AT

1135
00:48:33,839 --> 00:48:35,339
costing

1136
00:48:35,339 --> 00:48:38,160
yeah so June June 20th

1137
00:48:38,160 --> 00:48:39,780
um I think it's like the first day of

1138
00:48:39,780 --> 00:48:41,579
right up before the first day of the

1139
00:48:41,579 --> 00:48:43,859
open source Summit which seems like a

1140
00:48:43,859 --> 00:48:45,839
proper place to do it so in two weeks

1141
00:48:45,839 --> 00:48:48,240
time is the official launch date uh you

1142
00:48:48,240 --> 00:48:50,160
can definitely follow and once the

1143
00:48:50,160 --> 00:48:52,260
GitHub repository will be open to public

1144
00:48:52,260 --> 00:48:55,319
then uh started and enjoying the the

1145
00:48:55,319 --> 00:48:57,960
community of it

1146
00:48:57,960 --> 00:48:59,940
very well nice

1147
00:48:59,940 --> 00:49:02,099
um so just I think a couple more

1148
00:49:02,099 --> 00:49:03,660
questions that I was wondering around

1149
00:49:03,660 --> 00:49:07,800
chain bench itself right and um there's

1150
00:49:07,800 --> 00:49:11,460
also the open ssf project scorecard how

1151
00:49:11,460 --> 00:49:15,000
does that compare to chain bench

1152
00:49:15,000 --> 00:49:18,359
okay so I will take that um so first it

1153
00:49:18,359 --> 00:49:20,520
was to mention the score code is an

1154
00:49:20,520 --> 00:49:23,339
amazing Project Lead by open cell

1155
00:49:23,339 --> 00:49:25,740
security Foundation that has more than

1156
00:49:25,740 --> 00:49:28,020
just one cool project I do see

1157
00:49:28,020 --> 00:49:31,140
similarity between both of them after

1158
00:49:31,140 --> 00:49:33,599
all they are both in the same area

1159
00:49:33,599 --> 00:49:35,700
um the main difference between them is

1160
00:49:35,700 --> 00:49:38,520
what is that while scorecard aim to

1161
00:49:38,520 --> 00:49:41,400
protect open source project which which

1162
00:49:41,400 --> 00:49:44,160
means it focused on GitHub and on the

1163
00:49:44,160 --> 00:49:45,780
left side of this of the supply chain

1164
00:49:45,780 --> 00:49:48,680
for example record and build

1165
00:49:48,680 --> 00:49:51,300
change is aimed to protect every project

1166
00:49:51,300 --> 00:49:54,480
either commercial or open source from

1167
00:49:54,480 --> 00:49:56,940
the code to deploy an inhibition

1168
00:49:56,940 --> 00:50:00,780
challenge content is led by a CIS

1169
00:50:00,780 --> 00:50:03,380
benchmark

1170
00:50:03,599 --> 00:50:06,000
thank you more yeah

1171
00:50:06,000 --> 00:50:08,880
um and and Elam maybe you can help us

1172
00:50:08,880 --> 00:50:12,000
understand uh CIS Benchmark there's

1173
00:50:12,000 --> 00:50:15,540
other things like nist how are they

1174
00:50:15,540 --> 00:50:17,700
related or different

1175
00:50:17,700 --> 00:50:19,440
yes definitely

1176
00:50:19,440 --> 00:50:21,240
um so there are a lot of different

1177
00:50:21,240 --> 00:50:25,500
Frameworks uh by a lot of organizations

1178
00:50:25,500 --> 00:50:27,960
um so for example nist CIS that we spoke

1179
00:50:27,960 --> 00:50:29,460
talked about

1180
00:50:29,460 --> 00:50:32,819
um so there are similarities uh and a

1181
00:50:32,819 --> 00:50:33,960
lot of the time the organization even

1182
00:50:33,960 --> 00:50:36,260
work together so referencing one another

1183
00:50:36,260 --> 00:50:38,579
uh so that's nice that's like the power

1184
00:50:38,579 --> 00:50:40,020
of the community

1185
00:50:40,020 --> 00:50:41,579
um the agenda of everybody is to help

1186
00:50:41,579 --> 00:50:44,220
secure the process however everybody got

1187
00:50:44,220 --> 00:50:46,500
every organization has their own anger

1188
00:50:46,500 --> 00:50:50,460
so uh CIS for example is much more uh

1189
00:50:50,460 --> 00:50:52,980
specific with the instructions so it's

1190
00:50:52,980 --> 00:50:55,740
literally a checks of do's and don'ts uh

1191
00:50:55,740 --> 00:50:57,359
on how to secure your software supply

1192
00:50:57,359 --> 00:51:00,240
chain uh what we liked in CIS is that

1193
00:51:00,240 --> 00:51:02,940
once we read the instruction uh as an

1194
00:51:02,940 --> 00:51:06,359
engineer I can follow it and this is why

1195
00:51:06,359 --> 00:51:08,940
chain bench was built around uh the

1196
00:51:08,940 --> 00:51:12,059
compliance framework with CIS

1197
00:51:12,059 --> 00:51:14,460
um so that's it the specificity of the

1198
00:51:14,460 --> 00:51:16,619
checks themselves uh is what

1199
00:51:16,619 --> 00:51:18,900
differentiated from the the other

1200
00:51:18,900 --> 00:51:20,940
Frameworks

1201
00:51:20,940 --> 00:51:22,859
oh thank you yeah and also

1202
00:51:22,859 --> 00:51:25,099
congratulations on contributing to CIS

1203
00:51:25,099 --> 00:51:28,079
uh audio knowledge

1204
00:51:28,079 --> 00:51:30,540
okay let's move on to one more audience

1205
00:51:30,540 --> 00:51:31,859
question

1206
00:51:31,859 --> 00:51:35,040
uh this is from Jose uh how do you

1207
00:51:35,040 --> 00:51:37,440
provide evidence that your actions are

1208
00:51:37,440 --> 00:51:39,540
effective that's the first part and the

1209
00:51:39,540 --> 00:51:42,000
second part is how to automatically

1210
00:51:42,000 --> 00:51:45,240
track progress as soon as compliance

1211
00:51:45,240 --> 00:51:48,740
department requires that

1212
00:51:49,800 --> 00:51:52,619
okay maybe I can take this one so

1213
00:51:52,619 --> 00:51:53,880
um

1214
00:51:53,880 --> 00:51:56,819
I hope I understand the question uh as

1215
00:51:56,819 --> 00:51:59,040
it was put

1216
00:51:59,040 --> 00:52:01,920
um so the uh the framework itself what

1217
00:52:01,920 --> 00:52:03,960
it does the chain manages a project what

1218
00:52:03,960 --> 00:52:06,240
it does is help you be compliant with

1219
00:52:06,240 --> 00:52:08,940
the framework uh the framework is cih

1220
00:52:08,940 --> 00:52:10,619
CIS software supply chain security

1221
00:52:10,619 --> 00:52:11,940
Benchmark

1222
00:52:11,940 --> 00:52:13,020
um this is the Frameworks to be

1223
00:52:13,020 --> 00:52:14,400
compliant with

1224
00:52:14,400 --> 00:52:15,839
um what we do is we run through the

1225
00:52:15,839 --> 00:52:18,180
checks and we help you kind of

1226
00:52:18,180 --> 00:52:21,540
automatically uh see if you are good or

1227
00:52:21,540 --> 00:52:23,760
not so good uh across the software

1228
00:52:23,760 --> 00:52:25,140
supply chain

1229
00:52:25,140 --> 00:52:27,660
um so from left to right a bunch of

1230
00:52:27,660 --> 00:52:30,780
checks uh spread across the process

1231
00:52:30,780 --> 00:52:33,540
um if you get the red indication then uh

1232
00:52:33,540 --> 00:52:35,460
you are passively in a risk of a

1233
00:52:35,460 --> 00:52:37,440
software supply chain attack and then as

1234
00:52:37,440 --> 00:52:40,020
Mo showed earlier uh you get the

1235
00:52:40,020 --> 00:52:41,520
explanation

1236
00:52:41,520 --> 00:52:44,040
um the specific link to avd to see more

1237
00:52:44,040 --> 00:52:46,500
information and even recommendations on

1238
00:52:46,500 --> 00:52:49,020
how to remediate the process

1239
00:52:49,020 --> 00:52:50,940
um if you do a good job and you fix some

1240
00:52:50,940 --> 00:52:53,160
of those red checks that fail uh then

1241
00:52:53,160 --> 00:52:56,099
they would turn game and then you know

1242
00:52:56,099 --> 00:52:58,619
that you are more secure one check is a

1243
00:52:58,619 --> 00:53:00,599
little more secure other checks could be

1244
00:53:00,599 --> 00:53:02,579
a lot more secure some of them are more

1245
00:53:02,579 --> 00:53:04,500
weighted than others

1246
00:53:04,500 --> 00:53:07,079
um and then you would have the challenge

1247
00:53:07,079 --> 00:53:10,079
of running it uh as as the question put

1248
00:53:10,079 --> 00:53:11,099
it

1249
00:53:11,099 --> 00:53:14,400
um running it like periodically to know

1250
00:53:14,400 --> 00:53:16,619
that I continue to be to be compliance

1251
00:53:16,619 --> 00:53:18,240
with the framework

1252
00:53:18,240 --> 00:53:19,680
um so that's definitely something that

1253
00:53:19,680 --> 00:53:22,260
we recommend doing uh so change bench is

1254
00:53:22,260 --> 00:53:24,720
scoped to a single repository so you use

1255
00:53:24,720 --> 00:53:26,400
it on your GitHub organization and a

1256
00:53:26,400 --> 00:53:28,319
repository of your choice and you can do

1257
00:53:28,319 --> 00:53:29,760
it multiple times so you can run it

1258
00:53:29,760 --> 00:53:31,500
again and again uh you can do some

1259
00:53:31,500 --> 00:53:33,300
automation around it

1260
00:53:33,300 --> 00:53:36,000
um like schedule checks to know that

1261
00:53:36,000 --> 00:53:38,339
you're always compliant with or you can

1262
00:53:38,339 --> 00:53:40,980
use off-the-shelf product obviously a

1263
00:53:40,980 --> 00:53:42,780
lot of the work that we do here in aqua

1264
00:53:42,780 --> 00:53:46,260
is automating change to give it to you

1265
00:53:46,260 --> 00:53:50,420
um just kind of as a turnkey solution

1266
00:53:51,079 --> 00:53:53,520
thank you Elam

1267
00:53:53,520 --> 00:53:54,590
all right

1268
00:53:54,590 --> 00:53:55,140
[Music]

1269
00:53:55,140 --> 00:53:57,140
um

1270
00:53:57,180 --> 00:53:59,640
I think we have answered the audience

1271
00:53:59,640 --> 00:54:01,880
questions

1272
00:54:01,880 --> 00:54:06,599
no I think overall uh this was very good

1273
00:54:06,599 --> 00:54:09,000
we saw multiple demos and in the great

1274
00:54:09,000 --> 00:54:10,800
contributions that your team is making

1275
00:54:10,800 --> 00:54:14,280
to open source and helping us uh reduce

1276
00:54:14,280 --> 00:54:18,119
our security lists uh thank you Elam and

1277
00:54:18,119 --> 00:54:21,480
more and uh good luck with the next

1278
00:54:21,480 --> 00:54:24,720
conference and the launch of code bench

1279
00:54:24,720 --> 00:54:28,640
thanks for having us thank you very much

