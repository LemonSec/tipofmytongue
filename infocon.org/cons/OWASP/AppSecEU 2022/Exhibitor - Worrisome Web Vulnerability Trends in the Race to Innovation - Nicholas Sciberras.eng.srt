1
00:00:05,759 --> 00:00:08,759
foreign

2
00:00:10,139 --> 00:00:13,080
welcome to the exhibitor track

3
00:00:13,080 --> 00:00:16,199
I'm hitesh babani a volunteer in the OAS

4
00:00:16,199 --> 00:00:18,480
community and I'll help moderate this

5
00:00:18,480 --> 00:00:20,100
session today

6
00:00:20,100 --> 00:00:23,160
during the next 45 minutes we'll be

7
00:00:23,160 --> 00:00:25,920
listening to Nicholas present worrisome

8
00:00:25,920 --> 00:00:29,039
web vulnerability Trends in the race to

9
00:00:29,039 --> 00:00:30,480
innovation

10
00:00:30,480 --> 00:00:33,420
now please submit any questions you have

11
00:00:33,420 --> 00:00:36,420
during the session in the Q a tab which

12
00:00:36,420 --> 00:00:38,160
you will find just to the right of this

13
00:00:38,160 --> 00:00:40,680
video in the Hoover platform

14
00:00:40,680 --> 00:00:42,600
and I'll be asking Nicholas your

15
00:00:42,600 --> 00:00:45,000
question the last 10 minutes of this

16
00:00:45,000 --> 00:00:46,020
session

17
00:00:46,020 --> 00:00:49,260
please note that the chat function

18
00:00:49,260 --> 00:00:53,000
is available for you to leave comments

19
00:00:53,000 --> 00:00:55,920
and that is in the who will platform as

20
00:00:55,920 --> 00:00:56,940
well

21
00:00:56,940 --> 00:00:59,940
okay so today we have

22
00:00:59,940 --> 00:01:01,739
um Nicholas

23
00:01:01,739 --> 00:01:04,500
who is a principal product program

24
00:01:04,500 --> 00:01:07,439
manager within Victory Security

25
00:01:07,439 --> 00:01:09,540
he has more than 20 years of experience

26
00:01:09,540 --> 00:01:12,900
in I.T security with about 10 years of

27
00:01:12,900 --> 00:01:15,900
those focusing specifically on web

28
00:01:15,900 --> 00:01:17,820
application security

29
00:01:17,820 --> 00:01:20,939
in the past five years Nicholas is

30
00:01:20,939 --> 00:01:23,820
leading acunetics which is one of the

31
00:01:23,820 --> 00:01:27,119
flagship appsic Solutions uh in in

32
00:01:27,119 --> 00:01:30,360
victory's portfolio

33
00:01:30,360 --> 00:01:33,720
um in in the acinetics platform

34
00:01:33,720 --> 00:01:35,700
um tries to be the fastest and most

35
00:01:35,700 --> 00:01:37,439
reliable web application security

36
00:01:37,439 --> 00:01:41,880
scanners for smes across all Industries

37
00:01:41,880 --> 00:01:44,040
so that being said Nicholas

38
00:01:44,040 --> 00:01:47,240
um please take over

39
00:01:48,000 --> 00:01:51,000
so thanks sitesh um I'll go ahead and

40
00:01:51,000 --> 00:01:52,979
share my screen

41
00:01:52,979 --> 00:01:56,700
so this should be the right one

42
00:01:56,700 --> 00:01:58,619
so uh good morning good afternoon

43
00:01:58,619 --> 00:02:00,899
everyone depending on on where you're

44
00:02:00,899 --> 00:02:03,299
connecting from and uh welcome to this

45
00:02:03,299 --> 00:02:04,380
presentation

46
00:02:04,380 --> 00:02:06,719
and today we'll be talking about some

47
00:02:06,719 --> 00:02:09,179
where it's in vulnerability trends that

48
00:02:09,179 --> 00:02:11,400
we're uh seeing

49
00:02:11,400 --> 00:02:13,319
um uh every year the company that I work

50
00:02:13,319 --> 00:02:16,500
for and Victor security goes through and

51
00:02:16,500 --> 00:02:19,319
crunches a bunch of data that we compile

52
00:02:19,319 --> 00:02:22,860
from our online products and we do this

53
00:02:22,860 --> 00:02:25,739
for two reasons one is so that we can

54
00:02:25,739 --> 00:02:28,620
improve our systems and this is sort of

55
00:02:28,620 --> 00:02:32,340
done on an ongoing basis and we tend to

56
00:02:32,340 --> 00:02:34,739
look at the data more detail on the

57
00:02:34,739 --> 00:02:36,300
early basis

58
00:02:36,300 --> 00:02:39,840
um to produce this annual uh Invicta

59
00:02:39,840 --> 00:02:42,540
appsec indicator report

60
00:02:42,540 --> 00:02:45,180
um and this report portrays the state of

61
00:02:45,180 --> 00:02:47,400
web application security

62
00:02:47,400 --> 00:02:50,459
um on a year by year basis so uh today

63
00:02:50,459 --> 00:02:52,560
I'll be talking about uh the report that

64
00:02:52,560 --> 00:02:55,080
we have released earlier this year in

65
00:02:55,080 --> 00:02:59,580
Spring 2022 which covers the data up

66
00:02:59,580 --> 00:03:03,540
till the end of last year so well we'll

67
00:03:03,540 --> 00:03:05,400
dive into the results

68
00:03:05,400 --> 00:03:08,780
um in this session today

69
00:03:09,720 --> 00:03:12,480
so uh shorts introduction um hitesh has

70
00:03:12,480 --> 00:03:14,340
already done this my name is Nikola

71
00:03:14,340 --> 00:03:16,580
shiveras I'm product manager at evictive

72
00:03:16,580 --> 00:03:20,400
and uh well at invicty our mission is to

73
00:03:20,400 --> 00:03:22,440
transform how web application security

74
00:03:22,440 --> 00:03:26,640
gets done and we and myself are very

75
00:03:26,640 --> 00:03:28,140
passionate about working with our

76
00:03:28,140 --> 00:03:30,900
customers and partners to help them

77
00:03:30,900 --> 00:03:33,620
truly protect everything and everyone

78
00:03:33,620 --> 00:03:36,840
with a special focus on on web

79
00:03:36,840 --> 00:03:39,480
applications and web security

80
00:03:39,480 --> 00:03:43,799
so uh going go on to today's agenda

81
00:03:43,799 --> 00:03:46,500
um I will be briefly looking at the

82
00:03:46,500 --> 00:03:48,840
reports methodology and we are going to

83
00:03:48,840 --> 00:03:50,700
do this because we want to ensure that

84
00:03:50,700 --> 00:03:52,739
you we all understand how we get our

85
00:03:52,739 --> 00:03:54,120
data

86
00:03:54,120 --> 00:03:56,879
um and then we will zoom in on the

87
00:03:56,879 --> 00:03:59,879
findings and uh unfortunately some of

88
00:03:59,879 --> 00:04:01,680
the worst we'll be talking about some of

89
00:04:01,680 --> 00:04:05,220
the worst security flaws that are still

90
00:04:05,220 --> 00:04:08,280
plaguing us and the devsec Ops teams

91
00:04:08,280 --> 00:04:09,140
today

92
00:04:09,140 --> 00:04:11,939
and finally they will aim to provide you

93
00:04:11,939 --> 00:04:13,860
with some insights into what can be done

94
00:04:13,860 --> 00:04:16,199
to improve the situation

95
00:04:16,199 --> 00:04:20,600
um uh well not all hope is is lost

96
00:04:20,820 --> 00:04:23,580
so uh before we do that I would like to

97
00:04:23,580 --> 00:04:25,919
quickly introduce invicty

98
00:04:25,919 --> 00:04:27,780
um we are a global leader in web

99
00:04:27,780 --> 00:04:30,600
application security since 2005 so we

100
00:04:30,600 --> 00:04:32,880
have quite a number of years of

101
00:04:32,880 --> 00:04:35,940
experience in the field and we help more

102
00:04:35,940 --> 00:04:39,300
than 3 000 customers of all sizes and

103
00:04:39,300 --> 00:04:43,440
all Industries across every uh geography

104
00:04:43,440 --> 00:04:45,060
um and to help them to secure their web

105
00:04:45,060 --> 00:04:47,400
applications in development and in

106
00:04:47,400 --> 00:04:49,320
production and I'm saying this because

107
00:04:49,320 --> 00:04:52,620
this gives a bit more detail into where

108
00:04:52,620 --> 00:04:54,840
we are gathering the data for uh for the

109
00:04:54,840 --> 00:04:58,199
report that we'll be looking at today

110
00:04:58,199 --> 00:05:02,100
so uh let's uh dive into today's topic

111
00:05:02,100 --> 00:05:04,440
and as I mentioned we'll start off with

112
00:05:04,440 --> 00:05:07,199
uh reviewing the methodology that we are

113
00:05:07,199 --> 00:05:09,540
using together the data

114
00:05:09,540 --> 00:05:12,780
um so uh as I already mentioned every

115
00:05:12,780 --> 00:05:15,479
year we strive to get a deeper insight

116
00:05:15,479 --> 00:05:17,460
into the state of web application

117
00:05:17,460 --> 00:05:19,080
security

118
00:05:19,080 --> 00:05:21,840
and we do this by looking at the data

119
00:05:21,840 --> 00:05:25,259
with the aim to find out if uh severe

120
00:05:25,259 --> 00:05:27,600
vulnerabilities are actually getting

121
00:05:27,600 --> 00:05:33,120
scarcer and uh ideally we start to find

122
00:05:33,120 --> 00:05:36,060
less of these as we go along at least

123
00:05:36,060 --> 00:05:38,340
that's that's our aim

124
00:05:38,340 --> 00:05:40,560
um now obviously there are always

125
00:05:40,560 --> 00:05:41,940
um

126
00:05:41,940 --> 00:05:44,880
um a high amount of uh low and meetings

127
00:05:44,880 --> 00:05:46,740
a variety of vulnerabilities that uh

128
00:05:46,740 --> 00:05:48,600
that we detect

129
00:05:48,600 --> 00:05:52,560
um but uh we tend to uh focus more on on

130
00:05:52,560 --> 00:05:54,419
the higher severity vulnerabilities and

131
00:05:54,419 --> 00:05:56,940
ignore the lower severity ones

132
00:05:56,940 --> 00:05:58,800
um for this report so we'll be looking

133
00:05:58,800 --> 00:06:00,960
at the higher severity vulnerabilities

134
00:06:00,960 --> 00:06:04,520
in this presentation too

135
00:06:04,979 --> 00:06:09,240
um and we tend to focus more on the type

136
00:06:09,240 --> 00:06:12,120
of vulnerabilities that are or can be

137
00:06:12,120 --> 00:06:14,820
exploited in the wild and when they are

138
00:06:14,820 --> 00:06:17,220
exploited they can lead to uh costly

139
00:06:17,220 --> 00:06:18,539
data breaches

140
00:06:18,539 --> 00:06:21,600
and unfortunately

141
00:06:21,600 --> 00:06:24,660
um to answer the question are severe

142
00:06:24,660 --> 00:06:26,539
vulnerabilities getting scarcer

143
00:06:26,539 --> 00:06:29,460
unfortunately the short answer is is no

144
00:06:29,460 --> 00:06:32,039
as we'll be seeing in in later on in the

145
00:06:32,039 --> 00:06:33,440
presentation

146
00:06:33,440 --> 00:06:36,720
and uh and therefore the work of of

147
00:06:36,720 --> 00:06:38,580
security teams and the Security

148
00:06:38,580 --> 00:06:41,699
Professionals remains important more

149
00:06:41,699 --> 00:06:43,500
than than ever

150
00:06:43,500 --> 00:06:45,419
um and hopefully you'll understand why

151
00:06:45,419 --> 00:06:49,099
in uh in the presentation

152
00:06:49,380 --> 00:06:52,800
so um for this edition of the Invicta

153
00:06:52,800 --> 00:06:54,840
indicator

154
00:06:54,840 --> 00:06:57,060
um we took a

155
00:06:57,060 --> 00:07:00,240
willing on the deeper and richer data

156
00:07:00,240 --> 00:07:01,259
set

157
00:07:01,259 --> 00:07:03,600
um than we usually do

158
00:07:03,600 --> 00:07:06,060
um we have analyzed aggregated usage

159
00:07:06,060 --> 00:07:11,340
data for almost 1 000 Global customers

160
00:07:11,340 --> 00:07:13,139
um uh and

161
00:07:13,139 --> 00:07:15,000
um our customers so these customers that

162
00:07:15,000 --> 00:07:16,800
we have looked at have performed more

163
00:07:16,800 --> 00:07:20,039
than 23 billion Security checks last

164
00:07:20,039 --> 00:07:22,979
year alone and our products have

165
00:07:22,979 --> 00:07:25,560
reported over 280

166
00:07:25,560 --> 00:07:28,620
000 direct impact vulnerabilities

167
00:07:28,620 --> 00:07:30,840
um the vulnerabilities we are going to

168
00:07:30,840 --> 00:07:33,240
look at in these presentations are

169
00:07:33,240 --> 00:07:35,280
vulnerabilities that could have serious

170
00:07:35,280 --> 00:07:37,740
consequences if exploited by by

171
00:07:37,740 --> 00:07:39,139
malicious sectors

172
00:07:39,139 --> 00:07:42,720
and also thanks to uh various techniques

173
00:07:42,720 --> 00:07:45,479
used to reduce the number of force

174
00:07:45,479 --> 00:07:48,780
positives that we have in our products

175
00:07:48,780 --> 00:07:50,460
um our products

176
00:07:50,460 --> 00:07:53,520
um and and like these techniques um are

177
00:07:53,520 --> 00:07:55,259
used to confirm most of the

178
00:07:55,259 --> 00:07:57,000
vulnerabilities being reported on so

179
00:07:57,000 --> 00:07:59,160
that's one technique that we use to uh

180
00:07:59,160 --> 00:08:01,199
to reduce false positives by trying to

181
00:08:01,199 --> 00:08:04,500
confirm the existence of of these uh

182
00:08:04,500 --> 00:08:07,259
vulnerabilities and not reporting only

183
00:08:07,259 --> 00:08:10,440
based on for example the version of a

184
00:08:10,440 --> 00:08:12,720
particular product that we have detected

185
00:08:12,720 --> 00:08:14,340
so uh

186
00:08:14,340 --> 00:08:16,380
um if I recall correctly our Force

187
00:08:16,380 --> 00:08:18,360
positive rate when we had the checked it

188
00:08:18,360 --> 00:08:21,120
was uh less than one in five thousand so

189
00:08:21,120 --> 00:08:22,680
so again

190
00:08:22,680 --> 00:08:24,419
um that proves that what we are going to

191
00:08:24,419 --> 00:08:26,819
talk about today are real issues and

192
00:08:26,819 --> 00:08:28,680
that the data we are going to see is is

193
00:08:28,680 --> 00:08:31,919
uh accurate and uh therefore should be

194
00:08:31,919 --> 00:08:33,719
reflecting the state of of the world

195
00:08:33,719 --> 00:08:35,120
today

196
00:08:35,120 --> 00:08:38,880
so uh um what does this mean it means

197
00:08:38,880 --> 00:08:41,820
that all this information has given us

198
00:08:41,820 --> 00:08:44,459
um a very holistic view of vulnerability

199
00:08:44,459 --> 00:08:47,839
Trends from our automated scan results

200
00:08:47,839 --> 00:08:51,300
I'm keeping in mind that these scans

201
00:08:51,300 --> 00:08:53,880
have been done across multiple across

202
00:08:53,880 --> 00:08:56,519
different company sizes and that cross

203
00:08:56,519 --> 00:09:00,600
multiple regions and we'll dive into the

204
00:09:00,600 --> 00:09:02,640
details in a moment

205
00:09:02,640 --> 00:09:04,740
so

206
00:09:04,740 --> 00:09:07,980
um as part of of this analysis we have

207
00:09:07,980 --> 00:09:10,860
uncovered some alarming Trends right um

208
00:09:10,860 --> 00:09:13,380
so I've already mentioned this um and

209
00:09:13,380 --> 00:09:16,740
we'll be looking at these in more detail

210
00:09:16,740 --> 00:09:20,760
um so uh as a quick intro

211
00:09:20,760 --> 00:09:22,860
um to start out and what we have done

212
00:09:22,860 --> 00:09:26,279
here is put together a chart that

213
00:09:26,279 --> 00:09:28,560
summarizes our top high severity

214
00:09:28,560 --> 00:09:31,740
vulnerabilities and also their trends

215
00:09:31,740 --> 00:09:34,680
for the last four years

216
00:09:34,680 --> 00:09:38,279
um we are covering here between 2018 and

217
00:09:38,279 --> 00:09:39,740
2021

218
00:09:39,740 --> 00:09:43,080
and this four-year snapshot shows the

219
00:09:43,080 --> 00:09:45,959
percentage of customers that encountered

220
00:09:45,959 --> 00:09:48,899
at least one vulnerability of the given

221
00:09:48,899 --> 00:09:50,220
type

222
00:09:50,220 --> 00:09:53,640
um and uh so in other words

223
00:09:53,640 --> 00:09:56,399
um we are showing how often we've helped

224
00:09:56,399 --> 00:09:58,920
companies automatically discovered High

225
00:09:58,920 --> 00:10:00,899
severity vulnerability shown in the

226
00:10:00,899 --> 00:10:03,360
graph which includes vulnerabilities

227
00:10:03,360 --> 00:10:06,300
like remote code execution cross-site

228
00:10:06,300 --> 00:10:07,980
scripting and other high severity

229
00:10:07,980 --> 00:10:09,080
vulnerabilities

230
00:10:09,080 --> 00:10:12,120
and uh you can see that the figures are

231
00:10:12,120 --> 00:10:14,459
hovering around the same number year

232
00:10:14,459 --> 00:10:19,560
over year or increasing slightly and uh

233
00:10:19,560 --> 00:10:22,260
well we can definitely say that overall

234
00:10:22,260 --> 00:10:25,560
there is no improvement across all the

235
00:10:25,560 --> 00:10:27,360
board

236
00:10:27,360 --> 00:10:28,100
um

237
00:10:28,100 --> 00:10:31,200
one thing to um

238
00:10:31,200 --> 00:10:33,240
well one thing to keep in mind is that

239
00:10:33,240 --> 00:10:36,779
Invicta has grown in size and uh and

240
00:10:36,779 --> 00:10:38,160
therefore the number of customers that

241
00:10:38,160 --> 00:10:40,260
you have helped secure this is why we

242
00:10:40,260 --> 00:10:42,720
are looking at percentages having said

243
00:10:42,720 --> 00:10:45,120
that like the uh vulnerabilities that

244
00:10:45,120 --> 00:10:47,160
were detected in uh

245
00:10:47,160 --> 00:10:49,980
four years ago and most of these had

246
00:10:49,980 --> 00:10:51,899
been fixed so we are constantly looking

247
00:10:51,899 --> 00:10:54,260
at a new at a wave of new

248
00:10:54,260 --> 00:10:56,399
vulnerabilities that are detected here

249
00:10:56,399 --> 00:10:57,720
over here

250
00:10:57,720 --> 00:11:01,160
um uh in this chart

251
00:11:01,880 --> 00:11:06,899
foreign so if we uh drill down a bit and

252
00:11:06,899 --> 00:11:10,019
we just look at the data and comparison

253
00:11:10,019 --> 00:11:14,760
between uh the year 2020 and 2021 and we

254
00:11:14,760 --> 00:11:17,579
can see a lot of the same or nearly no

255
00:11:17,579 --> 00:11:19,079
improvement

256
00:11:19,079 --> 00:11:22,980
so uh most vulnerabilities like remote

257
00:11:22,980 --> 00:11:26,399
code execution and server side request

258
00:11:26,399 --> 00:11:29,459
for jury RX video on the rise between

259
00:11:29,459 --> 00:11:32,279
one to three percent year over year so

260
00:11:32,279 --> 00:11:34,260
this is a bit

261
00:11:34,260 --> 00:11:36,839
um what is him um you would think that

262
00:11:36,839 --> 00:11:39,000
we told the uh

263
00:11:39,000 --> 00:11:41,700
um awareness that uh

264
00:11:41,700 --> 00:11:44,120
um companies like Invicta but also um

265
00:11:44,120 --> 00:11:47,040
organizations such as oaspar are trying

266
00:11:47,040 --> 00:11:48,560
to um

267
00:11:48,560 --> 00:11:50,700
to to do

268
00:11:50,700 --> 00:11:52,500
um and to raise um these type of

269
00:11:52,500 --> 00:11:54,300
vulnerabilities with with see them

270
00:11:54,300 --> 00:11:55,620
diminish

271
00:11:55,620 --> 00:11:57,720
um however our report and our data seems

272
00:11:57,720 --> 00:11:59,940
to indicate otherwise

273
00:11:59,940 --> 00:12:02,820
now it is important to understand that

274
00:12:02,820 --> 00:12:04,500
these Trends

275
00:12:04,500 --> 00:12:06,600
um as for example the top off fenders

276
00:12:06,600 --> 00:12:09,300
like remote code execution

277
00:12:09,300 --> 00:12:11,459
um and others like SQL injection

278
00:12:11,459 --> 00:12:13,860
typically to some pretty serious

279
00:12:13,860 --> 00:12:17,399
consequences so uh for example

280
00:12:17,399 --> 00:12:20,459
um compromised back-end data hijacked

281
00:12:20,459 --> 00:12:23,940
sessions or forced actions on behalf of

282
00:12:23,940 --> 00:12:26,519
users and services as in the case of

283
00:12:26,519 --> 00:12:30,000
cross-site scripting for example and now

284
00:12:30,000 --> 00:12:31,800
one of the things that we really focus

285
00:12:31,800 --> 00:12:33,779
on is that uh

286
00:12:33,779 --> 00:12:35,940
um is that and that security teams need

287
00:12:35,940 --> 00:12:37,740
to understand

288
00:12:37,740 --> 00:12:38,579
um

289
00:12:38,579 --> 00:12:41,640
is that this is a true risk and

290
00:12:41,640 --> 00:12:44,459
Reporting the number of low severity

291
00:12:44,459 --> 00:12:46,980
vulnerabilities is not of True Value so

292
00:12:46,980 --> 00:12:48,720
that's another reason why we try to stay

293
00:12:48,720 --> 00:12:52,320
away from that and uh in fact I'm having

294
00:12:52,320 --> 00:12:54,540
a number of law severity vulnerabilities

295
00:12:54,540 --> 00:12:58,139
and Reporting them as uh being of higher

296
00:12:58,139 --> 00:13:00,839
severity would actually be of negative

297
00:13:00,839 --> 00:13:02,100
value

298
00:13:02,100 --> 00:13:04,980
um it distracts the team and it confuses

299
00:13:04,980 --> 00:13:07,620
uh the picture of understanding what the

300
00:13:07,620 --> 00:13:09,540
true story of the security posture is

301
00:13:09,540 --> 00:13:12,240
and that is one other reason for

302
00:13:12,240 --> 00:13:13,860
focusing on higher severity

303
00:13:13,860 --> 00:13:16,920
vulnerabilities and in the report

304
00:13:16,920 --> 00:13:19,639
foreign

305
00:13:26,000 --> 00:13:30,000
stock offenders and look at each one in

306
00:13:30,000 --> 00:13:32,779
more detail

307
00:13:32,820 --> 00:13:36,600
so the first one in the list as as uh I

308
00:13:36,600 --> 00:13:38,220
would say one would expect is the remote

309
00:13:38,220 --> 00:13:41,760
code execution and to understand why

310
00:13:41,760 --> 00:13:44,339
this is top of the pile you only have to

311
00:13:44,339 --> 00:13:46,920
look back a few months and remember the

312
00:13:46,920 --> 00:13:51,300
impact that lock 4 shell had on

313
00:13:51,300 --> 00:13:53,639
businesses around the globe as they

314
00:13:53,639 --> 00:13:56,399
scrambled to check whether or not they

315
00:13:56,399 --> 00:13:58,560
were vulnerable to remote code execution

316
00:13:58,560 --> 00:14:03,240
attack and in the widely lock 4J Library

317
00:14:03,240 --> 00:14:05,579
so so

318
00:14:05,579 --> 00:14:07,200
um we need to keep in mind that remote

319
00:14:07,200 --> 00:14:09,839
code execution can have

320
00:14:09,839 --> 00:14:12,959
um fire reaching consequences and it

321
00:14:12,959 --> 00:14:14,880
really is considered as the ultimate

322
00:14:14,880 --> 00:14:17,040
goal of a cyber attacker

323
00:14:17,040 --> 00:14:20,100
um and uh the reason for this is uh very

324
00:14:20,100 --> 00:14:21,300
simple

325
00:14:21,300 --> 00:14:23,639
um having uh one single remote code

326
00:14:23,639 --> 00:14:25,560
execution vulnerability in a production

327
00:14:25,560 --> 00:14:28,560
environment is often referred to as a

328
00:14:28,560 --> 00:14:30,180
game over

329
00:14:30,180 --> 00:14:33,480
um as this puts the system at risk of

330
00:14:33,480 --> 00:14:37,019
complete compromise and um here I'm

331
00:14:37,019 --> 00:14:38,700
referring not only to the system where

332
00:14:38,700 --> 00:14:40,560
the uh remote code execution

333
00:14:40,560 --> 00:14:42,959
vulnerability is found but it's pretty

334
00:14:42,959 --> 00:14:45,540
much the whole surrounding system and

335
00:14:45,540 --> 00:14:47,639
the surrounding Network as with remote

336
00:14:47,639 --> 00:14:49,440
code execution you can easily bounce

337
00:14:49,440 --> 00:14:51,860
over to to other assistants

338
00:14:51,860 --> 00:14:54,839
and uh the problem with this is that

339
00:14:54,839 --> 00:14:57,060
unfortunately what you have seen the uh

340
00:14:57,060 --> 00:15:00,240
in our app second indicator report

341
00:15:00,240 --> 00:15:02,519
um remote code execution has seen a

342
00:15:02,519 --> 00:15:05,040
study and where is some increase since

343
00:15:05,040 --> 00:15:08,579
2018 and in fact it jumped five percent

344
00:15:08,579 --> 00:15:12,420
in frequency uh in the last three years

345
00:15:12,420 --> 00:15:15,420
and uh three percent in in uh between

346
00:15:15,420 --> 00:15:21,000
2020 and 2021. so uh um it's a worrying

347
00:15:21,000 --> 00:15:23,600
trend

348
00:15:24,180 --> 00:15:26,399
um so moving on

349
00:15:26,399 --> 00:15:28,560
um our uh the next vulnerability I would

350
00:15:28,560 --> 00:15:30,360
like to talk about is a server side

351
00:15:30,360 --> 00:15:33,959
request forgery or ssrf for short

352
00:15:33,959 --> 00:15:36,839
and as a startup happens when an

353
00:15:36,839 --> 00:15:40,440
attacker is able to masquerade as a web

354
00:15:40,440 --> 00:15:42,420
application when communicating with

355
00:15:42,420 --> 00:15:44,339
other websites

356
00:15:44,339 --> 00:15:46,199
um and this might also include other

357
00:15:46,199 --> 00:15:51,120
applications or other systems so uh

358
00:15:51,120 --> 00:15:53,940
um uh how dangerous is this

359
00:15:53,940 --> 00:15:56,220
um and and probably I I must say that as

360
00:15:56,220 --> 00:15:59,160
a Seraph is probably the most

361
00:15:59,160 --> 00:16:01,980
um type of vulnerability that is not

362
00:16:01,980 --> 00:16:04,860
given a lot of importance

363
00:16:04,860 --> 00:16:07,260
um however in reality

364
00:16:07,260 --> 00:16:09,360
um this vulnerability is uh getting more

365
00:16:09,360 --> 00:16:12,180
and more dangerous every single day and

366
00:16:12,180 --> 00:16:15,180
many web applications are known as many

367
00:16:15,180 --> 00:16:17,040
web applications are now relying on

368
00:16:17,040 --> 00:16:20,339
implicitly trusted apis for internal

369
00:16:20,339 --> 00:16:21,660
communication

370
00:16:21,660 --> 00:16:25,139
so that means that ssrf attacks can

371
00:16:25,139 --> 00:16:29,339
easily be dangerous and as they can

372
00:16:29,339 --> 00:16:31,199
allow attackers to obtain an

373
00:16:31,199 --> 00:16:34,740
authenticated API access via a trusted

374
00:16:34,740 --> 00:16:36,600
server

375
00:16:36,600 --> 00:16:40,500
um and uh as a quick example in 2019 I

376
00:16:40,500 --> 00:16:42,740
misconfigured web application firewall

377
00:16:42,740 --> 00:16:46,860
allowed a guy called Paige Thompson

378
00:16:46,860 --> 00:16:49,500
um he was a somewhat troubled individual

379
00:16:49,500 --> 00:16:51,240
to acquire

380
00:16:51,240 --> 00:16:54,060
um AWS success keys by exploiting an

381
00:16:54,060 --> 00:16:56,160
ssrf vulnerability

382
00:16:56,160 --> 00:16:58,920
so Thompson had gained access to data

383
00:16:58,920 --> 00:17:01,380
from approximately 106 million Capital

384
00:17:01,380 --> 00:17:03,480
One customers in the United States and

385
00:17:03,480 --> 00:17:04,439
Canada

386
00:17:04,439 --> 00:17:06,839
and although this incident put the word

387
00:17:06,839 --> 00:17:10,740
on high alert ssrf continues on a steady

388
00:17:10,740 --> 00:17:14,099
climb and we see that it is back up to

389
00:17:14,099 --> 00:17:17,220
being found in 15 of organizations in

390
00:17:17,220 --> 00:17:19,439
2021

391
00:17:19,439 --> 00:17:21,900
um and that as I as I mentioned probably

392
00:17:21,900 --> 00:17:25,079
we need more Awareness on server-side

393
00:17:25,079 --> 00:17:27,720
requests for jury and the impact that it

394
00:17:27,720 --> 00:17:30,660
might have on organizations and I

395
00:17:30,660 --> 00:17:33,179
personally feel that this is why we are

396
00:17:33,179 --> 00:17:34,220
seeing

397
00:17:34,220 --> 00:17:36,840
this vulnerability as

398
00:17:36,840 --> 00:17:41,840
um so prevalent in in the last few years

399
00:17:42,380 --> 00:17:46,919
so uh moving on to another top offender

400
00:17:46,919 --> 00:17:50,460
um that has been uh with us for I would

401
00:17:50,460 --> 00:17:51,780
say

402
00:17:51,780 --> 00:17:54,539
um a very good number of years if I

403
00:17:54,539 --> 00:17:57,960
remember correctly since uh 2007 or

404
00:17:57,960 --> 00:17:59,340
eight

405
00:17:59,340 --> 00:18:01,679
um at the time when

406
00:18:01,679 --> 00:18:03,360
um and this time I'm talking about test

407
00:18:03,360 --> 00:18:04,620
fuel injection

408
00:18:04,620 --> 00:18:06,539
um at the time when this was discovered

409
00:18:06,539 --> 00:18:09,179
most of the web applications were still

410
00:18:09,179 --> 00:18:12,120
using Microsoft Access as their backend

411
00:18:12,120 --> 00:18:14,160
database

412
00:18:14,160 --> 00:18:16,500
um so SQL injection is a vulnerability

413
00:18:16,500 --> 00:18:19,799
uh that allows malicious actors to

414
00:18:19,799 --> 00:18:21,299
modify

415
00:18:21,299 --> 00:18:23,580
um and or replace queries that an

416
00:18:23,580 --> 00:18:26,520
application sends to uh to a database

417
00:18:26,520 --> 00:18:29,220
and uh so technically speaking SQL

418
00:18:29,220 --> 00:18:32,039
injection is uh very easy to prevent

419
00:18:32,039 --> 00:18:34,260
with modern web web languages and

420
00:18:34,260 --> 00:18:35,700
Frameworks

421
00:18:35,700 --> 00:18:40,440
um as these modern Frameworks try to

422
00:18:40,440 --> 00:18:44,039
um Force the developers to uh I'm

423
00:18:44,039 --> 00:18:45,720
completely avoid this type of

424
00:18:45,720 --> 00:18:48,240
vulnerability

425
00:18:48,240 --> 00:18:51,600
um so uh it's a persistent presence as

426
00:18:51,600 --> 00:18:53,820
seen from this graph it's a reminder

427
00:18:53,820 --> 00:18:56,340
that application security starts with

428
00:18:56,340 --> 00:18:58,860
educating developers to correctly and

429
00:18:58,860 --> 00:19:00,480
consistently use the available

430
00:19:00,480 --> 00:19:03,000
safeguards and in fact we have seen

431
00:19:03,000 --> 00:19:06,799
instances where developers try to

432
00:19:06,799 --> 00:19:08,940
disable this

433
00:19:08,940 --> 00:19:12,179
um for whatever reason they might have

434
00:19:12,179 --> 00:19:15,000
so uh we feel it's this is our worrisome

435
00:19:15,000 --> 00:19:18,600
sign that we're seeing uh so many SQL

436
00:19:18,600 --> 00:19:20,840
injection vulnerabilities

437
00:19:20,840 --> 00:19:26,039
and we we need to do more about this

438
00:19:26,039 --> 00:19:28,140
so uh

439
00:19:28,140 --> 00:19:30,660
um one example of where ethical

440
00:19:30,660 --> 00:19:33,480
injection has caused a big amount of

441
00:19:33,480 --> 00:19:34,860
problems

442
00:19:34,860 --> 00:19:36,320
um and

443
00:19:36,320 --> 00:19:40,980
is in 2019 where an SQL injection

444
00:19:40,980 --> 00:19:43,320
variability resulted in the depth of

445
00:19:43,320 --> 00:19:46,440
text Data of millions of Bulgarian

446
00:19:46,440 --> 00:19:47,880
citizens

447
00:19:47,880 --> 00:19:51,539
and uh uh the attackers were able to uh

448
00:19:51,539 --> 00:19:54,840
pull records dating back 10 years and

449
00:19:54,840 --> 00:19:57,480
these records were then exposed to on

450
00:19:57,480 --> 00:19:59,760
underground forums

451
00:19:59,760 --> 00:20:02,400
um and uh these included things like

452
00:20:02,400 --> 00:20:04,820
full names income information personal

453
00:20:04,820 --> 00:20:07,320
identifiable identification numbers

454
00:20:07,320 --> 00:20:11,039
Social benefits and and more

455
00:20:11,039 --> 00:20:14,280
um so yeah it's um it's once again this

456
00:20:14,280 --> 00:20:16,559
is one of the uh attacks that uh should

457
00:20:16,559 --> 00:20:19,919
be prevented at at all costs

458
00:20:19,919 --> 00:20:22,919
however um I would like us to uh maybe

459
00:20:22,919 --> 00:20:24,600
post a bit on a screen injection and

460
00:20:24,600 --> 00:20:26,940
focus a bit more on it because

461
00:20:26,940 --> 00:20:28,620
um as I mentioned uh before this

462
00:20:28,620 --> 00:20:30,600
vulnerability has been around for quite

463
00:20:30,600 --> 00:20:32,940
a while and there has been a lot being

464
00:20:32,940 --> 00:20:34,140
done

465
00:20:34,140 --> 00:20:36,840
um to try and avoid it mostly because of

466
00:20:36,840 --> 00:20:39,000
its consequences

467
00:20:39,000 --> 00:20:43,679
and uh considering that uh that we are

468
00:20:43,679 --> 00:20:46,260
seeing so many high results on SQL

469
00:20:46,260 --> 00:20:47,940
injection we said we said okay let's dig

470
00:20:47,940 --> 00:20:50,700
deeper and try to identify why this is

471
00:20:50,700 --> 00:20:52,320
happening

472
00:20:52,320 --> 00:20:55,919
and uh and uh in our data so when we

473
00:20:55,919 --> 00:20:57,840
analyzed our data and we analyzed like

474
00:20:57,840 --> 00:21:00,059
uh where we are finding these type of

475
00:21:00,059 --> 00:21:03,900
vulnerabilities and we found that 35 of

476
00:21:03,900 --> 00:21:06,780
Education institutions and 32 percent of

477
00:21:06,780 --> 00:21:09,360
government organizations such as the one

478
00:21:09,360 --> 00:21:10,860
that we have seen at the Bulgaria

479
00:21:10,860 --> 00:21:12,660
example

480
00:21:12,660 --> 00:21:14,700
um had found at least one occurrence of

481
00:21:14,700 --> 00:21:17,059
an SQL injection vulnerability

482
00:21:17,059 --> 00:21:20,520
and uh this uh no we started thinking

483
00:21:20,520 --> 00:21:23,160
about this what does this mean and uh

484
00:21:23,160 --> 00:21:26,340
the reality of application security is

485
00:21:26,340 --> 00:21:29,159
that it is not always about securing the

486
00:21:29,159 --> 00:21:31,020
latest and greatest cutting-edge

487
00:21:31,020 --> 00:21:32,940
Technologies

488
00:21:32,940 --> 00:21:34,559
um when we talk deeper into this we

489
00:21:34,559 --> 00:21:35,880
found that most of these web

490
00:21:35,880 --> 00:21:38,880
applications were using all their legacy

491
00:21:38,880 --> 00:21:40,140
code

492
00:21:40,140 --> 00:21:40,919
um

493
00:21:40,919 --> 00:21:44,880
and for most of these organizations

494
00:21:44,880 --> 00:21:48,419
um it's uh it's a significant expense

495
00:21:48,419 --> 00:21:52,159
and a significant effort to try and

496
00:21:52,159 --> 00:21:56,580
modernize and it might also leads to uh

497
00:21:56,580 --> 00:21:59,100
significant risks because like changing

498
00:21:59,100 --> 00:22:02,000
a web application try to assuming that

499
00:22:02,000 --> 00:22:04,799
some functionality might might be lost

500
00:22:04,799 --> 00:22:06,679
in the process

501
00:22:06,679 --> 00:22:10,140
and so what does this mean for us

502
00:22:10,140 --> 00:22:12,240
um that means that we have to secure and

503
00:22:12,240 --> 00:22:15,120
keep in mind both Legacy and Cutting

504
00:22:15,120 --> 00:22:16,159
Edge

505
00:22:16,159 --> 00:22:19,320
technology you use web applications that

506
00:22:19,320 --> 00:22:21,240
using Cutting Edge Technologies

507
00:22:21,240 --> 00:22:24,900
and you have to do uh this um equally

508
00:22:24,900 --> 00:22:28,080
well for both types of systems

509
00:22:28,080 --> 00:22:29,940
um keeping in mind that at the end of

510
00:22:29,940 --> 00:22:32,640
the day we are not succeeding in our

511
00:22:32,640 --> 00:22:33,840
mission

512
00:22:33,840 --> 00:22:36,240
um unless we help secure everything and

513
00:22:36,240 --> 00:22:37,679
everyone

514
00:22:37,679 --> 00:22:38,700
um

515
00:22:38,700 --> 00:22:41,820
that we can that we are able to secure

516
00:22:41,820 --> 00:22:43,620
so uh

517
00:22:43,620 --> 00:22:46,679
um once again these uh data points this

518
00:22:46,679 --> 00:22:49,080
data leads to the fact that there is an

519
00:22:49,080 --> 00:22:51,659
SQL injection continues to be so common

520
00:22:51,659 --> 00:22:53,760
it's not necessarily that modern

521
00:22:53,760 --> 00:22:56,340
applications are not vulnerable to SQL

522
00:22:56,340 --> 00:22:59,520
injection because in reality that may be

523
00:22:59,520 --> 00:23:01,980
and we have found multiple instances of

524
00:23:01,980 --> 00:23:04,260
where this was the case

525
00:23:04,260 --> 00:23:06,120
um however we need to keep in mind that

526
00:23:06,120 --> 00:23:08,600
a lot of these type of vulnerabilities

527
00:23:08,600 --> 00:23:11,520
boils back to the fact that Legacy code

528
00:23:11,520 --> 00:23:15,000
and Legacy applications needs still need

529
00:23:15,000 --> 00:23:16,799
to be secured and still need to be

530
00:23:16,799 --> 00:23:20,480
checked for for vulnerabilities

531
00:23:21,679 --> 00:23:23,220
so

532
00:23:23,220 --> 00:23:25,679
um uh I think we can move on from SQL

533
00:23:25,679 --> 00:23:28,140
injection and uh the next vulnerability

534
00:23:28,140 --> 00:23:31,020
we have uh analyzed this local file

535
00:23:31,020 --> 00:23:33,059
inclusion

536
00:23:33,059 --> 00:23:36,600
um or lfi for short and this type of

537
00:23:36,600 --> 00:23:39,780
vulnerability allows Bad actors to trick

538
00:23:39,780 --> 00:23:42,360
a web application into exposing or

539
00:23:42,360 --> 00:23:44,940
running specific files on the server

540
00:23:44,940 --> 00:23:46,760
yeah

541
00:23:46,760 --> 00:23:49,799
so uh historically this type of

542
00:23:49,799 --> 00:23:52,980
vulnerability lfi has been primarily

543
00:23:52,980 --> 00:23:57,059
associated with PHP so they're

544
00:23:57,059 --> 00:24:00,299
persistent in our reports can safely be

545
00:24:00,299 --> 00:24:03,000
correlated to the continued popularity

546
00:24:03,000 --> 00:24:05,840
of PHP based applications and plugins

547
00:24:05,840 --> 00:24:11,159
I'm keeping in mind that I'm a good

548
00:24:11,159 --> 00:24:14,400
amount of the uh internet or the web

549
00:24:14,400 --> 00:24:18,179
space is actually being run on WordPress

550
00:24:18,179 --> 00:24:20,520
um which is the back end of Wordpress is

551
00:24:20,520 --> 00:24:21,539
PHP

552
00:24:21,539 --> 00:24:25,740
so uh what we're seeing here is that

553
00:24:25,740 --> 00:24:30,000
um after a slight uh dip in in 2019 and

554
00:24:30,000 --> 00:24:32,460
lfi is back in business it increased in

555
00:24:32,460 --> 00:24:35,760
2020 and again in 2021

556
00:24:35,760 --> 00:24:38,340
um uh so uh we're sort of hoping that

557
00:24:38,340 --> 00:24:40,260
history will not repeat itself and I'm

558
00:24:40,260 --> 00:24:43,620
saying this because uh um in 2016 there

559
00:24:43,620 --> 00:24:46,320
was an attack on uh on a website called

560
00:24:46,320 --> 00:24:49,980
Adult Friend Finder and uh this type of

561
00:24:49,980 --> 00:24:52,380
attack show that's how dangerous the 500

562
00:24:52,380 --> 00:24:54,120
abilities can be

563
00:24:54,120 --> 00:24:56,580
um in this case the uh the attackers

564
00:24:56,580 --> 00:24:59,039
were able to use this exploit to access

565
00:24:59,039 --> 00:25:02,640
information for for 112 million user

566
00:25:02,640 --> 00:25:05,159
accounts and this included information

567
00:25:05,159 --> 00:25:07,380
such as emails passwords and

568
00:25:07,380 --> 00:25:09,179
confidential data about the relationship

569
00:25:09,179 --> 00:25:10,039
status

570
00:25:10,039 --> 00:25:13,320
and uh not only is this problem

571
00:25:13,320 --> 00:25:16,260
is the problem this specific breach and

572
00:25:16,260 --> 00:25:18,120
we need to keep in mind that whenever

573
00:25:18,120 --> 00:25:19,860
there is such a breach

574
00:25:19,860 --> 00:25:21,840
um the email addresses and the passwords

575
00:25:21,840 --> 00:25:24,539
obtained for these users

576
00:25:24,539 --> 00:25:26,880
um you are guaranteed that uh attackers

577
00:25:26,880 --> 00:25:28,740
are going to try and use them on other

578
00:25:28,740 --> 00:25:32,039
websites to gain access to user account

579
00:25:32,039 --> 00:25:34,140
and additional user information from the

580
00:25:34,140 --> 00:25:38,220
other sites so well so yeah so although

581
00:25:38,220 --> 00:25:41,220
lfi might not be high on on our list in

582
00:25:41,220 --> 00:25:43,320
terms of security

583
00:25:43,320 --> 00:25:45,840
um we need to continue paying attention

584
00:25:45,840 --> 00:25:48,120
to this type of vulnerabilities as they

585
00:25:48,120 --> 00:25:53,039
can be easily escalated further

586
00:25:53,960 --> 00:25:55,919
so uh

587
00:25:55,919 --> 00:25:58,740
um I would like to take a look now at uh

588
00:25:58,740 --> 00:26:00,659
another type of vulnerability

589
00:26:00,659 --> 00:26:05,419
um which is OS command injection and

590
00:26:05,419 --> 00:26:08,340
this type of vulnerability it lets

591
00:26:08,340 --> 00:26:10,980
attackers execute system commands

592
00:26:10,980 --> 00:26:13,620
through a web application

593
00:26:13,620 --> 00:26:16,679
um and it is often overlooked

594
00:26:16,679 --> 00:26:18,960
um however it saw an alarming jump

595
00:26:18,960 --> 00:26:24,600
between 20 20 and 2021 and uh many

596
00:26:24,600 --> 00:26:26,820
people might might see this and in fact

597
00:26:26,820 --> 00:26:28,799
it's very similar to a remote code

598
00:26:28,799 --> 00:26:32,340
execution and the rise in command

599
00:26:32,340 --> 00:26:34,620
injection flaws may be related to the

600
00:26:34,620 --> 00:26:38,240
popularity of modular and containerized

601
00:26:38,240 --> 00:26:40,679
deployments where each service or

602
00:26:40,679 --> 00:26:42,720
microservice potentially presents a

603
00:26:42,720 --> 00:26:46,080
separate injection Target and that might

604
00:26:46,080 --> 00:26:47,880
explain the rise that we are seeing over

605
00:26:47,880 --> 00:26:49,799
here

606
00:26:49,799 --> 00:26:53,520
um so if you want to know how bad it can

607
00:26:53,520 --> 00:26:56,159
be we just need to look at Shell Shock

608
00:26:56,159 --> 00:26:58,380
which is a widely known vulnerability

609
00:26:58,380 --> 00:27:00,779
that enabled Malaysia sectors to inject

610
00:27:00,779 --> 00:27:04,620
OS commands and take control

611
00:27:04,620 --> 00:27:08,279
um and within hours of the vulnerability

612
00:27:08,279 --> 00:27:10,620
um disclosure and uh

613
00:27:10,620 --> 00:27:14,220
in 2014 so the attackers were able to uh

614
00:27:14,220 --> 00:27:17,159
exploit the flow and create a number of

615
00:27:17,159 --> 00:27:20,039
computer botnets that performed millions

616
00:27:20,039 --> 00:27:24,360
of leaders worldwide attacks

617
00:27:24,360 --> 00:27:26,220
um so once again

618
00:27:26,220 --> 00:27:27,900
um it is not how the individual

619
00:27:27,900 --> 00:27:29,580
vulnerability

620
00:27:29,580 --> 00:27:32,039
um has been exploited

621
00:27:32,039 --> 00:27:34,620
um but as we're seeing in this case the

622
00:27:34,620 --> 00:27:37,980
vulnerability was escalated to do much

623
00:27:37,980 --> 00:27:40,919
more damage than uh than what the

624
00:27:40,919 --> 00:27:44,480
individual vulnerability could do

625
00:27:47,100 --> 00:27:50,580
so uh we move on to another top offender

626
00:27:50,580 --> 00:27:52,380
um cross-eyed scripting

627
00:27:52,380 --> 00:27:56,039
um so well I think when people start uh

628
00:27:56,039 --> 00:28:00,080
at in web security like the first to uh

629
00:28:00,080 --> 00:28:02,460
vulnerabilities that they uh start

630
00:28:02,460 --> 00:28:03,960
learning about would be SQL injection

631
00:28:03,960 --> 00:28:06,779
and beside scripting um and uh

632
00:28:06,779 --> 00:28:08,279
cross-sized scripting is obviously going

633
00:28:08,279 --> 00:28:10,200
to feature in our report

634
00:28:10,200 --> 00:28:12,120
um as it is one it's still one of the

635
00:28:12,120 --> 00:28:15,299
most common flaws in the block it saw a

636
00:28:15,299 --> 00:28:18,000
slight Improvement in 2020 I'm going to

637
00:28:18,000 --> 00:28:22,440
uh 65 percent however it bounced back to

638
00:28:22,440 --> 00:28:26,520
seven to one percent in 2021.

639
00:28:26,520 --> 00:28:29,700
so well we we see this as a very common

640
00:28:29,700 --> 00:28:32,940
web vulnerability and uh to give us more

641
00:28:32,940 --> 00:28:34,679
explanation it allows attackers to

642
00:28:34,679 --> 00:28:36,360
inject

643
00:28:36,360 --> 00:28:38,580
um their malicious JavaScript code and

644
00:28:38,580 --> 00:28:41,220
execute that in the user's browser

645
00:28:41,220 --> 00:28:44,640
and uh though considered a low impact

646
00:28:44,640 --> 00:28:47,820
vulnerability by many Developers

647
00:28:47,820 --> 00:28:49,740
um cross-site scripting is dangerous

648
00:28:49,740 --> 00:28:52,500
because it can open the way to sensitive

649
00:28:52,500 --> 00:28:54,559
data disclosure

650
00:28:54,559 --> 00:28:57,900
and that includes session hijacking

651
00:28:57,900 --> 00:29:00,720
redirecting to malicious sites malware

652
00:29:00,720 --> 00:29:03,480
installation and possibly other social

653
00:29:03,480 --> 00:29:06,779
engineering attacks so these are make

654
00:29:06,779 --> 00:29:08,820
cross-site scripting quite quite

655
00:29:08,820 --> 00:29:09,960
dangerous

656
00:29:09,960 --> 00:29:11,880
so uh

657
00:29:11,880 --> 00:29:14,520
um cross-site scripting has been has

658
00:29:14,520 --> 00:29:17,400
made serious waves in the past

659
00:29:17,400 --> 00:29:21,000
um a quick example is uh the 2008

660
00:29:21,000 --> 00:29:24,960
British Airways um attack where it found

661
00:29:24,960 --> 00:29:27,539
itself in the media as a cross-site

662
00:29:27,539 --> 00:29:30,840
scripting exploit led to a data breach

663
00:29:30,840 --> 00:29:33,059
impacting 280

664
00:29:33,059 --> 00:29:36,240
000 booking transactions and security

665
00:29:36,240 --> 00:29:39,299
research I suspected that the attack was

666
00:29:39,299 --> 00:29:42,360
linked to magecard which is a hacking

667
00:29:42,360 --> 00:29:44,880
group that notoriously uses card

668
00:29:44,880 --> 00:29:47,220
scheming techniques and malicious code

669
00:29:47,220 --> 00:29:48,860
injections

670
00:29:48,860 --> 00:29:51,960
and uh well that was one of the many

671
00:29:51,960 --> 00:29:53,940
attacks that that happened using

672
00:29:53,940 --> 00:29:55,679
cross-site scripting

673
00:29:55,679 --> 00:29:57,419
um I would say that most of the others

674
00:29:57,419 --> 00:29:59,039
might go unnoticed because they might be

675
00:29:59,039 --> 00:30:02,460
infecting affecting some single users

676
00:30:02,460 --> 00:30:03,720
nonetheless

677
00:30:03,720 --> 00:30:05,880
um cross-site scripting is still a very

678
00:30:05,880 --> 00:30:07,679
important vulnerability that should not

679
00:30:07,679 --> 00:30:10,200
be overlooked

680
00:30:10,200 --> 00:30:14,279
and uh yes and as we're seeing here

681
00:30:14,279 --> 00:30:14,899
um

682
00:30:14,899 --> 00:30:17,340
cross-site scripting is still slipping

683
00:30:17,340 --> 00:30:21,240
under the radar and it's we're

684
00:30:21,240 --> 00:30:23,340
constantly finding uh this type of

685
00:30:23,340 --> 00:30:25,679
vulnerability over and over again

686
00:30:25,679 --> 00:30:28,220
foreign

687
00:30:33,440 --> 00:30:35,700
variability which is a cross-site

688
00:30:35,700 --> 00:30:38,760
request forgery

689
00:30:38,760 --> 00:30:42,899
um or csrf for short and csrf is a

690
00:30:42,899 --> 00:30:45,600
credentials management flow and it gives

691
00:30:45,600 --> 00:30:47,700
that attackers the ability to trick end

692
00:30:47,700 --> 00:30:49,919
users into performing unintended

693
00:30:49,919 --> 00:30:52,520
operations

694
00:30:53,240 --> 00:30:56,220
and uh once again it's one of the oldest

695
00:30:56,220 --> 00:30:58,620
the web vulnerability classes and it

696
00:30:58,620 --> 00:31:01,140
continues to appear frequently despite

697
00:31:01,140 --> 00:31:04,320
well-known server mitigations although

698
00:31:04,320 --> 00:31:06,779
we can expect advances in browser

699
00:31:06,779 --> 00:31:09,659
security to slowly make it less relevant

700
00:31:09,659 --> 00:31:12,539
in in the coming years which is somewhat

701
00:31:12,539 --> 00:31:14,880
good to hear

702
00:31:14,880 --> 00:31:17,700
um so uh this type of uh vulnerability

703
00:31:17,700 --> 00:31:20,220
is most often conducted through social

704
00:31:20,220 --> 00:31:22,500
engineering attack

705
00:31:22,500 --> 00:31:25,559
um such as for example via an email or

706
00:31:25,559 --> 00:31:28,860
to an altered link and uh in this case

707
00:31:28,860 --> 00:31:31,559
um instances of csrf will typically only

708
00:31:31,559 --> 00:31:34,020
cause harm to a single user that's being

709
00:31:34,020 --> 00:31:35,220
targeted

710
00:31:35,220 --> 00:31:36,720
however

711
00:31:36,720 --> 00:31:39,000
um if the attacker targets an executive

712
00:31:39,000 --> 00:31:42,240
or a primary administrator that singles

713
00:31:42,240 --> 00:31:44,820
users actions may also escalate to more

714
00:31:44,820 --> 00:31:47,159
their consequences so this is the reason

715
00:31:47,159 --> 00:31:50,340
why we decided to include the csrf in

716
00:31:50,340 --> 00:31:51,720
our report

717
00:31:51,720 --> 00:31:54,419
and one example would be that the

718
00:31:54,419 --> 00:31:56,279
attacker might uh

719
00:31:56,279 --> 00:31:58,500
and be able to gain access to an

720
00:31:58,500 --> 00:32:01,320
administrative interface of the web

721
00:32:01,320 --> 00:32:03,659
application that would only be available

722
00:32:03,659 --> 00:32:05,340
to the administrator of the web

723
00:32:05,340 --> 00:32:08,580
application and then potentially

724
00:32:08,580 --> 00:32:10,980
um they escalate the attack to either

725
00:32:10,980 --> 00:32:15,120
take over the the website or download

726
00:32:15,120 --> 00:32:17,760
the entire database

727
00:32:17,760 --> 00:32:20,399
so once again an important vulnerability

728
00:32:20,399 --> 00:32:21,360
to

729
00:32:21,360 --> 00:32:23,520
keep in mind

730
00:32:23,520 --> 00:32:27,480
so uh why do these vulnerabilities keep

731
00:32:27,480 --> 00:32:28,799
appearing

732
00:32:28,799 --> 00:32:29,779
um

733
00:32:29,779 --> 00:32:34,080
we we uh we do not seem to be uh paying

734
00:32:34,080 --> 00:32:36,240
close attention to this question and uh

735
00:32:36,240 --> 00:32:39,059
we'll try to speculate uh why

736
00:32:39,059 --> 00:32:42,899
um so in our Focus to uh shift to the

737
00:32:42,899 --> 00:32:46,500
cloud and enabling hybrid workforces for

738
00:32:46,500 --> 00:32:49,260
Success it's never been clearer that web

739
00:32:49,260 --> 00:32:52,080
application security needs to stay at

740
00:32:52,080 --> 00:32:54,360
the top of Mind of for organizations

741
00:32:54,360 --> 00:32:57,320
small and large

742
00:32:57,320 --> 00:33:00,840
and for those adjusting to this new

743
00:33:00,840 --> 00:33:04,260
reality of hybrid remote work it's not

744
00:33:04,260 --> 00:33:05,520
an easy feat

745
00:33:05,520 --> 00:33:08,100
um according to the latest ESG uh

746
00:33:08,100 --> 00:33:10,799
research support 69 percent of

747
00:33:10,799 --> 00:33:13,080
organizations found that difficulties

748
00:33:13,080 --> 00:33:15,960
around security hygiene and post share

749
00:33:15,960 --> 00:33:18,120
management has increased in the last two

750
00:33:18,120 --> 00:33:20,658
two years

751
00:33:21,000 --> 00:33:23,340
and as we all know

752
00:33:23,340 --> 00:33:25,919
um there is a massive Talent shortage in

753
00:33:25,919 --> 00:33:28,559
I.T security that is contributing to the

754
00:33:28,559 --> 00:33:30,960
ongoing problem and once again according

755
00:33:30,960 --> 00:33:32,880
to ESG

756
00:33:32,880 --> 00:33:37,279
um 70 of information security

757
00:33:37,279 --> 00:33:40,140
Association members site that cyber

758
00:33:40,140 --> 00:33:43,260
security skill Gap as having an impact

759
00:33:43,260 --> 00:33:47,460
on their company so um less security

760
00:33:47,460 --> 00:33:49,140
people

761
00:33:49,140 --> 00:33:50,820
um unfortunately

762
00:33:50,820 --> 00:33:53,640
um leaves web application

763
00:33:53,640 --> 00:33:55,860
um not tested enough for these type of

764
00:33:55,860 --> 00:33:58,519
vulnerabilities

765
00:33:59,399 --> 00:34:02,519
so uh in the previous edition of the

766
00:34:02,519 --> 00:34:04,980
University Absecon indicator

767
00:34:04,980 --> 00:34:07,200
um within the survey focused on the

768
00:34:07,200 --> 00:34:09,119
working relationship between security

769
00:34:09,119 --> 00:34:13,020
and development teams and what we can do

770
00:34:13,020 --> 00:34:15,300
to make lives easier for both sides of

771
00:34:15,300 --> 00:34:18,540
the island and the numbers are

772
00:34:18,540 --> 00:34:21,239
staggering on average 51 percent of web

773
00:34:21,239 --> 00:34:23,940
developers time spent chasing security

774
00:34:23,940 --> 00:34:28,199
issues and 80 percent of our responders

775
00:34:28,199 --> 00:34:30,418
to the survey noted that security

776
00:34:30,418 --> 00:34:33,899
processes delay delivery times somewhat

777
00:34:33,899 --> 00:34:35,760
or significantly

778
00:34:35,760 --> 00:34:38,820
and we also uncovered that one in three

779
00:34:38,820 --> 00:34:41,159
security issues and the remediation make

780
00:34:41,159 --> 00:34:42,659
it into production without getting

781
00:34:42,659 --> 00:34:45,000
flagged in the tester development stages

782
00:34:45,000 --> 00:34:48,239
so uh I would say that's quite a bit of

783
00:34:48,239 --> 00:34:50,159
information

784
00:34:50,159 --> 00:34:53,399
um and uh that's a big problem

785
00:34:53,399 --> 00:34:55,080
um and one that can easily hamper

786
00:34:55,080 --> 00:34:57,900
Innovation if left unchecked and leads

787
00:34:57,900 --> 00:35:00,540
to serious security risks that build up

788
00:35:00,540 --> 00:35:03,119
as a security depth when we are not

789
00:35:03,119 --> 00:35:07,080
looking so um this is why we need to

790
00:35:07,080 --> 00:35:09,060
constantly be checking our web

791
00:35:09,060 --> 00:35:10,740
applications

792
00:35:10,740 --> 00:35:13,800
um ideally any type of vulnerabilities

793
00:35:13,800 --> 00:35:16,260
are detected before the web application

794
00:35:16,260 --> 00:35:18,320
goes into production

795
00:35:18,320 --> 00:35:21,660
and uh having said that even once it has

796
00:35:21,660 --> 00:35:23,040
gone into production we should continue

797
00:35:23,040 --> 00:35:24,660
checking

798
00:35:24,660 --> 00:35:27,540
um the web application since there can

799
00:35:27,540 --> 00:35:29,640
be uh things like zero days like we've

800
00:35:29,640 --> 00:35:31,619
seen like the look for Shell

801
00:35:31,619 --> 00:35:34,200
um which can

802
00:35:34,200 --> 00:35:37,740
um which cannot be checked before

803
00:35:37,740 --> 00:35:39,300
um information about the vulnerability

804
00:35:39,300 --> 00:35:42,240
is is known and therefore it's once

805
00:35:42,240 --> 00:35:44,579
again it's important that um web

806
00:35:44,579 --> 00:35:46,680
applications are checked on a constant

807
00:35:46,680 --> 00:35:49,160
basis

808
00:35:49,260 --> 00:35:52,079
and so uh I'm sure all of you would love

809
00:35:52,079 --> 00:35:53,099
to know

810
00:35:53,099 --> 00:35:55,440
um what we can do then and how we do

811
00:35:55,440 --> 00:35:58,680
keep vulnerabilities vulnerabilities at

812
00:35:58,680 --> 00:36:02,099
Bay without sacrificing innovation

813
00:36:02,099 --> 00:36:04,440
um so how can we win this Innovation

814
00:36:04,440 --> 00:36:05,339
race

815
00:36:05,339 --> 00:36:08,520
and uh these were some vulnerability

816
00:36:08,520 --> 00:36:11,400
Trends in our scandata are solvable with

817
00:36:11,400 --> 00:36:12,720
the right approach to application

818
00:36:12,720 --> 00:36:14,040
security

819
00:36:14,040 --> 00:36:16,500
and here are just some success stories

820
00:36:16,500 --> 00:36:19,079
showcasing how modern abstract tooling

821
00:36:19,079 --> 00:36:21,900
has helped Enterprises solve some of the

822
00:36:21,900 --> 00:36:24,180
battles to have touched on today and you

823
00:36:24,180 --> 00:36:27,720
could not have said it better so these

824
00:36:27,720 --> 00:36:29,280
are

825
00:36:29,280 --> 00:36:31,619
um customers that

826
00:36:31,619 --> 00:36:33,060
um

827
00:36:33,060 --> 00:36:35,420
that have

828
00:36:35,420 --> 00:36:38,579
provided us with some best practices and

829
00:36:38,579 --> 00:36:41,900
that would like to share with you

830
00:36:42,060 --> 00:36:44,880
so um although the configuration of an

831
00:36:44,880 --> 00:36:47,579
upsec program varies from organization

832
00:36:47,579 --> 00:36:49,619
to organization

833
00:36:49,619 --> 00:36:52,560
and there are foundational elements and

834
00:36:52,560 --> 00:36:54,900
goals at the core of every company with

835
00:36:54,900 --> 00:36:57,060
a healthy security posture

836
00:36:57,060 --> 00:37:01,560
and these include the prioritization

837
00:37:01,560 --> 00:37:04,160
and we uh we usually focus on

838
00:37:04,160 --> 00:37:07,200
prioritizing secure design models that

839
00:37:07,200 --> 00:37:10,140
cover all the bases and baking security

840
00:37:10,140 --> 00:37:12,960
into the pre-code processes behind the

841
00:37:12,960 --> 00:37:15,839
application architecture of course and

842
00:37:15,839 --> 00:37:17,520
this can only be done with the right

843
00:37:17,520 --> 00:37:19,560
approaches and with the right training

844
00:37:19,560 --> 00:37:22,320
to uh to our developers to our designers

845
00:37:22,320 --> 00:37:25,280
to pretty much our all our

846
00:37:25,280 --> 00:37:28,400
devsecop operations

847
00:37:28,400 --> 00:37:32,760
and uh one key foundation and Foundation

848
00:37:32,760 --> 00:37:35,160
element is uh to break down silos

849
00:37:35,160 --> 00:37:38,700
between security and development and

850
00:37:38,700 --> 00:37:40,320
empower the teams to work

851
00:37:40,320 --> 00:37:42,240
cross-functionally on security

852
00:37:42,240 --> 00:37:44,880
roadblocks and unfortunately we see this

853
00:37:44,880 --> 00:37:49,560
very frequently and we often get um

854
00:37:49,560 --> 00:37:51,780
reports

855
00:37:51,780 --> 00:37:54,300
um being filed for web applications that

856
00:37:54,300 --> 00:37:56,220
are being scanned by the security

857
00:37:56,220 --> 00:37:59,160
engineer and the report would be filed

858
00:37:59,160 --> 00:38:01,320
by the administrator of the web

859
00:38:01,320 --> 00:38:02,880
application because he would not have

860
00:38:02,880 --> 00:38:04,560
known that the security engineer is

861
00:38:04,560 --> 00:38:08,160
running his own tests in the background

862
00:38:08,160 --> 00:38:10,099
um so we need to break down these uh

863
00:38:10,099 --> 00:38:13,440
these uh silos these impediments and get

864
00:38:13,440 --> 00:38:15,720
them to work more closely together and

865
00:38:15,720 --> 00:38:17,099
hopefully they will learn from each

866
00:38:17,099 --> 00:38:18,180
other

867
00:38:18,180 --> 00:38:20,579
um in the whole in the process

868
00:38:20,579 --> 00:38:21,900
um we would

869
00:38:21,900 --> 00:38:24,720
ideally make security a part of every

870
00:38:24,720 --> 00:38:26,820
stage of the development of the software

871
00:38:26,820 --> 00:38:29,099
development life cycle

872
00:38:29,099 --> 00:38:32,339
um once again I'm scanning uh both

873
00:38:32,339 --> 00:38:34,400
production apps and those in development

874
00:38:34,400 --> 00:38:37,980
is uh equally important

875
00:38:37,980 --> 00:38:40,619
um of course scanning production apps

876
00:38:40,619 --> 00:38:42,599
should be done to uh prevent

877
00:38:42,599 --> 00:38:44,880
vulnerabilities from making from going

878
00:38:44,880 --> 00:38:47,880
to production however once the web

879
00:38:47,880 --> 00:38:50,339
application is in production and that

880
00:38:50,339 --> 00:38:53,579
does not mean that it is uh super secure

881
00:38:53,579 --> 00:38:56,520
and because once again like any new

882
00:38:56,520 --> 00:38:59,160
vulnerabilities that are discovered that

883
00:38:59,160 --> 00:39:00,720
would mean that they are immediately

884
00:39:00,720 --> 00:39:03,619
available in your production server

885
00:39:03,619 --> 00:39:08,160
and uh we need to invest in robust tools

886
00:39:08,160 --> 00:39:11,400
and automate uh everything as much as

887
00:39:11,400 --> 00:39:15,200
possible and so that we fold

888
00:39:15,200 --> 00:39:18,599
and like this automation should be

889
00:39:18,599 --> 00:39:21,900
seamless and fold into uh our existing

890
00:39:21,900 --> 00:39:24,900
workflows and uh ideally we should

891
00:39:24,900 --> 00:39:27,599
provide and monitor analytics and

892
00:39:27,599 --> 00:39:29,400
Reporting

893
00:39:29,400 --> 00:39:30,960
um which would allow us to monitor

894
00:39:30,960 --> 00:39:34,560
success and also um monitor for any

895
00:39:34,560 --> 00:39:36,839
failures in order to improve on a

896
00:39:36,839 --> 00:39:38,099
constant basis

897
00:39:38,099 --> 00:39:41,160
and uh once again we should insist on

898
00:39:41,160 --> 00:39:43,380
accuracy from uh from the tools that

899
00:39:43,380 --> 00:39:46,079
have low false positive rates

900
00:39:46,079 --> 00:39:48,359
um and provide clear and actionable

901
00:39:48,359 --> 00:39:51,060
guidance for for developers so any tools

902
00:39:51,060 --> 00:39:53,700
that we use should not provide generic

903
00:39:53,700 --> 00:39:56,760
guidance but uh and uh specific guidance

904
00:39:56,760 --> 00:40:00,119
on the vulnerability and once again I'm

905
00:40:00,119 --> 00:40:02,700
here I think Victory we tend to focus a

906
00:40:02,700 --> 00:40:05,420
lot on uh first positives

907
00:40:05,420 --> 00:40:09,599
for the simple reason that um and they

908
00:40:09,599 --> 00:40:12,119
would distract the engineering team the

909
00:40:12,119 --> 00:40:13,680
security team

910
00:40:13,680 --> 00:40:17,099
um and they would reduce

911
00:40:17,099 --> 00:40:18,119
um

912
00:40:18,119 --> 00:40:22,700
the impact of of our tools

913
00:40:24,900 --> 00:40:28,500
um so uh success in modern application

914
00:40:28,500 --> 00:40:30,960
security requires more than just

915
00:40:30,960 --> 00:40:33,200
thoughtful and

916
00:40:33,200 --> 00:40:36,359
combination of skills and tools you need

917
00:40:36,359 --> 00:40:39,300
to uh we need to clear top-down

918
00:40:39,300 --> 00:40:43,140
initiatives and uh initiatives that the

919
00:40:43,140 --> 00:40:46,020
whole organization can follow and we

920
00:40:46,020 --> 00:40:49,140
also need to keep an eye on trends for

921
00:40:49,140 --> 00:40:51,839
what we call as what we call direct

922
00:40:51,839 --> 00:40:53,940
impact vulnerabilities such as the

923
00:40:53,940 --> 00:40:55,380
vulnerabilities that we have seen

924
00:40:55,380 --> 00:40:57,300
earlier on

925
00:40:57,300 --> 00:40:59,480
foreign

926
00:41:03,320 --> 00:41:06,240
vulnerability trends that we have seen

927
00:41:06,240 --> 00:41:08,760
um from our scan data are solvable with

928
00:41:08,760 --> 00:41:10,140
the right approach to application

929
00:41:10,140 --> 00:41:11,820
security

930
00:41:11,820 --> 00:41:14,940
um uh having said that it has to be

931
00:41:14,940 --> 00:41:18,480
um done on an ongoing basis and uh these

932
00:41:18,480 --> 00:41:21,180
are just two success stories for that we

933
00:41:21,180 --> 00:41:22,680
have had

934
00:41:22,680 --> 00:41:25,200
um uh showcasing how modern application

935
00:41:25,200 --> 00:41:28,020
security tooling has helped Enterprises

936
00:41:28,020 --> 00:41:29,760
solve some of the battles we have

937
00:41:29,760 --> 00:41:32,460
touched on today and we could not have

938
00:41:32,460 --> 00:41:34,619
said it better so these are

939
00:41:34,619 --> 00:41:36,480
um two of our customers that have left

940
00:41:36,480 --> 00:41:37,680
us

941
00:41:37,680 --> 00:41:39,900
um comments that we would like to share

942
00:41:39,900 --> 00:41:41,300
with everyone

943
00:41:41,300 --> 00:41:45,060
uh and that brings me to the end of my

944
00:41:45,060 --> 00:41:46,560
presentation

945
00:41:46,560 --> 00:41:49,140
um so I'll be happy to address any

946
00:41:49,140 --> 00:41:53,000
questions that uh that you might have

947
00:41:53,160 --> 00:41:55,440
yes thank you Nicholas

948
00:41:55,440 --> 00:41:57,720
um reminder to our attendees that you

949
00:41:57,720 --> 00:42:01,680
can ask questions in the Q a tab which

950
00:42:01,680 --> 00:42:05,280
you'll find on the right of this video

951
00:42:05,280 --> 00:42:09,839
we can give a few seconds for you for

952
00:42:09,839 --> 00:42:13,400
our attendees to submit questions

953
00:42:14,280 --> 00:42:16,940
foreign

954
00:42:21,500 --> 00:42:24,180
there was like a huge number of checks

955
00:42:24,180 --> 00:42:27,740
that were done around 23 billion that's

956
00:42:27,740 --> 00:42:31,020
that's astounding number can you tell us

957
00:42:31,020 --> 00:42:34,200
about those uh scans or checks that you

958
00:42:34,200 --> 00:42:37,440
mentioned in one of the earlier slides

959
00:42:37,440 --> 00:42:38,460
yes

960
00:42:38,460 --> 00:42:41,460
um so um just to make things clear we

961
00:42:41,460 --> 00:42:43,619
are talking about 23 billion Security

962
00:42:43,619 --> 00:42:46,859
checks across all our uh

963
00:42:46,859 --> 00:42:48,480
um across all these kinds that we have

964
00:42:48,480 --> 00:42:51,960
been doing so uh each uh Security check

965
00:42:51,960 --> 00:42:55,260
is uh one attempt to find one individual

966
00:42:55,260 --> 00:42:58,260
vulnerability in a portion of the web

967
00:42:58,260 --> 00:43:00,119
application

968
00:43:00,119 --> 00:43:03,180
um so uh talking to uh to our customers

969
00:43:03,180 --> 00:43:05,339
we see that they integrate our solution

970
00:43:05,339 --> 00:43:08,339
into their development pipelines and

971
00:43:08,339 --> 00:43:10,380
also they are scanning the same web

972
00:43:10,380 --> 00:43:12,780
application at multiple stages of the

973
00:43:12,780 --> 00:43:15,540
application life cycle so so they tend

974
00:43:15,540 --> 00:43:18,599
to test early and they also tend to test

975
00:43:18,599 --> 00:43:21,000
often and worked with them

976
00:43:21,000 --> 00:43:23,520
um so that they do this successfully

977
00:43:23,520 --> 00:43:25,680
so um

978
00:43:25,680 --> 00:43:29,280
um if you look if you think um that most

979
00:43:29,280 --> 00:43:31,380
of our customers are trying to do this

980
00:43:31,380 --> 00:43:33,780
and we help them do this

981
00:43:33,780 --> 00:43:35,940
um this translates into thousands of

982
00:43:35,940 --> 00:43:39,240
scans and each scan will run several

983
00:43:39,240 --> 00:43:41,819
thousands of Security checks sometimes

984
00:43:41,819 --> 00:43:43,079
even

985
00:43:43,079 --> 00:43:45,780
um more than that depending on how big

986
00:43:45,780 --> 00:43:48,900
the web application is and uh some of

987
00:43:48,900 --> 00:43:51,240
our customers are scanning hundreds and

988
00:43:51,240 --> 00:43:54,000
even thousands of web applications on a

989
00:43:54,000 --> 00:43:57,359
regular basis so this 23 billion is the

990
00:43:57,359 --> 00:44:00,180
grand total of all the checks

991
00:44:00,180 --> 00:44:02,640
um by our customers for from our

992
00:44:02,640 --> 00:44:04,980
cloud-based Solutions and uh if you

993
00:44:04,980 --> 00:44:07,619
think about it um it's

994
00:44:07,619 --> 00:44:10,200
considering all the number of scans that

995
00:44:10,200 --> 00:44:12,119
are being done and uh it's it's a bit

996
00:44:12,119 --> 00:44:13,680
looks like a big amount

997
00:44:13,680 --> 00:44:15,900
um and it is in fact big

998
00:44:15,900 --> 00:44:17,940
um but uh you know we're constantly

999
00:44:17,940 --> 00:44:19,920
increasing new checks and supporting new

1000
00:44:19,920 --> 00:44:22,020
technologies so that number is expected

1001
00:44:22,020 --> 00:44:25,220
to increase in the future

1002
00:44:25,380 --> 00:44:28,260
yeah definitely yeah let's you know scan

1003
00:44:28,260 --> 00:44:31,380
often is is good then

1004
00:44:31,380 --> 00:44:34,079
um kind of follow up on the the you

1005
00:44:34,079 --> 00:44:36,359
mentioned that customers do use it in

1006
00:44:36,359 --> 00:44:38,579
development and before production so

1007
00:44:38,579 --> 00:44:40,740
various maybe at security gates that

1008
00:44:40,740 --> 00:44:43,140
they have in their in their uh Pipeline

1009
00:44:43,140 --> 00:44:48,359
and uh what is the number of uh the

1010
00:44:48,359 --> 00:44:51,119
proportion I said between production

1011
00:44:51,119 --> 00:44:54,060
issues versus you know issues really

1012
00:44:54,060 --> 00:44:57,000
early on in the dev cycle can you tell

1013
00:44:57,000 --> 00:44:58,980
us about that

1014
00:44:58,980 --> 00:45:02,339
yes that's a bit of a it's a bit of an

1015
00:45:02,339 --> 00:45:04,920
interesting question because from our

1016
00:45:04,920 --> 00:45:07,980
perspective it's a bit difficult to say

1017
00:45:07,980 --> 00:45:09,720
um if the web application that we are

1018
00:45:09,720 --> 00:45:12,599
scanning is in production or not

1019
00:45:12,599 --> 00:45:16,140
um uh once again we try to uh work with

1020
00:45:16,140 --> 00:45:18,119
our customers to um

1021
00:45:18,119 --> 00:45:22,140
to scan as early as possible so uh um I

1022
00:45:22,140 --> 00:45:24,599
would say that probably 60 to 70 percent

1023
00:45:24,599 --> 00:45:27,200
of discounts would be uh pre-production

1024
00:45:27,200 --> 00:45:30,839
and having said that um we also stress

1025
00:45:30,839 --> 00:45:33,060
the importance of scanning production

1026
00:45:33,060 --> 00:45:35,280
web applications

1027
00:45:35,280 --> 00:45:37,740
um uh as mentioned in in the uh in the

1028
00:45:37,740 --> 00:45:39,960
presentation and these are equally

1029
00:45:39,960 --> 00:45:43,380
important as uh new vulnerabilities are

1030
00:45:43,380 --> 00:45:46,079
are always being discovered and are

1031
00:45:46,079 --> 00:45:48,359
always being implemented inside our

1032
00:45:48,359 --> 00:45:49,800
solution

1033
00:45:49,800 --> 00:45:54,300
so so keeping abreast of uh any new uh

1034
00:45:54,300 --> 00:45:56,280
security Trends

1035
00:45:56,280 --> 00:45:59,099
um is best and these should be applied

1036
00:45:59,099 --> 00:46:01,079
to uh both pre-production and also

1037
00:46:01,079 --> 00:46:04,099
production systems

1038
00:46:08,579 --> 00:46:10,319
thank you

1039
00:46:10,319 --> 00:46:13,079
let me check if we have any questions

1040
00:46:13,079 --> 00:46:15,680
there

1041
00:46:21,780 --> 00:46:24,000
all right so while we wait for any

1042
00:46:24,000 --> 00:46:27,000
audience questions there's um

1043
00:46:27,000 --> 00:46:29,579
I I do keep hearing that browsers

1044
00:46:29,579 --> 00:46:32,240
they're always trying to have security

1045
00:46:32,240 --> 00:46:35,819
improvements and try to eliminate some

1046
00:46:35,819 --> 00:46:38,300
of the things that are

1047
00:46:38,300 --> 00:46:40,800
issues on the browser side like

1048
00:46:40,800 --> 00:46:43,680
cross-site scripting uh cross-site plus

1049
00:46:43,680 --> 00:46:47,220
forgery uh do you see any of that

1050
00:46:47,220 --> 00:46:48,599
Improvement

1051
00:46:48,599 --> 00:46:52,920
um or how how do we try and reduce that

1052
00:46:52,920 --> 00:46:56,940
from the browser's side

1053
00:46:56,940 --> 00:46:58,380
well

1054
00:46:58,380 --> 00:47:01,619
um talking about csrf specifically we

1055
00:47:01,619 --> 00:47:04,560
are definitely expecting it to get less

1056
00:47:04,560 --> 00:47:07,980
and less common in the next few years

1057
00:47:07,980 --> 00:47:10,800
um they're already known and tested ways

1058
00:47:10,800 --> 00:47:13,920
to avoid cstrf like Kansas csrf token

1059
00:47:13,920 --> 00:47:16,920
same-site cookies and there is a good

1060
00:47:16,920 --> 00:47:19,740
browser support for them

1061
00:47:19,740 --> 00:47:22,200
um but this also has to be done on the

1062
00:47:22,200 --> 00:47:25,140
application side and uh it needs to be

1063
00:47:25,140 --> 00:47:27,720
done correctly so it really works so it

1064
00:47:27,720 --> 00:47:30,180
will really uh we'll really keep finding

1065
00:47:30,180 --> 00:47:33,000
some csrf caused by errors in the

1066
00:47:33,000 --> 00:47:35,700
implementation of these protections

1067
00:47:35,700 --> 00:47:38,520
um we already see this nowadays and we

1068
00:47:38,520 --> 00:47:40,920
expect to continue to see this and in

1069
00:47:40,920 --> 00:47:44,460
the next few years however csrf in from

1070
00:47:44,460 --> 00:47:46,980
what we can see it should be going down

1071
00:47:46,980 --> 00:47:49,440
um so

1072
00:47:49,440 --> 00:47:52,200
um with cross-site scripting it's really

1073
00:47:52,200 --> 00:47:54,599
a race between new ways of injecting

1074
00:47:54,599 --> 00:47:57,420
JavaScript into a site and ways of

1075
00:47:57,420 --> 00:48:01,079
detecting and preventing it

1076
00:48:01,079 --> 00:48:04,680
um so you you might uh probably remember

1077
00:48:04,680 --> 00:48:06,660
um these uh cross-site scripting filters

1078
00:48:06,660 --> 00:48:08,160
that were getting built into the

1079
00:48:08,160 --> 00:48:09,720
browsers

1080
00:48:09,720 --> 00:48:11,280
um and this started like a few years

1081
00:48:11,280 --> 00:48:13,800
back and now the browser vendors have

1082
00:48:13,800 --> 00:48:16,319
dropped them completely because

1083
00:48:16,319 --> 00:48:17,880
um they are deemed to be not as

1084
00:48:17,880 --> 00:48:19,079
effective

1085
00:48:19,079 --> 00:48:21,599
um they can only stop a fraction of the

1086
00:48:21,599 --> 00:48:23,819
many plus size scripting uh possible

1087
00:48:23,819 --> 00:48:27,780
attacks and this was uh somewhat causing

1088
00:48:27,780 --> 00:48:31,020
a false sense of security and uh

1089
00:48:31,020 --> 00:48:34,560
possibly making developers be a bit more

1090
00:48:34,560 --> 00:48:36,780
um sloppy in in how they try to detect

1091
00:48:36,780 --> 00:48:40,740
and prevent these so the flip side

1092
00:48:40,740 --> 00:48:43,079
um is that the attitude that developers

1093
00:48:43,079 --> 00:48:45,060
don't need to worry about uh precise

1094
00:48:45,060 --> 00:48:46,619
scripting

1095
00:48:46,619 --> 00:48:48,660
um uh because the browser will will stop

1096
00:48:48,660 --> 00:48:52,380
it and that's going to change

1097
00:48:52,380 --> 00:48:56,520
um and uh now every web application uses

1098
00:48:56,520 --> 00:48:58,700
JavaScript so as long as we keep getting

1099
00:48:58,700 --> 00:49:02,160
unsanitized user inputs and applications

1100
00:49:02,160 --> 00:49:03,780
um people are fine going to find new

1101
00:49:03,780 --> 00:49:07,319
ways to get JavaScript to be executed by

1102
00:49:07,319 --> 00:49:09,480
by the web application in order to

1103
00:49:09,480 --> 00:49:11,460
perform cross-site scripting

1104
00:49:11,460 --> 00:49:14,280
so uh in this case in the long run there

1105
00:49:14,280 --> 00:49:15,920
is likely to be more

1106
00:49:15,920 --> 00:49:19,079
use of Frameworks that limit the risk

1107
00:49:19,079 --> 00:49:20,640
however

1108
00:49:20,640 --> 00:49:22,740
um process scripting the way that we see

1109
00:49:22,740 --> 00:49:25,140
it in some way or form is likely here to

1110
00:49:25,140 --> 00:49:26,520
to stay

1111
00:49:26,520 --> 00:49:28,140
um even with all the work that's being

1112
00:49:28,140 --> 00:49:31,020
done from the framework side

1113
00:49:31,020 --> 00:49:33,540
um to limit the risk

1114
00:49:33,540 --> 00:49:36,180
okay yeah interesting I I wasn't aware

1115
00:49:36,180 --> 00:49:37,980
that some of these checks would have

1116
00:49:37,980 --> 00:49:40,260
been actually dropped by the browser so

1117
00:49:40,260 --> 00:49:43,079
yes that is concerning and all the more

1118
00:49:43,079 --> 00:49:45,680
important for developers to

1119
00:49:45,680 --> 00:49:49,140
understand of the basic security needs

1120
00:49:49,140 --> 00:49:51,599
and and then code it

1121
00:49:51,599 --> 00:49:53,160
yeah

1122
00:49:53,160 --> 00:49:55,819
okay

1123
00:49:56,640 --> 00:49:59,339
all right I think that brings us to our

1124
00:49:59,339 --> 00:50:01,619
session for today thank you so much

1125
00:50:01,619 --> 00:50:04,640
Nicholas that was very insightful

1126
00:50:04,640 --> 00:50:09,480
and thanks thanks for

1127
00:50:09,480 --> 00:50:10,440
for

1128
00:50:10,440 --> 00:50:13,940
um I'm getting me here

