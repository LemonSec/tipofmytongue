1
00:00:05,279 --> 00:00:07,980
hello everyone and welcome to the

2
00:00:07,980 --> 00:00:09,780
exhibitor track

3
00:00:09,780 --> 00:00:12,360
I'm hitesh pambani a volunteer in the

4
00:00:12,360 --> 00:00:14,639
OAS community and I'll be helping

5
00:00:14,639 --> 00:00:16,859
moderate this session

6
00:00:16,859 --> 00:00:19,859
during the next 45 minutes we'll be

7
00:00:19,859 --> 00:00:23,400
listening to Isaac

8
00:00:23,400 --> 00:00:25,859
um yeah and he's presenting

9
00:00:25,859 --> 00:00:28,439
a talk on flipping the script on

10
00:00:28,439 --> 00:00:30,420
application security

11
00:00:30,420 --> 00:00:31,439
okay

12
00:00:31,439 --> 00:00:33,120
so

13
00:00:33,120 --> 00:00:36,059
while we're while the session is going

14
00:00:36,059 --> 00:00:38,760
on uh feel free to submit any questions

15
00:00:38,760 --> 00:00:42,600
you have in the Q a tab that's going to

16
00:00:42,600 --> 00:00:45,000
be found on the right of this video in

17
00:00:45,000 --> 00:00:47,460
the whole platform

18
00:00:47,460 --> 00:00:49,500
and I'll be asking Isaac those questions

19
00:00:49,500 --> 00:00:52,079
on your behalf in the last 10 minutes of

20
00:00:52,079 --> 00:00:53,460
the session

21
00:00:53,460 --> 00:00:56,879
there's also a chat function and you can

22
00:00:56,879 --> 00:00:59,100
leave comments in chat in in your

23
00:00:59,100 --> 00:01:01,559
platform itself okay

24
00:01:01,559 --> 00:01:04,979
so our speaker today Isaac Cohen is a

25
00:01:04,979 --> 00:01:06,960
senior director of field security

26
00:01:06,960 --> 00:01:09,360
products at GitHub

27
00:01:09,360 --> 00:01:11,100
and and their mission is to help

28
00:01:11,100 --> 00:01:14,640
organizations ship software securely

29
00:01:14,640 --> 00:01:16,380
Isaac discovered his passion for

30
00:01:16,380 --> 00:01:18,540
automation while leading transformations

31
00:01:18,540 --> 00:01:21,720
in devsecops at large financial service

32
00:01:21,720 --> 00:01:23,820
companies

33
00:01:23,820 --> 00:01:25,740
and then from working in the center of

34
00:01:25,740 --> 00:01:29,100
cicd world there Isaac has extensive

35
00:01:29,100 --> 00:01:31,320
knowledge of devsecop's ecosystem

36
00:01:31,320 --> 00:01:34,619
practices in how to increase code

37
00:01:34,619 --> 00:01:38,100
quality and uh and what we all want is

38
00:01:38,100 --> 00:01:41,640
decrease the time to ship secure code

39
00:01:41,640 --> 00:01:45,600
with that said uh Isaac please thank you

40
00:01:45,600 --> 00:01:48,479
thank you so much uh so so excited to be

41
00:01:48,479 --> 00:01:50,700
talking to you all today uh I'm gonna be

42
00:01:50,700 --> 00:01:51,960
talking about what it means to actually

43
00:01:51,960 --> 00:01:54,299
flip the script on application security

44
00:01:54,299 --> 00:01:58,259
as we as we really know it today

45
00:01:58,259 --> 00:01:59,939
um I've split this talk into three

46
00:01:59,939 --> 00:02:02,100
sections so we're first going to talk

47
00:02:02,100 --> 00:02:04,560
about the state of application Security

48
00:02:04,560 --> 00:02:05,820
today

49
00:02:05,820 --> 00:02:08,220
only once we understand

50
00:02:08,220 --> 00:02:10,080
um the the state of application Security

51
00:02:10,080 --> 00:02:12,000
today we'll be able to understand more

52
00:02:12,000 --> 00:02:13,860
of this the challenges

53
00:02:13,860 --> 00:02:15,920
that we face

54
00:02:15,920 --> 00:02:18,120
improving application security and then

55
00:02:18,120 --> 00:02:20,099
we'll go through what it means to to

56
00:02:20,099 --> 00:02:22,860
actually have a developer first approach

57
00:02:22,860 --> 00:02:26,940
a developer first approach to security

58
00:02:26,940 --> 00:02:28,739
so let's begin

59
00:02:28,739 --> 00:02:33,180
the state of application Security today

60
00:02:33,180 --> 00:02:36,420
we've probably you've probably seen this

61
00:02:36,420 --> 00:02:39,480
slide beforehand right like the truth is

62
00:02:39,480 --> 00:02:42,599
we all want to shift security left

63
00:02:42,599 --> 00:02:45,720
I mean it kind of makes sense right if

64
00:02:45,720 --> 00:02:47,580
you find a bug if you find a

65
00:02:47,580 --> 00:02:50,519
vulnerability further on in the life

66
00:02:50,519 --> 00:02:53,580
cycle it's going to cost exponentially

67
00:02:53,580 --> 00:02:56,819
more than if you found it earlier on in

68
00:02:56,819 --> 00:02:58,739
that life cycle and so we see some of

69
00:02:58,739 --> 00:03:00,060
the numbers over here right like if you

70
00:03:00,060 --> 00:03:02,040
find an issue in development very cheap

71
00:03:02,040 --> 00:03:05,300
to fix 80 to fund an issue in production

72
00:03:05,300 --> 00:03:07,920
much more expensive right like it's it's

73
00:03:07,920 --> 00:03:10,260
exponential at that point 7600. of

74
00:03:10,260 --> 00:03:12,480
course you never want to get to a breach

75
00:03:12,480 --> 00:03:15,420
that you know four million dollars in

76
00:03:15,420 --> 00:03:18,000
that that's never where you want to go

77
00:03:18,000 --> 00:03:20,819
but the interesting thing when I look at

78
00:03:20,819 --> 00:03:22,980
this this chart when I look at this idea

79
00:03:22,980 --> 00:03:25,319
of Shifting left

80
00:03:25,319 --> 00:03:27,540
is that we've been talking about this

81
00:03:27,540 --> 00:03:30,120
for a very long time we've been talking

82
00:03:30,120 --> 00:03:31,800
about shifting left

83
00:03:31,800 --> 00:03:34,980
for at least a decade

84
00:03:34,980 --> 00:03:38,819
in fact if we go back a decade we we can

85
00:03:38,819 --> 00:03:41,220
actually see that the same chart that I

86
00:03:41,220 --> 00:03:44,400
was looking at with all the fancy graphs

87
00:03:44,400 --> 00:03:45,959
um in the previous chart you can see

88
00:03:45,959 --> 00:03:47,840
that this was actually

89
00:03:47,840 --> 00:03:52,379
a a survey uh um done by by the IBM team

90
00:03:52,379 --> 00:03:54,239
for their sales team

91
00:03:54,239 --> 00:03:56,040
um and essentially what they found was

92
00:03:56,040 --> 00:03:58,140
the same thing right like if you find an

93
00:03:58,140 --> 00:04:00,720
issue you find a bug during development

94
00:04:00,720 --> 00:04:02,819
it's much cheaper you can actually see

95
00:04:02,819 --> 00:04:04,980
the numbers are even the same right it's

96
00:04:04,980 --> 00:04:07,680
80 for defects over there finding it in

97
00:04:07,680 --> 00:04:09,060
production is seventy six hundred

98
00:04:09,060 --> 00:04:10,140
dollars

99
00:04:10,140 --> 00:04:12,480
so we've been talking about shift left

100
00:04:12,480 --> 00:04:15,720
for at least this the last decade

101
00:04:15,720 --> 00:04:18,238
my question is always going to be why

102
00:04:18,238 --> 00:04:21,238
like why are we still talking about this

103
00:04:21,238 --> 00:04:24,720
shift left concept

104
00:04:24,720 --> 00:04:27,180
we're also introducing vulnerabilities

105
00:04:27,180 --> 00:04:29,280
at the same rate so

106
00:04:29,280 --> 00:04:31,500
at GitHub because GitHub is really the

107
00:04:31,500 --> 00:04:34,440
center of of software right we're the

108
00:04:34,440 --> 00:04:36,660
center of the open source ecosystem we

109
00:04:36,660 --> 00:04:39,479
see a lot of the trends within software

110
00:04:39,479 --> 00:04:41,759
happening and and so

111
00:04:41,759 --> 00:04:44,160
the GitHub data science team did an

112
00:04:44,160 --> 00:04:47,220
analysis on well 70 million lines of

113
00:04:47,220 --> 00:04:49,380
Open Source Code so we could think about

114
00:04:49,380 --> 00:04:51,120
these projects like the kubernetes

115
00:04:51,120 --> 00:04:54,360
project or the Linux kernel

116
00:04:54,360 --> 00:04:58,440
and what we did was we mapped the amount

117
00:04:58,440 --> 00:05:01,199
of lines of code to the amount of

118
00:05:01,199 --> 00:05:02,639
security threats that were being

119
00:05:02,639 --> 00:05:05,759
introduced over time

120
00:05:05,759 --> 00:05:08,699
and what we noticed was that there was

121
00:05:08,699 --> 00:05:11,040
there was this linear rate there was a

122
00:05:11,040 --> 00:05:12,660
linear relationship between those two

123
00:05:12,660 --> 00:05:13,860
lines so you can see the purple line

124
00:05:13,860 --> 00:05:16,380
being the lines of code the the bluish

125
00:05:16,380 --> 00:05:18,600
green line being the uh the security

126
00:05:18,600 --> 00:05:20,160
threats

127
00:05:20,160 --> 00:05:22,259
if we've been talking about shifting

128
00:05:22,259 --> 00:05:26,880
left since 2012 why do we still have a

129
00:05:26,880 --> 00:05:29,520
linear relationship between lines of

130
00:05:29,520 --> 00:05:31,680
code and security threats

131
00:05:31,680 --> 00:05:34,259
uh I'll push this a little bit further

132
00:05:34,259 --> 00:05:38,039
you may say this is only open source

133
00:05:38,039 --> 00:05:41,580
but Microsoft is actually the largest

134
00:05:41,580 --> 00:05:45,300
corporate contributor to open source

135
00:05:45,300 --> 00:05:47,520
which means that the same developers who

136
00:05:47,520 --> 00:05:49,259
are contributing to open source are

137
00:05:49,259 --> 00:05:51,180
actually working within your Enterprises

138
00:05:51,180 --> 00:05:53,039
as well

139
00:05:53,039 --> 00:05:56,039
um and so I I think that this is even

140
00:05:56,039 --> 00:05:57,780
probably even worse within the

141
00:05:57,780 --> 00:05:59,039
Enterprise

142
00:05:59,039 --> 00:06:01,500
but but we're still introducing

143
00:06:01,500 --> 00:06:04,020
vulnerabilities at the same rate

144
00:06:04,020 --> 00:06:05,580
foreign

145
00:06:05,580 --> 00:06:08,160
we're also relying on on more code with

146
00:06:08,160 --> 00:06:10,259
with vulnerabilities so we have a

147
00:06:10,259 --> 00:06:12,539
function at GitHub it's what's known as

148
00:06:12,539 --> 00:06:15,000
dependency alerts pretty much whenever

149
00:06:15,000 --> 00:06:17,580
you check in a dependency we'll we will

150
00:06:17,580 --> 00:06:18,600
scan

151
00:06:18,600 --> 00:06:21,840
to figure out if there's a known cve

152
00:06:21,840 --> 00:06:24,960
associated with it unknown vulnerability

153
00:06:24,960 --> 00:06:27,060
associated with it

154
00:06:27,060 --> 00:06:29,039
this is what we term as dependency

155
00:06:29,039 --> 00:06:31,680
alerts we've been doing this for the

156
00:06:31,680 --> 00:06:33,660
open source and for Enterprises for

157
00:06:33,660 --> 00:06:36,960
about the last four or five years

158
00:06:36,960 --> 00:06:40,080
and so we see Trends and what's

159
00:06:40,080 --> 00:06:42,300
interesting to look at over here

160
00:06:42,300 --> 00:06:46,680
is that there's been a 40 increase from

161
00:06:46,680 --> 00:06:50,039
2019 to 2020 of dependency alerts that

162
00:06:50,039 --> 00:06:51,600
we are sending out

163
00:06:51,600 --> 00:06:53,580
which means that it's not just that we

164
00:06:53,580 --> 00:06:55,979
are introducing vulnerabilities into our

165
00:06:55,979 --> 00:06:57,780
code but the dependencies that we're

166
00:06:57,780 --> 00:06:59,819
using are also introducing

167
00:06:59,819 --> 00:07:03,120
vulnerabilities which we are relying on

168
00:07:03,120 --> 00:07:05,940
so we are relying on more code more code

169
00:07:05,940 --> 00:07:08,340
from the open source

170
00:07:08,340 --> 00:07:11,280
um with with more vulnerabilities as

171
00:07:11,280 --> 00:07:12,479
well

172
00:07:12,479 --> 00:07:15,240
and so this presents a a unique

173
00:07:15,240 --> 00:07:17,600
challenge

174
00:07:18,660 --> 00:07:21,720
another interesting chart that we have

175
00:07:21,720 --> 00:07:24,539
um one of the things that GitHub does as

176
00:07:24,539 --> 00:07:28,620
well as we we alert users if they check

177
00:07:28,620 --> 00:07:31,860
in a secret into into GitHub we've

178
00:07:31,860 --> 00:07:34,199
actually been doing this on the GitHub

179
00:07:34,199 --> 00:07:36,539
side for probably the last 10 years

180
00:07:36,539 --> 00:07:38,160
pretty much like what we did was

181
00:07:38,160 --> 00:07:40,620
whenever you checked in at GitHub secret

182
00:07:40,620 --> 00:07:43,620
we would automatically invalidate it on

183
00:07:43,620 --> 00:07:45,180
our side if it made it into an open

184
00:07:45,180 --> 00:07:46,800
source Repository

185
00:07:46,800 --> 00:07:49,740
that way there's really no risk of

186
00:07:49,740 --> 00:07:51,960
putting in a personal access token I

187
00:07:51,960 --> 00:07:53,580
would get a personal access token into

188
00:07:53,580 --> 00:07:55,740
GitHub you can try it within a couple of

189
00:07:55,740 --> 00:07:58,259
seconds it will it will be revoked on

190
00:07:58,259 --> 00:07:59,580
our end

191
00:07:59,580 --> 00:08:02,340
but what we did was we wanted to track

192
00:08:02,340 --> 00:08:05,400
the amount of GitHub access tokens that

193
00:08:05,400 --> 00:08:06,599
are being leaked into public

194
00:08:06,599 --> 00:08:08,160
repositories

195
00:08:08,160 --> 00:08:10,680
and you can actually use this as a proxy

196
00:08:10,680 --> 00:08:13,319
for other secrets that are being leaked

197
00:08:13,319 --> 00:08:17,099
into open source projects so it's not

198
00:08:17,099 --> 00:08:18,720
just GitHub access tokens that get

199
00:08:18,720 --> 00:08:20,819
leaked into open source projects it's

200
00:08:20,819 --> 00:08:25,680
AWS and Azure and gcp and Heroku secrets

201
00:08:25,680 --> 00:08:29,220
that get leaked in and so what we found

202
00:08:29,220 --> 00:08:31,020
with specifically with GitHub access

203
00:08:31,020 --> 00:08:32,458
tokens

204
00:08:32,458 --> 00:08:34,440
was that there's a huge increase as well

205
00:08:34,440 --> 00:08:37,740
actually 60 year over year

206
00:08:37,740 --> 00:08:40,320
of tokens being leaked every single

207
00:08:40,320 --> 00:08:43,500
month into into open source projects

208
00:08:43,500 --> 00:08:45,600
again like you can start to multiply

209
00:08:45,600 --> 00:08:47,760
this out when you think about all the

210
00:08:47,760 --> 00:08:49,740
other service providers that have this

211
00:08:49,740 --> 00:08:50,880
issue

212
00:08:50,880 --> 00:08:53,399
so we know that more credential leaks

213
00:08:53,399 --> 00:08:55,080
are happening more than ever we also

214
00:08:55,080 --> 00:08:58,260
know that they are incredibly

215
00:08:58,260 --> 00:09:00,360
um I mean they could be catastrophic but

216
00:09:00,360 --> 00:09:03,240
like we've seen a lot of the past

217
00:09:03,240 --> 00:09:05,880
year where

218
00:09:05,880 --> 00:09:08,700
a hacker might get into your network or

219
00:09:08,700 --> 00:09:10,560
or get into a repository but they

220
00:09:10,560 --> 00:09:13,500
immediately start to elevate access just

221
00:09:13,500 --> 00:09:15,180
because they found the credential that

222
00:09:15,180 --> 00:09:17,640
was in a repository

223
00:09:17,640 --> 00:09:20,279
um and so this has been a a huge issue

224
00:09:20,279 --> 00:09:22,920
and it's just interesting to see how how

225
00:09:22,920 --> 00:09:27,439
big of an issue it continues to be

226
00:09:27,600 --> 00:09:30,720
but what is the most common cause of

227
00:09:30,720 --> 00:09:32,760
breaches today

228
00:09:32,760 --> 00:09:34,680
well well let's look at this so we look

229
00:09:34,680 --> 00:09:35,880
at the Verizon data breach

230
00:09:35,880 --> 00:09:39,060
investigations uh the number one is web

231
00:09:39,060 --> 00:09:40,560
app attacks

232
00:09:40,560 --> 00:09:44,040
um over here it's web app attacks I

233
00:09:44,040 --> 00:09:46,680
think this is 2018 now it's what what

234
00:09:46,680 --> 00:09:49,260
happened attacks

235
00:09:49,260 --> 00:09:52,080
um continuing on it's it consistently

236
00:09:52,080 --> 00:09:55,380
the number one issue for intrusions have

237
00:09:55,380 --> 00:09:56,279
been

238
00:09:56,279 --> 00:09:57,779
the web application

239
00:09:57,779 --> 00:09:59,580
interestingly enough it hasn't been the

240
00:09:59,580 --> 00:10:01,440
firewall configuration rules like all

241
00:10:01,440 --> 00:10:03,839
those things are very very important but

242
00:10:03,839 --> 00:10:06,180
the number one reason is is usually a

243
00:10:06,180 --> 00:10:09,680
web app attack today

244
00:10:09,839 --> 00:10:11,339
so

245
00:10:11,339 --> 00:10:14,040
we know that there are issues that this

246
00:10:14,040 --> 00:10:15,620
is the state of application Security

247
00:10:15,620 --> 00:10:18,420
today like this is where we've been over

248
00:10:18,420 --> 00:10:20,160
the past couple of years

249
00:10:20,160 --> 00:10:21,899
and so the big question that I'm asking

250
00:10:21,899 --> 00:10:23,220
of course is why

251
00:10:23,220 --> 00:10:25,860
why is it such an issue

252
00:10:25,860 --> 00:10:28,440
well there are challenges to to

253
00:10:28,440 --> 00:10:30,300
improving application security so let's

254
00:10:30,300 --> 00:10:33,800
talk about them for a minute

255
00:10:34,260 --> 00:10:37,019
one thing that we need to know is that

256
00:10:37,019 --> 00:10:41,040
security teams are vastly outnumbered

257
00:10:41,040 --> 00:10:44,940
like as personally as a developer

258
00:10:44,940 --> 00:10:48,240
I need to have a lot of empathy for our

259
00:10:48,240 --> 00:10:50,760
security teams because there's just

260
00:10:50,760 --> 00:10:53,220
there's so little of them compared to

261
00:10:53,220 --> 00:10:56,459
the amount of developers out there

262
00:10:56,459 --> 00:10:59,100
so if we estimate there's about 40

263
00:10:59,100 --> 00:11:00,779
million professional developers out

264
00:11:00,779 --> 00:11:02,880
there there's only 70k security

265
00:11:02,880 --> 00:11:05,000
researchers

266
00:11:05,000 --> 00:11:07,680
570 to 1.

267
00:11:07,680 --> 00:11:10,079
even in the enterprise we see that

268
00:11:10,079 --> 00:11:11,700
number to be about a hundred to one so

269
00:11:11,700 --> 00:11:13,260
you have a in the Enterprise you have

270
00:11:13,260 --> 00:11:15,120
about a hundred developers to everyone

271
00:11:15,120 --> 00:11:18,000
security person

272
00:11:18,000 --> 00:11:20,640
we don't see this as getting better

273
00:11:20,640 --> 00:11:24,560
right 82 percent

274
00:11:25,980 --> 00:11:29,279
82 percent of I.T Security Professionals

275
00:11:29,279 --> 00:11:33,600
say they're their team is understaffed

276
00:11:33,600 --> 00:11:36,120
um this year 70 of Isa members believe

277
00:11:36,120 --> 00:11:38,100
their organization has been impacted by

278
00:11:38,100 --> 00:11:40,079
global cyber security skills shortage

279
00:11:40,079 --> 00:11:44,040
the reality is is that in in cyber

280
00:11:44,040 --> 00:11:45,360
security

281
00:11:45,360 --> 00:11:48,440
there's it's just a zero sum game today

282
00:11:48,440 --> 00:11:52,579
there's just not enough people

283
00:11:53,279 --> 00:11:55,800
the other issue over here

284
00:11:55,800 --> 00:11:58,800
is that securing saw a first party

285
00:11:58,800 --> 00:12:00,839
software is really just just the

286
00:12:00,839 --> 00:12:02,760
beginning as we were mentioning

287
00:12:02,760 --> 00:12:04,260
beforehand

288
00:12:04,260 --> 00:12:07,440
you have your code but increasingly

289
00:12:07,440 --> 00:12:09,600
you're using a lot more open source code

290
00:12:09,600 --> 00:12:13,260
so we we estimate about 30 percent of of

291
00:12:13,260 --> 00:12:15,000
first party code

292
00:12:15,000 --> 00:12:17,420
of your application is first party code

293
00:12:17,420 --> 00:12:21,000
70 is actually open source code

294
00:12:21,000 --> 00:12:22,920
that's scary because that what that

295
00:12:22,920 --> 00:12:24,839
means is that you are literally giving

296
00:12:24,839 --> 00:12:27,600
production level access

297
00:12:27,600 --> 00:12:29,700
to a person who does not work for your

298
00:12:29,700 --> 00:12:32,519
company who you've never met

299
00:12:32,519 --> 00:12:34,980
um and so securing first party software

300
00:12:34,980 --> 00:12:37,680
is is really just the first start of

301
00:12:37,680 --> 00:12:40,920
this discussion right the 70 is not

302
00:12:40,920 --> 00:12:43,380
being covered by any dedicated security

303
00:12:43,380 --> 00:12:44,940
team

304
00:12:44,940 --> 00:12:47,160
the last thing I'll I'll leave you with

305
00:12:47,160 --> 00:12:49,920
over here is that

306
00:12:49,920 --> 00:12:52,860
security just isn't part of the

307
00:12:52,860 --> 00:12:56,279
developer workflow today

308
00:12:56,279 --> 00:12:58,980
um Virgo did this analysis on on SAS

309
00:12:58,980 --> 00:13:00,959
scans per year

310
00:13:00,959 --> 00:13:03,720
what they found was that less than 10

311
00:13:03,720 --> 00:13:06,360
percent of people are are actually

312
00:13:06,360 --> 00:13:09,660
scanning more than once a week

313
00:13:09,660 --> 00:13:12,480
more than once a week right like less

314
00:13:12,480 --> 00:13:14,880
than 10 or actually it's getting more

315
00:13:14,880 --> 00:13:18,839
than once a week by far the most common

316
00:13:18,839 --> 00:13:20,220
um use case over here is you're you're

317
00:13:20,220 --> 00:13:22,680
running a sascan once every year for

318
00:13:22,680 --> 00:13:24,480
your application

319
00:13:24,480 --> 00:13:26,639
so how can we ever detect the

320
00:13:26,639 --> 00:13:29,820
vulnerabilities if the adoption rate is

321
00:13:29,820 --> 00:13:32,700
so low if it's not if security if fast

322
00:13:32,700 --> 00:13:36,740
is not part of the developer workflow

323
00:13:37,620 --> 00:13:39,600
you know it was interesting about a year

324
00:13:39,600 --> 00:13:43,019
ago I personally ran this this poll with

325
00:13:43,019 --> 00:13:46,019
100 Enterprise customers this wasn't a

326
00:13:46,019 --> 00:13:47,519
scientific poll

327
00:13:47,519 --> 00:13:50,040
this is just I I just wanted to read the

328
00:13:50,040 --> 00:13:51,839
Rune I just wanted to understand where

329
00:13:51,839 --> 00:13:55,440
we are as an industry and so I asked

330
00:13:55,440 --> 00:13:56,279
them

331
00:13:56,279 --> 00:13:59,459
how integrated are your SAS practices

332
00:13:59,459 --> 00:14:01,139
today

333
00:14:01,139 --> 00:14:04,560
and it was super interesting to learn

334
00:14:04,560 --> 00:14:06,300
there were there were a couple of

335
00:14:06,300 --> 00:14:08,160
options

336
00:14:08,160 --> 00:14:12,600
one was you don't have any SAS

337
00:14:12,600 --> 00:14:15,180
two was you run SAS periodically three

338
00:14:15,180 --> 00:14:17,399
was you you have integrated SAS as part

339
00:14:17,399 --> 00:14:21,600
of your CI so 38 a scary 38 said they're

340
00:14:21,600 --> 00:14:24,120
not running SAS today again that's a

341
00:14:24,120 --> 00:14:26,579
very scary statistic for me

342
00:14:26,579 --> 00:14:28,500
um 23 said they're running SAS

343
00:14:28,500 --> 00:14:31,440
periodically 33 said they've integrated

344
00:14:31,440 --> 00:14:33,480
SAS as part of their CI

345
00:14:33,480 --> 00:14:35,639
but it didn't stop there

346
00:14:35,639 --> 00:14:37,920
there was a fourth choice a fourth

347
00:14:37,920 --> 00:14:40,560
hidden Choice which was do your

348
00:14:40,560 --> 00:14:44,100
developers actually trust the results

349
00:14:44,100 --> 00:14:46,680
from the automated CI right this is the

350
00:14:46,680 --> 00:14:49,019
fourth level

351
00:14:49,019 --> 00:14:53,459
and it was a mere five percent

352
00:14:53,459 --> 00:14:55,740
that said developers actually trusted

353
00:14:55,740 --> 00:14:58,740
their automated SAS results

354
00:14:58,740 --> 00:15:01,139
I'm going to challenge you right now

355
00:15:01,139 --> 00:15:03,300
if we're integrating SAS as part of

356
00:15:03,300 --> 00:15:05,940
their CI that that's great

357
00:15:05,940 --> 00:15:08,220
but if developers don't actually trust

358
00:15:08,220 --> 00:15:10,620
the results they're not actually going

359
00:15:10,620 --> 00:15:13,079
to fix the issues

360
00:15:13,079 --> 00:15:16,019
once you start to to to disbelieve the

361
00:15:16,019 --> 00:15:18,000
results that you're getting from from

362
00:15:18,000 --> 00:15:20,639
the tooling that you have

363
00:15:20,639 --> 00:15:22,800
it starts to become a waste of time for

364
00:15:22,800 --> 00:15:24,779
you as a developer

365
00:15:24,779 --> 00:15:28,560
and so to me the big issue today within

366
00:15:28,560 --> 00:15:31,079
the industry is that developers don't

367
00:15:31,079 --> 00:15:33,480
actually trust the tools that we've

368
00:15:33,480 --> 00:15:35,579
given them it's very nice that we're

369
00:15:35,579 --> 00:15:37,500
trying to shift left but we're shifting

370
00:15:37,500 --> 00:15:41,040
left using the same tools that were

371
00:15:41,040 --> 00:15:43,019
designed for security Engineers they

372
00:15:43,019 --> 00:15:45,240
were not designed for Developers

373
00:15:45,240 --> 00:15:48,300
and so that that's a huge mindset shift

374
00:15:48,300 --> 00:15:51,240
that changes the game this is probably

375
00:15:51,240 --> 00:15:54,600
why we see such a low fix rate we also

376
00:15:54,600 --> 00:15:57,000
see such a low adoption rate

377
00:15:57,000 --> 00:15:58,920
from the Developers

378
00:15:58,920 --> 00:16:02,279
before I dive deeper into this I I want

379
00:16:02,279 --> 00:16:04,320
to take a pause for a second

380
00:16:04,320 --> 00:16:08,399
and talk about this this this painting

381
00:16:08,399 --> 00:16:11,459
so in the middle is an individual this

382
00:16:11,459 --> 00:16:13,620
is actually a painting of of surgery

383
00:16:13,620 --> 00:16:16,440
happening in the 1800s

384
00:16:16,440 --> 00:16:19,740
in the middle is an individual named

385
00:16:19,740 --> 00:16:22,320
Joseph Lister Joseph Lister is known as

386
00:16:22,320 --> 00:16:26,459
the the father of modern day surgery

387
00:16:26,459 --> 00:16:30,180
on the left hand side is an

388
00:16:30,180 --> 00:16:32,339
anesthesiologist that anesthesiologist

389
00:16:32,339 --> 00:16:33,779
is

390
00:16:33,779 --> 00:16:37,199
putting the patient to sleep

391
00:16:37,199 --> 00:16:40,860
that way surgery can be performed on the

392
00:16:40,860 --> 00:16:42,980
right hand side is an individual

393
00:16:42,980 --> 00:16:46,440
spraying an antiseptic spray that way

394
00:16:46,440 --> 00:16:49,920
germs don't get in to uh to the body

395
00:16:49,920 --> 00:16:52,259
while it's opened so this is a painting

396
00:16:52,259 --> 00:16:55,620
of of really surgery happening in the

397
00:16:55,620 --> 00:16:57,480
1800s

398
00:16:57,480 --> 00:17:00,300
the interesting thing though

399
00:17:00,300 --> 00:17:05,819
is that the anesthesia on the left

400
00:17:05,819 --> 00:17:08,839
and the antiseptic spray on the right

401
00:17:08,839 --> 00:17:11,880
those two technological innovations

402
00:17:11,880 --> 00:17:13,500
which is what they were they were

403
00:17:13,500 --> 00:17:16,459
technological innovations in the 1800s

404
00:17:16,459 --> 00:17:20,280
took radical radically different

405
00:17:20,280 --> 00:17:22,140
adoption curves

406
00:17:22,140 --> 00:17:23,640
let's actually explore this let's

407
00:17:23,640 --> 00:17:26,520
understand a little bit more

408
00:17:26,520 --> 00:17:28,319
um let's let's actually first talk about

409
00:17:28,319 --> 00:17:30,179
anesthetics

410
00:17:30,179 --> 00:17:32,580
so it's important to go back to surgery

411
00:17:32,580 --> 00:17:35,039
pre-1800s

412
00:17:35,039 --> 00:17:36,320
surgery

413
00:17:36,320 --> 00:17:39,480
pre-1800s you had an individual a

414
00:17:39,480 --> 00:17:45,120
patient that was very much awake

415
00:17:45,120 --> 00:17:47,820
they were writhing in agony it was a

416
00:17:47,820 --> 00:17:49,500
very painful experience as you would

417
00:17:49,500 --> 00:17:51,679
imagine

418
00:17:52,200 --> 00:17:54,980
um but also there was about a 50

419
00:17:54,980 --> 00:17:58,380
mortality rate because there were no

420
00:17:58,380 --> 00:18:00,780
antiseptics but like germs would get in

421
00:18:00,780 --> 00:18:02,460
and that the person would die from

422
00:18:02,460 --> 00:18:04,679
sepsis afterwards

423
00:18:04,679 --> 00:18:07,700
and so surgery was a very dangerous

424
00:18:07,700 --> 00:18:12,240
operation coming in at the 1800s

425
00:18:12,240 --> 00:18:15,000
surgeons had to complete surgery as

426
00:18:15,000 --> 00:18:17,580
quickly as possible because again the

427
00:18:17,580 --> 00:18:19,559
person is writhing in pain

428
00:18:19,559 --> 00:18:21,900
you could also Imagine right like when

429
00:18:21,900 --> 00:18:24,000
you're doing surgery you want to make

430
00:18:24,000 --> 00:18:26,580
sure that you know the individual

431
00:18:26,580 --> 00:18:28,320
doesn't move too much but that's very

432
00:18:28,320 --> 00:18:30,960
very difficult in this case and so the

433
00:18:30,960 --> 00:18:32,400
first Innovation that I'm going to talk

434
00:18:32,400 --> 00:18:35,160
about is anesthetics anesthetics was

435
00:18:35,160 --> 00:18:38,520
developed initially by by William Morton

436
00:18:38,520 --> 00:18:41,880
he was a dentist he took this to Henry J

437
00:18:41,880 --> 00:18:46,140
Bigelow and Henry J Bigelow saw this and

438
00:18:46,140 --> 00:18:48,299
said I can change surgery with

439
00:18:48,299 --> 00:18:50,460
anesthetics

440
00:18:50,460 --> 00:18:52,080
um again like this was first discovered

441
00:18:52,080 --> 00:18:55,559
in 1846 what's interesting is once Henry

442
00:18:55,559 --> 00:18:58,620
J Bigelow starts to write about this

443
00:18:58,620 --> 00:19:01,200
I started to say I can change surgery it

444
00:19:01,200 --> 00:19:03,960
was actually being experimented on in

445
00:19:03,960 --> 00:19:06,660
all major cities within a year

446
00:19:06,660 --> 00:19:09,000
not only that it became ubiquitous

447
00:19:09,000 --> 00:19:13,140
within the industry within seven years

448
00:19:13,140 --> 00:19:16,799
why well it just it made the surgeons

449
00:19:16,799 --> 00:19:19,020
lives much easier you can perform

450
00:19:19,020 --> 00:19:22,559
surgery when a person is is not writhing

451
00:19:22,559 --> 00:19:25,440
in agony and one person is sleeping

452
00:19:25,440 --> 00:19:28,679
so this got adopted extremely quickly

453
00:19:28,679 --> 00:19:30,960
but there was a very different adoption

454
00:19:30,960 --> 00:19:33,299
curve with antiseptics

455
00:19:33,299 --> 00:19:35,520
I'm antiseptics was it was first

456
00:19:35,520 --> 00:19:39,299
discovered in 1865 by Joseph Lister

457
00:19:39,299 --> 00:19:42,179
or Joseph Lister postulated was there

458
00:19:42,179 --> 00:19:44,280
were terms in the air

459
00:19:44,280 --> 00:19:48,419
that probably made it into your body and

460
00:19:48,419 --> 00:19:50,820
he turned a sewage right he didn't

461
00:19:50,820 --> 00:19:52,080
really know about germs he knew about

462
00:19:52,080 --> 00:19:54,660
sewage in the air

463
00:19:54,660 --> 00:19:56,520
um and so he was operating on a

464
00:19:56,520 --> 00:19:58,380
seven-year-old child who had a fractured

465
00:19:58,380 --> 00:20:02,100
lead a leg and said maybe this carbolic

466
00:20:02,100 --> 00:20:04,080
acid can can help

467
00:20:04,080 --> 00:20:07,559
this carbolic acid being an antiseptic

468
00:20:07,559 --> 00:20:10,260
well he tried that and it seemed to work

469
00:20:10,260 --> 00:20:12,720
and so experiment after experiment what

470
00:20:12,720 --> 00:20:16,200
he found was that the rates of survival

471
00:20:16,200 --> 00:20:19,320
with antiseptics with carbolic acid

472
00:20:19,320 --> 00:20:21,900
was was really really good it was much

473
00:20:21,900 --> 00:20:24,660
better than it was beforehand

474
00:20:24,660 --> 00:20:27,419
he published a study in the Lancet which

475
00:20:27,419 --> 00:20:29,340
is the Premier journal and and you would

476
00:20:29,340 --> 00:20:30,840
expect at that point that everybody

477
00:20:30,840 --> 00:20:32,700
starts to use it

478
00:20:32,700 --> 00:20:34,440
but what's interesting over here is that

479
00:20:34,440 --> 00:20:36,480
it was highly divisive

480
00:20:36,480 --> 00:20:39,120
surgeons did not want to adopt

481
00:20:39,120 --> 00:20:42,059
antiseptics they did not want to adopt

482
00:20:42,059 --> 00:20:44,940
carbolic acid even though it was proven

483
00:20:44,940 --> 00:20:47,520
time and time again that this was saving

484
00:20:47,520 --> 00:20:48,660
lives

485
00:20:48,660 --> 00:20:51,900
and the the reason why this was so

486
00:20:51,900 --> 00:20:54,240
highly divisive and this is the core

487
00:20:54,240 --> 00:20:56,520
this is the Crux of the story

488
00:20:56,520 --> 00:21:00,179
carbolic acid burned the surgeon's eyes

489
00:21:00,179 --> 00:21:04,799
it hurt it was annoying to the surgeons

490
00:21:04,799 --> 00:21:06,960
it burned the hands and the eyes of the

491
00:21:06,960 --> 00:21:09,299
surgeon and so even though it showed

492
00:21:09,299 --> 00:21:12,179
much better rates surgeons didn't like

493
00:21:12,179 --> 00:21:13,080
it

494
00:21:13,080 --> 00:21:15,000
and so this was actually half-heartedly

495
00:21:15,000 --> 00:21:17,400
adopted by the mid-1880s right like

496
00:21:17,400 --> 00:21:21,780
that's 20 that's um that's 15 years of

497
00:21:21,780 --> 00:21:23,640
still being half-heartedly adopted where

498
00:21:23,640 --> 00:21:25,440
anesthetics took a very very different

499
00:21:25,440 --> 00:21:27,660
adoption curve

500
00:21:27,660 --> 00:21:30,419
let's bring this back to dubstack Ops

501
00:21:30,419 --> 00:21:32,100
and by the way that's considered the

502
00:21:32,100 --> 00:21:33,780
foundation amount of surgery

503
00:21:33,780 --> 00:21:37,500
let's bring this down to devstack Ops my

504
00:21:37,500 --> 00:21:39,960
argument over here is going to be that

505
00:21:39,960 --> 00:21:42,480
devops is like anesthesia

506
00:21:42,480 --> 00:21:44,340
it made sense

507
00:21:44,340 --> 00:21:46,260
I mean who doesn't want to ship software

508
00:21:46,260 --> 00:21:49,500
faster right everybody wants to

509
00:21:49,500 --> 00:21:51,299
um it it figured out the relationship

510
00:21:51,299 --> 00:21:54,240
between Dev and Ops leading to a

511
00:21:54,240 --> 00:21:56,700
smoother relationship

512
00:21:56,700 --> 00:21:59,640
um it just worked and people loved it

513
00:21:59,640 --> 00:22:04,200
but devsecops or really Security today

514
00:22:04,200 --> 00:22:06,360
still feels like we're we're spraying

515
00:22:06,360 --> 00:22:09,000
carbolic acid on our developers

516
00:22:09,000 --> 00:22:11,340
it's very painful we know we need to do

517
00:22:11,340 --> 00:22:13,799
it we know the rates are much better if

518
00:22:13,799 --> 00:22:15,840
we do security early on

519
00:22:15,840 --> 00:22:19,640
but man is it painful like doesn't that

520
00:22:19,640 --> 00:22:22,080
developers still just just absolutely

521
00:22:22,080 --> 00:22:24,900
don't like that process it still feels

522
00:22:24,900 --> 00:22:26,880
like we're spraying carbolic acid on

523
00:22:26,880 --> 00:22:28,140
them

524
00:22:28,140 --> 00:22:30,179
and so this is why the adoption curve

525
00:22:30,179 --> 00:22:32,520
between devops and devsac has been so

526
00:22:32,520 --> 00:22:34,740
different

527
00:22:34,740 --> 00:22:36,900
um so so now the question becomes

528
00:22:36,900 --> 00:22:40,799
what if we started to design for the

529
00:22:40,799 --> 00:22:42,179
Developers

530
00:22:42,179 --> 00:22:44,400
right like what if we started to design

531
00:22:44,400 --> 00:22:47,580
products and security products well what

532
00:22:47,580 --> 00:22:49,320
is a developer first application

533
00:22:49,320 --> 00:22:53,539
security approach actually look like

534
00:22:55,980 --> 00:22:57,960
so GitHub has actually been in this game

535
00:22:57,960 --> 00:22:59,220
for a while as I was mentioning

536
00:22:59,220 --> 00:23:01,260
beforehand

537
00:23:01,260 --> 00:23:03,840
we've been doing this we've been looking

538
00:23:03,840 --> 00:23:07,260
for known cves within vulnerabilities

539
00:23:07,260 --> 00:23:09,539
within your open source projects for for

540
00:23:09,539 --> 00:23:10,980
a good amount of time now I'm about to

541
00:23:10,980 --> 00:23:13,679
last four or five years

542
00:23:13,679 --> 00:23:15,600
um but we started with sending out

543
00:23:15,600 --> 00:23:18,240
vulnerability alert emails and we

544
00:23:18,240 --> 00:23:19,799
thought this was the best thing

545
00:23:19,799 --> 00:23:21,840
right we are going to send the

546
00:23:21,840 --> 00:23:23,100
Developers

547
00:23:23,100 --> 00:23:26,280
an email anytime a vulnerability is

548
00:23:26,280 --> 00:23:29,760
found within anytime a cve from a

549
00:23:29,760 --> 00:23:31,559
dependency that they're using is found

550
00:23:31,559 --> 00:23:33,419
within their application they don't have

551
00:23:33,419 --> 00:23:34,980
to do anything like we'll just do this

552
00:23:34,980 --> 00:23:36,659
in the background it'll be great you

553
00:23:36,659 --> 00:23:39,480
don't have to configure anything

554
00:23:39,480 --> 00:23:41,280
but what we found was that developers

555
00:23:41,280 --> 00:23:44,039
didn't love it they were getting spammed

556
00:23:44,039 --> 00:23:47,340
with vulnerability alert emails

557
00:23:47,340 --> 00:23:50,039
um there was just too much noise being

558
00:23:50,039 --> 00:23:51,720
sent to them

559
00:23:51,720 --> 00:23:53,760
the key over here though is that we were

560
00:23:53,760 --> 00:23:56,460
showing their problems without giving

561
00:23:56,460 --> 00:23:59,280
them Solutions we were showing them tons

562
00:23:59,280 --> 00:24:00,720
of problems so we were never actually

563
00:24:00,720 --> 00:24:04,020
saying how telling them how to fix it

564
00:24:04,020 --> 00:24:06,840
and so later on we developed what's

565
00:24:06,840 --> 00:24:08,880
known as depend about where we'll open

566
00:24:08,880 --> 00:24:11,940
up a pull request for the developer

567
00:24:11,940 --> 00:24:14,240
so once we know that there's a a

568
00:24:14,240 --> 00:24:16,919
vulnerability associated with that

569
00:24:16,919 --> 00:24:18,240
dependency

570
00:24:18,240 --> 00:24:20,460
why don't we just open up a PR for you

571
00:24:20,460 --> 00:24:22,980
that way the developer just has to click

572
00:24:22,980 --> 00:24:24,840
that button this has to click that

573
00:24:24,840 --> 00:24:27,179
button to merge the issue well we'll

574
00:24:27,179 --> 00:24:29,340
even run your CI checks that way you're

575
00:24:29,340 --> 00:24:31,080
confident that there's no API breaking

576
00:24:31,080 --> 00:24:32,880
changes associated with that it will

577
00:24:32,880 --> 00:24:35,220
give you a compatibility score based off

578
00:24:35,220 --> 00:24:37,740
of our data we think that this is going

579
00:24:37,740 --> 00:24:39,600
to be compatible again like giving you

580
00:24:39,600 --> 00:24:41,820
all of the information necessary so that

581
00:24:41,820 --> 00:24:43,980
all you have to do is click that button

582
00:24:43,980 --> 00:24:46,380
to actually resolve the issue

583
00:24:46,380 --> 00:24:48,419
well we saw a dramatic

584
00:24:48,419 --> 00:24:51,360
a dramatic effect so for folks who are

585
00:24:51,360 --> 00:24:54,059
using depend about security update

586
00:24:54,059 --> 00:24:56,340
um pull requests they actually fix

587
00:24:56,340 --> 00:25:00,480
issues in half the time it takes versus

588
00:25:00,480 --> 00:25:03,299
the folks who don't use depend about

589
00:25:03,299 --> 00:25:05,880
actually showing the developer giving

590
00:25:05,880 --> 00:25:08,640
the developer a solution just changed

591
00:25:08,640 --> 00:25:10,980
the game

592
00:25:10,980 --> 00:25:14,280
whereas beforehand we were we were

593
00:25:14,280 --> 00:25:16,020
developing something that was outside of

594
00:25:16,020 --> 00:25:17,700
developer workflow again like we're

595
00:25:17,700 --> 00:25:20,580
sending them emails external email it

596
00:25:20,580 --> 00:25:22,080
was focusing on the problem it was it

597
00:25:22,080 --> 00:25:23,820
was really just automating the start of

598
00:25:23,820 --> 00:25:25,500
the journey

599
00:25:25,500 --> 00:25:28,260
we now are at the heart of the developer

600
00:25:28,260 --> 00:25:30,360
workflow we were in the application that

601
00:25:30,360 --> 00:25:32,880
they know and love we were focusing on a

602
00:25:32,880 --> 00:25:34,400
solution we were actually entirely

603
00:25:34,400 --> 00:25:38,340
automating the entire life cycle of this

604
00:25:38,340 --> 00:25:40,620
being a developer

605
00:25:40,620 --> 00:25:43,980
or designing for developers requires a

606
00:25:43,980 --> 00:25:47,159
mindset shift it requires you to think

607
00:25:47,159 --> 00:25:48,720
about things in a little bit of a

608
00:25:48,720 --> 00:25:51,179
different manner

609
00:25:51,179 --> 00:25:54,900
let's do another Let's do an example now

610
00:25:54,900 --> 00:25:57,419
what does it mean to have a developer

611
00:25:57,419 --> 00:26:00,659
first credential scanning solution

612
00:26:00,659 --> 00:26:03,419
remember how how we were saying leaked

613
00:26:03,419 --> 00:26:05,640
credentials is a huge problem within the

614
00:26:05,640 --> 00:26:06,900
industry

615
00:26:06,900 --> 00:26:09,059
um it's something that continues to

616
00:26:09,059 --> 00:26:10,799
plague the industry but what does it

617
00:26:10,799 --> 00:26:13,380
mean to create a developer first

618
00:26:13,380 --> 00:26:15,720
credential scanning solution

619
00:26:15,720 --> 00:26:17,340
well firstly

620
00:26:17,340 --> 00:26:19,620
credential scanning is is really the

621
00:26:19,620 --> 00:26:22,200
probably the perfect candidate to shift

622
00:26:22,200 --> 00:26:23,340
left

623
00:26:23,340 --> 00:26:26,460
as I was mentioning beforehand it's

624
00:26:26,460 --> 00:26:29,299
extremely common about 100 GitHub tokens

625
00:26:29,299 --> 00:26:33,980
leak into GitHub every single day

626
00:26:34,559 --> 00:26:36,539
um it's extremely damaging like going

627
00:26:36,539 --> 00:26:38,460
back to solar and solarwinds one two

628
00:26:38,460 --> 00:26:40,919
three right like that that was part of

629
00:26:40,919 --> 00:26:43,500
the major issue that that led to a

630
00:26:43,500 --> 00:26:45,659
breach

631
00:26:45,659 --> 00:26:48,120
um it's it's also it's it's pretty easy

632
00:26:48,120 --> 00:26:50,700
to detect right like you don't need that

633
00:26:50,700 --> 00:26:52,620
much you need a couple of reg X's maybe

634
00:26:52,620 --> 00:26:55,080
you'll do some post-processing to to get

635
00:26:55,080 --> 00:26:57,720
rid of the false positives

636
00:26:57,720 --> 00:27:00,000
that's really it

637
00:27:00,000 --> 00:27:01,440
um

638
00:27:01,440 --> 00:27:03,120
today

639
00:27:03,120 --> 00:27:06,059
in GitHub especially we we've been

640
00:27:06,059 --> 00:27:08,700
really really good at prevention

641
00:27:08,700 --> 00:27:10,980
but but what does it mean to actually

642
00:27:10,980 --> 00:27:12,900
we've been really good at remediation

643
00:27:12,900 --> 00:27:14,580
but what if we could actually prevent

644
00:27:14,580 --> 00:27:16,919
this what if we could actually prevent a

645
00:27:16,919 --> 00:27:19,020
secret from ever making it into GitHub

646
00:27:19,020 --> 00:27:21,779
and again again like this is from ever

647
00:27:21,779 --> 00:27:22,799
making it into your source code

648
00:27:22,799 --> 00:27:24,960
repository this is the perfect candidate

649
00:27:24,960 --> 00:27:27,059
to shift left like we should just stick

650
00:27:27,059 --> 00:27:29,940
this in as part of a previously talk

651
00:27:29,940 --> 00:27:32,880
but what's the issue over here

652
00:27:32,880 --> 00:27:35,820
the catch is always false positives this

653
00:27:35,820 --> 00:27:39,059
has been the thing that that's this has

654
00:27:39,059 --> 00:27:40,740
been the reason why pre-received hooks

655
00:27:40,740 --> 00:27:43,140
have been so hard to implement

656
00:27:43,140 --> 00:27:46,260
it's just whenever a developer gets a

657
00:27:46,260 --> 00:27:48,600
false positive it's extremely breaking

658
00:27:48,600 --> 00:27:50,580
right like they now have to figure out

659
00:27:50,580 --> 00:27:52,980
what to do with this secret that's

660
00:27:52,980 --> 00:27:56,340
probably a false positive

661
00:27:56,340 --> 00:27:57,480
um there's not too much information

662
00:27:57,480 --> 00:27:59,400
that's generally given to them so

663
00:27:59,400 --> 00:28:01,799
there's a lot of digging into this is

664
00:28:01,799 --> 00:28:03,960
also just extremely annoying it's

665
00:28:03,960 --> 00:28:06,539
extremely annoying for a developer

666
00:28:06,539 --> 00:28:09,960
because specifically

667
00:28:09,960 --> 00:28:13,320
um on a 5 PM on a Friday night they just

668
00:28:13,320 --> 00:28:14,880
want to commit their code

669
00:28:14,880 --> 00:28:17,460
they don't want to be blocked by a false

670
00:28:17,460 --> 00:28:19,020
positive

671
00:28:19,020 --> 00:28:21,000
so we have to be very very careful about

672
00:28:21,000 --> 00:28:23,340
noise when it comes to the developer

673
00:28:23,340 --> 00:28:25,200
this is something that we know noise is

674
00:28:25,200 --> 00:28:28,380
is we need to optimize for noise over

675
00:28:28,380 --> 00:28:30,539
there because otherwise developers will

676
00:28:30,539 --> 00:28:33,679
throw up the entire solution

677
00:28:33,900 --> 00:28:34,799
um

678
00:28:34,799 --> 00:28:37,919
we actually rolled this within Microsoft

679
00:28:37,919 --> 00:28:40,440
for for a good amount of time

680
00:28:40,440 --> 00:28:42,720
um and what we found was right like in

681
00:28:42,720 --> 00:28:44,820
this case developers are responsible for

682
00:28:44,820 --> 00:28:47,400
triaging findings noisy patterns there's

683
00:28:47,400 --> 00:28:49,200
always an escape hatch

684
00:28:49,200 --> 00:28:53,220
what happens at Microsoft was we found

685
00:28:53,220 --> 00:28:55,380
that the rate of false positives was

686
00:28:55,380 --> 00:28:57,299
extremely high

687
00:28:57,299 --> 00:29:00,120
but developers were so frustrated that

688
00:29:00,120 --> 00:29:02,580
about three percent of them were

689
00:29:02,580 --> 00:29:05,159
actually scripting things

690
00:29:05,159 --> 00:29:08,760
um so that whenever a a an issue is

691
00:29:08,760 --> 00:29:10,500
found in a pre-received hook it would

692
00:29:10,500 --> 00:29:12,720
automatically say it's a false positive

693
00:29:12,720 --> 00:29:15,659
that's a huge issue right the issue was

694
00:29:15,659 --> 00:29:17,039
such a big problem that developers

695
00:29:17,039 --> 00:29:18,480
enough scripting to try and get around

696
00:29:18,480 --> 00:29:20,340
this gate

697
00:29:20,340 --> 00:29:24,419
so what if we were to to change this

698
00:29:24,419 --> 00:29:27,419
what if we were to design around the

699
00:29:27,419 --> 00:29:29,159
developer experience think about the

700
00:29:29,159 --> 00:29:31,200
developer

701
00:29:31,200 --> 00:29:33,720
well the first thing is we need a better

702
00:29:33,720 --> 00:29:36,000
triage experience

703
00:29:36,000 --> 00:29:38,220
we actually we should give you the exact

704
00:29:38,220 --> 00:29:40,020
lines of code that are the issue not

705
00:29:40,020 --> 00:29:42,240
just uh just not just look at this line

706
00:29:42,240 --> 00:29:43,980
like let's give you as much information

707
00:29:43,980 --> 00:29:45,960
as you can within the terminal because

708
00:29:45,960 --> 00:29:48,840
that's where you're living right now

709
00:29:48,840 --> 00:29:51,720
um if it if it is an issue if it is a

710
00:29:51,720 --> 00:29:53,640
false positive

711
00:29:53,640 --> 00:29:56,100
let's link you to a UI so that way you

712
00:29:56,100 --> 00:29:58,380
could dismiss that forever and you don't

713
00:29:58,380 --> 00:30:01,440
ever have to worry about that

714
00:30:01,440 --> 00:30:05,039
in fact what about things with a what

715
00:30:05,039 --> 00:30:07,080
about results with a high false positive

716
00:30:07,080 --> 00:30:09,480
rate we may know that a specific token

717
00:30:09,480 --> 00:30:12,240
type has a high false positive rate well

718
00:30:12,240 --> 00:30:15,059
maybe that shouldn't live within a

719
00:30:15,059 --> 00:30:17,220
within a pre-receive

720
00:30:17,220 --> 00:30:18,840
maybe that should just happen within the

721
00:30:18,840 --> 00:30:20,159
pull request

722
00:30:20,159 --> 00:30:21,840
maybe that should just be part of your

723
00:30:21,840 --> 00:30:24,600
remediation workflow we have to think

724
00:30:24,600 --> 00:30:27,120
about that

725
00:30:27,120 --> 00:30:29,340
um the other question that I'm going to

726
00:30:29,340 --> 00:30:32,399
ask right if I'm a developer why are we

727
00:30:32,399 --> 00:30:35,940
scanning things at commit time maybe we

728
00:30:35,940 --> 00:30:37,440
should just embed it in as part of your

729
00:30:37,440 --> 00:30:39,659
IDE

730
00:30:39,659 --> 00:30:42,840
lastly what if we can change the

731
00:30:42,840 --> 00:30:45,240
industry on false positives part of the

732
00:30:45,240 --> 00:30:47,159
issue with false positives

733
00:30:47,159 --> 00:30:50,700
is that the industry's tokens aren't

734
00:30:50,700 --> 00:30:54,000
very readily identifiable

735
00:30:54,000 --> 00:30:56,399
so what if we can start to change the

736
00:30:56,399 --> 00:30:57,659
industry to make them much more

737
00:30:57,659 --> 00:31:00,659
identifiable to have a slug in the

738
00:31:00,659 --> 00:31:03,120
beginning that says g-h-o-g-h I know

739
00:31:03,120 --> 00:31:06,059
automatically this is a GitHub token

740
00:31:06,059 --> 00:31:09,000
um to have the secret but but to maybe

741
00:31:09,000 --> 00:31:11,460
also add in check digits so that I can

742
00:31:11,460 --> 00:31:13,500
mathematically prove that this is

743
00:31:13,500 --> 00:31:16,380
probably a valid Secret

744
00:31:16,380 --> 00:31:18,779
these are all the things that we've been

745
00:31:18,779 --> 00:31:22,500
thinking at about at GitHub some of

746
00:31:22,500 --> 00:31:25,020
these are already available

747
00:31:25,020 --> 00:31:26,399
um some of them were still very much

748
00:31:26,399 --> 00:31:27,960
thinking about

749
00:31:27,960 --> 00:31:29,820
but the point over here is that we need

750
00:31:29,820 --> 00:31:32,220
to actually start the designing

751
00:31:32,220 --> 00:31:34,860
around the developer and when we do this

752
00:31:34,860 --> 00:31:37,440
this very much changes the way we act

753
00:31:37,440 --> 00:31:39,059
and react

754
00:31:39,059 --> 00:31:41,100
it's not just about sticking all the

755
00:31:41,100 --> 00:31:43,140
secrets in as part of our previously we

756
00:31:43,140 --> 00:31:45,240
actually have to think about what's

757
00:31:45,240 --> 00:31:47,760
appropriate for the developer

758
00:31:47,760 --> 00:31:49,380
I'm going to go through one more work

759
00:31:49,380 --> 00:31:52,799
example which is developer first static

760
00:31:52,799 --> 00:31:56,640
analysis as we saw beforehand still only

761
00:31:56,640 --> 00:31:59,640
under 10 percent of folks are running

762
00:31:59,640 --> 00:32:02,460
static analysis

763
00:32:02,460 --> 00:32:04,740
um more than once a week but what if we

764
00:32:04,740 --> 00:32:07,020
designed around the developer

765
00:32:07,020 --> 00:32:09,179
what does that actually mean well the

766
00:32:09,179 --> 00:32:11,580
state of static analysis today we scan

767
00:32:11,580 --> 00:32:13,740
for code for vulnerable like if you

768
00:32:13,740 --> 00:32:15,539
think about what static analysis is is

769
00:32:15,539 --> 00:32:18,299
scanning for your code for vulnerable

770
00:32:18,299 --> 00:32:19,679
patterns

771
00:32:19,679 --> 00:32:21,779
uh the big problem is that there's often

772
00:32:21,779 --> 00:32:24,000
thousands of results

773
00:32:24,000 --> 00:32:26,760
if you are a security engineer this is

774
00:32:26,760 --> 00:32:28,860
fine you will find the needle in the

775
00:32:28,860 --> 00:32:31,500
haystack but if you've now taken that

776
00:32:31,500 --> 00:32:33,179
same tool that funds thousands of

777
00:32:33,179 --> 00:32:35,279
results and stuck it in as part of the

778
00:32:35,279 --> 00:32:37,799
developer process developers are going

779
00:32:37,799 --> 00:32:41,100
to be very frustrated because they don't

780
00:32:41,100 --> 00:32:42,960
have time to look through thousands of

781
00:32:42,960 --> 00:32:45,120
results that's not what they should be

782
00:32:45,120 --> 00:32:47,220
focused on

783
00:32:47,220 --> 00:32:49,559
results today are very much owned by the

784
00:32:49,559 --> 00:32:51,539
security team and so a lot of times even

785
00:32:51,539 --> 00:32:53,279
if you're running it early on security

786
00:32:53,279 --> 00:32:55,500
team has to review it maybe they'll send

787
00:32:55,500 --> 00:32:57,779
over a PDF to the development team to

788
00:32:57,779 --> 00:33:00,419
say oh we think these are are the actual

789
00:33:00,419 --> 00:33:03,000
issues but then even from there most of

790
00:33:03,000 --> 00:33:05,460
them are not actually issues

791
00:33:05,460 --> 00:33:07,080
like these are the issues that

792
00:33:07,080 --> 00:33:08,820
developers face on a date like this is

793
00:33:08,820 --> 00:33:11,340
the pain that a developer has with the

794
00:33:11,340 --> 00:33:13,640
state of static analysis today

795
00:33:13,640 --> 00:33:15,600
well we think that it should be

796
00:33:15,600 --> 00:33:18,179
different if we actually design

797
00:33:18,179 --> 00:33:21,480
for the developer static analysis should

798
00:33:21,480 --> 00:33:26,100
feel like an automated Security review

799
00:33:26,100 --> 00:33:28,380
um it should it should happen at pull

800
00:33:28,380 --> 00:33:31,200
request time at code review time right

801
00:33:31,200 --> 00:33:34,740
you open up a pull request and you get

802
00:33:34,740 --> 00:33:36,600
really good results

803
00:33:36,600 --> 00:33:38,399
within the pr

804
00:33:38,399 --> 00:33:40,620
and you'll be able to comment on that

805
00:33:40,620 --> 00:33:43,500
right this is it should feel like like a

806
00:33:43,500 --> 00:33:45,779
a security expert is actually reviewing

807
00:33:45,779 --> 00:33:47,760
your code

808
00:33:47,760 --> 00:33:50,159
it should also produce accurate and

809
00:33:50,159 --> 00:33:52,380
relevant results

810
00:33:52,380 --> 00:33:54,240
um we believe the bar should be a 90

811
00:33:54,240 --> 00:33:56,880
fixed rate we're not there yet as an

812
00:33:56,880 --> 00:34:00,419
industry but this is what we need to do

813
00:34:00,419 --> 00:34:02,220
um this actually this number comes from

814
00:34:02,220 --> 00:34:05,100
from Google Google between 2008 and 2012

815
00:34:05,100 --> 00:34:08,339
was using spot bugs they developed this

816
00:34:08,339 --> 00:34:10,500
whole whole portal for it but what they

817
00:34:10,500 --> 00:34:12,659
found was that developers didn't use it

818
00:34:12,659 --> 00:34:14,820
so they said let's let's create issues

819
00:34:14,820 --> 00:34:17,339
for developers but then they found that

820
00:34:17,339 --> 00:34:21,418
only 14 of that was actually being fixed

821
00:34:21,418 --> 00:34:23,280
like these were real issues like the

822
00:34:23,280 --> 00:34:25,918
most real but linting stuff but still

823
00:34:25,918 --> 00:34:28,560
only 14 were being fixed

824
00:34:28,560 --> 00:34:31,500
then they moved into the pull request

825
00:34:31,500 --> 00:34:33,359
um and they found that some rules were

826
00:34:33,359 --> 00:34:35,399
great but some rules were very very

827
00:34:35,399 --> 00:34:38,339
noisy and developers absolutely hated

828
00:34:38,339 --> 00:34:41,339
the noise and what they found was really

829
00:34:41,339 --> 00:34:44,339
the rate that it should be is is 90 like

830
00:34:44,339 --> 00:34:46,500
that's the rate that we need to aim for

831
00:34:46,500 --> 00:34:48,000
in order for developers to actually

832
00:34:48,000 --> 00:34:49,560
trust the tool

833
00:34:49,560 --> 00:34:51,239
developers will trust the tool when we

834
00:34:51,239 --> 00:34:53,760
get to a 90 fixed rate

835
00:34:53,760 --> 00:34:55,940
this is hard but it's not impossible

836
00:34:55,940 --> 00:34:59,040
it's actually very very possible

837
00:34:59,040 --> 00:35:01,859
the other thing is that a great

838
00:35:01,859 --> 00:35:03,599
experience should also include

839
00:35:03,599 --> 00:35:06,180
suggestions right like let's let's point

840
00:35:06,180 --> 00:35:08,280
you towards the solution

841
00:35:08,280 --> 00:35:09,900
and then finally

842
00:35:09,900 --> 00:35:12,060
we should be aggregating the world's

843
00:35:12,060 --> 00:35:15,060
security efforts

844
00:35:15,060 --> 00:35:17,760
today there are single vendors that are

845
00:35:17,760 --> 00:35:20,760
are working on on their Solutions but

846
00:35:20,760 --> 00:35:23,579
but we should actually be engaging the

847
00:35:23,579 --> 00:35:25,260
rest of the world in our security

848
00:35:25,260 --> 00:35:28,619
efforts in a very real way

849
00:35:28,619 --> 00:35:31,320
in this very same way that GitHub has

850
00:35:31,320 --> 00:35:33,599
done this for open source where we've

851
00:35:33,599 --> 00:35:35,880
opened where we've we're relying on

852
00:35:35,880 --> 00:35:38,099
developers all over the world

853
00:35:38,099 --> 00:35:41,099
for software we should be relying on

854
00:35:41,099 --> 00:35:43,920
Security Experts all over the world for

855
00:35:43,920 --> 00:35:45,900
their security knowledge so we should be

856
00:35:45,900 --> 00:35:47,760
aggregating the world's security efforts

857
00:35:47,760 --> 00:35:50,400
again like this is how automated

858
00:35:50,400 --> 00:35:52,020
Security review this is how static

859
00:35:52,020 --> 00:35:55,099
analysis should be

860
00:35:55,619 --> 00:35:57,480
this is actually what we're building at

861
00:35:57,480 --> 00:36:00,359
GitHub right this is specifically what

862
00:36:00,359 --> 00:36:02,579
we're building at GitHub we are building

863
00:36:02,579 --> 00:36:07,800
a developer First Security application

864
00:36:07,800 --> 00:36:11,040
and so when I think about this I think

865
00:36:11,040 --> 00:36:12,240
about it in a number of different

866
00:36:12,240 --> 00:36:14,820
portions one area that we very heavily

867
00:36:14,820 --> 00:36:17,520
invested in was code scanning

868
00:36:17,520 --> 00:36:20,339
um about three years ago we acquired a

869
00:36:20,339 --> 00:36:22,440
company known as SEMO Semel was creating

870
00:36:22,440 --> 00:36:24,060
this really interesting technology known

871
00:36:24,060 --> 00:36:28,079
as coql what code ql does is it's pretty

872
00:36:28,079 --> 00:36:30,480
much a very Advanced semantic code

873
00:36:30,480 --> 00:36:33,180
analysis engine they actually load your

874
00:36:33,180 --> 00:36:35,700
code into a semantic database

875
00:36:35,700 --> 00:36:37,800
and then we run what's known as a code

876
00:36:37,800 --> 00:36:40,560
ql query those code ql queries are

877
00:36:40,560 --> 00:36:43,260
looking for specific patterns so if I

878
00:36:43,260 --> 00:36:44,460
think about something like a SQL

879
00:36:44,460 --> 00:36:46,500
injection I'm looking for information

880
00:36:46,500 --> 00:36:51,420
coming in from an unsecured Source let's

881
00:36:51,420 --> 00:36:53,820
say a rest API

882
00:36:53,820 --> 00:36:56,599
um human input and then I'm looking for

883
00:36:56,599 --> 00:36:59,700
that data to flow to something like an

884
00:36:59,700 --> 00:37:01,740
execution against the database

885
00:37:01,740 --> 00:37:05,220
you know an unsafe sync from source to

886
00:37:05,220 --> 00:37:07,500
sync those are the types of things that

887
00:37:07,500 --> 00:37:09,359
coach UL can look for

888
00:37:09,359 --> 00:37:11,400
but the interesting thing over here and

889
00:37:11,400 --> 00:37:12,960
the key over here

890
00:37:12,960 --> 00:37:14,940
is that code 12 is actually we've

891
00:37:14,940 --> 00:37:17,040
actually open sourced the code ql

892
00:37:17,040 --> 00:37:18,960
queries which means that if you go to

893
00:37:18,960 --> 00:37:21,780
github.com GitHub codeql you can see

894
00:37:21,780 --> 00:37:23,700
every single query that we've opened

895
00:37:23,700 --> 00:37:25,320
source

896
00:37:25,320 --> 00:37:27,240
the key over there is that the rest of

897
00:37:27,240 --> 00:37:29,940
the world can now start to to develop

898
00:37:29,940 --> 00:37:31,859
these curricula queries and then if you

899
00:37:31,859 --> 00:37:33,839
are using code scanning and coql you can

900
00:37:33,839 --> 00:37:35,700
start to benefit from that

901
00:37:35,700 --> 00:37:39,060
but we've taken that technology and

902
00:37:39,060 --> 00:37:41,339
integrated it directly in as part of

903
00:37:41,339 --> 00:37:43,440
GitHub as part of the Native developer

904
00:37:43,440 --> 00:37:46,500
workflow so the developers are used to

905
00:37:46,500 --> 00:37:48,300
the tools that they're using but it's

906
00:37:48,300 --> 00:37:51,359
integrated intimately as part of the

907
00:37:51,359 --> 00:37:52,920
pull request as part of the tools that

908
00:37:52,920 --> 00:37:54,960
they love

909
00:37:54,960 --> 00:37:57,900
part of codeql is for compiled languages

910
00:37:57,900 --> 00:37:59,579
we require a build

911
00:37:59,579 --> 00:38:02,040
there's a really good reason for that we

912
00:38:02,040 --> 00:38:04,200
glean a lot of information off of your

913
00:38:04,200 --> 00:38:06,420
belt we're able to see not only your

914
00:38:06,420 --> 00:38:10,380
code but how your code is actually built

915
00:38:10,380 --> 00:38:12,180
and that allows us to weed out a lot of

916
00:38:12,180 --> 00:38:14,220
false positives so in general like when

917
00:38:14,220 --> 00:38:15,839
you run code ql you will see that

918
00:38:15,839 --> 00:38:18,480
there's a lot less noise this is

919
00:38:18,480 --> 00:38:21,480
something that we've specifically spent

920
00:38:21,480 --> 00:38:24,540
a lot of time doing because the reality

921
00:38:24,540 --> 00:38:26,760
is if we do want to shift left we need

922
00:38:26,760 --> 00:38:29,099
to reduce that noise

923
00:38:29,099 --> 00:38:31,140
and so when I think about some of the

924
00:38:31,140 --> 00:38:32,940
code ql queries that have been developed

925
00:38:32,940 --> 00:38:34,440
most of them have been developed by

926
00:38:34,440 --> 00:38:35,579
GitHub

927
00:38:35,579 --> 00:38:37,800
that's the core Circle

928
00:38:37,800 --> 00:38:39,960
but then there is that Community powered

929
00:38:39,960 --> 00:38:43,500
aspect right like the vast community of

930
00:38:43,500 --> 00:38:44,720
of of of of of

931
00:38:44,720 --> 00:38:47,460
researchers of of Microsoft and Google

932
00:38:47,460 --> 00:38:49,800
project zero and Uber

933
00:38:49,800 --> 00:38:51,839
um security Engineers contributing back

934
00:38:51,839 --> 00:38:54,660
to the GitHub code ql query base

935
00:38:54,660 --> 00:38:56,880
that way when a new zero day comes in

936
00:38:56,880 --> 00:38:59,880
comes out we can now have a query to

937
00:38:59,880 --> 00:39:03,900
address that very very quickly

938
00:39:03,900 --> 00:39:06,000
the other thing I think about as well

939
00:39:06,000 --> 00:39:08,760
that we're building at GitHub is a

940
00:39:08,760 --> 00:39:11,460
secret scanning for a very long time as

941
00:39:11,460 --> 00:39:13,260
I mentioned we were detecting Secrets

942
00:39:13,260 --> 00:39:16,260
anywhere in your git history

943
00:39:16,260 --> 00:39:18,480
and this is not just for GitHub this is

944
00:39:18,480 --> 00:39:20,880
actually all sorts of tokens out there I

945
00:39:20,880 --> 00:39:21,900
think there's

946
00:39:21,900 --> 00:39:25,500
over 250 token types today that we that

947
00:39:25,500 --> 00:39:28,619
we that we support whether it's Azure

948
00:39:28,619 --> 00:39:33,900
AWS you know the large Cloud providers

949
00:39:33,900 --> 00:39:36,240
um or if you have any any ones that

950
00:39:36,240 --> 00:39:38,339
you'd like us to partner up let us know

951
00:39:38,339 --> 00:39:40,260
of course

952
00:39:40,260 --> 00:39:42,720
but for a long time this is just

953
00:39:42,720 --> 00:39:45,119
remediation we just detected it as as

954
00:39:45,119 --> 00:39:48,240
part of when you automatically in the

955
00:39:48,240 --> 00:39:50,700
background when you check something in

956
00:39:50,700 --> 00:39:53,820
but I'm really happy that about two

957
00:39:53,820 --> 00:39:55,560
months ago we actually released what we

958
00:39:55,560 --> 00:39:58,040
term as push protections

959
00:39:58,040 --> 00:40:02,280
where today we can we can block secrets

960
00:40:02,280 --> 00:40:04,560
that from ever making it into GitHub

961
00:40:04,560 --> 00:40:06,599
again like this is that area that we

962
00:40:06,599 --> 00:40:09,240
want to be in

963
00:40:09,240 --> 00:40:10,920
um and we're taking that developer first

964
00:40:10,920 --> 00:40:14,099
approach we're trying very we're first

965
00:40:14,099 --> 00:40:16,920
enabling the secrets that have the

966
00:40:16,920 --> 00:40:19,260
lowest most positive rate that way we

967
00:40:19,260 --> 00:40:21,119
don't annoy that developer we're trying

968
00:40:21,119 --> 00:40:23,579
to give them as much information as

969
00:40:23,579 --> 00:40:25,680
possible within the commit that way they

970
00:40:25,680 --> 00:40:27,240
can easily make a decision of whether

971
00:40:27,240 --> 00:40:30,000
this is a real issue or not and then

972
00:40:30,000 --> 00:40:32,640
finally like we're redirecting them to a

973
00:40:32,640 --> 00:40:35,099
UI that way they can dig in deeper but

974
00:40:35,099 --> 00:40:39,119
also also notate this as possible or not

975
00:40:39,119 --> 00:40:41,579
this is a huge step in the industry of

976
00:40:41,579 --> 00:40:44,280
preventing these credential leaks from

977
00:40:44,280 --> 00:40:47,040
ever occurring in the first place

978
00:40:47,040 --> 00:40:48,960
and then finally I think about about

979
00:40:48,960 --> 00:40:51,780
that depend about uh about of the

980
00:40:51,780 --> 00:40:53,579
independencies for the latest

981
00:40:53,579 --> 00:40:55,980
functionality seeing the risk introduced

982
00:40:55,980 --> 00:40:57,900
from dependencies directly within the

983
00:40:57,900 --> 00:41:00,000
pull request that we you never actually

984
00:41:00,000 --> 00:41:02,280
introduced that as part of your main or

985
00:41:02,280 --> 00:41:04,740
Master branch

986
00:41:04,740 --> 00:41:06,420
um we're even going a little further I

987
00:41:06,420 --> 00:41:08,700
don't know if you've seen this but we we

988
00:41:08,700 --> 00:41:10,800
release vulnerability exposure or

989
00:41:10,800 --> 00:41:14,040
analysis which allows us now to to

990
00:41:14,040 --> 00:41:16,560
surface if your code is actually calling

991
00:41:16,560 --> 00:41:18,780
the vulnerable code again we're trying

992
00:41:18,780 --> 00:41:20,400
to give the developer as much

993
00:41:20,400 --> 00:41:23,579
information as possible that way they

994
00:41:23,579 --> 00:41:25,380
understand the priority of the

995
00:41:25,380 --> 00:41:26,880
vulnerability

996
00:41:26,880 --> 00:41:28,619
um and they can just click that merge

997
00:41:28,619 --> 00:41:30,720
button if there's an issue

998
00:41:30,720 --> 00:41:33,359
this is this is all built in as part of

999
00:41:33,359 --> 00:41:36,839
the Native GitHub platform and so we're

1000
00:41:36,839 --> 00:41:38,460
trying like this is what we're talking

1001
00:41:38,460 --> 00:41:41,400
about of Shifting the mindset from from

1002
00:41:41,400 --> 00:41:44,099
security engineer only focused to being

1003
00:41:44,099 --> 00:41:47,540
a developer first Focus

1004
00:41:47,579 --> 00:41:49,260
you can check out a lot more information

1005
00:41:49,260 --> 00:41:52,920
on github.com features Security on what

1006
00:41:52,920 --> 00:41:54,599
we're building over here

1007
00:41:54,599 --> 00:41:58,380
I I just wanted to end on on a couple of

1008
00:41:58,380 --> 00:42:00,900
closing thoughts

1009
00:42:00,900 --> 00:42:02,220
firstly

1010
00:42:02,220 --> 00:42:05,940
if we build four developers we very much

1011
00:42:05,940 --> 00:42:08,640
believe that we can shift left

1012
00:42:08,640 --> 00:42:10,800
we very much believe that we can change

1013
00:42:10,800 --> 00:42:13,500
this chart that we see of scanning of

1014
00:42:13,500 --> 00:42:15,599
less than 10 scanning more than once a

1015
00:42:15,599 --> 00:42:16,440
week

1016
00:42:16,440 --> 00:42:19,200
to having it just built in as part of

1017
00:42:19,200 --> 00:42:20,040
your

1018
00:42:20,040 --> 00:42:23,480
your standard process

1019
00:42:23,940 --> 00:42:26,339
we also believe that if if we can work

1020
00:42:26,339 --> 00:42:28,200
together we can do more

1021
00:42:28,200 --> 00:42:32,400
it's not just a specific individual a

1022
00:42:32,400 --> 00:42:35,220
specific security engineering company

1023
00:42:35,220 --> 00:42:38,160
we as a globe as a global Community need

1024
00:42:38,160 --> 00:42:40,200
to work on this together which is why

1025
00:42:40,200 --> 00:42:43,320
GitHub is so so interested about in this

1026
00:42:43,320 --> 00:42:44,760
area

1027
00:42:44,760 --> 00:42:47,640
it's because software lives on GitHub so

1028
00:42:47,640 --> 00:42:49,079
so we need to start working together

1029
00:42:49,079 --> 00:42:52,440
more in order to figure this out

1030
00:42:52,440 --> 00:42:55,619
if we build tools that developers love

1031
00:42:55,619 --> 00:42:58,140
and work together we can actually secure

1032
00:42:58,140 --> 00:43:00,540
the open source again it's all about

1033
00:43:00,540 --> 00:43:02,700
getting that that developer love and

1034
00:43:02,700 --> 00:43:05,220
that developer mindset over here

1035
00:43:05,220 --> 00:43:07,099
and then finally

1036
00:43:07,099 --> 00:43:10,440
devcyclops is a slow idea it takes time

1037
00:43:10,440 --> 00:43:13,260
but slow ideas can change the world

1038
00:43:13,260 --> 00:43:18,420
Joseph Lister and and the um

1039
00:43:18,420 --> 00:43:20,280
Envy

1040
00:43:20,280 --> 00:43:23,819
and the carbolic acid that he created

1041
00:43:23,819 --> 00:43:26,339
and that he used took a really long time

1042
00:43:26,339 --> 00:43:29,220
in order to change modern surgery but he

1043
00:43:29,220 --> 00:43:30,900
is the father of modern surgery and now

1044
00:43:30,900 --> 00:43:32,940
there is not one

1045
00:43:32,940 --> 00:43:34,560
surgery room that doesn't use

1046
00:43:34,560 --> 00:43:36,119
antiseptics

1047
00:43:36,119 --> 00:43:39,000
and so in that same manner Dev stack UPS

1048
00:43:39,000 --> 00:43:41,400
it's taking its time but it will change

1049
00:43:41,400 --> 00:43:42,720
the world

1050
00:43:42,720 --> 00:43:45,439
thank you

1051
00:43:47,640 --> 00:43:51,420
thank you Isaac very informative talk

1052
00:43:51,420 --> 00:43:52,500
um

1053
00:43:52,500 --> 00:43:55,260
so let me remind the attendees that we

1054
00:43:55,260 --> 00:43:59,520
are now open to uh submit they can

1055
00:43:59,520 --> 00:44:03,859
submit q a in the Q a tab

1056
00:44:04,920 --> 00:44:06,480
that should be part of your whole

1057
00:44:06,480 --> 00:44:09,200
platform

1058
00:44:11,110 --> 00:44:13,980
[Music]

1059
00:44:13,980 --> 00:44:17,460
so I will wait for some attendees to

1060
00:44:17,460 --> 00:44:20,460
send us questions uh Isaac I was

1061
00:44:20,460 --> 00:44:22,980
wondering like what your thoughts are

1062
00:44:22,980 --> 00:44:24,119
about

1063
00:44:24,119 --> 00:44:24,900
um

1064
00:44:24,900 --> 00:44:27,780
you know why developers you know they

1065
00:44:27,780 --> 00:44:30,839
don't trust disaster results and

1066
00:44:30,839 --> 00:44:33,599
um yeah the the automated success

1067
00:44:33,599 --> 00:44:35,339
results

1068
00:44:35,339 --> 00:44:36,780
yeah I mean I think that goes to a lot

1069
00:44:36,780 --> 00:44:38,339
of what I was saying

1070
00:44:38,339 --> 00:44:42,900
um the the tools that were created

1071
00:44:42,900 --> 00:44:46,380
um AR very very noisy which which always

1072
00:44:46,380 --> 00:44:48,300
adds a lot of complexity for developing

1073
00:44:48,300 --> 00:44:51,300
developers absolutely hate that

1074
00:44:51,300 --> 00:44:53,280
um be that there's that the general that

1075
00:44:53,280 --> 00:44:55,020
there's a separate portal that they have

1076
00:44:55,020 --> 00:44:57,900
to go into that wasn't designed for them

1077
00:44:57,900 --> 00:44:59,940
um a lot of times not integrated as part

1078
00:44:59,940 --> 00:45:02,579
of like pull requests and stuff

1079
00:45:02,579 --> 00:45:04,980
um and so like when you have those three

1080
00:45:04,980 --> 00:45:06,960
factors together

1081
00:45:06,960 --> 00:45:08,880
that's usually what causes a lot of

1082
00:45:08,880 --> 00:45:11,940
angst amongst developers I I personally

1083
00:45:11,940 --> 00:45:12,839
am

1084
00:45:12,839 --> 00:45:17,180
a developer not day to day but anymore

1085
00:45:17,180 --> 00:45:19,380
but I still very much

1086
00:45:19,380 --> 00:45:22,079
developed an open source and whatnot and

1087
00:45:22,079 --> 00:45:24,180
I could tell you when there's too much I

1088
00:45:24,180 --> 00:45:27,060
just tried it down right I just I don't

1089
00:45:27,060 --> 00:45:28,980
have time for that

1090
00:45:28,980 --> 00:45:29,940
um but

1091
00:45:29,940 --> 00:45:32,460
my right I think that there's a better

1092
00:45:32,460 --> 00:45:33,780
way like I think that we could do better

1093
00:45:33,780 --> 00:45:36,440
in that regard

1094
00:45:36,480 --> 00:45:39,480
yeah I think uh yeah being a developer

1095
00:45:39,480 --> 00:45:41,579
myself for many years uh yeah I

1096
00:45:41,579 --> 00:45:43,800
understand uh you know they want to see

1097
00:45:43,800 --> 00:45:46,079
they're in a certain environment they're

1098
00:45:46,079 --> 00:45:47,700
used to that every day and they want to

1099
00:45:47,700 --> 00:45:51,180
see things happen there yeah yeah and I

1100
00:45:51,180 --> 00:45:53,700
mean it's it's important to know I mean

1101
00:45:53,700 --> 00:45:56,040
for a security engineer you want it like

1102
00:45:56,040 --> 00:45:57,599
a lot of times you may want to see the

1103
00:45:57,599 --> 00:45:59,940
the haystack you know and the needle

1104
00:45:59,940 --> 00:46:02,280
versus Haystack analogy you may want to

1105
00:46:02,280 --> 00:46:04,020
see the haystack and that totally makes

1106
00:46:04,020 --> 00:46:05,880
sense the problem is always the

1107
00:46:05,880 --> 00:46:08,220
developer the developer

1108
00:46:08,220 --> 00:46:10,560
um only really wants the needles and so

1109
00:46:10,560 --> 00:46:12,960
either we're doing this outside of the

1110
00:46:12,960 --> 00:46:15,240
developer workflow which means PDFs and

1111
00:46:15,240 --> 00:46:18,240
jira tickets are being created

1112
00:46:18,240 --> 00:46:19,020
um

1113
00:46:19,020 --> 00:46:22,079
or we can actually just integrate it in

1114
00:46:22,079 --> 00:46:24,300
as part of that that native workflow but

1115
00:46:24,300 --> 00:46:25,740
we have to think about the developers

1116
00:46:25,740 --> 00:46:27,420
lives

1117
00:46:27,420 --> 00:46:31,140
yeah very much so thank you uh we do

1118
00:46:31,140 --> 00:46:33,060
have a question now

1119
00:46:33,060 --> 00:46:36,359
uh it is have you found that

1120
00:46:36,359 --> 00:46:39,060
communicating stories from bug bounties

1121
00:46:39,060 --> 00:46:42,300
as a means to illustrate here's how it

1122
00:46:42,300 --> 00:46:44,760
went wrong to raise awareness and

1123
00:46:44,760 --> 00:46:46,980
interest in developing software more

1124
00:46:46,980 --> 00:46:49,460
securely

1125
00:46:50,400 --> 00:46:53,280
so yeah I mean I would say that's that's

1126
00:46:53,280 --> 00:46:56,160
definitely a good approach right like to

1127
00:46:56,160 --> 00:46:57,599
talk about

1128
00:46:57,599 --> 00:47:00,839
how things have gone wrong in the past

1129
00:47:00,839 --> 00:47:03,780
what I've done a lot is I've I've I've

1130
00:47:03,780 --> 00:47:06,359
generally liked to analyze where things

1131
00:47:06,359 --> 00:47:10,020
go wrong and try to come up with

1132
00:47:10,020 --> 00:47:12,720
solutions to address that and a lot of

1133
00:47:12,720 --> 00:47:13,859
times like when you're developing

1134
00:47:13,859 --> 00:47:16,140
especially like an app sack security

1135
00:47:16,140 --> 00:47:18,060
program there's going to be issues all

1136
00:47:18,060 --> 00:47:19,260
over the place and so you're going to

1137
00:47:19,260 --> 00:47:21,000
have to figure out exactly where you

1138
00:47:21,000 --> 00:47:23,579
should spend your time

1139
00:47:23,579 --> 00:47:26,640
um and so part of this is storytelling

1140
00:47:26,640 --> 00:47:30,420
is is is talking about the way things

1141
00:47:30,420 --> 00:47:33,119
have gone wrong but I also like to focus

1142
00:47:33,119 --> 00:47:34,500
on

1143
00:47:34,500 --> 00:47:37,680
how we can get it right like right like

1144
00:47:37,680 --> 00:47:40,020
it's good to start with where things

1145
00:47:40,020 --> 00:47:41,640
went wrong but it's really really

1146
00:47:41,640 --> 00:47:45,359
important to paint the future of of what

1147
00:47:45,359 --> 00:47:48,660
could be and what we need to do

1148
00:47:48,660 --> 00:47:51,060
um and and what we're doing in order to

1149
00:47:51,060 --> 00:47:53,339
to make sure that things don't go wrong

1150
00:47:53,339 --> 00:47:55,079
again

1151
00:47:55,079 --> 00:47:56,640
um and so that's like just my general

1152
00:47:56,640 --> 00:47:59,720
philosophy over there

1153
00:47:59,819 --> 00:48:02,460
yeah thank you

1154
00:48:02,460 --> 00:48:06,540
um and Isaac you talked about uh you

1155
00:48:06,540 --> 00:48:09,599
know secrets in the source code and you

1156
00:48:09,599 --> 00:48:13,079
know that that's a huge problem so

1157
00:48:13,079 --> 00:48:16,740
have you seen any shift in these secrets

1158
00:48:16,740 --> 00:48:19,680
since uh since GitHub has been releasing

1159
00:48:19,680 --> 00:48:23,160
uh these new protections

1160
00:48:23,160 --> 00:48:25,319
Yeah we actually have

1161
00:48:25,319 --> 00:48:28,140
um so when we release push protections

1162
00:48:28,140 --> 00:48:31,440
we are seeing uh a drop in rate in in

1163
00:48:31,440 --> 00:48:33,300
Secrets being

1164
00:48:33,300 --> 00:48:36,060
integrated in Secrets being sent into

1165
00:48:36,060 --> 00:48:38,700
together again like this is still on a

1166
00:48:38,700 --> 00:48:40,740
small scale it's still in beta and so

1167
00:48:40,740 --> 00:48:44,520
over time we expect that 90 of

1168
00:48:44,520 --> 00:48:46,800
people using

1169
00:48:46,800 --> 00:48:50,280
um secret scanning are are going to have

1170
00:48:50,280 --> 00:48:52,560
Push protections on and and that will

1171
00:48:52,560 --> 00:48:55,020
prevent a lot of issues from ever making

1172
00:48:55,020 --> 00:48:56,760
it into GitHub which is where we want to

1173
00:48:56,760 --> 00:48:57,599
be

1174
00:48:57,599 --> 00:48:59,160
um so we're definitely seeing a huge

1175
00:48:59,160 --> 00:49:00,839
effect

1176
00:49:00,839 --> 00:49:03,240
um just by using that today again like

1177
00:49:03,240 --> 00:49:05,700
it's just so easy to use you turn it on

1178
00:49:05,700 --> 00:49:07,319
across your organization you don't have

1179
00:49:07,319 --> 00:49:09,240
to think about it

1180
00:49:09,240 --> 00:49:11,220
um and and now all of a sudden you're

1181
00:49:11,220 --> 00:49:12,720
preventing secrets from ever making it

1182
00:49:12,720 --> 00:49:14,700
in so yeah we've definitely seen a huge

1183
00:49:14,700 --> 00:49:16,680
effect on that yes very nice very

1184
00:49:16,680 --> 00:49:20,640
convenient yes definitely

1185
00:49:20,640 --> 00:49:22,260
all right

1186
00:49:22,260 --> 00:49:23,220
um

1187
00:49:23,220 --> 00:49:25,380
let's check if we have any more

1188
00:49:25,380 --> 00:49:28,760
questions from the attendees

1189
00:49:42,380 --> 00:49:44,280
while we wait

1190
00:49:44,280 --> 00:49:45,260
um

1191
00:49:45,260 --> 00:49:48,900
you were showing us about the the code

1192
00:49:48,900 --> 00:49:53,460
ql and that's the uh tied to the static

1193
00:49:53,460 --> 00:49:56,400
analysis tools within GitHub

1194
00:49:56,400 --> 00:49:59,000
and is this uh

1195
00:49:59,000 --> 00:50:02,040
contribution to code ql from the

1196
00:50:02,040 --> 00:50:04,920
community and security researchers

1197
00:50:04,920 --> 00:50:07,500
um can you speak example about example

1198
00:50:07,500 --> 00:50:09,660
wise or how someone can get involved in

1199
00:50:09,660 --> 00:50:11,220
that project

1200
00:50:11,220 --> 00:50:14,880
yeah totally so if you go to github.com

1201
00:50:14,880 --> 00:50:17,579
GitHub code ql you can actually see all

1202
00:50:17,579 --> 00:50:21,180
the queries that we've developed

1203
00:50:21,180 --> 00:50:21,900
um

1204
00:50:21,900 --> 00:50:23,940
and there's a ton of learning materials

1205
00:50:23,940 --> 00:50:25,440
and stuff that you can get started on

1206
00:50:25,440 --> 00:50:28,740
over there but if you find any security

1207
00:50:28,740 --> 00:50:31,440
vulnerabilities what I encourage you to

1208
00:50:31,440 --> 00:50:34,140
do is to create a code ql query and pull

1209
00:50:34,140 --> 00:50:36,480
request it back to us we'll review it

1210
00:50:36,480 --> 00:50:39,480
and then we'll add it into our

1211
00:50:39,480 --> 00:50:41,760
our security Suites that way the rest of

1212
00:50:41,760 --> 00:50:43,800
the world can start to benefit from them

1213
00:50:43,800 --> 00:50:45,420
and we're also even give you money for

1214
00:50:45,420 --> 00:50:47,040
that right there's a bounty that we will

1215
00:50:47,040 --> 00:50:49,079
pay you for that

1216
00:50:49,079 --> 00:50:51,000
um we've actually seen some pretty high

1217
00:50:51,000 --> 00:50:54,119
profile cases of that occurring

1218
00:50:54,119 --> 00:50:56,460
um and so the the example I think you

1219
00:50:56,460 --> 00:50:58,619
know spring for Shell which happened

1220
00:50:58,619 --> 00:51:01,740
earlier this year back in the January

1221
00:51:01,740 --> 00:51:04,079
February time frame

1222
00:51:04,079 --> 00:51:06,300
um a security researcher the community

1223
00:51:06,300 --> 00:51:09,660
actually created a query within hours

1224
00:51:09,660 --> 00:51:13,020
um and we were able to integrate that in

1225
00:51:13,020 --> 00:51:17,160
uh but but that just shows the the power

1226
00:51:17,160 --> 00:51:21,720
of of code ql which is we can the

1227
00:51:21,720 --> 00:51:23,160
community even like when we don't have

1228
00:51:23,160 --> 00:51:25,319
enough time to develop a query the

1229
00:51:25,319 --> 00:51:27,059
community will create the query for us

1230
00:51:27,059 --> 00:51:29,099
we'll just review it

1231
00:51:29,099 --> 00:51:30,720
um but you can start to benefit from

1232
00:51:30,720 --> 00:51:33,180
that immediately and integrate that in

1233
00:51:33,180 --> 00:51:35,300
your workflows across your company

1234
00:51:35,300 --> 00:51:37,880
immediately to ensure that you're not

1235
00:51:37,880 --> 00:51:39,960
affected by a vulnerability like that

1236
00:51:39,960 --> 00:51:41,640
and so that's really what we mean by

1237
00:51:41,640 --> 00:51:43,920
affecting the rest of the world and

1238
00:51:43,920 --> 00:51:45,480
making sure that the rest of the world

1239
00:51:45,480 --> 00:51:49,619
is involved in in in securing our our

1240
00:51:49,619 --> 00:51:52,200
applications as well

1241
00:51:52,200 --> 00:51:55,020
yes very interesting and and it's a good

1242
00:51:55,020 --> 00:51:58,619
way for experts to get involved in you

1243
00:51:58,619 --> 00:52:01,200
know helping protect against these

1244
00:52:01,200 --> 00:52:03,720
things which keep coming up every month

1245
00:52:03,720 --> 00:52:05,700
or week

1246
00:52:05,700 --> 00:52:07,319
yeah

1247
00:52:07,319 --> 00:52:08,520
okay

1248
00:52:08,520 --> 00:52:09,420
um

1249
00:52:09,420 --> 00:52:11,760
just one final check for questions here

1250
00:52:11,760 --> 00:52:15,800
let me take a few moments

1251
00:52:23,819 --> 00:52:26,760
all right I think that's it in terms of

1252
00:52:26,760 --> 00:52:29,040
questions for today Isaac and thanks

1253
00:52:29,040 --> 00:52:32,040
again so much for the informative talk

1254
00:52:32,040 --> 00:52:34,800
and and all the efforts being done for

1255
00:52:34,800 --> 00:52:38,099
open source Community by GitHub thank

1256
00:52:38,099 --> 00:52:39,599
you so much it was really great talking

1257
00:52:39,599 --> 00:52:41,640
to you all today and have a great rest

1258
00:52:41,640 --> 00:52:44,180
of your day

