1
00:00:04,259 --> 00:00:06,540
welcome if you've just joined us or

2
00:00:06,540 --> 00:00:08,460
you've been before to the devsecops

3
00:00:08,460 --> 00:00:12,660
track here at uh appsec EU 2020 uh for

4
00:00:12,660 --> 00:00:14,639
those new here my name's Nathan Britton

5
00:00:14,639 --> 00:00:17,699
I'm a no us volunteer and now I've

6
00:00:17,699 --> 00:00:19,619
chapter leader in the Birmingham in the

7
00:00:19,619 --> 00:00:22,140
West Midlands in the UK and I'll be the

8
00:00:22,140 --> 00:00:24,539
moderator for days for today's session

9
00:00:24,539 --> 00:00:26,779
and we're going to be talking all about

10
00:00:26,779 --> 00:00:30,240
operationalizing threat modeling

11
00:00:30,240 --> 00:00:33,120
um so about 45 minutes we'll have uh

12
00:00:33,120 --> 00:00:36,360
Fraser Scott who is practically no

13
00:00:36,360 --> 00:00:38,460
introduction he's been eulogizing and

14
00:00:38,460 --> 00:00:40,260
talking about slope modeling

15
00:00:40,260 --> 00:00:42,600
um for years sorry phrase I don't want

16
00:00:42,600 --> 00:00:43,920
to give any ages away but I've been

17
00:00:43,920 --> 00:00:46,140
doing it for absolutely ages and he's

18
00:00:46,140 --> 00:00:48,120
going to be delivering his talk um

19
00:00:48,120 --> 00:00:49,739
evolving threat modeling through the

20
00:00:49,739 --> 00:00:52,379
open threat model format

21
00:00:52,379 --> 00:00:54,660
as with all the other talks today you

22
00:00:54,660 --> 00:00:56,280
can submit your questions that we'll get

23
00:00:56,280 --> 00:00:57,120
to

24
00:00:57,120 --> 00:00:58,980
um in the final 10 minutes or so to

25
00:00:58,980 --> 00:01:01,440
Fraser in your Hoover app or in the

26
00:01:01,440 --> 00:01:03,359
browser of the Huber just go to the Q a

27
00:01:03,359 --> 00:01:05,700
section and I'll keep an eye and then as

28
00:01:05,700 --> 00:01:07,799
we go along and I'll fire them over to

29
00:01:07,799 --> 00:01:10,140
Fraser as we go

30
00:01:10,140 --> 00:01:12,600
um but yeah that's more than enough for

31
00:01:12,600 --> 00:01:14,760
me I'm sure you'll want to get to hear

32
00:01:14,760 --> 00:01:16,619
all about uh effect modeling and the

33
00:01:16,619 --> 00:01:19,380
open set model format so Fraser I'll

34
00:01:19,380 --> 00:01:21,900
hand Lorraine's over to yourself

35
00:01:21,900 --> 00:01:25,020
uh thank you very much Nathan I will

36
00:01:25,020 --> 00:01:27,180
share my screen

37
00:01:27,180 --> 00:01:30,080
foreign

38
00:01:33,780 --> 00:01:35,640
welcome to evolving threat modeling

39
00:01:35,640 --> 00:01:38,159
through the open threat model format

40
00:01:38,159 --> 00:01:39,900
um so a little introduction to myself

41
00:01:39,900 --> 00:01:42,479
I'm Fraser Scott I'm the VP of product

42
00:01:42,479 --> 00:01:44,280
at areas risk

43
00:01:44,280 --> 00:01:45,900
I've been involved in threat modeling

44
00:01:45,900 --> 00:01:48,900
for about sort of seven years now I

45
00:01:48,900 --> 00:01:50,040
think it is

46
00:01:50,040 --> 00:01:52,140
um initially open in the open source

47
00:01:52,140 --> 00:01:54,240
space I created a sort of threat

48
00:01:54,240 --> 00:01:55,740
modeling as code project called

49
00:01:55,740 --> 00:01:58,560
threatsback and then for a three or so

50
00:01:58,560 --> 00:02:00,420
years threat modeling in financial

51
00:02:00,420 --> 00:02:03,420
services space my general background is

52
00:02:03,420 --> 00:02:05,640
cloud security devops I'm a sort of

53
00:02:05,640 --> 00:02:07,259
recovering sysadmin and all that kind of

54
00:02:07,259 --> 00:02:08,818
stuff

55
00:02:08,818 --> 00:02:10,860
um and you can see a range of places

56
00:02:10,860 --> 00:02:13,739
I've worked for previously so I'm going

57
00:02:13,739 --> 00:02:15,000
to be talking about threat modeling but

58
00:02:15,000 --> 00:02:16,860
this is going to be I'm going to start

59
00:02:16,860 --> 00:02:19,200
off with a little bit of a history

60
00:02:19,200 --> 00:02:21,540
um Once Upon a Time Information

61
00:02:21,540 --> 00:02:24,000
Technology was nice and simple and

62
00:02:24,000 --> 00:02:25,500
hopefully most people will recognize

63
00:02:25,500 --> 00:02:28,200
this office from The IT Crowd

64
00:02:28,200 --> 00:02:31,500
um back in the day so early 2000s and

65
00:02:31,500 --> 00:02:33,480
Beyond before that

66
00:02:33,480 --> 00:02:36,900
um Information Technology was you know a

67
00:02:36,900 --> 00:02:40,260
bunch of servers and some switches and

68
00:02:40,260 --> 00:02:41,700
some firewalls and things like that and

69
00:02:41,700 --> 00:02:43,560
that was kind of the extent of what we

70
00:02:43,560 --> 00:02:45,420
had to really deal with and obviously we

71
00:02:45,420 --> 00:02:46,680
had mainframes and a few other things

72
00:02:46,680 --> 00:02:48,780
around kicking around and voice systems

73
00:02:48,780 --> 00:02:50,400
and all that jazz but things were

74
00:02:50,400 --> 00:02:53,459
relatively straightforward back then but

75
00:02:53,459 --> 00:02:55,860
um things were also quite a lot of work

76
00:02:55,860 --> 00:02:58,560
so I used to work for an internet

77
00:02:58,560 --> 00:03:00,300
service provider when I started my

78
00:03:00,300 --> 00:03:02,760
career and we used to look after the

79
00:03:02,760 --> 00:03:05,160
infrastructure and the systems and the

80
00:03:05,160 --> 00:03:06,480
network infrastructure and all that kind

81
00:03:06,480 --> 00:03:07,620
of stuff for our customers and for

82
00:03:07,620 --> 00:03:09,959
ourselves and that involved a lot of

83
00:03:09,959 --> 00:03:12,120
manual configuration a lot of manual

84
00:03:12,120 --> 00:03:14,940
bill building of Linux boxes and FreeBSD

85
00:03:14,940 --> 00:03:18,319
and Solaris and all that kind of stuff

86
00:03:18,319 --> 00:03:22,319
where so that was there's some of the

87
00:03:22,319 --> 00:03:24,300
Cisco stuff obviously used uh

88
00:03:24,300 --> 00:03:25,560
configuration files which was pretty

89
00:03:25,560 --> 00:03:28,319
cool but a lot of the systems had to be

90
00:03:28,319 --> 00:03:30,060
built and maintained and it where you

91
00:03:30,060 --> 00:03:32,420
did do automation you were typically

92
00:03:32,420 --> 00:03:35,519
writing custom bash scripts

93
00:03:35,519 --> 00:03:37,620
um and you were creating we used to use

94
00:03:37,620 --> 00:03:40,140
Perl so our entire infrastructure was

95
00:03:40,140 --> 00:03:42,599
held together by uh you know horrendous

96
00:03:42,599 --> 00:03:44,220
pole online is running in cron jobs for

97
00:03:44,220 --> 00:03:45,659
example

98
00:03:45,659 --> 00:03:48,239
um we did a pretty awesome job of

99
00:03:48,239 --> 00:03:50,940
applying

100
00:03:50,940 --> 00:03:53,280
um sort of clever practices so our DNS

101
00:03:53,280 --> 00:03:55,379
infrastructure was maintained through

102
00:03:55,379 --> 00:03:58,500
CVS so not even subversion at the time

103
00:03:58,500 --> 00:04:01,620
right CVS and then we used M4 scripts to

104
00:04:01,620 --> 00:04:03,239
sort of add some templating and things

105
00:04:03,239 --> 00:04:05,879
like that around the the DNS zones and

106
00:04:05,879 --> 00:04:07,799
that was pretty bleeding edge at the

107
00:04:07,799 --> 00:04:08,940
time

108
00:04:08,940 --> 00:04:10,680
um but then

109
00:04:10,680 --> 00:04:12,540
in the background things were starting

110
00:04:12,540 --> 00:04:13,860
to change

111
00:04:13,860 --> 00:04:17,339
and over the years from you know 2001 we

112
00:04:17,339 --> 00:04:19,680
saw the introduction of proper

113
00:04:19,680 --> 00:04:21,298
introduction of virtualization obviously

114
00:04:21,298 --> 00:04:23,520
there had been things and emulation had

115
00:04:23,520 --> 00:04:24,600
been around for a while and

116
00:04:24,600 --> 00:04:26,460
virtualization was starting to find its

117
00:04:26,460 --> 00:04:28,560
way into the CPUs and we saw the uh the

118
00:04:28,560 --> 00:04:32,400
the creation of VMware ESX and GSX

119
00:04:32,400 --> 00:04:34,620
um and at the time actually we started

120
00:04:34,620 --> 00:04:36,240
leveraging that within the internet

121
00:04:36,240 --> 00:04:38,460
service provider I worked at um sort of

122
00:04:38,460 --> 00:04:40,440
in 2006 or so

123
00:04:40,440 --> 00:04:42,960
um but this was the really the beginning

124
00:04:42,960 --> 00:04:44,699
of a big transformation that was going

125
00:04:44,699 --> 00:04:46,320
to hit technology over the following 10

126
00:04:46,320 --> 00:04:50,520
years 2005 puppet came out and and that

127
00:04:50,520 --> 00:04:53,220
was really it the first step away from

128
00:04:53,220 --> 00:04:54,780
every single organization out there

129
00:04:54,780 --> 00:04:57,000
having to maintain the infrastructure

130
00:04:57,000 --> 00:04:59,520
and writing custom bash and pearl

131
00:04:59,520 --> 00:05:01,199
scripts and other things

132
00:05:01,199 --> 00:05:02,820
um this was really the first time that

133
00:05:02,820 --> 00:05:05,040
there was a standard way that you could

134
00:05:05,040 --> 00:05:07,800
describe your infrastructure in a

135
00:05:07,800 --> 00:05:10,740
Deployable repeatable and Technology

136
00:05:10,740 --> 00:05:13,139
agnostic way so you could you know one

137
00:05:13,139 --> 00:05:15,240
person could write a public um what do

138
00:05:15,240 --> 00:05:17,160
they call them manifest or whatever it

139
00:05:17,160 --> 00:05:19,440
was and you could share that with others

140
00:05:19,440 --> 00:05:21,600
and you could learn from others and then

141
00:05:21,600 --> 00:05:23,520
2006 we started to see the first

142
00:05:23,520 --> 00:05:25,800
generation of AWS services so at this

143
00:05:25,800 --> 00:05:27,960
point we basically commoditized um

144
00:05:27,960 --> 00:05:31,080
Computing and storage in a way that was

145
00:05:31,080 --> 00:05:32,600
never really done before

146
00:05:32,600 --> 00:05:36,360
2009 Chef very similar to puppet um Chef

147
00:05:36,360 --> 00:05:37,740
was founded slightly different approach

148
00:05:37,740 --> 00:05:41,100
using um you know pure Ruby as a DSL

149
00:05:41,100 --> 00:05:43,740
um but 2009 also saw two other key

150
00:05:43,740 --> 00:05:46,139
moments in the in the devops movement as

151
00:05:46,139 --> 00:05:49,020
it turned out to become there was the 10

152
00:05:49,020 --> 00:05:52,080
deploys per day talk at Flickr and

153
00:05:52,080 --> 00:05:54,360
Patrick Dubois organized the first

154
00:05:54,360 --> 00:05:55,800
devops train I think that's the first

155
00:05:55,800 --> 00:05:57,740
time that the term devops had been used

156
00:05:57,740 --> 00:05:59,880
and then obviously over the next few

157
00:05:59,880 --> 00:06:01,320
years things other things changed and

158
00:06:01,320 --> 00:06:03,840
things continue to evolve a bit more

159
00:06:03,840 --> 00:06:06,720
um rapidly and at this stage we're we're

160
00:06:06,720 --> 00:06:10,800
very much going from the birth of devops

161
00:06:10,800 --> 00:06:13,440
to devops becoming mainstream and we've

162
00:06:13,440 --> 00:06:15,060
got Google Google announcing kubernetes

163
00:06:15,060 --> 00:06:16,919
and terraform

164
00:06:16,919 --> 00:06:21,060
um being released in 2014. so this is

165
00:06:21,060 --> 00:06:22,440
giving us an interesting indication

166
00:06:22,440 --> 00:06:25,319
about what has happened in the

167
00:06:25,319 --> 00:06:28,380
technology space as a result of

168
00:06:28,380 --> 00:06:30,240
um the natural kind of evolution of

169
00:06:30,240 --> 00:06:32,160
technology and how we manage Main and

170
00:06:32,160 --> 00:06:33,660
maintain technology

171
00:06:33,660 --> 00:06:35,759
and what that gives us is some pretty

172
00:06:35,759 --> 00:06:37,680
awesome stuff these days we have

173
00:06:37,680 --> 00:06:39,360
literally thousands of cloud services

174
00:06:39,360 --> 00:06:41,039
that we can use and they're ready to use

175
00:06:41,039 --> 00:06:43,620
out of the box AWS has over 500 I think

176
00:06:43,620 --> 00:06:46,740
600 or so Azure Services if you look at

177
00:06:46,740 --> 00:06:47,880
the number of cookbooks that are

178
00:06:47,880 --> 00:06:49,740
available through Chef it's in the

179
00:06:49,740 --> 00:06:52,020
thousands four thousands I think

180
00:06:52,020 --> 00:06:55,500
um there are 31 000 Galaxy collections

181
00:06:55,500 --> 00:06:56,639
for ansible

182
00:06:56,639 --> 00:06:57,960
etc etc

183
00:06:57,960 --> 00:06:59,880
um apparently there's over nine million

184
00:06:59,880 --> 00:07:01,919
Docker images available on Docker Hub

185
00:07:01,919 --> 00:07:05,220
and 174 official supported images so

186
00:07:05,220 --> 00:07:08,280
what devops has created is this wealth

187
00:07:08,280 --> 00:07:11,039
of information that's available to us at

188
00:07:11,039 --> 00:07:13,380
our fingertips on how to build and use

189
00:07:13,380 --> 00:07:16,680
and leverage infrastructure and um you

190
00:07:16,680 --> 00:07:18,360
know the fabric that you need to build

191
00:07:18,360 --> 00:07:20,520
the applications that your you know your

192
00:07:20,520 --> 00:07:22,699
organizations are probably working on

193
00:07:22,699 --> 00:07:25,680
and obviously this is you know this is

194
00:07:25,680 --> 00:07:27,900
2022 devops has been around for a while

195
00:07:27,900 --> 00:07:29,639
so I'm probably going to sound like I'm

196
00:07:29,639 --> 00:07:32,400
um preaching to the choir here but it's

197
00:07:32,400 --> 00:07:35,160
not it's it's not an under statement to

198
00:07:35,160 --> 00:07:36,960
say that devops has finally

199
00:07:36,960 --> 00:07:38,580
fundamentally changed how we think about

200
00:07:38,580 --> 00:07:41,220
and manage technology so you know where

201
00:07:41,220 --> 00:07:42,840
we had physical Hardware before that

202
00:07:42,840 --> 00:07:44,819
took months to purchase and install we

203
00:07:44,819 --> 00:07:46,080
have instant access to Cloud

204
00:07:46,080 --> 00:07:47,580
infrastructure

205
00:07:47,580 --> 00:07:49,620
um which you literally pay for by the by

206
00:07:49,620 --> 00:07:50,880
the hour

207
00:07:50,880 --> 00:07:52,560
um what was manual build and

208
00:07:52,560 --> 00:07:54,300
configuration of systems and networks we

209
00:07:54,300 --> 00:07:56,220
can now automate that throughout the

210
00:07:56,220 --> 00:07:59,099
stack and again what was once custom

211
00:07:59,099 --> 00:08:00,900
scripts and Crone jobs holding

212
00:08:00,900 --> 00:08:03,419
everything together we have literally

213
00:08:03,419 --> 00:08:05,099
countless templates and tools and

214
00:08:05,099 --> 00:08:06,780
configuration artifacts that can be

215
00:08:06,780 --> 00:08:09,419
shared and reused so what this means

216
00:08:09,419 --> 00:08:11,099
fundamentally is that the common

217
00:08:11,099 --> 00:08:12,660
problems that we all face as

218
00:08:12,660 --> 00:08:15,060
organizations like how to deploy a

219
00:08:15,060 --> 00:08:17,460
database that's solved in a generalized

220
00:08:17,460 --> 00:08:19,740
way I don't have to go and reinvent the

221
00:08:19,740 --> 00:08:21,900
wheel just to deploy a postgres database

222
00:08:21,900 --> 00:08:24,240
because there's only a few ways of

223
00:08:24,240 --> 00:08:26,039
really deploying postgres in a in a

224
00:08:26,039 --> 00:08:28,319
sensible way and because that's a

225
00:08:28,319 --> 00:08:30,300
repeatable thing it's now been automated

226
00:08:30,300 --> 00:08:31,740
away thanks to things like configuration

227
00:08:31,740 --> 00:08:34,380
and and RDS chef and puppet and things

228
00:08:34,380 --> 00:08:35,580
like that

229
00:08:35,580 --> 00:08:38,000
so

230
00:08:38,580 --> 00:08:40,500
what devops gives you then is

231
00:08:40,500 --> 00:08:43,159
repeatability and consistency

232
00:08:43,159 --> 00:08:45,779
those two themselves are very important

233
00:08:45,779 --> 00:08:47,519
but that also creates the foundation for

234
00:08:47,519 --> 00:08:49,620
things like testability if I can

235
00:08:49,620 --> 00:08:52,140
repeatably build and configure my

236
00:08:52,140 --> 00:08:54,360
infrastructure I can do that in a way

237
00:08:54,360 --> 00:08:56,339
that I you know I can check now whether

238
00:08:56,339 --> 00:08:57,720
I do have the repeatability and

239
00:08:57,720 --> 00:09:00,000
consistency so I can start writing tests

240
00:09:00,000 --> 00:09:02,880
to ensure that my infrastructure and my

241
00:09:02,880 --> 00:09:05,640
um Services Etc are behaving correctly

242
00:09:05,640 --> 00:09:07,620
and because I now have testability

243
00:09:07,620 --> 00:09:09,779
because I know and I can have confidence

244
00:09:09,779 --> 00:09:12,660
in that repeatability and consistency I

245
00:09:12,660 --> 00:09:14,640
can suddenly do this at scale so I don't

246
00:09:14,640 --> 00:09:16,980
have to run around building stuff by

247
00:09:16,980 --> 00:09:18,959
hand I can be feel confident that I can

248
00:09:18,959 --> 00:09:20,700
apply you know whether I'm building one

249
00:09:20,700 --> 00:09:23,760
or a thousand databases I can do that

250
00:09:23,760 --> 00:09:26,160
with confidence and at scale and then

251
00:09:26,160 --> 00:09:28,320
that gives us collaboration so the more

252
00:09:28,320 --> 00:09:30,300
problems that we can solve the more that

253
00:09:30,300 --> 00:09:33,180
we can make available to others to um

254
00:09:33,180 --> 00:09:34,440
you know where we have solved that

255
00:09:34,440 --> 00:09:36,360
problem for somebody else we can make

256
00:09:36,360 --> 00:09:38,100
that and share that available as a make

257
00:09:38,100 --> 00:09:39,839
it available to the them and that

258
00:09:39,839 --> 00:09:42,660
creates persisted learning so whereas

259
00:09:42,660 --> 00:09:46,200
before maybe you know a conference page

260
00:09:46,200 --> 00:09:48,360
or whatever had some other Wiki had

261
00:09:48,360 --> 00:09:50,160
instructions for how to go and build a

262
00:09:50,160 --> 00:09:51,959
particular piece of infrastructure you

263
00:09:51,959 --> 00:09:53,700
had to then go manually follow hopefully

264
00:09:53,700 --> 00:09:56,399
not screw things up on the way now these

265
00:09:56,399 --> 00:09:58,800
artifacts these uh you know confirmation

266
00:09:58,800 --> 00:10:01,080
templates terraform files uh chef and

267
00:10:01,080 --> 00:10:03,540
puppet that all represents persisted

268
00:10:03,540 --> 00:10:05,100
learning so that's stuff that we've

269
00:10:05,100 --> 00:10:07,980
solved we know how to do this and anyone

270
00:10:07,980 --> 00:10:09,600
can access that anyone that can read and

271
00:10:09,600 --> 00:10:11,160
learn from that and and maybe even

272
00:10:11,160 --> 00:10:13,260
evolve and adapt from there and that

273
00:10:13,260 --> 00:10:14,640
results in things like good practices

274
00:10:14,640 --> 00:10:17,160
and best practices this is really the

275
00:10:17,160 --> 00:10:18,779
best way to build a server this is

276
00:10:18,779 --> 00:10:21,240
really the best way to build a uh a

277
00:10:21,240 --> 00:10:22,980
database or whatever

278
00:10:22,980 --> 00:10:25,740
um or a network and you can encapsulate

279
00:10:25,740 --> 00:10:27,660
those in these kind of artifacts as good

280
00:10:27,660 --> 00:10:29,820
and best practices and what that means

281
00:10:29,820 --> 00:10:32,399
is that frees you up to focus on the

282
00:10:32,399 --> 00:10:34,560
unique context and the problems face

283
00:10:34,560 --> 00:10:38,459
that your organization faces so by not

284
00:10:38,459 --> 00:10:40,380
having to worry and deal with having to

285
00:10:40,380 --> 00:10:41,700
build all these random bits of

286
00:10:41,700 --> 00:10:42,959
infrastructure there everyone already

287
00:10:42,959 --> 00:10:45,540
knows how to do you can focus on what

288
00:10:45,540 --> 00:10:47,640
matters to your organization

289
00:10:47,640 --> 00:10:48,600
so

290
00:10:48,600 --> 00:10:50,519
they're the hypothesis there the

291
00:10:50,519 --> 00:10:52,920
evolution that's happened for devops is

292
00:10:52,920 --> 00:10:55,620
currently happening in well for security

293
00:10:55,620 --> 00:10:57,480
and what we would typically refer to as

294
00:10:57,480 --> 00:11:00,180
devsecops in this track for example

295
00:11:00,180 --> 00:11:02,339
and that would suggest that whether we

296
00:11:02,339 --> 00:11:04,740
like it or not that you know that

297
00:11:04,740 --> 00:11:07,079
Evolution happens because of the nature

298
00:11:07,079 --> 00:11:09,600
of changes in technology and the nature

299
00:11:09,600 --> 00:11:12,660
of Market forces and things like that so

300
00:11:12,660 --> 00:11:14,519
threat modeling and this is the

301
00:11:14,519 --> 00:11:16,680
hypothesis then will inevitably need to

302
00:11:16,680 --> 00:11:18,300
evolve because the context in which

303
00:11:18,300 --> 00:11:19,740
threat modeling exists will continue to

304
00:11:19,740 --> 00:11:21,300
evolve so threat modeling is not

305
00:11:21,300 --> 00:11:23,579
something that sits outside and is just

306
00:11:23,579 --> 00:11:26,220
its own little island threat modeling is

307
00:11:26,220 --> 00:11:28,860
fundamentally a process of development

308
00:11:28,860 --> 00:11:30,839
or operations but from a you know

309
00:11:30,839 --> 00:11:34,019
security design perspective so

310
00:11:34,019 --> 00:11:36,779
um what can we imagine is going to

311
00:11:36,779 --> 00:11:39,000
happen for threat modeling in the same

312
00:11:39,000 --> 00:11:40,740
way we saw happen through devops and

313
00:11:40,740 --> 00:11:42,779
then now devsecops

314
00:11:42,779 --> 00:11:44,640
so that's the hypothesis and what we're

315
00:11:44,640 --> 00:11:47,100
going to do in this talk is we're going

316
00:11:47,100 --> 00:11:50,519
to look in a bit more detail about what

317
00:11:50,519 --> 00:11:52,260
um what happens when you're building an

318
00:11:52,260 --> 00:11:53,339
application and we're going to use

319
00:11:53,339 --> 00:11:55,440
wardry maps to draw those up and try to

320
00:11:55,440 --> 00:11:57,360
get to understand they're trying trying

321
00:11:57,360 --> 00:11:59,940
to get a better understanding of

322
00:11:59,940 --> 00:12:04,320
um where cloud and uh CI CD and sort of

323
00:12:04,320 --> 00:12:06,060
pipelines and things like that how that

324
00:12:06,060 --> 00:12:07,920
all plays together and then we'll look

325
00:12:07,920 --> 00:12:09,540
at the implications for for threat

326
00:12:09,540 --> 00:12:11,100
modeling

327
00:12:11,100 --> 00:12:13,200
um so before I get started

328
00:12:13,200 --> 00:12:16,560
uh if you saw my talk last year uh um I

329
00:12:16,560 --> 00:12:18,720
was about sake U.S I talked a little bit

330
00:12:18,720 --> 00:12:20,399
about wardi mapping I'll spend a couple

331
00:12:20,399 --> 00:12:21,779
of minutes talking about it now for

332
00:12:21,779 --> 00:12:23,100
those who've not come across it because

333
00:12:23,100 --> 00:12:25,019
it's a very very powerful

334
00:12:25,019 --> 00:12:26,480
um framework for thinking about

335
00:12:26,480 --> 00:12:28,200
specifically about evolution of

336
00:12:28,200 --> 00:12:29,820
Technology

337
00:12:29,820 --> 00:12:30,540
um

338
00:12:30,540 --> 00:12:32,700
at the top we have an anchor and and

339
00:12:32,700 --> 00:12:35,339
what this is is the perspective of which

340
00:12:35,339 --> 00:12:37,980
we're looking at this map so this is

341
00:12:37,980 --> 00:12:40,079
typically something like a user or a

342
00:12:40,079 --> 00:12:42,959
customer or something from which we are

343
00:12:42,959 --> 00:12:44,579
drunk and we're good we're going to draw

344
00:12:44,579 --> 00:12:46,440
a map but we're drawing the map from the

345
00:12:46,440 --> 00:12:48,480
perspective of that user or that

346
00:12:48,480 --> 00:12:50,519
customer or whatever on the on the

347
00:12:50,519 --> 00:12:52,980
y-axis we've got visibility so things at

348
00:12:52,980 --> 00:12:54,720
the top are more visible to the Anchor

349
00:12:54,720 --> 00:12:56,880
to that user and things at the bottom

350
00:12:56,880 --> 00:12:58,620
are less visible to that anchor so it's

351
00:12:58,620 --> 00:13:00,899
less either less physically visible to

352
00:13:00,899 --> 00:13:03,180
them or just maybe not as interesting or

353
00:13:03,180 --> 00:13:05,279
not as obvious to them where the lower

354
00:13:05,279 --> 00:13:08,220
they are on these on the y-axis and then

355
00:13:08,220 --> 00:13:11,700
the x-axis is the stages of evolution uh

356
00:13:11,700 --> 00:13:14,100
on the left you've got Genesis so things

357
00:13:14,100 --> 00:13:15,600
are very novel things are very new

358
00:13:15,600 --> 00:13:17,279
poorly understood there's a lot of

359
00:13:17,279 --> 00:13:18,720
uncertainty things are constantly

360
00:13:18,720 --> 00:13:20,700
changing and we don't really know what's

361
00:13:20,700 --> 00:13:23,399
going on because it's so new then over

362
00:13:23,399 --> 00:13:25,500
time things evolve and they become

363
00:13:25,500 --> 00:13:27,959
custom so you start to see emerging

364
00:13:27,959 --> 00:13:30,899
practices you're now in a process so

365
00:13:30,899 --> 00:13:32,459
I've not complete uncertainty but rapid

366
00:13:32,459 --> 00:13:34,860
learning and you're starting to do

367
00:13:34,860 --> 00:13:36,300
things you're starting to try things a

368
00:13:36,300 --> 00:13:37,560
bit more actively and put things into

369
00:13:37,560 --> 00:13:39,480
practice and you know from a market

370
00:13:39,480 --> 00:13:40,740
point of view this is where we start to

371
00:13:40,740 --> 00:13:43,620
see forming markets uh things even

372
00:13:43,620 --> 00:13:45,660
evolve further to the right and you

373
00:13:45,660 --> 00:13:48,060
start to deal with product so this point

374
00:13:48,060 --> 00:13:50,220
we have good practices there may be

375
00:13:50,220 --> 00:13:52,200
competing ways of doing something two

376
00:13:52,200 --> 00:13:53,880
different products maybe try to solve

377
00:13:53,880 --> 00:13:55,320
some same problem in two different ways

378
00:13:55,320 --> 00:13:57,360
and that's cool that's fine

379
00:13:57,360 --> 00:13:58,560
um but they you know they might have

380
00:13:58,560 --> 00:14:00,480
different strengths but we still have

381
00:14:00,480 --> 00:14:02,940
reached a relatively stable

382
00:14:02,940 --> 00:14:05,459
um stage at that point and you this is

383
00:14:05,459 --> 00:14:07,380
where you start to see rapid growth in

384
00:14:07,380 --> 00:14:09,360
adoption for example and as I said

385
00:14:09,360 --> 00:14:10,620
you've got this sort of stabilization

386
00:14:10,620 --> 00:14:13,560
happening and where whereas before a

387
00:14:13,560 --> 00:14:14,880
market may have been forming at this

388
00:14:14,880 --> 00:14:16,320
point is now growing

389
00:14:16,320 --> 00:14:19,320
and then on the full all the way on the

390
00:14:19,320 --> 00:14:22,260
right we have commodity so this is where

391
00:14:22,260 --> 00:14:24,000
we're dealing with best practices this

392
00:14:24,000 --> 00:14:27,240
wide ubiquitous widespread adoption it's

393
00:14:27,240 --> 00:14:28,980
almost the sort of the cost of doing

394
00:14:28,980 --> 00:14:31,500
business it's just taken for granted at

395
00:14:31,500 --> 00:14:33,060
this point and you don't really have to

396
00:14:33,060 --> 00:14:35,700
think about it it's just the way it is

397
00:14:35,700 --> 00:14:36,899
um and so typically you would expect

398
00:14:36,899 --> 00:14:39,000
things to be slower to change here

399
00:14:39,000 --> 00:14:43,980
because if it's ubiquitous and

400
00:14:43,980 --> 00:14:46,199
um uh and sort of the cost of doing

401
00:14:46,199 --> 00:14:48,480
business you can't really deal with

402
00:14:48,480 --> 00:14:50,699
constant change in that environment uh

403
00:14:50,699 --> 00:14:52,139
and and this is where you have mature

404
00:14:52,139 --> 00:14:54,120
markets so a good a good example of

405
00:14:54,120 --> 00:14:55,320
something that's obviously a commodity

406
00:14:55,320 --> 00:14:57,779
is electricity we don't really have to

407
00:14:57,779 --> 00:14:59,579
think about it I don't wake up in the

408
00:14:59,579 --> 00:15:00,779
morning and worry whether I got

409
00:15:00,779 --> 00:15:02,579
electricity or not because of where I

410
00:15:02,579 --> 00:15:04,380
live uh in Europe

411
00:15:04,380 --> 00:15:07,199
um it's it's just taken for granted uh I

412
00:15:07,199 --> 00:15:09,120
pay for it by the you know ridiculous

413
00:15:09,120 --> 00:15:10,800
amounts per per second these days it

414
00:15:10,800 --> 00:15:11,880
seems

415
00:15:11,880 --> 00:15:15,000
um but it's it's just on demand on tap

416
00:15:15,000 --> 00:15:18,000
but I also wouldn't want the voltage to

417
00:15:18,000 --> 00:15:19,320
suddenly change overnight or for the

418
00:15:19,320 --> 00:15:20,820
plugs to suddenly change overnight so

419
00:15:20,820 --> 00:15:22,560
you know I have a lot of stuff that

420
00:15:22,560 --> 00:15:24,180
relies on electricity so I need that

421
00:15:24,180 --> 00:15:26,519
kind of um stability there so what we're

422
00:15:26,519 --> 00:15:28,440
going to do is we're going to draw the

423
00:15:28,440 --> 00:15:30,779
process of building a green filled

424
00:15:30,779 --> 00:15:33,060
um application from a developer's

425
00:15:33,060 --> 00:15:34,380
perspective we're going to lay it out on

426
00:15:34,380 --> 00:15:35,519
this boarding map and then as I said

427
00:15:35,519 --> 00:15:37,440
we're going to look at it from what does

428
00:15:37,440 --> 00:15:39,779
this imply for the evolution of

429
00:15:39,779 --> 00:15:41,399
um threat modeling

430
00:15:41,399 --> 00:15:42,540
so

431
00:15:42,540 --> 00:15:46,620
developer I've got a idea or a problem

432
00:15:46,620 --> 00:15:48,480
to solve and I want to build some sort

433
00:15:48,480 --> 00:15:51,060
of product or service to do this

434
00:15:51,060 --> 00:15:52,260
um so the first thing I'm probably going

435
00:15:52,260 --> 00:15:55,800
to do which is number one is I don't

436
00:15:55,800 --> 00:15:56,820
know if you can hear that but some

437
00:15:56,820 --> 00:15:59,100
things just flown right over the house

438
00:15:59,100 --> 00:16:01,079
and first thing I'm probably going to do

439
00:16:01,079 --> 00:16:03,480
is a bit of research into the problem

440
00:16:03,480 --> 00:16:06,240
space I'm going to look at what's

441
00:16:06,240 --> 00:16:08,820
currently out there maybe I have

442
00:16:08,820 --> 00:16:11,040
um some Internal Documentation related

443
00:16:11,040 --> 00:16:12,540
to this problem of this opportunity

444
00:16:12,540 --> 00:16:15,720
maybe there are published articles or

445
00:16:15,720 --> 00:16:18,300
researchers that I can refer to So This

446
00:16:18,300 --> 00:16:19,620
research is probably going to be very

447
00:16:19,620 --> 00:16:21,300
unique to what I'm doing and it's going

448
00:16:21,300 --> 00:16:23,579
to be subject to Rapid change so it

449
00:16:23,579 --> 00:16:25,980
really sits in that Genesis and as a

450
00:16:25,980 --> 00:16:27,660
developer it's right at the top of what

451
00:16:27,660 --> 00:16:28,920
I'm doing at the moment so it's very

452
00:16:28,920 --> 00:16:32,000
high up on that visibility

453
00:16:32,160 --> 00:16:34,019
um after the research I've come up with

454
00:16:34,019 --> 00:16:35,699
some you know possible ways to solve

455
00:16:35,699 --> 00:16:37,800
this I can start to plan and think about

456
00:16:37,800 --> 00:16:39,839
requirements and user stories and things

457
00:16:39,839 --> 00:16:41,940
like that so the research has dropped

458
00:16:41,940 --> 00:16:43,740
down it's less visible but we're still

459
00:16:43,740 --> 00:16:45,899
in this custom space Sorry customer this

460
00:16:45,899 --> 00:16:48,180
Genesis space so again we're expecting

461
00:16:48,180 --> 00:16:50,160
things to change very rapidly here we

462
00:16:50,160 --> 00:16:52,320
have a lot of uncertainty here we have a

463
00:16:52,320 --> 00:16:54,360
lot of change going on

464
00:16:54,360 --> 00:16:55,920
um and a lot of

465
00:16:55,920 --> 00:16:58,139
um uncertainty still but we're starting

466
00:16:58,139 --> 00:17:01,259
to try to put a bit of a handle on

467
00:17:01,259 --> 00:17:03,540
things by breaking things into user

468
00:17:03,540 --> 00:17:05,160
stories and and

469
00:17:05,160 --> 00:17:07,500
um and and sort of bucketing it and and

470
00:17:07,500 --> 00:17:09,799
slicing things

471
00:17:09,799 --> 00:17:12,359
then based on those user stories or

472
00:17:12,359 --> 00:17:14,040
those requirements whatever I might want

473
00:17:14,040 --> 00:17:16,140
to go and develop a prototype so not

474
00:17:16,140 --> 00:17:17,339
necessarily something that actually

475
00:17:17,339 --> 00:17:18,720
works but something I can put in front

476
00:17:18,720 --> 00:17:21,660
of a customer or a set of users and says

477
00:17:21,660 --> 00:17:24,059
you know and so I can test is this the

478
00:17:24,059 --> 00:17:24,959
kind of

479
00:17:24,959 --> 00:17:26,760
solution that would work for you in

480
00:17:26,760 --> 00:17:28,919
solving whatever problem you're having

481
00:17:28,919 --> 00:17:30,900
um and that would be leveraging the user

482
00:17:30,900 --> 00:17:33,240
stories but it may leverage other things

483
00:17:33,240 --> 00:17:35,100
out there that are more

484
00:17:35,100 --> 00:17:37,200
um productized or commoditized like

485
00:17:37,200 --> 00:17:38,820
prototyping software you know classic

486
00:17:38,820 --> 00:17:40,980
things something like figma

487
00:17:40,980 --> 00:17:42,780
um and there may be design practices

488
00:17:42,780 --> 00:17:44,640
that I should be applying that seems to

489
00:17:44,640 --> 00:17:47,460
be established within the um the

490
00:17:47,460 --> 00:17:49,740
particular domain that I'm in and I may

491
00:17:49,740 --> 00:17:51,360
be wanting to apply those to my

492
00:17:51,360 --> 00:17:52,860
prototype as I'm designing that and

493
00:17:52,860 --> 00:17:55,020
validating that with customers

494
00:17:55,020 --> 00:17:56,940
so fundamentally what we've been doing

495
00:17:56,940 --> 00:18:01,020
at this stage is design so we we've done

496
00:18:01,020 --> 00:18:02,940
research we've looked at how we could

497
00:18:02,940 --> 00:18:04,500
possibly solve this and split this up

498
00:18:04,500 --> 00:18:06,240
into different ways and then we've

499
00:18:06,240 --> 00:18:08,280
decided okay we'll start with this and

500
00:18:08,280 --> 00:18:10,679
we'll build a prototype and that's a

501
00:18:10,679 --> 00:18:12,000
sort of design process we haven't

502
00:18:12,000 --> 00:18:14,039
written a line of code at this stage but

503
00:18:14,039 --> 00:18:16,080
we've tried to get a handle on the

504
00:18:16,080 --> 00:18:17,280
problem

505
00:18:17,280 --> 00:18:19,260
um now this doesn't necessarily imply

506
00:18:19,260 --> 00:18:21,000
waterfall the way I've been describing

507
00:18:21,000 --> 00:18:22,740
it sounds like maybe it's a drawn out

508
00:18:22,740 --> 00:18:25,679
process maybe three months long but

509
00:18:25,679 --> 00:18:27,419
that's not necessarily true if you look

510
00:18:27,419 --> 00:18:29,820
at things like design Sprints

511
00:18:29,820 --> 00:18:31,620
um this could happen in a three-day

512
00:18:31,620 --> 00:18:33,960
process you could start off with a

513
00:18:33,960 --> 00:18:36,320
research objective do a bunch of

514
00:18:36,320 --> 00:18:38,340
brainstorming and end up with a

515
00:18:38,340 --> 00:18:40,980
prototype within three or four days so

516
00:18:40,980 --> 00:18:43,559
this can still be a very agile and very

517
00:18:43,559 --> 00:18:45,360
rapid and it should be there should not

518
00:18:45,360 --> 00:18:46,919
be a drawn out process you should be

519
00:18:46,919 --> 00:18:49,020
trying to validate that prototype as

520
00:18:49,020 --> 00:18:50,640
quickly as possible so you know you

521
00:18:50,640 --> 00:18:51,660
should be applying good product

522
00:18:51,660 --> 00:18:54,419
management practices Etc

523
00:18:54,419 --> 00:18:56,520
so at that point we've got a prototype

524
00:18:56,520 --> 00:18:58,799
we validated it now we're starting to

525
00:18:58,799 --> 00:19:01,500
build a minimal viable product

526
00:19:01,500 --> 00:19:03,179
um not Everyone likes that term but you

527
00:19:03,179 --> 00:19:05,700
get the point it's the the most minimum

528
00:19:05,700 --> 00:19:07,919
set of functionality we can actually

529
00:19:07,919 --> 00:19:09,780
build to

530
00:19:09,780 --> 00:19:11,460
um put in front of a customer in a sense

531
00:19:11,460 --> 00:19:13,620
that it actually works and now we're

532
00:19:13,620 --> 00:19:16,320
talking about writing code and this

533
00:19:16,320 --> 00:19:18,179
means things get a lot more complicated

534
00:19:18,179 --> 00:19:20,280
so we are probably not going to be

535
00:19:20,280 --> 00:19:21,720
writing absolutely everything from

536
00:19:21,720 --> 00:19:22,980
scratch we're going to be leveraging

537
00:19:22,980 --> 00:19:25,559
libraries and Frameworks like react and

538
00:19:25,559 --> 00:19:28,080
all sorts of um things we're probably

539
00:19:28,080 --> 00:19:30,500
going to be using web services like

540
00:19:30,500 --> 00:19:33,660
node.js or Tomcat or whatever

541
00:19:33,660 --> 00:19:35,520
um this has to run on something this

542
00:19:35,520 --> 00:19:37,140
this web service or whatever needs to

543
00:19:37,140 --> 00:19:39,059
run on some sort of infrastructure again

544
00:19:39,059 --> 00:19:41,220
these days you wouldn't go and build a

545
00:19:41,220 --> 00:19:43,020
server for it you would go and leverage

546
00:19:43,020 --> 00:19:45,360
Cloud infrastructure or your serverless

547
00:19:45,360 --> 00:19:47,580
or something like that so we've you can

548
00:19:47,580 --> 00:19:49,620
see here that from a developer's point

549
00:19:49,620 --> 00:19:52,559
of view you've got the Well from the

550
00:19:52,559 --> 00:19:53,820
developer's point of view you've got the

551
00:19:53,820 --> 00:19:55,440
MVP that's the thing that's really in

552
00:19:55,440 --> 00:19:57,600
Focus but it has all these other pieces

553
00:19:57,600 --> 00:19:59,520
that it relies on

554
00:19:59,520 --> 00:20:02,640
um some of those are much further to the

555
00:20:02,640 --> 00:20:03,780
right of course like Cloud

556
00:20:03,780 --> 00:20:05,700
infrastructure which is a quality uh

557
00:20:05,700 --> 00:20:07,380
We've also got testing

558
00:20:07,380 --> 00:20:08,340
um so

559
00:20:08,340 --> 00:20:10,620
slightly controversially I put testing

560
00:20:10,620 --> 00:20:13,080
on the left here because when you're

561
00:20:13,080 --> 00:20:14,820
building an MVP you probably don't want

562
00:20:14,820 --> 00:20:16,860
to be over investing in the testing you

563
00:20:16,860 --> 00:20:18,299
probably just want to be doing the very

564
00:20:18,299 --> 00:20:20,220
minimum sort of smoke testing you can do

565
00:20:20,220 --> 00:20:22,200
to make sure it's kind of working

566
00:20:22,200 --> 00:20:24,480
because again we're in custom you're

567
00:20:24,480 --> 00:20:26,640
going to see a lot of iteration here so

568
00:20:26,640 --> 00:20:29,280
you don't want to be over iterating on

569
00:20:29,280 --> 00:20:30,900
having to rewrite all of your tests all

570
00:20:30,900 --> 00:20:32,340
the time because of all the constant

571
00:20:32,340 --> 00:20:35,460
change and then we've got a CI CD and

572
00:20:35,460 --> 00:20:37,020
the build templates and artifacts like

573
00:20:37,020 --> 00:20:39,919
although chef and puppet and AWS

574
00:20:39,919 --> 00:20:41,640
templates and all that kind of stuff

575
00:20:41,640 --> 00:20:44,419
that we saw earlier

576
00:20:44,580 --> 00:20:48,179
uh and then finally at this point over a

577
00:20:48,179 --> 00:20:49,919
period of one months or weeks or

578
00:20:49,919 --> 00:20:53,039
whatever it is uh the MVP iterates after

579
00:20:53,039 --> 00:20:55,380
release after release after release into

580
00:20:55,380 --> 00:20:58,080
a mature product or Services

581
00:20:58,080 --> 00:20:59,640
um we're still relying on the same sort

582
00:20:59,640 --> 00:21:00,900
of cloud infrastructure we're still

583
00:21:00,900 --> 00:21:03,419
relying on cicd the testing has moved to

584
00:21:03,419 --> 00:21:05,059
the right now so we've probably got

585
00:21:05,059 --> 00:21:07,980
testing more embedded into the CI CD

586
00:21:07,980 --> 00:21:10,679
pipelines uh we may even block the build

587
00:21:10,679 --> 00:21:12,240
or block the deployment in some

588
00:21:12,240 --> 00:21:14,580
circumstances

589
00:21:14,580 --> 00:21:16,200
um we're leveraging more mature test

590
00:21:16,200 --> 00:21:17,460
Frameworks and all that kind of stuff

591
00:21:17,460 --> 00:21:20,460
and we've got this business logic so the

592
00:21:20,460 --> 00:21:24,120
while the product or Services is sort of

593
00:21:24,120 --> 00:21:27,179
productized there are I've separated out

594
00:21:27,179 --> 00:21:29,159
the business logic that is still very

595
00:21:29,159 --> 00:21:32,100
custom to us and it may still sort of

596
00:21:32,100 --> 00:21:34,020
evolve within the context of that

597
00:21:34,020 --> 00:21:36,120
product or service and that may result

598
00:21:36,120 --> 00:21:37,799
in needing new features on the left

599
00:21:37,799 --> 00:21:39,360
there in six so we go through the whole

600
00:21:39,360 --> 00:21:41,700
process again but this time not as a

601
00:21:41,700 --> 00:21:44,280
Greenfield application but as a subset

602
00:21:44,280 --> 00:21:45,900
of that product or service in the form

603
00:21:45,900 --> 00:21:48,600
of new features

604
00:21:48,600 --> 00:21:51,539
um so as you'd imagine this is probably

605
00:21:51,539 --> 00:21:55,440
a quite a familiar position to be in and

606
00:21:55,440 --> 00:21:58,679
this feels like the sort of the ripe

607
00:21:58,679 --> 00:22:02,280
um ideal state for devops right so we

608
00:22:02,280 --> 00:22:04,860
have Cloud we have our CI CD plug client

609
00:22:04,860 --> 00:22:07,980
we have automated tests so everything

610
00:22:07,980 --> 00:22:11,340
um from a devops point of view and it

611
00:22:11,340 --> 00:22:13,440
you know arguably from a secop's point

612
00:22:13,440 --> 00:22:14,460
of view

613
00:22:14,460 --> 00:22:16,020
um is in this ideal state so we can

614
00:22:16,020 --> 00:22:17,580
automate everything at this point right

615
00:22:17,580 --> 00:22:19,740
that's that's awesome everything's a

616
00:22:19,740 --> 00:22:21,720
huge chunks of stuff on the right we can

617
00:22:21,720 --> 00:22:23,159
automate our Cloud infrastructure we can

618
00:22:23,159 --> 00:22:24,900
automate our CI CD pipelines everything

619
00:22:24,900 --> 00:22:26,880
is automatable

620
00:22:26,880 --> 00:22:28,860
um which kind of takes you to the point

621
00:22:28,860 --> 00:22:30,840
of the natural conclusion of cool we

622
00:22:30,840 --> 00:22:32,760
don't really need people at this stage

623
00:22:32,760 --> 00:22:34,500
this is

624
00:22:34,500 --> 00:22:37,440
um this is the world of machines driving

625
00:22:37,440 --> 00:22:39,960
machines

626
00:22:39,960 --> 00:22:42,600
but that's obviously not true and I was

627
00:22:42,600 --> 00:22:44,900
being slightly facetious there because

628
00:22:44,900 --> 00:22:47,280
if you think of this in terms of the

629
00:22:47,280 --> 00:22:49,740
worldly map the things on the right at

630
00:22:49,740 --> 00:22:52,500
the bottom right yes that is in a ripe

631
00:22:52,500 --> 00:22:54,360
position to be automated we've got

632
00:22:54,360 --> 00:22:56,340
pipelines we've got Cloud infrastructure

633
00:22:56,340 --> 00:22:57,960
we have all these kind of templates and

634
00:22:57,960 --> 00:22:59,820
things like that that is perfect for

635
00:22:59,820 --> 00:23:02,100
automation but the stuff in the top left

636
00:23:02,100 --> 00:23:04,559
in custom and Genesis that is still

637
00:23:04,559 --> 00:23:06,780
highly visible

638
00:23:06,780 --> 00:23:10,080
um that really does still need humans to

639
00:23:10,080 --> 00:23:13,500
be involved that the business logic is

640
00:23:13,500 --> 00:23:16,740
something really only that exists inside

641
00:23:16,740 --> 00:23:19,500
a developer's head until that developer

642
00:23:19,500 --> 00:23:22,980
has decided how to represent that as

643
00:23:22,980 --> 00:23:24,900
code so you know we don't hire

644
00:23:24,900 --> 00:23:27,780
developers to write code they're not

645
00:23:27,780 --> 00:23:29,880
machines that take jira stories and turn

646
00:23:29,880 --> 00:23:31,620
them into lines of code we hire

647
00:23:31,620 --> 00:23:33,960
developers to solve problems and they

648
00:23:33,960 --> 00:23:35,520
just happen to solve problems by writing

649
00:23:35,520 --> 00:23:37,860
code so all of that business logic all

650
00:23:37,860 --> 00:23:40,740
of that design work all of that

651
00:23:40,740 --> 00:23:42,960
um understanding the problem and

652
00:23:42,960 --> 00:23:46,380
creating new Solutions

653
00:23:46,380 --> 00:23:50,280
um is a very human-centered process

654
00:23:50,280 --> 00:23:52,620
once you've solved a problem in a

655
00:23:52,620 --> 00:23:54,840
general way you can automate it and it's

656
00:23:54,840 --> 00:23:57,179
not a problem that's that's something

657
00:23:57,179 --> 00:23:59,159
that's a solve problem and then we can

658
00:23:59,159 --> 00:24:02,220
build on top of that elevated uh

659
00:24:02,220 --> 00:24:04,679
uh Automation and that elevated

660
00:24:04,679 --> 00:24:07,320
um sort of uh generalized solution at

661
00:24:07,320 --> 00:24:09,620
that point

662
00:24:10,080 --> 00:24:10,860
um

663
00:24:10,860 --> 00:24:13,559
this is because fundamentally software

664
00:24:13,559 --> 00:24:16,080
manufacturing happens in the CPU and

665
00:24:16,080 --> 00:24:18,000
everything else is designed if you saw

666
00:24:18,000 --> 00:24:20,700
uh my last talk last year

667
00:24:20,700 --> 00:24:22,860
um I used the slide as well

668
00:24:22,860 --> 00:24:25,020
everything in that we consider a

669
00:24:25,020 --> 00:24:27,000
software development is effectively a

670
00:24:27,000 --> 00:24:28,860
process of design it's not a process of

671
00:24:28,860 --> 00:24:30,659
manufacturing we are not manufacturing

672
00:24:30,659 --> 00:24:33,000
binaries or

673
00:24:33,000 --> 00:24:36,480
um uh code repositories we are writing

674
00:24:36,480 --> 00:24:39,299
and solving problems by creating designs

675
00:24:39,299 --> 00:24:42,179
and the software that we use to to to

676
00:24:42,179 --> 00:24:44,280
solve those problems are design

677
00:24:44,280 --> 00:24:46,200
specifications if you like they're just

678
00:24:46,200 --> 00:24:47,760
very precise ones that can be executed

679
00:24:47,760 --> 00:24:49,380
the manufacturing itself happens in the

680
00:24:49,380 --> 00:24:52,740
CPU so this this um post for this

681
00:24:52,740 --> 00:24:55,080
article by Jack Reeves back in 1992 that

682
00:24:55,080 --> 00:24:57,240
just 30 years ago

683
00:24:57,240 --> 00:24:59,520
um talks about this in a lot more detail

684
00:24:59,520 --> 00:25:02,100
coding is designed testing and debugging

685
00:25:02,100 --> 00:25:05,220
is a process of design it's iterating on

686
00:25:05,220 --> 00:25:07,080
the design by identifying issues with

687
00:25:07,080 --> 00:25:09,320
that design and then this comment strip

688
00:25:09,320 --> 00:25:11,640
also does a nice job of highlighting

689
00:25:11,640 --> 00:25:12,720
this

690
00:25:12,720 --> 00:25:14,880
um if you think about what what uh what

691
00:25:14,880 --> 00:25:16,559
software is it's just a very very

692
00:25:16,559 --> 00:25:18,539
detailed specification for what you

693
00:25:18,539 --> 00:25:19,980
expect to happen at the point of

694
00:25:19,980 --> 00:25:21,600
execution

695
00:25:21,600 --> 00:25:23,520
um and it takes a human to to understand

696
00:25:23,520 --> 00:25:26,220
and create that obviously we're starting

697
00:25:26,220 --> 00:25:28,080
to see some interesting edge cases with

698
00:25:28,080 --> 00:25:30,000
things like copilot

699
00:25:30,000 --> 00:25:33,380
um I think there will be an interesting

700
00:25:33,380 --> 00:25:37,140
sort of next phage of sort of post-human

701
00:25:37,140 --> 00:25:39,779
or transhuman uh evolution of Technology

702
00:25:39,779 --> 00:25:41,640
if you're if you're sort of optimistic

703
00:25:41,640 --> 00:25:43,559
about AI maybe that's going to be the

704
00:25:43,559 --> 00:25:46,080
case but for the foreseeable future

705
00:25:46,080 --> 00:25:48,840
um development and coding and all that

706
00:25:48,840 --> 00:25:50,100
kind of stuff is still going to be

707
00:25:50,100 --> 00:25:52,919
fundamentally a human problem because we

708
00:25:52,919 --> 00:25:54,659
are the ones with that creativity and

709
00:25:54,659 --> 00:25:57,559
that critical thinking

710
00:25:57,720 --> 00:25:59,159
um and so what this basically implies

711
00:25:59,159 --> 00:26:00,600
for software development is that it's

712
00:26:00,600 --> 00:26:02,220
continuous iterative and revisionist

713
00:26:02,220 --> 00:26:05,279
design creating something in code like I

714
00:26:05,279 --> 00:26:06,900
said before is not a manufacturing

715
00:26:06,900 --> 00:26:09,120
process where you turn jira stories into

716
00:26:09,120 --> 00:26:11,400
lines of code it is a process of

717
00:26:11,400 --> 00:26:13,860
learning how to solve a problem and this

718
00:26:13,860 --> 00:26:16,679
is inherent in software it's not a uh

719
00:26:16,679 --> 00:26:18,600
it's not a sort of a

720
00:26:18,600 --> 00:26:20,760
a nice to have or something like that

721
00:26:20,760 --> 00:26:22,200
it's just the reality of software

722
00:26:22,200 --> 00:26:24,000
development it's not like building a

723
00:26:24,000 --> 00:26:25,640
bridge we don't have physical

724
00:26:25,640 --> 00:26:27,960
limitations in the same way that you do

725
00:26:27,960 --> 00:26:30,299
in uh you know the properties of metal

726
00:26:30,299 --> 00:26:32,520
or concrete and things like that

727
00:26:32,520 --> 00:26:35,340
uh if you've got continuous iterative

728
00:26:35,340 --> 00:26:38,220
and revisionist design that means you

729
00:26:38,220 --> 00:26:39,960
need continuous iterative and

730
00:26:39,960 --> 00:26:42,059
revisionist threat modeling so threat

731
00:26:42,059 --> 00:26:44,760
modeling is a process of continuous

732
00:26:44,760 --> 00:26:48,980
design and review of that design

733
00:26:49,440 --> 00:26:52,500
um this is a very sort of classic truism

734
00:26:52,500 --> 00:26:54,419
from product management software

735
00:26:54,419 --> 00:26:56,340
development writing code is expensive

736
00:26:56,340 --> 00:26:58,020
and typically from a product management

737
00:26:58,020 --> 00:27:00,240
point of view if you

738
00:27:00,240 --> 00:27:03,000
um if you are trying to validate an idea

739
00:27:03,000 --> 00:27:04,799
the probably the worst thing you could

740
00:27:04,799 --> 00:27:07,980
do is go and spend six months building

741
00:27:07,980 --> 00:27:10,799
that idea and building code to go and

742
00:27:10,799 --> 00:27:12,720
Implement that idea and then put it in

743
00:27:12,720 --> 00:27:14,460
front of a customer because there's a

744
00:27:14,460 --> 00:27:16,440
very good chance that what you thought

745
00:27:16,440 --> 00:27:17,820
was going to be a good idea probably

746
00:27:17,820 --> 00:27:19,140
doesn't actually give the customer the

747
00:27:19,140 --> 00:27:22,740
value they need so coding is expensive

748
00:27:22,740 --> 00:27:23,460
um

749
00:27:23,460 --> 00:27:25,440
you want to try and validate from a

750
00:27:25,440 --> 00:27:27,480
product management your idea as cheaply

751
00:27:27,480 --> 00:27:29,880
as possible come up with a design create

752
00:27:29,880 --> 00:27:31,860
prototypes put these prototypes in front

753
00:27:31,860 --> 00:27:33,720
of your customers and the same thing

754
00:27:33,720 --> 00:27:34,980
kind of applies to threat modeling

755
00:27:34,980 --> 00:27:37,679
threat modeling and initial design still

756
00:27:37,679 --> 00:27:39,360
makes sense before a single line of code

757
00:27:39,360 --> 00:27:41,520
is written so

758
00:27:41,520 --> 00:27:44,880
it's it's the the earlier you can start

759
00:27:44,880 --> 00:27:47,940
the threat model before a line uh lines

760
00:27:47,940 --> 00:27:49,860
of code have been written whilst you're

761
00:27:49,860 --> 00:27:51,779
still thinking about it again even this

762
00:27:51,779 --> 00:27:53,220
is this doesn't have to be a three-month

763
00:27:53,220 --> 00:27:55,140
process this could still be within the

764
00:27:55,140 --> 00:27:57,000
three days of that sort of design Sprint

765
00:27:57,000 --> 00:27:58,919
if you're starting to think about threat

766
00:27:58,919 --> 00:28:00,539
modeling within those three days you're

767
00:28:00,539 --> 00:28:02,880
going to be setting yourself self up for

768
00:28:02,880 --> 00:28:05,279
a lot more success than if you wait

769
00:28:05,279 --> 00:28:07,200
until you're writing code to do the

770
00:28:07,200 --> 00:28:09,000
threat modeling

771
00:28:09,000 --> 00:28:10,500
um and this allows you to test the

772
00:28:10,500 --> 00:28:12,240
security so again from a product

773
00:28:12,240 --> 00:28:13,260
management point of view if you're

774
00:28:13,260 --> 00:28:15,840
building some new software you're going

775
00:28:15,840 --> 00:28:17,400
to be looking in terms of the value to

776
00:28:17,400 --> 00:28:19,260
the customer the technical feasibility

777
00:28:19,260 --> 00:28:22,980
the business uh viability and um sort of

778
00:28:22,980 --> 00:28:25,200
the usability well we can also look at

779
00:28:25,200 --> 00:28:26,700
it the in terms of the security

780
00:28:26,700 --> 00:28:28,679
feasibility or the Privacy feasibility

781
00:28:28,679 --> 00:28:30,299
of your solution

782
00:28:30,299 --> 00:28:32,400
um does this idea make deliver value to

783
00:28:32,400 --> 00:28:33,900
the customer let's go and talk to the

784
00:28:33,900 --> 00:28:36,840
customer does this idea introduce us to

785
00:28:36,840 --> 00:28:39,779
unnecessary risk or

786
00:28:39,779 --> 00:28:41,460
um on

787
00:28:41,460 --> 00:28:43,620
uh what's the word I'm looking for a

788
00:28:43,620 --> 00:28:46,500
sort of an unacceptable amount of risk

789
00:28:46,500 --> 00:28:48,179
well that's where threat modeling can

790
00:28:48,179 --> 00:28:49,260
help and that's where threat modeling

791
00:28:49,260 --> 00:28:51,179
can help provide some good guidance and

792
00:28:51,179 --> 00:28:52,440
it can help highlight some of the

793
00:28:52,440 --> 00:28:54,120
assumptions you're making about the

794
00:28:54,120 --> 00:28:56,100
design from a security perspective

795
00:28:56,100 --> 00:28:59,100
so as a kind of corollary threat

796
00:28:59,100 --> 00:29:00,600
modeling can only be fully automated

797
00:29:00,600 --> 00:29:03,360
when software development itself is

798
00:29:03,360 --> 00:29:04,500
fully automated and I think

799
00:29:04,500 --> 00:29:05,820
realistically we're going to be a long

800
00:29:05,820 --> 00:29:07,080
way away from that unless you're

801
00:29:07,080 --> 00:29:08,880
particularly optimistic about artificial

802
00:29:08,880 --> 00:29:10,500
intelligence so as long as people are

803
00:29:10,500 --> 00:29:12,299
writing software people need to be

804
00:29:12,299 --> 00:29:16,679
involved in threat modeling now uh I'm

805
00:29:16,679 --> 00:29:18,000
talking about this is supposed to be

806
00:29:18,000 --> 00:29:19,620
talking about threat modeling and threat

807
00:29:19,620 --> 00:29:21,720
modeling operations and the evolution of

808
00:29:21,720 --> 00:29:23,640
threat modeling so I'm going to

809
00:29:23,640 --> 00:29:25,919
introduce the term here somewhat sort of

810
00:29:25,919 --> 00:29:28,860
being somewhat facetious but I think

811
00:29:28,860 --> 00:29:30,659
it's actually quite a useful term I'm

812
00:29:30,659 --> 00:29:32,399
going to refer to the term full stack

813
00:29:32,399 --> 00:29:33,779
threat modeling

814
00:29:33,779 --> 00:29:35,340
and what I mean with full stack threat

815
00:29:35,340 --> 00:29:39,480
modeling is the holistic view of threat

816
00:29:39,480 --> 00:29:42,240
modeling across in this case the wardley

817
00:29:42,240 --> 00:29:45,539
map right so on the bottom right we have

818
00:29:45,539 --> 00:29:47,159
Cloud infrastructure and we have

819
00:29:47,159 --> 00:29:49,080
configuration management templates and

820
00:29:49,080 --> 00:29:50,820
all that kind of stuff and and you know

821
00:29:50,820 --> 00:29:54,120
things as code that is right for

822
00:29:54,120 --> 00:29:55,679
automation from a threat modeling point

823
00:29:55,679 --> 00:29:57,720
of view as well where you are automating

824
00:29:57,720 --> 00:29:59,940
your technology you should be automating

825
00:29:59,940 --> 00:30:01,440
your threat modeling we should be

826
00:30:01,440 --> 00:30:03,539
leveraging those Cloud uh confirmation

827
00:30:03,539 --> 00:30:05,820
templates and terraform in order to

828
00:30:05,820 --> 00:30:07,500
build out our threat models

829
00:30:07,500 --> 00:30:09,360
automatically but that's only really

830
00:30:09,360 --> 00:30:12,000
going to be from the perspective of the

831
00:30:12,000 --> 00:30:13,320
cloud infrastructure or the

832
00:30:13,320 --> 00:30:15,539
configuration we should be integrating

833
00:30:15,539 --> 00:30:18,600
threat modeling into the CI CD pipelines

834
00:30:18,600 --> 00:30:20,220
and into the testing infrastructure

835
00:30:20,220 --> 00:30:22,260
because

836
00:30:22,260 --> 00:30:24,480
um that's where key parts of the

837
00:30:24,480 --> 00:30:25,799
software development practice is

838
00:30:25,799 --> 00:30:26,700
happening

839
00:30:26,700 --> 00:30:28,380
that's where threat modeling should also

840
00:30:28,380 --> 00:30:31,380
be taking place and then finally at that

841
00:30:31,380 --> 00:30:35,159
top left where you still have the uh the

842
00:30:35,159 --> 00:30:38,539
the key Reliance on human expertise

843
00:30:38,539 --> 00:30:41,580
threat modeling there should be design

844
00:30:41,580 --> 00:30:43,919
Centric so you that should be getting

845
00:30:43,919 --> 00:30:46,260
humans to think critically with support

846
00:30:46,260 --> 00:30:47,820
from tooling and with support from

847
00:30:47,820 --> 00:30:49,980
automation but still having them think

848
00:30:49,980 --> 00:30:52,200
critically about the implications and

849
00:30:52,200 --> 00:30:53,640
the assumptions that they're making from

850
00:30:53,640 --> 00:30:56,159
a security perspective at a higher level

851
00:30:56,159 --> 00:30:58,799
of abstraction at the business logic at

852
00:30:58,799 --> 00:31:01,080
the unique context of your organization

853
00:31:01,080 --> 00:31:03,960
of your team or of your application or

854
00:31:03,960 --> 00:31:05,700
product that is something that

855
00:31:05,700 --> 00:31:08,640
realistically only humans can do and

856
00:31:08,640 --> 00:31:10,919
where you get a sort of a better

857
00:31:10,919 --> 00:31:14,279
understanding where you are able to

858
00:31:14,279 --> 00:31:16,620
um leverage common knowledge that's

859
00:31:16,620 --> 00:31:18,360
awesome what that means is that just

860
00:31:18,360 --> 00:31:20,820
frees you up to evolve your top left

861
00:31:20,820 --> 00:31:23,159
even further so there will be a

862
00:31:23,159 --> 00:31:25,919
continuous process of things evolving to

863
00:31:25,919 --> 00:31:28,080
the right dropping down in terms of

864
00:31:28,080 --> 00:31:30,960
visibility as new practices and new

865
00:31:30,960 --> 00:31:32,640
approaches and new

866
00:31:32,640 --> 00:31:34,919
um more sort of human and design Centric

867
00:31:34,919 --> 00:31:37,500
um activities take place on top of this

868
00:31:37,500 --> 00:31:40,100
built common knowledge

869
00:31:40,100 --> 00:31:42,840
so we need to evolve how we think about

870
00:31:42,840 --> 00:31:44,279
and manage and integrate throughout

871
00:31:44,279 --> 00:31:46,200
modeling at scale and velocity because

872
00:31:46,200 --> 00:31:49,140
that's what happened with devops devops

873
00:31:49,140 --> 00:31:52,500
evolved how we integrate and uh you know

874
00:31:52,500 --> 00:31:55,140
run and manage infrastructure and

875
00:31:55,140 --> 00:31:57,120
applications at scale and velocity so

876
00:31:57,120 --> 00:31:59,279
what we need is something like threat

877
00:31:59,279 --> 00:32:01,380
model operations or TM Ops or something

878
00:32:01,380 --> 00:32:04,860
like that us I stole that from uh you

879
00:32:04,860 --> 00:32:06,360
know if you look at what's happened more

880
00:32:06,360 --> 00:32:10,260
with machine learning stage um space the

881
00:32:10,260 --> 00:32:11,820
a long time ago

882
00:32:11,820 --> 00:32:14,039
machine learning was you know locked

883
00:32:14,039 --> 00:32:15,960
away in some sort of uh University lab

884
00:32:15,960 --> 00:32:17,640
somewhere these days we've got

885
00:32:17,640 --> 00:32:20,460
commoditized services like in AWS and

886
00:32:20,460 --> 00:32:22,380
gcp and things like that

887
00:32:22,380 --> 00:32:23,279
um

888
00:32:23,279 --> 00:32:25,440
there's even a book out there called ml

889
00:32:25,440 --> 00:32:28,020
Ops so it is the operationalization of

890
00:32:28,020 --> 00:32:30,299
managing your models in the the

891
00:32:30,299 --> 00:32:32,039
artificial intelligence and machine

892
00:32:32,039 --> 00:32:33,539
learning space so

893
00:32:33,539 --> 00:32:35,940
again hypothesis we're going to see

894
00:32:35,940 --> 00:32:37,380
something happen like this for threat

895
00:32:37,380 --> 00:32:38,700
modeling as well we're going to end up

896
00:32:38,700 --> 00:32:41,220
with a threat modeling operations a TM

897
00:32:41,220 --> 00:32:43,500
aux or a you know you know it's going to

898
00:32:43,500 --> 00:32:45,899
be a subset of devsecops but threat

899
00:32:45,899 --> 00:32:47,520
modeling itself will be subject to the

900
00:32:47,520 --> 00:32:49,320
same forces and the same mechanisms and

901
00:32:49,320 --> 00:32:51,360
the same expectations that all the other

902
00:32:51,360 --> 00:32:55,500
star Ops stuff is at so if we kind of

903
00:32:55,500 --> 00:32:56,880
look at what happens from a development

904
00:32:56,880 --> 00:32:58,919
activity point of view we can see what

905
00:32:58,919 --> 00:33:00,299
might happen from a threat modeling

906
00:33:00,299 --> 00:33:01,620
point of view and what that could look

907
00:33:01,620 --> 00:33:04,140
like as an implementation so in that

908
00:33:04,140 --> 00:33:06,419
research design and prototyping stage

909
00:33:06,419 --> 00:33:08,279
you've got you know high level threat

910
00:33:08,279 --> 00:33:10,140
modeling to identify key assumptions and

911
00:33:10,140 --> 00:33:11,340
requirements early on that's like

912
00:33:11,340 --> 00:33:13,559
human-centric stuff so diagram your

913
00:33:13,559 --> 00:33:15,480
early high level designs and feed those

914
00:33:15,480 --> 00:33:17,039
controls and those requirements and the

915
00:33:17,039 --> 00:33:18,659
assumptions back into your development

916
00:33:18,659 --> 00:33:20,399
process that's where you should be

917
00:33:20,399 --> 00:33:23,399
looking at it and either going back to

918
00:33:23,399 --> 00:33:25,500
jira or whatever you use to capture

919
00:33:25,500 --> 00:33:28,380
these requirements as issues or maybe as

920
00:33:28,380 --> 00:33:30,299
acceptance criteria on your epics or

921
00:33:30,299 --> 00:33:31,559
whatever other design artifacts you're

922
00:33:31,559 --> 00:33:33,899
using

923
00:33:33,899 --> 00:33:35,460
when it comes to the application or

924
00:33:35,460 --> 00:33:37,679
software development again design

925
00:33:37,679 --> 00:33:39,000
Centric threat modeling should be

926
00:33:39,000 --> 00:33:40,500
focused on the business logic and the

927
00:33:40,500 --> 00:33:43,380
unique context so this what what is

928
00:33:43,380 --> 00:33:45,059
specific and special to your

929
00:33:45,059 --> 00:33:46,860
organization or to your problem domain

930
00:33:46,860 --> 00:33:48,840
that's where you should be drawing

931
00:33:48,840 --> 00:33:50,880
things like functional components and

932
00:33:50,880 --> 00:33:53,399
data flows that describe

933
00:33:53,399 --> 00:33:56,039
um the specific relationships of the

934
00:33:56,039 --> 00:33:57,539
sort of the higher level Concepts that

935
00:33:57,539 --> 00:33:59,880
you're dealing with and again the

936
00:33:59,880 --> 00:34:01,200
requirements and the assumptions that

937
00:34:01,200 --> 00:34:02,820
come out of that in terms of

938
00:34:02,820 --> 00:34:05,640
um controls or or non-functional

939
00:34:05,640 --> 00:34:07,440
requirements feed those back into your

940
00:34:07,440 --> 00:34:09,619
development process through

941
00:34:09,619 --> 00:34:12,719
tests or jira stories or

942
00:34:12,719 --> 00:34:16,080
um you know acceptance criteria Etc

943
00:34:16,080 --> 00:34:18,000
um testing obviously obviously important

944
00:34:18,000 --> 00:34:19,918
to age and development activity you can

945
00:34:19,918 --> 00:34:22,619
test your threat models so that's a key

946
00:34:22,619 --> 00:34:24,599
thing test your threat models both in

947
00:34:24,599 --> 00:34:26,580
terms of the

948
00:34:26,580 --> 00:34:30,119
um coverage so if you've got testing for

949
00:34:30,119 --> 00:34:32,760
um unit tests or integration tests on

950
00:34:32,760 --> 00:34:34,739
your application and you block the build

951
00:34:34,739 --> 00:34:37,320
because the tests are failing then you

952
00:34:37,320 --> 00:34:39,359
can also block the build if your threat

953
00:34:39,359 --> 00:34:42,060
models have too many

954
00:34:42,060 --> 00:34:44,418
um open unmitigated

955
00:34:44,418 --> 00:34:46,379
countermeasures or you know unmiticated

956
00:34:46,379 --> 00:34:47,639
threats sorry

957
00:34:47,639 --> 00:34:49,739
um but you can also if you're leveraging

958
00:34:49,739 --> 00:34:51,960
some sort of a policy engine to generate

959
00:34:51,960 --> 00:34:53,820
these threat models

960
00:34:53,820 --> 00:34:56,580
um you should be building tests and

961
00:34:56,580 --> 00:34:58,440
looking for consistency and

962
00:34:58,440 --> 00:35:01,980
repeatability of the threat model policy

963
00:35:01,980 --> 00:35:03,420
engine over time and between

964
00:35:03,420 --> 00:35:05,940
environments so at this point threat

965
00:35:05,940 --> 00:35:08,099
modeling starts uh you know starts to

966
00:35:08,099 --> 00:35:11,339
feel very similar to the same

967
00:35:11,339 --> 00:35:13,020
um expectations and controls as you

968
00:35:13,020 --> 00:35:14,460
would expect of the application code

969
00:35:14,460 --> 00:35:17,460
itself so if I've got a threat model and

970
00:35:17,460 --> 00:35:18,660
we'll talk about this in a bit more

971
00:35:18,660 --> 00:35:20,339
detail but if I've got a threat model

972
00:35:20,339 --> 00:35:24,060
that if I put a WAFF in front of a

973
00:35:24,060 --> 00:35:26,820
um in front of a load balancer mitigated

974
00:35:26,820 --> 00:35:29,099
the SQL injection threat today I would

975
00:35:29,099 --> 00:35:30,780
expect that to be the case tomorrow and

976
00:35:30,780 --> 00:35:32,099
I I wouldn't expect some sort of

977
00:35:32,099 --> 00:35:34,800
breakage in my policy engine to suddenly

978
00:35:34,800 --> 00:35:37,140
result in not having mitigated that

979
00:35:37,140 --> 00:35:39,660
threat and or or even worse what's

980
00:35:39,660 --> 00:35:40,920
something that

981
00:35:40,920 --> 00:35:41,460
um

982
00:35:41,460 --> 00:35:43,020
should not have been mitigated was

983
00:35:43,020 --> 00:35:44,640
mitigated by accident as a false

984
00:35:44,640 --> 00:35:46,140
positive

985
00:35:46,140 --> 00:35:47,760
um infrastructure code and configuration

986
00:35:47,760 --> 00:35:49,079
management all that kind of stuff again

987
00:35:49,079 --> 00:35:51,240
really focus on things like automated

988
00:35:51,240 --> 00:35:52,859
threat modeling of these artifacts

989
00:35:52,859 --> 00:35:55,320
because the whole process has been

990
00:35:55,320 --> 00:35:57,300
automated to that point leverage that

991
00:35:57,300 --> 00:36:00,060
Automation and build the the

992
00:36:00,060 --> 00:36:02,400
um the the threat modeling process

993
00:36:02,400 --> 00:36:04,740
around node automation so you know use

994
00:36:04,740 --> 00:36:06,839
apis or whatever to automatically build

995
00:36:06,839 --> 00:36:08,400
threat models from those commoditized

996
00:36:08,400 --> 00:36:09,480
components

997
00:36:09,480 --> 00:36:11,940
uh cicd again we talked about that a

998
00:36:11,940 --> 00:36:13,260
little bit earlier soft and hard gates

999
00:36:13,260 --> 00:36:15,060
in the deployment based on mitigated

1000
00:36:15,060 --> 00:36:16,260
threats

1001
00:36:16,260 --> 00:36:17,520
um you can Implement those kind of

1002
00:36:17,520 --> 00:36:19,920
controls and from a monitoring and

1003
00:36:19,920 --> 00:36:21,359
maintenance perspective once you've

1004
00:36:21,359 --> 00:36:23,160
built and deployed your application you

1005
00:36:23,160 --> 00:36:25,079
typically monitor it for things but we

1006
00:36:25,079 --> 00:36:26,460
can we can there are things we want to

1007
00:36:26,460 --> 00:36:27,720
be looking at from a threat modeling

1008
00:36:27,720 --> 00:36:29,640
point of view we want to measure your

1009
00:36:29,640 --> 00:36:31,560
adoption or threat modeling so how many

1010
00:36:31,560 --> 00:36:33,240
of your applications

1011
00:36:33,240 --> 00:36:36,060
um have been threat modeled

1012
00:36:36,060 --> 00:36:37,740
um what kind of return on investment are

1013
00:36:37,740 --> 00:36:39,480
you seeing from threat modeling are you

1014
00:36:39,480 --> 00:36:43,020
seeing a measurable reduction in Risk

1015
00:36:43,020 --> 00:36:45,180
um as a result of threat modeling and

1016
00:36:45,180 --> 00:36:46,560
this is where it's useful to to

1017
00:36:46,560 --> 00:36:48,540
integrate it with other security and

1018
00:36:48,540 --> 00:36:51,200
Technology tools like seams and saws

1019
00:36:51,200 --> 00:36:53,700
because you may want to create the

1020
00:36:53,700 --> 00:36:56,160
feedback loops between threat modeling

1021
00:36:56,160 --> 00:36:58,140
the stuff that you're threat modeling

1022
00:36:58,140 --> 00:36:59,400
the infrastructure and the application

1023
00:36:59,400 --> 00:37:02,099
Plus what's going on elsewhere in your

1024
00:37:02,099 --> 00:37:03,300
environment your vulnerability

1025
00:37:03,300 --> 00:37:05,820
management and all that kind of stuff so

1026
00:37:05,820 --> 00:37:07,200
how you manage your threat models and

1027
00:37:07,200 --> 00:37:08,400
how you manage your threat modeling

1028
00:37:08,400 --> 00:37:11,220
throughout model Ling should probably

1029
00:37:11,220 --> 00:37:13,079
look like how you manage your other

1030
00:37:13,079 --> 00:37:15,359
configuration in code treat threat

1031
00:37:15,359 --> 00:37:17,579
modeling and threat model operations in

1032
00:37:17,579 --> 00:37:19,140
the same way as you do development and

1033
00:37:19,140 --> 00:37:21,380
devops

1034
00:37:21,380 --> 00:37:23,760
on this slide what I've done is I've

1035
00:37:23,760 --> 00:37:26,940
taken a um a classic sort of devops

1036
00:37:26,940 --> 00:37:30,180
figure of eight from Wikipedia and I've

1037
00:37:30,180 --> 00:37:34,140
overlaid those that table of threat

1038
00:37:34,140 --> 00:37:36,359
modeling activities associated with

1039
00:37:36,359 --> 00:37:38,820
these different stages of uh of the

1040
00:37:38,820 --> 00:37:41,640
devops sort of infinity flow thing so

1041
00:37:41,640 --> 00:37:42,900
again from a planning point of view

1042
00:37:42,900 --> 00:37:44,280
we've got the design Centric for that

1043
00:37:44,280 --> 00:37:46,260
modeling and we're identifying security

1044
00:37:46,260 --> 00:37:47,880
assumptions and non-functional

1045
00:37:47,880 --> 00:37:50,099
requirements when you're creating code

1046
00:37:50,099 --> 00:37:51,240
when you're doing that development

1047
00:37:51,240 --> 00:37:53,040
process this is where you should be

1048
00:37:53,040 --> 00:37:54,420
thinking about threat modeling as code

1049
00:37:54,420 --> 00:37:57,480
as well threat modeling in the IDE if

1050
00:37:57,480 --> 00:37:59,339
you've got if you're creating artifacts

1051
00:37:59,339 --> 00:38:01,440
like infrastructure as code that should

1052
00:38:01,440 --> 00:38:03,359
be threat modeled and ideally

1053
00:38:03,359 --> 00:38:05,280
automatically and this is again where

1054
00:38:05,280 --> 00:38:06,420
we're talking about things like issue

1055
00:38:06,420 --> 00:38:09,180
tracker integration so feeding back the

1056
00:38:09,180 --> 00:38:10,740
outcomes of threat modeling into the

1057
00:38:10,740 --> 00:38:12,720
development cycle at the point of

1058
00:38:12,720 --> 00:38:14,460
creation don't wait until you've gone

1059
00:38:14,460 --> 00:38:15,960
all the way through this figure of eight

1060
00:38:15,960 --> 00:38:17,760
before you start feeding back from your

1061
00:38:17,760 --> 00:38:19,440
threat model it should be there are

1062
00:38:19,440 --> 00:38:21,540
iterations throughout this figure of

1063
00:38:21,540 --> 00:38:23,760
eight verification again mitigations

1064
00:38:23,760 --> 00:38:26,780
testing policy engine verification

1065
00:38:26,780 --> 00:38:29,160
package and release

1066
00:38:29,160 --> 00:38:31,140
yeah interesting it would be interesting

1067
00:38:31,140 --> 00:38:32,940
to see if anyone has particularly strong

1068
00:38:32,940 --> 00:38:34,619
opinions here

1069
00:38:34,619 --> 00:38:35,400
um

1070
00:38:35,400 --> 00:38:37,140
from a threat modeling point of view

1071
00:38:37,140 --> 00:38:38,940
there's probably not a huge amount

1072
00:38:38,940 --> 00:38:41,640
happening but what would be quite

1073
00:38:41,640 --> 00:38:45,660
interesting is how the development and

1074
00:38:45,660 --> 00:38:48,680
deployment of an application or whatever

1075
00:38:48,680 --> 00:38:51,540
how the threat modeling of that ties to

1076
00:38:51,540 --> 00:38:52,800
things like asset management and

1077
00:38:52,800 --> 00:38:55,980
workflow integration so uh

1078
00:38:55,980 --> 00:38:59,280
should you be releasing that package if

1079
00:38:59,280 --> 00:39:01,560
your threat model has not gone through a

1080
00:39:01,560 --> 00:39:03,180
Security review for example if your

1081
00:39:03,180 --> 00:39:04,740
threat model is not being reviewed by

1082
00:39:04,740 --> 00:39:06,780
security whether you do that or not

1083
00:39:06,780 --> 00:39:08,700
would depend on your organization a lot

1084
00:39:08,700 --> 00:39:10,200
of large Banks would probably prefer to

1085
00:39:10,200 --> 00:39:12,660
do that but other organizations may want

1086
00:39:12,660 --> 00:39:13,619
to

1087
00:39:13,619 --> 00:39:15,119
um do that kind of review maybe

1088
00:39:15,119 --> 00:39:18,300
automatically or maybe retroactively

1089
00:39:18,300 --> 00:39:20,160
um but that is a kind of a place where

1090
00:39:20,160 --> 00:39:22,079
you can integrate at more of a workflow

1091
00:39:22,079 --> 00:39:24,300
level and then Asset Management as well

1092
00:39:24,300 --> 00:39:26,579
if you're releasing a updated version of

1093
00:39:26,579 --> 00:39:30,000
software and that software or that

1094
00:39:30,000 --> 00:39:31,980
service is being used in other

1095
00:39:31,980 --> 00:39:33,660
applications within your organization

1096
00:39:33,660 --> 00:39:36,180
with other within other services that's

1097
00:39:36,180 --> 00:39:37,680
something you could probably want to be

1098
00:39:37,680 --> 00:39:39,960
looking for from a threat modeling point

1099
00:39:39,960 --> 00:39:43,200
of view like are you designing in the

1100
00:39:43,200 --> 00:39:45,240
use of outdated architectures or

1101
00:39:45,240 --> 00:39:48,060
outdated services in other threat models

1102
00:39:48,060 --> 00:39:49,200
so

1103
00:39:49,200 --> 00:39:51,599
um by feeding back into your asset

1104
00:39:51,599 --> 00:39:53,280
management at the point of release of a

1105
00:39:53,280 --> 00:39:54,960
piece of software you can then feed that

1106
00:39:54,960 --> 00:39:56,579
back into your threat model and ensure

1107
00:39:56,579 --> 00:39:59,339
that you are applying the latest and

1108
00:39:59,339 --> 00:40:01,260
best practices and using the latest and

1109
00:40:01,260 --> 00:40:03,300
best assets that are available within

1110
00:40:03,300 --> 00:40:04,820
your organization

1111
00:40:04,820 --> 00:40:07,560
configure I'm going to interpret this as

1112
00:40:07,560 --> 00:40:09,420
we've released a chunk of code but at

1113
00:40:09,420 --> 00:40:11,220
this point we're really configuring it

1114
00:40:11,220 --> 00:40:13,980
and making it live and that's a really

1115
00:40:13,980 --> 00:40:16,140
good place to be integrating with things

1116
00:40:16,140 --> 00:40:17,700
like application security vulnerability

1117
00:40:17,700 --> 00:40:18,960
management and the cloud service

1118
00:40:18,960 --> 00:40:20,520
providers

1119
00:40:20,520 --> 00:40:22,440
um what you don't want to do is try and

1120
00:40:22,440 --> 00:40:24,060
duplicate the entire purpose of

1121
00:40:24,060 --> 00:40:25,579
something like a CSM

1122
00:40:25,579 --> 00:40:27,599
Cloud Security Management sorry not

1123
00:40:27,599 --> 00:40:30,020
providers the cloud Security Management

1124
00:40:30,020 --> 00:40:32,400
you don't necessarily you know there are

1125
00:40:32,400 --> 00:40:33,720
tons of tools out there and it's a

1126
00:40:33,720 --> 00:40:36,119
pretty mature Market these days for

1127
00:40:36,119 --> 00:40:38,280
looking at the nitty-gritty details of

1128
00:40:38,280 --> 00:40:39,839
how stuff is configured live in the

1129
00:40:39,839 --> 00:40:42,000
cloud environment so you don't

1130
00:40:42,000 --> 00:40:43,320
necessarily want to try and duplicate

1131
00:40:43,320 --> 00:40:44,579
all of that in your threat modeling

1132
00:40:44,579 --> 00:40:46,500
process but what you want to do is

1133
00:40:46,500 --> 00:40:48,420
threat model at the higher level of

1134
00:40:48,420 --> 00:40:51,000
abstraction but verify at that lower

1135
00:40:51,000 --> 00:40:54,000
level using Integrations with appsec

1136
00:40:54,000 --> 00:40:55,380
using Integrations with vulnerability

1137
00:40:55,380 --> 00:40:57,720
and using Integrations with Cloud

1138
00:40:57,720 --> 00:40:59,280
Security Management and again we're

1139
00:40:59,280 --> 00:41:01,020
creating feedback loops back all the way

1140
00:41:01,020 --> 00:41:04,079
from what's implemented in the running

1141
00:41:04,079 --> 00:41:06,960
environment back into the threat model a

1142
00:41:06,960 --> 00:41:09,180
threat modeling at that design and

1143
00:41:09,180 --> 00:41:11,160
higher level abstraction and then

1144
00:41:11,160 --> 00:41:12,839
finally monitor as we said we've got

1145
00:41:12,839 --> 00:41:15,000
analytics monitoring and return on

1146
00:41:15,000 --> 00:41:16,920
investment seamless or integration and

1147
00:41:16,920 --> 00:41:19,440
also risk management so

1148
00:41:19,440 --> 00:41:22,079
um you know making sure that

1149
00:41:22,079 --> 00:41:24,000
um we are comfortable with the overall

1150
00:41:24,000 --> 00:41:25,500
level of risk that we're accepting

1151
00:41:25,500 --> 00:41:28,260
within a business unit or within line of

1152
00:41:28,260 --> 00:41:30,240
business or whatever and then actively

1153
00:41:30,240 --> 00:41:32,700
managing that and prioritizing perhaps

1154
00:41:32,700 --> 00:41:34,320
where you should be threat modeling

1155
00:41:34,320 --> 00:41:35,760
where should you be focusing on threat

1156
00:41:35,760 --> 00:41:37,320
modeling where do we need to invest more

1157
00:41:37,320 --> 00:41:40,800
resources where do we get the biggest

1158
00:41:40,800 --> 00:41:43,079
bang for our bank in terms of the

1159
00:41:43,079 --> 00:41:45,180
controls which are our controls that are

1160
00:41:45,180 --> 00:41:47,599
reducing the risk the higher at the most

1161
00:41:47,599 --> 00:41:50,400
but also cost the lease for example so

1162
00:41:50,400 --> 00:41:51,960
there's a lot you can do once you've

1163
00:41:51,960 --> 00:41:53,880
operationalized threat modeling once you

1164
00:41:53,880 --> 00:41:58,260
have access to data once you have

1165
00:41:58,260 --> 00:42:01,260
um uh metrics and measurements

1166
00:42:01,260 --> 00:42:03,300
associated with threat modeling and that

1167
00:42:03,300 --> 00:42:05,040
risk reduction then you can start making

1168
00:42:05,040 --> 00:42:07,380
data informed decisions throughout the

1169
00:42:07,380 --> 00:42:09,599
development process and the sort of the

1170
00:42:09,599 --> 00:42:12,960
more of the organizational level as well

1171
00:42:12,960 --> 00:42:14,579
um so

1172
00:42:14,579 --> 00:42:17,099
to make this kind of aspirational view

1173
00:42:17,099 --> 00:42:20,339
of threat modeling in devsecops uh a

1174
00:42:20,339 --> 00:42:22,200
reality we need to build on the right

1175
00:42:22,200 --> 00:42:24,720
foundations so what we need is a

1176
00:42:24,720 --> 00:42:26,280
standardized way to describe threat

1177
00:42:26,280 --> 00:42:28,020
models that can be generated

1178
00:42:28,020 --> 00:42:29,820
automatically for example from cloud

1179
00:42:29,820 --> 00:42:32,160
formation and terraform Etc or from

1180
00:42:32,160 --> 00:42:35,880
design Centric tools or even manually

1181
00:42:35,880 --> 00:42:37,500
um it should be able to be integrated

1182
00:42:37,500 --> 00:42:39,540
and used across the tech and the Cyber

1183
00:42:39,540 --> 00:42:41,820
stack so you know within citd pipelines

1184
00:42:41,820 --> 00:42:44,420
within csms and vulnerability management

1185
00:42:44,420 --> 00:42:46,800
and it should be able to be shared and

1186
00:42:46,800 --> 00:42:49,020
collaborated on within organizations but

1187
00:42:49,020 --> 00:42:52,140
ideally between organizations so if I

1188
00:42:52,140 --> 00:42:55,320
was a a software vendor and I published

1189
00:42:55,320 --> 00:42:57,240
my application or my service or my

1190
00:42:57,240 --> 00:42:59,099
product it'd be pretty awesome if I

1191
00:42:59,099 --> 00:43:00,780
could publish with that a threat model

1192
00:43:00,780 --> 00:43:02,940
that can be automatically ingested into

1193
00:43:02,940 --> 00:43:06,839
different tools that allows me to

1194
00:43:06,839 --> 00:43:09,300
um immediately understand the risk and

1195
00:43:09,300 --> 00:43:11,760
the requirements and responsibilities

1196
00:43:11,760 --> 00:43:13,680
that I'm taking on for using that

1197
00:43:13,680 --> 00:43:15,000
product or Services what are the things

1198
00:43:15,000 --> 00:43:17,040
that I should be doing as a result of

1199
00:43:17,040 --> 00:43:19,560
using this product actual service and

1200
00:43:19,560 --> 00:43:21,900
having that published in a way that

1201
00:43:21,900 --> 00:43:23,339
allows me to just sort of automatically

1202
00:43:23,339 --> 00:43:25,140
ingest that and doesn't require me to

1203
00:43:25,140 --> 00:43:26,700
sit there reading through you know 200

1204
00:43:26,700 --> 00:43:29,040
Page documents that would be a very

1205
00:43:29,040 --> 00:43:32,579
highly operationalized way to do things

1206
00:43:32,579 --> 00:43:34,980
um so finally nearly towards the end of

1207
00:43:34,980 --> 00:43:36,540
the talk I'm now actually talking about

1208
00:43:36,540 --> 00:43:39,000
the open threat model standard so what

1209
00:43:39,000 --> 00:43:41,099
we did at areas risk is decide okay

1210
00:43:41,099 --> 00:43:43,859
there's a general problem here that we

1211
00:43:43,859 --> 00:43:45,540
can see forming

1212
00:43:45,540 --> 00:43:47,460
what we don't want to do is try and

1213
00:43:47,460 --> 00:43:50,160
solve this in a proprietary way that is

1214
00:43:50,160 --> 00:43:51,720
just going to make the problem worse

1215
00:43:51,720 --> 00:43:53,520
what we want to try and do is try and

1216
00:43:53,520 --> 00:43:55,560
solve this in a generalized way that is

1217
00:43:55,560 --> 00:43:58,800
shareable repeatable and can be

1218
00:43:58,800 --> 00:44:01,560
leveraged by the broader community so we

1219
00:44:01,560 --> 00:44:03,780
have proposed a threat model format or a

1220
00:44:03,780 --> 00:44:05,400
threat model standard called the open

1221
00:44:05,400 --> 00:44:08,880
threat model it's very early days yet so

1222
00:44:08,880 --> 00:44:10,800
um really looking for contributions and

1223
00:44:10,800 --> 00:44:13,440
input from the broader Community it's

1224
00:44:13,440 --> 00:44:16,380
it's yaml file or a Json file

1225
00:44:16,380 --> 00:44:19,619
um it's inspired by the open API

1226
00:44:19,619 --> 00:44:21,780
um schema so it should look very

1227
00:44:21,780 --> 00:44:23,160
familiar if you're looking through it it

1228
00:44:23,160 --> 00:44:26,900
should read like any other kind of yaml

1229
00:44:26,900 --> 00:44:29,700
specification it's really release under

1230
00:44:29,700 --> 00:44:31,560
Creative Commons so as I said we're

1231
00:44:31,560 --> 00:44:33,720
looking for contributions and feedback

1232
00:44:33,720 --> 00:44:35,099
and Thoughts From the broader Community

1233
00:44:35,099 --> 00:44:36,960
about what would you need if you wanted

1234
00:44:36,960 --> 00:44:38,700
to operationalize your threat modeling

1235
00:44:38,700 --> 00:44:40,920
and you wanted to represent a threat

1236
00:44:40,920 --> 00:44:42,960
model using a interoperable and

1237
00:44:42,960 --> 00:44:48,000
shareable standard the the the

1238
00:44:48,000 --> 00:44:49,160
the

1239
00:44:49,160 --> 00:44:51,540
specification covers all of the things

1240
00:44:51,540 --> 00:44:53,579
you'd expect from a threat modeling

1241
00:44:53,579 --> 00:44:55,260
specification so it's got project

1242
00:44:55,260 --> 00:44:57,599
metadata things about the things that

1243
00:44:57,599 --> 00:44:59,160
you're threat modeling

1244
00:44:59,160 --> 00:45:00,599
um probably one of the more interesting

1245
00:45:00,599 --> 00:45:02,520
things that relates back to that whole

1246
00:45:02,520 --> 00:45:04,560
full stack threat model thing is the

1247
00:45:04,560 --> 00:45:07,560
representations So within a given full

1248
00:45:07,560 --> 00:45:09,660
stack threat model you may have

1249
00:45:09,660 --> 00:45:11,400
different ways of looking at that

1250
00:45:11,400 --> 00:45:13,740
applicational service from from the

1251
00:45:13,740 --> 00:45:15,480
point of view of threat modeling so you

1252
00:45:15,480 --> 00:45:16,980
may be looking at it from a code

1253
00:45:16,980 --> 00:45:18,900
perspective let me threat model the

1254
00:45:18,900 --> 00:45:20,339
application code or you may be looking

1255
00:45:20,339 --> 00:45:21,540
at it from an architecture or an

1256
00:45:21,540 --> 00:45:23,099
infrastructure perspective maybe even

1257
00:45:23,099 --> 00:45:24,780
from a network perspective or a data

1258
00:45:24,780 --> 00:45:26,819
perspective from a privacy perspective

1259
00:45:26,819 --> 00:45:28,859
you may be looking at jira stories all

1260
00:45:28,859 --> 00:45:29,579
of these kind of different

1261
00:45:29,579 --> 00:45:31,380
representations of the same application

1262
00:45:31,380 --> 00:45:33,300
can be threat modeled in different ways

1263
00:45:33,300 --> 00:45:36,119
so the otm specification has the notion

1264
00:45:36,119 --> 00:45:38,220
of different representations so you can

1265
00:45:38,220 --> 00:45:40,319
have different components associated

1266
00:45:40,319 --> 00:45:42,119
with different representations within

1267
00:45:42,119 --> 00:45:43,680
the same threat model

1268
00:45:43,680 --> 00:45:45,000
um and we've got classic things like

1269
00:45:45,000 --> 00:45:46,500
assets the things that you care about

1270
00:45:46,500 --> 00:45:49,680
within within your those like pii and

1271
00:45:49,680 --> 00:45:53,040
PCI Data components this is the building

1272
00:45:53,040 --> 00:45:55,740
block of a threat model these are the

1273
00:45:55,740 --> 00:45:57,119
things that make up the representation

1274
00:45:57,119 --> 00:45:59,520
like a web server or a database or a

1275
00:45:59,520 --> 00:46:02,520
process or something like that trust

1276
00:46:02,520 --> 00:46:03,900
zones of course very important threat

1277
00:46:03,900 --> 00:46:06,180
modeling different lab differing levels

1278
00:46:06,180 --> 00:46:07,700
of security and trust between

1279
00:46:07,700 --> 00:46:10,380
applications or components or the or

1280
00:46:10,380 --> 00:46:13,619
even whole services so classic one being

1281
00:46:13,619 --> 00:46:15,060
you've got the internet trust Zone which

1282
00:46:15,060 --> 00:46:17,280
is obviously scary and bad and you've

1283
00:46:17,280 --> 00:46:19,500
got your data tier which is uh you know

1284
00:46:19,500 --> 00:46:22,200
completely trusted and and obviously

1285
00:46:22,200 --> 00:46:25,440
locked down incredibly well

1286
00:46:25,440 --> 00:46:26,640
um maybe

1287
00:46:26,640 --> 00:46:28,319
data flows how the assets and the

1288
00:46:28,319 --> 00:46:29,339
information move around between the

1289
00:46:29,339 --> 00:46:31,260
components of course and then threats

1290
00:46:31,260 --> 00:46:33,119
the bad things that can go wrong and

1291
00:46:33,119 --> 00:46:34,680
mitigations the good stuff that you

1292
00:46:34,680 --> 00:46:36,119
probably should be doing to mitigate

1293
00:46:36,119 --> 00:46:37,319
those threats

1294
00:46:37,319 --> 00:46:39,000
so all of this is contained within

1295
00:46:39,000 --> 00:46:41,160
specification there's some other cool

1296
00:46:41,160 --> 00:46:43,200
things in the specification as well so

1297
00:46:43,200 --> 00:46:45,300
objects can have arbitrary attributes so

1298
00:46:45,300 --> 00:46:47,400
you can use those where you need to do

1299
00:46:47,400 --> 00:46:49,260
something with specification that you

1300
00:46:49,260 --> 00:46:52,560
can't do already you can use these

1301
00:46:52,560 --> 00:46:54,480
attributes to add additional metadata

1302
00:46:54,480 --> 00:46:57,240
like customer custom identifiers or

1303
00:46:57,240 --> 00:46:59,640
maybe some sort of operational metadata

1304
00:46:59,640 --> 00:47:01,980
that's specific to your organization

1305
00:47:01,980 --> 00:47:04,260
um it has some basic risk properties but

1306
00:47:04,260 --> 00:47:06,660
we've had some feedback already that

1307
00:47:06,660 --> 00:47:08,520
thinks we probably need to change that

1308
00:47:08,520 --> 00:47:10,380
in the specification maybe something

1309
00:47:10,380 --> 00:47:12,060
like a risk Vector would be a much more

1310
00:47:12,060 --> 00:47:14,460
generalized approach or maybe having

1311
00:47:14,460 --> 00:47:16,440
making the specification a bit more

1312
00:47:16,440 --> 00:47:19,020
modular so you could have a you know a

1313
00:47:19,020 --> 00:47:21,900
fair risk module and sort of plug that

1314
00:47:21,900 --> 00:47:23,520
into the right part of the specification

1315
00:47:23,520 --> 00:47:25,140
where you need it

1316
00:47:25,140 --> 00:47:26,579
um there are tags that allow you to

1317
00:47:26,579 --> 00:47:28,859
classifying group components X and Y

1318
00:47:28,859 --> 00:47:30,540
positions for diagrammatic

1319
00:47:30,540 --> 00:47:32,880
representations uh you can trust you can

1320
00:47:32,880 --> 00:47:35,640
Nest trust that into components and um

1321
00:47:35,640 --> 00:47:37,980
when using the actual yaml file itself

1322
00:47:37,980 --> 00:47:40,079
the number of required Fields is really

1323
00:47:40,079 --> 00:47:42,119
quite minimum so you can quite easily

1324
00:47:42,119 --> 00:47:44,220
write a yaml file that represents threat

1325
00:47:44,220 --> 00:47:46,380
model just by you know just by hand

1326
00:47:46,380 --> 00:47:49,079
which is uh which is really nice as a as

1327
00:47:49,079 --> 00:47:50,460
a sort of a lightweight way of doing

1328
00:47:50,460 --> 00:47:52,020
morning as code you can just start

1329
00:47:52,020 --> 00:47:54,300
writing yaml files in your IDE to

1330
00:47:54,300 --> 00:47:57,240
represent your threat models so how does

1331
00:47:57,240 --> 00:48:00,060
this then map back to tmobs well from a

1332
00:48:00,060 --> 00:48:01,680
collaboration point of view now

1333
00:48:01,680 --> 00:48:03,720
organizations have a way of publishing a

1334
00:48:03,720 --> 00:48:06,060
shareable and possible threat model for

1335
00:48:06,060 --> 00:48:08,040
their products and services or even for

1336
00:48:08,040 --> 00:48:10,200
educational purposes hey here's an

1337
00:48:10,200 --> 00:48:11,700
interesting use case from a threat model

1338
00:48:11,700 --> 00:48:13,980
from a threat modeling point of view if

1339
00:48:13,980 --> 00:48:15,359
you have this then these are the things

1340
00:48:15,359 --> 00:48:16,859
you need to worry about you could

1341
00:48:16,859 --> 00:48:18,300
publish that as a yaml file but people

1342
00:48:18,300 --> 00:48:20,040
can sort of ingest into their tools or

1343
00:48:20,040 --> 00:48:21,540
into their

1344
00:48:21,540 --> 00:48:23,700
um infrastructure or into their seam or

1345
00:48:23,700 --> 00:48:25,319
whatever so those are things you know

1346
00:48:25,319 --> 00:48:26,579
there's another way of sharing and

1347
00:48:26,579 --> 00:48:28,200
collaborating

1348
00:48:28,200 --> 00:48:30,480
um threat modeling is code so obviously

1349
00:48:30,480 --> 00:48:32,099
passing and combining multiple

1350
00:48:32,099 --> 00:48:34,140
representations into a single format is

1351
00:48:34,140 --> 00:48:35,400
very powerful

1352
00:48:35,400 --> 00:48:37,859
testing and verification an interesting

1353
00:48:37,859 --> 00:48:40,560
idea is taking something like gherkin

1354
00:48:40,560 --> 00:48:42,900
you know the the bdd and cucumber like

1355
00:48:42,900 --> 00:48:48,420
language to say given a uh a three-tier

1356
00:48:48,420 --> 00:48:51,540
web application when I put a WAFF

1357
00:48:51,540 --> 00:48:53,819
between the client and the load balancer

1358
00:48:53,819 --> 00:48:57,000
then I expect the SQL injection to be

1359
00:48:57,000 --> 00:48:59,700
mitigated so that's the kind of behavior

1360
00:48:59,700 --> 00:49:00,839
you would expect from your threat model

1361
00:49:00,839 --> 00:49:03,180
you could generate an otm run that

1362
00:49:03,180 --> 00:49:04,859
against some sort of policy engine and

1363
00:49:04,859 --> 00:49:06,599
then verify that that was the behavior

1364
00:49:06,599 --> 00:49:09,260
from your policy engine so

1365
00:49:09,260 --> 00:49:12,240
you you can you know generating an

1366
00:49:12,240 --> 00:49:14,040
intermediate funnel like otm gives you

1367
00:49:14,040 --> 00:49:15,900
that flexibility to be able to do that

1368
00:49:15,900 --> 00:49:17,940
kind of stuff and then finally um

1369
00:49:17,940 --> 00:49:19,800
integrating into Tech and cyber security

1370
00:49:19,800 --> 00:49:22,680
Stacks uh again publishing an otm file

1371
00:49:22,680 --> 00:49:25,079
in internally and then ingesting it into

1372
00:49:25,079 --> 00:49:26,940
other repositories and other tools is

1373
00:49:26,940 --> 00:49:28,020
obviously going to be sort of

1374
00:49:28,020 --> 00:49:29,220
foundational for that kind of thing we

1375
00:49:29,220 --> 00:49:30,780
have a common way to describe it

1376
00:49:30,780 --> 00:49:32,760
therefore you only have to have one way

1377
00:49:32,760 --> 00:49:34,440
to pass it

1378
00:49:34,440 --> 00:49:36,720
so I'm going to have a quick look for

1379
00:49:36,720 --> 00:49:38,339
another minute or so but I'm going to

1380
00:49:38,339 --> 00:49:40,500
try and like leave nearly 10 minutes for

1381
00:49:40,500 --> 00:49:42,540
questions we'll have a quick look at an

1382
00:49:42,540 --> 00:49:44,160
otm file

1383
00:49:44,160 --> 00:49:47,160
um over here so as I said we've got some

1384
00:49:47,160 --> 00:49:49,380
project metadata we've got descriptions

1385
00:49:49,380 --> 00:49:51,420
some contact details

1386
00:49:51,420 --> 00:49:53,520
um and some attributes this could be

1387
00:49:53,520 --> 00:49:55,500
enough right if you just dropped one of

1388
00:49:55,500 --> 00:49:57,720
these into a repository and you scan

1389
00:49:57,720 --> 00:50:00,119
across all of your repositories you know

1390
00:50:00,119 --> 00:50:02,400
to go and look for that threatmodel.yaml

1391
00:50:02,400 --> 00:50:04,200
file you suddenly have every single

1392
00:50:04,200 --> 00:50:06,780
repository now has the foundations for a

1393
00:50:06,780 --> 00:50:09,000
threat model in it you may

1394
00:50:09,000 --> 00:50:11,220
you may want to automate the generation

1395
00:50:11,220 --> 00:50:12,839
of the rest of the threat model or maybe

1396
00:50:12,839 --> 00:50:14,099
you require

1397
00:50:14,099 --> 00:50:15,599
um people to write the threat model by

1398
00:50:15,599 --> 00:50:17,160
hand or from an ID or something like

1399
00:50:17,160 --> 00:50:18,780
that but at this stage you can you know

1400
00:50:18,780 --> 00:50:20,880
you can really scale out the detection

1401
00:50:20,880 --> 00:50:23,819
of where threat models should exist just

1402
00:50:23,819 --> 00:50:25,440
by dropping a yaml file into a git

1403
00:50:25,440 --> 00:50:26,880
repository

1404
00:50:26,880 --> 00:50:27,780
um we've got a couple of different

1405
00:50:27,780 --> 00:50:29,819
representations one that's a diagram we

1406
00:50:29,819 --> 00:50:31,140
have some attributes like width and

1407
00:50:31,140 --> 00:50:33,540
height and one's a code so we've got the

1408
00:50:33,540 --> 00:50:35,460
repository and then we've got assets

1409
00:50:35,460 --> 00:50:37,020
again we've got some sort of risk

1410
00:50:37,020 --> 00:50:39,839
metadata that may or may not uh go away

1411
00:50:39,839 --> 00:50:43,020
we may not want to keep it as that uh

1412
00:50:43,020 --> 00:50:45,180
components of course and they as I said

1413
00:50:45,180 --> 00:50:47,160
before components can have and be tied

1414
00:50:47,160 --> 00:50:48,839
to that particular representation so we

1415
00:50:48,839 --> 00:50:51,000
can have the same component relate to

1416
00:50:51,000 --> 00:50:53,700
multiple representations

1417
00:50:53,700 --> 00:50:56,099
um those components can have threats

1418
00:50:56,099 --> 00:50:57,900
associated with them as well as assets

1419
00:50:57,900 --> 00:51:00,780
and those threats can be mitigated as

1420
00:51:00,780 --> 00:51:02,940
well so we have mitigations associated

1421
00:51:02,940 --> 00:51:04,980
with those threats associated with those

1422
00:51:04,980 --> 00:51:07,079
components so if I scroll down we've got

1423
00:51:07,079 --> 00:51:09,240
trust zones and here we have our threat

1424
00:51:09,240 --> 00:51:11,460
so we almost have like a baked in threat

1425
00:51:11,460 --> 00:51:13,260
and control library inside the

1426
00:51:13,260 --> 00:51:15,900
specification so I can reuse this threat

1427
00:51:15,900 --> 00:51:18,000
throughout the threat model or possibly

1428
00:51:18,000 --> 00:51:20,640
just publish a otm file with just all

1429
00:51:20,640 --> 00:51:22,020
the list of threats that I want to see

1430
00:51:22,020 --> 00:51:23,400
elsewhere

1431
00:51:23,400 --> 00:51:25,920
um and there's our mitigations

1432
00:51:25,920 --> 00:51:28,079
all yaml all relatively straightforward

1433
00:51:28,079 --> 00:51:31,260
we're using uuids here but they don't

1434
00:51:31,260 --> 00:51:33,599
have to be uuids they could just be a

1435
00:51:33,599 --> 00:51:36,359
handwritten IDs or whatever identifying

1436
00:51:36,359 --> 00:51:38,940
system you're using in your organization

1437
00:51:38,940 --> 00:51:42,359
um the the specification is opinionated

1438
00:51:42,359 --> 00:51:44,640
on the structure but less opinionated on

1439
00:51:44,640 --> 00:51:45,960
the content

1440
00:51:45,960 --> 00:51:48,680
um where possible

1441
00:51:49,140 --> 00:51:51,540
um so in summary having a common format

1442
00:51:51,540 --> 00:51:53,040
for describing threat models should

1443
00:51:53,040 --> 00:51:54,780
hopefully allow us to commoditize the

1444
00:51:54,780 --> 00:51:56,220
whole threat modeling process you know

1445
00:51:56,220 --> 00:51:59,400
should enable that sort of TM Ops and

1446
00:51:59,400 --> 00:52:01,319
that enables the automation integration

1447
00:52:01,319 --> 00:52:04,020
and then that frees up to people to do

1448
00:52:04,020 --> 00:52:05,460
what they do best which is to think

1449
00:52:05,460 --> 00:52:08,040
critically and creative and creatively

1450
00:52:08,040 --> 00:52:09,780
creatively

1451
00:52:09,780 --> 00:52:12,720
um so if this is interesting if you if

1452
00:52:12,720 --> 00:52:14,940
it's controversial or if you have any

1453
00:52:14,940 --> 00:52:18,359
opinions uh strongly or otherwise uh

1454
00:52:18,359 --> 00:52:20,280
would love to hear from you there's the

1455
00:52:20,280 --> 00:52:22,859
git repository for the um specifications

1456
00:52:22,859 --> 00:52:24,540
which as I said is released under

1457
00:52:24,540 --> 00:52:27,240
Creative Commons and uh feel free to

1458
00:52:27,240 --> 00:52:28,380
reach out to me

1459
00:52:28,380 --> 00:52:30,480
um or use the otma iris risk email

1460
00:52:30,480 --> 00:52:32,040
address if you

1461
00:52:32,040 --> 00:52:34,020
if you uh want to share thoughts or ask

1462
00:52:34,020 --> 00:52:36,900
questions and uh that is it for me thank

1463
00:52:36,900 --> 00:52:38,940
you very much

1464
00:52:38,940 --> 00:52:41,160
great stuff thanks Fraser appreciate

1465
00:52:41,160 --> 00:52:43,079
that all right

1466
00:52:43,079 --> 00:52:44,520
um so we've got about

1467
00:52:44,520 --> 00:52:46,200
six or seven minutes we've got a number

1468
00:52:46,200 --> 00:52:47,880
of questions coming in so we may need to

1469
00:52:47,880 --> 00:52:51,059
be a bit pithy in our responses

1470
00:52:51,059 --> 00:52:52,200
um

1471
00:52:52,200 --> 00:52:54,420
yeah the the first one I want to talk

1472
00:52:54,420 --> 00:52:56,460
about is threat modeling in general is a

1473
00:52:56,460 --> 00:52:59,339
cultural shift or a Minds shift

1474
00:52:59,339 --> 00:53:01,140
um a mind section

1475
00:53:01,140 --> 00:53:03,119
for me this makes it a whole lot easier

1476
00:53:03,119 --> 00:53:05,420
is that what you see in practice

1477
00:53:05,420 --> 00:53:08,940
yeah I think I think tooling and

1478
00:53:08,940 --> 00:53:11,160
Automation and and the

1479
00:53:11,160 --> 00:53:13,319
operationalization of

1480
00:53:13,319 --> 00:53:16,079
um threat modeling will co go hand in

1481
00:53:16,079 --> 00:53:19,319
hand with that cultural shift so

1482
00:53:19,319 --> 00:53:21,359
um we do tend to over focus on

1483
00:53:21,359 --> 00:53:24,300
Automation in the devops world but you

1484
00:53:24,300 --> 00:53:26,040
can't forget about the cultural aspect

1485
00:53:26,040 --> 00:53:27,599
of devops and the same thing will need

1486
00:53:27,599 --> 00:53:28,859
to be true for threat modeling as well

1487
00:53:28,859 --> 00:53:32,280
but having instant and easy access to a

1488
00:53:32,280 --> 00:53:35,220
tool can be a key driver for the right

1489
00:53:35,220 --> 00:53:37,020
cultural changes as well and it's not

1490
00:53:37,020 --> 00:53:38,940
just yeah you know boring people to

1491
00:53:38,940 --> 00:53:41,160
death with slide um slideshows that say

1492
00:53:41,160 --> 00:53:42,839
this is what you should do in terms of a

1493
00:53:42,839 --> 00:53:44,640
control shift you can do driving that

1494
00:53:44,640 --> 00:53:46,440
through a tool is a very tangible way of

1495
00:53:46,440 --> 00:53:48,599
helping to drive quadral shift yeah of

1496
00:53:48,599 --> 00:53:49,859
course yeah

1497
00:53:49,859 --> 00:53:52,500
um so a bit more specific I think around

1498
00:53:52,500 --> 00:53:54,180
um the open threat Model A few more

1499
00:53:54,180 --> 00:53:56,280
specific questions actually is it meant

1500
00:53:56,280 --> 00:53:59,220
to be technology agnostic if any

1501
00:53:59,220 --> 00:54:01,140
Vehicles like Cloud infrastructure you

1502
00:54:01,140 --> 00:54:03,300
know AWS you know Azure all other

1503
00:54:03,300 --> 00:54:04,680
different names for the same things

1504
00:54:04,680 --> 00:54:07,740
essentially that night but yeah yeah so

1505
00:54:07,740 --> 00:54:11,400
the way that works is it uses a type

1506
00:54:11,400 --> 00:54:15,660
field that can be interpreted by

1507
00:54:15,660 --> 00:54:17,819
whatever's using the otm file so it's

1508
00:54:17,819 --> 00:54:21,000
completely agnostic to the source and

1509
00:54:21,000 --> 00:54:22,380
it's agnostic to the tooling that's

1510
00:54:22,380 --> 00:54:24,240
leveraging it and you can use these type

1511
00:54:24,240 --> 00:54:26,339
fields to say you know whatever you call

1512
00:54:26,339 --> 00:54:29,460
that component it's of a type ec2 server

1513
00:54:29,460 --> 00:54:32,700
ec2 instance and therefore tooling can

1514
00:54:32,700 --> 00:54:34,200
leverage that type and say well if I see

1515
00:54:34,200 --> 00:54:37,200
an ec2 instance then in my uh in my tool

1516
00:54:37,200 --> 00:54:40,380
then I can interpret it as an AWS ec2

1517
00:54:40,380 --> 00:54:43,020
instance so it it it's fairly flexible

1518
00:54:43,020 --> 00:54:45,359
like that okay

1519
00:54:45,359 --> 00:54:47,940
um how might this differ from things

1520
00:54:47,940 --> 00:54:53,280
like um uh pytm straight talk I can

1521
00:54:53,280 --> 00:54:55,980
always say that very well yeah yeah so

1522
00:54:55,980 --> 00:54:58,619
those are specific Tools around

1523
00:54:58,619 --> 00:55:01,079
describing

1524
00:55:01,079 --> 00:55:02,819
um so in my the talk I did last time I

1525
00:55:02,819 --> 00:55:05,160
did a more of a comparison with other

1526
00:55:05,160 --> 00:55:06,720
um specifications out there including

1527
00:55:06,720 --> 00:55:09,180
Microsoft threat modeling pytm of course

1528
00:55:09,180 --> 00:55:12,540
um one thing is that this is

1529
00:55:12,540 --> 00:55:14,460
um trying to be agnostic to the tool

1530
00:55:14,460 --> 00:55:16,920
itself it's agnostic to the language so

1531
00:55:16,920 --> 00:55:19,740
pytm requires you to write python this

1532
00:55:19,740 --> 00:55:21,359
is just a yaml file so it doesn't matter

1533
00:55:21,359 --> 00:55:22,680
where your threat models are coming from

1534
00:55:22,680 --> 00:55:25,559
whether a python or rust or Ruby or

1535
00:55:25,559 --> 00:55:28,140
cloud formation you have a common format

1536
00:55:28,140 --> 00:55:29,579
in which to describe the threat model so

1537
00:55:29,579 --> 00:55:32,220
it's as a as agnostic as we can possibly

1538
00:55:32,220 --> 00:55:33,240
be

1539
00:55:33,240 --> 00:55:34,920
um but it's also agnostic to the tooling

1540
00:55:34,920 --> 00:55:37,440
so fragile has a very specific way that

1541
00:55:37,440 --> 00:55:40,440
it thinks about threat models and

1542
00:55:40,440 --> 00:55:42,119
um we try to take the good bits of all

1543
00:55:42,119 --> 00:55:44,220
the tools and represent it in one common

1544
00:55:44,220 --> 00:55:46,140
format that should hopefully work

1545
00:55:46,140 --> 00:55:48,180
between tools eventually

1546
00:55:48,180 --> 00:55:51,420
okay one question has come in is around

1547
00:55:51,420 --> 00:55:54,000
SAS SAS applications now we know that

1548
00:55:54,000 --> 00:55:55,260
obviously with the shared responsibility

1549
00:55:55,260 --> 00:55:57,260
model yeah yeah

1550
00:55:57,260 --> 00:56:00,900
how am I um otm work with SAS

1551
00:56:00,900 --> 00:56:03,660
applications that's a really interesting

1552
00:56:03,660 --> 00:56:06,920
one because what I think we're seeing a

1553
00:56:06,920 --> 00:56:10,319
desperate lack of in the world at the

1554
00:56:10,319 --> 00:56:13,500
moment is if there's a vulnerability in

1555
00:56:13,500 --> 00:56:15,180
a product or service that you've got

1556
00:56:15,180 --> 00:56:16,859
deployed in a data center you'll

1557
00:56:16,859 --> 00:56:19,260
probably see a cve for it but a lot of

1558
00:56:19,260 --> 00:56:21,240
SAS applications can have

1559
00:56:21,240 --> 00:56:23,460
vulnerabilities get patched and you'd

1560
00:56:23,460 --> 00:56:26,220
never know so there's there's a lot of

1561
00:56:26,220 --> 00:56:27,480
that kind of stuff is quite hidden from

1562
00:56:27,480 --> 00:56:30,420
us at the moment so what I'm of a sort

1563
00:56:30,420 --> 00:56:32,160
of bit of a pipe dream here but one

1564
00:56:32,160 --> 00:56:35,280
thing would be nice to see an API

1565
00:56:35,280 --> 00:56:36,839
endpoint or a service orchestration

1566
00:56:36,839 --> 00:56:39,420
layer publishing a threat model so I

1567
00:56:39,420 --> 00:56:40,920
could query an endpoint for a SAS

1568
00:56:40,920 --> 00:56:44,040
service and it returns a blob of Json

1569
00:56:44,040 --> 00:56:46,319
that represents the threat model if I

1570
00:56:46,319 --> 00:56:48,119
can pass that automatically I can then

1571
00:56:48,119 --> 00:56:50,940
uh respond my application can responding

1572
00:56:50,940 --> 00:56:53,280
kind based on this sort of contracts

1573
00:56:53,280 --> 00:56:55,319
that I'm creating with this this SAS

1574
00:56:55,319 --> 00:56:57,540
service so you know this doesn't have to

1575
00:56:57,540 --> 00:56:59,339
be a file that's inside a git repository

1576
00:56:59,339 --> 00:57:01,140
this kind of information could be

1577
00:57:01,140 --> 00:57:03,660
returned by a SAS service itself when

1578
00:57:03,660 --> 00:57:06,660
you know asking for you know uh what's

1579
00:57:06,660 --> 00:57:08,819
the security profile of this SAS service

1580
00:57:08,819 --> 00:57:10,680
I'm using here's a here's a threat model

1581
00:57:10,680 --> 00:57:12,720
as a Json representation that'd be quite

1582
00:57:12,720 --> 00:57:14,339
cool I don't know if we'd ever get there

1583
00:57:14,339 --> 00:57:15,540
but it'd be an interesting uh

1584
00:57:15,540 --> 00:57:17,099
interesting direction for things to go

1585
00:57:17,099 --> 00:57:20,339
in yeah for sure talk about Integrations

1586
00:57:20,339 --> 00:57:22,200
um again we are running out of time but

1587
00:57:22,200 --> 00:57:25,319
around generating these um these otm

1588
00:57:25,319 --> 00:57:27,720
files how can we can we automate that or

1589
00:57:27,720 --> 00:57:31,619
is that just pure manual so um no so I

1590
00:57:31,619 --> 00:57:34,200
at areas risk we are actively working on

1591
00:57:34,200 --> 00:57:36,359
various passes that generate

1592
00:57:36,359 --> 00:57:37,920
otm for

1593
00:57:37,920 --> 00:57:38,940
um at the moment cloud formation

1594
00:57:38,940 --> 00:57:41,579
terraform and physio

1595
00:57:41,579 --> 00:57:43,200
um we're publishing that in a project

1596
00:57:43,200 --> 00:57:45,059
called start left which is also open

1597
00:57:45,059 --> 00:57:48,839
source it's on the our um our GitHub

1598
00:57:48,839 --> 00:57:51,119
organization and

1599
00:57:51,119 --> 00:57:54,000
um that's that's a a first attempt to

1600
00:57:54,000 --> 00:57:55,500
take something like cloudformation and

1601
00:57:55,500 --> 00:57:57,599
automatically generate a threat model

1602
00:57:57,599 --> 00:58:00,480
rather than just like blindly taking the

1603
00:58:00,480 --> 00:58:02,160
components of the resources within a

1604
00:58:02,160 --> 00:58:04,079
confirmation and just drawing them as a

1605
00:58:04,079 --> 00:58:06,240
diagram what we're actually doing is

1606
00:58:06,240 --> 00:58:09,119
mapping a cloud formation template to

1607
00:58:09,119 --> 00:58:10,619
what would be the architectural

1608
00:58:10,619 --> 00:58:12,540
representation if you were to go and

1609
00:58:12,540 --> 00:58:14,520
draw that by hand in a threat modeling

1610
00:58:14,520 --> 00:58:17,160
tool so we're we're re we're basically

1611
00:58:17,160 --> 00:58:19,440
interpreting Cloud infrastructure as a

1612
00:58:19,440 --> 00:58:21,000
threat model through this start left

1613
00:58:21,000 --> 00:58:22,619
tool and the same thing for terraform

1614
00:58:22,619 --> 00:58:25,319
for AWS and Vizio as well

1615
00:58:25,319 --> 00:58:27,180
um and that's again published as open

1616
00:58:27,180 --> 00:58:30,300
source on our git repositories okay and

1617
00:58:30,300 --> 00:58:31,800
you talked about diagrams there can you

1618
00:58:31,800 --> 00:58:33,540
actually you know you started with the

1619
00:58:33,540 --> 00:58:36,000
worldly maps to the certain model can

1620
00:58:36,000 --> 00:58:37,920
you actually go and recreate or create

1621
00:58:37,920 --> 00:58:40,619
diagrams back on the the otm format and

1622
00:58:40,619 --> 00:58:43,680
actually visualize yeah yeah so I I

1623
00:58:43,680 --> 00:58:45,660
decided not to include a visualization

1624
00:58:45,660 --> 00:58:46,920
of it because I wanted to focus on

1625
00:58:46,920 --> 00:58:49,260
specification but again a tool like

1626
00:58:49,260 --> 00:58:51,839
areas risk will take that otm file or

1627
00:58:51,839 --> 00:58:53,400
even a confirmation template directly

1628
00:58:53,400 --> 00:58:56,460
and generate a visual representation of

1629
00:58:56,460 --> 00:58:59,400
what it found in that otm so if you

1630
00:58:59,400 --> 00:59:01,319
don't have any diagrammatic

1631
00:59:01,319 --> 00:59:03,299
um elements like the X and Y coordinates

1632
00:59:03,299 --> 00:59:05,339
then you can apply some sort of layout

1633
00:59:05,339 --> 00:59:07,440
algorithm or if you do have it because

1634
00:59:07,440 --> 00:59:09,240
it came from a Vizio you can just

1635
00:59:09,240 --> 00:59:10,859
Faithfully reproduce those X and Y

1636
00:59:10,859 --> 00:59:12,420
coordinates in some other diagramming

1637
00:59:12,420 --> 00:59:15,059
thing and in fact actually I did a uh I

1638
00:59:15,059 --> 00:59:17,940
did a a blog post where we took a

1639
00:59:17,940 --> 00:59:21,599
graphis file and generated an otm based

1640
00:59:21,599 --> 00:59:23,400
on that graph as representation you

1641
00:59:23,400 --> 00:59:25,200
could very easily write a simple script

1642
00:59:25,200 --> 00:59:27,599
that turned otm back into a graph is

1643
00:59:27,599 --> 00:59:30,740
representation or visualization of odm

1644
00:59:30,740 --> 00:59:32,540
yeah

1645
00:59:32,540 --> 00:59:35,280
diagram yeah I think that's why we've

1646
00:59:35,280 --> 00:59:37,140
got to um call it a date there Fraser

1647
00:59:37,140 --> 00:59:39,119
but thanks again from myself thanks

1648
00:59:39,119 --> 00:59:41,099
again from uh

1649
00:59:41,099 --> 00:59:44,480
um really enjoyable talk

