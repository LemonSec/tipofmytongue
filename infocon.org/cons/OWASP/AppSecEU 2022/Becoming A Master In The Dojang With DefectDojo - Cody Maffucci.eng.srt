1
00:00:04,620 --> 00:00:07,560
so hey there welcome back if you've been

2
00:00:07,560 --> 00:00:09,000
here

3
00:00:09,000 --> 00:00:11,040
um today or continued on for the

4
00:00:11,040 --> 00:00:13,080
previous talks welcome to the devsecops

5
00:00:13,080 --> 00:00:15,619
track here at OAS appsec EU

6
00:00:15,619 --> 00:00:18,240
my name is Nathan Britton I'm an olos

7
00:00:18,240 --> 00:00:20,820
volunteer I'm an artist chapter leader

8
00:00:20,820 --> 00:00:23,160
here in the UK for the Birmingham uh

9
00:00:23,160 --> 00:00:25,320
West Midlands chapter and I'm going to

10
00:00:25,320 --> 00:00:27,180
be your moderator for today's session

11
00:00:27,180 --> 00:00:29,160
today's session is all about mastering

12
00:00:29,160 --> 00:00:33,719
one of os Flagship projects defect dojo

13
00:00:33,719 --> 00:00:36,540
so during the next 45 minutes you're

14
00:00:36,540 --> 00:00:38,880
going to be listening to Cody mafucci

15
00:00:38,880 --> 00:00:40,440
and he's going to present his talk

16
00:00:40,440 --> 00:00:43,559
called becoming a master in the dojang

17
00:00:43,559 --> 00:00:47,340
the dead defects dojo

18
00:00:47,340 --> 00:00:49,980
um looking to be about 45 minutes and

19
00:00:49,980 --> 00:00:52,020
then we'll have 10 minutes for 10

20
00:00:52,020 --> 00:00:54,360
minutes or so for Q a so please submit

21
00:00:54,360 --> 00:00:57,000
any questions you have in the Q a

22
00:00:57,000 --> 00:00:59,699
session at a section of the woover app

23
00:00:59,699 --> 00:01:02,579
although uh mobile app or the browser

24
00:01:02,579 --> 00:01:06,420
and I'll ask Cody at the end of the of

25
00:01:06,420 --> 00:01:07,740
his talk

26
00:01:07,740 --> 00:01:10,799
um okay so that's more than enough from

27
00:01:10,799 --> 00:01:12,840
me uh let's get straight into it let's

28
00:01:12,840 --> 00:01:18,080
introduce Cody and uh over to you Cody

29
00:01:19,680 --> 00:01:24,540
hey everybody uh thank you Nathan thanks

30
00:01:27,360 --> 00:01:30,299
my screen be seen okay

31
00:01:30,299 --> 00:01:31,920
looks good

32
00:01:31,920 --> 00:01:34,920
good deal okay uh so once again uh hello

33
00:01:34,920 --> 00:01:36,840
everybody my name is Cody mafucci thank

34
00:01:36,840 --> 00:01:38,759
you for the introduction Nathan uh you

35
00:01:38,759 --> 00:01:41,100
encapsulated it perfectly

36
00:01:41,100 --> 00:01:42,479
um so today I'm going to be talking

37
00:01:42,479 --> 00:01:44,159
about becoming a master in the dojang

38
00:01:44,159 --> 00:01:45,720
with defect Dojo what are the best

39
00:01:45,720 --> 00:01:48,420
places to really show show your guns

40
00:01:48,420 --> 00:01:50,399
within the dojo and becoming that karate

41
00:01:50,399 --> 00:01:51,960
master

42
00:01:51,960 --> 00:01:55,740
um first off a little bit about myself

43
00:01:55,740 --> 00:02:00,119
Cody mafucci so why am I here uh how did

44
00:02:00,119 --> 00:02:02,579
I get here so I'm a defect Dojo work

45
00:02:02,579 --> 00:02:04,680
contributor moderator I got and

46
00:02:04,680 --> 00:02:06,840
introduced the projects uh the end of

47
00:02:06,840 --> 00:02:08,580
2018 so I've been around for a little

48
00:02:08,580 --> 00:02:09,660
bit

49
00:02:09,660 --> 00:02:11,099
um and a lot of my responsibilities

50
00:02:11,099 --> 00:02:12,780
include Distributing pull requests

51
00:02:12,780 --> 00:02:14,099
helping community members making

52
00:02:14,099 --> 00:02:15,720
contributions to make the effect of trip

53
00:02:15,720 --> 00:02:18,480
better and just generally just keeping

54
00:02:18,480 --> 00:02:20,280
the project alive among my peers and

55
00:02:20,280 --> 00:02:23,099
colleagues in addition to that my day

56
00:02:23,099 --> 00:02:25,200
jobs are co-founder at 10 security where

57
00:02:25,200 --> 00:02:26,819
I mainly serve as product architecture

58
00:02:26,819 --> 00:02:29,819
creating new products and then my main

59
00:02:29,819 --> 00:02:31,620
job is a typical software as a senior

60
00:02:31,620 --> 00:02:32,940
security engineer where we've

61
00:02:32,940 --> 00:02:34,739
successfully deployed defect Dojo into

62
00:02:34,739 --> 00:02:36,360
our apps like pipelines and I've seen

63
00:02:36,360 --> 00:02:39,420
terrific results so let's get into it

64
00:02:39,420 --> 00:02:41,580
what what is defect Dojo

65
00:02:41,580 --> 00:02:44,340
um it's intentionally intended to be

66
00:02:44,340 --> 00:02:45,959
kind of the brains of your whole

67
00:02:45,959 --> 00:02:48,599
Security application pipeline we've

68
00:02:48,599 --> 00:02:50,160
dubbed at the vulnerability management

69
00:02:50,160 --> 00:02:52,200
platform that has security orchestration

70
00:02:52,200 --> 00:02:54,239
supposed to be kind of the central

71
00:02:54,239 --> 00:02:56,400
information Hub of true truths and

72
00:02:56,400 --> 00:02:58,080
knowledge

73
00:02:58,080 --> 00:03:00,239
what in my experience I've seen a lot of

74
00:03:00,239 --> 00:03:02,280
security tools have their own kind of

75
00:03:02,280 --> 00:03:04,319
platform for how they they display all

76
00:03:04,319 --> 00:03:06,239
the information that they collect and

77
00:03:06,239 --> 00:03:08,340
you know every single one has their own

78
00:03:08,340 --> 00:03:10,019
different Hub and it's very challenging

79
00:03:10,019 --> 00:03:11,840
to kind of keep all of that information

80
00:03:11,840 --> 00:03:15,180
just in either in your head or

81
00:03:15,180 --> 00:03:17,220
recorded somewhere where it all kind of

82
00:03:17,220 --> 00:03:18,599
makes sense

83
00:03:18,599 --> 00:03:21,120
um but but generally tends to end you up

84
00:03:21,120 --> 00:03:23,280
at like an Excel spreadsheet which isn't

85
00:03:23,280 --> 00:03:26,040
ideal right so under defect Dojo it's

86
00:03:26,040 --> 00:03:27,959
intended to be sort of a One-Stop shop

87
00:03:27,959 --> 00:03:29,840
for all security folks and developers

88
00:03:29,840 --> 00:03:31,680
whether you want to be working together

89
00:03:31,680 --> 00:03:33,420
in the same platform or how to spread

90
00:03:33,420 --> 00:03:35,760
out across the different a handful of

91
00:03:35,760 --> 00:03:38,459
different platforms either way works

92
00:03:38,459 --> 00:03:40,319
um but to make that happen you need to

93
00:03:40,319 --> 00:03:42,420
have an easy easy integration through

94
00:03:42,420 --> 00:03:44,340
apis but you got to have good

95
00:03:44,340 --> 00:03:45,720
documentation to make sure it's actually

96
00:03:45,720 --> 00:03:48,780
usable too so there's other tools out

97
00:03:48,780 --> 00:03:50,700
there that do similar things but what

98
00:03:50,700 --> 00:03:52,879
makes defect dose so special

99
00:03:52,879 --> 00:03:55,260
the greatest part about it is that it's

100
00:03:55,260 --> 00:03:57,780
totally free so as Nathan mentioned is

101
00:03:57,780 --> 00:03:59,760
an oauth Flagship project so it's open

102
00:03:59,760 --> 00:04:03,239
source it's Community maintained but I

103
00:04:03,239 --> 00:04:04,620
think the the most special thing about

104
00:04:04,620 --> 00:04:06,780
it is that we have a very fast release

105
00:04:06,780 --> 00:04:10,560
cycle so if you run into a breaking bug

106
00:04:10,560 --> 00:04:12,599
that tends to break your pipelines or

107
00:04:12,599 --> 00:04:14,939
maybe you don't have you're using a

108
00:04:14,939 --> 00:04:16,560
security tool that defect Dojo doesn't

109
00:04:16,560 --> 00:04:19,320
offer you can create your personal and a

110
00:04:19,320 --> 00:04:21,120
custom solution that is generally made

111
00:04:21,120 --> 00:04:23,400
available to the public and it comes out

112
00:04:23,400 --> 00:04:26,220
within a month so with most enterprise

113
00:04:26,220 --> 00:04:28,259
software it takes a good quarter

114
00:04:28,259 --> 00:04:29,820
sometimes two quarters to get features

115
00:04:29,820 --> 00:04:31,979
or maybe some some really interesting

116
00:04:31,979 --> 00:04:33,419
functionality that you need out of the

117
00:04:33,419 --> 00:04:35,639
tool but that's not really an issue with

118
00:04:35,639 --> 00:04:37,160
defective development

119
00:04:37,160 --> 00:04:40,080
in terms of support the facto's got it

120
00:04:40,080 --> 00:04:42,419
all we've got Dynamic scanning static

121
00:04:42,419 --> 00:04:44,220
scanning software composition analysis

122
00:04:44,220 --> 00:04:46,320
there's probably a lot of other acronyms

123
00:04:46,320 --> 00:04:47,520
out there that I'm not totally familiar

124
00:04:47,520 --> 00:04:48,380
with

125
00:04:48,380 --> 00:04:50,460
including infrastructure scanning such

126
00:04:50,460 --> 00:04:52,380
like nasas and koalas and Docker

127
00:04:52,380 --> 00:04:55,139
scanning like snack and a ton more so

128
00:04:55,139 --> 00:04:56,820
we've got you covered in all areas where

129
00:04:56,820 --> 00:04:57,900
you would need it

130
00:04:57,900 --> 00:05:00,240
uh here's a quick sampling of some of

131
00:05:00,240 --> 00:05:01,919
those tools I went through and counted

132
00:05:01,919 --> 00:05:03,479
on the slide there's only 23 display

133
00:05:03,479 --> 00:05:06,360
here but defect Dojo offers right under

134
00:05:06,360 --> 00:05:08,400
150 scan types

135
00:05:08,400 --> 00:05:10,020
um you know if I try to display the logo

136
00:05:10,020 --> 00:05:11,639
of all of them I need a lot more slots

137
00:05:11,639 --> 00:05:14,340
decide to keep it brief but just looking

138
00:05:14,340 --> 00:05:15,720
at a few of these you know you've got

139
00:05:15,720 --> 00:05:17,940
your Dynamic scanning and verb uh web

140
00:05:17,940 --> 00:05:21,300
application was was qualis uh got the

141
00:05:21,300 --> 00:05:23,400
docker scanning and snag static and

142
00:05:23,400 --> 00:05:25,259
check marks got a whole bunch of

143
00:05:25,259 --> 00:05:27,060
different flavors and ways to make sure

144
00:05:27,060 --> 00:05:28,380
that you're protected in the right

145
00:05:28,380 --> 00:05:30,479
places

146
00:05:30,479 --> 00:05:33,240
um so you know 150 tools that sounds

147
00:05:33,240 --> 00:05:34,680
kind of overwhelming you know I don't

148
00:05:34,680 --> 00:05:36,120
want to turn you into into that guy on

149
00:05:36,120 --> 00:05:38,759
the slide just kind of blank and what

150
00:05:38,759 --> 00:05:41,039
um so in a way to try to simplify it um

151
00:05:41,039 --> 00:05:42,900
we've tried to Rack our brains and

152
00:05:42,900 --> 00:05:44,340
figure out what's the easiest way we

153
00:05:44,340 --> 00:05:46,320
could go from security tool to defect

154
00:05:46,320 --> 00:05:48,840
dojo and what we found is kind of the

155
00:05:48,840 --> 00:05:50,520
most universal method is to just

156
00:05:50,520 --> 00:05:52,199
download the scanner reports from the

157
00:05:52,199 --> 00:05:54,780
tool upload the defect dojo and then

158
00:05:54,780 --> 00:05:57,780
we've got magic happening basically

159
00:05:57,780 --> 00:05:59,940
um there's really no use if you have to

160
00:05:59,940 --> 00:06:02,039
do everything by hand and so everything

161
00:06:02,039 --> 00:06:04,680
of what uh what I'm covering today and

162
00:06:04,680 --> 00:06:06,600
many more was in defect Dojo has an API

163
00:06:06,600 --> 00:06:08,820
endpoint as well so everything in de

164
00:06:08,820 --> 00:06:10,919
facto can be automated through the API

165
00:06:10,919 --> 00:06:13,800
which is huge plus Point

166
00:06:13,800 --> 00:06:15,539
um but you know I mentioned previously

167
00:06:15,539 --> 00:06:17,220
maybe you're using a security tool that

168
00:06:17,220 --> 00:06:19,800
defect Dojo doesn't have support for so

169
00:06:19,800 --> 00:06:21,240
in response to that we've got two

170
00:06:21,240 --> 00:06:23,699
different generic formats uh CSV and

171
00:06:23,699 --> 00:06:27,180
Json uh it's essentially plug and play

172
00:06:27,180 --> 00:06:29,340
um all of the fields within those two

173
00:06:29,340 --> 00:06:32,699
generic formats are mapped directly to a

174
00:06:32,699 --> 00:06:34,080
finding just kind of like a

175
00:06:34,080 --> 00:06:36,720
vulnerability in the effect Dojo but to

176
00:06:36,720 --> 00:06:38,340
the finding Fields such that you can

177
00:06:38,340 --> 00:06:40,800
then put in you know maybe the the URL

178
00:06:40,800 --> 00:06:42,180
that was found on a little description

179
00:06:42,180 --> 00:06:44,340
about what the issue is maybe a cbss

180
00:06:44,340 --> 00:06:48,780
score but it's it's pretty encompassing

181
00:06:48,780 --> 00:06:50,940
um and you know you may run into a

182
00:06:50,940 --> 00:06:52,500
situation where maybe you only have to

183
00:06:52,500 --> 00:06:54,180
report one single thing you know maybe

184
00:06:54,180 --> 00:06:55,979
you you stumbled upon some leak

185
00:06:55,979 --> 00:06:57,780
credentials or something so instead of

186
00:06:57,780 --> 00:07:01,199
uh creating a generic format CSV or Json

187
00:07:01,199 --> 00:07:03,060
file you can just manually step through

188
00:07:03,060 --> 00:07:04,979
the process of each field and the

189
00:07:04,979 --> 00:07:07,319
vulnerability finding and just kind of

190
00:07:07,319 --> 00:07:10,380
create it ad hot on the Fly

191
00:07:10,380 --> 00:07:13,319
um let's talk about getting defect Dojo

192
00:07:13,319 --> 00:07:15,300
what are the best ways to deploy

193
00:07:15,300 --> 00:07:17,580
um there's four four uh ways to deploy

194
00:07:17,580 --> 00:07:19,500
defect Dojo three of which are supported

195
00:07:19,500 --> 00:07:21,960
I'll get into that a little further down

196
00:07:21,960 --> 00:07:24,840
um but I've labeled them as the easy

197
00:07:24,840 --> 00:07:27,599
breezy and for the brave based on how

198
00:07:27,599 --> 00:07:30,000
how my experience has been was deploying

199
00:07:30,000 --> 00:07:32,220
with these Technologies I found the

200
00:07:32,220 --> 00:07:35,220
docker compose is 100 the easiest it's

201
00:07:35,220 --> 00:07:37,199
the tried and true we've used it since

202
00:07:37,199 --> 00:07:39,060
2019 so we've got a lot of experience

203
00:07:39,060 --> 00:07:40,500
around it

204
00:07:40,500 --> 00:07:42,900
um it's the the main main vehicle for

205
00:07:42,900 --> 00:07:44,759
development and defect Dojo so anything

206
00:07:44,759 --> 00:07:46,199
that we're developing is going to be

207
00:07:46,199 --> 00:07:48,240
directly on the uh in a production

208
00:07:48,240 --> 00:07:50,460
environment if using Docker compose and

209
00:07:50,460 --> 00:07:51,360
it's going to have the best

210
00:07:51,360 --> 00:07:53,880
compatibility there it's very

211
00:07:53,880 --> 00:07:55,919
configurable and Docker compose mainly

212
00:07:55,919 --> 00:07:58,919
works by shoving variables into into the

213
00:07:58,919 --> 00:08:00,300
environment and then it kind of

214
00:08:00,300 --> 00:08:01,860
disperses them into the correct Docker

215
00:08:01,860 --> 00:08:03,960
containers

216
00:08:03,960 --> 00:08:06,120
um so it's you can configure a lot with

217
00:08:06,120 --> 00:08:06,900
it

218
00:08:06,900 --> 00:08:08,460
um but there is kind of learning curve

219
00:08:08,460 --> 00:08:10,440
to Docker compose so in response to that

220
00:08:10,440 --> 00:08:12,840
we've got a small library of helper

221
00:08:12,840 --> 00:08:14,160
scripts that kind of get you started and

222
00:08:14,160 --> 00:08:16,620
get you going that way you don't have to

223
00:08:16,620 --> 00:08:18,539
learn everything about Docker compose to

224
00:08:18,539 --> 00:08:20,900
really get up and going and defect Dojo

225
00:08:20,900 --> 00:08:24,120
followed by that we have the Ami stands

226
00:08:24,120 --> 00:08:26,400
for Amazon Marketplace image it's kind

227
00:08:26,400 --> 00:08:28,740
of a a point and click very easy to walk

228
00:08:28,740 --> 00:08:30,720
through it's got information including

229
00:08:30,720 --> 00:08:33,059
you know what what host you want to have

230
00:08:33,059 --> 00:08:34,740
your defect Dojo instance searched on

231
00:08:34,740 --> 00:08:37,620
generates a TLS search for you and it

232
00:08:37,620 --> 00:08:40,080
has a lot of extra protections through

233
00:08:40,080 --> 00:08:42,839
uh Amazon dc2 instances and within the

234
00:08:42,839 --> 00:08:44,940
dojo configuration itself to make it

235
00:08:44,940 --> 00:08:46,920
ready for production use kind of right

236
00:08:46,920 --> 00:08:48,360
at launch

237
00:08:48,360 --> 00:08:50,459
um so it's it's kind of a One-Stop shop

238
00:08:50,459 --> 00:08:52,320
if you're trying to get up quickly and

239
00:08:52,320 --> 00:08:53,820
don't really want to have to learn all

240
00:08:53,820 --> 00:08:55,220
about the project

241
00:08:55,220 --> 00:08:58,860
but the the Silver Lining on that one is

242
00:08:58,860 --> 00:09:00,899
that it does support the project so all

243
00:09:00,899 --> 00:09:02,760
the proceeds go directly back into the

244
00:09:02,760 --> 00:09:04,440
project keep it alive and keep it

245
00:09:04,440 --> 00:09:06,060
maintained and everything like that so

246
00:09:06,060 --> 00:09:07,820
super awesome there

247
00:09:07,820 --> 00:09:10,200
are other two deployment methods we've

248
00:09:10,200 --> 00:09:13,740
got go dojo this was a kind of a second

249
00:09:13,740 --> 00:09:16,080
iteration of our original setup.bash

250
00:09:16,080 --> 00:09:18,600
script it's a graduation from just a

251
00:09:18,600 --> 00:09:20,339
batch script to a binder again

252
00:09:20,339 --> 00:09:22,200
executable of sorts

253
00:09:22,200 --> 00:09:24,839
um it's intended to be run just on a

254
00:09:24,839 --> 00:09:27,060
straight virtual machine such that you

255
00:09:27,060 --> 00:09:28,500
don't have to install Docker you don't

256
00:09:28,500 --> 00:09:30,660
have to install uh Helm or kubernetes or

257
00:09:30,660 --> 00:09:32,760
anything it's just you run it and it

258
00:09:32,760 --> 00:09:34,440
takes care of all the rest and installs

259
00:09:34,440 --> 00:09:36,260
everything you need and nothing else

260
00:09:36,260 --> 00:09:39,060
it's also very configurable such that

261
00:09:39,060 --> 00:09:41,160
Docker composes but there's a little bit

262
00:09:41,160 --> 00:09:42,839
of learning curve too because there's

263
00:09:42,839 --> 00:09:45,240
just so much configuration

264
00:09:45,240 --> 00:09:46,440
um and the last one I have for you is

265
00:09:46,440 --> 00:09:49,019
kubernetes I dubbed this the ravenger

266
00:09:49,019 --> 00:09:52,320
mainly because anytime I try it I I have

267
00:09:52,320 --> 00:09:54,779
a really hard time being successful but

268
00:09:54,779 --> 00:09:57,060
I'm not very familiar with Kate's or

269
00:09:57,060 --> 00:09:58,800
kubernetes at all I try to keep it that

270
00:09:58,800 --> 00:10:00,300
way honestly

271
00:10:00,300 --> 00:10:02,820
um but it is very very powerful it's

272
00:10:02,820 --> 00:10:05,100
equally complex honestly

273
00:10:05,100 --> 00:10:07,140
um but it is probably one of the best

274
00:10:07,140 --> 00:10:09,300
about the best deployments for a high

275
00:10:09,300 --> 00:10:11,700
availability server

276
00:10:11,700 --> 00:10:14,519
um I mentioned that this is the one

277
00:10:14,519 --> 00:10:16,260
deployment method that's not 100

278
00:10:16,260 --> 00:10:18,000
supported it's kind of community

279
00:10:18,000 --> 00:10:20,100
maintained we've got two moderators that

280
00:10:20,100 --> 00:10:22,800
are the kubernetes aficionados that

281
00:10:22,800 --> 00:10:24,420
really keep it alive

282
00:10:24,420 --> 00:10:26,220
um but they do an excellent job of doing

283
00:10:26,220 --> 00:10:28,140
so and they're very quick with debugging

284
00:10:28,140 --> 00:10:29,820
information if anyone should need some

285
00:10:29,820 --> 00:10:31,860
help

286
00:10:31,860 --> 00:10:33,420
um so let's talk about you know once you

287
00:10:33,420 --> 00:10:35,880
get your defect Dojo instance going what

288
00:10:35,880 --> 00:10:38,100
do you do with it where do you put it

289
00:10:38,100 --> 00:10:40,019
um so this is a common model that I

290
00:10:40,019 --> 00:10:41,640
think a lot of a lot of companies are

291
00:10:41,640 --> 00:10:43,380
moving to sort of like an event driven

292
00:10:43,380 --> 00:10:44,820
pipeline

293
00:10:44,820 --> 00:10:46,380
um we're starting off on the left here

294
00:10:46,380 --> 00:10:48,480
where maybe a developer pushes to a

295
00:10:48,480 --> 00:10:50,459
specific branch and there's automation

296
00:10:50,459 --> 00:10:52,860
around that specific event that'll

297
00:10:52,860 --> 00:10:54,899
launch a whole slew of activities so in

298
00:10:54,899 --> 00:10:56,640
this model it's taking Docker and

299
00:10:56,640 --> 00:10:58,500
launching up a handful of tools looks

300
00:10:58,500 --> 00:11:00,060
like we got zap check marks and app

301
00:11:00,060 --> 00:11:00,980
spider

302
00:11:00,980 --> 00:11:03,899
launching Docker as versions of those

303
00:11:03,899 --> 00:11:05,399
security tools and scanning the

304
00:11:05,399 --> 00:11:07,440
application probably static analysis

305
00:11:07,440 --> 00:11:09,180
would be the easy bet here it knows apps

306
00:11:09,180 --> 00:11:10,320
Dynamic but

307
00:11:10,320 --> 00:11:12,720
uh anyways once it gets those results

308
00:11:12,720 --> 00:11:15,480
pushes them up to defect Dojo defect

309
00:11:15,480 --> 00:11:17,519
Dojo dissolves magic and then it starts

310
00:11:17,519 --> 00:11:20,279
dispersing the results either into slack

311
00:11:20,279 --> 00:11:22,079
in the form of a notification alerting

312
00:11:22,079 --> 00:11:24,779
your uh your security Engineers like hey

313
00:11:24,779 --> 00:11:27,240
you've got some work to do or it'll take

314
00:11:27,240 --> 00:11:28,740
the vulnerabilities himself and push

315
00:11:28,740 --> 00:11:30,300
them into a place that developers like

316
00:11:30,300 --> 00:11:32,820
to work like jira that way there's not a

317
00:11:32,820 --> 00:11:34,740
lot of hands-off uh and transfer

318
00:11:34,740 --> 00:11:36,540
knowledge it's all just kind of done

319
00:11:36,540 --> 00:11:40,079
automatically it's it's really neat

320
00:11:40,079 --> 00:11:43,140
um so I actually have a super rough and

321
00:11:43,140 --> 00:11:45,480
dirty example of this pipeline if you

322
00:11:45,480 --> 00:11:47,160
scan that QR code it'll take you to a

323
00:11:47,160 --> 00:11:49,500
repo and the defect Dojo organization

324
00:11:49,500 --> 00:11:52,140
I used this demo in a previous talk and

325
00:11:52,140 --> 00:11:53,940
it does basically that but I'll walk

326
00:11:53,940 --> 00:11:56,940
through exactly what's happening so I

327
00:11:56,940 --> 00:11:58,200
mentioned it was quick and dirty this

328
00:11:58,200 --> 00:12:00,000
one actually spins up it defect Dojo

329
00:12:00,000 --> 00:12:01,980
instance out of a Docker container and

330
00:12:01,980 --> 00:12:03,959
it actually does get blown away so this

331
00:12:03,959 --> 00:12:05,519
is not intended to be used in production

332
00:12:05,519 --> 00:12:07,260
but it's a really good way to get you

333
00:12:07,260 --> 00:12:08,820
started and get familiar with kind of

334
00:12:08,820 --> 00:12:12,240
the the pipeline aspect of things

335
00:12:12,240 --> 00:12:14,459
um in addition to spinning up the defect

336
00:12:14,459 --> 00:12:16,200
Dojo instance we're also spinning up our

337
00:12:16,200 --> 00:12:18,600
application I use Juice Shop because I

338
00:12:18,600 --> 00:12:19,860
was pretty confident I could get some

339
00:12:19,860 --> 00:12:22,079
kind of results out of it

340
00:12:22,079 --> 00:12:24,860
um and so once once I have my two

341
00:12:24,860 --> 00:12:27,420
prerequisites up and running I start

342
00:12:27,420 --> 00:12:29,940
spaying up those those security tools

343
00:12:29,940 --> 00:12:32,160
um start attacking the application

344
00:12:32,160 --> 00:12:34,860
but the trick here is that if you don't

345
00:12:34,860 --> 00:12:37,440
save those scan reports into kind of uh

346
00:12:37,440 --> 00:12:39,600
an omnipresent volume or something like

347
00:12:39,600 --> 00:12:40,620
that and just leave them in the

348
00:12:40,620 --> 00:12:41,940
container they're going to get blown

349
00:12:41,940 --> 00:12:43,620
away with the container so it's very

350
00:12:43,620 --> 00:12:45,180
important to move those to a more

351
00:12:45,180 --> 00:12:47,519
persistent location such as in like a

352
00:12:47,519 --> 00:12:50,579
Docker volume and I've got the directory

353
00:12:50,579 --> 00:12:52,079
structure on the next slide of what that

354
00:12:52,079 --> 00:12:53,160
looks like

355
00:12:53,160 --> 00:12:54,899
uh so going over that directory

356
00:12:54,899 --> 00:12:58,019
structure in the top right corner I've

357
00:12:58,019 --> 00:13:00,480
organized it kind of been kind of like a

358
00:13:00,480 --> 00:13:03,300
a queue of sorts everything that's going

359
00:13:03,300 --> 00:13:05,100
to be coming out of a security tool

360
00:13:05,100 --> 00:13:07,079
we'll go into the to do folder and

361
00:13:07,079 --> 00:13:08,760
you'll just have you know each folder

362
00:13:08,760 --> 00:13:10,320
would be labeled as something like you

363
00:13:10,320 --> 00:13:11,820
know this is the tool it came from zap

364
00:13:11,820 --> 00:13:14,700
scan has this Live Scan and here are all

365
00:13:14,700 --> 00:13:16,260
the all the reports that haven't been

366
00:13:16,260 --> 00:13:17,459
processed yet

367
00:13:17,459 --> 00:13:20,040
and so down at the bottom in that custom

368
00:13:20,040 --> 00:13:22,079
container I have a script that runs that

369
00:13:22,079 --> 00:13:23,579
crawls through the directory and takes

370
00:13:23,579 --> 00:13:25,380
each one of those unprocessed scans

371
00:13:25,380 --> 00:13:28,079
pushes them up to defect dojo and then

372
00:13:28,079 --> 00:13:30,180
depending on status code effect goes

373
00:13:30,180 --> 00:13:31,800
you'll return back to me I'll either put

374
00:13:31,800 --> 00:13:33,660
the report in the completed or fail

375
00:13:33,660 --> 00:13:36,720
directory whatever happens just so I

376
00:13:36,720 --> 00:13:38,459
could go back later and see okay why did

377
00:13:38,459 --> 00:13:40,680
this fail uh try to debug it from there

378
00:13:40,680 --> 00:13:43,019
or maybe if it's completed I'll just

379
00:13:43,019 --> 00:13:44,399
blow it away and kind of forget about it

380
00:13:44,399 --> 00:13:46,260
or you know compliancy may make me keep

381
00:13:46,260 --> 00:13:48,899
it for a certain amount of time

382
00:13:48,899 --> 00:13:49,500
um

383
00:13:49,500 --> 00:13:52,500
so once that's all finished super

384
00:13:52,500 --> 00:13:54,000
important to clean up all of your work

385
00:13:54,000 --> 00:13:56,399
relieving resources kind of orphaned can

386
00:13:56,399 --> 00:13:58,500
be expensive and it's just not good

387
00:13:58,500 --> 00:13:59,940
housekeeping

388
00:13:59,940 --> 00:14:00,540
um

389
00:14:00,540 --> 00:14:02,880
so I did mention at the beginning that

390
00:14:02,880 --> 00:14:03,480
um

391
00:14:03,480 --> 00:14:06,600
the demo in that repo does spin up a

392
00:14:06,600 --> 00:14:08,220
defect dojo in some instance in a

393
00:14:08,220 --> 00:14:10,680
container but my graph doesn't represent

394
00:14:10,680 --> 00:14:12,959
that so this is an ideal world where

395
00:14:12,959 --> 00:14:14,579
your defect Dojo instance will just be

396
00:14:14,579 --> 00:14:16,680
persistent and ever living and all your

397
00:14:16,680 --> 00:14:18,420
data will live there it won't be blown

398
00:14:18,420 --> 00:14:20,040
away in a container this is what you

399
00:14:20,040 --> 00:14:21,360
want to shoot for

400
00:14:21,360 --> 00:14:24,600
okay so let's get into more about defect

401
00:14:24,600 --> 00:14:26,339
dojo and the cool features that it has

402
00:14:26,339 --> 00:14:29,579
and really how to master it so anytime

403
00:14:29,579 --> 00:14:31,740
that I'm evaluating an application for

404
00:14:31,740 --> 00:14:33,720
either use or if you're testing it

405
00:14:33,720 --> 00:14:35,760
whatever the case may be I kind of go

406
00:14:35,760 --> 00:14:37,920
through a four-step program you think

407
00:14:37,920 --> 00:14:39,300
about what are the main features of

408
00:14:39,300 --> 00:14:42,360
products why am I using it why am I uh

409
00:14:42,360 --> 00:14:45,120
how is it going to help me so today I've

410
00:14:45,120 --> 00:14:46,560
got going over the models the

411
00:14:46,560 --> 00:14:49,440
terminology how to really piece

412
00:14:49,440 --> 00:14:50,940
everything together using the

413
00:14:50,940 --> 00:14:53,699
nomenclature uh talk about import and

414
00:14:53,699 --> 00:14:55,440
re-import the differences between the

415
00:14:55,440 --> 00:14:58,139
two what's special about them and when

416
00:14:58,139 --> 00:15:00,680
to use them or not to use them possibly

417
00:15:00,680 --> 00:15:02,940
followed by the duplication which is

418
00:15:02,940 --> 00:15:05,040
kind of the where the smartness comes

419
00:15:05,040 --> 00:15:08,519
from defect dojo in terms of well be

420
00:15:08,519 --> 00:15:11,040
duplicating removing duplicates and

421
00:15:11,040 --> 00:15:12,839
identifying them

422
00:15:12,839 --> 00:15:15,060
um and then sort of our new first-class

423
00:15:15,060 --> 00:15:17,940
Citizen and Dojo tax and services how

424
00:15:17,940 --> 00:15:19,040
they help

425
00:15:19,040 --> 00:15:20,940
they're kind of worth their weight in

426
00:15:20,940 --> 00:15:22,100
gold

427
00:15:22,100 --> 00:15:24,480
after I get through all the features I'm

428
00:15:24,480 --> 00:15:25,740
going to talk about you know what what

429
00:15:25,740 --> 00:15:27,959
can the application do and not do is

430
00:15:27,959 --> 00:15:29,699
there a lot of uh area between

431
00:15:29,699 --> 00:15:32,579
permission models you know is there a

432
00:15:32,579 --> 00:15:34,380
reason why I should stay away from some

433
00:15:34,380 --> 00:15:37,560
and maybe use other uh other pieces of

434
00:15:37,560 --> 00:15:40,199
the model are not so useful to to the

435
00:15:40,199 --> 00:15:42,240
application side of it

436
00:15:42,240 --> 00:15:45,180
um and once you figure that out you know

437
00:15:45,180 --> 00:15:47,220
the tool is great and all if if it's

438
00:15:47,220 --> 00:15:49,019
very Hands-On maybe it's not as straight

439
00:15:49,019 --> 00:15:50,820
as it could be so is it really easy to

440
00:15:50,820 --> 00:15:53,100
integrate into my other tools to kind of

441
00:15:53,100 --> 00:15:54,839
make everything seamless

442
00:15:54,839 --> 00:15:56,100
um so I've got a jira integration to

443
00:15:56,100 --> 00:15:58,620
walk you through and then some extra

444
00:15:58,620 --> 00:16:00,360
features that have been added to the API

445
00:16:00,360 --> 00:16:02,399
over the years to make things a little

446
00:16:02,399 --> 00:16:05,040
more human it's pretty cool and lastly

447
00:16:05,040 --> 00:16:07,320
you know it was a an application is only

448
00:16:07,320 --> 00:16:09,839
as strong as the resources around it you

449
00:16:09,839 --> 00:16:11,579
know if you've ever run into an

450
00:16:11,579 --> 00:16:13,260
application that has no resources you

451
00:16:13,260 --> 00:16:15,240
know it's a very uphill battle and

452
00:16:15,240 --> 00:16:18,360
honestly a pretty big deterrent

453
00:16:18,360 --> 00:16:20,459
um so let's get into it

454
00:16:20,459 --> 00:16:22,260
some model structure

455
00:16:22,260 --> 00:16:22,920
um

456
00:16:22,920 --> 00:16:25,019
let's all pretend we work at Google and

457
00:16:25,019 --> 00:16:27,180
we're on the app site program there and

458
00:16:27,180 --> 00:16:28,800
we need to make sure all of Google's

459
00:16:28,800 --> 00:16:31,380
products are protected so at the top of

460
00:16:31,380 --> 00:16:33,060
the umbrella and defect dojo we have

461
00:16:33,060 --> 00:16:35,339
something called a product type think of

462
00:16:35,339 --> 00:16:37,380
this as like a g Suite as a whole you

463
00:16:37,380 --> 00:16:38,519
know what what are all the products

464
00:16:38,519 --> 00:16:40,320
within G Suite that they offer we've got

465
00:16:40,320 --> 00:16:42,180
things like Google Docs Google Sheets

466
00:16:42,180 --> 00:16:44,579
Google Slides Gmail

467
00:16:44,579 --> 00:16:46,320
um Google meets you've got a bunch of

468
00:16:46,320 --> 00:16:48,720
different ones so product is kind of

469
00:16:48,720 --> 00:16:51,000
just what the application is that needs

470
00:16:51,000 --> 00:16:52,620
to be tested

471
00:16:52,620 --> 00:16:53,160
um

472
00:16:53,160 --> 00:16:54,959
so these tests you know they occur

473
00:16:54,959 --> 00:16:57,779
either yearly or quarterly or daily you

474
00:16:57,779 --> 00:16:58,740
may have

475
00:16:58,740 --> 00:17:01,680
um your event driven testing as well but

476
00:17:01,680 --> 00:17:03,300
an engagement is to be thought of as

477
00:17:03,300 --> 00:17:05,339
like a point in time

478
00:17:05,339 --> 00:17:07,679
um and at that point in time it's

479
00:17:07,679 --> 00:17:09,179
probably going to be testing with a

480
00:17:09,179 --> 00:17:11,280
whole Suite of tools to make sure that

481
00:17:11,280 --> 00:17:13,020
all your bases are covered

482
00:17:13,020 --> 00:17:14,220
um and so that's sort of what a test

483
00:17:14,220 --> 00:17:17,280
represents is whatever the security tool

484
00:17:17,280 --> 00:17:19,799
is whether it be burp Suite or Center Q

485
00:17:19,799 --> 00:17:22,439
or Snick or anything like that all of

486
00:17:22,439 --> 00:17:23,819
those tools are kind of gathered into

487
00:17:23,819 --> 00:17:25,919
engagement to show you know this is what

488
00:17:25,919 --> 00:17:28,199
I've done on this application at this

489
00:17:28,199 --> 00:17:30,120
point in time

490
00:17:30,120 --> 00:17:32,400
um and so discovered by a test you've

491
00:17:32,400 --> 00:17:33,600
got your findings this is the real

492
00:17:33,600 --> 00:17:35,940
vulnerability data that a security tool

493
00:17:35,940 --> 00:17:37,140
would produce

494
00:17:37,140 --> 00:17:39,360
um it's kind of just a very large model

495
00:17:39,360 --> 00:17:41,160
in our case with a whole bunch of extra

496
00:17:41,160 --> 00:17:43,500
metadata field to try to build as many

497
00:17:43,500 --> 00:17:45,660
relationships across other findings and

498
00:17:45,660 --> 00:17:48,120
do things smartly

499
00:17:48,120 --> 00:17:49,679
um and lastly we've got endpoints

500
00:17:49,679 --> 00:17:51,740
they're really only applicable to

501
00:17:51,740 --> 00:17:53,940
Dynamic scanners that's essentially

502
00:17:53,940 --> 00:17:57,000
where was the vulnerability found

503
00:17:57,000 --> 00:17:59,340
um probably wondering okay that's great

504
00:17:59,340 --> 00:18:00,720
if I'm using a dynamic scanner but what

505
00:18:00,720 --> 00:18:03,120
if I only do static analysis

506
00:18:03,120 --> 00:18:05,340
um the endpoint is not really used in

507
00:18:05,340 --> 00:18:07,740
those cases but there is a lot of uh

508
00:18:07,740 --> 00:18:10,140
Fields within the finding model such as

509
00:18:10,140 --> 00:18:13,140
like line number and file path you could

510
00:18:13,140 --> 00:18:15,360
shove data into to still identify the

511
00:18:15,360 --> 00:18:16,980
location of where vulnerability could be

512
00:18:16,980 --> 00:18:19,020
found but it just isn't another model

513
00:18:19,020 --> 00:18:22,440
which has its benefits and sometimes

514
00:18:22,440 --> 00:18:26,760
okay so getting into how data gets

515
00:18:26,760 --> 00:18:28,980
imported into defectojo we've got two

516
00:18:28,980 --> 00:18:30,780
different endpoints here import and

517
00:18:30,780 --> 00:18:33,179
re-import they sound super similar but

518
00:18:33,179 --> 00:18:36,059
they actually behave super differently

519
00:18:36,059 --> 00:18:38,520
um so with import it's sort of kind of

520
00:18:38,520 --> 00:18:41,400
uh sort of kind of it's that's a big

521
00:18:41,400 --> 00:18:43,260
picture view it's kind of like a single

522
00:18:43,260 --> 00:18:44,700
point in time visualization of

523
00:18:44,700 --> 00:18:45,840
everything that's happening in the

524
00:18:45,840 --> 00:18:47,039
application

525
00:18:47,039 --> 00:18:49,440
one point in time so you know for

526
00:18:49,440 --> 00:18:51,720
example if you scan something and

527
00:18:51,720 --> 00:18:53,700
imported all the results into January

528
00:18:53,700 --> 00:18:55,740
and then came back in February and did

529
00:18:55,740 --> 00:18:58,080
the same thing you may see a lot of the

530
00:18:58,080 --> 00:19:00,539
same vulnerability data from uh one

531
00:19:00,539 --> 00:19:02,160
month to another in case something

532
00:19:02,160 --> 00:19:04,140
didn't get fixed or maybe there was a

533
00:19:04,140 --> 00:19:06,120
reintroduction or regression or

534
00:19:06,120 --> 00:19:07,740
something like that

535
00:19:07,740 --> 00:19:10,980
um so it's a very verbose way to figure

536
00:19:10,980 --> 00:19:13,140
out exactly where all the security

537
00:19:13,140 --> 00:19:15,600
issues are in your given application but

538
00:19:15,600 --> 00:19:17,160
this could lead to vulnerability

539
00:19:17,160 --> 00:19:18,660
overload you know if you're testing

540
00:19:18,660 --> 00:19:19,799
every month and you've got the effect

541
00:19:19,799 --> 00:19:22,020
dojo for two years that could be a lot

542
00:19:22,020 --> 00:19:24,900
of findings hopefully not hopefully your

543
00:19:24,900 --> 00:19:26,760
product's very secure but it doesn't

544
00:19:26,760 --> 00:19:28,620
always happen that way

545
00:19:28,620 --> 00:19:31,140
um so to make things a little better

546
00:19:31,140 --> 00:19:33,840
um came out with re-import and what it

547
00:19:33,840 --> 00:19:35,940
is really do doing is kind of

548
00:19:35,940 --> 00:19:37,740
calculating the Here and Now view you

549
00:19:37,740 --> 00:19:39,419
know this is very important for

550
00:19:39,419 --> 00:19:41,039
developers because they want to figure

551
00:19:41,039 --> 00:19:42,900
out okay what what are the things that

552
00:19:42,900 --> 00:19:45,539
need to be fixed right now

553
00:19:45,539 --> 00:19:47,880
um and so what re-import does is an

554
00:19:47,880 --> 00:19:49,860
intelligence intelligently uh

555
00:19:49,860 --> 00:19:51,780
differentiates vulnerabilities from run

556
00:19:51,780 --> 00:19:54,240
report to another so for example and

557
00:19:54,240 --> 00:19:57,360
your scan report in January you may have

558
00:19:57,360 --> 00:19:59,520
five vulnerabilities and the development

559
00:19:59,520 --> 00:20:01,620
will fix two and then when you import

560
00:20:01,620 --> 00:20:04,080
the scans again in February defectation

561
00:20:04,080 --> 00:20:06,000
will automatically see okay I don't see

562
00:20:06,000 --> 00:20:08,220
these two uh these two findings that I

563
00:20:08,220 --> 00:20:10,080
saw last month I'm going to go ahead and

564
00:20:10,080 --> 00:20:13,020
close the older ones and reflect on the

565
00:20:13,020 --> 00:20:14,460
record that these vulnerabilities were

566
00:20:14,460 --> 00:20:16,740
mitigated and they're fixed so have a

567
00:20:16,740 --> 00:20:18,299
side out of mind

568
00:20:18,299 --> 00:20:20,460
um and the contrast the same happens if

569
00:20:20,460 --> 00:20:23,280
you have a regression or reintroduction

570
00:20:23,280 --> 00:20:24,600
um it'll reopen those older

571
00:20:24,600 --> 00:20:26,460
vulnerabilities depending on if it sees

572
00:20:26,460 --> 00:20:29,580
a new one and a current report so a lot

573
00:20:29,580 --> 00:20:31,740
of smart features around reimport

574
00:20:31,740 --> 00:20:33,840
um but you know there's pros and cons to

575
00:20:33,840 --> 00:20:34,860
both

576
00:20:34,860 --> 00:20:38,280
so getting into what what re-import and

577
00:20:38,280 --> 00:20:40,260
import look like and you're given Dojo

578
00:20:40,260 --> 00:20:41,340
instance

579
00:20:41,340 --> 00:20:44,460
um this is my my demo for re-import

580
00:20:44,460 --> 00:20:46,679
functionality looking at the top of the

581
00:20:46,679 --> 00:20:48,080
slide we've got the import history

582
00:20:48,080 --> 00:20:50,460
functionality and it kind of tracks

583
00:20:50,460 --> 00:20:52,140
everything that's happening during your

584
00:20:52,140 --> 00:20:54,780
re-import process so on the very first

585
00:20:54,780 --> 00:20:57,660
import you've got four four findings

586
00:20:57,660 --> 00:21:00,660
being created my developers have fixed

587
00:21:00,660 --> 00:21:02,039
two of the issues so on the second

588
00:21:02,039 --> 00:21:04,260
import it shows that two of my findings

589
00:21:04,260 --> 00:21:06,960
were closed and then things got a little

590
00:21:06,960 --> 00:21:09,240
sloppy on my third import those two

591
00:21:09,240 --> 00:21:10,919
issues that they fixed on the first go

592
00:21:10,919 --> 00:21:13,200
around have come back and brought with

593
00:21:13,200 --> 00:21:15,299
it another vulnerability and so the

594
00:21:15,299 --> 00:21:17,400
records reflect the same to reactivated

595
00:21:17,400 --> 00:21:19,679
findings one and one new brand new

596
00:21:19,679 --> 00:21:21,360
binding

597
00:21:21,360 --> 00:21:22,020
um

598
00:21:22,020 --> 00:21:24,840
and then at the bottom line you see dang

599
00:21:24,840 --> 00:21:26,820
we've got five findings now

600
00:21:26,820 --> 00:21:28,020
um and then the pop-up on the right

601
00:21:28,020 --> 00:21:29,640
there shows you know this is the record

602
00:21:29,640 --> 00:21:32,100
on a per finding basis of you know it

603
00:21:32,100 --> 00:21:33,840
was created it was closed reactivated

604
00:21:33,840 --> 00:21:36,360
we're doing the whole song of dance

605
00:21:36,360 --> 00:21:36,960
um

606
00:21:36,960 --> 00:21:38,820
so there's a lot of audit logging and

607
00:21:38,820 --> 00:21:40,679
defectojo to make sure that you know

608
00:21:40,679 --> 00:21:42,840
even though things may make it fixed

609
00:21:42,840 --> 00:21:44,280
without your knowing or maybe even

610
00:21:44,280 --> 00:21:45,960
regressed without you knowing defect Ojo

611
00:21:45,960 --> 00:21:48,000
will catch it kind of alert you to it so

612
00:21:48,000 --> 00:21:50,820
you're always sort of in the know

613
00:21:50,820 --> 00:21:53,520
um and in terms of import I don't have a

614
00:21:53,520 --> 00:21:55,260
slide identifying exactly what it looks

615
00:21:55,260 --> 00:21:57,299
like but it's pretty much the same just

616
00:21:57,299 --> 00:21:59,880
without all the smart features

617
00:21:59,880 --> 00:22:01,620
um so you're probably thinking okay if

618
00:22:01,620 --> 00:22:03,900
I've got a smart option and a dumb

619
00:22:03,900 --> 00:22:05,520
option why would I ever choose the dumb

620
00:22:05,520 --> 00:22:07,200
one right

621
00:22:07,200 --> 00:22:08,460
um but there's definitely a good use

622
00:22:08,460 --> 00:22:11,580
case for import aka the dumb one

623
00:22:11,580 --> 00:22:13,380
um and it's all about really identifying

624
00:22:13,380 --> 00:22:15,539
your audience and who you're collecting

625
00:22:15,539 --> 00:22:18,299
this data for so in the case of your

626
00:22:18,299 --> 00:22:19,799
developers you want to use re-import

627
00:22:19,799 --> 00:22:21,960
keep the keep their cue of things that

628
00:22:21,960 --> 00:22:23,580
need to be fixed as small as possible

629
00:22:23,580 --> 00:22:25,520
your developers will like you for that

630
00:22:25,520 --> 00:22:28,260
but your Auditors and compliance and

631
00:22:28,260 --> 00:22:29,820
standards people are not going to like

632
00:22:29,820 --> 00:22:32,940
that as much because using a over and

633
00:22:32,940 --> 00:22:36,059
over does not really give you a good a

634
00:22:36,059 --> 00:22:38,280
good representation of a point in time

635
00:22:38,280 --> 00:22:40,020
scanning you know if if you look in the

636
00:22:40,020 --> 00:22:42,419
UI you're going to see one test and that

637
00:22:42,419 --> 00:22:45,539
test could have been used for years but

638
00:22:45,539 --> 00:22:47,159
at first glance without like really

639
00:22:47,159 --> 00:22:48,539
digging into it getting into import

640
00:22:48,539 --> 00:22:49,980
history and seeing exactly what's

641
00:22:49,980 --> 00:22:51,900
happening your compliance people are

642
00:22:51,900 --> 00:22:53,400
going to ding you from that pretty hard

643
00:22:53,400 --> 00:22:55,380
sometimes so that's very important

644
00:22:55,380 --> 00:22:57,299
really comes into play is that it shows

645
00:22:57,299 --> 00:22:59,760
you exactly what's happening at every

646
00:22:59,760 --> 00:23:03,240
time you scan so if you are regulated to

647
00:23:03,240 --> 00:23:06,360
have monthly pen test reports it'll show

648
00:23:06,360 --> 00:23:09,120
as a new test in January February March

649
00:23:09,120 --> 00:23:11,280
April and it'll show new line items for

650
00:23:11,280 --> 00:23:13,440
each of those so it'll be very easy for

651
00:23:13,440 --> 00:23:15,419
your compliance team to look at it and

652
00:23:15,419 --> 00:23:18,240
see okay they're good remove

653
00:23:18,240 --> 00:23:21,059
um so in my experience I like doing The

654
00:23:21,059 --> 00:23:22,799
Best of Both Worlds approach you know if

655
00:23:22,799 --> 00:23:24,120
if you're not really constrained by

656
00:23:24,120 --> 00:23:25,980
database space

657
00:23:25,980 --> 00:23:27,900
they have them both you know have to

658
00:23:27,900 --> 00:23:30,120
import the exact same files twice every

659
00:23:30,120 --> 00:23:31,799
time they're available one using import

660
00:23:31,799 --> 00:23:34,440
one using re-import both for totally two

661
00:23:34,440 --> 00:23:36,000
different audiences but you kind of get

662
00:23:36,000 --> 00:23:37,799
the best of both worlds

663
00:23:37,799 --> 00:23:39,960
um in addition to that though you know

664
00:23:39,960 --> 00:23:41,280
it's it's very important to know the

665
00:23:41,280 --> 00:23:43,020
limitations of your security team if

666
00:23:43,020 --> 00:23:44,700
they can't keep up with trioshing all

667
00:23:44,700 --> 00:23:46,500
those things then your developers might

668
00:23:46,500 --> 00:23:48,240
get a little cranky with you that you

669
00:23:48,240 --> 00:23:49,799
know they're getting stale information

670
00:23:49,799 --> 00:23:52,919
or maybe uh security team isn't catching

671
00:23:52,919 --> 00:23:54,659
false positives in time

672
00:23:54,659 --> 00:23:58,559
it's it's it's a big balance game

673
00:23:58,559 --> 00:24:01,080
um so moving on to the duplication what

674
00:24:01,080 --> 00:24:03,480
is it kind of gather a little bit from

675
00:24:03,480 --> 00:24:05,400
the name be do

676
00:24:05,400 --> 00:24:08,159
um well maybe not but anyways what the

677
00:24:08,159 --> 00:24:10,200
deal is is each time you import scan

678
00:24:10,200 --> 00:24:12,120
report it's going to take all of the

679
00:24:12,120 --> 00:24:13,620
results from the scan and then

680
00:24:13,620 --> 00:24:15,360
differentiate them in the database to

681
00:24:15,360 --> 00:24:16,440
figure out you know is this something

682
00:24:16,440 --> 00:24:17,940
we've seen before do I need to care

683
00:24:17,940 --> 00:24:20,460
about this can it be disregarded and

684
00:24:20,460 --> 00:24:22,980
towards the end uh whenever you get your

685
00:24:22,980 --> 00:24:24,539
successful status code back so that the

686
00:24:24,539 --> 00:24:26,580
import was successful you'll have a much

687
00:24:26,580 --> 00:24:28,740
shorter list of vulnerability data that

688
00:24:28,740 --> 00:24:31,380
you only need to consider and so the

689
00:24:31,380 --> 00:24:33,120
duplication will go through and Mark all

690
00:24:33,120 --> 00:24:35,580
the ones that were previously in the

691
00:24:35,580 --> 00:24:36,900
scan report that I've been seen before

692
00:24:36,900 --> 00:24:39,720
as duplicates and depending on your

693
00:24:39,720 --> 00:24:41,700
configuration they can either be deleted

694
00:24:41,700 --> 00:24:43,860
right out of the box or they can show up

695
00:24:43,860 --> 00:24:45,720
as having this little duplicate flag and

696
00:24:45,720 --> 00:24:47,820
status to where they won't appear in

697
00:24:47,820 --> 00:24:49,620
your filters and reports it's pretty

698
00:24:49,620 --> 00:24:51,419
nice

699
00:24:51,419 --> 00:24:53,520
um so you know how how is that happening

700
00:24:53,520 --> 00:24:55,440
on the back end so there's four

701
00:24:55,440 --> 00:24:57,240
different algorithms for how to identify

702
00:24:57,240 --> 00:24:58,740
these duplicates

703
00:24:58,740 --> 00:25:01,200
um the one that's uh kind of uses the

704
00:25:01,200 --> 00:25:02,820
default of what we refer to as the

705
00:25:02,820 --> 00:25:05,159
Legacy one this is the original uh

706
00:25:05,159 --> 00:25:07,260
original algorithm with some tweaks and

707
00:25:07,260 --> 00:25:10,980
it relies on the findings title cwe y

708
00:25:10,980 --> 00:25:13,380
number and file path applicable and the

709
00:25:13,380 --> 00:25:15,000
description

710
00:25:15,000 --> 00:25:16,320
um so you're probably thinking you know

711
00:25:16,320 --> 00:25:18,600
if I'm not using a line number and final

712
00:25:18,600 --> 00:25:20,460
path on like a static analysis tool

713
00:25:20,460 --> 00:25:22,500
really only left with three Fields here

714
00:25:22,500 --> 00:25:24,659
and we realized okay yeah maybe that's

715
00:25:24,659 --> 00:25:26,400
not so great that can get really strict

716
00:25:26,400 --> 00:25:29,100
and not find duplicates very often so we

717
00:25:29,100 --> 00:25:31,919
added in functionality to have

718
00:25:31,919 --> 00:25:34,080
the hash code calculated on a per person

719
00:25:34,080 --> 00:25:36,840
basis so you can really start to

720
00:25:36,840 --> 00:25:39,360
identify what tools really excel in

721
00:25:39,360 --> 00:25:41,159
providing information into What fields

722
00:25:41,159 --> 00:25:42,900
and then you can start tweaking your

723
00:25:42,900 --> 00:25:44,220
tools to get the most out of them

724
00:25:44,220 --> 00:25:46,799
because the overall goal is to reduce

725
00:25:46,799 --> 00:25:48,240
the amount of findings that need to be

726
00:25:48,240 --> 00:25:50,159
tree optioned at the end of the day

727
00:25:50,159 --> 00:25:50,880
um

728
00:25:50,880 --> 00:25:53,640
so configuring these tools I have a

729
00:25:53,640 --> 00:25:55,140
slide on this next about what this

730
00:25:55,140 --> 00:25:57,360
configuration looks like but configuring

731
00:25:57,360 --> 00:25:58,919
each of those standards to have the

732
00:25:58,919 --> 00:26:01,020
right Fields is kind of the endgame and

733
00:26:01,020 --> 00:26:02,520
defect Dojo it's going to be your

734
00:26:02,520 --> 00:26:04,260
never-ending Battle of tweaking and

735
00:26:04,260 --> 00:26:07,500
getting your performance up to bar

736
00:26:07,500 --> 00:26:09,840
um so in case the hash code uh it is

737
00:26:09,840 --> 00:26:12,179
great but it's not perfect

738
00:26:12,179 --> 00:26:13,860
um so we introduced the idea of a unique

739
00:26:13,860 --> 00:26:16,440
tool ID so some scanners have sort of

740
00:26:16,440 --> 00:26:18,480
their own glossary of vulnerability data

741
00:26:18,480 --> 00:26:20,539
like a database or something like that

742
00:26:20,539 --> 00:26:23,820
examples of such are centered queue uh

743
00:26:23,820 --> 00:26:25,799
koalas web app check marks some of those

744
00:26:25,799 --> 00:26:28,980
have their own uh sort of like a hash

745
00:26:28,980 --> 00:26:30,900
code usually it's like a five to six

746
00:26:30,900 --> 00:26:33,600
digit number that maps to the details of

747
00:26:33,600 --> 00:26:35,279
a given vulnerability

748
00:26:35,279 --> 00:26:37,799
and so that is the that's the golden

749
00:26:37,799 --> 00:26:39,659
standard for identity identifying people

750
00:26:39,659 --> 00:26:43,080
kits because it say you import a

751
00:26:43,080 --> 00:26:46,380
two-center q uh scanner reports and two

752
00:26:46,380 --> 00:26:49,260
findings have the same tool ID there's

753
00:26:49,260 --> 00:26:52,020
no no confusion there's duplicates there

754
00:26:52,020 --> 00:26:53,880
you know it's just it's a one-off and

755
00:26:53,880 --> 00:26:55,320
done

756
00:26:55,320 --> 00:26:57,840
um but that's not really useful if uh

757
00:26:57,840 --> 00:26:59,460
maybe you're trying to compare two tools

758
00:26:59,460 --> 00:27:01,080
and one has a unique tool ID and the

759
00:27:01,080 --> 00:27:02,400
other one doesn't

760
00:27:02,400 --> 00:27:05,039
um and so in response to that we added

761
00:27:05,039 --> 00:27:08,340
this kind of apples or oranges type of

762
00:27:08,340 --> 00:27:10,020
um algorithm that takes the combo of the

763
00:27:10,020 --> 00:27:10,740
two

764
00:27:10,740 --> 00:27:13,500
so for example if uh if you're using

765
00:27:13,500 --> 00:27:15,360
Center Cube and my previous statement

766
00:27:15,360 --> 00:27:17,940
that has a unique tool ID and something

767
00:27:17,940 --> 00:27:21,240
that doesn't such as thinker engine then

768
00:27:21,240 --> 00:27:23,940
700 Cube will not use the unique tool ID

769
00:27:23,940 --> 00:27:25,620
it'll instead use the hash code because

770
00:27:25,620 --> 00:27:27,840
that's what anker's using so instead of

771
00:27:27,840 --> 00:27:29,760
trying to compare Apple's oranges it'll

772
00:27:29,760 --> 00:27:31,500
just say well I've got apples hand

773
00:27:31,500 --> 00:27:33,720
oranges let's go with what you have and

774
00:27:33,720 --> 00:27:35,159
it'll try to figure it out the best it

775
00:27:35,159 --> 00:27:37,279
can

776
00:27:37,440 --> 00:27:38,760
um so this is kind of what the

777
00:27:38,760 --> 00:27:40,320
configuration looks like in Dojo

778
00:27:40,320 --> 00:27:42,659
settings file the settings file is very

779
00:27:42,659 --> 00:27:45,480
large lots of places to configure

780
00:27:45,480 --> 00:27:47,640
um and you can add in as many scans as

781
00:27:47,640 --> 00:27:49,320
you want here I think out of the box

782
00:27:49,320 --> 00:27:53,039
there's maybe 35 40 different scans so

783
00:27:53,039 --> 00:27:56,159
not all 150 are supported and that's

784
00:27:56,159 --> 00:27:58,200
mainly because we don't have the best

785
00:27:58,200 --> 00:28:00,360
test data for every single tool or a

786
00:28:00,360 --> 00:28:02,340
tool could change its report format and

787
00:28:02,340 --> 00:28:04,320
we don't have the updated uh updated

788
00:28:04,320 --> 00:28:06,120
test data to reflect that in our parsers

789
00:28:06,120 --> 00:28:08,880
and deduplication configurations

790
00:28:08,880 --> 00:28:11,760
um but there's a large list right below

791
00:28:11,760 --> 00:28:13,620
this dictionary that shows all the

792
00:28:13,620 --> 00:28:16,620
fields that can be can be used for hash

793
00:28:16,620 --> 00:28:19,620
code uh deduplication algorithms

794
00:28:19,620 --> 00:28:21,779
and you can add in as many or little as

795
00:28:21,779 --> 00:28:24,480
you want so looking looking at this list

796
00:28:24,480 --> 00:28:26,340
cargo audit looks like a long one

797
00:28:26,340 --> 00:28:29,400
there's five different uh five different

798
00:28:29,400 --> 00:28:30,600
fields there

799
00:28:30,600 --> 00:28:33,000
so when going and comparing cargo audit

800
00:28:33,000 --> 00:28:35,340
scan to Cargo audit scan there's going

801
00:28:35,340 --> 00:28:37,679
to be pretty hard not to find a dude or

802
00:28:37,679 --> 00:28:38,760
excuse me pretty hard to find a

803
00:28:38,760 --> 00:28:40,200
duplicate because there's so many

804
00:28:40,200 --> 00:28:42,179
different fields added to the criteria

805
00:28:42,179 --> 00:28:44,520
but then if you take something like the

806
00:28:44,520 --> 00:28:46,260
cloud support scan it's only looking at

807
00:28:46,260 --> 00:28:48,240
title and description chances are it's

808
00:28:48,240 --> 00:28:49,980
going to have a much easier time finding

809
00:28:49,980 --> 00:28:53,039
a duplicate than Fargo what it would so

810
00:28:53,039 --> 00:28:55,020
it's really important to to Really tweak

811
00:28:55,020 --> 00:28:56,400
your tools and figure out you know what

812
00:28:56,400 --> 00:28:59,039
is the good balance to either never

813
00:28:59,039 --> 00:29:00,659
finding duplicates or finding too many

814
00:29:00,659 --> 00:29:04,140
because both are kind of a big problem

815
00:29:04,140 --> 00:29:06,480
so in terms of how deduplication is

816
00:29:06,480 --> 00:29:09,000
handled with an important reimport it's

817
00:29:09,000 --> 00:29:11,400
it's a little dicey and that's mainly

818
00:29:11,400 --> 00:29:14,400
because re-import is intended to catch

819
00:29:14,400 --> 00:29:16,919
as many uh as many old findings as

820
00:29:16,919 --> 00:29:17,940
possible

821
00:29:17,940 --> 00:29:21,299
and so uh it relies on the deduplication

822
00:29:21,299 --> 00:29:22,679
algorithms whether you have the

823
00:29:22,679 --> 00:29:25,140
duplication enabled or not so if you're

824
00:29:25,140 --> 00:29:27,480
going through and say you're using a

825
00:29:27,480 --> 00:29:29,460
tool that doesn't have a duplication

826
00:29:29,460 --> 00:29:31,679
algorithm it'll just rely on the

827
00:29:31,679 --> 00:29:33,720
severity and the title of the finding to

828
00:29:33,720 --> 00:29:34,919
figure out you know is this something

829
00:29:34,919 --> 00:29:36,059
I've seen before

830
00:29:36,059 --> 00:29:38,299
this isn't necessarily an issue because

831
00:29:38,299 --> 00:29:41,820
re-import only works across the same

832
00:29:41,820 --> 00:29:44,159
consistent scan type each time so for

833
00:29:44,159 --> 00:29:46,620
example you can't re-import a verb scan

834
00:29:46,620 --> 00:29:48,659
over a center type scan it just doesn't

835
00:29:48,659 --> 00:29:50,220
work

836
00:29:50,220 --> 00:29:52,320
um so this is it actually works really

837
00:29:52,320 --> 00:29:53,580
well

838
00:29:53,580 --> 00:29:55,860
um but you may have differing results if

839
00:29:55,860 --> 00:29:57,299
you try to use

840
00:29:57,299 --> 00:29:59,279
um import with the same same kind of

841
00:29:59,279 --> 00:30:01,080
functionality because it only uses the

842
00:30:01,080 --> 00:30:03,360
hash code it doesn't care what uh

843
00:30:03,360 --> 00:30:05,880
duplication algorithm is used

844
00:30:05,880 --> 00:30:07,440
um for a given scan type at all it's

845
00:30:07,440 --> 00:30:09,720
only going to look at the hash code so

846
00:30:09,720 --> 00:30:12,240
the close all findings feature is it can

847
00:30:12,240 --> 00:30:14,640
be a little unpredictable between each

848
00:30:14,640 --> 00:30:18,299
uh each type of import so definitely

849
00:30:18,299 --> 00:30:21,539
something to just watch out for

850
00:30:21,539 --> 00:30:24,720
um so moving into a little easier topic

851
00:30:24,720 --> 00:30:26,399
duplications kind of mind-boggling

852
00:30:26,399 --> 00:30:27,960
there's a lot of documentation on it

853
00:30:27,960 --> 00:30:29,700
implore you to read it

854
00:30:29,700 --> 00:30:32,039
um attacks what are they and why do we

855
00:30:32,039 --> 00:30:33,000
have them

856
00:30:33,000 --> 00:30:34,980
um so they're basically just labels and

857
00:30:34,980 --> 00:30:36,779
just free flow metadata that you can add

858
00:30:36,779 --> 00:30:39,120
to pretty much any object in defect Dojo

859
00:30:39,120 --> 00:30:41,940
they started out in findings and we

860
00:30:41,940 --> 00:30:43,799
realized like oh my gosh these are so

861
00:30:43,799 --> 00:30:46,140
great you know they can be used to to

862
00:30:46,140 --> 00:30:48,419
filter things and search for things

863
00:30:48,419 --> 00:30:51,240
easier and they can be taken away you

864
00:30:51,240 --> 00:30:53,580
can add as many as you want and they're

865
00:30:53,580 --> 00:30:56,159
just awesome so at the top I've got them

866
00:30:56,159 --> 00:30:57,899
on findings you know you can add any

867
00:30:57,899 --> 00:31:00,960
kind of format you want any way that

868
00:31:00,960 --> 00:31:03,659
really makes sense in your work really

869
00:31:03,659 --> 00:31:05,220
um and in the middle I've got them on

870
00:31:05,220 --> 00:31:07,380
the engagement and then at the bottom

871
00:31:07,380 --> 00:31:10,260
even on a product I don't have many many

872
00:31:10,260 --> 00:31:12,179
use spaces for tags on product but

873
00:31:12,179 --> 00:31:14,279
functionality is there

874
00:31:14,279 --> 00:31:16,980
um so it's kind of like a rendition of a

875
00:31:16,980 --> 00:31:19,140
custom field so there's not a lot of

876
00:31:19,140 --> 00:31:21,419
extra custom fields on any of the

877
00:31:21,419 --> 00:31:23,279
objects within Dojo with the exception

878
00:31:23,279 --> 00:31:27,419
of a product mainly because it's an

879
00:31:27,419 --> 00:31:29,520
early Django days it was very difficult

880
00:31:29,520 --> 00:31:31,799
to have it's kind of free flow database

881
00:31:31,799 --> 00:31:34,559
models and so it's a lot easier now and

882
00:31:34,559 --> 00:31:37,020
easily accomplishable the tags are kind

883
00:31:37,020 --> 00:31:40,159
of the the hackish way around that issue

884
00:31:40,159 --> 00:31:42,360
so they're everywhere because of that

885
00:31:42,360 --> 00:31:46,080
but they add a lot of granularity

886
00:31:46,080 --> 00:31:47,760
so we also have something called

887
00:31:47,760 --> 00:31:49,980
Services which is basically the same

888
00:31:49,980 --> 00:31:51,360
thing as attack

889
00:31:51,360 --> 00:31:53,460
um but it's way more official looking

890
00:31:53,460 --> 00:31:54,960
you know like you get your own little

891
00:31:54,960 --> 00:31:57,659
window on the finding pane it looks very

892
00:31:57,659 --> 00:31:58,740
nice

893
00:31:58,740 --> 00:32:00,840
um and it's it doesn't show up in the UI

894
00:32:00,840 --> 00:32:02,700
is visible because it's kind of like an

895
00:32:02,700 --> 00:32:05,100
internal uh identifier

896
00:32:05,100 --> 00:32:07,799
so why why did we choose to use Services

897
00:32:07,799 --> 00:32:10,679
over tags what we found is that a lot of

898
00:32:10,679 --> 00:32:13,260
users were saying that the defect Dojo

899
00:32:13,260 --> 00:32:15,240
model doesn't really work as well on

900
00:32:15,240 --> 00:32:18,360
Modern applications defect Dojo is it

901
00:32:18,360 --> 00:32:21,480
was created I believe in 2013 so in that

902
00:32:21,480 --> 00:32:23,760
time period web applications and just

903
00:32:23,760 --> 00:32:25,620
applications in general were just these

904
00:32:25,620 --> 00:32:27,779
big monoliths code it was just a massive

905
00:32:27,779 --> 00:32:30,120
thing and nowadays it seems everything

906
00:32:30,120 --> 00:32:32,760
is built on microservices or built of a

907
00:32:32,760 --> 00:32:33,899
bunch of smaller components kind of

908
00:32:33,899 --> 00:32:35,880
mushed together to create one big

909
00:32:35,880 --> 00:32:38,399
application and the dojo model doesn't

910
00:32:38,399 --> 00:32:40,679
really fit that that well so we're

911
00:32:40,679 --> 00:32:42,299
working through changes to figure out

912
00:32:42,299 --> 00:32:44,159
you know what's the best way we can to

913
00:32:44,159 --> 00:32:46,080
really implement this to make it as

914
00:32:46,080 --> 00:32:48,140
future proof as we can

915
00:32:48,140 --> 00:32:51,120
and so what the service is for is really

916
00:32:51,120 --> 00:32:53,159
the first step in figuring out what's

917
00:32:53,159 --> 00:32:55,380
going to work the best so we're kind of

918
00:32:55,380 --> 00:32:57,299
doing the whole you know feed a little

919
00:32:57,299 --> 00:32:59,159
line out figure out if there's a tug if

920
00:32:59,159 --> 00:33:01,799
it is get a lot more light type thing

921
00:33:01,799 --> 00:33:02,340
um

922
00:33:02,340 --> 00:33:04,320
so a couple ways that Services can be

923
00:33:04,320 --> 00:33:06,840
added they can be added at import time

924
00:33:06,840 --> 00:33:08,700
so for example if you're you're scanning

925
00:33:08,700 --> 00:33:10,080
an application that you know is a

926
00:33:10,080 --> 00:33:12,179
microservice then you can just add in

927
00:33:12,179 --> 00:33:14,940
the title of whatever service it is at

928
00:33:14,940 --> 00:33:16,799
import time and it'll apply it to all

929
00:33:16,799 --> 00:33:18,059
the findings that are in the standard

930
00:33:18,059 --> 00:33:20,100
report or you know if you forget to do

931
00:33:20,100 --> 00:33:22,080
that you can go one by one at the

932
00:33:22,080 --> 00:33:23,820
service uh whatever the service label is

933
00:33:23,820 --> 00:33:26,720
to a given binding

934
00:33:26,880 --> 00:33:29,399
okay so gone through all the features

935
00:33:29,399 --> 00:33:32,600
let's talk about permissions

936
00:33:32,760 --> 00:33:34,919
so when I think about permissions in

937
00:33:34,919 --> 00:33:37,080
defect Dojo I have two two different

938
00:33:37,080 --> 00:33:39,600
Extremes in my mind either having only

939
00:33:39,600 --> 00:33:42,059
security people or security and

940
00:33:42,059 --> 00:33:44,100
developers there's pretty large

941
00:33:44,100 --> 00:33:45,960
difference between the two

942
00:33:45,960 --> 00:33:46,740
um

943
00:33:46,740 --> 00:33:48,899
back in the day this was very difficult

944
00:33:48,899 --> 00:33:50,640
to maintain because we had something

945
00:33:50,640 --> 00:33:53,159
called Product authorized users and

946
00:33:53,159 --> 00:33:55,080
you're basically just putting users onto

947
00:33:55,080 --> 00:33:57,240
a given product and that was it

948
00:33:57,240 --> 00:33:59,519
um it's one of the massive improvements

949
00:33:59,519 --> 00:34:01,320
in defect Dojo over the last year year

950
00:34:01,320 --> 00:34:02,640
and a half is a totally different

951
00:34:02,640 --> 00:34:05,159
permission bottle it's very modern it's

952
00:34:05,159 --> 00:34:07,620
got different roles for things it's it's

953
00:34:07,620 --> 00:34:10,199
a terrific Improvement so on the right

954
00:34:10,199 --> 00:34:13,139
here I've got a very small snippet of

955
00:34:13,139 --> 00:34:15,659
two different uh object permission

956
00:34:15,659 --> 00:34:19,139
levels across the five different roles

957
00:34:19,139 --> 00:34:20,879
so you see something like a finding

958
00:34:20,879 --> 00:34:23,580
maintainer and owner kind of on par with

959
00:34:23,580 --> 00:34:25,800
each other they're basically identical

960
00:34:25,800 --> 00:34:28,020
and that's mainly because the the

961
00:34:28,020 --> 00:34:30,060
maintainer is intended to be like a

962
00:34:30,060 --> 00:34:32,159
security person they need to have a lot

963
00:34:32,159 --> 00:34:34,020
of power in a lot of different areas but

964
00:34:34,020 --> 00:34:36,599
they don't need to be able to you know

965
00:34:36,599 --> 00:34:40,260
add people to a given products as a

966
00:34:40,260 --> 00:34:41,460
member of an organization or anything

967
00:34:41,460 --> 00:34:43,320
like that to where they can start making

968
00:34:43,320 --> 00:34:45,418
changes themselves or just straight up

969
00:34:45,418 --> 00:34:47,040
deleting a product because it has a lot

970
00:34:47,040 --> 00:34:48,300
of implications that's leading

971
00:34:48,300 --> 00:34:50,219
everything as well

972
00:34:50,219 --> 00:34:53,159
um so part of figuring out which which

973
00:34:53,159 --> 00:34:55,679
extreme you want to use is kind of

974
00:34:55,679 --> 00:34:57,240
difficult because you need to have a

975
00:34:57,240 --> 00:34:58,740
very good understanding of what each of

976
00:34:58,740 --> 00:35:00,900
these roles do and figuring out the the

977
00:35:00,900 --> 00:35:03,240
best roles to give to your users we only

978
00:35:03,240 --> 00:35:05,400
have really four to choose from API in

979
00:35:05,400 --> 00:35:08,160
order is not for humans

980
00:35:08,160 --> 00:35:10,260
um so breaking them down a little bit

981
00:35:10,260 --> 00:35:12,599
looking at security only there's another

982
00:35:12,599 --> 00:35:15,060
developers in here it's basically just

983
00:35:15,060 --> 00:35:17,520
another security tool but that's kind of

984
00:35:17,520 --> 00:35:18,660
a central hub for all your other

985
00:35:18,660 --> 00:35:20,160
security tools it's kind of like a

986
00:35:20,160 --> 00:35:21,480
bridge

987
00:35:21,480 --> 00:35:23,640
um but because of this you know the

988
00:35:23,640 --> 00:35:25,500
access control is kind of thrown out the

989
00:35:25,500 --> 00:35:27,119
window you know if everyone is going to

990
00:35:27,119 --> 00:35:28,740
be a security member everyone's going to

991
00:35:28,740 --> 00:35:30,720
be a maintainer basically

992
00:35:30,720 --> 00:35:32,760
so the permission model is it's great

993
00:35:32,760 --> 00:35:35,099
but it's not very useful here

994
00:35:35,099 --> 00:35:37,200
um it can be used though in the case

995
00:35:37,200 --> 00:35:38,579
where if you have like interns coming in

996
00:35:38,579 --> 00:35:40,200
or maybe some Auditors that need read

997
00:35:40,200 --> 00:35:41,820
permission you can still hand those out

998
00:35:41,820 --> 00:35:44,640
and it works really well and then on the

999
00:35:44,640 --> 00:35:45,839
flip side of that point having

1000
00:35:45,839 --> 00:35:47,220
developers and security kind of

1001
00:35:47,220 --> 00:35:49,500
intermingle in the same tool kind of

1002
00:35:49,500 --> 00:35:51,359
introduces the the idea of like a

1003
00:35:51,359 --> 00:35:53,880
company-wide tool and access control is

1004
00:35:53,880 --> 00:35:55,980
relied on very heavily you know you

1005
00:35:55,980 --> 00:35:58,140
don't want to have one developer team

1006
00:35:58,140 --> 00:35:59,760
seeing vulnerability data another

1007
00:35:59,760 --> 00:36:01,260
developer team you know maybe they'll

1008
00:36:01,260 --> 00:36:02,520
get a little self-conscious or something

1009
00:36:02,520 --> 00:36:04,560
or that could be a violation of like a

1010
00:36:04,560 --> 00:36:06,240
need to know basis or a circle of trust

1011
00:36:06,240 --> 00:36:08,220
both are bad

1012
00:36:08,220 --> 00:36:10,320
um so it's really important to kind of

1013
00:36:10,320 --> 00:36:12,480
set up guard rails around what each

1014
00:36:12,480 --> 00:36:15,780
development team can see but to do this

1015
00:36:15,780 --> 00:36:17,339
like I mentioned previously you need to

1016
00:36:17,339 --> 00:36:18,720
have a really good understanding of all

1017
00:36:18,720 --> 00:36:20,820
the permission roles do so that you

1018
00:36:20,820 --> 00:36:22,440
don't accidentally give a team too much

1019
00:36:22,440 --> 00:36:24,680
power

1020
00:36:24,720 --> 00:36:26,640
um so doing more of a deep dive into the

1021
00:36:26,640 --> 00:36:28,260
pros and cons of each

1022
00:36:28,260 --> 00:36:31,680
um using it as as a security only team

1023
00:36:31,680 --> 00:36:33,900
has some some really good benefits at

1024
00:36:33,900 --> 00:36:35,700
the very beginning of using defect Dojo

1025
00:36:35,700 --> 00:36:38,520
because we don't really have to tell as

1026
00:36:38,520 --> 00:36:40,980
many people how to use defective gel you

1027
00:36:40,980 --> 00:36:42,900
know it's a very small net to throw over

1028
00:36:42,900 --> 00:36:44,280
your security team and you know just

1029
00:36:44,280 --> 00:36:45,599
kind of instruct them you can do in a

1030
00:36:45,599 --> 00:36:47,700
zoom meeting type of thing

1031
00:36:47,700 --> 00:36:49,740
um and you have a much smaller chance of

1032
00:36:49,740 --> 00:36:52,200
any of them doing anything nefarious

1033
00:36:52,200 --> 00:36:54,180
mainly because of there's likely not

1034
00:36:54,180 --> 00:36:55,980
going to be any contractors used on your

1035
00:36:55,980 --> 00:36:57,420
security team but he may have a lot of

1036
00:36:57,420 --> 00:37:00,060
contractors on the dev team

1037
00:37:00,060 --> 00:37:02,579
um but because of the significant uh

1038
00:37:02,579 --> 00:37:04,079
significant difference in user base

1039
00:37:04,079 --> 00:37:06,180
having all developers and no developers

1040
00:37:06,180 --> 00:37:07,680
it's probably going to mean a leaner

1041
00:37:07,680 --> 00:37:09,060
instance which is probably going to be

1042
00:37:09,060 --> 00:37:10,920
reduced costs for you which who doesn't

1043
00:37:10,920 --> 00:37:12,660
love that

1044
00:37:12,660 --> 00:37:14,280
um but you know if you're using a

1045
00:37:14,280 --> 00:37:16,140
security only tool you kind of have to

1046
00:37:16,140 --> 00:37:17,820
use secure integration to push things

1047
00:37:17,820 --> 00:37:21,660
onto into developers cues in Akira I

1048
00:37:21,660 --> 00:37:23,280
listed this as a con because you know

1049
00:37:23,280 --> 00:37:24,540
what if your organization doesn't use

1050
00:37:24,540 --> 00:37:26,640
Dura maybe they use as your devops or

1051
00:37:26,640 --> 00:37:29,220
servicenow or anything like that you're

1052
00:37:29,220 --> 00:37:30,599
kind of dead in the water

1053
00:37:30,599 --> 00:37:32,760
um so definitely a decision to think

1054
00:37:32,760 --> 00:37:35,579
about before picking an extreme

1055
00:37:35,579 --> 00:37:37,800
um and then getting into the security

1056
00:37:37,800 --> 00:37:40,020
developer mix pros and cons

1057
00:37:40,020 --> 00:37:40,619
um

1058
00:37:40,619 --> 00:37:42,420
getting developers involved with Deep by

1059
00:37:42,420 --> 00:37:44,579
Dojo generally increases the security

1060
00:37:44,579 --> 00:37:47,160
presence in their minds overall which is

1061
00:37:47,160 --> 00:37:49,140
always positive

1062
00:37:49,140 --> 00:37:50,940
um but you do get more of a single

1063
00:37:50,940 --> 00:37:53,520
source of truce so developers are

1064
00:37:53,520 --> 00:37:55,320
modifying issues within the effect Dojo

1065
00:37:55,320 --> 00:37:57,420
there's no communication break between

1066
00:37:57,420 --> 00:37:59,820
say jira and defective or slack and

1067
00:37:59,820 --> 00:38:01,680
effective or anything like that

1068
00:38:01,680 --> 00:38:03,119
huh

1069
00:38:03,119 --> 00:38:04,920
so the more people that are actually

1070
00:38:04,920 --> 00:38:07,200
using defect Dojo the chances are higher

1071
00:38:07,200 --> 00:38:09,180
that some of them will go join our slack

1072
00:38:09,180 --> 00:38:11,640
Channel or start contributing but

1073
00:38:11,640 --> 00:38:13,560
generally equals more Community risks

1074
00:38:13,560 --> 00:38:15,300
which is really cool

1075
00:38:15,300 --> 00:38:17,280
um some of the cons could be you know

1076
00:38:17,280 --> 00:38:18,599
you have to be very careful with your

1077
00:38:18,599 --> 00:38:20,640
your Access Control if you misconfigure

1078
00:38:20,640 --> 00:38:22,859
something it could be dangerous or you

1079
00:38:22,859 --> 00:38:25,079
know catastrophe whichever

1080
00:38:25,079 --> 00:38:25,680
um

1081
00:38:25,680 --> 00:38:27,300
and I mentioned earlier about the

1082
00:38:27,300 --> 00:38:31,020
contractors so I'll skip it for now

1083
00:38:31,020 --> 00:38:32,700
um as with everything and security it's

1084
00:38:32,700 --> 00:38:34,859
all about balance you know

1085
00:38:34,859 --> 00:38:37,619
um my professional recommendation is to

1086
00:38:37,619 --> 00:38:39,000
kind of do a hybrid model you know you

1087
00:38:39,000 --> 00:38:40,440
start off small and keep it security

1088
00:38:40,440 --> 00:38:42,359
centered at first and then start

1089
00:38:42,359 --> 00:38:45,119
onboarding developers kind of slow

1090
00:38:45,119 --> 00:38:46,680
um like I call some of those folks

1091
00:38:46,680 --> 00:38:48,599
appsec ambassadors you know developers

1092
00:38:48,599 --> 00:38:50,460
that are really in touch with security

1093
00:38:50,460 --> 00:38:51,900
and have a good idea of what they're

1094
00:38:51,900 --> 00:38:53,220
doing you can get them in the defect

1095
00:38:53,220 --> 00:38:54,720
dojo and kind of get them really

1096
00:38:54,720 --> 00:38:55,980
familiar with things so they can take

1097
00:38:55,980 --> 00:38:57,119
their information back to their

1098
00:38:57,119 --> 00:38:58,619
developer teams and kind of spread the

1099
00:38:58,619 --> 00:39:00,900
spread the knowledge wealth

1100
00:39:00,900 --> 00:39:02,820
um but as you're growing you know

1101
00:39:02,820 --> 00:39:05,339
familiarity is is very important if

1102
00:39:05,339 --> 00:39:07,020
you're just kind of going from zero to

1103
00:39:07,020 --> 00:39:09,900
100 probably not gonna do things as

1104
00:39:09,900 --> 00:39:11,400
correctly as you could

1105
00:39:11,400 --> 00:39:12,900
um so it's all about really figuring out

1106
00:39:12,900 --> 00:39:15,500
what's best for the organization

1107
00:39:15,500 --> 00:39:18,000
uh next on the list we've got Geo

1108
00:39:18,000 --> 00:39:19,500
integration which I touched on earlier

1109
00:39:19,500 --> 00:39:21,060
and then our apis some of the cool

1110
00:39:21,060 --> 00:39:23,820
features that we have

1111
00:39:23,820 --> 00:39:25,320
all just ahead of time on run mature on

1112
00:39:25,320 --> 00:39:26,339
time so I'm going to kind of Blitz

1113
00:39:26,339 --> 00:39:28,320
through a little bit with our jira

1114
00:39:28,320 --> 00:39:30,180
integration uh it's it's bi-directional

1115
00:39:30,180 --> 00:39:32,940
and some actions those actions include

1116
00:39:32,940 --> 00:39:35,400
setting status on the jira boards or in

1117
00:39:35,400 --> 00:39:37,740
defect Dojo so for example if you mark

1118
00:39:37,740 --> 00:39:39,540
something and defect Dojo is mitigated

1119
00:39:39,540 --> 00:39:42,240
or inactive it'll carry on to the jira

1120
00:39:42,240 --> 00:39:44,220
ticket close it and it works the same

1121
00:39:44,220 --> 00:39:47,400
way backwards and the other one that we

1122
00:39:47,400 --> 00:39:49,200
offer for bi-directionality is comments

1123
00:39:49,200 --> 00:39:50,880
so in defect Doge here we have a notion

1124
00:39:50,880 --> 00:39:52,740
of notes just basically just a jira

1125
00:39:52,740 --> 00:39:55,079
comment and so when you drop a note in

1126
00:39:55,079 --> 00:39:56,880
defect Dojo it'll be copied onto the

1127
00:39:56,880 --> 00:39:58,920
jira ticket vice versa

1128
00:39:58,920 --> 00:40:00,900
so this is uh kind of what it looks like

1129
00:40:00,900 --> 00:40:03,300
in the defect Dojo side nothing changes

1130
00:40:03,300 --> 00:40:05,820
much except you get that little jira uh

1131
00:40:05,820 --> 00:40:09,119
like a stanza on on the center left area

1132
00:40:09,119 --> 00:40:12,240
showing whatever that your issue is

1133
00:40:12,240 --> 00:40:14,160
um on the durocyte it's basically taking

1134
00:40:14,160 --> 00:40:16,260
all of the fields within finding model

1135
00:40:16,260 --> 00:40:18,060
and projecting them into the description

1136
00:40:18,060 --> 00:40:20,700
box of the jury issue you get some other

1137
00:40:20,700 --> 00:40:23,280
labels and severity matches and things

1138
00:40:23,280 --> 00:40:24,240
like that

1139
00:40:24,240 --> 00:40:26,579
so you get a pretty close one-to-one

1140
00:40:26,579 --> 00:40:28,339
representation

1141
00:40:28,339 --> 00:40:31,320
in terms of really how to organize your

1142
00:40:31,320 --> 00:40:34,200
your jira integration chances are uh

1143
00:40:34,200 --> 00:40:36,480
your deployment of defect Dojo is much

1144
00:40:36,480 --> 00:40:38,099
younger than your organization's

1145
00:40:38,099 --> 00:40:39,420
deployment of jira so you're probably

1146
00:40:39,420 --> 00:40:41,160
going to be forced to

1147
00:40:41,160 --> 00:40:44,099
um organize your dojo with whatever's

1148
00:40:44,099 --> 00:40:46,619
happening in jira so in response to that

1149
00:40:46,619 --> 00:40:48,839
we have two different places where you

1150
00:40:48,839 --> 00:40:52,500
can map a defect Dojo model objects to a

1151
00:40:52,500 --> 00:40:54,540
jira projects those are the products and

1152
00:40:54,540 --> 00:40:57,380
the engagement the project

1153
00:40:57,380 --> 00:41:00,540
project to product mapping was the only

1154
00:41:00,540 --> 00:41:02,099
thing that we offered a couple years ago

1155
00:41:02,099 --> 00:41:04,140
until we realized like oh geez maybe

1156
00:41:04,140 --> 00:41:07,020
this this isn't as flexible as poked and

1157
00:41:07,020 --> 00:41:09,300
so now you can kind of override the

1158
00:41:09,300 --> 00:41:11,280
products to your configuration on a per

1159
00:41:11,280 --> 00:41:13,320
engagement level so this is great for

1160
00:41:13,320 --> 00:41:15,480
things like Sprints and epics and things

1161
00:41:15,480 --> 00:41:18,119
like that but generally speaking you

1162
00:41:18,119 --> 00:41:19,920
know the defect Dojo product should map

1163
00:41:19,920 --> 00:41:22,020
to the durap project but another

1164
00:41:22,020 --> 00:41:23,940
instance of components and services kind

1165
00:41:23,940 --> 00:41:26,839
of breaks that rule

1166
00:41:27,060 --> 00:41:29,099
um really important thing to touch on

1167
00:41:29,099 --> 00:41:30,660
with the Geo integration is knowing when

1168
00:41:30,660 --> 00:41:33,839
to push there's three different uh I

1169
00:41:33,839 --> 00:41:36,839
guess places you could push either set

1170
00:41:36,839 --> 00:41:39,780
at the defect Dojo product during

1171
00:41:39,780 --> 00:41:42,240
integration you could set it to push all

1172
00:41:42,240 --> 00:41:44,160
findings to jira that are in the product

1173
00:41:44,160 --> 00:41:46,380
very dangerous can't

1174
00:41:46,380 --> 00:41:49,500
can't say steer away any anymore it's

1175
00:41:49,500 --> 00:41:51,060
it's a horrible idea your developers

1176
00:41:51,060 --> 00:41:54,000
will certainly hate you for it uh middle

1177
00:41:54,000 --> 00:41:56,160
grounds kind of pushing all the issues

1178
00:41:56,160 --> 00:41:58,200
at a given scan time

1179
00:41:58,200 --> 00:42:01,320
um so say you've got a a burp report and

1180
00:42:01,320 --> 00:42:03,180
you want you know all of them are valid

1181
00:42:03,180 --> 00:42:04,740
you've probably tested them within the

1182
00:42:04,740 --> 00:42:07,440
burp kind of platform before generating

1183
00:42:07,440 --> 00:42:09,660
the report so you could push all of

1184
00:42:09,660 --> 00:42:11,640
those into jira this does assume you

1185
00:42:11,640 --> 00:42:13,380
have a pretty high confidence level for

1186
00:42:13,380 --> 00:42:15,000
your scanner you know that it's not you

1187
00:42:15,000 --> 00:42:16,500
know generating a bunch of duplicates or

1188
00:42:16,500 --> 00:42:18,200
false positives or anything like that

1189
00:42:18,200 --> 00:42:20,640
but what I recommend the most is just

1190
00:42:20,640 --> 00:42:22,260
pushing things individually you know

1191
00:42:22,260 --> 00:42:23,280
this

1192
00:42:23,280 --> 00:42:24,960
you get eyes from a security

1193
00:42:24,960 --> 00:42:26,520
professional all the finding you know

1194
00:42:26,520 --> 00:42:28,380
okay this is totally valid send it to

1195
00:42:28,380 --> 00:42:30,060
Dev team then you can push to jira

1196
00:42:30,060 --> 00:42:32,460
either on an individual finding or you

1197
00:42:32,460 --> 00:42:34,320
can kind of select a handful of them and

1198
00:42:34,320 --> 00:42:35,820
like our bulk edit menu and then push

1199
00:42:35,820 --> 00:42:38,220
those in sort of like a bucket of sorts

1200
00:42:38,220 --> 00:42:40,800
but it's definitely not all or nothing

1201
00:42:40,800 --> 00:42:42,720
you know it's much better to be a little

1202
00:42:42,720 --> 00:42:44,760
more granular

1203
00:42:44,760 --> 00:42:45,420
um

1204
00:42:45,420 --> 00:42:47,339
so following up with this API smart

1205
00:42:47,339 --> 00:42:49,500
features uh I mentioned at the beginning

1206
00:42:49,500 --> 00:42:51,599
of the presentation that all of the

1207
00:42:51,599 --> 00:42:53,400
features I'm talking about today do have

1208
00:42:53,400 --> 00:42:55,260
API endpoints

1209
00:42:55,260 --> 00:42:56,400
um but the most important one is

1210
00:42:56,400 --> 00:42:58,079
probably going to be import scan and

1211
00:42:58,079 --> 00:42:59,880
re-import scan

1212
00:42:59,880 --> 00:43:02,339
um so I I in the past I've had to create

1213
00:43:02,339 --> 00:43:04,800
scripts that go through and identify the

1214
00:43:04,800 --> 00:43:06,420
correct product I want to push to and

1215
00:43:06,420 --> 00:43:07,980
then from there identify the right

1216
00:43:07,980 --> 00:43:08,940
engagement

1217
00:43:08,940 --> 00:43:11,339
and integrating that into your pipeline

1218
00:43:11,339 --> 00:43:13,800
is you know fine but that could increase

1219
00:43:13,800 --> 00:43:15,660
your run time significantly if you're

1220
00:43:15,660 --> 00:43:18,240
pushing pretty frequently so in response

1221
00:43:18,240 --> 00:43:20,760
to that defect dojo now has kind of more

1222
00:43:20,760 --> 00:43:23,700
human accessibility such that if you

1223
00:43:23,700 --> 00:43:25,200
just give the name of a product or an

1224
00:43:25,200 --> 00:43:27,660
engagement in in your import scan

1225
00:43:27,660 --> 00:43:29,760
payload it'll automatically find the

1226
00:43:29,760 --> 00:43:31,140
correct object and push it to the

1227
00:43:31,140 --> 00:43:32,819
correct place

1228
00:43:32,819 --> 00:43:35,579
so it's really really nice

1229
00:43:35,579 --> 00:43:37,859
um so if if you run into an example of

1230
00:43:37,859 --> 00:43:39,060
maybe the products that you're

1231
00:43:39,060 --> 00:43:41,520
specifying don't exist defect Dojo will

1232
00:43:41,520 --> 00:43:43,859
automatically create them for you

1233
00:43:43,859 --> 00:43:46,020
um this is really great if you are say

1234
00:43:46,020 --> 00:43:47,460
onboarding a new product that's never

1235
00:43:47,460 --> 00:43:49,200
been scanned before

1236
00:43:49,200 --> 00:43:51,240
um and you don't have to you know go in

1237
00:43:51,240 --> 00:43:52,800
and create these products with the

1238
00:43:52,800 --> 00:43:54,119
correct names and all that and the

1239
00:43:54,119 --> 00:43:56,460
effect Dojo beforehand you can just

1240
00:43:56,460 --> 00:43:58,319
onboard them and it should all just work

1241
00:43:58,319 --> 00:44:01,680
it's really really handy one thing to

1242
00:44:01,680 --> 00:44:03,240
watch out for is this could become a

1243
00:44:03,240 --> 00:44:04,440
pain

1244
00:44:04,440 --> 00:44:06,480
um I'll be using something like a

1245
00:44:06,480 --> 00:44:08,460
timestamps in your title you know you

1246
00:44:08,460 --> 00:44:10,500
could be having a vulnerability pushed

1247
00:44:10,500 --> 00:44:11,819
to weird places that you're not

1248
00:44:11,819 --> 00:44:13,140
expecting

1249
00:44:13,140 --> 00:44:14,700
um and that could be because of you know

1250
00:44:14,700 --> 00:44:17,579
maybe a long job queue or maybe your

1251
00:44:17,579 --> 00:44:19,140
your Runner server goes down for a

1252
00:44:19,140 --> 00:44:21,000
period of time and they get actually ran

1253
00:44:21,000 --> 00:44:24,119
hours later or something like that

1254
00:44:24,119 --> 00:44:26,339
um last API feature I have for you today

1255
00:44:26,339 --> 00:44:28,920
is this notion of kind of these

1256
00:44:28,920 --> 00:44:30,599
tabulated stats that come after every

1257
00:44:30,599 --> 00:44:34,020
import and what it does is after all of

1258
00:44:34,020 --> 00:44:36,180
the import magic is done on a given scan

1259
00:44:36,180 --> 00:44:37,920
report it'll run through and say you

1260
00:44:37,920 --> 00:44:39,599
know this this is the counts of all the

1261
00:44:39,599 --> 00:44:41,339
objects I found you know these are the

1262
00:44:41,339 --> 00:44:42,839
active ones these are the duplicates

1263
00:44:42,839 --> 00:44:44,760
these are the amount of false pauses I

1264
00:44:44,760 --> 00:44:47,040
found and it's separated out into

1265
00:44:47,040 --> 00:44:49,500
different severities so if you're using

1266
00:44:49,500 --> 00:44:51,300
some external

1267
00:44:51,300 --> 00:44:53,280
um metric tracking software like Tableau

1268
00:44:53,280 --> 00:44:55,079
or something like that you can push all

1269
00:44:55,079 --> 00:44:58,140
of these up and then uh any of the the

1270
00:44:58,140 --> 00:44:59,880
scripts on the back end of Tableau will

1271
00:44:59,880 --> 00:45:01,680
take care of it for you

1272
00:45:01,680 --> 00:45:03,180
um so this is really great for

1273
00:45:03,180 --> 00:45:04,680
identifying you know maybe where your

1274
00:45:04,680 --> 00:45:06,300
tools are a little too noisy or maybe

1275
00:45:06,300 --> 00:45:09,660
they're they're not great at um

1276
00:45:09,660 --> 00:45:11,640
uh filtering out any of the false

1277
00:45:11,640 --> 00:45:13,319
positives or duplicates or anything like

1278
00:45:13,319 --> 00:45:16,319
that so there's a lot of very not uh

1279
00:45:16,319 --> 00:45:18,480
valuable knowledge that can be used from

1280
00:45:18,480 --> 00:45:20,520
these metrics

1281
00:45:20,520 --> 00:45:23,339
okay so let's go over the resources real

1282
00:45:23,339 --> 00:45:26,040
quick oh no

1283
00:45:26,040 --> 00:45:29,119
I'm not sure what happened

1284
00:45:29,579 --> 00:45:32,460
um this is our moderator team uh up top

1285
00:45:32,460 --> 00:45:34,500
we've got the three creators Samantha

1286
00:45:34,500 --> 00:45:36,060
sorrow Greg Anderson and Aaron Weaver

1287
00:45:36,060 --> 00:45:37,980
they've been with the project since day

1288
00:45:37,980 --> 00:45:40,020
one really and Matt and Greg are still

1289
00:45:40,020 --> 00:45:42,240
very active today

1290
00:45:42,240 --> 00:45:43,800
um on the bottom floor we've got

1291
00:45:43,800 --> 00:45:46,140
dubrovco Yannick Damian and Stefan

1292
00:45:46,140 --> 00:45:47,940
they've each brought so many great and

1293
00:45:47,940 --> 00:45:49,920
unique things to to the development team

1294
00:45:49,920 --> 00:45:52,619
and for maintaining are the two

1295
00:45:52,619 --> 00:45:54,720
kubernetes aficionados that I mentioned

1296
00:45:54,720 --> 00:45:56,400
earlier they do a terrific job of

1297
00:45:56,400 --> 00:45:58,920
helping helping contributors get their

1298
00:45:58,920 --> 00:46:00,980
pull requests across the line when they

1299
00:46:00,980 --> 00:46:03,720
result with home changes but they're

1300
00:46:03,720 --> 00:46:04,980
also well versed in a lot of other

1301
00:46:04,980 --> 00:46:06,500
places as well

1302
00:46:06,500 --> 00:46:09,119
Damian was very responsible and kind of

1303
00:46:09,119 --> 00:46:10,680
cleaning up all of our parsers and

1304
00:46:10,680 --> 00:46:12,599
unifying them into a centralized format

1305
00:46:12,599 --> 00:46:14,160
and making the import process

1306
00:46:14,160 --> 00:46:16,920
significantly faster and catches a lot

1307
00:46:16,920 --> 00:46:20,040
more errors terrific job there and then

1308
00:46:20,040 --> 00:46:22,319
Stefan completely redid our permission

1309
00:46:22,319 --> 00:46:25,619
model so he took us from our kind of

1310
00:46:25,619 --> 00:46:27,780
Scrappy authorized product model and

1311
00:46:27,780 --> 00:46:29,640
brought us to a very modern rbac system

1312
00:46:29,640 --> 00:46:32,460
very cool

1313
00:46:32,460 --> 00:46:34,079
um if you're looking to get involved

1314
00:46:34,079 --> 00:46:36,060
I've got a QR code that links for a

1315
00:46:36,060 --> 00:46:37,619
contributing markdown file and the root

1316
00:46:37,619 --> 00:46:40,200
of the repo what we love to see is when

1317
00:46:40,200 --> 00:46:42,180
users either submit issues or feature

1318
00:46:42,180 --> 00:46:43,800
requests directly in GitHub so that

1319
00:46:43,800 --> 00:46:46,260
we'll see them faster we love even more

1320
00:46:46,260 --> 00:46:48,960
is when they actually just make debug

1321
00:46:48,960 --> 00:46:50,700
fixes or do the feature requests and

1322
00:46:50,700 --> 00:46:52,920
submit a pull request for them this

1323
00:46:52,920 --> 00:46:55,260
really gets uh gets eyes on it a lot

1324
00:46:55,260 --> 00:46:57,119
faster because we tend to look at pull

1325
00:46:57,119 --> 00:46:59,160
requests first because these are kind of

1326
00:46:59,160 --> 00:47:01,319
the hot plates in the oven type of

1327
00:47:01,319 --> 00:47:03,540
situation

1328
00:47:03,540 --> 00:47:04,800
um but for example if you want to get

1329
00:47:04,800 --> 00:47:06,420
really involved in in the defect Dojo

1330
00:47:06,420 --> 00:47:07,800
Community

1331
00:47:07,800 --> 00:47:09,300
um just start reviewing all requests

1332
00:47:09,300 --> 00:47:11,040
this is how I got started out I took an

1333
00:47:11,040 --> 00:47:13,319
interest in college with defect dojo and

1334
00:47:13,319 --> 00:47:14,760
I just really wanted to be involved and

1335
00:47:14,760 --> 00:47:17,060
I started reviewing pull requests and

1336
00:47:17,060 --> 00:47:19,680
Greg and Matt noticed and they were like

1337
00:47:19,680 --> 00:47:22,020
hey I want you to be a moderator so

1338
00:47:22,020 --> 00:47:24,599
that's actually how uh Yannick rovco

1339
00:47:24,599 --> 00:47:27,660
Damien and Stefan all got into uh the

1340
00:47:27,660 --> 00:47:30,060
moderator since they just really dug in

1341
00:47:30,060 --> 00:47:31,380
deep and just started helping the

1342
00:47:31,380 --> 00:47:34,260
community and we see that

1343
00:47:34,260 --> 00:47:36,300
um what are the ways to get involved we

1344
00:47:36,300 --> 00:47:37,440
got a couple different selection

1345
00:47:37,440 --> 00:47:38,520
channels

1346
00:47:38,520 --> 00:47:40,800
um the green one is just our general

1347
00:47:40,800 --> 00:47:42,720
defect Dojo Channel where you can ask

1348
00:47:42,720 --> 00:47:45,000
all sorts of questions ask for help ask

1349
00:47:45,000 --> 00:47:46,859
for recommendations or even provide

1350
00:47:46,859 --> 00:47:48,839
suggestions and input to those that are

1351
00:47:48,839 --> 00:47:51,060
asking that questions it's a very fluid

1352
00:47:51,060 --> 00:47:52,260
Channel where everyone just kind of

1353
00:47:52,260 --> 00:47:53,900
helps in one another

1354
00:47:53,900 --> 00:47:56,760
but if you are actually developing we

1355
00:47:56,760 --> 00:47:58,200
have a development channel it's best

1356
00:47:58,200 --> 00:48:01,079
specific for just those purposes such

1357
00:48:01,079 --> 00:48:03,180
that the moderator team is a little more

1358
00:48:03,180 --> 00:48:04,859
active there to help pull requests get

1359
00:48:04,859 --> 00:48:07,319
across the line a little quicker so

1360
00:48:07,319 --> 00:48:08,880
that's probably the best place if you're

1361
00:48:08,880 --> 00:48:11,880
looking for Django or python help

1362
00:48:11,880 --> 00:48:13,440
um and then on the far right in the blue

1363
00:48:13,440 --> 00:48:15,900
QR code we've got the documentation

1364
00:48:15,900 --> 00:48:16,440
um

1365
00:48:16,440 --> 00:48:18,119
I keep that bookmarked you know I know

1366
00:48:18,119 --> 00:48:20,099
day fig Dojo pretty well but it's never

1367
00:48:20,099 --> 00:48:21,900
going to leave my bookmark bar it's it's

1368
00:48:21,900 --> 00:48:24,000
too valuable you know defect Dojo has a

1369
00:48:24,000 --> 00:48:25,920
really good documentation Suite highly

1370
00:48:25,920 --> 00:48:28,380
recommend you check it out

1371
00:48:28,380 --> 00:48:30,420
um got some social media here Twitter

1372
00:48:30,420 --> 00:48:32,819
and Linkedin those are mainly for

1373
00:48:32,819 --> 00:48:35,640
notifying uh subscribers to defect Dojo

1374
00:48:35,640 --> 00:48:38,099
updates each time we do an update we

1375
00:48:38,099 --> 00:48:39,960
have automation that goes through and

1376
00:48:39,960 --> 00:48:43,020
submits tweets or I don't think LinkedIn

1377
00:48:43,020 --> 00:48:46,020
has a cool way of saying posts but those

1378
00:48:46,020 --> 00:48:46,800
things

1379
00:48:46,800 --> 00:48:49,319
so go ahead and follow or like subscribe

1380
00:48:49,319 --> 00:48:50,819
whatever they call them in those

1381
00:48:50,819 --> 00:48:53,099
respective platforms

1382
00:48:53,099 --> 00:48:56,040
uh and finally some quick free takeaways

1383
00:48:56,040 --> 00:48:58,859
excuse me some takeaways uh defect Dojo

1384
00:48:58,859 --> 00:49:00,180
is totally free

1385
00:49:00,180 --> 00:49:02,940
um it's a risk-free forever trial you

1386
00:49:02,940 --> 00:49:04,319
know we're never going to block your

1387
00:49:04,319 --> 00:49:06,420
access or take it away we technically

1388
00:49:06,420 --> 00:49:07,560
can't

1389
00:49:07,560 --> 00:49:10,140
um so you know getting involved is a no

1390
00:49:10,140 --> 00:49:11,760
cost to you all the cost is your time

1391
00:49:11,760 --> 00:49:13,859
really which is not too bad for a

1392
00:49:13,859 --> 00:49:15,599
security tool

1393
00:49:15,599 --> 00:49:17,700
um Community is super involved you know

1394
00:49:17,700 --> 00:49:19,200
everybody loves to help one another

1395
00:49:19,200 --> 00:49:21,300
especially in the slack channels

1396
00:49:21,300 --> 00:49:23,940
um I'd love to pay it forward and take

1397
00:49:23,940 --> 00:49:26,400
advantage of it you know it's it's very

1398
00:49:26,400 --> 00:49:27,980
harmonious there

1399
00:49:27,980 --> 00:49:30,599
very quick release Cycles so if you find

1400
00:49:30,599 --> 00:49:32,940
something that maybe you you think could

1401
00:49:32,940 --> 00:49:34,380
need a little bit more love or maybe

1402
00:49:34,380 --> 00:49:36,480
something that's broken please go ahead

1403
00:49:36,480 --> 00:49:38,880
and just fix it you know it'll be out in

1404
00:49:38,880 --> 00:49:41,280
a month and your work will benefit from

1405
00:49:41,280 --> 00:49:44,099
it it's really neat we have new features

1406
00:49:44,099 --> 00:49:46,380
and contributors uh more features often

1407
00:49:46,380 --> 00:49:47,880
than contributors can your readers stick

1408
00:49:47,880 --> 00:49:49,440
around for a while but new features are

1409
00:49:49,440 --> 00:49:52,319
they come out very quickly largely in

1410
00:49:52,319 --> 00:49:54,440
responses to our fast release Cycles

1411
00:49:54,440 --> 00:49:57,359
the best thing about defect Dojo is it

1412
00:49:57,359 --> 00:49:58,920
really increases the security presence

1413
00:49:58,920 --> 00:50:01,319
and increases productivity within your

1414
00:50:01,319 --> 00:50:03,240
work you know you see it just talking

1415
00:50:03,240 --> 00:50:04,920
about the effect Dojo people think you

1416
00:50:04,920 --> 00:50:06,060
know what is that it's a really cool

1417
00:50:06,060 --> 00:50:08,040
name and then they start to learn a

1418
00:50:08,040 --> 00:50:09,720
little bit about security and how it's

1419
00:50:09,720 --> 00:50:11,400
kind of everywhere it really needs to be

1420
00:50:11,400 --> 00:50:12,960
everywhere

1421
00:50:12,960 --> 00:50:14,940
um and then lastly depict Dojo is a

1422
00:50:14,940 --> 00:50:16,260
really good place to get involved in the

1423
00:50:16,260 --> 00:50:17,760
open source world if you're just trying

1424
00:50:17,760 --> 00:50:20,460
to hone your developer skills or maybe

1425
00:50:20,460 --> 00:50:21,900
you don't get to do a lot of developing

1426
00:50:21,900 --> 00:50:23,520
at your security job this is a great

1427
00:50:23,520 --> 00:50:25,980
place to kind of live out the developer

1428
00:50:25,980 --> 00:50:27,660
fever dream

1429
00:50:27,660 --> 00:50:30,240
um it's really great so getting involved

1430
00:50:30,240 --> 00:50:32,760
not only is it good for your brain but

1431
00:50:32,760 --> 00:50:34,800
it's good for the community too

1432
00:50:34,800 --> 00:50:37,200
um okay that's all I got for you thank

1433
00:50:37,200 --> 00:50:38,400
you so much

1434
00:50:38,400 --> 00:50:39,420
um

1435
00:50:39,420 --> 00:50:41,960
thanks

1436
00:50:43,079 --> 00:50:46,220
great stuff Cody great talk

1437
00:50:46,220 --> 00:50:49,079
got a few questions if you don't mind

1438
00:50:49,079 --> 00:50:52,260
yeah totally okay so we've got a

1439
00:50:52,260 --> 00:50:53,819
question about actually going back to

1440
00:50:53,819 --> 00:50:55,920
you the important reimport towards the

1441
00:50:55,920 --> 00:50:57,960
beginning of your talk and an

1442
00:50:57,960 --> 00:51:01,319
interesting question here around uh the

1443
00:51:01,319 --> 00:51:02,700
differences between the two perhaps a

1444
00:51:02,700 --> 00:51:05,220
bit of clarification required around

1445
00:51:05,220 --> 00:51:07,800
um uh closing findings and whether you

1446
00:51:07,800 --> 00:51:09,900
can do them in in both whether you can

1447
00:51:09,900 --> 00:51:11,700
do them both re-import and import do you

1448
00:51:11,700 --> 00:51:14,819
want to just clarify clarify that for us

1449
00:51:14,819 --> 00:51:17,040
yeah I got a little quite choppy around

1450
00:51:17,040 --> 00:51:18,000
that area

1451
00:51:18,000 --> 00:51:19,500
um but the closed load finding feature

1452
00:51:19,500 --> 00:51:22,140
is available in both both endpoints um

1453
00:51:22,140 --> 00:51:23,940
so that's actually the magic behind the

1454
00:51:23,940 --> 00:51:25,859
re-import functionality is that close

1455
00:51:25,859 --> 00:51:27,240
all findings is what does the

1456
00:51:27,240 --> 00:51:29,520
differentiating and does the closing

1457
00:51:29,520 --> 00:51:31,200
um so when you go to re-import it's

1458
00:51:31,200 --> 00:51:33,180
actually enabled by default

1459
00:51:33,180 --> 00:51:35,579
um but the same functionality is also

1460
00:51:35,579 --> 00:51:37,859
president import it's just disabled by

1461
00:51:37,859 --> 00:51:39,240
default you just have to go in and click

1462
00:51:39,240 --> 00:51:41,579
a little box that says you want to do it

1463
00:51:41,579 --> 00:51:42,240
um

1464
00:51:42,240 --> 00:51:45,119
but you know as I touched on it is a

1465
00:51:45,119 --> 00:51:46,800
little dicey between the two just based

1466
00:51:46,800 --> 00:51:48,420
on what your configurations are so

1467
00:51:48,420 --> 00:51:49,859
definitely watch out for that because

1468
00:51:49,859 --> 00:51:51,780
it's bit me in the past probably others

1469
00:51:51,780 --> 00:51:53,900
too

1470
00:51:53,940 --> 00:51:56,760
okay so and you talked about tax earlier

1471
00:51:56,760 --> 00:51:58,380
on

1472
00:51:58,380 --> 00:52:00,359
um and I wonder whether tags can be used

1473
00:52:00,359 --> 00:52:02,940
to notify perhaps product owners

1474
00:52:02,940 --> 00:52:05,280
security teams developers when things

1475
00:52:05,280 --> 00:52:07,740
are updated new findings can you does it

1476
00:52:07,740 --> 00:52:09,359
have that level of granularity perhaps

1477
00:52:09,359 --> 00:52:11,400
or usability

1478
00:52:11,400 --> 00:52:15,119
oh really you know I I don't believe so

1479
00:52:15,119 --> 00:52:17,099
um but

1480
00:52:17,099 --> 00:52:19,020
because the effect ojo's got such a

1481
00:52:19,020 --> 00:52:20,940
great API you could probably query that

1482
00:52:20,940 --> 00:52:22,619
and just have a listener somewhere

1483
00:52:22,619 --> 00:52:24,420
that's just running on the same server

1484
00:52:24,420 --> 00:52:26,460
as dojo and query all the tags and say

1485
00:52:26,460 --> 00:52:28,200
you know look at the objects with this

1486
00:52:28,200 --> 00:52:31,319
tag and if it's present send out a

1487
00:52:31,319 --> 00:52:33,300
notification to your platform choosing

1488
00:52:33,300 --> 00:52:35,280
you know whether it's

1489
00:52:35,280 --> 00:52:36,780
um maybe attack for saying this

1490
00:52:36,780 --> 00:52:39,420
finding's been viewed with eyes or maybe

1491
00:52:39,420 --> 00:52:41,280
it's a risk acceptance or whatever the

1492
00:52:41,280 --> 00:52:42,780
the case may be whatever your use of

1493
00:52:42,780 --> 00:52:44,460
usage is

1494
00:52:44,460 --> 00:52:46,380
um you could have listeners outside of

1495
00:52:46,380 --> 00:52:48,599
Dojo that can handle that for you but it

1496
00:52:48,599 --> 00:52:51,180
is not out of the box

1497
00:52:51,180 --> 00:52:52,380
okay

1498
00:52:52,380 --> 00:52:55,619
can you also could defect Dojo also

1499
00:52:55,619 --> 00:52:59,280
track remediation activities as well to

1500
00:52:59,280 --> 00:53:01,380
um to see how applications are being

1501
00:53:01,380 --> 00:53:03,300
been fixed to it throughout throughout

1502
00:53:03,300 --> 00:53:05,819
its life cycle

1503
00:53:05,819 --> 00:53:07,559
yeah absolutely

1504
00:53:07,559 --> 00:53:10,020
um so we talk about I guess remediation

1505
00:53:10,020 --> 00:53:12,420
mitigation to me usually means it's like

1506
00:53:12,420 --> 00:53:14,280
completely fixed but remediation could

1507
00:53:14,280 --> 00:53:17,460
be either fixed or maybe risk accepted

1508
00:53:17,460 --> 00:53:19,920
um de facto has a really strong risk

1509
00:53:19,920 --> 00:53:21,480
acceptance Suite

1510
00:53:21,480 --> 00:53:23,339
um it's got a whole bunch of information

1511
00:53:23,339 --> 00:53:25,440
that you can kind of dump into it such

1512
00:53:25,440 --> 00:53:27,599
as like who approved it let's see a

1513
00:53:27,599 --> 00:53:29,339
document with signatures on it or the

1514
00:53:29,339 --> 00:53:30,480
reasoning for making it a risk

1515
00:53:30,480 --> 00:53:33,000
acceptance and so all of that is is

1516
00:53:33,000 --> 00:53:35,460
tracks very blatantly and de facto if

1517
00:53:35,460 --> 00:53:38,099
you choose to use it but in terms of

1518
00:53:38,099 --> 00:53:39,780
actually doing the mitigation that is

1519
00:53:39,780 --> 00:53:41,700
the status on all the findings so you

1520
00:53:41,700 --> 00:53:43,640
know whether something is mitigated

1521
00:53:43,640 --> 00:53:45,839
implicitly through re-import where it

1522
00:53:45,839 --> 00:53:47,760
just kind of figures it out for you or

1523
00:53:47,760 --> 00:53:49,920
you go in and Market by yourself and say

1524
00:53:49,920 --> 00:53:52,079
you know this is mitigated uh it'll show

1525
00:53:52,079 --> 00:53:54,480
up in the metrics and reports and within

1526
00:53:54,480 --> 00:53:56,220
the UI saying such that you know this

1527
00:53:56,220 --> 00:53:57,660
finding is mitigated you don't have to

1528
00:53:57,660 --> 00:53:59,460
worry about it anymore

1529
00:53:59,460 --> 00:54:01,380
yeah great stuff yes key difference

1530
00:54:01,380 --> 00:54:03,000
there between the two

1531
00:54:03,000 --> 00:54:05,400
um many organizations many people

1532
00:54:05,400 --> 00:54:08,160
watching this will have similar tools

1533
00:54:08,160 --> 00:54:09,780
perhaps for their for their own tools

1534
00:54:09,780 --> 00:54:11,400
whether that's a the dashboard of check

1535
00:54:11,400 --> 00:54:14,819
marks or a sus tool or or whatever

1536
00:54:14,819 --> 00:54:17,579
do you see defect Dojo as as literally

1537
00:54:17,579 --> 00:54:20,760
replacing those those dashboards being a

1538
00:54:20,760 --> 00:54:23,099
single pane of glass or can they or is

1539
00:54:23,099 --> 00:54:25,680
it complementary uh you know how do you

1540
00:54:25,680 --> 00:54:29,279
how do you see them cohabiting

1541
00:54:29,480 --> 00:54:32,220
uh it's intended to be kind of a single

1542
00:54:32,220 --> 00:54:34,020
pane of glass where you just kind of

1543
00:54:34,020 --> 00:54:36,480
have everything feed into defect Dojo

1544
00:54:36,480 --> 00:54:38,819
but there are examples of kind of using

1545
00:54:38,819 --> 00:54:40,140
both in parity

1546
00:54:40,140 --> 00:54:42,059
um so there's actually three scanners

1547
00:54:42,059 --> 00:54:44,040
that have any guide driven integration

1548
00:54:44,040 --> 00:54:45,720
such that you're not just downloading a

1549
00:54:45,720 --> 00:54:47,640
report and pushing it into Dojo but it

1550
00:54:47,640 --> 00:54:49,500
reaches out to the tools apis and polls

1551
00:54:49,500 --> 00:54:53,520
directly those are Center Cube Cobalt IO

1552
00:54:53,520 --> 00:54:55,680
and I believe Edge scan

1553
00:54:55,680 --> 00:54:58,559
um but they they kind of have the the

1554
00:54:58,559 --> 00:55:00,180
two different system kind of vibe to

1555
00:55:00,180 --> 00:55:01,859
them you know Center Cube has a lot of

1556
00:55:01,859 --> 00:55:04,260
really good information within within

1557
00:55:04,260 --> 00:55:05,819
their platform and setting up different

1558
00:55:05,819 --> 00:55:08,280
uh quality rules and something about

1559
00:55:08,280 --> 00:55:10,980
Gates memory serves I haven't used in a

1560
00:55:10,980 --> 00:55:11,940
couple years

1561
00:55:11,940 --> 00:55:14,579
um but all the great things within

1562
00:55:14,579 --> 00:55:16,079
Center Cube can't be reflect it was in

1563
00:55:16,079 --> 00:55:19,020
defect Dojo that well and so it is kind

1564
00:55:19,020 --> 00:55:20,579
of important to have a double platform

1565
00:55:20,579 --> 00:55:22,680
but you know it's only happened on three

1566
00:55:22,680 --> 00:55:24,660
three different security tools out of

1567
00:55:24,660 --> 00:55:27,300
150. so General trend is want to have

1568
00:55:27,300 --> 00:55:29,040
everything unified in defect Dojo but

1569
00:55:29,040 --> 00:55:31,380
there are some exceptions

1570
00:55:31,380 --> 00:55:33,119
okay and you touched on this towards the

1571
00:55:33,119 --> 00:55:35,339
end of your talk about the the um the

1572
00:55:35,339 --> 00:55:37,319
maintenance cycle release Cycles just

1573
00:55:37,319 --> 00:55:39,660
confirming again how often because you

1574
00:55:39,660 --> 00:55:41,099
know people often think about open

1575
00:55:41,099 --> 00:55:42,839
source projects how often has it been

1576
00:55:42,839 --> 00:55:44,460
supported and made this can be a key

1577
00:55:44,460 --> 00:55:46,380
concern so you just want to reiterate

1578
00:55:46,380 --> 00:55:48,480
you know how often um do you think Dojo

1579
00:55:48,480 --> 00:55:52,800
is updated uh new releases for example

1580
00:55:52,800 --> 00:55:54,240
yeah

1581
00:55:54,240 --> 00:55:55,980
um so releases are the first Tuesday of

1582
00:55:55,980 --> 00:55:57,059
every month

1583
00:55:57,059 --> 00:55:59,760
um so you know for the month of June for

1584
00:55:59,760 --> 00:56:01,859
example we didn't release until June 7th

1585
00:56:01,859 --> 00:56:03,480
so it really just depends on when the

1586
00:56:03,480 --> 00:56:06,000
days fall so for example if July maybe

1587
00:56:06,000 --> 00:56:08,460
the July 1st to Tuesday yeah that's a

1588
00:56:08,460 --> 00:56:10,980
release cycle of there's that 24 days

1589
00:56:10,980 --> 00:56:13,319
very short but it could be as long as

1590
00:56:13,319 --> 00:56:15,359
like 36 days to it really just depends

1591
00:56:15,359 --> 00:56:17,540
on when the two different Tuesdays fall

1592
00:56:17,540 --> 00:56:19,740
but on average it's right at about a

1593
00:56:19,740 --> 00:56:20,640
month

1594
00:56:20,640 --> 00:56:23,760
um so very quick

1595
00:56:23,760 --> 00:56:26,280
great stuff okay just checking if we

1596
00:56:26,280 --> 00:56:28,559
have any more questions coming in

1597
00:56:28,559 --> 00:56:29,880
um

1598
00:56:29,880 --> 00:56:33,559
not at the moment

1599
00:56:33,839 --> 00:56:36,980
let me just double check

1600
00:56:38,400 --> 00:56:41,400
I think we seem to have uh we're coming

1601
00:56:41,400 --> 00:56:42,420
up towards the top of the hour anyway

1602
00:56:42,420 --> 00:56:44,579
Cody but I think we we're all out of

1603
00:56:44,579 --> 00:56:46,760
questions

1604
00:56:46,859 --> 00:56:49,380
so the house is just uh just my job now

1605
00:56:49,380 --> 00:56:53,160
to to thank you once again for your talk

1606
00:56:53,160 --> 00:56:55,619
um oh there's a question come in very

1607
00:56:55,619 --> 00:56:57,780
quickly last last one perhaps

1608
00:56:57,780 --> 00:56:59,880
um what is the most unique use you've

1609
00:56:59,880 --> 00:57:02,579
seen for defect Dojo that's a bit of a

1610
00:57:02,579 --> 00:57:04,319
curveball there for you

1611
00:57:04,319 --> 00:57:06,599
oh

1612
00:57:06,599 --> 00:57:08,280
I think the most unique use that I've

1613
00:57:08,280 --> 00:57:10,920
seen is where an orc had a lot of

1614
00:57:10,920 --> 00:57:12,780
microservices and this is kind of what

1615
00:57:12,780 --> 00:57:15,180
prompted the whole microservices kind of

1616
00:57:15,180 --> 00:57:17,339
not necessarily A migration but a real

1617
00:57:17,339 --> 00:57:18,839
thought exercise and how do we solve

1618
00:57:18,839 --> 00:57:20,099
this problem

1619
00:57:20,099 --> 00:57:22,440
um but what what this team ended up

1620
00:57:22,440 --> 00:57:24,839
doing was they had products

1621
00:57:24,839 --> 00:57:27,420
um it didn't necessarily represent

1622
00:57:27,420 --> 00:57:30,000
anything really it was a full

1623
00:57:30,000 --> 00:57:31,740
application but there were so many

1624
00:57:31,740 --> 00:57:33,540
components that made up that the

1625
00:57:33,540 --> 00:57:35,099
engagement kind of became a pseudo

1626
00:57:35,099 --> 00:57:37,920
product and so the engagement became a

1627
00:57:37,920 --> 00:57:40,440
specific endpoint that they were testing

1628
00:57:40,440 --> 00:57:42,240
um and so generally that's more of a

1629
00:57:42,240 --> 00:57:43,920
product thing but they pushed it down to

1630
00:57:43,920 --> 00:57:46,619
engagements and so then they had a whole

1631
00:57:46,619 --> 00:57:48,000
bunch of different tests in different

1632
00:57:48,000 --> 00:57:50,339
places and it pretty much slid the

1633
00:57:50,339 --> 00:57:53,280
entire model down a step and then they

1634
00:57:53,280 --> 00:57:55,200
relied on tags very heavily for filling

1635
00:57:55,200 --> 00:57:56,880
out all of the metadata that they needed

1636
00:57:56,880 --> 00:57:58,500
on a given find meeting or at that point

1637
00:57:58,500 --> 00:58:01,200
it was really creative how they they had

1638
00:58:01,200 --> 00:58:03,480
this issue and just took a way to solve

1639
00:58:03,480 --> 00:58:05,700
it with the defect Dojo model because it

1640
00:58:05,700 --> 00:58:07,440
is sort of rigid

1641
00:58:07,440 --> 00:58:09,300
um but yeah I was really impressed by

1642
00:58:09,300 --> 00:58:11,160
them

1643
00:58:11,160 --> 00:58:12,960
actually and also shows the the powers

1644
00:58:12,960 --> 00:58:15,240
attacked as well as part of that

1645
00:58:15,240 --> 00:58:17,480
yeah it's all about creativity right

1646
00:58:17,480 --> 00:58:20,579
absolutely great stuff well I think that

1647
00:58:20,579 --> 00:58:22,980
probably is uh the last song that we've

1648
00:58:22,980 --> 00:58:25,200
got time for today so yes once again

1649
00:58:25,200 --> 00:58:27,000
Cody thanks again for your time thanks

1650
00:58:27,000 --> 00:58:29,160
again your presentation uh thanks

1651
00:58:29,160 --> 00:58:31,680
everyone for for viewing this video and

1652
00:58:31,680 --> 00:58:34,020
uh if you're interested we now have the

1653
00:58:34,020 --> 00:58:36,420
the keynote over the keynote stage

1654
00:58:36,420 --> 00:58:39,359
talking about OS top 10 and whether

1655
00:58:39,359 --> 00:58:41,520
cloud has made any difference over the

1656
00:58:41,520 --> 00:58:43,380
last 15 years so I'll encourage you to

1657
00:58:43,380 --> 00:58:45,540
take a look at that thanks again

1658
00:58:45,540 --> 00:58:47,839
everyone

