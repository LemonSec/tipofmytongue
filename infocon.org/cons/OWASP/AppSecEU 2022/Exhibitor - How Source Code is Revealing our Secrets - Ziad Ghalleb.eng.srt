1
00:00:03,899 --> 00:00:06,600
okay everyone uh welcome to the

2
00:00:06,600 --> 00:00:08,880
exhibitor track I'm Johnny level a

3
00:00:08,880 --> 00:00:11,400
volunteer in the WASP community and I

4
00:00:11,400 --> 00:00:13,259
will be moderating this session during

5
00:00:13,259 --> 00:00:15,240
the next 45 minutes you will be

6
00:00:15,240 --> 00:00:17,960
listening to the argyleb I will present

7
00:00:17,960 --> 00:00:20,880
score is reveling our secrets oh

8
00:00:20,880 --> 00:00:23,039
attackers find and use public credential

9
00:00:23,039 --> 00:00:26,400
to bridge our apps please submit any

10
00:00:26,400 --> 00:00:28,500
question you have during the session in

11
00:00:28,500 --> 00:00:31,080
the Q a tab just to the right of this

12
00:00:31,080 --> 00:00:34,860
video in the wua platform I will I will

13
00:00:34,860 --> 00:00:37,140
be asking the audio question in the last

14
00:00:37,140 --> 00:00:39,300
10 minutes of this session

15
00:00:39,300 --> 00:00:41,640
please note that the chat function in

16
00:00:41,640 --> 00:00:44,340
Zoom is disabled for attendees but you

17
00:00:44,340 --> 00:00:46,079
can leave comments and chat using the

18
00:00:46,079 --> 00:00:47,640
chat tab in Hoover

19
00:00:47,640 --> 00:00:50,820
the ad is a product marketing manager at

20
00:00:50,820 --> 00:00:53,760
Guardian a global cyber security startup

21
00:00:53,760 --> 00:00:56,640
based in Paris France so you will excuse

22
00:00:56,640 --> 00:00:59,219
my French accent as well

23
00:00:59,219 --> 00:01:01,620
he has an engineering background he is a

24
00:01:01,620 --> 00:01:03,660
security Enthusiast and Rose upon his

25
00:01:03,660 --> 00:01:05,519
experience as a solution engineer and

26
00:01:05,519 --> 00:01:06,840
consultant

27
00:01:06,840 --> 00:01:09,180
for engineering teams to Advocate better

28
00:01:09,180 --> 00:01:11,100
developer experience in application

29
00:01:11,100 --> 00:01:12,260
security

30
00:01:12,260 --> 00:01:14,939
developers as always part of the circle

31
00:01:14,939 --> 00:01:18,180
Solution by the rule yet the floor is

32
00:01:18,180 --> 00:01:21,840
yours I'm turning off my camera

33
00:01:21,840 --> 00:01:24,479
thank you jean-diny and thank you

34
00:01:24,479 --> 00:01:26,400
everyone for tuning in I'm very happy to

35
00:01:26,400 --> 00:01:28,500
be here with you today and I will be

36
00:01:28,500 --> 00:01:30,299
talking about how source code is

37
00:01:30,299 --> 00:01:33,479
revealing our secrets topic that is very

38
00:01:33,479 --> 00:01:37,939
uh dear to me so let's get started

39
00:01:38,040 --> 00:01:41,340
first let's define what are secrets

40
00:01:41,340 --> 00:01:43,619
um secrets in software development are

41
00:01:43,619 --> 00:01:46,259
digital authentication credentials used

42
00:01:46,259 --> 00:01:48,240
to authenticate different components

43
00:01:48,240 --> 00:01:49,680
against each other

44
00:01:49,680 --> 00:01:52,380
so here we're talking about your front

45
00:01:52,380 --> 00:01:54,360
end communicating with your your back

46
00:01:54,360 --> 00:01:57,600
end your back end uh talking to your

47
00:01:57,600 --> 00:02:00,840
database your back end also talking to

48
00:02:00,840 --> 00:02:04,799
multiple uh Services apis Etc so these

49
00:02:04,799 --> 00:02:07,140
components need to uh authenticate

50
00:02:07,140 --> 00:02:09,538
against each other to secure the

51
00:02:09,538 --> 00:02:11,220
connection that they have between each

52
00:02:11,220 --> 00:02:12,360
other

53
00:02:12,360 --> 00:02:15,360
now some of let's give some examples of

54
00:02:15,360 --> 00:02:18,120
secrets to to illustrate uh this notion

55
00:02:18,120 --> 00:02:21,060
usually Secrets refer to API Keys

56
00:02:21,060 --> 00:02:23,580
username and password pairs SSH Keys

57
00:02:23,580 --> 00:02:26,360
database URLs

58
00:02:26,360 --> 00:02:30,540
JWT tokens etc etc but we should also

59
00:02:30,540 --> 00:02:33,239
consider sensitive files such as Dot and

60
00:02:33,239 --> 00:02:34,440
files

61
00:02:34,440 --> 00:02:37,140
um in in your directories or

62
00:02:37,140 --> 00:02:40,500
certificates as as secrets and as you

63
00:02:40,500 --> 00:02:42,480
can see here in this example we have a

64
00:02:42,480 --> 00:02:46,620
hard-coded AWS key and of course this is

65
00:02:46,620 --> 00:02:50,160
a dummy key so don't try pinging the AWS

66
00:02:50,160 --> 00:02:52,860
server but we'll talk in this uh

67
00:02:52,860 --> 00:02:55,400
conference in this conference about how

68
00:02:55,400 --> 00:02:58,319
these Keys should not be hard-coded uh

69
00:02:58,319 --> 00:03:00,599
in in well git repositories and how they

70
00:03:00,599 --> 00:03:02,160
end up exposed

71
00:03:02,160 --> 00:03:04,340
but before we get there let's understand

72
00:03:04,340 --> 00:03:09,060
how the use of keys is today ubiquitous

73
00:03:09,060 --> 00:03:11,519
so the way modern applications are built

74
00:03:11,519 --> 00:03:13,980
today is very different from what we

75
00:03:13,980 --> 00:03:17,819
used to do two decades or one decade ago

76
00:03:17,819 --> 00:03:19,560
developers are taking off-the-shelf

77
00:03:19,560 --> 00:03:21,480
components they're taking third-party

78
00:03:21,480 --> 00:03:24,360
apis they're building micro services and

79
00:03:24,360 --> 00:03:26,040
they're connecting all of these

80
00:03:26,040 --> 00:03:27,480
different components between each other

81
00:03:27,480 --> 00:03:30,540
to build the software and

82
00:03:30,540 --> 00:03:33,840
to illustrate this we have a real life

83
00:03:33,840 --> 00:03:36,080
example from Uber's engineering

84
00:03:36,080 --> 00:03:39,620
environment here where Circa mid 2018

85
00:03:39,620 --> 00:03:42,239
Uber tried to map its different

86
00:03:42,239 --> 00:03:44,819
microservices and components and found

87
00:03:44,819 --> 00:03:48,120
out that it had more than 2 000 and 200

88
00:03:48,120 --> 00:03:50,099
critical micro services in its

89
00:03:50,099 --> 00:03:53,099
engineering ecosystem so all of these

90
00:03:53,099 --> 00:03:55,140
different components talk to each other

91
00:03:55,140 --> 00:03:57,840
and authenticate against each other with

92
00:03:57,840 --> 00:04:01,980
the help of Secrets now sometimes

93
00:04:01,980 --> 00:04:04,200
the secrets will be

94
00:04:04,200 --> 00:04:06,620
in places where they shouldn't really be

95
00:04:06,620 --> 00:04:09,720
and this is what we're going to address

96
00:04:09,720 --> 00:04:11,340
during during the talk

97
00:04:11,340 --> 00:04:13,319
so

98
00:04:13,319 --> 00:04:15,420
when the secrets end up exposed they

99
00:04:15,420 --> 00:04:17,699
will be used by attackers for malicious

100
00:04:17,699 --> 00:04:21,060
use of course and one such example of an

101
00:04:21,060 --> 00:04:23,759
attack using exposed Secrets is the

102
00:04:23,759 --> 00:04:26,040
famous supply chain attack that happened

103
00:04:26,040 --> 00:04:29,759
to codecov back in March 2021 so this

104
00:04:29,759 --> 00:04:31,500
breach was done by very sophisticated

105
00:04:31,500 --> 00:04:33,780
attackers who exploited a mistake and

106
00:04:33,780 --> 00:04:36,300
how code calls built its own Docker

107
00:04:36,300 --> 00:04:37,139
images

108
00:04:37,139 --> 00:04:39,960
they use this to modify a script which

109
00:04:39,960 --> 00:04:41,759
allowed them to send environment

110
00:04:41,759 --> 00:04:44,940
variables from CI environments so where

111
00:04:44,940 --> 00:04:48,240
code curve was used by its customers to

112
00:04:48,240 --> 00:04:51,240
a remote server the attacker server so

113
00:04:51,240 --> 00:04:53,160
the attackers could have conducted

114
00:04:53,160 --> 00:04:55,500
multiple attacks from there and we can

115
00:04:55,500 --> 00:04:57,120
see based on some of the disclosures

116
00:04:57,120 --> 00:05:00,720
that they exploited many companies out

117
00:05:00,720 --> 00:05:01,480
there

118
00:05:01,480 --> 00:05:03,000
[Music]

119
00:05:03,000 --> 00:05:06,120
it's the total number is put at 20 000

120
00:05:06,120 --> 00:05:08,100
customers today

121
00:05:08,100 --> 00:05:10,139
now this shows the importance of keeping

122
00:05:10,139 --> 00:05:12,540
git repositories clean and Docker images

123
00:05:12,540 --> 00:05:14,820
clean from secrets and ensuring that

124
00:05:14,820 --> 00:05:17,820
production credentials do not end up in

125
00:05:17,820 --> 00:05:20,960
such areas

126
00:05:23,100 --> 00:05:25,380
another example is the recent source

127
00:05:25,380 --> 00:05:27,300
code leak from twitch back in October

128
00:05:27,300 --> 00:05:32,280
2021 so get Guardian analyzed uh the git

129
00:05:32,280 --> 00:05:33,720
repositories that leaked and we're

130
00:05:33,720 --> 00:05:36,960
talking about 6 000 git repositories and

131
00:05:36,960 --> 00:05:39,600
about 3 million documents and we found

132
00:05:39,600 --> 00:05:42,300
that we found more than 6 000 exposed

133
00:05:42,300 --> 00:05:43,860
secrets well

134
00:05:43,860 --> 00:05:45,720
we don't know if all of these secrets

135
00:05:45,720 --> 00:05:48,000
were valid because we did not try and

136
00:05:48,000 --> 00:05:50,160
testing them for validity because we

137
00:05:50,160 --> 00:05:51,300
don't want to interfere with any

138
00:05:51,300 --> 00:05:53,940
investigation but what we saw is that in

139
00:05:53,940 --> 00:05:55,800
these git repositories there were there

140
00:05:55,800 --> 00:05:57,419
were many interesting secrets that

141
00:05:57,419 --> 00:05:59,160
should really not be there and that

142
00:05:59,160 --> 00:06:01,199
could be leveraged by attackers very

143
00:06:01,199 --> 00:06:04,919
easily so we found AWS keys twilio keys

144
00:06:04,919 --> 00:06:08,220
GitHub oauth Keys some Google Cloud Keys

145
00:06:08,220 --> 00:06:11,759
stripe keys and many many others you can

146
00:06:11,759 --> 00:06:13,440
read more on the guardian blog on on

147
00:06:13,440 --> 00:06:18,000
this uh source code leak now what we did

148
00:06:18,000 --> 00:06:20,880
at get Guardian is produce this annual

149
00:06:20,880 --> 00:06:23,460
research on the state of Secrets problem

150
00:06:23,460 --> 00:06:26,639
which takes a look at the leakage of

151
00:06:26,639 --> 00:06:29,160
credential in public spaces the first

152
00:06:29,160 --> 00:06:33,060
year in 2021 we looked at public GitHub

153
00:06:33,060 --> 00:06:36,060
and now this year in 2022 we looked at

154
00:06:36,060 --> 00:06:38,520
public GitHub Docker Hub but also

155
00:06:38,520 --> 00:06:41,340
private git repositories and I will be

156
00:06:41,340 --> 00:06:42,720
sharing with you now some of the

157
00:06:42,720 --> 00:06:45,979
findings of this report

158
00:06:46,259 --> 00:06:48,180
but before we get there let's take a

159
00:06:48,180 --> 00:06:50,460
look at the methodology we've followed

160
00:06:50,460 --> 00:06:52,680
this year so

161
00:06:52,680 --> 00:06:55,319
how did we look for those secrets in

162
00:06:55,319 --> 00:06:57,960
public git repositories and Docker Hub

163
00:06:57,960 --> 00:07:00,840
Docker images first we have two

164
00:07:00,840 --> 00:07:02,699
different types of detectors specific

165
00:07:02,699 --> 00:07:05,520
detectors which look for uh specific

166
00:07:05,520 --> 00:07:08,460
types of credentials so these can be AWS

167
00:07:08,460 --> 00:07:11,340
Keys stripe Keys basically anything that

168
00:07:11,340 --> 00:07:14,520
can be tied to a known service and then

169
00:07:14,520 --> 00:07:17,220
there are generic detectors which are uh

170
00:07:17,220 --> 00:07:19,380
perform High entropy checks to find

171
00:07:19,380 --> 00:07:21,599
generic secrets in code these can be

172
00:07:21,599 --> 00:07:24,240
private Keys certificates or anything

173
00:07:24,240 --> 00:07:27,240
that cannot be directly tied to an

174
00:07:27,240 --> 00:07:28,460
external service

175
00:07:28,460 --> 00:07:31,800
and we also perform some sorts of

176
00:07:31,800 --> 00:07:33,660
validity checks which are non-intrusive

177
00:07:33,660 --> 00:07:36,240
API calls to verify the validity of

178
00:07:36,240 --> 00:07:38,880
these secrets before considering them as

179
00:07:38,880 --> 00:07:41,639
a true positive or not

180
00:07:41,639 --> 00:07:45,240
now let's look at the where so we

181
00:07:45,240 --> 00:07:47,639
scanned every public GitHub commit in

182
00:07:47,639 --> 00:07:49,919
2021 every single public GitHub commit

183
00:07:49,919 --> 00:07:52,080
that's more than a billion commits

184
00:07:52,080 --> 00:07:55,139
on Docker Hub however we took a random

185
00:07:55,139 --> 00:07:58,440
sample of 10 000 images Docker habis has

186
00:07:58,440 --> 00:08:00,960
8 million images and we just took a

187
00:08:00,960 --> 00:08:03,000
sample here to see what the state of

188
00:08:03,000 --> 00:08:04,940
Secrets sprawl was like in Docker images

189
00:08:04,940 --> 00:08:07,979
and lastly we take a look at internal

190
00:08:07,979 --> 00:08:10,220
repositories so these are the different

191
00:08:10,220 --> 00:08:14,099
vcs's used by users of git Guardian

192
00:08:14,099 --> 00:08:16,500
internal monitoring and of course we did

193
00:08:16,500 --> 00:08:18,360
not share any sensitive data but it's

194
00:08:18,360 --> 00:08:21,180
aggregate statistics and and total

195
00:08:21,180 --> 00:08:23,780
numbers here

196
00:08:23,780 --> 00:08:27,240
now let's take a look at the results

197
00:08:27,240 --> 00:08:30,599
so the results were staggering and uh

198
00:08:30,599 --> 00:08:32,520
this year was worse than the previous

199
00:08:32,520 --> 00:08:34,979
one so it's not getting better for the

200
00:08:34,979 --> 00:08:37,679
secrets really uh get Guardian detected

201
00:08:37,679 --> 00:08:41,039
in total over 6 million Secrets uh on

202
00:08:41,039 --> 00:08:43,860
public GitHub repositories and that's a

203
00:08:43,860 --> 00:08:45,779
two-fold increase versus the previous

204
00:08:45,779 --> 00:08:47,760
year now we're taking a look at the same

205
00:08:47,760 --> 00:08:50,040
perimeter because uh from one year to

206
00:08:50,040 --> 00:08:52,440
the next of course we add more and build

207
00:08:52,440 --> 00:08:55,080
more detectors so looking at the same

208
00:08:55,080 --> 00:08:57,839
perimeter it was a two-fold increase but

209
00:08:57,839 --> 00:08:59,880
looking at the new perimeter with the

210
00:08:59,880 --> 00:09:02,040
new detectors it was actually uh three

211
00:09:02,040 --> 00:09:04,320
times increase

212
00:09:04,320 --> 00:09:08,760
now on average every thousand commit we

213
00:09:08,760 --> 00:09:10,680
looked at we found three commits that

214
00:09:10,680 --> 00:09:13,080
exposed at least one secret and that's a

215
00:09:13,080 --> 00:09:14,880
50 increase compared to the previous

216
00:09:14,880 --> 00:09:18,060
year now the numbers are are big but

217
00:09:18,060 --> 00:09:20,040
let's also put things into perspective

218
00:09:20,040 --> 00:09:22,019
GitHub is is huge it's the largest

219
00:09:22,019 --> 00:09:23,880
community of developers out there so

220
00:09:23,880 --> 00:09:26,640
there are more than 60 million GitHub

221
00:09:26,640 --> 00:09:28,860
users and there are more and more

222
00:09:28,860 --> 00:09:32,220
repositories created last year and there

223
00:09:32,220 --> 00:09:33,839
are newcomers to the development world

224
00:09:33,839 --> 00:09:37,200
who uh do not necessarily know all the

225
00:09:37,200 --> 00:09:39,480
risks of poor Secrets management and

226
00:09:39,480 --> 00:09:41,700
what could happen to them if they expose

227
00:09:41,700 --> 00:09:44,120
these secrets in public so that also

228
00:09:44,120 --> 00:09:47,459
explains why we found so many Secrets uh

229
00:09:47,459 --> 00:09:51,140
this year compared to the previous one

230
00:09:51,600 --> 00:09:56,760
now the types of Secrets we found were

231
00:09:56,760 --> 00:09:59,279
different so there are many categories

232
00:09:59,279 --> 00:10:01,860
here we can see and one interesting

233
00:10:01,860 --> 00:10:04,200
Insight is that generic Secrets which

234
00:10:04,200 --> 00:10:06,779
are private Keys certificates Etc they

235
00:10:06,779 --> 00:10:09,360
make up more than 40 of the total

236
00:10:09,360 --> 00:10:12,000
whereas specific Secrets make up the

237
00:10:12,000 --> 00:10:15,180
rest so 60 and if we look at that

238
00:10:15,180 --> 00:10:17,640
specific Secrets category we see that

239
00:10:17,640 --> 00:10:20,459
data storage ranks first so these are

240
00:10:20,459 --> 00:10:23,160
database credentials we found Cloud

241
00:10:23,160 --> 00:10:26,240
providers so AWS Google Cloud Keys

242
00:10:26,240 --> 00:10:29,640
Alibaba Keys those came in second and

243
00:10:29,640 --> 00:10:32,580
lastly developer tools used to build and

244
00:10:32,580 --> 00:10:34,800
test the software came in the third

245
00:10:34,800 --> 00:10:37,040
position

246
00:10:40,680 --> 00:10:43,920
if we focus on cloud services providers

247
00:10:43,920 --> 00:10:47,640
leaked keys we can infer some some

248
00:10:47,640 --> 00:10:50,040
interesting uh insights from from the

249
00:10:50,040 --> 00:10:52,860
data we found so here in this graph we

250
00:10:52,860 --> 00:10:55,680
look at the number of detected secrets

251
00:10:55,680 --> 00:10:58,800
for these Cloud providers in every 10

252
00:10:58,800 --> 00:11:02,100
000 public GitHub commits and as you can

253
00:11:02,100 --> 00:11:04,800
see from the from the chart the AWS IM

254
00:11:04,800 --> 00:11:08,279
keys are the majority of uh secrets we

255
00:11:08,279 --> 00:11:10,980
found for cloud providers so for every

256
00:11:10,980 --> 00:11:14,220
10 000 commit scan there are 84 AWS keys

257
00:11:14,220 --> 00:11:17,820
in public GitHub and if we consider all

258
00:11:17,820 --> 00:11:20,579
other things being equal this also shows

259
00:11:20,579 --> 00:11:24,120
us that AWS is dominating its its market

260
00:11:24,120 --> 00:11:27,740
and we can infer this

261
00:11:28,279 --> 00:11:31,260
now we can also learn lots of other

262
00:11:31,260 --> 00:11:32,940
interesting insights from publicly

263
00:11:32,940 --> 00:11:35,820
exposed secrets so here for example we

264
00:11:35,820 --> 00:11:38,579
found out that leaked Secrets correlate

265
00:11:38,579 --> 00:11:41,100
to the popularity and growth in the

266
00:11:41,100 --> 00:11:43,500
adoption of certain new products and

267
00:11:43,500 --> 00:11:46,019
developer tools so we released two

268
00:11:46,019 --> 00:11:48,180
detectors which are for the planet scale

269
00:11:48,180 --> 00:11:51,420
database as a service provider and uh

270
00:11:51,420 --> 00:11:54,180
Super Bass which is a back-end as a

271
00:11:54,180 --> 00:11:56,760
service provider and you can see the

272
00:11:56,760 --> 00:11:59,880
growth in the in the bars here and

273
00:11:59,880 --> 00:12:01,920
which means that more developers are

274
00:12:01,920 --> 00:12:03,500
leaking the secrets from these services

275
00:12:03,500 --> 00:12:06,120
and more developed more developers are

276
00:12:06,120 --> 00:12:08,100
actually signing up and using these

277
00:12:08,100 --> 00:12:10,339
services

278
00:12:12,839 --> 00:12:15,959
now it's it's not just the code where we

279
00:12:15,959 --> 00:12:19,260
found secrets and uh I kid you not this

280
00:12:19,260 --> 00:12:22,260
is really true that we found commit

281
00:12:22,260 --> 00:12:24,180
messages commit messages themselves

282
00:12:24,180 --> 00:12:26,700
containing secrets and most of the time

283
00:12:26,700 --> 00:12:29,459
these secrets were uh GitHub personal

284
00:12:29,459 --> 00:12:31,500
tokens

285
00:12:31,500 --> 00:12:34,680
so in total we found more than 500

286
00:12:34,680 --> 00:12:36,959
commit messages containing these

287
00:12:36,959 --> 00:12:39,899
personal access tokens and this is a

288
00:12:39,899 --> 00:12:43,680
very risky secret to expose because then

289
00:12:43,680 --> 00:12:47,519
your GitHub account can be used to clone

290
00:12:47,519 --> 00:12:50,880
your repositories or to insert malicious

291
00:12:50,880 --> 00:12:54,500
pull requests etc etc

292
00:12:55,680 --> 00:12:56,940
now

293
00:12:56,940 --> 00:12:59,339
some days when it comes to League

294
00:12:59,339 --> 00:13:03,240
secrets are clearly worse than others so

295
00:13:03,240 --> 00:13:06,660
we found that leaks mostly happen on on

296
00:13:06,660 --> 00:13:09,420
weekends we can see here that Saturday

297
00:13:09,420 --> 00:13:13,200
and Sunday on average have a two to four

298
00:13:13,200 --> 00:13:16,320
percent increase compared to the average

299
00:13:16,320 --> 00:13:19,320
the rest of the week and well developers

300
00:13:19,320 --> 00:13:21,660
on on Monday morning they maybe it's the

301
00:13:21,660 --> 00:13:23,880
the coffee I don't know but it helps

302
00:13:23,880 --> 00:13:26,040
because they're leaking less Secrets at

303
00:13:26,040 --> 00:13:27,839
least from what we can see

304
00:13:27,839 --> 00:13:30,839
uh the worst day in 2021 was Saturday

305
00:13:30,839 --> 00:13:34,680
November 20th where we saw a 66 percent

306
00:13:34,680 --> 00:13:37,440
uh

307
00:13:37,440 --> 00:13:40,200
spread from the average in terms of

308
00:13:40,200 --> 00:13:42,720
Secrets per commit

309
00:13:42,720 --> 00:13:46,320
now if we take a look at the days across

310
00:13:46,320 --> 00:13:48,959
the year uh and the worst days of the

311
00:13:48,959 --> 00:13:51,000
year of course excluding uh weekends

312
00:13:51,000 --> 00:13:55,040
here we see that uh summer is

313
00:13:55,040 --> 00:13:58,260
particularly good season for leaked

314
00:13:58,260 --> 00:14:01,680
secrets so lots of secrets so you can uh

315
00:14:01,680 --> 00:14:07,399
August to July and also March

316
00:14:07,760 --> 00:14:10,760
foreign

317
00:14:15,019 --> 00:14:18,420
secrets so the top three countries we

318
00:14:18,420 --> 00:14:22,260
saw were um well India the USA and

319
00:14:22,260 --> 00:14:24,899
Germany now this does not mean that

320
00:14:24,899 --> 00:14:27,480
developers in these countries are uh

321
00:14:27,480 --> 00:14:30,899
better or worse at managing Secrets than

322
00:14:30,899 --> 00:14:33,060
the others but what it means that

323
00:14:33,060 --> 00:14:35,279
because this is the total volume we saw

324
00:14:35,279 --> 00:14:37,940
for each country this translates into

325
00:14:37,940 --> 00:14:42,000
the activity in software development and

326
00:14:42,000 --> 00:14:44,639
technology in general we see in these in

327
00:14:44,639 --> 00:14:47,040
these countries so leading the charges

328
00:14:47,040 --> 00:14:49,620
the India where lots of software

329
00:14:49,620 --> 00:14:50,940
development is happening in the world

330
00:14:50,940 --> 00:14:54,300
the US of course and in Europe Germany

331
00:14:54,300 --> 00:14:56,779
and France

332
00:14:57,120 --> 00:15:00,899
but if we uh divide the number of

333
00:15:00,899 --> 00:15:03,180
Secrets leaked here by the number of

334
00:15:03,180 --> 00:15:05,339
developers and then by the total

335
00:15:05,339 --> 00:15:08,579
population in these countries we see a

336
00:15:08,579 --> 00:15:11,100
constant ratio of Secrets leaked per

337
00:15:11,100 --> 00:15:14,279
developers so in terms of practices all

338
00:15:14,279 --> 00:15:18,079
developers are equal I would say

339
00:15:20,220 --> 00:15:22,920
now we also looked at not only public

340
00:15:22,920 --> 00:15:25,260
GitHub repositories but the repositories

341
00:15:25,260 --> 00:15:28,740
of fit Guardian users and the public

342
00:15:28,740 --> 00:15:31,380
repositories turned out to be just the

343
00:15:31,380 --> 00:15:34,399
tip of the iceberg

344
00:15:35,160 --> 00:15:37,079
thing is private repositories are four

345
00:15:37,079 --> 00:15:39,180
times more likely to reveal at least one

346
00:15:39,180 --> 00:15:41,279
hard-coded Secrets when we compared them

347
00:15:41,279 --> 00:15:43,800
to the public repository and this is for

348
00:15:43,800 --> 00:15:47,420
Enterprise company as you can see here

349
00:15:47,420 --> 00:15:50,820
the Microsoft storage account Keys AWS

350
00:15:50,820 --> 00:15:53,760
Keys Salesforce or OCTA tokens most of

351
00:15:53,760 --> 00:15:55,740
the hard-coded secrets happen in the

352
00:15:55,740 --> 00:15:58,620
private repositories and the reason we

353
00:15:58,620 --> 00:16:00,899
think this is happening is that private

354
00:16:00,899 --> 00:16:02,579
repositories give

355
00:16:02,579 --> 00:16:05,399
developer is a false sense of secrecy or

356
00:16:05,399 --> 00:16:08,160
privacy so our intuition is that it

357
00:16:08,160 --> 00:16:11,120
permeates this sense causing even more

358
00:16:11,120 --> 00:16:15,959
leaks to happen and occur internally

359
00:16:15,959 --> 00:16:18,000
and this reveals the magnitude of secret

360
00:16:18,000 --> 00:16:21,380
sprawl in organizations

361
00:16:22,260 --> 00:16:24,899
now there are also more hard-coded

362
00:16:24,899 --> 00:16:26,940
secrets in these internal repositories

363
00:16:26,940 --> 00:16:29,519
than applications security Engineers can

364
00:16:29,519 --> 00:16:33,000
possibly handle today so on average what

365
00:16:33,000 --> 00:16:35,399
we saw that in 2021 is a typical company

366
00:16:35,399 --> 00:16:38,040
with 400 developers and four appsec

367
00:16:38,040 --> 00:16:41,459
Engineers that's a usual ratio we see of

368
00:16:41,459 --> 00:16:44,279
100 to one so such companies would

369
00:16:44,279 --> 00:16:45,079
discover

370
00:16:45,079 --> 00:16:48,420
1050 unique Secrets leaked when they

371
00:16:48,420 --> 00:16:50,940
scan their get repositories and

372
00:16:50,940 --> 00:16:53,880
different the full commits

373
00:16:53,880 --> 00:16:57,540
now each secret is this is a unique

374
00:16:57,540 --> 00:17:00,600
secret but each secret happens to show

375
00:17:00,600 --> 00:17:04,199
up in more than one area across VCS

376
00:17:04,199 --> 00:17:08,220
repositories files Etc so the we also

377
00:17:08,220 --> 00:17:10,799
counted the number of occurrences and

378
00:17:10,799 --> 00:17:14,400
each secret on average is found in 13

379
00:17:14,400 --> 00:17:16,260
different places

380
00:17:16,260 --> 00:17:19,559
so if we multiply the 1050 unique

381
00:17:19,559 --> 00:17:22,260
Secrets by 13 and then divide by the

382
00:17:22,260 --> 00:17:24,119
number of available app Tech Engineers

383
00:17:24,119 --> 00:17:27,359
we end up with this figure where one

384
00:17:27,359 --> 00:17:29,700
appsec engineer needs to handle more

385
00:17:29,700 --> 00:17:34,740
than 3400 occurrences on average so this

386
00:17:34,740 --> 00:17:36,900
is far more than what can possibly be

387
00:17:36,900 --> 00:17:40,220
done by by these teams

388
00:17:41,280 --> 00:17:44,820
now when it comes to open source GitHub

389
00:17:44,820 --> 00:17:46,919
is of course the first platform that

390
00:17:46,919 --> 00:17:49,200
comes to mind yet it's not only the the

391
00:17:49,200 --> 00:17:52,140
only resource for uh code sharing so

392
00:17:52,140 --> 00:17:54,059
since Docker popularized the use of

393
00:17:54,059 --> 00:17:57,480
containers to package uh software it's

394
00:17:57,480 --> 00:18:00,000
official public registry uh Docker Hub

395
00:18:00,000 --> 00:18:01,860
has also become one of the developers

396
00:18:01,860 --> 00:18:03,059
favorites

397
00:18:03,059 --> 00:18:04,740
so

398
00:18:04,740 --> 00:18:06,480
at git guardian we said let's take a

399
00:18:06,480 --> 00:18:09,780
look at get Dr Hub reposit Docker Hub

400
00:18:09,780 --> 00:18:12,660
images and see what's in there now the

401
00:18:12,660 --> 00:18:14,940
layer is making up Docker images are as

402
00:18:14,940 --> 00:18:17,760
many additional attack surfaces that can

403
00:18:17,760 --> 00:18:20,340
too easily be forgotten from the

404
00:18:20,340 --> 00:18:22,740
security perimeter and for attackers

405
00:18:22,740 --> 00:18:25,020
this is another chance of finding an

406
00:18:25,020 --> 00:18:28,020
access Vector just as we previously saw

407
00:18:28,020 --> 00:18:30,500
in the code called breach

408
00:18:30,500 --> 00:18:33,720
now Dr Hub is very big in total there's

409
00:18:33,720 --> 00:18:35,820
around 9 million publicly available

410
00:18:35,820 --> 00:18:37,380
Docker images

411
00:18:37,380 --> 00:18:41,280
so we took a sample of 10 000 images and

412
00:18:41,280 --> 00:18:43,740
scanned it and we scanned entirely each

413
00:18:43,740 --> 00:18:46,799
image from the creation process to all

414
00:18:46,799 --> 00:18:49,860
the layers different file systems and

415
00:18:49,860 --> 00:18:52,260
the findings were also interesting here

416
00:18:52,260 --> 00:18:55,580
so we saw that out of the 10 000 images

417
00:18:55,580 --> 00:19:00,539
there were 4 000 secrets and one 1200

418
00:19:00,539 --> 00:19:03,780
unique secrets in there so almost five

419
00:19:03,780 --> 00:19:06,000
percent of the images exposed at least

420
00:19:06,000 --> 00:19:07,820
one Secret

421
00:19:07,820 --> 00:19:11,640
and in total for every 100 layers in the

422
00:19:11,640 --> 00:19:13,980
file system of Docker images we found

423
00:19:13,980 --> 00:19:16,940
six secrets

424
00:19:17,400 --> 00:19:19,440
so Docker scanning is also an important

425
00:19:19,440 --> 00:19:21,059
aspect that shouldn't be left out in

426
00:19:21,059 --> 00:19:22,679
Security Programs

427
00:19:22,679 --> 00:19:24,360
now

428
00:19:24,360 --> 00:19:27,960
what can we do to curb the progressive

429
00:19:27,960 --> 00:19:31,100
Secrets sprawl

430
00:19:32,039 --> 00:19:33,000
let's

431
00:19:33,000 --> 00:19:36,240
go back and wrap things up so why are

432
00:19:36,240 --> 00:19:38,580
secrets sprawling first because modern

433
00:19:38,580 --> 00:19:41,039
development practices require the use of

434
00:19:41,039 --> 00:19:42,419
secrets to connect the different

435
00:19:42,419 --> 00:19:44,400
components used in building software

436
00:19:44,400 --> 00:19:47,940
right and second because source code is

437
00:19:47,940 --> 00:19:51,660
a very leaky asset it is widely accessed

438
00:19:51,660 --> 00:19:54,080
and moves through different places

439
00:19:54,080 --> 00:19:56,580
developer local workstations Version

440
00:19:56,580 --> 00:19:59,820
Control Systems the CI CD tools they're

441
00:19:59,820 --> 00:20:02,340
using to test and release the

442
00:20:02,340 --> 00:20:04,559
applications etc etc

443
00:20:04,559 --> 00:20:06,660
and also one other thing is that

444
00:20:06,660 --> 00:20:10,080
developers uh have to

445
00:20:10,080 --> 00:20:12,960
spend most of their time doing many

446
00:20:12,960 --> 00:20:14,460
different activities so they will be

447
00:20:14,460 --> 00:20:17,880
ideating planning coding uh testing

448
00:20:17,880 --> 00:20:20,400
deploying the code so all day long

449
00:20:20,400 --> 00:20:22,440
they're moving up and down the software

450
00:20:22,440 --> 00:20:24,960
development life cycle and going deep

451
00:20:24,960 --> 00:20:28,559
and wide on on the csdlc so this micro

452
00:20:28,559 --> 00:20:30,620
context switching

453
00:20:30,620 --> 00:20:34,080
makes the developers use a key for a

454
00:20:34,080 --> 00:20:37,260
test and then maybe forget it in the

455
00:20:37,260 --> 00:20:38,760
source code and say okay I'll come back

456
00:20:38,760 --> 00:20:40,500
to it but never come back to it and then

457
00:20:40,500 --> 00:20:42,660
push that code with the secret that's

458
00:20:42,660 --> 00:20:46,140
hard coded in it so that's one of the

459
00:20:46,140 --> 00:20:48,539
reasons why Secrets end up

460
00:20:48,539 --> 00:20:51,120
um in the git repositories now the

461
00:20:51,120 --> 00:20:53,160
threat of course is that after initial

462
00:20:53,160 --> 00:20:55,679
access to source code any attackers will

463
00:20:55,679 --> 00:20:58,919
use it and try and gain some advantage

464
00:20:58,919 --> 00:21:01,980
and lateral movement and it's a quite

465
00:21:01,980 --> 00:21:04,260
unsophisticated Vector of attack really

466
00:21:04,260 --> 00:21:07,440
anyone can just use the secret so once

467
00:21:07,440 --> 00:21:09,000
attackers also have these credentials

468
00:21:09,000 --> 00:21:11,700
it's very hard for us to detect that

469
00:21:11,700 --> 00:21:13,380
they are attackers because they are

470
00:21:13,380 --> 00:21:16,039
operating as a machine in a way

471
00:21:16,039 --> 00:21:19,980
now the standards are today uh are

472
00:21:19,980 --> 00:21:22,140
catching up with the risks of hard-coded

473
00:21:22,140 --> 00:21:24,120
Secrets and for example the nist is

474
00:21:24,120 --> 00:21:26,760
including secret detection and it's uh

475
00:21:26,760 --> 00:21:29,340
recommended standards for vendor

476
00:21:29,340 --> 00:21:31,679
verification and testing of software so

477
00:21:31,679 --> 00:21:34,080
this has this was produced under the

478
00:21:34,080 --> 00:21:38,039
executive the executive order last year

479
00:21:38,039 --> 00:21:40,620
so overall the conclusion is that

480
00:21:40,620 --> 00:21:42,480
Secrets must not be exposed in the

481
00:21:42,480 --> 00:21:44,880
software development life cycle and the

482
00:21:44,880 --> 00:21:46,940
risk of their exposure must be

483
00:21:46,940 --> 00:21:50,520
proactively handed during development

484
00:21:50,520 --> 00:21:53,360
foreign

485
00:21:55,679 --> 00:21:58,799
now one way we recommend doing this and

486
00:21:58,799 --> 00:22:01,740
to reduce the risks of exposure is to

487
00:22:01,740 --> 00:22:03,480
automate detection throughout the

488
00:22:03,480 --> 00:22:06,240
software development life cycle so on

489
00:22:06,240 --> 00:22:07,620
the one hand you want to perform

490
00:22:07,620 --> 00:22:11,640
historical scanning to identify all VCS

491
00:22:11,640 --> 00:22:14,159
instances in your organization and scan

492
00:22:14,159 --> 00:22:17,280
the repositories full history and on the

493
00:22:17,280 --> 00:22:18,740
other hand you also want to perform

494
00:22:18,740 --> 00:22:21,600
continuous monitoring and continuously

495
00:22:21,600 --> 00:22:24,780
scan all incremental changes and all

496
00:22:24,780 --> 00:22:27,960
code that is incoming to the shared code

497
00:22:27,960 --> 00:22:29,880
base and you also want to enable

498
00:22:29,880 --> 00:22:32,820
developers and devops Engineers or sres

499
00:22:32,820 --> 00:22:35,220
to integrate these real-time secret

500
00:22:35,220 --> 00:22:37,740
scanning into their workflows so this

501
00:22:37,740 --> 00:22:39,900
will happen in the VCS this will happen

502
00:22:39,900 --> 00:22:43,020
on local developer workstations or in

503
00:22:43,020 --> 00:22:46,500
continuous integration environments

504
00:22:46,500 --> 00:22:48,780
and we'll we'll have a little demo at

505
00:22:48,780 --> 00:22:50,880
the end of how to use Secrets detection

506
00:22:50,880 --> 00:22:54,000
on local developer workstations

507
00:22:54,000 --> 00:22:56,700
now there are lots of challenges with

508
00:22:56,700 --> 00:22:58,880
automated sequence detection

509
00:22:58,880 --> 00:23:01,940
one of them is scanning the git history

510
00:23:01,940 --> 00:23:04,740
so scanning the latest version of the

511
00:23:04,740 --> 00:23:08,820
code is not enough to prevent secrets

512
00:23:08,820 --> 00:23:11,760
from being used you have to take a look

513
00:23:11,760 --> 00:23:14,460
at all commits from all branches and

514
00:23:14,460 --> 00:23:16,320
make sure that none of them contain any

515
00:23:16,320 --> 00:23:18,720
valid secrets

516
00:23:18,720 --> 00:23:21,059
another challenge is dealing with the

517
00:23:21,059 --> 00:23:23,580
false positives some tools we use either

518
00:23:23,580 --> 00:23:26,039
entropy statistics or regular

519
00:23:26,039 --> 00:23:28,140
Expressions we think that the

520
00:23:28,140 --> 00:23:30,659
combination of the two is needed for

521
00:23:30,659 --> 00:23:33,720
better Precision better accuracy here

522
00:23:33,720 --> 00:23:36,659
and lastly one of the main challenges is

523
00:23:36,659 --> 00:23:39,059
that detection is only half the job

524
00:23:39,059 --> 00:23:40,919
really once you find the hard-coded

525
00:23:40,919 --> 00:23:43,559
secrets they need to be remediated these

526
00:23:43,559 --> 00:23:45,600
are vulnerabilities that cannot be just

527
00:23:45,600 --> 00:23:49,620
left there and this requires

528
00:23:49,620 --> 00:23:51,840
uh streamlined collaboration between

529
00:23:51,840 --> 00:23:54,720
security and development teams who own

530
00:23:54,720 --> 00:23:57,240
the context and sometimes remediation

531
00:23:57,240 --> 00:24:00,120
can be harder than expected and takes a

532
00:24:00,120 --> 00:24:02,039
lot more time and resources than we

533
00:24:02,039 --> 00:24:05,600
think uh it should

534
00:24:06,360 --> 00:24:08,640
now let's take a look at the Historical

535
00:24:08,640 --> 00:24:10,740
scanning and why historical scanning is

536
00:24:10,740 --> 00:24:14,640
very important uh for us so hard-coded

537
00:24:14,640 --> 00:24:17,940
Secrets unlike other uh vulnerabilities

538
00:24:17,940 --> 00:24:20,220
that are found through static analysis

539
00:24:20,220 --> 00:24:22,860
of code are not a runtime vulnerability

540
00:24:22,860 --> 00:24:25,679
they do not manifest themselves in

541
00:24:25,679 --> 00:24:28,500
applications that are necessarily in in

542
00:24:28,500 --> 00:24:30,240
production

543
00:24:30,240 --> 00:24:31,140
um

544
00:24:31,140 --> 00:24:33,179
they represent the threat by themselves

545
00:24:33,179 --> 00:24:35,100
simply because they exist simply because

546
00:24:35,100 --> 00:24:37,380
they're in the git history regardless of

547
00:24:37,380 --> 00:24:40,140
whether the code is running or not

548
00:24:40,140 --> 00:24:42,840
and also one other uh

549
00:24:42,840 --> 00:24:45,360
challenges that they get history can be

550
00:24:45,360 --> 00:24:47,460
very complex and sometimes you'll find

551
00:24:47,460 --> 00:24:49,740
that the secret has been removed in one

552
00:24:49,740 --> 00:24:51,780
uh added in one commit and then removed

553
00:24:51,780 --> 00:24:54,780
in the next one but if you are good with

554
00:24:54,780 --> 00:24:57,780
gits you can still Traverse all its

555
00:24:57,780 --> 00:25:00,240
paths and all the history to find the

556
00:25:00,240 --> 00:25:02,700
secret and attackers with access to

557
00:25:02,700 --> 00:25:04,500
repositories will also do the same they

558
00:25:04,500 --> 00:25:06,299
will be traversing all branches and all

559
00:25:06,299 --> 00:25:08,400
commits history to look for valid

560
00:25:08,400 --> 00:25:10,380
secrets so it doesn't matter if it's on

561
00:25:10,380 --> 00:25:13,020
it future Branch hot sex Branch or the

562
00:25:13,020 --> 00:25:15,360
main one if it's from five years ago or

563
00:25:15,360 --> 00:25:18,240
from yesterday night if it's valid then

564
00:25:18,240 --> 00:25:21,620
it can be used against you

565
00:25:23,880 --> 00:25:27,240
and once you have put in place your

566
00:25:27,240 --> 00:25:29,279
historical scanning for git repositories

567
00:25:29,279 --> 00:25:32,400
you also want to continuously scan

568
00:25:32,400 --> 00:25:34,799
incremental code changes at every stage

569
00:25:34,799 --> 00:25:36,360
of the software development lifecycle

570
00:25:36,360 --> 00:25:39,299
and this can happen there are many touch

571
00:25:39,299 --> 00:25:41,460
points where the secret scanning can be

572
00:25:41,460 --> 00:25:42,659
performed

573
00:25:42,659 --> 00:25:45,120
so there are two different environments

574
00:25:45,120 --> 00:25:47,039
here there are the remote environments

575
00:25:47,039 --> 00:25:51,360
that are shared across developers and

576
00:25:51,360 --> 00:25:53,159
there are the local environment there's

577
00:25:53,159 --> 00:25:54,779
the local environment which is the

578
00:25:54,779 --> 00:25:57,960
developers workstation or machine

579
00:25:57,960 --> 00:26:01,200
so developers will be coding locally on

580
00:26:01,200 --> 00:26:02,419
their machine

581
00:26:02,419 --> 00:26:05,520
staging changes committing them before

582
00:26:05,520 --> 00:26:07,679
they push it to the central code base

583
00:26:07,679 --> 00:26:10,400
where the threat really lies

584
00:26:10,400 --> 00:26:13,320
they can Implement sequence detection in

585
00:26:13,320 --> 00:26:16,320
with pre-commit or pre-push git hooks to

586
00:26:16,320 --> 00:26:17,820
make sure that the code that leaves

587
00:26:17,820 --> 00:26:20,520
their workstation does not contain any

588
00:26:20,520 --> 00:26:21,679
secrets

589
00:26:21,679 --> 00:26:25,440
and on the server side well

590
00:26:25,440 --> 00:26:26,940
sequence detection needs to be

591
00:26:26,940 --> 00:26:29,640
implemented for the VCS at least because

592
00:26:29,640 --> 00:26:31,679
that's the source of truth and that's

593
00:26:31,679 --> 00:26:34,679
where the ultimate threat lies attackers

594
00:26:34,679 --> 00:26:36,480
most of the time will gain access to

595
00:26:36,480 --> 00:26:39,659
that Central repository and that's where

596
00:26:39,659 --> 00:26:42,059
they will be looking for secrets so if

597
00:26:42,059 --> 00:26:43,740
they end up in the repository in the

598
00:26:43,740 --> 00:26:45,659
shared code base they need to be

599
00:26:45,659 --> 00:26:48,480
considered as a compromised secret and

600
00:26:48,480 --> 00:26:51,299
incident response workflows need to be

601
00:26:51,299 --> 00:26:52,740
triggered

602
00:26:52,740 --> 00:26:55,320
now they can also be ran in continuous

603
00:26:55,320 --> 00:26:59,580
integration pipelines but it's also a

604
00:26:59,580 --> 00:27:01,440
bit too late because they've already

605
00:27:01,440 --> 00:27:04,260
entered the remote environment the

606
00:27:04,260 --> 00:27:06,480
shared environment but the reason why it

607
00:27:06,480 --> 00:27:08,340
can be implemented at this stage is that

608
00:27:08,340 --> 00:27:11,100
it raises the awareness for all the

609
00:27:11,100 --> 00:27:13,440
teams and for all developers devops

610
00:27:13,440 --> 00:27:16,140
Engineers that are running these tests

611
00:27:16,140 --> 00:27:19,200
and the results of secret scanning there

612
00:27:19,200 --> 00:27:21,900
is displayed to everyone so if there are

613
00:27:21,900 --> 00:27:23,400
any secrets

614
00:27:23,400 --> 00:27:25,980
people will realize that okay we're

615
00:27:25,980 --> 00:27:28,500
doing uh poor job here correctly

616
00:27:28,500 --> 00:27:31,020
managing the secret and we should

617
00:27:31,020 --> 00:27:34,200
rotate it revoke it and now find a

618
00:27:34,200 --> 00:27:36,260
better way to manage it in the future

619
00:27:36,260 --> 00:27:39,840
the idea is to overall build a layered

620
00:27:39,840 --> 00:27:42,659
detection strategy that provides your

621
00:27:42,659 --> 00:27:45,059
engineering teams and devops Engineering

622
00:27:45,059 --> 00:27:46,919
teams with a comprehensive security

623
00:27:46,919 --> 00:27:49,919
safety net so at different stages of

624
00:27:49,919 --> 00:27:52,640
dsdlc

625
00:27:55,020 --> 00:27:56,340
and

626
00:27:56,340 --> 00:27:59,400
lastly if you are to implement a secret

627
00:27:59,400 --> 00:28:02,539
detection program in your organization

628
00:28:02,539 --> 00:28:05,880
we recommend you take it step by step so

629
00:28:05,880 --> 00:28:09,900
it can be uh complicated so uh we

630
00:28:09,900 --> 00:28:11,700
recommend the progressive approach to

631
00:28:11,700 --> 00:28:15,179
move forward to a zero secrets and code

632
00:28:15,179 --> 00:28:18,240
policy first we recommend that you start

633
00:28:18,240 --> 00:28:20,940
monitoring commits and merge or pull

634
00:28:20,940 --> 00:28:23,220
requests in real time for all your repos

635
00:28:23,220 --> 00:28:26,760
with VCS or continuous Integrations this

636
00:28:26,760 --> 00:28:29,100
is where the ultimate threat lies and

637
00:28:29,100 --> 00:28:31,740
this is where keys will be extracted and

638
00:28:31,740 --> 00:28:33,200
exploited

639
00:28:33,200 --> 00:28:35,400
and in the meantime you can

640
00:28:35,400 --> 00:28:37,620
progressively educate developers to add

641
00:28:37,620 --> 00:28:39,720
scanning to their

642
00:28:39,720 --> 00:28:42,059
own workflows so this can happen to

643
00:28:42,059 --> 00:28:44,580
pre-commit git Hooks and this prevents

644
00:28:44,580 --> 00:28:45,840
the secrets from leaving their

645
00:28:45,840 --> 00:28:48,120
workstations and will save you lots of

646
00:28:48,120 --> 00:28:50,580
time down the line

647
00:28:50,580 --> 00:28:52,320
and you should also educate them to

648
00:28:52,320 --> 00:28:56,159
manage Secrets safely however way that

649
00:28:56,159 --> 00:28:58,380
is done in your organization so this can

650
00:28:58,380 --> 00:29:02,000
be by using centralized storage

651
00:29:02,000 --> 00:29:06,120
dot end of package or encrypting Keys

652
00:29:06,120 --> 00:29:08,159
etc etc so there are different ways

653
00:29:08,159 --> 00:29:10,860
we'll not cover this here but it's

654
00:29:10,860 --> 00:29:13,200
important to emphasize that developers

655
00:29:13,200 --> 00:29:16,080
need to be trained on Secrets management

656
00:29:16,080 --> 00:29:18,779
foreign you want to plan for a longer

657
00:29:18,779 --> 00:29:21,659
term strategy where you will be handling

658
00:29:21,659 --> 00:29:23,940
incidents that are discovered during the

659
00:29:23,940 --> 00:29:26,659
git historical scanning phase and

660
00:29:26,659 --> 00:29:30,059
oftentimes this reveals as we saw in the

661
00:29:30,059 --> 00:29:32,340
state of Secrets brought thousands of

662
00:29:32,340 --> 00:29:34,799
secrets in the history so the code base

663
00:29:34,799 --> 00:29:37,559
with 10 years of History will have 10

664
00:29:37,559 --> 00:29:40,080
000 Secrets maybe 5 000 out of those

665
00:29:40,080 --> 00:29:42,840
will be valid Keys you want to tackle

666
00:29:42,840 --> 00:29:45,419
those one by one of course it will take

667
00:29:45,419 --> 00:29:47,640
some time it's a long-term strategy a

668
00:29:47,640 --> 00:29:49,799
long-term plan but you should go through

669
00:29:49,799 --> 00:29:52,559
them and you should have in place a

670
00:29:52,559 --> 00:29:55,340
proper vulnerability Management program

671
00:29:55,340 --> 00:29:59,159
to remediate these incidents and make

672
00:29:59,159 --> 00:30:03,080
sure that they are completely mitigated

673
00:30:03,080 --> 00:30:06,419
lastly you want to implement secret

674
00:30:06,419 --> 00:30:08,940
security Champions program to remediate

675
00:30:08,940 --> 00:30:11,159
all these high volume of incidents and

676
00:30:11,159 --> 00:30:14,220
tackle the different cases where the

677
00:30:14,220 --> 00:30:16,500
developers that committed the key for

678
00:30:16,500 --> 00:30:18,480
example is no longer in the organization

679
00:30:18,480 --> 00:30:20,880
so they're not here they cannot help you

680
00:30:20,880 --> 00:30:23,159
with that that's something security

681
00:30:23,159 --> 00:30:26,940
Champions maybe can take care of and you

682
00:30:26,940 --> 00:30:28,799
also want those Champions to promote the

683
00:30:28,799 --> 00:30:31,320
best practices in the organization and

684
00:30:31,320 --> 00:30:33,419
share their learnings with different

685
00:30:33,419 --> 00:30:37,640
teams and different members

686
00:30:38,100 --> 00:30:40,799
so overall we believe that this is this

687
00:30:40,799 --> 00:30:42,899
way you will be reducing you'll be

688
00:30:42,899 --> 00:30:45,240
curbing the progress of secret Spa

689
00:30:45,240 --> 00:30:48,659
sprawl within your organization and uh

690
00:30:48,659 --> 00:30:51,000
reducing well the amount of secrets that

691
00:30:51,000 --> 00:30:55,580
will reach the VCS so these will be safe

692
00:30:55,580 --> 00:30:58,860
and lastly you'll be tackling all your

693
00:30:58,860 --> 00:31:02,760
uh past incidents and once you will be

694
00:31:02,760 --> 00:31:04,260
done with those

695
00:31:04,260 --> 00:31:06,779
hopefully you'll be spending much less

696
00:31:06,779 --> 00:31:10,559
time uh while taking care of secrets in

697
00:31:10,559 --> 00:31:12,799
code

698
00:31:13,380 --> 00:31:16,140
now maybe we can take a quick look at

699
00:31:16,140 --> 00:31:19,500
how to implement sequence detection at

700
00:31:19,500 --> 00:31:21,899
the developer workstation level so you

701
00:31:21,899 --> 00:31:25,760
know get free to make hook

702
00:31:32,299 --> 00:31:36,620
you should be here seconds

703
00:31:50,399 --> 00:31:53,399
okay

704
00:32:08,220 --> 00:32:10,260
you can see my screen right

705
00:32:10,260 --> 00:32:11,399
yes

706
00:32:11,399 --> 00:32:14,700
Okay so

707
00:32:14,700 --> 00:32:16,799
here I have uh

708
00:32:16,799 --> 00:32:19,320
sample test repository that is basically

709
00:32:19,320 --> 00:32:22,260
a node.js application

710
00:32:22,260 --> 00:32:25,020
in which I will be hard coding a secret

711
00:32:25,020 --> 00:32:28,020
locally and we'll see how we can catch

712
00:32:28,020 --> 00:32:32,179
that before it reaches the VCS here

713
00:32:35,640 --> 00:32:39,840
so in vs code what I did before this

714
00:32:39,840 --> 00:32:42,299
demo is simply

715
00:32:42,299 --> 00:32:44,940
install the pre-commits the pre-commit

716
00:32:44,940 --> 00:32:47,760
hook on my local machine so I just ran

717
00:32:47,760 --> 00:32:50,820
these uh different commands use the

718
00:32:50,820 --> 00:32:53,039
package manager to install pre-commits

719
00:32:53,039 --> 00:32:55,380
and then created just a configuration

720
00:32:55,380 --> 00:32:58,740
file pre-commit config yaml file where I

721
00:32:58,740 --> 00:33:01,200
said I will be using GG Shield a command

722
00:33:01,200 --> 00:33:03,120
line interface to scan for Secrets

723
00:33:03,120 --> 00:33:05,399
locally

724
00:33:05,399 --> 00:33:09,320
and we can find it here

725
00:33:11,580 --> 00:33:14,159
so we're going to try and hardcode the

726
00:33:14,159 --> 00:33:18,200
Secret in one of our files here

727
00:33:19,200 --> 00:33:23,899
before we do that let me just log in

728
00:33:29,600 --> 00:33:32,640
this will just generate an API token

729
00:33:32,640 --> 00:33:35,340
that I will be able to use locally to

730
00:33:35,340 --> 00:33:37,200
scan for secrets

731
00:33:37,200 --> 00:33:38,700
okay super

732
00:33:38,700 --> 00:33:40,440
so

733
00:33:40,440 --> 00:33:44,960
now let me just take this database URL

734
00:33:44,960 --> 00:33:48,240
and in my node.js app here

735
00:33:48,240 --> 00:33:51,120
I have a config file that

736
00:33:51,120 --> 00:33:54,659
connects to a database so here I'm

737
00:33:54,659 --> 00:33:59,340
correctly using a environment sensitive

738
00:33:59,340 --> 00:34:03,419
variable to hide the database URL and it

739
00:34:03,419 --> 00:34:05,580
should be in the dot end but let's

740
00:34:05,580 --> 00:34:08,099
suppose I want to test my connection to

741
00:34:08,099 --> 00:34:10,580
the database

742
00:34:10,918 --> 00:34:14,460
see if my code is functional and okay I

743
00:34:14,460 --> 00:34:17,219
will take this back later I will remove

744
00:34:17,219 --> 00:34:19,459
it

745
00:34:19,619 --> 00:34:21,739
so once we have that

746
00:34:21,739 --> 00:34:24,979
save it

747
00:34:27,839 --> 00:34:30,920
now let's try committing

748
00:34:30,920 --> 00:34:33,979
[Music]

749
00:34:37,619 --> 00:34:40,139
and as you can see here this directly

750
00:34:40,139 --> 00:34:42,540
triggered scanning on my local

751
00:34:42,540 --> 00:34:44,599
Workstation

752
00:34:44,599 --> 00:34:47,580
so what we can see is that the commit

753
00:34:47,580 --> 00:34:50,219
failed because the local pre-commit hook

754
00:34:50,219 --> 00:34:53,940
failed here and the reason is uh well we

755
00:34:53,940 --> 00:34:57,060
found a secret and this secret is well

756
00:34:57,060 --> 00:34:59,160
not completely displayed here but this

757
00:34:59,160 --> 00:35:02,040
is the postgres URL that I just uh put

758
00:35:02,040 --> 00:35:03,660
here

759
00:35:03,660 --> 00:35:05,940
so this way

760
00:35:05,940 --> 00:35:09,240
the secret did not even enter my git

761
00:35:09,240 --> 00:35:12,599
history locally so what I can simply do

762
00:35:12,599 --> 00:35:17,700
is remove it and then try committing

763
00:35:17,700 --> 00:35:21,119
again and it should pass but let's try

764
00:35:21,119 --> 00:35:24,800
maybe ignoring it

765
00:35:26,760 --> 00:35:29,460
so now this secret has been added to my

766
00:35:29,460 --> 00:35:32,160
ignore list let's say maybe it's a false

767
00:35:32,160 --> 00:35:34,980
positive or this is a test key that I do

768
00:35:34,980 --> 00:35:37,440
not necessarily uh care about but I'll

769
00:35:37,440 --> 00:35:40,020
just hard code it in there and now it

770
00:35:40,020 --> 00:35:43,520
has now that it has been ignored

771
00:35:51,180 --> 00:35:52,859
I will try committing again and then

772
00:35:52,859 --> 00:35:54,800
pushing my code

773
00:35:54,800 --> 00:35:57,839
okay now that that was ignored let's

774
00:35:57,839 --> 00:36:00,859
just push it

775
00:36:06,180 --> 00:36:08,940
now let's go to

776
00:36:08,940 --> 00:36:10,800
our

777
00:36:10,800 --> 00:36:13,800
the top page here

778
00:36:13,800 --> 00:36:17,540
and check what is going on

779
00:36:21,560 --> 00:36:25,020
so what I did what I also did was add

780
00:36:25,020 --> 00:36:28,260
sequence detection to my CI and I had a

781
00:36:28,260 --> 00:36:31,099
GitHub action running

782
00:36:31,160 --> 00:36:33,960
and when I push the secret this has

783
00:36:33,960 --> 00:36:39,079
triggered scanning here in the GitHub TI

784
00:36:49,140 --> 00:36:52,020
as you can see in the CI the check has

785
00:36:52,020 --> 00:36:54,599
failed because again GG Shield the

786
00:36:54,599 --> 00:36:56,579
command line interface has got the

787
00:36:56,579 --> 00:36:58,820
secret

788
00:37:03,180 --> 00:37:05,040
and this is now displayed to all the

789
00:37:05,040 --> 00:37:08,880
teams that are using

790
00:37:10,320 --> 00:37:13,700
this GitHub repository

791
00:37:15,480 --> 00:37:20,060
well I also created a full request

792
00:37:23,099 --> 00:37:26,000
we are losing the audio uh yeah sorry

793
00:37:26,000 --> 00:37:29,400
and get Guardian found a secret in this

794
00:37:29,400 --> 00:37:31,440
pull request here

795
00:37:31,440 --> 00:37:32,820
so again

796
00:37:32,820 --> 00:37:34,859
that's the same secret which is the

797
00:37:34,859 --> 00:37:38,700
postgres URL prudentials

798
00:37:38,700 --> 00:37:41,299
foreign

799
00:37:42,200 --> 00:37:44,640
the guidelines for you to remediate

800
00:37:44,640 --> 00:37:46,859
hard-coded Secrets depending on the

801
00:37:46,859 --> 00:37:49,500
rules within your organization and who

802
00:37:49,500 --> 00:37:51,540
you should contact how you should revoke

803
00:37:51,540 --> 00:37:53,520
it and rotate it how you should redeploy

804
00:37:53,520 --> 00:37:54,839
your application

805
00:37:54,839 --> 00:37:56,579
etc etc

806
00:37:56,579 --> 00:37:59,520
so these are the many different areas in

807
00:37:59,520 --> 00:38:01,200
where you could Implement secret

808
00:38:01,200 --> 00:38:04,079
scanning and where you should to raise

809
00:38:04,079 --> 00:38:06,359
awareness around the problem to mitigate

810
00:38:06,359 --> 00:38:08,820
the threat of hard-coded Secrets and to

811
00:38:08,820 --> 00:38:12,680
have developers know that they should be

812
00:38:12,680 --> 00:38:15,660
not hard coding those secrets in the in

813
00:38:15,660 --> 00:38:18,560
the git repositories

814
00:38:19,560 --> 00:38:22,140
and I think this takes us to

815
00:38:22,140 --> 00:38:23,940
the end of the presentation so I don't

816
00:38:23,940 --> 00:38:26,640
know if there were any questions

817
00:38:26,640 --> 00:38:29,280
they were indeed

818
00:38:29,280 --> 00:38:31,320
so we had a few questions do not

819
00:38:31,320 --> 00:38:34,260
hesitate to um to enter them in over

820
00:38:34,260 --> 00:38:35,099
um

821
00:38:35,099 --> 00:38:37,080
so right now I have two questions

822
00:38:37,080 --> 00:38:38,240
[Music]

823
00:38:38,240 --> 00:38:41,700
the first one is do you provide or are

824
00:38:41,700 --> 00:38:44,160
there any open source tools to scan

825
00:38:44,160 --> 00:38:46,500
private repositories and container

826
00:38:46,500 --> 00:38:50,400
Registries to identify expose Secrets

827
00:38:50,400 --> 00:38:53,099
could it work fully offline without

828
00:38:53,099 --> 00:38:55,079
exposing anything out of the

829
00:38:55,079 --> 00:38:58,680
organizational environment

830
00:38:58,680 --> 00:39:00,980
yeah that's a that's a good question so

831
00:39:00,980 --> 00:39:04,140
the uh GG Shield command line interface

832
00:39:04,140 --> 00:39:08,099
so uh we just saw here doing the demo is

833
00:39:08,099 --> 00:39:12,359
actually open source but uh and uses a

834
00:39:12,359 --> 00:39:15,720
public API but in fact this public API

835
00:39:15,720 --> 00:39:19,859
is hosted on git Guardian servers now

836
00:39:19,859 --> 00:39:22,760
this means that people using this tool

837
00:39:22,760 --> 00:39:25,619
will be sending the code to the service

838
00:39:25,619 --> 00:39:28,440
for scanning and then it comes back with

839
00:39:28,440 --> 00:39:30,900
the results of the secrets in code or

840
00:39:30,900 --> 00:39:34,500
not but it can also be deployed on

841
00:39:34,500 --> 00:39:37,680
premises people can host the API in a

842
00:39:37,680 --> 00:39:40,260
way that nothing is exposed to the

843
00:39:40,260 --> 00:39:42,960
outside world and the code stays within

844
00:39:42,960 --> 00:39:46,260
the organization's premises

845
00:39:46,260 --> 00:39:48,960
and the same CLI you saw here can be

846
00:39:48,960 --> 00:39:50,760
used well to scan

847
00:39:50,760 --> 00:39:52,980
locally in developer workstations but

848
00:39:52,980 --> 00:39:55,859
also in the CI pipelines as we saw with

849
00:39:55,859 --> 00:39:58,200
the GitHub actions workflow and also it

850
00:39:58,200 --> 00:39:59,880
scans Docker images so there's a

851
00:39:59,880 --> 00:40:04,820
dedicated Docker image scanning command

852
00:40:05,460 --> 00:40:07,020
okay thank you

853
00:40:07,020 --> 00:40:09,240
um second question we saw that one spike

854
00:40:09,240 --> 00:40:11,520
in the leakage of secrets on a Saturday

855
00:40:11,520 --> 00:40:13,980
November I think

856
00:40:13,980 --> 00:40:16,079
has there been anything special at that

857
00:40:16,079 --> 00:40:18,540
day that we that you could recall maybe

858
00:40:18,540 --> 00:40:20,700
you need a new detection or was update

859
00:40:20,700 --> 00:40:23,339
totally random and could have been any

860
00:40:23,339 --> 00:40:25,560
other day of the year

861
00:40:25,560 --> 00:40:28,079
yep that's a that's a great question so

862
00:40:28,079 --> 00:40:31,380
what we try to do of course uh we have

863
00:40:31,380 --> 00:40:33,480
two different analysis one that runs

864
00:40:33,480 --> 00:40:36,119
with the same perimeter versus the past

865
00:40:36,119 --> 00:40:38,339
year and some that runs with a new

866
00:40:38,339 --> 00:40:40,200
perimeter in terms of Secrets detectors

867
00:40:40,200 --> 00:40:42,900
because the library we have keeps on

868
00:40:42,900 --> 00:40:46,440
growing and we moved from 250 detectors

869
00:40:46,440 --> 00:40:50,760
to 350 uh over the over the year

870
00:40:50,760 --> 00:40:54,119
so looking at the Piezo parametric

871
00:40:54,119 --> 00:40:58,079
analysis uh we did not find anything in

872
00:40:58,079 --> 00:41:00,900
particular uh on on that day in November

873
00:41:00,900 --> 00:41:04,980
uh sometimes it's also not necessarily

874
00:41:04,980 --> 00:41:06,900
developers that are hard coding the

875
00:41:06,900 --> 00:41:10,380
secrets but misconfigured developer

876
00:41:10,380 --> 00:41:12,480
tooling misconfigured devops tooling

877
00:41:12,480 --> 00:41:15,839
that can be uh

878
00:41:15,839 --> 00:41:19,619
we're printing these secrets in uh the

879
00:41:19,619 --> 00:41:21,599
different areas we find them so it's not

880
00:41:21,599 --> 00:41:23,400
always the developer here

881
00:41:23,400 --> 00:41:26,400
but from what I know it was a totally

882
00:41:26,400 --> 00:41:28,440
random event but I I will look into it

883
00:41:28,440 --> 00:41:31,980
and understand why the spike was there

884
00:41:31,980 --> 00:41:33,540
thank you

885
00:41:33,540 --> 00:41:36,300
um I had another question what makes our

886
00:41:36,300 --> 00:41:38,820
colleague Secrets a different breed of

887
00:41:38,820 --> 00:41:41,640
security vulnerabilities

888
00:41:41,640 --> 00:41:43,920
when compared to other vulnerabilities

889
00:41:43,920 --> 00:41:45,720
from through for example static

890
00:41:45,720 --> 00:41:48,599
application security testing

891
00:41:48,599 --> 00:41:52,260
yeah so compared to let's let's take for

892
00:41:52,260 --> 00:41:55,920
example a SQL injection uh vulnerability

893
00:41:55,920 --> 00:41:59,700
it will only manifest itself for an

894
00:41:59,700 --> 00:42:01,380
application that is

895
00:42:01,380 --> 00:42:04,020
um in production and if the code in

896
00:42:04,020 --> 00:42:06,540
which that SQL injection vulnerability

897
00:42:06,540 --> 00:42:10,560
is deployed to the production app or not

898
00:42:10,560 --> 00:42:13,079
so it depends on whether it's in the

899
00:42:13,079 --> 00:42:16,619
main branch if it has been deployed or

900
00:42:16,619 --> 00:42:18,780
not in the case of of Secrets it's it's

901
00:42:18,780 --> 00:42:20,940
different even if it's something that's

902
00:42:20,940 --> 00:42:24,859
not deployed if it's in your git history

903
00:42:24,859 --> 00:42:28,260
it can still be exploited so if an AWS

904
00:42:28,260 --> 00:42:30,180
key is in there it can still be

905
00:42:30,180 --> 00:42:32,700
extracted by an attacker and then they

906
00:42:32,700 --> 00:42:35,460
will use it to spin up different ec2

907
00:42:35,460 --> 00:42:37,800
instances and whatnot

908
00:42:37,800 --> 00:42:40,020
so you have to

909
00:42:40,020 --> 00:42:42,480
take a look at all the hard-coded

910
00:42:42,480 --> 00:42:44,339
secrets whether they're in a branch

911
00:42:44,339 --> 00:42:47,520
that's deployed in production or not

912
00:42:47,520 --> 00:42:49,500
it's not just the last version of the

913
00:42:49,500 --> 00:42:52,400
code that counts here

914
00:42:52,640 --> 00:42:54,839
thank you

915
00:42:54,839 --> 00:42:57,300
um do not hesitate to post question

916
00:42:57,300 --> 00:43:00,920
um I have another one for in my list

917
00:43:00,920 --> 00:43:04,079
what are the biggest challenges awaiting

918
00:43:04,079 --> 00:43:05,940
organizations that are looking to tackle

919
00:43:05,940 --> 00:43:08,579
Secrets Pro and how can this

920
00:43:08,579 --> 00:43:12,599
organizations overcome such challenges

921
00:43:12,599 --> 00:43:17,040
foreign so that the challenges are

922
00:43:17,040 --> 00:43:20,040
are multiple really uh one of the first

923
00:43:20,040 --> 00:43:21,660
challenges is

924
00:43:21,660 --> 00:43:25,619
realizing how much secret sprawl is a

925
00:43:25,619 --> 00:43:28,260
reality within the organization so when

926
00:43:28,260 --> 00:43:31,560
organizations scan their git history all

927
00:43:31,560 --> 00:43:33,720
their repositories all their vcss and

928
00:43:33,720 --> 00:43:35,640
sometimes these are in the hundreds or

929
00:43:35,640 --> 00:43:38,339
thousands of repositories they will see

930
00:43:38,339 --> 00:43:41,700
that the results are uh will take them

931
00:43:41,700 --> 00:43:43,800
back because they will find thousands of

932
00:43:43,800 --> 00:43:46,020
hard-coded Secrets and one of the

933
00:43:46,020 --> 00:43:47,760
challenges is to plan for the

934
00:43:47,760 --> 00:43:49,380
remediation

935
00:43:49,380 --> 00:43:51,540
so how are we going to tackle those

936
00:43:51,540 --> 00:43:54,420
Secrets what are the most important ones

937
00:43:54,420 --> 00:43:56,760
that we need to get started with first

938
00:43:56,760 --> 00:43:58,680
in terms of

939
00:43:58,680 --> 00:44:00,720
remediation workflows

940
00:44:00,720 --> 00:44:03,060
how can we kick that off how can we make

941
00:44:03,060 --> 00:44:06,900
sure that these will not be exploited uh

942
00:44:06,900 --> 00:44:08,579
how can we make sure that we have all

943
00:44:08,579 --> 00:44:11,160
the context we need to remediate those

944
00:44:11,160 --> 00:44:13,319
secrets are the developers still in the

945
00:44:13,319 --> 00:44:15,780
organization or have they left the

946
00:44:15,780 --> 00:44:17,760
organization so

947
00:44:17,760 --> 00:44:21,359
takes lots of planning before uh going

948
00:44:21,359 --> 00:44:24,260
deep in dive into the historical

949
00:44:24,260 --> 00:44:26,700
incidence remediation so that's one

950
00:44:26,700 --> 00:44:30,540
thing but the other thing is also uh how

951
00:44:30,540 --> 00:44:32,280
can we prevent that's the second

952
00:44:32,280 --> 00:44:34,140
challenge is how can we prevent more

953
00:44:34,140 --> 00:44:37,140
secrets from happening so from entering

954
00:44:37,140 --> 00:44:40,260
the VCS and for that there needs to be

955
00:44:40,260 --> 00:44:43,200
lots of efforts on the prevention side

956
00:44:43,200 --> 00:44:45,780
and prevention can only happen with the

957
00:44:45,780 --> 00:44:48,000
help of developers of course because

958
00:44:48,000 --> 00:44:50,220
they're the ones who are writing the

959
00:44:50,220 --> 00:44:51,540
code and they're the ones who are

960
00:44:51,540 --> 00:44:54,180
checking the secrets into codes even if

961
00:44:54,180 --> 00:44:55,440
it's a

962
00:44:55,440 --> 00:44:57,359
mistake it's not something they do on

963
00:44:57,359 --> 00:44:58,500
purpose

964
00:44:58,500 --> 00:45:00,780
so for prevention they need to equip

965
00:45:00,780 --> 00:45:03,420
developers with the right tooling make

966
00:45:03,420 --> 00:45:06,240
sure that the clis they use the local

967
00:45:06,240 --> 00:45:09,740
scanning tools they use will not

968
00:45:09,740 --> 00:45:11,720
be

969
00:45:11,720 --> 00:45:14,099
reducing their diminishing their

970
00:45:14,099 --> 00:45:16,260
productivity and blocking their

971
00:45:16,260 --> 00:45:17,940
development workflow so that's one of

972
00:45:17,940 --> 00:45:19,319
the challenges

973
00:45:19,319 --> 00:45:21,480
and make sure that it's adopted by

974
00:45:21,480 --> 00:45:24,480
everyone in the organization so everyone

975
00:45:24,480 --> 00:45:27,420
needs to be using these these tools to

976
00:45:27,420 --> 00:45:28,800
make sure that their secrets do not

977
00:45:28,800 --> 00:45:31,560
contain code that their code does not

978
00:45:31,560 --> 00:45:33,660
contain secrets

979
00:45:33,660 --> 00:45:35,339
to me

980
00:45:35,339 --> 00:45:36,839
thank you

981
00:45:36,839 --> 00:45:40,020
um is there an overhead of using the

982
00:45:40,020 --> 00:45:42,440
solution in term of

983
00:45:42,440 --> 00:45:45,480
workstation for example do you notice

984
00:45:45,480 --> 00:45:48,119
some some of the red in time of time

985
00:45:48,119 --> 00:45:51,060
between uh between comets

986
00:45:51,060 --> 00:45:53,160
uh no so most of the time if this is

987
00:45:53,160 --> 00:45:56,640
implemented that the pre-commit git

988
00:45:56,640 --> 00:46:00,780
hooks level uh the scan will take

989
00:46:00,780 --> 00:46:04,500
half a second uh and it will just pass

990
00:46:04,500 --> 00:46:08,280
or fail and if it fails in reality uh

991
00:46:08,280 --> 00:46:10,440
the detected Secrets will be very

992
00:46:10,440 --> 00:46:13,319
quickly removed by the developer but if

993
00:46:13,319 --> 00:46:15,319
it's even if it's one or two seconds

994
00:46:15,319 --> 00:46:18,119
they are saving lots of time on

995
00:46:18,119 --> 00:46:20,520
remediation later because when an

996
00:46:20,520 --> 00:46:22,859
application security engineer will send

997
00:46:22,859 --> 00:46:25,140
you a message to tell you hey I we had

998
00:46:25,140 --> 00:46:27,119
received an alert and you hard coded

999
00:46:27,119 --> 00:46:29,220
this secret it will take you a couple of

1000
00:46:29,220 --> 00:46:33,060
hours to revoke revoke the key rotate it

1001
00:46:33,060 --> 00:46:35,520
redeploy the applications make sure that

1002
00:46:35,520 --> 00:46:37,859
the secret is properly handled this time

1003
00:46:37,859 --> 00:46:40,740
so I think one second is acceptable in

1004
00:46:40,740 --> 00:46:42,140
terms of delay

1005
00:46:42,140 --> 00:46:46,140
thank you oh my God

1006
00:46:46,140 --> 00:46:50,700
I don't see any more questions in

1007
00:46:50,700 --> 00:46:53,779
on the chat

1008
00:46:55,619 --> 00:46:59,040
um the next so the next talk is in 12

1009
00:46:59,040 --> 00:47:01,200
minutes so you can take a small break if

1010
00:47:01,200 --> 00:47:04,319
you if you want thank you yet for your

1011
00:47:04,319 --> 00:47:05,760
for your time

1012
00:47:05,760 --> 00:47:09,780
so I will uh I will just uh turn off the

1013
00:47:09,780 --> 00:47:12,300
video for uh for the next uh for the

1014
00:47:12,300 --> 00:47:16,260
next minutes and we'll start again at uh

1015
00:47:16,260 --> 00:47:19,319
12 um 11 shop

1016
00:47:19,319 --> 00:47:19,920
um

1017
00:47:19,920 --> 00:47:25,079
for um for the next talk by Maura Corel

1018
00:47:25,079 --> 00:47:28,560
from White sources white Source on

1019
00:47:28,560 --> 00:47:31,140
shipping product is confident so in the

1020
00:47:31,140 --> 00:47:33,839
direct line of what you were presenting

1021
00:47:33,839 --> 00:47:37,380
thank you very much for your time and uh

1022
00:47:37,380 --> 00:47:40,740
take a break and uh we joined that at

1023
00:47:40,740 --> 00:47:42,540
the next station thank you see you later

1024
00:47:42,540 --> 00:47:45,020
bye

