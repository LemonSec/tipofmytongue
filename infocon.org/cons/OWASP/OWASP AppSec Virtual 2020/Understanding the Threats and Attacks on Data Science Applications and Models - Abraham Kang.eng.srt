1
00:00:00,160 --> 00:00:01,760
welcome to understanding the threats and

2
00:00:01,760 --> 00:00:06,160
attacks on data science applications

3
00:00:06,160 --> 00:00:08,160
i want to start with a special thanks to

4
00:00:08,160 --> 00:00:09,920
mon singh

5
00:00:09,920 --> 00:00:12,559
who's an expert in data streaming and

6
00:00:12,559 --> 00:00:14,480
data engineering and kunal patel who's

7
00:00:14,480 --> 00:00:15,839
an expert in machine learning and

8
00:00:15,839 --> 00:00:18,240
security

9
00:00:18,240 --> 00:00:20,720
for their help and input related to

10
00:00:20,720 --> 00:00:22,400
understanding data science and data

11
00:00:22,400 --> 00:00:26,080
streaming applications better

12
00:00:26,560 --> 00:00:28,560
so what i'm talking about today

13
00:00:28,560 --> 00:00:30,400
is one of the biggest

14
00:00:30,400 --> 00:00:32,238
blind spots

15
00:00:32,238 --> 00:00:33,520
and holes

16
00:00:33,520 --> 00:00:36,559
in most security programs

17
00:00:36,559 --> 00:00:39,120
across the enterprise

18
00:00:39,120 --> 00:00:42,960
and what i have up here is a picture of

19
00:00:42,960 --> 00:00:46,239
prototypical data science application

20
00:00:46,239 --> 00:00:48,079
where

21
00:00:48,079 --> 00:00:50,719
enterprises are looking to make better

22
00:00:50,719 --> 00:00:52,000
decisions

23
00:00:52,000 --> 00:00:54,239
and get better insights into how their

24
00:00:54,239 --> 00:00:56,840
business runs and how they interact with

25
00:00:56,840 --> 00:01:00,719
customers by collecting a lot of data

26
00:01:00,719 --> 00:01:03,520
about their customers their processes

27
00:01:03,520 --> 00:01:05,040
their systems

28
00:01:05,040 --> 00:01:08,080
feeding it into some type of

29
00:01:08,080 --> 00:01:10,240
aggregating bus

30
00:01:10,240 --> 00:01:13,200
or messaging queue like kafka

31
00:01:13,200 --> 00:01:16,320
and then processing that information

32
00:01:16,320 --> 00:01:20,400
via different tools like spark or flink

33
00:01:20,400 --> 00:01:23,759
and loading that data into other

34
00:01:23,759 --> 00:01:25,280
databases

35
00:01:25,280 --> 00:01:28,400
that can be used for analytics or

36
00:01:28,400 --> 00:01:33,280
decision making or customer insights

37
00:01:33,280 --> 00:01:37,520
and almost every company is undertaking

38
00:01:37,520 --> 00:01:41,600
this type of data science application

39
00:01:41,600 --> 00:01:43,439
i was in halal

40
00:01:43,439 --> 00:01:45,759
brothers the other day and i

41
00:01:45,759 --> 00:01:47,680
looked and noticed when i did a search

42
00:01:47,680 --> 00:01:49,600
on their data science openings they

43
00:01:49,600 --> 00:01:50,960
actually have

44
00:01:50,960 --> 00:01:52,399
a data science

45
00:01:52,399 --> 00:01:53,920
program and are looking for people in

46
00:01:53,920 --> 00:01:55,680
data science

47
00:01:55,680 --> 00:01:58,479
so you wouldn't imagine

48
00:01:58,479 --> 00:01:59,680
how

49
00:01:59,680 --> 00:02:01,040
prevalent

50
00:02:01,040 --> 00:02:03,600
this undertaking is within organizations

51
00:02:03,600 --> 00:02:05,280
the other thing i noticed is when i

52
00:02:05,280 --> 00:02:07,280
talked to a lot of my security

53
00:02:07,280 --> 00:02:09,360
friends

54
00:02:09,360 --> 00:02:11,440
you don't ever hear about them even

55
00:02:11,440 --> 00:02:13,920
looking at these components or

56
00:02:13,920 --> 00:02:16,560
understanding how these components work

57
00:02:16,560 --> 00:02:18,720
and today i'm going to give you

58
00:02:18,720 --> 00:02:21,360
an introduction and an understanding of

59
00:02:21,360 --> 00:02:23,120
what those threats are

60
00:02:23,120 --> 00:02:24,800
so that you can go back to your

61
00:02:24,800 --> 00:02:26,560
organizations and

62
00:02:26,560 --> 00:02:28,319
identify these threats

63
00:02:28,319 --> 00:02:30,319
and make your organization or enterprise

64
00:02:30,319 --> 00:02:32,958
more secure

65
00:02:35,280 --> 00:02:36,720
so

66
00:02:36,720 --> 00:02:38,480
the thing about these data science

67
00:02:38,480 --> 00:02:40,640
applications that makes them a little

68
00:02:40,640 --> 00:02:41,840
bit more

69
00:02:41,840 --> 00:02:44,800
concerning is that they make decisions

70
00:02:44,800 --> 00:02:46,560
in aggregate

71
00:02:46,560 --> 00:02:48,480
so any vulnerabilities that you have in

72
00:02:48,480 --> 00:02:50,080
these applications are going to

73
00:02:50,080 --> 00:02:51,519
inherently

74
00:02:51,519 --> 00:02:52,480
affect

75
00:02:52,480 --> 00:02:55,680
more users and possibly affect

76
00:02:55,680 --> 00:02:58,480
your company

77
00:03:00,400 --> 00:03:01,680
so

78
00:03:01,680 --> 00:03:05,360
when we talk about attacking

79
00:03:05,360 --> 00:03:07,519
a data science application and its

80
00:03:07,519 --> 00:03:10,480
attack surface

81
00:03:11,280 --> 00:03:14,560
the first thing that typically is

82
00:03:14,560 --> 00:03:16,319
looked at are its

83
00:03:16,319 --> 00:03:17,760
algorithms

84
00:03:17,760 --> 00:03:19,680
through its training data or attacking

85
00:03:19,680 --> 00:03:23,519
the algorithms through its training data

86
00:03:24,319 --> 00:03:26,400
the next thing is

87
00:03:26,400 --> 00:03:28,560
the infrastructure of that data science

88
00:03:28,560 --> 00:03:30,159
application so

89
00:03:30,159 --> 00:03:33,519
the kafka spark flank airflow kubernetes

90
00:03:33,519 --> 00:03:35,519
infrastructure components that make up

91
00:03:35,519 --> 00:03:38,879
the data science application

92
00:03:39,040 --> 00:03:42,159
the data science engineers are also part

93
00:03:42,159 --> 00:03:44,159
of the attack surface

94
00:03:44,159 --> 00:03:46,319
because they have access to the

95
00:03:46,319 --> 00:03:48,159
sensitive data and

96
00:03:48,159 --> 00:03:49,840
large amounts

97
00:03:49,840 --> 00:03:52,319
of data

98
00:03:52,319 --> 00:03:55,120
we also have developer tools that the

99
00:03:55,120 --> 00:03:57,680
data scientists use

100
00:03:57,680 --> 00:03:58,480
that

101
00:03:58,480 --> 00:04:00,480
provide an attack surface

102
00:04:00,480 --> 00:04:01,680
for

103
00:04:01,680 --> 00:04:03,120
the bad guys

104
00:04:03,120 --> 00:04:05,280
and then finally we have

105
00:04:05,280 --> 00:04:09,120
the data cleansing and preparation logic

106
00:04:09,120 --> 00:04:11,840
that as application security engineers

107
00:04:11,840 --> 00:04:14,400
we're so familiar with in terms of

108
00:04:14,400 --> 00:04:16,160
finding application security

109
00:04:16,160 --> 00:04:18,399
vulnerabilities

110
00:04:18,399 --> 00:04:20,079
so let's talk a little bit about

111
00:04:20,079 --> 00:04:22,560
attacking an algorithm's data so

112
00:04:22,560 --> 00:04:24,800
in the past i've been talking about

113
00:04:24,800 --> 00:04:26,479
attacking machine learning models

114
00:04:26,479 --> 00:04:28,400
through data poisoning

115
00:04:28,400 --> 00:04:30,320
and you see a lot of papers talking

116
00:04:30,320 --> 00:04:32,720
about turning fishes into dogs and dogs

117
00:04:32,720 --> 00:04:34,160
into fishes

118
00:04:34,160 --> 00:04:35,680
or getting the classification of the

119
00:04:35,680 --> 00:04:37,840
model to take a picture of a dog and

120
00:04:37,840 --> 00:04:40,840
turn it into a fish or vice versa

121
00:04:40,840 --> 00:04:43,919
but when you look about that

122
00:04:43,919 --> 00:04:45,759
really when we're talking about

123
00:04:45,759 --> 00:04:47,919
attacking algorithms data it's more than

124
00:04:47,919 --> 00:04:50,960
just pictures

125
00:04:51,199 --> 00:04:52,720
so

126
00:04:52,720 --> 00:04:53,840
when you

127
00:04:53,840 --> 00:04:56,479
think about the realistic

128
00:04:56,479 --> 00:04:58,800
ability of an attacker to

129
00:04:58,800 --> 00:05:01,919
insert data into your training data

130
00:05:01,919 --> 00:05:04,639
directly it's probably

131
00:05:04,639 --> 00:05:07,199
not that

132
00:05:07,280 --> 00:05:10,639
high a probability

133
00:05:10,639 --> 00:05:11,600
but

134
00:05:11,600 --> 00:05:14,000
when you look at the picture down at the

135
00:05:14,000 --> 00:05:16,240
right

136
00:05:17,199 --> 00:05:18,880
and you look at

137
00:05:18,880 --> 00:05:20,800
the inputs to the system which are on

138
00:05:20,800 --> 00:05:23,960
the left

139
00:05:24,000 --> 00:05:26,880
what two areas do you see

140
00:05:26,880 --> 00:05:28,639
that would be prime

141
00:05:28,639 --> 00:05:29,840
targets

142
00:05:29,840 --> 00:05:34,239
to insert your poison data

143
00:05:35,280 --> 00:05:38,160
if you look at these data sources that

144
00:05:38,160 --> 00:05:41,680
would be one right the sensors the

145
00:05:41,680 --> 00:05:43,600
you know the

146
00:05:43,600 --> 00:05:45,360
information that's mined from the web

147
00:05:45,360 --> 00:05:47,440
logs the

148
00:05:47,440 --> 00:05:49,680
you can get to the server file system

149
00:05:49,680 --> 00:05:53,280
that has the the files that

150
00:05:53,280 --> 00:05:54,560
that are read

151
00:05:54,560 --> 00:05:55,680
by the

152
00:05:55,680 --> 00:05:57,600
data ingestion engine

153
00:05:57,600 --> 00:05:59,680
you know like kafka

154
00:05:59,680 --> 00:06:01,840
then you can modify there the other

155
00:06:01,840 --> 00:06:04,800
place you can insert data is directly

156
00:06:04,800 --> 00:06:07,759
into data ingestion engine if it's not

157
00:06:07,759 --> 00:06:10,720
secured properly

158
00:06:14,319 --> 00:06:16,479
so let's talk about some examples of

159
00:06:16,479 --> 00:06:18,800
this because

160
00:06:18,800 --> 00:06:21,360
when you think about it

161
00:06:21,360 --> 00:06:24,080
it seems kind of

162
00:06:24,080 --> 00:06:26,560
you know impossible but

163
00:06:26,560 --> 00:06:30,319
there are actual cases where

164
00:06:30,720 --> 00:06:32,400
there was a stock

165
00:06:32,400 --> 00:06:35,440
trading program which basically

166
00:06:35,440 --> 00:06:38,080
was an algorithmic based

167
00:06:38,080 --> 00:06:39,199
automated

168
00:06:39,199 --> 00:06:40,560
programming

169
00:06:40,560 --> 00:06:42,960
or automated buy and sell

170
00:06:42,960 --> 00:06:45,039
stock trading algorithm which was

171
00:06:45,039 --> 00:06:46,840
looking

172
00:06:46,840 --> 00:06:49,840
for patterns and behavior

173
00:06:49,840 --> 00:06:50,960
and what

174
00:06:50,960 --> 00:06:52,960
the other stock trading algorithms which

175
00:06:52,960 --> 00:06:54,639
was trying to fool it would do would

176
00:06:54,639 --> 00:06:55,759
basically

177
00:06:55,759 --> 00:06:57,039
submit

178
00:06:57,039 --> 00:06:59,599
thousands of buy or sell orders and then

179
00:06:59,599 --> 00:07:01,120
cancel them

180
00:07:01,120 --> 00:07:03,199
within a millisecond

181
00:07:03,199 --> 00:07:05,680
and what would happen is that

182
00:07:05,680 --> 00:07:06,560
those

183
00:07:06,560 --> 00:07:10,560
algorithms that looked for a lot of

184
00:07:10,560 --> 00:07:13,360
quick buy and sell orders

185
00:07:13,360 --> 00:07:16,960
would then put in their orders and

186
00:07:16,960 --> 00:07:18,960
the system that was fooling them would

187
00:07:18,960 --> 00:07:20,319
cancel them

188
00:07:20,319 --> 00:07:21,680
and then trick

189
00:07:21,680 --> 00:07:25,199
the other system into basically

190
00:07:25,199 --> 00:07:28,560
behaving in the way they wanted

191
00:07:28,639 --> 00:07:29,520
and

192
00:07:29,520 --> 00:07:31,599
if you look at

193
00:07:31,599 --> 00:07:34,880
another stock trading algorithm

194
00:07:34,880 --> 00:07:38,160
basically it was trying to look at

195
00:07:38,160 --> 00:07:40,400
tweets or postings on different

196
00:07:40,400 --> 00:07:42,319
financial websites within a defined

197
00:07:42,319 --> 00:07:44,560
period

198
00:07:44,560 --> 00:07:45,520
and

199
00:07:45,520 --> 00:07:46,639
if they

200
00:07:46,639 --> 00:07:48,560
did sentiment analysis where they

201
00:07:48,560 --> 00:07:50,800
basically identified the stock name and

202
00:07:50,800 --> 00:07:53,440
if the posting was positive

203
00:07:53,440 --> 00:07:55,120
or negative

204
00:07:55,120 --> 00:07:56,479
and if there were a lot of them in a

205
00:07:56,479 --> 00:07:58,879
short period of time it would trigger

206
00:07:58,879 --> 00:08:01,919
the buying or selling of

207
00:08:01,919 --> 00:08:04,639
stock by these automated

208
00:08:04,639 --> 00:08:06,560
algorithms

209
00:08:06,560 --> 00:08:08,800
and so actually there were people

210
00:08:08,800 --> 00:08:10,240
manufacturing

211
00:08:10,240 --> 00:08:13,520
these stories and tweets with bots and

212
00:08:13,520 --> 00:08:15,039
that would trigger

213
00:08:15,039 --> 00:08:17,759
the algorithm

214
00:08:18,560 --> 00:08:20,080
the other thing

215
00:08:20,080 --> 00:08:21,280
that

216
00:08:21,280 --> 00:08:23,759
i think is possible and that

217
00:08:23,759 --> 00:08:26,639
may have may be occurring even to this

218
00:08:26,639 --> 00:08:29,440
day but it's not talked about is how

219
00:08:29,440 --> 00:08:31,120
cyber espionage

220
00:08:31,120 --> 00:08:32,399
can be used

221
00:08:32,399 --> 00:08:33,919
to

222
00:08:33,919 --> 00:08:36,240
basically mess with the sensors and

223
00:08:36,240 --> 00:08:37,440
information

224
00:08:37,440 --> 00:08:38,399
that

225
00:08:38,399 --> 00:08:40,399
your system is using in real-time

226
00:08:40,399 --> 00:08:42,640
decision-making processes

227
00:08:42,640 --> 00:08:45,519
imagine a manufacturing plant where

228
00:08:45,519 --> 00:08:47,519
sensor someone's hacked their network

229
00:08:47,519 --> 00:08:50,959
and goes in and is now

230
00:08:50,959 --> 00:08:53,600
creating false sensor information and

231
00:08:53,600 --> 00:08:56,240
if you look at manufacturing systems

232
00:08:56,240 --> 00:08:59,120
they're very similar to robotics

233
00:08:59,120 --> 00:09:01,279
and autonomous vehicle in that

234
00:09:01,279 --> 00:09:02,880
everything is published and subscribed

235
00:09:02,880 --> 00:09:04,399
because they want everything loosely

236
00:09:04,399 --> 00:09:05,680
coupled

237
00:09:05,680 --> 00:09:07,760
and so you're dealing with

238
00:09:07,760 --> 00:09:09,680
a lot of the same

239
00:09:09,680 --> 00:09:11,200
components

240
00:09:11,200 --> 00:09:13,519
that are in data science applications

241
00:09:13,519 --> 00:09:14,959
namely

242
00:09:14,959 --> 00:09:17,519
messaging buses like kafka

243
00:09:17,519 --> 00:09:18,959
which then allow

244
00:09:18,959 --> 00:09:22,439
different manufacturing

245
00:09:22,480 --> 00:09:24,800
parts to be loosely coupled and

246
00:09:24,800 --> 00:09:27,519
introduced and pulled out and replaced

247
00:09:27,519 --> 00:09:30,880
pretty easily versus trying to integrate

248
00:09:30,880 --> 00:09:32,880
specific

249
00:09:32,880 --> 00:09:35,120
component protocols

250
00:09:35,120 --> 00:09:39,839
and connection mechanisms and so

251
00:09:39,839 --> 00:09:41,680
this whole kafka thing

252
00:09:41,680 --> 00:09:43,519
is going to be around and is going to

253
00:09:43,519 --> 00:09:44,800
get bigger

254
00:09:44,800 --> 00:09:46,160
and

255
00:09:46,160 --> 00:09:47,760
going to be more important in your

256
00:09:47,760 --> 00:09:50,080
enterprises as you move forward because

257
00:09:50,080 --> 00:09:52,640
of its ability to provide

258
00:09:52,640 --> 00:09:54,160
loosely coupled

259
00:09:54,160 --> 00:09:56,160
information to systems

260
00:09:56,160 --> 00:09:58,880
across the enterprise that need it and

261
00:09:58,880 --> 00:10:01,680
share information

262
00:10:02,800 --> 00:10:04,720
so when we look

263
00:10:04,720 --> 00:10:07,120
at now attacking the data science

264
00:10:07,120 --> 00:10:09,760
infrastructure

265
00:10:10,079 --> 00:10:11,440
you think about all these different

266
00:10:11,440 --> 00:10:13,120
tools that are used in data science

267
00:10:13,120 --> 00:10:16,839
applications kafka spark flank air flow

268
00:10:16,839 --> 00:10:19,200
kubernetes and

269
00:10:19,200 --> 00:10:21,200
spark is probably one of the most

270
00:10:21,200 --> 00:10:22,399
popular

271
00:10:22,399 --> 00:10:24,560
data science tools

272
00:10:24,560 --> 00:10:25,600
out there

273
00:10:25,600 --> 00:10:26,480
and

274
00:10:26,480 --> 00:10:28,399
in their security documentation

275
00:10:28,399 --> 00:10:31,279
literally the first paragraph before

276
00:10:31,279 --> 00:10:33,360
anything is talked about in their spark

277
00:10:33,360 --> 00:10:36,480
security documentation it says security

278
00:10:36,480 --> 00:10:39,120
and spark is off by default this could

279
00:10:39,120 --> 00:10:40,640
mean you are vulnerable to attack by

280
00:10:40,640 --> 00:10:42,640
default spark supports multiple

281
00:10:42,640 --> 00:10:44,560
deployment types and each one supports

282
00:10:44,560 --> 00:10:46,560
different levels of security not all

283
00:10:46,560 --> 00:10:48,240
deployment types will be secure in all

284
00:10:48,240 --> 00:10:50,240
environments and none are secure by

285
00:10:50,240 --> 00:10:51,360
default

286
00:10:51,360 --> 00:10:53,279
be sure to evaluate your environment

287
00:10:53,279 --> 00:10:54,640
what spark supports and take the

288
00:10:54,640 --> 00:10:56,240
appropriate measures to secure your

289
00:10:56,240 --> 00:10:57,600
spark deployment

290
00:10:57,600 --> 00:10:59,360
now i don't know about you but i think

291
00:10:59,360 --> 00:11:03,760
that is a kind of big disclaimer

292
00:11:03,760 --> 00:11:06,720
and so as security professionals when

293
00:11:06,720 --> 00:11:09,279
you read something like this

294
00:11:09,279 --> 00:11:11,519
you need to be prepared because

295
00:11:11,519 --> 00:11:13,279
essentially

296
00:11:13,279 --> 00:11:15,360
spark is saying hey if you use our stuff

297
00:11:15,360 --> 00:11:16,959
it's all on you

298
00:11:16,959 --> 00:11:19,200
and you better take notice

299
00:11:19,200 --> 00:11:21,600
to secure this stuff because

300
00:11:21,600 --> 00:11:22,720
we admit

301
00:11:22,720 --> 00:11:25,200
we're not securing the stuff by default

302
00:11:25,200 --> 00:11:26,959
and you need to take this appropriate

303
00:11:26,959 --> 00:11:29,760
steps so

304
00:11:29,760 --> 00:11:31,600
if you're using spark or any of these

305
00:11:31,600 --> 00:11:33,040
other things

306
00:11:33,040 --> 00:11:35,040
you need to

307
00:11:35,040 --> 00:11:37,600
look at the security of those different

308
00:11:37,600 --> 00:11:39,839
data science applications

309
00:11:39,839 --> 00:11:41,040
because

310
00:11:41,040 --> 00:11:44,959
this statement means it's all on you

311
00:11:46,399 --> 00:11:48,240
so when we look at securing

312
00:11:48,240 --> 00:11:50,240
data science infrastructure

313
00:11:50,240 --> 00:11:51,839
you have to look at all of the

314
00:11:51,839 --> 00:11:54,320
components in that infrastructure you

315
00:11:54,320 --> 00:11:55,120
know

316
00:11:55,120 --> 00:11:56,800
you have to look at how

317
00:11:56,800 --> 00:11:58,079
the

318
00:11:58,079 --> 00:12:00,320
managers and the executors and the

319
00:12:00,320 --> 00:12:02,320
drivers communicate

320
00:12:02,320 --> 00:12:05,600
what role each component plays in each

321
00:12:05,600 --> 00:12:07,519
of these different tools how they

322
00:12:07,519 --> 00:12:09,040
communicate how they authenticate to

323
00:12:09,040 --> 00:12:11,120
each other

324
00:12:11,120 --> 00:12:12,399
and

325
00:12:12,399 --> 00:12:14,399
you know it's so important to look at

326
00:12:14,399 --> 00:12:15,920
these important internal components you

327
00:12:15,920 --> 00:12:16,880
can't just

328
00:12:16,880 --> 00:12:17,760
say

329
00:12:17,760 --> 00:12:20,320
oh i've got kafka and it's here you need

330
00:12:20,320 --> 00:12:22,880
to understand how

331
00:12:22,880 --> 00:12:23,680
and

332
00:12:23,680 --> 00:12:24,720
how the

333
00:12:24,720 --> 00:12:26,959
components work together how they

334
00:12:26,959 --> 00:12:29,120
authenticate to each other

335
00:12:29,120 --> 00:12:30,720
and how do they communicate if you're

336
00:12:30,720 --> 00:12:33,279
dealing with data

337
00:12:33,279 --> 00:12:34,800
a lot of times

338
00:12:34,800 --> 00:12:37,120
there may be sensitive data in the data

339
00:12:37,120 --> 00:12:38,560
that's being processed so you need to

340
00:12:38,560 --> 00:12:41,518
make sure that the data

341
00:12:42,000 --> 00:12:46,399
in motion is going to be secure and

342
00:12:46,639 --> 00:12:49,040
then you need to also

343
00:12:49,040 --> 00:12:50,560
think about

344
00:12:50,560 --> 00:12:53,360
how these components connect

345
00:12:53,360 --> 00:12:54,240
to

346
00:12:54,240 --> 00:12:56,399
internal data sources

347
00:12:56,399 --> 00:12:58,240
the source components will pull data

348
00:12:58,240 --> 00:12:59,040
from

349
00:12:59,040 --> 00:13:01,040
possibly sensitive data sources and the

350
00:13:01,040 --> 00:13:03,760
sync components will possibly write

351
00:13:03,760 --> 00:13:05,519
to sensitive data source

352
00:13:05,519 --> 00:13:07,200
so you need to

353
00:13:07,200 --> 00:13:08,800
understand how

354
00:13:08,800 --> 00:13:10,480
they're going to

355
00:13:10,480 --> 00:13:14,160
connect to these data stores

356
00:13:14,399 --> 00:13:16,560
if your components are cloud based

357
00:13:16,560 --> 00:13:17,839
how are they protected from third

358
00:13:17,839 --> 00:13:20,800
parties what type of

359
00:13:20,800 --> 00:13:24,560
security measures are you using for your

360
00:13:24,560 --> 00:13:27,120
you know kinesis or

361
00:13:27,120 --> 00:13:28,880
kafka in the cloud

362
00:13:28,880 --> 00:13:30,880
and how are they protected you know what

363
00:13:30,880 --> 00:13:32,639
are your security groups

364
00:13:32,639 --> 00:13:35,839
how are they configured

365
00:13:37,120 --> 00:13:39,440
and then you have to look at

366
00:13:39,440 --> 00:13:42,720
what data you're passing around

367
00:13:42,720 --> 00:13:45,600
and if there's sensitive data in that

368
00:13:45,600 --> 00:13:49,440
and then asking yourself wow because

369
00:13:49,440 --> 00:13:51,600
ideally you want to

370
00:13:51,600 --> 00:13:54,560
scrub the data of all the sensitive data

371
00:13:54,560 --> 00:13:56,959
and if you pass around sensitive data

372
00:13:56,959 --> 00:13:58,160
then

373
00:13:58,160 --> 00:14:01,199
you're creating a nightmare for

374
00:14:01,199 --> 00:14:03,440
governance because

375
00:14:03,440 --> 00:14:06,079
once you put data on the bus

376
00:14:06,079 --> 00:14:08,720
any other systems that need it or want

377
00:14:08,720 --> 00:14:10,240
it

378
00:14:10,240 --> 00:14:12,800
can get it

379
00:14:13,360 --> 00:14:15,519
and where does that sensitive data flow

380
00:14:15,519 --> 00:14:18,079
and how is it protected so

381
00:14:18,079 --> 00:14:19,680
you've got to understand

382
00:14:19,680 --> 00:14:22,560
what other systems are

383
00:14:22,560 --> 00:14:24,000
using that data

384
00:14:24,000 --> 00:14:25,279
and how they're protecting that

385
00:14:25,279 --> 00:14:27,279
sensitive data

386
00:14:27,279 --> 00:14:29,360
and do they even have permission

387
00:14:29,360 --> 00:14:31,199
to access and use the data for the

388
00:14:31,199 --> 00:14:33,360
specific specified purpose

389
00:14:33,360 --> 00:14:35,680
when you look at gdpr

390
00:14:35,680 --> 00:14:37,519
and other

391
00:14:37,519 --> 00:14:39,600
privacy regulation

392
00:14:39,600 --> 00:14:44,519
consent is a very important thing

393
00:14:44,959 --> 00:14:46,880
and finally you want to understand how

394
00:14:46,880 --> 00:14:49,040
your secrets and credentials are managed

395
00:14:49,040 --> 00:14:50,480
by the infrastructure components so

396
00:14:50,480 --> 00:14:52,399
they're going to connect to sensitive

397
00:14:52,399 --> 00:14:54,079
data stores

398
00:14:54,079 --> 00:14:55,519
they're going to have to authenticate so

399
00:14:55,519 --> 00:14:58,560
how do you manage those credentials that

400
00:14:58,560 --> 00:15:00,320
are used by the components to connect

401
00:15:00,320 --> 00:15:02,079
and authenticate to

402
00:15:02,079 --> 00:15:05,599
those different stores

403
00:15:06,480 --> 00:15:08,800
the third attack surface

404
00:15:08,800 --> 00:15:10,079
for

405
00:15:10,079 --> 00:15:11,839
data science applications are the data

406
00:15:11,839 --> 00:15:14,079
science engineers themselves

407
00:15:14,079 --> 00:15:15,760
i went to

408
00:15:15,760 --> 00:15:18,240
linkedin and i basically searched for

409
00:15:18,240 --> 00:15:19,519
data science

410
00:15:19,519 --> 00:15:21,920
amazon and

411
00:15:21,920 --> 00:15:22,880
you can

412
00:15:22,880 --> 00:15:24,720
get a lot of information

413
00:15:24,720 --> 00:15:26,320
off there

414
00:15:26,320 --> 00:15:29,600
and learn about

415
00:15:29,600 --> 00:15:31,600
who in the organized

416
00:15:31,600 --> 00:15:33,600
organization is

417
00:15:33,600 --> 00:15:35,360
basically the data scientists and data

418
00:15:35,360 --> 00:15:37,680
scientists have access to

419
00:15:37,680 --> 00:15:39,600
reams of

420
00:15:39,600 --> 00:15:41,839
data

421
00:15:42,079 --> 00:15:44,560
so consider this scenario oh you know

422
00:15:44,560 --> 00:15:47,920
what in your data scientist got pwn

423
00:15:47,920 --> 00:15:50,240
oh no you know the data lake with 100

424
00:15:50,240 --> 00:15:52,160
million user records was exfiltrated

425
00:15:52,160 --> 00:15:55,560
from their machine

426
00:15:55,839 --> 00:15:56,959
so

427
00:15:56,959 --> 00:15:58,160
attackers

428
00:15:58,160 --> 00:16:00,160
no longer need to

429
00:16:00,160 --> 00:16:02,720
break into the back end of your dmz

430
00:16:02,720 --> 00:16:05,279
and the firewall and avoid the ids and

431
00:16:05,279 --> 00:16:07,759
ips these need to compromise a data

432
00:16:07,759 --> 00:16:10,480
analyst machine

433
00:16:14,880 --> 00:16:17,120
the other thing that data scientists do

434
00:16:17,120 --> 00:16:19,360
is when they get the data that they need

435
00:16:19,360 --> 00:16:21,360
to work on

436
00:16:21,360 --> 00:16:24,480
they may put it on a s3 bucket to share

437
00:16:24,480 --> 00:16:26,800
with other members of their team

438
00:16:26,800 --> 00:16:29,920
well if you don't lock down

439
00:16:29,920 --> 00:16:31,680
those s3 buckets

440
00:16:31,680 --> 00:16:33,199
what happens when it's accessed by

441
00:16:33,199 --> 00:16:36,680
anonymous users

442
00:16:37,519 --> 00:16:39,120
so you need to have some type of

443
00:16:39,120 --> 00:16:40,560
enforcement

444
00:16:40,560 --> 00:16:42,320
or security policy around your data

445
00:16:42,320 --> 00:16:43,360
scientists

446
00:16:43,360 --> 00:16:46,880
use and sharing of data

447
00:16:47,440 --> 00:16:49,759
and you have to understand

448
00:16:49,759 --> 00:16:52,079
if and when they're going to be taking

449
00:16:52,079 --> 00:16:53,839
data

450
00:16:53,839 --> 00:16:55,279
from the data lake to their local

451
00:16:55,279 --> 00:16:58,160
machines to work on locally

452
00:16:58,160 --> 00:17:01,040
and if that data is further shared where

453
00:17:01,040 --> 00:17:03,839
does it go how is it managed when is it

454
00:17:03,839 --> 00:17:06,319
deleted

455
00:17:09,280 --> 00:17:11,679
the next area that typically is an

456
00:17:11,679 --> 00:17:13,199
attack surface for data science

457
00:17:13,199 --> 00:17:15,679
applications are the tools themselves so

458
00:17:15,679 --> 00:17:18,959
jupiter is a very popular tool

459
00:17:18,959 --> 00:17:21,199
and basically what it does it allows you

460
00:17:21,199 --> 00:17:23,599
to execute code written in your browser

461
00:17:23,599 --> 00:17:25,039
on a

462
00:17:25,039 --> 00:17:26,880
server machine and it could be your own

463
00:17:26,880 --> 00:17:28,160
mission

464
00:17:28,160 --> 00:17:31,440
but it's it provides a nice environment

465
00:17:31,440 --> 00:17:33,679
to make things easier

466
00:17:33,679 --> 00:17:36,080
for data scientists to set up everything

467
00:17:36,080 --> 00:17:37,520
and

468
00:17:37,520 --> 00:17:40,400
write their code and document it and

469
00:17:40,400 --> 00:17:42,240
put it in a format that can be easily

470
00:17:42,240 --> 00:17:43,360
shared

471
00:17:43,360 --> 00:17:45,600
now

472
00:17:45,760 --> 00:17:48,880
listen to those words that i said

473
00:17:48,880 --> 00:17:51,840
execute code written in your browser on

474
00:17:51,840 --> 00:17:54,400
a server machine

475
00:17:54,400 --> 00:17:56,640
basically this has turned remote code

476
00:17:56,640 --> 00:18:01,320
execution from a bug into a feature

477
00:18:01,760 --> 00:18:05,039
so the problem that

478
00:18:05,039 --> 00:18:07,600
you see mostly is that data science will

479
00:18:07,600 --> 00:18:09,919
set up their jupiter servers

480
00:18:09,919 --> 00:18:11,600
don't have the time or inclination to

481
00:18:11,600 --> 00:18:13,280
set up the valid certificate signing

482
00:18:13,280 --> 00:18:14,880
request and go through the red tape of

483
00:18:14,880 --> 00:18:16,880
requesting ssl certificate from internal

484
00:18:16,880 --> 00:18:18,640
processes to set up

485
00:18:18,640 --> 00:18:19,760
appropriate

486
00:18:19,760 --> 00:18:21,520
domain name

487
00:18:21,520 --> 00:18:22,480
and

488
00:18:22,480 --> 00:18:25,840
so what happens is that

489
00:18:25,919 --> 00:18:30,720
if developers are not using ssl then

490
00:18:30,720 --> 00:18:32,720
an attacker who's on the network can

491
00:18:32,720 --> 00:18:35,200
easily sniff

492
00:18:35,200 --> 00:18:37,440
the credentials going back and forth

493
00:18:37,440 --> 00:18:38,799
if they're using

494
00:18:38,799 --> 00:18:41,760
username and password

495
00:18:41,760 --> 00:18:42,720
and

496
00:18:42,720 --> 00:18:46,000
get into that machine

497
00:18:46,000 --> 00:18:48,320
if they're using their credentials then

498
00:18:48,320 --> 00:18:50,160
basically

499
00:18:50,160 --> 00:18:52,480
they can use those credentials to log

500
00:18:52,480 --> 00:18:56,760
into other network resources

501
00:18:57,679 --> 00:18:59,919
the other thing is since we're here

502
00:18:59,919 --> 00:19:02,000
talking about application security

503
00:19:02,000 --> 00:19:04,160
a common practice

504
00:19:04,160 --> 00:19:06,880
among these jupiter notebooks and the

505
00:19:06,880 --> 00:19:07,919
models

506
00:19:07,919 --> 00:19:09,280
is to

507
00:19:09,280 --> 00:19:10,400
use pickle

508
00:19:10,400 --> 00:19:11,440
load

509
00:19:11,440 --> 00:19:14,799
or job live dot load to serialize or

510
00:19:14,799 --> 00:19:16,480
deserialize

511
00:19:16,480 --> 00:19:19,120
the models or the data associated with

512
00:19:19,120 --> 00:19:21,120
the notebooks

513
00:19:21,120 --> 00:19:22,240
and

514
00:19:22,240 --> 00:19:25,760
if an attacker can basically write to

515
00:19:25,760 --> 00:19:27,280
these files

516
00:19:27,280 --> 00:19:28,640
they can insert

517
00:19:28,640 --> 00:19:32,240
commands that can be executed in pickle

518
00:19:32,240 --> 00:19:34,320
when it's serialized

519
00:19:34,320 --> 00:19:36,160
and i provided a link there this has

520
00:19:36,160 --> 00:19:38,880
been a known issue for a long time and

521
00:19:38,880 --> 00:19:41,440
the serialization attacks are

522
00:19:41,440 --> 00:19:42,400
very

523
00:19:42,400 --> 00:19:44,480
important and

524
00:19:44,480 --> 00:19:47,520
a common unfortunate

525
00:19:47,520 --> 00:19:49,520
security vulnerability that is very

526
00:19:49,520 --> 00:19:52,520
prevalent

527
00:19:53,280 --> 00:19:55,679
so finally we're going to look at the

528
00:19:55,679 --> 00:19:57,120
attacking the data cleansing and

529
00:19:57,120 --> 00:20:00,000
preparation logic so

530
00:20:00,000 --> 00:20:02,880
you have a situation where

531
00:20:02,880 --> 00:20:04,960
you've got this data it's got to be

532
00:20:04,960 --> 00:20:07,280
cleansed it's got to be pulled in it's

533
00:20:07,280 --> 00:20:08,960
got to be cleansed it's got to be

534
00:20:08,960 --> 00:20:12,000
enriched and then it's got to be

535
00:20:12,000 --> 00:20:14,480
pushed on to different systems that want

536
00:20:14,480 --> 00:20:15,679
that data

537
00:20:15,679 --> 00:20:18,240
and typically you're looking at three

538
00:20:18,240 --> 00:20:19,840
high-level components you're looking at

539
00:20:19,840 --> 00:20:21,440
sources

540
00:20:21,440 --> 00:20:23,200
processing components

541
00:20:23,200 --> 00:20:26,640
and syncs and these are chained together

542
00:20:26,640 --> 00:20:28,640
to create a pipeline

543
00:20:28,640 --> 00:20:31,200
now let's talk about sources

544
00:20:31,200 --> 00:20:33,200
so basically sources are components that

545
00:20:33,200 --> 00:20:35,280
pull data from databases

546
00:20:35,280 --> 00:20:39,200
files messaging queues s3 buckets

547
00:20:39,200 --> 00:20:42,000
and they can be batch or stream based

548
00:20:42,000 --> 00:20:44,240
batch typically means

549
00:20:44,240 --> 00:20:45,919
you have a file

550
00:20:45,919 --> 00:20:48,000
and you're loading that file and

551
00:20:48,000 --> 00:20:49,120
processing

552
00:20:49,120 --> 00:20:50,240
it

553
00:20:50,240 --> 00:20:52,799
stream based is where basically

554
00:20:52,799 --> 00:20:55,919
you're receiving events from some source

555
00:20:55,919 --> 00:20:57,360
some sensors

556
00:20:57,360 --> 00:21:00,159
web logs etc and you're processing them

557
00:21:00,159 --> 00:21:02,240
in real time

558
00:21:02,240 --> 00:21:04,240
now let me ask you which do you think

559
00:21:04,240 --> 00:21:07,360
has more vulnerabilities

560
00:21:07,360 --> 00:21:09,919
well of the two models

561
00:21:09,919 --> 00:21:11,840
it typically happens that

562
00:21:11,840 --> 00:21:13,919
streaming based applications have more

563
00:21:13,919 --> 00:21:15,280
vulnerabilities

564
00:21:15,280 --> 00:21:16,720
because the source

565
00:21:16,720 --> 00:21:18,720
of the untrusted data is closer to a

566
00:21:18,720 --> 00:21:20,400
potential attacker

567
00:21:20,400 --> 00:21:23,440
so an attacker is not going to have

568
00:21:23,440 --> 00:21:25,919
the data file extract to modify and

569
00:21:25,919 --> 00:21:27,760
insert their

570
00:21:27,760 --> 00:21:29,280
payloads into

571
00:21:29,280 --> 00:21:30,480
however

572
00:21:30,480 --> 00:21:31,760
an attacker

573
00:21:31,760 --> 00:21:33,280
can

574
00:21:33,280 --> 00:21:36,399
basically insert

575
00:21:36,559 --> 00:21:38,559
their attack payloads into the web

576
00:21:38,559 --> 00:21:40,240
application logs through their usage of

577
00:21:40,240 --> 00:21:42,159
the application

578
00:21:42,159 --> 00:21:43,200
or

579
00:21:43,200 --> 00:21:44,400
user feedback

580
00:21:44,400 --> 00:21:46,080
or

581
00:21:46,080 --> 00:21:49,760
looking at the urls that are being sent

582
00:21:49,760 --> 00:21:51,760
to the backend systems for their app

583
00:21:51,760 --> 00:21:54,960
usage or the iot sensor values that are

584
00:21:54,960 --> 00:21:58,200
being sent

585
00:21:58,480 --> 00:21:59,440
and so

586
00:21:59,440 --> 00:22:01,360
the sources are

587
00:22:01,360 --> 00:22:04,720
the location where typically the streams

588
00:22:04,720 --> 00:22:06,080
of input

589
00:22:06,080 --> 00:22:08,559
from a messaging infrastructure are

590
00:22:08,559 --> 00:22:10,640
typically converted into objects to be

591
00:22:10,640 --> 00:22:13,679
passed to processing components

592
00:22:13,679 --> 00:22:16,000
for so you want to be really careful

593
00:22:16,000 --> 00:22:17,679
about looking for the serialization

594
00:22:17,679 --> 00:22:21,919
vulnerabilities in these components

595
00:22:22,320 --> 00:22:23,520
and

596
00:22:23,520 --> 00:22:25,520
the sources once they convert these

597
00:22:25,520 --> 00:22:29,200
objects i mean the streams into objects

598
00:22:29,200 --> 00:22:31,360
they'll pass them down to processing

599
00:22:31,360 --> 00:22:33,440
components that they are connected to as

600
00:22:33,440 --> 00:22:35,280
a part of the pipeline

601
00:22:35,280 --> 00:22:36,480
so let's talk about processing

602
00:22:36,480 --> 00:22:37,679
components

603
00:22:37,679 --> 00:22:40,159
they receive data from sources and

604
00:22:40,159 --> 00:22:42,240
process or enrich

605
00:22:42,240 --> 00:22:44,799
the data

606
00:22:46,240 --> 00:22:49,760
so what does it mean to enrich the data

607
00:22:49,760 --> 00:22:50,880
basically

608
00:22:50,880 --> 00:22:52,000
you can

609
00:22:52,000 --> 00:22:55,200
you're taking data from other systems

610
00:22:55,200 --> 00:22:56,720
and you're trying to

611
00:22:56,720 --> 00:22:58,400
add more data

612
00:22:58,400 --> 00:22:59,840
to

613
00:22:59,840 --> 00:23:02,080
the existing data

614
00:23:02,080 --> 00:23:03,919
and then

615
00:23:03,919 --> 00:23:04,960
when you

616
00:23:04,960 --> 00:23:06,799
do this

617
00:23:06,799 --> 00:23:07,600
you're

618
00:23:07,600 --> 00:23:09,440
you're using the data that you received

619
00:23:09,440 --> 00:23:10,880
in the objects

620
00:23:10,880 --> 00:23:12,159
and so

621
00:23:12,159 --> 00:23:14,799
basically what you have are the normal

622
00:23:14,799 --> 00:23:16,799
application security vulnerabilities in

623
00:23:16,799 --> 00:23:18,640
these moments you know the sql injection

624
00:23:18,640 --> 00:23:22,000
the file path manipulation all that is

625
00:23:22,000 --> 00:23:23,919
going to be found in here

626
00:23:23,919 --> 00:23:26,480
because this is where kind of the

627
00:23:26,480 --> 00:23:29,600
bulk of the business logic for how data

628
00:23:29,600 --> 00:23:31,440
cleansing and enrichment occurs and it's

629
00:23:31,440 --> 00:23:32,559
going to be connecting to all these

630
00:23:32,559 --> 00:23:34,080
different systems

631
00:23:34,080 --> 00:23:36,080
you know it could also make other calls

632
00:23:36,080 --> 00:23:37,360
to rest applications so you have

633
00:23:37,360 --> 00:23:38,640
server-side requests for three

634
00:23:38,640 --> 00:23:39,919
possibilities

635
00:23:39,919 --> 00:23:41,200
so

636
00:23:41,200 --> 00:23:42,799
you're going to look for those

637
00:23:42,799 --> 00:23:44,400
vulnerabilities there

638
00:23:44,400 --> 00:23:45,440
syncs

639
00:23:45,440 --> 00:23:46,880
are basically

640
00:23:46,880 --> 00:23:48,720
what receive the objects from the

641
00:23:48,720 --> 00:23:50,559
processing processing and cleansing

642
00:23:50,559 --> 00:23:51,919
logic

643
00:23:51,919 --> 00:23:54,559
and then basically the sinks are going

644
00:23:54,559 --> 00:23:55,679
to push

645
00:23:55,679 --> 00:23:57,279
these objects

646
00:23:57,279 --> 00:23:59,200
to other

647
00:23:59,200 --> 00:24:02,400
messaging queues databases or the data

648
00:24:02,400 --> 00:24:05,120
and the objects to other databases files

649
00:24:05,120 --> 00:24:06,640
s3 buckets

650
00:24:06,640 --> 00:24:09,440
for other downstream applications

651
00:24:09,440 --> 00:24:11,120
to

652
00:24:11,120 --> 00:24:12,080
process

653
00:24:12,080 --> 00:24:13,679
and utilize

654
00:24:13,679 --> 00:24:15,360
in their systems

655
00:24:15,360 --> 00:24:17,120
again here you're going to look

656
00:24:17,120 --> 00:24:18,880
for your standard application security

657
00:24:18,880 --> 00:24:21,760
vulnerabilities in the top 10

658
00:24:21,760 --> 00:24:24,400
from os

659
00:24:24,400 --> 00:24:26,480
so when you're

660
00:24:26,480 --> 00:24:28,400
building these applications

661
00:24:28,400 --> 00:24:30,880
or these pipelines you know you've heard

662
00:24:30,880 --> 00:24:32,880
it before millions of times

663
00:24:32,880 --> 00:24:36,080
validate your inputs

664
00:24:36,240 --> 00:24:37,840
so

665
00:24:37,840 --> 00:24:39,760
what you find with

666
00:24:39,760 --> 00:24:41,840
a lot of these data processing

667
00:24:41,840 --> 00:24:44,480
applications are that because they're

668
00:24:44,480 --> 00:24:46,320
getting data from what they think are

669
00:24:46,320 --> 00:24:49,120
inherently trustworthy sources

670
00:24:49,120 --> 00:24:51,840
they tend to

671
00:24:51,919 --> 00:24:52,960
kind of

672
00:24:52,960 --> 00:24:55,120
you know forget about really looking at

673
00:24:55,120 --> 00:24:56,799
their data carefully

674
00:24:56,799 --> 00:24:58,559
and you'll have good data engineers that

675
00:24:58,559 --> 00:25:01,120
do that and want to make sure that

676
00:25:01,120 --> 00:25:02,159
you know

677
00:25:02,159 --> 00:25:04,240
the values are coming across correctly

678
00:25:04,240 --> 00:25:05,840
and

679
00:25:05,840 --> 00:25:09,520
you know in the correct format

680
00:25:10,640 --> 00:25:11,840
so

681
00:25:11,840 --> 00:25:15,279
let's go dive deeper into the input

682
00:25:15,279 --> 00:25:16,559
problems

683
00:25:16,559 --> 00:25:18,880
related to streaming apps and they kind

684
00:25:18,880 --> 00:25:20,960
of fall into five areas

685
00:25:20,960 --> 00:25:22,240
looking at

686
00:25:22,240 --> 00:25:24,799
valid values identifying duplicates when

687
00:25:24,799 --> 00:25:26,080
types are mixed

688
00:25:26,080 --> 00:25:27,760
filter bypass issue

689
00:25:27,760 --> 00:25:30,000
mismatch character sets differing

690
00:25:30,000 --> 00:25:32,559
storage or field types and knowing all

691
00:25:32,559 --> 00:25:34,640
of your potential uses

692
00:25:34,640 --> 00:25:37,440
so let's go into detail on this

693
00:25:37,440 --> 00:25:38,960
when we talk about the

694
00:25:38,960 --> 00:25:41,120
valid values you're basically ensuring

695
00:25:41,120 --> 00:25:43,679
that your data is bounded so if your

696
00:25:43,679 --> 00:25:46,240
application application receives an age

697
00:25:46,240 --> 00:25:47,919
field

698
00:25:47,919 --> 00:25:49,200
is the value

699
00:25:49,200 --> 00:25:51,520
is the value appropriate

700
00:25:51,520 --> 00:25:53,440
so what do you think would be some

701
00:25:53,440 --> 00:25:57,400
invalid age values

702
00:25:57,440 --> 00:25:59,520
well if you've got a negative value

703
00:25:59,520 --> 00:26:02,080
there's no one with it negative or zero

704
00:26:02,080 --> 00:26:03,440
h so

705
00:26:03,440 --> 00:26:05,279
that's one example

706
00:26:05,279 --> 00:26:06,080
of

707
00:26:06,080 --> 00:26:10,080
something that you'd want to look for

708
00:26:10,080 --> 00:26:11,919
so the other thing is there is this

709
00:26:11,919 --> 00:26:14,000
concept of windowing

710
00:26:14,000 --> 00:26:15,840
within these pipelines where they're

711
00:26:15,840 --> 00:26:18,400
going to look for duplicates and

712
00:26:18,400 --> 00:26:20,320
the way that they look for duplicates

713
00:26:20,320 --> 00:26:22,559
and throw those out is by specifying

714
00:26:22,559 --> 00:26:26,080
certain fields in the input

715
00:26:26,080 --> 00:26:29,120
fields as primary keys for deduplication

716
00:26:29,120 --> 00:26:30,880
purposes

717
00:26:30,880 --> 00:26:33,039
however there are problems that occur

718
00:26:33,039 --> 00:26:34,159
when

719
00:26:34,159 --> 00:26:36,400
a data engineer assumes that the primary

720
00:26:36,400 --> 00:26:39,440
key field is a certain type but it is

721
00:26:39,440 --> 00:26:41,200
represented as a different type so in

722
00:26:41,200 --> 00:26:42,640
this case

723
00:26:42,640 --> 00:26:44,240
you know the data engineer is assuming

724
00:26:44,240 --> 00:26:46,480
that the field is a number

725
00:26:46,480 --> 00:26:49,039
but it's represented as string

726
00:26:49,039 --> 00:26:49,760
so

727
00:26:49,760 --> 00:26:53,120
one way to get around the deduplication

728
00:26:53,120 --> 00:26:55,039
logic within a window

729
00:26:55,039 --> 00:26:57,760
is if you look at the bottom

730
00:26:57,760 --> 00:26:58,799
here

731
00:26:58,799 --> 00:27:00,480
we have two records

732
00:27:00,480 --> 00:27:02,480
normally the second record

733
00:27:02,480 --> 00:27:03,440
should be

734
00:27:03,440 --> 00:27:05,840
discarded as a duplicate but the

735
00:27:05,840 --> 00:27:07,919
attacker in the primary key field which

736
00:27:07,919 --> 00:27:11,520
is the first column used 0 0 1

737
00:27:11,520 --> 00:27:14,080
so the filtering logic

738
00:27:14,080 --> 00:27:16,159
basically said oh this is not a

739
00:27:16,159 --> 00:27:17,760
duplicate however

740
00:27:17,760 --> 00:27:20,559
when this row gets converted into an

741
00:27:20,559 --> 00:27:22,320
object this is going to be converted

742
00:27:22,320 --> 00:27:23,679
over to

743
00:27:23,679 --> 00:27:26,480
a number and then it's going to override

744
00:27:26,480 --> 00:27:29,200
the original one

745
00:27:30,159 --> 00:27:34,000
so we also have filter bypass issues so

746
00:27:34,000 --> 00:27:35,600
you know what what you're going to see

747
00:27:35,600 --> 00:27:37,039
is that

748
00:27:37,039 --> 00:27:39,520
you have different component processing

749
00:27:39,520 --> 00:27:41,120
components can that can be chained

750
00:27:41,120 --> 00:27:44,320
together and reused and

751
00:27:44,320 --> 00:27:45,200
they're going to make certain

752
00:27:45,200 --> 00:27:47,039
assumptions about

753
00:27:47,039 --> 00:27:49,120
the rules or constraints

754
00:27:49,120 --> 00:27:50,559
on their data

755
00:27:50,559 --> 00:27:53,039
and when you have

756
00:27:53,039 --> 00:27:55,200
different rules or constraints between

757
00:27:55,200 --> 00:27:56,880
components and a chain you're going to

758
00:27:56,880 --> 00:27:58,880
find security vulnerabilities

759
00:27:58,880 --> 00:28:00,720
you see this often

760
00:28:00,720 --> 00:28:03,679
in hdtv request smuggling

761
00:28:03,679 --> 00:28:04,640
or

762
00:28:04,640 --> 00:28:06,159
cache poisoning

763
00:28:06,159 --> 00:28:08,000
or these you know http parameter

764
00:28:08,000 --> 00:28:09,120
pollution

765
00:28:09,120 --> 00:28:11,120
basically you've got a chain of

766
00:28:11,120 --> 00:28:14,480
components operating on the data and

767
00:28:14,480 --> 00:28:17,520
they have different assumptions or rules

768
00:28:17,520 --> 00:28:19,520
or constraints that they're working with

769
00:28:19,520 --> 00:28:21,600
and so this mismatch

770
00:28:21,600 --> 00:28:22,720
is when

771
00:28:22,720 --> 00:28:24,240
basically

772
00:28:24,240 --> 00:28:26,880
you can have you can get around certain

773
00:28:26,880 --> 00:28:28,000
filters

774
00:28:28,000 --> 00:28:31,000
right

775
00:28:32,080 --> 00:28:33,440
so we also have

776
00:28:33,440 --> 00:28:35,120
character set issues so in today's

777
00:28:35,120 --> 00:28:38,399
environments enterprises are global

778
00:28:38,399 --> 00:28:39,600
and

779
00:28:39,600 --> 00:28:41,840
these architectures

780
00:28:41,840 --> 00:28:43,679
are going to share data

781
00:28:43,679 --> 00:28:46,640
with other systems in other parts of the

782
00:28:46,640 --> 00:28:47,679
world

783
00:28:47,679 --> 00:28:49,840
because they're going to be

784
00:28:49,840 --> 00:28:51,279
aggregating this information or

785
00:28:51,279 --> 00:28:52,799
disseminating this information and

786
00:28:52,799 --> 00:28:55,039
they're going to be making decisions

787
00:28:55,039 --> 00:28:56,720
based on the data that's received and

788
00:28:56,720 --> 00:28:57,760
processed

789
00:28:57,760 --> 00:28:58,880
and so

790
00:28:58,880 --> 00:29:01,200
what you're going to find is that

791
00:29:01,200 --> 00:29:02,799
most people don't think about character

792
00:29:02,799 --> 00:29:04,880
sets they install the operating system

793
00:29:04,880 --> 00:29:06,880
they set the default character set to

794
00:29:06,880 --> 00:29:08,720
whatever it is that they're in their

795
00:29:08,720 --> 00:29:09,760
locale

796
00:29:09,760 --> 00:29:11,520
and they install the software

797
00:29:11,520 --> 00:29:14,880
and so what you can have is that

798
00:29:14,880 --> 00:29:17,360
these applications inherit the default

799
00:29:17,360 --> 00:29:19,440
character set of the operating system

800
00:29:19,440 --> 00:29:21,279
that they're installed in

801
00:29:21,279 --> 00:29:23,039
and then

802
00:29:23,039 --> 00:29:25,279
when data is processed and converted

803
00:29:25,279 --> 00:29:27,760
into and out of their character sets

804
00:29:27,760 --> 00:29:29,600
it can allow for certain dangerous

805
00:29:29,600 --> 00:29:32,080
characters to be

806
00:29:32,080 --> 00:29:34,320
replaced i mean uh to be

807
00:29:34,320 --> 00:29:35,520
put in

808
00:29:35,520 --> 00:29:37,760
where a b9 character was in in that

809
00:29:37,760 --> 00:29:39,760
character set and

810
00:29:39,760 --> 00:29:41,120
then allow the other consuming

811
00:29:41,120 --> 00:29:43,120
application to

812
00:29:43,120 --> 00:29:46,719
get the dangerous character

813
00:29:47,360 --> 00:29:49,039
and there's a bunch of

814
00:29:49,039 --> 00:29:50,720
you can google this there's a bunch of

815
00:29:50,720 --> 00:29:52,240
different

816
00:29:52,240 --> 00:29:55,039
research and

817
00:29:55,039 --> 00:29:57,440
speakers who talked about fair percent

818
00:29:57,440 --> 00:30:00,399
security issues

819
00:30:00,960 --> 00:30:02,159
so

820
00:30:02,159 --> 00:30:04,320
the other thing is different storage or

821
00:30:04,320 --> 00:30:06,399
field types and so

822
00:30:06,399 --> 00:30:08,080
you know you have one system that

823
00:30:08,080 --> 00:30:11,120
expects integers to be 64-bit and

824
00:30:11,120 --> 00:30:12,559
another system

825
00:30:12,559 --> 00:30:15,679
that only supports 32-bit integers

826
00:30:15,679 --> 00:30:17,039
well

827
00:30:17,039 --> 00:30:21,240
integer overflows here we come

828
00:30:23,760 --> 00:30:25,919
and finally we have knowing all of your

829
00:30:25,919 --> 00:30:28,480
potential data uses so

830
00:30:28,480 --> 00:30:30,320
you know look at that picture again

831
00:30:30,320 --> 00:30:33,440
we have input coming in going into these

832
00:30:33,440 --> 00:30:35,039
messaging queues

833
00:30:35,039 --> 00:30:36,799
that is then sent to different

834
00:30:36,799 --> 00:30:39,279
components for processing enrichment

835
00:30:39,279 --> 00:30:40,799
stored in different databases and then

836
00:30:40,799 --> 00:30:42,320
that data could be sent to another

837
00:30:42,320 --> 00:30:44,640
messaging queue which could be sent to

838
00:30:44,640 --> 00:30:46,559
other apps which is process which those

839
00:30:46,559 --> 00:30:48,480
apps send to another messaging queue

840
00:30:48,480 --> 00:30:49,679
which then

841
00:30:49,679 --> 00:30:50,799
sends to

842
00:30:50,799 --> 00:30:52,720
other apps

843
00:30:52,720 --> 00:30:54,480
and

844
00:30:54,480 --> 00:30:58,320
when you look at the complexity of

845
00:30:58,320 --> 00:31:00,880
the data and

846
00:31:00,880 --> 00:31:03,440
how it's being used and where it's being

847
00:31:03,440 --> 00:31:04,559
used

848
00:31:04,559 --> 00:31:06,080
it's

849
00:31:06,080 --> 00:31:08,399
easy to quickly lose

850
00:31:08,399 --> 00:31:10,880
track of where this data is used and how

851
00:31:10,880 --> 00:31:11,919
it's used

852
00:31:11,919 --> 00:31:14,320
and so

853
00:31:14,399 --> 00:31:17,679
when you try to input filter for your

854
00:31:17,679 --> 00:31:19,919
application if you're in the beginning

855
00:31:19,919 --> 00:31:22,240
part of this process

856
00:31:22,240 --> 00:31:25,039
well it's going to be difficult for you

857
00:31:25,039 --> 00:31:26,799
to input validate for all of the

858
00:31:26,799 --> 00:31:28,399
potential uses downstream because you

859
00:31:28,399 --> 00:31:30,480
won't know because

860
00:31:30,480 --> 00:31:32,320
new apps are going to be added to these

861
00:31:32,320 --> 00:31:34,399
message buses that are going to do new

862
00:31:34,399 --> 00:31:36,240
things that you haven't

863
00:31:36,240 --> 00:31:37,840
even thought about

864
00:31:37,840 --> 00:31:40,158
and so

865
00:31:40,480 --> 00:31:42,559
you know when you

866
00:31:42,559 --> 00:31:44,559
when the data crosses these different

867
00:31:44,559 --> 00:31:45,919
application and operating system

868
00:31:45,919 --> 00:31:47,840
boundaries any assumptions you made

869
00:31:47,840 --> 00:31:50,399
about the original use of the data are

870
00:31:50,399 --> 00:31:51,840
lost

871
00:31:51,840 --> 00:31:54,880
and new unforeseen uses arise

872
00:31:54,880 --> 00:31:55,679
so

873
00:31:55,679 --> 00:31:57,919
you need to make sure that every

874
00:31:57,919 --> 00:32:00,480
one of your downstream components

875
00:32:00,480 --> 00:32:04,159
are defensive in how they input validate

876
00:32:04,159 --> 00:32:05,039
their

877
00:32:05,039 --> 00:32:07,519
data and make no assumptions

878
00:32:07,519 --> 00:32:08,559
about

879
00:32:08,559 --> 00:32:10,480
the

880
00:32:10,480 --> 00:32:14,799
cleanliness or the veracity of that data

881
00:32:14,799 --> 00:32:17,600
that it receives it needs to still be

882
00:32:17,600 --> 00:32:19,039
very vigilant

883
00:32:19,039 --> 00:32:24,158
and validate its input to its use

884
00:32:26,240 --> 00:32:28,080
so thank you for listening that's the

885
00:32:28,080 --> 00:32:29,919
talk for today if you have any questions

886
00:32:29,919 --> 00:32:31,679
i'm opening it up this is my contact if

887
00:32:31,679 --> 00:32:32,880
you have questions

888
00:32:32,880 --> 00:32:34,000
thank you for

889
00:32:34,000 --> 00:32:35,679
listening and being a part of this today

890
00:32:35,679 --> 00:32:38,480
i hope it helps you

