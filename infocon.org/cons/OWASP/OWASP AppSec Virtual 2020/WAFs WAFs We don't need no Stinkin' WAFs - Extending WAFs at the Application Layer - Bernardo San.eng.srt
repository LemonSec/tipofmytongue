1
00:00:00,160 --> 00:00:01,839
acunetix helps thousands of

2
00:00:01,839 --> 00:00:04,000
organizations secure their websites and

3
00:00:04,000 --> 00:00:06,240
web applications across the globe

4
00:00:06,240 --> 00:00:07,759
whether you're a one-person team

5
00:00:07,759 --> 00:00:09,920
ensuring the security of a few websites

6
00:00:09,920 --> 00:00:12,000
or a large organization interested in

7
00:00:12,000 --> 00:00:13,599
automating your web vulnerability

8
00:00:13,599 --> 00:00:16,000
assessment and management acunetix is

9
00:00:16,000 --> 00:00:18,640
here to help

10
00:00:18,960 --> 00:00:20,960
hi and thank you for watching the waffs

11
00:00:20,960 --> 00:00:22,640
wasps we don't need no stinking wasps

12
00:00:22,640 --> 00:00:24,240
presentation here at the owass

13
00:00:24,240 --> 00:00:25,599
conference

14
00:00:25,599 --> 00:00:28,000
before we begin let me give you a brief

15
00:00:28,000 --> 00:00:30,720
background of what i do and where i work

16
00:00:30,720 --> 00:00:32,320
i'm a senior application security

17
00:00:32,320 --> 00:00:34,079
architect working at point click care

18
00:00:34,079 --> 00:00:35,520
which is a world-class software

19
00:00:35,520 --> 00:00:37,920
organization that primarily focuses on

20
00:00:37,920 --> 00:00:40,160
the long-term post-acute care the senior

21
00:00:40,160 --> 00:00:42,079
care and home care markets

22
00:00:42,079 --> 00:00:44,079
essentially what we do is we make sure

23
00:00:44,079 --> 00:00:45,840
that your grandparents

24
00:00:45,840 --> 00:00:47,360
or your parents depending on how old you

25
00:00:47,360 --> 00:00:49,760
are are very well taken care of i'd also

26
00:00:49,760 --> 00:00:51,280
like to say that it's an honor working

27
00:00:51,280 --> 00:00:53,920
up quickly care because for every hour

28
00:00:53,920 --> 00:00:56,000
and every day's work that i put in it

29
00:00:56,000 --> 00:00:57,760
really affects millions of lives of

30
00:00:57,760 --> 00:00:59,920
seniors in many countries and it's a

31
00:00:59,920 --> 00:01:02,320
very fulfilling career

32
00:01:02,320 --> 00:01:04,479
so let's begin

33
00:01:04,479 --> 00:01:06,640
first i want to talk about

34
00:01:06,640 --> 00:01:08,479
web application firewalls giving you a

35
00:01:08,479 --> 00:01:10,320
brief history

36
00:01:10,320 --> 00:01:12,159
now labs or web application firewalls

37
00:01:12,159 --> 00:01:14,720
were originally created in the early 90s

38
00:01:14,720 --> 00:01:16,080
as firewall

39
00:01:16,080 --> 00:01:17,920
network uh as network firewall

40
00:01:17,920 --> 00:01:19,520
extensions by gene

41
00:01:19,520 --> 00:01:22,720
spafford bill cheswick and mark ranum

42
00:01:22,720 --> 00:01:24,159
but they can only handle a very few

43
00:01:24,159 --> 00:01:27,200
applications like ftp or rsh

44
00:01:27,200 --> 00:01:29,759
here you'll see in the picture

45
00:01:29,759 --> 00:01:31,680
a request comes into the firewall the

46
00:01:31,680 --> 00:01:34,400
fireball detects a threat it returns a

47
00:01:34,400 --> 00:01:36,400
403 forbidden

48
00:01:36,400 --> 00:01:38,320
or if everything is fine with the

49
00:01:38,320 --> 00:01:40,640
request packet coming in it validates it

50
00:01:40,640 --> 00:01:42,240
to the application

51
00:01:42,240 --> 00:01:45,839
and the application's been secure

52
00:01:46,320 --> 00:01:48,960
now dedicated web application firewalls

53
00:01:48,960 --> 00:01:50,320
they entered the market later in the

54
00:01:50,320 --> 00:01:53,439
decade aaron reshef and gilly ranan were

55
00:01:53,439 --> 00:01:54,880
the inventors of the first dedicated

56
00:01:54,880 --> 00:01:57,280
wife the app shield

57
00:01:57,280 --> 00:01:59,439
here again we see the firewall taking a

58
00:01:59,439 --> 00:02:02,960
request and projecting or forbidding

59
00:02:02,960 --> 00:02:05,119
if it doesn't pass its rules

60
00:02:05,119 --> 00:02:06,799
but now you see a separate entity it's

61
00:02:06,799 --> 00:02:08,720
called a web application firewall so the

62
00:02:08,720 --> 00:02:10,800
request get proxies to that it then

63
00:02:10,800 --> 00:02:14,080
inspects all the data coming in

64
00:02:14,080 --> 00:02:16,000
if there is an error occur it returns a

65
00:02:16,000 --> 00:02:19,040
403 or forbidden if not it sends the

66
00:02:19,040 --> 00:02:20,800
request to the application

67
00:02:20,800 --> 00:02:24,160
that's now secured

68
00:02:24,640 --> 00:02:27,120
so the top 10 web application hacking

69
00:02:27,120 --> 00:02:28,800
techniques laid the foundation for the

70
00:02:28,800 --> 00:02:30,319
waft market these will look very

71
00:02:30,319 --> 00:02:32,480
familiar hidden field manipulation

72
00:02:32,480 --> 00:02:34,879
cookie poisoning parameter tapping

73
00:02:34,879 --> 00:02:36,560
buffer overflow cross-site scripting and

74
00:02:36,560 --> 00:02:38,160
many more

75
00:02:38,160 --> 00:02:40,959
now in late 2002 that's when the open

76
00:02:40,959 --> 00:02:42,640
source project mod security was

77
00:02:42,640 --> 00:02:44,959
introduced which is heavily used in the

78
00:02:44,959 --> 00:02:47,280
market today

79
00:02:47,280 --> 00:02:49,840
so what is the purpose of a web well in

80
00:02:49,840 --> 00:02:50,720
short

81
00:02:50,720 --> 00:02:53,120
it is to block malicious bi-directional

82
00:02:53,120 --> 00:02:55,519
web-based traffic

83
00:02:55,519 --> 00:02:57,360
it's not an ultimate security solution

84
00:02:57,360 --> 00:02:58,640
meant to work

85
00:02:58,640 --> 00:03:00,879
it is it is not an ultimate security

86
00:03:00,879 --> 00:03:02,400
solution meant to work with other

87
00:03:02,400 --> 00:03:05,519
network perimeter security solutions

88
00:03:05,519 --> 00:03:07,360
when used alongside network firewalls

89
00:03:07,360 --> 00:03:09,360
and intrusion prevention systems wavs

90
00:03:09,360 --> 00:03:11,760
provide a holistic defense strategy as

91
00:03:11,760 --> 00:03:15,440
you can see in the picture below

92
00:03:15,840 --> 00:03:17,519
so what are some of the problems that we

93
00:03:17,519 --> 00:03:20,560
have with waffs well graph rules and

94
00:03:20,560 --> 00:03:23,360
policies can be overly broad this leads

95
00:03:23,360 --> 00:03:25,360
to many false positives

96
00:03:25,360 --> 00:03:27,840
which leads to white listing uris or

97
00:03:27,840 --> 00:03:29,760
headers or cookies or parameters you

98
00:03:29,760 --> 00:03:31,599
either disable rules to allow the

99
00:03:31,599 --> 00:03:33,040
applications to work as they were

100
00:03:33,040 --> 00:03:36,239
designed or you add custom rules to

101
00:03:36,239 --> 00:03:39,280
limit the exposure

102
00:03:39,280 --> 00:03:41,120
and why does this happen well because of

103
00:03:41,120 --> 00:03:43,280
wasps they can't be sure how your

104
00:03:43,280 --> 00:03:46,879
application works on its own

105
00:03:46,879 --> 00:03:48,799
some interesting information an article

106
00:03:48,799 --> 00:03:52,480
i've read approximately a month ago

107
00:03:52,480 --> 00:03:54,080
it said that forty percent of security

108
00:03:54,080 --> 00:03:56,480
professionals say that half of cyber

109
00:03:56,480 --> 00:03:58,799
attacks bypass their wasps

110
00:03:58,799 --> 00:04:01,760
wow that's a big number

111
00:04:01,760 --> 00:04:03,439
traditionally from the web here is a

112
00:04:03,439 --> 00:04:05,760
listing from azure's website

113
00:04:05,760 --> 00:04:08,879
it talks about web exclusion lists

114
00:04:08,879 --> 00:04:10,400
you can exclude

115
00:04:10,400 --> 00:04:12,720
uris headers parameters cookies and the

116
00:04:12,720 --> 00:04:15,120
like and even the wording below states

117
00:04:15,120 --> 00:04:18,639
that you know certain active directory

118
00:04:18,639 --> 00:04:20,798
applications they they insert tokens

119
00:04:20,798 --> 00:04:22,960
with special characters that could be

120
00:04:22,960 --> 00:04:24,960
blocked by the laugh itself so you can

121
00:04:24,960 --> 00:04:28,359
exclude them

122
00:04:28,560 --> 00:04:29,840
additionally

123
00:04:29,840 --> 00:04:32,720
you can even remove certain rule sets

124
00:04:32,720 --> 00:04:34,880
from running themselves why would you do

125
00:04:34,880 --> 00:04:36,560
this because if you need to have your

126
00:04:36,560 --> 00:04:39,120
application actually be running

127
00:04:39,120 --> 00:04:41,120
and the loft that you just implemented

128
00:04:41,120 --> 00:04:43,199
is blocking that particular page you

129
00:04:43,199 --> 00:04:45,440
might be desperate and you might

130
00:04:45,440 --> 00:04:47,360
actually disable whole rule sets

131
00:04:47,360 --> 00:04:49,680
completely this is a horrible thing to

132
00:04:49,680 --> 00:04:51,840
do

133
00:04:52,240 --> 00:04:55,440
so why do these problems arrive

134
00:04:55,440 --> 00:04:58,240
well what's uh they don't actually know

135
00:04:58,240 --> 00:05:00,400
how your application works here in the

136
00:05:00,400 --> 00:05:02,720
picture below you see how the wife takes

137
00:05:02,720 --> 00:05:04,560
in a request

138
00:05:04,560 --> 00:05:07,120
it valid anything any validated request

139
00:05:07,120 --> 00:05:10,080
it processes the application deem safe

140
00:05:10,080 --> 00:05:12,320
but

141
00:05:13,120 --> 00:05:14,800
if you have any whitelist or disabled

142
00:05:14,800 --> 00:05:16,479
rules or custom worlds you really are

143
00:05:16,479 --> 00:05:19,280
bypassing the waff itself

144
00:05:19,280 --> 00:05:21,440
and everyone knows once a wife once a

145
00:05:21,440 --> 00:05:24,080
bypass is established that hole is very

146
00:05:24,080 --> 00:05:27,599
hard to close in the future

147
00:05:31,039 --> 00:05:32,800
have you ever tried to google bypass

148
00:05:32,800 --> 00:05:34,160
waff

149
00:05:34,160 --> 00:05:36,240
you'll see lots of websites and cheat

150
00:05:36,240 --> 00:05:39,600
sheets and get repos owasp itself even

151
00:05:39,600 --> 00:05:42,000
has a sqlite bypassing guide

152
00:05:42,000 --> 00:05:44,240
that'll help you bypass

153
00:05:44,240 --> 00:05:45,840
their your wasps

154
00:05:45,840 --> 00:05:47,680
have you considered these we're all

155
00:05:47,680 --> 00:05:49,520
familiar with the javascript colon

156
00:05:49,520 --> 00:05:51,360
syntax to run javascript in line and a

157
00:05:51,360 --> 00:05:52,479
webpage

158
00:05:52,479 --> 00:05:54,560
but take a look at the very next slide

159
00:05:54,560 --> 00:05:57,199
java percent foo

160
00:05:57,199 --> 00:05:58,960
right you see that

161
00:05:58,960 --> 00:06:00,479
that's exactly the same thing you're

162
00:06:00,479 --> 00:06:01,919
actually allowed to embed characters

163
00:06:01,919 --> 00:06:04,240
into the javascript keyword or how about

164
00:06:04,240 --> 00:06:07,440
the next one that's expression tag

165
00:06:07,440 --> 00:06:10,080
that you can embed comments within every

166
00:06:10,080 --> 00:06:11,759
letter of the word

167
00:06:11,759 --> 00:06:15,039
how about the very last one

168
00:06:15,039 --> 00:06:17,280
uh this product is well it rhymes with

169
00:06:17,280 --> 00:06:18,639
js duck

170
00:06:18,639 --> 00:06:20,800
let's call it that there is no textual

171
00:06:20,800 --> 00:06:23,639
characters it's all spaces and

172
00:06:23,639 --> 00:06:26,000
non-alphanumeric characters does your

173
00:06:26,000 --> 00:06:28,960
wife block these

174
00:06:29,840 --> 00:06:31,680
generic rules are extremely difficult to

175
00:06:31,680 --> 00:06:33,600
create and maintain so you always need

176
00:06:33,600 --> 00:06:38,319
to validate and sanitize untrusted data

177
00:06:38,319 --> 00:06:40,000
now we're going to introduce you a new

178
00:06:40,000 --> 00:06:42,639
concept of san waf it's an application

179
00:06:42,639 --> 00:06:45,520
level security control what it is it's a

180
00:06:45,520 --> 00:06:48,479
sanitation web application filter and

181
00:06:48,479 --> 00:06:50,080
it's implemented as a filter or

182
00:06:50,080 --> 00:06:52,880
intercepted and it's added to increase

183
00:06:52,880 --> 00:06:56,080
your application security

184
00:06:56,080 --> 00:06:58,319
it's application specific

185
00:06:58,319 --> 00:07:00,720
it executes prior to any application

186
00:07:00,720 --> 00:07:02,720
code being executed

187
00:07:02,720 --> 00:07:04,560
the pre-validates parameters before

188
00:07:04,560 --> 00:07:06,639
passing them to the application that

189
00:07:06,639 --> 00:07:09,039
works in line with your application

190
00:07:09,039 --> 00:07:11,360
it addresses white listed waf rules uris

191
00:07:11,360 --> 00:07:13,840
cookies headers and parameters

192
00:07:13,840 --> 00:07:16,160
and it really validates untrusted data

193
00:07:16,160 --> 00:07:18,160
entering into your application which is

194
00:07:18,160 --> 00:07:20,960
one of the biggest security issues

195
00:07:20,960 --> 00:07:23,440
is trusting untrusted data how many

196
00:07:23,440 --> 00:07:25,280
times have we seen

197
00:07:25,280 --> 00:07:27,360
where data that's entered in by a user

198
00:07:27,360 --> 00:07:29,360
gets echoed out hence you have a

199
00:07:29,360 --> 00:07:30,960
cross-site scripting vulnerability

200
00:07:30,960 --> 00:07:33,520
introduced

201
00:07:33,680 --> 00:07:35,840
so what is the purpose of sandwath well

202
00:07:35,840 --> 00:07:37,880
it's to provide a generic

203
00:07:37,880 --> 00:07:39,680
application-centric mechanism to

204
00:07:39,680 --> 00:07:42,240
sanitize all untrusted data entering

205
00:07:42,240 --> 00:07:45,280
applications during the picture

206
00:07:45,280 --> 00:07:47,039
anything that comes prior to the san

207
00:07:47,039 --> 00:07:49,680
juan is deemed insecure the sound of

208
00:07:49,680 --> 00:07:51,919
itself it will forbid data from entering

209
00:07:51,919 --> 00:07:53,680
the application

210
00:07:53,680 --> 00:07:55,599
or it will proxy into the application

211
00:07:55,599 --> 00:07:56,800
itself

212
00:07:56,800 --> 00:07:58,720
after the data has been sanitized making

213
00:07:58,720 --> 00:08:02,000
your application secure

214
00:08:02,400 --> 00:08:04,240
now let's take a look at the bypass

215
00:08:04,240 --> 00:08:05,840
example

216
00:08:05,840 --> 00:08:07,360
let's say you have a cookie that's being

217
00:08:07,360 --> 00:08:08,960
blocked by the waff

218
00:08:08,960 --> 00:08:10,560
and it's causing you an issue so you

219
00:08:10,560 --> 00:08:12,800
decide to whitelist it

220
00:08:12,800 --> 00:08:14,240
does this decision create a

221
00:08:14,240 --> 00:08:15,840
vulnerability

222
00:08:15,840 --> 00:08:18,000
so here a request comes into a firewall

223
00:08:18,000 --> 00:08:20,080
passes the firewall rules

224
00:08:20,080 --> 00:08:22,160
it'll get protected to the wife

225
00:08:22,160 --> 00:08:24,560
the laugh itself well if the request is

226
00:08:24,560 --> 00:08:26,960
valid and passes its rules

227
00:08:26,960 --> 00:08:29,599
it's still green everything looks good

228
00:08:29,599 --> 00:08:32,080
however since we actually whitelisted a

229
00:08:32,080 --> 00:08:33,440
cookie what are we doing we've

230
00:08:33,440 --> 00:08:35,159
introduced

231
00:08:35,159 --> 00:08:38,240
unvalidated data into our application

232
00:08:38,240 --> 00:08:40,399
which turns your application

233
00:08:40,399 --> 00:08:42,320
red

234
00:08:42,320 --> 00:08:44,560
with the introduction of san juan which

235
00:08:44,560 --> 00:08:46,480
would then inspect you can configure it

236
00:08:46,480 --> 00:08:48,480
to inspect that cookie and make sure it

237
00:08:48,480 --> 00:08:49,920
is valid

238
00:08:49,920 --> 00:08:51,839
it will turn your application back to

239
00:08:51,839 --> 00:08:55,839
green again making it secure

240
00:08:56,160 --> 00:08:57,839
now it's got to be understood that

241
00:08:57,839 --> 00:09:01,200
sandlots do not replace waves like waves

242
00:09:01,200 --> 00:09:03,680
never replaced firewalls

243
00:09:03,680 --> 00:09:05,519
they are an additional layer of

244
00:09:05,519 --> 00:09:07,279
protection

245
00:09:07,279 --> 00:09:09,440
they can be implemented as a filter or

246
00:09:09,440 --> 00:09:11,200
interceptor

247
00:09:11,200 --> 00:09:12,640
in the session themselves they don't

248
00:09:12,640 --> 00:09:14,959
have to be validated prior to the sanofi

249
00:09:14,959 --> 00:09:17,200
interrogation

250
00:09:17,200 --> 00:09:19,760
it really stops all invalid requests to

251
00:09:19,760 --> 00:09:21,279
the applications

252
00:09:21,279 --> 00:09:23,519
so this reduces your compute time

253
00:09:23,519 --> 00:09:24,800
especially if you're not inspecting

254
00:09:24,800 --> 00:09:27,120
those sessions

255
00:09:27,120 --> 00:09:29,519
it's extremely fast in operation very

256
00:09:29,519 --> 00:09:30,959
low overhead

257
00:09:30,959 --> 00:09:33,839
it's simple to implement and configure

258
00:09:33,839 --> 00:09:37,760
and really it focuses on data sanitation

259
00:09:37,760 --> 00:09:40,000
now who hasn't seen this code well java

260
00:09:40,000 --> 00:09:41,760
developers anyway

261
00:09:41,760 --> 00:09:43,519
we've probably written this code

262
00:09:43,519 --> 00:09:45,279
thousands if not tens of thousands of

263
00:09:45,279 --> 00:09:46,160
times

264
00:09:46,160 --> 00:09:48,000
where you read a request parameter into

265
00:09:48,000 --> 00:09:50,959
a string called s and then you inspect

266
00:09:50,959 --> 00:09:52,800
that you say if it's not null and the

267
00:09:52,800 --> 00:09:55,680
length within a range of zero to ten

268
00:09:55,680 --> 00:09:57,440
and then you have some more code in

269
00:09:57,440 --> 00:09:59,440
there

270
00:09:59,440 --> 00:10:01,839
this well this is writing sanitation

271
00:10:01,839 --> 00:10:04,240
code and it's very tedious and time

272
00:10:04,240 --> 00:10:06,959
consuming which leads to it being error

273
00:10:06,959 --> 00:10:08,000
prone

274
00:10:08,000 --> 00:10:08,880
thus

275
00:10:08,880 --> 00:10:13,120
your data is not really fully sanitized

276
00:10:13,120 --> 00:10:15,040
wouldn't it be better to pre-validate or

277
00:10:15,040 --> 00:10:17,279
sanitize your parameters before using

278
00:10:17,279 --> 00:10:20,160
them in your system

279
00:10:20,320 --> 00:10:22,000
let's take a look at how san juan works

280
00:10:22,000 --> 00:10:24,959
it's at a 50 000 foot level

281
00:10:24,959 --> 00:10:26,959
so it's a logical view from the browser

282
00:10:26,959 --> 00:10:29,839
to tomcat to the application

283
00:10:29,839 --> 00:10:31,760
so the browser submits some payload

284
00:10:31,760 --> 00:10:33,760
let's assume there's an evil payload

285
00:10:33,760 --> 00:10:35,680
into the application

286
00:10:35,680 --> 00:10:37,360
the application

287
00:10:37,360 --> 00:10:39,440
will then call the san joaque is threat

288
00:10:39,440 --> 00:10:41,760
detected passing in the request object

289
00:10:41,760 --> 00:10:44,880
san juan will process the parameters

290
00:10:44,880 --> 00:10:47,040
it will look for errors and any errors

291
00:10:47,040 --> 00:10:48,800
that it sees it will compile them and it

292
00:10:48,800 --> 00:10:50,399
would set the error attributes onto the

293
00:10:50,399 --> 00:10:52,959
request object and then return a pass or

294
00:10:52,959 --> 00:10:56,160
fail to whoever called it

295
00:10:56,160 --> 00:10:57,920
then it's up to the application to get

296
00:10:57,920 --> 00:11:00,480
these error attributes right if it's a

297
00:11:00,480 --> 00:11:02,399
fail that is

298
00:11:02,399 --> 00:11:05,120
uh sorry if it's a pass if it's a fail

299
00:11:05,120 --> 00:11:06,640
then it gets the error attributes and

300
00:11:06,640 --> 00:11:07,920
it's up to you what you want to do you

301
00:11:07,920 --> 00:11:09,839
could throw you can throw an exception a

302
00:11:09,839 --> 00:11:11,680
security exception and allow an

303
00:11:11,680 --> 00:11:12,800
unhandled

304
00:11:12,800 --> 00:11:15,440
exception handler to handle it and to

305
00:11:15,440 --> 00:11:17,200
you know nicely present the data to the

306
00:11:17,200 --> 00:11:18,720
end user but it's really up to you how

307
00:11:18,720 --> 00:11:21,839
you want to progress from there

308
00:11:22,240 --> 00:11:24,480
here's the structure of sandwich it

309
00:11:24,480 --> 00:11:26,079
really has

310
00:11:26,079 --> 00:11:27,920
it has global settings and it has these

311
00:11:27,920 --> 00:11:29,920
things called shields

312
00:11:29,920 --> 00:11:32,160
we'll talk about them in just a bit

313
00:11:32,160 --> 00:11:33,680
the shields themselves have shield

314
00:11:33,680 --> 00:11:34,640
settings

315
00:11:34,640 --> 00:11:38,959
regex settings and metadata settings

316
00:11:39,760 --> 00:11:40,720
now

317
00:11:40,720 --> 00:11:42,000
let's first talk about the global

318
00:11:42,000 --> 00:11:44,240
settings there's a master enable

319
00:11:44,240 --> 00:11:46,399
disabled flag well this is kind of easy

320
00:11:46,399 --> 00:11:48,160
to figure out what that means what it

321
00:11:48,160 --> 00:11:50,480
does it turns it on or off

322
00:11:50,480 --> 00:11:53,360
it also includes app version information

323
00:11:53,360 --> 00:11:55,440
now this is this is useful because every

324
00:11:55,440 --> 00:11:57,360
time you have an error and it gets

325
00:11:57,360 --> 00:11:58,720
logged you might want to include this

326
00:11:58,720 --> 00:12:01,839
app version so for austerity or for

327
00:12:01,839 --> 00:12:04,079
inspecting what's what's occurring

328
00:12:04,079 --> 00:12:06,399
in your application you know exactly

329
00:12:06,399 --> 00:12:07,920
what application version this error

330
00:12:07,920 --> 00:12:09,279
occurred in

331
00:12:09,279 --> 00:12:11,839
it also defines error handling

332
00:12:11,839 --> 00:12:13,360
how you want to handle it do you

333
00:12:13,360 --> 00:12:15,279
actually want a tracking id to be

334
00:12:15,279 --> 00:12:17,839
correlated with this log entry

335
00:12:17,839 --> 00:12:19,760
do you want it to return the list of

336
00:12:19,760 --> 00:12:21,279
elements remember in that flowchart

337
00:12:21,279 --> 00:12:22,880
before when it said it sets these

338
00:12:22,880 --> 00:12:24,959
request error attributes it's up to you

339
00:12:24,959 --> 00:12:26,399
you might not want them you just want to

340
00:12:26,399 --> 00:12:28,320
say it's a pass fail that's fine you

341
00:12:28,320 --> 00:12:29,680
don't have to have it that's what you

342
00:12:29,680 --> 00:12:31,839
configure here

343
00:12:31,839 --> 00:12:34,320
next is generic error messages

344
00:12:34,320 --> 00:12:36,160
these are default error messages for san

345
00:12:36,160 --> 00:12:38,399
joaq data types which will be explained

346
00:12:38,399 --> 00:12:39,920
shortly

347
00:12:39,920 --> 00:12:42,240
now shield settings well

348
00:12:42,240 --> 00:12:44,000
what are shields shields are really

349
00:12:44,000 --> 00:12:47,839
logical units to group your rules

350
00:12:47,839 --> 00:12:49,760
you don't have to have

351
00:12:49,760 --> 00:12:51,760
many shields but you could have to have

352
00:12:51,760 --> 00:12:54,240
at least one shield it's up to you you

353
00:12:54,240 --> 00:12:56,079
can have one shield and put all your

354
00:12:56,079 --> 00:12:58,480
rules into it or you can logically group

355
00:12:58,480 --> 00:13:01,600
your rules into multiple shields

356
00:13:01,600 --> 00:13:03,440
now these shield settings include the

357
00:13:03,440 --> 00:13:05,519
name of the shield right so that you can

358
00:13:05,519 --> 00:13:06,720
understand

359
00:13:06,720 --> 00:13:08,639
which one uh which shield actually

360
00:13:08,639 --> 00:13:10,079
caught the error if you have more than

361
00:13:10,079 --> 00:13:12,720
one configured a maximum min data length

362
00:13:12,720 --> 00:13:16,320
before processing this is useful because

363
00:13:16,320 --> 00:13:18,079
let's assume you have a shield

364
00:13:18,079 --> 00:13:19,920
configured for examining cross-site

365
00:13:19,920 --> 00:13:21,839
scripting and you can't do a cross-site

366
00:13:21,839 --> 00:13:24,399
scripting uh exploit under four

367
00:13:24,399 --> 00:13:27,360
characters so if you specify the minimum

368
00:13:27,360 --> 00:13:29,519
to be four characters in data length

369
00:13:29,519 --> 00:13:31,760
this shield won't even fire saving you

370
00:13:31,760 --> 00:13:32,839
processing

371
00:13:32,839 --> 00:13:35,760
time it has specific error messages for

372
00:13:35,760 --> 00:13:38,320
sound data types these actually override

373
00:13:38,320 --> 00:13:39,839
the custom error message the global

374
00:13:39,839 --> 00:13:42,639
error messages that is

375
00:13:42,639 --> 00:13:43,940
and you can specify them

376
00:13:43,940 --> 00:13:45,120
[Music]

377
00:13:45,120 --> 00:13:46,839
for each individual shield that you have

378
00:13:46,839 --> 00:13:49,199
configured next you have regex and

379
00:13:49,199 --> 00:13:51,279
metadata settings which we'll get into

380
00:13:51,279 --> 00:13:52,639
right now

381
00:13:52,639 --> 00:13:54,240
so for the regex settings it has a

382
00:13:54,240 --> 00:13:55,920
minimum length for the regex to fire

383
00:13:55,920 --> 00:13:56,800
again

384
00:13:56,800 --> 00:13:58,959
everything we do in cenua it's got to be

385
00:13:58,959 --> 00:14:00,160
performant because if you're going to

386
00:14:00,160 --> 00:14:02,560
expect every single parameter inspect

387
00:14:02,560 --> 00:14:04,399
every single parameter you've got to

388
00:14:04,399 --> 00:14:06,160
make sure it fires very very very

389
00:14:06,160 --> 00:14:07,760
quickly

390
00:14:07,760 --> 00:14:09,440
so the minimum links there in the set so

391
00:14:09,440 --> 00:14:13,440
why even bother run the rig x unless

392
00:14:13,440 --> 00:14:16,399
it meets a certain condition

393
00:14:16,399 --> 00:14:18,639
you have a force regex settings which

394
00:14:18,639 --> 00:14:20,399
includes exclusions we'll talk about

395
00:14:20,399 --> 00:14:23,279
that more in detail in a little bit

396
00:14:23,279 --> 00:14:26,000
we have auto run patterns and this is

397
00:14:26,000 --> 00:14:27,920
defines what all your string type

398
00:14:27,920 --> 00:14:30,959
elements have to go through

399
00:14:30,959 --> 00:14:33,199
you have custom you have custom regex

400
00:14:33,199 --> 00:14:35,120
patterns to secure specific parameters

401
00:14:35,120 --> 00:14:38,000
headers and cookies

402
00:14:38,000 --> 00:14:40,560
some of the metadata settings well

403
00:14:40,560 --> 00:14:43,360
you have enabling sections

404
00:14:43,360 --> 00:14:44,399
that is

405
00:14:44,399 --> 00:14:45,760
perhaps you might want to have a shield

406
00:14:45,760 --> 00:14:48,160
that only looks at request parameters so

407
00:14:48,160 --> 00:14:50,079
you'd only enable the parameter sections

408
00:14:50,079 --> 00:14:53,279
not the headers or the cookies

409
00:14:53,279 --> 00:14:54,480
next you have

410
00:14:54,480 --> 00:14:57,199
section key sensitivity

411
00:14:57,199 --> 00:14:58,800
well with this one

412
00:14:58,800 --> 00:15:00,639
you can specify whether you want to when

413
00:15:00,639 --> 00:15:02,079
you're requesting parameters to look at

414
00:15:02,079 --> 00:15:04,160
them in a case insensitive or case

415
00:15:04,160 --> 00:15:05,760
sensitive way

416
00:15:05,760 --> 00:15:08,399
in a previous job not where i am now in

417
00:15:08,399 --> 00:15:10,240
a previous job we had i remember one

418
00:15:10,240 --> 00:15:12,480
page was written we had a variable let's

419
00:15:12,480 --> 00:15:14,000
just call it fubar

420
00:15:14,000 --> 00:15:15,600
and in the page it was read three

421
00:15:15,600 --> 00:15:17,600
different times and they all went to the

422
00:15:17,600 --> 00:15:19,120
same variable

423
00:15:19,120 --> 00:15:20,880
one was the foo bar with the capital f

424
00:15:20,880 --> 00:15:23,199
next was fubar capital f and capital b

425
00:15:23,199 --> 00:15:25,519
and next was all lowercase

426
00:15:25,519 --> 00:15:27,040
they knew one of them was there but

427
00:15:27,040 --> 00:15:28,399
different developers are passing in

428
00:15:28,399 --> 00:15:31,519
different cases this is terrible i know

429
00:15:31,519 --> 00:15:32,880
but that's what this is for is to

430
00:15:32,880 --> 00:15:34,959
address that issue

431
00:15:34,959 --> 00:15:37,839
next it has three lists security lists

432
00:15:37,839 --> 00:15:39,279
and these are for parameters headers and

433
00:15:39,279 --> 00:15:40,800
cookies and this is where you define

434
00:15:40,800 --> 00:15:43,199
which parameters headers and cookies are

435
00:15:43,199 --> 00:15:45,759
actually going to be protected by sand

436
00:15:45,759 --> 00:15:47,519
well

437
00:15:47,519 --> 00:15:49,680
so now let's talk about

438
00:15:49,680 --> 00:15:51,279
the sandwich data types there are nine

439
00:15:51,279 --> 00:15:53,199
of them in total and they're very

440
00:15:53,199 --> 00:15:54,639
powerful and they're a lot of them are

441
00:15:54,639 --> 00:15:56,240
written to be

442
00:15:56,240 --> 00:15:57,519
very

443
00:15:57,519 --> 00:15:58,959
fast

444
00:15:58,959 --> 00:16:00,399
first is the character i think that

445
00:16:00,399 --> 00:16:02,320
one's self-explanatory it's a single

446
00:16:02,320 --> 00:16:05,199
digit single character anything you want

447
00:16:05,199 --> 00:16:08,320
notice it doesn't have a max min setting

448
00:16:08,320 --> 00:16:10,800
that next is the number which could be

449
00:16:10,800 --> 00:16:13,920
any positive or negative number

450
00:16:13,920 --> 00:16:15,440
right there's no limit to the length of

451
00:16:15,440 --> 00:16:17,360
the size of the number itself

452
00:16:17,360 --> 00:16:19,360
now notice here we can specify the max

453
00:16:19,360 --> 00:16:20,480
and the min

454
00:16:20,480 --> 00:16:22,959
this determines the length

455
00:16:22,959 --> 00:16:25,920
right of the string that's coming in

456
00:16:25,920 --> 00:16:28,639
so if you know that your number assuming

457
00:16:28,639 --> 00:16:30,560
it's a positive only number with no

458
00:16:30,560 --> 00:16:32,800
decimal has to be two characters long

459
00:16:32,800 --> 00:16:34,480
from zero from zero to ten you can say

460
00:16:34,480 --> 00:16:36,800
minimum is one character maximum is two

461
00:16:36,800 --> 00:16:39,199
characters and that'll limit it

462
00:16:39,199 --> 00:16:41,120
so if somebody or a hacker tries to

463
00:16:41,120 --> 00:16:43,600
actually send you a lot more data it

464
00:16:43,600 --> 00:16:44,959
won't even be looked at it will be

465
00:16:44,959 --> 00:16:48,079
rejected just by the length setting

466
00:16:48,079 --> 00:16:50,959
next is a delimited list of numbers what

467
00:16:50,959 --> 00:16:52,560
this means is you could take a look at

468
00:16:52,560 --> 00:16:56,079
the example 123 comma 456 is that you're

469
00:16:56,079 --> 00:16:58,480
expecting this parameter header cookie

470
00:16:58,480 --> 00:17:01,920
to actually be a list but it's delimited

471
00:17:01,920 --> 00:17:06,799
by some character in this case a comma

472
00:17:06,799 --> 00:17:08,959
next is alphanumeric that's all the

473
00:17:08,959 --> 00:17:10,640
alphabetic and numeric characters that

474
00:17:10,640 --> 00:17:12,480
are allowed

475
00:17:12,480 --> 00:17:14,480
next is alphanumeric and whitelisted

476
00:17:14,480 --> 00:17:17,359
characters this is a very powerful

477
00:17:17,359 --> 00:17:19,280
very very powerful data type

478
00:17:19,280 --> 00:17:21,359
in our example you see o'brien very

479
00:17:21,359 --> 00:17:23,439
common it's also numeric well not

480
00:17:23,439 --> 00:17:26,079
numeric but it's oh it's alpha anyway

481
00:17:26,079 --> 00:17:28,000
but it has a special character the

482
00:17:28,000 --> 00:17:30,160
single quote apostrophe so this allows

483
00:17:30,160 --> 00:17:33,039
you to increase the the

484
00:17:33,039 --> 00:17:35,919
increase the scope of what alpha numeric

485
00:17:35,919 --> 00:17:38,799
and the whitelist characters represent

486
00:17:38,799 --> 00:17:41,679
next is the string the s for string and

487
00:17:41,679 --> 00:17:44,240
this uses the shields auto run reg x's

488
00:17:44,240 --> 00:17:46,720
that are generated

489
00:17:46,720 --> 00:17:48,480
next is constant

490
00:17:48,480 --> 00:17:50,000
which is a list of constants to match

491
00:17:50,000 --> 00:17:51,760
this is very useful for instance let's

492
00:17:51,760 --> 00:17:53,600
say you have a form

493
00:17:53,600 --> 00:17:56,240
and you're going to ask for what is the

494
00:17:56,240 --> 00:17:59,280
user sex either male or female

495
00:17:59,280 --> 00:18:01,440
or other

496
00:18:01,440 --> 00:18:02,880
you can have three different values

497
00:18:02,880 --> 00:18:04,960
specified so if it's not one of those

498
00:18:04,960 --> 00:18:08,160
three constant values coming in

499
00:18:08,160 --> 00:18:10,480
it will not it will be rejected at that

500
00:18:10,480 --> 00:18:12,480
point

501
00:18:12,480 --> 00:18:15,360
next we have custom reg x's and these

502
00:18:15,360 --> 00:18:16,880
are ones that you define specifically

503
00:18:16,880 --> 00:18:19,360
for parameter so they're not like the

504
00:18:19,360 --> 00:18:21,600
string one which uses the auto run reg

505
00:18:21,600 --> 00:18:23,600
x's to find the this shield

506
00:18:23,600 --> 00:18:26,320
this one is for specific parameters and

507
00:18:26,320 --> 00:18:28,400
it can be used by many parameters you

508
00:18:28,400 --> 00:18:30,640
could use date as an example

509
00:18:30,640 --> 00:18:32,000
all right and apply them to all your

510
00:18:32,000 --> 00:18:33,760
date fields coming in

511
00:18:33,760 --> 00:18:36,240
and finally we have a java class method

512
00:18:36,240 --> 00:18:37,760
and here is where you're actually able

513
00:18:37,760 --> 00:18:41,120
to run a java method for a particular

514
00:18:41,120 --> 00:18:43,520
parameter very powerful you could do

515
00:18:43,520 --> 00:18:44,880
whatever you want you connect with

516
00:18:44,880 --> 00:18:47,280
databases you could do anything that you

517
00:18:47,280 --> 00:18:48,960
want

518
00:18:48,960 --> 00:18:50,320
now

519
00:18:50,320 --> 00:18:53,120
so how does san web actually work here

520
00:18:53,120 --> 00:18:55,440
so what a request is processed by san

521
00:18:55,440 --> 00:18:57,120
wash

522
00:18:57,120 --> 00:18:58,640
remember it has multiple shields if you

523
00:18:58,640 --> 00:19:01,840
only have one for elimination blue

524
00:19:01,840 --> 00:19:03,600
it leaves you for each shield

525
00:19:03,600 --> 00:19:05,760
and in specs is the

526
00:19:05,760 --> 00:19:06,720
header

527
00:19:06,720 --> 00:19:08,480
cookie or parameter let's call that a

528
00:19:08,480 --> 00:19:10,880
key is it within the shield's minimum

529
00:19:10,880 --> 00:19:13,600
and maximum range if it is keep going

530
00:19:13,600 --> 00:19:15,120
otherwise

531
00:19:15,120 --> 00:19:16,240
fail out

532
00:19:16,240 --> 00:19:18,320
is it key protected by the shield itself

533
00:19:18,320 --> 00:19:20,400
that is is it part of the secured

534
00:19:20,400 --> 00:19:22,400
parameters either parameter listing

535
00:19:22,400 --> 00:19:24,960
cookies or headers

536
00:19:24,960 --> 00:19:27,200
next for each value

537
00:19:27,200 --> 00:19:30,400
that is well if the key is a value for

538
00:19:30,400 --> 00:19:32,880
each array value of that key

539
00:19:32,880 --> 00:19:34,400
right

540
00:19:34,400 --> 00:19:36,559
does the keys value max the max and the

541
00:19:36,559 --> 00:19:38,880
min range setting pass of the shield

542
00:19:38,880 --> 00:19:40,320
yes

543
00:19:40,320 --> 00:19:43,360
well look up the key data type

544
00:19:43,360 --> 00:19:44,960
and then let's call the is threat

545
00:19:44,960 --> 00:19:47,760
detected for the key value

546
00:19:47,760 --> 00:19:50,240
and here notice the string is not listed

547
00:19:50,240 --> 00:19:52,080
on here we're going to talk about that

548
00:19:52,080 --> 00:19:53,760
in the very next slide because it's a

549
00:19:53,760 --> 00:19:56,960
more complex behavior

550
00:19:57,440 --> 00:19:59,280
then that's assuming a threat was

551
00:19:59,280 --> 00:20:00,320
detected

552
00:20:00,320 --> 00:20:02,640
it says is error handling enabled well

553
00:20:02,640 --> 00:20:04,799
if it is it adds the attribute to the

554
00:20:04,799 --> 00:20:06,400
request object

555
00:20:06,400 --> 00:20:08,799
the tracking id and the error json

556
00:20:08,799 --> 00:20:11,600
and then it returns true

557
00:20:11,600 --> 00:20:13,520
now let's take a look at strings

558
00:20:13,520 --> 00:20:15,520
we'll check out we'll start off

559
00:20:15,520 --> 00:20:18,799
where the is threat detected occurred

560
00:20:18,799 --> 00:20:21,280
and again this is just for strings

561
00:20:21,280 --> 00:20:23,200
we look at the data type

562
00:20:23,200 --> 00:20:25,039
can it be a string if no data type is

563
00:20:25,039 --> 00:20:27,520
found interesting so this isn't a

564
00:20:27,520 --> 00:20:30,480
non-secure parameter cookie or header

565
00:20:30,480 --> 00:20:33,360
it says is a regex always enabled for

566
00:20:33,360 --> 00:20:35,600
this shield

567
00:20:35,600 --> 00:20:38,320
if it is it checks are you not part of

568
00:20:38,320 --> 00:20:40,080
the excluded list

569
00:20:40,080 --> 00:20:42,159
so if you're not excluded

570
00:20:42,159 --> 00:20:44,720
run all the auto run regex rugex's

571
00:20:44,720 --> 00:20:47,760
configured in the shield

572
00:20:47,760 --> 00:20:50,559
and return pass fail

573
00:20:50,559 --> 00:20:52,799
however if it is the string data type

574
00:20:52,799 --> 00:20:55,360
well it knows just run

575
00:20:55,360 --> 00:20:57,679
all the autorun rug x's

576
00:20:57,679 --> 00:21:00,000
and return your password

577
00:21:00,000 --> 00:21:03,799
so it's really quite simple

578
00:21:04,000 --> 00:21:05,840
so what's the performance of all the

579
00:21:05,840 --> 00:21:08,240
stan lot data types well

580
00:21:08,240 --> 00:21:10,080
it was written to be very very highly

581
00:21:10,080 --> 00:21:11,520
performant

582
00:21:11,520 --> 00:21:14,400
now obviously the the quit the quickest

583
00:21:14,400 --> 00:21:16,720
ones are going to be character

584
00:21:16,720 --> 00:21:17,919
number

585
00:21:17,919 --> 00:21:20,320
number delimited alphanumeric

586
00:21:20,320 --> 00:21:22,720
alphanumeric and more characters and the

587
00:21:22,720 --> 00:21:24,720
constants they are by far the quickest

588
00:21:24,720 --> 00:21:26,880
of all the data types out there

589
00:21:26,880 --> 00:21:30,240
we inspect we fell very very very fast

590
00:21:30,240 --> 00:21:32,799
so let's say you have a number coming in

591
00:21:32,799 --> 00:21:34,799
and the very first character is an a it

592
00:21:34,799 --> 00:21:36,480
fails on that it doesn't look at any

593
00:21:36,480 --> 00:21:38,400
other character so it doesn't have to

594
00:21:38,400 --> 00:21:42,080
it's written to fail fast

595
00:21:42,799 --> 00:21:44,559
now string performance well it really

596
00:21:44,559 --> 00:21:48,720
depends on the auto run regex is created

597
00:21:48,720 --> 00:21:50,720
and specified so if you have one that's

598
00:21:50,720 --> 00:21:52,799
very quick it's going to be quick

599
00:21:52,799 --> 00:21:56,559
now remember that zenoff will actually

600
00:21:56,559 --> 00:21:59,440
cache compile and cache all the reg x's

601
00:21:59,440 --> 00:22:01,520
upon startup

602
00:22:01,520 --> 00:22:05,120
this also impacts the regex

603
00:22:05,120 --> 00:22:06,559
data type

604
00:22:06,559 --> 00:22:07,840
they are also

605
00:22:07,840 --> 00:22:09,280
the performance will be dependent on the

606
00:22:09,280 --> 00:22:12,320
regex itself but they are also compiled

607
00:22:12,320 --> 00:22:14,000
and they are cached at startup so it's

608
00:22:14,000 --> 00:22:15,919
only done once to compile

609
00:22:15,919 --> 00:22:17,600
so they are quite quick

610
00:22:17,600 --> 00:22:20,960
and finally it's listed as the java java

611
00:22:20,960 --> 00:22:22,480
method the

612
00:22:22,480 --> 00:22:23,679
the performance depends on the

613
00:22:23,679 --> 00:22:24,880
complexity of the code if you're hitting

614
00:22:24,880 --> 00:22:27,039
up a database that's going to be a lot

615
00:22:27,039 --> 00:22:28,559
slower than if you just use standard

616
00:22:28,559 --> 00:22:29,520
code

617
00:22:29,520 --> 00:22:31,440
so the way java

618
00:22:31,440 --> 00:22:34,400
methods work is that it uses reflection

619
00:22:34,400 --> 00:22:36,159
but we instantiate and we cache the

620
00:22:36,159 --> 00:22:38,480
class method on startup so this is done

621
00:22:38,480 --> 00:22:40,480
once so the performance of really

622
00:22:40,480 --> 00:22:42,480
running a java

623
00:22:42,480 --> 00:22:45,280
data type channel data type is that of

624
00:22:45,280 --> 00:22:48,000
you running a static method

625
00:22:48,000 --> 00:22:50,720
so it's still very quick but again will

626
00:22:50,720 --> 00:22:52,320
not be as fast

627
00:22:52,320 --> 00:22:55,840
as the above ones listed

628
00:22:56,400 --> 00:22:58,320
so let's take an example here of how do

629
00:22:58,320 --> 00:23:00,720
we actually use this in san juan

630
00:23:00,720 --> 00:23:02,240
so in this example we're talking about a

631
00:23:02,240 --> 00:23:04,799
delimited set of numbers

632
00:23:04,799 --> 00:23:07,760
so we're going to have a parameter array

633
00:23:07,760 --> 00:23:10,080
which is called parm array and just a

634
00:23:10,080 --> 00:23:13,520
regular parameter called dlim

635
00:23:13,520 --> 00:23:15,360
and it's going to contain

636
00:23:15,360 --> 00:23:17,600
a comma delimited set of numbers that

637
00:23:17,600 --> 00:23:20,799
must be all five digits in length

638
00:23:20,799 --> 00:23:24,320
so here in the shields metadata

639
00:23:24,320 --> 00:23:25,600
secured

640
00:23:25,600 --> 00:23:28,559
parameter section we have two items

641
00:23:28,559 --> 00:23:31,520
the first item being the parm array

642
00:23:31,520 --> 00:23:35,039
specified with the n curly braces

643
00:23:35,039 --> 00:23:37,440
comma and curly braces

644
00:23:37,440 --> 00:23:40,720
bracket five comma five in bracket

645
00:23:40,720 --> 00:23:42,559
so that's a numeric

646
00:23:42,559 --> 00:23:44,640
comma delimited numeric that has to be

647
00:23:44,640 --> 00:23:46,640
five characters long and we also have

648
00:23:46,640 --> 00:23:49,039
the item dilem equals

649
00:23:49,039 --> 00:23:52,559
n comma the exact same thing

650
00:23:53,679 --> 00:23:56,159
you can also specify this is the exact

651
00:23:56,159 --> 00:23:58,159
same configuration as we saw before you

652
00:23:58,159 --> 00:24:00,720
can specify it in one line so for

653
00:24:00,720 --> 00:24:02,960
instance you you say that i want to have

654
00:24:02,960 --> 00:24:06,799
all my five digit comma delimited

655
00:24:06,799 --> 00:24:10,400
numbers in one parameter item entry

656
00:24:10,400 --> 00:24:12,640
these three colons to sep to separate

657
00:24:12,640 --> 00:24:15,200
them so here in this example you have

658
00:24:15,200 --> 00:24:16,880
two

659
00:24:16,880 --> 00:24:18,400
parameters defined

660
00:24:18,400 --> 00:24:20,880
within one item entry

661
00:24:20,880 --> 00:24:23,039
you can have as many as you want

662
00:24:23,039 --> 00:24:25,360
and it's a nice way to keep for instance

663
00:24:25,360 --> 00:24:28,240
all your dates together in one simple

664
00:24:28,240 --> 00:24:29,919
line so you don't have to keep looking

665
00:24:29,919 --> 00:24:34,480
for them as people add it it item

666
00:24:35,840 --> 00:24:37,840
let's take a

667
00:24:37,840 --> 00:24:39,360
well before we take another example

668
00:24:39,360 --> 00:24:41,039
let's take a look here that

669
00:24:41,039 --> 00:24:42,640
all headers cookies and parameters they

670
00:24:42,640 --> 00:24:44,480
can be array notated

671
00:24:44,480 --> 00:24:46,799
we use the star character

672
00:24:46,799 --> 00:24:48,559
right as a placeholder

673
00:24:48,559 --> 00:24:51,440
and as an example we have p star so

674
00:24:51,440 --> 00:24:55,039
parameters of p 1 2 3 4 and on they're

675
00:24:55,039 --> 00:24:56,240
accepted

676
00:24:56,240 --> 00:24:59,679
but all these have to be numeric

677
00:24:59,760 --> 00:25:01,760
here are some more examples you can use

678
00:25:01,760 --> 00:25:04,559
it in square brackets you can have dots

679
00:25:04,559 --> 00:25:05,919
before

680
00:25:05,919 --> 00:25:08,000
or you can have the complexity increases

681
00:25:08,000 --> 00:25:09,679
there really is no bounds you can be

682
00:25:09,679 --> 00:25:11,360
square brackets

683
00:25:11,360 --> 00:25:13,919
regular parenthesis and so on it's up to

684
00:25:13,919 --> 00:25:15,600
you so you can experiment as you like

685
00:25:15,600 --> 00:25:19,039
it's very very easy to use

686
00:25:19,679 --> 00:25:21,679
let's take another example here of a

687
00:25:21,679 --> 00:25:23,360
delimited set of numbers but this time

688
00:25:23,360 --> 00:25:25,279
let's use a reg x

689
00:25:25,279 --> 00:25:27,679
this time let's also use a cookie called

690
00:25:27,679 --> 00:25:30,000
cookie numbers and it contains a common

691
00:25:30,000 --> 00:25:31,919
delimited set of numbers that must all

692
00:25:31,919 --> 00:25:34,159
be five digits in length

693
00:25:34,159 --> 00:25:36,400
so here you see the shield and a new

694
00:25:36,400 --> 00:25:39,760
entry that we haven't seen before regex

695
00:25:39,760 --> 00:25:43,039
with its custom parameters

696
00:25:43,039 --> 00:25:44,880
and in there there's an item

697
00:25:44,880 --> 00:25:45,919
which is

698
00:25:45,919 --> 00:25:47,840
got a key that says delimited set of

699
00:25:47,840 --> 00:25:49,039
numbers

700
00:25:49,039 --> 00:25:51,200
and a value so that would be the regex

701
00:25:51,200 --> 00:25:53,279
associated with that delimited set of

702
00:25:53,279 --> 00:25:55,440
numbers

703
00:25:55,440 --> 00:25:57,520
next we have metadata secured but this

704
00:25:57,520 --> 00:25:59,120
time instead of parameters we see

705
00:25:59,120 --> 00:26:01,520
cookies because we're addressing a

706
00:26:01,520 --> 00:26:02,720
cookie now

707
00:26:02,720 --> 00:26:04,320
and the item name of the cookie the

708
00:26:04,320 --> 00:26:07,279
cookie name would be cookie numbers

709
00:26:07,279 --> 00:26:10,720
and its data type is r curly bracket

710
00:26:10,720 --> 00:26:12,720
limited set of numbers

711
00:26:12,720 --> 00:26:15,120
five comma five now why is it important

712
00:26:15,120 --> 00:26:17,279
to add five comma five well let's assume

713
00:26:17,279 --> 00:26:19,440
you don't and your reg x defined above

714
00:26:19,440 --> 00:26:22,000
it doesn't deal with the length either

715
00:26:22,000 --> 00:26:24,880
this is a great way to have a regex dos

716
00:26:24,880 --> 00:26:26,480
denial of service

717
00:26:26,480 --> 00:26:28,240
because somebody could pass in a cookie

718
00:26:28,240 --> 00:26:30,159
number that's a thousand characters long

719
00:26:30,159 --> 00:26:32,240
and if your rug x is quite complex that

720
00:26:32,240 --> 00:26:33,840
takes a lot of processing a lot of

721
00:26:33,840 --> 00:26:35,200
compute time

722
00:26:35,200 --> 00:26:36,880
on this case if you say it has to be

723
00:26:36,880 --> 00:26:38,799
five or zero to five however you want to

724
00:26:38,799 --> 00:26:40,320
specify it you're actually

725
00:26:40,320 --> 00:26:42,400
pre-validating the length of the data

726
00:26:42,400 --> 00:26:44,559
before it actually hits regex

727
00:26:44,559 --> 00:26:47,039
right but it also should be noted that

728
00:26:47,039 --> 00:26:49,120
this example is an unrealistic example

729
00:26:49,120 --> 00:26:51,440
because using the n

730
00:26:51,440 --> 00:26:54,159
right the number the the n curly bracket

731
00:26:54,159 --> 00:26:59,279
comma is much quicker than using a regex

732
00:27:00,400 --> 00:27:01,840
let's take another example an

733
00:27:01,840 --> 00:27:03,520
alphanumeric and a white listed

734
00:27:03,520 --> 00:27:04,880
character so here we're going to use a

735
00:27:04,880 --> 00:27:06,559
header

736
00:27:06,559 --> 00:27:08,080
right and the header name is going to be

737
00:27:08,080 --> 00:27:10,640
alpha comma colon that supports all

738
00:27:10,640 --> 00:27:12,720
alphanumeric characters including the

739
00:27:12,720 --> 00:27:15,440
comma and the colon characters

740
00:27:15,440 --> 00:27:17,679
so same what we see before shield

741
00:27:17,679 --> 00:27:19,520
metadata secured but this time it's in

742
00:27:19,520 --> 00:27:21,520
the headers it has an item

743
00:27:21,520 --> 00:27:24,399
with an a curly bracket comma colon and

744
00:27:24,399 --> 00:27:28,080
curly bracket that's how you specify

745
00:27:28,080 --> 00:27:29,760
a header with the name

746
00:27:29,760 --> 00:27:34,200
as an alphanumeric and more

747
00:27:35,120 --> 00:27:37,120
finally let's take a look at using a

748
00:27:37,120 --> 00:27:39,200
java class

749
00:27:39,200 --> 00:27:41,120
well first thing you have to do is you

750
00:27:41,120 --> 00:27:42,399
have to create

751
00:27:42,399 --> 00:27:45,279
a class that has a public static boolean

752
00:27:45,279 --> 00:27:47,039
method that takes in one parameter right

753
00:27:47,039 --> 00:27:49,679
now the java class only takes the value

754
00:27:49,679 --> 00:27:51,200
of the parameter that's that you've

755
00:27:51,200 --> 00:27:53,919
defined it for or that you set that

756
00:27:53,919 --> 00:27:56,720
particular data type to

757
00:27:56,720 --> 00:27:58,880
in this this is an unrealistic scenario

758
00:27:58,880 --> 00:28:01,440
i know but here is a package called

759
00:28:01,440 --> 00:28:03,760
package.com.foo

760
00:28:03,760 --> 00:28:05,840
and the class is called bar

761
00:28:05,840 --> 00:28:07,840
and the method again is public static

762
00:28:07,840 --> 00:28:10,240
boolean greater than 10 with a string

763
00:28:10,240 --> 00:28:12,000
one string called v

764
00:28:12,000 --> 00:28:14,000
and we check if the integer the percent

765
00:28:14,000 --> 00:28:16,880
is greater than 10 return true as false

766
00:28:16,880 --> 00:28:18,799
and the way you configure this in this

767
00:28:18,799 --> 00:28:21,279
shield is the shields metadata secured

768
00:28:21,279 --> 00:28:23,840
parameters and this time

769
00:28:23,840 --> 00:28:25,919
you say that the item so this this

770
00:28:25,919 --> 00:28:28,720
particular parameter name unit test java

771
00:28:28,720 --> 00:28:30,320
it's going to be protected by this

772
00:28:30,320 --> 00:28:32,640
particular

773
00:28:32,640 --> 00:28:33,919
fully path

774
00:28:33,919 --> 00:28:36,720
class dot method name

775
00:28:36,720 --> 00:28:40,000
very simple to do

776
00:28:41,200 --> 00:28:43,679
next we're going to look at string and

777
00:28:43,679 --> 00:28:45,760
rig x's

778
00:28:45,760 --> 00:28:48,240
so here you see an empty listing on the

779
00:28:48,240 --> 00:28:50,080
page that has a shield and a regex

780
00:28:50,080 --> 00:28:52,720
section as well as a metadata section

781
00:28:52,720 --> 00:28:54,240
i mentioned this before but i want to

782
00:28:54,240 --> 00:28:55,679
reiterate again because it's quite

783
00:28:55,679 --> 00:28:57,279
important we have this concept of

784
00:28:57,279 --> 00:29:00,399
inregex of auto run patterns

785
00:29:00,399 --> 00:29:02,320
these are the patterns that you want

786
00:29:02,320 --> 00:29:04,080
every string

787
00:29:04,080 --> 00:29:06,480
every parameter cookie or header that

788
00:29:06,480 --> 00:29:10,159
has the data type a string to run

789
00:29:10,159 --> 00:29:11,440
here you see

790
00:29:11,440 --> 00:29:12,880
i've set up a string called string

791
00:29:12,880 --> 00:29:15,200
parameter equals s so that string

792
00:29:15,200 --> 00:29:16,799
parameter equals s notice it doesn't

793
00:29:16,799 --> 00:29:18,640
need to specify the key name because

794
00:29:18,640 --> 00:29:20,240
here you're it's going to be using its

795
00:29:20,240 --> 00:29:21,840
data type of string so it's going to run

796
00:29:21,840 --> 00:29:25,760
all the autorun parameters listed

797
00:29:25,760 --> 00:29:27,600
on the other scenario if you just want

798
00:29:27,600 --> 00:29:28,960
to set up

799
00:29:28,960 --> 00:29:30,640
a reg x

800
00:29:30,640 --> 00:29:32,960
for one specific parameter so here's a

801
00:29:32,960 --> 00:29:34,399
delimited set of numbers that we've seen

802
00:29:34,399 --> 00:29:35,919
before again

803
00:29:35,919 --> 00:29:38,559
that's where you use the r the data type

804
00:29:38,559 --> 00:29:41,200
the reg x data type so that's where the

805
00:29:41,200 --> 00:29:42,640
difference is between a string and a

806
00:29:42,640 --> 00:29:44,559
regex one is assumed to always be

807
00:29:44,559 --> 00:29:46,480
writing it and one is assumed to not

808
00:29:46,480 --> 00:29:48,080
always be running it

809
00:29:48,080 --> 00:29:49,440
right

810
00:29:49,440 --> 00:29:50,960
and the reason why this is done is

811
00:29:50,960 --> 00:29:53,120
because remember that force regex you

812
00:29:53,120 --> 00:29:54,799
might want to set up a shield that's

813
00:29:54,799 --> 00:29:56,480
always looking for sqli and you don't

814
00:29:56,480 --> 00:29:58,240
care what the parameter is inspect it

815
00:29:58,240 --> 00:30:00,960
for sqlite

816
00:30:01,679 --> 00:30:04,799
so how do we implement the soundwell

817
00:30:04,799 --> 00:30:06,480
unfortunately only java projects are

818
00:30:06,480 --> 00:30:07,919
currently supported if you want to

819
00:30:07,919 --> 00:30:09,600
create another open source project in

820
00:30:09,600 --> 00:30:12,399
your own language please contact me

821
00:30:12,399 --> 00:30:14,880
i'd love it

822
00:30:14,880 --> 00:30:17,200
this current currently satellite is zero

823
00:30:17,200 --> 00:30:19,039
dependencies well i'm not sure i should

824
00:30:19,039 --> 00:30:20,720
call it zero dependencies but it really

825
00:30:20,720 --> 00:30:22,720
has no runtime dependencies other than

826
00:30:22,720 --> 00:30:25,600
the jre and the tomcat servlet

827
00:30:25,600 --> 00:30:26,640
the reason

828
00:30:26,640 --> 00:30:28,960
we don't even have any loggers defined

829
00:30:28,960 --> 00:30:30,320
in san juan

830
00:30:30,320 --> 00:30:32,000
the way we do that is we implemented you

831
00:30:32,000 --> 00:30:34,080
have to implement an interface and pass

832
00:30:34,080 --> 00:30:36,720
in that class to us and whatever logger

833
00:30:36,720 --> 00:30:39,840
you want to use an slf for j log for j

834
00:30:39,840 --> 00:30:42,559
and so on it can be used without

835
00:30:42,559 --> 00:30:44,320
incorporating any dependencies now we

836
00:30:44,320 --> 00:30:45,760
feel this is important because it makes

837
00:30:45,760 --> 00:30:47,440
it very simple for you to consume san

838
00:30:47,440 --> 00:30:50,720
joaf in your application

839
00:30:50,720 --> 00:30:52,159
it can then be implemented as an

840
00:30:52,159 --> 00:30:56,559
application filter or an interceptor

841
00:30:56,559 --> 00:30:58,960
you can use sanof methods independently

842
00:30:58,960 --> 00:31:02,320
or in the application code

843
00:31:03,200 --> 00:31:05,600
here is an example of implementing a san

844
00:31:05,600 --> 00:31:07,279
juan filter

845
00:31:07,279 --> 00:31:08,799
so you create a sample filter to

846
00:31:08,799 --> 00:31:11,200
validate all incoming requests

847
00:31:11,200 --> 00:31:13,519
right so you see public class sanja

848
00:31:13,519 --> 00:31:15,600
filter implements filter

849
00:31:15,600 --> 00:31:17,200
then you add it to the filter chain well

850
00:31:17,200 --> 00:31:18,480
it's done

851
00:31:18,480 --> 00:31:20,559
right but make sure you call the filter

852
00:31:20,559 --> 00:31:23,279
chain.do filter at the very end and

853
00:31:23,279 --> 00:31:24,640
notice the white

854
00:31:24,640 --> 00:31:26,240
the white text below

855
00:31:26,240 --> 00:31:30,000
static san joaquin's new sandwich

856
00:31:30,000 --> 00:31:31,840
right

857
00:31:31,840 --> 00:31:34,240
then in the method it says

858
00:31:34,240 --> 00:31:36,640
in the do filter method if that is

859
00:31:36,640 --> 00:31:38,640
threat detected passing in the request

860
00:31:38,640 --> 00:31:41,120
if it is well it's really up to you what

861
00:31:41,120 --> 00:31:43,360
you want to do as mentioned before

862
00:31:43,360 --> 00:31:45,200
if you want to get the data you call

863
00:31:45,200 --> 00:31:46,480
said and wow

864
00:31:46,480 --> 00:31:48,559
you call request you call sound left i

865
00:31:48,559 --> 00:31:50,320
get error messages

866
00:31:50,320 --> 00:31:52,000
passing in the request object and it'll

867
00:31:52,000 --> 00:31:53,760
give it to you in the json format which

868
00:31:53,760 --> 00:31:55,679
we'll see an example very shortly but

869
00:31:55,679 --> 00:31:56,880
it's really up to you how you want to

870
00:31:56,880 --> 00:32:01,039
process when a threat's detected

871
00:32:01,039 --> 00:32:04,640
quick mention about logging here

872
00:32:04,640 --> 00:32:06,799
if you don't provide

873
00:32:06,799 --> 00:32:08,159
a logger

874
00:32:08,159 --> 00:32:10,240
the system.out.printline will be used

875
00:32:10,240 --> 00:32:13,039
for logging this is terrible

876
00:32:13,039 --> 00:32:15,360
so the way you do this is you create a

877
00:32:15,360 --> 00:32:17,840
class that implements a

878
00:32:17,840 --> 00:32:20,840
com.soundlab.log.logger

879
00:32:20,880 --> 00:32:23,200
interface and there's only two error and

880
00:32:23,200 --> 00:32:25,360
info that are provided

881
00:32:25,360 --> 00:32:27,840
and there you could set up your own

882
00:32:27,840 --> 00:32:29,279
loggers that you want that's the left

883
00:32:29,279 --> 00:32:31,360
for j log for j as i mentioned before

884
00:32:31,360 --> 00:32:33,440
it's up to you now we do this in order

885
00:32:33,440 --> 00:32:34,960
to not

886
00:32:34,960 --> 00:32:37,279
add any more dependencies than we have

887
00:32:37,279 --> 00:32:38,159
to

888
00:32:38,159 --> 00:32:42,720
which is essentially it's next to none

889
00:32:42,720 --> 00:32:45,200
then when you instantiate san juan

890
00:32:45,200 --> 00:32:47,200
you pass in the logger

891
00:32:47,200 --> 00:32:49,760
right so here's another equals new sound

892
00:32:49,760 --> 00:32:52,799
with the new sound off logger

893
00:32:52,799 --> 00:32:54,880
very simple

894
00:32:54,880 --> 00:32:58,000
so please do not ever instantiate sound

895
00:32:58,000 --> 00:32:59,360
wealth unless you're doing it for tests

896
00:32:59,360 --> 00:33:00,880
without passing the logger because we

897
00:33:00,880 --> 00:33:02,559
all know system out the front line is

898
00:33:02,559 --> 00:33:03,519
not

899
00:33:03,519 --> 00:33:06,080
fast it will not be as performant as you

900
00:33:06,080 --> 00:33:07,760
probably need

901
00:33:07,760 --> 00:33:10,240
let's take a look at some of the an

902
00:33:10,240 --> 00:33:11,760
example

903
00:33:11,760 --> 00:33:13,760
of an error message and how it's

904
00:33:13,760 --> 00:33:14,960
presented

905
00:33:14,960 --> 00:33:17,279
uh by sandloff

906
00:33:17,279 --> 00:33:18,799
in this example we have a parameter

907
00:33:18,799 --> 00:33:20,799
defined as alphanumeric and more

908
00:33:20,799 --> 00:33:24,080
parameter right which allows spaces and

909
00:33:24,080 --> 00:33:25,360
um

910
00:33:25,360 --> 00:33:27,519
question marks

911
00:33:27,519 --> 00:33:30,640
and here's some payload some bad data

912
00:33:30,640 --> 00:33:32,960
blah blah blah

913
00:33:32,960 --> 00:33:35,200
when you call the cell when you call the

914
00:33:35,200 --> 00:33:37,519
get tracking id if you've enabled

915
00:33:37,519 --> 00:33:40,559
tracking id that is in in the globus in

916
00:33:40,559 --> 00:33:42,240
the shield settings

917
00:33:42,240 --> 00:33:44,399
it will pass in the

918
00:33:44,399 --> 00:33:45,840
tracking id

919
00:33:45,840 --> 00:33:48,000
this is very useful because if a

920
00:33:48,000 --> 00:33:50,159
customer sees an error repeatedly they

921
00:33:50,159 --> 00:33:51,919
can give you a tracking id and you can

922
00:33:51,919 --> 00:33:53,440
see exactly what's occurring and help

923
00:33:53,440 --> 00:33:56,799
them get get past that block

924
00:33:56,799 --> 00:33:58,559
next you have an example of what get

925
00:33:58,559 --> 00:34:00,159
errors would return

926
00:34:00,159 --> 00:34:02,720
this is an exploded json view of what

927
00:34:02,720 --> 00:34:04,080
would happen but typically it's on a

928
00:34:04,080 --> 00:34:05,360
single line

929
00:34:05,360 --> 00:34:07,200
so you can actually configure your sim

930
00:34:07,200 --> 00:34:09,839
to monitor your log files looking for

931
00:34:09,839 --> 00:34:12,159
this and if they repeatedly see the same

932
00:34:12,159 --> 00:34:14,159
thing occurring

933
00:34:14,159 --> 00:34:15,918
you can raise further alerts and have

934
00:34:15,918 --> 00:34:19,040
your security team investigate further

935
00:34:19,040 --> 00:34:20,320
what i want to point out here are the

936
00:34:20,320 --> 00:34:21,918
sample points

937
00:34:21,918 --> 00:34:23,199
because notice how we tell you what

938
00:34:23,199 --> 00:34:25,119
parameter the data that's occurring

939
00:34:25,119 --> 00:34:26,239
that's going to be

940
00:34:26,239 --> 00:34:28,800
escaped obviously what error we give you

941
00:34:28,800 --> 00:34:30,800
the error message these are this error

942
00:34:30,800 --> 00:34:32,079
message these are what's either

943
00:34:32,079 --> 00:34:33,760
configured in the global settings or in

944
00:34:33,760 --> 00:34:35,599
the shield settings

945
00:34:35,599 --> 00:34:37,520
it tells you what data type that caused

946
00:34:37,520 --> 00:34:39,918
it in english text in english terms the

947
00:34:39,918 --> 00:34:41,359
shield's name that occurred as well as

948
00:34:41,359 --> 00:34:42,639
the app version where this error

949
00:34:42,639 --> 00:34:43,839
occurred

950
00:34:43,839 --> 00:34:45,760
and the reason why you do this is notice

951
00:34:45,760 --> 00:34:47,679
how the sample points over here they

952
00:34:47,679 --> 00:34:49,918
mark up with the data look at below

953
00:34:49,918 --> 00:34:51,280
right i only put the numbers so you

954
00:34:51,280 --> 00:34:53,040
understand the positions that the

955
00:34:53,040 --> 00:34:54,480
exclamation

956
00:34:54,480 --> 00:34:56,639
the semicolon and the four dashes are in

957
00:34:56,639 --> 00:34:58,879
error

958
00:34:59,040 --> 00:35:01,680
now you can actually take that data that

959
00:35:01,680 --> 00:35:04,480
json and then even in javascript

960
00:35:04,480 --> 00:35:06,640
you can you can specify it to the end

961
00:35:06,640 --> 00:35:08,400
user come up with a nicer screen not

962
00:35:08,400 --> 00:35:10,400
that this is a nice screen by any means

963
00:35:10,400 --> 00:35:11,760
but you could come up with a nicer

964
00:35:11,760 --> 00:35:12,640
screen

965
00:35:12,640 --> 00:35:15,440
and prevent a nice message to the end

966
00:35:15,440 --> 00:35:17,440
user saying in this case invalid data

967
00:35:17,440 --> 00:35:19,040
submitted please contact and reset

968
00:35:19,040 --> 00:35:21,520
please correct and resubmit

969
00:35:21,520 --> 00:35:23,680
well the alpha numeric characters and

970
00:35:23,680 --> 00:35:25,200
spaces in the question mark are

971
00:35:25,200 --> 00:35:27,359
permitted show the bad data you can even

972
00:35:27,359 --> 00:35:29,119
highlight it in this case give them a

973
00:35:29,119 --> 00:35:30,480
back button to help them out so they

974
00:35:30,480 --> 00:35:31,599
don't have to re-key and all the

975
00:35:31,599 --> 00:35:33,359
information and again there's that

976
00:35:33,359 --> 00:35:36,160
tracking id with the 1.2.3 which would

977
00:35:36,160 --> 00:35:38,000
be the application version it's up to

978
00:35:38,000 --> 00:35:39,599
you how you want to render this data to

979
00:35:39,599 --> 00:35:44,680
the end user or if you want to at all

980
00:35:45,119 --> 00:35:46,880
now sanof if you download the

981
00:35:46,880 --> 00:35:48,960
application you'll notice you also get a

982
00:35:48,960 --> 00:35:50,160
sample

983
00:35:50,160 --> 00:35:51,760
uh well i can't really call it an

984
00:35:51,760 --> 00:35:54,560
application but let's it's a servlet

985
00:35:54,560 --> 00:35:55,359
right

986
00:35:55,359 --> 00:35:57,520
and this cenroth servlet it gives you a

987
00:35:57,520 --> 00:36:00,240
simple page it's a very rudimentary

988
00:36:00,240 --> 00:36:01,599
servlet

989
00:36:01,599 --> 00:36:03,440
all the html is hard code and so on but

990
00:36:03,440 --> 00:36:05,119
it allows you to play and test with it

991
00:36:05,119 --> 00:36:06,960
so you can put in valid data and as you

992
00:36:06,960 --> 00:36:09,119
can see this mmf results with the air id

993
00:36:09,119 --> 00:36:12,560
and the error json listed below

994
00:36:12,560 --> 00:36:14,480
so it's very useful for you to play with

995
00:36:14,480 --> 00:36:16,720
and then you can even add your own and

996
00:36:16,720 --> 00:36:17,599
maybe

997
00:36:17,599 --> 00:36:19,119
try to make these error messages look

998
00:36:19,119 --> 00:36:20,160
better

999
00:36:20,160 --> 00:36:23,680
before you present them to the end user

1000
00:36:24,079 --> 00:36:26,240
so where do you get sandwell well you

1001
00:36:26,240 --> 00:36:29,440
guessed it and get in github so you go

1002
00:36:29,440 --> 00:36:31,040
to https

1003
00:36:31,040 --> 00:36:35,359
github.com slash bernardo1024 sandwell

1004
00:36:35,359 --> 00:36:37,280
and here on the right you'll see this is

1005
00:36:37,280 --> 00:36:39,040
what the code looks like it's very tight

1006
00:36:39,040 --> 00:36:40,880
code it's very small

1007
00:36:40,880 --> 00:36:43,040
zero dependencies well

1008
00:36:43,040 --> 00:36:44,560
not really zero but mostly zero

1009
00:36:44,560 --> 00:36:46,480
dependencies

1010
00:36:46,480 --> 00:36:47,839
and then here you notice that there's no

1011
00:36:47,839 --> 00:36:49,920
bugs or vulnerabilities this is a jacoko

1012
00:36:49,920 --> 00:36:52,000
scan represented in sonar in a sonar

1013
00:36:52,000 --> 00:36:53,920
report the two code smells are really

1014
00:36:53,920 --> 00:36:56,880
related to that logger dot system out

1015
00:36:56,880 --> 00:36:58,560
right that one that if you don't

1016
00:36:58,560 --> 00:37:00,160
instantiate send one off with your own

1017
00:37:00,160 --> 00:37:02,320
logger it will use the system out one

1018
00:37:02,320 --> 00:37:04,160
that's what those are for so i can't get

1019
00:37:04,160 --> 00:37:07,720
rid of those unfortunately

1020
00:37:08,480 --> 00:37:09,520
so thank you for watching my

1021
00:37:09,520 --> 00:37:11,119
presentation and i hope that you'll

1022
00:37:11,119 --> 00:37:12,720
incorporate san juan off into your one

1023
00:37:12,720 --> 00:37:14,000
of your projects

1024
00:37:14,000 --> 00:37:15,839
if you want to contact me please email

1025
00:37:15,839 --> 00:37:18,400
me at bernardo.torontowass.org

1026
00:37:18,400 --> 00:37:20,000
but before i sign off i'd like to give

1027
00:37:20,000 --> 00:37:21,839
special thanks to my wife and family for

1028
00:37:21,839 --> 00:37:23,680
putting up with my late nights of coding

1029
00:37:23,680 --> 00:37:25,599
san juan i'd also like to thank

1030
00:37:25,599 --> 00:37:27,520
pointlesscare especially my boss andrew

1031
00:37:27,520 --> 00:37:29,520
jeters for encouraging me to open

1032
00:37:29,520 --> 00:37:31,599
sources ny software and finally i want

1033
00:37:31,599 --> 00:37:33,680
to thank tabitha lama for calling and a

1034
00:37:33,680 --> 00:37:35,119
good friend of mine for helping me with

1035
00:37:35,119 --> 00:37:36,560
this presentation

1036
00:37:36,560 --> 00:37:37,760
so now i'm leaving you with my

1037
00:37:37,760 --> 00:37:40,000
collection of deflated balloon animals i

1038
00:37:40,000 --> 00:37:42,240
hope you enjoy them and have a great day

1039
00:37:42,240 --> 00:37:46,118
thank you bye

