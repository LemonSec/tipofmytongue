1
00:00:02,879 --> 00:00:05,839
arcsan is now digital.ai

2
00:00:05,839 --> 00:00:07,759
join us at our booth in the virtual expo

3
00:00:07,759 --> 00:00:10,080
hall to learn how our app protection

4
00:00:10,080 --> 00:00:12,080
white box cryptography and threat

5
00:00:12,080 --> 00:00:14,080
analytics solutions can help you stay

6
00:00:14,080 --> 00:00:18,320
ahead of the evolving threat landscape

7
00:00:20,960 --> 00:00:25,599
hi everyone uh i'm idosa frutti uh

8
00:00:25,599 --> 00:00:28,640
co-founder and cto at perimeter x and

9
00:00:28,640 --> 00:00:30,880
with me is a

10
00:00:30,880 --> 00:00:33,840
security evangelist with with us

11
00:00:33,840 --> 00:00:36,239
and we're going to talk today about mage

12
00:00:36,239 --> 00:00:38,800
card in 2020

13
00:00:38,800 --> 00:00:39,600
and

14
00:00:39,600 --> 00:00:40,559
which is

15
00:00:40,559 --> 00:00:43,120
as we call it here the new face of xss

16
00:00:43,120 --> 00:00:45,200
or cross-site scripting and the new

17
00:00:45,200 --> 00:00:47,680
vulnerabilities and the tag vector there

18
00:00:47,680 --> 00:00:49,840
progrex is a web application security

19
00:00:49,840 --> 00:00:51,360
company and

20
00:00:51,360 --> 00:00:53,760
uh we're doing a lot of research

21
00:00:53,760 --> 00:00:54,800
around

22
00:00:54,800 --> 00:00:57,280
all kind of application abuse and mage

23
00:00:57,280 --> 00:00:58,719
card is a major

24
00:00:58,719 --> 00:01:00,559
uh

25
00:01:00,559 --> 00:01:04,159
phenomena that we're researching uh

26
00:01:04,159 --> 00:01:06,479
to protect our customer and and to start

27
00:01:06,479 --> 00:01:10,240
with what is mage card and obviously i

28
00:01:10,240 --> 00:01:12,720
assume everyone here on this audience

29
00:01:12,720 --> 00:01:15,520
heard it that to one extent

30
00:01:15,520 --> 00:01:17,840
to a certain extent and majoring in

31
00:01:17,840 --> 00:01:19,600
general is a

32
00:01:19,600 --> 00:01:23,520
aggregated term for a type of

33
00:01:23,520 --> 00:01:27,360
attack that is a a group of different

34
00:01:27,360 --> 00:01:28,560
threats

35
00:01:28,560 --> 00:01:31,840
operated by multiple organizations

36
00:01:31,840 --> 00:01:34,240
that are typically targeting

37
00:01:34,240 --> 00:01:38,320
a client-side application

38
00:01:38,320 --> 00:01:41,280
client-side browser for to practice

39
00:01:41,280 --> 00:01:43,680
digital skimming or also known as

40
00:01:43,680 --> 00:01:45,920
formjacking

41
00:01:45,920 --> 00:01:47,280
and

42
00:01:47,280 --> 00:01:51,200
then thinking think about it as

43
00:01:51,360 --> 00:01:53,600
getting some code into the application

44
00:01:53,600 --> 00:01:56,000
that runs on the browser side

45
00:01:56,000 --> 00:01:59,119
that helps them acquire and collect

46
00:01:59,119 --> 00:02:01,520
information about the visitors

47
00:02:01,520 --> 00:02:02,799
the type of information that they

48
00:02:02,799 --> 00:02:04,479
typically care about is all kind of

49
00:02:04,479 --> 00:02:06,479
personal data things that are

50
00:02:06,479 --> 00:02:08,399
valuable for them

51
00:02:08,399 --> 00:02:10,878
the most common use case is

52
00:02:10,878 --> 00:02:13,120
any payment information and most

53
00:02:13,120 --> 00:02:15,200
commonly credit card information or

54
00:02:15,200 --> 00:02:16,959
other payment related information that

55
00:02:16,959 --> 00:02:18,160
they can then

56
00:02:18,160 --> 00:02:22,160
collect and leverage in other places

57
00:02:22,160 --> 00:02:25,200
and we've seen victims of that

58
00:02:25,200 --> 00:02:28,160
in the last couple of years

59
00:02:28,160 --> 00:02:31,519
across multiple retail travel and other

60
00:02:31,519 --> 00:02:33,920
brands including even

61
00:02:33,920 --> 00:02:37,840
foundations and and non-profits like

62
00:02:37,840 --> 00:02:40,160
cancer foundations and other

63
00:02:40,160 --> 00:02:41,200
uh

64
00:02:41,200 --> 00:02:43,200
benefits even recently

65
00:02:43,200 --> 00:02:45,680
for corona aid and things like this

66
00:02:45,680 --> 00:02:48,720
where wherever a site has

67
00:02:48,720 --> 00:02:52,720
a form that can collect information uh

68
00:02:52,720 --> 00:02:54,800
it obviously becomes a target for these

69
00:02:54,800 --> 00:02:56,720
kind of skimmers

70
00:02:56,720 --> 00:02:58,720
some famous uh

71
00:02:58,720 --> 00:03:02,560
attacks were recently on macy's british

72
00:03:02,560 --> 00:03:05,840
airways got a very

73
00:03:06,319 --> 00:03:07,200
hyped

74
00:03:07,200 --> 00:03:09,360
attack and got a lot of pr around it

75
00:03:09,360 --> 00:03:14,000
because of the hefty fine that gdpr

76
00:03:14,000 --> 00:03:16,720
taxed them for for losing personal

77
00:03:16,720 --> 00:03:18,560
information

78
00:03:18,560 --> 00:03:20,640
so it's not only breaching potential

79
00:03:20,640 --> 00:03:22,400
data and causing

80
00:03:22,400 --> 00:03:24,480
actual damage

81
00:03:24,480 --> 00:03:26,239
there is an additional fine that can be

82
00:03:26,239 --> 00:03:27,840
on top of that

83
00:03:27,840 --> 00:03:30,080
mage card also just going to the origin

84
00:03:30,080 --> 00:03:32,480
of the name

85
00:03:32,480 --> 00:03:33,599
is

86
00:03:33,599 --> 00:03:36,239
originally starting from magento

87
00:03:36,239 --> 00:03:38,480
so magento is a very common platform and

88
00:03:38,480 --> 00:03:40,080
when you go back to the

89
00:03:40,080 --> 00:03:41,519
original

90
00:03:41,519 --> 00:03:44,799
attacks that were dubbed mage card it

91
00:03:44,799 --> 00:03:47,280
initially was a combination of the word

92
00:03:47,280 --> 00:03:49,680
magento and shopping cart because this

93
00:03:49,680 --> 00:03:53,120
is the where the initial attack started

94
00:03:53,120 --> 00:03:54,959
we're trying to target the shopping cart

95
00:03:54,959 --> 00:03:57,200
activity on magento stores

96
00:03:57,200 --> 00:03:59,599
an extremely popular

97
00:03:59,599 --> 00:04:01,280
platform

98
00:04:01,280 --> 00:04:04,159
for for retail

99
00:04:04,640 --> 00:04:07,920
but obviously most of the recent

100
00:04:07,920 --> 00:04:10,159
mage card attacks are not only focused

101
00:04:10,159 --> 00:04:12,560
on magento or magento like platforms but

102
00:04:12,560 --> 00:04:14,480
are targeting any website

103
00:04:14,480 --> 00:04:15,920
and why is this

104
00:04:15,920 --> 00:04:18,238
seeing such a huge rise in the last few

105
00:04:18,238 --> 00:04:20,320
years

106
00:04:20,320 --> 00:04:23,280
what we're seeing is

107
00:04:23,280 --> 00:04:26,479
attackers are targeting that because the

108
00:04:26,479 --> 00:04:28,479
the way web is built the web of

109
00:04:28,479 --> 00:04:29,919
applications are built the way

110
00:04:29,919 --> 00:04:31,919
businesses are operating evolved

111
00:04:31,919 --> 00:04:33,919
dramatically in the last few years

112
00:04:33,919 --> 00:04:35,120
uh so

113
00:04:35,120 --> 00:04:36,960
we're seeing uh

114
00:04:36,960 --> 00:04:40,479
10x more website than a decade ago

115
00:04:40,479 --> 00:04:42,720
obviously everyone

116
00:04:42,720 --> 00:04:45,120
here knows that the web is growing and

117
00:04:45,120 --> 00:04:47,680
more and more businesses is is going

118
00:04:47,680 --> 00:04:48,800
through digital

119
00:04:48,800 --> 00:04:50,240
transformation

120
00:04:50,240 --> 00:04:52,800
much more developers are

121
00:04:52,800 --> 00:04:53,759
are

122
00:04:53,759 --> 00:04:55,520
building and building code there which

123
00:04:55,520 --> 00:04:56,400
is

124
00:04:56,400 --> 00:04:59,680
opening more exposure and more and more

125
00:04:59,680 --> 00:05:02,880
code is being transferred to the front

126
00:05:02,880 --> 00:05:04,639
end from the back end so a lot of the

127
00:05:04,639 --> 00:05:08,080
logic from from thin application and

128
00:05:08,080 --> 00:05:10,479
heavy on the back end and more and more

129
00:05:10,479 --> 00:05:13,039
applications are moving to fat clients

130
00:05:13,039 --> 00:05:14,800
being it mobile or

131
00:05:14,800 --> 00:05:17,680
a single application or dynamic code

132
00:05:17,680 --> 00:05:18,960
where

133
00:05:18,960 --> 00:05:21,120
most of the logic is running as a code

134
00:05:21,120 --> 00:05:22,800
on the client side

135
00:05:22,800 --> 00:05:24,720
rendering and collecting information via

136
00:05:24,720 --> 00:05:26,000
apis

137
00:05:26,000 --> 00:05:28,240
and when looking at all this cut

138
00:05:28,240 --> 00:05:31,440
transition and and increase of code on

139
00:05:31,440 --> 00:05:33,199
the front end

140
00:05:33,199 --> 00:05:36,000
it's it's also obvious to see that

141
00:05:36,000 --> 00:05:38,160
more than 70 percent of the website

142
00:05:38,160 --> 00:05:40,080
front and code is not actually code that

143
00:05:40,080 --> 00:05:42,400
was generated by the developers

144
00:05:42,400 --> 00:05:44,000
themselves but a lot of it is

145
00:05:44,000 --> 00:05:47,280
third-party open source libraries uh

146
00:05:47,280 --> 00:05:50,320
partners third-party vendors that are

147
00:05:50,320 --> 00:05:52,800
providing services think of

148
00:05:52,800 --> 00:05:56,319
google analytics for instance ads

149
00:05:56,319 --> 00:05:57,759
check out

150
00:05:57,759 --> 00:06:00,240
customers support a lot of modules that

151
00:06:00,240 --> 00:06:02,160
you include by embedding some

152
00:06:02,160 --> 00:06:05,280
third-party coder and all this change is

153
00:06:05,280 --> 00:06:07,440
presenting obviously for attacker an

154
00:06:07,440 --> 00:06:08,880
interesting

155
00:06:08,880 --> 00:06:12,400
vertical to to target

156
00:06:13,280 --> 00:06:15,840
and that present this this entire shift

157
00:06:15,840 --> 00:06:17,759
is also presenting what we called as a

158
00:06:17,759 --> 00:06:20,639
client-side shadow code and what is this

159
00:06:20,639 --> 00:06:22,639
client-side shadow call that that we're

160
00:06:22,639 --> 00:06:24,880
saying basically

161
00:06:24,880 --> 00:06:26,960
part of the challenges when when looking

162
00:06:26,960 --> 00:06:29,120
at so much code that is running on the

163
00:06:29,120 --> 00:06:31,919
front-end is that javascript code is

164
00:06:31,919 --> 00:06:35,039
statically added you include some

165
00:06:35,039 --> 00:06:36,960
some snippet of

166
00:06:36,960 --> 00:06:39,680
of code on the main html page that you

167
00:06:39,680 --> 00:06:41,360
embed it once

168
00:06:41,360 --> 00:06:44,000
but then you are dynamically loading the

169
00:06:44,000 --> 00:06:46,720
javascript and in the browser

170
00:06:46,720 --> 00:06:49,280
and the javascript the javascript

171
00:06:49,280 --> 00:06:51,680
itself may change when you are including

172
00:06:51,680 --> 00:06:53,759
a tag for

173
00:06:53,759 --> 00:06:54,560
uh

174
00:06:54,560 --> 00:06:56,319
for google analytics for instance as an

175
00:06:56,319 --> 00:06:57,759
example before

176
00:06:57,759 --> 00:06:59,599
you include it once

177
00:06:59,599 --> 00:07:02,319
as google as google are rolling out new

178
00:07:02,319 --> 00:07:03,919
versions for google analytics you don't

179
00:07:03,919 --> 00:07:06,639
need to change your site the the updated

180
00:07:06,639 --> 00:07:08,400
script is automatically being loaded

181
00:07:08,400 --> 00:07:11,400
there

182
00:07:18,400 --> 00:07:19,520
another

183
00:07:19,520 --> 00:07:21,599
another aspect is that

184
00:07:21,599 --> 00:07:23,840
because all this logic is happening on

185
00:07:23,840 --> 00:07:25,759
the browser and all this code is running

186
00:07:25,759 --> 00:07:27,199
and rendered and the

187
00:07:27,199 --> 00:07:29,440
elements that it brings and fetches are

188
00:07:29,440 --> 00:07:31,759
running on the browser side the website

189
00:07:31,759 --> 00:07:33,199
owners if you're

190
00:07:33,199 --> 00:07:36,000
owning a website and that is

191
00:07:36,000 --> 00:07:37,680
having a lot of capabilities or

192
00:07:37,680 --> 00:07:39,759
javascript capabilities you have

193
00:07:39,759 --> 00:07:41,520
no visibility on what actually is

194
00:07:41,520 --> 00:07:43,520
happening on the client side so if the

195
00:07:43,520 --> 00:07:46,319
new script is now being modified or if

196
00:07:46,319 --> 00:07:48,639
then the third party vendor was breached

197
00:07:48,639 --> 00:07:51,120
and is loading a different script or a

198
00:07:51,120 --> 00:07:53,759
vulnerable script you on your data

199
00:07:53,759 --> 00:07:55,919
center and all your security tools that

200
00:07:55,919 --> 00:07:58,319
you have on your own data center you you

201
00:07:58,319 --> 00:08:00,160
are completely blind to that because all

202
00:08:00,160 --> 00:08:02,479
that is being rendered and achieved on

203
00:08:02,479 --> 00:08:03,840
the client side

204
00:08:03,840 --> 00:08:06,239
and

205
00:08:06,800 --> 00:08:09,199
and and obviously these two

206
00:08:09,199 --> 00:08:10,840
two things are

207
00:08:10,840 --> 00:08:12,720
are

208
00:08:12,720 --> 00:08:14,479
very uh

209
00:08:14,479 --> 00:08:16,960
good foundation and very attractive

210
00:08:16,960 --> 00:08:20,080
assets for attackers to go after

211
00:08:20,080 --> 00:08:21,599
this is where they

212
00:08:21,599 --> 00:08:23,919
they can be in the shadows and and act

213
00:08:23,919 --> 00:08:27,039
and operate for a long period of time

214
00:08:27,039 --> 00:08:29,520
and in a potentially much easier way

215
00:08:29,520 --> 00:08:31,440
than actually tapping into your highly

216
00:08:31,440 --> 00:08:33,120
secured

217
00:08:33,120 --> 00:08:35,440
data center

218
00:08:35,440 --> 00:08:37,839
if they can collect information from the

219
00:08:37,839 --> 00:08:40,559
users versus from your database

220
00:08:40,559 --> 00:08:42,240
why should they hack into the database

221
00:08:42,240 --> 00:08:44,560
versus doing that and this is the trend

222
00:08:44,560 --> 00:08:46,560
and the shift and the opportunity that

223
00:08:46,560 --> 00:08:48,320
all these shifts in the last days is

224
00:08:48,320 --> 00:08:49,760
presenting

225
00:08:49,760 --> 00:08:52,000
and to learn more about how they're

226
00:08:52,000 --> 00:08:55,360
doing that i'll hand it over to amit to

227
00:08:55,360 --> 00:08:57,760
to walk through some of the

228
00:08:57,760 --> 00:08:59,519
recent attacks some of the analysis that

229
00:08:59,519 --> 00:09:01,360
we're doing and some of the potential

230
00:09:01,360 --> 00:09:04,000
risks to be aware of

231
00:09:04,000 --> 00:09:06,240
thank you edo so

232
00:09:06,240 --> 00:09:08,320
we looked at

233
00:09:08,320 --> 00:09:09,680
we looked at what is the mage card

234
00:09:09,680 --> 00:09:12,800
problem and why it affects uh modern web

235
00:09:12,800 --> 00:09:14,160
applications

236
00:09:14,160 --> 00:09:16,560
uh for the rest of this of this talk we

237
00:09:16,560 --> 00:09:18,160
want to take a look at how do these

238
00:09:18,160 --> 00:09:21,040
attacks actually enter a typical website

239
00:09:21,040 --> 00:09:22,640
and what are the different injection

240
00:09:22,640 --> 00:09:24,880
techniques uh what makes it really hard

241
00:09:24,880 --> 00:09:26,959
and complex to detect we'll look at a

242
00:09:26,959 --> 00:09:29,600
case study and a fake example couple

243
00:09:29,600 --> 00:09:31,760
examples of actual attacks that our

244
00:09:31,760 --> 00:09:34,240
research team has uncovered in the wild

245
00:09:34,240 --> 00:09:35,680
and

246
00:09:35,680 --> 00:09:37,120
wrap it up with some best practices

247
00:09:37,120 --> 00:09:39,680
recommendations on how how website

248
00:09:39,680 --> 00:09:42,399
owners can can mitigate and prevent

249
00:09:42,399 --> 00:09:44,160
these types of attacks

250
00:09:44,160 --> 00:09:46,640
so if you look at injection techniques

251
00:09:46,640 --> 00:09:48,560
uh there are a few different ways that

252
00:09:48,560 --> 00:09:49,440
uh

253
00:09:49,440 --> 00:09:52,399
mage card attacks can infect a website

254
00:09:52,399 --> 00:09:54,640
and the first uh of course common

255
00:09:54,640 --> 00:09:57,279
approach is the traditional compromise

256
00:09:57,279 --> 00:09:58,880
of the first party infrastructure right

257
00:09:58,880 --> 00:10:01,120
so this could be you know through a

258
00:10:01,120 --> 00:10:02,079
account

259
00:10:02,079 --> 00:10:04,000
a brute force attack on the uh the

260
00:10:04,000 --> 00:10:06,560
infrastructure somewhere on the develop

261
00:10:06,560 --> 00:10:08,399
the development cycle

262
00:10:08,399 --> 00:10:11,360
that can insert a snippet or change a

263
00:10:11,360 --> 00:10:13,839
snippet or change a uh

264
00:10:13,839 --> 00:10:16,560
a script uh directive to load

265
00:10:16,560 --> 00:10:19,040
potentially uh unknown code or shadow

266
00:10:19,040 --> 00:10:22,959
code onto the web application itself

267
00:10:22,959 --> 00:10:25,440
and this is this and the other this can

268
00:10:25,440 --> 00:10:28,160
also be done by taking over by carrying

269
00:10:28,160 --> 00:10:30,079
out cross-site scripting attacks against

270
00:10:30,079 --> 00:10:32,079
the infrastructure and getting access to

271
00:10:32,079 --> 00:10:34,000
the backend database and credentials and

272
00:10:34,000 --> 00:10:36,480
so on but another more common approach

273
00:10:36,480 --> 00:10:38,880
we are seeing more and more right now is

274
00:10:38,880 --> 00:10:41,519
the use of cloud storage

275
00:10:41,519 --> 00:10:44,320
uh s3 buckets uh you know get get the

276
00:10:44,320 --> 00:10:46,079
brunt of this but this because this has

277
00:10:46,079 --> 00:10:49,120
also been found on other cloud providers

278
00:10:49,120 --> 00:10:50,880
storage services

279
00:10:50,880 --> 00:10:53,680
and what we're finding is that security

280
00:10:53,680 --> 00:10:56,399
controls and permissions on an s3

281
00:10:56,399 --> 00:10:59,040
buckets are often not up to par

282
00:10:59,040 --> 00:11:01,519
and they are you know hackers are

283
00:11:01,519 --> 00:11:03,440
constantly scanning

284
00:11:03,440 --> 00:11:05,920
s3 buckets on the internet to find ones

285
00:11:05,920 --> 00:11:07,839
where they have write access

286
00:11:07,839 --> 00:11:09,519
and when they do find one that where

287
00:11:09,519 --> 00:11:10,560
they have right

288
00:11:10,560 --> 00:11:12,079
with weak permissions with their right

289
00:11:12,079 --> 00:11:14,240
access that's potentially hosting web

290
00:11:14,240 --> 00:11:16,160
javascript for web

291
00:11:16,160 --> 00:11:18,000
uh they can go in and modify it and

292
00:11:18,000 --> 00:11:20,000
insert malicious code in the javascript

293
00:11:20,000 --> 00:11:21,600
and then you know when that script

294
00:11:21,600 --> 00:11:23,120
phones home to a command and control

295
00:11:23,120 --> 00:11:24,079
server

296
00:11:24,079 --> 00:11:25,600
uh they know they know what targets

297
00:11:25,600 --> 00:11:27,680
they've acquired that way right so this

298
00:11:27,680 --> 00:11:30,000
is a common first party attack technique

299
00:11:30,000 --> 00:11:32,560
that we're seeing on web applications

300
00:11:32,560 --> 00:11:34,959
but the other way to insert malicious

301
00:11:34,959 --> 00:11:37,200
code into web apps is open source

302
00:11:37,200 --> 00:11:38,800
libraries

303
00:11:38,800 --> 00:11:40,959
so as you know you know most modern

304
00:11:40,959 --> 00:11:43,120
development makes extensive use of open

305
00:11:43,120 --> 00:11:46,560
source libraries uh both for uh and for

306
00:11:46,560 --> 00:11:48,800
for in-house applications as well as

307
00:11:48,800 --> 00:11:51,279
customer-facing web applications

308
00:11:51,279 --> 00:11:53,680
and this you know this enables a level

309
00:11:53,680 --> 00:11:55,920
of innovation and a pace of innovation

310
00:11:55,920 --> 00:11:58,639
that is really uh really beneficial to

311
00:11:58,639 --> 00:12:00,320
the industry as a whole

312
00:12:00,320 --> 00:12:03,200
but this comes with a few problems

313
00:12:03,200 --> 00:12:05,440
uh with open source libraries that are

314
00:12:05,440 --> 00:12:08,079
in repositories online you often don't

315
00:12:08,079 --> 00:12:11,040
know who all have commit access right so

316
00:12:11,040 --> 00:12:12,880
it's by definition they're community

317
00:12:12,880 --> 00:12:14,720
projects and you have large numbers of

318
00:12:14,720 --> 00:12:16,880
people that have access to make changes

319
00:12:16,880 --> 00:12:18,639
to these libraries

320
00:12:18,639 --> 00:12:20,399
which is a good thing because you know

321
00:12:20,399 --> 00:12:22,720
bugs get resolved really quickly but the

322
00:12:22,720 --> 00:12:24,399
downside of that is you don't know what

323
00:12:24,399 --> 00:12:26,959
vulnerabilities may get introduced

324
00:12:26,959 --> 00:12:29,040
uh there may be insider threats there

325
00:12:29,040 --> 00:12:30,720
may be uh you know there's more weight

326
00:12:30,720 --> 00:12:34,000
the attack surface is a lot larger

327
00:12:34,000 --> 00:12:35,600
and another problem with open source

328
00:12:35,600 --> 00:12:37,279
libraries is of course

329
00:12:37,279 --> 00:12:39,519
zero-day vulnerabilities that may exist

330
00:12:39,519 --> 00:12:41,279
in the code that

331
00:12:41,279 --> 00:12:43,760
that somebody can discover and exploit

332
00:12:43,760 --> 00:12:46,079
and that's another way that malicious

333
00:12:46,079 --> 00:12:48,880
code can enter a web application then of

334
00:12:48,880 --> 00:12:50,800
course there are always account takeover

335
00:12:50,800 --> 00:12:53,200
attempts of people who have commit

336
00:12:53,200 --> 00:12:54,639
access or

337
00:12:54,639 --> 00:12:56,480
have permissions to change things in the

338
00:12:56,480 --> 00:12:58,240
open source library

339
00:12:58,240 --> 00:13:00,000
and that's that's also abused

340
00:13:00,000 --> 00:13:02,720
extensively to carry these out

341
00:13:02,720 --> 00:13:03,920
and then

342
00:13:03,920 --> 00:13:05,600
a third attack said the injection

343
00:13:05,600 --> 00:13:08,399
technique is uh third-party attacks

344
00:13:08,399 --> 00:13:10,800
on third-party script providers so this

345
00:13:10,800 --> 00:13:12,480
is you know like you don't mentioned

346
00:13:12,480 --> 00:13:15,839
about refining about 70 of code on a

347
00:13:15,839 --> 00:13:18,800
typical web application is a third-party

348
00:13:18,800 --> 00:13:20,959
and this actually represents a really

349
00:13:20,959 --> 00:13:23,920
large attack surface for uh for for many

350
00:13:23,920 --> 00:13:25,600
third-party attacks

351
00:13:25,600 --> 00:13:28,079
and again like with uh with first party

352
00:13:28,079 --> 00:13:30,240
you know this is it's gonna use similar

353
00:13:30,240 --> 00:13:32,720
techniques like cross-site scripting or

354
00:13:32,720 --> 00:13:35,120
looking for exposed s3 buckets

355
00:13:35,120 --> 00:13:38,399
or another common approach is plug-ins

356
00:13:38,399 --> 00:13:40,320
that are used in common content

357
00:13:40,320 --> 00:13:41,839
management systems

358
00:13:41,839 --> 00:13:44,079
uh wordpress is notorious for this

359
00:13:44,079 --> 00:13:46,320
there's almost a vulnerability announced

360
00:13:46,320 --> 00:13:48,880
every month and something discovered

361
00:13:48,880 --> 00:13:50,480
in a plug-in

362
00:13:50,480 --> 00:13:51,920
and version control and version

363
00:13:51,920 --> 00:13:54,079
management is generally generally not

364
00:13:54,079 --> 00:13:56,480
well regulated with these plug-ins so

365
00:13:56,480 --> 00:13:58,880
this becomes a weak point for many many

366
00:13:58,880 --> 00:14:01,519
web applications and e-commerce sites

367
00:14:01,519 --> 00:14:02,480
and

368
00:14:02,480 --> 00:14:04,800
and customer-facing sites

369
00:14:04,800 --> 00:14:07,120
and now this represents a really large

370
00:14:07,120 --> 00:14:09,360
attack surface and this is also an

371
00:14:09,360 --> 00:14:11,519
attractive target for attackers because

372
00:14:11,519 --> 00:14:14,079
by taking over one service that is used

373
00:14:14,079 --> 00:14:15,440
by

374
00:14:15,440 --> 00:14:17,040
thousands of different sites they can

375
00:14:17,040 --> 00:14:19,920
actually get a much much bigger yield

376
00:14:19,920 --> 00:14:22,000
and a great example of this is in a

377
00:14:22,000 --> 00:14:23,600
couple months ago a leading

378
00:14:23,600 --> 00:14:25,440
communications provider

379
00:14:25,440 --> 00:14:27,839
published a publisher vulnerability that

380
00:14:27,839 --> 00:14:28,959
they're

381
00:14:28,959 --> 00:14:31,279
one of the most commonly used scripts

382
00:14:31,279 --> 00:14:34,560
was actually on an s3 bucket with uh

383
00:14:34,560 --> 00:14:36,000
wrong permissions

384
00:14:36,000 --> 00:14:39,199
and known mageguard gank was able to

385
00:14:39,199 --> 00:14:40,880
to modify it

386
00:14:40,880 --> 00:14:42,959
and this malicious code actually made

387
00:14:42,959 --> 00:14:44,880
its way into thousands of different

388
00:14:44,880 --> 00:14:46,079
websites

389
00:14:46,079 --> 00:14:48,399
thankfully it was discovered and fixed

390
00:14:48,399 --> 00:14:49,360
before

391
00:14:49,360 --> 00:14:51,680
before it caused any known harm

392
00:14:51,680 --> 00:14:53,680
but this is a great example of how by

393
00:14:53,680 --> 00:14:55,920
attacking a single service a mage guard

394
00:14:55,920 --> 00:14:58,240
attacker can get access to thousands of

395
00:14:58,240 --> 00:15:00,480
thousands of websites and uh and

396
00:15:00,480 --> 00:15:03,600
millions of user records

397
00:15:06,639 --> 00:15:08,560
so the one thing we see with mage card

398
00:15:08,560 --> 00:15:10,639
attacks is they tend to they tend to

399
00:15:10,639 --> 00:15:12,720
last for a really long time they evade

400
00:15:12,720 --> 00:15:15,519
detection and they you know typically

401
00:15:15,519 --> 00:15:17,760
when the vulnerability is discovered and

402
00:15:17,760 --> 00:15:19,519
and you do the security analysis you

403
00:15:19,519 --> 00:15:20,959
find out that it's been running for

404
00:15:20,959 --> 00:15:23,279
several months or several weeks

405
00:15:23,279 --> 00:15:25,680
and it has escaped detection for a long

406
00:15:25,680 --> 00:15:26,480
time

407
00:15:26,480 --> 00:15:28,560
and part of the part of the reason is

408
00:15:28,560 --> 00:15:30,320
like you don't mention that this code is

409
00:15:30,320 --> 00:15:32,320
running on the client side where the

410
00:15:32,320 --> 00:15:34,639
website owners typically not

411
00:15:34,639 --> 00:15:36,240
don't have full visibility into what's

412
00:15:36,240 --> 00:15:37,519
going on there

413
00:15:37,519 --> 00:15:40,800
and it's also very dynamic so what

414
00:15:40,800 --> 00:15:42,959
actually loads when a user loads a

415
00:15:42,959 --> 00:15:45,440
website or those on the browser where it

416
00:15:45,440 --> 00:15:47,040
loads on my browser may be very

417
00:15:47,040 --> 00:15:48,800
different than what loads on edo's

418
00:15:48,800 --> 00:15:50,800
browser or your browser

419
00:15:50,800 --> 00:15:53,519
based on certain conditions and criteria

420
00:15:53,519 --> 00:15:56,399
and you know where we are what types of

421
00:15:56,399 --> 00:15:58,240
devices we're using

422
00:15:58,240 --> 00:16:00,000
and and certain other logic that's

423
00:16:00,000 --> 00:16:01,759
present present in these apps so it

424
00:16:01,759 --> 00:16:03,600
becomes it's a challenging problem to

425
00:16:03,600 --> 00:16:04,560
detect

426
00:16:04,560 --> 00:16:06,880
and a fairly complex threat

427
00:16:06,880 --> 00:16:08,480
and to make things worse we're dealing

428
00:16:08,480 --> 00:16:12,000
with a few other sort of layers of uh

429
00:16:12,000 --> 00:16:14,320
obscurity like for example a lot of mage

430
00:16:14,320 --> 00:16:16,399
card is is obfuscated code it's

431
00:16:16,399 --> 00:16:19,120
obfuscated javascript so a visual

432
00:16:19,120 --> 00:16:21,600
inspection will not reveal what it's

433
00:16:21,600 --> 00:16:22,800
doing

434
00:16:22,800 --> 00:16:25,279
and obfuscating javascript for you know

435
00:16:25,279 --> 00:16:28,160
web applications is is not just uh and

436
00:16:28,160 --> 00:16:31,120
it's used legitimately as well as a way

437
00:16:31,120 --> 00:16:33,360
of preserving integrity and hiding

438
00:16:33,360 --> 00:16:35,839
intellectual property and it's not

439
00:16:35,839 --> 00:16:37,519
necessarily a bad thing but that just

440
00:16:37,519 --> 00:16:40,000
creates a creates room for for malware

441
00:16:40,000 --> 00:16:42,000
to lurk as well

442
00:16:42,000 --> 00:16:44,160
and it's not straightforward to uh to

443
00:16:44,160 --> 00:16:46,320
determine what this code is doing just

444
00:16:46,320 --> 00:16:49,360
by looking at the source

445
00:16:49,360 --> 00:16:51,279
the other common attack

446
00:16:51,279 --> 00:16:54,000
technique we see is through look-alike

447
00:16:54,000 --> 00:16:55,680
malicious domains

448
00:16:55,680 --> 00:16:57,759
so we might we've seen a lot of

449
00:16:57,759 --> 00:17:00,160
incidents where a commonly used service

450
00:17:00,160 --> 00:17:01,839
so let's say google analytics as an

451
00:17:01,839 --> 00:17:03,040
example

452
00:17:03,040 --> 00:17:05,599
a hacker might register lookalike domain

453
00:17:05,599 --> 00:17:07,839
and they'll change one character for

454
00:17:07,839 --> 00:17:09,679
example so they've changed the eye here

455
00:17:09,679 --> 00:17:11,359
to the eye with the with the carrot with

456
00:17:11,359 --> 00:17:12,559
an accent

457
00:17:12,559 --> 00:17:13,760
and

458
00:17:13,760 --> 00:17:15,599
you know this is an entirely different

459
00:17:15,599 --> 00:17:16,640
name by

460
00:17:16,640 --> 00:17:18,000
if you look at the unicode this is a

461
00:17:18,000 --> 00:17:19,119
different name

462
00:17:19,119 --> 00:17:22,079
and now the way dns rules work right now

463
00:17:22,079 --> 00:17:24,480
you know for better or worse uh you know

464
00:17:24,480 --> 00:17:26,079
identities can be hidden

465
00:17:26,079 --> 00:17:27,919
so it's really hard to go verify who

466
00:17:27,919 --> 00:17:30,320
actually owns this and whether that the

467
00:17:30,320 --> 00:17:33,360
owner is up to no good

468
00:17:33,360 --> 00:17:35,760
and by doing this what hackers can do is

469
00:17:35,760 --> 00:17:37,919
they can modify you know commonly used

470
00:17:37,919 --> 00:17:41,280
uh scripts in a page like uh like google

471
00:17:41,280 --> 00:17:43,760
analytics right which is used

472
00:17:43,760 --> 00:17:45,919
to gather stats on most websites and

473
00:17:45,919 --> 00:17:47,200
they can change this and they can

474
00:17:47,200 --> 00:17:48,880
actually load a malicious version of

475
00:17:48,880 --> 00:17:50,960
google analytics from a domain that they

476
00:17:50,960 --> 00:17:52,080
control

477
00:17:52,080 --> 00:17:54,320
and that malicious script can then load

478
00:17:54,320 --> 00:17:57,200
other malicious scripts as well and uh

479
00:17:57,200 --> 00:17:58,320
and

480
00:17:58,320 --> 00:18:01,120
start scraping or start uh

481
00:18:01,120 --> 00:18:03,280
taking over content from the uh from the

482
00:18:03,280 --> 00:18:05,039
website

483
00:18:05,039 --> 00:18:06,720
the other thing we see a lot of is that

484
00:18:06,720 --> 00:18:09,440
tripwires and evasion mechanisms which

485
00:18:09,440 --> 00:18:13,440
are used to you know to evade analysts

486
00:18:13,440 --> 00:18:15,440
so we've seen cases where the malicious

487
00:18:15,440 --> 00:18:17,440
code that where they where the code

488
00:18:17,440 --> 00:18:20,240
that's been injected it actually has

489
00:18:20,240 --> 00:18:22,000
logic that says you know what's the

490
00:18:22,000 --> 00:18:24,160
browser window size

491
00:18:24,160 --> 00:18:26,160
is the window size such that devtools

492
00:18:26,160 --> 00:18:27,840
might be open and if it suspects that

493
00:18:27,840 --> 00:18:29,360
devtools is open

494
00:18:29,360 --> 00:18:31,440
on chrome then it will not load the

495
00:18:31,440 --> 00:18:32,960
malicious piece it'll load a clean

496
00:18:32,960 --> 00:18:34,720
version of the script and everything

497
00:18:34,720 --> 00:18:35,919
looks normal

498
00:18:35,919 --> 00:18:37,039
but if it

499
00:18:37,039 --> 00:18:39,120
or if it's coming from like an aws

500
00:18:39,120 --> 00:18:40,880
source ip address it will not load the

501
00:18:40,880 --> 00:18:42,320
malicious script which could indicate

502
00:18:42,320 --> 00:18:44,880
you know a scanner or it could indicate

503
00:18:44,880 --> 00:18:47,760
some attempt to to analyze

504
00:18:47,760 --> 00:18:49,120
the page

505
00:18:49,120 --> 00:18:50,240
we've seen really innovative

506
00:18:50,240 --> 00:18:52,240
exfiltration techniques as well the most

507
00:18:52,240 --> 00:18:54,720
common ones are an xhr post but we've

508
00:18:54,720 --> 00:18:56,960
seen also the use of steganography which

509
00:18:56,960 --> 00:19:00,720
is hiding data in image requests or or

510
00:19:00,720 --> 00:19:03,120
hiding malicious code and images

511
00:19:03,120 --> 00:19:04,080
and

512
00:19:04,080 --> 00:19:05,280
these are some of the ways the

513
00:19:05,280 --> 00:19:07,280
exfiltration of the data actually can be

514
00:19:07,280 --> 00:19:08,960
masked as well

515
00:19:08,960 --> 00:19:11,200
so you know it's a fairly complex threat

516
00:19:11,200 --> 00:19:13,520
even for advanced security analysts to

517
00:19:13,520 --> 00:19:17,120
to detect and analyze

518
00:19:19,039 --> 00:19:21,760
so having said that let's take a look at

519
00:19:21,760 --> 00:19:24,000
one example a couple examples so this

520
00:19:24,000 --> 00:19:26,000
first one here is a

521
00:19:26,000 --> 00:19:28,080
fashion retailer out of france that was

522
00:19:28,080 --> 00:19:30,480
compromised this is from about a little

523
00:19:30,480 --> 00:19:32,320
under a year ago

524
00:19:32,320 --> 00:19:34,240
and what we found here is really

525
00:19:34,240 --> 00:19:37,600
interesting so there the way the the

526
00:19:37,600 --> 00:19:39,760
malicious skimmer script was loaded was

527
00:19:39,760 --> 00:19:42,080
through many levels of indirection

528
00:19:42,080 --> 00:19:43,039
so

529
00:19:43,039 --> 00:19:45,520
it's a multi multi-stage attack

530
00:19:45,520 --> 00:19:47,440
and in the first stage what we found was

531
00:19:47,440 --> 00:19:49,840
of course the websites the the attackers

532
00:19:49,840 --> 00:19:52,320
gain access to the website and they were

533
00:19:52,320 --> 00:19:53,440
able to

534
00:19:53,440 --> 00:19:55,200
you know get to get to a point where

535
00:19:55,200 --> 00:19:57,280
they can insert or modify the other

536
00:19:57,280 --> 00:19:58,880
source code

537
00:19:58,880 --> 00:20:01,440
and what they did is they placed a

538
00:20:01,440 --> 00:20:03,360
malicious loader that looked on the

539
00:20:03,360 --> 00:20:05,600
surface like google analytics

540
00:20:05,600 --> 00:20:07,600
right so it looked like google analytics

541
00:20:07,600 --> 00:20:09,039
to tag manager

542
00:20:09,039 --> 00:20:11,120
and it actually

543
00:20:11,120 --> 00:20:13,440
was inserted inline into the into the

544
00:20:13,440 --> 00:20:16,320
source code but it actually loaded

545
00:20:16,320 --> 00:20:18,720
the script from a from a militia from a

546
00:20:18,720 --> 00:20:20,080
domain that was controlled by the

547
00:20:20,080 --> 00:20:21,520
hackers

548
00:20:21,520 --> 00:20:24,799
and this tag manager loaded a another

549
00:20:24,799 --> 00:20:27,120
script and the the domain name for the

550
00:20:27,120 --> 00:20:29,520
script was actually encoded in this uh

551
00:20:29,520 --> 00:20:31,840
string that you see here so by visual

552
00:20:31,840 --> 00:20:33,360
inspection you couldn't tell that they

553
00:20:33,360 --> 00:20:35,200
were loading something from a

554
00:20:35,200 --> 00:20:36,559
malicious domain

555
00:20:36,559 --> 00:20:39,120
i'd have to you know

556
00:20:39,120 --> 00:20:41,360
reverse the hash here and and update

557
00:20:41,360 --> 00:20:43,520
this url which uh which is where the

558
00:20:43,520 --> 00:20:45,919
malicious script was uh loaded from but

559
00:20:45,919 --> 00:20:47,679
this was not actually the skimmer so

560
00:20:47,679 --> 00:20:49,520
this script then in turn loaded yet

561
00:20:49,520 --> 00:20:51,440
another script which was the actual

562
00:20:51,440 --> 00:20:53,039
skimmer and it was also loaded from the

563
00:20:53,039 --> 00:20:54,559
same domain

564
00:20:54,559 --> 00:20:56,880
and this is a script that started

565
00:20:56,880 --> 00:20:58,880
sniffing credit card information and

566
00:20:58,880 --> 00:21:00,799
other personal data on the checkout page

567
00:21:00,799 --> 00:21:03,280
for this website and transmitting it

568
00:21:03,280 --> 00:21:05,120
back to the command and control server

569
00:21:05,120 --> 00:21:06,360
which was

570
00:21:06,360 --> 00:21:09,280
magento.info and again this was a domain

571
00:21:09,280 --> 00:21:10,799
registered by the hackers for the

572
00:21:10,799 --> 00:21:12,960
purpose of carrying out this attack

573
00:21:12,960 --> 00:21:14,559
and but if you look just visual

574
00:21:14,559 --> 00:21:15,919
inspection of the source code this

575
00:21:15,919 --> 00:21:17,679
domain doesn't doesn't show up anywhere

576
00:21:17,679 --> 00:21:19,919
so it's really hard to just uh catch

577
00:21:19,919 --> 00:21:22,159
these types of attacks by by source code

578
00:21:22,159 --> 00:21:24,640
inspection through cursory scanning

579
00:21:24,640 --> 00:21:26,559
or through kind of advanced analysis

580
00:21:26,559 --> 00:21:28,159
right you have to you can reverse

581
00:21:28,159 --> 00:21:30,080
engineer the the multiple layers of

582
00:21:30,080 --> 00:21:31,679
scripts to figure out uh what they're

583
00:21:31,679 --> 00:21:32,640
doing

584
00:21:32,640 --> 00:21:34,880
and what the negative impact of the of

585
00:21:34,880 --> 00:21:37,120
these scripts might be

586
00:21:37,120 --> 00:21:39,120
and this is why why this problem is

587
00:21:39,120 --> 00:21:41,440
really hard to detect and solve because

588
00:21:41,440 --> 00:21:42,799
unless you have

589
00:21:42,799 --> 00:21:45,360
you kind of some runtime

590
00:21:45,360 --> 00:21:47,520
signals that tell you what the page is

591
00:21:47,520 --> 00:21:49,760
actually doing it's just hard to hard to

592
00:21:49,760 --> 00:21:51,440
detect and stop this kind of kind of

593
00:21:51,440 --> 00:21:53,760
attack

594
00:21:56,080 --> 00:21:58,000
i want to talk a little bit about the

595
00:21:58,000 --> 00:21:59,760
inter skimmer so this has been talked

596
00:21:59,760 --> 00:22:03,120
about quite a bit and this is a skimming

597
00:22:03,120 --> 00:22:06,159
tool kit that has been sold and used on

598
00:22:06,159 --> 00:22:08,799
the while for over 12 months now

599
00:22:08,799 --> 00:22:12,240
and this toolkit actually is is as a way

600
00:22:12,240 --> 00:22:14,880
to give take the complexity out of mage

601
00:22:14,880 --> 00:22:17,039
card attacks and it makes mesh card

602
00:22:17,039 --> 00:22:19,679
attacks accessible to even the novice

603
00:22:19,679 --> 00:22:20,720
hackers

604
00:22:20,720 --> 00:22:23,120
uh they don't need to know the

605
00:22:23,120 --> 00:22:25,760
the nuances and the details it's very

606
00:22:25,760 --> 00:22:27,600
very customizable

607
00:22:27,600 --> 00:22:28,559
and

608
00:22:28,559 --> 00:22:30,880
you can choose what you want to do with

609
00:22:30,880 --> 00:22:32,240
it you can choose from different

610
00:22:32,240 --> 00:22:34,480
exfiltration techniques uh using the

611
00:22:34,480 --> 00:22:35,520
skimmer

612
00:22:35,520 --> 00:22:37,200
and one of the most common uses of the

613
00:22:37,200 --> 00:22:39,520
skimmer we find is is creating fake

614
00:22:39,520 --> 00:22:41,360
checkout forms

615
00:22:41,360 --> 00:22:42,640
so

616
00:22:42,640 --> 00:22:43,679
what

617
00:22:43,679 --> 00:22:45,440
hackers are ultimately after stealing

618
00:22:45,440 --> 00:22:47,120
you know try after payment card

619
00:22:47,120 --> 00:22:49,919
information and many checkout forms will

620
00:22:49,919 --> 00:22:50,720
use

621
00:22:50,720 --> 00:22:53,120
iframes to to kind of master information

622
00:22:53,120 --> 00:22:55,120
from other scripts on the page

623
00:22:55,120 --> 00:22:57,360
and so to get around that problem what

624
00:22:57,360 --> 00:22:59,919
we see hackers doing is they'll modify a

625
00:22:59,919 --> 00:23:02,320
page before that so like product

626
00:23:02,320 --> 00:23:04,799
browsing page or the shopping cart page

627
00:23:04,799 --> 00:23:07,760
and by modifying the dom the document

628
00:23:07,760 --> 00:23:10,320
object model they can insert a button

629
00:23:10,320 --> 00:23:12,400
that looks like a checkout button a user

630
00:23:12,400 --> 00:23:14,640
doesn't know the user clicks on it and

631
00:23:14,640 --> 00:23:17,280
they actually get taken to a fake

632
00:23:17,280 --> 00:23:18,799
checkout page which is actually

633
00:23:18,799 --> 00:23:20,640
controlled by the hacker and the

634
00:23:20,640 --> 00:23:22,240
checkout page will inherit all the

635
00:23:22,240 --> 00:23:24,799
styles the css the style sheets from the

636
00:23:24,799 --> 00:23:26,480
main page so it has similar look and

637
00:23:26,480 --> 00:23:30,000
feel similar fonts similar structure

638
00:23:30,000 --> 00:23:32,320
but now this is this page is entirely

639
00:23:32,320 --> 00:23:34,960
controlled by controlled by the hackers

640
00:23:34,960 --> 00:23:37,280
and now when you type in your your

641
00:23:37,280 --> 00:23:38,799
personal information your credit card

642
00:23:38,799 --> 00:23:40,799
information

643
00:23:40,799 --> 00:23:44,559
uh and and hit submit nothing happens

644
00:23:44,559 --> 00:23:46,640
nothing happens because all this page is

645
00:23:46,640 --> 00:23:48,320
able to do is actually post that

646
00:23:48,320 --> 00:23:50,320
information to the command and control

647
00:23:50,320 --> 00:23:52,720
server and from there

648
00:23:52,720 --> 00:23:53,600
that

649
00:23:53,600 --> 00:23:55,279
information is harvested and then sold

650
00:23:55,279 --> 00:23:57,840
on the dark web but the user experience

651
00:23:57,840 --> 00:23:59,600
is a little bit a little bit marred

652
00:23:59,600 --> 00:24:01,840
because in the first time it fails and

653
00:24:01,840 --> 00:24:03,520
then they might go back and they might

654
00:24:03,520 --> 00:24:05,520
try you know to check out again and this

655
00:24:05,520 --> 00:24:06,960
time they'll get the correct form and

656
00:24:06,960 --> 00:24:08,640
they'll be they'll be able to complete

657
00:24:08,640 --> 00:24:10,240
the transaction

658
00:24:10,240 --> 00:24:10,960
but

659
00:24:10,960 --> 00:24:12,720
there's still you know this still

660
00:24:12,720 --> 00:24:14,559
provides a little bit of a clue to the

661
00:24:14,559 --> 00:24:16,000
user if they're informed that they're

662
00:24:16,000 --> 00:24:18,240
educated they can sense that maybe

663
00:24:18,240 --> 00:24:20,159
something was wrong they can you know

664
00:24:20,159 --> 00:24:22,159
open the ticket with the vendor

665
00:24:22,159 --> 00:24:24,720
and say hey i suspected something

666
00:24:24,720 --> 00:24:26,559
there might have been a skimmer on this

667
00:24:26,559 --> 00:24:29,360
page i didn't had the strange experience

668
00:24:29,360 --> 00:24:31,520
and that can alert the website owners to

669
00:24:31,520 --> 00:24:33,679
the existence of this toolkit and they

670
00:24:33,679 --> 00:24:36,880
can take steps to stop it

671
00:24:36,880 --> 00:24:38,400
so

672
00:24:38,400 --> 00:24:40,799
so we've seen a lot of inter so it has

673
00:24:40,799 --> 00:24:42,720
we've seen still you know

674
00:24:42,720 --> 00:24:44,640
a lot of successful

675
00:24:44,640 --> 00:24:46,480
hacks using the inter skimmer

676
00:24:46,480 --> 00:24:48,880
and using these fake checkout forms and

677
00:24:48,880 --> 00:24:50,320
uh you know this continues to be a

678
00:24:50,320 --> 00:24:52,880
really popular toolkit uh recently we've

679
00:24:52,880 --> 00:24:54,799
even seen inter being offered as a

680
00:24:54,799 --> 00:24:57,679
service where you know the the hack the

681
00:24:57,679 --> 00:24:59,919
the writers of this toolkit will do all

682
00:24:59,919 --> 00:25:01,200
the hard work for you and they'll just

683
00:25:01,200 --> 00:25:02,640
do a revenue share

684
00:25:02,640 --> 00:25:04,720
and you get a portion of the of the

685
00:25:04,720 --> 00:25:06,880
proceeds from from you know selling the

686
00:25:06,880 --> 00:25:09,279
credit card numbers they keep a portion

687
00:25:09,279 --> 00:25:11,200
and they just make it really easy and

688
00:25:11,200 --> 00:25:13,039
accessible so it's kind of a bit of a

689
00:25:13,039 --> 00:25:15,679
democratization of uh you know hard

690
00:25:15,679 --> 00:25:17,679
skipping toolkits

691
00:25:17,679 --> 00:25:19,919
but we still have this problem that they

692
00:25:19,919 --> 00:25:23,440
are not able there is a clue to the the

693
00:25:23,440 --> 00:25:26,240
user that something wrong happened and

694
00:25:26,240 --> 00:25:28,799
this is the the problem that mage card

695
00:25:28,799 --> 00:25:30,880
attackers have been trying to solve and

696
00:25:30,880 --> 00:25:33,279
here's an example of how you know they

697
00:25:33,279 --> 00:25:35,520
solved it without having to go through

698
00:25:35,520 --> 00:25:37,440
the fake checkout path

699
00:25:37,440 --> 00:25:39,679
so the ultimate holy grail for major

700
00:25:39,679 --> 00:25:43,039
attackers is the payment script and

701
00:25:43,039 --> 00:25:44,080
they've been

702
00:25:44,080 --> 00:25:45,919
looking for ways to actually compromise

703
00:25:45,919 --> 00:25:47,840
payment scripts uh so that they don't

704
00:25:47,840 --> 00:25:49,679
have to you know do the fake checkout

705
00:25:49,679 --> 00:25:51,600
they don't have to alter the user path

706
00:25:51,600 --> 00:25:53,600
but they can get a copy of the credit

707
00:25:53,600 --> 00:25:57,120
card data while the user is successfully

708
00:25:57,120 --> 00:25:58,880
carrying out a transaction

709
00:25:58,880 --> 00:26:01,200
and here's an example of an attack that

710
00:26:01,200 --> 00:26:03,279
the perimeter x research team discovered

711
00:26:03,279 --> 00:26:05,760
that was the fact that was on braintree

712
00:26:05,760 --> 00:26:07,840
which is the paypal payment service

713
00:26:07,840 --> 00:26:09,679
that's used as a payment gateway for

714
00:26:09,679 --> 00:26:12,159
many e-commerce sites

715
00:26:12,159 --> 00:26:14,320
and very often you know

716
00:26:14,320 --> 00:26:16,640
ecommerce retailers will use a you know

717
00:26:16,640 --> 00:26:19,120
a pci-compliant payment provider like

718
00:26:19,120 --> 00:26:20,320
braintree

719
00:26:20,320 --> 00:26:22,559
and uh and a good day you know all this

720
00:26:22,559 --> 00:26:25,440
data is partitioned within an iframe the

721
00:26:25,440 --> 00:26:27,279
the retailer doesn't have access to it

722
00:26:27,279 --> 00:26:29,039
so they're able to comply with pci

723
00:26:29,039 --> 00:26:32,159
regulations and at the stations that uh

724
00:26:32,159 --> 00:26:34,000
you know they're they're not storing the

725
00:26:34,000 --> 00:26:36,000
credit card information anywhere on this

726
00:26:36,000 --> 00:26:38,559
site it's all handled by braintree and

727
00:26:38,559 --> 00:26:40,240
they're now they're able to kind of

728
00:26:40,240 --> 00:26:42,480
offload a bit of that responsibility

729
00:26:42,480 --> 00:26:44,400
but the key takeaway here is that that

730
00:26:44,400 --> 00:26:46,320
doesn't necessarily guarantee data

731
00:26:46,320 --> 00:26:47,919
privacy

732
00:26:47,919 --> 00:26:49,919
so here's an example where

733
00:26:49,919 --> 00:26:52,080
hackers were actually able to now first

734
00:26:52,080 --> 00:26:54,159
they gain access to the site and they

735
00:26:54,159 --> 00:26:56,799
modified the source for the page

736
00:26:56,799 --> 00:26:58,559
and instead of calling you know the

737
00:26:58,559 --> 00:27:00,880
usual url braintreegateway.com

738
00:27:00,880 --> 00:27:02,960
and loading the script from there they

739
00:27:02,960 --> 00:27:05,440
loaded the script from a fake domain

740
00:27:05,440 --> 00:27:06,480
that they control called

741
00:27:06,480 --> 00:27:09,120
braintreegateway24.com

742
00:27:09,120 --> 00:27:11,360
and what's interesting is that they were

743
00:27:11,360 --> 00:27:13,520
able to bypass all of the validation and

744
00:27:13,520 --> 00:27:15,520
all the client-side validation and using

745
00:27:15,520 --> 00:27:16,799
this

746
00:27:16,799 --> 00:27:18,399
altered version of the script they're

747
00:27:18,399 --> 00:27:20,240
actually able to run successful payment

748
00:27:20,240 --> 00:27:22,320
transactions

749
00:27:22,320 --> 00:27:24,720
and this is really interesting because

750
00:27:24,720 --> 00:27:27,039
they you know you have a situation where

751
00:27:27,039 --> 00:27:29,919
you have modified client-side script

752
00:27:29,919 --> 00:27:32,159
and braintree is accepting requests from

753
00:27:32,159 --> 00:27:32,960
that

754
00:27:32,960 --> 00:27:34,799
and and concluding successful

755
00:27:34,799 --> 00:27:36,640
transactions but this modified script

756
00:27:36,640 --> 00:27:38,399
also sends a copy

757
00:27:38,399 --> 00:27:40,640
of the credit card to uh the command and

758
00:27:40,640 --> 00:27:42,480
control server hosted by the by the

759
00:27:42,480 --> 00:27:43,600
hackers

760
00:27:43,600 --> 00:27:45,440
and this is

761
00:27:45,440 --> 00:27:47,679
the problem because users have no

762
00:27:47,679 --> 00:27:50,159
indication that anything wrong happened

763
00:27:50,159 --> 00:27:52,320
this doesn't show up anywhere on the on

764
00:27:52,320 --> 00:27:54,080
the server logs so the website owner has

765
00:27:54,080 --> 00:27:56,080
no indication that this happened and

766
00:27:56,080 --> 00:27:57,520
braintree has no indication that this

767
00:27:57,520 --> 00:27:58,799
happened because they're they're

768
00:27:58,799 --> 00:28:00,640
receiving you know transaction requests

769
00:28:00,640 --> 00:28:02,159
like they normally would from their own

770
00:28:02,159 --> 00:28:03,279
script

771
00:28:03,279 --> 00:28:06,000
and there there's no you know

772
00:28:06,000 --> 00:28:08,880
without looking at the the endpoint the

773
00:28:08,880 --> 00:28:10,960
the client-side behavior it's really

774
00:28:10,960 --> 00:28:13,520
hard to detect something like this

775
00:28:13,520 --> 00:28:16,399
and and stop it because this is all

776
00:28:16,399 --> 00:28:18,399
running within an iframe it's following

777
00:28:18,399 --> 00:28:20,159
all the security best practices it's

778
00:28:20,159 --> 00:28:22,480
meeting pci compliance objectives but

779
00:28:22,480 --> 00:28:24,000
your data is getting skimmed at the same

780
00:28:24,000 --> 00:28:24,880
time

781
00:28:24,880 --> 00:28:27,039
this was another interesting attack that

782
00:28:27,039 --> 00:28:29,039
that mesh guard attackers are after and

783
00:28:29,039 --> 00:28:30,799
they're replicating this across other

784
00:28:30,799 --> 00:28:32,720
payment services as well

785
00:28:32,720 --> 00:28:34,559
and there's a detailed analysis of this

786
00:28:34,559 --> 00:28:36,559
incident on the perimeter x blog which

787
00:28:36,559 --> 00:28:38,640
you can you can take a look at

788
00:28:38,640 --> 00:28:40,960
and uh just walk through all the

789
00:28:40,960 --> 00:28:42,799
different steps in this

790
00:28:42,799 --> 00:28:46,720
in this attack and how it transpired

791
00:28:49,360 --> 00:28:52,000
so we looked at you know the client side

792
00:28:52,000 --> 00:28:53,840
blind side problem we looked at kind of

793
00:28:53,840 --> 00:28:56,880
how shadow code gets into the website

794
00:28:56,880 --> 00:28:59,520
some examples of how mage guard attacks

795
00:28:59,520 --> 00:29:02,399
affect web applications what can we do

796
00:29:02,399 --> 00:29:04,240
to actually prevent this

797
00:29:04,240 --> 00:29:05,600
um so there

798
00:29:05,600 --> 00:29:06,960
there are a few

799
00:29:06,960 --> 00:29:09,120
sort of best practices you can follow to

800
00:29:09,120 --> 00:29:11,679
control this problem

801
00:29:11,679 --> 00:29:13,200
so first of all

802
00:29:13,200 --> 00:29:14,880
protecting your web infrastructure is

803
00:29:14,880 --> 00:29:17,600
just sort of a baseline for for any web

804
00:29:17,600 --> 00:29:20,399
application security posture so make

805
00:29:20,399 --> 00:29:22,000
sure you're using web application

806
00:29:22,000 --> 00:29:24,080
firewalls to protect against more of the

807
00:29:24,080 --> 00:29:25,760
traditional cross-site scripting attacks

808
00:29:25,760 --> 00:29:27,760
make sure you're using strong admin

809
00:29:27,760 --> 00:29:29,360
passwords and multi-factor

810
00:29:29,360 --> 00:29:31,600
authentication to make sure that

811
00:29:31,600 --> 00:29:33,360
even if an admin account gets

812
00:29:33,360 --> 00:29:37,039
compromised and the mfa will prevent

813
00:29:37,039 --> 00:29:37,919
prevent

814
00:29:37,919 --> 00:29:40,480
hackers from getting in

815
00:29:40,480 --> 00:29:42,640
make sure all your if you're using a cms

816
00:29:42,640 --> 00:29:44,960
third-party cms or third-party platform

817
00:29:44,960 --> 00:29:46,880
make sure all your plugins are properly

818
00:29:46,880 --> 00:29:47,919
vetted

819
00:29:47,919 --> 00:29:49,520
and make sure you apply all of the

820
00:29:49,520 --> 00:29:51,520
security patches on time this is just

821
00:29:51,520 --> 00:29:53,520
basic security hygiene that you can use

822
00:29:53,520 --> 00:29:55,279
to protect

823
00:29:55,279 --> 00:29:56,880
your infrastructure

824
00:29:56,880 --> 00:29:59,120
and in addition you know secure your

825
00:29:59,120 --> 00:30:01,279
development processes for first party

826
00:30:01,279 --> 00:30:02,720
scripts so make sure you're doing

827
00:30:02,720 --> 00:30:05,760
security audits early on uh analyzing

828
00:30:05,760 --> 00:30:06,880
open source libraries for

829
00:30:06,880 --> 00:30:09,200
vulnerabilities early in the cycle so

830
00:30:09,200 --> 00:30:11,679
you know whatever gets out into into the

831
00:30:11,679 --> 00:30:13,440
staging and production environment is

832
00:30:13,440 --> 00:30:14,320
clean

833
00:30:14,320 --> 00:30:17,039
i can at least control that

834
00:30:17,039 --> 00:30:18,240
you can

835
00:30:18,240 --> 00:30:19,760
but like you don't mention in the

836
00:30:19,760 --> 00:30:21,679
beginning this only protects you know a

837
00:30:21,679 --> 00:30:23,120
small portion of the scripts that you

838
00:30:23,120 --> 00:30:24,880
have that you have out there you have

839
00:30:24,880 --> 00:30:26,880
about seventy percent uh third-party

840
00:30:26,880 --> 00:30:28,000
scripts

841
00:30:28,000 --> 00:30:30,080
how do you protect against those and

842
00:30:30,080 --> 00:30:31,600
potential attacks on the third-party

843
00:30:31,600 --> 00:30:33,440
script so there are some techniques you

844
00:30:33,440 --> 00:30:35,279
can use like uh content security

845
00:30:35,279 --> 00:30:36,480
policies

846
00:30:36,480 --> 00:30:40,000
so csp is a really useful

847
00:30:40,000 --> 00:30:43,120
solution to this problem because csp

848
00:30:43,120 --> 00:30:47,039
lets you enforce policies on the browser

849
00:30:47,039 --> 00:30:48,960
so if you're familiar with csp it's a

850
00:30:48,960 --> 00:30:51,679
set of directives that the site can send

851
00:30:51,679 --> 00:30:54,399
down to the browser that then restrict

852
00:30:54,399 --> 00:30:56,320
you know where what domains it can load

853
00:30:56,320 --> 00:30:58,799
scripts from uh restricts what domains

854
00:30:58,799 --> 00:31:01,200
the other site can communicate with

855
00:31:01,200 --> 00:31:02,640
and uh

856
00:31:02,640 --> 00:31:05,840
and you know what uh

857
00:31:06,320 --> 00:31:08,399
what code it can run and and where you

858
00:31:08,399 --> 00:31:10,320
know where it can

859
00:31:10,320 --> 00:31:12,960
get right to so csp rules are really

860
00:31:12,960 --> 00:31:13,919
useful

861
00:31:13,919 --> 00:31:16,159
and uh but they're not entirely

862
00:31:16,159 --> 00:31:17,679
sufficient

863
00:31:17,679 --> 00:31:19,919
for a couple reasons so you know csps

864
00:31:19,919 --> 00:31:23,200
are hard to manage because they are

865
00:31:23,200 --> 00:31:25,840
they have to be maintained right so now

866
00:31:25,840 --> 00:31:27,600
if you're deploying a site you need to

867
00:31:27,600 --> 00:31:29,519
know in advance and what all the

868
00:31:29,519 --> 00:31:30,960
different domains are that all of your

869
00:31:30,960 --> 00:31:33,120
third parties are communicating with

870
00:31:33,120 --> 00:31:34,559
you need to have a change management

871
00:31:34,559 --> 00:31:36,320
process in place so that when the

872
00:31:36,320 --> 00:31:39,678
domains change they can

873
00:31:39,760 --> 00:31:41,679
the policy can be modified and if you

874
00:31:41,679 --> 00:31:43,039
don't do that if you don't do that

875
00:31:43,039 --> 00:31:45,519
regularly then you end up with a broken

876
00:31:45,519 --> 00:31:48,240
site functionality and a poor user

877
00:31:48,240 --> 00:31:50,640
experience which is uh which is sort of

878
00:31:50,640 --> 00:31:52,559
difficult to to palette

879
00:31:52,559 --> 00:31:54,880
for most organizations so

880
00:31:54,880 --> 00:31:56,159
this becomes a

881
00:31:56,159 --> 00:31:57,679
there's definitely a maintenance issue

882
00:31:57,679 --> 00:31:59,440
for csb and then the other thing to keep

883
00:31:59,440 --> 00:32:01,200
in mind is csp is not going to protect

884
00:32:01,200 --> 00:32:04,080
you against first party compromises

885
00:32:04,080 --> 00:32:05,519
so if there is a

886
00:32:05,519 --> 00:32:07,919
a known set of hosts that are allowed

887
00:32:07,919 --> 00:32:10,159
under the csp rules

888
00:32:10,159 --> 00:32:12,080
those are yours could be a vendor that

889
00:32:12,080 --> 00:32:14,720
you really trust and you have a

890
00:32:14,720 --> 00:32:17,600
tight relationship with and if those are

891
00:32:17,600 --> 00:32:18,720
allowed

892
00:32:18,720 --> 00:32:20,559
then then the hackers are just going to

893
00:32:20,559 --> 00:32:22,799
seek to compromise those hosts in order

894
00:32:22,799 --> 00:32:27,360
to insert malware into into your website

895
00:32:27,360 --> 00:32:28,480
and then

896
00:32:28,480 --> 00:32:31,279
so csps are useful but uh along with

897
00:32:31,279 --> 00:32:33,440
that i think what's really useful is uh

898
00:32:33,440 --> 00:32:35,519
visibility into

899
00:32:35,519 --> 00:32:37,840
from the client side as to what the what

900
00:32:37,840 --> 00:32:39,440
the scripts are actually doing so

901
00:32:39,440 --> 00:32:41,679
there's solutions available uh

902
00:32:41,679 --> 00:32:43,200
like from perimeter x

903
00:32:43,200 --> 00:32:45,679
that help you monitor the client side of

904
00:32:45,679 --> 00:32:47,600
your application and collect signals

905
00:32:47,600 --> 00:32:50,320
from your users browsers in real time

906
00:32:50,320 --> 00:32:51,600
and

907
00:32:51,600 --> 00:32:53,279
these solutions can baseline the

908
00:32:53,279 --> 00:32:55,679
behavior or what normal looks like

909
00:32:55,679 --> 00:32:58,399
they can flag any anomaly so if a script

910
00:32:58,399 --> 00:33:00,399
that a third party script suddenly

911
00:33:00,399 --> 00:33:02,080
starts communicating with a known

912
00:33:02,080 --> 00:33:04,320
malicious domain that's anomalous

913
00:33:04,320 --> 00:33:06,559
behavior that can be flagged that can be

914
00:33:06,559 --> 00:33:07,279
uh

915
00:33:07,279 --> 00:33:09,360
you can raise alarm on and then you can

916
00:33:09,360 --> 00:33:11,600
actually use content security policies

917
00:33:11,600 --> 00:33:12,640
to

918
00:33:12,640 --> 00:33:14,880
stop that communication to mitigate that

919
00:33:14,880 --> 00:33:17,120
behavior without crippling the site

920
00:33:17,120 --> 00:33:19,360
functionality without damaging the the

921
00:33:19,360 --> 00:33:20,320
good

922
00:33:20,320 --> 00:33:22,240
actions that your scripts are doing as

923
00:33:22,240 --> 00:33:23,600
well

924
00:33:23,600 --> 00:33:25,760
so you know mage card attacks have grown

925
00:33:25,760 --> 00:33:28,399
in size and scope but uh it's definitely

926
00:33:28,399 --> 00:33:30,320
uh the solutions to to solve and address

927
00:33:30,320 --> 00:33:31,760
them are

928
00:33:31,760 --> 00:33:33,360
are here as well

929
00:33:33,360 --> 00:33:35,600
uh it's a difficult problem because you

930
00:33:35,600 --> 00:33:37,679
know if the traditional client-side

931
00:33:37,679 --> 00:33:40,320
blind side but by having

932
00:33:40,320 --> 00:33:42,399
visibility into what what's going on in

933
00:33:42,399 --> 00:33:44,399
the client side can really get this

934
00:33:44,399 --> 00:33:47,360
problem under control

935
00:33:51,039 --> 00:33:53,200
and with that thank you for uh for

936
00:33:53,200 --> 00:33:56,240
joining us here at uh the global labsec

937
00:33:56,240 --> 00:33:58,000
if you have any questions feel free to

938
00:33:58,000 --> 00:34:00,720
reach out to us and uh and happy to uh

939
00:34:00,720 --> 00:34:03,760
to discuss further

