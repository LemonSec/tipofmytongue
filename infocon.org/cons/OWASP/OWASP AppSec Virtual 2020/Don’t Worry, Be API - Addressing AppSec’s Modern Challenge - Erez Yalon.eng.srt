1
00:00:02,879 --> 00:00:05,839
arcsan is now digital.ai

2
00:00:05,839 --> 00:00:07,759
join us at our booth in the virtual expo

3
00:00:07,759 --> 00:00:10,080
hall to learn how our app protection

4
00:00:10,080 --> 00:00:12,080
white box cryptography and threat

5
00:00:12,080 --> 00:00:14,080
analytics solutions can help you stay

6
00:00:14,080 --> 00:00:18,320
ahead of the evolving threat landscape

7
00:00:21,039 --> 00:00:23,199
hello everyone and welcome to don't

8
00:00:23,199 --> 00:00:25,119
worry be happy

9
00:00:25,119 --> 00:00:26,960
which is a terrible pun

10
00:00:26,960 --> 00:00:29,519
but it's all about addressing the model

11
00:00:29,519 --> 00:00:32,960
challenges of api in apsec

12
00:00:32,960 --> 00:00:36,640
so let's start with a quick pop quiz

13
00:00:36,640 --> 00:00:38,160
what is

14
00:00:38,160 --> 00:00:40,719
the common with all these companies you

15
00:00:40,719 --> 00:00:42,800
see now on your screen

16
00:00:42,800 --> 00:00:46,320
and give you five seconds maybe less

17
00:00:46,320 --> 00:00:49,200
okay there are probably a lot of correct

18
00:00:49,200 --> 00:00:50,239
answers

19
00:00:50,239 --> 00:00:52,640
and the answers the answer i had in mind

20
00:00:52,640 --> 00:00:55,760
is that each and every one of these

21
00:00:55,760 --> 00:00:56,960
companies

22
00:00:56,960 --> 00:01:00,000
exposed some sort of api

23
00:01:00,000 --> 00:01:01,840
vulnerability

24
00:01:01,840 --> 00:01:04,159
just in the last six months

25
00:01:04,159 --> 00:01:05,199
so

26
00:01:05,199 --> 00:01:08,080
we can bet that if the big ones

27
00:01:08,080 --> 00:01:10,960
are struggling with securing their apis

28
00:01:10,960 --> 00:01:13,760
and the rest of us are doing the same

29
00:01:13,760 --> 00:01:15,439
so we are here to talk about api

30
00:01:15,439 --> 00:01:17,119
security

31
00:01:17,119 --> 00:01:19,600
uh who am i and what are we doing here

32
00:01:19,600 --> 00:01:22,400
so my name is erez i work at check marks

33
00:01:22,400 --> 00:01:25,200
as a director of security research

34
00:01:25,200 --> 00:01:27,759
i'm interested in all sorts of

35
00:01:27,759 --> 00:01:29,840
all aspects of security but focusing

36
00:01:29,840 --> 00:01:32,240
mainly on application security i'm a

37
00:01:32,240 --> 00:01:34,000
strong believer in spreading security

38
00:01:34,000 --> 00:01:36,880
awareness and very relevant for this

39
00:01:36,880 --> 00:01:39,280
session and co-leading the oas api

40
00:01:39,280 --> 00:01:40,960
security project

41
00:01:40,960 --> 00:01:42,880
one of the superpowers i have in check

42
00:01:42,880 --> 00:01:45,680
marks is to be exposed to the thousands

43
00:01:45,680 --> 00:01:48,079
and thousands of code bases

44
00:01:48,079 --> 00:01:50,799
of our customers and prospects

45
00:01:50,799 --> 00:01:53,520
and mainly to all the

46
00:01:53,520 --> 00:01:57,040
um broken stuff and mistakes and it's

47
00:01:57,040 --> 00:01:59,040
kind of funny because

48
00:01:59,040 --> 00:02:00,719
i noticed that i'm following the

49
00:02:00,719 --> 00:02:03,200
technological trends of the market i'm

50
00:02:03,200 --> 00:02:06,320
following them through the trends of

51
00:02:06,320 --> 00:02:09,199
security issues and definitely at the

52
00:02:09,199 --> 00:02:11,200
moment we're seeing everything drifting

53
00:02:11,200 --> 00:02:12,319
towards

54
00:02:12,319 --> 00:02:14,080
uh apis

55
00:02:14,080 --> 00:02:17,120
so what is this api we speak of

56
00:02:17,120 --> 00:02:19,360
um i'm pretty sure that all of us knows

57
00:02:19,360 --> 00:02:20,480
that

58
00:02:20,480 --> 00:02:23,520
api is application programming interface

59
00:02:23,520 --> 00:02:26,560
and i saw the definition in wikipedia

60
00:02:26,560 --> 00:02:28,400
and i liked it it's an interface or

61
00:02:28,400 --> 00:02:30,160
communication protocol between client

62
00:02:30,160 --> 00:02:31,360
and server

63
00:02:31,360 --> 00:02:34,000
but i want us to look at it not as the

64
00:02:34,000 --> 00:02:36,720
traditional client and server but

65
00:02:36,720 --> 00:02:38,800
every component

66
00:02:38,800 --> 00:02:41,840
that is communicating um with another

67
00:02:41,840 --> 00:02:43,360
component

68
00:02:43,360 --> 00:02:46,400
uh be it a micro service

69
00:02:46,400 --> 00:02:50,319
an actual client an actual server

70
00:02:50,319 --> 00:02:53,040
is part of this communication and every

71
00:02:53,040 --> 00:02:56,000
arch between these two components is

72
00:02:56,000 --> 00:02:57,680
an api

73
00:02:57,680 --> 00:03:01,680
who uses apis and what uses apis so we

74
00:03:01,680 --> 00:03:03,760
see these days that microservices are

75
00:03:03,760 --> 00:03:05,680
definitely using apis

76
00:03:05,680 --> 00:03:08,400
and everything that is mobile and iot

77
00:03:08,400 --> 00:03:12,239
um b2bs using apis serverless everything

78
00:03:12,239 --> 00:03:15,599
that is cloud is using apis and the big

79
00:03:15,599 --> 00:03:19,040
trend of single page applications is all

80
00:03:19,040 --> 00:03:21,440
about apis as well so

81
00:03:21,440 --> 00:03:24,480
we love apis apis are great they give us

82
00:03:24,480 --> 00:03:27,680
the time um and comfort to

83
00:03:27,680 --> 00:03:30,480
uh to actually do other things

84
00:03:30,480 --> 00:03:32,799
um while the apis are taking care of the

85
00:03:32,799 --> 00:03:34,400
heavy lifting

86
00:03:34,400 --> 00:03:36,799
and basically every modern application

87
00:03:36,799 --> 00:03:39,599
these days is um

88
00:03:39,599 --> 00:03:44,000
built around a beating heart of apis

89
00:03:44,000 --> 00:03:46,959
so when we talk about api security what

90
00:03:46,959 --> 00:03:49,280
we actually mean is api based apps

91
00:03:49,280 --> 00:03:50,560
security

92
00:03:50,560 --> 00:03:54,159
or in other words um modern app security

93
00:03:54,159 --> 00:03:56,400
everything that is modern app security

94
00:03:56,400 --> 00:03:57,200
is

95
00:03:57,200 --> 00:04:00,560
essentially api security

96
00:04:00,560 --> 00:04:01,840
what is the difference between

97
00:04:01,840 --> 00:04:04,319
traditional and modern applications

98
00:04:04,319 --> 00:04:06,239
um we have here

99
00:04:06,239 --> 00:04:09,040
side by side

100
00:04:09,120 --> 00:04:10,400
a flow

101
00:04:10,400 --> 00:04:12,239
of traditional application and modern

102
00:04:12,239 --> 00:04:14,799
application let's let's look at it so

103
00:04:14,799 --> 00:04:17,519
first of all we have the similarities

104
00:04:17,519 --> 00:04:19,600
both traditional application and modern

105
00:04:19,600 --> 00:04:22,320
application will will let the user

106
00:04:22,320 --> 00:04:24,639
um to interact with the client

107
00:04:24,639 --> 00:04:26,160
i think that the traditional

108
00:04:26,160 --> 00:04:27,759
applications

109
00:04:27,759 --> 00:04:29,919
the client were mainly

110
00:04:29,919 --> 00:04:32,880
the web clients as we know them modern

111
00:04:32,880 --> 00:04:35,919
application it can be anything it can be

112
00:04:35,919 --> 00:04:38,880
a bot a tablet a mobile

113
00:04:38,880 --> 00:04:41,520
a different microservice

114
00:04:41,520 --> 00:04:44,960
small toaster whatever

115
00:04:44,960 --> 00:04:46,960
and of course the user will expect to

116
00:04:46,960 --> 00:04:49,199
get some sort of

117
00:04:49,199 --> 00:04:51,680
response or to get the information or

118
00:04:51,680 --> 00:04:53,680
the data when they are seeking

119
00:04:53,680 --> 00:04:54,960
and they don't really care what is the

120
00:04:54,960 --> 00:04:57,600
technology behind it

121
00:04:57,600 --> 00:04:59,440
another similar

122
00:04:59,440 --> 00:05:02,720
path is the path between the server

123
00:05:02,720 --> 00:05:04,160
and the database

124
00:05:04,160 --> 00:05:06,080
now in the past

125
00:05:06,080 --> 00:05:08,800
the server was just an actual server and

126
00:05:08,800 --> 00:05:11,120
the database was probably an sql

127
00:05:11,120 --> 00:05:13,280
database

128
00:05:13,280 --> 00:05:15,759
these days the server can be either an

129
00:05:15,759 --> 00:05:18,479
actual server

130
00:05:18,479 --> 00:05:20,240
a bunch of

131
00:05:20,240 --> 00:05:23,520
dockers and something run on kubernetes

132
00:05:23,520 --> 00:05:25,600
different microservices

133
00:05:25,600 --> 00:05:28,560
whatever and usually the databases these

134
00:05:28,560 --> 00:05:29,840
days are

135
00:05:29,840 --> 00:05:31,280
hopefully less

136
00:05:31,280 --> 00:05:34,479
sql and more elastic and nosql

137
00:05:34,479 --> 00:05:36,160
and obviously

138
00:05:36,160 --> 00:05:37,680
the information comes back from the

139
00:05:37,680 --> 00:05:39,759
databases to the server

140
00:05:39,759 --> 00:05:41,280
now comes the interesting part the

141
00:05:41,280 --> 00:05:43,120
difference between traditional and

142
00:05:43,120 --> 00:05:45,039
modern application

143
00:05:45,039 --> 00:05:47,680
so while in traditional applications

144
00:05:47,680 --> 00:05:50,320
we saw some sort of get request

145
00:05:50,320 --> 00:05:53,919
go to the server the server is running

146
00:05:53,919 --> 00:05:57,039
some sort of logic and then returns a

147
00:05:57,039 --> 00:06:00,160
fully rendered html page to the client

148
00:06:00,160 --> 00:06:01,840
the web client

149
00:06:01,840 --> 00:06:04,639
now these days everything is is very

150
00:06:04,639 --> 00:06:06,080
different

151
00:06:06,080 --> 00:06:08,560
we see the clients sending

152
00:06:08,560 --> 00:06:11,039
a set of apa

153
00:06:11,039 --> 00:06:13,360
api get requests

154
00:06:13,360 --> 00:06:15,759
the server or servers

155
00:06:15,759 --> 00:06:17,440
will return

156
00:06:17,440 --> 00:06:18,840
raw

157
00:06:18,840 --> 00:06:22,960
data and this raw data

158
00:06:22,960 --> 00:06:25,440
will be um

159
00:06:25,440 --> 00:06:26,720
transformed

160
00:06:26,720 --> 00:06:28,960
in the client into the information that

161
00:06:28,960 --> 00:06:31,759
the user is looking for so we see that

162
00:06:31,759 --> 00:06:35,360
the logic phase migrated from the server

163
00:06:35,360 --> 00:06:37,680
to the client and with it a lot of

164
00:06:37,680 --> 00:06:39,680
issues

165
00:06:39,680 --> 00:06:41,600
we see also in modern applications that

166
00:06:41,600 --> 00:06:45,199
there are less abstraction layers

167
00:06:45,199 --> 00:06:47,759
both the client and server and a lot of

168
00:06:47,759 --> 00:06:50,160
times the database as well

169
00:06:50,160 --> 00:06:52,319
speak the same json language so

170
00:06:52,319 --> 00:06:55,680
everything is very very flat

171
00:06:55,680 --> 00:06:56,560
so

172
00:06:56,560 --> 00:06:59,120
just to mini summarize the differences

173
00:06:59,120 --> 00:07:00,479
we just saw

174
00:07:00,479 --> 00:07:02,880
the server is used more as a proxy for

175
00:07:02,880 --> 00:07:05,199
the data not really

176
00:07:05,199 --> 00:07:06,160
um

177
00:07:06,160 --> 00:07:08,319
the uh

178
00:07:08,319 --> 00:07:09,840
the logic part

179
00:07:09,840 --> 00:07:12,960
the rendering component is the client

180
00:07:12,960 --> 00:07:14,639
and not the server

181
00:07:14,639 --> 00:07:17,120
and the user state is usually maintained

182
00:07:17,120 --> 00:07:19,759
and monitored by the client

183
00:07:19,759 --> 00:07:22,240
also we can see that clients consume raw

184
00:07:22,240 --> 00:07:25,120
data not a fully rendered page

185
00:07:25,120 --> 00:07:27,520
and more parameters are sent

186
00:07:27,520 --> 00:07:30,400
in each http request we see everything

187
00:07:30,400 --> 00:07:32,479
flying through the air from object ids

188
00:07:32,479 --> 00:07:35,520
and values and filters and whatnot

189
00:07:35,520 --> 00:07:37,919
also something we need to uh to think

190
00:07:37,919 --> 00:07:40,000
about and we'll discuss it later is that

191
00:07:40,000 --> 00:07:42,080
apis expose the underlying

192
00:07:42,080 --> 00:07:44,879
implementation of the app and when you

193
00:07:44,879 --> 00:07:47,759
see the api endpoints you can probably

194
00:07:47,759 --> 00:07:50,160
guess what is going on but we will

195
00:07:50,160 --> 00:07:53,280
discuss that a bit later

196
00:07:53,280 --> 00:07:57,440
so what makes apis vulnerable

197
00:07:57,440 --> 00:08:00,000
first of all uh the abundance of api

198
00:08:00,000 --> 00:08:02,319
endpoints makes the attack surface much

199
00:08:02,319 --> 00:08:05,840
bigger if in the past users had to go

200
00:08:05,840 --> 00:08:08,319
from a to b to c and maybe even a

201
00:08:08,319 --> 00:08:09,680
monolith

202
00:08:09,680 --> 00:08:11,039
stage

203
00:08:11,039 --> 00:08:13,919
um and only then they reached the

204
00:08:13,919 --> 00:08:16,639
database after they got

205
00:08:16,639 --> 00:08:18,720
all the authorization and authentication

206
00:08:18,720 --> 00:08:22,000
stages in module a for example

207
00:08:22,000 --> 00:08:24,479
now when you have a microservice or

208
00:08:24,479 --> 00:08:28,400
maybe you can access b directly from age

209
00:08:28,400 --> 00:08:30,879
or something else a hacker can find a

210
00:08:30,879 --> 00:08:32,240
way

211
00:08:32,240 --> 00:08:34,719
to skip the parts of authorization and

212
00:08:34,719 --> 00:08:37,279
authentication and go directly

213
00:08:37,279 --> 00:08:38,159
to

214
00:08:38,159 --> 00:08:41,519
the data for example um

215
00:08:41,519 --> 00:08:44,159
another reason is that the clients

216
00:08:44,159 --> 00:08:46,560
consume raw data as we saw

217
00:08:46,560 --> 00:08:48,880
and more parameters are sent in each

218
00:08:48,880 --> 00:08:50,640
http request

219
00:08:50,640 --> 00:08:53,519
and it's very very easy to lose either

220
00:08:53,519 --> 00:08:55,519
where this data comes from or where it

221
00:08:55,519 --> 00:08:56,480
goes

222
00:08:56,480 --> 00:08:59,440
for example component one here can send

223
00:08:59,440 --> 00:09:02,160
some sensitive data to component two

224
00:09:02,160 --> 00:09:04,240
thinking that everything stays inside

225
00:09:04,240 --> 00:09:05,519
the perimeter

226
00:09:05,519 --> 00:09:07,839
but component one may not know that

227
00:09:07,839 --> 00:09:09,680
component two sends some of the

228
00:09:09,680 --> 00:09:12,080
information outside component three

229
00:09:12,080 --> 00:09:13,600
which is public

230
00:09:13,600 --> 00:09:16,240
and also the other way around component

231
00:09:16,240 --> 00:09:18,640
one may trust the information that comes

232
00:09:18,640 --> 00:09:20,160
from component two

233
00:09:20,160 --> 00:09:21,680
without knowing that some of the

234
00:09:21,680 --> 00:09:24,160
information on component 2 came from

235
00:09:24,160 --> 00:09:27,279
untrusted sources in component clip

236
00:09:27,279 --> 00:09:30,800
which is outside of the pyramidal

237
00:09:31,040 --> 00:09:32,880
and the third

238
00:09:32,880 --> 00:09:34,839
thing that makes api

239
00:09:34,839 --> 00:09:39,440
vulnerable is cicd cicd the flexibility

240
00:09:39,440 --> 00:09:42,560
today is amazing the processes

241
00:09:42,560 --> 00:09:44,320
are so effortless

242
00:09:44,320 --> 00:09:46,160
so quickly

243
00:09:46,160 --> 00:09:48,080
everyone can can deploy new micro

244
00:09:48,080 --> 00:09:49,839
services and containers and cloud

245
00:09:49,839 --> 00:09:51,360
infrastructure

246
00:09:51,360 --> 00:09:53,040
just a click of a button which is

247
00:09:53,040 --> 00:09:54,160
amazing

248
00:09:54,160 --> 00:09:56,160
and the rate of updates and changes in

249
00:09:56,160 --> 00:09:57,600
apis

250
00:09:57,600 --> 00:09:59,839
these days they just might be too fast

251
00:09:59,839 --> 00:10:01,040
to handle

252
00:10:01,040 --> 00:10:03,120
as i said it takes just a few clicks to

253
00:10:03,120 --> 00:10:05,120
spin up a new api host

254
00:10:05,120 --> 00:10:07,600
and you have everything in front of you

255
00:10:07,600 --> 00:10:08,480
so

256
00:10:08,480 --> 00:10:10,800
it's not almost too easy it's actually

257
00:10:10,800 --> 00:10:13,279
too easy and since it's too easy and too

258
00:10:13,279 --> 00:10:15,120
fast we see

259
00:10:15,120 --> 00:10:18,560
that apis become very hard to track and

260
00:10:18,560 --> 00:10:21,360
the result of that is that

261
00:10:21,360 --> 00:10:24,160
shadow apis are created well no one

262
00:10:24,160 --> 00:10:25,920
remembers what they do and where they

263
00:10:25,920 --> 00:10:27,040
came from

264
00:10:27,040 --> 00:10:29,839
and all the apis are not deprecated

265
00:10:29,839 --> 00:10:32,240
correctly and are still exposed and

266
00:10:32,240 --> 00:10:35,440
these things make a lot of areas in your

267
00:10:35,440 --> 00:10:38,720
api vulnerable

268
00:10:38,959 --> 00:10:41,760
it's not all bad news though

269
00:10:41,760 --> 00:10:43,839
i don't want to be a

270
00:10:43,839 --> 00:10:46,959
downer so here are some good news about

271
00:10:46,959 --> 00:10:48,720
api

272
00:10:48,720 --> 00:10:50,320
some traditional vulnerabilities are

273
00:10:50,320 --> 00:10:52,720
less common now in api based apps or

274
00:10:52,720 --> 00:10:54,079
modern apps

275
00:10:54,079 --> 00:10:56,320
and here are some examples we see that

276
00:10:56,320 --> 00:10:58,160
sql injections although opinion or

277
00:10:58,160 --> 00:11:00,160
injections in general there is an

278
00:11:00,160 --> 00:11:02,320
increasing use of frameworks and orms

279
00:11:02,320 --> 00:11:04,959
that makes this um

280
00:11:04,959 --> 00:11:10,880
less common um csrf csrf or c surf

281
00:11:10,880 --> 00:11:11,839
are

282
00:11:11,839 --> 00:11:13,600
less common these days because of

283
00:11:13,600 --> 00:11:15,519
authorization headers that are used

284
00:11:15,519 --> 00:11:17,760
instead of cookies

285
00:11:17,760 --> 00:11:20,959
in general path manipulations are

286
00:11:20,959 --> 00:11:22,720
less common and less severe due to

287
00:11:22,720 --> 00:11:24,720
cloud-based storage again it still

288
00:11:24,720 --> 00:11:26,800
exists but it's

289
00:11:26,800 --> 00:11:28,720
seriously less severe to have something

290
00:11:28,720 --> 00:11:31,040
on cloud-based storage and again it's

291
00:11:31,040 --> 00:11:32,320
less common

292
00:11:32,320 --> 00:11:34,959
and in general many classic i.t security

293
00:11:34,959 --> 00:11:36,880
issues are um

294
00:11:36,880 --> 00:11:39,600
being solved slowly but surely

295
00:11:39,600 --> 00:11:43,680
by sas in general so as i said there are

296
00:11:43,680 --> 00:11:46,160
some good news

297
00:11:46,160 --> 00:11:47,519
um

298
00:11:47,519 --> 00:11:50,000
bridging the gap when we saw that there

299
00:11:50,000 --> 00:11:53,360
is a big gap of knowledge and

300
00:11:53,360 --> 00:11:56,880
not only outside but also within us

301
00:11:56,880 --> 00:11:59,680
about how to secure apis of modern

302
00:11:59,680 --> 00:12:01,040
applications

303
00:12:01,040 --> 00:12:03,760
we went to the biggest source we know

304
00:12:03,760 --> 00:12:05,839
which is poas

305
00:12:05,839 --> 00:12:08,959
unfortunately we could not find

306
00:12:08,959 --> 00:12:12,160
any um mitigations or

307
00:12:12,160 --> 00:12:14,720
any resource that is speaking

308
00:12:14,720 --> 00:12:17,519
specifically about api security

309
00:12:17,519 --> 00:12:21,120
um and the os top 10 which is great is

310
00:12:21,120 --> 00:12:24,000
mainly i think these days

311
00:12:24,000 --> 00:12:25,200
handling

312
00:12:25,200 --> 00:12:26,880
what we see as

313
00:12:26,880 --> 00:12:28,959
the traditional applications

314
00:12:28,959 --> 00:12:30,880
so instead of waiting for someone to

315
00:12:30,880 --> 00:12:32,079
bridge the gap

316
00:12:32,079 --> 00:12:34,800
we decided to bridge the gap ourselves

317
00:12:34,800 --> 00:12:37,200
and we created the os api security

318
00:12:37,200 --> 00:12:38,399
project

319
00:12:38,399 --> 00:12:41,680
and by we i mean uh myself which i

320
00:12:41,680 --> 00:12:43,360
already introduced

321
00:12:43,360 --> 00:12:45,160
and my friend in

322
00:12:45,160 --> 00:12:47,920
nonschedule works in traceable

323
00:12:47,920 --> 00:12:50,079
he's the head of research there with a

324
00:12:50,079 --> 00:12:52,480
lot of years of research and pen testing

325
00:12:52,480 --> 00:12:54,160
experience and

326
00:12:54,160 --> 00:12:57,200
in general he's an api wizard

327
00:12:57,200 --> 00:12:58,079
so

328
00:12:58,079 --> 00:13:00,880
he was the best

329
00:13:00,880 --> 00:13:02,800
co-leader for this

330
00:13:02,800 --> 00:13:05,839
for this project

331
00:13:05,839 --> 00:13:08,160
when we started we decided that this

332
00:13:08,160 --> 00:13:09,760
project is going to be

333
00:13:09,760 --> 00:13:11,600
an umbrella for several relevant

334
00:13:11,600 --> 00:13:12,959
projects

335
00:13:12,959 --> 00:13:15,600
um we started with the api security top

336
00:13:15,600 --> 00:13:18,000
10 which is already released and i will

337
00:13:18,000 --> 00:13:20,240
discuss that

338
00:13:20,240 --> 00:13:23,360
in the next part of this presentation

339
00:13:23,360 --> 00:13:27,279
um there is also in progress um

340
00:13:27,279 --> 00:13:29,200
some changes are being done into

341
00:13:29,200 --> 00:13:30,320
specific

342
00:13:30,320 --> 00:13:32,959
sheets in the api security cheat sheet

343
00:13:32,959 --> 00:13:36,480
of oas we are already working on that

344
00:13:36,480 --> 00:13:38,160
and the last part of the

345
00:13:38,160 --> 00:13:40,399
the current class part of the project is

346
00:13:40,399 --> 00:13:42,240
going to be crappy

347
00:13:42,240 --> 00:13:44,959
crappy is completely ridiculous api

348
00:13:44,959 --> 00:13:47,360
and it's an intentionally vulnerable api

349
00:13:47,360 --> 00:13:49,279
project and it's going to be released

350
00:13:49,279 --> 00:13:52,880
any day now so stay tuned

351
00:13:52,880 --> 00:13:56,000
so let's discuss the os api security top

352
00:13:56,000 --> 00:13:57,360
10.

353
00:13:57,360 --> 00:13:58,399
um

354
00:13:58,399 --> 00:14:00,880
this is it this is the top 10. i'm not

355
00:14:00,880 --> 00:14:02,480
going to

356
00:14:02,480 --> 00:14:03,279
dig

357
00:14:03,279 --> 00:14:04,959
into each and every one of the

358
00:14:04,959 --> 00:14:06,399
categories

359
00:14:06,399 --> 00:14:08,800
but i am going to show you

360
00:14:08,800 --> 00:14:11,839
uh the groups that are

361
00:14:11,839 --> 00:14:13,090
making this

362
00:14:13,090 --> 00:14:14,560
[Music]

363
00:14:14,560 --> 00:14:15,839
top

364
00:14:15,839 --> 00:14:18,880
and we are going to discuss a bit in

365
00:14:18,880 --> 00:14:21,440
depth um one of the biggest issues one

366
00:14:21,440 --> 00:14:23,199
of the biggest groups

367
00:14:23,199 --> 00:14:25,120
so let's start with the parts you

368
00:14:25,120 --> 00:14:26,880
probably know um

369
00:14:26,880 --> 00:14:29,040
we have injection and insufficient

370
00:14:29,040 --> 00:14:30,639
clogging and monitoring

371
00:14:30,639 --> 00:14:33,120
these were bought from the regular oas

372
00:14:33,120 --> 00:14:34,480
top 10.

373
00:14:34,480 --> 00:14:35,519
um

374
00:14:35,519 --> 00:14:38,000
although injection moved from a from one

375
00:14:38,000 --> 00:14:40,800
to to the eighth place we still think

376
00:14:40,800 --> 00:14:42,160
it's a thing

377
00:14:42,160 --> 00:14:43,360
but

378
00:14:43,360 --> 00:14:46,880
again as we said in api security um it's

379
00:14:46,880 --> 00:14:48,720
definitely

380
00:14:48,720 --> 00:14:50,560
not the top issue

381
00:14:50,560 --> 00:14:51,680
um

382
00:14:51,680 --> 00:14:53,680
and api 10 is insufficient logging in

383
00:14:53,680 --> 00:14:56,480
monitoring this is obviously very very

384
00:14:56,480 --> 00:14:58,320
important for every application it

385
00:14:58,320 --> 00:15:00,079
doesn't matter if it's traditional or

386
00:15:00,079 --> 00:15:02,240
modern if you don't have logging you

387
00:15:02,240 --> 00:15:03,680
don't know what's happening and if you

388
00:15:03,680 --> 00:15:05,120
don't have monitoring you don't know

389
00:15:05,120 --> 00:15:06,160
what to do

390
00:15:06,160 --> 00:15:08,800
if something happen

391
00:15:08,800 --> 00:15:10,320
so that's the first group the second

392
00:15:10,320 --> 00:15:12,320
group is very important and i'm going to

393
00:15:12,320 --> 00:15:14,430
go deeper into it

394
00:15:14,430 --> 00:15:15,600
[Music]

395
00:15:15,600 --> 00:15:18,800
in a bit and this is everything that is

396
00:15:18,800 --> 00:15:21,920
about access control so we see here api

397
00:15:21,920 --> 00:15:25,440
one broken object level authorization

398
00:15:25,440 --> 00:15:28,959
which is practically who is allowed

399
00:15:28,959 --> 00:15:31,600
to touch um

400
00:15:31,600 --> 00:15:33,040
a specific

401
00:15:33,040 --> 00:15:34,240
um

402
00:15:34,240 --> 00:15:36,079
specific asset

403
00:15:36,079 --> 00:15:38,959
api 2 is broken authentication which is

404
00:15:38,959 --> 00:15:40,959
all about

405
00:15:40,959 --> 00:15:42,560
authenticating the user understanding

406
00:15:42,560 --> 00:15:44,240
who the user is

407
00:15:44,240 --> 00:15:47,519
and api five is a broken function level

408
00:15:47,519 --> 00:15:50,480
authorization if api one is about what a

409
00:15:50,480 --> 00:15:54,160
user can access api five is about what

410
00:15:54,160 --> 00:15:57,519
the user can do which functions

411
00:15:57,519 --> 00:16:00,320
uh are allowed for a specific user to to

412
00:16:00,320 --> 00:16:01,279
do

413
00:16:01,279 --> 00:16:03,519
um and access control obviously it's

414
00:16:03,519 --> 00:16:05,120
very very important

415
00:16:05,120 --> 00:16:08,399
as we saw earlier this year and the

416
00:16:08,399 --> 00:16:09,839
result group

417
00:16:09,839 --> 00:16:12,320
in check marks managed to found some

418
00:16:12,320 --> 00:16:14,639
access control issues in the apis of a

419
00:16:14,639 --> 00:16:17,120
smart vacuum company

420
00:16:17,120 --> 00:16:20,079
this smart vacuum had a camera feed and

421
00:16:20,079 --> 00:16:21,600
pretty soon

422
00:16:21,600 --> 00:16:24,560
we managed to get access to every camera

423
00:16:24,560 --> 00:16:27,279
feed and

424
00:16:27,279 --> 00:16:30,560
that were using um

425
00:16:30,560 --> 00:16:32,639
for every user who got

426
00:16:32,639 --> 00:16:35,920
this vacuum cleaner including location

427
00:16:35,920 --> 00:16:37,759
and a map of the room

428
00:16:37,759 --> 00:16:38,880
um

429
00:16:38,880 --> 00:16:41,279
so very important access control

430
00:16:41,279 --> 00:16:43,120
obviously

431
00:16:43,120 --> 00:16:44,720
let's move to the

432
00:16:44,720 --> 00:16:47,360
next category the next group the next

433
00:16:47,360 --> 00:16:50,160
group is a hole that is about access

434
00:16:50,160 --> 00:16:51,279
data

435
00:16:51,279 --> 00:16:54,320
api three excessive data exposure

436
00:16:54,320 --> 00:16:57,279
is the issue of exposing data

437
00:16:57,279 --> 00:16:59,120
to the wrong component or sending it to

438
00:16:59,120 --> 00:17:00,720
the wrong places

439
00:17:00,720 --> 00:17:02,560
and mess assignment is actually the

440
00:17:02,560 --> 00:17:05,599
other way around is getting

441
00:17:05,599 --> 00:17:08,400
trusted untrusted data and

442
00:17:08,400 --> 00:17:10,640
mistaking it as trusted data and using

443
00:17:10,640 --> 00:17:11,520
it

444
00:17:11,520 --> 00:17:13,439
in your

445
00:17:13,439 --> 00:17:16,319
in your software

446
00:17:17,119 --> 00:17:20,160
a good example a bit old but i i just

447
00:17:20,160 --> 00:17:23,039
like this example um

448
00:17:23,039 --> 00:17:24,480
is

449
00:17:24,480 --> 00:17:25,760
from

450
00:17:25,760 --> 00:17:28,160
i think uh

451
00:17:28,160 --> 00:17:29,360
last year

452
00:17:29,360 --> 00:17:32,799
it's a dating application that instead

453
00:17:32,799 --> 00:17:34,000
of

454
00:17:34,000 --> 00:17:35,039
showing

455
00:17:35,039 --> 00:17:37,039
um

456
00:17:37,039 --> 00:17:39,440
only the specific information that was

457
00:17:39,440 --> 00:17:41,679
allowed by a user

458
00:17:41,679 --> 00:17:45,600
kind of sent in the in the get and post

459
00:17:45,600 --> 00:17:47,200
requests

460
00:17:47,200 --> 00:17:49,280
all the data including the specific

461
00:17:49,280 --> 00:17:50,480
location

462
00:17:50,480 --> 00:17:52,400
and specific

463
00:17:52,400 --> 00:17:54,320
phone numbers and

464
00:17:54,320 --> 00:17:57,039
things like that

465
00:17:57,039 --> 00:17:59,520
this was researched by researcher named

466
00:17:59,520 --> 00:18:01,520
named alex lomas and he actually

467
00:18:01,520 --> 00:18:04,240
rendered and mapped all the location

468
00:18:04,240 --> 00:18:06,160
around the white house so

469
00:18:06,160 --> 00:18:09,760
kind of made a lot of noise back then

470
00:18:09,760 --> 00:18:11,200
[Music]

471
00:18:11,200 --> 00:18:14,640
and the the last group i want to discuss

472
00:18:14,640 --> 00:18:16,640
is the group of

473
00:18:16,640 --> 00:18:19,039
devsecops categories

474
00:18:19,039 --> 00:18:21,360
we have here a lack of resources and

475
00:18:21,360 --> 00:18:22,799
rate limiting

476
00:18:22,799 --> 00:18:25,600
we have security misconfiguration

477
00:18:25,600 --> 00:18:29,440
and improper assets management

478
00:18:29,440 --> 00:18:31,039
improper asset management is very very

479
00:18:31,039 --> 00:18:32,320
important

480
00:18:32,320 --> 00:18:34,799
this is the problem of running too fast

481
00:18:34,799 --> 00:18:38,640
and not being able to know what you have

482
00:18:38,640 --> 00:18:40,240
a lot of you may know it is a bill of

483
00:18:40,240 --> 00:18:42,720
materials basically to know what kind of

484
00:18:42,720 --> 00:18:45,679
apis what kind of endpoints what exactly

485
00:18:45,679 --> 00:18:48,160
you're exposing and what exactly are you

486
00:18:48,160 --> 00:18:50,880
consuming in apis

487
00:18:50,880 --> 00:18:53,280
lack of resources and rate limiting i

488
00:18:53,280 --> 00:18:55,760
think we all know that

489
00:18:55,760 --> 00:18:59,200
this if not protected correctly

490
00:18:59,200 --> 00:19:01,919
we may suffer from denial of service

491
00:19:01,919 --> 00:19:04,400
or even brute forcing which sometimes is

492
00:19:04,400 --> 00:19:05,280
worse

493
00:19:05,280 --> 00:19:08,160
and security misconfiguration api 7 it

494
00:19:08,160 --> 00:19:12,000
can be anything um anything that

495
00:19:12,000 --> 00:19:14,720
we have to configure for security and we

496
00:19:14,720 --> 00:19:16,240
somehow miss it

497
00:19:16,240 --> 00:19:17,120
um

498
00:19:17,120 --> 00:19:19,360
is is a problem and

499
00:19:19,360 --> 00:19:21,120
here is an example from earlier this

500
00:19:21,120 --> 00:19:22,240
year

501
00:19:22,240 --> 00:19:25,600
also um it's from a google file base

502
00:19:25,600 --> 00:19:27,679
when common misconfiguration on it

503
00:19:27,679 --> 00:19:29,760
allowed unauthorized parties to easily

504
00:19:29,760 --> 00:19:30,640
find

505
00:19:30,640 --> 00:19:33,200
and access users personal data

506
00:19:33,200 --> 00:19:35,520
in thousands of apps again this is all

507
00:19:35,520 --> 00:19:38,640
about misconfiguration just sometimes

508
00:19:38,640 --> 00:19:41,360
just missing one true to false or false

509
00:19:41,360 --> 00:19:42,400
to true

510
00:19:42,400 --> 00:19:43,360
or

511
00:19:43,360 --> 00:19:45,600
keeping an asterisk somewhere

512
00:19:45,600 --> 00:19:49,678
and make everything exposed

513
00:19:50,240 --> 00:19:53,200
before we go on i want to

514
00:19:53,200 --> 00:19:56,240
talk about access control this is the

515
00:19:56,240 --> 00:19:59,760
the biggest challenge in api security

516
00:19:59,760 --> 00:20:00,799
um

517
00:20:00,799 --> 00:20:03,360
you remember we had api one two and five

518
00:20:03,360 --> 00:20:06,000
i want to start with number two broken

519
00:20:06,000 --> 00:20:07,440
authentication

520
00:20:07,440 --> 00:20:10,080
so broken authentication is all about

521
00:20:10,080 --> 00:20:12,480
authenticating obviously the user and

522
00:20:12,480 --> 00:20:15,120
making sure who they are

523
00:20:15,120 --> 00:20:17,520
and broken authentication happens when

524
00:20:17,520 --> 00:20:20,480
we have lack of protection mechanism or

525
00:20:20,480 --> 00:20:23,440
misimplementation of that mechanism

526
00:20:23,440 --> 00:20:25,120
so let's see an example of lack of

527
00:20:25,120 --> 00:20:28,240
protection if we have an api set

528
00:20:28,240 --> 00:20:30,320
we know that we want to protect all the

529
00:20:30,320 --> 00:20:33,919
endpoints for example by rate limiting

530
00:20:33,919 --> 00:20:35,200
protection

531
00:20:35,200 --> 00:20:37,520
but you can see that the first three

532
00:20:37,520 --> 00:20:40,000
here are all about login we see

533
00:20:40,000 --> 00:20:42,559
different kind of logins and and

534
00:20:42,559 --> 00:20:44,799
password

535
00:20:44,799 --> 00:20:46,480
renewal or

536
00:20:46,480 --> 00:20:47,520
reset

537
00:20:47,520 --> 00:20:48,640
and

538
00:20:48,640 --> 00:20:51,440
for this specific three apis we want to

539
00:20:51,440 --> 00:20:54,000
have an extra layer of protection

540
00:20:54,000 --> 00:20:56,400
and this extra level of protection

541
00:20:56,400 --> 00:20:57,360
can be

542
00:20:57,360 --> 00:20:59,919
capture it can be an account local

543
00:20:59,919 --> 00:21:02,480
mechanism or some sort of credential

544
00:21:02,480 --> 00:21:04,080
stuffing protection

545
00:21:04,080 --> 00:21:07,520
if we don't have that this is

546
00:21:07,520 --> 00:21:10,880
opening us to brute force attacks

547
00:21:10,880 --> 00:21:14,400
or credential stuffing attacks

548
00:21:14,400 --> 00:21:16,240
on the other side of broken

549
00:21:16,240 --> 00:21:17,360
authentication we have the

550
00:21:17,360 --> 00:21:19,520
misimplementation this implementation

551
00:21:19,520 --> 00:21:20,960
can happen

552
00:21:20,960 --> 00:21:24,000
because of many issues for example um we

553
00:21:24,000 --> 00:21:25,200
see that

554
00:21:25,200 --> 00:21:28,559
developers are using jwt which is great

555
00:21:28,559 --> 00:21:30,400
but then in the algorithm

556
00:21:30,400 --> 00:21:32,320
they use the word none

557
00:21:32,320 --> 00:21:35,200
word none means that

558
00:21:35,200 --> 00:21:37,840
you just render it useless the entire

559
00:21:37,840 --> 00:21:40,559
jwt

560
00:21:40,720 --> 00:21:42,799
sometimes we see that services does not

561
00:21:42,799 --> 00:21:46,000
validate the oauth provider so

562
00:21:46,000 --> 00:21:48,960
they are just relying on it without

563
00:21:48,960 --> 00:21:50,640
validating it

564
00:21:50,640 --> 00:21:52,559
and sometimes passwords are stored

565
00:21:52,559 --> 00:21:54,720
without solved and this is not good

566
00:21:54,720 --> 00:21:57,039
enough as we know and many many other

567
00:21:57,039 --> 00:22:00,400
mistakes that bring us to broken

568
00:22:00,400 --> 00:22:01,919
authentication

569
00:22:01,919 --> 00:22:04,559
why is it so common in apis i think if

570
00:22:04,559 --> 00:22:06,159
we know why it's common

571
00:22:06,159 --> 00:22:08,480
we can probably handle it better

572
00:22:08,480 --> 00:22:09,600
so

573
00:22:09,600 --> 00:22:11,440
authentication endpoints are exposed to

574
00:22:11,440 --> 00:22:14,159
anyone by design

575
00:22:14,159 --> 00:22:15,520
um

576
00:22:15,520 --> 00:22:18,000
the software or security engineers have

577
00:22:18,000 --> 00:22:21,120
misconceptions as we said oauth for

578
00:22:21,120 --> 00:22:22,320
example

579
00:22:22,320 --> 00:22:26,240
is not authentication it's authorization

580
00:22:26,240 --> 00:22:28,480
api keys should not be used for users

581
00:22:28,480 --> 00:22:30,320
authentication

582
00:22:30,320 --> 00:22:33,440
and many other misconceptions

583
00:22:33,440 --> 00:22:35,120
also there are multiple authentication

584
00:22:35,120 --> 00:22:37,280
flows in modern applications we see

585
00:22:37,280 --> 00:22:40,240
different ones in mobiles and iot and

586
00:22:40,240 --> 00:22:42,160
and legacy and

587
00:22:42,160 --> 00:22:45,120
[Music]

588
00:22:45,120 --> 00:22:46,799
authentication that comes from from the

589
00:22:46,799 --> 00:22:47,840
web

590
00:22:47,840 --> 00:22:49,760
not to mention deep links with

591
00:22:49,760 --> 00:22:51,840
credentials etc there are many many

592
00:22:51,840 --> 00:22:53,919
flows and it's very easy to forget

593
00:22:53,919 --> 00:22:56,720
something somewhere

594
00:22:56,720 --> 00:22:58,559
let's talk about the next item in access

595
00:22:58,559 --> 00:22:59,600
control

596
00:22:59,600 --> 00:23:02,480
that's api one bola broken object level

597
00:23:02,480 --> 00:23:05,280
authorization

598
00:23:05,440 --> 00:23:08,400
the scenario as we know it is a user

599
00:23:08,400 --> 00:23:10,640
trying to access their own document or

600
00:23:10,640 --> 00:23:12,400
their own asset

601
00:23:12,400 --> 00:23:13,200
and

602
00:23:13,200 --> 00:23:15,200
the system says okay

603
00:23:15,200 --> 00:23:16,799
and then if this user is trying to

604
00:23:16,799 --> 00:23:19,919
access document that belongs to someone

605
00:23:19,919 --> 00:23:22,559
else that they are not authorized

606
00:23:22,559 --> 00:23:25,919
to access then they get a nope

607
00:23:25,919 --> 00:23:26,880
so

608
00:23:26,880 --> 00:23:29,440
if this mechanism breaks and this user

609
00:23:29,440 --> 00:23:32,240
can access other assets then we can say

610
00:23:32,240 --> 00:23:33,760
that we have a broken object level

611
00:23:33,760 --> 00:23:37,120
authorization or

612
00:23:37,360 --> 00:23:40,000
and why is it so common in apis

613
00:23:40,000 --> 00:23:42,640
remember this the attack surface is much

614
00:23:42,640 --> 00:23:46,320
wider and we can try to

615
00:23:46,720 --> 00:23:49,279
bypass the authorization

616
00:23:49,279 --> 00:23:50,880
areas

617
00:23:50,880 --> 00:23:53,600
and also there is no security solution

618
00:23:53,600 --> 00:23:55,679
exists that solve this problem

619
00:23:55,679 --> 00:23:58,159
um like a silver bullet it has to be

620
00:23:58,159 --> 00:23:59,600
baked into

621
00:23:59,600 --> 00:24:00,480
the

622
00:24:00,480 --> 00:24:04,159
architecture from day one

623
00:24:04,159 --> 00:24:05,679
um

624
00:24:05,679 --> 00:24:07,760
what you described is idol i hear some

625
00:24:07,760 --> 00:24:10,320
of you cry um and

626
00:24:10,320 --> 00:24:12,880
well we don't call it ido when we wrote

627
00:24:12,880 --> 00:24:14,159
the document

628
00:24:14,159 --> 00:24:16,559
we decided that idol is not accurate or

629
00:24:16,559 --> 00:24:18,480
indicative enough to what we're aiming

630
00:24:18,480 --> 00:24:20,080
at here

631
00:24:20,080 --> 00:24:23,600
the d in either says that's

632
00:24:23,600 --> 00:24:26,240
direct so idol is insecure direct object

633
00:24:26,240 --> 00:24:28,240
reference and either implies that the

634
00:24:28,240 --> 00:24:31,360
object reference should be indirect

635
00:24:31,360 --> 00:24:33,840
um like using a

636
00:24:33,840 --> 00:24:36,880
assault or hash map or random string or

637
00:24:36,880 --> 00:24:39,039
whatever added to every

638
00:24:39,039 --> 00:24:40,400
id

639
00:24:40,400 --> 00:24:42,320
we don't believe that

640
00:24:42,320 --> 00:24:44,640
the problem here is the reference of the

641
00:24:44,640 --> 00:24:46,880
specific object and we think that

642
00:24:46,880 --> 00:24:49,120
everyone is allowed to try

643
00:24:49,120 --> 00:24:51,520
and touch any object the the lack of

644
00:24:51,520 --> 00:24:53,760
authorization here is the prop is the

645
00:24:53,760 --> 00:24:54,799
issue

646
00:24:54,799 --> 00:24:56,240
also

647
00:24:56,240 --> 00:24:58,960
please as an exercise for your mind try

648
00:24:58,960 --> 00:25:00,799
to think what would happen

649
00:25:00,799 --> 00:25:02,640
if you ask your developers to implement

650
00:25:02,640 --> 00:25:05,360
indirect mechanisms in every place that

651
00:25:05,360 --> 00:25:07,520
receives id

652
00:25:07,520 --> 00:25:11,039
um not a pretty sight

653
00:25:11,039 --> 00:25:14,240
and let's go to the uh to the third

654
00:25:14,240 --> 00:25:16,320
category in this group of access control

655
00:25:16,320 --> 00:25:17,919
the api five

656
00:25:17,919 --> 00:25:20,400
it's broken function level authorization

657
00:25:20,400 --> 00:25:22,799
or buffalo

658
00:25:22,799 --> 00:25:24,799
what we call a function level

659
00:25:24,799 --> 00:25:27,200
authorization is

660
00:25:27,200 --> 00:25:30,880
here's a scenario for an example um we

661
00:25:30,880 --> 00:25:33,279
have different admin apis and different

662
00:25:33,279 --> 00:25:34,880
public apis

663
00:25:34,880 --> 00:25:36,640
obviously the admin api should be only

664
00:25:36,640 --> 00:25:39,440
accessed and executed by admins for

665
00:25:39,440 --> 00:25:42,240
example an admin would like to delete a

666
00:25:42,240 --> 00:25:43,679
specific user

667
00:25:43,679 --> 00:25:46,480
that is okay that should be possible

668
00:25:46,480 --> 00:25:48,960
because this is part of the admin api if

669
00:25:48,960 --> 00:25:51,279
a regular user tries to do that

670
00:25:51,279 --> 00:25:53,600
they should be obviously blocked they

671
00:25:53,600 --> 00:25:55,679
should not be authorized

672
00:25:55,679 --> 00:25:58,240
if they manage to do that then we say we

673
00:25:58,240 --> 00:26:00,720
have buffalo or broken function level

674
00:26:00,720 --> 00:26:03,200
optimization

675
00:26:03,200 --> 00:26:05,840
why is it so common in apis

676
00:26:05,840 --> 00:26:07,919
so function level authorization can be

677
00:26:07,919 --> 00:26:10,480
implemented in different ways it can be

678
00:26:10,480 --> 00:26:12,720
implemented in the code itself

679
00:26:12,720 --> 00:26:15,440
in configuration in api gateway

680
00:26:15,440 --> 00:26:17,279
and there are other methods every day

681
00:26:17,279 --> 00:26:19,120
now

682
00:26:19,120 --> 00:26:20,960
i think we all know that if something

683
00:26:20,960 --> 00:26:23,120
can be taken care of in many places it

684
00:26:23,120 --> 00:26:25,279
will not be taken care of at all

685
00:26:25,279 --> 00:26:28,559
and we see that happening all the time

686
00:26:28,559 --> 00:26:31,440
also it's easier to detect and exploit

687
00:26:31,440 --> 00:26:33,600
in apis because the endpoints are

688
00:26:33,600 --> 00:26:35,120
predictable

689
00:26:35,120 --> 00:26:37,279
let me show you what i mean

690
00:26:37,279 --> 00:26:40,880
let's talk about a regular endpoint um

691
00:26:40,880 --> 00:26:41,840
of

692
00:26:41,840 --> 00:26:44,240
getting a user profile for example

693
00:26:44,240 --> 00:26:46,799
and an administ point of deleting the

694
00:26:46,799 --> 00:26:49,679
user how it looked like in traditional

695
00:26:49,679 --> 00:26:53,279
software so in traditional applications

696
00:26:53,279 --> 00:26:55,279
we saw a get

697
00:26:55,279 --> 00:26:58,480
and then um something like that like we

698
00:26:58,480 --> 00:26:59,919
see here on the left

699
00:26:59,919 --> 00:27:02,240
and if you wanted to delete the user you

700
00:27:02,240 --> 00:27:05,039
probably had to go to some sort of user

701
00:27:05,039 --> 00:27:07,760
management console

702
00:27:07,760 --> 00:27:10,799
choose your action delete and do

703
00:27:10,799 --> 00:27:14,159
many many of these things

704
00:27:14,159 --> 00:27:15,279
these days

705
00:27:15,279 --> 00:27:17,360
with api

706
00:27:17,360 --> 00:27:19,760
the regular endpoint of get user profile

707
00:27:19,760 --> 00:27:22,320
looks like we see here on the left

708
00:27:22,320 --> 00:27:25,440
like get api the version users

709
00:27:25,440 --> 00:27:26,559
and the

710
00:27:26,559 --> 00:27:29,440
admin endpoint of deleting a user looks

711
00:27:29,440 --> 00:27:31,200
like we see on the right very very

712
00:27:31,200 --> 00:27:32,240
similar

713
00:27:32,240 --> 00:27:35,279
all we're changing here is the get to

714
00:27:35,279 --> 00:27:36,960
the verb delete

715
00:27:36,960 --> 00:27:38,799
and the first one the traditional is a

716
00:27:38,799 --> 00:27:40,640
little bit hard to predict

717
00:27:40,640 --> 00:27:42,399
and in api

718
00:27:42,399 --> 00:27:44,240
applications it's very very easy to

719
00:27:44,240 --> 00:27:45,679
predict

720
00:27:45,679 --> 00:27:47,679
so if it's not safe

721
00:27:47,679 --> 00:27:50,720
someone will find out

722
00:27:51,279 --> 00:27:52,960
let's summarize

723
00:27:52,960 --> 00:27:54,159
so

724
00:27:54,159 --> 00:27:56,640
what you need to remember

725
00:27:56,640 --> 00:27:58,320
what you need to remember is that modern

726
00:27:58,320 --> 00:28:01,039
api based apps are different

727
00:28:01,039 --> 00:28:02,320
you need to remember that being

728
00:28:02,320 --> 00:28:04,240
different they have their own security

729
00:28:04,240 --> 00:28:05,520
issues

730
00:28:05,520 --> 00:28:06,880
you also need to remember that the

731
00:28:06,880 --> 00:28:09,360
attack surface is much wider than we

732
00:28:09,360 --> 00:28:10,399
know it

733
00:28:10,399 --> 00:28:12,159
and there is more data moving between

734
00:28:12,159 --> 00:28:14,000
components

735
00:28:14,000 --> 00:28:15,840
and the last thing is that access

736
00:28:15,840 --> 00:28:18,559
control is a real challenge

737
00:28:18,559 --> 00:28:20,799
so what you need to do now what you need

738
00:28:20,799 --> 00:28:21,840
to do

739
00:28:21,840 --> 00:28:24,559
is to educate you you need to educate

740
00:28:24,559 --> 00:28:27,039
yourself your developers pen testers

741
00:28:27,039 --> 00:28:30,080
auditors architects

742
00:28:30,080 --> 00:28:32,640
product managers whoever there is no

743
00:28:32,640 --> 00:28:35,200
defense against threat you don't know so

744
00:28:35,200 --> 00:28:36,720
educate

745
00:28:36,720 --> 00:28:39,760
keep keep an up-to-date api inventory if

746
00:28:39,760 --> 00:28:41,840
you don't know what you have you cannot

747
00:28:41,840 --> 00:28:43,600
protect it

748
00:28:43,600 --> 00:28:46,000
and also try to embed access control

749
00:28:46,000 --> 00:28:48,399
best practices from the start from the

750
00:28:48,399 --> 00:28:49,600
get-go

751
00:28:49,600 --> 00:28:52,720
instead of describing a requirement as a

752
00:28:52,720 --> 00:28:56,559
user gets access to the document

753
00:28:56,840 --> 00:28:59,440
try saying it a bit differently try to

754
00:28:59,440 --> 00:29:00,240
say

755
00:29:00,240 --> 00:29:03,840
only that user gets access and read

756
00:29:03,840 --> 00:29:06,880
access to the document this might change

757
00:29:06,880 --> 00:29:08,080
some things

758
00:29:08,080 --> 00:29:10,840
later in the design

759
00:29:10,840 --> 00:29:14,720
um i just want to say that this project

760
00:29:14,720 --> 00:29:17,120
was huge um

761
00:29:17,120 --> 00:29:19,919
this is not a work of two people this

762
00:29:19,919 --> 00:29:21,600
is a work of many many people you can

763
00:29:21,600 --> 00:29:23,919
see here many names on the right dozens

764
00:29:23,919 --> 00:29:26,960
of people and our main contributor who

765
00:29:26,960 --> 00:29:29,360
managed to carry both innon and myself

766
00:29:29,360 --> 00:29:31,600
on his back many times

767
00:29:31,600 --> 00:29:32,960
paulo silva

768
00:29:32,960 --> 00:29:35,600
our main project contributor so thank

769
00:29:35,600 --> 00:29:38,480
you paolo and thank you everyone else

770
00:29:38,480 --> 00:29:41,600
i suggest that you join us you can join

771
00:29:41,600 --> 00:29:43,039
us in

772
00:29:43,039 --> 00:29:45,200
looking at the projects and adding your

773
00:29:45,200 --> 00:29:46,880
thoughts and opinions

774
00:29:46,880 --> 00:29:49,360
and helping us um

775
00:29:49,360 --> 00:29:52,799
add more important features to them

776
00:29:52,799 --> 00:29:55,039
um so please join us

777
00:29:55,039 --> 00:29:59,039
in running and contributing the project

778
00:29:59,039 --> 00:30:02,600
thank you very much

