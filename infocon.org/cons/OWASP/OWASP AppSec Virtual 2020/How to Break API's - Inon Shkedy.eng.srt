1
00:00:00,480 --> 00:00:02,480
hey guys and thank you so much for

2
00:00:02,480 --> 00:00:04,880
joining me for this session and today we

3
00:00:04,880 --> 00:00:06,640
are going to talk about how to break

4
00:00:06,640 --> 00:00:08,320
into apis

5
00:00:08,320 --> 00:00:10,160
we'll talk about modern techniques to

6
00:00:10,160 --> 00:00:12,080
break into model applications that are

7
00:00:12,080 --> 00:00:15,360
based on apis

8
00:00:15,599 --> 00:00:18,240
so the agenda for today is first of all

9
00:00:18,240 --> 00:00:19,840
before we even talk about application

10
00:00:19,840 --> 00:00:22,720
security and about how you can leverage

11
00:00:22,720 --> 00:00:25,920
apis to hack into applications

12
00:00:25,920 --> 00:00:28,400
basically to understand what is modern

13
00:00:28,400 --> 00:00:30,320
application security and how it's

14
00:00:30,320 --> 00:00:31,359
different

15
00:00:31,359 --> 00:00:33,680
than traditional application security

16
00:00:33,680 --> 00:00:36,559
after we talk about it we will cover uh

17
00:00:36,559 --> 00:00:39,840
some of the hosts top 10 free apis with

18
00:00:39,840 --> 00:00:42,320
emphasize of how to leverage these

19
00:00:42,320 --> 00:00:45,120
issues as the pentester and how you can

20
00:00:45,120 --> 00:00:47,680
use the os top 10 for apis to find cool

21
00:00:47,680 --> 00:00:50,239
vulnerabilities and to break apis

22
00:00:50,239 --> 00:00:52,559
and then we'll see some recent examples

23
00:00:52,559 --> 00:00:54,719
for api issues that happen in the last

24
00:00:54,719 --> 00:00:59,000
few months in large companies

25
00:00:59,440 --> 00:01:02,399
just a quick background about myself my

26
00:01:02,399 --> 00:01:04,159
name is ian shkeddie i'm the head of

27
00:01:04,159 --> 00:01:06,960
security research at traceable ai

28
00:01:06,960 --> 00:01:08,960
and this is a startup in the field of

29
00:01:08,960 --> 00:01:11,439
cloud native application security i got

30
00:01:11,439 --> 00:01:12,799
ideas of experience in application

31
00:01:12,799 --> 00:01:15,439
security i built many many fantastics

32
00:01:15,439 --> 00:01:17,680
and i grew up with apis

33
00:01:17,680 --> 00:01:18,960
what does it mean

34
00:01:18,960 --> 00:01:21,360
basically i started my career back in

35
00:01:21,360 --> 00:01:23,600
israel i was part of the red team of the

36
00:01:23,600 --> 00:01:26,080
israeli government and i it was a fun

37
00:01:26,080 --> 00:01:27,920
time for five years i had a chance to

38
00:01:27,920 --> 00:01:30,240
break into many systems in the field of

39
00:01:30,240 --> 00:01:32,400
government military and financial

40
00:01:32,400 --> 00:01:34,799
as you could imagine these systems are

41
00:01:34,799 --> 00:01:36,799
heavily based on traditional

42
00:01:36,799 --> 00:01:40,400
technologies like java asp.net sap

43
00:01:40,400 --> 00:01:42,720
and very traditional concepts multi-page

44
00:01:42,720 --> 00:01:44,640
applications on-prem environment

45
00:01:44,640 --> 00:01:47,280
waterfall an api used to be just a niche

46
00:01:47,280 --> 00:01:50,000
component mostly for b2b communication

47
00:01:50,000 --> 00:01:52,560
after five years in the israeli army i

48
00:01:52,560 --> 00:01:54,399
decided to move to california to the

49
00:01:54,399 --> 00:01:56,479
silicon valley and for the last three

50
00:01:56,479 --> 00:01:58,320
years i have been working mostly with

51
00:01:58,320 --> 00:02:01,200
startups and t1 companies and i got

52
00:02:01,200 --> 00:02:04,000
exposed to a new field of technologies

53
00:02:04,000 --> 00:02:06,880
instead of javasap.net and all of this

54
00:02:06,880 --> 00:02:09,119
traditional stuff i started saying more

55
00:02:09,119 --> 00:02:12,080
and more ruby on rails node.js

56
00:02:12,080 --> 00:02:14,879
python alexa and more

57
00:02:14,879 --> 00:02:17,360
and the interesting part is that i also

58
00:02:17,360 --> 00:02:19,920
got exposed to new concepts like single

59
00:02:19,920 --> 00:02:21,920
page applications instead of multi-page

60
00:02:21,920 --> 00:02:25,120
applications cloud environment cicd and

61
00:02:25,120 --> 00:02:27,040
the most important part is all these

62
00:02:27,040 --> 00:02:29,840
applications are heavily based on apis

63
00:02:29,840 --> 00:02:31,599
it's no longer just a niche component

64
00:02:31,599 --> 00:02:33,680
for bjp communication today's the

65
00:02:33,680 --> 00:02:36,239
backbone of the application

66
00:02:36,239 --> 00:02:37,200
so

67
00:02:37,200 --> 00:02:39,280
after i moved to the silicon valley one

68
00:02:39,280 --> 00:02:41,680
of the first things that i figured out

69
00:02:41,680 --> 00:02:44,400
that i can't really use my old ways like

70
00:02:44,400 --> 00:02:46,480
i could really find sql injection and

71
00:02:46,480 --> 00:02:48,400
cross-site scripting i had to adapt

72
00:02:48,400 --> 00:02:50,080
myself in order to find interesting

73
00:02:50,080 --> 00:02:52,879
stuff in apis and this is why i am

74
00:02:52,879 --> 00:02:54,640
creating this presentation to share with

75
00:02:54,640 --> 00:02:56,959
you some of my thoughts and how you can

76
00:02:56,959 --> 00:02:58,959
adapt yourself to this new battleground

77
00:02:58,959 --> 00:03:01,680
of apis

78
00:03:01,680 --> 00:03:03,599
so i want to talk in a very high level

79
00:03:03,599 --> 00:03:05,280
like briefly about what has changed

80
00:03:05,280 --> 00:03:06,159
between

81
00:03:06,159 --> 00:03:07,840
traditional applications and modern

82
00:03:07,840 --> 00:03:10,720
applications so here on the top of the

83
00:03:10,720 --> 00:03:12,959
screen you can see the traffic patterns

84
00:03:12,959 --> 00:03:14,879
between the client web server and

85
00:03:14,879 --> 00:03:16,800
database in the case of traditional

86
00:03:16,800 --> 00:03:19,120
applications in the past it used to be

87
00:03:19,120 --> 00:03:20,400
pretty simple

88
00:03:20,400 --> 00:03:22,959
the client would send an http call to

89
00:03:22,959 --> 00:03:25,360
fetch one specific web page for example

90
00:03:25,360 --> 00:03:28,239
home.jsp and then the web server would

91
00:03:28,239 --> 00:03:31,120
fetch data from the database in order to

92
00:03:31,120 --> 00:03:33,760
build the visual component the visual

93
00:03:33,760 --> 00:03:35,360
web page that would be sent back to the

94
00:03:35,360 --> 00:03:36,319
client

95
00:03:36,319 --> 00:03:39,680
this process of converting the data into

96
00:03:39,680 --> 00:03:42,400
like a visual page is called rendering

97
00:03:42,400 --> 00:03:44,480
so the rendering component was on the

98
00:03:44,480 --> 00:03:45,680
web server

99
00:03:45,680 --> 00:03:47,599
and then the web server simply returned

100
00:03:47,599 --> 00:03:49,760
an html page to the client would be

101
00:03:49,760 --> 00:03:52,799
presented to the user by the browser

102
00:03:52,799 --> 00:03:55,360
today things look very differently first

103
00:03:55,360 --> 00:03:56,560
of all

104
00:03:56,560 --> 00:03:58,400
the clients

105
00:03:58,400 --> 00:04:00,400
know much better what they want

106
00:04:00,400 --> 00:04:03,360
the clients don't ask for a complete web

107
00:04:03,360 --> 00:04:05,760
page they ask for specific pieces of

108
00:04:05,760 --> 00:04:08,159
information for example if you are

109
00:04:08,159 --> 00:04:09,840
looking at a dashboard component of some

110
00:04:09,840 --> 00:04:12,159
application the client would

111
00:04:12,159 --> 00:04:14,959
send api calls to fetch the last 20

112
00:04:14,959 --> 00:04:18,238
notification or fetch the top 10 users

113
00:04:18,238 --> 00:04:20,880
as part of this app so clients have much

114
00:04:20,880 --> 00:04:22,960
more context of what they need and what

115
00:04:22,960 --> 00:04:24,479
they want

116
00:04:24,479 --> 00:04:27,040
and also it's it's worth to mention

117
00:04:27,040 --> 00:04:30,240
that today clients maintain the user

118
00:04:30,240 --> 00:04:32,560
state back in the day you had mechanisms

119
00:04:32,560 --> 00:04:34,560
on the back end so the backend knew

120
00:04:34,560 --> 00:04:35,680
exactly

121
00:04:35,680 --> 00:04:38,000
what is the state of the user what what

122
00:04:38,000 --> 00:04:40,160
buttons the user has clicked what is the

123
00:04:40,160 --> 00:04:42,400
specific state of the user it was done

124
00:04:42,400 --> 00:04:43,280
using

125
00:04:43,280 --> 00:04:45,120
viewstates and cookies and other

126
00:04:45,120 --> 00:04:46,240
mechanisms

127
00:04:46,240 --> 00:04:48,240
today in apis and modern applications

128
00:04:48,240 --> 00:04:50,479
usually the clients maintain this state

129
00:04:50,479 --> 00:04:52,960
and the web server has less context of

130
00:04:52,960 --> 00:04:56,240
what is happening on the client side

131
00:04:56,240 --> 00:05:00,400
um so after the web server gets the

132
00:05:00,400 --> 00:05:02,639
calls from the clients it would fetch

133
00:05:02,639 --> 00:05:05,039
data from the database and you have more

134
00:05:05,039 --> 00:05:07,120
types of databases in top of like the

135
00:05:07,120 --> 00:05:09,360
traditional sql you can find today

136
00:05:09,360 --> 00:05:11,600
elastic and nosql

137
00:05:11,600 --> 00:05:14,880
and many more other types of databases

138
00:05:14,880 --> 00:05:16,960
and then another interesting change you

139
00:05:16,960 --> 00:05:19,759
know instead of returning html pages to

140
00:05:19,759 --> 00:05:22,400
date the web server the api returns raw

141
00:05:22,400 --> 00:05:25,520
data in the format of json

142
00:05:25,520 --> 00:05:27,520
so the client would just receive raw

143
00:05:27,520 --> 00:05:30,080
data and all the rendering process the

144
00:05:30,080 --> 00:05:32,000
creation of the visual page we done

145
00:05:32,000 --> 00:05:34,000
would be done on the client itself this

146
00:05:34,000 --> 00:05:37,960
is a very interesting change

147
00:05:42,560 --> 00:05:45,520
a few other changes is first of all

148
00:05:45,520 --> 00:05:48,080
you have more types of clients on top of

149
00:05:48,080 --> 00:05:51,120
the traditional web servers you can find

150
00:05:51,120 --> 00:05:54,240
a iot devices mobile devices and

151
00:05:54,240 --> 00:05:56,560
sometimes even other developers that use

152
00:05:56,560 --> 00:05:58,240
your apis to develop their own

153
00:05:58,240 --> 00:05:59,680
applications

154
00:05:59,680 --> 00:06:00,960
the second point which is very

155
00:06:00,960 --> 00:06:01,919
interesting

156
00:06:01,919 --> 00:06:04,800
i had this claim many times that apis

157
00:06:04,800 --> 00:06:06,960
have less abstraction layers

158
00:06:06,960 --> 00:06:08,639
it has many different aspects there is

159
00:06:08,639 --> 00:06:10,080
no one

160
00:06:10,080 --> 00:06:12,240
concept that supports this you know

161
00:06:12,240 --> 00:06:15,440
claim but one important one important

162
00:06:15,440 --> 00:06:17,759
concept is that apis

163
00:06:17,759 --> 00:06:20,720
today the client the apis and the

164
00:06:20,720 --> 00:06:23,280
servers they speak the same language all

165
00:06:23,280 --> 00:06:25,039
of them speak in json

166
00:06:25,039 --> 00:06:26,240
for example

167
00:06:26,240 --> 00:06:28,880
the receipt object that your

168
00:06:28,880 --> 00:06:31,440
google client is processing on your

169
00:06:31,440 --> 00:06:32,639
mobile device

170
00:06:32,639 --> 00:06:35,280
might be the same json object on the api

171
00:06:35,280 --> 00:06:37,759
and sometimes even on the databases so

172
00:06:37,759 --> 00:06:40,080
there is much less passing when it comes

173
00:06:40,080 --> 00:06:41,680
to like objects that are sent from the

174
00:06:41,680 --> 00:06:43,120
client because all of them speak the

175
00:06:43,120 --> 00:06:45,759
same language

176
00:06:46,720 --> 00:06:48,880
in terms of application security

177
00:06:48,880 --> 00:06:51,280
it's uh it was to mention that many of

178
00:06:51,280 --> 00:06:53,759
the traditional web application

179
00:06:53,759 --> 00:06:55,680
vulnerabilities like

180
00:06:55,680 --> 00:06:57,919
are being solved today

181
00:06:57,919 --> 00:06:59,919
and for example if we talk about sql

182
00:06:59,919 --> 00:07:01,680
injections many of them are solved by

183
00:07:01,680 --> 00:07:04,400
the use of orm environments by

184
00:07:04,400 --> 00:07:07,280
developers if we talk about csrf today

185
00:07:07,280 --> 00:07:09,120
it's much less common because developers

186
00:07:09,120 --> 00:07:11,280
move from a cookies to authorization

187
00:07:11,280 --> 00:07:12,160
header

188
00:07:12,160 --> 00:07:14,319
if your authentication mechanism is not

189
00:07:14,319 --> 00:07:16,160
based on cookies you are not vulnerable

190
00:07:16,160 --> 00:07:18,479
to csrf by design

191
00:07:18,479 --> 00:07:20,240
crossover scripting to dates the

192
00:07:20,240 --> 00:07:22,240
responsibility of the client to protect

193
00:07:22,240 --> 00:07:24,240
you against cost encrypting

194
00:07:24,240 --> 00:07:26,960
apis return raw data in the format of

195
00:07:26,960 --> 00:07:30,160
json they don't return any html pages so

196
00:07:30,160 --> 00:07:32,000
this is why it's the responsibility of

197
00:07:32,000 --> 00:07:33,360
the client

198
00:07:33,360 --> 00:07:35,759
if we talked about xxc for example which

199
00:07:35,759 --> 00:07:37,440
is a vulnerability in the passing

200
00:07:37,440 --> 00:07:39,840
process of xmls today it's less common

201
00:07:39,840 --> 00:07:42,400
because developers use jsons and they

202
00:07:42,400 --> 00:07:45,840
don't really pass xmls

203
00:07:46,319 --> 00:07:48,240
let's move to the bad news

204
00:07:48,240 --> 00:07:50,879
so the first point about apis

205
00:07:50,879 --> 00:07:53,199
you know many times when i see a rest

206
00:07:53,199 --> 00:07:55,520
apis that is exposed by a company that

207
00:07:55,520 --> 00:07:58,479
i'm performing a pentest too i get very

208
00:07:58,479 --> 00:08:01,680
excited apis today has a very attractive

209
00:08:01,680 --> 00:08:03,360
target for attackers

210
00:08:03,360 --> 00:08:05,199
and there are many reasons but i think

211
00:08:05,199 --> 00:08:07,120
the main ones are first of all the

212
00:08:07,120 --> 00:08:09,680
attack surface is much larger

213
00:08:09,680 --> 00:08:12,960
apis expose more endpoints and apis

214
00:08:12,960 --> 00:08:15,039
receive more parameters

215
00:08:15,039 --> 00:08:17,039
in order to support the same component

216
00:08:17,039 --> 00:08:19,120
for example in the case of

217
00:08:19,120 --> 00:08:20,960
of the dashboard component in the case

218
00:08:20,960 --> 00:08:22,479
of traditional applications you would

219
00:08:22,479 --> 00:08:24,560
see only one entry point to get

220
00:08:24,560 --> 00:08:26,160
dashboard in the case of modern

221
00:08:26,160 --> 00:08:27,840
applications you might see five

222
00:08:27,840 --> 00:08:29,440
different endpoints that are being used

223
00:08:29,440 --> 00:08:31,280
to populate data for the same exact

224
00:08:31,280 --> 00:08:32,799
component

225
00:08:32,799 --> 00:08:34,799
and the second point is apis are

226
00:08:34,799 --> 00:08:36,640
oversharing you can take a look at the

227
00:08:36,640 --> 00:08:38,958
traffic between the clients and the api

228
00:08:38,958 --> 00:08:40,320
and to understand the underlying

229
00:08:40,320 --> 00:08:43,599
implementation of the application

230
00:08:43,599 --> 00:08:45,680
and the third point is that apis are

231
00:08:45,680 --> 00:08:47,519
much more predictable

232
00:08:47,519 --> 00:08:50,000
and the rest standard and the graphql

233
00:08:50,000 --> 00:08:52,240
standard encourage developers to develop

234
00:08:52,240 --> 00:08:54,640
apis in a very predictable way

235
00:08:54,640 --> 00:08:56,480
it's very convenient for the front-end

236
00:08:56,480 --> 00:08:59,760
engineers to use these apis but it also

237
00:08:59,760 --> 00:09:02,800
makes satakis life much easier

238
00:09:02,800 --> 00:09:05,040
to

239
00:09:05,120 --> 00:09:07,920
to guess a sensitive api at

240
00:09:07,920 --> 00:09:11,760
endpoints for example admin endpoints

241
00:09:12,160 --> 00:09:15,200
so all of these changes that i've seen

242
00:09:15,200 --> 00:09:17,600
made me join areas alone and to start

243
00:09:17,600 --> 00:09:21,120
the os top 10 for api's project and in

244
00:09:21,120 --> 00:09:22,800
general the os

245
00:09:22,800 --> 00:09:24,880
api security project

246
00:09:24,880 --> 00:09:25,839
we

247
00:09:25,839 --> 00:09:28,320
tried to define this modern battleground

248
00:09:28,320 --> 00:09:30,000
it was a very interesting process to

249
00:09:30,000 --> 00:09:32,000
create this list

250
00:09:32,000 --> 00:09:34,160
we collected a lot of data from a bug

251
00:09:34,160 --> 00:09:37,200
bounties programs and then we came up

252
00:09:37,200 --> 00:09:40,240
with the final list of the os top 10 and

253
00:09:40,240 --> 00:09:42,000
we also got a bunch of feedback from the

254
00:09:42,000 --> 00:09:44,240
community to prioritize and to add new

255
00:09:44,240 --> 00:09:46,800
vulnerabilities

256
00:09:46,800 --> 00:09:48,839
so i want to talk with you about api

257
00:09:48,839 --> 00:09:51,360
printing this is the main goal of the

258
00:09:51,360 --> 00:09:54,000
presentation to to give you some ideas

259
00:09:54,000 --> 00:09:56,240
and some tips how to perform a better

260
00:09:56,240 --> 00:09:57,920
api pen testing

261
00:09:57,920 --> 00:09:58,720
um

262
00:09:58,720 --> 00:10:00,959
so it's not only a bunch of tips it's

263
00:10:00,959 --> 00:10:02,720
also like i'm gonna talk about a quiet

264
00:10:02,720 --> 00:10:05,839
mindset in order to hack apis

265
00:10:05,839 --> 00:10:07,360
let's let's talk about some of these

266
00:10:07,360 --> 00:10:09,279
concepts

267
00:10:09,279 --> 00:10:10,480
first of all

268
00:10:10,480 --> 00:10:12,160
in my opinion there are two types of

269
00:10:12,160 --> 00:10:15,200
panzers the one the first type is more

270
00:10:15,200 --> 00:10:17,519
straightforward you just try to break

271
00:10:17,519 --> 00:10:20,560
into an application you you generate a

272
00:10:20,560 --> 00:10:22,480
payload you try to like exploit sql

273
00:10:22,480 --> 00:10:24,160
injection and stuff like that

274
00:10:24,160 --> 00:10:25,279
sometimes you get vulnerability

275
00:10:25,279 --> 00:10:26,880
sometimes you don't

276
00:10:26,880 --> 00:10:28,560
this is like the most the most simple

277
00:10:28,560 --> 00:10:31,040
approach to form a pen test and then the

278
00:10:31,040 --> 00:10:33,279
second approach is to get into the

279
00:10:33,279 --> 00:10:36,240
developer mind like i think every

280
00:10:36,240 --> 00:10:38,560
experience fantastic would tell you if

281
00:10:38,560 --> 00:10:40,640
you want to exploit and to find cool

282
00:10:40,640 --> 00:10:42,320
vulnerabilities in the application that

283
00:10:42,320 --> 00:10:43,519
you are testing

284
00:10:43,519 --> 00:10:45,279
you need to understand

285
00:10:45,279 --> 00:10:47,360
what happens on the back end even if we

286
00:10:47,360 --> 00:10:48,959
talk about black box and you don't have

287
00:10:48,959 --> 00:10:51,600
access to the code you should aspire to

288
00:10:51,600 --> 00:10:56,000
understand what happens on the back end

289
00:10:56,800 --> 00:10:59,200
so how can you read developers minds to

290
00:10:59,200 --> 00:11:02,640
understand what they wrote on the code

291
00:11:02,640 --> 00:11:04,800
um so there are a few things that you

292
00:11:04,800 --> 00:11:06,880
can do the first one you should think

293
00:11:06,880 --> 00:11:08,959
like a developer and in order to do it

294
00:11:08,959 --> 00:11:11,279
it's really helpful to know how to code

295
00:11:11,279 --> 00:11:13,040
i think that every good pen tester that

296
00:11:13,040 --> 00:11:14,160
wants to find business logic

297
00:11:14,160 --> 00:11:16,800
vulnerabilities needs to understand code

298
00:11:16,800 --> 00:11:18,800
you don't need to be the best developer

299
00:11:18,800 --> 00:11:21,040
i promise you i'm not a great developer

300
00:11:21,040 --> 00:11:22,959
i don't know all the design patterns and

301
00:11:22,959 --> 00:11:25,120
you know i usually don't leave lots of

302
00:11:25,120 --> 00:11:27,200
comments in my code but i do understand

303
00:11:27,200 --> 00:11:29,920
code and i do know how to code simple

304
00:11:29,920 --> 00:11:31,760
scripts and i think it's very important

305
00:11:31,760 --> 00:11:33,440
for you as a pen tester to do it if you

306
00:11:33,440 --> 00:11:35,600
want to find cool stuff

307
00:11:35,600 --> 00:11:37,360
and the third point is to understand the

308
00:11:37,360 --> 00:11:39,360
dna of the app the dna of the app would

309
00:11:39,360 --> 00:11:41,200
allow you to understand better the

310
00:11:41,200 --> 00:11:43,279
business logic of the app and

311
00:11:43,279 --> 00:11:44,720
it's very important to understand that

312
00:11:44,720 --> 00:11:46,640
today when you talk about api

313
00:11:46,640 --> 00:11:49,519
vulnerabilities many of them are based

314
00:11:49,519 --> 00:11:51,839
on business logic business logic abuse

315
00:11:51,839 --> 00:11:54,160
of the application so in order to

316
00:11:54,160 --> 00:11:56,000
to abuse the babies logic you need to

317
00:11:56,000 --> 00:11:59,360
understand the biggest logic

318
00:12:02,639 --> 00:12:03,600
so

319
00:12:03,600 --> 00:12:05,200
as i told you about three years ago i

320
00:12:05,200 --> 00:12:06,880
moved to california and one of the

321
00:12:06,880 --> 00:12:08,639
coolest concepts that i found one of the

322
00:12:08,639 --> 00:12:10,480
coolest things they found after i moved

323
00:12:10,480 --> 00:12:11,920
is mindfulness

324
00:12:11,920 --> 00:12:13,839
and a mindfulness make you a better

325
00:12:13,839 --> 00:12:16,240
person but it also can make you a better

326
00:12:16,240 --> 00:12:18,399
a better pen tester so there are many

327
00:12:18,399 --> 00:12:19,839
concepts from mindfulness that you can

328
00:12:19,839 --> 00:12:22,000
leverage in api is fantastic

329
00:12:22,000 --> 00:12:23,760
first of all is beginner's mind

330
00:12:23,760 --> 00:12:25,120
beginner's mind is a concept that tells

331
00:12:25,120 --> 00:12:26,399
you that you need to be curious about

332
00:12:26,399 --> 00:12:28,560
anything in life so the same thing about

333
00:12:28,560 --> 00:12:29,600
apis

334
00:12:29,600 --> 00:12:31,600
you should understand what is the

335
00:12:31,600 --> 00:12:33,360
business logic of the application by

336
00:12:33,360 --> 00:12:35,519
looking at the api traffic and many

337
00:12:35,519 --> 00:12:37,920
times i know the pentastil if they see

338
00:12:37,920 --> 00:12:40,079
api endpoints they don't understand they

339
00:12:40,079 --> 00:12:42,000
just ignore it or they just assume that

340
00:12:42,000 --> 00:12:44,240
it's not important this is not a good

341
00:12:44,240 --> 00:12:45,760
approach when it comes to pen testing

342
00:12:45,760 --> 00:12:48,160
for apis every time that you see an api

343
00:12:48,160 --> 00:12:49,920
endpoint you should understand at least

344
00:12:49,920 --> 00:12:51,760
what is the purpose of the api endpoint

345
00:12:51,760 --> 00:12:53,920
and to ask meaningful questions

346
00:12:53,920 --> 00:12:56,480
what is the feature that caused this api

347
00:12:56,480 --> 00:12:58,399
called to trigger

348
00:12:58,399 --> 00:13:00,320
and stuff like that

349
00:13:00,320 --> 00:13:01,839
and the second point

350
00:13:01,839 --> 00:13:03,920
you should win yourself of gui many

351
00:13:03,920 --> 00:13:05,839
times when you perform a pen test for

352
00:13:05,839 --> 00:13:08,079
apis you don't have a client or the

353
00:13:08,079 --> 00:13:10,320
client doesn't access all the features

354
00:13:10,320 --> 00:13:12,560
so and you have only documentation for

355
00:13:12,560 --> 00:13:14,880
the api you should you shouldn't let

356
00:13:14,880 --> 00:13:17,279
phil stop you from generating api calls

357
00:13:17,279 --> 00:13:19,680
from scratch you know just to to start

358
00:13:19,680 --> 00:13:21,839
understanding how you can call an api

359
00:13:21,839 --> 00:13:26,160
endpoint without having an active client

360
00:13:27,760 --> 00:13:29,680
um so do you know what all these

361
00:13:29,680 --> 00:13:31,760
companies have in common uber facebook

362
00:13:31,760 --> 00:13:34,320
and shopify they all got breached in the

363
00:13:34,320 --> 00:13:36,720
last year because of access control

364
00:13:36,720 --> 00:13:38,720
problems it leads me to the point that

365
00:13:38,720 --> 00:13:40,720
authorization problems is the biggest

366
00:13:40,720 --> 00:13:43,440
threat of apis every company has

367
00:13:43,440 --> 00:13:46,320
authorization problems

368
00:13:46,320 --> 00:13:47,440
so

369
00:13:47,440 --> 00:13:49,600
most of the api vulnerabilities are

370
00:13:49,600 --> 00:13:51,920
somehow related to utilization and i

371
00:13:51,920 --> 00:13:54,079
want to spend some time talking about it

372
00:13:54,079 --> 00:13:57,040
so the most common api vulnerability er

373
00:13:57,040 --> 00:13:58,959
ebola

374
00:13:58,959 --> 00:14:01,040
it's broken object revitalization this

375
00:14:01,040 --> 00:14:02,639
is you probably know this vulnerability

376
00:14:02,639 --> 00:14:05,199
is either insecure direct object

377
00:14:05,199 --> 00:14:07,199
reference

378
00:14:07,199 --> 00:14:09,120
uh it's basically a vulnerability that

379
00:14:09,120 --> 00:14:11,279
allows you to access ids that belong to

380
00:14:11,279 --> 00:14:12,959
other users in this case i'm trying to

381
00:14:12,959 --> 00:14:16,240
download document my client would send

382
00:14:16,240 --> 00:14:18,320
an api call to download number to

383
00:14:18,320 --> 00:14:21,440
download file number one one three

384
00:14:21,440 --> 00:14:23,360
which is legit because this is a file it

385
00:14:23,360 --> 00:14:25,360
belongs to me but then i just change the

386
00:14:25,360 --> 00:14:28,639
id from 113 to 114 and i access a file

387
00:14:28,639 --> 00:14:31,120
from a different user

388
00:14:31,120 --> 00:14:33,600
number three extensive data exposure

389
00:14:33,600 --> 00:14:35,199
it's another type of authorization

390
00:14:35,199 --> 00:14:38,160
problem uh this this happens because the

391
00:14:38,160 --> 00:14:40,880
developers return too much information

392
00:14:40,880 --> 00:14:42,959
to the user so the client just returned

393
00:14:42,959 --> 00:14:44,720
too much information and number five

394
00:14:44,720 --> 00:14:46,720
broken functional virtualization these

395
00:14:46,720 --> 00:14:48,240
are api endpoints that should be

396
00:14:48,240 --> 00:14:50,560
accessed only by admins or privileges

397
00:14:50,560 --> 00:14:54,480
users but the developers don't check the

398
00:14:54,480 --> 00:14:55,839
if the user that's called the api

399
00:14:55,839 --> 00:15:00,480
endpoint is actually an admin

400
00:15:01,279 --> 00:15:03,360
i want to talk about the dna of modern

401
00:15:03,360 --> 00:15:04,880
applications those are the building

402
00:15:04,880 --> 00:15:07,120
quarks of the business logic and if you

403
00:15:07,120 --> 00:15:09,839
want to have a more comprehensive

404
00:15:09,839 --> 00:15:11,920
fantast you need to understand them you

405
00:15:11,920 --> 00:15:14,320
need to understand them like in a mental

406
00:15:14,320 --> 00:15:15,920
way just just to understand them in your

407
00:15:15,920 --> 00:15:18,240
mind or sometimes it's also helpful to

408
00:15:18,240 --> 00:15:20,240
write down and to create some diagrams

409
00:15:20,240 --> 00:15:21,440
when you perform apprentice to

410
00:15:21,440 --> 00:15:23,680
understand what are the components let's

411
00:15:23,680 --> 00:15:27,839
talk about some of this dna

412
00:15:28,639 --> 00:15:30,720
some of these build is building rocks of

413
00:15:30,720 --> 00:15:31,920
apis

414
00:15:31,920 --> 00:15:34,480
so if we take for example the uber

415
00:15:34,480 --> 00:15:37,040
application you have different types of

416
00:15:37,040 --> 00:15:40,079
users and roles you have riders drivers

417
00:15:40,079 --> 00:15:41,920
and admins and you need to understand

418
00:15:41,920 --> 00:15:43,920
what are the different clients of uber

419
00:15:43,920 --> 00:15:46,320
you have a mobile which is obvious you

420
00:15:46,320 --> 00:15:49,279
have um like android and ios then you

421
00:15:49,279 --> 00:15:51,279
have your application i'm not sure if

422
00:15:51,279 --> 00:15:52,959
you know but you can access google also

423
00:15:52,959 --> 00:15:54,480
using your application which is a

424
00:15:54,480 --> 00:15:57,120
different api and you also have iot so

425
00:15:57,120 --> 00:15:59,920
in the case of uber you have escudos for

426
00:15:59,920 --> 00:16:01,920
example all the jump bikes they

427
00:16:01,920 --> 00:16:04,639
communicate with the uber api

428
00:16:04,639 --> 00:16:06,160
using a different api

429
00:16:06,160 --> 00:16:07,600
and then you need to understand what are

430
00:16:07,600 --> 00:16:09,519
the different apis behind the scenes and

431
00:16:09,519 --> 00:16:11,600
the resources in the case of uber the

432
00:16:11,600 --> 00:16:13,839
resources will be the receipts the trips

433
00:16:13,839 --> 00:16:16,160
the users and scooters for example

434
00:16:16,160 --> 00:16:17,839
if you understand this full picture it

435
00:16:17,839 --> 00:16:19,040
would be much easier for you to

436
00:16:19,040 --> 00:16:20,560
understand the business logic and to

437
00:16:20,560 --> 00:16:23,199
expand our taxes

438
00:16:23,199 --> 00:16:25,279
so let's talk about broken object

439
00:16:25,279 --> 00:16:26,720
levelization

440
00:16:26,720 --> 00:16:28,959
which is either and how we can exploit

441
00:16:28,959 --> 00:16:32,240
it and more than that how we can

442
00:16:32,240 --> 00:16:34,240
leverage the dna of the application in

443
00:16:34,240 --> 00:16:36,000
order to perform better exploitation and

444
00:16:36,000 --> 00:16:38,000
to find more potentially vulnerable

445
00:16:38,000 --> 00:16:40,240
endpoints

446
00:16:40,240 --> 00:16:42,560
so let's say that you upload the photo

447
00:16:42,560 --> 00:16:44,399
to the good application you have a

448
00:16:44,399 --> 00:16:45,759
feature of apple in your photo and then

449
00:16:45,759 --> 00:16:47,120
you see that if you want to access this

450
00:16:47,120 --> 00:16:49,360
photo there is an api call to get

451
00:16:49,360 --> 00:16:53,199
a little api slash v1 photos.717

452
00:16:53,199 --> 00:16:56,320
so if we translate it to business logic

453
00:16:56,320 --> 00:16:57,920
you can tell yourself that there is a

454
00:16:57,920 --> 00:17:00,880
resource that is exposed to an api to me

455
00:17:00,880 --> 00:17:02,320
let's try to see what are these

456
00:17:02,320 --> 00:17:03,360
components

457
00:17:03,360 --> 00:17:05,280
so a resource

458
00:17:05,280 --> 00:17:06,559
is a photo

459
00:17:06,559 --> 00:17:08,559
and then the api

460
00:17:08,559 --> 00:17:10,240
is the editor api you can see it in the

461
00:17:10,240 --> 00:17:11,439
url

462
00:17:11,439 --> 00:17:14,000
and me who is me i am

463
00:17:14,000 --> 00:17:17,439
the user bob it's the user id of 8581

464
00:17:17,439 --> 00:17:19,439
i'm a regular user and i'm accessing

465
00:17:19,439 --> 00:17:22,079
this api endpoint uh

466
00:17:22,079 --> 00:17:24,400
using the mobile application this is an

467
00:17:24,400 --> 00:17:27,039
ios application

468
00:17:27,039 --> 00:17:28,240
so

469
00:17:28,240 --> 00:17:30,720
this is if you translate this api

470
00:17:30,720 --> 00:17:32,559
endpoint like if you just perform a

471
00:17:32,559 --> 00:17:34,240
simple pen test you would just try to

472
00:17:34,240 --> 00:17:35,919
change the idea from seven one seven to

473
00:17:35,919 --> 00:17:38,000
seven one six and you might get uh

474
00:17:38,000 --> 00:17:39,600
access to a photo

475
00:17:39,600 --> 00:17:41,919
to a photo of someone else or just a

476
00:17:41,919 --> 00:17:44,160
follow one like to get rejected but

477
00:17:44,160 --> 00:17:46,320
let's see how we can leverage this

478
00:17:46,320 --> 00:17:48,880
language of the dna of the api in order

479
00:17:48,880 --> 00:17:50,960
to to expand attack surface and to find

480
00:17:50,960 --> 00:17:52,240
more potential endpoints in the

481
00:17:52,240 --> 00:17:54,720
vulnerable to ebola

482
00:17:54,720 --> 00:17:56,960
so some question that you should ask

483
00:17:56,960 --> 00:17:58,799
yourself regarding the resource

484
00:17:58,799 --> 00:18:01,760
regarding the photo first of all

485
00:18:01,760 --> 00:18:04,320
is the resource private sometimes we can

486
00:18:04,320 --> 00:18:08,000
see api endpoints that receive ideas but

487
00:18:08,000 --> 00:18:09,840
even if you try to change the id to

488
00:18:09,840 --> 00:18:12,960
something else you can get access to a

489
00:18:12,960 --> 00:18:14,960
different id it's not necessarily a

490
00:18:14,960 --> 00:18:16,480
vulnerability because sometimes these

491
00:18:16,480 --> 00:18:18,240
resources are public for example it's a

492
00:18:18,240 --> 00:18:20,240
news article everyone should have access

493
00:18:20,240 --> 00:18:22,080
to this endpoint so make sure that you

494
00:18:22,080 --> 00:18:25,520
don't send bugs that contain idols for

495
00:18:25,520 --> 00:18:28,320
resources that are private

496
00:18:28,320 --> 00:18:29,919
the second question you can ask yourself

497
00:18:29,919 --> 00:18:31,840
is is the resource shareable is it

498
00:18:31,840 --> 00:18:34,080
possible to share the resource sometimes

499
00:18:34,080 --> 00:18:36,080
if you have on facebook for example an

500
00:18:36,080 --> 00:18:37,840
option to share a photo with someone

501
00:18:37,840 --> 00:18:39,600
else it can lead to another

502
00:18:39,600 --> 00:18:40,960
vulnerabilities

503
00:18:40,960 --> 00:18:42,480
and the last question

504
00:18:42,480 --> 00:18:44,960
is the resource encapsulated what does

505
00:18:44,960 --> 00:18:46,799
it mean so let's say that you try to

506
00:18:46,799 --> 00:18:49,360
find bola to steal photos of other users

507
00:18:49,360 --> 00:18:51,280
but you can't you can't really find any

508
00:18:51,280 --> 00:18:53,520
api endpoints that is vulnerable to bola

509
00:18:53,520 --> 00:18:55,760
that access photos the next thing that

510
00:18:55,760 --> 00:18:59,280
we try to do is to find what resources

511
00:18:59,280 --> 00:19:01,600
might contain the photo so in the use

512
00:19:01,600 --> 00:19:04,080
case it might be an album

513
00:19:04,080 --> 00:19:05,840
and then you can expand your attack

514
00:19:05,840 --> 00:19:06,960
surface

515
00:19:06,960 --> 00:19:08,480
and

516
00:19:08,480 --> 00:19:10,240
you should list all the api endpoints

517
00:19:10,240 --> 00:19:11,760
the text that

518
00:19:11,760 --> 00:19:12,799
access

519
00:19:12,799 --> 00:19:14,720
the resource or the encapsulated

520
00:19:14,720 --> 00:19:15,919
resource

521
00:19:15,919 --> 00:19:17,840
let's see how we can do it for example

522
00:19:17,840 --> 00:19:19,679
uh what we can do is to change the

523
00:19:19,679 --> 00:19:23,679
editor api slash v1 to edito api v0 this

524
00:19:23,679 --> 00:19:25,840
is a different abi input is potentially

525
00:19:25,840 --> 00:19:27,679
vulnerable to ball

526
00:19:27,679 --> 00:19:29,679
and then uh

527
00:19:29,679 --> 00:19:31,280
if we did if we see that all the

528
00:19:31,280 --> 00:19:33,120
endpoint that access photos don't

529
00:19:33,120 --> 00:19:35,360
vulnerable to bala let's try to move to

530
00:19:35,360 --> 00:19:38,160
the um

531
00:19:38,160 --> 00:19:40,559
let's try to move to export album

532
00:19:40,559 --> 00:19:42,640
uh to like to an endpoint that actually

533
00:19:42,640 --> 00:19:44,960
access the almond the album behind the

534
00:19:44,960 --> 00:19:46,320
scenes and only if you have the

535
00:19:46,320 --> 00:19:48,559
understanding that the album contains

536
00:19:48,559 --> 00:19:50,559
photos you can

537
00:19:50,559 --> 00:19:52,240
you can be more focused on this api

538
00:19:52,240 --> 00:19:55,679
endpoint that expose the album

539
00:19:56,080 --> 00:19:57,600
and then you can start asking yourself

540
00:19:57,600 --> 00:19:59,520
can i use a different client to access

541
00:19:59,520 --> 00:20:01,120
the same resource can i use a different

542
00:20:01,120 --> 00:20:03,760
maybe if i access the web application

543
00:20:03,760 --> 00:20:06,320
would it look different well if i access

544
00:20:06,320 --> 00:20:08,000
mobile the mobile api it would look

545
00:20:08,000 --> 00:20:10,880
different so many times if you have web

546
00:20:10,880 --> 00:20:13,679
web client or a mobile client

547
00:20:13,679 --> 00:20:15,919
the api endpoints that they trigger the

548
00:20:15,919 --> 00:20:17,840
api calls they trigger belongs to

549
00:20:17,840 --> 00:20:20,240
different endpoints so you might have

550
00:20:20,240 --> 00:20:22,480
one endpoint to get photo for mobile and

551
00:20:22,480 --> 00:20:23,360
one

552
00:20:23,360 --> 00:20:25,679
endpoint to get photo for web and you

553
00:20:25,679 --> 00:20:26,799
should

554
00:20:26,799 --> 00:20:29,760
test both of them

555
00:20:31,280 --> 00:20:34,400
so if you have if you like you map all

556
00:20:34,400 --> 00:20:36,000
the endpoints that might be vulnerable

557
00:20:36,000 --> 00:20:37,039
to bola

558
00:20:37,039 --> 00:20:37,760
to

559
00:20:37,760 --> 00:20:41,280
to and your goal is to access a photo of

560
00:20:41,280 --> 00:20:42,400
someone else

561
00:20:42,400 --> 00:20:44,880
how can you validate that the specific

562
00:20:44,880 --> 00:20:46,480
endpoint is vulnerable

563
00:20:46,480 --> 00:20:48,799
so there are a few approaches many times

564
00:20:48,799 --> 00:20:51,120
what pentesters prefer to do is just

565
00:20:51,120 --> 00:20:54,240
should change the id of 717 to an id of

566
00:20:54,240 --> 00:20:56,640
something else for example 716

567
00:20:56,640 --> 00:20:58,159
but

568
00:20:58,159 --> 00:21:00,480
there is a better way to do it so the

569
00:21:00,480 --> 00:21:02,799
first step would be to create user

570
00:21:02,799 --> 00:21:05,120
number one to log into the api and to

571
00:21:05,120 --> 00:21:07,120
create a photo and then to access this

572
00:21:07,120 --> 00:21:09,200
photo so you access a photo that belongs

573
00:21:09,200 --> 00:21:12,080
to you this is nothing exciting but you

574
00:21:12,080 --> 00:21:14,559
need to have this api call documented

575
00:21:14,559 --> 00:21:17,280
for example on fiddle or burp

576
00:21:17,280 --> 00:21:18,640
and then what you do is create a

577
00:21:18,640 --> 00:21:20,960
different user

578
00:21:20,960 --> 00:21:21,760
and

579
00:21:21,760 --> 00:21:24,400
you copy the session label of this user

580
00:21:24,400 --> 00:21:26,559
after you log in to this user b that you

581
00:21:26,559 --> 00:21:28,400
just created you need to create to copy

582
00:21:28,400 --> 00:21:30,720
the session enable a session label what

583
00:21:30,720 --> 00:21:32,559
is a session label is basically every

584
00:21:32,559 --> 00:21:35,760
string that is used by the api to

585
00:21:35,760 --> 00:21:38,640
identify a user it can be authentication

586
00:21:38,640 --> 00:21:41,200
token it can be a session id it can be

587
00:21:41,200 --> 00:21:42,799
everything else it doesn't really matter

588
00:21:42,799 --> 00:21:45,120
you just need to copy this single string

589
00:21:45,120 --> 00:21:47,039
that is used by the api to define the

590
00:21:47,039 --> 00:21:50,559
user and to duplicate the first request

591
00:21:50,559 --> 00:21:52,720
to access photo seven and one seven

592
00:21:52,720 --> 00:21:54,720
and to replace the

593
00:21:54,720 --> 00:21:56,320
session label

594
00:21:56,320 --> 00:21:58,559
and after you do it if you get

595
00:21:58,559 --> 00:22:00,480
if you get access to the photo it means

596
00:22:00,480 --> 00:22:02,720
that the second user could have gotten

597
00:22:02,720 --> 00:22:04,080
access to the photo and it's vulnerable

598
00:22:04,080 --> 00:22:06,320
to bowler if you got some authoritation

599
00:22:06,320 --> 00:22:08,960
error like 401 or 403 it's probably not

600
00:22:08,960 --> 00:22:11,960
vulnerable

601
00:22:13,360 --> 00:22:16,400
some random tricks to ebola

602
00:22:16,400 --> 00:22:19,039
um sometimes you can see that

603
00:22:19,039 --> 00:22:21,679
companies have implemented automation

604
00:22:21,679 --> 00:22:24,080
mechanisms but it's still possible to

605
00:22:24,080 --> 00:22:26,080
bypass them uh

606
00:22:26,080 --> 00:22:27,840
some ways to do it is first of all you

607
00:22:27,840 --> 00:22:30,640
can try to wrap the id with an array uh

608
00:22:30,640 --> 00:22:32,159
sometimes the input filtering

609
00:22:32,159 --> 00:22:34,480
authorization checks are done only for

610
00:22:34,480 --> 00:22:36,720
integers but not for arrays that contain

611
00:22:36,720 --> 00:22:38,320
integers

612
00:22:38,320 --> 00:22:41,919
you can try to send the url the id twice

613
00:22:41,919 --> 00:22:44,080
in the url for example in this api

614
00:22:44,080 --> 00:22:45,039
endpoint

615
00:22:45,039 --> 00:22:47,360
the id the first id would be the legit

616
00:22:47,360 --> 00:22:48,720
and then the second one would be the

617
00:22:48,720 --> 00:22:50,960
victim's id

618
00:22:50,960 --> 00:22:53,360
this approach might work because in some

619
00:22:53,360 --> 00:22:55,200
cases as you can see in the diagram

620
00:22:55,200 --> 00:22:56,480
below

621
00:22:56,480 --> 00:22:58,480
the authorization mechanism is

622
00:22:58,480 --> 00:23:01,120
implemented on one micro service this is

623
00:23:01,120 --> 00:23:03,120
very common in modern applications that

624
00:23:03,120 --> 00:23:04,720
the authorization mechanism is one micro

625
00:23:04,720 --> 00:23:07,600
service this micro service might run a

626
00:23:07,600 --> 00:23:10,159
like a framework of ruby on rails and

627
00:23:10,159 --> 00:23:12,559
ruby on rails uses specific library to

628
00:23:12,559 --> 00:23:16,320
pass jsons or to pass the urls

629
00:23:16,320 --> 00:23:18,320
and in this case

630
00:23:18,320 --> 00:23:20,640
this library of ruby on rails might

631
00:23:20,640 --> 00:23:23,600
consider the first id but then the api

632
00:23:23,600 --> 00:23:25,520
endpoint itself that actually fetches

633
00:23:25,520 --> 00:23:27,760
the data from the you know this is after

634
00:23:27,760 --> 00:23:29,200
the authorization you're already allowed

635
00:23:29,200 --> 00:23:30,880
to access this endpoint

636
00:23:30,880 --> 00:23:33,679
so maybe the logic to access uh to fetch

637
00:23:33,679 --> 00:23:35,039
the data

638
00:23:35,039 --> 00:23:37,039
is using a different library because

639
00:23:37,039 --> 00:23:38,480
it's a different micro service it's a

640
00:23:38,480 --> 00:23:40,960
different framework for example jungle

641
00:23:40,960 --> 00:23:43,279
and then this framework you takes

642
00:23:43,279 --> 00:23:46,799
considers the second id

643
00:23:47,440 --> 00:23:49,840
other random tricks if you see an id in

644
00:23:49,840 --> 00:23:51,760
the url try to move it to the request

645
00:23:51,760 --> 00:23:54,000
body if you see an id in the request

646
00:23:54,000 --> 00:23:56,000
body try to move it to the url sometimes

647
00:23:56,000 --> 00:23:57,520
it works

648
00:23:57,520 --> 00:24:00,480
if you see a guid try to send a numeric

649
00:24:00,480 --> 00:24:02,159
value as well like integer if you see

650
00:24:02,159 --> 00:24:04,559
like a random long good just try to send

651
00:24:04,559 --> 00:24:05,279
like

652
00:24:05,279 --> 00:24:07,039
five or six

653
00:24:07,039 --> 00:24:09,120
sometimes companies have support for

654
00:24:09,120 --> 00:24:11,039
both of them and they they implement

655
00:24:11,039 --> 00:24:12,799
different mechanisms to protect against

656
00:24:12,799 --> 00:24:16,000
volatile guid and id

657
00:24:16,000 --> 00:24:18,000
and one tip that i can give you one of

658
00:24:18,000 --> 00:24:20,240
the best tips they can give you and this

659
00:24:20,240 --> 00:24:22,480
can make that can make your life easier

660
00:24:22,480 --> 00:24:25,279
try to focus on ideas in the body

661
00:24:25,279 --> 00:24:26,960
they tend to be more vulnerable than

662
00:24:26,960 --> 00:24:28,960
ideas in their oil

663
00:24:28,960 --> 00:24:32,600
or in the query parameters

664
00:24:34,400 --> 00:24:36,880
let's talk about excessive data exposure

665
00:24:36,880 --> 00:24:38,799
exposure how we can exploit this

666
00:24:38,799 --> 00:24:40,799
vulnerability so excessive data exposure

667
00:24:40,799 --> 00:24:43,120
is one of my favorite vulnerabilities

668
00:24:43,120 --> 00:24:45,600
instead of performing a complex pen test

669
00:24:45,600 --> 00:24:48,960
api is just leak pii by design

670
00:24:48,960 --> 00:24:51,120
let's see how it looks like behind the

671
00:24:51,120 --> 00:24:52,799
scenes

672
00:24:52,799 --> 00:24:54,320
you have bob

673
00:24:54,320 --> 00:24:55,760
you have you use some leading up and

674
00:24:55,760 --> 00:24:57,520
then you see the profile of bob and you

675
00:24:57,520 --> 00:24:58,480
say only

676
00:24:58,480 --> 00:25:01,200
only the public data about both like

677
00:25:01,200 --> 00:25:02,799
name and hobbies

678
00:25:02,799 --> 00:25:04,720
but behind the scenes uh you can see an

679
00:25:04,720 --> 00:25:08,000
api call to get slash user 717

680
00:25:08,000 --> 00:25:10,159
and the api response contains all the

681
00:25:10,159 --> 00:25:12,000
public data like name profile picture

682
00:25:12,000 --> 00:25:13,919
but you can also find the address of bob

683
00:25:13,919 --> 00:25:16,320
which is pii what happens many times

684
00:25:16,320 --> 00:25:17,919
developers on the back end they rely on

685
00:25:17,919 --> 00:25:19,279
the developers of the front end to

686
00:25:19,279 --> 00:25:21,520
filter out the sensitive data this is a

687
00:25:21,520 --> 00:25:23,840
very bad idea maybe you can you cannot

688
00:25:23,840 --> 00:25:25,840
see it as a user because the developer

689
00:25:25,840 --> 00:25:27,279
actually filter out this data before

690
00:25:27,279 --> 00:25:29,520
presenting it to the ui but if you sniff

691
00:25:29,520 --> 00:25:32,400
the api traffic you can easily expose

692
00:25:32,400 --> 00:25:35,200
this information

693
00:25:35,279 --> 00:25:37,279
so um

694
00:25:37,279 --> 00:25:39,760
it's a good question how to exploit this

695
00:25:39,760 --> 00:25:42,799
vulnerability in apis because you know

696
00:25:42,799 --> 00:25:44,640
it's not very straightforward you just

697
00:25:44,640 --> 00:25:46,640
need to call all the api endpoints and

698
00:25:46,640 --> 00:25:50,080
you start taking a look at the responses

699
00:25:50,080 --> 00:25:52,240
so some tips they can give you how to

700
00:25:52,240 --> 00:25:54,000
navigate this maze

701
00:25:54,000 --> 00:25:56,000
would be to understand the hierarchies

702
00:25:56,000 --> 00:26:00,080
between users roles and resources

703
00:26:00,080 --> 00:26:01,840
let's say for example that you access

704
00:26:01,840 --> 00:26:04,720
this api call to get your previous

705
00:26:04,720 --> 00:26:06,320
rights

706
00:26:06,320 --> 00:26:08,400
from this from this response you can

707
00:26:08,400 --> 00:26:10,640
understand that you have the resource of

708
00:26:10,640 --> 00:26:12,880
rights that inside it it has a nested

709
00:26:12,880 --> 00:26:16,000
resource of driver and then the nested

710
00:26:16,000 --> 00:26:16,880
resort

711
00:26:16,880 --> 00:26:18,799
driver has a

712
00:26:18,799 --> 00:26:21,440
resource of car

713
00:26:21,440 --> 00:26:22,640
so

714
00:26:22,640 --> 00:26:26,080
the ride here does not contain pii right

715
00:26:26,080 --> 00:26:28,320
and or pii or any other type of

716
00:26:28,320 --> 00:26:29,679
sensitive data because when we talk

717
00:26:29,679 --> 00:26:31,760
about exciting data exposure the goal

718
00:26:31,760 --> 00:26:33,039
here is to

719
00:26:33,039 --> 00:26:35,440
for us as a pentester is to find a

720
00:26:35,440 --> 00:26:36,799
sensitive data

721
00:26:36,799 --> 00:26:39,200
so we see that also the driver does not

722
00:26:39,200 --> 00:26:41,200
contain pii

723
00:26:41,200 --> 00:26:42,880
but the car

724
00:26:42,880 --> 00:26:44,240
the car

725
00:26:44,240 --> 00:26:46,400
resource actually contains the vin of

726
00:26:46,400 --> 00:26:48,559
the vehicle which is pii this is a

727
00:26:48,559 --> 00:26:50,720
unique identifier of a vehicle it

728
00:26:50,720 --> 00:26:53,840
shouldn't be exposed

729
00:26:55,039 --> 00:26:57,760
um so let's say that now your goal is to

730
00:26:57,760 --> 00:27:00,240
is to find details about the driver so

731
00:27:00,240 --> 00:27:01,840
what you should do is to find all the

732
00:27:01,840 --> 00:27:04,080
endpoints that expose the driver

733
00:27:04,080 --> 00:27:06,559
resource

734
00:27:06,640 --> 00:27:08,000
so

735
00:27:08,000 --> 00:27:09,360
what you should do is to find more

736
00:27:09,360 --> 00:27:11,279
endpoints that actually access this

737
00:27:11,279 --> 00:27:12,640
information and maybe because it's a

738
00:27:12,640 --> 00:27:14,799
different endpoints there is different

739
00:27:14,799 --> 00:27:17,440
code in the backend that is running and

740
00:27:17,440 --> 00:27:19,919
maybe the developer the developers made

741
00:27:19,919 --> 00:27:21,440
a mistake and returned too much

742
00:27:21,440 --> 00:27:23,360
information like in this case if you

743
00:27:23,360 --> 00:27:26,159
have an option to export right to

744
00:27:26,159 --> 00:27:29,039
uh to a cvs file you can see that

745
00:27:29,039 --> 00:27:31,200
this info the response from this api

746
00:27:31,200 --> 00:27:32,559
call contains

747
00:27:32,559 --> 00:27:35,760
sensitive data about information so you

748
00:27:35,760 --> 00:27:38,399
found an api endpoint it exposes ki of a

749
00:27:38,399 --> 00:27:40,719
driver

750
00:27:40,880 --> 00:27:43,120
um

751
00:27:43,120 --> 00:27:44,720
and then

752
00:27:44,720 --> 00:27:45,919
you want to

753
00:27:45,919 --> 00:27:47,440
to move in even

754
00:27:47,440 --> 00:27:48,720
further and to find more information

755
00:27:48,720 --> 00:27:50,880
about the driver so you go and you find

756
00:27:50,880 --> 00:27:52,640
a different endpoint that accesses in

757
00:27:52,640 --> 00:27:55,679
some way like basically it's it's a game

758
00:27:55,679 --> 00:27:57,600
of understanding which endpoints access

759
00:27:57,600 --> 00:27:58,960
which resources

760
00:27:58,960 --> 00:28:01,200
so you you're trying to find endpoints

761
00:28:01,200 --> 00:28:03,679
that access the driver resource right so

762
00:28:03,679 --> 00:28:05,520
you find you say okay i have an option

763
00:28:05,520 --> 00:28:08,799
to report uh to report a complaint about

764
00:28:08,799 --> 00:28:11,600
the driver that did something illegal on

765
00:28:11,600 --> 00:28:13,120
the on the road

766
00:28:13,120 --> 00:28:15,760
so you access the web application to

767
00:28:15,760 --> 00:28:18,320
report driver and you send a complaint

768
00:28:18,320 --> 00:28:20,880
and you hope to see in the response some

769
00:28:20,880 --> 00:28:24,159
definitive details about the driver

770
00:28:24,159 --> 00:28:25,520
but you don't find anything you suggest

771
00:28:25,520 --> 00:28:27,919
the name is john it's not interesting

772
00:28:27,919 --> 00:28:30,159
but what happens if you replace web to

773
00:28:30,159 --> 00:28:32,159
mobile and you report the driver you

774
00:28:32,159 --> 00:28:35,200
might be able to access the address of

775
00:28:35,200 --> 00:28:37,919
of the driver

776
00:28:38,000 --> 00:28:40,000
and then you might access you you might

777
00:28:40,000 --> 00:28:41,840
find an ad

778
00:28:41,840 --> 00:28:43,919
a driver account and you want to

779
00:28:43,919 --> 00:28:45,919
register your car right just as part of

780
00:28:45,919 --> 00:28:48,880
like creating a new user as a driver

781
00:28:48,880 --> 00:28:52,080
uh so what you can try to do here is to

782
00:28:52,080 --> 00:28:54,960
register a car and to put the van of a

783
00:28:54,960 --> 00:28:56,640
different car that you already have from

784
00:28:56,640 --> 00:28:58,320
the diff like from the previous endpoint

785
00:28:58,320 --> 00:28:59,679
this is at the end it belongs to a

786
00:28:59,679 --> 00:29:01,279
different driver

787
00:29:01,279 --> 00:29:03,520
and then the response actually says this

788
00:29:03,520 --> 00:29:05,520
vin is assigned to a car and you get the

789
00:29:05,520 --> 00:29:08,799
geo id of a different car

790
00:29:08,880 --> 00:29:10,559
um and if you

791
00:29:10,559 --> 00:29:12,320
access and then you like you keep

792
00:29:12,320 --> 00:29:14,960
looking at the app as a driver and you

793
00:29:14,960 --> 00:29:16,960
see an api endpoint to fetch the details

794
00:29:16,960 --> 00:29:18,480
of your car

795
00:29:18,480 --> 00:29:22,000
v2 card retails and the id of the car so

796
00:29:22,000 --> 00:29:24,720
you can use the id of the car that we

797
00:29:24,720 --> 00:29:26,960
got from the previous api endpoint uh to

798
00:29:26,960 --> 00:29:28,799
access uh

799
00:29:28,799 --> 00:29:30,399
details about

800
00:29:30,399 --> 00:29:32,159
any another another car that belongs to

801
00:29:32,159 --> 00:29:33,600
a different user

802
00:29:33,600 --> 00:29:35,360
but the response does not contain

803
00:29:35,360 --> 00:29:37,360
interesting information so we can try to

804
00:29:37,360 --> 00:29:40,000
change it to like maybe v3 and this is a

805
00:29:40,000 --> 00:29:41,760
good tip many times the implementation

806
00:29:41,760 --> 00:29:44,799
of v2 and v1 and v3 are different

807
00:29:44,799 --> 00:29:47,679
and you can see that v3 of a car details

808
00:29:47,679 --> 00:29:51,440
actually exposes the whole object of the

809
00:29:51,440 --> 00:29:53,760
of the user of the driver so this is a

810
00:29:53,760 --> 00:29:56,640
way to get pii like the full name the

811
00:29:56,640 --> 00:29:59,039
last login and even there is a possible

812
00:29:59,039 --> 00:30:01,120
token this is a full account takeover

813
00:30:01,120 --> 00:30:03,120
and this is based on a real example so

814
00:30:03,120 --> 00:30:04,720
this is like the mindset i know it might

815
00:30:04,720 --> 00:30:06,240
be a bit complex but this is the mindset

816
00:30:06,240 --> 00:30:07,919
that is required to find this type of

817
00:30:07,919 --> 00:30:09,840
vulnerability we need to find all the

818
00:30:09,840 --> 00:30:11,840
endpoints to expose the resource that

819
00:30:11,840 --> 00:30:14,080
you potentially want to to exploit or

820
00:30:14,080 --> 00:30:17,039
you want to find excessive data exposure

821
00:30:17,039 --> 00:30:18,240
so it's more about finding more

822
00:30:18,240 --> 00:30:19,679
endpoints than like you know sending

823
00:30:19,679 --> 00:30:22,919
different payloads

824
00:30:28,080 --> 00:30:29,120
um

825
00:30:29,120 --> 00:30:31,760
so let's talk about api predictability

826
00:30:31,760 --> 00:30:33,520
apis are very predictable and we can

827
00:30:33,520 --> 00:30:36,559
leverage this fact as pentesters

828
00:30:36,559 --> 00:30:37,840
in order to

829
00:30:37,840 --> 00:30:40,399
to do interesting stuff

830
00:30:40,399 --> 00:30:42,000
the first one how can we leverage the

831
00:30:42,000 --> 00:30:43,840
predictable nature of rest apis to find

832
00:30:43,840 --> 00:30:45,440
admin endpoints

833
00:30:45,440 --> 00:30:46,240
so

834
00:30:46,240 --> 00:30:48,320
in the case of traditional applications

835
00:30:48,320 --> 00:30:49,520
it was very

836
00:30:49,520 --> 00:30:51,919
hard to find admin endpoints why because

837
00:30:51,919 --> 00:30:54,159
you had to guess all this uh

838
00:30:54,159 --> 00:30:56,159
you know endpoint of slash app slash

839
00:30:56,159 --> 00:30:58,399
admin panel slash user management.spx

840
00:30:58,399 --> 00:31:00,000
and you need to mention the action and

841
00:31:00,000 --> 00:31:01,519
the user id

842
00:31:01,519 --> 00:31:02,799
and this is an endpoint that exposed

843
00:31:02,799 --> 00:31:05,279
only to admins even if the developers

844
00:31:05,279 --> 00:31:07,760
did not check that your user belongs to

845
00:31:07,760 --> 00:31:09,679
the admin group it would be hard for you

846
00:31:09,679 --> 00:31:12,640
as a pentester to find the endpoint

847
00:31:12,640 --> 00:31:15,519
fortunately in apis it becomes much more

848
00:31:15,519 --> 00:31:18,320
simple apis are very clear and many

849
00:31:18,320 --> 00:31:19,440
times

850
00:31:19,440 --> 00:31:21,440
if you want to find admin endpoints you

851
00:31:21,440 --> 00:31:24,080
can just change the hp method so let's

852
00:31:24,080 --> 00:31:25,519
say that you use the app

853
00:31:25,519 --> 00:31:27,600
as a regular user and you see an api

854
00:31:27,600 --> 00:31:31,039
call to get slash api user user id you

855
00:31:31,039 --> 00:31:32,880
just change the

856
00:31:32,880 --> 00:31:35,360
get to delete and you find an admin

857
00:31:35,360 --> 00:31:37,200
endpoint to delete the user so you found

858
00:31:37,200 --> 00:31:38,960
the path to the endpoint and in many

859
00:31:38,960 --> 00:31:40,880
cases developers don't really validate

860
00:31:40,880 --> 00:31:42,399
that you belong to the admin group and

861
00:31:42,399 --> 00:31:45,279
you can access admin functions

862
00:31:45,279 --> 00:31:46,640
how can we leverage the predictable

863
00:31:46,640 --> 00:31:48,720
nature of rest apis to find hidden

864
00:31:48,720 --> 00:31:50,320
features so

865
00:31:50,320 --> 00:31:52,559
you know many times the api we spell

866
00:31:52,559 --> 00:31:53,519
secrets

867
00:31:53,519 --> 00:31:55,919
if you saw this api call this is some

868
00:31:55,919 --> 00:31:58,480
right sharing app this is uber and then

869
00:31:58,480 --> 00:32:01,120
the response contains payment option but

870
00:32:01,120 --> 00:32:02,960
you paid only one

871
00:32:02,960 --> 00:32:05,039
only using one credit card but as you

872
00:32:05,039 --> 00:32:08,080
can see the response contains the id of

873
00:32:08,080 --> 00:32:10,640
your credit card inside an array the

874
00:32:10,640 --> 00:32:12,799
first thing i would try to do if i saw

875
00:32:12,799 --> 00:32:15,919
this api response is to try to find the

876
00:32:15,919 --> 00:32:18,240
the payment splitting option because if

877
00:32:18,240 --> 00:32:19,840
there is an array in the response there

878
00:32:19,840 --> 00:32:21,200
is a reason for it there is probably

879
00:32:21,200 --> 00:32:24,159
some option to split the payment and it

880
00:32:24,159 --> 00:32:28,399
might be a very interesting feature

881
00:32:28,399 --> 00:32:30,640
one of the best things i can give you

882
00:32:30,640 --> 00:32:32,240
if you perform apprentice for

883
00:32:32,240 --> 00:32:34,960
applications especially apis

884
00:32:34,960 --> 00:32:37,519
don't focus on the main api endpoints if

885
00:32:37,519 --> 00:32:39,360
you have you know in facebook the main

886
00:32:39,360 --> 00:32:41,919
api endpoints would be to upload a photo

887
00:32:41,919 --> 00:32:43,840
or to leave a comment

888
00:32:43,840 --> 00:32:46,080
these endpoints probably the developers

889
00:32:46,080 --> 00:32:48,080
that wrote them probably invested more

890
00:32:48,080 --> 00:32:49,679
time thinking about security and

891
00:32:49,679 --> 00:32:51,679
probably they already had some like

892
00:32:51,679 --> 00:32:53,840
security assessment so your goal as a

893
00:32:53,840 --> 00:32:55,919
pentester is to find the most niche

894
00:32:55,919 --> 00:32:57,919
niche features for example if you have

895
00:32:57,919 --> 00:32:59,840
an option to add christmas greeting to

896
00:32:59,840 --> 00:33:01,120
your profile this is something that

897
00:33:01,120 --> 00:33:02,399
exposes only like you know for a couple

898
00:33:02,399 --> 00:33:04,799
of weeks during the year uh and nobody

899
00:33:04,799 --> 00:33:07,039
actually uses it so this might be this

900
00:33:07,039 --> 00:33:08,559
much more likely to be vulnerable to

901
00:33:08,559 --> 00:33:10,720
vulnerabilities than like the main

902
00:33:10,720 --> 00:33:13,039
endpoints or for example if you have an

903
00:33:13,039 --> 00:33:15,039
option to connect myspace account

904
00:33:15,039 --> 00:33:17,200
probably developers you know

905
00:33:17,200 --> 00:33:19,120
put less effort to secure this api

906
00:33:19,120 --> 00:33:20,960
endpoint because nobody uses myspace

907
00:33:20,960 --> 00:33:22,000
today

908
00:33:22,000 --> 00:33:23,039
and

909
00:33:23,039 --> 00:33:24,720
and the way to find this

910
00:33:24,720 --> 00:33:26,399
hidden endpoint so like the snitch at

911
00:33:26,399 --> 00:33:28,880
the end point is to look for urls in

912
00:33:28,880 --> 00:33:32,080
javascript apk and ipa files and also

913
00:33:32,080 --> 00:33:34,399
it's very important to dig deep into the

914
00:33:34,399 --> 00:33:36,399
ui

915
00:33:36,399 --> 00:33:38,640
in order to find all these features

916
00:33:38,640 --> 00:33:40,720
because every time you find like a new

917
00:33:40,720 --> 00:33:43,840
feature a new button that you know

918
00:33:43,840 --> 00:33:46,159
like it takes time to find this button

919
00:33:46,159 --> 00:33:47,679
behind the scenes there is an api an

920
00:33:47,679 --> 00:33:49,760
interesting api call it is triggered to

921
00:33:49,760 --> 00:33:52,080
a niche api endpoint

922
00:33:52,080 --> 00:33:53,519
how can you leverage the predictable

923
00:33:53,519 --> 00:33:55,919
nature of rest apis to find hidden

924
00:33:55,919 --> 00:33:57,279
versions

925
00:33:57,279 --> 00:33:58,240
uh

926
00:33:58,240 --> 00:34:00,640
so for example if you want to find sub

927
00:34:00,640 --> 00:34:03,200
api you can just take the api call to

928
00:34:03,200 --> 00:34:04,960
all trips with the content type of

929
00:34:04,960 --> 00:34:07,679
applications.json duplicate the api call

930
00:34:07,679 --> 00:34:10,079
and to change it to application

931
00:34:10,079 --> 00:34:13,679
xml and you might be able to find a soap

932
00:34:13,679 --> 00:34:14,719
api

933
00:34:14,719 --> 00:34:17,040
and many times if you have soap apis and

934
00:34:17,040 --> 00:34:19,760
rest apis in graphql don't assume that

935
00:34:19,760 --> 00:34:21,918
all these apis like different protocols

936
00:34:21,918 --> 00:34:23,760
they usually don't implement the same

937
00:34:23,760 --> 00:34:26,800
security mechanisms so even if you uh

938
00:34:26,800 --> 00:34:28,639
found rate limiting when it comes to

939
00:34:28,639 --> 00:34:31,280
rest apis probably the soap apis

940
00:34:31,280 --> 00:34:33,040
don't have it because it's different

941
00:34:33,040 --> 00:34:34,399
configuration and

942
00:34:34,399 --> 00:34:37,760
many times they're more exposed

943
00:34:37,760 --> 00:34:39,918
to find all the endpoints you just can

944
00:34:39,918 --> 00:34:43,599
change the v3 to v1 and might be able to

945
00:34:43,599 --> 00:34:46,719
find a different different endpoint

946
00:34:46,719 --> 00:34:48,639
this is pretty simple and but it's very

947
00:34:48,639 --> 00:34:50,320
helpful to expand attack surface this

948
00:34:50,320 --> 00:34:51,040
way

949
00:34:51,040 --> 00:34:53,119
you can find this presentation these

950
00:34:53,119 --> 00:34:55,040
slides i'll share with you

951
00:34:55,040 --> 00:34:56,399
um

952
00:34:56,399 --> 00:34:58,960
and a few more resources that might be

953
00:34:58,960 --> 00:35:00,960
helpful for you to perform a more

954
00:35:00,960 --> 00:35:03,440
successful pentax for apis is the host

955
00:35:03,440 --> 00:35:06,320
top 10 for apis and i also post a lot of

956
00:35:06,320 --> 00:35:09,040
tips on my personal twitter account and

957
00:35:09,040 --> 00:35:11,680
medium about api security

958
00:35:11,680 --> 00:35:14,079
um i hope you enjoyed the presentation

959
00:35:14,079 --> 00:35:15,440
and let me know if you have any

960
00:35:15,440 --> 00:35:17,599
questions also feel free to ping me on

961
00:35:17,599 --> 00:35:20,400
twitter and linkedin i'm always

962
00:35:20,400 --> 00:35:23,200
happy to discuss api security

963
00:35:23,200 --> 00:35:26,078
thank you guys

