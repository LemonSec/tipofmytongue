1
00:00:00,799 --> 00:00:03,520
my name is emmanuel and with me today is

2
00:00:03,520 --> 00:00:04,960
rohit

3
00:00:04,960 --> 00:00:07,040
over the past decade we have been in

4
00:00:07,040 --> 00:00:09,120
different roles from

5
00:00:09,120 --> 00:00:11,759
security research to pen testing to

6
00:00:11,759 --> 00:00:13,280
re-teaming

7
00:00:13,280 --> 00:00:17,199
and recently security engineering so

8
00:00:17,199 --> 00:00:19,439
the stuff that we'll be talking today is

9
00:00:19,439 --> 00:00:21,760
based on our experience and perspective

10
00:00:21,760 --> 00:00:24,800
from these different roles

11
00:00:26,720 --> 00:00:29,679
now container is a very broad topic

12
00:00:29,679 --> 00:00:31,920
there's so much to talk about and we

13
00:00:31,920 --> 00:00:35,600
can't possibly cover everything today

14
00:00:35,600 --> 00:00:36,960
instead what we are going to do is to

15
00:00:36,960 --> 00:00:39,520
focus on just the docker

16
00:00:39,520 --> 00:00:42,079
and the kubernetes environment

17
00:00:42,079 --> 00:00:44,800
we'll go through some common examples of

18
00:00:44,800 --> 00:00:46,559
vulnerabilities that we see

19
00:00:46,559 --> 00:00:48,960
from breaking out of these containers to

20
00:00:48,960 --> 00:00:50,960
lateral movement

21
00:00:50,960 --> 00:00:52,320
and today

22
00:00:52,320 --> 00:00:54,640
we would also be releasing a tool called

23
00:00:54,640 --> 00:00:57,440
the docker exploitation toolkit

24
00:00:57,440 --> 00:00:58,960
this is basically

25
00:00:58,960 --> 00:01:01,440
a collection of mini tools that we have

26
00:01:01,440 --> 00:01:03,359
created

27
00:01:03,359 --> 00:01:06,320
it follows the unix philosophy whereby

28
00:01:06,320 --> 00:01:07,680
each tool

29
00:01:07,680 --> 00:01:09,439
does just one thing

30
00:01:09,439 --> 00:01:13,080
but does it well

31
00:01:13,280 --> 00:01:14,320
now

32
00:01:14,320 --> 00:01:17,200
as a pen tester as a red teamer

33
00:01:17,200 --> 00:01:20,479
very often the first instance that you

34
00:01:20,479 --> 00:01:22,320
realize you are in a docuwise

35
00:01:22,320 --> 00:01:23,600
environment

36
00:01:23,600 --> 00:01:26,000
is when you actually gain remote code

37
00:01:26,000 --> 00:01:28,880
execution you compromise an application

38
00:01:28,880 --> 00:01:30,720
and you realize that hey

39
00:01:30,720 --> 00:01:33,759
you are in a restricted environment

40
00:01:33,759 --> 00:01:36,320
and the goal now is to actually break

41
00:01:36,320 --> 00:01:38,960
out and escape out of this restricted

42
00:01:38,960 --> 00:01:41,280
environment

43
00:01:41,280 --> 00:01:44,320
and as a pen tester as a red teamer

44
00:01:44,320 --> 00:01:46,240
it really makes our life easier when we

45
00:01:46,240 --> 00:01:48,479
realize that a container is running in

46
00:01:48,479 --> 00:01:51,439
privileged mode

47
00:01:52,240 --> 00:01:54,320
for those of you guys who have been

48
00:01:54,320 --> 00:01:56,960
dealing with docker for a while i'm sure

49
00:01:56,960 --> 00:01:58,960
you have seen people running docker

50
00:01:58,960 --> 00:02:01,680
containers with dash privilege

51
00:02:01,680 --> 00:02:03,040
or maybe like

52
00:02:03,040 --> 00:02:05,840
even you are guilty of this yourself

53
00:02:05,840 --> 00:02:06,960
um

54
00:02:06,960 --> 00:02:09,440
but what what is this what is this such

55
00:02:09,440 --> 00:02:12,239
privilege why is it bad

56
00:02:12,239 --> 00:02:13,599
to understand that

57
00:02:13,599 --> 00:02:15,440
you got to realize that when you run

58
00:02:15,440 --> 00:02:17,360
docker

59
00:02:17,360 --> 00:02:19,360
by default it comes with a whole bunch

60
00:02:19,360 --> 00:02:20,720
of restriction

61
00:02:20,720 --> 00:02:24,000
um there's restricted linux capabilities

62
00:02:24,000 --> 00:02:26,400
that set calm to filter and distribute

63
00:02:26,400 --> 00:02:27,520
seats call

64
00:02:27,520 --> 00:02:29,360
let's add armor to restrict mount

65
00:02:29,360 --> 00:02:32,480
operations and preventing right access

66
00:02:32,480 --> 00:02:35,280
to sensitive locations

67
00:02:35,280 --> 00:02:36,400
now

68
00:02:36,400 --> 00:02:38,800
all of this goes away when you run a

69
00:02:38,800 --> 00:02:42,560
container in privilege mode

70
00:02:43,440 --> 00:02:45,599
but as a developer

71
00:02:45,599 --> 00:02:47,920
what does it really mean right i mean we

72
00:02:47,920 --> 00:02:49,519
know that it's not too good from a

73
00:02:49,519 --> 00:02:51,519
security perspective but from a

74
00:02:51,519 --> 00:02:53,280
pragmatic perspective what does it

75
00:02:53,280 --> 00:02:56,080
really mean for me

76
00:02:56,879 --> 00:02:59,840
what this means is that the exploit the

77
00:02:59,840 --> 00:03:02,480
breakout of a privileged container can

78
00:03:02,480 --> 00:03:05,519
fit in a single tweet

79
00:03:05,519 --> 00:03:09,519
i'll let that sink in for a moment

80
00:03:09,680 --> 00:03:13,040
that's 140 characters to break out of a

81
00:03:13,040 --> 00:03:15,680
privileged container

82
00:03:15,680 --> 00:03:17,599
now this was initially disclosed by

83
00:03:17,599 --> 00:03:20,400
felix wilhelm i'm really smart guy

84
00:03:20,400 --> 00:03:24,000
and even though it's only 140 characters

85
00:03:24,000 --> 00:03:26,000
there's actually a lot of things that's

86
00:03:26,000 --> 00:03:28,080
happening behind the scene and i'm going

87
00:03:28,080 --> 00:03:31,879
to break it down for you

88
00:03:32,640 --> 00:03:34,560
the first step is to try and figure out

89
00:03:34,560 --> 00:03:37,360
a mapping between the file system in the

90
00:03:37,360 --> 00:03:39,680
container and the file system in the

91
00:03:39,680 --> 00:03:40,640
host

92
00:03:40,640 --> 00:03:42,080
say for example

93
00:03:42,080 --> 00:03:44,640
if within a container you create a file

94
00:03:44,640 --> 00:03:46,879
called exploit.ssh

95
00:03:46,879 --> 00:03:49,680
it is possible to reference this exact

96
00:03:49,680 --> 00:03:50,959
same file

97
00:03:50,959 --> 00:03:52,640
from the host itself

98
00:03:52,640 --> 00:03:54,319
but obviously the path from the host is

99
00:03:54,319 --> 00:03:55,920
going to be different because they are

100
00:03:55,920 --> 00:03:57,519
mounted differently

101
00:03:57,519 --> 00:03:59,200
so the first step is to actually try and

102
00:03:59,200 --> 00:04:00,720
figure out the mapping of the file

103
00:04:00,720 --> 00:04:02,799
system between the container and the

104
00:04:02,799 --> 00:04:05,200
host

105
00:04:06,159 --> 00:04:08,239
now the second step is to

106
00:04:08,239 --> 00:04:12,000
find c group with release agent

107
00:04:12,000 --> 00:04:14,799
c group or control groups are basically

108
00:04:14,799 --> 00:04:16,478
kernel features

109
00:04:16,478 --> 00:04:19,358
that enforces limits and constraints

110
00:04:19,358 --> 00:04:20,478
for example

111
00:04:20,478 --> 00:04:22,400
you can limit the memory

112
00:04:22,400 --> 00:04:26,000
using c group for a specific container

113
00:04:26,000 --> 00:04:28,320
right and the way to interact with this

114
00:04:28,320 --> 00:04:30,720
c group is through like a pseudo file

115
00:04:30,720 --> 00:04:32,400
system

116
00:04:32,400 --> 00:04:34,720
and within c group there's a special

117
00:04:34,720 --> 00:04:38,160
configuration called release agent

118
00:04:38,160 --> 00:04:41,120
this is basically a mechanism

119
00:04:41,120 --> 00:04:43,120
whereby it gets triggered when there's

120
00:04:43,120 --> 00:04:45,040
no more processors running in the c

121
00:04:45,040 --> 00:04:46,400
group

122
00:04:46,400 --> 00:04:48,320
um this is a feature that people use for

123
00:04:48,320 --> 00:04:51,199
cleanup or for monitoring or for alert

124
00:04:51,199 --> 00:04:52,880
so this step this second step is to

125
00:04:52,880 --> 00:04:54,639
figure out which are the c groups with a

126
00:04:54,639 --> 00:04:57,840
release agent available

127
00:04:59,199 --> 00:05:01,199
and now the third step is to actually

128
00:05:01,199 --> 00:05:03,919
configure the release agent to run the

129
00:05:03,919 --> 00:05:07,600
exploit.sh we created in step one

130
00:05:07,600 --> 00:05:10,080
the path for this file needs to be from

131
00:05:10,080 --> 00:05:12,400
the host point of view

132
00:05:12,400 --> 00:05:14,160
which is why we need to figure out the

133
00:05:14,160 --> 00:05:17,199
path mapping in step one

134
00:05:17,199 --> 00:05:19,039
now typically writing and configuring

135
00:05:19,039 --> 00:05:21,919
the release agent is not possible in a

136
00:05:21,919 --> 00:05:24,479
docker container because it is only is

137
00:05:24,479 --> 00:05:26,160
read only

138
00:05:26,160 --> 00:05:27,120
but

139
00:05:27,120 --> 00:05:29,600
in privilege mode this becomes read

140
00:05:29,600 --> 00:05:30,880
right

141
00:05:30,880 --> 00:05:32,880
so you can use that to configure it with

142
00:05:32,880 --> 00:05:35,360
his engine

143
00:05:36,400 --> 00:05:37,600
next

144
00:05:37,600 --> 00:05:39,840
the next step is to actually

145
00:05:39,840 --> 00:05:42,240
enable that release agent

146
00:05:42,240 --> 00:05:44,800
we are notified on release

147
00:05:44,800 --> 00:05:47,039
basically once you enable this it says

148
00:05:47,039 --> 00:05:49,039
that hey when there's no more processors

149
00:05:49,039 --> 00:05:51,759
running in that c group notify the

150
00:05:51,759 --> 00:05:53,280
release agent

151
00:05:53,280 --> 00:05:56,000
again typically you can't write to this

152
00:05:56,000 --> 00:05:58,240
but in a privileged container you get

153
00:05:58,240 --> 00:06:01,600
right capability for this

154
00:06:02,240 --> 00:06:04,479
and the final step is to actually tie

155
00:06:04,479 --> 00:06:06,720
all of this together

156
00:06:06,720 --> 00:06:08,800
first you start the process you add it

157
00:06:08,800 --> 00:06:11,919
to a child c group and immediately exits

158
00:06:11,919 --> 00:06:14,400
so now there's no process tied to that c

159
00:06:14,400 --> 00:06:15,360
group

160
00:06:15,360 --> 00:06:16,800
this

161
00:06:16,800 --> 00:06:18,720
triggers the

162
00:06:18,720 --> 00:06:20,400
release agent

163
00:06:20,400 --> 00:06:22,479
because notify on release is set to

164
00:06:22,479 --> 00:06:23,520
enable

165
00:06:23,520 --> 00:06:25,440
and once that release agent is triggered

166
00:06:25,440 --> 00:06:28,319
it runs your export dos sh

167
00:06:28,319 --> 00:06:30,400
and ladies and gentlemen

168
00:06:30,400 --> 00:06:31,919
this is how you break out of a

169
00:06:31,919 --> 00:06:36,719
privileged container in 140 characters

170
00:06:38,960 --> 00:06:41,520
so now you know that hey it's really

171
00:06:41,520 --> 00:06:43,440
easy and trivial to break out of a

172
00:06:43,440 --> 00:06:45,360
privileged container you gotta be

173
00:06:45,360 --> 00:06:46,800
wondering like

174
00:06:46,800 --> 00:06:50,160
who runs container in privilege mode

175
00:06:50,160 --> 00:06:50,960
right

176
00:06:50,960 --> 00:06:52,880
i mean this is actually more common than

177
00:06:52,880 --> 00:06:54,240
you think

178
00:06:54,240 --> 00:06:56,240
when you run a tool in containers say

179
00:06:56,240 --> 00:06:58,639
for example tcp dump and you want to use

180
00:06:58,639 --> 00:07:00,560
certain configuration

181
00:07:00,560 --> 00:07:02,319
some of these docker default

182
00:07:02,319 --> 00:07:04,319
restrictions actually stops you from

183
00:07:04,319 --> 00:07:05,759
doing that

184
00:07:05,759 --> 00:07:07,440
so the proper way of doing this is to

185
00:07:07,440 --> 00:07:09,039
figure out what are the linux

186
00:07:09,039 --> 00:07:11,120
capabilities that you need there's

187
00:07:11,120 --> 00:07:12,880
probably a little bit of trial and error

188
00:07:12,880 --> 00:07:14,080
here

189
00:07:14,080 --> 00:07:16,479
or you can just run your container in

190
00:07:16,479 --> 00:07:19,599
privilege mode and everything just works

191
00:07:19,599 --> 00:07:21,360
and humans tend to choose the path of

192
00:07:21,360 --> 00:07:24,479
least resistance right

193
00:07:25,759 --> 00:07:27,599
if you do a quick search on github

194
00:07:27,599 --> 00:07:31,120
you'll notice that there's about 140 000

195
00:07:31,120 --> 00:07:34,160
of containers running in privileged mode

196
00:07:34,160 --> 00:07:36,000
so that gives you a sense that hey this

197
00:07:36,000 --> 00:07:39,919
is not as uncommon as you think it is

198
00:07:41,759 --> 00:07:44,400
now the next misconfiguration of

199
00:07:44,400 --> 00:07:46,000
vulnerability that i want to talk about

200
00:07:46,000 --> 00:07:49,520
is regarding docker socket

201
00:07:49,520 --> 00:07:51,680
um docker socket when you install docker

202
00:07:51,680 --> 00:07:54,479
by default it creates this uh unique

203
00:07:54,479 --> 00:07:55,440
socket

204
00:07:55,440 --> 00:07:57,360
and this is the interface through which

205
00:07:57,360 --> 00:07:59,039
you talk and

206
00:07:59,039 --> 00:08:01,360
interact with the doctor daemon

207
00:08:01,360 --> 00:08:04,160
say on the cli you do a docker pool or

208
00:08:04,160 --> 00:08:06,720
docker run or docker start it talks to

209
00:08:06,720 --> 00:08:09,280
this unique socket

210
00:08:09,280 --> 00:08:12,800
and tell the dr damon what to do

211
00:08:12,800 --> 00:08:14,800
and the thing is that this doctor damon

212
00:08:14,800 --> 00:08:16,479
advances root

213
00:08:16,479 --> 00:08:19,360
so it is highly privileged which means

214
00:08:19,360 --> 00:08:20,400
that

215
00:08:20,400 --> 00:08:22,800
access to this docker socket needs to be

216
00:08:22,800 --> 00:08:25,800
restricted

217
00:08:26,400 --> 00:08:27,919
sometimes we see that

218
00:08:27,919 --> 00:08:30,560
people actually mount this docker socket

219
00:08:30,560 --> 00:08:32,479
within containers itself

220
00:08:32,479 --> 00:08:34,479
and this is bad because this means that

221
00:08:34,479 --> 00:08:36,479
reading the container you can now talk

222
00:08:36,479 --> 00:08:38,080
to the dr damon

223
00:08:38,080 --> 00:08:40,559
and ask it to do stuff right

224
00:08:40,559 --> 00:08:42,000
using this you can actually break out of

225
00:08:42,000 --> 00:08:44,399
the container or even like escalate your

226
00:08:44,399 --> 00:08:47,519
privileges between the holes itself

227
00:08:47,519 --> 00:08:49,760
and i'm just going to give a quick demo

228
00:08:49,760 --> 00:08:52,000
of a tool that we created

229
00:08:52,000 --> 00:08:53,839
to help to do this

230
00:08:53,839 --> 00:08:55,200
exploit

231
00:08:55,200 --> 00:08:57,440
easily

232
00:08:57,440 --> 00:09:00,959
and this tool is called houdini

233
00:09:01,440 --> 00:09:04,320
okay in this terminal

234
00:09:04,320 --> 00:09:06,839
we are inside a

235
00:09:06,839 --> 00:09:09,360
container and what we are doing now is

236
00:09:09,360 --> 00:09:13,760
that we are running the houdini tool

237
00:09:13,760 --> 00:09:15,920
and this tool it checks for

238
00:09:15,920 --> 00:09:17,920
a couple of different

239
00:09:17,920 --> 00:09:21,600
vulnerabilities or misconfiguration

240
00:09:21,600 --> 00:09:23,440
within

241
00:09:23,440 --> 00:09:24,160
the

242
00:09:24,160 --> 00:09:26,720
container itself

243
00:09:26,720 --> 00:09:28,240
and houdini

244
00:09:28,240 --> 00:09:30,640
doesn't try to assume that

245
00:09:30,640 --> 00:09:32,880
it has tools like curl and stuff like

246
00:09:32,880 --> 00:09:33,680
that

247
00:09:33,680 --> 00:09:35,760
because within the container very often

248
00:09:35,760 --> 00:09:38,320
you don't have access to

249
00:09:38,320 --> 00:09:41,360
tools that we take for granted

250
00:09:41,360 --> 00:09:43,519
and

251
00:09:43,519 --> 00:09:46,000
so what we do is that we bring in our

252
00:09:46,000 --> 00:09:47,839
own

253
00:09:47,839 --> 00:09:50,480
tools that is needed for the exploit uh

254
00:09:50,480 --> 00:09:53,120
whether whether is it busy box or is it

255
00:09:53,120 --> 00:09:54,640
like a

256
00:09:54,640 --> 00:09:55,839
drop bear

257
00:09:55,839 --> 00:09:57,440
so we don't make any assumption on the

258
00:09:57,440 --> 00:10:00,240
tools required or other tools that are

259
00:10:00,240 --> 00:10:04,800
actually contained within the container

260
00:10:04,800 --> 00:10:06,320
and in this case what we are doing is

261
00:10:06,320 --> 00:10:08,399
that we are going to exploit it

262
00:10:08,399 --> 00:10:10,399
by

263
00:10:10,399 --> 00:10:14,160
attacking the docker socket

264
00:10:14,240 --> 00:10:16,560
we use it to start the container

265
00:10:16,560 --> 00:10:19,440
mount the host file system

266
00:10:19,440 --> 00:10:20,560
copy

267
00:10:20,560 --> 00:10:22,480
the ssh key

268
00:10:22,480 --> 00:10:26,240
into the the host file system

269
00:10:26,240 --> 00:10:29,440
and then we should be able to ssh from

270
00:10:29,440 --> 00:10:33,839
the container into the whole system

271
00:10:53,279 --> 00:10:55,760
there we go

272
00:10:58,480 --> 00:10:59,360
okay

273
00:10:59,360 --> 00:11:01,680
and

274
00:11:01,680 --> 00:11:04,240
again if you do a quick search on github

275
00:11:04,240 --> 00:11:06,160
you will see that there's a whole bunch

276
00:11:06,160 --> 00:11:08,880
of there's like 30 000 instances whereby

277
00:11:08,880 --> 00:11:10,560
people are actually mounting docker

278
00:11:10,560 --> 00:11:12,800
socket so again this is not that

279
00:11:12,800 --> 00:11:15,800
uncommon

280
00:11:19,760 --> 00:11:22,160
now sometimes when you're on a security

281
00:11:22,160 --> 00:11:24,640
assessment and you find that hey you

282
00:11:24,640 --> 00:11:26,959
can't actually break out of a container

283
00:11:26,959 --> 00:11:29,360
and that's where lateral movement comes

284
00:11:29,360 --> 00:11:31,440
in really useful

285
00:11:31,440 --> 00:11:34,079
the next area i want to talk about is

286
00:11:34,079 --> 00:11:36,240
around docker registry

287
00:11:36,240 --> 00:11:37,680
in particular

288
00:11:37,680 --> 00:11:40,560
images within the docker registry

289
00:11:40,560 --> 00:11:42,720
or to be even more precise

290
00:11:42,720 --> 00:11:44,880
the file system layers

291
00:11:44,880 --> 00:11:45,680
in

292
00:11:45,680 --> 00:11:48,800
uh image itself

293
00:11:50,320 --> 00:11:52,320
when you run docker on the cli they do

294
00:11:52,320 --> 00:11:54,560
like a docker pool you notice like a

295
00:11:54,560 --> 00:11:57,120
whole bunch of hashes flying past the

296
00:11:57,120 --> 00:11:58,399
screen

297
00:11:58,399 --> 00:12:00,320
these are this is just the docker

298
00:12:00,320 --> 00:12:03,200
pulling all the file system layers

299
00:12:03,200 --> 00:12:06,560
to run the container

300
00:12:07,360 --> 00:12:09,519
now something to note is that docker

301
00:12:09,519 --> 00:12:12,880
uses a union based file system

302
00:12:12,880 --> 00:12:14,399
if you're running an older version of

303
00:12:14,399 --> 00:12:17,680
docker you're probably running au fs

304
00:12:17,680 --> 00:12:19,440
you're running a newer version probably

305
00:12:19,440 --> 00:12:21,360
you're running overlay fs

306
00:12:21,360 --> 00:12:23,839
but the underlying concept is the same

307
00:12:23,839 --> 00:12:26,240
the file system is based on layers

308
00:12:26,240 --> 00:12:28,240
you start with a base layer

309
00:12:28,240 --> 00:12:30,000
say you install a

310
00:12:30,000 --> 00:12:32,000
software it creates a new layer on top

311
00:12:32,000 --> 00:12:34,880
of it and then you might configure set

312
00:12:34,880 --> 00:12:37,360
certain configurations set certain

313
00:12:37,360 --> 00:12:40,399
secrets it creates another layer

314
00:12:40,399 --> 00:12:42,320
have you guys wondered like what happens

315
00:12:42,320 --> 00:12:45,040
when you try to delete the file

316
00:12:45,040 --> 00:12:47,600
so in the union file system when you try

317
00:12:47,600 --> 00:12:49,519
to delete the file

318
00:12:49,519 --> 00:12:51,760
it doesn't actually deletes the file

319
00:12:51,760 --> 00:12:53,279
itself

320
00:12:53,279 --> 00:12:55,120
instead what happens is that it creates

321
00:12:55,120 --> 00:12:56,800
a white top layer

322
00:12:56,800 --> 00:12:59,600
that basically hides the file

323
00:12:59,600 --> 00:13:00,399
and

324
00:13:00,399 --> 00:13:02,480
you start building your layers upon

325
00:13:02,480 --> 00:13:03,680
layers

326
00:13:03,680 --> 00:13:04,880
based on that

327
00:13:04,880 --> 00:13:06,959
so the file itself is actually never

328
00:13:06,959 --> 00:13:09,839
ever deleted

329
00:13:10,959 --> 00:13:12,480
and

330
00:13:12,480 --> 00:13:14,160
as part of our research we created a

331
00:13:14,160 --> 00:13:16,720
tool called scavenger

332
00:13:16,720 --> 00:13:18,959
what it does is that it analyze all the

333
00:13:18,959 --> 00:13:21,120
file system layers in a

334
00:13:21,120 --> 00:13:22,560
image

335
00:13:22,560 --> 00:13:25,279
and it looks for whiteout layers

336
00:13:25,279 --> 00:13:26,959
and the premise is that hey if you are

337
00:13:26,959 --> 00:13:28,639
deleting something

338
00:13:28,639 --> 00:13:31,279
maybe you are hiding something as well

339
00:13:31,279 --> 00:13:33,040
so it goes through all these file system

340
00:13:33,040 --> 00:13:36,720
layers identify the whiteout

341
00:13:36,720 --> 00:13:40,240
and then extract the deleted file from

342
00:13:40,240 --> 00:13:44,399
one of the underlying layers

343
00:13:44,560 --> 00:13:47,600
so this particular attack surface area

344
00:13:47,600 --> 00:13:50,079
i think a lot of security professionals

345
00:13:50,079 --> 00:13:51,600
probably know about this at the back of

346
00:13:51,600 --> 00:13:53,040
their mind

347
00:13:53,040 --> 00:13:54,880
but as far as i know

348
00:13:54,880 --> 00:13:56,399
we don't think a lot of people are

349
00:13:56,399 --> 00:13:58,880
actually talking about this or even

350
00:13:58,880 --> 00:14:01,600
actively searching for these vitals

351
00:14:01,600 --> 00:14:02,720
so

352
00:14:02,720 --> 00:14:04,160
this is a tool that i think will be

353
00:14:04,160 --> 00:14:07,600
helpful on your assessment

354
00:14:07,920 --> 00:14:11,120
so let me give a quick demo of this tool

355
00:14:11,120 --> 00:14:14,160
what you are seeing here is scavenger

356
00:14:14,160 --> 00:14:16,880
which is part of the docker exploitation

357
00:14:16,880 --> 00:14:18,800
toolkit

358
00:14:18,800 --> 00:14:20,959
and the way it works is that you point

359
00:14:20,959 --> 00:14:22,800
it at the registry

360
00:14:22,800 --> 00:14:25,279
tell it to pull an image

361
00:14:25,279 --> 00:14:27,760
let's say ubuntu right

362
00:14:27,760 --> 00:14:31,760
and by default it will pull the latest

363
00:14:31,760 --> 00:14:34,079
image from the repo

364
00:14:34,079 --> 00:14:36,079
in this case let's give it an older

365
00:14:36,079 --> 00:14:39,199
version of ubuntu

366
00:14:39,440 --> 00:14:41,279
and basically what it's trying to do is

367
00:14:41,279 --> 00:14:42,480
that

368
00:14:42,480 --> 00:14:44,959
it would get the image for

369
00:14:44,959 --> 00:14:46,480
this version

370
00:14:46,480 --> 00:14:49,440
analyze the file system layers

371
00:14:49,440 --> 00:14:52,240
and point out if there's any deleted

372
00:14:52,240 --> 00:14:54,639
files

373
00:14:57,120 --> 00:14:59,120
okay so you can see here

374
00:14:59,120 --> 00:15:00,000
each

375
00:15:00,000 --> 00:15:04,480
of this cr256 hash represents one layer

376
00:15:04,480 --> 00:15:06,160
in the file system

377
00:15:06,160 --> 00:15:09,600
so there's a total of five layers it has

378
00:15:09,600 --> 00:15:11,040
analyzed

379
00:15:11,040 --> 00:15:13,040
and you will see that

380
00:15:13,040 --> 00:15:15,279
for this particular layer there's a

381
00:15:15,279 --> 00:15:18,959
whole bunch of files that were deleted

382
00:15:18,959 --> 00:15:19,920
or

383
00:15:19,920 --> 00:15:22,320
white out

384
00:15:22,320 --> 00:15:24,079
and there's some smart to this tool

385
00:15:24,079 --> 00:15:26,639
whereby it tries to give you some

386
00:15:26,639 --> 00:15:28,079
indication

387
00:15:28,079 --> 00:15:29,600
on potentially

388
00:15:29,600 --> 00:15:31,120
sensitive files

389
00:15:31,120 --> 00:15:32,720
so in this case there's a warning sign

390
00:15:32,720 --> 00:15:35,279
that say hey take a look at this gpg

391
00:15:35,279 --> 00:15:37,519
file perhaps there's something sensitive

392
00:15:37,519 --> 00:15:38,839
on

393
00:15:38,839 --> 00:15:42,320
this by clicking on the link uh what it

394
00:15:42,320 --> 00:15:45,040
does is that it tries to extract the

395
00:15:45,040 --> 00:15:48,079
file from one of the layers

396
00:15:48,079 --> 00:15:49,199
underneath

397
00:15:49,199 --> 00:15:51,120
the whiteout

398
00:15:51,120 --> 00:15:53,279
and you can take you can see that

399
00:15:53,279 --> 00:15:56,079
in this case it extracted the

400
00:15:56,079 --> 00:15:58,720
pgp signature file

401
00:15:58,720 --> 00:16:00,800
for this particular instance it's not

402
00:16:00,800 --> 00:16:02,399
sensitive

403
00:16:02,399 --> 00:16:05,040
but it does give you an indication as to

404
00:16:05,040 --> 00:16:06,639
what the tool does

405
00:16:06,639 --> 00:16:08,560
how it actually analyze the different

406
00:16:08,560 --> 00:16:11,279
file system layers and extract those

407
00:16:11,279 --> 00:16:13,680
files

408
00:16:15,279 --> 00:16:17,839
now let me show you some actual files we

409
00:16:17,839 --> 00:16:20,240
have grabbed from images public images

410
00:16:20,240 --> 00:16:21,759
on docker hub

411
00:16:21,759 --> 00:16:23,360
they range from

412
00:16:23,360 --> 00:16:26,480
the more mundane license keys

413
00:16:26,480 --> 00:16:27,759
to

414
00:16:27,759 --> 00:16:30,639
private ssh keys

415
00:16:30,639 --> 00:16:33,519
so these are actual files you grab from

416
00:16:33,519 --> 00:16:35,680
images on docker hub

417
00:16:35,680 --> 00:16:37,920
this has been deleted by using scavenger

418
00:16:37,920 --> 00:16:40,320
we could extract them out

419
00:16:40,320 --> 00:16:42,160
and now i'm going to hand over to rohit

420
00:16:42,160 --> 00:16:44,079
and he's going to cover more about

421
00:16:44,079 --> 00:16:46,079
lateral movement from the kubernetes

422
00:16:46,079 --> 00:16:47,360
perspective

423
00:16:47,360 --> 00:16:50,759
over to you

424
00:16:51,360 --> 00:16:53,680
all right thanks emmanuel so after

425
00:16:53,680 --> 00:16:56,480
peeking into the container uh breakouts

426
00:16:56,480 --> 00:16:58,720
uh let's walk through a strategy by

427
00:16:58,720 --> 00:17:01,199
which a red teamer or pentesters can

428
00:17:01,199 --> 00:17:03,440
actually perform lateral movements or

429
00:17:03,440 --> 00:17:05,760
and then eventually maintain persistence

430
00:17:05,760 --> 00:17:07,679
in a dockerized production grid

431
00:17:07,679 --> 00:17:08,720
environment

432
00:17:08,720 --> 00:17:11,119
ah now in case of a production grid

433
00:17:11,119 --> 00:17:14,000
environment you won't see isolated

434
00:17:14,000 --> 00:17:16,400
docker images but you will always need

435
00:17:16,400 --> 00:17:18,959
some kind of orchestration systems for

436
00:17:18,959 --> 00:17:21,520
that and that's typically needed because

437
00:17:21,520 --> 00:17:23,280
you have hundreds of this docker

438
00:17:23,280 --> 00:17:25,199
containers to manage

439
00:17:25,199 --> 00:17:27,760
now in all these orchestration systems

440
00:17:27,760 --> 00:17:29,919
there are a bunch of them and in this

441
00:17:29,919 --> 00:17:31,919
talk we are going to focus mainly on

442
00:17:31,919 --> 00:17:35,039
kubernetes based uh attacks and the ways

443
00:17:35,039 --> 00:17:37,520
to actually defend it uh for that

444
00:17:37,520 --> 00:17:39,919
so the kubernetes uh provides a way to

445
00:17:39,919 --> 00:17:43,280
manage the cluster of this containers

446
00:17:43,280 --> 00:17:46,320
so it provides an easy to use apis where

447
00:17:46,320 --> 00:17:48,320
you can scale up scale down the

448
00:17:48,320 --> 00:17:50,480
different parts of the containers it

449
00:17:50,480 --> 00:17:52,000
also provides the self-healing

450
00:17:52,000 --> 00:17:54,320
capabilities and there is a good overall

451
00:17:54,320 --> 00:17:57,679
community support around kubernetes so

452
00:17:57,679 --> 00:17:59,440
as a quick refreshers because this

453
00:17:59,440 --> 00:18:01,760
terminologies will come time to time in

454
00:18:01,760 --> 00:18:02,960
our discussion

455
00:18:02,960 --> 00:18:05,200
a few few terminologies specific to

456
00:18:05,200 --> 00:18:06,400
kubernetes

457
00:18:06,400 --> 00:18:09,120
so the kubernetes has a concept of nodes

458
00:18:09,120 --> 00:18:10,960
so the nodes are nothing but

459
00:18:10,960 --> 00:18:13,600
hosts could be the physical hosts or

460
00:18:13,600 --> 00:18:16,240
virtual machines on which your

461
00:18:16,240 --> 00:18:18,320
containerized environment is uh

462
00:18:18,320 --> 00:18:20,799
executing and then it also introduces a

463
00:18:20,799 --> 00:18:22,720
one more layer of abstraction called as

464
00:18:22,720 --> 00:18:26,240
parse so the parts provide a way to run

465
00:18:26,240 --> 00:18:28,640
one or more containers that provide a

466
00:18:28,640 --> 00:18:31,039
similar kind of functionality so this

467
00:18:31,039 --> 00:18:33,600
parts are then scheduled to run on nodes

468
00:18:33,600 --> 00:18:34,960
that is on the

469
00:18:34,960 --> 00:18:38,400
host systems a few few just a few minor

470
00:18:38,400 --> 00:18:40,320
details uh to remember

471
00:18:40,320 --> 00:18:42,799
ah now all this overall kubernetes based

472
00:18:42,799 --> 00:18:44,720
environment is going to add a lot more

473
00:18:44,720 --> 00:18:47,200
burden in your already expanded threat

474
00:18:47,200 --> 00:18:49,280
service because as you have seen in

475
00:18:49,280 --> 00:18:51,280
emmanuel stock there are a bunch of ways

476
00:18:51,280 --> 00:18:53,600
in which you can break out the container

477
00:18:53,600 --> 00:18:55,919
and you you already have to worry about

478
00:18:55,919 --> 00:18:58,320
lot more differences in those

479
00:18:58,320 --> 00:19:00,080
things are going to get more complicated

480
00:19:00,080 --> 00:19:02,320
when you are in a kubernetes production

481
00:19:02,320 --> 00:19:04,720
grid environment because there is a now

482
00:19:04,720 --> 00:19:06,960
authentication and authorization control

483
00:19:06,960 --> 00:19:09,039
that you have to manage uh the way in

484
00:19:09,039 --> 00:19:10,720
which these parts communicate with each

485
00:19:10,720 --> 00:19:13,440
other communicate with their apis and

486
00:19:13,440 --> 00:19:14,880
all of that

487
00:19:14,880 --> 00:19:17,280
kubernetes also has a control plane api

488
00:19:17,280 --> 00:19:19,760
server which exposes the bunch of api

489
00:19:19,760 --> 00:19:21,679
and these are powerful apis because they

490
00:19:21,679 --> 00:19:23,679
provide a way to manage the entire

491
00:19:23,679 --> 00:19:26,160
cluster you need to uh worry about the

492
00:19:26,160 --> 00:19:28,000
security of them

493
00:19:28,000 --> 00:19:31,200
and then as usual like many frameworks

494
00:19:31,200 --> 00:19:34,000
the defaults are often insecure

495
00:19:34,000 --> 00:19:36,080
uh in general and then it is your

496
00:19:36,080 --> 00:19:37,440
responsibility as a security

497
00:19:37,440 --> 00:19:38,640
professional

498
00:19:38,640 --> 00:19:41,039
to carefully threat model it and then

499
00:19:41,039 --> 00:19:43,280
provide a way to actually defend against

500
00:19:43,280 --> 00:19:46,559
the different attacks for that

501
00:19:46,559 --> 00:19:48,799
so

502
00:19:50,240 --> 00:19:53,200
let's let's walk through uh a technique

503
00:19:53,200 --> 00:19:55,760
uh to perform the lateral movement and

504
00:19:55,760 --> 00:19:58,080
then eventually maintain the persistence

505
00:19:58,080 --> 00:20:00,240
uh note uh now note that though this

506
00:20:00,240 --> 00:20:02,880
technique is specific to kubernetes uh

507
00:20:02,880 --> 00:20:04,400
you can pretty much apply the same

508
00:20:04,400 --> 00:20:06,880
principles for any of the

509
00:20:06,880 --> 00:20:08,320
production grade

510
00:20:08,320 --> 00:20:10,720
orchestrated orchestration framework be

511
00:20:10,720 --> 00:20:13,039
it like a docker swarm or any of the

512
00:20:13,039 --> 00:20:15,120
cloud native environment so let us

513
00:20:15,120 --> 00:20:18,159
assume a typical organization set up

514
00:20:18,159 --> 00:20:20,400
where you have the corp environment

515
00:20:20,400 --> 00:20:22,320
and to add more complications let's

516
00:20:22,320 --> 00:20:24,080
consider it to be the segmented

517
00:20:24,080 --> 00:20:26,240
environment not the flat network so now

518
00:20:26,240 --> 00:20:28,159
you have the corp environment there is a

519
00:20:28,159 --> 00:20:30,720
firewall and then the organization is

520
00:20:30,720 --> 00:20:32,400
using let's say the kubernetes based

521
00:20:32,400 --> 00:20:34,400
production environment to the right side

522
00:20:34,400 --> 00:20:36,720
and there is a firewall in between

523
00:20:36,720 --> 00:20:40,159
now as as as we just saw the

524
00:20:40,159 --> 00:20:42,320
inner kubernetes you have this force

525
00:20:42,320 --> 00:20:44,880
that runs the bunch of the containers

526
00:20:44,880 --> 00:20:46,880
now in order to manage the life cycle of

527
00:20:46,880 --> 00:20:48,960
these containers you should have some

528
00:20:48,960 --> 00:20:52,000
kind of a docker registry and

529
00:20:52,000 --> 00:20:53,840
security savvy organizations can

530
00:20:53,840 --> 00:20:55,520
actually have a some internal docker

531
00:20:55,520 --> 00:20:57,520
registry or they could use different uh

532
00:20:57,520 --> 00:20:59,919
cloud services uh for that

533
00:20:59,919 --> 00:21:02,240
so if they if an attacker is already in

534
00:21:02,240 --> 00:21:04,720
the corp environment maybe by social

535
00:21:04,720 --> 00:21:07,120
engineering some of the employees or

536
00:21:07,120 --> 00:21:09,039
my by maybe exposing some of the

537
00:21:09,039 --> 00:21:10,559
services which is exposed to the

538
00:21:10,559 --> 00:21:13,039
internet unpatched not none of that is

539
00:21:13,039 --> 00:21:15,200
actually the unreasonable scenario so

540
00:21:15,200 --> 00:21:17,600
once attacker actually gets foothold in

541
00:21:17,600 --> 00:21:20,559
corp environment uh in order to promote

542
00:21:20,559 --> 00:21:22,480
themselves from corbin environment to

543
00:21:22,480 --> 00:21:24,720
the fraud they can

544
00:21:24,720 --> 00:21:29,679
use this docker registry for that so

545
00:21:29,679 --> 00:21:31,919
attacker has a different choices at this

546
00:21:31,919 --> 00:21:34,320
uh at this time first they can use uh

547
00:21:34,320 --> 00:21:36,400
some of the attacks uh that emmanuel was

548
00:21:36,400 --> 00:21:39,520
demonstrating like the file overlays uh

549
00:21:39,520 --> 00:21:41,840
in the operating systems uh and then

550
00:21:41,840 --> 00:21:44,159
using some of the deleted docker images

551
00:21:44,159 --> 00:21:47,120
that might have some sensitive details

552
00:21:47,120 --> 00:21:49,360
might be some vulnerable docker images

553
00:21:49,360 --> 00:21:51,600
or they can they upload the docker image

554
00:21:51,600 --> 00:21:53,200
of their own choice

555
00:21:53,200 --> 00:21:55,760
so any of this technique let's say that

556
00:21:55,760 --> 00:21:58,559
attacker is able to upload the docker

557
00:21:58,559 --> 00:22:00,240
image of their choice

558
00:22:00,240 --> 00:22:02,320
and let's let's add a few a few things

559
00:22:02,320 --> 00:22:03,360
here like

560
00:22:03,360 --> 00:22:06,080
they want to run themself as a root but

561
00:22:06,080 --> 00:22:07,679
again remember that it's actually the

562
00:22:07,679 --> 00:22:10,640
root in a containerized system

563
00:22:10,640 --> 00:22:11,440
and

564
00:22:11,440 --> 00:22:13,840
that docker image might be vulnerable to

565
00:22:13,840 --> 00:22:16,000
any of the attack like the rc or any of

566
00:22:16,000 --> 00:22:18,320
the attack that you can think of and

567
00:22:18,320 --> 00:22:20,640
then attacker can wait and uh

568
00:22:20,640 --> 00:22:22,240
hope that their image is actually

569
00:22:22,240 --> 00:22:24,320
getting deployed using kubernetes in the

570
00:22:24,320 --> 00:22:26,320
production environment so this is how

571
00:22:26,320 --> 00:22:28,720
they finally got their foothold from a

572
00:22:28,720 --> 00:22:30,400
corp environment to the broad

573
00:22:30,400 --> 00:22:33,280
environment so by by foothold i mean

574
00:22:33,280 --> 00:22:35,760
they just have one container running in

575
00:22:35,760 --> 00:22:38,000
the production environment may be

576
00:22:38,000 --> 00:22:41,840
running as a route for that matter

577
00:22:42,400 --> 00:22:44,799
sure you are your root

578
00:22:44,799 --> 00:22:47,280
but you are in the container for that so

579
00:22:47,280 --> 00:22:49,360
it's like a king in the chain what you

580
00:22:49,360 --> 00:22:51,039
can do at that point because now you

581
00:22:51,039 --> 00:22:52,960
have a foothold in the production

582
00:22:52,960 --> 00:22:54,960
environment you can do some traditional

583
00:22:54,960 --> 00:22:57,600
things like you can do the network scan

584
00:22:57,600 --> 00:22:59,840
now one thing to remember here is uh the

585
00:22:59,840 --> 00:23:02,240
kubernetes is the orchestration system

586
00:23:02,240 --> 00:23:05,679
traditional ways of performing a network

587
00:23:05,679 --> 00:23:08,159
assessment and then having a enforced

588
00:23:08,159 --> 00:23:10,080
network accounts is still your

589
00:23:10,080 --> 00:23:12,159
responsibility kubernetes is not going

590
00:23:12,159 --> 00:23:15,120
to provide you it by default in fact

591
00:23:15,120 --> 00:23:16,960
bunch of the parts that are deployed in

592
00:23:16,960 --> 00:23:19,120
kubernetes environments will be able to

593
00:23:19,120 --> 00:23:21,200
freely talk to each other so the network

594
00:23:21,200 --> 00:23:22,799
scan is something an attacker is going

595
00:23:22,799 --> 00:23:24,960
to try definitely whenever they have

596
00:23:24,960 --> 00:23:27,840
some foothold in broad environment

597
00:23:27,840 --> 00:23:29,919
they can try container breakouts uh

598
00:23:29,919 --> 00:23:32,400
remember the containers are now pushed

599
00:23:32,400 --> 00:23:34,799
to the par which is a one more

600
00:23:34,799 --> 00:23:37,760
abstraction layer in kubernetes so the

601
00:23:37,760 --> 00:23:39,840
three techniques that uh

602
00:23:39,840 --> 00:23:41,840
emanuel discussed for the container

603
00:23:41,840 --> 00:23:43,520
breakouts all of them are still

604
00:23:43,520 --> 00:23:46,080
applicable ah in this environment so

605
00:23:46,080 --> 00:23:48,960
those can be uh tried out uh in this in

606
00:23:48,960 --> 00:23:51,120
in this situation

607
00:23:51,120 --> 00:23:52,960
then then they can actually try to

608
00:23:52,960 --> 00:23:55,200
compromise the api server so the

609
00:23:55,200 --> 00:23:58,880
kubernetes provides a control api server

610
00:23:58,880 --> 00:24:01,200
which has the bunch of the plugins

611
00:24:01,200 --> 00:24:03,279
it has its own marketplace in which

612
00:24:03,279 --> 00:24:05,520
people can push the different plugins

613
00:24:05,520 --> 00:24:07,279
there might be vulnerabilities in that

614
00:24:07,279 --> 00:24:09,840
it might be unpatched it might be just

615
00:24:09,840 --> 00:24:10,880
left uh

616
00:24:10,880 --> 00:24:13,360
insecure for that so compromising the

617
00:24:13,360 --> 00:24:15,840
api server is still an option

618
00:24:15,840 --> 00:24:18,240
but in all these things that you can see

619
00:24:18,240 --> 00:24:20,880
uh it's it's really not helping you much

620
00:24:20,880 --> 00:24:23,279
as a lateral movement or to maintain

621
00:24:23,279 --> 00:24:24,880
your foothold or to maintain your

622
00:24:24,880 --> 00:24:26,640
persistence within the production

623
00:24:26,640 --> 00:24:28,960
environment though these techniques are

624
00:24:28,960 --> 00:24:31,919
somewhat easier uh it's not getting the

625
00:24:31,919 --> 00:24:34,559
complete fruit for an attacker for that

626
00:24:34,559 --> 00:24:35,679
so

627
00:24:35,679 --> 00:24:38,240
at the last resort what they can try to

628
00:24:38,240 --> 00:24:40,640
do is they can then try to evade the uh

629
00:24:40,640 --> 00:24:44,080
the very basic uh security uh security

630
00:24:44,080 --> 00:24:46,000
uh defense that has been added that is

631
00:24:46,000 --> 00:24:48,799
to evade the role based access controls

632
00:24:48,799 --> 00:24:50,559
and it could be in the form of service

633
00:24:50,559 --> 00:24:54,240
tokens that they can use

634
00:24:54,880 --> 00:24:58,400
so what are these service tokens ah so

635
00:24:58,400 --> 00:25:01,679
this parts as uh we were discussing is

636
00:25:01,679 --> 00:25:04,320
the abstraction layer that kubernetes uh

637
00:25:04,320 --> 00:25:06,799
provides on which your containerized and

638
00:25:06,799 --> 00:25:07,679
uh

639
00:25:07,679 --> 00:25:09,120
images are running

640
00:25:09,120 --> 00:25:12,159
now in order for this parts to talk to

641
00:25:12,159 --> 00:25:14,240
the control api as well as to other

642
00:25:14,240 --> 00:25:16,480
parts they need to have something called

643
00:25:16,480 --> 00:25:18,640
as a barrel token in a kubernetes

644
00:25:18,640 --> 00:25:21,039
environment its service tokens and this

645
00:25:21,039 --> 00:25:23,279
service token is usually found at this

646
00:25:23,279 --> 00:25:25,919
location which is in the in the screen

647
00:25:25,919 --> 00:25:28,720
it's it's standard across all the uh all

648
00:25:28,720 --> 00:25:31,039
all the ports uh for that

649
00:25:31,039 --> 00:25:33,440
now the pars just like a linux they are

650
00:25:33,440 --> 00:25:35,440
associated with the name space

651
00:25:35,440 --> 00:25:37,600
and this service tokens are associated

652
00:25:37,600 --> 00:25:39,840
with the pod in turn they are also

653
00:25:39,840 --> 00:25:42,400
associated with namespace

654
00:25:42,400 --> 00:25:44,880
now what we have seen in general and uh

655
00:25:44,880 --> 00:25:46,320
overall

656
00:25:46,320 --> 00:25:48,320
overall issue that could happen uh here

657
00:25:48,320 --> 00:25:51,520
is this custom name spaces can create a

658
00:25:51,520 --> 00:25:54,559
custom service tokens and often a time

659
00:25:54,559 --> 00:25:57,600
your devops pipeline or overall people

660
00:25:57,600 --> 00:26:01,279
want to be more faster deployment this

661
00:26:01,279 --> 00:26:03,200
custom service tokens might have more

662
00:26:03,200 --> 00:26:05,679
permissive role now there are a lot of

663
00:26:05,679 --> 00:26:08,000
devastating role that you can assign to

664
00:26:08,000 --> 00:26:10,880
the service tokens like creating a pod

665
00:26:10,880 --> 00:26:13,760
updating a pod or deleting a pod

666
00:26:13,760 --> 00:26:14,720
meaning

667
00:26:14,720 --> 00:26:17,279
whoever gets hold of this service token

668
00:26:17,279 --> 00:26:18,799
that pod

669
00:26:18,799 --> 00:26:21,279
or that adversary can now invoke the

670
00:26:21,279 --> 00:26:23,039
control api

671
00:26:23,039 --> 00:26:25,120
to perform those actions all those

672
00:26:25,120 --> 00:26:28,400
authorization associated with those um

673
00:26:28,400 --> 00:26:30,799
service tokens for that so the create

674
00:26:30,799 --> 00:26:32,960
body is like one of the

675
00:26:32,960 --> 00:26:35,760
sensitive permission in that case now

676
00:26:35,760 --> 00:26:38,400
this service tokens are also mountable

677
00:26:38,400 --> 00:26:40,799
meaning if your pod has a

678
00:26:40,799 --> 00:26:42,880
specific service token and if you are

679
00:26:42,880 --> 00:26:45,039
considering a security from the

680
00:26:45,039 --> 00:26:46,159
beginning

681
00:26:46,159 --> 00:26:47,919
and then now you want to share this

682
00:26:47,919 --> 00:26:50,320
service token across a different parts

683
00:26:50,320 --> 00:26:52,720
in the same name space you can make them

684
00:26:52,720 --> 00:26:55,120
as a mountable service token so that the

685
00:26:55,120 --> 00:26:57,200
other parts when they are scheduled can

686
00:26:57,200 --> 00:26:59,440
just mount this service token and then

687
00:26:59,440 --> 00:27:01,200
they assume the same rule that is

688
00:27:01,200 --> 00:27:03,840
already available for them so by default

689
00:27:03,840 --> 00:27:05,840
the service tokens are mountable so

690
00:27:05,840 --> 00:27:08,320
imagine a situation uh where you are

691
00:27:08,320 --> 00:27:10,480
able to create a port and then mount the

692
00:27:10,480 --> 00:27:12,559
service token which is of a much more

693
00:27:12,559 --> 00:27:14,240
higher privilege than you would have

694
00:27:14,240 --> 00:27:16,640
originally got that that that's like

695
00:27:16,640 --> 00:27:19,200
mounting the file system in case of a

696
00:27:19,200 --> 00:27:22,159
dockerized environment

697
00:27:22,159 --> 00:27:24,480
so

698
00:27:24,480 --> 00:27:26,960
to add to the agony here so the root

699
00:27:26,960 --> 00:27:29,360
privilege container so even if you are a

700
00:27:29,360 --> 00:27:30,320
root

701
00:27:30,320 --> 00:27:32,240
within the container and we are calling

702
00:27:32,240 --> 00:27:34,399
it as the king in the jail

703
00:27:34,399 --> 00:27:37,039
this specific uh path where the service

704
00:27:37,039 --> 00:27:39,840
tokens are present by default you can

705
00:27:39,840 --> 00:27:41,840
read that if you are root and if you are

706
00:27:41,840 --> 00:27:44,080
rude if you are not a root within the

707
00:27:44,080 --> 00:27:46,960
container then kubernetes will not let

708
00:27:46,960 --> 00:27:49,760
you uh read this path but

709
00:27:49,760 --> 00:27:51,200
that's not a full proof solution there

710
00:27:51,200 --> 00:27:53,600
are a bunch of ways in which uh it's

711
00:27:53,600 --> 00:27:56,480
like a pseudo you can try to sudo within

712
00:27:56,480 --> 00:27:58,399
the kubernetes world and try to read

713
00:27:58,399 --> 00:28:01,200
this uh service token path so getting

714
00:28:01,200 --> 00:28:03,360
hold of this service token once you have

715
00:28:03,360 --> 00:28:06,720
a pod deployed in kubernetes is not a

716
00:28:06,720 --> 00:28:09,360
difficult job uh any any seasoned pen

717
00:28:09,360 --> 00:28:11,600
tester or red teamer would be able to

718
00:28:11,600 --> 00:28:13,279
eventually get to that and if this

719
00:28:13,279 --> 00:28:16,000
service tokens are of a higher privilege

720
00:28:16,000 --> 00:28:18,559
then that's a recipe for the complete

721
00:28:18,559 --> 00:28:20,399
compromise

722
00:28:20,399 --> 00:28:21,600
so

723
00:28:21,600 --> 00:28:23,840
let's take uh like after this discussion

724
00:28:23,840 --> 00:28:26,159
and general understanding let's let's

725
00:28:26,159 --> 00:28:29,200
consider one lateral movement example

726
00:28:29,200 --> 00:28:30,559
for that so

727
00:28:30,559 --> 00:28:33,760
as we have seen uh the attacker already

728
00:28:33,760 --> 00:28:35,840
at an attacker is able to deploy the

729
00:28:35,840 --> 00:28:37,760
docker image with the root

730
00:28:37,760 --> 00:28:39,919
uh so that container with the root is

731
00:28:39,919 --> 00:28:42,000
already present and they deployed the

732
00:28:42,000 --> 00:28:44,000
port so now they are within the

733
00:28:44,000 --> 00:28:45,919
containerized environment kubernetes

734
00:28:45,919 --> 00:28:48,880
environment with a with a container and

735
00:28:48,880 --> 00:28:51,679
they have the root privilege for that

736
00:28:51,679 --> 00:28:52,799
now

737
00:28:52,799 --> 00:28:55,760
with that if that part has a service

738
00:28:55,760 --> 00:28:58,000
token permission which lets them create

739
00:28:58,000 --> 00:28:59,840
the port then attacker can actually

740
00:28:59,840 --> 00:29:01,360
deploy the pod

741
00:29:01,360 --> 00:29:03,279
now while deploying the pod the

742
00:29:03,279 --> 00:29:06,640
kubernetes gives you a nice way to mount

743
00:29:06,640 --> 00:29:09,360
whatever file system that you want for

744
00:29:09,360 --> 00:29:12,159
that matter so here we are gonna use uh

745
00:29:12,159 --> 00:29:14,080
one of the attack that emmanuel uh

746
00:29:14,080 --> 00:29:16,720
described where hey i have i want to

747
00:29:16,720 --> 00:29:19,039
actually deploy the pod and in the

748
00:29:19,039 --> 00:29:21,120
container which is on that pod i want to

749
00:29:21,120 --> 00:29:25,200
actually mount the docker.sock or

750
00:29:25,200 --> 00:29:27,520
socket environment for that which will

751
00:29:27,520 --> 00:29:30,240
then let me uh talk directly to the

752
00:29:30,240 --> 00:29:32,399
docker demon which is running as a route

753
00:29:32,399 --> 00:29:34,880
as as we discussed so this is as good as

754
00:29:34,880 --> 00:29:37,279
like a privileged container for me in

755
00:29:37,279 --> 00:29:38,840
the production

756
00:29:38,840 --> 00:29:41,120
environment in order to think in order

757
00:29:41,120 --> 00:29:43,360
to make things more easier kubernetes

758
00:29:43,360 --> 00:29:45,600
also lets you create privileged

759
00:29:45,600 --> 00:29:48,159
container now the privileged containers

760
00:29:48,159 --> 00:29:50,320
or the privilege part they basically

761
00:29:50,320 --> 00:29:52,159
share the same concept or the same

762
00:29:52,159 --> 00:29:54,640
theory that you can now host you can now

763
00:29:54,640 --> 00:29:56,960
mount the host file system and then you

764
00:29:56,960 --> 00:29:59,279
have a direct foothold to the kernel

765
00:29:59,279 --> 00:30:00,880
like at that point you have a direct

766
00:30:00,880 --> 00:30:03,440
access to the kernel for that so an

767
00:30:03,440 --> 00:30:06,399
attacker with this uh logic will be able

768
00:30:06,399 --> 00:30:09,120
to deploy the power of their own choice

769
00:30:09,120 --> 00:30:11,360
and then start compromising the one node

770
00:30:11,360 --> 00:30:13,679
at a time to eventually perform the

771
00:30:13,679 --> 00:30:15,520
lateral movement and then have their

772
00:30:15,520 --> 00:30:17,440
persistence in a

773
00:30:17,440 --> 00:30:21,360
containerized environment for that

774
00:30:21,360 --> 00:30:25,279
so so all that whatever we discussed uh

775
00:30:25,279 --> 00:30:27,440
it it's it's nothing uh it's nothing new

776
00:30:27,440 --> 00:30:30,080
or it's it's not like uh uh it's a it's

777
00:30:30,080 --> 00:30:32,000
a new uh information that

778
00:30:32,000 --> 00:30:34,720
we are giving you but where it lacks uh

779
00:30:34,720 --> 00:30:36,640
in general from the offensive security

780
00:30:36,640 --> 00:30:38,880
perspective is there are not a lot of

781
00:30:38,880 --> 00:30:41,760
tools that let you do this so imagine

782
00:30:41,760 --> 00:30:43,520
you're already in a containerized

783
00:30:43,520 --> 00:30:46,000
environment and now you want to actually

784
00:30:46,000 --> 00:30:47,919
automate all of that so that then you

785
00:30:47,919 --> 00:30:50,640
can focus on real things like breaking

786
00:30:50,640 --> 00:30:52,320
out of container or maintain the

787
00:30:52,320 --> 00:30:54,399
persistence or perform the lateral

788
00:30:54,399 --> 00:30:56,480
movement there are a bunch of choices

789
00:30:56,480 --> 00:30:59,039
that are there and there are isolated

790
00:30:59,039 --> 00:31:01,760
tools present but there is not a single

791
00:31:01,760 --> 00:31:03,120
framework

792
00:31:03,120 --> 00:31:05,919
that lets you plug all these tools and

793
00:31:05,919 --> 00:31:09,440
then create a coherent framework for the

794
00:31:09,440 --> 00:31:11,039
containerized

795
00:31:11,039 --> 00:31:12,240
environment

796
00:31:12,240 --> 00:31:13,440
so

797
00:31:13,440 --> 00:31:15,760
that's the contribution that we think

798
00:31:15,760 --> 00:31:19,519
we're gonna make here so we are gonna

799
00:31:19,519 --> 00:31:22,480
present our tool uh the tool uh tool

800
00:31:22,480 --> 00:31:23,440
shiva

801
00:31:23,440 --> 00:31:25,840
so this tool uh

802
00:31:25,840 --> 00:31:27,919
once you are within the containerizer

803
00:31:27,919 --> 00:31:30,159
environment uh is gonna try the bunch of

804
00:31:30,159 --> 00:31:32,399
techniques for the lateral movement and

805
00:31:32,399 --> 00:31:34,880
the persistent so it gonna check where

806
00:31:34,880 --> 00:31:37,039
you have access to the service token

807
00:31:37,039 --> 00:31:39,039
then does your service token already has

808
00:31:39,039 --> 00:31:41,600
the right authorization if it is then it

809
00:31:41,600 --> 00:31:44,480
is gonna try to deploy the par and if it

810
00:31:44,480 --> 00:31:46,720
is able to be successful for that it you

811
00:31:46,720 --> 00:31:50,640
it lets you ssh or exit into that part

812
00:31:50,640 --> 00:31:54,480
so this is a quick uh demo of that

813
00:31:54,480 --> 00:31:57,200
tool and it's it's trying a bunch of the

814
00:31:57,200 --> 00:31:59,120
options and eventually

815
00:31:59,120 --> 00:32:02,080
it deploys a power of attacker's choice

816
00:32:02,080 --> 00:32:05,200
which which eventually

817
00:32:05,200 --> 00:32:06,799
let the attacker perform the person

818
00:32:06,799 --> 00:32:09,039
lateral movement and persistence in the

819
00:32:09,039 --> 00:32:12,279
in the environment

820
00:32:20,320 --> 00:32:23,320
oh

821
00:32:33,230 --> 00:32:35,360
[Music]

822
00:32:35,360 --> 00:32:38,000
all good ah so we have seen

823
00:32:38,000 --> 00:32:38,880
different

824
00:32:38,880 --> 00:32:40,640
different ways in which we can perform

825
00:32:40,640 --> 00:32:43,120
the container breakouts uh different

826
00:32:43,120 --> 00:32:46,000
attacks as well as the lateral movement

827
00:32:46,000 --> 00:32:48,240
persistence what about defense for that

828
00:32:48,240 --> 00:32:50,240
so this though this uh some of these

829
00:32:50,240 --> 00:32:52,399
defense techniques are specific to

830
00:32:52,399 --> 00:32:54,480
kubernetes they're similar to the

831
00:32:54,480 --> 00:32:56,240
different attacks that emanuel was

832
00:32:56,240 --> 00:32:59,039
describing uh the first one is the least

833
00:32:59,039 --> 00:33:00,880
privilege for your service token and it

834
00:33:00,880 --> 00:33:03,279
is similar to not having a privileged

835
00:33:03,279 --> 00:33:04,080
fact

836
00:33:04,080 --> 00:33:06,559
for your docker environment so

837
00:33:06,559 --> 00:33:08,320
especially in a kubernetes uh

838
00:33:08,320 --> 00:33:10,640
environment whenever you are creating a

839
00:33:10,640 --> 00:33:12,960
service tokens and assigning them to a

840
00:33:12,960 --> 00:33:15,440
specific namespace pay specific

841
00:33:15,440 --> 00:33:17,600
attention to make sure that the

842
00:33:17,600 --> 00:33:20,480
privileges associated with that are just

843
00:33:20,480 --> 00:33:22,320
the least privilege that

844
00:33:22,320 --> 00:33:24,320
don't don't assign any uh overly

845
00:33:24,320 --> 00:33:26,480
permissive privileges there

846
00:33:26,480 --> 00:33:28,480
kubernetes also provides you a way to

847
00:33:28,480 --> 00:33:31,600
use the bar security policy now in the

848
00:33:31,600 --> 00:33:33,919
pod security policy uh i'll recommend

849
00:33:33,919 --> 00:33:36,399
that you disable all containers running

850
00:33:36,399 --> 00:33:38,559
as a route unless it is absolutely

851
00:33:38,559 --> 00:33:40,559
required and then also disable the

852
00:33:40,559 --> 00:33:42,399
privilege parts again unless it is

853
00:33:42,399 --> 00:33:45,200
required because then it will

854
00:33:45,200 --> 00:33:46,960
though it will not completely stop the

855
00:33:46,960 --> 00:33:49,039
lateral movement and persistence it will

856
00:33:49,039 --> 00:33:51,279
limit an attacker to the greater extent

857
00:33:51,279 --> 00:33:52,799
for that

858
00:33:52,799 --> 00:33:54,480
in any product in any production

859
00:33:54,480 --> 00:33:56,399
environment your traditional knowledge

860
00:33:56,399 --> 00:33:58,720
of enforcing the network access control

861
00:33:58,720 --> 00:34:01,039
doesn't go away you still have to do it

862
00:34:01,039 --> 00:34:03,120
and even so you have to do it uh even

863
00:34:03,120 --> 00:34:05,200
more efficiently in a production

864
00:34:05,200 --> 00:34:07,760
environment using kubernetes

865
00:34:07,760 --> 00:34:10,079
and then secure your container registry

866
00:34:10,079 --> 00:34:12,239
for the uh with the different techniques

867
00:34:12,239 --> 00:34:14,960
like auditing proper access control with

868
00:34:14,960 --> 00:34:16,800
zero trust monitoring

869
00:34:16,800 --> 00:34:18,879
to protect the attacks that emanuel was

870
00:34:18,879 --> 00:34:21,280
describing and one of the example that

871
00:34:21,280 --> 00:34:23,760
we also saw for the uh

872
00:34:23,760 --> 00:34:25,520
for for the initial entry point for an

873
00:34:25,520 --> 00:34:27,918
attacker

874
00:34:28,560 --> 00:34:29,760
and

875
00:34:29,760 --> 00:34:31,839
that's about it uh thank you for

876
00:34:31,839 --> 00:34:34,560
attending uh our talk hope you find it

877
00:34:34,560 --> 00:34:37,359
useful

