1
00:00:02,879 --> 00:00:05,839
arcsan is now digital.ai

2
00:00:05,839 --> 00:00:07,759
join us at our booth in the virtual expo

3
00:00:07,759 --> 00:00:10,080
hall to learn how our app protection

4
00:00:10,080 --> 00:00:12,080
white box cryptography and threat

5
00:00:12,080 --> 00:00:14,080
analytics solutions can help you stay

6
00:00:14,080 --> 00:00:18,320
ahead of the evolving threat landscape

7
00:00:20,640 --> 00:00:22,640
the growth of open source continues to

8
00:00:22,640 --> 00:00:24,880
accelerate from google and microsoft to

9
00:00:24,880 --> 00:00:27,359
mom and pop shops consuming open source

10
00:00:27,359 --> 00:00:28,720
is now an accepted way to build your

11
00:00:28,720 --> 00:00:29,840
tech stack

12
00:00:29,840 --> 00:00:32,079
increasingly many organizations are

13
00:00:32,079 --> 00:00:34,000
recognizing the benefits of releasing

14
00:00:34,000 --> 00:00:36,000
their own internal code as open source

15
00:00:36,000 --> 00:00:37,520
software

16
00:00:37,520 --> 00:00:39,680
for many companies releasing an open

17
00:00:39,680 --> 00:00:41,760
source project is now an important part

18
00:00:41,760 --> 00:00:44,079
of establishing and maintaining tech

19
00:00:44,079 --> 00:00:46,640
cred with customers investors and

20
00:00:46,640 --> 00:00:48,239
potential recruits

21
00:00:48,239 --> 00:00:50,879
at the same time people also recognize

22
00:00:50,879 --> 00:00:53,120
that more eyes and more contributors can

23
00:00:53,120 --> 00:00:55,120
help spot bugs and take a product new

24
00:00:55,120 --> 00:00:57,120
directions

25
00:00:57,120 --> 00:00:59,120
however in the rush to get code out the

26
00:00:59,120 --> 00:01:01,280
door many organizations fail to

27
00:01:01,280 --> 00:01:03,199
implement necessary governance and

28
00:01:03,199 --> 00:01:06,000
security processes to protect both their

29
00:01:06,000 --> 00:01:08,479
own organization and downstream users of

30
00:01:08,479 --> 00:01:09,680
the project

31
00:01:09,680 --> 00:01:11,360
today we're going to walk through

32
00:01:11,360 --> 00:01:13,680
processes and actions you can take to

33
00:01:13,680 --> 00:01:17,439
protect your orgs open source efforts

34
00:01:18,240 --> 00:01:20,159
to get started let's talk about your two

35
00:01:20,159 --> 00:01:21,759
main concerns when it comes to releasing

36
00:01:21,759 --> 00:01:23,759
your code as open source software

37
00:01:23,759 --> 00:01:25,680
the more apparent half of the equation

38
00:01:25,680 --> 00:01:27,680
is protecting your organization and your

39
00:01:27,680 --> 00:01:29,119
secret sauce

40
00:01:29,119 --> 00:01:31,439
while it may seem like an obvious no-no

41
00:01:31,439 --> 00:01:33,759
your organization probably has a dive or

42
00:01:33,759 --> 00:01:35,840
two who just doesn't see a problem

43
00:01:35,840 --> 00:01:37,759
taking your custom algorithm or other

44
00:01:37,759 --> 00:01:39,600
secret sauce and posting it on their

45
00:01:39,600 --> 00:01:40,479
public

46
00:01:40,479 --> 00:01:42,880
personal github

47
00:01:42,880 --> 00:01:44,479
even when you can control the outbound

48
00:01:44,479 --> 00:01:46,640
flow internal code is rarely something

49
00:01:46,640 --> 00:01:49,680
you can just take and post publicly

50
00:01:49,680 --> 00:01:51,280
your internal source is probably filled

51
00:01:51,280 --> 00:01:52,960
with company specific comments and

52
00:01:52,960 --> 00:01:54,960
integrations that reveal your internal

53
00:01:54,960 --> 00:01:56,479
infrastructure

54
00:01:56,479 --> 00:01:57,759
it's great that you want to share with

55
00:01:57,759 --> 00:02:00,640
the world but governance is needed you

56
00:02:00,640 --> 00:02:01,840
need to protect your competitive

57
00:02:01,840 --> 00:02:04,159
advantage and you need to ensure that

58
00:02:04,159 --> 00:02:05,680
releasing your code doesn't give

59
00:02:05,680 --> 00:02:07,040
attackers a foothold into your

60
00:02:07,040 --> 00:02:09,840
organization

61
00:02:10,878 --> 00:02:12,640
at the same time you'll also need to

62
00:02:12,640 --> 00:02:14,160
consider the people who will use your

63
00:02:14,160 --> 00:02:15,280
software

64
00:02:15,280 --> 00:02:16,800
you have a responsibility to your

65
00:02:16,800 --> 00:02:18,800
downstream user community

66
00:02:18,800 --> 00:02:20,239
while you may choose release your code

67
00:02:20,239 --> 00:02:23,120
with a no liability open source license

68
00:02:23,120 --> 00:02:25,760
the guiding principle here is still no

69
00:02:25,760 --> 00:02:26,879
dumping

70
00:02:26,879 --> 00:02:29,280
if your orgs open source page is just a

71
00:02:29,280 --> 00:02:31,920
graveyard for old and forgotten projects

72
00:02:31,920 --> 00:02:34,000
you're doing it wrong

73
00:02:34,000 --> 00:02:35,519
even though no one is paying you you

74
00:02:35,519 --> 00:02:36,879
still need to think about the members of

75
00:02:36,879 --> 00:02:41,040
your projects community as customers

76
00:02:41,040 --> 00:02:42,319
the whole point of releasing your

77
00:02:42,319 --> 00:02:44,239
project is to get people to participate

78
00:02:44,239 --> 00:02:46,640
and to look good at the same time

79
00:02:46,640 --> 00:02:48,319
if you don't put in the time to protect

80
00:02:48,319 --> 00:02:50,239
your users you'll end up with a bunch of

81
00:02:50,239 --> 00:02:52,879
upset people and bad press

82
00:02:52,879 --> 00:02:55,040
you want to be on the top of hacker news

83
00:02:55,040 --> 00:02:57,760
or slashdot for being awesome not for

84
00:02:57,760 --> 00:03:01,920
being the root cause of some data breach

85
00:03:02,800 --> 00:03:04,560
now that we have the right mental frame

86
00:03:04,560 --> 00:03:07,040
let's get started the journey disco to

87
00:03:07,040 --> 00:03:08,560
secure your outbound open source

88
00:03:08,560 --> 00:03:10,239
initiative starts before the first

89
00:03:10,239 --> 00:03:12,959
commit and before we talk about security

90
00:03:12,959 --> 00:03:14,959
i want to talk about your open source

91
00:03:14,959 --> 00:03:16,480
governance in a little bit more of a

92
00:03:16,480 --> 00:03:19,840
broad general sense

93
00:03:20,000 --> 00:03:21,360
let's start by talking about the

94
00:03:21,360 --> 00:03:23,120
importance of establishing your org's

95
00:03:23,120 --> 00:03:24,959
overall outbound open source governance

96
00:03:24,959 --> 00:03:26,319
process

97
00:03:26,319 --> 00:03:27,760
while you may want to just focus on

98
00:03:27,760 --> 00:03:30,239
security realistically you need to

99
00:03:30,239 --> 00:03:31,920
ensure the rest of the program is in

100
00:03:31,920 --> 00:03:33,360
place where you're going to end up with

101
00:03:33,360 --> 00:03:35,040
a lot of problems

102
00:03:35,040 --> 00:03:37,680
this is a good opportunity to leverage

103
00:03:37,680 --> 00:03:39,920
or i guess maybe to develop those

104
00:03:39,920 --> 00:03:41,760
cross-functional relationships and

105
00:03:41,760 --> 00:03:43,760
influencing skills to bring in the right

106
00:03:43,760 --> 00:03:45,680
people

107
00:03:45,680 --> 00:03:47,680
while going through all of this remember

108
00:03:47,680 --> 00:03:49,040
that you need to build your process to

109
00:03:49,040 --> 00:03:51,440
be developer centric

110
00:03:51,440 --> 00:03:52,959
and an important part of this is

111
00:03:52,959 --> 00:03:55,040
bringing all parties into one combined

112
00:03:55,040 --> 00:03:56,959
workflow for all the vetting and

113
00:03:56,959 --> 00:03:58,080
approvals

114
00:03:58,080 --> 00:03:59,840
if things are disjointed and your devs

115
00:03:59,840 --> 00:04:01,360
need to go through a lot of pain they're

116
00:04:01,360 --> 00:04:02,560
either a

117
00:04:02,560 --> 00:04:04,480
going to give up or b they're simply

118
00:04:04,480 --> 00:04:06,319
going to bypass all your orgs processes

119
00:04:06,319 --> 00:04:07,280
anyway

120
00:04:07,280 --> 00:04:09,280
to keep things secure control the

121
00:04:09,280 --> 00:04:10,720
outbound flow

122
00:04:10,720 --> 00:04:12,239
now that doesn't mean you need to make a

123
00:04:12,239 --> 00:04:14,720
treacherous maze what you want to do is

124
00:04:14,720 --> 00:04:16,478
you want to make it easy to do the right

125
00:04:16,478 --> 00:04:17,519
thing

126
00:04:17,519 --> 00:04:18,720
this is going to prevent people from

127
00:04:18,720 --> 00:04:20,320
just throwing up their code with no

128
00:04:20,320 --> 00:04:21,918
oversight

129
00:04:21,918 --> 00:04:24,720
trust me the upfront pain to set all

130
00:04:24,720 --> 00:04:27,120
this up is much much better than chasing

131
00:04:27,120 --> 00:04:29,919
an incident and cleaning up a mess later

132
00:04:29,919 --> 00:04:31,840
to help you get started i recommend

133
00:04:31,840 --> 00:04:33,199
checking out the repo at the bottom of

134
00:04:33,199 --> 00:04:34,320
the slide

135
00:04:34,320 --> 00:04:35,440
while you're bringing in the right

136
00:04:35,440 --> 00:04:36,960
people and looking at some simple

137
00:04:36,960 --> 00:04:38,880
policies there are a few key points i

138
00:04:38,880 --> 00:04:40,639
want you to keep in mind

139
00:04:40,639 --> 00:04:42,320
first you need to set up the right

140
00:04:42,320 --> 00:04:45,199
incentives for leadership and managers

141
00:04:45,199 --> 00:04:46,560
dev managers need to be part of the

142
00:04:46,560 --> 00:04:48,639
approval process these are the people

143
00:04:48,639 --> 00:04:50,400
who usually know what's cool to share

144
00:04:50,400 --> 00:04:51,759
and what needs to stay locked up in the

145
00:04:51,759 --> 00:04:52,639
vault

146
00:04:52,639 --> 00:04:54,639
at the same time managers are often

147
00:04:54,639 --> 00:04:56,560
focused on internal delivery you need to

148
00:04:56,560 --> 00:04:58,800
make them see the value to the org and

149
00:04:58,800 --> 00:05:01,440
to themselves allowing people in time to

150
00:05:01,440 --> 00:05:03,440
properly oversee the project once you

151
00:05:03,440 --> 00:05:05,919
make it public it's your job to help

152
00:05:05,919 --> 00:05:08,639
them see the light

153
00:05:08,960 --> 00:05:10,800
beyond managers you want to work closely

154
00:05:10,800 --> 00:05:12,080
with your legal and publicity

155
00:05:12,080 --> 00:05:14,080
departments remember you're not just

156
00:05:14,080 --> 00:05:15,840
dumping code out there you're building

157
00:05:15,840 --> 00:05:18,160
an extension of your organization if

158
00:05:18,160 --> 00:05:19,840
you're going through all this effort you

159
00:05:19,840 --> 00:05:21,440
want to leverage your pr machine to get

160
00:05:21,440 --> 00:05:23,280
as many users and contributors on your

161
00:05:23,280 --> 00:05:25,199
project as possible

162
00:05:25,199 --> 00:05:26,880
your legal team is also an important

163
00:05:26,880 --> 00:05:28,080
partner

164
00:05:28,080 --> 00:05:29,600
if your legal team does not have a lot

165
00:05:29,600 --> 00:05:31,600
of experience with open source you may

166
00:05:31,600 --> 00:05:33,199
want to seek outside counsel to help

167
00:05:33,199 --> 00:05:34,960
advise

168
00:05:34,960 --> 00:05:36,479
there are actually a lot of issues

169
00:05:36,479 --> 00:05:38,000
around copyright management that can

170
00:05:38,000 --> 00:05:39,280
become important

171
00:05:39,280 --> 00:05:42,000
even in an open source project take clas

172
00:05:42,000 --> 00:05:44,479
for example developers typically hate

173
00:05:44,479 --> 00:05:46,560
clas because they feel like an impedance

174
00:05:46,560 --> 00:05:48,880
an impediment to sharing code and you're

175
00:05:48,880 --> 00:05:50,080
also going to just find some people who

176
00:05:50,080 --> 00:05:52,639
are simply ideologically opposed to them

177
00:05:52,639 --> 00:05:55,039
the reality is that you probably do want

178
00:05:55,039 --> 00:05:57,360
a cla in order to protect you later down

179
00:05:57,360 --> 00:05:59,680
the road microsoft google and all the

180
00:05:59,680 --> 00:06:02,319
big guys use clas so they're pretty

181
00:06:02,319 --> 00:06:04,400
common now if people don't like them

182
00:06:04,400 --> 00:06:06,080
they can make their own fork and go

183
00:06:06,080 --> 00:06:07,280
their own way

184
00:06:07,280 --> 00:06:09,120
your legal team also plays an important

185
00:06:09,120 --> 00:06:11,120
role in determining what licenses should

186
00:06:11,120 --> 00:06:13,440
be used when you release your code it's

187
00:06:13,440 --> 00:06:15,360
important to ensure that all the various

188
00:06:15,360 --> 00:06:16,560
parts that you've stitched together in

189
00:06:16,560 --> 00:06:18,639
your application have compatible open

190
00:06:18,639 --> 00:06:21,840
source licenses

191
00:06:25,199 --> 00:06:27,199
as you put everything together into a

192
00:06:27,199 --> 00:06:30,000
process remember we want to make it easy

193
00:06:30,000 --> 00:06:32,639
but we want a gate not an open door

194
00:06:32,639 --> 00:06:34,479
what do i mean by this

195
00:06:34,479 --> 00:06:36,639
no one can actually create the repo on

196
00:06:36,639 --> 00:06:39,039
the public hosting provider without all

197
00:06:39,039 --> 00:06:41,440
the eyes dotted and all the t's crossed

198
00:06:41,440 --> 00:06:44,880
i like to say the process pays the toll

199
00:06:44,880 --> 00:06:46,800
that said the people responsible for

200
00:06:46,800 --> 00:06:48,639
setting up the repo need to be familiar

201
00:06:48,639 --> 00:06:50,479
with the different configuration options

202
00:06:50,479 --> 00:06:52,240
permissions and everything else that

203
00:06:52,240 --> 00:06:55,039
goes into setting up your repo

204
00:06:55,039 --> 00:06:56,960
for example you probably want to ensure

205
00:06:56,960 --> 00:06:58,720
that all maintainers and contributors

206
00:06:58,720 --> 00:07:00,400
are using two-factor authentication for

207
00:07:00,400 --> 00:07:02,479
their accounts

208
00:07:02,479 --> 00:07:04,160
another topic that will come up is how

209
00:07:04,160 --> 00:07:06,400
do you handle outside contributors while

210
00:07:06,400 --> 00:07:07,840
you definitely want to encourage issue

211
00:07:07,840 --> 00:07:10,400
reports and pr's it's generally unwise

212
00:07:10,400 --> 00:07:11,919
to allow some random person from the

213
00:07:11,919 --> 00:07:14,479
internet who has no skin in the game to

214
00:07:14,479 --> 00:07:16,240
make decisions about merges and other

215
00:07:16,240 --> 00:07:18,319
big decisions on your project

216
00:07:18,319 --> 00:07:20,240
if members of the community aren't happy

217
00:07:20,240 --> 00:07:22,160
you do need to listen to them but

218
00:07:22,160 --> 00:07:24,160
ultimately they can fork your repo and

219
00:07:24,160 --> 00:07:25,520
go their own way

220
00:07:25,520 --> 00:07:28,240
you need to stay in control

221
00:07:28,240 --> 00:07:30,639
now related to this remember that former

222
00:07:30,639 --> 00:07:32,720
employees are just that

223
00:07:32,720 --> 00:07:35,120
not employees you need to cut their

224
00:07:35,120 --> 00:07:36,880
access just like you would on any

225
00:07:36,880 --> 00:07:38,960
internal system

226
00:07:38,960 --> 00:07:41,039
one other gotcha i want to highlight

227
00:07:41,039 --> 00:07:43,280
in security most of us are accustomed to

228
00:07:43,280 --> 00:07:45,039
implementing some form of re-review and

229
00:07:45,039 --> 00:07:46,639
re-certification

230
00:07:46,639 --> 00:07:48,800
other departments might not operate so

231
00:07:48,800 --> 00:07:49,919
cyclically

232
00:07:49,919 --> 00:07:51,599
work with your partners to ensure

233
00:07:51,599 --> 00:07:55,599
governance is an ongoing process

234
00:07:56,160 --> 00:07:57,680
all right now that we've helped to

235
00:07:57,680 --> 00:07:59,360
ensure a strong foundation for the

236
00:07:59,360 --> 00:08:02,720
overall process let's talk security

237
00:08:02,720 --> 00:08:04,560
before we even talk about code it's

238
00:08:04,560 --> 00:08:05,919
important to realize that there's a lot

239
00:08:05,919 --> 00:08:08,000
more going on with modern open source

240
00:08:08,000 --> 00:08:09,759
projects if you think you just need to

241
00:08:09,759 --> 00:08:11,120
do a code review and some light pen

242
00:08:11,120 --> 00:08:13,599
testing call it a day i've got bad news

243
00:08:13,599 --> 00:08:14,560
for you

244
00:08:14,560 --> 00:08:15,840
let's think about all the different

245
00:08:15,840 --> 00:08:17,280
things that are needed to support an

246
00:08:17,280 --> 00:08:18,960
open source project

247
00:08:18,960 --> 00:08:20,879
while in many cases a good read me may

248
00:08:20,879 --> 00:08:22,560
be enough you may find that the release

249
00:08:22,560 --> 00:08:24,479
team also wants to set up a full website

250
00:08:24,479 --> 00:08:26,000
to promote the project and host

251
00:08:26,000 --> 00:08:28,240
screenshots and documentation

252
00:08:28,240 --> 00:08:29,840
you can minimize risk by keeping it

253
00:08:29,840 --> 00:08:31,520
simple and using something like a static

254
00:08:31,520 --> 00:08:33,760
site generator and github pages but the

255
00:08:33,760 --> 00:08:35,279
release team may want to use their own

256
00:08:35,279 --> 00:08:36,719
tooling and integrate some dynamic

257
00:08:36,719 --> 00:08:37,919
features

258
00:08:37,919 --> 00:08:40,399
and just like that we've now added more

259
00:08:40,399 --> 00:08:43,200
apps and more infrastructure to manage

260
00:08:43,200 --> 00:08:45,440
and to secure

261
00:08:45,440 --> 00:08:48,080
it's 2020 so chances are your team wants

262
00:08:48,080 --> 00:08:49,920
to use the same devops principles that

263
00:08:49,920 --> 00:08:51,920
they use for internal products while

264
00:08:51,920 --> 00:08:53,600
there are plenty of build pipelines and

265
00:08:53,600 --> 00:08:55,839
tools available as free services for

266
00:08:55,839 --> 00:08:57,760
open source projects you may want to

267
00:08:57,760 --> 00:08:59,440
consider using infrastructure where you

268
00:08:59,440 --> 00:09:01,680
have a bit more control

269
00:09:01,680 --> 00:09:03,200
if you look at the news of the past few

270
00:09:03,200 --> 00:09:05,440
years these services are not always bug

271
00:09:05,440 --> 00:09:07,440
free or set up with security first

272
00:09:07,440 --> 00:09:08,560
principles

273
00:09:08,560 --> 00:09:09,920
you need to be thinking about data

274
00:09:09,920 --> 00:09:11,920
leakage and access control among other

275
00:09:11,920 --> 00:09:13,120
concerns

276
00:09:13,120 --> 00:09:15,519
at the same time even if you can utilize

277
00:09:15,519 --> 00:09:17,120
the same tools and patterns you use

278
00:09:17,120 --> 00:09:18,160
in-house

279
00:09:18,160 --> 00:09:19,839
things aren't always the same as there

280
00:09:19,839 --> 00:09:20,839
are

281
00:09:20,839 --> 00:09:22,959
internally many projects make their

282
00:09:22,959 --> 00:09:25,040
build logs successful to the community

283
00:09:25,040 --> 00:09:26,800
how well do you know what's going on in

284
00:09:26,800 --> 00:09:28,720
your logging and what might be dumped

285
00:09:28,720 --> 00:09:30,959
out there for everyone to see

286
00:09:30,959 --> 00:09:32,640
now if you determine you really do want

287
00:09:32,640 --> 00:09:34,320
to make all these things public you have

288
00:09:34,320 --> 00:09:36,480
to be extra extra diligent about data

289
00:09:36,480 --> 00:09:38,800
leakage and protecting things like api

290
00:09:38,800 --> 00:09:40,640
keys and other secrets that could be

291
00:09:40,640 --> 00:09:43,439
leaked in logs

292
00:09:43,839 --> 00:09:46,080
beyond ci and other automated testing

293
00:09:46,080 --> 00:09:47,360
you probably want to make your project

294
00:09:47,360 --> 00:09:49,440
available in some packaged form that can

295
00:09:49,440 --> 00:09:51,440
easily be integrated by downstream users

296
00:09:51,440 --> 00:09:53,120
without requiring cloning and going

297
00:09:53,120 --> 00:09:55,519
through a whole lot of work on your own

298
00:09:55,519 --> 00:09:58,320
think things like maven central npm pi

299
00:09:58,320 --> 00:09:59,519
pi

300
00:09:59,519 --> 00:10:01,279
this means even more services to

301
00:10:01,279 --> 00:10:02,880
understand and secure

302
00:10:02,880 --> 00:10:04,720
for example you'll want to set up your

303
00:10:04,720 --> 00:10:06,160
account on the package hosting site

304
00:10:06,160 --> 00:10:08,240
using a group mailing list and not

305
00:10:08,240 --> 00:10:10,800
individual or personal email addresses

306
00:10:10,800 --> 00:10:12,560
this makes you resilient to changes in

307
00:10:12,560 --> 00:10:14,560
the team and can also help aggregate

308
00:10:14,560 --> 00:10:16,560
alerts for centralized review and

309
00:10:16,560 --> 00:10:19,200
reporting by the security team

310
00:10:19,200 --> 00:10:21,200
for a lot of devs out there once they

311
00:10:21,200 --> 00:10:23,120
set up an automated integration it's out

312
00:10:23,120 --> 00:10:25,200
of sight and out of mind you need to be

313
00:10:25,200 --> 00:10:27,279
sure that everyone is in the loop

314
00:10:27,279 --> 00:10:28,880
and stays in the loop you're going to

315
00:10:28,880 --> 00:10:30,320
need to periodically audit these

316
00:10:30,320 --> 00:10:32,000
services to make sure things are as you

317
00:10:32,000 --> 00:10:34,160
expect

318
00:10:34,160 --> 00:10:36,160
platforms like github really help

319
00:10:36,160 --> 00:10:37,760
centralize communications for things

320
00:10:37,760 --> 00:10:39,200
like suggesting new features and

321
00:10:39,200 --> 00:10:40,560
providing support

322
00:10:40,560 --> 00:10:42,000
but the release team may also want to

323
00:10:42,000 --> 00:10:45,279
set up a mailing list forums or chat

324
00:10:45,279 --> 00:10:47,040
these communication tools need to be

325
00:10:47,040 --> 00:10:49,200
reviewed and secured like any other app

326
00:10:49,200 --> 00:10:51,680
or service your org uses

327
00:10:51,680 --> 00:10:53,200
lastly you should think about

328
00:10:53,200 --> 00:10:55,279
establishing a social media presence as

329
00:10:55,279 --> 00:10:57,760
a preemptive defense if your project

330
00:10:57,760 --> 00:11:00,720
becomes very popular scammers will try

331
00:11:00,720 --> 00:11:02,959
to impersonate you and draw people into

332
00:11:02,959 --> 00:11:05,600
their copycat malware traps

333
00:11:05,600 --> 00:11:07,440
you don't need to go crazy but you want

334
00:11:07,440 --> 00:11:08,880
to have an active presence where your

335
00:11:08,880 --> 00:11:10,720
community hangs out

336
00:11:10,720 --> 00:11:12,720
it's a good idea to explicitly list all

337
00:11:12,720 --> 00:11:14,720
your official social channels on your

338
00:11:14,720 --> 00:11:17,120
site or in your readme so people know

339
00:11:17,120 --> 00:11:19,920
what is real

340
00:11:21,120 --> 00:11:23,040
now let's jump back to the code side of

341
00:11:23,040 --> 00:11:24,079
things

342
00:11:24,079 --> 00:11:25,760
probably the most natural security

343
00:11:25,760 --> 00:11:27,760
activity is doing some code review and

344
00:11:27,760 --> 00:11:29,760
pen testing type checks if you're

345
00:11:29,760 --> 00:11:31,200
starting from an existing internal

346
00:11:31,200 --> 00:11:33,200
project hopefully you're already in a

347
00:11:33,200 --> 00:11:34,480
pretty good place

348
00:11:34,480 --> 00:11:36,800
at the same time some teams may want to

349
00:11:36,800 --> 00:11:38,800
start new projects that are open source

350
00:11:38,800 --> 00:11:40,480
from day one

351
00:11:40,480 --> 00:11:42,000
now it would be convenient if you could

352
00:11:42,000 --> 00:11:43,839
run your internal security tools

353
00:11:43,839 --> 00:11:46,000
directly against the public repo

354
00:11:46,000 --> 00:11:47,920
but if there are licensing or other

355
00:11:47,920 --> 00:11:49,360
restrictions which make this too

356
00:11:49,360 --> 00:11:51,360
difficult another strategy is to set up

357
00:11:51,360 --> 00:11:52,959
an internal mirror

358
00:11:52,959 --> 00:11:54,639
where you can treat the code just like

359
00:11:54,639 --> 00:11:57,360
you would any other internal code

360
00:11:57,360 --> 00:11:59,360
some repository hosting services may

361
00:11:59,360 --> 00:12:01,040
provide some security testing features

362
00:12:01,040 --> 00:12:03,519
like vulnerable dependency checking or

363
00:12:03,519 --> 00:12:04,959
they may even have features that can

364
00:12:04,959 --> 00:12:06,480
block secrets from being committed to

365
00:12:06,480 --> 00:12:07,440
code

366
00:12:07,440 --> 00:12:08,880
i definitely recommend that you take

367
00:12:08,880 --> 00:12:10,959
advantage of all options but many of

368
00:12:10,959 --> 00:12:12,880
these bacon tools are not as robust as

369
00:12:12,880 --> 00:12:14,800
fully dedicated options

370
00:12:14,800 --> 00:12:16,480
make sure you do a gap assessment and

371
00:12:16,480 --> 00:12:18,000
understand what you actually get for

372
00:12:18,000 --> 00:12:19,839
free

373
00:12:19,839 --> 00:12:22,560
now to hammer one point home while it's

374
00:12:22,560 --> 00:12:23,839
100

375
00:12:23,839 --> 00:12:25,519
important to do a thorough review for

376
00:12:25,519 --> 00:12:27,519
that first public release you need to

377
00:12:27,519 --> 00:12:29,519
remember that security is an ongoing

378
00:12:29,519 --> 00:12:31,440
process you don't necessarily need to

379
00:12:31,440 --> 00:12:33,519
monitor every commit out there but you

380
00:12:33,519 --> 00:12:35,200
need to ensure that project maintainers

381
00:12:35,200 --> 00:12:37,360
know when to reach out and bring you in

382
00:12:37,360 --> 00:12:40,480
for an in-depth review

383
00:12:40,959 --> 00:12:42,880
beyond buggy code the next major

384
00:12:42,880 --> 00:12:44,880
security challenge is preventing leakage

385
00:12:44,880 --> 00:12:46,720
of the corporate secret sauce and other

386
00:12:46,720 --> 00:12:48,320
information that can be leveraged to

387
00:12:48,320 --> 00:12:49,680
attack your app or internal

388
00:12:49,680 --> 00:12:52,160
infrastructure for starters you should

389
00:12:52,160 --> 00:12:54,079
do a full review of your comments and

390
00:12:54,079 --> 00:12:55,360
configs

391
00:12:55,360 --> 00:12:57,680
there are some easy wins like setting up

392
00:12:57,680 --> 00:12:59,839
a very thoughtful git ignore file in

393
00:12:59,839 --> 00:13:01,360
particular you want to make sure you're

394
00:13:01,360 --> 00:13:03,279
blocking people from committing local

395
00:13:03,279 --> 00:13:05,600
configs which may contain secrets and

396
00:13:05,600 --> 00:13:07,519
you also want to block things like debug

397
00:13:07,519 --> 00:13:09,200
logs which can be output into the

398
00:13:09,200 --> 00:13:11,839
working directory while running tests

399
00:13:11,839 --> 00:13:13,360
another area to pay attention to is

400
00:13:13,360 --> 00:13:15,120
naming conventions used for things like

401
00:13:15,120 --> 00:13:16,240
variables

402
00:13:16,240 --> 00:13:18,079
these can leak internal structure or

403
00:13:18,079 --> 00:13:20,320
confidential information so change these

404
00:13:20,320 --> 00:13:22,880
to generic but useful terms this not

405
00:13:22,880 --> 00:13:24,880
only secures your code but it also makes

406
00:13:24,880 --> 00:13:28,639
it more accessible to downstream users

407
00:13:28,639 --> 00:13:30,720
inside your repo you will also likely

408
00:13:30,720 --> 00:13:32,800
have some supporting documentation

409
00:13:32,800 --> 00:13:34,320
as part of your security review you

410
00:13:34,320 --> 00:13:36,399
should review any supporting documents

411
00:13:36,399 --> 00:13:38,240
and things like screenshots to check for

412
00:13:38,240 --> 00:13:39,519
data leakage

413
00:13:39,519 --> 00:13:41,120
you also want to review these docs the

414
00:13:41,120 --> 00:13:43,360
vet default configurations or any

415
00:13:43,360 --> 00:13:46,480
security advice that needs updating

416
00:13:46,480 --> 00:13:48,160
in addition you need to ensure that

417
00:13:48,160 --> 00:13:49,839
security is properly called out in the

418
00:13:49,839 --> 00:13:51,680
project's readme which is the default

419
00:13:51,680 --> 00:13:54,320
home page for the project

420
00:13:54,320 --> 00:13:56,320
i recommend keeping the security section

421
00:13:56,320 --> 00:13:59,040
prominent but small in both your readme

422
00:13:59,040 --> 00:14:00,880
and contributing documents

423
00:14:00,880 --> 00:14:02,800
these documents can link to a dedicated

424
00:14:02,800 --> 00:14:04,720
security file which provides all the

425
00:14:04,720 --> 00:14:07,120
details about securely rated things such

426
00:14:07,120 --> 00:14:09,680
as reporting bugs responsible disclosure

427
00:14:09,680 --> 00:14:12,959
policy contact information keys whatever

428
00:14:12,959 --> 00:14:14,880
else you might want to share

429
00:14:14,880 --> 00:14:17,120
a security dock should be mandatory for

430
00:14:17,120 --> 00:14:18,880
all projects and it should be based upon

431
00:14:18,880 --> 00:14:20,800
a template owned and approved by the

432
00:14:20,800 --> 00:14:22,160
security team

433
00:14:22,160 --> 00:14:24,160
from time to time you may need to update

434
00:14:24,160 --> 00:14:26,480
and change the template but luckily all

435
00:14:26,480 --> 00:14:28,160
it should take is a pull request to

436
00:14:28,160 --> 00:14:30,639
update existing repos if you need some

437
00:14:30,639 --> 00:14:32,399
inspiration check out the sample

438
00:14:32,399 --> 00:14:34,639
security talk i provide in the resources

439
00:14:34,639 --> 00:14:37,519
at the end of this presentation

440
00:14:37,519 --> 00:14:39,360
as part of this process ensure you have

441
00:14:39,360 --> 00:14:40,480
a formal

442
00:14:40,480 --> 00:14:43,519
responsible disclosure policy

443
00:14:43,519 --> 00:14:44,480
published

444
00:14:44,480 --> 00:14:46,240
someplace publicly

445
00:14:46,240 --> 00:14:48,000
your org should have one in general but

446
00:14:48,000 --> 00:14:49,600
check to see that it aligns with your

447
00:14:49,600 --> 00:14:51,839
open source initiative the same goes for

448
00:14:51,839 --> 00:14:53,519
your bug bounty program

449
00:14:53,519 --> 00:14:55,199
the scope of a bug bounty program is

450
00:14:55,199 --> 00:14:57,120
usually very explicit

451
00:14:57,120 --> 00:14:58,800
especially when you work with a vendor

452
00:14:58,800 --> 00:15:00,639
to manage your program

453
00:15:00,639 --> 00:15:02,320
i strongly recommend you include your

454
00:15:02,320 --> 00:15:03,920
open source program in the scope of your

455
00:15:03,920 --> 00:15:05,440
bug bounty even though the code is

456
00:15:05,440 --> 00:15:07,199
sitting out there for anyone to see and

457
00:15:07,199 --> 00:15:08,480
easily review

458
00:15:08,480 --> 00:15:10,079
remember the whole point of the bug

459
00:15:10,079 --> 00:15:11,680
bounty program is to encourage

460
00:15:11,680 --> 00:15:13,920
responsible disclosure and prevent being

461
00:15:13,920 --> 00:15:15,519
surprised by someone making a public

462
00:15:15,519 --> 00:15:16,560
report

463
00:15:16,560 --> 00:15:18,800
now also recognize that if you do have a

464
00:15:18,800 --> 00:15:22,240
managed program adding scope adds cost

465
00:15:22,240 --> 00:15:24,720
be prepared to make a case to management

466
00:15:24,720 --> 00:15:27,839
to invest in your program

467
00:15:29,839 --> 00:15:31,360
now that we've looked at what you're

468
00:15:31,360 --> 00:15:33,360
putting into the repo let's talk about

469
00:15:33,360 --> 00:15:34,880
some supporting

470
00:15:34,880 --> 00:15:37,120
things like repo hosting

471
00:15:37,120 --> 00:15:39,040
your number one priority is bug free

472
00:15:39,040 --> 00:15:40,959
code but your next objective is to

473
00:15:40,959 --> 00:15:42,639
prevent unauthorized changes to your

474
00:15:42,639 --> 00:15:44,560
project and that means putting some

475
00:15:44,560 --> 00:15:46,320
thought into access control for project

476
00:15:46,320 --> 00:15:47,440
hosting

477
00:15:47,440 --> 00:15:48,720
you could set up your own hosting

478
00:15:48,720 --> 00:15:50,880
infrastructure but most orgs look to use

479
00:15:50,880 --> 00:15:52,839
something like github for ease and

480
00:15:52,839 --> 00:15:56,399
visibility now many orgs wonder

481
00:15:56,399 --> 00:15:57,839
do we need a force for developers to

482
00:15:57,839 --> 00:15:59,120
make separate work accounts on these

483
00:15:59,120 --> 00:16:00,480
platforms

484
00:16:00,480 --> 00:16:02,240
i would say usually this is not

485
00:16:02,240 --> 00:16:04,480
necessary if you do things right

486
00:16:04,480 --> 00:16:05,839
remember your devs probably want to

487
00:16:05,839 --> 00:16:07,360
double dip and get credit from their

488
00:16:07,360 --> 00:16:09,839
boss as well as some external visibility

489
00:16:09,839 --> 00:16:11,360
on their profile

490
00:16:11,360 --> 00:16:13,600
the key is to understand access control

491
00:16:13,600 --> 00:16:16,160
options and properly lock things down

492
00:16:16,160 --> 00:16:18,000
one of the simplest things you can do is

493
00:16:18,000 --> 00:16:19,600
to ensure that everyone in your org has

494
00:16:19,600 --> 00:16:21,759
2fa enabled on their account before

495
00:16:21,759 --> 00:16:24,160
they're granted access in addition if

496
00:16:24,160 --> 00:16:25,920
you're using github you can get some

497
00:16:25,920 --> 00:16:27,680
extra control by integrating your

498
00:16:27,680 --> 00:16:29,440
corporate active directory as an

499
00:16:29,440 --> 00:16:32,480
additional access control

500
00:16:32,480 --> 00:16:33,759
more broadly

501
00:16:33,759 --> 00:16:35,519
enforce strong and minimal access

502
00:16:35,519 --> 00:16:37,040
control policies

503
00:16:37,040 --> 00:16:39,279
only the project leads need owner

504
00:16:39,279 --> 00:16:41,120
permissions on the repo and all other

505
00:16:41,120 --> 00:16:43,600
permissions should follow basic minimum

506
00:16:43,600 --> 00:16:45,680
necessary access principles

507
00:16:45,680 --> 00:16:47,839
good our back is important not only on

508
00:16:47,839 --> 00:16:49,600
the repo hosting but on any other

509
00:16:49,600 --> 00:16:51,519
service or supporting infrastructure

510
00:16:51,519 --> 00:16:54,399
needed for your open source project

511
00:16:54,399 --> 00:16:56,880
lastly make sure you and your team are

512
00:16:56,880 --> 00:16:59,360
ready this means ensuring that everyone

513
00:16:59,360 --> 00:17:00,639
knows their role and their

514
00:17:00,639 --> 00:17:02,720
responsibilities you don't want to run

515
00:17:02,720 --> 00:17:04,319
into a situation where an important

516
00:17:04,319 --> 00:17:06,160
security disclosure goes ignored because

517
00:17:06,160 --> 00:17:08,160
no one texts no one checks the team

518
00:17:08,160 --> 00:17:09,439
inbox

519
00:17:09,439 --> 00:17:10,720
for things like code reviews and

520
00:17:10,720 --> 00:17:12,959
pre-release validations use the same

521
00:17:12,959 --> 00:17:15,359
rigor or better that you would for an

522
00:17:15,359 --> 00:17:17,119
internal project

523
00:17:17,119 --> 00:17:19,039
and be double sure about everything that

524
00:17:19,039 --> 00:17:21,760
you are doing have clear documentation

525
00:17:21,760 --> 00:17:23,599
and run books for your team

526
00:17:23,599 --> 00:17:25,679
but also be sure your policies and

527
00:17:25,679 --> 00:17:27,359
procedures for the devs are clearly

528
00:17:27,359 --> 00:17:29,440
written and easy to find

529
00:17:29,440 --> 00:17:31,039
i'd even go as far as saying you should

530
00:17:31,039 --> 00:17:33,280
force devs to read the policy and pass a

531
00:17:33,280 --> 00:17:35,679
mini quiz as part of the gating process

532
00:17:35,679 --> 00:17:37,840
before you grant them access to any

533
00:17:37,840 --> 00:17:39,600
public facing services

534
00:17:39,600 --> 00:17:42,000
remember everything they do will be out

535
00:17:42,000 --> 00:17:46,280
there for anyone to see

536
00:17:46,559 --> 00:17:48,240
so far we've discussed setting up your

537
00:17:48,240 --> 00:17:49,840
governance foundation and how to go

538
00:17:49,840 --> 00:17:52,480
about prepping a repo for release now

539
00:17:52,480 --> 00:17:54,000
let's take a look at the role security

540
00:17:54,000 --> 00:17:57,679
plays in the actual release process

541
00:17:58,640 --> 00:18:00,559
as we discussed earlier you need to do a

542
00:18:00,559 --> 00:18:02,160
full code review and audit of the

543
00:18:02,160 --> 00:18:04,480
project before it is released

544
00:18:04,480 --> 00:18:06,320
but be sure that your test code that's

545
00:18:06,320 --> 00:18:08,240
in the final state for that initial

546
00:18:08,240 --> 00:18:10,080
release

547
00:18:10,080 --> 00:18:11,919
if this is from an existing internal

548
00:18:11,919 --> 00:18:14,480
project do not rely on previous testing

549
00:18:14,480 --> 00:18:16,000
because the changes that you needed to

550
00:18:16,000 --> 00:18:17,600
make so that would be independent of

551
00:18:17,600 --> 00:18:19,280
your internal infrastructure could be

552
00:18:19,280 --> 00:18:20,720
significant

553
00:18:20,720 --> 00:18:22,400
as part of your review you should be

554
00:18:22,400 --> 00:18:24,000
looking at the code as well as any

555
00:18:24,000 --> 00:18:26,720
dependencies check is the team using

556
00:18:26,720 --> 00:18:28,320
libraries that are having constant

557
00:18:28,320 --> 00:18:31,280
security problems if so now is the right

558
00:18:31,280 --> 00:18:32,480
time to remind them about your bug

559
00:18:32,480 --> 00:18:34,320
bounty program about the dollar signs

560
00:18:34,320 --> 00:18:35,760
attached to that

561
00:18:35,760 --> 00:18:38,559
beyond that remember your reputation is

562
00:18:38,559 --> 00:18:41,120
at risk if the code relies upon duct

563
00:18:41,120 --> 00:18:43,520
tape especially around security you

564
00:18:43,520 --> 00:18:45,679
should push for substantive changes

565
00:18:45,679 --> 00:18:48,240
before allowing anything out the door

566
00:18:48,240 --> 00:18:51,039
lastly do one final review of variable

567
00:18:51,039 --> 00:18:52,799
names and comments

568
00:18:52,799 --> 00:18:55,200
this check should go beyond data leakage

569
00:18:55,200 --> 00:18:57,760
check that good comments are present or

570
00:18:57,760 --> 00:18:59,840
go ahead and add them you want to make

571
00:18:59,840 --> 00:19:02,320
clear callouts for any security risks

572
00:19:02,320 --> 00:19:03,360
and you want to make sure that if

573
00:19:03,360 --> 00:19:05,120
there's some kind of easy to trip up

574
00:19:05,120 --> 00:19:06,880
configuration that you have the proper

575
00:19:06,880 --> 00:19:09,200
documentation and context so people can

576
00:19:09,200 --> 00:19:12,240
properly stay secured

577
00:19:12,240 --> 00:19:13,760
your pre-release review should also

578
00:19:13,760 --> 00:19:15,919
include reviewing the documentation

579
00:19:15,919 --> 00:19:17,679
readme and anything else you might have

580
00:19:17,679 --> 00:19:19,520
in your repo that's not code

581
00:19:19,520 --> 00:19:21,679
check that every link points where you

582
00:19:21,679 --> 00:19:24,640
expect it is very easy to make a typo

583
00:19:24,640 --> 00:19:26,160
for something like a packages download

584
00:19:26,160 --> 00:19:27,200
link

585
00:19:27,200 --> 00:19:29,039
from experience i can tell you that

586
00:19:29,039 --> 00:19:31,200
these things do happen and bug bounty

587
00:19:31,200 --> 00:19:32,480
researchers know to look for these

588
00:19:32,480 --> 00:19:33,360
things

589
00:19:33,360 --> 00:19:37,039
save some money and check those links

590
00:19:37,039 --> 00:19:39,520
lastly you need to ensure the actual

591
00:19:39,520 --> 00:19:41,679
repo set up on github or other hosting

592
00:19:41,679 --> 00:19:43,919
provider is configured properly for

593
00:19:43,919 --> 00:19:46,000
example your dev team may want to allow

594
00:19:46,000 --> 00:19:48,160
wikis but this means that anyone can

595
00:19:48,160 --> 00:19:50,000
change your documentation without any

596
00:19:50,000 --> 00:19:51,440
approval process

597
00:19:51,440 --> 00:19:53,039
and that means that people can use your

598
00:19:53,039 --> 00:19:55,360
wiki for watering whole attacks such as

599
00:19:55,360 --> 00:19:57,039
directing people to download a fake

600
00:19:57,039 --> 00:20:00,000
malware infested version of your app

601
00:20:00,000 --> 00:20:01,039
instead

602
00:20:01,039 --> 00:20:03,200
opt for documentation in a folder inside

603
00:20:03,200 --> 00:20:05,440
of the main repo or set up another repo

604
00:20:05,440 --> 00:20:07,120
somewhere that enforces an approval

605
00:20:07,120 --> 00:20:09,360
workflow this enables the community to

606
00:20:09,360 --> 00:20:11,600
participate but for your org to have the

607
00:20:11,600 --> 00:20:14,240
final say

608
00:20:14,799 --> 00:20:16,559
and do yourself one more favor before

609
00:20:16,559 --> 00:20:19,360
going any further do one final access

610
00:20:19,360 --> 00:20:21,120
control check and make sure things are

611
00:20:21,120 --> 00:20:23,760
locked down

612
00:20:24,159 --> 00:20:26,320
by now you have done all your checks and

613
00:20:26,320 --> 00:20:27,840
you're ready to actually publish some

614
00:20:27,840 --> 00:20:30,240
code but be careful there's still some

615
00:20:30,240 --> 00:20:32,240
nuance in how you go forward

616
00:20:32,240 --> 00:20:34,240
first if you are taking an existing

617
00:20:34,240 --> 00:20:36,320
project and making it public i strongly

618
00:20:36,320 --> 00:20:38,159
recommend copying and pasting the code

619
00:20:38,159 --> 00:20:39,760
without the git folder and the git

620
00:20:39,760 --> 00:20:42,159
history the old history may include

621
00:20:42,159 --> 00:20:44,400
comments secrets internal email

622
00:20:44,400 --> 00:20:46,320
addresses and a lot of other juicy

623
00:20:46,320 --> 00:20:47,600
information

624
00:20:47,600 --> 00:20:49,360
even if you use a private repo on the

625
00:20:49,360 --> 00:20:51,520
git hosting provider create a brand new

626
00:20:51,520 --> 00:20:53,440
clean slate instead of just switching

627
00:20:53,440 --> 00:20:56,880
from private to public mode

628
00:20:57,200 --> 00:20:59,200
in addition remember to consider any

629
00:20:59,200 --> 00:21:01,200
supporting infrastructure like ci cd

630
00:21:01,200 --> 00:21:03,840
testing integrations etc you want to

631
00:21:03,840 --> 00:21:05,840
review the specific setup needed for

632
00:21:05,840 --> 00:21:07,120
this project

633
00:21:07,120 --> 00:21:08,480
keep in mind that this will introduce a

634
00:21:08,480 --> 00:21:11,360
new area of upkeep library and patch

635
00:21:11,360 --> 00:21:12,640
management

636
00:21:12,640 --> 00:21:14,080
if you haven't already

637
00:21:14,080 --> 00:21:15,120
think about how you might be able to

638
00:21:15,120 --> 00:21:16,880
ingest any logs from these apps and

639
00:21:16,880 --> 00:21:19,200
services for internal monitoring and

640
00:21:19,200 --> 00:21:21,760
processing

641
00:21:22,000 --> 00:21:23,679
in some cases you may just make the

642
00:21:23,679 --> 00:21:25,840
source code available but generally you

643
00:21:25,840 --> 00:21:27,440
will also host a package or binary

644
00:21:27,440 --> 00:21:29,039
somewhere like npm

645
00:21:29,039 --> 00:21:30,400
while you can let the project team set

646
00:21:30,400 --> 00:21:31,760
everything up review their

647
00:21:31,760 --> 00:21:33,440
configurations and be sure that there is

648
00:21:33,440 --> 00:21:36,080
a process to receive and monitor any and

649
00:21:36,080 --> 00:21:40,080
all alerts before going any further

650
00:21:43,200 --> 00:21:45,520
now before we continue i want to touch

651
00:21:45,520 --> 00:21:48,000
on one other point we have generally

652
00:21:48,000 --> 00:21:50,240
been focused on protecting your org but

653
00:21:50,240 --> 00:21:52,240
you have a responsibility to your

654
00:21:52,240 --> 00:21:54,480
project community even if you aren't a

655
00:21:54,480 --> 00:21:56,880
large well-resourced company this is the

656
00:21:56,880 --> 00:21:59,520
rule not the exception

657
00:21:59,520 --> 00:22:01,679
first remember that complexity is often

658
00:22:01,679 --> 00:22:03,039
the root cause for many security

659
00:22:03,039 --> 00:22:05,120
problems if you have a large confusing

660
00:22:05,120 --> 00:22:07,200
code base or one with many unnecessary

661
00:22:07,200 --> 00:22:09,760
dependencies you are adding risk

662
00:22:09,760 --> 00:22:11,360
it will be harder for people to properly

663
00:22:11,360 --> 00:22:13,520
set up and secure code and they are

664
00:22:13,520 --> 00:22:16,159
likely to miss steps as well

665
00:22:16,159 --> 00:22:17,440
instead

666
00:22:17,440 --> 00:22:19,760
influence the project team to decompose

667
00:22:19,760 --> 00:22:21,919
the application into plugable parts that

668
00:22:21,919 --> 00:22:23,840
can be more easily maintained and

669
00:22:23,840 --> 00:22:26,840
monitored

670
00:22:27,120 --> 00:22:28,960
from the security perspective you should

671
00:22:28,960 --> 00:22:30,880
aim to deliver code with secure defaults

672
00:22:30,880 --> 00:22:32,880
and secure sample configs your

673
00:22:32,880 --> 00:22:34,720
documentation should stress the

674
00:22:34,720 --> 00:22:36,240
importance of security and not say

675
00:22:36,240 --> 00:22:38,159
things like if security is important to

676
00:22:38,159 --> 00:22:40,640
you then do this

677
00:22:40,640 --> 00:22:42,799
now at the same time think about how you

678
00:22:42,799 --> 00:22:45,600
can make security easy and pluggable for

679
00:22:45,600 --> 00:22:47,760
example suggest using a secrets

680
00:22:47,760 --> 00:22:49,440
management integration rather than

681
00:22:49,440 --> 00:22:50,960
saying it's okay to put hard-coded

682
00:22:50,960 --> 00:22:52,960
passwords in a config file

683
00:22:52,960 --> 00:22:54,880
you may want to propose specific tech

684
00:22:54,880 --> 00:22:57,039
and services for hosting that could make

685
00:22:57,039 --> 00:22:59,039
things easier and less error-prone for

686
00:22:59,039 --> 00:23:01,360
all those diy-ers out there

687
00:23:01,360 --> 00:23:04,000
however good security should be flexible

688
00:23:04,000 --> 00:23:05,360
and plug-able

689
00:23:05,360 --> 00:23:07,120
securing your app shouldn't be reliant

690
00:23:07,120 --> 00:23:09,360
on a very specific tech stack no one

691
00:23:09,360 --> 00:23:12,000
outside your org uses

692
00:23:12,000 --> 00:23:14,320
overall you should be clear and explicit

693
00:23:14,320 --> 00:23:16,320
when it comes to security

694
00:23:16,320 --> 00:23:18,159
warn against the things that may be easy

695
00:23:18,159 --> 00:23:20,320
to do but they're not recommended from a

696
00:23:20,320 --> 00:23:23,200
security standpoint also if you are

697
00:23:23,200 --> 00:23:25,039
releasing an app with security gaps or

698
00:23:25,039 --> 00:23:26,720
security features which are not yet

699
00:23:26,720 --> 00:23:29,039
ready for prime time call these out

700
00:23:29,039 --> 00:23:30,720
explicitly

701
00:23:30,720 --> 00:23:32,960
it's okay to release open source code

702
00:23:32,960 --> 00:23:35,440
that isn't production ready but be clear

703
00:23:35,440 --> 00:23:37,520
and provide appropriate guidance and

704
00:23:37,520 --> 00:23:38,799
warnings

705
00:23:38,799 --> 00:23:40,799
remember security should never be left

706
00:23:40,799 --> 00:23:42,559
as an exercise to the reader

707
00:23:42,559 --> 00:23:45,760
or the downstream user

708
00:23:46,960 --> 00:23:48,720
all right congratulations you've now

709
00:23:48,720 --> 00:23:50,400
done your part and released some useful

710
00:23:50,400 --> 00:23:52,880
and hopefully secure open source code

711
00:23:52,880 --> 00:23:54,880
however you need to remember that the

712
00:23:54,880 --> 00:23:56,960
project is living code it must be

713
00:23:56,960 --> 00:23:58,880
treated the same way as any in-service

714
00:23:58,880 --> 00:24:02,159
app that you use internally

715
00:24:02,720 --> 00:24:04,880
let's start with the basics

716
00:24:04,880 --> 00:24:06,400
one of the core principles to remember

717
00:24:06,400 --> 00:24:08,880
is the no dumping rule

718
00:24:08,880 --> 00:24:10,480
the point of open source is to share

719
00:24:10,480 --> 00:24:12,400
your discarded old projects but to share

720
00:24:12,400 --> 00:24:13,840
something useful and allow people to

721
00:24:13,840 --> 00:24:15,120
contribute back

722
00:24:15,120 --> 00:24:17,120
when a project is ignored it makes the

723
00:24:17,120 --> 00:24:18,880
community upset and that can have

724
00:24:18,880 --> 00:24:20,960
negative repercussions for your org

725
00:24:20,960 --> 00:24:24,640
going as far as a potential cyber attack

726
00:24:24,640 --> 00:24:26,320
if the project team isn't going to

727
00:24:26,320 --> 00:24:28,000
actively monitor what's going on it

728
00:24:28,000 --> 00:24:29,440
should not fall on the security team's

729
00:24:29,440 --> 00:24:31,120
shoulders you should be clear with your

730
00:24:31,120 --> 00:24:33,360
developers and their managers that

731
00:24:33,360 --> 00:24:36,320
unsupported projects will be shut down

732
00:24:36,320 --> 00:24:37,679
this is why gaining manager and

733
00:24:37,679 --> 00:24:40,080
leadership buy-in early on as part of

734
00:24:40,080 --> 00:24:43,520
the approval process is so critical

735
00:24:43,520 --> 00:24:45,760
appropriate time and resources must be

736
00:24:45,760 --> 00:24:48,960
dedicated to the project

737
00:24:49,600 --> 00:24:51,440
with the right support in place you can

738
00:24:51,440 --> 00:24:53,760
be proactive and properly engage your

739
00:24:53,760 --> 00:24:55,200
projects community

740
00:24:55,200 --> 00:24:56,640
this means more than just monitoring

741
00:24:56,640 --> 00:24:58,480
issues and pull requests you need to

742
00:24:58,480 --> 00:24:59,760
ensure you have a fleshed-out

743
00:24:59,760 --> 00:25:01,520
communications plan

744
00:25:01,520 --> 00:25:03,120
for example let's say you need to

745
00:25:03,120 --> 00:25:04,640
disclose a major security bug and

746
00:25:04,640 --> 00:25:06,000
release an update

747
00:25:06,000 --> 00:25:08,400
how will you let people know

748
00:25:08,400 --> 00:25:09,600
this could include notes on your

749
00:25:09,600 --> 00:25:11,120
project's readme

750
00:25:11,120 --> 00:25:12,640
using some kind of notification system

751
00:25:12,640 --> 00:25:13,919
built into the package management

752
00:25:13,919 --> 00:25:18,080
platform or simply using a mailing list

753
00:25:18,080 --> 00:25:20,159
beyond code related issues you need to

754
00:25:20,159 --> 00:25:22,000
have a plan to periodically review all

755
00:25:22,000 --> 00:25:23,679
the supporting infrastructure like your

756
00:25:23,679 --> 00:25:26,400
ci cd pipeline and package hosting

757
00:25:26,400 --> 00:25:27,919
the project team should be tasked with

758
00:25:27,919 --> 00:25:30,080
upkeep but security should do their own

759
00:25:30,080 --> 00:25:32,240
checks periodically as well

760
00:25:32,240 --> 00:25:34,720
actions may include upgrades reviewing

761
00:25:34,720 --> 00:25:37,600
settings and changing access control

762
00:25:37,600 --> 00:25:39,600
permissions

763
00:25:39,600 --> 00:25:41,520
people come and go and change teams all

764
00:25:41,520 --> 00:25:42,480
the time

765
00:25:42,480 --> 00:25:44,320
make sure that permissions are current

766
00:25:44,320 --> 00:25:46,159
and appropriate

767
00:25:46,159 --> 00:25:47,760
now all of this is just a starting point

768
00:25:47,760 --> 00:25:49,600
to build out your monitoring strategy

769
00:25:49,600 --> 00:25:51,039
but remember that you need to treat your

770
00:25:51,039 --> 00:25:53,120
open source projects with the same rigor

771
00:25:53,120 --> 00:25:57,639
that you would your internal software

772
00:25:57,679 --> 00:25:59,679
now another component of monitoring

773
00:25:59,679 --> 00:26:01,279
requires going beyond your code and

774
00:26:01,279 --> 00:26:02,559
services

775
00:26:02,559 --> 00:26:04,640
as your project becomes more popular

776
00:26:04,640 --> 00:26:05,919
there's a heightened risk that a

777
00:26:05,919 --> 00:26:07,840
malicious actor will try to impersonate

778
00:26:07,840 --> 00:26:10,720
you for nefarious ends

779
00:26:10,720 --> 00:26:12,320
i hope you didn't choose a hard spell

780
00:26:12,320 --> 00:26:13,919
name for your project but even if you

781
00:26:13,919 --> 00:26:15,600
use something simple you need to be on

782
00:26:15,600 --> 00:26:17,679
the lookout for typo squatting

783
00:26:17,679 --> 00:26:19,600
all an attacker needs to do is look for

784
00:26:19,600 --> 00:26:21,520
a typo in some blog post or pump up

785
00:26:21,520 --> 00:26:23,679
their own fake tutorial linking to a

786
00:26:23,679 --> 00:26:25,360
fake version of your code or some scam

787
00:26:25,360 --> 00:26:26,400
site

788
00:26:26,400 --> 00:26:28,159
this not only endangers your project

789
00:26:28,159 --> 00:26:30,400
community but can but it can impact your

790
00:26:30,400 --> 00:26:31,679
reputation

791
00:26:31,679 --> 00:26:33,760
related to this look for unofficial

792
00:26:33,760 --> 00:26:35,360
mirrors on other platforms you're not

793
00:26:35,360 --> 00:26:38,240
using forks are of course okay but even

794
00:26:38,240 --> 00:26:39,840
if the code is clean today there is

795
00:26:39,840 --> 00:26:41,360
always a chance an attacker is just

796
00:26:41,360 --> 00:26:43,279
waiting for volume before slipping in a

797
00:26:43,279 --> 00:26:45,760
back door be sure any mirrors you don't

798
00:26:45,760 --> 00:26:49,600
manage do not claim to be official

799
00:26:49,600 --> 00:26:51,200
if and when your project gets really big

800
00:26:51,200 --> 00:26:53,200
and popular you will likely set up some

801
00:26:53,200 --> 00:26:55,039
social media profiles or establish an

802
00:26:55,039 --> 00:26:57,520
official presence on a forum like reddit

803
00:26:57,520 --> 00:26:58,960
you may opt not to go through all that

804
00:26:58,960 --> 00:27:01,120
effort but you still want to monitor

805
00:27:01,120 --> 00:27:03,520
what is going on to weed out scammers

806
00:27:03,520 --> 00:27:05,840
and to counteract bad security advice

807
00:27:05,840 --> 00:27:07,679
you may also find that people go to some

808
00:27:07,679 --> 00:27:09,120
place like stack overflow and

809
00:27:09,120 --> 00:27:11,039
inadvertently expose some security issue

810
00:27:11,039 --> 00:27:12,640
while posting their question

811
00:27:12,640 --> 00:27:14,480
so you need to keep your eyes open and

812
00:27:14,480 --> 00:27:17,440
cast a wide net

813
00:27:18,080 --> 00:27:20,159
speaking of security issues hopefully

814
00:27:20,159 --> 00:27:21,760
you remember to establish a responsible

815
00:27:21,760 --> 00:27:24,320
disclosure policy and process

816
00:27:24,320 --> 00:27:25,840
whether you have a fancy bug bounty

817
00:27:25,840 --> 00:27:27,600
program with a submission form or you

818
00:27:27,600 --> 00:27:29,760
just direct people email security at

819
00:27:29,760 --> 00:27:32,320
your org be realistic and realize that

820
00:27:32,320 --> 00:27:33,840
people may reach out to you in other

821
00:27:33,840 --> 00:27:34,880
ways

822
00:27:34,880 --> 00:27:36,799
as a general best practice you want to

823
00:27:36,799 --> 00:27:38,480
ensure that security is included in

824
00:27:38,480 --> 00:27:40,559
emails sent to addresses like root at

825
00:27:40,559 --> 00:27:43,279
your domain and webmaster at your domain

826
00:27:43,279 --> 00:27:44,960
some people may also look up the whois

827
00:27:44,960 --> 00:27:46,559
information for your website and use

828
00:27:46,559 --> 00:27:49,440
that to try to reach out to you

829
00:27:49,440 --> 00:27:51,600
now on the other hand people may raise a

830
00:27:51,600 --> 00:27:53,760
pr or raise an issue directly because

831
00:27:53,760 --> 00:27:55,039
they don't realize it's actually a

832
00:27:55,039 --> 00:27:56,640
security issue

833
00:27:56,640 --> 00:27:58,000
some other people may not agree with a

834
00:27:58,000 --> 00:28:00,159
responsible disclosure policy some

835
00:28:00,159 --> 00:28:01,840
people may philosophically believe the

836
00:28:01,840 --> 00:28:03,679
right approach is just to post a

837
00:28:03,679 --> 00:28:06,799
security problem right there in public

838
00:28:06,799 --> 00:28:08,240
while you hope people don't go down this

839
00:28:08,240 --> 00:28:10,240
path it will happen

840
00:28:10,240 --> 00:28:11,840
be sure that the owning team is staying

841
00:28:11,840 --> 00:28:13,360
on top of things and knows when to bring

842
00:28:13,360 --> 00:28:15,520
in a security team

843
00:28:15,520 --> 00:28:17,200
you should also investigate ways to

844
00:28:17,200 --> 00:28:19,760
ingest pr and issue data directly into

845
00:28:19,760 --> 00:28:21,600
your internal intelligence and analysis

846
00:28:21,600 --> 00:28:22,880
tools

847
00:28:22,880 --> 00:28:24,799
now if someone does report an issue

848
00:28:24,799 --> 00:28:27,039
publicly on your tracker resist the urge

849
00:28:27,039 --> 00:28:29,279
to take it down this will reflect poorly

850
00:28:29,279 --> 00:28:30,640
to the community

851
00:28:30,640 --> 00:28:33,200
instead ensure this issue is properly

852
00:28:33,200 --> 00:28:36,159
escalated internally to get quick action

853
00:28:36,159 --> 00:28:38,000
if your platform supports tagging issues

854
00:28:38,000 --> 00:28:40,320
and prs show that you are in the know

855
00:28:40,320 --> 00:28:42,320
and add a security tag for visibility

856
00:28:42,320 --> 00:28:44,799
and a call out for help for issues which

857
00:28:44,799 --> 00:28:46,720
were initially disclosed privately when

858
00:28:46,720 --> 00:28:48,799
you do post a fix you should also use

859
00:28:48,799 --> 00:28:51,120
the security tag as part of a call to

860
00:28:51,120 --> 00:28:54,080
action for upgrades

861
00:28:54,080 --> 00:28:55,520
above all else you need to always

862
00:28:55,520 --> 00:28:57,440
remember that when people are disclosing

863
00:28:57,440 --> 00:28:59,600
a security bug they are doing you a

864
00:28:59,600 --> 00:29:00,559
favor

865
00:29:00,559 --> 00:29:02,720
they could instead attack you or sell it

866
00:29:02,720 --> 00:29:05,360
off to a vendor or a malicious actor

867
00:29:05,360 --> 00:29:07,440
therefore always remember to properly

868
00:29:07,440 --> 00:29:10,080
engage people who report security bugs

869
00:29:10,080 --> 00:29:11,440
keep the reporter in the loop as you

870
00:29:11,440 --> 00:29:13,200
work through the issue and be polite and

871
00:29:13,200 --> 00:29:14,159
thankful

872
00:29:14,159 --> 00:29:16,080
even if they are rude or didn't give you

873
00:29:16,080 --> 00:29:18,399
the most coherent bug report

874
00:29:18,399 --> 00:29:20,240
when people are ignored they will

875
00:29:20,240 --> 00:29:22,080
eventually get tired of waiting and that

876
00:29:22,080 --> 00:29:24,880
could lead to a public disclosure

877
00:29:24,880 --> 00:29:26,640
coupled with some massive shade in that

878
00:29:26,640 --> 00:29:28,960
blog post right

879
00:29:28,960 --> 00:29:30,399
you want to control the narrative and

880
00:29:30,399 --> 00:29:31,760
demonstrate that your code is great and

881
00:29:31,760 --> 00:29:35,360
your org truly cares about security

882
00:29:35,360 --> 00:29:37,840
lastly always remember this is publicly

883
00:29:37,840 --> 00:29:39,440
accessible code

884
00:29:39,440 --> 00:29:41,279
even if the report was non-public

885
00:29:41,279 --> 00:29:43,600
someone else may discover the same thing

886
00:29:43,600 --> 00:29:45,840
it is imperative that the owning team

887
00:29:45,840 --> 00:29:48,080
understands the responsibility to act

888
00:29:48,080 --> 00:29:51,840
promptly to security reports

889
00:29:52,799 --> 00:29:54,559
hopefully your project meets a need and

890
00:29:54,559 --> 00:29:56,960
finds a great community but tech changes

891
00:29:56,960 --> 00:29:58,880
quickly so you need to be prepared for

892
00:29:58,880 --> 00:30:00,960
end-of-life considerations

893
00:30:00,960 --> 00:30:03,279
internally you may move on to a new

894
00:30:03,279 --> 00:30:05,520
technology or perhaps someone forked

895
00:30:05,520 --> 00:30:08,320
your project and now their new project

896
00:30:08,320 --> 00:30:09,840
is better and more advanced than your

897
00:30:09,840 --> 00:30:11,200
original

898
00:30:11,200 --> 00:30:12,960
whatever the case may be you need to

899
00:30:12,960 --> 00:30:14,559
have a game plan for shutting down your

900
00:30:14,559 --> 00:30:16,640
project at the appropriate time in order

901
00:30:16,640 --> 00:30:19,279
to do right by the community and to

902
00:30:19,279 --> 00:30:21,679
properly manage your internal resources

903
00:30:21,679 --> 00:30:24,240
and time

904
00:30:25,360 --> 00:30:27,200
before focusing on your internal needs i

905
00:30:27,200 --> 00:30:28,880
want to talk about your role in hosting

906
00:30:28,880 --> 00:30:31,279
a community project whether software is

907
00:30:31,279 --> 00:30:32,640
free or commercial

908
00:30:32,640 --> 00:30:34,240
no one likes hearing the support ended

909
00:30:34,240 --> 00:30:35,279
yesterday

910
00:30:35,279 --> 00:30:36,640
no one likes to scramble to find a

911
00:30:36,640 --> 00:30:38,480
replacement or risk being stuck with

912
00:30:38,480 --> 00:30:40,480
buggy and vulnerable code

913
00:30:40,480 --> 00:30:41,360
worse

914
00:30:41,360 --> 00:30:43,520
this is open source software you

915
00:30:43,520 --> 00:30:45,279
probably have community members who are

916
00:30:45,279 --> 00:30:47,120
investing their own time and effort to

917
00:30:47,120 --> 00:30:49,279
help you and everyone else

918
00:30:49,279 --> 00:30:51,440
you do not want to alienate people this

919
00:30:51,440 --> 00:30:53,760
could be a really big misstep

920
00:30:53,760 --> 00:30:55,440
with someone in the community about to

921
00:30:55,440 --> 00:30:57,919
responsibly disclose the security bug

922
00:30:57,919 --> 00:30:59,519
is some dev out there a potential new

923
00:30:59,519 --> 00:31:01,600
recruit for your company

924
00:31:01,600 --> 00:31:03,200
keeping this in mind you need to set up

925
00:31:03,200 --> 00:31:05,519
a plan and timeline for the deprecation

926
00:31:05,519 --> 00:31:06,799
of your project

927
00:31:06,799 --> 00:31:08,640
this allows people time to react and

928
00:31:08,640 --> 00:31:11,120
make their own plans

929
00:31:11,120 --> 00:31:12,720
you should also be thinking about

930
00:31:12,720 --> 00:31:14,480
forking or maybe suggesting a good

931
00:31:14,480 --> 00:31:16,240
alternate that downstream users can

932
00:31:16,240 --> 00:31:18,720
migrate to

933
00:31:18,720 --> 00:31:20,640
as part of the process clearly

934
00:31:20,640 --> 00:31:22,159
communicate the point in time when you

935
00:31:22,159 --> 00:31:23,679
will be fully shutting down and ending

936
00:31:23,679 --> 00:31:25,679
support versus possibly just stopping

937
00:31:25,679 --> 00:31:27,600
new pull requests and responding to bug

938
00:31:27,600 --> 00:31:29,279
reports

939
00:31:29,279 --> 00:31:30,960
an important consideration as you start

940
00:31:30,960 --> 00:31:32,399
down this road is whether you're going

941
00:31:32,399 --> 00:31:34,240
to keep using the code internally after

942
00:31:34,240 --> 00:31:35,919
the public deprecation

943
00:31:35,919 --> 00:31:38,480
remember the code will always be public

944
00:31:38,480 --> 00:31:40,720
so in most cases you should not stop

945
00:31:40,720 --> 00:31:42,720
external support unless you are also

946
00:31:42,720 --> 00:31:44,159
deprecating and decommissioning the

947
00:31:44,159 --> 00:31:47,840
software internally as well

948
00:31:49,039 --> 00:31:50,480
a topic that often comes up in

949
00:31:50,480 --> 00:31:52,159
discussions about decommission is

950
00:31:52,159 --> 00:31:53,919
whether you can or should transfer

951
00:31:53,919 --> 00:31:55,440
ownership of the project

952
00:31:55,440 --> 00:31:58,080
99 of the time this is a bad idea and

953
00:31:58,080 --> 00:31:59,760
should be explicitly prohibited in your

954
00:31:59,760 --> 00:32:00,799
policy

955
00:32:00,799 --> 00:32:02,640
you can see several cases in the news

956
00:32:02,640 --> 00:32:04,000
where a project owner transferred

957
00:32:04,000 --> 00:32:05,760
ownership and then the new maintainer

958
00:32:05,760 --> 00:32:07,039
turned around and did something

959
00:32:07,039 --> 00:32:09,360
nefarious like adding trackers or crypto

960
00:32:09,360 --> 00:32:10,799
miners

961
00:32:10,799 --> 00:32:12,000
even if you make a big announcement

962
00:32:12,000 --> 00:32:13,840
about the transfer some people won't

963
00:32:13,840 --> 00:32:16,159
hear it and you end up with upset users

964
00:32:16,159 --> 00:32:19,519
who still think that you are responsible

965
00:32:19,519 --> 00:32:20,960
you need to remember that there is a lot

966
00:32:20,960 --> 00:32:23,039
of supporting infrastructure as well

967
00:32:23,039 --> 00:32:24,960
like package management and testing to

968
00:32:24,960 --> 00:32:27,279
consider it can be very hard to decouple

969
00:32:27,279 --> 00:32:29,679
everything without risking leakage or

970
00:32:29,679 --> 00:32:31,120
unauthorized access to some of your

971
00:32:31,120 --> 00:32:33,919
internal systems

972
00:32:33,919 --> 00:32:35,519
the whole point of free and open source

973
00:32:35,519 --> 00:32:36,880
software is that someone can take the

974
00:32:36,880 --> 00:32:38,559
code and run with it right

975
00:32:38,559 --> 00:32:39,760
if there are people who are interested

976
00:32:39,760 --> 00:32:41,679
in taking your project forward let them

977
00:32:41,679 --> 00:32:43,440
fork it and let them establish a new

978
00:32:43,440 --> 00:32:44,720
identity

979
00:32:44,720 --> 00:32:46,720
on first glance it may seem like you are

980
00:32:46,720 --> 00:32:48,720
making developers lives easier if you

981
00:32:48,720 --> 00:32:51,039
keep all the names and package locations

982
00:32:51,039 --> 00:32:51,919
the same

983
00:32:51,919 --> 00:32:53,919
but this obscures a change and prevents

984
00:32:53,919 --> 00:32:56,559
people from making an informed decision

985
00:32:56,559 --> 00:32:59,360
now if you have a community you can seek

986
00:32:59,360 --> 00:33:01,039
out someone to fork the project and take

987
00:33:01,039 --> 00:33:02,799
it forward you may even choose to

988
00:33:02,799 --> 00:33:04,960
endorse a particular fork

989
00:33:04,960 --> 00:33:06,960
but at the end of the day downstream

990
00:33:06,960 --> 00:33:08,640
users are responsible for managing their

991
00:33:08,640 --> 00:33:11,039
own dependencies this means doing the

992
00:33:11,039 --> 00:33:12,640
necessary research to determine what

993
00:33:12,640 --> 00:33:14,960
action to take when a dependency is no

994
00:33:14,960 --> 00:33:17,760
longer supported

995
00:33:19,519 --> 00:33:21,039
now that you have a plan and you are

996
00:33:21,039 --> 00:33:23,120
ready to turn things off let's take a

997
00:33:23,120 --> 00:33:24,640
look at some of the actions you actually

998
00:33:24,640 --> 00:33:25,919
need to take

999
00:33:25,919 --> 00:33:27,919
first document and communicate

1000
00:33:27,919 --> 00:33:30,559
everywhere this means update your readme

1001
00:33:30,559 --> 00:33:33,120
and update your website

1002
00:33:33,120 --> 00:33:35,200
with many package management systems you

1003
00:33:35,200 --> 00:33:37,279
can mark a package as deprecated or no

1004
00:33:37,279 --> 00:33:38,799
longer supported

1005
00:33:38,799 --> 00:33:40,720
research these mechanisms so you have

1006
00:33:40,720 --> 00:33:42,080
the greatest chance of people learning

1007
00:33:42,080 --> 00:33:44,320
about your decommissioned plans

1008
00:33:44,320 --> 00:33:45,919
i also recommend that you develop a set

1009
00:33:45,919 --> 00:33:48,320
of templates you use for deprecation and

1010
00:33:48,320 --> 00:33:50,320
decommission processes

1011
00:33:50,320 --> 00:33:52,080
the teams can then use the border plate

1012
00:33:52,080 --> 00:33:53,760
in the readme and elsewhere

1013
00:33:53,760 --> 00:33:55,200
this will help to ensure that everything

1014
00:33:55,200 --> 00:33:56,880
is communicated appropriately and

1015
00:33:56,880 --> 00:33:58,159
consistently

1016
00:33:58,159 --> 00:33:59,519
now to get you started check out the

1017
00:33:59,519 --> 00:34:01,279
templates and the resources at the end

1018
00:34:01,279 --> 00:34:04,159
of this presentation

1019
00:34:04,640 --> 00:34:06,080
when it finally comes time to pull the

1020
00:34:06,080 --> 00:34:08,320
plug put your repo into read only mode

1021
00:34:08,320 --> 00:34:10,480
on your project hosting provider

1022
00:34:10,480 --> 00:34:12,079
even if you plan to delete the repo long

1023
00:34:12,079 --> 00:34:14,639
term leave it up for a while to help

1024
00:34:14,639 --> 00:34:16,560
avoid any confusion

1025
00:34:16,560 --> 00:34:18,800
in addition remove all the security

1026
00:34:18,800 --> 00:34:20,960
groups access permissions to the repo to

1027
00:34:20,960 --> 00:34:22,639
prevent unexpected changes after

1028
00:34:22,639 --> 00:34:24,159
decommission

1029
00:34:24,159 --> 00:34:26,399
if some last minute or postmortem update

1030
00:34:26,399 --> 00:34:28,320
really is needed you can always add

1031
00:34:28,320 --> 00:34:32,159
someone's permissions back temporarily

1032
00:34:32,159 --> 00:34:34,239
also you need to ensure that you have an

1033
00:34:34,239 --> 00:34:36,320
accurate inventory of all the supporting

1034
00:34:36,320 --> 00:34:37,839
infrastructure and services that you're

1035
00:34:37,839 --> 00:34:38,960
using

1036
00:34:38,960 --> 00:34:41,040
take appropriate action to turn off and

1037
00:34:41,040 --> 00:34:43,280
cancel these services where possible

1038
00:34:43,280 --> 00:34:45,760
if you are leaving things online ensure

1039
00:34:45,760 --> 00:34:48,000
all comms notifications are redirected

1040
00:34:48,000 --> 00:34:50,480
to the security team for review

1041
00:34:50,480 --> 00:34:52,639
remember an active service that is not

1042
00:34:52,639 --> 00:34:54,560
maintained is likely to accrue new

1043
00:34:54,560 --> 00:34:57,040
security phones over time

1044
00:34:57,040 --> 00:34:58,079
lastly

1045
00:34:58,079 --> 00:35:00,079
even after everything is said and done

1046
00:35:00,079 --> 00:35:01,599
you should still periodically monitor

1047
00:35:01,599 --> 00:35:03,839
and expect some security reports be

1048
00:35:03,839 --> 00:35:05,440
prepared to take action when it makes

1049
00:35:05,440 --> 00:35:07,760
sense

1050
00:35:08,560 --> 00:35:09,920
we've now gone through the full life

1051
00:35:09,920 --> 00:35:12,000
cycle of an open source project

1052
00:35:12,000 --> 00:35:13,440
and looked at how we can integrate

1053
00:35:13,440 --> 00:35:16,160
security as more and more organizations

1054
00:35:16,160 --> 00:35:18,079
see the value of releasing their code as

1055
00:35:18,079 --> 00:35:20,079
free and open source software it is

1056
00:35:20,079 --> 00:35:22,000
important to appropriately consider and

1057
00:35:22,000 --> 00:35:23,599
manage risk

1058
00:35:23,599 --> 00:35:25,359
planning how to roll out and secure your

1059
00:35:25,359 --> 00:35:27,280
open source process is going to take

1060
00:35:27,280 --> 00:35:30,079
some time and a good amount of thought

1061
00:35:30,079 --> 00:35:32,160
however it is really important to set

1062
00:35:32,160 --> 00:35:34,640
firm expectations and to ensure you have

1063
00:35:34,640 --> 00:35:36,800
good practices and procedures ready to

1064
00:35:36,800 --> 00:35:38,320
go

1065
00:35:38,320 --> 00:35:40,000
remember you're putting something out

1066
00:35:40,000 --> 00:35:41,200
there that is fully visible and

1067
00:35:41,200 --> 00:35:43,520
transparent you don't have any firewall

1068
00:35:43,520 --> 00:35:46,320
to hide behind

1069
00:35:46,720 --> 00:35:48,000
go into all of this knowing that

1070
00:35:48,000 --> 00:35:49,599
securing the code is an important part

1071
00:35:49,599 --> 00:35:52,160
of the process but not the only part

1072
00:35:52,160 --> 00:35:53,520
you will likely depend on various

1073
00:35:53,520 --> 00:35:55,599
services and infrastructure to set up

1074
00:35:55,599 --> 00:35:57,760
and maintain your open source project

1075
00:35:57,760 --> 00:36:00,000
and this means more things out there to

1076
00:36:00,000 --> 00:36:02,720
secure and protect

1077
00:36:02,720 --> 00:36:04,400
and once you've set everything up you

1078
00:36:04,400 --> 00:36:06,400
need to be continually monitoring and

1079
00:36:06,400 --> 00:36:08,160
you need continually involved security

1080
00:36:08,160 --> 00:36:09,920
all the way through decommissioning and

1081
00:36:09,920 --> 00:36:12,480
turning off the lights

1082
00:36:12,480 --> 00:36:14,960
lastly open source is about more than

1083
00:36:14,960 --> 00:36:17,200
code it is important that you properly

1084
00:36:17,200 --> 00:36:19,119
manage communication in general and more

1085
00:36:19,119 --> 00:36:21,280
specifically about security and that

1086
00:36:21,280 --> 00:36:23,599
means in both directions you want people

1087
00:36:23,599 --> 00:36:25,440
to report issues to you and you have a

1088
00:36:25,440 --> 00:36:28,160
responsibility to downstream users to do

1089
00:36:28,160 --> 00:36:31,119
your best to help them stay secure

1090
00:36:31,119 --> 00:36:33,040
if you keep all this in mind you can

1091
00:36:33,040 --> 00:36:35,200
help add value to your orgs open source

1092
00:36:35,200 --> 00:36:38,480
efforts and help keep everyone secure

1093
00:36:38,480 --> 00:36:39,520
now

1094
00:36:39,520 --> 00:36:43,920
go out there and release some code

