1
00:00:02,879 --> 00:00:05,839
arcsan is now digital.ai

2
00:00:05,839 --> 00:00:07,759
join us at our booth in the virtual expo

3
00:00:07,759 --> 00:00:10,080
hall to learn how our app protection

4
00:00:10,080 --> 00:00:12,080
white box cryptography and threat

5
00:00:12,080 --> 00:00:14,080
analytics solutions can help you stay

6
00:00:14,080 --> 00:00:18,320
ahead of the evolving threat landscape

7
00:00:20,640 --> 00:00:23,119
hi i'm steve springett i spend a

8
00:00:23,119 --> 00:00:25,199
tremendous amount of time researching

9
00:00:25,199 --> 00:00:27,680
and working on projects to help improve

10
00:00:27,680 --> 00:00:30,000
software supply chains i'm the creator

11
00:00:30,000 --> 00:00:32,238
of dependency track a flagship oauth

12
00:00:32,238 --> 00:00:34,399
project that identifies risk to the use

13
00:00:34,399 --> 00:00:36,559
of software below materials i'm also the

14
00:00:36,559 --> 00:00:38,640
creator of one such software build

15
00:00:38,640 --> 00:00:41,200
material spec called cyclone dx

16
00:00:41,200 --> 00:00:43,200
i'm the co-author of and project lead

17
00:00:43,200 --> 00:00:45,200
for this project the oauth software

18
00:00:45,200 --> 00:00:47,120
component verification standard and i'm

19
00:00:47,120 --> 00:00:48,800
also part of the team creating the

20
00:00:48,800 --> 00:00:51,120
package url specification

21
00:00:51,120 --> 00:00:53,199
i was one of the first contributors to

22
00:00:53,199 --> 00:00:55,600
owasp dependency check going back to

23
00:00:55,600 --> 00:00:59,199
2012 or 2013 and i participate in a lot

24
00:00:59,199 --> 00:01:01,359
of working groups discussing software

25
00:01:01,359 --> 00:01:03,920
transparency now all of that is

26
00:01:03,920 --> 00:01:06,320
extracurricular what i actually get paid

27
00:01:06,320 --> 00:01:08,880
to do is software security architecture

28
00:01:08,880 --> 00:01:11,600
at servicenow

29
00:01:11,600 --> 00:01:14,320
i'm jc hertz and my main focus is

30
00:01:14,320 --> 00:01:15,920
software supply chain assurance for

31
00:01:15,920 --> 00:01:18,000
critical infrastructure

32
00:01:18,000 --> 00:01:20,159
so these are systems we rely on for

33
00:01:20,159 --> 00:01:21,200
safety

34
00:01:21,200 --> 00:01:24,320
energy healthcare telecommunications and

35
00:01:24,320 --> 00:01:26,960
national defense they're more or less

36
00:01:26,960 --> 00:01:28,880
under constant attack

37
00:01:28,880 --> 00:01:30,560
by criminal organizations and state

38
00:01:30,560 --> 00:01:32,799
actors so basically i'm using software

39
00:01:32,799 --> 00:01:34,560
supply chain assurance at scale to try

40
00:01:34,560 --> 00:01:37,119
to prevent the zombie apocalypse

41
00:01:37,119 --> 00:01:38,240
also

42
00:01:38,240 --> 00:01:39,840
i co-chair a department of commerce

43
00:01:39,840 --> 00:01:41,200
working group on software bill of

44
00:01:41,200 --> 00:01:43,680
materials which has contributed to an s

45
00:01:43,680 --> 00:01:46,079
bomb requirement for medical devices

46
00:01:46,079 --> 00:01:48,479
to have an s-bomb as a condition of fda

47
00:01:48,479 --> 00:01:49,759
approval

48
00:01:49,759 --> 00:01:52,000
and use in the united states let's start

49
00:01:52,000 --> 00:01:54,560
off with a very simple question how

50
00:01:54,560 --> 00:01:56,240
confident are you in knowing the

51
00:01:56,240 --> 00:01:58,560
software you think you're building is

52
00:01:58,560 --> 00:02:00,799
actually what's being produced now i

53
00:02:00,799 --> 00:02:02,719
want you to think about all the things

54
00:02:02,719 --> 00:02:04,640
that are involved in making this happen

55
00:02:04,640 --> 00:02:06,880
there's continuous integration servers

56
00:02:06,880 --> 00:02:10,000
source code repositories sdks compilers

57
00:02:10,000 --> 00:02:12,400
package managers package repositories

58
00:02:12,400 --> 00:02:14,560
distribution networks and the operating

59
00:02:14,560 --> 00:02:16,800
system network transports and services

60
00:02:16,800 --> 00:02:19,599
that tie everything together now how

61
00:02:19,599 --> 00:02:21,520
confident are you in knowing the

62
00:02:21,520 --> 00:02:23,760
software you think you're building is

63
00:02:23,760 --> 00:02:25,680
actually what's being produced after all

64
00:02:25,680 --> 00:02:27,599
you have a build script and a repeatable

65
00:02:27,599 --> 00:02:31,280
build what could possibly go wrong

66
00:02:31,280 --> 00:02:33,200
even if you do have a handle on the

67
00:02:33,200 --> 00:02:35,040
pedigree and provenance of your own

68
00:02:35,040 --> 00:02:37,760
software can you say the same for your

69
00:02:37,760 --> 00:02:39,519
suppliers

70
00:02:39,519 --> 00:02:40,879
most of the software used by

71
00:02:40,879 --> 00:02:43,440
organizations isn't produced in-house

72
00:02:43,440 --> 00:02:45,200
and it isn't provided as open source

73
00:02:45,200 --> 00:02:46,080
code

74
00:02:46,080 --> 00:02:47,680
it's vendor products

75
00:02:47,680 --> 00:02:51,120
outsourced applications managed services

76
00:02:51,120 --> 00:02:55,040
we all love devops and sec devops

77
00:02:55,040 --> 00:02:57,519
but at some point this preoccupation

78
00:02:57,519 --> 00:02:59,519
with first party pipelines is like

79
00:02:59,519 --> 00:03:00,879
looking under the lamp post for your

80
00:03:00,879 --> 00:03:03,200
keys because that's where the light is

81
00:03:03,200 --> 00:03:05,680
not where you lost them

82
00:03:05,680 --> 00:03:09,280
a long long time ago back in 2013 owasp

83
00:03:09,280 --> 00:03:13,040
added a new entry to the owas top 10 a9

84
00:03:13,040 --> 00:03:14,400
using components with known

85
00:03:14,400 --> 00:03:17,040
vulnerabilities now security researchers

86
00:03:17,040 --> 00:03:19,200
always knew that using third-party and

87
00:03:19,200 --> 00:03:22,239
open source components carried risk but

88
00:03:22,239 --> 00:03:24,400
it wasn't until 2012 when aspect

89
00:03:24,400 --> 00:03:26,480
security conducted the necessary

90
00:03:26,480 --> 00:03:29,280
research that proved that using open

91
00:03:29,280 --> 00:03:31,519
source components carried with it

92
00:03:31,519 --> 00:03:33,360
inherited risk

93
00:03:33,360 --> 00:03:36,080
it the research paved the way for making

94
00:03:36,080 --> 00:03:37,920
a9 possible

95
00:03:37,920 --> 00:03:39,840
and this led to the creation of tools

96
00:03:39,840 --> 00:03:41,920
one of one of the very first tools was

97
00:03:41,920 --> 00:03:44,560
oas dependency check started by jeremy

98
00:03:44,560 --> 00:03:47,760
long back in 2012 but many other tools

99
00:03:47,760 --> 00:03:50,239
and tool vendors came to be existing

100
00:03:50,239 --> 00:03:51,920
tools that focused on open source

101
00:03:51,920 --> 00:03:54,640
license use cases now had a need to

102
00:03:54,640 --> 00:03:57,680
support security use cases and brand new

103
00:03:57,680 --> 00:03:59,920
security first tools were created as

104
00:03:59,920 --> 00:04:02,080
well and this is how the software

105
00:04:02,080 --> 00:04:05,519
composition analysis or sca market came

106
00:04:05,519 --> 00:04:06,480
to be

107
00:04:06,480 --> 00:04:09,599
today sca focuses primarily on

108
00:04:09,599 --> 00:04:11,120
determining if components have known

109
00:04:11,120 --> 00:04:13,120
vulnerabilities if they are out of date

110
00:04:13,120 --> 00:04:15,840
or not or whether the components used

111
00:04:15,840 --> 00:04:18,399
meet or violate organizational license

112
00:04:18,399 --> 00:04:20,478
policies when when most people think

113
00:04:20,478 --> 00:04:22,880
about sca these are the three things

114
00:04:22,880 --> 00:04:26,000
that are top of mind

115
00:04:26,080 --> 00:04:31,680
now has sca improved software assurance

116
00:04:31,680 --> 00:04:34,880
yeah i think so someone sca can

117
00:04:34,880 --> 00:04:36,800
undoubtedly identify known

118
00:04:36,800 --> 00:04:39,280
vulnerabilities in third party and open

119
00:04:39,280 --> 00:04:41,919
source components so by that measurement

120
00:04:41,919 --> 00:04:45,600
alone yes sca has improved software

121
00:04:45,600 --> 00:04:46,880
security

122
00:04:46,880 --> 00:04:48,639
so the next question is

123
00:04:48,639 --> 00:04:52,720
has sca improved software assurance

124
00:04:52,720 --> 00:04:54,639
yes and no

125
00:04:54,639 --> 00:04:57,440
it has to the degree that software scans

126
00:04:57,440 --> 00:04:59,840
at points in time have revealed

127
00:04:59,840 --> 00:05:01,840
vulnerabilities that first parties have

128
00:05:01,840 --> 00:05:04,000
remediated to some extent

129
00:05:04,000 --> 00:05:05,759
either because they're responsible

130
00:05:05,759 --> 00:05:07,199
suppliers

131
00:05:07,199 --> 00:05:09,199
anyone who's doing this

132
00:05:09,199 --> 00:05:10,639
good on ya

133
00:05:10,639 --> 00:05:11,680
or

134
00:05:11,680 --> 00:05:12,960
because vulnerabilities have been

135
00:05:12,960 --> 00:05:16,160
disclosed to them by a third party by

136
00:05:16,160 --> 00:05:18,320
security researchers by their own

137
00:05:18,320 --> 00:05:21,039
customers assurance teams or

138
00:05:21,039 --> 00:05:22,960
worst of all by a breach of their

139
00:05:22,960 --> 00:05:24,960
capabilities

140
00:05:24,960 --> 00:05:26,639
there are discontinuities in a

141
00:05:26,639 --> 00:05:28,960
multi-tier supply chain

142
00:05:28,960 --> 00:05:30,800
the time it takes a supplier to detect

143
00:05:30,800 --> 00:05:31,759
the risk

144
00:05:31,759 --> 00:05:33,440
when not every piece of software is

145
00:05:33,440 --> 00:05:34,960
built every day

146
00:05:34,960 --> 00:05:36,840
the time it takes to remediate

147
00:05:36,840 --> 00:05:39,520
vulnerabilities document a new release

148
00:05:39,520 --> 00:05:41,680
and deliver an update

149
00:05:41,680 --> 00:05:44,000
all of those discontinuities leave end

150
00:05:44,000 --> 00:05:45,840
users in the blind

151
00:05:45,840 --> 00:05:47,840
and that's gotta stop

152
00:05:47,840 --> 00:05:50,160
there are safety implications

153
00:05:50,160 --> 00:05:52,160
and critical infrastructure needs a way

154
00:05:52,160 --> 00:05:55,280
to differentiate responsible suppliers

155
00:05:55,280 --> 00:05:57,360
a few months ago the atlantic council

156
00:05:57,360 --> 00:05:59,520
published a paper called breaking trust

157
00:05:59,520 --> 00:06:01,680
shades of crisis across an insecure

158
00:06:01,680 --> 00:06:03,600
software supply chain there's a link to

159
00:06:03,600 --> 00:06:05,919
the paper in the reference slide the

160
00:06:05,919 --> 00:06:08,479
paper provides an in-depth view of many

161
00:06:08,479 --> 00:06:10,240
of the things that are inherently broken

162
00:06:10,240 --> 00:06:12,479
in a typical software supply chain

163
00:06:12,479 --> 00:06:15,199
this illustration is an example of a

164
00:06:15,199 --> 00:06:17,680
multi-tier supplier network

165
00:06:17,680 --> 00:06:19,680
starting on the left with system design

166
00:06:19,680 --> 00:06:21,680
we see there is the potential to

167
00:06:21,680 --> 00:06:23,919
compromise the development process

168
00:06:23,919 --> 00:06:26,639
through various certificate credential

169
00:06:26,639 --> 00:06:29,759
and injection attacks so even before the

170
00:06:29,759 --> 00:06:31,520
code is written or built we could

171
00:06:31,520 --> 00:06:33,919
potentially compromise the systems in

172
00:06:33,919 --> 00:06:36,319
which the software will be built

173
00:06:36,319 --> 00:06:38,319
moving a bit to the right we see the use

174
00:06:38,319 --> 00:06:40,800
of software development kits or sdks

175
00:06:40,800 --> 00:06:42,479
this could be anything from the.net

176
00:06:42,479 --> 00:06:44,720
framework the java development kit or

177
00:06:44,720 --> 00:06:47,199
nodejs so questions

178
00:06:47,199 --> 00:06:50,400
does the sdk have a back door

179
00:06:50,400 --> 00:06:52,560
can it embed malware in the software

180
00:06:52,560 --> 00:06:53,840
that it builds

181
00:06:53,840 --> 00:06:55,039
do you know

182
00:06:55,039 --> 00:06:56,160
are you sure

183
00:06:56,160 --> 00:06:58,560
because this has happened many many

184
00:06:58,560 --> 00:07:00,160
times before

185
00:07:00,160 --> 00:07:01,680
moving a bit to the right we see the use

186
00:07:01,680 --> 00:07:03,120
of third-party and open source

187
00:07:03,120 --> 00:07:05,199
dependencies being used in our

188
00:07:05,199 --> 00:07:07,199
development process this is where

189
00:07:07,199 --> 00:07:10,080
traditional sca plays a small role and i

190
00:07:10,080 --> 00:07:12,560
say small because sca will analyze the

191
00:07:12,560 --> 00:07:14,080
components themselves

192
00:07:14,080 --> 00:07:15,919
not the repositories in which the

193
00:07:15,919 --> 00:07:18,240
components are retrieved from

194
00:07:18,240 --> 00:07:20,160
has the component has the repo been

195
00:07:20,160 --> 00:07:22,720
compromised does the build environment

196
00:07:22,720 --> 00:07:24,560
have flawed network or package

197
00:07:24,560 --> 00:07:26,720
management settings that are redirecting

198
00:07:26,720 --> 00:07:28,960
requests to a repo with malicious

199
00:07:28,960 --> 00:07:31,759
packages if the repo is internal is

200
00:07:31,759 --> 00:07:33,680
there an internal threat

201
00:07:33,680 --> 00:07:35,759
maybe

202
00:07:35,759 --> 00:07:37,759
moving further to the right we see the

203
00:07:37,759 --> 00:07:39,599
see that the built artifacts are being

204
00:07:39,599 --> 00:07:42,319
deployed do we know that the deployment

205
00:07:42,319 --> 00:07:44,479
pipeline has inadvertently injected

206
00:07:44,479 --> 00:07:47,199
malicious software into our artifacts or

207
00:07:47,199 --> 00:07:49,360
that pre-built artifacts controlled by

208
00:07:49,360 --> 00:07:51,280
the attacker aren't being deployed

209
00:07:51,280 --> 00:07:52,720
instead

210
00:07:52,720 --> 00:07:54,240
our deployment may end up being

211
00:07:54,240 --> 00:07:56,720
published to a repository such as maven

212
00:07:56,720 --> 00:08:00,240
central or npm or may be deployed to an

213
00:08:00,240 --> 00:08:02,800
internal repo in either case

214
00:08:02,800 --> 00:08:05,120
others could potentially reuse the

215
00:08:05,120 --> 00:08:07,039
malicious component i unknowingly

216
00:08:07,039 --> 00:08:08,080
published

217
00:08:08,080 --> 00:08:09,919
and if the artifact was published to an

218
00:08:09,919 --> 00:08:12,960
app store then users within that entire

219
00:08:12,960 --> 00:08:15,680
ecosystem could become victims

220
00:08:15,680 --> 00:08:17,759
maintenance and updates especially

221
00:08:17,759 --> 00:08:20,319
over-the-air updates carry a tremendous

222
00:08:20,319 --> 00:08:23,840
amount of risk so as you can see a

223
00:08:23,840 --> 00:08:26,080
typical software development process has

224
00:08:26,080 --> 00:08:28,560
a lot of unknowns a lot of potential

225
00:08:28,560 --> 00:08:31,360
risk that needs to be mitigated in order

226
00:08:31,360 --> 00:08:33,519
to increase the assurance of what you

227
00:08:33,519 --> 00:08:35,760
think you're building is actually what's

228
00:08:35,760 --> 00:08:39,000
being delivered

229
00:08:40,000 --> 00:08:42,559
so as the oas software component

230
00:08:42,559 --> 00:08:45,360
verification standard is designed to

231
00:08:45,360 --> 00:08:48,720
help organizations measure and improve

232
00:08:48,720 --> 00:08:52,399
software supply chain assurance

233
00:08:52,480 --> 00:08:56,399
now scbs is broken down into six control

234
00:08:56,399 --> 00:08:58,640
families each one of these control

235
00:08:58,640 --> 00:09:00,560
families could be a talk in and of its

236
00:09:00,560 --> 00:09:02,800
own but let's review them at a high

237
00:09:02,800 --> 00:09:03,839
level

238
00:09:03,839 --> 00:09:07,120
the first is inventory now this should

239
00:09:07,120 --> 00:09:09,839
be obvious but knowing what components

240
00:09:09,839 --> 00:09:12,720
are in your software is required in

241
00:09:12,720 --> 00:09:14,480
order for you to determine if those

242
00:09:14,480 --> 00:09:17,200
components carry inherited risk

243
00:09:17,200 --> 00:09:20,000
it turns out that identifying a complete

244
00:09:20,000 --> 00:09:23,120
and accurate inventory is kind of hard

245
00:09:23,120 --> 00:09:24,080
who knew

246
00:09:24,080 --> 00:09:26,640
so sca tools do this in two different

247
00:09:26,640 --> 00:09:29,600
ways binary analysis and manifest

248
00:09:29,600 --> 00:09:30,880
analysis

249
00:09:30,880 --> 00:09:33,360
binary analysis looks at the artifacts

250
00:09:33,360 --> 00:09:36,080
and does a sniff test i think this

251
00:09:36,080 --> 00:09:38,880
component is jquery because it looks

252
00:09:38,880 --> 00:09:42,160
like or smells like jquery then there's

253
00:09:42,160 --> 00:09:44,240
manifest analysis which looks at the

254
00:09:44,240 --> 00:09:46,320
package manager's manifest file like

255
00:09:46,320 --> 00:09:50,080
your palm.xml or your packagelock.json

256
00:09:50,080 --> 00:09:52,880
assumes the inventory in those files are

257
00:09:52,880 --> 00:09:54,720
accurate

258
00:09:54,720 --> 00:09:57,519
now both methods of analysis are

259
00:09:57,519 --> 00:09:59,120
educated guesses

260
00:09:59,120 --> 00:10:02,720
both methods are guaranteed to produce

261
00:10:02,720 --> 00:10:05,360
an inaccurate and incomplete inventory

262
00:10:05,360 --> 00:10:07,839
now it's possible it's possible to come

263
00:10:07,839 --> 00:10:11,120
close but accuracy and completeness will

264
00:10:11,120 --> 00:10:13,600
vary widely based on the tool and the

265
00:10:13,600 --> 00:10:16,839
method of analysis and a code base being

266
00:10:16,839 --> 00:10:19,360
analyzed but there's actually a third

267
00:10:19,360 --> 00:10:21,920
and complementary way of creating such

268
00:10:21,920 --> 00:10:23,120
inventory

269
00:10:23,120 --> 00:10:26,000
turns out that sometimes sometimes you

270
00:10:26,000 --> 00:10:28,480
get better and more complete results if

271
00:10:28,480 --> 00:10:31,440
you simply ask the development teams hey

272
00:10:31,440 --> 00:10:33,600
what's in your stuff

273
00:10:33,600 --> 00:10:36,240
software bill materials or s-bombs is a

274
00:10:36,240 --> 00:10:37,760
way to do that

275
00:10:37,760 --> 00:10:40,560
s-bombs can be created at build time and

276
00:10:40,560 --> 00:10:42,800
can be augmented and corrected by the

277
00:10:42,800 --> 00:10:44,399
development team during the build

278
00:10:44,399 --> 00:10:45,600
process

279
00:10:45,600 --> 00:10:46,880
for example

280
00:10:46,880 --> 00:10:49,360
if the team made a modification to

281
00:10:49,360 --> 00:10:52,160
jquery and they embedded another library

282
00:10:52,160 --> 00:10:54,880
into a custom version of jquery these

283
00:10:54,880 --> 00:10:57,120
the s-bombs

284
00:10:57,120 --> 00:10:59,760
the modifications can be captured in an

285
00:10:59,760 --> 00:11:02,480
s-bomb so that tools that analyze them

286
00:11:02,480 --> 00:11:04,079
don't have to guess

287
00:11:04,079 --> 00:11:06,399
the s-bomb should ideally be an accurate

288
00:11:06,399 --> 00:11:08,640
and complete inventory of the components

289
00:11:08,640 --> 00:11:10,399
but the beautiful thing about s-bombs is

290
00:11:10,399 --> 00:11:12,240
that it puts the power back into the

291
00:11:12,240 --> 00:11:14,399
hands of the development teams they're

292
00:11:14,399 --> 00:11:16,480
the ones who know best what's in their

293
00:11:16,480 --> 00:11:18,560
software they're the ones who can

294
00:11:18,560 --> 00:11:20,800
augment and correct the inventory and do

295
00:11:20,800 --> 00:11:24,079
so through automation

296
00:11:24,240 --> 00:11:27,440
s-bombs are the list of ingredients the

297
00:11:27,440 --> 00:11:29,760
names and versions of components the

298
00:11:29,760 --> 00:11:31,680
license and copyright information and

299
00:11:31,680 --> 00:11:33,519
they'll include prominence information

300
00:11:33,519 --> 00:11:35,120
such as where the component was

301
00:11:35,120 --> 00:11:37,600
retrieved from and who the supplier was

302
00:11:37,600 --> 00:11:40,560
all of this information can be used to

303
00:11:40,560 --> 00:11:42,880
identify various forms of risk

304
00:11:42,880 --> 00:11:44,160
risk

305
00:11:44,160 --> 00:11:46,000
hardening build environments is also

306
00:11:46,000 --> 00:11:48,079
necessary to increase software supply

307
00:11:48,079 --> 00:11:49,839
chain assurance the continuous

308
00:11:49,839 --> 00:11:51,839
integration server the administration of

309
00:11:51,839 --> 00:11:54,399
them the underlying operating system dns

310
00:11:54,399 --> 00:11:56,480
and network settings and certificate

311
00:11:56,480 --> 00:11:58,880
trust stores are some of the many things

312
00:11:58,880 --> 00:12:01,120
that need to be hardened to increase

313
00:12:01,120 --> 00:12:04,800
assurance for example setting up an sdk

314
00:12:04,800 --> 00:12:06,000
on an os

315
00:12:06,000 --> 00:12:08,839
running a ci server all with default

316
00:12:08,839 --> 00:12:11,760
configurations is essentially flying

317
00:12:11,760 --> 00:12:14,720
blind you'll have no idea no assurance

318
00:12:14,720 --> 00:12:16,000
that the software you think you're

319
00:12:16,000 --> 00:12:17,839
producing is actually what's being

320
00:12:17,839 --> 00:12:20,000
produced

321
00:12:20,000 --> 00:12:21,839
the use of package managers is the

322
00:12:21,839 --> 00:12:25,440
fourth control family everyone should

323
00:12:25,440 --> 00:12:27,760
use a package manager let me repeat

324
00:12:27,760 --> 00:12:29,839
everyone should be using a package

325
00:12:29,839 --> 00:12:32,800
manager the benefits of using them far

326
00:12:32,800 --> 00:12:35,120
exceed potential risk

327
00:12:35,120 --> 00:12:36,959
even for high assurance environments

328
00:12:36,959 --> 00:12:39,839
that never trust public repositories and

329
00:12:39,839 --> 00:12:41,519
compile all open source software

330
00:12:41,519 --> 00:12:42,639
themselves

331
00:12:42,639 --> 00:12:45,120
should use a package manager

332
00:12:45,120 --> 00:12:47,360
and c and c plus projects there's no

333
00:12:47,360 --> 00:12:48,880
excuse not to use it they've been

334
00:12:48,880 --> 00:12:51,200
available for the past decade yet very

335
00:12:51,200 --> 00:12:53,760
few cnc plus projects actually use them

336
00:12:53,760 --> 00:12:56,639
which is which is really a shame

337
00:12:56,639 --> 00:12:58,800
well there are many benefits of using

338
00:12:58,800 --> 00:13:01,440
package managers two of my personal

339
00:13:01,440 --> 00:13:04,399
favorites is being one able to determine

340
00:13:04,399 --> 00:13:06,720
if a component is out of date or not

341
00:13:06,720 --> 00:13:10,880
and two being able to recall a component

342
00:13:10,880 --> 00:13:13,440
being able to recall physical items such

343
00:13:13,440 --> 00:13:16,160
as automobile parts pharmaceuticals or

344
00:13:16,160 --> 00:13:19,200
various food items greatly improves

345
00:13:19,200 --> 00:13:20,639
public safety

346
00:13:20,639 --> 00:13:22,480
the use of package managers and

347
00:13:22,480 --> 00:13:25,120
subsequent package repositories can have

348
00:13:25,120 --> 00:13:28,240
a similar effect packages that have back

349
00:13:28,240 --> 00:13:30,880
doors or other malicious code can be

350
00:13:30,880 --> 00:13:33,839
removed from the repo this improves

351
00:13:33,839 --> 00:13:35,839
security and potentially public safety

352
00:13:35,839 --> 00:13:38,079
depending on the use case

353
00:13:38,079 --> 00:13:40,320
the fifth control family is component

354
00:13:40,320 --> 00:13:43,199
analysis this is really looking about

355
00:13:43,199 --> 00:13:44,880
this is really about looking at

356
00:13:44,880 --> 00:13:47,120
at the s-bomb and everything inside of

357
00:13:47,120 --> 00:13:49,360
it and determining if the components

358
00:13:49,360 --> 00:13:51,440
have known vulnerabilities are they out

359
00:13:51,440 --> 00:13:53,360
of date or not are they in the support

360
00:13:53,360 --> 00:13:56,240
or not do they have license risk but it

361
00:13:56,240 --> 00:13:58,560
also looks at potential architectural

362
00:13:58,560 --> 00:14:01,120
risk as well such as identifying if the

363
00:14:01,120 --> 00:14:02,880
component is a library versus a

364
00:14:02,880 --> 00:14:04,800
framework and what the purpose of the

365
00:14:04,800 --> 00:14:06,160
component is

366
00:14:06,160 --> 00:14:08,720
is it an xml parser because i already

367
00:14:08,720 --> 00:14:10,560
have one in my software i don't need

368
00:14:10,560 --> 00:14:12,639
another one

369
00:14:12,639 --> 00:14:14,959
and finally we look at pedigree and

370
00:14:14,959 --> 00:14:17,600
providence i always think of providence

371
00:14:17,600 --> 00:14:19,839
as an origin story where where the

372
00:14:19,839 --> 00:14:21,839
component was retrieved from who the

373
00:14:21,839 --> 00:14:24,000
supplier is who's the manufacturer

374
00:14:24,000 --> 00:14:26,160
whereas pedigree is more about

375
00:14:26,160 --> 00:14:28,639
individual dna does the component have

376
00:14:28,639 --> 00:14:30,480
modifications what specific

377
00:14:30,480 --> 00:14:32,800
modifications were made what is the case

378
00:14:32,800 --> 00:14:34,480
and compilers were used to produce the

379
00:14:34,480 --> 00:14:37,519
component so pedigree and prominence

380
00:14:37,519 --> 00:14:39,839
round out the sixth and final control

381
00:14:39,839 --> 00:14:41,040
family

382
00:14:41,040 --> 00:14:43,360
scvs is designed with three levels of

383
00:14:43,360 --> 00:14:45,199
verification based on the level of

384
00:14:45,199 --> 00:14:46,880
assurance required by different kinds of

385
00:14:46,880 --> 00:14:48,560
customers

386
00:14:48,560 --> 00:14:50,560
all these controls are geared for

387
00:14:50,560 --> 00:14:53,600
automation this is not a document drill

388
00:14:53,600 --> 00:14:56,839
or some carnival of labor-intensive

389
00:14:56,839 --> 00:14:59,120
self-attestation but even with

390
00:14:59,120 --> 00:15:02,079
automation diligence has a cost

391
00:15:02,079 --> 00:15:05,040
and every cost involves trade-offs

392
00:15:05,040 --> 00:15:07,199
the justifiable cost of assurance for a

393
00:15:07,199 --> 00:15:09,920
video game is not the same

394
00:15:09,920 --> 00:15:11,600
as a payment system

395
00:15:11,600 --> 00:15:14,959
or an electrical grid operator

396
00:15:14,959 --> 00:15:17,360
the controls at different levels of scds

397
00:15:17,360 --> 00:15:18,880
track to the legal and regulatory

398
00:15:18,880 --> 00:15:21,120
requirements of software end users

399
00:15:21,120 --> 00:15:22,720
the ones they have to satisfy in order

400
00:15:22,720 --> 00:15:25,120
to accept and manage third party risk

401
00:15:25,120 --> 00:15:27,360
and achieve insurance on an ongoing

402
00:15:27,360 --> 00:15:29,680
basis

403
00:15:29,680 --> 00:15:31,680
what are the risks in this third-party

404
00:15:31,680 --> 00:15:34,880
application in my environment today

405
00:15:34,880 --> 00:15:37,199
and what can i do about it with or

406
00:15:37,199 --> 00:15:40,560
without support from the supplier

407
00:15:40,560 --> 00:15:42,079
these verification methods can be

408
00:15:42,079 --> 00:15:43,920
implemented over time

409
00:15:43,920 --> 00:15:46,079
this is not an all or nothing sorting

410
00:15:46,079 --> 00:15:47,199
hat

411
00:15:47,199 --> 00:15:48,880
there are table stakes which are level

412
00:15:48,880 --> 00:15:51,519
one best practices that are achievable

413
00:15:51,519 --> 00:15:53,360
and automatable with modern engineering

414
00:15:53,360 --> 00:15:56,240
workflows and open source tools

415
00:15:56,240 --> 00:15:57,600
beyond that

416
00:15:57,600 --> 00:15:59,680
verification methods can be adopted one

417
00:15:59,680 --> 00:16:00,880
by one

418
00:16:00,880 --> 00:16:04,639
as desired or as required by end users

419
00:16:04,639 --> 00:16:08,440
as an acceptance condition

420
00:16:39,920 --> 00:16:42,880
are scvs control requirements measurable

421
00:16:42,880 --> 00:16:45,440
absolutely the overwhelming majority of

422
00:16:45,440 --> 00:16:47,360
controls can be verified through

423
00:16:47,360 --> 00:16:50,000
automation we discuss network settings

424
00:16:50,000 --> 00:16:51,759
and package management settings and the

425
00:16:51,759 --> 00:16:53,839
use of s-bonds all of these things and

426
00:16:53,839 --> 00:16:57,120
more can be verified through automation

427
00:16:57,120 --> 00:17:00,160
in addition scvs measurements can be

428
00:17:00,160 --> 00:17:02,160
observed by the organizations

429
00:17:02,160 --> 00:17:05,359
implementing them or by a consultancy in

430
00:17:05,359 --> 00:17:07,520
the event that at the station needs to

431
00:17:07,520 --> 00:17:09,280
be provided

432
00:17:09,280 --> 00:17:11,199
more security conscious customers will

433
00:17:11,199 --> 00:17:12,959
be quicker to adopt these verification

434
00:17:12,959 --> 00:17:14,240
requirements

435
00:17:14,240 --> 00:17:16,400
adoption by less security conscious

436
00:17:16,400 --> 00:17:18,400
customers will be slower

437
00:17:18,400 --> 00:17:20,720
adoption by recreational coders will be

438
00:17:20,720 --> 00:17:22,079
never

439
00:17:22,079 --> 00:17:23,919
but the thing to remember

440
00:17:23,919 --> 00:17:26,000
for end users and suppliers is that

441
00:17:26,000 --> 00:17:28,480
adoption goes beyond ip

442
00:17:28,480 --> 00:17:30,000
these requirements are measurable and

443
00:17:30,000 --> 00:17:32,559
verifiable so they're auditable

444
00:17:32,559 --> 00:17:34,480
security and compliance people are going

445
00:17:34,480 --> 00:17:36,799
to set these criteria based on what

446
00:17:36,799 --> 00:17:38,720
their lawyers tell them

447
00:17:38,720 --> 00:17:40,880
procurement has a role to play there are

448
00:17:40,880 --> 00:17:43,039
already financial institutions that fire

449
00:17:43,039 --> 00:17:44,799
well procurement based on software bills

450
00:17:44,799 --> 00:17:47,120
and materials you're going to see

451
00:17:47,120 --> 00:17:50,799
security soas for dependency updates

452
00:17:50,799 --> 00:17:53,200
i thought about saying winter is coming

453
00:17:53,200 --> 00:17:55,120
but maybe it's spring

454
00:17:55,120 --> 00:17:57,200
depends on your perspective i guess

455
00:17:57,200 --> 00:17:58,559
in any case

456
00:17:58,559 --> 00:17:59,520
this

457
00:17:59,520 --> 00:18:01,039
and other software transparencies

458
00:18:01,039 --> 00:18:03,200
initiative in flight

459
00:18:03,200 --> 00:18:05,200
has implications for commercial software

460
00:18:05,200 --> 00:18:06,160
vendors

461
00:18:06,160 --> 00:18:08,240
contract application developers and

462
00:18:08,240 --> 00:18:10,880
ultimately the open source ecosystem

463
00:18:10,880 --> 00:18:13,039
itself

464
00:18:13,039 --> 00:18:15,120
so where can you find more information

465
00:18:15,120 --> 00:18:17,160
i'm glad you asked

466
00:18:17,160 --> 00:18:18,880
oas.org

467
00:18:18,880 --> 00:18:21,520
scvs is your starting point there you'll

468
00:18:21,520 --> 00:18:24,000
have access to project information links

469
00:18:24,000 --> 00:18:25,919
to the github repo as well as the

470
00:18:25,919 --> 00:18:28,240
ability to download or read the standard

471
00:18:28,240 --> 00:18:30,720
online

472
00:18:32,240 --> 00:18:34,320
here are a few links to get you started

473
00:18:34,320 --> 00:18:36,960
the svs project page has download links

474
00:18:36,960 --> 00:18:38,960
in various formats including microsoft

475
00:18:38,960 --> 00:18:43,600
word pdf json and xml or use the getbook

476
00:18:43,600 --> 00:18:45,919
url to read the standard online no

477
00:18:45,919 --> 00:18:47,360
download required

478
00:18:47,360 --> 00:18:49,520
the third link is the atlantic council

479
00:18:49,520 --> 00:18:52,000
paper i mentioned earlier i highly

480
00:18:52,000 --> 00:18:54,080
suggest everyone read through it it's a

481
00:18:54,080 --> 00:18:56,320
fascinating and in-depth analysis of

482
00:18:56,320 --> 00:18:57,360
many of the things that could

483
00:18:57,360 --> 00:18:59,440
potentially go wrong in a typical

484
00:18:59,440 --> 00:19:02,080
software supply chain the paper also has

485
00:19:02,080 --> 00:19:04,400
references to much of the raw data that

486
00:19:04,400 --> 00:19:06,240
was used as well

487
00:19:06,240 --> 00:19:08,160
thank you for watching for listening

488
00:19:08,160 --> 00:19:09,919
it's going to take a collective effort

489
00:19:09,919 --> 00:19:11,919
but together we can improve the

490
00:19:11,919 --> 00:19:13,840
assurance of our respective software

491
00:19:13,840 --> 00:19:16,720
supply chains

