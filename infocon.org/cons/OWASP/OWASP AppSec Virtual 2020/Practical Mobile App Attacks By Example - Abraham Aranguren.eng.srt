1
00:00:00,240 --> 00:00:03,280
thank you for coming uh this talk is uh

2
00:00:03,280 --> 00:00:05,600
practical mobile application attacks by

3
00:00:05,600 --> 00:00:07,440
example so

4
00:00:07,440 --> 00:00:10,559
i am the ceo of 70 security

5
00:00:10,559 --> 00:00:12,240
uh if you are interested in this talk

6
00:00:12,240 --> 00:00:14,400
there's a lot of public reports on the

7
00:00:14,400 --> 00:00:16,079
website

8
00:00:16,079 --> 00:00:18,240
i was a

9
00:00:18,240 --> 00:00:20,400
team leader and a pen tester for q53 and

10
00:00:20,400 --> 00:00:22,640
version one so you can click on those

11
00:00:22,640 --> 00:00:24,160
if you want to read more about those

12
00:00:24,160 --> 00:00:26,000
companies

13
00:00:26,000 --> 00:00:29,119
and i wrote a course for inner security

14
00:00:29,119 --> 00:00:31,359
about a practical web defense about

15
00:00:31,359 --> 00:00:33,280
hacking and defending web applications

16
00:00:33,280 --> 00:00:35,840
i'm the os authority of project leader

17
00:00:35,840 --> 00:00:37,920
which is which is one of the always

18
00:00:37,920 --> 00:00:39,440
flagship projects uh there's some

19
00:00:39,440 --> 00:00:41,200
presentations here

20
00:00:41,200 --> 00:00:45,039
and i also have some certification so

21
00:00:45,039 --> 00:00:46,719
uh yeah if you're interested in this

22
00:00:46,719 --> 00:00:49,680
talk uh these are some public pencils

23
00:00:49,680 --> 00:00:51,600
reports from where you can learn a lot

24
00:00:51,600 --> 00:00:53,039
especially these

25
00:00:53,039 --> 00:00:55,600
two here these were about an application

26
00:00:55,600 --> 00:00:58,160
that was mandated in an entire country

27
00:00:58,160 --> 00:01:00,640
of south korea so pretty much everything

28
00:01:00,640 --> 00:01:02,399
you should not do in a mobile app is

29
00:01:02,399 --> 00:01:04,720
here there's like a lot of mistakes and

30
00:01:04,720 --> 00:01:06,640
these are more kind of privacy related

31
00:01:06,640 --> 00:01:08,960
what kind of data is the application

32
00:01:08,960 --> 00:01:11,360
collecting and stuff like that

33
00:01:11,360 --> 00:01:13,760
so uh yeah and these are other pentas

34
00:01:13,760 --> 00:01:16,080
reports on the website uh if you are

35
00:01:16,080 --> 00:01:17,840
interested about this you can learn more

36
00:01:17,840 --> 00:01:19,360
about those in there

37
00:01:19,360 --> 00:01:22,240
so we're going to go through a lot of uh

38
00:01:22,240 --> 00:01:24,560
practical mobile app attacks

39
00:01:24,560 --> 00:01:27,280
and a game what is the vulnerability so

40
00:01:27,280 --> 00:01:29,280
i suggest is this is recorded i suggest

41
00:01:29,280 --> 00:01:32,079
you pause the video and then try to

42
00:01:32,079 --> 00:01:34,560
guess what the vulnerability is and then

43
00:01:34,560 --> 00:01:36,320
uh jump to the solution right i will

44
00:01:36,320 --> 00:01:38,400
have to skip through that because

45
00:01:38,400 --> 00:01:40,720
this is not interactive so let's start

46
00:01:40,720 --> 00:01:43,600
with sexy denial of service attacks

47
00:01:43,600 --> 00:01:44,960
so

48
00:01:44,960 --> 00:01:47,280
uh what does this command do now pause

49
00:01:47,280 --> 00:01:50,000
and try to guess

50
00:01:50,000 --> 00:01:52,799
so this is basically a denial of service

51
00:01:52,799 --> 00:01:56,159
right so we have a netcat clone sbd and

52
00:01:56,159 --> 00:01:58,240
it's listening on port 80

53
00:01:58,240 --> 00:02:00,560
and every time you close it it's going

54
00:02:00,560 --> 00:02:03,200
to spawn again so this is the delay of

55
00:02:03,200 --> 00:02:05,600
zero seconds to start again

56
00:02:05,600 --> 00:02:07,680
and then whatever connects to these port

57
00:02:07,680 --> 00:02:10,080
80 it's going to reply with the output

58
00:02:10,080 --> 00:02:12,720
of the yes command which as it names

59
00:02:12,720 --> 00:02:14,720
implies it's always saying yes yes yes

60
00:02:14,720 --> 00:02:16,879
yes so it's going to send a lot of data

61
00:02:16,879 --> 00:02:18,640
and then we can crash the application

62
00:02:18,640 --> 00:02:21,360
and we will get a nice crash like that

63
00:02:21,360 --> 00:02:22,480
right so

64
00:02:22,480 --> 00:02:25,280
this is what the press look like

65
00:02:25,280 --> 00:02:27,520
so basically the application runs out of

66
00:02:27,520 --> 00:02:30,239
memory and crashes right so

67
00:02:30,239 --> 00:02:32,640
uh yeah and then i'm also going to skip

68
00:02:32,640 --> 00:02:34,879
the fixes you have them on the you have

69
00:02:34,879 --> 00:02:37,200
some mitigation about fixes on the

70
00:02:37,200 --> 00:02:38,160
slides

71
00:02:38,160 --> 00:02:40,160
but because i have so many slides i will

72
00:02:40,160 --> 00:02:42,400
have to skip through this but it's all

73
00:02:42,400 --> 00:02:44,080
written in here for you

74
00:02:44,080 --> 00:02:46,319
about how to mitigate this now

75
00:02:46,319 --> 00:02:48,800
on android the sd card is kind of the

76
00:02:48,800 --> 00:02:50,560
wild west right because many

77
00:02:50,560 --> 00:02:52,480
applications can read and write data

78
00:02:52,480 --> 00:02:54,720
there it can be extracted without even

79
00:02:54,720 --> 00:02:56,959
unlocking the phone so for example a

80
00:02:56,959 --> 00:02:59,120
regular thief can like steal your phone

81
00:02:59,120 --> 00:03:01,680
extract the sd card without

82
00:03:01,680 --> 00:03:03,360
unlocking the phone first

83
00:03:03,360 --> 00:03:04,959
and there's no encryption typically

84
00:03:04,959 --> 00:03:06,159
right so

85
00:03:06,159 --> 00:03:09,440
um this all makes the sd card this

86
00:03:09,440 --> 00:03:12,319
perfect location for physical attacks

87
00:03:12,319 --> 00:03:14,319
and attacks

88
00:03:14,319 --> 00:03:16,239
from other

89
00:03:16,239 --> 00:03:18,560
applications on the phone right so in

90
00:03:18,560 --> 00:03:19,840
this case

91
00:03:19,840 --> 00:03:21,519
this was a vulnerability that could get

92
00:03:21,519 --> 00:03:24,720
somebody killed because this was kind of

93
00:03:24,720 --> 00:03:26,239
an application

94
00:03:26,239 --> 00:03:28,720
meant to help the people in a given

95
00:03:28,720 --> 00:03:30,959
country to report human rights

96
00:03:30,959 --> 00:03:33,360
violations so we have an environment

97
00:03:33,360 --> 00:03:35,840
where potentially police and law

98
00:03:35,840 --> 00:03:38,560
enforcement are against the people right

99
00:03:38,560 --> 00:03:39,280
so

100
00:03:39,280 --> 00:03:40,400
if

101
00:03:40,400 --> 00:03:43,200
you say uh that you reported a human

102
00:03:43,200 --> 00:03:44,720
rights violation

103
00:03:44,720 --> 00:03:47,680
inside of the sd card

104
00:03:47,680 --> 00:03:49,599
then police can take your phone can

105
00:03:49,599 --> 00:03:51,599
extract the sd card see that you are

106
00:03:51,599 --> 00:03:53,360
reporting these issues

107
00:03:53,360 --> 00:03:55,760
see what you reported and then get you

108
00:03:55,760 --> 00:03:57,200
killed or whatever

109
00:03:57,200 --> 00:04:00,159
nasty stuff they do there right so this

110
00:04:00,159 --> 00:04:02,560
is an example of uh security

111
00:04:02,560 --> 00:04:04,560
vulnerability leading to problems in the

112
00:04:04,560 --> 00:04:07,599
physical world right

113
00:04:09,040 --> 00:04:11,439
so yeah here we have also like first

114
00:04:11,439 --> 00:04:14,400
name last name address so lots of uh

115
00:04:14,400 --> 00:04:16,478
sensitive stuff

116
00:04:16,478 --> 00:04:17,918
for this right

117
00:04:17,918 --> 00:04:20,720
now another scenario is

118
00:04:20,720 --> 00:04:22,639
in the sd card right so

119
00:04:22,639 --> 00:04:24,320
take a look at this pause the video try

120
00:04:24,320 --> 00:04:25,199
to

121
00:04:25,199 --> 00:04:27,440
guess what the vulnerability is

122
00:04:27,440 --> 00:04:28,960
right and now i'm going to move on to

123
00:04:28,960 --> 00:04:32,240
the solution so the problem here is that

124
00:04:32,240 --> 00:04:34,800
the application is reading text files

125
00:04:34,800 --> 00:04:36,320
from the sd card

126
00:04:36,320 --> 00:04:38,880
and then it's loading this text

127
00:04:38,880 --> 00:04:42,160
saving it into a variable and then this

128
00:04:42,160 --> 00:04:44,240
variable page data and then this page

129
00:04:44,240 --> 00:04:46,320
data variable is being concatenated into

130
00:04:46,320 --> 00:04:49,759
html here without any output encoding or

131
00:04:49,759 --> 00:04:53,199
whatsoever right so this results in xss

132
00:04:53,199 --> 00:04:55,840
right so

133
00:04:55,840 --> 00:04:57,520
what can we do with that

134
00:04:57,520 --> 00:04:59,520
we can for example depending on how the

135
00:04:59,520 --> 00:05:04,990
application is built uh we can do uh um

136
00:05:04,990 --> 00:05:06,240
[Music]

137
00:05:06,240 --> 00:05:09,120
like just basically set up a request an

138
00:05:09,120 --> 00:05:11,360
xml http request that is going to

139
00:05:11,360 --> 00:05:13,919
retrieve files from the private data

140
00:05:13,919 --> 00:05:16,400
storage of the application and for this

141
00:05:16,400 --> 00:05:19,280
purpose the hack vector website is

142
00:05:19,280 --> 00:05:21,600
really useful because you can have like

143
00:05:21,600 --> 00:05:23,520
a script and then you do like evolve for

144
00:05:23,520 --> 00:05:24,560
charcoal

145
00:05:24,560 --> 00:05:28,720
and then uh this will give you like uh

146
00:05:28,720 --> 00:05:31,120
the script without any like quotes and

147
00:05:31,120 --> 00:05:32,880
all these symbols that would

148
00:05:32,880 --> 00:05:35,759
break in this case uh the concatenation

149
00:05:35,759 --> 00:05:37,440
right because you want the script to

150
00:05:37,440 --> 00:05:38,560
work

151
00:05:38,560 --> 00:05:40,720
um this is the eval uh stream from

152
00:05:40,720 --> 00:05:42,479
cherokee it is like a way

153
00:05:42,479 --> 00:05:43,680
where you don't have any quotes and

154
00:05:43,680 --> 00:05:45,840
things work more smoothly right so in

155
00:05:45,840 --> 00:05:48,800
practice uh when the exercise was being

156
00:05:48,800 --> 00:05:50,080
executed

157
00:05:50,080 --> 00:05:51,840
this is what the application showed in a

158
00:05:51,840 --> 00:05:54,160
dialog

159
00:05:54,160 --> 00:05:56,560
and then this is how you would fix this

160
00:05:56,560 --> 00:05:58,000
kind of things

161
00:05:58,000 --> 00:06:01,280
and now let's look at uh copy paste text

162
00:06:01,280 --> 00:06:02,960
right so

163
00:06:02,960 --> 00:06:04,880
what attack is this now pause the video

164
00:06:04,880 --> 00:06:07,840
and try to guess by yourself

165
00:06:08,479 --> 00:06:12,319
so the solution is that using css only

166
00:06:12,319 --> 00:06:13,440
we can

167
00:06:13,440 --> 00:06:17,680
specify that some text of the web page

168
00:06:17,680 --> 00:06:20,400
the user is going to view

169
00:06:20,400 --> 00:06:22,479
but they will not be able to select it

170
00:06:22,479 --> 00:06:25,039
right so this is what this select none

171
00:06:25,039 --> 00:06:28,560
says so using css we are telling the

172
00:06:28,560 --> 00:06:30,880
browser that this text cannot be

173
00:06:30,880 --> 00:06:33,360
selected even though it's been displayed

174
00:06:33,360 --> 00:06:34,800
and then

175
00:06:34,800 --> 00:06:36,160
underneath

176
00:06:36,160 --> 00:06:38,319
this text we are showing another text

177
00:06:38,319 --> 00:06:41,199
which the user cannot see at all

178
00:06:41,199 --> 00:06:42,080
but

179
00:06:42,080 --> 00:06:44,560
they will select unwillingly right so

180
00:06:44,560 --> 00:06:46,400
and this is the text that will have the

181
00:06:46,400 --> 00:06:48,080
actual payload so for example if you

182
00:06:48,080 --> 00:06:49,759
have a fake tutorial and the user is

183
00:06:49,759 --> 00:06:52,000
copy pasting all the stuff to follow

184
00:06:52,000 --> 00:06:53,440
some steps

185
00:06:53,440 --> 00:06:56,319
then they can get uh they can get this

186
00:06:56,319 --> 00:06:57,280
right

187
00:06:57,280 --> 00:06:58,319
so

188
00:06:58,319 --> 00:07:01,199
in this website is a mobile app the way

189
00:07:01,199 --> 00:07:03,280
this looked was um

190
00:07:03,280 --> 00:07:05,039
i just select all this text and copy

191
00:07:05,039 --> 00:07:07,520
paste it right so you have license site

192
00:07:07,520 --> 00:07:09,280
and then when the user copies this in

193
00:07:09,280 --> 00:07:10,400
reality

194
00:07:10,400 --> 00:07:12,720
they are pasting something else here

195
00:07:12,720 --> 00:07:13,680
right so

196
00:07:13,680 --> 00:07:14,639
when

197
00:07:14,639 --> 00:07:17,360
you click ok then you would crash the

198
00:07:17,360 --> 00:07:18,800
app because

199
00:07:18,800 --> 00:07:20,800
the application

200
00:07:20,800 --> 00:07:22,720
was being

201
00:07:22,720 --> 00:07:25,039
we are basically overriding one of the

202
00:07:25,039 --> 00:07:26,639
files

203
00:07:26,639 --> 00:07:28,160
in the application

204
00:07:28,160 --> 00:07:30,479
so we are this was a password vault

205
00:07:30,479 --> 00:07:32,560
application so basically we are

206
00:07:32,560 --> 00:07:35,599
destroying the walls with uh

207
00:07:35,599 --> 00:07:37,840
the export of the log right so

208
00:07:37,840 --> 00:07:39,520
the user is trying to export the log of

209
00:07:39,520 --> 00:07:40,720
the app

210
00:07:40,720 --> 00:07:42,800
but it's really uh

211
00:07:42,800 --> 00:07:44,080
destroying the vault where all the

212
00:07:44,080 --> 00:07:46,479
passwords are so it's kind of a denial

213
00:07:46,479 --> 00:07:48,960
of service but uh we're using a file

214
00:07:48,960 --> 00:07:51,919
overwrite using a path traversal with a

215
00:07:51,919 --> 00:07:54,639
copy paste triggering so

216
00:07:54,639 --> 00:07:57,360
yeah this is another example this is how

217
00:07:57,360 --> 00:07:59,440
you would mitigate this stuff

218
00:07:59,440 --> 00:08:03,280
and then for spoofing attack right so

219
00:08:03,280 --> 00:08:05,840
spoofing attacks basically similar to

220
00:08:05,840 --> 00:08:07,919
the copy pasting that you show one url

221
00:08:07,919 --> 00:08:10,000
but the click goes to another url right

222
00:08:10,000 --> 00:08:10,720
so

223
00:08:10,720 --> 00:08:12,479
we have for example

224
00:08:12,479 --> 00:08:13,360
uh

225
00:08:13,360 --> 00:08:15,680
these special characters right to left

226
00:08:15,680 --> 00:08:17,199
and left to right so

227
00:08:17,199 --> 00:08:19,840
we can use these special characters here

228
00:08:19,840 --> 00:08:21,919
and we send a link like this right and

229
00:08:21,919 --> 00:08:23,599
then the application is going to be

230
00:08:23,599 --> 00:08:25,360
helpful and say oh this is a domain so i

231
00:08:25,360 --> 00:08:27,360
have to put a link for this so the

232
00:08:27,360 --> 00:08:29,599
victim is going to see this

233
00:08:29,599 --> 00:08:31,120
but when the

234
00:08:31,120 --> 00:08:32,958
victim clicks on this they are really

235
00:08:32,958 --> 00:08:35,360
going to go to this url right because we

236
00:08:35,360 --> 00:08:37,039
use these characters so it's really the

237
00:08:37,039 --> 00:08:39,839
reverse of what the user sees so this is

238
00:08:39,839 --> 00:08:41,360
another way

239
00:08:41,360 --> 00:08:43,279
for kind of phishing attacks and other

240
00:08:43,279 --> 00:08:45,839
stuff like that that sometimes works

241
00:08:45,839 --> 00:08:47,760
right so you can use this against email

242
00:08:47,760 --> 00:08:51,959
applications or chat applications

243
00:08:55,040 --> 00:08:56,800
so let's now take a look

244
00:08:56,800 --> 00:08:57,839
at your

245
00:08:57,839 --> 00:09:00,160
url schematics right so custom url

246
00:09:00,160 --> 00:09:02,320
handlers and that kind of stuff so

247
00:09:02,320 --> 00:09:04,640
sometimes applications define

248
00:09:04,640 --> 00:09:06,640
a custom url handler so in the case of

249
00:09:06,640 --> 00:09:08,640
the ionian browser there was a function

250
00:09:08,640 --> 00:09:12,480
to quit which was exposed using

251
00:09:12,480 --> 00:09:14,640
a url handler right

252
00:09:14,640 --> 00:09:16,399
so

253
00:09:16,399 --> 00:09:20,959
yeah the vulnerability here was that

254
00:09:20,959 --> 00:09:22,880
you could provide like an image for

255
00:09:22,880 --> 00:09:25,600
example and call this url handler and

256
00:09:25,600 --> 00:09:27,519
tell the application to quit right so we

257
00:09:27,519 --> 00:09:29,680
can invoke functionality in the

258
00:09:29,680 --> 00:09:31,760
application which is a browser in this

259
00:09:31,760 --> 00:09:32,959
case

260
00:09:32,959 --> 00:09:34,800
from a page that the

261
00:09:34,800 --> 00:09:36,399
browser is visiting

262
00:09:36,399 --> 00:09:38,320
and we can for example just close the

263
00:09:38,320 --> 00:09:40,480
browser from the page right the entire

264
00:09:40,480 --> 00:09:43,360
browser not just our own page so this is

265
00:09:43,360 --> 00:09:45,519
uh an interesting attack

266
00:09:45,519 --> 00:09:46,399
uh

267
00:09:46,399 --> 00:09:48,640
yeah and the reason is

268
00:09:48,640 --> 00:09:50,640
is this right so this is what the code

269
00:09:50,640 --> 00:09:52,000
looks like

270
00:09:52,000 --> 00:09:54,000
okay so this is how you fix this kind of

271
00:09:54,000 --> 00:09:57,360
stuff and now let's look at logic

272
00:09:57,360 --> 00:09:59,120
box right so

273
00:09:59,120 --> 00:10:01,040
for mine in the middle

274
00:10:01,040 --> 00:10:04,640
uh the context is a secure messenger app

275
00:10:04,640 --> 00:10:05,680
so

276
00:10:05,680 --> 00:10:07,760
we have

277
00:10:07,760 --> 00:10:11,519
a clear text how to achieve clear text

278
00:10:11,519 --> 00:10:14,560
man in the middle for xmpp right so

279
00:10:14,560 --> 00:10:18,079
chat applications use this protocol xmpp

280
00:10:18,079 --> 00:10:18,959
so

281
00:10:18,959 --> 00:10:20,720
what you can do is when you try to money

282
00:10:20,720 --> 00:10:22,959
in the middle you can define plane as

283
00:10:22,959 --> 00:10:25,440
the only authentication mechanism and

284
00:10:25,440 --> 00:10:26,880
then because there's nothing else to

285
00:10:26,880 --> 00:10:29,360
fall back to sometimes the application

286
00:10:29,360 --> 00:10:31,279
will say okay if that's the only way i

287
00:10:31,279 --> 00:10:33,839
can log in i will try to log in that way

288
00:10:33,839 --> 00:10:36,320
and then the credentials will be sent

289
00:10:36,320 --> 00:10:39,040
base64 encoded and you can basically for

290
00:10:39,040 --> 00:10:41,279
decode them and get the user credentials

291
00:10:41,279 --> 00:10:43,839
that way right so that's another thing

292
00:10:43,839 --> 00:10:46,160
um

293
00:10:46,160 --> 00:10:47,839
and this is how you

294
00:10:47,839 --> 00:10:49,200
fix this

295
00:10:49,200 --> 00:10:52,240
now let's look at update text right so

296
00:10:52,240 --> 00:10:54,320
you have an application and it's doing a

297
00:10:54,320 --> 00:10:56,000
an update check what's the problem with

298
00:10:56,000 --> 00:10:56,880
this

299
00:10:56,880 --> 00:10:58,640
i'll pause the video and try to guess by

300
00:10:58,640 --> 00:11:01,640
yourself

301
00:11:03,680 --> 00:11:05,279
the issue is of course

302
00:11:05,279 --> 00:11:07,040
the update is being checked for clear

303
00:11:07,040 --> 00:11:08,720
text activity

304
00:11:08,720 --> 00:11:10,480
we have here clear text is p and it's

305
00:11:10,480 --> 00:11:12,399
retrieving a json file

306
00:11:12,399 --> 00:11:14,320
so we can modify the response and

307
00:11:14,320 --> 00:11:17,120
instead of providing the url from where

308
00:11:17,120 --> 00:11:19,120
to download the update we can provide a

309
00:11:19,120 --> 00:11:21,120
url that is really a

310
00:11:21,120 --> 00:11:23,839
phone url right so because we attacking

311
00:11:23,839 --> 00:11:25,440
mobile apps

312
00:11:25,440 --> 00:11:27,920
when the user clicks on updates to get

313
00:11:27,920 --> 00:11:29,760
the update instead of getting the update

314
00:11:29,760 --> 00:11:31,600
they are ringing for example a premium

315
00:11:31,600 --> 00:11:33,200
number right

316
00:11:33,200 --> 00:11:36,320
so this is one of the attack vectors

317
00:11:36,320 --> 00:11:39,040
uh useful against mobile apps right and

318
00:11:39,040 --> 00:11:40,720
this is how you piece this

319
00:11:40,720 --> 00:11:44,160
now let's look at a user dialog for

320
00:11:44,160 --> 00:11:45,440
warnings

321
00:11:45,440 --> 00:11:46,399
so

322
00:11:46,399 --> 00:11:48,000
we have this scenario right the

323
00:11:48,000 --> 00:11:50,000
application catches when there's like

324
00:11:50,000 --> 00:11:51,519
the certificate is invalid and it's

325
00:11:51,519 --> 00:11:53,120
going to on the user

326
00:11:53,120 --> 00:11:54,800
and the user is going to get something

327
00:11:54,800 --> 00:11:57,440
like this exceptional certificate always

328
00:11:57,440 --> 00:11:59,360
once a board

329
00:11:59,360 --> 00:12:02,399
and then this is how um

330
00:12:02,399 --> 00:12:05,360
a user the application registers a

331
00:12:05,360 --> 00:12:07,440
broadcast receiver right so

332
00:12:07,440 --> 00:12:09,279
on the fly and this is something

333
00:12:09,279 --> 00:12:11,040
important to know right because if you

334
00:12:11,040 --> 00:12:13,600
run drawstring stuff like that uh this

335
00:12:13,600 --> 00:12:15,120
will only look at the manifest but

336
00:12:15,120 --> 00:12:16,959
sometimes the application

337
00:12:16,959 --> 00:12:19,120
is going to register attack surface like

338
00:12:19,120 --> 00:12:20,000
a

339
00:12:20,000 --> 00:12:22,399
receiver in the code itself so you have

340
00:12:22,399 --> 00:12:25,040
to look at the code too right

341
00:12:25,040 --> 00:12:28,000
so here it is registering the receiver

342
00:12:28,000 --> 00:12:30,160
then starts the activity and waits for a

343
00:12:30,160 --> 00:12:32,720
response and then at the end of when it

344
00:12:32,720 --> 00:12:35,279
gets the response it will unregister

345
00:12:35,279 --> 00:12:37,360
a receiver right but there's a moment in

346
00:12:37,360 --> 00:12:38,800
time where this

347
00:12:38,800 --> 00:12:41,200
receiver is going to be listening for

348
00:12:41,200 --> 00:12:43,600
intents right and this is the what the

349
00:12:43,600 --> 00:12:46,000
processing of the intent looks like

350
00:12:46,000 --> 00:12:49,200
to answer this question whether to trust

351
00:12:49,200 --> 00:12:49,470
the

352
00:12:49,470 --> 00:12:51,040
[Music]

353
00:12:51,040 --> 00:12:54,639
uh ssl certificate or rejected right

354
00:12:54,639 --> 00:12:56,399
so it's getting the intended extra for

355
00:12:56,399 --> 00:12:58,480
decision the internet extra choice and

356
00:12:58,480 --> 00:13:00,800
then if the user decides to say for

357
00:13:00,800 --> 00:13:03,440
example always then it will start it

358
00:13:03,440 --> 00:13:05,920
will store this certificate to trust it

359
00:13:05,920 --> 00:13:08,240
forever right so what is the

360
00:13:08,240 --> 00:13:10,959
vulnerability in this i suggest you go

361
00:13:10,959 --> 00:13:12,480
back and think about it for a while

362
00:13:12,480 --> 00:13:14,560
pause the video and now i'm going to

363
00:13:14,560 --> 00:13:16,480
jump to the solution

364
00:13:16,480 --> 00:13:18,000
so

365
00:13:18,000 --> 00:13:20,000
this was a permanent mind in the middle

366
00:13:20,000 --> 00:13:22,720
from bypass

367
00:13:22,720 --> 00:13:25,839
using this right so

368
00:13:28,079 --> 00:13:30,639
we can send this broadcast receiver

369
00:13:30,639 --> 00:13:33,120
uh an intent

370
00:13:33,120 --> 00:13:35,200
that is sending basically the decision

371
00:13:35,200 --> 00:13:38,000
and the choice of trusting uh these

372
00:13:38,000 --> 00:13:41,040
successful certificates forever

373
00:13:41,040 --> 00:13:43,199
and then if we can do that

374
00:13:43,199 --> 00:13:44,880
at the right at the right time when the

375
00:13:44,880 --> 00:13:47,360
user is being prompted we can bypass

376
00:13:47,360 --> 00:13:49,279
that and get our certificate accepted

377
00:13:49,279 --> 00:13:51,440
forever right so this is how you fix

378
00:13:51,440 --> 00:13:53,760
this and now let's look at another man

379
00:13:53,760 --> 00:13:56,079
in the middle of exemple

380
00:13:56,079 --> 00:13:58,000
so another thing that you can do when

381
00:13:58,000 --> 00:14:00,480
you manage the middle xmpp so it's a

382
00:14:00,480 --> 00:14:02,320
protocol for chat applications like

383
00:14:02,320 --> 00:14:03,360
jabber

384
00:14:03,360 --> 00:14:05,440
facebook and gmail also have like some

385
00:14:05,440 --> 00:14:06,800
chat stuff

386
00:14:06,800 --> 00:14:09,839
uh so man in the middle this protocol

387
00:14:09,839 --> 00:14:11,360
one thing that you can do is to set

388
00:14:11,360 --> 00:14:12,560
opacity

389
00:14:12,560 --> 00:14:15,120
and then by default it will run with a

390
00:14:15,120 --> 00:14:17,680
self-signed certificate so if you can

391
00:14:17,680 --> 00:14:20,000
get the application to try to

392
00:14:20,000 --> 00:14:22,720
authenticate to your prosody server

393
00:14:22,720 --> 00:14:25,040
that's that means that the application

394
00:14:25,040 --> 00:14:26,639
is trusting

395
00:14:26,639 --> 00:14:28,399
self-signed certificates so this is a

396
00:14:28,399 --> 00:14:31,600
good test to do in case you face a

397
00:14:31,600 --> 00:14:33,440
situation like that

398
00:14:33,440 --> 00:14:36,399
now let's look at clear text http

399
00:14:36,399 --> 00:14:38,160
communication right so what's the

400
00:14:38,160 --> 00:14:40,399
vulnerability here

401
00:14:40,399 --> 00:14:41,839
pause the video and try to guess by

402
00:14:41,839 --> 00:14:44,839
yourself

403
00:14:46,480 --> 00:14:48,959
so the application tries to get some xml

404
00:14:48,959 --> 00:14:50,720
from the server right so we have some

405
00:14:50,720 --> 00:14:53,120
size.com some path file

406
00:14:53,120 --> 00:14:55,519
and then the file is saved like so right

407
00:14:55,519 --> 00:14:56,639
so we have

408
00:14:56,639 --> 00:14:58,560
uh to download file name which is

409
00:14:58,560 --> 00:15:00,560
retrieved from the xml and to download

410
00:15:00,560 --> 00:15:02,720
contents right so and this is how the

411
00:15:02,720 --> 00:15:04,320
file is created

412
00:15:04,320 --> 00:15:05,760
so basically

413
00:15:05,760 --> 00:15:07,120
we can

414
00:15:07,120 --> 00:15:09,600
modify this media file

415
00:15:09,600 --> 00:15:11,440
right

416
00:15:11,440 --> 00:15:12,880
actually this media file was from a

417
00:15:12,880 --> 00:15:14,639
library that the application was using

418
00:15:14,639 --> 00:15:17,279
this was not in the response but by

419
00:15:17,279 --> 00:15:19,360
doing a little bit of research

420
00:15:19,360 --> 00:15:21,600
i found that there was this file name

421
00:15:21,600 --> 00:15:22,959
thing that we could do with the media

422
00:15:22,959 --> 00:15:24,399
file so

423
00:15:24,399 --> 00:15:28,240
in here we basically uh provide the path

424
00:15:28,240 --> 00:15:29,759
to the preferences

425
00:15:29,759 --> 00:15:31,680
right because this was about reporting

426
00:15:31,680 --> 00:15:33,360
human right violation some stuff like

427
00:15:33,360 --> 00:15:34,720
that as well

428
00:15:34,720 --> 00:15:36,720
uh and here

429
00:15:36,720 --> 00:15:39,279
we can specify the preferences.xml file

430
00:15:39,279 --> 00:15:41,839
of course since we control the file

431
00:15:41,839 --> 00:15:44,079
we can also specify whatever hash we

432
00:15:44,079 --> 00:15:46,560
want and then the download url for the

433
00:15:46,560 --> 00:15:48,720
xml file right so

434
00:15:48,720 --> 00:15:51,120
in the end we get the preferences

435
00:15:51,120 --> 00:15:53,440
completely overwritten

436
00:15:53,440 --> 00:15:55,440
with preferences of our choice as an

437
00:15:55,440 --> 00:15:58,160
attacker and then this resulted in a

438
00:15:58,160 --> 00:16:00,320
permanent man in the middle because

439
00:16:00,320 --> 00:16:02,720
in this preferences file

440
00:16:02,720 --> 00:16:05,279
you could specify which server you're

441
00:16:05,279 --> 00:16:07,600
going to send the human rights

442
00:16:07,600 --> 00:16:10,000
violations too right so a government for

443
00:16:10,000 --> 00:16:12,480
example could exploit this vulnerability

444
00:16:12,480 --> 00:16:15,199
and get all the population to report

445
00:16:15,199 --> 00:16:17,279
the human rights violations to the

446
00:16:17,279 --> 00:16:20,320
government instead of to the

447
00:16:20,320 --> 00:16:23,199
ngo right so

448
00:16:23,199 --> 00:16:26,720
um yeah this is how that look like so

449
00:16:26,720 --> 00:16:28,959
look at the messages you could see here

450
00:16:28,959 --> 00:16:31,519
the file was deleted and then the file

451
00:16:31,519 --> 00:16:34,639
was copied over right so this is how it

452
00:16:34,639 --> 00:16:36,639
was trying to save it on the sd card but

453
00:16:36,639 --> 00:16:39,199
with the path traversal we can basically

454
00:16:39,199 --> 00:16:41,120
override the preferences of the

455
00:16:41,120 --> 00:16:42,320
application

456
00:16:42,320 --> 00:16:44,639
this is how you fix that now let's look

457
00:16:44,639 --> 00:16:48,079
at more clear ccdp for ios in this case

458
00:16:48,079 --> 00:16:49,920
so this was an application that was

459
00:16:49,920 --> 00:16:52,560
retrieving a css file

460
00:16:52,560 --> 00:16:54,079
and then

461
00:16:54,079 --> 00:16:56,639
the css file was being used or

462
00:16:56,639 --> 00:16:59,360
concatenated inside of the html of the

463
00:16:59,360 --> 00:17:00,560
page

464
00:17:00,560 --> 00:17:02,480
okay so now pause the video try to guess

465
00:17:02,480 --> 00:17:04,720
by yourself

466
00:17:04,720 --> 00:17:06,959
and this is the problem right we can

467
00:17:06,959 --> 00:17:08,319
modify

468
00:17:08,319 --> 00:17:10,240
the css file

469
00:17:10,240 --> 00:17:11,520
so that

470
00:17:11,520 --> 00:17:13,839
when it is concatenated it closes the

471
00:17:13,839 --> 00:17:14,959
style

472
00:17:14,959 --> 00:17:16,559
that it was when it was meant to be

473
00:17:16,559 --> 00:17:17,520
inside

474
00:17:17,520 --> 00:17:20,400
so we can close this tag and we can use

475
00:17:20,400 --> 00:17:22,240
a script tag

476
00:17:22,240 --> 00:17:24,959
and then we can basically get permanent

477
00:17:24,959 --> 00:17:26,480
xss

478
00:17:26,480 --> 00:17:28,400
on the application forever because the

479
00:17:28,400 --> 00:17:30,559
server is going always going to require

480
00:17:30,559 --> 00:17:34,000
reply but the file has not changed

481
00:17:34,000 --> 00:17:35,760
whereas in here

482
00:17:35,760 --> 00:17:37,360
we are getting uh

483
00:17:37,360 --> 00:17:39,919
every time the user opens an article or

484
00:17:39,919 --> 00:17:42,799
javascript is going to execute right

485
00:17:42,799 --> 00:17:45,600
so this is uh how it looked like the

486
00:17:45,600 --> 00:17:48,799
exploitation in practice

487
00:17:51,120 --> 00:17:52,640
for exercise this is always a good

488
00:17:52,640 --> 00:17:54,799
approach that you have your own attacker

489
00:17:54,799 --> 00:17:57,440
cm javascript because then you can just

490
00:17:57,440 --> 00:17:59,280
keep modifying this file and try and try

491
00:17:59,280 --> 00:18:01,200
from the mobile phone and see what

492
00:18:01,200 --> 00:18:02,160
happens

493
00:18:02,160 --> 00:18:04,080
um but it's more comfortable because you

494
00:18:04,080 --> 00:18:05,760
don't need to insert a payload each time

495
00:18:05,760 --> 00:18:07,679
and stuff right so

496
00:18:07,679 --> 00:18:09,280
this is basically getting the cookies

497
00:18:09,280 --> 00:18:12,240
the location document title the

498
00:18:12,240 --> 00:18:14,480
inner html so basically everything

499
00:18:14,480 --> 00:18:16,400
and then we get our report back to the

500
00:18:16,400 --> 00:18:18,480
attacker like this type the user agent

501
00:18:18,480 --> 00:18:21,600
the cookies the url and all the html of

502
00:18:21,600 --> 00:18:24,559
whatever the user was reading so we can

503
00:18:24,559 --> 00:18:27,679
spy on user behavior

504
00:18:27,679 --> 00:18:29,919
and see what kind of views they like or

505
00:18:29,919 --> 00:18:32,640
whatever right so this was the issue

506
00:18:32,640 --> 00:18:34,880
and another thing that we could do here

507
00:18:34,880 --> 00:18:38,160
is a data expension right because

508
00:18:38,160 --> 00:18:40,240
uh when

509
00:18:40,240 --> 00:18:43,200
things were being saved um as favorite

510
00:18:43,200 --> 00:18:46,080
articles then they would run from file

511
00:18:46,080 --> 00:18:46,880
so

512
00:18:46,880 --> 00:18:48,559
this is why we have this check here for

513
00:18:48,559 --> 00:18:50,240
the exploitation

514
00:18:50,240 --> 00:18:53,120
uh and then we could uh read all the

515
00:18:53,120 --> 00:18:55,200
sensitive files in a loop for example

516
00:18:55,200 --> 00:18:57,120
right so you define like something it

517
00:18:57,120 --> 00:18:58,640
files in

518
00:18:58,640 --> 00:19:00,000
in an array and then you look through

519
00:19:00,000 --> 00:19:00,880
that

520
00:19:00,880 --> 00:19:04,400
just make a xml http request to get them

521
00:19:04,400 --> 00:19:06,320
and then we can alert we can see if we

522
00:19:06,320 --> 00:19:08,240
can read them or not on the app right so

523
00:19:08,240 --> 00:19:09,760
that

524
00:19:09,760 --> 00:19:12,320
exploit and this is how this look like

525
00:19:12,320 --> 00:19:14,320
in practice um

526
00:19:14,320 --> 00:19:16,960
just reading the files right

527
00:19:16,960 --> 00:19:19,039
they called history and then of course

528
00:19:19,039 --> 00:19:22,080
we can also get application files so as

529
00:19:22,080 --> 00:19:24,799
as long as the application can read it

530
00:19:24,799 --> 00:19:26,640
we should be able to read right so this

531
00:19:26,640 --> 00:19:28,640
is how this looks so

532
00:19:28,640 --> 00:19:31,679
we can we need to get the token on ios

533
00:19:31,679 --> 00:19:33,919
right

534
00:19:35,760 --> 00:19:36,840
because on

535
00:19:36,840 --> 00:19:40,320
ios there's a token that separates uh

536
00:19:40,320 --> 00:19:41,919
storage of the app and stuff so in this

537
00:19:41,919 --> 00:19:44,080
case the this token was inside of the

538
00:19:44,080 --> 00:19:45,200
location

539
00:19:45,200 --> 00:19:46,880
so with javascript we could get the

540
00:19:46,880 --> 00:19:50,320
token and then we could fit the file and

541
00:19:50,320 --> 00:19:52,640
that's how you would fix this

542
00:19:52,640 --> 00:19:54,480
uh again keeping all that because of

543
00:19:54,480 --> 00:19:55,919
time constraints

544
00:19:55,919 --> 00:19:58,080
um and then um

545
00:19:58,080 --> 00:20:01,520
another another one about x filtration

546
00:20:01,520 --> 00:20:04,480
if we have uh same functionality right

547
00:20:04,480 --> 00:20:07,200
so we have an exported activity

548
00:20:07,200 --> 00:20:10,640
there's a browser it's an intent filter

549
00:20:10,640 --> 00:20:13,600
and here we have we have this right so

550
00:20:13,600 --> 00:20:15,120
um

551
00:20:15,120 --> 00:20:16,799
basically checking

552
00:20:16,799 --> 00:20:18,960
what the url is being passed right in

553
00:20:18,960 --> 00:20:20,080
this

554
00:20:20,080 --> 00:20:22,720
query intent extra

555
00:20:22,720 --> 00:20:25,039
and then you need to figure out what the

556
00:20:25,039 --> 00:20:25,840
rules

557
00:20:25,840 --> 00:20:27,600
pause the video here and try to guess by

558
00:20:27,600 --> 00:20:30,000
yourself

559
00:20:32,720 --> 00:20:33,520
the

560
00:20:33,520 --> 00:20:36,000
is of course that the file url the file

561
00:20:36,000 --> 00:20:38,320
url scheme is being

562
00:20:38,320 --> 00:20:40,480
accepted right so this is a dangerous

563
00:20:40,480 --> 00:20:42,240
url because

564
00:20:42,240 --> 00:20:44,080
we can for example

565
00:20:44,080 --> 00:20:46,320
as a malicious application we can define

566
00:20:46,320 --> 00:20:49,120
this url on the sd card so as a

567
00:20:49,120 --> 00:20:50,880
malicious application we can write this

568
00:20:50,880 --> 00:20:52,400
file

569
00:20:52,400 --> 00:20:55,120
on the sd card and then we can send an

570
00:20:55,120 --> 00:20:56,880
intent to the app so that it navigates

571
00:20:56,880 --> 00:20:59,679
to this file url

572
00:20:59,679 --> 00:21:01,360
then

573
00:21:01,360 --> 00:21:04,400
from the still html file in the sd card

574
00:21:04,400 --> 00:21:06,159
we can uh

575
00:21:06,159 --> 00:21:08,480
dump all the databases and sensitive

576
00:21:08,480 --> 00:21:10,880
files that the application has

577
00:21:10,880 --> 00:21:13,200
and send them an attacker right so this

578
00:21:13,200 --> 00:21:15,200
would be how this looked like at the

579
00:21:15,200 --> 00:21:18,000
time uh yeah and this is how you fix

580
00:21:18,000 --> 00:21:18,880
this

581
00:21:18,880 --> 00:21:19,919
so

582
00:21:19,919 --> 00:21:21,360
now let's look at

583
00:21:21,360 --> 00:21:23,200
attacks right so this was a crypt

584
00:21:23,200 --> 00:21:24,320
messenger

585
00:21:24,320 --> 00:21:26,000
just pause the video and try to figure

586
00:21:26,000 --> 00:21:27,120
out

587
00:21:27,120 --> 00:21:30,240
what the vulnerability is here and i'm

588
00:21:30,240 --> 00:21:32,799
going to jump the solution right so we

589
00:21:32,799 --> 00:21:34,640
have an arbitrary file right on the

590
00:21:34,640 --> 00:21:35,840
encryption

591
00:21:35,840 --> 00:21:38,880
uh the application receives uh encrypted

592
00:21:38,880 --> 00:21:41,520
files right so one user sends an file to

593
00:21:41,520 --> 00:21:43,840
another

594
00:21:43,840 --> 00:21:46,320
you encrypt both the file itself as well

595
00:21:46,320 --> 00:21:47,679
as the file name right so the

596
00:21:47,679 --> 00:21:50,000
application decrypts this and then gets

597
00:21:50,000 --> 00:21:52,240
the original file name and creates a new

598
00:21:52,240 --> 00:21:54,480
file with the original file name that

599
00:21:54,480 --> 00:21:55,600
the user

600
00:21:55,600 --> 00:21:56,880
intended

601
00:21:56,880 --> 00:21:59,520
so uh with this

602
00:21:59,520 --> 00:22:00,799
we can

603
00:22:00,799 --> 00:22:03,280
again use a path traversal

604
00:22:03,280 --> 00:22:05,360
and provide like another path so when

605
00:22:05,360 --> 00:22:08,080
the user decrypts this we can override

606
00:22:08,080 --> 00:22:10,559
arbitrage files within

607
00:22:10,559 --> 00:22:12,880
the storage of the app or of the sd card

608
00:22:12,880 --> 00:22:14,400
right so

609
00:22:14,400 --> 00:22:18,159
this is really bad and now uh

610
00:22:18,159 --> 00:22:20,159
again try to guess what this

611
00:22:20,159 --> 00:22:23,120
vulnerability is

612
00:22:23,200 --> 00:22:26,480
and this is the solution right so

613
00:22:26,480 --> 00:22:28,240
this is the vulnerability we have a

614
00:22:28,240 --> 00:22:30,080
string concatenation

615
00:22:30,080 --> 00:22:32,559
uh methodscape for javascript on the

616
00:22:32,559 --> 00:22:34,080
message variable

617
00:22:34,080 --> 00:22:35,039
so

618
00:22:35,039 --> 00:22:37,679
we can for example send an email

619
00:22:37,679 --> 00:22:39,840
that is like closing because this is

620
00:22:39,840 --> 00:22:41,280
going to be rendered here right so we

621
00:22:41,280 --> 00:22:43,520
want to close the single quote add a

622
00:22:43,520 --> 00:22:46,000
semicolon and then we add our payload

623
00:22:46,000 --> 00:22:46,960
here

624
00:22:46,960 --> 00:22:48,960
and then we add something at the end so

625
00:22:48,960 --> 00:22:50,960
that javascript doesn't break right so

626
00:22:50,960 --> 00:22:53,200
just an a variable so then it will close

627
00:22:53,200 --> 00:22:56,559
fine and then with this here we can get

628
00:22:56,559 --> 00:22:58,000
the passphrase which has just been

629
00:22:58,000 --> 00:23:00,000
defined on the variable above

630
00:23:00,000 --> 00:23:02,320
we can send the pass trace to

631
00:23:02,320 --> 00:23:04,799
another right

632
00:23:04,799 --> 00:23:06,320
and then you can

633
00:23:06,320 --> 00:23:08,400
verify this we have netcat listener for

634
00:23:08,400 --> 00:23:11,520
example then you get a request like get

635
00:23:11,520 --> 00:23:14,240
my secret first phrase so we can steal

636
00:23:14,240 --> 00:23:16,880
the passphrase of the user

637
00:23:16,880 --> 00:23:19,919
open your email that's how you pick this

638
00:23:19,919 --> 00:23:22,720
now let's look at a mandated application

639
00:23:22,720 --> 00:23:25,440
in south korea so this is

640
00:23:25,440 --> 00:23:27,039
the application i hinted about at the

641
00:23:27,039 --> 00:23:29,440
beginning

642
00:23:30,799 --> 00:23:32,559
everybody in south korea was forced to

643
00:23:32,559 --> 00:23:35,200
use this parent children it was meant

644
00:23:35,200 --> 00:23:37,679
for the parent to control the children

645
00:23:37,679 --> 00:23:40,400
um you know when you say whatever in

646
00:23:40,400 --> 00:23:41,919
politics that is about saving the

647
00:23:41,919 --> 00:23:44,880
children is always the stakes are high

648
00:23:44,880 --> 00:23:45,679
so

649
00:23:45,679 --> 00:23:47,039
this is what they were trying but

650
00:23:47,039 --> 00:23:48,320
unfortunately

651
00:23:48,320 --> 00:23:50,159
the application was really broken as

652
00:23:50,159 --> 00:23:52,000
these two reports show

653
00:23:52,000 --> 00:23:53,120
so

654
00:23:53,120 --> 00:23:54,799
uh the first time we tested the

655
00:23:54,799 --> 00:23:56,000
application

656
00:23:56,000 --> 00:23:58,640
the application was not using any ssl at

657
00:23:58,640 --> 00:24:00,320
all right so

658
00:24:00,320 --> 00:24:02,720
if for example there was a child using

659
00:24:02,720 --> 00:24:05,840
public wi-fi somebody guy could like get

660
00:24:05,840 --> 00:24:08,880
the url and all the requests and all the

661
00:24:08,880 --> 00:24:11,120
stuff going on right so

662
00:24:11,120 --> 00:24:12,080
uh

663
00:24:12,080 --> 00:24:15,039
so yeah there was no ssl in the evening

664
00:24:15,039 --> 00:24:18,000
then on the second round they switched

665
00:24:18,000 --> 00:24:21,760
to ssl so we have this hdps here

666
00:24:21,760 --> 00:24:25,200
so we were like okay has this been fixed

667
00:24:25,200 --> 00:24:26,559
but then

668
00:24:26,559 --> 00:24:28,320
we found that this is how they validate

669
00:24:28,320 --> 00:24:29,840
certificates so now

670
00:24:29,840 --> 00:24:31,840
pause the video and try to see what the

671
00:24:31,840 --> 00:24:34,799
problem is with this

672
00:24:36,640 --> 00:24:37,840
so yeah

673
00:24:37,840 --> 00:24:38,960
basically

674
00:24:38,960 --> 00:24:41,039
we have ssl money in the middle without

675
00:24:41,039 --> 00:24:42,320
warnings because whenever the

676
00:24:42,320 --> 00:24:44,799
application receives an ssl error

677
00:24:44,799 --> 00:24:46,559
it's going to proceed it doesn't matter

678
00:24:46,559 --> 00:24:48,159
what the error is it's always going to

679
00:24:48,159 --> 00:24:50,880
proceed and if the host name is wrong

680
00:24:50,880 --> 00:24:53,200
for the given ssl certificate it's just

681
00:24:53,200 --> 00:24:55,760
going to return true so whatever happens

682
00:24:55,760 --> 00:24:58,240
is going to work right it's basically

683
00:24:58,240 --> 00:25:00,799
ignoring the warnings now the video i'm

684
00:25:00,799 --> 00:25:02,799
trying to figure out what this algorithm

685
00:25:02,799 --> 00:25:04,960
is and what the problem is here what is

686
00:25:04,960 --> 00:25:08,159
the vulnerability and i'm going to jump

687
00:25:08,159 --> 00:25:11,120
to the solution

688
00:25:11,120 --> 00:25:13,039
okay so that's the algorithm of course

689
00:25:13,039 --> 00:25:15,840
is x4 because we have

690
00:25:15,840 --> 00:25:17,919
the input becomes the output and then

691
00:25:17,919 --> 00:25:20,320
the same output if you use input you get

692
00:25:20,320 --> 00:25:22,320
the same output as it was the input

693
00:25:22,320 --> 00:25:25,279
before so basically use the same key to

694
00:25:25,279 --> 00:25:26,880
encrypt and decrypt

695
00:25:26,880 --> 00:25:30,480
and you can see that this key is being

696
00:25:30,480 --> 00:25:33,440
hardcoded in the app like this with the

697
00:25:33,440 --> 00:25:35,679
bytes like this right

698
00:25:35,679 --> 00:25:38,799
so this is what they were using

699
00:25:38,799 --> 00:25:39,840
well

700
00:25:39,840 --> 00:25:41,520
encrypt the phones right it's more kind

701
00:25:41,520 --> 00:25:44,159
of encoding because

702
00:25:44,159 --> 00:25:46,960
it was on the application itself but

703
00:25:46,960 --> 00:25:49,039
it's really encryption right so extra

704
00:25:49,039 --> 00:25:50,240
encryption

705
00:25:50,240 --> 00:25:52,799
um and then we can use the same key to

706
00:25:52,799 --> 00:25:54,080
encrypt and decrypt and this was the

707
00:25:54,080 --> 00:25:57,360
python snippet

708
00:25:57,360 --> 00:25:58,880
then basically we have like an

709
00:25:58,880 --> 00:26:00,960
obfuscated phone number

710
00:26:00,960 --> 00:26:02,080
with the

711
00:26:02,080 --> 00:26:04,000
hard coded key on the phone

712
00:26:04,000 --> 00:26:06,720
run this director and this gives you a

713
00:26:06,720 --> 00:26:08,960
phone number

714
00:26:08,960 --> 00:26:10,960
for the user right and it had not some

715
00:26:10,960 --> 00:26:13,279
null bytes here maybe to make it harder

716
00:26:13,279 --> 00:26:14,720
to find

717
00:26:14,720 --> 00:26:16,400
if somebody was running strings on the

718
00:26:16,400 --> 00:26:18,159
apk or something

719
00:26:18,159 --> 00:26:20,640
uh so now let's take a look at this

720
00:26:20,640 --> 00:26:22,080
right pause the video and try to see

721
00:26:22,080 --> 00:26:25,200
what the vulnerability is

722
00:26:25,200 --> 00:26:26,960
and i'm going to jump to the solution

723
00:26:26,960 --> 00:26:28,159
now

724
00:26:28,159 --> 00:26:30,320
so here we have

725
00:26:30,320 --> 00:26:32,640
another problem right so we have a

726
00:26:32,640 --> 00:26:35,679
base64 decode of some fixed parameter

727
00:26:35,679 --> 00:26:38,000
that is hardcoded somewhere saved into a

728
00:26:38,000 --> 00:26:39,919
string and then here we get the bytes of

729
00:26:39,919 --> 00:26:41,120
the string

730
00:26:41,120 --> 00:26:44,720
so basically this is the aes key

731
00:26:44,720 --> 00:26:47,360
that is hardcoded somewhere right

732
00:26:47,360 --> 00:26:48,159
so

733
00:26:48,159 --> 00:26:49,840
we have a

734
00:26:49,840 --> 00:26:50,960
request

735
00:26:50,960 --> 00:26:53,039
right so first there's the phone of

736
00:26:53,039 --> 00:26:54,960
fuscation using xor

737
00:26:54,960 --> 00:26:58,320
and then with the request we have aes

738
00:26:58,320 --> 00:27:00,799
right we've used second hardcoded key

739
00:27:00,799 --> 00:27:03,120
and then we get this encrypted

740
00:27:03,120 --> 00:27:06,159
request right so basically a useless aes

741
00:27:06,159 --> 00:27:08,159
layer with a static key that can be

742
00:27:08,159 --> 00:27:09,440
retrieved

743
00:27:09,440 --> 00:27:12,080
from the application so in summary

744
00:27:12,080 --> 00:27:14,480
of implementation of star sheriff we

745
00:27:14,480 --> 00:27:16,480
have this disaster of this is the phone

746
00:27:16,480 --> 00:27:17,360
number

747
00:27:17,360 --> 00:27:20,080
you accord with a key that is hardcoded

748
00:27:20,080 --> 00:27:21,679
in the application

749
00:27:21,679 --> 00:27:22,799
and is

750
00:27:22,799 --> 00:27:24,799
sent in the request like this right so

751
00:27:24,799 --> 00:27:27,600
the request is then encrypted using aes

752
00:27:27,600 --> 00:27:29,520
with a second hardcoded encryption on

753
00:27:29,520 --> 00:27:30,960
the application that anybody can

754
00:27:30,960 --> 00:27:34,159
retrieve so these steps are useless then

755
00:27:34,159 --> 00:27:36,000
the request is sent

756
00:27:36,000 --> 00:27:38,320
yeah but the ssl validation is

757
00:27:38,320 --> 00:27:40,960
completely ignored as we saw because it

758
00:27:40,960 --> 00:27:42,640
was like proceed for installers and

759
00:27:42,640 --> 00:27:46,000
stuff and then we get the response back

760
00:27:46,000 --> 00:27:47,120
right so

761
00:27:47,120 --> 00:27:49,679
in essence uh the whole thing was broken

762
00:27:49,679 --> 00:27:50,559
and

763
00:27:50,559 --> 00:27:52,080
this slide we just put it together

764
00:27:52,080 --> 00:27:54,159
because it was that's so funny

765
00:27:54,159 --> 00:27:56,159
it was your program this is how you

766
00:27:56,159 --> 00:27:57,919
would go about fix that so now let's

767
00:27:57,919 --> 00:28:01,679
look at uh code execution right so this

768
00:28:01,679 --> 00:28:04,240
was a cool scenario it was a crm

769
00:28:04,240 --> 00:28:08,159
application with google authentication

770
00:28:09,600 --> 00:28:10,960
so to log in

771
00:28:10,960 --> 00:28:12,799
you get a pop-up right if the user is

772
00:28:12,799 --> 00:28:14,480
not logged in the user logs in with

773
00:28:14,480 --> 00:28:16,240
google and then the pop-up closes and

774
00:28:16,240 --> 00:28:18,960
sends the data to the application

775
00:28:18,960 --> 00:28:22,000
so we have a login with you that is

776
00:28:22,000 --> 00:28:23,120
browseable

777
00:28:23,120 --> 00:28:25,279
and then we have

778
00:28:25,279 --> 00:28:26,320
here

779
00:28:26,320 --> 00:28:28,399
how the token is being saved that comes

780
00:28:28,399 --> 00:28:29,600
from google

781
00:28:29,600 --> 00:28:30,480
so

782
00:28:30,480 --> 00:28:31,919
pause the video try to figure out what

783
00:28:31,919 --> 00:28:33,600
the vulnerability is and now i'll jump

784
00:28:33,600 --> 00:28:36,159
to the solution

785
00:28:36,159 --> 00:28:38,000
so the solution is that we have sql

786
00:28:38,000 --> 00:28:40,480
injection and code execution right so we

787
00:28:40,480 --> 00:28:43,440
have this string concatenation here

788
00:28:43,440 --> 00:28:45,200
and you can see

789
00:28:45,200 --> 00:28:47,679
that the value that comes from the token

790
00:28:47,679 --> 00:28:49,760
is being concatenated into the sql query

791
00:28:49,760 --> 00:28:50,960
like this

792
00:28:50,960 --> 00:28:51,760
so

793
00:28:51,760 --> 00:28:54,720
uh we have a sql injection

794
00:28:54,720 --> 00:28:57,120
is this only sql injection

795
00:28:57,120 --> 00:28:59,440
or is it more right

796
00:28:59,440 --> 00:29:01,840
because in this case

797
00:29:01,840 --> 00:29:04,159
the application had like extensions

798
00:29:04,159 --> 00:29:07,039
enabled as well so it is not just that

799
00:29:07,039 --> 00:29:10,320
you can run any sql that you want but

800
00:29:10,320 --> 00:29:11,279
also

801
00:29:11,279 --> 00:29:13,840
that you can load any extension right so

802
00:29:13,840 --> 00:29:15,760
for example you have a malicious

803
00:29:15,760 --> 00:29:17,279
application

804
00:29:17,279 --> 00:29:19,600
for this you can for example

805
00:29:19,600 --> 00:29:21,679
just trust me

806
00:29:21,679 --> 00:29:23,279
expose module it doesn't matter it's

807
00:29:23,279 --> 00:29:25,120
just another application

808
00:29:25,120 --> 00:29:27,440
and you just save like with some ace the

809
00:29:27,440 --> 00:29:28,990
test.so some

810
00:29:28,990 --> 00:29:30,159
[Music]

811
00:29:30,159 --> 00:29:32,080
mimikin like a binary there then you

812
00:29:32,080 --> 00:29:34,320
give permissions to all the apps so any

813
00:29:34,320 --> 00:29:35,760
app can read this even though it's some

814
00:29:35,760 --> 00:29:37,039
data data

815
00:29:37,039 --> 00:29:39,600
and then the malicious application sends

816
00:29:39,600 --> 00:29:42,240
an intent exploiting the sql injection

817
00:29:42,240 --> 00:29:45,200
and it tells the application to load the

818
00:29:45,200 --> 00:29:46,559
extension

819
00:29:46,559 --> 00:29:50,159
from uh this path right so this was a

820
00:29:50,159 --> 00:29:53,279
code execution with sql injection

821
00:29:53,279 --> 00:29:54,559
um

822
00:29:54,559 --> 00:29:57,440
in our mobile app which was pretty cool

823
00:29:57,440 --> 00:29:58,960
uh but

824
00:29:58,960 --> 00:30:01,679
well yeah and then um on block that's

825
00:30:01,679 --> 00:30:03,440
right when you were checking

826
00:30:03,440 --> 00:30:05,039
this is what it would look like right so

827
00:30:05,039 --> 00:30:07,600
it has well but elf magic so this is

828
00:30:07,600 --> 00:30:08,799
telling you

829
00:30:08,799 --> 00:30:10,000
that the

830
00:30:10,000 --> 00:30:12,240
application was actually trying to run

831
00:30:12,240 --> 00:30:14,240
this uh binary right because it's

832
00:30:14,240 --> 00:30:17,760
checking it as good about elf magic so

833
00:30:17,760 --> 00:30:20,640
this means that you're trying to run it

834
00:30:20,640 --> 00:30:23,760
also work uh exploit these in phones

835
00:30:23,760 --> 00:30:26,080
running android less than six

836
00:30:26,080 --> 00:30:28,880
um using a malicious application

837
00:30:28,880 --> 00:30:30,000
that

838
00:30:30,000 --> 00:30:32,480
loads uh first saves the file that

839
00:30:32,480 --> 00:30:33,919
test.so

840
00:30:33,919 --> 00:30:36,960
um in the downloads directory of

841
00:30:36,960 --> 00:30:39,200
the phone right and then

842
00:30:39,200 --> 00:30:40,799
makes a second request a little bit

843
00:30:40,799 --> 00:30:41,840
later

844
00:30:41,840 --> 00:30:45,440
to exploit the sql injection and get

845
00:30:45,440 --> 00:30:48,320
the binary to run right so this is how

846
00:30:48,320 --> 00:30:50,720
that exploit looked like and this was

847
00:30:50,720 --> 00:30:52,159
pretty cool because you would do it from

848
00:30:52,159 --> 00:30:53,760
a browser like somebody clicks on that

849
00:30:53,760 --> 00:30:55,600
malicious website and then you get code

850
00:30:55,600 --> 00:30:58,640
execution the phone with the privileges

851
00:30:58,640 --> 00:30:59,679
of the

852
00:30:59,679 --> 00:31:00,880
application

853
00:31:00,880 --> 00:31:02,000
right

854
00:31:02,000 --> 00:31:02,880
so

855
00:31:02,880 --> 00:31:04,480
this is yeah we're getting the same

856
00:31:04,480 --> 00:31:06,240
button of magic

857
00:31:06,240 --> 00:31:08,320
so now let's look at the api attacks

858
00:31:08,320 --> 00:31:10,080
right so recruiting files from the

859
00:31:10,080 --> 00:31:11,039
server

860
00:31:11,039 --> 00:31:14,240
we can use for the api

861
00:31:14,240 --> 00:31:15,919
so let's take a look at this and try to

862
00:31:15,919 --> 00:31:19,320
figure out the vulnerability

863
00:31:21,360 --> 00:31:24,000
so the issue is

864
00:31:24,000 --> 00:31:25,919
that we have string replaceable dot dot

865
00:31:25,919 --> 00:31:26,960
slash

866
00:31:26,960 --> 00:31:29,519
right so this looks okay in practice to

867
00:31:29,519 --> 00:31:32,480
many developers but in reality it is not

868
00:31:32,480 --> 00:31:35,200
right and i'll show you why now and then

869
00:31:35,200 --> 00:31:36,559
it's trying to read the file right so

870
00:31:36,559 --> 00:31:38,799
that is basically how that look like so

871
00:31:38,799 --> 00:31:39,919
you can do

872
00:31:39,919 --> 00:31:41,519
you can provide a sequence like this and

873
00:31:41,519 --> 00:31:44,320
yes the dot dot is going to be removed

874
00:31:44,320 --> 00:31:46,159
but then you will end up with another

875
00:31:46,159 --> 00:31:49,279
dot dot slash right because this pattern

876
00:31:49,279 --> 00:31:50,960
this second slash is not going to be

877
00:31:50,960 --> 00:31:52,559
removed and when you remove this you

878
00:31:52,559 --> 00:31:55,200
still have these two dots so basically

879
00:31:55,200 --> 00:31:56,960
you get a path traversal right so you

880
00:31:56,960 --> 00:31:58,080
can turn

881
00:31:58,080 --> 00:32:01,519
dot dot slash into dot dot slash right

882
00:32:01,519 --> 00:32:03,840
so with this we can uh make the

883
00:32:03,840 --> 00:32:05,200
traversal work

884
00:32:05,200 --> 00:32:07,279
that is how you would fix that

885
00:32:07,279 --> 00:32:10,799
now uh api links for commercialife and

886
00:32:10,799 --> 00:32:13,039
this is what we call the new api so

887
00:32:13,039 --> 00:32:16,240
basically um the

888
00:32:16,240 --> 00:32:18,559
application would leak information based

889
00:32:18,559 --> 00:32:20,720
on the phone number so let's pretend

890
00:32:20,720 --> 00:32:22,399
that there's a bad child on the class

891
00:32:22,399 --> 00:32:25,039
that he hates all the children

892
00:32:25,039 --> 00:32:26,240
and

893
00:32:26,240 --> 00:32:28,559
he can like for example

894
00:32:28,559 --> 00:32:30,480
knowing the phone number try to log in

895
00:32:30,480 --> 00:32:31,919
as the parent

896
00:32:31,919 --> 00:32:33,279
in this application that has been

897
00:32:33,279 --> 00:32:35,360
mandated in south korea

898
00:32:35,360 --> 00:32:36,159
to

899
00:32:36,159 --> 00:32:37,840
impersonate the parent and for example

900
00:32:37,840 --> 00:32:39,919
not not let the child

901
00:32:39,919 --> 00:32:42,080
avoid the child from prevent the child

902
00:32:42,080 --> 00:32:43,519
from using the phone and this kind of

903
00:32:43,519 --> 00:32:45,360
stuff right so

904
00:32:45,360 --> 00:32:46,799
be a bully

905
00:32:46,799 --> 00:32:49,440
you need the bully api to

906
00:32:49,440 --> 00:32:52,000
help you right so the bad child knows

907
00:32:52,000 --> 00:32:53,200
the

908
00:32:53,200 --> 00:32:55,039
phone number of the target child so it

909
00:32:55,039 --> 00:32:57,279
says hey i know the phone numbers this

910
00:32:57,279 --> 00:32:59,200
child i want to mess with

911
00:32:59,200 --> 00:33:01,279
and then the api tells you okay this is

912
00:33:01,279 --> 00:33:03,120
the parent phone number so with this

913
00:33:03,120 --> 00:33:04,720
alone you can already do some damage you

914
00:33:04,720 --> 00:33:07,360
can call the parent and tell him stuff

915
00:33:07,360 --> 00:33:08,640
but

916
00:33:08,640 --> 00:33:10,559
for a bad guy

917
00:33:10,559 --> 00:33:12,240
this would give you the login right and

918
00:33:12,240 --> 00:33:15,519
then of course you can ask uh smartsheet

919
00:33:15,519 --> 00:33:17,519
come on you need that password tool to

920
00:33:17,519 --> 00:33:19,279
you know to be able to log in as the

921
00:33:19,279 --> 00:33:21,279
friend and that's with the tile

922
00:33:21,279 --> 00:33:23,760
so yeah smart sharif will do the

923
00:33:23,760 --> 00:33:26,480
you could impersonate the

924
00:33:26,480 --> 00:33:28,240
friend right so this is how this looked

925
00:33:28,240 --> 00:33:30,000
like in practice

926
00:33:30,000 --> 00:33:31,120
um

927
00:33:31,120 --> 00:33:33,279
yeah and the passwords were four digits

928
00:33:33,279 --> 00:33:36,960
strong as well so uh quite weak

929
00:33:36,960 --> 00:33:39,600
even like reforce it um

930
00:33:39,600 --> 00:33:42,080
and yeah this was another scenario with

931
00:33:42,080 --> 00:33:43,440
smart dream

932
00:33:43,440 --> 00:33:46,000
there was a similar leak this is uh an

933
00:33:46,000 --> 00:33:48,799
either right so an insecure direct

934
00:33:48,799 --> 00:33:50,159
reference

935
00:33:50,159 --> 00:33:52,640
it was saved on to speech so basically

936
00:33:52,640 --> 00:33:55,519
when a message contained harmful words

937
00:33:55,519 --> 00:33:56,880
um

938
00:33:56,880 --> 00:33:59,200
they were saved on a server but you

939
00:33:59,200 --> 00:34:02,080
could retrieve all the messages from all

940
00:34:02,080 --> 00:34:04,640
the children uh calling this api right

941
00:34:04,640 --> 00:34:07,120
so this was pretty bad as well basically

942
00:34:07,120 --> 00:34:08,560
you would fix that

943
00:34:08,560 --> 00:34:11,918
and with this uh since we only have 34

944
00:34:11,918 --> 00:34:13,839
minutes this is finished now if you are

945
00:34:13,839 --> 00:34:15,679
interested in these applications these

946
00:34:15,679 --> 00:34:18,480
are part of our mobile course so

947
00:34:18,480 --> 00:34:19,918
anybody that thinks your mobile course

948
00:34:19,918 --> 00:34:21,599
can take free

949
00:34:21,599 --> 00:34:23,760
um if you have any questions since this

950
00:34:23,760 --> 00:34:25,440
is uh

951
00:34:25,440 --> 00:34:28,480
recorded and we don't have interaction

952
00:34:28,480 --> 00:34:29,839
or if you find some of the attacks

953
00:34:29,839 --> 00:34:31,359
interesting or you want to talk about

954
00:34:31,359 --> 00:34:33,679
whatever else you want you can send me

955
00:34:33,679 --> 00:34:35,839
an email anytime you want

956
00:34:35,839 --> 00:34:39,199
thank you for coming

