1
00:00:00,160 --> 00:00:01,839
acunetix helps thousands of

2
00:00:01,839 --> 00:00:04,000
organizations secure their websites and

3
00:00:04,000 --> 00:00:06,240
web applications across the globe

4
00:00:06,240 --> 00:00:07,759
whether you're a one-person team

5
00:00:07,759 --> 00:00:09,920
ensuring the security of a few websites

6
00:00:09,920 --> 00:00:12,000
or a large organization interested in

7
00:00:12,000 --> 00:00:13,599
automating your web vulnerability

8
00:00:13,599 --> 00:00:16,000
assessment and management acunetix is

9
00:00:16,000 --> 00:00:18,640
here to help

10
00:00:19,279 --> 00:00:21,520
hi my name is rishabh and today i'll be

11
00:00:21,520 --> 00:00:23,600
talking about how we can detect session

12
00:00:23,600 --> 00:00:26,800
hijacking using rotating refresh tokens

13
00:00:26,800 --> 00:00:28,480
before i begin i would like to clarify

14
00:00:28,480 --> 00:00:30,800
the terminology i'll be using

15
00:00:30,800 --> 00:00:32,800
a session is essentially the period of

16
00:00:32,800 --> 00:00:35,520
time after login but before logout

17
00:00:35,520 --> 00:00:39,360
session tokens are used by most apis to

18
00:00:39,360 --> 00:00:41,680
identify the user who logged in

19
00:00:41,680 --> 00:00:44,079
and session management is everything to

20
00:00:44,079 --> 00:00:46,399
do with how the session behaves so what

21
00:00:46,399 --> 00:00:48,640
the session inactivity timeout is what

22
00:00:48,640 --> 00:00:51,199
kind of tokens are being used uh what

23
00:00:51,199 --> 00:00:53,360
you know how these tokens are stored and

24
00:00:53,360 --> 00:00:55,760
how they revoked

25
00:00:55,760 --> 00:00:56,719
um

26
00:00:56,719 --> 00:00:57,840
so

27
00:00:57,840 --> 00:00:59,440
why do we care about session security in

28
00:00:59,440 --> 00:01:00,640
the first place

29
00:01:00,640 --> 00:01:02,640
um you know we have such great login

30
00:01:02,640 --> 00:01:05,280
security that prevent you know phishing

31
00:01:05,280 --> 00:01:07,200
attacks and mitigate all the downsides

32
00:01:07,200 --> 00:01:09,200
of using passwords if we were to

33
00:01:09,200 --> 00:01:11,040
implement them in our web apps wouldn't

34
00:01:11,040 --> 00:01:12,400
that be enough

35
00:01:12,400 --> 00:01:13,520
however

36
00:01:13,520 --> 00:01:15,280
if you think or you know if you think

37
00:01:15,280 --> 00:01:18,240
about all the possible attack vectors

38
00:01:18,240 --> 00:01:19,360
available

39
00:01:19,360 --> 00:01:22,320
just securing login is not enough and

40
00:01:22,320 --> 00:01:24,640
and the reason for that is

41
00:01:24,640 --> 00:01:27,040
that most apis use

42
00:01:27,040 --> 00:01:29,360
session tokens to identify the user

43
00:01:29,360 --> 00:01:31,200
which means that if these tokens were

44
00:01:31,200 --> 00:01:32,640
stolen

45
00:01:32,640 --> 00:01:34,320
they could be used to gain unauthorized

46
00:01:34,320 --> 00:01:36,960
access to the account regardless of what

47
00:01:36,960 --> 00:01:39,520
login technology is being used

48
00:01:39,520 --> 00:01:41,600
and we see this in real life as well

49
00:01:41,600 --> 00:01:44,079
where uh in a couple of months ago

50
00:01:44,079 --> 00:01:46,079
a few youtube influencers accounts were

51
00:01:46,079 --> 00:01:47,119
stolen

52
00:01:47,119 --> 00:01:49,280
uh sorry were hijacked because the

53
00:01:49,280 --> 00:01:51,360
session tokens were stolen

54
00:01:51,360 --> 00:01:53,439
and the attackers could access those

55
00:01:53,439 --> 00:01:55,600
accounts even though they had two-factor

56
00:01:55,600 --> 00:01:57,680
authentication enabled

57
00:01:57,680 --> 00:01:59,600
the way the attackers got access to the

58
00:01:59,600 --> 00:02:01,360
tokens

59
00:02:01,360 --> 00:02:04,000
was through um social engineering they

60
00:02:04,000 --> 00:02:06,399
essentially

61
00:02:06,399 --> 00:02:08,720
got the influencers to install a malware

62
00:02:08,720 --> 00:02:10,000
on the computer

63
00:02:10,000 --> 00:02:12,400
and the malware then took the session

64
00:02:12,400 --> 00:02:15,120
tokens of youtube and sent them off to

65
00:02:15,120 --> 00:02:17,440
the attacker the attacker then had to

66
00:02:17,440 --> 00:02:19,760
just paste those cookies in the browser

67
00:02:19,760 --> 00:02:22,400
and um they could access the influencers

68
00:02:22,400 --> 00:02:24,160
accounts

69
00:02:24,160 --> 00:02:27,200
malware is not the only way that

70
00:02:27,200 --> 00:02:30,160
that can be used to steal sessions

71
00:02:30,160 --> 00:02:32,160
as seen on the slide

72
00:02:32,160 --> 00:02:34,319
some of these ways are simpler to solve

73
00:02:34,319 --> 00:02:36,720
for the other than others so for example

74
00:02:36,720 --> 00:02:38,640
all the ones in green can be solved

75
00:02:38,640 --> 00:02:40,239
through following best practices for

76
00:02:40,239 --> 00:02:42,480
session management however the ones in

77
00:02:42,480 --> 00:02:45,280
red can only be solved

78
00:02:45,280 --> 00:02:48,879
by uh detecting session hijacking

79
00:02:48,879 --> 00:02:51,120
so how do people currently detect

80
00:02:51,120 --> 00:02:52,879
session hijacking there are essentially

81
00:02:52,879 --> 00:02:56,879
two ways of doing that um one is to bind

82
00:02:56,879 --> 00:02:59,920
the ip address to the session so if the

83
00:02:59,920 --> 00:03:01,440
ip address would have changed during a

84
00:03:01,440 --> 00:03:04,480
session the appearance of the request uh

85
00:03:04,480 --> 00:03:06,879
that is essentially assumed as session

86
00:03:06,879 --> 00:03:09,680
hijacking and the session is revoked

87
00:03:09,680 --> 00:03:11,599
uh while this would prevent more session

88
00:03:11,599 --> 00:03:13,200
hijacking attempts

89
00:03:13,200 --> 00:03:15,200
um this leads to a terrible user

90
00:03:15,200 --> 00:03:18,000
experience uh in case the user you know

91
00:03:18,000 --> 00:03:20,239
users travel around the city or use a

92
00:03:20,239 --> 00:03:22,080
vpn

93
00:03:22,080 --> 00:03:23,200
the other method is device

94
00:03:23,200 --> 00:03:26,000
fingerprinting uh we essentially bind

95
00:03:26,000 --> 00:03:27,599
the session to a particular device

96
00:03:27,599 --> 00:03:30,400
fingerprint that is unique to that

97
00:03:30,400 --> 00:03:32,480
device and that browser

98
00:03:32,480 --> 00:03:35,200
and if this fingerprint changes uh you

99
00:03:35,200 --> 00:03:37,120
know we revoke the session uh the

100
00:03:37,120 --> 00:03:39,440
problem with this is that um if the

101
00:03:39,440 --> 00:03:42,159
attacker uses the front end uh to steal

102
00:03:42,159 --> 00:03:45,680
sessions they can also use they can also

103
00:03:45,680 --> 00:03:47,920
compute the device fingerprint at that

104
00:03:47,920 --> 00:03:50,400
time and uh essentially send that off to

105
00:03:50,400 --> 00:03:52,959
themselves uh which would enable them to

106
00:03:52,959 --> 00:03:56,319
use that for session hijacking

107
00:03:56,319 --> 00:03:58,239
so what can we do better like how can we

108
00:03:58,239 --> 00:04:00,480
improve the system and and that's where

109
00:04:00,480 --> 00:04:02,159
rotating refresh tokens comes into the

110
00:04:02,159 --> 00:04:03,120
picture

111
00:04:03,120 --> 00:04:04,799
uh before i begin you know before i

112
00:04:04,799 --> 00:04:07,760
describe how that works um this is also

113
00:04:07,760 --> 00:04:09,760
being recommended by one of the latest

114
00:04:09,760 --> 00:04:12,239
oauth rfcs that says that for

115
00:04:12,239 --> 00:04:15,120
browser-based apps we must use rotating

116
00:04:15,120 --> 00:04:17,600
refresh tokens uh since it detects

117
00:04:17,600 --> 00:04:19,918
session hijacking

118
00:04:19,918 --> 00:04:21,839
the way it works is

119
00:04:21,839 --> 00:04:22,960
that

120
00:04:22,960 --> 00:04:24,800
we essentially have

121
00:04:24,800 --> 00:04:26,960
the user who authenticates themselves to

122
00:04:26,960 --> 00:04:29,600
the server the server returns an access

123
00:04:29,600 --> 00:04:31,199
and a refresh token

124
00:04:31,199 --> 00:04:33,520
uh the access token is short-lived

125
00:04:33,520 --> 00:04:36,160
the refresh token is long lived

126
00:04:36,160 --> 00:04:38,240
and the access token is used for every

127
00:04:38,240 --> 00:04:39,520
api call

128
00:04:39,520 --> 00:04:41,040
because the access token is short-lived

129
00:04:41,040 --> 00:04:42,479
it's going to expire

130
00:04:42,479 --> 00:04:45,919
at which point the api calls will fail

131
00:04:45,919 --> 00:04:48,000
then we can use the refresh token to get

132
00:04:48,000 --> 00:04:49,919
a new set of tokens

133
00:04:49,919 --> 00:04:52,000
and continue the session using the new

134
00:04:52,000 --> 00:04:53,520
access token

135
00:04:53,520 --> 00:04:54,880
at some point

136
00:04:54,880 --> 00:04:56,479
both the access token and the refresh

137
00:04:56,479 --> 00:04:58,400
token will expire after which the user

138
00:04:58,400 --> 00:04:59,840
has to log in again

139
00:04:59,840 --> 00:05:02,400
now the crucial part in this flow is is

140
00:05:02,400 --> 00:05:03,440
um

141
00:05:03,440 --> 00:05:05,919
is that when we use the refresh token we

142
00:05:05,919 --> 00:05:07,919
get back a new access token and the new

143
00:05:07,919 --> 00:05:10,400
refresh token and this is this is why we

144
00:05:10,400 --> 00:05:12,000
essentially use the word rotating

145
00:05:12,000 --> 00:05:13,440
refresh tokens they're essentially

146
00:05:13,440 --> 00:05:15,280
one-time use only

147
00:05:15,280 --> 00:05:17,759
and this creates a dynamic that allows

148
00:05:17,759 --> 00:05:20,479
us to detect session theft

149
00:05:20,479 --> 00:05:22,720
and let me illustrate that to you so we

150
00:05:22,720 --> 00:05:24,960
have three parties here the user's

151
00:05:24,960 --> 00:05:26,880
browser the attacker's browser and the

152
00:05:26,880 --> 00:05:28,880
api

153
00:05:28,880 --> 00:05:30,240
the user has

154
00:05:30,240 --> 00:05:32,560
their refresh and access token

155
00:05:32,560 --> 00:05:34,960
and they can use the access token to

156
00:05:34,960 --> 00:05:37,840
call the api successfully let's assume

157
00:05:37,840 --> 00:05:40,320
that the attacker has also got the

158
00:05:40,320 --> 00:05:42,479
user's refresh token and access token

159
00:05:42,479 --> 00:05:45,440
r080 and they can also use the access

160
00:05:45,440 --> 00:05:46,320
token

161
00:05:46,320 --> 00:05:49,360
uh to perform session hijacking

162
00:05:49,360 --> 00:05:52,060
but before the access token is um

163
00:05:52,060 --> 00:05:53,360
[Music]

164
00:05:53,360 --> 00:05:55,280
the access token is short-lived which

165
00:05:55,280 --> 00:05:57,199
means that it's going to expire soon or

166
00:05:57,199 --> 00:05:59,680
hopefully it has already expired

167
00:05:59,680 --> 00:06:02,560
at that point in time the user will be

168
00:06:02,560 --> 00:06:05,120
forced to use the refresh token and when

169
00:06:05,120 --> 00:06:07,120
they do so what's going to happen is

170
00:06:07,120 --> 00:06:08,479
that

171
00:06:08,479 --> 00:06:10,639
the user will get back a new set a new

172
00:06:10,639 --> 00:06:12,960
refresh and a new access token as we saw

173
00:06:12,960 --> 00:06:14,319
earlier as well

174
00:06:14,319 --> 00:06:16,319
and their old refresh token would be

175
00:06:16,319 --> 00:06:19,039
removed so in this case we use r0 get

176
00:06:19,039 --> 00:06:23,039
back r1 a1 and r0 is revoked

177
00:06:23,039 --> 00:06:25,919
now because a0 is expired the attacker

178
00:06:25,919 --> 00:06:28,639
will also have to use r0 and that's a

179
00:06:28,639 --> 00:06:30,319
very clear sign to the back end that

180
00:06:30,319 --> 00:06:32,639
something is wrong because r0 should

181
00:06:32,639 --> 00:06:35,600
have never been used after r1 has

182
00:06:35,600 --> 00:06:37,120
already been issued

183
00:06:37,120 --> 00:06:39,759
uh and therefore the back end can revoke

184
00:06:39,759 --> 00:06:42,560
the entire session

185
00:06:42,639 --> 00:06:43,840
now

186
00:06:43,840 --> 00:06:46,560
like this makes sense uh but there are a

187
00:06:46,560 --> 00:06:48,160
few problems with this the first one

188
00:06:48,160 --> 00:06:49,360
being that

189
00:06:49,360 --> 00:06:53,840
uh in step two the attacker can use a0

190
00:06:53,840 --> 00:06:57,360
to successfully do session hijacking um

191
00:06:57,360 --> 00:06:59,599
and that's a problem the way we can

192
00:06:59,599 --> 00:07:01,919
solve this first and foremost is to make

193
00:07:01,919 --> 00:07:04,000
sure that the access token lifetimes are

194
00:07:04,000 --> 00:07:05,280
very small

195
00:07:05,280 --> 00:07:08,479
and we can also combine rotating refresh

196
00:07:08,479 --> 00:07:11,280
tokens with ip address binding

197
00:07:11,280 --> 00:07:13,360
what we do is essentially we bind the ip

198
00:07:13,360 --> 00:07:15,440
address to the access token

199
00:07:15,440 --> 00:07:17,199
and you know when the attacker would use

200
00:07:17,199 --> 00:07:18,639
the access token

201
00:07:18,639 --> 00:07:20,800
we would um you know mostly from a

202
00:07:20,800 --> 00:07:23,039
different location uh we could check

203
00:07:23,039 --> 00:07:25,840
that the ip address has changed and

204
00:07:25,840 --> 00:07:26,800
therefore

205
00:07:26,800 --> 00:07:29,360
uh instead of waiting for a0 to expire

206
00:07:29,360 --> 00:07:31,680
naturally we essentially revoke azure

207
00:07:31,680 --> 00:07:32,800
immediately

208
00:07:32,800 --> 00:07:34,479
this would force the users to use their

209
00:07:34,479 --> 00:07:37,360
refresh tokens and session hijacking

210
00:07:37,360 --> 00:07:40,240
would be detected

211
00:07:40,400 --> 00:07:42,400
the other problem is that session

212
00:07:42,400 --> 00:07:45,680
hijacking uh detection only happens when

213
00:07:45,680 --> 00:07:47,919
both the user and the attacker have used

214
00:07:47,919 --> 00:07:50,400
their refresh tokens um now we can

215
00:07:50,400 --> 00:07:52,639
easily imagine a scenario where the

216
00:07:52,639 --> 00:07:55,919
attacker has stolen the user's tokens uh

217
00:07:55,919 --> 00:07:58,960
the user essentially uh you know became

218
00:07:58,960 --> 00:08:00,800
inactive or has stopped using the app

219
00:08:00,800 --> 00:08:02,160
for a while

220
00:08:02,160 --> 00:08:05,759
during that period the attacker can

221
00:08:05,759 --> 00:08:07,680
continue using the refresh token and the

222
00:08:07,680 --> 00:08:09,599
access token they have

223
00:08:09,599 --> 00:08:11,280
without any problem

224
00:08:11,280 --> 00:08:13,280
the only time session theft would get

225
00:08:13,280 --> 00:08:15,759
detected is when the user would use the

226
00:08:15,759 --> 00:08:17,680
app next which could happen in a few

227
00:08:17,680 --> 00:08:20,240
hours or a few days depending on the

228
00:08:20,240 --> 00:08:22,639
nature of the app

229
00:08:22,639 --> 00:08:25,039
the way we would minimize this risk is

230
00:08:25,039 --> 00:08:26,879
by binding the refresh token to a

231
00:08:26,879 --> 00:08:28,879
particular device and there are two ways

232
00:08:28,879 --> 00:08:30,720
of doing this one is using device

233
00:08:30,720 --> 00:08:33,519
fingerprinting uh however we saw that

234
00:08:33,519 --> 00:08:35,839
you know it's not it's fairly easy to

235
00:08:35,839 --> 00:08:38,320
spoof the other way which is more robust

236
00:08:38,320 --> 00:08:42,320
is uh tls binding we essentially uh bind

237
00:08:42,320 --> 00:08:44,640
the refresh token to a tls session

238
00:08:44,640 --> 00:08:46,160
and and this way

239
00:08:46,160 --> 00:08:48,160
it make it much more difficult for the

240
00:08:48,160 --> 00:08:50,160
attacker to use the refresh token the

241
00:08:50,160 --> 00:08:51,760
problem with this is that not many

242
00:08:51,760 --> 00:08:54,240
browsers today support it and therefore

243
00:08:54,240 --> 00:08:56,800
uh deploying this methodology in a

244
00:08:56,800 --> 00:08:58,880
production environment is probably not

245
00:08:58,880 --> 00:08:59,839
going to work

246
00:08:59,839 --> 00:09:02,240
uh that being said uh the method i just

247
00:09:02,240 --> 00:09:04,320
described is the best method we have as

248
00:09:04,320 --> 00:09:06,480
of today and therefore from a security

249
00:09:06,480 --> 00:09:08,160
point of view it makes a lot of sense to

250
00:09:08,160 --> 00:09:09,360
implement this

251
00:09:09,360 --> 00:09:11,760
even though it's not full proof

252
00:09:11,760 --> 00:09:13,440
when we talk about implementation there

253
00:09:13,440 --> 00:09:16,240
are essentially three challenges

254
00:09:16,240 --> 00:09:18,080
the first one is parallel request to

255
00:09:18,080 --> 00:09:19,519
refresh api

256
00:09:19,519 --> 00:09:22,640
so um in this diagram in step number

257
00:09:22,640 --> 00:09:24,480
three um

258
00:09:24,480 --> 00:09:26,399
if the front end were to issue more than

259
00:09:26,399 --> 00:09:28,720
one request to the refresh token using

260
00:09:28,720 --> 00:09:31,120
r0 what would happen is the first

261
00:09:31,120 --> 00:09:33,120
request would revoke r0 and the second

262
00:09:33,120 --> 00:09:35,200
one would yield a false positive of

263
00:09:35,200 --> 00:09:37,680
session theft um this scenario can

264
00:09:37,680 --> 00:09:40,399
happen when uh if a user is visiting an

265
00:09:40,399 --> 00:09:42,560
app after a long time or after the

266
00:09:42,560 --> 00:09:45,200
access token is expired and

267
00:09:45,200 --> 00:09:47,279
we generally tend to

268
00:09:47,279 --> 00:09:50,320
have many api calls in parallel on you

269
00:09:50,320 --> 00:09:52,640
know on app loading

270
00:09:52,640 --> 00:09:54,320
which can cause this issue

271
00:09:54,320 --> 00:09:56,560
the second problem is network failures

272
00:09:56,560 --> 00:09:58,640
so

273
00:09:58,640 --> 00:10:01,120
when the user uses r0 we expect that the

274
00:10:01,120 --> 00:10:04,240
front end receives r1 and a1 but if the

275
00:10:04,240 --> 00:10:06,160
front end is in a poor

276
00:10:06,160 --> 00:10:08,800
network uh networked

277
00:10:08,800 --> 00:10:11,360
location then they may not receive r1 or

278
00:10:11,360 --> 00:10:14,560
a1 which means that they have to use r0

279
00:10:14,560 --> 00:10:16,720
again which would yield false which is

280
00:10:16,720 --> 00:10:18,959
really the false positive because r0 has

281
00:10:18,959 --> 00:10:20,959
already been revoked

282
00:10:20,959 --> 00:10:23,120
so the common the root cause of these

283
00:10:23,120 --> 00:10:24,800
issues is that

284
00:10:24,800 --> 00:10:28,399
we are revoking r0 uh before knowing

285
00:10:28,399 --> 00:10:30,640
that the new set of tokens uh has

286
00:10:30,640 --> 00:10:32,560
actually you know been delivered to the

287
00:10:32,560 --> 00:10:33,519
client

288
00:10:33,519 --> 00:10:35,680
and the way we solve that issue is by

289
00:10:35,680 --> 00:10:38,320
maintaining what i call a refresh token

290
00:10:38,320 --> 00:10:41,040
family essentially we want to keep track

291
00:10:41,040 --> 00:10:43,279
of multiple refresh tokens per session

292
00:10:43,279 --> 00:10:45,760
that could all be alive at the same time

293
00:10:45,760 --> 00:10:47,760
let me illustrate that to this diagram

294
00:10:47,760 --> 00:10:50,560
so in step number three when we use r0

295
00:10:50,560 --> 00:10:51,839
for the first time

296
00:10:51,839 --> 00:10:54,880
instead of revoking r0 we only generate

297
00:10:54,880 --> 00:10:57,440
r1 and a1 and and that's it and in the

298
00:10:57,440 --> 00:11:00,240
second api call we generate r2 and a2

299
00:11:00,240 --> 00:11:02,720
and that's it we do not revoke r0 and

300
00:11:02,720 --> 00:11:04,720
the reason we don't revoke r0 is because

301
00:11:04,720 --> 00:11:07,519
from the perspective of the api the api

302
00:11:07,519 --> 00:11:09,120
does not know which

303
00:11:09,120 --> 00:11:10,720
api does not know if the new tokens have

304
00:11:10,720 --> 00:11:12,959
even reached the front end or which one

305
00:11:12,959 --> 00:11:14,399
has reached the front end

306
00:11:14,399 --> 00:11:16,800
uh the only point in time it will know

307
00:11:16,800 --> 00:11:19,040
is if the front end uses them so for

308
00:11:19,040 --> 00:11:20,640
example in this case let's assume that

309
00:11:20,640 --> 00:11:23,519
the front end has r2 and a2

310
00:11:23,519 --> 00:11:26,399
um therefore when the front end uses a2

311
00:11:26,399 --> 00:11:28,800
the api layer can be sure that the front

312
00:11:28,800 --> 00:11:31,839
end also has r2 and go about revoking

313
00:11:31,839 --> 00:11:34,399
r0 and r1

314
00:11:34,399 --> 00:11:37,360
what this means is that

315
00:11:37,360 --> 00:11:38,880
we essentially have to maintain a parent

316
00:11:38,880 --> 00:11:42,399
and child hierarchy so we have r0 and a0

317
00:11:42,399 --> 00:11:44,320
which will essentially be the parent of

318
00:11:44,320 --> 00:11:45,519
its children

319
00:11:45,519 --> 00:11:49,440
r1 to rn so in the previous example here

320
00:11:49,440 --> 00:11:53,920
r0 is the parent of r1 and r2 but uh

321
00:11:53,920 --> 00:11:56,320
from a system point of view you can have

322
00:11:56,320 --> 00:11:59,279
n number of children and uh all of these

323
00:11:59,279 --> 00:12:01,920
refresh tokens and access tokens uh are

324
00:12:01,920 --> 00:12:04,480
alive and any one of them can be used by

325
00:12:04,480 --> 00:12:05,600
the client

326
00:12:05,600 --> 00:12:07,920
um and as soon as one of them is used

327
00:12:07,920 --> 00:12:10,639
let's say r3 or e3 we can go about

328
00:12:10,639 --> 00:12:13,120
revoking the sibling

329
00:12:13,120 --> 00:12:15,680
tokens and the parent token and also

330
00:12:15,680 --> 00:12:18,480
promoting r3 to become the parent of its

331
00:12:18,480 --> 00:12:21,200
own children and the the tree sort of

332
00:12:21,200 --> 00:12:24,399
continues uh continues in that way

333
00:12:24,399 --> 00:12:26,160
now implementing a data structure like

334
00:12:26,160 --> 00:12:27,920
this in a scaled and distributed system

335
00:12:27,920 --> 00:12:29,279
can be a challenge

336
00:12:29,279 --> 00:12:31,600
uh but there are solutions out there for

337
00:12:31,600 --> 00:12:34,079
it which i'll be happy to go into if

338
00:12:34,079 --> 00:12:35,600
anyone is interested

339
00:12:35,600 --> 00:12:38,560
uh you can reach reach out to me uh

340
00:12:38,560 --> 00:12:40,480
later on after the presentation

341
00:12:40,480 --> 00:12:42,399
um

342
00:12:42,399 --> 00:12:44,399
so what are the overall business

343
00:12:44,399 --> 00:12:46,880
benefits of um

344
00:12:46,880 --> 00:12:49,680
having you know this kind of session

345
00:12:49,680 --> 00:12:51,680
you know apart from

346
00:12:51,680 --> 00:12:54,560
the increase in app security and like

347
00:12:54,560 --> 00:12:57,279
preventing of another vector of identity

348
00:12:57,279 --> 00:12:58,320
theft

349
00:12:58,320 --> 00:13:00,000
we can also keep users logged in for a

350
00:13:00,000 --> 00:13:01,519
longer period of time

351
00:13:01,519 --> 00:13:03,040
this means that we can provide them a

352
00:13:03,040 --> 00:13:04,480
better experience

353
00:13:04,480 --> 00:13:06,160
which means they are happier and

354
00:13:06,160 --> 00:13:07,839
business is better

355
00:13:07,839 --> 00:13:09,600
uh and we can do this

356
00:13:09,600 --> 00:13:12,160
whilst maintaining session security as

357
00:13:12,160 --> 00:13:14,160
if it were it was short-lived it was it

358
00:13:14,160 --> 00:13:16,160
was short-lived sessions uh assuming

359
00:13:16,160 --> 00:13:18,560
that the users are active

360
00:13:18,560 --> 00:13:21,760
uh the other benefit is in compliance so

361
00:13:21,760 --> 00:13:23,440
uh if i'm going to implement the system

362
00:13:23,440 --> 00:13:25,519
i described uh you would essentially be

363
00:13:25,519 --> 00:13:26,880
checking all the boxes and all the

364
00:13:26,880 --> 00:13:28,240
compliances

365
00:13:28,240 --> 00:13:29,040
uh

366
00:13:29,040 --> 00:13:31,519
today as well as if there any changes in

367
00:13:31,519 --> 00:13:33,920
the future uh because compliance

368
00:13:33,920 --> 00:13:35,839
compliance is always a little bit behind

369
00:13:35,839 --> 00:13:38,000
the rfc's and we are already compliant

370
00:13:38,000 --> 00:13:40,320
with the rfcs

371
00:13:40,320 --> 00:13:41,199
um

372
00:13:41,199 --> 00:13:44,000
the final uh business benefit is

373
00:13:44,000 --> 00:13:46,240
improvement in api performance so

374
00:13:46,240 --> 00:13:48,079
because we have two sets of tokens the

375
00:13:48,079 --> 00:13:49,600
access and the refresh token and the

376
00:13:49,600 --> 00:13:51,199
access token is short-lived we can

377
00:13:51,199 --> 00:13:52,240
essentially

378
00:13:52,240 --> 00:13:55,199
use a jwt as an access token

379
00:13:55,199 --> 00:13:57,519
and uh have sub millisecond session

380
00:13:57,519 --> 00:13:59,839
verification latency uh and we can do

381
00:13:59,839 --> 00:14:02,800
that without like with uh without any of

382
00:14:02,800 --> 00:14:06,639
the risks of of a dwt

383
00:14:06,639 --> 00:14:08,720
um thank you for your time i hope this

384
00:14:08,720 --> 00:14:11,920
presentation was useful um and

385
00:14:11,920 --> 00:14:14,399
feel free to reach out to me on my email

386
00:14:14,399 --> 00:14:17,040
or twitter for any questions that you

387
00:14:17,040 --> 00:14:19,120
may have about the presentation thank

388
00:14:19,120 --> 00:14:22,120
you

