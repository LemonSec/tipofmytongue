1
00:00:00,560 --> 00:00:02,879
hello everyone my name is abhinav

2
00:00:02,879 --> 00:00:05,040
mahanti and this presentation will

3
00:00:05,040 --> 00:00:07,359
provide a brief overview

4
00:00:07,359 --> 00:00:10,320
of the ovasp iot goat project and we'll

5
00:00:10,320 --> 00:00:13,280
also discuss the future road map

6
00:00:13,280 --> 00:00:15,040
in this presentation i will also

7
00:00:15,040 --> 00:00:16,960
demonstrate on how you can quickly set

8
00:00:16,960 --> 00:00:19,840
up and start using iot goat

9
00:00:19,840 --> 00:00:22,320
however before i begin i would like to

10
00:00:22,320 --> 00:00:25,840
formally introduce myself

11
00:00:26,640 --> 00:00:29,119
i am a phd candidate at the university

12
00:00:29,119 --> 00:00:31,119
of north carolina charlotte and my

13
00:00:31,119 --> 00:00:33,760
research focuses on iot firmware

14
00:00:33,760 --> 00:00:36,800
security and hybrid mobile app security

15
00:00:36,800 --> 00:00:40,079
i completed my master's at unc charlotte

16
00:00:40,079 --> 00:00:42,559
with a concentration in cyber security

17
00:00:42,559 --> 00:00:45,120
and i also have two years of experience

18
00:00:45,120 --> 00:00:47,920
working in the industry as a security

19
00:00:47,920 --> 00:00:49,120
engineer

20
00:00:49,120 --> 00:00:51,120
and i'm one of the contributors of the

21
00:00:51,120 --> 00:00:54,320
iot goat project

22
00:00:57,520 --> 00:01:00,680
the ovasp iot project was started in

23
00:01:00,680 --> 00:01:04,559
2014 by daniel measler and craig smith

24
00:01:04,559 --> 00:01:07,280
with the goal to help manufacturers

25
00:01:07,280 --> 00:01:09,840
developers and consumers better

26
00:01:09,840 --> 00:01:12,400
understand the security issues

27
00:01:12,400 --> 00:01:14,799
associated with the internet of things

28
00:01:14,799 --> 00:01:18,000
and to enable users in any context to

29
00:01:18,000 --> 00:01:20,479
make better security decisions when

30
00:01:20,479 --> 00:01:23,520
building deploying assessing or buying

31
00:01:23,520 --> 00:01:25,680
iot technology

32
00:01:25,680 --> 00:01:28,400
the ova's iot project has a number of

33
00:01:28,400 --> 00:01:30,880
sub-projects as well and

34
00:01:30,880 --> 00:01:32,560
they have been cited in numerous

35
00:01:32,560 --> 00:01:34,799
publications and information security

36
00:01:34,799 --> 00:01:37,200
standards globally

37
00:01:37,200 --> 00:01:40,640
the overspray project has collaborations

38
00:01:40,640 --> 00:01:43,520
with organizations from both private and

39
00:01:43,520 --> 00:01:46,159
publishers and more information about

40
00:01:46,159 --> 00:01:49,280
this can be can be found at the ovas iot

41
00:01:49,280 --> 00:01:52,680
project page

42
00:01:54,560 --> 00:01:56,719
so as i mentioned there are numerous sub

43
00:01:56,719 --> 00:01:59,600
projects under the ovap iot project

44
00:01:59,600 --> 00:02:01,920
some of the most prominent ones include

45
00:02:01,920 --> 00:02:04,399
the ovap iot top 10

46
00:02:04,399 --> 00:02:06,079
which discusses

47
00:02:06,079 --> 00:02:08,959
the most prevalent 10 top iot

48
00:02:08,959 --> 00:02:11,760
vulnerabilities the initial list of the

49
00:02:11,760 --> 00:02:15,920
top 10 was released in 2014 and it has

50
00:02:15,920 --> 00:02:18,000
gone through several changes and the

51
00:02:18,000 --> 00:02:20,840
latest update was released in

52
00:02:20,840 --> 00:02:23,760
2018 another important project is the

53
00:02:23,760 --> 00:02:28,640
ovasp iot top 10 2018 project

54
00:02:28,640 --> 00:02:31,519
the the intention of this project is to

55
00:02:31,519 --> 00:02:35,120
map the ovap iot top 10 vulnerabilities

56
00:02:35,120 --> 00:02:37,920
to industry publications and sister

57
00:02:37,920 --> 00:02:39,280
projects

58
00:02:39,280 --> 00:02:41,840
this will help in providing resources

59
00:02:41,840 --> 00:02:44,800
that enable practical usage usage of the

60
00:02:44,800 --> 00:02:47,920
ova's iot top 10.

61
00:02:47,920 --> 00:02:50,959
bytesweep is another product outcome of

62
00:02:50,959 --> 00:02:54,000
another project and is a really good and

63
00:02:54,000 --> 00:02:58,319
handy free to use formula analysis tool

64
00:02:58,319 --> 00:03:00,640
recently the firmware security testing

65
00:03:00,640 --> 00:03:03,599
methodology was also released in the

66
00:03:03,599 --> 00:03:06,640
form of a git book by aaron guzman who's

67
00:03:06,640 --> 00:03:10,560
also the lead of the iot goat project

68
00:03:10,560 --> 00:03:11,360
this

69
00:03:11,360 --> 00:03:14,080
this methodology divides the testing of

70
00:03:14,080 --> 00:03:16,959
iot firmware into nine stages and

71
00:03:16,959 --> 00:03:19,840
formalizes it

72
00:03:20,560 --> 00:03:22,879
so relatively new project which was

73
00:03:22,879 --> 00:03:27,440
kicked off in march 2019 is iot goat and

74
00:03:27,440 --> 00:03:29,920
this is led by as i mentioned aaron

75
00:03:29,920 --> 00:03:32,480
guzman

76
00:03:32,480 --> 00:03:35,360
iot goat is a deliberately insecure

77
00:03:35,360 --> 00:03:39,040
firmware based on open wrt which is a

78
00:03:39,040 --> 00:03:41,280
widely used and highly customizable

79
00:03:41,280 --> 00:03:43,519
router firmware

80
00:03:43,519 --> 00:03:46,319
iot got is maintained by ovasp to

81
00:03:46,319 --> 00:03:49,120
educate users on how to test

82
00:03:49,120 --> 00:03:50,959
for the most common vulnerabilities

83
00:03:50,959 --> 00:03:53,920
found in iot devices

84
00:03:53,920 --> 00:03:56,400
the vulnerabilities included in iot gold

85
00:03:56,400 --> 00:03:59,680
are based on the ovap iot top 10 to keep

86
00:03:59,680 --> 00:04:02,959
the to keep it as real as possible and

87
00:04:02,959 --> 00:04:05,599
also includes some easter eggs that have

88
00:04:05,599 --> 00:04:07,439
been contributed by the project

89
00:04:07,439 --> 00:04:09,519
contributors

90
00:04:09,519 --> 00:04:12,319
iot got is an open source learning tool

91
00:04:12,319 --> 00:04:15,680
targeted towards i targeted towards iot

92
00:04:15,680 --> 00:04:17,279
software developers

93
00:04:17,279 --> 00:04:20,000
hobbyists researchers and iit

94
00:04:20,000 --> 00:04:21,680
professionals

95
00:04:21,680 --> 00:04:24,560
the first version was of iot good purely

96
00:04:24,560 --> 00:04:26,880
focuses on firmware vulnerability

97
00:04:26,880 --> 00:04:29,520
challenges but we are working on a

98
00:04:29,520 --> 00:04:31,840
subsequent release which will include

99
00:04:31,840 --> 00:04:34,639
open hardware vulnerabilities as well

100
00:04:34,639 --> 00:04:36,560
the date of release has not been

101
00:04:36,560 --> 00:04:39,360
finalized yet

102
00:04:40,880 --> 00:04:43,440
so as i mentioned previously iot got is

103
00:04:43,440 --> 00:04:46,560
based on open wrt and this makes it

104
00:04:46,560 --> 00:04:51,520
compatible with over 1400 circuit boards

105
00:04:51,520 --> 00:04:53,680
it can be easily built for multiple

106
00:04:53,680 --> 00:04:58,160
platforms that include mips arm arch and

107
00:04:58,160 --> 00:05:01,680
it can even be built for x86 systems

108
00:05:01,680 --> 00:05:03,680
the build configurations have already

109
00:05:03,680 --> 00:05:06,800
been developed and are readily available

110
00:05:06,800 --> 00:05:11,840
on the github repository of the project

111
00:05:14,240 --> 00:05:16,800
the iot goat repository already has

112
00:05:16,800 --> 00:05:19,520
numerous forks and is being used in ctf

113
00:05:19,520 --> 00:05:22,400
competitions to test the competency of

114
00:05:22,400 --> 00:05:25,520
new hires and to educate them

115
00:05:25,520 --> 00:05:27,680
it is also used in popular security

116
00:05:27,680 --> 00:05:30,960
conferences like iot village

117
00:05:30,960 --> 00:05:34,560
iot got can also be used to validate the

118
00:05:34,560 --> 00:05:37,759
efficiency of vulnerability scanners

119
00:05:37,759 --> 00:05:40,560
and it can also serve as a test bed for

120
00:05:40,560 --> 00:05:44,080
security standards such as the ovasp iot

121
00:05:44,080 --> 00:05:46,400
security verification standard also

122
00:05:46,400 --> 00:05:48,800
known as isbs

123
00:05:48,800 --> 00:05:51,680
and evaluation of security frameworks

124
00:05:51,680 --> 00:05:55,600
such as the scsip

125
00:05:55,600 --> 00:05:57,759
another interesting and i think quite

126
00:05:57,759 --> 00:06:00,639
important use of iot good is to teach

127
00:06:00,639 --> 00:06:03,120
iot firmware penetration testing skills

128
00:06:03,120 --> 00:06:07,000
in a classroom environment

129
00:06:08,000 --> 00:06:10,160
as part of a cyber security course

130
00:06:10,160 --> 00:06:13,039
delivered at unc charlotte we designed a

131
00:06:13,039 --> 00:06:16,240
project where we replaced the six weeks

132
00:06:16,240 --> 00:06:18,319
project

133
00:06:18,319 --> 00:06:19,120
uh

134
00:06:19,120 --> 00:06:21,600
sorry

135
00:06:21,600 --> 00:06:23,919
as part of a cyber security course

136
00:06:23,919 --> 00:06:27,039
delivered at unc charlotte instead of a

137
00:06:27,039 --> 00:06:29,360
traditional six weeks project

138
00:06:29,360 --> 00:06:32,400
we designed a project where we installed

139
00:06:32,400 --> 00:06:35,600
open wrt on actual routers and provided

140
00:06:35,600 --> 00:06:37,600
those to students

141
00:06:37,600 --> 00:06:40,400
we used the original open wrt since iot

142
00:06:40,400 --> 00:06:42,319
goat was still in development phase at

143
00:06:42,319 --> 00:06:44,080
that time

144
00:06:44,080 --> 00:06:46,240
the new project was designed to provide

145
00:06:46,240 --> 00:06:48,800
hands-on hands-on iot penetration

146
00:06:48,800 --> 00:06:51,039
testing skills to the students

147
00:06:51,039 --> 00:06:53,680
and was divided into three phases

148
00:06:53,680 --> 00:06:56,639
the first phase was network security in

149
00:06:56,639 --> 00:06:58,720
which the students were required to

150
00:06:58,720 --> 00:07:02,800
configure ip tables on open wrt iptables

151
00:07:02,800 --> 00:07:05,680
is the standard linux firewall

152
00:07:05,680 --> 00:07:07,440
in the second phase the students were

153
00:07:07,440 --> 00:07:10,319
divided into groups and were required to

154
00:07:10,319 --> 00:07:13,120
do penetration testing of the open wrt

155
00:07:13,120 --> 00:07:15,280
web ui

156
00:07:15,280 --> 00:07:17,039
the third phase of the project was

157
00:07:17,039 --> 00:07:18,880
software security

158
00:07:18,880 --> 00:07:21,440
and in this in this phase the students

159
00:07:21,440 --> 00:07:24,080
were required to exploit a dns mask

160
00:07:24,080 --> 00:07:26,800
buffer overflow vulnerability and obtain

161
00:07:26,800 --> 00:07:29,360
a root shell

162
00:07:29,360 --> 00:07:31,919
in designing the project we discovered

163
00:07:31,919 --> 00:07:34,479
multiple zero days cross-site scripting

164
00:07:34,479 --> 00:07:36,160
and cross-site request forgery

165
00:07:36,160 --> 00:07:38,960
vulnerabilities in open wrt

166
00:07:38,960 --> 00:07:42,400
and included those in iot goat as well

167
00:07:42,400 --> 00:07:44,319
the vulnerabilities were reported to the

168
00:07:44,319 --> 00:07:47,840
open wrt security team and got fixed

169
00:07:47,840 --> 00:07:50,000
this case study provides good evidence

170
00:07:50,000 --> 00:07:52,960
that iot gold can be highly efficient in

171
00:07:52,960 --> 00:07:55,440
teaching penetration testing skills in a

172
00:07:55,440 --> 00:07:59,000
classroom environment

173
00:08:01,280 --> 00:08:03,440
now i will briefly discuss some of the

174
00:08:03,440 --> 00:08:05,360
vulnerability challenges that are

175
00:08:05,360 --> 00:08:08,160
included in iot goat and in the later

176
00:08:08,160 --> 00:08:10,720
half of the presentation my co-speaker

177
00:08:10,720 --> 00:08:12,800
parag batre will demonstrate some of

178
00:08:12,800 --> 00:08:15,120
these challenges

179
00:08:15,120 --> 00:08:18,080
iot got has weak and hard-coded user

180
00:08:18,080 --> 00:08:20,000
credentials combined

181
00:08:20,000 --> 00:08:22,639
compiled into the code base and can be

182
00:08:22,639 --> 00:08:24,400
found by reverse engineering and

183
00:08:24,400 --> 00:08:28,479
analyzing the firmware file system

184
00:08:28,479 --> 00:08:31,120
it also has insecure network services

185
00:08:31,120 --> 00:08:33,839
that include a vulnerable upnp

186
00:08:33,839 --> 00:08:35,919
connection and a vulnerable and

187
00:08:35,919 --> 00:08:38,479
downgraded dns mask that is that

188
00:08:38,479 --> 00:08:40,640
contains heap and stack overflow

189
00:08:40,640 --> 00:08:43,439
vulnerabilities

190
00:08:43,519 --> 00:08:46,959
iot got also contains a secret developer

191
00:08:46,959 --> 00:08:49,760
diagnostics page that can be used to

192
00:08:49,760 --> 00:08:51,839
obtain useful information about the

193
00:08:51,839 --> 00:08:55,040
router that can be used in exploits

194
00:08:55,040 --> 00:08:57,760
it contains a persistent backdoor daemon

195
00:08:57,760 --> 00:09:00,160
that is configured to run each time the

196
00:09:00,160 --> 00:09:02,320
router restarts

197
00:09:02,320 --> 00:09:04,640
it also contains multiple cross-site

198
00:09:04,640 --> 00:09:06,800
scripting vulnerabilities that can be

199
00:09:06,800 --> 00:09:10,880
exploited to hijack the entire browser

200
00:09:10,880 --> 00:09:13,920
the package update configuration on open

201
00:09:13,920 --> 00:09:17,040
on iot goat has also been made insecure

202
00:09:17,040 --> 00:09:18,959
and can lead to man in the middle

203
00:09:18,959 --> 00:09:20,240
attacks

204
00:09:20,240 --> 00:09:22,880
which can further lead to injection of

205
00:09:22,880 --> 00:09:26,800
arbitrary package payloads

206
00:09:27,680 --> 00:09:30,399
going further we have downgraded number

207
00:09:30,399 --> 00:09:32,959
of software components and included the

208
00:09:32,959 --> 00:09:36,160
ones which contain known cves some

209
00:09:36,160 --> 00:09:38,720
components that are vulnerable include

210
00:09:38,720 --> 00:09:42,959
as i said dns mask pppd the linux kernel

211
00:09:42,959 --> 00:09:46,000
busy box and many more

212
00:09:46,000 --> 00:09:47,760
privacy protections have also been

213
00:09:47,760 --> 00:09:50,080
removed and personal information is

214
00:09:50,080 --> 00:09:53,440
captured and stored in securely

215
00:09:53,440 --> 00:09:56,000
this is complemented by improper

216
00:09:56,000 --> 00:09:58,000
encryption settings which leads to

217
00:09:58,000 --> 00:10:01,519
further insecure storage

218
00:10:02,079 --> 00:10:04,640
device management capabilities such as

219
00:10:04,640 --> 00:10:07,040
system logging monitoring and auditing

220
00:10:07,040 --> 00:10:10,480
capabilities have also been disabled

221
00:10:10,480 --> 00:10:13,920
browser headers that prevent framing

222
00:10:13,920 --> 00:10:16,000
have been removed in certain places and

223
00:10:16,000 --> 00:10:18,320
these can be long the and these can be

224
00:10:18,320 --> 00:10:19,760
combined with

225
00:10:19,760 --> 00:10:22,079
missing csrf protections to launch

226
00:10:22,079 --> 00:10:25,279
disastrous cyber attacks

227
00:10:25,279 --> 00:10:28,640
one of one example is that a hacker

228
00:10:28,640 --> 00:10:30,880
could

229
00:10:30,959 --> 00:10:32,880
one

230
00:10:32,880 --> 00:10:34,959
one example of this is that a hacker

231
00:10:34,959 --> 00:10:37,600
could inject arbitrary firewall rules

232
00:10:37,600 --> 00:10:39,760
and can take over your entire router as

233
00:10:39,760 --> 00:10:41,519
well

234
00:10:41,519 --> 00:10:44,240
for future versions of iot goat we also

235
00:10:44,240 --> 00:10:47,279
plan to include hardware challenges and

236
00:10:47,279 --> 00:10:51,200
open boot vulnerabilities as well

237
00:10:53,760 --> 00:10:56,560
so there are several methods that

238
00:10:56,560 --> 00:10:58,880
can that you can use to get started with

239
00:10:58,880 --> 00:11:01,279
hacking iot goat depending on your

240
00:11:01,279 --> 00:11:02,959
testing approach

241
00:11:02,959 --> 00:11:05,040
for those who are looking to extract the

242
00:11:05,040 --> 00:11:06,800
file system and analyze the

243
00:11:06,800 --> 00:11:08,720
configurations and the binaries

244
00:11:08,720 --> 00:11:11,200
statically they can download the latest

245
00:11:11,200 --> 00:11:13,519
pre-compiled firmware release from the

246
00:11:13,519 --> 00:11:16,800
release page on the github repository

247
00:11:16,800 --> 00:11:18,640
for the dynamic

248
00:11:18,640 --> 00:11:21,680
binary runtime analysis the quickest and

249
00:11:21,680 --> 00:11:23,519
easiest way to get started is to

250
00:11:23,519 --> 00:11:26,079
download the virtual machine disk image

251
00:11:26,079 --> 00:11:27,760
which has which is also provided on the

252
00:11:27,760 --> 00:11:30,640
github repository and create a custom

253
00:11:30,640 --> 00:11:33,040
virtual machine and i will demonstrate

254
00:11:33,040 --> 00:11:36,560
that in a minute how to do that

255
00:11:39,360 --> 00:11:42,079
you can also emulate i you can you can

256
00:11:42,079 --> 00:11:44,560
also emulate firmware with open source

257
00:11:44,560 --> 00:11:47,839
tools such as formadine rmx framework

258
00:11:47,839 --> 00:11:50,000
and firmware analysis tools which

259
00:11:50,000 --> 00:11:52,639
leverage chemo to virtualize iot goat

260
00:11:52,639 --> 00:11:54,399
locally

261
00:11:54,399 --> 00:11:56,720
we also provide a compiled firmware

262
00:11:56,720 --> 00:11:59,519
image to flash iot goat on raspberry pi

263
00:11:59,519 --> 00:12:02,079
2 as well

264
00:12:02,959 --> 00:12:05,040
now i will show you how you can download

265
00:12:05,040 --> 00:12:08,560
the vmdk file and set up your custom

266
00:12:08,560 --> 00:12:12,719
iot good machine and start using it

267
00:12:14,760 --> 00:12:17,760
[Music]

268
00:12:17,760 --> 00:12:19,519
so this is the getting started page and

269
00:12:19,519 --> 00:12:21,839
the link is provided in the presentation

270
00:12:21,839 --> 00:12:24,639
and this is a github page of the ova's

271
00:12:24,639 --> 00:12:26,720
iot goat repository

272
00:12:26,720 --> 00:12:29,440
it contains instructions on

273
00:12:29,440 --> 00:12:31,680
each method of getting started and we

274
00:12:31,680 --> 00:12:34,399
will focus today on how to set up as a

275
00:12:34,399 --> 00:12:37,200
virtual machine

276
00:12:37,440 --> 00:12:39,680
so by clicking this link i can download

277
00:12:39,680 --> 00:12:43,519
the iot gold x86

278
00:12:43,519 --> 00:12:46,079
virtual machine image and since i've

279
00:12:46,079 --> 00:12:48,560
already downloaded it on my machine

280
00:12:48,560 --> 00:12:50,399
i will just use that

281
00:12:50,399 --> 00:12:52,959
this link also contains the raspberry pi

282
00:12:52,959 --> 00:12:56,639
build as well and the source code of the

283
00:12:56,639 --> 00:12:59,600
iot good as well

284
00:12:59,600 --> 00:13:02,240
so i'll go to virtual i so i'm using

285
00:13:02,240 --> 00:13:04,240
vmware workstation and you're free to

286
00:13:04,240 --> 00:13:06,959
use virtualbox or any other machine you

287
00:13:06,959 --> 00:13:09,040
want

288
00:13:09,040 --> 00:13:11,839
so i'll create a new virtual machine

289
00:13:11,839 --> 00:13:16,320
and i'll select custom advanced

290
00:13:16,720 --> 00:13:18,800
my hardware compatibility is correct

291
00:13:18,800 --> 00:13:21,279
this is workstation 15

292
00:13:21,279 --> 00:13:23,120
and i'll click next

293
00:13:23,120 --> 00:13:26,399
so since i'm using a pre-compiled vmdk

294
00:13:26,399 --> 00:13:28,880
image i will choose the option to

295
00:13:28,880 --> 00:13:30,959
install operating system later since

296
00:13:30,959 --> 00:13:33,040
that virtual machine disk already

297
00:13:33,040 --> 00:13:34,890
contains the operating system

298
00:13:34,890 --> 00:13:36,320
[Music]

299
00:13:36,320 --> 00:13:38,560
i'll click next the operating system is

300
00:13:38,560 --> 00:13:40,320
linux here

301
00:13:40,320 --> 00:13:42,320
make sure you select a 32-bit not a

302
00:13:42,320 --> 00:13:45,440
64-bit and you can select either 4-point

303
00:13:45,440 --> 00:13:47,440
x or 3-point x

304
00:13:47,440 --> 00:13:50,880
i'll go with the 4.x

305
00:13:51,680 --> 00:13:55,040
so here i'll select where i want the vm

306
00:13:55,040 --> 00:13:58,320
my virtual machine files to be stored

307
00:13:58,320 --> 00:14:01,839
and i'll go to my desktop

308
00:14:01,839 --> 00:14:05,440
just select images click ok

309
00:14:05,440 --> 00:14:06,639
next

310
00:14:06,639 --> 00:14:09,839
so this is fine one processor and one

311
00:14:09,839 --> 00:14:12,160
core per processor is fine to start open

312
00:14:12,160 --> 00:14:15,160
wrt

313
00:14:16,079 --> 00:14:18,800
256 mb is fine

314
00:14:18,800 --> 00:14:20,560
and you don't need to you know you don't

315
00:14:20,560 --> 00:14:23,199
need more ram than that that's usually

316
00:14:23,199 --> 00:14:27,439
the standard ram and embedded devices

317
00:14:27,519 --> 00:14:30,480
and make sure you select network address

318
00:14:30,480 --> 00:14:31,839
translation

319
00:14:31,839 --> 00:14:35,440
and not host only networking

320
00:14:35,440 --> 00:14:39,680
lsi logic is fine don't change that scsi

321
00:14:39,680 --> 00:14:41,519
recommended that's also fine do not

322
00:14:41,519 --> 00:14:43,519
change that

323
00:14:43,519 --> 00:14:46,000
so now is the main thing so this is the

324
00:14:46,000 --> 00:14:48,079
place where you'll link the

325
00:14:48,079 --> 00:14:50,480
vmdk that you already downloaded or the

326
00:14:50,480 --> 00:14:53,440
vdi if you're using virtualbox so i'll

327
00:14:53,440 --> 00:14:57,120
click on use an existing virtual disk

328
00:14:57,120 --> 00:14:59,440
and click next

329
00:14:59,440 --> 00:15:01,360
now i'll give it the path of my virtual

330
00:15:01,360 --> 00:15:03,279
disk

331
00:15:03,279 --> 00:15:06,160
and click next again

332
00:15:06,160 --> 00:15:08,800
so you can choose to convert or keep

333
00:15:08,800 --> 00:15:10,880
existing formats this won't matter it's

334
00:15:10,880 --> 00:15:12,880
just a format of the virtual disk so

335
00:15:12,880 --> 00:15:15,440
i'll just choose to keep existing format

336
00:15:15,440 --> 00:15:18,480
to be safe

337
00:15:19,360 --> 00:15:21,360
and then i'll just click finish

338
00:15:21,360 --> 00:15:24,480
[Music]

339
00:15:25,680 --> 00:15:28,000
so i'll give it like five seconds and

340
00:15:28,000 --> 00:15:29,920
once everything is set up i'll power on

341
00:15:29,920 --> 00:15:32,880
this virtual machine

342
00:15:36,720 --> 00:15:38,800
so it says cannot connect to the id

343
00:15:38,800 --> 00:15:40,880
that's because we're using the

344
00:15:40,880 --> 00:15:44,000
vmdk already downloaded and

345
00:15:44,000 --> 00:15:45,839
do you want to try to connect this

346
00:15:45,839 --> 00:15:49,759
virtual device every time no

347
00:15:52,079 --> 00:15:54,959
so now it will start booting up

348
00:15:54,959 --> 00:15:58,959
and i can select open wrt

349
00:16:00,079 --> 00:16:01,920
so give it like

350
00:16:01,920 --> 00:16:07,800
30 to 45 seconds and it should boot up

351
00:16:13,120 --> 00:16:14,720
so you can see it's loading bunch of

352
00:16:14,720 --> 00:16:16,310
drivers

353
00:16:16,310 --> 00:16:19,650
[Music]

354
00:16:23,519 --> 00:16:26,880
okay i think it's booted up so now

355
00:16:26,880 --> 00:16:29,519
so basically now your virtual machine is

356
00:16:29,519 --> 00:16:32,240
running open wrt i'll show you how you

357
00:16:32,240 --> 00:16:35,120
can access the web console as well

358
00:16:35,120 --> 00:16:38,079
so if you write if config

359
00:16:38,079 --> 00:16:40,160
and press enter you'll see all your

360
00:16:40,160 --> 00:16:42,639
interfaces

361
00:16:42,639 --> 00:16:46,160
okay i can't scroll up here i'll write

362
00:16:46,160 --> 00:16:47,279
less

363
00:16:47,279 --> 00:16:49,519
yeah now i can see so we are interested

364
00:16:49,519 --> 00:16:51,839
in the br lan which is the bridge clan

365
00:16:51,839 --> 00:16:53,440
interface

366
00:16:53,440 --> 00:16:56,079
and note down the ip address the inet

367
00:16:56,079 --> 00:16:58,560
address of this interface and this

368
00:16:58,560 --> 00:17:00,639
you will use this ip address to access

369
00:17:00,639 --> 00:17:02,959
the web console of open wrt from your

370
00:17:02,959 --> 00:17:04,640
host machine

371
00:17:04,640 --> 00:17:11,520
so the ip address is 192 168 206 and 135

372
00:17:11,520 --> 00:17:15,679
let's try to access this from my browser

373
00:17:17,439 --> 00:17:20,640
192 168

374
00:17:20,640 --> 00:17:25,039
206 and 135

375
00:17:28,160 --> 00:17:29,520
okay so

376
00:17:29,520 --> 00:17:31,679
my antivirus seems to block it because

377
00:17:31,679 --> 00:17:36,520
of because it's http or https

378
00:17:37,280 --> 00:17:40,799
okay so now you can access your

379
00:17:40,799 --> 00:17:42,640
web console and

380
00:17:42,640 --> 00:17:44,320
from here you'll enter the password and

381
00:17:44,320 --> 00:17:47,520
go forward

382
00:17:47,520 --> 00:17:49,440
thank you everyone and now i'll hand

383
00:17:49,440 --> 00:17:51,840
over the presentation to my co-speaker

384
00:17:51,840 --> 00:17:54,000
barack matrey who will tell you how to

385
00:17:54,000 --> 00:17:56,080
login into the web interface and show

386
00:17:56,080 --> 00:17:59,120
you challenges as well

387
00:17:59,120 --> 00:18:01,679
thank you abhinav uh i'm the second

388
00:18:01,679 --> 00:18:03,360
presenter for this session my name is

389
00:18:03,360 --> 00:18:07,679
parag and i just joined uh bank oziki as

390
00:18:07,679 --> 00:18:10,080
application security engineer after i

391
00:18:10,080 --> 00:18:12,400
graduated with masters from university

392
00:18:12,400 --> 00:18:14,480
of north carolina at charlotte

393
00:18:14,480 --> 00:18:16,799
i am a networks guy who

394
00:18:16,799 --> 00:18:19,200
developed interest in security offensive

395
00:18:19,200 --> 00:18:21,600
security to be precise and i'm a

396
00:18:21,600 --> 00:18:25,679
contributor for the oasp iot code um

397
00:18:25,679 --> 00:18:28,240
so let's get on to it abhinav has

398
00:18:28,240 --> 00:18:30,799
already started uh given us a

399
00:18:30,799 --> 00:18:33,520
walkthrough about how to get started

400
00:18:33,520 --> 00:18:35,600
with iot good and how to install it so

401
00:18:35,600 --> 00:18:37,760
i'm just gonna boot up my version of iot

402
00:18:37,760 --> 00:18:38,880
go

403
00:18:38,880 --> 00:18:41,039
here and

404
00:18:41,039 --> 00:18:45,440
i already have a kali instance running

405
00:18:45,520 --> 00:18:46,880
so

406
00:18:46,880 --> 00:18:49,360
let's just get it started

407
00:18:49,360 --> 00:18:51,600
okay

408
00:18:55,039 --> 00:18:58,160
okay so let's just check the ip address

409
00:18:58,160 --> 00:18:59,679
of the

410
00:18:59,679 --> 00:19:02,160
instance

411
00:19:02,160 --> 00:19:05,320
okay so we have 192 168

412
00:19:05,320 --> 00:19:08,000
242.132 i'm just gonna make sure that we

413
00:19:08,000 --> 00:19:10,960
do have access to the ui and are able to

414
00:19:10,960 --> 00:19:12,720
connect to it

415
00:19:12,720 --> 00:19:13,919
um

416
00:19:13,919 --> 00:19:15,440
yep

417
00:19:15,440 --> 00:19:16,559
okay

418
00:19:16,559 --> 00:19:19,679
just accepting the risk and we are there

419
00:19:19,679 --> 00:19:22,960
so the first thing that i'm gonna do is

420
00:19:22,960 --> 00:19:26,080
what everybody does i'm gonna run a

421
00:19:26,080 --> 00:19:29,039
network scan on the ip address of iot go

422
00:19:29,039 --> 00:19:31,120
on the web server of iot good just to

423
00:19:31,120 --> 00:19:33,360
understand which ports are open and if

424
00:19:33,360 --> 00:19:36,240
any services are listening to them and

425
00:19:36,240 --> 00:19:38,160
make and my try and identify those

426
00:19:38,160 --> 00:19:41,760
services so and map

427
00:19:41,760 --> 00:19:42,960
um

428
00:19:42,960 --> 00:19:43,490
let's do

429
00:19:43,490 --> 00:19:45,520
[Music]

430
00:19:45,520 --> 00:19:48,240
this and all put

431
00:19:48,240 --> 00:19:52,410
192 168 242 132

432
00:19:52,410 --> 00:19:54,559
[Music]

433
00:19:54,559 --> 00:19:56,720
okay

434
00:19:56,720 --> 00:19:58,400
and as you can see it has already

435
00:19:58,400 --> 00:20:01,600
discovered some ports there port 53 80

436
00:20:01,600 --> 00:20:03,679
443 222

437
00:20:03,679 --> 00:20:05,520
nothing surprising there

438
00:20:05,520 --> 00:20:08,080
will wait for the interesting stuff so

439
00:20:08,080 --> 00:20:10,559
one other thing that we can do till then

440
00:20:10,559 --> 00:20:12,720
is

441
00:20:12,720 --> 00:20:13,679
try

442
00:20:13,679 --> 00:20:14,960
and

443
00:20:14,960 --> 00:20:18,400
uh extract the iot firmware so this is

444
00:20:18,400 --> 00:20:20,240
the image of the firmware that runs on

445
00:20:20,240 --> 00:20:22,000
iot goods so i'm just going to use

446
00:20:22,000 --> 00:20:23,120
benvok

447
00:20:23,120 --> 00:20:24,080
to

448
00:20:24,080 --> 00:20:26,640
i'm sorry i'm going to use benwalk to

449
00:20:26,640 --> 00:20:29,360
extract the firmware so

450
00:20:29,360 --> 00:20:30,880
let's do

451
00:20:30,880 --> 00:20:35,039
bin walk extract iot goes

452
00:20:35,039 --> 00:20:36,799
okay

453
00:20:36,799 --> 00:20:40,639
and while this runs

454
00:20:41,280 --> 00:20:42,559
we can see that it has started

455
00:20:42,559 --> 00:20:45,919
extracting firmware squash face id root

456
00:20:45,919 --> 00:20:47,120
okay

457
00:20:47,120 --> 00:20:49,039
let's try to see the interesting file

458
00:20:49,039 --> 00:20:52,080
let's see shadow

459
00:20:52,080 --> 00:20:53,440
shadow

460
00:20:53,440 --> 00:20:54,799
okay

461
00:20:54,799 --> 00:20:56,480
that's here

462
00:20:56,480 --> 00:20:59,200
okay so as we can see this has two users

463
00:20:59,200 --> 00:21:02,320
root iot good which have hard-coded

464
00:21:02,320 --> 00:21:05,200
passwords in there so one thing that we

465
00:21:05,200 --> 00:21:08,240
can do is try and crack these passwords

466
00:21:08,240 --> 00:21:11,760
using hashcat or drawn using a word list

467
00:21:11,760 --> 00:21:14,080
and i would suggest that you use a very

468
00:21:14,080 --> 00:21:17,200
popular word list from a botnet in 2016

469
00:21:17,200 --> 00:21:19,840
the mirai word list and you should be

470
00:21:19,840 --> 00:21:20,640
good

471
00:21:20,640 --> 00:21:24,400
uh getting back to the nmap scan okay so

472
00:21:24,400 --> 00:21:25,360
uh

473
00:21:25,360 --> 00:21:27,280
since we are trying to run a scan on all

474
00:21:27,280 --> 00:21:29,679
sixty five thousand three

475
00:21:29,679 --> 00:21:32,320
five thirty five ports over here

476
00:21:32,320 --> 00:21:34,480
it will take a lot of time so i went

477
00:21:34,480 --> 00:21:37,440
ahead and got a screenshot of a scan

478
00:21:37,440 --> 00:21:40,159
that i run last night so

479
00:21:40,159 --> 00:21:42,799
here is the scan result

480
00:21:42,799 --> 00:21:44,640
uh we can see that there are multiple

481
00:21:44,640 --> 00:21:47,200
ports that are open over here uh there

482
00:21:47,200 --> 00:21:49,280
is a six five five three four that's

483
00:21:49,280 --> 00:21:50,240
open

484
00:21:50,240 --> 00:21:53,600
and there is this seven four two nine

485
00:21:53,600 --> 00:21:55,600
uh no that's filtered so there's five

486
00:21:55,600 --> 00:21:57,280
five one five that's open and we don't

487
00:21:57,280 --> 00:21:59,120
know the service that's running on there

488
00:21:59,120 --> 00:22:01,440
there is this 5000 port with upnp

489
00:22:01,440 --> 00:22:03,280
running and this is an interesting port

490
00:22:03,280 --> 00:22:05,840
should be enumerated definitely uh

491
00:22:05,840 --> 00:22:08,000
everything else seems to be filtered or

492
00:22:08,000 --> 00:22:11,600
is not very interesting so

493
00:22:11,600 --> 00:22:15,039
let's try and connect to this port and

494
00:22:15,039 --> 00:22:16,799
see what happens so

495
00:22:16,799 --> 00:22:18,640
what i'm gonna do is i'm gonna just stop

496
00:22:18,640 --> 00:22:21,039
this nmap scan

497
00:22:21,039 --> 00:22:24,640
and resize this okay

498
00:22:25,280 --> 00:22:27,440
so i'm gonna try and connect to six five

499
00:22:27,440 --> 00:22:29,679
five three four using netcat so just to

500
00:22:29,679 --> 00:22:31,360
nc

501
00:22:31,360 --> 00:22:38,400
numeric only verbose and 192 168 242 132

502
00:22:38,400 --> 00:22:42,080
i put six five five three four let's see

503
00:22:42,080 --> 00:22:45,760
what happens okay so as we can see

504
00:22:45,760 --> 00:22:48,320
and netcat did connect and we can see

505
00:22:48,320 --> 00:22:51,440
your remote login screen over here uh at

506
00:22:51,440 --> 00:22:54,720
this point of time if we had actually

507
00:22:54,720 --> 00:22:56,720
cracked the password after reverse

508
00:22:56,720 --> 00:23:00,799
engineering the firmware over here

509
00:23:01,200 --> 00:23:03,440
over here

510
00:23:03,440 --> 00:23:04,559
from there

511
00:23:04,559 --> 00:23:05,600
then

512
00:23:05,600 --> 00:23:07,280
we could have tried and

513
00:23:07,280 --> 00:23:10,240
connected using

514
00:23:11,360 --> 00:23:14,080
we could have tried and connected using

515
00:23:14,080 --> 00:23:16,159
uh those credentials for now i'm just

516
00:23:16,159 --> 00:23:17,679
gonna try

517
00:23:17,679 --> 00:23:20,720
default credentials so just try

518
00:23:20,720 --> 00:23:22,720
route

519
00:23:22,720 --> 00:23:24,960
and

520
00:23:25,440 --> 00:23:27,919
it doesn't get me through so i'll try to

521
00:23:27,919 --> 00:23:29,919
connect to the other port that's that we

522
00:23:29,919 --> 00:23:32,480
have found and that's interesting so

523
00:23:32,480 --> 00:23:34,000
same command

524
00:23:34,000 --> 00:23:36,480
same ip and a different port so the port

525
00:23:36,480 --> 00:23:40,240
is five five one five

526
00:23:40,240 --> 00:23:42,559
so as we can see we connected to those

527
00:23:42,559 --> 00:23:44,559
it says successfully connected to iot

528
00:23:44,559 --> 00:23:46,960
goods back door so i'm guessing this is

529
00:23:46,960 --> 00:23:48,960
a remote shell let's see

530
00:23:48,960 --> 00:23:52,480
and yes we this is a remote shell

531
00:23:52,480 --> 00:23:53,520
okay

532
00:23:53,520 --> 00:23:55,279
so we could

533
00:23:55,279 --> 00:23:57,200
do the same thing that we did using

534
00:23:57,200 --> 00:23:59,440
reverse engineering we could cut out the

535
00:23:59,440 --> 00:24:01,039
shadow file

536
00:24:01,039 --> 00:24:05,200
um yep or we could cut out the

537
00:24:05,200 --> 00:24:07,279
password file as well yep

538
00:24:07,279 --> 00:24:09,919
so we could use a combination of this

539
00:24:09,919 --> 00:24:10,880
to

540
00:24:10,880 --> 00:24:13,840
again crack the passwords and get direct

541
00:24:13,840 --> 00:24:14,799
um

542
00:24:14,799 --> 00:24:16,720
once we crack those passwords we could

543
00:24:16,720 --> 00:24:19,919
use them here or we could ssh them as we

544
00:24:19,919 --> 00:24:21,919
can see that

545
00:24:21,919 --> 00:24:24,720
ssh port is open as well

546
00:24:24,720 --> 00:24:27,360
so i'm just going to log into the now

547
00:24:27,360 --> 00:24:29,760
iot goods interface

548
00:24:29,760 --> 00:24:33,840
using the password that i know

549
00:24:34,799 --> 00:24:37,440
and so once once you do get access to

550
00:24:37,440 --> 00:24:39,840
the ui you can just surf around and look

551
00:24:39,840 --> 00:24:43,039
for stuff as i said upnp is interesting

552
00:24:43,039 --> 00:24:44,799
one thing that i suddenly notice is that

553
00:24:44,799 --> 00:24:47,360
secure mode is not enabled that is

554
00:24:47,360 --> 00:24:48,880
something to

555
00:24:48,880 --> 00:24:50,159
make note of

556
00:24:50,159 --> 00:24:52,000
now i'm gonna show you a cross-site

557
00:24:52,000 --> 00:24:53,440
scripting vulnerability that we

558
00:24:53,440 --> 00:24:56,240
developed in iot good so if we go to the

559
00:24:56,240 --> 00:24:58,240
wireless page and if we go into the

560
00:24:58,240 --> 00:25:00,640
wireless settings wi-fi settings

561
00:25:00,640 --> 00:25:03,200
and we go to the ssid i'm just gonna go

562
00:25:03,200 --> 00:25:05,600
ahead and try and run

563
00:25:05,600 --> 00:25:07,440
oh it's already there so i'm just gonna

564
00:25:07,440 --> 00:25:10,559
go ahead and run this

565
00:25:10,559 --> 00:25:12,799
uh payload over here it says image

566
00:25:12,799 --> 00:25:15,760
source and the source is malformed uh so

567
00:25:15,760 --> 00:25:17,600
it should call the on error event

568
00:25:17,600 --> 00:25:20,080
handler and run this javascript so let's

569
00:25:20,080 --> 00:25:24,080
just see and try and apply this

570
00:25:24,320 --> 00:25:27,279
so waiting for it to apply and

571
00:25:27,279 --> 00:25:29,919
yep so as we can see this field was

572
00:25:29,919 --> 00:25:31,520
vulnerable to a cross-site scripting

573
00:25:31,520 --> 00:25:34,320
vulnerability another thing that i'm

574
00:25:34,320 --> 00:25:37,200
gonna try and do

575
00:25:37,200 --> 00:25:39,919
uh is show you uh

576
00:25:39,919 --> 00:25:41,120
show you a

577
00:25:41,120 --> 00:25:43,679
csrf vulnerability so i'm gonna start

578
00:25:43,679 --> 00:25:46,000
burp suit for this the community edition

579
00:25:46,000 --> 00:25:48,000
that comes with kali

580
00:25:48,000 --> 00:25:49,640
and i'm gonna do

581
00:25:49,640 --> 00:25:50,880
[Music]

582
00:25:50,880 --> 00:25:53,039
i already have burp suit configured so

583
00:25:53,039 --> 00:25:55,279
i'm gonna use foxy proxy to start my

584
00:25:55,279 --> 00:25:56,880
proxy

585
00:25:56,880 --> 00:25:59,279
and

586
00:26:05,600 --> 00:26:07,440
so i'm gonna just start a temporary

587
00:26:07,440 --> 00:26:10,080
project

588
00:26:10,080 --> 00:26:10,410
and

589
00:26:10,410 --> 00:26:11,600
[Music]

590
00:26:11,600 --> 00:26:12,720
yep

591
00:26:12,720 --> 00:26:15,039
i'm gonna go to proxy turn the intercept

592
00:26:15,039 --> 00:26:17,360
off

593
00:26:18,880 --> 00:26:21,120
and just go to

594
00:26:21,120 --> 00:26:25,239
the firewalls page here

595
00:26:25,440 --> 00:26:28,159
so there is a

596
00:26:28,159 --> 00:26:29,600
this is just the

597
00:26:29,600 --> 00:26:33,840
burp suit ssl certificate warning um

598
00:26:33,840 --> 00:26:36,080
so i'm gonna go to the port forward page

599
00:26:36,080 --> 00:26:38,559
and try and insert a rule

600
00:26:38,559 --> 00:26:39,679
say

601
00:26:39,679 --> 00:26:41,120
rule

602
00:26:41,120 --> 00:26:42,320
2

603
00:26:42,320 --> 00:26:44,080
and give it to

604
00:26:44,080 --> 00:26:45,279
protocol

605
00:26:45,279 --> 00:26:48,880
external port as 3 4 3 4 lan

606
00:26:48,880 --> 00:26:51,400
internal ip address as

607
00:26:51,400 --> 00:26:55,360
132 192 168 242 132 and the internal

608
00:26:55,360 --> 00:26:58,559
port as 34 and just do add

609
00:26:58,559 --> 00:27:02,600
let's try and apply this

610
00:27:06,720 --> 00:27:08,799
um i forgot to turn the intercept on but

611
00:27:08,799 --> 00:27:11,120
we can go to that gtp history and see

612
00:27:11,120 --> 00:27:14,400
the post request that was there

613
00:27:14,400 --> 00:27:16,640
um

614
00:27:17,120 --> 00:27:18,000
here

615
00:27:18,000 --> 00:27:20,080
and i'm gonna do this once again so we

616
00:27:20,080 --> 00:27:20,880
could

617
00:27:20,880 --> 00:27:22,320
see it over here i'm just gonna turn the

618
00:27:22,320 --> 00:27:24,799
intercept on and

619
00:27:24,799 --> 00:27:26,559
test no

620
00:27:26,559 --> 00:27:28,960
rule two three

621
00:27:28,960 --> 00:27:29,760
okay

622
00:27:29,760 --> 00:27:32,399
let's do udp this time and external port

623
00:27:32,399 --> 00:27:34,480
should be four four four four

624
00:27:34,480 --> 00:27:36,480
let's try a different ip address and

625
00:27:36,480 --> 00:27:39,279
internal code that's 44 and do add

626
00:27:39,279 --> 00:27:41,039
and we can see that this is the post

627
00:27:41,039 --> 00:27:45,600
request that was captured by bob um

628
00:27:45,840 --> 00:27:48,640
we can see that it is being sent to

629
00:27:48,640 --> 00:27:51,600
cgi being lucy admin network firewall

630
00:27:51,600 --> 00:27:53,120
forwards

631
00:27:53,120 --> 00:27:54,960
and

632
00:27:54,960 --> 00:27:58,080
there is a system authentication cookie

633
00:27:58,080 --> 00:28:00,399
and then there is this token that's

634
00:28:00,399 --> 00:28:01,679
being sent

635
00:28:01,679 --> 00:28:03,360
so let's go to the parameters to look at

636
00:28:03,360 --> 00:28:05,039
this in a better way

637
00:28:05,039 --> 00:28:08,080
as we can see this

638
00:28:08,159 --> 00:28:10,640
uh are the parameters and this is a

639
00:28:10,640 --> 00:28:12,640
system authentication cookie which i

640
00:28:12,640 --> 00:28:14,960
believe is a login cookie and there is

641
00:28:14,960 --> 00:28:17,360
this token which is supposed to work as

642
00:28:17,360 --> 00:28:20,399
a csrf token but for some errors on the

643
00:28:20,399 --> 00:28:23,039
back end it doesn't get validated so i'm

644
00:28:23,039 --> 00:28:25,039
just going to let this go and

645
00:28:25,039 --> 00:28:26,960
actually i'm going to keep it here and

646
00:28:26,960 --> 00:28:30,320
pull up

647
00:28:30,320 --> 00:28:33,039
a page that i created so this firewall

648
00:28:33,039 --> 00:28:36,000
rule html page i'm just gonna open that

649
00:28:36,000 --> 00:28:37,360
mousepad

650
00:28:37,360 --> 00:28:39,919
and show you that i have included all

651
00:28:39,919 --> 00:28:44,159
the necessary fields from the form

652
00:28:44,159 --> 00:28:45,200
so

653
00:28:45,200 --> 00:28:47,200
uh it is posting to admin network

654
00:28:47,200 --> 00:28:48,799
firewall forwards

655
00:28:48,799 --> 00:28:50,159
just like here

656
00:28:50,159 --> 00:28:51,120
and

657
00:28:51,120 --> 00:28:53,520
it has all these

658
00:28:53,520 --> 00:28:57,279
necessary fields like uh it's uh it has

659
00:28:57,279 --> 00:29:00,640
a name called ssh uh protocol is tcp

660
00:29:00,640 --> 00:29:02,640
there is external port internal ip

661
00:29:02,640 --> 00:29:04,399
address internal port

662
00:29:04,399 --> 00:29:06,720
for internal zone accident zone so this

663
00:29:06,720 --> 00:29:09,919
is all we would need if we had to create

664
00:29:09,919 --> 00:29:12,799
a csr form and maliciously

665
00:29:12,799 --> 00:29:15,360
trick the user to run that so what i'm

666
00:29:15,360 --> 00:29:17,679
gonna do is

667
00:29:17,679 --> 00:29:22,000
i'm gonna put this address over here

668
00:29:22,000 --> 00:29:25,760
and the name of the form is

669
00:29:25,760 --> 00:29:30,559
firewall often underscore rule html

670
00:29:32,480 --> 00:29:35,600
so one thing to notice here is that

671
00:29:35,600 --> 00:29:37,520
the form was from a different domain a

672
00:29:37,520 --> 00:29:41,679
different website uh and

673
00:29:41,679 --> 00:29:44,880
this domain is 190 to 168 to 42 132

674
00:29:44,880 --> 00:29:47,279
that's the iot goods domain so

675
00:29:47,279 --> 00:29:49,279
even if we execute form from a different

676
00:29:49,279 --> 00:29:52,320
domain and it gets passed to the server

677
00:29:52,320 --> 00:29:55,600
backend the token didn't uh

678
00:29:55,600 --> 00:29:59,039
wouldn't actually get validated so

679
00:29:59,039 --> 00:30:00,640
as we can see here

680
00:30:00,640 --> 00:30:04,960
the rule was added and

681
00:30:05,919 --> 00:30:07,679
we we exploited across accepting

682
00:30:07,679 --> 00:30:10,080
vulnerability now

683
00:30:10,080 --> 00:30:13,279
if we were able to

684
00:30:13,679 --> 00:30:16,399
if we were able to

685
00:30:16,399 --> 00:30:17,760
execute the cross-site scripting

686
00:30:17,760 --> 00:30:20,000
vulnerability to

687
00:30:20,000 --> 00:30:23,039
suppose include a payload here

688
00:30:23,039 --> 00:30:25,840
and perform some malicious action using

689
00:30:25,840 --> 00:30:28,880
javascript say navigate the user out of

690
00:30:28,880 --> 00:30:30,559
this from this domain to a different

691
00:30:30,559 --> 00:30:33,039
website altogether

692
00:30:33,039 --> 00:30:35,120
well that is something that could be

693
00:30:35,120 --> 00:30:36,399
done and

694
00:30:36,399 --> 00:30:38,880
i guess you should check that out

695
00:30:38,880 --> 00:30:41,520
apart from that um

696
00:30:41,520 --> 00:30:42,960
one other thing that i wanted to show

697
00:30:42,960 --> 00:30:45,760
you was there is a secret

698
00:30:45,760 --> 00:30:48,720
page that's uh included in this uh

699
00:30:48,720 --> 00:30:51,760
firmware you cannot normally navigate to

700
00:30:51,760 --> 00:30:53,600
the page but if you just type the

701
00:30:53,600 --> 00:30:56,880
correct url or if you burst the correct

702
00:30:56,880 --> 00:30:59,120
url then you will be able to access that

703
00:30:59,120 --> 00:31:02,480
page and that would be it iot good cmd

704
00:31:02,480 --> 00:31:03,919
injection

705
00:31:03,919 --> 00:31:04,720
so

706
00:31:04,720 --> 00:31:07,360
this is a page which gives a

707
00:31:07,360 --> 00:31:11,120
root terminal uh to any user so this is

708
00:31:11,120 --> 00:31:12,559
another thing that

709
00:31:12,559 --> 00:31:15,519
is uh is interesting there are two ways

710
00:31:15,519 --> 00:31:17,440
to find this there are tools available

711
00:31:17,440 --> 00:31:18,799
like

712
00:31:18,799 --> 00:31:21,360
door buster or go buster which try and

713
00:31:21,360 --> 00:31:25,440
find uh different urls which uh are

714
00:31:25,440 --> 00:31:27,760
which do exist but could not cannot be

715
00:31:27,760 --> 00:31:29,039
found

716
00:31:29,039 --> 00:31:31,279
using normal methods and there is one

717
00:31:31,279 --> 00:31:33,440
another method using reverse engineering

718
00:31:33,440 --> 00:31:35,840
so if we just go here

719
00:31:35,840 --> 00:31:39,120
and from this file system uh if we go to

720
00:31:39,120 --> 00:31:40,799
the correct

721
00:31:40,799 --> 00:31:42,320
path

722
00:31:42,320 --> 00:31:44,640
okay so if we go to the correct path we

723
00:31:44,640 --> 00:31:46,480
would be able to find the

724
00:31:46,480 --> 00:31:47,600
cmd

725
00:31:47,600 --> 00:31:50,159
inject page and that's another way of

726
00:31:50,159 --> 00:31:51,440
finding that

727
00:31:51,440 --> 00:31:52,720
okay so

728
00:31:52,720 --> 00:31:55,519
this is all i had as far as walkthroughs

729
00:31:55,519 --> 00:31:57,440
of the challenges were concerned let's

730
00:31:57,440 --> 00:32:00,880
get back to the slides so there is this

731
00:32:00,880 --> 00:32:02,880
uh there are these resources that we do

732
00:32:02,880 --> 00:32:07,039
suggest using um if you are trying your

733
00:32:07,039 --> 00:32:08,559
if you are trying this out for the first

734
00:32:08,559 --> 00:32:10,880
time so there is this firmware security

735
00:32:10,880 --> 00:32:12,720
testing methodology that was recently

736
00:32:12,720 --> 00:32:15,120
released by owasp uh

737
00:32:15,120 --> 00:32:16,080
and it

738
00:32:16,080 --> 00:32:18,799
gives you a and i gives you a detailed

739
00:32:18,799 --> 00:32:21,200
overview about how to go about

740
00:32:21,200 --> 00:32:23,440
while testing a firmware and the web

741
00:32:23,440 --> 00:32:25,519
security testing guide is very famous

742
00:32:25,519 --> 00:32:28,640
and utilized by a lot of web application

743
00:32:28,640 --> 00:32:32,399
testers so that's something that

744
00:32:32,399 --> 00:32:34,399
we would recommend as well

745
00:32:34,399 --> 00:32:37,120
um apart from that uh as far as the

746
00:32:37,120 --> 00:32:40,960
future roadmap iot code is concerned

747
00:32:40,960 --> 00:32:42,880
so we are planning about uh we are

748
00:32:42,880 --> 00:32:44,559
planning new things to include and

749
00:32:44,559 --> 00:32:46,960
version two and some things that we

750
00:32:46,960 --> 00:32:48,960
did want to include in version one but

751
00:32:48,960 --> 00:32:51,039
were not able to so

752
00:32:51,039 --> 00:32:53,760
one big thing that we are doing is have

753
00:32:53,760 --> 00:32:54,960
uh

754
00:32:54,960 --> 00:32:55,840
have

755
00:32:55,840 --> 00:32:58,559
high quality solution walkthroughs so if

756
00:32:58,559 --> 00:33:00,960
you if you go to the github page wasps

757
00:33:00,960 --> 00:33:03,440
iot codes getup page the in the wiki

758
00:33:03,440 --> 00:33:06,000
section we have started uh

759
00:33:06,000 --> 00:33:08,000
now started putting down walkthroughs of

760
00:33:08,000 --> 00:33:09,600
different challenges

761
00:33:09,600 --> 00:33:10,960
and

762
00:33:10,960 --> 00:33:12,320
we want to have a really good

763
00:33:12,320 --> 00:33:14,320
documentation of the walkthroughs to set

764
00:33:14,320 --> 00:33:15,760
us apart from

765
00:33:15,760 --> 00:33:17,279
other projects that are there in the

766
00:33:17,279 --> 00:33:18,799
similar field so

767
00:33:18,799 --> 00:33:20,240
uh that is something that we are trying

768
00:33:20,240 --> 00:33:22,559
to do apart from that we also plan to

769
00:33:22,559 --> 00:33:24,480
add exploit mitigations in the next

770
00:33:24,480 --> 00:33:27,760
version of iot good so

771
00:33:27,760 --> 00:33:30,000
uh if we have a vulnerability then we

772
00:33:30,000 --> 00:33:31,360
also want the

773
00:33:31,360 --> 00:33:33,760
uh users to go ahead and fix those

774
00:33:33,760 --> 00:33:35,919
vulnerabilities in the source code and

775
00:33:35,919 --> 00:33:38,000
recompile the firmware to check if there

776
00:33:38,000 --> 00:33:40,000
was network did and

777
00:33:40,000 --> 00:33:42,480
didn't it get fixed or not apart from

778
00:33:42,480 --> 00:33:44,320
that we also want to include hardware

779
00:33:44,320 --> 00:33:46,880
challenges so we

780
00:33:46,880 --> 00:33:49,519
uh we are currently looking at different

781
00:33:49,519 --> 00:33:51,760
options to include hardware with the iot

782
00:33:51,760 --> 00:33:55,200
good as well uh

783
00:33:55,200 --> 00:33:56,640
that is something that's going on as

784
00:33:56,640 --> 00:33:58,720
well and we would like something like

785
00:33:58,720 --> 00:34:01,200
extracting firmware using jtag or and

786
00:34:01,200 --> 00:34:02,480
other things

787
00:34:02,480 --> 00:34:04,720
so another thing about wireless is that

788
00:34:04,720 --> 00:34:06,880
we we do want wireless challenges as

789
00:34:06,880 --> 00:34:09,679
well and uh there is this firmware or

790
00:34:09,679 --> 00:34:11,918
the firmware or the air update challenge

791
00:34:11,918 --> 00:34:12,639
that

792
00:34:12,639 --> 00:34:15,040
we had something that was working

793
00:34:15,040 --> 00:34:17,040
but was paused due to incompatibilities

794
00:34:17,040 --> 00:34:20,239
with open wrt so we do do we do plan to

795
00:34:20,239 --> 00:34:21,918
make that work and release that with the

796
00:34:21,918 --> 00:34:25,520
next version of iot good as well

797
00:34:25,520 --> 00:34:27,119
uh as far as similar projects are

798
00:34:27,119 --> 00:34:29,918
concerned there are some projects which

799
00:34:29,918 --> 00:34:32,079
existed before we thought

800
00:34:32,079 --> 00:34:34,159
before releasing before we released iot

801
00:34:34,159 --> 00:34:36,560
good and most of these projects were

802
00:34:36,560 --> 00:34:38,239
focused on memory corruption

803
00:34:38,239 --> 00:34:40,560
vulnerabilities or hardware based

804
00:34:40,560 --> 00:34:41,679
challenges

805
00:34:41,679 --> 00:34:42,719
and

806
00:34:42,719 --> 00:34:45,199
we want to uh so

807
00:34:45,199 --> 00:34:49,199
and iot good uh focuses more on

808
00:34:49,199 --> 00:34:51,599
the software and hardware challenges to

809
00:34:51,599 --> 00:34:53,599
get together so

810
00:34:53,599 --> 00:34:56,000
we want to provide a complete package as

811
00:34:56,000 --> 00:34:59,760
far as iot uh vulnerabilities our

812
00:34:59,760 --> 00:35:03,040
iot security learning is concerned

813
00:35:03,040 --> 00:35:05,680
apart from that um

814
00:35:05,680 --> 00:35:07,280
i want to give a huge shout out to

815
00:35:07,280 --> 00:35:09,359
everyone who was involved with and

816
00:35:09,359 --> 00:35:11,040
contributed their time and efforts

817
00:35:11,040 --> 00:35:13,920
towards iot good uh project leaders

818
00:35:13,920 --> 00:35:16,480
especially aaron man who was very active

819
00:35:16,480 --> 00:35:18,320
during the whole phase of the project

820
00:35:18,320 --> 00:35:21,599
work and was

821
00:35:21,599 --> 00:35:24,240
always took the initiative to

822
00:35:24,240 --> 00:35:27,359
help out and guide us contributors as

823
00:35:27,359 --> 00:35:28,160
well

824
00:35:28,160 --> 00:35:29,760
so

825
00:35:29,760 --> 00:35:32,079
apart from this um

826
00:35:32,079 --> 00:35:35,200
i i want to thank everyone for giving me

827
00:35:35,200 --> 00:35:38,160
this opportunity thank you owasp and

828
00:35:38,160 --> 00:35:40,400
uh if if anyone is interested to

829
00:35:40,400 --> 00:35:41,839
contribute to

830
00:35:41,839 --> 00:35:44,079
towards iot good i would recommend that

831
00:35:44,079 --> 00:35:46,079
you contact aaron at the given email

832
00:35:46,079 --> 00:35:47,440
address here

833
00:35:47,440 --> 00:35:51,320
and thank you

