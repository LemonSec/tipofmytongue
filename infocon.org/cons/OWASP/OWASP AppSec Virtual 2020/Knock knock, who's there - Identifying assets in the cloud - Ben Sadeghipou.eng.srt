1
00:00:00,480 --> 00:00:02,080
well hello and welcome to knock knock

2
00:00:02,080 --> 00:00:04,880
who's there uh identifying assets in the

3
00:00:04,880 --> 00:00:06,000
cloud

4
00:00:06,000 --> 00:00:07,919
uh my name is ben sadigapoor and i also

5
00:00:07,919 --> 00:00:10,000
have tanner barnes here with me we'll do

6
00:00:10,000 --> 00:00:12,639
a quick introduction in a little bit

7
00:00:12,639 --> 00:00:15,360
uh for this talk today um on an agenda

8
00:00:15,360 --> 00:00:17,119
again we're gonna do an intro really

9
00:00:17,119 --> 00:00:19,119
quickly talk about why we were so

10
00:00:19,119 --> 00:00:21,439
focused on the cloud i talked about our

11
00:00:21,439 --> 00:00:23,680
solution and what we designed how we did

12
00:00:23,680 --> 00:00:25,920
some mass exploitation and then talk

13
00:00:25,920 --> 00:00:29,439
about some real life but on the examples

14
00:00:29,439 --> 00:00:31,840
uh so yeah i'm ben sadigapoor i'm a

15
00:00:31,840 --> 00:00:34,000
hacker husband and a gamer i'm the head

16
00:00:34,000 --> 00:00:37,040
of hacker education here at hackerone

17
00:00:37,040 --> 00:00:39,840
and i'm a content creator and streamer

18
00:00:39,840 --> 00:00:42,399
so if you find these kinds of topics

19
00:00:42,399 --> 00:00:44,480
with hacking and bug bounding uh bug

20
00:00:44,480 --> 00:00:46,079
bounties interesting

21
00:00:46,079 --> 00:00:48,160
uh feel free to drop in on youtube and

22
00:00:48,160 --> 00:00:49,840
on twitch and

23
00:00:49,840 --> 00:00:51,920
watch me do more of this stuff live and

24
00:00:51,920 --> 00:00:53,120
i'll let tanner quickly introduce

25
00:00:53,120 --> 00:00:54,719
himself

26
00:00:54,719 --> 00:00:56,480
awesome thanks ben so yeah as he said my

27
00:00:56,480 --> 00:00:59,440
name is tanner barnes i'm on twitter and

28
00:00:59,440 --> 00:01:01,840
all the things that static flow so i am

29
00:01:01,840 --> 00:01:04,239
a developer a pen tester

30
00:01:04,239 --> 00:01:06,960
and occasionally i do some bug hunting

31
00:01:06,960 --> 00:01:08,000
as well

32
00:01:08,000 --> 00:01:10,320
my job currently is i'm at aeon cyber

33
00:01:10,320 --> 00:01:12,400
solutions as a

34
00:01:12,400 --> 00:01:14,400
pin testing consultant

35
00:01:14,400 --> 00:01:17,520
full time some of the code i build for

36
00:01:17,520 --> 00:01:19,360
the hacker community which is mainly my

37
00:01:19,360 --> 00:01:22,080
focus is on github at that link and then

38
00:01:22,080 --> 00:01:23,680
i do occasionally

39
00:01:23,680 --> 00:01:25,840
do some live coding at coding with

40
00:01:25,840 --> 00:01:28,130
static flow on twitch

41
00:01:28,130 --> 00:01:30,799
[Music]

42
00:01:30,799 --> 00:01:33,119
cool so part of this talk where it kind

43
00:01:33,119 --> 00:01:34,640
of centers around our research in the

44
00:01:34,640 --> 00:01:37,200
cloud so a natural question is why scan

45
00:01:37,200 --> 00:01:38,799
the cloud

46
00:01:38,799 --> 00:01:41,600
well um it's still cheaper there's still

47
00:01:41,600 --> 00:01:43,520
cheaper to do it yourself than options

48
00:01:43,520 --> 00:01:45,360
like census or showdown some of those

49
00:01:45,360 --> 00:01:49,200
licenses can be incredibly expensive

50
00:01:49,200 --> 00:01:50,799
and additionally who isn't in the cloud

51
00:01:50,799 --> 00:01:51,840
right especially if you're looking at

52
00:01:51,840 --> 00:01:54,960
your large organization's verizon a t

53
00:01:54,960 --> 00:01:56,960
yahoo is a part of verizon

54
00:01:56,960 --> 00:01:59,520
just kind of all across bug bounty and

55
00:01:59,520 --> 00:02:01,360
the scene at large

56
00:02:01,360 --> 00:02:02,880
pretty much any large organization is

57
00:02:02,880 --> 00:02:04,799
going to be in the cloud so it's a very

58
00:02:04,799 --> 00:02:06,399
target rich environment if you're

59
00:02:06,399 --> 00:02:08,639
looking at

60
00:02:08,639 --> 00:02:12,640
aws azure gcp alibaba digitalocean if

61
00:02:12,640 --> 00:02:14,480
you're looking at just their compute

62
00:02:14,480 --> 00:02:16,879
space so an equivalent would be like ec2

63
00:02:16,879 --> 00:02:19,120
on aws you're looking at about 88

64
00:02:19,120 --> 00:02:21,280
million different ip addresses right so

65
00:02:21,280 --> 00:02:22,800
a large

66
00:02:22,800 --> 00:02:26,160
large attack service that possibly has

67
00:02:26,160 --> 00:02:29,040
bad bug bounty targets in it

68
00:02:29,040 --> 00:02:29,840
so

69
00:02:29,840 --> 00:02:33,440
it also allows us to see areas where

70
00:02:33,440 --> 00:02:34,879
currently

71
00:02:34,879 --> 00:02:37,120
some new resources are being deployed by

72
00:02:37,120 --> 00:02:39,280
large organizations so we're seeing from

73
00:02:39,280 --> 00:02:40,640
looking at our data where we're seeing a

74
00:02:40,640 --> 00:02:41,599
lot of

75
00:02:41,599 --> 00:02:43,680
quickly spun up and then spun back down

76
00:02:43,680 --> 00:02:45,599
into instances at these large

77
00:02:45,599 --> 00:02:47,360
organizations so they're using the cloud

78
00:02:47,360 --> 00:02:49,840
for testing

79
00:02:49,840 --> 00:02:51,920
some maybe new features and that that in

80
00:02:51,920 --> 00:02:53,920
and of itself can be some very target

81
00:02:53,920 --> 00:02:55,599
rich areas

82
00:02:55,599 --> 00:02:57,840
next slide

83
00:02:57,840 --> 00:03:00,560
right so kind of looking at an idea of

84
00:03:00,560 --> 00:03:02,560
what's out there right so we took a kind

85
00:03:02,560 --> 00:03:05,040
of a step a stock of

86
00:03:05,040 --> 00:03:07,920
common subdomains or subdomain pieces to

87
00:03:07,920 --> 00:03:09,680
kind of get an idea of what might be out

88
00:03:09,680 --> 00:03:10,879
there right so

89
00:03:10,879 --> 00:03:12,560
a thousand corp

90
00:03:12,560 --> 00:03:16,400
you know subdomains uh 13 000 internal

91
00:03:16,400 --> 00:03:17,599
subdomains which we found very

92
00:03:17,599 --> 00:03:19,280
fascinating that something with the name

93
00:03:19,280 --> 00:03:20,720
internal would be out there on the

94
00:03:20,720 --> 00:03:22,319
public cloud

95
00:03:22,319 --> 00:03:24,480
dev that's to be expected especially we

96
00:03:24,480 --> 00:03:26,159
said earlier

97
00:03:26,159 --> 00:03:27,840
looking at a lot of

98
00:03:27,840 --> 00:03:29,280
you know testing environments that are

99
00:03:29,280 --> 00:03:31,360
being put out in the cloud apis those

100
00:03:31,360 --> 00:03:33,519
are super common nowadays to have those

101
00:03:33,519 --> 00:03:35,840
spun up in the cloud

102
00:03:35,840 --> 00:03:38,159
oauth is an example of oath as an

103
00:03:38,159 --> 00:03:40,159
example of something specific to verizon

104
00:03:40,159 --> 00:03:42,000
right you're looking at almost 5 000 of

105
00:03:42,000 --> 00:03:44,000
those subdomains out there and then

106
00:03:44,000 --> 00:03:46,720
yahoo the large and ever popular bug

107
00:03:46,720 --> 00:03:50,000
bounty domain sitting at 108 000 it's a

108
00:03:50,000 --> 00:03:51,519
huge

109
00:03:51,519 --> 00:03:52,799
huge area

110
00:03:52,799 --> 00:03:56,239
surface attack surface wise

111
00:03:56,239 --> 00:03:57,840
right so now we'll get into a bit of our

112
00:03:57,840 --> 00:03:59,760
solution how we were able to get at

113
00:03:59,760 --> 00:04:03,439
those 88 million ip addresses right

114
00:04:03,439 --> 00:04:05,840
so it's built and go

115
00:04:05,840 --> 00:04:08,400
go routines are a huge

116
00:04:08,400 --> 00:04:10,080
win and a good way to really make

117
00:04:10,080 --> 00:04:11,840
something like this happen

118
00:04:11,840 --> 00:04:13,599
that's kind of one of the hallmarks of

119
00:04:13,599 --> 00:04:17,120
go is that it is incredibly concurrent

120
00:04:17,120 --> 00:04:18,959
and can really help you knock out a lot

121
00:04:18,959 --> 00:04:20,959
of concurrent type of workloads really

122
00:04:20,959 --> 00:04:22,560
simply

123
00:04:22,560 --> 00:04:24,400
at how it works kind of as a simple

124
00:04:24,400 --> 00:04:27,199
thing it's really just a scraper for

125
00:04:27,199 --> 00:04:30,639
cname and dns name records from tls

126
00:04:30,639 --> 00:04:32,639
certificates right so

127
00:04:32,639 --> 00:04:35,440
not a lot of magic really in the code um

128
00:04:35,440 --> 00:04:37,120
but the issue becomes

129
00:04:37,120 --> 00:04:39,759
it's really simple to write a scanner

130
00:04:39,759 --> 00:04:42,400
that can pull those from a certificate

131
00:04:42,400 --> 00:04:44,000
but the issue becomes now how do we

132
00:04:44,000 --> 00:04:46,560
scale that to tackle 88 million ip

133
00:04:46,560 --> 00:04:48,720
addresses

134
00:04:48,720 --> 00:04:50,479
so this is my favorite slide i had a lot

135
00:04:50,479 --> 00:04:52,639
of fun writing it when i sent it to ben

136
00:04:52,639 --> 00:04:53,919
and some people they were really taken

137
00:04:53,919 --> 00:04:55,919
aback and it was just a lot of fun to

138
00:04:55,919 --> 00:04:58,479
build so

139
00:04:58,479 --> 00:05:00,080
we ended up getting to a point where we

140
00:05:00,080 --> 00:05:02,720
were able to do 1.4 billion unique

141
00:05:02,720 --> 00:05:05,440
targets in 15 minutes

142
00:05:05,440 --> 00:05:08,080
which ends up at a rate of about 1.6

143
00:05:08,080 --> 00:05:09,759
million a second so the way we're

144
00:05:09,759 --> 00:05:12,240
getting to that 1.4 billion

145
00:05:12,240 --> 00:05:15,280
is we take those 88 million ip addresses

146
00:05:15,280 --> 00:05:18,160
combined with some other

147
00:05:18,160 --> 00:05:21,039
large ciders from bug bounty targets and

148
00:05:21,039 --> 00:05:23,280
some asn's combine those all up into

149
00:05:23,280 --> 00:05:26,000
about 535 000

150
00:05:26,000 --> 00:05:29,360
slash 24 ciders which is slash 24 has

151
00:05:29,360 --> 00:05:32,560
256 ip addresses

152
00:05:32,560 --> 00:05:34,880
and then we across those

153
00:05:34,880 --> 00:05:37,600
slash 24 stars we looked at 11 unique

154
00:05:37,600 --> 00:05:38,960
ports so that's what you end up with

155
00:05:38,960 --> 00:05:42,000
your 1.4 billion unique targets

156
00:05:42,000 --> 00:05:44,240
across those ip addresses across 11

157
00:05:44,240 --> 00:05:45,759
ports

158
00:05:45,759 --> 00:05:48,160
once that scan is done we found about 28

159
00:05:48,160 --> 00:05:50,840
million identified targets on those 11

160
00:05:50,840 --> 00:05:53,680
ports and what's really amazing is that

161
00:05:53,680 --> 00:05:56,479
all of that costs about 25 in aws

162
00:05:56,479 --> 00:05:58,160
charges so

163
00:05:58,160 --> 00:05:59,360
just

164
00:05:59,360 --> 00:06:00,880
pennies in the bucket drops in the

165
00:06:00,880 --> 00:06:03,360
bucket for what we're able to hit that

166
00:06:03,360 --> 00:06:05,520
fast

167
00:06:05,520 --> 00:06:07,280
uh for every great side of a coin there

168
00:06:07,280 --> 00:06:09,680
is kind of a flip side that's not so fun

169
00:06:09,680 --> 00:06:11,759
uh we learned a lot of lessons that

170
00:06:11,759 --> 00:06:14,240
ended up with some maybe not so fun aws

171
00:06:14,240 --> 00:06:17,759
bills along the way to that amazing 25

172
00:06:17,759 --> 00:06:19,440
scan charge

173
00:06:19,440 --> 00:06:21,039
we tried some really silly things with

174
00:06:21,039 --> 00:06:22,800
the lambda you can do a lot of really

175
00:06:22,800 --> 00:06:24,560
concurrent really fast things with

176
00:06:24,560 --> 00:06:27,919
lambda they will not let you spin up 535

177
00:06:27,919 --> 00:06:30,400
000 of them though and

178
00:06:30,400 --> 00:06:32,720
that was found out immediately by a very

179
00:06:32,720 --> 00:06:34,479
large aws bill

180
00:06:34,479 --> 00:06:36,560
because sadly once you kick off lambdas

181
00:06:36,560 --> 00:06:38,319
there is no stopping them so once you

182
00:06:38,319 --> 00:06:41,759
tell lambda to run 535 000 it will do it

183
00:06:41,759 --> 00:06:44,240
and there's really no stopping them

184
00:06:44,240 --> 00:06:47,600
from a code standpoint

185
00:06:47,680 --> 00:06:50,400
every bit of memory and cpu cycle really

186
00:06:50,400 --> 00:06:51,680
matters especially when you're going

187
00:06:51,680 --> 00:06:54,000
through that much data

188
00:06:54,000 --> 00:06:56,800
so at first to get like a a baseline it

189
00:06:56,800 --> 00:06:58,240
was really just kind of rough and dirty

190
00:06:58,240 --> 00:07:01,039
but then to get that type of 1.6 million

191
00:07:01,039 --> 00:07:02,400
you really had to spend a lot of time

192
00:07:02,400 --> 00:07:05,120
with some profiling tools really cutting

193
00:07:05,120 --> 00:07:07,280
out the fat from the software to make

194
00:07:07,280 --> 00:07:09,840
sure it's doing the bare minimum as fast

195
00:07:09,840 --> 00:07:11,520
as it possibly could

196
00:07:11,520 --> 00:07:13,680
and kind of as a last lesson learned

197
00:07:13,680 --> 00:07:15,599
you really got to be careful with what

198
00:07:15,599 --> 00:07:18,720
who you're scanning once we had this raw

199
00:07:18,720 --> 00:07:21,120
down to the 28 million targets

200
00:07:21,120 --> 00:07:23,039
we wanted to try to get some sense of

201
00:07:23,039 --> 00:07:25,759
what was out there on those targets and

202
00:07:25,759 --> 00:07:27,440
we inadvertently ran into some people

203
00:07:27,440 --> 00:07:29,039
who weren't so happy with that and we

204
00:07:29,039 --> 00:07:30,800
got some really hilarious linkedin

205
00:07:30,800 --> 00:07:33,599
messages from some csos

206
00:07:33,599 --> 00:07:35,840
and some people really not happy that we

207
00:07:35,840 --> 00:07:38,240
were poking around so definitely things

208
00:07:38,240 --> 00:07:39,759
to keep in mind when building

209
00:07:39,759 --> 00:07:43,199
large-scale tools like this

210
00:07:43,520 --> 00:07:45,280
so more uh

211
00:07:45,280 --> 00:07:47,120
past what do we do

212
00:07:47,120 --> 00:07:48,479
you know with

213
00:07:48,479 --> 00:07:51,199
all that data is so we have all these

214
00:07:51,199 --> 00:07:52,879
targets right we want to know something

215
00:07:52,879 --> 00:07:54,319
more about them than just that they

216
00:07:54,319 --> 00:07:55,840
exist right

217
00:07:55,840 --> 00:07:57,759
so we turn to looking at ways we can

218
00:07:57,759 --> 00:07:59,759
enrich the data to really do something

219
00:07:59,759 --> 00:08:03,280
with from a bug bounty standpoint

220
00:08:03,280 --> 00:08:05,360
so the first thing we needed to do right

221
00:08:05,360 --> 00:08:08,160
was take those 28 million targets that

222
00:08:08,160 --> 00:08:09,759
came back and figure out which one of

223
00:08:09,759 --> 00:08:13,039
them are bounty targets right so we used

224
00:08:13,039 --> 00:08:14,800
a handful of resources there's a really

225
00:08:14,800 --> 00:08:16,160
great

226
00:08:16,160 --> 00:08:17,840
github repo that we'll get to a little

227
00:08:17,840 --> 00:08:20,319
bit later that had a large list of kind

228
00:08:20,319 --> 00:08:22,879
of pre-compiled bug body targets that we

229
00:08:22,879 --> 00:08:24,400
were able to use to sift and then just

230
00:08:24,400 --> 00:08:26,639
kind of our own knowledge of what common

231
00:08:26,639 --> 00:08:28,479
bug bounty targets were so that was kind

232
00:08:28,479 --> 00:08:30,639
of our first step right is getting just

233
00:08:30,639 --> 00:08:32,399
a bug bounty table

234
00:08:32,399 --> 00:08:34,958
of data that we can start looking at

235
00:08:34,958 --> 00:08:36,799
once we have that data

236
00:08:36,799 --> 00:08:39,279
a really interesting type of next step

237
00:08:39,279 --> 00:08:41,279
to do that we got a lot of success with

238
00:08:41,279 --> 00:08:44,000
was diffing the scans scan to scan to

239
00:08:44,000 --> 00:08:46,720
see what was newly created right so

240
00:08:46,720 --> 00:08:48,959
if you have a scan on monday and you're

241
00:08:48,959 --> 00:08:51,279
scanning again on say thursday what's

242
00:08:51,279 --> 00:08:53,040
really fascinating or what's new is

243
00:08:53,040 --> 00:08:55,040
changed from monday to thursday because

244
00:08:55,040 --> 00:08:57,600
those are going to be your most recent

245
00:08:57,600 --> 00:08:59,519
and maybe most vulnerable targets right

246
00:08:59,519 --> 00:09:01,680
so the diffs that we would check every

247
00:09:01,680 --> 00:09:03,680
day uh really got us a lot of

248
00:09:03,680 --> 00:09:06,240
interesting results there

249
00:09:06,240 --> 00:09:08,080
another thing was checking for v host

250
00:09:08,080 --> 00:09:09,360
discrepancies

251
00:09:09,360 --> 00:09:11,360
so some of these targets

252
00:09:11,360 --> 00:09:13,360
responded differently based on the host

253
00:09:13,360 --> 00:09:15,200
header you gave them right so we we

254
00:09:15,200 --> 00:09:18,000
built a tool that will demo or a demo

255
00:09:18,000 --> 00:09:19,360
we'll release later at the end of the

256
00:09:19,360 --> 00:09:20,959
talk where

257
00:09:20,959 --> 00:09:22,959
you can take a host and it will check

258
00:09:22,959 --> 00:09:25,760
that host based on access by the domain

259
00:09:25,760 --> 00:09:28,560
by the ip address and by a host header

260
00:09:28,560 --> 00:09:30,480
of localhost and it will check the

261
00:09:30,480 --> 00:09:33,360
response links and status codes

262
00:09:33,360 --> 00:09:35,200
to see what might be different there so

263
00:09:35,200 --> 00:09:37,279
we were able to find some really really

264
00:09:37,279 --> 00:09:38,959
interesting targets that we were only

265
00:09:38,959 --> 00:09:40,959
able to identify

266
00:09:40,959 --> 00:09:43,920
by checking those vo's discrepancies

267
00:09:43,920 --> 00:09:46,080
um some of the last things we were able

268
00:09:46,080 --> 00:09:47,519
to do things like pulling titles

269
00:09:47,519 --> 00:09:50,240
responsible response links and status

270
00:09:50,240 --> 00:09:53,519
codes in general just to kind of get a

271
00:09:53,519 --> 00:09:55,680
lay of the land of what was running on

272
00:09:55,680 --> 00:09:56,959
these targets

273
00:09:56,959 --> 00:09:58,640
and that kind of

274
00:09:58,640 --> 00:10:00,000
lent itself easily to doing

275
00:10:00,000 --> 00:10:01,920
fingerprinting so we built another tool

276
00:10:01,920 --> 00:10:04,480
that we'll be releasing as well that you

277
00:10:04,480 --> 00:10:05,279
can

278
00:10:05,279 --> 00:10:07,360
you can supply it a customized

279
00:10:07,360 --> 00:10:08,959
fingerprinting list

280
00:10:08,959 --> 00:10:10,800
and it will check whatever targets you

281
00:10:10,800 --> 00:10:12,320
give it to see if they match those

282
00:10:12,320 --> 00:10:14,880
fingerprints

283
00:10:14,880 --> 00:10:17,360
next time

284
00:10:17,360 --> 00:10:19,040
right so

285
00:10:19,040 --> 00:10:20,720
looking at extracting bug bank targets

286
00:10:20,720 --> 00:10:23,279
right so again 1.4 billion targets a lot

287
00:10:23,279 --> 00:10:24,880
of noise

288
00:10:24,880 --> 00:10:26,560
uh this was repo we were mentioning

289
00:10:26,560 --> 00:10:30,000
earlier uh it's bounty dash targets dash

290
00:10:30,000 --> 00:10:31,279
data

291
00:10:31,279 --> 00:10:32,399
so

292
00:10:32,399 --> 00:10:34,160
that was a huge help in kind of getting

293
00:10:34,160 --> 00:10:37,440
a first start and first crack at what is

294
00:10:37,440 --> 00:10:39,600
an interesting target to look at right

295
00:10:39,600 --> 00:10:41,760
so we filter them at scan time so as

296
00:10:41,760 --> 00:10:43,760
that scan is happening

297
00:10:43,760 --> 00:10:46,000
we're kind of bifurcating the data and

298
00:10:46,000 --> 00:10:48,079
writing them to two different locations

299
00:10:48,079 --> 00:10:49,839
so we don't have to go through the data

300
00:10:49,839 --> 00:10:51,279
afterwards we're just kind of doing it

301
00:10:51,279 --> 00:10:54,240
at the same time it's happening

302
00:10:54,240 --> 00:10:56,800
and this kind of gives us our first set

303
00:10:56,800 --> 00:10:59,120
of targets to provide into further

304
00:10:59,120 --> 00:11:01,839
tooling right

305
00:11:01,920 --> 00:11:04,719
next slide please

306
00:11:05,040 --> 00:11:06,560
sure so again like we said the dipping

307
00:11:06,560 --> 00:11:08,560
obviously multiple scans

308
00:11:08,560 --> 00:11:10,399
whether they're a week or a month across

309
00:11:10,399 --> 00:11:12,399
are obviously going to have a lot of

310
00:11:12,399 --> 00:11:14,560
overlap right when you scan on monday if

311
00:11:14,560 --> 00:11:17,040
you come back and scan a month later

312
00:11:17,040 --> 00:11:19,360
tesla.com is going to be in there twice

313
00:11:19,360 --> 00:11:21,680
that's just a given tesla is not turning

314
00:11:21,680 --> 00:11:24,800
their site off anytime soon hopefully so

315
00:11:24,800 --> 00:11:26,720
you kind of need a way to filter through

316
00:11:26,720 --> 00:11:30,320
that noise of what is an interesting new

317
00:11:30,320 --> 00:11:32,079
target right

318
00:11:32,079 --> 00:11:34,079
and again like i said it's most useful

319
00:11:34,079 --> 00:11:35,760
for finding those newest hosts from the

320
00:11:35,760 --> 00:11:37,839
most recent scan

321
00:11:37,839 --> 00:11:39,279
another fun thing that we were able to

322
00:11:39,279 --> 00:11:42,480
do with the diffing is it allows us to

323
00:11:42,480 --> 00:11:44,640
learn really well

324
00:11:44,640 --> 00:11:46,720
how targets are naming their hosts i

325
00:11:46,720 --> 00:11:49,760
think it was a a really fun message from

326
00:11:49,760 --> 00:11:52,560
ben about a week about a month into this

327
00:11:52,560 --> 00:11:53,839
where he he noticed that he had

328
00:11:53,839 --> 00:11:55,920
basically clocked that the way a certain

329
00:11:55,920 --> 00:11:58,079
bug bounty target had named all of their

330
00:11:58,079 --> 00:12:00,399
hosts so we were actually able to tell

331
00:12:00,399 --> 00:12:02,000
ahead of time

332
00:12:02,000 --> 00:12:04,880
what hosts might be in existence just by

333
00:12:04,880 --> 00:12:07,360
looking at all these diff scan data over

334
00:12:07,360 --> 00:12:10,320
multiple days and weeks we learned a lot

335
00:12:10,320 --> 00:12:12,880
about their organization

336
00:12:12,880 --> 00:12:14,480
and then we're able to do a lot of fun

337
00:12:14,480 --> 00:12:16,240
things with just historically keeping

338
00:12:16,240 --> 00:12:18,639
data so all the data from scans we've

339
00:12:18,639 --> 00:12:20,800
kept archived in cold storage so if ever

340
00:12:20,800 --> 00:12:22,560
we wanted to go back and look at a kind

341
00:12:22,560 --> 00:12:25,279
of large sentiment analysis or just

342
00:12:25,279 --> 00:12:26,959
a large understanding of how an

343
00:12:26,959 --> 00:12:29,360
organization works over the months and

344
00:12:29,360 --> 00:12:31,360
days and maybe a year we have all that

345
00:12:31,360 --> 00:12:32,959
data and we can go back and learn some

346
00:12:32,959 --> 00:12:35,519
really fun things from that

347
00:12:35,519 --> 00:12:37,839
next slide please

348
00:12:37,839 --> 00:12:40,000
right so the next part being virtual

349
00:12:40,000 --> 00:12:42,480
host discrepancies right so after every

350
00:12:42,480 --> 00:12:44,079
scan we take our targets that we're

351
00:12:44,079 --> 00:12:45,600
interested in normally we would run this

352
00:12:45,600 --> 00:12:48,639
against the diff results

353
00:12:48,639 --> 00:12:51,040
is we're looking for the status code and

354
00:12:51,040 --> 00:12:52,959
the response link for three specific

355
00:12:52,959 --> 00:12:55,360
cases right when we hit it by the ip

356
00:12:55,360 --> 00:12:57,920
with a host header of the ip address

357
00:12:57,920 --> 00:13:00,000
when we hit it with the ip with a host

358
00:13:00,000 --> 00:13:02,720
of the domain that it comes back with

359
00:13:02,720 --> 00:13:04,240
and then the ip address with the

360
00:13:04,240 --> 00:13:06,720
hostname of localhost and as an example

361
00:13:06,720 --> 00:13:09,920
here you can see an a aem instance that

362
00:13:09,920 --> 00:13:12,079
we found on a bug bounty target

363
00:13:12,079 --> 00:13:13,360
that happened to be vulnerable to a

364
00:13:13,360 --> 00:13:15,120
couple different things

365
00:13:15,120 --> 00:13:17,120
that you can see very clearly here by

366
00:13:17,120 --> 00:13:19,760
accessing it by an ip only we get a

367
00:13:19,760 --> 00:13:21,040
response

368
00:13:21,040 --> 00:13:23,120
but if we hit it by a

369
00:13:23,120 --> 00:13:25,680
host header of the domain we get nothing

370
00:13:25,680 --> 00:13:26,959
right so that tells us that there's

371
00:13:26,959 --> 00:13:28,320
something there right they don't want

372
00:13:28,320 --> 00:13:30,079
you hitting this or there's something

373
00:13:30,079 --> 00:13:32,480
blocking you from hitting it by a domain

374
00:13:32,480 --> 00:13:34,000
but if you come out and buy a p it's

375
00:13:34,000 --> 00:13:36,880
happy to let you in

376
00:13:37,440 --> 00:13:39,279
and so i'll let ben take it away with

377
00:13:39,279 --> 00:13:40,959
some of the um

378
00:13:40,959 --> 00:13:42,560
some of the kind of mass exploitation

379
00:13:42,560 --> 00:13:44,240
and just exploitation as a whole that we

380
00:13:44,240 --> 00:13:46,399
did with some of these targets

381
00:13:46,399 --> 00:13:48,880
yeah thanks tanner again so we

382
00:13:48,880 --> 00:13:51,199
we're trying to do things at scale and

383
00:13:51,199 --> 00:13:52,480
uh one of the things that we forgot to

384
00:13:52,480 --> 00:13:54,160
mention was we were originally going to

385
00:13:54,160 --> 00:13:56,399
test this thing out for a whole year

386
00:13:56,399 --> 00:13:58,079
uh but unfortunately we cut down our

387
00:13:58,079 --> 00:14:00,720
timeline from a year to two months so we

388
00:14:00,720 --> 00:14:02,160
really have to move quickly because we

389
00:14:02,160 --> 00:14:04,320
want to get this in

390
00:14:04,320 --> 00:14:05,920
you know we wanted to start doing these

391
00:14:05,920 --> 00:14:07,680
talks uh this year instead of waiting

392
00:14:07,680 --> 00:14:09,279
for next year so we cut our timeline we

393
00:14:09,279 --> 00:14:10,720
had to get creative

394
00:14:10,720 --> 00:14:12,959
and mass exploitation was a very very

395
00:14:12,959 --> 00:14:14,399
big part of it

396
00:14:14,399 --> 00:14:16,480
so how does it look like well you have

397
00:14:16,480 --> 00:14:18,399
two options one you can either go after

398
00:14:18,399 --> 00:14:20,399
a single target you must exploit the

399
00:14:20,399 --> 00:14:22,079
same mistakes over and over that you

400
00:14:22,079 --> 00:14:23,360
know they have made

401
00:14:23,360 --> 00:14:25,120
or you go after

402
00:14:25,120 --> 00:14:26,959
multiple targets based on things that

403
00:14:26,959 --> 00:14:28,560
you have seen as a pattern across

404
00:14:28,560 --> 00:14:30,240
multiple organizations if this doesn't

405
00:14:30,240 --> 00:14:31,600
make sense right now i promise it will

406
00:14:31,600 --> 00:14:33,519
make sense by the end of this talk

407
00:14:33,519 --> 00:14:35,040
but let's talk about the single target

408
00:14:35,040 --> 00:14:37,040
so for a single target you have to be

409
00:14:37,040 --> 00:14:38,800
pretty much based on what you already

410
00:14:38,800 --> 00:14:41,519
know so if you know where the deployment

411
00:14:41,519 --> 00:14:43,279
process is like

412
00:14:43,279 --> 00:14:45,120
how do they name the apis where they

413
00:14:45,120 --> 00:14:46,240
store it

414
00:14:46,240 --> 00:14:48,399
where are the docs stored and what are

415
00:14:48,399 --> 00:14:50,320
the internal corporate sites so if you

416
00:14:50,320 --> 00:14:51,760
not have that information you do your

417
00:14:51,760 --> 00:14:53,519
you know basic recon you gather this

418
00:14:53,519 --> 00:14:54,720
information

419
00:14:54,720 --> 00:14:58,000
it makes it easier to deal with

420
00:14:58,000 --> 00:14:59,680
so as an example

421
00:14:59,680 --> 00:15:01,040
if you are familiar with the verizon

422
00:15:01,040 --> 00:15:03,360
media bug bounty and you've watched my

423
00:15:03,360 --> 00:15:05,440
streams online you can tell that they're

424
00:15:05,440 --> 00:15:06,959
notoriously

425
00:15:06,959 --> 00:15:09,120
very well known for leaving api

426
00:15:09,120 --> 00:15:10,959
documentation behind

427
00:15:10,959 --> 00:15:13,760
and to have this port 4443

428
00:15:13,760 --> 00:15:15,680
that is very very interesting and a lot

429
00:15:15,680 --> 00:15:17,680
of times it has some really really juicy

430
00:15:17,680 --> 00:15:20,560
apis so we knew all this data and we

431
00:15:20,560 --> 00:15:22,320
already knew all these things existed

432
00:15:22,320 --> 00:15:24,160
but we just had to figure out a way to

433
00:15:24,160 --> 00:15:26,480
access them across every

434
00:15:26,480 --> 00:15:29,759
single yahoo.com or verizon media domain

435
00:15:29,759 --> 00:15:31,120
and we'll talk about how we did that in

436
00:15:31,120 --> 00:15:32,959
a little bit

437
00:15:32,959 --> 00:15:34,160
but then there's a second thing where

438
00:15:34,160 --> 00:15:36,639
you want to mass exploit multiple

439
00:15:36,639 --> 00:15:38,720
targets you know what i call the

440
00:15:38,720 --> 00:15:41,360
display and prey so you realize that

441
00:15:41,360 --> 00:15:43,440
there are mistakes that are made

442
00:15:43,440 --> 00:15:46,000
regularly by developers or

443
00:15:46,000 --> 00:15:48,000
folks that are behind these assets and

444
00:15:48,000 --> 00:15:50,480
you pretty much shift your focus to

445
00:15:50,480 --> 00:15:52,959
things like non-vulnerabilities

446
00:15:52,959 --> 00:15:54,880
how you focus on things like spring boot

447
00:15:54,880 --> 00:15:57,440
jolokia you look for api docs because

448
00:15:57,440 --> 00:15:58,560
you know you know everyone's going to

449
00:15:58,560 --> 00:16:01,360
use swag or application model uh you

450
00:16:01,360 --> 00:16:02,800
know again you look for sensitive and

451
00:16:02,800 --> 00:16:05,600
internal tools that were supposed to be

452
00:16:05,600 --> 00:16:07,360
internally hosted and accessible where

453
00:16:07,360 --> 00:16:08,800
they're not accessible by the domain

454
00:16:08,800 --> 00:16:10,399
directly but if you hit it with the ip

455
00:16:10,399 --> 00:16:12,800
address it may give you access to that

456
00:16:12,800 --> 00:16:15,600
github git lab jenkins or jira instance

457
00:16:15,600 --> 00:16:18,000
so we keep all that in mind but still

458
00:16:18,000 --> 00:16:19,759
we have to figure out how to identify

459
00:16:19,759 --> 00:16:22,000
them and proper identification is a huge

460
00:16:22,000 --> 00:16:23,759
huge part of this entire thing if you're

461
00:16:23,759 --> 00:16:25,759
not doing this properly then you're

462
00:16:25,759 --> 00:16:28,959
going to be always a step behind because

463
00:16:28,959 --> 00:16:30,160
at this point you're dealing with a lot

464
00:16:30,160 --> 00:16:32,000
of false positives

465
00:16:32,000 --> 00:16:34,720
so how does that work well let's uh

466
00:16:34,720 --> 00:16:36,399
let's figure out what we want to work on

467
00:16:36,399 --> 00:16:38,560
first what are you going after

468
00:16:38,560 --> 00:16:40,720
understand what that thing you're going

469
00:16:40,720 --> 00:16:43,199
after looks like what makes it unique if

470
00:16:43,199 --> 00:16:45,600
you're going after graphql what makes

471
00:16:45,600 --> 00:16:47,519
graphql unique how do you identify it

472
00:16:47,519 --> 00:16:49,279
how do you fingerprint for it if you're

473
00:16:49,279 --> 00:16:51,759
looking for swagger documentation same

474
00:16:51,759 --> 00:16:54,720
thing grafana springboot all that stuff

475
00:16:54,720 --> 00:16:57,040
make yourself familiar with all those

476
00:16:57,040 --> 00:16:59,199
uh different things that

477
00:16:59,199 --> 00:17:01,440
make these applications so response

478
00:17:01,440 --> 00:17:03,519
headers response body a specific

479
00:17:03,519 --> 00:17:05,760
endpoint this could be a fave icon it

480
00:17:05,760 --> 00:17:06,799
could be

481
00:17:06,799 --> 00:17:09,119
a particular endpoint an api endpoint a

482
00:17:09,119 --> 00:17:11,359
login page and so on

483
00:17:11,359 --> 00:17:13,599
so let's talk about some examples if you

484
00:17:13,599 --> 00:17:16,400
are looking for swagger swagger has a

485
00:17:16,400 --> 00:17:18,240
swagger resources endpoint that if you

486
00:17:18,240 --> 00:17:20,959
hit it it will tell you where they are

487
00:17:20,959 --> 00:17:23,679
holding the documentation and it also

488
00:17:23,679 --> 00:17:25,599
has a keyword in there if you look it

489
00:17:25,599 --> 00:17:27,839
says swagger version and it says the

490
00:17:27,839 --> 00:17:29,679
version for it so

491
00:17:29,679 --> 00:17:32,320
in other words if i hit swagger and if i

492
00:17:32,320 --> 00:17:34,000
saw if i hit swagger's

493
00:17:34,000 --> 00:17:35,280
resources

494
00:17:35,280 --> 00:17:37,520
and it has the word swagger version in

495
00:17:37,520 --> 00:17:40,480
it that tells me i have api docs for

496
00:17:40,480 --> 00:17:42,559
that particular website

497
00:17:42,559 --> 00:17:44,640
another example of it is if you just hit

498
00:17:44,640 --> 00:17:46,960
swagger api docs where the actual api

499
00:17:46,960 --> 00:17:48,960
documentation are you want to look for

500
00:17:48,960 --> 00:17:50,720
the keyword base path because they have

501
00:17:50,720 --> 00:17:53,200
to by default specify where

502
00:17:53,200 --> 00:17:55,679
the base path of the api is and that's

503
00:17:55,679 --> 00:17:57,760
something that you can also go after and

504
00:17:57,760 --> 00:17:59,600
look for where you're

505
00:17:59,600 --> 00:18:02,960
searching for these things in mass

506
00:18:02,960 --> 00:18:05,120
and of course last but not least graphql

507
00:18:05,120 --> 00:18:08,080
if you ever hit graphql slash graph ul

508
00:18:08,080 --> 00:18:09,520
and i want to say in almost every

509
00:18:09,520 --> 00:18:11,360
instance i couldn't be wrong but almost

510
00:18:11,360 --> 00:18:13,840
every instance that i have seen so far

511
00:18:13,840 --> 00:18:16,799
it will return a 400 bad request and it

512
00:18:16,799 --> 00:18:18,720
will also tell you that the get query is

513
00:18:18,720 --> 00:18:21,120
missing

514
00:18:21,280 --> 00:18:23,039
so again if you wanted to look for

515
00:18:23,039 --> 00:18:24,320
graphql you would have to look for the

516
00:18:24,320 --> 00:18:26,480
get query missing in return and make

517
00:18:26,480 --> 00:18:28,480
sure that the response code

518
00:18:28,480 --> 00:18:32,799
is a 400 to avoid any false positives

519
00:18:32,799 --> 00:18:34,000
and if you're looking for things like

520
00:18:34,000 --> 00:18:35,679
arfana gitlab they're all that's the

521
00:18:35,679 --> 00:18:37,600
same way if for grafana's instance if

522
00:18:37,600 --> 00:18:38,960
you hit slash

523
00:18:38,960 --> 00:18:42,000
it's going to send you to login

524
00:18:42,000 --> 00:18:43,360
and it's going to have the keyword

525
00:18:43,360 --> 00:18:45,679
grafana in there and also there is a

526
00:18:45,679 --> 00:18:48,640
grafana logo as an svg file that you can

527
00:18:48,640 --> 00:18:50,720
always hit and see if it's there

528
00:18:50,720 --> 00:18:52,400
to make sure this is an actual grafana

529
00:18:52,400 --> 00:18:54,480
instance but all that is cool you know

530
00:18:54,480 --> 00:18:55,760
we know how to fingerprint for these

531
00:18:55,760 --> 00:18:58,080
things you know we did our we studied a

532
00:18:58,080 --> 00:19:00,000
little bit of what makes these things

533
00:19:00,000 --> 00:19:01,840
unique and what makes them

534
00:19:01,840 --> 00:19:04,240
identifiable and we just wrote scripts

535
00:19:04,240 --> 00:19:06,400
that did it for us

536
00:19:06,400 --> 00:19:08,320
so now that we have all this stuff

537
00:19:08,320 --> 00:19:10,240
what's next we have to use some tools to

538
00:19:10,240 --> 00:19:13,520
be able to exploit these

539
00:19:17,919 --> 00:19:20,880
so we use tools like meg meg is an

540
00:19:20,880 --> 00:19:22,880
absolutely powerful tool written in go

541
00:19:22,880 --> 00:19:25,039
by tom nom nom if you're not familiar

542
00:19:25,039 --> 00:19:28,320
with tom go on github.com tom nom nom

543
00:19:28,320 --> 00:19:30,880
sponsor is github repo and make sure you

544
00:19:30,880 --> 00:19:33,440
use meg if you are doing things at scale

545
00:19:33,440 --> 00:19:35,039
and you don't have the

546
00:19:35,039 --> 00:19:36,960
ability to write your own tools like we

547
00:19:36,960 --> 00:19:39,200
did and this is prior to what we were

548
00:19:39,200 --> 00:19:41,360
building we decided to while we built

549
00:19:41,360 --> 00:19:42,559
our own tooling and we have our

550
00:19:42,559 --> 00:19:44,480
fingerprints let's work with tools that

551
00:19:44,480 --> 00:19:46,799
are already out there and figure out how

552
00:19:46,799 --> 00:19:49,760
we can do this as we go so the way mag

553
00:19:49,760 --> 00:19:51,360
works it allows you to spray a number of

554
00:19:51,360 --> 00:19:54,080
endpoints against a number of hosts and

555
00:19:54,080 --> 00:19:57,120
what it does it saves a response code in

556
00:19:57,120 --> 00:19:59,520
a file called index within a folder

557
00:19:59,520 --> 00:20:02,320
called out so if you go cat out index

558
00:20:02,320 --> 00:20:03,760
this is what the output looks like it

559
00:20:03,760 --> 00:20:05,360
tells you where it's stored

560
00:20:05,360 --> 00:20:07,840
and what the response came back it came

561
00:20:07,840 --> 00:20:10,960
out 302 200 whatever

562
00:20:10,960 --> 00:20:13,200
but also what it does is

563
00:20:13,200 --> 00:20:16,000
it also saves the entire full http

564
00:20:16,000 --> 00:20:17,360
response

565
00:20:17,360 --> 00:20:20,080
in the in another folder within out so

566
00:20:20,080 --> 00:20:23,039
it's out subdomain or the ip address and

567
00:20:23,039 --> 00:20:24,960
it has the entire response so you can

568
00:20:24,960 --> 00:20:26,799
actually read that afterwards to make

569
00:20:26,799 --> 00:20:28,720
sure it's not a false positive so if you

570
00:20:28,720 --> 00:20:30,400
can look when i went after netflix with

571
00:20:30,400 --> 00:20:32,159
all those ip addresses

572
00:20:32,159 --> 00:20:33,840
every single request that i've made

573
00:20:33,840 --> 00:20:36,240
against those ips are saved within its

574
00:20:36,240 --> 00:20:39,760
own file in that folder and out

575
00:20:39,760 --> 00:20:42,480
so what do we do well we get creative i

576
00:20:42,480 --> 00:20:43,679
love bash

577
00:20:43,679 --> 00:20:45,679
and i'm pretty sure this is not the best

578
00:20:45,679 --> 00:20:47,840
solution to

579
00:20:47,840 --> 00:20:49,600
look for it but

580
00:20:49,600 --> 00:20:52,880
we made a bash one liner that would

581
00:20:52,880 --> 00:20:54,559
look for things and tell us if it's

582
00:20:54,559 --> 00:20:55,919
there and i'll explain what it does but

583
00:20:55,919 --> 00:20:58,400
again there's probably a better way to

584
00:20:58,400 --> 00:21:00,080
do this but let's break it down and talk

585
00:21:00,080 --> 00:21:01,280
about what this

586
00:21:01,280 --> 00:21:02,640
one liner does

587
00:21:02,640 --> 00:21:04,159
so the first thing that it does is it

588
00:21:04,159 --> 00:21:06,159
grabs for the response code so i tell it

589
00:21:06,159 --> 00:21:07,360
hey i want you to look for this

590
00:21:07,360 --> 00:21:08,880
particular response code make sure it

591
00:21:08,880 --> 00:21:11,440
came out as 200 400 whatever i'm looking

592
00:21:11,440 --> 00:21:12,720
for

593
00:21:12,720 --> 00:21:14,840
and then i want you to tell me

594
00:21:14,840 --> 00:21:18,960
if sorry i want you to tell me if

595
00:21:18,960 --> 00:21:21,200
the output of the last command

596
00:21:21,200 --> 00:21:24,960
and can i restart that again

597
00:21:28,320 --> 00:21:31,720
your one sec

598
00:21:32,720 --> 00:21:34,640
okay got it

599
00:21:34,640 --> 00:21:36,960
so what it does is it looks for it grabs

600
00:21:36,960 --> 00:21:39,120
for the response code so if i wanted to

601
00:21:39,120 --> 00:21:40,320
look for something that's returned as

602
00:21:40,320 --> 00:21:42,880
200 it's going to tell me that and then

603
00:21:42,880 --> 00:21:45,039
it's the next one is going to cut it out

604
00:21:45,039 --> 00:21:47,280
and just print out the location of the

605
00:21:47,280 --> 00:21:50,159
file so if it came back as 200 tell me

606
00:21:50,159 --> 00:21:52,240
the location where you saved the output

607
00:21:52,240 --> 00:21:53,520
of this thing

608
00:21:53,520 --> 00:21:56,240
and we're going to make sure it's unique

609
00:21:56,240 --> 00:21:58,480
and then we're going to feed it back to

610
00:21:58,480 --> 00:22:00,640
an xrx and tell it to hey i want you to

611
00:22:00,640 --> 00:22:02,720
get through all those files and look for

612
00:22:02,720 --> 00:22:04,960
this particular fingerprint tell me if

613
00:22:04,960 --> 00:22:07,039
the keyword that i'm looking for came

614
00:22:07,039 --> 00:22:09,280
back in the response that makes saved

615
00:22:09,280 --> 00:22:11,360
within the out folder and then i want

616
00:22:11,360 --> 00:22:14,799
you to cut it up again and just send me

617
00:22:14,799 --> 00:22:17,919
the ip address where this was found

618
00:22:17,919 --> 00:22:20,000
and i made this whole thing the one

619
00:22:20,000 --> 00:22:22,880
liner that i showed i put that into a

620
00:22:22,880 --> 00:22:24,960
bin search so every time i type in

621
00:22:24,960 --> 00:22:28,799
search i give it the two arguments and

622
00:22:28,799 --> 00:22:30,640
it spits out every ip address that

623
00:22:30,640 --> 00:22:32,080
matched that fingerprint with that

624
00:22:32,080 --> 00:22:34,080
specific status code and i will give

625
00:22:34,080 --> 00:22:36,320
some examples of that here in a sec so

626
00:22:36,320 --> 00:22:38,159
now we're going to talk about how we use

627
00:22:38,159 --> 00:22:40,799
that to eliminate false positives

628
00:22:40,799 --> 00:22:43,840
so first i say meg i want you to

629
00:22:43,840 --> 00:22:46,640
concurrently run it in 70 times and look

630
00:22:46,640 --> 00:22:49,120
for swagger resources within all the

631
00:22:49,120 --> 00:22:51,520
hosts that i have in host.txt

632
00:22:51,520 --> 00:22:53,440
and we already know from previous slides

633
00:22:53,440 --> 00:22:54,799
that we're looking for the keyword

634
00:22:54,799 --> 00:22:56,400
swagger version

635
00:22:56,400 --> 00:22:58,240
and we want to make sure it comes back

636
00:22:58,240 --> 00:23:00,000
as 200.

637
00:23:00,000 --> 00:23:02,000
and if you can see i know it's blocked

638
00:23:02,000 --> 00:23:03,600
off but all the things that are under

639
00:23:03,600 --> 00:23:05,600
that white box are ip addresses that

640
00:23:05,600 --> 00:23:07,760
came back with the keyword swagger

641
00:23:07,760 --> 00:23:11,679
version and slash swacker resources

642
00:23:11,679 --> 00:23:13,679
same thing if you did with graphql i

643
00:23:13,679 --> 00:23:17,280
said search for a 400 status code and

644
00:23:17,280 --> 00:23:19,760
the keyword missing cut it up and just

645
00:23:19,760 --> 00:23:21,280
gave me the ip addresses and every

646
00:23:21,280 --> 00:23:23,280
single one of those had graphql on them

647
00:23:23,280 --> 00:23:25,440
and did some really fun stuff with it

648
00:23:25,440 --> 00:23:27,440
that uh gave us leads or potential

649
00:23:27,440 --> 00:23:29,360
vulnerabilities

650
00:23:29,360 --> 00:23:31,039
but all that is fun

651
00:23:31,039 --> 00:23:33,679
but it doesn't scale with the automation

652
00:23:33,679 --> 00:23:35,280
that me and tanner were working on

653
00:23:35,280 --> 00:23:37,039
especially going after billions of

654
00:23:37,039 --> 00:23:38,960
targets and you know hundreds of

655
00:23:38,960 --> 00:23:40,640
thousands of ipads is through the bug

656
00:23:40,640 --> 00:23:43,039
bounty cycles so i'll let tanner quickly

657
00:23:43,039 --> 00:23:44,960
explain how we did this with go

658
00:23:44,960 --> 00:23:48,240
fingerprint and why we did it

659
00:23:48,240 --> 00:23:50,960
awesome thanks ben so right so you're

660
00:23:50,960 --> 00:23:52,960
saying we needed something that did much

661
00:23:52,960 --> 00:23:54,400
the same thing but that was kind of

662
00:23:54,400 --> 00:23:56,559
hands off for us that we could just feed

663
00:23:56,559 --> 00:23:57,760
in

664
00:23:57,760 --> 00:23:59,760
our scan data to so that's kind of where

665
00:23:59,760 --> 00:24:02,000
go fingerprint came from

666
00:24:02,000 --> 00:24:03,679
very similar to a lot of other

667
00:24:03,679 --> 00:24:05,600
fingerprinting tools it's there's really

668
00:24:05,600 --> 00:24:07,360
only so many ways to make a tool like

669
00:24:07,360 --> 00:24:08,480
that

670
00:24:08,480 --> 00:24:10,080
basically what it does you give it a

671
00:24:10,080 --> 00:24:13,760
json list of a specific fingerprint or

672
00:24:13,760 --> 00:24:16,080
fingerprints multiple if you'd like and

673
00:24:16,080 --> 00:24:18,240
the type of just a name for it that you

674
00:24:18,240 --> 00:24:19,919
can identify when it comes back in

675
00:24:19,919 --> 00:24:21,279
results

676
00:24:21,279 --> 00:24:23,840
so basically what it does is

677
00:24:23,840 --> 00:24:27,200
as our scan is complete we have a setup

678
00:24:27,200 --> 00:24:29,440
where as the scanned data comes in it's

679
00:24:29,440 --> 00:24:32,559
fed into go fingerprint which then uses

680
00:24:32,559 --> 00:24:35,200
a really great go library called kali

681
00:24:35,200 --> 00:24:38,000
c-o-l-l-y which is a

682
00:24:38,000 --> 00:24:38,720
go

683
00:24:38,720 --> 00:24:39,919
native

684
00:24:39,919 --> 00:24:41,360
built

685
00:24:41,360 --> 00:24:44,880
html crawler so it will take a url

686
00:24:44,880 --> 00:24:46,480
crawl the data and then you can build

687
00:24:46,480 --> 00:24:47,919
all these

688
00:24:47,919 --> 00:24:50,240
iterators on those results to pick out

689
00:24:50,240 --> 00:24:51,520
different things you want out of the

690
00:24:51,520 --> 00:24:53,760
html data so that's basically what it

691
00:24:53,760 --> 00:24:55,600
does is it takes our list of targets

692
00:24:55,600 --> 00:24:57,520
walks down the html looking for the

693
00:24:57,520 --> 00:25:00,159
fingerprints that we have and then sends

694
00:25:00,159 --> 00:25:02,720
that back to us

695
00:25:02,720 --> 00:25:04,480
in a couple different ways it writes it

696
00:25:04,480 --> 00:25:06,240
to a file and we also have some kind of

697
00:25:06,240 --> 00:25:09,679
custom discord hooks for letting us know

698
00:25:09,679 --> 00:25:12,880
a little bit easier that way

699
00:25:13,279 --> 00:25:15,520
now time for the fun stuff uh real life

700
00:25:15,520 --> 00:25:19,120
examples and i have a few of them and um

701
00:25:19,120 --> 00:25:20,880
some of them are very very

702
00:25:20,880 --> 00:25:23,039
easy easy to catch because of the data

703
00:25:23,039 --> 00:25:25,120
we had and some of them were strictly

704
00:25:25,120 --> 00:25:27,679
based on the fingerprints that we did

705
00:25:27,679 --> 00:25:30,080
so the first one is asset monitoring

706
00:25:30,080 --> 00:25:32,080
like tanner said we figured out this

707
00:25:32,080 --> 00:25:33,600
company was

708
00:25:33,600 --> 00:25:35,360
naming things a particular way and they

709
00:25:35,360 --> 00:25:37,440
were deploying things a particular way

710
00:25:37,440 --> 00:25:39,440
which by default would give us a

711
00:25:39,440 --> 00:25:42,320
vulnerability if we caught it in time so

712
00:25:42,320 --> 00:25:44,159
what does it look like well

713
00:25:44,159 --> 00:25:46,320
about a year ago uh it's a big shout out

714
00:25:46,320 --> 00:25:47,279
to

715
00:25:47,279 --> 00:25:48,640
space raccoon if you're watching this

716
00:25:48,640 --> 00:25:50,400
eugene this one's for you

717
00:25:50,400 --> 00:25:53,200
me and this uh we found this xss

718
00:25:53,200 --> 00:25:56,240
it was on this site.com dev site.com

719
00:25:56,240 --> 00:25:58,400
demo app demo app html and some

720
00:25:58,400 --> 00:26:00,240
parameter had xss

721
00:26:00,240 --> 00:26:01,760
reported a year ago

722
00:26:01,760 --> 00:26:04,559
never thought of it again but naturally

723
00:26:04,559 --> 00:26:06,880
as a habit i took that endpoint of demo

724
00:26:06,880 --> 00:26:08,720
app demo app html and threw it in my

725
00:26:08,720 --> 00:26:10,880
word list just in case it comes up ever

726
00:26:10,880 --> 00:26:12,000
again

727
00:26:12,000 --> 00:26:13,760
well it did come up

728
00:26:13,760 --> 00:26:15,360
at some point it came up when i was just

729
00:26:15,360 --> 00:26:17,760
hacking on random stuff on the site

730
00:26:17,760 --> 00:26:19,520
and i realized that it's coming up more

731
00:26:19,520 --> 00:26:23,120
often than i expected it so with tanner

732
00:26:23,120 --> 00:26:24,799
who decided to feed this thing into our

733
00:26:24,799 --> 00:26:26,240
tool and say hey

734
00:26:26,240 --> 00:26:28,240
look for this demo app see if the

735
00:26:28,240 --> 00:26:29,520
fingerprint and the fingerprint we had

736
00:26:29,520 --> 00:26:31,440
was a particular javascript file then

737
00:26:31,440 --> 00:26:33,440
the way the javascript file was named it

738
00:26:33,440 --> 00:26:36,000
would come up every time in the html we

739
00:26:36,000 --> 00:26:38,240
looked for it and every time we saw a

740
00:26:38,240 --> 00:26:41,039
new asset go up on this company we would

741
00:26:41,039 --> 00:26:42,880
run it against this endpoint to get an

742
00:26:42,880 --> 00:26:45,039
xss report it and i think we caught

743
00:26:45,039 --> 00:26:47,279
about six times at least the last time

744
00:26:47,279 --> 00:26:49,360
that we looked into it we found it six

745
00:26:49,360 --> 00:26:52,080
times and those were easy bugs to report

746
00:26:52,080 --> 00:26:54,400
just by having the data that's

747
00:26:54,400 --> 00:26:57,279
already in front of us

748
00:26:57,279 --> 00:26:59,200
hunting for cves is another really cool

749
00:26:59,200 --> 00:27:00,880
thing to do with uh

750
00:27:00,880 --> 00:27:02,559
being in the cloud because a lot of

751
00:27:02,559 --> 00:27:04,240
times that's where they deploy them they

752
00:27:04,240 --> 00:27:05,760
think it's not accessible because the

753
00:27:05,760 --> 00:27:07,200
domain doesn't work but you can hit it

754
00:27:07,200 --> 00:27:08,559
with ip again

755
00:27:08,559 --> 00:27:10,159
um i'm not going to talk about the

756
00:27:10,159 --> 00:27:11,279
technical

757
00:27:11,279 --> 00:27:13,440
information on how the cve with grafana

758
00:27:13,440 --> 00:27:15,919
works uh this is an unauthenticated ssrf

759
00:27:15,919 --> 00:27:18,080
ingram fauna if you want to watch this

760
00:27:18,080 --> 00:27:19,760
talk you're more than welcome to look it

761
00:27:19,760 --> 00:27:22,240
up uh ryan raider justin garner did a

762
00:27:22,240 --> 00:27:23,440
talk for

763
00:27:23,440 --> 00:27:25,520
how he found this exploit at activity

764
00:27:25,520 --> 00:27:27,919
con with hacker one i highly recommend

765
00:27:27,919 --> 00:27:29,600
watching it if you want to know how it

766
00:27:29,600 --> 00:27:31,200
works i'm not going to cover it at all

767
00:27:31,200 --> 00:27:32,399
on these slides

768
00:27:32,399 --> 00:27:34,559
but again the way we did it um we knew

769
00:27:34,559 --> 00:27:37,120
the fingerprint it's a 302 to login and

770
00:27:37,120 --> 00:27:39,039
it's going to have the keyword grafana

771
00:27:39,039 --> 00:27:41,840
in that instance and the funny thing was

772
00:27:41,840 --> 00:27:44,159
um we also caught on halfway through

773
00:27:44,159 --> 00:27:46,240
that people love to just

774
00:27:46,240 --> 00:27:48,559
deploy grafana on port 3000

775
00:27:48,559 --> 00:27:50,399
that was a default port for it if it's

776
00:27:50,399 --> 00:27:52,480
not on 80 it's on 3 000 in a lot of

777
00:27:52,480 --> 00:27:55,279
cases so we ran that fingerprint across

778
00:27:55,279 --> 00:27:56,640
all these ports

779
00:27:56,640 --> 00:28:00,159
and found a lot of targets that were

780
00:28:00,159 --> 00:28:03,039
on port 3000 throughout our bounty table

781
00:28:03,039 --> 00:28:05,919
and had the keyword grafana in them or

782
00:28:05,919 --> 00:28:08,320
we had login with meg or through what

783
00:28:08,320 --> 00:28:10,960
tano had ran and we made sure these were

784
00:28:10,960 --> 00:28:13,840
fauna instances so once we had this

785
00:28:13,840 --> 00:28:15,360
the exploitation this is where it get

786
00:28:15,360 --> 00:28:17,360
this is where it gets fun so we pulled

787
00:28:17,360 --> 00:28:18,799
everything in three thousand that was in

788
00:28:18,799 --> 00:28:20,399
our bounty table this is what a bounty

789
00:28:20,399 --> 00:28:22,480
targets that we were monitoring and we

790
00:28:22,480 --> 00:28:23,600
pulled out everything that could have

791
00:28:23,600 --> 00:28:25,919
been grafana we ran it through meg we

792
00:28:25,919 --> 00:28:27,200
said hey look for everything that comes

793
00:28:27,200 --> 00:28:29,679
out as 200. make sure it has a keyword

794
00:28:29,679 --> 00:28:31,840
grafana give us all the possible

795
00:28:31,840 --> 00:28:33,840
instances

796
00:28:33,840 --> 00:28:35,520
and we even got a little bit more

797
00:28:35,520 --> 00:28:38,640
creative we skipped the login

798
00:28:38,640 --> 00:28:40,480
portion of it and we straight up gave it

799
00:28:40,480 --> 00:28:44,000
a poc and said hey this is on aws hit

800
00:28:44,000 --> 00:28:47,039
the ipl just for the aws metadata hit

801
00:28:47,039 --> 00:28:49,919
latest and tell me if if you hit this

802
00:28:49,919 --> 00:28:51,600
particular poc

803
00:28:51,600 --> 00:28:54,720
and if you actually have an ssrf and the

804
00:28:54,720 --> 00:28:56,960
keyword metadata comes up let me know

805
00:28:56,960 --> 00:28:58,880
because if that does come up that's a

806
00:28:58,880 --> 00:29:00,720
vulnerable instance because when you

807
00:29:00,720 --> 00:29:03,039
we're abusing an ssrf to hit an internal

808
00:29:03,039 --> 00:29:05,840
ip address that's deployed on aws by

809
00:29:05,840 --> 00:29:09,200
default and if you hit latest metadata

810
00:29:09,200 --> 00:29:10,880
is a part of that it's a folder within

811
00:29:10,880 --> 00:29:12,799
latest so if it came back with all these

812
00:29:12,799 --> 00:29:14,880
different ip addresses it would tell us

813
00:29:14,880 --> 00:29:16,799
hey you have found a vulnerability

814
00:29:16,799 --> 00:29:18,559
already we don't have to verify anything

815
00:29:18,559 --> 00:29:19,679
else

816
00:29:19,679 --> 00:29:21,360
and

817
00:29:21,360 --> 00:29:23,679
that led on to getting some really cool

818
00:29:23,679 --> 00:29:24,880
bounties

819
00:29:24,880 --> 00:29:26,399
again i kind of like went over this

820
00:29:26,399 --> 00:29:28,559
already a little bit fast but uh with

821
00:29:28,559 --> 00:29:30,799
when we designed the go fingerprint tool

822
00:29:30,799 --> 00:29:32,480
we no longer really had to run it

823
00:29:32,480 --> 00:29:35,520
through meg we just monitored for

824
00:29:35,520 --> 00:29:37,360
assets that were tagged as grafana

825
00:29:37,360 --> 00:29:38,320
because

826
00:29:38,320 --> 00:29:40,480
um the tool that tanner had ran already

827
00:29:40,480 --> 00:29:42,640
was already looking for these

828
00:29:42,640 --> 00:29:44,000
fingerprints

829
00:29:44,000 --> 00:29:46,080
so this one was one of the funnest ones

830
00:29:46,080 --> 00:29:48,080
this is a huge huge

831
00:29:48,080 --> 00:29:50,799
mega uber corporation it's not uber i'm

832
00:29:50,799 --> 00:29:54,000
just saying it's a mega big corporation

833
00:29:54,000 --> 00:29:55,440
and they were very surprised that we

834
00:29:55,440 --> 00:29:57,440
found so many instances of it and this

835
00:29:57,440 --> 00:29:59,039
is because again we caught on to the

836
00:29:59,039 --> 00:30:01,360
poor 3000 we went after every single

837
00:30:01,360 --> 00:30:02,799
asset of theirs that was running

838
00:30:02,799 --> 00:30:04,799
something on port 3000

839
00:30:04,799 --> 00:30:07,520
and i want to say roughly about 12 or 11

840
00:30:07,520 --> 00:30:08,799
different instances of this were

841
00:30:08,799 --> 00:30:11,520
vulnerable for a single company

842
00:30:11,520 --> 00:30:15,200
and that just kept on giving and giving

843
00:30:15,200 --> 00:30:17,600
so that gave us a ton of good bounties

844
00:30:17,600 --> 00:30:20,720
just by going after this particular cve

845
00:30:20,720 --> 00:30:23,440
these are all again the same cvs on ssrf

846
00:30:23,440 --> 00:30:26,000
with grafana instances that are publicly

847
00:30:26,000 --> 00:30:27,279
accessible

848
00:30:27,279 --> 00:30:29,679
but there are some uh take uh there are

849
00:30:29,679 --> 00:30:32,399
some takeaways that you have to also

850
00:30:32,399 --> 00:30:34,720
understand when you're hunting for cves

851
00:30:34,720 --> 00:30:36,320
you don't want to report them too early

852
00:30:36,320 --> 00:30:38,159
make sure you give the company

853
00:30:38,159 --> 00:30:40,320
enough time to patch these things

854
00:30:40,320 --> 00:30:41,120
because they're going to say it's a

855
00:30:41,120 --> 00:30:42,240
duplicate because they already knew

856
00:30:42,240 --> 00:30:44,000
about it you know you haven't given them

857
00:30:44,000 --> 00:30:46,000
enough time it's an old day

858
00:30:46,000 --> 00:30:47,679
just be nice play nice if you don't get

859
00:30:47,679 --> 00:30:50,080
paid walk away you probably did it too

860
00:30:50,080 --> 00:30:51,679
early

861
00:30:51,679 --> 00:30:53,200
and then the biggest thing is just

862
00:30:53,200 --> 00:30:55,360
because a company has multiple instances

863
00:30:55,360 --> 00:30:57,039
of a vulnerable app

864
00:30:57,039 --> 00:30:58,399
doesn't mean they're going to give you

865
00:30:58,399 --> 00:31:00,480
multiple bounties but i want to say 9

866
00:31:00,480 --> 00:31:02,880
out of 10 cases we ended up getting a

867
00:31:02,880 --> 00:31:04,799
higher reward or bonus because we went

868
00:31:04,799 --> 00:31:06,399
the extra step of

869
00:31:06,399 --> 00:31:08,480
identifying additional vulnerable

870
00:31:08,480 --> 00:31:10,960
instances

871
00:31:11,200 --> 00:31:13,679
we also went after

872
00:31:13,679 --> 00:31:15,360
more stuff than just that we at some

873
00:31:15,360 --> 00:31:16,480
point sprayed

874
00:31:16,480 --> 00:31:19,279
admin across all of our targets just to

875
00:31:19,279 --> 00:31:21,760
see if anything comes back that says

876
00:31:21,760 --> 00:31:23,600
there is a login on this page you know

877
00:31:23,600 --> 00:31:25,679
it's redirecting to login it's showing

878
00:31:25,679 --> 00:31:27,360
the word login it's asking for a

879
00:31:27,360 --> 00:31:29,360
username and password none of them

880
00:31:29,360 --> 00:31:32,080
really looked interesting

881
00:31:32,080 --> 00:31:34,159
except this one instance where it was

882
00:31:34,159 --> 00:31:36,720
redirecting us to this

883
00:31:36,720 --> 00:31:38,240
mgmt

884
00:31:38,240 --> 00:31:40,640
some path log in jsp

885
00:31:40,640 --> 00:31:42,480
and the mgmt to me sounded like

886
00:31:42,480 --> 00:31:44,799
management maybe who knows but when we

887
00:31:44,799 --> 00:31:48,559
hit it it turned out that there is a

888
00:31:48,559 --> 00:31:50,960
admin site and the credentials were

889
00:31:50,960 --> 00:31:53,760
actually admin admin and that got us

890
00:31:53,760 --> 00:31:57,039
logged in but again that is not a lot of

891
00:31:57,039 --> 00:31:59,440
fun because

892
00:31:59,440 --> 00:32:01,600
it's not really it's not that cool you

893
00:32:01,600 --> 00:32:03,360
found an admin login they messed up and

894
00:32:03,360 --> 00:32:04,960
they had um

895
00:32:04,960 --> 00:32:07,519
the admin admin as their password

896
00:32:07,519 --> 00:32:08,640
but

897
00:32:08,640 --> 00:32:10,159
we want to get a step further we knew

898
00:32:10,159 --> 00:32:12,559
there's impact here already but we want

899
00:32:12,559 --> 00:32:14,640
to also see if this mistake was made

900
00:32:14,640 --> 00:32:16,720
multiple times across this entire

901
00:32:16,720 --> 00:32:18,000
organization

902
00:32:18,000 --> 00:32:20,000
and see if we can find more of them so

903
00:32:20,000 --> 00:32:21,600
let's talk about this

904
00:32:21,600 --> 00:32:24,159
the url for the site looks like

905
00:32:24,159 --> 00:32:26,320
wxyz which is the app name that we

906
00:32:26,320 --> 00:32:28,640
redacted the permutation could be a

907
00:32:28,640 --> 00:32:30,240
different platform if they were playing

908
00:32:30,240 --> 00:32:34,320
on ios android whatever else

909
00:32:34,320 --> 00:32:36,640
and then i wish i could disclose this

910
00:32:36,640 --> 00:32:38,320
target is the website that we were going

911
00:32:38,320 --> 00:32:41,039
after that always stayed the same and

912
00:32:41,039 --> 00:32:44,240
the slash thing is after you would

913
00:32:44,240 --> 00:32:45,279
log in

914
00:32:45,279 --> 00:32:46,880
it would send you to that end it was

915
00:32:46,880 --> 00:32:49,440
send you to that slash whatever app and

916
00:32:49,440 --> 00:32:51,519
this was the core app wasn't just name

917
00:32:51,519 --> 00:32:53,919
core app it had a very unique name

918
00:32:53,919 --> 00:32:56,240
so it would show us so that was the that

919
00:32:56,240 --> 00:32:58,480
was what we use for a fingerprint

920
00:32:58,480 --> 00:32:59,919
so what we ended up doing is we went

921
00:32:59,919 --> 00:33:01,360
back to our target

922
00:33:01,360 --> 00:33:03,679
uh so i went back to our database and we

923
00:33:03,679 --> 00:33:05,360
looked for that app name the xyz

924
00:33:05,360 --> 00:33:07,360
whatever it was and we said give us

925
00:33:07,360 --> 00:33:09,120
everything under this domain that we're

926
00:33:09,120 --> 00:33:11,919
going after that has a xyz app name

927
00:33:11,919 --> 00:33:13,039
within it

928
00:33:13,039 --> 00:33:14,799
and we fit it to meg

929
00:33:14,799 --> 00:33:17,039
and we were able to identify 15 hosts

930
00:33:17,039 --> 00:33:19,760
that had the same exact login page as

931
00:33:19,760 --> 00:33:22,000
this one and at approximately i want to

932
00:33:22,000 --> 00:33:24,320
say 12 of them if as formula remember

933
00:33:24,320 --> 00:33:26,320
allowed us to use the admin admin

934
00:33:26,320 --> 00:33:28,720
credentials to login and they each had

935
00:33:28,720 --> 00:33:31,519
access to user data piis and from what

936
00:33:31,519 --> 00:33:33,200
they security team told us at this

937
00:33:33,200 --> 00:33:34,320
company

938
00:33:34,320 --> 00:33:36,000
it was that there was about a million

939
00:33:36,000 --> 00:33:39,120
users data on there

940
00:33:39,120 --> 00:33:41,120
and um based on the screenshot that i

941
00:33:41,120 --> 00:33:43,279
showed earlier there were some server

942
00:33:43,279 --> 00:33:44,720
updating things we could have done so

943
00:33:44,720 --> 00:33:46,880
probably had rce by design we didn't

944
00:33:46,880 --> 00:33:48,960
push it just because we already felt

945
00:33:48,960 --> 00:33:50,320
that we've pushed our luck a little bit

946
00:33:50,320 --> 00:33:52,480
too much by already logging into an

947
00:33:52,480 --> 00:33:54,559
admin panel in a production environment

948
00:33:54,559 --> 00:33:56,720
with a million users

949
00:33:56,720 --> 00:33:58,480
data being on the line so we reported

950
00:33:58,480 --> 00:34:00,399
immediately and that got us a bounty as

951
00:34:00,399 --> 00:34:02,080
well

952
00:34:02,080 --> 00:34:04,399
now this is probably one of the most

953
00:34:04,399 --> 00:34:06,640
fun phones that i've worked on this one

954
00:34:06,640 --> 00:34:08,239
allowed us to

955
00:34:08,239 --> 00:34:10,159
get some really really cool data

956
00:34:10,159 --> 00:34:11,760
in this mega corp that unfortunately

957
00:34:11,760 --> 00:34:13,599
came disclosed but gave us access to

958
00:34:13,599 --> 00:34:15,599
some really really cool internal

959
00:34:15,599 --> 00:34:18,599
assets

960
00:34:22,960 --> 00:34:24,960
so based on the spring boots

961
00:34:24,960 --> 00:34:27,119
documentation we know that there are

962
00:34:27,119 --> 00:34:28,800
different endpoints uh do different

963
00:34:28,800 --> 00:34:29,679
things

964
00:34:29,679 --> 00:34:31,119
two of them in particular are very very

965
00:34:31,119 --> 00:34:34,079
important one is the http trace and the

966
00:34:34,079 --> 00:34:35,839
second one is the heap dump the first

967
00:34:35,839 --> 00:34:37,119
one gives you

968
00:34:37,119 --> 00:34:39,359
the exchanged response exchange so if

969
00:34:39,359 --> 00:34:41,440
you make a request if there is something

970
00:34:41,440 --> 00:34:43,918
on there your cookies your headers all

971
00:34:43,918 --> 00:34:46,639
of that is being stored in http trace

972
00:34:46,639 --> 00:34:48,159
and the heap dump is obviously a heap

973
00:34:48,159 --> 00:34:50,239
dump of the applications jvm

974
00:34:50,239 --> 00:34:52,320
but on top of that if you look at the

975
00:34:52,320 --> 00:34:54,639
documentation if you ever hit any of

976
00:34:54,639 --> 00:34:57,040
these endpoints the content type will

977
00:34:57,040 --> 00:34:58,560
always have

978
00:34:58,560 --> 00:35:00,720
boot actuator inside of the header so

979
00:35:00,720 --> 00:35:02,079
for the content type we knew it's going

980
00:35:02,079 --> 00:35:03,839
to say springboard actuator and that's

981
00:35:03,839 --> 00:35:05,760
how we could identify it

982
00:35:05,760 --> 00:35:08,480
if there was a http trace or heapdom

983
00:35:08,480 --> 00:35:10,000
available

984
00:35:10,000 --> 00:35:11,520
well

985
00:35:11,520 --> 00:35:12,880
working with

986
00:35:12,880 --> 00:35:14,160
tanner

987
00:35:14,160 --> 00:35:17,119
zlz and really really really wanted to

988
00:35:17,119 --> 00:35:19,760
own this mega corporation so we went and

989
00:35:19,760 --> 00:35:22,560
dumped every single asset we could uh we

990
00:35:22,560 --> 00:35:24,240
realized that they used this thing

991
00:35:24,240 --> 00:35:26,560
multiple times so we just dumped every

992
00:35:26,560 --> 00:35:29,040
single asset and we spayed http trace

993
00:35:29,040 --> 00:35:30,960
against all their domains

994
00:35:30,960 --> 00:35:33,359
and we came across this http trace

995
00:35:33,359 --> 00:35:35,119
endpoint on a

996
00:35:35,119 --> 00:35:37,520
app we call it like an xyz but the

997
00:35:37,520 --> 00:35:41,280
permutations were xyz internal prod

998
00:35:41,280 --> 00:35:44,640
site.com with an actuator http trace

999
00:35:44,640 --> 00:35:48,160
interesting it's internal and proud cool

1000
00:35:48,160 --> 00:35:50,560
um that gave us some cookies and

1001
00:35:50,560 --> 00:35:52,560
naturally you take those cookies

1002
00:35:52,560 --> 00:35:53,420
and you

1003
00:35:53,420 --> 00:35:54,640
[Music]

1004
00:35:54,640 --> 00:35:56,160
swap them out and you try to log on to

1005
00:35:56,160 --> 00:35:58,000
the application that's on there but

1006
00:35:58,000 --> 00:35:59,440
unfortunately i think that session was

1007
00:35:59,440 --> 00:36:01,040
expired something happened we couldn't

1008
00:36:01,040 --> 00:36:03,200
log in but that's interesting because it

1009
00:36:03,200 --> 00:36:05,359
tells us there's internal prod right so

1010
00:36:05,359 --> 00:36:07,520
we're looking at internal prod

1011
00:36:07,520 --> 00:36:09,920
of this app this version of this app so

1012
00:36:09,920 --> 00:36:12,560
that means there's probably a dev

1013
00:36:12,560 --> 00:36:14,640
and not internal just proud who knows

1014
00:36:14,640 --> 00:36:16,000
like there's obviously other

1015
00:36:16,000 --> 00:36:17,599
permutations of this

1016
00:36:17,599 --> 00:36:20,079
so what do you do at this case well you

1017
00:36:20,079 --> 00:36:21,119
try to play with these other

1018
00:36:21,119 --> 00:36:22,480
permutations we bring back to our

1019
00:36:22,480 --> 00:36:25,599
database we plugged in the keyword for

1020
00:36:25,599 --> 00:36:28,160
the app so xyz and we said hey give us

1021
00:36:28,160 --> 00:36:30,400
every single site that has the xyz app

1022
00:36:30,400 --> 00:36:32,800
name within the site.com and it gave us

1023
00:36:32,800 --> 00:36:34,960
four different permutations one just

1024
00:36:34,960 --> 00:36:35,880
being the

1025
00:36:35,880 --> 00:36:38,240
appname.site.com the next one being the

1026
00:36:38,240 --> 00:36:41,040
app dash internal and then third one

1027
00:36:41,040 --> 00:36:43,920
being the app dash prod and last but not

1028
00:36:43,920 --> 00:36:45,520
least the original one that we found

1029
00:36:45,520 --> 00:36:47,599
that had xyz internal prod within its

1030
00:36:47,599 --> 00:36:48,480
name

1031
00:36:48,480 --> 00:36:49,280
but

1032
00:36:49,280 --> 00:36:51,119
none of these were giving us any good

1033
00:36:51,119 --> 00:36:53,760
data but we knew that actuator http

1034
00:36:53,760 --> 00:36:56,400
trace was available on all of them and

1035
00:36:56,400 --> 00:36:57,839
once we started digging through all of

1036
00:36:57,839 --> 00:36:58,800
them

1037
00:36:58,800 --> 00:37:00,400
we dumped all the data that we had from

1038
00:37:00,400 --> 00:37:03,200
it and we realized people were making

1039
00:37:03,200 --> 00:37:05,599
requests to other folders outside of the

1040
00:37:05,599 --> 00:37:07,280
actuator where we were in so they were

1041
00:37:07,280 --> 00:37:09,920
hitting things like core dash corp

1042
00:37:09,920 --> 00:37:11,760
uh application

1043
00:37:11,760 --> 00:37:14,880
viewer and again xyz services so the app

1044
00:37:14,880 --> 00:37:16,640
name services was a folder that we're

1045
00:37:16,640 --> 00:37:19,680
hitting that also had some stuff in it

1046
00:37:19,680 --> 00:37:22,160
and it turns out that all of those had

1047
00:37:22,160 --> 00:37:24,560
their own instance of the http trace

1048
00:37:24,560 --> 00:37:26,079
that leaked more cookies and more

1049
00:37:26,079 --> 00:37:27,520
endpoints and more information that we

1050
00:37:27,520 --> 00:37:28,720
could have used

1051
00:37:28,720 --> 00:37:31,599
so naturally again you dump every single

1052
00:37:31,599 --> 00:37:34,240
heap dump in every single

1053
00:37:34,240 --> 00:37:36,480
http trace that you can you we we hit

1054
00:37:36,480 --> 00:37:37,839
every single one of them and we gripped

1055
00:37:37,839 --> 00:37:39,040
for cookies

1056
00:37:39,040 --> 00:37:41,119
and we tried every single cookie we

1057
00:37:41,119 --> 00:37:43,359
could get our hands on until one of them

1058
00:37:43,359 --> 00:37:44,160
hit

1059
00:37:44,160 --> 00:37:47,040
and gave us a login to that application

1060
00:37:47,040 --> 00:37:48,800
so to take a step further we realized

1061
00:37:48,800 --> 00:37:50,800
since this is an internal app

1062
00:37:50,800 --> 00:37:52,160
they're probably using some single

1063
00:37:52,160 --> 00:37:54,079
sign-on to make sure this cookie carries

1064
00:37:54,079 --> 00:37:55,839
over and it needs to log into other

1065
00:37:55,839 --> 00:37:57,280
applications that are owned by this

1066
00:37:57,280 --> 00:37:58,320
company

1067
00:37:58,320 --> 00:38:01,119
so we made a match and replaced

1068
00:38:01,119 --> 00:38:01,920
through

1069
00:38:01,920 --> 00:38:03,680
burp suite and we told that every time

1070
00:38:03,680 --> 00:38:06,079
we hit any of these megacorp sites

1071
00:38:06,079 --> 00:38:07,920
replace our cookie value with this

1072
00:38:07,920 --> 00:38:09,599
cookie that we just found

1073
00:38:09,599 --> 00:38:11,680
and let's see if it works and it did

1074
00:38:11,680 --> 00:38:13,599
work so we had some really cool internal

1075
00:38:13,599 --> 00:38:16,160
sites that this one had access to about

1076
00:38:16,160 --> 00:38:18,320
4 000 people all internal employees

1077
00:38:18,320 --> 00:38:20,079
probably email addresses and we could

1078
00:38:20,079 --> 00:38:21,839
you can see on the right side we could

1079
00:38:21,839 --> 00:38:23,920
have edited deleted uh whatever we

1080
00:38:23,920 --> 00:38:25,440
wanted to do

1081
00:38:25,440 --> 00:38:27,920
this one was some sales thing that i

1082
00:38:27,920 --> 00:38:29,440
don't understand what it was but it was

1083
00:38:29,440 --> 00:38:31,520
definitely internal and

1084
00:38:31,520 --> 00:38:34,240
it was related to sales

1085
00:38:34,240 --> 00:38:36,480
this one allowed us to manipulate i

1086
00:38:36,480 --> 00:38:38,160
think some user data stuff we didn't

1087
00:38:38,160 --> 00:38:39,280
want to mess with all this stuff because

1088
00:38:39,280 --> 00:38:40,640
again these are production sites

1089
00:38:40,640 --> 00:38:43,280
internal and it's a huge corporation

1090
00:38:43,280 --> 00:38:46,000
but again just finding that one cookie

1091
00:38:46,000 --> 00:38:48,560
that works because you leaked http trace

1092
00:38:48,560 --> 00:38:51,280
gave us access to a lot of good stuff

1093
00:38:51,280 --> 00:38:52,560
but there's a lot of lesson learned with

1094
00:38:52,560 --> 00:38:54,800
this um it wasn't easy again this wasn't

1095
00:38:54,800 --> 00:38:57,280
uh this was an entire sunday spend for

1096
00:38:57,280 --> 00:38:58,800
us between the four or five of us to

1097
00:38:58,800 --> 00:39:00,880
figure this out

1098
00:39:00,880 --> 00:39:02,400
so what we learned was

1099
00:39:02,400 --> 00:39:04,800
dig very deep find as many as these as

1100
00:39:04,800 --> 00:39:07,280
you can find look for cookies don't stop

1101
00:39:07,280 --> 00:39:08,720
for just cookies look for credentials

1102
00:39:08,720 --> 00:39:09,680
look for

1103
00:39:09,680 --> 00:39:11,280
keys look for

1104
00:39:11,280 --> 00:39:13,119
authorization headers it's not always

1105
00:39:13,119 --> 00:39:14,640
cookies they could have an api keynote

1106
00:39:14,640 --> 00:39:16,480
request and a parameter they could have

1107
00:39:16,480 --> 00:39:18,560
a header that has an api key they could

1108
00:39:18,560 --> 00:39:19,440
have

1109
00:39:19,440 --> 00:39:22,240
better tokens all that stuff matters

1110
00:39:22,240 --> 00:39:24,720
stop brute forcing is a huge one

1111
00:39:24,720 --> 00:39:26,160
because the more brute force you do the

1112
00:39:26,160 --> 00:39:27,520
more requests you do the more you're

1113
00:39:27,520 --> 00:39:29,839
flooding the http traces

1114
00:39:29,839 --> 00:39:31,920
logs and you're not going to be able to

1115
00:39:31,920 --> 00:39:35,119
monitor for actual valid cookies

1116
00:39:35,119 --> 00:39:36,880
and the best part of it all is again

1117
00:39:36,880 --> 00:39:38,880
this megacorp as we refer to them wasn't

1118
00:39:38,880 --> 00:39:40,800
the only vulnerable company

1119
00:39:40,800 --> 00:39:43,520
we ended up actually selecting a

1120
00:39:43,520 --> 00:39:44,960
number of i would say nine or ten

1121
00:39:44,960 --> 00:39:46,720
targets that we identified that were

1122
00:39:46,720 --> 00:39:48,560
using the same exact thing

1123
00:39:48,560 --> 00:39:50,160
and we ended up spraying it with the

1124
00:39:50,160 --> 00:39:52,560
same exact thing and we ended up just

1125
00:39:52,560 --> 00:39:54,880
getting more and more bounties as we

1126
00:39:54,880 --> 00:39:55,680
were

1127
00:39:55,680 --> 00:39:57,119
identifying them

1128
00:39:57,119 --> 00:39:59,680
i'll let tanner wrap this up by some of

1129
00:39:59,680 --> 00:40:01,119
the tools that we wrote to make this

1130
00:40:01,119 --> 00:40:02,880
easier and i think this might also help

1131
00:40:02,880 --> 00:40:04,960
a lot of hackers or internal security

1132
00:40:04,960 --> 00:40:06,960
engineers identify assets that shouldn't

1133
00:40:06,960 --> 00:40:10,400
be out there in the wild and in the open

1134
00:40:10,400 --> 00:40:12,400
awesome yeah thanks ben that was uh that

1135
00:40:12,400 --> 00:40:14,240
was a really fun week we

1136
00:40:14,240 --> 00:40:17,680
we had a lot of good fun there

1137
00:40:19,359 --> 00:40:22,319
can you go to the next slide

1138
00:40:23,040 --> 00:40:27,040
awesome so these are the tools that we

1139
00:40:27,040 --> 00:40:28,640
talked about previously that are out

1140
00:40:28,640 --> 00:40:29,680
there

1141
00:40:29,680 --> 00:40:32,079
for people to use so the first is again

1142
00:40:32,079 --> 00:40:34,560
go fingerprint so it takes a list of

1143
00:40:34,560 --> 00:40:36,839
urls and a

1144
00:40:36,839 --> 00:40:40,720
fingerprints.json file which has

1145
00:40:40,720 --> 00:40:42,880
those you know different fingerprints

1146
00:40:42,880 --> 00:40:45,119
that you built to look for different

1147
00:40:45,119 --> 00:40:46,880
things right and so you can see the top

1148
00:40:46,880 --> 00:40:48,400
right there is kind of the output you'll

1149
00:40:48,400 --> 00:40:50,240
get you'll get the domain that it

1150
00:40:50,240 --> 00:40:52,240
matched on the url that it matched on

1151
00:40:52,240 --> 00:40:54,000
and then after the colon you'll get

1152
00:40:54,000 --> 00:40:56,319
which

1153
00:40:57,200 --> 00:40:58,400
sorry let me start that sentence over

1154
00:40:58,400 --> 00:40:59,920
you'll get the url

1155
00:40:59,920 --> 00:41:01,599
and then after the colon you'll get

1156
00:41:01,599 --> 00:41:04,079
whatever fingerprint that it matched

1157
00:41:04,079 --> 00:41:05,280
okay i'm going to start over again

1158
00:41:05,280 --> 00:41:07,040
because my dog

1159
00:41:07,040 --> 00:41:08,800
my dog just stepped on a squeaky to it

1160
00:41:08,800 --> 00:41:10,240
yeah i'm going to go to it let's just

1161
00:41:10,240 --> 00:41:12,240
start the whole slide over all right

1162
00:41:12,240 --> 00:41:13,200
ready

1163
00:41:13,200 --> 00:41:14,400
yeah

1164
00:41:14,400 --> 00:41:15,839
so these are the tools we talked about

1165
00:41:15,839 --> 00:41:18,000
earlier our first one is go fingerprint

1166
00:41:18,000 --> 00:41:20,359
so it takes a list of urls and the

1167
00:41:20,359 --> 00:41:22,160
fingerprints.json which we talked about

1168
00:41:22,160 --> 00:41:25,119
was where you'll put the custom written

1169
00:41:25,119 --> 00:41:26,880
fingerprints that you have in the repo

1170
00:41:26,880 --> 00:41:28,400
we have kind of a basic one that we were

1171
00:41:28,400 --> 00:41:30,640
using for some testing

1172
00:41:30,640 --> 00:41:32,480
but you're welcome to write your own in

1173
00:41:32,480 --> 00:41:33,760
the top right you can see there the

1174
00:41:33,760 --> 00:41:36,880
output you'll get the url that matched

1175
00:41:36,880 --> 00:41:38,640
and then after the colon you'll get

1176
00:41:38,640 --> 00:41:40,400
which fingerprint that it matched for

1177
00:41:40,400 --> 00:41:41,760
that url

1178
00:41:41,760 --> 00:41:44,319
the second one is v host scan like we

1179
00:41:44,319 --> 00:41:47,200
said it takes a csv file or really any

1180
00:41:47,200 --> 00:41:49,520
file of the form

1181
00:41:49,520 --> 00:41:52,480
hostname ip import

1182
00:41:52,480 --> 00:41:54,880
and it returns a json file containing

1183
00:41:54,880 --> 00:41:57,839
objects that have the input target and

1184
00:41:57,839 --> 00:41:59,440
then the result for all three of the

1185
00:41:59,440 --> 00:42:01,440
checks might be a little bit hard to see

1186
00:42:01,440 --> 00:42:03,280
on the slide hopefully it's easy to see

1187
00:42:03,280 --> 00:42:06,400
but then that jason document you have

1188
00:42:06,400 --> 00:42:08,720
the target you're after and then it has

1189
00:42:08,720 --> 00:42:09,920
the

1190
00:42:09,920 --> 00:42:12,000
host name or sorry it has the status

1191
00:42:12,000 --> 00:42:14,560
code and then the response link for both

1192
00:42:14,560 --> 00:42:17,520
the three checks of ip with the host

1193
00:42:17,520 --> 00:42:18,800
center of ip

1194
00:42:18,800 --> 00:42:21,119
the ip with the host name of the domain

1195
00:42:21,119 --> 00:42:24,800
and then a hostname of localhost

1196
00:42:25,760 --> 00:42:29,839
right so this is a fun slide as well for

1197
00:42:29,839 --> 00:42:31,680
something we decided to do is actually a

1198
00:42:31,680 --> 00:42:35,200
little bit outdated uh the

1199
00:42:35,200 --> 00:42:37,040
current

1200
00:42:37,040 --> 00:42:38,960
sorry let me just stop how do we wanna

1201
00:42:38,960 --> 00:42:40,400
because we'll go back to this how do we

1202
00:42:40,400 --> 00:42:42,640
want to actually do this slide since it

1203
00:42:42,640 --> 00:42:44,480
is kind of cool just said there's an api

1204
00:42:44,480 --> 00:42:46,400
out there that you can hit and it will

1205
00:42:46,400 --> 00:42:48,160
let you get some of the data for free

1206
00:42:48,160 --> 00:42:49,839
and if you want to get more data we have

1207
00:42:49,839 --> 00:42:51,760
uh you know pay as you go right now you

1208
00:42:51,760 --> 00:42:53,839
can get access to our data as you pay

1209
00:42:53,839 --> 00:42:56,480
sure okay everything is there the api is

1210
00:42:56,480 --> 00:42:57,839
so they just have to register on on

1211
00:42:57,839 --> 00:43:01,040
recon that api.recon.dev well i guess it

1212
00:43:01,040 --> 00:43:03,119
is there yeah but it's not going to yeah

1213
00:43:03,119 --> 00:43:04,800
i'll just say that if you go there now

1214
00:43:04,800 --> 00:43:05,920
it's going to take you to it's going to

1215
00:43:05,920 --> 00:43:08,079
redirect you to our site and you can use

1216
00:43:08,079 --> 00:43:11,680
a site to you know get this data

1217
00:43:11,680 --> 00:43:12,960
all right

1218
00:43:12,960 --> 00:43:15,359
so along with the tools that we released

1219
00:43:15,359 --> 00:43:17,440
we released also an api

1220
00:43:17,440 --> 00:43:19,599
to give you access to this data we've

1221
00:43:19,599 --> 00:43:22,599
been compiling so you can go there at

1222
00:43:22,599 --> 00:43:24,240
api.recon.dev

1223
00:43:24,240 --> 00:43:27,040
uh currently you'll notice that when you

1224
00:43:27,040 --> 00:43:28,079
get there it's going to tell you that

1225
00:43:28,079 --> 00:43:29,760
you're missing an api key that's because

1226
00:43:29,760 --> 00:43:31,599
we've most recently moved this to

1227
00:43:31,599 --> 00:43:34,000
recon.dev

1228
00:43:34,000 --> 00:43:35,280
and you'll have to sign up for an

1229
00:43:35,280 --> 00:43:37,920
account to get access to the data so

1230
00:43:37,920 --> 00:43:40,880
it's very simple we have three different

1231
00:43:40,880 --> 00:43:42,720
kind of pricing tiers there's a free one

1232
00:43:42,720 --> 00:43:44,000
so you don't have to worry about we're

1233
00:43:44,000 --> 00:43:45,520
not trying to price anybody out of this

1234
00:43:45,520 --> 00:43:47,280
data so there is a free way to access

1235
00:43:47,280 --> 00:43:48,640
the data

1236
00:43:48,640 --> 00:43:51,200
you can hit it one domain at a time

1237
00:43:51,200 --> 00:43:52,640
and there's no need to do any type of

1238
00:43:52,640 --> 00:43:54,720
like periods or any sub domains you can

1239
00:43:54,720 --> 00:43:56,640
just simply put in the root domain

1240
00:43:56,640 --> 00:43:58,240
you're after and it's going to return a

1241
00:43:58,240 --> 00:44:01,520
json document with all the results

1242
00:44:01,520 --> 00:44:04,560
for that domain with both the dom the c

1243
00:44:04,560 --> 00:44:07,359
names and dns names that match that

1244
00:44:07,359 --> 00:44:10,160
domain the port that it was found on the

1245
00:44:10,160 --> 00:44:12,880
root the like i p address it would match

1246
00:44:12,880 --> 00:44:14,560
to and the

1247
00:44:14,560 --> 00:44:18,400
root domain that it matched to

1248
00:44:19,280 --> 00:44:21,200
so i'll let ben kind of wrap it up for

1249
00:44:21,200 --> 00:44:22,480
us

1250
00:44:22,480 --> 00:44:24,640
so conclusion um some of the things that

1251
00:44:24,640 --> 00:44:27,200
we did learn is understand your target

1252
00:44:27,200 --> 00:44:28,880
understand where to deploy new apps

1253
00:44:28,880 --> 00:44:31,280
understand how they deploy them

1254
00:44:31,280 --> 00:44:34,319
get familiar with all these different

1255
00:44:34,319 --> 00:44:37,359
tools and uh things that companies use

1256
00:44:37,359 --> 00:44:38,880
to deploy their apps

1257
00:44:38,880 --> 00:44:40,480
get good at fingerprinting understand

1258
00:44:40,480 --> 00:44:42,720
what makes these apps what they are how

1259
00:44:42,720 --> 00:44:43,920
does this be how do they behave with

1260
00:44:43,920 --> 00:44:45,599
certain things what do they return what

1261
00:44:45,599 --> 00:44:46,960
are the headers like just get to

1262
00:44:46,960 --> 00:44:48,160
understand them

1263
00:44:48,160 --> 00:44:50,240
it also created really good database of

1264
00:44:50,240 --> 00:44:52,640
your own uh you don't have to do this

1265
00:44:52,640 --> 00:44:54,319
like we did you can obviously use our

1266
00:44:54,319 --> 00:44:56,160
data but if you have a good way of

1267
00:44:56,160 --> 00:44:58,240
keeping data on your own and having a

1268
00:44:58,240 --> 00:45:01,040
database it really really helps um to

1269
00:45:01,040 --> 00:45:02,880
hack on these companies and get an

1270
00:45:02,880 --> 00:45:04,480
overview of what their assets look like

1271
00:45:04,480 --> 00:45:06,560
what is new what's old and what's

1272
00:45:06,560 --> 00:45:09,359
internal and whatnot

1273
00:45:09,359 --> 00:45:12,319
and just a quick reminder that a lot of

1274
00:45:12,319 --> 00:45:14,319
the things that i showed as examples for

1275
00:45:14,319 --> 00:45:16,640
vulnerabilities

1276
00:45:16,640 --> 00:45:18,480
just another just an example of all the

1277
00:45:18,480 --> 00:45:19,760
examples that i've shown are

1278
00:45:19,760 --> 00:45:22,000
vulnerabilities that were old tricks

1279
00:45:22,000 --> 00:45:24,560
there was nothing new but it just shows

1280
00:45:24,560 --> 00:45:25,680
that there are still a lot of

1281
00:45:25,680 --> 00:45:27,280
low-hanging fruit out there you just

1282
00:45:27,280 --> 00:45:29,359
have to understand how to approach him

1283
00:45:29,359 --> 00:45:31,359
and how to look for him and some of the

1284
00:45:31,359 --> 00:45:33,520
stuff that i showed like example with

1285
00:45:33,520 --> 00:45:34,480
the

1286
00:45:34,480 --> 00:45:35,920
heap dump

1287
00:45:35,920 --> 00:45:38,319
that is a really good way for a person

1288
00:45:38,319 --> 00:45:40,240
with bad intent or black hat hacker or

1289
00:45:40,240 --> 00:45:42,000
whatever you want to call them to get

1290
00:45:42,000 --> 00:45:43,920
into a internal

1291
00:45:43,920 --> 00:45:45,680
environment for a company and start

1292
00:45:45,680 --> 00:45:48,079
pivoting through and getting access to

1293
00:45:48,079 --> 00:45:49,440
more stuff or starting their own

1294
00:45:49,440 --> 00:45:50,400
campaign

1295
00:45:50,400 --> 00:45:53,680
don't just also don't just spray and

1296
00:45:53,680 --> 00:45:56,000
go after assets with generic word list

1297
00:45:56,000 --> 00:45:57,760
really go wide

1298
00:45:57,760 --> 00:45:59,680
understand how the entire organization

1299
00:45:59,680 --> 00:46:00,800
looks like

1300
00:46:00,800 --> 00:46:03,359
and then look for common things that

1301
00:46:03,359 --> 00:46:05,520
gets missed because you need to have a

1302
00:46:05,520 --> 00:46:07,359
login we need to have a cookie attached

1303
00:46:07,359 --> 00:46:09,760
to your request and really dig deep you

1304
00:46:09,760 --> 00:46:11,680
have to go a step further than just

1305
00:46:11,680 --> 00:46:13,599
again brute forcing with generic

1306
00:46:13,599 --> 00:46:16,079
wordless login and then do boot forcing

1307
00:46:16,079 --> 00:46:18,319
create word lists that are particularly

1308
00:46:18,319 --> 00:46:20,720
made for your targets based on previous

1309
00:46:20,720 --> 00:46:22,240
information and experiences you have had

1310
00:46:22,240 --> 00:46:24,160
with this if you don't have that that's

1311
00:46:24,160 --> 00:46:26,480
okay you can build that as you go but

1312
00:46:26,480 --> 00:46:29,040
always get take some good notes of juicy

1313
00:46:29,040 --> 00:46:31,200
and juicy information and points you

1314
00:46:31,200 --> 00:46:32,800
come across while you're doing your

1315
00:46:32,800 --> 00:46:34,640
recon

1316
00:46:34,640 --> 00:46:37,200
and hate on this last sentence all you

1317
00:46:37,200 --> 00:46:38,560
want but

1318
00:46:38,560 --> 00:46:40,480
a lot of people say that bug bounties

1319
00:46:40,480 --> 00:46:43,280
aren't worth it to make money

1320
00:46:43,280 --> 00:46:44,880
there was roughly about 50k in bugs in

1321
00:46:44,880 --> 00:46:46,319
this presentation

1322
00:46:46,319 --> 00:46:48,720
we just spent the extra time to learn

1323
00:46:48,720 --> 00:46:50,480
about our targets to know how to exploit

1324
00:46:50,480 --> 00:46:53,440
them and we went after impactful bugs

1325
00:46:53,440 --> 00:46:55,839
again the things that we showed you can

1326
00:46:55,839 --> 00:46:57,280
access a lot of this data through

1327
00:46:57,280 --> 00:46:59,839
sensors to show them to certain.sh you

1328
00:46:59,839 --> 00:47:00,880
just have to know how to use them

1329
00:47:00,880 --> 00:47:02,079
properly

1330
00:47:02,079 --> 00:47:03,280
you just have to learn how to manage

1331
00:47:03,280 --> 00:47:05,200
your data better and spend your time

1332
00:47:05,200 --> 00:47:06,800
seriously spend your time understanding

1333
00:47:06,800 --> 00:47:08,720
these targets before you decide to

1334
00:47:08,720 --> 00:47:11,599
attack him and go after them

1335
00:47:11,599 --> 00:47:13,359
i have this last line in there for no

1336
00:47:13,359 --> 00:47:14,640
reason

1337
00:47:14,640 --> 00:47:16,640
i just love this meme that was given to

1338
00:47:16,640 --> 00:47:18,560
us and uh

1339
00:47:18,560 --> 00:47:20,960
look into some of these talks uh orange

1340
00:47:20,960 --> 00:47:23,200
side did a talk on

1341
00:47:23,200 --> 00:47:25,200
path normalization at def con i would

1342
00:47:25,200 --> 00:47:27,119
definitely give that a look uh you can

1343
00:47:27,119 --> 00:47:29,359
see a lot of cves that came in the past

1344
00:47:29,359 --> 00:47:31,599
year are all caused by it

1345
00:47:31,599 --> 00:47:33,599
and this was a really big part of us

1346
00:47:33,599 --> 00:47:35,520
understanding a lot of our targets i

1347
00:47:35,520 --> 00:47:36,960
wanted to give an example of this but

1348
00:47:36,960 --> 00:47:38,319
unfortunately because our time was

1349
00:47:38,319 --> 00:47:39,920
really really limited

1350
00:47:39,920 --> 00:47:41,920
we don't have an example but look into

1351
00:47:41,920 --> 00:47:43,599
it i promise it's worth it it's a tip

1352
00:47:43,599 --> 00:47:45,599
for people that want to go beyond just

1353
00:47:45,599 --> 00:47:47,920
spraying with their word list

1354
00:47:47,920 --> 00:47:50,079
again thank you all for watching and a

1355
00:47:50,079 --> 00:47:52,800
big big thank you to

1356
00:47:52,800 --> 00:47:56,079
zayat zlz donut tom nom nom irb sam and

1357
00:47:56,079 --> 00:47:58,240
ryan raider and we appreciate you all

1358
00:47:58,240 --> 00:47:59,440
being here

1359
00:47:59,440 --> 00:48:02,440
cheers

