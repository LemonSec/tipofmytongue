1
00:00:00,240 --> 00:00:02,960
hello everyone um first of all i want to

2
00:00:02,960 --> 00:00:04,720
say thank you for having me here on

3
00:00:04,720 --> 00:00:07,359
appstack2020 even though this is not how

4
00:00:07,359 --> 00:00:09,040
i imagine it would be this is definitely

5
00:00:09,040 --> 00:00:10,480
a dream come true

6
00:00:10,480 --> 00:00:12,719
um today i plan on giving a talk about a

7
00:00:12,719 --> 00:00:14,559
research i did which resulted in a

8
00:00:14,559 --> 00:00:16,560
number of very serious vulnerabilities

9
00:00:16,560 --> 00:00:18,560
in whatsapp's platform

10
00:00:18,560 --> 00:00:20,800
even though that is very interesting by

11
00:00:20,800 --> 00:00:22,960
itself the insights i've gained out of

12
00:00:22,960 --> 00:00:25,760
this research were almost as profounding

13
00:00:25,760 --> 00:00:27,840
this talk will mostly be about me trying

14
00:00:27,840 --> 00:00:29,840
to walk you through my research but its

15
00:00:29,840 --> 00:00:31,840
most important part would be the key

16
00:00:31,840 --> 00:00:33,520
takeaways

17
00:00:33,520 --> 00:00:35,760
the one i will present at the end of the

18
00:00:35,760 --> 00:00:37,840
talk and the conclusions i made out of

19
00:00:37,840 --> 00:00:39,040
each of the different achievements

20
00:00:39,040 --> 00:00:40,640
throughout the research and how they

21
00:00:40,640 --> 00:00:42,480
reflect on the security aspect of

22
00:00:42,480 --> 00:00:45,200
web-based messaging apps in general

23
00:00:45,200 --> 00:00:47,120
so let's begin

24
00:00:47,120 --> 00:00:49,520
um but first let me introduce myself my

25
00:00:49,520 --> 00:00:53,840
name is god wiseman i am 26 years old

26
00:00:53,840 --> 00:00:55,840
in contrary to the rest of the world my

27
00:00:55,840 --> 00:00:57,920
career started in my military service in

28
00:00:57,920 --> 00:01:01,920
idf in unit 8200 which is known as one

29
00:01:01,920 --> 00:01:03,920
of the biggest israeli cyber technology

30
00:01:03,920 --> 00:01:05,920
units where i was originally trained to

31
00:01:05,920 --> 00:01:09,439
be a qa of cyber security products

32
00:01:09,439 --> 00:01:11,439
working with the best in the field i was

33
00:01:11,439 --> 00:01:13,600
fortunate enough to learn a lot and

34
00:01:13,600 --> 00:01:15,439
later on to advance the development of

35
00:01:15,439 --> 00:01:17,439
some minor cyber security related

36
00:01:17,439 --> 00:01:19,439
products

37
00:01:19,439 --> 00:01:21,439
those products were web oriented and

38
00:01:21,439 --> 00:01:23,119
this is where my passion for offensive

39
00:01:23,119 --> 00:01:25,280
and defensive web security has begun

40
00:01:25,280 --> 00:01:27,119
after achieving some great goals in the

41
00:01:27,119 --> 00:01:29,280
field my military services come to its

42
00:01:29,280 --> 00:01:31,360
end and i started my first tech job as

43
00:01:31,360 --> 00:01:33,280
civilian

44
00:01:33,280 --> 00:01:36,000
i worked as the first employee for a

45
00:01:36,000 --> 00:01:39,119
small company called up on it

46
00:01:39,119 --> 00:01:42,320
um which was found by 5 talented guys

47
00:01:42,320 --> 00:01:45,200
who were also veterans of 8 200 units

48
00:01:45,200 --> 00:01:46,720
upon it had a product which helped

49
00:01:46,720 --> 00:01:49,200
recovering ads lost by adblock by

50
00:01:49,200 --> 00:01:50,960
implementing sophisticated web security

51
00:01:50,960 --> 00:01:53,200
concepts with which they were able to

52
00:01:53,200 --> 00:01:55,520
bypass it

53
00:01:55,520 --> 00:01:57,680
this job was a serious jump for me in

54
00:01:57,680 --> 00:02:00,799
the field of web security

55
00:02:01,520 --> 00:02:03,759
thanks to the complicity of the

56
00:02:03,759 --> 00:02:06,159
challenges we had to deal with i managed

57
00:02:06,159 --> 00:02:07,520
to

58
00:02:07,520 --> 00:02:09,360
make a great leap

59
00:02:09,360 --> 00:02:11,280
professionally twice

60
00:02:11,280 --> 00:02:13,360
um

61
00:02:13,360 --> 00:02:16,160
separating from up on it a year after i

62
00:02:16,160 --> 00:02:17,680
decided to travel the world for a bit

63
00:02:17,680 --> 00:02:19,760
more than a year surprisingly enough

64
00:02:19,760 --> 00:02:21,680
this will actually be part of the story

65
00:02:21,680 --> 00:02:23,760
i'm about to tell of how the research of

66
00:02:23,760 --> 00:02:25,599
whatsapp started

67
00:02:25,599 --> 00:02:27,360
after the travel i came back to israel

68
00:02:27,360 --> 00:02:29,120
and started working for perimeter x as a

69
00:02:29,120 --> 00:02:31,120
web security researcher and still do for

70
00:02:31,120 --> 00:02:32,640
the past two years

71
00:02:32,640 --> 00:02:34,959
um perimeter x is where i made another

72
00:02:34,959 --> 00:02:36,560
great leap in my professional level in

73
00:02:36,560 --> 00:02:38,400
the field of web security as the company

74
00:02:38,400 --> 00:02:40,239
tackles the hardest security issues in

75
00:02:40,239 --> 00:02:42,160
the field and wishes to solve them and

76
00:02:42,160 --> 00:02:43,920
make our experience on the web more

77
00:02:43,920 --> 00:02:45,840
secure

78
00:02:45,840 --> 00:02:47,920
while working for parameter x earlier

79
00:02:47,920 --> 00:02:49,440
this year i published a thorough

80
00:02:49,440 --> 00:02:51,840
research i did for months demonstrating

81
00:02:51,840 --> 00:02:53,760
several critical vulnerabilities in the

82
00:02:53,760 --> 00:02:55,840
platform of whatsapp i would like to

83
00:02:55,840 --> 00:02:57,360
take you step by step through my

84
00:02:57,360 --> 00:02:59,120
research and show you what it taught me

85
00:02:59,120 --> 00:03:01,280
about the security aspect of whatsapp

86
00:03:01,280 --> 00:03:03,360
but also about the security aspect of

87
00:03:03,360 --> 00:03:05,040
web-based messaging applications in

88
00:03:05,040 --> 00:03:09,040
general um so let's begin

89
00:03:10,879 --> 00:03:14,400
so the year was 2017 after a month of

90
00:03:14,400 --> 00:03:15,920
traveling through south america i

91
00:03:15,920 --> 00:03:18,159
realized that traveling is too much fun

92
00:03:18,159 --> 00:03:21,040
for a short two month trip and i decided

93
00:03:21,040 --> 00:03:22,400
to purchase a laptop in order to

94
00:03:22,400 --> 00:03:24,400
continue my technological development

95
00:03:24,400 --> 00:03:26,799
while being abroad hoping to maybe get a

96
00:03:26,799 --> 00:03:28,720
remote job later down the road

97
00:03:28,720 --> 00:03:30,720
by that time i was very much into web

98
00:03:30,720 --> 00:03:32,560
security and occasionally i had these

99
00:03:32,560 --> 00:03:34,959
random ideas of researchers and on ways

100
00:03:34,959 --> 00:03:36,879
of breaking web applications so i

101
00:03:36,879 --> 00:03:38,640
thought having a laptop with me could be

102
00:03:38,640 --> 00:03:41,840
a good use of my time while traveling

103
00:03:41,840 --> 00:03:43,840
three months into my travel while i was

104
00:03:43,840 --> 00:03:46,319
in peru an interesting idea came to came

105
00:03:46,319 --> 00:03:48,560
to my mind

106
00:03:48,560 --> 00:03:50,879
so i'm no native mobile applications

107
00:03:50,879 --> 00:03:52,799
expert but with my knowledge and web

108
00:03:52,799 --> 00:03:54,879
research maybe i can make whatsapp

109
00:03:54,879 --> 00:03:57,599
behave funny by manipulating its actions

110
00:03:57,599 --> 00:04:00,640
via the whatsapp web platform this led

111
00:04:00,640 --> 00:04:02,480
me into trying to manipulate messages

112
00:04:02,480 --> 00:04:04,799
before they are sent

113
00:04:04,799 --> 00:04:05,599
and

114
00:04:05,599 --> 00:04:08,080
the first thing i manage to achieve is

115
00:04:08,080 --> 00:04:10,000
to fully control the text in a reply

116
00:04:10,000 --> 00:04:10,959
message

117
00:04:10,959 --> 00:04:12,799
quick sidenote pay attention to the

118
00:04:12,799 --> 00:04:14,239
different achievement achievements

119
00:04:14,239 --> 00:04:15,920
throughout the talk because we will be

120
00:04:15,920 --> 00:04:17,358
covering them at the end of the talk

121
00:04:17,358 --> 00:04:18,399
again

122
00:04:18,399 --> 00:04:20,560
so all i had to do is to change the text

123
00:04:20,560 --> 00:04:23,040
of the reply property of the message

124
00:04:23,040 --> 00:04:25,199
object before it is being sent and then

125
00:04:25,199 --> 00:04:27,600
let the message fly by doing that you

126
00:04:27,600 --> 00:04:30,639
get the following unexpected behavior

127
00:04:30,639 --> 00:04:33,120
a reply text of a message that never

128
00:04:33,120 --> 00:04:36,479
existed so by manipulating this object

129
00:04:36,479 --> 00:04:38,800
the object at the top and changing the

130
00:04:38,800 --> 00:04:41,120
text like i did in the middle

131
00:04:41,120 --> 00:04:43,040
you get the fake text that you can see

132
00:04:43,040 --> 00:04:45,600
at the bottom

133
00:04:45,600 --> 00:04:48,160
so i may have used this to prank a

134
00:04:48,160 --> 00:04:50,960
couple of my friends but i didn't have

135
00:04:50,960 --> 00:04:53,280
any idea at the time of how to turn this

136
00:04:53,280 --> 00:04:55,759
into an actual security flaw

137
00:04:55,759 --> 00:04:58,080
from this point my research kept going

138
00:04:58,080 --> 00:05:00,400
on and off since after all i was in the

139
00:05:00,400 --> 00:05:01,680
middle

140
00:05:01,680 --> 00:05:03,840
of my travel

141
00:05:03,840 --> 00:05:05,759
some after some time after i learned

142
00:05:05,759 --> 00:05:07,440
that checkpoint company have published

143
00:05:07,440 --> 00:05:09,199
this finding as well but i wasn't

144
00:05:09,199 --> 00:05:11,600
bothered about it because i couldn't see

145
00:05:11,600 --> 00:05:12,560
the

146
00:05:12,560 --> 00:05:15,360
the severity of this flaw

147
00:05:15,360 --> 00:05:18,080
so i left all that and i came back to

148
00:05:18,080 --> 00:05:21,039
focus on traveling

149
00:05:21,039 --> 00:05:22,880
after traveling for over a year i came

150
00:05:22,880 --> 00:05:24,639
back home and immediately started to

151
00:05:24,639 --> 00:05:26,639
work for parameter x as a web security

152
00:05:26,639 --> 00:05:27,840
expert

153
00:05:27,840 --> 00:05:30,000
a year into my job

154
00:05:30,000 --> 00:05:32,479
two years after my first finding another

155
00:05:32,479 --> 00:05:34,160
whatsapp related thought came to my mind

156
00:05:34,160 --> 00:05:36,800
when i was looking at the reach at a

157
00:05:36,800 --> 00:05:39,120
rich preview button message

158
00:05:39,120 --> 00:05:40,240
but

159
00:05:40,240 --> 00:05:42,560
in order to continue from this point we

160
00:05:42,560 --> 00:05:43,919
must understand

161
00:05:43,919 --> 00:05:45,600
what reach preview

162
00:05:45,600 --> 00:05:47,840
is

163
00:05:48,639 --> 00:05:50,880
so you know how you insert a link to a

164
00:05:50,880 --> 00:05:52,720
post or a message and all of a sudden

165
00:05:52,720 --> 00:05:54,400
that simple link turns into this cool

166
00:05:54,400 --> 00:05:56,240
banner with an image and some text

167
00:05:56,240 --> 00:05:58,000
regarding the website

168
00:05:58,000 --> 00:06:00,160
that's rich preview

169
00:06:00,160 --> 00:06:03,039
each html page may contain special html

170
00:06:03,039 --> 00:06:05,120
tags called meta tags that provide

171
00:06:05,120 --> 00:06:06,720
standard information regarding the web

172
00:06:06,720 --> 00:06:09,199
page that applications may use to enrich

173
00:06:09,199 --> 00:06:11,680
provided links with so for example since

174
00:06:11,680 --> 00:06:14,000
facebook.com's meta tags look something

175
00:06:14,000 --> 00:06:16,240
similar to this

176
00:06:16,240 --> 00:06:18,639
their rich preview banner will result in

177
00:06:18,639 --> 00:06:21,840
something like this

178
00:06:24,720 --> 00:06:26,960
while we're at it and before we continue

179
00:06:26,960 --> 00:06:29,120
this gif in fact contains the problem

180
00:06:29,120 --> 00:06:31,440
that most of my findings rely on take a

181
00:06:31,440 --> 00:06:33,360
second to think about what it might be

182
00:06:33,360 --> 00:06:34,960
what problem is demonstrated in this

183
00:06:34,960 --> 00:06:37,440
short gif

184
00:06:41,280 --> 00:06:43,120
the banners are generated on the sender

185
00:06:43,120 --> 00:06:44,000
side

186
00:06:44,000 --> 00:06:46,560
or in other words the potential attacker

187
00:06:46,560 --> 00:06:47,680
side

188
00:06:47,680 --> 00:06:49,919
this is a recipe for trouble because

189
00:06:49,919 --> 00:06:51,520
when you think about it i can apply the

190
00:06:51,520 --> 00:06:52,960
same technique i did on my first

191
00:06:52,960 --> 00:06:55,199
achievement here as well when whatsapp

192
00:06:55,199 --> 00:06:56,800
web generates the preview banner there

193
00:06:56,800 --> 00:06:59,120
are new properties to the message object

194
00:06:59,120 --> 00:07:01,440
and some contain the url from which the

195
00:07:01,440 --> 00:07:03,759
reach preview was fetched which is where

196
00:07:03,759 --> 00:07:05,919
clicking it will redirect you so the

197
00:07:05,919 --> 00:07:08,160
idea is to simply mess with the message

198
00:07:08,160 --> 00:07:10,240
object as i did before and see what i

199
00:07:10,240 --> 00:07:12,000
can get from playing around with the

200
00:07:12,000 --> 00:07:14,479
rich preview properties of it

201
00:07:14,479 --> 00:07:17,120
i learned that by changing the url i can

202
00:07:17,120 --> 00:07:18,720
get a preview banner that looks like

203
00:07:18,720 --> 00:07:20,880
facebook.com but will redirect to

204
00:07:20,880 --> 00:07:23,680
example.com when it's clicked

205
00:07:23,680 --> 00:07:26,560
this can be extremely dangerous as a

206
00:07:26,560 --> 00:07:29,599
very efficient phishing method

207
00:07:29,599 --> 00:07:32,160
and the result

208
00:07:32,160 --> 00:07:33,680
is this

209
00:07:33,680 --> 00:07:35,199
there's a banner right there and when

210
00:07:35,199 --> 00:07:37,599
you click it you get to example.com even

211
00:07:37,599 --> 00:07:39,919
though it looks like facebook.com

212
00:07:39,919 --> 00:07:41,680
here's the demo

213
00:07:41,680 --> 00:07:44,080
as you can see in the demo right before

214
00:07:44,080 --> 00:07:46,400
sending a message i change its url and

215
00:07:46,400 --> 00:07:49,039
when i click the crafted banner i am

216
00:07:49,039 --> 00:07:51,280
being redirected to example.com instead

217
00:07:51,280 --> 00:07:54,359
of facebook.com

218
00:08:05,919 --> 00:08:08,400
there we go

219
00:08:10,400 --> 00:08:12,400
and in order to create a more reliable

220
00:08:12,400 --> 00:08:14,800
crafted message i can modify the url to

221
00:08:14,800 --> 00:08:17,039
a valid one that will redirect to any

222
00:08:17,039 --> 00:08:18,800
link i want while still looking like a

223
00:08:18,800 --> 00:08:21,120
legitimate facebook.com url by using

224
00:08:21,120 --> 00:08:24,400
some url tricks from the official spec

225
00:08:24,400 --> 00:08:25,759
so

226
00:08:25,759 --> 00:08:27,440
this is how it looks like and for those

227
00:08:27,440 --> 00:08:29,120
of you who are not familiar anything

228
00:08:29,120 --> 00:08:31,440
before the add sign will be handled as

229
00:08:31,440 --> 00:08:33,440
credentials and what comes after it is

230
00:08:33,440 --> 00:08:35,039
the actual url

231
00:08:35,039 --> 00:08:37,200
in the picture i used bitly to redirect

232
00:08:37,200 --> 00:08:39,360
to example.com in order to avoid having

233
00:08:39,360 --> 00:08:41,839
the true destination url visible in the

234
00:08:41,839 --> 00:08:43,200
message

235
00:08:43,200 --> 00:08:46,000
this is crazy dangerous because this

236
00:08:46,000 --> 00:08:48,720
looks like a legit facebook url

237
00:08:48,720 --> 00:08:51,360
sending this to tons of random whatsapp

238
00:08:51,360 --> 00:08:52,839
groups and having it linked to

239
00:08:52,839 --> 00:08:55,200
facebook.com look-alike phishing site

240
00:08:55,200 --> 00:08:57,600
can result in theft of a lot of facebook

241
00:08:57,600 --> 00:09:00,480
accounts for example

242
00:09:01,519 --> 00:09:02,560
so

243
00:09:02,560 --> 00:09:03,600
wait

244
00:09:03,600 --> 00:09:06,080
if i can replace an https url with

245
00:09:06,080 --> 00:09:08,800
another https url can i use different

246
00:09:08,800 --> 00:09:10,480
schemes as well

247
00:09:10,480 --> 00:09:12,640
this is where things get to the next

248
00:09:12,640 --> 00:09:15,600
level i try to replace https

249
00:09:15,600 --> 00:09:18,080
facebook.com with javascript

250
00:09:18,080 --> 00:09:21,080
alertdocument.domain

251
00:09:21,120 --> 00:09:23,279
and well the bad news is that it didn't

252
00:09:23,279 --> 00:09:25,040
work but the good news is that the

253
00:09:25,040 --> 00:09:27,440
reason it failed is due to a check that

254
00:09:27,440 --> 00:09:30,080
can easily be bypassed at the time this

255
00:09:30,080 --> 00:09:31,760
vulnerability was open after some

256
00:09:31,760 --> 00:09:33,519
research i learned that whatsappweb

257
00:09:33,519 --> 00:09:36,480
verifies two things

258
00:09:36,480 --> 00:09:38,880
first the existence of the url in the

259
00:09:38,880 --> 00:09:40,959
body of the message and second the

260
00:09:40,959 --> 00:09:43,120
existence of a url that begins with

261
00:09:43,120 --> 00:09:46,160
https in the reach preview banner url

262
00:09:46,160 --> 00:09:47,760
property

263
00:09:47,760 --> 00:09:48,800
meaning

264
00:09:48,800 --> 00:09:52,320
all i have to do is make sure that a my

265
00:09:52,320 --> 00:09:54,160
javascript url is contained within the

266
00:09:54,160 --> 00:09:56,560
body of the message and b

267
00:09:56,560 --> 00:09:59,200
my javascript url contains a valid https

268
00:09:59,200 --> 00:10:00,800
url within it

269
00:10:00,800 --> 00:10:03,440
so by simply doing

270
00:10:03,440 --> 00:10:04,800
this

271
00:10:04,800 --> 00:10:06,079
i can

272
00:10:06,079 --> 00:10:10,160
successfully eject a javascript url

273
00:10:10,160 --> 00:10:12,330
which will result in an xss

274
00:10:12,330 --> 00:10:14,000
[Music]

275
00:10:14,000 --> 00:10:16,079
there you have it

276
00:10:16,079 --> 00:10:17,760
it is important to mention that when i

277
00:10:17,760 --> 00:10:20,320
worked on this chrome's version was 78

278
00:10:20,320 --> 00:10:22,160
and at the at that point they

279
00:10:22,160 --> 00:10:23,680
implemented the defense mechanism

280
00:10:23,680 --> 00:10:25,200
against the opening of unwanted

281
00:10:25,200 --> 00:10:26,720
javascript links

282
00:10:26,720 --> 00:10:29,120
so this did not work on whatsapp web on

283
00:10:29,120 --> 00:10:30,880
chrome when i found this vulnerability

284
00:10:30,880 --> 00:10:33,279
but it did work on safari and old edge

285
00:10:33,279 --> 00:10:36,399
browsers this point will meet us further

286
00:10:36,399 --> 00:10:37,920
along the talk as another point of

287
00:10:37,920 --> 00:10:41,040
failure in whatsapp

288
00:10:41,519 --> 00:10:44,399
so why is this so dangerous

289
00:10:44,399 --> 00:10:46,160
well first of all this is a cross-site

290
00:10:46,160 --> 00:10:48,640
scripting this gives

291
00:10:48,640 --> 00:10:51,360
anyone the ability to freely run code in

292
00:10:51,360 --> 00:10:53,200
anyone's login in whatsapp context the

293
00:10:53,200 --> 00:10:54,959
second they click this type of malphone

294
00:10:54,959 --> 00:10:57,200
message and once attackers have gained

295
00:10:57,200 --> 00:10:59,040
cross-site scripting abilities they can

296
00:10:59,040 --> 00:11:02,480
do pretty much anything they want

297
00:11:02,560 --> 00:11:05,279
they can steal messages images audios

298
00:11:05,279 --> 00:11:07,519
and more from the victim they can take

299
00:11:07,519 --> 00:11:09,279
actions in the name of the victim such

300
00:11:09,279 --> 00:11:12,000
as sending or deleting content an

301
00:11:12,000 --> 00:11:14,480
attacker can even use this vulnerability

302
00:11:14,480 --> 00:11:16,640
to spread a worm that when it's clicked

303
00:11:16,640 --> 00:11:18,320
sends itself to all of the victims

304
00:11:18,320 --> 00:11:20,720
contacts and steals all their personal

305
00:11:20,720 --> 00:11:22,720
whatsapp content for example

306
00:11:22,720 --> 00:11:24,079
this is

307
00:11:24,079 --> 00:11:25,680
really bad

308
00:11:25,680 --> 00:11:28,240
this is perhaps a new type of the most

309
00:11:28,240 --> 00:11:31,279
critical version of xss a client stored

310
00:11:31,279 --> 00:11:33,839
xss as the xss is stored within the

311
00:11:33,839 --> 00:11:36,720
message which is stored in and loaded by

312
00:11:36,720 --> 00:11:39,120
the victim's phone

313
00:11:39,120 --> 00:11:41,600
most would say this is as bad as it gets

314
00:11:41,600 --> 00:11:43,360
right well

315
00:11:43,360 --> 00:11:45,200
not me

316
00:11:45,200 --> 00:11:46,800
i wanted to prove i can leverage the

317
00:11:46,800 --> 00:11:48,959
exercise i found into a real life

318
00:11:48,959 --> 00:11:50,240
scenario

319
00:11:50,240 --> 00:11:52,079
attackers would have

320
00:11:52,079 --> 00:11:54,320
would have had a hard time weaponizing

321
00:11:54,320 --> 00:11:56,560
an xss when they cannot dynamically

322
00:11:56,560 --> 00:11:59,360
change the actual payload in other words

323
00:11:59,360 --> 00:12:01,600
if attackers want their payload to alert

324
00:12:01,600 --> 00:12:03,440
a message for example they would

325
00:12:03,440 --> 00:12:05,680
preferably want to control the content

326
00:12:05,680 --> 00:12:07,920
of the message remotely instead of hard

327
00:12:07,920 --> 00:12:10,560
coding it into the malicious message

328
00:12:10,560 --> 00:12:12,720
meaning i had to craft a message that

329
00:12:12,720 --> 00:12:14,399
loads the javascript payload from an

330
00:12:14,399 --> 00:12:17,440
external address and then executes it

331
00:12:17,440 --> 00:12:18,480
now

332
00:12:18,480 --> 00:12:19,920
i know what you're thinking a simple

333
00:12:19,920 --> 00:12:22,480
script element should do the trick right

334
00:12:22,480 --> 00:12:24,560
well not this time what's up web

335
00:12:24,560 --> 00:12:26,480
configured a clear content security

336
00:12:26,480 --> 00:12:28,399
policy that prevented me from easily

337
00:12:28,399 --> 00:12:30,800
loading an external script i had to find

338
00:12:30,800 --> 00:12:33,760
a way to bypass it

339
00:12:33,920 --> 00:12:37,200
but how does one bypass esp

340
00:12:37,200 --> 00:12:39,519
for me the easiest way to bypass the csv

341
00:12:39,519 --> 00:12:41,519
is to use the great tool called csp

342
00:12:41,519 --> 00:12:44,240
evaluator which when provided with a

343
00:12:44,240 --> 00:12:46,240
link can tell you how well configured

344
00:12:46,240 --> 00:12:48,880
the website's usb is

345
00:12:48,880 --> 00:12:50,480
by inserting

346
00:12:50,480 --> 00:12:51,839
um

347
00:12:51,839 --> 00:12:53,680
web.whatsapp.com

348
00:12:53,680 --> 00:12:55,600
this is what i got

349
00:12:55,600 --> 00:12:57,600
see that object src

350
00:12:57,600 --> 00:12:59,839
missing directive down there this is the

351
00:12:59,839 --> 00:13:03,279
vulnerability i was looking for

352
00:13:03,839 --> 00:13:05,279
immediately

353
00:13:05,279 --> 00:13:07,440
i immediately learned that their

354
00:13:07,440 --> 00:13:10,000
weakness is with the object src csp

355
00:13:10,000 --> 00:13:12,240
directive it is not configured

356
00:13:12,240 --> 00:13:14,560
this means i can fetch javascript and

357
00:13:14,560 --> 00:13:17,120
evaluate it using an object element and

358
00:13:17,120 --> 00:13:19,519
by that to fully bypass the configured

359
00:13:19,519 --> 00:13:22,079
csv of whatsapp web

360
00:13:22,079 --> 00:13:24,000
so this is what i'm going to do

361
00:13:24,000 --> 00:13:26,079
what i'll do is i'll use an object

362
00:13:26,079 --> 00:13:28,240
element as an iframe and load across the

363
00:13:28,240 --> 00:13:30,480
region window while registering a

364
00:13:30,480 --> 00:13:32,480
message listener awaiting javascript

365
00:13:32,480 --> 00:13:35,040
code to evaluate that cross-origin

366
00:13:35,040 --> 00:13:37,680
window will be to a server controlled by

367
00:13:37,680 --> 00:13:40,639
me which will serve a simple html that

368
00:13:40,639 --> 00:13:42,480
posts a message with the javascript

369
00:13:42,480 --> 00:13:45,040
content to evaluate that way i can

370
00:13:45,040 --> 00:13:47,360
change the content whenever i want since

371
00:13:47,360 --> 00:13:50,160
it is served by a server i control and

372
00:13:50,160 --> 00:13:52,320
be sure my malicious static message will

373
00:13:52,320 --> 00:13:54,240
always know how to load this dynamic

374
00:13:54,240 --> 00:13:56,959
payload even when it's changed

375
00:13:56,959 --> 00:13:58,720
this in fact allows me to update my

376
00:13:58,720 --> 00:14:01,120
attacking payload whenever and however i

377
00:14:01,120 --> 00:14:03,199
want without having to reinvoke the

378
00:14:03,199 --> 00:14:06,240
malicious message every time

379
00:14:06,240 --> 00:14:08,399
this really takes the attacking vector

380
00:14:08,399 --> 00:14:11,040
to another level this can truly serve

381
00:14:11,040 --> 00:14:13,680
attackers

382
00:14:14,839 --> 00:14:16,560
so

383
00:14:16,560 --> 00:14:19,199
this was it for me i managed to create a

384
00:14:19,199 --> 00:14:20,880
perfectly looking dangerous phishing

385
00:14:20,880 --> 00:14:22,800
messages and even worse messages that

386
00:14:22,800 --> 00:14:24,639
fetch external payloads and

387
00:14:24,639 --> 00:14:27,040
executes them under web.whatsapp.com

388
00:14:27,040 --> 00:14:28,880
when clicked

389
00:14:28,880 --> 00:14:31,120
unfortunately the impact was destined to

390
00:14:31,120 --> 00:14:33,760
be considered by facebook as less major

391
00:14:33,760 --> 00:14:36,560
since this didn't didn't work on latest

392
00:14:36,560 --> 00:14:40,000
chrome nor five works but it was still

393
00:14:40,000 --> 00:14:41,680
pretty impressive

394
00:14:41,680 --> 00:14:43,839
so after deciding that this was

395
00:14:43,839 --> 00:14:45,760
impressive enough to submit to facebook

396
00:14:45,760 --> 00:14:47,839
i worked on my disclosure documents in

397
00:14:47,839 --> 00:14:50,000
order to hand them over to facebook i

398
00:14:50,000 --> 00:14:52,079
went over to their reporter security

399
00:14:52,079 --> 00:14:54,399
vulnerability ui and i and selected

400
00:14:54,399 --> 00:14:57,199
whatsapp as the vulnerable product i was

401
00:14:57,199 --> 00:14:59,120
then asked to select the product's type

402
00:14:59,120 --> 00:15:02,079
my options were web ios android and then

403
00:15:02,079 --> 00:15:03,920
windows and mac

404
00:15:03,920 --> 00:15:05,680
i didn't even know

405
00:15:05,680 --> 00:15:08,000
windows and mac are options what does

406
00:15:08,000 --> 00:15:09,360
that even mean

407
00:15:09,360 --> 00:15:10,240
well

408
00:15:10,240 --> 00:15:11,920
a quick lookup on google is how i

409
00:15:11,920 --> 00:15:13,920
learned for the first time that there

410
00:15:13,920 --> 00:15:16,720
there is a desktop version for whatsapp

411
00:15:16,720 --> 00:15:17,519
i

412
00:15:17,519 --> 00:15:19,040
didn't even know

413
00:15:19,040 --> 00:15:21,920
i had to relax my enthusiasm to finish

414
00:15:21,920 --> 00:15:24,880
my disclosure in order to run one last

415
00:15:24,880 --> 00:15:26,959
quick look just to examine my finding on

416
00:15:26,959 --> 00:15:28,320
this new whatsapp platform i just

417
00:15:28,320 --> 00:15:30,000
discovered

418
00:15:30,000 --> 00:15:33,279
in my head i was very skeptical

419
00:15:33,279 --> 00:15:35,440
why would a web-based vulnerability work

420
00:15:35,440 --> 00:15:37,759
on a native desktop application i was

421
00:15:37,759 --> 00:15:40,000
ready to see it fails for myself get it

422
00:15:40,000 --> 00:15:43,759
over with and file the disclosure of it

423
00:15:44,639 --> 00:15:46,720
after downloading and installing

424
00:15:46,720 --> 00:15:48,480
whatsapp desktop on my private windows

425
00:15:48,480 --> 00:15:50,959
laptop and logging into my whatsapp

426
00:15:50,959 --> 00:15:53,279
account i clicked the xss message and i

427
00:15:53,279 --> 00:15:57,360
was just shocked to see this

428
00:15:58,399 --> 00:16:00,399
an alert popped

429
00:16:00,399 --> 00:16:02,720
how is that even possible isn't this

430
00:16:02,720 --> 00:16:04,000
native app

431
00:16:04,000 --> 00:16:05,680
and what is this funny looking alert

432
00:16:05,680 --> 00:16:06,720
message

433
00:16:06,720 --> 00:16:08,240
at this point i had to pause the

434
00:16:08,240 --> 00:16:09,440
disclosure

435
00:16:09,440 --> 00:16:11,839
process and learn more about what just

436
00:16:11,839 --> 00:16:13,519
happened here

437
00:16:13,519 --> 00:16:15,279
so another quick look up on google is

438
00:16:15,279 --> 00:16:17,360
how i learned that whatsapp desktop is

439
00:16:17,360 --> 00:16:19,680
built using a technology called electron

440
00:16:19,680 --> 00:16:21,279
for those of you are not familiar with

441
00:16:21,279 --> 00:16:23,120
the concept it is a chromium-based

442
00:16:23,120 --> 00:16:24,959
platform that lets you take a website

443
00:16:24,959 --> 00:16:26,880
built with standard web technologies

444
00:16:26,880 --> 00:16:30,079
such as html css and javascript and turn

445
00:16:30,079 --> 00:16:32,240
it into a native application

446
00:16:32,240 --> 00:16:33,199
sort of

447
00:16:33,199 --> 00:16:35,160
so the alert is empty probably because

448
00:16:35,160 --> 00:16:37,279
document.domain is an it

449
00:16:37,279 --> 00:16:39,920
is an irrelevant property under electron

450
00:16:39,920 --> 00:16:42,720
circumstances but the alert itself sure

451
00:16:42,720 --> 00:16:44,720
did work

452
00:16:44,720 --> 00:16:45,839
but

453
00:16:45,839 --> 00:16:48,560
if it is chromium based

454
00:16:48,560 --> 00:16:51,279
and latest chromium blocks javascript

455
00:16:51,279 --> 00:16:54,320
urls loading as we said before then how

456
00:16:54,320 --> 00:16:57,600
can the xss works

457
00:16:58,079 --> 00:16:58,959
well

458
00:16:58,959 --> 00:17:02,360
i updated the external payload to alert

459
00:17:02,360 --> 00:17:04,559
navigator.useragent and was both

460
00:17:04,559 --> 00:17:06,240
thrilled and disappointed at the same

461
00:17:06,240 --> 00:17:09,359
time to see the following message

462
00:17:09,359 --> 00:17:11,679
can you see the problem the next

463
00:17:11,679 --> 00:17:13,280
vulnerability in the story can be

464
00:17:13,280 --> 00:17:15,039
understood from this picture so take a

465
00:17:15,039 --> 00:17:16,959
couple of seconds to

466
00:17:16,959 --> 00:17:19,839
try to find it

467
00:17:23,119 --> 00:17:25,839
the latest whatsapp desktop app ran

468
00:17:25,839 --> 00:17:29,120
electron major version 4 which is based

469
00:17:29,120 --> 00:17:31,200
on chromium 69

470
00:17:31,200 --> 00:17:33,280
whereas the latest electron version was

471
00:17:33,280 --> 00:17:36,160
major version 7 at the time

472
00:17:36,160 --> 00:17:39,360
which is based on chromium 78

473
00:17:39,360 --> 00:17:40,720
this means

474
00:17:40,720 --> 00:17:44,400
what's up war distributing um an old and

475
00:17:44,400 --> 00:17:46,720
vulnerable version of chrome to us their

476
00:17:46,720 --> 00:17:49,120
users

477
00:17:49,200 --> 00:17:51,039
i immediately realized the potential

478
00:17:51,039 --> 00:17:53,520
impact in the very odd fusion of having

479
00:17:53,520 --> 00:17:56,559
an xss on a native app and try to prove

480
00:17:56,559 --> 00:17:58,320
i can use this

481
00:17:58,320 --> 00:18:00,240
to access local resources on the machine

482
00:18:00,240 --> 00:18:02,640
itself

483
00:18:02,799 --> 00:18:04,080
so

484
00:18:04,080 --> 00:18:05,919
by fetching the following external

485
00:18:05,919 --> 00:18:07,760
payload

486
00:18:07,760 --> 00:18:10,240
i managed to obtain the content of the

487
00:18:10,240 --> 00:18:12,799
local system hosts file

488
00:18:12,799 --> 00:18:15,840
as you can see here

489
00:18:16,320 --> 00:18:19,120
this is such a major escalation not only

490
00:18:19,120 --> 00:18:20,799
i used xss to run code under

491
00:18:20,799 --> 00:18:22,320
web.whatsapp.com

492
00:18:22,320 --> 00:18:24,320
i can now use this code to access the

493
00:18:24,320 --> 00:18:26,320
file system of the machine that hosts

494
00:18:26,320 --> 00:18:28,720
the whatsapp application

495
00:18:28,720 --> 00:18:30,880
unfortunately i did not take the time to

496
00:18:30,880 --> 00:18:32,960
prove this but theoretically obtaining

497
00:18:32,960 --> 00:18:35,039
an rce should be possible at this point

498
00:18:35,039 --> 00:18:37,200
based on the fact that there were more

499
00:18:37,200 --> 00:18:39,120
than one publicly disclosed rc

500
00:18:39,120 --> 00:18:41,280
vulnerabilities that were patched only

501
00:18:41,280 --> 00:18:44,160
after chrome 69 and could be fully

502
00:18:44,160 --> 00:18:48,640
exploited via javascript code execution

503
00:18:48,640 --> 00:18:51,840
the implications of a scenario where rce

504
00:18:51,840 --> 00:18:53,679
is possible could have been huge

505
00:18:53,679 --> 00:18:56,000
attackers could have used these exploits

506
00:18:56,000 --> 00:18:57,039
to

507
00:18:57,039 --> 00:18:59,520
spread a ransomware worm that when is

508
00:18:59,520 --> 00:19:02,080
clicked sends itself to all contacts and

509
00:19:02,080 --> 00:19:03,919
an encrypts file system entirely

510
00:19:03,919 --> 00:19:05,520
demanding the victim to pay for the

511
00:19:05,520 --> 00:19:06,880
decryption key

512
00:19:06,880 --> 00:19:07,840
or

513
00:19:07,840 --> 00:19:10,559
steal content or passwords that are

514
00:19:10,559 --> 00:19:12,480
saved on the local computer

515
00:19:12,480 --> 00:19:14,720
or even install a spyware

516
00:19:14,720 --> 00:19:15,760
however

517
00:19:15,760 --> 00:19:17,679
the rca part was never proven and

518
00:19:17,679 --> 00:19:20,080
therefore remains theoretical but still

519
00:19:20,080 --> 00:19:22,480
the implications of the proven read from

520
00:19:22,480 --> 00:19:26,960
the file system ability are enormous

521
00:19:27,120 --> 00:19:29,840
so this was it for me

522
00:19:29,840 --> 00:19:31,120
from a

523
00:19:31,120 --> 00:19:34,160
reply text fabrication to a simple yet

524
00:19:34,160 --> 00:19:36,880
powerful open redirect through a client

525
00:19:36,880 --> 00:19:40,640
client-stored xss both on web

526
00:19:40,640 --> 00:19:41,600
and

527
00:19:41,600 --> 00:19:43,200
on desktop

528
00:19:43,200 --> 00:19:46,799
to a csp bypass all the way to a read

529
00:19:46,799 --> 00:19:49,120
from the file system ability with a

530
00:19:49,120 --> 00:19:51,840
theoretical potential for remote code

531
00:19:51,840 --> 00:19:53,440
execution

532
00:19:53,440 --> 00:19:55,360
this is how my research has come to its

533
00:19:55,360 --> 00:19:56,480
end

534
00:19:56,480 --> 00:19:58,160
i reported all of these flaws to

535
00:19:58,160 --> 00:19:59,520
facebook and was granted with an

536
00:19:59,520 --> 00:20:02,000
appropriate bounty and this was the end

537
00:20:02,000 --> 00:20:04,400
of the adventure the research journey is

538
00:20:04,400 --> 00:20:06,960
over

539
00:20:06,960 --> 00:20:09,760
so why am i telling you all this well

540
00:20:09,760 --> 00:20:11,840
first of all i wanted to give you a peek

541
00:20:11,840 --> 00:20:13,840
into how web applications hacking looks

542
00:20:13,840 --> 00:20:16,320
like in 2020 i wanted you to learn how

543
00:20:16,320 --> 00:20:18,320
fun and interesting it could be and how

544
00:20:18,320 --> 00:20:20,480
thinking like a black hat can really

545
00:20:20,480 --> 00:20:22,880
help in the process of research

546
00:20:22,880 --> 00:20:24,880
but i also wanted to stress how

547
00:20:24,880 --> 00:20:26,799
dangerous such vulnerabilities can be to

548
00:20:26,799 --> 00:20:28,320
us users

549
00:20:28,320 --> 00:20:30,240
messaging apps contain the biggest

550
00:20:30,240 --> 00:20:31,600
amount of information that we would

551
00:20:31,600 --> 00:20:33,600
consider as extremely private i'm

552
00:20:33,600 --> 00:20:35,760
talking about pictures and texts we send

553
00:20:35,760 --> 00:20:38,159
to each other on a daily basis we tend

554
00:20:38,159 --> 00:20:41,520
to feel very safe there but abusing such

555
00:20:41,520 --> 00:20:42,960
vulnerabilities might shatter the

556
00:20:42,960 --> 00:20:44,320
illusion and

557
00:20:44,320 --> 00:20:48,240
once it does it can be very unpleasant

558
00:20:48,240 --> 00:20:50,559
but messaging apps are not going

559
00:20:50,559 --> 00:20:53,200
anywhere and if that's the case the

560
00:20:53,200 --> 00:20:55,120
least that can be done is to work hard

561
00:20:55,120 --> 00:20:57,840
in making our experience safer which is

562
00:20:57,840 --> 00:21:00,159
what we as users expect from the vendors

563
00:21:00,159 --> 00:21:02,159
of those apps

564
00:21:02,159 --> 00:21:04,080
and this is another reason why i'm

565
00:21:04,080 --> 00:21:06,640
telling you this i want my research to

566
00:21:06,640 --> 00:21:09,200
not only be a cool hacking journey but

567
00:21:09,200 --> 00:21:11,360
to be a string of lessons passed on to

568
00:21:11,360 --> 00:21:13,440
the messaging apps vendors to be used to

569
00:21:13,440 --> 00:21:15,760
enhance the security of these products

570
00:21:15,760 --> 00:21:16,799
so let's go over the different

571
00:21:16,799 --> 00:21:18,159
achievements that we're gaining the

572
00:21:18,159 --> 00:21:20,880
process and make sure we learn from each

573
00:21:20,880 --> 00:21:23,840
and every one of them

574
00:21:25,120 --> 00:21:27,039
so my first achievement was to

575
00:21:27,039 --> 00:21:29,520
successfully fabricate the reply text of

576
00:21:29,520 --> 00:21:31,280
a message

577
00:21:31,280 --> 00:21:32,799
protecting

578
00:21:32,799 --> 00:21:35,840
this should be quite easy simply rely on

579
00:21:35,840 --> 00:21:37,760
the idea of the reply message instead of

580
00:21:37,760 --> 00:21:40,880
its textual content invalid id invalid

581
00:21:40,880 --> 00:21:42,640
message as simple as that

582
00:21:42,640 --> 00:21:44,720
then have the receiving side to the link

583
00:21:44,720 --> 00:21:47,120
to the reply message this should not be

584
00:21:47,120 --> 00:21:50,080
in the end of the sender

585
00:21:50,080 --> 00:21:51,760
my second achievement was the open

586
00:21:51,760 --> 00:21:54,000
redirect now this is a tricky one

587
00:21:54,000 --> 00:21:56,159
because on the one hand you don't want

588
00:21:56,159 --> 00:21:57,919
the link to be fetched on the receiving

589
00:21:57,919 --> 00:22:00,080
side otherwise attackers could exploit

590
00:22:00,080 --> 00:22:02,320
the fact that they control the content

591
00:22:02,320 --> 00:22:04,880
that is pre-fetched by the victim when

592
00:22:04,880 --> 00:22:07,200
their device preloads the link but on

593
00:22:07,200 --> 00:22:08,480
the other hand

594
00:22:08,480 --> 00:22:10,159
you don't want the link to be fetched on

595
00:22:10,159 --> 00:22:12,640
the sending side otherwise mitigating

596
00:22:12,640 --> 00:22:15,440
the open redirect issue presented in the

597
00:22:15,440 --> 00:22:18,799
achievement would be almost impossible

598
00:22:18,799 --> 00:22:20,640
so in my opinion the best solution would

599
00:22:20,640 --> 00:22:23,120
be to let the server in the middle be

600
00:22:23,120 --> 00:22:24,960
responsible for constructing the preview

601
00:22:24,960 --> 00:22:27,360
banner based on the receiving on the

602
00:22:27,360 --> 00:22:29,440
received link in the message

603
00:22:29,440 --> 00:22:31,600
in general links fetching and loading

604
00:22:31,600 --> 00:22:33,520
should take place in the server of the

605
00:22:33,520 --> 00:22:35,760
messaging app not

606
00:22:35,760 --> 00:22:40,559
and and not by any of the end users

607
00:22:40,559 --> 00:22:42,559
my third achievement was to successfully

608
00:22:42,559 --> 00:22:44,880
replace a legitimate https banner with a

609
00:22:44,880 --> 00:22:48,880
javascript banner thus obtaining xss

610
00:22:48,880 --> 00:22:51,280
validations are the responsibility of

611
00:22:51,280 --> 00:22:53,600
the receiving side much more than the

612
00:22:53,600 --> 00:22:54,880
sender side

613
00:22:54,880 --> 00:22:57,440
when a message is received the receive

614
00:22:57,440 --> 00:22:59,679
the receiver's and responsibility is to

615
00:22:59,679 --> 00:23:02,159
go over all the links in the message and

616
00:23:02,159 --> 00:23:04,080
get rid of all schemes that are

617
00:23:04,080 --> 00:23:07,039
disallowed such as javascript or data or

618
00:23:07,039 --> 00:23:10,320
blob and and so on because you simply

619
00:23:10,320 --> 00:23:12,400
cannot trust a sender

620
00:23:12,400 --> 00:23:14,799
maintaining an allowed list would have

621
00:23:14,799 --> 00:23:17,039
been ideal if schemes options were not

622
00:23:17,039 --> 00:23:19,600
infinite but every app can register its

623
00:23:19,600 --> 00:23:22,240
own made up scheme basically so that's

624
00:23:22,240 --> 00:23:26,320
not an option unfortunately

625
00:23:27,280 --> 00:23:29,440
my fourth achievement was to bypass the

626
00:23:29,440 --> 00:23:31,520
csp to successfully communicate with the

627
00:23:31,520 --> 00:23:33,840
attacker's server thus maintaining a

628
00:23:33,840 --> 00:23:37,120
successful attacking vector csp is also

629
00:23:37,120 --> 00:23:39,440
a tricky one the world failed to adopt

630
00:23:39,440 --> 00:23:41,840
csp as a web application security layer

631
00:23:41,840 --> 00:23:44,000
we understand it now after years of

632
00:23:44,000 --> 00:23:46,159
failing attempts to integrate it

633
00:23:46,159 --> 00:23:47,440
not many companies have correctly

634
00:23:47,440 --> 00:23:49,679
implemented csp in fact

635
00:23:49,679 --> 00:23:52,000
most companies either wrongly integrate

636
00:23:52,000 --> 00:23:54,559
it or don't integrate it at all

637
00:23:54,559 --> 00:23:56,720
in another article i published a few

638
00:23:56,720 --> 00:24:00,240
months ago along with a full csp bybest

639
00:24:00,240 --> 00:24:02,640
zero day vulnerability in chromium-based

640
00:24:02,640 --> 00:24:04,799
browser i talked just about that i talk

641
00:24:04,799 --> 00:24:06,960
about the problem with csp and why it is

642
00:24:06,960 --> 00:24:09,200
so poorly adopted by the world of web

643
00:24:09,200 --> 00:24:10,880
based on another research i did around

644
00:24:10,880 --> 00:24:13,600
the csp bypass vulnerability i found

645
00:24:13,600 --> 00:24:15,919
well ideally i would expect the

646
00:24:15,919 --> 00:24:17,840
messaging services along with the rest

647
00:24:17,840 --> 00:24:19,760
of the world to harden their content

648
00:24:19,760 --> 00:24:21,600
security policy

649
00:24:21,600 --> 00:24:23,200
but since

650
00:24:23,200 --> 00:24:25,600
csp's history taught us that that's not

651
00:24:25,600 --> 00:24:28,080
going to happen i suggest integrating

652
00:24:28,080 --> 00:24:29,840
external services that monitor and

653
00:24:29,840 --> 00:24:32,159
display web pages behavior in a much

654
00:24:32,159 --> 00:24:34,799
closer resolution than csps

655
00:24:34,799 --> 00:24:36,960
such products like parameterx's

656
00:24:36,960 --> 00:24:39,120
co-defender can detect such attacks

657
00:24:39,120 --> 00:24:41,120
without necessarily blocking them thus

658
00:24:41,120 --> 00:24:43,679
providing a clear image of suspicious

659
00:24:43,679 --> 00:24:46,559
behavior in web pages along with a lacks

660
00:24:46,559 --> 00:24:49,279
policy configuration

661
00:24:49,279 --> 00:24:50,480
any

662
00:24:50,480 --> 00:24:52,240
any of these

663
00:24:52,240 --> 00:24:54,640
choices is fine but not taking the

664
00:24:54,640 --> 00:24:57,279
problem that csp or code defender come

665
00:24:57,279 --> 00:24:59,600
to solve seriously is simply

666
00:24:59,600 --> 00:25:03,760
unacceptable as it leaves us vulnerable

667
00:25:04,640 --> 00:25:06,720
my fifth achievement was the ability to

668
00:25:06,720 --> 00:25:09,279
load the javascript url due to whatsapp

669
00:25:09,279 --> 00:25:11,440
desktop

670
00:25:11,440 --> 00:25:13,279
being based on a vulnerable version of

671
00:25:13,279 --> 00:25:14,559
chromium

672
00:25:14,559 --> 00:25:17,200
this one is super important and it is

673
00:25:17,200 --> 00:25:20,080
the most basic role in software shipping

674
00:25:20,080 --> 00:25:22,159
never distribute

675
00:25:22,159 --> 00:25:23,600
applications that are based on

676
00:25:23,600 --> 00:25:25,679
technologies that are publicly known to

677
00:25:25,679 --> 00:25:27,279
be vulnerable

678
00:25:27,279 --> 00:25:29,039
if your product is based on a certain

679
00:25:29,039 --> 00:25:31,039
technology that was discovered to be

680
00:25:31,039 --> 00:25:33,840
vulnerable you must update it and

681
00:25:33,840 --> 00:25:35,679
release a patch version immediately

682
00:25:35,679 --> 00:25:38,080
otherwise you leave your users in clear

683
00:25:38,080 --> 00:25:39,520
danger due to pure lack of

684
00:25:39,520 --> 00:25:41,360
irresponsibility

685
00:25:41,360 --> 00:25:43,039
i reported the issue to facebook on

686
00:25:43,039 --> 00:25:46,320
december 2019 at the time their latest

687
00:25:46,320 --> 00:25:49,039
whatsapp desktop was based on an 8 month

688
00:25:49,039 --> 00:25:51,039
old electro version

689
00:25:51,039 --> 00:25:52,480
never let this happen when your

690
00:25:52,480 --> 00:25:54,640
dependencies update your product has to

691
00:25:54,640 --> 00:25:57,200
update as well

692
00:25:57,200 --> 00:25:59,679
my sixth achievement was the ability to

693
00:25:59,679 --> 00:26:02,320
read content from the file system

694
00:26:02,320 --> 00:26:04,320
cross-site scripting is one thing but

695
00:26:04,320 --> 00:26:06,480
that doesn't mean basic javascript code

696
00:26:06,480 --> 00:26:08,799
in the web page should have permissions

697
00:26:08,799 --> 00:26:12,080
to access file scheme urls

698
00:26:12,080 --> 00:26:14,400
in other words take risks under

699
00:26:14,400 --> 00:26:16,799
consideration when granting privileges

700
00:26:16,799 --> 00:26:18,640
to different parts of the app

701
00:26:18,640 --> 00:26:21,200
if someone managed to execute javascript

702
00:26:21,200 --> 00:26:23,120
code in your application

703
00:26:23,120 --> 00:26:25,600
what's the biggest damage they can cause

704
00:26:25,600 --> 00:26:27,600
keep asking and answering yourself that

705
00:26:27,600 --> 00:26:30,159
until the answer is as close to nothing

706
00:26:30,159 --> 00:26:32,880
as possible

707
00:26:36,320 --> 00:26:38,720
i want to quickly recap the different

708
00:26:38,720 --> 00:26:40,799
parts and conclusions of the talk before

709
00:26:40,799 --> 00:26:43,039
finishing up just to make sure you take

710
00:26:43,039 --> 00:26:44,960
something out of this talk with you

711
00:26:44,960 --> 00:26:48,880
apart from the entertainment itself

712
00:26:48,960 --> 00:26:51,679
so for the hackers and the researchers

713
00:26:51,679 --> 00:26:55,120
um you can still find hardcore xss

714
00:26:55,120 --> 00:26:57,440
vulnerabilities in top tier services

715
00:26:57,440 --> 00:27:00,240
even in 2020 look them up

716
00:27:00,240 --> 00:27:02,799
responsibil responsibly disclose them to

717
00:27:02,799 --> 00:27:05,520
the vendors of the vulnerable apps help

718
00:27:05,520 --> 00:27:08,480
protect us in the most intimate

719
00:27:08,480 --> 00:27:11,919
technology we use on a daily basis

720
00:27:11,919 --> 00:27:14,480
think like an attacker it is very hard

721
00:27:14,480 --> 00:27:16,240
to find such severe vulnerabilities

722
00:27:16,240 --> 00:27:20,120
while thinking like a defender

723
00:27:20,240 --> 00:27:24,000
um for the messaging apps vendors

724
00:27:24,000 --> 00:27:26,080
carefully manage the privileges you

725
00:27:26,080 --> 00:27:28,799
grant to the different parts of your app

726
00:27:28,799 --> 00:27:32,159
either harden your csp or integrate and

727
00:27:32,159 --> 00:27:34,640
enhance behavior monitoring solution but

728
00:27:34,640 --> 00:27:36,399
please make sure this layer of security

729
00:27:36,399 --> 00:27:38,880
is taken care of

730
00:27:38,880 --> 00:27:41,039
validate the content that is sent on the

731
00:27:41,039 --> 00:27:43,039
receiving side before you present it to

732
00:27:43,039 --> 00:27:45,279
the receiver

733
00:27:45,279 --> 00:27:47,440
do not ship applications that rely on

734
00:27:47,440 --> 00:27:49,600
dependencies that are publicly known to

735
00:27:49,600 --> 00:27:52,320
be vulnerable

736
00:27:52,399 --> 00:27:54,880
we love messaging apps they're amazing

737
00:27:54,880 --> 00:27:57,440
they made everything better really we

738
00:27:57,440 --> 00:27:59,360
are glad to support you by using your

739
00:27:59,360 --> 00:28:01,600
products but we ask your support and

740
00:28:01,600 --> 00:28:03,360
respect to be mutual

741
00:28:03,360 --> 00:28:05,279
take our need to feel safe when using

742
00:28:05,279 --> 00:28:07,840
your product seriously and embrace the

743
00:28:07,840 --> 00:28:10,559
points listed above to your products in

744
00:28:10,559 --> 00:28:13,039
order to better secure us

745
00:28:13,039 --> 00:28:14,840
and for the

746
00:28:14,840 --> 00:28:18,480
users both the breakers and the builders

747
00:28:18,480 --> 00:28:21,600
we're doing our best to make sure you

748
00:28:21,600 --> 00:28:23,279
are as safe as possible when using your

749
00:28:23,279 --> 00:28:25,520
favorite messages in messaging apps

750
00:28:25,520 --> 00:28:27,520
learning that you were exposed to such

751
00:28:27,520 --> 00:28:30,000
vulnerabilities can be disappointing but

752
00:28:30,000 --> 00:28:31,360
bear with us

753
00:28:31,360 --> 00:28:33,360
fully securing such complex apps is a

754
00:28:33,360 --> 00:28:35,840
process we're getting there

755
00:28:35,840 --> 00:28:37,919
oh and um

756
00:28:37,919 --> 00:28:40,559
one more thing uh be very suspicious

757
00:28:40,559 --> 00:28:42,559
before clicking links even if received

758
00:28:42,559 --> 00:28:44,720
in your favorite messaging apps you have

759
00:28:44,720 --> 00:28:47,039
just been proven how links are still not

760
00:28:47,039 --> 00:28:51,039
perfectly safe even in 2020

761
00:28:51,120 --> 00:28:53,360
i hope you enjoy this talk but more

762
00:28:53,360 --> 00:28:54,960
importantly i hope you will take

763
00:28:54,960 --> 00:28:57,120
something with you out of it

764
00:28:57,120 --> 00:28:58,799
oh and remember always travel with a

765
00:28:58,799 --> 00:29:00,159
laptop

766
00:29:00,159 --> 00:29:02,720
thank you

