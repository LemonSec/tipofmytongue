1
00:00:00,260 --> 00:00:17,990
[Music]

2
00:00:19,279 --> 00:00:21,279
hey everyone thanks so much for taking

3
00:00:21,279 --> 00:00:23,519
the time to make the trip out to see

4
00:00:23,519 --> 00:00:26,800
this talk uh but seriously though uh we

5
00:00:26,800 --> 00:00:29,119
hope you and your loved ones are safe

6
00:00:29,119 --> 00:00:32,159
and healthy during these unusual times

7
00:00:32,159 --> 00:00:33,760
so today we're going to be talking about

8
00:00:33,760 --> 00:00:35,840
eradicating vulnerability classes by

9
00:00:35,840 --> 00:00:37,840
shelving sast and embracing secure

10
00:00:37,840 --> 00:00:40,000
defaults and invariants

11
00:00:40,000 --> 00:00:40,879
so

12
00:00:40,879 --> 00:00:42,960
this talk is going to

13
00:00:42,960 --> 00:00:45,600
take a bit of a different angle than

14
00:00:45,600 --> 00:00:48,879
many tools talks and really the industry

15
00:00:48,879 --> 00:00:50,160
as a whole

16
00:00:50,160 --> 00:00:52,000
so there's a number of benefits to this

17
00:00:52,000 --> 00:00:53,039
different approach we're going to be

18
00:00:53,039 --> 00:00:54,399
describing

19
00:00:54,399 --> 00:00:55,680
first is that

20
00:00:55,680 --> 00:00:57,199
it's going to enable us to focus on

21
00:00:57,199 --> 00:00:59,039
killing bug classes

22
00:00:59,039 --> 00:01:01,840
rather than one-off ad-hoc wins and this

23
00:01:01,840 --> 00:01:03,760
enables us to be very scalable and

24
00:01:03,760 --> 00:01:05,920
systematic as appsec programs and really

25
00:01:05,920 --> 00:01:07,920
get some nice long-term wins we're going

26
00:01:07,920 --> 00:01:10,000
to talk about how to enable developers

27
00:01:10,000 --> 00:01:12,560
to move fast and securely and how the

28
00:01:12,560 --> 00:01:14,560
security team can be business enablers

29
00:01:14,560 --> 00:01:16,400
not another point of friction

30
00:01:16,400 --> 00:01:18,080
and most importantly we're going to talk

31
00:01:18,080 --> 00:01:20,400
about a methodology as well as some

32
00:01:20,400 --> 00:01:22,640
concrete action steps on how to do this

33
00:01:22,640 --> 00:01:24,560
at your company using free and open

34
00:01:24,560 --> 00:01:27,439
source tools

35
00:01:27,439 --> 00:01:28,960
but before we get into it a little bit

36
00:01:28,960 --> 00:01:31,360
about us so my name is clint i'm

37
00:01:31,360 --> 00:01:33,040
currently the head of security research

38
00:01:33,040 --> 00:01:34,240
at r2c

39
00:01:34,240 --> 00:01:36,320
and before that i was a research

40
00:01:36,320 --> 00:01:38,320
director and technical director at ncc

41
00:01:38,320 --> 00:01:39,920
group which is a global consulting firm

42
00:01:39,920 --> 00:01:41,040
where i did

43
00:01:41,040 --> 00:01:43,200
pen testing as well as helping companies

44
00:01:43,200 --> 00:01:44,799
scale their security with security

45
00:01:44,799 --> 00:01:47,119
automation as well as devsecops

46
00:01:47,119 --> 00:01:49,840
practices before that i was an

47
00:01:49,840 --> 00:01:51,759
indentured servant i mean grad student

48
00:01:51,759 --> 00:01:53,360
at uc davis

49
00:01:53,360 --> 00:01:55,840
and today i'm joined by isaac who is one

50
00:01:55,840 --> 00:01:58,479
of the co-founders and ceo of r2c

51
00:01:58,479 --> 00:02:00,320
previously was at mit

52
00:02:00,320 --> 00:02:03,839
and mit lincoln labs

53
00:02:04,640 --> 00:02:07,680
all right so here's a big picture what

54
00:02:07,680 --> 00:02:09,758
this talk is about so first we're going

55
00:02:09,758 --> 00:02:11,120
to give some sort of background and

56
00:02:11,120 --> 00:02:13,840
motivation about why bug finding isn't

57
00:02:13,840 --> 00:02:15,040
the answer

58
00:02:15,040 --> 00:02:16,560
then we're going to talk about how to

59
00:02:16,560 --> 00:02:18,400
eradicate vulnerability classes sort of

60
00:02:18,400 --> 00:02:20,959
a high-level methodology of how to do so

61
00:02:20,959 --> 00:02:22,239
then we're going to get into the

62
00:02:22,239 --> 00:02:24,160
nitty-gritty in a bit more detail about

63
00:02:24,160 --> 00:02:25,120
how

64
00:02:25,120 --> 00:02:27,200
to actually do this in practice using

65
00:02:27,200 --> 00:02:28,959
the right tools and techniques and then

66
00:02:28,959 --> 00:02:30,560
finally we'll talk a little bit about

67
00:02:30,560 --> 00:02:32,400
the sort of future of security and where

68
00:02:32,400 --> 00:02:34,400
we believe things are headed and how

69
00:02:34,400 --> 00:02:36,400
security teams and framework

70
00:02:36,400 --> 00:02:39,440
creators can collaborate

71
00:02:40,480 --> 00:02:42,000
all right so first

72
00:02:42,000 --> 00:02:45,680
why bug finding isn't the answer

73
00:02:46,560 --> 00:02:48,959
so in the past 5 10 and 15 years

74
00:02:48,959 --> 00:02:50,720
software development has changed a lot

75
00:02:50,720 --> 00:02:52,560
and because of that security teams need

76
00:02:52,560 --> 00:02:53,920
to as well

77
00:02:53,920 --> 00:02:56,160
based on uh chats i've had with friends

78
00:02:56,160 --> 00:02:58,080
of mine at many different companies

79
00:02:58,080 --> 00:02:59,599
there's sort of this new reality many

80
00:02:59,599 --> 00:03:01,440
security teams are facing

81
00:03:01,440 --> 00:03:03,440
specifically you know security teams

82
00:03:03,440 --> 00:03:05,599
often can't hard block engineering that

83
00:03:05,599 --> 00:03:06,879
is if there's something

84
00:03:06,879 --> 00:03:08,720
developers want to do very rarely can

85
00:03:08,720 --> 00:03:10,400
the security team say no unless it's

86
00:03:10,400 --> 00:03:13,040
something very important and critical

87
00:03:13,040 --> 00:03:15,040
security can no longer be point in time

88
00:03:15,040 --> 00:03:16,560
it must be continuous

89
00:03:16,560 --> 00:03:18,640
and many security teams are focused on

90
00:03:18,640 --> 00:03:20,080
building you know like security

91
00:03:20,080 --> 00:03:21,920
engineering rather than just breaking

92
00:03:21,920 --> 00:03:23,760
and finding bugs

93
00:03:23,760 --> 00:03:25,920
uh and no longer are security teams sort

94
00:03:25,920 --> 00:03:27,840
of like this isolated uh working on

95
00:03:27,840 --> 00:03:30,720
their own uh type team and force within

96
00:03:30,720 --> 00:03:32,959
a company often now they are embedded or

97
00:03:32,959 --> 00:03:34,560
at least partnered closely with

98
00:03:34,560 --> 00:03:36,480
development teams so

99
00:03:36,480 --> 00:03:38,000
uh because there's all these changes in

100
00:03:38,000 --> 00:03:39,840
how things are working i think that it's

101
00:03:39,840 --> 00:03:42,159
important for us to revisit our prior

102
00:03:42,159 --> 00:03:43,599
assumptions about how to be most

103
00:03:43,599 --> 00:03:45,360
effective as security teams in

104
00:03:45,360 --> 00:03:47,360
supporting our company's mission given

105
00:03:47,360 --> 00:03:49,440
that so the world is very different than

106
00:03:49,440 --> 00:03:52,000
it used to be

107
00:03:52,239 --> 00:03:54,560
and i think there's some uh analogous

108
00:03:54,560 --> 00:03:56,319
things in just sort of broader tech in

109
00:03:56,319 --> 00:03:58,640
general there's been some significant

110
00:03:58,640 --> 00:04:00,560
shifts from how we used to do things to

111
00:04:00,560 --> 00:04:02,400
how things are done now

112
00:04:02,400 --> 00:04:04,720
here's a couple of examples so

113
00:04:04,720 --> 00:04:07,040
we used to use a waterfall development

114
00:04:07,040 --> 00:04:07,840
where

115
00:04:07,840 --> 00:04:08,720
uh

116
00:04:08,720 --> 00:04:10,159
programming happened over long periods

117
00:04:10,159 --> 00:04:12,480
of time and now there's this big

118
00:04:12,480 --> 00:04:14,159
adoption of agile where things are rapid

119
00:04:14,159 --> 00:04:15,680
and iterative

120
00:04:15,680 --> 00:04:18,000
previously there was very separate dev

121
00:04:18,000 --> 00:04:19,358
and ops teams

122
00:04:19,358 --> 00:04:20,639
and now many companies are embracing

123
00:04:20,639 --> 00:04:22,400
devops where these functions

124
00:04:22,400 --> 00:04:24,479
are partially or wholly merged

125
00:04:24,479 --> 00:04:26,080
previously many

126
00:04:26,080 --> 00:04:27,600
servers for your company were probably

127
00:04:27,600 --> 00:04:29,600
on-prem uh but now there's this massive

128
00:04:29,600 --> 00:04:31,680
adoption of the cloud so in all these

129
00:04:31,680 --> 00:04:33,600
cases uh

130
00:04:33,600 --> 00:04:36,080
it hasn't been sort of an immediate jump

131
00:04:36,080 --> 00:04:37,520
uh from the left to the right side but

132
00:04:37,520 --> 00:04:39,919
there has over time been this gradual

133
00:04:39,919 --> 00:04:42,160
shift as we as an industry realize hey

134
00:04:42,160 --> 00:04:43,759
there's actually a lot of benefits to

135
00:04:43,759 --> 00:04:46,080
doing things a very different way

136
00:04:46,080 --> 00:04:48,080
and i think there's a similar equally

137
00:04:48,080 --> 00:04:50,000
important shift happening in security

138
00:04:50,000 --> 00:04:52,560
where previously we were focusing on

139
00:04:52,560 --> 00:04:55,360
finding vulnerabilities but now based on

140
00:04:55,360 --> 00:04:56,960
talks i've had with a number of very

141
00:04:56,960 --> 00:04:58,960
forward-thinking smart security teams

142
00:04:58,960 --> 00:05:01,120
we're instead leaning towards secure

143
00:05:01,120 --> 00:05:03,759
defaults and invariants

144
00:05:03,759 --> 00:05:06,560
and what i mean by invariant is just

145
00:05:06,560 --> 00:05:08,880
a property about the code or the system

146
00:05:08,880 --> 00:05:11,280
as a whole that must either always or

147
00:05:11,280 --> 00:05:13,199
never be true and what we're going to

148
00:05:13,199 --> 00:05:15,919
talk about is how by setting the strong

149
00:05:15,919 --> 00:05:18,560
invariance this is going to let you

150
00:05:18,560 --> 00:05:21,360
significantly de-risk systems and really

151
00:05:21,360 --> 00:05:23,520
have some nice scalable security wins

152
00:05:23,520 --> 00:05:26,160
and sort of the key insight here is that

153
00:05:26,160 --> 00:05:28,479
when you don't need any context to make

154
00:05:28,479 --> 00:05:30,720
a decision like in this case we always

155
00:05:30,720 --> 00:05:33,280
either block or deny for example

156
00:05:33,280 --> 00:05:35,440
this requires no operational time for

157
00:05:35,440 --> 00:05:38,000
the security team which lets you sort of

158
00:05:38,000 --> 00:05:39,840
uh knock off a bunch of different wins

159
00:05:39,840 --> 00:05:42,160
and then uh focus on other things so

160
00:05:42,160 --> 00:05:43,759
again becoming more leveraged with your

161
00:05:43,759 --> 00:05:45,840
time

162
00:05:45,840 --> 00:05:47,759
okay so uh going to give you a couple of

163
00:05:47,759 --> 00:05:49,280
motivating examples

164
00:05:49,280 --> 00:05:51,120
so let's say i gave you a random web

165
00:05:51,120 --> 00:05:52,240
application that you've never seen

166
00:05:52,240 --> 00:05:54,479
before and asked you does this have

167
00:05:54,479 --> 00:05:56,319
cross-site scripting in it

168
00:05:56,319 --> 00:05:57,039
so

169
00:05:57,039 --> 00:05:58,880
knowing nothing about it nothing about

170
00:05:58,880 --> 00:06:00,160
it you probably would have a number of

171
00:06:00,160 --> 00:06:02,240
questions like okay well what can the

172
00:06:02,240 --> 00:06:04,160
user provide um

173
00:06:04,160 --> 00:06:05,280
you know what's the structure of that

174
00:06:05,280 --> 00:06:07,840
data is it just like numbers is it

175
00:06:07,840 --> 00:06:10,639
strings is it sort of arbitrary adjacent

176
00:06:10,639 --> 00:06:12,800
data once the web app gets it is this

177
00:06:12,800 --> 00:06:14,960
input filtered before it's uh stored to

178
00:06:14,960 --> 00:06:16,960
the database how is the information

179
00:06:16,960 --> 00:06:18,800
stored in the database in terms of you

180
00:06:18,800 --> 00:06:20,880
know is it converted into say integers

181
00:06:20,880 --> 00:06:22,720
and floats is it strings is it arbitrary

182
00:06:22,720 --> 00:06:25,039
json data maybe we care about if it's

183
00:06:25,039 --> 00:06:27,840
mysql versus postgres uh when the data

184
00:06:27,840 --> 00:06:30,240
is returned from the database uh does

185
00:06:30,240 --> 00:06:32,160
the web application do any additional

186
00:06:32,160 --> 00:06:33,919
filtering and processing

187
00:06:33,919 --> 00:06:35,680
does it output encode it

188
00:06:35,680 --> 00:06:37,600
when it's sent to the browser

189
00:06:37,600 --> 00:06:39,280
where is the user input included in the

190
00:06:39,280 --> 00:06:42,160
page is it in html or an html attribute

191
00:06:42,160 --> 00:06:44,880
or javascript or all sorts of things so

192
00:06:44,880 --> 00:06:46,960
to be able to reason about the security

193
00:06:46,960 --> 00:06:48,960
properties of the system there's a lot

194
00:06:48,960 --> 00:06:50,560
of questions we have

195
00:06:50,560 --> 00:06:53,520
but what if i were to instead say

196
00:06:53,520 --> 00:06:55,520
hey we've enforced this invariant on the

197
00:06:55,520 --> 00:06:58,080
code that is all of the front-end is

198
00:06:58,080 --> 00:07:00,960
react and we banned the api call

199
00:07:00,960 --> 00:07:03,360
dangerously set in our html

200
00:07:03,360 --> 00:07:05,759
now react is a great example of a secure

201
00:07:05,759 --> 00:07:07,680
by default framework where it's

202
00:07:07,680 --> 00:07:09,280
essentially impossible or at least very

203
00:07:09,280 --> 00:07:10,800
difficult to introduce crosstalk

204
00:07:10,800 --> 00:07:12,160
scripting at all

205
00:07:12,160 --> 00:07:13,199
anywhere

206
00:07:13,199 --> 00:07:15,120
except for a handful

207
00:07:15,120 --> 00:07:16,800
of places where you can basically opt

208
00:07:16,800 --> 00:07:19,280
out of the framework protections um

209
00:07:19,280 --> 00:07:21,199
dangerously set inner html being one of

210
00:07:21,199 --> 00:07:22,160
those

211
00:07:22,160 --> 00:07:23,680
so if i were to tell you that everything

212
00:07:23,680 --> 00:07:26,240
is react and we've basically banned all

213
00:07:26,240 --> 00:07:27,680
of the places where you can do something

214
00:07:27,680 --> 00:07:29,440
dangerous probably a lot of these

215
00:07:29,440 --> 00:07:31,120
questions that you used to have are

216
00:07:31,120 --> 00:07:33,919
suddenly a lot less uh impactful because

217
00:07:33,919 --> 00:07:36,400
we've sort of mitigated classes of risk

218
00:07:36,400 --> 00:07:38,639
and sort of broad swath a lot of things

219
00:07:38,639 --> 00:07:40,319
we like don't have to care about as much

220
00:07:40,319 --> 00:07:42,160
anymore

221
00:07:42,160 --> 00:07:44,400
so similarly let's say i gave you a

222
00:07:44,400 --> 00:07:47,199
random app that had and asked you hey

223
00:07:47,199 --> 00:07:48,720
does this have remote code execution

224
00:07:48,720 --> 00:07:49,919
issues in it

225
00:07:49,919 --> 00:07:51,599
so similarly you probably have a number

226
00:07:51,599 --> 00:07:53,039
of the same questions

227
00:07:53,039 --> 00:07:55,280
but also perhaps you would want to know

228
00:07:55,280 --> 00:07:56,479
does this app

229
00:07:56,479 --> 00:07:59,199
deserialize data does it run uh shell

230
00:07:59,199 --> 00:08:01,199
commands as sort of subprocess shell

231
00:08:01,199 --> 00:08:03,440
exec type things does it perhaps mix

232
00:08:03,440 --> 00:08:05,919
data and code using eval exec or other

233
00:08:05,919 --> 00:08:07,440
things

234
00:08:07,440 --> 00:08:09,840
uh but again let's say that i have set a

235
00:08:09,840 --> 00:08:11,599
strong invariance where i have banned

236
00:08:11,599 --> 00:08:14,000
calls to exec and eval and there's no

237
00:08:14,000 --> 00:08:16,560
way to do shell commands and it doesn't

238
00:08:16,560 --> 00:08:18,800
deserialize anything

239
00:08:18,800 --> 00:08:21,759
so then probably a lot of these things

240
00:08:21,759 --> 00:08:23,360
that you used to be worried about are

241
00:08:23,360 --> 00:08:27,400
significantly less risky

242
00:08:27,759 --> 00:08:29,520
and i like to think of this as you know

243
00:08:29,520 --> 00:08:31,599
let's just solve the easy version of the

244
00:08:31,599 --> 00:08:33,279
problem right so these apps could be

245
00:08:33,279 --> 00:08:34,958
incredibly complex with millions of

246
00:08:34,958 --> 00:08:36,240
lines of code

247
00:08:36,240 --> 00:08:37,760
but with some strong invariants some

248
00:08:37,760 --> 00:08:40,240
strong properties that we are enforcing

249
00:08:40,240 --> 00:08:42,320
we have significantly reduced the risk

250
00:08:42,320 --> 00:08:44,240
of these applications even though

251
00:08:44,240 --> 00:08:45,920
there's a lot of things we might not

252
00:08:45,920 --> 00:08:47,440
necessarily know

253
00:08:47,440 --> 00:08:49,839
an important point is we did this you

254
00:08:49,839 --> 00:08:51,920
know without very fancy complex tools

255
00:08:51,920 --> 00:08:54,080
right so we didn't have a very powerful

256
00:08:54,080 --> 00:08:56,320
uh dynamic analysis tool dast that can

257
00:08:56,320 --> 00:08:58,320
handle you know modern web applications

258
00:08:58,320 --> 00:09:00,320
and all the uh intricacies that that

259
00:09:00,320 --> 00:09:03,279
entails we didn't use a sas tool that

260
00:09:03,279 --> 00:09:05,040
could do complex inter-procedural data

261
00:09:05,040 --> 00:09:07,040
flow analysis tracking you know tainted

262
00:09:07,040 --> 00:09:08,720
user input across dozens of files and

263
00:09:08,720 --> 00:09:10,640
maybe millions of lines of code we

264
00:09:10,640 --> 00:09:12,880
didn't do fuzzing or symbolic execution

265
00:09:12,880 --> 00:09:14,720
or formal methods like proving the

266
00:09:14,720 --> 00:09:16,720
correctness of the code

267
00:09:16,720 --> 00:09:19,040
we were able to make strong guarantees

268
00:09:19,040 --> 00:09:20,320
about the security properties of our

269
00:09:20,320 --> 00:09:22,320
system without all of these heavyweight

270
00:09:22,320 --> 00:09:24,640
approaches

271
00:09:24,640 --> 00:09:27,279
so one way i like to think about this is

272
00:09:27,279 --> 00:09:30,160
the task versus the effort required

273
00:09:30,160 --> 00:09:32,720
so on the y-axis we have the effort

274
00:09:32,720 --> 00:09:35,920
required in chus which is uh clint's

275
00:09:35,920 --> 00:09:37,440
hand wavy units

276
00:09:37,440 --> 00:09:39,920
and basically in the lower left-hand

277
00:09:39,920 --> 00:09:42,240
side we see you know detecting either

278
00:09:42,240 --> 00:09:44,880
the use or the lack of use of a secure

279
00:09:44,880 --> 00:09:46,160
library

280
00:09:46,160 --> 00:09:48,000
computationally that's pretty easy right

281
00:09:48,000 --> 00:09:49,200
we don't need a lot of contextual

282
00:09:49,200 --> 00:09:50,480
knowledge we can just sort of look for

283
00:09:50,480 --> 00:09:52,399
the apis and function calls being made

284
00:09:52,399 --> 00:09:54,560
so that's pretty easy but if we want to

285
00:09:54,560 --> 00:09:56,320
find something that's potentially a bug

286
00:09:56,320 --> 00:09:57,680
then we need to do a bit more of

287
00:09:57,680 --> 00:09:59,120
analysis probably we need to reason

288
00:09:59,120 --> 00:10:01,120
about how user input either can or can't

289
00:10:01,120 --> 00:10:02,320
get to that

290
00:10:02,320 --> 00:10:04,480
vulnerable code location and then it's

291
00:10:04,480 --> 00:10:06,320
even more work to confirm whether that

292
00:10:06,320 --> 00:10:08,480
potential bug is actually a bug and then

293
00:10:08,480 --> 00:10:09,920
it's even harder than that and takes

294
00:10:09,920 --> 00:10:12,160
more work and more either manual and or

295
00:10:12,160 --> 00:10:14,399
analysis complexity to write a proof of

296
00:10:14,399 --> 00:10:16,160
concept exploit code for that

297
00:10:16,160 --> 00:10:18,079
demonstrating that yes not only is this

298
00:10:18,079 --> 00:10:19,440
vulnerable like here's something that

299
00:10:19,440 --> 00:10:22,640
actually attacks it

300
00:10:22,640 --> 00:10:24,000
and fundamentally what i'm trying to get

301
00:10:24,000 --> 00:10:25,760
at here is detecting

302
00:10:25,760 --> 00:10:27,440
the use or lack of use of secure

303
00:10:27,440 --> 00:10:29,839
defaults is just so much easier than

304
00:10:29,839 --> 00:10:31,600
finding bugs but

305
00:10:31,600 --> 00:10:33,600
if you have these strong secure defaults

306
00:10:33,600 --> 00:10:36,800
that make uh exploitable bugs impossible

307
00:10:36,800 --> 00:10:38,399
or at least very difficult then you

308
00:10:38,399 --> 00:10:39,760
don't necessarily have to find all the

309
00:10:39,760 --> 00:10:41,760
bugs because they just can't happen by

310
00:10:41,760 --> 00:10:44,399
construction

311
00:10:44,720 --> 00:10:46,480
so we wanted to make sure to connect

312
00:10:46,480 --> 00:10:48,720
with the youth these days so we included

313
00:10:48,720 --> 00:10:51,440
this meme uh so we would say broke is

314
00:10:51,440 --> 00:10:53,279
finding every vulnerability

315
00:10:53,279 --> 00:10:55,360
and woke is preventing classes of

316
00:10:55,360 --> 00:10:58,079
vulnerabilities

317
00:10:58,640 --> 00:10:59,839
all right so you might be thinking right

318
00:10:59,839 --> 00:11:02,240
now like you know cool like a kind of

319
00:11:02,240 --> 00:11:03,920
buy into this but really all you've

320
00:11:03,920 --> 00:11:05,279
shown me is some sort of hand wavy

321
00:11:05,279 --> 00:11:08,160
diagrams and the security industry has

322
00:11:08,160 --> 00:11:10,000
focused on bug finding for decades right

323
00:11:10,000 --> 00:11:12,640
building very powerful impressive sas

324
00:11:12,640 --> 00:11:14,480
and das tools spending a lot of money on

325
00:11:14,480 --> 00:11:16,560
pen tests and bug bounty and you might

326
00:11:16,560 --> 00:11:18,560
be thinking yeah this is just your

327
00:11:18,560 --> 00:11:20,399
opinion man so we wanted to give you a

328
00:11:20,399 --> 00:11:22,480
number of examples of other companies

329
00:11:22,480 --> 00:11:26,160
who have come to similar conclusions

330
00:11:26,160 --> 00:11:28,240
so first this is a talk by patrick and

331
00:11:28,240 --> 00:11:31,360
asta of netflix a couple of years ago so

332
00:11:31,360 --> 00:11:32,959
on the left-hand side

333
00:11:32,959 --> 00:11:34,959
under de-emphasize this is their

334
00:11:34,959 --> 00:11:36,800
priorities for their abstech program

335
00:11:36,800 --> 00:11:39,120
they are de-emphasizing manual testing

336
00:11:39,120 --> 00:11:41,360
so manual sort of like pen testing as

337
00:11:41,360 --> 00:11:42,720
well as traditional vulnerability

338
00:11:42,720 --> 00:11:44,959
scanning and then on the right hand side

339
00:11:44,959 --> 00:11:48,000
heavily emphasized is a paved road that

340
00:11:48,000 --> 00:11:50,399
is secure defaults and killing bug

341
00:11:50,399 --> 00:11:52,560
classes

342
00:11:52,560 --> 00:11:54,720
this is another talk by scott anisha

343
00:11:54,720 --> 00:11:57,600
also of netflix so the following year at

344
00:11:57,600 --> 00:11:59,279
upset cali notice how

345
00:11:59,279 --> 00:12:01,839
secure by default is a core part of the

346
00:12:01,839 --> 00:12:03,440
security program and notice that it's

347
00:12:03,440 --> 00:12:07,040
only growing over time

348
00:12:07,440 --> 00:12:09,519
earlier we were talking about

349
00:12:09,519 --> 00:12:11,120
hey like banning functions can be very

350
00:12:11,120 --> 00:12:12,160
powerful and you might be a bit

351
00:12:12,160 --> 00:12:14,160
skeptical like how much is this actually

352
00:12:14,160 --> 00:12:16,480
valuable in practice so one interesting

353
00:12:16,480 --> 00:12:18,160
study so microsoft crunched the numbers

354
00:12:18,160 --> 00:12:21,279
and they found that uh when going from

355
00:12:21,279 --> 00:12:23,200
xp to vista

356
00:12:23,200 --> 00:12:26,320
41 or that is almost 50 percent

357
00:12:26,320 --> 00:12:28,000
of all the vulnerability reduction in

358
00:12:28,000 --> 00:12:29,519
that transition that happened was

359
00:12:29,519 --> 00:12:32,000
basically from banning uh stir copy and

360
00:12:32,000 --> 00:12:34,639
a number of other dangerous functions so

361
00:12:34,639 --> 00:12:36,800
uh that's a pretty impressive bang for

362
00:12:36,800 --> 00:12:38,320
your buck for essentially just you know

363
00:12:38,320 --> 00:12:41,279
banning a few functions

364
00:12:41,279 --> 00:12:43,680
and a more recent blog post from the

365
00:12:43,680 --> 00:12:45,680
microsoft security research response

366
00:12:45,680 --> 00:12:48,240
center uh tools and guidance that is

367
00:12:48,240 --> 00:12:49,760
like developer training are just

368
00:12:49,760 --> 00:12:52,079
fundamentally not preventing memory

369
00:12:52,079 --> 00:12:54,160
safety issues they have

370
00:12:54,160 --> 00:12:56,079
represented the same proportion of

371
00:12:56,079 --> 00:12:58,320
vulnerabilities assigned to cve for over

372
00:12:58,320 --> 00:13:00,160
a decade right so microsoft is saying

373
00:13:00,160 --> 00:13:01,839
we've spent a huge amount of time

374
00:13:01,839 --> 00:13:03,519
building powerful like static uh

375
00:13:03,519 --> 00:13:05,839
analysis tools as well as fuzzing and

376
00:13:05,839 --> 00:13:07,519
training developers but ultimately you

377
00:13:07,519 --> 00:13:10,880
know we still have these same issues

378
00:13:11,279 --> 00:13:13,120
google recently released a quite

379
00:13:13,120 --> 00:13:14,639
excellent book for free online called

380
00:13:14,639 --> 00:13:16,320
building secure and reliable systems and

381
00:13:16,320 --> 00:13:18,079
here's a snippet from it

382
00:13:18,079 --> 00:13:20,639
they say it's unreasonable to expect any

383
00:13:20,639 --> 00:13:22,160
developer to be an expert in all of

384
00:13:22,160 --> 00:13:24,480
these subjects or to constantly maintain

385
00:13:24,480 --> 00:13:26,160
uh awareness of all these security

386
00:13:26,160 --> 00:13:27,120
issues when they're writing and

387
00:13:27,120 --> 00:13:29,760
reviewing code a better approach is to

388
00:13:29,760 --> 00:13:32,320
have frameworks languages and libraries

389
00:13:32,320 --> 00:13:33,760
that make common security

390
00:13:33,760 --> 00:13:35,839
vulnerabilities impossible

391
00:13:35,839 --> 00:13:37,279
so i like both parts of this but i want

392
00:13:37,279 --> 00:13:39,279
to focus on the first for a second which

393
00:13:39,279 --> 00:13:40,000
is

394
00:13:40,000 --> 00:13:40,959
uh

395
00:13:40,959 --> 00:13:43,040
i think in many cases our expectations

396
00:13:43,040 --> 00:13:44,880
for developers are a bit unreasonable

397
00:13:44,880 --> 00:13:46,959
right we expect them to

398
00:13:46,959 --> 00:13:48,560
build new features and provide value for

399
00:13:48,560 --> 00:13:50,399
the company both quickly and write

400
00:13:50,399 --> 00:13:52,560
scalable code that is correct

401
00:13:52,560 --> 00:13:54,720
and as they're doing all of these things

402
00:13:54,720 --> 00:13:56,560
we also expect them to be aware of all

403
00:13:56,560 --> 00:13:57,920
these security things that could go

404
00:13:57,920 --> 00:13:59,920
wrong even though we as security

405
00:13:59,920 --> 00:14:01,600
professionals have spent years perhaps

406
00:14:01,600 --> 00:14:03,760
even decades becoming more familiar with

407
00:14:03,760 --> 00:14:06,720
it so i think ideally and what this talk

408
00:14:06,720 --> 00:14:08,720
is focused on is like how can we make

409
00:14:08,720 --> 00:14:10,800
developers just not have to worry about

410
00:14:10,800 --> 00:14:12,480
security and instead just go about their

411
00:14:12,480 --> 00:14:14,160
jobs and

412
00:14:14,160 --> 00:14:16,399
just transparently the security team is

413
00:14:16,399 --> 00:14:18,240
supporting them and making them able to

414
00:14:18,240 --> 00:14:21,199
do their job easily as well as securely

415
00:14:21,199 --> 00:14:23,760
uh so facebook had a blog post designing

416
00:14:23,760 --> 00:14:26,639
security for billions uh where they

417
00:14:26,639 --> 00:14:28,639
repre they present sort of this pyramid

418
00:14:28,639 --> 00:14:31,040
but it's sort of upside down where the

419
00:14:31,040 --> 00:14:33,040
the base sort of the bulwark of the

420
00:14:33,040 --> 00:14:34,800
whole thing is secure frameworks that

421
00:14:34,800 --> 00:14:37,120
they try to use to prevent and remove

422
00:14:37,120 --> 00:14:39,040
entire classes of bugs

423
00:14:39,040 --> 00:14:40,480
and they use other things too right like

424
00:14:40,480 --> 00:14:42,079
automated testing tools and peer review

425
00:14:42,079 --> 00:14:43,920
and so forth but sort of the base the

426
00:14:43,920 --> 00:14:46,160
thing that they uh aim to catch the most

427
00:14:46,160 --> 00:14:50,160
bugs with is these secure frameworks

428
00:14:50,639 --> 00:14:52,399
okay so you might be thinking you know

429
00:14:52,399 --> 00:14:53,839
this is great and all but like i'm not

430
00:14:53,839 --> 00:14:56,800
google i'm not netflix i'm not facebook

431
00:14:56,800 --> 00:14:58,160
but you don't actually need to be these

432
00:14:58,160 --> 00:15:01,199
companies to get this value um so you

433
00:15:01,199 --> 00:15:03,040
can get a lot about the value by

434
00:15:03,040 --> 00:15:05,040
choosing modern web frameworks and well

435
00:15:05,040 --> 00:15:07,360
supported libraries uh which can in

436
00:15:07,360 --> 00:15:09,199
themselves just mitigate entire classes

437
00:15:09,199 --> 00:15:11,680
of vulnerabilities so if we think back

438
00:15:11,680 --> 00:15:14,240
to early 2000s you know web security was

439
00:15:14,240 --> 00:15:16,000
really a wild west you know crosstalk

440
00:15:16,000 --> 00:15:17,519
scripting and sql injection were

441
00:15:17,519 --> 00:15:19,600
everywhere or at least quite prevalent

442
00:15:19,600 --> 00:15:21,839
uh and once frameworks started

443
00:15:21,839 --> 00:15:23,279
outputting coding by default and

444
00:15:23,279 --> 00:15:25,279
encouraging the use of orms or object

445
00:15:25,279 --> 00:15:27,360
relational mappers a lot of these issues

446
00:15:27,360 --> 00:15:29,360
gradually they didn't completely go away

447
00:15:29,360 --> 00:15:31,440
but they became much less

448
00:15:31,440 --> 00:15:33,920
prevalent so by using modern frameworks

449
00:15:33,920 --> 00:15:35,920
as well as secure by default libraries

450
00:15:35,920 --> 00:15:37,920
i've included a couple of examples there

451
00:15:37,920 --> 00:15:40,079
uh u2 even without a massive

452
00:15:40,079 --> 00:15:42,320
well-resourced uh abstech team you can

453
00:15:42,320 --> 00:15:44,399
get a lot of the same value so it's not

454
00:15:44,399 --> 00:15:47,199
out of reach for you

455
00:15:47,519 --> 00:15:50,399
okay so let's talk uh now in a bit more

456
00:15:50,399 --> 00:15:52,800
detail how to eradicate vulnerability

457
00:15:52,800 --> 00:15:54,000
classes so in this section we're going

458
00:15:54,000 --> 00:15:55,839
to present a methodology and walk

459
00:15:55,839 --> 00:15:57,519
through each step

460
00:15:57,519 --> 00:15:59,440
but before we do that just quickly to

461
00:15:59,440 --> 00:16:00,959
zoom out for a second you know why do we

462
00:16:00,959 --> 00:16:03,120
care so much about killing bug classes

463
00:16:03,120 --> 00:16:04,800
rather than sort of one-off

464
00:16:04,800 --> 00:16:06,639
uh bug fighting as we've sort of

465
00:16:06,639 --> 00:16:08,959
traditionally done as an industry and

466
00:16:08,959 --> 00:16:10,880
the reason is that there's these huge

467
00:16:10,880 --> 00:16:13,279
compounding effects of killing

468
00:16:13,279 --> 00:16:15,839
a bug class and not just a one-off bug

469
00:16:15,839 --> 00:16:18,320
here and there and let's say for example

470
00:16:18,320 --> 00:16:20,000
you are a part of an abstract team and

471
00:16:20,000 --> 00:16:21,519
you do sort of a time audit to try to

472
00:16:21,519 --> 00:16:23,120
figure out okay where do we spend our

473
00:16:23,120 --> 00:16:23,920
time

474
00:16:23,920 --> 00:16:25,600
and let's say this is a hypothetical

475
00:16:25,600 --> 00:16:27,120
example you're like okay well we spend a

476
00:16:27,120 --> 00:16:28,639
fair amount of time on cross-site

477
00:16:28,639 --> 00:16:30,800
scripting we also do threat modeling and

478
00:16:30,800 --> 00:16:33,440
training and so forth so let's say you

479
00:16:33,440 --> 00:16:36,320
were to a you were able to say work with

480
00:16:36,320 --> 00:16:38,000
the engineering team and port everything

481
00:16:38,000 --> 00:16:40,480
to react or do other secure by default

482
00:16:40,480 --> 00:16:42,000
mechanisms to essentially kill

483
00:16:42,000 --> 00:16:43,680
cross-site scripting and then maybe it

484
00:16:43,680 --> 00:16:45,360
still happens every once in a while but

485
00:16:45,360 --> 00:16:47,440
you essentially have to spend little uh

486
00:16:47,440 --> 00:16:49,759
ongoing recurring time on it then all of

487
00:16:49,759 --> 00:16:52,240
that time you used to spend

488
00:16:52,240 --> 00:16:53,600
addressing cross-site scripting you can

489
00:16:53,600 --> 00:16:55,600
then focus on something else perhaps a

490
00:16:55,600 --> 00:16:58,240
sql interaction and by gradually

491
00:16:58,240 --> 00:16:59,920
eliminating all of these things you used

492
00:16:59,920 --> 00:17:01,440
to care about you become much more

493
00:17:01,440 --> 00:17:02,880
leveraged and

494
00:17:02,880 --> 00:17:04,559
highly scalable as a security team where

495
00:17:04,559 --> 00:17:06,000
you just knock off more and more

496
00:17:06,000 --> 00:17:08,720
problems uh with even with the same

497
00:17:08,720 --> 00:17:10,160
number of people

498
00:17:10,160 --> 00:17:13,760
and not having to work crazy hours

499
00:17:13,760 --> 00:17:15,599
okay so let's talk about the process

500
00:17:15,599 --> 00:17:17,839
itself of how to eradicate vulnerability

501
00:17:17,839 --> 00:17:20,880
classes so first we're going to

502
00:17:20,880 --> 00:17:22,559
evaluate which vulnerability class to

503
00:17:22,559 --> 00:17:24,240
focus on so there's many things you

504
00:17:24,240 --> 00:17:26,240
could do which is the thing that's best

505
00:17:26,240 --> 00:17:28,079
to focus on first

506
00:17:28,079 --> 00:17:29,520
then we'll talk about determining the

507
00:17:29,520 --> 00:17:31,760
best approach to find or prevent a given

508
00:17:31,760 --> 00:17:33,679
bug class at scale

509
00:17:33,679 --> 00:17:35,280
we'll then discuss like how do you

510
00:17:35,280 --> 00:17:36,880
select what the safe version should look

511
00:17:36,880 --> 00:17:39,120
like and how can you make it the default

512
00:17:39,120 --> 00:17:41,039
how can you train developers to use this

513
00:17:41,039 --> 00:17:43,120
safe pattern and then finally how can we

514
00:17:43,120 --> 00:17:45,280
use tools to enforce the safe pattern so

515
00:17:45,280 --> 00:17:46,640
that

516
00:17:46,640 --> 00:17:48,160
basically we have these strong invariant

517
00:17:48,160 --> 00:17:49,919
guarantees across

518
00:17:49,919 --> 00:17:50,950
many repos

519
00:17:50,950 --> 00:17:54,480
[Music]

520
00:17:54,480 --> 00:17:56,799
so there's many ways to decide on what

521
00:17:56,799 --> 00:17:58,320
you should focus on first

522
00:17:58,320 --> 00:18:00,640
here's a couple of example criteria that

523
00:18:00,640 --> 00:18:02,000
different companies use but ultimately

524
00:18:02,000 --> 00:18:03,280
it's up to you and what makes sense in

525
00:18:03,280 --> 00:18:04,640
your environment

526
00:18:04,640 --> 00:18:06,559
so one thing you could do is focus on

527
00:18:06,559 --> 00:18:08,480
the classes that are most prevalent so

528
00:18:08,480 --> 00:18:10,559
what's happening the most places

529
00:18:10,559 --> 00:18:12,960
you could also focus on the bug classes

530
00:18:12,960 --> 00:18:15,120
that have the most impact or risk so for

531
00:18:15,120 --> 00:18:17,280
example let's say your company has a lot

532
00:18:17,280 --> 00:18:19,280
of information disclosure type issues

533
00:18:19,280 --> 00:18:20,880
but usually they are either

534
00:18:20,880 --> 00:18:22,960
informational or low risk then you might

535
00:18:22,960 --> 00:18:24,880
want to focus on bugs that are less

536
00:18:24,880 --> 00:18:27,440
common but more impactful

537
00:18:27,440 --> 00:18:29,520
some bug classes may be easier to tackle

538
00:18:29,520 --> 00:18:31,280
either from an organizational buy-in

539
00:18:31,280 --> 00:18:32,720
point of view or just technically it's

540
00:18:32,720 --> 00:18:34,000
easier to fix

541
00:18:34,000 --> 00:18:35,440
and maybe your company has certain

542
00:18:35,440 --> 00:18:37,600
priorities itself that you can abide by

543
00:18:37,600 --> 00:18:39,840
so realistically you probably want some

544
00:18:39,840 --> 00:18:41,280
sort of weighted function of all of

545
00:18:41,280 --> 00:18:43,840
these but again the important thing is

546
00:18:43,840 --> 00:18:45,520
just what makes sense for your company

547
00:18:45,520 --> 00:18:48,480
and your circumstances

548
00:18:48,720 --> 00:18:50,320
so in order to do this process we're

549
00:18:50,320 --> 00:18:52,559
going to need a nice data set of

550
00:18:52,559 --> 00:18:53,840
vulnerabilities that have happened in

551
00:18:53,840 --> 00:18:55,200
the past so that we can review them and

552
00:18:55,200 --> 00:18:58,160
look for trends so in order to do that

553
00:18:58,160 --> 00:18:59,600
you need a strong vulnerability

554
00:18:59,600 --> 00:19:01,200
management program so you need to know

555
00:19:01,200 --> 00:19:02,400
like okay what are all the security

556
00:19:02,400 --> 00:19:03,760
issues we've had in the past and what do

557
00:19:03,760 --> 00:19:05,600
they look like this allows you to know

558
00:19:05,600 --> 00:19:07,679
your current state like where are we now

559
00:19:07,679 --> 00:19:09,200
as well as if your future efforts

560
00:19:09,200 --> 00:19:10,720
actually work right so we're going to be

561
00:19:10,720 --> 00:19:12,960
doing a lot of work in a lot of

562
00:19:12,960 --> 00:19:14,160
initiatives that i think are high

563
00:19:14,160 --> 00:19:15,440
leverage but you want to be able to

564
00:19:15,440 --> 00:19:17,120
prove to yourself as well as upper

565
00:19:17,120 --> 00:19:18,559
management like hey the things that

566
00:19:18,559 --> 00:19:20,720
we're doing on are measurably improving

567
00:19:20,720 --> 00:19:23,360
our security posture and deserve

568
00:19:23,360 --> 00:19:24,799
additional focus

569
00:19:24,799 --> 00:19:26,799
so uh there's lots of things to track

570
00:19:26,799 --> 00:19:28,880
here's just a couple of examples so

571
00:19:28,880 --> 00:19:32,160
ideally for each security issue you know

572
00:19:32,160 --> 00:19:34,400
like was this a low medium or high risk

573
00:19:34,400 --> 00:19:36,400
what was the vulnerability class was it

574
00:19:36,400 --> 00:19:38,799
related to access controls or xss and so

575
00:19:38,799 --> 00:19:40,720
forth so i encourage you to create a

576
00:19:40,720 --> 00:19:42,720
taxonomy for your company i think os top

577
00:19:42,720 --> 00:19:44,400
10 is a little bit too narrow but

578
00:19:44,400 --> 00:19:45,919
something like vrt is maybe a little bit

579
00:19:45,919 --> 00:19:47,520
too broad

580
00:19:47,520 --> 00:19:49,200
i would aim for maybe 20 to 40

581
00:19:49,200 --> 00:19:50,960
categories

582
00:19:50,960 --> 00:19:53,200
you want each sort of bucket of

583
00:19:53,200 --> 00:19:54,320
vulnerability class to have like a

584
00:19:54,320 --> 00:19:56,559
different root cause and fix so you want

585
00:19:56,559 --> 00:19:58,640
enough that you can differentiate

586
00:19:58,640 --> 00:20:00,799
between uh different bugs but not like

587
00:20:00,799 --> 00:20:02,960
so many buckets that every bug is in

588
00:20:02,960 --> 00:20:04,799
sort of its own bucket because you want

589
00:20:04,799 --> 00:20:06,480
to be able to look for trends

590
00:20:06,480 --> 00:20:09,200
ideally you also have the pull request

591
00:20:09,200 --> 00:20:11,360
uh either introducing and or fixing the

592
00:20:11,360 --> 00:20:13,280
issue so you want to know like what does

593
00:20:13,280 --> 00:20:14,559
the buggy code look like and what does

594
00:20:14,559 --> 00:20:16,480
the fix look like and then you also want

595
00:20:16,480 --> 00:20:18,080
to know what's the relevant code base

596
00:20:18,080 --> 00:20:22,480
and sort of the team and org responsible

597
00:20:22,880 --> 00:20:25,520
okay so in most companies i've worked

598
00:20:25,520 --> 00:20:27,360
with you don't necessarily have this

599
00:20:27,360 --> 00:20:29,200
like super nicely groomed list of

600
00:20:29,200 --> 00:20:31,039
vulnerabilities to review so you have to

601
00:20:31,039 --> 00:20:32,799
do some manual work to try to create

602
00:20:32,799 --> 00:20:35,200
this input set into this process

603
00:20:35,200 --> 00:20:36,960
so here's a couple of things you can do

604
00:20:36,960 --> 00:20:38,799
if you if you don't have a nice set of

605
00:20:38,799 --> 00:20:41,440
vulnerabilities um in the future it can

606
00:20:41,440 --> 00:20:42,799
be better but for now like let's start

607
00:20:42,799 --> 00:20:44,480
with what we have

608
00:20:44,480 --> 00:20:47,039
so many companies have a specific tag

609
00:20:47,039 --> 00:20:49,520
either for jira or github issues that's

610
00:20:49,520 --> 00:20:51,120
like hey this is a security related

611
00:20:51,120 --> 00:20:52,799
thing so you can search for that if you

612
00:20:52,799 --> 00:20:54,080
have it

613
00:20:54,080 --> 00:20:55,760
you can also create a list of security

614
00:20:55,760 --> 00:20:58,080
relevant keywords such as uh

615
00:20:58,080 --> 00:21:01,760
vulnerability xss sql injection security

616
00:21:01,760 --> 00:21:03,760
hack or something like that and then

617
00:21:03,760 --> 00:21:07,120
search every pull request and issue and

618
00:21:07,120 --> 00:21:08,960
get commit history for those keywords

619
00:21:08,960 --> 00:21:11,039
you can use like get log and then pass

620
00:21:11,039 --> 00:21:13,039
in one of the keywords for example

621
00:21:13,039 --> 00:21:14,880
if you use security tools such as sas

622
00:21:14,880 --> 00:21:16,880
and das this is another great source as

623
00:21:16,880 --> 00:21:18,960
is uh pentest reports bugatti

624
00:21:18,960 --> 00:21:21,360
submissions uh or even just asking

625
00:21:21,360 --> 00:21:22,799
development and ops teams or other

626
00:21:22,799 --> 00:21:24,320
security teams like hey what sort of

627
00:21:24,320 --> 00:21:25,600
issues have we had in the past can you

628
00:21:25,600 --> 00:21:28,480
point me to anything

629
00:21:28,799 --> 00:21:31,120
and so again like fully analyzing all of

630
00:21:31,120 --> 00:21:32,880
your ad hoc historical data uh this

631
00:21:32,880 --> 00:21:35,200
could be a time simple so it might not

632
00:21:35,200 --> 00:21:37,360
be worth doing it to the nth degree just

633
00:21:37,360 --> 00:21:38,799
you know do it enough so you have at

634
00:21:38,799 --> 00:21:40,320
least some input data

635
00:21:40,320 --> 00:21:43,280
but what you can do now uh is create and

636
00:21:43,280 --> 00:21:45,280
document a lightweight and by

637
00:21:45,280 --> 00:21:46,320
lightweight i mean something that you

638
00:21:46,320 --> 00:21:47,919
can continuously do over time it's not

639
00:21:47,919 --> 00:21:49,120
going to be so much of a burden that you

640
00:21:49,120 --> 00:21:51,440
stop a standardized process where you

641
00:21:51,440 --> 00:21:53,600
track this uh vulnerability meta

642
00:21:53,600 --> 00:21:56,080
information going forward so

643
00:21:56,080 --> 00:21:57,919
yes you might not have exactly the data

644
00:21:57,919 --> 00:21:59,600
you want now but you can do things now

645
00:21:59,600 --> 00:22:01,520
that make say one two three years from

646
00:22:01,520 --> 00:22:04,159
now you um much better informed and

647
00:22:04,159 --> 00:22:07,600
data-driven as a security program

648
00:22:07,600 --> 00:22:09,360
okay so once you have this input set i

649
00:22:09,360 --> 00:22:10,960
would encourage you to slice and dice it

650
00:22:10,960 --> 00:22:12,320
you could group by vulnerability class

651
00:22:12,320 --> 00:22:13,919
or what founded and maybe you want to

652
00:22:13,919 --> 00:22:16,720
weight by the severity and risk

653
00:22:16,720 --> 00:22:18,000
so one

654
00:22:18,000 --> 00:22:19,360
example of a number of things you can do

655
00:22:19,360 --> 00:22:21,120
once you have nice vulnerability data

656
00:22:21,120 --> 00:22:23,600
was described by arcadia in his talk

657
00:22:23,600 --> 00:22:25,200
data driven bugbounty so this is just

658
00:22:25,200 --> 00:22:26,559
one of the figures from the talk i would

659
00:22:26,559 --> 00:22:28,240
encourage you to check it out but you

660
00:22:28,240 --> 00:22:30,159
can see here like oh security

661
00:22:30,159 --> 00:22:31,840
misconfiguration and sensitive data

662
00:22:31,840 --> 00:22:33,039
exposure these seem to be the most

663
00:22:33,039 --> 00:22:34,799
prevalent issues so maybe we want to

664
00:22:34,799 --> 00:22:37,919
focus there or at least examine it

665
00:22:37,919 --> 00:22:39,440
okay so once you

666
00:22:39,440 --> 00:22:41,200
have a couple of bug classes

667
00:22:41,200 --> 00:22:44,080
um picked out review the fixes and ask

668
00:22:44,080 --> 00:22:45,679
yourself questions like okay what did

669
00:22:45,679 --> 00:22:47,679
the vulnerable code look like what did

670
00:22:47,679 --> 00:22:49,440
the fix look like and what sort of

671
00:22:49,440 --> 00:22:51,039
trends can we see

672
00:22:51,039 --> 00:22:53,760
so ideally in the best case all of the

673
00:22:53,760 --> 00:22:55,360
vulnerable code looks similar and this

674
00:22:55,360 --> 00:22:56,880
is going to allow us to generalize and

675
00:22:56,880 --> 00:22:58,080
target it

676
00:22:58,080 --> 00:22:59,679
and then in the worst case you know

677
00:22:59,679 --> 00:23:02,240
every uh instance of a bug for example

678
00:23:02,240 --> 00:23:03,600
cross-site scripting has like a

679
00:23:03,600 --> 00:23:05,200
different source than a different cause

680
00:23:05,200 --> 00:23:06,960
so in that case it's going to be a bit

681
00:23:06,960 --> 00:23:08,400
hard to generalize and stamp it out

682
00:23:08,400 --> 00:23:10,720
unfortunately

683
00:23:10,720 --> 00:23:11,600
so

684
00:23:11,600 --> 00:23:13,360
again going back to our common selection

685
00:23:13,360 --> 00:23:15,760
criteria in an ideal world you're going

686
00:23:15,760 --> 00:23:17,360
to be able to choose a vulnerability

687
00:23:17,360 --> 00:23:19,919
class that is widespread across many

688
00:23:19,919 --> 00:23:22,559
teams and repos it's high risk it's

689
00:23:22,559 --> 00:23:24,720
feasible to get developers to fix it and

690
00:23:24,720 --> 00:23:26,480
it aligns with your company priorities

691
00:23:26,480 --> 00:23:28,159
and again it's always broken in the same

692
00:23:28,159 --> 00:23:31,200
way so realistically probably not all of

693
00:23:31,200 --> 00:23:32,880
these are going to be the case for every

694
00:23:32,880 --> 00:23:36,000
bug class but if you can have at least

695
00:23:36,000 --> 00:23:38,240
say a couple of these or most of them

696
00:23:38,240 --> 00:23:40,000
it's going to be much easier and better

697
00:23:40,000 --> 00:23:43,520
for you to target those vulnerabilities

698
00:23:43,600 --> 00:23:45,120
okay so one thing i wanted to point out

699
00:23:45,120 --> 00:23:46,960
is

700
00:23:46,960 --> 00:23:48,559
depending on what the weakness and what

701
00:23:48,559 --> 00:23:49,919
the vulnerability is there's different

702
00:23:49,919 --> 00:23:51,279
approaches that are going to be better

703
00:23:51,279 --> 00:23:53,279
or worse so for example let's say

704
00:23:53,279 --> 00:23:54,640
there's some sort of big picture

705
00:23:54,640 --> 00:23:56,880
architectural flaws that keep biting you

706
00:23:56,880 --> 00:23:58,080
well then you probably want something

707
00:23:58,080 --> 00:24:00,080
like threat modeling because those sorts

708
00:24:00,080 --> 00:24:02,240
of issues are related to how things fit

709
00:24:02,240 --> 00:24:03,840
together and not necessarily something

710
00:24:03,840 --> 00:24:05,120
that's obvious from the code so you

711
00:24:05,120 --> 00:24:06,720
might want to do threat modeling

712
00:24:06,720 --> 00:24:08,240
but in this talk just for the sake of

713
00:24:08,240 --> 00:24:10,400
time we're going to focus on okay when

714
00:24:10,400 --> 00:24:12,400
we have known good or known bad code how

715
00:24:12,400 --> 00:24:14,320
can we address that with lightweight

716
00:24:14,320 --> 00:24:16,559
static analysis

717
00:24:16,559 --> 00:24:18,159
but again just the key point here is

718
00:24:18,159 --> 00:24:19,919
there's many types of issues don't try

719
00:24:19,919 --> 00:24:21,440
to apply the same approach to every

720
00:24:21,440 --> 00:24:23,120
issue because it really depends some are

721
00:24:23,120 --> 00:24:24,559
much better or much worse depending on

722
00:24:24,559 --> 00:24:25,740
the situation

723
00:24:25,740 --> 00:24:27,440
[Music]

724
00:24:27,440 --> 00:24:29,440
okay so step three is we want to select

725
00:24:29,440 --> 00:24:30,960
a safe pattern and then make it the

726
00:24:30,960 --> 00:24:32,559
default so how do we know what a safe

727
00:24:32,559 --> 00:24:34,159
pattern is perhaps your company has

728
00:24:34,159 --> 00:24:36,080
internal coding guidelines already or

729
00:24:36,080 --> 00:24:38,000
you want to align to a standard like

730
00:24:38,000 --> 00:24:40,320
nist maybe you have your own expertise

731
00:24:40,320 --> 00:24:41,840
but i would also encourage you not to

732
00:24:41,840 --> 00:24:44,000
reinvent the wheel right so osp has a

733
00:24:44,000 --> 00:24:45,600
number of right resources the cheat

734
00:24:45,600 --> 00:24:47,919
sheet project as well as asvs you know

735
00:24:47,919 --> 00:24:49,679
why not learn from sort of the best the

736
00:24:49,679 --> 00:24:52,799
industry has written over time

737
00:24:52,799 --> 00:24:54,080
and then the second part of that how do

738
00:24:54,080 --> 00:24:55,520
we make it the default

739
00:24:55,520 --> 00:24:56,880
so we want to

740
00:24:56,880 --> 00:24:58,240
update various internal coding

741
00:24:58,240 --> 00:25:00,080
guidelines used by security as well as

742
00:25:00,080 --> 00:25:01,840
developers so that whenever whenever

743
00:25:01,840 --> 00:25:04,000
someone goes to say oh how do i do this

744
00:25:04,000 --> 00:25:04,799
thing

745
00:25:04,799 --> 00:25:06,960
they come across they secure by default

746
00:25:06,960 --> 00:25:09,039
uh pattern that we have created for them

747
00:25:09,039 --> 00:25:10,559
so this means updating things like

748
00:25:10,559 --> 00:25:13,840
readme developer docs wiki pages facts

749
00:25:13,840 --> 00:25:16,080
training slides onboarding presentations

750
00:25:16,080 --> 00:25:18,799
and etc so the key thing here is like

751
00:25:18,799 --> 00:25:21,440
explaining why these patterns exist and

752
00:25:21,440 --> 00:25:23,360
also how to use them because you want

753
00:25:23,360 --> 00:25:24,559
people to have the right context to know

754
00:25:24,559 --> 00:25:26,159
why this is important

755
00:25:26,159 --> 00:25:27,440
i would also encourage you to

756
00:25:27,440 --> 00:25:29,039
potentially work with developer

757
00:25:29,039 --> 00:25:31,279
developer productivity teams so in

758
00:25:31,279 --> 00:25:32,640
medium and large size companies

759
00:25:32,640 --> 00:25:34,320
sometimes there's whole teams dedicated

760
00:25:34,320 --> 00:25:36,080
to making the rest of engineering more

761
00:25:36,080 --> 00:25:38,559
efficient and productive and cohesive

762
00:25:38,559 --> 00:25:40,000
so they probably have some very good

763
00:25:40,000 --> 00:25:42,240
feedback and can help you on how we can

764
00:25:42,240 --> 00:25:44,400
make the secure version have an even

765
00:25:44,400 --> 00:25:46,159
better developer user experience than

766
00:25:46,159 --> 00:25:47,520
the old way this is key to getting

767
00:25:47,520 --> 00:25:48,559
adoption

768
00:25:48,559 --> 00:25:50,159
and again fundamentally like how can we

769
00:25:50,159 --> 00:25:52,000
make developers more productive and

770
00:25:52,000 --> 00:25:53,279
secure

771
00:25:53,279 --> 00:25:55,440
another important tip is if you

772
00:25:55,440 --> 00:25:57,440
integrate security at the right points

773
00:25:57,440 --> 00:25:59,760
for example in new project starter

774
00:25:59,760 --> 00:26:01,440
templates so say for example there's a

775
00:26:01,440 --> 00:26:03,600
git repo that everyone every developer

776
00:26:03,600 --> 00:26:05,919
in your company will fork to create a

777
00:26:05,919 --> 00:26:07,440
new microservice or a new sort of

778
00:26:07,440 --> 00:26:09,360
internal component if you put the secure

779
00:26:09,360 --> 00:26:11,360
defaults into there then everyone who

780
00:26:11,360 --> 00:26:13,600
uses that repo which should be everyone

781
00:26:13,600 --> 00:26:15,120
if that's sort of the expected practice

782
00:26:15,120 --> 00:26:17,200
in your company you get this automatic

783
00:26:17,200 --> 00:26:19,039
widespread adoption of secure defaults

784
00:26:19,039 --> 00:26:20,799
without you having to encourage anyone

785
00:26:20,799 --> 00:26:22,320
to do anything because it's just already

786
00:26:22,320 --> 00:26:23,600
there

787
00:26:23,600 --> 00:26:25,520
and a quote i like from asta very much

788
00:26:25,520 --> 00:26:27,919
is hitch your security wagon to

789
00:26:27,919 --> 00:26:30,240
developer productivity

790
00:26:30,240 --> 00:26:31,679
because ultimately developers want to

791
00:26:31,679 --> 00:26:33,600
move fast and get more features done so

792
00:26:33,600 --> 00:26:35,279
if we can enable them to do that of

793
00:26:35,279 --> 00:26:36,960
course they'll do it

794
00:26:36,960 --> 00:26:39,039
okay so step four trade developers to

795
00:26:39,039 --> 00:26:41,360
use the safe pattern so how can we make

796
00:26:41,360 --> 00:26:43,120
communication successful

797
00:26:43,120 --> 00:26:45,440
so we want the what and why something is

798
00:26:45,440 --> 00:26:47,679
insecure to be very clear using terms

799
00:26:47,679 --> 00:26:50,000
developers understand not like don't do

800
00:26:50,000 --> 00:26:51,520
this because cross-site scripting like

801
00:26:51,520 --> 00:26:53,760
the impact of that might not be clear if

802
00:26:53,760 --> 00:26:56,080
we can convey the impact in terms the

803
00:26:56,080 --> 00:26:58,080
developers care about for example risk

804
00:26:58,080 --> 00:27:00,880
to the business damaging user trust like

805
00:27:00,880 --> 00:27:02,799
a sql injection might sound scary but it

806
00:27:02,799 --> 00:27:04,640
doesn't necessarily mean anything but

807
00:27:04,640 --> 00:27:06,640
say having an attacker stealing all the

808
00:27:06,640 --> 00:27:08,720
private messages or photos for someone

809
00:27:08,720 --> 00:27:10,960
like that is more viscerally impactful

810
00:27:10,960 --> 00:27:13,600
maybe uh appealing to like reliability

811
00:27:13,600 --> 00:27:15,919
or uptime uh these are also important

812
00:27:15,919 --> 00:27:17,840
and again you want the how to fix to be

813
00:27:17,840 --> 00:27:19,840
concise as well as clear you know what

814
00:27:19,840 --> 00:27:21,520
should they do and you want to link to

815
00:27:21,520 --> 00:27:23,200
additional docs and resources with more

816
00:27:23,200 --> 00:27:25,120
info and maybe if you have teams or

817
00:27:25,120 --> 00:27:27,120
slack you can have a channel dedicated

818
00:27:27,120 --> 00:27:30,399
for developers asking questions

819
00:27:30,399 --> 00:27:32,480
so a talk that i really like by morgan

820
00:27:32,480 --> 00:27:35,279
roman called don't run with scissors he

821
00:27:35,279 --> 00:27:37,600
also talks in detail about how to get

822
00:27:37,600 --> 00:27:39,120
adoption of secure defaults so i highly

823
00:27:39,120 --> 00:27:40,799
recommend you uh to check out this talk

824
00:27:40,799 --> 00:27:43,360
but one sort of meta structure he has

825
00:27:43,360 --> 00:27:46,000
for or he recommended for communicating

826
00:27:46,000 --> 00:27:48,399
to developers is you know if you use

827
00:27:48,399 --> 00:27:50,159
this bad thing this bad thing will

828
00:27:50,159 --> 00:27:52,799
happen instead do the good thing and it

829
00:27:52,799 --> 00:27:54,480
stops the bad thing here's an example of

830
00:27:54,480 --> 00:27:56,640
what not to do here's what to do so

831
00:27:56,640 --> 00:27:59,760
again straightforward um but i think it

832
00:27:59,760 --> 00:28:02,159
emphasizes uh clarity and actionability

833
00:28:02,159 --> 00:28:04,559
which is great

834
00:28:04,559 --> 00:28:06,559
okay so step four train developers to

835
00:28:06,559 --> 00:28:08,880
use the safe pattern so there's a couple

836
00:28:08,880 --> 00:28:10,880
things you can do oftentimes developers

837
00:28:10,880 --> 00:28:12,240
have onboarding sessions with a number

838
00:28:12,240 --> 00:28:13,840
of teams including security this can be

839
00:28:13,840 --> 00:28:15,200
a great way to start making some friends

840
00:28:15,200 --> 00:28:16,799
and make people aware of you you can

841
00:28:16,799 --> 00:28:18,720
have educational brown bag sessions over

842
00:28:18,720 --> 00:28:20,080
lunch where people can listen about

843
00:28:20,080 --> 00:28:21,200
security

844
00:28:21,200 --> 00:28:23,679
internal ctfs is a great way to get

845
00:28:23,679 --> 00:28:25,279
developers excited about security you

846
00:28:25,279 --> 00:28:27,760
can have a security champions program

847
00:28:27,760 --> 00:28:29,200
and then when in person the interaction

848
00:28:29,200 --> 00:28:31,200
is more feasible you can grab lunch with

849
00:28:31,200 --> 00:28:33,440
development teams and or schedule a

850
00:28:33,440 --> 00:28:35,440
happy hour and finally

851
00:28:35,440 --> 00:28:36,399
i've heard this from a couple of

852
00:28:36,399 --> 00:28:39,360
companies but having candy on the desks

853
00:28:39,360 --> 00:28:40,640
of the security team is one of the

854
00:28:40,640 --> 00:28:42,480
highest leverage ways to

855
00:28:42,480 --> 00:28:44,320
hear what developers care about and to

856
00:28:44,320 --> 00:28:46,000
make friends heard this from a bunch of

857
00:28:46,000 --> 00:28:48,640
people so give it a try

858
00:28:48,640 --> 00:28:49,919
and finally

859
00:28:49,919 --> 00:28:51,120
after we've done all these things we're

860
00:28:51,120 --> 00:28:52,720
going to use tools to enforce the safe

861
00:28:52,720 --> 00:28:55,039
pattern so essentially the sort the

862
00:28:55,039 --> 00:28:56,559
short story is we're going to use

863
00:28:56,559 --> 00:28:57,840
lightweight static analysis that is

864
00:28:57,840 --> 00:28:59,919
grabber linting to ensure that the safe

865
00:28:59,919 --> 00:29:02,720
patterns that we've defined are used

866
00:29:02,720 --> 00:29:05,360
uh but i'm going to uh pass this off to

867
00:29:05,360 --> 00:29:06,880
my colleague isaac who's going to talk

868
00:29:06,880 --> 00:29:08,320
about making this real in a lot more

869
00:29:08,320 --> 00:29:09,600
detail

870
00:29:09,600 --> 00:29:11,360
great so we just heard from clint a

871
00:29:11,360 --> 00:29:13,919
whole bunch of you know very specific

872
00:29:13,919 --> 00:29:16,159
steps about how you can eradicate

873
00:29:16,159 --> 00:29:18,559
vulnerabilities in your application and

874
00:29:18,559 --> 00:29:20,320
what i'm going to do is take us through

875
00:29:20,320 --> 00:29:21,600
those steps again

876
00:29:21,600 --> 00:29:24,159
as a quick recap and then go into some

877
00:29:24,159 --> 00:29:26,080
very specific applied tools and

878
00:29:26,080 --> 00:29:28,559
techniques that we can use to actually

879
00:29:28,559 --> 00:29:30,720
effectively make them real

880
00:29:30,720 --> 00:29:32,320
so just as a reminder because there was

881
00:29:32,320 --> 00:29:34,880
a lot of content in the previous section

882
00:29:34,880 --> 00:29:36,799
there were five steps to eradicating

883
00:29:36,799 --> 00:29:38,320
vulnerabilities the first one was

884
00:29:38,320 --> 00:29:40,480
evaluating which vulnerability class to

885
00:29:40,480 --> 00:29:41,760
focus on

886
00:29:41,760 --> 00:29:43,840
then determining the best approach to

887
00:29:43,840 --> 00:29:46,320
find or prevent it at scale

888
00:29:46,320 --> 00:29:49,120
next selecting a safe pattern and making

889
00:29:49,120 --> 00:29:50,880
it the default then training the

890
00:29:50,880 --> 00:29:52,720
developers to use that pattern and then

891
00:29:52,720 --> 00:29:55,039
finally using tools to enforce the same

892
00:29:55,039 --> 00:29:56,880
pattern so i'm going to zoom in on two

893
00:29:56,880 --> 00:29:59,440
of these specifically and show you first

894
00:29:59,440 --> 00:30:02,080
how to set up continuous code scanning

895
00:30:02,080 --> 00:30:04,080
and what the best practices are for that

896
00:30:04,080 --> 00:30:06,399
and then for the last one show you how

897
00:30:06,399 --> 00:30:08,399
to check for what are effectively escape

898
00:30:08,399 --> 00:30:10,880
hatches inside secure frameworks so

899
00:30:10,880 --> 00:30:12,399
let's look at the first one continuous

900
00:30:12,399 --> 00:30:14,240
code scanning this has actually been

901
00:30:14,240 --> 00:30:16,880
covered a lot both at appsec usa over

902
00:30:16,880 --> 00:30:19,200
the years and at other devsecops

903
00:30:19,200 --> 00:30:20,320
conferences

904
00:30:20,320 --> 00:30:22,480
so we're going to link the slides uh at

905
00:30:22,480 --> 00:30:24,320
the end of the presentation and you can

906
00:30:24,320 --> 00:30:26,240
refer back to these as a reference what

907
00:30:26,240 --> 00:30:28,080
i'm going to try to do is just distill

908
00:30:28,080 --> 00:30:30,320
down a couple of the core principles

909
00:30:30,320 --> 00:30:32,720
that i think are in common across all of

910
00:30:32,720 --> 00:30:34,799
these presentations

911
00:30:34,799 --> 00:30:37,760
for you to look at so the best practices

912
00:30:37,760 --> 00:30:39,600
uh that most of these presentations

913
00:30:39,600 --> 00:30:40,640
agree on

914
00:30:40,640 --> 00:30:43,200
are first off the unit of scan ought to

915
00:30:43,200 --> 00:30:45,520
be the pull request so

916
00:30:45,520 --> 00:30:47,200
there's too much variance in how

917
00:30:47,200 --> 00:30:49,039
developers treat commits sometimes

918
00:30:49,039 --> 00:30:50,880
people you know will commit very very

919
00:30:50,880 --> 00:30:52,320
frequently sometimes they'll commit very

920
00:30:52,320 --> 00:30:54,480
very infrequently but generally at pull

921
00:30:54,480 --> 00:30:56,799
request stage a developer is saying hey

922
00:30:56,799 --> 00:30:58,960
we're merging code we would like a

923
00:30:58,960 --> 00:31:00,960
feature review here

924
00:31:00,960 --> 00:31:03,440
i'm looking for feedback from my peers

925
00:31:03,440 --> 00:31:04,799
and it's a good time to get feedback

926
00:31:04,799 --> 00:31:06,880
from the security team as well the

927
00:31:06,880 --> 00:31:08,559
second thing is you want to scan fast

928
00:31:08,559 --> 00:31:11,200
and when i say fast i mean ideally less

929
00:31:11,200 --> 00:31:12,880
than five minutes really no more than

930
00:31:12,880 --> 00:31:15,200
ten and the reason for that is that this

931
00:31:15,200 --> 00:31:17,360
is giving feedback while context is

932
00:31:17,360 --> 00:31:18,480
fresh

933
00:31:18,480 --> 00:31:20,480
no one wants to come and have to reload

934
00:31:20,480 --> 00:31:22,480
all the state into their head a day or a

935
00:31:22,480 --> 00:31:24,640
week later that doesn't preclude you

936
00:31:24,640 --> 00:31:27,679
from doing longer scans uh you know that

937
00:31:27,679 --> 00:31:29,600
are more in depth on a different

938
00:31:29,600 --> 00:31:31,440
frequency and in fact one of the other

939
00:31:31,440 --> 00:31:33,360
best practices we see is that there's

940
00:31:33,360 --> 00:31:34,960
often a recommendation to have two

941
00:31:34,960 --> 00:31:37,360
separate scanning workflows so a first

942
00:31:37,360 --> 00:31:39,600
workflow which is for auditing

943
00:31:39,600 --> 00:31:41,679
and that's basically visible only to you

944
00:31:41,679 --> 00:31:43,600
on the security team and a second

945
00:31:43,600 --> 00:31:45,679
workflow which is actually blocking

946
00:31:45,679 --> 00:31:48,399
which will either prevent emerge or show

947
00:31:48,399 --> 00:31:50,559
things directly to the developer and

948
00:31:50,559 --> 00:31:52,720
another principle that uh you know most

949
00:31:52,720 --> 00:31:54,640
of these presentations have in common is

950
00:31:54,640 --> 00:31:55,760
that it's really important to make

951
00:31:55,760 --> 00:31:58,000
adjustment easy so you're going to be

952
00:31:58,000 --> 00:31:59,360
setting up this flow you're going to

953
00:31:59,360 --> 00:32:02,000
want to iterate it iterate on it a lot

954
00:32:02,000 --> 00:32:03,360
so you want to make it really cheap to

955
00:32:03,360 --> 00:32:05,039
add and remove tools and even within

956
00:32:05,039 --> 00:32:06,320
those tools you want to make sure that

957
00:32:06,320 --> 00:32:08,720
it's really cheap to add or remove new

958
00:32:08,720 --> 00:32:09,600
rules

959
00:32:09,600 --> 00:32:11,360
so if we look at a really specific

960
00:32:11,360 --> 00:32:13,600
example of what this looks like

961
00:32:13,600 --> 00:32:15,120
this is an excerpt from the google

962
00:32:15,120 --> 00:32:16,559
tricorder paper

963
00:32:16,559 --> 00:32:17,279
so

964
00:32:17,279 --> 00:32:19,039
tricorder is google's internal code

965
00:32:19,039 --> 00:32:21,039
review system and this is how both

966
00:32:21,039 --> 00:32:23,200
security and non-security findings are

967
00:32:23,200 --> 00:32:25,039
integrated into the system

968
00:32:25,039 --> 00:32:26,480
so i think it gives us a helpful

969
00:32:26,480 --> 00:32:29,039
illustrator to illustrative example that

970
00:32:29,039 --> 00:32:30,399
we can pull out some of the best

971
00:32:30,399 --> 00:32:31,919
practices that those other papers were

972
00:32:31,919 --> 00:32:34,000
talking about and look at them really

973
00:32:34,000 --> 00:32:35,200
specifically so the first thing you'll

974
00:32:35,200 --> 00:32:36,880
notice is that we're showing the tool

975
00:32:36,880 --> 00:32:39,919
finding within the developer system

976
00:32:39,919 --> 00:32:43,360
so we don't have hey like some id fired

977
00:32:43,360 --> 00:32:45,519
at this line of code instead it's in

978
00:32:45,519 --> 00:32:48,399
line where we're looking at the code

979
00:32:48,399 --> 00:32:50,159
the message that's being displayed is

980
00:32:50,159 --> 00:32:52,320
clear and actionable i actually think

981
00:32:52,320 --> 00:32:53,360
this one could be a little more

982
00:32:53,360 --> 00:32:55,840
actionable uh and it has a link to more

983
00:32:55,840 --> 00:32:57,279
information

984
00:32:57,279 --> 00:32:59,279
and then we're actually these two

985
00:32:59,279 --> 00:33:01,760
buttons please fix and not useful the

986
00:33:01,760 --> 00:33:04,000
hyperlinks there those are not for the

987
00:33:04,000 --> 00:33:05,279
security team those are for the

988
00:33:05,279 --> 00:33:06,880
developer and based on what the

989
00:33:06,880 --> 00:33:08,720
developer clicks there's going to be

990
00:33:08,720 --> 00:33:11,440
metrics captured about the check type

991
00:33:11,440 --> 00:33:14,320
uh the scan runtime for it and also the

992
00:33:14,320 --> 00:33:16,159
true or false positive rates because

993
00:33:16,159 --> 00:33:18,240
google will interpret clicking not

994
00:33:18,240 --> 00:33:20,720
useful as a false positive and then the

995
00:33:20,720 --> 00:33:22,640
final thing that they're going to do is

996
00:33:22,640 --> 00:33:25,200
track and evict low signal checks so the

997
00:33:25,200 --> 00:33:27,279
general recommendation here is you want

998
00:33:27,279 --> 00:33:30,799
95 true positives or better otherwise

999
00:33:30,799 --> 00:33:32,559
you're basically just going to burn

1000
00:33:32,559 --> 00:33:33,919
credibility and goodwill with the

1001
00:33:33,919 --> 00:33:35,919
developer team as well as creating a

1002
00:33:35,919 --> 00:33:37,440
tremendous amount of extra work for

1003
00:33:37,440 --> 00:33:41,360
yourself which is not valuable

1004
00:33:41,360 --> 00:33:43,279
so what do we what are we hoping to

1005
00:33:43,279 --> 00:33:45,440
continuously find well this presentation

1006
00:33:45,440 --> 00:33:46,559
has been about eradicating

1007
00:33:46,559 --> 00:33:48,080
vulnerabilities so the whole idea here

1008
00:33:48,080 --> 00:33:49,919
is all right if we're using secure

1009
00:33:49,919 --> 00:33:52,240
frameworks that maintain invariants then

1010
00:33:52,240 --> 00:33:53,840
all we need to do is detect the

1011
00:33:53,840 --> 00:33:56,159
functions that let you escape from those

1012
00:33:56,159 --> 00:33:58,960
invariants aka escape hatches so for

1013
00:33:58,960 --> 00:34:00,720
instance earlier in the presentation we

1014
00:34:00,720 --> 00:34:02,559
were talking about react the escape

1015
00:34:02,559 --> 00:34:04,720
hatch that we'd like to find in react is

1016
00:34:04,720 --> 00:34:06,960
dangerously set html if we're concerned

1017
00:34:06,960 --> 00:34:09,119
about remote code execution you know the

1018
00:34:09,119 --> 00:34:11,280
escape hatch from our memory safe

1019
00:34:11,280 --> 00:34:15,040
language is a function like exec

1020
00:34:15,040 --> 00:34:16,960
so specifically

1021
00:34:16,960 --> 00:34:18,719
how are we actually going to find escape

1022
00:34:18,719 --> 00:34:20,480
hatches and there are a couple of

1023
00:34:20,480 --> 00:34:21,599
options here

1024
00:34:21,599 --> 00:34:22,960
the first one

1025
00:34:22,960 --> 00:34:25,040
which might seem crazy to you but i've

1026
00:34:25,040 --> 00:34:26,879
actually encountered a lot of really

1027
00:34:26,879 --> 00:34:28,399
good security teams who have gotten a

1028
00:34:28,399 --> 00:34:31,040
lot of leverage out of it is grep so

1029
00:34:31,040 --> 00:34:33,440
grep is easy to use it's interactive

1030
00:34:33,440 --> 00:34:34,399
it's fast

1031
00:34:34,399 --> 00:34:36,399
most people know regular expressions

1032
00:34:36,399 --> 00:34:37,359
already

1033
00:34:37,359 --> 00:34:38,320
um

1034
00:34:38,320 --> 00:34:40,000
and you know if we're just looking for a

1035
00:34:40,000 --> 00:34:41,918
function named exec it's going to do the

1036
00:34:41,918 --> 00:34:44,320
job it's going to potentially trigger on

1037
00:34:44,320 --> 00:34:46,079
some things that it shouldn't

1038
00:34:46,079 --> 00:34:47,918
and that's because of the con here it's

1039
00:34:47,918 --> 00:34:49,440
line oriented so there's a little bit of

1040
00:34:49,440 --> 00:34:51,599
a mismatch well a pretty big mismatch

1041
00:34:51,599 --> 00:34:54,960
between a textual tool and the tree-like

1042
00:34:54,960 --> 00:34:57,119
structures of programs so the abstract

1043
00:34:57,119 --> 00:34:58,720
syntax tree if you're familiar with the

1044
00:34:58,720 --> 00:35:00,880
term which is why many people will

1045
00:35:00,880 --> 00:35:03,440
either use or build a plugin to a code

1046
00:35:03,440 --> 00:35:05,119
aware linter which i've listed here as

1047
00:35:05,119 --> 00:35:07,119
the second option so the pro there is

1048
00:35:07,119 --> 00:35:08,960
that we're robust and precise we're

1049
00:35:08,960 --> 00:35:10,560
going to handle white space properly

1050
00:35:10,560 --> 00:35:13,520
comments properly the con

1051
00:35:13,520 --> 00:35:15,520
you know is that each parser represents

1052
00:35:15,520 --> 00:35:18,000
asts differently so we have to learn you

1053
00:35:18,000 --> 00:35:19,359
know for each language that we want to

1054
00:35:19,359 --> 00:35:21,760
use we have to set up a parser for it

1055
00:35:21,760 --> 00:35:23,760
and then we have to figure out how that

1056
00:35:23,760 --> 00:35:25,839
parser represents the ast nodes that we

1057
00:35:25,839 --> 00:35:27,200
care about

1058
00:35:27,200 --> 00:35:28,880
which is a pretty significant amount of

1059
00:35:28,880 --> 00:35:31,920
overhead and requires some expertise so

1060
00:35:31,920 --> 00:35:33,520
is there anything uh is there anything

1061
00:35:33,520 --> 00:35:35,200
else in this category well in fact there

1062
00:35:35,200 --> 00:35:38,000
is and actually for that we turned to an

1063
00:35:38,000 --> 00:35:40,320
early facebook tool that was made when

1064
00:35:40,320 --> 00:35:42,240
facebook was a much younger company

1065
00:35:42,240 --> 00:35:44,079
which actually formed a lot of their

1066
00:35:44,079 --> 00:35:46,640
early program analysis infrastructure so

1067
00:35:46,640 --> 00:35:48,880
full disclosure this is a shameless plug

1068
00:35:48,880 --> 00:35:51,760
because we at my company are now uh the

1069
00:35:51,760 --> 00:35:53,839
maintainers of this tool uh but it's

1070
00:35:53,839 --> 00:35:55,280
still open source and we love it so it

1071
00:35:55,280 --> 00:35:56,640
was originally developed at facebook

1072
00:35:56,640 --> 00:35:58,480
it's called semgrep to encourage secure

1073
00:35:58,480 --> 00:36:00,320
code patterns basically it's

1074
00:36:00,320 --> 00:36:02,800
customizable lightweight static analysis

1075
00:36:02,800 --> 00:36:04,480
tool for finding bugs

1076
00:36:04,480 --> 00:36:06,880
uh we've kind of been building a

1077
00:36:06,880 --> 00:36:07,920
community around it and you're going to

1078
00:36:07,920 --> 00:36:09,040
hear about some of the owasp

1079
00:36:09,040 --> 00:36:11,359
collaboration that's happening later

1080
00:36:11,359 --> 00:36:12,880
but basically developing you know

1081
00:36:12,880 --> 00:36:14,560
hundreds of existing community rules and

1082
00:36:14,560 --> 00:36:16,400
the whole idea with the tool which

1083
00:36:16,400 --> 00:36:18,320
you'll see an example of in a second is

1084
00:36:18,320 --> 00:36:20,160
to combine the speed and customization

1085
00:36:20,160 --> 00:36:22,960
of grep with the expressiveness of more

1086
00:36:22,960 --> 00:36:25,280
of a traditional static analysis tool so

1087
00:36:25,280 --> 00:36:26,480
it runs online

1088
00:36:26,480 --> 00:36:28,560
doesn't require compilation it's open

1089
00:36:28,560 --> 00:36:29,680
source

1090
00:36:29,680 --> 00:36:31,680
and one of the coolest things i think is

1091
00:36:31,680 --> 00:36:33,920
that it doesn't require you to learn

1092
00:36:33,920 --> 00:36:36,160
some very complicated domain specific

1093
00:36:36,160 --> 00:36:37,680
language

1094
00:36:37,680 --> 00:36:38,880
generally the patterns you're going to

1095
00:36:38,880 --> 00:36:40,560
write are going to look very similar to

1096
00:36:40,560 --> 00:36:42,400
the source code that you're targeting

1097
00:36:42,400 --> 00:36:43,760
and you can see the supported languages

1098
00:36:43,760 --> 00:36:45,760
there so the pros

1099
00:36:45,760 --> 00:36:47,359
to some grep are

1100
00:36:47,359 --> 00:36:49,280
it is very good at handling languages

1101
00:36:49,280 --> 00:36:51,200
with more than one way to do it so if

1102
00:36:51,200 --> 00:36:52,960
you are targeting a language like ruby

1103
00:36:52,960 --> 00:36:54,240
where there's like i don't know four

1104
00:36:54,240 --> 00:36:56,400
ways to call a function

1105
00:36:56,400 --> 00:36:57,920
you can write one of them and some grep

1106
00:36:57,920 --> 00:36:59,440
will figure out all of the equivalent

1107
00:36:59,440 --> 00:37:00,640
variations

1108
00:37:00,640 --> 00:37:02,160
and it's a single tool for multiple

1109
00:37:02,160 --> 00:37:03,839
languages with a relatively simple

1110
00:37:03,839 --> 00:37:05,280
pattern language

1111
00:37:05,280 --> 00:37:07,359
the con is going to be that it's slower

1112
00:37:07,359 --> 00:37:09,119
than grep and of course not all

1113
00:37:09,119 --> 00:37:12,240
languages are supported unlike with grab

1114
00:37:12,240 --> 00:37:13,599
so what does that actually look like if

1115
00:37:13,599 --> 00:37:15,520
we go back to the exact example say

1116
00:37:15,520 --> 00:37:17,440
we're trying to you know prove that our

1117
00:37:17,440 --> 00:37:19,839
app doesn't have remote code execution

1118
00:37:19,839 --> 00:37:21,680
you can just invoke sim grep on the

1119
00:37:21,680 --> 00:37:23,680
command line with dash e and then the

1120
00:37:23,680 --> 00:37:25,599
expression that you want to find so in

1121
00:37:25,599 --> 00:37:27,839
this case the expression is just exec

1122
00:37:27,839 --> 00:37:30,640
left brain dot dot right print so this

1123
00:37:30,640 --> 00:37:32,400
is uh you know

1124
00:37:32,400 --> 00:37:34,880
there are two sort of extensions to the

1125
00:37:34,880 --> 00:37:36,400
programming language that same gut

1126
00:37:36,400 --> 00:37:38,400
provides the first extension is this dot

1127
00:37:38,400 --> 00:37:40,480
dot dot operator which is kind of like a

1128
00:37:40,480 --> 00:37:41,839
wild card

1129
00:37:41,839 --> 00:37:44,000
or a dot star in grep and it's basically

1130
00:37:44,000 --> 00:37:46,320
just saying i don't care whether there's

1131
00:37:46,320 --> 00:37:49,599
zero or one or more arguments to this

1132
00:37:49,599 --> 00:37:51,680
function just trigger on all of them and

1133
00:37:51,680 --> 00:37:53,280
you'll see that compared to you know if

1134
00:37:53,280 --> 00:37:55,280
we were just doing a dumb grep for the

1135
00:37:55,280 --> 00:37:56,960
same sort of thing

1136
00:37:56,960 --> 00:38:00,960
we're missing line 8 line 16 and line 18

1137
00:38:00,960 --> 00:38:02,480
which is exactly what we want we don't

1138
00:38:02,480 --> 00:38:04,480
want to be triggering on some exec we

1139
00:38:04,480 --> 00:38:05,920
don't want to be triggering uncommented

1140
00:38:05,920 --> 00:38:08,560
out code or code that is inside a string

1141
00:38:08,560 --> 00:38:10,320
and what's really cool i think is that

1142
00:38:10,320 --> 00:38:12,640
if you look at line one symgraph is

1143
00:38:12,640 --> 00:38:14,480
actually properly mapping through this

1144
00:38:14,480 --> 00:38:16,240
import so if you don't know python the

1145
00:38:16,240 --> 00:38:18,079
developer is importing exec they're

1146
00:38:18,079 --> 00:38:20,000
renaming it to be safe function and then

1147
00:38:20,000 --> 00:38:22,000
they're calling safe function but some

1148
00:38:22,000 --> 00:38:23,920
graph is smart enough to kind of track

1149
00:38:23,920 --> 00:38:25,920
through that import aliasing

1150
00:38:25,920 --> 00:38:27,520
so that's really cool um that was a

1151
00:38:27,520 --> 00:38:29,520
fairly basic example

1152
00:38:29,520 --> 00:38:32,400
if we look at a more complex example

1153
00:38:32,400 --> 00:38:34,480
here we have you know like an equivalent

1154
00:38:34,480 --> 00:38:37,280
sort of thing in java but in java the

1155
00:38:37,280 --> 00:38:39,280
exact function only matters if it comes

1156
00:38:39,280 --> 00:38:41,280
from java lang run time

1157
00:38:41,280 --> 00:38:43,040
so in this example we're using the

1158
00:38:43,040 --> 00:38:45,440
symbol expression to actually specify

1159
00:38:45,440 --> 00:38:47,440
some placeholder for the variable name

1160
00:38:47,440 --> 00:38:50,800
so it could be rt or could be other

1161
00:38:50,800 --> 00:38:52,720
in this case capital

1162
00:38:52,720 --> 00:38:54,560
dollar sign capital x is just a

1163
00:38:54,560 --> 00:38:57,200
placeholder for hey i don't care what

1164
00:38:57,200 --> 00:38:59,359
the variable name specifically here is

1165
00:38:59,359 --> 00:39:00,960
and we're using the same sort of pattern

1166
00:39:00,960 --> 00:39:03,119
you can see we've specified the type and

1167
00:39:03,119 --> 00:39:04,480
this is triggering on line seven and

1168
00:39:04,480 --> 00:39:07,200
nine but not on line 12 where another

1169
00:39:07,200 --> 00:39:09,920
object with a method named exec is being

1170
00:39:09,920 --> 00:39:10,880
called

1171
00:39:10,880 --> 00:39:12,160
uh so that's cool and there are some

1172
00:39:12,160 --> 00:39:13,760
links down here that you can go play

1173
00:39:13,760 --> 00:39:14,960
around with if you're looking at the

1174
00:39:14,960 --> 00:39:15,920
slides

1175
00:39:15,920 --> 00:39:17,680
and just try it out in an interactive

1176
00:39:17,680 --> 00:39:20,079
live editor or you can run it offline on

1177
00:39:20,079 --> 00:39:21,440
the command line

1178
00:39:21,440 --> 00:39:22,720
what's really interesting about a tool

1179
00:39:22,720 --> 00:39:25,520
like simrep is that it lowers the bar so

1180
00:39:25,520 --> 00:39:27,520
much to writing something that is you

1181
00:39:27,520 --> 00:39:29,280
know effectively a custom static

1182
00:39:29,280 --> 00:39:31,760
analysis tool that you can start to add

1183
00:39:31,760 --> 00:39:34,160
your own business logic checks so let's

1184
00:39:34,160 --> 00:39:36,480
say for instance that you know you say

1185
00:39:36,480 --> 00:39:38,640
have an application where you know that

1186
00:39:38,640 --> 00:39:40,320
a developer should always be calling

1187
00:39:40,320 --> 00:39:42,320
some function named verify transaction

1188
00:39:42,320 --> 00:39:45,200
before they call make transaction

1189
00:39:45,200 --> 00:39:46,800
here are the sim grip patterns that you

1190
00:39:46,800 --> 00:39:48,960
would use to enforce this on your code

1191
00:39:48,960 --> 00:39:51,520
base so you can see i'm actually in this

1192
00:39:51,520 --> 00:39:54,480
case combining two patterns

1193
00:39:54,480 --> 00:39:56,400
and if you click through to the try it

1194
00:39:56,400 --> 00:39:58,480
and solution things you'll see exactly

1195
00:39:58,480 --> 00:40:00,880
uh how this works on a real example but

1196
00:40:00,880 --> 00:40:02,240
basically i'm just saying hey i want to

1197
00:40:02,240 --> 00:40:04,160
find any code you can see i'm using

1198
00:40:04,160 --> 00:40:06,000
these dot dot operators to say i don't

1199
00:40:06,000 --> 00:40:08,000
care about what happens before or after

1200
00:40:08,000 --> 00:40:10,160
this line so any function that calls

1201
00:40:10,160 --> 00:40:12,960
make transaction but is not a function

1202
00:40:12,960 --> 00:40:15,040
which has verified transaction coming

1203
00:40:15,040 --> 00:40:17,920
first so that's pretty cool um

1204
00:40:17,920 --> 00:40:20,240
and i think the the real power of this

1205
00:40:20,240 --> 00:40:22,880
is you know at the at the most base

1206
00:40:22,880 --> 00:40:25,599
level if the developers don't actually

1207
00:40:25,599 --> 00:40:27,599
love the security team

1208
00:40:27,599 --> 00:40:29,920
all of this work for trying to eradicate

1209
00:40:29,920 --> 00:40:31,599
vulnerabilities and secure defaults can

1210
00:40:31,599 --> 00:40:32,960
be compromised

1211
00:40:32,960 --> 00:40:35,119
so here's an example from the british

1212
00:40:35,119 --> 00:40:37,040
government's evaluation

1213
00:40:37,040 --> 00:40:38,960
of the huawei source code

1214
00:40:38,960 --> 00:40:41,359
where they found that developers had

1215
00:40:41,359 --> 00:40:44,000
used a pound define basically redefine

1216
00:40:44,000 --> 00:40:45,599
the name of a save function to be the

1217
00:40:45,599 --> 00:40:48,240
unsafe one

1218
00:40:48,480 --> 00:40:50,800
so the real takeaway here is all right

1219
00:40:50,800 --> 00:40:52,640
like all this great you know like

1220
00:40:52,640 --> 00:40:54,000
eradicating vulnerability static

1221
00:40:54,000 --> 00:40:55,920
analysis tools it doesn't matter if we

1222
00:40:55,920 --> 00:40:57,680
don't consider the psychology of the

1223
00:40:57,680 --> 00:41:00,000
developer so what we need is three

1224
00:41:00,000 --> 00:41:01,920
simple ways to make developers love you

1225
00:41:01,920 --> 00:41:04,480
uh and hint it's not finding more

1226
00:41:04,480 --> 00:41:06,640
vulnerabilities in their code

1227
00:41:06,640 --> 00:41:08,160
i'm just going to run through you know

1228
00:41:08,160 --> 00:41:10,640
like kind of collating across all the

1229
00:41:10,640 --> 00:41:12,640
things that i've seen what are those

1230
00:41:12,640 --> 00:41:14,960
best practices from a tool that is

1231
00:41:14,960 --> 00:41:16,480
trying to inspect source code for

1232
00:41:16,480 --> 00:41:18,319
vulnerability eradication

1233
00:41:18,319 --> 00:41:20,240
so the first thing is to be fast uh you

1234
00:41:20,240 --> 00:41:21,920
know we covered this under continuous

1235
00:41:21,920 --> 00:41:23,359
scanning but now we're considering it

1236
00:41:23,359 --> 00:41:25,200
from the developer's perspective and

1237
00:41:25,200 --> 00:41:26,960
really i think the takeaway here is

1238
00:41:26,960 --> 00:41:28,800
don't come in last

1239
00:41:28,800 --> 00:41:30,400
so security checks should not be the

1240
00:41:30,400 --> 00:41:32,160
slowest thing blocking the developer

1241
00:41:32,160 --> 00:41:34,400
from merging it's okay to be slow as

1242
00:41:34,400 --> 00:41:36,160
long as you're not as slow as you know

1243
00:41:36,160 --> 00:41:37,920
the build and the other checks that are

1244
00:41:37,920 --> 00:41:39,680
going to be required to prevent the

1245
00:41:39,680 --> 00:41:41,839
developer from getting the dopamine rush

1246
00:41:41,839 --> 00:41:43,839
of clicking that green merge button

1247
00:41:43,839 --> 00:41:45,520
the second thing is to be early if

1248
00:41:45,520 --> 00:41:47,599
you're going to make me fix something as

1249
00:41:47,599 --> 00:41:49,119
a developer i want you to tell me as

1250
00:41:49,119 --> 00:41:50,720
soon as possible

1251
00:41:50,720 --> 00:41:52,960
ideally in the editor here we have a

1252
00:41:52,960 --> 00:41:54,880
visual studio code with a semrup

1253
00:41:54,880 --> 00:41:57,200
extension installed on the right and the

1254
00:41:57,200 --> 00:41:59,680
third thing and last thing is people

1255
00:41:59,680 --> 00:42:01,760
love easy buttons if you can provide an

1256
00:42:01,760 --> 00:42:04,079
autofix and just make the process of

1257
00:42:04,079 --> 00:42:06,560
fixing security problems fast and easy

1258
00:42:06,560 --> 00:42:08,640
even if you don't have a perfect patch

1259
00:42:08,640 --> 00:42:10,480
that is just like click to apply this

1260
00:42:10,480 --> 00:42:12,160
fix and it's actually going to perfectly

1261
00:42:12,160 --> 00:42:13,440
fix the code

1262
00:42:13,440 --> 00:42:15,839
even an imperfect suggestion is a lot

1263
00:42:15,839 --> 00:42:17,280
better than nothing

1264
00:42:17,280 --> 00:42:19,359
um so we've actually extended sim grip

1265
00:42:19,359 --> 00:42:20,960
since it's facebook days to have support

1266
00:42:20,960 --> 00:42:23,040
for some auto fixing you're seeing an

1267
00:42:23,040 --> 00:42:25,440
animation of that here down below one of

1268
00:42:25,440 --> 00:42:27,359
the cool things is you can use you can

1269
00:42:27,359 --> 00:42:29,520
the same sort of pattern language that

1270
00:42:29,520 --> 00:42:31,520
you use to specify the query can be used

1271
00:42:31,520 --> 00:42:35,599
to specify the fix which is really cool

1272
00:42:35,839 --> 00:42:38,319
so we've covered uh you know some

1273
00:42:38,319 --> 00:42:40,800
applied techniques and tools for

1274
00:42:40,800 --> 00:42:43,359
actually making this real with your you

1275
00:42:43,359 --> 00:42:44,880
know interfacing with the development

1276
00:42:44,880 --> 00:42:47,359
team what about interfacing uh you know

1277
00:42:47,359 --> 00:42:48,880
with the people the sorts of people who

1278
00:42:48,880 --> 00:42:50,480
develop frameworks one of the coolest

1279
00:42:50,480 --> 00:42:52,720
things i think is that uh you know again

1280
00:42:52,720 --> 00:42:54,640
referencing building secure and reliable

1281
00:42:54,640 --> 00:42:56,880
systems by google google has actually

1282
00:42:56,880 --> 00:42:59,599
mapped every owasp top 10 vulnerability

1283
00:42:59,599 --> 00:43:01,920
to a framework hardening measure

1284
00:43:01,920 --> 00:43:04,240
um so you know there's something that

1285
00:43:04,240 --> 00:43:06,400
you can do at the framework level

1286
00:43:06,400 --> 00:43:08,560
for each one of the oau's top 10

1287
00:43:08,560 --> 00:43:10,560
vulnerabilities and in fact we've been

1288
00:43:10,560 --> 00:43:13,359
working with owasp uh specifically on

1289
00:43:13,359 --> 00:43:16,079
this so semgrep and owasp uh have been

1290
00:43:16,079 --> 00:43:18,800
collaborating on asvs and the oau's

1291
00:43:18,800 --> 00:43:20,800
cheat sheets so the goal here is to get

1292
00:43:20,800 --> 00:43:22,480
out of the box support for like hey

1293
00:43:22,480 --> 00:43:24,319
there's a tool that you can just run

1294
00:43:24,319 --> 00:43:26,400
which will verify ah is my code

1295
00:43:26,400 --> 00:43:28,720
compliant with asvs level one which was

1296
00:43:28,720 --> 00:43:31,040
specifically designed to be automatable

1297
00:43:31,040 --> 00:43:32,880
or if you're reading a security cheat

1298
00:43:32,880 --> 00:43:35,760
sheet from owasp you can have a rule set

1299
00:43:35,760 --> 00:43:37,440
that you can just use to run and say hey

1300
00:43:37,440 --> 00:43:39,599
like i have a project i'm looking at

1301
00:43:39,599 --> 00:43:41,520
this cheat sheet is there any code here

1302
00:43:41,520 --> 00:43:42,960
that violates the cheat sheet

1303
00:43:42,960 --> 00:43:44,480
recommendations

1304
00:43:44,480 --> 00:43:45,760
and i'm really excited about this

1305
00:43:45,760 --> 00:43:46,960
because i think it gives us an

1306
00:43:46,960 --> 00:43:50,160
opportunity to kind of um

1307
00:43:50,160 --> 00:43:53,280
codify in a really automated way a lot

1308
00:43:53,280 --> 00:43:54,880
of the great domain knowledge that we

1309
00:43:54,880 --> 00:43:56,800
have as security experts and make it

1310
00:43:56,800 --> 00:43:58,720
more accessible to a larger number of

1311
00:43:58,720 --> 00:44:01,599
people by having it actually be not just

1312
00:44:01,599 --> 00:44:03,680
a cheat sheet that you can read but a

1313
00:44:03,680 --> 00:44:05,440
cheat sheet that you can execute or a

1314
00:44:05,440 --> 00:44:07,359
standard that you can execute

1315
00:44:07,359 --> 00:44:09,200
it really starts to i think just make it

1316
00:44:09,200 --> 00:44:11,119
much easier to distribute that security

1317
00:44:11,119 --> 00:44:13,200
knowledge rather than having it locked

1318
00:44:13,200 --> 00:44:16,078
up in a wiki

1319
00:44:17,440 --> 00:44:19,839
so yeah uh in conclusion if there's just

1320
00:44:19,839 --> 00:44:21,200
a few things that you take away from the

1321
00:44:21,200 --> 00:44:23,680
talk let it be this first off secure

1322
00:44:23,680 --> 00:44:25,680
defaults are the best way to scalably

1323
00:44:25,680 --> 00:44:27,839
raise your security bar not by playing

1324
00:44:27,839 --> 00:44:29,280
bug whack-a-mole

1325
00:44:29,280 --> 00:44:32,160
second killing bug classes is going to

1326
00:44:32,160 --> 00:44:33,680
produce compounding results that's going

1327
00:44:33,680 --> 00:44:36,000
to make your appsec team more leveraged

1328
00:44:36,000 --> 00:44:37,520
and the way that you should do that is

1329
00:44:37,520 --> 00:44:39,839
by basically defining a safe pattern

1330
00:44:39,839 --> 00:44:42,480
educating developers uh as you roll it

1331
00:44:42,480 --> 00:44:44,079
out and then figuring out a way to

1332
00:44:44,079 --> 00:44:46,319
enforce it continuously for which you're

1333
00:44:46,319 --> 00:44:48,319
going to need fast and lightweight tools

1334
00:44:48,319 --> 00:44:50,720
uh grep might fit some of your use cases

1335
00:44:50,720 --> 00:44:52,400
there and you're really going to want to

1336
00:44:52,400 --> 00:44:54,960
focus on the developer experience with

1337
00:44:54,960 --> 00:44:56,240
that tool

1338
00:44:56,240 --> 00:44:58,079
so i hope you've enjoyed our talk on

1339
00:44:58,079 --> 00:45:00,720
eradicating vulnerability classes we

1340
00:45:00,720 --> 00:45:02,880
would love to chat with you from the

1341
00:45:02,880 --> 00:45:04,880
oau's cheat sheet side or the simrep

1342
00:45:04,880 --> 00:45:05,839
side

1343
00:45:05,839 --> 00:45:07,359
you know whatever we've presented that

1344
00:45:07,359 --> 00:45:08,480
could be useful and we're going to be

1345
00:45:08,480 --> 00:45:11,440
posting the slides at the url below

1346
00:45:11,440 --> 00:45:12,800
go out and

1347
00:45:12,800 --> 00:45:14,560
eradicate some vulnerabilities thank you

1348
00:45:14,560 --> 00:45:17,680
very much

