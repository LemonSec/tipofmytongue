1
00:00:02,879 --> 00:00:05,839
arcsan is now digital.ai

2
00:00:05,839 --> 00:00:07,759
join us at our booth in the virtual expo

3
00:00:07,759 --> 00:00:10,080
hall to learn how our app protection

4
00:00:10,080 --> 00:00:12,080
white box cryptography and threat

5
00:00:12,080 --> 00:00:14,080
analytics solutions can help you stay

6
00:00:14,080 --> 00:00:18,320
ahead of the evolving threat landscape

7
00:00:21,359 --> 00:00:22,560
welcome

8
00:00:22,560 --> 00:00:23,439
today

9
00:00:23,439 --> 00:00:24,960
i'm going to help you

10
00:00:24,960 --> 00:00:27,359
navigate this alphabet soup

11
00:00:27,359 --> 00:00:31,359
of scanning tools sas das isd rasp and

12
00:00:31,359 --> 00:00:33,600
asd

13
00:00:33,600 --> 00:00:34,800
first

14
00:00:34,800 --> 00:00:37,520
i want to start

15
00:00:37,520 --> 00:00:39,600
by thanking troop t

16
00:00:39,600 --> 00:00:40,960
sherlock carr

17
00:00:40,960 --> 00:00:43,360
for basically reviewing these slides and

18
00:00:43,360 --> 00:00:45,120
providing updated input

19
00:00:45,120 --> 00:00:46,239
to help me

20
00:00:46,239 --> 00:00:47,600
have more

21
00:00:47,600 --> 00:00:49,360
up-to-date information in these slides

22
00:00:49,360 --> 00:00:52,399
so thank you tripty

23
00:00:52,719 --> 00:00:53,920
all right so

24
00:00:53,920 --> 00:00:56,239
one of the things that i notice people

25
00:00:56,239 --> 00:00:58,399
making as a mistake when they're

26
00:00:58,399 --> 00:01:00,480
choosing a scanning tool

27
00:01:00,480 --> 00:01:03,760
is the first thing they do is they look

28
00:01:03,760 --> 00:01:05,519
at the scanning tool and go or they hear

29
00:01:05,519 --> 00:01:06,960
about it from someone

30
00:01:06,960 --> 00:01:09,520
and they say wow this is a great tool

31
00:01:09,520 --> 00:01:12,000
joe bob says it's really good and it's

32
00:01:12,000 --> 00:01:14,240
gonna you know

33
00:01:14,240 --> 00:01:17,119
toast your bread and make you breakfast

34
00:01:17,119 --> 00:01:18,400
and find all your security

35
00:01:18,400 --> 00:01:19,920
vulnerabilities

36
00:01:19,920 --> 00:01:23,200
but that is the wrong way of going about

37
00:01:23,200 --> 00:01:25,520
things you're actually putting

38
00:01:25,520 --> 00:01:28,479
the cart before the horse

39
00:01:28,479 --> 00:01:31,280
so the first thing that you want to do

40
00:01:31,280 --> 00:01:32,799
when you're trying to evaluate which of

41
00:01:32,799 --> 00:01:34,799
these tools to use

42
00:01:34,799 --> 00:01:37,040
is you've got to understand

43
00:01:37,040 --> 00:01:39,119
what you're scanning

44
00:01:39,119 --> 00:01:40,799
and when you're trying to understand

45
00:01:40,799 --> 00:01:42,560
what you're scanning you have to ask

46
00:01:42,560 --> 00:01:44,880
yourself several questions

47
00:01:44,880 --> 00:01:45,840
one is

48
00:01:45,840 --> 00:01:47,520
what language

49
00:01:47,520 --> 00:01:49,280
are you going to be scanning or

50
00:01:49,280 --> 00:01:52,159
languages are you going to be scanning

51
00:01:52,159 --> 00:01:54,720
are there any particular frameworks

52
00:01:54,720 --> 00:01:58,960
that are associated with those languages

53
00:01:58,960 --> 00:02:00,960
what is it that you're scanning is it a

54
00:02:00,960 --> 00:02:02,960
web application it is a is it a mobile

55
00:02:02,960 --> 00:02:04,479
application

56
00:02:04,479 --> 00:02:08,160
is it a library or some esoteric piece

57
00:02:08,160 --> 00:02:09,360
of code

58
00:02:09,360 --> 00:02:10,399
that

59
00:02:10,399 --> 00:02:13,680
is not seen very often like a trustlet

60
00:02:13,680 --> 00:02:16,160
in a trusted execution environment or

61
00:02:16,160 --> 00:02:18,480
a smart card applet

62
00:02:18,480 --> 00:02:20,239
each one of these things are going to

63
00:02:20,239 --> 00:02:22,800
have different limitations

64
00:02:22,800 --> 00:02:24,640
by different scanning tools and their

65
00:02:24,640 --> 00:02:26,959
ability to do a good job and finding

66
00:02:26,959 --> 00:02:28,959
vulnerabilities

67
00:02:28,959 --> 00:02:31,760
in those

68
00:02:31,760 --> 00:02:33,280
areas

69
00:02:33,280 --> 00:02:34,480
so to give you an example web

70
00:02:34,480 --> 00:02:37,440
applications are pretty well supported

71
00:02:37,440 --> 00:02:39,120
but mobile applications are going to be

72
00:02:39,120 --> 00:02:40,800
difficult for

73
00:02:40,800 --> 00:02:43,840
das and isd and rasp and we're going to

74
00:02:43,840 --> 00:02:46,400
discuss why

75
00:02:46,400 --> 00:02:48,840
and if you're dealing with things like

76
00:02:48,840 --> 00:02:52,319
trustlets well most scanning tools don't

77
00:02:52,319 --> 00:02:55,040
have researchers that are writing rules

78
00:02:55,040 --> 00:02:57,120
to find vulnerabilities in those type of

79
00:02:57,120 --> 00:02:59,840
applications so if you try scanning

80
00:02:59,840 --> 00:03:02,400
your apps your trustlet apps don't

81
00:03:02,400 --> 00:03:04,239
expect to find anything besides quality

82
00:03:04,239 --> 00:03:06,640
issues

83
00:03:08,720 --> 00:03:09,840
so

84
00:03:09,840 --> 00:03:13,120
there are some things that are in common

85
00:03:13,120 --> 00:03:15,440
for all of these tools that you have to

86
00:03:15,440 --> 00:03:17,440
understand

87
00:03:17,440 --> 00:03:19,040
in and assess for each of these

88
00:03:19,040 --> 00:03:22,400
different alphabet soup tools

89
00:03:22,400 --> 00:03:24,239
and

90
00:03:24,239 --> 00:03:26,159
each will have their own unique

91
00:03:26,159 --> 00:03:27,440
weaknesses

92
00:03:27,440 --> 00:03:29,040
but then there are also common

93
00:03:29,040 --> 00:03:30,799
characteristics that you're going to

94
00:03:30,799 --> 00:03:33,280
need to understand for each of these

95
00:03:33,280 --> 00:03:35,280
tools individually

96
00:03:35,280 --> 00:03:36,640
like for example

97
00:03:36,640 --> 00:03:39,920
how many rules does the tool have for

98
00:03:39,920 --> 00:03:42,400
your language or your framework

99
00:03:42,400 --> 00:03:44,799
and what type of vulnerabilities

100
00:03:44,799 --> 00:03:46,560
are actually covered

101
00:03:46,560 --> 00:03:47,920
by that tool

102
00:03:47,920 --> 00:03:49,920
for your language and your framework and

103
00:03:49,920 --> 00:03:52,159
your architecture

104
00:03:52,159 --> 00:03:54,640
and you need to know how well

105
00:03:54,640 --> 00:03:56,239
the language is supported because some

106
00:03:56,239 --> 00:03:58,480
of these tools say they support a

107
00:03:58,480 --> 00:04:00,480
specific language

108
00:04:00,480 --> 00:04:02,159
but when you actually go run them on the

109
00:04:02,159 --> 00:04:03,519
language

110
00:04:03,519 --> 00:04:06,720
your results may vary

111
00:04:07,120 --> 00:04:10,400
also frameworks have specific entry

112
00:04:10,400 --> 00:04:12,959
points that they define

113
00:04:12,959 --> 00:04:15,840
and if the tool that you're using

114
00:04:15,840 --> 00:04:17,839
doesn't know about your framework well

115
00:04:17,839 --> 00:04:19,759
then it's not going to be able to

116
00:04:19,759 --> 00:04:22,240
trace the data flow entry points through

117
00:04:22,240 --> 00:04:25,360
your application to the vulnerable sinks

118
00:04:25,360 --> 00:04:27,520
they're going to cause exploits

119
00:04:27,520 --> 00:04:29,040
and so you need to know if the

120
00:04:29,040 --> 00:04:31,280
frameworks are supported by the tool and

121
00:04:31,280 --> 00:04:33,199
how well

122
00:04:33,199 --> 00:04:34,400
and how well

123
00:04:34,400 --> 00:04:36,800
is the question of how many rules they

124
00:04:36,800 --> 00:04:38,800
have and how well they support the

125
00:04:38,800 --> 00:04:40,560
underlying language that the framework

126
00:04:40,560 --> 00:04:42,960
is built on

127
00:04:42,960 --> 00:04:44,080
the other thing is you have to

128
00:04:44,080 --> 00:04:45,280
understand

129
00:04:45,280 --> 00:04:47,919
what architecture is required by the

130
00:04:47,919 --> 00:04:49,120
tool

131
00:04:49,120 --> 00:04:50,639
so for example

132
00:04:50,639 --> 00:04:53,520
with ist and rasp

133
00:04:53,520 --> 00:04:56,400
you need to have an agent running

134
00:04:56,400 --> 00:04:58,639
in your application

135
00:04:58,639 --> 00:05:00,320
and that's going to be very difficult to

136
00:05:00,320 --> 00:05:01,039
do

137
00:05:01,039 --> 00:05:03,280
in a trusted environment or a mobile

138
00:05:03,280 --> 00:05:05,758
application

139
00:05:06,479 --> 00:05:09,039
the other thing is all of these tools to

140
00:05:09,039 --> 00:05:10,800
a certain extent are going to struggle

141
00:05:10,800 --> 00:05:12,639
with finding business logic

142
00:05:12,639 --> 00:05:15,199
vulnerabilities

143
00:05:15,199 --> 00:05:16,479
so you may

144
00:05:16,479 --> 00:05:18,880
want to write your own custom rules

145
00:05:18,880 --> 00:05:19,759
and if you're going to write your own

146
00:05:19,759 --> 00:05:22,560
custom rules you need to know what level

147
00:05:22,560 --> 00:05:25,039
of custom rules the tools support

148
00:05:25,039 --> 00:05:28,160
so some tools might support custom rules

149
00:05:28,160 --> 00:05:30,800
that are simple grep scripts

150
00:05:30,800 --> 00:05:33,840
other tools may have custom rules which

151
00:05:33,840 --> 00:05:35,840
allow you to manage state

152
00:05:35,840 --> 00:05:38,400
control flow look at your code and set

153
00:05:38,400 --> 00:05:39,840
up variables

154
00:05:39,840 --> 00:05:43,520
that other rules can build off of

155
00:05:43,520 --> 00:05:45,680
and finally you want to understand how

156
00:05:45,680 --> 00:05:47,600
well these tools are going to integrate

157
00:05:47,600 --> 00:05:49,120
with your

158
00:05:49,120 --> 00:05:51,360
cicd pipeline

159
00:05:51,360 --> 00:05:53,680
because everything today in app security

160
00:05:53,680 --> 00:05:55,600
is about shifting left

161
00:05:55,600 --> 00:05:58,400
getting security in earlier within your

162
00:05:58,400 --> 00:05:59,759
processes

163
00:05:59,759 --> 00:06:02,160
and making sure you get

164
00:06:02,160 --> 00:06:04,560
security and find those problems in as

165
00:06:04,560 --> 00:06:06,800
early as possible when it's cheaper to

166
00:06:06,800 --> 00:06:09,039
fix

167
00:06:09,360 --> 00:06:12,080
the other thing that's very important

168
00:06:12,080 --> 00:06:14,560
is to include your developers

169
00:06:14,560 --> 00:06:16,560
and your qa staff

170
00:06:16,560 --> 00:06:19,360
in the selection of these tools

171
00:06:19,360 --> 00:06:21,440
and the reason why is because

172
00:06:21,440 --> 00:06:23,120
they're going to be the ones that are

173
00:06:23,120 --> 00:06:25,120
going to have to use them that have to

174
00:06:25,120 --> 00:06:26,560
integrate them

175
00:06:26,560 --> 00:06:29,440
you want your developers feeling good

176
00:06:29,440 --> 00:06:31,840
about the tool and the results

177
00:06:31,840 --> 00:06:34,479
and you want qa involved because

178
00:06:34,479 --> 00:06:36,720
for example a dynamic application

179
00:06:36,720 --> 00:06:38,000
security testing

180
00:06:38,000 --> 00:06:39,840
solution you want them to feel

181
00:06:39,840 --> 00:06:42,000
comfortable actually using that and

182
00:06:42,000 --> 00:06:44,479
integrating that into the qa process

183
00:06:44,479 --> 00:06:46,080
so they become

184
00:06:46,080 --> 00:06:49,120
your security

185
00:06:49,120 --> 00:06:52,720
army and we have the whole organization

186
00:06:52,720 --> 00:06:56,080
focused on security

187
00:06:58,000 --> 00:06:59,759
so let's start looking at each of the

188
00:06:59,759 --> 00:07:01,680
tools individually let's start with

189
00:07:01,680 --> 00:07:04,080
static analysis because that is one of

190
00:07:04,080 --> 00:07:07,360
the first things that came out and

191
00:07:07,360 --> 00:07:10,639
when you look at it the advantages

192
00:07:10,639 --> 00:07:11,440
it

193
00:07:11,440 --> 00:07:13,840
if the language is supported well

194
00:07:13,840 --> 00:07:16,400
and you give it all the source code then

195
00:07:16,400 --> 00:07:18,000
it's going to give

196
00:07:18,000 --> 00:07:20,319
pretty decent results if the rules are

197
00:07:20,319 --> 00:07:21,919
there

198
00:07:21,919 --> 00:07:23,840
now the thing is when i say you give it

199
00:07:23,840 --> 00:07:26,400
all the source code what i mean by that

200
00:07:26,400 --> 00:07:28,840
is that if you have third-party

201
00:07:28,840 --> 00:07:30,800
libraries one of the functions of a

202
00:07:30,800 --> 00:07:33,039
static analysis tool is to do data flow

203
00:07:33,039 --> 00:07:34,160
analysis

204
00:07:34,160 --> 00:07:37,440
and if your data flow happens to go

205
00:07:37,440 --> 00:07:39,919
through a third party library that's

206
00:07:39,919 --> 00:07:42,880
only in binary form

207
00:07:42,880 --> 00:07:44,479
and if it doesn't have pass-through

208
00:07:44,479 --> 00:07:47,199
rules then the data flow analysis stops

209
00:07:47,199 --> 00:07:48,240
there

210
00:07:48,240 --> 00:07:49,919
and it won't find any

211
00:07:49,919 --> 00:07:52,240
vulnerabilities where the data flow

212
00:07:52,240 --> 00:07:54,080
passes through those libraries and ends

213
00:07:54,080 --> 00:07:56,479
up in a sync

214
00:07:56,479 --> 00:07:57,440
now

215
00:07:57,440 --> 00:07:59,840
the other advantage of static analysis

216
00:07:59,840 --> 00:08:00,800
is that

217
00:08:00,800 --> 00:08:02,000
it will

218
00:08:02,000 --> 00:08:05,039
scan all the theoretical code paths when

219
00:08:05,039 --> 00:08:07,599
you're within your application so from a

220
00:08:07,599 --> 00:08:08,960
code coverage

221
00:08:08,960 --> 00:08:10,560
perspective

222
00:08:10,560 --> 00:08:13,919
it's going to give you a lot of findings

223
00:08:13,919 --> 00:08:17,680
in addition custom rules can be used to

224
00:08:17,680 --> 00:08:20,560
support a framework or library or one of

225
00:08:20,560 --> 00:08:22,639
those esoteric

226
00:08:22,639 --> 00:08:24,639
programming models like trusted

227
00:08:24,639 --> 00:08:26,400
execution environments

228
00:08:26,400 --> 00:08:28,879
where you want to find buffer overflows

229
00:08:28,879 --> 00:08:29,680
and

230
00:08:29,680 --> 00:08:32,799
integer overflows

231
00:08:33,279 --> 00:08:35,279
the other thing is that it works with

232
00:08:35,279 --> 00:08:36,880
mobile applications

233
00:08:36,880 --> 00:08:38,559
as well

234
00:08:38,559 --> 00:08:41,200
from a disadvantage standpoint

235
00:08:41,200 --> 00:08:43,519
it cannot scan through binaries

236
00:08:43,519 --> 00:08:46,160
unless you give it past the rules and it

237
00:08:46,160 --> 00:08:47,920
doesn't find any of the vulnerabilities

238
00:08:47,920 --> 00:08:50,800
in those third-party binary libraries

239
00:08:50,800 --> 00:08:52,640
there is a

240
00:08:52,640 --> 00:08:54,240
modification to this called binary

241
00:08:54,240 --> 00:08:55,600
static analysis but we're going to talk

242
00:08:55,600 --> 00:08:57,360
about that next

243
00:08:57,360 --> 00:09:00,080
the other disadvantage of static

244
00:09:00,080 --> 00:09:03,120
analysis is that it tends to have a

245
00:09:03,120 --> 00:09:06,399
high number of false positives

246
00:09:06,399 --> 00:09:07,600
and

247
00:09:07,600 --> 00:09:10,320
it's highly dependent on

248
00:09:10,320 --> 00:09:12,399
the rules and the coverage of those

249
00:09:12,399 --> 00:09:16,480
rules for your language or framework

250
00:09:16,480 --> 00:09:17,839
so what you're going to find is if you

251
00:09:17,839 --> 00:09:20,160
have a very niche framework

252
00:09:20,160 --> 00:09:21,519
or language

253
00:09:21,519 --> 00:09:23,279
you may not have

254
00:09:23,279 --> 00:09:26,720
good support in static analysis

255
00:09:26,720 --> 00:09:28,480
then the other thing is there are some

256
00:09:28,480 --> 00:09:30,720
inherent tunable parameters which is

257
00:09:30,720 --> 00:09:33,040
going to affect how deep the static

258
00:09:33,040 --> 00:09:36,000
analysis scans to what level how long

259
00:09:36,000 --> 00:09:37,920
it's going to take

260
00:09:37,920 --> 00:09:39,519
and those are things that are going to

261
00:09:39,519 --> 00:09:41,600
require very specialized knowledge to

262
00:09:41,600 --> 00:09:44,399
tune properly

263
00:09:44,560 --> 00:09:46,640
so now if we look at binary static

264
00:09:46,640 --> 00:09:48,399
analysis what we're doing is we're

265
00:09:48,399 --> 00:09:50,880
scanning the binaries and it's going to

266
00:09:50,880 --> 00:09:52,240
do well

267
00:09:52,240 --> 00:09:53,920
for supported languages as long as you

268
00:09:53,920 --> 00:09:57,360
give it all the binaries

269
00:09:57,440 --> 00:09:58,240
now

270
00:09:58,240 --> 00:10:00,560
the one advantage of binary static

271
00:10:00,560 --> 00:10:02,560
analysis is that it's going to find the

272
00:10:02,560 --> 00:10:04,640
vulnerabilities in your third-party

273
00:10:04,640 --> 00:10:06,720
libraries

274
00:10:06,720 --> 00:10:09,839
and it works with mobile applications

275
00:10:09,839 --> 00:10:12,399
from a disadvantages standpoint

276
00:10:12,399 --> 00:10:13,760
you're not going to be able to perfectly

277
00:10:13,760 --> 00:10:15,680
correlate when a vulnerability is found

278
00:10:15,680 --> 00:10:16,959
in binary

279
00:10:16,959 --> 00:10:18,880
to where it is in the source code

280
00:10:18,880 --> 00:10:20,800
because some of that information is lost

281
00:10:20,800 --> 00:10:23,360
in the translation process

282
00:10:23,360 --> 00:10:26,720
it also has high false positives

283
00:10:26,720 --> 00:10:29,360
and it also is dependent highly on the

284
00:10:29,360 --> 00:10:32,160
quality and coverage of rules

285
00:10:32,160 --> 00:10:34,720
and has the same disadvantages to static

286
00:10:34,720 --> 00:10:37,279
analysis

287
00:10:39,360 --> 00:10:41,440
so now let's move on to dynamic

288
00:10:41,440 --> 00:10:43,519
application security testing

289
00:10:43,519 --> 00:10:44,240
so

290
00:10:44,240 --> 00:10:47,760
one of the advantages of dast

291
00:10:47,760 --> 00:10:50,160
is that it can see across your server

292
00:10:50,160 --> 00:10:52,000
pipeline because it's sending in a

293
00:10:52,000 --> 00:10:54,800
payload which is going to travel across

294
00:10:54,800 --> 00:10:56,560
the server pipeline

295
00:10:56,560 --> 00:10:58,240
invoke your business logic and get a

296
00:10:58,240 --> 00:10:59,519
response

297
00:10:59,519 --> 00:11:00,560
and so it's going to find

298
00:11:00,560 --> 00:11:02,480
vulnerabilities that aren't going to be

299
00:11:02,480 --> 00:11:05,279
found by tools that are very focused on

300
00:11:05,279 --> 00:11:08,079
one component of that pipeline

301
00:11:08,079 --> 00:11:11,519
so for example http request smuggling or

302
00:11:11,519 --> 00:11:14,000
parameter pollution or cash poisoning

303
00:11:14,000 --> 00:11:15,680
these type of vulnerabilities won't be

304
00:11:15,680 --> 00:11:16,640
found

305
00:11:16,640 --> 00:11:19,040
by the other tools because they're very

306
00:11:19,040 --> 00:11:20,640
focused on just

307
00:11:20,640 --> 00:11:23,279
living in one of your servers instead of

308
00:11:23,279 --> 00:11:26,079
looking at that whole server pipeline

309
00:11:26,079 --> 00:11:28,480
the other advantage of das is minimal

310
00:11:28,480 --> 00:11:30,399
installation and configuration to get

311
00:11:30,399 --> 00:11:31,360
started

312
00:11:31,360 --> 00:11:33,839
you basically install the software point

313
00:11:33,839 --> 00:11:36,480
and click you're ready to go

314
00:11:36,480 --> 00:11:38,160
it doesn't require any type of source

315
00:11:38,160 --> 00:11:40,839
code integration

316
00:11:40,839 --> 00:11:43,600
it's easier to get

317
00:11:43,600 --> 00:11:46,079
integrated into the build process

318
00:11:46,079 --> 00:11:48,480
it can inherently work across language

319
00:11:48,480 --> 00:11:50,399
boundaries because it doesn't care it's

320
00:11:50,399 --> 00:11:52,959
just passing in a payload

321
00:11:52,959 --> 00:11:54,320
and

322
00:11:54,320 --> 00:11:57,920
today modern das tools are improving

323
00:11:57,920 --> 00:11:59,839
in reducing the false number of false

324
00:11:59,839 --> 00:12:01,760
positives in the past

325
00:12:01,760 --> 00:12:04,160
there were a lot of false positives

326
00:12:04,160 --> 00:12:06,560
because basically

327
00:12:06,560 --> 00:12:09,040
it was difficult for

328
00:12:09,040 --> 00:12:11,920
the tools to differentiate between

329
00:12:11,920 --> 00:12:13,279
an error

330
00:12:13,279 --> 00:12:14,240
and

331
00:12:14,240 --> 00:12:16,959
having a payload that actually triggered

332
00:12:16,959 --> 00:12:18,079
the error

333
00:12:18,079 --> 00:12:21,839
that it thinks it's triggering

334
00:12:22,399 --> 00:12:26,000
and today modern das tools actually have

335
00:12:26,000 --> 00:12:29,120
some specialized business logic scanning

336
00:12:29,120 --> 00:12:30,800
capabilities

337
00:12:30,800 --> 00:12:32,800
for things that are well known like

338
00:12:32,800 --> 00:12:34,959
multi-page authentication flows shopping

339
00:12:34,959 --> 00:12:36,839
carts

340
00:12:36,839 --> 00:12:38,639
etc

341
00:12:38,639 --> 00:12:40,560
now when we talk about disadvantages

342
00:12:40,560 --> 00:12:41,760
well

343
00:12:41,760 --> 00:12:44,320
it's difficult if an application is

344
00:12:44,320 --> 00:12:46,000
coded correctly

345
00:12:46,000 --> 00:12:49,200
in terms of returning

346
00:12:49,320 --> 00:12:53,360
non-disclosing error messages for a das

347
00:12:53,360 --> 00:12:54,240
tool

348
00:12:54,240 --> 00:12:56,480
to actually understand

349
00:12:56,480 --> 00:12:59,040
if the payload that it sent in

350
00:12:59,040 --> 00:13:00,480
was causing

351
00:13:00,480 --> 00:13:03,680
that vulnerability or some other so if

352
00:13:03,680 --> 00:13:05,600
you have an xpath injection

353
00:13:05,600 --> 00:13:07,279
vulnerability and you pass a sql

354
00:13:07,279 --> 00:13:09,120
injection payload to it well it's going

355
00:13:09,120 --> 00:13:10,560
to return there

356
00:13:10,560 --> 00:13:12,240
but the thing is

357
00:13:12,240 --> 00:13:13,600
you don't know if that error was really

358
00:13:13,600 --> 00:13:15,600
caused by the fact that if there's a sql

359
00:13:15,600 --> 00:13:17,200
injection vulnerability behind this or

360
00:13:17,200 --> 00:13:18,480
x-pad

361
00:13:18,480 --> 00:13:21,120
so what you'd find is a lot of false

362
00:13:21,120 --> 00:13:22,320
positives

363
00:13:22,320 --> 00:13:26,480
and a lot of vulnerabilities that were

364
00:13:26,480 --> 00:13:30,720
cited for the same url path

365
00:13:30,959 --> 00:13:33,680
when you're looking at these tools

366
00:13:33,680 --> 00:13:36,639
your code coverage is going to depend on

367
00:13:36,639 --> 00:13:38,320
how well

368
00:13:38,320 --> 00:13:40,800
the spidering logic of the dash tool

369
00:13:40,800 --> 00:13:42,160
works

370
00:13:42,160 --> 00:13:44,320
sometimes it's very difficult in modern

371
00:13:44,320 --> 00:13:46,639
applications to know

372
00:13:46,639 --> 00:13:48,480
how to navigate

373
00:13:48,480 --> 00:13:50,000
and where to go

374
00:13:50,000 --> 00:13:51,839
to find different pages that can be

375
00:13:51,839 --> 00:13:54,560
exercisable

376
00:13:54,560 --> 00:13:56,880
now today there are

377
00:13:56,880 --> 00:13:59,519
das tools that utilize swagger

378
00:13:59,519 --> 00:14:01,680
documentation apis

379
00:14:01,680 --> 00:14:04,480
that will basically give it

380
00:14:04,480 --> 00:14:08,399
what urls to attack or look at the

381
00:14:08,399 --> 00:14:10,560
framework artifact components that give

382
00:14:10,560 --> 00:14:13,040
it urls to attack and so it's getting

383
00:14:13,040 --> 00:14:16,040
better

384
00:14:18,560 --> 00:14:22,959
so if we talk about ist and rasp

385
00:14:22,959 --> 00:14:25,040
we basically have an agent that's going

386
00:14:25,040 --> 00:14:26,800
to instrument your code

387
00:14:26,800 --> 00:14:28,720
to basically

388
00:14:28,720 --> 00:14:29,760
watch

389
00:14:29,760 --> 00:14:33,440
input being passed into your application

390
00:14:33,440 --> 00:14:35,120
trace it through

391
00:14:35,120 --> 00:14:36,959
to a sync and report those

392
00:14:36,959 --> 00:14:39,920
vulnerabilities as findings

393
00:14:39,920 --> 00:14:40,720
it's

394
00:14:40,720 --> 00:14:43,040
basically a better dash

395
00:14:43,040 --> 00:14:47,599
because it has knowledge of your code

396
00:14:48,320 --> 00:14:51,760
so it can avoid all the false positives

397
00:14:51,760 --> 00:14:56,959
that adast may result report

398
00:14:57,040 --> 00:14:59,279
and it's going to require an agent

399
00:14:59,279 --> 00:15:00,720
running in your

400
00:15:00,720 --> 00:15:02,320
code

401
00:15:02,320 --> 00:15:04,320
so from an advantages standpoint there's

402
00:15:04,320 --> 00:15:06,000
going to be

403
00:15:06,000 --> 00:15:09,199
higher fidelity in terms of the findings

404
00:15:09,199 --> 00:15:11,120
because you know that the only things

405
00:15:11,120 --> 00:15:12,320
that are going to be

406
00:15:12,320 --> 00:15:15,680
reported are the exploitable paths

407
00:15:15,680 --> 00:15:16,560
now

408
00:15:16,560 --> 00:15:19,040
in contrast with a sas tool static

409
00:15:19,040 --> 00:15:20,560
analysis tool

410
00:15:20,560 --> 00:15:22,320
it's going to look at

411
00:15:22,320 --> 00:15:24,079
every logically

412
00:15:24,079 --> 00:15:26,560
reachable point in your code and so

413
00:15:26,560 --> 00:15:29,199
maybe there may be some dead

414
00:15:29,199 --> 00:15:31,920
code or some other

415
00:15:31,920 --> 00:15:34,320
paths that don't make sense

416
00:15:34,320 --> 00:15:37,920
in your code that may report findings

417
00:15:37,920 --> 00:15:40,800
the other thing that's nice about rasp

418
00:15:40,800 --> 00:15:42,959
is that you can use it

419
00:15:42,959 --> 00:15:46,800
to block attacks at runtime

420
00:15:46,800 --> 00:15:48,639
and typically

421
00:15:48,639 --> 00:15:52,399
when you're trying to onboard iast or

422
00:15:52,399 --> 00:15:54,480
rasp in your application

423
00:15:54,480 --> 00:15:57,199
it is easier

424
00:15:59,440 --> 00:16:02,240
in terms of the disadvantages well you

425
00:16:02,240 --> 00:16:04,720
know code coverage is going to be

426
00:16:04,720 --> 00:16:06,800
based on what you test so if you don't

427
00:16:06,800 --> 00:16:09,839
test it you're not going to find it

428
00:16:09,839 --> 00:16:11,440
it does require an agent which is going

429
00:16:11,440 --> 00:16:15,120
to limit where you deploy to

430
00:16:15,120 --> 00:16:16,959
it doesn't work with languages that

431
00:16:16,959 --> 00:16:20,720
don't have a runtime like cnc plus

432
00:16:20,720 --> 00:16:22,639
and there is a slight to noticeable

433
00:16:22,639 --> 00:16:24,000
performance it

434
00:16:24,000 --> 00:16:26,880
do the overhead of instrumenting the

435
00:16:26,880 --> 00:16:29,120
runtime code

436
00:16:29,120 --> 00:16:31,040
and in some cases

437
00:16:31,040 --> 00:16:33,360
it's going to be worth it to use and in

438
00:16:33,360 --> 00:16:36,240
other cases you may not want to if

439
00:16:36,240 --> 00:16:38,079
you're dealing in a high volume

440
00:16:38,079 --> 00:16:39,759
financial

441
00:16:39,759 --> 00:16:41,279
website

442
00:16:41,279 --> 00:16:42,560
where even

443
00:16:42,560 --> 00:16:44,639
two percent or three percent degradation

444
00:16:44,639 --> 00:16:46,639
and performance is going to be a lot of

445
00:16:46,639 --> 00:16:48,000
money lost

446
00:16:48,000 --> 00:16:49,440
but then maybe this isn't the route to

447
00:16:49,440 --> 00:16:51,759
go but if you're the dod

448
00:16:51,759 --> 00:16:53,440
and you've got budget

449
00:16:53,440 --> 00:16:54,880
and you've got a lot of servers and you

450
00:16:54,880 --> 00:16:56,720
want to protect them all

451
00:16:56,720 --> 00:17:00,079
this may be a good choice

452
00:17:00,320 --> 00:17:02,160
the other thing with

453
00:17:02,160 --> 00:17:05,039
these tools is that the ability to write

454
00:17:05,039 --> 00:17:06,880
custom rules may be

455
00:17:06,880 --> 00:17:09,119
be dependent on the vendor

456
00:17:09,119 --> 00:17:11,599
and the language supported by that

457
00:17:11,599 --> 00:17:13,359
vendor

458
00:17:13,359 --> 00:17:15,119
the other thing is it doesn't work with

459
00:17:15,119 --> 00:17:16,640
the front-end part of mobile

460
00:17:16,640 --> 00:17:18,480
applications

461
00:17:18,480 --> 00:17:19,280
and

462
00:17:19,280 --> 00:17:20,880
it may be difficult to find

463
00:17:20,880 --> 00:17:23,839
vulnerabilities in single page apps

464
00:17:23,839 --> 00:17:25,599
because you would have to write an agent

465
00:17:25,599 --> 00:17:27,679
that would run in your browser

466
00:17:27,679 --> 00:17:31,240
to find those vulnerabilities

467
00:17:34,000 --> 00:17:36,160
so when we look at

468
00:17:36,160 --> 00:17:38,320
manuals coder views

469
00:17:38,320 --> 00:17:40,799
you're going to do that when you're

470
00:17:40,799 --> 00:17:43,679
when none of the tools support your

471
00:17:43,679 --> 00:17:47,440
language or your framework or library

472
00:17:47,440 --> 00:17:49,360
so this would be something like smart

473
00:17:49,360 --> 00:17:51,200
cards or trusted execution environments

474
00:17:51,200 --> 00:17:52,480
however

475
00:17:52,480 --> 00:17:54,880
with even trusted execution environments

476
00:17:54,880 --> 00:17:56,640
for example with static analysis you

477
00:17:56,640 --> 00:17:58,840
could write custom rules

478
00:17:58,840 --> 00:18:01,679
yourself that would take the entry

479
00:18:01,679 --> 00:18:04,160
points like for trustlets you would want

480
00:18:04,160 --> 00:18:07,120
to write a rule for tl main and trust

481
00:18:07,120 --> 00:18:09,039
those uh take those parameters so you

482
00:18:09,039 --> 00:18:11,280
can do data flow analysis

483
00:18:11,280 --> 00:18:12,080
but

484
00:18:12,080 --> 00:18:14,799
that would allow you to support

485
00:18:14,799 --> 00:18:17,760
trustlets or smart cards you know

486
00:18:17,760 --> 00:18:21,039
basically writing custom rules

487
00:18:21,039 --> 00:18:23,280
also when you're looking at complicated

488
00:18:23,280 --> 00:18:25,120
business logic vulnerabilities that are

489
00:18:25,120 --> 00:18:26,320
specific

490
00:18:26,320 --> 00:18:27,440
to your

491
00:18:27,440 --> 00:18:29,600
company's domain

492
00:18:29,600 --> 00:18:31,520
that may be something that

493
00:18:31,520 --> 00:18:33,200
you're going to have to do manually

494
00:18:33,200 --> 00:18:34,880
because of the fact that

495
00:18:34,880 --> 00:18:37,200
the security researchers on those teams

496
00:18:37,200 --> 00:18:39,840
that are writing the rules for the tools

497
00:18:39,840 --> 00:18:42,080
don't have any knowledge about what

498
00:18:42,080 --> 00:18:45,520
specific threats you're facing

499
00:18:45,520 --> 00:18:46,320
and

500
00:18:46,320 --> 00:18:49,039
just going back you know to

501
00:18:49,039 --> 00:18:51,120
making sure the tool

502
00:18:51,120 --> 00:18:53,919
supports your language or framework or

503
00:18:53,919 --> 00:18:55,280
programming environment and if it

504
00:18:55,280 --> 00:18:57,840
doesn't you might have to go to

505
00:18:57,840 --> 00:19:00,160
fuzz testing or manual source code

506
00:19:00,160 --> 00:19:02,480
review

507
00:19:04,240 --> 00:19:05,520
the other thing

508
00:19:05,520 --> 00:19:08,320
that's come out recently is

509
00:19:08,320 --> 00:19:10,640
software composition analysis

510
00:19:10,640 --> 00:19:12,240
and basically this is finding

511
00:19:12,240 --> 00:19:15,039
vulnerabilities in your third-party

512
00:19:15,039 --> 00:19:17,120
libraries

513
00:19:17,120 --> 00:19:19,600
some tools basically look at the jar

514
00:19:19,600 --> 00:19:23,120
files and identify the versions

515
00:19:23,120 --> 00:19:25,760
of or not just the jar files the

516
00:19:25,760 --> 00:19:27,280
requirements.txt

517
00:19:27,280 --> 00:19:29,520
or the cocoapods

518
00:19:29,520 --> 00:19:31,679
whatever it is that has your third-party

519
00:19:31,679 --> 00:19:33,120
libraries that you're using and the

520
00:19:33,120 --> 00:19:35,919
versions and then are going to report if

521
00:19:35,919 --> 00:19:37,679
any of those libraries have cves

522
00:19:37,679 --> 00:19:39,039
associated with them

523
00:19:39,039 --> 00:19:41,360
the problem with these tools

524
00:19:41,360 --> 00:19:43,440
is that they're not going to tell you if

525
00:19:43,440 --> 00:19:45,440
you're actually using

526
00:19:45,440 --> 00:19:48,400
those vulnerable apis within those

527
00:19:48,400 --> 00:19:50,640
third-party libraries so you could get a

528
00:19:50,640 --> 00:19:52,720
lot of false positives

529
00:19:52,720 --> 00:19:53,679
and so

530
00:19:53,679 --> 00:19:55,600
there are some tools

531
00:19:55,600 --> 00:19:57,679
like white well white source is one of

532
00:19:57,679 --> 00:19:58,559
the few

533
00:19:58,559 --> 00:20:00,400
that actually support languages where

534
00:20:00,400 --> 00:20:02,480
they will look in your code

535
00:20:02,480 --> 00:20:04,320
until you if you're making the

536
00:20:04,320 --> 00:20:07,200
appropriate calls to the third party

537
00:20:07,200 --> 00:20:09,360
library's

538
00:20:09,360 --> 00:20:11,440
vulnerable apis

539
00:20:11,440 --> 00:20:14,400
so you want to keep that in mind because

540
00:20:14,400 --> 00:20:18,080
you may get a lot of false positives

541
00:20:18,080 --> 00:20:20,559
and this is looking at a different thing

542
00:20:20,559 --> 00:20:22,159
than

543
00:20:22,159 --> 00:20:23,120
your

544
00:20:23,120 --> 00:20:25,039
you know the what the other tools are

545
00:20:25,039 --> 00:20:26,400
doing this is looking at your

546
00:20:26,400 --> 00:20:28,960
third-party dependencies and some of the

547
00:20:28,960 --> 00:20:31,039
other tools like the dashed

548
00:20:31,039 --> 00:20:34,080
have now features where they can find

549
00:20:34,080 --> 00:20:36,240
certain third-party library vulnerable

550
00:20:36,240 --> 00:20:38,159
third-party library components so you've

551
00:20:38,159 --> 00:20:41,200
got to do your homework

552
00:20:44,240 --> 00:20:46,880
so if we think about an overall process

553
00:20:46,880 --> 00:20:48,559
for selecting

554
00:20:48,559 --> 00:20:50,720
a

555
00:20:51,039 --> 00:20:53,120
tool from all these from the alphabet

556
00:20:53,120 --> 00:20:55,679
soup of scanning tools that you can

557
00:20:55,679 --> 00:20:58,159
choose from

558
00:20:58,159 --> 00:21:00,480
you can always kind of start with asking

559
00:21:00,480 --> 00:21:02,960
yourself this question of

560
00:21:02,960 --> 00:21:05,440
are you working with a niche language

561
00:21:05,440 --> 00:21:07,919
and is it supported by any tool if not

562
00:21:07,919 --> 00:21:10,000
are you going to have to do

563
00:21:10,000 --> 00:21:11,520
manual code review

564
00:21:11,520 --> 00:21:13,919
or you have to write custom rules

565
00:21:13,919 --> 00:21:14,960
and

566
00:21:14,960 --> 00:21:18,559
or use something like fuzz testing

567
00:21:18,880 --> 00:21:20,720
the next question you want to ask is is

568
00:21:20,720 --> 00:21:23,200
your application a mobile app

569
00:21:23,200 --> 00:21:25,200
well if it is you can use static

570
00:21:25,200 --> 00:21:27,200
analysis for the front end

571
00:21:27,200 --> 00:21:29,280
and then for the back end components you

572
00:21:29,280 --> 00:21:32,159
can use pretty much any of the other

573
00:21:32,159 --> 00:21:35,440
tools to scan your code

574
00:21:36,000 --> 00:21:38,480
if it's a web application

575
00:21:38,480 --> 00:21:40,480
web applications are traditionally

576
00:21:40,480 --> 00:21:42,240
pretty well supported

577
00:21:42,240 --> 00:21:45,200
but you still need to know if the tool

578
00:21:45,200 --> 00:21:46,240
supports

579
00:21:46,240 --> 00:21:48,080
your framework

580
00:21:48,080 --> 00:21:49,840
and the language

581
00:21:49,840 --> 00:21:50,720
so

582
00:21:50,720 --> 00:21:53,760
python is kind of notorious for having

583
00:21:53,760 --> 00:21:55,200
poor support

584
00:21:55,200 --> 00:21:57,919
sometimes ruby can fall in that bucket

585
00:21:57,919 --> 00:21:59,600
but there's some open source tools like

586
00:21:59,600 --> 00:22:01,280
brakeman for ruby that are actually

587
00:22:01,280 --> 00:22:02,480
pretty decent

588
00:22:02,480 --> 00:22:04,720
so

589
00:22:04,720 --> 00:22:07,600
know what you're getting into

590
00:22:07,600 --> 00:22:08,559
and then

591
00:22:08,559 --> 00:22:10,559
sometimes there are some applications

592
00:22:10,559 --> 00:22:13,679
that do cross language interactions

593
00:22:13,679 --> 00:22:15,679
and so

594
00:22:15,679 --> 00:22:17,360
you know dast

595
00:22:17,360 --> 00:22:19,600
manual code review or sas with custom

596
00:22:19,600 --> 00:22:21,760
rules may be able to handle that if the

597
00:22:21,760 --> 00:22:24,080
sas engine can handle

598
00:22:24,080 --> 00:22:25,919
attacking flows together across

599
00:22:25,919 --> 00:22:27,840
different languages

600
00:22:27,840 --> 00:22:29,520
if all of your

601
00:22:29,520 --> 00:22:31,520
flows are going across different runtime

602
00:22:31,520 --> 00:22:33,120
languages well then

603
00:22:33,120 --> 00:22:35,360
iast and rasp may be able to work as

604
00:22:35,360 --> 00:22:37,520
well

605
00:22:37,520 --> 00:22:40,159
if you need runtime protection well rasp

606
00:22:40,159 --> 00:22:42,080
is the only show that's going to work

607
00:22:42,080 --> 00:22:42,960
for you

608
00:22:42,960 --> 00:22:44,799
and

609
00:22:44,799 --> 00:22:47,919
you know the other thing to consider is

610
00:22:47,919 --> 00:22:49,200
when you're looking at

611
00:22:49,200 --> 00:22:52,480
you know isd and desk ist is going to be

612
00:22:52,480 --> 00:22:54,640
a little bit better but at the same time

613
00:22:54,640 --> 00:22:56,880
it's probably going to cost more because

614
00:22:56,880 --> 00:22:59,440
of it so you got to look at your

615
00:22:59,440 --> 00:23:01,679
roi when you're trying to choose between

616
00:23:01,679 --> 00:23:02,960
those two

617
00:23:02,960 --> 00:23:05,200
and

618
00:23:05,760 --> 00:23:08,559
you know if it's not an application

619
00:23:08,559 --> 00:23:10,640
web application or supported runtime

620
00:23:10,640 --> 00:23:12,000
well then you've got

621
00:23:12,000 --> 00:23:15,679
sas or manual coding

622
00:23:16,400 --> 00:23:18,960
now once you've selected

623
00:23:18,960 --> 00:23:21,919
which of these tools you want to use the

624
00:23:21,919 --> 00:23:24,000
generalized category

625
00:23:24,000 --> 00:23:26,960
well the next step is to then select

626
00:23:26,960 --> 00:23:29,120
among the vendors

627
00:23:29,120 --> 00:23:31,360
and so when you are looking at different

628
00:23:31,360 --> 00:23:32,559
vendors

629
00:23:32,559 --> 00:23:36,159
you want to to assess them based upon

630
00:23:36,159 --> 00:23:38,799
having high true positives meaning

631
00:23:38,799 --> 00:23:41,440
actually finding real results

632
00:23:41,440 --> 00:23:44,159
having low false positives meaning not

633
00:23:44,159 --> 00:23:45,919
reporting a bunch of things that are

634
00:23:45,919 --> 00:23:48,720
wrong or that aren't really

635
00:23:48,720 --> 00:23:50,480
real vulnerabilities

636
00:23:50,480 --> 00:23:51,760
you also want

637
00:23:51,760 --> 00:23:54,000
low false negatives meaning

638
00:23:54,000 --> 00:23:56,240
you don't want it to miss

639
00:23:56,240 --> 00:23:58,640
a lot of stuff

640
00:23:58,640 --> 00:24:00,720
the other thing as i pointed out to in

641
00:24:00,720 --> 00:24:03,520
the beginning is that you want to have a

642
00:24:03,520 --> 00:24:05,760
tool that the developers

643
00:24:05,760 --> 00:24:07,840
and the qa

644
00:24:07,840 --> 00:24:10,000
engineers are going to

645
00:24:10,000 --> 00:24:11,440
buy into

646
00:24:11,440 --> 00:24:12,720
are going to

647
00:24:12,720 --> 00:24:14,480
feel comfortable using

648
00:24:14,480 --> 00:24:15,919
are going to

649
00:24:15,919 --> 00:24:19,200
trust the results because then they're

650
00:24:19,200 --> 00:24:21,919
going to be more willing to fix

651
00:24:21,919 --> 00:24:23,600
the reported vulnerabilities that are

652
00:24:23,600 --> 00:24:25,760
output by the tool

653
00:24:25,760 --> 00:24:27,279
you're going to also want to look at how

654
00:24:27,279 --> 00:24:29,760
well the vendor integrates with your

655
00:24:29,760 --> 00:24:32,640
pipeline

656
00:24:32,640 --> 00:24:35,919
and because developers you want to get

657
00:24:35,919 --> 00:24:38,000
them involved in being part of the

658
00:24:38,000 --> 00:24:40,080
security solution the whole organization

659
00:24:40,080 --> 00:24:41,600
and the qa people

660
00:24:41,600 --> 00:24:44,720
it's important to look at how well

661
00:24:44,720 --> 00:24:47,600
the vendor explains the vulnerability is

662
00:24:47,600 --> 00:24:48,480
it going to be something that a

663
00:24:48,480 --> 00:24:50,320
developer or qa

664
00:24:50,320 --> 00:24:51,919
engineer is going to be able to read and

665
00:24:51,919 --> 00:24:54,400
understand

666
00:24:55,360 --> 00:24:57,679
also you want it to be able to

667
00:24:57,679 --> 00:25:01,200
integrate with your bug tracking systems

668
00:25:01,200 --> 00:25:04,240
and if it can handle business logic you

669
00:25:04,240 --> 00:25:05,840
will always want to consider that

670
00:25:05,840 --> 00:25:06,799
because

671
00:25:06,799 --> 00:25:08,400
it allows you to

672
00:25:08,400 --> 00:25:09,760
standardize

673
00:25:09,760 --> 00:25:11,039
how you're handling some of your

674
00:25:11,039 --> 00:25:13,440
business logic vulnerabilities

675
00:25:13,440 --> 00:25:14,960
and then finally you want to calculate

676
00:25:14,960 --> 00:25:19,480
your overall return on investment

