1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,800 --> 00:00:11,519
so hello everyone and good day to all of

3
00:00:11,519 --> 00:00:13,360
you hey thank you for joining the

4
00:00:13,360 --> 00:00:15,599
session uh

5
00:00:15,599 --> 00:00:17,680
the whole idea uh

6
00:00:17,680 --> 00:00:20,800
with a with effective usage analysis

7
00:00:20,800 --> 00:00:22,080
is to

8
00:00:22,080 --> 00:00:25,519
perhaps say a claim that it is possible

9
00:00:25,519 --> 00:00:27,359
to accelerate product releases

10
00:00:27,359 --> 00:00:30,000
significantly modern software

11
00:00:30,000 --> 00:00:32,640
applications have thousands or can have

12
00:00:32,640 --> 00:00:34,640
thousands of

13
00:00:34,640 --> 00:00:37,120
dependencies direct dependencies

14
00:00:37,120 --> 00:00:39,840
indirect dependencies between a open

15
00:00:39,840 --> 00:00:43,040
source components and proprietary code

16
00:00:43,040 --> 00:00:45,840
and the software components are

17
00:00:45,840 --> 00:00:48,320
occasionally riddled with

18
00:00:48,320 --> 00:00:50,879
vulnerabilities that can pose a serious

19
00:00:50,879 --> 00:00:55,360
risk to business to end users and to

20
00:00:55,360 --> 00:00:56,640
with the

21
00:00:56,640 --> 00:00:58,879
business clients in general

22
00:00:58,879 --> 00:01:00,800
now uh

23
00:01:00,800 --> 00:01:02,239
our study

24
00:01:02,239 --> 00:01:04,239
that was based on the review of hundreds

25
00:01:04,239 --> 00:01:07,680
of projects a across a multitude of

26
00:01:07,680 --> 00:01:09,520
programming languages

27
00:01:09,520 --> 00:01:12,560
revealed that a large portion and that

28
00:01:12,560 --> 00:01:15,200
is pretty significant a large portion of

29
00:01:15,200 --> 00:01:17,360
the reported vulnerabilities in open

30
00:01:17,360 --> 00:01:19,040
source components

31
00:01:19,040 --> 00:01:21,520
are in fact inaccessible from the

32
00:01:21,520 --> 00:01:24,159
proprietary code of their respective

33
00:01:24,159 --> 00:01:25,439
projects

34
00:01:25,439 --> 00:01:27,040
and a

35
00:01:27,040 --> 00:01:30,079
that is another way of saying that they

36
00:01:30,079 --> 00:01:31,840
are harmless

37
00:01:31,840 --> 00:01:34,400
effectively and they could otherwise be

38
00:01:34,400 --> 00:01:37,640
known as ineffective vulnerabilities now

39
00:01:37,640 --> 00:01:39,920
organizations typically establish the

40
00:01:39,920 --> 00:01:41,680
urgency of handling their

41
00:01:41,680 --> 00:01:47,040
vulnerabilities based on a the uh

42
00:01:47,040 --> 00:01:49,840
based on the reported severity of

43
00:01:49,840 --> 00:01:53,280
the featured a code vulnerabilities

44
00:01:53,280 --> 00:01:56,399
but in light of the number or the claim

45
00:01:56,399 --> 00:01:59,200
number of ineffective vulnerabilities

46
00:01:59,200 --> 00:02:02,880
one can contend that developers and the

47
00:02:02,880 --> 00:02:05,520
appsec personnel are very likely

48
00:02:05,520 --> 00:02:07,439
investing and spending an inordinate

49
00:02:07,439 --> 00:02:10,800
amount of time over vulnerabilities that

50
00:02:10,800 --> 00:02:12,640
probably shouldn't have been prioritized

51
00:02:12,640 --> 00:02:14,160
in the first place

52
00:02:14,160 --> 00:02:16,959
so in this session we will embark on a

53
00:02:16,959 --> 00:02:20,000
journey to where review a an analysis

54
00:02:20,000 --> 00:02:22,080
approach that

55
00:02:22,080 --> 00:02:24,000
facilitates the identification of

56
00:02:24,000 --> 00:02:25,360
effective and ineffective

57
00:02:25,360 --> 00:02:26,800
vulnerabilities

58
00:02:26,800 --> 00:02:27,599
a

59
00:02:27,599 --> 00:02:28,800
and the

60
00:02:28,800 --> 00:02:30,560
and it helps

61
00:02:30,560 --> 00:02:34,800
a accelerate the release of the of these

62
00:02:34,800 --> 00:02:37,440
solutions in a dramatic way

63
00:02:37,440 --> 00:02:38,480
so

64
00:02:38,480 --> 00:02:40,879
our main items for this presentations

65
00:02:40,879 --> 00:02:42,879
are to consider the challenges that

66
00:02:42,879 --> 00:02:44,959
concern security vulnerability handling

67
00:02:44,959 --> 00:02:46,000
in general

68
00:02:46,000 --> 00:02:48,640
then move to something that at present

69
00:02:48,640 --> 00:02:50,400
may look a bit a

70
00:02:50,400 --> 00:02:51,519
amorphous

71
00:02:51,519 --> 00:02:54,959
vulnerabilities versus risks versus

72
00:02:54,959 --> 00:02:57,200
something that is called effectiveness

73
00:02:57,200 --> 00:02:58,800
and then we'll get to the point where we

74
00:02:58,800 --> 00:02:59,840
discuss

75
00:02:59,840 --> 00:03:02,879
what is effective usage analysis or

76
00:03:02,879 --> 00:03:05,519
analysis of effective usage if you will

77
00:03:05,519 --> 00:03:08,319
and focus here on technical facets and

78
00:03:08,319 --> 00:03:11,040
some case study highlights

79
00:03:11,040 --> 00:03:14,480
but let's start with a question here

80
00:03:14,480 --> 00:03:16,640
most would consider the

81
00:03:16,640 --> 00:03:19,440
grand goal of the accelerating product

82
00:03:19,440 --> 00:03:22,640
releases to be something of an

83
00:03:22,640 --> 00:03:24,000
uphill battle

84
00:03:24,000 --> 00:03:27,280
and even though the a person here on the

85
00:03:27,280 --> 00:03:30,400
screen that depicted a

86
00:03:30,400 --> 00:03:33,760
depicted image looks a bit clueless i

87
00:03:33,760 --> 00:03:35,360
think that part of it will actually come

88
00:03:35,360 --> 00:03:37,440
into play as we move on through the

89
00:03:37,440 --> 00:03:39,519
presentation and you'll figure out how

90
00:03:39,519 --> 00:03:42,400
actually a system may provide for me may

91
00:03:42,400 --> 00:03:45,200
be provided with a lot of cues to direct

92
00:03:45,200 --> 00:03:47,440
you in the right direction it starts out

93
00:03:47,440 --> 00:03:49,440
with increasingly tighter application

94
00:03:49,440 --> 00:03:51,360
release schedules which is another way

95
00:03:51,360 --> 00:03:53,280
of saying that there are some

96
00:03:53,280 --> 00:03:56,799
incongruent elements that is such as the

97
00:03:56,799 --> 00:03:59,519
business directives on one hand and the

98
00:03:59,519 --> 00:04:02,319
pragmatic requirements on the other hand

99
00:04:02,319 --> 00:04:03,920
that simply need to find a way to

100
00:04:03,920 --> 00:04:06,000
co-exist and this is not simple

101
00:04:06,000 --> 00:04:08,480
especially when there is a large and

102
00:04:08,480 --> 00:04:10,799
increasingly larger number of security

103
00:04:10,799 --> 00:04:13,120
vulnerabilities reported for open source

104
00:04:13,120 --> 00:04:15,120
component versions used by the

105
00:04:15,120 --> 00:04:16,478
applications

106
00:04:16,478 --> 00:04:17,440
now

107
00:04:17,440 --> 00:04:19,759
agility business and skip and

108
00:04:19,759 --> 00:04:22,479
scalability are unfortunately not

109
00:04:22,479 --> 00:04:25,040
abating they are not being suppressed at

110
00:04:25,040 --> 00:04:27,600
least not quickly enough and so what we

111
00:04:27,600 --> 00:04:29,520
end up seeing is something that might

112
00:04:29,520 --> 00:04:33,440
appear as an unsettling sensation where

113
00:04:33,440 --> 00:04:35,120
our a

114
00:04:35,120 --> 00:04:36,960
our thoughts about how we could actually

115
00:04:36,960 --> 00:04:40,479
address those issues are basically even

116
00:04:40,479 --> 00:04:43,120
increased in their a in their

117
00:04:43,120 --> 00:04:45,520
nervousness

118
00:04:45,520 --> 00:04:47,600
prioritization would appear to be one of

119
00:04:47,600 --> 00:04:50,479
the typical approaches to deal with such

120
00:04:50,479 --> 00:04:52,479
a thing and prioritization is a great

121
00:04:52,479 --> 00:04:55,680
thing in fact right now i believe that

122
00:04:55,680 --> 00:04:57,840
most of the the parties dealing with

123
00:04:57,840 --> 00:04:59,759
vulnerabilities are not even deluding

124
00:04:59,759 --> 00:05:02,160
themselves that it's possible to address

125
00:05:02,160 --> 00:05:04,160
all of the vulnerabilities they're more

126
00:05:04,160 --> 00:05:06,240
likely to say we need to prioritize them

127
00:05:06,240 --> 00:05:08,080
we cannot deal with everything it's just

128
00:05:08,080 --> 00:05:10,240
that this is just a matter of fact so

129
00:05:10,240 --> 00:05:12,240
let's do the best out of it and let's

130
00:05:12,240 --> 00:05:13,600
make the best out of it and

131
00:05:13,600 --> 00:05:15,840
prioritization makes perfect sense

132
00:05:15,840 --> 00:05:17,039
however

133
00:05:17,039 --> 00:05:18,960
prioritization is often not a trivial

134
00:05:18,960 --> 00:05:19,759
thing

135
00:05:19,759 --> 00:05:21,759
and it's not trivial basically because

136
00:05:21,759 --> 00:05:25,360
of three fundamental things one is that

137
00:05:25,360 --> 00:05:27,280
many organizations i'm not going to

138
00:05:27,280 --> 00:05:29,199
claim the exact number even do i

139
00:05:29,199 --> 00:05:31,600
personally have a pretty good idea based

140
00:05:31,600 --> 00:05:33,759
on my experience how low that number

141
00:05:33,759 --> 00:05:34,960
would look like

142
00:05:34,960 --> 00:05:36,800
lack of structured prioritization

143
00:05:36,800 --> 00:05:39,600
approach prioritization is not just the

144
00:05:39,600 --> 00:05:42,000
gotcha it's not just something that yeah

145
00:05:42,000 --> 00:05:43,759
you deal with that and it happens to be

146
00:05:43,759 --> 00:05:45,520
this way or another way

147
00:05:45,520 --> 00:05:47,600
it needs to have a process it needs to

148
00:05:47,600 --> 00:05:50,400
abide by certain things and in many

149
00:05:50,400 --> 00:05:52,240
cases prioritization simply does not

150
00:05:52,240 --> 00:05:54,000
follow them if you look into the way

151
00:05:54,000 --> 00:05:56,160
organizations are carrying it out even

152
00:05:56,160 --> 00:05:58,560
though it might apparently look at first

153
00:05:58,560 --> 00:06:01,280
as being a process why is that in my

154
00:06:01,280 --> 00:06:03,199
opinion when you look at the way a

155
00:06:03,199 --> 00:06:06,400
prioritization is applied in many cases

156
00:06:06,400 --> 00:06:09,440
it does not really care a factor the

157
00:06:09,440 --> 00:06:11,520
appropriate prioritization factors it

158
00:06:11,520 --> 00:06:13,600
may for instance factor how old the

159
00:06:13,600 --> 00:06:15,520
vulnerability is

160
00:06:15,520 --> 00:06:17,280
i would not even bring this up as a

161
00:06:17,280 --> 00:06:18,720
question even though i did so in the

162
00:06:18,720 --> 00:06:20,720
past and i was alarmed to find out how

163
00:06:20,720 --> 00:06:23,039
many organizations can consider that to

164
00:06:23,039 --> 00:06:24,880
be a viable question

165
00:06:24,880 --> 00:06:27,199
more organizations will likely consider

166
00:06:27,199 --> 00:06:29,919
the serious and real question which is

167
00:06:29,919 --> 00:06:32,560
how severe is the problem at hand

168
00:06:32,560 --> 00:06:35,120
a more significant question would be how

169
00:06:35,120 --> 00:06:37,759
does that affect my critical resources

170
00:06:37,759 --> 00:06:40,240
in the organization does it even affect

171
00:06:40,240 --> 00:06:42,560
them so now you get to already

172
00:06:42,560 --> 00:06:44,560
understand where i'm heading at it's not

173
00:06:44,560 --> 00:06:47,360
just about some factoids about the

174
00:06:47,360 --> 00:06:49,840
vulnerability it's about asking how it

175
00:06:49,840 --> 00:06:53,360
comes into play within your environment

176
00:06:53,360 --> 00:06:55,280
and the subjective justification of

177
00:06:55,280 --> 00:06:58,479
prioritization is what i basically refer

178
00:06:58,479 --> 00:07:00,639
to as having multiple parties each

179
00:07:00,639 --> 00:07:03,360
shouting sometimes really shouting why

180
00:07:03,360 --> 00:07:05,120
they think that their preference makes

181
00:07:05,120 --> 00:07:07,759
more sense than the others one must come

182
00:07:07,759 --> 00:07:09,680
up with something that is an objective

183
00:07:09,680 --> 00:07:12,560
way to justify how we can run

184
00:07:12,560 --> 00:07:15,280
very good prioritization

185
00:07:15,280 --> 00:07:16,880
and the question is

186
00:07:16,880 --> 00:07:20,240
is vulnerability equal to a risk

187
00:07:20,240 --> 00:07:22,800
some might say yes why not it's they

188
00:07:22,800 --> 00:07:25,120
stand for similar things right

189
00:07:25,120 --> 00:07:27,039
i would actually contend that this is

190
00:07:27,039 --> 00:07:29,280
not so vulnerability stands for

191
00:07:29,280 --> 00:07:32,000
something that is well at least if you

192
00:07:32,000 --> 00:07:34,960
take my a particular articulation of

193
00:07:34,960 --> 00:07:37,680
that it's a way to define something that

194
00:07:37,680 --> 00:07:39,919
may happen potentially a risk is

195
00:07:39,919 --> 00:07:42,000
something that is more tangible right

196
00:07:42,000 --> 00:07:44,240
this is my my particular approach to

197
00:07:44,240 --> 00:07:47,360
that but bear with me for a moment

198
00:07:47,360 --> 00:07:50,080
let's just assume what if

199
00:07:50,080 --> 00:07:53,280
what if over a certain percentage of the

200
00:07:53,280 --> 00:07:56,080
vulnerabilities reported vulnerabilities

201
00:07:56,080 --> 00:07:58,879
do not end up being

202
00:07:58,879 --> 00:08:01,919
actual risks that need to be remediated

203
00:08:01,919 --> 00:08:03,919
think about that

204
00:08:03,919 --> 00:08:05,840
and whatever the answer is based on

205
00:08:05,840 --> 00:08:08,000
whatever number you decide to place in

206
00:08:08,000 --> 00:08:10,160
those placeholders this will really

207
00:08:10,160 --> 00:08:12,240
accompany us throughout the rest of this

208
00:08:12,240 --> 00:08:13,520
presentation

209
00:08:13,520 --> 00:08:15,120
my argument is

210
00:08:15,120 --> 00:08:17,199
that an application that features an

211
00:08:17,199 --> 00:08:19,120
open source component with reported

212
00:08:19,120 --> 00:08:20,720
vulnerabilities

213
00:08:20,720 --> 00:08:24,879
that in itself does not imply that oss

214
00:08:24,879 --> 00:08:26,560
vulnerable code

215
00:08:26,560 --> 00:08:28,800
is necessarily accessible by the

216
00:08:28,800 --> 00:08:32,320
proprietary code within that project

217
00:08:32,320 --> 00:08:33,919
please let me

218
00:08:33,919 --> 00:08:35,519
reiterate that part because it's

219
00:08:35,519 --> 00:08:37,839
significant we're not saying something

220
00:08:37,839 --> 00:08:40,240
about the vulnerability it is a reported

221
00:08:40,240 --> 00:08:43,360
valid bona fide vulnerability it may

222
00:08:43,360 --> 00:08:45,200
just not be

223
00:08:45,200 --> 00:08:47,440
approached in a manner

224
00:08:47,440 --> 00:08:50,240
that really brings up risk here and the

225
00:08:50,240 --> 00:08:52,160
end result or the byproduct of that

226
00:08:52,160 --> 00:08:54,720
statement is that such code may or may

227
00:08:54,720 --> 00:08:57,680
not pose a real threat and the way it

228
00:08:57,680 --> 00:09:00,800
will do so and our final conclusion will

229
00:09:00,800 --> 00:09:02,720
be based on the way the application's

230
00:09:02,720 --> 00:09:06,560
proprietary code is implemented

231
00:09:06,560 --> 00:09:08,320
i would like to introduce the term

232
00:09:08,320 --> 00:09:10,880
vulnerability effectiveness

233
00:09:10,880 --> 00:09:13,279
and it really stands for saying that

234
00:09:13,279 --> 00:09:15,839
some vulnerabilities are more critical

235
00:09:15,839 --> 00:09:17,360
than others

236
00:09:17,360 --> 00:09:19,440
let's say for a moment that vulnerable

237
00:09:19,440 --> 00:09:21,680
code open source vulnerable code that is

238
00:09:21,680 --> 00:09:23,839
accessible by proprietary code poses a

239
00:09:23,839 --> 00:09:26,560
threat and we will d we will thereby

240
00:09:26,560 --> 00:09:30,000
deem it as effective

241
00:09:30,000 --> 00:09:31,360
whereas

242
00:09:31,360 --> 00:09:32,720
conversely

243
00:09:32,720 --> 00:09:34,399
vulnerable code that would not be

244
00:09:34,399 --> 00:09:38,240
accessible can be deemed ineffective

245
00:09:38,240 --> 00:09:39,760
and the claim is that many reported

246
00:09:39,760 --> 00:09:41,519
vulnerabilities

247
00:09:41,519 --> 00:09:43,680
in a given application and this is the

248
00:09:43,680 --> 00:09:46,080
key part here i would accentuate that

249
00:09:46,080 --> 00:09:48,800
multiple times in a given application

250
00:09:48,800 --> 00:09:51,920
may concern ineffective cases

251
00:09:51,920 --> 00:09:54,080
what does effective usage

252
00:09:54,080 --> 00:09:56,320
really mean the analysis of effective

253
00:09:56,320 --> 00:09:59,519
usage is really about that it's not the

254
00:09:59,519 --> 00:10:02,160
effectiveness of usage analysis it's the

255
00:10:02,160 --> 00:10:04,720
analysis of effective usage how

256
00:10:04,720 --> 00:10:07,200
effective is the way that the

257
00:10:07,200 --> 00:10:10,079
proprietary code reaches code that is

258
00:10:10,079 --> 00:10:12,240
noted reported to be vulnerable and

259
00:10:12,240 --> 00:10:13,920
there are three parts to it

260
00:10:13,920 --> 00:10:16,720
the vulnerability identification and its

261
00:10:16,720 --> 00:10:20,000
placement the way one could reach or

262
00:10:20,000 --> 00:10:22,079
access the vulnerability

263
00:10:22,079 --> 00:10:23,279
and

264
00:10:23,279 --> 00:10:26,279
how effective would be the severity

265
00:10:26,279 --> 00:10:27,839
associated

266
00:10:27,839 --> 00:10:30,640
or the risk with that particular

267
00:10:30,640 --> 00:10:32,480
reported vulnerability

268
00:10:32,480 --> 00:10:34,240
so let's look into the following

269
00:10:34,240 --> 00:10:36,480
depiction and hopefully the portrayal

270
00:10:36,480 --> 00:10:38,720
will not only make perfect sense but

271
00:10:38,720 --> 00:10:40,320
would really carry you through the

272
00:10:40,320 --> 00:10:42,560
process of realizing how this could be

273
00:10:42,560 --> 00:10:45,120
of value already within a given

274
00:10:45,120 --> 00:10:47,360
environment the basic idea here on the

275
00:10:47,360 --> 00:10:50,000
premise is oss components might have

276
00:10:50,000 --> 00:10:52,240
reported vulnerabilities it goes for a

277
00:10:52,240 --> 00:10:54,399
given version and obviously whenever

278
00:10:54,399 --> 00:10:56,880
there is a report of a new vulnerability

279
00:10:56,880 --> 00:10:58,480
there are many chances that you will

280
00:10:58,480 --> 00:11:00,560
have already fixed but running those

281
00:11:00,560 --> 00:11:02,560
fixes immediately might be something

282
00:11:02,560 --> 00:11:04,959
that you may not necessarily elect to do

283
00:11:04,959 --> 00:11:07,040
for a variety of reasons so on the right

284
00:11:07,040 --> 00:11:09,279
hand part you see we have two components

285
00:11:09,279 --> 00:11:11,200
c1 and c2 each with their own

286
00:11:11,200 --> 00:11:13,760
corresponding cve just for the sake of

287
00:11:13,760 --> 00:11:17,600
example cb1 and cve2 those being open

288
00:11:17,600 --> 00:11:19,519
source components with reported

289
00:11:19,519 --> 00:11:21,440
vulnerabilities we have no idea by the

290
00:11:21,440 --> 00:11:23,920
way we're precisely within that code

291
00:11:23,920 --> 00:11:26,800
lies the vulnerability that is probably

292
00:11:26,800 --> 00:11:28,959
at the moment of no significance right

293
00:11:28,959 --> 00:11:29,920
because

294
00:11:29,920 --> 00:11:32,320
we would say it has a vulnerability

295
00:11:32,320 --> 00:11:34,399
that's really what matters right well

296
00:11:34,399 --> 00:11:36,079
the argument is slightly different as

297
00:11:36,079 --> 00:11:39,519
you can as you will see in a moment

298
00:11:39,519 --> 00:11:41,279
vulnerability effectiveness is really

299
00:11:41,279 --> 00:11:44,320
about the way open source code is

300
00:11:44,320 --> 00:11:47,680
accessing a or being accessed by

301
00:11:47,680 --> 00:11:50,880
proprietary code and in fact the real

302
00:11:50,880 --> 00:11:53,519
reason here is that you can actually ask

303
00:11:53,519 --> 00:11:56,160
not only how it is being accessed but

304
00:11:56,160 --> 00:11:58,480
whether it's access in a manner that

305
00:11:58,480 --> 00:12:00,959
could turn the vulnerable code into

306
00:12:00,959 --> 00:12:02,639
something that is exploitable so it's

307
00:12:02,639 --> 00:12:04,240
not just about

308
00:12:04,240 --> 00:12:07,040
accessing it it's about based on the way

309
00:12:07,040 --> 00:12:09,600
you are accessing it does it pose any

310
00:12:09,600 --> 00:12:10,399
risk

311
00:12:10,399 --> 00:12:14,639
and that's why i placed a pronouncing a

312
00:12:14,639 --> 00:12:18,160
kind of a rectangle over the connection

313
00:12:18,160 --> 00:12:20,639
but if you look only at this slide you

314
00:12:20,639 --> 00:12:22,160
would say well if i know what the

315
00:12:22,160 --> 00:12:24,880
dependencies are i would be able to

316
00:12:24,880 --> 00:12:26,160
construe

317
00:12:26,160 --> 00:12:28,720
the understanding what whether or not

318
00:12:28,720 --> 00:12:31,279
the vulnerability being reported is in

319
00:12:31,279 --> 00:12:34,720
my vernacular effective right well

320
00:12:34,720 --> 00:12:36,560
it's a bit more complicated than that

321
00:12:36,560 --> 00:12:39,120
actually but in a good sense because

322
00:12:39,120 --> 00:12:41,200
it's critical to establish the relevant

323
00:12:41,200 --> 00:12:43,120
open source code which is affected by

324
00:12:43,120 --> 00:12:45,120
reported vulnerabilities and as it so

325
00:12:45,120 --> 00:12:47,200
happens when we're talking about

326
00:12:47,200 --> 00:12:49,600
components open source components we're

327
00:12:49,600 --> 00:12:51,440
talking about pretty large bags in

328
00:12:51,440 --> 00:12:54,000
certain cases they might have

329
00:12:54,000 --> 00:12:55,440
a a

330
00:12:55,440 --> 00:12:58,720
in numerous functionalities so only some

331
00:12:58,720 --> 00:13:01,120
of which we may be interested in using

332
00:13:01,120 --> 00:13:03,920
so i just apply the full understanding

333
00:13:03,920 --> 00:13:06,240
of having a vulnerability on top of all

334
00:13:06,240 --> 00:13:07,519
functions

335
00:13:07,519 --> 00:13:09,279
rather than just say we would like to

336
00:13:09,279 --> 00:13:11,839
understand precisely where the issue

337
00:13:11,839 --> 00:13:14,320
arises from now in some cases you will

338
00:13:14,320 --> 00:13:17,040
have information referencing that from

339
00:13:17,040 --> 00:13:19,279
the details provided from a

340
00:13:19,279 --> 00:13:20,959
vulnerability but this is not

341
00:13:20,959 --> 00:13:22,639
necessarily going to the point where you

342
00:13:22,639 --> 00:13:24,720
are able to establish the direct

343
00:13:24,720 --> 00:13:27,600
fingerprint of that vulnerability and

344
00:13:27,600 --> 00:13:30,560
that is not just critical but

345
00:13:30,560 --> 00:13:34,320
but it makes abundantly clear the sense

346
00:13:34,320 --> 00:13:36,639
for running the next phase process which

347
00:13:36,639 --> 00:13:38,880
i will get to in a moment so the first

348
00:13:38,880 --> 00:13:41,360
thing here is about saying within the

349
00:13:41,360 --> 00:13:44,000
components c1 and c2 where exactly is

350
00:13:44,000 --> 00:13:45,600
the vulnerability

351
00:13:45,600 --> 00:13:47,199
and then

352
00:13:47,199 --> 00:13:48,560
at that point

353
00:13:48,560 --> 00:13:50,720
we can run the next step of analysis

354
00:13:50,720 --> 00:13:53,360
that looks very deeply into both the

355
00:13:53,360 --> 00:13:56,079
proprietary code and the open call or

356
00:13:56,079 --> 00:13:58,480
open source code in question and figure

357
00:13:58,480 --> 00:14:01,120
out whether or not those areas that were

358
00:14:01,120 --> 00:14:02,399
highlighted to be

359
00:14:02,399 --> 00:14:04,800
associated with the vulnerability are

360
00:14:04,800 --> 00:14:07,440
being accessed and in what particular

361
00:14:07,440 --> 00:14:10,320
way because a particular access approach

362
00:14:10,320 --> 00:14:12,240
might not necessarily indicate that

363
00:14:12,240 --> 00:14:14,720
there is still a risk as you know there

364
00:14:14,720 --> 00:14:17,360
are many approaches where the

365
00:14:17,360 --> 00:14:19,920
implementation of a given function here

366
00:14:19,920 --> 00:14:22,720
in this case depicted by f12 and so

367
00:14:22,720 --> 00:14:25,360
forth could be a could run

368
00:14:25,360 --> 00:14:27,680
so just for simplicity you see here f1

369
00:14:27,680 --> 00:14:30,800
to f4 and each of them is marked as if

370
00:14:30,800 --> 00:14:33,199
this is a full chunk either vulnerable

371
00:14:33,199 --> 00:14:35,360
or not and the purpose being that here

372
00:14:35,360 --> 00:14:37,199
we would like to make a very conscious

373
00:14:37,199 --> 00:14:39,760
decision that if it doesn't touch upon

374
00:14:39,760 --> 00:14:42,560
f2 it means that f2 is okay the same

375
00:14:42,560 --> 00:14:45,600
goes for f3 but you can take that

376
00:14:45,600 --> 00:14:49,040
example and even dissect it into smaller

377
00:14:49,040 --> 00:14:51,519
granular pieces and then say that within

378
00:14:51,519 --> 00:14:52,959
the function you would actually like to

379
00:14:52,959 --> 00:14:55,600
see if there are certain areas that a

380
00:14:55,600 --> 00:14:57,920
warrant a more detailed inspection so

381
00:14:57,920 --> 00:15:00,160
you get the idea here hopefully and as

382
00:15:00,160 --> 00:15:02,480
you can tell the significant part here

383
00:15:02,480 --> 00:15:04,800
is number one running a vulnerability

384
00:15:04,800 --> 00:15:07,279
analysis process and number two figuring

385
00:15:07,279 --> 00:15:10,839
out how that vulnerable code is being

386
00:15:10,839 --> 00:15:12,399
used

387
00:15:12,399 --> 00:15:14,480
and the ultimate result here and our

388
00:15:14,480 --> 00:15:17,519
conclusion is that one of those cases

389
00:15:17,519 --> 00:15:19,760
the one that is with c1 is deemed

390
00:15:19,760 --> 00:15:22,959
effective because here the code from the

391
00:15:22,959 --> 00:15:25,279
application proprietary the application

392
00:15:25,279 --> 00:15:28,880
proprietary code it reaches it accesses

393
00:15:28,880 --> 00:15:31,360
f1 which is a reported which has a

394
00:15:31,360 --> 00:15:32,880
reported vulnerability and for the sake

395
00:15:32,880 --> 00:15:35,519
of this example this is the granularity

396
00:15:35,519 --> 00:15:38,079
however when we look at the bottom host

397
00:15:38,079 --> 00:15:41,040
a call made from the same application we

398
00:15:41,040 --> 00:15:44,000
can see that even though c2 is in

399
00:15:44,000 --> 00:15:46,079
general with a vulnerability

400
00:15:46,079 --> 00:15:49,199
the call does not go to that area that

401
00:15:49,199 --> 00:15:52,560
was a considered a vulnerability and

402
00:15:52,560 --> 00:15:55,360
therefore it is deemed ineffective

403
00:15:55,360 --> 00:15:57,519
so that was a nice way to look into it

404
00:15:57,519 --> 00:15:59,199
but as you can imagine there is much

405
00:15:59,199 --> 00:16:01,199
more detail much more technical things

406
00:16:01,199 --> 00:16:03,759
that are both interesting but are both

407
00:16:03,759 --> 00:16:05,839
also important to understand what is the

408
00:16:05,839 --> 00:16:08,480
realm and purview of the issue and how

409
00:16:08,480 --> 00:16:11,759
it could actually come into play so

410
00:16:11,759 --> 00:16:13,759
corresponding to the topics that were

411
00:16:13,759 --> 00:16:15,839
mentioned earlier we have vulnerability

412
00:16:15,839 --> 00:16:18,800
analysis code analysis and risk analysis

413
00:16:18,800 --> 00:16:21,759
all of which together collectively

414
00:16:21,759 --> 00:16:26,160
serve to be under the basis of a concept

415
00:16:26,160 --> 00:16:28,560
called effective usage analysis

416
00:16:28,560 --> 00:16:31,440
so vulnerability analysis is about pen

417
00:16:31,440 --> 00:16:34,480
pal pinpointing the location of the

418
00:16:34,480 --> 00:16:36,959
actual code within open source which has

419
00:16:36,959 --> 00:16:38,000
a problem

420
00:16:38,000 --> 00:16:40,480
and once that is done it is expected to

421
00:16:40,480 --> 00:16:43,680
be captured recorded within some form of

422
00:16:43,680 --> 00:16:45,920
a data store and along with the

423
00:16:45,920 --> 00:16:47,839
fingerprints that would allow the next

424
00:16:47,839 --> 00:16:50,800
phase bear with me to find out whether

425
00:16:50,800 --> 00:16:53,600
or not the code from the application

426
00:16:53,600 --> 00:16:56,880
actually leverages or uses avails

427
00:16:56,880 --> 00:16:59,600
themselves of that code in a manner that

428
00:16:59,600 --> 00:17:01,519
would be alarming

429
00:17:01,519 --> 00:17:03,519
when we move to code analysis we will

430
00:17:03,519 --> 00:17:04,640
see

431
00:17:04,640 --> 00:17:07,199
actually three facets these are

432
00:17:07,199 --> 00:17:09,039
essentially the three facets of code

433
00:17:09,039 --> 00:17:11,520
analysis that to be honest are not

434
00:17:11,520 --> 00:17:13,520
necessarily just associated with this

435
00:17:13,520 --> 00:17:16,079
particular code analysis thing but they

436
00:17:16,079 --> 00:17:18,799
are very important in the context of

437
00:17:18,799 --> 00:17:22,400
effective usage one is coverage

438
00:17:22,400 --> 00:17:24,240
we will deal with that in a moment

439
00:17:24,240 --> 00:17:26,160
special language facets these are

440
00:17:26,160 --> 00:17:28,559
different things one would be the analog

441
00:17:28,559 --> 00:17:31,039
analysis approach and how wide the

442
00:17:31,039 --> 00:17:33,120
coverage would be another thing is are

443
00:17:33,120 --> 00:17:35,200
we covering multiple language it's not a

444
00:17:35,200 --> 00:17:37,679
product question by the way

445
00:17:37,679 --> 00:17:40,160
some may think language is well we can

446
00:17:40,160 --> 00:17:41,679
have it for one language for two

447
00:17:41,679 --> 00:17:44,160
language ah that's not the idea here the

448
00:17:44,160 --> 00:17:47,120
idea is as you perfectly well know many

449
00:17:47,120 --> 00:17:48,880
applications today

450
00:17:48,880 --> 00:17:51,039
are they are basically comprised of

451
00:17:51,039 --> 00:17:53,679
multiple languages so and different

452
00:17:53,679 --> 00:17:56,080
constituent parts of the application may

453
00:17:56,080 --> 00:17:58,400
be captured in different codes code

454
00:17:58,400 --> 00:18:01,840
bases so being able conceptually to run

455
00:18:01,840 --> 00:18:03,760
a process that would be able to analyze

456
00:18:03,760 --> 00:18:06,400
multiple languages is of significance it

457
00:18:06,400 --> 00:18:08,799
could be and it's it happens to be part

458
00:18:08,799 --> 00:18:10,960
of what the overall concept is really

459
00:18:10,960 --> 00:18:14,480
all about maximizing analyze analysis

460
00:18:14,480 --> 00:18:16,799
accuracy is significant here and the

461
00:18:16,799 --> 00:18:18,559
terms that are being used here are

462
00:18:18,559 --> 00:18:20,559
should not be unfamiliar we're talking

463
00:18:20,559 --> 00:18:22,799
about false positives versus false

464
00:18:22,799 --> 00:18:25,039
negatives and as

465
00:18:25,039 --> 00:18:27,440
probably most if not all of you know

466
00:18:27,440 --> 00:18:28,880
it's a

467
00:18:28,880 --> 00:18:32,000
the idea is not to attempt to realize

468
00:18:32,000 --> 00:18:34,640
both maximize false positives and

469
00:18:34,640 --> 00:18:38,000
maximize and and and of course optimal a

470
00:18:38,000 --> 00:18:40,320
false positives and a false negatives

471
00:18:40,320 --> 00:18:42,480
which is the optimal way is zero this is

472
00:18:42,480 --> 00:18:44,720
unattainable but one must reach some

473
00:18:44,720 --> 00:18:47,120
concessions and the concessions would be

474
00:18:47,120 --> 00:18:50,080
to maximize the value by deciding

475
00:18:50,080 --> 00:18:51,760
whether or not you want to opt for

476
00:18:51,760 --> 00:18:55,360
coverage accuracy and to run it at a way

477
00:18:55,360 --> 00:18:57,200
where the balancing would provide you

478
00:18:57,200 --> 00:19:00,000
with as much possible value that you can

479
00:19:00,000 --> 00:19:02,400
hope for and the detection granularity

480
00:19:02,400 --> 00:19:04,480
is the pinpointing of the relevant lines

481
00:19:04,480 --> 00:19:06,480
of the vulnerable code and the one

482
00:19:06,480 --> 00:19:09,120
within the application

483
00:19:09,120 --> 00:19:11,760
i actually jumped let me go back for it

484
00:19:11,760 --> 00:19:13,919
is just for a moment scale

485
00:19:13,919 --> 00:19:16,080
any of what was mentioned here would be

486
00:19:16,080 --> 00:19:18,720
simply irrelevant if it would end up

487
00:19:18,720 --> 00:19:21,120
calling for an analysis process that

488
00:19:21,120 --> 00:19:22,960
would take multiple days or in some

489
00:19:22,960 --> 00:19:25,679
cases even a number of hours being able

490
00:19:25,679 --> 00:19:28,240
to accommodate large code bases within

491
00:19:28,240 --> 00:19:30,320
the time developers are expecting to

492
00:19:30,320 --> 00:19:31,520
move to them

493
00:19:31,520 --> 00:19:34,400
to their next phase is absolutely one of

494
00:19:34,400 --> 00:19:36,720
the givens of considerations for code

495
00:19:36,720 --> 00:19:39,200
analysis so now let's get get to some

496
00:19:39,200 --> 00:19:41,600
more technical stuff the application

497
00:19:41,600 --> 00:19:43,840
proprietary code and the open source

498
00:19:43,840 --> 00:19:46,480
part are depicted here in a manner that

499
00:19:46,480 --> 00:19:48,720
actually does not do justice to open

500
00:19:48,720 --> 00:19:51,440
source because open source in fact is in

501
00:19:51,440 --> 00:19:54,240
many cases much larger in its purview

502
00:19:54,240 --> 00:19:56,720
some claiming to be a 80

503
00:19:56,720 --> 00:19:59,200
in many cases even more than that but

504
00:19:59,200 --> 00:20:01,440
let's do with the example over here the

505
00:20:01,440 --> 00:20:03,679
idea underlying this example is as you

506
00:20:03,679 --> 00:20:05,679
can see in contrast with a very

507
00:20:05,679 --> 00:20:08,320
simplistic one presented earlier here we

508
00:20:08,320 --> 00:20:11,440
have multiple levels of dependencies and

509
00:20:11,440 --> 00:20:13,280
the key idea here with regard to

510
00:20:13,280 --> 00:20:17,039
coverage is how well does the analysis

511
00:20:17,039 --> 00:20:21,440
encompass open source so one way is to

512
00:20:21,440 --> 00:20:23,679
say that we are actually looking only at

513
00:20:23,679 --> 00:20:25,679
the direct dependencies

514
00:20:25,679 --> 00:20:27,120
some would also claim that this is

515
00:20:27,120 --> 00:20:30,400
myopic because there are obviously many

516
00:20:30,400 --> 00:20:32,640
issues potentially lurking within those

517
00:20:32,640 --> 00:20:35,360
elements that may not be reviewed as

518
00:20:35,360 --> 00:20:37,679
part of this particular approach which

519
00:20:37,679 --> 00:20:41,360
is why it is most commonly adverse a

520
00:20:41,360 --> 00:20:44,480
recommended to look at a larger coverage

521
00:20:44,480 --> 00:20:46,320
where you can actually encompass the

522
00:20:46,320 --> 00:20:48,320
full complement of open source

523
00:20:48,320 --> 00:20:51,760
components but which in turns warrants

524
00:20:51,760 --> 00:20:54,880
inclusion of several analysis approaches

525
00:20:54,880 --> 00:20:57,600
such as inter-procedural analysis

526
00:20:57,600 --> 00:20:59,760
along with the intra-procedural analysis

527
00:20:59,760 --> 00:21:01,360
that doesn't really that goes without

528
00:21:01,360 --> 00:21:03,679
saying but there are other aspects here

529
00:21:03,679 --> 00:21:05,440
here of importance

530
00:21:05,440 --> 00:21:08,159
languages also have their baggage of

531
00:21:08,159 --> 00:21:11,760
issues or perhaps say considerations and

532
00:21:11,760 --> 00:21:14,559
and the challenges one is that one

533
00:21:14,559 --> 00:21:17,039
language is not the same as another

534
00:21:17,039 --> 00:21:18,960
language they have very different ways

535
00:21:18,960 --> 00:21:21,280
aside from attempting to

536
00:21:21,280 --> 00:21:23,039
translate whatever ideas you have in

537
00:21:23,039 --> 00:21:24,480
your head into something that could be

538
00:21:24,480 --> 00:21:26,799
carried out programmatically the way

539
00:21:26,799 --> 00:21:29,120
those things are put into a

540
00:21:29,120 --> 00:21:31,280
put into place are very different and

541
00:21:31,280 --> 00:21:33,200
the amenities that are featured within

542
00:21:33,200 --> 00:21:36,159
each language are extremely varied so

543
00:21:36,159 --> 00:21:38,480
for instance reflection would be one

544
00:21:38,480 --> 00:21:40,640
case where if analysis would not

545
00:21:40,640 --> 00:21:43,360
consider it it would probably

546
00:21:43,360 --> 00:21:46,480
totally change the way that the results

547
00:21:46,480 --> 00:21:48,880
should be assessed by the end users and

548
00:21:48,880 --> 00:21:51,120
obviously they would also potentially

549
00:21:51,120 --> 00:21:53,360
make them incorrect the same goes for

550
00:21:53,360 --> 00:21:55,840
frameworks the framework concept changes

551
00:21:55,840 --> 00:21:58,480
the whole workflow of the application so

552
00:21:58,480 --> 00:22:00,559
we're no longer looking at calls made

553
00:22:00,559 --> 00:22:02,880
directly necessarily from the

554
00:22:02,880 --> 00:22:05,440
application code to the components but

555
00:22:05,440 --> 00:22:07,760
because we have frameworks frameworks

556
00:22:07,760 --> 00:22:09,840
change the process change the workflow

557
00:22:09,840 --> 00:22:12,480
and those things need to be featured and

558
00:22:12,480 --> 00:22:14,960
factored as part of the analysis process

559
00:22:14,960 --> 00:22:17,039
it's extremely important to keep in mind

560
00:22:17,039 --> 00:22:19,840
that whenever we want to apply the key

561
00:22:19,840 --> 00:22:22,480
areas of analysis one needs to fathom

562
00:22:22,480 --> 00:22:24,480
those areas as well

563
00:22:24,480 --> 00:22:26,559
now the question would be how well does

564
00:22:26,559 --> 00:22:28,240
analysis detect vulnerabilities and

565
00:22:28,240 --> 00:22:30,159
avoids erroneous findings and this is

566
00:22:30,159 --> 00:22:32,320
the accuracy thing here we go back to

567
00:22:32,320 --> 00:22:34,080
the point where we mentioned earlier

568
00:22:34,080 --> 00:22:36,000
that the meticulous painstaking

569
00:22:36,000 --> 00:22:38,240
investigation that was run earlier and

570
00:22:38,240 --> 00:22:40,640
places the information of the findings

571
00:22:40,640 --> 00:22:42,559
within some kind of data store is now

572
00:22:42,559 --> 00:22:45,120
inspected it is extracted by the

573
00:22:45,120 --> 00:22:48,159
analysis process at least in theory with

574
00:22:48,159 --> 00:22:51,200
the idea of being able to tell following

575
00:22:51,200 --> 00:22:53,600
the analysis of the code base

576
00:22:53,600 --> 00:22:56,320
whether or not you're actually not only

577
00:22:56,320 --> 00:22:59,840
accessing the point of the vulnerability

578
00:22:59,840 --> 00:23:02,240
but how exactly are you doing so to

579
00:23:02,240 --> 00:23:04,400
figure out whether or not that should be

580
00:23:04,400 --> 00:23:06,320
a source of a

581
00:23:06,320 --> 00:23:08,559
of a concern or not

582
00:23:08,559 --> 00:23:11,200
and some of the terms here are probably

583
00:23:11,200 --> 00:23:15,520
a straightforward and self-evident

584
00:23:15,520 --> 00:23:17,600
this really goes to the detection of

585
00:23:17,600 --> 00:23:20,880
vulnerable code and also a making a

586
00:23:20,880 --> 00:23:23,039
distinction whether or not it is

587
00:23:23,039 --> 00:23:25,600
effective or ineffective but what i

588
00:23:25,600 --> 00:23:28,000
would like to highlight here is actually

589
00:23:28,000 --> 00:23:30,159
what is even more important

590
00:23:30,159 --> 00:23:32,720
not just showing what is effective

591
00:23:32,720 --> 00:23:34,960
because that would be something very

592
00:23:34,960 --> 00:23:36,640
very important by the way don't get me

593
00:23:36,640 --> 00:23:39,679
wrong here being aware of the elements

594
00:23:39,679 --> 00:23:42,240
that are truly effective is a

595
00:23:42,240 --> 00:23:45,279
significant is a significant achievement

596
00:23:45,279 --> 00:23:48,720
but so can be said even more so about

597
00:23:48,720 --> 00:23:52,000
those elements which are not and can be

598
00:23:52,000 --> 00:23:55,039
proven not to be effective which are the

599
00:23:55,039 --> 00:23:57,760
ineffective items here so by being able

600
00:23:57,760 --> 00:23:59,360
to subject the

601
00:23:59,360 --> 00:24:01,360
code of the open source and the

602
00:24:01,360 --> 00:24:03,840
proprietary code to analysis that would

603
00:24:03,840 --> 00:24:05,200
guarantee

604
00:24:05,200 --> 00:24:08,400
guarantee 100 percent that whatever is

605
00:24:08,400 --> 00:24:10,960
marked as ineffective is indeed so

606
00:24:10,960 --> 00:24:14,159
that will allow you to put it aside

607
00:24:14,159 --> 00:24:16,880
and to lower dramatically

608
00:24:16,880 --> 00:24:18,559
the number of items that you need to

609
00:24:18,559 --> 00:24:20,880
deal with this is where we get to the

610
00:24:20,880 --> 00:24:23,760
area of prioritization which by the way

611
00:24:23,760 --> 00:24:24,640
at this point is still not

612
00:24:24,640 --> 00:24:27,440
prioritization it's about moving aside

613
00:24:27,440 --> 00:24:29,520
those items even before you start with

614
00:24:29,520 --> 00:24:30,960
prioritization because you don't want to

615
00:24:30,960 --> 00:24:34,240
deal with them so you reduce your over

616
00:24:34,240 --> 00:24:36,159
the the overall work

617
00:24:36,159 --> 00:24:38,960
pretty significantly however those

618
00:24:38,960 --> 00:24:41,279
elements that are retained following

619
00:24:41,279 --> 00:24:42,400
this step

620
00:24:42,400 --> 00:24:44,240
are those elements that are associated

621
00:24:44,240 --> 00:24:46,559
with the third part of usage analysis

622
00:24:46,559 --> 00:24:49,600
which is the risk analysis thing and

623
00:24:49,600 --> 00:24:51,919
here you can take whatever

624
00:24:51,919 --> 00:24:54,400
elements that would be considered

625
00:24:54,400 --> 00:24:56,720
theoretically in a solution such as

626
00:24:56,720 --> 00:24:59,279
business impact reported severity

627
00:24:59,279 --> 00:25:01,679
whatever else options you have in mind

628
00:25:01,679 --> 00:25:03,760
and then apply them to those elements

629
00:25:03,760 --> 00:25:07,279
that were fine to realize what is truly

630
00:25:07,279 --> 00:25:10,159
truly and utterly

631
00:25:10,159 --> 00:25:12,559
the severity which is effective

632
00:25:12,559 --> 00:25:14,880
and this is really what the whole idea

633
00:25:14,880 --> 00:25:17,120
behind this is all about

634
00:25:17,120 --> 00:25:19,600
now it would only be sensible at this

635
00:25:19,600 --> 00:25:22,640
point following especially the earlier

636
00:25:22,640 --> 00:25:26,000
slide that asked the question what if

637
00:25:26,000 --> 00:25:28,640
so we ran a process where hundreds of

638
00:25:28,640 --> 00:25:31,039
real work world projects were put to

639
00:25:31,039 --> 00:25:31,919
test

640
00:25:31,919 --> 00:25:34,320
and i think that you will find the

641
00:25:34,320 --> 00:25:37,760
information and lightning

642
00:25:38,159 --> 00:25:40,400
so the number of or perhaps more

643
00:25:40,400 --> 00:25:42,000
importantly you can look at the number

644
00:25:42,000 --> 00:25:44,159
below i think it speaks for itself but a

645
00:25:44,159 --> 00:25:46,240
significant amount of reported

646
00:25:46,240 --> 00:25:49,120
vulnerabilities in this case for java

647
00:25:49,120 --> 00:25:50,159
but

648
00:25:50,159 --> 00:25:52,080
it is interesting to

649
00:25:52,080 --> 00:25:54,640
review the results for other languages

650
00:25:54,640 --> 00:25:58,400
as well a were analyzed and found to be

651
00:25:58,400 --> 00:26:01,039
ineffective now try to apply this number

652
00:26:01,039 --> 00:26:03,200
and you know what be even forgiving with

653
00:26:03,200 --> 00:26:04,960
regard to that number even though i can

654
00:26:04,960 --> 00:26:07,360
tell you that theoretically the number

655
00:26:07,360 --> 00:26:09,600
could be even higher than that but let's

656
00:26:09,600 --> 00:26:11,679
even say for the sake of example that

657
00:26:11,679 --> 00:26:14,799
you would even reduce it by half

658
00:26:14,799 --> 00:26:17,600
who would not consider a way to just

659
00:26:17,600 --> 00:26:20,480
ditch some of the elements that are

660
00:26:20,480 --> 00:26:22,000
currently

661
00:26:22,000 --> 00:26:24,720
a garnering the focus of developers and

662
00:26:24,720 --> 00:26:27,440
may not necessarily require attention

663
00:26:27,440 --> 00:26:30,000
from a remediation perspective this is

664
00:26:30,000 --> 00:26:33,120
really what this idea is all about and

665
00:26:33,120 --> 00:26:35,440
this is the potential and the concept of

666
00:26:35,440 --> 00:26:37,360
effective usage and the analysis of

667
00:26:37,360 --> 00:26:39,120
effective usage

668
00:26:39,120 --> 00:26:41,760
the business angle of this can be a

669
00:26:41,760 --> 00:26:44,000
proved to be extremely valuable and you

670
00:26:44,000 --> 00:26:46,320
can see here just but two points that

671
00:26:46,320 --> 00:26:48,640
give you some food of thought maximized

672
00:26:48,640 --> 00:26:50,799
absentee productivity you have more time

673
00:26:50,799 --> 00:26:52,960
you have more time to dedicate the

674
00:26:52,960 --> 00:26:54,799
effort on areas that concern

675
00:26:54,799 --> 00:26:57,919
productivity another thing is maximize

676
00:26:57,919 --> 00:27:00,640
time for handling forgive me for saying

677
00:27:00,640 --> 00:27:02,799
the real vulnerabilities of course all

678
00:27:02,799 --> 00:27:04,400
of the vulnerabilities including

679
00:27:04,400 --> 00:27:07,279
ineffective are real vulnerabilities let

680
00:27:07,279 --> 00:27:09,520
me just stress that should there be a

681
00:27:09,520 --> 00:27:12,320
single change in a line of code it may

682
00:27:12,320 --> 00:27:14,000
or might depending on the way you look

683
00:27:14,000 --> 00:27:14,880
at it

684
00:27:14,880 --> 00:27:17,760
render what was earl the early result

685
00:27:17,760 --> 00:27:20,399
from the analysis no longer applicable

686
00:27:20,399 --> 00:27:22,399
because at that point that change could

687
00:27:22,399 --> 00:27:24,799
render what was previously an

688
00:27:24,799 --> 00:27:26,720
ineffective vulnerability to turn it

689
00:27:26,720 --> 00:27:28,559
into an effective vulnerability but

690
00:27:28,559 --> 00:27:30,799
that's the power as well that's why i

691
00:27:30,799 --> 00:27:33,440
emphasized so many times the notion of

692
00:27:33,440 --> 00:27:35,600
within the application within the

693
00:27:35,600 --> 00:27:38,399
context of the application and why the

694
00:27:38,399 --> 00:27:42,479
effectiveness is so significant here

695
00:27:42,799 --> 00:27:44,880
again i would be amiss if not mentioning

696
00:27:44,880 --> 00:27:47,039
the facilitated remediation one could

697
00:27:47,039 --> 00:27:50,000
say isn't this enough well no not so if

698
00:27:50,000 --> 00:27:51,440
you need to go from this point to

699
00:27:51,440 --> 00:27:54,159
remediation what's more than just asking

700
00:27:54,159 --> 00:27:55,840
i would like to know exactly what i need

701
00:27:55,840 --> 00:27:58,000
to deal with so one of the byproducts

702
00:27:58,000 --> 00:28:00,480
one of the derivative benefits of a

703
00:28:00,480 --> 00:28:03,200
technology that promises such things is

704
00:28:03,200 --> 00:28:06,159
the ability to pinpoint exactly where is

705
00:28:06,159 --> 00:28:08,720
the culprit in the code so

706
00:28:08,720 --> 00:28:11,039
not only is it possible to identify a

707
00:28:11,039 --> 00:28:12,559
vulnerability as being effective or

708
00:28:12,559 --> 00:28:14,080
ineffective but the information that

709
00:28:14,080 --> 00:28:16,399
could be provided to developers is

710
00:28:16,399 --> 00:28:19,520
here is where you need to look at here

711
00:28:19,520 --> 00:28:21,840
is where the call is made here is the

712
00:28:21,840 --> 00:28:25,120
trace that leads to the issue of problem

713
00:28:25,120 --> 00:28:27,279
so this is information of significant

714
00:28:27,279 --> 00:28:28,960
value

715
00:28:28,960 --> 00:28:32,799
so to summarize the

716
00:28:33,279 --> 00:28:34,720
probably

717
00:28:34,720 --> 00:28:36,880
quite a few topics that we covered as

718
00:28:36,880 --> 00:28:38,799
part of this session

719
00:28:38,799 --> 00:28:40,960
the analysis of effective usage truly

720
00:28:40,960 --> 00:28:42,799
facilitates its belief to truly

721
00:28:42,799 --> 00:28:44,799
facilitate the classification of

722
00:28:44,799 --> 00:28:47,279
critical threats but importantly

723
00:28:47,279 --> 00:28:49,120
it manages to improve also

724
00:28:49,120 --> 00:28:52,000
prioritization the effective usage

725
00:28:52,000 --> 00:28:54,960
analysis itself is not

726
00:28:54,960 --> 00:28:58,159
a prioritization per se but some would

727
00:28:58,159 --> 00:29:00,159
argue that the concept is even better

728
00:29:00,159 --> 00:29:02,480
because it moves aside things that are

729
00:29:02,480 --> 00:29:04,320
not germane to the process of

730
00:29:04,320 --> 00:29:06,640
remediation however it does leave

731
00:29:06,640 --> 00:29:08,799
elements that when factoring the third

732
00:29:08,799 --> 00:29:10,799
part of effective usage which is the

733
00:29:10,799 --> 00:29:13,440
risk analysis do end up providing with

734
00:29:13,440 --> 00:29:17,840
the means for effective risk based

735
00:29:17,840 --> 00:29:20,480
remediation and of course prioritization

736
00:29:20,480 --> 00:29:23,360
analysis of effective usage can also

737
00:29:23,360 --> 00:29:26,640
go a very long way towards eliminating

738
00:29:26,640 --> 00:29:28,720
efficiencies and those efficiencies

739
00:29:28,720 --> 00:29:31,200
concern ineffective vulnerabilities and

740
00:29:31,200 --> 00:29:34,000
finally analysis of effective usage can

741
00:29:34,000 --> 00:29:36,559
help organizations realize better

742
00:29:36,559 --> 00:29:39,760
scheduling goals by a better utilization

743
00:29:39,760 --> 00:29:41,520
of resources

744
00:29:41,520 --> 00:29:45,080
thank you very much

