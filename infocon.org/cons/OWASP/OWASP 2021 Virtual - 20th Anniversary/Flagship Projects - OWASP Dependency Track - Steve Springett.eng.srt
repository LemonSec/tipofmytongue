1
00:00:03,280 --> 00:00:05,600
and today we are going to be talking

2
00:00:05,600 --> 00:00:09,200
about allah's dependency track

3
00:00:09,200 --> 00:00:12,000
so uh again real quick about me and then

4
00:00:12,000 --> 00:00:14,559
we'll get to the the actual meet of the

5
00:00:14,559 --> 00:00:16,640
of the conversation but uh

6
00:00:16,640 --> 00:00:18,480
i'm the creator and the current lead of

7
00:00:18,480 --> 00:00:21,600
the dependency track project um i'm also

8
00:00:21,600 --> 00:00:24,320
the the co-lead as well as the chair of

9
00:00:24,320 --> 00:00:27,760
the cyclone dx core working group

10
00:00:27,760 --> 00:00:30,480
co-leader and co-author of the owasp

11
00:00:30,480 --> 00:00:32,479
scvs project

12
00:00:32,479 --> 00:00:34,559
and i do just a tremendous amount of

13
00:00:34,559 --> 00:00:36,559
work i guess in the software

14
00:00:36,559 --> 00:00:39,760
transparency space and in supply chain

15
00:00:39,760 --> 00:00:42,399
space but what i actually get paid to do

16
00:00:42,399 --> 00:00:44,800
is software security architecture

17
00:00:44,800 --> 00:00:48,960
at a leadership level at servicenow

18
00:00:48,960 --> 00:00:51,280
so um

19
00:00:51,280 --> 00:00:53,360
real quick background i guess um

20
00:00:53,360 --> 00:00:55,680
dependency track is a flagship oas

21
00:00:55,680 --> 00:00:58,960
project it was started in 2013.

22
00:00:58,960 --> 00:01:01,280
uh it is highly mature there's a really

23
00:01:01,280 --> 00:01:04,239
big community of of adopters that that

24
00:01:04,239 --> 00:01:05,360
use it

25
00:01:05,360 --> 00:01:07,920
if you name a commercial vendor or

26
00:01:07,920 --> 00:01:09,439
organization

27
00:01:09,439 --> 00:01:11,280
they're probably on the list of people

28
00:01:11,280 --> 00:01:13,840
who have either tried it or or are using

29
00:01:13,840 --> 00:01:15,840
it today as of now i think we've got

30
00:01:15,840 --> 00:01:17,840
about four million docker pulls uh to

31
00:01:17,840 --> 00:01:20,720
date so it's it's fairly strong

32
00:01:20,720 --> 00:01:24,240
and uh it's apache 2.0 licensed

33
00:01:24,240 --> 00:01:25,680
um

34
00:01:25,680 --> 00:01:28,400
so dependency track is really

35
00:01:28,400 --> 00:01:30,799
uh centered around this concept of

36
00:01:30,799 --> 00:01:33,920
software bill of materials and uh me and

37
00:01:33,920 --> 00:01:36,799
patrick dwyer will be doing a um a

38
00:01:36,799 --> 00:01:39,759
separate talk for os cyclone dx in about

39
00:01:39,759 --> 00:01:41,920
90 minutes uh which is yet another

40
00:01:41,920 --> 00:01:44,240
flagship owasp project but that

41
00:01:44,240 --> 00:01:46,560
particular project is uh specifically

42
00:01:46,560 --> 00:01:48,320
designed to be a software bill of

43
00:01:48,320 --> 00:01:49,840
materials standard

44
00:01:49,840 --> 00:01:52,720
um and dependency track is kind of um

45
00:01:52,720 --> 00:01:55,200
based around the this this whole idea of

46
00:01:55,200 --> 00:01:57,840
a software bill of materials so real

47
00:01:57,840 --> 00:02:00,560
quick what is a software bill material

48
00:02:00,560 --> 00:02:02,880
well an analogy would be the list of

49
00:02:02,880 --> 00:02:04,560
ingredients on on the back of the food

50
00:02:04,560 --> 00:02:06,479
label right on the back of a

51
00:02:06,479 --> 00:02:08,878
of an energy bar which is what this is i

52
00:02:08,878 --> 00:02:11,760
have a list of ingredients and by

53
00:02:11,760 --> 00:02:14,720
by providing the the list of ingredients

54
00:02:14,720 --> 00:02:17,040
i as a potential consumer can make

55
00:02:17,040 --> 00:02:19,200
risk-based decisions for example if i am

56
00:02:19,200 --> 00:02:22,160
allergic to to nuts for example well

57
00:02:22,160 --> 00:02:25,040
this tells me that this ingredients list

58
00:02:25,040 --> 00:02:28,080
tells me that i have peanuts and as a

59
00:02:28,080 --> 00:02:29,200
potential

60
00:02:29,200 --> 00:02:30,160
you know

61
00:02:30,160 --> 00:02:32,000
allergy to that

62
00:02:32,000 --> 00:02:34,319
that allows me to determine whether or

63
00:02:34,319 --> 00:02:36,560
not i want to take that risk or not well

64
00:02:36,560 --> 00:02:38,959
in the software world the analogy kind

65
00:02:38,959 --> 00:02:41,120
of transfers to something like this

66
00:02:41,120 --> 00:02:42,080
right

67
00:02:42,080 --> 00:02:44,000
i as an organization might have an

68
00:02:44,000 --> 00:02:47,120
allergic reaction to uh to apache struts

69
00:02:47,120 --> 00:02:48,640
it's a it's a really easy project to

70
00:02:48,640 --> 00:02:50,160
pick on just because there's been so

71
00:02:50,160 --> 00:02:52,000
many different types of the same classes

72
00:02:52,000 --> 00:02:53,360
of vulnerabilities

73
00:02:53,360 --> 00:02:56,080
but it's it's along those lines right so

74
00:02:56,080 --> 00:02:57,680
if i have a list of prohibited

75
00:02:57,680 --> 00:02:59,120
components that i just don't want in my

76
00:02:59,120 --> 00:03:00,640
environment

77
00:03:00,640 --> 00:03:02,560
list of projects for example that that

78
00:03:02,560 --> 00:03:05,360
maintain those or just uh want to

79
00:03:05,360 --> 00:03:07,599
identify if a particular component has

80
00:03:07,599 --> 00:03:10,159
known vulnerabilities this analogy

81
00:03:10,159 --> 00:03:11,920
allows me to to do those types of use

82
00:03:11,920 --> 00:03:13,040
cases

83
00:03:13,040 --> 00:03:16,319
so dependency track is really again it's

84
00:03:16,319 --> 00:03:18,000
centered around the concept of software

85
00:03:18,000 --> 00:03:19,920
building materials

86
00:03:19,920 --> 00:03:22,640
again patrick dwyer and i uh in 90

87
00:03:22,640 --> 00:03:24,239
minutes from now are going to be doing a

88
00:03:24,239 --> 00:03:27,760
talk on cyclone dx which is a another

89
00:03:27,760 --> 00:03:30,640
flagship oas project it's the deleting

90
00:03:30,640 --> 00:03:33,360
software build material standard it's uh

91
00:03:33,360 --> 00:03:36,959
it's interesting uh in that it is the um

92
00:03:36,959 --> 00:03:39,440
it's basically a standard that

93
00:03:39,440 --> 00:03:43,360
took uh individuals and vendors that are

94
00:03:43,360 --> 00:03:45,200
you know were experts in the security

95
00:03:45,200 --> 00:03:47,760
space or in the security space creating

96
00:03:47,760 --> 00:03:50,400
a a bill of materials standard for

97
00:03:50,400 --> 00:03:52,159
software security use cases and of

98
00:03:52,159 --> 00:03:54,640
course backed and and and

99
00:03:54,640 --> 00:03:57,280
and what not by the leading uh

100
00:03:57,280 --> 00:04:00,000
security foundation which is owass so

101
00:04:00,000 --> 00:04:02,239
huge amount of credibility there

102
00:04:02,239 --> 00:04:03,840
and uh i i

103
00:04:03,840 --> 00:04:05,519
highly encourage everyone who's

104
00:04:05,519 --> 00:04:07,599
interested in the subject to also catch

105
00:04:07,599 --> 00:04:11,439
the the other talk 90 minutes from now

106
00:04:11,439 --> 00:04:15,200
so what exactly does dependency track do

107
00:04:15,200 --> 00:04:16,160
well

108
00:04:16,160 --> 00:04:19,199
it consumes analyzes and produces

109
00:04:19,199 --> 00:04:21,759
s-bombs at high velocity

110
00:04:21,759 --> 00:04:22,720
okay

111
00:04:22,720 --> 00:04:24,960
what does that mean

112
00:04:24,960 --> 00:04:27,600
well it's ideal for use in modern build

113
00:04:27,600 --> 00:04:29,360
pipelines so whether or not you are

114
00:04:29,360 --> 00:04:31,520
doing continuous integration continuous

115
00:04:31,520 --> 00:04:34,639
delivery that sort of thing it's ideal

116
00:04:34,639 --> 00:04:36,720
for the for these types of uh these

117
00:04:36,720 --> 00:04:38,720
types of use cases

118
00:04:38,720 --> 00:04:41,840
it's also ideal for procurement and m a

119
00:04:41,840 --> 00:04:44,400
case um if i am procuring software from

120
00:04:44,400 --> 00:04:45,280
a

121
00:04:45,280 --> 00:04:47,840
maybe a vendor or if i am trying to

122
00:04:47,840 --> 00:04:48,720
maybe

123
00:04:48,720 --> 00:04:51,759
investigate um if i wanted to acquire a

124
00:04:51,759 --> 00:04:55,199
company um s-bombs are a really good use

125
00:04:55,199 --> 00:04:57,360
for those types of use cases and

126
00:04:57,360 --> 00:05:00,240
dependency track although it's it's

127
00:05:00,240 --> 00:05:02,320
optimized for highly automated

128
00:05:02,320 --> 00:05:04,560
environments it does support manual use

129
00:05:04,560 --> 00:05:07,039
cases so you can get s-bombs from your

130
00:05:07,039 --> 00:05:08,720
vendors from your from your

131
00:05:08,720 --> 00:05:10,080
organizations that you might want to

132
00:05:10,080 --> 00:05:12,639
acquire and ingest those s-bombs and

133
00:05:12,639 --> 00:05:15,520
analyze those manually as well

134
00:05:15,520 --> 00:05:17,199
and it's really designed dependency

135
00:05:17,199 --> 00:05:19,199
track is really designed to answer the

136
00:05:19,199 --> 00:05:22,080
question what is affected and if so

137
00:05:22,080 --> 00:05:25,680
where so imagine imagine i have 10 000

138
00:05:25,680 --> 00:05:28,080
assets in my environment and

139
00:05:28,080 --> 00:05:30,800
a shiny new vulnerability with a brand

140
00:05:30,800 --> 00:05:33,039
new logo comes up and i want to know if

141
00:05:33,039 --> 00:05:35,840
i'm affected by that thing or not um

142
00:05:35,840 --> 00:05:38,160
if i have s-bombs for all of my assets i

143
00:05:38,160 --> 00:05:40,960
can very quickly identify which assets

144
00:05:40,960 --> 00:05:43,280
in my environment actually have

145
00:05:43,280 --> 00:05:44,960
that particular

146
00:05:44,960 --> 00:05:46,880
component that vulnerable component so

147
00:05:46,880 --> 00:05:49,600
then i can you know maybe proactively

148
00:05:49,600 --> 00:05:51,680
put in mitigations in place maybe wafts

149
00:05:51,680 --> 00:05:53,919
or maybe i just have to pull the plug

150
00:05:53,919 --> 00:05:56,400
for that particular you know uh asset

151
00:05:56,400 --> 00:05:59,120
for until it can get patched whatever

152
00:05:59,120 --> 00:06:01,360
the case is at least i can quickly

153
00:06:01,360 --> 00:06:04,160
identify what that thing is

154
00:06:04,160 --> 00:06:04,840
so

155
00:06:04,840 --> 00:06:07,680
conceptually i have an asset it could be

156
00:06:07,680 --> 00:06:09,600
a microservice it could be a monolithic

157
00:06:09,600 --> 00:06:11,120
application it could be

158
00:06:11,120 --> 00:06:14,880
it could be a an iot toaster or an uh or

159
00:06:14,880 --> 00:06:16,639
a camera uh it doesn't really matter

160
00:06:16,639 --> 00:06:19,039
what it is but i have an asset and i

161
00:06:19,039 --> 00:06:21,199
have a bill of material that describes

162
00:06:21,199 --> 00:06:23,360
the software stack and potentially the

163
00:06:23,360 --> 00:06:26,240
hardware uh for that particular asset

164
00:06:26,240 --> 00:06:29,120
and then conceptually i would analyze it

165
00:06:29,120 --> 00:06:32,000
so that's the 30 000 foot view uh coming

166
00:06:32,000 --> 00:06:34,720
down a few thousand feet though and uh

167
00:06:34,720 --> 00:06:37,440
let's look at a typical workflow

168
00:06:37,440 --> 00:06:39,440
so the first thing that i want to do is

169
00:06:39,440 --> 00:06:40,319
actually

170
00:06:40,319 --> 00:06:43,120
create or acquire the s-bomb and

171
00:06:43,120 --> 00:06:46,400
creating s-bombs is fairly elementary

172
00:06:46,400 --> 00:06:48,960
there's plus tools in the cyclone dx

173
00:06:48,960 --> 00:06:50,800
tools center that allows you to do it

174
00:06:50,800 --> 00:06:52,240
it's not hard

175
00:06:52,240 --> 00:06:53,919
and of course you can acquire those from

176
00:06:53,919 --> 00:06:56,160
from vendors as well

177
00:06:56,160 --> 00:06:58,960
regardless of how you get one

178
00:06:58,960 --> 00:07:01,039
that's the first step

179
00:07:01,039 --> 00:07:03,440
the next step is to consume it into

180
00:07:03,440 --> 00:07:05,360
dependency track so you ingest it into

181
00:07:05,360 --> 00:07:06,720
dependency track either through

182
00:07:06,720 --> 00:07:08,880
automation whether or not it's in your

183
00:07:08,880 --> 00:07:11,840
ci cd pipeline uh or you can manually

184
00:07:11,840 --> 00:07:13,599
upload it in the user interface if you

185
00:07:13,599 --> 00:07:16,080
so choose but the the goal is to get it

186
00:07:16,080 --> 00:07:18,080
into the dependency track

187
00:07:18,080 --> 00:07:20,240
and then dependency track from there on

188
00:07:20,240 --> 00:07:22,720
is going to analyze the contents of that

189
00:07:22,720 --> 00:07:24,400
software builder material

190
00:07:24,400 --> 00:07:25,919
so it's going to break down all the list

191
00:07:25,919 --> 00:07:28,479
of components right and start analyzing

192
00:07:28,479 --> 00:07:30,400
all of the listed components it's going

193
00:07:30,400 --> 00:07:32,720
to analyze them for security risk it's

194
00:07:32,720 --> 00:07:34,960
going to analyze them for operational

195
00:07:34,960 --> 00:07:37,280
risk maybe things that are too old for

196
00:07:37,280 --> 00:07:39,599
example and it's also going to

197
00:07:39,599 --> 00:07:41,520
analyze them for license risk so if

198
00:07:41,520 --> 00:07:43,360
you've got licensed policies created

199
00:07:43,360 --> 00:07:45,280
that sort of thing it'll analyze it for

200
00:07:45,280 --> 00:07:47,199
that type of risk as well and it's going

201
00:07:47,199 --> 00:07:48,800
to going to con

202
00:07:48,800 --> 00:07:50,720
it's going to do this on a continuous

203
00:07:50,720 --> 00:07:52,000
basis so

204
00:07:52,000 --> 00:07:54,000
even after you've uploaded your your

205
00:07:54,000 --> 00:07:56,960
software bill material at a minimum that

206
00:07:56,960 --> 00:07:58,879
project that you uploaded it to is going

207
00:07:58,879 --> 00:08:02,240
to be analyzed every 24 hours so um if i

208
00:08:02,240 --> 00:08:05,199
have a asset in my in my environment

209
00:08:05,199 --> 00:08:08,000
that i got a bill of material from

210
00:08:08,000 --> 00:08:11,520
a year ago um it's still that inventory

211
00:08:11,520 --> 00:08:13,120
for that asset is still going to be

212
00:08:13,120 --> 00:08:16,160
continuously analyzed every 24 hours and

213
00:08:16,160 --> 00:08:18,160
guess what if a new vulnerability comes

214
00:08:18,160 --> 00:08:20,080
up whatever the case is

215
00:08:20,080 --> 00:08:23,759
i'm going to get notified of that

216
00:08:23,759 --> 00:08:26,560
in my environment so um keeping the

217
00:08:26,560 --> 00:08:27,840
information

218
00:08:27,840 --> 00:08:30,479
about what's potentially wrong with with

219
00:08:30,479 --> 00:08:33,839
these assets isn't very useful i need to

220
00:08:33,839 --> 00:08:37,440
create some streams so that i can create

221
00:08:37,440 --> 00:08:39,679
actionable things based on the

222
00:08:39,679 --> 00:08:41,360
intelligence that dependency track is

223
00:08:41,360 --> 00:08:44,399
providing so there's a lot of

224
00:08:44,399 --> 00:08:46,399
finding information that dependency

225
00:08:46,399 --> 00:08:48,640
track provides with these with these

226
00:08:48,640 --> 00:08:49,680
streams

227
00:08:49,680 --> 00:08:52,240
uh everything to know everything about

228
00:08:52,240 --> 00:08:54,480
the vulnerability for example

229
00:08:54,480 --> 00:08:57,200
uh what assets what things that that are

230
00:08:57,200 --> 00:08:59,440
uh affected by that obviously the

231
00:08:59,440 --> 00:09:02,000
severity and that sort of thing as well

232
00:09:02,000 --> 00:09:04,000
so that you have enough information to

233
00:09:04,000 --> 00:09:06,800
make real-time risk-based decisions so

234
00:09:06,800 --> 00:09:10,320
if i wanted to uh page my my operations

235
00:09:10,320 --> 00:09:12,160
team at two o'clock in the morning that

236
00:09:12,160 --> 00:09:14,000
might be one of the things that i do or

237
00:09:14,000 --> 00:09:15,760
maybe i automatically create a jira

238
00:09:15,760 --> 00:09:17,839
ticket right whatever the case is these

239
00:09:17,839 --> 00:09:20,000
are things that you can potentially do

240
00:09:20,000 --> 00:09:22,320
and we also integrate with uh with

241
00:09:22,320 --> 00:09:24,480
various types of chat ops in in those

242
00:09:24,480 --> 00:09:26,320
types of things as well so we can

243
00:09:26,320 --> 00:09:29,040
integrate with slack microsoft teams uh

244
00:09:29,040 --> 00:09:31,279
you can create your own if you so choose

245
00:09:31,279 --> 00:09:34,320
email is still a thing i guess uh so you

246
00:09:34,320 --> 00:09:37,040
can you can do that as well but the idea

247
00:09:37,040 --> 00:09:40,560
is is to get the data in and out of

248
00:09:40,560 --> 00:09:42,399
dependency track as efficiently as

249
00:09:42,399 --> 00:09:44,720
possible so that organizations can make

250
00:09:44,720 --> 00:09:48,000
better risk-based decisions

251
00:09:48,640 --> 00:09:51,120
so with that let's let's actually take a

252
00:09:51,120 --> 00:09:53,200
little bit of a demo of of what

253
00:09:53,200 --> 00:09:55,200
dependency track does and kind of how it

254
00:09:55,200 --> 00:09:56,800
does it

255
00:09:56,800 --> 00:10:00,320
so let me share my my other window here

256
00:10:00,320 --> 00:10:02,720
and that's going to be

257
00:10:02,720 --> 00:10:04,959
let's see this browser right here and

258
00:10:04,959 --> 00:10:06,800
let me go back to the

259
00:10:06,800 --> 00:10:09,040
to the dashboard here so when you first

260
00:10:09,040 --> 00:10:11,120
log into dependency track this is kind

261
00:10:11,120 --> 00:10:13,120
of what you're going to see is is your

262
00:10:13,120 --> 00:10:15,600
dashboard so at the top here you've got

263
00:10:15,600 --> 00:10:18,079
a lot of time series metrics for the the

264
00:10:18,079 --> 00:10:19,839
number of vulnerabilities that exist in

265
00:10:19,839 --> 00:10:21,920
my project portfolio which is basically

266
00:10:21,920 --> 00:10:23,920
the aggregate of all things that i'm

267
00:10:23,920 --> 00:10:25,040
tracking

268
00:10:25,040 --> 00:10:26,880
uh all the different different projects

269
00:10:26,880 --> 00:10:29,120
that are potentially at risk

270
00:10:29,120 --> 00:10:30,959
the number of components in my

271
00:10:30,959 --> 00:10:33,440
environment that i'm tracking and some

272
00:10:33,440 --> 00:10:35,360
risk scores it's basically a weighted

273
00:10:35,360 --> 00:10:37,920
severity score is essentially what it is

274
00:10:37,920 --> 00:10:40,160
but uh again there's a bunch of time

275
00:10:40,160 --> 00:10:43,120
series metrics here uh we were really

276
00:10:43,120 --> 00:10:45,279
true believers in time series because we

277
00:10:45,279 --> 00:10:47,920
really want to know are we doing better

278
00:10:47,920 --> 00:10:50,079
or worse over a given period of time

279
00:10:50,079 --> 00:10:52,320
maybe it's over a given release or a

280
00:10:52,320 --> 00:10:54,720
given quarter whatever the case is not

281
00:10:54,720 --> 00:10:58,320
only for the portfolio as a whole but on

282
00:10:58,320 --> 00:11:00,720
a per project basis right so if i'm

283
00:11:00,720 --> 00:11:01,680
tracking

284
00:11:01,680 --> 00:11:03,760
the a new development of something i

285
00:11:03,760 --> 00:11:05,839
could i can track the how well are we

286
00:11:05,839 --> 00:11:08,560
doing uh in that particular project over

287
00:11:08,560 --> 00:11:09,839
time

288
00:11:09,839 --> 00:11:11,760
um

289
00:11:11,760 --> 00:11:13,279
like i said everything is kind of a

290
00:11:13,279 --> 00:11:15,920
project so a project could be an

291
00:11:15,920 --> 00:11:18,480
application a microservice

292
00:11:18,480 --> 00:11:21,200
could be that iot toaster that that i

293
00:11:21,200 --> 00:11:23,440
that i threw out there earlier a project

294
00:11:23,440 --> 00:11:26,480
is just a container of some sorts and in

295
00:11:26,480 --> 00:11:29,200
fact it could be a container as well um

296
00:11:29,200 --> 00:11:31,279
here i've got a couple different

297
00:11:31,279 --> 00:11:33,440
projects identified and we'll go through

298
00:11:33,440 --> 00:11:35,600
a few of these to kind of show you show

299
00:11:35,600 --> 00:11:38,320
you what they are in fact um i'm gonna

300
00:11:38,320 --> 00:11:39,920
i'm gonna choose web goat just because

301
00:11:39,920 --> 00:11:42,560
it's an oas project

302
00:11:42,560 --> 00:11:44,800
and again you'll see the time series

303
00:11:44,800 --> 00:11:47,200
metrics uh am i is it doing better or

304
00:11:47,200 --> 00:11:50,079
worse over time uh looks like uh looks

305
00:11:50,079 --> 00:11:52,079
like it's about the same

306
00:11:52,079 --> 00:11:54,079
you'll see any policy violations if

307
00:11:54,079 --> 00:11:55,360
there are any i don't think i've

308
00:11:55,360 --> 00:11:57,839
actually set up any policy uh

309
00:11:57,839 --> 00:12:00,000
criteria in this particular case the

310
00:12:00,000 --> 00:12:01,839
number of components you can you can see

311
00:12:01,839 --> 00:12:03,760
so if i'm increasing the number of

312
00:12:03,760 --> 00:12:07,120
components uh i can actually see that

313
00:12:07,120 --> 00:12:09,279
because it might be important to me one

314
00:12:09,279 --> 00:12:11,600
of the deming principles who was a

315
00:12:11,600 --> 00:12:14,560
supply chain among other things guru

316
00:12:14,560 --> 00:12:16,639
is really about using the fewer and

317
00:12:16,639 --> 00:12:18,880
better suppliers so

318
00:12:18,880 --> 00:12:20,639
do i really want to increase the the

319
00:12:20,639 --> 00:12:22,839
number of components in my project

320
00:12:22,839 --> 00:12:25,519
unnecessarily probably not

321
00:12:25,519 --> 00:12:27,120
but this this allows me some

322
00:12:27,120 --> 00:12:29,920
visualizations on am i doing that or not

323
00:12:29,920 --> 00:12:31,200
because every component obviously

324
00:12:31,200 --> 00:12:33,519
introduces potential risk

325
00:12:33,519 --> 00:12:35,680
um but going into these some of these

326
00:12:35,680 --> 00:12:38,399
tabs here this is basically the list of

327
00:12:38,399 --> 00:12:40,240
of ingredients right this is this is the

328
00:12:40,240 --> 00:12:42,800
contents of my s-bomb right here so this

329
00:12:42,800 --> 00:12:46,160
tells me i have 136 components and it's

330
00:12:46,160 --> 00:12:47,920
going to tell me the the name of those

331
00:12:47,920 --> 00:12:50,880
components the version this little

332
00:12:50,880 --> 00:12:52,480
arrow thing over here is going to tell

333
00:12:52,480 --> 00:12:54,079
me whether or not it's out of date or

334
00:12:54,079 --> 00:12:56,959
not and this little warning says

335
00:12:56,959 --> 00:12:58,720
that it that this particular component

336
00:12:58,720 --> 00:13:00,800
is out of date a little green one just

337
00:13:00,800 --> 00:13:03,600
says it it's the current version

338
00:13:03,600 --> 00:13:06,160
uh the group if one exists not all

339
00:13:06,160 --> 00:13:08,959
ecosystems have the concept of a group

340
00:13:08,959 --> 00:13:11,040
but we we all kind of have the concept

341
00:13:11,040 --> 00:13:12,959
of internal components and internal

342
00:13:12,959 --> 00:13:15,040
components are these first-party

343
00:13:15,040 --> 00:13:17,519
components that we as an organization

344
00:13:17,519 --> 00:13:19,600
might actually create so we can we can

345
00:13:19,600 --> 00:13:21,440
separate out the third party from the

346
00:13:21,440 --> 00:13:23,760
first party components if the license

347
00:13:23,760 --> 00:13:25,279
could be identified or not it's going to

348
00:13:25,279 --> 00:13:27,200
be here and of course if there's any

349
00:13:27,200 --> 00:13:29,440
known vulnerabilities in here or not

350
00:13:29,440 --> 00:13:29,770
um

351
00:13:29,770 --> 00:13:31,680
[Music]

352
00:13:31,680 --> 00:13:33,920
you can also so you can go into like the

353
00:13:33,920 --> 00:13:35,760
component itself for example this is

354
00:13:35,760 --> 00:13:39,040
like looking at bootstrap uh 337 and i

355
00:13:39,040 --> 00:13:41,360
can see over here that there's a number

356
00:13:41,360 --> 00:13:43,920
of vulnerabilities identified

357
00:13:43,920 --> 00:13:46,160
but let's go back to the let's go back

358
00:13:46,160 --> 00:13:49,120
to the project here and i want to show

359
00:13:49,120 --> 00:13:50,959
you the dependency graph because when

360
00:13:50,959 --> 00:13:53,760
you import the software bill material

361
00:13:53,760 --> 00:13:55,680
yes it's a list of ingredients which is

362
00:13:55,680 --> 00:13:57,519
great but how did the list of

363
00:13:57,519 --> 00:13:59,440
ingredients actually get there well the

364
00:13:59,440 --> 00:14:01,199
dependency graph actually tells me how

365
00:14:01,199 --> 00:14:03,519
it got there so this is my direct

366
00:14:03,519 --> 00:14:06,079
dependencies for example and then going

367
00:14:06,079 --> 00:14:07,600
on from there these are kind of my

368
00:14:07,600 --> 00:14:09,760
transitive dependencies and it it it

369
00:14:09,760 --> 00:14:11,760
keeps on going it keeps on going from

370
00:14:11,760 --> 00:14:12,639
there

371
00:14:12,639 --> 00:14:15,120
so this is one visualization that exists

372
00:14:15,120 --> 00:14:16,959
today in the dependency graph there's

373
00:14:16,959 --> 00:14:18,800
there's more visualizations coming in

374
00:14:18,800 --> 00:14:20,959
the future

375
00:14:20,959 --> 00:14:22,560
but not every

376
00:14:22,560 --> 00:14:24,320
third-party component

377
00:14:24,320 --> 00:14:26,320
even if it's vulnerable

378
00:14:26,320 --> 00:14:28,399
it may not necessarily be impacted by

379
00:14:28,399 --> 00:14:30,000
the application right your application

380
00:14:30,000 --> 00:14:32,639
may not necessarily be impacted by by a

381
00:14:32,639 --> 00:14:33,920
vulnerable component just because

382
00:14:33,920 --> 00:14:35,760
something is vulnerable doesn't mean

383
00:14:35,760 --> 00:14:37,680
your application is automatically going

384
00:14:37,680 --> 00:14:40,320
to be vulnerable sometimes it may but in

385
00:14:40,320 --> 00:14:43,760
many cases it will not so we we

386
00:14:43,760 --> 00:14:46,160
typically have to um to take a

387
00:14:46,160 --> 00:14:47,920
risk-based approach and actually look at

388
00:14:47,920 --> 00:14:50,639
some of these findings so this allows us

389
00:14:50,639 --> 00:14:52,000
to do that

390
00:14:52,000 --> 00:14:53,920
so if i wanted to look at this critical

391
00:14:53,920 --> 00:14:55,920
uh jackson data bind

392
00:14:55,920 --> 00:14:59,120
issue here i can see that a i have a

393
00:14:59,120 --> 00:15:01,600
description of what the problem is

394
00:15:01,600 --> 00:15:04,480
and uh like a lot of static analyzes

395
00:15:04,480 --> 00:15:06,720
like a lot of static analysis tools i

396
00:15:06,720 --> 00:15:08,959
can actually make a comment as well as

397
00:15:08,959 --> 00:15:12,079
an audit decision about am i exploitable

398
00:15:12,079 --> 00:15:14,240
to this thing or not so maybe i am

399
00:15:14,240 --> 00:15:16,639
exploitable or maybe it's a a false

400
00:15:16,639 --> 00:15:19,040
positive or maybe

401
00:15:19,040 --> 00:15:20,079
and this is going to be a lot of the

402
00:15:20,079 --> 00:15:22,399
case sometimes maybe i'm just not

403
00:15:22,399 --> 00:15:24,000
affected by this particular

404
00:15:24,000 --> 00:15:25,839
vulnerability right and i can make a

405
00:15:25,839 --> 00:15:28,639
comment about why

406
00:15:28,639 --> 00:15:30,720
i'm not affected by this thing and it

407
00:15:30,720 --> 00:15:32,880
becomes part of my comment trail my

408
00:15:32,880 --> 00:15:35,360
immutable audit trail and then of course

409
00:15:35,360 --> 00:15:39,680
i can suppress it and when i suppress it

410
00:15:39,680 --> 00:15:42,000
metrics will be reflective of that

411
00:15:42,000 --> 00:15:44,000
because at this point

412
00:15:44,000 --> 00:15:46,079
this particular vulnerability i'm no

413
00:15:46,079 --> 00:15:48,720
longer impacted by that so it's it's not

414
00:15:48,720 --> 00:15:52,079
a risk to this particular application

415
00:15:52,079 --> 00:15:54,399
so you have the complete audibility in

416
00:15:54,399 --> 00:15:57,040
there as well

417
00:15:57,040 --> 00:15:59,120
um let's actually choose a different

418
00:15:59,120 --> 00:16:00,800
project though

419
00:16:00,800 --> 00:16:03,680
um let's actually choose

420
00:16:03,680 --> 00:16:06,000
uh let's actually choose this test

421
00:16:06,000 --> 00:16:07,759
project because i i threw out the

422
00:16:07,759 --> 00:16:10,399
concept of an iot toaster just because

423
00:16:10,399 --> 00:16:11,600
it's funny

424
00:16:11,600 --> 00:16:12,399
and

425
00:16:12,399 --> 00:16:14,240
this is a test project it has one

426
00:16:14,240 --> 00:16:15,759
component

427
00:16:15,759 --> 00:16:17,360
not very exciting

428
00:16:17,360 --> 00:16:19,360
but you know what this component right

429
00:16:19,360 --> 00:16:21,680
here it doesn't really do anything it's

430
00:16:21,680 --> 00:16:24,399
it's a java client that fetches stock

431
00:16:24,399 --> 00:16:25,440
quotes

432
00:16:25,440 --> 00:16:27,199
well you you typically have to reach out

433
00:16:27,199 --> 00:16:28,800
to the internet to to be able to

434
00:16:28,800 --> 00:16:31,199
retrieve what the stock quotes are right

435
00:16:31,199 --> 00:16:33,920
um i don't know about you but i can't

436
00:16:33,920 --> 00:16:36,160
remember the last time that i actually

437
00:16:36,160 --> 00:16:39,519
used a standalone piece of software that

438
00:16:39,519 --> 00:16:41,759
didn't have a self update that didn't

439
00:16:41,759 --> 00:16:43,839
phone home to the internet to do

440
00:16:43,839 --> 00:16:46,079
something right so

441
00:16:46,079 --> 00:16:48,720
with cyclone dx and with dependency with

442
00:16:48,720 --> 00:16:51,120
dependency track we actually treat the

443
00:16:51,120 --> 00:16:54,160
the entire stack uh not just the the

444
00:16:54,160 --> 00:16:57,040
actual software components themselves so

445
00:16:57,040 --> 00:16:59,120
in this case it actually depends on a

446
00:16:59,120 --> 00:17:00,320
service

447
00:17:00,320 --> 00:17:02,240
again this was part of my software bill

448
00:17:02,240 --> 00:17:03,680
material

449
00:17:03,680 --> 00:17:05,919
and i can go into my service here and

450
00:17:05,919 --> 00:17:08,720
actually see you know what uh what the

451
00:17:08,720 --> 00:17:10,319
what the service is

452
00:17:10,319 --> 00:17:12,880
who the provider is uh what were the

453
00:17:12,880 --> 00:17:15,199
endpoints that this application is

454
00:17:15,199 --> 00:17:17,359
fetching and maybe even some of the data

455
00:17:17,359 --> 00:17:18,720
classifications as well as the

456
00:17:18,720 --> 00:17:20,959
directional flow of data there's enough

457
00:17:20,959 --> 00:17:22,959
information in here to

458
00:17:22,959 --> 00:17:25,280
for me to program to create a threat

459
00:17:25,280 --> 00:17:27,839
model a a data flow diagram used in

460
00:17:27,839 --> 00:17:29,600
threat models which is which is really

461
00:17:29,600 --> 00:17:30,840
really

462
00:17:30,840 --> 00:17:33,440
interesting but again let me let me go

463
00:17:33,440 --> 00:17:35,760
back to um

464
00:17:35,760 --> 00:17:37,280
to one of the core concepts of

465
00:17:37,280 --> 00:17:39,360
dependency track which was

466
00:17:39,360 --> 00:17:42,000
am i affected and where

467
00:17:42,000 --> 00:17:44,720
so let's find out where

468
00:17:44,720 --> 00:17:48,720
uh jackson databind is at

469
00:17:51,919 --> 00:17:53,679
so if i do a search for jackson data

470
00:17:53,679 --> 00:17:56,000
bind i'm going to see that in my

471
00:17:56,000 --> 00:17:58,080
environment i have three different

472
00:17:58,080 --> 00:17:59,280
projects

473
00:17:59,280 --> 00:18:01,679
that uh that actually use jackson data

474
00:18:01,679 --> 00:18:04,400
bind uh there is this this project right

475
00:18:04,400 --> 00:18:07,679
here web goat and drop wizard so think

476
00:18:07,679 --> 00:18:10,320
of a typical uh enterprise with tens of

477
00:18:10,320 --> 00:18:12,160
thousands of assets

478
00:18:12,160 --> 00:18:14,960
really really quickly here i was able to

479
00:18:14,960 --> 00:18:17,520
figure out which assets in my

480
00:18:17,520 --> 00:18:20,880
environment are potentially impacted by

481
00:18:20,880 --> 00:18:24,080
by this particular vulnerable component

482
00:18:24,080 --> 00:18:25,760
now i can also search for other things i

483
00:18:25,760 --> 00:18:28,400
can search for package url i can search

484
00:18:28,400 --> 00:18:30,559
for cpes

485
00:18:30,559 --> 00:18:32,400
i can search for it

486
00:18:32,400 --> 00:18:34,559
by swift tag ids

487
00:18:34,559 --> 00:18:37,120
which is useful for commercial software

488
00:18:37,120 --> 00:18:39,520
and i can also search for it by hash so

489
00:18:39,520 --> 00:18:42,240
for example if i know that i'm using a

490
00:18:42,240 --> 00:18:44,720
component but maybe there's a malicious

491
00:18:44,720 --> 00:18:46,880
variant of that same component floating

492
00:18:46,880 --> 00:18:48,880
around on the internet somewhere i can

493
00:18:48,880 --> 00:18:50,480
actually search for things by hash which

494
00:18:50,480 --> 00:18:54,160
is also a really interesting use case

495
00:18:55,520 --> 00:18:57,679
uh the other way to come to it though is

496
00:18:57,679 --> 00:18:59,360
is through this way and actually let me

497
00:18:59,360 --> 00:19:01,120
let me just find a vulnerability real

498
00:19:01,120 --> 00:19:02,559
quick we were looking at jackson data

499
00:19:02,559 --> 00:19:03,760
bind yes

500
00:19:03,760 --> 00:19:05,679
so let me just let me just pull this

501
00:19:05,679 --> 00:19:08,720
vulnerability right here

502
00:19:08,960 --> 00:19:10,400
because you can also come to it from the

503
00:19:10,400 --> 00:19:11,360
other way

504
00:19:11,360 --> 00:19:12,480
so

505
00:19:12,480 --> 00:19:15,840
imagine that a shiny new

506
00:19:15,840 --> 00:19:18,240
a new vulnerability comes up gains a lot

507
00:19:18,240 --> 00:19:21,039
of press has a logo has its own website

508
00:19:21,039 --> 00:19:23,039
and i want to know if i have any

509
00:19:23,039 --> 00:19:25,120
projects in my portfolio that are

510
00:19:25,120 --> 00:19:27,760
impacted by that thing so i do a search

511
00:19:27,760 --> 00:19:30,000
for that vulnerability i go into the

512
00:19:30,000 --> 00:19:32,400
vulnerability and i have automatically

513
00:19:32,400 --> 00:19:34,880
here a list of affected projects so

514
00:19:34,880 --> 00:19:37,600
right here i search for a vulnerability

515
00:19:37,600 --> 00:19:39,440
that's making a lot of press

516
00:19:39,440 --> 00:19:41,200
and right here dependency track is

517
00:19:41,200 --> 00:19:43,280
telling me which projects are affected

518
00:19:43,280 --> 00:19:47,520
by that so that's immensely powerful

519
00:19:48,720 --> 00:19:52,559
so let me um let's see we've got uh five

520
00:19:52,559 --> 00:19:55,840
six minutes left uh we also support um

521
00:19:55,840 --> 00:19:57,840
you know security isn't the the only use

522
00:19:57,840 --> 00:20:00,240
case uh it's the it's the one that you

523
00:20:00,240 --> 00:20:02,880
know that gaining the most uh um

524
00:20:02,880 --> 00:20:05,120
um you know it's the one that it's the

525
00:20:05,120 --> 00:20:07,760
one use case that has board level room

526
00:20:07,760 --> 00:20:09,919
discussions constantly

527
00:20:09,919 --> 00:20:12,240
but license intellectual property and

528
00:20:12,240 --> 00:20:14,799
some other use cases are also important

529
00:20:14,799 --> 00:20:17,600
um dependency track handles those uh

530
00:20:17,600 --> 00:20:20,640
with uh as well so we support all spdx

531
00:20:20,640 --> 00:20:22,559
license identifiers

532
00:20:22,559 --> 00:20:25,360
and we also support a policy engine that

533
00:20:25,360 --> 00:20:26,640
you can

534
00:20:26,640 --> 00:20:28,960
create different types of policies so

535
00:20:28,960 --> 00:20:31,200
you can create license policies you can

536
00:20:31,200 --> 00:20:34,159
create prohibited component policies or

537
00:20:34,159 --> 00:20:34,960
or

538
00:20:34,960 --> 00:20:36,559
you know that sort of thing so there's a

539
00:20:36,559 --> 00:20:38,640
number of different types of policies

540
00:20:38,640 --> 00:20:40,720
that that you can create that's also

541
00:20:40,720 --> 00:20:41,570
available to you

542
00:20:41,570 --> 00:20:42,960
[Music]

543
00:20:42,960 --> 00:20:44,960
let me go ahead and stop this share and

544
00:20:44,960 --> 00:20:49,320
go back to my deck here

545
00:20:52,400 --> 00:20:54,960
so isn't essentially what we're talking

546
00:20:54,960 --> 00:20:57,440
about sca

547
00:20:57,440 --> 00:21:01,600
kind of but yeah no not really

548
00:21:01,600 --> 00:21:04,159
sca is really about looking at a

549
00:21:04,159 --> 00:21:06,640
specific application with a very

550
00:21:06,640 --> 00:21:09,919
specific type of lens

551
00:21:09,919 --> 00:21:12,159
what s-bombs do

552
00:21:12,159 --> 00:21:15,520
is not only the transparency of that but

553
00:21:15,520 --> 00:21:17,280
it looks at it with a completely

554
00:21:17,280 --> 00:21:19,679
different lens in a much broader lens so

555
00:21:19,679 --> 00:21:22,880
it's it's definitely not sca although

556
00:21:22,880 --> 00:21:24,400
what you've seen here

557
00:21:24,400 --> 00:21:27,360
does have some sca-like qualities right

558
00:21:27,360 --> 00:21:30,000
known vulnerabilities license compliance

559
00:21:30,000 --> 00:21:32,080
outdated components these are all use

560
00:21:32,080 --> 00:21:34,880
cases that most sca products have today

561
00:21:34,880 --> 00:21:36,240
but we did it

562
00:21:36,240 --> 00:21:38,880
not using sca we did it using software

563
00:21:38,880 --> 00:21:41,039
bill materials

564
00:21:41,039 --> 00:21:42,559
so software build materials are going to

565
00:21:42,559 --> 00:21:44,640
give you inventory use cases which

566
00:21:44,640 --> 00:21:46,720
surprisingly is is very very difficult

567
00:21:46,720 --> 00:21:48,880
and especially for sca products to to

568
00:21:48,880 --> 00:21:50,080
get it right

569
00:21:50,080 --> 00:21:51,600
much more easier to get it right with

570
00:21:51,600 --> 00:21:54,080
software builder materials

571
00:21:54,080 --> 00:21:56,240
but we can think of

572
00:21:56,240 --> 00:21:58,559
not only the the components themselves

573
00:21:58,559 --> 00:22:00,480
but you know what components include

574
00:22:00,480 --> 00:22:02,240
other components maybe in the java world

575
00:22:02,240 --> 00:22:04,000
for example we have these things called

576
00:22:04,000 --> 00:22:06,880
shaded jars where a jar might actually

577
00:22:06,880 --> 00:22:09,840
have 10 other products and 10 other

578
00:22:09,840 --> 00:22:11,919
other components in there that's really

579
00:22:11,919 --> 00:22:14,000
an assembly within cyclone dxn and

580
00:22:14,000 --> 00:22:16,240
dependency track supports that

581
00:22:16,240 --> 00:22:18,320
we can tell where we got a component

582
00:22:18,320 --> 00:22:20,960
from so whether it's a country of origin

583
00:22:20,960 --> 00:22:22,640
whether it's a repository that we

584
00:22:22,640 --> 00:22:24,480
retrieved it from that sort of

585
00:22:24,480 --> 00:22:26,640
providence use case is is what we're

586
00:22:26,640 --> 00:22:28,799
also targeting we can target pedigree

587
00:22:28,799 --> 00:22:30,640
and this is a future use case that we're

588
00:22:30,640 --> 00:22:32,799
going to be working on where open source

589
00:22:32,799 --> 00:22:34,720
is the ultimate supply chain and we are

590
00:22:34,720 --> 00:22:36,559
going to modify components and change

591
00:22:36,559 --> 00:22:38,640
them and rename them and we can track

592
00:22:38,640 --> 00:22:40,480
all these modifications across our

593
00:22:40,480 --> 00:22:43,600
supply chain that's that's pedigree

594
00:22:43,600 --> 00:22:45,760
ultimately these things are packaged and

595
00:22:45,760 --> 00:22:47,520
distributed somewhere sometimes we we

596
00:22:47,520 --> 00:22:49,360
put them in the cloud for production

597
00:22:49,360 --> 00:22:50,960
sometimes they're downloaded from

598
00:22:50,960 --> 00:22:52,799
customers on the internet but packaging

599
00:22:52,799 --> 00:22:54,480
and distribution are cases

600
00:22:54,480 --> 00:22:57,039
remediation and disclosure are also

601
00:22:57,039 --> 00:22:59,520
other use cases and of course we also

602
00:22:59,520 --> 00:23:02,080
support hardware because this is a full

603
00:23:02,080 --> 00:23:04,559
stack solution we're not just looking at

604
00:23:04,559 --> 00:23:06,799
the in application we're literally

605
00:23:06,799 --> 00:23:09,280
looking at the full stack

606
00:23:09,280 --> 00:23:11,120
and that full stack does include

607
00:23:11,120 --> 00:23:12,480
services

608
00:23:12,480 --> 00:23:14,400
and in fact like i said in the in the

609
00:23:14,400 --> 00:23:17,919
demo we have enough information about

610
00:23:17,919 --> 00:23:20,559
services in the s-bomb to actually

611
00:23:20,559 --> 00:23:22,720
programmatically create a data flow

612
00:23:22,720 --> 00:23:24,960
diagram that could be used for threat

613
00:23:24,960 --> 00:23:26,240
modeling which is really really

614
00:23:26,240 --> 00:23:27,919
interesting so this

615
00:23:27,919 --> 00:23:30,559
this in my mind is a really really big

616
00:23:30,559 --> 00:23:33,760
win and a huge step forward into being

617
00:23:33,760 --> 00:23:36,880
able to make better risk-based decisions

618
00:23:36,880 --> 00:23:38,240
we have a lot of integrations with

619
00:23:38,240 --> 00:23:40,159
dependency track obviously the software

620
00:23:40,159 --> 00:23:41,600
build material format of choice is

621
00:23:41,600 --> 00:23:43,200
cyclone dx

622
00:23:43,200 --> 00:23:45,279
but we're tool agnostic and we're vendor

623
00:23:45,279 --> 00:23:47,120
agnostic so we support multiple sources

624
00:23:47,120 --> 00:23:48,960
of vulnerability intelligence everything

625
00:23:48,960 --> 00:23:52,000
from the nbd to npm advisories vuln db

626
00:23:52,000 --> 00:23:53,840
from risk-based security of course

627
00:23:53,840 --> 00:23:55,520
sonotype oss index and there's some

628
00:23:55,520 --> 00:23:57,600
other ones coming in the future as well

629
00:23:57,600 --> 00:23:59,520
support a number of different ecosystems

630
00:23:59,520 --> 00:24:02,000
and repositories i mentioned microsoft

631
00:24:02,000 --> 00:24:03,840
teams and slack

632
00:24:03,840 --> 00:24:05,120
and of course we have a bunch of

633
00:24:05,120 --> 00:24:06,799
different types of integrations both

634
00:24:06,799 --> 00:24:09,200
native integrations like

635
00:24:09,200 --> 00:24:12,320
defect dojo and fortify and kenna as

636
00:24:12,320 --> 00:24:14,320
well as some community integrations like

637
00:24:14,320 --> 00:24:16,720
from code dx and security compass and

638
00:24:16,720 --> 00:24:18,480
thread fix so

639
00:24:18,480 --> 00:24:20,480
pretty big

640
00:24:20,480 --> 00:24:23,760
ecosystem and it's it's being used in

641
00:24:23,760 --> 00:24:25,440
hundreds of thousands of organizations

642
00:24:25,440 --> 00:24:27,600
today so a little bit about the project

643
00:24:27,600 --> 00:24:29,200
this is the github repo that where you

644
00:24:29,200 --> 00:24:31,039
can find more information we do have

645
00:24:31,039 --> 00:24:32,640
some social media accounts and a

646
00:24:32,640 --> 00:24:34,799
dedicated youtube channel i need to

647
00:24:34,799 --> 00:24:36,880
update the content on that it's uh it's

648
00:24:36,880 --> 00:24:38,799
kind of lacking

649
00:24:38,799 --> 00:24:41,279
documentation is pretty good and of

650
00:24:41,279 --> 00:24:43,840
course there is our public website so

651
00:24:43,840 --> 00:24:46,640
again thank you all wasp congratulations

652
00:24:46,640 --> 00:24:50,559
on 20 years and um i will see you in the

653
00:24:50,559 --> 00:24:53,039
um i'll be in the slack channel so catch

654
00:24:53,039 --> 00:24:54,559
me in the slack channel for the next 30

655
00:24:54,559 --> 00:24:55,840
minutes if you have any questions on

656
00:24:55,840 --> 00:24:59,439
dependency track cheers

