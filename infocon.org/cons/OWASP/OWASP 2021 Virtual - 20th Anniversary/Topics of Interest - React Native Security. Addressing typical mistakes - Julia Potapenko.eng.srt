1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,639 --> 00:00:12,000
okay hello everyone and welcome to my

3
00:00:12,000 --> 00:00:14,559
talk about drag native security

4
00:00:14,559 --> 00:00:17,199
addressing typical mistakes

5
00:00:17,199 --> 00:00:20,080
actually this is my first time speaking

6
00:00:20,080 --> 00:00:23,760
at such a large of asp event so let me

7
00:00:23,760 --> 00:00:27,760
quickly introduce myself

8
00:00:27,920 --> 00:00:30,560
my name is julia i'm a security software

9
00:00:30,560 --> 00:00:32,880
engineer at cossack labs

10
00:00:32,880 --> 00:00:35,760
i'm also a leader of ospregetomer

11
00:00:35,760 --> 00:00:38,960
chapter in ukraine and i am a huge huge

12
00:00:38,960 --> 00:00:43,600
fan of wasp mis-vs and msdg projects

13
00:00:43,600 --> 00:00:46,399
uh cossack labs is a data security and

14
00:00:46,399 --> 00:00:49,440
cryptography company we have

15
00:00:49,440 --> 00:00:51,680
products and expertise in different

16
00:00:51,680 --> 00:00:53,680
platforms and languages

17
00:00:53,680 --> 00:00:56,480
and my personal specialization is mobile

18
00:00:56,480 --> 00:01:00,480
application security for is for android

19
00:01:00,480 --> 00:01:02,559
and for react native

20
00:01:02,559 --> 00:01:04,559
like we do not

21
00:01:04,559 --> 00:01:08,080
break stuff we build it

22
00:01:08,080 --> 00:01:10,479
and today i want to talk about things

23
00:01:10,479 --> 00:01:13,200
you need to consider to build a secure

24
00:01:13,200 --> 00:01:15,280
react native application

25
00:01:15,280 --> 00:01:17,920
now we will talk today about the

26
00:01:17,920 --> 00:01:20,280
architecture in general about

27
00:01:20,280 --> 00:01:22,960
platform-specific things for is for

28
00:01:22,960 --> 00:01:25,280
android for react native we'll talk

29
00:01:25,280 --> 00:01:27,759
about dependencies and about security

30
00:01:27,759 --> 00:01:30,240
testing

31
00:01:30,240 --> 00:01:32,640
and i would like to start with this

32
00:01:32,640 --> 00:01:34,960
phrase that choosing react native and

33
00:01:34,960 --> 00:01:37,439
its components means that you understand

34
00:01:37,439 --> 00:01:39,360
and accept potential security

35
00:01:39,360 --> 00:01:40,720
consequences

36
00:01:40,720 --> 00:01:42,960
to understand what it means

37
00:01:42,960 --> 00:01:45,920
let's take a look at the architecture of

38
00:01:45,920 --> 00:01:48,479
the react native apps

39
00:01:48,479 --> 00:01:51,759
it's just a general overview

40
00:01:51,759 --> 00:01:53,600
react native is a cross-platform

41
00:01:53,600 --> 00:01:55,680
solution from facebook

42
00:01:55,680 --> 00:01:57,520
that allows writing

43
00:01:57,520 --> 00:02:00,640
applications using react javascript and

44
00:02:00,640 --> 00:02:03,280
you can also use typescript

45
00:02:03,280 --> 00:02:04,799
so we have

46
00:02:04,799 --> 00:02:08,479
native platforms ios and android we have

47
00:02:08,479 --> 00:02:11,840
javascript engine it can be custom or it

48
00:02:11,840 --> 00:02:14,239
can be a native one

49
00:02:14,239 --> 00:02:17,440
and we have these components the bridge

50
00:02:17,440 --> 00:02:19,680
written by facebook that handles

51
00:02:19,680 --> 00:02:22,160
messages between native platform and

52
00:02:22,160 --> 00:02:24,879
javascript engine

53
00:02:24,879 --> 00:02:27,920
when you write native apps for ios and

54
00:02:27,920 --> 00:02:29,040
android

55
00:02:29,040 --> 00:02:32,080
you choose to trust apple and google

56
00:02:32,080 --> 00:02:35,040
with their systems with your apis you

57
00:02:35,040 --> 00:02:37,360
believe that they are secure enough for

58
00:02:37,360 --> 00:02:38,160
your

59
00:02:38,160 --> 00:02:39,840
applications

60
00:02:39,840 --> 00:02:42,800
and when you use react native you add

61
00:02:42,800 --> 00:02:44,560
facebook to this list

62
00:02:44,560 --> 00:02:46,800
and if you decide to use typescript you

63
00:02:46,800 --> 00:02:49,680
also add microsoft

64
00:02:49,680 --> 00:02:52,400
the problem here is that each new

65
00:02:52,400 --> 00:02:55,040
third-party component makes the attack

66
00:02:55,040 --> 00:02:57,120
surface wider

67
00:02:57,120 --> 00:02:59,840
if the breach is broken or facebook

68
00:02:59,840 --> 00:03:01,680
stops supporting it or something else

69
00:03:01,680 --> 00:03:04,080
happens your react native app stops

70
00:03:04,080 --> 00:03:05,760
working as well

71
00:03:05,760 --> 00:03:07,920
and the same problem goes with

72
00:03:07,920 --> 00:03:11,040
javascript engines if you choose using

73
00:03:11,040 --> 00:03:13,120
custom javascript engines you will need

74
00:03:13,120 --> 00:03:14,959
to deal with it as well

75
00:03:14,959 --> 00:03:18,640
for example facebook uh has a

76
00:03:18,640 --> 00:03:21,200
javascript custom javascript engine for

77
00:03:21,200 --> 00:03:24,080
ios and android called hermes to make

78
00:03:24,080 --> 00:03:27,360
react native applications more efficient

79
00:03:27,360 --> 00:03:29,440
but you know there are already found

80
00:03:29,440 --> 00:03:31,519
vulnerabilities

81
00:03:31,519 --> 00:03:34,319
in this hermes javascript engine of

82
00:03:34,319 --> 00:03:37,360
course they're already fixed but still

83
00:03:37,360 --> 00:03:39,760
these are vulnerabilities for

84
00:03:39,760 --> 00:03:42,519
uh hermes for android and

85
00:03:42,519 --> 00:03:45,840
hermes4is was just released this year

86
00:03:45,840 --> 00:03:48,480
and there are still like it still looks

87
00:03:48,480 --> 00:03:50,319
good for now

88
00:03:50,319 --> 00:03:51,440
uh

89
00:03:51,440 --> 00:03:53,599
okay moving forward

90
00:03:53,599 --> 00:03:56,159
uh with react native developers deal

91
00:03:56,159 --> 00:03:58,959
with security for all three platforms

92
00:03:58,959 --> 00:04:02,480
for with ios with android and with react

93
00:04:02,480 --> 00:04:03,920
native

94
00:04:03,920 --> 00:04:07,040
uh i'm pretty sure you're familiar with

95
00:04:07,040 --> 00:04:10,159
uh mobile top 10 from overs

96
00:04:10,159 --> 00:04:13,519
like similar to just of top 10 but for

97
00:04:13,519 --> 00:04:15,120
mobile applications

98
00:04:15,120 --> 00:04:18,160
and the first item in it is improper

99
00:04:18,160 --> 00:04:20,079
platform usage

100
00:04:20,079 --> 00:04:20,959
and

101
00:04:20,959 --> 00:04:24,639
the set truth is that uh if it's hard

102
00:04:24,639 --> 00:04:27,280
for ios and android developers to use

103
00:04:27,280 --> 00:04:30,160
platform-specific security controls it

104
00:04:30,160 --> 00:04:32,639
is even harder for react native

105
00:04:32,639 --> 00:04:34,560
developers because again

106
00:04:34,560 --> 00:04:36,720
you need to deal with specifics of all

107
00:04:36,720 --> 00:04:38,639
three platforms

108
00:04:38,639 --> 00:04:41,120
i will show you multiple examples

109
00:04:41,120 --> 00:04:43,520
of this

110
00:04:43,520 --> 00:04:45,680
i just love this phrase that react

111
00:04:45,680 --> 00:04:48,560
native is a leaky abstraction

112
00:04:48,560 --> 00:04:50,960
react native allows you to abstract from

113
00:04:50,960 --> 00:04:54,000
the details of each native platform but

114
00:04:54,000 --> 00:04:56,880
sometimes such details are very very

115
00:04:56,880 --> 00:04:59,840
important from the security perspective

116
00:04:59,840 --> 00:05:02,720
let's take a look at several examples

117
00:05:02,720 --> 00:05:06,320
the first one is secure store

118
00:05:06,320 --> 00:05:09,360
it is a library from expo that claims

119
00:05:09,360 --> 00:05:11,120
that it stores

120
00:05:11,120 --> 00:05:14,880
uh data encrypted and well that is true

121
00:05:14,880 --> 00:05:18,400
it uses a keychain on ios that is an

122
00:05:18,400 --> 00:05:21,919
encrypted storage and uh for android it

123
00:05:21,919 --> 00:05:25,360
uses keystore to create a key then it

124
00:05:25,360 --> 00:05:27,840
encrypts the data with this key and

125
00:05:27,840 --> 00:05:30,240
stores it in shared preferences regular

126
00:05:30,240 --> 00:05:31,440
storage

127
00:05:31,440 --> 00:05:34,400
like all good here it stores data

128
00:05:34,400 --> 00:05:36,400
encrypted that's right

129
00:05:36,400 --> 00:05:37,919
but

130
00:05:37,919 --> 00:05:41,039
you see keychain persists its data

131
00:05:41,039 --> 00:05:43,440
across apra installs while shared

132
00:05:43,440 --> 00:05:45,600
preferences do not

133
00:05:45,600 --> 00:05:48,400
and you know there is an msvs

134
00:05:48,400 --> 00:05:49,759
requirement

135
00:05:49,759 --> 00:05:51,440
that you need to

136
00:05:51,440 --> 00:05:54,320
erase the data across a pre-install so

137
00:05:54,320 --> 00:05:57,039
here we are missing this requirement

138
00:05:57,039 --> 00:05:58,319
then

139
00:05:58,319 --> 00:06:00,960
for ios we have hardware backed

140
00:06:00,960 --> 00:06:02,080
encryption

141
00:06:02,080 --> 00:06:04,840
uh starting from iphone

142
00:06:04,840 --> 00:06:08,960
5s that was released several years ago

143
00:06:08,960 --> 00:06:11,759
and for android there are

144
00:06:11,759 --> 00:06:14,479
there are still devices that do not have

145
00:06:14,479 --> 00:06:16,800
hardware backed encryption and probably

146
00:06:16,800 --> 00:06:19,039
you don't want to run your application

147
00:06:19,039 --> 00:06:21,199
on such devices

148
00:06:21,199 --> 00:06:22,479
then

149
00:06:22,479 --> 00:06:24,720
if you use keychain

150
00:06:24,720 --> 00:06:26,400
your data

151
00:06:26,400 --> 00:06:28,319
is decrypted when your device is

152
00:06:28,319 --> 00:06:30,960
unlocked meaning

153
00:06:30,960 --> 00:06:34,880
you use touch id face id or passcode and

154
00:06:34,880 --> 00:06:37,600
then your data is stored in plain text

155
00:06:37,600 --> 00:06:40,319
until you lock your device

156
00:06:40,319 --> 00:06:43,759
while on android this library decrypts

157
00:06:43,759 --> 00:06:46,960
the data just right before usage

158
00:06:46,960 --> 00:06:50,400
and you see uh there are differences in

159
00:06:50,400 --> 00:06:53,039
the behavior of this security control

160
00:06:53,039 --> 00:06:56,000
and if you follow mobile security best

161
00:06:56,000 --> 00:06:58,160
practices standards you want the

162
00:06:58,160 --> 00:07:00,479
behavior to be similar

163
00:07:00,479 --> 00:07:02,960
uh you want to raise data across april

164
00:07:02,960 --> 00:07:04,800
installs you want to have hardware

165
00:07:04,800 --> 00:07:06,960
backed encryption and you want to

166
00:07:06,960 --> 00:07:10,000
decrypt your data just before use

167
00:07:10,000 --> 00:07:10,960
so

168
00:07:10,960 --> 00:07:15,199
uh here you need to understand and fix

169
00:07:15,199 --> 00:07:18,400
platform specific things

170
00:07:18,400 --> 00:07:20,639
another example of platform-specific

171
00:07:20,639 --> 00:07:22,000
problem

172
00:07:22,000 --> 00:07:23,759
is about

173
00:07:23,759 --> 00:07:27,039
managing and joint permissions

174
00:07:27,039 --> 00:07:28,479
you know

175
00:07:28,479 --> 00:07:31,280
on android you specify permissions in

176
00:07:31,280 --> 00:07:33,120
manifest file

177
00:07:33,120 --> 00:07:36,560
and each dependency may have its own

178
00:07:36,560 --> 00:07:39,599
manifest file adding new permissions

179
00:07:39,599 --> 00:07:41,680
it is a common practice for react native

180
00:07:41,680 --> 00:07:43,680
applications to have multiple

181
00:07:43,680 --> 00:07:46,240
dependencies i'd say sometimes your

182
00:07:46,240 --> 00:07:48,319
application may have even more than a

183
00:07:48,319 --> 00:07:52,160
hundred of dependencies and each of them

184
00:07:52,160 --> 00:07:53,360
may add

185
00:07:53,360 --> 00:07:56,560
new permissions to your project

186
00:07:56,560 --> 00:07:58,960
and it becomes a headache

187
00:07:58,960 --> 00:08:01,520
because like yeah you can remove some of

188
00:08:01,520 --> 00:08:04,960
these permissions uh you can take your

189
00:08:04,960 --> 00:08:08,000
main manifest file and remove these edit

190
00:08:08,000 --> 00:08:09,440
permissions

191
00:08:09,440 --> 00:08:11,840
but it does not guarantee that the

192
00:08:11,840 --> 00:08:14,800
library can support it like it may just

193
00:08:14,800 --> 00:08:16,240
crash if you try to remove its

194
00:08:16,240 --> 00:08:17,599
permission

195
00:08:17,599 --> 00:08:20,560
so dependencies are a headache and we'll

196
00:08:20,560 --> 00:08:22,800
get back to this topic a little bit

197
00:08:22,800 --> 00:08:26,280
later again

198
00:08:27,199 --> 00:08:29,759
one more example now it's javascript

199
00:08:29,759 --> 00:08:31,360
specific

200
00:08:31,360 --> 00:08:32,479
it is

201
00:08:32,479 --> 00:08:34,719
maybe one of the most popular questions

202
00:08:34,719 --> 00:08:36,559
i hear is that

203
00:08:36,559 --> 00:08:40,000
is xss is possible in react native and

204
00:08:40,000 --> 00:08:44,000
the generic answer is

205
00:08:44,320 --> 00:08:47,440
its possibility is decreased by design

206
00:08:47,440 --> 00:08:50,160
if you read some articles you can see

207
00:08:50,160 --> 00:08:52,240
some explanations why

208
00:08:52,240 --> 00:08:53,600
we consider

209
00:08:53,600 --> 00:08:56,240
uh it why we consider the possibility to

210
00:08:56,240 --> 00:08:59,920
be decreased like in react react.js and

211
00:08:59,920 --> 00:09:02,880
for react native it it is decreased even

212
00:09:02,880 --> 00:09:04,000
more

213
00:09:04,000 --> 00:09:04,800
but

214
00:09:04,800 --> 00:09:07,440
let's not go way too deep into this

215
00:09:07,440 --> 00:09:11,120
topic because xss is still possible

216
00:09:11,120 --> 00:09:14,320
it's a very trivial example but still

217
00:09:14,320 --> 00:09:16,240
there is there's still

218
00:09:16,240 --> 00:09:18,959
this evil function

219
00:09:18,959 --> 00:09:22,240
uh and here is an example that if you

220
00:09:22,240 --> 00:09:25,200
use async storage you can pass this

221
00:09:25,200 --> 00:09:27,040
another library for storing data in

222
00:09:27,040 --> 00:09:29,360
mobile applications now you can pass

223
00:09:29,360 --> 00:09:31,680
these lines to the evol

224
00:09:31,680 --> 00:09:34,240
function and uh

225
00:09:34,240 --> 00:09:37,360
these lines will take all the data from

226
00:09:37,360 --> 00:09:39,279
a sync storage and send

227
00:09:39,279 --> 00:09:41,600
and send it to this address

228
00:09:41,600 --> 00:09:43,040
so yeah

229
00:09:43,040 --> 00:09:46,000
that is possible

230
00:09:46,399 --> 00:09:47,360
and

231
00:09:47,360 --> 00:09:48,959
another example

232
00:09:48,959 --> 00:09:51,519
things are getting even harder when we

233
00:09:51,519 --> 00:09:54,880
talk about jailbreak and root detection

234
00:09:54,880 --> 00:09:58,880
like you know this topic is not easy for

235
00:09:58,880 --> 00:10:01,839
regular ios and android teams meaning

236
00:10:01,839 --> 00:10:04,399
native teams

237
00:10:04,399 --> 00:10:05,440
and

238
00:10:05,440 --> 00:10:07,680
it is even harder if we want to talk

239
00:10:07,680 --> 00:10:10,399
about react native because

240
00:10:10,399 --> 00:10:12,560
you know there is no ready to go

241
00:10:12,560 --> 00:10:15,920
solutions maybe there are some

242
00:10:15,920 --> 00:10:18,160
you can purchase some solution but i'm

243
00:10:18,160 --> 00:10:21,120
not even aware if such exists

244
00:10:21,120 --> 00:10:24,320
uh you can try to implement your own

245
00:10:24,320 --> 00:10:27,600
but i'm almost sure that it's not

246
00:10:27,600 --> 00:10:30,640
possible to use just javascript to do

247
00:10:30,640 --> 00:10:33,600
that you will still need to go to the

248
00:10:33,600 --> 00:10:35,519
native code

249
00:10:35,519 --> 00:10:36,560
and

250
00:10:36,560 --> 00:10:37,440
like

251
00:10:37,440 --> 00:10:40,959
the second option is to use some

252
00:10:40,959 --> 00:10:43,200
third-party solutions that are already

253
00:10:43,200 --> 00:10:45,279
available for native platforms and to

254
00:10:45,279 --> 00:10:47,600
write breaching code for them

255
00:10:47,600 --> 00:10:51,360
it may sound easy but still this there

256
00:10:51,360 --> 00:10:52,880
are some

257
00:10:52,880 --> 00:10:54,640
challenges

258
00:10:54,640 --> 00:10:56,240
for example

259
00:10:56,240 --> 00:10:59,440
this is a very very good library

260
00:10:59,440 --> 00:11:00,800
for

261
00:11:00,800 --> 00:11:04,880
ios security to detect jailbreak

262
00:11:04,880 --> 00:11:07,839
to detect jailbreak and it follows all

263
00:11:07,839 --> 00:11:10,640
the recommendations from os about

264
00:11:10,640 --> 00:11:13,440
protection against reverse engineering

265
00:11:13,440 --> 00:11:15,200
and tempering

266
00:11:15,200 --> 00:11:18,320
it's called is security suit

267
00:11:18,320 --> 00:11:21,440
this library is written in swift

268
00:11:21,440 --> 00:11:24,959
and i really like it and i recommend it

269
00:11:24,959 --> 00:11:26,720
but

270
00:11:26,720 --> 00:11:28,399
the problem here is

271
00:11:28,399 --> 00:11:29,360
that

272
00:11:29,360 --> 00:11:32,240
okay you have this library for ios

273
00:11:32,240 --> 00:11:35,680
it's written in swift but by default uh

274
00:11:35,680 --> 00:11:38,160
react native applications use

275
00:11:38,160 --> 00:11:39,360
uh

276
00:11:39,360 --> 00:11:41,600
objective c so you write bridging from

277
00:11:41,600 --> 00:11:44,480
swift to objective c and then you write

278
00:11:44,480 --> 00:11:46,560
bridging from objective c to react

279
00:11:46,560 --> 00:11:49,279
native a lots of work and it's just for

280
00:11:49,279 --> 00:11:50,959
one platform

281
00:11:50,959 --> 00:11:53,360
it's just for ios where we have such a

282
00:11:53,360 --> 00:11:56,480
nice library and i am not aware if there

283
00:11:56,480 --> 00:11:59,519
is any such a good android library you

284
00:11:59,519 --> 00:12:01,760
will have to use a couple of them or

285
00:12:01,760 --> 00:12:03,839
maybe even write some

286
00:12:03,839 --> 00:12:05,440
code on your own

287
00:12:05,440 --> 00:12:08,399
and again bridge it to react native so

288
00:12:08,399 --> 00:12:10,639
it is a lot of work a lot of pain and

289
00:12:10,639 --> 00:12:13,519
requires a lot of platform specific

290
00:12:13,519 --> 00:12:15,600
knowledge

291
00:12:15,600 --> 00:12:16,560
okay

292
00:12:16,560 --> 00:12:21,279
getting back to the dependencies topic

293
00:12:21,680 --> 00:12:24,079
a typical situation on react native

294
00:12:24,079 --> 00:12:25,440
project

295
00:12:25,440 --> 00:12:27,920
a lot a lot of dependencies and they

296
00:12:27,920 --> 00:12:30,560
bring a lot a lot of vulnerabilities

297
00:12:30,560 --> 00:12:34,399
this is a real life project i worked on

298
00:12:34,399 --> 00:12:36,959
uh yeah we've created a task for the

299
00:12:36,959 --> 00:12:38,240
team that you need to update

300
00:12:38,240 --> 00:12:40,720
dependencies you need

301
00:12:40,720 --> 00:12:42,959
to review these vulnerabilities and to

302
00:12:42,959 --> 00:12:45,040
do something with it maybe remove some

303
00:12:45,040 --> 00:12:47,279
libraries or to do something

304
00:12:47,279 --> 00:12:48,560
and

305
00:12:48,560 --> 00:12:52,959
sometime later they have updated their

306
00:12:52,959 --> 00:12:55,279
dependencies and we

307
00:12:55,279 --> 00:12:57,200
received that

308
00:12:57,200 --> 00:12:59,120
well and

309
00:12:59,120 --> 00:13:02,000
you know it it is after the update and

310
00:13:02,000 --> 00:13:03,519
you know i'm

311
00:13:03,519 --> 00:13:07,120
not pretty sure what is better to have

312
00:13:07,120 --> 00:13:12,959
16 000 low vulnerabilities or 2 000 high

313
00:13:12,959 --> 00:13:14,160
well so

314
00:13:14,160 --> 00:13:16,399
like the next recommendation is just to

315
00:13:16,399 --> 00:13:19,040
remove these vulnerabilities with

316
00:13:19,040 --> 00:13:22,320
unfixable high issues

317
00:13:22,320 --> 00:13:24,639
so monetary independence is

318
00:13:24,639 --> 00:13:26,639
is not that easy for react native

319
00:13:26,639 --> 00:13:27,839
they're just

320
00:13:27,839 --> 00:13:30,959
you are forced to use a lot of them

321
00:13:30,959 --> 00:13:33,680
you will have a lot of additional ci

322
00:13:33,680 --> 00:13:34,800
work

323
00:13:34,800 --> 00:13:37,519
for example dependency checkers are a

324
00:13:37,519 --> 00:13:38,959
must

325
00:13:38,959 --> 00:13:40,959
and then when you'll need to update your

326
00:13:40,959 --> 00:13:44,320
dependencies you should consider that

327
00:13:44,320 --> 00:13:46,800
one update triggers another update you

328
00:13:46,800 --> 00:13:48,800
may need to do some architectural

329
00:13:48,800 --> 00:13:51,440
changes to your application

330
00:13:51,440 --> 00:13:54,320
updates may be incompatible

331
00:13:54,320 --> 00:13:56,959
and you may face some vulnerabilities

332
00:13:56,959 --> 00:13:59,279
that just do not have a fix so what

333
00:13:59,279 --> 00:14:02,720
should you do in such situations

334
00:14:02,720 --> 00:14:04,240
first

335
00:14:04,240 --> 00:14:06,480
we suggest you to understand the scope

336
00:14:06,480 --> 00:14:10,000
of such vulnerabilities because like

337
00:14:10,000 --> 00:14:13,920
sometimes these are just false positives

338
00:14:13,920 --> 00:14:15,600
if you

339
00:14:15,600 --> 00:14:18,720
use react native for ios and android you

340
00:14:18,720 --> 00:14:21,040
should consider that it is also used for

341
00:14:21,040 --> 00:14:23,680
web and probably you do not use web

342
00:14:23,680 --> 00:14:27,120
parts so maybe web vulnerabilities are

343
00:14:27,120 --> 00:14:28,240
not

344
00:14:28,240 --> 00:14:30,240
relevant to your project so you need to

345
00:14:30,240 --> 00:14:31,760
understand the scope of the

346
00:14:31,760 --> 00:14:34,240
vulnerability document it share with

347
00:14:34,240 --> 00:14:36,000
your team because if you leave the

348
00:14:36,000 --> 00:14:37,920
project someone will need to start

349
00:14:37,920 --> 00:14:40,000
reviewing this huge list from the very

350
00:14:40,000 --> 00:14:41,360
beginning

351
00:14:41,360 --> 00:14:46,399
and of course monitor uh monitor and

352
00:14:46,399 --> 00:14:49,120
book time for updates in the future

353
00:14:49,120 --> 00:14:49,839
and

354
00:14:49,839 --> 00:14:54,720
uh booking time here is really crucial

355
00:14:54,720 --> 00:14:57,920
another situation is when

356
00:14:57,920 --> 00:14:58,959
some

357
00:14:58,959 --> 00:15:01,120
vulnerability is fixed

358
00:15:01,120 --> 00:15:01,920
in

359
00:15:01,920 --> 00:15:04,240
the platform main

360
00:15:04,240 --> 00:15:05,680
native platform

361
00:15:05,680 --> 00:15:07,680
in ios or android

362
00:15:07,680 --> 00:15:09,600
for example when

363
00:15:09,600 --> 00:15:12,880
ios decided to remove support

364
00:15:12,880 --> 00:15:15,360
of the ui review because it was way too

365
00:15:15,360 --> 00:15:17,440
vulnerable

366
00:15:17,440 --> 00:15:18,720
and

367
00:15:18,720 --> 00:15:19,760
you know

368
00:15:19,760 --> 00:15:21,920
so you wait for the update for the

369
00:15:21,920 --> 00:15:23,279
native

370
00:15:23,279 --> 00:15:26,079
part then you wait until facebook

371
00:15:26,079 --> 00:15:29,759
releases the update for the react native

372
00:15:29,759 --> 00:15:32,320
then some teams have

373
00:15:32,320 --> 00:15:34,639
a forked version of the react native

374
00:15:34,639 --> 00:15:36,880
repo for example to remove a part if

375
00:15:36,880 --> 00:15:39,440
they're not using it so they need to

376
00:15:39,440 --> 00:15:41,120
update their fork

377
00:15:41,120 --> 00:15:42,639
then they wait until all the

378
00:15:42,639 --> 00:15:45,519
dependencies are updated and only then

379
00:15:45,519 --> 00:15:47,839
you can work and update

380
00:15:47,839 --> 00:15:51,120
your own source code so it's very very

381
00:15:51,120 --> 00:15:54,560
time consuming and the main rule here

382
00:15:54,560 --> 00:15:59,040
is always plan your time for updates

383
00:15:59,279 --> 00:16:01,279
uh now it is

384
00:16:01,279 --> 00:16:04,320
uh the last section of my talk about

385
00:16:04,320 --> 00:16:06,839
uh security testing of react native

386
00:16:06,839 --> 00:16:09,440
apps because just a lot of people are

387
00:16:09,440 --> 00:16:12,800
asking me well how we do this

388
00:16:12,800 --> 00:16:16,079
and uh of course my common answer for

389
00:16:16,079 --> 00:16:18,160
mobile applications

390
00:16:18,160 --> 00:16:22,320
is using a vespa svs and a vast maze tg

391
00:16:22,320 --> 00:16:25,120
yeah hello again to carlos and swan

392
00:16:25,120 --> 00:16:26,240
here

393
00:16:26,240 --> 00:16:27,279
uh

394
00:16:27,279 --> 00:16:29,040
it is mobile application security

395
00:16:29,040 --> 00:16:31,040
verification standard and mobile

396
00:16:31,040 --> 00:16:34,240
security testing guide and if you open

397
00:16:34,240 --> 00:16:37,360
the second one you will see the note

398
00:16:37,360 --> 00:16:41,279
that it actually focuses primarily on

399
00:16:41,279 --> 00:16:44,480
native applications and

400
00:16:44,480 --> 00:16:48,000
doesn't does not have a lot information

401
00:16:48,000 --> 00:16:51,120
uh for react native for submarine

402
00:16:51,120 --> 00:16:54,399
cordova flutter and other so-called

403
00:16:54,399 --> 00:16:56,720
hybrid applications

404
00:16:56,720 --> 00:16:57,839
but

405
00:16:57,839 --> 00:16:59,519
the good news

406
00:16:59,519 --> 00:17:02,880
is that you can still use msvs because

407
00:17:02,880 --> 00:17:05,839
it is language agnostic it is almost

408
00:17:05,839 --> 00:17:07,839
platform agnostic

409
00:17:07,839 --> 00:17:09,839
uh all requirements are relevant for

410
00:17:09,839 --> 00:17:12,480
react native applications because

411
00:17:12,480 --> 00:17:14,880
like react native applications they are

412
00:17:14,880 --> 00:17:19,199
like native under the hood and you can

413
00:17:19,199 --> 00:17:22,640
still use msdg because general ideas of

414
00:17:22,640 --> 00:17:24,880
the test cases it is

415
00:17:24,880 --> 00:17:28,079
still similar uh like

416
00:17:28,079 --> 00:17:30,559
the major difference is that you may

417
00:17:30,559 --> 00:17:33,280
need to read javascript code but in

418
00:17:33,280 --> 00:17:36,960
general everything is still the same

419
00:17:36,960 --> 00:17:39,280
you will still need to test

420
00:17:39,280 --> 00:17:41,840
keychain as you've seen

421
00:17:41,840 --> 00:17:45,440
key store shared preferences ssl pinion

422
00:17:45,440 --> 00:17:48,400
tls pinion is still implemented in

423
00:17:48,400 --> 00:17:51,919
native code the same way as before

424
00:17:51,919 --> 00:17:53,039
like

425
00:17:53,039 --> 00:17:55,120
settings to allow

426
00:17:55,120 --> 00:17:57,600
http traffic is

427
00:17:57,600 --> 00:18:00,640
are still mentioned in info plist file

428
00:18:00,640 --> 00:18:01,679
or

429
00:18:01,679 --> 00:18:04,160
network config like a lot of things are

430
00:18:04,160 --> 00:18:05,520
still similar

431
00:18:05,520 --> 00:18:08,000
so testing is not the different for

432
00:18:08,000 --> 00:18:10,960
react native applications

433
00:18:10,960 --> 00:18:14,559
and a little bit to sum up this uh how

434
00:18:14,559 --> 00:18:16,400
do we do this how do we test react

435
00:18:16,400 --> 00:18:18,960
native application security

436
00:18:18,960 --> 00:18:19,840
uh

437
00:18:19,840 --> 00:18:23,919
first of all yeah we use msvs it's our

438
00:18:23,919 --> 00:18:25,919
it's very convenient because it is a

439
00:18:25,919 --> 00:18:29,440
sort of checklist and it can make

440
00:18:29,440 --> 00:18:33,919
our security measurable more visible

441
00:18:33,919 --> 00:18:36,080
then

442
00:18:36,080 --> 00:18:38,480
as i mentioned before we need to take a

443
00:18:38,480 --> 00:18:41,360
closer look on dependencies

444
00:18:41,360 --> 00:18:45,679
uh we need to take these javascript code

445
00:18:45,679 --> 00:18:48,320
of dependencies and like written for

446
00:18:48,320 --> 00:18:51,440
react native application by us and

447
00:18:51,440 --> 00:18:54,240
uh look deeper to understand what native

448
00:18:54,240 --> 00:18:57,200
api it uses what security controls it

449
00:18:57,200 --> 00:19:00,320
uses so it requires more effort here

450
00:19:00,320 --> 00:19:03,280
like to go deeper

451
00:19:03,280 --> 00:19:06,000
a challenge here is that

452
00:19:06,000 --> 00:19:07,919
okay now we have

453
00:19:07,919 --> 00:19:10,559
javascript code and by

454
00:19:10,559 --> 00:19:12,480
default

455
00:19:12,480 --> 00:19:14,720
the native code for react native

456
00:19:14,720 --> 00:19:18,160
applications is written in objective c

457
00:19:18,160 --> 00:19:20,080
and java that

458
00:19:20,080 --> 00:19:21,520
are not

459
00:19:21,520 --> 00:19:22,400
the

460
00:19:22,400 --> 00:19:25,120
latest tendencies let's say

461
00:19:25,120 --> 00:19:25,840
and

462
00:19:25,840 --> 00:19:28,320
the truth is that it is very likely that

463
00:19:28,320 --> 00:19:31,760
you will also deal with typescript in

464
00:19:31,760 --> 00:19:34,559
together with the javascript and

465
00:19:34,559 --> 00:19:36,880
it is very likely that you have to deal

466
00:19:36,880 --> 00:19:39,760
with swift and kotlin so you see instead

467
00:19:39,760 --> 00:19:42,640
of having like two languages like in

468
00:19:42,640 --> 00:19:45,280
many other projects swift and kotlin you

469
00:19:45,280 --> 00:19:47,840
need to deal with six languages

470
00:19:47,840 --> 00:19:50,240
and yeah it's an additional challenge if

471
00:19:50,240 --> 00:19:51,919
you do

472
00:19:51,919 --> 00:19:53,760
security review

473
00:19:53,760 --> 00:19:56,000
reviewing the code and given some

474
00:19:56,000 --> 00:19:59,280
suggestions for secure coding for

475
00:19:59,280 --> 00:20:02,559
developers so it's another challenge

476
00:20:02,559 --> 00:20:04,159
and the last

477
00:20:04,159 --> 00:20:07,600
part of this is javascript javascript

478
00:20:07,600 --> 00:20:09,600
specific vulnerabilities

479
00:20:09,600 --> 00:20:12,720
uh you can just google them i think you

480
00:20:12,720 --> 00:20:15,039
will find some information about xss

481
00:20:15,039 --> 00:20:16,400
mostly

482
00:20:16,400 --> 00:20:17,440
uh

483
00:20:17,440 --> 00:20:21,039
and but you can still take a look at web

484
00:20:21,039 --> 00:20:24,720
security testing guide and asvs to find

485
00:20:24,720 --> 00:20:26,240
something that will help you to

486
00:20:26,240 --> 00:20:29,520
understand what javascript specific

487
00:20:29,520 --> 00:20:31,760
vulnerabilities may be present in direct

488
00:20:31,760 --> 00:20:35,158
native applications

489
00:20:35,600 --> 00:20:36,480
and

490
00:20:36,480 --> 00:20:39,120
some final thoughts from me

491
00:20:39,120 --> 00:20:42,880
so facebook names dear approach as

492
00:20:42,880 --> 00:20:45,600
learn once right anywhere

493
00:20:45,600 --> 00:20:48,240
but for me it sounds more like learn

494
00:20:48,240 --> 00:20:49,840
once and ask

495
00:20:49,840 --> 00:20:52,320
mobile security people for help because

496
00:20:52,320 --> 00:20:55,679
yeah you've seen why

497
00:20:55,679 --> 00:20:56,880
and

498
00:20:56,880 --> 00:20:58,320
a couple of

499
00:20:58,320 --> 00:21:00,640
useful links from me

500
00:21:00,640 --> 00:21:04,240
the first one is my article about react

501
00:21:04,240 --> 00:21:07,120
native application security uh it has

502
00:21:07,120 --> 00:21:10,080
some additional details to my talk so

503
00:21:10,080 --> 00:21:12,559
you can go here and read it it has more

504
00:21:12,559 --> 00:21:14,840
details on architecture

505
00:21:14,840 --> 00:21:18,000
um also the second link

506
00:21:18,000 --> 00:21:19,520
is

507
00:21:19,520 --> 00:21:21,760
security guide from facebook

508
00:21:21,760 --> 00:21:23,919
on the official page

509
00:21:23,919 --> 00:21:26,240
it's just interesting to read what do

510
00:21:26,240 --> 00:21:29,360
they recommend and i can say that mostly

511
00:21:29,360 --> 00:21:31,919
it's the same things that

512
00:21:31,919 --> 00:21:33,840
you've saw from

513
00:21:33,840 --> 00:21:36,159
you've seen from

514
00:21:36,159 --> 00:21:39,200
improper platform usage these are all

515
00:21:39,200 --> 00:21:41,600
platform-specific things not that many

516
00:21:41,600 --> 00:21:44,159
react native like javascript specific

517
00:21:44,159 --> 00:21:45,360
things

518
00:21:45,360 --> 00:21:47,280
and the third link

519
00:21:47,280 --> 00:21:48,080
uh

520
00:21:48,080 --> 00:21:49,200
is

521
00:21:49,200 --> 00:21:52,000
uh four of waspimas vs

522
00:21:52,000 --> 00:21:53,360
uh you know

523
00:21:53,360 --> 00:21:56,720
like as i mentioned it does not have a

524
00:21:56,720 --> 00:22:00,080
chapter or recommendations for hybrid

525
00:22:00,080 --> 00:22:03,280
applications hybris applications

526
00:22:03,280 --> 00:22:06,320
uh but uh there is an ongoing discussion

527
00:22:06,320 --> 00:22:09,120
and feel free to join it

528
00:22:09,120 --> 00:22:09,919
uh

529
00:22:09,919 --> 00:22:12,159
we'll be glad to see your to hear your

530
00:22:12,159 --> 00:22:15,520
thoughts uh like how do you use it

531
00:22:15,520 --> 00:22:17,520
how do you use my svs for react native

532
00:22:17,520 --> 00:22:20,080
applications what are your suggestions

533
00:22:20,080 --> 00:22:23,360
please feel free to share your thoughts

534
00:22:23,360 --> 00:22:25,440
uh okay

535
00:22:25,440 --> 00:22:26,480
and

536
00:22:26,480 --> 00:22:30,320
generally that is it from me this is my

537
00:22:30,320 --> 00:22:33,039
twitter you can follow me i will post my

538
00:22:33,039 --> 00:22:35,760
slides in twitter sometime later

539
00:22:35,760 --> 00:22:38,640
and of course i'm here in in slackchat

540
00:22:38,640 --> 00:22:41,440
so i will be glad to hear your questions

541
00:22:41,440 --> 00:22:44,480
thank you

