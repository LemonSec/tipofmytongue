1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:07,919 --> 00:00:10,240
um welcome everyone good morning good

3
00:00:10,240 --> 00:00:12,559
afternoon and good evening from

4
00:00:12,559 --> 00:00:14,639
uh wherever you are

5
00:00:14,639 --> 00:00:16,160
this talk is going to be about

6
00:00:16,160 --> 00:00:17,920
kubernetes security attacking and

7
00:00:17,920 --> 00:00:21,039
defending kubernetes clusters um

8
00:00:21,039 --> 00:00:23,920
as uh as ann said my name is magna logan

9
00:00:23,920 --> 00:00:26,000
and i work for trend micro doing

10
00:00:26,000 --> 00:00:28,320
security research

11
00:00:28,320 --> 00:00:31,119
so just a little bit about myself as i

12
00:00:31,119 --> 00:00:33,360
said i work at trend micro i'm part of

13
00:00:33,360 --> 00:00:35,520
the cloud and container security team

14
00:00:35,520 --> 00:00:37,840
i'm also a member of the cncf tag

15
00:00:37,840 --> 00:00:40,160
security team which is the

16
00:00:40,160 --> 00:00:42,320
uh the group inside the cloud native

17
00:00:42,320 --> 00:00:44,320
computing foundation that focuses on

18
00:00:44,320 --> 00:00:46,719
security matters for the cloud native

19
00:00:46,719 --> 00:00:48,000
applications

20
00:00:48,000 --> 00:00:50,879
i've been involved with oasp since 2011

21
00:00:50,879 --> 00:00:53,600
i led this oas paraiba chapter back in

22
00:00:53,600 --> 00:00:56,239
brazil for five years and then being

23
00:00:56,239 --> 00:00:58,320
involved in different chapters and

24
00:00:58,320 --> 00:01:00,320
different projects as well

25
00:01:00,320 --> 00:01:02,640
i also have a personal blog where i post

26
00:01:02,640 --> 00:01:06,640
articles uh uh regularly uh there's also

27
00:01:06,640 --> 00:01:09,520
all my con contact information there and

28
00:01:09,520 --> 00:01:12,320
my all my previous stocks as slides or

29
00:01:12,320 --> 00:01:14,880
videos since 2011 as well when i started

30
00:01:14,880 --> 00:01:17,759
doing some uh public speaking in in

31
00:01:17,759 --> 00:01:20,080
conferences

32
00:01:20,080 --> 00:01:21,119
okay so

33
00:01:21,119 --> 00:01:23,280
this is our agenda for today i'll try to

34
00:01:23,280 --> 00:01:24,159
cover

35
00:01:24,159 --> 00:01:28,000
as much as i can in 25 30 minutes

36
00:01:28,000 --> 00:01:30,720
uh but but yeah basically we're we're

37
00:01:30,720 --> 00:01:32,799
going to talk about kubernetes attacks

38
00:01:32,799 --> 00:01:35,600
and and how to understand what attackers

39
00:01:35,600 --> 00:01:37,840
are doing in those environments and and

40
00:01:37,840 --> 00:01:39,040
how can you

41
00:01:39,040 --> 00:01:42,240
uh protect yourself from those

42
00:01:42,240 --> 00:01:44,240
famous attacks

43
00:01:44,240 --> 00:01:46,399
uh before i start i just want to say

44
00:01:46,399 --> 00:01:47,680
that

45
00:01:47,680 --> 00:01:49,200
if you're if you're beginning your

46
00:01:49,200 --> 00:01:51,200
kubernetes journey or if you're starting

47
00:01:51,200 --> 00:01:54,320
your research in kubernetes security i

48
00:01:54,320 --> 00:01:57,840
created this github uh repository that's

49
00:01:57,840 --> 00:02:00,240
uh open and available to everyone that's

50
00:02:00,240 --> 00:02:02,159
called the awesome kubernetes security

51
00:02:02,159 --> 00:02:04,719
list has a lot of materials books

52
00:02:04,719 --> 00:02:08,000
presentations slides and a lot of uh

53
00:02:08,000 --> 00:02:09,840
interesting things not just for

54
00:02:09,840 --> 00:02:12,400
kubernetes security but also for someone

55
00:02:12,400 --> 00:02:14,879
starting their their kubernetes journey

56
00:02:14,879 --> 00:02:16,640
uh because you need to understand the

57
00:02:16,640 --> 00:02:19,280
technology first so that you can focus

58
00:02:19,280 --> 00:02:22,239
on security later right so uh i think

59
00:02:22,239 --> 00:02:24,000
that's a really awesome project that i

60
00:02:24,000 --> 00:02:27,360
started since uh october last year and

61
00:02:27,360 --> 00:02:29,440
it's been growing really fast

62
00:02:29,440 --> 00:02:32,319
so feel free to star and fork it and and

63
00:02:32,319 --> 00:02:34,080
submit any other links that you might

64
00:02:34,080 --> 00:02:36,959
have

65
00:02:36,959 --> 00:02:39,519
so yeah um this presentation as we're

66
00:02:39,519 --> 00:02:41,519
going to talk about attacks right we

67
00:02:41,519 --> 00:02:43,120
have to mention the miter attack

68
00:02:43,120 --> 00:02:46,000
framework which is uh

69
00:02:46,000 --> 00:02:48,239
uh globally accessible knowledge base

70
00:02:48,239 --> 00:02:50,800
right of opposing tactics and techniques

71
00:02:50,800 --> 00:02:52,879
based on real world scenarios

72
00:02:52,879 --> 00:02:55,440
and it's used as a basis for development

73
00:02:55,440 --> 00:02:58,000
of specific models and methodologies in

74
00:02:58,000 --> 00:02:59,760
many different sectors

75
00:02:59,760 --> 00:03:01,840
and what was interesting

76
00:03:01,840 --> 00:03:04,720
uh to us when we started doing cloud and

77
00:03:04,720 --> 00:03:07,040
container research was

78
00:03:07,040 --> 00:03:09,599
yeah there was a miter attack framework

79
00:03:09,599 --> 00:03:12,560
for the cloud but there was none for

80
00:03:12,560 --> 00:03:16,480
containers until this year right so

81
00:03:16,480 --> 00:03:17,680
um

82
00:03:17,680 --> 00:03:20,959
mitre started this this kind of call to

83
00:03:20,959 --> 00:03:21,840
uh

84
00:03:21,840 --> 00:03:24,640
to the community asking for

85
00:03:24,640 --> 00:03:27,840
uh for help and for data uh related to

86
00:03:27,840 --> 00:03:29,840
in the wild attacks or real world

87
00:03:29,840 --> 00:03:34,000
scenarios that uh could could be used to

88
00:03:34,000 --> 00:03:35,599
create this kind of

89
00:03:35,599 --> 00:03:38,400
uh mitre attack matrix for containers

90
00:03:38,400 --> 00:03:40,239
right

91
00:03:40,239 --> 00:03:43,280
but before that there was one uh matrix

92
00:03:43,280 --> 00:03:45,120
that was released by microsoft but the

93
00:03:45,120 --> 00:03:47,760
guys at azure are based on what they've

94
00:03:47,760 --> 00:03:50,400
seen in their own environment so mostly

95
00:03:50,400 --> 00:03:53,280
aks and and their kubernetes managed

96
00:03:53,280 --> 00:03:54,959
services

97
00:03:54,959 --> 00:03:57,040
and then they released a new updated

98
00:03:57,040 --> 00:04:00,080
version this uh this year as well this

99
00:04:00,080 --> 00:04:02,000
is not an official miter matrix but it

100
00:04:02,000 --> 00:04:03,840
can give you a

101
00:04:03,840 --> 00:04:06,560
great overview if you're looking to

102
00:04:06,560 --> 00:04:09,200
deploying kubernetes on azure and

103
00:04:09,200 --> 00:04:11,920
understanding okay what are the main uh

104
00:04:11,920 --> 00:04:13,760
techniques that are tucker's attackers

105
00:04:13,760 --> 00:04:16,478
are using to compromise my environment

106
00:04:16,478 --> 00:04:17,120
in

107
00:04:17,120 --> 00:04:19,839
azure right

108
00:04:19,839 --> 00:04:23,919
so from december last year to um

109
00:04:23,919 --> 00:04:26,000
to april this year

110
00:04:26,000 --> 00:04:28,000
we started working with mitre and not

111
00:04:28,000 --> 00:04:31,360
just uh us as in try micro but other

112
00:04:31,360 --> 00:04:34,479
organizations as well providing data and

113
00:04:34,479 --> 00:04:36,639
and research information based on what

114
00:04:36,639 --> 00:04:38,560
we've seen in the wild what we've seen

115
00:04:38,560 --> 00:04:40,160
in our docker honeypots and our

116
00:04:40,160 --> 00:04:43,040
kubernetes and ipods and analyzing what

117
00:04:43,040 --> 00:04:45,680
attackers are doing right and so this

118
00:04:45,680 --> 00:04:46,880
was the

119
00:04:46,880 --> 00:04:49,680
the kind of the first version of the the

120
00:04:49,680 --> 00:04:51,840
miter attack for containers and i'd like

121
00:04:51,840 --> 00:04:54,240
to add that it's also about kubernetes

122
00:04:54,240 --> 00:04:55,759
because there are some techniques there

123
00:04:55,759 --> 00:04:58,240
that are very specific to orchestrator

124
00:04:58,240 --> 00:05:01,280
or kubernetes environments right so out

125
00:05:01,280 --> 00:05:04,160
of those 28 techniques we came up with

126
00:05:04,160 --> 00:05:06,560
uh i think was seven or eight uh

127
00:05:06,560 --> 00:05:09,759
techniques that we uh contributed to and

128
00:05:09,759 --> 00:05:11,759
two of those techniques were brand new

129
00:05:11,759 --> 00:05:14,080
ones techniques about uh attacks that

130
00:05:14,080 --> 00:05:16,400
haven't been seen in the wire or or

131
00:05:16,400 --> 00:05:17,280
weren't

132
00:05:17,280 --> 00:05:22,000
uh categorized in the mitre framework

133
00:05:22,000 --> 00:05:23,919
okay that's that's that's interesting

134
00:05:23,919 --> 00:05:26,960
but before we had that uh

135
00:05:26,960 --> 00:05:28,400
cool matrix

136
00:05:28,400 --> 00:05:31,199
uh we are we were already doing some

137
00:05:31,199 --> 00:05:33,600
modeling in kubernetes environments

138
00:05:33,600 --> 00:05:36,320
and uh here is the modeling that i did

139
00:05:36,320 --> 00:05:38,720
also based on the mitre attack framework

140
00:05:38,720 --> 00:05:41,120
as you can see there are the tactics on

141
00:05:41,120 --> 00:05:42,960
the left i don't know if you can see if

142
00:05:42,960 --> 00:05:45,840
it's a bit small there but basically uh

143
00:05:45,840 --> 00:05:48,479
looking into a scenario where there is a

144
00:05:48,479 --> 00:05:50,639
web application right and this web

145
00:05:50,639 --> 00:05:52,080
application is running inside a

146
00:05:52,080 --> 00:05:54,240
container or inside a pod in a

147
00:05:54,240 --> 00:05:56,960
kubernetes scenario and that application

148
00:05:56,960 --> 00:05:58,720
is exposed to the internet and has a

149
00:05:58,720 --> 00:06:00,560
vulnerability of remote command

150
00:06:00,560 --> 00:06:03,520
execution right and from there from that

151
00:06:03,520 --> 00:06:05,680
vulnerable application the attacker can

152
00:06:05,680 --> 00:06:08,639
compromise the uh the docker container

153
00:06:08,639 --> 00:06:10,720
and then get inside your cluster and try

154
00:06:10,720 --> 00:06:13,919
to move laterally or and compromise also

155
00:06:13,919 --> 00:06:16,479
uh your worker nodes or your cloud

156
00:06:16,479 --> 00:06:18,560
environment if you're running on that so

157
00:06:18,560 --> 00:06:20,560
we're gonna analyze this

158
00:06:20,560 --> 00:06:23,440
using this this model as a baseline

159
00:06:23,440 --> 00:06:26,319
we're going to analyze this uh scenario

160
00:06:26,319 --> 00:06:28,560
and see some common attacks that are

161
00:06:28,560 --> 00:06:32,080
possible in in this uh

162
00:06:32,080 --> 00:06:34,800
in kind of this scenario here and see

163
00:06:34,800 --> 00:06:37,199
later what we can do to avoid this from

164
00:06:37,199 --> 00:06:38,250
happening

165
00:06:38,250 --> 00:06:40,240
[Music]

166
00:06:40,240 --> 00:06:42,720
okay yeah this was kind of the the

167
00:06:42,720 --> 00:06:45,120
website that i created which i use for

168
00:06:45,120 --> 00:06:48,960
my uh modeling basically a vulnerable

169
00:06:48,960 --> 00:06:51,520
drupal web application from three years

170
00:06:51,520 --> 00:06:55,599
ago from version 8.5 and i just kind of

171
00:06:55,599 --> 00:06:57,680
made it a little bit interesting to to

172
00:06:57,680 --> 00:06:58,400
hack

173
00:06:58,400 --> 00:07:00,000
[Music]

174
00:07:00,000 --> 00:07:02,240
so the initial access right with the

175
00:07:02,240 --> 00:07:04,240
application since this is outdated

176
00:07:04,240 --> 00:07:07,520
systems uh it has a uh

177
00:07:07,520 --> 00:07:09,680
uh uh remote command execution

178
00:07:09,680 --> 00:07:12,639
vulnerability from the cv there that you

179
00:07:12,639 --> 00:07:13,759
can

180
00:07:13,759 --> 00:07:16,880
the exploit is available on the internet

181
00:07:16,880 --> 00:07:18,560
you can easily download and exploit that

182
00:07:18,560 --> 00:07:20,080
as well right

183
00:07:20,080 --> 00:07:22,639
this is one of the initial accesses

184
00:07:22,639 --> 00:07:25,840
uh possible in a kubernetes environment

185
00:07:25,840 --> 00:07:28,880
other two uh scenarios

186
00:07:28,880 --> 00:07:31,919
was the exposed dashboard for kubernetes

187
00:07:31,919 --> 00:07:33,919
which is not enabled by default anymore

188
00:07:33,919 --> 00:07:36,560
so that's not the case uh depending on

189
00:07:36,560 --> 00:07:38,479
the version of kubernetes that you have

190
00:07:38,479 --> 00:07:41,120
but there is also the cube api server

191
00:07:41,120 --> 00:07:44,639
and which is basically the the main

192
00:07:44,639 --> 00:07:48,400
entry point of all uh requests to the

193
00:07:48,400 --> 00:07:50,319
kubernetes and to the control plane

194
00:07:50,319 --> 00:07:51,840
right so

195
00:07:51,840 --> 00:07:54,560
um especially on managed service

196
00:07:54,560 --> 00:07:58,479
providers such as aws and azure and

197
00:07:58,479 --> 00:08:01,680
google you have to be aware of if if

198
00:08:01,680 --> 00:08:04,560
your kubernetes uh api server endpoint

199
00:08:04,560 --> 00:08:07,280
is public by default right some services

200
00:08:07,280 --> 00:08:09,759
like eks they are so

201
00:08:09,759 --> 00:08:11,360
like do you really need that do you

202
00:08:11,360 --> 00:08:13,599
really want if someone finds that api

203
00:08:13,599 --> 00:08:15,759
the endpoint do you really want them uh

204
00:08:15,759 --> 00:08:17,599
reaching that and finding information

205
00:08:17,599 --> 00:08:19,520
about your cluster the version of your

206
00:08:19,520 --> 00:08:22,240
kubernetes version of the the golang

207
00:08:22,240 --> 00:08:24,080
that's being used by your kubernetes as

208
00:08:24,080 --> 00:08:25,840
well so there is a lot of sensitive

209
00:08:25,840 --> 00:08:27,320
information there

210
00:08:27,320 --> 00:08:28,960
[Music]

211
00:08:28,960 --> 00:08:32,080
so here is the api endpoint just two

212
00:08:32,080 --> 00:08:34,640
examples there one is uh unmanaged

213
00:08:34,640 --> 00:08:37,919
kubernetes clusters so by default the

214
00:08:37,919 --> 00:08:41,039
api server runs on port 6443

215
00:08:41,039 --> 00:08:44,080
and the second example is a managed

216
00:08:44,080 --> 00:08:46,000
cluster running on eks as you can see

217
00:08:46,000 --> 00:08:49,200
from the url there and it runs on the uh

218
00:08:49,200 --> 00:08:52,240
for the port 443 by default

219
00:08:52,240 --> 00:08:54,240
um so from there depending on the

220
00:08:54,240 --> 00:08:56,399
permissions that you have you can either

221
00:08:56,399 --> 00:08:59,040
uh uh just get version information or

222
00:08:59,040 --> 00:09:00,959
health information which are the common

223
00:09:00,959 --> 00:09:03,680
uh public api endpoints but if that

224
00:09:03,680 --> 00:09:05,440
cluster is misconfigured right and it's

225
00:09:05,440 --> 00:09:07,839
not properly protected there are other

226
00:09:07,839 --> 00:09:11,279
things that you're able to do

227
00:09:12,480 --> 00:09:14,480
so one of interesting tools that are

228
00:09:14,480 --> 00:09:16,399
available if you if you don't know much

229
00:09:16,399 --> 00:09:18,640
about kubernetes and and you need to

230
00:09:18,640 --> 00:09:21,360
either uh exploit a kubernetes cluster

231
00:09:21,360 --> 00:09:23,279
or evaluate the security of your own

232
00:09:23,279 --> 00:09:26,800
cluster and this is uh this there is

233
00:09:26,800 --> 00:09:29,360
this tool called cube hunter which is an

234
00:09:29,360 --> 00:09:31,760
open source tool provided by aqua

235
00:09:31,760 --> 00:09:33,760
security and it helps you hunt for

236
00:09:33,760 --> 00:09:35,600
security weaknesses in kubernetes

237
00:09:35,600 --> 00:09:37,920
clusters it has uh

238
00:09:37,920 --> 00:09:41,040
kind of 37 uh rules or or vulnerability

239
00:09:41,040 --> 00:09:43,440
detections there are misconfigurations

240
00:09:43,440 --> 00:09:46,000
that help you get a better overview of

241
00:09:46,000 --> 00:09:48,839
the security of your

242
00:09:48,839 --> 00:09:52,399
cluster okay let's say yeah uh i was

243
00:09:52,399 --> 00:09:54,399
able to exploit that vulnerability that

244
00:09:54,399 --> 00:09:57,040
cve remote commands execution and i have

245
00:09:57,040 --> 00:10:00,240
access inside a container of the web

246
00:10:00,240 --> 00:10:02,880
application inside the pod right so here

247
00:10:02,880 --> 00:10:05,680
are some um sensitive information that i

248
00:10:05,680 --> 00:10:09,360
can uh find out or grab from that from

249
00:10:09,360 --> 00:10:12,560
that pod that would probably leverage me

250
00:10:12,560 --> 00:10:16,160
to move laterally and and find other uh

251
00:10:16,160 --> 00:10:18,399
entry points or escalate privileges

252
00:10:18,399 --> 00:10:20,560
something like that right so first thing

253
00:10:20,560 --> 00:10:22,640
is is the environment variables right if

254
00:10:22,640 --> 00:10:24,320
you check the kubernetes environment

255
00:10:24,320 --> 00:10:26,480
variables they're usually there for

256
00:10:26,480 --> 00:10:28,880
every pod and by default has information

257
00:10:28,880 --> 00:10:32,000
about the api server ip the port and

258
00:10:32,000 --> 00:10:34,399
other stuff that's running

259
00:10:34,399 --> 00:10:35,519
also

260
00:10:35,519 --> 00:10:38,240
on every pod there's a

261
00:10:38,240 --> 00:10:40,320
location where they they store the

262
00:10:40,320 --> 00:10:42,320
service account and the service account

263
00:10:42,320 --> 00:10:44,880
token and in that service account you

264
00:10:44,880 --> 00:10:46,720
can use to

265
00:10:46,720 --> 00:10:49,760
talk to the api server right so if you

266
00:10:49,760 --> 00:10:51,600
can if you can grab that information

267
00:10:51,600 --> 00:10:53,839
which is easily available once you have

268
00:10:53,839 --> 00:10:56,240
access to the pod then you can

269
00:10:56,240 --> 00:10:58,880
impersonate the cubelet and talk to the

270
00:10:58,880 --> 00:11:01,600
api server and there is also another

271
00:11:01,600 --> 00:11:03,120
tool that's uh

272
00:11:03,120 --> 00:11:06,320
available on github that's uh

273
00:11:06,320 --> 00:11:09,040
called a my container which is basically

274
00:11:09,040 --> 00:11:10,880
a tool that runs a bunch of checks and

275
00:11:10,880 --> 00:11:13,440
tells you if you're if you are in a

276
00:11:13,440 --> 00:11:15,839
container or kubernetes environment it

277
00:11:15,839 --> 00:11:18,320
checks for if if the secomp and app

278
00:11:18,320 --> 00:11:21,360
armor are enabled and also which

279
00:11:21,360 --> 00:11:24,320
capabilities you have on that container

280
00:11:24,320 --> 00:11:26,790
so that's that's pretty interesting

281
00:11:26,790 --> 00:11:28,320
[Music]

282
00:11:28,320 --> 00:11:29,040
so

283
00:11:29,040 --> 00:11:31,279
yeah another another uh possibility of

284
00:11:31,279 --> 00:11:33,680
attack and we've seen that in the wild

285
00:11:33,680 --> 00:11:37,200
in our uh in our honeypots is

286
00:11:37,200 --> 00:11:40,320
the kind of privilege escalation and and

287
00:11:40,320 --> 00:11:42,399
kind of breaking out of that container

288
00:11:42,399 --> 00:11:44,800
and that cluster right here is an

289
00:11:44,800 --> 00:11:47,760
example provided by uh duffy cooley from

290
00:11:47,760 --> 00:11:51,920
isovalent uh which deploys um

291
00:11:51,920 --> 00:11:54,240
basically a privileged container in the

292
00:11:54,240 --> 00:11:56,720
cluster allowing you to break out of

293
00:11:56,720 --> 00:11:57,519
that

294
00:11:57,519 --> 00:11:59,839
uh of that environment and accessing the

295
00:11:59,839 --> 00:12:02,160
worker nodes processes and files and

296
00:12:02,160 --> 00:12:03,760
everything right

297
00:12:03,760 --> 00:12:04,800
so

298
00:12:04,800 --> 00:12:07,760
one of the honey pots that we deployed

299
00:12:07,760 --> 00:12:10,399
in in the wild it took

300
00:12:10,399 --> 00:12:13,519
less than 24 hours for the attackers to

301
00:12:13,519 --> 00:12:16,800
compromise that a web application right

302
00:12:16,800 --> 00:12:19,279
get access to the worker nodes right

303
00:12:19,279 --> 00:12:21,120
escape escape the container and get

304
00:12:21,120 --> 00:12:23,360
access to the worker nodes and even

305
00:12:23,360 --> 00:12:25,760
after that they they were able to

306
00:12:25,760 --> 00:12:28,399
uh grab the api keys of the cloud

307
00:12:28,399 --> 00:12:30,880
environment through the

308
00:12:30,880 --> 00:12:33,279
instance metadata and they were able to

309
00:12:33,279 --> 00:12:37,760
deploy uh big big instances and to mine

310
00:12:37,760 --> 00:12:39,920
cryptocurrencies right so this is kind

311
00:12:39,920 --> 00:12:44,560
of 95 to 99 of the attacks out there for

312
00:12:44,560 --> 00:12:46,880
docker and kubernetes they usually

313
00:12:46,880 --> 00:12:48,399
either compromise your running

314
00:12:48,399 --> 00:12:51,040
containers to mine cryptocurrencies or

315
00:12:51,040 --> 00:12:54,240
they deploy uh other new containers or

316
00:12:54,240 --> 00:12:56,959
other instances to do that so that and

317
00:12:56,959 --> 00:12:58,320
you that's something that you need to be

318
00:12:58,320 --> 00:13:00,800
aware of

319
00:13:01,760 --> 00:13:04,560
okay so how can i um

320
00:13:04,560 --> 00:13:06,320
defend kubernetes right how can i

321
00:13:06,320 --> 00:13:09,040
contact my cluster from attackers isn't

322
00:13:09,040 --> 00:13:11,440
kubernetes secure by default where do i

323
00:13:11,440 --> 00:13:14,079
start right

324
00:13:15,600 --> 00:13:17,440
so basic thing the first thing that i

325
00:13:17,440 --> 00:13:19,200
mentioned in the beginning was the cube

326
00:13:19,200 --> 00:13:22,959
api server right if you can see here uh

327
00:13:22,959 --> 00:13:24,079
even though

328
00:13:24,079 --> 00:13:25,839
i search the

329
00:13:25,839 --> 00:13:28,480
the root endpoint here of the api server

330
00:13:28,480 --> 00:13:30,720
it already returns some information for

331
00:13:30,720 --> 00:13:33,200
me telling the api version the status

332
00:13:33,200 --> 00:13:35,519
and i can clearly see that this is a

333
00:13:35,519 --> 00:13:37,680
kubernetes server running there right in

334
00:13:37,680 --> 00:13:39,920
the ip and there are attackers

335
00:13:39,920 --> 00:13:41,839
monitoring the internet and you can find

336
00:13:41,839 --> 00:13:44,800
information on a showdown and senses and

337
00:13:44,800 --> 00:13:47,519
all those tools to find a public

338
00:13:47,519 --> 00:13:50,560
available servers that there is a lot of

339
00:13:50,560 --> 00:13:52,160
clusters exposed out there that

340
00:13:52,160 --> 00:13:55,040
shouldn't be right so you

341
00:13:55,040 --> 00:13:57,360
if you're not if there isn't a specific

342
00:13:57,360 --> 00:13:59,519
business need you shouldn't expose your

343
00:13:59,519 --> 00:14:03,010
cube api server to the internet

344
00:14:03,010 --> 00:14:04,160
[Music]

345
00:14:04,160 --> 00:14:06,959
another great guidance here is the cis

346
00:14:06,959 --> 00:14:09,519
kubernetes benchmark which was a is a

347
00:14:09,519 --> 00:14:11,920
document created by uh

348
00:14:11,920 --> 00:14:14,320
rory mccoon and liz rice and another

349
00:14:14,320 --> 00:14:17,199
many contributors and and they are uh

350
00:14:17,199 --> 00:14:18,880
security professionals in the cloud

351
00:14:18,880 --> 00:14:21,839
native world and it has like a hundred

352
00:14:21,839 --> 00:14:24,399
plus uh security checks for your

353
00:14:24,399 --> 00:14:26,000
kubernetes clusters and and the

354
00:14:26,000 --> 00:14:28,160
interesting is that

355
00:14:28,160 --> 00:14:31,920
it shows you it shows you how to check

356
00:14:31,920 --> 00:14:35,839
uh if that proper uh setting is enabled

357
00:14:35,839 --> 00:14:38,480
for for your cluster and if not if

358
00:14:38,480 --> 00:14:40,639
that's not the expected result it shows

359
00:14:40,639 --> 00:14:42,000
you also

360
00:14:42,000 --> 00:14:43,199
how to

361
00:14:43,199 --> 00:14:45,839
uh fix that and enable that checking

362
00:14:45,839 --> 00:14:46,880
right so

363
00:14:46,880 --> 00:14:48,800
that's really interesting and it has

364
00:14:48,800 --> 00:14:52,160
also specific documentations for eks and

365
00:14:52,160 --> 00:14:55,680
gke and i think aks for azure it should

366
00:14:55,680 --> 00:14:58,720
be uh out there soon

367
00:14:58,720 --> 00:15:00,959
of course you're not gonna probably not

368
00:15:00,959 --> 00:15:04,240
gonna do that uh uh manually and and at

369
00:15:04,240 --> 00:15:06,800
this is a wasp event we we're talking

370
00:15:06,800 --> 00:15:08,880
about devops and devsecops and

371
00:15:08,880 --> 00:15:10,720
automation so

372
00:15:10,720 --> 00:15:12,880
someone already solved that problem for

373
00:15:12,880 --> 00:15:16,880
you which was also a open source tool

374
00:15:16,880 --> 00:15:19,920
from aqua called cube bench which you

375
00:15:19,920 --> 00:15:22,240
target your kubernetes cluster and it

376
00:15:22,240 --> 00:15:25,279
runs all the checks that are recommended

377
00:15:25,279 --> 00:15:27,920
by the cis kubernetes benchmark and it

378
00:15:27,920 --> 00:15:31,920
sees if your uh if your cluster is uh

379
00:15:31,920 --> 00:15:33,759
is following those recommendations or

380
00:15:33,759 --> 00:15:36,240
not so there's like a pass or fail check

381
00:15:36,240 --> 00:15:37,600
and also

382
00:15:37,600 --> 00:15:40,399
um also like a warning and tells you

383
00:15:40,399 --> 00:15:42,480
what you need to fix so it's developed

384
00:15:42,480 --> 00:15:44,399
in go and it's also open source anyone

385
00:15:44,399 --> 00:15:46,959
can contribute to it

386
00:15:46,959 --> 00:15:48,880
here is a basic uh

387
00:15:48,880 --> 00:15:51,199
basic example of the output of the

388
00:15:51,199 --> 00:15:53,120
kubernetes benchmark as you can see here

389
00:15:53,120 --> 00:15:56,240
my cluster wasn't very uh compliant to

390
00:15:56,240 --> 00:15:58,480
those rules

391
00:15:58,480 --> 00:16:00,720
okay

392
00:16:02,880 --> 00:16:04,720
uh another thing that we need to be

393
00:16:04,720 --> 00:16:07,279
aware of is is and we we've been talking

394
00:16:07,279 --> 00:16:10,320
about uh uh supply chain attacks and

395
00:16:10,320 --> 00:16:12,480
s-bombs right and software composition

396
00:16:12,480 --> 00:16:16,480
analysis so even before you deploy a

397
00:16:16,480 --> 00:16:18,560
docker image or or any kind of a

398
00:16:18,560 --> 00:16:20,800
container image to your cluster you need

399
00:16:20,800 --> 00:16:23,120
to be aware of of the

400
00:16:23,120 --> 00:16:26,160
any kind of vulnerabilities uh that they

401
00:16:26,160 --> 00:16:28,720
may be there right so scanning that

402
00:16:28,720 --> 00:16:30,880
image for vulnerabilities or for any

403
00:16:30,880 --> 00:16:32,800
kind of misconfiguration or malicious

404
00:16:32,800 --> 00:16:36,480
software uh it should be also a step

405
00:16:36,480 --> 00:16:38,639
that you take before even deploying

406
00:16:38,639 --> 00:16:40,800
those in your in your cluster right so

407
00:16:40,800 --> 00:16:42,480
there are many tools out there that can

408
00:16:42,480 --> 00:16:43,839
do that for you

409
00:16:43,839 --> 00:16:46,399
even uh on depending on

410
00:16:46,399 --> 00:16:48,959
the container register that you're using

411
00:16:48,959 --> 00:16:51,120
they already ran some scans and and

412
00:16:51,120 --> 00:16:53,759
these are some of the the famous ones

413
00:16:53,759 --> 00:16:55,920
out there

414
00:16:55,920 --> 00:16:58,240
okay now yeah you scan the images that

415
00:16:58,240 --> 00:17:01,600
they are uh properly um

416
00:17:01,600 --> 00:17:02,959
properly scanned they don't have any

417
00:17:02,959 --> 00:17:06,160
kind of critical vulnerabilities and

418
00:17:06,160 --> 00:17:08,640
you need you deploy them right okay but

419
00:17:08,640 --> 00:17:10,959
what happens after they're deployed

420
00:17:10,959 --> 00:17:12,799
right what happens if there are any

421
00:17:12,799 --> 00:17:14,160
changes or

422
00:17:14,160 --> 00:17:16,480
for example in our attack scenario here

423
00:17:16,480 --> 00:17:17,679
the

424
00:17:17,679 --> 00:17:19,760
the web application the the container is

425
00:17:19,760 --> 00:17:21,839
compromised how do i know that something

426
00:17:21,839 --> 00:17:23,839
is going on

427
00:17:23,839 --> 00:17:26,240
so that's a bit tricky because

428
00:17:26,240 --> 00:17:27,280
on

429
00:17:27,280 --> 00:17:30,000
uh containers environments sometimes you

430
00:17:30,000 --> 00:17:32,320
don't have enough visibility with an

431
00:17:32,320 --> 00:17:35,280
agent installed on the node or unless

432
00:17:35,280 --> 00:17:37,600
you're using the new technology such as

433
00:17:37,600 --> 00:17:38,880
ebpf

434
00:17:38,880 --> 00:17:41,120
and also

435
00:17:41,120 --> 00:17:44,080
on managed services for kubernetes you

436
00:17:44,080 --> 00:17:46,559
usually don't have access to the control

437
00:17:46,559 --> 00:17:49,440
plane of that of that cluster right the

438
00:17:49,440 --> 00:17:51,600
the cloud provider manages that for you

439
00:17:51,600 --> 00:17:53,760
which is a good thing but it also is a

440
00:17:53,760 --> 00:17:55,520
bad thing because you don't have ssh

441
00:17:55,520 --> 00:17:57,840
access and you can't install agents to

442
00:17:57,840 --> 00:17:59,360
monitor that node for any kind of

443
00:17:59,360 --> 00:18:01,520
security issues right

444
00:18:01,520 --> 00:18:02,880
so that's why

445
00:18:02,880 --> 00:18:03,760
um

446
00:18:03,760 --> 00:18:07,280
uh here comes like falco which is a open

447
00:18:07,280 --> 00:18:09,760
source uh security tool

448
00:18:09,760 --> 00:18:11,520
from the the cloud native computing

449
00:18:11,520 --> 00:18:14,400
foundation was developed by sysdig

450
00:18:14,400 --> 00:18:17,840
and it uses uh kind of the ebpf

451
00:18:17,840 --> 00:18:20,880
technology to parse linux uh kernel

452
00:18:20,880 --> 00:18:22,880
cisco's at runtime right so it's

453
00:18:22,880 --> 00:18:25,039
basically the ids of cloud native

454
00:18:25,039 --> 00:18:27,440
applications it detects any kind of

455
00:18:27,440 --> 00:18:30,080
unexpected behavior in your cluster it's

456
00:18:30,080 --> 00:18:32,240
a rule-based engine right and you can

457
00:18:32,240 --> 00:18:34,480
create your own rules and it generates

458
00:18:34,480 --> 00:18:37,200
alerts based on those threat detected so

459
00:18:37,200 --> 00:18:39,679
once you have those containers running

460
00:18:39,679 --> 00:18:41,360
you should have something monitor

461
00:18:41,360 --> 00:18:43,919
something such as falco to monitor any

462
00:18:43,919 --> 00:18:45,679
kind of drift detection any kind of

463
00:18:45,679 --> 00:18:48,960
changes any kind of uh updates or tools

464
00:18:48,960 --> 00:18:51,600
be installed or or um

465
00:18:51,600 --> 00:18:54,160
programs being executed right processes

466
00:18:54,160 --> 00:18:56,559
being executed such as the ones like

467
00:18:56,559 --> 00:19:01,120
mining bitcoins or cryptocurrencies

468
00:19:01,760 --> 00:19:04,080
um other recommendations here more in

469
00:19:04,080 --> 00:19:07,679
general is uh um for your pods itself

470
00:19:07,679 --> 00:19:08,880
right there are three things that you

471
00:19:08,880 --> 00:19:11,200
need to be aware the pods in kubernetes

472
00:19:11,200 --> 00:19:14,160
is basically uh uh your containers but

473
00:19:14,160 --> 00:19:17,039
in the pods you can have one or more

474
00:19:17,039 --> 00:19:19,600
containers running on the same pod

475
00:19:19,600 --> 00:19:21,200
so the first thing is

476
00:19:21,200 --> 00:19:23,600
uh limit resources right you don't want

477
00:19:23,600 --> 00:19:26,160
your containers uh demanding more

478
00:19:26,160 --> 00:19:29,760
resources than your uh nodes can provide

479
00:19:29,760 --> 00:19:32,160
and then causing a denial of service on

480
00:19:32,160 --> 00:19:34,720
your node because of lack of resources

481
00:19:34,720 --> 00:19:37,600
so limiting that on your cluster is it's

482
00:19:37,600 --> 00:19:40,000
very important and it's a basic uh kind

483
00:19:40,000 --> 00:19:41,760
of uh

484
00:19:41,760 --> 00:19:44,400
verification as well as availability is

485
00:19:44,400 --> 00:19:46,720
part of of security right

486
00:19:46,720 --> 00:19:49,120
um other things that you can do is apply

487
00:19:49,120 --> 00:19:51,200
a security context right there are some

488
00:19:51,200 --> 00:19:53,520
settings there that you can uh configure

489
00:19:53,520 --> 00:19:57,039
on your pods that for example here i

490
00:19:57,039 --> 00:19:58,720
just bring three of them but there are

491
00:19:58,720 --> 00:20:01,200
much more allow privilege escalation

492
00:20:01,200 --> 00:20:03,120
equals false right i don't allow this

493
00:20:03,120 --> 00:20:05,919
process to escalate privileges uh read

494
00:20:05,919 --> 00:20:09,360
only root file system right set to true

495
00:20:09,360 --> 00:20:12,080
and run as known root right so uh as

496
00:20:12,080 --> 00:20:14,720
much as i think it's

497
00:20:14,720 --> 00:20:17,919
complicated to do we we don't want your

498
00:20:17,919 --> 00:20:21,120
uh uh our containers running as root

499
00:20:21,120 --> 00:20:23,760
right especially if they they are doing

500
00:20:23,760 --> 00:20:26,080
kind of sensitive tasks or have access

501
00:20:26,080 --> 00:20:28,540
to sensitive information

502
00:20:28,540 --> 00:20:30,799
[Music]

503
00:20:30,799 --> 00:20:32,559
um another thing with the pause that you

504
00:20:32,559 --> 00:20:36,640
can do is setting the the linux uh

505
00:20:36,640 --> 00:20:39,440
linux kernel security modules right

506
00:20:39,440 --> 00:20:42,960
yellow sm uh such as secomp armor and sc

507
00:20:42,960 --> 00:20:45,440
linux right so there are specific ones

508
00:20:45,440 --> 00:20:48,159
um that you can enable there and and at

509
00:20:48,159 --> 00:20:50,880
least setting one of those would greatly

510
00:20:50,880 --> 00:20:53,200
uh help your your security overall of

511
00:20:53,200 --> 00:20:55,440
your containers and avoid any kind of

512
00:20:55,440 --> 00:20:58,720
container breakout there

513
00:20:59,200 --> 00:21:01,120
so yeah the security context is

514
00:21:01,120 --> 00:21:03,760
interesting and but how do you scale

515
00:21:03,760 --> 00:21:05,360
that from there was something that i

516
00:21:05,360 --> 00:21:07,919
used that i was used for

517
00:21:07,919 --> 00:21:10,720
uh for that it was called the spot

518
00:21:10,720 --> 00:21:12,640
security policy but that's now being

519
00:21:12,640 --> 00:21:15,280
deprecated you could apply that policy

520
00:21:15,280 --> 00:21:17,360
without your security context to your

521
00:21:17,360 --> 00:21:18,640
health cluster

522
00:21:18,640 --> 00:21:21,039
um there is a new policy i think is

523
00:21:21,039 --> 00:21:23,520
coming up in the new kubernetes version

524
00:21:23,520 --> 00:21:25,039
already but there is also some

525
00:21:25,039 --> 00:21:28,480
alternatives and and you can use that to

526
00:21:28,480 --> 00:21:31,360
uh protect your cluster so how the plot

527
00:21:31,360 --> 00:21:34,720
security policy works it works as a

528
00:21:34,720 --> 00:21:37,360
admission controller right so what does

529
00:21:37,360 --> 00:21:39,200
that mean basically it controls the

530
00:21:39,200 --> 00:21:41,120
admission to the cluster right it's kind

531
00:21:41,120 --> 00:21:42,320
of the

532
00:21:42,320 --> 00:21:44,880
the security guard of a nightclub it

533
00:21:44,880 --> 00:21:48,080
checks if your uh container has been

534
00:21:48,080 --> 00:21:50,240
scanned checks if there are any critical

535
00:21:50,240 --> 00:21:52,240
vulnerabilities you can establish your

536
00:21:52,240 --> 00:21:55,679
own policies and see if it's coming from

537
00:21:55,679 --> 00:21:57,840
uh authorized registry and not being

538
00:21:57,840 --> 00:22:00,080
downloaded from docker hub or something

539
00:22:00,080 --> 00:22:02,400
like that right so you can do that with

540
00:22:02,400 --> 00:22:04,159
admission controllers

541
00:22:04,159 --> 00:22:06,240
on kubernetes

542
00:22:06,240 --> 00:22:08,559
other tools that are alternatives to a

543
00:22:08,559 --> 00:22:10,159
pod security policy that you can use

544
00:22:10,159 --> 00:22:12,720
they're also very famous there it's the

545
00:22:12,720 --> 00:22:17,060
zopa gatekeeper and also kyverno

546
00:22:17,060 --> 00:22:19,679
[Music]

547
00:22:19,679 --> 00:22:21,280
um

548
00:22:21,280 --> 00:22:23,919
one other thing that's really important

549
00:22:23,919 --> 00:22:26,799
on kubernetes and really hard to get it

550
00:22:26,799 --> 00:22:29,200
right and and really easy to

551
00:22:29,200 --> 00:22:31,200
make uh mistakes

552
00:22:31,200 --> 00:22:33,760
is the road based access control right

553
00:22:33,760 --> 00:22:36,480
just like many web applications that we

554
00:22:36,480 --> 00:22:39,280
use nowadays they use road based access

555
00:22:39,280 --> 00:22:43,280
control right kubernetes also does that

556
00:22:43,280 --> 00:22:45,360
now that's enabled by default with

557
00:22:45,360 --> 00:22:47,600
kubernetes before a couple versions it

558
00:22:47,600 --> 00:22:48,640
wasn't

559
00:22:48,640 --> 00:22:51,600
and all it all it does it creates four

560
00:22:51,600 --> 00:22:53,520
different objects and kubernetes

561
00:22:53,520 --> 00:22:56,320
allowing you to define a set of

562
00:22:56,320 --> 00:22:58,080
permissions and providing that to

563
00:22:58,080 --> 00:23:00,240
specific users

564
00:23:00,240 --> 00:23:01,120
so

565
00:23:01,120 --> 00:23:03,360
on the rbac or or row-based access

566
00:23:03,360 --> 00:23:06,400
control you have a role which is an

567
00:23:06,400 --> 00:23:07,919
object that contains rules and

568
00:23:07,919 --> 00:23:09,760
represents like a set of permissions

569
00:23:09,760 --> 00:23:12,159
within a namespace and you have a row

570
00:23:12,159 --> 00:23:14,720
binding which is basically this object

571
00:23:14,720 --> 00:23:17,280
grants the set of permissions from a row

572
00:23:17,280 --> 00:23:19,919
to one or more users right

573
00:23:19,919 --> 00:23:22,000
and the other two objects that you have

574
00:23:22,000 --> 00:23:23,760
is the cluster row and cluster row

575
00:23:23,760 --> 00:23:26,880
binding and which work kind of the same

576
00:23:26,880 --> 00:23:29,360
way as the roll and row binding but they

577
00:23:29,360 --> 00:23:31,520
apply those permissions applied to a

578
00:23:31,520 --> 00:23:34,320
cluster level right so in kubernetes we

579
00:23:34,320 --> 00:23:36,799
have something called namespaces which

580
00:23:36,799 --> 00:23:38,000
are basically

581
00:23:38,000 --> 00:23:40,480
kind of um folders

582
00:23:40,480 --> 00:23:42,559
that allows you to separate your

583
00:23:42,559 --> 00:23:44,480
projects it's logic it's a logical

584
00:23:44,480 --> 00:23:46,400
separation it's not there's no like kind

585
00:23:46,400 --> 00:23:48,480
of security boundaries

586
00:23:48,480 --> 00:23:52,159
related to it but but you can maybe have

587
00:23:52,159 --> 00:23:55,200
like a dev name space a qa a production

588
00:23:55,200 --> 00:23:58,080
name space or you can have a name space

589
00:23:58,080 --> 00:24:01,200
separated by different teams right

590
00:24:01,200 --> 00:24:03,600
and and so that's why this role is very

591
00:24:03,600 --> 00:24:06,640
specific one and the cluster role is

592
00:24:06,640 --> 00:24:09,120
more general more permissive because

593
00:24:09,120 --> 00:24:10,960
applies to the whole cluster of your

594
00:24:10,960 --> 00:24:13,600
your kubernetes environment right so you

595
00:24:13,600 --> 00:24:15,440
need to be aware of that as well when

596
00:24:15,440 --> 00:24:18,000
you're giving permissions to your users

597
00:24:18,000 --> 00:24:19,680
on kubernetes

598
00:24:19,680 --> 00:24:22,559
[Music]

599
00:24:22,559 --> 00:24:25,360
one more thing and uh i think

600
00:24:25,360 --> 00:24:28,080
on kubernetes how there is like the

601
00:24:28,080 --> 00:24:30,080
database or the main data storage

602
00:24:30,080 --> 00:24:32,480
location for cluster it's by default

603
00:24:32,480 --> 00:24:35,919
it's at cd right it's a key value store

604
00:24:35,919 --> 00:24:38,480
on uh has all your cluster objects all

605
00:24:38,480 --> 00:24:41,600
your configurations are saved there

606
00:24:41,600 --> 00:24:42,480
but

607
00:24:42,480 --> 00:24:46,000
we found out earlier this year that over

608
00:24:46,000 --> 00:24:47,679
two uh

609
00:24:47,679 --> 00:24:49,520
2600

610
00:24:49,520 --> 00:24:52,880
uh instances of lcd are exposed on on

611
00:24:52,880 --> 00:24:55,760
shodhan right and not necessarily

612
00:24:55,760 --> 00:24:57,279
connected to a kubernetes cluster

613
00:24:57,279 --> 00:24:59,679
because you can have

614
00:24:59,679 --> 00:25:01,520
uh as a standalone

615
00:25:01,520 --> 00:25:02,960
key value store

616
00:25:02,960 --> 00:25:05,360
but but this is

617
00:25:05,360 --> 00:25:07,279
they usually have sensitive information

618
00:25:07,279 --> 00:25:09,039
right it's just like exposing your

619
00:25:09,039 --> 00:25:10,880
database to the internet

620
00:25:10,880 --> 00:25:12,720
so that's something that you need to be

621
00:25:12,720 --> 00:25:16,159
aware of and uh one thing on that cd

622
00:25:16,159 --> 00:25:18,320
that's done by default is the encryption

623
00:25:18,320 --> 00:25:21,600
in transit right uh which is great but

624
00:25:21,600 --> 00:25:23,760
the encryption at rest is not done by

625
00:25:23,760 --> 00:25:25,120
default right

626
00:25:25,120 --> 00:25:28,159
by default everything that you have on

627
00:25:28,159 --> 00:25:30,159
your cluster all the configurations all

628
00:25:30,159 --> 00:25:32,080
the sensitive information even the

629
00:25:32,080 --> 00:25:35,760
secrets are stored in plain text on xcd

630
00:25:35,760 --> 00:25:36,640
to

631
00:25:36,640 --> 00:25:39,279
encrypt that you need a specific object

632
00:25:39,279 --> 00:25:41,600
called the encryption configuration

633
00:25:41,600 --> 00:25:42,400
object

634
00:25:42,400 --> 00:25:44,320
to be able to protect your sensitive

635
00:25:44,320 --> 00:25:46,879
information

636
00:25:48,000 --> 00:25:50,080
another thing that from security

637
00:25:50,080 --> 00:25:52,559
perspective can be very kind of

638
00:25:52,559 --> 00:25:55,360
surprising and scary at the same time

639
00:25:55,360 --> 00:25:56,400
is that

640
00:25:56,400 --> 00:25:59,600
by default on kubernetes all the pods

641
00:25:59,600 --> 00:26:01,919
all the containers can talk to any other

642
00:26:01,919 --> 00:26:03,440
pod in the cluster

643
00:26:03,440 --> 00:26:05,919
so it's just like a flat network

644
00:26:05,919 --> 00:26:08,000
right from a security perspective when i

645
00:26:08,000 --> 00:26:10,799
found that out like oh my god right

646
00:26:10,799 --> 00:26:13,279
so yeah make sure you create a proper uh

647
00:26:13,279 --> 00:26:15,360
network policy for your cluster so

648
00:26:15,360 --> 00:26:17,279
network policies are objects that you

649
00:26:17,279 --> 00:26:19,919
can kind of segregate who can who can

650
00:26:19,919 --> 00:26:23,279
talk to who inside your cluster right so

651
00:26:23,279 --> 00:26:25,440
uh does the front end pod really need to

652
00:26:25,440 --> 00:26:27,919
talk to the database pawn or not right

653
00:26:27,919 --> 00:26:30,159
so something like that it's very

654
00:26:30,159 --> 00:26:32,400
important to have on your kubernetes

655
00:26:32,400 --> 00:26:33,430
cluster

656
00:26:33,430 --> 00:26:34,720
[Music]

657
00:26:34,720 --> 00:26:37,840
and last but not least the audit logs

658
00:26:37,840 --> 00:26:40,000
there's also this is also something that

659
00:26:40,000 --> 00:26:42,400
are not enabled by default on kubernetes

660
00:26:42,400 --> 00:26:44,320
and it's highly recommended that you do

661
00:26:44,320 --> 00:26:46,720
that enable them for security and

662
00:26:46,720 --> 00:26:49,039
troubleshooting right uh basically you

663
00:26:49,039 --> 00:26:50,880
need two things to enable this audit

664
00:26:50,880 --> 00:26:53,760
logs log path where you're going to

665
00:26:53,760 --> 00:26:56,640
store this this file or in a policy file

666
00:26:56,640 --> 00:26:58,480
right what what are you going to log

667
00:26:58,480 --> 00:27:00,480
right and you can set those up on

668
00:27:00,480 --> 00:27:03,520
kubernetes api server configuration

669
00:27:03,520 --> 00:27:05,200
right

670
00:27:05,200 --> 00:27:07,440
basically there are four uh logging

671
00:27:07,440 --> 00:27:10,880
levels non metadata request and response

672
00:27:10,880 --> 00:27:12,320
and you can set those up and and

673
00:27:12,320 --> 00:27:14,480
configure what what are the logs that

674
00:27:14,480 --> 00:27:16,640
you want and you can also send them to a

675
00:27:16,640 --> 00:27:19,919
specific location like a sim server or

676
00:27:19,919 --> 00:27:20,960
on

677
00:27:20,960 --> 00:27:22,880
the kubernetes managed services for

678
00:27:22,880 --> 00:27:27,840
example for any eks for aws they are

679
00:27:27,840 --> 00:27:31,440
sent to cloudwatch where you can

680
00:27:31,440 --> 00:27:33,919
later grab them and send to like an s3

681
00:27:33,919 --> 00:27:38,799
bucket or to your scene of preferences

682
00:27:38,880 --> 00:27:41,360
okay just to conclude my presentation

683
00:27:41,360 --> 00:27:42,159
here

684
00:27:42,159 --> 00:27:44,720
um but just remember the basics right i

685
00:27:44,720 --> 00:27:46,880
know there's a lot of information here a

686
00:27:46,880 --> 00:27:49,279
lot of stuff to that you need to do

687
00:27:49,279 --> 00:27:51,919
before and after you deploy a kubernetes

688
00:27:51,919 --> 00:27:53,279
cluster

689
00:27:53,279 --> 00:27:56,159
but remember the basics right kubernetes

690
00:27:56,159 --> 00:27:59,840
uh changes version very early and often

691
00:27:59,840 --> 00:28:02,559
i think now it's three times a year uh

692
00:28:02,559 --> 00:28:06,799
and the latest version was 121 when i

693
00:28:06,799 --> 00:28:08,399
when i wrote this presentation i think

694
00:28:08,399 --> 00:28:11,279
already changed to 122 right so

695
00:28:11,279 --> 00:28:13,600
it updates very often so be aware of

696
00:28:13,600 --> 00:28:14,399
that

697
00:28:14,399 --> 00:28:17,200
uh don't use the cluster admin for your

698
00:28:17,200 --> 00:28:19,600
daily work 3d like root right you don't

699
00:28:19,600 --> 00:28:22,640
want to use root for everything as well

700
00:28:22,640 --> 00:28:24,320
and if you can if you're just beginning

701
00:28:24,320 --> 00:28:26,559
your journey in kubernetes and and

702
00:28:26,559 --> 00:28:28,480
you're just learning and it's it can be

703
00:28:28,480 --> 00:28:30,799
daunting and it can be a lot of complex

704
00:28:30,799 --> 00:28:33,360
stuff to learn try using a kubernetes

705
00:28:33,360 --> 00:28:37,760
managed service such as eks aks or gke

706
00:28:37,760 --> 00:28:39,840
because a lot of the security stuff and

707
00:28:39,840 --> 00:28:43,039
a lot of the the kind of the grant work

708
00:28:43,039 --> 00:28:44,960
they handle for you so it's probably

709
00:28:44,960 --> 00:28:47,200
better to try that first

710
00:28:47,200 --> 00:28:48,960
and don't forget to check out the

711
00:28:48,960 --> 00:28:51,440
kubernetes the cis kubernetes benchmark

712
00:28:51,440 --> 00:28:54,720
for more security best practices

713
00:28:54,720 --> 00:28:57,679
so thank you for everyone for having me

714
00:28:57,679 --> 00:29:00,640
here and for us for this great uh

715
00:29:00,640 --> 00:29:02,799
event and i'll be available on slack for

716
00:29:02,799 --> 00:29:04,320
questions thank you

717
00:29:04,320 --> 00:29:06,639
thank you

