1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:07,839 --> 00:00:10,800
welcome to my to my talk again uh it is

3
00:00:10,800 --> 00:00:12,719
my pleasure to make a presentation on

4
00:00:12,719 --> 00:00:16,320
such great conference and my talk is

5
00:00:16,320 --> 00:00:18,880
about microservices security

6
00:00:18,880 --> 00:00:20,560
in my talk i will present some real

7
00:00:20,560 --> 00:00:23,439
cases of vulnerabilities in microservice

8
00:00:23,439 --> 00:00:25,519
application mostly caused by some

9
00:00:25,519 --> 00:00:27,199
architectural or

10
00:00:27,199 --> 00:00:30,240
design flaws and i will also try to give

11
00:00:30,240 --> 00:00:33,600
some practical examples in in incl

12
00:00:33,600 --> 00:00:35,440
including some open source checklist on

13
00:00:35,440 --> 00:00:38,000
how to provide basic uh architecture

14
00:00:38,000 --> 00:00:39,840
security assessment of such

15
00:00:39,840 --> 00:00:42,320
applications

16
00:00:42,320 --> 00:00:44,719
so my name is alexander currently i'm

17
00:00:44,719 --> 00:00:48,000
working on uh huawei r d and my research

18
00:00:48,000 --> 00:00:50,160
in some security

19
00:00:50,160 --> 00:00:54,000
uh design research uh direction i also

20
00:00:54,000 --> 00:00:57,760
teach uh application security courses in

21
00:00:57,760 --> 00:01:00,079
moscow state technical uh

22
00:01:00,079 --> 00:01:03,440
university and i also try to make some

23
00:01:03,440 --> 00:01:07,520
little contribution to upset community

24
00:01:07,520 --> 00:01:11,200
i have several pull requests on

25
00:01:11,200 --> 00:01:14,000
cheat sheet project about microservices

26
00:01:14,000 --> 00:01:16,000
security

27
00:01:16,000 --> 00:01:16,880
so

28
00:01:16,880 --> 00:01:19,280
the motivation of the talk and research

29
00:01:19,280 --> 00:01:22,960
itself uh is a fallen uh imagine that

30
00:01:22,960 --> 00:01:25,040
there there is an application security

31
00:01:25,040 --> 00:01:28,240
guy or application security engineer who

32
00:01:28,240 --> 00:01:31,200
periodically provides an assessment for

33
00:01:31,200 --> 00:01:34,159
some microservice system developed by

34
00:01:34,159 --> 00:01:34,960
some

35
00:01:34,960 --> 00:01:39,360
young small firms without any maturity

36
00:01:39,360 --> 00:01:41,759
secure software development processes

37
00:01:41,759 --> 00:01:44,720
based for example on wasp sum or some

38
00:01:44,720 --> 00:01:49,119
other uh upset uh process standard

39
00:01:49,119 --> 00:01:51,840
and that engineer has an access to

40
00:01:51,840 --> 00:01:53,920
source code has an access to testing

41
00:01:53,920 --> 00:01:57,439
environment can ask developers and

42
00:01:57,439 --> 00:01:59,600
the main question for that engineer from

43
00:01:59,600 --> 00:02:02,640
stakeholders is my application secure or

44
00:02:02,640 --> 00:02:05,119
not maybe they are going to

45
00:02:05,119 --> 00:02:07,280
production environment maybe they are

46
00:02:07,280 --> 00:02:09,119
going to ship their

47
00:02:09,119 --> 00:02:11,599
application to their first customer

48
00:02:11,599 --> 00:02:13,280
but anyway

49
00:02:13,280 --> 00:02:15,440
the question is very general is my

50
00:02:15,440 --> 00:02:18,560
application secure or not and because

51
00:02:18,560 --> 00:02:22,319
the task is very general our application

52
00:02:22,319 --> 00:02:25,520
security engineer can just start his

53
00:02:25,520 --> 00:02:28,480
wasps up and start to find some sql

54
00:02:28,480 --> 00:02:30,800
injection cross-site scripting and other

55
00:02:30,800 --> 00:02:32,879
uh beautiful vulnerabilities but it

56
00:02:32,879 --> 00:02:34,080
seems that

57
00:02:34,080 --> 00:02:37,440
that is not what our customer or what

58
00:02:37,440 --> 00:02:40,160
our stakeholders the stakeholders need

59
00:02:40,160 --> 00:02:41,680
because

60
00:02:41,680 --> 00:02:42,800
uh

61
00:02:42,800 --> 00:02:45,200
it seems that our customer really wants

62
00:02:45,200 --> 00:02:47,760
to find some critical issues that may in

63
00:02:47,760 --> 00:02:49,920
in the future greatly affects his

64
00:02:49,920 --> 00:02:52,080
application so the customer or our

65
00:02:52,080 --> 00:02:54,560
stakeholders really need some security

66
00:02:54,560 --> 00:02:57,519
architecture as us assessment and in

67
00:02:57,519 --> 00:02:58,319
that

68
00:02:58,319 --> 00:02:59,280
uh

69
00:02:59,280 --> 00:03:02,080
scenario our upset engineer needs to the

70
00:03:02,080 --> 00:03:05,120
first understand what core security

71
00:03:05,120 --> 00:03:07,840
feature review in the first place and

72
00:03:07,840 --> 00:03:09,440
the second how to provide such

73
00:03:09,440 --> 00:03:11,920
architecture assessment and in order to

74
00:03:11,920 --> 00:03:14,800
do that he or she can use some kind of

75
00:03:14,800 --> 00:03:17,920
checklist from upset com community but

76
00:03:17,920 --> 00:03:20,480
at the beginning of my research

77
00:03:20,480 --> 00:03:22,480
i tried to find

78
00:03:22,480 --> 00:03:25,200
some some checklist dedicated especially

79
00:03:25,200 --> 00:03:27,680
for micro service uh system

80
00:03:27,680 --> 00:03:30,080
there is a great checklist from owasp

81
00:03:30,080 --> 00:03:32,720
like or space os standard

82
00:03:32,720 --> 00:03:35,200
there there are some beautiful

83
00:03:35,200 --> 00:03:37,440
uh publication from nice dedicated for

84
00:03:37,440 --> 00:03:40,080
microservice security but

85
00:03:40,080 --> 00:03:42,959
you can you you cannot just take the

86
00:03:42,959 --> 00:03:45,680
checklist and start to apply it because

87
00:03:45,680 --> 00:03:49,280
there is some gaps from for example from

88
00:03:49,280 --> 00:03:51,519
sos standard and

89
00:03:51,519 --> 00:03:53,680
micro service architecture

90
00:03:53,680 --> 00:03:55,439
and

91
00:03:55,439 --> 00:03:57,439
so during my research

92
00:03:57,439 --> 00:03:59,439
during my personal research and i i

93
00:03:59,439 --> 00:04:01,920
should say that the the

94
00:04:01,920 --> 00:04:04,080
this is my personal research that you

95
00:04:04,080 --> 00:04:06,720
know do not have any connection with my

96
00:04:06,720 --> 00:04:08,959
current employee so after several

97
00:04:08,959 --> 00:04:11,680
assessment after several fails i finally

98
00:04:11,680 --> 00:04:13,040
created some

99
00:04:13,040 --> 00:04:14,799
very first version of my personal

100
00:04:14,799 --> 00:04:16,079
checklist

101
00:04:16,079 --> 00:04:19,440
dedicated to microservice architecture

102
00:04:19,440 --> 00:04:20,399
and

103
00:04:20,399 --> 00:04:22,479
in in my presentation i will share some

104
00:04:22,479 --> 00:04:24,400
core ideas

105
00:04:24,400 --> 00:04:26,639
of uh how to provide the basic

106
00:04:26,639 --> 00:04:28,479
microservice security

107
00:04:28,479 --> 00:04:31,040
architecture assessment and also we'll

108
00:04:31,040 --> 00:04:32,400
give some practical

109
00:04:32,400 --> 00:04:34,320
examples and show my

110
00:04:34,320 --> 00:04:37,600
my my checklist so before that

111
00:04:37,600 --> 00:04:39,199
diving into

112
00:04:39,199 --> 00:04:41,360
architecture assessment just a few words

113
00:04:41,360 --> 00:04:43,440
not exhaustive about micro service

114
00:04:43,440 --> 00:04:46,000
applications it's itself from security

115
00:04:46,000 --> 00:04:48,960
points of view

116
00:04:48,960 --> 00:04:51,520
the first point we should understand is

117
00:04:51,520 --> 00:04:53,759
a polyglot architecture that is

118
00:04:53,759 --> 00:04:55,360
usually

119
00:04:55,360 --> 00:04:57,840
upset engineer upset guy who provides

120
00:04:57,840 --> 00:04:59,360
some assessment

121
00:04:59,360 --> 00:05:02,000
faces with multiple languages multiple

122
00:05:02,000 --> 00:05:04,639
frameworks in one system plus there are

123
00:05:04,639 --> 00:05:06,320
some additional infrastructure

124
00:05:06,320 --> 00:05:07,840
components like

125
00:05:07,840 --> 00:05:12,080
service registry or api gateway that

126
00:05:12,080 --> 00:05:14,479
that's that dedicated and that is

127
00:05:14,479 --> 00:05:17,120
special components for microservices

128
00:05:17,120 --> 00:05:19,680
architecture but on the other hand they

129
00:05:19,680 --> 00:05:22,400
increase attack surface

130
00:05:22,400 --> 00:05:24,320
the next point of that instead instead

131
00:05:24,320 --> 00:05:26,240
of monolithic application there are

132
00:05:26,240 --> 00:05:27,680
multiple

133
00:05:27,680 --> 00:05:29,199
entities called

134
00:05:29,199 --> 00:05:32,560
microservices and each entity has their

135
00:05:32,560 --> 00:05:36,160
own apis and expose their own apis

136
00:05:36,160 --> 00:05:38,560
and that also

137
00:05:38,560 --> 00:05:39,520
therefore

138
00:05:39,520 --> 00:05:41,919
attack surface is made

139
00:05:41,919 --> 00:05:44,560
broader uh also number of protected

140
00:05:44,560 --> 00:05:47,360
assets like debt basis or topics and

141
00:05:47,360 --> 00:05:48,479
message

142
00:05:48,479 --> 00:05:51,360
messages use in in increase so instead

143
00:05:51,360 --> 00:05:54,320
of one database in monolith application

144
00:05:54,320 --> 00:05:55,600
you will have

145
00:05:55,600 --> 00:05:58,560
that base pair micro services

146
00:05:58,560 --> 00:06:00,479
and

147
00:06:00,479 --> 00:06:02,639
this is also we should take into account

148
00:06:02,639 --> 00:06:03,440
during

149
00:06:03,440 --> 00:06:04,160
our

150
00:06:04,160 --> 00:06:06,720
assessment and the last point here from

151
00:06:06,720 --> 00:06:08,800
from from my point of view that

152
00:06:08,800 --> 00:06:11,759
uh in microservice system there is a

153
00:06:11,759 --> 00:06:14,720
distributed nature of microservice and

154
00:06:14,720 --> 00:06:15,840
therefore

155
00:06:15,840 --> 00:06:17,759
sharing user context

156
00:06:17,759 --> 00:06:22,319
is a harder that is harder because you

157
00:06:22,319 --> 00:06:24,720
because every click on the user

158
00:06:24,720 --> 00:06:28,000
side on the browser

159
00:06:28,800 --> 00:06:31,680
every click is a

160
00:06:32,639 --> 00:06:34,720
stay with uh some cold chain between

161
00:06:34,720 --> 00:06:37,680
micro services that is there the the

162
00:06:37,680 --> 00:06:38,960
there is a

163
00:06:38,960 --> 00:06:41,120
browser send their request to the api

164
00:06:41,120 --> 00:06:42,880
gateway api get with end request to

165
00:06:42,880 --> 00:06:44,560
micro service number one micro service

166
00:06:44,560 --> 00:06:46,560
num number one can send request to micro

167
00:06:46,560 --> 00:06:48,479
server service number three and

168
00:06:48,479 --> 00:06:50,800
therefore to enforce authorization or

169
00:06:50,800 --> 00:06:53,039
authentication every micro therapist in

170
00:06:53,039 --> 00:06:55,360
the chain should understand the user

171
00:06:55,360 --> 00:06:58,880
context for example in order to provide

172
00:06:58,880 --> 00:07:00,960
access control based

173
00:07:00,960 --> 00:07:02,720
technique or

174
00:07:02,720 --> 00:07:03,840
are back

175
00:07:03,840 --> 00:07:06,240
so because microservice system itself is

176
00:07:06,240 --> 00:07:07,039
a

177
00:07:07,039 --> 00:07:09,039
distributed system

178
00:07:09,039 --> 00:07:11,759
uh it is more harder to to propagate

179
00:07:11,759 --> 00:07:15,199
user context and that may lead to some

180
00:07:15,199 --> 00:07:17,599
access control vulnerabilities like idor

181
00:07:17,599 --> 00:07:19,199
or

182
00:07:19,199 --> 00:07:20,880
bola

183
00:07:20,880 --> 00:07:23,599
so the step number zero uh during

184
00:07:23,599 --> 00:07:25,759
architecture assessment is to briefly

185
00:07:25,759 --> 00:07:27,840
understand the wool architecture and

186
00:07:27,840 --> 00:07:30,160
it's its main components and connection

187
00:07:30,160 --> 00:07:33,520
between components so it is great if if

188
00:07:33,520 --> 00:07:35,919
if if you work with a development team

189
00:07:35,919 --> 00:07:36,960
that use

190
00:07:36,960 --> 00:07:39,039
some kind of infrastructure as a

191
00:07:39,039 --> 00:07:41,039
approach or everything as a code

192
00:07:41,039 --> 00:07:42,639
approach and

193
00:07:42,639 --> 00:07:45,280
has some up-to-date documentation that

194
00:07:45,280 --> 00:07:48,400
describe every micro service in in their

195
00:07:48,400 --> 00:07:51,280
system but in in in most case when we

196
00:07:51,280 --> 00:07:54,720
talking about some young firm startups

197
00:07:54,720 --> 00:07:56,960
you have just an access to source code

198
00:07:56,960 --> 00:07:59,919
repository and maybe some slides that

199
00:07:59,919 --> 00:08:00,720
has

200
00:08:00,720 --> 00:08:02,720
some high high low description of

201
00:08:02,720 --> 00:08:05,360
application

202
00:08:05,599 --> 00:08:08,639
so to to create such simple architecture

203
00:08:08,639 --> 00:08:10,080
description

204
00:08:10,080 --> 00:08:12,879
you as an application security guy has

205
00:08:12,879 --> 00:08:13,680
have

206
00:08:13,680 --> 00:08:15,759
has to dig into source code

207
00:08:15,759 --> 00:08:17,599
uh configuration file

208
00:08:17,599 --> 00:08:19,440
check just an environment and may and

209
00:08:19,440 --> 00:08:21,039
even you may ask

210
00:08:21,039 --> 00:08:22,879
developers and actually some of them

211
00:08:22,879 --> 00:08:24,000
don't like

212
00:08:24,000 --> 00:08:25,520
that

213
00:08:25,520 --> 00:08:27,520
and your main point here is that you

214
00:08:27,520 --> 00:08:28,720
want to click

215
00:08:28,720 --> 00:08:30,400
clarify you want to understand the whole

216
00:08:30,400 --> 00:08:33,679
architecture and uh i have created some

217
00:08:33,679 --> 00:08:36,240
simple simple checklist with a step that

218
00:08:36,240 --> 00:08:37,919
can help you to capture minimum

219
00:08:37,919 --> 00:08:39,360
information about application

220
00:08:39,360 --> 00:08:40,559
architecture

221
00:08:40,559 --> 00:08:42,958
and use that info information in future

222
00:08:42,958 --> 00:08:44,720
steps during

223
00:08:44,720 --> 00:08:46,480
architecture

224
00:08:46,480 --> 00:08:47,920
assessment

225
00:08:47,920 --> 00:08:50,080
so these steps are very simple you

226
00:08:50,080 --> 00:08:52,880
should identify the first of all

227
00:08:52,880 --> 00:08:54,959
application functionality services that

228
00:08:54,959 --> 00:08:57,200
is services with some business logic

229
00:08:57,200 --> 00:08:58,000
like

230
00:08:58,000 --> 00:09:00,640
ms number one or ms

231
00:09:00,640 --> 00:09:02,640
microservice number three

232
00:09:02,640 --> 00:09:03,920
then you have to

233
00:09:03,920 --> 00:09:06,720
identify and understand infrastructure

234
00:09:06,720 --> 00:09:09,120
services like api gateway or service

235
00:09:09,120 --> 00:09:11,920
registry or authentication

236
00:09:11,920 --> 00:09:15,279
service and in most cases that is not in

237
00:09:15,279 --> 00:09:18,080
house development but some third-party

238
00:09:18,080 --> 00:09:20,399
services that

239
00:09:20,399 --> 00:09:22,959
allow to you allow development team to

240
00:09:22,959 --> 00:09:24,880
implement micro service

241
00:09:24,880 --> 00:09:27,760
infrastructure then you should uh

242
00:09:27,760 --> 00:09:30,480
identify different data storages not

243
00:09:30,480 --> 00:09:34,320
just like databases but also

244
00:09:34,800 --> 00:09:38,640
cache also messaging system that used to

245
00:09:38,640 --> 00:09:40,160
to

246
00:09:40,160 --> 00:09:42,240
to share some information

247
00:09:42,240 --> 00:09:45,680
among um microservices up application

248
00:09:45,680 --> 00:09:48,240
then you should understand data assets

249
00:09:48,240 --> 00:09:49,440
that is

250
00:09:49,440 --> 00:09:52,160
any inform inform info information that

251
00:09:52,160 --> 00:09:54,399
is critical for that system like uh

252
00:09:54,399 --> 00:09:56,880
personal data or something like that and

253
00:09:56,880 --> 00:09:59,279
the last step you should identify the

254
00:09:59,279 --> 00:10:01,680
relationships between those components

255
00:10:01,680 --> 00:10:04,240
so you you you should understand what is

256
00:10:04,240 --> 00:10:05,279
connection

257
00:10:05,279 --> 00:10:06,959
between micro services between micro

258
00:10:06,959 --> 00:10:09,519
services and some infrastructure

259
00:10:09,519 --> 00:10:12,320
services which services has an access to

260
00:10:12,320 --> 00:10:15,600
message queue system or something like

261
00:10:15,600 --> 00:10:18,160
that and in order to make some graphical

262
00:10:18,160 --> 00:10:20,959
representation it is better to use some

263
00:10:20,959 --> 00:10:23,600
notation like dot language uh or to like

264
00:10:23,600 --> 00:10:26,000
graph with that allows you to simply

265
00:10:26,000 --> 00:10:28,399
modify the pictures if any changes occur

266
00:10:28,399 --> 00:10:30,839
for example if development team decided

267
00:10:30,839 --> 00:10:33,279
to add some new connection between

268
00:10:33,279 --> 00:10:37,200
microservices uh so i i put this advices

269
00:10:37,200 --> 00:10:40,079
into was cheat sheet and here is a link

270
00:10:40,079 --> 00:10:42,800
on the slides feel free to use that

271
00:10:42,800 --> 00:10:45,920
approach or contribute that to to that

272
00:10:45,920 --> 00:10:48,000
cheat sheet to make it more

273
00:10:48,000 --> 00:10:51,279
better so that was a step number

274
00:10:51,279 --> 00:10:54,079
zero uh about

275
00:10:54,079 --> 00:10:56,079
the first step is you should understand

276
00:10:56,079 --> 00:10:58,720
the whole architecture of all components

277
00:10:58,720 --> 00:10:59,920
uh micro service components

278
00:10:59,920 --> 00:11:02,959
infrastructure component databases and

279
00:11:02,959 --> 00:11:04,959
other stuff

280
00:11:04,959 --> 00:11:06,800
then the next step we have we have to

281
00:11:06,800 --> 00:11:09,680
decide uh

282
00:11:09,760 --> 00:11:12,720
what features we have to analyze first

283
00:11:12,720 --> 00:11:15,760
because as you know we have some strict

284
00:11:15,760 --> 00:11:19,040
amount of time to provide our assessment

285
00:11:19,040 --> 00:11:21,279
and we should concentrate on some some

286
00:11:21,279 --> 00:11:24,240
core core uh security feature uh in

287
00:11:24,240 --> 00:11:28,320
order to find some some high critical

288
00:11:28,320 --> 00:11:30,160
architecture vulnerabilities and my

289
00:11:30,160 --> 00:11:32,959
suggestion is to focus on some on on

290
00:11:32,959 --> 00:11:34,560
good old function

291
00:11:34,560 --> 00:11:37,600
authentication authorization and logging

292
00:11:37,600 --> 00:11:39,440
dealing with microservice architecture

293
00:11:39,440 --> 00:11:41,920
we may divide that

294
00:11:41,920 --> 00:11:43,279
functions

295
00:11:43,279 --> 00:11:45,519
into subclasses like age level

296
00:11:45,519 --> 00:11:47,519
authentication or service to service

297
00:11:47,519 --> 00:11:49,839
authentication but at the end of the day

298
00:11:49,839 --> 00:11:51,040
this is just

299
00:11:51,040 --> 00:11:54,639
authentication authorization and logging

300
00:11:54,639 --> 00:11:56,480
and so let's move some one practical

301
00:11:56,480 --> 00:11:59,040
example and start with a

302
00:11:59,040 --> 00:12:01,760
what you you you should check uh when

303
00:12:01,760 --> 00:12:04,800
when when when you when you review an

304
00:12:04,800 --> 00:12:06,560
authentication feature

305
00:12:06,560 --> 00:12:08,560
so firstly you have to check what type

306
00:12:08,560 --> 00:12:11,040
of authentication service custom or

307
00:12:11,040 --> 00:12:14,480
third party is used in application and

308
00:12:14,480 --> 00:12:16,720
despite that using third-party services

309
00:12:16,720 --> 00:12:19,680
like a key clock or cloud foundry ua is

310
00:12:19,680 --> 00:12:22,160
an obvious choice for microservice

311
00:12:22,160 --> 00:12:24,160
system i personally faced with a

312
00:12:24,160 --> 00:12:26,880
situation when development team prefers

313
00:12:26,880 --> 00:12:29,519
not to spend their time on integration

314
00:12:29,519 --> 00:12:31,279
some big third party authentication

315
00:12:31,279 --> 00:12:33,440
service in their application but just

316
00:12:33,440 --> 00:12:36,880
develop their own simple service that

317
00:12:36,880 --> 00:12:39,360
generate json web token and provide it

318
00:12:39,360 --> 00:12:41,360
to the user

319
00:12:41,360 --> 00:12:43,360
and at first sign it is okay because

320
00:12:43,360 --> 00:12:46,320
it's simple developers focus on some

321
00:12:46,320 --> 00:12:47,680
more focus on some business

322
00:12:47,680 --> 00:12:48,959
functionality and

323
00:12:48,959 --> 00:12:50,959
not spend their time trying to

324
00:12:50,959 --> 00:12:54,480
understand how to integrate some big

325
00:12:54,480 --> 00:12:57,200
third party authentication service with

326
00:12:57,200 --> 00:12:59,120
their small micro service startup

327
00:12:59,120 --> 00:13:00,720
application

328
00:13:00,720 --> 00:13:01,600
um

329
00:13:01,600 --> 00:13:02,800
but

330
00:13:02,800 --> 00:13:04,839
but in future it it will be an issue

331
00:13:04,839 --> 00:13:08,639
when uh application

332
00:13:08,639 --> 00:13:09,680
will be

333
00:13:09,680 --> 00:13:12,000
more more weak and their customers

334
00:13:12,000 --> 00:13:13,360
suddenly ask

335
00:13:13,360 --> 00:13:14,800
please could you please integrate your

336
00:13:14,800 --> 00:13:16,720
application with the our world up

337
00:13:16,720 --> 00:13:18,839
service or could you please

338
00:13:18,839 --> 00:13:22,000
uh implement multi-factor

339
00:13:22,000 --> 00:13:24,800
authentication and of course you should

340
00:13:24,800 --> 00:13:26,639
not uh

341
00:13:26,639 --> 00:13:28,480
development teams should

342
00:13:28,480 --> 00:13:30,720
should should use some third-party

343
00:13:30,720 --> 00:13:33,279
proven or third-party services instead

344
00:13:33,279 --> 00:13:35,519
of implemented authentication from

345
00:13:35,519 --> 00:13:37,920
scratch

346
00:13:37,920 --> 00:13:39,600
so if you see that there is a custom

347
00:13:39,600 --> 00:13:41,519
authentication services this is a red

348
00:13:41,519 --> 00:13:44,079
flag for you as application security

349
00:13:44,079 --> 00:13:46,240
engineer try to expand development team

350
00:13:46,240 --> 00:13:48,000
that they need to take some third party

351
00:13:48,000 --> 00:13:50,320
services invest their time to understand

352
00:13:50,320 --> 00:13:52,000
how it works

353
00:13:52,000 --> 00:13:54,560
it will save amount of on effort in the

354
00:13:54,560 --> 00:13:56,959
future the next point is check third

355
00:13:56,959 --> 00:13:58,800
party libraries that implement

356
00:13:58,800 --> 00:14:01,279
authentication at the micro service

357
00:14:01,279 --> 00:14:03,440
layer and verify that development team

358
00:14:03,440 --> 00:14:06,079
use the good one library that

359
00:14:06,079 --> 00:14:08,880
has a supports that that don't have any

360
00:14:08,880 --> 00:14:11,360
open critical open issue on github or

361
00:14:11,360 --> 00:14:14,000
something like that

362
00:14:14,000 --> 00:14:16,160
the other point here is do not to forget

363
00:14:16,160 --> 00:14:18,800
about other types of external interfaces

364
00:14:18,800 --> 00:14:19,760
because

365
00:14:19,760 --> 00:14:22,320
as i told before microservice system

366
00:14:22,320 --> 00:14:25,600
don't have just http interface

367
00:14:25,600 --> 00:14:27,120
they have

368
00:14:27,120 --> 00:14:29,440
into interface implemented in message

369
00:14:29,440 --> 00:14:33,199
queue like kafka or nuts they they will

370
00:14:33,199 --> 00:14:34,000
have

371
00:14:34,000 --> 00:14:36,320
they have a web socket in the interface

372
00:14:36,320 --> 00:14:38,480
so do not forget about other type of

373
00:14:38,480 --> 00:14:41,120
external interfaces check that there is

374
00:14:41,120 --> 00:14:41,839
an

375
00:14:41,839 --> 00:14:43,680
authentication in place

376
00:14:43,680 --> 00:14:45,440
from architectural point of view not

377
00:14:45,440 --> 00:14:48,399
only for http itself but for message

378
00:14:48,399 --> 00:14:52,720
messaging cure and web sockets

379
00:14:52,959 --> 00:14:55,120
the next point is that

380
00:14:55,120 --> 00:14:57,360
there can be an api with authentication

381
00:14:57,360 --> 00:15:00,160
by design and you should you you should

382
00:15:00,160 --> 00:15:01,600
identify it

383
00:15:01,600 --> 00:15:03,440
for example there is an

384
00:15:03,440 --> 00:15:06,560
pg sql http module that allows

385
00:15:06,560 --> 00:15:09,199
postgres postpose the base management

386
00:15:09,199 --> 00:15:13,519
system itself to make http requests

387
00:15:13,519 --> 00:15:15,839
and it is quite difficult

388
00:15:15,839 --> 00:15:18,240
difficult to implement authentication

389
00:15:18,240 --> 00:15:20,959
for that uh for for for

390
00:15:20,959 --> 00:15:23,839
that in in invocation so such api may be

391
00:15:23,839 --> 00:15:27,199
unprotected but you have to identify it

392
00:15:27,199 --> 00:15:29,440
and mitigate the risk that someone from

393
00:15:29,440 --> 00:15:32,160
external network can touch that

394
00:15:32,160 --> 00:15:33,440
interface

395
00:15:33,440 --> 00:15:35,519
so in order to make those steps you may

396
00:15:35,519 --> 00:15:37,680
check source code configuration file

397
00:15:37,680 --> 00:15:40,880
even ask development team uh and also

398
00:15:40,880 --> 00:15:43,440
you can automate your your work by using

399
00:15:43,440 --> 00:15:45,600
some where some simple script or you

400
00:15:45,600 --> 00:15:48,000
using tool like sim sam grep that for

401
00:15:48,000 --> 00:15:51,440
example allows you to to

402
00:15:51,440 --> 00:15:54,560
extract endpoint from source code

403
00:15:54,560 --> 00:15:56,079
in order to understand which

404
00:15:56,079 --> 00:15:59,279
microservice expose what endpoints

405
00:15:59,279 --> 00:16:02,480
uh you can discover unprotected api like

406
00:16:02,480 --> 00:16:04,079
spring boot api

407
00:16:04,079 --> 00:16:07,440
activator or monitoring system api using

408
00:16:07,440 --> 00:16:11,360
uh asset node database as asset node api

409
00:16:11,360 --> 00:16:13,199
database that's very interesting project

410
00:16:13,199 --> 00:16:16,399
that capture uh the big here's a huge

411
00:16:16,399 --> 00:16:19,360
list of uh some api that can be exposed

412
00:16:19,360 --> 00:16:22,560
from your microservice system so you can

413
00:16:22,560 --> 00:16:25,680
add up the automate automated step

414
00:16:25,680 --> 00:16:28,399
and the first very simple example that i

415
00:16:28,399 --> 00:16:30,480
found during some

416
00:16:30,480 --> 00:16:32,880
assessment is the third-party

417
00:16:32,880 --> 00:16:34,800
third-party json web talking library

418
00:16:34,800 --> 00:16:37,120
issue so there was a microservice

419
00:16:37,120 --> 00:16:39,759
application written in java

420
00:16:39,759 --> 00:16:41,920
there were several microservices written

421
00:16:41,920 --> 00:16:44,079
in java using spring

422
00:16:44,079 --> 00:16:46,399
spring security framework and

423
00:16:46,399 --> 00:16:48,959
development team also has had

424
00:16:48,959 --> 00:16:50,800
high level requirement

425
00:16:50,800 --> 00:16:51,839
that

426
00:16:51,839 --> 00:16:53,920
you should implement authentic when you

427
00:16:53,920 --> 00:16:55,440
when you implement micro service you

428
00:16:55,440 --> 00:16:57,360
should implement authentication and you

429
00:16:57,360 --> 00:17:00,880
should uh rely on sprint security uh

430
00:17:00,880 --> 00:17:03,279
spring security framework in order to

431
00:17:03,279 --> 00:17:04,880
implement

432
00:17:04,880 --> 00:17:06,640
authentication and in one day

433
00:17:06,640 --> 00:17:08,799
development team decided to add

434
00:17:08,799 --> 00:17:10,880
the set of microservices written in

435
00:17:10,880 --> 00:17:14,640
other languages and not gs because

436
00:17:14,640 --> 00:17:16,319
because they

437
00:17:16,319 --> 00:17:19,039
know that they have to protect external

438
00:17:19,039 --> 00:17:22,319
interfaces they went to the npm

439
00:17:22,319 --> 00:17:25,280
repository use some keywords found some

440
00:17:25,280 --> 00:17:27,919
libraries and used that libraries in

441
00:17:27,919 --> 00:17:30,480
order to protect endpoints of a new

442
00:17:30,480 --> 00:17:32,799
node.js microservices

443
00:17:32,799 --> 00:17:34,320
when i made the assessment the first

444
00:17:34,320 --> 00:17:35,919
strange was that the version of that

445
00:17:35,919 --> 00:17:38,120
library was

446
00:17:38,120 --> 00:17:40,799
0.1.1 and the last update was

447
00:17:40,799 --> 00:17:42,799
just two years

448
00:17:42,799 --> 00:17:43,840
ago

449
00:17:43,840 --> 00:17:46,559
then we i and development team briefly

450
00:17:46,559 --> 00:17:49,919
briefly re review the implementation

451
00:17:49,919 --> 00:17:52,000
review the source code of that library

452
00:17:52,000 --> 00:17:54,480
and we found that almost all json web

453
00:17:54,480 --> 00:17:57,280
token typical issue like

454
00:17:57,280 --> 00:17:59,440
using json web token without

455
00:17:59,440 --> 00:18:01,679
signature verification

456
00:18:01,679 --> 00:18:05,200
uh non-algorithm attack was was in that

457
00:18:05,200 --> 00:18:07,760
library and the bad news was that

458
00:18:07,760 --> 00:18:10,320
development team used that library not

459
00:18:10,320 --> 00:18:12,559
for one micro services but for

460
00:18:12,559 --> 00:18:14,559
seven micro services and

461
00:18:14,559 --> 00:18:16,720
we had to

462
00:18:16,720 --> 00:18:20,160
fix fix it in in all micro services so

463
00:18:20,160 --> 00:18:22,720
uh take away here is that

464
00:18:22,720 --> 00:18:25,200
you should because authentication is

465
00:18:25,200 --> 00:18:26,480
very

466
00:18:26,480 --> 00:18:29,120
one of the core features one of the core

467
00:18:29,120 --> 00:18:31,600
one one of the core

468
00:18:31,600 --> 00:18:33,520
security mitigation technique you should

469
00:18:33,520 --> 00:18:35,919
understand what portion of the code

470
00:18:35,919 --> 00:18:37,200
implement

471
00:18:37,200 --> 00:18:40,320
uh the next the next example is a

472
00:18:40,320 --> 00:18:44,720
also about authentication so uh

473
00:18:44,720 --> 00:18:46,799
is is is about github access token

474
00:18:46,799 --> 00:18:47,760
leakage

475
00:18:47,760 --> 00:18:49,840
uh so there was an application that was

476
00:18:49,840 --> 00:18:52,240
developed using jhipster uh framework

477
00:18:52,240 --> 00:18:54,640
and g hipster is a framework to

478
00:18:54,640 --> 00:18:57,919
uh to to to develop some microservice

479
00:18:57,919 --> 00:19:00,160
application and the hipster register

480
00:19:00,160 --> 00:19:01,919
itself in is a basic block that

481
00:19:01,919 --> 00:19:03,600
implements service registry and

482
00:19:03,600 --> 00:19:06,480
discovery feature for your application

483
00:19:06,480 --> 00:19:09,039
and that component has unprotected

484
00:19:09,039 --> 00:19:11,360
endpoint that's called management info

485
00:19:11,360 --> 00:19:13,440
that that can provide some general

486
00:19:13,440 --> 00:19:15,520
non-critical information about

487
00:19:15,520 --> 00:19:17,760
uh about version or something like that

488
00:19:17,760 --> 00:19:20,000
and that influence is open

489
00:19:20,000 --> 00:19:23,280
unprotected by design because

490
00:19:23,280 --> 00:19:26,080
it is it should not expose any critical

491
00:19:26,080 --> 00:19:28,480
information but in my particular case

492
00:19:28,480 --> 00:19:30,400
this endpoint was published outside and

493
00:19:30,400 --> 00:19:32,559
more interesting uh sends back the

494
00:19:32,559 --> 00:19:35,440
private github access token so and when

495
00:19:35,440 --> 00:19:38,000
i and investigated that issue with the

496
00:19:38,000 --> 00:19:39,679
development team and with their

497
00:19:39,679 --> 00:19:41,760
deployment team

498
00:19:41,760 --> 00:19:44,240
we figure out that it it was their

499
00:19:44,240 --> 00:19:46,559
intentional solution related with the

500
00:19:46,559 --> 00:19:49,120
deployment process itself

501
00:19:49,120 --> 00:19:51,679
and in order to mitigate it

502
00:19:51,679 --> 00:19:54,080
because we have a short amount of time

503
00:19:54,080 --> 00:19:56,880
strict strict strict time we were forced

504
00:19:56,880 --> 00:19:59,120
to make a private fork of jhipster

505
00:19:59,120 --> 00:20:01,440
registry protect that endpoint and

506
00:20:01,440 --> 00:20:03,120
implement authentication because

507
00:20:03,120 --> 00:20:05,679
development the deployment team

508
00:20:05,679 --> 00:20:07,520
can cannot simply

509
00:20:07,520 --> 00:20:09,679
us

510
00:20:10,240 --> 00:20:12,880
simply disable disable that feature so

511
00:20:12,880 --> 00:20:16,000
we we have to create our private fork it

512
00:20:16,000 --> 00:20:18,080
is better idea but anyway it is more

513
00:20:18,080 --> 00:20:20,960
secure than expose your

514
00:20:20,960 --> 00:20:22,799
token outside

515
00:20:22,799 --> 00:20:25,840
uh the next portion of tips is about

516
00:20:25,840 --> 00:20:27,840
authorization features or

517
00:20:27,840 --> 00:20:30,000
the firstly check uh

518
00:20:30,000 --> 00:20:31,679
tenant isolation

519
00:20:31,679 --> 00:20:34,480
design for all entities because

520
00:20:34,480 --> 00:20:37,280
uh the most application nowadays in

521
00:20:37,280 --> 00:20:38,960
maker microservice application is

522
00:20:38,960 --> 00:20:41,120
multi-tenant application that that is

523
00:20:41,120 --> 00:20:44,959
not an application for one customer

524
00:20:47,919 --> 00:20:49,360
it

525
00:20:49,360 --> 00:20:51,679
for sure will be an application that

526
00:20:51,679 --> 00:20:53,840
will be deployed somewhere in the cloud

527
00:20:53,840 --> 00:20:55,760
and provides

528
00:20:55,760 --> 00:20:58,320
uh software as a service or something

529
00:20:58,320 --> 00:21:01,200
like that for for multi-tenants for

530
00:21:01,200 --> 00:21:03,520
multiple tenancies so the first check

531
00:21:03,520 --> 00:21:05,360
you should understand the tenant as the

532
00:21:05,360 --> 00:21:08,640
isolation strategy and not all

533
00:21:08,640 --> 00:21:12,559
not not for just http request but from

534
00:21:12,559 --> 00:21:16,799
every every every uh

535
00:21:16,799 --> 00:21:19,440
uh design block portion of

536
00:21:19,440 --> 00:21:21,520
portion for example how does tenant

537
00:21:21,520 --> 00:21:23,679
isolation implemented for message queue

538
00:21:23,679 --> 00:21:26,400
system for database system for web

539
00:21:26,400 --> 00:21:28,799
socket and something like that

540
00:21:28,799 --> 00:21:30,400
so there must be a tenant isolation

541
00:21:30,400 --> 00:21:33,120
stress strategy uh

542
00:21:33,120 --> 00:21:36,159
design it as early as possible because

543
00:21:36,159 --> 00:21:38,640
cross-tenant violation is more

544
00:21:38,640 --> 00:21:41,360
serious authorization issue than uh

545
00:21:41,360 --> 00:21:44,640
intra-tenant access control violation

546
00:21:44,640 --> 00:21:46,559
the next tip is to do not forget to

547
00:21:46,559 --> 00:21:48,400
check external messages queue and web

548
00:21:48,400 --> 00:21:50,799
sockets authorization policy try to

549
00:21:50,799 --> 00:21:52,559
understand how does

550
00:21:52,559 --> 00:21:55,120
authorization rules works not only for

551
00:21:55,120 --> 00:21:57,600
http from http point of view but also

552
00:21:57,600 --> 00:22:00,640
for messaging sku and for web sockets

553
00:22:00,640 --> 00:22:02,960
and is it okay or not

554
00:22:02,960 --> 00:22:04,159
um

555
00:22:04,159 --> 00:22:06,400
and again to help yourself you can use

556
00:22:06,400 --> 00:22:09,039
tool like samgrep for example to extract

557
00:22:09,039 --> 00:22:11,760
unprotected api or for example api with

558
00:22:11,760 --> 00:22:13,760
some weak access control policy from

559
00:22:13,760 --> 00:22:16,799
source code or you can use very newer

560
00:22:16,799 --> 00:22:18,960
and interesting stateful api fuzzing

561
00:22:18,960 --> 00:22:21,520
technique to find to find some

562
00:22:21,520 --> 00:22:24,320
access control issue like eidor and bola

563
00:22:24,320 --> 00:22:27,039
so just a few words about stateful api

564
00:22:27,039 --> 00:22:29,120
filing technique is a modern technique

565
00:22:29,120 --> 00:22:30,960
for testing api

566
00:22:30,960 --> 00:22:32,799
and micro service applications that was

567
00:22:32,799 --> 00:22:35,280
originally proposed by

568
00:22:35,280 --> 00:22:37,600
microsoft research and the core idea

569
00:22:37,600 --> 00:22:38,400
that

570
00:22:38,400 --> 00:22:40,400
you have a system under the test that

571
00:22:40,400 --> 00:22:42,400
expose some api

572
00:22:42,400 --> 00:22:45,760
um and you also have an specification in

573
00:22:45,760 --> 00:22:47,919
open api format that describe all

574
00:22:47,919 --> 00:22:51,760
exposed interfaces and the tool that

575
00:22:51,760 --> 00:22:54,400
they implement stateful api fuzzing

576
00:22:54,400 --> 00:22:55,440
technique

577
00:22:55,440 --> 00:22:57,679
on the first step parse specification

578
00:22:57,679 --> 00:22:59,520
and understand dependencies between

579
00:22:59,520 --> 00:23:01,280
requests for example

580
00:23:01,280 --> 00:23:03,600
the two can understand that

581
00:23:03,600 --> 00:23:05,440
the post request

582
00:23:05,440 --> 00:23:07,120
produce the data

583
00:23:07,120 --> 00:23:10,799
with name id and that id consume is

584
00:23:10,799 --> 00:23:13,760
consumed by other requests like a get

585
00:23:13,760 --> 00:23:15,919
request and delete request or put

586
00:23:15,919 --> 00:23:17,200
requests

587
00:23:17,200 --> 00:23:19,679
so to get good coverage during dynamic

588
00:23:19,679 --> 00:23:21,360
testing dynamic security testing you

589
00:23:21,360 --> 00:23:23,919
should make the post post request first

590
00:23:23,919 --> 00:23:27,200
get an id and then use that id

591
00:23:27,200 --> 00:23:31,360
for the second request and third request

592
00:23:31,360 --> 00:23:32,320
uh

593
00:23:32,320 --> 00:23:34,640
to to okay and it's

594
00:23:34,640 --> 00:23:35,600
allowed it

595
00:23:35,600 --> 00:23:38,240
allows you to cover more function in

596
00:23:38,240 --> 00:23:41,360
your uh testing application and so then

597
00:23:41,360 --> 00:23:43,120
having the dependencies information the

598
00:23:43,120 --> 00:23:44,720
tool can generate

599
00:23:44,720 --> 00:23:47,600
tests in http request sequence

600
00:23:47,600 --> 00:23:50,799
in more intelligent way to to propagate

601
00:23:50,799 --> 00:23:52,799
data through cold chain

602
00:23:52,799 --> 00:23:55,440
and therefore get more good coverage now

603
00:23:55,440 --> 00:23:58,480
there are two two that as i as i know

604
00:23:58,480 --> 00:24:00,480
there are two tools that implement that

605
00:24:00,480 --> 00:24:03,279
new modern modern stateful api fuzzing

606
00:24:03,279 --> 00:24:05,520
technique one tool from microsoft

607
00:24:05,520 --> 00:24:07,520
research itself and other tools from

608
00:24:07,520 --> 00:24:10,320
yelp you can try it and i should also

609
00:24:10,320 --> 00:24:12,640
say that that tool implements some

610
00:24:12,640 --> 00:24:14,559
additional security checks

611
00:24:14,559 --> 00:24:17,200
uh based based on uh stateful api

612
00:24:17,200 --> 00:24:19,039
fuzzing technique for example restaurant

613
00:24:19,039 --> 00:24:23,440
arrest wrestler from microsoft has a

614
00:24:23,440 --> 00:24:27,200
checker that implement uh eidor checks

615
00:24:27,200 --> 00:24:29,919
and fast light here also has

616
00:24:29,919 --> 00:24:32,960
a checker that allows you to uh check

617
00:24:32,960 --> 00:24:35,039
your application

618
00:24:35,039 --> 00:24:37,679
again some typical tip

619
00:24:37,679 --> 00:24:39,679
again some idol so if you have an

620
00:24:39,679 --> 00:24:42,039
application if you have an open

621
00:24:42,039 --> 00:24:44,080
specification you can

622
00:24:44,080 --> 00:24:44,840
make

623
00:24:44,840 --> 00:24:47,360
that for fast fast check in order to

624
00:24:47,360 --> 00:24:49,440
understand whether or not that implement

625
00:24:49,440 --> 00:24:51,360
correctly

626
00:24:51,360 --> 00:24:54,320
and example in that in in that portion

627
00:24:54,320 --> 00:24:56,559
is the authorization

628
00:24:56,559 --> 00:24:58,720
is a cross-tenant resource success now

629
00:24:58,720 --> 00:25:00,559
in that case the system was multi-tenant

630
00:25:00,559 --> 00:25:02,720
system and tenant isolation was

631
00:25:02,720 --> 00:25:05,360
implemented based on domain name

632
00:25:05,360 --> 00:25:08,240
uh load balancer at the age extract host

633
00:25:08,240 --> 00:25:09,679
header uh

634
00:25:09,679 --> 00:25:12,400
process it and propagate standard name

635
00:25:12,400 --> 00:25:14,000
using some

636
00:25:14,000 --> 00:25:16,400
dedicated header for example called

637
00:25:16,400 --> 00:25:18,880
tenant

638
00:25:19,360 --> 00:25:21,840
microservice provided json web token

639
00:25:21,840 --> 00:25:23,760
verification to force authentication and

640
00:25:23,760 --> 00:25:26,720
authorization but use untrusted data in

641
00:25:26,720 --> 00:25:28,640
the tenant header to choose in which

642
00:25:28,640 --> 00:25:31,039
database microservice needs to read or

643
00:25:31,039 --> 00:25:33,440
write data so because microservices use

644
00:25:33,440 --> 00:25:37,120
untrusted data and attacker can

645
00:25:37,120 --> 00:25:39,520
from one tenant can touch resources from

646
00:25:39,520 --> 00:25:41,520
other tenants and the fix here was to

647
00:25:41,520 --> 00:25:44,400
add some tenant id information in uh

648
00:25:44,400 --> 00:25:47,440
sign it json web token and use it and

649
00:25:47,440 --> 00:25:49,520
use that tenant id information only

650
00:25:49,520 --> 00:25:50,400
after

651
00:25:50,400 --> 00:25:51,840
uh json web talking signature

652
00:25:51,840 --> 00:25:54,080
verification so development team had to

653
00:25:54,080 --> 00:25:56,159
update all micro services to fix that

654
00:25:56,159 --> 00:25:58,960
issue so

655
00:25:59,279 --> 00:26:01,679
again when we're talking about

656
00:26:01,679 --> 00:26:03,440
authorization feature

657
00:26:03,440 --> 00:26:04,240
uh

658
00:26:04,240 --> 00:26:06,080
answer the question

659
00:26:06,080 --> 00:26:06,799
is

660
00:26:06,799 --> 00:26:08,960
that application will

661
00:26:08,960 --> 00:26:11,440
will will deploy it under multi-tenancy

662
00:26:11,440 --> 00:26:13,919
infrastructure and if yes try to

663
00:26:13,919 --> 00:26:16,559
understand what multi-tenancy isolation

664
00:26:16,559 --> 00:26:19,039
strategy implemented in that application

665
00:26:19,039 --> 00:26:21,919
is there any flaws from design point of

666
00:26:21,919 --> 00:26:22,960
view

667
00:26:22,960 --> 00:26:25,760
in that strategy and only that move to

668
00:26:25,760 --> 00:26:28,400
their authorization

669
00:26:28,400 --> 00:26:31,120
itself of in in

670
00:26:31,120 --> 00:26:33,600
inside talent

671
00:26:33,600 --> 00:26:35,840
and other

672
00:26:35,840 --> 00:26:37,760
again simple simple simple example

673
00:26:37,760 --> 00:26:39,679
dealing with the micro service system is

674
00:26:39,679 --> 00:26:42,400
example of either vulnerability related

675
00:26:42,400 --> 00:26:45,679
with the web socket and

676
00:26:45,679 --> 00:26:47,360
and in that case there was a strong

677
00:26:47,360 --> 00:26:49,600
authentication during handshake step but

678
00:26:49,600 --> 00:26:51,919
an application used some guessable id

679
00:26:51,919 --> 00:26:54,480
parameters in api messages and did not

680
00:26:54,480 --> 00:26:56,880
implement any authorization check that

681
00:26:56,880 --> 00:26:58,240
that leads to

682
00:26:58,240 --> 00:26:59,679
tenant

683
00:26:59,679 --> 00:27:02,400
escape and again the main takeaways here

684
00:27:02,400 --> 00:27:05,279
is just not to forget about all other

685
00:27:05,279 --> 00:27:07,520
interfaces of your microservice system

686
00:27:07,520 --> 00:27:10,880
because microservice is not

687
00:27:10,880 --> 00:27:14,000
in most cases is not only http but also

688
00:27:14,000 --> 00:27:17,200
websockets messages queue and other and

689
00:27:17,200 --> 00:27:19,039
talking about websocket api security i

690
00:27:19,039 --> 00:27:22,000
highly recommend talked by mikhail igoro

691
00:27:22,000 --> 00:27:24,000
from

692
00:27:24,000 --> 00:27:25,520
activity conference

693
00:27:25,520 --> 00:27:28,159
there is a great examples or

694
00:27:28,159 --> 00:27:30,240
some

695
00:27:30,240 --> 00:27:32,080
vulnerabilities related to websockets

696
00:27:32,080 --> 00:27:34,080
api

697
00:27:34,080 --> 00:27:36,240
so i took all my findings and ideas and

698
00:27:36,240 --> 00:27:37,600
summarize it in microservices

699
00:27:37,600 --> 00:27:39,360
application security design assessment

700
00:27:39,360 --> 00:27:42,000
checklist and basically i just take some

701
00:27:42,000 --> 00:27:44,480
requirements from architecture block of

702
00:27:44,480 --> 00:27:46,320
owasp sos

703
00:27:46,320 --> 00:27:49,760
and create some refinement and detailed

704
00:27:49,760 --> 00:27:50,960
requirements

705
00:27:50,960 --> 00:27:53,279
dedicated for microservice specific

706
00:27:53,279 --> 00:27:55,120
domain so

707
00:27:55,120 --> 00:27:57,200
there was a few cases that did not trace

708
00:27:57,200 --> 00:28:00,000
to osp is like tenant isolation

709
00:28:00,000 --> 00:28:02,080
requirements

710
00:28:02,080 --> 00:28:02,799
but

711
00:28:02,799 --> 00:28:06,640
most of my checks are traced to to avast

712
00:28:06,640 --> 00:28:08,960
is and if you're interested in that

713
00:28:08,960 --> 00:28:12,799
checklist here is here is a link

714
00:28:13,360 --> 00:28:15,279
and so to finalize my tool here are some

715
00:28:15,279 --> 00:28:18,000
take takeaways so before diving into

716
00:28:18,000 --> 00:28:20,320
security assessment and looking for

717
00:28:20,320 --> 00:28:22,000
injections cross-site scripting you

718
00:28:22,000 --> 00:28:24,559
should try to identify microservice

719
00:28:24,559 --> 00:28:27,279
application core security feature and

720
00:28:27,279 --> 00:28:29,840
review them from architectural point of

721
00:28:29,840 --> 00:28:30,799
view

722
00:28:30,799 --> 00:28:33,840
and in most cases that features that you

723
00:28:33,840 --> 00:28:35,279
should

724
00:28:35,279 --> 00:28:37,039
review firstly standard isolation

725
00:28:37,039 --> 00:28:40,880
authentication authorization and logging

726
00:28:40,880 --> 00:28:42,559
there are several basic architectural

727
00:28:42,559 --> 00:28:43,919
checks that have to be taken into

728
00:28:43,919 --> 00:28:46,080
account during nearly all architecture

729
00:28:46,080 --> 00:28:49,279
assessment and in order to to do that in

730
00:28:49,279 --> 00:28:51,679
at scale you should create a checklist

731
00:28:51,679 --> 00:28:53,840
that cover typical vulnerabilities

732
00:28:53,840 --> 00:28:56,000
typical architectural vulnerabilities in

733
00:28:56,000 --> 00:28:58,880
microservice system and use it and

734
00:28:58,880 --> 00:29:01,120
update it during an assessment and to

735
00:29:01,120 --> 00:29:03,039
create such checklist you must you may

736
00:29:03,039 --> 00:29:04,080
start with

737
00:29:04,080 --> 00:29:07,120
my own checklist and update it

738
00:29:07,120 --> 00:29:09,520
and the last point here is and the

739
00:29:09,520 --> 00:29:12,159
microservice application itself is uh

740
00:29:12,159 --> 00:29:14,799
our architectures rapidly changes

741
00:29:14,799 --> 00:29:16,640
and typically

742
00:29:16,640 --> 00:29:19,919
nearly every week during every sprint

743
00:29:19,919 --> 00:29:21,279
uh

744
00:29:21,279 --> 00:29:24,320
there are some changes in microservices

745
00:29:24,320 --> 00:29:26,399
some dedicated micro service system and

746
00:29:26,399 --> 00:29:28,240
to find architecture related

747
00:29:28,240 --> 00:29:31,679
vulnerabilities in full you should use

748
00:29:31,679 --> 00:29:34,720
up-to-date uh architecture description

749
00:29:34,720 --> 00:29:37,520
and it is advisable to use

750
00:29:37,520 --> 00:29:39,600
architecture as a code approach and you

751
00:29:39,600 --> 00:29:41,760
may start with a very simple simple

752
00:29:41,760 --> 00:29:44,240
approach uh presented in wasp cheat

753
00:29:44,240 --> 00:29:46,960
sheet related with them

754
00:29:46,960 --> 00:29:50,640
uh document and microservice application

755
00:29:50,640 --> 00:29:54,080
uh so that's it from my site

756
00:29:54,080 --> 00:29:56,399
if you have any question

757
00:29:56,399 --> 00:30:00,000
we can discuss it thank you

