1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:07,839 --> 00:00:11,040
um so thank you the oas team and i'm

3
00:00:11,040 --> 00:00:13,360
super excited to be a part of the oauth

4
00:00:13,360 --> 00:00:15,280
20 anniversary

5
00:00:15,280 --> 00:00:17,039
my name is barack schuster

6
00:00:17,039 --> 00:00:20,320
i'm working with paolo alto networks and

7
00:00:20,320 --> 00:00:22,400
we are going to talk about

8
00:00:22,400 --> 00:00:25,519
policies code graph theory and we have

9
00:00:25,519 --> 00:00:28,880
some other cool stuff on the agenda

10
00:00:28,880 --> 00:00:32,238
the talk has five super easy parts i

11
00:00:32,238 --> 00:00:34,399
know that the graph theory might be a

12
00:00:34,399 --> 00:00:36,800
little intimidating but we will make it

13
00:00:36,800 --> 00:00:39,600
really simple for everyone uh to

14
00:00:39,600 --> 00:00:41,840
understand and start using it right

15
00:00:41,840 --> 00:00:43,040
after

16
00:00:43,040 --> 00:00:46,480
um so we'll start with talking about

17
00:00:46,480 --> 00:00:48,719
what is false use code

18
00:00:48,719 --> 00:00:52,079
uh we'll introduce graph theory uh no

19
00:00:52,079 --> 00:00:54,239
panic from combinatorics or mathematics

20
00:00:54,239 --> 00:00:57,199
we will not dive into that that deep uh

21
00:00:57,199 --> 00:00:59,199
we'll take a step further into an open

22
00:00:59,199 --> 00:01:01,680
source tool named chekhov and we'll see

23
00:01:01,680 --> 00:01:05,199
how we can write graph policies or

24
00:01:05,199 --> 00:01:08,720
policies code using using that tool

25
00:01:08,720 --> 00:01:11,360
um and from there we'll talk about how

26
00:01:11,360 --> 00:01:14,000
graph theory and threat modeling are a

27
00:01:14,000 --> 00:01:16,479
little bit of connected

28
00:01:16,479 --> 00:01:17,360
so

29
00:01:17,360 --> 00:01:19,520
let's start

30
00:01:19,520 --> 00:01:21,200
i thought about this talk for a long

31
00:01:21,200 --> 00:01:23,280
while and i

32
00:01:23,280 --> 00:01:27,040
started to explain what policy's code is

33
00:01:27,040 --> 00:01:30,880
um i'll take you through my very biased

34
00:01:30,880 --> 00:01:32,640
uh evolution

35
00:01:32,640 --> 00:01:35,680
um on a non-linear timeline getting

36
00:01:35,680 --> 00:01:38,320
exposed to security policies

37
00:01:38,320 --> 00:01:41,360
um you know different organizations

38
00:01:41,360 --> 00:01:42,479
um

39
00:01:42,479 --> 00:01:44,880
today i'm working on making yaml

40
00:01:44,880 --> 00:01:47,680
configuration being exciting uh like a

41
00:01:47,680 --> 00:01:49,520
lot of devops engineers

42
00:01:49,520 --> 00:01:51,840
um so i thought to give it a shot and

43
00:01:51,840 --> 00:01:53,119
try to

44
00:01:53,119 --> 00:01:55,680
make this yaml configuration exciting

45
00:01:55,680 --> 00:01:57,119
once again

46
00:01:57,119 --> 00:01:59,200
so when policies co policies were

47
00:01:59,200 --> 00:02:00,640
introduced to

48
00:02:00,640 --> 00:02:03,119
big enterprises the first phase was

49
00:02:03,119 --> 00:02:06,159
really policies paper

50
00:02:06,159 --> 00:02:08,080
my journey began when i started as a

51
00:02:08,080 --> 00:02:10,239
young software engineering and startup

52
00:02:10,239 --> 00:02:12,560
and i then moved into a big enterprise

53
00:02:12,560 --> 00:02:14,239
and had a chance to work

54
00:02:14,239 --> 00:02:16,160
on policies

55
00:02:16,160 --> 00:02:18,400
a lot of times

56
00:02:18,400 --> 00:02:21,120
and it was at the beginning at least

57
00:02:21,120 --> 00:02:22,480
very manual

58
00:02:22,480 --> 00:02:25,680
on kubernetes for example there are 263

59
00:02:25,680 --> 00:02:28,400
pages of established best practices

60
00:02:28,400 --> 00:02:30,480
written by very smart people business

61
00:02:30,480 --> 00:02:33,040
committees regulations that came up with

62
00:02:33,040 --> 00:02:34,959
those set of best practices to how to

63
00:02:34,959 --> 00:02:37,920
secure your data center or your cloud

64
00:02:37,920 --> 00:02:40,239
environment specifically for a

65
00:02:40,239 --> 00:02:42,000
kubernetes

66
00:02:42,000 --> 00:02:43,760
infrastructure

67
00:02:43,760 --> 00:02:45,840
after a while enterprises have started

68
00:02:45,840 --> 00:02:47,680
to work with auditors to enable

69
00:02:47,680 --> 00:02:50,319
expansion of business and make sure that

70
00:02:50,319 --> 00:02:52,480
the right methodology and tools are in

71
00:02:52,480 --> 00:02:53,680
place

72
00:02:53,680 --> 00:02:56,400
other best practices outside of dcis

73
00:02:56,400 --> 00:03:00,319
like iso software gdpr or pci

74
00:03:00,319 --> 00:03:02,319
if you work in the financial industry

75
00:03:02,319 --> 00:03:05,200
started to emerge and adapt to

76
00:03:05,200 --> 00:03:07,280
cloud architectures

77
00:03:07,280 --> 00:03:09,280
auditors asked

78
00:03:09,280 --> 00:03:11,200
questions like where do you store your

79
00:03:11,200 --> 00:03:13,280
data who has access to production

80
00:03:13,280 --> 00:03:14,400
environment

81
00:03:14,400 --> 00:03:16,879
what is the process to gain that access

82
00:03:16,879 --> 00:03:18,560
are you following secure development

83
00:03:18,560 --> 00:03:20,959
principles like os top 10

84
00:03:20,959 --> 00:03:22,560
and it was all good

85
00:03:22,560 --> 00:03:25,360
um as security practitioners and and

86
00:03:25,360 --> 00:03:27,120
engineering teams we started to have

87
00:03:27,120 --> 00:03:29,519
discussion on what should the market

88
00:03:29,519 --> 00:03:32,080
look like what should be the standard

89
00:03:32,080 --> 00:03:34,000
and it was the job of the auditor to

90
00:03:34,000 --> 00:03:36,080
guide us through that process

91
00:03:36,080 --> 00:03:38,000
um it was the job of the director of

92
00:03:38,000 --> 00:03:42,159
engineering cso cto ceo or or others to

93
00:03:42,159 --> 00:03:44,799
answer all those different questions

94
00:03:44,799 --> 00:03:46,400
um

95
00:03:46,400 --> 00:03:48,480
on on those environments and are those

96
00:03:48,480 --> 00:03:51,200
environments following best practices

97
00:03:51,200 --> 00:03:53,360
we had spreadsheets over spreadsheets

98
00:03:53,360 --> 00:03:55,120
and tons of documents

99
00:03:55,120 --> 00:03:58,879
demand was very good but the

100
00:03:58,879 --> 00:04:01,599
implementation of having policies

101
00:04:01,599 --> 00:04:04,480
uh was really a tedious manual task and

102
00:04:04,480 --> 00:04:07,360
really a boring task to have

103
00:04:07,360 --> 00:04:09,200
the good news is that another group of

104
00:04:09,200 --> 00:04:12,159
smart people got opinionated and changed

105
00:04:12,159 --> 00:04:14,640
the format of policies paper to a

106
00:04:14,640 --> 00:04:16,560
collaborative trader

107
00:04:16,560 --> 00:04:18,720
confluence and jira

108
00:04:18,720 --> 00:04:21,519
uh came into our

109
00:04:21,519 --> 00:04:24,080
policies life cycle

110
00:04:24,080 --> 00:04:27,280
and helped us to manage the risk

111
00:04:27,280 --> 00:04:29,680
so we can collaborate on policies and

112
00:04:29,680 --> 00:04:32,000
security practitioners and threat models

113
00:04:32,000 --> 00:04:34,880
that our application architecture

114
00:04:34,880 --> 00:04:37,600
has and we've created dedicated policies

115
00:04:37,600 --> 00:04:41,040
that are best matching to our team

116
00:04:41,040 --> 00:04:44,479
so we don't have a generalized 263 pages

117
00:04:44,479 --> 00:04:46,400
we have dedicated pages on a

118
00:04:46,400 --> 00:04:48,800
collaborative portal now and a set of

119
00:04:48,800 --> 00:04:49,919
tasks

120
00:04:49,919 --> 00:04:51,600
on a ticketing system

121
00:04:51,600 --> 00:04:54,240
uh that converted policies to

122
00:04:54,240 --> 00:04:56,560
tasks that devops teams and i.t teams

123
00:04:56,560 --> 00:04:58,080
should take

124
00:04:58,080 --> 00:05:00,720
but it still was a very manual task

125
00:05:00,720 --> 00:05:03,280
more collaborative but still manual

126
00:05:03,280 --> 00:05:05,199
showing tickets down the backlog of

127
00:05:05,199 --> 00:05:07,039
different application tips

128
00:05:07,039 --> 00:05:08,560
and it's really hard to keep up as the

129
00:05:08,560 --> 00:05:10,320
application

130
00:05:10,320 --> 00:05:11,759
kept growing

131
00:05:11,759 --> 00:05:14,800
so another group of smart people came

132
00:05:14,800 --> 00:05:18,080
and they created a set of scripts

133
00:05:18,080 --> 00:05:21,440
bash python scripts etc to continuously

134
00:05:21,440 --> 00:05:23,520
audit on an hourly

135
00:05:23,520 --> 00:05:27,520
or daily basis are vms databases later

136
00:05:27,520 --> 00:05:30,479
on serverless functions kubernetes bonds

137
00:05:30,479 --> 00:05:32,560
and their networking configuration

138
00:05:32,560 --> 00:05:34,880
to see if they are compliant with

139
00:05:34,880 --> 00:05:37,520
policies and best practices

140
00:05:37,520 --> 00:05:38,960
and

141
00:05:38,960 --> 00:05:40,000
if

142
00:05:40,000 --> 00:05:42,000
you are extremely using those trades you

143
00:05:42,000 --> 00:05:44,000
even added a step that automatically

144
00:05:44,000 --> 00:05:46,639
create a ticket within your ticketing

145
00:05:46,639 --> 00:05:48,880
system like jira and assign it to the

146
00:05:48,880 --> 00:05:50,960
matching owner of cloud resources if

147
00:05:50,960 --> 00:05:54,320
there is any drift from best practices

148
00:05:54,320 --> 00:05:56,000
so this helped cloud security

149
00:05:56,000 --> 00:05:58,160
engineering team or infosys team to

150
00:05:58,160 --> 00:05:59,919
scale their efforts

151
00:05:59,919 --> 00:06:02,560
auditing those cloud environments

152
00:06:02,560 --> 00:06:04,960
on all different servers

153
00:06:04,960 --> 00:06:09,840
but it inflated the sre's backlog

154
00:06:10,160 --> 00:06:12,479
the sre teams have lately transitioned

155
00:06:12,479 --> 00:06:15,199
to provisioning cloud resources

156
00:06:15,199 --> 00:06:17,680
from manually or from scripts

157
00:06:17,680 --> 00:06:19,520
to

158
00:06:19,520 --> 00:06:21,039
different infrastructure is code

159
00:06:21,039 --> 00:06:23,280
frameworks enabling creating

160
00:06:23,280 --> 00:06:25,680
microservices and to deploy them

161
00:06:25,680 --> 00:06:28,720
multiple times a day into production

162
00:06:28,720 --> 00:06:32,240
so this solution of monitoring

163
00:06:32,240 --> 00:06:34,479
based on hourly basis on daily or daily

164
00:06:34,479 --> 00:06:35,680
basis

165
00:06:35,680 --> 00:06:36,639
uh

166
00:06:36,639 --> 00:06:38,960
really was not talking with those tools

167
00:06:38,960 --> 00:06:40,639
and those methodologies of

168
00:06:40,639 --> 00:06:42,479
infrastructure and scope

169
00:06:42,479 --> 00:06:44,960
infrastructure is code is a set of ways

170
00:06:44,960 --> 00:06:46,479
to provision

171
00:06:46,479 --> 00:06:49,360
uh cloud resources in a collaborative

172
00:06:49,360 --> 00:06:50,479
manner

173
00:06:50,479 --> 00:06:53,520
uh instead of um a manual task

174
00:06:53,520 --> 00:06:55,440
and creating tickets on top of those

175
00:06:55,440 --> 00:06:57,440
really created a lot of friction and

176
00:06:57,440 --> 00:07:00,400
frustration with asserting teams

177
00:07:00,400 --> 00:07:03,199
let's take a look on the series job

178
00:07:03,199 --> 00:07:04,479
um

179
00:07:04,479 --> 00:07:06,880
previously sre teams have provisioned

180
00:07:06,880 --> 00:07:09,039
cloud resources through the different

181
00:07:09,039 --> 00:07:11,360
cloud provider consoles

182
00:07:11,360 --> 00:07:13,840
then they moved into automations writing

183
00:07:13,840 --> 00:07:16,720
some back scripts and we can provision a

184
00:07:16,720 --> 00:07:20,560
new vm a new ec2 instance pretty easily

185
00:07:20,560 --> 00:07:23,039
using a set of bash commands

186
00:07:23,039 --> 00:07:26,160
but what about stuff like reliability

187
00:07:26,160 --> 00:07:28,240
debugging reusability

188
00:07:28,240 --> 00:07:31,520
collaboration versioning and security

189
00:07:31,520 --> 00:07:35,120
where would those be configured

190
00:07:35,120 --> 00:07:36,319
and

191
00:07:36,319 --> 00:07:38,319
let's take this example we have a web

192
00:07:38,319 --> 00:07:40,720
server configuration and a security

193
00:07:40,720 --> 00:07:41,520
group

194
00:07:41,520 --> 00:07:44,879
the web server have port 22 open to the

195
00:07:44,879 --> 00:07:47,280
entire wall meaning i can do ssh

196
00:07:47,280 --> 00:07:49,599
connection to that web server

197
00:07:49,599 --> 00:07:51,520
and the web server is attached to that

198
00:07:51,520 --> 00:07:54,240
firewall to that security group

199
00:07:54,240 --> 00:07:55,440
so

200
00:07:55,440 --> 00:07:57,280
i can configure now

201
00:07:57,280 --> 00:07:59,919
a web server in a very descriptive way

202
00:07:59,919 --> 00:08:01,759
and it's just as i

203
00:08:01,759 --> 00:08:05,039
did live i can review as part of a

204
00:08:05,039 --> 00:08:07,120
collaborative process together with the

205
00:08:07,120 --> 00:08:08,560
security engineer

206
00:08:08,560 --> 00:08:11,360
what configuration is good in that

207
00:08:11,360 --> 00:08:13,680
specific

208
00:08:13,680 --> 00:08:16,160
web server and what configuration should

209
00:08:16,160 --> 00:08:17,120
be

210
00:08:17,120 --> 00:08:18,560
fixed

211
00:08:18,560 --> 00:08:20,800
the cloud configuration when you're

212
00:08:20,800 --> 00:08:24,160
using infrastructure's code saves states

213
00:08:24,160 --> 00:08:26,960
so you can automatically

214
00:08:26,960 --> 00:08:29,440
deploy tear down or see the current

215
00:08:29,440 --> 00:08:32,000
structure of your cloud infrastructure

216
00:08:32,000 --> 00:08:34,880
and it's immutable

217
00:08:36,719 --> 00:08:38,080
so

218
00:08:38,080 --> 00:08:40,159
now doubles engineers can make sure that

219
00:08:40,159 --> 00:08:42,799
they can collaborate and can

220
00:08:42,799 --> 00:08:46,560
debug and configure reliability and

221
00:08:46,560 --> 00:08:49,200
backups on on resources

222
00:08:49,200 --> 00:08:51,680
um and everything is stored in code and

223
00:08:51,680 --> 00:08:53,600
version control and we can roll back to

224
00:08:53,600 --> 00:08:55,440
different versions

225
00:08:55,440 --> 00:08:58,800
and make it very repeatable and scalable

226
00:08:58,800 --> 00:09:00,640
and for the first person of this stock

227
00:09:00,640 --> 00:09:02,959
you can make it more secure

228
00:09:02,959 --> 00:09:04,399
with the infrastructure provisioning

229
00:09:04,399 --> 00:09:06,839
code security needs to happen in code as

230
00:09:06,839 --> 00:09:11,120
well uh but that's easier said than done

231
00:09:11,120 --> 00:09:13,120
infrastructure as code allows us to

232
00:09:13,120 --> 00:09:16,880
manage the scroll uh but introduces also

233
00:09:16,880 --> 00:09:18,320
complexity

234
00:09:18,320 --> 00:09:20,160
because

235
00:09:20,160 --> 00:09:22,000
you can have your configuration scatter

236
00:09:22,000 --> 00:09:24,320
around across different

237
00:09:24,320 --> 00:09:27,120
repositories across different teams

238
00:09:27,120 --> 00:09:29,360
um and your configuration can be really

239
00:09:29,360 --> 00:09:31,360
messed up and this is where cloud dev

240
00:09:31,360 --> 00:09:32,959
set ups can

241
00:09:32,959 --> 00:09:36,560
powered by automation can really help us

242
00:09:36,560 --> 00:09:37,600
so

243
00:09:37,600 --> 00:09:40,560
now we can see that each commit over the

244
00:09:40,560 --> 00:09:41,839
history

245
00:09:41,839 --> 00:09:43,760
can be tracked we can track the owner of

246
00:09:43,760 --> 00:09:47,279
it and we can review a security team

247
00:09:47,279 --> 00:09:50,560
what should be fixed on a specific

248
00:09:50,560 --> 00:09:53,359
configuration

249
00:09:53,440 --> 00:09:54,800
it's better

250
00:09:54,800 --> 00:09:57,040
but we're still missing the automation

251
00:09:57,040 --> 00:09:58,880
of security around it

252
00:09:58,880 --> 00:10:00,480
before diving into how we'll implement

253
00:10:00,480 --> 00:10:02,320
security let's take a look on what's the

254
00:10:02,320 --> 00:10:04,880
situation out there at bridgepool we've

255
00:10:04,880 --> 00:10:07,760
scanned thousands of home charts and

256
00:10:07,760 --> 00:10:10,399
terraform repositories from the open

257
00:10:10,399 --> 00:10:12,959
source uh github artifact cap terminal

258
00:10:12,959 --> 00:10:15,440
registry and various other services and

259
00:10:15,440 --> 00:10:18,640
we were curious about our hypotheses of

260
00:10:18,640 --> 00:10:21,519
how many misconfigured

261
00:10:21,519 --> 00:10:23,680
templates there are there in the wild in

262
00:10:23,680 --> 00:10:25,680
the open source and we've discovered

263
00:10:25,680 --> 00:10:26,880
that

264
00:10:26,880 --> 00:10:28,800
almost half of the miscon of the

265
00:10:28,800 --> 00:10:29,839
available

266
00:10:29,839 --> 00:10:31,440
uh

267
00:10:31,440 --> 00:10:33,680
open source modules of uh

268
00:10:33,680 --> 00:10:37,040
terraform is misconfigured um and a lot

269
00:10:37,040 --> 00:10:39,839
of home charts are not compliant as well

270
00:10:39,839 --> 00:10:42,079
and the kind of misconfigurations that

271
00:10:42,079 --> 00:10:45,279
we've seen are various from lack of

272
00:10:45,279 --> 00:10:47,279
blogging insecure protocols and

273
00:10:47,279 --> 00:10:49,519
encrypted databases

274
00:10:49,519 --> 00:10:51,519
and together with our research team at

275
00:10:51,519 --> 00:10:54,240
palo alto unit 42 we've discovered

276
00:10:54,240 --> 00:10:55,200
that

277
00:10:55,200 --> 00:10:57,680
95 of the cloud security issues are

278
00:10:57,680 --> 00:10:59,760
actually related to

279
00:10:59,760 --> 00:11:01,200
misconfig

280
00:11:01,200 --> 00:11:03,120
where on the open source repositories

281
00:11:03,120 --> 00:11:06,640
that we've scanned 43 of the percent of

282
00:11:06,640 --> 00:11:10,079
the cloud databases are not encrypted um

283
00:11:10,079 --> 00:11:12,320
which was important customer data

284
00:11:12,320 --> 00:11:14,720
potentially at risk

285
00:11:14,720 --> 00:11:18,079
and 60 of the cloud storage services did

286
00:11:18,079 --> 00:11:20,240
not have logging enabled

287
00:11:20,240 --> 00:11:21,920
which made it really

288
00:11:21,920 --> 00:11:24,000
difficult to review an audit trail of

289
00:11:24,000 --> 00:11:26,839
events that are security related to

290
00:11:26,839 --> 00:11:30,240
incidents those different configurations

291
00:11:30,240 --> 00:11:32,880
can be risky and can provide remote

292
00:11:32,880 --> 00:11:34,959
access to those cloud resources and can

293
00:11:34,959 --> 00:11:38,079
be used as an attack vector

294
00:11:38,079 --> 00:11:40,959
in addition security risks um obviously

295
00:11:40,959 --> 00:11:43,120
can impact uh

296
00:11:43,120 --> 00:11:45,279
business uh misconfigurations

297
00:11:45,279 --> 00:11:48,160
corresponds to compliance benchmarks

298
00:11:48,160 --> 00:11:50,639
um and in order to be compliant with the

299
00:11:50,639 --> 00:11:53,760
specific framework like saktu hipaa pci

300
00:11:53,760 --> 00:11:56,480
you must follow a set of configuration

301
00:11:56,480 --> 00:11:58,079
guidelines

302
00:11:58,079 --> 00:12:00,639
and the devsecops name

303
00:12:00,639 --> 00:12:03,600
is not only to find misconfigurations

304
00:12:03,600 --> 00:12:06,959
but to prevent them very early on

305
00:12:06,959 --> 00:12:09,600
democratizing the process to developers

306
00:12:09,600 --> 00:12:12,399
and really catch it before it supplies

307
00:12:12,399 --> 00:12:14,560
to the cloud

308
00:12:14,560 --> 00:12:17,279
configuration

309
00:12:18,320 --> 00:12:20,480
so

310
00:12:20,480 --> 00:12:21,200
the

311
00:12:21,200 --> 00:12:24,639
another problem that we have is the

312
00:12:24,639 --> 00:12:28,000
ratio between security teams and

313
00:12:28,000 --> 00:12:30,720
development teams

314
00:12:30,720 --> 00:12:34,320
the one of our issues there is that we

315
00:12:34,320 --> 00:12:36,160
the ratio is really one security

316
00:12:36,160 --> 00:12:38,399
engineer to 100 different developers and

317
00:12:38,399 --> 00:12:40,240
it's really hard to

318
00:12:40,240 --> 00:12:41,920
review

319
00:12:41,920 --> 00:12:43,240
those

320
00:12:43,240 --> 00:12:45,920
misconfigurations manually over github

321
00:12:45,920 --> 00:12:48,079
over each pull request over each code

322
00:12:48,079 --> 00:12:52,320
change and we want to scale that process

323
00:12:52,320 --> 00:12:54,800
one insecure infrastructure template can

324
00:12:54,800 --> 00:12:57,519
lead to 100 different deployments

325
00:12:57,519 --> 00:13:01,200
and thousands of alerts

326
00:13:01,200 --> 00:13:03,360
and we have multiple

327
00:13:03,360 --> 00:13:06,000
ways to deploy infrastructures code we

328
00:13:06,000 --> 00:13:08,399
have hundreds of security

329
00:13:08,399 --> 00:13:10,959
uh configurations for cloud resources

330
00:13:10,959 --> 00:13:13,360
and we have a lot of cloud providers and

331
00:13:13,360 --> 00:13:14,639
it's really

332
00:13:14,639 --> 00:13:17,440
getting hard and not really sustainable

333
00:13:17,440 --> 00:13:19,040
it's hard to keep up the pace of new

334
00:13:19,040 --> 00:13:22,079
services being created some of them are

335
00:13:22,079 --> 00:13:24,399
even not real over the different cloud

336
00:13:24,399 --> 00:13:27,760
providers and it's really uh an endless

337
00:13:27,760 --> 00:13:30,160
journey trying to keep up the pace of

338
00:13:30,160 --> 00:13:33,200
new services being provisioned new uh

339
00:13:33,200 --> 00:13:35,839
ingredients within our org

340
00:13:35,839 --> 00:13:37,279
and it's hard for us as security

341
00:13:37,279 --> 00:13:40,000
practitioners to keep up that base

342
00:13:40,000 --> 00:13:42,240
and engineering are not happy either

343
00:13:42,240 --> 00:13:44,639
because security is coming after the

344
00:13:44,639 --> 00:13:46,160
fact

345
00:13:46,160 --> 00:13:48,320
and not part of the development life

346
00:13:48,320 --> 00:13:51,279
cycle and what we want to change is

347
00:13:51,279 --> 00:13:53,680
from moving from a three months

348
00:13:53,680 --> 00:13:56,639
cycle and long security reviews that

349
00:13:56,639 --> 00:13:59,360
does not always make sense into an agile

350
00:13:59,360 --> 00:14:01,600
process where we deploy

351
00:14:01,600 --> 00:14:03,760
in each end of sprint of two weeks or

352
00:14:03,760 --> 00:14:05,760
three weeks

353
00:14:05,760 --> 00:14:08,320
and have a scalable security cadence as

354
00:14:08,320 --> 00:14:10,639
part of this string process

355
00:14:10,639 --> 00:14:13,040
we want the feedback to be very early on

356
00:14:13,040 --> 00:14:15,199
and we want to solve the root problem of

357
00:14:15,199 --> 00:14:17,279
each misconfig

358
00:14:17,279 --> 00:14:19,600
and we can't expect

359
00:14:19,600 --> 00:14:23,040
devs to be the security expert or or

360
00:14:23,040 --> 00:14:26,399
actually can we so let's let's try

361
00:14:26,399 --> 00:14:28,639
some other smart people have gathered

362
00:14:28,639 --> 00:14:32,399
and have created a linter

363
00:14:32,399 --> 00:14:34,800
an ability to inspect the code of the

364
00:14:34,800 --> 00:14:36,399
cloud configuration

365
00:14:36,399 --> 00:14:38,959
very early on and to write tests on

366
00:14:38,959 --> 00:14:40,800
infrastructure that will make it secure

367
00:14:40,800 --> 00:14:42,000
and make sure that there is best

368
00:14:42,000 --> 00:14:43,600
practices in place

369
00:14:43,600 --> 00:14:46,959
making it developer first um

370
00:14:46,959 --> 00:14:49,199
and codified automated and integrated to

371
00:14:49,199 --> 00:14:51,760
the development life cycle

372
00:14:51,760 --> 00:14:53,360
the dev centric approach to cloud

373
00:14:53,360 --> 00:14:54,480
security

374
00:14:54,480 --> 00:14:56,240
put infrastructures code at its core

375
00:14:56,240 --> 00:14:57,440
enabling

376
00:14:57,440 --> 00:14:59,920
teams to develop secure infrastructure

377
00:14:59,920 --> 00:15:01,760
at the same pace

378
00:15:01,760 --> 00:15:04,720
as they're developing reliability or

379
00:15:04,720 --> 00:15:06,480
scale

380
00:15:06,480 --> 00:15:09,040
providing automated feedback very early

381
00:15:09,040 --> 00:15:10,839
on

382
00:15:10,839 --> 00:15:14,399
so let's see how how tools like like

383
00:15:14,399 --> 00:15:16,800
charcoal can hold we have an

384
00:15:16,800 --> 00:15:19,120
understanding what a misconfig are and

385
00:15:19,120 --> 00:15:21,279
that it's important to address them

386
00:15:21,279 --> 00:15:22,959
but let's try to find and fix the

387
00:15:22,959 --> 00:15:25,279
misconception

388
00:15:25,279 --> 00:15:26,560
um so

389
00:15:26,560 --> 00:15:28,079
we've written chekhov i'm actually one

390
00:15:28,079 --> 00:15:30,639
of the main things chekov was introduced

391
00:15:30,639 --> 00:15:32,880
at the end of 2019

392
00:15:32,880 --> 00:15:33,839
um

393
00:15:33,839 --> 00:15:37,279
when we struggled to find a tool that

394
00:15:37,279 --> 00:15:38,720
will help us to

395
00:15:38,720 --> 00:15:40,000
inspect the configuration

396
00:15:40,000 --> 00:15:41,839
pre-provisioning

397
00:15:41,839 --> 00:15:43,920
since then uh chekhov today have more

398
00:15:43,920 --> 00:15:46,639
than three million downloads uh deployed

399
00:15:46,639 --> 00:15:49,279
in tens of thousands of ci pipelines and

400
00:15:49,279 --> 00:15:51,519
it has really good community adoption

401
00:15:51,519 --> 00:15:53,680
around it more than 100 different

402
00:15:53,680 --> 00:15:55,040
contributors

403
00:15:55,040 --> 00:15:56,959
um with one and

404
00:15:56,959 --> 00:15:58,959
more than 1 000

405
00:15:58,959 --> 00:16:00,160
policies

406
00:16:00,160 --> 00:16:02,160
helping to inspect different frameworks

407
00:16:02,160 --> 00:16:04,079
of infrastructures codes such as cloud

408
00:16:04,079 --> 00:16:07,279
formation terraform kubernetes arm

409
00:16:07,279 --> 00:16:10,240
templates home charts aws cdk serverless

410
00:16:10,240 --> 00:16:12,639
docker files and the list goes on

411
00:16:12,639 --> 00:16:14,160
you can find checkoff on a specific

412
00:16:14,160 --> 00:16:17,519
directory and let it scan your

413
00:16:17,519 --> 00:16:19,920
your infrastructure

414
00:16:19,920 --> 00:16:22,639
and to inspect it by these thousands of

415
00:16:22,639 --> 00:16:23,759
pulses

416
00:16:23,759 --> 00:16:26,160
checkup can also be deployed on top of

417
00:16:26,160 --> 00:16:28,880
ci cd

418
00:16:28,880 --> 00:16:32,639
and can help us to fix the source issue

419
00:16:32,639 --> 00:16:34,560
so if we have an s3 bucket like the

420
00:16:34,560 --> 00:16:36,639
following one that does not have

421
00:16:36,639 --> 00:16:39,680
versioning enabled we can actually

422
00:16:39,680 --> 00:16:41,759
identify using check of what are the

423
00:16:41,759 --> 00:16:45,199
missing lines and fix them for you

424
00:16:45,199 --> 00:16:47,920
so let's start with

425
00:16:47,920 --> 00:16:50,639
installing checkout so the thing that

426
00:16:50,639 --> 00:16:53,759
i'm going to do is i installed checkout

427
00:16:53,759 --> 00:16:56,560
and i've executed here the results let's

428
00:16:56,560 --> 00:16:58,639
do it again we'll run pip install

429
00:16:58,639 --> 00:16:59,680
checkout

430
00:16:59,680 --> 00:17:02,720
and we'll take a look on our terraform

431
00:17:02,720 --> 00:17:05,720
file

432
00:17:07,039 --> 00:17:08,959
we'll run it on a specific directory

433
00:17:08,959 --> 00:17:12,480
with a specific policy id

434
00:17:12,640 --> 00:17:14,319
and we'll see that we do not have

435
00:17:14,319 --> 00:17:18,160
versioning enabled on our s3 packet

436
00:17:18,160 --> 00:17:20,480
and the policy looks like this we have a

437
00:17:20,480 --> 00:17:22,000
specific attribute that we want to

438
00:17:22,000 --> 00:17:24,000
inspect which is versioning and we want

439
00:17:24,000 --> 00:17:25,679
to make sure that it's enabled and the

440
00:17:25,679 --> 00:17:28,079
resource type is s3 buckets

441
00:17:28,079 --> 00:17:30,160
pretty simple nine lines of code and you

442
00:17:30,160 --> 00:17:32,160
have a policy that is inspecting an

443
00:17:32,160 --> 00:17:34,400
attribute

444
00:17:34,400 --> 00:17:36,000
let's try to make it a little bit more

445
00:17:36,000 --> 00:17:38,799
complicated a real life scenario would

446
00:17:38,799 --> 00:17:41,679
not need only to inspect a specific

447
00:17:41,679 --> 00:17:44,400
property because on a three

448
00:17:44,400 --> 00:17:46,880
tiers web application we have

449
00:17:46,880 --> 00:17:49,039
a lot of resources that are building our

450
00:17:49,039 --> 00:17:51,679
architecture on the following example we

451
00:17:51,679 --> 00:17:53,600
have a user accessing a website through

452
00:17:53,600 --> 00:17:56,240
a dns record a cdn

453
00:17:56,240 --> 00:17:59,440
and cdn is a has a dependency on the

454
00:17:59,440 --> 00:18:01,600
files that are being served that are

455
00:18:01,600 --> 00:18:03,760
stored in s3 bucket the application

456
00:18:03,760 --> 00:18:06,000
server has a load balancer that is

457
00:18:06,000 --> 00:18:09,760
connected to a set of vms in ec2s in aws

458
00:18:09,760 --> 00:18:13,600
those specific vms have an sqs queue

459
00:18:13,600 --> 00:18:16,480
that is doing data processing

460
00:18:16,480 --> 00:18:18,320
an auto scanning group that is attached

461
00:18:18,320 --> 00:18:22,799
to a database and we have also an

462
00:18:22,799 --> 00:18:26,080
file storage that is attached as a mount

463
00:18:26,080 --> 00:18:28,960
to that uh set of vms

464
00:18:28,960 --> 00:18:31,120
and when we try to analyze what is the

465
00:18:31,120 --> 00:18:33,039
security posture of such environment and

466
00:18:33,039 --> 00:18:35,600
to do threat modeling really want to

467
00:18:35,600 --> 00:18:38,640
inspect attributes and properties not of

468
00:18:38,640 --> 00:18:41,280
a single resource but on the dependency

469
00:18:41,280 --> 00:18:44,400
of them trying to understand if an actor

470
00:18:44,400 --> 00:18:48,160
can actually access the storage through

471
00:18:48,160 --> 00:18:50,960
a movement through those dependencies

472
00:18:50,960 --> 00:18:53,520
so we need a strategy to create

473
00:18:53,520 --> 00:18:56,400
dependency over policies and we need a

474
00:18:56,400 --> 00:18:58,559
way to democratize the process of threat

475
00:18:58,559 --> 00:19:01,520
modeling which is not scalable to

476
00:19:01,520 --> 00:19:03,280
all of our engineers

477
00:19:03,280 --> 00:19:04,080
so

478
00:19:04,080 --> 00:19:07,679
let's dive in to graph theory

479
00:19:07,679 --> 00:19:11,679
this is a node a node represents

480
00:19:11,679 --> 00:19:15,280
a code block in our infrastructures code

481
00:19:15,280 --> 00:19:17,840
that might be dependent in other code

482
00:19:17,840 --> 00:19:18,720
blocks

483
00:19:18,720 --> 00:19:20,720
our code block has a set of attributes

484
00:19:20,720 --> 00:19:23,200
like versioning for s3 bucket

485
00:19:23,200 --> 00:19:24,480
and

486
00:19:24,480 --> 00:19:26,880
can be represented in a graph as a

487
00:19:26,880 --> 00:19:28,240
specific node

488
00:19:28,240 --> 00:19:30,240
and we have an edge

489
00:19:30,240 --> 00:19:32,400
edge is the connection that represents

490
00:19:32,400 --> 00:19:35,280
the dependencies between two nodes so

491
00:19:35,280 --> 00:19:39,440
for example if i have a vm i can see

492
00:19:39,440 --> 00:19:41,600
what is the connected

493
00:19:41,600 --> 00:19:43,440
um

494
00:19:43,440 --> 00:19:46,000
volume of storage by traversing this

495
00:19:46,000 --> 00:19:47,120
edge

496
00:19:47,120 --> 00:19:49,760
and this is a dag a directed acyclic

497
00:19:49,760 --> 00:19:50,880
graph

498
00:19:50,880 --> 00:19:53,600
um the dag represents the connections

499
00:19:53,600 --> 00:19:56,240
between different resources or the

500
00:19:56,240 --> 00:19:59,360
dependency between different code bonds

501
00:19:59,360 --> 00:20:01,280
and the last operation that we will do

502
00:20:01,280 --> 00:20:04,159
on these graphs is actually a walk

503
00:20:04,159 --> 00:20:06,799
we have pikachu here pikachu can move

504
00:20:06,799 --> 00:20:09,919
from one node to another node by

505
00:20:09,919 --> 00:20:12,240
traversing the specific edges

506
00:20:12,240 --> 00:20:13,919
while doing that

507
00:20:13,919 --> 00:20:17,280
asking what is configured on each edge

508
00:20:17,280 --> 00:20:19,760
and what is the attributes of those

509
00:20:19,760 --> 00:20:21,039
edges

510
00:20:21,039 --> 00:20:24,559
so if we have our web application

511
00:20:24,559 --> 00:20:28,559
we can try to ask traversing pulses

512
00:20:28,559 --> 00:20:30,480
where we can

513
00:20:30,480 --> 00:20:32,840
translate this specific

514
00:20:32,840 --> 00:20:35,360
architecture to a directed the cyclic

515
00:20:35,360 --> 00:20:36,640
graph

516
00:20:36,640 --> 00:20:38,720
and we can ask pikachu

517
00:20:38,720 --> 00:20:42,559
to traverse and try to identify if as a

518
00:20:42,559 --> 00:20:44,640
result of dependencies we have a

519
00:20:44,640 --> 00:20:46,640
misconfigured environment do we have a

520
00:20:46,640 --> 00:20:48,640
threat

521
00:20:48,640 --> 00:20:49,840
so

522
00:20:49,840 --> 00:20:52,400
let's create a policy i created a car

523
00:20:52,400 --> 00:20:54,559
policy a graph policy in chekhov again

524
00:20:54,559 --> 00:20:56,400
chekhov is open source and you can

525
00:20:56,400 --> 00:20:58,960
always use it under apache2 license

526
00:20:58,960 --> 00:21:01,840
uh that try to understand if my emr

527
00:21:01,840 --> 00:21:03,600
clusters have

528
00:21:03,600 --> 00:21:05,120
security groups that are open to the

529
00:21:05,120 --> 00:21:07,360
world are they public

530
00:21:07,360 --> 00:21:09,600
it's an obvious question

531
00:21:09,600 --> 00:21:12,320
but it's hard to check that because to

532
00:21:12,320 --> 00:21:14,720
check that i need to

533
00:21:14,720 --> 00:21:17,760
inspect all of my emr clusters

534
00:21:17,760 --> 00:21:20,240
traverse of over all these connected

535
00:21:20,240 --> 00:21:22,799
security groups which is the cloud aws

536
00:21:22,799 --> 00:21:25,600
cloud firewall rule equivalent see that

537
00:21:25,600 --> 00:21:27,280
the connection exists

538
00:21:27,280 --> 00:21:28,960
for each security group i need to check

539
00:21:28,960 --> 00:21:31,360
that there is a cidr block

540
00:21:31,360 --> 00:21:32,799
that is not

541
00:21:32,799 --> 00:21:34,960
open to zero zero zero which is the

542
00:21:34,960 --> 00:21:37,840
public internet

543
00:21:38,559 --> 00:21:39,440
so

544
00:21:39,440 --> 00:21:42,559
i need to check that i have a

545
00:21:42,559 --> 00:21:46,640
security group that is connected

546
00:21:46,640 --> 00:21:48,960
to the emr cluster

547
00:21:48,960 --> 00:21:51,360
and that it has a variable that

548
00:21:51,360 --> 00:21:53,440
represents the cidr block and to

549
00:21:53,440 --> 00:21:56,000
validate if it's zero zero zero

550
00:21:56,000 --> 00:21:56,720
so

551
00:21:56,720 --> 00:22:00,400
in checkout we've built this graph that

552
00:22:00,400 --> 00:22:02,320
helps us to identify the different

553
00:22:02,320 --> 00:22:05,360
connection between code blocks here is

554
00:22:05,360 --> 00:22:06,640
an actual

555
00:22:06,640 --> 00:22:08,640
code block of an emr cluster of the

556
00:22:08,640 --> 00:22:11,200
production engineering team

557
00:22:11,200 --> 00:22:13,440
there is connected to a security group

558
00:22:13,440 --> 00:22:16,080
that is actually public and bad and it's

559
00:22:16,080 --> 00:22:18,320
bad because of the dependencies this

560
00:22:18,320 --> 00:22:20,480
specific block is not bad

561
00:22:20,480 --> 00:22:22,320
as a standalone block

562
00:22:22,320 --> 00:22:23,039
but

563
00:22:23,039 --> 00:22:25,360
as a result of the connection it's

564
00:22:25,360 --> 00:22:30,159
exposing the mr casa for an attack

565
00:22:30,159 --> 00:22:32,720
so that's how graph theory work with

566
00:22:32,720 --> 00:22:34,320
infrastructure is code and how does it

567
00:22:34,320 --> 00:22:36,960
build in to check of internals

568
00:22:36,960 --> 00:22:38,880
when chekhov reads an infrastructure

569
00:22:38,880 --> 00:22:40,559
it's code like terraform or cloud

570
00:22:40,559 --> 00:22:42,080
formation

571
00:22:42,080 --> 00:22:44,880
it creates in memory directed as you

572
00:22:44,880 --> 00:22:47,520
click graph and it can use two type of

573
00:22:47,520 --> 00:22:50,320
policies either attribute based policies

574
00:22:50,320 --> 00:22:52,400
written in python like we've seen on the

575
00:22:52,400 --> 00:22:54,400
beginning on s3 bucket versioning and

576
00:22:54,400 --> 00:22:56,960
graph policies there's more examples of

577
00:22:56,960 --> 00:23:00,320
a threat modeling process

578
00:23:00,480 --> 00:23:01,360
and

579
00:23:01,360 --> 00:23:03,919
it lets those different policies to scan

580
00:23:03,919 --> 00:23:08,159
the graph and gives us their results

581
00:23:08,159 --> 00:23:10,480
and it can be implemented

582
00:23:10,480 --> 00:23:12,880
across the development license we can

583
00:23:12,880 --> 00:23:16,960
have checkoff on the ide the pre-commit

584
00:23:16,960 --> 00:23:19,200
the pull requests the icd and runtime

585
00:23:19,200 --> 00:23:20,240
phase

586
00:23:20,240 --> 00:23:23,200
the more early that you're running uh

587
00:23:23,200 --> 00:23:24,320
check on

588
00:23:24,320 --> 00:23:25,120
um

589
00:23:25,120 --> 00:23:26,880
you will

590
00:23:26,880 --> 00:23:28,960
democratize the process

591
00:23:28,960 --> 00:23:31,039
of

592
00:23:31,039 --> 00:23:33,679
validating code and fixing it but you'll

593
00:23:33,679 --> 00:23:35,520
have less context to the production

594
00:23:35,520 --> 00:23:36,640
environment

595
00:23:36,640 --> 00:23:38,960
so the more left that you go you are

596
00:23:38,960 --> 00:23:41,039
fixing the problem more early on but

597
00:23:41,039 --> 00:23:43,279
less production context

598
00:23:43,279 --> 00:23:45,600
and as you go forward from

599
00:23:45,600 --> 00:23:47,600
fixing an ide

600
00:23:47,600 --> 00:23:49,600
to the pull request phase

601
00:23:49,600 --> 00:23:51,440
you get more context like environment

602
00:23:51,440 --> 00:23:52,640
variables

603
00:23:52,640 --> 00:23:54,400
that are only accessible in the ci and

604
00:23:54,400 --> 00:23:57,039
make impact on your

605
00:23:57,039 --> 00:23:59,440
cloud configuration and on runtime you

606
00:23:59,440 --> 00:24:02,080
have the most context but the highest

607
00:24:02,080 --> 00:24:04,640
complexity to fix because it's very late

608
00:24:04,640 --> 00:24:06,480
on the process you don't always know

609
00:24:06,480 --> 00:24:08,720
who's the engineer that made that change

610
00:24:08,720 --> 00:24:12,080
and you need to triage in order to fix

611
00:24:12,080 --> 00:24:14,799
you can integrate uh chekhov as part of

612
00:24:14,799 --> 00:24:19,440
github action and actually fail a build

613
00:24:19,440 --> 00:24:22,240
if it has a violation of a specific

614
00:24:22,240 --> 00:24:24,000
pulse

615
00:24:24,000 --> 00:24:25,919
so taking a step back what does the

616
00:24:25,919 --> 00:24:28,080
graph obstruction enables us

617
00:24:28,080 --> 00:24:29,840
we have the understanding that it can

618
00:24:29,840 --> 00:24:32,320
traverse and we have a specific example

619
00:24:32,320 --> 00:24:33,120
of

620
00:24:33,120 --> 00:24:34,799
public emr clusters that we want to

621
00:24:34,799 --> 00:24:36,480
prevent but what other examples are

622
00:24:36,480 --> 00:24:38,880
there out there

623
00:24:38,880 --> 00:24:41,120
other examples that are available

624
00:24:41,120 --> 00:24:43,360
as part of the open source policies is

625
00:24:43,360 --> 00:24:46,400
for example to ensure that ebs volumes

626
00:24:46,400 --> 00:24:49,039
that has a dependency or an attachment

627
00:24:49,039 --> 00:24:53,679
to vms to ec2 are encrypted making sure

628
00:24:53,679 --> 00:24:54,880
that

629
00:24:54,880 --> 00:24:57,120
of the data stored on our servers is

630
00:24:57,120 --> 00:24:58,080
secure

631
00:24:58,080 --> 00:24:59,840
we have another one which is making sure

632
00:24:59,840 --> 00:25:02,000
that s3 bucket have a dependency in

633
00:25:02,000 --> 00:25:04,640
public access block and is made private

634
00:25:04,640 --> 00:25:07,919
rds have backup plan and other use cases

635
00:25:07,919 --> 00:25:09,919
and the more extreme use cases would be

636
00:25:09,919 --> 00:25:12,400
let's attach cves into that graph and

637
00:25:12,400 --> 00:25:15,440
let's also attach the runtime instance

638
00:25:15,440 --> 00:25:19,039
of that resource into background

639
00:25:19,200 --> 00:25:20,400
so

640
00:25:20,400 --> 00:25:22,559
actually what graph gives us within

641
00:25:22,559 --> 00:25:25,039
checkup is a solid data model that gives

642
00:25:25,039 --> 00:25:27,840
us room to evolve from testing to threat

643
00:25:27,840 --> 00:25:28,960
modeling

644
00:25:28,960 --> 00:25:31,120
very early on shifting that left or

645
00:25:31,120 --> 00:25:34,960
giving it the devsecops experience

646
00:25:34,960 --> 00:25:38,159
it also grants you the capability to

647
00:25:38,159 --> 00:25:40,159
join the open source community

648
00:25:40,159 --> 00:25:43,200
so chekov had hundreds of policies being

649
00:25:43,200 --> 00:25:46,240
contributed by open source users in

650
00:25:46,240 --> 00:25:49,120
amazing companies um so you're more than

651
00:25:49,120 --> 00:25:51,440
welcome to go into our website to

652
00:25:51,440 --> 00:25:52,720
oktoberfest

653
00:25:52,720 --> 00:25:54,640
blog post and to understand where to

654
00:25:54,640 --> 00:25:56,480
start and contribute

655
00:25:56,480 --> 00:25:58,880
policies that will be served

656
00:25:58,880 --> 00:26:01,919
serving the entire os community or cncf

657
00:26:01,919 --> 00:26:04,960
community uh helping to democratize and

658
00:26:04,960 --> 00:26:07,440
solve very early on threat modeling

659
00:26:07,440 --> 00:26:09,760
issues that you might experience in your

660
00:26:09,760 --> 00:26:12,720
infrastructure school

661
00:26:13,360 --> 00:26:16,080
thanks a lot

