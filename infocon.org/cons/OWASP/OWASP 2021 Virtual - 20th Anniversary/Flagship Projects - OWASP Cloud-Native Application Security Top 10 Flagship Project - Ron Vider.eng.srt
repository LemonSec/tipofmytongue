1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:07,759 --> 00:00:09,200
hello

3
00:00:09,200 --> 00:00:11,360
hey everyone and welcome to the ask

4
00:00:11,360 --> 00:00:13,519
cloud native application security top 10

5
00:00:13,519 --> 00:00:16,640
risk flagship project presentation for

6
00:00:16,640 --> 00:00:18,960
the austin 20th anniversary

7
00:00:18,960 --> 00:00:20,960
thanks to anyone who joined i hope you

8
00:00:20,960 --> 00:00:22,560
have enjoyed so far the fantastic

9
00:00:22,560 --> 00:00:24,160
presentation and the ask 20th

10
00:00:24,160 --> 00:00:26,480
anniversary celebration

11
00:00:26,480 --> 00:00:28,480
i'm very excited to be here and present

12
00:00:28,480 --> 00:00:30,880
for the first time ever this flagship

13
00:00:30,880 --> 00:00:32,320
project

14
00:00:32,320 --> 00:00:33,600
the earth cloud native application

15
00:00:33,600 --> 00:00:35,840
security top 10 risk is a brand new

16
00:00:35,840 --> 00:00:37,360
flagship project

17
00:00:37,360 --> 00:00:39,680
that is still under development

18
00:00:39,680 --> 00:00:41,760
and supported by oxide

19
00:00:41,760 --> 00:00:44,399
we will have a fan half hour and we have

20
00:00:44,399 --> 00:00:46,879
a lot to talk about so

21
00:00:46,879 --> 00:00:49,200
let's start

22
00:00:49,200 --> 00:00:50,719
i will start with a short introduction

23
00:00:50,719 --> 00:00:52,480
about myself

24
00:00:52,480 --> 00:00:54,079
so my name is juan vader i'm the

25
00:00:54,079 --> 00:00:55,840
co-founder and chief technology officer

26
00:00:55,840 --> 00:00:57,360
at oxide

27
00:00:57,360 --> 00:00:58,960
oxide is a cloud native application

28
00:00:58,960 --> 00:01:00,800
security testing solution

29
00:01:00,800 --> 00:01:02,480
our goal is to find casting code

30
00:01:02,480 --> 00:01:04,640
vulnerabilities across multiple micro

31
00:01:04,640 --> 00:01:07,600
services and the underlying layers

32
00:01:07,600 --> 00:01:09,439
before they ever reach production in

33
00:01:09,439 --> 00:01:11,680
cloud native applications

34
00:01:11,680 --> 00:01:13,439
i've been around in the cyber security

35
00:01:13,439 --> 00:01:15,680
landscape for over a decade

36
00:01:15,680 --> 00:01:17,680
since i learned how to app when most of

37
00:01:17,680 --> 00:01:20,159
the web applications were vulnerable php

38
00:01:20,159 --> 00:01:22,400
applications

39
00:01:22,400 --> 00:01:24,159
i built my first application security

40
00:01:24,159 --> 00:01:26,799
tool testing tool when i was 16

41
00:01:26,799 --> 00:01:29,119
and in my free time i like to search for

42
00:01:29,119 --> 00:01:31,439
vulnerabilities and learn about

43
00:01:31,439 --> 00:01:32,960
modern technologies

44
00:01:32,960 --> 00:01:35,119
and in the last few years i've been

45
00:01:35,119 --> 00:01:38,880
focused on the cloud security area

46
00:01:38,880 --> 00:01:42,240
so what are we going to talk about today

47
00:01:42,240 --> 00:01:44,240
we will start with why cloud native

48
00:01:44,240 --> 00:01:47,200
application security is so unique

49
00:01:47,200 --> 00:01:50,880
that led us to build a brand new project

50
00:01:50,880 --> 00:01:52,880
after that we will discuss the

51
00:01:52,880 --> 00:01:54,799
challenges in cloud-native application

52
00:01:54,799 --> 00:01:57,040
security that make it much more

53
00:01:57,040 --> 00:01:58,320
difficult

54
00:01:58,320 --> 00:02:01,360
we will review our project leaders

55
00:02:01,360 --> 00:02:03,119
and then

56
00:02:03,119 --> 00:02:05,040
we'll deep dive into each one of the

57
00:02:05,040 --> 00:02:07,520
risks we will wrap it up and talk about

58
00:02:07,520 --> 00:02:10,318
how you can contribute to this fantastic

59
00:02:10,318 --> 00:02:14,000
project and take it to the next level

60
00:02:14,000 --> 00:02:16,480
and as i said earlier we have a lot to

61
00:02:16,480 --> 00:02:19,120
talk about and only half hour so let's

62
00:02:19,120 --> 00:02:21,440
start

63
00:02:21,599 --> 00:02:23,599
power native applications are

64
00:02:23,599 --> 00:02:25,120
skyrocketing

65
00:02:25,120 --> 00:02:27,120
modern applications are usually will be

66
00:02:27,120 --> 00:02:29,360
built as cloud native applications this

67
00:02:29,360 --> 00:02:31,200
is the fact standard

68
00:02:31,200 --> 00:02:32,879
when we are talking about cloud native

69
00:02:32,879 --> 00:02:34,800
application security

70
00:02:34,800 --> 00:02:37,440
we are not talking about cloud security

71
00:02:37,440 --> 00:02:39,680
or web application security we are

72
00:02:39,680 --> 00:02:41,280
actually talking about the combination

73
00:02:41,280 --> 00:02:44,480
between them because in cloud security

74
00:02:44,480 --> 00:02:46,959
we are securing the infrastructure

75
00:02:46,959 --> 00:02:49,680
and web application security well cloud

76
00:02:49,680 --> 00:02:52,000
native applications are not necessarily

77
00:02:52,000 --> 00:02:54,480
web applications

78
00:02:54,480 --> 00:02:55,920
and when we're talking when we are

79
00:02:55,920 --> 00:02:57,599
talking about their supers the

80
00:02:57,599 --> 00:02:59,440
combination between them

81
00:02:59,440 --> 00:03:03,760
it introduces a new type of security

82
00:03:03,760 --> 00:03:05,519
cloud native applications are deployed

83
00:03:05,519 --> 00:03:07,760
as containers using orchestration

84
00:03:07,760 --> 00:03:10,239
platforms and service mesh technologies

85
00:03:10,239 --> 00:03:12,959
all of which require additional security

86
00:03:12,959 --> 00:03:14,400
attention

87
00:03:14,400 --> 00:03:16,560
when combining all of the above

88
00:03:16,560 --> 00:03:18,400
technology stacks into a single

89
00:03:18,400 --> 00:03:19,599
application

90
00:03:19,599 --> 00:03:21,519
new risks arise

91
00:03:21,519 --> 00:03:24,000
which is why we claim that this is a

92
00:03:24,000 --> 00:03:26,959
superset on steroids

93
00:03:26,959 --> 00:03:29,519
this is what led us to build this new

94
00:03:29,519 --> 00:03:31,599
project the cloud native application

95
00:03:31,599 --> 00:03:34,239
security top 10 risks and this is

96
00:03:34,239 --> 00:03:36,640
exactly what we will talk about in this

97
00:03:36,640 --> 00:03:37,840
session

98
00:03:37,840 --> 00:03:41,840
i hope you are excited as much as i do

99
00:03:42,400 --> 00:03:45,040
before jumping into the top 10 risks

100
00:03:45,040 --> 00:03:47,040
let's take a look at why cloud native

101
00:03:47,040 --> 00:03:49,840
application security is different

102
00:03:49,840 --> 00:03:53,200
so cloud native is not new therefore why

103
00:03:53,200 --> 00:03:57,120
it requires a new approach to secure it

104
00:03:57,120 --> 00:03:59,280
the ship to cloud native changed the way

105
00:03:59,280 --> 00:04:01,040
applications look

106
00:04:01,040 --> 00:04:03,280
in the past we had a big chunk of code

107
00:04:03,280 --> 00:04:05,120
reading in a monolith architecture

108
00:04:05,120 --> 00:04:07,120
deployed on a web server somewhere on

109
00:04:07,120 --> 00:04:09,120
the internet

110
00:04:09,120 --> 00:04:11,280
nowadays the application is built for

111
00:04:11,280 --> 00:04:13,040
many different components in a

112
00:04:13,040 --> 00:04:15,280
microservice architecture

113
00:04:15,280 --> 00:04:16,959
and each one can be written in a

114
00:04:16,959 --> 00:04:18,320
different language and stored in a

115
00:04:18,320 --> 00:04:20,798
separate code based repository

116
00:04:20,798 --> 00:04:22,720
these microservices are installed on

117
00:04:22,720 --> 00:04:25,120
containers managing orchestration

118
00:04:25,120 --> 00:04:26,880
platforms such as kubernetes and

119
00:04:26,880 --> 00:04:29,199
deployed in the cloud which can be a

120
00:04:29,199 --> 00:04:32,479
public cloud like aws gcp and microsoft

121
00:04:32,479 --> 00:04:34,960
azure but it also can be a private

122
00:04:34,960 --> 00:04:37,199
on-prem cloud

123
00:04:37,199 --> 00:04:39,919
and this new approach didn't just change

124
00:04:39,919 --> 00:04:42,560
how the application works but also the

125
00:04:42,560 --> 00:04:44,960
way risks are managed

126
00:04:44,960 --> 00:04:47,919
for example in the past the risk for

127
00:04:47,919 --> 00:04:50,000
code vulnerability was mainly based on

128
00:04:50,000 --> 00:04:51,520
the code itself

129
00:04:51,520 --> 00:04:53,360
form the entry point in the http

130
00:04:53,360 --> 00:04:56,000
parameter through multiple classes and

131
00:04:56,000 --> 00:04:57,120
functions

132
00:04:57,120 --> 00:04:59,520
eventually it ended in a dangerous

133
00:04:59,520 --> 00:05:02,479
function like a sql query functions

134
00:05:02,479 --> 00:05:04,880
but now it can start in the external

135
00:05:04,880 --> 00:05:07,360
microservice go through multiple field

136
00:05:07,360 --> 00:05:09,440
party components such as message queues

137
00:05:09,440 --> 00:05:10,960
and f3 buckets

138
00:05:10,960 --> 00:05:13,759
and maybe two hours later an internal

139
00:05:13,759 --> 00:05:15,680
microservice may read for it and the

140
00:05:15,680 --> 00:05:19,280
vulnerability is there

141
00:05:19,280 --> 00:05:21,680
we can even add that the risk and the

142
00:05:21,680 --> 00:05:24,479
probability are not just affected by the

143
00:05:24,479 --> 00:05:26,960
code in the microservices but also by

144
00:05:26,960 --> 00:05:28,720
the underlying layers

145
00:05:28,720 --> 00:05:30,639
either any kubernetes service that

146
00:05:30,639 --> 00:05:32,479
exposes the vulnerability

147
00:05:32,479 --> 00:05:34,720
and what about the security groups do

148
00:05:34,720 --> 00:05:38,720
they expose the vulnerability as well

149
00:05:38,720 --> 00:05:41,520
so now after we talk about why cloud

150
00:05:41,520 --> 00:05:44,000
native application security is different

151
00:05:44,000 --> 00:05:47,280
let's move on to the risks

152
00:05:48,320 --> 00:05:50,800
as i said earlier the project is still

153
00:05:50,800 --> 00:05:53,600
under development currently it is being

154
00:05:53,600 --> 00:05:56,400
developed by security experts from oxide

155
00:05:56,400 --> 00:05:59,039
and palo alto networks

156
00:05:59,039 --> 00:06:02,160
on palo alto side we have oris segal an

157
00:06:02,160 --> 00:06:04,240
application security expert with more

158
00:06:04,240 --> 00:06:06,400
than 20 years of experience

159
00:06:06,400 --> 00:06:09,199
ori is the co-founder and cto of puresec

160
00:06:09,199 --> 00:06:11,039
that was acquired by the cloud division

161
00:06:11,039 --> 00:06:13,120
in palo alto networks

162
00:06:13,120 --> 00:06:15,280
in addition to oe we also have ella

163
00:06:15,280 --> 00:06:17,840
schuster a senior product manager in

164
00:06:17,840 --> 00:06:20,160
palo alto networks

165
00:06:20,160 --> 00:06:22,880
from oxide side we have dean agron the

166
00:06:22,880 --> 00:06:25,840
ceo of oxide that brings his experience

167
00:06:25,840 --> 00:06:28,560
from checkpoint and imperva and the last

168
00:06:28,560 --> 00:06:30,720
one is daniela bellas the head of

169
00:06:30,720 --> 00:06:33,440
research in oxide that piled that he was

170
00:06:33,440 --> 00:06:35,919
a senior security research team leader

171
00:06:35,919 --> 00:06:38,160
in akkamai

172
00:06:38,160 --> 00:06:40,639
the product is available in ask slack in

173
00:06:40,639 --> 00:06:42,960
a channel called cloud native appsec top

174
00:06:42,960 --> 00:06:45,680
10 in our twitter and in our gita

175
00:06:45,680 --> 00:06:48,000
project project cloud native application

176
00:06:48,000 --> 00:06:50,160
security top 10

177
00:06:50,160 --> 00:06:52,000
and we are looking for contributors that

178
00:06:52,000 --> 00:06:54,240
will help us to build a major project

179
00:06:54,240 --> 00:06:55,919
and we won't be able to achieve that

180
00:06:55,919 --> 00:06:57,199
without you

181
00:06:57,199 --> 00:06:58,880
but we will touch base again in the end

182
00:06:58,880 --> 00:07:00,560
of the presentation regardless how you

183
00:07:00,560 --> 00:07:03,440
connect but for now let's review the

184
00:07:03,440 --> 00:07:05,680
list

185
00:07:05,919 --> 00:07:08,000
this is the first cloud native

186
00:07:08,000 --> 00:07:10,560
application security top 10 risks

187
00:07:10,560 --> 00:07:13,360
if anyone wants to take a screenshot go

188
00:07:13,360 --> 00:07:16,360
ahead

189
00:07:18,160 --> 00:07:19,840
let's go

190
00:07:19,840 --> 00:07:21,199
number one

191
00:07:21,199 --> 00:07:23,520
insecure cloud orchestration or

192
00:07:23,520 --> 00:07:25,520
container configuration

193
00:07:25,520 --> 00:07:28,479
so an application is not a cloud native

194
00:07:28,479 --> 00:07:31,120
application without one major thing

195
00:07:31,120 --> 00:07:33,360
the environment that the application is

196
00:07:33,360 --> 00:07:35,759
deployed on we are talking about the

197
00:07:35,759 --> 00:07:37,680
cloud which can be a public cloud or a

198
00:07:37,680 --> 00:07:40,400
private cloud the orchestration platform

199
00:07:40,400 --> 00:07:42,160
and the containers

200
00:07:42,160 --> 00:07:43,759
and while we are talking about the

201
00:07:43,759 --> 00:07:46,000
misconfiguration of the environment

202
00:07:46,000 --> 00:07:49,280
we focus on those who impose risk on the

203
00:07:49,280 --> 00:07:51,840
application itself

204
00:07:51,840 --> 00:07:54,080
this is highly important because in such

205
00:07:54,080 --> 00:07:57,280
an agile environment it can change very

206
00:07:57,280 --> 00:07:59,440
often

207
00:07:59,440 --> 00:08:01,919
many breaches in history happen due to

208
00:08:01,919 --> 00:08:04,160
mid configuration of the environment

209
00:08:04,160 --> 00:08:06,639
starting from publicly exposed e3

210
00:08:06,639 --> 00:08:09,680
buckets with sensitive data to insecure

211
00:08:09,680 --> 00:08:12,319
managed services like databases

212
00:08:12,319 --> 00:08:15,039
now we can even add that everything work

213
00:08:15,039 --> 00:08:17,440
with infrastructure's code technologies

214
00:08:17,440 --> 00:08:19,919
and the potential risks are much higher

215
00:08:19,919 --> 00:08:24,240
than before and must be used carefully

216
00:08:24,240 --> 00:08:26,240
a thing will commit to a misconfigured

217
00:08:26,240 --> 00:08:28,879
telephone configuration file can make a

218
00:08:28,879 --> 00:08:31,759
highly secured cloud application become

219
00:08:31,759 --> 00:08:34,000
a highly exposed and vulnerable cloud

220
00:08:34,000 --> 00:08:37,919
application in seconds

221
00:08:38,479 --> 00:08:41,760
our second risk is injection flowers

222
00:08:41,760 --> 00:08:44,000
personally saying i think i think this

223
00:08:44,000 --> 00:08:46,320
is one of the most interesting risks to

224
00:08:46,320 --> 00:08:47,440
talk about

225
00:08:47,440 --> 00:08:50,480
injection flowers are not something new

226
00:08:50,480 --> 00:08:53,519
but the shift to cloud native brings to

227
00:08:53,519 --> 00:08:56,399
the table a huge change

228
00:08:56,399 --> 00:08:58,959
when talking about injection flows

229
00:08:58,959 --> 00:09:01,120
it is important to notice that an

230
00:09:01,120 --> 00:09:03,519
injection flow stretches on multiple

231
00:09:03,519 --> 00:09:05,360
microservices and multiple

232
00:09:05,360 --> 00:09:07,760
infrastructure layers

233
00:09:07,760 --> 00:09:09,120
example

234
00:09:09,120 --> 00:09:11,760
we can we cannot just look at the custom

235
00:09:11,760 --> 00:09:13,839
code without knowing where it is

236
00:09:13,839 --> 00:09:16,240
deployed in the environment

237
00:09:16,240 --> 00:09:18,320
how do you know on which containers it

238
00:09:18,320 --> 00:09:19,680
is deployed on

239
00:09:19,680 --> 00:09:21,519
and does it receive input directly from

240
00:09:21,519 --> 00:09:24,000
the user or through internal component

241
00:09:24,000 --> 00:09:25,839
maybe it's from another service or a

242
00:09:25,839 --> 00:09:27,760
third-party service

243
00:09:27,760 --> 00:09:30,640
and actually knowing that can increase

244
00:09:30,640 --> 00:09:32,000
or even

245
00:09:32,000 --> 00:09:35,120
decrease the score for the vulnerability

246
00:09:35,120 --> 00:09:37,440
determinating the potential risk of

247
00:09:37,440 --> 00:09:38,720
injection flow

248
00:09:38,720 --> 00:09:41,600
is much more complicated than ever

249
00:09:41,600 --> 00:09:44,480
the number of parameters that affect

250
00:09:44,480 --> 00:09:48,800
is huge and must be considered

251
00:09:48,880 --> 00:09:51,839
number three improper authentication and

252
00:09:51,839 --> 00:09:53,680
authorization

253
00:09:53,680 --> 00:09:55,920
starting from the infrastructure

254
00:09:55,920 --> 00:09:58,320
to the application code itself

255
00:09:58,320 --> 00:10:00,080
in cloud native application

256
00:10:00,080 --> 00:10:02,720
authentication and authorization can be

257
00:10:02,720 --> 00:10:05,040
implemented in many places

258
00:10:05,040 --> 00:10:07,120
starting with the custom code

259
00:10:07,120 --> 00:10:09,120
that the developer fully implemented

260
00:10:09,120 --> 00:10:11,200
authentication via the code

261
00:10:11,200 --> 00:10:13,279
but it also can be implemented in the

262
00:10:13,279 --> 00:10:15,839
environment on each one of the different

263
00:10:15,839 --> 00:10:17,760
layers

264
00:10:17,760 --> 00:10:19,040
in the cloud

265
00:10:19,040 --> 00:10:22,480
it can be an over permissive ia role

266
00:10:22,480 --> 00:10:24,480
but also in the cluster it can be

267
00:10:24,480 --> 00:10:26,959
implemented through an extra wide arbor

268
00:10:26,959 --> 00:10:28,800
core

269
00:10:28,800 --> 00:10:31,040
one of the first serious cloud native

270
00:10:31,040 --> 00:10:34,160
bridges due to improper authentication

271
00:10:34,160 --> 00:10:37,040
was in tesla back in back in 2018 when

272
00:10:37,040 --> 00:10:39,120
they accidentally exposed the kubernetes

273
00:10:39,120 --> 00:10:41,360
admin console without any requirement

274
00:10:41,360 --> 00:10:43,040
for a password

275
00:10:43,040 --> 00:10:44,959
it escalated pretty quickly because the

276
00:10:44,959 --> 00:10:47,440
aws access key was in that kubernetes

277
00:10:47,440 --> 00:10:48,560
cluster

278
00:10:48,560 --> 00:10:51,200
and had permissions to sensitive data in

279
00:10:51,200 --> 00:10:54,640
the amazon f3 bucket

280
00:10:55,440 --> 00:10:57,839
let's move on to our fourth risk

281
00:10:57,839 --> 00:11:00,720
risk number four is the icd pipeline and

282
00:11:00,720 --> 00:11:03,120
software supply chain flows

283
00:11:03,120 --> 00:11:05,040
i'm sure many of you have heard about

284
00:11:05,040 --> 00:11:07,040
the recent solar winds and cod called

285
00:11:07,040 --> 00:11:09,440
supply chain attacks

286
00:11:09,440 --> 00:11:11,040
supply chain attacks are one of the

287
00:11:11,040 --> 00:11:13,440
biggest concerns right now

288
00:11:13,440 --> 00:11:14,480
the application

289
00:11:14,480 --> 00:11:16,160
lives across the entire software

290
00:11:16,160 --> 00:11:18,160
development lifecycle and not just in

291
00:11:18,160 --> 00:11:19,279
production

292
00:11:19,279 --> 00:11:21,600
and it can be misused at any point of

293
00:11:21,600 --> 00:11:23,040
the process

294
00:11:23,040 --> 00:11:26,160
therefore it must be secured and managed

295
00:11:26,160 --> 00:11:28,480
through the entire process

296
00:11:28,480 --> 00:11:30,720
it can be the authentication in the cicd

297
00:11:30,720 --> 00:11:33,600
pipeline systems but even the way we are

298
00:11:33,600 --> 00:11:35,600
building our docker images and storing

299
00:11:35,600 --> 00:11:38,800
them insecurely in the docker registry

300
00:11:38,800 --> 00:11:40,880
the software development lifecycle of

301
00:11:40,880 --> 00:11:42,800
our cloud native application is an

302
00:11:42,800 --> 00:11:45,279
integral part of its security

303
00:11:45,279 --> 00:11:47,600
securing cloud native application in the

304
00:11:47,600 --> 00:11:50,560
end is not enough it must be from the

305
00:11:50,560 --> 00:11:52,959
very beginning until they reach the end

306
00:11:52,959 --> 00:11:55,959
users

307
00:11:56,079 --> 00:11:58,160
we're in the middle of the list the

308
00:11:58,160 --> 00:11:59,680
fifth list

309
00:11:59,680 --> 00:12:00,800
secrets

310
00:12:00,800 --> 00:12:03,760
secrets are everywhere we have plenty of

311
00:12:03,760 --> 00:12:06,720
them it's our api tokens our database

312
00:12:06,720 --> 00:12:09,120
and message queue connection strings and

313
00:12:09,120 --> 00:12:10,800
even our password to the source code

314
00:12:10,800 --> 00:12:12,480
management system

315
00:12:12,480 --> 00:12:14,240
everywhere

316
00:12:14,240 --> 00:12:16,480
the improper handle of secrets can be

317
00:12:16,480 --> 00:12:17,920
catastrophic

318
00:12:17,920 --> 00:12:19,839
to store them in plain text in our code

319
00:12:19,839 --> 00:12:22,880
base is terrible using them directly

320
00:12:22,880 --> 00:12:25,680
while building docker images is bad

321
00:12:25,680 --> 00:12:28,240
and even if you keep them unencrypted

322
00:12:28,240 --> 00:12:30,720
well you shouldn't print them

323
00:12:30,720 --> 00:12:32,399
if hackers are able to grab your

324
00:12:32,399 --> 00:12:34,480
credentials to your microsoft azure

325
00:12:34,480 --> 00:12:37,120
account with the proper permissions they

326
00:12:37,120 --> 00:12:39,519
will actually be able to do everything

327
00:12:39,519 --> 00:12:41,920
access any sensitive data in the account

328
00:12:41,920 --> 00:12:43,920
log into running services and even

329
00:12:43,920 --> 00:12:46,959
manipulate things in it

330
00:12:46,959 --> 00:12:49,200
improper handle of secrets can generate

331
00:12:49,200 --> 00:12:52,480
security issues in seconds

332
00:12:52,480 --> 00:12:54,320
there are tons of story regarding

333
00:12:54,320 --> 00:12:56,720
breaches that happen because an aws

334
00:12:56,720 --> 00:12:59,600
access key was accidentally uploaded to

335
00:12:59,600 --> 00:13:02,079
a public source code repository and even

336
00:13:02,079 --> 00:13:03,760
if it got deleted

337
00:13:03,760 --> 00:13:06,480
they are still in the git history

338
00:13:06,480 --> 00:13:10,320
let's move on to the next risk

339
00:13:10,320 --> 00:13:11,760
number six

340
00:13:11,760 --> 00:13:14,480
problematic network policy within cloud

341
00:13:14,480 --> 00:13:16,399
native application

342
00:13:16,399 --> 00:13:18,240
this is actually new from application

343
00:13:18,240 --> 00:13:21,200
security perspective well network

344
00:13:21,200 --> 00:13:22,720
policies existing even when the

345
00:13:22,720 --> 00:13:24,560
application wasn't monolith

346
00:13:24,560 --> 00:13:26,720
but not on the application side but from

347
00:13:26,720 --> 00:13:28,720
the infrastructure

348
00:13:28,720 --> 00:13:30,800
in the past community communication

349
00:13:30,800 --> 00:13:32,399
between different components but through

350
00:13:32,399 --> 00:13:35,839
the coding functions directly but now in

351
00:13:35,839 --> 00:13:38,160
cloud-native applications it can be done

352
00:13:38,160 --> 00:13:40,399
through the network

353
00:13:40,399 --> 00:13:42,880
you may think that your compo components

354
00:13:42,880 --> 00:13:45,040
within your cloud-native application are

355
00:13:45,040 --> 00:13:46,720
isolated

356
00:13:46,720 --> 00:13:49,279
one from another still with the

357
00:13:49,279 --> 00:13:52,079
incorrect network policy they can see

358
00:13:52,079 --> 00:13:54,720
and talk one with another

359
00:13:54,720 --> 00:13:56,399
for example

360
00:13:56,399 --> 00:13:58,639
an internal microservice that does not

361
00:13:58,639 --> 00:14:00,399
necessarily should be exposed to the

362
00:14:00,399 --> 00:14:03,199
internet can be accidentally exposed and

363
00:14:03,199 --> 00:14:06,240
create a massive risk on the application

364
00:14:06,240 --> 00:14:07,760
another example

365
00:14:07,760 --> 00:14:10,560
is when an isolated container can access

366
00:14:10,560 --> 00:14:12,240
the network resources when sharing the

367
00:14:12,240 --> 00:14:14,399
network links with the host

368
00:14:14,399 --> 00:14:19,440
this can lead to huge security issues

369
00:14:19,760 --> 00:14:21,279
number seven

370
00:14:21,279 --> 00:14:23,440
vulnerable open source libraries

371
00:14:23,440 --> 00:14:26,639
software and third-party components

372
00:14:26,639 --> 00:14:28,800
you can write your own code perfectly

373
00:14:28,800 --> 00:14:30,639
you can configure your environment as

374
00:14:30,639 --> 00:14:32,720
securely as possible

375
00:14:32,720 --> 00:14:34,800
but all of this will be irrelevant if

376
00:14:34,800 --> 00:14:37,519
you use vulnerable components packages

377
00:14:37,519 --> 00:14:39,040
or software

378
00:14:39,040 --> 00:14:41,120
it does not matter if it is a vulnerable

379
00:14:41,120 --> 00:14:43,519
open source package you install via your

380
00:14:43,519 --> 00:14:45,920
favorite package manager or vulnerable

381
00:14:45,920 --> 00:14:49,519
software like an outdated http server

382
00:14:49,519 --> 00:14:51,839
and from cloud native perspective if you

383
00:14:51,839 --> 00:14:53,519
are building your docker images with a

384
00:14:53,519 --> 00:14:55,680
vulnerable base image or using a

385
00:14:55,680 --> 00:14:57,600
kubernetes in an old version with

386
00:14:57,600 --> 00:14:59,680
non-vulnerabilities

387
00:14:59,680 --> 00:15:01,680
all of these examples are highly

388
00:15:01,680 --> 00:15:03,360
dangerous for your cloud-native

389
00:15:03,360 --> 00:15:05,680
application and can be

390
00:15:05,680 --> 00:15:08,639
used to attack your environment

391
00:15:08,639 --> 00:15:11,760
you must secure your external components

392
00:15:11,760 --> 00:15:14,000
as they as they are your own custom

393
00:15:14,000 --> 00:15:15,279
components

394
00:15:15,279 --> 00:15:16,800
the fact that someone

395
00:15:16,800 --> 00:15:18,720
the fact that someone else wrote it does

396
00:15:18,720 --> 00:15:20,959
not mean you don't need to ensure

397
00:15:20,959 --> 00:15:23,680
it is secure

398
00:15:24,000 --> 00:15:25,600
we're getting closer to the end of the

399
00:15:25,600 --> 00:15:26,560
list

400
00:15:26,560 --> 00:15:27,839
number eight

401
00:15:27,839 --> 00:15:30,720
improper asset management

402
00:15:30,720 --> 00:15:33,199
in cloud native applications we have

403
00:15:33,199 --> 00:15:35,440
plenty of components that are being

404
00:15:35,440 --> 00:15:38,800
changed on a daily basis

405
00:15:38,800 --> 00:15:41,120
we are starting from environmental

406
00:15:41,120 --> 00:15:43,199
changes in the infrastructure

407
00:15:43,199 --> 00:15:46,000
through new micro services and apis

408
00:15:46,000 --> 00:15:48,320
and if you don't know your assets

409
00:15:48,320 --> 00:15:50,000
you can secure them

410
00:15:50,000 --> 00:15:52,160
so we are talking about tagging and

411
00:15:52,160 --> 00:15:54,800
documenting your cloud components having

412
00:15:54,800 --> 00:15:58,160
api documentation for all of your apis

413
00:15:58,160 --> 00:16:00,240
and ensuring you don't have any

414
00:16:00,240 --> 00:16:02,720
neglected assets

415
00:16:02,720 --> 00:16:04,880
the next breach does not necessarily

416
00:16:04,880 --> 00:16:07,199
will happen in the main core component

417
00:16:07,199 --> 00:16:08,399
in your application

418
00:16:08,399 --> 00:16:10,959
it also can be through that one vm you

419
00:16:10,959 --> 00:16:13,680
initialize to debug your gcp account and

420
00:16:13,680 --> 00:16:15,600
forgot to shut it down

421
00:16:15,600 --> 00:16:18,160
and having a proper asset management

422
00:16:18,160 --> 00:16:20,560
will help you to reduce the amount of

423
00:16:20,560 --> 00:16:23,120
this instant set that might create a

424
00:16:23,120 --> 00:16:26,160
risk for your cloud native application

425
00:16:26,160 --> 00:16:29,600
without actually knowing that

426
00:16:30,160 --> 00:16:33,680
number nine in educate resources

427
00:16:33,680 --> 00:16:36,800
in the past our resources were limited

428
00:16:36,800 --> 00:16:39,360
for example increasing the memory in our

429
00:16:39,360 --> 00:16:42,720
web servers in the past was a manual job

430
00:16:42,720 --> 00:16:45,279
but nowadays the resources are almost

431
00:16:45,279 --> 00:16:48,079
unlimited when working in such a dynamic

432
00:16:48,079 --> 00:16:50,320
environment and it can be done easily

433
00:16:50,320 --> 00:16:52,959
using code or api codes

434
00:16:52,959 --> 00:16:54,000
now

435
00:16:54,000 --> 00:16:56,480
you can abuse that for personal reasons

436
00:16:56,480 --> 00:16:58,720
without you will know about that

437
00:16:58,720 --> 00:17:01,839
so in cloud native application security

438
00:17:01,839 --> 00:17:03,199
we are talking about limiting the

439
00:17:03,199 --> 00:17:05,520
infrastructure resources limiting the

440
00:17:05,520 --> 00:17:08,559
api in quest and avoiding unnecessary

441
00:17:08,559 --> 00:17:10,959
high compute limits from a serverless

442
00:17:10,959 --> 00:17:12,720
perspective

443
00:17:12,720 --> 00:17:13,839
that me

444
00:17:13,839 --> 00:17:15,919
no one wants a hacker to break into your

445
00:17:15,919 --> 00:17:18,079
cloud native application and use of

446
00:17:18,079 --> 00:17:19,679
unlimited resources to mine

447
00:17:19,679 --> 00:17:22,240
cryptocurrencies for his own

448
00:17:22,240 --> 00:17:24,160
and you're going to be the one that will

449
00:17:24,160 --> 00:17:26,799
pay for that

450
00:17:27,199 --> 00:17:29,360
the last one for today

451
00:17:29,360 --> 00:17:32,480
ineffective logging and monitoring

452
00:17:32,480 --> 00:17:34,160
we just talked about in the previous

453
00:17:34,160 --> 00:17:36,559
slide that cloud native applications are

454
00:17:36,559 --> 00:17:38,000
highly dynamic

455
00:17:38,000 --> 00:17:40,160
and besides the management of their

456
00:17:40,160 --> 00:17:42,320
existing we need to have a clear

457
00:17:42,320 --> 00:17:45,120
visibility for what's going on inside

458
00:17:45,120 --> 00:17:48,240
them that's why our last risk is

459
00:17:48,240 --> 00:17:51,280
ineffective logging and monitoring

460
00:17:51,280 --> 00:17:53,360
you must monitor your cloud native

461
00:17:53,360 --> 00:17:54,640
application

462
00:17:54,640 --> 00:17:57,039
inside their code between the different

463
00:17:57,039 --> 00:17:59,600
microservices and the environment they

464
00:17:59,600 --> 00:18:01,360
are laying on

465
00:18:01,360 --> 00:18:04,320
and actually working in cloud native

466
00:18:04,320 --> 00:18:06,480
environment there are plenty of open

467
00:18:06,480 --> 00:18:08,720
source solution that helps you to solve

468
00:18:08,720 --> 00:18:11,679
that problem and reduce the risk

469
00:18:11,679 --> 00:18:14,080
for example you can use open source

470
00:18:14,080 --> 00:18:16,480
telemetry solution to provide tracing

471
00:18:16,480 --> 00:18:18,799
within your cloud native application and

472
00:18:18,799 --> 00:18:20,640
know what's going on between the

473
00:18:20,640 --> 00:18:23,840
different micro services

474
00:18:24,160 --> 00:18:25,120
so

475
00:18:25,120 --> 00:18:26,960
we have just finished going through all

476
00:18:26,960 --> 00:18:29,200
the cloud native application security

477
00:18:29,200 --> 00:18:31,360
top 10 risks

478
00:18:31,360 --> 00:18:33,600
we talked about how applications have

479
00:18:33,600 --> 00:18:36,799
changed and the result is that the risks

480
00:18:36,799 --> 00:18:38,640
have changed as well

481
00:18:38,640 --> 00:18:41,760
therefore it requires a new approach to

482
00:18:41,760 --> 00:18:43,120
secure it

483
00:18:43,120 --> 00:18:45,760
and that's why we are building the os

484
00:18:45,760 --> 00:18:48,559
cloud native application security top 10

485
00:18:48,559 --> 00:18:51,919
risk flagship project

486
00:18:51,919 --> 00:18:54,960
then we talked about how modern security

487
00:18:54,960 --> 00:18:57,440
issues have a combination of multiple

488
00:18:57,440 --> 00:18:58,799
components

489
00:18:58,799 --> 00:19:01,600
and to understand the actual risk

490
00:19:01,600 --> 00:19:04,240
you must look at them all together and

491
00:19:04,240 --> 00:19:06,480
see how they are connected

492
00:19:06,480 --> 00:19:08,960
and the last thing is when discussing

493
00:19:08,960 --> 00:19:11,280
application security in cloud native

494
00:19:11,280 --> 00:19:14,320
applications the environmental context

495
00:19:14,320 --> 00:19:18,720
is the key and cannot be ignored

496
00:19:19,200 --> 00:19:21,760
and as i said in the first slide

497
00:19:21,760 --> 00:19:23,520
the cloud native application security

498
00:19:23,520 --> 00:19:26,480
top 10 risks flagship project is still

499
00:19:26,480 --> 00:19:28,000
under development

500
00:19:28,000 --> 00:19:29,840
we are looking forward to building a

501
00:19:29,840 --> 00:19:33,280
major ask project and to do so we need

502
00:19:33,280 --> 00:19:34,720
your help

503
00:19:34,720 --> 00:19:36,559
these projects are created by the

504
00:19:36,559 --> 00:19:38,640
community for the community

505
00:19:38,640 --> 00:19:40,880
and this is your chance to get involved

506
00:19:40,880 --> 00:19:42,559
in one of the earliest parts of the

507
00:19:42,559 --> 00:19:44,080
project

508
00:19:44,080 --> 00:19:45,600
it does not matter if you ever

509
00:19:45,600 --> 00:19:47,679
contributed to any open source project

510
00:19:47,679 --> 00:19:48,799
before

511
00:19:48,799 --> 00:19:50,799
or even if you have less experience you

512
00:19:50,799 --> 00:19:53,200
are still more than welcome

513
00:19:53,200 --> 00:19:55,039
at the moment we are looking

514
00:19:55,039 --> 00:19:57,520
specifically for contributors and

515
00:19:57,520 --> 00:19:58,799
reviewers

516
00:19:58,799 --> 00:19:59,679
so

517
00:19:59,679 --> 00:20:01,840
to only to anyone who wants to get

518
00:20:01,840 --> 00:20:04,080
involved or even if you just want to

519
00:20:04,080 --> 00:20:06,559
keep up to date with the product feel

520
00:20:06,559 --> 00:20:09,440
free to join us in our slack channel

521
00:20:09,440 --> 00:20:12,159
cloud native appsec top 10 in arts

522
00:20:12,159 --> 00:20:14,960
workspace in our twitter and the github

523
00:20:14,960 --> 00:20:16,320
project

524
00:20:16,320 --> 00:20:18,559
i will post all the links in slack

525
00:20:18,559 --> 00:20:21,120
immediately after the presentation

526
00:20:21,120 --> 00:20:23,919
i'm looking forward to you joining us in

527
00:20:23,919 --> 00:20:27,919
building this amazing amazing project

528
00:20:28,080 --> 00:20:30,799
so this was the host cloud native

529
00:20:30,799 --> 00:20:33,360
application security top 10 risk

530
00:20:33,360 --> 00:20:36,640
flagship project i hope you enjoyed this

531
00:20:36,640 --> 00:20:38,960
if you have any additional question all

532
00:20:38,960 --> 00:20:41,840
of the project leaders ori elad dean

533
00:20:41,840 --> 00:20:44,240
daniel and i will be happy to answer

534
00:20:44,240 --> 00:20:46,000
them in ask slack

535
00:20:46,000 --> 00:20:48,640
after we finish the presentation

536
00:20:48,640 --> 00:20:50,960
keep rocking and enjoy the rest of our

537
00:20:50,960 --> 00:20:53,280
20th anniversary anniversary celebration

538
00:20:53,280 --> 00:20:55,840
with awesome presentations ahead

539
00:20:55,840 --> 00:20:58,000
and one last thing i want to say a huge

540
00:20:58,000 --> 00:21:00,080
thanks to us for the opportunity to

541
00:21:00,080 --> 00:21:02,640
build such a fantastic community and to

542
00:21:02,640 --> 00:21:05,520
you for listening and making this world

543
00:21:05,520 --> 00:21:06,799
more secure

544
00:21:06,799 --> 00:21:10,360
thank you very much

