1
00:00:11,679 --> 00:00:14,240
and now it's time for the keynote talk

2
00:00:14,240 --> 00:00:16,400
this morning please don't forget to use

3
00:00:16,400 --> 00:00:18,640
slack for the q a

4
00:00:18,640 --> 00:00:19,840
um

5
00:00:19,840 --> 00:00:22,880
so felipe helps developers protect

6
00:00:22,880 --> 00:00:25,199
companies through better web security he

7
00:00:25,199 --> 00:00:27,359
is an amazing speaker i personally have

8
00:00:27,359 --> 00:00:30,800
seen his talks before his phd in web

9
00:00:30,800 --> 00:00:35,520
security from uh k.u uh uh villain uh la

10
00:00:35,520 --> 00:00:38,320
vu sorry uh lies at his basis on his

11
00:00:38,320 --> 00:00:40,879
exceptional knowledge in in the security

12
00:00:40,879 --> 00:00:44,559
landscape um as uh the founder of

13
00:00:44,559 --> 00:00:47,760
pragmatic web security philippe delivers

14
00:00:47,760 --> 00:00:49,840
uh security training and security

15
00:00:49,840 --> 00:00:52,879
consultancy to uh companies worldwide

16
00:00:52,879 --> 00:00:55,520
and has a online security

17
00:00:55,520 --> 00:00:57,360
uh course platform

18
00:00:57,360 --> 00:00:59,920
fleet is a google developer expert and

19
00:00:59,920 --> 00:01:02,719
an author zero ambassador for his

20
00:01:02,719 --> 00:01:05,280
community contributions to the security

21
00:01:05,280 --> 00:01:08,720
of web applications and apis and now

22
00:01:08,720 --> 00:01:11,920
without further ado please welcome uh dr

23
00:01:11,920 --> 00:01:14,080
philippe derrick

24
00:01:14,080 --> 00:01:16,720
all right so good i don't know this is a

25
00:01:16,720 --> 00:01:18,799
worldwide event so um it's good morning

26
00:01:18,799 --> 00:01:20,880
for me so um let's call this good

27
00:01:20,880 --> 00:01:22,400
morning good morning everyone it's

28
00:01:22,400 --> 00:01:24,479
actually quite an honor to be here at

29
00:01:24,479 --> 00:01:27,200
oasp's 20th anniversary celebration for

30
00:01:27,200 --> 00:01:29,920
the opening keynote and i would love to

31
00:01:29,920 --> 00:01:32,720
say that i've been a part of oasp for

32
00:01:32,720 --> 00:01:35,200
those 20 years um but that's not

33
00:01:35,200 --> 00:01:37,840
entirely true i i mean i

34
00:01:37,840 --> 00:01:39,520
probably was there for a majority of

35
00:01:39,520 --> 00:01:41,119
that i've been involved in plenty of

36
00:01:41,119 --> 00:01:42,640
wasp events but

37
00:01:42,640 --> 00:01:44,560
some amazing people have pushed this the

38
00:01:44,560 --> 00:01:46,640
full 20 years and that definitely

39
00:01:46,640 --> 00:01:49,439
deserves a celebration

40
00:01:49,439 --> 00:01:52,159
i'm gonna talk about a topic absec is is

41
00:01:52,159 --> 00:01:54,560
too hard that's the title here and

42
00:01:54,560 --> 00:01:56,799
the the message or the the content of

43
00:01:56,799 --> 00:01:58,479
this this session this keynote is

44
00:01:58,479 --> 00:02:00,640
actually quite fitting for for an event

45
00:02:00,640 --> 00:02:01,680
like this because we're going to

46
00:02:01,680 --> 00:02:03,600
celebrate the fact that osp has been

47
00:02:03,600 --> 00:02:05,600
around for 20 years i'm gonna highlight

48
00:02:05,600 --> 00:02:07,759
a couple of cases where we actually push

49
00:02:07,759 --> 00:02:10,000
application security forward

50
00:02:10,000 --> 00:02:11,840
but i'm also

51
00:02:11,840 --> 00:02:14,000
going to conclude that we have some work

52
00:02:14,000 --> 00:02:15,200
left to do

53
00:02:15,200 --> 00:02:17,360
if we want to actually get towards

54
00:02:17,360 --> 00:02:20,160
building more secure applications it's

55
00:02:20,160 --> 00:02:22,080
basically a never ending story but

56
00:02:22,080 --> 00:02:24,319
hopefully we can keep improving and make

57
00:02:24,319 --> 00:02:26,800
things better

58
00:02:26,800 --> 00:02:28,879
when i was this this talk

59
00:02:28,879 --> 00:02:30,560
has been simmering in my brain for a

60
00:02:30,560 --> 00:02:32,640
while so it was basically waiting for

61
00:02:32,640 --> 00:02:34,720
for a good opportunity to come out and

62
00:02:34,720 --> 00:02:37,360
and allowing me to to share um a couple

63
00:02:37,360 --> 00:02:39,200
of my thoughts on on application

64
00:02:39,200 --> 00:02:41,840
security and one of my working titles

65
00:02:41,840 --> 00:02:44,000
for this talk was was a bit more

66
00:02:44,000 --> 00:02:46,239
dramatic it was like the road to absec

67
00:02:46,239 --> 00:02:49,840
hell is paved with good intentions and

68
00:02:49,840 --> 00:02:51,440
it's it's a pretty cool title and you

69
00:02:51,440 --> 00:02:53,360
can go all kinds of directions with that

70
00:02:53,360 --> 00:02:55,360
title and that's why i kind of liked it

71
00:02:55,360 --> 00:02:57,200
in the beginning but the more i started

72
00:02:57,200 --> 00:02:58,560
thinking about the message and

73
00:02:58,560 --> 00:03:00,319
fine-tuning the message i wanted to

74
00:03:00,319 --> 00:03:01,120
bring

75
00:03:01,120 --> 00:03:04,319
um the less the title connected with me

76
00:03:04,319 --> 00:03:06,400
because well there's two parts in it and

77
00:03:06,400 --> 00:03:08,640
the second part the good intentions part

78
00:03:08,640 --> 00:03:11,040
is definitely there if i'm gonna show

79
00:03:11,040 --> 00:03:13,200
you a couple of things of how we as a

80
00:03:13,200 --> 00:03:14,720
community of security people of

81
00:03:14,720 --> 00:03:15,920
developers

82
00:03:15,920 --> 00:03:17,840
try to push security forward and we

83
00:03:17,840 --> 00:03:20,480
tried to do a good good job and

84
00:03:20,480 --> 00:03:22,480
we we definitely tried to make things

85
00:03:22,480 --> 00:03:23,360
better

86
00:03:23,360 --> 00:03:25,200
the problem is those good intentions

87
00:03:25,200 --> 00:03:26,959
they lead to some issues we're going to

88
00:03:26,959 --> 00:03:28,799
talk about that in a minute but they

89
00:03:28,799 --> 00:03:30,560
don't necessarily do apps like hell

90
00:03:30,560 --> 00:03:33,040
because that's absecal is very dramatic

91
00:03:33,040 --> 00:03:35,200
and it means a different thing for for

92
00:03:35,200 --> 00:03:37,280
different people but to me

93
00:03:37,280 --> 00:03:38,959
apps like hell would mean

94
00:03:38,959 --> 00:03:41,040
a scenario where companies have or

95
00:03:41,040 --> 00:03:43,120
developers have no security awareness at

96
00:03:43,120 --> 00:03:45,519
all they have no idea what they're doing

97
00:03:45,519 --> 00:03:47,760
or they don't even care about security

98
00:03:47,760 --> 00:03:49,920
that's that's absec held to me and

99
00:03:49,920 --> 00:03:52,080
that's not what i'm going to talk about

100
00:03:52,080 --> 00:03:54,560
i mean that's a whole different problem

101
00:03:54,560 --> 00:03:56,560
with all kinds of solutions but that's

102
00:03:56,560 --> 00:03:58,319
not something i'm going to be able to

103
00:03:58,319 --> 00:03:59,280
address

104
00:03:59,280 --> 00:04:02,159
in a 45 minute talk here at the

105
00:04:02,159 --> 00:04:04,000
celebration of oasp

106
00:04:04,000 --> 00:04:05,680
by the way this picture

107
00:04:05,680 --> 00:04:08,400
really awesome this is uh an actual

108
00:04:08,400 --> 00:04:10,000
picture of a hole in the earth in

109
00:04:10,000 --> 00:04:12,480
turkmenistan if i'm not mistaken

110
00:04:12,480 --> 00:04:15,360
where they they were mining natural gas

111
00:04:15,360 --> 00:04:17,279
a couple of decades ago and things went

112
00:04:17,279 --> 00:04:18,720
wrong so they decided that the best

113
00:04:18,720 --> 00:04:20,798
course of action was to light it on fire

114
00:04:20,798 --> 00:04:22,639
and it has been burning ever since you

115
00:04:22,639 --> 00:04:24,400
should look it up it's actually pretty

116
00:04:24,400 --> 00:04:25,759
awesome

117
00:04:25,759 --> 00:04:27,919
that aside let's not talk about apps

118
00:04:27,919 --> 00:04:29,680
like hell

119
00:04:29,680 --> 00:04:31,520
let's talk about

120
00:04:31,520 --> 00:04:33,120
developers trying to build secure

121
00:04:33,120 --> 00:04:34,960
applications that's that's my premise

122
00:04:34,960 --> 00:04:36,000
here

123
00:04:36,000 --> 00:04:38,000
most developers that i meet or virtually

124
00:04:38,000 --> 00:04:40,240
every developer that i meet in when i

125
00:04:40,240 --> 00:04:42,080
handle security for companies when i

126
00:04:42,080 --> 00:04:44,000
teach them about security they all want

127
00:04:44,000 --> 00:04:46,240
to try and build secure applications

128
00:04:46,240 --> 00:04:47,759
they do their best

129
00:04:47,759 --> 00:04:49,120
and that's the promise i'm going to take

130
00:04:49,120 --> 00:04:51,440
for this session developers do their

131
00:04:51,440 --> 00:04:52,800
best

132
00:04:52,800 --> 00:04:54,800
and they still fail

133
00:04:54,800 --> 00:04:56,960
that's that's the key thing here even

134
00:04:56,960 --> 00:04:58,720
with all the efforts that we have we

135
00:04:58,720 --> 00:05:00,479
still fail at building secure

136
00:05:00,479 --> 00:05:01,919
applications

137
00:05:01,919 --> 00:05:03,680
and i don't think that's

138
00:05:03,680 --> 00:05:05,120
acceptable

139
00:05:05,120 --> 00:05:06,560
yes there will always be issues that

140
00:05:06,560 --> 00:05:09,360
will never be 100 secure but the way

141
00:05:09,360 --> 00:05:10,960
things fail today

142
00:05:10,960 --> 00:05:12,639
there's some some serious issues with

143
00:05:12,639 --> 00:05:13,600
that and

144
00:05:13,600 --> 00:05:15,280
what i'm going to try to do is

145
00:05:15,280 --> 00:05:18,000
explain why these issues exist and also

146
00:05:18,000 --> 00:05:21,120
propose some potential solutions not

147
00:05:21,120 --> 00:05:23,120
silver bullets but

148
00:05:23,120 --> 00:05:25,680
approaches we can take to try

149
00:05:25,680 --> 00:05:29,680
and get things better that's essentially

150
00:05:29,680 --> 00:05:32,400
a preview of the main takeaway of this

151
00:05:32,400 --> 00:05:33,840
session

152
00:05:33,840 --> 00:05:35,840
all right so

153
00:05:35,840 --> 00:05:37,280
i'm going to use a couple of cases to do

154
00:05:37,280 --> 00:05:38,800
that and the first topic i want to talk

155
00:05:38,800 --> 00:05:41,919
about is json web tokens

156
00:05:41,919 --> 00:05:44,160
and a slide like this is kind of where i

157
00:05:44,160 --> 00:05:46,320
miss real world events because if the

158
00:05:46,320 --> 00:05:48,080
room would be full of people it would be

159
00:05:48,080 --> 00:05:49,919
very interesting to see the reactions of

160
00:05:49,919 --> 00:05:51,840
people i'm pretty sure that some of you

161
00:05:51,840 --> 00:05:53,680
would be like oh jesus christ jason webb

162
00:05:53,680 --> 00:05:56,080
tokens or some of you will be like oh

163
00:05:56,080 --> 00:05:58,639
crap jason webb tokens we use that so

164
00:05:58,639 --> 00:06:01,520
security might be pretty important here

165
00:06:01,520 --> 00:06:03,600
for now i'm just going to guess what you

166
00:06:03,600 --> 00:06:05,280
what you're doing um

167
00:06:05,280 --> 00:06:06,479
and that's that's going to be safe

168
00:06:06,479 --> 00:06:08,000
enough for now

169
00:06:08,000 --> 00:06:10,400
so json web tokens they have a few pros

170
00:06:10,400 --> 00:06:11,840
and cons

171
00:06:11,840 --> 00:06:13,759
one of the major pros is the fact that

172
00:06:13,759 --> 00:06:16,960
it's not xml or yaml so it's json so in

173
00:06:16,960 --> 00:06:19,280
modern applications javascript based

174
00:06:19,280 --> 00:06:21,280
applications json is actually a pretty

175
00:06:21,280 --> 00:06:24,800
easy format to work with one of the cons

176
00:06:24,800 --> 00:06:27,280
of json web token is that they have some

177
00:06:27,280 --> 00:06:29,520
security issues and depends on who you

178
00:06:29,520 --> 00:06:31,520
ask whether they have some or a lot but

179
00:06:31,520 --> 00:06:33,039
there are some things with json web

180
00:06:33,039 --> 00:06:35,039
tokens that you should be aware of and

181
00:06:35,039 --> 00:06:37,280
there's definitely things that go wrong

182
00:06:37,280 --> 00:06:39,120
so let's let's look at a couple of

183
00:06:39,120 --> 00:06:41,600
examples here first let me give you a

184
00:06:41,600 --> 00:06:42,960
bit of introduction or a bit of

185
00:06:42,960 --> 00:06:45,600
background information about a json web

186
00:06:45,600 --> 00:06:47,039
document just to make sure that if

187
00:06:47,039 --> 00:06:48,560
you're not fully up to speed with all

188
00:06:48,560 --> 00:06:50,400
the technicalities that you'll at least

189
00:06:50,400 --> 00:06:52,400
be able to follow the story that i have

190
00:06:52,400 --> 00:06:53,680
to tell here

191
00:06:53,680 --> 00:06:55,840
what you see on the left the the pretty

192
00:06:55,840 --> 00:06:57,440
colorful string

193
00:06:57,440 --> 00:06:59,840
that's what we call a json web token and

194
00:06:59,840 --> 00:07:02,160
it's an encoded piece of data and it

195
00:07:02,160 --> 00:07:03,680
consists of three

196
00:07:03,680 --> 00:07:05,280
three aspects you have the header that's

197
00:07:05,280 --> 00:07:07,440
the first part the red part

198
00:07:07,440 --> 00:07:09,440
you have a payload that's the actual

199
00:07:09,440 --> 00:07:11,759
data that's the purple part

200
00:07:11,759 --> 00:07:13,360
as the way it's visualized here and you

201
00:07:13,360 --> 00:07:15,360
have the blue part and that's a

202
00:07:15,360 --> 00:07:16,639
signature

203
00:07:16,639 --> 00:07:18,479
and the first two parts as you can see

204
00:07:18,479 --> 00:07:20,560
on the right in the decoded version are

205
00:07:20,560 --> 00:07:23,599
basically json objects in a base64

206
00:07:23,599 --> 00:07:25,520
encoding so it's not encrypted it's just

207
00:07:25,520 --> 00:07:27,520
encoded so it's kind of safe to send

208
00:07:27,520 --> 00:07:29,919
around in urls because new lines and

209
00:07:29,919 --> 00:07:31,759
embraces all that stuff doesn't really

210
00:07:31,759 --> 00:07:34,639
belong in a header or a url or something

211
00:07:34,639 --> 00:07:37,039
but if you encode it in a base64

212
00:07:37,039 --> 00:07:38,960
encoding then this actually works quite

213
00:07:38,960 --> 00:07:42,000
well with web applications all right

214
00:07:42,000 --> 00:07:43,840
that's the premise here so that's the

215
00:07:43,840 --> 00:07:46,720
setup of a json web token

216
00:07:46,720 --> 00:07:48,319
that blue part

217
00:07:48,319 --> 00:07:50,240
that's not a json object but it's a

218
00:07:50,240 --> 00:07:52,400
signature well it's either an hmac or a

219
00:07:52,400 --> 00:07:54,720
digital signature and that is very

220
00:07:54,720 --> 00:07:56,960
crucial to ensure the integrity of the

221
00:07:56,960 --> 00:07:59,680
header and the payload so basically the

222
00:07:59,680 --> 00:08:01,840
entity generating this token will sign

223
00:08:01,840 --> 00:08:04,240
it so that if somebody changes something

224
00:08:04,240 --> 00:08:06,319
in between the receiver will be able to

225
00:08:06,319 --> 00:08:08,960
detect those changes that's the idea of

226
00:08:08,960 --> 00:08:11,440
that signature otherwise if i'm a

227
00:08:11,440 --> 00:08:13,039
malicious user i could take this chart

228
00:08:13,039 --> 00:08:15,360
change the user id add some roles in

229
00:08:15,360 --> 00:08:17,039
there and send it to the server and the

230
00:08:17,039 --> 00:08:18,879
server might accept that which would be

231
00:08:18,879 --> 00:08:20,800
kind of problematic so the signature

232
00:08:20,800 --> 00:08:23,199
prevents that from happening

233
00:08:23,199 --> 00:08:25,360
and you sign it with a secret which

234
00:08:25,360 --> 00:08:26,639
probably shouldn't be on a powerpoint

235
00:08:26,639 --> 00:08:28,800
slide it shouldn't be super secret hmac

236
00:08:28,800 --> 00:08:31,199
key but that's that's a discussion for

237
00:08:31,199 --> 00:08:33,679
another day but this is what json web

238
00:08:33,679 --> 00:08:36,799
tokens are a way to represent some data

239
00:08:36,799 --> 00:08:39,360
the purple part in a secure way by

240
00:08:39,360 --> 00:08:41,599
adding integrity and they support some

241
00:08:41,599 --> 00:08:44,560
advanced features as well

242
00:08:44,560 --> 00:08:48,080
how are shots used in practice well

243
00:08:48,080 --> 00:08:49,760
in a lot of cases

244
00:08:49,760 --> 00:08:52,560
shots are used to contain authentication

245
00:08:52,560 --> 00:08:54,640
and authorization information

246
00:08:54,640 --> 00:08:56,160
and i'm not going to talk about whether

247
00:08:56,160 --> 00:08:58,000
that's a good idea or not and the pros

248
00:08:58,000 --> 00:08:59,600
and cons because there's a whole bunch

249
00:08:59,600 --> 00:09:01,360
of those but that's the reality that's

250
00:09:01,360 --> 00:09:03,760
how we use json web tokens today and

251
00:09:03,760 --> 00:09:05,760
that can be a custom build mechanism as

252
00:09:05,760 --> 00:09:07,680
you often find in smaller applications

253
00:09:07,680 --> 00:09:10,720
or it can be a mechanism that uses out

254
00:09:10,720 --> 00:09:12,480
or open id connect which is what you'll

255
00:09:12,480 --> 00:09:15,120
find in larger enterprise applications

256
00:09:15,120 --> 00:09:17,120
but under the hood they use json

257
00:09:17,120 --> 00:09:19,040
typically use json web tokens as

258
00:09:19,040 --> 00:09:20,839
technology

259
00:09:20,839 --> 00:09:22,720
now

260
00:09:22,720 --> 00:09:24,480
with json web tokens there are a couple

261
00:09:24,480 --> 00:09:26,800
of things you should be aware of as a

262
00:09:26,800 --> 00:09:29,200
developer otherwise things like this

263
00:09:29,200 --> 00:09:31,920
happen this is a story from two months

264
00:09:31,920 --> 00:09:34,000
ago three months ago whatever beginning

265
00:09:34,000 --> 00:09:35,440
of june

266
00:09:35,440 --> 00:09:37,200
there's a project an open source project

267
00:09:37,200 --> 00:09:39,600
called apache pulsar which is some kind

268
00:09:39,600 --> 00:09:41,680
of a server-side messaging framework i'm

269
00:09:41,680 --> 00:09:43,920
not too familiar with with the product

270
00:09:43,920 --> 00:09:46,720
i'm more familiar with the vulnerability

271
00:09:46,720 --> 00:09:49,600
that is covered in this story and they

272
00:09:49,600 --> 00:09:51,839
had a problem with the way they handled

273
00:09:51,839 --> 00:09:53,600
json web tokens and somebody figured

274
00:09:53,600 --> 00:09:56,560
that out and reported and fixed it and

275
00:09:56,560 --> 00:09:58,240
of course the whole story

276
00:09:58,240 --> 00:10:01,200
evolved from there

277
00:10:01,760 --> 00:10:02,880
what's

278
00:10:02,880 --> 00:10:05,120
going on here what's the problem that

279
00:10:05,120 --> 00:10:07,120
actually happened well

280
00:10:07,120 --> 00:10:09,120
the article is from the daily speak

281
00:10:09,120 --> 00:10:10,800
which is maintained by portswigger it's

282
00:10:10,800 --> 00:10:12,640
a really good source of security

283
00:10:12,640 --> 00:10:15,440
information or incidents for that matter

284
00:10:15,440 --> 00:10:17,519
and they include a lot of context in

285
00:10:17,519 --> 00:10:19,279
this case they also included a link to

286
00:10:19,279 --> 00:10:21,519
the github pull request to fix the

287
00:10:21,519 --> 00:10:23,839
problem which is awesome i mean that's

288
00:10:23,839 --> 00:10:25,839
the stuff i'm interested in so i went

289
00:10:25,839 --> 00:10:27,680
there and i grabbed a screenshot for

290
00:10:27,680 --> 00:10:30,480
your entertainment i would say

291
00:10:30,480 --> 00:10:32,399
or your education that's better not

292
00:10:32,399 --> 00:10:34,880
entertainment education

293
00:10:34,880 --> 00:10:36,320
this screenshot

294
00:10:36,320 --> 00:10:37,760
fixes the problem

295
00:10:37,760 --> 00:10:39,600
and this screenshot you can play a game

296
00:10:39,600 --> 00:10:41,920
with that a game my kids love find the

297
00:10:41,920 --> 00:10:43,440
five differences between the left and

298
00:10:43,440 --> 00:10:45,680
the right well actually this on github

299
00:10:45,680 --> 00:10:47,279
make it easy because they highlight the

300
00:10:47,279 --> 00:10:49,200
differences but even within those

301
00:10:49,200 --> 00:10:51,040
highlighted lines the the red on the

302
00:10:51,040 --> 00:10:52,720
left and the green on the right it's

303
00:10:52,720 --> 00:10:54,640
going to be really hard to find the

304
00:10:54,640 --> 00:10:55,760
difference

305
00:10:55,760 --> 00:10:57,519
there's some semantic stuff but in the

306
00:10:57,519 --> 00:10:59,519
end the only difference is the end of

307
00:10:59,519 --> 00:11:02,800
that statement on the left it says bars

308
00:11:02,800 --> 00:11:04,160
with a token

309
00:11:04,160 --> 00:11:06,320
and on the right it says parse claims

310
00:11:06,320 --> 00:11:08,880
jws with a token

311
00:11:08,880 --> 00:11:11,440
and the left is vulnerable

312
00:11:11,440 --> 00:11:12,839
and the right is

313
00:11:12,839 --> 00:11:14,399
not

314
00:11:14,399 --> 00:11:16,640
huh

315
00:11:16,640 --> 00:11:19,360
that's interesting

316
00:11:19,600 --> 00:11:22,720
things like this make me wonder like

317
00:11:22,720 --> 00:11:24,480
why did the developer write bars instead

318
00:11:24,480 --> 00:11:26,560
of parse claims jws

319
00:11:26,560 --> 00:11:27,519
how

320
00:11:27,519 --> 00:11:29,200
how does a vulnerability like that come

321
00:11:29,200 --> 00:11:31,279
into existence and the reason i think

322
00:11:31,279 --> 00:11:32,800
about that is because i teach people to

323
00:11:32,800 --> 00:11:34,480
build more secure software so i kind of

324
00:11:34,480 --> 00:11:36,880
have to put myself in their shoes and

325
00:11:36,880 --> 00:11:38,959
figure out what is going wrong so we can

326
00:11:38,959 --> 00:11:41,519
actually try to fix it

327
00:11:41,519 --> 00:11:43,519
so what i did here is i built my own

328
00:11:43,519 --> 00:11:45,920
very little code example i'm a master

329
00:11:45,920 --> 00:11:48,240
developer so i wrote three lines of java

330
00:11:48,240 --> 00:11:49,680
code and i felt like the king of the

331
00:11:49,680 --> 00:11:53,040
worlds and i did no i'm just joking here

332
00:11:53,040 --> 00:11:54,560
here's how you

333
00:11:54,560 --> 00:11:56,639
this is a java library a java library to

334
00:11:56,639 --> 00:11:59,680
handle json web tokens and

335
00:11:59,680 --> 00:12:02,000
this is basically how you

336
00:12:02,000 --> 00:12:03,680
write that code so you have the parser

337
00:12:03,680 --> 00:12:05,600
builder you give it a signing key which

338
00:12:05,600 --> 00:12:07,680
is necessary to verify that signature

339
00:12:07,680 --> 00:12:09,600
you build it and then you have to parse

340
00:12:09,600 --> 00:12:11,519
a json web token with that parser

341
00:12:11,519 --> 00:12:14,160
builder well that parser basically

342
00:12:14,160 --> 00:12:15,680
and when you autocomplete that you get

343
00:12:15,680 --> 00:12:19,040
six functions that start with parse

344
00:12:19,040 --> 00:12:22,320
two normal parses one parse claims jws

345
00:12:22,320 --> 00:12:24,720
one parse claims jwd

346
00:12:24,720 --> 00:12:27,839
one parse plain text jws and plain text

347
00:12:27,839 --> 00:12:29,600
jwd

348
00:12:29,600 --> 00:12:30,560
huh

349
00:12:30,560 --> 00:12:31,839
interesting

350
00:12:31,839 --> 00:12:34,079
apparently the first one is wrong and

351
00:12:34,079 --> 00:12:36,720
the third one is right

352
00:12:36,720 --> 00:12:39,519
i don't know why this is really hard to

353
00:12:39,519 --> 00:12:42,000
figure out why this one which one you

354
00:12:42,000 --> 00:12:44,560
should use right if you're relying on

355
00:12:44,560 --> 00:12:46,560
intelligence to auto complete this

356
00:12:46,560 --> 00:12:48,320
honestly i have no idea i'm pretty

357
00:12:48,320 --> 00:12:49,920
familiar with json web tokens like

358
00:12:49,920 --> 00:12:52,959
really deeply familiar and i have

359
00:12:52,959 --> 00:12:54,079
no

360
00:12:54,079 --> 00:12:56,399
real idea why i should use one or the

361
00:12:56,399 --> 00:12:57,440
other

362
00:12:57,440 --> 00:12:58,959
which is pretty

363
00:12:58,959 --> 00:13:00,480
interesting

364
00:13:00,480 --> 00:13:02,480
but of course we shouldn't rely on

365
00:13:02,480 --> 00:13:04,399
method names only to find the right way

366
00:13:04,399 --> 00:13:05,839
to do things so let's look at the

367
00:13:05,839 --> 00:13:07,279
documentation

368
00:13:07,279 --> 00:13:09,519
well to be fair i didn't spend days

369
00:13:09,519 --> 00:13:11,279
looking for the right documentation i

370
00:13:11,279 --> 00:13:12,880
googled for a few minutes and couldn't

371
00:13:12,880 --> 00:13:15,120
find any rendered java docs hosted

372
00:13:15,120 --> 00:13:17,519
online but not to worry there's this is

373
00:13:17,519 --> 00:13:19,440
an open source library so you can go to

374
00:13:19,440 --> 00:13:21,519
github and read the code and the code

375
00:13:21,519 --> 00:13:23,440
actually does have some documentation

376
00:13:23,440 --> 00:13:24,480
awesome

377
00:13:24,480 --> 00:13:27,120
this is the gel parser interface and it

378
00:13:27,120 --> 00:13:28,720
defines that parse function that's

379
00:13:28,720 --> 00:13:31,839
apparently insecure

380
00:13:31,839 --> 00:13:33,440
i'm not expecting you to read everything

381
00:13:33,440 --> 00:13:34,480
i'm not going to read everything out

382
00:13:34,480 --> 00:13:37,040
loud either but if you scan the text at

383
00:13:37,040 --> 00:13:38,880
the top

384
00:13:38,880 --> 00:13:40,560
there's nothing that jumps out to me

385
00:13:40,560 --> 00:13:42,240
that says like hold on hold on this is

386
00:13:42,240 --> 00:13:44,959
not good this is like yeah this parses a

387
00:13:44,959 --> 00:13:49,638
job i mean this kind of makes sense

388
00:13:50,320 --> 00:13:52,320
but is it secure well it throws a

389
00:13:52,320 --> 00:13:54,000
signature exception

390
00:13:54,000 --> 00:13:56,000
in case the signature is invalid so we

391
00:13:56,000 --> 00:13:58,079
can discard the token as untrusted that

392
00:13:58,079 --> 00:13:59,440
means somebody has been messing with the

393
00:13:59,440 --> 00:14:01,199
token

394
00:14:01,199 --> 00:14:02,880
interesting so it does signature

395
00:14:02,880 --> 00:14:04,399
validation so

396
00:14:04,399 --> 00:14:06,560
as a security expert

397
00:14:06,560 --> 00:14:08,399
i can't tell you if this function is

398
00:14:08,399 --> 00:14:10,959
secure or insecure well i can tell after

399
00:14:10,959 --> 00:14:12,560
reading that article at the daily speak

400
00:14:12,560 --> 00:14:14,800
but without that context i would have no

401
00:14:14,800 --> 00:14:17,800
idea

402
00:14:17,839 --> 00:14:20,160
and if you write some code to test this

403
00:14:20,160 --> 00:14:22,480
out you will actually discover that bars

404
00:14:22,480 --> 00:14:26,480
is indeed insecure and bars claims jws

405
00:14:26,480 --> 00:14:28,480
is secure and that's because of a weird

406
00:14:28,480 --> 00:14:30,720
thing in json web tokens

407
00:14:30,720 --> 00:14:32,240
and that weird thing well it's not that

408
00:14:32,240 --> 00:14:34,160
weird but that weird thing or that

409
00:14:34,160 --> 00:14:36,320
problematic thing is the fact that he

410
00:14:36,320 --> 00:14:38,880
can configure a json web token by

411
00:14:38,880 --> 00:14:41,360
setting al to none

412
00:14:41,360 --> 00:14:43,519
an elk is a claim in the header it's

413
00:14:43,519 --> 00:14:46,240
metadata about the token that says

414
00:14:46,240 --> 00:14:49,839
this token is signed with this algorithm

415
00:14:49,839 --> 00:14:52,000
none it means exactly what you think it

416
00:14:52,000 --> 00:14:53,120
means

417
00:14:53,120 --> 00:14:54,720
no signature

418
00:14:54,720 --> 00:14:57,519
a token signed with none well it's not

419
00:14:57,519 --> 00:14:59,519
signed a token without signature but alk

420
00:14:59,519 --> 00:15:02,079
none doesn't contain the blue part the

421
00:15:02,079 --> 00:15:03,440
signature part

422
00:15:03,440 --> 00:15:06,160
it actually has a header

423
00:15:06,160 --> 00:15:09,360
a dot the separator the payload data a

424
00:15:09,360 --> 00:15:12,880
dot and then nothing

425
00:15:12,880 --> 00:15:14,639
and this is according to the spec a

426
00:15:14,639 --> 00:15:18,959
valid json web token

427
00:15:18,959 --> 00:15:20,480
and one of the problems is that the

428
00:15:20,480 --> 00:15:22,560
libraries handling json web tokens

429
00:15:22,560 --> 00:15:24,639
implement a specification kind of like

430
00:15:24,639 --> 00:15:26,480
they're supposed to do and that means

431
00:15:26,480 --> 00:15:28,079
that they often have a codepath that

432
00:15:28,079 --> 00:15:29,920
says if l is none and there's no

433
00:15:29,920 --> 00:15:32,160
signature we can just trust the token as

434
00:15:32,160 --> 00:15:36,079
it is and return the data in the payload

435
00:15:36,079 --> 00:15:37,600
and that's exactly what the parse

436
00:15:37,600 --> 00:15:40,160
function in the java library allows to

437
00:15:40,160 --> 00:15:41,440
happen

438
00:15:41,440 --> 00:15:43,920
and the bars claims jws knows like no no

439
00:15:43,920 --> 00:15:45,600
it has to be with a signature so i'm

440
00:15:45,600 --> 00:15:47,680
gonna expect the signature and i'm gonna

441
00:15:47,680 --> 00:15:50,240
fail if that signature is not there but

442
00:15:50,240 --> 00:15:52,320
the only way i could figure out that

443
00:15:52,320 --> 00:15:54,800
behavior is by writing a

444
00:15:54,800 --> 00:15:56,480
simple application that tries these

445
00:15:56,480 --> 00:15:58,079
things out to see how the library

446
00:15:58,079 --> 00:16:00,560
behaves

447
00:16:00,959 --> 00:16:02,480
and you can kind of see that that's

448
00:16:02,480 --> 00:16:04,880
probably not the best way of handling

449
00:16:04,880 --> 00:16:06,639
things

450
00:16:06,639 --> 00:16:08,320
and this problem is really common by the

451
00:16:08,320 --> 00:16:10,399
way this is this is one of the saddest

452
00:16:10,399 --> 00:16:12,639
parts of json web tokens the fact that

453
00:16:12,639 --> 00:16:14,560
the spec allows that is is one thing

454
00:16:14,560 --> 00:16:16,959
it's not that uncommon because the ssl

455
00:16:16,959 --> 00:16:18,959
and tls specs also allow

456
00:16:18,959 --> 00:16:21,440
to run tls without in any encryption for

457
00:16:21,440 --> 00:16:23,440
example which nobody does in practice

458
00:16:23,440 --> 00:16:25,600
but it's in the spec and the same thing

459
00:16:25,600 --> 00:16:27,440
happened here the problem is that

460
00:16:27,440 --> 00:16:30,079
libraries implemented this and

461
00:16:30,079 --> 00:16:31,839
actually a lot of libraries allowed this

462
00:16:31,839 --> 00:16:33,360
by default

463
00:16:33,360 --> 00:16:35,040
which is a problem because now the

464
00:16:35,040 --> 00:16:36,560
attacker can generate a token like this

465
00:16:36,560 --> 00:16:38,399
put arbitrary claims in there like yeah

466
00:16:38,399 --> 00:16:40,959
i'm philip and i'm an admin and send it

467
00:16:40,959 --> 00:16:43,759
to the server and apache pulsar in our

468
00:16:43,759 --> 00:16:45,920
example would accept that

469
00:16:45,920 --> 00:16:48,880
and this problem exists in quite a few

470
00:16:48,880 --> 00:16:50,399
applications

471
00:16:50,399 --> 00:16:53,279
and it happened at zero as well

472
00:16:53,279 --> 00:16:55,040
so the problem was in a lot of libraries

473
00:16:55,040 --> 00:16:56,959
it was discovered in 2015 in most

474
00:16:56,959 --> 00:16:58,800
libraries that they supported this by

475
00:16:58,800 --> 00:17:00,399
default and

476
00:17:00,399 --> 00:17:02,079
people patched libraries to make it a

477
00:17:02,079 --> 00:17:04,720
bit more difficult to accept such tokens

478
00:17:04,720 --> 00:17:06,079
and some

479
00:17:06,079 --> 00:17:07,520
applications that were using those

480
00:17:07,520 --> 00:17:09,839
libraries didn't immediately update and

481
00:17:09,839 --> 00:17:12,400
instead they added a check in their code

482
00:17:12,400 --> 00:17:15,280
that says if l is none i don't want your

483
00:17:15,280 --> 00:17:16,160
token

484
00:17:16,160 --> 00:17:17,760
so it's a simple code based check that

485
00:17:17,760 --> 00:17:18,880
rejects

486
00:17:18,880 --> 00:17:22,000
tokens that are unsigned and only allows

487
00:17:22,000 --> 00:17:23,679
signed tokens

488
00:17:23,679 --> 00:17:24,799
at least

489
00:17:24,799 --> 00:17:28,240
that's what we thought that would happen

490
00:17:28,240 --> 00:17:30,880
but the thing is

491
00:17:30,880 --> 00:17:32,799
some attacker

492
00:17:32,799 --> 00:17:34,559
figured out

493
00:17:34,559 --> 00:17:36,200
that if we put

494
00:17:36,200 --> 00:17:38,080
non-capitalized letters at least some

495
00:17:38,080 --> 00:17:40,240
capitalized letters that it would bypass

496
00:17:40,240 --> 00:17:41,600
some of these checks because they only

497
00:17:41,600 --> 00:17:43,679
check for the lower case none and it

498
00:17:43,679 --> 00:17:45,919
would still be accepted by libraries so

499
00:17:45,919 --> 00:17:46,720
this

500
00:17:46,720 --> 00:17:49,039
weird capitalization thing is an actual

501
00:17:49,039 --> 00:17:51,840
bypass against code based checks on elk

502
00:17:51,840 --> 00:17:54,000
now which is why code-based checks are

503
00:17:54,000 --> 00:17:56,400
not a very good idea even though they

504
00:17:56,400 --> 00:17:58,720
happen in practice

505
00:17:58,720 --> 00:18:00,559
by the way this was a a hard lesson for

506
00:18:00,559 --> 00:18:02,320
azure to learn and they actually

507
00:18:02,320 --> 00:18:04,799
concluded that they should uh increase

508
00:18:04,799 --> 00:18:06,640
their security efforts and have been

509
00:18:06,640 --> 00:18:09,280
doing ever since which is good

510
00:18:09,280 --> 00:18:11,919
but this alg non problem is

511
00:18:11,919 --> 00:18:14,640
it's kind of a nail in the coffin of

512
00:18:14,640 --> 00:18:15,919
jason webb though cause it's something

513
00:18:15,919 --> 00:18:18,080
that people really

514
00:18:18,080 --> 00:18:19,039
really

515
00:18:19,039 --> 00:18:21,200
mess up quite often it's actually so bad

516
00:18:21,200 --> 00:18:23,679
that some people with a profound hatred

517
00:18:23,679 --> 00:18:25,520
for jason webb tokens because of

518
00:18:25,520 --> 00:18:27,520
problems like this build a website that

519
00:18:27,520 --> 00:18:30,520
says how many days since the job

520
00:18:30,520 --> 00:18:32,080
non-von.com

521
00:18:32,080 --> 00:18:34,240
and that website tracks

522
00:18:34,240 --> 00:18:36,640
cases where this non-vulnerability pops

523
00:18:36,640 --> 00:18:39,280
up and causes a problem and this is an

524
00:18:39,280 --> 00:18:41,600
old screenshot there's new

525
00:18:41,600 --> 00:18:43,280
this one is longer ago for one and

526
00:18:43,280 --> 00:18:45,600
there's new cases on there

527
00:18:45,600 --> 00:18:46,799
second but

528
00:18:46,799 --> 00:18:48,320
this screenshot has a very interesting

529
00:18:48,320 --> 00:18:50,080
takeaway

530
00:18:50,080 --> 00:18:51,919
the takeaway here is that this happens

531
00:18:51,919 --> 00:18:53,840
in modern applications because i'm

532
00:18:53,840 --> 00:18:56,799
pretty sure that the uk nhs covet 19

533
00:18:56,799 --> 00:18:59,360
contact racing app was only built in

534
00:18:59,360 --> 00:19:02,080
2020 yet it still contains this

535
00:19:02,080 --> 00:19:03,679
vulnerability that we've known about for

536
00:19:03,679 --> 00:19:05,919
at least five years

537
00:19:05,919 --> 00:19:07,760
we still managed to build modern

538
00:19:07,760 --> 00:19:09,919
applications containing that same

539
00:19:09,919 --> 00:19:12,240
vulnerability

540
00:19:12,240 --> 00:19:14,640
and attackers know about this too

541
00:19:14,640 --> 00:19:17,200
and burp suite a pen testing tool even

542
00:19:17,200 --> 00:19:19,200
has an add-on that allows you to mess

543
00:19:19,200 --> 00:19:20,880
with json web tokens and one of the

544
00:19:20,880 --> 00:19:22,880
options you have it's like a drop down

545
00:19:22,880 --> 00:19:25,120
elk non-click you can even choose your

546
00:19:25,120 --> 00:19:27,280
capitalization and boom it will generate

547
00:19:27,280 --> 00:19:29,600
a shot for you without signature so you

548
00:19:29,600 --> 00:19:32,320
can test if a service accepts that json

549
00:19:32,320 --> 00:19:34,080
web token and if it does like apache

550
00:19:34,080 --> 00:19:36,000
pulsar you have found a massive

551
00:19:36,000 --> 00:19:37,679
vulnerability and that's something you

552
00:19:37,679 --> 00:19:40,960
need to address immediately

553
00:19:40,960 --> 00:19:43,200
and that brings us to a first

554
00:19:43,200 --> 00:19:44,559
takeaway here

555
00:19:44,559 --> 00:19:46,320
and the first takeaway is low level and

556
00:19:46,320 --> 00:19:47,840
technical just because i want to get

557
00:19:47,840 --> 00:19:49,039
this thing

558
00:19:49,039 --> 00:19:50,960
fixed in as many applications as

559
00:19:50,960 --> 00:19:54,160
possible you should have test scenarios

560
00:19:54,160 --> 00:19:56,160
for your apis for your applications that

561
00:19:56,160 --> 00:19:58,320
test for these common bit files

562
00:19:58,320 --> 00:20:00,400
one of the things i always work i work

563
00:20:00,400 --> 00:20:03,039
with customers on security quite a bit

564
00:20:03,039 --> 00:20:05,280
and i help them write these tests

565
00:20:05,280 --> 00:20:06,799
whenever you have an endpoint accepting

566
00:20:06,799 --> 00:20:09,520
json web tokens like apache balsa head

567
00:20:09,520 --> 00:20:11,200
you should have a battery of tests that

568
00:20:11,200 --> 00:20:13,520
throws invalid tokens at that endpoint

569
00:20:13,520 --> 00:20:15,360
like wrong signatures

570
00:20:15,360 --> 00:20:17,520
modified payloads and so on and so on

571
00:20:17,520 --> 00:20:20,480
and they should be all i'll be rejected

572
00:20:20,480 --> 00:20:21,919
and a bunch of those tests should be

573
00:20:21,919 --> 00:20:23,760
elgin on tokens like just throw it at

574
00:20:23,760 --> 00:20:25,600
your application and see if it comes

575
00:20:25,600 --> 00:20:26,480
back

576
00:20:26,480 --> 00:20:28,880
with an error preferably not with all

577
00:20:28,880 --> 00:20:30,799
good and if it actually throws an error

578
00:20:30,799 --> 00:20:32,559
good because now you know that you have

579
00:20:32,559 --> 00:20:34,640
covered that use case and if it accepts

580
00:20:34,640 --> 00:20:36,240
a token you have found a vulnerability

581
00:20:36,240 --> 00:20:39,120
that you can fix immediately

582
00:20:39,120 --> 00:20:42,639
really really important

583
00:20:43,760 --> 00:20:45,919
now

584
00:20:46,320 --> 00:20:47,919
i'm sure a couple of you are thinking

585
00:20:47,919 --> 00:20:48,720
like

586
00:20:48,720 --> 00:20:50,880
if json web tokens suck so hard why are

587
00:20:50,880 --> 00:20:52,640
we using them and that's a question i

588
00:20:52,640 --> 00:20:54,320
actually get quite often

589
00:20:54,320 --> 00:20:56,640
and there's there are some alternatives

590
00:20:56,640 --> 00:20:57,840
by the way the people behind that

591
00:20:57,840 --> 00:20:59,840
website uh tracking the elk non

592
00:20:59,840 --> 00:21:01,520
vulnerabilities they hate shots so hard

593
00:21:01,520 --> 00:21:02,400
that they

594
00:21:02,400 --> 00:21:04,320
proposed an alternative

595
00:21:04,320 --> 00:21:06,720
called pacito but these alternatives are

596
00:21:06,720 --> 00:21:08,960
not very widely supported so one of the

597
00:21:08,960 --> 00:21:10,799
strengths of shot is wide library

598
00:21:10,799 --> 00:21:12,400
support for every language the

599
00:21:12,400 --> 00:21:13,600
alternatives

600
00:21:13,600 --> 00:21:15,440
not so much

601
00:21:15,440 --> 00:21:17,840
they're also not compatible formats so

602
00:21:17,840 --> 00:21:19,520
if you want to switch token formats it

603
00:21:19,520 --> 00:21:21,520
requires a full update of your

604
00:21:21,520 --> 00:21:23,360
application which is fine if you have

605
00:21:23,360 --> 00:21:25,360
one app handling jots

606
00:21:25,360 --> 00:21:27,360
locally if you have like an application

607
00:21:27,360 --> 00:21:29,440
suite if you have a central services

608
00:21:29,440 --> 00:21:31,360
issuing jots this is going to be

609
00:21:31,360 --> 00:21:34,720
in update nightmare not something you do

610
00:21:34,720 --> 00:21:37,200
very easily

611
00:21:37,200 --> 00:21:38,480
and third maybe that's the most

612
00:21:38,480 --> 00:21:40,320
important argument why i'm not a big fan

613
00:21:40,320 --> 00:21:42,000
of throwing out shots it's because

614
00:21:42,000 --> 00:21:45,280
they're not going to go away anyway

615
00:21:45,280 --> 00:21:47,520
jots are heavily used in oauth and open

616
00:21:47,520 --> 00:21:50,159
id connect which are kind of getting

617
00:21:50,159 --> 00:21:52,000
more and more popular to implement

618
00:21:52,000 --> 00:21:53,600
authentication and authorization at

619
00:21:53,600 --> 00:21:55,840
scale

620
00:21:55,840 --> 00:21:57,280
so you'll have to be able to handle

621
00:21:57,280 --> 00:22:00,559
shots securely anyway so why push for an

622
00:22:00,559 --> 00:22:01,840
alternative if you're going to have to

623
00:22:01,840 --> 00:22:03,840
use both if you're using any of the

624
00:22:03,840 --> 00:22:06,880
industry standard about implementations

625
00:22:06,880 --> 00:22:09,679
i don't think that mage makes much sense

626
00:22:09,679 --> 00:22:10,960
from a

627
00:22:10,960 --> 00:22:14,559
manageability aspect

628
00:22:15,360 --> 00:22:16,720
all right

629
00:22:16,720 --> 00:22:18,960
so

630
00:22:19,120 --> 00:22:21,760
absec is too hard

631
00:22:21,760 --> 00:22:23,280
that's that's a statement it's not a

632
00:22:23,280 --> 00:22:26,000
question anymore it's a statement

633
00:22:26,000 --> 00:22:28,720
taking this example appsec is absolutely

634
00:22:28,720 --> 00:22:30,000
too hard

635
00:22:30,000 --> 00:22:32,159
i mean six functions

636
00:22:32,159 --> 00:22:33,600
good luck figuring out which one to use

637
00:22:33,600 --> 00:22:35,760
and this is only one library there's a

638
00:22:35,760 --> 00:22:37,679
couple of java libraries and i know at

639
00:22:37,679 --> 00:22:40,080
least another one that has a decode and

640
00:22:40,080 --> 00:22:42,159
a verify function use the wrong one and

641
00:22:42,159 --> 00:22:43,120
you get

642
00:22:43,120 --> 00:22:45,280
screwed over and there's problems with

643
00:22:45,280 --> 00:22:46,640
other libraries as well in other

644
00:22:46,640 --> 00:22:48,960
languages ruby and javascript and so on

645
00:22:48,960 --> 00:22:50,960
and so on

646
00:22:50,960 --> 00:22:53,120
and that's only verifying the signature

647
00:22:53,120 --> 00:22:55,200
on a json web token there's actually

648
00:22:55,200 --> 00:22:56,640
quite a few other things that you have

649
00:22:56,640 --> 00:22:58,480
to take into account

650
00:22:58,480 --> 00:23:01,280
to handle json web tokens correctly

651
00:23:01,280 --> 00:23:02,640
and i want to walk you through them not

652
00:23:02,640 --> 00:23:04,240
in detail but i just want to give you a

653
00:23:04,240 --> 00:23:06,559
quick overview so that we have a very

654
00:23:06,559 --> 00:23:10,480
good idea of what we ask from developers

655
00:23:10,480 --> 00:23:13,919
as a security community

656
00:23:14,000 --> 00:23:16,480
if you want to use json web tokens

657
00:23:16,480 --> 00:23:18,240
you have to choose the signature scheme

658
00:23:18,240 --> 00:23:20,960
because there's two ways to sign a shot

659
00:23:20,960 --> 00:23:23,039
one is adding an hmac the other one is

660
00:23:23,039 --> 00:23:24,880
adding a digital signature generated

661
00:23:24,880 --> 00:23:26,880
with the private key

662
00:23:26,880 --> 00:23:28,559
i'm giving you a notch here because the

663
00:23:28,559 --> 00:23:30,400
hmac thing is kind of useless in most

664
00:23:30,400 --> 00:23:32,240
scenarios because it relies on a shared

665
00:23:32,240 --> 00:23:34,240
secret so you probably want to use

666
00:23:34,240 --> 00:23:36,720
digital signatures but to figure this

667
00:23:36,720 --> 00:23:38,480
out to make an informed decision as a

668
00:23:38,480 --> 00:23:40,240
developer you would have to know about

669
00:23:40,240 --> 00:23:42,159
the security properties of both so you

670
00:23:42,159 --> 00:23:43,600
can think like oh yeah i actually need

671
00:23:43,600 --> 00:23:46,639
this one not that one

672
00:23:47,279 --> 00:23:48,960
let's say you want to use digital

673
00:23:48,960 --> 00:23:50,559
signatures now you have to decide on a

674
00:23:50,559 --> 00:23:52,799
signing algorithm

675
00:23:52,799 --> 00:23:55,360
there's a couple of options here

676
00:23:55,360 --> 00:23:57,120
and they have very meaningful names you

677
00:23:57,120 --> 00:23:58,360
have

678
00:23:58,360 --> 00:24:03,120
rs256ps256 or es256 or edd dsa it's like

679
00:24:03,120 --> 00:24:05,279
okay then i don't know

680
00:24:05,279 --> 00:24:08,400
most common is rs256 that's an rsa based

681
00:24:08,400 --> 00:24:11,440
signature uses sharp356 under the hood

682
00:24:11,440 --> 00:24:13,760
and it uses a specific padding

683
00:24:13,760 --> 00:24:16,559
pkcs something something

684
00:24:16,559 --> 00:24:19,039
that's most popular

685
00:24:19,039 --> 00:24:21,279
a lot of services use that by default

686
00:24:21,279 --> 00:24:23,440
but interestingly enough there's an rsa

687
00:24:23,440 --> 00:24:24,799
crypto spec

688
00:24:24,799 --> 00:24:26,720
that says like yeah this way of

689
00:24:26,720 --> 00:24:29,440
generating signatures it's it's okay but

690
00:24:29,440 --> 00:24:31,200
we kind of expect that this will not

691
00:24:31,200 --> 00:24:32,960
hold out very much very long in the

692
00:24:32,960 --> 00:24:35,279
future so we kind of deprecate that in

693
00:24:35,279 --> 00:24:37,760
favor of other approaches

694
00:24:37,760 --> 00:24:39,279
which is already a big conflict chad

695
00:24:39,279 --> 00:24:41,039
says like yeah i use this everybody uses

696
00:24:41,039 --> 00:24:44,000
that and the rsa people are like yeah

697
00:24:44,000 --> 00:24:46,720
i'm not sure if that's a good idea

698
00:24:46,720 --> 00:24:48,480
so my recommendation here without going

699
00:24:48,480 --> 00:24:50,520
into the details would be to use

700
00:24:50,520 --> 00:24:54,159
ps256 uses the same keys as rs256 so

701
00:24:54,159 --> 00:24:56,559
it's a real easy upgrade bot and it

702
00:24:56,559 --> 00:24:58,799
offers better security the only downside

703
00:24:58,799 --> 00:25:00,880
is support is a little bit less but if

704
00:25:00,880 --> 00:25:02,559
you use a good library you'll find

705
00:25:02,559 --> 00:25:06,320
support for that without trouble

706
00:25:06,880 --> 00:25:08,000
all right

707
00:25:08,000 --> 00:25:09,679
next step

708
00:25:09,679 --> 00:25:11,279
once you actually handle the json web

709
00:25:11,279 --> 00:25:13,200
token you have to verify the validity

710
00:25:13,200 --> 00:25:14,960
and that means correctly verifying the

711
00:25:14,960 --> 00:25:16,080
signature

712
00:25:16,080 --> 00:25:17,520
that's selecting the right function from

713
00:25:17,520 --> 00:25:19,760
that list of six that you had available

714
00:25:19,760 --> 00:25:21,679
in that java library

715
00:25:21,679 --> 00:25:23,120
and next you're supposed to check some

716
00:25:23,120 --> 00:25:25,039
timestamps best practices for jots

717
00:25:25,039 --> 00:25:27,360
require you to include timestamps such

718
00:25:27,360 --> 00:25:30,559
as an nbf a not before claim and an exp

719
00:25:30,559 --> 00:25:32,720
the expiration claim you have to make

720
00:25:32,720 --> 00:25:35,039
sure that these define a time we know

721
00:25:35,039 --> 00:25:38,000
that is acceptable to you

722
00:25:38,000 --> 00:25:40,559
and then typically you'll find iss and

723
00:25:40,559 --> 00:25:42,880
aud claims the issuer and the audience

724
00:25:42,880 --> 00:25:44,640
who has generated this job and who is

725
00:25:44,640 --> 00:25:46,799
supposed to consume this chart

726
00:25:46,799 --> 00:25:49,039
best practices again if they're present

727
00:25:49,039 --> 00:25:51,200
you have to check that these

728
00:25:51,200 --> 00:25:54,159
values make sense to you

729
00:25:54,159 --> 00:25:57,200
and these are only the basics

730
00:25:57,200 --> 00:25:58,720
that's the minimal

731
00:25:58,720 --> 00:26:00,960
level of security you need to handle

732
00:26:00,960 --> 00:26:01,919
shots

733
00:26:01,919 --> 00:26:03,679
in reality you're probably gonna have to

734
00:26:03,679 --> 00:26:05,679
deal with key identifiers

735
00:26:05,679 --> 00:26:07,039
because they

736
00:26:07,039 --> 00:26:08,480
when when you generate a jot you can

737
00:26:08,480 --> 00:26:10,559
include a hint like hey you should use

738
00:26:10,559 --> 00:26:12,480
this key to verify it so the receiver

739
00:26:12,480 --> 00:26:14,720
can look up the key in a key store or

740
00:26:14,720 --> 00:26:16,640
use a discovery protocol to obtain the

741
00:26:16,640 --> 00:26:19,440
keys or whatever works for you

742
00:26:19,440 --> 00:26:21,120
and you're also supposed to set an

743
00:26:21,120 --> 00:26:23,840
explicit type for a json

744
00:26:23,840 --> 00:26:25,760
that's something that

745
00:26:25,760 --> 00:26:28,240
well was discovered more recently it's a

746
00:26:28,240 --> 00:26:30,640
token confusion attack where two tokens

747
00:26:30,640 --> 00:26:32,559
uh have different purposes but they look

748
00:26:32,559 --> 00:26:34,240
very similar

749
00:26:34,240 --> 00:26:36,400
oh i don't know idc have such a problem

750
00:26:36,400 --> 00:26:38,559
for example then it's best to include or

751
00:26:38,559 --> 00:26:40,320
it's always best to include a specific

752
00:26:40,320 --> 00:26:42,159
type in the header telling the receiver

753
00:26:42,159 --> 00:26:44,480
exactly what the token is supposed to be

754
00:26:44,480 --> 00:26:46,720
used for that helps to avoid token

755
00:26:46,720 --> 00:26:49,679
confusion attacks

756
00:26:50,400 --> 00:26:53,120
this is what i teach in my training

757
00:26:53,120 --> 00:26:54,720
classes but i've been teaching for a

758
00:26:54,720 --> 00:26:55,760
while

759
00:26:55,760 --> 00:26:57,440
and i've also been wondering for a while

760
00:26:57,440 --> 00:26:58,880
is this really

761
00:26:58,880 --> 00:27:02,240
the best way is this how we teach people

762
00:27:02,240 --> 00:27:04,559
to build secure applications

763
00:27:04,559 --> 00:27:07,919
does this work in practice

764
00:27:07,919 --> 00:27:09,679
and most importantly can we expect

765
00:27:09,679 --> 00:27:12,880
developers to know all of these details

766
00:27:12,880 --> 00:27:15,200
before they even start using json web

767
00:27:15,200 --> 00:27:17,679
tokens

768
00:27:19,279 --> 00:27:20,720
i have an answer i have an opinion on

769
00:27:20,720 --> 00:27:22,399
this but this this is actually kind of a

770
00:27:22,399 --> 00:27:24,080
rhetoric question can we expect that

771
00:27:24,080 --> 00:27:27,120
from developers does that make any sense

772
00:27:27,120 --> 00:27:29,520
at all

773
00:27:30,799 --> 00:27:33,679
in my opinion i don't think so

774
00:27:33,679 --> 00:27:36,320
i don't see

775
00:27:36,720 --> 00:27:39,360
a path towards the future where this is

776
00:27:39,360 --> 00:27:41,120
going to work

777
00:27:41,120 --> 00:27:43,760
reliably

778
00:27:44,000 --> 00:27:46,559
that's why i want to advocate

779
00:27:46,559 --> 00:27:48,960
for taking all of this crap this

780
00:27:48,960 --> 00:27:51,919
responsibility away from developers

781
00:27:51,919 --> 00:27:53,760
and that doesn't involve building a new

782
00:27:53,760 --> 00:27:55,360
standard that makes a couple of these

783
00:27:55,360 --> 00:27:57,600
decisions for you or makes it more easy

784
00:27:57,600 --> 00:28:00,399
to make those decisions no that means

785
00:28:00,399 --> 00:28:02,799
your security team your security

786
00:28:02,799 --> 00:28:05,360
champions help developers

787
00:28:05,360 --> 00:28:06,799
in a way that they don't have to worry

788
00:28:06,799 --> 00:28:08,240
about that

789
00:28:08,240 --> 00:28:10,159
instead of riding this shot parsing

790
00:28:10,159 --> 00:28:11,919
logic yourself why don't we build a

791
00:28:11,919 --> 00:28:14,320
security library that handles our

792
00:28:14,320 --> 00:28:17,679
incoming token why don't we provide the

793
00:28:17,679 --> 00:28:19,520
right level of abstraction to handle

794
00:28:19,520 --> 00:28:21,760
that

795
00:28:21,919 --> 00:28:24,000
in a reusable library

796
00:28:24,000 --> 00:28:25,760
hey developer you get a token you want

797
00:28:25,760 --> 00:28:27,919
to make sure it's valid call our verify

798
00:28:27,919 --> 00:28:30,320
authentication token function it knows

799
00:28:30,320 --> 00:28:32,480
about which algorithm it performs some

800
00:28:32,480 --> 00:28:34,240
security checks it checks lifetimes and

801
00:28:34,240 --> 00:28:36,320
issuers and audiences and

802
00:28:36,320 --> 00:28:38,000
it makes your life a hell of a lot

803
00:28:38,000 --> 00:28:39,760
easier

804
00:28:39,760 --> 00:28:42,320
that's a really really powerful pattern

805
00:28:42,320 --> 00:28:44,640
i honestly think that this is the way

806
00:28:44,640 --> 00:28:46,480
and it has been shown that this actually

807
00:28:46,480 --> 00:28:48,159
works really well

808
00:28:48,159 --> 00:28:50,240
that this is the way forward

809
00:28:50,240 --> 00:28:51,760
to help people build more secure

810
00:28:51,760 --> 00:28:54,000
applications

811
00:28:54,000 --> 00:28:55,760
and this takeaway this slide here is

812
00:28:55,760 --> 00:28:57,360
maybe the most important takeaway from

813
00:28:57,360 --> 00:28:59,440
the entire presentation

814
00:28:59,440 --> 00:29:02,000
by encapsulating security behavior by

815
00:29:02,000 --> 00:29:04,000
offering the right abstraction

816
00:29:04,000 --> 00:29:06,720
we absolve a developer's responsibility

817
00:29:06,720 --> 00:29:08,640
the developer is no longer responsible

818
00:29:08,640 --> 00:29:10,480
for making these detailed security

819
00:29:10,480 --> 00:29:11,760
choices

820
00:29:11,760 --> 00:29:13,039
and risking

821
00:29:13,039 --> 00:29:15,760
getting it wrong

822
00:29:17,039 --> 00:29:18,399
i'm going to come back to this pattern a

823
00:29:18,399 --> 00:29:22,399
bit later in this session as well

824
00:29:22,720 --> 00:29:25,200
this is kind of funny because as i was

825
00:29:25,200 --> 00:29:26,960
working on this

826
00:29:26,960 --> 00:29:29,600
presentation this is a this idea last

827
00:29:29,600 --> 00:29:32,399
week there was a blog post from netflix

828
00:29:32,399 --> 00:29:34,480
on how they secured netflix studios at

829
00:29:34,480 --> 00:29:37,520
scale and the post makes a very similar

830
00:29:37,520 --> 00:29:38,880
conclusion

831
00:29:38,880 --> 00:29:40,960
they try to work with development teams

832
00:29:40,960 --> 00:29:42,559
on

833
00:29:42,559 --> 00:29:44,399
integrating security in their apps and

834
00:29:44,399 --> 00:29:46,000
the response was like yeah we don't have

835
00:29:46,000 --> 00:29:47,279
time for that

836
00:29:47,279 --> 00:29:48,880
go away

837
00:29:48,880 --> 00:29:51,120
yeah yeah we'll do it next sprint which

838
00:29:51,120 --> 00:29:53,039
never happens because it took quite a

839
00:29:53,039 --> 00:29:55,279
bit of effort to integrate uh security

840
00:29:55,279 --> 00:29:56,559
in the applications they had massive

841
00:29:56,559 --> 00:29:58,080
checklists of what you're supposed to do

842
00:29:58,080 --> 00:30:00,640
and it simply didn't work

843
00:30:00,640 --> 00:30:01,919
and the approach they eventually took

844
00:30:01,919 --> 00:30:03,120
was they said like you know what we're

845
00:30:03,120 --> 00:30:04,960
gonna build a

846
00:30:04,960 --> 00:30:06,720
product a security product internal

847
00:30:06,720 --> 00:30:07,679
product

848
00:30:07,679 --> 00:30:09,679
that people can use to set up a new

849
00:30:09,679 --> 00:30:11,120
application

850
00:30:11,120 --> 00:30:13,840
and while we do that we handle a couple

851
00:30:13,840 --> 00:30:15,520
of tasks that they have to do anyway

852
00:30:15,520 --> 00:30:17,120
like generate domain names and this and

853
00:30:17,120 --> 00:30:18,720
that and in the end we give you an

854
00:30:18,720 --> 00:30:20,640
application that has

855
00:30:20,640 --> 00:30:22,480
a waf in front of it authentication in

856
00:30:22,480 --> 00:30:24,640
front of it logging and monitoring setup

857
00:30:24,640 --> 00:30:26,640
allowing a developer at netflix to go

858
00:30:26,640 --> 00:30:29,200
from zero to a deployed application with

859
00:30:29,200 --> 00:30:32,480
authentication in 10 minutes

860
00:30:32,960 --> 00:30:34,640
and that's what

861
00:30:34,640 --> 00:30:36,720
pushed a lot of people

862
00:30:36,720 --> 00:30:39,520
towards using this product it made their

863
00:30:39,520 --> 00:30:42,799
lives easier and it added security

864
00:30:42,799 --> 00:30:44,159
at the same time

865
00:30:44,159 --> 00:30:46,080
and you can do the same with your

866
00:30:46,080 --> 00:30:47,360
internal libraries you don't have to go

867
00:30:47,360 --> 00:30:49,520
to full netflix route by building

868
00:30:49,520 --> 00:30:51,200
extensive products to handle these

869
00:30:51,200 --> 00:30:52,960
things but if you have a well-designed

870
00:30:52,960 --> 00:30:54,640
security library you can reuse that

871
00:30:54,640 --> 00:30:56,880
across different applications because we

872
00:30:56,880 --> 00:30:58,559
all know that if you work at a company

873
00:30:58,559 --> 00:31:00,399
you have different teams that all have

874
00:31:00,399 --> 00:31:02,240
to repeat the same task over and over

875
00:31:02,240 --> 00:31:04,720
again with the risk of getting something

876
00:31:04,720 --> 00:31:05,600
wrong

877
00:31:05,600 --> 00:31:07,840
but if you have a manageable deck stack

878
00:31:07,840 --> 00:31:09,760
then you can easily build

879
00:31:09,760 --> 00:31:11,200
a shareable library that handles a

880
00:31:11,200 --> 00:31:12,799
couple of these details

881
00:31:12,799 --> 00:31:14,480
automatically

882
00:31:14,480 --> 00:31:16,720
and what's even better doing so

883
00:31:16,720 --> 00:31:19,120
encapsulating that in that logic into

884
00:31:19,120 --> 00:31:22,080
libraries gives you flexibility as well

885
00:31:22,080 --> 00:31:23,840
you want to upgrade your shot signing

886
00:31:23,840 --> 00:31:27,600
algorithm from rs256 to ps256 great you

887
00:31:27,600 --> 00:31:29,039
update your library

888
00:31:29,039 --> 00:31:30,559
where you generate a verified shots and

889
00:31:30,559 --> 00:31:32,480
you're done you want to change the token

890
00:31:32,480 --> 00:31:34,799
format to something else be my guest you

891
00:31:34,799 --> 00:31:36,640
change it in one place and the rest of

892
00:31:36,640 --> 00:31:38,240
the application doesn't even have to

893
00:31:38,240 --> 00:31:40,480
care about the fact that you're using a

894
00:31:40,480 --> 00:31:43,039
different token format

895
00:31:43,039 --> 00:31:47,039
that's a big win in my book

896
00:31:47,039 --> 00:31:48,320
and what's really interesting is that we

897
00:31:48,320 --> 00:31:50,000
actually learned about this

898
00:31:50,000 --> 00:31:52,240
encapsulation pattern at the university

899
00:31:52,240 --> 00:31:54,480
of memories when we're learning software

900
00:31:54,480 --> 00:31:56,480
engineering at least in my education

901
00:31:56,480 --> 00:31:58,320
that was a big thing

902
00:31:58,320 --> 00:32:01,279
and what really struck me when i was

903
00:32:01,279 --> 00:32:02,720
making this point

904
00:32:02,720 --> 00:32:05,600
in preparing this presentation is how

905
00:32:05,600 --> 00:32:07,200
you kind of know it's a good idea when

906
00:32:07,200 --> 00:32:09,120
you learn about it but you don't have

907
00:32:09,120 --> 00:32:11,039
the experience as a student

908
00:32:11,039 --> 00:32:12,480
to see it as an action to see the

909
00:32:12,480 --> 00:32:14,640
benefits in action and now this actually

910
00:32:14,640 --> 00:32:16,399
culminates into

911
00:32:16,399 --> 00:32:18,960
something really useful and

912
00:32:18,960 --> 00:32:21,440
something that helps us build better and

913
00:32:21,440 --> 00:32:22,960
more secure applications and that's

914
00:32:22,960 --> 00:32:27,080
actually pretty awesome

915
00:32:29,919 --> 00:32:31,519
all right

916
00:32:31,519 --> 00:32:35,760
enough about json web tokens

917
00:32:36,240 --> 00:32:37,679
let's talk about something completely

918
00:32:37,679 --> 00:32:40,559
different let's talk about react

919
00:32:40,559 --> 00:32:42,960
react is a

920
00:32:42,960 --> 00:32:43,919
yeah

921
00:32:43,919 --> 00:32:45,360
this was not smart for me because i

922
00:32:45,360 --> 00:32:47,039
don't really know how to define react

923
00:32:47,039 --> 00:32:48,480
there's a couple of different opinions

924
00:32:48,480 --> 00:32:49,600
it's

925
00:32:49,600 --> 00:32:51,279
not really a framework it's more of a

926
00:32:51,279 --> 00:32:53,840
component library i would say whatever

927
00:32:53,840 --> 00:32:56,720
doesn't matter react is

928
00:32:56,720 --> 00:32:59,039
a javascript project let's call it that

929
00:32:59,039 --> 00:33:00,880
a javascript project that will help you

930
00:33:00,880 --> 00:33:02,080
build

931
00:33:02,080 --> 00:33:04,000
front-end applications

932
00:33:04,000 --> 00:33:07,120
it basically allows you to generate

933
00:33:07,120 --> 00:33:09,279
smart application components or even

934
00:33:09,279 --> 00:33:12,159
full templates by using html

935
00:33:12,159 --> 00:33:14,559
adding some data into that html allowing

936
00:33:14,559 --> 00:33:17,039
you to make beautiful applications

937
00:33:17,039 --> 00:33:19,279
awesome

938
00:33:19,279 --> 00:33:20,559
you probably know that whenever you're

939
00:33:20,559 --> 00:33:22,399
building something with html cross-site

940
00:33:22,399 --> 00:33:24,480
scripting is definitely a risk you have

941
00:33:24,480 --> 00:33:26,640
to worry about cross-site scripting

942
00:33:26,640 --> 00:33:28,240
that's always been part of the ospot

943
00:33:28,240 --> 00:33:31,840
then and that doesn't change in 2021 and

944
00:33:31,840 --> 00:33:34,720
i'm giving spoilers about the os now but

945
00:33:34,720 --> 00:33:36,640
uh it's kind of public knowledge so this

946
00:33:36,640 --> 00:33:38,559
is good there's been a release candidate

947
00:33:38,559 --> 00:33:40,159
available for a while

948
00:33:40,159 --> 00:33:42,080
so let's cross that scripting

949
00:33:42,080 --> 00:33:44,080
in a very short nutshell crossout

950
00:33:44,080 --> 00:33:46,480
scripting is a problem that happens when

951
00:33:46,480 --> 00:33:48,640
you get some data from the user from a

952
00:33:48,640 --> 00:33:51,200
malicious user or an external source and

953
00:33:51,200 --> 00:33:53,519
that data contains javascript code that

954
00:33:53,519 --> 00:33:55,360
the browser will execute

955
00:33:55,360 --> 00:33:56,799
because this allows me as a malicious

956
00:33:56,799 --> 00:33:58,960
user to write a restaurant review drop

957
00:33:58,960 --> 00:34:00,799
some malicious code in there and it will

958
00:34:00,799 --> 00:34:02,799
execute in all of your browsers when you

959
00:34:02,799 --> 00:34:04,840
look at that restaurant

960
00:34:04,840 --> 00:34:06,399
review

961
00:34:06,399 --> 00:34:07,679
so what's going to happen if we take

962
00:34:07,679 --> 00:34:10,079
this review data in the second block and

963
00:34:10,079 --> 00:34:11,839
put that in place of that review

964
00:34:11,839 --> 00:34:14,239
placeholder on line 3 in the react

965
00:34:14,239 --> 00:34:16,000
template well

966
00:34:16,000 --> 00:34:18,239
this happens

967
00:34:18,239 --> 00:34:20,719
it looks like crap granted that's that's

968
00:34:20,719 --> 00:34:22,480
true well first of all because i'm not a

969
00:34:22,480 --> 00:34:23,918
very good designer and second of all

970
00:34:23,918 --> 00:34:27,440
because react is rendering that data

971
00:34:27,440 --> 00:34:29,839
as data the browser doesn't see this as

972
00:34:29,839 --> 00:34:31,599
code the browser doesn't parse html

973
00:34:31,599 --> 00:34:33,520
because react knows that what you're

974
00:34:33,520 --> 00:34:35,040
doing is potentially dangerous and it's

975
00:34:35,040 --> 00:34:37,119
just like yeah let's let's not be

976
00:34:37,119 --> 00:34:38,719
insecure here

977
00:34:38,719 --> 00:34:41,199
let's actually escape the data before we

978
00:34:41,199 --> 00:34:42,639
put it in the view

979
00:34:42,639 --> 00:34:44,560
so we don't risk or cause cross-site

980
00:34:44,560 --> 00:34:47,440
scripting vulnerabilities

981
00:34:47,440 --> 00:34:49,040
awesome

982
00:34:49,040 --> 00:34:51,359
this is a major step forward for

983
00:34:51,359 --> 00:34:53,520
security and by the way all the major

984
00:34:53,520 --> 00:34:55,760
and major javascript frameworks do it

985
00:34:55,760 --> 00:34:57,359
angular does it for you does it amber

986
00:34:57,359 --> 00:34:59,280
does it react does it if you happen to

987
00:34:59,280 --> 00:35:01,520
use a framework that doesn't do this my

988
00:35:01,520 --> 00:35:03,440
advice is to drop it

989
00:35:03,440 --> 00:35:05,040
and use another one seriously if they

990
00:35:05,040 --> 00:35:07,119
don't do this i would not trust that for

991
00:35:07,119 --> 00:35:09,920
anything else as well

992
00:35:09,920 --> 00:35:12,000
secure by default

993
00:35:12,000 --> 00:35:13,280
awesome

994
00:35:13,280 --> 00:35:15,040
as long as you use these braces in react

995
00:35:15,040 --> 00:35:17,760
you're covered against trusted scripting

996
00:35:17,760 --> 00:35:20,880
in scenarios like this that's good

997
00:35:20,880 --> 00:35:22,480
that's all nice until somebody comes

998
00:35:22,480 --> 00:35:24,160
along and says like yeah

999
00:35:24,160 --> 00:35:26,800
i want to render something pretty

1000
00:35:26,800 --> 00:35:28,800
i had a ck editor component and somebody

1001
00:35:28,800 --> 00:35:30,960
gave me a document and behind the scenes

1002
00:35:30,960 --> 00:35:33,680
sake ck editor generates html with

1003
00:35:33,680 --> 00:35:35,280
headings and paragraphs and images and

1004
00:35:35,280 --> 00:35:37,119
captions and so on

1005
00:35:37,119 --> 00:35:38,560
and i want to render that and if i put

1006
00:35:38,560 --> 00:35:41,520
that between braces it looks like crap

1007
00:35:41,520 --> 00:35:43,599
and yes it does look like crap not

1008
00:35:43,599 --> 00:35:45,839
beautiful like it should be as on this

1009
00:35:45,839 --> 00:35:47,119
slide here

1010
00:35:47,119 --> 00:35:48,720
so

1011
00:35:48,720 --> 00:35:51,119
as a developer you're like oh crap how

1012
00:35:51,119 --> 00:35:52,720
do we fix that

1013
00:35:52,720 --> 00:35:54,880
and there's a way in the browser you can

1014
00:35:54,880 --> 00:35:56,880
assign html to an element it's called

1015
00:35:56,880 --> 00:35:59,839
inner html

1016
00:35:59,920 --> 00:36:01,920
and it's dangerous

1017
00:36:01,920 --> 00:36:04,079
so react says like yeah this inner html

1018
00:36:04,079 --> 00:36:05,760
thingy causes quite a few problems you

1019
00:36:05,760 --> 00:36:07,760
know what we're gonna call this

1020
00:36:07,760 --> 00:36:10,160
dangerously set inner html and you can

1021
00:36:10,160 --> 00:36:11,520
see where this is going right you're

1022
00:36:11,520 --> 00:36:14,800
smart people you know where this goes

1023
00:36:14,800 --> 00:36:17,119
it's a dangerous property so if you use

1024
00:36:17,119 --> 00:36:19,839
that property and assign the data

1025
00:36:19,839 --> 00:36:21,680
the react way with underscore underscore

1026
00:36:21,680 --> 00:36:23,920
html that's to avoid accidental misuse

1027
00:36:23,920 --> 00:36:25,520
by autocomplete

1028
00:36:25,520 --> 00:36:27,520
if you

1029
00:36:27,520 --> 00:36:29,920
assign a review and the data is that you

1030
00:36:29,920 --> 00:36:33,040
will get the html it looks a lot better

1031
00:36:33,040 --> 00:36:35,119
my design is still crap but the html is

1032
00:36:35,119 --> 00:36:37,040
actually rendered now which is awesome

1033
00:36:37,040 --> 00:36:39,920
but you also get a very beautiful alert

1034
00:36:39,920 --> 00:36:42,480
dialogue

1035
00:36:42,560 --> 00:36:43,839
not good

1036
00:36:43,839 --> 00:36:45,760
why not because the alert is annoying

1037
00:36:45,760 --> 00:36:47,520
yes it is but that's not the point the

1038
00:36:47,520 --> 00:36:49,280
point is that the attacker a malicious

1039
00:36:49,280 --> 00:36:51,520
user is now executing javascript code in

1040
00:36:51,520 --> 00:36:53,200
the browser of the user and they can do

1041
00:36:53,200 --> 00:36:54,560
whatever they want

1042
00:36:54,560 --> 00:36:56,560
they can change the application's

1043
00:36:56,560 --> 00:36:58,640
behavior they can

1044
00:36:58,640 --> 00:37:00,079
trick the user into entering their

1045
00:37:00,079 --> 00:37:01,920
password in a fake form field they can

1046
00:37:01,920 --> 00:37:03,280
send requests to a back-end they can

1047
00:37:03,280 --> 00:37:05,200
abuse permissions from a webcam they can

1048
00:37:05,200 --> 00:37:07,359
do whatever you want or whatever you can

1049
00:37:07,359 --> 00:37:10,240
do from javascript not good

1050
00:37:10,240 --> 00:37:12,240
a react knows about this react says like

1051
00:37:12,240 --> 00:37:13,920
yeah we know that this inner html is

1052
00:37:13,920 --> 00:37:15,119
dangerous that's why we call it

1053
00:37:15,119 --> 00:37:16,240
dangerous

1054
00:37:16,240 --> 00:37:17,920
but they don't fix

1055
00:37:17,920 --> 00:37:19,280
the problem they don't apply any

1056
00:37:19,280 --> 00:37:20,839
protection at all they just tell you

1057
00:37:20,839 --> 00:37:24,320
like be careful

1058
00:37:24,320 --> 00:37:27,520
so how do you fix this well

1059
00:37:27,839 --> 00:37:29,520
the real way to fix that is by

1060
00:37:29,520 --> 00:37:32,560
sanitizing the data and my library of

1061
00:37:32,560 --> 00:37:34,240
choice here is dom purify which is an

1062
00:37:34,240 --> 00:37:37,200
absolute awesome javascript sanitizer

1063
00:37:37,200 --> 00:37:39,040
so we sanitize the data which means we

1064
00:37:39,040 --> 00:37:40,960
take that review we feed it into dump

1065
00:37:40,960 --> 00:37:42,880
purify which is going to look at what

1066
00:37:42,880 --> 00:37:44,160
you're trying to do it's going to parse

1067
00:37:44,160 --> 00:37:45,599
the html

1068
00:37:45,599 --> 00:37:47,119
in a safe way

1069
00:37:47,119 --> 00:37:48,560
and walk that tree and it's going to be

1070
00:37:48,560 --> 00:37:51,440
like b oh yeah that's on my list of safe

1071
00:37:51,440 --> 00:37:53,440
elements awesome you can use the ball

1072
00:37:53,440 --> 00:37:55,680
tag don't it's going to do that for

1073
00:37:55,680 --> 00:37:57,520
every element it finds until it finds

1074
00:37:57,520 --> 00:38:01,200
the img the image it's like an image

1075
00:38:01,200 --> 00:38:03,119
let's watch the attributes

1076
00:38:03,119 --> 00:38:05,119
source oh yeah that's on my list of safe

1077
00:38:05,119 --> 00:38:06,960
attributes source is cool

1078
00:38:06,960 --> 00:38:08,560
on error

1079
00:38:08,560 --> 00:38:10,320
i don't know what that means so it's

1080
00:38:10,320 --> 00:38:13,440
probably unsafe out so it will keep the

1081
00:38:13,440 --> 00:38:15,839
legitimate html the benign html in there

1082
00:38:15,839 --> 00:38:17,839
but it will remove all the dangerous

1083
00:38:17,839 --> 00:38:20,400
features like on error or script tags or

1084
00:38:20,400 --> 00:38:22,800
whatever and what you get as a result is

1085
00:38:22,800 --> 00:38:23,760
save

1086
00:38:23,760 --> 00:38:25,280
html

1087
00:38:25,280 --> 00:38:28,400
and that's save html

1088
00:38:28,720 --> 00:38:30,240
it will render the html properly what

1089
00:38:30,240 --> 00:38:32,320
you get is save html and that save html

1090
00:38:32,320 --> 00:38:36,160
is what you can include in the page

1091
00:38:36,160 --> 00:38:39,520
without risking cross-site scripting

1092
00:38:39,520 --> 00:38:41,520
awesome so what's the takeaway here the

1093
00:38:41,520 --> 00:38:43,119
takeaway and we see that in a lot of

1094
00:38:43,119 --> 00:38:45,599
modern frameworks

1095
00:38:45,599 --> 00:38:49,520
is that we name dangerous things

1096
00:38:49,520 --> 00:38:51,760
with dangerous we mark them as dangerous

1097
00:38:51,760 --> 00:38:53,920
features so they can't be accidentally

1098
00:38:53,920 --> 00:38:55,200
misused

1099
00:38:55,200 --> 00:38:56,480
for example in angular there's a

1100
00:38:56,480 --> 00:38:58,400
function called bypass security

1101
00:38:58,400 --> 00:39:00,400
something something kind of tells you

1102
00:39:00,400 --> 00:39:02,079
exactly what you're doing when you

1103
00:39:02,079 --> 00:39:03,680
autocomplete that

1104
00:39:03,680 --> 00:39:05,839
also helps

1105
00:39:05,839 --> 00:39:07,760
in your day-to-day job because

1106
00:39:07,760 --> 00:39:09,680
that react developer

1107
00:39:09,680 --> 00:39:12,320
probably googled how to output html

1108
00:39:12,320 --> 00:39:13,920
found a stack overflow post and if it

1109
00:39:13,920 --> 00:39:17,040
says dangerously set in html

1110
00:39:17,040 --> 00:39:18,880
i'm confident that

1111
00:39:18,880 --> 00:39:21,119
a react a developer trying their best

1112
00:39:21,119 --> 00:39:23,280
will be like hmm dangerous what does

1113
00:39:23,280 --> 00:39:24,800
that mean

1114
00:39:24,800 --> 00:39:26,880
and it helps raise awareness

1115
00:39:26,880 --> 00:39:30,960
and it helps prevent accidental misuse

1116
00:39:30,960 --> 00:39:33,359
awesome

1117
00:39:33,680 --> 00:39:35,839
however

1118
00:39:35,839 --> 00:39:39,440
marking something as dangerous

1119
00:39:39,520 --> 00:39:41,520
doesn't really solve it right

1120
00:39:41,520 --> 00:39:43,520
that's like putting up the sign here be

1121
00:39:43,520 --> 00:39:44,960
careful you can fall off the cliff it's

1122
00:39:44,960 --> 00:39:46,320
like oh yeah thank you for the warning

1123
00:39:46,320 --> 00:39:47,920
but if you misstep you're still gonna

1124
00:39:47,920 --> 00:39:49,280
die

1125
00:39:49,280 --> 00:39:51,119
probably depends on how deep the cliff

1126
00:39:51,119 --> 00:39:54,480
is in belgium probably not depends

1127
00:39:54,480 --> 00:39:55,440
that's what we're doing here we're

1128
00:39:55,440 --> 00:39:57,040
marking something as dangerous but we're

1129
00:39:57,040 --> 00:39:58,800
not really

1130
00:39:58,800 --> 00:40:01,599
fixing anything so does does it help

1131
00:40:01,599 --> 00:40:03,200
what does a developer do when they see

1132
00:40:03,200 --> 00:40:06,400
this dangerously set in html like what

1133
00:40:06,400 --> 00:40:08,240
does that mean

1134
00:40:08,240 --> 00:40:09,680
i know

1135
00:40:09,680 --> 00:40:13,040
let's look at the documentation

1136
00:40:13,680 --> 00:40:15,760
this is by the way the full explanation

1137
00:40:15,760 --> 00:40:18,240
of on the react page about dangerously

1138
00:40:18,240 --> 00:40:21,040
set in html

1139
00:40:21,040 --> 00:40:22,720
it's like yeah this is risky cross-site

1140
00:40:22,720 --> 00:40:23,680
scripting

1141
00:40:23,680 --> 00:40:25,839
here's how you can do it anyway

1142
00:40:25,839 --> 00:40:28,240
it's like

1143
00:40:28,480 --> 00:40:31,760
is that the right message

1144
00:40:31,760 --> 00:40:34,880
let me walk you through this

1145
00:40:35,440 --> 00:40:37,760
what do we expect a react developer to

1146
00:40:37,760 --> 00:40:39,839
do

1147
00:40:40,319 --> 00:40:42,079
when they look up

1148
00:40:42,079 --> 00:40:43,920
this explanation we expect them to

1149
00:40:43,920 --> 00:40:46,079
understand what this means if you've

1150
00:40:46,079 --> 00:40:47,680
never heard of cross-site scripting i

1151
00:40:47,680 --> 00:40:49,599
can guarantee that this is not a very

1152
00:40:49,599 --> 00:40:52,720
clear explanation

1153
00:40:52,720 --> 00:40:54,880
and if they understand what it means we

1154
00:40:54,880 --> 00:40:56,000
have to

1155
00:40:56,000 --> 00:40:58,000
we expect them to look up how to fix it

1156
00:40:58,000 --> 00:41:00,079
correctly because there's no mention of

1157
00:41:00,079 --> 00:41:03,520
sanitization there's nothing

1158
00:41:04,000 --> 00:41:05,520
and now we have to hope that they find

1159
00:41:05,520 --> 00:41:07,760
the right solution

1160
00:41:07,760 --> 00:41:08,880
and given

1161
00:41:08,880 --> 00:41:10,720
the number of people reading my react

1162
00:41:10,720 --> 00:41:12,960
security articles on my website a lot of

1163
00:41:12,960 --> 00:41:15,920
people find it fortunately on my side

1164
00:41:15,920 --> 00:41:17,280
but they can also find the wrong

1165
00:41:17,280 --> 00:41:19,040
solution somewhere else on the internet

1166
00:41:19,040 --> 00:41:20,640
we expect them to understand the

1167
00:41:20,640 --> 00:41:22,240
solution so they know how to apply it

1168
00:41:22,240 --> 00:41:24,240
and then apply it correctly in their

1169
00:41:24,240 --> 00:41:26,000
application every time they use this

1170
00:41:26,000 --> 00:41:29,359
dangerously set in html

1171
00:41:29,359 --> 00:41:30,880
to me

1172
00:41:30,880 --> 00:41:32,240
that's the thoughts and prayers

1173
00:41:32,240 --> 00:41:33,920
equivalent for application security it's

1174
00:41:33,920 --> 00:41:35,920
like fingers crossed and hope that

1175
00:41:35,920 --> 00:41:37,440
people figure out how to do this the

1176
00:41:37,440 --> 00:41:39,839
right way

1177
00:41:41,520 --> 00:41:44,160
and they don't

1178
00:41:44,560 --> 00:41:47,280
here's again an example

1179
00:41:47,280 --> 00:41:49,280
from a vulnerability in signal messenger

1180
00:41:49,280 --> 00:41:51,680
a very

1181
00:41:51,680 --> 00:41:53,520
i would say well-designed well-built

1182
00:41:53,520 --> 00:41:55,119
product

1183
00:41:55,119 --> 00:41:56,640
taking privacy and security quite

1184
00:41:56,640 --> 00:41:59,359
seriously and their desktop version

1185
00:41:59,359 --> 00:42:01,040
was built with react

1186
00:42:01,040 --> 00:42:03,200
and contained exactly this vulnerability

1187
00:42:03,200 --> 00:42:04,720
whenever you reply to a message the

1188
00:42:04,720 --> 00:42:07,280
original reply was dropped into the dom

1189
00:42:07,280 --> 00:42:09,599
with dangerously set in html without any

1190
00:42:09,599 --> 00:42:12,079
protection

1191
00:42:12,240 --> 00:42:14,000
so the takeaway here is that marking

1192
00:42:14,000 --> 00:42:17,680
things as dangerous is not enough

1193
00:42:17,680 --> 00:42:20,160
yes it prevents accidental misuse but

1194
00:42:20,160 --> 00:42:21,760
just calling something dangerous does

1195
00:42:21,760 --> 00:42:24,480
not magically enable developers to use

1196
00:42:24,480 --> 00:42:26,400
that feature securely

1197
00:42:26,400 --> 00:42:28,000
it doesn't really solve a problem it

1198
00:42:28,000 --> 00:42:32,240
just highlights a potential risk

1199
00:42:32,640 --> 00:42:34,800
and the second to last keyword a word on

1200
00:42:34,800 --> 00:42:37,200
this slide is important feature this is

1201
00:42:37,200 --> 00:42:39,920
a feature this is not some one-off weird

1202
00:42:39,920 --> 00:42:42,079
case that you're trying to solve no if

1203
00:42:42,079 --> 00:42:44,160
you want to output html and react you

1204
00:42:44,160 --> 00:42:46,240
have to use

1205
00:42:46,240 --> 00:42:48,319
this feature

1206
00:42:48,319 --> 00:42:49,920
please don't use any of the workarounds

1207
00:42:49,920 --> 00:42:51,599
which are a lot worse than using this

1208
00:42:51,599 --> 00:42:54,000
feature

1209
00:42:56,880 --> 00:42:59,040
and if we assume that the user actually

1210
00:42:59,040 --> 00:43:00,640
knows how to apply don't purify

1211
00:43:00,640 --> 00:43:03,118
correctly

1212
00:43:04,560 --> 00:43:07,520
how can we verify that

1213
00:43:07,520 --> 00:43:08,319
well

1214
00:43:08,319 --> 00:43:09,599
if you want to make sure that you're

1215
00:43:09,599 --> 00:43:11,680
doing application security right you

1216
00:43:11,680 --> 00:43:13,280
have to scan your applications for

1217
00:43:13,280 --> 00:43:15,359
security and there's plenty of tools you

1218
00:43:15,359 --> 00:43:17,200
can use for that but one of the things i

1219
00:43:17,200 --> 00:43:18,960
often use in my trainings is semgrep

1220
00:43:18,960 --> 00:43:20,960
because it's very easy to run a very

1221
00:43:20,960 --> 00:43:23,119
lightweight and very useful for things

1222
00:43:23,119 --> 00:43:25,599
like this they have a react rule set so

1223
00:43:25,599 --> 00:43:27,520
if you run this on your application it's

1224
00:43:27,520 --> 00:43:29,359
going to download a set of rules and run

1225
00:43:29,359 --> 00:43:31,599
them and it's going to give you a report

1226
00:43:31,599 --> 00:43:33,440
and in this case you can see a warning

1227
00:43:33,440 --> 00:43:35,280
that says like yeah it is dangerously

1228
00:43:35,280 --> 00:43:37,119
set in our html thing it's kind of

1229
00:43:37,119 --> 00:43:38,960
dangerous you can recognize the text

1230
00:43:38,960 --> 00:43:40,880
from the react documentation page you

1231
00:43:40,880 --> 00:43:43,200
should be careful

1232
00:43:43,200 --> 00:43:46,400
you can see on on the line 62

1233
00:43:46,400 --> 00:43:48,000
in my application i'm actually using

1234
00:43:48,000 --> 00:43:49,520
dump purify

1235
00:43:49,520 --> 00:43:51,920
good this is a two minute job

1236
00:43:51,920 --> 00:43:54,160
to verify that i have properly secured

1237
00:43:54,160 --> 00:43:57,200
my application awesome

1238
00:43:57,200 --> 00:43:59,119
you can also see at the bottom three

1239
00:43:59,119 --> 00:44:00,640
files and one finding that's not going

1240
00:44:00,640 --> 00:44:02,240
to be very realistic that's this is a

1241
00:44:02,240 --> 00:44:04,000
training example

1242
00:44:04,000 --> 00:44:05,680
what happens if you run this on a

1243
00:44:05,680 --> 00:44:07,680
slightly larger application

1244
00:44:07,680 --> 00:44:10,079
it's going to be 45 files and 10

1245
00:44:10,079 --> 00:44:11,680
findings

1246
00:44:11,680 --> 00:44:13,839
good now we're 10x engineer that's that

1247
00:44:13,839 --> 00:44:16,079
was a thing a while back on twitter so i

1248
00:44:16,079 --> 00:44:17,599
i don't think this is what they meant

1249
00:44:17,599 --> 00:44:19,200
with that but you can see how this

1250
00:44:19,200 --> 00:44:21,440
doesn't scale very well right

1251
00:44:21,440 --> 00:44:22,880
because now it's not a two-minute job to

1252
00:44:22,880 --> 00:44:24,640
verify that now you have to verify 10

1253
00:44:24,640 --> 00:44:28,640
findings or 50 findings or 120 findings

1254
00:44:28,640 --> 00:44:30,000
and for each and every one of them you

1255
00:44:30,000 --> 00:44:32,480
have to see is this secure yes or no and

1256
00:44:32,480 --> 00:44:34,240
make that decision and then next time

1257
00:44:34,240 --> 00:44:36,000
you run the scan you have to do it again

1258
00:44:36,000 --> 00:44:37,119
and again

1259
00:44:37,119 --> 00:44:38,319
and again

1260
00:44:38,319 --> 00:44:40,800
and that doesn't work very well

1261
00:44:40,800 --> 00:44:42,319
because this what we're doing here is

1262
00:44:42,319 --> 00:44:44,560
safe but it's still called dangerous

1263
00:44:44,560 --> 00:44:46,079
which makes

1264
00:44:46,079 --> 00:44:47,440
little sense

1265
00:44:47,440 --> 00:44:48,839
to

1266
00:44:48,839 --> 00:44:51,760
me so what if instead of having to use a

1267
00:44:51,760 --> 00:44:54,319
dangerous feature we can fix that

1268
00:44:54,319 --> 00:44:55,280
into

1269
00:44:55,280 --> 00:44:56,960
a pattern that's semantically a bit more

1270
00:44:56,960 --> 00:44:57,839
correct

1271
00:44:57,839 --> 00:44:59,440
what if we use

1272
00:44:59,440 --> 00:45:01,599
save html

1273
00:45:01,599 --> 00:45:03,280
what if we have a safe html component

1274
00:45:03,280 --> 00:45:05,440
that takes an element as input the b for

1275
00:45:05,440 --> 00:45:07,599
paragraph and then the data

1276
00:45:07,599 --> 00:45:09,920
and renders that review

1277
00:45:09,920 --> 00:45:12,160
in a safe way

1278
00:45:12,160 --> 00:45:15,200
that would be awesome right

1279
00:45:15,200 --> 00:45:17,359
but this component doesn't exist

1280
00:45:17,359 --> 00:45:19,119
there's nothing there to handle

1281
00:45:19,119 --> 00:45:21,119
something like this in a safe way which

1282
00:45:21,119 --> 00:45:23,839
is why i am advocating to use this

1283
00:45:23,839 --> 00:45:26,160
internally yourself

1284
00:45:26,160 --> 00:45:29,119
again encapsulate security behavior in a

1285
00:45:29,119 --> 00:45:30,720
component and it's really easy it looks

1286
00:45:30,720 --> 00:45:31,680
like this

1287
00:45:31,680 --> 00:45:33,280
it actually works in practice i've tried

1288
00:45:33,280 --> 00:45:34,800
it

1289
00:45:34,800 --> 00:45:36,400
we create an element

1290
00:45:36,400 --> 00:45:38,400
we feed whatever data true don't purify

1291
00:45:38,400 --> 00:45:40,319
to make sure it's safe and then we drop

1292
00:45:40,319 --> 00:45:41,920
it into that dangerously set in

1293
00:45:41,920 --> 00:45:43,839
additional property

1294
00:45:43,839 --> 00:45:46,640
and doing things like this removes that

1295
00:45:46,640 --> 00:45:48,720
responsibility from developers

1296
00:45:48,720 --> 00:45:50,480
the developer doesn't have to know about

1297
00:45:50,480 --> 00:45:52,400
this the only thing they need to know is

1298
00:45:52,400 --> 00:45:55,520
braces for normal data save html for

1299
00:45:55,520 --> 00:45:58,160
html data done

1300
00:45:58,160 --> 00:46:00,480
it's called save html to indicate that

1301
00:46:00,480 --> 00:46:02,880
it's safe by design so you ultimately

1302
00:46:02,880 --> 00:46:04,640
get that semantic information from there

1303
00:46:04,640 --> 00:46:05,760
as well

1304
00:46:05,760 --> 00:46:07,359
and that brings me back to this takeaway

1305
00:46:07,359 --> 00:46:09,200
like i promised

1306
00:46:09,200 --> 00:46:12,079
encapsulating security behavior is so

1307
00:46:12,079 --> 00:46:14,240
important

1308
00:46:14,240 --> 00:46:15,920
because it makes it easier for

1309
00:46:15,920 --> 00:46:17,920
developers to get their job done which

1310
00:46:17,920 --> 00:46:20,319
in turn makes it easier to integrate

1311
00:46:20,319 --> 00:46:22,960
security

1312
00:46:25,280 --> 00:46:27,599
there's an interesting side effect here

1313
00:46:27,599 --> 00:46:29,920
that is really really awesome

1314
00:46:29,920 --> 00:46:31,760
if you run some grab on your application

1315
00:46:31,760 --> 00:46:33,520
with forty five thousand ten findings

1316
00:46:33,520 --> 00:46:36,160
now you have one finding

1317
00:46:36,160 --> 00:46:38,560
you can see it's a finding from that

1318
00:46:38,560 --> 00:46:40,839
save html

1319
00:46:40,839 --> 00:46:42,720
component and now i'm going to show you

1320
00:46:42,720 --> 00:46:44,400
the trick well it's a feature another

1321
00:46:44,400 --> 00:46:45,520
trick

1322
00:46:45,520 --> 00:46:47,440
show you how to make this disappear you

1323
00:46:47,440 --> 00:46:49,040
can strike a deal with some graph and

1324
00:46:49,040 --> 00:46:50,480
say like yeah let's make this our little

1325
00:46:50,480 --> 00:46:53,280
secret um by adding a no sungrab comment

1326
00:46:53,280 --> 00:46:55,200
to that line of code

1327
00:46:55,200 --> 00:46:56,960
this tells some grep i know you're going

1328
00:46:56,960 --> 00:46:58,400
to find this but

1329
00:46:58,400 --> 00:46:59,280
just

1330
00:46:59,280 --> 00:47:01,520
ignore it you never saw this it's fine

1331
00:47:01,520 --> 00:47:02,960
because we have checked this as a

1332
00:47:02,960 --> 00:47:04,160
security team we have made sure that

1333
00:47:04,160 --> 00:47:07,359
this is safe so we can ignore that and

1334
00:47:07,359 --> 00:47:10,400
end up with zero findings

1335
00:47:10,400 --> 00:47:11,839
and this has

1336
00:47:11,839 --> 00:47:13,920
a benefit here because you have zero

1337
00:47:13,920 --> 00:47:15,119
findings

1338
00:47:15,119 --> 00:47:17,119
you can use same grab to detect

1339
00:47:17,119 --> 00:47:20,640
accidental misuse of the dangerous

1340
00:47:20,640 --> 00:47:23,599
potentially set in original property

1341
00:47:23,599 --> 00:47:25,520
and if you hire a new developer that

1342
00:47:25,520 --> 00:47:27,599
isn't aware of your safe html component

1343
00:47:27,599 --> 00:47:29,280
because you forgot to mention that

1344
00:47:29,280 --> 00:47:30,880
things happen or somebody has a bad

1345
00:47:30,880 --> 00:47:31,920
monday morning and they write

1346
00:47:31,920 --> 00:47:33,440
dangerously set in your html and they

1347
00:47:33,440 --> 00:47:34,800
check their code in

1348
00:47:34,800 --> 00:47:36,400
or you run this in the id some group

1349
00:47:36,400 --> 00:47:39,040
will be like hold on no no

1350
00:47:39,040 --> 00:47:40,640
we have a warning

1351
00:47:40,640 --> 00:47:42,240
about dangerously set in html we don't

1352
00:47:42,240 --> 00:47:44,800
do that here we use the save html

1353
00:47:44,800 --> 00:47:47,680
components because that's how we build

1354
00:47:47,680 --> 00:47:51,118
secure applications

1355
00:47:51,599 --> 00:47:53,040
and this pattern

1356
00:47:53,040 --> 00:47:54,079
this

1357
00:47:54,079 --> 00:47:57,760
benefit is basically using code hygiene

1358
00:47:57,760 --> 00:48:00,319
to set yourself up for a successful

1359
00:48:00,319 --> 00:48:01,760
security story

1360
00:48:01,760 --> 00:48:04,839
by encapsulating security

1361
00:48:04,839 --> 00:48:08,000
behavior your code becomes cleaner and

1362
00:48:08,000 --> 00:48:10,000
that makes it easier to apply security

1363
00:48:10,000 --> 00:48:12,319
best practices at scale it allows you to

1364
00:48:12,319 --> 00:48:14,400
use very straightforward scanning tools

1365
00:48:14,400 --> 00:48:16,160
you can even do that with a graph i mean

1366
00:48:16,160 --> 00:48:17,280
you don't have to use some graph you can

1367
00:48:17,280 --> 00:48:19,280
use crap as well if you really want to

1368
00:48:19,280 --> 00:48:21,920
go low level and dirty but it makes it

1369
00:48:21,920 --> 00:48:24,079
easier to find potentially dangerous

1370
00:48:24,079 --> 00:48:26,559
code patterns

1371
00:48:26,559 --> 00:48:28,160
plus

1372
00:48:28,160 --> 00:48:29,599
it reduces the amount of knowledge

1373
00:48:29,599 --> 00:48:32,319
developers have to know making things a

1374
00:48:32,319 --> 00:48:34,400
lot better

1375
00:48:34,400 --> 00:48:36,160
so to come back to my title absence is

1376
00:48:36,160 --> 00:48:37,680
too hard

1377
00:48:37,680 --> 00:48:39,760
the

1378
00:48:39,760 --> 00:48:41,440
signs these symbols at the end actually

1379
00:48:41,440 --> 00:48:43,359
matter here it's it's a very subtle

1380
00:48:43,359 --> 00:48:45,440
title

1381
00:48:45,440 --> 00:48:47,839
yes apsec is too hard absolutely i fully

1382
00:48:47,839 --> 00:48:49,680
agree that appsec is

1383
00:48:49,680 --> 00:48:51,040
too hard

1384
00:48:51,040 --> 00:48:53,440
after a two-day training i have a whole

1385
00:48:53,440 --> 00:48:54,960
bunch of guidelines i have given

1386
00:48:54,960 --> 00:48:56,319
developers a whole bunch of guidelines

1387
00:48:56,319 --> 00:48:58,400
like watch out for this try this that's

1388
00:48:58,400 --> 00:48:59,520
this and these and these and these

1389
00:48:59,520 --> 00:49:00,640
things

1390
00:49:00,640 --> 00:49:02,800
i would love to be in a world where i

1391
00:49:02,800 --> 00:49:05,040
can just tell them use this and this and

1392
00:49:05,040 --> 00:49:07,920
listen this and you're done

1393
00:49:08,240 --> 00:49:09,680
we're not there yet but i'm really

1394
00:49:09,680 --> 00:49:13,599
hoping we'll get there in the future

1395
00:49:13,599 --> 00:49:14,720
by the way

1396
00:49:14,720 --> 00:49:18,000
security has guidelines but developers

1397
00:49:18,000 --> 00:49:19,520
are not security experts they have to do

1398
00:49:19,520 --> 00:49:21,040
the same for performance there's

1399
00:49:21,040 --> 00:49:22,480
performance guidelines and usability

1400
00:49:22,480 --> 00:49:24,160
guidelines and accessibility guidelines

1401
00:49:24,160 --> 00:49:26,400
and so on and so on so it simply doesn't

1402
00:49:26,400 --> 00:49:27,599
work

1403
00:49:27,599 --> 00:49:29,920
anymore we can't keep filing on secure

1404
00:49:29,920 --> 00:49:32,640
coding guidelines to developers because

1405
00:49:32,640 --> 00:49:34,559
that's going to crash sooner rather than

1406
00:49:34,559 --> 00:49:36,000
later we have to take responsibilities

1407
00:49:36,000 --> 00:49:39,839
away in a way that works for developers

1408
00:49:39,839 --> 00:49:42,079
so if you want another answer

1409
00:49:42,079 --> 00:49:43,680
appsec is too hard

1410
00:49:43,680 --> 00:49:46,880
it doesn't have to be

1411
00:49:46,880 --> 00:49:47,920
that's

1412
00:49:47,920 --> 00:49:49,920
the main message here it doesn't have to

1413
00:49:49,920 --> 00:49:50,720
be

1414
00:49:50,720 --> 00:49:53,280
yes we've had some failures yes we are

1415
00:49:53,280 --> 00:49:55,680
not necessarily always doing the right

1416
00:49:55,680 --> 00:49:57,599
thing we have good intentions which turn

1417
00:49:57,599 --> 00:50:00,480
out different in practice

1418
00:50:00,480 --> 00:50:02,000
but if you offer the right level of

1419
00:50:02,000 --> 00:50:03,200
abstraction

1420
00:50:03,200 --> 00:50:05,200
the right level of support

1421
00:50:05,200 --> 00:50:07,680
and we focus on usable security for

1422
00:50:07,680 --> 00:50:10,079
developers

1423
00:50:10,079 --> 00:50:11,839
i honestly believe we can make things

1424
00:50:11,839 --> 00:50:13,440
significantly better

1425
00:50:13,440 --> 00:50:15,680
in the future and that's exactly what

1426
00:50:15,680 --> 00:50:18,240
this event is all about

1427
00:50:18,240 --> 00:50:20,000
thank you very much

1428
00:50:20,000 --> 00:50:22,160
for having me as your opening keynote

1429
00:50:22,160 --> 00:50:24,319
and if you have questions or want to

1430
00:50:24,319 --> 00:50:25,280
chat

1431
00:50:25,280 --> 00:50:27,200
i'll be available on the slack channel

1432
00:50:27,200 --> 00:50:29,520
right after this session

1433
00:50:29,520 --> 00:50:31,839
enjoy the rest of the event

1434
00:50:31,839 --> 00:50:33,040
okay

1435
00:50:33,040 --> 00:50:36,160
philly before we go there is one

1436
00:50:36,160 --> 00:50:37,920
question that i had

1437
00:50:37,920 --> 00:50:39,119
so

1438
00:50:39,119 --> 00:50:43,119
i've seen your talk in london on jwt

1439
00:50:43,119 --> 00:50:44,240
tokens

1440
00:50:44,240 --> 00:50:47,040
one of the questions i had is i was

1441
00:50:47,040 --> 00:50:49,920
uh contacting a colleague of mine uh a

1442
00:50:49,920 --> 00:50:51,520
while back and then he mentioned

1443
00:50:51,520 --> 00:50:53,040
something about

1444
00:50:53,040 --> 00:50:56,960
looking at proof carrying tokens like uh

1445
00:50:56,960 --> 00:50:58,319
macaroons

1446
00:50:58,319 --> 00:51:01,359
but i haven't looked at them uh much are

1447
00:51:01,359 --> 00:51:03,119
you aware of them and what are your

1448
00:51:03,119 --> 00:51:05,760
thoughts there

1449
00:51:06,079 --> 00:51:09,119
yeah um

1450
00:51:09,119 --> 00:51:11,520
macaroons actually have um

1451
00:51:11,520 --> 00:51:13,359
are a bit more complex than json web

1452
00:51:13,359 --> 00:51:15,119
tokens so one of the things they support

1453
00:51:15,119 --> 00:51:15,920
is

1454
00:51:15,920 --> 00:51:18,240
um to to have like

1455
00:51:18,240 --> 00:51:20,400
sort of a main token from which you can

1456
00:51:20,400 --> 00:51:22,559
derive less privileged tokens for

1457
00:51:22,559 --> 00:51:24,079
specific purposes

1458
00:51:24,079 --> 00:51:25,520
um i think it's a really really

1459
00:51:25,520 --> 00:51:27,359
interesting concept

1460
00:51:27,359 --> 00:51:31,040
but like i mentioned in in the session

1461
00:51:31,040 --> 00:51:32,880
it's not like json web tokens are going

1462
00:51:32,880 --> 00:51:34,480
away i mean if you're using oauth or

1463
00:51:34,480 --> 00:51:36,720
open id connect you're gonna have to use

1464
00:51:36,720 --> 00:51:38,800
json web tokens um

1465
00:51:38,800 --> 00:51:40,400
and the specs are actually doubling down

1466
00:51:40,400 --> 00:51:42,319
on that by adding new features that also

1467
00:51:42,319 --> 00:51:45,680
rely on json web tokens and so on so in

1468
00:51:45,680 --> 00:51:47,839
in general i believe that most people

1469
00:51:47,839 --> 00:51:49,599
benefit from

1470
00:51:49,599 --> 00:51:52,480
learning how to handle shots securely

1471
00:51:52,480 --> 00:51:53,520
then

1472
00:51:53,520 --> 00:51:55,520
trying to go for these

1473
00:51:55,520 --> 00:51:57,680
fairly advanced and

1474
00:51:57,680 --> 00:51:59,200
and

1475
00:51:59,200 --> 00:52:01,920
more elaborate mechanisms so um

1476
00:52:01,920 --> 00:52:03,440
i fully agree that there are some use

1477
00:52:03,440 --> 00:52:04,720
cases

1478
00:52:04,720 --> 00:52:05,680
where you

1479
00:52:05,680 --> 00:52:07,280
where you want that advanced feature and

1480
00:52:07,280 --> 00:52:09,280
you should look into more advanced uh

1481
00:52:09,280 --> 00:52:11,200
solutions then but most applications

1482
00:52:11,200 --> 00:52:14,960
they have very basic problems very um

1483
00:52:14,960 --> 00:52:16,960
let's call it silly very simple to make

1484
00:52:16,960 --> 00:52:18,400
mistakes and

1485
00:52:18,400 --> 00:52:20,319
i believe we should focus on fixing

1486
00:52:20,319 --> 00:52:22,559
these first before we try to give people

1487
00:52:22,559 --> 00:52:24,880
uh something even more complex to

1488
00:52:24,880 --> 00:52:27,359
implement that's that's my take in a

1489
00:52:27,359 --> 00:52:28,559
nutshell

1490
00:52:28,559 --> 00:52:30,400
okay thank you

1491
00:52:30,400 --> 00:52:33,839
you're very welcome

