1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,000 --> 00:00:11,040
so my name is spencer today i will be

3
00:00:11,040 --> 00:00:13,679
talking about common nginx this

4
00:00:13,679 --> 00:00:15,120
configurations that leave your web

5
00:00:15,120 --> 00:00:16,960
server open to attack

6
00:00:16,960 --> 00:00:18,720
i currently work as a researcher at

7
00:00:18,720 --> 00:00:21,760
detectify based in stockholm we just did

8
00:00:21,760 --> 00:00:24,960
my bio so we can skip over that

9
00:00:24,960 --> 00:00:27,279
here's a brief agenda for today i'll

10
00:00:27,279 --> 00:00:29,279
just go over quickly what we do at

11
00:00:29,279 --> 00:00:30,400
detectify

12
00:00:30,400 --> 00:00:32,479
uh go over how engine index works the

13
00:00:32,479 --> 00:00:34,079
methodology we use

14
00:00:34,079 --> 00:00:36,719
to get all of our files to analyze and

15
00:00:36,719 --> 00:00:37,840
then

16
00:00:37,840 --> 00:00:39,280
we'll go into

17
00:00:39,280 --> 00:00:41,040
the maintenance configurations that we

18
00:00:41,040 --> 00:00:43,120
found on our team

19
00:00:43,120 --> 00:00:45,120
so first detectify is an automated web

20
00:00:45,120 --> 00:00:48,320
scanner that uses uh the crowd to find

21
00:00:48,320 --> 00:00:50,719
vulnerabilities and common technologies

22
00:00:50,719 --> 00:00:52,559
so white hat hackers from across the

23
00:00:52,559 --> 00:00:55,440
world will submit pocs to us we'll then

24
00:00:55,440 --> 00:00:57,600
triage and build those exploits into

25
00:00:57,600 --> 00:00:58,480
modules

26
00:00:58,480 --> 00:00:59,920
and then we'll run those modules on our

27
00:00:59,920 --> 00:01:02,800
customers continuously and unlike hacker

28
00:01:02,800 --> 00:01:05,119
one or bug crowd or other bug boundary

29
00:01:05,119 --> 00:01:07,040
platforms we reward our hackers based

30
00:01:07,040 --> 00:01:09,119
off the number of hits each module will

31
00:01:09,119 --> 00:01:12,400
produce in perpetuity

32
00:01:12,400 --> 00:01:16,080
so now we can go into nginx it is a high

33
00:01:16,080 --> 00:01:18,080
performance web server reverse proxy

34
00:01:18,080 --> 00:01:19,759
load balancer and

35
00:01:19,759 --> 00:01:21,600
much much more it really does everything

36
00:01:21,600 --> 00:01:23,680
that you needed to for a server it's

37
00:01:23,680 --> 00:01:26,400
extremely fast it can manage

38
00:01:26,400 --> 00:01:28,320
incoming traffic and distribute that

39
00:01:28,320 --> 00:01:29,840
among different servers

40
00:01:29,840 --> 00:01:31,840
to maximize speed without degrading

41
00:01:31,840 --> 00:01:34,159
performance and it will just handle

42
00:01:34,159 --> 00:01:35,600
tasks that otherwise would slow down

43
00:01:35,600 --> 00:01:37,040
your web server

44
00:01:37,040 --> 00:01:39,200
about one-third of websites use nginx

45
00:01:39,200 --> 00:01:41,200
which make it a very popular technology

46
00:01:41,200 --> 00:01:44,079
for customers as well as attackers

47
00:01:44,079 --> 00:01:46,880
the pros of using nginx are it's highly

48
00:01:46,880 --> 00:01:47,920
modular

49
00:01:47,920 --> 00:01:50,720
very fast use it very configurable but

50
00:01:50,720 --> 00:01:53,040
the problem and the main con with that

51
00:01:53,040 --> 00:01:56,560
is that it's very easy to mix configure

52
00:01:56,560 --> 00:01:59,040
so our methodology to analyze these

53
00:01:59,040 --> 00:02:01,680
files was first to use google bigquery

54
00:02:01,680 --> 00:02:04,719
to download 50 000 approximate

55
00:02:04,719 --> 00:02:07,280
nginx configuration files

56
00:02:07,280 --> 00:02:09,840
bigquery allows you to run complex

57
00:02:09,840 --> 00:02:12,160
analytical sql-based queries on large

58
00:02:12,160 --> 00:02:13,840
sets of data on the order of going to

59
00:02:13,840 --> 00:02:16,959
rows at a very efficient speed as well

60
00:02:16,959 --> 00:02:18,239
as price

61
00:02:18,239 --> 00:02:20,400
and we use we're using the return values

62
00:02:20,400 --> 00:02:22,319
from our query we were able to construct

63
00:02:22,319 --> 00:02:24,080
downloadable urls

64
00:02:24,080 --> 00:02:26,239
so if we see in our example uh to the

65
00:02:26,239 --> 00:02:30,080
right it's very much looking like sql we

66
00:02:30,080 --> 00:02:32,400
select the repo name and path from the

67
00:02:32,400 --> 00:02:34,560
public data set that git github has on

68
00:02:34,560 --> 00:02:37,040
google bigquery and then we want all the

69
00:02:37,040 --> 00:02:39,400
repos that have paths that contain the

70
00:02:39,400 --> 00:02:41,680
nginx.com file

71
00:02:41,680 --> 00:02:43,360
so then from there we were able to

72
00:02:43,360 --> 00:02:46,800
construct that multiple urls

73
00:02:46,800 --> 00:02:49,519
the raw files from github by appending

74
00:02:49,519 --> 00:02:51,840
the repo name branch and path

75
00:02:51,840 --> 00:02:53,360
and then from there we downloaded the

76
00:02:53,360 --> 00:02:56,080
files and then used shell tools to find

77
00:02:56,080 --> 00:02:57,360
patterns that would indicate the

78
00:02:57,360 --> 00:02:58,400
presence

79
00:02:58,400 --> 00:03:02,200
of certain misconfigurations

80
00:03:03,120 --> 00:03:05,760
so now we can dive into the first missed

81
00:03:05,760 --> 00:03:07,040
configuration

82
00:03:07,040 --> 00:03:10,959
which is called missing root directive

83
00:03:10,959 --> 00:03:13,200
the root directive specifies where to

84
00:03:13,200 --> 00:03:16,400
look for files and which files to serve

85
00:03:16,400 --> 00:03:17,920
so in our example to our right we see

86
00:03:17,920 --> 00:03:20,480
our root directive goes to etsy engine x

87
00:03:20,480 --> 00:03:22,800
however it does not have a location for

88
00:03:22,800 --> 00:03:24,000
the roots

89
00:03:24,000 --> 00:03:25,519
therefore the root directive will be

90
00:03:25,519 --> 00:03:27,760
globally set and any request to the root

91
00:03:27,760 --> 00:03:29,280
of the application

92
00:03:29,280 --> 00:03:33,280
will deliver files from etsy engine x

93
00:03:33,280 --> 00:03:34,879
so if you make a request

94
00:03:34,879 --> 00:03:36,959
to localhost slash test

95
00:03:36,959 --> 00:03:39,519
the nginx server will then

96
00:03:39,519 --> 00:03:42,560
serve the file from etsy nginx test

97
00:03:42,560 --> 00:03:43,519
so

98
00:03:43,519 --> 00:03:47,200
in a real real world example you could

99
00:03:47,200 --> 00:03:49,920
request a local host engine x and that

100
00:03:49,920 --> 00:03:52,080
would then serve

101
00:03:52,080 --> 00:03:54,640
the file from fc engine next

102
00:03:54,640 --> 00:03:57,119
directory

103
00:03:57,280 --> 00:03:59,200
so the impact is that it has access to

104
00:03:59,200 --> 00:04:01,439
sensitive files on the server

105
00:04:01,439 --> 00:04:03,599
and you can assume anything in the path

106
00:04:03,599 --> 00:04:05,920
can be read if it's placed in the

107
00:04:05,920 --> 00:04:07,200
directive

108
00:04:07,200 --> 00:04:09,280
and depending on the misconfiguration

109
00:04:09,280 --> 00:04:10,319
it's possible to reach other

110
00:04:10,319 --> 00:04:13,280
configuration files access logs

111
00:04:13,280 --> 00:04:15,840
or even encrypted credentials for http

112
00:04:15,840 --> 00:04:18,320
basic authentication

113
00:04:18,320 --> 00:04:20,320
the remediation is pretty simple just

114
00:04:20,320 --> 00:04:22,160
use specific paths when using your

115
00:04:22,160 --> 00:04:23,919
directives and ensure they do not

116
00:04:23,919 --> 00:04:27,960
contain any sensitive files

117
00:04:28,320 --> 00:04:32,160
this configuration 2 is off by slash

118
00:04:32,160 --> 00:04:34,560
so in order to understand the

119
00:04:34,560 --> 00:04:35,759
vulnerability it's important to

120
00:04:35,759 --> 00:04:38,400
understand some of the background behind

121
00:04:38,400 --> 00:04:40,560
it so the intention behind location

122
00:04:40,560 --> 00:04:41,600
directive

123
00:04:41,600 --> 00:04:44,240
is and the alias variable is to create

124
00:04:44,240 --> 00:04:46,560
an easy alias to use in requests to

125
00:04:46,560 --> 00:04:49,680
replace long paths on the nginx server

126
00:04:49,680 --> 00:04:51,840
so if the client were to request

127
00:04:51,840 --> 00:04:54,960
something like static index.js

128
00:04:54,960 --> 00:04:57,120
nginx would notice a server local file

129
00:04:57,120 --> 00:04:59,759
from user share nginx static directory

130
00:04:59,759 --> 00:05:01,520
as we can see in this example to the

131
00:05:01,520 --> 00:05:02,720
right

132
00:05:02,720 --> 00:05:05,680
likewise if we make a request to api

133
00:05:05,680 --> 00:05:08,400
test again it's delete nginx to request

134
00:05:08,400 --> 00:05:09,440
and serve

135
00:05:09,440 --> 00:05:13,199
from api server v1 slash test

136
00:05:13,199 --> 00:05:14,800
now the cause of this of this

137
00:05:14,800 --> 00:05:16,320
misconfiguration

138
00:05:16,320 --> 00:05:18,880
is the lack of the directory separator

139
00:05:18,880 --> 00:05:21,440
after static and api as we can see here

140
00:05:21,440 --> 00:05:24,320
there's no following directory separator

141
00:05:24,320 --> 00:05:26,880
and this misconfiguration though very

142
00:05:26,880 --> 00:05:31,680
small can lead to directory traversal

143
00:05:31,759 --> 00:05:33,600
so here we'll see nginx look for

144
00:05:33,600 --> 00:05:35,759
matching location so when we make a

145
00:05:35,759 --> 00:05:38,639
request it will remove the prefix api

146
00:05:38,639 --> 00:05:40,720
and append the rest of the uri to their

147
00:05:40,720 --> 00:05:43,039
up to the directive in the location

148
00:05:43,039 --> 00:05:44,560
block

149
00:05:44,560 --> 00:05:46,080
so when the directory separator is

150
00:05:46,080 --> 00:05:48,400
missing as we see here it then becomes

151
00:05:48,400 --> 00:05:50,240
possible to reverse only one directory

152
00:05:50,240 --> 00:05:53,120
up by using dot dot slash or the off by

153
00:05:53,120 --> 00:05:54,479
slash technique

154
00:05:54,479 --> 00:05:56,080
and before going

155
00:05:56,080 --> 00:05:58,160
into the demo just wanted to show a

156
00:05:58,160 --> 00:06:00,960
quick example of how off by slash is a

157
00:06:00,960 --> 00:06:03,039
bit more nuanced compared to

158
00:06:03,039 --> 00:06:04,800
patch reversal

159
00:06:04,800 --> 00:06:08,400
so i believe you can see um

160
00:06:08,400 --> 00:06:10,319
this file

161
00:06:10,319 --> 00:06:13,520
so here in a normal path traversal

162
00:06:13,520 --> 00:06:17,520
we see we make a request to localhost

163
00:06:17,520 --> 00:06:18,800
vb1

164
00:06:18,800 --> 00:06:20,160
and we know that there might be some

165
00:06:20,160 --> 00:06:23,039
sort of secrets file in the local host

166
00:06:23,039 --> 00:06:24,240
directory

167
00:06:24,240 --> 00:06:26,080
so normally with patch reversal we would

168
00:06:26,080 --> 00:06:27,440
just go to v1

169
00:06:27,440 --> 00:06:30,000
as we see here we have the forward slash

170
00:06:30,000 --> 00:06:31,600
that follows it and then traverse one

171
00:06:31,600 --> 00:06:34,240
directory up and then go into the secret

172
00:06:34,240 --> 00:06:35,199
folder

173
00:06:35,199 --> 00:06:37,520
however with off by slash

174
00:06:37,520 --> 00:06:39,600
we do the same thing in a way where we

175
00:06:39,600 --> 00:06:41,680
make the request localhost api

176
00:06:41,680 --> 00:06:43,440
we know that because of the alias

177
00:06:43,440 --> 00:06:45,840
directive it really gets converted to v1

178
00:06:45,840 --> 00:06:49,360
on the nginx server so when we try to do

179
00:06:49,360 --> 00:06:52,639
a path traversal exploit we do something

180
00:06:52,639 --> 00:06:54,960
like this so instead of have we don't

181
00:06:54,960 --> 00:06:57,360
have the forward slash following the api

182
00:06:57,360 --> 00:06:59,280
we just do a simple dot dot slash as we

183
00:06:59,280 --> 00:07:00,560
see here

184
00:07:00,560 --> 00:07:03,199
and then nginx we'll then just we'll see

185
00:07:03,199 --> 00:07:05,440
that and configure it properly and

186
00:07:05,440 --> 00:07:07,360
traverse one directory up and then go

187
00:07:07,360 --> 00:07:08,319
into

188
00:07:08,319 --> 00:07:11,919
our secrets directory

189
00:07:13,840 --> 00:07:16,160
so now we can go into our demo that

190
00:07:16,160 --> 00:07:18,639
shows how to exploit that on our

191
00:07:18,639 --> 00:07:22,000
basic cat application

192
00:07:24,560 --> 00:07:27,039
so here we have our cap application we

193
00:07:27,039 --> 00:07:31,840
go into our nginx configuration file

194
00:07:32,960 --> 00:07:34,960
when we scroll down you see how we have

195
00:07:34,960 --> 00:07:37,840
a location directive that points to a

196
00:07:37,840 --> 00:07:40,319
cat pictures directory in our apache

197
00:07:40,319 --> 00:07:41,680
folder

198
00:07:41,680 --> 00:07:43,680
so now i want to make a request to our

199
00:07:43,680 --> 00:07:44,800
image

200
00:07:44,800 --> 00:07:47,120
to that jpeg file we see in the bottom

201
00:07:47,120 --> 00:07:48,879
right that really makes a request on the

202
00:07:48,879 --> 00:07:52,560
back end to cat pictures to that jpeg

203
00:07:52,560 --> 00:07:54,000
and that's because of the location

204
00:07:54,000 --> 00:07:58,919
directive in our configuration file

205
00:08:05,840 --> 00:08:10,960
so now we'll go in to our apache folder

206
00:08:10,960 --> 00:08:12,879
we'll see in that folder we have secret

207
00:08:12,879 --> 00:08:14,879
html file as well as the cat pictures

208
00:08:14,879 --> 00:08:16,080
directory

209
00:08:16,080 --> 00:08:17,919
so we know we can possibly traverse one

210
00:08:17,919 --> 00:08:20,000
directory up and try to get access to

211
00:08:20,000 --> 00:08:22,000
that secret file

212
00:08:22,000 --> 00:08:25,039
so here in burp make a request

213
00:08:25,039 --> 00:08:26,879
we see how it then converts it to cat

214
00:08:26,879 --> 00:08:29,599
pictures in the back end

215
00:08:29,599 --> 00:08:30,319
so

216
00:08:30,319 --> 00:08:32,159
we'll try that normal path reversal

217
00:08:32,159 --> 00:08:33,599
technique

218
00:08:33,599 --> 00:08:36,080
and we'll see how it will not work

219
00:08:36,080 --> 00:08:37,760
because we have that forward slash

220
00:08:37,760 --> 00:08:39,519
following

221
00:08:39,519 --> 00:08:40,719
so instead

222
00:08:40,719 --> 00:08:42,958
touch reverse one directory up

223
00:08:42,958 --> 00:08:44,480
in our next request

224
00:08:44,480 --> 00:08:45,920
we'll just remove that forward slash

225
00:08:45,920 --> 00:08:47,440
following image

226
00:08:47,440 --> 00:08:50,000
and that should allow us to view the

227
00:08:50,000 --> 00:08:52,480
page as we can see in the response and

228
00:08:52,480 --> 00:08:55,480
verb

229
00:08:57,920 --> 00:08:59,839
so now that we have that

230
00:08:59,839 --> 00:09:01,760
we'll then make a request in the browser

231
00:09:01,760 --> 00:09:04,160
just to show what that looks like

232
00:09:04,160 --> 00:09:06,800
in an actual

233
00:09:06,839 --> 00:09:10,640
attack we'll copy the url from verb make

234
00:09:10,640 --> 00:09:12,399
a request to the image and we see now

235
00:09:12,399 --> 00:09:17,720
that we have access to this secret file

236
00:09:35,120 --> 00:09:38,320
so the impact is the alias directive

237
00:09:38,320 --> 00:09:40,240
tells nginx the location to look for the

238
00:09:40,240 --> 00:09:41,279
file

239
00:09:41,279 --> 00:09:43,839
so off by slash plus the alias means

240
00:09:43,839 --> 00:09:45,519
that it's possible to read the files one

241
00:09:45,519 --> 00:09:46,720
folder up

242
00:09:46,720 --> 00:09:48,160
this will allow an attacker to read

243
00:09:48,160 --> 00:09:49,360
files stored outside of the target

244
00:09:49,360 --> 00:09:50,640
folder

245
00:09:50,640 --> 00:09:52,720
the remediation is just to append the

246
00:09:52,720 --> 00:09:54,560
ending directory separator

247
00:09:54,560 --> 00:09:56,320
to the location variable whenever there

248
00:09:56,320 --> 00:09:58,560
is an alias directive

249
00:09:58,560 --> 00:10:01,120
so just as a reminder misconfigured is

250
00:10:01,120 --> 00:10:03,600
just having the location directive with

251
00:10:03,600 --> 00:10:06,079
no forward slash after static then

252
00:10:06,079 --> 00:10:07,920
adding it after static makes it properly

253
00:10:07,920 --> 00:10:10,320
configured and you can avoid that off by

254
00:10:10,320 --> 00:10:13,040
slash attach

255
00:10:13,440 --> 00:10:16,800
configuration 3 is crlf injection via

256
00:10:16,800 --> 00:10:20,560
the uri variable in nginx

257
00:10:20,560 --> 00:10:23,519
so crlf injection is the ability to

258
00:10:23,519 --> 00:10:27,120
inject new lines into http headers

259
00:10:27,120 --> 00:10:28,640
effectively allowing you to inject your

260
00:10:28,640 --> 00:10:31,680
own headers into the response

261
00:10:31,680 --> 00:10:33,440
so the uri is a built-in variable in

262
00:10:33,440 --> 00:10:36,320
nginx that contains the request uri and

263
00:10:36,320 --> 00:10:38,320
it will automatically url decode the

264
00:10:38,320 --> 00:10:40,320
values including the carriage return and

265
00:10:40,320 --> 00:10:42,560
line feed characters

266
00:10:42,560 --> 00:10:44,640
similar configuration to the right will

267
00:10:44,640 --> 00:10:46,959
redirect the user to another domain so

268
00:10:46,959 --> 00:10:49,920
make a request to nginx.com test it'll

269
00:10:49,920 --> 00:10:52,480
take the uri following the domain append

270
00:10:52,480 --> 00:10:54,640
it to example.com and then redirect it

271
00:10:54,640 --> 00:10:57,200
that way

272
00:10:57,200 --> 00:10:58,480
so before going into the actual

273
00:10:58,480 --> 00:11:00,160
vulnerability it's important to really

274
00:11:00,160 --> 00:11:01,200
understand

275
00:11:01,200 --> 00:11:03,760
um newline characters in http and how

276
00:11:03,760 --> 00:11:06,880
url and coding works

277
00:11:06,880 --> 00:11:09,279
so new lines in http consist of the two

278
00:11:09,279 --> 00:11:10,880
non-printable characters

279
00:11:10,880 --> 00:11:13,120
backslash r or backslash n which is

280
00:11:13,120 --> 00:11:15,440
carriage return and line feed and we can

281
00:11:15,440 --> 00:11:17,760
see to our right that each header in the

282
00:11:17,760 --> 00:11:19,600
request and the response are separated

283
00:11:19,600 --> 00:11:22,640
by those two characters

284
00:11:22,640 --> 00:11:25,519
a common encoding for characters in http

285
00:11:25,519 --> 00:11:27,440
is url encoding

286
00:11:27,440 --> 00:11:29,440
urls are designed to accept only certain

287
00:11:29,440 --> 00:11:31,920
characters in a standard 128 character

288
00:11:31,920 --> 00:11:34,000
ascii character sets

289
00:11:34,000 --> 00:11:35,440
special characters not being used for

290
00:11:35,440 --> 00:11:38,240
their intended purpose must be encoded

291
00:11:38,240 --> 00:11:40,000
and each encoded character

292
00:11:40,000 --> 00:11:41,519
is represented by a percent sign

293
00:11:41,519 --> 00:11:44,320
followed by the ask a hex value

294
00:11:44,320 --> 00:11:45,920
so if we were to type hello there in the

295
00:11:45,920 --> 00:11:47,040
url

296
00:11:47,040 --> 00:11:48,959
the encoding for the space and

297
00:11:48,959 --> 00:11:51,200
exclamation mark would be percent 20 and

298
00:11:51,200 --> 00:11:53,200
percent 21.

299
00:11:53,200 --> 00:11:55,360
but for our purposes for this attack we

300
00:11:55,360 --> 00:11:57,040
only care about the carriage return and

301
00:11:57,040 --> 00:11:59,600
line feed characters and those encoded

302
00:11:59,600 --> 00:12:04,480
in url would be percent 0d and 0a

303
00:12:06,000 --> 00:12:09,279
so percent 0d and 0a are url decoded and

304
00:12:09,279 --> 00:12:12,240
reflected in the http headers we can add

305
00:12:12,240 --> 00:12:14,240
our own headers or even our own body in

306
00:12:14,240 --> 00:12:15,600
the response

307
00:12:15,600 --> 00:12:17,519
so again looking at our previous

308
00:12:17,519 --> 00:12:18,959
misconfiguration

309
00:12:18,959 --> 00:12:21,040
if we make a request to localhost and

310
00:12:21,040 --> 00:12:22,880
then we add our return

311
00:12:22,880 --> 00:12:24,560
characters and line feed characters

312
00:12:24,560 --> 00:12:26,720
after that and then we inject our custom

313
00:12:26,720 --> 00:12:27,680
header

314
00:12:27,680 --> 00:12:30,240
the uri variable will automatically url

315
00:12:30,240 --> 00:12:32,639
decode those characters and inject our

316
00:12:32,639 --> 00:12:35,120
detectify custom header in the bottom as

317
00:12:35,120 --> 00:12:37,040
we can see in the bottom right of the

318
00:12:37,040 --> 00:12:39,839
example

319
00:12:40,399 --> 00:12:41,920
so now we'll go into our demo to show

320
00:12:41,920 --> 00:12:44,560
how that works

321
00:12:46,639 --> 00:12:48,959
so here is our cat application once

322
00:12:48,959 --> 00:12:51,959
again

323
00:12:52,880 --> 00:12:54,000
we make

324
00:12:54,000 --> 00:12:55,600
we turn on the intercept and burp so

325
00:12:55,600 --> 00:12:57,360
make our request

326
00:12:57,360 --> 00:12:59,920
to image credits

327
00:12:59,920 --> 00:13:01,680
turn that to repeater and we'll look to

328
00:13:01,680 --> 00:13:03,760
see if the path and our get request is

329
00:13:03,760 --> 00:13:06,079
reflected anywhere in the response which

330
00:13:06,079 --> 00:13:08,560
it is in the original path parameter in

331
00:13:08,560 --> 00:13:10,639
the location

332
00:13:10,639 --> 00:13:12,560
header

333
00:13:12,560 --> 00:13:14,720
so now we'll add an extra path

334
00:13:14,720 --> 00:13:19,480
to see if that's also reflected as well

335
00:13:23,120 --> 00:13:25,680
you see that it is so now we can try to

336
00:13:25,680 --> 00:13:26,720
add in

337
00:13:26,720 --> 00:13:28,959
our character turn in line g characters

338
00:13:28,959 --> 00:13:31,279
to potentially inject new headers into

339
00:13:31,279 --> 00:13:33,440
the response so we see here how each

340
00:13:33,440 --> 00:13:34,399
header

341
00:13:34,399 --> 00:13:37,519
is separated by those two characters

342
00:13:37,519 --> 00:13:40,000
so go to cyber chef

343
00:13:40,000 --> 00:13:42,720
and we can show how if we type in hello

344
00:13:42,720 --> 00:13:43,519
there

345
00:13:43,519 --> 00:13:47,279
they're separated on two separate lines

346
00:13:47,600 --> 00:13:49,279
so now we'll add in our own custom

347
00:13:49,279 --> 00:13:50,560
header

348
00:13:50,560 --> 00:13:52,959
and url encode that

349
00:13:52,959 --> 00:13:54,639
and try to put that in our get request

350
00:13:54,639 --> 00:13:56,720
path and see if we can inject that

351
00:13:56,720 --> 00:14:00,360
header in the response

352
00:14:09,920 --> 00:14:11,760
now we encode it

353
00:14:11,760 --> 00:14:14,240
we grab the outputs and then put our

354
00:14:14,240 --> 00:14:15,839
payload

355
00:14:15,839 --> 00:14:17,760
now in

356
00:14:17,760 --> 00:14:20,560
in the repeater

357
00:14:27,600 --> 00:14:28,959
and now we see on line eights we were

358
00:14:28,959 --> 00:14:30,800
able to actually inject our custom

359
00:14:30,800 --> 00:14:34,160
header into the response

360
00:14:34,160 --> 00:14:35,360
now we want to take this one step

361
00:14:35,360 --> 00:14:37,519
further and see if we can actually

362
00:14:37,519 --> 00:14:39,680
add our own custom body into the

363
00:14:39,680 --> 00:14:40,720
response

364
00:14:40,720 --> 00:14:42,880
and to do that we'll have to add two

365
00:14:42,880 --> 00:14:45,120
extra characters or an extra

366
00:14:45,120 --> 00:14:47,279
pair of wine feed and carriage return

367
00:14:47,279 --> 00:14:48,320
characters

368
00:14:48,320 --> 00:14:51,279
and have those encoded as well

369
00:14:51,279 --> 00:14:55,519
and we'll add that to our get request

370
00:14:56,720 --> 00:14:58,560
and we'll see how now we're able to

371
00:14:58,560 --> 00:15:00,240
inject our new body

372
00:15:00,240 --> 00:15:03,399
in the response

373
00:15:12,720 --> 00:15:14,639
so the impact is we're able to inject

374
00:15:14,639 --> 00:15:16,079
arbitrary headers

375
00:15:16,079 --> 00:15:18,480
into the http response we can serve

376
00:15:18,480 --> 00:15:20,720
malicious pages to the end user we can

377
00:15:20,720 --> 00:15:23,279
execute xfs and potentially link

378
00:15:23,279 --> 00:15:25,279
sensitive information into the body as

379
00:15:25,279 --> 00:15:27,600
we just saw we were able to inject our

380
00:15:27,600 --> 00:15:29,360
own body into the response so if we can

381
00:15:29,360 --> 00:15:30,560
potentially

382
00:15:30,560 --> 00:15:32,959
do that with headers we can leak

383
00:15:32,959 --> 00:15:34,959
sensitive cookie values into the body

384
00:15:34,959 --> 00:15:36,079
and then

385
00:15:36,079 --> 00:15:38,560
access those

386
00:15:38,560 --> 00:15:41,120
remediation is to just use the request

387
00:15:41,120 --> 00:15:43,600
uri instead of the ui variable

388
00:15:43,600 --> 00:15:45,519
the request uri variable contains the

389
00:15:45,519 --> 00:15:47,680
unprocessed original uri and will not

390
00:15:47,680 --> 00:15:51,599
decode the values that we just had

391
00:15:53,199 --> 00:15:55,440
so our last misconfiguration is proxy

392
00:15:55,440 --> 00:15:58,720
pass via regex

393
00:16:00,240 --> 00:16:02,560
when nginx process a request it will

394
00:16:02,560 --> 00:16:04,560
send the request to a specified proxy

395
00:16:04,560 --> 00:16:06,399
server it will fetch the response and

396
00:16:06,399 --> 00:16:08,480
then send it back to the clients

397
00:16:08,480 --> 00:16:09,839
the intention

398
00:16:09,839 --> 00:16:11,920
is the location directive coupled with

399
00:16:11,920 --> 00:16:14,560
the proxy pass will notify nginx to

400
00:16:14,560 --> 00:16:17,360
request some uri to serve some data

401
00:16:17,360 --> 00:16:19,199
so here we see in our location directive

402
00:16:19,199 --> 00:16:21,279
we have some sort of regex that follows

403
00:16:21,279 --> 00:16:22,800
our docs path

404
00:16:22,800 --> 00:16:24,959
and anything following docs will then be

405
00:16:24,959 --> 00:16:26,480
replaced in

406
00:16:26,480 --> 00:16:28,720
our proxy pass s3 bucket that we see

407
00:16:28,720 --> 00:16:31,360
here so we make a request to help it

408
00:16:31,360 --> 00:16:33,279
really will request help html from our

409
00:16:33,279 --> 00:16:35,680
s3 bucket

410
00:16:35,680 --> 00:16:37,440
a regular expression like the one above

411
00:16:37,440 --> 00:16:39,600
will match url input of new lines select

412
00:16:39,600 --> 00:16:41,600
the previous misconfiguration we can

413
00:16:41,600 --> 00:16:44,320
also conduct a crl injection attack

414
00:16:44,320 --> 00:16:45,360
which means we can put in our own

415
00:16:45,360 --> 00:16:47,839
headers again

416
00:16:47,839 --> 00:16:49,839
the proxy pass points to an s3 rocket we

417
00:16:49,839 --> 00:16:51,199
can actually put in our own sd bucket as

418
00:16:51,199 --> 00:16:52,560
a host header and serve our own

419
00:16:52,560 --> 00:16:56,639
malicious content from our own s3 bucket

420
00:16:56,639 --> 00:16:58,880
so here we'll make a request and we'll

421
00:16:58,880 --> 00:17:01,360
see how we add in our carriage return to

422
00:17:01,360 --> 00:17:02,959
my g characters right before the host

423
00:17:02,959 --> 00:17:05,520
header and because of the proxy pass

424
00:17:05,520 --> 00:17:06,880
regular expression

425
00:17:06,880 --> 00:17:09,119
nginx will then process this and then

426
00:17:09,119 --> 00:17:12,400
request our own s3 bucket instead of the

427
00:17:12,400 --> 00:17:17,319
original s3 the original s3 bucket

428
00:17:18,000 --> 00:17:19,919
so now we'll show an example of how this

429
00:17:19,919 --> 00:17:22,240
works

430
00:17:24,959 --> 00:17:27,760
so we'll open up our nginx configuration

431
00:17:27,760 --> 00:17:28,640
file

432
00:17:28,640 --> 00:17:31,440
we see here we have a proxy pass to some

433
00:17:31,440 --> 00:17:33,840
uh vulnerable s3 buckets and then below

434
00:17:33,840 --> 00:17:36,559
that is a location directive for

435
00:17:36,559 --> 00:17:38,320
our collaborative server which will just

436
00:17:38,320 --> 00:17:41,039
show how the host header is split um

437
00:17:41,039 --> 00:17:43,760
during the attack

438
00:17:44,160 --> 00:17:46,480
so here we make a request to our s3

439
00:17:46,480 --> 00:17:48,320
bucket and serves

440
00:17:48,320 --> 00:17:52,520
very basic data from index.html

441
00:17:55,679 --> 00:17:58,160
and now we'll make a request to our

442
00:17:58,160 --> 00:17:59,520
collaboratory server through the

443
00:17:59,520 --> 00:18:01,360
location directive

444
00:18:01,360 --> 00:18:04,640
just to show how this will work

445
00:18:04,640 --> 00:18:08,480
to make the request to index.html

446
00:18:08,480 --> 00:18:11,120
there we see how the server responds

447
00:18:11,120 --> 00:18:13,600
so when we check the logs

448
00:18:13,600 --> 00:18:15,600
we see how there is this host header on

449
00:18:15,600 --> 00:18:17,200
line two and we want to be able to

450
00:18:17,200 --> 00:18:19,440
inject our own host header instead

451
00:18:19,440 --> 00:18:22,000
so again we'll go to cyber chef

452
00:18:22,000 --> 00:18:24,000
we'll add in our own nefarious clock

453
00:18:24,000 --> 00:18:26,160
detectify s3 bucket

454
00:18:26,160 --> 00:18:28,720
we'll encode new lines like from the

455
00:18:28,720 --> 00:18:30,640
previous configuration

456
00:18:30,640 --> 00:18:33,200
and try to inject that header

457
00:18:33,200 --> 00:18:35,919
into the response

458
00:18:35,919 --> 00:18:38,080
so how so on that s3 bucket we have some

459
00:18:38,080 --> 00:18:40,080
sort of nefarious javascript that we

460
00:18:40,080 --> 00:18:42,160
want to deliver to the clients or

461
00:18:42,160 --> 00:18:44,559
targets

462
00:18:45,760 --> 00:18:48,400
here we encode it

463
00:18:48,400 --> 00:18:50,720
we then make that request again in the

464
00:18:50,720 --> 00:18:52,000
browser

465
00:18:52,000 --> 00:18:53,760
and then when we check our burp blogs

466
00:18:53,760 --> 00:18:56,320
again it should show our host header is

467
00:18:56,320 --> 00:18:58,400
now that nefarious

468
00:18:58,400 --> 00:19:01,200
pog detectify s3 bucket

469
00:19:01,200 --> 00:19:04,400
which now we see online too

470
00:19:04,400 --> 00:19:05,840
so now how we see that works we'll

471
00:19:05,840 --> 00:19:07,760
actually implement that and try to

472
00:19:07,760 --> 00:19:10,080
deliver that nefarious javascript on

473
00:19:10,080 --> 00:19:12,559
that vulnerable s3 bucket

474
00:19:12,559 --> 00:19:14,320
that we showed earlier

475
00:19:14,320 --> 00:19:16,640
so now we'll do that

476
00:19:16,640 --> 00:19:18,559
again and we'll see how now we are able

477
00:19:18,559 --> 00:19:21,760
to execute javascript

478
00:19:21,760 --> 00:19:24,160
and serve our own contents instead of

479
00:19:24,160 --> 00:19:27,360
that other content

480
00:19:33,120 --> 00:19:35,200
so the impact again is we're able to

481
00:19:35,200 --> 00:19:37,039
inject arbitrary headers

482
00:19:37,039 --> 00:19:39,760
into the http response such as the host

483
00:19:39,760 --> 00:19:40,799
header

484
00:19:40,799 --> 00:19:42,080
if we're able to inject our own

485
00:19:42,080 --> 00:19:44,000
hustetters our own host headers we can

486
00:19:44,000 --> 00:19:46,320
perform web cache poisoning and serve

487
00:19:46,320 --> 00:19:48,640
other malicious contents we can perform

488
00:19:48,640 --> 00:19:50,320
clients we can exploit client-side

489
00:19:50,320 --> 00:19:51,520
vulnerabilities like cross-site

490
00:19:51,520 --> 00:19:54,480
scripting and in some cases even conduct

491
00:19:54,480 --> 00:19:56,320
ssrf attacks

492
00:19:56,320 --> 00:19:58,559
the remediation is just to use strict

493
00:19:58,559 --> 00:20:00,080
regular expressions and do not allow

494
00:20:00,080 --> 00:20:03,600
newline characters in proxy pass

495
00:20:03,600 --> 00:20:05,840
and those and that is the end of my

496
00:20:05,840 --> 00:20:08,559
presentation and i will welcome any

497
00:20:08,559 --> 00:20:12,399
questions in the slack channel

498
00:20:12,960 --> 00:20:15,200
yeah thank you so much spencer that was

499
00:20:15,200 --> 00:20:17,679
a wonderful session

500
00:20:17,679 --> 00:20:18,559
um

501
00:20:18,559 --> 00:20:19,520
because

502
00:20:19,520 --> 00:20:21,919
you were going us through uh demos and

503
00:20:21,919 --> 00:20:24,559
all so it was very nice

504
00:20:24,559 --> 00:20:26,880
so i think um the participants and

505
00:20:26,880 --> 00:20:29,600
spencer can move to the slack channel

506
00:20:29,600 --> 00:20:31,840
there um spencer will be answering to

507
00:20:31,840 --> 00:20:33,840
all the quick q and impressions that you

508
00:20:33,840 --> 00:20:36,559
will be asking

509
00:20:37,120 --> 00:20:40,959
yep i can do that thank you sir

510
00:20:41,280 --> 00:20:43,679
thank you so much spencer

511
00:20:43,679 --> 00:20:46,080
and also thank you all for participating

512
00:20:46,080 --> 00:20:48,480
in this session so you can move to the

513
00:20:48,480 --> 00:20:50,720
slack channel

514
00:20:50,720 --> 00:20:54,360
all right thank you

