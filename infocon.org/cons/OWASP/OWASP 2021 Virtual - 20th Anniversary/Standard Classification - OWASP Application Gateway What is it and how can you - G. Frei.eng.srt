1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,080 --> 00:00:10,559
for the introduction and uh also a warm

3
00:00:10,559 --> 00:00:13,599
welcome from my site quite excited to be

4
00:00:13,599 --> 00:00:16,400
here on this stage and present this uh

5
00:00:16,400 --> 00:00:17,920
gateway that i

6
00:00:17,920 --> 00:00:19,039
originally

7
00:00:19,039 --> 00:00:20,720
initiated this project

8
00:00:20,720 --> 00:00:23,199
but we'll see um

9
00:00:23,199 --> 00:00:25,279
we have quite a bit the team and now

10
00:00:25,279 --> 00:00:27,039
behind this project

11
00:00:27,039 --> 00:00:28,800
so we're already quite a bit behind

12
00:00:28,800 --> 00:00:30,960
schedule so i try to keep it short and

13
00:00:30,960 --> 00:00:32,840
concise and

14
00:00:32,840 --> 00:00:34,079
[Music]

15
00:00:34,079 --> 00:00:36,960
yeah so just let's get started

16
00:00:36,960 --> 00:00:38,160
um

17
00:00:38,160 --> 00:00:40,320
before i get into the details what the

18
00:00:40,320 --> 00:00:43,120
application gateway project exactly is i

19
00:00:43,120 --> 00:00:45,440
want to quickly highlight and what's the

20
00:00:45,440 --> 00:00:47,920
reason why we started developing this

21
00:00:47,920 --> 00:00:49,520
gateway

22
00:00:49,520 --> 00:00:51,600
so first of all as a matter of fact many

23
00:00:51,600 --> 00:00:54,239
organizations moved to microservice

24
00:00:54,239 --> 00:00:56,719
based architectures and this is true

25
00:00:56,719 --> 00:00:58,399
from large-scale

26
00:00:58,399 --> 00:00:59,680
companies like

27
00:00:59,680 --> 00:01:02,480
banks for online banking and also for

28
00:01:02,480 --> 00:01:04,799
more smaller for example a new

29
00:01:04,799 --> 00:01:07,840
innovative project of startups

30
00:01:07,840 --> 00:01:10,840
but when it comes to security

31
00:01:10,840 --> 00:01:13,200
microservices tend to make it

32
00:01:13,200 --> 00:01:16,479
harder compared to monolithical systems

33
00:01:16,479 --> 00:01:18,240
main reason is that we have more

34
00:01:18,240 --> 00:01:20,880
services more interactions between those

35
00:01:20,880 --> 00:01:24,240
services the attack surface is larger

36
00:01:24,240 --> 00:01:25,920
and those are all security

37
00:01:25,920 --> 00:01:28,960
considerations that one should do

38
00:01:28,960 --> 00:01:30,960
compared to a monolithical system where

39
00:01:30,960 --> 00:01:33,119
we might only have a

40
00:01:33,119 --> 00:01:36,560
much clearly small attack surface

41
00:01:36,560 --> 00:01:38,640
attack surface

42
00:01:38,640 --> 00:01:39,759
however

43
00:01:39,759 --> 00:01:42,560
security is still a bit afterthought in

44
00:01:42,560 --> 00:01:44,479
many organizations and from my own

45
00:01:44,479 --> 00:01:47,439
experience i can just tell if you try to

46
00:01:47,439 --> 00:01:49,920
patch security at the end onto a

47
00:01:49,920 --> 00:01:52,560
architecture it is so much harder and

48
00:01:52,560 --> 00:01:55,040
more costly than when you start with the

49
00:01:55,040 --> 00:01:58,079
security mindset from the beginning

50
00:01:58,079 --> 00:02:00,159
but however there's still not so much

51
00:02:00,159 --> 00:02:02,560
talk about security when it comes to

52
00:02:02,560 --> 00:02:05,280
microservices so this is one of the main

53
00:02:05,280 --> 00:02:06,399
challenges when it comes to

54
00:02:06,399 --> 00:02:08,560
microservices but there are also some

55
00:02:08,560 --> 00:02:11,120
other challenges especially in larger

56
00:02:11,120 --> 00:02:12,480
systems

57
00:02:12,480 --> 00:02:14,640
one is that open id connect which is

58
00:02:14,640 --> 00:02:17,120
today the standard protocol for

59
00:02:17,120 --> 00:02:20,480
really for um federated authentication

60
00:02:20,480 --> 00:02:23,120
it's still quite complex um it's much

61
00:02:23,120 --> 00:02:24,720
easier than for example all the

62
00:02:24,720 --> 00:02:27,200
protocols like summel but still there

63
00:02:27,200 --> 00:02:28,879
are a lot of different flows and you

64
00:02:28,879 --> 00:02:30,879
need to know what what you do when this

65
00:02:30,879 --> 00:02:33,440
can get quite tricky and it's not really

66
00:02:33,440 --> 00:02:35,280
something that um

67
00:02:35,280 --> 00:02:38,080
that is really um part of your app you

68
00:02:38,080 --> 00:02:39,920
want to focus on your business logic and

69
00:02:39,920 --> 00:02:42,959
not really on the authentication part

70
00:02:42,959 --> 00:02:45,599
and then when it comes to large systems

71
00:02:45,599 --> 00:02:48,560
then you often see that those micro

72
00:02:48,560 --> 00:02:51,200
service architectures are really closely

73
00:02:51,200 --> 00:02:52,959
coupled to

74
00:02:52,959 --> 00:02:55,840
the the way you authenticate uh your

75
00:02:55,840 --> 00:02:59,120
users and uh from architectural point of

76
00:02:59,120 --> 00:03:01,440
view this is really unfortunate because

77
00:03:01,440 --> 00:03:05,040
you have this um this bit uh this is

78
00:03:05,040 --> 00:03:07,360
really tight coupling and if you want to

79
00:03:07,360 --> 00:03:09,840
change something on your authentication

80
00:03:09,840 --> 00:03:11,840
system then you really need to change a

81
00:03:11,840 --> 00:03:14,159
lot on your back end and this makes it

82
00:03:14,159 --> 00:03:16,959
hard to to keep up this

83
00:03:16,959 --> 00:03:19,920
modern with modern authentication

84
00:03:19,920 --> 00:03:20,800
so

85
00:03:20,800 --> 00:03:23,680
the os application gateway project was

86
00:03:23,680 --> 00:03:26,879
initiated due to those uh challenges and

87
00:03:26,879 --> 00:03:29,360
uh yeah i'll come to in a minute to

88
00:03:29,360 --> 00:03:32,000
what what it exactly is but before that

89
00:03:32,000 --> 00:03:34,640
maybe a short view on the team behind it

90
00:03:34,640 --> 00:03:36,720
and we have a few open source

91
00:03:36,720 --> 00:03:39,280
contributors and uh the lead of the

92
00:03:39,280 --> 00:03:41,920
project is a colleague between patrick

93
00:03:41,920 --> 00:03:43,200
stigle

94
00:03:43,200 --> 00:03:44,239
who is a

95
00:03:44,239 --> 00:03:47,599
principal security architect also at

96
00:03:47,599 --> 00:03:51,040
tulk engineering and my humble self who

97
00:03:51,040 --> 00:03:53,280
i am a security engineer and security

98
00:03:53,280 --> 00:03:56,080
testers also at silke and yeah by the

99
00:03:56,080 --> 00:03:58,319
way we also hiring so if this is

100
00:03:58,319 --> 00:04:00,640
something interests you then yeah just

101
00:04:00,640 --> 00:04:03,519
say write me a note

102
00:04:03,519 --> 00:04:05,280
so what are those challenges with those

103
00:04:05,280 --> 00:04:06,799
micro services

104
00:04:06,799 --> 00:04:08,799
um

105
00:04:08,799 --> 00:04:10,720
here we have a sample

106
00:04:10,720 --> 00:04:12,799
micro service architecture

107
00:04:12,799 --> 00:04:15,200
and this is really a typical

108
00:04:15,200 --> 00:04:16,560
architecture

109
00:04:16,560 --> 00:04:19,199
um as you might see the browser client

110
00:04:19,199 --> 00:04:20,880
the mobile app then there are some

111
00:04:20,880 --> 00:04:23,600
services uh which are exposed to the

112
00:04:23,600 --> 00:04:26,160
internet and the reporting service who

113
00:04:26,160 --> 00:04:27,280
is uh

114
00:04:27,280 --> 00:04:29,280
not really needed to be a reachable from

115
00:04:29,280 --> 00:04:31,360
the internet

116
00:04:31,360 --> 00:04:32,880
so

117
00:04:32,880 --> 00:04:36,000
i just wrote here a lot of different

118
00:04:36,000 --> 00:04:38,720
questions that might come up but they

119
00:04:38,720 --> 00:04:40,160
often

120
00:04:40,160 --> 00:04:41,600
quite

121
00:04:41,600 --> 00:04:43,759
just to simplify to the main questions

122
00:04:43,759 --> 00:04:47,520
how can we integrate authentication uh

123
00:04:47,520 --> 00:04:49,120
in this system because we have a lot of

124
00:04:49,120 --> 00:04:50,240
different

125
00:04:50,240 --> 00:04:52,720
needs for example these services are

126
00:04:52,720 --> 00:04:54,720
most of the time implemented in a

127
00:04:54,720 --> 00:04:56,880
stateless way so we want to keep that

128
00:04:56,880 --> 00:04:59,520
stateless and however we still

129
00:04:59,520 --> 00:05:02,320
might want a server-side log out

130
00:05:02,320 --> 00:05:04,479
and also security considerations

131
00:05:04,479 --> 00:05:06,320
and on the left side with the clients we

132
00:05:06,320 --> 00:05:09,360
have the challenges that the browser has

133
00:05:09,360 --> 00:05:12,000
way less of possibilities to safely

134
00:05:12,000 --> 00:05:14,240
store credential than for example a

135
00:05:14,240 --> 00:05:16,240
mobile app where you can store a

136
00:05:16,240 --> 00:05:18,479
long-term credentials

137
00:05:18,479 --> 00:05:21,120
in for example the ios keychain and

138
00:05:21,120 --> 00:05:22,800
there you want really to have a

139
00:05:22,800 --> 00:05:25,600
long-term login and don't want the user

140
00:05:25,600 --> 00:05:27,759
to log in every time when he opens the

141
00:05:27,759 --> 00:05:29,919
app

142
00:05:29,919 --> 00:05:31,759
so this is about the authentication and

143
00:05:31,759 --> 00:05:33,919
then you so often have an external

144
00:05:33,919 --> 00:05:36,840
identity provider this type might be for

145
00:05:36,840 --> 00:05:40,080
example uh a social login this might be

146
00:05:40,080 --> 00:05:42,960
your own erm system this might be your

147
00:05:42,960 --> 00:05:46,240
actual active directory um

148
00:05:46,240 --> 00:05:48,880
whatever it is uh main question is

149
00:05:48,880 --> 00:05:51,680
always how can we integrate this

150
00:05:51,680 --> 00:05:53,520
identity provider

151
00:05:53,520 --> 00:05:54,320
to

152
00:05:54,320 --> 00:05:56,639
this architecture

153
00:05:56,639 --> 00:05:59,520
and this is now where the os replication

154
00:05:59,520 --> 00:06:02,319
gateway comes into place

155
00:06:02,319 --> 00:06:04,960
so what is it

156
00:06:04,960 --> 00:06:07,039
the gateway itself it's it's a

157
00:06:07,039 --> 00:06:09,600
standalone application and it's a

158
00:06:09,600 --> 00:06:11,680
reverse proxy

159
00:06:11,680 --> 00:06:14,479
that sits between your web public or

160
00:06:14,479 --> 00:06:18,400
your clients and your backend services

161
00:06:18,400 --> 00:06:21,680
so it's a typical http reverse proxy but

162
00:06:21,680 --> 00:06:25,120
compared to for example api gateways as

163
00:06:25,120 --> 00:06:27,520
you might know it um there are a lot of

164
00:06:27,520 --> 00:06:29,759
products it has some some kind of

165
00:06:29,759 --> 00:06:31,840
special features and it's focused on

166
00:06:31,840 --> 00:06:34,560
that we talk we

167
00:06:34,560 --> 00:06:37,440
call it application gateway and not api

168
00:06:37,440 --> 00:06:39,440
gateway because it does quite a lot of

169
00:06:39,440 --> 00:06:40,720
things for you

170
00:06:40,720 --> 00:06:42,960
uh first of all it does session

171
00:06:42,960 --> 00:06:46,560
management and uh login with with a

172
00:06:46,560 --> 00:06:49,039
federated authentication provider so it

173
00:06:49,039 --> 00:06:51,680
implements open id connect

174
00:06:51,680 --> 00:06:52,800
and

175
00:06:52,800 --> 00:06:55,520
takes kind of this this responsibility

176
00:06:55,520 --> 00:06:59,758
so you don't need to do that on your own

177
00:07:00,080 --> 00:07:01,120
so

178
00:07:01,120 --> 00:07:03,520
the idea is really that it gives you a

179
00:07:03,520 --> 00:07:06,800
head start when when try uh when setting

180
00:07:06,800 --> 00:07:07,919
up your

181
00:07:07,919 --> 00:07:09,919
security architecture

182
00:07:09,919 --> 00:07:12,880
which which leads to a really um secure

183
00:07:12,880 --> 00:07:14,319
architecture

184
00:07:14,319 --> 00:07:18,400
which is ready for from large uh from

185
00:07:18,400 --> 00:07:20,960
small to large scale systems like like

186
00:07:20,960 --> 00:07:23,759
for example online banking systems

187
00:07:23,759 --> 00:07:25,680
because we believe that that every

188
00:07:25,680 --> 00:07:28,319
application also small applications

189
00:07:28,319 --> 00:07:29,599
deserve

190
00:07:29,599 --> 00:07:31,680
good security

191
00:07:31,680 --> 00:07:33,919
and from an architectural point of view

192
00:07:33,919 --> 00:07:36,720
the most important feature is that it

193
00:07:36,720 --> 00:07:40,160
decouples your backend service from your

194
00:07:40,160 --> 00:07:42,560
single sign-on integration

195
00:07:42,560 --> 00:07:44,319
because this was the point that i

196
00:07:44,319 --> 00:07:46,400
mentioned before that we have this tight

197
00:07:46,400 --> 00:07:48,080
coupling often between the backend

198
00:07:48,080 --> 00:07:51,039
services and uem and gateway is kind of

199
00:07:51,039 --> 00:07:54,479
a thing between and can make that

200
00:07:54,479 --> 00:07:57,440
or decouple that

201
00:07:57,599 --> 00:08:00,319
so if you would want to use

202
00:08:00,319 --> 00:08:02,479
the gateway in your architecture of

203
00:08:02,479 --> 00:08:04,479
course there's some advantages and some

204
00:08:04,479 --> 00:08:06,639
disadvantages with every like with every

205
00:08:06,639 --> 00:08:09,199
architectural decision

206
00:08:09,199 --> 00:08:11,840
um on the advantage side we have

207
00:08:11,840 --> 00:08:13,680
clearly that it comes with a lot of out

208
00:08:13,680 --> 00:08:15,680
of the box functionality when it comes

209
00:08:15,680 --> 00:08:18,319
to session management and then login

210
00:08:18,319 --> 00:08:21,039
so you really need to write almost no

211
00:08:21,039 --> 00:08:23,919
code in the backend nor into front-end

212
00:08:23,919 --> 00:08:27,120
to do any kind of login related stuff so

213
00:08:27,120 --> 00:08:29,520
at how uh you know in a large extent it

214
00:08:29,520 --> 00:08:32,000
reduces the complexity in the front and

215
00:08:32,000 --> 00:08:34,159
the back end and you can really focus

216
00:08:34,159 --> 00:08:37,360
only on the business logic

217
00:08:37,360 --> 00:08:40,880
from a security perspective it's also a

218
00:08:40,880 --> 00:08:42,719
single point of entry

219
00:08:42,719 --> 00:08:43,919
which

220
00:08:43,919 --> 00:08:45,760
means that you have a clearly defined

221
00:08:45,760 --> 00:08:48,720
attack surface and it also makes it

222
00:08:48,720 --> 00:08:51,040
much easier to for example implement

223
00:08:51,040 --> 00:08:53,279
trust zones with network policies

224
00:08:53,279 --> 00:08:56,240
because you only need to expose your

225
00:08:56,240 --> 00:08:59,120
instance of the gateway

226
00:08:59,120 --> 00:09:01,279
then also from from a developer

227
00:09:01,279 --> 00:09:02,800
perspective

228
00:09:02,800 --> 00:09:04,560
or from an architectural perspective

229
00:09:04,560 --> 00:09:05,519
again

230
00:09:05,519 --> 00:09:07,760
the api is the contract so

231
00:09:07,760 --> 00:09:09,680
it allows you to make changes in the

232
00:09:09,680 --> 00:09:12,880
back end without uh changing anything in

233
00:09:12,880 --> 00:09:14,640
the front end

234
00:09:14,640 --> 00:09:17,200
this is a clear advantage um

235
00:09:17,200 --> 00:09:19,040
this pattern is also called back and

236
00:09:19,040 --> 00:09:20,640
forth from them

237
00:09:20,640 --> 00:09:23,279
if you wanted and of course it comes

238
00:09:23,279 --> 00:09:25,519
with a lot of best practices when it

239
00:09:25,519 --> 00:09:28,480
comes to security so it for example it

240
00:09:28,480 --> 00:09:31,040
implements request tracing according to

241
00:09:31,040 --> 00:09:36,000
uh w3c standards it has uh it locks and

242
00:09:36,000 --> 00:09:38,160
all the requests that the

243
00:09:38,160 --> 00:09:40,240
forwards it comes with sea surf

244
00:09:40,240 --> 00:09:42,800
protection you can modify headers and so

245
00:09:42,800 --> 00:09:44,560
on and so forth

246
00:09:44,560 --> 00:09:46,720
but also of course there's some

247
00:09:46,720 --> 00:09:49,440
slight disadvantages first of all it's

248
00:09:49,440 --> 00:09:52,000
like that's the most important one it's

249
00:09:52,000 --> 00:09:54,160
obviously a bit more complex

250
00:09:54,160 --> 00:09:55,519
architecture

251
00:09:55,519 --> 00:09:57,200
uh but on the other hand you have a bit

252
00:09:57,200 --> 00:09:59,519
less complexity in the front and then

253
00:09:59,519 --> 00:10:02,079
backhand so this is kind of a trade-off

254
00:10:02,079 --> 00:10:05,839
you need to do um and then also because

255
00:10:05,839 --> 00:10:08,560
it's a single point of entry it's also a

256
00:10:08,560 --> 00:10:11,680
single point of failure uh we will

257
00:10:11,680 --> 00:10:14,240
cover later how how we address this

258
00:10:14,240 --> 00:10:17,279
problem with horizontal scalability

259
00:10:17,279 --> 00:10:19,040
and then of course um

260
00:10:19,040 --> 00:10:21,440
while the oit is is really uh

261
00:10:21,440 --> 00:10:23,440
configurable um

262
00:10:23,440 --> 00:10:25,680
it's still opinionated in some areas so

263
00:10:25,680 --> 00:10:28,399
we have a kind of idea how an

264
00:10:28,399 --> 00:10:30,959
architectural vision uh with the zero

265
00:10:30,959 --> 00:10:34,560
trust approach um but

266
00:10:34,560 --> 00:10:37,440
um if if your vision doesn't match that

267
00:10:37,440 --> 00:10:41,120
at all then the ohe might be not a good

268
00:10:41,120 --> 00:10:43,680
fit for you

269
00:10:43,680 --> 00:10:47,040
so um this is now really theoretical

270
00:10:47,040 --> 00:10:49,839
um i'll do now a short demo of an

271
00:10:49,839 --> 00:10:52,000
application that is implemented with the

272
00:10:52,000 --> 00:10:54,399
gateway and you see here the

273
00:10:54,399 --> 00:10:56,240
architecture so

274
00:10:56,240 --> 00:10:58,560
this is all deployed on azure but this

275
00:10:58,560 --> 00:11:00,640
doesn't really matter for the demo

276
00:11:00,640 --> 00:11:03,120
the only thing the client talks to is

277
00:11:03,120 --> 00:11:05,279
the gateway itself and then we have

278
00:11:05,279 --> 00:11:08,880
three back-end systems first is a a host

279
00:11:08,880 --> 00:11:11,279
for the front-end this is a simple azure

280
00:11:11,279 --> 00:11:13,600
blob storage and then we have two azure

281
00:11:13,600 --> 00:11:16,640
app services one for the backend api and

282
00:11:16,640 --> 00:11:18,959
one is a special echo

283
00:11:18,959 --> 00:11:21,440
service that is just here for debugging

284
00:11:21,440 --> 00:11:22,560
and

285
00:11:22,560 --> 00:11:25,200
demonstration purposes

286
00:11:25,200 --> 00:11:27,760
but before i show you that i want to

287
00:11:27,760 --> 00:11:29,600
quickly show you how this is now

288
00:11:29,600 --> 00:11:31,360
configured because this

289
00:11:31,360 --> 00:11:34,720
is a very good impression um

290
00:11:34,720 --> 00:11:37,440
how how ohe works

291
00:11:37,440 --> 00:11:38,320
so

292
00:11:38,320 --> 00:11:41,519
let me quickly uh change

293
00:11:41,519 --> 00:11:42,640
the

294
00:11:42,640 --> 00:11:44,399
window

295
00:11:44,399 --> 00:11:46,399
then i need to stop the share and do it

296
00:11:46,399 --> 00:11:48,720
again

297
00:11:50,800 --> 00:11:54,079
so what you see now is the

298
00:11:54,079 --> 00:11:56,480
the configuration file of this ohe

299
00:11:56,480 --> 00:11:57,680
instance

300
00:11:57,680 --> 00:11:58,480
and

301
00:11:58,480 --> 00:12:00,320
you can see it's a yaml file so it's

302
00:12:00,320 --> 00:12:03,040
easily human readable and this is also

303
00:12:03,040 --> 00:12:05,200
the idea that you can read this file and

304
00:12:05,200 --> 00:12:06,880
you directly get the impression what is

305
00:12:06,880 --> 00:12:08,079
going on

306
00:12:08,079 --> 00:12:11,360
there are two main parts um there are

307
00:12:11,360 --> 00:12:13,200
routes definitions

308
00:12:13,200 --> 00:12:15,680
um so here you add the different

309
00:12:15,680 --> 00:12:18,959
backhand routes and uh you can have a uh

310
00:12:18,959 --> 00:12:20,720
a

311
00:12:20,720 --> 00:12:22,720
pattern that matches the request and

312
00:12:22,720 --> 00:12:25,040
then it gets re forwarded

313
00:12:25,040 --> 00:12:26,720
to this request and you can have for

314
00:12:26,720 --> 00:12:29,839
example additional settings like if the

315
00:12:29,839 --> 00:12:31,680
this route can be accessed in an

316
00:12:31,680 --> 00:12:33,440
enormous way

317
00:12:33,440 --> 00:12:35,600
so this is the first important part

318
00:12:35,600 --> 00:12:37,680
second important part is here the login

319
00:12:37,680 --> 00:12:41,040
providers here you tell um

320
00:12:41,040 --> 00:12:44,079
the the gateway how exactly users can

321
00:12:44,079 --> 00:12:45,440
log in

322
00:12:45,440 --> 00:12:46,560
and

323
00:12:46,560 --> 00:12:48,639
we have also three methods here so the

324
00:12:48,639 --> 00:12:51,680
first one is a login with google

325
00:12:51,680 --> 00:12:54,160
this is a simple open id connect login

326
00:12:54,160 --> 00:12:57,120
and those here are the values that i got

327
00:12:57,120 --> 00:12:59,200
from google when the retro thing is

328
00:12:59,200 --> 00:13:00,720
logging with google

329
00:13:00,720 --> 00:13:02,160
and then we also have a login with

330
00:13:02,160 --> 00:13:04,560
github github doesn't implement openid

331
00:13:04,560 --> 00:13:07,120
connect uh this is kind of uh

332
00:13:07,120 --> 00:13:09,519
unfortunate uh they have their own

333
00:13:09,519 --> 00:13:11,680
protocol so we also uh built that

334
00:13:11,680 --> 00:13:14,079
directly natively in to their

335
00:13:14,079 --> 00:13:15,760
application gateway

336
00:13:15,760 --> 00:13:17,519
and just for demo purposes we also have

337
00:13:17,519 --> 00:13:20,079
a third we say private er

338
00:13:20,079 --> 00:13:21,600
there are a lot of

339
00:13:21,600 --> 00:13:24,160
additional things you can configure

340
00:13:24,160 --> 00:13:25,600
uh for example

341
00:13:25,600 --> 00:13:27,920
how this chat token looks like that is

342
00:13:27,920 --> 00:13:29,760
sent to the backend

343
00:13:29,760 --> 00:13:31,839
but this is optional so you don't really

344
00:13:31,839 --> 00:13:33,360
need to configure that

345
00:13:33,360 --> 00:13:35,519
if you just want to take the out of the

346
00:13:35,519 --> 00:13:38,240
box version

347
00:13:38,320 --> 00:13:42,399
um so now let's go to my browser window

348
00:13:42,399 --> 00:13:43,519
and

349
00:13:43,519 --> 00:13:45,600
then i can show you how this looks like

350
00:13:45,600 --> 00:13:48,399
and so this is the url of the demo

351
00:13:48,399 --> 00:13:50,800
oht.azurewebsites.net

352
00:13:50,800 --> 00:13:53,839
uh feel free to also go here um it's a

353
00:13:53,839 --> 00:13:56,320
simple blocking application currently we

354
00:13:56,320 --> 00:13:59,040
don't have any articles here if you want

355
00:13:59,040 --> 00:13:59,920
to

356
00:13:59,920 --> 00:14:01,519
create one

357
00:14:01,519 --> 00:14:03,519
uh let's sign up for that

358
00:14:03,519 --> 00:14:05,839
um and here you see now these three uh

359
00:14:05,839 --> 00:14:08,480
login uh links this now

360
00:14:08,480 --> 00:14:10,480
needs to be of course implemented by a

361
00:14:10,480 --> 00:14:13,360
frontend developer um because we don't

362
00:14:13,360 --> 00:14:14,800
really know

363
00:14:14,800 --> 00:14:16,800
how you want your login page to look

364
00:14:16,800 --> 00:14:17,680
like

365
00:14:17,680 --> 00:14:20,480
but when i click here on the button

366
00:14:20,480 --> 00:14:22,720
this is a simple redirect to a special

367
00:14:22,720 --> 00:14:25,519
url and this is called old

368
00:14:25,519 --> 00:14:26,959
google

369
00:14:26,959 --> 00:14:28,880
login for example

370
00:14:28,880 --> 00:14:32,240
and if you redirect the user to that url

371
00:14:32,240 --> 00:14:34,800
oh he knows that you want to log but the

372
00:14:34,800 --> 00:14:37,519
user wants to log in with google

373
00:14:37,519 --> 00:14:39,279
so let's do that

374
00:14:39,279 --> 00:14:41,839
and then we start the openid connect

375
00:14:41,839 --> 00:14:42,880
flow

376
00:14:42,880 --> 00:14:45,519
i'm already logged in at google so uh

377
00:14:45,519 --> 00:14:47,519
there's no password prompt but i can now

378
00:14:47,519 --> 00:14:50,560
select my account let's take my oversp

379
00:14:50,560 --> 00:14:53,920
account i get redirected back to my osg

380
00:14:53,920 --> 00:14:56,320
instance and then you can see i'm logged

381
00:14:56,320 --> 00:14:58,560
in

382
00:14:58,560 --> 00:14:59,519
also

383
00:14:59,519 --> 00:15:00,639
i have my

384
00:15:00,639 --> 00:15:02,800
nice little profile picture

385
00:15:02,800 --> 00:15:05,279
if you want to know what's going on on

386
00:15:05,279 --> 00:15:07,920
the back end you can now use the special

387
00:15:07,920 --> 00:15:09,519
echo route

388
00:15:09,519 --> 00:15:12,800
what this service does it just reflects

389
00:15:12,800 --> 00:15:15,040
the http request

390
00:15:15,040 --> 00:15:17,279
as he gets it

391
00:15:17,279 --> 00:15:20,959
then you can see what the gateway does

392
00:15:20,959 --> 00:15:22,560
what's interesting is

393
00:15:22,560 --> 00:15:24,639
most of all this authorization barrel

394
00:15:24,639 --> 00:15:28,240
header this is now added by the gateway

395
00:15:28,240 --> 00:15:31,199
and here we have a shot token that can

396
00:15:31,199 --> 00:15:32,480
be uh

397
00:15:32,480 --> 00:15:34,639
validated by the back end in a stateless

398
00:15:34,639 --> 00:15:36,399
way

399
00:15:36,399 --> 00:15:39,040
and if we take a closer look we see here

400
00:15:39,040 --> 00:15:41,440
now and that we have the information for

401
00:15:41,440 --> 00:15:44,480
example which provided the

402
00:15:44,480 --> 00:15:45,839
user

403
00:15:45,839 --> 00:15:49,199
use and um also for example uh here the

404
00:15:49,199 --> 00:15:52,000
subject claim which tells the backend uh

405
00:15:52,000 --> 00:15:54,720
unique id of the user

406
00:15:54,720 --> 00:15:56,160
there are a lot more things that you can

407
00:15:56,160 --> 00:15:58,560
configure

408
00:15:58,560 --> 00:16:00,480
also for example you have a session id

409
00:16:00,480 --> 00:16:03,040
directly in description token this is

410
00:16:03,040 --> 00:16:05,519
the session id we have here with our

411
00:16:05,519 --> 00:16:08,560
cookie-based authentication and if we

412
00:16:08,560 --> 00:16:11,680
take a close look at that and we can see

413
00:16:11,680 --> 00:16:15,920
here that we have a few cookies set

414
00:16:15,920 --> 00:16:19,120
most important here this session cookie

415
00:16:19,120 --> 00:16:23,360
this is a encrypted cookie so um

416
00:16:23,360 --> 00:16:25,600
but this is kind of not your business

417
00:16:25,600 --> 00:16:29,120
this is a ohg internally

418
00:16:29,120 --> 00:16:31,040
so there are also a few other things for

419
00:16:31,040 --> 00:16:33,600
example uh here the transparent header

420
00:16:33,600 --> 00:16:34,480
this is

421
00:16:34,480 --> 00:16:40,160
an id which is generated by oit itself

422
00:16:40,160 --> 00:16:42,639
and it's used with every lock statement

423
00:16:42,639 --> 00:16:45,920
about this request and then forwarded to

424
00:16:45,920 --> 00:16:49,279
the back end so if you also lock this id

425
00:16:49,279 --> 00:16:52,320
then you can really achieve a nice cross

426
00:16:52,320 --> 00:16:54,959
service lock coloration and especially

427
00:16:54,959 --> 00:16:57,680
for larger systems or in larger systems

428
00:16:57,680 --> 00:16:59,920
this gets really important if you run

429
00:16:59,920 --> 00:17:02,320
into issues and i need to debug

430
00:17:02,320 --> 00:17:05,199
something

431
00:17:05,199 --> 00:17:07,039
so that was it for the demo feel free to

432
00:17:07,039 --> 00:17:10,079
check it out by yourself um i'll go back

433
00:17:10,079 --> 00:17:12,640
to the presentations and i think because

434
00:17:12,640 --> 00:17:14,000
um

435
00:17:14,000 --> 00:17:17,599
we started a bit late i'll need to

436
00:17:17,599 --> 00:17:20,000
jump over a few slides

437
00:17:20,000 --> 00:17:22,079
um

438
00:17:22,079 --> 00:17:23,359
but

439
00:17:23,359 --> 00:17:25,760
what i wanted to to show you is here

440
00:17:25,760 --> 00:17:27,119
this

441
00:17:27,119 --> 00:17:28,880
this overview over the designed

442
00:17:28,880 --> 00:17:30,960
principles behind

443
00:17:30,960 --> 00:17:33,919
the overs publication gateway this is

444
00:17:33,919 --> 00:17:36,000
kind of from a user perspective what's

445
00:17:36,000 --> 00:17:38,400
important for them so the first and in

446
00:17:38,400 --> 00:17:40,640
my opinion most important one is that

447
00:17:40,640 --> 00:17:43,280
it's secure by default this means the

448
00:17:43,280 --> 00:17:45,679
default settings default functionalities

449
00:17:45,679 --> 00:17:47,840
and so on are built in a way that they

450
00:17:47,840 --> 00:17:49,919
are kind of follow current best

451
00:17:49,919 --> 00:17:51,280
practices

452
00:17:51,280 --> 00:17:54,960
and lead you as a user to a

453
00:17:54,960 --> 00:17:57,679
kind of zero trust architecture which we

454
00:17:57,679 --> 00:17:59,039
think will be

455
00:17:59,039 --> 00:18:01,360
a good fit for the future it doesn't

456
00:18:01,360 --> 00:18:03,280
mean that if we

457
00:18:03,280 --> 00:18:04,880
add a new feature we

458
00:18:04,880 --> 00:18:06,640
try to design the future in a way that

459
00:18:06,640 --> 00:18:08,240
is uh

460
00:18:08,240 --> 00:18:10,080
hard to misuse

461
00:18:10,080 --> 00:18:12,160
but this sounds really easy but it's

462
00:18:12,160 --> 00:18:14,160
actually quite complicated

463
00:18:14,160 --> 00:18:16,320
uh it also means that we are the gateway

464
00:18:16,320 --> 00:18:18,400
itself is kind of opinionated in some

465
00:18:18,400 --> 00:18:19,520
areas

466
00:18:19,520 --> 00:18:21,520
uh but we know of course that uh there

467
00:18:21,520 --> 00:18:23,280
are always special considerations

468
00:18:23,280 --> 00:18:24,960
especially when it comes to larger

469
00:18:24,960 --> 00:18:26,160
systems

470
00:18:26,160 --> 00:18:28,320
then it's really important for you that

471
00:18:28,320 --> 00:18:31,280
it's built to be extended uh the gateway

472
00:18:31,280 --> 00:18:34,240
itself is based on the java spring stack

473
00:18:34,240 --> 00:18:35,679
so you can

474
00:18:35,679 --> 00:18:38,559
add your own beans if you want

475
00:18:38,559 --> 00:18:39,440
and

476
00:18:39,440 --> 00:18:41,760
add your own functionality and whatever

477
00:18:41,760 --> 00:18:44,000
you want for example if you want to

478
00:18:44,000 --> 00:18:45,919
change the logging system you can do

479
00:18:45,919 --> 00:18:48,559
that if you want to add support for new

480
00:18:48,559 --> 00:18:51,039
authentication provide methods something

481
00:18:51,039 --> 00:18:53,440
else then open id connect or github you

482
00:18:53,440 --> 00:18:55,520
can do that

483
00:18:55,520 --> 00:18:57,760
that's that's very simple i think really

484
00:18:57,760 --> 00:19:00,160
important for for larger systems

485
00:19:00,160 --> 00:19:03,360
the last design principles be behind the

486
00:19:03,360 --> 00:19:05,039
gateway is

487
00:19:05,039 --> 00:19:06,720
um that

488
00:19:06,720 --> 00:19:07,919
um

489
00:19:07,919 --> 00:19:09,760
that it's it's really configuration

490
00:19:09,760 --> 00:19:11,520
based or the whole configuration is

491
00:19:11,520 --> 00:19:14,480
based in this one file i showed you uh

492
00:19:14,480 --> 00:19:17,520
this is important because it allows you

493
00:19:17,520 --> 00:19:19,200
to just take a look at this

494
00:19:19,200 --> 00:19:20,880
configuration file and you know what's

495
00:19:20,880 --> 00:19:23,200
going on so there's no login where you

496
00:19:23,200 --> 00:19:25,840
can lock yourself in and for example add

497
00:19:25,840 --> 00:19:28,720
routes in a graphical way

498
00:19:28,720 --> 00:19:30,640
we believe that this file based

499
00:19:30,640 --> 00:19:32,480
configuration is much better for

500
00:19:32,480 --> 00:19:34,640
transparency and also allows you for

501
00:19:34,640 --> 00:19:36,840
example to add this file to

502
00:19:36,840 --> 00:19:39,840
a kit repo and then for example

503
00:19:39,840 --> 00:19:42,960
automatically deploy it via cicd and i

504
00:19:42,960 --> 00:19:44,640
think this is a really

505
00:19:44,640 --> 00:19:47,280
good way to avoid misconfiguration

506
00:19:47,280 --> 00:19:48,720
vulnerabilities

507
00:19:48,720 --> 00:19:50,559
because the the changes are really

508
00:19:50,559 --> 00:19:53,120
transparent

509
00:19:53,120 --> 00:19:55,439
um

510
00:19:55,840 --> 00:20:01,280
so we have five more minutes so um

511
00:20:02,000 --> 00:20:04,320
just very briefly to mention uh

512
00:20:04,320 --> 00:20:05,679
internally we have a non-blocking

513
00:20:05,679 --> 00:20:08,480
network stack this is important for when

514
00:20:08,480 --> 00:20:10,960
you have a lot of concurrent requests uh

515
00:20:10,960 --> 00:20:13,440
we didn't implement it by ourselves this

516
00:20:13,440 --> 00:20:16,000
is based by on on-screen cloud gateway

517
00:20:16,000 --> 00:20:18,400
um which is really a major

518
00:20:18,400 --> 00:20:21,280
module um

519
00:20:21,280 --> 00:20:23,120
a module

520
00:20:23,120 --> 00:20:26,240
gateway product that provides this hdpf

521
00:20:26,240 --> 00:20:29,039
or warping functionality and we have a

522
00:20:29,039 --> 00:20:31,039
stateless architecture

523
00:20:31,039 --> 00:20:33,280
wherever it works there are a few areas

524
00:20:33,280 --> 00:20:35,520
like server side lockouts there for that

525
00:20:35,520 --> 00:20:38,000
we still need a little bit of state

526
00:20:38,000 --> 00:20:40,559
between different nodes but

527
00:20:40,559 --> 00:20:43,760
we keep that we try to keep that minimal

528
00:20:43,760 --> 00:20:46,080
but that's one topic we really are

529
00:20:46,080 --> 00:20:48,559
working on right now

530
00:20:48,559 --> 00:20:51,919
if you would want to use it the two

531
00:20:51,919 --> 00:20:53,200
usage models

532
00:20:53,200 --> 00:20:55,200
the first is that you run it off out of

533
00:20:55,200 --> 00:20:57,440
the box and i think for

534
00:20:57,440 --> 00:20:59,760
small to medium sized project this is

535
00:20:59,760 --> 00:21:01,200
totally fine

536
00:21:01,200 --> 00:21:04,240
then you just can run the docu image or

537
00:21:04,240 --> 00:21:06,880
there's also a java char release if you

538
00:21:06,880 --> 00:21:08,400
want to use that

539
00:21:08,400 --> 00:21:10,240
then you just need to tell

540
00:21:10,240 --> 00:21:12,159
the gateway

541
00:21:12,159 --> 00:21:14,000
where to find the configuration file and

542
00:21:14,000 --> 00:21:18,480
it will start up if you want to extend

543
00:21:18,480 --> 00:21:22,000
you need to use java and springboot

544
00:21:22,000 --> 00:21:24,320
then you can create your own

545
00:21:24,320 --> 00:21:26,480
project and

546
00:21:26,480 --> 00:21:29,120
use this this annotation enable bus

547
00:21:29,120 --> 00:21:30,799
publication gateway

548
00:21:30,799 --> 00:21:33,200
and

549
00:21:33,280 --> 00:21:36,480
then directly add your own functionality

550
00:21:36,480 --> 00:21:39,120
add your own spring filters can add your

551
00:21:39,120 --> 00:21:42,959
own spring beans and whatever you want

552
00:21:43,039 --> 00:21:45,200
about the current state um it's still

553
00:21:45,200 --> 00:21:47,520
working progress need to say that uh but

554
00:21:47,520 --> 00:21:51,440
we expect to to deliver a first um

555
00:21:51,440 --> 00:21:54,080
a productive usable version as soon as

556
00:21:54,080 --> 00:21:57,280
we have built this clustering mechanism

557
00:21:57,280 --> 00:22:00,320
um the latest version it contains all

558
00:22:00,320 --> 00:22:02,480
the features that i presented right now

559
00:22:02,480 --> 00:22:05,200
in this abstract um except of this

560
00:22:05,200 --> 00:22:07,280
cluster support i mentioned so if you

561
00:22:07,280 --> 00:22:10,000
want to try it out feel free uh pull it

562
00:22:10,000 --> 00:22:12,559
from docker hub or the

563
00:22:12,559 --> 00:22:14,559
check out the github page

564
00:22:14,559 --> 00:22:18,640
um also if you want to find out more um

565
00:22:18,640 --> 00:22:20,240
check out our github page there we have

566
00:22:20,240 --> 00:22:23,120
a lot of code samples documentation

567
00:22:23,120 --> 00:22:25,360
even documentation how to extend it and

568
00:22:25,360 --> 00:22:28,640
so on and how to integrate it um

569
00:22:28,640 --> 00:22:30,640
please also store it on github that's uh

570
00:22:30,640 --> 00:22:32,960
something which really helps us to get

571
00:22:32,960 --> 00:22:35,520
some more recipes visibility

572
00:22:35,520 --> 00:22:37,280
and also you can check out the overs

573
00:22:37,280 --> 00:22:39,360
website uh there there's also some

574
00:22:39,360 --> 00:22:41,919
additional information about the project

575
00:22:41,919 --> 00:22:44,480
um at that uh

576
00:22:44,480 --> 00:22:46,240
point i also want to mention we're

577
00:22:46,240 --> 00:22:48,640
always looking for contributors uh that

578
00:22:48,640 --> 00:22:51,600
doesn't only need to be a coding um you

579
00:22:51,600 --> 00:22:53,600
can also just write us a note what you

580
00:22:53,600 --> 00:22:56,799
like maybe feedback maybe ideas what

581
00:22:56,799 --> 00:22:58,799
what feature you would expect from such

582
00:22:58,799 --> 00:22:59,520
a

583
00:22:59,520 --> 00:23:01,280
gateway

584
00:23:01,280 --> 00:23:03,679
and if you want to code feel free we are

585
00:23:03,679 --> 00:23:05,600
always happy if we have new

586
00:23:05,600 --> 00:23:07,919
open source contributors sometimes you

587
00:23:07,919 --> 00:23:10,320
also have or even though even if it's

588
00:23:10,320 --> 00:23:12,080
just a little thing but that that's

589
00:23:12,080 --> 00:23:14,080
really exciting if someone

590
00:23:14,080 --> 00:23:16,640
develops something that's a feature uh

591
00:23:16,640 --> 00:23:17,840
so please

592
00:23:17,840 --> 00:23:19,919
if you have questions about the

593
00:23:19,919 --> 00:23:22,240
development uh please don't hesitate to

594
00:23:22,240 --> 00:23:24,960
contact one of the project leaders zoe

595
00:23:24,960 --> 00:23:27,440
to me or potty

596
00:23:27,440 --> 00:23:29,919
uh yeah that's it i'll hang around in

597
00:23:29,919 --> 00:23:32,880
the slack for questions um

598
00:23:32,880 --> 00:23:35,200
feel free to join and uh yeah we'll be

599
00:23:35,200 --> 00:23:39,559
happy to answer some questions

