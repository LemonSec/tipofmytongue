1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:07,919 --> 00:00:10,160
hey and welcome to the session everyone

3
00:00:10,160 --> 00:00:11,840
so today the topic that i'm going to be

4
00:00:11,840 --> 00:00:14,240
talking about today is

5
00:00:14,240 --> 00:00:16,640
the basics of how to conduct a security

6
00:00:16,640 --> 00:00:20,560
code review so is the process of

7
00:00:20,560 --> 00:00:22,640
how to find vulnerabilities by looking

8
00:00:22,640 --> 00:00:25,119
at source code and you might notice that

9
00:00:25,119 --> 00:00:27,439
the title says for both developers and

10
00:00:27,439 --> 00:00:29,920
penetration testers this is because i

11
00:00:29,920 --> 00:00:32,479
believe that this will be a very useful

12
00:00:32,479 --> 00:00:34,399
skill for you no matter which side of

13
00:00:34,399 --> 00:00:36,559
security you're on right so if you're a

14
00:00:36,559 --> 00:00:38,480
developer learning how to find

15
00:00:38,480 --> 00:00:40,559
vulnerabilities in your own code can

16
00:00:40,559 --> 00:00:42,320
enable you to

17
00:00:42,320 --> 00:00:44,480
write more secure code in the future and

18
00:00:44,480 --> 00:00:47,360
if you're a penetration tester then by

19
00:00:47,360 --> 00:00:49,920
learning how vulnerabilities manifest in

20
00:00:49,920 --> 00:00:51,920
source code you can learn to conduct

21
00:00:51,920 --> 00:00:54,800
deeper and better analysis and source

22
00:00:54,800 --> 00:00:57,199
code would be another way that you can

23
00:00:57,199 --> 00:00:59,440
uncover vulnerabilities in the programs

24
00:00:59,440 --> 00:01:01,120
of your auditing

25
00:01:01,120 --> 00:01:04,640
so let's get started

26
00:01:04,640 --> 00:01:07,600
so first hi my name is vicky i am a

27
00:01:07,600 --> 00:01:10,400
developer and a penetration tester and i

28
00:01:10,400 --> 00:01:12,479
currently work at a company called shift

29
00:01:12,479 --> 00:01:14,880
left as their developer evangelist

30
00:01:14,880 --> 00:01:17,439
i'm also the author of a book called bug

31
00:01:17,439 --> 00:01:19,759
bounty boot camp which aims to help

32
00:01:19,759 --> 00:01:22,240
beginners get into bug bounties and web

33
00:01:22,240 --> 00:01:24,479
application hacking and you can find me

34
00:01:24,479 --> 00:01:28,360
on twitter at vickiely7

35
00:01:29,040 --> 00:01:32,320
and so first of all before we jump into

36
00:01:32,320 --> 00:01:34,240
actually reviewing some code let's first

37
00:01:34,240 --> 00:01:36,000
talk about the agenda that we'll be

38
00:01:36,000 --> 00:01:37,680
we're going to be doing today

39
00:01:37,680 --> 00:01:39,920
so we're going to be talking about

40
00:01:39,920 --> 00:01:42,720
manual code reviews that is

41
00:01:42,720 --> 00:01:44,880
you're diving into code yourself and

42
00:01:44,880 --> 00:01:46,560
trying to find

43
00:01:46,560 --> 00:01:49,040
vulnerabilities in the code without

44
00:01:49,040 --> 00:01:50,640
using any tools

45
00:01:50,640 --> 00:01:52,640
and we're going to be talking about why

46
00:01:52,640 --> 00:01:54,720
you might want to learn how to do that

47
00:01:54,720 --> 00:01:56,479
despite you know all the automate

48
00:01:56,479 --> 00:01:59,119
automative tools available to you today

49
00:01:59,119 --> 00:02:01,439
and then we're going to jump into how do

50
00:02:01,439 --> 00:02:02,320
you actually

51
00:02:02,320 --> 00:02:04,399
prepare for a source code review um what

52
00:02:04,399 --> 00:02:06,240
kind of tools do you need

53
00:02:06,240 --> 00:02:08,000
what kind of prerequisite knowledge and

54
00:02:08,000 --> 00:02:10,399
you need to study up on before you jump

55
00:02:10,399 --> 00:02:12,800
into your first security code review

56
00:02:12,800 --> 00:02:14,879
and then we're going to actually dive

57
00:02:14,879 --> 00:02:17,120
into the process of reviewing code and

58
00:02:17,120 --> 00:02:19,840
i'm going to show you some examples of

59
00:02:19,840 --> 00:02:22,959
finding a few vulnerabilities in the um

60
00:02:22,959 --> 00:02:24,720
an example application that we're going

61
00:02:24,720 --> 00:02:27,280
to be looking at

62
00:02:27,280 --> 00:02:29,520
so first of all let's

63
00:02:29,520 --> 00:02:31,760
talk a little bit about why security

64
00:02:31,760 --> 00:02:35,519
code review is such a valuable skill

65
00:02:35,519 --> 00:02:37,200
so um

66
00:02:37,200 --> 00:02:40,640
a lot of application security issues are

67
00:02:40,640 --> 00:02:42,400
actually derived from

68
00:02:42,400 --> 00:02:45,599
insecure coding practices right like um

69
00:02:45,599 --> 00:02:48,239
sql injections for example is caused by

70
00:02:48,239 --> 00:02:52,319
a lack of or improper input validation

71
00:02:52,319 --> 00:02:54,959
and issues like cross-site scripting and

72
00:02:54,959 --> 00:02:56,640
different kinds of injection can be

73
00:02:56,640 --> 00:02:57,760
caused by

74
00:02:57,760 --> 00:03:00,319
a lack of output encoding or a lack of

75
00:03:00,319 --> 00:03:02,480
input validation

76
00:03:02,480 --> 00:03:04,640
and issues like insecure direct object

77
00:03:04,640 --> 00:03:05,920
references

78
00:03:05,920 --> 00:03:09,280
or eye doors or information leaks are

79
00:03:09,280 --> 00:03:12,080
often caused by

80
00:03:12,080 --> 00:03:14,159
missing access control

81
00:03:14,159 --> 00:03:16,560
and issues like server-side request

82
00:03:16,560 --> 00:03:19,840
forgery they're often caused by weak or

83
00:03:19,840 --> 00:03:21,680
missing reg extracts

84
00:03:21,680 --> 00:03:24,560
right so all these vulnerabilities

85
00:03:24,560 --> 00:03:26,159
actually have

86
00:03:26,159 --> 00:03:28,640
root causes there are very easily

87
00:03:28,640 --> 00:03:31,440
identified in source code itself so one

88
00:03:31,440 --> 00:03:34,000
of the easiest ways to

89
00:03:34,000 --> 00:03:36,640
actually find these security issues is

90
00:03:36,640 --> 00:03:39,040
by diving into source code instead of

91
00:03:39,040 --> 00:03:40,879
you know using

92
00:03:40,879 --> 00:03:42,400
dynamic testing

93
00:03:42,400 --> 00:03:45,120
tools or using penetration testing teams

94
00:03:45,120 --> 00:03:47,120
it's much much easier to just look at

95
00:03:47,120 --> 00:03:49,360
source code and

96
00:03:49,360 --> 00:03:52,400
see if any of these vulnerabilities

97
00:03:52,400 --> 00:03:54,720
their signatures are

98
00:03:54,720 --> 00:03:56,959
happening within the source code

99
00:03:56,959 --> 00:03:59,519
and this is like one of the easiest ways

100
00:03:59,519 --> 00:04:02,720
to find vulnerabilities

101
00:04:02,720 --> 00:04:05,360
and second of all i'm also a huge

102
00:04:05,360 --> 00:04:06,959
proponent of

103
00:04:06,959 --> 00:04:09,360
learning to read source code and

104
00:04:09,360 --> 00:04:11,599
learning to identify vulnerabilities in

105
00:04:11,599 --> 00:04:13,760
order to become a better penetration

106
00:04:13,760 --> 00:04:16,000
tester or a better developer

107
00:04:16,000 --> 00:04:17,279
right because

108
00:04:17,279 --> 00:04:19,839
throughout the process of reviewing the

109
00:04:19,839 --> 00:04:22,639
code manually to find security issues

110
00:04:22,639 --> 00:04:24,720
you'll learn a lot about different

111
00:04:24,720 --> 00:04:27,280
vulnerabilities as well as how they

112
00:04:27,280 --> 00:04:29,120
manifest in source code and how they

113
00:04:29,120 --> 00:04:30,320
manifest

114
00:04:30,320 --> 00:04:32,800
in so different programming languages

115
00:04:32,800 --> 00:04:35,520
different environments and so on and as

116
00:04:35,520 --> 00:04:36,639
a result

117
00:04:36,639 --> 00:04:39,360
you'll learn very deeply about security

118
00:04:39,360 --> 00:04:42,560
issues and you'll learn to write more

119
00:04:42,560 --> 00:04:44,880
secure code in the future right and if

120
00:04:44,880 --> 00:04:46,880
you're a penetration tester you'll

121
00:04:46,880 --> 00:04:49,199
understand the root causes of the

122
00:04:49,199 --> 00:04:51,440
vulnerabilities that you're looking for

123
00:04:51,440 --> 00:04:54,160
much much deeply and that will enable

124
00:04:54,160 --> 00:04:55,520
you to

125
00:04:55,520 --> 00:04:57,680
conduct deeper and more comprehensive

126
00:04:57,680 --> 00:04:59,759
analysis in the future as a penetration

127
00:04:59,759 --> 00:05:02,639
tester as well

128
00:05:03,120 --> 00:05:06,720
so let's get started preparing for a

129
00:05:06,720 --> 00:05:08,960
source code review

130
00:05:08,960 --> 00:05:11,680
and so first of all

131
00:05:11,680 --> 00:05:13,680
uh what are the tools that you need in

132
00:05:13,680 --> 00:05:15,600
order to conduct a source code review

133
00:05:15,600 --> 00:05:16,800
efficiently

134
00:05:16,800 --> 00:05:19,199
you actually don't need that many tools

135
00:05:19,199 --> 00:05:22,479
one of the absolute essential tools is a

136
00:05:22,479 --> 00:05:25,280
good code editor or an ide that you can

137
00:05:25,280 --> 00:05:27,360
use to interact with the code and there

138
00:05:27,360 --> 00:05:28,560
are three things that you should be

139
00:05:28,560 --> 00:05:31,759
looking for for a good

140
00:05:31,759 --> 00:05:33,199
ide

141
00:05:33,199 --> 00:05:35,600
for a source code review and one of them

142
00:05:35,600 --> 00:05:38,400
is that you want an id or code editor

143
00:05:38,400 --> 00:05:41,520
that allows for global searches across

144
00:05:41,520 --> 00:05:44,160
the code base you'll see why later

145
00:05:44,160 --> 00:05:45,520
because we'll be

146
00:05:45,520 --> 00:05:48,000
searching for vulnerable signatures in

147
00:05:48,000 --> 00:05:51,280
code across the entire project and a lot

148
00:05:51,280 --> 00:05:52,720
of the times

149
00:05:52,720 --> 00:05:53,759
um

150
00:05:53,759 --> 00:05:54,880
that's that's how you find

151
00:05:54,880 --> 00:05:56,639
vulnerabilities right so you want the

152
00:05:56,639 --> 00:05:59,600
ability to be able to search for a

153
00:05:59,600 --> 00:06:01,520
particular signature or a particular

154
00:06:01,520 --> 00:06:04,080
function across the entire code base

155
00:06:04,080 --> 00:06:07,440
and when you're searching for vulnerable

156
00:06:07,440 --> 00:06:10,000
vulnerable patterns in code you're not

157
00:06:10,000 --> 00:06:11,039
always

158
00:06:11,039 --> 00:06:13,199
looking for a specific string or a

159
00:06:13,199 --> 00:06:16,080
specific like a very fixed thing right

160
00:06:16,080 --> 00:06:17,919
sometimes you'll be looking for patch

161
00:06:17,919 --> 00:06:20,880
string patterns instead and that's when

162
00:06:20,880 --> 00:06:23,600
regex searches come in handy so you'll

163
00:06:23,600 --> 00:06:26,160
want a code editor that comes with the

164
00:06:26,160 --> 00:06:28,639
regic search functionality as well

165
00:06:28,639 --> 00:06:30,720
and then third of all

166
00:06:30,720 --> 00:06:32,960
is that you want the ability to be able

167
00:06:32,960 --> 00:06:35,039
to cross reference multiple files at the

168
00:06:35,039 --> 00:06:37,120
same time because a lot of the times

169
00:06:37,120 --> 00:06:38,639
when you're trying to confirm that a

170
00:06:38,639 --> 00:06:41,120
vulnerability actually exists you will

171
00:06:41,120 --> 00:06:45,199
need to crash reference several the same

172
00:06:45,199 --> 00:06:46,880
several occurrences of the same

173
00:06:46,880 --> 00:06:50,479
functionality or you'll want to see

174
00:06:50,479 --> 00:06:52,240
where the data is going where the code

175
00:06:52,240 --> 00:06:56,240
is going so you'll need to open the same

176
00:06:56,240 --> 00:06:58,240
your you'll need to open several

177
00:06:58,240 --> 00:07:00,479
different files at the same time and

178
00:07:00,479 --> 00:07:03,280
that really make things easier for you

179
00:07:03,280 --> 00:07:05,280
so these are the three basic criterias

180
00:07:05,280 --> 00:07:06,880
that you should be looking for and it's

181
00:07:06,880 --> 00:07:08,960
really not that hard to find i'll be

182
00:07:08,960 --> 00:07:11,520
using sublime text

183
00:07:11,520 --> 00:07:13,759
today but you're free to use any code

184
00:07:13,759 --> 00:07:16,880
editor or an ide that you like

185
00:07:16,880 --> 00:07:20,240
and second i'm also a big fan of having

186
00:07:20,240 --> 00:07:22,240
some sort of scripting tool or the

187
00:07:22,240 --> 00:07:25,199
terminal on hand just so that i can run

188
00:07:25,199 --> 00:07:28,400
tests on the code base and really verify

189
00:07:28,400 --> 00:07:31,520
my hypotheses about how the code is

190
00:07:31,520 --> 00:07:34,639
actually working

191
00:07:34,720 --> 00:07:38,000
and so before we go on let's first

192
00:07:38,000 --> 00:07:40,800
discuss a few code analysis concepts

193
00:07:40,800 --> 00:07:43,520
that you need to understand

194
00:07:43,520 --> 00:07:45,680
so in the code analysis world

195
00:07:45,680 --> 00:07:48,560
a source refers to the code that allows

196
00:07:48,560 --> 00:07:50,720
a vulnerability to happen

197
00:07:50,720 --> 00:07:53,520
whereas a sink refers to where the

198
00:07:53,520 --> 00:07:55,840
vulnerability actually happens

199
00:07:55,840 --> 00:07:58,639
right let's illustrate this by looking

200
00:07:58,639 --> 00:08:01,280
at a vulnerability take a command

201
00:08:01,280 --> 00:08:03,520
injection for example

202
00:08:03,520 --> 00:08:06,319
a source in this case would be a

203
00:08:06,319 --> 00:08:08,879
function that takes in user input

204
00:08:08,879 --> 00:08:11,120
whereas a sink on the other hand would

205
00:08:11,120 --> 00:08:13,759
be a function that executes system

206
00:08:13,759 --> 00:08:15,199
commands

207
00:08:15,199 --> 00:08:16,560
so if

208
00:08:16,560 --> 00:08:19,039
untrusted user input can get from this

209
00:08:19,039 --> 00:08:19,919
source

210
00:08:19,919 --> 00:08:20,800
to

211
00:08:20,800 --> 00:08:22,479
the sync

212
00:08:22,479 --> 00:08:24,400
without proper sanitization or

213
00:08:24,400 --> 00:08:26,960
validation then a command injection

214
00:08:26,960 --> 00:08:28,720
vulnerability exists

215
00:08:28,720 --> 00:08:31,120
so many many common vulnerabilities can

216
00:08:31,120 --> 00:08:33,360
actually be identified by tracking this

217
00:08:33,360 --> 00:08:37,120
data flow from appropriate sources to

218
00:08:37,120 --> 00:08:41,240
their corresponding sinks

219
00:08:41,279 --> 00:08:42,799
and so

220
00:08:42,799 --> 00:08:44,399
the second thing that you should prepare

221
00:08:44,399 --> 00:08:46,320
for is that before you actually start

222
00:08:46,320 --> 00:08:48,880
reviewing code for vulnerabilities you

223
00:08:48,880 --> 00:08:51,279
should start by learning what the most

224
00:08:51,279 --> 00:08:53,760
common vulnerability types are for your

225
00:08:53,760 --> 00:08:56,240
application type so that you know what

226
00:08:56,240 --> 00:08:58,959
to look for right for instance if you

227
00:08:58,959 --> 00:09:00,959
are reviewing an

228
00:09:00,959 --> 00:09:03,360
application with many different users

229
00:09:03,360 --> 00:09:06,800
then information leaks might be an issue

230
00:09:06,800 --> 00:09:09,839
and if your application lets the users

231
00:09:09,839 --> 00:09:11,760
interact with the database via their

232
00:09:11,760 --> 00:09:13,200
user input

233
00:09:13,200 --> 00:09:15,600
then you might be looking at

234
00:09:15,600 --> 00:09:18,080
some sql injections for instance

235
00:09:18,080 --> 00:09:20,000
so knowing what the

236
00:09:20,000 --> 00:09:23,040
major vulnerabilities are and getting

237
00:09:23,040 --> 00:09:25,360
familiar with the indicators and the

238
00:09:25,360 --> 00:09:27,760
signatures of those vulnerabilities will

239
00:09:27,760 --> 00:09:29,279
really help you

240
00:09:29,279 --> 00:09:31,440
look for similar patterns in your source

241
00:09:31,440 --> 00:09:32,320
code

242
00:09:32,320 --> 00:09:33,920
so um

243
00:09:33,920 --> 00:09:36,560
also be familiar with what are the

244
00:09:36,560 --> 00:09:38,880
common sources and common things of each

245
00:09:38,880 --> 00:09:40,560
type of vulnerability

246
00:09:40,560 --> 00:09:42,880
right for instance

247
00:09:42,880 --> 00:09:46,080
the signature for uh xml external entity

248
00:09:46,080 --> 00:09:48,480
or an xse vulnerabilities

249
00:09:48,480 --> 00:09:49,279
is

250
00:09:49,279 --> 00:09:50,399
um

251
00:09:50,399 --> 00:09:53,440
passing user supplied xml into a parser

252
00:09:53,440 --> 00:09:56,640
without disabling dtds or external

253
00:09:56,640 --> 00:09:57,839
entities

254
00:09:57,839 --> 00:09:59,120
so

255
00:09:59,120 --> 00:10:00,959
uh you should be

256
00:10:00,959 --> 00:10:03,600
arming yourself with the knowledge of

257
00:10:03,600 --> 00:10:05,760
what these vulnerability looks like in

258
00:10:05,760 --> 00:10:08,160
your applications context

259
00:10:08,160 --> 00:10:09,600
so um

260
00:10:09,600 --> 00:10:10,880
although

261
00:10:10,880 --> 00:10:12,480
like vulnerabilities have these like

262
00:10:12,480 --> 00:10:13,519
very

263
00:10:13,519 --> 00:10:16,160
common very vague

264
00:10:16,160 --> 00:10:18,959
patterns and code these patterns can

265
00:10:18,959 --> 00:10:21,399
look quite different depending on the

266
00:10:21,399 --> 00:10:23,920
programming languages or the libraries

267
00:10:23,920 --> 00:10:25,440
or the frameworks that you're you're

268
00:10:25,440 --> 00:10:27,600
using so learning what the common

269
00:10:27,600 --> 00:10:29,600
vulnerabilities look like

270
00:10:29,600 --> 00:10:32,880
in your specific context would help you

271
00:10:32,880 --> 00:10:35,760
a lot in you know actually spotting

272
00:10:35,760 --> 00:10:37,839
vulnerabilities very accurately in your

273
00:10:37,839 --> 00:10:40,240
source code

274
00:10:40,240 --> 00:10:43,200
so next up this slide is for the

275
00:10:43,200 --> 00:10:45,839
penetration testers if you did not build

276
00:10:45,839 --> 00:10:48,640
the application yourself you should also

277
00:10:48,640 --> 00:10:50,880
try to get familiar with the

278
00:10:50,880 --> 00:10:53,200
functionalities and the components of

279
00:10:53,200 --> 00:10:55,600
the application right what are the

280
00:10:55,600 --> 00:10:57,200
important where are the important

281
00:10:57,200 --> 00:11:01,120
functionalities as well as um what are

282
00:11:01,120 --> 00:11:03,519
the important fun components in the

283
00:11:03,519 --> 00:11:04,800
application

284
00:11:04,800 --> 00:11:06,800
so first you should probably figure out

285
00:11:06,800 --> 00:11:09,440
who the applications users are

286
00:11:09,440 --> 00:11:11,519
what can each user do

287
00:11:11,519 --> 00:11:14,320
what kind of data the application is

288
00:11:14,320 --> 00:11:15,519
processing

289
00:11:15,519 --> 00:11:18,320
as well as you know what are the

290
00:11:18,320 --> 00:11:20,000
business impact and the business

291
00:11:20,000 --> 00:11:22,560
significance of each functionality and

292
00:11:22,560 --> 00:11:24,240
each component

293
00:11:24,240 --> 00:11:26,959
so this will really help you prioritize

294
00:11:26,959 --> 00:11:29,360
your analysis down the line because you

295
00:11:29,360 --> 00:11:32,000
understand what can realistically go

296
00:11:32,000 --> 00:11:34,959
wrong as well as what kind of data

297
00:11:34,959 --> 00:11:37,440
that's the most important for you to be

298
00:11:37,440 --> 00:11:39,279
protecting

299
00:11:39,279 --> 00:11:41,040
because a lot of the times during source

300
00:11:41,040 --> 00:11:43,920
code review it's not very realistic to

301
00:11:43,920 --> 00:11:46,000
read every single line of every single

302
00:11:46,000 --> 00:11:48,000
component in the code right so you

303
00:11:48,000 --> 00:11:49,680
really need to start with the parts of

304
00:11:49,680 --> 00:11:52,480
the application that poses the highest

305
00:11:52,480 --> 00:11:55,760
risk to the applications user as well as

306
00:11:55,760 --> 00:11:58,959
the business itself

307
00:11:59,279 --> 00:12:02,079
so let's start analyzing

308
00:12:02,079 --> 00:12:03,279
some code

309
00:12:03,279 --> 00:12:06,480
so first of all if you are short on time

310
00:12:06,480 --> 00:12:09,120
focusing on searching for the most

311
00:12:09,120 --> 00:12:12,000
common and the most of your issues will

312
00:12:12,000 --> 00:12:15,279
give you the highest roi right and the a

313
00:12:15,279 --> 00:12:18,000
quick way to start doing this is by

314
00:12:18,000 --> 00:12:20,320
searching for the strings the keywords

315
00:12:20,320 --> 00:12:23,120
and the code patterns that are known to

316
00:12:23,120 --> 00:12:25,600
be indicators of common vulnerabilities

317
00:12:25,600 --> 00:12:27,760
or a misconfiguration

318
00:12:27,760 --> 00:12:29,040
for instance

319
00:12:29,040 --> 00:12:31,760
hard coded credentials are a huge issue

320
00:12:31,760 --> 00:12:33,760
right that you can very easily identify

321
00:12:33,760 --> 00:12:35,040
in source code

322
00:12:35,040 --> 00:12:35,839
and

323
00:12:35,839 --> 00:12:38,320
hard coded credentials like hard-coded

324
00:12:38,320 --> 00:12:41,040
api keys encryption keys and database

325
00:12:41,040 --> 00:12:42,399
passwords

326
00:12:42,399 --> 00:12:44,639
they can very easily be identified a lot

327
00:12:44,639 --> 00:12:46,959
of the times by searching for keywords

328
00:12:46,959 --> 00:12:49,519
in the code base just by searching for

329
00:12:49,519 --> 00:12:53,360
keywords like key secret password and so

330
00:12:53,360 --> 00:12:54,480
on

331
00:12:54,480 --> 00:12:57,440
and another vulnerability

332
00:12:57,440 --> 00:12:58,320
that

333
00:12:58,320 --> 00:13:00,480
you can look for this way

334
00:13:00,480 --> 00:13:02,079
is by

335
00:13:02,079 --> 00:13:04,000
searching for unchecked use of dangerous

336
00:13:04,000 --> 00:13:06,399
functionalities so search for the code

337
00:13:06,399 --> 00:13:08,639
based form the use of dangerous

338
00:13:08,639 --> 00:13:11,200
functions and see if they are reachable

339
00:13:11,200 --> 00:13:13,760
by user control data right so for

340
00:13:13,760 --> 00:13:15,920
instance you can search for strings like

341
00:13:15,920 --> 00:13:19,519
system and eval since these are common

342
00:13:19,519 --> 00:13:21,279
sinks for command injection

343
00:13:21,279 --> 00:13:24,000
vulnerabilities

344
00:13:24,000 --> 00:13:24,880
so

345
00:13:24,880 --> 00:13:26,959
let's um

346
00:13:26,959 --> 00:13:29,279
look at an example let's actually jump

347
00:13:29,279 --> 00:13:31,519
into a vulnerable code base and search

348
00:13:31,519 --> 00:13:33,680
for some vulnerabilities there

349
00:13:33,680 --> 00:13:35,200
and the

350
00:13:35,200 --> 00:13:36,560
repository that we're going to be

351
00:13:36,560 --> 00:13:38,800
looking at today is called target java

352
00:13:38,800 --> 00:13:41,519
and here's the link here feel free to

353
00:13:41,519 --> 00:13:44,639
download it and follow along tribal java

354
00:13:44,639 --> 00:13:47,279
is a java application that's seated with

355
00:13:47,279 --> 00:13:49,279
a lot of common vulnerabilities such as

356
00:13:49,279 --> 00:13:51,040
the os top 10

357
00:13:51,040 --> 00:13:53,760
several business logic flaws as well as

358
00:13:53,760 --> 00:13:55,680
data leaks

359
00:13:55,680 --> 00:13:59,638
so let's get started

360
00:14:05,920 --> 00:14:08,720
so we have target java open right here

361
00:14:08,720 --> 00:14:11,600
in sublime text and let's start

362
00:14:11,600 --> 00:14:14,240
searching for some vulnerabilities let's

363
00:14:14,240 --> 00:14:16,959
first look for a hardcoded credential

364
00:14:16,959 --> 00:14:18,160
for instance

365
00:14:18,160 --> 00:14:20,240
so remember i talked about a lot of

366
00:14:20,240 --> 00:14:22,399
hardcoded credentials they can actually

367
00:14:22,399 --> 00:14:24,639
be identified by searching for common

368
00:14:24,639 --> 00:14:28,000
keywords like key or password or string

369
00:14:28,000 --> 00:14:28,880
or

370
00:14:28,880 --> 00:14:33,040
um api key right this is because a lot

371
00:14:33,040 --> 00:14:35,360
of the times when developers hard code

372
00:14:35,360 --> 00:14:37,839
their credentials in the code base they

373
00:14:37,839 --> 00:14:40,000
actually name the variable or global

374
00:14:40,000 --> 00:14:43,360
name after these strings right so a lot

375
00:14:43,360 --> 00:14:46,000
of the times you can simply do a global

376
00:14:46,000 --> 00:14:48,959
search on the entire code base

377
00:14:48,959 --> 00:14:51,519
and see if you see any results

378
00:14:51,519 --> 00:14:53,760
and you can see here that

379
00:14:53,760 --> 00:14:57,040
just right away we find

380
00:14:57,040 --> 00:14:58,560
a pair of

381
00:14:58,560 --> 00:15:02,560
aws access keys right here because of

382
00:15:02,560 --> 00:15:04,240
their global's name global names are

383
00:15:04,240 --> 00:15:05,600
named after

384
00:15:05,600 --> 00:15:07,519
uh the keyword key

385
00:15:07,519 --> 00:15:09,600
and so another thing that we can be

386
00:15:09,600 --> 00:15:11,040
looking for

387
00:15:11,040 --> 00:15:13,040
via like um

388
00:15:13,040 --> 00:15:15,199
my keyword search this way

389
00:15:15,199 --> 00:15:17,680
is that we can search for dangerous

390
00:15:17,680 --> 00:15:20,240
functions and see if there are any

391
00:15:20,240 --> 00:15:22,560
there's anything suspicious there or if

392
00:15:22,560 --> 00:15:24,720
there are any uh vulnerabilities

393
00:15:24,720 --> 00:15:27,519
happening there right so i talked about

394
00:15:27,519 --> 00:15:29,600
uh how come

395
00:15:29,600 --> 00:15:31,920
the use of the function eval

396
00:15:31,920 --> 00:15:34,959
is a common signature for command

397
00:15:34,959 --> 00:15:37,440
injection vulnerabilities right so let's

398
00:15:37,440 --> 00:15:41,279
look for the keyword eval

399
00:15:41,279 --> 00:15:42,399
so

400
00:15:42,399 --> 00:15:44,639
we can see here that

401
00:15:44,639 --> 00:15:48,079
in the file called servlet tarpet.java

402
00:15:48,079 --> 00:15:49,040
and

403
00:15:49,040 --> 00:15:50,959
here is

404
00:15:50,959 --> 00:15:54,639
the use of the function eval

405
00:15:54,639 --> 00:15:57,199
let's go to that line and code right

406
00:15:57,199 --> 00:15:59,599
here

407
00:15:59,759 --> 00:16:03,279
and so a signature of command injection

408
00:16:03,279 --> 00:16:04,560
vulnerabilities

409
00:16:04,560 --> 00:16:07,600
is the use of eval which this function

410
00:16:07,600 --> 00:16:08,800
takes in

411
00:16:08,800 --> 00:16:11,279
input and actually executes it as code

412
00:16:11,279 --> 00:16:13,920
right so a common uh signature of

413
00:16:13,920 --> 00:16:15,839
command instruction vulnerabilities

414
00:16:15,839 --> 00:16:19,120
would be user input being passed into

415
00:16:19,120 --> 00:16:22,079
this eval functionality and you can see

416
00:16:22,079 --> 00:16:23,680
here that this is exactly what's

417
00:16:23,680 --> 00:16:26,720
happening here in the code base is that

418
00:16:26,720 --> 00:16:27,920
the

419
00:16:27,920 --> 00:16:28,880
uh

420
00:16:28,880 --> 00:16:32,160
user user parameter user

421
00:16:32,160 --> 00:16:34,639
provider parameter called module is

422
00:16:34,639 --> 00:16:37,279
passed into eval without any

423
00:16:37,279 --> 00:16:39,920
sanitization or

424
00:16:39,920 --> 00:16:42,800
any sort of safety measure so this is

425
00:16:42,800 --> 00:16:44,320
actually a command injection

426
00:16:44,320 --> 00:16:47,600
vulnerability right here

427
00:16:49,120 --> 00:16:54,000
so let's go back to the slides here

428
00:16:57,440 --> 00:17:00,880
yeah so um using this method you can

429
00:17:00,880 --> 00:17:02,639
very quickly find

430
00:17:02,639 --> 00:17:04,720
a lot of different issues security

431
00:17:04,720 --> 00:17:06,640
issues in your code

432
00:17:06,640 --> 00:17:07,839
um but

433
00:17:07,839 --> 00:17:09,839
what if you have more time

434
00:17:09,839 --> 00:17:11,679
right this kind of string search will

435
00:17:11,679 --> 00:17:14,319
not show you all the vulnerabilities

436
00:17:14,319 --> 00:17:16,480
that is happening in your code base and

437
00:17:16,480 --> 00:17:18,480
it's actually quite insufficient if you

438
00:17:18,480 --> 00:17:20,799
want to find more subtle

439
00:17:20,799 --> 00:17:23,199
more subtle security vulnerabilities

440
00:17:23,199 --> 00:17:25,199
that are happening in your source code

441
00:17:25,199 --> 00:17:26,720
so

442
00:17:26,720 --> 00:17:28,640
what if you have more time right what if

443
00:17:28,640 --> 00:17:31,840
you want to do a more comprehensive

444
00:17:31,840 --> 00:17:34,240
manual code review

445
00:17:34,240 --> 00:17:36,559
so remember i talked about getting

446
00:17:36,559 --> 00:17:38,720
familiar with the functionality and the

447
00:17:38,720 --> 00:17:41,120
components of the application right so

448
00:17:41,120 --> 00:17:43,919
after searching for obvious issues like

449
00:17:43,919 --> 00:17:45,440
hard-coded secrets or the use of

450
00:17:45,440 --> 00:17:48,000
dangerous functions in code by keyword

451
00:17:48,000 --> 00:17:49,039
search

452
00:17:49,039 --> 00:17:52,160
start by analyzing in detail the

453
00:17:52,160 --> 00:17:54,240
different parts of the application that

454
00:17:54,240 --> 00:17:57,440
poses the highest risk to the users and

455
00:17:57,440 --> 00:18:00,400
to the application's business so these

456
00:18:00,400 --> 00:18:03,440
are usually places where the client or

457
00:18:03,440 --> 00:18:05,280
the user gets to interact with the

458
00:18:05,280 --> 00:18:07,679
server because these are the places

459
00:18:07,679 --> 00:18:09,679
where malicious input can enter the

460
00:18:09,679 --> 00:18:11,919
application

461
00:18:11,919 --> 00:18:15,520
so first you can examine the client-side

462
00:18:15,520 --> 00:18:17,600
code for security issues your

463
00:18:17,600 --> 00:18:19,840
client-side code is always something

464
00:18:19,840 --> 00:18:22,400
that you should pay attention to first

465
00:18:22,400 --> 00:18:25,039
because that's where the users interact

466
00:18:25,039 --> 00:18:27,919
with the application first right so

467
00:18:27,919 --> 00:18:30,559
after analyzing client-side code you can

468
00:18:30,559 --> 00:18:33,520
focus on code that deals with user input

469
00:18:33,520 --> 00:18:35,120
on the server side

470
00:18:35,120 --> 00:18:38,000
and so any time the application takes in

471
00:18:38,000 --> 00:18:39,600
user input like

472
00:18:39,600 --> 00:18:43,679
http request parameters http headers or

473
00:18:43,679 --> 00:18:46,320
http request path

474
00:18:46,320 --> 00:18:49,120
these functionalities provide the entry

475
00:18:49,120 --> 00:18:51,360
points for attackers to exploit the

476
00:18:51,360 --> 00:18:53,760
application's vulnerabilities right

477
00:18:53,760 --> 00:18:55,600
so you could dive into these

478
00:18:55,600 --> 00:18:58,320
functionalities in detail and then trace

479
00:18:58,320 --> 00:19:01,039
the data flow of user input from these

480
00:19:01,039 --> 00:19:02,400
functions

481
00:19:02,400 --> 00:19:04,880
to other functions and see if they can

482
00:19:04,880 --> 00:19:07,360
reach dangerous sync functions

483
00:19:07,360 --> 00:19:10,320
so tracing the data flow like this could

484
00:19:10,320 --> 00:19:11,120
um

485
00:19:11,120 --> 00:19:13,360
really help you find more subtle but

486
00:19:13,360 --> 00:19:15,440
common vulnerabilities like stored

487
00:19:15,440 --> 00:19:17,919
cross-site scripting sql injections

488
00:19:17,919 --> 00:19:21,120
um excess ease and so on

489
00:19:21,120 --> 00:19:22,080
and then

490
00:19:22,080 --> 00:19:23,840
you should also review code that

491
00:19:23,840 --> 00:19:25,200
performs

492
00:19:25,200 --> 00:19:26,799
critical functionalities in the

493
00:19:26,799 --> 00:19:29,440
application so this includes

494
00:19:29,440 --> 00:19:32,080
code that deals with authorization you

495
00:19:32,080 --> 00:19:33,760
know authentication

496
00:19:33,760 --> 00:19:36,640
or functionalities that deals with

497
00:19:36,640 --> 00:19:38,559
sensitive data or

498
00:19:38,559 --> 00:19:39,840
any other

499
00:19:39,840 --> 00:19:42,160
logic logic that

500
00:19:42,160 --> 00:19:43,440
that's critical to the business

501
00:19:43,440 --> 00:19:45,600
functions like payment

502
00:19:45,600 --> 00:19:48,160
right so dive into these functionalities

503
00:19:48,160 --> 00:19:50,400
and look at the protection mechanisms

504
00:19:50,400 --> 00:19:52,960
implemented on there and think about how

505
00:19:52,960 --> 00:19:55,760
you can bypass them right so this is

506
00:19:55,760 --> 00:19:56,559
when

507
00:19:56,559 --> 00:19:58,240
it will be really helpful if you think

508
00:19:58,240 --> 00:20:00,160
outside of the box and really think like

509
00:20:00,160 --> 00:20:02,320
an attacker how would you attack your

510
00:20:02,320 --> 00:20:03,679
own code and

511
00:20:03,679 --> 00:20:06,159
could any of the protection mechanism

512
00:20:06,159 --> 00:20:08,559
implemented on your code base be

513
00:20:08,559 --> 00:20:10,480
bypassed in any way

514
00:20:10,480 --> 00:20:12,960
at the same time this is also a good

515
00:20:12,960 --> 00:20:14,240
time to

516
00:20:14,240 --> 00:20:16,799
look at the code and check how business

517
00:20:16,799 --> 00:20:18,840
and user data is being

518
00:20:18,840 --> 00:20:21,679
transported and is any sensitive

519
00:20:21,679 --> 00:20:24,480
information being transported and stored

520
00:20:24,480 --> 00:20:26,960
safely

521
00:20:27,760 --> 00:20:28,559
so

522
00:20:28,559 --> 00:20:31,520
let's look at another example right i i

523
00:20:31,520 --> 00:20:33,679
understand that this is all quite vague

524
00:20:33,679 --> 00:20:36,400
and the best way to really showcase how

525
00:20:36,400 --> 00:20:38,720
you actually do this is by looking at

526
00:20:38,720 --> 00:20:41,520
some code so let's jump back

527
00:20:41,520 --> 00:20:42,880
to

528
00:20:42,880 --> 00:20:44,720
um to

529
00:20:44,720 --> 00:20:48,840
our code base here

530
00:20:53,679 --> 00:20:55,679
so i talked about diving into the

531
00:20:55,679 --> 00:20:58,159
sensitive functionality in code right

532
00:20:58,159 --> 00:21:00,240
and the sensitive functionality that

533
00:21:00,240 --> 00:21:02,720
we're going to be talking about today

534
00:21:02,720 --> 00:21:03,600
is

535
00:21:03,600 --> 00:21:07,440
in this file called orderstatus.java

536
00:21:07,440 --> 00:21:09,360
so what this file is that what this

537
00:21:09,360 --> 00:21:12,080
functionality is actually doing is that

538
00:21:12,080 --> 00:21:14,400
first it's taking

539
00:21:14,400 --> 00:21:18,159
a request parameter from the user called

540
00:21:18,159 --> 00:21:21,360
um called the order id here

541
00:21:21,360 --> 00:21:24,480
and then it's passing it into

542
00:21:24,480 --> 00:21:26,480
a sql statement

543
00:21:26,480 --> 00:21:29,679
in order to retrieve the order details

544
00:21:29,679 --> 00:21:32,559
associated with that order id

545
00:21:32,559 --> 00:21:34,400
and then finally

546
00:21:34,400 --> 00:21:37,440
it is returning the order details to the

547
00:21:37,440 --> 00:21:38,720
user

548
00:21:38,720 --> 00:21:41,200
so it's called the order status.java

549
00:21:41,200 --> 00:21:42,320
right this

550
00:21:42,320 --> 00:21:43,520
enables

551
00:21:43,520 --> 00:21:46,080
users to check their order status by

552
00:21:46,080 --> 00:21:48,720
submitting a request to the server

553
00:21:48,720 --> 00:21:51,679
so let's just take um a quick like three

554
00:21:51,679 --> 00:21:53,440
to five seconds to think about what

555
00:21:53,440 --> 00:21:55,360
could go wrong in a functionality like

556
00:21:55,360 --> 00:21:58,600
this one

557
00:22:00,240 --> 00:22:02,480
so first of all

558
00:22:02,480 --> 00:22:04,480
um because the

559
00:22:04,480 --> 00:22:07,039
because the uh this this functionality

560
00:22:07,039 --> 00:22:10,559
is using user input and inserting in

561
00:22:10,559 --> 00:22:13,600
into a sql statement we could suspect

562
00:22:13,600 --> 00:22:16,080
that it might be vulnerable to sql

563
00:22:16,080 --> 00:22:17,600
injection right

564
00:22:17,600 --> 00:22:20,559
and so this is exactly what happens here

565
00:22:20,559 --> 00:22:22,080
you can see here

566
00:22:22,080 --> 00:22:24,960
that the user id is passed into a sql

567
00:22:24,960 --> 00:22:27,159
statement without any sort of

568
00:22:27,159 --> 00:22:29,919
sanitization or validation

569
00:22:29,919 --> 00:22:31,440
so

570
00:22:31,440 --> 00:22:34,080
this functionality is actually

571
00:22:34,080 --> 00:22:37,280
vulnerable to sql injection right here

572
00:22:37,280 --> 00:22:39,039
and a second thing that we should think

573
00:22:39,039 --> 00:22:41,360
about is that since this

574
00:22:41,360 --> 00:22:44,400
uh since this functionality is dealing

575
00:22:44,400 --> 00:22:47,280
with sensitive user data like the order

576
00:22:47,280 --> 00:22:49,679
status actually contains the user's

577
00:22:49,679 --> 00:22:51,200
credit card number

578
00:22:51,200 --> 00:22:53,840
as well as their street addresses and

579
00:22:53,840 --> 00:22:55,360
their phone numbers

580
00:22:55,360 --> 00:22:58,400
we could um try to see if there are any

581
00:22:58,400 --> 00:23:01,200
sensitive info leaks going on

582
00:23:01,200 --> 00:23:02,159
so

583
00:23:02,159 --> 00:23:05,280
here you can see that the order status

584
00:23:05,280 --> 00:23:08,000
including the user's

585
00:23:08,000 --> 00:23:11,360
shipping address credit card number and

586
00:23:11,360 --> 00:23:12,720
email address

587
00:23:12,720 --> 00:23:16,480
is stored into this order right here

588
00:23:16,480 --> 00:23:18,960
and then eventually

589
00:23:18,960 --> 00:23:20,960
underneath that

590
00:23:20,960 --> 00:23:23,520
declaration here we can see that it's

591
00:23:23,520 --> 00:23:26,240
actually this entire object is actually

592
00:23:26,240 --> 00:23:29,120
getting written into logs and this is

593
00:23:29,120 --> 00:23:30,880
really bad because this means that

594
00:23:30,880 --> 00:23:33,600
whoever has access to the log files

595
00:23:33,600 --> 00:23:36,000
would have access to these user info

596
00:23:36,000 --> 00:23:38,480
right here as well so this is really bad

597
00:23:38,480 --> 00:23:41,200
because this is a sensitive info leak

598
00:23:41,200 --> 00:23:44,640
into logs and

599
00:23:44,640 --> 00:23:46,960
the very obvious vulnerability right

600
00:23:46,960 --> 00:23:49,960
here

601
00:23:59,120 --> 00:24:02,320
so tracing the application

602
00:24:02,320 --> 00:24:05,520
the tracing the applications code

603
00:24:05,520 --> 00:24:08,320
from uh from user input and from the

604
00:24:08,320 --> 00:24:11,200
sensitive data points to uh trying to

605
00:24:11,200 --> 00:24:13,600
trace these functionalities to sensitive

606
00:24:13,600 --> 00:24:16,000
syncs would actually help you identify a

607
00:24:16,000 --> 00:24:17,840
lot of different vulnerabilities are

608
00:24:17,840 --> 00:24:19,919
hiding in your code

609
00:24:19,919 --> 00:24:22,400
but as you can see

610
00:24:22,400 --> 00:24:24,400
the process of manually identifying

611
00:24:24,400 --> 00:24:26,400
vulnerability in source code can be

612
00:24:26,400 --> 00:24:28,720
quite tedious and quite time consuming

613
00:24:28,720 --> 00:24:31,039
right and it's really not possible to

614
00:24:31,039 --> 00:24:33,520
review every single line of code that

615
00:24:33,520 --> 00:24:36,400
you write and if you don't look at every

616
00:24:36,400 --> 00:24:39,200
single line of code you can very easily

617
00:24:39,200 --> 00:24:40,880
miss something in the source code or

618
00:24:40,880 --> 00:24:42,240
miss some critical

619
00:24:42,240 --> 00:24:43,440
vulnerability they're hiding in your

620
00:24:43,440 --> 00:24:44,799
source code right

621
00:24:44,799 --> 00:24:47,120
so that's why first you need to really

622
00:24:47,120 --> 00:24:49,600
prioritize your analysis by really

623
00:24:49,600 --> 00:24:51,600
identifying what are the most important

624
00:24:51,600 --> 00:24:53,440
functionalities that exist in this

625
00:24:53,440 --> 00:24:55,520
application and what are the riskiest

626
00:24:55,520 --> 00:24:57,120
functionalities that exist in the

627
00:24:57,120 --> 00:25:00,240
application and focus your analysis um

628
00:25:00,240 --> 00:25:02,159
on those functionalities

629
00:25:02,159 --> 00:25:04,480
and the second thing you can do is

630
00:25:04,480 --> 00:25:06,960
using automated tools right you can use

631
00:25:06,960 --> 00:25:09,600
things like sas tools or static analysis

632
00:25:09,600 --> 00:25:13,120
tools to speed up the progress right

633
00:25:13,120 --> 00:25:15,440
good static analysis tools will help you

634
00:25:15,440 --> 00:25:17,600
identify the vulnerable patterns that we

635
00:25:17,600 --> 00:25:19,200
talked about in this

636
00:25:19,200 --> 00:25:22,240
session so that you can focus on

637
00:25:22,240 --> 00:25:24,640
analyzing the results of the tools and

638
00:25:24,640 --> 00:25:26,880
really analyzing the impact of or the

639
00:25:26,880 --> 00:25:29,039
exploitability of the vulnerability

640
00:25:29,039 --> 00:25:31,679
instead of you know manually finding the

641
00:25:31,679 --> 00:25:33,840
vulnerable patterns yourself

642
00:25:33,840 --> 00:25:36,320
so you can use sas tools

643
00:25:36,320 --> 00:25:38,559
to speed up progress instead of tracing

644
00:25:38,559 --> 00:25:40,080
code yourself

645
00:25:40,080 --> 00:25:42,320
and automation can help you with other

646
00:25:42,320 --> 00:25:44,320
components of the source code review as

647
00:25:44,320 --> 00:25:46,400
well like one of the other things that

648
00:25:46,400 --> 00:25:48,559
we do in source code review is that we

649
00:25:48,559 --> 00:25:50,480
look at all the applications

650
00:25:50,480 --> 00:25:53,360
dependencies and see if there are any

651
00:25:53,360 --> 00:25:54,880
disclose publicly disclosed

652
00:25:54,880 --> 00:25:56,799
vulnerabilities that exist in those

653
00:25:56,799 --> 00:25:58,559
dependencies right

654
00:25:58,559 --> 00:25:59,679
and

655
00:25:59,679 --> 00:26:01,919
software composition analysis tools

656
00:26:01,919 --> 00:26:05,600
actually automates that process it will

657
00:26:05,600 --> 00:26:07,120
keep track of your applications

658
00:26:07,120 --> 00:26:10,080
dependencies and see if any of them are

659
00:26:10,080 --> 00:26:14,080
outdated you can also utilize tools like

660
00:26:14,080 --> 00:26:16,480
secret scanners to help you identify

661
00:26:16,480 --> 00:26:18,880
hard-coded secrets that we talked about

662
00:26:18,880 --> 00:26:21,200
in our code right

663
00:26:21,200 --> 00:26:22,559
so

664
00:26:22,559 --> 00:26:25,039
use these tools wisely can really cut

665
00:26:25,039 --> 00:26:27,919
down on the time that's taking you to

666
00:26:27,919 --> 00:26:30,240
conduct the manual analysis

667
00:26:30,240 --> 00:26:32,640
but the issue is that these code

668
00:26:32,640 --> 00:26:34,320
scanning tools

669
00:26:34,320 --> 00:26:37,360
are never 100 accurate right so the best

670
00:26:37,360 --> 00:26:38,559
way to

671
00:26:38,559 --> 00:26:40,799
secure your software is really to use

672
00:26:40,799 --> 00:26:44,240
these tools first to identify as many as

673
00:26:44,240 --> 00:26:46,000
possible the the suspected

674
00:26:46,000 --> 00:26:48,240
vulnerabilities in your code and then

675
00:26:48,240 --> 00:26:50,559
you can conduct a manual code

676
00:26:50,559 --> 00:26:53,039
review so look at the

677
00:26:53,039 --> 00:26:55,520
the areas of code that seem that are

678
00:26:55,520 --> 00:26:57,760
deemed suspicious by

679
00:26:57,760 --> 00:27:00,640
by your tools and then validate those

680
00:27:00,640 --> 00:27:03,039
results via manual code

681
00:27:03,039 --> 00:27:05,760
manual code analysis and this way you

682
00:27:05,760 --> 00:27:09,120
can ensure that as few bugs as possible

683
00:27:09,120 --> 00:27:11,279
make it to production

684
00:27:11,279 --> 00:27:14,400
so uh congratulations you made it that's

685
00:27:14,400 --> 00:27:16,640
the basic framework that you can use to

686
00:27:16,640 --> 00:27:19,120
conduct your very first security code

687
00:27:19,120 --> 00:27:22,000
analysis but i would like to say that

688
00:27:22,000 --> 00:27:23,440
the stuff that i talked about in this

689
00:27:23,440 --> 00:27:26,240
talk is really just an intro

690
00:27:26,240 --> 00:27:28,480
um it's very basic and it will

691
00:27:28,480 --> 00:27:30,880
definitely not it's a good framework to

692
00:27:30,880 --> 00:27:32,960
get started finding the most common

693
00:27:32,960 --> 00:27:34,399
vulnerabilities and the most severe

694
00:27:34,399 --> 00:27:36,159
vulnerabilities in your code but it's

695
00:27:36,159 --> 00:27:38,720
definitely not um

696
00:27:38,720 --> 00:27:40,480
all that you can do in order to secure

697
00:27:40,480 --> 00:27:41,919
your applications

698
00:27:41,919 --> 00:27:43,440
so if you're interested in learning more

699
00:27:43,440 --> 00:27:45,520
about the topic i welcome you to check

700
00:27:45,520 --> 00:27:48,080
out the os code review guide it is a

701
00:27:48,080 --> 00:27:49,679
very extensive

702
00:27:49,679 --> 00:27:52,320
extensive document on the topic and you

703
00:27:52,320 --> 00:27:55,440
can learn a lot more and a lot more like

704
00:27:55,440 --> 00:27:58,000
vulnerable patterns how do you actually

705
00:27:58,000 --> 00:28:00,240
find different vulnerabilities and code

706
00:28:00,240 --> 00:28:03,200
that way so check out the document and

707
00:28:03,200 --> 00:28:06,679
thank you very much

