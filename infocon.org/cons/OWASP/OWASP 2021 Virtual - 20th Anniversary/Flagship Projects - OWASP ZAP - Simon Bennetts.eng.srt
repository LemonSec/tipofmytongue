1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:07,919 --> 00:00:09,519
and hello everyone

3
00:00:09,519 --> 00:00:11,759
so my name is simon bennetts i'm one of

4
00:00:11,759 --> 00:00:13,920
the zap project leaders and i'm a

5
00:00:13,920 --> 00:00:16,480
distinguished engineer at stackhawk and

6
00:00:16,480 --> 00:00:18,880
today i'm going to talk about osap

7
00:00:18,880 --> 00:00:21,039
2.11.0

8
00:00:21,039 --> 00:00:22,880
so this is not actually released yet but

9
00:00:22,880 --> 00:00:26,320
it's going to be released very soon

10
00:00:26,480 --> 00:00:28,640
so

11
00:00:28,640 --> 00:00:30,560
what i'm going to talk about is i'm

12
00:00:30,560 --> 00:00:32,000
going to give a very quick overview of

13
00:00:32,000 --> 00:00:33,840
zap for people who aren't familiar with

14
00:00:33,840 --> 00:00:34,559
it

15
00:00:34,559 --> 00:00:36,000
then the main thing i'll be going

16
00:00:36,000 --> 00:00:38,000
through the headline changes uh the big

17
00:00:38,000 --> 00:00:41,040
changes that are coming in zap 211

18
00:00:41,040 --> 00:00:43,760
uh then i'll give a timeline of roughly

19
00:00:43,760 --> 00:00:46,239
when we think it'll be out and finally

20
00:00:46,239 --> 00:00:47,680
wrap up

21
00:00:47,680 --> 00:00:49,200
so i'm just gonna

22
00:00:49,200 --> 00:00:50,559
go straight in

23
00:00:50,559 --> 00:00:53,039
so what is zap so if you're not familiar

24
00:00:53,039 --> 00:00:54,960
with zap it is a tool finding

25
00:00:54,960 --> 00:00:57,680
vulnerabilities in web applications

26
00:00:57,680 --> 00:00:59,520
and it's really looking for

27
00:00:59,520 --> 00:01:00,879
vulnerabilities in custom web

28
00:01:00,879 --> 00:01:03,760
applications so unlike some security

29
00:01:03,760 --> 00:01:06,000
scanners we're not really looking for

30
00:01:06,000 --> 00:01:07,280
known vulnerabilities and known

31
00:01:07,280 --> 00:01:09,040
applications you know so you've got a

32
00:01:09,040 --> 00:01:11,680
word press installation

33
00:01:11,680 --> 00:01:12,560
you know

34
00:01:12,560 --> 00:01:15,040
there are better ways of finding known

35
00:01:15,040 --> 00:01:17,119
vulnerabilities with you know wordpress

36
00:01:17,119 --> 00:01:18,240
add-ons

37
00:01:18,240 --> 00:01:20,320
what we're really looking for is new

38
00:01:20,320 --> 00:01:22,320
vulnerabilities so vulnerabilities that

39
00:01:22,320 --> 00:01:23,920
potentially no one has found before in

40
00:01:23,920 --> 00:01:25,680
these applications that's really good

41
00:01:25,680 --> 00:01:27,439
because you can then use it to

42
00:01:27,439 --> 00:01:29,759
test your custom applications even if

43
00:01:29,759 --> 00:01:31,840
they haven't been um tested by anyone

44
00:01:31,840 --> 00:01:34,640
else by any professional pen testers

45
00:01:34,640 --> 00:01:37,680
so it is uh an os flagship project so as

46
00:01:37,680 --> 00:01:39,200
you hopefully know these are the

47
00:01:39,200 --> 00:01:41,439
projects that are most mature and the

48
00:01:41,439 --> 00:01:43,280
ones you're recommended to get started

49
00:01:43,280 --> 00:01:44,960
with

50
00:01:44,960 --> 00:01:47,119
like all leos projects it is completely

51
00:01:47,119 --> 00:01:49,600
free and open source

52
00:01:49,600 --> 00:01:51,920
and it's cross-platform so as long as

53
00:01:51,920 --> 00:01:55,040
you have a jvm you know so it's written

54
00:01:55,040 --> 00:01:56,560
in java mostly in java if you've got a

55
00:01:56,560 --> 00:01:58,640
jvm that'll run and i've actually got it

56
00:01:58,640 --> 00:02:00,240
running on a raspberry pi before

57
00:02:00,240 --> 00:02:03,119
although it wasn't particularly fast

58
00:02:03,119 --> 00:02:05,200
it is well maintained and i'm kind of

59
00:02:05,200 --> 00:02:07,759
making this point because over the years

60
00:02:07,759 --> 00:02:10,239
we've seen a lot of web scanners open

61
00:02:10,239 --> 00:02:12,319
source web scanners come and go

62
00:02:12,319 --> 00:02:14,319
unfortunately most of them have gone so

63
00:02:14,319 --> 00:02:17,680
very few uh web scanner vulnerability

64
00:02:17,680 --> 00:02:20,319
scanners stay around for a long time and

65
00:02:20,319 --> 00:02:21,840
zap is one of the few ones and one of

66
00:02:21,840 --> 00:02:23,599
the very few ones that is actively

67
00:02:23,599 --> 00:02:25,920
maintained at the moment

68
00:02:25,920 --> 00:02:27,680
and it is in fact probably the world's

69
00:02:27,680 --> 00:02:30,239
most frequently used web scanner and

70
00:02:30,239 --> 00:02:32,160
i've been saying this at conferences and

71
00:02:32,160 --> 00:02:33,760
talks for many years and no one's

72
00:02:33,760 --> 00:02:37,280
contradicted me so it must be true

73
00:02:37,280 --> 00:02:38,480
so

74
00:02:38,480 --> 00:02:39,840
these are the headline changes that are

75
00:02:39,840 --> 00:02:42,879
coming in zap 211 and i'm going to go

76
00:02:42,879 --> 00:02:46,399
through each of these in turn

77
00:02:46,560 --> 00:02:48,480
the first one is the automation

78
00:02:48,480 --> 00:02:51,360
framework so introduced this uh zapcon

79
00:02:51,360 --> 00:02:53,440
earlier this year and so it's already

80
00:02:53,440 --> 00:02:56,879
available um but it's we've been increa

81
00:02:56,879 --> 00:02:58,720
improving it and a new version will be

82
00:02:58,720 --> 00:03:01,280
coming out uh with zap211

83
00:03:01,280 --> 00:03:03,840
the whole idea is that

84
00:03:03,840 --> 00:03:06,080
there's one yaml file that defines

85
00:03:06,080 --> 00:03:08,000
everything that's apple do

86
00:03:08,000 --> 00:03:11,360
now zap is already

87
00:03:11,360 --> 00:03:14,239
automation is one of its strengths and

88
00:03:14,239 --> 00:03:15,840
we have

89
00:03:15,840 --> 00:03:17,599
a lot of people use zap in automation

90
00:03:17,599 --> 00:03:19,840
particularly using the package scans and

91
00:03:19,840 --> 00:03:21,200
the api

92
00:03:21,200 --> 00:03:23,360
so why do we have this new automation

93
00:03:23,360 --> 00:03:24,799
framework

94
00:03:24,799 --> 00:03:26,480
well the one thing we found is that the

95
00:03:26,480 --> 00:03:29,440
package scans were actually were very

96
00:03:29,440 --> 00:03:30,720
useful

97
00:03:30,720 --> 00:03:33,040
but they got a little bit complicated uh

98
00:03:33,040 --> 00:03:34,480
there's different ways of configuring

99
00:03:34,480 --> 00:03:36,400
different things and they're also tied

100
00:03:36,400 --> 00:03:37,519
to docker

101
00:03:37,519 --> 00:03:40,239
that's very useful a lot of people use

102
00:03:40,239 --> 00:03:42,560
package scans in docker but they don't

103
00:03:42,560 --> 00:03:44,400
need to it doesn't have to be tied to

104
00:03:44,400 --> 00:03:46,720
docker it's just historical really and

105
00:03:46,720 --> 00:03:48,000
some people want wanted to be able to

106
00:03:48,000 --> 00:03:50,159
use the package scans outside of docker

107
00:03:50,159 --> 00:03:52,560
and they wanted a bit more flexibility

108
00:03:52,560 --> 00:03:54,640
now we also have the api so you can

109
00:03:54,640 --> 00:03:57,360
start zap in demon mode and run the api

110
00:03:57,360 --> 00:03:59,439
and i control it by the api that's

111
00:03:59,439 --> 00:04:01,760
actually what the package scans do

112
00:04:01,760 --> 00:04:04,480
now the api is really powerful but what

113
00:04:04,480 --> 00:04:06,879
we found is it's actually a bit too

114
00:04:06,879 --> 00:04:08,799
complicated for some people

115
00:04:08,799 --> 00:04:10,959
it gives you very fine grain control and

116
00:04:10,959 --> 00:04:13,040
a lot of people don't know how to drive

117
00:04:13,040 --> 00:04:15,200
zap well enough to drive the api

118
00:04:15,200 --> 00:04:16,560
effectively

119
00:04:16,560 --> 00:04:18,639
now the package scans and the api are

120
00:04:18,639 --> 00:04:20,079
not going anywhere we're going to carry

121
00:04:20,079 --> 00:04:21,680
on maintaining those

122
00:04:21,680 --> 00:04:22,560
although

123
00:04:22,560 --> 00:04:23,840
i'll talk a little bit more about the

124
00:04:23,840 --> 00:04:26,400
package scans later on

125
00:04:26,400 --> 00:04:28,800
so the automation framework is

126
00:04:28,800 --> 00:04:31,040
not surprisingly designed for automation

127
00:04:31,040 --> 00:04:32,800
so you can actually run zap from the

128
00:04:32,800 --> 00:04:34,960
command line you can pass it in a yaml

129
00:04:34,960 --> 00:04:37,680
file and then zap will run the set of

130
00:04:37,680 --> 00:04:40,400
jobs you've defined and it will exit so

131
00:04:40,400 --> 00:04:43,040
you don't need the user interface at all

132
00:04:43,040 --> 00:04:44,080
which is what you'd expect for

133
00:04:44,080 --> 00:04:45,520
automation

134
00:04:45,520 --> 00:04:47,520
however it does actually have gui

135
00:04:47,520 --> 00:04:50,000
support as well so it's got you can

136
00:04:50,000 --> 00:04:51,440
actually create

137
00:04:51,440 --> 00:04:54,240
the automation plans and you can run

138
00:04:54,240 --> 00:04:56,400
them and you can diagnose them from

139
00:04:56,400 --> 00:04:57,840
within the gui

140
00:04:57,840 --> 00:05:00,160
and i think this is really important

141
00:05:00,160 --> 00:05:02,000
because that means you could it makes it

142
00:05:02,000 --> 00:05:03,680
a lot easier

143
00:05:03,680 --> 00:05:05,759
if you're trying to test things in an

144
00:05:05,759 --> 00:05:07,840
automated way it's very difficult to see

145
00:05:07,840 --> 00:05:10,080
what's going on and to diagnose problems

146
00:05:10,080 --> 00:05:12,080
but because we've got the gui support

147
00:05:12,080 --> 00:05:13,919
you can try things out

148
00:05:13,919 --> 00:05:15,600
see how they work and make sure

149
00:05:15,600 --> 00:05:17,520
everything's working well before you

150
00:05:17,520 --> 00:05:18,639
actually

151
00:05:18,639 --> 00:05:21,759
export the yaml file and then run that

152
00:05:21,759 --> 00:05:25,840
in in automation from the command line

153
00:05:26,240 --> 00:05:28,160
now one thing that has been requested a

154
00:05:28,160 --> 00:05:30,960
lot is authentication support

155
00:05:30,960 --> 00:05:32,720
i don't think that's going to get in for

156
00:05:32,720 --> 00:05:36,000
211 unfortunately however the automation

157
00:05:36,000 --> 00:05:38,800
framework is an add-on which means we

158
00:05:38,800 --> 00:05:40,720
can update it at any point

159
00:05:40,720 --> 00:05:42,560
um so and that is one of the things

160
00:05:42,560 --> 00:05:43,440
we'll be

161
00:05:43,440 --> 00:05:46,000
focusing on we're already working on it

162
00:05:46,000 --> 00:05:48,000
but that will be a focus so that will be

163
00:05:48,000 --> 00:05:51,600
coming as soon as we can get it done

164
00:05:51,600 --> 00:05:53,440
and i'm now going to give you a quick

165
00:05:53,440 --> 00:05:55,520
demo of it

166
00:05:55,520 --> 00:05:57,758
so

167
00:05:59,600 --> 00:06:03,280
i'll now switch over to zap

168
00:06:03,280 --> 00:06:05,360
and i'll actually shoot switch to this

169
00:06:05,360 --> 00:06:07,280
browser as well so that that gets

170
00:06:07,280 --> 00:06:10,080
hopefully used

171
00:06:10,080 --> 00:06:12,400
so this is zap it doesn't look that much

172
00:06:12,400 --> 00:06:13,680
different

173
00:06:13,680 --> 00:06:15,600
from 210 i'm actually running a dev

174
00:06:15,600 --> 00:06:17,039
version at the moment

175
00:06:17,039 --> 00:06:19,360
because we haven't released 211 and what

176
00:06:19,360 --> 00:06:23,520
you'll find is there is a new automation

177
00:06:23,520 --> 00:06:25,120
tab down here

178
00:06:25,120 --> 00:06:27,039
and what this allows you to do you can

179
00:06:27,039 --> 00:06:29,840
actually create a completely new plan

180
00:06:29,840 --> 00:06:31,360
and these are all the jobs we've got

181
00:06:31,360 --> 00:06:33,600
there but i've actually got a plan that

182
00:06:33,600 --> 00:06:36,000
i've created beforehand

183
00:06:36,000 --> 00:06:39,919
and i should just show you that now

184
00:06:39,919 --> 00:06:43,039
so this is the ammo file um that defines

185
00:06:43,039 --> 00:06:44,560
the plan you can see it's got an

186
00:06:44,560 --> 00:06:46,840
environment and so you have to have a

187
00:06:46,840 --> 00:06:49,840
context and this means that you know

188
00:06:49,840 --> 00:06:51,919
the context is called budget and we've

189
00:06:51,919 --> 00:06:55,440
got the url the top url for budget

190
00:06:55,440 --> 00:06:56,319
and

191
00:06:56,319 --> 00:06:57,520
got a few other parameters then you'll

192
00:06:57,520 --> 00:06:59,039
see a set of jobs

193
00:06:59,039 --> 00:07:01,199
so we've got a

194
00:07:01,199 --> 00:07:04,479
a passive scan configuration and at the

195
00:07:04,479 --> 00:07:05,520
moment what we're doing is we're

196
00:07:05,520 --> 00:07:07,599
actually only scanning things in scope

197
00:07:07,599 --> 00:07:09,680
and we're disabling all the tags because

198
00:07:09,680 --> 00:07:11,440
that speeds things up

199
00:07:11,440 --> 00:07:13,360
then we've got a spider job and that

200
00:07:13,360 --> 00:07:14,720
actually has got very little

201
00:07:14,720 --> 00:07:17,360
configuration because by default it will

202
00:07:17,360 --> 00:07:18,560
just

203
00:07:18,560 --> 00:07:20,160
spider the

204
00:07:20,160 --> 00:07:23,440
first context but it does have a test

205
00:07:23,440 --> 00:07:25,280
so these are something that are kind of

206
00:07:25,280 --> 00:07:28,400
new to zap we've got set of tests and

207
00:07:28,400 --> 00:07:30,479
you can basically test a whole load of

208
00:07:30,479 --> 00:07:31,680
things and

209
00:07:31,680 --> 00:07:33,360
we find this is really useful it really

210
00:07:33,360 --> 00:07:35,680
gives a way to sanity check that your

211
00:07:35,680 --> 00:07:37,520
automation is doing what what you expect

212
00:07:37,520 --> 00:07:38,800
it to be doing

213
00:07:38,800 --> 00:07:41,599
if you're using zap from the desktop you

214
00:07:41,599 --> 00:07:44,479
can see what's going on so you can see

215
00:07:44,479 --> 00:07:46,400
when things are working when they're not

216
00:07:46,400 --> 00:07:48,000
when you're running zap in automation

217
00:07:48,000 --> 00:07:50,319
you don't have that immediate feedback

218
00:07:50,319 --> 00:07:52,560
so what the automation framework

219
00:07:52,560 --> 00:07:55,199
supports is tests which allow you to

220
00:07:55,199 --> 00:07:57,360
sanity check that it's doing what you

221
00:07:57,360 --> 00:07:58,800
expect it to do

222
00:07:58,800 --> 00:08:00,319
in this case we've got a test on the

223
00:08:00,319 --> 00:08:03,919
spider that it finds at least 100 urls

224
00:08:03,919 --> 00:08:06,240
and you'll see we're actually using the

225
00:08:06,240 --> 00:08:08,720
zap statistics so if there's a statistic

226
00:08:08,720 --> 00:08:10,720
that zap maintains then you can put a

227
00:08:10,720 --> 00:08:12,639
test on that

228
00:08:12,639 --> 00:08:14,560
then we have a job which waits for the

229
00:08:14,560 --> 00:08:17,599
passive scan to finish

230
00:08:17,759 --> 00:08:20,560
and then we have

231
00:08:20,560 --> 00:08:22,000
an active scan

232
00:08:22,000 --> 00:08:23,680
now the active scan will actually take

233
00:08:23,680 --> 00:08:25,680
some time so what i've done is i've

234
00:08:25,680 --> 00:08:27,840
created a policy where i've turned

235
00:08:27,840 --> 00:08:30,479
everything off and i've just turned the

236
00:08:30,479 --> 00:08:32,640
cross-site scripting

237
00:08:32,640 --> 00:08:34,799
rule onto medium

238
00:08:34,799 --> 00:08:36,320
and then we have

239
00:08:36,320 --> 00:08:39,599
a reporting job which i'll talk a bit

240
00:08:39,599 --> 00:08:42,399
more about later

241
00:08:42,880 --> 00:08:44,080
so

242
00:08:44,080 --> 00:08:47,680
i will switch back to zap

243
00:08:47,680 --> 00:08:51,199
and i will then open this job

244
00:08:52,800 --> 00:08:54,959
and you'll see down here this is the how

245
00:08:54,959 --> 00:08:57,200
the job is represented

246
00:08:57,200 --> 00:09:00,560
in zap so we can actually go in and we

247
00:09:00,560 --> 00:09:02,399
can edit any of these things so you can

248
00:09:02,399 --> 00:09:04,480
see all the parameters

249
00:09:04,480 --> 00:09:06,880
and you can actually go in and edit the

250
00:09:06,880 --> 00:09:09,920
context if you want so everything here

251
00:09:09,920 --> 00:09:12,880
is editable and you can see that we've

252
00:09:12,880 --> 00:09:14,000
got the

253
00:09:14,000 --> 00:09:15,760
active scan here and the rules and we

254
00:09:15,760 --> 00:09:17,519
can add more rules

255
00:09:17,519 --> 00:09:19,600
we can change them so

256
00:09:19,600 --> 00:09:22,880
you can just edit the um

257
00:09:22,880 --> 00:09:25,440
the yaml file or you can edit

258
00:09:25,440 --> 00:09:28,480
the file within zap within the gui

259
00:09:28,480 --> 00:09:31,279
and i will now run this plan and you'll

260
00:09:31,279 --> 00:09:33,839
see we've started the spider switch back

261
00:09:33,839 --> 00:09:35,120
to the automation tab you'll see the

262
00:09:35,120 --> 00:09:36,480
spiders running

263
00:09:36,480 --> 00:09:38,560
now that's finished and the passive scan

264
00:09:38,560 --> 00:09:39,839
if you look down here at the bottom

265
00:09:39,839 --> 00:09:41,680
that's the passive scan queue which is

266
00:09:41,680 --> 00:09:42,800
going down

267
00:09:42,800 --> 00:09:45,120
so this job is waiting until that gets

268
00:09:45,120 --> 00:09:48,279
to zero

269
00:09:51,839 --> 00:09:54,240
and then it starts the active scan and

270
00:09:54,240 --> 00:09:56,480
we can see that it is just running the

271
00:09:56,480 --> 00:10:00,720
cross-site scripting reflected rule

272
00:10:02,240 --> 00:10:04,640
and there we go it actually there's the

273
00:10:04,640 --> 00:10:07,120
report and the report gets displayed

274
00:10:07,120 --> 00:10:09,040
now normally you wouldn't expect that to

275
00:10:09,040 --> 00:10:12,079
pop up um but what i did was there is

276
00:10:12,079 --> 00:10:14,399
actually an option for displaying report

277
00:10:14,399 --> 00:10:17,200
um in the report job just for for demos

278
00:10:17,200 --> 00:10:18,640
like this

279
00:10:18,640 --> 00:10:21,279
so you can see that that plan ran

280
00:10:21,279 --> 00:10:24,079
and we can actually see that the spider

281
00:10:24,079 --> 00:10:26,480
has one test and that test passed

282
00:10:26,480 --> 00:10:28,480
because it did we actually have a look

283
00:10:28,480 --> 00:10:31,360
at the output here we can see hold we

284
00:10:31,360 --> 00:10:35,279
can see we actually found 126 urls if we

285
00:10:35,279 --> 00:10:36,880
found less than 100 then that would have

286
00:10:36,880 --> 00:10:38,640
failed

287
00:10:38,640 --> 00:10:40,800
and the automation

288
00:10:40,800 --> 00:10:43,600
plans are very configurable

289
00:10:43,600 --> 00:10:45,680
and there's something

290
00:10:45,680 --> 00:10:47,360
so so we're going to count you know this

291
00:10:47,360 --> 00:10:49,680
is what we expect to be the main way

292
00:10:49,680 --> 00:10:52,399
that people will actually automate zap

293
00:10:52,399 --> 00:10:54,560
in the future

294
00:10:54,560 --> 00:10:56,480
so that is the

295
00:10:56,480 --> 00:10:57,920
automation

296
00:10:57,920 --> 00:11:00,920
framework

297
00:11:02,640 --> 00:11:04,640
so now i want to talk about is report

298
00:11:04,640 --> 00:11:06,000
generation

299
00:11:06,000 --> 00:11:09,600
so the reports that are in zap 210 dated

300
00:11:09,600 --> 00:11:12,160
back to paris days um so zap is actually

301
00:11:12,160 --> 00:11:14,320
a fork of an old a very old project

302
00:11:14,320 --> 00:11:16,640
called paris proxy and the reports dated

303
00:11:16,640 --> 00:11:19,440
back to them and they were very basic

304
00:11:19,440 --> 00:11:21,920
and a lot of people um

305
00:11:21,920 --> 00:11:23,760
found they didn't do what they wanted

306
00:11:23,760 --> 00:11:25,600
and we found that we've had some

307
00:11:25,600 --> 00:11:27,839
questionnaires recently we have an

308
00:11:27,839 --> 00:11:30,160
ongoing questionnaire to get feedback

309
00:11:30,160 --> 00:11:31,920
and that one of the things that people

310
00:11:31,920 --> 00:11:33,440
kept on saying the reports weren't very

311
00:11:33,440 --> 00:11:34,480
good

312
00:11:34,480 --> 00:11:37,200
so based on that we created a new report

313
00:11:37,200 --> 00:11:40,240
generation um add-on and this uses the

314
00:11:40,240 --> 00:11:43,519
timely framework so this is a an open

315
00:11:43,519 --> 00:11:45,760
source framework which is very flexible

316
00:11:45,760 --> 00:11:47,360
and very powerful it's actually a

317
00:11:47,360 --> 00:11:48,800
pleasure to work with because i created

318
00:11:48,800 --> 00:11:51,440
some of the templates

319
00:11:51,440 --> 00:11:54,880
and we have a lot more data available

320
00:11:54,880 --> 00:11:56,320
and it's easier to create your own

321
00:11:56,320 --> 00:11:57,360
templates we've got a lot of

322
00:11:57,360 --> 00:11:58,800
instructions around that i said we're

323
00:11:58,800 --> 00:12:01,040
using this time leaf framework uh which

324
00:12:01,040 --> 00:12:03,120
is it's a it's a proper framework rather

325
00:12:03,120 --> 00:12:05,680
than the kind of xslt the option we had

326
00:12:05,680 --> 00:12:07,279
before

327
00:12:07,279 --> 00:12:11,360
and so i will now switch back

328
00:12:11,360 --> 00:12:14,240
so i will actually

329
00:12:14,240 --> 00:12:15,920
show you this example the report that

330
00:12:15,920 --> 00:12:18,560
got generated and we'll see we've got a

331
00:12:18,560 --> 00:12:21,680
chart here um summary of alerts as

332
00:12:21,680 --> 00:12:22,880
before

333
00:12:22,880 --> 00:12:24,560
but then we've got the passing rules so

334
00:12:24,560 --> 00:12:26,399
you can actually include the rules that

335
00:12:26,399 --> 00:12:28,160
we details of all the rules that have

336
00:12:28,160 --> 00:12:30,160
passed you see most of these don't have

337
00:12:30,160 --> 00:12:31,760
a strength because they're passive ones

338
00:12:31,760 --> 00:12:33,760
actually none of all of them will

339
00:12:33,760 --> 00:12:35,519
none of them have a strength

340
00:12:35,519 --> 00:12:36,959
and you can see

341
00:12:36,959 --> 00:12:38,959
there are no other active rules because

342
00:12:38,959 --> 00:12:40,880
the only active rule failed

343
00:12:40,880 --> 00:12:43,519
and then you get details of the site and

344
00:12:43,519 --> 00:12:45,760
you can see we've got some statistics

345
00:12:45,760 --> 00:12:48,560
here about the um

346
00:12:48,560 --> 00:12:51,200
the http response codes

347
00:12:51,200 --> 00:12:54,240
there's no authentication statistics

348
00:12:54,240 --> 00:12:56,079
but you can see the parameters as well

349
00:12:56,079 --> 00:12:58,079
so we've got all this information

350
00:12:58,079 --> 00:13:00,000
and then we go down here we'll see the

351
00:13:00,000 --> 00:13:03,600
alerts and we can actually show

352
00:13:03,600 --> 00:13:06,240
the requests and responses so there's a

353
00:13:06,240 --> 00:13:07,680
lot more data

354
00:13:07,680 --> 00:13:10,000
and if we go back to zap

355
00:13:10,000 --> 00:13:12,480
we will see you can actually

356
00:13:12,480 --> 00:13:14,480
um generate you can generate a report

357
00:13:14,480 --> 00:13:16,560
from zap as well as from your

358
00:13:16,560 --> 00:13:18,800
automation framework and there's a whole

359
00:13:18,800 --> 00:13:20,720
we've got a whole load of different

360
00:13:20,720 --> 00:13:21,839
options

361
00:13:21,839 --> 00:13:24,240
um and we've got different themes for a

362
00:13:24,240 --> 00:13:26,160
lot of these reports and we've got

363
00:13:26,160 --> 00:13:27,279
filters

364
00:13:27,279 --> 00:13:29,279
all sorts of things so this will

365
00:13:29,279 --> 00:13:32,480
actually this replaces the existing

366
00:13:32,480 --> 00:13:34,880
paris reports and all of the other

367
00:13:34,880 --> 00:13:36,800
reporting add-ons on the marketplace as

368
00:13:36,800 --> 00:13:40,560
well which weren't actually maintained

369
00:13:40,560 --> 00:13:46,239
so that is um the reporting add-on

370
00:13:46,959 --> 00:13:49,839
and oh

371
00:13:50,639 --> 00:13:52,959
so

372
00:13:54,160 --> 00:13:55,279
and

373
00:13:55,279 --> 00:13:56,880
i was going to actually

374
00:13:56,880 --> 00:13:59,440
demo that so what i can do

375
00:13:59,440 --> 00:14:00,800
is

376
00:14:00,800 --> 00:14:03,440
i can choose you can see here we've got

377
00:14:03,440 --> 00:14:04,880
all the different sections and the

378
00:14:04,880 --> 00:14:07,839
sections actually depend on which uh

379
00:14:07,839 --> 00:14:10,320
reporting type so we've got a high level

380
00:14:10,320 --> 00:14:11,839
report summary

381
00:14:11,839 --> 00:14:13,360
you see that's got different set of

382
00:14:13,360 --> 00:14:15,279
sections got no themes

383
00:14:15,279 --> 00:14:18,160
and if i generate that report you'll see

384
00:14:18,160 --> 00:14:20,720
it's a very different type of report

385
00:14:20,720 --> 00:14:24,000
so what we have is

386
00:14:24,000 --> 00:14:25,600
the option to

387
00:14:25,600 --> 00:14:27,519
so we've got we have to actually have a

388
00:14:27,519 --> 00:14:29,680
reporting competition and both the high

389
00:14:29,680 --> 00:14:32,160
level report sample and the modern html

390
00:14:32,160 --> 00:14:35,440
report uh were winners of

391
00:14:35,440 --> 00:14:38,399
one that those comp that competition um

392
00:14:38,399 --> 00:14:41,040
and so we've got a traditional reports

393
00:14:41,040 --> 00:14:42,880
if you do want them and we've got a

394
00:14:42,880 --> 00:14:44,480
traditional report with requests and

395
00:14:44,480 --> 00:14:47,839
responses but what it means is we have a

396
00:14:47,839 --> 00:14:49,839
lot more flexibility and it's much

397
00:14:49,839 --> 00:14:51,600
easier to add reports and report

398
00:14:51,600 --> 00:14:53,440
templates and

399
00:14:53,440 --> 00:14:55,600
i think the competition is ending this

400
00:14:55,600 --> 00:14:56,480
month

401
00:14:56,480 --> 00:14:59,600
but if you want to add more um templates

402
00:14:59,600 --> 00:15:01,680
and more themes then please do you know

403
00:15:01,680 --> 00:15:04,079
we definitely want more options

404
00:15:04,079 --> 00:15:07,120
available to you

405
00:15:10,320 --> 00:15:13,920
so the next headline change is

406
00:15:13,920 --> 00:15:15,120
ost

407
00:15:15,120 --> 00:15:19,120
and ost is out of band security testing

408
00:15:19,120 --> 00:15:20,639
so this is where

409
00:15:20,639 --> 00:15:23,519
um we're testing for vulnerabilities

410
00:15:23,519 --> 00:15:26,240
that are potentially not part of which

411
00:15:26,240 --> 00:15:29,440
you don't typically get a response to so

412
00:15:29,440 --> 00:15:32,240
usually the way zap works it will either

413
00:15:32,240 --> 00:15:33,839
do passive scanning or when it does

414
00:15:33,839 --> 00:15:37,680
active scanning it will send a series of

415
00:15:37,680 --> 00:15:40,160
um payloads series of attacks and you'll

416
00:15:40,160 --> 00:15:41,759
expect to be able to tell where there's

417
00:15:41,759 --> 00:15:44,240
a vulnerability based on the responses

418
00:15:44,240 --> 00:15:46,000
to those payloads so there are those

419
00:15:46,000 --> 00:15:47,279
requests

420
00:15:47,279 --> 00:15:49,360
but there are some vulnerabilities that

421
00:15:49,360 --> 00:15:51,839
have called out a band so this could be

422
00:15:51,839 --> 00:15:54,000
where you have another process that's

423
00:15:54,000 --> 00:15:55,680
actually going through and processing

424
00:15:55,680 --> 00:15:58,000
logs and this might run you know

425
00:15:58,000 --> 00:15:59,360
overnight

426
00:15:59,360 --> 00:16:01,199
so it's something where

427
00:16:01,199 --> 00:16:03,360
it won't happen immediately and you

428
00:16:03,360 --> 00:16:05,839
won't get any immediate response if

429
00:16:05,839 --> 00:16:08,399
accurate the the tool zap will not get a

430
00:16:08,399 --> 00:16:10,959
response and what we really need to do

431
00:16:10,959 --> 00:16:12,720
is check to see whether we can actually

432
00:16:12,720 --> 00:16:14,880
call out to another service

433
00:16:14,880 --> 00:16:16,880
so we have actually had

434
00:16:16,880 --> 00:16:18,800
um callbacks we had support for

435
00:16:18,800 --> 00:16:20,800
callbacks in zap already

436
00:16:20,800 --> 00:16:23,519
but obviously they would only work for

437
00:16:23,519 --> 00:16:25,600
if zap was actually running and a lot of

438
00:16:25,600 --> 00:16:27,600
these outer banned vulnerabilities you

439
00:16:27,600 --> 00:16:29,279
actually need a permanent you need a

440
00:16:29,279 --> 00:16:30,959
service running all the time in order to

441
00:16:30,959 --> 00:16:32,480
detect them

442
00:16:32,480 --> 00:16:34,240
now luckily

443
00:16:34,240 --> 00:16:36,560
so we had a google summer of code

444
00:16:36,560 --> 00:16:40,639
project um 2021 so our student action

445
00:16:40,639 --> 00:16:43,440
implemented this os add-on

446
00:16:43,440 --> 00:16:44,399
and

447
00:16:44,399 --> 00:16:46,720
it actually supports the zap callbacks

448
00:16:46,720 --> 00:16:49,519
but it also supports the boast and

449
00:16:49,519 --> 00:16:52,000
interact sh

450
00:16:52,000 --> 00:16:55,519
third party os servers so if you

451
00:16:55,519 --> 00:16:56,880
actually

452
00:16:56,880 --> 00:17:00,000
go back to

453
00:17:01,199 --> 00:17:03,519
if we go to zap

454
00:17:03,519 --> 00:17:06,640
and we go to the marketplace

455
00:17:06,640 --> 00:17:09,439
and you can

456
00:17:09,439 --> 00:17:11,520
you'll see you've got os support

457
00:17:11,520 --> 00:17:13,359
and there's a lot of information here

458
00:17:13,359 --> 00:17:15,439
including information on all of the

459
00:17:15,439 --> 00:17:18,480
services including boast

460
00:17:18,480 --> 00:17:20,559
so and there is actually a public boost

461
00:17:20,559 --> 00:17:22,160
server available

462
00:17:22,160 --> 00:17:24,319
so what you can do is you can actually

463
00:17:24,319 --> 00:17:25,520
test for these out of bound

464
00:17:25,520 --> 00:17:29,439
vulnerabilities right now

465
00:17:29,840 --> 00:17:32,559
now one thing it's worth pointing out is

466
00:17:32,559 --> 00:17:35,679
this is still alpha so

467
00:17:35,679 --> 00:17:39,760
at the moment so for 211 the zap rules

468
00:17:39,760 --> 00:17:42,000
will be changed uh that you already use

469
00:17:42,000 --> 00:17:44,160
callbacks will be changed to use the

470
00:17:44,160 --> 00:17:46,960
callbacks provided by the ost so the

471
00:17:46,960 --> 00:17:50,160
core callbacks are being removed

472
00:17:50,160 --> 00:17:51,760
we will not automatically we're not

473
00:17:51,760 --> 00:17:54,080
going to enable both or inter interact

474
00:17:54,080 --> 00:17:56,960
sh by default you'll have to choose that

475
00:17:56,960 --> 00:17:59,280
because you know we're then sending

476
00:17:59,280 --> 00:18:00,559
potentially information about

477
00:18:00,559 --> 00:18:03,039
vulnerabilities to third-party services

478
00:18:03,039 --> 00:18:05,200
but these are open source projects so

479
00:18:05,200 --> 00:18:07,760
you can actually set up your own servers

480
00:18:07,760 --> 00:18:10,799
for these things if you want

481
00:18:11,039 --> 00:18:14,000
and it's also also worth noting that we

482
00:18:14,000 --> 00:18:14,960
have

483
00:18:14,960 --> 00:18:17,840
a blog post about this so if you go to

484
00:18:17,840 --> 00:18:20,960
the zap blog you'll see there is a blog

485
00:18:20,960 --> 00:18:23,200
post about the outer band application

486
00:18:23,200 --> 00:18:26,679
security testing

487
00:18:29,919 --> 00:18:32,320
and then we have retest

488
00:18:32,320 --> 00:18:35,360
so the retest is another new add-on and

489
00:18:35,360 --> 00:18:37,840
it allows you to quickly retest issues

490
00:18:37,840 --> 00:18:39,840
found in scans

491
00:18:39,840 --> 00:18:43,200
and this was again another um 2021

492
00:18:43,200 --> 00:18:45,280
project

493
00:18:45,280 --> 00:18:47,039
and

494
00:18:47,039 --> 00:18:49,280
basically this uses and extends the

495
00:18:49,280 --> 00:18:52,080
automation framework and the problem

496
00:18:52,080 --> 00:18:54,240
that is trying to solve here is when you

497
00:18:54,240 --> 00:18:57,760
run a zap scan you'll often find it

498
00:18:57,760 --> 00:19:00,400
takes it can take a long time so it can

499
00:19:00,400 --> 00:19:02,559
take something like you know

500
00:19:02,559 --> 00:19:06,400
an hour two hours three hours and so it

501
00:19:06,400 --> 00:19:08,000
could find potential refined

502
00:19:08,000 --> 00:19:09,919
vulnerabilities and then you want to

503
00:19:09,919 --> 00:19:11,360
find out whether those vulnerabilities

504
00:19:11,360 --> 00:19:12,720
are still present

505
00:19:12,720 --> 00:19:13,520
and

506
00:19:13,520 --> 00:19:15,679
right now you kind of have to actually

507
00:19:15,679 --> 00:19:17,440
run the scan again so which it could

508
00:19:17,440 --> 00:19:19,120
take many hours

509
00:19:19,120 --> 00:19:21,039
what the retest allows

510
00:19:21,039 --> 00:19:23,039
add-on allows you to do is allow you to

511
00:19:23,039 --> 00:19:25,919
create tests just for particular issues

512
00:19:25,919 --> 00:19:29,360
which makes it much quicker to

513
00:19:29,360 --> 00:19:31,360
to test

514
00:19:31,360 --> 00:19:33,360
and that was developed by our student

515
00:19:33,360 --> 00:19:35,360
pranav

516
00:19:35,360 --> 00:19:38,080
and again this is still alpha

517
00:19:38,080 --> 00:19:40,720
but both of these these are add-ons and

518
00:19:40,720 --> 00:19:42,880
that means we can update them at any

519
00:19:42,880 --> 00:19:45,679
time and so we will be

520
00:19:45,679 --> 00:19:48,480
working improving the os add-on and the

521
00:19:48,480 --> 00:19:50,080
re-test add-on and the automation

522
00:19:50,080 --> 00:19:52,240
framework and we'll be pushing out new

523
00:19:52,240 --> 00:19:54,160
updates as soon as we have anything

524
00:19:54,160 --> 00:19:55,840
available

525
00:19:55,840 --> 00:19:58,480
and there is a blog post

526
00:19:58,480 --> 00:20:00,799
for this as well

527
00:20:00,799 --> 00:20:03,600
so if i go back to the zap blog you'll

528
00:20:03,600 --> 00:20:05,760
see there's the blog post on retesting

529
00:20:05,760 --> 00:20:07,919
alerts with or sap

530
00:20:07,919 --> 00:20:10,720
and i will show you a quick demo

531
00:20:10,720 --> 00:20:13,679
so if we go to

532
00:20:13,679 --> 00:20:16,159
the alerts we'll see

533
00:20:16,159 --> 00:20:19,360
i'll pick the x frame of content

534
00:20:19,360 --> 00:20:21,600
we're missing csp

535
00:20:21,600 --> 00:20:24,480
csb header we can right click here and

536
00:20:24,480 --> 00:20:26,240
we can click on retest

537
00:20:26,240 --> 00:20:27,840
and you can choose whichever alerts you

538
00:20:27,840 --> 00:20:29,120
want to test

539
00:20:29,120 --> 00:20:32,559
and you can then verify

540
00:20:32,559 --> 00:20:34,799
and you'll see it's actually present and

541
00:20:34,799 --> 00:20:36,799
then what you can do is you can create

542
00:20:36,799 --> 00:20:37,919
an

543
00:20:37,919 --> 00:20:39,919
an automation test plan

544
00:20:39,919 --> 00:20:41,760
and so we you can see we've now got this

545
00:20:41,760 --> 00:20:44,640
test plan and if i run that test plan

546
00:20:44,640 --> 00:20:46,000
you'll see

547
00:20:46,000 --> 00:20:48,559
we're running it is running now and

548
00:20:48,559 --> 00:20:51,280
we'll see it fails so the test for the

549
00:20:51,280 --> 00:20:53,039
vulnerability fails which means not

550
00:20:53,039 --> 00:20:54,960
surprisingly the vulnerability is still

551
00:20:54,960 --> 00:20:55,760
there

552
00:20:55,760 --> 00:20:56,720
because

553
00:20:56,720 --> 00:20:58,640
we haven't made any changes but that

554
00:20:58,640 --> 00:21:02,799
means it's you can very quickly create

555
00:21:02,799 --> 00:21:05,039
retest plans which test just very

556
00:21:05,039 --> 00:21:07,360
specific alerts and that means you can

557
00:21:07,360 --> 00:21:08,960
test them quickly and you can put them

558
00:21:08,960 --> 00:21:10,559
you can put them as part of your

559
00:21:10,559 --> 00:21:12,799
regression test as well because again

560
00:21:12,799 --> 00:21:14,159
because it's using the automation

561
00:21:14,159 --> 00:21:15,760
framework you can run them from the

562
00:21:15,760 --> 00:21:18,400
command line

563
00:21:19,840 --> 00:21:22,080
and i showed you the demo

564
00:21:22,080 --> 00:21:24,320
so what i want to talk to you now about

565
00:21:24,320 --> 00:21:26,000
is the docker changes because we're

566
00:21:26,000 --> 00:21:28,320
making some fairly significant changes

567
00:21:28,320 --> 00:21:30,400
to the docker images

568
00:21:30,400 --> 00:21:32,159
and the main thing is the stable and

569
00:21:32,159 --> 00:21:35,039
bare images will be updated monthly now

570
00:21:35,039 --> 00:21:36,880
previously we only updated them when we

571
00:21:36,880 --> 00:21:40,320
did a major release like zap 210 zap 211

572
00:21:40,320 --> 00:21:42,840
so there will be new in

573
00:21:42,840 --> 00:21:45,919
versions at four zap to 11

574
00:21:45,919 --> 00:21:47,760
but every month

575
00:21:47,760 --> 00:21:49,440
around the first of the month not

576
00:21:49,440 --> 00:21:51,600
necessarily on the first but early in

577
00:21:51,600 --> 00:21:53,760
the month uh we'll update them and we

578
00:21:53,760 --> 00:21:55,600
will update the package scans which are

579
00:21:55,600 --> 00:21:57,919
included with the docker images and the

580
00:21:57,919 --> 00:22:00,640
add-ons we will not update the core so

581
00:22:00,640 --> 00:22:04,000
the core will stay as zap 211 but the

582
00:22:04,000 --> 00:22:06,080
add-ons and the package scans will be

583
00:22:06,080 --> 00:22:07,919
updated

584
00:22:07,919 --> 00:22:09,039
and

585
00:22:09,039 --> 00:22:10,320
this will

586
00:22:10,320 --> 00:22:12,240
so they will be tagged by date so the

587
00:22:12,240 --> 00:22:15,919
weekly um images are tagged by w year

588
00:22:15,919 --> 00:22:17,120
month day

589
00:22:17,120 --> 00:22:18,480
and

590
00:22:18,480 --> 00:22:19,600
that's what we're you know we're going

591
00:22:19,600 --> 00:22:22,080
to use s for stable and b for bear

592
00:22:22,080 --> 00:22:24,080
the images and so they'll be tagged so

593
00:22:24,080 --> 00:22:25,600
if you want to stay on a particular tag

594
00:22:25,600 --> 00:22:28,159
then you can do but otherwise you will

595
00:22:28,159 --> 00:22:30,000
actually

596
00:22:30,000 --> 00:22:31,360
get them

597
00:22:31,360 --> 00:22:33,200
they will be updated hopefully every

598
00:22:33,200 --> 00:22:34,480
month

599
00:22:34,480 --> 00:22:37,280
and also the package scans are being

600
00:22:37,280 --> 00:22:40,240
migrated to use the automation framework

601
00:22:40,240 --> 00:22:42,720
so the package scans i said they're not

602
00:22:42,720 --> 00:22:44,559
going anywhere but we're changing them

603
00:22:44,559 --> 00:22:46,159
so that they actually use the automation

604
00:22:46,159 --> 00:22:48,320
framework under the hood and if you're

605
00:22:48,320 --> 00:22:51,200
using the weekly release right now

606
00:22:51,200 --> 00:22:52,159
without

607
00:22:52,159 --> 00:22:54,960
um contexts um that without some of the

608
00:22:54,960 --> 00:22:56,080
more advanced options then you're

609
00:22:56,080 --> 00:22:57,520
probably already using the automation

610
00:22:57,520 --> 00:23:00,000
framework um so this means that through

611
00:23:00,000 --> 00:23:01,919
the life of zap 211 more and more the

612
00:23:01,919 --> 00:23:03,760
package scan functionality will be

613
00:23:03,760 --> 00:23:06,159
migrated to the automation framework

614
00:23:06,159 --> 00:23:08,320
and that's great because if you want to

615
00:23:08,320 --> 00:23:09,520
move from the package against the

616
00:23:09,520 --> 00:23:11,200
automation framework

617
00:23:11,200 --> 00:23:13,360
the package scans will actually generate

618
00:23:13,360 --> 00:23:16,000
uh an automation framework plan for you

619
00:23:16,000 --> 00:23:17,840
so you can generate that plan and then

620
00:23:17,840 --> 00:23:18,880
you can

621
00:23:18,880 --> 00:23:22,159
use that from then on

622
00:23:22,159 --> 00:23:22,960
so

623
00:23:22,960 --> 00:23:25,520
uh talk quickly about some tweaks and

624
00:23:25,520 --> 00:23:28,240
bug fixes there are a lot of um changes

625
00:23:28,240 --> 00:23:30,320
to the core which we going through

626
00:23:30,320 --> 00:23:31,760
i'm just going to mention a few of them

627
00:23:31,760 --> 00:23:33,039
now

628
00:23:33,039 --> 00:23:35,280
one of them actually isn't a change the

629
00:23:35,280 --> 00:23:37,120
core it's changed for infrastructure

630
00:23:37,120 --> 00:23:40,720
it's the internationalization so zap is

631
00:23:40,720 --> 00:23:42,720
one of the very few security tools that

632
00:23:42,720 --> 00:23:44,880
is internationalized and localized into

633
00:23:44,880 --> 00:23:46,640
loads of different languages

634
00:23:46,640 --> 00:23:48,000
that integration

635
00:23:48,000 --> 00:23:49,039
with this

636
00:23:49,039 --> 00:23:51,120
service called crowding broke a while

637
00:23:51,120 --> 00:23:53,279
ago that's been re-enabled so

638
00:23:53,279 --> 00:23:55,039
internationalization of zap is

639
00:23:55,039 --> 00:23:58,000
re-enabled and working again so zap 211

640
00:23:58,000 --> 00:24:00,000
will have a load more translations

641
00:24:00,000 --> 00:24:02,080
and we're going to try and get

642
00:24:02,080 --> 00:24:03,919
kind of encourage people to help

643
00:24:03,919 --> 00:24:06,320
translate that more as i said zap is one

644
00:24:06,320 --> 00:24:08,480
of the very few security tools that is

645
00:24:08,480 --> 00:24:11,279
translated and localized and personally

646
00:24:11,279 --> 00:24:13,200
i think it is very important that

647
00:24:13,200 --> 00:24:15,120
security tools are available in people's

648
00:24:15,120 --> 00:24:17,279
native languages

649
00:24:17,279 --> 00:24:19,520
we have lots more core stats and one of

650
00:24:19,520 --> 00:24:21,600
the reasons is because of the automation

651
00:24:21,600 --> 00:24:23,039
framework and the fact that you can add

652
00:24:23,039 --> 00:24:25,919
tests based on the statistics

653
00:24:25,919 --> 00:24:28,159
and we're including stats for manual

654
00:24:28,159 --> 00:24:30,480
authentication so up until now manual

655
00:24:30,480 --> 00:24:32,320
authentication is very well you're on

656
00:24:32,320 --> 00:24:35,760
your own um but if you actually tell us

657
00:24:35,760 --> 00:24:37,679
how to tell if you tell zap how to tell

658
00:24:37,679 --> 00:24:40,320
but it's authenticated or not then it

659
00:24:40,320 --> 00:24:43,200
will maintain stats and again we want

660
00:24:43,200 --> 00:24:45,120
that for the automation framework to

661
00:24:45,120 --> 00:24:46,720
make it easier for you to tell that

662
00:24:46,720 --> 00:24:50,000
things are working as you expect

663
00:24:50,000 --> 00:24:51,600
one little change which i think some of

664
00:24:51,600 --> 00:24:53,440
you will find very useful is zap

665
00:24:53,440 --> 00:24:55,840
actually used to change the header order

666
00:24:55,840 --> 00:24:58,559
on some requests and we do know that

667
00:24:58,559 --> 00:25:00,960
some um

668
00:25:00,960 --> 00:25:02,799
some web application firewalls were

669
00:25:02,799 --> 00:25:05,039
actually blocking zap on that basis

670
00:25:05,039 --> 00:25:06,640
we're no longer doing that and that

671
00:25:06,640 --> 00:25:08,240
means that these wafts will not be able

672
00:25:08,240 --> 00:25:10,960
to block as a zap quite so easily

673
00:25:10,960 --> 00:25:12,720
and we've also included container

674
00:25:12,720 --> 00:25:14,960
detection so zap will have to tell

675
00:25:14,960 --> 00:25:16,640
whether it's running in one of the known

676
00:25:16,640 --> 00:25:18,720
containers um because we'll actually

677
00:25:18,720 --> 00:25:20,480
have certain features that we know won't

678
00:25:20,480 --> 00:25:22,559
work and that's caused some confusion

679
00:25:22,559 --> 00:25:23,919
we're not doing anything sophisticated

680
00:25:23,919 --> 00:25:26,080
with container detection um so for

681
00:25:26,080 --> 00:25:28,400
something like docker we create a file

682
00:25:28,400 --> 00:25:30,480
which we know is present in our docker

683
00:25:30,480 --> 00:25:32,480
image if that file is present we assume

684
00:25:32,480 --> 00:25:34,480
we're running in docker if you create a

685
00:25:34,480 --> 00:25:37,039
zap docker image without that file then

686
00:25:37,039 --> 00:25:39,039
the container detection won't work we're

687
00:25:39,039 --> 00:25:40,960
not trying to sophisticate it here we're

688
00:25:40,960 --> 00:25:42,640
just trying to detect that zap is

689
00:25:42,640 --> 00:25:44,400
running in one of the known containers

690
00:25:44,400 --> 00:25:46,159
so we can disable options that we know

691
00:25:46,159 --> 00:25:49,919
won't work like browser launch

692
00:25:50,000 --> 00:25:52,240
so i'm running out of time so i'll

693
00:25:52,240 --> 00:25:54,640
quickly go through the timeline

694
00:25:54,640 --> 00:25:57,600
and basically next monday is going to be

695
00:25:57,600 --> 00:25:59,360
the release candidate so the weekly

696
00:25:59,360 --> 00:26:00,400
release

697
00:26:00,400 --> 00:26:02,159
hopefully monday if we have any problems

698
00:26:02,159 --> 00:26:03,520
might get pushed back but the next

699
00:26:03,520 --> 00:26:05,360
weekly release hopefully on monday will

700
00:26:05,360 --> 00:26:07,200
be the release candidate

701
00:26:07,200 --> 00:26:10,159
we plan to actually freeze the call code

702
00:26:10,159 --> 00:26:13,039
on the friday friday october the 1st

703
00:26:13,039 --> 00:26:14,799
2021

704
00:26:14,799 --> 00:26:17,360
and we will release as soon as we can

705
00:26:17,360 --> 00:26:18,960
after that so we need to do a whole lot

706
00:26:18,960 --> 00:26:21,039
of tests we need to build

707
00:26:21,039 --> 00:26:23,840
the packages

708
00:26:23,840 --> 00:26:25,200
so i'm not going to give an exact date

709
00:26:25,200 --> 00:26:26,960
for that but it'll be as soon as we can

710
00:26:26,960 --> 00:26:29,440
after the code freeze

711
00:26:29,440 --> 00:26:31,679
and so to wrap up

712
00:26:31,679 --> 00:26:33,840
please try the release candidate and

713
00:26:33,840 --> 00:26:35,520
give us feedback

714
00:26:35,520 --> 00:26:37,279
please fill in the usage questionnaire

715
00:26:37,279 --> 00:26:39,600
so on the mains app website

716
00:26:39,600 --> 00:26:41,679
studyproxy.org

717
00:26:41,679 --> 00:26:44,480
we have a link to the

718
00:26:44,480 --> 00:26:46,640
the latest questionnaire currently usage

719
00:26:46,640 --> 00:26:49,039
and we have used the questionnaires

720
00:26:49,039 --> 00:26:50,960
as a basis of the things we're focusing

721
00:26:50,960 --> 00:26:53,679
on so the report add-on was

722
00:26:53,679 --> 00:26:55,279
one that was created specifically

723
00:26:55,279 --> 00:26:58,400
because of all the feedback we had

724
00:26:58,400 --> 00:27:00,640
and contributors are always welcome so

725
00:27:00,640 --> 00:27:02,480
there's always loads to do on zap so if

726
00:27:02,480 --> 00:27:04,480
you'd like to get involved in an open

727
00:27:04,480 --> 00:27:06,320
source web security project then please

728
00:27:06,320 --> 00:27:08,400
get in touch with me

729
00:27:08,400 --> 00:27:11,039
and to find out more go to zapr

730
00:27:11,039 --> 00:27:13,039
zdayproxy.org

731
00:27:13,039 --> 00:27:14,000
and

732
00:27:14,000 --> 00:27:15,760
that is the end of my presentation thank

733
00:27:15,760 --> 00:27:19,080
you very much

