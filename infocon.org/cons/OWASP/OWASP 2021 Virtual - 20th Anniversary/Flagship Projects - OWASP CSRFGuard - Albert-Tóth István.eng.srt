1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,080 --> 00:00:10,320
so i'm going to talk to you about

3
00:00:10,320 --> 00:00:13,920
cross-site records forgery attacks today

4
00:00:13,920 --> 00:00:17,600
mostly about the csrf guard project but

5
00:00:17,600 --> 00:00:19,279
since i know for a fact that there are a

6
00:00:19,279 --> 00:00:21,279
lot of people who have

7
00:00:21,279 --> 00:00:23,279
trouble understanding all the corner

8
00:00:23,279 --> 00:00:25,680
cases and all the

9
00:00:25,680 --> 00:00:30,400
scenarios that csrf attack might require

10
00:00:30,400 --> 00:00:33,360
i'm going to start with the basics

11
00:00:33,360 --> 00:00:36,000
so what is actually cross site records

12
00:00:36,000 --> 00:00:37,360
forgery

13
00:00:37,360 --> 00:00:41,280
it has multiple names like c surf xsrf

14
00:00:41,280 --> 00:00:43,760
session writing and confused deputy

15
00:00:43,760 --> 00:00:44,960
problem

16
00:00:44,960 --> 00:00:46,800
it is a type of attack where a user is

17
00:00:46,800 --> 00:00:48,719
tricked into unknowingly submit a

18
00:00:48,719 --> 00:00:50,879
malicious request on a website where he

19
00:00:50,879 --> 00:00:53,840
has privileged access to

20
00:00:53,840 --> 00:00:55,840
and the requests are it's really

21
00:00:55,840 --> 00:00:58,000
important are made blindly on behalf of

22
00:00:58,000 --> 00:00:59,199
the victim

23
00:00:59,199 --> 00:01:02,239
inheriting its identity and privileges

24
00:01:02,239 --> 00:01:04,000
this is basically possible because the

25
00:01:04,000 --> 00:01:05,920
browser automatically sends existing

26
00:01:05,920 --> 00:01:08,560
cookies basic of the authentication

27
00:01:08,560 --> 00:01:10,799
headers client certificates within the

28
00:01:10,799 --> 00:01:13,840
same domain or sub domains

29
00:01:13,840 --> 00:01:17,119
if a cookie is actually set to a top

30
00:01:17,119 --> 00:01:18,960
level domain then it will be shared with

31
00:01:18,960 --> 00:01:21,040
all its subdomains

32
00:01:21,040 --> 00:01:23,360
but it's important that it does not work

33
00:01:23,360 --> 00:01:25,280
the other way around

34
00:01:25,280 --> 00:01:28,560
there's another subset of csrf attacks

35
00:01:28,560 --> 00:01:30,159
which is

36
00:01:30,159 --> 00:01:32,159
called logincsrf

37
00:01:32,159 --> 00:01:33,439
where

38
00:01:33,439 --> 00:01:34,799
an attacker

39
00:01:34,799 --> 00:01:37,759
actually tricking a user into logging in

40
00:01:37,759 --> 00:01:39,920
to a website using a predefined set of

41
00:01:39,920 --> 00:01:42,560
credentials so that later on an attacker

42
00:01:42,560 --> 00:01:44,560
could review the activity log on his

43
00:01:44,560 --> 00:01:46,720
machine

44
00:01:46,720 --> 00:01:49,840
so a little bit of history

45
00:01:49,840 --> 00:01:53,360
actually started the first attacks were

46
00:01:53,360 --> 00:01:55,040
identified in

47
00:01:55,040 --> 00:01:56,960
2001

48
00:01:56,960 --> 00:02:01,200
but the major or more famous ones were

49
00:02:01,200 --> 00:02:05,200
started between 2006 and actually

50
00:02:05,200 --> 00:02:07,600
towards 2013

51
00:02:07,600 --> 00:02:10,800
and one of the most famous attacks and

52
00:02:10,800 --> 00:02:12,239
um

53
00:02:12,239 --> 00:02:15,360
actually the one that kind of um was

54
00:02:15,360 --> 00:02:16,959
modeled in a lot of

55
00:02:16,959 --> 00:02:19,680
csrf examples was the ing

56
00:02:19,680 --> 00:02:23,360
direct attack where an attacker could

57
00:02:23,360 --> 00:02:26,239
possibly transfer money um

58
00:02:26,239 --> 00:02:29,120
and steal money from from their victims

59
00:02:29,120 --> 00:02:33,680
that was uh using firefox 2.0 and intent

60
00:02:33,680 --> 00:02:36,160
explorer 7.

61
00:02:36,160 --> 00:02:40,080
but also uh lately even in 2017 there

62
00:02:40,080 --> 00:02:42,959
was a router dns change campaign or

63
00:02:42,959 --> 00:02:46,160
actually a lot of them or sub campaigns

64
00:02:46,160 --> 00:02:49,360
so it might be still relevant

65
00:02:49,360 --> 00:02:52,160
in some cases

66
00:02:52,160 --> 00:02:54,959
in 2020

67
00:02:54,959 --> 00:02:56,879
um

68
00:02:56,879 --> 00:02:58,879
csr vulnerability

69
00:02:58,879 --> 00:02:59,840
uh

70
00:02:59,840 --> 00:03:02,640
costed around five thousand dollars on

71
00:03:02,640 --> 00:03:05,840
bounty platforms but nowadays in many of

72
00:03:05,840 --> 00:03:09,519
the cases people consider the severity

73
00:03:09,519 --> 00:03:12,159
rather low

74
00:03:12,640 --> 00:03:15,280
so the classic example how would an

75
00:03:15,280 --> 00:03:17,040
attack

76
00:03:17,040 --> 00:03:18,800
would happen actually

77
00:03:18,800 --> 00:03:21,200
first of all um

78
00:03:21,200 --> 00:03:24,159
a simple user whoever a victim would log

79
00:03:24,159 --> 00:03:27,519
into his banking account in the browser

80
00:03:27,519 --> 00:03:28,720
and

81
00:03:28,720 --> 00:03:31,200
he would leave his um

82
00:03:31,200 --> 00:03:34,400
maybe tab open he would

83
00:03:34,400 --> 00:03:38,720
not it's not even necessarily um

84
00:03:38,799 --> 00:03:41,840
mandatory but so to say in the meantime

85
00:03:41,840 --> 00:03:42,879
he

86
00:03:42,879 --> 00:03:45,680
would probably receive a mail from an

87
00:03:45,680 --> 00:03:48,640
attacker who crafted

88
00:03:48,640 --> 00:03:53,360
a url or maybe just a simple image tag

89
00:03:53,360 --> 00:03:54,400
sent

90
00:03:54,400 --> 00:03:55,599
through the

91
00:03:55,599 --> 00:03:57,040
email

92
00:03:57,040 --> 00:03:58,640
and when the

93
00:03:58,640 --> 00:04:00,959
victim would click on it it would create

94
00:04:00,959 --> 00:04:03,120
a request with the

95
00:04:03,120 --> 00:04:05,360
credentials already stored

96
00:04:05,360 --> 00:04:07,360
the session cookies

97
00:04:07,360 --> 00:04:09,519
of the

98
00:04:09,519 --> 00:04:12,239
banking website and this way

99
00:04:12,239 --> 00:04:16,159
since the browser would not be able to

100
00:04:16,238 --> 00:04:18,798
differentiate whether the request was

101
00:04:18,798 --> 00:04:21,680
coming from a legitimate user or not

102
00:04:21,680 --> 00:04:23,600
the transfer would happen

103
00:04:23,600 --> 00:04:28,320
this is of course not possible um

104
00:04:28,320 --> 00:04:29,440
lately

105
00:04:29,440 --> 00:04:33,199
at all so maybe another more recent

106
00:04:33,199 --> 00:04:36,639
example would look like um this one

107
00:04:36,639 --> 00:04:39,520
which was the novidad infection chain

108
00:04:39,520 --> 00:04:43,280
um and actually it's um

109
00:04:43,280 --> 00:04:45,199
it had a new version of it

110
00:04:45,199 --> 00:04:49,360
an attack that happened uh in brazil in

111
00:04:49,360 --> 00:04:54,720
2020 uh q4 and there were even some um

112
00:04:54,720 --> 00:04:56,960
some cases in the first quarter of this

113
00:04:56,960 --> 00:04:58,320
year

114
00:04:58,320 --> 00:04:59,280
so

115
00:04:59,280 --> 00:05:01,280
there would be again some kind of an

116
00:05:01,280 --> 00:05:04,720
advertising uh or a compromise website

117
00:05:04,720 --> 00:05:05,600
or

118
00:05:05,600 --> 00:05:07,680
some social engineering an attacker

119
00:05:07,680 --> 00:05:09,280
would send

120
00:05:09,280 --> 00:05:11,600
some links to

121
00:05:11,600 --> 00:05:13,600
a specific user

122
00:05:13,600 --> 00:05:16,240
and if the user would be

123
00:05:16,240 --> 00:05:17,919
logged in to his

124
00:05:17,919 --> 00:05:20,000
router

125
00:05:20,000 --> 00:05:21,919
then

126
00:05:21,919 --> 00:05:25,840
first those scripts would try to

127
00:05:26,639 --> 00:05:29,120
would try to guess the ip address of the

128
00:05:29,120 --> 00:05:30,479
routers

129
00:05:30,479 --> 00:05:33,520
if for some reason there would not be an

130
00:05:33,520 --> 00:05:36,160
active session then it would try to

131
00:05:36,160 --> 00:05:37,199
guess

132
00:05:37,199 --> 00:05:39,520
the credentials required for that

133
00:05:39,520 --> 00:05:42,560
specific router after identification

134
00:05:42,560 --> 00:05:45,440
and since a lot of people use default

135
00:05:45,440 --> 00:05:49,520
passwords um they might be able to just

136
00:05:49,520 --> 00:05:51,440
do that easily

137
00:05:51,440 --> 00:05:54,800
then with the csrf attack uh or another

138
00:05:54,800 --> 00:05:57,199
one actually they could change the dns

139
00:05:57,199 --> 00:05:59,680
settings the domain name server settings

140
00:05:59,680 --> 00:06:01,440
uh within the router

141
00:06:01,440 --> 00:06:04,880
and that would result in um

142
00:06:04,880 --> 00:06:07,520
quite a serious attack because everyone

143
00:06:07,520 --> 00:06:08,639
who would

144
00:06:08,639 --> 00:06:11,360
join that same network when they would

145
00:06:11,360 --> 00:06:13,840
try to access

146
00:06:13,840 --> 00:06:15,039
services

147
00:06:15,039 --> 00:06:16,639
known by them

148
00:06:16,639 --> 00:06:18,960
they might be redirected to a phishing

149
00:06:18,960 --> 00:06:20,560
web server where

150
00:06:20,560 --> 00:06:22,880
actually the attackers could steal their

151
00:06:22,880 --> 00:06:25,680
credentials and they could just redirect

152
00:06:25,680 --> 00:06:27,280
them to

153
00:06:27,280 --> 00:06:29,280
to the um

154
00:06:29,280 --> 00:06:33,039
original sites so they might not even

155
00:06:33,039 --> 00:06:36,240
realize what happened

156
00:06:36,479 --> 00:06:39,440
so uh you might ask you know

157
00:06:39,440 --> 00:06:41,440
whether is that really simple

158
00:06:41,440 --> 00:06:43,360
and why not

159
00:06:43,360 --> 00:06:45,199
because actually there is the same

160
00:06:45,199 --> 00:06:48,960
origin policy that was introduced in 95

161
00:06:48,960 --> 00:06:51,120
by netscape navigator

162
00:06:51,120 --> 00:06:54,080
which basically permits scripts to

163
00:06:54,080 --> 00:06:55,520
access data

164
00:06:55,520 --> 00:06:56,400
um

165
00:06:56,400 --> 00:06:59,120
from another page only if they're

166
00:06:59,120 --> 00:07:00,840
shared the same

167
00:07:00,840 --> 00:07:04,160
origin the purpose of this policy

168
00:07:04,160 --> 00:07:05,520
obviously is to prevent malicious

169
00:07:05,520 --> 00:07:07,280
scripts from accessing accessing

170
00:07:07,280 --> 00:07:10,639
sensitive data from another web page

171
00:07:10,639 --> 00:07:13,520
and it is worth mentioning that the same

172
00:07:13,520 --> 00:07:16,319
or origin policy only applies to scripts

173
00:07:16,319 --> 00:07:18,000
and forms

174
00:07:18,000 --> 00:07:20,720
and writing data is still permitted

175
00:07:20,720 --> 00:07:24,080
in certain cases

176
00:07:24,720 --> 00:07:27,039
and just to have an idea

177
00:07:27,039 --> 00:07:31,280
or origin is

178
00:07:31,280 --> 00:07:36,400
yeah this should be visible just a sec

179
00:07:37,120 --> 00:07:40,479
consists of the scheme a host and a port

180
00:07:40,479 --> 00:07:42,880
but it also worth mentioning that there

181
00:07:42,880 --> 00:07:44,479
are some

182
00:07:44,479 --> 00:07:45,599
some

183
00:07:45,599 --> 00:07:48,400
special cases like internet explorer

184
00:07:48,400 --> 00:07:49,759
which

185
00:07:49,759 --> 00:07:52,319
doesn't consider the port

186
00:07:52,319 --> 00:07:55,599
as part of the origin or if it's the

187
00:07:55,599 --> 00:07:59,280
site is within a trusted zone then

188
00:07:59,280 --> 00:08:02,160
those sites can communicate

189
00:08:02,160 --> 00:08:04,879
between each other

190
00:08:04,879 --> 00:08:07,120
so how can you relax

191
00:08:07,120 --> 00:08:09,199
the same origin policy

192
00:08:09,199 --> 00:08:10,400
there is

193
00:08:10,400 --> 00:08:12,479
the first of the options is the cross

194
00:08:12,479 --> 00:08:15,360
document messaging

195
00:08:15,360 --> 00:08:18,240
this is not that widely used

196
00:08:18,240 --> 00:08:22,639
the main idea in this case is that

197
00:08:22,639 --> 00:08:26,879
the receivers need to um set up even

198
00:08:26,879 --> 00:08:30,160
listeners for for the message um

199
00:08:30,160 --> 00:08:31,360
string

200
00:08:31,360 --> 00:08:32,320
and

201
00:08:32,320 --> 00:08:34,479
normally if you would use something like

202
00:08:34,479 --> 00:08:37,519
this it would require uh on the

203
00:08:37,519 --> 00:08:41,360
client side i mean on the server side to

204
00:08:41,360 --> 00:08:43,839
on the receiver side actually to check

205
00:08:43,839 --> 00:08:47,200
for the origin headers

206
00:08:47,200 --> 00:08:50,080
there's also web sockets

207
00:08:50,080 --> 00:08:50,959
again

208
00:08:50,959 --> 00:08:54,160
the sop is not applied to web sockets

209
00:08:54,160 --> 00:08:55,839
and

210
00:08:55,839 --> 00:08:57,360
it's worth mentioning again that the

211
00:08:57,360 --> 00:08:58,800
origin header

212
00:08:58,800 --> 00:08:59,600
which

213
00:08:59,600 --> 00:09:01,279
is part of

214
00:09:01,279 --> 00:09:03,600
the forbidden headers list

215
00:09:03,600 --> 00:09:07,120
which means that scripts cannot actually

216
00:09:07,120 --> 00:09:10,720
modify it or set it explicitly

217
00:09:10,720 --> 00:09:14,000
the browser makes

218
00:09:14,640 --> 00:09:16,399
makes that implicit

219
00:09:16,399 --> 00:09:18,959
for every connection request again this

220
00:09:18,959 --> 00:09:20,880
is something that

221
00:09:20,880 --> 00:09:22,720
usually people don't really care about

222
00:09:22,720 --> 00:09:25,360
or don't really know about

223
00:09:25,360 --> 00:09:26,800
and

224
00:09:26,800 --> 00:09:28,720
even in this case you would need to

225
00:09:28,720 --> 00:09:31,120
check or validate origin against the

226
00:09:31,120 --> 00:09:35,200
white list before accepting a connection

227
00:09:35,200 --> 00:09:36,640
moving forward

228
00:09:36,640 --> 00:09:39,360
there's also another historical

229
00:09:39,360 --> 00:09:42,640
way of let's say working around the sop

230
00:09:42,640 --> 00:09:45,920
which is jsonp json with padding

231
00:09:45,920 --> 00:09:48,480
uh since by default scripts are allowed

232
00:09:48,480 --> 00:09:52,000
to be loaded from other domains

233
00:09:52,000 --> 00:09:53,360
this

234
00:09:53,360 --> 00:09:54,959
could work

235
00:09:54,959 --> 00:09:57,680
but it means that the server endpoint

236
00:09:57,680 --> 00:09:59,440
must accept our client callback

237
00:09:59,440 --> 00:10:01,680
parameter and return the date of reps

238
00:10:01,680 --> 00:10:02,640
with that

239
00:10:02,640 --> 00:10:07,839
with that function so for an example if

240
00:10:07,839 --> 00:10:09,519
the client would make a request against

241
00:10:09,519 --> 00:10:11,120
the user's endpoint

242
00:10:11,120 --> 00:10:13,440
he would need to

243
00:10:13,440 --> 00:10:16,079
provide a javascript function as a

244
00:10:16,079 --> 00:10:19,040
callback and then the server would wrap

245
00:10:19,040 --> 00:10:20,320
the data

246
00:10:20,320 --> 00:10:23,680
and would send it back that way so the

247
00:10:23,680 --> 00:10:25,360
javascript would be

248
00:10:25,360 --> 00:10:27,839
executed of course this is not a really

249
00:10:27,839 --> 00:10:29,360
good idea

250
00:10:29,360 --> 00:10:31,440
from a security point of view so make

251
00:10:31,440 --> 00:10:34,320
sure you don't use it

252
00:10:34,320 --> 00:10:36,160
so the question is are there anything

253
00:10:36,160 --> 00:10:37,519
else

254
00:10:37,519 --> 00:10:39,040
yes of course

255
00:10:39,040 --> 00:10:41,120
this is the cross origin resource

256
00:10:41,120 --> 00:10:42,160
sharing

257
00:10:42,160 --> 00:10:44,240
which allows restricted resources on a

258
00:10:44,240 --> 00:10:46,079
web page to be requested from another

259
00:10:46,079 --> 00:10:48,160
domain

260
00:10:48,160 --> 00:10:49,279
um

261
00:10:49,279 --> 00:10:52,160
asynchronous javascript requests are

262
00:10:52,160 --> 00:10:54,160
forbidden to make course requests by

263
00:10:54,160 --> 00:10:55,920
default because of the same origin

264
00:10:55,920 --> 00:10:57,279
policy

265
00:10:57,279 --> 00:10:59,440
and the browser and the server decides

266
00:10:59,440 --> 00:11:01,760
with the help of the course whether a

267
00:11:01,760 --> 00:11:05,519
request is safe to be served or not

268
00:11:05,600 --> 00:11:08,320
for requests with possible side effects

269
00:11:08,320 --> 00:11:10,000
the browser automatically sends a

270
00:11:10,000 --> 00:11:12,800
pre-flight an optional request to check

271
00:11:12,800 --> 00:11:14,560
whether the rear request should be

272
00:11:14,560 --> 00:11:18,239
allowed to be sent or not

273
00:11:19,040 --> 00:11:20,800
so when it's

274
00:11:20,800 --> 00:11:22,959
considered to be safe

275
00:11:22,959 --> 00:11:25,600
those are the simple requests and the

276
00:11:25,600 --> 00:11:26,880
conditions

277
00:11:26,880 --> 00:11:29,920
for a simple request are that the http

278
00:11:29,920 --> 00:11:32,640
verb must be one of the those three like

279
00:11:32,640 --> 00:11:35,120
get head and post

280
00:11:35,120 --> 00:11:37,200
there shouldn't be any custom headers

281
00:11:37,200 --> 00:11:39,440
present

282
00:11:39,440 --> 00:11:42,000
the content type of the request should

283
00:11:42,000 --> 00:11:45,440
be one of those three like

284
00:11:45,440 --> 00:11:50,160
url encoded form data or plain text

285
00:11:50,160 --> 00:11:51,600
and

286
00:11:51,600 --> 00:11:54,160
if the request was made using an xml

287
00:11:54,160 --> 00:11:58,240
http request without sending credentials

288
00:11:58,240 --> 00:12:01,040
and no even listeners are registered to

289
00:12:01,040 --> 00:12:02,720
read the response

290
00:12:02,720 --> 00:12:06,000
so basically if

291
00:12:06,240 --> 00:12:07,680
if an

292
00:12:07,680 --> 00:12:09,839
even listener is registered to read the

293
00:12:09,839 --> 00:12:13,040
response or it is added

294
00:12:13,040 --> 00:12:15,839
by a javascript logic in the meantime or

295
00:12:15,839 --> 00:12:18,720
to monitor the response order or the

296
00:12:18,720 --> 00:12:19,760
upload

297
00:12:19,760 --> 00:12:22,839
or a readable stream object is used

298
00:12:22,839 --> 00:12:24,560
then

299
00:12:24,560 --> 00:12:26,880
this request will be blocked

300
00:12:26,880 --> 00:12:28,240
uh

301
00:12:28,240 --> 00:12:29,920
some browser will trigger a preflight

302
00:12:29,920 --> 00:12:31,279
check even if

303
00:12:31,279 --> 00:12:33,120
any of the permitted headers contain

304
00:12:33,120 --> 00:12:35,279
non-standard values

305
00:12:35,279 --> 00:12:38,560
so for example if you would say

306
00:12:38,560 --> 00:12:40,240
you would give a value for the content

307
00:12:40,240 --> 00:12:42,870
type something else than

308
00:12:42,870 --> 00:12:44,480
[Music]

309
00:12:44,480 --> 00:12:48,560
i don't know maybe a random value

310
00:12:48,560 --> 00:12:51,040
i believe this is how

311
00:12:51,040 --> 00:12:53,360
some of the browsers

312
00:12:53,360 --> 00:12:58,240
uh for example on on ios work

313
00:12:59,120 --> 00:12:59,839
so

314
00:12:59,839 --> 00:13:02,720
um what are the server side headers that

315
00:13:02,720 --> 00:13:04,839
are required

316
00:13:04,839 --> 00:13:06,399
to

317
00:13:06,399 --> 00:13:08,560
actually enable course

318
00:13:08,560 --> 00:13:11,839
so one of the um most important is the

319
00:13:11,839 --> 00:13:14,399
access control allow origin

320
00:13:14,399 --> 00:13:16,160
which um

321
00:13:16,160 --> 00:13:17,600
basically

322
00:13:17,600 --> 00:13:19,839
configures which or is it origins to

323
00:13:19,839 --> 00:13:21,760
receive requests from

324
00:13:21,760 --> 00:13:24,040
this could be and in many of the

325
00:13:24,040 --> 00:13:25,600
misconfigurations

326
00:13:25,600 --> 00:13:29,040
in the use cases this is only um can can

327
00:13:29,040 --> 00:13:31,360
be used like a wild card which would

328
00:13:31,360 --> 00:13:34,959
accept all origins

329
00:13:34,959 --> 00:13:37,120
there's then the access control allow

330
00:13:37,120 --> 00:13:38,880
credentials

331
00:13:38,880 --> 00:13:41,680
this decides whether sending credentials

332
00:13:41,680 --> 00:13:44,320
are allowed like i said

333
00:13:44,320 --> 00:13:47,519
session cookies basic authentication

334
00:13:47,519 --> 00:13:51,600
client certificates and so on

335
00:13:52,160 --> 00:13:54,720
what kind of headers are allowed custom

336
00:13:54,720 --> 00:13:56,880
headers

337
00:13:56,880 --> 00:13:58,240
in case of

338
00:13:58,240 --> 00:14:00,880
course requests

339
00:14:00,880 --> 00:14:04,000
and what kind of headers will be sent

340
00:14:04,000 --> 00:14:07,199
back to the clients

341
00:14:07,199 --> 00:14:09,040
there's also another one

342
00:14:09,040 --> 00:14:11,360
access control allow methods

343
00:14:11,360 --> 00:14:13,839
which decides which http request type

344
00:14:13,839 --> 00:14:16,480
verbs the server accepts in case of a

345
00:14:16,480 --> 00:14:18,959
cross-origin request

346
00:14:18,959 --> 00:14:21,440
it's important to mention

347
00:14:21,440 --> 00:14:22,420
that

348
00:14:22,420 --> 00:14:24,320
[Music]

349
00:14:24,320 --> 00:14:26,320
browsers

350
00:14:26,320 --> 00:14:29,120
now are requesting

351
00:14:29,120 --> 00:14:30,200
that

352
00:14:30,200 --> 00:14:31,360
[Music]

353
00:14:31,360 --> 00:14:35,199
if the credentials header is set

354
00:14:35,199 --> 00:14:39,120
to accept uh paused in credentials then

355
00:14:39,120 --> 00:14:42,240
you are not allowed to use divide cards

356
00:14:42,240 --> 00:14:45,279
character in the origin

357
00:14:45,279 --> 00:14:49,199
basically for security reasons

358
00:14:49,600 --> 00:14:53,440
now um some real world examples of csrf

359
00:14:53,440 --> 00:14:54,800
attacks

360
00:14:54,800 --> 00:14:57,920
and yeah basically the payloads of them

361
00:14:57,920 --> 00:15:01,360
the first that you can see is um

362
00:15:01,360 --> 00:15:03,760
against tp-link routers

363
00:15:03,760 --> 00:15:07,199
and it's basically a dns change with

364
00:15:07,199 --> 00:15:10,800
csrf via css import

365
00:15:10,800 --> 00:15:13,360
which changes in the

366
00:15:13,360 --> 00:15:16,240
example the dns name server

367
00:15:16,240 --> 00:15:17,360
to

368
00:15:17,360 --> 00:15:18,800
a certain

369
00:15:18,800 --> 00:15:20,800
malicious ip address

370
00:15:20,800 --> 00:15:24,839
and the alternative dns name server to

371
00:15:24,839 --> 00:15:29,680
um google's public dns so in case uh

372
00:15:29,680 --> 00:15:32,720
in case they would not be able to serve

373
00:15:32,720 --> 00:15:35,839
the request then it will be resolved by

374
00:15:35,839 --> 00:15:38,240
by google

375
00:15:38,240 --> 00:15:40,959
and the another one is

376
00:15:40,959 --> 00:15:43,120
something similar

377
00:15:43,120 --> 00:15:46,160
but it's actually a post

378
00:15:46,160 --> 00:15:49,120
request using a form

379
00:15:49,120 --> 00:15:52,240
and what it does is sets the remote

380
00:15:52,240 --> 00:15:56,240
management on a router to be accessible

381
00:15:56,240 --> 00:15:59,600
by the attacker and it also overrides

382
00:15:59,600 --> 00:16:02,959
the http password and

383
00:16:02,959 --> 00:16:06,160
some other parameters to be able to

384
00:16:06,160 --> 00:16:09,839
remotely access the router

385
00:16:11,759 --> 00:16:14,560
so i was curious to see

386
00:16:14,560 --> 00:16:17,360
what public exploits are there currently

387
00:16:17,360 --> 00:16:18,399
so

388
00:16:18,399 --> 00:16:21,440
doing a quick search on exploit db

389
00:16:21,440 --> 00:16:25,120
returned um quite a few

390
00:16:25,120 --> 00:16:26,720
uh results

391
00:16:26,720 --> 00:16:29,600
and actually looking into it

392
00:16:29,600 --> 00:16:31,199
just to see

393
00:16:31,199 --> 00:16:34,720
whether there were any payloads

394
00:16:34,720 --> 00:16:36,399
in the last two years

395
00:16:36,399 --> 00:16:37,920
it seems that

396
00:16:37,920 --> 00:16:40,480
based on my query

397
00:16:40,480 --> 00:16:45,240
um there were around 123

398
00:16:45,680 --> 00:16:47,759
exploits

399
00:16:47,759 --> 00:16:49,680
made public on

400
00:16:49,680 --> 00:16:52,800
on the exploit db

401
00:16:53,279 --> 00:16:56,480
so the question is uh how to prevent it

402
00:16:56,480 --> 00:16:58,000
right

403
00:16:58,000 --> 00:16:58,959
so

404
00:16:58,959 --> 00:17:00,639
let's see

405
00:17:00,639 --> 00:17:03,120
the first

406
00:17:03,120 --> 00:17:07,199
and most recommended way of um

407
00:17:07,199 --> 00:17:10,480
prevention usually is um synchronizer

408
00:17:10,480 --> 00:17:13,199
tokens this is actually what

409
00:17:13,199 --> 00:17:18,079
is implemented within the csrf guard

410
00:17:18,079 --> 00:17:20,880
another one is double submit cookie

411
00:17:20,880 --> 00:17:24,000
which is again um

412
00:17:24,000 --> 00:17:26,160
cryptographically strong random value

413
00:17:26,160 --> 00:17:28,559
which is sent back as a

414
00:17:28,559 --> 00:17:30,080
as a

415
00:17:30,080 --> 00:17:32,240
cookie and the request parameter or a

416
00:17:32,240 --> 00:17:33,280
header

417
00:17:33,280 --> 00:17:36,400
um the advantage of it is that it's

418
00:17:36,400 --> 00:17:38,880
really easy to implement and basically

419
00:17:38,880 --> 00:17:40,799
the server would just

420
00:17:40,799 --> 00:17:43,039
check whether the

421
00:17:43,039 --> 00:17:45,120
uh the cookie value

422
00:17:45,120 --> 00:17:48,640
matches the header that has been sent

423
00:17:48,640 --> 00:17:52,240
along with the request

424
00:17:53,360 --> 00:17:56,559
moving forward yeah there are some

425
00:17:56,559 --> 00:17:59,120
defense in-depth mitigations like the

426
00:17:59,120 --> 00:18:00,799
same site cookie

427
00:18:00,799 --> 00:18:04,480
this is actually the most promising from

428
00:18:04,480 --> 00:18:07,120
from all of those

429
00:18:07,120 --> 00:18:09,679
another thing that you can do is

430
00:18:09,679 --> 00:18:12,480
to use custom request headers

431
00:18:12,480 --> 00:18:15,200
which can also be configured within csrf

432
00:18:15,200 --> 00:18:16,160
guard

433
00:18:16,160 --> 00:18:18,960
and checking the origin or referrer

434
00:18:18,960 --> 00:18:22,320
headers because those are again um as i

435
00:18:22,320 --> 00:18:25,280
said the origin and

436
00:18:25,280 --> 00:18:27,280
actually the referrer header

437
00:18:27,280 --> 00:18:29,760
itself as well are part of the forbidden

438
00:18:29,760 --> 00:18:33,360
headers so scripts cannot um manually

439
00:18:33,360 --> 00:18:36,240
tamper with it so it's

440
00:18:36,240 --> 00:18:38,320
in many of the most of the cases it's

441
00:18:38,320 --> 00:18:40,799
safe to

442
00:18:41,280 --> 00:18:43,840
safe to check against

443
00:18:43,840 --> 00:18:45,679
um and yeah

444
00:18:45,679 --> 00:18:47,360
one of the most

445
00:18:47,360 --> 00:18:48,720
again

446
00:18:48,720 --> 00:18:50,799
important things would be

447
00:18:50,799 --> 00:18:52,320
to

448
00:18:52,320 --> 00:18:54,240
follow um

449
00:18:54,240 --> 00:18:57,280
the basic rest principles for example do

450
00:18:57,280 --> 00:19:00,559
not use get methods for state changing

451
00:19:00,559 --> 00:19:03,280
operations

452
00:19:05,520 --> 00:19:08,640
and yeah one of the prerequisites of

453
00:19:08,640 --> 00:19:11,440
csrf mitigation techniques is not to

454
00:19:11,440 --> 00:19:13,760
have cross-site scripting

455
00:19:13,760 --> 00:19:16,400
vulnerabilities within your application

456
00:19:16,400 --> 00:19:19,520
because that way

457
00:19:20,559 --> 00:19:23,039
an attacker could defeat all the

458
00:19:23,039 --> 00:19:26,240
mitigation techniques

459
00:19:26,240 --> 00:19:29,039
this could also depend you know

460
00:19:29,039 --> 00:19:31,840
if you can configure

461
00:19:31,840 --> 00:19:34,670
all the major

462
00:19:34,670 --> 00:19:36,080
[Music]

463
00:19:36,080 --> 00:19:39,280
attributes between csrf guard then it

464
00:19:39,280 --> 00:19:42,320
will be slightly harder to do so

465
00:19:42,320 --> 00:19:44,880
but um still

466
00:19:44,880 --> 00:19:48,160
it it can be done

467
00:19:48,160 --> 00:19:50,799
so the same site attribute

468
00:19:50,799 --> 00:19:53,760
that's basically a game changer

469
00:19:53,760 --> 00:19:55,919
because it allows restricting the cookie

470
00:19:55,919 --> 00:19:59,360
context or first party or same same site

471
00:19:59,360 --> 00:20:01,918
context

472
00:20:02,000 --> 00:20:06,480
it can have the following three values

473
00:20:06,480 --> 00:20:10,080
lax when cookies are not sent on normal

474
00:20:10,080 --> 00:20:12,320
cross site requests but are sent when

475
00:20:12,320 --> 00:20:15,120
navigation to the origin site happens

476
00:20:15,120 --> 00:20:17,600
so this is rather for top level

477
00:20:17,600 --> 00:20:18,880
navigation

478
00:20:18,880 --> 00:20:21,440
and only accept

479
00:20:21,440 --> 00:20:24,400
accept safe methods which are get head

480
00:20:24,400 --> 00:20:27,120
options and trace

481
00:20:27,120 --> 00:20:29,679
there's a more strict

482
00:20:29,679 --> 00:20:31,840
version of it

483
00:20:31,840 --> 00:20:32,720
when

484
00:20:32,720 --> 00:20:34,400
the cookies will not be sent along with

485
00:20:34,400 --> 00:20:36,240
the requests initiated by a third party

486
00:20:36,240 --> 00:20:37,440
website

487
00:20:37,440 --> 00:20:39,919
this practically means that

488
00:20:39,919 --> 00:20:43,760
if someone would send you a link

489
00:20:44,000 --> 00:20:46,000
let's say on

490
00:20:46,000 --> 00:20:47,600
private message

491
00:20:47,600 --> 00:20:49,600
channel or so if you would click on it

492
00:20:49,600 --> 00:20:52,480
you would be redirected to um the

493
00:20:52,480 --> 00:20:55,360
particular site that you might be logged

494
00:20:55,360 --> 00:20:59,520
in but it will show you uh as

495
00:20:59,520 --> 00:21:02,240
as if you were not you would need to do

496
00:21:02,240 --> 00:21:06,240
a reload or refreshing your browser

497
00:21:06,240 --> 00:21:07,840
to be logged in

498
00:21:07,840 --> 00:21:09,760
and the

499
00:21:09,760 --> 00:21:12,240
third option would be none

500
00:21:12,240 --> 00:21:14,159
well

501
00:21:14,159 --> 00:21:16,559
that's basically uh how the internet

502
00:21:16,559 --> 00:21:20,000
worked for for a lot of years right

503
00:21:20,000 --> 00:21:21,039
right now

504
00:21:21,039 --> 00:21:22,960
and that basically means that the

505
00:21:22,960 --> 00:21:24,320
cookies are

506
00:21:24,320 --> 00:21:28,240
being sent in all contexts

507
00:21:28,400 --> 00:21:30,400
uh there's also

508
00:21:30,400 --> 00:21:32,720
a few

509
00:21:32,720 --> 00:21:33,919
um

510
00:21:33,919 --> 00:21:37,440
new requirements with regards to this

511
00:21:37,440 --> 00:21:38,720
non-flag

512
00:21:38,720 --> 00:21:41,120
is that it must be accompanied by the

513
00:21:41,120 --> 00:21:43,440
secure flag otherwise the cookie will

514
00:21:43,440 --> 00:21:45,039
not be

515
00:21:45,039 --> 00:21:47,280
will not be sent

516
00:21:47,280 --> 00:21:49,840
if a server omits sending this attribute

517
00:21:49,840 --> 00:21:52,960
some browsers will default to lags after

518
00:21:52,960 --> 00:21:55,039
two minutes

519
00:21:55,039 --> 00:21:58,080
when the cookie was created

520
00:21:58,080 --> 00:22:00,240
and actually this is something pretty

521
00:22:00,240 --> 00:22:03,919
new that was introduced in

522
00:22:03,919 --> 00:22:06,000
2020 i believe

523
00:22:06,000 --> 00:22:08,640
by the chromium project

524
00:22:08,640 --> 00:22:10,720
and since then

525
00:22:10,720 --> 00:22:13,840
other browsers are starting to

526
00:22:13,840 --> 00:22:15,520
to default to that as well so for

527
00:22:15,520 --> 00:22:17,760
example right now if you would be using

528
00:22:17,760 --> 00:22:19,679
chrome then

529
00:22:19,679 --> 00:22:21,679
this is the default

530
00:22:21,679 --> 00:22:26,840
um that you would see in your browser

531
00:22:27,840 --> 00:22:28,559
so

532
00:22:28,559 --> 00:22:30,640
when you would need

533
00:22:30,640 --> 00:22:32,880
csrf guarding

534
00:22:32,880 --> 00:22:35,440
well there are a couple of

535
00:22:35,440 --> 00:22:37,440
a couple of use cases

536
00:22:37,440 --> 00:22:39,039
one would be

537
00:22:39,039 --> 00:22:40,480
when

538
00:22:40,480 --> 00:22:42,799
you need to support users with older

539
00:22:42,799 --> 00:22:45,440
browsers for example

540
00:22:45,440 --> 00:22:47,120
internet explorer

541
00:22:47,120 --> 00:22:48,880
which still has

542
00:22:48,880 --> 00:22:50,080
like

543
00:22:50,080 --> 00:22:52,480
one year to live

544
00:22:52,480 --> 00:22:55,200
and basically same site is not supported

545
00:22:55,200 --> 00:22:58,640
at all in internet explorers

546
00:22:58,640 --> 00:23:01,280
or if you have endpoints that enable

547
00:23:01,280 --> 00:23:03,600
stain changing operations through get

548
00:23:03,600 --> 00:23:05,440
methods

549
00:23:05,440 --> 00:23:08,480
uh or you are using a framework maybe

550
00:23:08,480 --> 00:23:10,640
even in legacy code or so i've seen

551
00:23:10,640 --> 00:23:13,679
quite a few examples like this uh where

552
00:23:13,679 --> 00:23:16,679
the framework permits um http verb

553
00:23:16,679 --> 00:23:20,000
interchangeability so basically there uh

554
00:23:20,000 --> 00:23:23,520
the logic is when you invoke a get

555
00:23:23,520 --> 00:23:24,480
method

556
00:23:24,480 --> 00:23:27,679
it automatically delegates to a post so

557
00:23:27,679 --> 00:23:30,640
basically they are interchangeable

558
00:23:30,640 --> 00:23:33,760
and another use case is

559
00:23:33,760 --> 00:23:36,480
when you might need to disable the same

560
00:23:36,480 --> 00:23:39,280
site attribute is when you integrate

561
00:23:39,280 --> 00:23:42,159
with third party services for example if

562
00:23:42,159 --> 00:23:46,240
you would use authentication via saml

563
00:23:46,240 --> 00:23:48,559
and the identity provider is on another

564
00:23:48,559 --> 00:23:51,600
domain or so

565
00:23:51,600 --> 00:23:54,080
it's also worth mentioning that

566
00:23:54,080 --> 00:23:56,960
currently safari does not default to lex

567
00:23:56,960 --> 00:23:59,760
nor firefox before the version

568
00:23:59,760 --> 00:24:01,279
69

569
00:24:01,279 --> 00:24:05,600
and nor firefox for android before

570
00:24:05,600 --> 00:24:07,600
version 79

571
00:24:07,600 --> 00:24:11,180
so you will still see a lot of users

572
00:24:11,180 --> 00:24:13,440
[Music]

573
00:24:13,440 --> 00:24:16,480
who might be vulnerable

574
00:24:16,480 --> 00:24:21,520
so how does the application works

575
00:24:21,919 --> 00:24:23,760
so if you are using an html or

576
00:24:23,760 --> 00:24:25,600
javascript front end

577
00:24:25,600 --> 00:24:28,559
first the html needs to load or refer to

578
00:24:28,559 --> 00:24:31,840
the javascript script which is uh by

579
00:24:31,840 --> 00:24:33,840
default under the javascript server

580
00:24:33,840 --> 00:24:34,960
endpoint

581
00:24:34,960 --> 00:24:37,360
this servlet would return the javascript

582
00:24:37,360 --> 00:24:40,080
logic together with a master token

583
00:24:40,080 --> 00:24:42,559
if you have token per page enabled then

584
00:24:42,559 --> 00:24:44,159
it would send another request to the

585
00:24:44,159 --> 00:24:46,960
same servlet together with the master

586
00:24:46,960 --> 00:24:50,000
token itself to query the page tokens

587
00:24:50,000 --> 00:24:52,720
again if you have a token pre-create

588
00:24:52,720 --> 00:24:54,640
enabled because you might

589
00:24:54,640 --> 00:24:57,279
have a smaller application or so the

590
00:24:57,279 --> 00:25:00,559
servlet will return a list of

591
00:25:00,559 --> 00:25:02,720
the list of the all the endpoints within

592
00:25:02,720 --> 00:25:04,480
the application and they're assigned

593
00:25:04,480 --> 00:25:06,400
csrf tokens

594
00:25:06,400 --> 00:25:08,720
otherwise it only returns pages that

595
00:25:08,720 --> 00:25:11,279
were accessed since the logical session

596
00:25:11,279 --> 00:25:14,279
creation

597
00:25:14,320 --> 00:25:16,640
uh from this point on all pages require

598
00:25:16,640 --> 00:25:19,200
a token to be sent along either their

599
00:25:19,200 --> 00:25:21,840
dedicated token or the master token at

600
00:25:21,840 --> 00:25:23,279
the first use

601
00:25:23,279 --> 00:25:25,520
after which a new page token will be

602
00:25:25,520 --> 00:25:29,840
created and sent back to the client

603
00:25:31,679 --> 00:25:32,960
so

604
00:25:32,960 --> 00:25:35,679
moving on

605
00:25:36,000 --> 00:25:37,919
if you configure to use single use

606
00:25:37,919 --> 00:25:40,640
tokens then after every usage the token

607
00:25:40,640 --> 00:25:43,120
will be destroyed and a new one will be

608
00:25:43,120 --> 00:25:44,320
assigned

609
00:25:44,320 --> 00:25:46,240
through a response header

610
00:25:46,240 --> 00:25:48,320
so you won't be able to use the previous

611
00:25:48,320 --> 00:25:51,520
token or reuse the previous token

612
00:25:51,520 --> 00:25:53,440
better said

613
00:25:53,440 --> 00:25:55,520
there's also

614
00:25:55,520 --> 00:25:57,840
a strict domain check option for the

615
00:25:57,840 --> 00:26:00,240
javascript endpoint

616
00:26:00,240 --> 00:26:01,520
that would

617
00:26:01,520 --> 00:26:03,840
not serve if enabled that would not

618
00:26:03,840 --> 00:26:05,600
serve

619
00:26:05,600 --> 00:26:06,400
the

620
00:26:06,400 --> 00:26:10,480
javascript logic itself and the

621
00:26:10,480 --> 00:26:12,320
csrf tokens

622
00:26:12,320 --> 00:26:14,559
uh two requests that were made from

623
00:26:14,559 --> 00:26:16,080
another domain

624
00:26:16,080 --> 00:26:18,960
also there's a referrer header check

625
00:26:18,960 --> 00:26:20,880
that you can enable

626
00:26:20,880 --> 00:26:22,080
that

627
00:26:22,080 --> 00:26:22,840
would

628
00:26:22,840 --> 00:26:26,240
also require a matching protocol a

629
00:26:26,240 --> 00:26:27,760
matching domain

630
00:26:27,760 --> 00:26:30,559
and there is an option to define a

631
00:26:30,559 --> 00:26:32,159
pattern

632
00:26:32,159 --> 00:26:35,440
a regular expression

633
00:26:35,440 --> 00:26:36,640
that would

634
00:26:36,640 --> 00:26:40,640
actually act as a white list for the

635
00:26:40,640 --> 00:26:41,300
for the

636
00:26:41,300 --> 00:26:43,360
[Music]

637
00:26:43,360 --> 00:26:45,840
origins that are accepted

638
00:26:45,840 --> 00:26:48,240
besides that there is also jsp taglip

639
00:26:48,240 --> 00:26:49,919
support

640
00:26:49,919 --> 00:26:52,000
in which case token are injected on the

641
00:26:52,000 --> 00:26:55,520
server side and you don't need to use

642
00:26:55,520 --> 00:26:57,520
the

643
00:26:57,520 --> 00:26:59,279
you don't need to use the servlet for

644
00:26:59,279 --> 00:27:01,600
the javascript anymore and actually it

645
00:27:01,600 --> 00:27:04,080
would also give you

646
00:27:04,080 --> 00:27:07,840
an error or 400

647
00:27:08,080 --> 00:27:11,918
if you are trying to to do that

648
00:27:12,240 --> 00:27:17,919
so what's new in csrf guard four dot x

649
00:27:18,240 --> 00:27:20,880
first of all it was heavily refactored

650
00:27:20,880 --> 00:27:23,440
improved and optimized

651
00:27:23,440 --> 00:27:25,919
uh the modules were separated

652
00:27:25,919 --> 00:27:28,080
um into

653
00:27:28,080 --> 00:27:32,320
distinct maven modules dependencies

654
00:27:32,320 --> 00:27:34,640
right now one of the biggest uh changes

655
00:27:34,640 --> 00:27:36,960
that has been introduced is uh that it

656
00:27:36,960 --> 00:27:39,600
now supports stateless web applications

657
00:27:39,600 --> 00:27:41,919
so it's so the

658
00:27:41,919 --> 00:27:44,720
tokens are not

659
00:27:44,720 --> 00:27:46,480
mapped to

660
00:27:46,480 --> 00:27:49,200
session ids anymore

661
00:27:49,200 --> 00:27:51,600
there is token per page support for ajax

662
00:27:51,600 --> 00:27:54,480
requests which did not uh

663
00:27:54,480 --> 00:27:57,279
did not happen before

664
00:27:57,279 --> 00:27:58,880
um

665
00:27:58,880 --> 00:28:00,880
the master and page token retrieval has

666
00:28:00,880 --> 00:28:03,120
been changed a few

667
00:28:03,120 --> 00:28:05,919
race conditions have been fixed

668
00:28:05,919 --> 00:28:08,159
we also have token injection into

669
00:28:08,159 --> 00:28:10,640
dynamically created content so in case

670
00:28:10,640 --> 00:28:11,730
you have some

671
00:28:11,730 --> 00:28:13,679
[Music]

672
00:28:13,679 --> 00:28:15,919
fancy javascript logic that would create

673
00:28:15,919 --> 00:28:18,960
new elements in the page

674
00:28:18,960 --> 00:28:23,120
csrf guard would automatically inject

675
00:28:23,120 --> 00:28:25,919
the relevant tokens to those elements in

676
00:28:25,919 --> 00:28:28,720
the dom as well

677
00:28:28,880 --> 00:28:31,520
a few other bugs that has been that have

678
00:28:31,520 --> 00:28:33,520
been fixed like

679
00:28:33,520 --> 00:28:36,399
do not inject tokens for unprotected uh

680
00:28:36,399 --> 00:28:38,159
or external links

681
00:28:38,159 --> 00:28:41,919
um this was quite important because

682
00:28:41,919 --> 00:28:42,799
um

683
00:28:42,799 --> 00:28:45,679
an attacker could trick someone

684
00:28:45,679 --> 00:28:47,120
um

685
00:28:47,120 --> 00:28:49,200
into

686
00:28:49,200 --> 00:28:51,919
clicking on an external link and then

687
00:28:51,919 --> 00:28:55,600
they could save the assigned token to it

688
00:28:55,600 --> 00:28:56,840
and

689
00:28:56,840 --> 00:28:59,679
also um there were some changes with

690
00:28:59,679 --> 00:29:01,039
regards to

691
00:29:01,039 --> 00:29:04,399
um async synchronous ajax request

692
00:29:04,399 --> 00:29:06,159
deprecation

693
00:29:06,159 --> 00:29:08,559
uh the js code has been changed to be

694
00:29:08,559 --> 00:29:10,799
parsable and minifiable

695
00:29:10,799 --> 00:29:13,200
and so on and so forth

696
00:29:13,200 --> 00:29:14,399
actually

697
00:29:14,399 --> 00:29:16,480
you can check the release notes on

698
00:29:16,480 --> 00:29:18,960
github

699
00:29:20,000 --> 00:29:22,720
so this is actually a screenshot of the

700
00:29:22,720 --> 00:29:26,960
test application that is um

701
00:29:26,960 --> 00:29:30,000
also shipped so to say with

702
00:29:30,000 --> 00:29:32,080
csrf guards if you

703
00:29:32,080 --> 00:29:33,600
wanted to

704
00:29:33,600 --> 00:29:35,600
so as you can see

705
00:29:35,600 --> 00:29:37,200
on the right side

706
00:29:37,200 --> 00:29:40,480
there is a log that would show the

707
00:29:40,480 --> 00:29:42,320
master token

708
00:29:42,320 --> 00:29:45,760
the page tokens that were returned

709
00:29:45,760 --> 00:29:47,919
based on the master token and as you can

710
00:29:47,919 --> 00:29:51,120
see there are a few white cards

711
00:29:51,120 --> 00:29:54,399
and regular expressions for different

712
00:29:54,399 --> 00:29:56,000
resources

713
00:29:56,000 --> 00:29:58,960
and you can see

714
00:29:58,960 --> 00:30:00,960
in order how the

715
00:30:00,960 --> 00:30:03,679
logic injects the tokens

716
00:30:03,679 --> 00:30:05,600
to different dom elements

717
00:30:05,600 --> 00:30:09,919
also at the end there is an update of

718
00:30:09,919 --> 00:30:13,200
of the form elements

719
00:30:15,039 --> 00:30:17,679
and then another

720
00:30:17,679 --> 00:30:21,440
screenshot with the gsp tech support

721
00:30:21,440 --> 00:30:25,840
i just wanted to show this one that

722
00:30:26,960 --> 00:30:30,000
it doesn't do any requests in

723
00:30:30,000 --> 00:30:32,000
addition to

724
00:30:32,000 --> 00:30:37,559
the jsp itself and even though the

725
00:30:37,600 --> 00:30:39,200
the injection has already happened on

726
00:30:39,200 --> 00:30:41,279
the server side

727
00:30:41,279 --> 00:30:43,600
this is really convenient and actually

728
00:30:43,600 --> 00:30:46,240
more secure

729
00:30:46,240 --> 00:30:47,360
so

730
00:30:47,360 --> 00:30:49,360
yeah basically

731
00:30:49,360 --> 00:30:51,760
that's the main

732
00:30:51,760 --> 00:30:55,360
flow that i wanted to to show you so i'm

733
00:30:55,360 --> 00:30:56,960
gonna just

734
00:30:56,960 --> 00:30:58,799
jump to some conclusion and

735
00:30:58,799 --> 00:31:01,679
recommendations

736
00:31:02,399 --> 00:31:05,600
yeah so for developers um

737
00:31:05,600 --> 00:31:07,679
it is recommended to disable course or

738
00:31:07,679 --> 00:31:09,840
to configure very strict rules

739
00:31:09,840 --> 00:31:13,200
uh for it use the same site streak or

740
00:31:13,200 --> 00:31:16,080
lags if required to consider

741
00:31:16,080 --> 00:31:18,399
use two set of cookies

742
00:31:18,399 --> 00:31:20,159
one for general access and one for

743
00:31:20,159 --> 00:31:22,480
sensitive actions i believe this is how

744
00:31:22,480 --> 00:31:24,799
amazon does lately

745
00:31:24,799 --> 00:31:27,519
uh make strict assertions on the content

746
00:31:27,519 --> 00:31:28,480
type

747
00:31:28,480 --> 00:31:30,399
require user input

748
00:31:30,399 --> 00:31:32,960
or confirmation or reauthentication or

749
00:31:32,960 --> 00:31:35,919
any kind of capture for um critical

750
00:31:35,919 --> 00:31:38,880
functionalities do not accept get http

751
00:31:38,880 --> 00:31:41,360
methods for state changing operations

752
00:31:41,360 --> 00:31:44,240
consider revoking access from

753
00:31:44,240 --> 00:31:47,840
users with all browsers based on the

754
00:31:47,840 --> 00:31:49,760
user agent for example

755
00:31:49,760 --> 00:31:52,399
prevent cross-site scripting make sure

756
00:31:52,399 --> 00:31:54,880
that you have strict content security

757
00:31:54,880 --> 00:31:57,600
policies like script source and connect

758
00:31:57,600 --> 00:31:59,519
source which would

759
00:31:59,519 --> 00:32:01,279
prevent loading scripts from other

760
00:32:01,279 --> 00:32:02,799
domains

761
00:32:02,799 --> 00:32:06,720
and use anti-csrf solutions like csrf

762
00:32:06,720 --> 00:32:09,519
guard if necessary

763
00:32:09,519 --> 00:32:11,360
besides that non-default value slightly

764
00:32:11,360 --> 00:32:12,559
increase the complexity of the

765
00:32:12,559 --> 00:32:15,600
exploitation so make sure that

766
00:32:15,600 --> 00:32:20,080
you don't go with uh with the defaults

767
00:32:20,320 --> 00:32:22,799
for penetration testers bug bounty

768
00:32:22,799 --> 00:32:25,440
hunters what you can do is to check for

769
00:32:25,440 --> 00:32:29,600
the same site um cookie or attribute is

770
00:32:29,600 --> 00:32:30,640
flag for

771
00:32:30,640 --> 00:32:33,120
is set for cookies check for permissive

772
00:32:33,120 --> 00:32:34,480
course rules

773
00:32:34,480 --> 00:32:36,799
um set up your referral policy to no

774
00:32:36,799 --> 00:32:38,720
referrer because that way you might be

775
00:32:38,720 --> 00:32:40,159
able to

776
00:32:40,159 --> 00:32:43,279
bypass some of the validations send uh

777
00:32:43,279 --> 00:32:46,559
plain text content types but um pass

778
00:32:46,559 --> 00:32:48,559
json or xml content

779
00:32:48,559 --> 00:32:50,799
within and see whether that works reuse

780
00:32:50,799 --> 00:32:54,159
csrf tokens between different sessions

781
00:32:54,159 --> 00:32:57,360
or remove the token itself all together

782
00:32:57,360 --> 00:33:00,559
uh try to interchange http methods

783
00:33:00,559 --> 00:33:03,200
try uh subdomain takeovers and start

784
00:33:03,200 --> 00:33:05,200
your attacks from from there

785
00:33:05,200 --> 00:33:08,399
or you can try uh using sorcery so

786
00:33:08,399 --> 00:33:11,120
social engineering to trick users into

787
00:33:11,120 --> 00:33:14,000
using an insecure browser this page is

788
00:33:14,000 --> 00:33:15,679
only available on index interest

789
00:33:15,679 --> 00:33:18,640
explorer or something like that

790
00:33:18,640 --> 00:33:22,000
what you can also do is to automate your

791
00:33:22,000 --> 00:33:25,279
checks using nuclei it's an open source

792
00:33:25,279 --> 00:33:27,679
vulnerability scanning tool

793
00:33:27,679 --> 00:33:30,399
this is what it returned for

794
00:33:30,399 --> 00:33:31,919
our

795
00:33:31,919 --> 00:33:34,080
default web application

796
00:33:34,080 --> 00:33:35,360
also

797
00:33:35,360 --> 00:33:37,760
i've created um

798
00:33:37,760 --> 00:33:40,240
a template a yamaha template that would

799
00:33:40,240 --> 00:33:41,600
detect

800
00:33:41,600 --> 00:33:45,440
different versions of csrf guard and

801
00:33:45,440 --> 00:33:47,919
whether it contains it has token per

802
00:33:47,919 --> 00:33:50,960
page support or not

803
00:33:50,960 --> 00:33:52,480
also for people

804
00:33:52,480 --> 00:33:54,720
recommendations for people uh surfing

805
00:33:54,720 --> 00:33:57,039
the internet make sure to use modern and

806
00:33:57,039 --> 00:34:00,080
up-to-date web browsers you can use uh

807
00:34:00,080 --> 00:34:02,159
firefox container extensions to separate

808
00:34:02,159 --> 00:34:04,799
your browser sessions between the tabs

809
00:34:04,799 --> 00:34:06,960
log out from sites that you after you've

810
00:34:06,960 --> 00:34:09,520
finished using them like internet

811
00:34:09,520 --> 00:34:11,119
banking or so

812
00:34:11,119 --> 00:34:13,359
consider using a separate browser or a

813
00:34:13,359 --> 00:34:16,879
browser profile for personal use

814
00:34:16,879 --> 00:34:18,719
do not use extensions that reduce the

815
00:34:18,719 --> 00:34:21,199
overall security posture of your browser

816
00:34:21,199 --> 00:34:24,719
like disable course or enable course

817
00:34:24,719 --> 00:34:26,320
and of course do not download and

818
00:34:26,320 --> 00:34:30,000
execute files from unknown sources

819
00:34:30,000 --> 00:34:32,159
here you can see some references i

820
00:34:32,159 --> 00:34:36,480
believe my time has just passed

821
00:34:36,480 --> 00:34:38,399
so uh

822
00:34:38,399 --> 00:34:41,359
i won't have any time to to

823
00:34:41,359 --> 00:34:44,399
show you some demos but i'm gonna upload

824
00:34:44,399 --> 00:34:49,520
them maybe in a blog post to github

825
00:34:49,520 --> 00:34:53,918
also you can contact me on these

826
00:34:53,918 --> 00:34:56,000
on these following links

827
00:34:56,000 --> 00:34:56,960
and

828
00:34:56,960 --> 00:34:59,920
of course you can ask me anything on

829
00:34:59,920 --> 00:35:02,480
slack or discord

830
00:35:02,480 --> 00:35:03,680
or

831
00:35:03,680 --> 00:35:06,960
other ways of

832
00:35:10,079 --> 00:35:12,240
social

