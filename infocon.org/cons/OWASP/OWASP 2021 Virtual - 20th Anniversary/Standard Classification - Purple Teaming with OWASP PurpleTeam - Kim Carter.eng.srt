1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,240 --> 00:00:10,559
okay so so purple team is a security

3
00:00:10,559 --> 00:00:12,880
regression testing

4
00:00:12,880 --> 00:00:14,639
cli in sas

5
00:00:14,639 --> 00:00:17,680
targeting web applications and apis

6
00:00:17,680 --> 00:00:19,600
the cli is

7
00:00:19,600 --> 00:00:21,680
specifically targeted at sitting within

8
00:00:21,680 --> 00:00:24,080
your build pipelines but can also be run

9
00:00:24,080 --> 00:00:26,160
manually

10
00:00:26,160 --> 00:00:28,320
the sas that does the security testing

11
00:00:28,320 --> 00:00:30,880
of your applications and or apis can be

12
00:00:30,880 --> 00:00:32,079
deployed

13
00:00:32,079 --> 00:00:35,040
pretty much anywhere

14
00:00:35,040 --> 00:00:36,800
so i'm going to briefly um

15
00:00:36,800 --> 00:00:38,640
talk through the journey so as john

16
00:00:38,640 --> 00:00:40,160
mentioned it's been

17
00:00:40,160 --> 00:00:41,600
it's been a bit of a labor of love it's

18
00:00:41,600 --> 00:00:44,640
been 3.8 years today

19
00:00:44,640 --> 00:00:45,520
that's

20
00:00:45,520 --> 00:00:47,039
probably team from

21
00:00:47,039 --> 00:00:48,879
a proof of concept

22
00:00:48,879 --> 00:00:50,640
to where it is now

23
00:00:50,640 --> 00:00:51,360
so

24
00:00:51,360 --> 00:00:53,680
i finished off writing uh the first two

25
00:00:53,680 --> 00:00:55,760
books of a book series to help

26
00:00:55,760 --> 00:00:58,079
developers upskill their security this

27
00:00:58,079 --> 00:00:59,359
is called

28
00:00:59,359 --> 00:01:01,600
holistic infosec for web developers it's

29
00:01:01,600 --> 00:01:05,360
available to read freely for free online

30
00:01:05,360 --> 00:01:06,960
and i ran lots of workshops with the

31
00:01:06,960 --> 00:01:08,479
proof of concept

32
00:01:08,479 --> 00:01:11,280
to elicit developer feedback and confirm

33
00:01:11,280 --> 00:01:13,520
that what i wrote about was actually

34
00:01:13,520 --> 00:01:14,720
true

35
00:01:14,720 --> 00:01:16,240
most of the time it's been seven days a

36
00:01:16,240 --> 00:01:17,360
week

37
00:01:17,360 --> 00:01:19,360
and in most of the time two full-time

38
00:01:19,360 --> 00:01:21,119
jobs

39
00:01:21,119 --> 00:01:22,560
building a tool that helps developers

40
00:01:22,560 --> 00:01:24,479
write secure code

41
00:01:24,479 --> 00:01:26,960
is a great way to learn about security

42
00:01:26,960 --> 00:01:28,000
if you want to learn more about

43
00:01:28,000 --> 00:01:31,200
information security as a developer um

44
00:01:31,200 --> 00:01:33,280
we'll assign a mentor to you and you can

45
00:01:33,280 --> 00:01:34,320
help

46
00:01:34,320 --> 00:01:37,600
yourself and the community by

47
00:01:37,600 --> 00:01:40,720
building out purple team with us so this

48
00:01:40,720 --> 00:01:42,799
is a high level

49
00:01:42,799 --> 00:01:44,640
overview of the architecture of purple

50
00:01:44,640 --> 00:01:46,640
team

51
00:01:46,640 --> 00:01:48,560
so we've got the cli here we've got the

52
00:01:48,560 --> 00:01:50,399
system under test that'll be your system

53
00:01:50,399 --> 00:01:51,680
under test

54
00:01:51,680 --> 00:01:53,680
and in the back end we've got a few

55
00:01:53,680 --> 00:01:54,880
components here we've got the

56
00:01:54,880 --> 00:01:56,719
orchestrator which

57
00:01:56,719 --> 00:01:58,479
is pretty much responsible for looking

58
00:01:58,479 --> 00:02:01,200
after the actual testers the testers are

59
00:02:01,200 --> 00:02:03,119
currently we've got an app scanner

60
00:02:03,119 --> 00:02:05,040
we've got a tls scanner the server

61
00:02:05,040 --> 00:02:07,040
scanner is yet to be implemented we'll

62
00:02:07,040 --> 00:02:09,520
probably be using nicto for that

63
00:02:09,520 --> 00:02:13,840
the tls scanner uses test ssl dot sh as

64
00:02:13,840 --> 00:02:16,080
an embedded emissary so that actually

65
00:02:16,080 --> 00:02:18,640
sits within our artillery scanner

66
00:02:18,640 --> 00:02:19,920
container

67
00:02:19,920 --> 00:02:22,160
we've got some external emissaries here

68
00:02:22,160 --> 00:02:24,480
uh zap and selenium so they sit out in

69
00:02:24,480 --> 00:02:26,640
their own separate containers an n

70
00:02:26,640 --> 00:02:29,840
number of those are spun up depending on

71
00:02:29,840 --> 00:02:33,760
what's in the job file sent from the cli

72
00:02:33,760 --> 00:02:35,760
um so we've got

73
00:02:35,760 --> 00:02:37,920
real-time comms that come back from the

74
00:02:37,920 --> 00:02:39,599
testers uh

75
00:02:39,599 --> 00:02:42,800
so they're pushed to redis channels um

76
00:02:42,800 --> 00:02:45,120
the orchestrator picks those up

77
00:02:45,120 --> 00:02:47,680
and pushes them back to the cli

78
00:02:47,680 --> 00:02:50,560
um are using server center events or

79
00:02:50,560 --> 00:02:53,280
long polling requests

80
00:02:53,280 --> 00:02:55,120
from the cli depending on what you

81
00:02:55,120 --> 00:02:59,200
select in the orchestrator config

82
00:02:59,280 --> 00:03:01,599
we've got sam cli which hosts our lambda

83
00:03:01,599 --> 00:03:04,159
functions for the lambda functions spin

84
00:03:04,159 --> 00:03:05,760
up the stage 2

85
00:03:05,760 --> 00:03:08,159
containers here

86
00:03:08,159 --> 00:03:10,720
that's a very quick sort of overview of

87
00:03:10,720 --> 00:03:12,319
what the architecture actually looks

88
00:03:12,319 --> 00:03:15,319
like

89
00:03:18,000 --> 00:03:19,440
so how does purple team help us as

90
00:03:19,440 --> 00:03:20,959
developers

91
00:03:20,959 --> 00:03:22,480
how does purple team help us as a

92
00:03:22,480 --> 00:03:25,280
business that creates software

93
00:03:25,280 --> 00:03:26,959
and why would i want purple team in my

94
00:03:26,959 --> 00:03:28,239
build pipe

95
00:03:28,239 --> 00:03:30,640
my pipelines to answer these questions

96
00:03:30,640 --> 00:03:32,480
i'm going to take you back to a section

97
00:03:32,480 --> 00:03:36,159
that's in a number of my previous talks

98
00:03:36,159 --> 00:03:37,760
traditionally how have we found bugs and

99
00:03:37,760 --> 00:03:41,040
software now that we write

100
00:03:41,040 --> 00:03:42,319
so basically we

101
00:03:42,319 --> 00:03:43,760
we haven't really or we've done it

102
00:03:43,760 --> 00:03:46,159
really late

103
00:03:46,159 --> 00:03:46,959
so

104
00:03:46,959 --> 00:03:48,720
every team has a week or two to find all

105
00:03:48,720 --> 00:03:50,799
the defects we've been

106
00:03:50,799 --> 00:03:54,480
conscientiously adding for months

107
00:03:55,439 --> 00:03:57,120
so this red teaming exercise is

108
00:03:57,120 --> 00:03:58,560
approximately twenty thousand dollars

109
00:03:58,560 --> 00:03:59,519
per week

110
00:03:59,519 --> 00:04:01,680
uh for a two week engagement generally

111
00:04:01,680 --> 00:04:03,519
for a small to medium sized web

112
00:04:03,519 --> 00:04:06,000
application

113
00:04:06,000 --> 00:04:06,879
um

114
00:04:06,879 --> 00:04:09,040
that web application

115
00:04:09,040 --> 00:04:12,480
is approximately six months

116
00:04:12,480 --> 00:04:14,720
to develop

117
00:04:14,720 --> 00:04:16,798
um so that's approximately forty

118
00:04:16,798 --> 00:04:18,798
thousand dollars per six months per

119
00:04:18,798 --> 00:04:20,238
project

120
00:04:20,238 --> 00:04:22,880
uh for the red teaming exercise

121
00:04:22,880 --> 00:04:25,199
generally uh five criticals ten highs

122
00:04:25,199 --> 00:04:28,400
ten mediums ten low severity bugs will

123
00:04:28,400 --> 00:04:29,600
be found

124
00:04:29,600 --> 00:04:31,840
and many bugs left unfound waiting to be

125
00:04:31,840 --> 00:04:33,440
exploited

126
00:04:33,440 --> 00:04:35,199
so the business decides to only fix the

127
00:04:35,199 --> 00:04:37,199
five criticals because

128
00:04:37,199 --> 00:04:39,040
they're now so expensive

129
00:04:39,040 --> 00:04:41,919
to fix because

130
00:04:42,320 --> 00:04:45,120
cost 15 plus times what they would have

131
00:04:45,120 --> 00:04:47,680
cost to find and fixed if they were down

132
00:04:47,680 --> 00:04:51,199
and fixed as they were introduced

133
00:04:51,199 --> 00:04:54,880
so that's five bugs times 15 times 320

134
00:04:54,880 --> 00:04:56,720
dollars which is approximately

135
00:04:56,720 --> 00:04:59,440
um say two developer hours equals twenty

136
00:04:59,440 --> 00:05:01,360
four thousand dollars to fix those five

137
00:05:01,360 --> 00:05:03,360
bugs

138
00:05:03,360 --> 00:05:06,400
so uh the bottom line is uh this is

139
00:05:06,400 --> 00:05:08,160
a six month project

140
00:05:08,160 --> 00:05:09,759
and we've got a two week

141
00:05:09,759 --> 00:05:11,280
red teaming engagement which is going to

142
00:05:11,280 --> 00:05:13,440
cost us forty thousand dollars and only

143
00:05:13,440 --> 00:05:15,039
our five routine bugs are going to be

144
00:05:15,039 --> 00:05:16,560
fixed which costs us twenty four

145
00:05:16,560 --> 00:05:18,960
thousand dollars

146
00:05:18,960 --> 00:05:21,919
so this is too expensive it's too late

147
00:05:21,919 --> 00:05:23,680
and too many bugs are left unfixed

148
00:05:23,680 --> 00:05:26,000
because it's so late in the sdlc and

149
00:05:26,000 --> 00:05:28,800
each bud now costs 15 plus times what it

150
00:05:28,800 --> 00:05:31,600
would have cost if they were

151
00:05:31,600 --> 00:05:35,520
found and fixed as they were introduced

152
00:05:36,639 --> 00:05:38,000
instead of deferring the finding and

153
00:05:38,000 --> 00:05:39,440
fixing of security defects to a

154
00:05:39,440 --> 00:05:41,600
traditional red teaming exercise

155
00:05:41,600 --> 00:05:43,280
purple team helps us find and fix our

156
00:05:43,280 --> 00:05:45,840
defects as we're creating them

157
00:05:45,840 --> 00:05:47,680
but how you might ask

158
00:05:47,680 --> 00:05:49,840
so purple runs against our web apps as

159
00:05:49,840 --> 00:05:51,520
we're creating them

160
00:05:51,520 --> 00:05:53,600
informing us of the security defects

161
00:05:53,600 --> 00:05:55,440
that we're introducing in close to real

162
00:05:55,440 --> 00:05:57,440
time

163
00:05:57,440 --> 00:06:01,719
so now we know we need purple team

164
00:06:06,479 --> 00:06:08,479
so how do we set it up

165
00:06:08,479 --> 00:06:09,759
so i'm just going to show you the

166
00:06:09,759 --> 00:06:12,560
documentation page

167
00:06:12,560 --> 00:06:14,160
soon we're going to run through a full

168
00:06:14,160 --> 00:06:17,560
system run

169
00:06:20,800 --> 00:06:22,400
okay so we've got a few things here to

170
00:06:22,400 --> 00:06:24,080
set up

171
00:06:24,080 --> 00:06:27,680
and they're all in the docks here

172
00:06:32,800 --> 00:06:34,960
okay so this is a purple team hyphen

173
00:06:34,960 --> 00:06:36,880
labs.com

174
00:06:36,880 --> 00:06:37,680
doc

175
00:06:37,680 --> 00:06:40,960
and you'll be able to find all this

176
00:06:43,039 --> 00:06:44,560
so we need to set up a docker network

177
00:06:44,560 --> 00:06:46,080
you can set it up manually or you can

178
00:06:46,080 --> 00:06:49,599
just run the npm run commands

179
00:06:49,599 --> 00:06:50,720
which

180
00:06:50,720 --> 00:06:53,120
basically runs

181
00:06:53,120 --> 00:06:55,280
a docker

182
00:06:55,280 --> 00:06:57,520
a compose file underneath and that will

183
00:06:57,520 --> 00:06:59,039
set up your

184
00:06:59,039 --> 00:07:00,800
docker network for you

185
00:07:00,800 --> 00:07:02,720
you need to set up a system under test

186
00:07:02,720 --> 00:07:05,039
we usually use nodegate for a lot of our

187
00:07:05,039 --> 00:07:07,360
stuff

188
00:07:07,520 --> 00:07:09,199
we use the purpledemo infrastructure as

189
00:07:09,199 --> 00:07:10,479
code

190
00:07:10,479 --> 00:07:12,400
such project as well

191
00:07:12,400 --> 00:07:14,240
so this is quite useful

192
00:07:14,240 --> 00:07:16,560
for setting up any web applications

193
00:07:16,560 --> 00:07:18,240
deploying them

194
00:07:18,240 --> 00:07:19,759
um as long as you've got the source code

195
00:07:19,759 --> 00:07:22,639
for them obviously

196
00:07:23,039 --> 00:07:25,280
and a little bit of config there for

197
00:07:25,280 --> 00:07:28,000
nodegoat to apply to get it ready for us

198
00:07:28,000 --> 00:07:29,599
to actually start using it as a system

199
00:07:29,599 --> 00:07:30,880
under test

200
00:07:30,880 --> 00:07:32,479
so a lambda function stage two

201
00:07:32,479 --> 00:07:33,759
containers

202
00:07:33,759 --> 00:07:35,039
uh

203
00:07:35,039 --> 00:07:36,479
i've got links here to the actual

204
00:07:36,479 --> 00:07:38,880
readmes which have got the setup details

205
00:07:38,880 --> 00:07:39,599
for

206
00:07:39,599 --> 00:07:40,560
these

207
00:07:40,560 --> 00:07:42,160
two

208
00:07:42,160 --> 00:07:44,639
two main sort of um component areas so

209
00:07:44,639 --> 00:07:46,240
lambda functions there's

210
00:07:46,240 --> 00:07:48,000
there's three of those

211
00:07:48,000 --> 00:07:50,479
and yeah stage two containers which i um

212
00:07:50,479 --> 00:07:53,120
i briefly showed you before for our zap

213
00:07:53,120 --> 00:07:55,360
and selenium

214
00:07:55,360 --> 00:07:57,280
um now for the orchestrator we've got a

215
00:07:57,280 --> 00:07:59,599
little bit of work to do there

216
00:07:59,599 --> 00:08:02,400
i've got some firewall rules to set up

217
00:08:02,400 --> 00:08:04,160
we need to make sure host ip forwarding

218
00:08:04,160 --> 00:08:06,160
is turned on

219
00:08:06,160 --> 00:08:09,199
and uh testers

220
00:08:09,199 --> 00:08:11,680
appscanner tls scanner and server

221
00:08:11,680 --> 00:08:13,680
scanner as i mentioned the server scan

222
00:08:13,680 --> 00:08:15,919
is yet to be implemented but it's not

223
00:08:15,919 --> 00:08:17,520
far off

224
00:08:17,520 --> 00:08:19,919
uh so we've got yeah again the

225
00:08:19,919 --> 00:08:21,840
application is going to read me link to

226
00:08:21,840 --> 00:08:22,800
it there

227
00:08:22,800 --> 00:08:25,120
same for the tls scanner

228
00:08:25,120 --> 00:08:27,039
and that basically has got some details

229
00:08:27,039 --> 00:08:28,879
there which shows you how to set up

230
00:08:28,879 --> 00:08:31,440
those components

231
00:08:31,440 --> 00:08:35,399
and same with the purple mcli

232
00:08:44,159 --> 00:08:45,120
okay so

233
00:08:45,120 --> 00:08:47,440
the cli install options

234
00:08:47,440 --> 00:08:49,680
there's three main options there

235
00:08:49,680 --> 00:08:51,839
clone the repository npm install locally

236
00:08:51,839 --> 00:08:55,839
or npm install globally

237
00:08:57,680 --> 00:09:00,160
so the npm install locally is a pretty

238
00:09:00,160 --> 00:09:03,360
good option if your build pipeline is

239
00:09:03,360 --> 00:09:05,600
predominantly written in javascript no

240
00:09:05,600 --> 00:09:07,200
js

241
00:09:07,200 --> 00:09:09,839
um

242
00:09:10,800 --> 00:09:12,720
and there's some um yeah there's some

243
00:09:12,720 --> 00:09:14,399
code here which leads to another

244
00:09:14,399 --> 00:09:16,640
repository which basically shows you how

245
00:09:16,640 --> 00:09:18,080
to embed

246
00:09:18,080 --> 00:09:20,160
uh the perpendium cli into your build

247
00:09:20,160 --> 00:09:22,880
pipeline and run it from

248
00:09:22,880 --> 00:09:25,680
a javascript based build pipeline

249
00:09:25,680 --> 00:09:27,600
you've got the npm install globally

250
00:09:27,600 --> 00:09:29,839
option which is a good option if your

251
00:09:29,839 --> 00:09:31,440
build pipelines are written in other

252
00:09:31,440 --> 00:09:33,040
languages

253
00:09:33,040 --> 00:09:33,920
so

254
00:09:33,920 --> 00:09:35,440
what this allows you to

255
00:09:35,440 --> 00:09:37,440
basically it gives you a system-wide

256
00:09:37,440 --> 00:09:38,480
command

257
00:09:38,480 --> 00:09:39,680
that you can launch from anywhere on

258
00:09:39,680 --> 00:09:40,720
your system

259
00:09:40,720 --> 00:09:42,560
uh mpm link's also another pretty good

260
00:09:42,560 --> 00:09:44,480
option which allows you to

261
00:09:44,480 --> 00:09:48,000
clone or fork the cli repository

262
00:09:48,000 --> 00:09:49,760
and

263
00:09:49,760 --> 00:09:51,680
just set up purpling as a system-wide

264
00:09:51,680 --> 00:09:53,760
command again based off the actual

265
00:09:53,760 --> 00:09:55,600
repository

266
00:09:55,600 --> 00:09:57,839
uh

267
00:10:00,080 --> 00:10:04,040
locally yep

268
00:10:05,600 --> 00:10:08,959
and the co workflows

269
00:10:09,279 --> 00:10:11,040
so basically we've got the same sort of

270
00:10:11,040 --> 00:10:13,120
um a cloning repository npm installed

271
00:10:13,120 --> 00:10:15,839
locally npm installed globally

272
00:10:15,839 --> 00:10:19,600
are listed here here and here

273
00:10:19,600 --> 00:10:21,040
and under there we've got the actual

274
00:10:21,040 --> 00:10:23,040
running details for how you go about

275
00:10:23,040 --> 00:10:24,800
running the cli

276
00:10:24,800 --> 00:10:26,560
i won't dive into that due to time

277
00:10:26,560 --> 00:10:28,160
constraints we don't really have much

278
00:10:28,160 --> 00:10:30,000
time for that

279
00:10:30,000 --> 00:10:33,839
but it's all on the readme file there

280
00:10:34,240 --> 00:10:36,000
the full system run

281
00:10:36,000 --> 00:10:37,839
is

282
00:10:37,839 --> 00:10:39,200
docs

283
00:10:39,200 --> 00:10:40,720
again

284
00:10:40,720 --> 00:10:43,680
it's under the workflow section

285
00:10:43,680 --> 00:10:46,079
uh full system run here it's got five

286
00:10:46,079 --> 00:10:47,760
steps there which we're going to be

287
00:10:47,760 --> 00:10:50,240
showing you soon in a video

288
00:10:50,240 --> 00:10:52,240
uh yeah so i probably shouldn't spend

289
00:10:52,240 --> 00:10:53,600
too much time actually walking through

290
00:10:53,600 --> 00:10:56,320
these but they're here anyway so um so

291
00:10:56,320 --> 00:10:57,440
if you want to spin it up you're

292
00:10:57,440 --> 00:10:59,200
probably going to need to um

293
00:10:59,200 --> 00:11:02,480
work through these five steps

294
00:11:05,839 --> 00:11:08,480
emulating the aws lambda service

295
00:11:08,480 --> 00:11:11,040
so the idea here is

296
00:11:11,040 --> 00:11:13,519
using sam celli

297
00:11:13,519 --> 00:11:15,680
so we've got to spin up sam cli in order

298
00:11:15,680 --> 00:11:18,160
to host our lambda functions locally

299
00:11:18,160 --> 00:11:19,760
these are the lambda functions that

300
00:11:19,760 --> 00:11:22,240
provision the stage two containers

301
00:11:22,240 --> 00:11:25,519
so we've got provision fpma series

302
00:11:25,519 --> 00:11:27,680
that's for uh zap proxy provision

303
00:11:27,680 --> 00:11:30,399
selenium standalones for selenium and a

304
00:11:30,399 --> 00:11:32,480
single lambda here for actually bringing

305
00:11:32,480 --> 00:11:34,640
down those s2 containers once the

306
00:11:34,640 --> 00:11:38,160
application tester has finished

307
00:11:38,560 --> 00:11:39,839
for debugging

308
00:11:39,839 --> 00:11:41,360
we've got

309
00:11:41,360 --> 00:11:42,480
a section here

310
00:11:42,480 --> 00:11:43,360
which

311
00:11:43,360 --> 00:11:45,040
basically helps you

312
00:11:45,040 --> 00:11:48,480
debug all the components in the back end

313
00:11:48,480 --> 00:11:50,720
and or the front end so all that docks

314
00:11:50,720 --> 00:11:53,040
there

315
00:11:53,519 --> 00:11:56,880
if and when you need it um so i've got a

316
00:11:56,880 --> 00:11:58,480
video to show you now which actually

317
00:11:58,480 --> 00:11:59,680
works through

318
00:11:59,680 --> 00:12:02,319
the entire

319
00:12:03,519 --> 00:12:05,680
running of purple team cli

320
00:12:05,680 --> 00:12:07,680
so can we run that now

321
00:12:07,680 --> 00:12:10,000
all right today i'm going to show you a

322
00:12:10,000 --> 00:12:11,040
test run

323
00:12:11,040 --> 00:12:14,160
with the back end components as well

324
00:12:14,160 --> 00:12:15,760
i'm starting docker stats to show you

325
00:12:15,760 --> 00:12:18,720
which containers are coming and going

326
00:12:18,720 --> 00:12:20,480
we start docker compose ui which is

327
00:12:20,480 --> 00:12:22,079
responsible for taking orders from our

328
00:12:22,079 --> 00:12:24,079
lambda functions to start and stop the

329
00:12:24,079 --> 00:12:26,800
stage 2 containers

330
00:12:26,800 --> 00:12:29,040
we start sam local which is responsible

331
00:12:29,040 --> 00:12:32,880
for hosting our lambda functions locally

332
00:12:33,600 --> 00:12:35,040
and we already have our system under

333
00:12:35,040 --> 00:12:36,560
test running

334
00:12:36,560 --> 00:12:38,399
now once we've built our stage

335
00:12:38,399 --> 00:12:41,839
two images with npm run dc dash build we

336
00:12:41,839 --> 00:12:45,920
can bring them up with npm run dc up

337
00:12:45,920 --> 00:12:48,160
and then we start the cli in the bottom

338
00:12:48,160 --> 00:12:50,399
left terminal you can see the validated

339
00:12:50,399 --> 00:12:53,279
fielded and sanitized job file contents

340
00:12:53,279 --> 00:12:55,279
in the top right terminal docker stats

341
00:12:55,279 --> 00:12:57,360
is showing us the stage 2 containers

342
00:12:57,360 --> 00:12:58,720
being brought up

343
00:12:58,720 --> 00:13:00,240
in the bottom left terminal we're

344
00:13:00,240 --> 00:13:02,079
checking and retrying that the stage 2

345
00:13:02,079 --> 00:13:03,519
containers have come up and are

346
00:13:03,519 --> 00:13:06,480
responsive all testers are now running

347
00:13:06,480 --> 00:13:08,959
as the test run progresses in the cli

348
00:13:08,959 --> 00:13:10,959
tester complete panel that's the donut

349
00:13:10,959 --> 00:13:11,920
meters

350
00:13:11,920 --> 00:13:14,880
you'll see the percentages progress

351
00:13:14,880 --> 00:13:19,040
these are total percentages per test

352
00:13:19,040 --> 00:13:21,360
in the running statistics panel just to

353
00:13:21,360 --> 00:13:23,680
the right of the donut meters each row

354
00:13:23,680 --> 00:13:26,000
represents a test session as defined in

355
00:13:26,000 --> 00:13:28,959
the job file here i'm tailing the cli

356
00:13:28,959 --> 00:13:31,360
tls tester log just to save right

357
00:13:31,360 --> 00:13:33,920
arrowing on the cli terminal to the tls

358
00:13:33,920 --> 00:13:36,079
tester screen and not being able to also

359
00:13:36,079 --> 00:13:38,000
see the app test to progress

360
00:13:38,000 --> 00:13:40,079
back to the running statistics panel the

361
00:13:40,079 --> 00:13:42,240
thresholds you see are also defined in

362
00:13:42,240 --> 00:13:44,959
the job file as alert thresholds a given

363
00:13:44,959 --> 00:13:46,880
test session will be considered a fail

364
00:13:46,880 --> 00:13:49,199
if the bug count exceeds the alert

365
00:13:49,199 --> 00:13:51,440
threshold the thresholds are useful for

366
00:13:51,440 --> 00:13:53,440
brownfields projects where you have

367
00:13:53,440 --> 00:13:55,920
existing defects but still want a test

368
00:13:55,920 --> 00:13:57,199
to pass

369
00:13:57,199 --> 00:13:59,279
these are the definitions you may find

370
00:13:59,279 --> 00:14:01,600
yourself referring to these quite often

371
00:14:01,600 --> 00:14:03,360
back to the running statistics panel

372
00:14:03,360 --> 00:14:05,360
you'll notice a complete column these

373
00:14:05,360 --> 00:14:07,440
cells represent percentage complete of

374
00:14:07,440 --> 00:14:09,839
the test session where you may have more

375
00:14:09,839 --> 00:14:13,680
than one of these for a given tester

376
00:14:13,680 --> 00:14:15,760
in order to initiate a test run the

377
00:14:15,760 --> 00:14:18,320
build user needs to define and supply a

378
00:14:18,320 --> 00:14:19,920
job file

379
00:14:19,920 --> 00:14:21,760
this is a documentation that will help

380
00:14:21,760 --> 00:14:23,680
explain the schema and help you

381
00:14:23,680 --> 00:14:28,040
construct your job file

382
00:14:37,760 --> 00:14:40,000
next i'll show you some example job

383
00:14:40,000 --> 00:14:43,000
files

384
00:14:44,800 --> 00:14:46,720
this job file is very similar to the one

385
00:14:46,720 --> 00:14:48,880
we're using for this test run

386
00:14:48,880 --> 00:14:50,000
except we're targeting

387
00:14:50,000 --> 00:14:53,000
nodegoat.site.purpleteamhyphenlabs.com

388
00:14:54,399 --> 00:14:56,160
which is deployed using the purpleteam

389
00:14:56,160 --> 00:14:58,399
infrastructure as code system under test

390
00:14:58,399 --> 00:15:00,800
project

391
00:15:02,000 --> 00:15:05,040
the new bugs panel of the cli shows bugs

392
00:15:05,040 --> 00:15:07,199
over and above any specified alert

393
00:15:07,199 --> 00:15:08,800
thresholds

394
00:15:08,800 --> 00:15:10,800
if this count is above zero then you are

395
00:15:10,800 --> 00:15:12,800
going to have at least one failed test

396
00:15:12,800 --> 00:15:14,160
session

397
00:15:14,160 --> 00:15:16,320
the total test to progress meter to the

398
00:15:16,320 --> 00:15:18,320
right of new bugs

399
00:15:18,320 --> 00:15:20,639
shows the combined progress of all

400
00:15:20,639 --> 00:15:23,639
testers

401
00:15:30,000 --> 00:15:32,240
these logs i'm showing you are the raw

402
00:15:32,240 --> 00:15:34,800
cli logs taken from the current finished

403
00:15:34,800 --> 00:15:37,360
test run this particular log is from the

404
00:15:37,360 --> 00:15:39,920
low priv user test session of the

405
00:15:39,920 --> 00:15:42,160
current test run currently being written

406
00:15:42,160 --> 00:15:44,639
to the top of the two cli window panes

407
00:15:44,639 --> 00:15:46,160
as we speak

408
00:15:46,160 --> 00:15:47,839
you'll notice that this particular test

409
00:15:47,839 --> 00:15:49,839
session is only testing a single route

410
00:15:49,839 --> 00:15:51,839
the profile route of our system under

411
00:15:51,839 --> 00:15:53,519
test

412
00:15:53,519 --> 00:15:55,440
this particular log is from the admin

413
00:15:55,440 --> 00:15:57,440
user test session of the current test

414
00:15:57,440 --> 00:15:59,199
run currently being written to the

415
00:15:59,199 --> 00:16:01,519
bottom of the two cli window panes as we

416
00:16:01,519 --> 00:16:02,639
speak

417
00:16:02,639 --> 00:16:04,800
this test session is testing two of our

418
00:16:04,800 --> 00:16:06,800
system under test routes the profile

419
00:16:06,800 --> 00:16:09,759
route followed by the memos route

420
00:16:09,759 --> 00:16:11,759
as you can see the server tester is

421
00:16:11,759 --> 00:16:14,800
currently inactive

422
00:16:15,199 --> 00:16:17,759
now we're looking at the tls tester log

423
00:16:17,759 --> 00:16:20,079
there's only ever one of these per test

424
00:16:20,079 --> 00:16:23,079
run

425
00:16:23,680 --> 00:16:25,600
you'll notice the color codes in amongst

426
00:16:25,600 --> 00:16:26,880
the text

427
00:16:26,880 --> 00:16:29,040
these are used to display the log text

428
00:16:29,040 --> 00:16:30,160
and color

429
00:16:30,160 --> 00:16:34,279
we'll see how this works soon

430
00:16:46,720 --> 00:16:48,560
we're looking at the same cli logs as

431
00:16:48,560 --> 00:16:49,759
before

432
00:16:49,759 --> 00:16:52,240
tools such as cat less and tail if

433
00:16:52,240 --> 00:16:54,000
configured correctly will render the

434
00:16:54,000 --> 00:16:55,600
color codes

435
00:16:55,600 --> 00:16:58,000
just reiterating that these cli logs are

436
00:16:58,000 --> 00:16:59,600
currently being written

437
00:16:59,600 --> 00:17:01,199
i've just taken them from the finished

438
00:17:01,199 --> 00:17:02,720
test run

439
00:17:02,720 --> 00:17:04,880
this is the low proof user test session

440
00:17:04,880 --> 00:17:07,839
cli log from the application tester

441
00:17:07,839 --> 00:17:09,839
as you can see this is a failed t

442
00:17:09,839 --> 00:17:11,760
session

443
00:17:11,760 --> 00:17:13,679
this is the one and only tls scanner

444
00:17:13,679 --> 00:17:15,839
test session cli log that i showed you

445
00:17:15,839 --> 00:17:16,959
before

446
00:17:16,959 --> 00:17:19,520
but with the color codes rendered

447
00:17:19,520 --> 00:17:21,679
these cli logs are what is printed to

448
00:17:21,679 --> 00:17:23,760
the cli terminal if you are running it

449
00:17:23,760 --> 00:17:26,959
in qe mode versus no ui mode right

450
00:17:26,959 --> 00:17:29,280
arrowing and left arrowing in the cli

451
00:17:29,280 --> 00:17:30,960
terminal will switch between the

452
00:17:30,960 --> 00:17:33,360
different tester windows as you can see

453
00:17:33,360 --> 00:17:35,360
this is a failed t session when you see

454
00:17:35,360 --> 00:17:37,679
the outcomes have been downloaded to

455
00:17:37,679 --> 00:17:39,840
message that means the test run is

456
00:17:39,840 --> 00:17:41,919
complete and you can now inspect the

457
00:17:41,919 --> 00:17:45,039
report files generated by the ema series

458
00:17:45,039 --> 00:17:47,039
and the result files generated by

459
00:17:47,039 --> 00:17:49,600
cucumber

460
00:17:49,600 --> 00:17:51,440
this is what the outcomes archive looks

461
00:17:51,440 --> 00:17:53,039
like once it's been packed by the

462
00:17:53,039 --> 00:17:55,600
orchestrator and sent to the cli

463
00:17:55,600 --> 00:17:57,520
you'll notice the report and result

464
00:17:57,520 --> 00:17:58,880
files

465
00:17:58,880 --> 00:18:01,280
this is the html report file generated

466
00:18:01,280 --> 00:18:03,440
by the application emissary

467
00:18:03,440 --> 00:18:05,120
zap proxy

468
00:18:05,120 --> 00:18:07,760
for the low priv user app scanner test

469
00:18:07,760 --> 00:18:09,039
session

470
00:18:09,039 --> 00:18:11,440
it lists the alerts or defects along

471
00:18:11,440 --> 00:18:13,200
with how they were found

472
00:18:13,200 --> 00:18:14,960
how you can reproduce them

473
00:18:14,960 --> 00:18:19,640
as well as directions for fixing them

474
00:19:07,440 --> 00:19:09,760
this is the html report file generated

475
00:19:09,760 --> 00:19:11,679
by the application emissary for the

476
00:19:11,679 --> 00:19:16,840
admin user app scanner test session

477
00:19:27,919 --> 00:19:30,240
this is the html report file generated

478
00:19:30,240 --> 00:19:32,240
by the tls emissary

479
00:19:32,240 --> 00:19:34,799
testy zazelle dot sh

480
00:19:34,799 --> 00:19:36,960
for the one and only tls scanner test

481
00:19:36,960 --> 00:19:39,840
session

482
00:20:01,679 --> 00:20:03,520
this is the markdown report file

483
00:20:03,520 --> 00:20:05,919
generated by the application emissary

484
00:20:05,919 --> 00:20:08,720
for the low profuser app scanner test

485
00:20:08,720 --> 00:20:11,720
session

486
00:20:40,640 --> 00:20:42,559
this is the markdown report file

487
00:20:42,559 --> 00:20:44,960
generated by the application emissary

488
00:20:44,960 --> 00:20:47,360
for the admin user appscanner test

489
00:20:47,360 --> 00:20:49,840
session

490
00:21:21,919 --> 00:21:25,039
this is the csv report file generated by

491
00:21:25,039 --> 00:21:27,520
the tls emissary for the one and only

492
00:21:27,520 --> 00:21:31,840
tls scanner test session

493
00:21:36,559 --> 00:21:38,559
here i'm highlighting the severity

494
00:21:38,559 --> 00:21:39,679
levels

495
00:21:39,679 --> 00:21:43,440
these can be one of low medium high or

496
00:21:43,440 --> 00:21:45,679
critical

497
00:21:45,679 --> 00:21:47,760
refer to the job file documentation for

498
00:21:47,760 --> 00:21:51,799
further details on these

499
00:21:58,640 --> 00:22:01,440
this is the json report file generated

500
00:22:01,440 --> 00:22:04,559
by the tls emissary for the one and only

501
00:22:04,559 --> 00:22:08,678
telescanner test session

502
00:22:18,960 --> 00:22:21,039
these are the three indie json result

503
00:22:21,039 --> 00:22:23,440
files generated by cucumber for the

504
00:22:23,440 --> 00:22:25,440
three test sessions

505
00:22:25,440 --> 00:22:28,080
likewive user appscanation

506
00:22:28,080 --> 00:22:31,120
admin user appscanner test session and

507
00:22:31,120 --> 00:22:35,520
the one and only tli scanner decision

508
00:22:38,240 --> 00:22:40,559
the appscana admin user test session for

509
00:22:40,559 --> 00:22:43,039
the profile route has completed

510
00:22:43,039 --> 00:22:45,679
it's now starting on the memos route the

511
00:22:45,679 --> 00:22:48,080
appscanner low priv user test session

512
00:22:48,080 --> 00:22:50,320
for the single profile route has

513
00:22:50,320 --> 00:22:51,520
finished

514
00:22:51,520 --> 00:22:53,200
the log which has just scrolled off the

515
00:22:53,200 --> 00:22:54,480
screen provides

516
00:22:54,480 --> 00:22:56,799
defect counts and details of where to

517
00:22:56,799 --> 00:22:59,280
look in the reports

518
00:22:59,280 --> 00:23:01,280
this is the log and outcomes files

519
00:23:01,280 --> 00:23:04,280
documentation

520
00:23:12,960 --> 00:23:15,600
the appscanner admin user test session

521
00:23:15,600 --> 00:23:18,240
for the memos route has completed

522
00:23:18,240 --> 00:23:19,840
which means the test session its

523
00:23:19,840 --> 00:23:21,360
earnings finished

524
00:23:21,360 --> 00:23:23,760
in this case both loper user and admin

525
00:23:23,760 --> 00:23:26,240
user test sessions have failed

526
00:23:26,240 --> 00:23:28,400
the cli log file that i showed earlier

527
00:23:28,400 --> 00:23:30,080
contains details of how to use the

528
00:23:30,080 --> 00:23:32,640
report files to locate and remediate the

529
00:23:32,640 --> 00:23:33,760
defects

530
00:23:33,760 --> 00:23:35,760
you'll also notice that the stage 2

531
00:23:35,760 --> 00:23:37,600
containers have been brought down

532
00:23:37,600 --> 00:23:39,919
and we've just right arrowed to the tls

533
00:23:39,919 --> 00:23:43,880
tester to watch it finished

534
00:23:57,360 --> 00:24:00,360
my

535
00:24:04,240 --> 00:24:06,000
all right kim it looks like our video

536
00:24:06,000 --> 00:24:09,360
has ended you can go ahead and

537
00:24:09,360 --> 00:24:11,120
pick up on your share and we've got a

538
00:24:11,120 --> 00:24:14,240
couple couple more minutes to

539
00:24:14,240 --> 00:24:15,840
go over your your

540
00:24:15,840 --> 00:24:17,520
closing

541
00:24:17,520 --> 00:24:20,080
audio

542
00:24:27,919 --> 00:24:29,360
cool

543
00:24:29,360 --> 00:24:30,960
so yeah we're looking for contributors

544
00:24:30,960 --> 00:24:32,960
to help build purple team out if you're

545
00:24:32,960 --> 00:24:34,960
interested

546
00:24:34,960 --> 00:24:35,840
if you

547
00:24:35,840 --> 00:24:38,240
i don't have huge amounts of skill and

548
00:24:38,240 --> 00:24:39,520
programming in that sort of thing and

549
00:24:39,520 --> 00:24:42,000
you have some other skills or

550
00:24:42,000 --> 00:24:43,679
are you quite junior

551
00:24:43,679 --> 00:24:46,159
then we're still keen on

552
00:24:46,159 --> 00:24:47,679
getting your hands

553
00:24:47,679 --> 00:24:49,120
on keyboards

554
00:24:49,120 --> 00:24:50,400
to help us out

555
00:24:50,400 --> 00:24:51,360
um

556
00:24:51,360 --> 00:24:53,279
and yeah so that's that's pretty much i

557
00:24:53,279 --> 00:24:55,679
was purple team in a nutshell

558
00:24:55,679 --> 00:24:59,039
there's a twitter link for you to

559
00:24:59,039 --> 00:25:00,799
follow or do whatever you want to do

560
00:25:00,799 --> 00:25:01,600
with

561
00:25:01,600 --> 00:25:06,039
and that's that's purple team

