1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,080 --> 00:00:10,000
again i'm jeremy long

3
00:00:10,000 --> 00:00:13,759
at ctxt on twitter uh if you so care

4
00:00:13,759 --> 00:00:15,360
um here's talking about software

5
00:00:15,360 --> 00:00:17,199
composition analysis with owasp

6
00:00:17,199 --> 00:00:20,160
dependency check i do like that i got a

7
00:00:20,160 --> 00:00:22,480
reference in the previous talk on the

8
00:00:22,480 --> 00:00:24,960
oauth.10 how they uh used my tool to do

9
00:00:24,960 --> 00:00:27,840
some analysis that was that was kind of

10
00:00:27,840 --> 00:00:29,920
kind of interesting i'm always surprised

11
00:00:29,920 --> 00:00:32,159
at how and where dependency check gets

12
00:00:32,159 --> 00:00:34,320
used

13
00:00:34,320 --> 00:00:36,719
so i hope software composition analysis

14
00:00:36,719 --> 00:00:38,079
in this day and age

15
00:00:38,079 --> 00:00:40,399
doesn't need to be explained when i

16
00:00:40,399 --> 00:00:42,640
started dependency check

17
00:00:42,640 --> 00:00:44,160
it absolutely did but this is the

18
00:00:44,160 --> 00:00:46,559
obligatory slide uh basically we're

19
00:00:46,559 --> 00:00:48,320
identifying potential areas of risk from

20
00:00:48,320 --> 00:00:50,000
the use of third-party commercial and

21
00:00:50,000 --> 00:00:51,760
open source components

22
00:00:51,760 --> 00:00:53,199
very

23
00:00:53,199 --> 00:00:54,719
simply stated

24
00:00:54,719 --> 00:00:57,840
primary risks are legal risk and known

25
00:00:57,840 --> 00:01:00,480
published or public vulnerabilities

26
00:01:00,480 --> 00:01:02,719
dependency check itself doesn't do a

27
00:01:02,719 --> 00:01:04,159
whole lot for the

28
00:01:04,159 --> 00:01:06,880
legal risk it will report what the

29
00:01:06,880 --> 00:01:09,840
license is if it identifies it

30
00:01:09,840 --> 00:01:12,960
but that is not its primary purpose

31
00:01:12,960 --> 00:01:15,280
not even a little bit

32
00:01:15,280 --> 00:01:18,240
so it is primarily trying to identify

33
00:01:18,240 --> 00:01:20,320
known vulnerable known vulnerabilities

34
00:01:20,320 --> 00:01:23,600
within your project's dependencies

35
00:01:23,600 --> 00:01:26,640
um as we're here uh with the 20th

36
00:01:26,640 --> 00:01:29,759
anniversary of owasp i realized as i was

37
00:01:29,759 --> 00:01:31,840
looking at this deck putting it together

38
00:01:31,840 --> 00:01:35,119
that dependency check is about 10 years

39
00:01:35,119 --> 00:01:37,600
old now i started writing it november

40
00:01:37,600 --> 00:01:41,280
2011. um before software composition

41
00:01:41,280 --> 00:01:44,560
analysis was even a known term

42
00:01:44,560 --> 00:01:45,840
i think the first paper was the

43
00:01:45,840 --> 00:01:47,439
unfortunate realities of insecure

44
00:01:47,439 --> 00:01:50,798
software by jeff williams

45
00:01:51,040 --> 00:01:52,799
in april and

46
00:01:52,799 --> 00:01:54,640
dependency check out our first release

47
00:01:54,640 --> 00:01:57,520
mid-2012 and since then we've seen an

48
00:01:57,520 --> 00:02:00,159
explosion of sda tools on the market

49
00:02:00,159 --> 00:02:02,240
uh

50
00:02:02,240 --> 00:02:04,719
people not doing sca correctly has been

51
00:02:04,719 --> 00:02:06,560
the

52
00:02:06,560 --> 00:02:08,399
cause of several breaches that have

53
00:02:08,399 --> 00:02:10,639
happened uh

54
00:02:10,639 --> 00:02:13,040
and and even getting to the point of

55
00:02:13,040 --> 00:02:15,680
with the 2021 executive order to improve

56
00:02:15,680 --> 00:02:18,480
cyber security and that explicitly

57
00:02:18,480 --> 00:02:20,400
referenced uh some of the supply chain

58
00:02:20,400 --> 00:02:23,120
risks um that software composition

59
00:02:23,120 --> 00:02:25,280
analysis helps to

60
00:02:25,280 --> 00:02:27,760
mitigate

61
00:02:28,720 --> 00:02:29,599
so

62
00:02:29,599 --> 00:02:31,680
again i i like to give a little overview

63
00:02:31,680 --> 00:02:34,720
of our journey within dependency check

64
00:02:34,720 --> 00:02:36,640
when i first wrote it back started

65
00:02:36,640 --> 00:02:38,879
writing it was really focused just on

66
00:02:38,879 --> 00:02:42,160
java um and the community

67
00:02:42,160 --> 00:02:44,400
after they saw what i had done for java

68
00:02:44,400 --> 00:02:46,879
started contributing back.net

69
00:02:46,879 --> 00:02:49,760
ruby node python a lot of other language

70
00:02:49,760 --> 00:02:52,160
support was contributed from from pull

71
00:02:52,160 --> 00:02:53,440
requests

72
00:02:53,440 --> 00:02:55,280
uh i do want to point out even though

73
00:02:55,280 --> 00:02:57,760
some of these integrations or supported

74
00:02:57,760 --> 00:02:59,760
languages have been around and in use

75
00:02:59,760 --> 00:03:01,599
with independency check

76
00:03:01,599 --> 00:03:04,319
not all of them are equal

77
00:03:04,319 --> 00:03:06,400
some of them are still are listed as

78
00:03:06,400 --> 00:03:09,280
experimental analyzers we're hoping when

79
00:03:09,280 --> 00:03:11,040
we have time

80
00:03:11,040 --> 00:03:12,800
we can try and finish them off and

81
00:03:12,800 --> 00:03:14,239
polish them a little bit more to take

82
00:03:14,239 --> 00:03:17,040
them out of that experimental status

83
00:03:17,040 --> 00:03:19,599
but with the experimental analyzers uh

84
00:03:19,599 --> 00:03:21,360
you're still getting results but you may

85
00:03:21,360 --> 00:03:23,200
have a slightly higher false negative

86
00:03:23,200 --> 00:03:25,440
and false positive rates um and we'll

87
00:03:25,440 --> 00:03:27,280
talk about that a little bit later

88
00:03:27,280 --> 00:03:30,640
uh in the uh in the talk but

89
00:03:30,640 --> 00:03:32,159
one of the things with dependency check

90
00:03:32,159 --> 00:03:34,000
is for some of these experimental

91
00:03:34,000 --> 00:03:37,280
analyzers uh we wanted you to knowingly

92
00:03:37,280 --> 00:03:39,680
have to turn these on by enabling the

93
00:03:39,680 --> 00:03:41,280
experimental flag when you run

94
00:03:41,280 --> 00:03:43,120
dependency check

95
00:03:43,120 --> 00:03:44,720
we also wrap some other tools like

96
00:03:44,720 --> 00:03:46,879
bundler audit if you're doing ruby

97
00:03:46,879 --> 00:03:49,360
retire.js we use their client-side

98
00:03:49,360 --> 00:03:51,920
javascript scanning technology

99
00:03:51,920 --> 00:03:54,000
npm audit for some of the node and yarn

100
00:03:54,000 --> 00:03:55,040
projects

101
00:03:55,040 --> 00:03:59,439
and oss index huge fan of oss index

102
00:03:59,439 --> 00:04:02,319
sonotype after purchasing the oss index

103
00:04:02,319 --> 00:04:04,560
actually uh contributed

104
00:04:04,560 --> 00:04:07,280
the oss index analyzer to the dependency

105
00:04:07,280 --> 00:04:08,720
check project

106
00:04:08,720 --> 00:04:10,640
uh it's really cool

107
00:04:10,640 --> 00:04:12,239
i'll talk a little bit more about that

108
00:04:12,239 --> 00:04:14,080
in in a slider two

109
00:04:14,080 --> 00:04:16,720
um as we continue down the journey uh

110
00:04:16,720 --> 00:04:18,720
not only did we expand on our

111
00:04:18,720 --> 00:04:20,798
uh languages and technologies that we

112
00:04:20,798 --> 00:04:21,918
supported

113
00:04:21,918 --> 00:04:24,479
but we also expanded um

114
00:04:24,479 --> 00:04:26,880
into you know we had maven and gradle

115
00:04:26,880 --> 00:04:29,680
and lean and sbt

116
00:04:29,680 --> 00:04:32,240
and other integrations like azure devops

117
00:04:32,240 --> 00:04:34,960
uh jenkins sonar cube uh we of course

118
00:04:34,960 --> 00:04:37,680
have our cli and the docker images um as

119
00:04:37,680 --> 00:04:39,120
well

120
00:04:39,120 --> 00:04:40,080
um

121
00:04:40,080 --> 00:04:42,320
there's four of these that are astra and

122
00:04:42,320 --> 00:04:45,600
those are the actual build tools

123
00:04:45,600 --> 00:04:47,520
i can't stress enough if you're using

124
00:04:47,520 --> 00:04:49,120
dependency check

125
00:04:49,120 --> 00:04:51,360
do everything you can to use one of

126
00:04:51,360 --> 00:04:53,520
these four integrations um if you if

127
00:04:53,520 --> 00:04:54,720
you're scanning

128
00:04:54,720 --> 00:04:58,080
uh you know a maven or a gradle project

129
00:04:58,080 --> 00:05:00,639
use the maven or gradle plugin don't use

130
00:05:00,639 --> 00:05:02,160
the docker image or the command line

131
00:05:02,160 --> 00:05:03,759
integration

132
00:05:03,759 --> 00:05:05,600
there's

133
00:05:05,600 --> 00:05:07,759
many benefits we actually get more

134
00:05:07,759 --> 00:05:08,960
information when we're doing the

135
00:05:08,960 --> 00:05:11,039
analysis if we're actually using the

136
00:05:11,039 --> 00:05:12,000
maven

137
00:05:12,000 --> 00:05:13,360
if we're actually using a build plug-in

138
00:05:13,360 --> 00:05:15,199
because we actually get information from

139
00:05:15,199 --> 00:05:18,240
the build it's not just

140
00:05:18,240 --> 00:05:19,919
uh what we can find from the files on

141
00:05:19,919 --> 00:05:21,919
disk i've actually

142
00:05:21,919 --> 00:05:23,520
had conversations with people who tried

143
00:05:23,520 --> 00:05:25,680
to use docker or cli to scan a maven

144
00:05:25,680 --> 00:05:28,800
project but they never ran um a build or

145
00:05:28,800 --> 00:05:32,240
copy dependencies and so there was no

146
00:05:32,240 --> 00:05:33,600
there was nothing for dependency check

147
00:05:33,600 --> 00:05:35,120
to analyze and they found zero results

148
00:05:35,120 --> 00:05:37,280
when they used the cli

149
00:05:37,280 --> 00:05:40,000
because it was a security analyst who

150
00:05:40,000 --> 00:05:41,680
wasn't really a developer trying to run

151
00:05:41,680 --> 00:05:43,039
this so

152
00:05:43,039 --> 00:05:44,400
uh

153
00:05:44,400 --> 00:05:46,160
if at all possible

154
00:05:46,160 --> 00:05:48,000
work with your development teams when

155
00:05:48,000 --> 00:05:50,080
working when integrating this work with

156
00:05:50,080 --> 00:05:52,479
your build pipeline people your your

157
00:05:52,479 --> 00:05:54,479
pipeline uh

158
00:05:54,479 --> 00:05:55,440
folks

159
00:05:55,440 --> 00:05:57,440
uh to get this integrated correctly into

160
00:05:57,440 --> 00:05:59,600
into the build environments

161
00:05:59,600 --> 00:06:01,919
um

162
00:06:01,919 --> 00:06:04,240
that being said uh

163
00:06:04,240 --> 00:06:06,479
let's talk about where we are today

164
00:06:06,479 --> 00:06:10,319
uh it's a flab flagship project um

165
00:06:10,319 --> 00:06:11,840
i still can't believe how many people

166
00:06:11,840 --> 00:06:13,840
are actually using dependency check

167
00:06:13,840 --> 00:06:17,280
uh we used to host a lot of the um like

168
00:06:17,280 --> 00:06:19,600
the fan line tool and the ant plug-in on

169
00:06:19,600 --> 00:06:21,039
bin tray but

170
00:06:21,039 --> 00:06:24,800
that was shut down may may 1 2021 and

171
00:06:24,800 --> 00:06:26,720
if we just since we started publishing

172
00:06:26,720 --> 00:06:28,880
things to the github releases

173
00:06:28,880 --> 00:06:31,680
since that migration from ben tray to

174
00:06:31,680 --> 00:06:33,600
github we already have a million

175
00:06:33,600 --> 00:06:35,840
downloads of the of the command line uh

176
00:06:35,840 --> 00:06:36,800
tool

177
00:06:36,800 --> 00:06:38,479
um we've got two and a half million

178
00:06:38,479 --> 00:06:40,400
pulls of the docker image

179
00:06:40,400 --> 00:06:42,479
uh just in august alone the maven and

180
00:06:42,479 --> 00:06:45,039
gradle plugins have 200 250 000

181
00:06:45,039 --> 00:06:46,240
downloads

182
00:06:46,240 --> 00:06:50,240
if this tool is being heavily used and

183
00:06:50,240 --> 00:06:53,199
i'm glad people have found our work uh

184
00:06:53,199 --> 00:06:55,360
useful

185
00:06:55,360 --> 00:06:57,520
um how we actually

186
00:06:57,520 --> 00:06:59,440
uh

187
00:06:59,440 --> 00:07:02,000
get work is that we use uh our primary

188
00:07:02,000 --> 00:07:05,440
data sources are the nvd um

189
00:07:05,440 --> 00:07:07,039
i really want to talk about the nvd

190
00:07:07,039 --> 00:07:08,880
because recently they have started

191
00:07:08,880 --> 00:07:11,440
adding um

192
00:07:11,440 --> 00:07:13,759
uh what i'm almost might call abuse

193
00:07:13,759 --> 00:07:15,440
filtering

194
00:07:15,440 --> 00:07:19,120
or rate limiting because

195
00:07:19,199 --> 00:07:22,720
if you try and download one of the

196
00:07:22,720 --> 00:07:25,680
json data feeds from nist and then you

197
00:07:25,680 --> 00:07:27,280
immediately try and download it again

198
00:07:27,280 --> 00:07:28,720
that second download is probably going

199
00:07:28,720 --> 00:07:32,000
to hang or just fail

200
00:07:32,000 --> 00:07:34,400
because

201
00:07:35,120 --> 00:07:36,160
you know they have to protect their

202
00:07:36,160 --> 00:07:38,000
bandwidth and

203
00:07:38,000 --> 00:07:40,720
and what not not rightfully so

204
00:07:40,720 --> 00:07:42,240
the way dependency check works by

205
00:07:42,240 --> 00:07:45,759
default is it caches

206
00:07:45,759 --> 00:07:48,639
the nvd data locally in an h2 database

207
00:07:48,639 --> 00:07:50,639
it creates a little data directory and

208
00:07:50,639 --> 00:07:52,639
and keeps a cache of that one of the

209
00:07:52,639 --> 00:07:53,680
things that i've

210
00:07:53,680 --> 00:07:55,520
talked to some people about

211
00:07:55,520 --> 00:07:58,000
is that some of some of the are using

212
00:07:58,000 --> 00:07:59,759
more of an ephemeral build environment

213
00:07:59,759 --> 00:08:01,280
when they're running dependency check

214
00:08:01,280 --> 00:08:03,120
and they're just throwing away that data

215
00:08:03,120 --> 00:08:06,240
directory and just not caring and

216
00:08:06,240 --> 00:08:08,400
the next time they spin up a new image

217
00:08:08,400 --> 00:08:10,000
and they try and download the nvd and

218
00:08:10,000 --> 00:08:11,440
they're running into problems because

219
00:08:11,440 --> 00:08:12,960
they can't

220
00:08:12,960 --> 00:08:14,879
uh the nvd ends up blocking them because

221
00:08:14,879 --> 00:08:16,319
they can't and they can't download it

222
00:08:16,319 --> 00:08:17,120
again

223
00:08:17,120 --> 00:08:18,800
um so there's a couple of ways around

224
00:08:18,800 --> 00:08:20,400
that figure out how to cache that data

225
00:08:20,400 --> 00:08:22,720
directory that would be one highly

226
00:08:22,720 --> 00:08:24,080
recommend that

227
00:08:24,080 --> 00:08:24,960
um

228
00:08:24,960 --> 00:08:27,199
or consider setting up an uh a mirror of

229
00:08:27,199 --> 00:08:29,759
the nvd that's also um

230
00:08:29,759 --> 00:08:31,360
huge uh

231
00:08:31,360 --> 00:08:33,919
help to ensure reliability of the

232
00:08:33,919 --> 00:08:35,599
dependency check project in your

233
00:08:35,599 --> 00:08:37,919
organization

234
00:08:37,919 --> 00:08:39,440
um

235
00:08:39,440 --> 00:08:42,799
with that we also use the oss index as i

236
00:08:42,799 --> 00:08:44,080
said

237
00:08:44,080 --> 00:08:45,600
um that actually identifies

238
00:08:45,600 --> 00:08:49,120
vulnerabilities that are not in the nvd

239
00:08:49,120 --> 00:08:51,519
but i do want to point out uh that when

240
00:08:51,519 --> 00:08:56,800
you're using the oss index uh all of the

241
00:08:57,519 --> 00:09:00,000
package urls all of the the information

242
00:09:00,000 --> 00:09:01,680
about that dependency check

243
00:09:01,680 --> 00:09:03,360
collects about

244
00:09:03,360 --> 00:09:07,120
your dependencies that list is sent to

245
00:09:07,120 --> 00:09:09,519
the oss index for analysis

246
00:09:09,519 --> 00:09:10,480
um

247
00:09:10,480 --> 00:09:12,560
some people don't like that they want to

248
00:09:12,560 --> 00:09:15,200
keep that a little bit more private

249
00:09:15,200 --> 00:09:18,399
and that's fine but then they will lose

250
00:09:18,399 --> 00:09:20,839
out on being able to

251
00:09:20,839 --> 00:09:23,920
uh get any of the vulnerabilities that

252
00:09:23,920 --> 00:09:26,240
aren't that are in the oss index that

253
00:09:26,240 --> 00:09:29,279
are not in the nvd

254
00:09:29,279 --> 00:09:30,320
um

255
00:09:30,320 --> 00:09:32,959
and as i've mentioned we also use npm

256
00:09:32,959 --> 00:09:34,480
audit

257
00:09:34,480 --> 00:09:37,040
and that is used for both yarn and and

258
00:09:37,040 --> 00:09:39,519
node.js analysis with npm

259
00:09:39,519 --> 00:09:42,320
and again similar data as with oss index

260
00:09:42,320 --> 00:09:44,000
is sent to

261
00:09:44,000 --> 00:09:45,519
uh the

262
00:09:45,519 --> 00:09:46,800
npm

263
00:09:46,800 --> 00:09:47,680
um

264
00:09:47,680 --> 00:09:50,000
and then as uh mentioned earlier we also

265
00:09:50,000 --> 00:09:52,320
use data from bundle audit and retire.js

266
00:09:52,320 --> 00:09:54,320
but in those cases that data is just

267
00:09:54,320 --> 00:09:56,880
pulled down locally and and used

268
00:09:56,880 --> 00:09:58,080
locally we're not sending any

269
00:09:58,080 --> 00:10:01,279
information out

270
00:10:01,360 --> 00:10:02,160
so

271
00:10:02,160 --> 00:10:04,560
once we have all that data to do our

272
00:10:04,560 --> 00:10:06,959
analysis with how does dependency check

273
00:10:06,959 --> 00:10:08,560
actually work

274
00:10:08,560 --> 00:10:09,519
well

275
00:10:09,519 --> 00:10:10,560
uh

276
00:10:10,560 --> 00:10:13,600
we keep a local copy of the nvd um and

277
00:10:13,600 --> 00:10:15,680
that has the common vulnerability and

278
00:10:15,680 --> 00:10:16,959
exposures

279
00:10:16,959 --> 00:10:20,640
uh and every cve has a description

280
00:10:20,640 --> 00:10:22,640
uh cvss score

281
00:10:22,640 --> 00:10:25,279
and a list of the common platform

282
00:10:25,279 --> 00:10:28,880
enumeration um the cpe the software that

283
00:10:28,880 --> 00:10:30,000
is

284
00:10:30,000 --> 00:10:32,160
uh known to be that that is vulnerable

285
00:10:32,160 --> 00:10:35,200
to that to that cpe

286
00:10:35,200 --> 00:10:36,480
one of the things i always like to talk

287
00:10:36,480 --> 00:10:38,240
about when we're when we're looking at

288
00:10:38,240 --> 00:10:40,480
the cve data is

289
00:10:40,480 --> 00:10:41,279
one

290
00:10:41,279 --> 00:10:43,279
this is public data

291
00:10:43,279 --> 00:10:44,320
um

292
00:10:44,320 --> 00:10:46,959
this is for the blue team

293
00:10:46,959 --> 00:10:49,200
and the attackers it's

294
00:10:49,200 --> 00:10:50,320
you know

295
00:10:50,320 --> 00:10:52,880
once once a cve is published

296
00:10:52,880 --> 00:10:54,880
even the bad guys know about it

297
00:10:54,880 --> 00:10:56,000
uh

298
00:10:56,000 --> 00:10:58,320
one of my favorite examples is from

299
00:10:58,320 --> 00:11:00,720
prime faces

300
00:11:00,720 --> 00:11:02,800
a few years ago a remote code execution

301
00:11:02,800 --> 00:11:06,079
vulnerability a cve was published

302
00:11:06,079 --> 00:11:08,959
it was published like uh january uh or

303
00:11:08,959 --> 00:11:11,760
december i forget the exact time frame

304
00:11:11,760 --> 00:11:13,760
the vulnerability

305
00:11:13,760 --> 00:11:15,920
was actually

306
00:11:15,920 --> 00:11:18,640
discussed and in a github issue

307
00:11:18,640 --> 00:11:19,760
patched

308
00:11:19,760 --> 00:11:23,279
like two or three years earlier

309
00:11:23,680 --> 00:11:25,680
prior to that cde being published but

310
00:11:25,680 --> 00:11:27,519
eventually some somebody

311
00:11:27,519 --> 00:11:29,440
realized that and said hey there's a cve

312
00:11:29,440 --> 00:11:30,959
on these versions of

313
00:11:30,959 --> 00:11:32,640
of prime faces and

314
00:11:32,640 --> 00:11:34,079
because that cve had never been

315
00:11:34,079 --> 00:11:37,680
published nobody upgraded

316
00:11:37,680 --> 00:11:39,279
and so as soon as we had a remote code

317
00:11:39,279 --> 00:11:41,279
execution cve

318
00:11:41,279 --> 00:11:44,720
um bitcoin miners started popping prime

319
00:11:44,720 --> 00:11:46,160
faces sites

320
00:11:46,160 --> 00:11:49,839
and putting miners on their servers uh

321
00:11:49,839 --> 00:11:51,680
and so this is one of the reasons why

322
00:11:51,680 --> 00:11:53,920
you want to kind of pay attention to at

323
00:11:53,920 --> 00:11:56,959
least at a minimum what hits the nvd

324
00:11:56,959 --> 00:11:59,680
because once it hits the nvd it's public

325
00:11:59,680 --> 00:12:02,160
and that's been the cause of

326
00:12:02,160 --> 00:12:04,480
uh several data breaches because people

327
00:12:04,480 --> 00:12:06,959
weren't doing sca properly they weren't

328
00:12:06,959 --> 00:12:09,279
monitoring everything and that's where

329
00:12:09,279 --> 00:12:10,399
uh

330
00:12:10,399 --> 00:12:12,639
why we have some of that uh executive

331
00:12:12,639 --> 00:12:15,680
orders on supply chain and the s and the

332
00:12:15,680 --> 00:12:17,440
discussions of s-bomb

333
00:12:17,440 --> 00:12:19,519
uh you know dependency tracks steve's

334
00:12:19,519 --> 00:12:21,440
tool i believe he has a talk in in this

335
00:12:21,440 --> 00:12:22,560
track as well i don't remember if he's

336
00:12:22,560 --> 00:12:24,560
given it already or not but

337
00:12:24,560 --> 00:12:27,440
dependency track is another great tool

338
00:12:27,440 --> 00:12:30,720
to help solve this problem

339
00:12:30,720 --> 00:12:33,279
uh so one of the big things that

340
00:12:33,279 --> 00:12:35,200
dependency check is

341
00:12:35,200 --> 00:12:38,639
or does is library identification

342
00:12:38,639 --> 00:12:40,639
because if you don't correctly identify

343
00:12:40,639 --> 00:12:42,480
the library there's no way to report on

344
00:12:42,480 --> 00:12:43,279
it

345
00:12:43,279 --> 00:12:45,519
and well that's actually more

346
00:12:45,519 --> 00:12:48,480
challenging than it sounds

347
00:12:48,480 --> 00:12:50,320
because development security don't speak

348
00:12:50,320 --> 00:12:51,600
the same language we use different

349
00:12:51,600 --> 00:12:54,000
identifiers development like for

350
00:12:54,000 --> 00:12:55,360
for the spring framework this is kind of

351
00:12:55,360 --> 00:12:56,959
an old version of the spring framework

352
00:12:56,959 --> 00:13:00,320
uh but it it illustrates a a problem

353
00:13:00,320 --> 00:13:02,639
with the naming that we have

354
00:13:02,639 --> 00:13:05,440
uh development even when this had become

355
00:13:05,440 --> 00:13:07,519
becomes a modern version of spring like

356
00:13:07,519 --> 00:13:10,000
a recent release you know five six i

357
00:13:10,000 --> 00:13:11,920
don't even remember what version spring

358
00:13:11,920 --> 00:13:13,920
the spring framework is on

359
00:13:13,920 --> 00:13:15,279
they're still gonna use org spring

360
00:13:15,279 --> 00:13:18,240
framework spring core spring web spring

361
00:13:18,240 --> 00:13:20,399
boot it's all

362
00:13:20,399 --> 00:13:24,320
you know the same group artifact version

363
00:13:24,320 --> 00:13:25,360
however

364
00:13:25,360 --> 00:13:28,160
security we use the cpes we're really

365
00:13:28,160 --> 00:13:30,480
big about you know

366
00:13:30,480 --> 00:13:32,880
blaming the vendor because a cpe is

367
00:13:32,880 --> 00:13:34,800
vendor product

368
00:13:34,800 --> 00:13:36,480
version

369
00:13:36,480 --> 00:13:38,160
because it's a little bit bigger than

370
00:13:38,160 --> 00:13:40,399
that but the vendor product version is

371
00:13:40,399 --> 00:13:43,760
you know the the main cpe um

372
00:13:43,760 --> 00:13:45,760
and so for the same version

373
00:13:45,760 --> 00:13:47,600
that we have a single coordinate from

374
00:13:47,600 --> 00:13:48,959
development

375
00:13:48,959 --> 00:13:52,240
we had three at one time

376
00:13:52,240 --> 00:13:54,320
different cpes

377
00:13:54,320 --> 00:13:56,079
and

378
00:13:56,079 --> 00:13:57,920
you know there's no comprehensive you

379
00:13:57,920 --> 00:13:58,720
know

380
00:13:58,720 --> 00:14:01,680
mapping between these two things and so

381
00:14:01,680 --> 00:14:03,920
any sch who has to come up with a way of

382
00:14:03,920 --> 00:14:06,000
how do we identify

383
00:14:06,000 --> 00:14:08,560
uh our live the dependencies so that we

384
00:14:08,560 --> 00:14:10,720
can report on vulnerabilities

385
00:14:10,720 --> 00:14:12,079
um

386
00:14:12,079 --> 00:14:13,279
in this case

387
00:14:13,279 --> 00:14:16,079
spring source was bought by vmware

388
00:14:16,079 --> 00:14:17,839
for some versions uh

389
00:14:17,839 --> 00:14:19,519
for some versions of the spring

390
00:14:19,519 --> 00:14:22,560
framework you'll actually see vmware

391
00:14:22,560 --> 00:14:25,040
spring source spring framework as well

392
00:14:25,040 --> 00:14:27,920
uh so there's pivotal pivotal software

393
00:14:27,920 --> 00:14:31,040
spring source and vmware as all vendors

394
00:14:31,040 --> 00:14:33,040
for certain versions of the spring

395
00:14:33,040 --> 00:14:35,040
framework

396
00:14:35,040 --> 00:14:37,199
for certain cds i actually think the the

397
00:14:37,199 --> 00:14:39,440
pivotal and pivotal software i do

398
00:14:39,440 --> 00:14:40,800
believe that has actually been cleaned

399
00:14:40,800 --> 00:14:42,240
up and they've corrected it just to be

400
00:14:42,240 --> 00:14:44,720
pivotal on both of them as opposed to

401
00:14:44,720 --> 00:14:46,800
having two

402
00:14:46,800 --> 00:14:48,800
vendors one being pivotal and one being

403
00:14:48,800 --> 00:14:51,040
pivotal software but it still it shows

404
00:14:51,040 --> 00:14:52,160
the problem

405
00:14:52,160 --> 00:14:54,160
that

406
00:14:54,160 --> 00:14:55,920
because we're looking at the vendor and

407
00:14:55,920 --> 00:14:57,839
not what the developer calls it it's

408
00:14:57,839 --> 00:14:59,600
difficult to

409
00:14:59,600 --> 00:15:02,880
do that identification sometimes

410
00:15:02,880 --> 00:15:06,000
so how does dependency check actually

411
00:15:06,000 --> 00:15:08,079
accomplish this

412
00:15:08,079 --> 00:15:09,920
we use what we call

413
00:15:09,920 --> 00:15:12,079
evidence-based identification uh

414
00:15:12,079 --> 00:15:14,240
basically we extract as much textual

415
00:15:14,240 --> 00:15:16,320
information as we can

416
00:15:16,320 --> 00:15:20,240
from the uh dll jar file the build

417
00:15:20,240 --> 00:15:21,519
system you know if we're integrating

418
00:15:21,519 --> 00:15:23,040
with the build system we try and extract

419
00:15:23,040 --> 00:15:24,959
as much textual information as we can

420
00:15:24,959 --> 00:15:27,760
about every dependency and we bucket

421
00:15:27,760 --> 00:15:29,680
that into vendor product version

422
00:15:29,680 --> 00:15:31,440
collections and we kind of classify them

423
00:15:31,440 --> 00:15:32,880
as this is high confidence low

424
00:15:32,880 --> 00:15:34,240
confidence

425
00:15:34,240 --> 00:15:35,519
evidence

426
00:15:35,519 --> 00:15:39,279
and then uh we create a leucine index

427
00:15:39,279 --> 00:15:41,680
that's a

428
00:15:41,680 --> 00:15:44,079
great text searching engine that you can

429
00:15:44,079 --> 00:15:46,000
index a

430
00:15:46,000 --> 00:15:47,759
ton of data

431
00:15:47,759 --> 00:15:48,959
i think it's funny that we're using it

432
00:15:48,959 --> 00:15:50,079
to index

433
00:15:50,079 --> 00:15:51,519
two fields as opposed to like the

434
00:15:51,519 --> 00:15:53,360
library of congress like it's kind of

435
00:15:53,360 --> 00:15:55,360
intended to be so we're kind of using it

436
00:15:55,360 --> 00:15:56,959
a little inverse

437
00:15:56,959 --> 00:15:58,639
of its intended use case but it works

438
00:15:58,639 --> 00:15:59,920
really well

439
00:15:59,920 --> 00:16:01,120
um

440
00:16:01,120 --> 00:16:02,959
we built some specialized analyzers that

441
00:16:02,959 --> 00:16:04,079
help with the

442
00:16:04,079 --> 00:16:06,399
uh with looking things up in the index

443
00:16:06,399 --> 00:16:07,920
but basically we take all of that

444
00:16:07,920 --> 00:16:10,800
evidence and query the index to identify

445
00:16:10,800 --> 00:16:14,240
the common platform enumeration for

446
00:16:14,240 --> 00:16:16,720
any given dependency

447
00:16:16,720 --> 00:16:18,639
and then based on that we're able to

448
00:16:18,639 --> 00:16:19,839
then

449
00:16:19,839 --> 00:16:21,360
uh

450
00:16:21,360 --> 00:16:23,279
look up the vulnerabilities in the nbd

451
00:16:23,279 --> 00:16:25,040
data so

452
00:16:25,040 --> 00:16:26,560
obviously one of the problems are false

453
00:16:26,560 --> 00:16:28,079
positives

454
00:16:28,079 --> 00:16:30,320
sometimes

455
00:16:30,320 --> 00:16:33,279
evidence extracted from a dependency can

456
00:16:33,279 --> 00:16:34,240
point

457
00:16:34,240 --> 00:16:36,320
dependency check at the wrong common

458
00:16:36,320 --> 00:16:38,880
platform enumeration it happens

459
00:16:38,880 --> 00:16:40,240
um

460
00:16:40,240 --> 00:16:41,519
we'll we'll talk about how to deal with

461
00:16:41,519 --> 00:16:42,720
that in a second

462
00:16:42,720 --> 00:16:45,839
the other is false negatives

463
00:16:45,839 --> 00:16:48,639
uh and that's sometimes when there's not

464
00:16:48,639 --> 00:16:51,519
enough information uh in the

465
00:16:51,519 --> 00:16:53,120
dependency

466
00:16:53,120 --> 00:16:54,079
to

467
00:16:54,079 --> 00:16:56,880
map back to that cpe one of the key

468
00:16:56,880 --> 00:16:58,800
examples is what i was just pointing uh

469
00:16:58,800 --> 00:17:01,440
back with the spring framework pivotal

470
00:17:01,440 --> 00:17:03,519
on that on those versions of spring

471
00:17:03,519 --> 00:17:04,400
framework

472
00:17:04,400 --> 00:17:06,640
there was no mention of the word pivotal

473
00:17:06,640 --> 00:17:08,400
anywhere in

474
00:17:08,400 --> 00:17:09,679
the palm

475
00:17:09,679 --> 00:17:12,640
the manifest the file name there was no

476
00:17:12,640 --> 00:17:14,079
mention of pivotal

477
00:17:14,079 --> 00:17:15,280
um

478
00:17:15,280 --> 00:17:16,480
and so

479
00:17:16,480 --> 00:17:17,919
we have we have ways of dealing with

480
00:17:17,919 --> 00:17:20,079
both of these situations uh with

481
00:17:20,079 --> 00:17:21,679
independency check

482
00:17:21,679 --> 00:17:24,400
uh most users only deal with false

483
00:17:24,400 --> 00:17:25,760
positives they end up reporting the

484
00:17:25,760 --> 00:17:27,439
false negatives back to

485
00:17:27,439 --> 00:17:29,120
uh the core team and we end up

486
00:17:29,120 --> 00:17:33,120
correcting those using uh a hints file

487
00:17:33,120 --> 00:17:36,559
however if you get the html report it is

488
00:17:36,559 --> 00:17:39,840
extremely easy to go through analyze

489
00:17:39,840 --> 00:17:40,799
things

490
00:17:40,799 --> 00:17:43,039
if you're familiar it's easy if you're

491
00:17:43,039 --> 00:17:45,039
familiar with

492
00:17:45,039 --> 00:17:46,880
uh the technology stack that's being

493
00:17:46,880 --> 00:17:48,720
used and the types of dependencies that

494
00:17:48,720 --> 00:17:51,280
are in that technology stack

495
00:17:51,280 --> 00:17:53,520
if you're trying to analyze

496
00:17:53,520 --> 00:17:55,600
you know a technology stack that you're

497
00:17:55,600 --> 00:17:57,679
not as familiar with it may be a little

498
00:17:57,679 --> 00:17:59,919
bit more difficult sometimes to

499
00:17:59,919 --> 00:18:01,520
determine if something is false positive

500
00:18:01,520 --> 00:18:02,720
or not

501
00:18:02,720 --> 00:18:03,600
but

502
00:18:03,600 --> 00:18:05,600
using the html report there are these

503
00:18:05,600 --> 00:18:07,679
little suppress buttons and basically

504
00:18:07,679 --> 00:18:09,440
you can just copy and paste to generate

505
00:18:09,440 --> 00:18:11,679
this suppression file

506
00:18:11,679 --> 00:18:14,240
and you can knock out all of your false

507
00:18:14,240 --> 00:18:15,520
positives

508
00:18:15,520 --> 00:18:18,960
really really quickly and easily

509
00:18:19,039 --> 00:18:21,520
and like i said on the

510
00:18:21,520 --> 00:18:23,360
false negative side

511
00:18:23,360 --> 00:18:25,039
there's a similar thing called a hints

512
00:18:25,039 --> 00:18:25,919
file

513
00:18:25,919 --> 00:18:29,120
that we've added to help deal with uh

514
00:18:29,120 --> 00:18:31,120
the false negatives

515
00:18:31,120 --> 00:18:32,160
and

516
00:18:32,160 --> 00:18:33,760
for most users

517
00:18:33,760 --> 00:18:35,200
i've only known like a couple people

518
00:18:35,200 --> 00:18:37,919
that have even told me that they use a

519
00:18:37,919 --> 00:18:40,400
a hints file on their own um

520
00:18:40,400 --> 00:18:41,840
most of the time it's just an issue back

521
00:18:41,840 --> 00:18:43,280
to the core project

522
00:18:43,280 --> 00:18:45,520
and we will resolve those usually pretty

523
00:18:45,520 --> 00:18:47,840
quickly

524
00:18:47,919 --> 00:18:49,919
so let's talk about using dependency

525
00:18:49,919 --> 00:18:51,200
check

526
00:18:51,200 --> 00:18:52,960
um

527
00:18:52,960 --> 00:18:55,440
the basic steps are just you know

528
00:18:55,440 --> 00:18:58,720
configuring the plug-in you know

529
00:18:58,720 --> 00:19:01,120
you may have to configure a proxy uh or

530
00:19:01,120 --> 00:19:02,799
set up in this data mirror if you if

531
00:19:02,799 --> 00:19:04,400
you're in an organization that's going

532
00:19:04,400 --> 00:19:06,880
to be doing a lot of this analysis

533
00:19:06,880 --> 00:19:08,880
i would highly recommend setting up a

534
00:19:08,880 --> 00:19:11,039
nist data mirror there's a docker image

535
00:19:11,039 --> 00:19:12,799
uh it's a it's a github project miss

536
00:19:12,799 --> 00:19:13,919
data mirror

537
00:19:13,919 --> 00:19:15,440
and there's actually a docker image it's

538
00:19:15,440 --> 00:19:17,360
really easy to set up

539
00:19:17,360 --> 00:19:19,600
to just keep a local copy of the nvd

540
00:19:19,600 --> 00:19:21,440
data that'll save you

541
00:19:21,440 --> 00:19:23,520
a lot of headaches

542
00:19:23,520 --> 00:19:25,600
uh or could save you a lot of headaches

543
00:19:25,600 --> 00:19:28,000
depending on how on how often scans are

544
00:19:28,000 --> 00:19:29,600
happening etc

545
00:19:29,600 --> 00:19:32,320
uh but you run your initial scan

546
00:19:32,320 --> 00:19:34,960
and then analyze the html report uh

547
00:19:34,960 --> 00:19:36,640
create you know and configure a

548
00:19:36,640 --> 00:19:38,799
suppression file if it's needed

549
00:19:38,799 --> 00:19:40,799
uh sometimes you don't even need a

550
00:19:40,799 --> 00:19:43,120
suppression file especially sometimes on

551
00:19:43,120 --> 00:19:45,039
on some java projects because we've gone

552
00:19:45,039 --> 00:19:46,240
through and

553
00:19:46,240 --> 00:19:48,799
and just included a lot of the common

554
00:19:48,799 --> 00:19:50,720
false positives already

555
00:19:50,720 --> 00:19:52,480
but they still absolutely come up false

556
00:19:52,480 --> 00:19:55,120
positives are definitely do do crop up

557
00:19:55,120 --> 00:19:56,559
and you do need and you will sometimes

558
00:19:56,559 --> 00:19:58,720
need to deal with them

559
00:19:58,720 --> 00:20:01,039
and then the other most important thing

560
00:20:01,039 --> 00:20:03,919
is that you need to plan for and upgrade

561
00:20:03,919 --> 00:20:07,039
any identified vulnerable components

562
00:20:07,039 --> 00:20:09,200
of course that is a risk-based decision

563
00:20:09,200 --> 00:20:11,760
for your organization

564
00:20:11,760 --> 00:20:13,679
however i would say if it's a

565
00:20:13,679 --> 00:20:16,000
rce remo code

566
00:20:16,000 --> 00:20:18,640
code serialization type issue

567
00:20:18,640 --> 00:20:20,400
i would probably highly recommend

568
00:20:20,400 --> 00:20:22,640
prioritizing that patch

569
00:20:22,640 --> 00:20:24,240
just uh you know

570
00:20:24,240 --> 00:20:26,720
uh between friends here uh

571
00:20:26,720 --> 00:20:29,120
because once those cvs come out

572
00:20:29,120 --> 00:20:31,360
uh for the remote code executions they

573
00:20:31,360 --> 00:20:34,000
end up quickly being incorporated into

574
00:20:34,000 --> 00:20:36,000
almost script kitty level

575
00:20:36,000 --> 00:20:38,320
uh attack tools

576
00:20:38,320 --> 00:20:39,200
yeah

577
00:20:39,200 --> 00:20:41,520
so i highly recommend if you see

578
00:20:41,520 --> 00:20:45,520
something come up that's like an rce

579
00:20:45,679 --> 00:20:46,799
patch

580
00:20:46,799 --> 00:20:49,799
quickly

581
00:20:50,000 --> 00:20:50,799
so

582
00:20:50,799 --> 00:20:52,159
let's see

583
00:20:52,159 --> 00:20:55,679
that how much time do i have

584
00:20:57,200 --> 00:21:00,000
yeah um

585
00:21:00,480 --> 00:21:03,120
okay so just very quickly

586
00:21:03,120 --> 00:21:05,440
um

587
00:21:05,440 --> 00:21:08,480
running dependency check

588
00:21:08,480 --> 00:21:09,440
so

589
00:21:09,440 --> 00:21:11,760
um i've already kind of run this a

590
00:21:11,760 --> 00:21:12,720
little bit

591
00:21:12,720 --> 00:21:14,159
you know

592
00:21:14,159 --> 00:21:14,960
but

593
00:21:14,960 --> 00:21:17,520
uh dependency check is uh

594
00:21:17,520 --> 00:21:19,120
again i've said

595
00:21:19,120 --> 00:21:21,520
use the the uh the plug-ins when

596
00:21:21,520 --> 00:21:22,480
possible

597
00:21:22,480 --> 00:21:27,440
however uh this is a uh go project uh so

598
00:21:27,440 --> 00:21:29,280
there isn't a build plug-in so we do

599
00:21:29,280 --> 00:21:30,880
kind of have to fall back and use the

600
00:21:30,880 --> 00:21:32,159
command line

601
00:21:32,159 --> 00:21:33,679
uh tool

602
00:21:33,679 --> 00:21:35,919
um but the command line tool it has a

603
00:21:35,919 --> 00:21:37,200
lot of uh

604
00:21:37,200 --> 00:21:39,280
you know options that can be selected

605
00:21:39,280 --> 00:21:42,320
there's actually a command completion

606
00:21:42,320 --> 00:21:44,159
a completion script that you can run on

607
00:21:44,159 --> 00:21:46,640
the command line to to actually make uh

608
00:21:46,640 --> 00:21:49,120
filling out all of those um parameters

609
00:21:49,120 --> 00:21:49,919
uh

610
00:21:49,919 --> 00:21:52,080
much much easier so like you can do

611
00:21:52,080 --> 00:21:55,440
enable and and see the uh

612
00:21:55,440 --> 00:21:57,760
the uh the the the different options

613
00:21:57,760 --> 00:21:59,679
that you have um so i could enable

614
00:21:59,679 --> 00:22:02,720
artifactory i'm not going to but

615
00:22:02,720 --> 00:22:03,919
but um

616
00:22:03,919 --> 00:22:06,080
just out of the box you can see like

617
00:22:06,080 --> 00:22:06,880
uh

618
00:22:06,880 --> 00:22:08,720
some sometimes the analysis goes very

619
00:22:08,720 --> 00:22:10,240
quick if you have to do an up if you

620
00:22:10,240 --> 00:22:13,200
have to do a full update of the nvd data

621
00:22:13,200 --> 00:22:15,360
it could take a couple of minutes uh to

622
00:22:15,360 --> 00:22:17,360
execute depending on you know download

623
00:22:17,360 --> 00:22:19,039
speeds

624
00:22:19,039 --> 00:22:20,559
and whatnot

625
00:22:20,559 --> 00:22:21,440
but

626
00:22:21,440 --> 00:22:24,000
it generally runs pretty quick

627
00:22:24,000 --> 00:22:26,320
sometimes on some of like your larger

628
00:22:26,320 --> 00:22:28,480
node or yarn projects it might be a

629
00:22:28,480 --> 00:22:30,240
little bit slower

630
00:22:30,240 --> 00:22:32,480
just because there are in those

631
00:22:32,480 --> 00:22:35,760
um spaces there are so many dependencies

632
00:22:35,760 --> 00:22:39,440
sometimes um it's it's insane because

633
00:22:39,440 --> 00:22:40,720
you've got dependencies for a single

634
00:22:40,720 --> 00:22:42,320
line of code

635
00:22:42,320 --> 00:22:45,200
who knows whatever

636
00:22:45,600 --> 00:22:48,240
and then once you run that tool then you

637
00:22:48,240 --> 00:22:50,320
end up with the dependency check report

638
00:22:50,320 --> 00:22:52,559
here

639
00:22:52,960 --> 00:22:56,480
probably zoom in a little bit

640
00:22:56,480 --> 00:22:58,320
if i can figure out how to do that on

641
00:22:58,320 --> 00:22:59,679
this keyboard and switch to this

642
00:22:59,679 --> 00:23:02,000
keyboard

643
00:23:02,000 --> 00:23:04,080
yeah uh

644
00:23:04,080 --> 00:23:05,919
and uh

645
00:23:05,919 --> 00:23:07,919
basically it tells you it gives you some

646
00:23:07,919 --> 00:23:10,320
great information up here at the bot at

647
00:23:10,320 --> 00:23:12,960
the top here uh how to read this report

648
00:23:12,960 --> 00:23:15,120
if you haven't used dependency check

649
00:23:15,120 --> 00:23:16,799
highly recommend

650
00:23:16,799 --> 00:23:18,400
how to read the report

651
00:23:18,400 --> 00:23:20,559
suppressing false positives

652
00:23:20,559 --> 00:23:23,440
even though i kind of covered it here um

653
00:23:23,440 --> 00:23:24,720
it's one of those areas that we get a

654
00:23:24,720 --> 00:23:27,280
lot of uh questions on and as you scroll

655
00:23:27,280 --> 00:23:29,200
down

656
00:23:29,200 --> 00:23:31,600
by default it just kind of highlights

657
00:23:31,600 --> 00:23:35,760
the vulnerable dependencies here

658
00:23:35,760 --> 00:23:37,440
but you can click this little button to

659
00:23:37,440 --> 00:23:39,280
see all of the dependencies like some of

660
00:23:39,280 --> 00:23:41,840
these things burnt sushi there was no

661
00:23:41,840 --> 00:23:42,799
um

662
00:23:42,799 --> 00:23:44,480
no vulnerability id for tunnel

663
00:23:44,480 --> 00:23:46,880
identified

664
00:23:46,880 --> 00:23:48,080
so

665
00:23:48,080 --> 00:23:49,760
and then

666
00:23:49,760 --> 00:23:51,840
once again this this is a report that i

667
00:23:51,840 --> 00:23:53,039
have not

668
00:23:53,039 --> 00:23:55,760
um gone through and done any analysis on

669
00:23:55,760 --> 00:23:58,480
the false positives but i can guarantee

670
00:23:58,480 --> 00:24:00,320
um

671
00:24:00,320 --> 00:24:02,880
i'm pretty positive the docker go units

672
00:24:02,880 --> 00:24:06,000
is not docker docker so i could go down

673
00:24:06,000 --> 00:24:08,240
here to go units and just say you know

674
00:24:08,240 --> 00:24:10,640
what this is a false positive click this

675
00:24:10,640 --> 00:24:12,000
button right here

676
00:24:12,000 --> 00:24:14,000
and it pops up this little suppression

677
00:24:14,000 --> 00:24:17,039
that i can just hit ctrl c and copy

678
00:24:17,039 --> 00:24:19,679
um and just paste that into

679
00:24:19,679 --> 00:24:21,279
into a text file and save it as a

680
00:24:21,279 --> 00:24:22,640
suppression file and use it for the next

681
00:24:22,640 --> 00:24:24,880
time that i run the analysis and

682
00:24:24,880 --> 00:24:26,960
it'll be um

683
00:24:26,960 --> 00:24:27,760
you know

684
00:24:27,760 --> 00:24:29,120
this false positive will no longer be

685
00:24:29,120 --> 00:24:30,240
reported

686
00:24:30,240 --> 00:24:31,840
one of the one of the useful things is

687
00:24:31,840 --> 00:24:34,320
there's a little complete xml doc button

688
00:24:34,320 --> 00:24:36,080
here that if this is the first time

689
00:24:36,080 --> 00:24:37,919
you're creating the the suppression file

690
00:24:37,919 --> 00:24:39,279
you'll need to click that button because

691
00:24:39,279 --> 00:24:40,400
then it'll put all the headers and

692
00:24:40,400 --> 00:24:41,760
everything that you need

693
00:24:41,760 --> 00:24:42,799
um

694
00:24:42,799 --> 00:24:44,720
into the suppression file for you

695
00:24:44,720 --> 00:24:47,600
and then you can just uh copy that and

696
00:24:47,600 --> 00:24:49,919
paste it into a text file

697
00:24:49,919 --> 00:24:52,480
and away you go

698
00:24:52,480 --> 00:24:55,039
so that is kind of the very high level

699
00:24:55,039 --> 00:24:56,880
quick running the tool

700
00:24:56,880 --> 00:25:00,080
uh let's see

701
00:25:00,640 --> 00:25:03,679
so what are some of the use cases for uh

702
00:25:03,679 --> 00:25:07,039
dependency check um

703
00:25:07,679 --> 00:25:09,120
hopefully you don't have to prove the

704
00:25:09,120 --> 00:25:11,600
existence of the problem within your in

705
00:25:11,600 --> 00:25:14,799
your environment but uh we know there's

706
00:25:14,799 --> 00:25:16,640
a lot of places that

707
00:25:16,640 --> 00:25:18,559
you know you may not have an apsec

708
00:25:18,559 --> 00:25:21,919
program or even an apsec team and

709
00:25:21,919 --> 00:25:23,840
um

710
00:25:23,840 --> 00:25:26,559
wish wish you had uh more support in the

711
00:25:26,559 --> 00:25:28,799
security space but uh

712
00:25:28,799 --> 00:25:30,480
you can use this to prove the existence

713
00:25:30,480 --> 00:25:32,400
of the problem in your environment in

714
00:25:32,400 --> 00:25:35,200
your application um

715
00:25:35,200 --> 00:25:37,840
if you do find out that this problem and

716
00:25:37,840 --> 00:25:39,760
management might be open to buying a

717
00:25:39,760 --> 00:25:40,840
commercial

718
00:25:40,840 --> 00:25:43,279
solution i always highly recommend using

719
00:25:43,279 --> 00:25:44,240
the

720
00:25:44,240 --> 00:25:46,799
the the foss tools when you're doing a

721
00:25:46,799 --> 00:25:49,679
poc with the commercial uh solutions

722
00:25:49,679 --> 00:25:51,760
because if they're basically finding the

723
00:25:51,760 --> 00:25:53,440
same thing

724
00:25:53,440 --> 00:25:54,880
um

725
00:25:54,880 --> 00:25:57,200
that's something you might question the

726
00:25:57,200 --> 00:25:59,679
price tag that the commercial vendor is

727
00:25:59,679 --> 00:26:02,640
is uh asking um and i've known people

728
00:26:02,640 --> 00:26:03,919
who

729
00:26:03,919 --> 00:26:06,480
have have gotten a discount on things uh

730
00:26:06,480 --> 00:26:07,760
because of that

731
00:26:07,760 --> 00:26:09,520
i'm not saying it'll work every time but

732
00:26:09,520 --> 00:26:11,840
i do know people who that has worked for

733
00:26:11,840 --> 00:26:13,440
them

734
00:26:13,440 --> 00:26:14,320
uh

735
00:26:14,320 --> 00:26:16,480
many a lot of organizations

736
00:26:16,480 --> 00:26:18,240
the lost dependency check is their

737
00:26:18,240 --> 00:26:20,000
primary tool for

738
00:26:20,000 --> 00:26:22,159
software composition analysis

739
00:26:22,159 --> 00:26:23,840
i also know that other other companies

740
00:26:23,840 --> 00:26:25,440
may use dependency track it's got a

741
00:26:25,440 --> 00:26:28,320
slightly different use case

742
00:26:28,320 --> 00:26:31,200
but does but accomplishes the same

743
00:26:31,200 --> 00:26:34,880
it but accomplishes a similar goal

744
00:26:35,520 --> 00:26:37,679
and lastly

745
00:26:37,679 --> 00:26:39,520
i know there are some companies that

746
00:26:39,520 --> 00:26:43,039
actually use multiple sca tools

747
00:26:43,039 --> 00:26:46,240
and that's because just like sas tools

748
00:26:46,240 --> 00:26:48,480
the sca tools

749
00:26:48,480 --> 00:26:51,360
will have almost a venn diagram of their

750
00:26:51,360 --> 00:26:53,919
coverage you will have

751
00:26:53,919 --> 00:26:56,320
a lot of commonality but each of them

752
00:26:56,320 --> 00:26:58,000
will have their own little edge of the

753
00:26:58,000 --> 00:26:59,120
circle

754
00:26:59,120 --> 00:27:01,039
of that venn diagram of things that they

755
00:27:01,039 --> 00:27:03,200
find that the other tools don't and part

756
00:27:03,200 --> 00:27:05,520
of that is

757
00:27:05,520 --> 00:27:06,799
what you're buying with a commercial

758
00:27:06,799 --> 00:27:09,120
vendor uh with a commercial product is

759
00:27:09,120 --> 00:27:11,120
you are generally paying for

760
00:27:11,120 --> 00:27:13,440
their private database

761
00:27:13,440 --> 00:27:15,679
uh so that you generally have access to

762
00:27:15,679 --> 00:27:17,440
vulnerabilities that

763
00:27:17,440 --> 00:27:20,000
are not in the nvd and probably and may

764
00:27:20,000 --> 00:27:22,000
not even be in the osf index because

765
00:27:22,000 --> 00:27:25,120
they've got security teams or

766
00:27:25,120 --> 00:27:27,520
researchers finding these things

767
00:27:27,520 --> 00:27:29,440
so

768
00:27:29,440 --> 00:27:31,200
uh that's one of the things

769
00:27:31,200 --> 00:27:33,840
that you pay for with companies and why

770
00:27:33,840 --> 00:27:36,080
some companies use multiple sca tools

771
00:27:36,080 --> 00:27:38,240
especially those that are shipping

772
00:27:38,240 --> 00:27:41,360
products to clients as opposed to just

773
00:27:41,360 --> 00:27:43,120
writing software that they you know

774
00:27:43,120 --> 00:27:46,080
publish to aws or or

775
00:27:46,080 --> 00:27:47,760
or provide via website or something like

776
00:27:47,760 --> 00:27:49,520
that

777
00:27:49,520 --> 00:27:52,720
uh so that is kind of the high level

778
00:27:52,720 --> 00:27:55,120
overview of dependency check and why you

779
00:27:55,120 --> 00:27:56,159
may want to

780
00:27:56,159 --> 00:27:58,080
take a look at it if you haven't used it

781
00:27:58,080 --> 00:27:59,600
before

782
00:27:59,600 --> 00:28:02,600
um

783
00:28:02,640 --> 00:28:05,039
uh how you can help

784
00:28:05,039 --> 00:28:08,159
we love pull requests

785
00:28:08,159 --> 00:28:10,640
uh we've got 250 open issues questions

786
00:28:10,640 --> 00:28:13,279
enhancements bugs uh

787
00:28:13,279 --> 00:28:14,640
we've been talking about an enterprise

788
00:28:14,640 --> 00:28:16,240
deployment guide for a while and we

789
00:28:16,240 --> 00:28:18,240
would love if you happen to be somebody

790
00:28:18,240 --> 00:28:19,600
who has

791
00:28:19,600 --> 00:28:21,200
successfully deployed

792
00:28:21,200 --> 00:28:22,880
dependency check within an enterprise

793
00:28:22,880 --> 00:28:24,799
we'd love to get your feedback

794
00:28:24,799 --> 00:28:25,919
and

795
00:28:25,919 --> 00:28:29,039
knowledge to help other organizations

796
00:28:29,039 --> 00:28:31,679
implement dependency check um and the

797
00:28:31,679 --> 00:28:33,600
last major thing that that we're looking

798
00:28:33,600 --> 00:28:34,799
for help with

799
00:28:34,799 --> 00:28:36,559
is the gradle plugin needs to be

800
00:28:36,559 --> 00:28:38,399
rewritten while not rewritten but

801
00:28:38,399 --> 00:28:41,039
reworked to use the worker api it's just

802
00:28:41,039 --> 00:28:42,480
something we haven't had time to get

803
00:28:42,480 --> 00:28:43,679
into

804
00:28:43,679 --> 00:28:46,000
we have a lot of great uh help

805
00:28:46,000 --> 00:28:50,480
within the community uh mark

806
00:28:50,559 --> 00:28:51,360
mark

807
00:28:51,360 --> 00:28:53,760
hans

808
00:28:53,840 --> 00:28:55,360
nicholas humble

809
00:28:55,360 --> 00:28:57,039
all of the we've had we have a very

810
00:28:57,039 --> 00:28:58,399
small core team that's been doing a lot

811
00:28:58,399 --> 00:29:00,480
of great work but

812
00:29:00,480 --> 00:29:02,240
as you can see

813
00:29:02,240 --> 00:29:04,320
there's a lot of open issues and still a

814
00:29:04,320 --> 00:29:05,840
lot of work to make this tool even

815
00:29:05,840 --> 00:29:08,240
better and we'd appreciate your help

816
00:29:08,240 --> 00:29:10,720
with that i think

817
00:29:10,720 --> 00:29:12,480
we're on to questions which will be in

818
00:29:12,480 --> 00:29:14,399
the slack

819
00:29:14,399 --> 00:29:17,399
afterwards

