1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:07,919 --> 00:00:11,120
hi everyone my name is sam stepanyan um

3
00:00:11,120 --> 00:00:13,360
i'm a noah's chapter leader and owas

4
00:00:13,360 --> 00:00:16,239
nadaka project co-leader i work in

5
00:00:16,239 --> 00:00:17,840
london in the

6
00:00:17,840 --> 00:00:20,320
financial services sector as an

7
00:00:20,320 --> 00:00:22,800
application security consultant

8
00:00:22,800 --> 00:00:25,680
today i'm going to talk to you about the

9
00:00:25,680 --> 00:00:28,240
owasp netaka project

10
00:00:28,240 --> 00:00:29,599
so

11
00:00:29,599 --> 00:00:32,000
a few more words about me uh

12
00:00:32,000 --> 00:00:33,680
apart from being a noah's london chapter

13
00:00:33,680 --> 00:00:36,640
leader i also lead the owas chat chapter

14
00:00:36,640 --> 00:00:39,360
committee where we help uh all of us

15
00:00:39,360 --> 00:00:41,680
chapters to succeed to be healthy to be

16
00:00:41,680 --> 00:00:42,800
active

17
00:00:42,800 --> 00:00:45,440
um i originally come from the software

18
00:00:45,440 --> 00:00:47,039
development background i'm an

19
00:00:47,039 --> 00:00:48,640
application developer

20
00:00:48,640 --> 00:00:49,760
and

21
00:00:49,760 --> 00:00:52,079
i'm an application security guy and i am

22
00:00:52,079 --> 00:00:55,600
a defender so why am i presenting a talk

23
00:00:55,600 --> 00:00:58,480
about a tool which consists of two words

24
00:00:58,480 --> 00:01:00,559
network and attacker while i am a

25
00:01:00,559 --> 00:01:03,039
defender and an application security guy

26
00:01:03,039 --> 00:01:06,240
i had a bit of a history with um

27
00:01:06,240 --> 00:01:08,720
obasan attacker because i didn't know

28
00:01:08,720 --> 00:01:10,960
about this tool until i was pinged by

29
00:01:10,960 --> 00:01:13,840
the original netaka project leaders in

30
00:01:13,840 --> 00:01:17,600
2018 where they asked me and um

31
00:01:17,600 --> 00:01:19,840
oh was london chapter co-leader dr greg

32
00:01:19,840 --> 00:01:23,840
fracos to go to black cat europe 2018

33
00:01:23,840 --> 00:01:24,880
conference

34
00:01:24,880 --> 00:01:28,240
and present this project because the

35
00:01:28,240 --> 00:01:30,479
netaka project leaders were unable to

36
00:01:30,479 --> 00:01:32,799
travel to london at that time

37
00:01:32,799 --> 00:01:35,759
so um myself and dr greg frackos we had

38
00:01:35,759 --> 00:01:38,400
to learn this tool overnight

39
00:01:38,400 --> 00:01:40,640
on a zoom session and we absolutely

40
00:01:40,640 --> 00:01:42,479
absolutely loved it

41
00:01:42,479 --> 00:01:44,320
we knew very very little about this tool

42
00:01:44,320 --> 00:01:45,840
because it was a brand new tool back

43
00:01:45,840 --> 00:01:48,079
then uh we saw it appearing on the list

44
00:01:48,079 --> 00:01:50,720
of os projects but we didn't really know

45
00:01:50,720 --> 00:01:52,640
what it is and once we learned what it

46
00:01:52,640 --> 00:01:55,280
is we were really really happy to go and

47
00:01:55,280 --> 00:01:59,040
present it at uh black cat europe

48
00:01:59,040 --> 00:02:01,840
2018 in london and then suddenly this

49
00:02:01,840 --> 00:02:05,439
happened we had huge crowds of season

50
00:02:05,439 --> 00:02:07,520
penetration testers

51
00:02:07,520 --> 00:02:10,560
software developers security engineers

52
00:02:10,560 --> 00:02:13,200
even some information security managers

53
00:02:13,200 --> 00:02:15,599
gathering around our stand at the black

54
00:02:15,599 --> 00:02:17,680
cat europe arsenal booth

55
00:02:17,680 --> 00:02:19,840
watching the presentation of the tool so

56
00:02:19,840 --> 00:02:21,760
we said okay this is good people like

57
00:02:21,760 --> 00:02:25,120
the tool so um i became a co-leader of

58
00:02:25,120 --> 00:02:27,360
august attacker project and proposed

59
00:02:27,360 --> 00:02:30,000
that it would be also presented

60
00:02:30,000 --> 00:02:32,480
the following year in 2019

61
00:02:32,480 --> 00:02:34,560
and then suddenly this happened even

62
00:02:34,560 --> 00:02:37,120
bigger crowds gathered around watching

63
00:02:37,120 --> 00:02:39,360
this tool and absolutely everybody loved

64
00:02:39,360 --> 00:02:42,400
this tool but why what is it about ova's

65
00:02:42,400 --> 00:02:46,080
attacker that um everybody um

66
00:02:46,080 --> 00:02:49,360
is so uh intrigued about so oh osne

67
00:02:49,360 --> 00:02:52,080
attacker first of all is an open source

68
00:02:52,080 --> 00:02:54,480
software tool just like all of us

69
00:02:54,480 --> 00:02:55,680
projects

70
00:02:55,680 --> 00:02:57,360
and os nethacker's

71
00:02:57,360 --> 00:02:59,360
goal is to assist with penetration

72
00:02:59,360 --> 00:03:01,840
testing by automating

73
00:03:01,840 --> 00:03:04,239
tasks such as information gathering and

74
00:03:04,239 --> 00:03:06,159
vulnerability scanning

75
00:03:06,159 --> 00:03:08,480
because this tool is written in 100

76
00:03:08,480 --> 00:03:10,720
python it doesn't require any external

77
00:03:10,720 --> 00:03:13,280
tools to be present an operating system

78
00:03:13,280 --> 00:03:16,159
and it can be run on windows linux or

79
00:03:16,159 --> 00:03:18,640
mac os um

80
00:03:18,640 --> 00:03:20,159
very important thing to mention about

81
00:03:20,159 --> 00:03:22,319
osne attacker that it is actually

82
00:03:22,319 --> 00:03:24,640
written and it has by students

83
00:03:24,640 --> 00:03:26,959
who participated in initiative called

84
00:03:26,959 --> 00:03:28,879
google summer of code and if you don't

85
00:03:28,879 --> 00:03:30,799
know what google summer of code is it is

86
00:03:30,799 --> 00:03:32,640
a great initiative

87
00:03:32,640 --> 00:03:35,440
by google which is running every year

88
00:03:35,440 --> 00:03:37,760
and that is essentially a paid

89
00:03:37,760 --> 00:03:39,920
internship for students to select an

90
00:03:39,920 --> 00:03:42,720
open source project of their liking and

91
00:03:42,720 --> 00:03:45,760
apply to work on that project during the

92
00:03:45,760 --> 00:03:49,120
summer break and this is how uh

93
00:03:49,120 --> 00:03:51,440
we had always benefited um

94
00:03:51,440 --> 00:03:54,640
uh by having students to um

95
00:03:54,640 --> 00:03:56,959
uh help us to enhance the tool and

96
00:03:56,959 --> 00:03:58,319
actually it's not just the august

97
00:03:58,319 --> 00:04:01,120
attacker there are many other owasp

98
00:04:01,120 --> 00:04:04,879
projects um like oas bizap for example

99
00:04:04,879 --> 00:04:08,720
or orwas jewshop which benefited from um

100
00:04:08,720 --> 00:04:10,959
google summer of code and it's not just

101
00:04:10,959 --> 00:04:13,439
oas which participates many other

102
00:04:13,439 --> 00:04:15,280
open source organizations do as well so

103
00:04:15,280 --> 00:04:17,358
if you're a student watching this or you

104
00:04:17,358 --> 00:04:19,759
know any students who you think might be

105
00:04:19,759 --> 00:04:21,680
interested in spending their summer

106
00:04:21,680 --> 00:04:24,720
break working on open source and

107
00:04:24,720 --> 00:04:27,040
gathering some real experience

108
00:04:27,040 --> 00:04:28,800
please do check out google summer of

109
00:04:28,800 --> 00:04:31,840
code it usually runs uh from march every

110
00:04:31,840 --> 00:04:34,639
year until the end of august

111
00:04:34,639 --> 00:04:37,199
so what is ova's attacker you can think

112
00:04:37,199 --> 00:04:39,840
of ova attacker as a swiss army knife

113
00:04:39,840 --> 00:04:41,120
kind of tool

114
00:04:41,120 --> 00:04:43,600
because just like a swiss army knife it

115
00:04:43,600 --> 00:04:45,360
is a collection of tools

116
00:04:45,360 --> 00:04:48,479
it has a modular structure

117
00:04:48,479 --> 00:04:50,479
it's relatively easy to create your own

118
00:04:50,479 --> 00:04:52,720
modules we recently changed how you

119
00:04:52,720 --> 00:04:55,040
write your modules from python to yaml i

120
00:04:55,040 --> 00:04:57,360
will talk about this a little bit later

121
00:04:57,360 --> 00:04:59,120
it is a fast performing tool because

122
00:04:59,120 --> 00:05:00,720
it's using multi-threading which you can

123
00:05:00,720 --> 00:05:02,080
control it's using python's

124
00:05:02,080 --> 00:05:03,919
multi-threading model

125
00:05:03,919 --> 00:05:05,120
important thing is that it has

126
00:05:05,120 --> 00:05:07,360
customizable profiles which are bundles

127
00:05:07,360 --> 00:05:10,000
of modules focused on a specific task so

128
00:05:10,000 --> 00:05:11,680
if you can imagine you can pull out

129
00:05:11,680 --> 00:05:13,600
several blades out of your swiss army

130
00:05:13,600 --> 00:05:16,160
knife uh to perform a specific task to

131
00:05:16,160 --> 00:05:18,960
make it uh quicker or more efficient and

132
00:05:18,960 --> 00:05:20,639
of course the most important thing is

133
00:05:20,639 --> 00:05:22,960
automation because you can automate and

134
00:05:22,960 --> 00:05:26,000
run this tool from the command line

135
00:05:26,000 --> 00:05:27,120
so um

136
00:05:27,120 --> 00:05:29,680
a few other bits about osne attacker

137
00:05:29,680 --> 00:05:32,160
that it is not an officially released

138
00:05:32,160 --> 00:05:34,160
tool yet it's not even in beta it's

139
00:05:34,160 --> 00:05:36,240
still in research and development phase

140
00:05:36,240 --> 00:05:38,320
so the current versions are zero zero

141
00:05:38,320 --> 00:05:40,960
two and zero zero three uh and we're

142
00:05:40,960 --> 00:05:43,120
always looking for more contributors i

143
00:05:43,120 --> 00:05:45,360
will um tell you how to contribute to

144
00:05:45,360 --> 00:05:46,720
the project at the end of my

145
00:05:46,720 --> 00:05:49,280
presentation however what is great about

146
00:05:49,280 --> 00:05:50,000
uh

147
00:05:50,000 --> 00:05:52,320
taka that it is usable right now and it

148
00:05:52,320 --> 00:05:54,000
is a great tool which already has a

149
00:05:54,000 --> 00:05:56,160
command line interface web user

150
00:05:56,160 --> 00:05:59,199
interface an api report generator it

151
00:05:59,199 --> 00:06:01,520
also has multigo transform so people use

152
00:06:01,520 --> 00:06:04,400
multigo which is a great

153
00:06:04,400 --> 00:06:06,319
investigation tool available for example

154
00:06:06,319 --> 00:06:09,280
in kali linux and netaca currently has

155
00:06:09,280 --> 00:06:11,919
over 70 modules

156
00:06:11,919 --> 00:06:15,600
so um you can find osm attacker on the

157
00:06:15,600 --> 00:06:18,319
main owasp.org website under projects

158
00:06:18,319 --> 00:06:21,440
this is the url where you can

159
00:06:21,440 --> 00:06:23,199
learn about the project and see some

160
00:06:23,199 --> 00:06:24,000
quick

161
00:06:24,000 --> 00:06:26,400
demonstration there

162
00:06:26,400 --> 00:06:28,479
important bit about documentation that

163
00:06:28,479 --> 00:06:31,919
we use the wiki part on the github so if

164
00:06:31,919 --> 00:06:33,440
you would like to read the documentation

165
00:06:33,440 --> 00:06:36,639
please click on the wiki button once you

166
00:06:36,639 --> 00:06:38,319
visit the

167
00:06:38,319 --> 00:06:40,880
osn attacker on github and there is an

168
00:06:40,880 --> 00:06:42,160
installation

169
00:06:42,160 --> 00:06:44,240
section there where you can learn how to

170
00:06:44,240 --> 00:06:46,960
install it you can install an attacker

171
00:06:46,960 --> 00:06:49,039
relatively simply and it will run on

172
00:06:49,039 --> 00:06:52,800
anything so uh i prefer uh using it for

173
00:06:52,800 --> 00:06:55,039
uh perfect you using it in kali linux

174
00:06:55,039 --> 00:06:58,080
but you can use it on uh any platform

175
00:06:58,080 --> 00:06:59,520
there are several requirements for

176
00:06:59,520 --> 00:07:01,520
installation so please do follow the

177
00:07:01,520 --> 00:07:02,960
installation instructions because

178
00:07:02,960 --> 00:07:04,319
there's some dependencies that you need

179
00:07:04,319 --> 00:07:07,440
to install however if you are using

180
00:07:07,440 --> 00:07:11,120
black arch linux distribution which is a

181
00:07:11,120 --> 00:07:13,120
linux distribution

182
00:07:13,120 --> 00:07:15,360
specifically targeting

183
00:07:15,360 --> 00:07:18,000
penetration testing

184
00:07:18,000 --> 00:07:19,520
engagements

185
00:07:19,520 --> 00:07:21,919
you will find out that recently netaca

186
00:07:21,919 --> 00:07:24,319
was included in black arch and you can

187
00:07:24,319 --> 00:07:25,440
see it's

188
00:07:25,440 --> 00:07:27,759
currently being listed under the black

189
00:07:27,759 --> 00:07:29,840
arch automation tools and the version

190
00:07:29,840 --> 00:07:33,039
0.002 is actually built into black arch

191
00:07:33,039 --> 00:07:34,960
which is absolutely great and we're very

192
00:07:34,960 --> 00:07:37,840
thankful to the black arch linux team

193
00:07:37,840 --> 00:07:40,400
which included our tool in the linux

194
00:07:40,400 --> 00:07:41,759
distribution

195
00:07:41,759 --> 00:07:43,360
so um

196
00:07:43,360 --> 00:07:44,720
in order for you to understand what

197
00:07:44,720 --> 00:07:46,720
obasan attacker is and how it compares

198
00:07:46,720 --> 00:07:48,479
with other scanners that you might know

199
00:07:48,479 --> 00:07:50,160
for example with scanners such as burp

200
00:07:50,160 --> 00:07:52,479
suite of or or wasp zap

201
00:07:52,479 --> 00:07:55,520
so scanners like burp or wasp zap

202
00:07:55,520 --> 00:07:58,560
they usually would scan one website for

203
00:07:58,560 --> 00:08:00,800
many web application vulnerabilities and

204
00:08:00,800 --> 00:08:03,120
that's whatever the scanner is able to

205
00:08:03,120 --> 00:08:04,000
find

206
00:08:04,000 --> 00:08:06,240
so these tools will go and crawl one

207
00:08:06,240 --> 00:08:08,560
website to discover all urls all

208
00:08:08,560 --> 00:08:09,919
parameters

209
00:08:09,919 --> 00:08:12,319
all forms you know all the buttons will

210
00:08:12,319 --> 00:08:14,240
try to click on all the links and then

211
00:08:14,240 --> 00:08:16,160
it will try to see

212
00:08:16,160 --> 00:08:18,160
if there are any vulnerabilities

213
00:08:18,160 --> 00:08:19,599
or what's an attacker it doesn't work

214
00:08:19,599 --> 00:08:21,039
like that it doesn't scan just one

215
00:08:21,039 --> 00:08:23,440
website it scans one

216
00:08:23,440 --> 00:08:26,080
or many and that can be hundreds or

217
00:08:26,080 --> 00:08:29,120
thousands of ip addresses networks or

218
00:08:29,120 --> 00:08:31,199
sub domains and what is it scanning them

219
00:08:31,199 --> 00:08:33,919
for for open ports or one or more

220
00:08:33,919 --> 00:08:36,799
specific vulnerabilities listed by the

221
00:08:36,799 --> 00:08:39,279
user and these are basically what our

222
00:08:39,279 --> 00:08:41,360
modules are and you can bundle the

223
00:08:41,360 --> 00:08:43,039
modules in a profile to search for

224
00:08:43,039 --> 00:08:44,560
specific things

225
00:08:44,560 --> 00:08:47,360
so nettacker consists of three types of

226
00:08:47,360 --> 00:08:48,959
modules

227
00:08:48,959 --> 00:08:51,360
modules of type scan for example port

228
00:08:51,360 --> 00:08:52,480
scan

229
00:08:52,480 --> 00:08:54,640
modules of type vol

230
00:08:54,640 --> 00:08:56,720
these are the modules which are looking

231
00:08:56,720 --> 00:08:59,360
for a specific vulnerability for example

232
00:08:59,360 --> 00:09:01,920
apache struts valve module will look for

233
00:09:01,920 --> 00:09:04,720
apache strats vulnerability and it has

234
00:09:04,720 --> 00:09:07,839
modules of type brood for brute forcing

235
00:09:07,839 --> 00:09:10,399
so for example an ssh brute module will

236
00:09:10,399 --> 00:09:12,480
perform brute forcing

237
00:09:12,480 --> 00:09:14,320
over the ssh protocol

238
00:09:14,320 --> 00:09:16,800
so that's essentially what the module

239
00:09:16,800 --> 00:09:19,040
types are and that what makes this tool

240
00:09:19,040 --> 00:09:20,880
great because it combines three

241
00:09:20,880 --> 00:09:22,800
different types of

242
00:09:22,800 --> 00:09:25,760
activities scanning

243
00:09:25,760 --> 00:09:27,360
for

244
00:09:27,360 --> 00:09:29,279
in information gathering

245
00:09:29,279 --> 00:09:31,519
scanning for specific vulnerability and

246
00:09:31,519 --> 00:09:32,880
brute forcing

247
00:09:32,880 --> 00:09:35,040
so how do you run the attacker in order

248
00:09:35,040 --> 00:09:36,640
to run the attacker from the command

249
00:09:36,640 --> 00:09:39,200
line you need to define two parameters

250
00:09:39,200 --> 00:09:41,680
you need to define the target what do

251
00:09:41,680 --> 00:09:44,080
you want to scan and the module which

252
00:09:44,080 --> 00:09:46,160
module do you want to use to scan it

253
00:09:46,160 --> 00:09:47,040
with

254
00:09:47,040 --> 00:09:48,000
and

255
00:09:48,000 --> 00:09:50,880
you do it with the dash i command line

256
00:09:50,880 --> 00:09:52,800
switch where you define your target and

257
00:09:52,800 --> 00:09:55,120
dash m for your module so for example if

258
00:09:55,120 --> 00:09:57,760
i want to perform a port scan on ip

259
00:09:57,760 --> 00:10:00,880
address 192.168.1.149

260
00:10:00,880 --> 00:10:03,279
i will call an attacker with i and the

261
00:10:03,279 --> 00:10:05,360
ip address and m with the module with

262
00:10:05,360 --> 00:10:07,920
the port scan you can also scan not just

263
00:10:07,920 --> 00:10:09,680
one ip address but the whole network for

264
00:10:09,680 --> 00:10:14,000
example if you provide 192.168.1.0

265
00:10:14,000 --> 00:10:16,560
24 you will scan the entire class c

266
00:10:16,560 --> 00:10:20,480
network or 255 ip addresses and actually

267
00:10:20,480 --> 00:10:23,040
an attacker has more targets available

268
00:10:23,040 --> 00:10:26,240
you can scan a single ip address as i've

269
00:10:26,240 --> 00:10:28,720
just shown you before you can also scan

270
00:10:28,720 --> 00:10:31,440
an ip address range by providing a

271
00:10:31,440 --> 00:10:33,680
starting ip address and an ending ip

272
00:10:33,680 --> 00:10:34,560
address

273
00:10:34,560 --> 00:10:38,000
you can also scan a network by providing

274
00:10:38,000 --> 00:10:40,720
the cidr bits notation

275
00:10:40,720 --> 00:10:42,480
but what is also very interesting that

276
00:10:42,480 --> 00:10:45,040
you can scan a domain for example

277
00:10:45,040 --> 00:10:46,560
owasp.org

278
00:10:46,560 --> 00:10:49,120
and you can also scan urls

279
00:10:49,120 --> 00:10:52,560
using http or https protocol so these

280
00:10:52,560 --> 00:10:55,040
are the various types of attacker

281
00:10:55,040 --> 00:10:57,360
targets

282
00:10:57,360 --> 00:10:59,760
but that is not all because if you are

283
00:10:59,760 --> 00:11:01,440
if you work for a larger organization

284
00:11:01,440 --> 00:11:04,480
that means you will have a multitude of

285
00:11:04,480 --> 00:11:06,399
networks you will have several domain

286
00:11:06,399 --> 00:11:07,360
names

287
00:11:07,360 --> 00:11:10,079
and lots of ip addresses so what you can

288
00:11:10,079 --> 00:11:12,720
do you can actually create a text file

289
00:11:12,720 --> 00:11:15,600
which lists all the uh targets that you

290
00:11:15,600 --> 00:11:17,040
want to scan

291
00:11:17,040 --> 00:11:18,480
one target per

292
00:11:18,480 --> 00:11:21,279
line in the text file and then just load

293
00:11:21,279 --> 00:11:23,279
the list of targets using the dash l

294
00:11:23,279 --> 00:11:26,240
parameters so that is another way of

295
00:11:26,240 --> 00:11:27,760
running the attacker and again for

296
00:11:27,760 --> 00:11:29,279
example if you want to run a specific

297
00:11:29,279 --> 00:11:31,440
module for example a port scan on all

298
00:11:31,440 --> 00:11:33,040
your networks all your domains and

299
00:11:33,040 --> 00:11:34,720
subdomains

300
00:11:34,720 --> 00:11:37,120
that is what you can do and this is what

301
00:11:37,120 --> 00:11:37,920
is

302
00:11:37,920 --> 00:11:41,279
making net tucker so great so let me now

303
00:11:41,279 --> 00:11:43,519
do a quick live demo uh let me just

304
00:11:43,519 --> 00:11:47,120
switch to my kali linux

305
00:11:47,120 --> 00:11:50,000
installation here

306
00:11:50,880 --> 00:11:52,800
where i already have net tucker

307
00:11:52,800 --> 00:11:54,320
installed and again a reminder if you

308
00:11:54,320 --> 00:11:55,600
want to

309
00:11:55,600 --> 00:11:57,040
learn how to install an attacker just

310
00:11:57,040 --> 00:11:59,519
check out documentation on github under

311
00:11:59,519 --> 00:12:01,120
the github wiki

312
00:12:01,120 --> 00:12:02,880
uh so because an attacker is a tool

313
00:12:02,880 --> 00:12:05,279
written in python i'm going to use uh

314
00:12:05,279 --> 00:12:08,480
python to run it so if i run nettaker

315
00:12:08,480 --> 00:12:10,000
with

316
00:12:10,000 --> 00:12:11,839
no parameters

317
00:12:11,839 --> 00:12:13,600
what is going to happen it's just going

318
00:12:13,600 --> 00:12:16,320
to return a usage instructions you can

319
00:12:16,320 --> 00:12:18,079
see there's lots of information being

320
00:12:18,079 --> 00:12:20,160
displayed on the screen

321
00:12:20,160 --> 00:12:22,240
which can be quite confusing this is why

322
00:12:22,240 --> 00:12:23,920
please do check out the documentation

323
00:12:23,920 --> 00:12:26,000
where you will be able to find out

324
00:12:26,000 --> 00:12:27,839
about all the modules available what

325
00:12:27,839 --> 00:12:30,880
they do and uh any additional parameters

326
00:12:30,880 --> 00:12:32,959
that you might need to use

327
00:12:32,959 --> 00:12:35,920
but um here and in my first example let

328
00:12:35,920 --> 00:12:39,120
me actually try to run net tucker

329
00:12:39,120 --> 00:12:42,480
on an ip address and perform a port scan

330
00:12:42,480 --> 00:12:44,720
actually i want to scan this particular

331
00:12:44,720 --> 00:12:47,200
ip address now so this is what i need to

332
00:12:47,200 --> 00:12:48,720
specify i just need to

333
00:12:48,720 --> 00:12:51,200
provide the ip address and then port

334
00:12:51,200 --> 00:12:53,600
scan as the module of course many of you

335
00:12:53,600 --> 00:12:55,920
probably using tools such as nmap for

336
00:12:55,920 --> 00:12:58,720
port scanning and um

337
00:12:58,720 --> 00:13:00,240
usually people will have like a love and

338
00:13:00,240 --> 00:13:02,480
hate relationship with nmap

339
00:13:02,480 --> 00:13:04,320
and in attacker what is great about port

340
00:13:04,320 --> 00:13:05,680
scanning that it is actually quite

341
00:13:05,680 --> 00:13:08,399
simple very powerful and it is written

342
00:13:08,399 --> 00:13:10,240
in python so you don't even need to

343
00:13:10,240 --> 00:13:12,639
install nmap on your system all you need

344
00:13:12,639 --> 00:13:17,120
to do is just to have um

345
00:13:17,120 --> 00:13:18,800
python installed so there you go you can

346
00:13:18,800 --> 00:13:20,720
see how quickly an attacker scanned it

347
00:13:20,720 --> 00:13:21,519
and

348
00:13:21,519 --> 00:13:23,920
returned us the results where you can

349
00:13:23,920 --> 00:13:26,720
see um all the port numbers which were

350
00:13:26,720 --> 00:13:28,399
open and also you can see in the

351
00:13:28,399 --> 00:13:30,160
description column here it tries to

352
00:13:30,160 --> 00:13:31,839
identify what they are and you can see

353
00:13:31,839 --> 00:13:35,040
that it was telnet ssh sun rpc but for

354
00:13:35,040 --> 00:13:37,600
example you can see on ports 1884 and

355
00:13:37,600 --> 00:13:41,120
1890 on this particular target it thinks

356
00:13:41,120 --> 00:13:43,440
that it is actually running http which

357
00:13:43,440 --> 00:13:45,120
is very important because as you can see

358
00:13:45,120 --> 00:13:46,720
people can run

359
00:13:46,720 --> 00:13:49,440
things like web service or ssh service

360
00:13:49,440 --> 00:13:52,160
on some obscure ports and attacker can

361
00:13:52,160 --> 00:13:54,560
actually identify what is uh running

362
00:13:54,560 --> 00:13:55,839
there

363
00:13:55,839 --> 00:13:58,079
you can see that the attacker after it

364
00:13:58,079 --> 00:14:01,040
completed the scan it displays the

365
00:14:01,040 --> 00:14:03,600
information in its tabular format and it

366
00:14:03,600 --> 00:14:06,639
also stores the data in html file as you

367
00:14:06,639 --> 00:14:08,800
can see here and the database so the

368
00:14:08,800 --> 00:14:10,639
database bit is actually quite important

369
00:14:10,639 --> 00:14:12,880
because it's not like other tools which

370
00:14:12,880 --> 00:14:14,560
complete the scan and then that's it and

371
00:14:14,560 --> 00:14:16,079
they have to do something with it no

372
00:14:16,079 --> 00:14:17,680
attacker actually stores everything in

373
00:14:17,680 --> 00:14:21,519
database and again that is a very

374
00:14:21,519 --> 00:14:23,519
good feature because you can actually

375
00:14:23,519 --> 00:14:25,279
search the database and i'll talk about

376
00:14:25,279 --> 00:14:27,760
this a little bit later now we have seen

377
00:14:27,760 --> 00:14:30,399
how to use that tucker for port scanning

378
00:14:30,399 --> 00:14:32,639
but let me show you some other ways how

379
00:14:32,639 --> 00:14:34,320
you can use an attacker by using

380
00:14:34,320 --> 00:14:37,440
multiple modules and how you can use it

381
00:14:37,440 --> 00:14:38,880
on a

382
00:14:38,880 --> 00:14:41,920
domain name so for example if i want to

383
00:14:41,920 --> 00:14:42,839
scan

384
00:14:42,839 --> 00:14:46,240
obasp.org domain and i want to perform a

385
00:14:46,240 --> 00:14:49,519
subdomain scan all right i can uh

386
00:14:49,519 --> 00:14:50,959
run this command

387
00:14:50,959 --> 00:14:51,760
and

388
00:14:51,760 --> 00:14:53,519
attacker now is going to go and discover

389
00:14:53,519 --> 00:14:56,000
all the subdomains of oauth.org and give

390
00:14:56,000 --> 00:14:57,839
us the list you can see how quickly this

391
00:14:57,839 --> 00:15:00,959
was done however what attacker

392
00:15:00,959 --> 00:15:03,040
has it has a unique feature which allows

393
00:15:03,040 --> 00:15:06,000
you to combine subdomain scan with any

394
00:15:06,000 --> 00:15:09,199
other module available so for example

395
00:15:09,199 --> 00:15:12,560
there is a module which is called server

396
00:15:12,560 --> 00:15:15,760
version phone and server version vuln is

397
00:15:15,760 --> 00:15:18,560
a module which is trying to

398
00:15:18,560 --> 00:15:21,760
detect if the web server in question is

399
00:15:21,760 --> 00:15:23,680
returning or leaking

400
00:15:23,680 --> 00:15:26,240
the type of the web server in the

401
00:15:26,240 --> 00:15:28,720
response headers in the server header

402
00:15:28,720 --> 00:15:31,839
and we can see if we run it on obas.org

403
00:15:31,839 --> 00:15:34,720
that os.org is actually leaking

404
00:15:34,720 --> 00:15:36,240
its server header and it says that it's

405
00:15:36,240 --> 00:15:38,000
running cloudflare so okay great now we

406
00:15:38,000 --> 00:15:40,720
know what the obas.org is running on but

407
00:15:40,720 --> 00:15:42,720
this is not all because what we can also

408
00:15:42,720 --> 00:15:44,240
do we can add

409
00:15:44,240 --> 00:15:45,600
another

410
00:15:45,600 --> 00:15:47,759
module so i can change for example x

411
00:15:47,759 --> 00:15:50,480
powered by vulnerability and that will

412
00:15:50,480 --> 00:15:53,040
return another header which is the x

413
00:15:53,040 --> 00:15:54,720
powered by header

414
00:15:54,720 --> 00:15:57,120
and we you can also see any extra

415
00:15:57,120 --> 00:15:59,680
information uh provided by the x powered

416
00:15:59,680 --> 00:16:00,880
by header

417
00:16:00,880 --> 00:16:01,839
um

418
00:16:01,839 --> 00:16:04,399
of that web server and

419
00:16:04,399 --> 00:16:06,160
that is not all you can see this is all

420
00:16:06,160 --> 00:16:08,639
on os.org website

421
00:16:08,639 --> 00:16:10,880
and we can see that the attacker

422
00:16:10,880 --> 00:16:13,199
actually discovered um

423
00:16:13,199 --> 00:16:15,920
open ports port 80.443

424
00:16:15,920 --> 00:16:18,079
and told us in this information

425
00:16:18,079 --> 00:16:21,120
gathering session um what type of the

426
00:16:21,120 --> 00:16:23,120
server and technologies are being run on

427
00:16:23,120 --> 00:16:25,199
ours.org but what is great as i

428
00:16:25,199 --> 00:16:28,000
mentioned you can actually add subdomain

429
00:16:28,000 --> 00:16:30,959
scan to this and by adding s parameter

430
00:16:30,959 --> 00:16:33,040
and what's going to happen now is

431
00:16:33,040 --> 00:16:34,720
attacker is actually going to go and

432
00:16:34,720 --> 00:16:37,680
discover all the sub-domains of oas.org

433
00:16:37,680 --> 00:16:40,480
and it's going to run the

434
00:16:40,480 --> 00:16:43,360
these two modules that i listed on every

435
00:16:43,360 --> 00:16:45,839
single sub-domain and as a result as you

436
00:16:45,839 --> 00:16:48,079
can see it is very quick and

437
00:16:48,079 --> 00:16:50,320
literally within a few seconds now we

438
00:16:50,320 --> 00:16:52,720
have information about all the

439
00:16:52,720 --> 00:16:55,680
subdomains of obas.org and everything

440
00:16:55,680 --> 00:16:57,440
that they are running so this is

441
00:16:57,440 --> 00:17:00,959
absolutely great feature and uh what you

442
00:17:00,959 --> 00:17:01,920
can do

443
00:17:01,920 --> 00:17:04,079
after this because obviously

444
00:17:04,079 --> 00:17:06,640
how do you consume the results you can

445
00:17:06,640 --> 00:17:08,160
check out the report so you can see for

446
00:17:08,160 --> 00:17:10,480
example here the report is stored in the

447
00:17:10,480 --> 00:17:12,799
html file so

448
00:17:12,799 --> 00:17:16,480
let's see if we can open this html file

449
00:17:16,480 --> 00:17:19,039
with a web browser so i have a

450
00:17:19,039 --> 00:17:20,799
firefox here

451
00:17:20,799 --> 00:17:21,919
let's see

452
00:17:21,919 --> 00:17:23,359
if we can

453
00:17:23,359 --> 00:17:26,480
open this file and see what is shown in

454
00:17:26,480 --> 00:17:29,280
this html file you can see

455
00:17:29,280 --> 00:17:31,039
a great feature in attacker here called

456
00:17:31,039 --> 00:17:33,360
penetration testing graph and you can

457
00:17:33,360 --> 00:17:35,280
see that nethacker started hit attack

458
00:17:35,280 --> 00:17:36,880
and started connecting to various

459
00:17:36,880 --> 00:17:40,080
subdomains of owas.org and we can see

460
00:17:40,080 --> 00:17:42,640
that on every single target here

461
00:17:42,640 --> 00:17:44,480
the server version vulnerability and x

462
00:17:44,480 --> 00:17:46,240
powered by vulnerability modules they

463
00:17:46,240 --> 00:17:49,360
return a result and you can see

464
00:17:49,360 --> 00:17:52,480
what was actually running on them and

465
00:17:52,480 --> 00:17:54,720
why the graph is important because by

466
00:17:54,720 --> 00:17:56,320
looking at the shape of the graph you

467
00:17:56,320 --> 00:17:58,559
can see that and spot some patterns for

468
00:17:58,559 --> 00:18:01,039
example you can see that one of the

469
00:18:01,039 --> 00:18:04,240
subdomains of oauth.org did not have x

470
00:18:04,240 --> 00:18:06,559
power by vulnerability returning

471
00:18:06,559 --> 00:18:08,400
anything because that header was not

472
00:18:08,400 --> 00:18:10,640
present you can see it was just server

473
00:18:10,640 --> 00:18:12,720
version one and we can see in this case

474
00:18:12,720 --> 00:18:15,520
this was nginx and if you scroll down of

475
00:18:15,520 --> 00:18:17,679
this report you will find the results in

476
00:18:17,679 --> 00:18:20,000
the same familiar tabular format you

477
00:18:20,000 --> 00:18:22,000
will see all the hosts which will be

478
00:18:22,000 --> 00:18:24,400
either the subdomain or a specific ip

479
00:18:24,400 --> 00:18:26,240
address if you scan your network the

480
00:18:26,240 --> 00:18:27,919
username and password columns which are

481
00:18:27,919 --> 00:18:30,880
currently blank they are used for uh

482
00:18:30,880 --> 00:18:33,440
brute forcing so if you try to

483
00:18:33,440 --> 00:18:35,840
run a brute forcing attack uh for

484
00:18:35,840 --> 00:18:38,880
example to discover if there are any

485
00:18:38,880 --> 00:18:40,880
service on your network which are using

486
00:18:40,880 --> 00:18:43,200
default credentials such as admin admin

487
00:18:43,200 --> 00:18:44,000
or

488
00:18:44,000 --> 00:18:45,440
whatever default credentials you are

489
00:18:45,440 --> 00:18:46,799
looking for

490
00:18:46,799 --> 00:18:48,320
they will be displayed here in this

491
00:18:48,320 --> 00:18:50,480
username and password columns

492
00:18:50,480 --> 00:18:52,559
if there is a match you can see the port

493
00:18:52,559 --> 00:18:54,160
number you can see the type of the

494
00:18:54,160 --> 00:18:56,160
module which was in use and you can see

495
00:18:56,160 --> 00:18:58,000
the description column there's a bit of

496
00:18:58,000 --> 00:18:58,880
a

497
00:18:58,880 --> 00:19:01,919
visual effect so if i want uh to focus

498
00:19:01,919 --> 00:19:04,720
your attention on a particular line

499
00:19:04,720 --> 00:19:07,039
in this table i can just hover over the

500
00:19:07,039 --> 00:19:09,360
row of data and you can see that

501
00:19:09,360 --> 00:19:11,039
this particular host for example was

502
00:19:11,039 --> 00:19:14,960
running nginx so that is the um

503
00:19:14,960 --> 00:19:17,679
results in html format however an

504
00:19:17,679 --> 00:19:22,240
attacker has um ability to run

505
00:19:22,240 --> 00:19:25,200
some other reports as well and uh again

506
00:19:25,200 --> 00:19:28,000
what makes it great is that apart from

507
00:19:28,000 --> 00:19:30,480
the um

508
00:19:30,480 --> 00:19:31,840
the graphs

509
00:19:31,840 --> 00:19:37,120
it can also output results in uh csv and

510
00:19:37,120 --> 00:19:39,120
json formats

511
00:19:39,120 --> 00:19:42,160
and why is it important because we

512
00:19:42,160 --> 00:19:44,640
with using json people can actually

513
00:19:44,640 --> 00:19:46,880
consume these results for integration

514
00:19:46,880 --> 00:19:48,640
with other tools because json is

515
00:19:48,640 --> 00:19:51,360
structured data and after you run

516
00:19:51,360 --> 00:19:53,840
attacker on your networks you can take

517
00:19:53,840 --> 00:19:56,160
the json file and feed it into any other

518
00:19:56,160 --> 00:19:58,640
tool which can consume it and for

519
00:19:58,640 --> 00:19:59,919
example provide you with different

520
00:19:59,919 --> 00:20:02,480
reporting analytics or perhaps say

521
00:20:02,480 --> 00:20:05,280
further vulnerability scanning and why

522
00:20:05,280 --> 00:20:09,039
is it important to have csv it's because

523
00:20:09,039 --> 00:20:11,600
you get results in a spreadsheet format

524
00:20:11,600 --> 00:20:13,280
and this is probably what is so great

525
00:20:13,280 --> 00:20:15,440
about the waste attacker it's probably

526
00:20:15,440 --> 00:20:17,280
uh the only tool i know which is free

527
00:20:17,280 --> 00:20:18,880
and open source and that allows you to

528
00:20:18,880 --> 00:20:21,760
scan your network uh discover all the

529
00:20:21,760 --> 00:20:24,320
open ports all the service all the

530
00:20:24,320 --> 00:20:25,919
vulnerabilities and they give you

531
00:20:25,919 --> 00:20:27,760
results in excel spreadsheet format

532
00:20:27,760 --> 00:20:29,679
which is fantastic and everybody gets a

533
00:20:29,679 --> 00:20:31,120
spreadsheet everybody loves the

534
00:20:31,120 --> 00:20:33,679
spreadsheet you can easily of course

535
00:20:33,679 --> 00:20:35,919
filter that spreadsheet filter the data

536
00:20:35,919 --> 00:20:39,039
uh search for whatever is needed and um

537
00:20:39,039 --> 00:20:42,640
it is absolutely uh fantastic for uh

538
00:20:42,640 --> 00:20:44,320
companies to

539
00:20:44,320 --> 00:20:46,080
basically run this free and open source

540
00:20:46,080 --> 00:20:48,960
tool and get a list of all the um assets

541
00:20:48,960 --> 00:20:52,320
open ports and vulnerabilities in one

542
00:20:52,320 --> 00:20:55,120
very convenient spreadsheet format so

543
00:20:55,120 --> 00:20:58,320
this is a unique feature of an attacker

544
00:20:58,320 --> 00:21:01,120
which i think probably one of the best

545
00:21:01,120 --> 00:21:04,240
features of this little tool

546
00:21:04,240 --> 00:21:05,600
so

547
00:21:05,600 --> 00:21:09,439
what netacr is solving by

548
00:21:10,000 --> 00:21:11,760
storing the results in the database

549
00:21:11,760 --> 00:21:13,679
format and giving you the spreadsheet

550
00:21:13,679 --> 00:21:16,320
it's it's solving something called owasp

551
00:21:16,320 --> 00:21:19,280
a0 if you don't know what owasp a0 is

552
00:21:19,280 --> 00:21:20,240
it's

553
00:21:20,240 --> 00:21:22,880
something that jeremiah grossman the

554
00:21:22,880 --> 00:21:24,880
veteran of our application security

555
00:21:24,880 --> 00:21:27,520
industry suggested a few years ago when

556
00:21:27,520 --> 00:21:29,440
we were due to release almost top 10

557
00:21:29,440 --> 00:21:31,919
2017 and the top suggestion from

558
00:21:31,919 --> 00:21:34,159
jeremiah was

559
00:21:34,159 --> 00:21:37,280
to include a0 or asset inventory because

560
00:21:37,280 --> 00:21:38,799
these days the biggest application

561
00:21:38,799 --> 00:21:41,120
security risk are websites that you

562
00:21:41,120 --> 00:21:43,600
don't know you own why because if you

563
00:21:43,600 --> 00:21:45,520
don't know what you own you cannot

564
00:21:45,520 --> 00:21:48,480
possibly secure it and attacker solves

565
00:21:48,480 --> 00:21:50,400
this challenge for you because it allows

566
00:21:50,400 --> 00:21:52,799
you to

567
00:21:54,240 --> 00:21:56,240
to create your asset inventory by

568
00:21:56,240 --> 00:21:58,799
scanning your network and scanning your

569
00:21:58,799 --> 00:22:01,280
assets and of course uh

570
00:22:01,280 --> 00:22:02,799
the recommended way of using the

571
00:22:02,799 --> 00:22:04,320
attacker is to use it on your own

572
00:22:04,320 --> 00:22:05,840
network but

573
00:22:05,840 --> 00:22:07,360
you can also use it for penetration

574
00:22:07,360 --> 00:22:09,679
testing engagements or for bug bounty

575
00:22:09,679 --> 00:22:11,200
work where you can attack somebody

576
00:22:11,200 --> 00:22:13,520
else's network but of course always make

577
00:22:13,520 --> 00:22:16,159
sure that you have permission to do that

578
00:22:16,159 --> 00:22:18,320
so some of the attacker use cases you

579
00:22:18,320 --> 00:22:20,080
can use it for asset discovery so you

580
00:22:20,080 --> 00:22:22,400
can scan your network for open ports you

581
00:22:22,400 --> 00:22:24,720
can you can scan networks for new hosts

582
00:22:24,720 --> 00:22:26,320
you can scan network for default

583
00:22:26,320 --> 00:22:28,159
credentials for example admin admin if

584
00:22:28,159 --> 00:22:30,320
you use brute forcing you can

585
00:22:30,320 --> 00:22:32,799
quickly scan the network and find out if

586
00:22:32,799 --> 00:22:34,080
there are any service with default

587
00:22:34,080 --> 00:22:36,480
credentials configured on it you can

588
00:22:36,480 --> 00:22:38,080
scan your network for specific

589
00:22:38,080 --> 00:22:39,840
vulnerability for example a big

590
00:22:39,840 --> 00:22:42,799
vulnerability uh this year has been

591
00:22:42,799 --> 00:22:46,720
microsoft exchange ssrf cve um

592
00:22:46,720 --> 00:22:48,480
which affected thousands and thousands

593
00:22:48,480 --> 00:22:51,120
of organizations worldwide and we have a

594
00:22:51,120 --> 00:22:52,880
free and open source tool called oas

595
00:22:52,880 --> 00:22:54,400
nataka with a module which actually

596
00:22:54,400 --> 00:22:56,720
allows you to scan all your networks and

597
00:22:56,720 --> 00:22:58,960
discover vulnerable service you can also

598
00:22:58,960 --> 00:23:00,880
discover subdomains and open ports on

599
00:23:00,880 --> 00:23:02,880
them you can discover things like

600
00:23:02,880 --> 00:23:04,960
expired ssl certificates and your ip

601
00:23:04,960 --> 00:23:06,880
ranges why is it important because if

602
00:23:06,880 --> 00:23:09,600
you have service with expired ssl sets

603
00:23:09,600 --> 00:23:11,200
that means that the server is probably

604
00:23:11,200 --> 00:23:13,600
abandoned and probably not patched

605
00:23:13,600 --> 00:23:15,280
you can also find subdomains hosting

606
00:23:15,280 --> 00:23:16,720
vulnerable versions of content

607
00:23:16,720 --> 00:23:18,400
management systems such as wordpress

608
00:23:18,400 --> 00:23:20,080
drupal and joomla

609
00:23:20,080 --> 00:23:21,760
and of course what is important that you

610
00:23:21,760 --> 00:23:24,480
can run any netaca modules on all

611
00:23:24,480 --> 00:23:27,600
sub-domains of a specific domain

612
00:23:27,600 --> 00:23:29,360
you can automate netaca using the

613
00:23:29,360 --> 00:23:31,520
command line and you get results using

614
00:23:31,520 --> 00:23:34,880
csv json and html format you can use it

615
00:23:34,880 --> 00:23:37,120
in docker in your organization and when

616
00:23:37,120 --> 00:23:38,880
you spin it up in docker it will

617
00:23:38,880 --> 00:23:42,720
actually use the web ui um

618
00:23:42,720 --> 00:23:45,440
or the api mode and you can search for

619
00:23:45,440 --> 00:23:47,440
previous scan results and discovered

620
00:23:47,440 --> 00:23:49,440
assets in the database that's what makes

621
00:23:49,440 --> 00:23:51,840
it great i have a slide here which shows

622
00:23:51,840 --> 00:23:55,279
quickly what the os web ui looks like

623
00:23:55,279 --> 00:23:56,159
it's

624
00:23:56,159 --> 00:23:57,600
quite simple and you can see different

625
00:23:57,600 --> 00:23:59,120
colors because different modules are

626
00:23:59,120 --> 00:24:01,360
color coded and you can see that the

627
00:24:01,360 --> 00:24:03,600
brute forcing modules are orange the

628
00:24:03,600 --> 00:24:06,480
vulnerability scanning modules are red

629
00:24:06,480 --> 00:24:08,320
and the scanning modules are green so

630
00:24:08,320 --> 00:24:10,000
when you select a particular profile for

631
00:24:10,000 --> 00:24:11,520
example all vulnerability scanning

632
00:24:11,520 --> 00:24:13,840
modules selected here they will all will

633
00:24:13,840 --> 00:24:17,360
be ticked and they will all be used um

634
00:24:17,360 --> 00:24:19,600
important thing about the modules is

635
00:24:19,600 --> 00:24:21,679
that in the latest version of an

636
00:24:21,679 --> 00:24:24,559
attacker 003 the modules are written in

637
00:24:24,559 --> 00:24:27,600
yaml which means that it is very

638
00:24:27,600 --> 00:24:28,799
simple to

639
00:24:28,799 --> 00:24:30,400
write new modules and contribute new

640
00:24:30,400 --> 00:24:32,559
modules please definitely do check out

641
00:24:32,559 --> 00:24:33,840
this new feature

642
00:24:33,840 --> 00:24:35,200
the latest version is a little bit

643
00:24:35,200 --> 00:24:37,279
unstable yet so we're still working on

644
00:24:37,279 --> 00:24:39,840
it but the fact that it's using yaml

645
00:24:39,840 --> 00:24:42,000
actually will allows us

646
00:24:42,000 --> 00:24:44,080
will allow the project to respond

647
00:24:44,080 --> 00:24:46,240
quickly to the new vulnerabilities and

648
00:24:46,240 --> 00:24:48,559
release new modules allowing you to scan

649
00:24:48,559 --> 00:24:50,640
for these vulnerabilities in your

650
00:24:50,640 --> 00:24:52,159
network

651
00:24:52,159 --> 00:24:54,320
just like all of us projects it is open

652
00:24:54,320 --> 00:24:55,600
source so

653
00:24:55,600 --> 00:24:57,520
we welcome contributions if you want to

654
00:24:57,520 --> 00:24:59,200
contribute please do check out the

655
00:24:59,200 --> 00:25:00,880
developer wiki

656
00:25:00,880 --> 00:25:03,440
which is available on the documentation

657
00:25:03,440 --> 00:25:04,559
page

658
00:25:04,559 --> 00:25:06,000
do read and follow the contributor

659
00:25:06,000 --> 00:25:08,400
guidelines and if you

660
00:25:08,400 --> 00:25:10,320
know python you can of course help us

661
00:25:10,320 --> 00:25:12,320
with coding if you know yaml you can

662
00:25:12,320 --> 00:25:14,400
help us with the vulnerability modules

663
00:25:14,400 --> 00:25:16,640
you can also help us with translations

664
00:25:16,640 --> 00:25:19,039
and documentation if you want to

665
00:25:19,039 --> 00:25:21,919
contribute a known in a non-technical

666
00:25:21,919 --> 00:25:22,799
way

667
00:25:22,799 --> 00:25:24,159
so um

668
00:25:24,159 --> 00:25:26,400
that's it about the attacker please use

669
00:25:26,400 --> 00:25:28,400
it to attack your own network before the

670
00:25:28,400 --> 00:25:31,760
real attackers do um i'm now ready to

671
00:25:31,760 --> 00:25:34,720
take any questions uh and um

672
00:25:34,720 --> 00:25:37,440
as you have heard from the moderators uh

673
00:25:37,440 --> 00:25:39,840
we're taking questions today in oahu's

674
00:25:39,840 --> 00:25:42,240
slab channel and the current was slack

675
00:25:42,240 --> 00:25:44,159
channel for this track is 20th

676
00:25:44,159 --> 00:25:46,159
anniversary temporal you can also

677
00:25:46,159 --> 00:25:49,360
contact me via email or via twitter at

678
00:25:49,360 --> 00:25:53,439
secure step 9. thank you

