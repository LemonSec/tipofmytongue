1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,400 --> 00:00:09,840
uh and thanks to everybody who's taking

3
00:00:09,840 --> 00:00:11,759
the time today to uh to

4
00:00:11,759 --> 00:00:14,320
watch this or with the recording um this

5
00:00:14,320 --> 00:00:16,800
is an area that i have been looking into

6
00:00:16,800 --> 00:00:18,560
for for two reasons you know the first

7
00:00:18,560 --> 00:00:20,320
is from from a consulting standpoint

8
00:00:20,320 --> 00:00:21,359
we've been working with a number of

9
00:00:21,359 --> 00:00:24,160
organizations who have concerns or come

10
00:00:24,160 --> 00:00:25,760
to us to say hey we've got concerns

11
00:00:25,760 --> 00:00:27,920
about our ci cd pipeline

12
00:00:27,920 --> 00:00:29,519
a lot of times when they're moving a lot

13
00:00:29,519 --> 00:00:32,079
of ci cd stuff out to the cloud and the

14
00:00:32,079 --> 00:00:33,680
you know hey we have a concern about

15
00:00:33,680 --> 00:00:36,079
this can you take a look at the uh and

16
00:00:36,079 --> 00:00:37,680
what our build process looks like to

17
00:00:37,680 --> 00:00:39,280
make sure that we're not exposing data

18
00:00:39,280 --> 00:00:40,559
that we're not allowing people in and

19
00:00:40,559 --> 00:00:42,160
whatnot

20
00:00:42,160 --> 00:00:43,920
and so we've done a bunch of consulting

21
00:00:43,920 --> 00:00:45,440
around around that with a bunch of

22
00:00:45,440 --> 00:00:48,480
organizations as they evolve their cicd

23
00:00:48,480 --> 00:00:49,680
practices

24
00:00:49,680 --> 00:00:51,680
uh but also as martin mentioned uh

25
00:00:51,680 --> 00:00:53,360
recently i mean up in for the last 20

26
00:00:53,360 --> 00:00:55,840
years i was the cto at dinner group we

27
00:00:55,840 --> 00:00:57,680
were recently acquired by coal fire

28
00:00:57,680 --> 00:00:58,879
about three and a half little over three

29
00:00:58,879 --> 00:01:00,239
and a half months ago

30
00:01:00,239 --> 00:01:02,239
and as part of that process the as part

31
00:01:02,239 --> 00:01:05,600
of the diligence process for that um

32
00:01:05,600 --> 00:01:07,600
they went through and looked at the our

33
00:01:07,600 --> 00:01:10,080
thread fix platform and so i had to get

34
00:01:10,080 --> 00:01:12,479
reintroduced to um

35
00:01:12,479 --> 00:01:14,640
the uh you know kind of what our ci cd

36
00:01:14,640 --> 00:01:16,479
pipeline looked like and how all that uh

37
00:01:16,479 --> 00:01:17,920
you know all that was so that was really

38
00:01:17,920 --> 00:01:19,840
interesting to me just to to really dig

39
00:01:19,840 --> 00:01:22,159
in and look at the process that we used

40
00:01:22,159 --> 00:01:24,560
um and so those two things intersected

41
00:01:24,560 --> 00:01:25,280
to

42
00:01:25,280 --> 00:01:28,080
this presentation talking about

43
00:01:28,080 --> 00:01:29,439
some different things that i found

44
00:01:29,439 --> 00:01:30,960
interesting about this

45
00:01:30,960 --> 00:01:32,960
uh so we'll talk again about what's your

46
00:01:32,960 --> 00:01:34,799
risk exposure based on your build

47
00:01:34,799 --> 00:01:36,960
pipeline we'll give a super brief uh

48
00:01:36,960 --> 00:01:38,240
explanation or

49
00:01:38,240 --> 00:01:39,439
talk about threat modeling really just

50
00:01:39,439 --> 00:01:41,360
links out to other materials because of

51
00:01:41,360 --> 00:01:43,840
time i'll talk about the concerns about

52
00:01:43,840 --> 00:01:45,600
the supporting infrastructure that runs

53
00:01:45,600 --> 00:01:47,680
this build process

54
00:01:47,680 --> 00:01:50,079
uh and then uh you know we'll we'll go

55
00:01:50,079 --> 00:01:52,000
through a really quickly a pipeline

56
00:01:52,000 --> 00:01:53,439
threat model it's a template threat

57
00:01:53,439 --> 00:01:54,560
model

58
00:01:54,560 --> 00:01:56,479
that you can use uh you know take back

59
00:01:56,479 --> 00:01:58,320
to your environment and potentially look

60
00:01:58,320 --> 00:02:00,479
again a lot we got a lot of questions on

61
00:02:00,479 --> 00:02:02,159
the slide that you can use in your

62
00:02:02,159 --> 00:02:03,840
environment to ask questions uh to

63
00:02:03,840 --> 00:02:05,280
understand more about it

64
00:02:05,280 --> 00:02:06,399
and then talk about different ways to

65
00:02:06,399 --> 00:02:08,479
use it both again internal facing to

66
00:02:08,479 --> 00:02:10,239
increase your security as well as

67
00:02:10,239 --> 00:02:12,720
external facing from a vendor management

68
00:02:12,720 --> 00:02:15,200
standpoint uh and then i have some some

69
00:02:15,200 --> 00:02:17,360
discussion points that i will uh present

70
00:02:17,360 --> 00:02:19,840
uh so that we can then argue about them

71
00:02:19,840 --> 00:02:20,840
in the slack

72
00:02:20,840 --> 00:02:23,680
afterwards um so

73
00:02:23,680 --> 00:02:25,520
there's been a couple notable incidents

74
00:02:25,520 --> 00:02:27,840
in this space that leads to this being

75
00:02:27,840 --> 00:02:30,160
again a topic of interest out in the

76
00:02:30,160 --> 00:02:32,319
industry you know in the solarwinds case

77
00:02:32,319 --> 00:02:34,319
their uh build infrastructure is serving

78
00:02:34,319 --> 00:02:36,239
the build infrastructure was compromised

79
00:02:36,239 --> 00:02:38,239
uh causing integrity issues with the

80
00:02:38,239 --> 00:02:40,800
software uh in code code code they had a

81
00:02:40,800 --> 00:02:42,800
compromised container server that caused

82
00:02:42,800 --> 00:02:44,400
a uh

83
00:02:44,400 --> 00:02:46,239
improper changes to their tool that led

84
00:02:46,239 --> 00:02:48,720
to a bunch of issues uh and and this

85
00:02:48,720 --> 00:02:50,080
trend i mean these aren't the only two

86
00:02:50,080 --> 00:02:53,519
this trend contributed to the uh

87
00:02:53,519 --> 00:02:55,440
administration executive order and other

88
00:02:55,440 --> 00:02:56,879
government activity in the space and so

89
00:02:56,879 --> 00:02:58,720
it's tremendous uh you know for for

90
00:02:58,720 --> 00:03:00,000
vendors out there it's tremendous fear

91
00:03:00,000 --> 00:03:01,840
uncertainty and doubt uh and but for

92
00:03:01,840 --> 00:03:03,440
practitioners uh or folks that are

93
00:03:03,440 --> 00:03:04,720
responsible

94
00:03:04,720 --> 00:03:06,640
for the security of ci cd pipelines is

95
00:03:06,640 --> 00:03:09,519
also a call to uh it's also a call to

96
00:03:09,519 --> 00:03:11,920
action uh let's take a look at this

97
00:03:11,920 --> 00:03:13,599
potential exposure area that we might

98
00:03:13,599 --> 00:03:16,159
not have looked at before

99
00:03:16,159 --> 00:03:17,040
and

100
00:03:17,040 --> 00:03:18,400
you know there's

101
00:03:18,400 --> 00:03:19,599
like the challenges there's kind of a

102
00:03:19,599 --> 00:03:21,599
fundamental disconnect you know i

103
00:03:21,599 --> 00:03:23,519
remember when i i mean i started my

104
00:03:23,519 --> 00:03:25,200
career as a developer probably 25 years

105
00:03:25,200 --> 00:03:27,519
ago and i look at the advances we have

106
00:03:27,519 --> 00:03:30,159
made with version control uh you know

107
00:03:30,159 --> 00:03:31,920
static analysis both for quality and

108
00:03:31,920 --> 00:03:33,599
security you know unit testing

109
00:03:33,599 --> 00:03:35,200
acceptance testing code coverage like

110
00:03:35,200 --> 00:03:37,280
the tooling we have available now

111
00:03:37,280 --> 00:03:40,720
is so much better and so much easier to

112
00:03:40,720 --> 00:03:43,440
use than it was you know when i started

113
00:03:43,440 --> 00:03:45,599
my career you know in the mid to late

114
00:03:45,599 --> 00:03:48,159
90s as a java developer right there's i

115
00:03:48,159 --> 00:03:51,120
mean we have just amazing tools that put

116
00:03:51,120 --> 00:03:53,040
us in a situation where we should be

117
00:03:53,040 --> 00:03:55,040
able to create you know secure reliable

118
00:03:55,040 --> 00:03:57,120
software at a scale

119
00:03:57,120 --> 00:03:59,200
that previously hadn't been considered

120
00:03:59,200 --> 00:04:00,879
uh you know the flip side of that is

121
00:04:00,879 --> 00:04:02,720
that the way that we deploy and deliver

122
00:04:02,720 --> 00:04:04,239
this tooling puts us in a situation

123
00:04:04,239 --> 00:04:05,840
where you actually can't trust anything

124
00:04:05,840 --> 00:04:07,840
that comes out of the other end

125
00:04:07,840 --> 00:04:09,519
uh

126
00:04:09,519 --> 00:04:12,879
oops yeah this is really all i can is

127
00:04:12,879 --> 00:04:14,799
really all i can say to that

128
00:04:14,799 --> 00:04:17,918
uh and and especially like the deeper

129
00:04:17,918 --> 00:04:19,279
into this or the more that i looked at

130
00:04:19,279 --> 00:04:20,959
this what i really found is these build

131
00:04:20,959 --> 00:04:23,280
pipelines have fractal attack surface

132
00:04:23,280 --> 00:04:25,040
right where we look and we see okay well

133
00:04:25,040 --> 00:04:26,639
i see kind of the general shape well if

134
00:04:26,639 --> 00:04:29,040
you zoom in on any of these shapes you

135
00:04:29,040 --> 00:04:30,560
find like oh well this shape actually

136
00:04:30,560 --> 00:04:33,120
has a level of complexity uh where it's

137
00:04:33,120 --> 00:04:34,479
repeating a lot of the things before it

138
00:04:34,479 --> 00:04:35,919
has a level of complexity that repeats

139
00:04:35,919 --> 00:04:37,360
and if you zoom in even closer you see

140
00:04:37,360 --> 00:04:39,199
that you know same complexity zoom in

141
00:04:39,199 --> 00:04:41,360
and so on and so forth so that's really

142
00:04:41,360 --> 00:04:42,960
a challenge that we've found and i'll

143
00:04:42,960 --> 00:04:44,320
talk about some of the sources of this

144
00:04:44,320 --> 00:04:45,919
but if you just think about we've got

145
00:04:45,919 --> 00:04:48,720
code we've got open source components uh

146
00:04:48,720 --> 00:04:51,759
you know we have uh you know

147
00:04:51,759 --> 00:04:53,840
you know web hooks we've got uh you know

148
00:04:53,840 --> 00:04:55,919
github actions we've got you know

149
00:04:55,919 --> 00:04:58,320
everything along the way has a plug-in

150
00:04:58,320 --> 00:05:00,479
model and you don't necessarily know

151
00:05:00,479 --> 00:05:02,000
where those plug-ins are being pulled

152
00:05:02,000 --> 00:05:03,440
from unless you're being really careful

153
00:05:03,440 --> 00:05:05,440
so that's a real challenge with these ci

154
00:05:05,440 --> 00:05:07,360
cd pipelines is just you know the

155
00:05:07,360 --> 00:05:09,440
fractal attack surface that they expose

156
00:05:09,440 --> 00:05:11,759
that is you know can be an ever-changing

157
00:05:11,759 --> 00:05:12,880
mess

158
00:05:12,880 --> 00:05:14,880
so from a threat modeling standpoint uh

159
00:05:14,880 --> 00:05:16,639
again it's just for time reasons we

160
00:05:16,639 --> 00:05:18,720
don't really have time to to dive deep

161
00:05:18,720 --> 00:05:20,400
into this um you know if you want some

162
00:05:20,400 --> 00:05:22,240
background you can take a look there's

163
00:05:22,240 --> 00:05:23,520
some resources out there that are

164
00:05:23,520 --> 00:05:24,560
available

165
00:05:24,560 --> 00:05:25,520
but basically what we're going to do is

166
00:05:25,520 --> 00:05:27,440
we're going to break the parts of the

167
00:05:27,440 --> 00:05:29,600
cicd pipeline and the build process down

168
00:05:29,600 --> 00:05:32,000
into pieces watch how data flows between

169
00:05:32,000 --> 00:05:33,840
them and identify potential areas of

170
00:05:33,840 --> 00:05:35,440
exposure and

171
00:05:35,440 --> 00:05:37,520
again we've got there's a lot of

172
00:05:37,520 --> 00:05:39,199
questions that you can use to ask in

173
00:05:39,199 --> 00:05:40,240
your environment about the different

174
00:05:40,240 --> 00:05:41,840
stages and we'll outline different

175
00:05:41,840 --> 00:05:43,520
concerns um

176
00:05:43,520 --> 00:05:45,360
along the way

177
00:05:45,360 --> 00:05:47,600
so you know what's the from a just from

178
00:05:47,600 --> 00:05:49,120
a raw concern standpoint like what are

179
00:05:49,120 --> 00:05:50,960
we worried about in the cicd pipeline

180
00:05:50,960 --> 00:05:52,720
you know the potential confidentiality

181
00:05:52,720 --> 00:05:54,960
impact of a breach in your cicd pipeline

182
00:05:54,960 --> 00:05:56,400
uh you know ip disclosures your

183
00:05:56,400 --> 00:05:57,840
organizations have algorithms that are

184
00:05:57,840 --> 00:06:00,560
subject to trade secret protection um

185
00:06:00,560 --> 00:06:01,680
you know there are

186
00:06:01,680 --> 00:06:04,720
your concerns about uh you know again

187
00:06:04,720 --> 00:06:06,319
the access to source code that people

188
00:06:06,319 --> 00:06:07,600
aren't supposed to have access to and

189
00:06:07,600 --> 00:06:10,240
whatnot and you know if you see how like

190
00:06:10,240 --> 00:06:11,759
it's been interesting for me seeing how

191
00:06:11,759 --> 00:06:13,199
organizations

192
00:06:13,199 --> 00:06:16,319
from a legal standpoint will be very

193
00:06:16,319 --> 00:06:18,639
very concerned about the open source

194
00:06:18,639 --> 00:06:20,319
licenses is so associated with their

195
00:06:20,319 --> 00:06:21,360
software because they don't want to be

196
00:06:21,360 --> 00:06:24,080
forced to disclose source by including

197
00:06:24,080 --> 00:06:26,639
gpl or other viral components but

198
00:06:26,639 --> 00:06:28,639
organizations are more lacks about

199
00:06:28,639 --> 00:06:30,560
including components with security

200
00:06:30,560 --> 00:06:32,319
vulnerabilities and that's because that

201
00:06:32,319 --> 00:06:34,080
you know again a concern about the value

202
00:06:34,080 --> 00:06:36,560
of that ip uh so that that's a big

203
00:06:36,560 --> 00:06:37,919
confidentiality concern you know

204
00:06:37,919 --> 00:06:39,120
obviously in the build process you're

205
00:06:39,120 --> 00:06:41,120
going to have secrets uh you know used

206
00:06:41,120 --> 00:06:43,280
for signing things and whatnot

207
00:06:43,280 --> 00:06:45,600
uh and and so on and so forth and and if

208
00:06:45,600 --> 00:06:47,520
your source code is exposed that puts

209
00:06:47,520 --> 00:06:49,440
you at a risk for vulnerability

210
00:06:49,440 --> 00:06:51,520
disclosure uh you know vulnerability

211
00:06:51,520 --> 00:06:53,440
data is not typically subject to

212
00:06:53,440 --> 00:06:55,120
regulation but it's obviously you know

213
00:06:55,120 --> 00:06:56,800
high value and sensitive information

214
00:06:56,800 --> 00:06:59,039
that no one wants to let outside of

215
00:06:59,039 --> 00:07:01,440
their walls in an uncontrolled manner

216
00:07:01,440 --> 00:07:02,720
you know when we look from an integrity

217
00:07:02,720 --> 00:07:04,639
standpoint you know the concerns are if

218
00:07:04,639 --> 00:07:06,080
someone can actually instead of just

219
00:07:06,080 --> 00:07:07,599
being able to see what's going on in the

220
00:07:07,599 --> 00:07:09,520
building process if they can affect it

221
00:07:09,520 --> 00:07:11,440
uh that's scary uh you know because

222
00:07:11,440 --> 00:07:13,120
people can put in things like back doors

223
00:07:13,120 --> 00:07:15,520
um or other suspicious uh or you know or

224
00:07:15,520 --> 00:07:16,720
you know that provides like

225
00:07:16,720 --> 00:07:18,800
surreptitious access and you can also

226
00:07:18,800 --> 00:07:20,960
have other unwanted behaviors crypto

227
00:07:20,960 --> 00:07:23,280
mining you know ddosing things of that

228
00:07:23,280 --> 00:07:24,240
nature

229
00:07:24,240 --> 00:07:26,800
and again just a general compromise of

230
00:07:26,800 --> 00:07:29,199
parts along that build chain

231
00:07:29,199 --> 00:07:31,440
from an availability standpoint

232
00:07:31,440 --> 00:07:34,400
in most situations uh that where where

233
00:07:34,400 --> 00:07:36,240
we've worked with folks this is less of

234
00:07:36,240 --> 00:07:37,440
a

235
00:07:37,440 --> 00:07:39,440
less of a concern

236
00:07:39,440 --> 00:07:41,199
you know obviously you know you want to

237
00:07:41,199 --> 00:07:43,039
be able to build deploy software if

238
00:07:43,039 --> 00:07:44,720
you're delayed in doing that that may

239
00:07:44,720 --> 00:07:47,039
have an impact but probably not as acute

240
00:07:47,039 --> 00:07:49,520
as a confidentiality or integrity breach

241
00:07:49,520 --> 00:07:52,240
you know one potential situation where

242
00:07:52,240 --> 00:07:54,240
you would have availability concerns

243
00:07:54,240 --> 00:07:55,840
software today isn't just a model that

244
00:07:55,840 --> 00:07:58,000
runs you know your clients deployed

245
00:07:58,000 --> 00:07:59,599
software might depend on services that

246
00:07:59,599 --> 00:08:01,199
you're providing and so an inability to

247
00:08:01,199 --> 00:08:03,039
update those for some period of time

248
00:08:03,039 --> 00:08:04,960
that may have you may have a negative

249
00:08:04,960 --> 00:08:06,879
impact

250
00:08:06,879 --> 00:08:09,759
now it's important first to think about

251
00:08:09,759 --> 00:08:12,000
the infrastructure supporting your ci cd

252
00:08:12,000 --> 00:08:13,759
pipeline right are these fixed assets

253
00:08:13,759 --> 00:08:15,599
are these bare metal servers or virtual

254
00:08:15,599 --> 00:08:16,960
servers that live for a long time are

255
00:08:16,960 --> 00:08:19,039
these ephemeral assets virtual servers

256
00:08:19,039 --> 00:08:20,560
that pop up and pop down or containers

257
00:08:20,560 --> 00:08:22,160
that spin up and spin down

258
00:08:22,160 --> 00:08:24,000
you know and how does that fit into your

259
00:08:24,000 --> 00:08:25,360
scanning regimen you know one thing

260
00:08:25,360 --> 00:08:27,840
we've found in a number of organizations

261
00:08:27,840 --> 00:08:30,400
is a lot of dev infrastructure is

262
00:08:30,400 --> 00:08:33,279
managed by developers and so it may not

263
00:08:33,279 --> 00:08:35,440
be in scope for the corporate you know

264
00:08:35,440 --> 00:08:37,519
scanning and patching regimens that they

265
00:08:37,519 --> 00:08:38,958
have in place

266
00:08:38,958 --> 00:08:40,640
and that is

267
00:08:40,640 --> 00:08:42,479
the developers tend to like this because

268
00:08:42,479 --> 00:08:44,560
it gives them the ability to kind of own

269
00:08:44,560 --> 00:08:45,600
their

270
00:08:45,600 --> 00:08:47,760
own their situation which is great uh

271
00:08:47,760 --> 00:08:49,279
it's potentially though risky because

272
00:08:49,279 --> 00:08:50,959
you don't have if you're used to having

273
00:08:50,959 --> 00:08:53,040
these detection and controls and kind of

274
00:08:53,040 --> 00:08:54,800
mitigations in place for the rest of

275
00:08:54,800 --> 00:08:56,399
your infrastructure you know when you

276
00:08:56,399 --> 00:08:58,080
look at your ci cd infrastructure like

277
00:08:58,080 --> 00:08:59,920
that's there's a lot of really valuable

278
00:08:59,920 --> 00:09:01,440
and sensitive stuff that flows through

279
00:09:01,440 --> 00:09:02,160
that

280
00:09:02,160 --> 00:09:04,640
and so you know to not have those

281
00:09:04,640 --> 00:09:08,240
practices in place uh is scary um and uh

282
00:09:08,240 --> 00:09:09,839
you know infrastructure as code can be

283
00:09:09,839 --> 00:09:11,680
helped in this but also you know can

284
00:09:11,680 --> 00:09:13,839
also be an area that exposes you to risk

285
00:09:13,839 --> 00:09:16,160
and so it's important to ask questions

286
00:09:16,160 --> 00:09:18,240
if you're going to talk to the folks

287
00:09:18,240 --> 00:09:20,000
your dev stuff and stack out folks

288
00:09:20,000 --> 00:09:22,240
responsible for the pipelines start by

289
00:09:22,240 --> 00:09:23,360
understanding what does the support

290
00:09:23,360 --> 00:09:24,800
infrastructure look like where does this

291
00:09:24,800 --> 00:09:27,360
stuff live and how are these normal

292
00:09:27,360 --> 00:09:29,279
information security practices being

293
00:09:29,279 --> 00:09:31,600
implemented for that

294
00:09:31,600 --> 00:09:33,920
another challenge the real challenge

295
00:09:33,920 --> 00:09:36,320
with modern tooling is like the

296
00:09:36,320 --> 00:09:39,120
perimeter is a freaking nightmare right

297
00:09:39,120 --> 00:09:40,480
you know it's a critical part of the

298
00:09:40,480 --> 00:09:42,080
threat modeling process is to understand

299
00:09:42,080 --> 00:09:43,680
like well what's in scope and what's out

300
00:09:43,680 --> 00:09:46,000
of scope and for

301
00:09:46,000 --> 00:09:48,240
for for modern ci cd pipelines that are

302
00:09:48,240 --> 00:09:49,120
using

303
00:09:49,120 --> 00:09:50,399
a lot of the cool tooling that's

304
00:09:50,399 --> 00:09:52,320
available this turns out to be extremely

305
00:09:52,320 --> 00:09:54,160
extremely difficult and

306
00:09:54,160 --> 00:09:56,880
often impossible to find the boundary uh

307
00:09:56,880 --> 00:09:58,240
there's a lot of steps a lot of moving

308
00:09:58,240 --> 00:10:01,200
parts and what it looks like today may

309
00:10:01,200 --> 00:10:04,079
not be what it looks like later right

310
00:10:04,079 --> 00:10:05,519
and especially as i talked about you

311
00:10:05,519 --> 00:10:07,920
know you've got uh actions and apps and

312
00:10:07,920 --> 00:10:10,240
everything has an extension uh your

313
00:10:10,240 --> 00:10:12,320
plugin mechanism you know those plugins

314
00:10:12,320 --> 00:10:15,360
get loaded from who knows where um

315
00:10:15,360 --> 00:10:17,920
you know you you could be running code

316
00:10:17,920 --> 00:10:21,120
from almost anywhere and that code

317
00:10:21,120 --> 00:10:23,200
running from anywhere unless constrained

318
00:10:23,200 --> 00:10:25,990
is potentially going to send

319
00:10:25,990 --> 00:10:27,279
[Music]

320
00:10:27,279 --> 00:10:30,160
your code uh elsewhere for analysis for

321
00:10:30,160 --> 00:10:33,360
archiving for uh whatever that might be

322
00:10:33,360 --> 00:10:35,040
and uh you know so so you don't

323
00:10:35,040 --> 00:10:36,800
necessarily know unless you've looked at

324
00:10:36,800 --> 00:10:39,200
it uh where your data is going and a

325
00:10:39,200 --> 00:10:41,600
real challenge here uh for a lot of

326
00:10:41,600 --> 00:10:43,200
security teams to understand like if you

327
00:10:43,200 --> 00:10:45,120
look at how most security tools get

328
00:10:45,120 --> 00:10:47,680
purchased uh it's kind of a big box like

329
00:10:47,680 --> 00:10:50,480
a monolithic evaluation proof of concept

330
00:10:50,480 --> 00:10:52,320
procurement deployment right you've got

331
00:10:52,320 --> 00:10:54,160
this big security you know scanner tool

332
00:10:54,160 --> 00:10:56,880
or whatever it is like doing stuff

333
00:10:56,880 --> 00:10:59,120
if you look at how dev tools get

334
00:10:59,120 --> 00:11:01,200
implemented like it's very different you

335
00:11:01,200 --> 00:11:03,279
know a lot of the dev tools are freely

336
00:11:03,279 --> 00:11:05,040
available or they have freemium models

337
00:11:05,040 --> 00:11:06,640
where you kind of you know just by

338
00:11:06,640 --> 00:11:08,079
having a github account like all of a

339
00:11:08,079 --> 00:11:09,760
sudden anybody with a github account is

340
00:11:09,760 --> 00:11:11,760
a corporate purchasing agent uh where

341
00:11:11,760 --> 00:11:13,200
they're bringing you know spinning up

342
00:11:13,200 --> 00:11:16,079
new tools in the cicd pipeline

343
00:11:16,079 --> 00:11:18,720
and uh you know and and that's scary to

344
00:11:18,720 --> 00:11:20,000
a lot of security folks but that's just

345
00:11:20,000 --> 00:11:21,600
normal for development teams where they

346
00:11:21,600 --> 00:11:23,279
say like yo hey i found this uh you know

347
00:11:23,279 --> 00:11:24,720
neat new code coverage tool that we're

348
00:11:24,720 --> 00:11:26,399
gonna use and as long as we don't use it

349
00:11:26,399 --> 00:11:28,560
for more than five projects it's free uh

350
00:11:28,560 --> 00:11:29,920
you know i can i can load it up here

351
00:11:29,920 --> 00:11:32,560
from github right and most organizations

352
00:11:32,560 --> 00:11:35,120
don't have great controls around those

353
00:11:35,120 --> 00:11:37,760
uh and and honestly it's not easy to

354
00:11:37,760 --> 00:11:40,480
implement those types of controls and so

355
00:11:40,480 --> 00:11:41,760
one of the things one one of the

356
00:11:41,760 --> 00:11:43,040
approaches i tried two different

357
00:11:43,040 --> 00:11:44,880
approaches uh or two different things

358
00:11:44,880 --> 00:11:47,519
that i looked at when we were uh

359
00:11:47,519 --> 00:11:49,040
kind of dug into this you know the first

360
00:11:49,040 --> 00:11:50,560
thing i tried well hey let's uh you know

361
00:11:50,560 --> 00:11:52,880
let's just watch the netflow data of the

362
00:11:52,880 --> 00:11:54,480
build process right like that would be

363
00:11:54,480 --> 00:11:55,600
interesting because we could see like

364
00:11:55,600 --> 00:11:57,440
where where should this build process be

365
00:11:57,440 --> 00:11:59,440
able to talk and not be able to talk and

366
00:11:59,440 --> 00:12:00,560
you know maybe we could put firewall

367
00:12:00,560 --> 00:12:01,920
rules around it or something like this a

368
00:12:01,920 --> 00:12:03,120
great idea like oh yeah we're just gonna

369
00:12:03,120 --> 00:12:04,320
put a wrapper around the process and

370
00:12:04,320 --> 00:12:05,600
make sure it only does the stuff it's

371
00:12:05,600 --> 00:12:07,760
supposed to do like i watched a couple

372
00:12:07,760 --> 00:12:10,000
of different software products and the

373
00:12:10,000 --> 00:12:12,399
netflow data around that and it was it

374
00:12:12,399 --> 00:12:14,320
talked to everything right it just

375
00:12:14,320 --> 00:12:16,240
simply wasn't reasonable to sort through

376
00:12:16,240 --> 00:12:17,920
that data and figure out you know

377
00:12:17,920 --> 00:12:19,519
there's so much traffic to so many

378
00:12:19,519 --> 00:12:21,279
endpoints that like

379
00:12:21,279 --> 00:12:22,959
how are you supposed to know what's the

380
00:12:22,959 --> 00:12:24,959
right stuff to look at or not

381
00:12:24,959 --> 00:12:28,079
um so what i like an approach that

382
00:12:28,079 --> 00:12:29,600
that i've used that we've used in other

383
00:12:29,600 --> 00:12:31,279
environments that has had a lot of

384
00:12:31,279 --> 00:12:33,200
success is well let's start with a code

385
00:12:33,200 --> 00:12:36,399
commit and follow like walk me through

386
00:12:36,399 --> 00:12:38,880
the workflow right and i know this i

387
00:12:38,880 --> 00:12:40,000
mean it sucks because you actually have

388
00:12:40,000 --> 00:12:42,240
to talk to people and ask questions and

389
00:12:42,240 --> 00:12:43,920
get their answers um that's less

390
00:12:43,920 --> 00:12:45,519
convenient than having like a neat uh

391
00:12:45,519 --> 00:12:48,720
netflow firewall model to do things

392
00:12:48,720 --> 00:12:49,839
but

393
00:12:49,839 --> 00:12:51,600
again that that was something that i

394
00:12:51,600 --> 00:12:53,600
found that worked

395
00:12:53,600 --> 00:12:56,399
and so if you look at an example cicd

396
00:12:56,399 --> 00:12:58,480
pipeline dataflow again everybody's is

397
00:12:58,480 --> 00:13:00,320
uh you know every every product is going

398
00:13:00,320 --> 00:13:01,440
to be different every you know

399
00:13:01,440 --> 00:13:04,320
applications is going to be different

400
00:13:04,320 --> 00:13:06,800
and uh you know you know but this is

401
00:13:06,800 --> 00:13:08,399
kind of you know the idea you've got

402
00:13:08,399 --> 00:13:10,079
your developer they're committing code

403
00:13:10,079 --> 00:13:11,839
to a repository you're pulling open

404
00:13:11,839 --> 00:13:14,000
source components you build that into a

405
00:13:14,000 --> 00:13:15,839
binary you know that binary gets run

406
00:13:15,839 --> 00:13:17,839
through a variety of different tests you

407
00:13:17,839 --> 00:13:20,560
make some sort of an evaluation if the

408
00:13:20,560 --> 00:13:22,320
build passes then that gets passed into

409
00:13:22,320 --> 00:13:24,399
some sort of a build repository and then

410
00:13:24,399 --> 00:13:27,600
distributed out to others right that's a

411
00:13:27,600 --> 00:13:29,440
again your process may have different

412
00:13:29,440 --> 00:13:31,440
steps may have different controls

413
00:13:31,440 --> 00:13:33,519
but this is at least a template that you

414
00:13:33,519 --> 00:13:36,079
can work from uh you know augment and uh

415
00:13:36,079 --> 00:13:37,760
and kind of

416
00:13:37,760 --> 00:13:38,959
you know customize it for your

417
00:13:38,959 --> 00:13:40,000
environment

418
00:13:40,000 --> 00:13:41,360
you know and so what do we what do we

419
00:13:41,360 --> 00:13:42,639
want to do again talk through the code

420
00:13:42,639 --> 00:13:44,000
change you know

421
00:13:44,000 --> 00:13:46,399
change the code run the build

422
00:13:46,399 --> 00:13:48,880
you know automated testing accept or

423
00:13:48,880 --> 00:13:51,680
deny uh push to distribution just and

424
00:13:51,680 --> 00:13:53,600
actually distribute the software

425
00:13:53,600 --> 00:13:54,480
and

426
00:13:54,480 --> 00:13:56,320
as you're working with folks in your

427
00:13:56,320 --> 00:13:58,959
environment you want to ask questions at

428
00:13:58,959 --> 00:14:00,959
each stage right and

429
00:14:00,959 --> 00:14:03,360
like two really important questions that

430
00:14:03,360 --> 00:14:05,760
i've found to ask are well how does this

431
00:14:05,760 --> 00:14:08,160
step authenticate itself to the next

432
00:14:08,160 --> 00:14:10,079
step right like how does this component

433
00:14:10,079 --> 00:14:12,480
let the next component know like

434
00:14:12,480 --> 00:14:14,160
you know who it is what it's doing like

435
00:14:14,160 --> 00:14:16,079
why what sort of access it's supposed to

436
00:14:16,079 --> 00:14:17,680
have right like how do the steps you

437
00:14:17,680 --> 00:14:19,680
know go from one to the next

438
00:14:19,680 --> 00:14:21,839
um because that identifies a lot of

439
00:14:21,839 --> 00:14:24,399
potential concerns uh and also

440
00:14:24,399 --> 00:14:26,399
answer me a simple question where is the

441
00:14:26,399 --> 00:14:27,440
server

442
00:14:27,440 --> 00:14:28,800
right like where is the server or

443
00:14:28,800 --> 00:14:31,120
services that is performing this step

444
00:14:31,120 --> 00:14:33,040
right like where where does the data

445
00:14:33,040 --> 00:14:35,040
have to go and where is the code going

446
00:14:35,040 --> 00:14:36,880
to run that's actually going to perform

447
00:14:36,880 --> 00:14:39,519
this this this action before moving on

448
00:14:39,519 --> 00:14:40,800
to the next one

449
00:14:40,800 --> 00:14:42,720
and you know this is also this should be

450
00:14:42,720 --> 00:14:45,760
a show activity not a tell activity

451
00:14:45,760 --> 00:14:47,040
right you want to be you know show me

452
00:14:47,040 --> 00:14:48,399
the screen like show me the user

453
00:14:48,399 --> 00:14:50,720
interface you know show me like evidence

454
00:14:50,720 --> 00:14:53,600
of why you think this is behaving as it

455
00:14:53,600 --> 00:14:56,000
is because that's not uh you know it's

456
00:14:56,000 --> 00:14:57,440
not always

457
00:14:57,440 --> 00:15:00,000
it's not always obvious

458
00:15:00,000 --> 00:15:02,160
now some general overarching concerns

459
00:15:02,160 --> 00:15:03,680
there's a tremendous amount of network

460
00:15:03,680 --> 00:15:05,279
traffic that goes into this again from

461
00:15:05,279 --> 00:15:07,920
the netflow example uh you know how is

462
00:15:07,920 --> 00:15:10,720
that traffic being protected um you know

463
00:15:10,720 --> 00:15:12,160
again you know like let's make sure that

464
00:15:12,160 --> 00:15:13,760
we've got tls in place to guard

465
00:15:13,760 --> 00:15:15,760
confidentiality integrity and as i

466
00:15:15,760 --> 00:15:17,120
mentioned before there's a lot of

467
00:15:17,120 --> 00:15:19,920
authentication points where you have uh

468
00:15:19,920 --> 00:15:21,680
you know you have users authenticating

469
00:15:21,680 --> 00:15:23,440
themselves to systems to do different

470
00:15:23,440 --> 00:15:25,680
activities but you also uh along that

471
00:15:25,680 --> 00:15:27,040
build process you've got systems

472
00:15:27,040 --> 00:15:29,279
authenticating themselves to one another

473
00:15:29,279 --> 00:15:31,199
uh you know how you know just understand

474
00:15:31,199 --> 00:15:32,959
the mechanics how is that happening and

475
00:15:32,959 --> 00:15:35,600
do you have an overarching you know

476
00:15:35,600 --> 00:15:37,440
identity and access management paradigm

477
00:15:37,440 --> 00:15:38,399
in place

478
00:15:38,399 --> 00:15:40,720
or more likely is there some sort of

479
00:15:40,720 --> 00:15:42,959
combination of overlapping approaches of

480
00:15:42,959 --> 00:15:45,120
how these pieces all fit together you

481
00:15:45,120 --> 00:15:47,279
know with their credentialing

482
00:15:47,279 --> 00:15:49,360
you know also data storage you know how

483
00:15:49,360 --> 00:15:51,839
is data at rest protected if it needs to

484
00:15:51,839 --> 00:15:53,600
be uh you know for you know especially

485
00:15:53,600 --> 00:15:55,680
for like file and block storage um you

486
00:15:55,680 --> 00:15:58,399
know and what are your uh what are your

487
00:15:58,399 --> 00:16:00,720
unknown unknowns right like where where

488
00:16:00,720 --> 00:16:02,480
where are you identifying things as you

489
00:16:02,480 --> 00:16:04,480
as you talk through this with a

490
00:16:04,480 --> 00:16:06,800
devsecops engineer where are the places

491
00:16:06,800 --> 00:16:08,399
where you get the

492
00:16:08,399 --> 00:16:09,920
what we call the two-shoulder salute

493
00:16:09,920 --> 00:16:13,120
like you ask a question they say

494
00:16:13,360 --> 00:16:14,240
um

495
00:16:14,240 --> 00:16:15,199
yeah

496
00:16:15,199 --> 00:16:17,040
and again like a challenge here is like

497
00:16:17,040 --> 00:16:18,800
any developer with a github account is

498
00:16:18,800 --> 00:16:20,399
now potentially their own purchasing

499
00:16:20,399 --> 00:16:22,000
agent which is a you know for a lot of

500
00:16:22,000 --> 00:16:23,759
security practitioners is really a

501
00:16:23,759 --> 00:16:26,160
terrifying uh concern

502
00:16:26,160 --> 00:16:27,759
so if we look at some you know specific

503
00:16:27,759 --> 00:16:29,279
concerns about source repository

504
00:16:29,279 --> 00:16:30,880
workflow engines

505
00:16:30,880 --> 00:16:32,160
um yeah

506
00:16:32,160 --> 00:16:33,920
uh you know so you've got sources of

507
00:16:33,920 --> 00:16:36,000
code uh you know stuff that you're

508
00:16:36,000 --> 00:16:38,720
writing in-house with uh

509
00:16:38,720 --> 00:16:40,000
in-house developers as well as

510
00:16:40,000 --> 00:16:41,360
potentially third-party development

511
00:16:41,360 --> 00:16:42,880
teams you know what does it look like

512
00:16:42,880 --> 00:16:45,120
for that code to get into the system

513
00:16:45,120 --> 00:16:47,120
right you know are merge requests being

514
00:16:47,120 --> 00:16:49,440
reviewed by one or more uh other

515
00:16:49,440 --> 00:16:51,440
developers uh you know how how do what

516
00:16:51,440 --> 00:16:52,959
does it take for code to get into the

517
00:16:52,959 --> 00:16:55,360
system uh and also how do third-party

518
00:16:55,360 --> 00:16:57,279
development teams get their code into

519
00:16:57,279 --> 00:16:58,480
the environment and the pattern that

520
00:16:58,480 --> 00:17:00,399
we've seen in a number of cases and that

521
00:17:00,399 --> 00:17:03,680
we've used is to have multiple like a a

522
00:17:03,680 --> 00:17:06,160
bastion host get repository or a proxy

523
00:17:06,160 --> 00:17:08,480
git repository where less trusted

524
00:17:08,480 --> 00:17:10,559
developers put code you know they can do

525
00:17:10,559 --> 00:17:12,000
you know go through their whole process

526
00:17:12,000 --> 00:17:13,760
and then before that code makes it into

527
00:17:13,760 --> 00:17:15,359
the main code base it can go through a

528
00:17:15,359 --> 00:17:16,640
more elaborate

529
00:17:16,640 --> 00:17:17,760
again checking for security

530
00:17:17,760 --> 00:17:19,359
vulnerabilities checking for potential

531
00:17:19,359 --> 00:17:21,679
back doors but it's a very explicit uh

532
00:17:21,679 --> 00:17:23,359
step to say we're going to take this

533
00:17:23,359 --> 00:17:26,079
less trusted code from uh from a third

534
00:17:26,079 --> 00:17:28,240
party and bring that into our

535
00:17:28,240 --> 00:17:29,520
environment

536
00:17:29,520 --> 00:17:31,520
and so that's something to uh

537
00:17:31,520 --> 00:17:32,640
you know that's one technique to

538
00:17:32,640 --> 00:17:34,480
potentially look at but you need to

539
00:17:34,480 --> 00:17:36,320
understand like what what checks are

540
00:17:36,320 --> 00:17:38,080
placed before code finds itself in the

541
00:17:38,080 --> 00:17:40,480
repository

542
00:17:40,480 --> 00:17:42,080
you know and you know a really

543
00:17:42,080 --> 00:17:43,679
interesting question that i uh that i've

544
00:17:43,679 --> 00:17:44,960
dug into with some folks is

545
00:17:44,960 --> 00:17:46,240
authentication like how do people

546
00:17:46,240 --> 00:17:48,960
authenticate to these repositories right

547
00:17:48,960 --> 00:17:50,880
uh you know are developers uh like what

548
00:17:50,880 --> 00:17:53,039
do they how do they authenticate to push

549
00:17:53,039 --> 00:17:53,919
and pull code are they using

550
00:17:53,919 --> 00:17:55,600
certificates for that or some some other

551
00:17:55,600 --> 00:17:57,520
means right how do developers log into

552
00:17:57,520 --> 00:17:59,200
the user interface to evaluate merge

553
00:17:59,200 --> 00:18:01,520
requests right how do external systems

554
00:18:01,520 --> 00:18:03,440
call into apis and so what you can find

555
00:18:03,440 --> 00:18:04,880
is a situation where the source code

556
00:18:04,880 --> 00:18:07,840
repository has certificates uh you know

557
00:18:07,840 --> 00:18:09,440
being used for certain types of access

558
00:18:09,440 --> 00:18:11,039
usernames and passwords maybe they go

559
00:18:11,039 --> 00:18:12,960
back to ldap or ad

560
00:18:12,960 --> 00:18:14,880
maybe you have api tokens and so like

561
00:18:14,880 --> 00:18:17,280
with that's a scary situation to be in

562
00:18:17,280 --> 00:18:19,280
where hey to authenticate to the system

563
00:18:19,280 --> 00:18:23,120
there's these different ways to do it

564
00:18:23,120 --> 00:18:25,600
you know and again looking at

565
00:18:25,600 --> 00:18:28,640
you know what other hosted repositories

566
00:18:28,640 --> 00:18:30,080
and workflow you know have you do you

567
00:18:30,080 --> 00:18:31,120
have things configured where they're

568
00:18:31,120 --> 00:18:32,320
going to run different apps different

569
00:18:32,320 --> 00:18:34,640
actions you know integration forget lab

570
00:18:34,640 --> 00:18:36,640
all these external collaborators and so

571
00:18:36,640 --> 00:18:38,160
it's important to kind of dig in and

572
00:18:38,160 --> 00:18:39,760
understand how do people access this

573
00:18:39,760 --> 00:18:41,440
well how do they do again how do you do

574
00:18:41,440 --> 00:18:43,440
code how do you like access the user

575
00:18:43,440 --> 00:18:46,000
interface how does api how do api or

576
00:18:46,000 --> 00:18:48,559
other components talk to this

577
00:18:48,559 --> 00:18:50,000
you know when you look at the open

578
00:18:50,000 --> 00:18:51,840
source component management a question

579
00:18:51,840 --> 00:18:53,679
you've got there is are you pulling

580
00:18:53,679 --> 00:18:55,679
these components directly from the

581
00:18:55,679 --> 00:18:58,080
central repositories or are you proxying

582
00:18:58,080 --> 00:18:59,360
through some sort of a service that

583
00:18:59,360 --> 00:19:02,000
allows you to enforce policies right

584
00:19:02,000 --> 00:19:03,520
where you can say like hey we're not

585
00:19:03,520 --> 00:19:04,720
going to allow us things with certain

586
00:19:04,720 --> 00:19:06,320
licenses we're not going to allow things

587
00:19:06,320 --> 00:19:07,200
that have

588
00:19:07,200 --> 00:19:08,799
known vulnerabilities at a certain level

589
00:19:08,799 --> 00:19:10,799
or something like that so that's another

590
00:19:10,799 --> 00:19:12,799
choke point where you have some control

591
00:19:12,799 --> 00:19:15,039
um where it's uh where it can be

592
00:19:15,039 --> 00:19:16,640
important to uh

593
00:19:16,640 --> 00:19:18,240
understand what controls you have in

594
00:19:18,240 --> 00:19:19,760
place and that's again if you're pulling

595
00:19:19,760 --> 00:19:21,360
directly from central repositories there

596
00:19:21,360 --> 00:19:22,400
are a number of products out there

597
00:19:22,400 --> 00:19:25,280
that'll give you some control over this

598
00:19:25,280 --> 00:19:27,039
uh you know a lot of organizations we

599
00:19:27,039 --> 00:19:28,240
talked to have concerns about open

600
00:19:28,240 --> 00:19:30,400
source backdoors none of them have the

601
00:19:30,400 --> 00:19:32,400
resources to actually maintain this

602
00:19:32,400 --> 00:19:34,320
themselves to check this themselves

603
00:19:34,320 --> 00:19:36,480
right you know again problems with php

604
00:19:36,480 --> 00:19:39,200
or concerns of php linux kernel example

605
00:19:39,200 --> 00:19:40,559
uh where people were like intentionally

606
00:19:40,559 --> 00:19:42,240
submitting security vulnerabilities like

607
00:19:42,240 --> 00:19:44,720
write a paper like come on jerks like

608
00:19:44,720 --> 00:19:47,360
um and so this in a lot of cases isn't

609
00:19:47,360 --> 00:19:50,080
realistic to detect but it is important

610
00:19:50,080 --> 00:19:52,000
to be able to respond and so if you have

611
00:19:52,000 --> 00:19:53,520
good practices around open source

612
00:19:53,520 --> 00:19:55,200
management you should be able to know

613
00:19:55,200 --> 00:19:57,120
again software bill of materials things

614
00:19:57,120 --> 00:19:59,120
like that nature hey what components do

615
00:19:59,120 --> 00:20:01,600
we have in there uh-oh we know that you

616
00:20:01,600 --> 00:20:04,080
know backdoor's been disclosed let's go

617
00:20:04,080 --> 00:20:06,159
identify how that actually impacts us so

618
00:20:06,159 --> 00:20:07,360
that we can go back through the process

619
00:20:07,360 --> 00:20:08,720
of getting an

620
00:20:08,720 --> 00:20:11,039
improved build out

621
00:20:11,039 --> 00:20:13,440
now if we look at the build management

622
00:20:13,440 --> 00:20:14,480
systems

623
00:20:14,480 --> 00:20:16,000
all right you know

624
00:20:16,000 --> 00:20:17,840
it's a question you're combining again

625
00:20:17,840 --> 00:20:19,440
you've got your source code you're

626
00:20:19,440 --> 00:20:21,600
pulling in these external components uh

627
00:20:21,600 --> 00:20:23,280
you know to combine that and create a

628
00:20:23,280 --> 00:20:25,679
new build and how do those get run are

629
00:20:25,679 --> 00:20:27,520
those run on every merge request or they

630
00:20:27,520 --> 00:20:29,919
run on accepted merge requests

631
00:20:29,919 --> 00:20:31,919
are they only run on specific branches

632
00:20:31,919 --> 00:20:34,320
and tags it's important to understand

633
00:20:34,320 --> 00:20:35,760
like how do you like how do these

634
00:20:35,760 --> 00:20:37,679
systems get initiated and that was

635
00:20:37,679 --> 00:20:39,919
something when i dug into uh you know to

636
00:20:39,919 --> 00:20:40,880
our

637
00:20:40,880 --> 00:20:42,799
environment like i i learned some things

638
00:20:42,799 --> 00:20:43,919
about what we were doing that i didn't

639
00:20:43,919 --> 00:20:46,320
expect um and uh and

640
00:20:46,320 --> 00:20:47,919
that's good nothing nefarious but it was

641
00:20:47,919 --> 00:20:49,200
you know for you know i was able to

642
00:20:49,200 --> 00:20:51,440
understand like oh well you know get lab

643
00:20:51,440 --> 00:20:53,520
kicks off on these types of things and

644
00:20:53,520 --> 00:20:55,440
jenkins you know only weighs in on other

645
00:20:55,440 --> 00:20:56,880
types of things right

646
00:20:56,880 --> 00:20:57,600
uh

647
00:20:57,600 --> 00:20:59,440
a total nightmare is maven plugins right

648
00:20:59,440 --> 00:21:00,880
like that's another source of code that

649
00:21:00,880 --> 00:21:02,080
you can't trust that's going to run in

650
00:21:02,080 --> 00:21:03,200
your environment that's going to get

651
00:21:03,200 --> 00:21:05,760
pulled from you know repositories out in

652
00:21:05,760 --> 00:21:07,120
the middle of

653
00:21:07,120 --> 00:21:08,960
who knows where right that's really

654
00:21:08,960 --> 00:21:10,880
scary again all of the plug-in

655
00:21:10,880 --> 00:21:12,960
capabilities um

656
00:21:12,960 --> 00:21:15,440
in these build management tools or tools

657
00:21:15,440 --> 00:21:17,280
along the tool chain

658
00:21:17,280 --> 00:21:18,880
makes it really challenging to

659
00:21:18,880 --> 00:21:20,559
understand like what is actually being

660
00:21:20,559 --> 00:21:22,480
run

661
00:21:22,480 --> 00:21:24,559
then if we look at automated testing uh

662
00:21:24,559 --> 00:21:27,039
again unit testing acceptance testing

663
00:21:27,039 --> 00:21:28,880
you know all types of new static

664
00:21:28,880 --> 00:21:30,960
analysis and things like that

665
00:21:30,960 --> 00:21:32,480
that's great

666
00:21:32,480 --> 00:21:33,280
right

667
00:21:33,280 --> 00:21:35,120
for static analysis like what's being

668
00:21:35,120 --> 00:21:37,039
analyzed source or binary where is that

669
00:21:37,039 --> 00:21:38,640
being performed is it performed in your

670
00:21:38,640 --> 00:21:40,640
environment or is that is an artifact

671
00:21:40,640 --> 00:21:42,640
being sent out to a cloud environment

672
00:21:42,640 --> 00:21:44,720
for that processing you know there's no

673
00:21:44,720 --> 00:21:46,400
wrong answer there but you want to know

674
00:21:46,400 --> 00:21:48,000
the answer that's the important thing

675
00:21:48,000 --> 00:21:49,919
right where are the results being stored

676
00:21:49,919 --> 00:21:51,760
are those stored in your environment are

677
00:21:51,760 --> 00:21:54,159
those stored on some external server

678
00:21:54,159 --> 00:21:56,400
for for a cloud provider again no wrong

679
00:21:56,400 --> 00:21:59,120
answer but you need to have an answer

680
00:21:59,120 --> 00:22:01,039
same thing with dynamic testing where is

681
00:22:01,039 --> 00:22:03,520
the server that is being tested hosted

682
00:22:03,520 --> 00:22:05,600
where is the test track traffic being

683
00:22:05,600 --> 00:22:07,600
generated what does it pass through such

684
00:22:07,600 --> 00:22:09,280
that people might be observer modify

685
00:22:09,280 --> 00:22:11,440
that and where are those where those

686
00:22:11,440 --> 00:22:13,120
results being stored

687
00:22:13,120 --> 00:22:15,520
uh same questions for i asked software

688
00:22:15,520 --> 00:22:17,919
composition analysis again like where's

689
00:22:17,919 --> 00:22:20,480
where's the data moved to uh for the

690
00:22:20,480 --> 00:22:22,240
processing where are the results being

691
00:22:22,240 --> 00:22:24,240
stored

692
00:22:24,240 --> 00:22:24,960
um

693
00:22:24,960 --> 00:22:27,600
you know i i have to give a uh a shout

694
00:22:27,600 --> 00:22:29,120
out uh there's a lot of concerns about

695
00:22:29,120 --> 00:22:31,440
backdoors and like one of the most

696
00:22:31,440 --> 00:22:33,120
interesting talks i saw was a long time

697
00:22:33,120 --> 00:22:35,039
ago when owasp had their conference at

698
00:22:35,039 --> 00:22:36,720
the ebay headquarters a million years

699
00:22:36,720 --> 00:22:38,960
ago uh and i saw chris westsilke give a

700
00:22:38,960 --> 00:22:41,440
talk about the uh about like automated

701
00:22:41,440 --> 00:22:43,760
backdoor detection um and so that's

702
00:22:43,760 --> 00:22:45,600
something that is uh and he gave some

703
00:22:45,600 --> 00:22:47,760
examples of open source uh or open

704
00:22:47,760 --> 00:22:49,440
source or disclosed applications like

705
00:22:49,440 --> 00:22:51,200
hey if you search for this pattern you

706
00:22:51,200 --> 00:22:52,720
can potentially find this nefarious

707
00:22:52,720 --> 00:22:55,280
behavior like you know first of all like

708
00:22:55,280 --> 00:22:56,799
from a backdoor standpoint the easiest

709
00:22:56,799 --> 00:22:58,640
way to insert a backdoor often is to

710
00:22:58,640 --> 00:23:00,799
have a bad person uh introduce a

711
00:23:00,799 --> 00:23:02,000
security vulnerability because that

712
00:23:02,000 --> 00:23:04,080
gives them deniability what i'm talking

713
00:23:04,080 --> 00:23:05,840
about more from this backdoor detection

714
00:23:05,840 --> 00:23:07,120
is you know how do you look at the

715
00:23:07,120 --> 00:23:09,520
behavior of the application to identify

716
00:23:09,520 --> 00:23:10,880
hard-coded credentials you know

717
00:23:10,880 --> 00:23:13,520
something uh something of that nature

718
00:23:13,520 --> 00:23:15,840
i think this is a really it's an

719
00:23:15,840 --> 00:23:18,559
impossible problem to solve and it's a

720
00:23:18,559 --> 00:23:21,360
a really challenging problem to

721
00:23:21,360 --> 00:23:24,799
like even reasonably solve at scale um

722
00:23:24,799 --> 00:23:27,280
but uh yeah i think that's an area of

723
00:23:27,280 --> 00:23:28,799
potential you know the

724
00:23:28,799 --> 00:23:31,200
potential of interest

725
00:23:31,200 --> 00:23:33,120
now if we look at the software getting

726
00:23:33,120 --> 00:23:34,640
packaged and distributed like what does

727
00:23:34,640 --> 00:23:36,640
that look like uh you know you've got

728
00:23:36,640 --> 00:23:38,400
monolithic applications microservices

729
00:23:38,400 --> 00:23:39,600
applications what are you actually

730
00:23:39,600 --> 00:23:40,799
distributing

731
00:23:40,799 --> 00:23:43,200
uh you know code signing is great uh if

732
00:23:43,200 --> 00:23:45,520
you're using it that's fantastic

733
00:23:45,520 --> 00:23:47,520
but that doesn't solve the problems of

734
00:23:47,520 --> 00:23:49,279
backdoors or vulnerable code or other

735
00:23:49,279 --> 00:23:51,120
issues because you know it nearly like

736
00:23:51,120 --> 00:23:53,679
freezes in time and blesses what's come

737
00:23:53,679 --> 00:23:55,440
through the process if you've had

738
00:23:55,440 --> 00:23:57,279
problems earlier in the process you know

739
00:23:57,279 --> 00:24:00,720
this packaging and onto distribution

740
00:24:00,720 --> 00:24:02,559
um you know there are uh

741
00:24:02,559 --> 00:24:04,559
you may just be baking in problems that

742
00:24:04,559 --> 00:24:07,200
you had uh that you had before

743
00:24:07,200 --> 00:24:09,039
and then finally for the distribution

744
00:24:09,039 --> 00:24:10,400
you know how is that how is this being

745
00:24:10,400 --> 00:24:12,240
distributed are you distributing binary

746
00:24:12,240 --> 00:24:13,840
are you distributing containers or these

747
00:24:13,840 --> 00:24:15,039
containers that get pulled from a

748
00:24:15,039 --> 00:24:17,279
container repository again asking this

749
00:24:17,279 --> 00:24:18,960
question where are these containers

750
00:24:18,960 --> 00:24:21,919
hosted how are they signed that you know

751
00:24:21,919 --> 00:24:23,760
you're there are they being pulled uh

752
00:24:23,760 --> 00:24:27,200
over in a network uh manner that is uh

753
00:24:27,200 --> 00:24:29,760
that like helps to prevent uh tampering

754
00:24:29,760 --> 00:24:32,000
and things of that nature

755
00:24:32,000 --> 00:24:34,159
right and so that's kind of a speed run

756
00:24:34,159 --> 00:24:35,440
through the different steps in the

757
00:24:35,440 --> 00:24:37,360
process and again there's there's you'll

758
00:24:37,360 --> 00:24:39,600
pull the slides and and take a look

759
00:24:39,600 --> 00:24:42,080
um but those are some concerns to look

760
00:24:42,080 --> 00:24:44,080
at along the way and some areas that

761
00:24:44,080 --> 00:24:46,960
i've found are good to highlight i know

762
00:24:46,960 --> 00:24:49,919
so how do we use this threat model uh

763
00:24:49,919 --> 00:24:50,799
you know

764
00:24:50,799 --> 00:24:52,480
by building off this threat model you

765
00:24:52,480 --> 00:24:55,279
can identify where are the gaps in your

766
00:24:55,279 --> 00:24:56,799
own pipeline

767
00:24:56,799 --> 00:24:58,400
uh you know

768
00:24:58,400 --> 00:25:00,159
what can you shore up are you pulling

769
00:25:00,159 --> 00:25:02,960
open source components uh in a way

770
00:25:02,960 --> 00:25:04,400
uh are you pulling open source

771
00:25:04,400 --> 00:25:06,480
components in a way that you don't have

772
00:25:06,480 --> 00:25:08,400
the ability to put a lot of controls on

773
00:25:08,400 --> 00:25:11,039
those um you know or are you able to

774
00:25:11,039 --> 00:25:14,000
implement policies in those places right

775
00:25:14,000 --> 00:25:15,840
you know and a lot of stuff you're gonna

776
00:25:15,840 --> 00:25:17,279
you're gonna find you have to live with

777
00:25:17,279 --> 00:25:18,720
right you know

778
00:25:18,720 --> 00:25:19,520
the

779
00:25:19,520 --> 00:25:21,520
uh like the best way for security to get

780
00:25:21,520 --> 00:25:23,279
marginalized is to slow down the

781
00:25:23,279 --> 00:25:24,640
development teams that are working on

782
00:25:24,640 --> 00:25:27,679
key strategic initiatives right uh and

783
00:25:27,679 --> 00:25:29,520
so there are

784
00:25:29,520 --> 00:25:31,760
a lot of scary things in modern ci cd

785
00:25:31,760 --> 00:25:33,600
pipelines that security folks just have

786
00:25:33,600 --> 00:25:36,240
to live with um you know but it's also

787
00:25:36,240 --> 00:25:38,880
again knowing about what your exposure

788
00:25:38,880 --> 00:25:40,880
looks like knowing areas of potential

789
00:25:40,880 --> 00:25:43,279
weakness that puts you in a situation

790
00:25:43,279 --> 00:25:45,440
where if you suspect there might be an

791
00:25:45,440 --> 00:25:48,320
issue uh you know that you can have a

792
00:25:48,320 --> 00:25:50,640
response plan what do we do if we find

793
00:25:50,640 --> 00:25:52,559
out that we've accidentally included a

794
00:25:52,559 --> 00:25:54,559
component with a vacuum right what do we

795
00:25:54,559 --> 00:25:56,240
do if we find out that what's the

796
00:25:56,240 --> 00:25:58,640
implication if we find out that a build

797
00:25:58,640 --> 00:26:00,400
server you know a long-lived virtual

798
00:26:00,400 --> 00:26:02,400
machine uh you know has had some sort of

799
00:26:02,400 --> 00:26:04,080
a compromise you know how does that flow

800
00:26:04,080 --> 00:26:06,400
downstream right that's a lot better to

801
00:26:06,400 --> 00:26:08,720
know before there's a problem than once

802
00:26:08,720 --> 00:26:10,880
there is a problem

803
00:26:10,880 --> 00:26:12,480
this is also something where you can

804
00:26:12,480 --> 00:26:14,559
have meaningful conversations with the

805
00:26:14,559 --> 00:26:16,799
suppliers of the software right when you

806
00:26:16,799 --> 00:26:20,240
look at when you look at vetting

807
00:26:20,240 --> 00:26:21,760
from a supply chain standpoint there's

808
00:26:21,760 --> 00:26:23,360
kind of two things that you can look at

809
00:26:23,360 --> 00:26:25,120
you can either what you can you can both

810
00:26:25,120 --> 00:26:26,559
look at or the two things you can look

811
00:26:26,559 --> 00:26:30,320
at you know one is let's look at the

812
00:26:30,320 --> 00:26:32,000
application and you know the current

813
00:26:32,000 --> 00:26:33,360
version of the application we'll do some

814
00:26:33,360 --> 00:26:34,559
testing identify potential

815
00:26:34,559 --> 00:26:36,240
vulnerabilities and then potentially

816
00:26:36,240 --> 00:26:38,240
kick that back to the vendor and say you

817
00:26:38,240 --> 00:26:40,000
know until you fix this stuff we're not

818
00:26:40,000 --> 00:26:41,440
going to buy the software or you know

819
00:26:41,440 --> 00:26:42,880
you have some sort of a service level

820
00:26:42,880 --> 00:26:45,360
doing that you have to fix this stuff

821
00:26:45,360 --> 00:26:47,360
you know but you can also look at

822
00:26:47,360 --> 00:26:48,960
people's practices to understand you

823
00:26:48,960 --> 00:26:51,039
know from an open sam or owasp sam

824
00:26:51,039 --> 00:26:52,880
standpoint they you talk to me about

825
00:26:52,880 --> 00:26:55,919
what practices you have in place um and

826
00:26:55,919 --> 00:26:57,679
you can ask questions like hey tell me

827
00:26:57,679 --> 00:26:59,279
about what your build process looks like

828
00:26:59,279 --> 00:27:00,720
okay it all runs in the cloud great what

829
00:27:00,720 --> 00:27:02,799
controls do you have in place to make

830
00:27:02,799 --> 00:27:04,720
sure that developers aren't including

831
00:27:04,720 --> 00:27:07,840
risky scary stuff

832
00:27:09,200 --> 00:27:11,679
uh yeah again from vendor management uh

833
00:27:11,679 --> 00:27:13,919
all the uh the code cub stuff uh

834
00:27:13,919 --> 00:27:15,919
everybody all of a sudden is like oh no

835
00:27:15,919 --> 00:27:18,000
like hey all right hey are all any of

836
00:27:18,000 --> 00:27:20,000
our vendors using code cubs and let's go

837
00:27:20,000 --> 00:27:21,840
like freak out about those folks and

838
00:27:21,840 --> 00:27:23,039
then you ask the question wait a minute

839
00:27:23,039 --> 00:27:25,120
are we using codecov because maybe we've

840
00:27:25,120 --> 00:27:26,480
got something that we need to you know

841
00:27:26,480 --> 00:27:28,799
to deal with our ourselves

842
00:27:28,799 --> 00:27:32,559
uh so i've identified four potential uh

843
00:27:32,559 --> 00:27:34,720
sorry discussion points for the slack

844
00:27:34,720 --> 00:27:37,120
discussion uh software bill of materials

845
00:27:37,120 --> 00:27:39,039
great idea or literally the least we

846
00:27:39,039 --> 00:27:41,679
could do for supply chain security uh

847
00:27:41,679 --> 00:27:43,679
also looking at developers versus

848
00:27:43,679 --> 00:27:45,360
security tools how do developers get

849
00:27:45,360 --> 00:27:48,080
access to such cool stuff so easily uh

850
00:27:48,080 --> 00:27:49,360
yeah there's been talk about parallel

851
00:27:49,360 --> 00:27:50,880
build pipelines

852
00:27:50,880 --> 00:27:52,080
really

853
00:27:52,080 --> 00:27:54,080
really

854
00:27:54,080 --> 00:27:56,480
hard enough to build one pipeline now

855
00:27:56,480 --> 00:27:58,720
we're going to build and manage two

856
00:27:58,720 --> 00:28:00,559
uh and uh backdoor detection is there

857
00:28:00,559 --> 00:28:02,720
any uh any way to do this at scale

858
00:28:02,720 --> 00:28:04,480
uh so now i think we're right about on

859
00:28:04,480 --> 00:28:06,960
time and uh martin is probably about

860
00:28:06,960 --> 00:28:09,440
ready to play the music and use the

861
00:28:09,440 --> 00:28:11,200
hook to pull me off stage but i'll hop

862
00:28:11,200 --> 00:28:13,039
over to the slack channel looking

863
00:28:13,039 --> 00:28:14,240
forward to hopefully talking to some

864
00:28:14,240 --> 00:28:17,279
folks there

