1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:07,919 --> 00:00:10,000
thank you thank you harold i believe you

3
00:00:10,000 --> 00:00:11,440
can hear me

4
00:00:11,440 --> 00:00:13,040
good morning everybody

5
00:00:13,040 --> 00:00:15,040
my name is joseph feyman

6
00:00:15,040 --> 00:00:17,279
i am chief strategy officer of whitehead

7
00:00:17,279 --> 00:00:20,240
security it was acquired by entity and

8
00:00:20,240 --> 00:00:22,160
changed the name to entity application

9
00:00:22,160 --> 00:00:24,640
security just few months ago but thank

10
00:00:24,640 --> 00:00:29,279
you for coming to my presentation on

11
00:00:29,279 --> 00:00:31,840
on the

12
00:00:32,399 --> 00:00:34,399
application security timeline where

13
00:00:34,399 --> 00:00:36,480
we'll speak of

14
00:00:36,480 --> 00:00:39,120
application security wins failures

15
00:00:39,120 --> 00:00:40,399
promises

16
00:00:40,399 --> 00:00:42,000
and predictions

17
00:00:42,000 --> 00:00:44,719
uh we are celebrating 20th anniversary

18
00:00:44,719 --> 00:00:48,320
of uh application security and honestly

19
00:00:48,320 --> 00:00:50,559
we had successes

20
00:00:50,559 --> 00:00:54,719
good successes but also many failures

21
00:00:54,719 --> 00:00:56,399
the question is

22
00:00:56,399 --> 00:00:59,120
are we really getting better over these

23
00:00:59,120 --> 00:01:01,600
20 years and i want to show you a piece

24
00:01:01,600 --> 00:01:03,280
of statistics

25
00:01:03,280 --> 00:01:05,680
that we're collecting continuously by

26
00:01:05,680 --> 00:01:08,159
testing thousands and thousands and tens

27
00:01:08,159 --> 00:01:10,400
of thousands of applications

28
00:01:10,400 --> 00:01:13,360
the summary i put it on the

29
00:01:13,360 --> 00:01:16,479
very top is the summary is that we are

30
00:01:16,479 --> 00:01:19,200
infected with dangerous vulnerabilities

31
00:01:19,200 --> 00:01:21,680
i mean our applications are infected

32
00:01:21,680 --> 00:01:24,000
with dangerous vulnerabilities just a

33
00:01:24,000 --> 00:01:28,240
few pieces of information for example 32

34
00:01:28,240 --> 00:01:30,240
of our application have information

35
00:01:30,240 --> 00:01:32,720
leakage meaning that there are leaks of

36
00:01:32,720 --> 00:01:35,280
server directory of sql uh courier

37
00:01:35,280 --> 00:01:37,840
structure of networks meaning that our

38
00:01:37,840 --> 00:01:42,000
applications are open to attacks

39
00:01:42,000 --> 00:01:44,560
about 20 of our applications that we're

40
00:01:44,560 --> 00:01:45,920
testing

41
00:01:45,920 --> 00:01:48,399
they are suffering from insufficient

42
00:01:48,399 --> 00:01:50,799
transport layer protection vulnerability

43
00:01:50,799 --> 00:01:53,520
meaning that not all traffic is secure

44
00:01:53,520 --> 00:01:56,000
and it enables men in the middle attack

45
00:01:56,000 --> 00:01:58,079
and hackers can control

46
00:01:58,079 --> 00:02:01,439
uh take control over our sessions

47
00:02:01,439 --> 00:02:03,680
cross-site scripting one of the most

48
00:02:03,680 --> 00:02:07,360
severe vulnerabilities 18.3 percent of

49
00:02:07,360 --> 00:02:09,038
tested application have this

50
00:02:09,038 --> 00:02:11,038
vulnerability meaning that malicious

51
00:02:11,038 --> 00:02:13,440
scripts could be injected which enable

52
00:02:13,440 --> 00:02:15,280
hackers to take control

53
00:02:15,280 --> 00:02:17,920
of the web application

54
00:02:17,920 --> 00:02:22,319
content spoofing 14.0 percent and if we

55
00:02:22,319 --> 00:02:24,800
think well the list is long

56
00:02:24,800 --> 00:02:27,920
but if you think that it is just one

57
00:02:27,920 --> 00:02:30,959
vulnerability or per application

58
00:02:30,959 --> 00:02:33,920
even this is not true there are multiple

59
00:02:33,920 --> 00:02:36,160
severe vulnerabilities per side for

60
00:02:36,160 --> 00:02:37,200
example

61
00:02:37,200 --> 00:02:40,319
http response splitting there are 7.3

62
00:02:40,319 --> 00:02:42,319
response sleeping per side that we

63
00:02:42,319 --> 00:02:46,000
detect sql injection another most severe

64
00:02:46,000 --> 00:02:47,360
vulnerability

65
00:02:47,360 --> 00:02:50,480
well two and a half of sql injection per

66
00:02:50,480 --> 00:02:53,599
site cross-site scripting another most

67
00:02:53,599 --> 00:02:57,120
severe vulnerability is about two

68
00:02:57,120 --> 00:03:00,000
cross-site scripting per site that's

69
00:03:00,000 --> 00:03:01,440
what we're seeing

70
00:03:01,440 --> 00:03:04,239
but okay we detected we tested

71
00:03:04,239 --> 00:03:05,840
application and detected those

72
00:03:05,840 --> 00:03:08,720
vulnerabilities so the next step

73
00:03:08,720 --> 00:03:10,319
why would the testing

74
00:03:10,319 --> 00:03:13,360
now devops supposed to fix those

75
00:03:13,360 --> 00:03:16,239
vulnerabilities the problem is that

76
00:03:16,239 --> 00:03:17,599
remediation

77
00:03:17,599 --> 00:03:18,480
less

78
00:03:18,480 --> 00:03:21,200
really forever let me give you another

79
00:03:21,200 --> 00:03:23,280
piece of statistics

80
00:03:23,280 --> 00:03:26,000
time to fix by industry healthcare

81
00:03:26,000 --> 00:03:27,080
spends

82
00:03:27,080 --> 00:03:30,400
337 days to fix on the average

83
00:03:30,400 --> 00:03:32,879
vulnerabilities that we detected

84
00:03:32,879 --> 00:03:34,959
information industry welcome to our

85
00:03:34,959 --> 00:03:36,519
industry

86
00:03:36,519 --> 00:03:40,200
336 days manufacturing

87
00:03:40,200 --> 00:03:43,840
310 days finance and insurance a little

88
00:03:43,840 --> 00:03:46,159
less 266

89
00:03:46,159 --> 00:03:50,440
vulnerabilities in transportation

90
00:03:50,440 --> 00:03:52,239
279

91
00:03:52,239 --> 00:03:53,680
days

92
00:03:53,680 --> 00:03:56,239
so i've shown you vulnerabilities here

93
00:03:56,239 --> 00:03:58,480
they are on the screen that they are

94
00:03:58,480 --> 00:04:00,879
very dangerous and they are infecting

95
00:04:00,879 --> 00:04:03,280
our own our applications i've shown

96
00:04:03,280 --> 00:04:05,360
there are multiple vulnerabilities per

97
00:04:05,360 --> 00:04:07,680
site and i've shown another piece that

98
00:04:07,680 --> 00:04:09,120
it takes

99
00:04:09,120 --> 00:04:11,120
nine and more months

100
00:04:11,120 --> 00:04:13,120
for our industries to fix

101
00:04:13,120 --> 00:04:15,519
vulnerabilities that we in application

102
00:04:15,519 --> 00:04:18,160
security detected for them another piece

103
00:04:18,160 --> 00:04:20,079
of statistics that now you can see on

104
00:04:20,079 --> 00:04:22,880
the screen let's take a look at severity

105
00:04:22,880 --> 00:04:24,320
of those vulnerabilities we should

106
00:04:24,320 --> 00:04:26,479
expect that once you detected something

107
00:04:26,479 --> 00:04:28,560
really severe cross-site scripting

108
00:04:28,560 --> 00:04:30,639
they'll fix it right away

109
00:04:30,639 --> 00:04:31,759
no way

110
00:04:31,759 --> 00:04:35,440
on the average it takes 200 days seven

111
00:04:35,440 --> 00:04:38,639
months if i'm not mistaken pretty much

112
00:04:38,639 --> 00:04:40,960
to fix most critical vulnerabilities

113
00:04:40,960 --> 00:04:44,160
high severity 265 days

114
00:04:44,160 --> 00:04:45,639
medium

115
00:04:45,639 --> 00:04:47,680
282 days

116
00:04:47,680 --> 00:04:51,000
low severity vulnerabilities

117
00:04:51,000 --> 00:04:54,479
377 days

118
00:04:54,560 --> 00:04:55,680
scary

119
00:04:55,680 --> 00:04:58,720
but it's not getting better this is our

120
00:04:58,720 --> 00:05:02,039
summary of our testing from october 1st

121
00:05:02,039 --> 00:05:05,600
2020 through the year through august 1st

122
00:05:05,600 --> 00:05:07,039
2021

123
00:05:07,039 --> 00:05:09,520
we just ended the cycle a couple months

124
00:05:09,520 --> 00:05:12,320
ago it says that time to fix high

125
00:05:12,320 --> 00:05:14,320
severity vulnerabilities

126
00:05:14,320 --> 00:05:17,360
increased not decreased increased by

127
00:05:17,360 --> 00:05:20,080
10 days on the average

128
00:05:20,080 --> 00:05:24,000
we are not getting better well let's say

129
00:05:24,000 --> 00:05:26,320
we're not so conclusive let us ask are

130
00:05:26,320 --> 00:05:29,280
we getting better that is important so

131
00:05:29,280 --> 00:05:31,759
our application and we shown that are

132
00:05:31,759 --> 00:05:34,400
infected with vulnerabilities

133
00:05:34,400 --> 00:05:36,720
bad pictures scary picture

134
00:05:36,720 --> 00:05:39,759
we detect vulnerabilities vendors in

135
00:05:39,759 --> 00:05:41,520
application security space some

136
00:05:41,520 --> 00:05:43,600
contractor consultants detect

137
00:05:43,600 --> 00:05:45,840
vulnerabilities when we test

138
00:05:45,840 --> 00:05:48,000
applications but you understand that

139
00:05:48,000 --> 00:05:50,720
there are many applications that are not

140
00:05:50,720 --> 00:05:53,280
tested whatsoever so how many

141
00:05:53,280 --> 00:05:56,960
vulnerabilities are not detected at all

142
00:05:56,960 --> 00:05:59,039
this is a serious problem

143
00:05:59,039 --> 00:06:02,240
but if and when let's say tested and

144
00:06:02,240 --> 00:06:06,080
detected vulnerabilities it takes devops

145
00:06:06,080 --> 00:06:08,960
our esteemed colleagues in devops it

146
00:06:08,960 --> 00:06:10,720
takes many months

147
00:06:10,720 --> 00:06:13,600
seven nine 12 months to fix those

148
00:06:13,600 --> 00:06:15,759
vulnerabilities and they run their

149
00:06:15,759 --> 00:06:18,319
system infected with vulnerabilities

150
00:06:18,319 --> 00:06:20,639
with detected infected vulnerabilities

151
00:06:20,639 --> 00:06:22,000
and they are complaining that they are

152
00:06:22,000 --> 00:06:25,440
being attacked and hacked

153
00:06:25,440 --> 00:06:27,680
so there is a clear disconnect besides

154
00:06:27,680 --> 00:06:29,520
any other issues there is a clear

155
00:06:29,520 --> 00:06:33,440
disconnect between devops and sac

156
00:06:33,440 --> 00:06:36,080
security we we poorly test the

157
00:06:36,080 --> 00:06:37,919
application by poorly i mean that we

158
00:06:37,919 --> 00:06:40,319
don't test all application whether it's

159
00:06:40,319 --> 00:06:42,080
our fault or not it's a different story

160
00:06:42,080 --> 00:06:44,400
but we are not testing all application

161
00:06:44,400 --> 00:06:46,000
moreover

162
00:06:46,000 --> 00:06:48,560
we are not testing

163
00:06:48,560 --> 00:06:50,720
application at each and every phase and

164
00:06:50,720 --> 00:06:54,240
stage of software life cycle

165
00:06:54,240 --> 00:06:56,479
but when it comes to devops they are

166
00:06:56,479 --> 00:06:58,160
very slow

167
00:06:58,160 --> 00:07:00,319
in remediating

168
00:07:00,319 --> 00:07:03,039
vulnerabilities that we detected so the

169
00:07:03,039 --> 00:07:05,520
question is what's the solution

170
00:07:05,520 --> 00:07:08,160
and the touted solution is

171
00:07:08,160 --> 00:07:11,199
adopt defcicops devsecops will resolve

172
00:07:11,199 --> 00:07:13,199
all those issues

173
00:07:13,199 --> 00:07:14,800
the problem is

174
00:07:14,800 --> 00:07:17,039
that devops

175
00:07:17,039 --> 00:07:20,560
has not yet become devsicops there is a

176
00:07:20,560 --> 00:07:23,199
clear disconnect between appsec

177
00:07:23,199 --> 00:07:25,840
and devops and it will spend some time

178
00:07:25,840 --> 00:07:27,199
through the end of this presentation to

179
00:07:27,199 --> 00:07:28,319
figure out

180
00:07:28,319 --> 00:07:29,680
why

181
00:07:29,680 --> 00:07:33,039
devops has not yet become

182
00:07:33,039 --> 00:07:35,759
their cops

183
00:07:35,759 --> 00:07:37,440
so

184
00:07:37,440 --> 00:07:39,840
i believe that one of the reasons is

185
00:07:39,840 --> 00:07:42,960
that all this story about devsicops is

186
00:07:42,960 --> 00:07:45,520
wrapped in myth

187
00:07:45,520 --> 00:07:47,120
that preclude

188
00:07:47,120 --> 00:07:48,960
transformation of devops into their

189
00:07:48,960 --> 00:07:50,720
cyclops there are a few of them and i'll

190
00:07:50,720 --> 00:07:52,400
walk you through them the myth number

191
00:07:52,400 --> 00:07:56,160
one is that devsicops is a

192
00:07:56,160 --> 00:07:59,280
cultural phenomenon that defcicops is

193
00:07:59,280 --> 00:08:02,479
enabled by culture this is absolutely

194
00:08:02,479 --> 00:08:03,680
not true

195
00:08:03,680 --> 00:08:05,280
realistically

196
00:08:05,280 --> 00:08:08,560
defects is a technological phenomenon

197
00:08:08,560 --> 00:08:11,440
it's enabled by technology culture

198
00:08:11,440 --> 00:08:13,520
always comes next i'll give you a few

199
00:08:13,520 --> 00:08:16,240
examples before we get into security the

200
00:08:16,240 --> 00:08:17,680
first one

201
00:08:17,680 --> 00:08:19,919
our own culture if we're asking what

202
00:08:19,919 --> 00:08:22,400
culture we live i believe we can clearly

203
00:08:22,400 --> 00:08:24,639
say that we live in the culture of a

204
00:08:24,639 --> 00:08:27,039
social networking wake up in the morning

205
00:08:27,039 --> 00:08:29,039
and immediately we start texting and

206
00:08:29,039 --> 00:08:32,080
sending emails and using twitter and all

207
00:08:32,080 --> 00:08:33,760
these social and professional

208
00:08:33,760 --> 00:08:35,039
communities

209
00:08:35,039 --> 00:08:37,039
so we actually invented a special

210
00:08:37,039 --> 00:08:39,599
language and acronyms we write novels in

211
00:08:39,599 --> 00:08:41,919
this small window of twitter

212
00:08:41,919 --> 00:08:43,919
but take away

213
00:08:43,919 --> 00:08:46,399
the underlying technology internet

214
00:08:46,399 --> 00:08:49,120
iphone and immediately will scale back

215
00:08:49,120 --> 00:08:51,200
100 years back

216
00:08:51,200 --> 00:08:54,480
where people use the pen and paper and

217
00:08:54,480 --> 00:08:56,880
spend about an hour a week maybe to

218
00:08:56,880 --> 00:08:58,160
write some

219
00:08:58,160 --> 00:08:59,120
letters

220
00:08:59,120 --> 00:09:01,279
same is true if we look somewhere closer

221
00:09:01,279 --> 00:09:03,920
for example we live kind of in the

222
00:09:03,920 --> 00:09:07,040
culture funded by object oriented

223
00:09:07,040 --> 00:09:08,560
programming

224
00:09:08,560 --> 00:09:10,880
we operate on daily basis with notions

225
00:09:10,880 --> 00:09:13,519
such as encapsulation and polymorphism

226
00:09:13,519 --> 00:09:17,279
and inheritance but take away

227
00:09:17,279 --> 00:09:18,160
our

228
00:09:18,160 --> 00:09:20,240
programming language such as java and

229
00:09:20,240 --> 00:09:22,560
ruby and c sharp for example

230
00:09:22,560 --> 00:09:23,519
more

231
00:09:23,519 --> 00:09:25,519
and leave us only with the fortran and

232
00:09:25,519 --> 00:09:27,040
kabul

233
00:09:27,040 --> 00:09:29,440
and uh what's going to happen with our

234
00:09:29,440 --> 00:09:32,800
object-oriented culture nothing new same

235
00:09:32,800 --> 00:09:35,200
is true about security

236
00:09:35,200 --> 00:09:37,440
technology comes first you cannot have

237
00:09:37,440 --> 00:09:40,160
security culture of speed without

238
00:09:40,160 --> 00:09:43,120
technology if we have just manual code

239
00:09:43,120 --> 00:09:46,320
reviews it's impossible you cannot have

240
00:09:46,320 --> 00:09:48,560
security culture of scale with our

241
00:09:48,560 --> 00:09:50,959
technology if you use just manual

242
00:09:50,959 --> 00:09:53,839
penetration tests they will not scale

243
00:09:53,839 --> 00:09:56,320
and you cannot have culture of

244
00:09:56,320 --> 00:09:59,360
multiple secure daily releases without

245
00:09:59,360 --> 00:10:02,320
technology such as and just use a few

246
00:10:02,320 --> 00:10:04,000
you know the acronyms static application

247
00:10:04,000 --> 00:10:05,839
security testing says

248
00:10:05,839 --> 00:10:07,600
dynamic application security desk

249
00:10:07,600 --> 00:10:10,560
software composition analysis sca

250
00:10:10,560 --> 00:10:13,120
my point is that technology is the basis

251
00:10:13,120 --> 00:10:15,839
for the culture not the other way around

252
00:10:15,839 --> 00:10:18,720
we see organization that build teams and

253
00:10:18,720 --> 00:10:21,440
try to instill culture without having

254
00:10:21,440 --> 00:10:23,440
technology they believe that technology

255
00:10:23,440 --> 00:10:25,600
will come next that is not true

256
00:10:25,600 --> 00:10:28,480
defcicops is technological phenomenon

257
00:10:28,480 --> 00:10:31,600
and attempts to build culture first

258
00:10:31,600 --> 00:10:32,880
will fail

259
00:10:32,880 --> 00:10:35,120
so now i believe we agree that

260
00:10:35,120 --> 00:10:37,760
technology for deaf sec ops is

261
00:10:37,760 --> 00:10:40,240
absolutely mandatory and with this

262
00:10:40,240 --> 00:10:43,600
understanding we're bumping immediately

263
00:10:43,600 --> 00:10:46,800
into myth number two where people say

264
00:10:46,800 --> 00:10:49,680
well any security technology can be used

265
00:10:49,680 --> 00:10:51,920
for their sick ops and

266
00:10:51,920 --> 00:10:54,240
just throw all existing technology into

267
00:10:54,240 --> 00:10:57,279
devops and you will get their sick offs

268
00:10:57,279 --> 00:10:59,680
that is not true the point i'm making

269
00:10:59,680 --> 00:11:02,320
that in reality we need

270
00:11:02,320 --> 00:11:04,480
only specially designed technologies

271
00:11:04,480 --> 00:11:06,800
special designed for devsecops and only

272
00:11:06,800 --> 00:11:10,000
they will enable devsicops only they

273
00:11:10,000 --> 00:11:13,279
will transform devops into

274
00:11:13,279 --> 00:11:15,040
sec ops

275
00:11:15,040 --> 00:11:17,040
look at traditional technologies that

276
00:11:17,040 --> 00:11:18,959
some of them i've just mentioned

277
00:11:18,959 --> 00:11:20,640
they don't cover entire software life

278
00:11:20,640 --> 00:11:22,800
cycle they aren't mostly around

279
00:11:22,800 --> 00:11:24,959
application deployment

280
00:11:24,959 --> 00:11:26,959
they cannot be run by devops they've

281
00:11:26,959 --> 00:11:29,519
been built not for devops they've been

282
00:11:29,519 --> 00:11:32,079
built for very specialized highly

283
00:11:32,079 --> 00:11:33,200
trained

284
00:11:33,200 --> 00:11:35,760
application security specialists and

285
00:11:35,760 --> 00:11:38,079
they are too slow it tests

286
00:11:38,079 --> 00:11:41,440
it takes hours and hours and many days

287
00:11:41,440 --> 00:11:42,399
to

288
00:11:42,399 --> 00:11:44,399
test the application it cannot fit

289
00:11:44,399 --> 00:11:46,560
devops cycle where every few minutes or

290
00:11:46,560 --> 00:11:50,000
every hour they have to deliver new

291
00:11:50,000 --> 00:11:52,560
version new release of an application

292
00:11:52,560 --> 00:11:55,920
and they don't enable ci cd because they

293
00:11:55,920 --> 00:11:59,200
cannot teach each and every increment of

294
00:11:59,200 --> 00:12:02,800
code or build the point is that deftsic

295
00:12:02,800 --> 00:12:05,200
ops cannot achieve its goal with the

296
00:12:05,200 --> 00:12:07,600
existing transitional technologies

297
00:12:07,600 --> 00:12:10,800
technologies are mandatory but not all

298
00:12:10,800 --> 00:12:14,079
existing epsec technology will transform

299
00:12:14,079 --> 00:12:16,720
the evolves into devsicops

300
00:12:16,720 --> 00:12:19,760
another myth that we're dealing with

301
00:12:19,760 --> 00:12:22,560
and this myth is that automation is

302
00:12:22,560 --> 00:12:24,320
equal

303
00:12:24,320 --> 00:12:27,200
death psychops we heard that all of us

304
00:12:27,200 --> 00:12:28,639
so many times

305
00:12:28,639 --> 00:12:30,560
that automate technologies and you'll

306
00:12:30,560 --> 00:12:33,519
get their sick offs of course well this

307
00:12:33,519 --> 00:12:35,600
is a typical example of a myth the

308
00:12:35,600 --> 00:12:38,160
danger of a myth it's not that it's all

309
00:12:38,160 --> 00:12:41,680
lie the danger of every myth it has

310
00:12:41,680 --> 00:12:45,600
a fraction of truth and the truth is

311
00:12:45,600 --> 00:12:47,920
that only automation

312
00:12:47,920 --> 00:12:49,920
of the special design technology that

313
00:12:49,920 --> 00:12:52,800
i've just mentioned but not defined yet

314
00:12:52,800 --> 00:12:54,800
all the automation of those special

315
00:12:54,800 --> 00:12:57,680
design technologies enables

316
00:12:57,680 --> 00:12:59,200
their sick ops

317
00:12:59,200 --> 00:13:01,200
first of all with existing technologies

318
00:13:01,200 --> 00:13:04,320
it's hard to automate and integrate into

319
00:13:04,320 --> 00:13:06,720
cicd application security testing

320
00:13:06,720 --> 00:13:09,600
technology that are very slow you cannot

321
00:13:09,600 --> 00:13:11,040
automate this very slow technologies

322
00:13:11,040 --> 00:13:13,760
that take days to onboard and configure

323
00:13:13,760 --> 00:13:15,839
it takes actually sometimes weeks and

324
00:13:15,839 --> 00:13:18,160
months to onboard and configure those

325
00:13:18,160 --> 00:13:21,040
technology and all of them

326
00:13:21,040 --> 00:13:23,279
most of them let's put it this way

327
00:13:23,279 --> 00:13:26,160
requires special skills

328
00:13:26,160 --> 00:13:28,399
that only death

329
00:13:28,399 --> 00:13:32,079
that devops people don't have

330
00:13:32,079 --> 00:13:34,240
and then this technology as well already

331
00:13:34,240 --> 00:13:36,079
said they are typically used mostly

332
00:13:36,079 --> 00:13:38,480
before pre-deployment of an application

333
00:13:38,480 --> 00:13:40,880
when honestly it's too late already to

334
00:13:40,880 --> 00:13:42,800
test because you have to roll in

335
00:13:42,800 --> 00:13:45,120
production and there is no time to fix

336
00:13:45,120 --> 00:13:46,839
vulnerability but

337
00:13:46,839 --> 00:13:49,680
uh if you

338
00:13:49,680 --> 00:13:51,760
use ast only around pre-deployment a

339
00:13:51,760 --> 00:13:53,760
little before after deployment it

340
00:13:53,760 --> 00:13:56,000
doesn't make sense to invest your

341
00:13:56,000 --> 00:13:59,600
efforts and money into automation

342
00:13:59,600 --> 00:14:01,440
it would be very different story if you

343
00:14:01,440 --> 00:14:03,199
have technology that are given really in

344
00:14:03,199 --> 00:14:04,959
hands of developers

345
00:14:04,959 --> 00:14:07,680
of dev and ops people of build engineers

346
00:14:07,680 --> 00:14:09,920
that will run at each of them

347
00:14:09,920 --> 00:14:11,920
dozen times of days all together as a

348
00:14:11,920 --> 00:14:14,560
team hundred times a day and in that

349
00:14:14,560 --> 00:14:16,240
case when they do it throughout the

350
00:14:16,240 --> 00:14:18,720
entire life cycle programming building

351
00:14:18,720 --> 00:14:20,000
pre-deployment

352
00:14:20,000 --> 00:14:22,560
and then an operation then it makes

353
00:14:22,560 --> 00:14:25,760
sense to apply automation only then it

354
00:14:25,760 --> 00:14:27,519
is justified

355
00:14:27,519 --> 00:14:31,120
so once again only automation of special

356
00:14:31,120 --> 00:14:33,440
design technologies will enable

357
00:14:33,440 --> 00:14:34,959
devsicops

358
00:14:34,959 --> 00:14:36,880
next myth

359
00:14:36,880 --> 00:14:39,680
is shift to the left that's another

360
00:14:39,680 --> 00:14:41,040
example of

361
00:14:41,040 --> 00:14:43,120
something that sounds like truth but in

362
00:14:43,120 --> 00:14:45,839
the real in reality is not

363
00:14:45,839 --> 00:14:48,880
realistically deficient is based on the

364
00:14:48,880 --> 00:14:51,600
shift to the left to the right and to

365
00:14:51,600 --> 00:14:54,720
the middle this is so obvious devops

366
00:14:54,720 --> 00:14:56,480
bringing together develops actually

367
00:14:56,480 --> 00:14:58,320
means that it should be applied across

368
00:14:58,320 --> 00:15:01,040
the entire life cycle so your developers

369
00:15:01,040 --> 00:15:03,199
your programmers need application

370
00:15:03,199 --> 00:15:06,079
security on the left your operation

371
00:15:06,079 --> 00:15:10,160
special is needed on the right at mostly

372
00:15:10,160 --> 00:15:12,720
after deployment at operation and your

373
00:15:12,720 --> 00:15:15,279
ci cd your build engineer guys they need

374
00:15:15,279 --> 00:15:17,279
to test each build meaning

375
00:15:17,279 --> 00:15:20,320
they have to test in the middle

376
00:15:20,320 --> 00:15:22,320
so the reality is that

377
00:15:22,320 --> 00:15:24,079
it's not shifted left to shift to the

378
00:15:24,079 --> 00:15:26,240
left to the right into the middle only

379
00:15:26,240 --> 00:15:27,920
in that case you'll have

380
00:15:27,920 --> 00:15:31,199
security across the entire devops on

381
00:15:31,199 --> 00:15:33,360
other way it's def circles and i believe

382
00:15:33,360 --> 00:15:36,560
the last the most laughable myth is that

383
00:15:36,560 --> 00:15:39,519
devops people welcome security this is a

384
00:15:39,519 --> 00:15:40,639
really

385
00:15:40,639 --> 00:15:44,000
funny this is totally unbelievable the

386
00:15:44,000 --> 00:15:46,880
reality is that only that security will

387
00:15:46,880 --> 00:15:48,399
be welcomed

388
00:15:48,399 --> 00:15:51,839
which doesn't distract devops

389
00:15:51,839 --> 00:15:53,040
from doing

390
00:15:53,040 --> 00:15:56,320
of course devops just think of it

391
00:15:56,320 --> 00:15:59,600
devops goal is not even to deliver

392
00:15:59,600 --> 00:16:02,959
quality it's to deliver functionality in

393
00:16:02,959 --> 00:16:06,959
time in time and within budget limits

394
00:16:06,959 --> 00:16:08,720
first of all their primary goal is

395
00:16:08,720 --> 00:16:10,639
definitely not security it's

396
00:16:10,639 --> 00:16:12,399
functionality first

397
00:16:12,399 --> 00:16:15,199
probably qualities then uh most likely

398
00:16:15,199 --> 00:16:18,240
performance then and distant distance

399
00:16:18,240 --> 00:16:20,800
priority four or five whatever it's

400
00:16:20,800 --> 00:16:23,120
security and also keep in mind that

401
00:16:23,120 --> 00:16:25,759
those security technologies are complex

402
00:16:25,759 --> 00:16:29,279
and devops people don't have the skills

403
00:16:29,279 --> 00:16:32,480
so they will welcome only that security

404
00:16:32,480 --> 00:16:35,040
technology which would not require them

405
00:16:35,040 --> 00:16:37,839
want to require devops people to see

406
00:16:37,839 --> 00:16:41,040
security to learn technology and to run

407
00:16:41,040 --> 00:16:43,199
technology it's already now we're coming

408
00:16:43,199 --> 00:16:45,680
closer to understanding what kind of

409
00:16:45,680 --> 00:16:49,040
appsec we need the one that devops

410
00:16:49,040 --> 00:16:51,120
doesn't learn doesn't see

411
00:16:51,120 --> 00:16:52,399
and doesn't

412
00:16:52,399 --> 00:16:54,639
run

413
00:16:54,800 --> 00:16:58,720
so let us see what trends are impacting

414
00:16:58,720 --> 00:17:01,440
application security and would also ask

415
00:17:01,440 --> 00:17:02,560
a question

416
00:17:02,560 --> 00:17:05,520
is application security up to the

417
00:17:05,520 --> 00:17:07,039
challenge

418
00:17:07,039 --> 00:17:08,880
these are the trends i believe that are

419
00:17:08,880 --> 00:17:11,119
impacting application security testing

420
00:17:11,119 --> 00:17:12,640
devops of course

421
00:17:12,640 --> 00:17:14,079
main driver

422
00:17:14,079 --> 00:17:19,039
emergence of global dev ops communities

423
00:17:19,039 --> 00:17:22,480
cloud native devops and apis

424
00:17:22,480 --> 00:17:24,559
so what's happening

425
00:17:24,559 --> 00:17:27,280
we see communities everywhere github

426
00:17:27,280 --> 00:17:30,080
postman many others that bring together

427
00:17:30,080 --> 00:17:33,360
tens of millions of developers

428
00:17:33,360 --> 00:17:36,720
they have end-to-end workspace with

429
00:17:36,720 --> 00:17:38,559
unified experience from the beginning to

430
00:17:38,559 --> 00:17:41,760
the end that crosses entire cover entire

431
00:17:41,760 --> 00:17:43,840
software life cycle

432
00:17:43,840 --> 00:17:45,120
development

433
00:17:45,120 --> 00:17:47,600
and operations and all features

434
00:17:47,600 --> 00:17:49,760
programming building testing

435
00:17:49,760 --> 00:17:52,160
running applications they are integrated

436
00:17:52,160 --> 00:17:53,840
in the workspace

437
00:17:53,840 --> 00:17:57,919
so devops person walks in

438
00:17:57,919 --> 00:18:00,720
and never leaves and we need security

439
00:18:00,720 --> 00:18:02,720
that would stick to the same user

440
00:18:02,720 --> 00:18:04,640
experience by the way there is also

441
00:18:04,640 --> 00:18:06,880
infrastructure is the code the program

442
00:18:06,880 --> 00:18:09,280
will run time and develop environments

443
00:18:09,280 --> 00:18:11,600
ci cd pipelines that become

444
00:18:11,600 --> 00:18:14,559
kind of defect or standard and there is

445
00:18:14,559 --> 00:18:17,600
api an api per gartner now

446
00:18:17,600 --> 00:18:20,160
main driver there is a 75 percent of all

447
00:18:20,160 --> 00:18:22,880
interaction conducted by apis and only

448
00:18:22,880 --> 00:18:26,799
25 are manual access to the web so these

449
00:18:26,799 --> 00:18:30,000
are trends that impacts us in

450
00:18:30,000 --> 00:18:33,440
the upfront conclusion appsec as it is

451
00:18:33,440 --> 00:18:36,080
today the traditional one

452
00:18:36,080 --> 00:18:38,400
must accommodate to these new challenges

453
00:18:38,400 --> 00:18:42,799
but is it up to these challenges

454
00:18:42,799 --> 00:18:43,919
well

455
00:18:43,919 --> 00:18:46,480
traditional ast does not fit the

456
00:18:46,480 --> 00:18:49,760
paradigm it struggles honestly

457
00:18:49,760 --> 00:18:51,840
it does not cover cross-community

458
00:18:51,840 --> 00:18:54,720
workspace it's not been built for that

459
00:18:54,720 --> 00:18:56,559
there is no cross software lifestyle

460
00:18:56,559 --> 00:18:59,919
coverage and not all software life cycle

461
00:18:59,919 --> 00:19:02,320
phases are covered

462
00:19:02,320 --> 00:19:05,120
no single technology covers the entire

463
00:19:05,120 --> 00:19:07,760
all phases of the software life cycle so

464
00:19:07,760 --> 00:19:09,280
you should try to use different

465
00:19:09,280 --> 00:19:12,000
technology that look and feel and behave

466
00:19:12,000 --> 00:19:13,840
very differently

467
00:19:13,840 --> 00:19:16,799
absec testing offers incompatible tools

468
00:19:16,799 --> 00:19:19,520
that can require different skills sas

469
00:19:19,520 --> 00:19:21,360
technologies are different from desk

470
00:19:21,360 --> 00:19:23,120
technologies that within zest and dash

471
00:19:23,120 --> 00:19:24,960
there are different vendors that offer

472
00:19:24,960 --> 00:19:26,960
different user experience

473
00:19:26,960 --> 00:19:30,000
and that user experience of appsack is

474
00:19:30,000 --> 00:19:34,320
different from user experience of devops

475
00:19:34,320 --> 00:19:37,039
and most appsec testing

476
00:19:37,039 --> 00:19:41,039
has been built for proprietary platforms

477
00:19:41,039 --> 00:19:43,200
they are not community native or cloud

478
00:19:43,200 --> 00:19:45,600
native yeah there are links now they are

479
00:19:45,600 --> 00:19:47,919
linked for example into github but

480
00:19:47,919 --> 00:19:52,160
linking is not making them cloud native

481
00:19:52,160 --> 00:19:54,160
and there is a very heavy human

482
00:19:54,160 --> 00:19:56,880
augmentation one of the most serious

483
00:19:56,880 --> 00:19:58,320
issues that

484
00:19:58,320 --> 00:20:01,280
traditional absec is facing

485
00:20:01,280 --> 00:20:04,000
there is on boarding an operation that

486
00:20:04,000 --> 00:20:05,919
takes tremendous amount of time and

487
00:20:05,919 --> 00:20:08,640
really beyond devops skills and does not

488
00:20:08,640 --> 00:20:09,600
fit

489
00:20:09,600 --> 00:20:10,960
into

490
00:20:10,960 --> 00:20:14,080
devops and ci cd paradigm so

491
00:20:14,080 --> 00:20:17,039
absec testing is not for devops

492
00:20:17,039 --> 00:20:21,360
personnel appsec is built from appsec

493
00:20:21,360 --> 00:20:25,360
professionals and that what stops

494
00:20:25,360 --> 00:20:27,360
security to be seamlessly integrated

495
00:20:27,360 --> 00:20:31,360
into devops making it dev set-ups so

496
00:20:31,360 --> 00:20:32,400
another

497
00:20:32,400 --> 00:20:35,120
issue on why traditional epsec

498
00:20:35,120 --> 00:20:37,360
technologies fail

499
00:20:37,360 --> 00:20:40,080
let's take a look of api our testing api

500
00:20:40,080 --> 00:20:41,520
we know this is a

501
00:20:41,520 --> 00:20:44,000
by far the major

502
00:20:44,000 --> 00:20:45,840
driver of all interaction of the web

503
00:20:45,840 --> 00:20:50,640
those apis so to test them devops people

504
00:20:50,640 --> 00:20:52,880
must find apis

505
00:20:52,880 --> 00:20:55,120
this is an approach which is error prone

506
00:20:55,120 --> 00:20:57,280
and abuse pro and then they have to be

507
00:20:57,280 --> 00:21:00,080
deploying apis in regulation compliant

508
00:21:00,080 --> 00:21:02,159
format but regulation continuously

509
00:21:02,159 --> 00:21:04,240
changing then they have to be applauding

510
00:21:04,240 --> 00:21:08,320
them for ast so the result it's a error

511
00:21:08,320 --> 00:21:11,200
prone and abuse prawn

512
00:21:11,200 --> 00:21:15,039
approach and it requires a lot of work

513
00:21:15,039 --> 00:21:16,559
on part of

514
00:21:16,559 --> 00:21:18,559
devops people

515
00:21:18,559 --> 00:21:20,640
let's take another just as an example

516
00:21:20,640 --> 00:21:23,120
single page application a very popular

517
00:21:23,120 --> 00:21:26,240
way to build the application

518
00:21:26,240 --> 00:21:29,440
epsec testing requires

519
00:21:29,440 --> 00:21:31,600
application specific non-universal

520
00:21:31,600 --> 00:21:35,200
extension to appsec testing tools

521
00:21:35,200 --> 00:21:37,679
they cannot capture typically

522
00:21:37,679 --> 00:21:39,280
typically they cannot capture

523
00:21:39,280 --> 00:21:41,840
server-to-browser interactions and they

524
00:21:41,840 --> 00:21:44,400
are heavily human-driven they require

525
00:21:44,400 --> 00:21:47,679
crawling typically as a rule not as an

526
00:21:47,679 --> 00:21:49,919
exception as a result there is a poor

527
00:21:49,919 --> 00:21:51,919
accuracy in testing sba

528
00:21:51,919 --> 00:21:54,240
there is a poor coverage poor automation

529
00:21:54,240 --> 00:21:56,640
and a lot of work for

530
00:21:56,640 --> 00:21:58,559
devsicops

531
00:21:58,559 --> 00:22:01,360
sdlc coverage it is also poor with the

532
00:22:01,360 --> 00:22:04,240
traditional tools because um

533
00:22:04,240 --> 00:22:07,039
no ast technology covers all phases of

534
00:22:07,039 --> 00:22:09,039
software life cycle and it comes to

535
00:22:09,039 --> 00:22:11,039
incremental testing which is very

536
00:22:11,039 --> 00:22:13,280
important nowadays

537
00:22:13,280 --> 00:22:15,679
the incremental testing typically is

538
00:22:15,679 --> 00:22:17,440
associated with the physical increments

539
00:22:17,440 --> 00:22:19,760
for example well we can test not entire

540
00:22:19,760 --> 00:22:23,280
ip range but just sub range or not

541
00:22:23,280 --> 00:22:24,720
entire stack of

542
00:22:24,720 --> 00:22:26,720
urls but just

543
00:22:26,720 --> 00:22:29,440
one url but what is one url is it one

544
00:22:29,440 --> 00:22:32,880
business function 1.7 3.2 function

545
00:22:32,880 --> 00:22:35,679
nobody knows we need to test not

546
00:22:35,679 --> 00:22:37,039
physical increments but business

547
00:22:37,039 --> 00:22:41,679
increments and they are not good at that

548
00:22:41,679 --> 00:22:43,679
and on top of it

549
00:22:43,679 --> 00:22:45,280
is lengthy on boarding and the

550
00:22:45,280 --> 00:22:48,080
configuration which takes days

551
00:22:48,080 --> 00:22:51,039
and even weeks

552
00:22:51,120 --> 00:22:53,360
so

553
00:22:53,440 --> 00:22:56,240
a little harsh but

554
00:22:56,240 --> 00:22:58,000
i would say that application security

555
00:22:58,000 --> 00:23:00,720
testing as we know it is coming to an

556
00:23:00,720 --> 00:23:01,520
end

557
00:23:01,520 --> 00:23:03,840
it requires different technologies

558
00:23:03,840 --> 00:23:05,919
different solution

559
00:23:05,919 --> 00:23:08,400
look at sas test and i asked for example

560
00:23:08,400 --> 00:23:10,640
these are amazing technology really

561
00:23:10,640 --> 00:23:13,039
amazing technologies and most of them

562
00:23:13,039 --> 00:23:15,919
were built around 2000 2007 so it's

563
00:23:15,919 --> 00:23:17,120
about

564
00:23:17,120 --> 00:23:20,240
20 15 years ago and they served the

565
00:23:20,240 --> 00:23:23,039
purpose of the time but at that time

566
00:23:23,039 --> 00:23:25,840
there was no devops or devsecops notions

567
00:23:25,840 --> 00:23:28,559
paradigms no cloud native paradigms

568
00:23:28,559 --> 00:23:31,440
there was no ubiquitous apis single page

569
00:23:31,440 --> 00:23:34,000
application microservices so there is no

570
00:23:34,000 --> 00:23:36,000
surprise that they are not addressing

571
00:23:36,000 --> 00:23:40,000
these issues think of zest what a great

572
00:23:40,000 --> 00:23:42,240
technology but it doesn't test the real

573
00:23:42,240 --> 00:23:43,919
application it's just

574
00:23:43,919 --> 00:23:46,799
testing uh steady code it's unrealistic

575
00:23:46,799 --> 00:23:49,200
test environment with no insight into

576
00:23:49,200 --> 00:23:50,640
running application

577
00:23:50,640 --> 00:23:53,039
as a result poor accuracy

578
00:23:53,039 --> 00:23:56,000
and high false positive rates

579
00:23:56,000 --> 00:23:58,159
let's take a look at desk another

580
00:23:58,159 --> 00:24:00,159
fundamental technology

581
00:24:00,159 --> 00:24:02,400
it has that time consuming crawling

582
00:24:02,400 --> 00:24:04,640
excessive attacks

583
00:24:04,640 --> 00:24:06,640
crawling might take

584
00:24:06,640 --> 00:24:08,640
days hours

585
00:24:08,640 --> 00:24:11,279
and it has limited or no insight into

586
00:24:11,279 --> 00:24:14,400
application code and into apis

587
00:24:14,400 --> 00:24:16,320
beautiful technology i asked really

588
00:24:16,320 --> 00:24:19,679
beautiful technology but it's based on

589
00:24:19,679 --> 00:24:22,080
invasive instrumentation in the server

590
00:24:22,080 --> 00:24:24,320
its language its agent is language

591
00:24:24,320 --> 00:24:27,679
dependent it consumes cpa cpu of the

592
00:24:27,679 --> 00:24:29,120
same

593
00:24:29,120 --> 00:24:31,520
server that runs your application and as

594
00:24:31,520 --> 00:24:32,400
a result

595
00:24:32,400 --> 00:24:34,080
low adoption of this beautiful

596
00:24:34,080 --> 00:24:36,080
technology so my point is that

597
00:24:36,080 --> 00:24:39,039
traditional epsec technologies struggle

598
00:24:39,039 --> 00:24:42,159
to fulfill modern requirements

599
00:24:42,159 --> 00:24:44,559
they or this

600
00:24:44,559 --> 00:24:46,559
space reached

601
00:24:46,559 --> 00:24:48,559
its limits

602
00:24:48,559 --> 00:24:51,919
so i try to summarize what we are having

603
00:24:51,919 --> 00:24:54,880
today i try to

604
00:24:54,880 --> 00:24:57,840
draw a building of traditional

605
00:24:57,840 --> 00:24:59,679
application security and i believe the

606
00:24:59,679 --> 00:25:02,720
building is pretty ugly that's what it

607
00:25:02,720 --> 00:25:04,480
is

608
00:25:04,480 --> 00:25:06,400
appsec technologies

609
00:25:06,400 --> 00:25:08,799
and abstract testing technology it runs

610
00:25:08,799 --> 00:25:11,200
mostly laid at pre-planned before

611
00:25:11,200 --> 00:25:12,640
pre-deployment

612
00:25:12,640 --> 00:25:14,720
they don't cover entire software life

613
00:25:14,720 --> 00:25:15,760
cycle

614
00:25:15,760 --> 00:25:17,919
it's too late when in pre-deployment you

615
00:25:17,919 --> 00:25:20,080
test an application it's too late to fix

616
00:25:20,080 --> 00:25:22,799
detected vulnerabilities there is a poor

617
00:25:22,799 --> 00:25:25,760
incremental testing there aren't seldom

618
00:25:25,760 --> 00:25:27,600
not when needed because they have to be

619
00:25:27,600 --> 00:25:28,880
run by

620
00:25:28,880 --> 00:25:31,840
appsx specialists not devops people they

621
00:25:31,840 --> 00:25:34,559
are slow it might take hours and days

622
00:25:34,559 --> 00:25:37,200
not minutes or seconds to test what you

623
00:25:37,200 --> 00:25:40,080
need while devops is running really

624
00:25:40,080 --> 00:25:42,480
sometimes in seconds but definitely in

625
00:25:42,480 --> 00:25:45,520
minutes and big bills some hours it's

626
00:25:45,520 --> 00:25:48,240
hard to automate there is a poor ci cd

627
00:25:48,240 --> 00:25:51,360
enablement and they are not in depth of

628
00:25:51,360 --> 00:25:54,559
hands they fan been built for security

629
00:25:54,559 --> 00:25:57,360
specialists so a few predicts and

630
00:25:57,360 --> 00:26:00,720
directions where how would we get

631
00:26:00,720 --> 00:26:03,279
our at our situation some

632
00:26:03,279 --> 00:26:05,039
recommendations so

633
00:26:05,039 --> 00:26:07,919
i believe that through 2023 within a

634
00:26:07,919 --> 00:26:10,080
couple of years devops community will

635
00:26:10,080 --> 00:26:11,440
grow bigger

636
00:26:11,440 --> 00:26:14,720
than in the previous 10 years combined

637
00:26:14,720 --> 00:26:16,080
thanks to

638
00:26:16,080 --> 00:26:18,880
ubiquitous adoption on github postman

639
00:26:18,880 --> 00:26:21,200
all other communities that bring

640
00:26:21,200 --> 00:26:23,039
together millions actually tens of

641
00:26:23,039 --> 00:26:25,440
millions of developers

642
00:26:25,440 --> 00:26:27,679
adoption of cloud overall of

643
00:26:27,679 --> 00:26:29,520
infrastructure is the code serverless

644
00:26:29,520 --> 00:26:33,039
computing and etc and etc

645
00:26:33,039 --> 00:26:35,279
and to catch up with that

646
00:26:35,279 --> 00:26:38,720
to follow devops by that 2023 within a

647
00:26:38,720 --> 00:26:40,480
couple of years

648
00:26:40,480 --> 00:26:44,159
appsec and ast will start offering

649
00:26:44,159 --> 00:26:45,600
technologies

650
00:26:45,600 --> 00:26:48,720
that will really transform devops

651
00:26:48,720 --> 00:26:51,440
into devsicops

652
00:26:51,440 --> 00:26:53,520
and those technologies

653
00:26:53,520 --> 00:26:54,960
some of them should be built from

654
00:26:54,960 --> 00:26:58,320
scratch or very seriously modified they

655
00:26:58,320 --> 00:27:00,720
should be purposely built for community

656
00:27:00,720 --> 00:27:05,440
for cloud and for native api testing

657
00:27:05,440 --> 00:27:08,480
appsec should have devops user

658
00:27:08,480 --> 00:27:13,679
experience not the other way around it's

659
00:27:13,679 --> 00:27:16,720
appsec should learn speaking devops not

660
00:27:16,720 --> 00:27:18,480
the other way around

661
00:27:18,480 --> 00:27:20,159
they should become application

662
00:27:20,159 --> 00:27:22,240
architecture agnostic because they have

663
00:27:22,240 --> 00:27:25,840
to be able to equally easily test single

664
00:27:25,840 --> 00:27:27,360
page application in traditional

665
00:27:27,360 --> 00:27:29,919
multi-page application and microservices

666
00:27:29,919 --> 00:27:32,960
in api and speaking of api

667
00:27:32,960 --> 00:27:36,880
it should be no api discovery and api

668
00:27:36,880 --> 00:27:40,159
declaration and upload and compliance it

669
00:27:40,159 --> 00:27:42,240
should not be developed shop it should

670
00:27:42,240 --> 00:27:43,360
be done

671
00:27:43,360 --> 00:27:45,919
not by devops but these new

672
00:27:45,919 --> 00:27:48,159
emerging technologies they should be

673
00:27:48,159 --> 00:27:49,760
fully automated

674
00:27:49,760 --> 00:27:52,080
including very specifically application

675
00:27:52,080 --> 00:27:54,559
onboarding in tool configuration and

676
00:27:54,559 --> 00:27:56,960
credential handling minimizing

677
00:27:56,960 --> 00:27:59,600
completely to the minimum to the bare

678
00:27:59,600 --> 00:28:00,559
minimum

679
00:28:00,559 --> 00:28:03,679
devops involvement devops should not see

680
00:28:03,679 --> 00:28:06,159
learn and run actually these

681
00:28:06,159 --> 00:28:08,000
technologies

682
00:28:08,000 --> 00:28:09,440
test

683
00:28:09,440 --> 00:28:11,919
should be uh testing all those stats

684
00:28:11,919 --> 00:28:14,720
should do business testing

685
00:28:14,720 --> 00:28:18,000
um the testing business increments

686
00:28:18,000 --> 00:28:20,720
not physical increments as well as

687
00:28:20,720 --> 00:28:22,559
entire application

688
00:28:22,559 --> 00:28:24,880
they should get insight into tested

689
00:28:24,880 --> 00:28:26,799
application behavior some technologies

690
00:28:26,799 --> 00:28:28,399
today

691
00:28:28,399 --> 00:28:30,000
run

692
00:28:30,000 --> 00:28:32,640
too slow and produce way too many false

693
00:28:32,640 --> 00:28:34,399
positive and negatives simply because

694
00:28:34,399 --> 00:28:36,799
they have no insight in application

695
00:28:36,799 --> 00:28:38,960
behavior

696
00:28:38,960 --> 00:28:41,039
search for vulnerability should be

697
00:28:41,039 --> 00:28:43,840
navigated many technologies today don't

698
00:28:43,840 --> 00:28:44,880
know

699
00:28:44,880 --> 00:28:46,720
how to find vulnerability that's why

700
00:28:46,720 --> 00:28:48,559
spending a tremendous amount of time and

701
00:28:48,559 --> 00:28:50,399
for example looking uh launching

702
00:28:50,399 --> 00:28:52,799
excessive number of attacks

703
00:28:52,799 --> 00:28:54,640
this technology should be a sharp

704
00:28:54,640 --> 00:28:57,840
shooting not carpet bombing

705
00:28:57,840 --> 00:29:00,240
this technology should be built for deaf

706
00:29:00,240 --> 00:29:03,760
people for qa people for ops people and

707
00:29:03,760 --> 00:29:07,600
as well as for security people

708
00:29:07,600 --> 00:29:10,960
finally my recommendations

709
00:29:10,960 --> 00:29:13,679
we have to start adopting technology

710
00:29:13,679 --> 00:29:15,600
first and only then build

711
00:29:15,600 --> 00:29:17,520
technology-enabled culture if you do

712
00:29:17,520 --> 00:29:20,000
otherwise you will fail we need to be

713
00:29:20,000 --> 00:29:22,399
adopting technology specifically built

714
00:29:22,399 --> 00:29:24,480
for devsecops

715
00:29:24,480 --> 00:29:26,880
and automated technology specifically

716
00:29:26,880 --> 00:29:29,600
built for deaf circles we have to make

717
00:29:29,600 --> 00:29:31,919
shift to the left that is true

718
00:29:31,919 --> 00:29:33,520
but also shift to the right and to the

719
00:29:33,520 --> 00:29:34,880
middle by the way

720
00:29:34,880 --> 00:29:36,399
shift to the right would require a very

721
00:29:36,399 --> 00:29:38,080
different technology that would run at

722
00:29:38,080 --> 00:29:39,440
operation

723
00:29:39,440 --> 00:29:42,080
phase where you cannot for example

724
00:29:42,080 --> 00:29:43,520
attack

725
00:29:43,520 --> 00:29:44,880
uh

726
00:29:44,880 --> 00:29:46,799
application in such way that you can

727
00:29:46,799 --> 00:29:50,159
bring them down or damage them or run

728
00:29:50,159 --> 00:29:52,799
web application firewalls

729
00:29:52,799 --> 00:29:56,159
in no way you should be making devops

730
00:29:56,159 --> 00:29:58,640
experts in application security tools

731
00:29:58,640 --> 00:30:01,120
please understand me correctly devenops

732
00:30:01,120 --> 00:30:03,520
people should learn best

733
00:30:03,520 --> 00:30:05,919
programming secure programming and

734
00:30:05,919 --> 00:30:08,960
operation practices but in no way should

735
00:30:08,960 --> 00:30:11,919
become experts and know we should be

736
00:30:11,919 --> 00:30:12,880
running

737
00:30:12,880 --> 00:30:14,640
absec tools

738
00:30:14,640 --> 00:30:17,120
and we always have to distinguish

739
00:30:17,120 --> 00:30:21,440
between myth and reality in devsicops

740
00:30:21,440 --> 00:30:26,279
thank you very much for your attention

