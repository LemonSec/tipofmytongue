1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,160 --> 00:00:11,840
so um i love the introduction uh he

3
00:00:11,840 --> 00:00:13,920
calls me a strong woman it's a strong

4
00:00:13,920 --> 00:00:15,519
woman

5
00:00:15,519 --> 00:00:17,680
um all right so today i'm going to talk

6
00:00:17,680 --> 00:00:21,119
about policy as code and

7
00:00:21,119 --> 00:00:23,519
why i want to um

8
00:00:23,519 --> 00:00:25,840
talk about that that is one of the

9
00:00:25,840 --> 00:00:28,840
things i'm looking at right now as an

10
00:00:28,840 --> 00:00:32,320
innovation direction and and as

11
00:00:32,320 --> 00:00:34,880
some of you know that i am

12
00:00:34,880 --> 00:00:38,160
an investor as my day job although i

13
00:00:38,160 --> 00:00:40,160
started my career

14
00:00:40,160 --> 00:00:44,079
as a technologist i'm very much still a

15
00:00:44,079 --> 00:00:48,079
uh sort of a technology person uh um in

16
00:00:48,079 --> 00:00:49,039
mind

17
00:00:49,039 --> 00:00:51,120
um i run a

18
00:00:51,120 --> 00:00:53,760
security focused venture fund called

19
00:00:53,760 --> 00:00:55,120
rain capital

20
00:00:55,120 --> 00:00:59,280
um i'm also sitting on a public

21
00:00:59,280 --> 00:01:02,800
board for a fortune 500

22
00:01:02,800 --> 00:01:06,320
critical infrastructure company um i am

23
00:01:06,320 --> 00:01:08,400
on the former i'm a former board of

24
00:01:08,400 --> 00:01:11,360
director for owasp so that's why i'm

25
00:01:11,360 --> 00:01:13,920
here today or one of the reasons i'm

26
00:01:13,920 --> 00:01:17,040
here um here's my contact info if anyone

27
00:01:17,040 --> 00:01:18,960
wants to um

28
00:01:18,960 --> 00:01:22,400
uh talk to me um

29
00:01:22,400 --> 00:01:24,799
so i'm not getting any feedback here am

30
00:01:24,799 --> 00:01:27,920
i still online can someone say something

31
00:01:27,920 --> 00:01:29,439
because i don't see anything either oh

32
00:01:29,439 --> 00:01:31,759
yes it's good good all right good all

33
00:01:31,759 --> 00:01:33,520
right so i'll keep going there

34
00:01:33,520 --> 00:01:35,680
um

35
00:01:35,680 --> 00:01:38,079
so one of the things that

36
00:01:38,079 --> 00:01:39,280
sort of

37
00:01:39,280 --> 00:01:41,439
inspired this whole thing about policy

38
00:01:41,439 --> 00:01:42,880
as coach is

39
00:01:42,880 --> 00:01:45,280
as everybody here knows that devops is

40
00:01:45,280 --> 00:01:48,320
driving innovation in business right so

41
00:01:48,320 --> 00:01:49,439
we are

42
00:01:49,439 --> 00:01:53,040
um a ton of automation is happening in

43
00:01:53,040 --> 00:01:56,880
the devops world uh the build and test

44
00:01:56,880 --> 00:01:58,240
and deploy

45
00:01:58,240 --> 00:02:02,159
is a continuous pipeline uh that has a

46
00:02:02,159 --> 00:02:05,040
feedback loop um associated with it so

47
00:02:05,040 --> 00:02:07,680
that whatever you see in the runtime can

48
00:02:07,680 --> 00:02:11,360
come back to build and test again it's

49
00:02:11,360 --> 00:02:12,480
an um

50
00:02:12,480 --> 00:02:14,080
an endless

51
00:02:14,080 --> 00:02:15,360
pipeline

52
00:02:15,360 --> 00:02:16,080
and

53
00:02:16,080 --> 00:02:18,560
devops is driving automation driving

54
00:02:18,560 --> 00:02:21,599
speed driving time to market however

55
00:02:21,599 --> 00:02:24,959
security is a little bit lagging behind

56
00:02:24,959 --> 00:02:28,720
right and we got um security folks

57
00:02:28,720 --> 00:02:31,599
security teams uh really got a lot of

58
00:02:31,599 --> 00:02:33,760
flag for it um

59
00:02:33,760 --> 00:02:36,720
and it presents a set of challenges for

60
00:02:36,720 --> 00:02:39,920
today's security team um the the top one

61
00:02:39,920 --> 00:02:43,040
is there's a need for speed right so

62
00:02:43,040 --> 00:02:45,280
uh security controls are the heavy

63
00:02:45,280 --> 00:02:48,720
weight that are um kind of not agile is

64
00:02:48,720 --> 00:02:50,879
going to

65
00:02:50,879 --> 00:02:52,959
be against the

66
00:02:52,959 --> 00:02:56,480
devops trend and devos grain

67
00:02:56,480 --> 00:02:58,319
um also

68
00:02:58,319 --> 00:03:00,800
security traditionally tends to be more

69
00:03:00,800 --> 00:03:02,319
siloed

70
00:03:02,319 --> 00:03:06,959
not necessarily integrated with a

71
00:03:06,959 --> 00:03:09,599
dev functionality and dev pipeline

72
00:03:09,599 --> 00:03:12,800
so here we security is often now being

73
00:03:12,800 --> 00:03:14,640
asked to

74
00:03:14,640 --> 00:03:17,440
collaborate more and integrate more

75
00:03:17,440 --> 00:03:19,040
and there's also

76
00:03:19,040 --> 00:03:20,000
um

77
00:03:20,000 --> 00:03:22,720
so the infrastructure's code coming in

78
00:03:22,720 --> 00:03:25,440
and it's it's an unfamiliar sort of a

79
00:03:25,440 --> 00:03:28,400
component and familiar type of tasks

80
00:03:28,400 --> 00:03:31,200
that security has to get

81
00:03:31,200 --> 00:03:32,640
comfortable with

82
00:03:32,640 --> 00:03:33,599
um

83
00:03:33,599 --> 00:03:36,560
and really developer this this

84
00:03:36,560 --> 00:03:39,040
expanded role of developer

85
00:03:39,040 --> 00:03:41,360
that can directly touch production

86
00:03:41,360 --> 00:03:44,560
systems or touch production systems

87
00:03:44,560 --> 00:03:46,799
through an automated pipeline that is

88
00:03:46,799 --> 00:03:50,080
not controlled by security uh is really

89
00:03:50,080 --> 00:03:51,360
challenging

90
00:03:51,360 --> 00:03:53,840
the the uh traditional mindset of

91
00:03:53,840 --> 00:03:56,799
security so all these uh are coming at

92
00:03:56,799 --> 00:03:58,959
security teams as

93
00:03:58,959 --> 00:04:02,159
pressures as challenges and if we don't

94
00:04:02,159 --> 00:04:04,879
respond if we don't change

95
00:04:04,879 --> 00:04:06,879
uh then the

96
00:04:06,879 --> 00:04:07,840
uh

97
00:04:07,840 --> 00:04:11,680
conflict if you will will be amplified

98
00:04:11,680 --> 00:04:12,959
and

99
00:04:12,959 --> 00:04:16,160
not only that we're also looking at um

100
00:04:16,160 --> 00:04:19,358
an accelerated uh threat landscape right

101
00:04:19,358 --> 00:04:22,639
so cyber losses in 2021 supposed to be

102
00:04:22,639 --> 00:04:24,960
one trillion dollars and it will grow

103
00:04:24,960 --> 00:04:26,400
very quickly

104
00:04:26,400 --> 00:04:27,199
to

105
00:04:27,199 --> 00:04:30,960
20 uh in 2025 to 10.5 trillion and i

106
00:04:30,960 --> 00:04:32,479
think this is um

107
00:04:32,479 --> 00:04:35,280
this is probably gardner's number um

108
00:04:35,280 --> 00:04:38,320
when you are one one side faced with

109
00:04:38,320 --> 00:04:39,600
moving fast

110
00:04:39,600 --> 00:04:41,520
business pressure to move fast with

111
00:04:41,520 --> 00:04:44,160
devops the other side you're faced with

112
00:04:44,160 --> 00:04:47,280
an accelerated threat landscape security

113
00:04:47,280 --> 00:04:49,199
is sort of squeezed in

114
00:04:49,199 --> 00:04:50,560
in the middle

115
00:04:50,560 --> 00:04:53,600
what do you do security has to change

116
00:04:53,600 --> 00:04:55,440
the way we

117
00:04:55,440 --> 00:04:58,479
implement security the way we work with

118
00:04:58,479 --> 00:05:00,720
other teams the way essentially we do

119
00:05:00,720 --> 00:05:01,680
business

120
00:05:01,680 --> 00:05:03,600
and one

121
00:05:03,600 --> 00:05:07,919
way to do that is move to code and hence

122
00:05:07,919 --> 00:05:09,440
the whole

123
00:05:09,440 --> 00:05:11,759
theme of the talk is policy as code and

124
00:05:11,759 --> 00:05:14,880
what does it mean to move to code

125
00:05:14,880 --> 00:05:17,360
um what is code right

126
00:05:17,360 --> 00:05:18,560
um

127
00:05:18,560 --> 00:05:21,039
to implement something as code really

128
00:05:21,039 --> 00:05:22,400
let's say this thing you want to

129
00:05:22,400 --> 00:05:24,639
implement is a whatever it's a target

130
00:05:24,639 --> 00:05:26,479
abstracted notion

131
00:05:26,479 --> 00:05:28,960
um to implement this as code we

132
00:05:28,960 --> 00:05:31,759
essentially express this in a sort of

133
00:05:31,759 --> 00:05:34,240
programming language which is code right

134
00:05:34,240 --> 00:05:37,520
we codify it which is writing it in the

135
00:05:37,520 --> 00:05:39,039
programming language

136
00:05:39,039 --> 00:05:42,320
um and there has to be

137
00:05:42,320 --> 00:05:44,479
an infrastructure support right there

138
00:05:44,479 --> 00:05:47,120
has to be a way of parsing this language

139
00:05:47,120 --> 00:05:49,120
and implementing this language on the

140
00:05:49,120 --> 00:05:50,960
target system

141
00:05:50,960 --> 00:05:52,800
and once you have that

142
00:05:52,800 --> 00:05:56,240
what it allows you to do is expressing

143
00:05:56,240 --> 00:05:59,759
something as code and implementing it um

144
00:05:59,759 --> 00:06:02,639
as code is you can now apply software

145
00:06:02,639 --> 00:06:05,440
engineering practices to the sink

146
00:06:05,440 --> 00:06:07,600
whatever this thing is across its life

147
00:06:07,600 --> 00:06:10,720
cycle right so you can you can now apply

148
00:06:10,720 --> 00:06:13,199
soft engineering principles in design in

149
00:06:13,199 --> 00:06:15,919
building tests in deployment and

150
00:06:15,919 --> 00:06:18,080
ultimately management and there's a lot

151
00:06:18,080 --> 00:06:19,039
of

152
00:06:19,039 --> 00:06:20,960
good things come with it there's

153
00:06:20,960 --> 00:06:23,840
management that scale there's explicit

154
00:06:23,840 --> 00:06:26,720
failure there's testability all that

155
00:06:26,720 --> 00:06:29,120
comes with it which significantly

156
00:06:29,120 --> 00:06:32,160
reduces any manual work that you need to

157
00:06:32,160 --> 00:06:32,960
do

158
00:06:32,960 --> 00:06:35,840
uh if you were implementing this target

159
00:06:35,840 --> 00:06:36,720
as

160
00:06:36,720 --> 00:06:37,840
um

161
00:06:37,840 --> 00:06:40,160
in the traditional manual way

162
00:06:40,160 --> 00:06:43,039
um an example of you know something

163
00:06:43,039 --> 00:06:45,759
expressed as code is infrastructures

164
00:06:45,759 --> 00:06:48,400
code terraform cloud formation scripts

165
00:06:48,400 --> 00:06:50,479
for instance these have really

166
00:06:50,479 --> 00:06:52,960
completely changed the way

167
00:06:52,960 --> 00:06:56,319
infrastructure is delivered uh in a

168
00:06:56,319 --> 00:06:58,800
cloud environment and so

169
00:06:58,800 --> 00:07:02,000
these days through the use of terraform

170
00:07:02,000 --> 00:07:03,840
a cloud formation script

171
00:07:03,840 --> 00:07:04,960
um

172
00:07:04,960 --> 00:07:08,400
a a devops team or even a

173
00:07:08,400 --> 00:07:10,800
sre or developer even

174
00:07:10,800 --> 00:07:14,000
could express the runtime environment or

175
00:07:14,000 --> 00:07:16,479
requirements for runtime environment

176
00:07:16,479 --> 00:07:19,520
through infrastructures code and then

177
00:07:19,520 --> 00:07:20,880
the

178
00:07:20,880 --> 00:07:23,360
the cloud environment can interpret this

179
00:07:23,360 --> 00:07:26,400
code in runtime and put together dynamic

180
00:07:26,400 --> 00:07:29,120
resources to make the runtime

181
00:07:29,120 --> 00:07:32,720
environment as you specified and as we

182
00:07:32,720 --> 00:07:34,080
have seen

183
00:07:34,080 --> 00:07:36,560
this has really accelerated cloud

184
00:07:36,560 --> 00:07:40,479
adoption and cloud usage

185
00:07:40,479 --> 00:07:42,400
the um

186
00:07:42,400 --> 00:07:44,639
um just go over a little bit more about

187
00:07:44,639 --> 00:07:48,000
the uh benefits of of uh

188
00:07:48,000 --> 00:07:50,400
implementing something as code right so

189
00:07:50,400 --> 00:07:53,599
automation speed is really management at

190
00:07:53,599 --> 00:07:56,319
scale so now you can treat this thing

191
00:07:56,319 --> 00:07:58,319
the same way that you can control

192
00:07:58,319 --> 00:08:00,319
internet scale cloud

193
00:08:00,319 --> 00:08:03,039
um for security though if we're applying

194
00:08:03,039 --> 00:08:06,560
this to security the as code concept

195
00:08:06,560 --> 00:08:09,039
two of the major things for security

196
00:08:09,039 --> 00:08:11,759
that to in my uh opinions really

197
00:08:11,759 --> 00:08:13,120
important is

198
00:08:13,120 --> 00:08:15,360
now that you won't have silent failures

199
00:08:15,360 --> 00:08:17,280
you don't know about because if you're

200
00:08:17,280 --> 00:08:19,599
expressing something as code

201
00:08:19,599 --> 00:08:22,319
then you know what's not expressed you

202
00:08:22,319 --> 00:08:25,440
know the exception should be explicit

203
00:08:25,440 --> 00:08:28,000
and failures should also be loud and

204
00:08:28,000 --> 00:08:31,599
explicit asylum failures and

205
00:08:31,599 --> 00:08:33,679
implicit exceptions are actually enemy

206
00:08:33,679 --> 00:08:35,039
to security

207
00:08:35,039 --> 00:08:37,919
and expressing something as code or

208
00:08:37,919 --> 00:08:41,839
security as code would counteract that

209
00:08:41,839 --> 00:08:44,240
so those two things are very important

210
00:08:44,240 --> 00:08:46,000
benefits

211
00:08:46,000 --> 00:08:48,000
um

212
00:08:48,000 --> 00:08:50,720
so implementing security is code

213
00:08:50,720 --> 00:08:52,640
one of the starting point that i would

214
00:08:52,640 --> 00:08:55,839
argue is start with policy as code

215
00:08:55,839 --> 00:08:58,240
certainly in in security a lot of times

216
00:08:58,240 --> 00:09:00,640
we start with security policies without

217
00:09:00,640 --> 00:09:03,519
policies we can't do anything right but

218
00:09:03,519 --> 00:09:06,640
how is policies implemented today

219
00:09:06,640 --> 00:09:09,279
a lot of times it's manual right so we

220
00:09:09,279 --> 00:09:11,920
say okay should um

221
00:09:11,920 --> 00:09:15,120
uh should this team have access to these

222
00:09:15,120 --> 00:09:16,720
resources

223
00:09:16,720 --> 00:09:17,680
um

224
00:09:17,680 --> 00:09:20,240
no there could be a a team policy

225
00:09:20,240 --> 00:09:23,040
somewhere but somebody has to pick up

226
00:09:23,040 --> 00:09:24,959
the phone say hey let's

227
00:09:24,959 --> 00:09:26,800
let this team have access to these

228
00:09:26,800 --> 00:09:29,519
resources and the idea has to figure out

229
00:09:29,519 --> 00:09:30,720
um

230
00:09:30,720 --> 00:09:33,120
where which applications to enable which

231
00:09:33,120 --> 00:09:35,519
resources to enable access and the

232
00:09:35,519 --> 00:09:37,680
credential has to be there and has to be

233
00:09:37,680 --> 00:09:39,279
provisioned

234
00:09:39,279 --> 00:09:41,680
and then has to be tested all that are

235
00:09:41,680 --> 00:09:44,080
manual work

236
00:09:44,080 --> 00:09:47,279
with policies code hopefully this manual

237
00:09:47,279 --> 00:09:51,120
work can be eliminated to automation and

238
00:09:51,120 --> 00:09:52,240
to

239
00:09:52,240 --> 00:09:55,920
true engineering pipeline

240
00:09:56,160 --> 00:09:58,959
so some of the example policies before

241
00:09:58,959 --> 00:10:01,440
we talk about how that can be done

242
00:10:01,440 --> 00:10:04,160
some of the example policies are i put

243
00:10:04,160 --> 00:10:06,959
them in three categories um their access

244
00:10:06,959 --> 00:10:09,600
policies to the right is that

245
00:10:09,600 --> 00:10:10,640
um

246
00:10:10,640 --> 00:10:12,640
a lot of access policies can be

247
00:10:12,640 --> 00:10:15,200
expressed as code and examples are you

248
00:10:15,200 --> 00:10:17,040
know all service accounts

249
00:10:17,040 --> 00:10:19,440
accessing this resource must be going

250
00:10:19,440 --> 00:10:20,240
through

251
00:10:20,240 --> 00:10:22,560
uh must be coming from a particular ip

252
00:10:22,560 --> 00:10:25,040
range for instance it's a very typical

253
00:10:25,040 --> 00:10:28,399
access policy there are config policies

254
00:10:28,399 --> 00:10:31,040
and a lot of times policies that we deal

255
00:10:31,040 --> 00:10:33,680
with are actually config policies uh

256
00:10:33,680 --> 00:10:36,399
some examples could be um

257
00:10:36,399 --> 00:10:39,040
or as three buckets should have default

258
00:10:39,040 --> 00:10:41,200
encryption enabled it's a it's a

259
00:10:41,200 --> 00:10:44,959
configuration option or um

260
00:10:44,959 --> 00:10:47,120
all hosts should use this particular

261
00:10:47,120 --> 00:10:50,079
image it's also could be a configuration

262
00:10:50,079 --> 00:10:50,959
um

263
00:10:50,959 --> 00:10:52,399
a choice

264
00:10:52,399 --> 00:10:53,519
um

265
00:10:53,519 --> 00:10:54,480
there

266
00:10:54,480 --> 00:10:57,200
another set of policies i call i call

267
00:10:57,200 --> 00:10:59,680
them governance policies um they're a

268
00:10:59,680 --> 00:11:01,920
little bit meta a little bit more high

269
00:11:01,920 --> 00:11:02,880
level

270
00:11:02,880 --> 00:11:03,760
not

271
00:11:03,760 --> 00:11:06,160
specifically about configuration or

272
00:11:06,160 --> 00:11:07,440
access

273
00:11:07,440 --> 00:11:10,240
um an example with that um

274
00:11:10,240 --> 00:11:11,839
would be a

275
00:11:11,839 --> 00:11:14,480
for instance all service accounts

276
00:11:14,480 --> 00:11:16,880
that are not active over a month should

277
00:11:16,880 --> 00:11:20,720
be disabled okay so and that is um

278
00:11:20,720 --> 00:11:22,160
a policy

279
00:11:22,160 --> 00:11:24,640
that could be expressed in code and then

280
00:11:24,640 --> 00:11:26,839
tested and implemented

281
00:11:26,839 --> 00:11:28,720
now

282
00:11:28,720 --> 00:11:31,760
policy as code essentially means there

283
00:11:31,760 --> 00:11:33,360
is a language

284
00:11:33,360 --> 00:11:35,760
for which you write the policy

285
00:11:35,760 --> 00:11:36,959
and there's

286
00:11:36,959 --> 00:11:40,399
uh the corresponding target platform

287
00:11:40,399 --> 00:11:43,200
for which the policy will be applied

288
00:11:43,200 --> 00:11:46,560
would have the capability to parse to

289
00:11:46,560 --> 00:11:50,639
understand and to enforce this policy

290
00:11:50,639 --> 00:11:53,519
and then there's also the assumption

291
00:11:53,519 --> 00:11:56,320
that there's an engineering pipeline

292
00:11:56,320 --> 00:11:57,920
that or you're able to build the

293
00:11:57,920 --> 00:12:00,800
engineering pipeline that connects

294
00:12:00,800 --> 00:12:03,680
authoring testing

295
00:12:03,680 --> 00:12:05,120
um

296
00:12:05,120 --> 00:12:08,720
of the the policy with the deployment to

297
00:12:08,720 --> 00:12:10,880
runtime and and

298
00:12:10,880 --> 00:12:13,360
monitoring in runtime

299
00:12:13,360 --> 00:12:14,320
to

300
00:12:14,320 --> 00:12:16,560
implement the feedback loop should

301
00:12:16,560 --> 00:12:19,600
something's not working in in

302
00:12:19,600 --> 00:12:22,000
runtime you need to change the policy

303
00:12:22,000 --> 00:12:24,160
there's automatic feedback loop to the

304
00:12:24,160 --> 00:12:26,000
authoring part of it

305
00:12:26,000 --> 00:12:27,440
and and

306
00:12:27,440 --> 00:12:29,680
there's way to change this policy

307
00:12:29,680 --> 00:12:33,279
dynamically possibly automated

308
00:12:33,279 --> 00:12:36,480
then you can go through this whole par

309
00:12:36,480 --> 00:12:39,279
um author test

310
00:12:39,279 --> 00:12:40,800
deployment

311
00:12:40,800 --> 00:12:45,040
stages again to update the policy

312
00:12:45,040 --> 00:12:47,200
um

313
00:12:47,200 --> 00:12:50,079
a few building blocks that are needed

314
00:12:50,079 --> 00:12:52,320
for policies code to be effective this

315
00:12:52,320 --> 00:12:55,279
is a actually a slide taken out of a

316
00:12:55,279 --> 00:12:57,920
recent report that i did

317
00:12:57,920 --> 00:13:01,120
um you have to have a policy i have a

318
00:13:01,120 --> 00:13:03,360
policy language which is you know common

319
00:13:03,360 --> 00:13:06,720
framework and language and here

320
00:13:06,720 --> 00:13:09,360
in the cloud world oppa

321
00:13:09,360 --> 00:13:11,279
framework is a very popular one to

322
00:13:11,279 --> 00:13:13,360
author policies so everybody has to

323
00:13:13,360 --> 00:13:15,519
agree on it and it has to be a standard

324
00:13:15,519 --> 00:13:17,839
language there has to be visibility

325
00:13:17,839 --> 00:13:20,720
meaning that you kind of have to know

326
00:13:20,720 --> 00:13:23,360
um your invite what your environment is

327
00:13:23,360 --> 00:13:26,160
like otherwise you cannot write policies

328
00:13:26,160 --> 00:13:28,800
right so um you have to write policy to

329
00:13:28,800 --> 00:13:30,720
a visible environment

330
00:13:30,720 --> 00:13:32,399
i have

331
00:13:32,399 --> 00:13:34,560
have a way to test them

332
00:13:34,560 --> 00:13:36,720
handling exceptions

333
00:13:36,720 --> 00:13:40,320
and have a way in run time to detect

334
00:13:40,320 --> 00:13:42,880
if they're not effective

335
00:13:42,880 --> 00:13:46,199
and then have a way of remediate and

336
00:13:46,199 --> 00:13:50,000
respond to adverse

337
00:13:50,000 --> 00:13:52,959
outcomes or adverse conditions and and

338
00:13:52,959 --> 00:13:55,519
which means that this completes the

339
00:13:55,519 --> 00:13:59,680
whole engineering pipeline

340
00:14:01,600 --> 00:14:03,519
this is just the pipeline that i i

341
00:14:03,519 --> 00:14:05,680
talked about um so

342
00:14:05,680 --> 00:14:07,519
with the um

343
00:14:07,519 --> 00:14:10,560
policies code you complete this circle

344
00:14:10,560 --> 00:14:12,959
but as a circle what's moving around the

345
00:14:12,959 --> 00:14:14,639
circle is

346
00:14:14,639 --> 00:14:16,480
actually security policy

347
00:14:16,480 --> 00:14:19,600
not just uh application code so you

348
00:14:19,600 --> 00:14:21,920
would do the same thing as you would do

349
00:14:21,920 --> 00:14:25,760
with application code you would uh and

350
00:14:25,760 --> 00:14:27,279
build it you would

351
00:14:27,279 --> 00:14:29,680
author it and test it and then you

352
00:14:29,680 --> 00:14:32,160
deploy release into the production

353
00:14:32,160 --> 00:14:33,360
environment

354
00:14:33,360 --> 00:14:36,160
and then you would monitor its

355
00:14:36,160 --> 00:14:39,440
operations collecting data and goes back

356
00:14:39,440 --> 00:14:42,399
the data and and results going back to

357
00:14:42,399 --> 00:14:43,199
the

358
00:14:43,199 --> 00:14:47,040
development stage and maybe impacting uh

359
00:14:47,040 --> 00:14:49,360
the next version of policy maybe your

360
00:14:49,360 --> 00:14:51,600
change a little bit uh and then the

361
00:14:51,600 --> 00:14:54,560
policy goes back into the um

362
00:14:54,560 --> 00:14:57,920
uh deployed environment again so um

363
00:14:57,920 --> 00:15:00,720
policies moving on this infinite eight

364
00:15:00,720 --> 00:15:05,279
figure just as application code would be

365
00:15:05,279 --> 00:15:06,160
um

366
00:15:06,160 --> 00:15:08,560
some of the characteristics um we need

367
00:15:08,560 --> 00:15:10,399
to keep those in mind

368
00:15:10,399 --> 00:15:13,440
the policies have to be declarative if

369
00:15:13,440 --> 00:15:15,680
they are not then they cannot be

370
00:15:15,680 --> 00:15:18,480
expressed statically as code so it has

371
00:15:18,480 --> 00:15:20,800
to be something that you could express

372
00:15:20,800 --> 00:15:22,720
before runtime

373
00:15:22,720 --> 00:15:23,680
um

374
00:15:23,680 --> 00:15:25,440
also

375
00:15:25,440 --> 00:15:27,360
i think the policy has to be open not

376
00:15:27,360 --> 00:15:30,000
proprietary otherwise then you cannot

377
00:15:30,000 --> 00:15:32,079
inter-operate so

378
00:15:32,079 --> 00:15:34,160
uh oppa for instance is an open

379
00:15:34,160 --> 00:15:36,320
framework but on the

380
00:15:36,320 --> 00:15:39,040
um receiving end right the target

381
00:15:39,040 --> 00:15:42,079
platform also have to have open

382
00:15:42,079 --> 00:15:45,040
capabilities to receive these policies

383
00:15:45,040 --> 00:15:47,120
could be through open apis could be

384
00:15:47,120 --> 00:15:50,079
through some kind of open standard where

385
00:15:50,079 --> 00:15:52,399
policies can be applied

386
00:15:52,399 --> 00:15:55,759
um it also has to be testable right so

387
00:15:55,759 --> 00:15:56,480
as

388
00:15:56,480 --> 00:15:59,360
as code implies it's testable but we

389
00:15:59,360 --> 00:16:01,839
have to know how exactly to test the

390
00:16:01,839 --> 00:16:04,399
security policy as code uh because the

391
00:16:04,399 --> 00:16:06,560
test condition has to be securely

392
00:16:06,560 --> 00:16:10,560
related not just any tests um and and

393
00:16:10,560 --> 00:16:13,519
lastly but and in my opinion one of the

394
00:16:13,519 --> 00:16:15,600
most important characteristics of policy

395
00:16:15,600 --> 00:16:18,160
as code is the failure condition has to

396
00:16:18,160 --> 00:16:21,600
be explicitly spelled out so that we

397
00:16:21,600 --> 00:16:22,560
know

398
00:16:22,560 --> 00:16:24,160
when things don't work

399
00:16:24,160 --> 00:16:27,600
um so these four things are the critical

400
00:16:27,600 --> 00:16:31,600
characteristics of policies code

401
00:16:31,600 --> 00:16:34,079
some of the example i i'll give a very

402
00:16:34,079 --> 00:16:36,160
simple example here there are certainly

403
00:16:36,160 --> 00:16:39,680
a ton of examples a policy has code

404
00:16:39,680 --> 00:16:41,519
let's say you want

405
00:16:41,519 --> 00:16:42,560
in

406
00:16:42,560 --> 00:16:43,839
runtime

407
00:16:43,839 --> 00:16:46,639
find all the user accounts or service

408
00:16:46,639 --> 00:16:48,880
accounts that have access to a

409
00:16:48,880 --> 00:16:51,279
particular critical resource

410
00:16:51,279 --> 00:16:52,480
and then

411
00:16:52,480 --> 00:16:56,000
completely change their access um

412
00:16:56,000 --> 00:16:58,759
from what they have today to a

413
00:16:58,759 --> 00:17:01,600
dynamically controlled a lifetime right

414
00:17:01,600 --> 00:17:03,680
a shortened ttl

415
00:17:03,680 --> 00:17:04,480
by

416
00:17:04,480 --> 00:17:06,720
giving these users and accounts a new

417
00:17:06,720 --> 00:17:08,959
dynamic access token

418
00:17:08,959 --> 00:17:10,799
with a short short

419
00:17:10,799 --> 00:17:14,400
ttl so that you can uh re-authenticate

420
00:17:14,400 --> 00:17:16,480
them and control them

421
00:17:16,480 --> 00:17:18,720
now the way to do that for instance

422
00:17:18,720 --> 00:17:20,480
these are pseudo code so don't don't

423
00:17:20,480 --> 00:17:23,199
worry about the syntax um

424
00:17:23,199 --> 00:17:26,480
you are looking at all the data across

425
00:17:26,480 --> 00:17:29,280
all the data you have says give me all

426
00:17:29,280 --> 00:17:32,640
uh the accounts that with the

427
00:17:32,640 --> 00:17:34,240
tag as

428
00:17:34,240 --> 00:17:35,440
um

429
00:17:35,440 --> 00:17:38,080
the roles and policies that's accessing

430
00:17:38,080 --> 00:17:41,039
the critical sensitive resource

431
00:17:41,039 --> 00:17:43,280
that's tagged as critical insensitive

432
00:17:43,280 --> 00:17:45,760
and and all the results the query

433
00:17:45,760 --> 00:17:47,679
results are put into this list called

434
00:17:47,679 --> 00:17:48,960
list account

435
00:17:48,960 --> 00:17:51,679
and then you do assign this temporary

436
00:17:51,679 --> 00:17:54,080
token that that you've already created

437
00:17:54,080 --> 00:17:55,600
to list account

438
00:17:55,600 --> 00:17:56,880
um

439
00:17:56,880 --> 00:17:58,559
looks fairly simple

440
00:17:58,559 --> 00:18:01,039
but you will have to have a place to go

441
00:18:01,039 --> 00:18:03,600
query this information you would have

442
00:18:03,600 --> 00:18:06,799
have a a place to say hey where's how to

443
00:18:06,799 --> 00:18:07,840
express

444
00:18:07,840 --> 00:18:08,640
the

445
00:18:08,640 --> 00:18:09,840
sign

446
00:18:09,840 --> 00:18:13,120
assignment relationship with

447
00:18:13,120 --> 00:18:15,840
um taking the data into that list

448
00:18:15,840 --> 00:18:18,799
account and then implement

449
00:18:18,799 --> 00:18:19,919
this

450
00:18:19,919 --> 00:18:22,799
um operation of giving the temporary

451
00:18:22,799 --> 00:18:25,840
token to that list

452
00:18:25,840 --> 00:18:28,880
and this is actually a live policy

453
00:18:28,880 --> 00:18:30,720
that's taken out of

454
00:18:30,720 --> 00:18:32,960
one of the policy as code

455
00:18:32,960 --> 00:18:35,520
product that i know uh that implements

456
00:18:35,520 --> 00:18:37,679
this kind of uh um

457
00:18:37,679 --> 00:18:41,120
language once you have this right so an

458
00:18:41,120 --> 00:18:43,200
example like this but there are many

459
00:18:43,200 --> 00:18:45,200
other policies you can express as

460
00:18:45,200 --> 00:18:48,480
languages you can run this periodically

461
00:18:48,480 --> 00:18:51,360
um and find everything you need and

462
00:18:51,360 --> 00:18:56,280
apply a remediation action

463
00:18:57,039 --> 00:19:00,400
the biggest benefit in my opinion is

464
00:19:00,400 --> 00:19:03,440
policies coach offers really

465
00:19:03,440 --> 00:19:06,160
manageable and and

466
00:19:06,160 --> 00:19:07,600
uh

467
00:19:07,600 --> 00:19:09,840
measurable security for the cloud

468
00:19:09,840 --> 00:19:11,200
environment

469
00:19:11,200 --> 00:19:13,280
so security program now not only

470
00:19:13,280 --> 00:19:15,360
automation management scale but you can

471
00:19:15,360 --> 00:19:18,240
measure it very precisely what the

472
00:19:18,240 --> 00:19:20,640
result is

473
00:19:20,640 --> 00:19:22,400
some of the folks are doing innovation

474
00:19:22,400 --> 00:19:25,520
work in policies code is here at the

475
00:19:25,520 --> 00:19:26,400
lower

476
00:19:26,400 --> 00:19:29,360
right you can take a look at them as

477
00:19:29,360 --> 00:19:31,520
some names probably known to you others

478
00:19:31,520 --> 00:19:34,400
are innovators in the space i'm watching

479
00:19:34,400 --> 00:19:36,000
them

480
00:19:36,000 --> 00:19:37,919
and why is this relevant for all wasps i

481
00:19:37,919 --> 00:19:39,919
think i don't have a lot of time left so

482
00:19:39,919 --> 00:19:42,080
i'm just going to quickly summarize why

483
00:19:42,080 --> 00:19:44,240
this is relevant for olas because a lot

484
00:19:44,240 --> 00:19:46,080
of these security policies are about

485
00:19:46,080 --> 00:19:48,320
security ops but why is it relevant for

486
00:19:48,320 --> 00:19:50,400
owasp um

487
00:19:50,400 --> 00:19:52,320
infrastructure's current now in

488
00:19:52,320 --> 00:19:54,400
organizations has already reached about

489
00:19:54,400 --> 00:19:57,760
millions of lines in in uh

490
00:19:57,760 --> 00:19:59,679
sophisticated organizations that taking

491
00:19:59,679 --> 00:20:02,799
advantage of those cloud automation

492
00:20:02,799 --> 00:20:05,039
once we put securities code in place how

493
00:20:05,039 --> 00:20:07,520
large do you think that will

494
00:20:07,520 --> 00:20:10,000
increase your code base

495
00:20:10,000 --> 00:20:13,200
everything is code now of course

496
00:20:13,200 --> 00:20:16,159
um as application security professionals

497
00:20:16,159 --> 00:20:18,320
we

498
00:20:18,320 --> 00:20:21,120
should know how to test the code how to

499
00:20:21,120 --> 00:20:24,159
manage the code through its lifecycle

500
00:20:24,159 --> 00:20:25,440
and all the

501
00:20:25,440 --> 00:20:27,840
sdlc principles that we've learned on

502
00:20:27,840 --> 00:20:30,240
application code should be applicable

503
00:20:30,240 --> 00:20:32,000
here with

504
00:20:32,000 --> 00:20:34,400
some tweaks right because we're looking

505
00:20:34,400 --> 00:20:35,520
at

506
00:20:35,520 --> 00:20:39,280
uh the language syntax different the um

507
00:20:39,280 --> 00:20:40,559
it's it's

508
00:20:40,559 --> 00:20:42,240
not as

509
00:20:42,240 --> 00:20:45,280
touring complete as um

510
00:20:45,280 --> 00:20:48,080
actual application code so there's some

511
00:20:48,080 --> 00:20:50,159
things uh the the characters are

512
00:20:50,159 --> 00:20:52,080
slightly different but a lot of the

513
00:20:52,080 --> 00:20:54,159
principle fundamental principles remain

514
00:20:54,159 --> 00:20:55,360
the same

515
00:20:55,360 --> 00:20:58,080
and that is why it's relevant for owasp

516
00:20:58,080 --> 00:21:00,240
and and in the industry right so i'm

517
00:21:00,240 --> 00:21:02,880
seeing as someone who's looking at early

518
00:21:02,880 --> 00:21:04,400
stage

519
00:21:04,400 --> 00:21:06,960
startups and immersion tech we see a lot

520
00:21:06,960 --> 00:21:09,360
of securities are

521
00:21:09,360 --> 00:21:11,440
moving from silo to

522
00:21:11,440 --> 00:21:14,480
developer driven and policies again is

523
00:21:14,480 --> 00:21:17,760
built into the dev and deploy pipeline

524
00:21:17,760 --> 00:21:18,640
so

525
00:21:18,640 --> 00:21:20,960
and it's happening bits and pieces but

526
00:21:20,960 --> 00:21:22,960
if we take a step back we're seeing the

527
00:21:22,960 --> 00:21:25,760
entire industry is slowly by surely

528
00:21:25,760 --> 00:21:28,840
moving to security as code and

529
00:21:28,840 --> 00:21:32,480
automation at scale

530
00:21:32,640 --> 00:21:33,440
and

531
00:21:33,440 --> 00:21:35,600
beyond automation scale

532
00:21:35,600 --> 00:21:37,840
we're looking at we're seeing

533
00:21:37,840 --> 00:21:41,280
essentially across security across iit

534
00:21:41,280 --> 00:21:42,799
across ops

535
00:21:42,799 --> 00:21:44,480
everything that

536
00:21:44,480 --> 00:21:45,440
um

537
00:21:45,440 --> 00:21:48,000
can be automated should be automated

538
00:21:48,000 --> 00:21:49,919
everything cannot be automated is where

539
00:21:49,919 --> 00:21:52,960
human can add value

540
00:21:52,960 --> 00:21:53,760
um

541
00:21:53,760 --> 00:21:55,840
and this is where the state of industry

542
00:21:55,840 --> 00:21:58,200
is and we're seeing continued we're

543
00:21:58,200 --> 00:22:00,159
continuously seeing

544
00:22:00,159 --> 00:22:01,039
this

545
00:22:01,039 --> 00:22:03,440
uh envelope being pushed things were not

546
00:22:03,440 --> 00:22:06,000
automated before are being automated and

547
00:22:06,000 --> 00:22:08,159
including security although i would say

548
00:22:08,159 --> 00:22:10,320
security is still kind of lagging behind

549
00:22:10,320 --> 00:22:12,880
in terms of whole automation game but

550
00:22:12,880 --> 00:22:15,120
securities code can help

551
00:22:15,120 --> 00:22:18,000
so with that i'm going to um

552
00:22:18,000 --> 00:22:21,120
conclude my presentation here

553
00:22:21,120 --> 00:22:22,480
is my

554
00:22:22,480 --> 00:22:25,200
contact information and

555
00:22:25,200 --> 00:22:29,039
no please um send me a question if you

556
00:22:29,039 --> 00:22:31,520
have or connect with me on linkedin

557
00:22:31,520 --> 00:22:34,000
follow me on twitter i'd love to hear

558
00:22:34,000 --> 00:22:36,720
what you are doing in security and and

559
00:22:36,720 --> 00:22:38,640
possibly you are doing something

560
00:22:38,640 --> 00:22:41,440
interesting policy is code as well so

561
00:22:41,440 --> 00:22:44,679
thank you

