1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,320 --> 00:00:10,960
uh thank you spam thanks for accepting

3
00:00:10,960 --> 00:00:13,759
my uh talk and thanks to the moderator

4
00:00:13,759 --> 00:00:15,519
organizers and pretty much everyone

5
00:00:15,519 --> 00:00:18,240
involved uh it's really a great journey

6
00:00:18,240 --> 00:00:20,160
i've been into the industry way before

7
00:00:20,160 --> 00:00:21,840
wasp and i've seen

8
00:00:21,840 --> 00:00:25,199
oas pretty much from its infancy till

9
00:00:25,199 --> 00:00:27,199
what it is now and it's really great to

10
00:00:27,199 --> 00:00:28,720
see the community has grown over the

11
00:00:28,720 --> 00:00:31,920
years um wonderful job to you know

12
00:00:31,920 --> 00:00:34,800
whoever we are behind this i you know i

13
00:00:34,800 --> 00:00:36,559
i'm not that

14
00:00:36,559 --> 00:00:39,440
lucky that or i was not very active in

15
00:00:39,440 --> 00:00:41,520
the community but then i think this is

16
00:00:41,520 --> 00:00:42,879
an amazing

17
00:00:42,879 --> 00:00:44,480
amazing accomplishment that you guys

18
00:00:44,480 --> 00:00:47,280
have achieved over the years now moving

19
00:00:47,280 --> 00:00:50,719
on to my presentation uh let me get

20
00:00:50,719 --> 00:00:53,039
started

21
00:00:53,039 --> 00:00:55,840
i'm just trying to pull up my

22
00:00:55,840 --> 00:00:57,680
slides

23
00:00:57,680 --> 00:00:59,120
okay here you go

24
00:00:59,120 --> 00:01:00,160
so

25
00:01:00,160 --> 00:01:01,840
already bhubnesh has covered my intro

26
00:01:01,840 --> 00:01:03,120
but i'll just touch upon what is

27
00:01:03,120 --> 00:01:05,600
relevant to this topic that i'm covering

28
00:01:05,600 --> 00:01:07,680
today i'm presenting on software

29
00:01:07,680 --> 00:01:09,360
security engineering

30
00:01:09,360 --> 00:01:11,680
learnings from the past to fix the

31
00:01:11,680 --> 00:01:12,720
future

32
00:01:12,720 --> 00:01:13,680
um

33
00:01:13,680 --> 00:01:14,560
so

34
00:01:14,560 --> 00:01:17,360
the large part of my uh experience come

35
00:01:17,360 --> 00:01:19,360
from research-focused background i've

36
00:01:19,360 --> 00:01:21,600
been involved in a lot of low-level

37
00:01:21,600 --> 00:01:23,280
research expert development those kind

38
00:01:23,280 --> 00:01:25,119
of stuff but the one that is more

39
00:01:25,119 --> 00:01:28,240
relevant is that i also worked in the

40
00:01:28,240 --> 00:01:30,079
security engineering side for a little

41
00:01:30,079 --> 00:01:32,000
over 10 years i've led security

42
00:01:32,000 --> 00:01:33,600
engineering center of excellence for

43
00:01:33,600 --> 00:01:35,840
mid-size and lastic companies i've

44
00:01:35,840 --> 00:01:38,079
worked closely with the multiple

45
00:01:38,079 --> 00:01:40,000
engineering teams to integrate security

46
00:01:40,000 --> 00:01:43,040
across sdlc uh lastly i'm a simple

47
00:01:43,040 --> 00:01:44,960
security guy who likes to

48
00:01:44,960 --> 00:01:46,880
solve complex security problems using

49
00:01:46,880 --> 00:01:48,640
simple methods

50
00:01:48,640 --> 00:01:49,680
moving on

51
00:01:49,680 --> 00:01:52,640
so the overall this talk i have kind of

52
00:01:52,640 --> 00:01:55,200
a broken down into four parts for easy

53
00:01:55,200 --> 00:01:56,960
understanding so i'll start with a

54
00:01:56,960 --> 00:02:00,399
history to share some historical

55
00:02:00,399 --> 00:02:03,360
uh data about the known security box

56
00:02:03,360 --> 00:02:06,240
i'll provide the reason why we still

57
00:02:06,240 --> 00:02:08,479
continue to see one to two decades all

58
00:02:08,479 --> 00:02:09,919
security bugs

59
00:02:09,919 --> 00:02:12,000
i will provide the solution this may not

60
00:02:12,000 --> 00:02:13,920
be the comprehensive solution but these

61
00:02:13,920 --> 00:02:17,040
are the two most prominent or two best

62
00:02:17,040 --> 00:02:20,640
solution i could say um to to implement

63
00:02:20,640 --> 00:02:22,879
so that these kind of bugs get taken

64
00:02:22,879 --> 00:02:25,440
care of over the years or years ahead

65
00:02:25,440 --> 00:02:26,640
and finally i'll clear some

66
00:02:26,640 --> 00:02:28,560
misconceptions around software security

67
00:02:28,560 --> 00:02:31,120
engineering

68
00:02:31,680 --> 00:02:34,640
let's start with the history

69
00:02:34,640 --> 00:02:36,239
so

70
00:02:36,239 --> 00:02:38,319
all of you most of you i would say would

71
00:02:38,319 --> 00:02:40,800
be familiar with cross-site scripting

72
00:02:40,800 --> 00:02:42,319
sql injection i don't have to give a

73
00:02:42,319 --> 00:02:44,239
definition of this but what i want to

74
00:02:44,239 --> 00:02:45,599
highlight is

75
00:02:45,599 --> 00:02:48,000
these bugs have been around since

76
00:02:48,000 --> 00:02:50,239
a very long time more than two decades

77
00:02:50,239 --> 00:02:52,560
so cross scripting was coined in the

78
00:02:52,560 --> 00:02:55,040
year the term was coined by microsoft in

79
00:02:55,040 --> 00:02:57,120
the year 2000 but it was actually

80
00:02:57,120 --> 00:02:59,440
finding found in 1990s

81
00:02:59,440 --> 00:03:00,400
um

82
00:03:00,400 --> 00:03:02,959
sql injection has got a similar history

83
00:03:02,959 --> 00:03:05,040
it was first time mentioned in uh frack

84
00:03:05,040 --> 00:03:06,560
magazine

85
00:03:06,560 --> 00:03:09,920
and dc religion bug although it has not

86
00:03:09,920 --> 00:03:11,840
been over two two decades but it's

87
00:03:11,840 --> 00:03:13,760
pretty much around the same time frame

88
00:03:13,760 --> 00:03:15,599
it was the first time it was reported

89
00:03:15,599 --> 00:03:18,000
was back in 2002

90
00:03:18,000 --> 00:03:19,440
and

91
00:03:19,440 --> 00:03:20,560
the similar

92
00:03:20,560 --> 00:03:23,040
history historic bugs you will also find

93
00:03:23,040 --> 00:03:24,159
fine for

94
00:03:24,159 --> 00:03:27,280
operating system and of os native apps

95
00:03:27,280 --> 00:03:28,799
buffer overflow everyone would be

96
00:03:28,799 --> 00:03:31,040
familiar with it um

97
00:03:31,040 --> 00:03:33,840
while pro pro may seem that it's kind of

98
00:03:33,840 --> 00:03:35,360
a taken care

99
00:03:35,360 --> 00:03:37,280
it's not really taken care of just that

100
00:03:37,280 --> 00:03:39,680
it's the mitigations are making it

101
00:03:39,680 --> 00:03:42,239
harder to exploit it's just that

102
00:03:42,239 --> 00:03:44,480
you you're not able to exploit a buffer

103
00:03:44,480 --> 00:03:46,400
successfully but it's still around it's

104
00:03:46,400 --> 00:03:48,080
just that there are so many mitigations

105
00:03:48,080 --> 00:03:49,519
around which prevent buffer overflow

106
00:03:49,519 --> 00:03:51,760
from occurring you still see race

107
00:03:51,760 --> 00:03:54,000
conditions rest conditions can affect

108
00:03:54,000 --> 00:03:56,480
both web applications and os native

109
00:03:56,480 --> 00:03:58,720
application including operating system

110
00:03:58,720 --> 00:04:01,360
but since because it was first found uh

111
00:04:01,360 --> 00:04:03,200
more at a system level i kept this

112
00:04:03,200 --> 00:04:06,640
category here um use after free pretty

113
00:04:06,640 --> 00:04:08,560
much every single year you find a user

114
00:04:08,560 --> 00:04:10,000
between a browser and an operating

115
00:04:10,000 --> 00:04:12,400
system so these these what whatever is

116
00:04:12,400 --> 00:04:15,200
uh are there since uh near about two

117
00:04:15,200 --> 00:04:18,798
decades if not exactly two decades um

118
00:04:18,798 --> 00:04:21,440
i'd like to share a little snapshot of

119
00:04:21,440 --> 00:04:23,759
all a large part of these varieties

120
00:04:23,759 --> 00:04:27,040
which have been around since 1999 now

121
00:04:27,040 --> 00:04:28,639
1999

122
00:04:28,639 --> 00:04:31,360
uh it's it's mentioned as the the first

123
00:04:31,360 --> 00:04:32,880
record it's because

124
00:04:32,880 --> 00:04:34,720
there was no record maintained prior to

125
00:04:34,720 --> 00:04:35,919
it which is why

126
00:04:35,919 --> 00:04:37,919
uh cv details have mentioned you know

127
00:04:37,919 --> 00:04:40,240
1999 here but there are

128
00:04:40,240 --> 00:04:42,240
bugs which are found even before that

129
00:04:42,240 --> 00:04:44,479
but what what is important to note here

130
00:04:44,479 --> 00:04:45,280
is

131
00:04:45,280 --> 00:04:47,840
um a lot of these bug classes are at a

132
00:04:47,840 --> 00:04:50,560
very high level it's it's broad classes

133
00:04:50,560 --> 00:04:52,720
uh you you you see things like code

134
00:04:52,720 --> 00:04:56,240
execution and then overflow bug class um

135
00:04:56,240 --> 00:04:58,240
overflow may include like a buffer flow

136
00:04:58,240 --> 00:05:00,400
stack overflow a stack overflow and a

137
00:05:00,400 --> 00:05:03,280
heap over integer overflow um memory

138
00:05:03,280 --> 00:05:05,840
corruption will have let's say uh use

139
00:05:05,840 --> 00:05:07,759
after free uh double free those kind of

140
00:05:07,759 --> 00:05:09,199
things so

141
00:05:09,199 --> 00:05:11,600
these are high level uh

142
00:05:11,600 --> 00:05:13,840
bug class names but what you are also

143
00:05:13,840 --> 00:05:14,720
seeing

144
00:05:14,720 --> 00:05:17,440
is a lot of these bugs have been around

145
00:05:17,440 --> 00:05:21,199
uh since a long time now these bugs not

146
00:05:21,199 --> 00:05:23,039
necessarily mean that

147
00:05:23,039 --> 00:05:25,520
this affect a single application or a

148
00:05:25,520 --> 00:05:28,639
single software basically these are um

149
00:05:28,639 --> 00:05:31,280
the count of the vulnerabilities

150
00:05:31,280 --> 00:05:33,199
affecting many many applications and

151
00:05:33,199 --> 00:05:35,360
software across the globe right so but

152
00:05:35,360 --> 00:05:37,199
you get an idea that these bugs have

153
00:05:37,199 --> 00:05:39,120
been around from from a very very long

154
00:05:39,120 --> 00:05:39,919
time

155
00:05:39,919 --> 00:05:42,639
so the conclusion here is one of the

156
00:05:42,639 --> 00:05:45,199
thing i got to my mind is

157
00:05:45,199 --> 00:05:47,440
what is so wrong with the industry that

158
00:05:47,440 --> 00:05:49,280
we have been seeing these kind of bugs

159
00:05:49,280 --> 00:05:50,960
from a very very long time why it has

160
00:05:50,960 --> 00:05:53,520
not been taken care which basically is

161
00:05:53,520 --> 00:05:55,680
underlying the fact that something is

162
00:05:55,680 --> 00:05:57,919
really not right with the way we are

163
00:05:57,919 --> 00:06:00,560
approaching uh towards tackling these

164
00:06:00,560 --> 00:06:02,800
kind of bugs and we'll find out why and

165
00:06:02,800 --> 00:06:05,759
how uh in the following slides

166
00:06:05,759 --> 00:06:07,840
moving on

167
00:06:07,840 --> 00:06:09,840
so the big question why do we continue

168
00:06:09,840 --> 00:06:12,960
to see one to two decades old security

169
00:06:12,960 --> 00:06:15,280
works

170
00:06:16,000 --> 00:06:17,600
so well

171
00:06:17,600 --> 00:06:20,319
that could be many reasons but for the

172
00:06:20,319 --> 00:06:21,840
sake of time

173
00:06:21,840 --> 00:06:24,240
i cannot go on you know talking about

174
00:06:24,240 --> 00:06:26,639
all the reasons i know but i will i have

175
00:06:26,639 --> 00:06:29,280
only picked two most prominent reason

176
00:06:29,280 --> 00:06:31,520
which actually is the main or i would

177
00:06:31,520 --> 00:06:35,360
say the main root cause for uh you know

178
00:06:35,360 --> 00:06:36,160
for

179
00:06:36,160 --> 00:06:37,600
all these bugs that we have been seeing

180
00:06:37,600 --> 00:06:40,479
from a very very long time and i'll i'll

181
00:06:40,479 --> 00:06:44,000
expand on each of those reasons

182
00:06:44,000 --> 00:06:46,319
now before we dive into each of those

183
00:06:46,319 --> 00:06:47,440
reasons

184
00:06:47,440 --> 00:06:50,960
the the two most prominent reasons are

185
00:06:50,960 --> 00:06:53,199
obscured within the way

186
00:06:53,199 --> 00:06:55,759
the vast majority of the organization

187
00:06:55,759 --> 00:06:58,800
respond to a bug reported a bug report

188
00:06:58,800 --> 00:07:00,960
of the application and software that

189
00:07:00,960 --> 00:07:03,280
they are responsible for supporting and

190
00:07:03,280 --> 00:07:05,280
they are not responsible for supporting

191
00:07:05,280 --> 00:07:07,120
so what this means is

192
00:07:07,120 --> 00:07:10,160
now i'll expand one by one like reason

193
00:07:10,160 --> 00:07:11,440
number one

194
00:07:11,440 --> 00:07:12,560
is

195
00:07:12,560 --> 00:07:13,440
when you

196
00:07:13,440 --> 00:07:16,080
uh when you get a bug report for for a

197
00:07:16,080 --> 00:07:18,880
software that you are responsible for

198
00:07:18,880 --> 00:07:20,720
right the first one is let's pick this

199
00:07:20,720 --> 00:07:22,720
first one here that you are responsible

200
00:07:22,720 --> 00:07:25,039
for a software that you support you

201
00:07:25,039 --> 00:07:27,680
maintain and

202
00:07:27,680 --> 00:07:30,560
you sort of uh you get a bug report

203
00:07:30,560 --> 00:07:32,080
either through a penetration testing

204
00:07:32,080 --> 00:07:35,520
company or a bug bounty hunter you know

205
00:07:35,520 --> 00:07:38,240
submitted a bug report um or you get it

206
00:07:38,240 --> 00:07:39,440
through some other source or your

207
00:07:39,440 --> 00:07:41,599
internal team finds those bugs

208
00:07:41,599 --> 00:07:43,199
there are three major way people will

209
00:07:43,199 --> 00:07:45,280
respond to it there are three major way

210
00:07:45,280 --> 00:07:47,919
people respond to how to fix those bugs

211
00:07:47,919 --> 00:07:50,319
so you fix exactly what is reported

212
00:07:50,319 --> 00:07:52,479
or you fix exactly what is reported

213
00:07:52,479 --> 00:07:54,400
including any other instances of the

214
00:07:54,400 --> 00:07:55,520
same bug

215
00:07:55,520 --> 00:07:58,879
or you fix based on a risk rating

216
00:07:58,879 --> 00:08:00,879
high medium or low well this may look

217
00:08:00,879 --> 00:08:01,919
fine

218
00:08:01,919 --> 00:08:03,520
but

219
00:08:03,520 --> 00:08:06,160
there are some disadvantages associated

220
00:08:06,160 --> 00:08:09,120
with such mitigation strategies so

221
00:08:09,120 --> 00:08:10,840
let's talk about each of those

222
00:08:10,840 --> 00:08:13,680
disadvantages uh corresponding to

223
00:08:13,680 --> 00:08:16,160
uh the common mitigation strategy so

224
00:08:16,160 --> 00:08:18,400
let's say you get a bug report you go

225
00:08:18,400 --> 00:08:21,440
and fix the bug but do not check

226
00:08:21,440 --> 00:08:23,680
other instances of the or variance of

227
00:08:23,680 --> 00:08:25,680
the same bug in the same application

228
00:08:25,680 --> 00:08:26,560
right

229
00:08:26,560 --> 00:08:27,919
so

230
00:08:27,919 --> 00:08:30,479
the disadvantage here is you are likely

231
00:08:30,479 --> 00:08:32,719
to miss other instances and variants of

232
00:08:32,719 --> 00:08:34,240
the same work in the application if they

233
00:08:34,240 --> 00:08:36,080
exist right so you just fix what is

234
00:08:36,080 --> 00:08:38,000
reported but you didn't care to fix

235
00:08:38,000 --> 00:08:39,760
other instances and variants in the same

236
00:08:39,760 --> 00:08:41,360
application

237
00:08:41,360 --> 00:08:44,080
the second one is you fix

238
00:08:44,080 --> 00:08:46,080
the second approach is you fix all

239
00:08:46,080 --> 00:08:47,279
instances

240
00:08:47,279 --> 00:08:49,120
and the variance of a particular bug in

241
00:08:49,120 --> 00:08:51,760
an application but you do not check

242
00:08:51,760 --> 00:08:53,920
whether the same bugs

243
00:08:53,920 --> 00:08:55,680
also exist in other applications that

244
00:08:55,680 --> 00:08:58,320
you support you did not share that intel

245
00:08:58,320 --> 00:08:59,519
with other

246
00:08:59,519 --> 00:09:01,360
dev teams that you have

247
00:09:01,360 --> 00:09:03,279
and share that knowledge that hey can

248
00:09:03,279 --> 00:09:05,440
you go and check if this is the kind of

249
00:09:05,440 --> 00:09:07,120
work that may exist in your application

250
00:09:07,120 --> 00:09:08,959
you didn't do that but you only fixed

251
00:09:08,959 --> 00:09:10,480
for the application that you identified

252
00:09:10,480 --> 00:09:12,240
those bugs and you fixed those so the

253
00:09:12,240 --> 00:09:14,560
problem is again you are likely to miss

254
00:09:14,560 --> 00:09:16,880
instances and variants of the same bug

255
00:09:16,880 --> 00:09:19,279
in other applications that you support

256
00:09:19,279 --> 00:09:20,720
the third most

257
00:09:20,720 --> 00:09:22,800
you know common uh approach for

258
00:09:22,800 --> 00:09:25,600
mitigation is you fix based on a certain

259
00:09:25,600 --> 00:09:27,680
risk rating whether it's a critical high

260
00:09:27,680 --> 00:09:29,839
medium whatever the rating could be cbs

261
00:09:29,839 --> 00:09:31,360
rating and all of that

262
00:09:31,360 --> 00:09:34,000
you fix based on the top ratings and you

263
00:09:34,000 --> 00:09:36,560
kind of park the lower rating is low

264
00:09:36,560 --> 00:09:37,920
rated issues

265
00:09:37,920 --> 00:09:38,640
and

266
00:09:38,640 --> 00:09:41,440
when you do that so what happened is we

267
00:09:41,440 --> 00:09:43,920
have seen historically uh there are

268
00:09:43,920 --> 00:09:45,920
enough evidences where

269
00:09:45,920 --> 00:09:48,320
low hanging so called low hanging bugs

270
00:09:48,320 --> 00:09:50,240
are a trivial looking bugs can be

271
00:09:50,240 --> 00:09:52,880
changed together to perform more

272
00:09:52,880 --> 00:09:55,680
practical attacks so

273
00:09:55,680 --> 00:09:58,640
that said what it basically means is

274
00:09:58,640 --> 00:10:01,200
if these are your mitigation strategies

275
00:10:01,200 --> 00:10:02,480
if these are the strategies that

276
00:10:02,480 --> 00:10:05,440
resonate with your mitigation approach

277
00:10:05,440 --> 00:10:08,000
then you are far from any kind of

278
00:10:08,000 --> 00:10:09,920
software resilience against known

279
00:10:09,920 --> 00:10:11,760
security bugs now when i'm talking about

280
00:10:11,760 --> 00:10:14,399
known security bulk account that we saw

281
00:10:14,399 --> 00:10:16,079
in the cv side

282
00:10:16,079 --> 00:10:18,800
now when you say it's just your bug it's

283
00:10:18,800 --> 00:10:21,519
not uh going to affect anyone else well

284
00:10:21,519 --> 00:10:23,519
you're probably wrong because your

285
00:10:23,519 --> 00:10:25,440
application could be used by everyone

286
00:10:25,440 --> 00:10:28,079
else now your bug is basically

287
00:10:28,079 --> 00:10:30,240
contributing to that global number as

288
00:10:30,240 --> 00:10:32,399
well so when you say your box no one

289
00:10:32,399 --> 00:10:34,000
should really be bothered

290
00:10:34,000 --> 00:10:35,360
your box is also in your way

291
00:10:35,360 --> 00:10:38,079
contributing to that global number right

292
00:10:38,079 --> 00:10:40,800
now moving on to the second reason

293
00:10:40,800 --> 00:10:42,640
the second reason is

294
00:10:42,640 --> 00:10:43,839
um

295
00:10:43,839 --> 00:10:47,519
the way the industry respond to any

296
00:10:47,519 --> 00:10:49,760
publicly reported security bug right so

297
00:10:49,760 --> 00:10:52,160
microsoft release a patch or a release

298
00:10:52,160 --> 00:10:54,880
an advisory um google released an

299
00:10:54,880 --> 00:10:57,279
advisory or apple religion advisory so

300
00:10:57,279 --> 00:10:59,200
what you do is the typical approach is

301
00:10:59,200 --> 00:11:00,880
you see a

302
00:11:00,880 --> 00:11:04,000
report and then you check whether it

303
00:11:04,000 --> 00:11:06,560
affects your application or software and

304
00:11:06,560 --> 00:11:09,360
uh if it's no then you think it's not

305
00:11:09,360 --> 00:11:10,480
your problem

306
00:11:10,480 --> 00:11:12,880
and you you sort of move on and everyone

307
00:11:12,880 --> 00:11:16,160
is happy but if it affects your software

308
00:11:16,160 --> 00:11:18,399
then you go and triage the bug you

309
00:11:18,399 --> 00:11:21,120
assess the risk rating and you identify

310
00:11:21,120 --> 00:11:23,360
with this critical or high if it's

311
00:11:23,360 --> 00:11:25,440
critical and high go ahead and

312
00:11:25,440 --> 00:11:27,839
release a urgent fix make a public

313
00:11:27,839 --> 00:11:30,240
advisory and everyone is happy if that

314
00:11:30,240 --> 00:11:32,720
is not the case then you sort of a plan

315
00:11:32,720 --> 00:11:35,440
for a mitigation at a later stage so if

316
00:11:35,440 --> 00:11:37,200
it's a low risk or a medium risk as i

317
00:11:37,200 --> 00:11:38,720
just said people will generally park it

318
00:11:38,720 --> 00:11:41,200
for future fixing and you

319
00:11:41,200 --> 00:11:42,720
after fixing you release a patch

320
00:11:42,720 --> 00:11:44,160
everyone is happy right that's a very

321
00:11:44,160 --> 00:11:45,600
typical approach

322
00:11:45,600 --> 00:11:48,079
now while path a

323
00:11:48,079 --> 00:11:51,360
uh response to security bug is quite

324
00:11:51,360 --> 00:11:54,720
common it may looks very obvious

325
00:11:54,720 --> 00:11:56,560
sorry it may look very common

326
00:11:56,560 --> 00:11:58,079
part b

327
00:11:58,079 --> 00:12:00,639
while it may look very obvious this is

328
00:12:00,639 --> 00:12:03,120
exactly where the reason is hidden that

329
00:12:03,120 --> 00:12:05,279
why we still continue to see

330
00:12:05,279 --> 00:12:08,000
uh you know so many bucks over the years

331
00:12:08,000 --> 00:12:10,480
and i'll expand over it uh in the

332
00:12:10,480 --> 00:12:12,000
following slides

333
00:12:12,000 --> 00:12:13,519
moving on

334
00:12:13,519 --> 00:12:15,040
now

335
00:12:15,040 --> 00:12:17,519
this is the solution section i i i

336
00:12:17,519 --> 00:12:19,200
mentioned in the beginning you know i've

337
00:12:19,200 --> 00:12:22,240
broken down into problem uh history

338
00:12:22,240 --> 00:12:23,920
problem and the solution so in the

339
00:12:23,920 --> 00:12:26,160
solution i'm going to expand on what

340
00:12:26,160 --> 00:12:29,200
that path b means

341
00:12:29,200 --> 00:12:30,720
so

342
00:12:30,720 --> 00:12:32,639
learnings from the past the title as i

343
00:12:32,639 --> 00:12:34,800
said learnings from the past to fix the

344
00:12:34,800 --> 00:12:37,440
future so here is learning number one

345
00:12:37,440 --> 00:12:39,839
the learning from the historical records

346
00:12:39,839 --> 00:12:41,920
of all the known bugs

347
00:12:41,920 --> 00:12:44,399
now before i dive into

348
00:12:44,399 --> 00:12:45,440
uh

349
00:12:45,440 --> 00:12:48,000
mentioning uh what that learning is i

350
00:12:48,000 --> 00:12:50,240
like to highl bring your attention to a

351
00:12:50,240 --> 00:12:52,639
difference between above class and buck

352
00:12:52,639 --> 00:12:54,560
nature because that is relevant in the

353
00:12:54,560 --> 00:12:58,000
following slide so a class of a bug

354
00:12:58,000 --> 00:12:59,680
uh is something that you are familiar

355
00:12:59,680 --> 00:13:01,760
with like os top in cross-site

356
00:13:01,760 --> 00:13:04,079
strippings sql injection these are the

357
00:13:04,079 --> 00:13:06,720
class of a bug it basically described in

358
00:13:06,720 --> 00:13:09,120
a way a particular bug is exploited so

359
00:13:09,120 --> 00:13:11,200
when you hear cross-eyed scripting it

360
00:13:11,200 --> 00:13:13,360
doesn't imply immediately

361
00:13:13,360 --> 00:13:14,720
what the root cause is if someone

362
00:13:14,720 --> 00:13:16,160
doesn't know what a crosstalk scripting

363
00:13:16,160 --> 00:13:17,600
is they hear process scripting for the

364
00:13:17,600 --> 00:13:18,959
first time they could probably make a

365
00:13:18,959 --> 00:13:21,040
guess that it probably has to do

366
00:13:21,040 --> 00:13:23,519
something with uh scripting right you

367
00:13:23,519 --> 00:13:25,120
cannot make a guess that it has got

368
00:13:25,120 --> 00:13:27,360
something to do with input validation

369
00:13:27,360 --> 00:13:30,320
because in the name it doesn't say that

370
00:13:30,320 --> 00:13:32,880
so the class of the bug is more if you

371
00:13:32,880 --> 00:13:35,200
actually see all the class names uh vast

372
00:13:35,200 --> 00:13:37,519
majority of the class name that they

373
00:13:37,519 --> 00:13:40,160
kind of sort of imply the way the

374
00:13:40,160 --> 00:13:42,560
particular bug is exploited or it is its

375
00:13:42,560 --> 00:13:44,480
resulting impact when you say sql

376
00:13:44,480 --> 00:13:46,560
injection it doesn't say that you are

377
00:13:46,560 --> 00:13:48,399
missing parameterized queries it doesn't

378
00:13:48,399 --> 00:13:51,839
say that you are running dynamic uh

379
00:13:51,839 --> 00:13:54,639
query it says that sql injection it has

380
00:13:54,639 --> 00:13:56,240
got something to do with the injections

381
00:13:56,240 --> 00:13:58,880
it's the way you exploit the bug the

382
00:13:58,880 --> 00:14:01,120
nature of the bug is primarily relates

383
00:14:01,120 --> 00:14:02,959
to its root cause it may look like that

384
00:14:02,959 --> 00:14:04,959
i sort of coined this term

385
00:14:04,959 --> 00:14:06,560
but you will be able to relate to it

386
00:14:06,560 --> 00:14:09,120
what i'm saying in the following slides

387
00:14:09,120 --> 00:14:12,160
so i i must admit honestly that i was

388
00:14:12,160 --> 00:14:14,000
trying to find a good name for it and

389
00:14:14,000 --> 00:14:17,199
and this is what that came to me that

390
00:14:17,199 --> 00:14:19,040
you know and nature is something like if

391
00:14:19,040 --> 00:14:20,720
you can say that i'm from so-and-so

392
00:14:20,720 --> 00:14:23,360
country that's your class uh or yeah i'm

393
00:14:23,360 --> 00:14:25,360
from source origin that's your class

394
00:14:25,360 --> 00:14:27,360
nature is your your characteristic right

395
00:14:27,360 --> 00:14:28,240
so

396
00:14:28,240 --> 00:14:30,000
looking at those things i try to relate

397
00:14:30,000 --> 00:14:32,000
that to a bug and i sort of came up with

398
00:14:32,000 --> 00:14:34,720
this name it it may not resonate with

399
00:14:34,720 --> 00:14:36,320
you but i thought that's that's the only

400
00:14:36,320 --> 00:14:38,639
thing i could come up with now

401
00:14:38,639 --> 00:14:40,480
uh i already talked about cross-site

402
00:14:40,480 --> 00:14:42,399
scripting and sql injection what's the

403
00:14:42,399 --> 00:14:45,760
difference between class and

404
00:14:45,760 --> 00:14:48,560
sorry class and the root cause and the

405
00:14:48,560 --> 00:14:51,680
uh bug nature now moving on here is some

406
00:14:51,680 --> 00:14:53,040
more examples i'm not going to go

407
00:14:53,040 --> 00:14:54,880
through each one of these but i already

408
00:14:54,880 --> 00:14:56,480
covered process scripting and sql

409
00:14:56,480 --> 00:14:58,240
injection but just to give you one

410
00:14:58,240 --> 00:14:59,839
example here the rest i will leave it

411
00:14:59,839 --> 00:15:02,000
for your reading um you any of the

412
00:15:02,000 --> 00:15:03,519
slides are going to be available the

413
00:15:03,519 --> 00:15:05,040
videos are going to be available but

414
00:15:05,040 --> 00:15:06,480
just let's take a look at how you need

415
00:15:06,480 --> 00:15:08,880
to translate the meaning of the class

416
00:15:08,880 --> 00:15:11,760
to its corresponding bug cause and bug

417
00:15:11,760 --> 00:15:13,519
nature and why i'm doing this you will

418
00:15:13,519 --> 00:15:16,079
find out in the following slides so sql

419
00:15:16,079 --> 00:15:18,160
injection can be translated into a very

420
00:15:18,160 --> 00:15:20,800
simple meaning that when attempted

421
00:15:20,800 --> 00:15:23,839
inputs become command right so you your

422
00:15:23,839 --> 00:15:25,279
input becomes command that's when

423
00:15:25,279 --> 00:15:27,440
execute injection occur a very simple

424
00:15:27,440 --> 00:15:29,600
meaning a very simple definition of root

425
00:15:29,600 --> 00:15:30,639
cause

426
00:15:30,639 --> 00:15:32,800
now if you have to put in the bug nature

427
00:15:32,800 --> 00:15:34,560
it's basically an injection flow at an

428
00:15:34,560 --> 00:15:37,440
abstract level and it is also insecure

429
00:15:37,440 --> 00:15:39,519
interpretation of the input

430
00:15:39,519 --> 00:15:41,279
right cross-site scripting has got a

431
00:15:41,279 --> 00:15:44,560
similar title uh sorry a similar root

432
00:15:44,560 --> 00:15:46,959
cause when the tainted input becomes

433
00:15:46,959 --> 00:15:49,759
output without sanitization and the bug

434
00:15:49,759 --> 00:15:52,160
nature is an injection flow right now

435
00:15:52,160 --> 00:15:53,920
moving on i'll keep the rest for you to

436
00:15:53,920 --> 00:15:56,560
read later um they will be available on

437
00:15:56,560 --> 00:15:58,399
your video and your slides should be

438
00:15:58,399 --> 00:16:00,800
available online um

439
00:16:00,800 --> 00:16:01,680
so

440
00:16:01,680 --> 00:16:02,880
the way

441
00:16:02,880 --> 00:16:05,839
the industry must respond to a

442
00:16:05,839 --> 00:16:08,639
publicly reported bugs so we'll expand

443
00:16:08,639 --> 00:16:11,519
on path b which i mentioned is the

444
00:16:11,519 --> 00:16:13,920
the main reason where the root cause

445
00:16:13,920 --> 00:16:15,440
lies

446
00:16:15,440 --> 00:16:16,560
is

447
00:16:16,560 --> 00:16:20,079
when when you receive a security bug

448
00:16:20,079 --> 00:16:22,160
you first check does it affect your

449
00:16:22,160 --> 00:16:23,920
application or software

450
00:16:23,920 --> 00:16:26,720
right and if if you think it's no it

451
00:16:26,720 --> 00:16:29,600
doesn't affect then try to identify the

452
00:16:29,600 --> 00:16:31,839
nature of the bug so you try to

453
00:16:31,839 --> 00:16:34,399
you know try to dissect further down

454
00:16:34,399 --> 00:16:36,240
deep dive and try to identify the nature

455
00:16:36,240 --> 00:16:38,639
of the world but verify whether your

456
00:16:38,639 --> 00:16:40,800
application has a functionality

457
00:16:40,800 --> 00:16:43,120
or a process that can be affected by a

458
00:16:43,120 --> 00:16:45,040
similar nature bug

459
00:16:45,040 --> 00:16:47,360
and if it affects your application then

460
00:16:47,360 --> 00:16:49,680
you obviously have to go and attempt to

461
00:16:49,680 --> 00:16:52,720
fix it and release a

462
00:16:52,720 --> 00:16:54,800
release a patch if it know then

463
00:16:54,800 --> 00:16:57,519
perfectly fine everyone is happy right

464
00:16:57,519 --> 00:17:00,720
the other other part of the path is the

465
00:17:00,720 --> 00:17:02,160
pathway which i already covered i'm not

466
00:17:02,160 --> 00:17:04,720
going to cover that here but essentially

467
00:17:04,720 --> 00:17:06,559
this is how the industry should respond

468
00:17:06,559 --> 00:17:08,240
to and which is fair

469
00:17:08,240 --> 00:17:10,880
is one of the main reason i'll show one

470
00:17:10,880 --> 00:17:14,000
example here and we'll dissect one uh

471
00:17:14,000 --> 00:17:16,319
bug as an example

472
00:17:16,319 --> 00:17:19,520
so here is bug uh from the year 2000

473
00:17:19,520 --> 00:17:22,918
this is ms-0083

474
00:17:23,039 --> 00:17:26,319
right and if you read here um

475
00:17:26,319 --> 00:17:30,000
cv sorry ms-0083

476
00:17:30,000 --> 00:17:32,640
it reads like it's a buffer upload

477
00:17:32,640 --> 00:17:35,520
in the http protocol parser or microsoft

478
00:17:35,520 --> 00:17:37,919
network monitor allows remote attackers

479
00:17:37,919 --> 00:17:38,799
to

480
00:17:38,799 --> 00:17:40,799
execute arbitrary commands via the

481
00:17:40,799 --> 00:17:44,080
malform data also known as the netmon

482
00:17:44,080 --> 00:17:47,360
protocol passing vulnerability right

483
00:17:47,360 --> 00:17:50,000
so the first time you read it the first

484
00:17:50,000 --> 00:17:51,600
thing that comes to your mind is this is

485
00:17:51,600 --> 00:17:54,000
microsoft bug not my problem i'm going

486
00:17:54,000 --> 00:17:56,400
to wait for them to come and release a

487
00:17:56,400 --> 00:17:58,720
patch i'm going to install it i'm happy

488
00:17:58,720 --> 00:18:00,559
because this is not my problem

489
00:18:00,559 --> 00:18:02,320
now if you read it thoroughly if you

490
00:18:02,320 --> 00:18:04,960
read it carefully you first see is it's

491
00:18:04,960 --> 00:18:08,000
a buffer overflow right and again you

492
00:18:08,000 --> 00:18:10,160
still think it's a microsoft bug you

493
00:18:10,160 --> 00:18:11,520
still have don't have to worry about it

494
00:18:11,520 --> 00:18:13,200
but if you read further

495
00:18:13,200 --> 00:18:15,600
and try to decipher

496
00:18:15,600 --> 00:18:16,400
you

497
00:18:16,400 --> 00:18:18,480
you surface start to read

498
00:18:18,480 --> 00:18:19,360
that

499
00:18:19,360 --> 00:18:20,960
you know it still has something to do

500
00:18:20,960 --> 00:18:22,720
with uh passing because i'm reading

501
00:18:22,720 --> 00:18:24,640
something here called it's a network

502
00:18:24,640 --> 00:18:27,280
netmon protocol passing so now i'm i'm

503
00:18:27,280 --> 00:18:30,320
getting a little deep down beyond just

504
00:18:30,320 --> 00:18:32,080
buffer process buffer overflow is the

505
00:18:32,080 --> 00:18:33,520
class name

506
00:18:33,520 --> 00:18:36,080
here but here is the nature of the bug

507
00:18:36,080 --> 00:18:37,360
is starting to

508
00:18:37,360 --> 00:18:39,840
uh get exposed right so you are starting

509
00:18:39,840 --> 00:18:41,600
to read something called passing

510
00:18:41,600 --> 00:18:44,320
vulnerability so let's go through the

511
00:18:44,320 --> 00:18:46,160
flow chart here like how you basically

512
00:18:46,160 --> 00:18:47,280
need to

513
00:18:47,280 --> 00:18:49,840
get a meaning out of those uh bug

514
00:18:49,840 --> 00:18:52,160
reports that you see publicly now if i

515
00:18:52,160 --> 00:18:53,760
have to do a root cause analysis of this

516
00:18:53,760 --> 00:18:55,520
book first i'll try to identify the bug

517
00:18:55,520 --> 00:18:57,200
plus which is basically

518
00:18:57,200 --> 00:18:59,520
buffer overflow then you try to identify

519
00:18:59,520 --> 00:19:00,799
the root cause

520
00:19:00,799 --> 00:19:03,200
and the root cause here is buffer opera

521
00:19:03,200 --> 00:19:05,440
due to several unchecked buffers in the

522
00:19:05,440 --> 00:19:07,679
protocol parts right and then further

523
00:19:07,679 --> 00:19:10,160
deep down you try to dissect it then you

524
00:19:10,160 --> 00:19:12,799
sort of uh separate the meaning here the

525
00:19:12,799 --> 00:19:14,480
nature of the bug is a passing

526
00:19:14,480 --> 00:19:17,440
vulnerability and the attack vector is a

527
00:19:17,440 --> 00:19:19,440
parser functionality this is very

528
00:19:19,440 --> 00:19:22,799
important parser functionality right now

529
00:19:22,799 --> 00:19:24,880
now from the buffer workflow till parcel

530
00:19:24,880 --> 00:19:26,799
functionality we are here and then the

531
00:19:26,799 --> 00:19:29,039
conclusion basically it implies is

532
00:19:29,039 --> 00:19:32,080
now if you see a number of such bugs

533
00:19:32,080 --> 00:19:34,880
across different parts of functionality

534
00:19:34,880 --> 00:19:37,520
basically means things can get really go

535
00:19:37,520 --> 00:19:39,840
wrong with the password functionality so

536
00:19:39,840 --> 00:19:43,039
the way to look at this bug now is to go

537
00:19:43,039 --> 00:19:45,280
and check in your application

538
00:19:45,280 --> 00:19:47,600
do you implement any kind of password

539
00:19:47,600 --> 00:19:50,559
functionality is it passing json is it

540
00:19:50,559 --> 00:19:54,240
parsing file is it passing um paths is

541
00:19:54,240 --> 00:19:57,039
it passing protocol um is it passing

542
00:19:57,039 --> 00:19:58,640
anything basically it's just a password

543
00:19:58,640 --> 00:20:01,440
it's a passing image right so you go and

544
00:20:01,440 --> 00:20:03,280
check whether you are having the image

545
00:20:03,280 --> 00:20:04,960
rendering functionality you go and check

546
00:20:04,960 --> 00:20:07,039
whether you have a json parser

547
00:20:07,039 --> 00:20:08,320
functionality go and check whether you

548
00:20:08,320 --> 00:20:10,240
have a network forecasting functionality

549
00:20:10,240 --> 00:20:12,159
right and if yes

550
00:20:12,159 --> 00:20:13,919
then you need to thoroughly test all

551
00:20:13,919 --> 00:20:16,240
those instances of those partial

552
00:20:16,240 --> 00:20:17,760
functionality get a thorough testing

553
00:20:17,760 --> 00:20:19,520
done and you would be surprised to see

554
00:20:19,520 --> 00:20:21,840
how many issues you find out if you get

555
00:20:21,840 --> 00:20:24,240
get it professionally tested right and

556
00:20:24,240 --> 00:20:26,640
what you need to do next is you need to

557
00:20:26,640 --> 00:20:29,760
maintain attack vectors database so that

558
00:20:29,760 --> 00:20:31,520
you don't lose that intel that you just

559
00:20:31,520 --> 00:20:33,679
dissected or invested so much time you

560
00:20:33,679 --> 00:20:35,679
don't lose that information so all you

561
00:20:35,679 --> 00:20:37,280
need to maintain is

562
00:20:37,280 --> 00:20:40,480
this you know a parser functionality can

563
00:20:40,480 --> 00:20:42,799
be an attack practice and

564
00:20:42,799 --> 00:20:44,640
these are the known set of epochs since

565
00:20:44,640 --> 00:20:47,200
uh like 2000 and these are the way

566
00:20:47,200 --> 00:20:49,200
people have been exploiting exploiting

567
00:20:49,200 --> 00:20:51,440
it so that in future or in the current

568
00:20:51,440 --> 00:20:53,039
situation if you are doing any design

569
00:20:53,039 --> 00:20:55,760
changes or in future you are trying to

570
00:20:55,760 --> 00:20:57,760
make any future design changes for the

571
00:20:57,760 --> 00:20:59,840
future applications then you can always

572
00:20:59,840 --> 00:21:01,520
refer back to this attack vector

573
00:21:01,520 --> 00:21:03,679
database so that you don't make such

574
00:21:03,679 --> 00:21:06,559
mistakes right and if it doesn't affect

575
00:21:06,559 --> 00:21:09,039
your application you still need to

576
00:21:09,039 --> 00:21:11,039
maintain those records because

577
00:21:11,039 --> 00:21:13,200
in future you may you never know you

578
00:21:13,200 --> 00:21:15,039
could implement a similar functionality

579
00:21:15,039 --> 00:21:16,400
in your application so it's very

580
00:21:16,400 --> 00:21:17,600
important to

581
00:21:17,600 --> 00:21:20,080
not to lose that intel that you invested

582
00:21:20,080 --> 00:21:22,159
time to dissect and come all the way

583
00:21:22,159 --> 00:21:24,720
here moving on

584
00:21:24,720 --> 00:21:26,720
so these are some more examples about

585
00:21:26,720 --> 00:21:28,320
parsing uh

586
00:21:28,320 --> 00:21:30,880
functionality now that there are these

587
00:21:30,880 --> 00:21:31,760
are

588
00:21:31,760 --> 00:21:34,240
since here like ms-04 basically means

589
00:21:34,240 --> 00:21:37,200
that it's in the year 2004 they released

590
00:21:37,200 --> 00:21:40,640
the advisory uh ms-00 uh means basically

591
00:21:40,640 --> 00:21:43,520
it's it was released in the year 2000

592
00:21:43,520 --> 00:21:47,280
again cv 2004 means it's a year 2004 bug

593
00:21:47,280 --> 00:21:50,559
uh and same thing so if you see these

594
00:21:50,559 --> 00:21:53,280
are categories based on file passing

595
00:21:53,280 --> 00:21:55,280
vulnerabilities protocol parsing and

596
00:21:55,280 --> 00:21:56,640
path passing vulnerabilities but the

597
00:21:56,640 --> 00:21:58,559
name that you read here

598
00:21:58,559 --> 00:22:01,760
you uh you will never uh you know

599
00:22:01,760 --> 00:22:04,159
think that okay i could these are the

600
00:22:04,159 --> 00:22:05,760
kind of a bugs that could relate to your

601
00:22:05,760 --> 00:22:08,240
application but as you deep dive and try

602
00:22:08,240 --> 00:22:10,640
to dissect each of these bugs you will

603
00:22:10,640 --> 00:22:13,200
realize that it will point to some

604
00:22:13,200 --> 00:22:15,840
design mistake it will point to some uh

605
00:22:15,840 --> 00:22:18,080
root cause that that is something that

606
00:22:18,080 --> 00:22:20,159
you need to map it with your application

607
00:22:20,159 --> 00:22:22,320
to see whether your application has got

608
00:22:22,320 --> 00:22:24,320
a similar functionality so all of these

609
00:22:24,320 --> 00:22:27,360
bugs are screaming that hey we are

610
00:22:27,360 --> 00:22:30,159
awesome problems and things can really

611
00:22:30,159 --> 00:22:32,240
go bad with parser so you need to go and

612
00:22:32,240 --> 00:22:33,039
check

613
00:22:33,039 --> 00:22:34,320
if you are implementing a password

614
00:22:34,320 --> 00:22:35,840
functionality so the recommendations

615
00:22:35,840 --> 00:22:38,000
here is

616
00:22:38,000 --> 00:22:39,200
now

617
00:22:39,200 --> 00:22:41,440
uh you need to do a comping operation

618
00:22:41,440 --> 00:22:42,720
it's hard

619
00:22:42,720 --> 00:22:45,039
but it's not impossible you need to go

620
00:22:45,039 --> 00:22:48,159
and go back in back to the cv databases

621
00:22:48,159 --> 00:22:50,240
and pretty much all the databases that

622
00:22:50,240 --> 00:22:51,919
has been maintaining historic records

623
00:22:51,919 --> 00:22:53,280
above the bugs

624
00:22:53,280 --> 00:22:55,919
you also need to refer to expert db or

625
00:22:55,919 --> 00:22:57,760
any kind of expert database which is

626
00:22:57,760 --> 00:23:00,559
current um because sometimes there are

627
00:23:00,559 --> 00:23:02,000
exploit switch

628
00:23:02,000 --> 00:23:04,720
for applications which may not have a cv

629
00:23:04,720 --> 00:23:06,320
um at least i have seen some some of

630
00:23:06,320 --> 00:23:07,840
those applications so i don't remember

631
00:23:07,840 --> 00:23:09,120
all of those but all of those

632
00:23:09,120 --> 00:23:11,440
applications but that those are there so

633
00:23:11,440 --> 00:23:13,360
what you need to do is you need to refer

634
00:23:13,360 --> 00:23:14,960
to all the cv databases you need to

635
00:23:14,960 --> 00:23:16,799
report exploit databases you need to

636
00:23:16,799 --> 00:23:18,080
refer to

637
00:23:18,080 --> 00:23:19,520
different vendor databases like

638
00:23:19,520 --> 00:23:23,039
microsoft cisco uh google apple um and

639
00:23:23,039 --> 00:23:25,360
and read through their advisory and you

640
00:23:25,360 --> 00:23:28,240
can start from the cv details um and

641
00:23:28,240 --> 00:23:30,799
start doing a combing operation and you

642
00:23:30,799 --> 00:23:32,400
start deciphering

643
00:23:32,400 --> 00:23:35,280
all these bugs um you know map them to a

644
00:23:35,280 --> 00:23:37,039
root cause and those root causes will be

645
00:23:37,039 --> 00:23:38,720
mapped to your functionality when you're

646
00:23:38,720 --> 00:23:40,799
investing that time over a period of

647
00:23:40,799 --> 00:23:43,200
time you get a hang of it you improve

648
00:23:43,200 --> 00:23:45,840
speed so it's not like um it's going to

649
00:23:45,840 --> 00:23:47,200
slow down you're going to spend next one

650
00:23:47,200 --> 00:23:49,200
you're doing that it's probably going to

651
00:23:49,200 --> 00:23:50,799
take maybe a month's time few months

652
00:23:50,799 --> 00:23:52,559
time if you invest one or two percent

653
00:23:52,559 --> 00:23:54,559
just doing that and that's going to

654
00:23:54,559 --> 00:23:57,039
provide enough intel for you to make

655
00:23:57,039 --> 00:23:59,120
solid design decisions when you are

656
00:23:59,120 --> 00:24:00,400
doing design changes in your

657
00:24:00,400 --> 00:24:03,120
applications or for future applications

658
00:24:03,120 --> 00:24:04,960
you could imp take those

659
00:24:04,960 --> 00:24:06,559
fast experience you could take those

660
00:24:06,559 --> 00:24:10,240
past intel apply on your existing design

661
00:24:10,240 --> 00:24:12,480
and you you you're most likely to

662
00:24:12,480 --> 00:24:14,400
actually take care of all the known bugs

663
00:24:14,400 --> 00:24:17,200
in your system if you go ahead and find

664
00:24:17,200 --> 00:24:19,039
the different variants

665
00:24:19,039 --> 00:24:20,640
and instances of the bug in your

666
00:24:20,640 --> 00:24:22,159
application without getting the

667
00:24:22,159 --> 00:24:24,799
application tested so if because you

668
00:24:24,799 --> 00:24:27,039
already know what the nature of bug and

669
00:24:27,039 --> 00:24:29,360
where it could be in your application

670
00:24:29,360 --> 00:24:31,440
and if you know that you you ask your

671
00:24:31,440 --> 00:24:33,440
developer go and fix it if you have

672
00:24:33,440 --> 00:24:35,600
implemented incorrectly and then you get

673
00:24:35,600 --> 00:24:37,919
it tested so the testing job you're

674
00:24:37,919 --> 00:24:39,679
going to get done is going to be more

675
00:24:39,679 --> 00:24:41,360
targeted so that you're going to get

676
00:24:41,360 --> 00:24:43,679
more precise testing done more value for

677
00:24:43,679 --> 00:24:45,200
money

678
00:24:45,200 --> 00:24:47,440
always identify variants and instances

679
00:24:47,440 --> 00:24:49,440
of the bug whenever you get a report uh

680
00:24:49,440 --> 00:24:51,679
for your software it's not your reporter

681
00:24:51,679 --> 00:24:54,159
or or any external report as i said you

682
00:24:54,159 --> 00:24:56,240
have to dissect and find out whether it

683
00:24:56,240 --> 00:24:57,919
affects your application functionalities

684
00:24:57,919 --> 00:24:59,679
or not what you need to do is you need

685
00:24:59,679 --> 00:25:01,440
to go and

686
00:25:01,440 --> 00:25:03,600
find other instances in your application

687
00:25:03,600 --> 00:25:05,360
and you try to sort of uh

688
00:25:05,360 --> 00:25:07,279
make sure that they are mitigated

689
00:25:07,279 --> 00:25:08,880
thoroughly

690
00:25:08,880 --> 00:25:11,039
moving on what's the second learning the

691
00:25:11,039 --> 00:25:14,320
second learning is uh from the way

692
00:25:14,320 --> 00:25:16,320
memory corruption bugs have been brought

693
00:25:16,320 --> 00:25:20,080
under control um in operating system and

694
00:25:20,080 --> 00:25:23,520
web browser and os native apps

695
00:25:23,520 --> 00:25:25,039
so

696
00:25:25,039 --> 00:25:27,200
here this is i've taken a windows

697
00:25:27,200 --> 00:25:29,120
example but this is really not a windows

698
00:25:29,120 --> 00:25:30,320
example this

699
00:25:30,320 --> 00:25:33,520
this kind of uh exploit you would see um

700
00:25:33,520 --> 00:25:36,159
pretty much um you know for all targets

701
00:25:36,159 --> 00:25:38,400
it could be linux could be um

702
00:25:38,400 --> 00:25:40,080
any any target uh it could be your

703
00:25:40,080 --> 00:25:43,279
mobile phone android ios so a typical

704
00:25:43,279 --> 00:25:45,120
exploit building blocks looks like this

705
00:25:45,120 --> 00:25:47,200
so you got a trigger for the bug then

706
00:25:47,200 --> 00:25:49,039
there are some jumps and there's

707
00:25:49,039 --> 00:25:51,120
something called knobsled rock chain

708
00:25:51,120 --> 00:25:52,960
shell core so i'm not going to deep dive

709
00:25:52,960 --> 00:25:54,720
this is not in the scope of this

710
00:25:54,720 --> 00:25:56,720
presentation to deep dive into what

711
00:25:56,720 --> 00:25:59,039
exploitation looks like um

712
00:25:59,039 --> 00:26:01,760
i'm going to in layman terms i would say

713
00:26:01,760 --> 00:26:02,960
these are

714
00:26:02,960 --> 00:26:05,120
sequence of techniques starting from the

715
00:26:05,120 --> 00:26:07,440
triggering of the bug till execution of

716
00:26:07,440 --> 00:26:09,039
the cell code these are sequence of

717
00:26:09,039 --> 00:26:10,640
techniques that

718
00:26:10,640 --> 00:26:14,960
a program or x or exploit has to run um

719
00:26:14,960 --> 00:26:16,400
to make sure that the exploit is

720
00:26:16,400 --> 00:26:18,559
successful right so these are consider

721
00:26:18,559 --> 00:26:21,679
that that these are sequence of steps uh

722
00:26:21,679 --> 00:26:23,120
in a layman

723
00:26:23,120 --> 00:26:25,520
terminology

724
00:26:25,520 --> 00:26:28,799
so the way operating systems are

725
00:26:28,799 --> 00:26:31,360
targeting these uh targeting to break

726
00:26:31,360 --> 00:26:32,559
this

727
00:26:32,559 --> 00:26:35,600
sequence of step is they're introducing

728
00:26:35,600 --> 00:26:39,600
um targeted mitigations uh to break each

729
00:26:39,600 --> 00:26:42,240
of these techniques involved so if you

730
00:26:42,240 --> 00:26:44,240
break the techniques involved then what

731
00:26:44,240 --> 00:26:46,480
will happen is this exploit even if you

732
00:26:46,480 --> 00:26:48,159
find a buffer over you're going to find

733
00:26:48,159 --> 00:26:50,480
a heap over so you find a use actually

734
00:26:50,480 --> 00:26:53,279
you find a double free you find the most

735
00:26:53,279 --> 00:26:56,080
you know the the most complex bug

736
00:26:56,080 --> 00:26:56,880
but

737
00:26:56,880 --> 00:26:59,600
you cannot run a successful exploit in

738
00:26:59,600 --> 00:27:01,760
modern operating system it's very it's

739
00:27:01,760 --> 00:27:04,720
getting way too much difficult because

740
00:27:04,720 --> 00:27:06,799
here it's not about hackers against

741
00:27:06,799 --> 00:27:08,400
these companies you are actually talking

742
00:27:08,400 --> 00:27:10,000
about hackers against hackers these

743
00:27:10,000 --> 00:27:12,080
companies over the period of time have

744
00:27:12,080 --> 00:27:14,720
backed and you know hired hackers so

745
00:27:14,720 --> 00:27:16,320
these are the people who are observing

746
00:27:16,320 --> 00:27:18,480
your bypasses that you're trying to do

747
00:27:18,480 --> 00:27:21,120
they are going back and fixing it and

748
00:27:21,120 --> 00:27:22,960
coming back with a new technology that's

749
00:27:22,960 --> 00:27:25,520
going to break that um sort of a

750
00:27:25,520 --> 00:27:27,600
technique so each of this technique like

751
00:27:27,600 --> 00:27:29,360
here i have mentioned in yellow

752
00:27:29,360 --> 00:27:31,679
highlighting that these are different

753
00:27:31,679 --> 00:27:33,760
mitigation techniques that microsoft in

754
00:27:33,760 --> 00:27:35,600
this case i'm just using microsoft as an

755
00:27:35,600 --> 00:27:37,200
example but

756
00:27:37,200 --> 00:27:39,600
a similar concept you'll find for linux

757
00:27:39,600 --> 00:27:42,640
systems um and as well as apple even

758
00:27:42,640 --> 00:27:44,320
google implement the same similar

759
00:27:44,320 --> 00:27:46,960
technique for browsers browsers are no

760
00:27:46,960 --> 00:27:48,240
way different from operating system

761
00:27:48,240 --> 00:27:49,520
they're pretty much

762
00:27:49,520 --> 00:27:52,159
work like an operating system

763
00:27:52,159 --> 00:27:54,240
these are modern mitigations which are

764
00:27:54,240 --> 00:27:56,640
going to break the exploit techniques

765
00:27:56,640 --> 00:27:58,799
now once your export techniques is

766
00:27:58,799 --> 00:28:01,360
broken even if you find a zero day

767
00:28:01,360 --> 00:28:03,520
chances are you you could actually be

768
00:28:03,520 --> 00:28:05,600
able to successfully exploit it right

769
00:28:05,600 --> 00:28:07,120
and largely there are two different

770
00:28:07,120 --> 00:28:09,919
kinds of uh checks so one is a

771
00:28:09,919 --> 00:28:11,919
behavioral another one is a

772
00:28:11,919 --> 00:28:14,159
non-behavioral so what i mean by

773
00:28:14,159 --> 00:28:17,440
behavior is um for example your

774
00:28:17,440 --> 00:28:19,440
the dog in your house

775
00:28:19,440 --> 00:28:22,080
um it does a behavioral profiling of a

776
00:28:22,080 --> 00:28:23,440
visitor so when the visitor is

777
00:28:23,440 --> 00:28:25,919
suspicious it will try to attack or it

778
00:28:25,919 --> 00:28:27,840
will try to stop or you try to do

779
00:28:27,840 --> 00:28:29,200
something right it's going to bark or

780
00:28:29,200 --> 00:28:30,880
whatever it may does it does do a

781
00:28:30,880 --> 00:28:32,960
behavioral you understand what it means

782
00:28:32,960 --> 00:28:34,240
it does

783
00:28:34,240 --> 00:28:36,880
it's not like a fixed uh action of a dog

784
00:28:36,880 --> 00:28:38,720
that you will see

785
00:28:38,720 --> 00:28:40,960
a non-behavior is like a

786
00:28:40,960 --> 00:28:42,799
security get

787
00:28:42,799 --> 00:28:44,960
it doesn't do a behavioral profiling you

788
00:28:44,960 --> 00:28:46,399
have access to

789
00:28:46,399 --> 00:28:48,240
the get you can use the access card or

790
00:28:48,240 --> 00:28:51,520
your key you get in get out uh it's not

791
00:28:51,520 --> 00:28:53,120
going to profile the visitor that's the

792
00:28:53,120 --> 00:28:54,640
difference between a behavioral check

793
00:28:54,640 --> 00:28:57,679
and a non-behavioral shift now there are

794
00:28:57,679 --> 00:28:58,399
two

795
00:28:58,399 --> 00:29:00,640
behavioral checks here so one is the acg

796
00:29:00,640 --> 00:29:02,240
another one is the cfg which is again

797
00:29:02,240 --> 00:29:04,480
going to be deprecated by another modern

798
00:29:04,480 --> 00:29:06,240
mitigation called xfg i'm not going to

799
00:29:06,240 --> 00:29:07,760
talk about that in detail this is

800
00:29:07,760 --> 00:29:09,760
outside the scope but just for your

801
00:29:09,760 --> 00:29:10,640
knowledge

802
00:29:10,640 --> 00:29:11,440
now

803
00:29:11,440 --> 00:29:13,279
in the next slide

804
00:29:13,279 --> 00:29:15,120
i'm going to leave it for reading uh

805
00:29:15,120 --> 00:29:18,000
this is just to know that uh these are

806
00:29:18,000 --> 00:29:20,399
list of techniques that microsoft had

807
00:29:20,399 --> 00:29:22,720
introduced in modern operating system to

808
00:29:22,720 --> 00:29:26,559
break all those techniques uh used by

809
00:29:26,559 --> 00:29:28,880
used during common exploitations right

810
00:29:28,880 --> 00:29:30,880
so as you find new techniques they will

811
00:29:30,880 --> 00:29:33,440
go and improve their mitigation and kill

812
00:29:33,440 --> 00:29:35,919
that technique so it i wouldn't be

813
00:29:35,919 --> 00:29:38,480
surprised in near future you know

814
00:29:38,480 --> 00:29:39,760
getting you know sort of executing

815
00:29:39,760 --> 00:29:41,919
yourself or running some kind of expert

816
00:29:41,919 --> 00:29:43,200
on your

817
00:29:43,200 --> 00:29:45,840
operating system is going to get so so

818
00:29:45,840 --> 00:29:47,760
harder that it's going to get nearly

819
00:29:47,760 --> 00:29:50,159
impossible um but i'll park that

820
00:29:50,159 --> 00:29:51,760
statement for now

821
00:29:51,760 --> 00:29:53,279
so

822
00:29:53,279 --> 00:29:56,000
uh in web applications why why why talk

823
00:29:56,000 --> 00:29:57,840
about operating system right so there's

824
00:29:57,840 --> 00:29:59,679
some relation to a wave application

825
00:29:59,679 --> 00:30:01,120
mitigation that's why i talked about

826
00:30:01,120 --> 00:30:03,279
that in that example now in web

827
00:30:03,279 --> 00:30:07,159
application the emphasis is too much on

828
00:30:07,159 --> 00:30:09,679
non-behavioral checks which is basically

829
00:30:09,679 --> 00:30:12,000
a fixed check input validation

830
00:30:12,000 --> 00:30:14,480
output escaping parameterized queries

831
00:30:14,480 --> 00:30:16,399
these are not behavioral checks these

832
00:30:16,399 --> 00:30:17,039
are

833
00:30:17,039 --> 00:30:19,440
targeted non-behavioral checks they

834
00:30:19,440 --> 00:30:22,240
simply check exactly uh

835
00:30:22,240 --> 00:30:24,640
you know a particular

836
00:30:24,640 --> 00:30:27,200
kind of a technique it doesn't really go

837
00:30:27,200 --> 00:30:29,520
and profile different variations of the

838
00:30:29,520 --> 00:30:31,520
technique and try to stop it just simply

839
00:30:31,520 --> 00:30:34,240
attack stop one single technique

840
00:30:34,240 --> 00:30:38,000
um that is a limited or no almost zero

841
00:30:38,000 --> 00:30:39,360
focus on

842
00:30:39,360 --> 00:30:41,200
introducing behavioral based mitigation

843
00:30:41,200 --> 00:30:42,320
we don't have

844
00:30:42,320 --> 00:30:43,760
a solution

845
00:30:43,760 --> 00:30:45,679
that's going to do a behavioral check

846
00:30:45,679 --> 00:30:47,440
for the web application we're not

847
00:30:47,440 --> 00:30:48,960
talking about firewalls here those are

848
00:30:48,960 --> 00:30:50,640
different things i'm talking about just

849
00:30:50,640 --> 00:30:53,200
wave application level now there's one

850
00:30:53,200 --> 00:30:56,159
or two examples which can be sort of a

851
00:30:56,159 --> 00:30:58,320
relate to a behavioral check is google

852
00:30:58,320 --> 00:31:00,159
recapture is a good example where they

853
00:31:00,159 --> 00:31:02,159
have machine learning running behind it

854
00:31:02,159 --> 00:31:04,320
and that does some kind of behavioral

855
00:31:04,320 --> 00:31:06,480
profiling um when you see are you a

856
00:31:06,480 --> 00:31:08,320
robot or something you take it and it's

857
00:31:08,320 --> 00:31:09,919
going to present you with a bunch of

858
00:31:09,919 --> 00:31:12,480
things to sort of confirm uh it's

859
00:31:12,480 --> 00:31:14,240
because it's the machine learning that's

860
00:31:14,240 --> 00:31:17,120
running behind it um but then that is

861
00:31:17,120 --> 00:31:19,200
not sufficient to take care of the all

862
00:31:19,200 --> 00:31:20,880
sort of applications overall narratives

863
00:31:20,880 --> 00:31:23,279
it only prevent the sort of

864
00:31:23,279 --> 00:31:26,399
automation of the forms uh it prevents

865
00:31:26,399 --> 00:31:28,640
any kind of brute force attacks so it

866
00:31:28,640 --> 00:31:30,720
has got a very limited capability so

867
00:31:30,720 --> 00:31:33,279
that's really nothing i can confidently

868
00:31:33,279 --> 00:31:35,679
say there's really not many or maybe

869
00:31:35,679 --> 00:31:38,240
nothing that can be considered as a

870
00:31:38,240 --> 00:31:41,120
comprehensive behavioral solution for

871
00:31:41,120 --> 00:31:42,960
web applications or any kind of

872
00:31:42,960 --> 00:31:44,640
applications

873
00:31:44,640 --> 00:31:46,880
now when i'm talking about behavioral

874
00:31:46,880 --> 00:31:49,279
checks here now

875
00:31:49,279 --> 00:31:50,480
one thing to understand how do we

876
00:31:50,480 --> 00:31:51,840
introduce this kind of behavioral change

877
00:31:51,840 --> 00:31:53,360
so one thing to understand is an

878
00:31:53,360 --> 00:31:55,519
adversary is going to make only finite

879
00:31:55,519 --> 00:31:57,600
set of moves and the reason i have the

880
00:31:57,600 --> 00:31:59,919
same you know the chess board next to it

881
00:31:59,919 --> 00:32:02,399
is because uh for every single move you

882
00:32:02,399 --> 00:32:03,679
make if you are playing with the

883
00:32:03,679 --> 00:32:06,559
computer the computer has got a finite

884
00:32:06,559 --> 00:32:08,720
set up you know moves that is feed into

885
00:32:08,720 --> 00:32:10,399
its database you know you try to pull

886
00:32:10,399 --> 00:32:12,240
out the best move and try to make the

887
00:32:12,240 --> 00:32:14,159
next move so what i'm trying to say here

888
00:32:14,159 --> 00:32:16,960
is when an exploitation occur there's

889
00:32:16,960 --> 00:32:17,919
only

890
00:32:17,919 --> 00:32:19,840
finite set of moves and adversity is

891
00:32:19,840 --> 00:32:20,880
going to make

892
00:32:20,880 --> 00:32:21,679
and

893
00:32:21,679 --> 00:32:24,399
technically application or software can

894
00:32:24,399 --> 00:32:27,360
be programmed to analyze those finite

895
00:32:27,360 --> 00:32:29,440
state of moves an adversary or

896
00:32:29,440 --> 00:32:31,360
and respond accordingly

897
00:32:31,360 --> 00:32:32,880
so

898
00:32:32,880 --> 00:32:33,760
now

899
00:32:33,760 --> 00:32:36,000
talking about machine learning here

900
00:32:36,000 --> 00:32:37,360
you know if you

901
00:32:37,360 --> 00:32:39,840
machine learning has come to a stage

902
00:32:39,840 --> 00:32:41,120
where

903
00:32:41,120 --> 00:32:43,200
it can be integrated pretty much it's

904
00:32:43,200 --> 00:32:44,960
available off the shelf you just have to

905
00:32:44,960 --> 00:32:47,519
integrate it and any seasoned programmer

906
00:32:47,519 --> 00:32:48,399
can

907
00:32:48,399 --> 00:32:50,960
go ahead and leverage machine learning

908
00:32:50,960 --> 00:32:52,880
and introduce these kind of checks so if

909
00:32:52,880 --> 00:32:54,399
you if you could

910
00:32:54,399 --> 00:32:57,279
have a database of all the finite set of

911
00:32:57,279 --> 00:32:59,600
moves you're looking at after above

912
00:32:59,600 --> 00:33:02,080
exploitation you can very well train

913
00:33:02,080 --> 00:33:04,159
your machine learning to tackle those

914
00:33:04,159 --> 00:33:05,919
kind of bugs so

915
00:33:05,919 --> 00:33:07,200
i'll

916
00:33:07,200 --> 00:33:09,519
yeah this this session is not really to

917
00:33:09,519 --> 00:33:11,360
go deep dive and talk about machine

918
00:33:11,360 --> 00:33:13,279
learning and how to do that but just at

919
00:33:13,279 --> 00:33:16,159
a very high level i can say if you

920
00:33:16,159 --> 00:33:17,679
understand machine learning if you don't

921
00:33:17,679 --> 00:33:19,200
even understand it has come to a stage

922
00:33:19,200 --> 00:33:20,880
that you can simply go and integrate

923
00:33:20,880 --> 00:33:21,760
those

924
00:33:21,760 --> 00:33:24,240
machine learning apis and start using it

925
00:33:24,240 --> 00:33:25,840
what you need to do is you need to train

926
00:33:25,840 --> 00:33:28,559
it so that you can leverage the

927
00:33:28,559 --> 00:33:31,360
machine learning capabilities to go and

928
00:33:31,360 --> 00:33:33,279
sort of uh do those kind of check and

929
00:33:33,279 --> 00:33:36,640
prevent those kind of adversary moves

930
00:33:36,640 --> 00:33:38,399
so here is a typical

931
00:33:38,399 --> 00:33:40,559
machine learning uh or a very simple

932
00:33:40,559 --> 00:33:43,600
machine learning uh design um and and

933
00:33:43,600 --> 00:33:46,080
again it's it's just just for you to

934
00:33:46,080 --> 00:33:48,080
just see but you just imagine that

935
00:33:48,080 --> 00:33:51,440
machine learning is more like uh it can

936
00:33:51,440 --> 00:33:54,480
do behavioral checks if you train it if

937
00:33:54,480 --> 00:33:56,080
you train all the finite moves and for

938
00:33:56,080 --> 00:33:58,320
an adversary it can do go and check

939
00:33:58,320 --> 00:34:01,039
those things and try you can apply a

940
00:34:01,039 --> 00:34:03,600
trigger so that you can even stop uh you

941
00:34:03,600 --> 00:34:05,279
can you can apply triggers to stop those

942
00:34:05,279 --> 00:34:07,440
kind of malicious actions or any kind of

943
00:34:07,440 --> 00:34:09,440
adverse reaction

944
00:34:09,440 --> 00:34:11,839
now the final recommendations

945
00:34:11,839 --> 00:34:13,839
yeah we are we are way overhead the

946
00:34:13,839 --> 00:34:15,280
schedule uh

947
00:34:15,280 --> 00:34:17,199
need to wake up

948
00:34:17,199 --> 00:34:21,040
okay so how many minutes i got uh

949
00:34:21,040 --> 00:34:23,359
you are over by two minutes uh more uh

950
00:34:23,359 --> 00:34:25,679
other panelists are waiting

951
00:34:25,679 --> 00:34:27,918
all right okay so can i get two more

952
00:34:27,918 --> 00:34:30,239
minutes or i'm done

953
00:34:30,239 --> 00:34:31,839
uh mary you need to

954
00:34:31,839 --> 00:34:32,839
you need

955
00:34:32,839 --> 00:34:36,320
to two two more minutes and let's please

956
00:34:36,320 --> 00:34:39,359
wrap up thank you okay sure thank you so

957
00:34:39,359 --> 00:34:41,119
i already covered the you know the

958
00:34:41,119 --> 00:34:42,800
recommendations um you know how you need

959
00:34:42,800 --> 00:34:44,560
to use machine learning this slide will

960
00:34:44,560 --> 00:34:47,040
be available uh later on for you guys to

961
00:34:47,040 --> 00:34:49,520
go over and understand how to implement

962
00:34:49,520 --> 00:34:50,960
it but i'll cover one of the

963
00:34:50,960 --> 00:34:52,719
misconceptions that's been around for

964
00:34:52,719 --> 00:34:55,119
years so the the silver bullet in

965
00:34:55,119 --> 00:34:57,359
security software security engineering

966
00:34:57,359 --> 00:35:00,000
now we are looking at this you know sort

967
00:35:00,000 --> 00:35:01,280
of a

968
00:35:01,280 --> 00:35:03,119
different timeline of when waterfall was

969
00:35:03,119 --> 00:35:05,200
introduced when agile was introduced

970
00:35:05,200 --> 00:35:06,880
when devops was introduced again for the

971
00:35:06,880 --> 00:35:08,240
sake of time i'm going to skip through

972
00:35:08,240 --> 00:35:10,560
quickly because um this is basically to

973
00:35:10,560 --> 00:35:12,960
say when security was introduced in all

974
00:35:12,960 --> 00:35:15,359
of these lifecycles now

975
00:35:15,359 --> 00:35:17,680
over the years devops has devsec ops

976
00:35:17,680 --> 00:35:20,880
have you know server became very popular

977
00:35:20,880 --> 00:35:22,720
and um there has been an increase in

978
00:35:22,720 --> 00:35:24,960
misconception around it as well well

979
00:35:24,960 --> 00:35:27,520
devsecops are very cool concept but then

980
00:35:27,520 --> 00:35:29,200
again there's some misconception around

981
00:35:29,200 --> 00:35:30,560
it now

982
00:35:30,560 --> 00:35:32,480
uh some of the snippets that i extracted

983
00:35:32,480 --> 00:35:36,000
from various online sources is devops is

984
00:35:36,000 --> 00:35:37,680
um you know security is better with

985
00:35:37,680 --> 00:35:41,040
devops or security gets to introduce

986
00:35:41,040 --> 00:35:43,920
early in the devops life cycle or devops

987
00:35:43,920 --> 00:35:47,119
is your security silver bullet now

988
00:35:47,119 --> 00:35:48,800
what is wrong with these statements now

989
00:35:48,800 --> 00:35:51,040
these statements if you read carefully

990
00:35:51,040 --> 00:35:53,119
these statements are promoting devops in

991
00:35:53,119 --> 00:35:55,040
a way that it's way better than any

992
00:35:55,040 --> 00:35:56,400
other

993
00:35:56,400 --> 00:35:59,440
previous sdlc framework or principles or

994
00:35:59,440 --> 00:36:01,520
process now similar statements can be

995
00:36:01,520 --> 00:36:03,440
found scattered all over the internet

996
00:36:03,440 --> 00:36:04,720
while promoting

997
00:36:04,720 --> 00:36:07,599
uh you know devops um you know it is

998
00:36:07,599 --> 00:36:10,320
essential but overwhelm hyping can be

999
00:36:10,320 --> 00:36:12,720
misleading as well now

1000
00:36:12,720 --> 00:36:14,560
i just like to give a quick snapshot of

1001
00:36:14,560 --> 00:36:16,480
what basically means building security

1002
00:36:16,480 --> 00:36:19,599
into sdlc lifecycle so you have these

1003
00:36:19,599 --> 00:36:22,560
very common uh common sense uh you know

1004
00:36:22,560 --> 00:36:24,800
common uh phases which is requirements

1005
00:36:24,800 --> 00:36:26,400
to design coding qa

1006
00:36:26,400 --> 00:36:29,200
and release and you try to map uh

1007
00:36:29,200 --> 00:36:31,680
security activities uh with these kind

1008
00:36:31,680 --> 00:36:32,880
of uh

1009
00:36:32,880 --> 00:36:34,720
phases now these can be done with

1010
00:36:34,720 --> 00:36:36,560
waterfall this can be done in agile this

1011
00:36:36,560 --> 00:36:39,119
can be done in devops so i wouldn't be

1012
00:36:39,119 --> 00:36:41,599
surprised if there's ml ops um and

1013
00:36:41,599 --> 00:36:43,440
people start talking about ml second

1014
00:36:43,440 --> 00:36:45,119
they try to do the same thing trying to

1015
00:36:45,119 --> 00:36:47,680
align basically these things with the

1016
00:36:47,680 --> 00:36:50,240
uh phases now

1017
00:36:50,240 --> 00:36:51,920
i would again be surprised that there

1018
00:36:51,920 --> 00:36:53,599
will be another next generation software

1019
00:36:53,599 --> 00:36:55,760
security engineering lifecycle and you

1020
00:36:55,760 --> 00:36:58,560
integrate uh security and server

1021
00:36:58,560 --> 00:37:00,880
consider that as the kind of uh

1022
00:37:00,880 --> 00:37:03,280
silver bullet because the way devsecops

1023
00:37:03,280 --> 00:37:05,599
have been promoted is it looks like it's

1024
00:37:05,599 --> 00:37:07,280
sort of been

1025
00:37:07,280 --> 00:37:09,680
becoming like a de facto standard for

1026
00:37:09,680 --> 00:37:11,359
security which is not the case because

1027
00:37:11,359 --> 00:37:13,440
all that you are doing is doing this

1028
00:37:13,440 --> 00:37:16,000
common sense alignment of security stage

1029
00:37:16,000 --> 00:37:17,839
gate activities across this which

1030
00:37:17,839 --> 00:37:20,160
remains fixed across all the development

1031
00:37:20,160 --> 00:37:21,839
life cycle regardless of the life cycle

1032
00:37:21,839 --> 00:37:22,800
you use

1033
00:37:22,800 --> 00:37:25,280
now if you are planning to migrate away

1034
00:37:25,280 --> 00:37:27,440
from devops what you need to do is you

1035
00:37:27,440 --> 00:37:29,760
need to do a return on investment and

1036
00:37:29,760 --> 00:37:32,320
try to understand whether it's

1037
00:37:32,320 --> 00:37:34,480
favorable for your business needs if

1038
00:37:34,480 --> 00:37:37,359
that is the case then go for it but if

1039
00:37:37,359 --> 00:37:39,280
if the devops is

1040
00:37:39,280 --> 00:37:41,599
only for security if you're doing um

1041
00:37:41,599 --> 00:37:43,520
choosing dev cycles only for security

1042
00:37:43,520 --> 00:37:45,200
that's when you need to stop because

1043
00:37:45,200 --> 00:37:46,560
you're not going to get any help from

1044
00:37:46,560 --> 00:37:48,160
devsec ops

1045
00:37:48,160 --> 00:37:50,000
for security only security is the only

1046
00:37:50,000 --> 00:37:52,000
reason because you you're probably doing

1047
00:37:52,000 --> 00:37:53,599
something wrong with your existing life

1048
00:37:53,599 --> 00:37:55,359
cycle it's existing software development

1049
00:37:55,359 --> 00:37:57,200
which you need to go back and share now

1050
00:37:57,200 --> 00:37:58,880
for the sake of time i'll quickly skip

1051
00:37:58,880 --> 00:38:00,320
through this so that because i could say

1052
00:38:00,320 --> 00:38:03,119
some final notes um this is just to say

1053
00:38:03,119 --> 00:38:05,359
that you know going with the flow uh

1054
00:38:05,359 --> 00:38:07,280
without rational thinking is not going

1055
00:38:07,280 --> 00:38:08,960
to lead you to anywhere good you

1056
00:38:08,960 --> 00:38:10,800
probably want to ask a lot of questions

1057
00:38:10,800 --> 00:38:13,680
before um you know moving going with the

1058
00:38:13,680 --> 00:38:15,599
flow now

1059
00:38:15,599 --> 00:38:18,079
building security into the sdl is always

1060
00:38:18,079 --> 00:38:18,800
a

1061
00:38:18,800 --> 00:38:20,240
implicit process

1062
00:38:20,240 --> 00:38:22,880
explicit process never implicit so there

1063
00:38:22,880 --> 00:38:24,400
is no silver bullet in security

1064
00:38:24,400 --> 00:38:25,440
engineering

1065
00:38:25,440 --> 00:38:26,800
and the level of software security

1066
00:38:26,800 --> 00:38:28,800
experience is largely depends on how

1067
00:38:28,800 --> 00:38:30,800
the you know how the security assessment

1068
00:38:30,800 --> 00:38:33,520
is done at each stages and a fixed set

1069
00:38:33,520 --> 00:38:35,680
of common sense activities exist that

1070
00:38:35,680 --> 00:38:37,359
remains same across all types of

1071
00:38:37,359 --> 00:38:39,040
development methodology

1072
00:38:39,040 --> 00:38:41,599
sorry i'm just done just one last

1073
00:38:41,599 --> 00:38:43,200
some final words

1074
00:38:43,200 --> 00:38:46,000
um so as i said uh just to wrap it there

1075
00:38:46,000 --> 00:38:49,040
i have this uh session treat all known

1076
00:38:49,040 --> 00:38:51,839
security vulnerabilities as a pandemic

1077
00:38:51,839 --> 00:38:53,200
especially they have been around for

1078
00:38:53,200 --> 00:38:54,480
over decades

1079
00:38:54,480 --> 00:38:56,640
and no one wants to see kobe for next 20

1080
00:38:56,640 --> 00:38:59,359
years the same feeling applies to no box

1081
00:38:59,359 --> 00:39:01,680
as well and if some organization here

1082
00:39:01,680 --> 00:39:03,839
take away these suggestions to eradicate

1083
00:39:03,839 --> 00:39:05,359
known bugs in your application and

1084
00:39:05,359 --> 00:39:07,599
achieve success in eliminating them then

1085
00:39:07,599 --> 00:39:09,280
do spread the word and talk about your

1086
00:39:09,280 --> 00:39:12,000
success your organization success story

1087
00:39:12,000 --> 00:39:13,760
on eliminating all known bugs will

1088
00:39:13,760 --> 00:39:15,119
inspire other organizations and

1089
00:39:15,119 --> 00:39:16,640
potentially lead to

1090
00:39:16,640 --> 00:39:18,800
some kind of a global ripple effect and

1091
00:39:18,800 --> 00:39:21,040
let's reassess the state of all the

1092
00:39:21,040 --> 00:39:23,680
known bugs in about 20 years from now

1093
00:39:23,680 --> 00:39:27,160
thank you for listening

