1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:07,759 --> 00:00:10,639
i'm really happy to be here and have to

3
00:00:10,639 --> 00:00:12,000
uh to have the opportunity to speak at

4
00:00:12,000 --> 00:00:15,040
the uos 20th anniversary so hi everyone

5
00:00:15,040 --> 00:00:17,440
my name is edwin kwan

6
00:00:17,440 --> 00:00:19,039
how many of you have heard about a

7
00:00:19,039 --> 00:00:22,160
security incident in the last few years

8
00:00:22,160 --> 00:00:24,160
now i remember recently reading about

9
00:00:24,160 --> 00:00:25,920
the security vulnerability with the

10
00:00:25,920 --> 00:00:27,439
confluence service

11
00:00:27,439 --> 00:00:30,160
there was a vulnerability in confluences

12
00:00:30,160 --> 00:00:32,558
tag system which allowed remote code

13
00:00:32,558 --> 00:00:34,000
execution

14
00:00:34,000 --> 00:00:35,440
it seems like

15
00:00:35,440 --> 00:00:37,360
number of security incidents and data

16
00:00:37,360 --> 00:00:39,360
breaches are increasing

17
00:00:39,360 --> 00:00:41,840
and it feels like not a month goes by

18
00:00:41,840 --> 00:00:44,399
without hearing of yet another breach

19
00:00:44,399 --> 00:00:46,160
or compromise

20
00:00:46,160 --> 00:00:49,120
are we getting worse at doing security

21
00:00:49,120 --> 00:00:50,800
and whenever there is a security

22
00:00:50,800 --> 00:00:53,120
vulnerability developers are usually the

23
00:00:53,120 --> 00:00:55,600
first to be blamed or say things like

24
00:00:55,600 --> 00:00:58,239
hey they use a vulnerable open source

25
00:00:58,239 --> 00:01:00,160
component or

26
00:01:00,160 --> 00:01:02,320
there was a misconfiguration in the

27
00:01:02,320 --> 00:01:03,760
application

28
00:01:03,760 --> 00:01:06,320
however is it really the developer's

29
00:01:06,320 --> 00:01:07,360
thought

30
00:01:07,360 --> 00:01:09,920
so for this presentation i like to share

31
00:01:09,920 --> 00:01:11,520
my opinion on this

32
00:01:11,520 --> 00:01:14,240
from an application security perspective

33
00:01:14,240 --> 00:01:16,159
by taking a look at how software

34
00:01:16,159 --> 00:01:20,240
development has changed over the years

35
00:01:20,240 --> 00:01:22,640
let's take a walk down memory lane back

36
00:01:22,640 --> 00:01:24,159
20 years ago

37
00:01:24,159 --> 00:01:26,320
i believe this was the time when the

38
00:01:26,320 --> 00:01:29,040
nokia communicator was all the rage

39
00:01:29,040 --> 00:01:30,960
for this presentation we're going to

40
00:01:30,960 --> 00:01:33,119
look at the software development

41
00:01:33,119 --> 00:01:35,360
lifecycle journey for a fictitious

42
00:01:35,360 --> 00:01:38,079
company acme corporation

43
00:01:38,079 --> 00:01:39,920
though the company is fictitious its

44
00:01:39,920 --> 00:01:41,520
journey should be somewhat

45
00:01:41,520 --> 00:01:44,000
representative for most typical

46
00:01:44,000 --> 00:01:46,000
organizations

47
00:01:46,000 --> 00:01:48,560
so i like choosing meet sam

48
00:01:48,560 --> 00:01:51,680
she works at acme corp as a software

49
00:01:51,680 --> 00:01:53,119
developer

50
00:01:53,119 --> 00:01:56,079
and she does all her coding in java

51
00:01:56,079 --> 00:01:58,960
and she's part of a software development

52
00:01:58,960 --> 00:02:00,960
team

53
00:02:00,960 --> 00:02:03,840
seminar team receives requirements from

54
00:02:03,840 --> 00:02:05,840
product for the software they need to

55
00:02:05,840 --> 00:02:06,880
build

56
00:02:06,880 --> 00:02:09,199
those requirements come up front and

57
00:02:09,199 --> 00:02:11,280
they have expected delivery dates that

58
00:02:11,280 --> 00:02:14,319
are a couple of months away

59
00:02:14,319 --> 00:02:16,640
once you receive those requirements she

60
00:02:16,640 --> 00:02:18,879
and her team will work out the design

61
00:02:18,879 --> 00:02:21,599
and the implementation details

62
00:02:21,599 --> 00:02:23,040
there might be a software architect

63
00:02:23,040 --> 00:02:25,599
involved and they will determine how to

64
00:02:25,599 --> 00:02:28,640
build the application as per products

65
00:02:28,640 --> 00:02:30,879
specification

66
00:02:30,879 --> 00:02:32,959
everything is one big application back

67
00:02:32,959 --> 00:02:33,760
then

68
00:02:33,760 --> 00:02:38,480
and the deliverable is a java

69
00:02:38,480 --> 00:02:40,560
security was the department of no back

70
00:02:40,560 --> 00:02:42,560
then so they usually have to build

71
00:02:42,560 --> 00:02:43,599
everything

72
00:02:43,599 --> 00:02:44,640
you know this included the

73
00:02:44,640 --> 00:02:46,879
authentication mechanism the login

74
00:02:46,879 --> 00:02:48,959
functionality there were not many

75
00:02:48,959 --> 00:02:50,400
third-party services

76
00:02:50,400 --> 00:02:53,120
allowed back then

77
00:02:53,120 --> 00:02:56,080
as the expected delivery date draws now

78
00:02:56,080 --> 00:02:58,879
there is a product verification phase

79
00:02:58,879 --> 00:03:01,680
here the application is put through

80
00:03:01,680 --> 00:03:04,159
rigorous testing to ensure quality

81
00:03:04,159 --> 00:03:05,200
assurance

82
00:03:05,200 --> 00:03:08,159
this is usually done by another person

83
00:03:08,159 --> 00:03:09,280
or team

84
00:03:09,280 --> 00:03:10,640
and there are a number of test

85
00:03:10,640 --> 00:03:13,120
objectives and test cases drawn out for

86
00:03:13,120 --> 00:03:15,120
what needs to be checked

87
00:03:15,120 --> 00:03:17,360
and from memory it's a pretty formal

88
00:03:17,360 --> 00:03:19,760
process and there is like an official

89
00:03:19,760 --> 00:03:22,080
test report provided at the end of the

90
00:03:22,080 --> 00:03:23,360
activity

91
00:03:23,360 --> 00:03:25,920
and in that report it would contain all

92
00:03:25,920 --> 00:03:28,560
the issues that sam and her development

93
00:03:28,560 --> 00:03:31,200
team will need to address before they

94
00:03:31,200 --> 00:03:34,799
can deliver their application

95
00:03:34,799 --> 00:03:37,280
on top of qa there's also security

96
00:03:37,280 --> 00:03:39,599
testing that's being done

97
00:03:39,599 --> 00:03:41,840
sometimes the security testing and qa

98
00:03:41,840 --> 00:03:44,239
are combined together

99
00:03:44,239 --> 00:03:46,720
the security testing would check that

100
00:03:46,720 --> 00:03:49,120
there are no security bugs

101
00:03:49,120 --> 00:03:52,239
it would verify the access controls

102
00:03:52,239 --> 00:03:54,560
it would ensure that the whole system

103
00:03:54,560 --> 00:03:57,200
where the application runs off has

104
00:03:57,200 --> 00:03:59,439
sufficient perimeter defense

105
00:03:59,439 --> 00:04:02,480
and that it is adequately security

106
00:04:02,480 --> 00:04:04,400
hardened

107
00:04:04,400 --> 00:04:07,280
once that is all good the deliverable

108
00:04:07,280 --> 00:04:09,439
which is the jar is handed over to the

109
00:04:09,439 --> 00:04:10,959
operations engineer

110
00:04:10,959 --> 00:04:12,959
who would follow the installation

111
00:04:12,959 --> 00:04:15,439
instructions to deploy the system into

112
00:04:15,439 --> 00:04:17,120
production

113
00:04:17,120 --> 00:04:19,279
now this is usually a physical server

114
00:04:19,279 --> 00:04:21,358
either in their own data center or in

115
00:04:21,358 --> 00:04:23,600
their customers data center

116
00:04:23,600 --> 00:04:25,280
if there was a problem with the

117
00:04:25,280 --> 00:04:26,560
installation

118
00:04:26,560 --> 00:04:28,800
they would usually procedures available

119
00:04:28,800 --> 00:04:30,880
for rolling back the system to its

120
00:04:30,880 --> 00:04:33,040
previous state

121
00:04:33,040 --> 00:04:34,880
once this jar is delivered the

122
00:04:34,880 --> 00:04:37,360
development team is usually no longer

123
00:04:37,360 --> 00:04:39,520
involved with that application

124
00:04:39,520 --> 00:04:42,000
from here it is the operations team who

125
00:04:42,000 --> 00:04:44,639
is responsible for the maintenance of

126
00:04:44,639 --> 00:04:45,919
the system

127
00:04:45,919 --> 00:04:48,720
this includes performing any upgrades or

128
00:04:48,720 --> 00:04:52,000
patching that is required

129
00:04:52,000 --> 00:04:52,800
so

130
00:04:52,800 --> 00:04:55,120
that's how software development looked

131
00:04:55,120 --> 00:04:59,440
like at acme corp 20 years ago

132
00:04:59,520 --> 00:05:01,440
it takes a couple of months to deliver a

133
00:05:01,440 --> 00:05:02,720
product

134
00:05:02,720 --> 00:05:05,199
and the development of it involves a

135
00:05:05,199 --> 00:05:07,360
number of teams there's the

136
00:05:07,360 --> 00:05:10,160
development team the testing team the

137
00:05:10,160 --> 00:05:11,520
operations team

138
00:05:11,520 --> 00:05:14,080
and that's the security team

139
00:05:14,080 --> 00:05:14,880
now

140
00:05:14,880 --> 00:05:17,280
let's look at how that evolved 10 years

141
00:05:17,280 --> 00:05:19,680
later so we're going we're now going

142
00:05:19,680 --> 00:05:21,919
from how software was developed from 20

143
00:05:21,919 --> 00:05:22,960
years ago

144
00:05:22,960 --> 00:05:24,479
to 10 years ago

145
00:05:24,479 --> 00:05:25,919
and i believe that this is the

146
00:05:25,919 --> 00:05:28,479
blackberry era there were a few major

147
00:05:28,479 --> 00:05:32,000
changes that happened during that time

148
00:05:32,000 --> 00:05:34,160
first projects that acne cop were

149
00:05:34,160 --> 00:05:36,000
consistently laid in not meeting

150
00:05:36,000 --> 00:05:37,360
daylight

151
00:05:37,360 --> 00:05:40,080
to address that the company decided to

152
00:05:40,080 --> 00:05:42,880
shift towards agile development

153
00:05:42,880 --> 00:05:45,360
benefit of doing that is shorter release

154
00:05:45,360 --> 00:05:47,520
cycles and the teams are able to

155
00:05:47,520 --> 00:05:49,680
continuously deliver value to their

156
00:05:49,680 --> 00:05:50,840
customers

157
00:05:50,840 --> 00:05:53,680
quicker this is a great idea

158
00:05:53,680 --> 00:05:55,600
they are able to get feedback from their

159
00:05:55,600 --> 00:05:58,720
customers early and are able to make any

160
00:05:58,720 --> 00:06:02,240
required changes along the way

161
00:06:02,240 --> 00:06:04,880
what this means though for sam and her

162
00:06:04,880 --> 00:06:05,840
team

163
00:06:05,840 --> 00:06:08,240
is that rather than releasing every few

164
00:06:08,240 --> 00:06:10,880
months they're now releasing releasing

165
00:06:10,880 --> 00:06:13,680
every few weeks

166
00:06:13,680 --> 00:06:15,120
now there are some challenges with

167
00:06:15,120 --> 00:06:17,280
having that many releases

168
00:06:17,280 --> 00:06:19,919
there's typically more developers than

169
00:06:19,919 --> 00:06:21,360
there are testers

170
00:06:21,360 --> 00:06:23,680
and having shots and release cycles

171
00:06:23,680 --> 00:06:24,639
means

172
00:06:24,639 --> 00:06:26,720
there needs to be some fuss

173
00:06:26,720 --> 00:06:28,479
there need to be faster feedback from

174
00:06:28,479 --> 00:06:29,680
testing

175
00:06:29,680 --> 00:06:33,039
so acme cob decide to adopt test driven

176
00:06:33,039 --> 00:06:36,319
development also known as tdd

177
00:06:36,319 --> 00:06:38,639
this is where software requirements are

178
00:06:38,639 --> 00:06:41,360
being converted to test cases before the

179
00:06:41,360 --> 00:06:43,759
software is fully developed

180
00:06:43,759 --> 00:06:46,800
the idea is to write a failing test to

181
00:06:46,800 --> 00:06:48,800
capture a software requirement

182
00:06:48,800 --> 00:06:50,960
you then write the simplest bit of code

183
00:06:50,960 --> 00:06:53,440
to get that test to pass

184
00:06:53,440 --> 00:06:55,759
next you refactor the code and you

185
00:06:55,759 --> 00:06:58,800
repeat by writing a new test

186
00:06:58,800 --> 00:07:00,639
this is a big change from what they did

187
00:07:00,639 --> 00:07:02,720
previously where software was developed

188
00:07:02,720 --> 00:07:06,319
first and test cases created later

189
00:07:06,319 --> 00:07:08,880
as a result of this testing is now

190
00:07:08,880 --> 00:07:11,599
something that is done by the developers

191
00:07:11,599 --> 00:07:13,680
and the testers in the team became

192
00:07:13,680 --> 00:07:16,560
quality advocates coaching developers on

193
00:07:16,560 --> 00:07:18,639
how to do testing

194
00:07:18,639 --> 00:07:20,960
this is a great step forward as there's

195
00:07:20,960 --> 00:07:23,199
now faster feedback when software

196
00:07:23,199 --> 00:07:25,520
requirements are not being met

197
00:07:25,520 --> 00:07:27,440
and because there are test cases

198
00:07:27,440 --> 00:07:29,840
capturing each and every requirement

199
00:07:29,840 --> 00:07:31,840
there is immediate feedback should a

200
00:07:31,840 --> 00:07:36,000
change break some of those functionality

201
00:07:36,000 --> 00:07:38,160
the next change was to move towards

202
00:07:38,160 --> 00:07:41,199
virtual machines and microservices

203
00:07:41,199 --> 00:07:42,960
deploying on physical machines was time

204
00:07:42,960 --> 00:07:45,520
consuming and the operations team were

205
00:07:45,520 --> 00:07:48,319
constrained by the procurement process

206
00:07:48,319 --> 00:07:50,960
and the installation of those physical

207
00:07:50,960 --> 00:07:52,080
servers

208
00:07:52,080 --> 00:07:54,319
moving to virtual machines allowed new

209
00:07:54,319 --> 00:07:57,520
vms to be very easily configured and

210
00:07:57,520 --> 00:07:58,879
spun up

211
00:07:58,879 --> 00:08:00,560
allowing it to keep up with the more

212
00:08:00,560 --> 00:08:02,240
frequent deployments that are now

213
00:08:02,240 --> 00:08:04,319
happening

214
00:08:04,319 --> 00:08:07,039
and with the shift towards microservices

215
00:08:07,039 --> 00:08:08,400
architecture

216
00:08:08,400 --> 00:08:09,520
it brought

217
00:08:09,520 --> 00:08:11,120
many benefits

218
00:08:11,120 --> 00:08:13,680
rather than deploying one big monolithic

219
00:08:13,680 --> 00:08:15,759
application they're now deploying

220
00:08:15,759 --> 00:08:19,840
multiple much smaller microservices

221
00:08:19,840 --> 00:08:22,240
this provided many benefits

222
00:08:22,240 --> 00:08:24,000
such as allowing the system to be

223
00:08:24,000 --> 00:08:26,639
independently deployable so you can

224
00:08:26,639 --> 00:08:28,560
deploy the front-end services

225
00:08:28,560 --> 00:08:31,440
independently of the authentication

226
00:08:31,440 --> 00:08:33,760
service

227
00:08:33,760 --> 00:08:36,000
it also allows loose coupling which

228
00:08:36,000 --> 00:08:38,479
means that each service is not overly

229
00:08:38,479 --> 00:08:40,159
dependent

230
00:08:40,159 --> 00:08:42,958
on how the other services are defined or

231
00:08:42,958 --> 00:08:44,640
implemented

232
00:08:44,640 --> 00:08:46,240
and because they're using an agile

233
00:08:46,240 --> 00:08:48,640
methodology this is how it would look

234
00:08:48,640 --> 00:08:49,360
like

235
00:08:49,360 --> 00:08:52,640
using a microservices

236
00:08:52,640 --> 00:08:54,399
so for the first iteration you'll be

237
00:08:54,399 --> 00:08:56,800
building a skateboard so it has minimum

238
00:08:56,800 --> 00:08:58,399
micro services and they're all on

239
00:08:58,399 --> 00:09:00,160
version one

240
00:09:00,160 --> 00:09:02,480
with the next iteration more micro

241
00:09:02,480 --> 00:09:04,640
services are deployed and some of the

242
00:09:04,640 --> 00:09:06,640
existing microservices

243
00:09:06,640 --> 00:09:09,040
might get updates which is indicated by

244
00:09:09,040 --> 00:09:12,640
the increase in the version number

245
00:09:12,640 --> 00:09:14,959
the next iteration same thing

246
00:09:14,959 --> 00:09:17,360
more micro services deployed and some of

247
00:09:17,360 --> 00:09:19,760
them gets updated

248
00:09:19,760 --> 00:09:21,839
and so forth

249
00:09:21,839 --> 00:09:26,000
until you get to your final product

250
00:09:26,720 --> 00:09:28,320
one of the changes with using a

251
00:09:28,320 --> 00:09:30,720
microservices architecture is that

252
00:09:30,720 --> 00:09:33,360
instead of delivering a single jar

253
00:09:33,360 --> 00:09:36,640
there's now multiple jars involved

254
00:09:36,640 --> 00:09:39,760
and all those micro services would need

255
00:09:39,760 --> 00:09:42,959
to be maintained

256
00:09:43,680 --> 00:09:44,560
so

257
00:09:44,560 --> 00:09:46,640
that's how software development looked

258
00:09:46,640 --> 00:09:48,839
at acme corp 10 years

259
00:09:48,839 --> 00:09:52,160
ago instead of deploying every couple of

260
00:09:52,160 --> 00:09:55,519
months sam and her team now deploys

261
00:09:55,519 --> 00:09:57,920
every few weeks

262
00:09:57,920 --> 00:10:00,880
and every deploy is delivering value to

263
00:10:00,880 --> 00:10:03,200
the customer

264
00:10:03,200 --> 00:10:04,320
and because they're using a

265
00:10:04,320 --> 00:10:06,880
microservices architecture they're now

266
00:10:06,880 --> 00:10:10,240
building multiple microservices

267
00:10:10,240 --> 00:10:12,000
and as they are doing

268
00:10:12,000 --> 00:10:14,800
tdd they're now wearing the testing head

269
00:10:14,800 --> 00:10:16,560
and making sure that the software they

270
00:10:16,560 --> 00:10:20,399
deliver contain no bugs

271
00:10:20,399 --> 00:10:23,279
and it functions as per requirement

272
00:10:23,279 --> 00:10:25,360
they still have the operations team

273
00:10:25,360 --> 00:10:27,680
who's now looking after a bunch of

274
00:10:27,680 --> 00:10:29,360
virtual machines and they are

275
00:10:29,360 --> 00:10:30,959
responsible for making sure those

276
00:10:30,959 --> 00:10:33,600
virtual machines are securely hardened

277
00:10:33,600 --> 00:10:34,880
and you still have to secure the

278
00:10:34,880 --> 00:10:36,160
security team

279
00:10:36,160 --> 00:10:38,399
who's managing access control looking

280
00:10:38,399 --> 00:10:40,640
after the parameter and also performing

281
00:10:40,640 --> 00:10:44,800
security testing to find any bugs

282
00:10:44,800 --> 00:10:45,600
now

283
00:10:45,600 --> 00:10:47,440
we're up to looking back at the last 10

284
00:10:47,440 --> 00:10:48,480
years

285
00:10:48,480 --> 00:10:51,519
which has seen some drastic changes

286
00:10:51,519 --> 00:10:54,959
uh in software development

287
00:10:54,959 --> 00:10:57,680
so acne cop decided to embrace

288
00:10:57,680 --> 00:11:00,000
devops and they like and they move to it

289
00:11:00,000 --> 00:11:02,399
you build it you run it more

290
00:11:02,399 --> 00:11:04,399
they felt that the previous model wasn't

291
00:11:04,399 --> 00:11:07,040
ideal as you had the development team

292
00:11:07,040 --> 00:11:09,279
which was very focused on delivery and

293
00:11:09,279 --> 00:11:11,120
then you got the operations team who

294
00:11:11,120 --> 00:11:13,040
were tasked with maintaining the

295
00:11:13,040 --> 00:11:15,279
existing deployments and they will focus

296
00:11:15,279 --> 00:11:17,120
on stability

297
00:11:17,120 --> 00:11:18,560
and the two teams

298
00:11:18,560 --> 00:11:20,959
delivery stability were often in

299
00:11:20,959 --> 00:11:23,839
conflict so with devops they brought the

300
00:11:23,839 --> 00:11:25,839
development teams and the operations

301
00:11:25,839 --> 00:11:27,519
team together

302
00:11:27,519 --> 00:11:29,760
with the intention of improving

303
00:11:29,760 --> 00:11:31,440
deployment frequency

304
00:11:31,440 --> 00:11:34,079
and shortening the lead time between

305
00:11:34,079 --> 00:11:36,479
fixes

306
00:11:36,959 --> 00:11:38,880
and for most organizations

307
00:11:38,880 --> 00:11:40,640
there are many more people in the

308
00:11:40,640 --> 00:11:42,640
development teams than there are in

309
00:11:42,640 --> 00:11:43,760
security

310
00:11:43,760 --> 00:11:45,839
so with the shift to devops the security

311
00:11:45,839 --> 00:11:49,200
team is now unable to scale to keep up

312
00:11:49,200 --> 00:11:51,839
with the faster release cycles

313
00:11:51,839 --> 00:11:52,959
that's when

314
00:11:52,959 --> 00:11:56,160
we introduce deaf secops where we look

315
00:11:56,160 --> 00:11:58,639
at shifting security left and making it

316
00:11:58,639 --> 00:12:01,360
the developer's responsibility so now

317
00:12:01,360 --> 00:12:03,600
it's the motto of you build it you run

318
00:12:03,600 --> 00:12:06,160
it and you also secure it

319
00:12:06,160 --> 00:12:08,480
so in order to do dev setups

320
00:12:08,480 --> 00:12:10,240
security training was provided to the

321
00:12:10,240 --> 00:12:12,720
development team this was in the form of

322
00:12:12,720 --> 00:12:13,680
either

323
00:12:13,680 --> 00:12:16,079
online self-paced learning or a

324
00:12:16,079 --> 00:12:18,160
classroom based training

325
00:12:18,160 --> 00:12:20,079
the training taught developers how to

326
00:12:20,079 --> 00:12:23,040
write secure code and identify common

327
00:12:23,040 --> 00:12:24,720
vulnerabilities

328
00:12:24,720 --> 00:12:26,079
there was also the introduction of

329
00:12:26,079 --> 00:12:27,519
security tools

330
00:12:27,519 --> 00:12:30,000
to help identify security issues this

331
00:12:30,000 --> 00:12:32,800
included static code analysis software

332
00:12:32,800 --> 00:12:35,600
composition scans and dynamic code

333
00:12:35,600 --> 00:12:37,040
analysis

334
00:12:37,040 --> 00:12:39,839
and those tools were integrated into the

335
00:12:39,839 --> 00:12:41,920
build pipeline so that they could be

336
00:12:41,920 --> 00:12:45,040
automated and provide early feedback to

337
00:12:45,040 --> 00:12:47,440
the developers

338
00:12:47,440 --> 00:12:49,680
security team used to be the department

339
00:12:49,680 --> 00:12:50,880
of non

340
00:12:50,880 --> 00:12:53,839
however data scenes change and now there

341
00:12:53,839 --> 00:12:57,200
is a great uptake of open source

342
00:12:57,200 --> 00:12:58,240
software

343
00:12:58,240 --> 00:13:00,639
the graph here shows the number of java

344
00:13:00,639 --> 00:13:02,959
downloads and shows that the usage of

345
00:13:02,959 --> 00:13:06,240
open source has significantly

346
00:13:06,240 --> 00:13:08,160
increased

347
00:13:08,160 --> 00:13:10,560
and this graph shows the increase in

348
00:13:10,560 --> 00:13:12,880
open source for java

349
00:13:12,880 --> 00:13:14,160
javascript

350
00:13:14,160 --> 00:13:18,000
python and net in the last year

351
00:13:18,000 --> 00:13:20,399
so open source is great it helps speed

352
00:13:20,399 --> 00:13:22,160
up development by providing

353
00:13:22,160 --> 00:13:24,000
functionality that the teams would

354
00:13:24,000 --> 00:13:26,639
otherwise have to write themselves

355
00:13:26,639 --> 00:13:31,120
this allows them to go to market faster

356
00:13:31,120 --> 00:13:33,200
to get an idea of how much open source

357
00:13:33,200 --> 00:13:35,680
we're using i did analysis on some of

358
00:13:35,680 --> 00:13:39,680
the apps within my organization

359
00:13:39,680 --> 00:13:41,839
for one of the apps we had 12 components

360
00:13:41,839 --> 00:13:44,399
that were written in-house this was a

361
00:13:44,399 --> 00:13:45,440
java

362
00:13:45,440 --> 00:13:47,279
maven application

363
00:13:47,279 --> 00:13:49,440
so this 12 components consisted of sub

364
00:13:49,440 --> 00:13:52,079
modules and intelli libraries

365
00:13:52,079 --> 00:13:54,480
how many open source components do you

366
00:13:54,480 --> 00:13:56,399
think it used

367
00:13:56,399 --> 00:13:57,440
50

368
00:13:57,440 --> 00:13:59,920
100

369
00:14:00,320 --> 00:14:03,519
it used 268

370
00:14:03,519 --> 00:14:05,760
open source components

371
00:14:05,760 --> 00:14:07,440
and if you do a comparison just by the

372
00:14:07,440 --> 00:14:10,160
number of components

373
00:14:10,160 --> 00:14:13,600
the open source components make up 98

374
00:14:13,600 --> 00:14:16,800
of the application

375
00:14:16,800 --> 00:14:20,399
if we did a comparison by file size

376
00:14:20,399 --> 00:14:22,240
we would also get around the same

377
00:14:22,240 --> 00:14:23,519
percentages

378
00:14:23,519 --> 00:14:25,600
and i found similar ratios with the

379
00:14:25,600 --> 00:14:28,480
other applications that i analyzed

380
00:14:28,480 --> 00:14:30,240
so what this means is that today's

381
00:14:30,240 --> 00:14:33,040
development teams only write a very

382
00:14:33,040 --> 00:14:35,519
small percentage of the code that makes

383
00:14:35,519 --> 00:14:38,160
up our application

384
00:14:38,160 --> 00:14:39,760
you can almost say that today's

385
00:14:39,760 --> 00:14:42,399
development teams are now assemblers

386
00:14:42,399 --> 00:14:46,399
rather than builders so for sam at acme

387
00:14:46,399 --> 00:14:47,279
corp

388
00:14:47,279 --> 00:14:49,279
she's now only writing a very small

389
00:14:49,279 --> 00:14:51,760
percentage of the company's software

390
00:14:51,760 --> 00:14:54,320
the majority of it is written

391
00:14:54,320 --> 00:14:56,480
by some other developers

392
00:14:56,480 --> 00:14:58,800
who built those open source components

393
00:14:58,800 --> 00:15:01,839
that her systems are using

394
00:15:01,839 --> 00:15:04,160
now not all open source are created

395
00:15:04,160 --> 00:15:05,440
equal

396
00:15:05,440 --> 00:15:06,320
and

397
00:15:06,320 --> 00:15:08,880
in a state of software chain a supply

398
00:15:08,880 --> 00:15:12,399
chain report it was found that around 10

399
00:15:12,399 --> 00:15:14,480
of open source components that were

400
00:15:14,480 --> 00:15:17,040
being downloaded contain known

401
00:15:17,040 --> 00:15:19,760
vulnerabilities

402
00:15:20,240 --> 00:15:22,800
the last 10 years also saw the move to

403
00:15:22,800 --> 00:15:24,240
the cloud

404
00:15:24,240 --> 00:15:26,320
this provided a lot of flexibility to

405
00:15:26,320 --> 00:15:27,760
acne comp

406
00:15:27,760 --> 00:15:29,920
they now did not need to rent out space

407
00:15:29,920 --> 00:15:32,079
in the data center all make capital

408
00:15:32,079 --> 00:15:34,959
purchases on their physical servers

409
00:15:34,959 --> 00:15:36,639
that was all outsourced to the cloud

410
00:15:36,639 --> 00:15:38,480
providers

411
00:15:38,480 --> 00:15:39,440
they could

412
00:15:39,440 --> 00:15:41,920
also easily scale up their resources or

413
00:15:41,920 --> 00:15:44,800
scale down when needed and only pay for

414
00:15:44,800 --> 00:15:46,480
what they use

415
00:15:46,480 --> 00:15:49,279
as their systems are now no longer

416
00:15:49,279 --> 00:15:51,920
physically behind their firewalls

417
00:15:51,920 --> 00:15:54,720
they do need to be extra careful now

418
00:15:54,720 --> 00:15:56,800
with how their cloud infrastructure is

419
00:15:56,800 --> 00:15:58,000
configured

420
00:15:58,000 --> 00:16:00,800
because if done incorrectly

421
00:16:00,800 --> 00:16:03,440
everything is potentially publicly

422
00:16:03,440 --> 00:16:05,600
accessible

423
00:16:05,600 --> 00:16:07,440
i remember an example of this and this

424
00:16:07,440 --> 00:16:10,160
was with the aws s3 buckets they had a

425
00:16:10,160 --> 00:16:12,399
commission issues this was a few years

426
00:16:12,399 --> 00:16:13,519
ago

427
00:16:13,519 --> 00:16:15,199
and the issue was that

428
00:16:15,199 --> 00:16:18,079
when you set the access

429
00:16:18,079 --> 00:16:20,880
to authenticated users it didn't do what

430
00:16:20,880 --> 00:16:22,800
users thought it would

431
00:16:22,800 --> 00:16:25,199
and rather than restricting permissions

432
00:16:25,199 --> 00:16:27,199
to authenticated users within the

433
00:16:27,199 --> 00:16:28,639
organizations

434
00:16:28,639 --> 00:16:32,720
it allowed any aws authenticated user

435
00:16:32,720 --> 00:16:36,680
access to that bucket

436
00:16:36,880 --> 00:16:38,000
then

437
00:16:38,000 --> 00:16:40,079
there's also the move to containers

438
00:16:40,079 --> 00:16:42,880
this was a huge benefit to acne comp as

439
00:16:42,880 --> 00:16:46,000
container users use fuel resources

440
00:16:46,000 --> 00:16:46,800
to

441
00:16:46,800 --> 00:16:47,759
to run

442
00:16:47,759 --> 00:16:49,920
and this allows for the reduction in

443
00:16:49,920 --> 00:16:52,720
overall infrastructure resource

444
00:16:52,720 --> 00:16:55,040
it also reduces deployment time

445
00:16:55,040 --> 00:16:57,360
as containers are configured to maintain

446
00:16:57,360 --> 00:16:59,920
all configuration and its dependencies

447
00:16:59,920 --> 00:17:01,519
internally

448
00:17:01,519 --> 00:17:03,199
this allowed the developers to take

449
00:17:03,199 --> 00:17:04,959
their own configuration

450
00:17:04,959 --> 00:17:08,000
put it into code and deploy it without

451
00:17:08,000 --> 00:17:10,240
any problems

452
00:17:10,240 --> 00:17:11,760
there are additional security

453
00:17:11,760 --> 00:17:13,039
responsibilities

454
00:17:13,039 --> 00:17:14,799
the developers are now taking on with

455
00:17:14,799 --> 00:17:15,679
this

456
00:17:15,679 --> 00:17:19,280
they need to ensure containers are safe

457
00:17:19,280 --> 00:17:21,599
it is not a poison image they need to

458
00:17:21,599 --> 00:17:23,599
check that the containers do not contain

459
00:17:23,599 --> 00:17:25,599
versions of software with known

460
00:17:25,599 --> 00:17:26,880
vulnerabilities

461
00:17:26,880 --> 00:17:28,400
and they need to

462
00:17:28,400 --> 00:17:30,480
securely harden the containers and

463
00:17:30,480 --> 00:17:31,760
remove

464
00:17:31,760 --> 00:17:34,640
any unnecessary programs

465
00:17:34,640 --> 00:17:36,960
they are now responsible for the

466
00:17:36,960 --> 00:17:40,000
security configuration and patching

467
00:17:40,000 --> 00:17:42,559
of the software running within the

468
00:17:42,559 --> 00:17:44,160
container

469
00:17:44,160 --> 00:17:45,360
they've taken on some of the

470
00:17:45,360 --> 00:17:47,520
responsibilities that would have

471
00:17:47,520 --> 00:17:49,039
normally been

472
00:17:49,039 --> 00:17:51,840
normally be on the operations of the

473
00:17:51,840 --> 00:17:54,720
infrastructure team

474
00:17:55,360 --> 00:17:57,120
and there's also the move towards

475
00:17:57,120 --> 00:17:59,280
infrastructure as code

476
00:17:59,280 --> 00:18:02,640
using open source frameworks like puppet

477
00:18:02,640 --> 00:18:04,559
terraform chef

478
00:18:04,559 --> 00:18:06,480
and server

479
00:18:06,480 --> 00:18:08,720
with the move to cloud native

480
00:18:08,720 --> 00:18:10,559
we're also shifting our thinking from

481
00:18:10,559 --> 00:18:13,280
securing the parameter to having a zero

482
00:18:13,280 --> 00:18:14,880
trust network

483
00:18:14,880 --> 00:18:16,320
and because we've moved to

484
00:18:16,320 --> 00:18:18,880
infrastructure as code

485
00:18:18,880 --> 00:18:20,320
a lot of the security group

486
00:18:20,320 --> 00:18:23,280
configurations and policies

487
00:18:23,280 --> 00:18:25,440
are now the responsibilities of the

488
00:18:25,440 --> 00:18:27,200
developers

489
00:18:27,200 --> 00:18:29,520
in addition they also need to do secrets

490
00:18:29,520 --> 00:18:30,720
management

491
00:18:30,720 --> 00:18:34,080
and identity and access management

492
00:18:34,080 --> 00:18:36,320
that's a lot of secure responsibilities

493
00:18:36,320 --> 00:18:38,160
they are now undertaking

494
00:18:38,160 --> 00:18:40,960
and if any of those are done incorrectly

495
00:18:40,960 --> 00:18:44,720
it can result in a breach

496
00:18:44,720 --> 00:18:47,600
this graph here is taken from the 2020

497
00:18:47,600 --> 00:18:50,160
verizon data breach report

498
00:18:50,160 --> 00:18:51,679
it shows the different actions that

499
00:18:51,679 --> 00:18:54,400
result in breaches over the years

500
00:18:54,400 --> 00:18:56,080
you can see that physical breaches have

501
00:18:56,080 --> 00:18:58,720
stayed relatively the same

502
00:18:58,720 --> 00:19:02,799
hacking social malware and misuse have

503
00:19:02,799 --> 00:19:05,919
all decreased in the last few years

504
00:19:05,919 --> 00:19:07,679
the only action type that is

505
00:19:07,679 --> 00:19:10,880
consistently increasing year to year in

506
00:19:10,880 --> 00:19:12,240
frequency

507
00:19:12,240 --> 00:19:14,400
is error

508
00:19:14,400 --> 00:19:17,039
the fact is that people can

509
00:19:17,039 --> 00:19:18,559
and they frequently do

510
00:19:18,559 --> 00:19:21,440
make mistakes

511
00:19:21,600 --> 00:19:23,760
this next graph here shows the different

512
00:19:23,760 --> 00:19:26,400
types of errors and their trend

513
00:19:26,400 --> 00:19:28,400
in the last few years

514
00:19:28,400 --> 00:19:31,200
it shows that misconfiguration errors

515
00:19:31,200 --> 00:19:33,919
have been increasing

516
00:19:33,919 --> 00:19:36,480
could this be correlated with our move

517
00:19:36,480 --> 00:19:39,840
towards cloud native

518
00:19:40,960 --> 00:19:43,280
here's an example of a misconfiguration

519
00:19:43,280 --> 00:19:45,760
error that was discovered during a pen

520
00:19:45,760 --> 00:19:48,080
test that we did last year

521
00:19:48,080 --> 00:19:50,960
it was on a kubernetes e-steer enabled

522
00:19:50,960 --> 00:19:53,679
deployment and this application had a

523
00:19:53,679 --> 00:19:55,919
sidecar which handled all incoming

524
00:19:55,919 --> 00:19:57,039
requests

525
00:19:57,039 --> 00:20:00,400
and this site car was an envoy proxy

526
00:20:00,400 --> 00:20:03,440
this application accepted http requests

527
00:20:03,440 --> 00:20:05,200
from authorized clients

528
00:20:05,200 --> 00:20:08,240
and it uses jwt to do so

529
00:20:08,240 --> 00:20:10,400
for those who are not familiar with what

530
00:20:10,400 --> 00:20:14,960
a jwt is it stands for json web token

531
00:20:14,960 --> 00:20:18,240
it is the internal

532
00:20:18,559 --> 00:20:20,080
and sorry it is the internet standard

533
00:20:20,080 --> 00:20:22,159
for creating data with an optional

534
00:20:22,159 --> 00:20:25,600
signature of the json payload

535
00:20:25,600 --> 00:20:28,720
the payload contains information

536
00:20:28,720 --> 00:20:31,679
that assets that asserts some number of

537
00:20:31,679 --> 00:20:35,120
claims for the client

538
00:20:35,120 --> 00:20:37,440
according to the documentation the jwt

539
00:20:37,440 --> 00:20:40,000
authorization should be provided in the

540
00:20:40,000 --> 00:20:43,840
authorization header in the http request

541
00:20:43,840 --> 00:20:46,159
so this is how an incoming request

542
00:20:46,159 --> 00:20:48,640
would look like in step one

543
00:20:48,640 --> 00:20:51,760
the client requests to perform actionx

544
00:20:51,760 --> 00:20:54,080
on user's wise account

545
00:20:54,080 --> 00:20:55,840
it would also include the jwt

546
00:20:55,840 --> 00:20:57,280
authorization

547
00:20:57,280 --> 00:21:00,799
in the http request header with claims

548
00:21:00,799 --> 00:21:02,720
that it is allowed to perform action

549
00:21:02,720 --> 00:21:05,200
acts and is authorized to perform

550
00:21:05,200 --> 00:21:08,159
against user y

551
00:21:08,159 --> 00:21:10,640
in step two the sidecar

552
00:21:10,640 --> 00:21:13,039
having only the knowledge of the request

553
00:21:13,039 --> 00:21:15,280
endpoint that was being called

554
00:21:15,280 --> 00:21:16,400
check that the

555
00:21:16,400 --> 00:21:19,360
jwt authorization is valid and whether

556
00:21:19,360 --> 00:21:21,679
the client is authorized to perform that

557
00:21:21,679 --> 00:21:22,799
action

558
00:21:22,799 --> 00:21:25,679
if so the request is then passed on to

559
00:21:25,679 --> 00:21:28,000
the application

560
00:21:28,000 --> 00:21:29,280
step 3

561
00:21:29,280 --> 00:21:30,400
as the

562
00:21:30,400 --> 00:21:32,559
validity of the gwt and the

563
00:21:32,559 --> 00:21:35,760
authorization of the action is performed

564
00:21:35,760 --> 00:21:37,360
by the sidecar

565
00:21:37,360 --> 00:21:39,600
the application only needs to check if

566
00:21:39,600 --> 00:21:42,320
the user is authorized for that account

567
00:21:42,320 --> 00:21:46,080
before performing that action

568
00:21:46,080 --> 00:21:48,400
during this pen test and on inspection

569
00:21:48,400 --> 00:21:49,520
of code

570
00:21:49,520 --> 00:21:51,280
the pen tester discovered that there

571
00:21:51,280 --> 00:21:53,360
were two fields

572
00:21:53,360 --> 00:21:55,919
where the sidecar would extract the jwt

573
00:21:55,919 --> 00:21:56,799
from

574
00:21:56,799 --> 00:21:59,039
there was the authorization header as

575
00:21:59,039 --> 00:22:00,400
per what was mentioned in the

576
00:22:00,400 --> 00:22:01,840
documentation

577
00:22:01,840 --> 00:22:05,360
but there was also a query parameter

578
00:22:05,360 --> 00:22:07,200
and it was discovered

579
00:22:07,200 --> 00:22:09,840
that the requests would be honored if

580
00:22:09,840 --> 00:22:15,600
either of the two views had a valid jwt

581
00:22:15,600 --> 00:22:17,760
so it allowed for the following

582
00:22:17,760 --> 00:22:19,760
vulnerability the client could make a

583
00:22:19,760 --> 00:22:22,640
request to perform an action against an

584
00:22:22,640 --> 00:22:26,400
account that it was not authorized for

585
00:22:26,400 --> 00:22:29,919
it would include two jwt tokens one in

586
00:22:29,919 --> 00:22:32,559
the authorization header and one in the

587
00:22:32,559 --> 00:22:34,080
query parameter

588
00:22:34,080 --> 00:22:36,960
it would put a valid token in the query

589
00:22:36,960 --> 00:22:39,120
parameter but it would tamper with the

590
00:22:39,120 --> 00:22:42,000
one in the authorization header

591
00:22:42,000 --> 00:22:44,400
when the site car receives the request

592
00:22:44,400 --> 00:22:47,039
and performs its check

593
00:22:47,039 --> 00:22:49,120
it would determine that the token in the

594
00:22:49,120 --> 00:22:52,080
authorization header

595
00:22:52,080 --> 00:22:54,640
is invalid because it has contempt

596
00:22:54,640 --> 00:22:56,799
and the token in the

597
00:22:56,799 --> 00:22:58,799
query parameter is valid

598
00:22:58,799 --> 00:23:00,480
and it's authorized to perform that

599
00:23:00,480 --> 00:23:01,840
action

600
00:23:01,840 --> 00:23:03,120
so as such

601
00:23:03,120 --> 00:23:05,679
because of its implementation and having

602
00:23:05,679 --> 00:23:08,159
at least one valid token and forwards

603
00:23:08,159 --> 00:23:11,840
the request to the application

604
00:23:11,840 --> 00:23:13,760
and as the application is only reading

605
00:23:13,760 --> 00:23:17,200
the token from the authorization header

606
00:23:17,200 --> 00:23:19,120
and it assumes that the token must be

607
00:23:19,120 --> 00:23:21,280
valid when it got to this step

608
00:23:21,280 --> 00:23:24,240
it would process the tempered jwt and

609
00:23:24,240 --> 00:23:25,280
perform

610
00:23:25,280 --> 00:23:28,240
malicious action

611
00:23:28,240 --> 00:23:31,760
now this is technically not a bug

612
00:23:31,760 --> 00:23:34,000
there is a configuration option

613
00:23:34,000 --> 00:23:36,960
that is available which allows

614
00:23:36,960 --> 00:23:39,679
them to restrict checking of the jwt

615
00:23:39,679 --> 00:23:43,200
token to only the authorization header

616
00:23:43,200 --> 00:23:44,240
however

617
00:23:44,240 --> 00:23:46,400
that was not the default

618
00:23:46,400 --> 00:23:49,120
the misconfiguration here is due to

619
00:23:49,120 --> 00:23:51,520
unsafe defaults

620
00:23:51,520 --> 00:23:52,559
this is

621
00:23:52,559 --> 00:23:55,840
just one example of how misconfiguration

622
00:23:55,840 --> 00:23:58,080
can occur

623
00:23:58,080 --> 00:23:58,880
so

624
00:23:58,880 --> 00:24:01,440
here's sam today

625
00:24:01,440 --> 00:24:02,960
she creates

626
00:24:02,960 --> 00:24:04,480
a number of apps

627
00:24:04,480 --> 00:24:06,960
the bulk of those applications code are

628
00:24:06,960 --> 00:24:09,360
made up of open source components which

629
00:24:09,360 --> 00:24:11,840
are written by someone else outside of

630
00:24:11,840 --> 00:24:14,799
her organization

631
00:24:14,880 --> 00:24:17,520
those applications run as containers in

632
00:24:17,520 --> 00:24:19,840
the cloud

633
00:24:20,240 --> 00:24:22,559
so she's now wearing the operations head

634
00:24:22,559 --> 00:24:24,880
and she is responsible for

635
00:24:24,880 --> 00:24:27,039
managing the infrastructure for which

636
00:24:27,039 --> 00:24:30,400
applications run on

637
00:24:30,960 --> 00:24:32,960
as they have embedded test driven

638
00:24:32,960 --> 00:24:35,840
development she is also responsible for

639
00:24:35,840 --> 00:24:38,080
testing the applications to ensure that

640
00:24:38,080 --> 00:24:40,240
there are no bugs

641
00:24:40,240 --> 00:24:42,640
and as such she's also wearing the

642
00:24:42,640 --> 00:24:45,039
testing height

643
00:24:45,039 --> 00:24:46,799
and lastly she's also wearing the

644
00:24:46,799 --> 00:24:48,640
security hat

645
00:24:48,640 --> 00:24:51,039
as part of the you build it you run it

646
00:24:51,039 --> 00:24:53,840
and you also secure it mona she is

647
00:24:53,840 --> 00:24:56,640
responsible for securing for securing

648
00:24:56,640 --> 00:24:58,799
her applications

649
00:24:58,799 --> 00:25:00,720
now that includes making sure that there

650
00:25:00,720 --> 00:25:02,480
are no vulnerabilities

651
00:25:02,480 --> 00:25:05,360
in the applications and the containers

652
00:25:05,360 --> 00:25:06,890
making sure that um

653
00:25:06,890 --> 00:25:09,360
[Music]

654
00:25:09,360 --> 00:25:10,799
that the containers are securely

655
00:25:10,799 --> 00:25:12,799
hardened you know she has to do secrets

656
00:25:12,799 --> 00:25:14,400
management

657
00:25:14,400 --> 00:25:16,240
and identity and access management on

658
00:25:16,240 --> 00:25:18,159
there

659
00:25:18,159 --> 00:25:18,960
and

660
00:25:18,960 --> 00:25:22,159
securing her applications parameter as

661
00:25:22,159 --> 00:25:26,400
part of a zero trust network

662
00:25:26,559 --> 00:25:29,919
on top of that she is now working with a

663
00:25:29,919 --> 00:25:31,919
shorter release cycle and needs to

664
00:25:31,919 --> 00:25:34,559
continuously deliver value

665
00:25:34,559 --> 00:25:36,880
to the customer

666
00:25:36,880 --> 00:25:39,360
she's doing that not only for the system

667
00:25:39,360 --> 00:25:41,120
that she is working on

668
00:25:41,120 --> 00:25:43,360
but also

669
00:25:43,360 --> 00:25:45,039
for all the previous systems and

670
00:25:45,039 --> 00:25:47,279
applications hurricane created in the

671
00:25:47,279 --> 00:25:48,320
past

672
00:25:48,320 --> 00:25:52,240
which they are still responsible for

673
00:25:52,240 --> 00:25:54,880
now there's a lot of responsibilities on

674
00:25:54,880 --> 00:25:58,000
sam and the development team as compared

675
00:25:58,000 --> 00:26:01,840
to 20 years ago

676
00:26:01,840 --> 00:26:04,880
so to summarize

677
00:26:04,880 --> 00:26:07,679
software development has come a long way

678
00:26:07,679 --> 00:26:09,360
in the last 20 years

679
00:26:09,360 --> 00:26:11,600
we're now able to deliver

680
00:26:11,600 --> 00:26:14,240
a lot faster

681
00:26:14,240 --> 00:26:16,559
due to scaling challenges and given that

682
00:26:16,559 --> 00:26:19,520
most organizations have more developers

683
00:26:19,520 --> 00:26:21,600
than they do for testers

684
00:26:21,600 --> 00:26:23,440
operations engineers and security

685
00:26:23,440 --> 00:26:25,520
engineers we're shifting a lot more

686
00:26:25,520 --> 00:26:30,080
responsibilities onto the developers

687
00:26:30,159 --> 00:26:32,080
we're not building our systems from the

688
00:26:32,080 --> 00:26:33,520
ground up anymore

689
00:26:33,520 --> 00:26:35,840
instead we resemble them

690
00:26:35,840 --> 00:26:38,000
using open source components that's

691
00:26:38,000 --> 00:26:40,400
written by someone else

692
00:26:40,400 --> 00:26:42,720
we run them on containers which could be

693
00:26:42,720 --> 00:26:45,200
based off images that we don't own

694
00:26:45,200 --> 00:26:47,039
and we configure our infrastructure

695
00:26:47,039 --> 00:26:49,360
using open source frameworks and we run

696
00:26:49,360 --> 00:26:52,480
them in the cloud

697
00:26:52,480 --> 00:26:53,520
as such

698
00:26:53,520 --> 00:26:54,880
staying hard

699
00:26:54,880 --> 00:26:57,520
staying secure is hard

700
00:26:57,520 --> 00:26:59,200
there's a higher likelihood of

701
00:26:59,200 --> 00:27:01,600
introducing vulnerabilities or mis

702
00:27:01,600 --> 00:27:04,080
configuration into your system

703
00:27:04,080 --> 00:27:05,360
and

704
00:27:05,360 --> 00:27:07,840
i believe it's not always your

705
00:27:07,840 --> 00:27:10,960
developer's form

706
00:27:10,960 --> 00:27:14,200
thank you

