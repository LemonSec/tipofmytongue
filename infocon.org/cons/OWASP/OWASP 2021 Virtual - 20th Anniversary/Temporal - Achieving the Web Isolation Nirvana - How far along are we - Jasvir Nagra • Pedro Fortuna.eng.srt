1
00:00:01,410 --> 00:00:06,030
[Music]

2
00:00:08,559 --> 00:00:11,920
thank you uh good morning good afternoon

3
00:00:11,920 --> 00:00:14,400
and good evening everyone it's an honor

4
00:00:14,400 --> 00:00:17,279
to be here today so welcome to our talk

5
00:00:17,279 --> 00:00:19,520
on web isolation

6
00:00:19,520 --> 00:00:21,920
so my name is pedo fortuna i'm founder

7
00:00:21,920 --> 00:00:23,840
and cto at j scrambler and i've

8
00:00:23,840 --> 00:00:26,240
basically been working in security for

9
00:00:26,240 --> 00:00:30,198
as long as i can remember

10
00:00:32,159 --> 00:00:35,040
i guess i'm i'm jazz i've been uh that

11
00:00:35,040 --> 00:00:37,920
was a wonderful uh read out of the bio

12
00:00:37,920 --> 00:00:40,000
uh had i known i would have inserted

13
00:00:40,000 --> 00:00:42,719
more silly things in there uh

14
00:00:42,719 --> 00:00:44,399
i've been working in security for as

15
00:00:44,399 --> 00:00:47,920
long as pedro has known i guess

16
00:00:48,960 --> 00:00:51,199
so we want to start this talk with a

17
00:00:51,199 --> 00:00:52,800
little story

18
00:00:52,800 --> 00:00:56,719
pedro is 2 am for some of us

19
00:00:56,719 --> 00:00:59,120
are you sure you're gonna dive into this

20
00:00:59,120 --> 00:01:03,120
oh i think we we need to risk it

21
00:01:03,120 --> 00:01:06,320
so this story is about a chip uh that

22
00:01:06,320 --> 00:01:09,439
most of you may have heard about um

23
00:01:09,439 --> 00:01:13,200
the titanic that's right you guessed it

24
00:01:13,200 --> 00:01:15,840
um it was built in belfast in their

25
00:01:15,840 --> 00:01:18,880
famous shipyards and i was actually

26
00:01:18,880 --> 00:01:21,600
lucky enough to visit during the wasp

27
00:01:21,600 --> 00:01:25,200
upset eu of 2017.

28
00:01:25,200 --> 00:01:27,200
but we want to talk about how it was

29
00:01:27,200 --> 00:01:30,079
built many people don't know this but

30
00:01:30,079 --> 00:01:32,400
when it was built it was bleeding edge

31
00:01:32,400 --> 00:01:34,479
in many ways

32
00:01:34,479 --> 00:01:37,520
so the bottom of the ship was split into

33
00:01:37,520 --> 00:01:41,200
16 major watertight compartments

34
00:01:41,200 --> 00:01:43,920
a technique to ensure the stability of

35
00:01:43,920 --> 00:01:46,880
the ship despite the presence of damage

36
00:01:46,880 --> 00:01:49,360
and it could remain afloat with at least

37
00:01:49,360 --> 00:01:51,680
two adjacent watertight compartments

38
00:01:51,680 --> 00:01:53,119
completely flooded

39
00:01:53,119 --> 00:01:54,880
that's like the worst situation they

40
00:01:54,880 --> 00:01:57,439
could imagine back then so it was deemed

41
00:01:57,439 --> 00:02:00,560
to be unsinkable

42
00:02:00,560 --> 00:02:02,960
but depending on the exact location of

43
00:02:02,960 --> 00:02:06,079
the hit at best it could withstand the

44
00:02:06,079 --> 00:02:08,399
flooding of up to four compartments

45
00:02:08,399 --> 00:02:10,800
without sinking

46
00:02:10,800 --> 00:02:13,520
so you know how the story ended uh it

47
00:02:13,520 --> 00:02:16,000
collided with an iceberg that resulted

48
00:02:16,000 --> 00:02:18,239
in the flooding of the forward six

49
00:02:18,239 --> 00:02:20,000
compartments

50
00:02:20,000 --> 00:02:22,400
even though it did not end well

51
00:02:22,400 --> 00:02:24,000
compartmentalization

52
00:02:24,000 --> 00:02:26,640
was a great idea and it's still used in

53
00:02:26,640 --> 00:02:28,720
chip design to this day

54
00:02:28,720 --> 00:02:31,519
so the basic idea is that damage on the

55
00:02:31,519 --> 00:02:33,599
single section of the ship does not

56
00:02:33,599 --> 00:02:36,879
compromise the whole ship so the problem

57
00:02:36,879 --> 00:02:39,680
of the with the titanic was that its

58
00:02:39,680 --> 00:02:42,080
implementation was flawed

59
00:02:42,080 --> 00:02:44,959
but we'll tell you more about that later

60
00:02:44,959 --> 00:02:46,720
that's a pretty naughty cliffhanger

61
00:02:46,720 --> 00:02:48,879
there peter uh

62
00:02:48,879 --> 00:02:50,959
tell us a bit about the history of web

63
00:02:50,959 --> 00:02:53,360
isolation

64
00:02:53,360 --> 00:02:54,800
sure um

65
00:02:54,800 --> 00:02:57,040
so the the first real attempt at

66
00:02:57,040 --> 00:02:59,040
isolation inside the browser was

67
00:02:59,040 --> 00:03:01,280
introduced by the same origin policy in

68
00:03:01,280 --> 00:03:02,640
95

69
00:03:02,640 --> 00:03:04,640
where interactions between two different

70
00:03:04,640 --> 00:03:07,840
origins are restricted

71
00:03:07,840 --> 00:03:08,959
um

72
00:03:08,959 --> 00:03:11,680
but you can do this you can embed a

73
00:03:11,680 --> 00:03:14,319
third-party code directly

74
00:03:14,319 --> 00:03:16,879
from a third-party server

75
00:03:16,879 --> 00:03:20,319
into your executing context um and

76
00:03:20,319 --> 00:03:23,440
actually this code has the same level of

77
00:03:23,440 --> 00:03:26,959
privilege as any other same origin code

78
00:03:26,959 --> 00:03:27,920
so

79
00:03:27,920 --> 00:03:29,920
where's the restriction

80
00:03:29,920 --> 00:03:32,799
actually the same origin policy is quite

81
00:03:32,799 --> 00:03:36,080
complex you can embed

82
00:03:36,080 --> 00:03:38,560
uh which was the example i just has just

83
00:03:38,560 --> 00:03:39,760
shown you

84
00:03:39,760 --> 00:03:43,360
what is restricted is some writing to

85
00:03:43,360 --> 00:03:46,000
and reading raw data from cross-origin

86
00:03:46,000 --> 00:03:49,360
domains so the reality is that it is

87
00:03:49,360 --> 00:03:52,480
very complex with lots of exceptions

88
00:03:52,480 --> 00:03:53,680
and

89
00:03:53,680 --> 00:03:55,120
to this day

90
00:03:55,120 --> 00:03:57,439
most developers do not fully understand

91
00:03:57,439 --> 00:03:59,680
it which is a frequent source of

92
00:03:59,680 --> 00:04:02,560
security issues

93
00:04:02,640 --> 00:04:05,040
two years later we were given the

94
00:04:05,040 --> 00:04:07,840
iframes with which we can isolate two

95
00:04:07,840 --> 00:04:09,840
cross-origin documents of scripts

96
00:04:09,840 --> 00:04:12,879
running on the same web app

97
00:04:12,879 --> 00:04:14,959
but soon enough people just felt the

98
00:04:14,959 --> 00:04:17,839
need to poke a hole through it so coming

99
00:04:17,839 --> 00:04:19,199
up with different ways to have

100
00:04:19,199 --> 00:04:21,040
communication between the two

101
00:04:21,040 --> 00:04:23,040
cross-origin documents

102
00:04:23,040 --> 00:04:26,160
and only 13 years later we threw the

103
00:04:26,160 --> 00:04:29,040
towel finally and made it official with

104
00:04:29,040 --> 00:04:31,280
the introduction of the web messaging

105
00:04:31,280 --> 00:04:35,759
api that gives us the post message

106
00:04:35,759 --> 00:04:38,560
possibility

107
00:04:39,680 --> 00:04:40,479
but

108
00:04:40,479 --> 00:04:42,479
this didn't solve every problem that we

109
00:04:42,479 --> 00:04:45,360
had um iframes actually had too much

110
00:04:45,360 --> 00:04:47,280
power uh they could for instance

111
00:04:47,280 --> 00:04:49,759
navigate away the top window among other

112
00:04:49,759 --> 00:04:52,560
things so it took a while but 13 years

113
00:04:52,560 --> 00:04:56,320
later iframe sandboxing was here and

114
00:04:56,320 --> 00:04:58,560
introduced

115
00:04:58,560 --> 00:05:01,199
which would greatly restrict what an

116
00:05:01,199 --> 00:05:04,320
iframe document uh is allowed to do

117
00:05:04,320 --> 00:05:06,880
so but we we also have a bunch of

118
00:05:06,880 --> 00:05:08,320
configuration attributes that you're

119
00:05:08,320 --> 00:05:10,320
seeing in the screen that gives us the

120
00:05:10,320 --> 00:05:11,280
options

121
00:05:11,280 --> 00:05:15,039
to relax some of the restrictions

122
00:05:15,280 --> 00:05:17,360
so almost at the same time we got csp

123
00:05:17,360 --> 00:05:19,680
version 1 with which we could set a

124
00:05:19,680 --> 00:05:22,240
domain based allow listing

125
00:05:22,240 --> 00:05:24,960
later it was found broken

126
00:05:24,960 --> 00:05:26,960
and you can read all about it in this

127
00:05:26,960 --> 00:05:28,000
paper

128
00:05:28,000 --> 00:05:30,160
plus it's hard to maintain so later

129
00:05:30,160 --> 00:05:32,400
versions fix that but are not

130
00:05:32,400 --> 00:05:35,039
straightforward to set up so the main

131
00:05:35,039 --> 00:05:37,600
limitation we see with csp is that it

132
00:05:37,600 --> 00:05:40,320
does not cover all the behavioral angles

133
00:05:40,320 --> 00:05:43,360
if you allow a script it can pretty much

134
00:05:43,360 --> 00:05:46,080
do everything it wants uh you cannot

135
00:05:46,080 --> 00:05:48,560
restrict further than just allow it or

136
00:05:48,560 --> 00:05:50,160
disallow it

137
00:05:50,160 --> 00:05:54,160
with the exception of the network parts

138
00:05:55,440 --> 00:05:57,520
so the problem with this isolation and

139
00:05:57,520 --> 00:05:59,520
defense mechanisms is that people will

140
00:05:59,520 --> 00:06:00,560
fight them

141
00:06:00,560 --> 00:06:02,560
and will push for ways to relax them

142
00:06:02,560 --> 00:06:04,160
into what they need to make the

143
00:06:04,160 --> 00:06:05,520
application work

144
00:06:05,520 --> 00:06:07,600
so things like jsonp

145
00:06:07,600 --> 00:06:10,479
uh and cores are good examples but if

146
00:06:10,479 --> 00:06:12,400
the isolation mechanisms were more

147
00:06:12,400 --> 00:06:14,720
granular and configurable perhaps we

148
00:06:14,720 --> 00:06:16,479
wouldn't feel the need to open holes in

149
00:06:16,479 --> 00:06:19,360
these protection mechanisms

150
00:06:19,360 --> 00:06:21,759
so here's uh the timeline of these

151
00:06:21,759 --> 00:06:22,880
features

152
00:06:22,880 --> 00:06:25,520
uh you'll notice there's a huge gap

153
00:06:25,520 --> 00:06:26,720
between

154
00:06:26,720 --> 00:06:29,039
97 and

155
00:06:29,039 --> 00:06:30,800
2009

156
00:06:30,800 --> 00:06:32,960
which makes you wonder what the browser

157
00:06:32,960 --> 00:06:34,639
people were doing

158
00:06:34,639 --> 00:06:37,520
during these days

159
00:06:38,560 --> 00:06:39,680
so

160
00:06:39,680 --> 00:06:42,479
this is a great historical perspective

161
00:06:42,479 --> 00:06:45,360
what browsers provide us with there's a

162
00:06:45,360 --> 00:06:49,039
whole lot of these uh fantastic uh basic

163
00:06:49,039 --> 00:06:50,479
primitives all of the things that pedro

164
00:06:50,479 --> 00:06:52,560
talked about seems to give us a lot of

165
00:06:52,560 --> 00:06:55,680
what we need uh to make our units of

166
00:06:55,680 --> 00:06:58,319
isolation smaller and stronger so that

167
00:06:58,319 --> 00:06:59,840
we can provide

168
00:06:59,840 --> 00:07:02,720
integrity to to our web pages that's

169
00:07:02,720 --> 00:07:04,639
what we are looking for and yes they

170
00:07:04,639 --> 00:07:06,560
have some problems that we talked about

171
00:07:06,560 --> 00:07:09,039
but can we do something on top of these

172
00:07:09,039 --> 00:07:11,919
primitives um and build something

173
00:07:11,919 --> 00:07:13,599
stronger and i think that the answer is

174
00:07:13,599 --> 00:07:15,599
yes and you shouldn't just believe me

175
00:07:15,599 --> 00:07:18,000
we the community has built all kinds of

176
00:07:18,000 --> 00:07:19,440
interesting

177
00:07:19,440 --> 00:07:22,800
mechanisms of isolation on top of what

178
00:07:22,800 --> 00:07:25,840
browsers provide

179
00:07:29,599 --> 00:07:32,400
and so i it's hard to figure out a good

180
00:07:32,400 --> 00:07:35,440
way of of uh of

181
00:07:35,440 --> 00:07:37,840
visualizing this but this is how i think

182
00:07:37,840 --> 00:07:38,800
about it

183
00:07:38,800 --> 00:07:40,319
um

184
00:07:40,319 --> 00:07:42,080
roughly speaking you can divide up the

185
00:07:42,080 --> 00:07:45,039
approaches for doing isolation into

186
00:07:45,039 --> 00:07:46,319
either things that are doing

187
00:07:46,319 --> 00:07:48,560
transformation where you change the

188
00:07:48,560 --> 00:07:51,520
source code or virtualization where you

189
00:07:51,520 --> 00:07:53,680
change the environment so i've plotted

190
00:07:53,680 --> 00:07:55,199
three of these projects here there's

191
00:07:55,199 --> 00:07:58,160
google kaha with which i was uh

192
00:07:58,160 --> 00:08:00,319
intimately involved which uses a

193
00:08:00,319 --> 00:08:02,000
combination of virtualization and

194
00:08:02,000 --> 00:08:04,479
transformation to build the sandbox this

195
00:08:04,479 --> 00:08:06,879
js reg which tried to do the same thing

196
00:08:06,879 --> 00:08:08,639
but uh the

197
00:08:08,639 --> 00:08:10,879
use more lightweight transformations and

198
00:08:10,879 --> 00:08:13,280
then there's jscrambler

199
00:08:13,280 --> 00:08:14,479
which

200
00:08:14,479 --> 00:08:16,960
which essentially does uh relies more

201
00:08:16,960 --> 00:08:19,039
heavily on virtualization but

202
00:08:19,039 --> 00:08:21,280
essentially all of the approaches that

203
00:08:21,280 --> 00:08:24,319
you will find on doing web isolation

204
00:08:24,319 --> 00:08:26,479
fall somewhere on this spectrum and the

205
00:08:26,479 --> 00:08:28,000
trade-offs that you're making is a

206
00:08:28,000 --> 00:08:30,639
trade-off between how much work you want

207
00:08:30,639 --> 00:08:32,799
to do and how

208
00:08:32,799 --> 00:08:35,839
house how strongly you want to protect

209
00:08:35,839 --> 00:08:37,679
uh the the assets that you are

210
00:08:37,679 --> 00:08:38,719
protecting

211
00:08:38,719 --> 00:08:40,559
uh so you know to protect your ship you

212
00:08:40,559 --> 00:08:42,080
can either virtualize you can make the

213
00:08:42,080 --> 00:08:44,000
dangerous apis that your application

214
00:08:44,000 --> 00:08:46,480
uses uh be less dangerous so you can

215
00:08:46,480 --> 00:08:48,080
transform it and just remove the

216
00:08:48,080 --> 00:08:50,000
dangerous parts entirely if we continue

217
00:08:50,000 --> 00:08:50,959
with the

218
00:08:50,959 --> 00:08:52,399
um

219
00:08:52,399 --> 00:08:54,080
with the ship analogy right you

220
00:08:54,080 --> 00:08:55,839
basically want to keep the meaning of

221
00:08:55,839 --> 00:08:59,200
your application uh the the same

222
00:08:59,200 --> 00:09:00,560
so let's have a look at what

223
00:09:00,560 --> 00:09:03,760
transformation looks like

224
00:09:03,920 --> 00:09:06,399
so this is transformation uh

225
00:09:06,399 --> 00:09:08,160
take a simple javascript application it

226
00:09:08,160 --> 00:09:10,320
consists of functions like alert that

227
00:09:10,320 --> 00:09:11,839
come from somewhere else you can think

228
00:09:11,839 --> 00:09:14,240
of this as the the system call

229
00:09:14,240 --> 00:09:16,880
equivalent but for web browsers right

230
00:09:16,880 --> 00:09:19,200
you have strings and arrays

231
00:09:19,200 --> 00:09:20,240
uh

232
00:09:20,240 --> 00:09:22,320
the native types and you have functions

233
00:09:22,320 --> 00:09:24,880
which you have written yourself i'm not

234
00:09:24,880 --> 00:09:27,680
going to dwell on this uh very long but

235
00:09:27,680 --> 00:09:30,480
uh this is my most favorite uh

236
00:09:30,480 --> 00:09:33,839
transformation like web um most favorite

237
00:09:33,839 --> 00:09:35,920
programming language transformation it's

238
00:09:35,920 --> 00:09:38,880
the basis of almost all language

239
00:09:38,880 --> 00:09:41,040
transformation based sandboxes that you

240
00:09:41,040 --> 00:09:42,080
can see

241
00:09:42,080 --> 00:09:43,680
um

242
00:09:43,680 --> 00:09:45,839
what it does here is let's say you

243
00:09:45,839 --> 00:09:47,360
transform

244
00:09:47,360 --> 00:09:49,920
the functions that you are that can be

245
00:09:49,920 --> 00:09:51,680
malicious so that

246
00:09:51,680 --> 00:09:54,240
whenever they reference a system call or

247
00:09:54,240 --> 00:09:55,920
a native object they don't get the

248
00:09:55,920 --> 00:09:58,480
powerful objects from your browser or

249
00:09:58,480 --> 00:10:00,480
from your environment instead they only

250
00:10:00,480 --> 00:10:03,760
get that which the caller controls now

251
00:10:03,760 --> 00:10:05,680
i'm oversimplifying here those of you in

252
00:10:05,680 --> 00:10:07,680
the audience may already be saying but

253
00:10:07,680 --> 00:10:09,360
jazz you haven't thought about eval you

254
00:10:09,360 --> 00:10:10,480
haven't thought about walking the

255
00:10:10,480 --> 00:10:12,160
prototype chain and you're absolutely

256
00:10:12,160 --> 00:10:13,839
right but

257
00:10:13,839 --> 00:10:15,760
this is the basis

258
00:10:15,760 --> 00:10:18,399
for creating a pure language

259
00:10:18,399 --> 00:10:19,920
sandbox and it should give you a little

260
00:10:19,920 --> 00:10:22,320
bit of a flavor now this is not just

261
00:10:22,320 --> 00:10:23,839
limited to

262
00:10:23,839 --> 00:10:27,200
uh to javascript it also works for uh

263
00:10:27,200 --> 00:10:30,079
for html

264
00:10:30,839 --> 00:10:33,839
where um

265
00:10:41,440 --> 00:10:43,360
it also works for html

266
00:10:43,360 --> 00:10:45,680
uh and actually for html it can even be

267
00:10:45,680 --> 00:10:47,360
a little bit easier

268
00:10:47,360 --> 00:10:50,560
because the power that is necessary uh

269
00:10:50,560 --> 00:10:54,160
that is expressed by html or by css is

270
00:10:54,160 --> 00:10:58,000
less specifically uh imagine if

271
00:10:58,000 --> 00:11:01,360
instead of um

272
00:11:01,519 --> 00:11:03,200
instead of some

273
00:11:03,200 --> 00:11:04,720
um

274
00:11:04,720 --> 00:11:07,760
css rule that was changing every div on

275
00:11:07,760 --> 00:11:10,320
the page or every bold tag to be the

276
00:11:10,320 --> 00:11:11,519
color blue

277
00:11:11,519 --> 00:11:14,240
if you simply prepended like gadget one

278
00:11:14,240 --> 00:11:17,440
two three to it now it only applies to a

279
00:11:17,440 --> 00:11:19,920
specific part of the third party code

280
00:11:19,920 --> 00:11:21,519
now that using that kind of

281
00:11:21,519 --> 00:11:24,399
transformation you can limit the amount

282
00:11:24,399 --> 00:11:26,560
of control that some third party has

283
00:11:26,560 --> 00:11:28,880
over your entire application that's the

284
00:11:28,880 --> 00:11:30,880
transformation tool in our in our

285
00:11:30,880 --> 00:11:34,480
toolbox the second one is uh is

286
00:11:34,480 --> 00:11:35,920
virtualization

287
00:11:35,920 --> 00:11:38,880
now i call it virtualization but you all

288
00:11:38,880 --> 00:11:41,040
really already know this as polyfills

289
00:11:41,040 --> 00:11:42,800
and you all know polyfills they're they

290
00:11:42,800 --> 00:11:45,519
present a feature that is not

291
00:11:45,519 --> 00:11:47,839
present in a particular browser version

292
00:11:47,839 --> 00:11:50,399
virtualization is like poly tools but we

293
00:11:50,399 --> 00:11:52,320
need them even when such features

294
00:11:52,320 --> 00:11:55,680
already exist in uh in the application

295
00:11:55,680 --> 00:11:57,040
but it's not redundant because we want

296
00:11:57,040 --> 00:11:59,279
to override the default behavior for

297
00:11:59,279 --> 00:12:00,320
example

298
00:12:00,320 --> 00:12:02,000
let's say if you have

299
00:12:02,000 --> 00:12:05,040
um you have a date and all browsers do

300
00:12:05,040 --> 00:12:07,200
you can just provide them to the third

301
00:12:07,200 --> 00:12:09,839
party application to as virtualized

302
00:12:09,839 --> 00:12:12,160
authority maybe you don't care about

303
00:12:12,160 --> 00:12:15,680
timing attacks uh from this particular

304
00:12:15,680 --> 00:12:17,839
from this particular third party

305
00:12:17,839 --> 00:12:20,320
uh you can also have uh

306
00:12:20,320 --> 00:12:22,320
uh xhrs

307
00:12:22,320 --> 00:12:25,360
now xhrs you might want to provide a

308
00:12:25,360 --> 00:12:28,160
virtualized version of xhr that always

309
00:12:28,160 --> 00:12:30,880
proxies content uh so that it always

310
00:12:30,880 --> 00:12:32,800
goes to your servers only or can't

311
00:12:32,800 --> 00:12:34,800
connect to arbitrary servers out in the

312
00:12:34,800 --> 00:12:37,360
wild now

313
00:12:37,360 --> 00:12:38,399
you can tell

314
00:12:38,399 --> 00:12:40,480
that uh when i'm talking about activex

315
00:12:40,480 --> 00:12:41,920
i'm talking about a browser that's

316
00:12:41,920 --> 00:12:44,320
thankfully long still instead but the

317
00:12:44,320 --> 00:12:46,480
point that i wanted to make here is that

318
00:12:46,480 --> 00:12:48,560
if your browser happens to not even

319
00:12:48,560 --> 00:12:50,560
provide a powerful object now every

320
00:12:50,560 --> 00:12:52,639
browser now provides xhr but there was a

321
00:12:52,639 --> 00:12:54,880
time when that was not true you could

322
00:12:54,880 --> 00:12:58,000
use this same technique to

323
00:12:58,000 --> 00:12:59,600
to use something more powerful like

324
00:12:59,600 --> 00:13:03,120
activex to provide a version of xhr

325
00:13:03,120 --> 00:13:06,720
um to to to your application now

326
00:13:06,720 --> 00:13:08,959
similarly you can provide like

327
00:13:08,959 --> 00:13:11,600
attenuated versions of location and

328
00:13:11,600 --> 00:13:13,760
document what you are essentially doing

329
00:13:13,760 --> 00:13:15,440
here is providing

330
00:13:15,440 --> 00:13:18,240
virtualized versions of the original

331
00:13:18,240 --> 00:13:20,560
application

332
00:13:20,560 --> 00:13:22,160
uh and the trick the hard part the

333
00:13:22,160 --> 00:13:24,160
strong part here for security is that

334
00:13:24,160 --> 00:13:25,760
you have to create polyfills in a way

335
00:13:25,760 --> 00:13:28,079
that can't be bypassed and all of the

336
00:13:28,079 --> 00:13:29,839
projects that use virtualization that

337
00:13:29,839 --> 00:13:31,680
i've mentioned come up with different

338
00:13:31,680 --> 00:13:34,639
ways of achieving that

339
00:13:34,639 --> 00:13:36,079
now i'm going to

340
00:13:36,079 --> 00:13:38,320
speed through this but if you look at

341
00:13:38,320 --> 00:13:40,160
the things that i'm talking about here

342
00:13:40,160 --> 00:13:41,920
there are three principles i wanted to

343
00:13:41,920 --> 00:13:43,519
take away from how

344
00:13:43,519 --> 00:13:45,839
native browser isolation features are

345
00:13:45,839 --> 00:13:48,959
used uh and what what properties you

346
00:13:48,959 --> 00:13:51,920
look for in these um in these native

347
00:13:51,920 --> 00:13:52,959
browser

348
00:13:52,959 --> 00:13:53,680
uh

349
00:13:53,680 --> 00:13:55,440
isolation mechanisms

350
00:13:55,440 --> 00:13:59,600
the first one is compartment size

351
00:13:59,600 --> 00:14:03,120
the the size of the unit of isolation

352
00:14:03,120 --> 00:14:06,320
varies uh between each one of the

353
00:14:06,320 --> 00:14:07,519
uh

354
00:14:07,519 --> 00:14:09,440
natively provided browser versions you

355
00:14:09,440 --> 00:14:11,680
can have entire domains or origins you

356
00:14:11,680 --> 00:14:13,920
can have whole pages you can have just

357
00:14:13,920 --> 00:14:15,519
the iframes you can have individual

358
00:14:15,519 --> 00:14:16,880
scripts you can have individual

359
00:14:16,880 --> 00:14:18,880
functions you can have individual

360
00:14:18,880 --> 00:14:22,320
actions just a specific api call now the

361
00:14:22,320 --> 00:14:23,680
smaller the compartment the more

362
00:14:23,680 --> 00:14:26,160
resilient your web application is the

363
00:14:26,160 --> 00:14:27,839
trade-off that you're making here as you

364
00:14:27,839 --> 00:14:30,720
can imagine is more decisions the more

365
00:14:30,720 --> 00:14:32,720
decisions you need to make the longer

366
00:14:32,720 --> 00:14:35,199
the setup time is and the more difficult

367
00:14:35,199 --> 00:14:37,839
the configuration effort

368
00:14:37,839 --> 00:14:39,360
the second thing that you need to keep

369
00:14:39,360 --> 00:14:41,360
in mind is

370
00:14:41,360 --> 00:14:44,240
the isolation material the stronger

371
00:14:44,240 --> 00:14:46,079
material is of course the more resilient

372
00:14:46,079 --> 00:14:47,519
your web app will be

373
00:14:47,519 --> 00:14:49,440
but drilling holes

374
00:14:49,440 --> 00:14:52,320
into even strong materials weakens them

375
00:14:52,320 --> 00:14:54,639
and you start to see

376
00:14:54,639 --> 00:14:57,199
hints back to the story that pedro began

377
00:14:57,199 --> 00:15:00,160
with iframe csp mechanisms that we use

378
00:15:00,160 --> 00:15:03,519
to do web isolation are weakened not

379
00:15:03,519 --> 00:15:05,360
because because we have to poke holes in

380
00:15:05,360 --> 00:15:08,639
them to get what we want done done those

381
00:15:08,639 --> 00:15:10,320
holes are there because web browser

382
00:15:10,320 --> 00:15:12,240
implementations are broken they're there

383
00:15:12,240 --> 00:15:14,320
because the isolation mechanisms that

384
00:15:14,320 --> 00:15:17,040
are provided by the native browsers

385
00:15:17,040 --> 00:15:19,440
don't always align with the users and

386
00:15:19,440 --> 00:15:21,760
developers come up with creative ways to

387
00:15:21,760 --> 00:15:24,320
poke holes in them

388
00:15:24,320 --> 00:15:26,160
the third one is it's a little bit

389
00:15:26,160 --> 00:15:27,040
subtle

390
00:15:27,040 --> 00:15:28,959
uh it's it's

391
00:15:28,959 --> 00:15:31,839
it's visibility and user friendliness uh

392
00:15:31,839 --> 00:15:33,839
sometimes i joke developers are people

393
00:15:33,839 --> 00:15:34,720
too

394
00:15:34,720 --> 00:15:36,079
um

395
00:15:36,079 --> 00:15:38,560
they need apis that work well for the

396
00:15:38,560 --> 00:15:41,680
use cases that they are building and for

397
00:15:41,680 --> 00:15:44,560
their threat model now some materials

398
00:15:44,560 --> 00:15:48,160
like the same origin policy and iframes

399
00:15:48,160 --> 00:15:50,160
work for threat models that have not

400
00:15:50,160 --> 00:15:52,480
kept up with how web developers develop

401
00:15:52,480 --> 00:15:53,440
today

402
00:15:53,440 --> 00:15:54,800
they don't provide you with any

403
00:15:54,800 --> 00:15:56,800
visibility you want

404
00:15:56,800 --> 00:16:00,560
yeah it's certainly not out of the box

405
00:16:03,120 --> 00:16:04,959
i think that this brings us back to our

406
00:16:04,959 --> 00:16:07,120
cliffhanger

407
00:16:07,120 --> 00:16:10,399
yeah and we are back so like we said the

408
00:16:10,399 --> 00:16:11,920
implementation was flawed and we

409
00:16:11,920 --> 00:16:13,839
promised to explain why

410
00:16:13,839 --> 00:16:16,639
so uh in short um

411
00:16:16,639 --> 00:16:18,399
with the titanic

412
00:16:18,399 --> 00:16:21,279
there were four problems at least so the

413
00:16:21,279 --> 00:16:24,000
compartments were still too big

414
00:16:24,000 --> 00:16:27,360
um only 16 compartments

415
00:16:27,360 --> 00:16:30,000
so any compartment being compromised it

416
00:16:30,000 --> 00:16:30,880
was

417
00:16:30,880 --> 00:16:33,759
like a huge portion of the ship

418
00:16:33,759 --> 00:16:35,759
the materials were definitely not

419
00:16:35,759 --> 00:16:38,160
iceberg ready

420
00:16:38,160 --> 00:16:39,120
it was

421
00:16:39,120 --> 00:16:42,160
stronger materials were needed

422
00:16:42,160 --> 00:16:45,040
the damage model was incomplete or

423
00:16:45,040 --> 00:16:46,480
incorrect

424
00:16:46,480 --> 00:16:48,959
which translating to our contacts it

425
00:16:48,959 --> 00:16:52,320
means that the threat model was wrong

426
00:16:52,320 --> 00:16:54,320
and lack of visibility

427
00:16:54,320 --> 00:16:56,880
so for obvious reasons no one spotted

428
00:16:56,880 --> 00:16:59,120
the iceberg in time

429
00:16:59,120 --> 00:16:59,920
so

430
00:16:59,920 --> 00:17:02,800
visibility and analytics

431
00:17:02,800 --> 00:17:05,520
which is an interpretation of what is

432
00:17:05,520 --> 00:17:07,520
happening what what what you can be

433
00:17:07,520 --> 00:17:10,400
seeing uh are def uh

434
00:17:10,400 --> 00:17:13,760
definitely essential

435
00:17:13,760 --> 00:17:17,039
so now we have time for some demos um

436
00:17:17,039 --> 00:17:19,919
during so we're doing four demos four

437
00:17:19,919 --> 00:17:22,000
small demos and we have the same

438
00:17:22,000 --> 00:17:24,559
scenario throughout these demos uh we

439
00:17:24,559 --> 00:17:27,839
are using a login page for a

440
00:17:27,839 --> 00:17:30,720
mock-up banking website

441
00:17:30,720 --> 00:17:33,760
and this website uses a third-party

442
00:17:33,760 --> 00:17:36,000
chatbot service

443
00:17:36,000 --> 00:17:38,559
so in some runs we'll replace the

444
00:17:38,559 --> 00:17:41,039
regular chatbot scripts

445
00:17:41,039 --> 00:17:43,600
uh for a compromise version of that

446
00:17:43,600 --> 00:17:44,640
script

447
00:17:44,640 --> 00:17:46,799
which will then attempt to leak the

448
00:17:46,799 --> 00:17:49,600
login credentials of the user

449
00:17:49,600 --> 00:17:51,919
so you'll see a few options in the

450
00:17:51,919 --> 00:17:54,480
bottom that allows me to reload the

451
00:17:54,480 --> 00:17:56,480
website with different demo

452
00:17:56,480 --> 00:17:58,240
configuration okay

453
00:17:58,240 --> 00:18:01,440
so let's do it let's start with the

454
00:18:01,440 --> 00:18:02,720
baseline

455
00:18:02,720 --> 00:18:06,160
so here we'll show you uh an example of

456
00:18:06,160 --> 00:18:10,480
what happens when isolation is lacking

457
00:18:10,480 --> 00:18:12,799
so this is the demo website it contains

458
00:18:12,799 --> 00:18:15,360
mostly first party code and the third

459
00:18:15,360 --> 00:18:17,440
party script that i told you about it's

460
00:18:17,440 --> 00:18:19,679
not really doing anything in particular

461
00:18:19,679 --> 00:18:21,679
it's just a mock-up script

462
00:18:21,679 --> 00:18:22,150
and

463
00:18:22,150 --> 00:18:23,840
[Music]

464
00:18:23,840 --> 00:18:25,760
and now

465
00:18:25,760 --> 00:18:28,160
what we are going to do is replace this

466
00:18:28,160 --> 00:18:29,760
script with the militia

467
00:18:29,760 --> 00:18:30,640
and

468
00:18:30,640 --> 00:18:35,039
that is the icon of the chatbot service

469
00:18:35,440 --> 00:18:37,919
and next uh i'll be replacing this

470
00:18:37,919 --> 00:18:41,600
script by the malicious version of

471
00:18:41,600 --> 00:18:43,280
this script like represents the

472
00:18:43,280 --> 00:18:46,879
compromise version of the scripts

473
00:18:52,880 --> 00:18:55,840
this is the compromise version so

474
00:18:55,840 --> 00:18:57,440
it has

475
00:18:57,440 --> 00:18:59,760
is overriding the on submit event

476
00:18:59,760 --> 00:19:02,000
handler with the malicious version which

477
00:19:02,000 --> 00:19:03,440
is collecting

478
00:19:03,440 --> 00:19:05,840
the username and password from the the

479
00:19:05,840 --> 00:19:09,679
form and xhring it to a malicious domain

480
00:19:09,679 --> 00:19:12,320
in this case malicious dash api.js

481
00:19:12,320 --> 00:19:15,120
grammar dot com

482
00:19:16,160 --> 00:19:17,010
so

483
00:19:17,010 --> 00:19:18,799
[Music]

484
00:19:18,799 --> 00:19:19,760
let us

485
00:19:19,760 --> 00:19:20,960
log in

486
00:19:20,960 --> 00:19:24,600
and see what happens

487
00:19:25,840 --> 00:19:27,760
we have a

488
00:19:27,760 --> 00:19:31,840
dashboard for the the attacker um

489
00:19:31,840 --> 00:19:33,520
and i'll show you

490
00:19:33,520 --> 00:19:35,520
this is the the dashboard for the

491
00:19:35,520 --> 00:19:36,799
attacker

492
00:19:36,799 --> 00:19:39,120
the drop server and

493
00:19:39,120 --> 00:19:41,840
the password username and password were

494
00:19:41,840 --> 00:19:45,919
correctly exfiltrated to this dashboard

495
00:19:45,919 --> 00:19:48,240
okay so the problem here is obvious it's

496
00:19:48,240 --> 00:19:50,960
lack of isolation the third party could

497
00:19:50,960 --> 00:19:54,559
grab the credentials and accelerate them

498
00:19:54,559 --> 00:19:57,120
so what we are going to do next is to

499
00:19:57,120 --> 00:20:01,440
load the iframe in and i uh to load the

500
00:20:01,440 --> 00:20:06,679
compromised scripts inside an iframe

501
00:20:15,280 --> 00:20:16,640
so

502
00:20:16,640 --> 00:20:19,360
here we go

503
00:20:19,440 --> 00:20:21,440
so basically we now loaded the malicious

504
00:20:21,440 --> 00:20:24,720
slip so you see an error uh i'll explain

505
00:20:24,720 --> 00:20:27,440
in a bit so the malicious script is

506
00:20:27,440 --> 00:20:29,360
loaded inside the iframe

507
00:20:29,360 --> 00:20:32,840
so it doesn't have access to the form

508
00:20:32,840 --> 00:20:35,600
altogether the iframe is loaded from a

509
00:20:35,600 --> 00:20:38,000
subdomain so it's cross origin and you

510
00:20:38,000 --> 00:20:42,080
benefit from the same origin policy

511
00:20:43,440 --> 00:20:46,240
so here you are

512
00:20:46,400 --> 00:20:48,559
and here is the codes so he couldn't

513
00:20:48,559 --> 00:20:50,320
find the form

514
00:20:50,320 --> 00:20:53,039
and event handler to uh

515
00:20:53,039 --> 00:20:54,400
override

516
00:20:54,400 --> 00:20:57,520
so hence the error that you are seeing

517
00:20:57,520 --> 00:20:58,400
okay

518
00:20:58,400 --> 00:21:00,559
so uh even though we mitigated the

519
00:21:00,559 --> 00:21:02,640
problem this can potentially require

520
00:21:02,640 --> 00:21:04,880
re-engineering of the app

521
00:21:04,880 --> 00:21:07,280
because we need to move uh these

522
00:21:07,280 --> 00:21:09,600
third-party scripts to iframes

523
00:21:09,600 --> 00:21:12,960
and and we need uh and perhaps we even

524
00:21:12,960 --> 00:21:14,640
need the the collaboration of the

525
00:21:14,640 --> 00:21:17,280
service provider re-engineering might be

526
00:21:17,280 --> 00:21:19,679
a bit complex and require a whole new

527
00:21:19,679 --> 00:21:22,400
protocol to post message things back and

528
00:21:22,400 --> 00:21:23,520
forth

529
00:21:23,520 --> 00:21:26,000
and some services will not even work

530
00:21:26,000 --> 00:21:28,320
properly if they are isolated in an

531
00:21:28,320 --> 00:21:29,440
iframe

532
00:21:29,440 --> 00:21:32,320
so an analytics service for instance

533
00:21:32,320 --> 00:21:35,200
expects direct access to the full dom of

534
00:21:35,200 --> 00:21:38,240
the web app um so by moving that to an

535
00:21:38,240 --> 00:21:40,240
iframe we are transforming uh

536
00:21:40,240 --> 00:21:42,159
asynchronous

537
00:21:42,159 --> 00:21:43,520
events to

538
00:21:43,520 --> 00:21:45,919
async and that can create uh race

539
00:21:45,919 --> 00:21:47,840
conditions and all sorts of nasty

540
00:21:47,840 --> 00:21:49,760
problems that we need to solve

541
00:21:49,760 --> 00:21:52,559
um so it's no wonder that most websites

542
00:21:52,559 --> 00:21:54,799
just end up adding scripts directly to

543
00:21:54,799 --> 00:21:57,280
the main window and they expect that

544
00:21:57,280 --> 00:21:59,280
otherwise they will claim that they they

545
00:21:59,280 --> 00:22:00,080
just

546
00:22:00,080 --> 00:22:02,559
won't work

547
00:22:02,799 --> 00:22:07,919
so third uh uses kaha um hey jaz uh why

548
00:22:07,919 --> 00:22:10,880
don't you do this one sounds great to me

549
00:22:10,880 --> 00:22:12,880
so we're gonna do the same thing

550
00:22:12,880 --> 00:22:14,000
um

551
00:22:14,000 --> 00:22:16,480
we turn on the compromise script now

552
00:22:16,480 --> 00:22:18,000
remember the

553
00:22:18,000 --> 00:22:20,799
uh and we run kaha here the script that

554
00:22:20,799 --> 00:22:22,559
we're about to compromise isn't supposed

555
00:22:22,559 --> 00:22:24,400
to have access to the network it's to do

556
00:22:24,400 --> 00:22:27,600
its job normally and when we enable kaha

557
00:22:27,600 --> 00:22:30,320
actually i'm using a a subsequent uh

558
00:22:30,320 --> 00:22:32,400
follow-up to kaha called secure atma

559
00:22:32,400 --> 00:22:34,240
script here it's derived from caja what

560
00:22:34,240 --> 00:22:37,840
we do is we create a component

561
00:22:37,840 --> 00:22:40,480
and we white list that component

562
00:22:40,480 --> 00:22:43,120
inside this component we provide just

563
00:22:43,120 --> 00:22:45,200
the apis that are needed

564
00:22:45,200 --> 00:22:47,600
in this particular case it's just create

565
00:22:47,600 --> 00:22:50,799
element and append child and now

566
00:22:50,799 --> 00:22:53,520
when the script runs it is able to

567
00:22:53,520 --> 00:22:55,280
continue a proper script is able to

568
00:22:55,280 --> 00:22:57,760
continue to run the same way

569
00:22:57,760 --> 00:23:00,320
and log the user in but because the

570
00:23:00,320 --> 00:23:02,960
compromise script did not get access to

571
00:23:02,960 --> 00:23:05,039
the ability to exfiltrate data as you

572
00:23:05,039 --> 00:23:07,200
can see no new passwords ended up on the

573
00:23:07,200 --> 00:23:08,880
drop server

574
00:23:08,880 --> 00:23:11,120
the important thing to recognize here is

575
00:23:11,120 --> 00:23:14,159
that it provides this a similar kind of

576
00:23:14,159 --> 00:23:16,480
capability that we got

577
00:23:16,480 --> 00:23:20,640
from the iframe version but because uh

578
00:23:20,640 --> 00:23:23,039
because kaha uses the transformation

579
00:23:23,039 --> 00:23:25,600
technique that i was showing you earlier

580
00:23:25,600 --> 00:23:27,919
it can continue to provide synchronous

581
00:23:27,919 --> 00:23:31,039
access to these apis the downside is

582
00:23:31,039 --> 00:23:34,320
that you need to now have a list of

583
00:23:34,320 --> 00:23:36,960
a white list of all of the apis you're

584
00:23:36,960 --> 00:23:39,440
going to call ahead of time so that you

585
00:23:39,440 --> 00:23:42,480
can create this sandbox properly

586
00:23:42,480 --> 00:23:45,039
how about webpage integrity

587
00:23:45,039 --> 00:23:48,880
so to to avoid uh these caveats

588
00:23:48,880 --> 00:23:51,919
we developed a sandboxing solution that

589
00:23:51,919 --> 00:23:54,559
can seamlessly be integrated into any

590
00:23:54,559 --> 00:23:56,720
web app so we're seeing the dashboard

591
00:23:56,720 --> 00:23:59,039
which is right now completely wiped

592
00:23:59,039 --> 00:24:01,679
clean and we need to add an agent to the

593
00:24:01,679 --> 00:24:03,600
page and we immediately we get

594
00:24:03,600 --> 00:24:05,440
visibility on what third parties are

595
00:24:05,440 --> 00:24:07,840
doing and we can use rules to either

596
00:24:07,840 --> 00:24:10,799
allow or disallow such behaviors

597
00:24:10,799 --> 00:24:11,840
um

598
00:24:11,840 --> 00:24:12,720
so

599
00:24:12,720 --> 00:24:15,440
so the dashboard is empty and right now

600
00:24:15,440 --> 00:24:16,880
i'm reloading

601
00:24:16,880 --> 00:24:20,480
uh the page with the agent uh and to see

602
00:24:20,480 --> 00:24:23,520
what's what's going on okay

603
00:24:23,520 --> 00:24:25,679
so i've done that and immediately i get

604
00:24:25,679 --> 00:24:26,799
an alert

605
00:24:26,799 --> 00:24:29,440
which tells me that the on submit event

606
00:24:29,440 --> 00:24:31,120
handler was

607
00:24:31,120 --> 00:24:33,919
overwritten this is the form that was

608
00:24:33,919 --> 00:24:36,640
compromised and this is the attacker's

609
00:24:36,640 --> 00:24:39,120
uh new on submit function

610
00:24:39,120 --> 00:24:41,200
which i already explained before what it

611
00:24:41,200 --> 00:24:44,799
does so right now it's not being blocked

612
00:24:44,799 --> 00:24:46,240
but we will do that this is the

613
00:24:46,240 --> 00:24:48,400
confirmation of the file that has done

614
00:24:48,400 --> 00:24:49,760
it

615
00:24:49,760 --> 00:24:52,320
and essentially this is it

616
00:24:52,320 --> 00:24:55,200
uh let's move forward see what what else

617
00:24:55,200 --> 00:24:56,960
is is going on

618
00:24:56,960 --> 00:25:01,000
so i'll log in

619
00:25:02,000 --> 00:25:05,600
and here's the exfiltration notification

620
00:25:05,600 --> 00:25:07,039
okay so the

621
00:25:07,039 --> 00:25:10,159
malicious dash the api.json.com

622
00:25:10,159 --> 00:25:11,919
was contacted then we see the email

623
00:25:11,919 --> 00:25:14,320
password and domain information was

624
00:25:14,320 --> 00:25:15,919
passed

625
00:25:15,919 --> 00:25:18,559
using the same compromised file

626
00:25:18,559 --> 00:25:19,440
okay

627
00:25:19,440 --> 00:25:21,440
so the next step

628
00:25:21,440 --> 00:25:22,240
and

629
00:25:22,240 --> 00:25:24,000
here you are you can have confirmation

630
00:25:24,000 --> 00:25:25,760
two

631
00:25:25,760 --> 00:25:29,120
sets of credentials were stolen already

632
00:25:29,120 --> 00:25:31,520
so here are the rules we were just

633
00:25:31,520 --> 00:25:34,320
mitigating the exfiltration of the

634
00:25:34,320 --> 00:25:36,799
credentials first so any network

635
00:25:36,799 --> 00:25:40,799
requests towards malicious api.json.com

636
00:25:40,799 --> 00:25:43,200
will be alerted and blocked

637
00:25:43,200 --> 00:25:44,480
and

638
00:25:44,480 --> 00:25:46,159
i already have the rule i just need to

639
00:25:46,159 --> 00:25:48,880
enable it and apply the configuration

640
00:25:48,880 --> 00:25:52,240
and wait a bit for the deployment

641
00:25:52,240 --> 00:25:56,159
uh so now we will start blocking the

642
00:25:56,159 --> 00:25:58,720
exfiltration

643
00:25:58,720 --> 00:26:01,600
just takes a bit

644
00:26:08,880 --> 00:26:11,840
and uh to save us some time i'll just

645
00:26:11,840 --> 00:26:14,559
i'll probably just fast forward this a

646
00:26:14,559 --> 00:26:16,000
little bit

647
00:26:16,000 --> 00:26:18,799
so what will happen is

648
00:26:18,799 --> 00:26:20,880
the on submit poisoning is still there

649
00:26:20,880 --> 00:26:22,400
because we haven't done anything

650
00:26:22,400 --> 00:26:26,559
regarding that um but the excitation was

651
00:26:26,559 --> 00:26:27,840
blocked

652
00:26:27,840 --> 00:26:31,360
so the next thing that we'll do is to

653
00:26:31,360 --> 00:26:34,240
actually get rid of the uh on submit

654
00:26:34,240 --> 00:26:35,520
poisoning

655
00:26:35,520 --> 00:26:38,480
so any behavioral change to a form in

656
00:26:38,480 --> 00:26:41,360
this page will be alerted and blocked

657
00:26:41,360 --> 00:26:43,279
so we have the rule

658
00:26:43,279 --> 00:26:45,919
enabling it applying it

659
00:26:45,919 --> 00:26:48,559
and here

660
00:26:51,600 --> 00:26:54,320
again in the login page and we'll see a

661
00:26:54,320 --> 00:26:57,120
notification

662
00:26:58,320 --> 00:26:59,200
that

663
00:26:59,200 --> 00:27:01,279
gives us confirmation that the on submit

664
00:27:01,279 --> 00:27:03,840
uh event handling uh

665
00:27:03,840 --> 00:27:05,600
was correctly

666
00:27:05,600 --> 00:27:06,720
blocked

667
00:27:06,720 --> 00:27:07,679
okay

668
00:27:07,679 --> 00:27:08,880
um

669
00:27:08,880 --> 00:27:11,440
so the the demo may lead you to think

670
00:27:11,440 --> 00:27:14,000
that we need to find about things and

671
00:27:14,000 --> 00:27:16,320
only then block it but the rules the

672
00:27:16,320 --> 00:27:18,799
rules engine actually allows you to set

673
00:27:18,799 --> 00:27:21,120
allow lists beforehand

674
00:27:21,120 --> 00:27:22,559
uh

675
00:27:22,559 --> 00:27:24,240
but you can name one script that needs

676
00:27:24,240 --> 00:27:25,760
access to the form fields and then you

677
00:27:25,760 --> 00:27:28,480
can preventably say only these scripts

678
00:27:28,480 --> 00:27:31,600
can access the the forms

679
00:27:31,600 --> 00:27:35,279
so let's move quick quicker

680
00:27:35,279 --> 00:27:36,080
okay

681
00:27:36,080 --> 00:27:38,240
so the talk is coming to an end but we

682
00:27:38,240 --> 00:27:39,840
still need to address the challenges

683
00:27:39,840 --> 00:27:40,960
ahead

684
00:27:40,960 --> 00:27:43,520
so to understand that the challenges

685
00:27:43,520 --> 00:27:45,919
it helps understanding what we have been

686
00:27:45,919 --> 00:27:48,159
doing wrong so in terms of browser-based

687
00:27:48,159 --> 00:27:49,840
security features

688
00:27:49,840 --> 00:27:51,840
that provide isolation things have moved

689
00:27:51,840 --> 00:27:54,559
slow and erectively and the reason is

690
00:27:54,559 --> 00:27:57,120
because that was never one feature whose

691
00:27:57,120 --> 00:27:59,360
purpose was to provide full isolation

692
00:27:59,360 --> 00:28:02,240
for browser-based apps so isolation was

693
00:28:02,240 --> 00:28:03,840
more about

694
00:28:03,840 --> 00:28:06,320
stitching together a bunch of different

695
00:28:06,320 --> 00:28:07,760
mechanisms

696
00:28:07,760 --> 00:28:10,399
like csp or same origin policy and try

697
00:28:10,399 --> 00:28:13,120
to cover as much surface as possible so

698
00:28:13,120 --> 00:28:16,080
this is both complex and error prone and

699
00:28:16,080 --> 00:28:19,120
inevitably leaves some holes or blind

700
00:28:19,120 --> 00:28:20,240
spots

701
00:28:20,240 --> 00:28:22,159
so beyond the browser there were very

702
00:28:22,159 --> 00:28:23,760
few initiatives that tried to come up

703
00:28:23,760 --> 00:28:25,679
with a holistic approach for client-side

704
00:28:25,679 --> 00:28:28,159
web isolation one such solution was

705
00:28:28,159 --> 00:28:31,039
google kaha but sadly eventually was

706
00:28:31,039 --> 00:28:34,000
discontinued and more recently we have j

707
00:28:34,000 --> 00:28:35,919
scrambler's web page integrity which we

708
00:28:35,919 --> 00:28:38,880
have been working on

709
00:28:42,960 --> 00:28:45,200
you are muted just

710
00:28:45,200 --> 00:28:47,279
so obviously if that's what happened in

711
00:28:47,279 --> 00:28:49,440
the last 20 years what we need to do in

712
00:28:49,440 --> 00:28:51,279
the next 20 years is actually follow

713
00:28:51,279 --> 00:28:52,559
through on this

714
00:28:52,559 --> 00:28:54,399
and provide a single holistic

715
00:28:54,399 --> 00:28:56,399
client-side web solution that covers all

716
00:28:56,399 --> 00:28:58,559
of these angles for this we need a broad

717
00:28:58,559 --> 00:29:00,640
coherent plan and these three principles

718
00:29:00,640 --> 00:29:01,919
that we've been talking about reducing

719
00:29:01,919 --> 00:29:03,840
the size of the compartment making the

720
00:29:03,840 --> 00:29:05,279
units stronger and more developer

721
00:29:05,279 --> 00:29:06,240
friendly

722
00:29:06,240 --> 00:29:08,399
aligned with how the web is used today

723
00:29:08,399 --> 00:29:11,520
is the way to cover the next uh 20 years

724
00:29:11,520 --> 00:29:13,200
as we were building this pedro and i

725
00:29:13,200 --> 00:29:15,679
joked uh the way to make this ship

726
00:29:15,679 --> 00:29:18,159
unsinkable is to give it wings so that

727
00:29:18,159 --> 00:29:19,520
it can fly

728
00:29:19,520 --> 00:29:20,559
um

729
00:29:20,559 --> 00:29:23,840
not sure how feasible that is but where

730
00:29:23,840 --> 00:29:27,200
are we thank you we have parts of the

731
00:29:27,200 --> 00:29:29,120
solution like the one we've been working

732
00:29:29,120 --> 00:29:29,840
on

733
00:29:29,840 --> 00:29:32,080
uh ambitious plans take time and there's

734
00:29:32,080 --> 00:29:34,399
a lot of the pieces here that are coming

735
00:29:34,399 --> 00:29:36,080
together in spite of the analogy the

736
00:29:36,080 --> 00:29:38,640
plan is not to build an unsinkable ship

737
00:29:38,640 --> 00:29:40,960
but to lift web application security a

738
00:29:40,960 --> 00:29:42,640
little bit out of the water

739
00:29:42,640 --> 00:29:44,799
so we call on the security community to

740
00:29:44,799 --> 00:29:46,880
join us and hopefully we'll meet you all

741
00:29:46,880 --> 00:29:48,080
in the future

742
00:29:48,080 --> 00:29:49,440
uh and we can

743
00:29:49,440 --> 00:29:50,720
give this ship

744
00:29:50,720 --> 00:29:52,799
wins

745
00:29:52,799 --> 00:29:54,640
so that's all we have for today thank

746
00:29:54,640 --> 00:29:57,039
you we also like to pay our respects to

747
00:29:57,039 --> 00:29:59,440
the late sir clive sinclair he was an

748
00:29:59,440 --> 00:30:02,240
inventor and a genius and personally he

749
00:30:02,240 --> 00:30:04,559
is responsible for me pursuing a career

750
00:30:04,559 --> 00:30:06,240
in computer science

751
00:30:06,240 --> 00:30:08,720
it was a huge loss for a generation that

752
00:30:08,720 --> 00:30:10,799
fell in love with computers because of

753
00:30:10,799 --> 00:30:12,480
his inventions

754
00:30:12,480 --> 00:30:15,279
thank you

