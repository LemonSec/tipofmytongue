1
00:00:04,300 --> 00:00:20,640
[Music]

2
00:00:18,530 --> 00:00:21,990
okay well I have a fair amount<font color="#CCCCCC"> of</font>

3
00:00:20,640 --> 00:00:27,510
<font color="#CCCCCC">material to</font><font color="#E5E5E5"> go through I hope I get</font>

4
00:00:21,990 --> 00:00:30,839
through<font color="#CCCCCC"> most of it</font><font color="#E5E5E5"> and here</font><font color="#CCCCCC"> we go so if</font>

5
00:00:27,510 --> 00:00:33,410
you guys ready<font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> I'm my</font><font color="#CCCCCC"> name</font><font color="#E5E5E5"> is</font>

6
00:00:30,840 --> 00:00:36,960
skip Hoff Smith I work for critical<font color="#E5E5E5"> Bleu</font>

7
00:00:33,410 --> 00:00:39,089
and we are a mobile API protection

8
00:00:36,960 --> 00:00:42,300
company<font color="#E5E5E5"> we've been</font><font color="#CCCCCC"> around for over 10</font>

9
00:00:39,090 --> 00:00:44,129
years<font color="#CCCCCC"> we do a lot of</font><font color="#E5E5E5"> kind of low-level</font>

10
00:00:42,300 --> 00:00:46,559
<font color="#E5E5E5">close to the hardware software</font>

11
00:00:44,129 --> 00:00:49,379
<font color="#CCCCCC">optimization and we've taken</font><font color="#E5E5E5"> some of</font>

12
00:00:46,559 --> 00:00:51,930
<font color="#CCCCCC">that expertise</font><font color="#E5E5E5"> and applied it to mobile</font>

13
00:00:49,379 --> 00:00:53,849
API security<font color="#CCCCCC"> I actually started</font><font color="#E5E5E5"> off as a</font>

14
00:00:51,930 --> 00:00:56,809
chip designer and I've been trying<font color="#E5E5E5"> like</font>

15
00:00:53,850 --> 00:00:58,739
heck to<font color="#E5E5E5"> work my way out</font><font color="#CCCCCC"> of chip design</font>

16
00:00:56,809 --> 00:01:01,080
<font color="#E5E5E5">did a lot</font><font color="#CCCCCC"> of work with custom</font>

17
00:00:58,739 --> 00:01:03,030
accelerators<font color="#E5E5E5"> trade-offs between hardware</font>

18
00:01:01,080 --> 00:01:05,370
and<font color="#CCCCCC"> software</font><font color="#E5E5E5"> custom acceleration</font>

19
00:01:03,030 --> 00:01:08,070
software design drove us<font color="#E5E5E5"> drove us</font>

20
00:01:05,370 --> 00:01:10,369
critical<font color="#E5E5E5"> blew</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> embedded and Android</font>

21
00:01:08,070 --> 00:01:13,589
optimization on some exotic platforms

22
00:01:10,369 --> 00:01:16,979
<font color="#CCCCCC">one of the last projects I did</font><font color="#E5E5E5"> was on an</font>

23
00:01:13,590 --> 00:01:20,220
HSM<font color="#CCCCCC"> to</font><font color="#E5E5E5"> accelerate crypto so that kind of</font>

24
00:01:16,979 --> 00:01:21,658
got<font color="#CCCCCC"> us into</font><font color="#E5E5E5"> the mobile world in the</font>

25
00:01:20,220 --> 00:01:25,048
security space<font color="#CCCCCC"> so we put</font><font color="#E5E5E5"> them together</font>

26
00:01:21,659 --> 00:01:26,820
<font color="#E5E5E5">to launch actually our first product my</font>

27
00:01:25,049 --> 00:01:29,280
role at critical<font color="#CCCCCC"> Bleu is growth hacker</font>

28
00:01:26,820 --> 00:01:31,139
for approve which is an awesome<font color="#CCCCCC"> job to</font>

29
00:01:29,280 --> 00:01:33,750
have because it<font color="#CCCCCC"> basically means I can do</font>

30
00:01:31,140 --> 00:01:35,490
<font color="#E5E5E5">whatever I want</font><font color="#CCCCCC"> to help grow the product</font>

31
00:01:33,750 --> 00:01:38,420
so I can go out<font color="#CCCCCC"> and talk to</font><font color="#E5E5E5"> people like</font>

32
00:01:35,490 --> 00:01:41,939
<font color="#CCCCCC">you</font><font color="#E5E5E5"> guys I can write blogs I can</font>

33
00:01:38,420 --> 00:01:44,130
actually hack code<font color="#CCCCCC"> make features happen</font>

34
00:01:41,939 --> 00:01:47,309
on the product so it's a<font color="#E5E5E5"> really cool</font><font color="#CCCCCC"> job</font>

35
00:01:44,130 --> 00:01:49,589
<font color="#CCCCCC">I do blog on medium also</font><font color="#E5E5E5"> on critical</font>

36
00:01:47,310 --> 00:01:51,149
<font color="#CCCCCC">blues' approved blog site feel free to</font>

37
00:01:49,590 --> 00:01:52,799
go check<font color="#E5E5E5"> out</font><font color="#CCCCCC"> our website at I approved</font>

38
00:01:51,149 --> 00:01:53,939
<font color="#E5E5E5">on Io</font>

39
00:01:52,799 --> 00:01:57,030
what I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk to you about</font>

40
00:01:53,939 --> 00:01:59,249
today<font color="#CCCCCC"> is a hypothetical</font><font color="#E5E5E5"> company called</font>

41
00:01:57,030 --> 00:02:01,560
ship fast they operate a delivery

42
00:01:59,249 --> 00:02:03,469
service where a bunch of<font color="#E5E5E5"> shippers can</font>

43
00:02:01,560 --> 00:02:06,210
just pop online<font color="#E5E5E5"> with an app and just</font>

44
00:02:03,469 --> 00:02:08,818
crowdsource deliveries I'm in kind<font color="#E5E5E5"> of a</font>

45
00:02:06,210 --> 00:02:11,430
new burleigh fashion<font color="#CCCCCC"> it's hypothetical</font>

46
00:02:08,818 --> 00:02:13,170
<font color="#E5E5E5">it's all open source code we use for</font>

47
00:02:11,430 --> 00:02:16,430
demonstration<font color="#E5E5E5"> purposes and it's all</font>

48
00:02:13,170 --> 00:02:18,540
available on github<font color="#CCCCCC"> there is a</font><font color="#E5E5E5"> an evil</font>

49
00:02:16,430 --> 00:02:21,420
<font color="#E5E5E5">add-on that gives shippers an edge</font>

50
00:02:18,540 --> 00:02:22,709
called the ship<font color="#E5E5E5"> Raider web application</font>

51
00:02:21,420 --> 00:02:25,500
which I'll be using<font color="#CCCCCC"> and it basically</font>

52
00:02:22,710 --> 00:02:29,129
<font color="#E5E5E5">will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> a back and forth about how the</font>

53
00:02:25,500 --> 00:02:29,770
API will evolve to<font color="#E5E5E5"> ship fast tries to</font>

54
00:02:29,129 --> 00:02:34,179
prevent

55
00:02:29,770 --> 00:02:35,770
<font color="#CCCCCC">Reiter from doing certain things at</font><font color="#E5E5E5"> this</font>

56
00:02:34,180 --> 00:02:38,620
<font color="#E5E5E5">point I would usually regale you with a</font>

57
00:02:35,770 --> 00:02:41,020
story about how fast<font color="#CCCCCC"> APRs are growing</font>

58
00:02:38,620 --> 00:02:44,530
I'm sure you all<font color="#E5E5E5"> know that what I</font><font color="#CCCCCC"> really</font>

59
00:02:41,020 --> 00:02:46,780
want to focus on is how<font color="#CCCCCC"> the apps are</font>

60
00:02:44,530 --> 00:02:48,940
evolving and<font color="#CCCCCC"> how that combined with</font>

61
00:02:46,780 --> 00:02:51,100
<font color="#CCCCCC">api's is really</font><font color="#E5E5E5"> shifting the way data is</font>

62
00:02:48,940 --> 00:02:53,859
<font color="#E5E5E5">flowing so used to be you'd get a very</font>

63
00:02:51,100 --> 00:02:56,440
<font color="#E5E5E5">simple web application</font><font color="#CCCCCC"> there would be a</font>

64
00:02:53,860 --> 00:02:58,360
simple<font color="#CCCCCC"> browser client it would be really</font>

65
00:02:56,440 --> 00:03:01,540
<font color="#E5E5E5">mostly just about presenting information</font>

66
00:02:58,360 --> 00:03:04,840
<font color="#E5E5E5">presenting a web screen</font><font color="#CCCCCC"> as you move into</font>

67
00:03:01,540 --> 00:03:06,850
native<font color="#E5E5E5"> mobile apps and say single page</font>

68
00:03:04,840 --> 00:03:09,040
web apps<font color="#CCCCCC"> more and</font><font color="#E5E5E5"> more the</font><font color="#CCCCCC"> business</font>

69
00:03:06,850 --> 00:03:11,290
logic migrates<font color="#E5E5E5"> on to the browser</font>

70
00:03:09,040 --> 00:03:14,880
platform<font color="#E5E5E5"> or the device platform if it's</font>

71
00:03:11,290 --> 00:03:17,049
a mobile API<font color="#E5E5E5"> and and now the</font>

72
00:03:14,880 --> 00:03:18,880
applications<font color="#CCCCCC"> themselves are demanding a</font>

73
00:03:17,050 --> 00:03:20,590
<font color="#E5E5E5">lot more data</font><font color="#CCCCCC"> there are a lot more open</font>

74
00:03:18,880 --> 00:03:22,690
ended a lot more interactive<font color="#E5E5E5"> so there's</font>

75
00:03:20,590 --> 00:03:25,060
a lot of<font color="#CCCCCC"> data passing back and forth</font>

76
00:03:22,690 --> 00:03:29,560
<font color="#E5E5E5">across</font><font color="#CCCCCC"> these API</font><font color="#E5E5E5"> so securing your API is</font>

77
00:03:25,060 --> 00:03:31,960
is pretty important api's make<font color="#E5E5E5"> reverse</font>

78
00:03:29,560 --> 00:03:33,670
<font color="#E5E5E5">engineering things you know as easy as</font>

79
00:03:31,960 --> 00:03:35,260
<font color="#E5E5E5">can</font><font color="#CCCCCC"> be if it's a</font><font color="#E5E5E5"> public</font><font color="#CCCCCC"> API it's</font>

80
00:03:33,670 --> 00:03:38,019
probably<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> well documented so you</font>

81
00:03:35,260 --> 00:03:41,109
can just go and see exactly how<font color="#CCCCCC"> api's</font>

82
00:03:38,020 --> 00:03:44,170
are<font color="#E5E5E5"> being called</font><font color="#CCCCCC"> if it's not public but</font>

83
00:03:41,110 --> 00:03:46,060
<font color="#CCCCCC">it's in a structured style like rest if</font>

84
00:03:44,170 --> 00:03:47,769
<font color="#E5E5E5">you can find a hook in</font><font color="#CCCCCC"> to say a get</font>

85
00:03:46,060 --> 00:03:49,690
<font color="#CCCCCC">operation you can</font><font color="#E5E5E5"> tamper with the verb</font>

86
00:03:47,770 --> 00:03:52,510
<font color="#E5E5E5">and try a delete operation and see if</font>

87
00:03:49,690 --> 00:03:54,300
that works so getting at these<font color="#CCCCCC"> api is if</font>

88
00:03:52,510 --> 00:03:56,500
you're an<font color="#E5E5E5"> attacker is pretty easy</font>

89
00:03:54,300 --> 00:03:57,670
<font color="#E5E5E5">oftentimes the implementations leave a</font>

90
00:03:56,500 --> 00:04:01,600
little<font color="#E5E5E5"> bit to be desired</font>

91
00:03:57,670 --> 00:04:03,309
<font color="#E5E5E5">leaky api's will disclose information</font><font color="#CCCCCC"> of</font>

92
00:04:01,600 --> 00:04:04,660
<font color="#E5E5E5">course on what they return but also if</font>

93
00:04:03,310 --> 00:04:07,030
you<font color="#E5E5E5"> can force errors you get a lot of</font>

94
00:04:04,660 --> 00:04:10,000
<font color="#CCCCCC">information about</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> as well and a lot</font>

95
00:04:07,030 --> 00:04:11,860
of there's a lot<font color="#CCCCCC"> of promotion saying you</font>

96
00:04:10,000 --> 00:04:14,590
need<font color="#E5E5E5"> to document your API is a lot of</font>

97
00:04:11,860 --> 00:04:16,600
easy<font color="#E5E5E5"> auto-doc tools so you can</font>

98
00:04:14,590 --> 00:04:18,070
<font color="#E5E5E5">accidentally publish your API if you're</font>

99
00:04:16,600 --> 00:04:20,109
not careful<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if you look at the very</font>

100
00:04:18,070 --> 00:04:22,780
bottom<font color="#CCCCCC"> here you see we've actually</font>

101
00:04:20,108 --> 00:04:24,490
published an admin slash<font color="#CCCCCC"> shut down API</font>

102
00:04:22,780 --> 00:04:28,570
<font color="#E5E5E5">call them maybe we didn't mean</font><font color="#CCCCCC"> to</font>

103
00:04:24,490 --> 00:04:30,130
publish out for the world<font color="#E5E5E5"> to see usually</font>

104
00:04:28,570 --> 00:04:31,870
we talk about these<font color="#E5E5E5"> things</font><font color="#CCCCCC"> in kind of a</font>

105
00:04:30,130 --> 00:04:34,600
client-server mentality<font color="#E5E5E5"> we say well I've</font>

106
00:04:31,870 --> 00:04:36,660
<font color="#CCCCCC">got an app it</font><font color="#E5E5E5"> makes an API call to to</font>

107
00:04:34,600 --> 00:04:39,820
<font color="#E5E5E5">its travel app API which is its server</font>

108
00:04:36,660 --> 00:04:42,310
<font color="#E5E5E5">reality is nothing</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> that if you're</font>

109
00:04:39,820 --> 00:04:43,510
at<font color="#E5E5E5"> all successful</font><font color="#CCCCCC"> you've got multiple</font>

110
00:04:42,310 --> 00:04:45,910
<font color="#E5E5E5">platforms native</font>

111
00:04:43,510 --> 00:04:47,320
hybrid apps<font color="#E5E5E5"> you've got lots of legacy</font>

112
00:04:45,910 --> 00:04:49,570
code they all have different<font color="#CCCCCC"> versions</font>

113
00:04:47,320 --> 00:04:52,090
you've got web apps<font color="#E5E5E5"> running they're</font>

114
00:04:49,570 --> 00:04:54,909
running not to one API but to multiple

115
00:04:52,090 --> 00:04:56,590
back-end services<font color="#E5E5E5"> typically each one of</font>

116
00:04:54,910 --> 00:04:58,330
those has versions they're done by

117
00:04:56,590 --> 00:04:59,919
<font color="#E5E5E5">different</font><font color="#CCCCCC"> people so if you're an</font>

118
00:04:58,330 --> 00:05:03,340
attacker there's a lot of complexity

119
00:04:59,920 --> 00:05:06,040
<font color="#CCCCCC">here and you want to exploit it so</font>

120
00:05:03,340 --> 00:05:09,369
here's what ship fest looks like<font color="#CCCCCC"> we're</font>

121
00:05:06,040 --> 00:05:11,050
gonna focus<font color="#E5E5E5"> on the shippers up here</font><font color="#CCCCCC"> so</font>

122
00:05:09,370 --> 00:05:13,030
<font color="#E5E5E5">someone who wants</font><font color="#CCCCCC"> to ship a package</font>

123
00:05:11,050 --> 00:05:15,370
would go to the website or<font color="#E5E5E5"> to the</font>

124
00:05:13,030 --> 00:05:18,130
customer app and would just go ahead and

125
00:05:15,370 --> 00:05:21,120
post up<font color="#E5E5E5"> a package that</font><font color="#CCCCCC"> they want</font><font color="#E5E5E5"> to have</font>

126
00:05:18,130 --> 00:05:23,950
picked up and<font color="#CCCCCC"> delivered somewhere and</font>

127
00:05:21,120 --> 00:05:26,140
we're just<font color="#E5E5E5"> gonna be</font><font color="#CCCCCC"> showing a Android</font>

128
00:05:23,950 --> 00:05:28,450
mobile<font color="#E5E5E5"> app throughout this so the first</font>

129
00:05:26,140 --> 00:05:29,979
thing that<font color="#E5E5E5"> the shipper would do to find</font>

130
00:05:28,450 --> 00:05:32,770
out if there are<font color="#E5E5E5"> packages</font><font color="#CCCCCC"> available that</font>

131
00:05:29,980 --> 00:05:34,180
he can serve<font color="#E5E5E5"> would be just to log in</font>

132
00:05:32,770 --> 00:05:36,310
with<font color="#CCCCCC"> a standard kind of OA</font>

133
00:05:34,180 --> 00:05:39,010
<font color="#E5E5E5">type login and I'll talk more about</font>

134
00:05:36,310 --> 00:05:41,890
OAuth<font color="#E5E5E5"> later we're just using Austin</font><font color="#CCCCCC"> zero</font>

135
00:05:39,010 --> 00:05:45,430
here as an example login once he's

136
00:05:41,890 --> 00:05:48,969
logged in<font color="#E5E5E5"> he gets to a screen where he</font>

137
00:05:45,430 --> 00:05:50,580
needs<font color="#E5E5E5"> to indicate that he's available</font><font color="#CCCCCC"> to</font>

138
00:05:48,970 --> 00:05:53,020
find out where the<font color="#E5E5E5"> nearest shipment is</font>

139
00:05:50,580 --> 00:05:54,460
and as<font color="#E5E5E5"> you see up here he'll get</font>

140
00:05:53,020 --> 00:05:56,830
information<font color="#E5E5E5"> about the shipment it'll</font>

141
00:05:54,460 --> 00:05:58,180
show up on<font color="#E5E5E5"> the map</font><font color="#CCCCCC"> and what's going to</font>

142
00:05:56,830 --> 00:06:00,070
be<font color="#E5E5E5"> important here is that there is</font><font color="#CCCCCC"> a</font>

143
00:05:58,180 --> 00:06:02,680
gratuity that<font color="#CCCCCC"> has included the driver</font>

144
00:06:00,070 --> 00:06:05,140
will be<font color="#E5E5E5"> paid for the delivery plus he's</font>

145
00:06:02,680 --> 00:06:07,570
gonna pocket the entire gratuity so in

146
00:06:05,140 --> 00:06:10,900
theory<font color="#E5E5E5"> he would love</font><font color="#CCCCCC"> to find</font><font color="#E5E5E5"> the big</font>

147
00:06:07,570 --> 00:06:13,240
gratuity type deliveries<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> ship</font>

148
00:06:10,900 --> 00:06:14,620
fast<font color="#E5E5E5"> is really</font><font color="#CCCCCC"> not interested in giving</font>

149
00:06:13,240 --> 00:06:16,090
<font color="#E5E5E5">him all the gratuities what they're</font>

150
00:06:14,620 --> 00:06:19,120
interested<font color="#E5E5E5"> in is maximizing their</font>

151
00:06:16,090 --> 00:06:21,190
throughput<font color="#E5E5E5"> so they want to give</font><font color="#CCCCCC"> him</font><font color="#E5E5E5"> the</font>

152
00:06:19,120 --> 00:06:23,920
closest package to pick up and go

153
00:06:21,190 --> 00:06:26,170
deliver so when he's ready he would

154
00:06:23,920 --> 00:06:29,650
click<font color="#E5E5E5"> I'm available down in the bottom</font>

155
00:06:26,170 --> 00:06:31,120
right<font color="#CCCCCC"> here</font><font color="#E5E5E5"> and what he gets is the</font>

156
00:06:29,650 --> 00:06:34,239
<font color="#E5E5E5">closest delivery point unfortunately</font>

157
00:06:31,120 --> 00:06:35,500
<font color="#CCCCCC">that has zero dollars of gratuity but</font>

158
00:06:34,240 --> 00:06:36,820
that's what he's given so if he's using

159
00:06:35,500 --> 00:06:37,900
<font color="#CCCCCC">this app that's what he's going</font><font color="#E5E5E5"> to do</font>

160
00:06:36,820 --> 00:06:41,490
and he's going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> paid for the</font>

161
00:06:37,900 --> 00:06:44,400
delivery when<font color="#E5E5E5"> he arrives there he will</font>

162
00:06:41,490 --> 00:06:48,190
when he's ready to go he<font color="#E5E5E5"> will accept the</font>

163
00:06:44,400 --> 00:06:49,840
delivery<font color="#CCCCCC"> he'll</font><font color="#E5E5E5"> drive to the collection</font>

164
00:06:48,190 --> 00:06:50,290
point<font color="#E5E5E5"> and indicate that he has collected</font>

165
00:06:49,840 --> 00:06:52,179
<font color="#E5E5E5">it</font>

166
00:06:50,290 --> 00:06:55,690
<font color="#E5E5E5">he will</font><font color="#CCCCCC"> then drive probably not in this</font>

167
00:06:52,180 --> 00:06:56,889
straight line to the<font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> and when</font>

168
00:06:55,690 --> 00:07:00,310
he's done<font color="#CCCCCC"> dropping it off</font>

169
00:06:56,889 --> 00:07:02,469
market<font color="#E5E5E5"> as delivered</font><font color="#CCCCCC"> and then he'll see a</font>

170
00:07:00,310 --> 00:07:02,949
log of all the<font color="#E5E5E5"> deliveries he's done for</font>

171
00:07:02,469 --> 00:07:04,930
the day

172
00:07:02,949 --> 00:07:09,520
and all those big<font color="#CCCCCC"> fortuitous</font><font color="#E5E5E5"> that he's</font>

173
00:07:04,930 --> 00:07:11,680
made which<font color="#CCCCCC"> is so far as zero this is</font>

174
00:07:09,520 --> 00:07:13,508
what a<font color="#E5E5E5"> sequence of API</font><font color="#CCCCCC"> calls would look</font>

175
00:07:11,680 --> 00:07:16,900
like the first<font color="#E5E5E5"> thing he's going to do is</font>

176
00:07:13,509 --> 00:07:19,060
log in and get<font color="#CCCCCC"> a user token he then with</font>

177
00:07:16,900 --> 00:07:21,310
the app will check and<font color="#E5E5E5"> see if he is</font>

178
00:07:19,060 --> 00:07:23,199
actively delivering something<font color="#CCCCCC"> cuz it's</font>

179
00:07:21,310 --> 00:07:25,539
<font color="#E5E5E5">not going to give him another package</font>

180
00:07:23,199 --> 00:07:27,249
until he's<font color="#CCCCCC"> delivered the</font><font color="#E5E5E5"> first one and</font>

181
00:07:25,539 --> 00:07:30,310
then<font color="#E5E5E5"> comes an important call here which</font>

182
00:07:27,249 --> 00:07:33,159
is asking<font color="#E5E5E5"> the app is asking where is the</font>

183
00:07:30,310 --> 00:07:34,389
nearest shipment here<font color="#CCCCCC"> and so that's</font>

184
00:07:33,159 --> 00:07:37,270
going<font color="#E5E5E5"> to be an important thing to</font>

185
00:07:34,389 --> 00:07:38,919
possibly abuse to see what other

186
00:07:37,270 --> 00:07:40,299
deliveries we can find<font color="#CCCCCC"> around he'll</font>

187
00:07:38,919 --> 00:07:42,520
<font color="#E5E5E5">accept the shipment go pick it up</font>

188
00:07:40,300 --> 00:07:46,629
<font color="#E5E5E5">deliver it and hopefully collect a</font>

189
00:07:42,520 --> 00:07:48,878
gratuity so a very<font color="#CCCCCC"> tucky guy came along</font>

190
00:07:46,629 --> 00:07:51,009
<font color="#E5E5E5">and said</font><font color="#CCCCCC"> hey I can help</font><font color="#E5E5E5"> out the shippers</font>

191
00:07:48,879 --> 00:07:52,719
<font color="#E5E5E5">and</font><font color="#CCCCCC"> given them a</font><font color="#E5E5E5"> little edge here</font><font color="#CCCCCC"> so he</font>

192
00:07:51,009 --> 00:07:57,909
created<font color="#E5E5E5"> a web application called ship</font>

193
00:07:52,719 --> 00:08:00,180
<font color="#CCCCCC">Raider and</font><font color="#E5E5E5"> it is attempting</font><font color="#CCCCCC"> to do is</font><font color="#E5E5E5"> to</font>

194
00:07:57,909 --> 00:08:02,680
find where<font color="#E5E5E5"> the biggest gratuities</font><font color="#CCCCCC"> are</font>

195
00:08:00,180 --> 00:08:04,419
and for<font color="#CCCCCC"> now it's a web app it could</font><font color="#E5E5E5"> be a</font>

196
00:08:02,680 --> 00:08:06,789
standalone<font color="#CCCCCC"> application so the first</font>

197
00:08:04,419 --> 00:08:08,740
thing<font color="#CCCCCC"> that ship writer is going to do</font><font color="#E5E5E5"> is</font>

198
00:08:06,789 --> 00:08:11,949
the user is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to go ahead</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> log in</font>

199
00:08:08,740 --> 00:08:13,479
<font color="#E5E5E5">with his usual ship fast login to</font>

200
00:08:11,949 --> 00:08:17,139
<font color="#E5E5E5">identify himself to the ship fast</font>

201
00:08:13,479 --> 00:08:21,089
platform and this is not an attack<font color="#E5E5E5"> per</font>

202
00:08:17,139 --> 00:08:23,469
se the the shipper is interested in

203
00:08:21,089 --> 00:08:26,289
getting<font color="#CCCCCC"> the biggest gratuity and</font><font color="#E5E5E5"> he</font>

204
00:08:23,469 --> 00:08:27,969
freely gives<font color="#E5E5E5"> this information away</font><font color="#CCCCCC"> so</font>

205
00:08:26,289 --> 00:08:30,250
there's nothing<font color="#E5E5E5"> bad</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> on at this</font>

206
00:08:27,969 --> 00:08:32,198
point<font color="#E5E5E5"> in terms of</font><font color="#CCCCCC"> logon except</font><font color="#E5E5E5"> for maybe</font>

207
00:08:30,250 --> 00:08:35,740
<font color="#E5E5E5">that ship</font><font color="#CCCCCC"> Raider is looking like ship</font>

208
00:08:32,198 --> 00:08:38,380
fast through the login<font color="#E5E5E5"> process so once</font>

209
00:08:35,740 --> 00:08:42,190
<font color="#E5E5E5">he's logged in he's given a screen and</font>

210
00:08:38,380 --> 00:08:43,510
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> see the OAuth token</font><font color="#CCCCCC"> value there</font>

211
00:08:42,190 --> 00:08:45,880
just because<font color="#E5E5E5"> this is a very techie</font>

212
00:08:43,510 --> 00:08:48,430
implementation<font color="#E5E5E5"> and you can see the</font><font color="#CCCCCC"> setup</font>

213
00:08:45,880 --> 00:08:51,040
<font color="#E5E5E5">here to</font><font color="#CCCCCC"> basically make that get near a</font>

214
00:08:48,430 --> 00:08:53,949
shipment call at various longitudes and

215
00:08:51,040 --> 00:08:56,620
latitudes<font color="#E5E5E5"> in basically a circular sweep</font>

216
00:08:53,949 --> 00:08:59,500
<font color="#E5E5E5">that gets set up so I can find all the</font>

217
00:08:56,620 --> 00:09:01,420
packages within<font color="#CCCCCC"> a certain area so I go</font>

218
00:08:59,500 --> 00:09:03,540
<font color="#CCCCCC">ahead and indicate that information</font>

219
00:09:01,420 --> 00:09:06,099
click it through and I get<font color="#CCCCCC"> a</font><font color="#E5E5E5"> list of</font>

220
00:09:03,540 --> 00:09:07,870
possible packages and I immediately zoom

221
00:09:06,100 --> 00:09:10,680
in on the big gratuity one which isn't

222
00:09:07,870 --> 00:09:12,720
too far<font color="#CCCCCC"> away and I go and try and grab</font>

223
00:09:10,680 --> 00:09:15,329
so at this point<font color="#E5E5E5"> it actually marks that</font>

224
00:09:12,720 --> 00:09:18,600
I have<font color="#E5E5E5"> accepted this for delivery I then</font>

225
00:09:15,329 --> 00:09:21,779
move over to<font color="#CCCCCC"> my ship fast</font><font color="#E5E5E5"> application</font>

226
00:09:18,600 --> 00:09:23,339
<font color="#CCCCCC">and I</font><font color="#E5E5E5"> log in it checks to see am i</font>

227
00:09:21,779 --> 00:09:24,899
delivering<font color="#CCCCCC"> something in this case</font><font color="#E5E5E5"> it now</font>

228
00:09:23,339 --> 00:09:27,540
says yes you are delivering<font color="#E5E5E5"> something</font>

229
00:09:24,899 --> 00:09:29,670
<font color="#E5E5E5">shows me the map</font><font color="#CCCCCC"> I go ahead and</font><font color="#E5E5E5"> make the</font>

230
00:09:27,540 --> 00:09:33,329
delivery<font color="#E5E5E5"> as usual and mark it done</font>

231
00:09:29,670 --> 00:09:35,759
so what we're<font color="#E5E5E5"> exploiting here</font><font color="#CCCCCC"> is this</font>

232
00:09:33,329 --> 00:09:37,589
get nourishment<font color="#E5E5E5"> API call we're just</font>

233
00:09:35,759 --> 00:09:40,709
using<font color="#E5E5E5"> it</font><font color="#CCCCCC"> repeatedly in a way that really</font>

234
00:09:37,589 --> 00:09:42,660
<font color="#CCCCCC">wasn't intended one thing I neglected to</font>

235
00:09:40,709 --> 00:09:45,089
mention is that<font color="#CCCCCC"> once you log in</font><font color="#E5E5E5"> the</font>

236
00:09:42,660 --> 00:09:48,029
<font color="#CCCCCC">Bearer access token for the</font><font color="#E5E5E5"> user will be</font>

237
00:09:45,089 --> 00:09:50,699
supplied with<font color="#E5E5E5"> every API call</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the API</font>

238
00:09:48,029 --> 00:09:53,339
key<font color="#CCCCCC"> which really indicates that it's</font>

239
00:09:50,699 --> 00:09:55,258
coming<font color="#CCCCCC"> from the ship</font><font color="#E5E5E5"> fast app is going</font>

240
00:09:53,339 --> 00:09:58,529
<font color="#CCCCCC">to</font><font color="#E5E5E5"> go through with every API call as</font>

241
00:09:55,259 --> 00:10:00,480
well so the user authorization<font color="#E5E5E5"> was</font>

242
00:09:58,529 --> 00:10:03,240
freely given<font color="#E5E5E5"> so that's not the problem</font>

243
00:10:00,480 --> 00:10:05,939
<font color="#CCCCCC">it</font><font color="#E5E5E5"> really appears that</font><font color="#CCCCCC"> the API key must</font>

244
00:10:03,240 --> 00:10:08,699
<font color="#E5E5E5">have been leaked somehow and so the ship</font>

245
00:10:05,939 --> 00:10:10,139
<font color="#CCCCCC">radar application is</font><font color="#E5E5E5"> using that so the</font>

246
00:10:08,699 --> 00:10:12,689
first thing we want<font color="#CCCCCC"> to take a look at is</font>

247
00:10:10,139 --> 00:10:14,129
is that key does it appear<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be secure</font>

248
00:10:12,689 --> 00:10:17,189
<font color="#E5E5E5">in motion when it's going across</font><font color="#CCCCCC"> the</font>

249
00:10:14,129 --> 00:10:21,779
communication<font color="#CCCCCC"> once typically you would</font>

250
00:10:17,189 --> 00:10:24,059
insist on<font color="#E5E5E5"> using TLS or HTTPS here</font><font color="#CCCCCC"> TLS is</font>

251
00:10:21,779 --> 00:10:26,279
a handshake protocol it establishes

252
00:10:24,059 --> 00:10:30,389
encryption between<font color="#E5E5E5"> the client and the</font>

253
00:10:26,279 --> 00:10:32,279
server<font color="#CCCCCC"> and it works</font><font color="#E5E5E5"> great as long</font><font color="#CCCCCC"> as you</font>

254
00:10:30,389 --> 00:10:33,689
can trust<font color="#CCCCCC"> that the certificates that are</font>

255
00:10:32,279 --> 00:10:37,439
being hand shook and passed back and

256
00:10:33,689 --> 00:10:39,569
forth<font color="#E5E5E5"> are legitimate</font><font color="#CCCCCC"> there is typically</font>

257
00:10:37,439 --> 00:10:42,120
<font color="#E5E5E5">one way where the client trusts the</font>

258
00:10:39,569 --> 00:10:44,610
server there's also<font color="#E5E5E5"> a</font><font color="#CCCCCC"> two-way mutual TLS</font>

259
00:10:42,120 --> 00:10:46,199
authentication where the server also<font color="#E5E5E5"> is</font>

260
00:10:44,610 --> 00:10:50,220
a<font color="#E5E5E5"> nothing to get it back against the</font>

261
00:10:46,199 --> 00:10:52,679
<font color="#E5E5E5">client so what you're trying to prevent</font>

262
00:10:50,220 --> 00:10:55,740
him what you may not be successful<font color="#E5E5E5"> in is</font>

263
00:10:52,679 --> 00:10:57,420
a man-in-the-middle attack so an

264
00:10:55,740 --> 00:11:00,089
attacker will try and get in the<font color="#E5E5E5"> middle</font>

265
00:10:57,420 --> 00:11:02,819
<font color="#E5E5E5">of this encrypted communication because</font>

266
00:11:00,089 --> 00:11:04,259
we're using a mobile<font color="#CCCCCC"> app the attacker is</font>

267
00:11:02,819 --> 00:11:06,709
free to go and<font color="#E5E5E5"> get the mobile app</font>

268
00:11:04,259 --> 00:11:09,200
<font color="#E5E5E5">download</font><font color="#CCCCCC"> it set it up</font><font color="#E5E5E5"> and</font>

269
00:11:06,710 --> 00:11:11,060
what<font color="#CCCCCC"> he will</font><font color="#E5E5E5"> try and do is create a fake</font>

270
00:11:09,200 --> 00:11:13,250
certificate<font color="#E5E5E5"> that indicates that the sir</font>

271
00:11:11,060 --> 00:11:14,900
the server for that<font color="#CCCCCC"> certificate</font><font color="#E5E5E5"> is the</font>

272
00:11:13,250 --> 00:11:18,200
server<font color="#E5E5E5"> that he's trying to get in the</font>

273
00:11:14,900 --> 00:11:19,880
middle<font color="#E5E5E5"> of and he installs that fake</font>

274
00:11:18,200 --> 00:11:22,090
certificate on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> mobile app and says</font>

275
00:11:19,880 --> 00:11:25,040
trust me this this certificate<font color="#E5E5E5"> is good</font>

276
00:11:22,090 --> 00:11:27,020
<font color="#CCCCCC">so at this point</font><font color="#E5E5E5"> he's set up a</font>

277
00:11:25,040 --> 00:11:29,540
<font color="#E5E5E5">man-in-the-middle attack where to the</font>

278
00:11:27,020 --> 00:11:30,890
app<font color="#E5E5E5"> he looks like the server and to the</font>

279
00:11:29,540 --> 00:11:33,709
server he will go ahead<font color="#CCCCCC"> and look like</font>

280
00:11:30,890 --> 00:11:35,750
<font color="#E5E5E5">the app he can snoop on this kind</font><font color="#CCCCCC"> of</font>

281
00:11:33,710 --> 00:11:37,850
this<font color="#CCCCCC"> traffic</font><font color="#E5E5E5"> he can modify</font><font color="#CCCCCC"> this traffic</font>

282
00:11:35,750 --> 00:11:39,950
<font color="#E5E5E5">so this is one way he could potentially</font>

283
00:11:37,850 --> 00:11:41,990
<font color="#E5E5E5">get a look at what that key is because</font>

284
00:11:39,950 --> 00:11:43,400
<font color="#E5E5E5">it's being sent although encrypted if he</font>

285
00:11:41,990 --> 00:11:47,300
can break the<font color="#CCCCCC"> encryption</font><font color="#E5E5E5"> it's sent in</font>

286
00:11:43,400 --> 00:11:49,340
the clear<font color="#CCCCCC"> so</font><font color="#E5E5E5"> typically</font><font color="#CCCCCC"> on a</font><font color="#E5E5E5"> mobile</font>

287
00:11:47,300 --> 00:11:51,770
application what you will do is do

288
00:11:49,340 --> 00:11:53,810
<font color="#E5E5E5">something called</font><font color="#CCCCCC"> certificate pinning</font><font color="#E5E5E5"> and</font>

289
00:11:51,770 --> 00:11:55,670
basically on the client<font color="#E5E5E5"> you would put a</font>

290
00:11:53,810 --> 00:11:57,589
whitelist of accepted trusted

291
00:11:55,670 --> 00:12:00,380
certificates<font color="#E5E5E5"> so if somebody tries to</font>

292
00:11:57,590 --> 00:12:01,790
<font color="#E5E5E5">come in with</font><font color="#CCCCCC"> a phony certificate it</font>

293
00:12:00,380 --> 00:12:03,439
would not be a certificate<font color="#E5E5E5"> that you</font>

294
00:12:01,790 --> 00:12:06,199
<font color="#E5E5E5">would would value in theory you would</font>

295
00:12:03,440 --> 00:12:07,940
say you<font color="#E5E5E5"> don't trust it</font><font color="#CCCCCC"> so the attacker</font>

296
00:12:06,200 --> 00:12:10,160
is kind of stymied at this point and

297
00:12:07,940 --> 00:12:12,590
<font color="#CCCCCC">that that they can't break this</font>

298
00:12:10,160 --> 00:12:15,260
whitelist per se<font color="#E5E5E5"> though I will note that</font>

299
00:12:12,590 --> 00:12:17,960
the whitelist<font color="#E5E5E5"> is itself another secret</font>

300
00:12:15,260 --> 00:12:23,689
<font color="#CCCCCC">that might be</font><font color="#E5E5E5"> snobol and found out if</font>

301
00:12:17,960 --> 00:12:25,400
<font color="#E5E5E5">you look in the app itself so pinning is</font>

302
00:12:23,690 --> 00:12:27,470
a pretty<font color="#E5E5E5"> good solution</font><font color="#CCCCCC"> for mobile</font><font color="#E5E5E5"> but</font>

303
00:12:25,400 --> 00:12:31,430
it's not as widely<font color="#E5E5E5"> adopted as it could</font>

304
00:12:27,470 --> 00:12:34,190
be<font color="#E5E5E5"> as I said</font><font color="#CCCCCC"> the the keys themselves and</font>

305
00:12:31,430 --> 00:12:35,329
the whitelist are additional secrets<font color="#CCCCCC"> the</font>

306
00:12:34,190 --> 00:12:37,130
question is what happens if a

307
00:12:35,330 --> 00:12:39,440
<font color="#CCCCCC">certificate expires or</font><font color="#E5E5E5"> if you want to</font>

308
00:12:37,130 --> 00:12:41,330
rotate a set of keys<font color="#CCCCCC"> it becomes kind of</font>

309
00:12:39,440 --> 00:12:43,370
a maintenance and<font color="#E5E5E5"> upkeep issue how do I</font>

310
00:12:41,330 --> 00:12:46,130
get fresh<font color="#E5E5E5"> keys onto the device without</font>

311
00:12:43,370 --> 00:12:48,530
<font color="#E5E5E5">causing my entire user base</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have to</font>

312
00:12:46,130 --> 00:12:49,910
sort of upload and update applications

313
00:12:48,530 --> 00:12:52,490
which is<font color="#CCCCCC"> something that's notoriously</font>

314
00:12:49,910 --> 00:12:55,040
hard to do<font color="#E5E5E5"> so people get a little</font>

315
00:12:52,490 --> 00:12:57,170
<font color="#E5E5E5">gun-shy about that and even</font><font color="#CCCCCC"> if they do</font>

316
00:12:55,040 --> 00:13:00,199
do it there are<font color="#E5E5E5"> frameworks available for</font>

317
00:12:57,170 --> 00:13:03,380
mobile<font color="#CCCCCC"> devices that</font><font color="#E5E5E5"> can hook different</font>

318
00:13:00,200 --> 00:13:05,390
calls and try and spoof them so in this

319
00:13:03,380 --> 00:13:08,540
case there's an<font color="#E5E5E5"> Android something called</font>

320
00:13:05,390 --> 00:13:10,250
SSL<font color="#E5E5E5"> trust killer and if you're not if</font>

321
00:13:08,540 --> 00:13:12,079
you're<font color="#CCCCCC"> not looking to</font><font color="#E5E5E5"> prevent that you</font>

322
00:13:10,250 --> 00:13:13,730
<font color="#CCCCCC">can go ahead</font><font color="#E5E5E5"> and when the request is</font>

323
00:13:12,080 --> 00:13:15,320
made saying is<font color="#E5E5E5"> this on the whitelist it</font>

324
00:13:13,730 --> 00:13:16,090
can go ahead and<font color="#E5E5E5"> return yes of course it</font>

325
00:13:15,320 --> 00:13:17,860
is

326
00:13:16,090 --> 00:13:22,060
and and you<font color="#E5E5E5"> can get right past the</font>

327
00:13:17,860 --> 00:13:25,540
spinning<font color="#E5E5E5"> if you want so in our case ship</font>

328
00:13:22,060 --> 00:13:27,880
<font color="#CCCCCC">Raider was not going across TLS</font><font color="#E5E5E5"> was not</font>

329
00:13:25,540 --> 00:13:31,000
trying<font color="#E5E5E5"> to break the pinning so so so far</font>

330
00:13:27,880 --> 00:13:33,100
<font color="#E5E5E5">so</font><font color="#CCCCCC"> good the next</font><font color="#E5E5E5"> question is is there</font>

331
00:13:31,000 --> 00:13:35,800
something<font color="#E5E5E5"> leaking off the device so is</font>

332
00:13:33,100 --> 00:13:40,660
<font color="#E5E5E5">this secret the API key is it</font><font color="#CCCCCC"> secure</font><font color="#E5E5E5"> at</font>

333
00:13:35,800 --> 00:13:42,099
<font color="#E5E5E5">rest well Ryan</font><font color="#CCCCCC"> Hellyer</font><font color="#E5E5E5"> is one</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> of</font>

334
00:13:40,660 --> 00:13:45,520
somebody<font color="#E5E5E5"> who made it pretty easy</font><font color="#CCCCCC"> to find</font>

335
00:13:42,100 --> 00:13:48,280
keys<font color="#CCCCCC"> he actually wanted</font><font color="#E5E5E5"> to put his</font>

336
00:13:45,520 --> 00:13:51,160
<font color="#CCCCCC">brand-new shiny open-source project</font><font color="#E5E5E5"> up</font>

337
00:13:48,280 --> 00:13:52,959
on github<font color="#CCCCCC"> he was</font><font color="#E5E5E5"> running on Amazon and</font>

338
00:13:51,160 --> 00:13:56,050
he very carefully ensured that<font color="#E5E5E5"> there</font>

339
00:13:52,960 --> 00:13:57,970
were no keys present<font color="#CCCCCC"> and he went ahead</font>

340
00:13:56,050 --> 00:14:00,430
<font color="#E5E5E5">and</font><font color="#CCCCCC"> publishes to github unfortunately</font>

341
00:13:57,970 --> 00:14:02,380
there was a<font color="#E5E5E5"> backup file that had the</font>

342
00:14:00,430 --> 00:14:04,599
<font color="#E5E5E5">keys on that so within hours he had a</font>

343
00:14:02,380 --> 00:14:06,640
six thousand<font color="#E5E5E5"> dollar bill from Amazon</font>

344
00:14:04,600 --> 00:14:09,340
where people had found<font color="#E5E5E5"> their access keys</font>

345
00:14:06,640 --> 00:14:12,939
to Amazon and<font color="#CCCCCC"> used it so unfortunately</font>

346
00:14:09,340 --> 00:14:15,250
one of the most easy ways to<font color="#E5E5E5"> leak a key</font>

347
00:14:12,940 --> 00:14:18,820
is to simply publish it up to<font color="#CCCCCC"> github by</font>

348
00:14:15,250 --> 00:14:21,670
mistake<font color="#CCCCCC"> we didn't do that</font><font color="#E5E5E5"> fortunately</font>

349
00:14:18,820 --> 00:14:22,930
<font color="#CCCCCC">but we did something</font><font color="#E5E5E5"> almost as bad when</font>

350
00:14:21,670 --> 00:14:25,630
ship<font color="#CCCCCC"> rater took a look at the</font>

351
00:14:22,930 --> 00:14:27,189
<font color="#E5E5E5">application he started with the apk</font>

352
00:14:25,630 --> 00:14:29,500
<font color="#CCCCCC">which is the</font><font color="#E5E5E5"> Android package that has</font>

353
00:14:27,190 --> 00:14:31,150
<font color="#CCCCCC">downloaded from</font><font color="#E5E5E5"> the Play Store</font><font color="#CCCCCC"> and he</font>

354
00:14:29,500 --> 00:14:32,470
just unzipped it<font color="#E5E5E5"> took a look at the</font>

355
00:14:31,150 --> 00:14:34,630
manifest<font color="#E5E5E5"> file which kind of keeps</font>

356
00:14:32,470 --> 00:14:37,030
<font color="#CCCCCC">everything organized and</font><font color="#E5E5E5"> right smack</font><font color="#CCCCCC"> dab</font>

357
00:14:34,630 --> 00:14:39,939
in the middle of<font color="#E5E5E5"> that minutes with</font><font color="#CCCCCC"> no</font>

358
00:14:37,030 --> 00:14:41,740
encryption whatsoever was the API key so

359
00:14:39,940 --> 00:14:44,050
that<font color="#CCCCCC"> was pretty much a</font><font color="#E5E5E5"> no-brainer</font><font color="#CCCCCC"> to</font>

360
00:14:41,740 --> 00:14:45,670
<font color="#E5E5E5">find that API key when she found the API</font>

361
00:14:44,050 --> 00:14:47,290
key<font color="#E5E5E5"> was off and running just plugged</font>

362
00:14:45,670 --> 00:14:50,860
<font color="#E5E5E5">that into his application and he was</font>

363
00:14:47,290 --> 00:14:53,410
free<font color="#CCCCCC"> to call the API</font><font color="#E5E5E5"> as as he wanted so</font>

364
00:14:50,860 --> 00:14:55,210
API<font color="#E5E5E5"> keys need to be held on to pretty</font>

365
00:14:53,410 --> 00:14:58,150
closely<font color="#E5E5E5"> if you're trying to prevent that</font>

366
00:14:55,210 --> 00:14:59,890
from happening<font color="#E5E5E5"> what might you do if you</font>

367
00:14:58,150 --> 00:15:03,430
did get breached<font color="#CCCCCC"> is there something you</font>

368
00:14:59,890 --> 00:15:05,439
<font color="#E5E5E5">can do to mitigate that well a question</font>

369
00:15:03,430 --> 00:15:07,180
<font color="#CCCCCC">comes</font><font color="#E5E5E5"> down</font><font color="#CCCCCC"> to can you figure</font><font color="#E5E5E5"> out this</font>

370
00:15:05,440 --> 00:15:10,050
<font color="#CCCCCC">traffic does not look good is it</font>

371
00:15:07,180 --> 00:15:13,449
abnormal<font color="#E5E5E5"> in its frequency or in the</font>

372
00:15:10,050 --> 00:15:16,120
patterns that<font color="#E5E5E5"> are being called so is it</font>

373
00:15:13,450 --> 00:15:18,820
good<font color="#CCCCCC"> traffic or bad traffic</font><font color="#E5E5E5"> the classic</font>

374
00:15:16,120 --> 00:15:21,820
<font color="#E5E5E5">approach to this is a rate limiting</font><font color="#CCCCCC"> kind</font>

375
00:15:18,820 --> 00:15:24,910
of approach<font color="#CCCCCC"> basically you're looking to</font>

376
00:15:21,820 --> 00:15:28,390
see is this API being called<font color="#E5E5E5"> too fast</font>

377
00:15:24,910 --> 00:15:29,709
<font color="#CCCCCC">too frequently is there a quota often</font>

378
00:15:28,390 --> 00:15:31,510
<font color="#CCCCCC">times when you sign up for</font><font color="#E5E5E5"> a free</font>

379
00:15:29,710 --> 00:15:34,300
<font color="#CCCCCC">servus it's free for</font><font color="#E5E5E5"> the first thousand</font>

380
00:15:31,510 --> 00:15:35,650
calls<font color="#E5E5E5"> every</font><font color="#CCCCCC"> day something like that so</font>

381
00:15:34,300 --> 00:15:38,260
<font color="#E5E5E5">that's all being done through rate</font>

382
00:15:35,650 --> 00:15:40,510
limiting<font color="#E5E5E5"> you can also look in very short</font>

383
00:15:38,260 --> 00:15:42,340
bursty traffic if you<font color="#E5E5E5"> see big bursts of</font>

384
00:15:40,510 --> 00:15:46,569
traffic you<font color="#E5E5E5"> might want to shed that</font><font color="#CCCCCC"> - so</font>

385
00:15:42,340 --> 00:15:48,820
in<font color="#E5E5E5"> ship fest case if you do do a radius</font>

386
00:15:46,570 --> 00:15:50,290
search<font color="#E5E5E5"> you're flying off a bunch of</font><font color="#CCCCCC"> AP</font>

387
00:15:48,820 --> 00:15:52,600
<font color="#CCCCCC">the same</font><font color="#E5E5E5"> API calls with different</font>

388
00:15:50,290 --> 00:15:55,510
latitudes and longitudes so that might

389
00:15:52,600 --> 00:15:57,070
trip up a rate limiter these can get

390
00:15:55,510 --> 00:15:59,830
<font color="#E5E5E5">pretty sophisticated so for certain</font>

391
00:15:57,070 --> 00:16:01,720
expensive calls which a<font color="#E5E5E5"> DDoS</font><font color="#CCCCCC"> er might be</font>

392
00:15:59,830 --> 00:16:04,060
using<font color="#E5E5E5"> to try and say force your database</font>

393
00:16:01,720 --> 00:16:05,590
to do more work you might have tighter

394
00:16:04,060 --> 00:16:08,469
limits on<font color="#CCCCCC"> that than some of the other</font>

395
00:16:05,590 --> 00:16:10,300
calls it's all kind<font color="#E5E5E5"> of a game and it</font>

396
00:16:08,470 --> 00:16:13,300
really<font color="#E5E5E5"> boils down to a game because if</font>

397
00:16:10,300 --> 00:16:14,650
you are supplying<font color="#E5E5E5"> an application the</font>

398
00:16:13,300 --> 00:16:17,349
last thing you want<font color="#CCCCCC"> to do is lock out</font>

399
00:16:14,650 --> 00:16:20,199
legitimate<font color="#CCCCCC"> traffic so a lot of the you</font>

400
00:16:17,350 --> 00:16:23,320
the users are<font color="#CCCCCC"> very conservative</font><font color="#E5E5E5"> and what</font>

401
00:16:20,200 --> 00:16:26,290
they rate limit<font color="#CCCCCC"> so it sounds good but it</font>

402
00:16:23,320 --> 00:16:29,890
isn't necessarily<font color="#CCCCCC"> that effective when</font>

403
00:16:26,290 --> 00:16:31,449
people are quite conservative<font color="#E5E5E5"> another</font>

404
00:16:29,890 --> 00:16:33,550
<font color="#E5E5E5">approach you'll hear about is behavioral</font>

405
00:16:31,450 --> 00:16:37,000
<font color="#E5E5E5">API security we're actually trying to do</font>

406
00:16:33,550 --> 00:16:39,339
pattern detection<font color="#E5E5E5"> in ship fast case you</font>

407
00:16:37,000 --> 00:16:41,200
<font color="#E5E5E5">couldn't in view this as if you see a</font>

408
00:16:39,340 --> 00:16:43,330
user suddenly popping<font color="#CCCCCC"> up at different</font>

409
00:16:41,200 --> 00:16:45,100
<font color="#E5E5E5">places</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> the map if you measure the</font>

410
00:16:43,330 --> 00:16:46,750
time difference he's traveling faster

411
00:16:45,100 --> 00:16:49,510
<font color="#CCCCCC">than somebody could travel</font><font color="#E5E5E5"> in it in a</font>

412
00:16:46,750 --> 00:16:51,430
car<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> say that as a</font>

413
00:16:49,510 --> 00:16:53,890
<font color="#E5E5E5">behavioral form of detection that you're</font>

414
00:16:51,430 --> 00:16:56,109
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> typically behavioral</font><font color="#E5E5E5"> API</font>

415
00:16:53,890 --> 00:16:58,240
approaches employ big data with machine

416
00:16:56,110 --> 00:16:59,590
learning kind of techniques<font color="#CCCCCC"> that adapt</font>

417
00:16:58,240 --> 00:17:01,930
to the traffic<font color="#E5E5E5"> and learn from the</font>

418
00:16:59,590 --> 00:17:04,390
traffic over<font color="#E5E5E5"> time the biggest challenge</font>

419
00:17:01,930 --> 00:17:06,399
here<font color="#E5E5E5"> kind of similar to rate limiting is</font>

420
00:17:04,390 --> 00:17:10,030
<font color="#CCCCCC">that you tend to be lenient</font><font color="#E5E5E5"> because</font>

421
00:17:06,400 --> 00:17:11,230
<font color="#E5E5E5">there</font><font color="#CCCCCC"> tend to be false positives so the</font>

422
00:17:10,030 --> 00:17:13,329
last thing<font color="#CCCCCC"> I want to</font><font color="#E5E5E5"> do is lock how to</font>

423
00:17:11,230 --> 00:17:14,980
customers and legitimate their traffic

424
00:17:13,329 --> 00:17:17,230
looks<font color="#E5E5E5"> a little strange</font><font color="#CCCCCC"> but it really is</font>

425
00:17:14,980 --> 00:17:19,300
legitimate traffic<font color="#E5E5E5"> you don't succeed if</font>

426
00:17:17,230 --> 00:17:23,140
you do that so again<font color="#CCCCCC"> you tend to</font><font color="#E5E5E5"> have</font>

427
00:17:19,300 --> 00:17:25,990
loose constraints in that case so ship

428
00:17:23,140 --> 00:17:28,780
fast is a little pissed off<font color="#E5E5E5"> that there's</font>

429
00:17:25,990 --> 00:17:30,400
this<font color="#CCCCCC"> their traffic is going</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> grabbing</font>

430
00:17:28,780 --> 00:17:32,649
the big gratuity pieces and they want to

431
00:17:30,400 --> 00:17:34,960
<font color="#E5E5E5">strike back so they think about the</font>

432
00:17:32,650 --> 00:17:37,300
problem<font color="#E5E5E5"> and the first thing they do</font><font color="#CCCCCC"> is</font>

433
00:17:34,960 --> 00:17:40,480
they<font color="#E5E5E5"> add</font><font color="#CCCCCC"> request signing</font><font color="#E5E5E5"> to their API</font>

434
00:17:37,300 --> 00:17:42,000
calls so we<font color="#CCCCCC"> already have an API key and</font>

435
00:17:40,480 --> 00:17:44,460
<font color="#E5E5E5">we're passing</font><font color="#CCCCCC"> that across</font>

436
00:17:42,000 --> 00:17:47,460
the API call now we're<font color="#CCCCCC"> going to add an</font><font color="#E5E5E5"> H</font>

437
00:17:44,460 --> 00:17:50,430
<font color="#CCCCCC">Mac type signature to</font><font color="#E5E5E5"> this what this</font>

438
00:17:47,460 --> 00:17:53,040
what we do is we<font color="#CCCCCC"> had a secret</font><font color="#E5E5E5"> paired</font>

439
00:17:50,430 --> 00:17:55,530
<font color="#E5E5E5">with the API key</font><font color="#CCCCCC"> and we're going to use</font>

440
00:17:53,040 --> 00:18:00,210
that to sign a combination of the

441
00:17:55,530 --> 00:18:01,710
<font color="#CCCCCC">request</font><font color="#E5E5E5"> plus some semi randomized piece</font>

442
00:18:00,210 --> 00:18:04,230
of<font color="#CCCCCC"> information in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> case the</font><font color="#E5E5E5"> easiest</font>

443
00:18:01,710 --> 00:18:06,180
one to use<font color="#CCCCCC"> as the OAuth token it changes</font>

444
00:18:04,230 --> 00:18:08,730
periodically<font color="#E5E5E5"> as it times out and you get</font>

445
00:18:06,180 --> 00:18:11,700
fresh tokens<font color="#CCCCCC"> so that gives a</font><font color="#E5E5E5"> little bit</font>

446
00:18:08,730 --> 00:18:14,850
<font color="#CCCCCC">of</font><font color="#E5E5E5"> entropy in this in the solution</font><font color="#CCCCCC"> we go</font>

447
00:18:11,700 --> 00:18:17,820
<font color="#CCCCCC">ahead and take that</font><font color="#E5E5E5"> and sign it with the</font>

448
00:18:14,850 --> 00:18:20,340
hmax secret pass it across<font color="#E5E5E5"> the H</font><font color="#CCCCCC"> max</font>

449
00:18:17,820 --> 00:18:23,580
secret is known on the server so it goes

450
00:18:20,340 --> 00:18:25,919
ahead<font color="#CCCCCC"> and repeats that</font><font color="#E5E5E5"> calculation using</font>

451
00:18:23,580 --> 00:18:28,199
the<font color="#E5E5E5"> pieces of entropy and</font><font color="#CCCCCC"> the the API</font>

452
00:18:25,920 --> 00:18:31,170
call and the secret<font color="#E5E5E5"> it's able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> confirm</font>

453
00:18:28,200 --> 00:18:33,450
yes the signature does<font color="#E5E5E5"> appear valid</font><font color="#CCCCCC"> so</font>

454
00:18:31,170 --> 00:18:35,580
the<font color="#E5E5E5"> good news</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> it proves that the</font>

455
00:18:33,450 --> 00:18:37,950
request is untampered<font color="#E5E5E5"> when it came</font>

456
00:18:35,580 --> 00:18:39,629
<font color="#E5E5E5">through</font><font color="#CCCCCC"> the secret itself is never</font>

457
00:18:37,950 --> 00:18:41,040
transmitted it's still<font color="#E5E5E5"> just sitting</font>

458
00:18:39,630 --> 00:18:44,040
there<font color="#E5E5E5"> on the client and on the server</font>

459
00:18:41,040 --> 00:18:45,600
<font color="#E5E5E5">the API key still goes across but</font>

460
00:18:44,040 --> 00:18:48,840
without the<font color="#E5E5E5"> secret and the knowledge</font>

461
00:18:45,600 --> 00:18:53,159
<font color="#E5E5E5">that we're</font><font color="#CCCCCC"> doing</font><font color="#E5E5E5"> an H max signing</font><font color="#CCCCCC"> that's</font>

462
00:18:48,840 --> 00:18:55,110
<font color="#E5E5E5">okay and I guess I should point out</font><font color="#CCCCCC"> also</font>

463
00:18:53,160 --> 00:18:57,200
that<font color="#E5E5E5"> in addition to signing if you want</font>

464
00:18:55,110 --> 00:19:00,270
to you could fully encrypt this

465
00:18:57,200 --> 00:19:01,590
communication<font color="#E5E5E5"> so if you are running TLS</font>

466
00:19:00,270 --> 00:19:03,660
you would have sort of two<font color="#E5E5E5"> layers of</font>

467
00:19:01,590 --> 00:19:05,970
<font color="#E5E5E5">communication here the first encryption</font>

468
00:19:03,660 --> 00:19:07,350
at the TLS layer and at the application

469
00:19:05,970 --> 00:19:10,410
layer you could<font color="#E5E5E5"> have a second layer of</font>

470
00:19:07,350 --> 00:19:12,149
<font color="#E5E5E5">encryption it slows down your process a</font>

471
00:19:10,410 --> 00:19:14,610
little<font color="#E5E5E5"> more</font><font color="#CCCCCC"> to do the</font><font color="#E5E5E5"> decryption but it</font>

472
00:19:12,150 --> 00:19:18,180
now it<font color="#E5E5E5"> has a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> more security</font>

473
00:19:14,610 --> 00:19:20,729
through so it's your choice so you've

474
00:19:18,180 --> 00:19:22,230
got a secret<font color="#CCCCCC"> now sitting there and you</font>

475
00:19:20,730 --> 00:19:24,360
want to make sure<font color="#CCCCCC"> that it's as hard to</font>

476
00:19:22,230 --> 00:19:26,820
<font color="#E5E5E5">find</font><font color="#CCCCCC"> as possible the bad news no matter</font>

477
00:19:24,360 --> 00:19:28,770
what you do if somebody<font color="#E5E5E5"> wants to</font><font color="#CCCCCC"> find it</font>

478
00:19:26,820 --> 00:19:32,220
they will eventually<font color="#E5E5E5"> figure out how to</font>

479
00:19:28,770 --> 00:19:34,110
find it<font color="#CCCCCC"> the initial thing you do is you</font>

480
00:19:32,220 --> 00:19:35,600
want to obfuscate<font color="#CCCCCC"> your code and the</font>

481
00:19:34,110 --> 00:19:39,090
native code<font color="#E5E5E5"> running on your mobile app</font>

482
00:19:35,600 --> 00:19:41,010
and both Android and<font color="#E5E5E5"> iOS come with sort</font>

483
00:19:39,090 --> 00:19:43,889
of<font color="#E5E5E5"> basic free obfuscation so they'll</font>

484
00:19:41,010 --> 00:19:46,230
change variable names<font color="#CCCCCC"> and now</font>

485
00:19:43,890 --> 00:19:48,060
<font color="#E5E5E5">potentially you know</font><font color="#CCCCCC"> vary the control</font>

486
00:19:46,230 --> 00:19:50,330
flow make it harder to understand what

487
00:19:48,060 --> 00:19:52,980
the code<font color="#E5E5E5"> is doing so that gets you down</font>

488
00:19:50,330 --> 00:19:55,779
<font color="#CCCCCC">part of the way and you can</font><font color="#E5E5E5"> buy more</font>

489
00:19:52,980 --> 00:19:58,239
professional and higher level<font color="#E5E5E5"> up escape</font>

490
00:19:55,779 --> 00:20:01,419
which will do more and more<font color="#E5E5E5"> obfuscation</font>

491
00:19:58,239 --> 00:20:02,950
of the code<font color="#E5E5E5"> you can roll</font><font color="#CCCCCC"> your own which</font>

492
00:20:01,419 --> 00:20:04,599
<font color="#CCCCCC">is what</font><font color="#E5E5E5"> many</font><font color="#CCCCCC"> people will try and do</font>

493
00:20:02,950 --> 00:20:06,639
they'll try<font color="#CCCCCC"> and build</font><font color="#E5E5E5"> up some</font><font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of</font>

494
00:20:04,599 --> 00:20:08,529
custom secret<font color="#E5E5E5"> if you've got a secret</font>

495
00:20:06,639 --> 00:20:11,008
<font color="#E5E5E5">just sitting there statically it's</font>

496
00:20:08,529 --> 00:20:13,389
something you can go<font color="#E5E5E5"> look for by itself</font>

497
00:20:11,009 --> 00:20:14,799
<font color="#E5E5E5">so a common approach</font><font color="#CCCCCC"> would be to</font><font color="#E5E5E5"> break</font>

498
00:20:13,389 --> 00:20:16,539
that secret<font color="#CCCCCC"> into a bunch of different</font>

499
00:20:14,799 --> 00:20:19,119
pieces<font color="#E5E5E5"> stick them in different places in</font>

500
00:20:16,539 --> 00:20:21,279
your<font color="#E5E5E5"> code and through some tricky and</font>

501
00:20:19,119 --> 00:20:23,289
quite often some<font color="#CCCCCC"> sort of X or Sh</font>

502
00:20:21,279 --> 00:20:26,080
like function<font color="#E5E5E5"> go ahead and reassemble</font>

503
00:20:23,289 --> 00:20:28,690
<font color="#E5E5E5">that a code to create the secret this</font>

504
00:20:26,080 --> 00:20:30,369
has to be done at<font color="#CCCCCC"> runtime which is good</font>

505
00:20:28,690 --> 00:20:32,109
<font color="#E5E5E5">because the secret</font><font color="#CCCCCC"> doesn't exist in one</font>

506
00:20:30,369 --> 00:20:33,789
place but<font color="#E5E5E5"> it has to be very</font>

507
00:20:32,109 --> 00:20:35,289
deterministic<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> secret you end</font>

508
00:20:33,789 --> 00:20:37,929
up with it has to be<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that the</font>

509
00:20:35,289 --> 00:20:39,580
server<font color="#E5E5E5"> can also recreate so you don't</font>

510
00:20:37,929 --> 00:20:41,139
have a lot of entry in<font color="#E5E5E5"> this case it's</font>

511
00:20:39,580 --> 00:20:44,408
all<font color="#CCCCCC"> in how well you can hide those</font>

512
00:20:41,139 --> 00:20:46,718
pieces<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can take this to extreme with</font>

513
00:20:44,409 --> 00:20:49,839
<font color="#E5E5E5">white box cryptography where you take a</font>

514
00:20:46,719 --> 00:20:51,849
secret<font color="#E5E5E5"> and you actually dissolve it</font>

515
00:20:49,839 --> 00:20:53,769
thoroughly into your code and rather

516
00:20:51,849 --> 00:20:56,229
than storing the<font color="#CCCCCC"> information you will</font>

517
00:20:53,769 --> 00:20:59,589
convert it into some sort<font color="#CCCCCC"> of algorithm</font>

518
00:20:56,229 --> 00:21:01,809
to even further hide what's going on

519
00:20:59,589 --> 00:21:05,049
so that's good if you have a secret<font color="#CCCCCC"> to</font>

520
00:21:01,809 --> 00:21:06,759
to<font color="#E5E5E5"> bake into your code it's bad if</font><font color="#CCCCCC"> that</font>

521
00:21:05,049 --> 00:21:08,200
<font color="#E5E5E5">secret is uncovered you have another</font>

522
00:21:06,759 --> 00:21:10,989
maintenance problem where you<font color="#CCCCCC"> have to</font>

523
00:21:08,200 --> 00:21:13,359
download<font color="#CCCCCC"> a</font><font color="#E5E5E5"> new white box</font><font color="#CCCCCC"> script could</font>

524
00:21:10,989 --> 00:21:15,070
download<font color="#E5E5E5"> a new white box or go through</font>

525
00:21:13,359 --> 00:21:16,139
some sort of updating<font color="#CCCCCC"> process to go</font>

526
00:21:15,070 --> 00:21:18,070
<font color="#CCCCCC">through the secret</font>

527
00:21:16,139 --> 00:21:20,529
additionally there are software<font color="#E5E5E5"> and</font>

528
00:21:18,070 --> 00:21:21,700
hardware backed key stores so you put a

529
00:21:20,529 --> 00:21:24,609
secret<font color="#E5E5E5"> in there</font>

530
00:21:21,700 --> 00:21:26,830
the secret doesn't come out<font color="#CCCCCC"> but you can</font>

531
00:21:24,609 --> 00:21:29,439
use the store to do<font color="#CCCCCC"> certain operations</font>

532
00:21:26,830 --> 00:21:31,899
<font color="#E5E5E5">for you like an</font><font color="#CCCCCC"> h-back</font><font color="#E5E5E5"> operation for</font>

533
00:21:29,440 --> 00:21:34,119
example<font color="#CCCCCC"> if a device can be</font><font color="#E5E5E5"> routed the</font>

534
00:21:31,899 --> 00:21:36,279
software back ones are pretty<font color="#CCCCCC"> vulnerable</font>

535
00:21:34,119 --> 00:21:39,519
<font color="#E5E5E5">and the hardware ones using something</font>

536
00:21:36,279 --> 00:21:41,889
like<font color="#CCCCCC"> arm t trust</font><font color="#E5E5E5"> their</font><font color="#CCCCCC"> trusted own</font>

537
00:21:39,519 --> 00:21:43,509
technology it's kind<font color="#E5E5E5"> of hard to use</font><font color="#CCCCCC"> so</font>

538
00:21:41,889 --> 00:21:45,218
it hasn't<font color="#E5E5E5"> been used too much in the</font>

539
00:21:43,509 --> 00:21:48,969
<font color="#E5E5E5">industry but it's another approach you</font>

540
00:21:45,219 --> 00:21:50,499
can you can go for it so what ship<font color="#CCCCCC"> fast</font>

541
00:21:48,969 --> 00:21:53,109
decided to do was to go<font color="#CCCCCC"> ahead and</font>

542
00:21:50,499 --> 00:21:54,759
<font color="#CCCCCC">calculate the secret</font><font color="#E5E5E5"> at runtime so they</font>

543
00:21:53,109 --> 00:21:57,428
avoided just storing<font color="#E5E5E5"> this one big fat</font>

544
00:21:54,759 --> 00:22:00,159
secret to go after and they went<font color="#E5E5E5"> through</font>

545
00:21:57,429 --> 00:22:02,019
an<font color="#CCCCCC"> xor type calculation to split the</font>

546
00:22:00,159 --> 00:22:05,649
piece in an X or<font color="#E5E5E5"> a bunch of things back</font>

547
00:22:02,019 --> 00:22:08,340
together<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> is deterministic fairly</font>

548
00:22:05,649 --> 00:22:10,229
easy to<font color="#E5E5E5"> compute</font><font color="#CCCCCC"> so they</font>

549
00:22:08,340 --> 00:22:12,899
started with a static secret and they

550
00:22:10,230 --> 00:22:15,180
<font color="#CCCCCC">actually calculated this obfuscated</font>

551
00:22:12,900 --> 00:22:18,690
secret from<font color="#E5E5E5"> that seed and that's what's</font>

552
00:22:15,180 --> 00:22:22,140
used<font color="#E5E5E5"> in the H Mac so how did</font><font color="#CCCCCC"> chip</font><font color="#E5E5E5"> Raider</font>

553
00:22:18,690 --> 00:22:26,690
respond really<font color="#CCCCCC"> quickly unfortunately</font>

554
00:22:22,140 --> 00:22:29,130
they broke the<font color="#CCCCCC"> HMI pretty darn fast so</font>

555
00:22:26,690 --> 00:22:30,960
<font color="#CCCCCC">sometime later they were back</font><font color="#E5E5E5"> online and</font>

556
00:22:29,130 --> 00:22:33,590
examination of<font color="#CCCCCC"> our code said yep they</font>

557
00:22:30,960 --> 00:22:36,750
got<font color="#E5E5E5"> it question is how did they get it</font>

558
00:22:33,590 --> 00:22:38,760
<font color="#CCCCCC">well</font><font color="#E5E5E5"> in the Android</font><font color="#CCCCCC"> world and in iOS</font>

559
00:22:36,750 --> 00:22:40,770
<font color="#CCCCCC">there are a lot of good reverse</font>

560
00:22:38,760 --> 00:22:43,770
engineering tools available many of them

561
00:22:40,770 --> 00:22:45,780
free<font color="#CCCCCC"> so it's very easy to decompile the</font>

562
00:22:43,770 --> 00:22:49,170
code and<font color="#E5E5E5"> to go ahead and repackage apps</font>

563
00:22:45,780 --> 00:22:51,870
run debugging on apps that were maybe

564
00:22:49,170 --> 00:22:53,640
<font color="#E5E5E5">not intended to be debugged</font><font color="#CCCCCC"> and we can</font>

565
00:22:51,870 --> 00:22:56,639
use these<font color="#CCCCCC"> frameworks to monitor and or</font>

566
00:22:53,640 --> 00:22:58,920
change the runtime behavior<font color="#CCCCCC"> so what they</font>

567
00:22:56,640 --> 00:23:01,680
did<font color="#E5E5E5"> in this case was they repackage of</font>

568
00:22:58,920 --> 00:23:05,370
<font color="#E5E5E5">the app so that</font><font color="#CCCCCC"> they could debug it and</font>

569
00:23:01,680 --> 00:23:05,880
in concert<font color="#CCCCCC"> with the ship fast client</font>

570
00:23:05,370 --> 00:23:07,830
itself

571
00:23:05,880 --> 00:23:10,290
<font color="#E5E5E5">they set a breakpoint in the ship point</font>

572
00:23:07,830 --> 00:23:13,379
client that they're<font color="#E5E5E5"> trying to debug just</font>

573
00:23:10,290 --> 00:23:15,930
before the first<font color="#CCCCCC"> each</font><font color="#E5E5E5"> Mac type operation</font>

574
00:23:13,380 --> 00:23:17,190
is sent as you can see it hit a

575
00:23:15,930 --> 00:23:19,860
breakpoint<font color="#CCCCCC"> and after a little bit of</font>

576
00:23:17,190 --> 00:23:22,740
cycling they came right up<font color="#CCCCCC"> to the secret</font>

577
00:23:19,860 --> 00:23:24,750
that's<font color="#E5E5E5"> being used so they avoided that</font>

578
00:23:22,740 --> 00:23:26,250
complex messy calculation<font color="#E5E5E5"> altogether</font>

579
00:23:24,750 --> 00:23:29,520
they just found<font color="#E5E5E5"> it right</font><font color="#CCCCCC"> before it</font><font color="#E5E5E5"> was</font>

580
00:23:26,250 --> 00:23:32,010
ready<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> sent</font><font color="#CCCCCC"> it's a deterministic</font>

581
00:23:29,520 --> 00:23:33,810
secret so they're good to<font color="#CCCCCC"> go so they now</font>

582
00:23:32,010 --> 00:23:35,430
still have a secret<font color="#CCCCCC"> didn't have to</font>

583
00:23:33,810 --> 00:23:40,020
change ship<font color="#CCCCCC"> radar very much</font><font color="#E5E5E5"> just had to</font>

584
00:23:35,430 --> 00:23:43,050
change<font color="#E5E5E5"> the secret so I'm going to fly</font>

585
00:23:40,020 --> 00:23:47,010
<font color="#CCCCCC">through user author authorization</font><font color="#E5E5E5"> o auth</font>

586
00:23:43,050 --> 00:23:48,659
<font color="#CCCCCC">2 and open ID</font><font color="#E5E5E5"> Connect is what's used in</font>

587
00:23:47,010 --> 00:23:53,370
our application is becoming<font color="#E5E5E5"> pretty</font>

588
00:23:48,660 --> 00:23:55,890
standard as we go through so<font color="#CCCCCC"> o2 is</font><font color="#E5E5E5"> I</font>

589
00:23:53,370 --> 00:24:00,179
stress an authorization protocol it

590
00:23:55,890 --> 00:24:04,260
gives the resource owner the ability<font color="#CCCCCC"> to</font>

591
00:24:00,180 --> 00:24:07,800
specify<font color="#E5E5E5"> scopes that a client is allowed</font>

592
00:24:04,260 --> 00:24:10,260
to<font color="#CCCCCC"> access on the resource server so it's</font>

593
00:24:07,800 --> 00:24:13,980
<font color="#CCCCCC">not actually the Ithaca</font><font color="#E5E5E5"> authentication</font>

594
00:24:10,260 --> 00:24:15,980
<font color="#CCCCCC">of the user though it uses the users</font>

595
00:24:13,980 --> 00:24:18,240
credentials to have someone else

596
00:24:15,980 --> 00:24:19,120
authenticate that that user is who they

597
00:24:18,240 --> 00:24:21,700
<font color="#CCCCCC">say</font><font color="#E5E5E5"> they are</font>

598
00:24:19,120 --> 00:24:25,030
<font color="#CCCCCC">it</font><font color="#E5E5E5"> uses that on the side it's often</font>

599
00:24:21,700 --> 00:24:30,480
extended with open ID connect to do

600
00:24:25,030 --> 00:24:32,770
things like introspection<font color="#E5E5E5"> discovery and</font>

601
00:24:30,480 --> 00:24:34,600
<font color="#E5E5E5">replication of tokens there's a lot more</font>

602
00:24:32,770 --> 00:24:36,220
<font color="#E5E5E5">standardization in that flow so it's</font>

603
00:24:34,600 --> 00:24:38,610
it's<font color="#E5E5E5"> it's almost becoming</font>

604
00:24:36,220 --> 00:24:40,450
interchangeable<font color="#CCCCCC"> you ought to and oh I DC</font>

605
00:24:38,610 --> 00:24:41,979
there are different grant types

606
00:24:40,450 --> 00:24:43,510
depending<font color="#CCCCCC"> on</font><font color="#E5E5E5"> whether there's a human in</font>

607
00:24:41,980 --> 00:24:45,160
the loop or not<font color="#E5E5E5"> whether you're</font><font color="#CCCCCC"> doing</font>

608
00:24:43,510 --> 00:24:48,610
something<font color="#E5E5E5"> real legacy or something more</font>

609
00:24:45,160 --> 00:24:51,550
modern<font color="#CCCCCC"> for a user in the loop</font><font color="#E5E5E5"> the</font>

610
00:24:48,610 --> 00:24:54,550
<font color="#E5E5E5">authorization code grant flow is by far</font>

611
00:24:51,550 --> 00:24:57,100
<font color="#CCCCCC">the</font><font color="#E5E5E5"> most</font><font color="#CCCCCC"> popular this</font><font color="#E5E5E5"> is what the</font>

612
00:24:54,550 --> 00:24:58,629
abstract protocol flow looks like for no

613
00:24:57,100 --> 00:25:01,030
<font color="#E5E5E5">matter what flow it is the first thing</font>

614
00:24:58,630 --> 00:25:03,700
<font color="#CCCCCC">that a client</font><font color="#E5E5E5"> does is make an</font>

615
00:25:01,030 --> 00:25:05,770
authorization request<font color="#E5E5E5"> it's asking the</font>

616
00:25:03,700 --> 00:25:07,840
resource owner<font color="#CCCCCC"> which is usually</font><font color="#E5E5E5"> the user</font>

617
00:25:05,770 --> 00:25:10,000
but could be somebody who's delegating

618
00:25:07,840 --> 00:25:13,240
something to a client<font color="#CCCCCC"> it's asking the</font>

619
00:25:10,000 --> 00:25:16,630
<font color="#E5E5E5">resource</font><font color="#CCCCCC"> owner to say yes I grant this</font>

620
00:25:13,240 --> 00:25:19,510
client the ability to access<font color="#E5E5E5"> this</font>

621
00:25:16,630 --> 00:25:22,450
information<font color="#E5E5E5"> on the resource room at that</font>

622
00:25:19,510 --> 00:25:24,460
<font color="#E5E5E5">point the user is asked to</font><font color="#CCCCCC"> present their</font>

623
00:25:22,450 --> 00:25:27,460
credentials<font color="#E5E5E5"> goes through to an</font>

624
00:25:24,460 --> 00:25:29,230
authorization server which verifies the

625
00:25:27,460 --> 00:25:31,780
user is who they<font color="#CCCCCC"> say they are and then</font>

626
00:25:29,230 --> 00:25:34,390
<font color="#CCCCCC">go ahead eventually and issue some sort</font>

627
00:25:31,780 --> 00:25:36,580
of access token<font color="#CCCCCC"> and then that access</font>

628
00:25:34,390 --> 00:25:39,160
<font color="#CCCCCC">token</font><font color="#E5E5E5"> is presented</font><font color="#CCCCCC"> to the resource</font>

629
00:25:36,580 --> 00:25:41,620
server who checks it if it's signed

630
00:25:39,160 --> 00:25:43,960
correctly it hasn't expired<font color="#CCCCCC"> then it goes</font>

631
00:25:41,620 --> 00:25:46,620
ahead and returns the protected<font color="#E5E5E5"> resource</font>

632
00:25:43,960 --> 00:25:49,090
<font color="#E5E5E5">so it completes</font><font color="#CCCCCC"> in a successful</font><font color="#E5E5E5"> API call</font>

633
00:25:46,620 --> 00:25:52,360
<font color="#E5E5E5">this is what the code grant flow looks</font>

634
00:25:49,090 --> 00:25:55,178
like<font color="#E5E5E5"> and the important takeaways</font><font color="#CCCCCC"> here is</font>

635
00:25:52,360 --> 00:25:58,419
there's an authorization step and

636
00:25:55,179 --> 00:26:01,990
there's a<font color="#E5E5E5"> back-end step in the first</font>

637
00:25:58,420 --> 00:26:04,600
<font color="#CCCCCC">step the</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> thing that the client</font><font color="#E5E5E5"> in</font>

638
00:26:01,990 --> 00:26:09,490
our case the ship<font color="#CCCCCC"> fast</font><font color="#E5E5E5"> application</font><font color="#CCCCCC"> would</font>

639
00:26:04,600 --> 00:26:12,449
do is delegate the author the the

640
00:26:09,490 --> 00:26:15,760
authorization step to a user<font color="#E5E5E5"> agent which</font>

641
00:26:12,450 --> 00:26:18,220
<font color="#CCCCCC">is also kind of known as the front-end</font>

642
00:26:15,760 --> 00:26:19,929
<font color="#CCCCCC">you know off</font><font color="#E5E5E5"> to your process and the</font>

643
00:26:18,220 --> 00:26:23,410
user agent<font color="#E5E5E5"> is typically</font><font color="#CCCCCC"> the browser</font>

644
00:26:19,929 --> 00:26:26,559
<font color="#E5E5E5">that's sitting on a device</font><font color="#CCCCCC"> so it it</font>

645
00:26:23,410 --> 00:26:27,800
redirects<font color="#E5E5E5"> on to the browser and the user</font>

646
00:26:26,559 --> 00:26:29,570
sees a

647
00:26:27,800 --> 00:26:31,370
authorization screen<font color="#E5E5E5"> you've probably</font>

648
00:26:29,570 --> 00:26:34,580
seen<font color="#E5E5E5"> them before</font><font color="#CCCCCC"> on Google or whatever</font>

649
00:26:31,370 --> 00:26:36,409
you want to<font color="#E5E5E5"> use you say yes</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> want to</font>

650
00:26:34,580 --> 00:26:39,530
<font color="#CCCCCC">authorize this access to my back-end</font>

651
00:26:36,410 --> 00:26:41,059
information you give<font color="#CCCCCC"> away your house and</font>

652
00:26:39,530 --> 00:26:44,090
your kids and<font color="#CCCCCC"> everything else</font><font color="#E5E5E5"> and it</font>

653
00:26:41,059 --> 00:26:46,690
lets you go<font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> so at</font><font color="#E5E5E5"> that point it</font>

654
00:26:44,090 --> 00:26:49,720
goes over<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> authorization server</font>

655
00:26:46,690 --> 00:26:51,920
verifies that<font color="#E5E5E5"> everything looks good</font><font color="#CCCCCC"> and</font>

656
00:26:49,720 --> 00:26:55,280
<font color="#E5E5E5">after checking out their credentials it</font>

657
00:26:51,920 --> 00:26:57,350
will return an authorization code<font color="#E5E5E5"> that</font>

658
00:26:55,280 --> 00:26:59,840
code it then redirects back<font color="#E5E5E5"> to your</font>

659
00:26:57,350 --> 00:27:02,240
<font color="#E5E5E5">application</font><font color="#CCCCCC"> and then your application</font>

660
00:26:59,840 --> 00:27:05,659
<font color="#E5E5E5">goes through the</font><font color="#CCCCCC"> backend</font><font color="#E5E5E5"> of this flow</font>

661
00:27:02,240 --> 00:27:07,760
back<font color="#CCCCCC"> to the authorization server</font><font color="#E5E5E5"> and the</font>

662
00:27:05,660 --> 00:27:11,240
code<font color="#CCCCCC"> is exchanged for an initial access</font>

663
00:27:07,760 --> 00:27:13,370
token plus a refresh token<font color="#CCCCCC"> why is this</font>

664
00:27:11,240 --> 00:27:14,780
split into two<font color="#CCCCCC"> pieces like</font><font color="#E5E5E5"> this why</font>

665
00:27:13,370 --> 00:27:17,300
don't<font color="#E5E5E5"> we just return the access token</font>

666
00:27:14,780 --> 00:27:19,220
straight off it's basically<font color="#CCCCCC"> to separate</font>

667
00:27:17,300 --> 00:27:21,950
the<font color="#CCCCCC"> front and the</font><font color="#E5E5E5"> back end</font><font color="#CCCCCC"> to make sure</font>

668
00:27:19,220 --> 00:27:26,360
that the access token<font color="#CCCCCC"> is never seen by</font>

669
00:27:21,950 --> 00:27:28,070
the user<font color="#CCCCCC"> agent</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the user agent</font><font color="#E5E5E5"> is not</font>

670
00:27:26,360 --> 00:27:32,240
involved<font color="#CCCCCC"> in any of your applications</font>

671
00:27:28,070 --> 00:27:34,730
<font color="#CCCCCC">business so the credentials are on the</font>

672
00:27:32,240 --> 00:27:37,220
user agent<font color="#CCCCCC"> and the access token is in</font>

673
00:27:34,730 --> 00:27:38,960
the<font color="#CCCCCC"> backend</font><font color="#E5E5E5"> so there's no leakage of</font>

674
00:27:37,220 --> 00:27:42,950
information<font color="#CCCCCC"> hopefully</font><font color="#E5E5E5"> between those two</font>

675
00:27:38,960 --> 00:27:46,910
pieces an access<font color="#CCCCCC"> token is typically</font><font color="#E5E5E5"> a</font>

676
00:27:42,950 --> 00:27:49,250
jot a JWT token with<font color="#E5E5E5"> a limited amount</font><font color="#CCCCCC"> of</font>

677
00:27:46,910 --> 00:27:51,860
<font color="#E5E5E5">lifetime</font><font color="#CCCCCC"> that is chosen by</font><font color="#E5E5E5"> the user</font>

678
00:27:49,250 --> 00:27:53,690
<font color="#E5E5E5">might typically be it depends</font><font color="#CCCCCC"> a banking</font>

679
00:27:51,860 --> 00:27:55,790
<font color="#CCCCCC">application might be a few minutes a</font>

680
00:27:53,690 --> 00:27:58,190
game<font color="#CCCCCC"> if you have to login might</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> four</font>

681
00:27:55,790 --> 00:28:00,889
six months<font color="#CCCCCC"> it it's up to the users</font>

682
00:27:58,190 --> 00:28:05,330
choice<font color="#E5E5E5"> but</font><font color="#CCCCCC"> we'd</font><font color="#E5E5E5"> recommend keeping the</font>

683
00:28:00,890 --> 00:28:06,860
access token lifetime short and when you

684
00:28:05,330 --> 00:28:09,139
go ahead<font color="#E5E5E5"> and make an API call with an</font>

685
00:28:06,860 --> 00:28:11,928
access<font color="#CCCCCC"> token and</font><font color="#E5E5E5"> it fails</font><font color="#CCCCCC"> it comes back</font>

686
00:28:09,140 --> 00:28:14,809
and says it's it's invalid<font color="#E5E5E5"> then you go</font>

687
00:28:11,929 --> 00:28:17,600
ahead<font color="#E5E5E5"> and then take your</font><font color="#CCCCCC"> Refresh token</font>

688
00:28:14,809 --> 00:28:20,270
<font color="#CCCCCC">and send that back to</font><font color="#E5E5E5"> the authorization</font>

689
00:28:17,600 --> 00:28:22,850
<font color="#CCCCCC">server it checks out your your</font>

690
00:28:20,270 --> 00:28:24,860
environment and send you back<font color="#CCCCCC"> a fresh</font>

691
00:28:22,850 --> 00:28:28,428
access token and typically a fresh

692
00:28:24,860 --> 00:28:30,260
<font color="#CCCCCC">Refresh token as well so both</font><font color="#E5E5E5"> the access</font>

693
00:28:28,429 --> 00:28:33,400
token<font color="#E5E5E5"> and the Refresh token and best</font>

694
00:28:30,260 --> 00:28:37,850
practices will be single-use kind of

695
00:28:33,400 --> 00:28:41,600
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of a tokens there are a number of</font>

696
00:28:37,850 --> 00:28:43,250
ways<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can attack Oh auth most of</font>

697
00:28:41,600 --> 00:28:45,529
them have<font color="#CCCCCC"> been plugged up because it</font><font color="#E5E5E5"> is</font>

698
00:28:43,250 --> 00:28:48,140
quite popularly used<font color="#E5E5E5"> I just picked</font><font color="#CCCCCC"> out</font>

699
00:28:45,529 --> 00:28:50,299
one<font color="#E5E5E5"> here for mobile devices</font><font color="#CCCCCC"> because it</font>

700
00:28:48,140 --> 00:28:54,470
involves a leaky secret it's called

701
00:28:50,299 --> 00:29:00,168
pixie<font color="#CCCCCC"> pkc and in this</font><font color="#E5E5E5"> case what we want</font>

702
00:28:54,470 --> 00:29:03,370
to do is enable<font color="#CCCCCC"> the to ascertain</font><font color="#E5E5E5"> that</font>

703
00:29:00,169 --> 00:29:06,919
<font color="#E5E5E5">the front end piece when it goes through</font>

704
00:29:03,370 --> 00:29:10,039
<font color="#CCCCCC">has to</font><font color="#E5E5E5"> be the same set</font><font color="#CCCCCC"> of operations as</font>

705
00:29:06,919 --> 00:29:13,429
the back<font color="#CCCCCC"> end piece</font><font color="#E5E5E5"> so looking at this as</font>

706
00:29:10,039 --> 00:29:17,570
it goes through<font color="#E5E5E5"> we start on the front</font>

707
00:29:13,429 --> 00:29:20,870
end asking<font color="#E5E5E5"> for some</font><font color="#CCCCCC"> information and we</font>

708
00:29:17,570 --> 00:29:23,299
issue a code challenge value<font color="#E5E5E5"> with this</font>

709
00:29:20,870 --> 00:29:25,178
<font color="#E5E5E5">that value is sent over to the</font>

710
00:29:23,299 --> 00:29:28,190
authorization<font color="#CCCCCC"> server where it's stored</font>

711
00:29:25,179 --> 00:29:30,529
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is just a hash of a random value</font>

712
00:29:28,190 --> 00:29:33,289
<font color="#E5E5E5">and the hash is known to your</font>

713
00:29:30,529 --> 00:29:35,630
application<font color="#E5E5E5"> so when you come up back</font>

714
00:29:33,289 --> 00:29:38,270
<font color="#E5E5E5">around to the back end the back end</font>

715
00:29:35,630 --> 00:29:40,789
sends<font color="#E5E5E5"> the original code verifier which</font>

716
00:29:38,270 --> 00:29:44,299
is the unhatched value and the

717
00:29:40,789 --> 00:29:46,520
authorization<font color="#CCCCCC"> server</font><font color="#E5E5E5"> takes</font><font color="#CCCCCC"> that code</font>

718
00:29:44,299 --> 00:29:48,559
verifier hashes it and compares it<font color="#CCCCCC"> to</font>

719
00:29:46,520 --> 00:29:51,168
<font color="#E5E5E5">the code challenge which was the hash</font>

720
00:29:48,559 --> 00:29:53,960
<font color="#E5E5E5">that it got originally from the front</font>

721
00:29:51,169 --> 00:29:57,470
end<font color="#E5E5E5"> and if they match</font><font color="#CCCCCC"> then it will go</font>

722
00:29:53,960 --> 00:29:59,330
<font color="#E5E5E5">ahead and give you back your access</font>

723
00:29:57,470 --> 00:30:02,390
token<font color="#CCCCCC"> and</font><font color="#E5E5E5"> your refresh token as you go</font>

724
00:29:59,330 --> 00:30:04,760
through this is typically<font color="#E5E5E5"> used on native</font>

725
00:30:02,390 --> 00:30:06,350
devices where they just know that client

726
00:30:04,760 --> 00:30:08,629
secret is not really going to<font color="#E5E5E5"> be worth</font>

727
00:30:06,350 --> 00:30:12,709
too much<font color="#E5E5E5"> it's easy potentially to steal</font>

728
00:30:08,630 --> 00:30:15,320
it's a static secret<font color="#CCCCCC"> so in some cases</font>

729
00:30:12,710 --> 00:30:17,690
<font color="#E5E5E5">like in Google</font><font color="#CCCCCC"> OAuth implementations for</font>

730
00:30:15,320 --> 00:30:21,230
example there is<font color="#CCCCCC"> no client secret even</font>

731
00:30:17,690 --> 00:30:22,610
used relying on this<font color="#CCCCCC"> pkc mechanism</font><font color="#E5E5E5"> to</font>

732
00:30:21,230 --> 00:30:28,429
link the front and the<font color="#E5E5E5"> back ends</font>

733
00:30:22,610 --> 00:30:31,459
integrity so these secrets<font color="#CCCCCC"> seem to</font><font color="#E5E5E5"> be a</font>

734
00:30:28,429 --> 00:30:34,399
big problem<font color="#E5E5E5"> and you want to get rid of</font>

735
00:30:31,460 --> 00:30:36,830
them<font color="#E5E5E5"> if possible</font><font color="#CCCCCC"> so how could you go</font>

736
00:30:34,399 --> 00:30:39,260
ahead and move<font color="#CCCCCC"> forward and try and do</font>

737
00:30:36,830 --> 00:30:42,350
<font color="#E5E5E5">that as we said back</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the beginning</font><font color="#CCCCCC"> of</font>

738
00:30:39,260 --> 00:30:44,658
the<font color="#CCCCCC"> presentation</font><font color="#E5E5E5"> you will tend to be</font>

739
00:30:42,350 --> 00:30:46,230
making calls<font color="#E5E5E5"> to multiple different API</font>

740
00:30:44,659 --> 00:30:48,000
services

741
00:30:46,230 --> 00:30:50,340
so you're gonna have<font color="#CCCCCC"> a secret sitting</font>

742
00:30:48,000 --> 00:30:52,370
there<font color="#E5E5E5"> are an API key had a minimum for</font>

743
00:30:50,340 --> 00:30:55,020
<font color="#E5E5E5">each one of these</font><font color="#CCCCCC"> services most likely</font>

744
00:30:52,370 --> 00:30:57,439
so that's lots of<font color="#E5E5E5"> secrets to try and</font>

745
00:30:55,020 --> 00:31:00,330
<font color="#E5E5E5">protect lots of chances to make mistakes</font>

746
00:30:57,440 --> 00:31:03,840
<font color="#CCCCCC">so</font><font color="#E5E5E5"> typically you will use a proxy</font>

747
00:31:00,330 --> 00:31:06,720
pattern<font color="#CCCCCC"> and delegate a sort</font><font color="#E5E5E5"> of master</font>

748
00:31:03,840 --> 00:31:08,429
secret<font color="#E5E5E5"> for your application</font><font color="#CCCCCC"> so that's</font>

749
00:31:06,720 --> 00:31:12,390
<font color="#E5E5E5">you could will still be stored on the</font>

750
00:31:08,430 --> 00:31:15,600
app it's still<font color="#CCCCCC"> vulnerable and then</font><font color="#E5E5E5"> API</font>

751
00:31:12,390 --> 00:31:18,030
calls will route using<font color="#E5E5E5"> that API key into</font>

752
00:31:15,600 --> 00:31:21,000
the<font color="#E5E5E5"> server which will then know the API</font>

753
00:31:18,030 --> 00:31:23,610
keys of the end<font color="#E5E5E5"> destination services and</font>

754
00:31:21,000 --> 00:31:25,890
we'll go ahead and<font color="#CCCCCC"> proxy that traffic</font>

755
00:31:23,610 --> 00:31:28,770
with the appropriate keys<font color="#E5E5E5"> how to those</font>

756
00:31:25,890 --> 00:31:31,050
services<font color="#CCCCCC"> so you've reduced</font><font color="#E5E5E5"> your problem</font>

757
00:31:28,770 --> 00:31:33,180
from n<font color="#E5E5E5"> secrets down to one secret but</font>

758
00:31:31,050 --> 00:31:35,730
that<font color="#E5E5E5"> secrets become pretty not important</font>

759
00:31:33,180 --> 00:31:37,710
but<font color="#E5E5E5"> it is easier to put all your</font>

760
00:31:35,730 --> 00:31:40,200
<font color="#E5E5E5">resources on defending one secret than</font>

761
00:31:37,710 --> 00:31:42,570
it is in defending<font color="#E5E5E5"> a mix of them not to</font>

762
00:31:40,200 --> 00:31:44,790
mention that has these keys change<font color="#E5E5E5"> over</font>

763
00:31:42,570 --> 00:31:50,070
time potentially<font color="#CCCCCC"> you have a maintenance</font>

764
00:31:44,790 --> 00:31:53,010
issue<font color="#E5E5E5"> that's magnified so like most good</font>

765
00:31:50,070 --> 00:31:54,960
computer<font color="#E5E5E5"> science problems in</font><font color="#CCCCCC"> direction</font>

766
00:31:53,010 --> 00:31:57,960
is<font color="#E5E5E5"> always something</font><font color="#CCCCCC"> to at least</font><font color="#E5E5E5"> think</font>

767
00:31:54,960 --> 00:32:00,020
<font color="#CCCCCC">about so is it possible for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> to be</font>

768
00:31:57,960 --> 00:32:02,520
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> offer a secret as a service</font>

769
00:32:00,020 --> 00:32:06,690
<font color="#E5E5E5">rather than just</font><font color="#CCCCCC"> having a secret sitting</font>

770
00:32:02,520 --> 00:32:09,120
there on the app so imagine an app wants

771
00:32:06,690 --> 00:32:11,670
to go ahead<font color="#E5E5E5"> and make an API call</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

772
00:32:09,120 --> 00:32:14,760
server<font color="#CCCCCC"> it could go to a service</font><font color="#E5E5E5"> and say</font>

773
00:32:11,670 --> 00:32:16,380
can I<font color="#CCCCCC"> have the secret</font><font color="#E5E5E5"> for this so that's</font>

774
00:32:14,760 --> 00:32:18,090
one<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> to do we really</font><font color="#E5E5E5"> haven't</font>

775
00:32:16,380 --> 00:32:20,940
changed<font color="#CCCCCC"> the problem</font><font color="#E5E5E5"> too much there's not</font>

776
00:32:18,090 --> 00:32:22,590
<font color="#E5E5E5">a secret on the app per se but now we</font>

777
00:32:20,940 --> 00:32:25,620
have a communication link to<font color="#E5E5E5"> another</font>

778
00:32:22,590 --> 00:32:26,939
server so it seems on first<font color="#E5E5E5"> glance we</font>

779
00:32:25,620 --> 00:32:31,290
may have actually<font color="#CCCCCC"> made this</font><font color="#E5E5E5"> problem a</font>

780
00:32:26,940 --> 00:32:34,200
little<font color="#CCCCCC"> bit tougher but one of</font><font color="#E5E5E5"> the</font>

781
00:32:31,290 --> 00:32:38,159
techniques<font color="#CCCCCC"> that you can use is to</font><font color="#E5E5E5"> go</font>

782
00:32:34,200 --> 00:32:42,330
<font color="#CCCCCC">ahead and perform some sort</font><font color="#E5E5E5"> of integrity</font>

783
00:32:38,160 --> 00:32:44,820
<font color="#E5E5E5">measurement on your app and so imagine</font>

784
00:32:42,330 --> 00:32:47,010
<font color="#CCCCCC">the app is going to</font><font color="#E5E5E5"> request a secret</font>

785
00:32:44,820 --> 00:32:49,919
from<font color="#E5E5E5"> the apathy ization service the app</font>

786
00:32:47,010 --> 00:32:52,200
authorization<font color="#E5E5E5"> service would like to give</font>

787
00:32:49,920 --> 00:32:55,440
you that secret but only if you're who

788
00:32:52,200 --> 00:32:57,600
you say<font color="#CCCCCC"> you are so</font>

789
00:32:55,440 --> 00:33:01,230
typically this kind of had a station

790
00:32:57,600 --> 00:33:04,350
<font color="#E5E5E5">approach involves adding an</font><font color="#CCCCCC"> SDK to the</font>

791
00:33:01,230 --> 00:33:06,000
app<font color="#E5E5E5"> and when the app wants to make a</font>

792
00:33:04,350 --> 00:33:08,669
call<font color="#E5E5E5"> to the app a service it calls</font>

793
00:33:06,000 --> 00:33:11,070
through the SDK<font color="#E5E5E5"> the</font><font color="#CCCCCC"> app</font><font color="#E5E5E5"> service will</font>

794
00:33:08,670 --> 00:33:14,900
send a nonce back to avoid replay

795
00:33:11,070 --> 00:33:17,669
attacks<font color="#E5E5E5"> and will challenge the app to</font>

796
00:33:14,900 --> 00:33:20,640
perform a certain<font color="#E5E5E5"> number of tasks</font><font color="#CCCCCC"> to</font>

797
00:33:17,670 --> 00:33:22,140
<font color="#CCCCCC">identify that it has it is the original</font>

798
00:33:20,640 --> 00:33:24,750
app it's<font color="#CCCCCC"> not been tampered with it</font>

799
00:33:22,140 --> 00:33:26,450
hasn't<font color="#E5E5E5"> been touched</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> exactly as it</font>

800
00:33:24,750 --> 00:33:30,840
was<font color="#E5E5E5"> when</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> originally registered</font>

801
00:33:26,450 --> 00:33:34,560
with the authentication service<font color="#CCCCCC"> so this</font>

802
00:33:30,840 --> 00:33:36,480
<font color="#E5E5E5">is how you make reliable</font><font color="#CCCCCC"> the check to</font>

803
00:33:34,560 --> 00:33:37,830
make sure<font color="#E5E5E5"> that there is a valid app</font>

804
00:33:36,480 --> 00:33:39,750
there that you're talking<font color="#CCCCCC"> to and it's</font>

805
00:33:37,830 --> 00:33:42,240
okay<font color="#CCCCCC"> to pass the secret from the</font>

806
00:33:39,750 --> 00:33:44,070
authorization service<font color="#E5E5E5"> back down into the</font>

807
00:33:42,240 --> 00:33:46,260
app which will then take<font color="#CCCCCC"> that secret</font>

808
00:33:44,070 --> 00:33:51,600
potentially and pass that over to<font color="#E5E5E5"> the</font>

809
00:33:46,260 --> 00:33:52,860
<font color="#E5E5E5">API server</font><font color="#CCCCCC"> the the one objection</font><font color="#E5E5E5"> you</font>

810
00:33:51,600 --> 00:33:54,419
might have to<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is hey we have a</font>

811
00:33:52,860 --> 00:33:56,310
communication link<font color="#CCCCCC"> between the app and</font>

812
00:33:54,420 --> 00:33:57,540
<font color="#E5E5E5">the app authorization</font><font color="#CCCCCC"> service and you</font>

813
00:33:56,310 --> 00:34:00,629
told me<font color="#E5E5E5"> those things</font><font color="#CCCCCC"> are a little</font><font color="#E5E5E5"> bit</font>

814
00:33:57,540 --> 00:34:04,860
fragile<font color="#E5E5E5"> it's a lot easier</font><font color="#CCCCCC"> to do to</font>

815
00:34:00,630 --> 00:34:06,510
defend<font color="#E5E5E5"> one very well-known link</font><font color="#CCCCCC"> you can</font>

816
00:34:04,860 --> 00:34:10,109
do a lot of specialized thing on one

817
00:34:06,510 --> 00:34:13,650
link there then it<font color="#E5E5E5"> being open to any</font>

818
00:34:10,110 --> 00:34:14,970
possible routes<font color="#E5E5E5"> back and forth</font><font color="#CCCCCC"> we can</font>

819
00:34:13,650 --> 00:34:17,730
also use some<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> techniques we</font><font color="#CCCCCC"> use</font>

820
00:34:14,969 --> 00:34:21,060
<font color="#E5E5E5">like with H Mac for instance we don't</font>

821
00:34:17,730 --> 00:34:23,580
have to<font color="#CCCCCC"> actually send back the secret</font>

822
00:34:21,060 --> 00:34:25,500
itself<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we could</font><font color="#CCCCCC"> use that</font><font color="#E5E5E5"> sort of H</font>

823
00:34:23,580 --> 00:34:27,900
<font color="#CCCCCC">Mackay kind of technique or use an</font>

824
00:34:25,500 --> 00:34:31,650
oauth2 technique and supply a

825
00:34:27,900 --> 00:34:33,360
time-limited<font color="#CCCCCC"> Jah token back so what you</font>

826
00:34:31,650 --> 00:34:36,090
<font color="#E5E5E5">end up with in that situation is that</font>

827
00:34:33,360 --> 00:34:39,000
<font color="#E5E5E5">the app</font><font color="#CCCCCC"> service knows the static secret</font>

828
00:34:36,090 --> 00:34:41,820
the<font color="#CCCCCC"> API server you're trying to get</font><font color="#E5E5E5"> to</font>

829
00:34:39,000 --> 00:34:43,830
knows the static secret just<font color="#E5E5E5"> like it</font>

830
00:34:41,820 --> 00:34:47,190
would<font color="#CCCCCC"> be</font><font color="#E5E5E5"> with with an</font><font color="#CCCCCC"> oauth2 user case</font>

831
00:34:43,830 --> 00:34:49,860
and you send the app or service<font color="#E5E5E5"> will</font>

832
00:34:47,190 --> 00:34:53,010
send that<font color="#E5E5E5"> time-limited Jah took him back</font>

833
00:34:49,860 --> 00:34:56,040
<font color="#CCCCCC">to</font><font color="#E5E5E5"> the app who will use that in the API</font>

834
00:34:53,010 --> 00:34:59,490
call<font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> a pretty reasonable</font>

835
00:34:56,040 --> 00:35:01,950
reliable system<font color="#CCCCCC"> you get a</font><font color="#E5E5E5"> couple</font>

836
00:34:59,490 --> 00:35:04,439
benefits by<font color="#CCCCCC"> doing in direction with this</font>

837
00:35:01,950 --> 00:35:06,720
attestation approach<font color="#E5E5E5"> remember we said</font>

838
00:35:04,440 --> 00:35:08,910
that<font color="#E5E5E5"> pinning was a bit problematic</font><font color="#CCCCCC"> well</font>

839
00:35:06,720 --> 00:35:11,759
when you have a second server in lieu

840
00:35:08,910 --> 00:35:14,609
<font color="#E5E5E5">here</font><font color="#CCCCCC"> when the app wants to go ahead and</font>

841
00:35:11,760 --> 00:35:17,010
make a call to the app server

842
00:35:14,609 --> 00:35:20,098
he will go ahead<font color="#E5E5E5"> and request for the</font>

843
00:35:17,010 --> 00:35:21,780
server certificate and when he talks to

844
00:35:20,099 --> 00:35:23,430
<font color="#E5E5E5">the</font><font color="#CCCCCC"> APIs</font><font color="#E5E5E5"> service</font><font color="#CCCCCC"> you'll say I want</font><font color="#E5E5E5"> to</font>

845
00:35:21,780 --> 00:35:25,920
talk to this particular server<font color="#CCCCCC"> and the</font>

846
00:35:23,430 --> 00:35:29,009
apps<font color="#CCCCCC"> off service</font><font color="#E5E5E5"> independently will ask</font>

847
00:35:25,920 --> 00:35:31,650
for<font color="#E5E5E5"> that same certificate</font><font color="#CCCCCC"> if there's any</font>

848
00:35:29,010 --> 00:35:34,020
man in the<font color="#E5E5E5"> middle in the traffic the two</font>

849
00:35:31,650 --> 00:35:37,230
<font color="#CCCCCC">certificates will not compare</font><font color="#E5E5E5"> if they do</font>

850
00:35:34,020 --> 00:35:39,259
compare then you're very certain that<font color="#E5E5E5"> we</font>

851
00:35:37,230 --> 00:35:41,609
seem to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> getting back the appropriate</font>

852
00:35:39,260 --> 00:35:44,010
<font color="#E5E5E5">certificate and so we can go ahead</font>

853
00:35:41,609 --> 00:35:46,529
forward<font color="#CCCCCC"> we no longer have to have any</font>

854
00:35:44,010 --> 00:35:50,299
white lists<font color="#E5E5E5"> were dynamically essentially</font>

855
00:35:46,530 --> 00:35:50,299
verifying that the certificates match

856
00:35:50,809 --> 00:35:54,780
another thing you can do is<font color="#E5E5E5"> also</font>

857
00:35:52,859 --> 00:35:57,690
strengthen the auth to flow with<font color="#E5E5E5"> this</font>

858
00:35:54,780 --> 00:36:00,030
kind of approach<font color="#E5E5E5"> remember we had said</font><font color="#CCCCCC"> we</font>

859
00:35:57,690 --> 00:36:02,880
had this kind<font color="#CCCCCC"> of shaky client secret in</font>

860
00:36:00,030 --> 00:36:04,920
<font color="#E5E5E5">the OAuth 2 flow</font><font color="#CCCCCC"> if you do a client add</font>

861
00:36:02,880 --> 00:36:07,500
a station and prove that<font color="#E5E5E5"> the client is</font>

862
00:36:04,920 --> 00:36:09,630
who they say<font color="#CCCCCC"> they are then</font><font color="#E5E5E5"> you can add</font>

863
00:36:07,500 --> 00:36:12,809
that<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the auth to flow where you're</font>

864
00:36:09,630 --> 00:36:16,230
exchanging<font color="#E5E5E5"> the authorization code for</font>

865
00:36:12,809 --> 00:36:18,829
the access<font color="#CCCCCC"> token and you can say instead</font>

866
00:36:16,230 --> 00:36:22,470
<font color="#E5E5E5">of using the client secret</font><font color="#CCCCCC"> use this</font>

867
00:36:18,829 --> 00:36:24,809
approval token instead which basically

868
00:36:22,470 --> 00:36:27,180
says that<font color="#E5E5E5"> the only way I will</font><font color="#CCCCCC"> give you</font>

869
00:36:24,809 --> 00:36:30,450
an access<font color="#CCCCCC"> token is if you are the</font>

870
00:36:27,180 --> 00:36:32,759
<font color="#CCCCCC">original app so if you are an attacker</font>

871
00:36:30,450 --> 00:36:35,788
trying to stuff credentials through<font color="#E5E5E5"> the</font>

872
00:36:32,760 --> 00:36:38,250
system<font color="#CCCCCC"> you will</font><font color="#E5E5E5"> never get an access</font>

873
00:36:35,789 --> 00:36:40,529
<font color="#CCCCCC">token through this if you're</font><font color="#E5E5E5"> just</font>

874
00:36:38,250 --> 00:36:42,299
<font color="#E5E5E5">randomly sending traffic the only way</font>

875
00:36:40,529 --> 00:36:46,819
<font color="#E5E5E5">you'll get the access token is if you're</font>

876
00:36:42,299 --> 00:36:46,819
using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> original untouched</font><font color="#E5E5E5"> application</font>

877
00:36:47,329 --> 00:36:54,480
so ship fast bought into this approach

878
00:36:50,609 --> 00:36:58,230
and they set<font color="#CCCCCC"> up a dynamic</font><font color="#E5E5E5"> had a station</font>

879
00:36:54,480 --> 00:37:00,869
<font color="#CCCCCC">service and they enabled the</font>

880
00:36:58,230 --> 00:37:02,549
communication to<font color="#CCCCCC"> be secured they were</font>

881
00:37:00,869 --> 00:37:05,039
able to remove<font color="#E5E5E5"> all the secrets from the</font>

882
00:37:02,549 --> 00:37:11,038
<font color="#CCCCCC">app by instead using</font><font color="#E5E5E5"> this indirect</font>

883
00:37:05,039 --> 00:37:13,349
method<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> JA</font><font color="#E5E5E5"> tokens so so far at</font>

884
00:37:11,039 --> 00:37:15,359
<font color="#CCCCCC">least for the rest of today ship</font><font color="#E5E5E5"> Raider</font>

885
00:37:13,349 --> 00:37:16,650
has not been able<font color="#E5E5E5"> to break past this</font>

886
00:37:15,359 --> 00:37:20,830
this

887
00:37:16,650 --> 00:37:23,530
defense so where do we stand at<font color="#E5E5E5"> this</font>

888
00:37:20,830 --> 00:37:26,830
<font color="#E5E5E5">point this</font><font color="#CCCCCC"> is what the architectural</font>

889
00:37:23,530 --> 00:37:28,690
pattern looks<font color="#CCCCCC"> like and in</font><font color="#E5E5E5"> this case</font>

890
00:37:26,830 --> 00:37:31,540
probably<font color="#E5E5E5"> the takeaway I would really</font>

891
00:37:28,690 --> 00:37:33,880
like<font color="#CCCCCC"> you to</font><font color="#E5E5E5"> get from</font><font color="#CCCCCC"> this is that most</font>

892
00:37:31,540 --> 00:37:35,560
of<font color="#E5E5E5"> the time we focus on</font><font color="#CCCCCC"> protecting the</font>

893
00:37:33,880 --> 00:37:37,840
user and making sure<font color="#E5E5E5"> that the user</font>

894
00:37:35,560 --> 00:37:40,359
authorization<font color="#E5E5E5"> is successful I'm going</font><font color="#CCCCCC"> to</font>

895
00:37:37,840 --> 00:37:42,609
<font color="#CCCCCC">posit to you</font><font color="#E5E5E5"> that it's</font><font color="#CCCCCC"> just as important</font>

896
00:37:40,359 --> 00:37:45,759
<font color="#CCCCCC">maybe even more important that we know</font>

897
00:37:42,609 --> 00:37:48,819
what what client what application is

898
00:37:45,760 --> 00:37:51,070
making the call<font color="#E5E5E5"> so if the application is</font>

899
00:37:48,820 --> 00:37:52,900
a bot<font color="#CCCCCC"> you obviously don't want</font><font color="#E5E5E5"> to let</font>

900
00:37:51,070 --> 00:37:55,420
that<font color="#E5E5E5"> through so being able to</font>

901
00:37:52,900 --> 00:37:57,310
authenticate<font color="#E5E5E5"> the client</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> as</font>

902
00:37:55,420 --> 00:38:01,720
important as making<font color="#CCCCCC"> sure that you can</font>

903
00:37:57,310 --> 00:38:03,940
<font color="#CCCCCC">authenticate the user never</font><font color="#E5E5E5"> ever if</font>

904
00:38:01,720 --> 00:38:07,480
possible use any kind<font color="#E5E5E5"> of static secret</font>

905
00:38:03,940 --> 00:38:10,270
on your device<font color="#CCCCCC"> use token technology</font>

906
00:38:07,480 --> 00:38:13,690
instead<font color="#E5E5E5"> that are delivered at runtime</font>

907
00:38:10,270 --> 00:38:16,119
<font color="#CCCCCC">and can</font><font color="#E5E5E5"> be made time limited in the case</font>

908
00:38:13,690 --> 00:38:17,710
of a<font color="#E5E5E5"> user authorization</font><font color="#CCCCCC"> there's a user</font>

909
00:38:16,119 --> 00:38:20,890
in the loop<font color="#E5E5E5"> so there's a tendency to</font>

910
00:38:17,710 --> 00:38:22,900
make<font color="#CCCCCC"> the lifetime of tokens a half an</font>

911
00:38:20,890 --> 00:38:25,540
hour an<font color="#E5E5E5"> hour two hours whatever would be</font>

912
00:38:22,900 --> 00:38:27,280
<font color="#E5E5E5">in the case of client attestation when</font>

913
00:38:25,540 --> 00:38:29,259
you're authenticating the<font color="#E5E5E5"> client there</font>

914
00:38:27,280 --> 00:38:31,660
is no human<font color="#E5E5E5"> in the loop</font><font color="#CCCCCC"> so these tokens</font>

915
00:38:29,260 --> 00:38:33,940
<font color="#E5E5E5">can</font><font color="#CCCCCC"> be very short-lived a few seconds if</font>

916
00:38:31,660 --> 00:38:36,609
you<font color="#CCCCCC"> wanted more reasonably</font><font color="#E5E5E5"> a couple</font><font color="#CCCCCC"> of</font>

917
00:38:33,940 --> 00:38:39,550
minutes so<font color="#CCCCCC"> even if these tokens</font><font color="#E5E5E5"> are</font>

918
00:38:36,609 --> 00:38:41,710
somehow stolen<font color="#E5E5E5"> the lifetime of them is</font>

919
00:38:39,550 --> 00:38:43,480
quite<font color="#E5E5E5"> short and there's no need</font><font color="#CCCCCC"> for any</font>

920
00:38:41,710 --> 00:38:45,100
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of refresh token technology and</font>

921
00:38:43,480 --> 00:38:49,150
when the token<font color="#E5E5E5"> expires you go through a</font>

922
00:38:45,100 --> 00:38:52,680
fresh<font color="#CCCCCC"> attestation type</font><font color="#E5E5E5"> process so the if</font>

923
00:38:49,150 --> 00:38:55,270
the application<font color="#CCCCCC"> changes over time you're</font>

924
00:38:52,680 --> 00:38:58,060
continually testing its integrity make

925
00:38:55,270 --> 00:38:59,680
sure it hasn't<font color="#E5E5E5"> been</font><font color="#CCCCCC"> tampered with it's</font>

926
00:38:58,060 --> 00:39:03,190
easy<font color="#CCCCCC"> to do secret maintenance here</font>

927
00:38:59,680 --> 00:39:05,710
because there's<font color="#E5E5E5"> no secret so in the case</font>

928
00:39:03,190 --> 00:39:08,380
<font color="#E5E5E5">of the secrets they're shared between</font>

929
00:39:05,710 --> 00:39:10,300
back-end servers and they're<font color="#E5E5E5"> never seen</font>

930
00:39:08,380 --> 00:39:14,680
on<font color="#E5E5E5"> the app in the case of client a</font>

931
00:39:10,300 --> 00:39:17,140
station if the attestation<font color="#CCCCCC"> is requested</font>

932
00:39:14,680 --> 00:39:20,618
<font color="#E5E5E5">to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> authorization service it will</font>

933
00:39:17,140 --> 00:39:23,410
return a runtime token if it thinks<font color="#CCCCCC"> that</font>

934
00:39:20,619 --> 00:39:25,390
<font color="#E5E5E5">the application is bad it will still</font>

935
00:39:23,410 --> 00:39:27,940
return<font color="#E5E5E5"> a token it's just a token that</font>

936
00:39:25,390 --> 00:39:29,999
won't have<font color="#E5E5E5"> any validity so as far as the</font>

937
00:39:27,940 --> 00:39:31,979
<font color="#E5E5E5">clan goes not only</font><font color="#CCCCCC"> does it</font><font color="#E5E5E5"> not have a</font>

938
00:39:29,999 --> 00:39:34,589
but it doesn't have any idea whether

939
00:39:31,979 --> 00:39:36,618
it's a valid client or not<font color="#E5E5E5"> so I can't</font>

940
00:39:34,589 --> 00:39:38,999
use<font color="#CCCCCC"> that kind of attack vector as well</font>

941
00:39:36,619 --> 00:39:40,679
<font color="#CCCCCC">if you do want to</font><font color="#E5E5E5"> change the secrets</font>

942
00:39:38,999 --> 00:39:43,049
it's simply changing secrets in the back

943
00:39:40,679 --> 00:39:46,169
rooms<font color="#CCCCCC"> you don't have to upgrade</font><font color="#E5E5E5"> your app</font>

944
00:39:43,049 --> 00:39:49,739
to do<font color="#E5E5E5"> anything like that we've used the</font>

945
00:39:46,169 --> 00:39:51,328
proxy pattern<font color="#E5E5E5"> here</font><font color="#CCCCCC"> to protect one secret</font>

946
00:39:49,739 --> 00:39:52,829
and we put<font color="#CCCCCC"> all our effort</font><font color="#E5E5E5"> into</font>

947
00:39:51,329 --> 00:39:55,649
protecting that one secret and they

948
00:39:52,829 --> 00:39:57,689
again we<font color="#CCCCCC"> get benefits</font><font color="#E5E5E5"> in secret</font>

949
00:39:55,649 --> 00:39:59,308
maintenance we also get<font color="#E5E5E5"> additional</font>

950
00:39:57,689 --> 00:40:01,439
benefits<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> we've decoupled the</font>

951
00:39:59,309 --> 00:40:03,479
app from the API call through the proxy

952
00:40:01,439 --> 00:40:05,279
server<font color="#E5E5E5"> so you can think of this proxy</font>

953
00:40:03,479 --> 00:40:07,888
server as being a straight-through call

954
00:40:05,279 --> 00:40:10,229
an<font color="#CCCCCC"> api call is made</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> the app and it</font>

955
00:40:07,889 --> 00:40:12,809
will pass<font color="#CCCCCC"> through to</font><font color="#E5E5E5"> the appropriate API</font>

956
00:40:10,229 --> 00:40:15,118
<font color="#CCCCCC">servers</font><font color="#E5E5E5"> but if you wanted to you could</font>

957
00:40:12,809 --> 00:40:18,269
distinguish between different<font color="#E5E5E5"> device</font>

958
00:40:15,119 --> 00:40:20,789
types<font color="#CCCCCC"> you could</font><font color="#E5E5E5"> have an API for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> mobile</font>

959
00:40:18,269 --> 00:40:23,488
app<font color="#E5E5E5"> you can have an API</font><font color="#CCCCCC"> for a television</font>

960
00:40:20,789 --> 00:40:26,309
<font color="#E5E5E5">you could have an API</font><font color="#CCCCCC"> for a web app and</font>

961
00:40:23,489 --> 00:40:30,509
they could all<font color="#E5E5E5"> run into proxy servers</font>

962
00:40:26,309 --> 00:40:33,119
which might then<font color="#E5E5E5"> adapt</font><font color="#CCCCCC"> the app calls as</font>

963
00:40:30,509 --> 00:40:35,939
<font color="#CCCCCC">they go through</font><font color="#E5E5E5"> and send to them to one</font>

964
00:40:33,119 --> 00:40:37,739
or more servers so it can be more<font color="#CCCCCC"> than</font>

965
00:40:35,939 --> 00:40:39,359
<font color="#E5E5E5">just a</font><font color="#CCCCCC"> proxy server you can start adding</font>

966
00:40:37,739 --> 00:40:43,319
<font color="#CCCCCC">a little bit of</font><font color="#E5E5E5"> intelligence</font><font color="#CCCCCC"> to make it</font>

967
00:40:39,359 --> 00:40:45,389
a full-on adapter<font color="#CCCCCC"> and the API server</font>

968
00:40:43,319 --> 00:40:47,339
itself can add in those behavioral

969
00:40:45,389 --> 00:40:49,169
approaches so you could very<font color="#E5E5E5"> early</font><font color="#CCCCCC"> on</font>

970
00:40:47,339 --> 00:40:51,029
the<font color="#CCCCCC"> front-end</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> the API server do</font><font color="#E5E5E5"> rate</font>

971
00:40:49,169 --> 00:40:55,679
<font color="#E5E5E5">limiting or do your behavioral type</font>

972
00:40:51,029 --> 00:40:57,209
approaches on top of this<font color="#E5E5E5"> technique so</font>

973
00:40:55,679 --> 00:40:59,969
as<font color="#E5E5E5"> I said to you I think that</font>

974
00:40:57,209 --> 00:41:03,359
authenticating what is just as are more

975
00:40:59,969 --> 00:41:06,089
important than authenticating who<font color="#E5E5E5"> and I</font>

976
00:41:03,359 --> 00:41:08,459
want to stress<font color="#CCCCCC"> that ship fast and ship</font>

977
00:41:06,089 --> 00:41:09,919
<font color="#CCCCCC">rater are entirely</font><font color="#E5E5E5"> open-source so if</font>

978
00:41:08,459 --> 00:41:12,989
you're interested<font color="#CCCCCC"> in playing with</font><font color="#E5E5E5"> these</font>

979
00:41:09,919 --> 00:41:15,598
<font color="#E5E5E5">they're available on github</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> there's</font>

980
00:41:12,989 --> 00:41:18,689
a sequence<font color="#E5E5E5"> of four articles at this</font>

981
00:41:15,599 --> 00:41:20,489
point on medium<font color="#E5E5E5"> about using ship fast</font>

982
00:41:18,689 --> 00:41:23,699
and<font color="#E5E5E5"> ship</font><font color="#CCCCCC"> raider and going into this in</font>

983
00:41:20,489 --> 00:41:25,589
more detail more will<font color="#E5E5E5"> be coming</font><font color="#CCCCCC"> they're</font>

984
00:41:23,699 --> 00:41:28,649
also available on the<font color="#E5E5E5"> approved blog</font>

985
00:41:25,589 --> 00:41:30,719
<font color="#E5E5E5">website so we still haven't broken it</font>

986
00:41:28,649 --> 00:41:34,109
yet<font color="#E5E5E5"> but ship</font><font color="#CCCCCC"> Raider will return at some</font>

987
00:41:30,719 --> 00:41:36,899
point okay<font color="#CCCCCC"> these</font><font color="#E5E5E5"> are some additional</font>

988
00:41:34,109 --> 00:41:39,078
<font color="#E5E5E5">references for you</font><font color="#CCCCCC"> the ship fast</font>

989
00:41:36,899 --> 00:41:41,699
references I've already mentioned<font color="#CCCCCC"> a</font>

990
00:41:39,079 --> 00:41:43,290
sequence<font color="#E5E5E5"> of three articles on mobile API</font>

991
00:41:41,699 --> 00:41:45,630
security

992
00:41:43,290 --> 00:41:47,910
they're<font color="#E5E5E5"> available on hacker noon as well</font>

993
00:41:45,630 --> 00:41:49,830
as our blog<font color="#CCCCCC"> if you're interested in</font>

994
00:41:47,910 --> 00:41:51,779
<font color="#E5E5E5">going in more detail and</font><font color="#CCCCCC"> OAuth 2 I</font>

995
00:41:49,830 --> 00:41:54,630
highly recommend the book by Justin

996
00:41:51,780 --> 00:41:59,090
Richter and<font color="#CCCCCC"> Antonio Sun so it's a really</font>

997
00:41:54,630 --> 00:42:02,670
<font color="#E5E5E5">good overview and goes into</font><font color="#CCCCCC"> Open ID</font>

998
00:41:59,090 --> 00:42:04,109
<font color="#CCCCCC">Connect as well and there's there's a</font>

999
00:42:02,670 --> 00:42:05,609
lot<font color="#E5E5E5"> there I go back to it</font><font color="#CCCCCC"> really</font>

1000
00:42:04,109 --> 00:42:07,680
frequently and there are some sample and

1001
00:42:05,609 --> 00:42:10,619
from implementations<font color="#E5E5E5"> OAuth 2 flow is if</font>

1002
00:42:07,680 --> 00:42:13,470
you're interested<font color="#CCCCCC"> in that</font><font color="#E5E5E5"> and also the</font>

1003
00:42:10,619 --> 00:42:17,040
technique<font color="#CCCCCC"> of adapting the</font><font color="#E5E5E5"> adapting the</font>

1004
00:42:13,470 --> 00:42:19,259
OAuth 2<font color="#CCCCCC"> to a data station into</font><font color="#E5E5E5"> the flow</font>

1005
00:42:17,040 --> 00:42:20,550
is available<font color="#CCCCCC"> on this hacker</font><font color="#E5E5E5"> noon article</font>

1006
00:42:19,260 --> 00:42:24,420
as well<font color="#E5E5E5"> there's some open source code</font>

1007
00:42:20,550 --> 00:42:36,510
with that as well<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that's it thank</font>

1008
00:42:24,420 --> 00:42:39,390
you<font color="#E5E5E5"> very much questions</font><font color="#CCCCCC"> please I put you</font>

1009
00:42:36,510 --> 00:42:42,900
all<font color="#E5E5E5"> to sleep yes sir</font>

1010
00:42:39,390 --> 00:42:46,410
Oh<font color="#E5E5E5"> what hang on just a sec</font><font color="#CCCCCC"> I promised</font>

1011
00:42:42,900 --> 00:42:48,570
<font color="#E5E5E5">that I would do</font><font color="#CCCCCC"> that ok</font><font color="#E5E5E5"> are people doing</font>

1012
00:42:46,410 --> 00:42:50,279
<font color="#E5E5E5">things with that that auth server</font>

1013
00:42:48,570 --> 00:42:53,609
<font color="#E5E5E5">service where they're going out of band</font>

1014
00:42:50,280 --> 00:42:57,210
<font color="#CCCCCC">to like revalidate the device that is</font>

1015
00:42:53,609 --> 00:42:58,859
using<font color="#E5E5E5"> your Roth token or something so</font>

1016
00:42:57,210 --> 00:43:00,930
like<font color="#E5E5E5"> let's</font><font color="#CCCCCC"> say you have the TV</font><font color="#E5E5E5"> that you</font>

1017
00:42:58,859 --> 00:43:02,460
you connect to a service<font color="#E5E5E5"> you would do</font>

1018
00:43:00,930 --> 00:43:04,500
the initial authentication after that

1019
00:43:02,460 --> 00:43:06,270
point<font color="#CCCCCC"> it refresh is on its own mm-hmm</font>

1020
00:43:04,500 --> 00:43:09,570
you know are<font color="#CCCCCC"> people doing things where</font>

1021
00:43:06,270 --> 00:43:11,250
it's<font color="#CCCCCC"> like they're</font><font color="#E5E5E5"> forcing the user you</font>

1022
00:43:09,570 --> 00:43:13,170
know to through some<font color="#E5E5E5"> out-of-band thing</font>

1023
00:43:11,250 --> 00:43:15,210
like a you know ping identity type of

1024
00:43:13,170 --> 00:43:17,690
you<font color="#E5E5E5"> know prompt on their phone or</font><font color="#CCCCCC"> right</font>

1025
00:43:15,210 --> 00:43:20,160
we're like hey how's devices using<font color="#E5E5E5"> your</font>

1026
00:43:17,690 --> 00:43:25,619
<font color="#E5E5E5">is your account still you just don't</font>

1027
00:43:20,160 --> 00:43:27,149
want to<font color="#E5E5E5"> do that yes and no yes</font><font color="#CCCCCC"> if you</font>

1028
00:43:25,619 --> 00:43:29,820
were in a sensitive application you

1029
00:43:27,150 --> 00:43:31,740
still might want<font color="#E5E5E5"> to do that it becomes a</font>

1030
00:43:29,820 --> 00:43:34,220
user convenient issue do you want to

1031
00:43:31,740 --> 00:43:36,868
annoy a potentially annoying customer

1032
00:43:34,220 --> 00:43:38,790
versus do you want to risk<font color="#E5E5E5"> the customer</font>

1033
00:43:36,869 --> 00:43:40,260
losing lots of stuff so it's a<font color="#E5E5E5"> trade-off</font>

1034
00:43:38,790 --> 00:43:43,340
but there's there's<font color="#E5E5E5"> certainly nothing</font>

1035
00:43:40,260 --> 00:43:43,340
preventing you from doing<font color="#E5E5E5"> that</font>

1036
00:43:44,630 --> 00:43:49,790
any other questions I'm<font color="#E5E5E5"> going to start</font>

1037
00:43:46,740 --> 00:43:49,790
asking<font color="#CCCCCC"> questions to you</font>

1038
00:43:51,900 --> 00:43:57,640
so on the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> diagram you have sort of</font>

1039
00:43:55,450 --> 00:44:01,000
the<font color="#CCCCCC"> Secret Service I guess on</font><font color="#E5E5E5"> the bottom</font>

1040
00:43:57,640 --> 00:44:05,319
yeah<font color="#CCCCCC"> and then you have the auth on</font><font color="#E5E5E5"> the</font>

1041
00:44:01,000 --> 00:44:07,660
top<font color="#CCCCCC"> you also have the API server</font><font color="#E5E5E5"> as a</font>

1042
00:44:05,320 --> 00:44:10,210
third<font color="#E5E5E5"> thing theoretically you could have</font>

1043
00:44:07,660 --> 00:44:11,770
merged the three right and the API

1044
00:44:10,210 --> 00:44:13,840
server would<font color="#E5E5E5"> be the one routing and</font>

1045
00:44:11,770 --> 00:44:17,770
doing all the<font color="#E5E5E5"> other work right yes</font>

1046
00:44:13,840 --> 00:44:20,619
<font color="#E5E5E5">absolutely</font><font color="#CCCCCC"> the OAuth 2</font><font color="#E5E5E5"> service that I</font>

1047
00:44:17,770 --> 00:44:21,810
kept separate because I actually would

1048
00:44:20,619 --> 00:44:24,600
encourage people to use<font color="#CCCCCC"> third-party</font>

1049
00:44:21,810 --> 00:44:27,040
<font color="#E5E5E5">implementations</font><font color="#CCCCCC"> just because it's</font>

1050
00:44:24,600 --> 00:44:29,319
<font color="#E5E5E5">standardized protocol and they've been</font>

1051
00:44:27,040 --> 00:44:30,790
<font color="#E5E5E5">pretty well bullet tested the a path</font>

1052
00:44:29,320 --> 00:44:32,440
service

1053
00:44:30,790 --> 00:44:33,940
I kept separate for illustrative

1054
00:44:32,440 --> 00:44:35,109
purposes there's nothing preventing<font color="#CCCCCC"> you</font>

1055
00:44:33,940 --> 00:44:37,380
from<font color="#E5E5E5"> running it on the same piece</font><font color="#CCCCCC"> of</font>

1056
00:44:35,109 --> 00:44:37,380
<font color="#CCCCCC">hardware</font>

1057
00:44:47,220 --> 00:44:53,589
so if I understood correctly<font color="#E5E5E5"> the client</font>

1058
00:44:50,680 --> 00:44:56,700
<font color="#E5E5E5">attestation works by asking the client</font>

1059
00:44:53,590 --> 00:45:03,400
to do some type of work<font color="#E5E5E5"> mm-hmm</font>

1060
00:44:56,700 --> 00:45:06,700
would<font color="#E5E5E5"> would</font><font color="#CCCCCC"> she Prater</font><font color="#E5E5E5"> be just able</font><font color="#CCCCCC"> to</font>

1061
00:45:03,400 --> 00:45:09,730
<font color="#CCCCCC">reverse-engineer the app and try to do</font>

1062
00:45:06,700 --> 00:45:11,049
the same<font color="#E5E5E5"> type of work</font><font color="#CCCCCC"> so yes you do</font>

1063
00:45:09,730 --> 00:45:13,960
understand<font color="#CCCCCC"> that correctly and</font>

1064
00:45:11,050 --> 00:45:16,630
<font color="#E5E5E5">theoretically like all crypto operations</font>

1065
00:45:13,960 --> 00:45:19,240
<font color="#E5E5E5">it could if it had enough time and</font>

1066
00:45:16,630 --> 00:45:22,630
enough interest<font color="#E5E5E5"> to figure out how to do</font>

1067
00:45:19,240 --> 00:45:25,209
the same work<font color="#CCCCCC"> but it's it's a</font><font color="#E5E5E5"> crypto a</font>

1068
00:45:22,630 --> 00:45:27,430
cryptographically valid<font color="#E5E5E5"> type approach</font>

1069
00:45:25,210 --> 00:45:29,020
that you would use so it would be too

1070
00:45:27,430 --> 00:45:32,140
expensive<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know like a few centuries</font>

1071
00:45:29,020 --> 00:45:34,360
<font color="#E5E5E5">to to</font><font color="#CCCCCC"> reverse-engineer something</font><font color="#E5E5E5"> but</font>

1072
00:45:32,140 --> 00:45:38,560
that's<font color="#E5E5E5"> the art</font><font color="#CCCCCC"> of how do you</font><font color="#E5E5E5"> do that at</font>

1073
00:45:34,360 --> 00:45:42,940
<font color="#E5E5E5">attestation in a way that is a minimum</font>

1074
00:45:38,560 --> 00:45:44,650
latency<font color="#CCCCCC"> type of activity but covers</font><font color="#E5E5E5"> just</font>

1075
00:45:42,940 --> 00:45:47,890
<font color="#E5E5E5">you know if you recompile an app you</font>

1076
00:45:44,650 --> 00:45:49,240
want<font color="#E5E5E5"> to fail</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> s station so there's</font>

1077
00:45:47,890 --> 00:45:59,620
an art<font color="#E5E5E5"> involved in doing that correctly</font>

1078
00:45:49,240 --> 00:46:00,850
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> thanks over here so then I was</font>

1079
00:45:59,620 --> 00:46:05,410
<font color="#CCCCCC">watching your example I was thinking a</font>

1080
00:46:00,850 --> 00:46:07,089
lot of Pokemon go<font color="#E5E5E5"> actually in Niantic</font>

1081
00:46:05,410 --> 00:46:08,379
and<font color="#CCCCCC"> all stuff they went through and</font>

1082
00:46:07,090 --> 00:46:11,170
people<font color="#E5E5E5"> were immersed engineering the API</font>

1083
00:46:08,380 --> 00:46:13,720
and<font color="#E5E5E5"> stuff like that and how how and</font>

1084
00:46:11,170 --> 00:46:15,760
weirdoes like<font color="#E5E5E5"> protocol office creation</font>

1085
00:46:13,720 --> 00:46:17,470
fit in here stuff like protobuf<font color="#E5E5E5"> and do</font>

1086
00:46:15,760 --> 00:46:19,150
you recommend<font color="#CCCCCC"> that</font><font color="#E5E5E5"> at all an API is a</font>

1087
00:46:17,470 --> 00:46:22,029
good<font color="#E5E5E5"> question so first I'll say that</font>

1088
00:46:19,150 --> 00:46:24,940
<font color="#E5E5E5">Pokemon go was like slide 4 in this</font>

1089
00:46:22,030 --> 00:46:26,680
present age I'd recognize<font color="#CCCCCC"> I cut</font><font color="#E5E5E5"> it out</font>

1090
00:46:24,940 --> 00:46:29,710
because<font color="#E5E5E5"> I was worried I was gonna go too</font>

1091
00:46:26,680 --> 00:46:33,190
long<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are there a poster child of</font>

1092
00:46:29,710 --> 00:46:35,590
how to go<font color="#CCCCCC"> out with an open API</font><font color="#E5E5E5"> realize</font>

1093
00:46:33,190 --> 00:46:37,090
oh you know figuring<font color="#E5E5E5"> out where these</font>

1094
00:46:35,590 --> 00:46:39,400
<font color="#CCCCCC">little characters</font><font color="#E5E5E5"> are is too expensive</font>

1095
00:46:37,090 --> 00:46:41,530
<font color="#CCCCCC">let's get rid of that feature and all</font>

1096
00:46:39,400 --> 00:46:42,700
these users<font color="#E5E5E5"> come back and saying no we</font>

1097
00:46:41,530 --> 00:46:44,500
want those features we're going to

1098
00:46:42,700 --> 00:46:47,140
reverse<font color="#CCCCCC"> engineer this API</font><font color="#E5E5E5"> and then</font>

1099
00:46:44,500 --> 00:46:49,840
you're in this back and forth which

1100
00:46:47,140 --> 00:46:52,120
<font color="#CCCCCC">nanotech had to go through pissing off</font>

1101
00:46:49,840 --> 00:46:54,000
users adding more and more features very

1102
00:46:52,120 --> 00:46:57,779
similar to what's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> here and</font>

1103
00:46:54,000 --> 00:47:00,240
<font color="#CCCCCC">Brenner's</font><font color="#E5E5E5"> good motivation obfuscating</font>

1104
00:46:57,780 --> 00:47:03,180
<font color="#E5E5E5">your</font><font color="#CCCCCC"> api traffic it really boils down to</font>

1105
00:47:00,240 --> 00:47:06,240
do<font color="#CCCCCC"> you trust TLS</font><font color="#E5E5E5"> or not the presentation</font>

1106
00:47:03,180 --> 00:47:10,290
here before was about TLS 1.3 so that

1107
00:47:06,240 --> 00:47:11,759
communication<font color="#E5E5E5"> layer type encryption will</font>

1108
00:47:10,290 --> 00:47:15,420
continue hopefully<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get better and</font>

1109
00:47:11,760 --> 00:47:19,130
<font color="#E5E5E5">better</font><font color="#CCCCCC"> if you have sensitive traffic</font><font color="#E5E5E5"> yes</font>

1110
00:47:15,420 --> 00:47:22,320
I would encrypt that<font color="#E5E5E5"> traffic using</font>

1111
00:47:19,130 --> 00:47:25,440
instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> H map H</font><font color="#E5E5E5"> macking the signature</font>

1112
00:47:22,320 --> 00:47:29,040
<font color="#E5E5E5">request negotiate a private public key</font>

1113
00:47:25,440 --> 00:47:31,290
kind<font color="#E5E5E5"> of type setup</font><font color="#CCCCCC"> there are techniques</font>

1114
00:47:29,040 --> 00:47:32,790
like tokens that<font color="#E5E5E5"> don't have to use</font>

1115
00:47:31,290 --> 00:47:35,960
symmetric<font color="#E5E5E5"> encryption that you can use</font>

1116
00:47:32,790 --> 00:47:38,940
<font color="#CCCCCC">BKI so go through and</font><font color="#E5E5E5"> decide how much</font>

1117
00:47:35,960 --> 00:47:43,440
effort you<font color="#E5E5E5"> want to make to obscure those</font>

1118
00:47:38,940 --> 00:47:46,110
API calls<font color="#E5E5E5"> protobuf</font><font color="#CCCCCC"> I think</font><font color="#E5E5E5"> sure</font>

1119
00:47:43,440 --> 00:47:48,450
yeah<font color="#E5E5E5"> G RPC you know if you want to not</font>

1120
00:47:46,110 --> 00:47:51,390
be on rest where everybody<font color="#E5E5E5"> else is that</font>

1121
00:47:48,450 --> 00:47:53,580
go for it<font color="#E5E5E5"> it'll give you a little bit of</font>

1122
00:47:51,390 --> 00:47:55,890
<font color="#CCCCCC">a buffer</font><font color="#E5E5E5"> but I don't think that much</font>

1123
00:47:53,580 --> 00:47:58,319
because<font color="#E5E5E5"> it's a very structured approach</font>

1124
00:47:55,890 --> 00:48:02,069
and it can be reverse engineered with

1125
00:47:58,320 --> 00:48:05,100
just an extra tool or two so<font color="#E5E5E5"> so I would</font>

1126
00:48:02,070 --> 00:48:07,020
<font color="#CCCCCC">go</font><font color="#E5E5E5"> probably for full encryption</font><font color="#CCCCCC"> the</font>

1127
00:48:05,100 --> 00:48:08,580
other bit is<font color="#E5E5E5"> kind of a security by</font>

1128
00:48:07,020 --> 00:48:09,300
obscurity kind of play and it'll<font color="#E5E5E5"> be</font>

1129
00:48:08,580 --> 00:48:11,910
short-lived

1130
00:48:09,300 --> 00:48:15,240
and eventually they ran<font color="#E5E5E5"> into the I mean</font>

1131
00:48:11,910 --> 00:48:16,770
the challenges of trying<font color="#E5E5E5"> to say that a</font>

1132
00:48:15,240 --> 00:48:19,680
device was valid

1133
00:48:16,770 --> 00:48:21,090
they ran into just armies of<font color="#E5E5E5"> bots</font><font color="#CCCCCC"> that</font>

1134
00:48:19,680 --> 00:48:22,740
were actually emulated hardware pretty

1135
00:48:21,090 --> 00:48:26,010
hard to<font color="#E5E5E5"> detect if they were not phones</font>

1136
00:48:22,740 --> 00:48:27,000
or real phone right so yeah I didn't

1137
00:48:26,010 --> 00:48:29,520
mention<font color="#CCCCCC"> that I probably should have</font>

1138
00:48:27,000 --> 00:48:30,960
stressed<font color="#E5E5E5"> it</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit more</font><font color="#CCCCCC"> one of the</font>

1139
00:48:29,520 --> 00:48:32,400
things that you want<font color="#E5E5E5"> to do when you're a</font>

1140
00:48:30,960 --> 00:48:34,680
testing a client to see whether

1141
00:48:32,400 --> 00:48:36,090
authentic is not just that kind of

1142
00:48:34,680 --> 00:48:38,669
challenge response<font color="#E5E5E5"> I was talking about</font>

1143
00:48:36,090 --> 00:48:41,490
but you need to figure<font color="#CCCCCC"> out is the device</font>

1144
00:48:38,670 --> 00:48:43,440
rooted<font color="#CCCCCC"> is it</font><font color="#E5E5E5"> running in an emulator</font><font color="#CCCCCC"> that</font>

1145
00:48:41,490 --> 00:48:45,209
is it running<font color="#CCCCCC"> on and say</font><font color="#E5E5E5"> even something</font>

1146
00:48:43,440 --> 00:48:47,970
<font color="#CCCCCC">like</font><font color="#E5E5E5"> is it running on an Intel platform</font>

1147
00:48:45,210 --> 00:48:51,210
that's probably not an<font color="#CCCCCC"> android phone is</font>

1148
00:48:47,970 --> 00:48:53,850
it<font color="#E5E5E5"> running in a debugger or is</font><font color="#CCCCCC"> frida</font>

1149
00:48:51,210 --> 00:48:58,530
which is a framework is<font color="#CCCCCC"> that installed</font>

1150
00:48:53,850 --> 00:49:00,509
and running<font color="#CCCCCC"> so in a</font><font color="#E5E5E5"> practical sense you</font>

1151
00:48:58,530 --> 00:49:03,420
need to check and<font color="#CCCCCC"> make sure</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> no</font>

1152
00:49:00,510 --> 00:49:05,370
devices<font color="#E5E5E5"> as sanitized as</font><font color="#CCCCCC"> they can be but</font>

1153
00:49:03,420 --> 00:49:07,950
again as a

1154
00:49:05,370 --> 00:49:10,470
<font color="#E5E5E5">as a vendor you run into a problem</font><font color="#CCCCCC"> okay</font>

1155
00:49:07,950 --> 00:49:13,620
the<font color="#CCCCCC"> guys device is rooted</font><font color="#E5E5E5"> do I let him</font>

1156
00:49:10,470 --> 00:49:16,620
go through or not<font color="#E5E5E5"> if I let him go</font>

1157
00:49:13,620 --> 00:49:20,370
through<font color="#E5E5E5"> and he just as an enthusiast and</font>

1158
00:49:16,620 --> 00:49:22,470
<font color="#E5E5E5">he's</font><font color="#CCCCCC"> rooted his phone</font><font color="#E5E5E5"> great if if I let</font>

1159
00:49:20,370 --> 00:49:24,600
<font color="#E5E5E5">him go through and it's a malicious</font>

1160
00:49:22,470 --> 00:49:28,109
attacker<font color="#E5E5E5"> I've given</font><font color="#CCCCCC"> him</font><font color="#E5E5E5"> a lot more power</font>

1161
00:49:24,600 --> 00:49:29,640
<font color="#CCCCCC">I don't want to lose my customers</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'm</font>

1162
00:49:28,110 --> 00:49:33,180
probably<font color="#E5E5E5"> going to let the rooted phone</font>

1163
00:49:29,640 --> 00:49:35,100
get through so it's you know it there's

1164
00:49:33,180 --> 00:49:39,960
a little bit<font color="#E5E5E5"> of cat mouse that you have</font>

1165
00:49:35,100 --> 00:49:45,210
to go through<font color="#E5E5E5"> there any other questions</font>

1166
00:49:39,960 --> 00:49:46,440
<font color="#CCCCCC">okay well I'll be around</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a few</font>

1167
00:49:45,210 --> 00:49:48,630
<font color="#E5E5E5">minutes if anybody wants to</font><font color="#CCCCCC"> come up</font>

1168
00:49:46,440 --> 00:49:49,160
thanks<font color="#E5E5E5"> and thank you very much for</font>

1169
00:49:48,630 --> 00:49:53,070
<font color="#E5E5E5">attending</font>

1170
00:49:49,160 --> 00:49:53,069
[Applause]

1171
00:50:00,260 --> 00:50:02,320
<font color="#E5E5E5">you</font>

