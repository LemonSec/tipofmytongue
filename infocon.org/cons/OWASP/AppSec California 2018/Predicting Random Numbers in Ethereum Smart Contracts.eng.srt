1
00:00:04,300 --> 00:00:15,829
[Music]

2
00:00:18,020 --> 00:00:25,830
thank you so my name is our scenario

3
00:00:21,750 --> 00:00:28,740
chav<font color="#CCCCCC"> and today I will present my</font>

4
00:00:25,830 --> 00:00:33,720
<font color="#CCCCCC">research</font><font color="#E5E5E5"> of random number generators</font>

5
00:00:28,740 --> 00:00:38,370
that<font color="#CCCCCC"> I conducted</font><font color="#E5E5E5"> back in October 2017 to</font>

6
00:00:33,720 --> 00:00:41,600
find vulnerabilities and flaws in<font color="#E5E5E5"> smart</font>

7
00:00:38,370 --> 00:00:45,180
contracts in<font color="#CCCCCC"> the serum work chain</font>

8
00:00:41,600 --> 00:00:50,790
so before we start<font color="#CCCCCC"> a few words about me</font>

9
00:00:45,180 --> 00:00:55,019
<font color="#CCCCCC">I work for positive comm we do</font><font color="#E5E5E5"> smart</font>

10
00:00:50,790 --> 00:00:58,979
contract<font color="#E5E5E5"> audits also we project ISOs I'm</font>

11
00:00:55,019 --> 00:01:01,140
also<font color="#E5E5E5"> the team member of</font><font color="#CCCCCC"> pitch</font><font color="#E5E5E5"> day</font>

12
00:00:58,979 --> 00:01:05,429
<font color="#E5E5E5">security conference and by the way the</font>

13
00:01:01,140 --> 00:01:08,250
CFP is open and I'm also a web security

14
00:01:05,430 --> 00:01:13,560
blogger<font color="#CCCCCC"> check out my blog edge razor</font><font color="#E5E5E5"> dot</font>

15
00:01:08,250 --> 00:01:19,049
<font color="#E5E5E5">name so my</font><font color="#CCCCCC"> presentation will be divided</font>

16
00:01:13,560 --> 00:01:22,430
into the<font color="#CCCCCC"> following parts</font><font color="#E5E5E5"> firstly I will</font>

17
00:01:19,049 --> 00:01:25,079
talk<font color="#E5E5E5"> about the ball chain itself the</font>

18
00:01:22,430 --> 00:01:28,979
<font color="#E5E5E5">theorem and smart contracts</font><font color="#CCCCCC"> because this</font>

19
00:01:25,079 --> 00:01:34,229
is not a<font color="#CCCCCC"> blockchain</font><font color="#E5E5E5"> conference then I</font>

20
00:01:28,979 --> 00:01:38,670
will move<font color="#E5E5E5"> to my actual research about</font>

21
00:01:34,229 --> 00:01:41,310
the results<font color="#CCCCCC"> then I will talk</font><font color="#E5E5E5"> about how</font>

22
00:01:38,670 --> 00:01:44,759
to implement a safer random number

23
00:01:41,310 --> 00:01:49,200
generator in<font color="#CCCCCC"> smutch contract for smart</font>

24
00:01:44,759 --> 00:01:53,820
contract<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the same ball chain</font><font color="#E5E5E5"> and then</font>

25
00:01:49,200 --> 00:01:55,890
some results<font color="#E5E5E5"> of my attempt to automate</font>

26
00:01:53,820 --> 00:01:58,798
the discovery<font color="#E5E5E5"> of such vulnerable</font>

27
00:01:55,890 --> 00:02:01,499
contracts and they will there will<font color="#CCCCCC"> be</font>

28
00:01:58,799 --> 00:02:07,100
one<font color="#CCCCCC"> more thing at the</font><font color="#E5E5E5"> end there will</font><font color="#CCCCCC"> be</font>

29
00:02:01,499 --> 00:02:10,490
a contest<font color="#E5E5E5"> for you to try your skill at</font>

30
00:02:07,100 --> 00:02:13,859
hacking such contracts with<font color="#E5E5E5"> Morganville</font>

31
00:02:10,490 --> 00:02:17,250
random number<font color="#E5E5E5"> generators and you will</font>

32
00:02:13,860 --> 00:02:20,940
have a<font color="#E5E5E5"> chance</font><font color="#CCCCCC"> to win some prizes</font>

33
00:02:17,250 --> 00:02:25,049
okay let's Sarge so the first part is

34
00:02:20,940 --> 00:02:29,250
<font color="#E5E5E5">about work chain principles</font><font color="#CCCCCC"> serum and</font>

35
00:02:25,049 --> 00:02:30,690
smart contracts so I think<font color="#E5E5E5"> that most of</font>

36
00:02:29,250 --> 00:02:33,330
you know what

37
00:02:30,690 --> 00:02:36,840
chain is<font color="#E5E5E5"> it's basically like the name</font>

38
00:02:33,330 --> 00:02:43,140
<font color="#E5E5E5">implies is chain of blocks so</font><font color="#CCCCCC"> each block</font>

39
00:02:36,840 --> 00:02:48,990
<font color="#CCCCCC">has a hash of previous block</font><font color="#E5E5E5"> and it</font>

40
00:02:43,140 --> 00:02:52,019
allows<font color="#E5E5E5"> to have the chain of all the data</font>

41
00:02:48,990 --> 00:02:58,190
that<font color="#CCCCCC"> is stored in this blocks and this</font>

42
00:02:52,020 --> 00:03:01,170
JJ<font color="#E5E5E5"> is our transactions like transfers</font>

43
00:02:58,190 --> 00:03:07,050
some for<font color="#CCCCCC"> cerium for example which may be</font>

44
00:03:01,170 --> 00:03:09,660
<font color="#CCCCCC">called</font><font color="#E5E5E5"> execution and so</font><font color="#CCCCCC"> on this</font><font color="#E5E5E5"> is why</font>

45
00:03:07,050 --> 00:03:13,620
<font color="#CCCCCC">work chain is incorruptible</font><font color="#E5E5E5"> you cannot</font>

46
00:03:09,660 --> 00:03:14,730
<font color="#E5E5E5">reverse its</font><font color="#CCCCCC"> state it always moves only</font>

47
00:03:13,620 --> 00:03:19,230
<font color="#E5E5E5">forward</font>

48
00:03:14,730 --> 00:03:21,480
it is also<font color="#E5E5E5"> transparent it means that you</font>

49
00:03:19,230 --> 00:03:25,530
can see all the transactions<font color="#E5E5E5"> in each</font>

50
00:03:21,480 --> 00:03:28,200
<font color="#E5E5E5">block and it is</font><font color="#CCCCCC"> also decentralized</font><font color="#E5E5E5"> which</font>

51
00:03:25,530 --> 00:03:31,920
means that if a<font color="#E5E5E5"> single node in the</font>

52
00:03:28,200 --> 00:03:35,850
blockchain<font color="#E5E5E5"> network goes down</font><font color="#CCCCCC"> then it</font>

53
00:03:31,920 --> 00:03:45,029
won't make the whole network<font color="#E5E5E5"> and</font>

54
00:03:35,850 --> 00:03:50,220
available<font color="#E5E5E5"> there are they were two stages</font>

55
00:03:45,030 --> 00:03:54,270
<font color="#E5E5E5">of what change development the</font><font color="#CCCCCC"> first</font>

56
00:03:50,220 --> 00:03:59,280
stage<font color="#E5E5E5"> was the</font><font color="#CCCCCC"> appearance of Bitcoin</font><font color="#E5E5E5"> the</font>

57
00:03:54,270 --> 00:04:02,239
<font color="#CCCCCC">so-called watch-chain 1.0</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> bitcoin</font>

58
00:03:59,280 --> 00:04:06,269
<font color="#CCCCCC">Forks</font><font color="#E5E5E5"> like white coin and others and</font>

59
00:04:02,239 --> 00:04:08,989
more<font color="#E5E5E5"> recently a new block chain</font>

60
00:04:06,269 --> 00:04:16,620
technology watching soccer ball chain

61
00:04:08,989 --> 00:04:23,940
2.0 has<font color="#E5E5E5"> appeared with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> cerium and its</font>

62
00:04:16,620 --> 00:04:27,860
ability<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run smart contracts so</font><font color="#CCCCCC"> watch</font>

63
00:04:23,940 --> 00:04:30,980
is<font color="#E5E5E5"> a theorem it is basically a</font>

64
00:04:27,860 --> 00:04:34,710
distributed world<font color="#CCCCCC"> supercomputer</font>

65
00:04:30,980 --> 00:04:37,919
according<font color="#E5E5E5"> to the words of theorem</font>

66
00:04:34,710 --> 00:04:41,190
founders<font color="#E5E5E5"> so there is a language a</font>

67
00:04:37,919 --> 00:04:44,460
<font color="#E5E5E5">high-level language like solidity or</font>

68
00:04:41,190 --> 00:04:48,870
<font color="#E5E5E5">serpent repair the most popular</font>

69
00:04:44,460 --> 00:04:50,909
one is solidity<font color="#E5E5E5"> and you can write smart</font>

70
00:04:48,870 --> 00:04:55,410
contracts with<font color="#CCCCCC"> its much contracts</font><font color="#E5E5E5"> and</font>

71
00:04:50,910 --> 00:05:00,900
basically just a program and<font color="#CCCCCC"> aetherium</font>

72
00:04:55,410 --> 00:05:04,740
runs<font color="#E5E5E5"> these programs on every note in its</font>

73
00:05:00,900 --> 00:05:13,888
network<font color="#CCCCCC"> this high level language</font>

74
00:05:04,740 --> 00:05:19,050
language is is then<font color="#CCCCCC"> is transferred</font><font color="#E5E5E5"> to</font>

75
00:05:13,889 --> 00:05:23,970
bytecode<font color="#E5E5E5"> and this bytecode is run in</font><font color="#CCCCCC"> EVM</font>

76
00:05:19,050 --> 00:05:27,870
it's a<font color="#E5E5E5"> theorem virtual machine and each</font>

77
00:05:23,970 --> 00:05:33,660
client<font color="#CCCCCC"> has an instance of this virtual</font>

78
00:05:27,870 --> 00:05:36,419
machine<font color="#E5E5E5"> there are two types of accounts</font>

79
00:05:33,660 --> 00:05:38,940
in a theory on blockchain<font color="#CCCCCC"> the first one</font>

80
00:05:36,419 --> 00:05:42,030
is called externally launched accounts

81
00:05:38,940 --> 00:05:46,110
<font color="#E5E5E5">these accounts are just regular accounts</font>

82
00:05:42,030 --> 00:05:49,349
like in Bitcoin<font color="#E5E5E5"> so they have other</font>

83
00:05:46,110 --> 00:05:53,449
<font color="#E5E5E5">balance they can send transactions and</font>

84
00:05:49,349 --> 00:05:57,150
they are controlled by<font color="#E5E5E5"> private keys</font>

85
00:05:53,449 --> 00:06:01,860
<font color="#CCCCCC">unlike regular accounts contract</font>

86
00:05:57,150 --> 00:06:04,909
accounts have associated<font color="#E5E5E5"> code which is</font>

87
00:06:01,860 --> 00:06:08,250
basically<font color="#E5E5E5"> byte code edge I mentioned</font>

88
00:06:04,909 --> 00:06:14,039
contract accounts<font color="#E5E5E5"> also have other</font>

89
00:06:08,250 --> 00:06:16,469
balance and they can execute code when

90
00:06:14,039 --> 00:06:23,159
you<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example send a special</font>

91
00:06:16,469 --> 00:06:26,090
<font color="#E5E5E5">transaction and this code is children</font>

92
00:06:23,159 --> 00:06:31,770
complete it means that you can compute

93
00:06:26,090 --> 00:06:36,919
literally anything<font color="#CCCCCC"> in EVM and of course</font>

94
00:06:31,770 --> 00:06:39,780
it's open<font color="#E5E5E5"> open doors it opens doors for</font>

95
00:06:36,919 --> 00:06:44,180
hackers and for<font color="#CCCCCC"> marks and</font>

96
00:06:39,780 --> 00:06:45,359
vulnerabilities in<font color="#CCCCCC"> these smart contracts</font>

97
00:06:44,180 --> 00:06:48,840
<font color="#E5E5E5">solidity</font>

98
00:06:45,360 --> 00:06:51,240
is the most popular language to<font color="#CCCCCC"> writes</font>

99
00:06:48,840 --> 00:06:54,089
my smart contracts

100
00:06:51,240 --> 00:06:57,240
it looks like JavaScript but it is

101
00:06:54,089 --> 00:06:58,360
strongly typed it has no string

102
00:06:57,240 --> 00:07:03,490
operations

103
00:06:58,360 --> 00:07:09,129
no thoughts<font color="#E5E5E5"> and it is mainly used to run</font>

104
00:07:03,490 --> 00:07:13,780
<font color="#E5E5E5">ISOs and to make e rc 20 compatible</font>

105
00:07:09,129 --> 00:07:18,759
chalk ins and solidity<font color="#E5E5E5"> is</font><font color="#CCCCCC"> too</font><font color="#E5E5E5"> incomplete</font>

106
00:07:13,780 --> 00:07:25,299
as I said so<font color="#CCCCCC"> solidity</font><font color="#E5E5E5"> smart contracts</font>

107
00:07:18,759 --> 00:07:30,610
have<font color="#E5E5E5"> bucks and</font><font color="#CCCCCC"> especially in lotteries</font>

108
00:07:25,300 --> 00:07:33,779
and card games because they have random

109
00:07:30,610 --> 00:07:38,889
number<font color="#E5E5E5"> generators that I found to</font><font color="#CCCCCC"> be</font>

110
00:07:33,779 --> 00:07:42,039
vulnerable<font color="#CCCCCC"> so the next part</font><font color="#E5E5E5"> is my actual</font>

111
00:07:38,889 --> 00:07:47,219
research of the random number<font color="#E5E5E5"> generators</font>

112
00:07:42,039 --> 00:07:51,340
in<font color="#CCCCCC"> aetherium blockchain so what I did I</font>

113
00:07:47,219 --> 00:07:56,770
basically<font color="#E5E5E5"> grabbed all the smart</font>

114
00:07:51,340 --> 00:08:00,219
contracts on<font color="#CCCCCC"> either scan dot IO</font><font color="#E5E5E5"> and also</font>

115
00:07:56,770 --> 00:08:06,068
looked for interesting contracts and

116
00:08:00,219 --> 00:08:09,940
github<font color="#CCCCCC"> so I used</font><font color="#E5E5E5"> elastic search this</font><font color="#CCCCCC"> is</font>

117
00:08:06,069 --> 00:08:12,909
<font color="#CCCCCC">a database that has also</font><font color="#E5E5E5"> a nice UI</font>

118
00:08:09,940 --> 00:08:16,839
called<font color="#CCCCCC"> Cabana</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> using this user</font>

119
00:08:12,909 --> 00:08:20,349
<font color="#CCCCCC">interface I and elastic search</font>

120
00:08:16,839 --> 00:08:26,550
capability to search contracts<font color="#E5E5E5"> not just</font>

121
00:08:20,349 --> 00:08:30,490
concerts but any<font color="#E5E5E5"> text I found 72 unique</font>

122
00:08:26,550 --> 00:08:33,310
implementations of random number

123
00:08:30,490 --> 00:08:38,890
generators that<font color="#E5E5E5"> can be found in the wild</font>

124
00:08:33,309 --> 00:08:41,380
<font color="#E5E5E5">and out of this 72 contracts 43 were</font>

125
00:08:38,890 --> 00:08:43,838
vulnerable

126
00:08:41,380 --> 00:08:47,199
<font color="#CCCCCC">unguent claimed that</font><font color="#E5E5E5"> this research</font><font color="#CCCCCC"> is</font>

127
00:08:43,839 --> 00:08:53,980
complete it was<font color="#CCCCCC"> done in October last</font>

128
00:08:47,199 --> 00:08:55,420
year and it was done manually<font color="#CCCCCC"> so there</font>

129
00:08:53,980 --> 00:08:57,910
may be some more

130
00:08:55,420 --> 00:09:04,060
of course<font color="#E5E5E5"> contracts that may be</font>

131
00:08:57,910 --> 00:09:07,000
vulnerable<font color="#E5E5E5"> so I have discovered that</font>

132
00:09:04,060 --> 00:09:10,270
<font color="#E5E5E5">there</font><font color="#CCCCCC"> are four categories of such</font>

133
00:09:07,000 --> 00:09:11,780
vulnerable<font color="#E5E5E5"> contracts the first one is</font>

134
00:09:10,270 --> 00:09:17,290
based on

135
00:09:11,780 --> 00:09:20,270
block variables<font color="#CCCCCC"> also on possible crash</font>

136
00:09:17,290 --> 00:09:23,180
<font color="#CCCCCC">possible crash and primate seat</font><font color="#E5E5E5"> and</font>

137
00:09:20,270 --> 00:09:26,319
those that approach<font color="#E5E5E5"> or</font><font color="#CCCCCC"> front</font><font color="#E5E5E5"> on it</font><font color="#CCCCCC"> I</font>

138
00:09:23,180 --> 00:09:31,729
will<font color="#E5E5E5"> explain</font><font color="#CCCCCC"> each of these categories</font>

139
00:09:26,320 --> 00:09:34,400
<font color="#E5E5E5">later so let's start with random number</font>

140
00:09:31,730 --> 00:09:39,350
generators<font color="#E5E5E5"> that are based on block</font>

141
00:09:34,400 --> 00:09:43,880
variables<font color="#E5E5E5"> I can found that there are</font>

142
00:09:39,350 --> 00:09:48,680
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is a certain number</font><font color="#E5E5E5"> of contracts</font>

143
00:09:43,880 --> 00:09:54,560
<font color="#E5E5E5">that misused block variables to provide</font>

144
00:09:48,680 --> 00:10:00,650
<font color="#E5E5E5">random numbers EVM provides several</font>

145
00:09:54,560 --> 00:10:03,920
<font color="#E5E5E5">block variables that can be wrongly used</font>

146
00:10:00,650 --> 00:10:07,430
in contracts as a source of entropy<font color="#E5E5E5"> for</font>

147
00:10:03,920 --> 00:10:11,420
example coinbase which is the address<font color="#E5E5E5"> of</font>

148
00:10:07,430 --> 00:10:14,270
<font color="#CCCCCC">the miner who have calculated the right</font>

149
00:10:11,420 --> 00:10:17,000
cash for the block

150
00:10:14,270 --> 00:10:19,699
the difficulty is a measure of how

151
00:10:17,000 --> 00:10:24,190
difficult<font color="#CCCCCC"> it was to mind this new block</font>

152
00:10:19,700 --> 00:10:29,720
just<font color="#E5E5E5"> the number gets limits</font><font color="#CCCCCC"> it's a</font>

153
00:10:24,190 --> 00:10:35,770
specific<font color="#E5E5E5"> charm for a serum</font><font color="#CCCCCC"> which means</font>

154
00:10:29,720 --> 00:10:40,280
the limit<font color="#E5E5E5"> of gas consumption of</font><font color="#CCCCCC"> fortune</font>

155
00:10:35,770 --> 00:10:46,510
transactions in the block<font color="#E5E5E5"> gas is is a</font>

156
00:10:40,280 --> 00:10:51,920
measure of like in real<font color="#CCCCCC"> life in order to</font>

157
00:10:46,510 --> 00:10:57,550
<font color="#E5E5E5">run to drive a car you need gas and to</font>

158
00:10:51,920 --> 00:10:57,550
run smart contracts you also need some

159
00:10:59,920 --> 00:11:04,449
some gas<font color="#E5E5E5"> which is a measurement of</font>

160
00:11:05,800 --> 00:11:13,400
operations<font color="#E5E5E5"> that can</font><font color="#CCCCCC"> be run in</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> VM each</font>

161
00:11:09,650 --> 00:11:17,689
<font color="#CCCCCC">operation</font><font color="#E5E5E5"> has such number a certain cost</font>

162
00:11:13,400 --> 00:11:21,319
to run on in a<font color="#E5E5E5"> VM</font><font color="#CCCCCC"> EVM for example to</font>

163
00:11:17,690 --> 00:11:23,910
store some value you must be<font color="#E5E5E5"> also gas</font>

164
00:11:21,320 --> 00:11:26,310
and for<font color="#E5E5E5"> example and</font>

165
00:11:23,910 --> 00:11:29,520
<font color="#CCCCCC">- just</font><font color="#E5E5E5"> for example look a message huge</font>

166
00:11:26,310 --> 00:11:33,329
<font color="#E5E5E5">you just you you need</font><font color="#CCCCCC"> to pay small</font>

167
00:11:29,520 --> 00:11:36,329
amounts of gas so which may be weird<font color="#CCCCCC"> but</font>

168
00:11:33,330 --> 00:11:39,840
yeah so this gas<font color="#E5E5E5"> limit just also a</font>

169
00:11:36,330 --> 00:11:43,920
number<font color="#E5E5E5"> that some in some contracts is</font>

170
00:11:39,840 --> 00:11:47,040
deemed unpredictable but it's not also

171
00:11:43,920 --> 00:11:52,410
<font color="#E5E5E5">the</font><font color="#CCCCCC"> number of</font><font color="#E5E5E5"> the block and time stamp I</font>

172
00:11:47,040 --> 00:11:54,980
think it's it's you can understand what

173
00:11:52,410 --> 00:11:54,980
it<font color="#E5E5E5"> means</font>

174
00:11:55,010 --> 00:12:02,850
so how why aren G's that<font color="#CCCCCC"> are based on</font>

175
00:11:59,820 --> 00:12:06,180
block variables are vulnerable actually

176
00:12:02,850 --> 00:12:11,250
you even don't need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a miner to be</font>

177
00:12:06,180 --> 00:12:14,939
to be<font color="#CCCCCC"> able to predict the outcome in</font>

178
00:12:11,250 --> 00:12:18,990
<font color="#CCCCCC">theorem you can make an exploit contract</font>

179
00:12:14,940 --> 00:12:21,900
that will<font color="#E5E5E5"> just issue a so-called</font>

180
00:12:18,990 --> 00:12:26,510
<font color="#E5E5E5">internal message so it will call the</font>

181
00:12:21,900 --> 00:12:29,400
<font color="#E5E5E5">jacket contract</font><font color="#CCCCCC"> and the state of</font><font color="#E5E5E5"> our</font>

182
00:12:26,510 --> 00:12:32,790
<font color="#CCCCCC">energy will be</font><font color="#E5E5E5"> the same because if it</font>

183
00:12:29,400 --> 00:12:35,310
relies on block variables<font color="#E5E5E5"> the value of</font>

184
00:12:32,790 --> 00:12:37,949
these variables will<font color="#E5E5E5"> be the same both in</font>

185
00:12:35,310 --> 00:12:44,699
<font color="#E5E5E5">exploit contract and in the jacket</font>

186
00:12:37,950 --> 00:12:46,710
contract so these are<font color="#E5E5E5"> examples of simple</font>

187
00:12:44,700 --> 00:12:49,920
<font color="#E5E5E5">energies that are based on block</font>

188
00:12:46,710 --> 00:12:52,290
variables so as you see this orangey

189
00:12:49,920 --> 00:12:57,089
just relies on<font color="#E5E5E5"> block number and of</font>

190
00:12:52,290 --> 00:13:01,439
course it can<font color="#CCCCCC"> be can be considered as</font>

191
00:12:57,090 --> 00:13:04,980
safe<font color="#E5E5E5"> and the author admits that in the</font>

192
00:13:01,440 --> 00:13:08,340
comment another example<font color="#E5E5E5"> in this example</font>

193
00:13:04,980 --> 00:13:10,110
you can<font color="#CCCCCC"> see that</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> stamp is used as a</font>

194
00:13:08,340 --> 00:13:17,040
source of entropy<font color="#CCCCCC"> and</font><font color="#E5E5E5"> of course</font><font color="#CCCCCC"> it's</font>

195
00:13:10,110 --> 00:13:20,610
cannot be<font color="#CCCCCC"> secured in this example</font><font color="#E5E5E5"> the</font>

196
00:13:17,040 --> 00:13:24,209
contract uses coinbase<font color="#CCCCCC"> the address of</font>

197
00:13:20,610 --> 00:13:29,430
the<font color="#E5E5E5"> miner and the block difficulty</font>

198
00:13:24,210 --> 00:13:32,190
variable and of course<font color="#E5E5E5"> if you call the</font>

199
00:13:29,430 --> 00:13:35,640
<font color="#E5E5E5">target contract and use the same code in</font>

200
00:13:32,190 --> 00:13:38,060
your exploit<font color="#CCCCCC"> the result the outcome will</font>

201
00:13:35,640 --> 00:13:38,060
be the<font color="#CCCCCC"> same</font>

202
00:13:39,260 --> 00:13:48,540
the second category<font color="#E5E5E5"> of vulnerable</font>

203
00:13:43,490 --> 00:13:53,150
<font color="#CCCCCC">generators is those that are based</font><font color="#E5E5E5"> on</font>

204
00:13:48,540 --> 00:13:58,760
<font color="#CCCCCC">lock cache block cache is a function in</font>

205
00:13:53,150 --> 00:14:03,380
IBM<font color="#E5E5E5"> that allows you to</font><font color="#CCCCCC"> get the hash of</font>

206
00:13:58,760 --> 00:14:07,200
specified block<font color="#CCCCCC"> and there are three</font>

207
00:14:03,380 --> 00:14:11,029
common major variations<font color="#E5E5E5"> vulnerable</font>

208
00:14:07,200 --> 00:14:17,270
variations of misused<font color="#E5E5E5"> block hash</font>

209
00:14:11,029 --> 00:14:20,510
function so the first variation<font color="#E5E5E5"> is just</font>

210
00:14:17,270 --> 00:14:25,560
getting<font color="#E5E5E5"> the block hash of the current</font>

211
00:14:20,510 --> 00:14:30,120
block<font color="#CCCCCC"> the second</font><font color="#E5E5E5"> one is the blockage of</font>

212
00:14:25,560 --> 00:14:33,689
the<font color="#E5E5E5"> last block and the search variation</font>

213
00:14:30,120 --> 00:14:38,850
is getting the block<font color="#E5E5E5"> hash of some null</font>

214
00:14:33,690 --> 00:14:42,540
block so let's start<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> first one</font>

215
00:14:38,850 --> 00:14:50,310
<font color="#CCCCCC">the</font><font color="#E5E5E5"> block</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the current</font><font color="#E5E5E5"> block</font>

216
00:14:42,540 --> 00:14:54,360
<font color="#E5E5E5">what's wrong with this approach you</font><font color="#CCCCCC"> need</font>

217
00:14:50,310 --> 00:14:58,020
<font color="#CCCCCC">to understand that when you</font><font color="#E5E5E5"> execute the</font>

218
00:14:54,360 --> 00:15:02,940
code like on the screenshot<font color="#E5E5E5"> the block</font>

219
00:14:58,020 --> 00:15:05,910
number will point to the actual<font color="#E5E5E5"> number</font>

220
00:15:02,940 --> 00:15:09,360
<font color="#CCCCCC">which is incremented each time a miner</font>

221
00:15:05,910 --> 00:15:13,890
picks up new transactions and creates

222
00:15:09,360 --> 00:15:18,210
any block so at block<font color="#E5E5E5"> initialization the</font>

223
00:15:13,890 --> 00:15:22,500
<font color="#E5E5E5">block number is known so EVM will</font>

224
00:15:18,210 --> 00:15:24,089
provide it<font color="#E5E5E5"> however the block hash of the</font>

225
00:15:22,500 --> 00:15:27,360
current<font color="#E5E5E5"> block number is not known</font>

226
00:15:24,089 --> 00:15:32,880
because<font color="#E5E5E5"> the miner has not yet calculated</font>

227
00:15:27,360 --> 00:15:34,770
<font color="#E5E5E5">the hash that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> why the block hash of</font>

228
00:15:32,880 --> 00:15:40,439
the current block number will<font color="#CCCCCC"> always</font>

229
00:15:34,770 --> 00:15:44,490
will<font color="#E5E5E5"> always result in</font><font color="#CCCCCC"> 0 it's obvious but</font>

230
00:15:40,440 --> 00:15:49,620
as I discovered there are many contracts

231
00:15:44,490 --> 00:15:51,449
that think that<font color="#E5E5E5"> the block hash of the</font>

232
00:15:49,620 --> 00:15:57,329
current<font color="#E5E5E5"> block number will actually</font>

233
00:15:51,449 --> 00:16:01,139
result in the hash<font color="#E5E5E5"> for example like this</font>

234
00:15:57,329 --> 00:16:03,540
<font color="#E5E5E5">contract you see that it uses</font><font color="#CCCCCC"> black hash</font>

235
00:16:01,139 --> 00:16:11,519
of the current<font color="#E5E5E5"> block number for some</font>

236
00:16:03,540 --> 00:16:17,160
card game or<font color="#CCCCCC"> like in this example I have</font>

237
00:16:11,519 --> 00:16:21,889
<font color="#CCCCCC">submitted an issue to github</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> Exum's</font>

238
00:16:17,160 --> 00:16:25,100
<font color="#CCCCCC">an project X Amazon is developer of</font>

239
00:16:21,889 --> 00:16:30,540
cryptic<font color="#CCCCCC"> hitches if you know which was</font>

240
00:16:25,100 --> 00:16:37,589
very popular<font color="#E5E5E5"> it was actually hype about</font>

241
00:16:30,540 --> 00:16:42,868
two month ago<font color="#CCCCCC"> the second category is</font>

242
00:16:37,589 --> 00:16:45,600
<font color="#CCCCCC">black hash of the last block</font><font color="#E5E5E5"> the</font>

243
00:16:42,869 --> 00:16:49,889
<font color="#CCCCCC">principle of the attract is the same as</font>

244
00:16:45,600 --> 00:16:54,029
the block hash as the<font color="#CCCCCC"> orangey that is</font>

245
00:16:49,889 --> 00:16:58,230
based on block variables because again

246
00:16:54,029 --> 00:17:03,929
you can create<font color="#E5E5E5"> an exploit contract just</font>

247
00:16:58,230 --> 00:17:08,069
<font color="#E5E5E5">copy the</font><font color="#CCCCCC"> orange</font><font color="#E5E5E5"> code and call the</font><font color="#CCCCCC"> jagged</font>

248
00:17:03,929 --> 00:17:10,049
contract and the result of the<font color="#CCCCCC"> R&G in</font>

249
00:17:08,069 --> 00:17:15,898
your contract<font color="#E5E5E5"> and the jacket contract</font>

250
00:17:10,049 --> 00:17:21,510
will<font color="#CCCCCC"> be the same this is one example</font><font color="#E5E5E5"> of</font>

251
00:17:15,898 --> 00:17:24,359
such contract<font color="#E5E5E5"> you see that it just try</font>

252
00:17:21,510 --> 00:17:29,789
<font color="#E5E5E5">tries to get the</font><font color="#CCCCCC"> block cache on</font><font color="#E5E5E5"> the last</font>

253
00:17:24,359 --> 00:17:36,260
block and the third category is<font color="#CCCCCC"> the</font>

254
00:17:29,789 --> 00:17:41,549
block<font color="#CCCCCC"> hash of a non block there</font><font color="#E5E5E5"> is a</font>

255
00:17:36,260 --> 00:17:44,340
pickle energy in<font color="#CCCCCC"> EVM the that doesn't</font>

256
00:17:41,549 --> 00:17:50,299
allowed to get all the block hashes

257
00:17:44,340 --> 00:17:53,639
<font color="#CCCCCC">there is a limitation</font><font color="#E5E5E5"> of 256 blocks and</font>

258
00:17:50,299 --> 00:18:01,770
solidity documentation warns<font color="#E5E5E5"> about it</font>

259
00:17:53,639 --> 00:18:04,899
however many contracts tend to

260
00:18:01,770 --> 00:18:08,080
just ignore or<font color="#E5E5E5"> I don't know just didn't</font>

261
00:18:04,900 --> 00:18:11,200
they<font color="#CCCCCC"> just didn't see this warning</font><font color="#E5E5E5"> but</font>

262
00:18:08,080 --> 00:18:15,730
it's a fact that they<font color="#E5E5E5"> don't check</font><font color="#CCCCCC"> that</font>

263
00:18:11,200 --> 00:18:19,810
<font color="#E5E5E5">blog hash of</font><font color="#CCCCCC"> a no block actually</font><font color="#E5E5E5"> gives</font>

264
00:18:15,730 --> 00:18:23,080
some meaningful example but if you try

265
00:18:19,810 --> 00:18:26,820
<font color="#E5E5E5">to get a block</font><font color="#CCCCCC"> hash of some older</font><font color="#E5E5E5"> block</font>

266
00:18:23,080 --> 00:18:31,659
<font color="#E5E5E5">you will get again</font><font color="#CCCCCC"> zero which makes it</font>

267
00:18:26,820 --> 00:18:39,850
predictable<font color="#CCCCCC"> this is the case of Smart</font>

268
00:18:31,660 --> 00:18:42,460
Balance<font color="#CCCCCC"> lottery hack the the lottery</font>

269
00:18:39,850 --> 00:18:45,389
I used the block<font color="#CCCCCC"> number when the batch</font>

270
00:18:42,460 --> 00:18:51,040
was made and put it in the<font color="#CCCCCC"> it storage</font>

271
00:18:45,390 --> 00:18:57,310
<font color="#E5E5E5">when when the user requested the lottery</font>

272
00:18:51,040 --> 00:19:00,370
to announce the winning number<font color="#CCCCCC"> the smart</font>

273
00:18:57,310 --> 00:19:03,460
<font color="#CCCCCC">contract just</font><font color="#E5E5E5"> retrieved the saved block</font>

274
00:19:00,370 --> 00:19:06,399
<font color="#CCCCCC">number and try to calculate not</font>

275
00:19:03,460 --> 00:19:11,800
calculate but get the block hash of that

276
00:19:06,400 --> 00:19:16,270
<font color="#E5E5E5">block from</font><font color="#CCCCCC"> IBM</font><font color="#E5E5E5"> but it failed to well</font>

277
00:19:11,800 --> 00:19:19,899
judge that the hash is actually hash<font color="#E5E5E5"> so</font>

278
00:19:16,270 --> 00:19:23,920
it's<font color="#E5E5E5"> gin</font><font color="#CCCCCC"> Ville date the block number H</font>

279
00:19:19,900 --> 00:19:27,550
<font color="#E5E5E5">and there was actually a bug bounty</font>

280
00:19:23,920 --> 00:19:35,200
<font color="#CCCCCC">organised by the owners of this</font><font color="#E5E5E5"> contract</font>

281
00:19:27,550 --> 00:19:37,899
and they asked everybody to to look for

282
00:19:35,200 --> 00:19:42,610
vulnerabilities in<font color="#E5E5E5"> their code they were</font>

283
00:19:37,900 --> 00:19:47,860
so sure about<font color="#E5E5E5"> it however in</font><font color="#CCCCCC"> two days</font>

284
00:19:42,610 --> 00:19:52,780
some guy found that it didn't correctly

285
00:19:47,860 --> 00:19:56,649
will judge this<font color="#CCCCCC"> block number</font><font color="#E5E5E5"> H and he</font>

286
00:19:52,780 --> 00:20:01,450
managed to steal<font color="#CCCCCC"> four hundred cerium</font>

287
00:19:56,650 --> 00:20:05,380
from this contract<font color="#E5E5E5"> but the developers of</font>

288
00:20:01,450 --> 00:20:07,810
the<font color="#E5E5E5"> slaughtery decided that they will</font>

289
00:20:05,380 --> 00:20:13,229
stop this and withdraw<font color="#E5E5E5"> all the remaining</font>

290
00:20:07,810 --> 00:20:18,009
funds so the were cheating actually

291
00:20:13,229 --> 00:20:21,639
and the last<font color="#E5E5E5"> category that is</font><font color="#CCCCCC"> associated</font>

292
00:20:18,009 --> 00:20:27,429
with<font color="#CCCCCC"> blog hash is</font><font color="#E5E5E5"> variation with a</font>

293
00:20:21,639 --> 00:20:30,639
private<font color="#E5E5E5"> seat</font><font color="#CCCCCC"> in its nature</font><font color="#E5E5E5"> watching is</font>

294
00:20:27,429 --> 00:20:37,349
transparent<font color="#CCCCCC"> it means that as I said you</font>

295
00:20:30,639 --> 00:20:40,928
can you can see any transaction see

296
00:20:37,349 --> 00:20:44,168
every operation that was done and you

297
00:20:40,929 --> 00:20:48,549
can<font color="#CCCCCC"> see also the</font><font color="#E5E5E5"> internal storage of</font>

298
00:20:44,169 --> 00:20:53,669
which contract<font color="#CCCCCC"> there is in solidity</font>

299
00:20:48,549 --> 00:20:57,819
there is a private<font color="#E5E5E5"> school that limits</font>

300
00:20:53,669 --> 00:21:00,999
<font color="#CCCCCC">that restricts other contracts from</font>

301
00:20:57,819 --> 00:21:07,619
<font color="#E5E5E5">accessing your storage the storage of</font>

302
00:21:00,999 --> 00:21:11,409
<font color="#CCCCCC">your contract</font><font color="#E5E5E5"> however you can fetch any</font>

303
00:21:07,619 --> 00:21:17,259
storage item of chain<font color="#CCCCCC"> it means that you</font>

304
00:21:11,409 --> 00:21:25,359
can see all the<font color="#CCCCCC"> items using for example</font>

305
00:21:17,259 --> 00:21:30,089
a<font color="#E5E5E5"> popular serum client called web 3</font><font color="#CCCCCC"> one</font>

306
00:21:25,359 --> 00:21:33,069
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the most interesting</font><font color="#CCCCCC"> examples of such</font>

307
00:21:30,089 --> 00:21:37,928
vulnerable<font color="#CCCCCC"> random number generator</font><font color="#E5E5E5"> is</font>

308
00:21:33,069 --> 00:21:42,219
<font color="#E5E5E5">the etherium lottery - I found firstly</font>

309
00:21:37,929 --> 00:21:47,259
on github<font color="#E5E5E5"> so this is the extract</font><font color="#CCCCCC"> a</font>

310
00:21:42,219 --> 00:21:51,159
<font color="#E5E5E5">fragment of its random number generator</font>

311
00:21:47,259 --> 00:21:56,309
<font color="#E5E5E5">as you see it tries</font><font color="#CCCCCC"> to get the</font><font color="#E5E5E5"> block</font>

312
00:21:51,159 --> 00:22:00,039
<font color="#E5E5E5">cache of a block number with some offset</font>

313
00:21:56,309 --> 00:22:03,279
pointer and this pointer was defined as

314
00:22:00,039 --> 00:22:07,869
a private<font color="#E5E5E5"> with</font><font color="#CCCCCC"> a private scope</font><font color="#E5E5E5"> so the</font>

315
00:22:03,279 --> 00:22:10,449
author thought that<font color="#E5E5E5"> nobody would get</font>

316
00:22:07,869 --> 00:22:15,129
this the value<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this pointer nobody</font>

317
00:22:10,449 --> 00:22:18,489
would we would<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to get this right</font>

318
00:22:15,129 --> 00:22:24,669
of set to be able<font color="#CCCCCC"> to get the block cache</font>

319
00:22:18,489 --> 00:22:28,010
and calculate the random number however

320
00:22:24,670 --> 00:22:34,060
when I reported this issue to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> author</font>

321
00:22:28,010 --> 00:22:38,420
<font color="#E5E5E5">he actually was sure</font><font color="#CCCCCC"> that there was no</font>

322
00:22:34,060 --> 00:22:43,340
<font color="#E5E5E5">mistake from his</font><font color="#CCCCCC"> side</font><font color="#E5E5E5"> and he asked me</font><font color="#CCCCCC"> to</font>

323
00:22:38,420 --> 00:22:47,380
prove it<font color="#CCCCCC"> if it's</font><font color="#E5E5E5"> really vulnerable so</font>

324
00:22:43,340 --> 00:22:52,250
challenge accepted<font color="#E5E5E5"> and using this</font>

325
00:22:47,380 --> 00:22:56,750
exploit which basically used<font color="#E5E5E5"> the same</font>

326
00:22:52,250 --> 00:23:01,390
random<font color="#E5E5E5"> number generator is</font><font color="#CCCCCC"> in solarium</font>

327
00:22:56,750 --> 00:23:05,810
contract and using a pointer<font color="#E5E5E5"> that I</font>

328
00:23:01,390 --> 00:23:11,750
change<font color="#E5E5E5"> off chain using web</font><font color="#CCCCCC"> 3's</font><font color="#E5E5E5"> alien</font>

329
00:23:05,810 --> 00:23:19,580
client<font color="#E5E5E5"> I was able to to snatch all the</font>

330
00:23:11,750 --> 00:23:24,850
film<font color="#E5E5E5"> that was on this contract</font><font color="#CCCCCC"> actually</font>

331
00:23:19,580 --> 00:23:29,230
<font color="#CCCCCC">there was there was the ovum some more</font>

332
00:23:24,850 --> 00:23:33,230
commands<font color="#E5E5E5"> from his side he still didn't</font>

333
00:23:29,230 --> 00:23:36,530
he said good<font color="#E5E5E5"> but he still failed to</font>

334
00:23:33,230 --> 00:23:39,650
implement a proper random number

335
00:23:36,530 --> 00:23:49,270
<font color="#E5E5E5">generator</font><font color="#CCCCCC"> so be sure to</font><font color="#E5E5E5"> check</font><font color="#CCCCCC"> out the</font>

336
00:23:39,650 --> 00:23:53,900
github link it's funny so the force

337
00:23:49,270 --> 00:23:56,690
<font color="#E5E5E5">category is called from training to</font>

338
00:23:53,900 --> 00:24:01,580
understand front<font color="#CCCCCC"> line and you</font><font color="#E5E5E5"> should get</font>

339
00:23:56,690 --> 00:24:06,830
some understanding<font color="#CCCCCC"> of</font><font color="#E5E5E5"> how transactions</font>

340
00:24:01,580 --> 00:24:11,030
are put in a<font color="#CCCCCC"> blog by</font><font color="#E5E5E5"> miners so in</font>

341
00:24:06,830 --> 00:24:15,320
practice<font color="#CCCCCC"> miners want to get the maximum</font>

342
00:24:11,030 --> 00:24:20,560
<font color="#CCCCCC">reward for their calculations</font><font color="#E5E5E5"> so they</font>

343
00:24:15,320 --> 00:24:25,550
pick up the transactions<font color="#E5E5E5"> based on the</font>

344
00:24:20,560 --> 00:24:30,679
total consumed guests the guests of<font color="#E5E5E5"> the</font>

345
00:24:25,550 --> 00:24:34,520
<font color="#CCCCCC">explains is measurement of how difficult</font>

346
00:24:30,680 --> 00:24:38,300
it was for a node for<font color="#E5E5E5"> a serum node to</font>

347
00:24:34,520 --> 00:24:44,510
run<font color="#E5E5E5"> your smart contract so the peak</font>

348
00:24:38,300 --> 00:24:48,590
only large transactions and they<font color="#CCCCCC"> order</font>

349
00:24:44,510 --> 00:24:51,710
them in<font color="#CCCCCC"> each block by</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> gate gas price</font>

350
00:24:48,590 --> 00:24:55,159
price so if you search a larger gas

351
00:24:51,710 --> 00:24:59,570
price<font color="#E5E5E5"> so your transaction will be the</font>

352
00:24:55,160 --> 00:25:02,480
first in<font color="#CCCCCC"> the block and the order of</font>

353
00:24:59,570 --> 00:25:07,550
transactions in the block is quite

354
00:25:02,480 --> 00:25:11,600
important because<font color="#CCCCCC"> if the contract</font>

355
00:25:07,550 --> 00:25:14,750
execution<font color="#E5E5E5"> depends on its position in the</font>

356
00:25:11,600 --> 00:25:19,310
<font color="#E5E5E5">block then it may pose a security</font>

357
00:25:14,750 --> 00:25:22,790
stretch for such contract<font color="#E5E5E5"> an attacker</font>

358
00:25:19,310 --> 00:25:29,950
just may watch<font color="#E5E5E5"> the pool of pending</font>

359
00:25:22,790 --> 00:25:34,330
transactions and he may watch for

360
00:25:29,950 --> 00:25:38,300
externally submitted<font color="#E5E5E5"> random numbers and</font>

361
00:25:34,330 --> 00:25:45,490
issue his transaction that will be the

362
00:25:38,300 --> 00:25:49,460
first<font color="#E5E5E5"> the that will be pre-war to this</font>

363
00:25:45,490 --> 00:25:55,640
transaction with<font color="#E5E5E5"> a random number and it</font>

364
00:25:49,460 --> 00:25:58,430
makes it vulnerable because the EVM will

365
00:25:55,640 --> 00:26:04,370
execute the checkers transactions first

366
00:25:58,430 --> 00:26:06,700
and he will<font color="#E5E5E5"> guess the number before</font><font color="#CCCCCC"> it</font>

367
00:26:04,370 --> 00:26:11,620
was announced

368
00:26:06,700 --> 00:26:15,700
this was the case at the contest

369
00:26:11,620 --> 00:26:19,550
organized by<font color="#E5E5E5"> zero</font><font color="#CCCCCC"> night's conference</font>

370
00:26:15,700 --> 00:26:26,840
<font color="#CCCCCC">there was a smart</font><font color="#E5E5E5"> contract and a robot</font>

371
00:26:19,550 --> 00:26:31,970
who which submitted random numbers<font color="#CCCCCC"> at</font>

372
00:26:26,840 --> 00:26:36,439
some<font color="#CCCCCC"> period of time</font><font color="#E5E5E5"> like one number in a</font>

373
00:26:31,970 --> 00:26:40,820
minute<font color="#E5E5E5"> and the task was to guess the</font>

374
00:26:36,440 --> 00:26:44,720
number<font color="#E5E5E5"> of course</font><font color="#CCCCCC"> which was vulnerable</font>

375
00:26:40,820 --> 00:26:50,689
using<font color="#CCCCCC"> front-running you could just</font>

376
00:26:44,720 --> 00:26:51,830
absorb all the transactions in in

377
00:26:50,690 --> 00:26:55,640
<font color="#CCCCCC">pensions</font>

378
00:26:51,830 --> 00:26:58,129
and pool<font color="#E5E5E5"> and issue your transaction with</font>

379
00:26:55,640 --> 00:27:01,309
a high gas price<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that your</font>

380
00:26:58,130 --> 00:27:06,919
transaction will be executed before<font color="#CCCCCC"> the</font>

381
00:27:01,309 --> 00:27:13,510
<font color="#CCCCCC">Romans wat robots one so it factually</font>

382
00:27:06,919 --> 00:27:16,730
made you the winner<font color="#E5E5E5"> of this lottery and</font>

383
00:27:13,510 --> 00:27:21,320
another example<font color="#CCCCCC"> is the game which I</font>

384
00:27:16,730 --> 00:27:24,919
found on the blockchain<font color="#E5E5E5"> called last as</font>

385
00:27:21,320 --> 00:27:28,970
me<font color="#CCCCCC"> the logic is simple every time a</font>

386
00:27:24,919 --> 00:27:33,289
player<font color="#CCCCCC"> buys the ticket he claims the</font>

387
00:27:28,970 --> 00:27:36,919
last seat in round and the chimer<font color="#E5E5E5"> start</font>

388
00:27:33,289 --> 00:27:41,779
started the countdown<font color="#E5E5E5"> if nobody claimed</font>

389
00:27:36,919 --> 00:27:46,240
<font color="#CCCCCC">this seat within</font><font color="#E5E5E5"> a certain number of</font>

390
00:27:41,779 --> 00:27:53,630
blocks<font color="#E5E5E5"> then the last player wins the</font>

391
00:27:46,240 --> 00:27:55,850
jackpot<font color="#E5E5E5"> so again this implementation is</font>

392
00:27:53,630 --> 00:27:59,750
<font color="#E5E5E5">also vulnerable to front trying issue</font>

393
00:27:55,850 --> 00:28:03,110
because you<font color="#CCCCCC"> can again observe pending</font>

394
00:27:59,750 --> 00:28:07,010
transaction pool<font color="#E5E5E5"> and watch for as the</font>

395
00:28:03,110 --> 00:28:10,219
<font color="#E5E5E5">contestants transactions and claim the</font>

396
00:28:07,010 --> 00:28:16,519
check the jackpot with a transaction

397
00:28:10,220 --> 00:28:19,429
with a high<font color="#E5E5E5"> class price so this was the</font>

398
00:28:16,519 --> 00:28:23,570
part about vulnerable random number

399
00:28:19,429 --> 00:28:33,820
generators and the next one is<font color="#CCCCCC"> about</font><font color="#E5E5E5"> how</font>

400
00:28:23,570 --> 00:28:39,139
<font color="#CCCCCC">to build</font><font color="#E5E5E5"> a safer one</font><font color="#CCCCCC"> there are three</font>

401
00:28:33,820 --> 00:28:43,250
main implementations<font color="#E5E5E5"> that</font><font color="#CCCCCC"> can be used as</font>

402
00:28:39,139 --> 00:28:48,289
a safer<font color="#E5E5E5"> approach for random number</font>

403
00:28:43,250 --> 00:28:52,600
<font color="#E5E5E5">generators the first one is using</font>

404
00:28:48,289 --> 00:28:55,600
external Oracle's watch-chain is

405
00:28:52,600 --> 00:28:59,840
deterministic<font color="#CCCCCC"> it means that it cannot</font>

406
00:28:55,600 --> 00:29:05,019
access the environment<font color="#E5E5E5"> its environment</font>

407
00:28:59,840 --> 00:29:08,928
<font color="#CCCCCC">so in order to for example fetch</font>

408
00:29:05,019 --> 00:29:11,679
<font color="#CCCCCC">currency rates or weather or something</font>

409
00:29:08,929 --> 00:29:15,860
else<font color="#CCCCCC"> you</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to use external</font><font color="#E5E5E5"> Oracle's</font>

410
00:29:11,679 --> 00:29:20,779
<font color="#E5E5E5">this is the scheme</font><font color="#CCCCCC"> of how such</font><font color="#E5E5E5"> Oracle</font>

411
00:29:15,860 --> 00:29:24,590
may work<font color="#CCCCCC"> the most</font><font color="#E5E5E5"> used service called is</font>

412
00:29:20,779 --> 00:29:30,769
called<font color="#CCCCCC"> auric</font><font color="#E5E5E5"> wise it allows a smart</font>

413
00:29:24,590 --> 00:29:34,158
contract<font color="#E5E5E5"> to get the result or get get</font>

414
00:29:30,769 --> 00:29:37,820
any page from<font color="#CCCCCC"> the internet</font><font color="#E5E5E5"> and they</font>

415
00:29:34,159 --> 00:29:43,580
<font color="#E5E5E5">found that many contracts use Oracle</font>

416
00:29:37,820 --> 00:29:48,799
eyes to request random.org<font color="#E5E5E5"> website which</font>

417
00:29:43,580 --> 00:29:55,610
is a source of random number generator

418
00:29:48,799 --> 00:29:56,929
<font color="#CCCCCC">pollak but in this case</font><font color="#E5E5E5"> several</font>

419
00:29:55,610 --> 00:30:00,678
questions arise

420
00:29:56,929 --> 00:30:04,429
can we trust<font color="#E5E5E5"> or AK wise because</font><font color="#CCCCCC"> as you</font>

421
00:30:00,679 --> 00:30:07,870
see on<font color="#CCCCCC"> this scheme</font><font color="#E5E5E5"> there is another</font>

422
00:30:04,429 --> 00:30:10,970
client service running on<font color="#E5E5E5"> the box at</font>

423
00:30:07,870 --> 00:30:17,120
Amazon<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> and we cannot be sure</font>

424
00:30:10,970 --> 00:30:19,909
<font color="#E5E5E5">that it's not tampered we can we cannot</font>

425
00:30:17,120 --> 00:30:23,268
be<font color="#CCCCCC"> also sure about random.org</font>

426
00:30:19,909 --> 00:30:27,889
and all the underlying infrastructure

427
00:30:23,269 --> 00:30:32,690
because anything can happen and it can

428
00:30:27,889 --> 00:30:36,799
be theoretically<font color="#E5E5E5"> also tempered or</font><font color="#CCCCCC"> Clause</font>

429
00:30:32,690 --> 00:30:41,240
provides some means<font color="#CCCCCC"> to verify</font><font color="#E5E5E5"> the the</font>

430
00:30:36,799 --> 00:30:44,570
results for<font color="#CCCCCC"> example Chile's notary</font><font color="#E5E5E5"> but</font>

431
00:30:41,240 --> 00:30:47,899
it can be verified<font color="#E5E5E5"> only off chain it</font>

432
00:30:44,570 --> 00:30:52,010
means that you cannot check that the

433
00:30:47,899 --> 00:30:54,799
results were indeed correct<font color="#E5E5E5"> in your</font>

434
00:30:52,010 --> 00:30:58,059
<font color="#CCCCCC">smart contract in the</font><font color="#E5E5E5"> runtime</font>

435
00:30:54,799 --> 00:31:04,279
you can do<font color="#E5E5E5"> it just afterwards when the</font>

436
00:30:58,059 --> 00:31:07,970
for<font color="#E5E5E5"> example winner was determined or</font>

437
00:31:04,279 --> 00:31:13,760
<font color="#CCCCCC">Clause provides some even more even</font>

438
00:31:07,970 --> 00:31:19,419
better<font color="#E5E5E5"> means using ledger proofs and it</font>

439
00:31:13,760 --> 00:31:23,629
allows<font color="#E5E5E5"> to verify the</font><font color="#CCCCCC"> results on chain</font>

440
00:31:19,419 --> 00:31:27,919
these are some<font color="#E5E5E5"> examples of the lotteries</font>

441
00:31:23,629 --> 00:31:33,649
that<font color="#E5E5E5"> use our class another external</font>

442
00:31:27,919 --> 00:31:36,739
<font color="#E5E5E5">Oracle is BTC relay</font><font color="#CCCCCC"> BTC relay is a</font>

443
00:31:33,649 --> 00:31:41,418
bridge between<font color="#CCCCCC"> a theorem</font><font color="#E5E5E5"> and Bitcoin</font>

444
00:31:36,739 --> 00:31:45,409
block chains<font color="#CCCCCC"> and I found an example of</font>

445
00:31:41,419 --> 00:31:49,399
<font color="#CCCCCC">smart contract that uses future</font><font color="#E5E5E5"> blocks</font>

446
00:31:45,409 --> 00:31:57,159
<font color="#E5E5E5">of Bitcoin as a source of entropy for a</font>

447
00:31:49,399 --> 00:32:00,408
theorem smart contract but again the

448
00:31:57,159 --> 00:32:04,309
means of protections of protection in

449
00:32:00,409 --> 00:32:08,950
this case is the sole fact that<font color="#CCCCCC"> Bitcoin</font>

450
00:32:04,309 --> 00:32:13,460
price is higher than<font color="#E5E5E5"> serums and miners</font>

451
00:32:08,950 --> 00:32:16,970
won't be cheating in this example<font color="#E5E5E5"> but we</font>

452
00:32:13,460 --> 00:32:21,769
can be<font color="#E5E5E5"> sure that they won't be cheating</font>

453
00:32:16,970 --> 00:32:26,210
<font color="#E5E5E5">it just about</font><font color="#CCCCCC"> the price of bitcoins</font><font color="#E5E5E5"> so</font>

454
00:32:21,769 --> 00:32:31,989
it just makes it harder but does<font color="#E5E5E5"> not</font>

455
00:32:26,210 --> 00:32:31,989
eliminate<font color="#CCCCCC"> the possibility</font><font color="#E5E5E5"> entirely</font>

456
00:32:33,789 --> 00:32:39,879
<font color="#CCCCCC">another</font><font color="#E5E5E5"> approach is called</font><font color="#CCCCCC"> signalize</font>

457
00:32:39,970 --> 00:32:47,869
signalize is suitable for contracts

458
00:32:44,080 --> 00:32:52,840
where there are two<font color="#E5E5E5"> patches</font><font color="#CCCCCC"> the player</font>

459
00:32:47,869 --> 00:32:58,840
and the house<font color="#CCCCCC"> it uses cryptographic</font>

460
00:32:52,840 --> 00:32:58,840
signature<font color="#CCCCCC"> as a source of entropy</font><font color="#E5E5E5"> and the</font>

461
00:32:59,229 --> 00:33:06,349
<font color="#E5E5E5">procedure is</font><font color="#CCCCCC"> as false firstly player</font>

462
00:33:03,769 --> 00:33:10,159
makes a bad<font color="#E5E5E5"> bicone smudge contract</font>

463
00:33:06,349 --> 00:33:13,999
<font color="#E5E5E5">because the smart contract sees this</font>

464
00:33:10,159 --> 00:33:18,200
batch then signs it with its<font color="#E5E5E5"> pirate</font><font color="#CCCCCC"> key</font>

465
00:33:13,999 --> 00:33:21,679
and sends the signature to<font color="#E5E5E5"> smart</font>

466
00:33:18,200 --> 00:33:25,999
contract then smart contract verifies

467
00:33:21,679 --> 00:33:30,659
that<font color="#CCCCCC"> it is correct using non</font><font color="#E5E5E5"> public key</font>

468
00:33:25,999 --> 00:33:33,570
and then the<font color="#E5E5E5"> signature is used as</font>

469
00:33:30,659 --> 00:33:38,190
<font color="#CCCCCC">a source of entropy</font><font color="#E5E5E5"> is it is used to</font>

470
00:33:33,570 --> 00:33:43,979
generate random numbers<font color="#E5E5E5"> so what is wrong</font>

471
00:33:38,190 --> 00:33:49,349
with this approach it can<font color="#CCCCCC"> be awesome is</font>

472
00:33:43,979 --> 00:33:52,639
used<font color="#E5E5E5"> because the only built-in means of</font>

473
00:33:49,349 --> 00:34:01,470
cryptographic signature in serum is

474
00:33:52,639 --> 00:34:05,580
elliptic curve<font color="#E5E5E5"> ECG</font><font color="#CCCCCC"> si and this algorithm</font>

475
00:34:01,470 --> 00:34:11,190
<font color="#E5E5E5">allows to allows the house to cheat</font>

476
00:34:05,580 --> 00:34:19,098
because in ECG<font color="#CCCCCC"> se you can submit a</font>

477
00:34:11,190 --> 00:34:22,950
<font color="#E5E5E5">parameter</font><font color="#CCCCCC"> K</font><font color="#E5E5E5"> you can choose the K so</font><font color="#CCCCCC"> that</font>

478
00:34:19,099 --> 00:34:25,980
this the<font color="#E5E5E5"> output signature will benefit</font>

479
00:34:22,949 --> 00:34:31,138
the house<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is the problem</font>

480
00:34:25,980 --> 00:34:33,980
because<font color="#CCCCCC"> the the house can cheat and you</font>

481
00:34:31,139 --> 00:34:38,460
can see an example<font color="#E5E5E5"> of such</font>

482
00:34:33,980 --> 00:34:45,119
implementation on the<font color="#E5E5E5"> link I will also</font>

483
00:34:38,460 --> 00:34:48,839
share my slides afterwards the correct

484
00:34:45,119 --> 00:34:51,510
approach is using<font color="#E5E5E5"> RSA based signatures</font>

485
00:34:48,839 --> 00:34:54,418
<font color="#E5E5E5">because in our say there is you cannot</font>

486
00:34:51,510 --> 00:35:03,630
manipulate<font color="#E5E5E5"> input parameters there is no</font>

487
00:34:54,418 --> 00:35:07,980
such<font color="#E5E5E5"> K and L say is safe against this</font>

488
00:35:03,630 --> 00:35:12,510
type<font color="#CCCCCC"> of check</font><font color="#E5E5E5"> and thanks to</font><font color="#CCCCCC"> metropolis</font>

489
00:35:07,980 --> 00:35:15,059
<font color="#CCCCCC">heart Fork</font><font color="#E5E5E5"> of the etherium modular</font>

490
00:35:12,510 --> 00:35:21,140
exponentiation operation became

491
00:35:15,059 --> 00:35:23,940
<font color="#E5E5E5">available</font><font color="#CCCCCC"> so anybody can implement this</font>

492
00:35:21,140 --> 00:35:26,629
algorithm<font color="#E5E5E5"> in their smart contracts and</font>

493
00:35:23,940 --> 00:35:35,789
there are some<font color="#E5E5E5"> open source</font>

494
00:35:26,630 --> 00:35:40,760
implementations<font color="#E5E5E5"> of rc4 theorem and the</font>

495
00:35:35,789 --> 00:35:44,020
last approach that you can use to make

496
00:35:40,760 --> 00:35:47,440
safer random number generators

497
00:35:44,020 --> 00:35:52,330
is a committee<font color="#CCCCCC"> real approach committee</font>

498
00:35:47,440 --> 00:35:55,780
<font color="#CCCCCC">real is two-faced I want</font><font color="#E5E5E5"> to say is that</font>

499
00:35:52,330 --> 00:35:58,810
any implementation<font color="#E5E5E5"> that determines the</font>

500
00:35:55,780 --> 00:36:03,430
<font color="#E5E5E5">winner in just one transaction is always</font>

501
00:35:58,810 --> 00:36:05,590
vulnerable to make it safer<font color="#E5E5E5"> you need to</font>

502
00:36:03,430 --> 00:36:07,950
use at least two<font color="#E5E5E5"> face</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> two</font>

503
00:36:05,590 --> 00:36:12,510
transactions in the first transaction

504
00:36:07,950 --> 00:36:18,480
<font color="#E5E5E5">the</font><font color="#CCCCCC"> so-called commit stage the owner</font>

505
00:36:12,510 --> 00:36:23,200
posts submits hashed<font color="#E5E5E5"> seat no clear text</font>

506
00:36:18,480 --> 00:36:26,680
<font color="#CCCCCC">then the smart contract saves this hash</font>

507
00:36:23,200 --> 00:36:31,839
seat<font color="#E5E5E5"> and in the second stage called</font>

508
00:36:26,680 --> 00:36:35,910
<font color="#CCCCCC">reveal the owner announces clear text</font>

509
00:36:31,840 --> 00:36:39,610
seat and smart contract verifies that

510
00:36:35,910 --> 00:36:44,290
the hash of the siege in the<font color="#CCCCCC"> chemists</font>

511
00:36:39,610 --> 00:36:47,590
stage is equal so it just checked<font color="#E5E5E5"> that</font>

512
00:36:44,290 --> 00:36:54,190
the seats are correct<font color="#E5E5E5"> using the hash</font>

513
00:36:47,590 --> 00:36:57,880
<font color="#CCCCCC">that was</font><font color="#E5E5E5"> submitted earlier in chemistry</font>

514
00:36:54,190 --> 00:37:02,110
will<font color="#E5E5E5"> there a proper chemistry</font><font color="#CCCCCC"> wheel</font>

515
00:36:57,880 --> 00:37:05,440
should rely on<font color="#E5E5E5"> multiple patches because</font>

516
00:37:02,110 --> 00:37:09,070
when there is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> single party for example</font>

517
00:37:05,440 --> 00:37:13,480
when only<font color="#E5E5E5"> owner submits his hash seat</font>

518
00:37:09,070 --> 00:37:17,880
there is a problem<font color="#E5E5E5"> because the owner can</font>

519
00:37:13,480 --> 00:37:21,430
also be the player<font color="#E5E5E5"> and when he knows the</font>

520
00:37:17,880 --> 00:37:22,990
original<font color="#CCCCCC"> clear text</font><font color="#E5E5E5"> seat of course he</font>

521
00:37:21,430 --> 00:37:27,129
can

522
00:37:22,990 --> 00:37:31,450
choose the right<font color="#CCCCCC"> time and he can know</font>

523
00:37:27,130 --> 00:37:36,030
the random number beforehand<font color="#E5E5E5"> these are</font>

524
00:37:31,450 --> 00:37:42,339
some<font color="#E5E5E5"> examples of commit reveal with</font>

525
00:37:36,030 --> 00:37:46,860
float single party<font color="#E5E5E5"> approach a better</font>

526
00:37:42,340 --> 00:37:52,180
<font color="#CCCCCC">commit reveal</font><font color="#E5E5E5"> implementation is</font><font color="#CCCCCC"> Ren gel</font>

527
00:37:46,860 --> 00:37:55,480
<font color="#CCCCCC">Ranger is</font><font color="#E5E5E5"> RNG that collects collects</font>

528
00:37:52,180 --> 00:37:57,910
hashed<font color="#E5E5E5"> seeds from multiple</font><font color="#CCCCCC"> parties so</font>

529
00:37:55,480 --> 00:38:03,050
literally<font color="#E5E5E5"> anybody can</font>

530
00:37:57,910 --> 00:38:07,580
participate<font color="#E5E5E5"> in each iteration and he can</font>

531
00:38:03,050 --> 00:38:11,990
submit his hash seat and then each party

532
00:38:07,580 --> 00:38:20,060
is paid a reward for his participation

533
00:38:11,990 --> 00:38:23,060
and this<font color="#E5E5E5"> approach is good in for for the</font>

534
00:38:20,060 --> 00:38:27,200
reason<font color="#E5E5E5"> that nobody knows each other</font>

535
00:38:23,060 --> 00:38:32,840
<font color="#CCCCCC">seeds and the result can be considered</font>

536
00:38:27,200 --> 00:38:35,569
as truly truly random however if a

537
00:38:32,840 --> 00:38:40,940
<font color="#E5E5E5">single party refuses to reveal the</font>

538
00:38:35,570 --> 00:38:49,450
original<font color="#E5E5E5"> seed it will result in</font><font color="#CCCCCC"> denial</font>

539
00:38:40,940 --> 00:38:52,430
<font color="#E5E5E5">of service I think the best</font>

540
00:38:49,450 --> 00:38:55,700
implementation of<font color="#CCCCCC"> commit reveal and best</font>

541
00:38:52,430 --> 00:38:59,299
<font color="#E5E5E5">implementation of random number</font>

542
00:38:55,700 --> 00:39:03,529
generator<font color="#E5E5E5"> is a committee reveal with a</font>

543
00:38:59,300 --> 00:39:07,610
future<font color="#CCCCCC"> blog</font><font color="#E5E5E5"> hash so there are three</font>

544
00:39:03,530 --> 00:39:11,870
sources<font color="#E5E5E5"> of entropy in this case</font><font color="#CCCCCC"> first</font>

545
00:39:07,610 --> 00:39:14,480
one is the owners<font color="#E5E5E5"> hash seat the second</font>

546
00:39:11,870 --> 00:39:19,370
one is the<font color="#CCCCCC"> player's hash seat and the</font>

547
00:39:14,480 --> 00:39:25,520
<font color="#E5E5E5">search is a future blog hash that is not</font>

548
00:39:19,370 --> 00:39:28,339
known to anybody<font color="#E5E5E5"> beforehand so the</font>

549
00:39:25,520 --> 00:39:32,320
random number is then generated as a

550
00:39:28,340 --> 00:39:36,620
hash of<font color="#CCCCCC"> true seeds and a block hash</font>

551
00:39:32,320 --> 00:39:43,480
check out the link below<font color="#E5E5E5"> which explains</font>

552
00:39:36,620 --> 00:39:47,540
in detail how<font color="#CCCCCC"> this implementation works</font>

553
00:39:43,480 --> 00:39:49,220
<font color="#E5E5E5">it's good</font><font color="#CCCCCC"> because it solves</font><font color="#E5E5E5"> minor</font>

554
00:39:47,540 --> 00:39:52,220
<font color="#CCCCCC">essential problem</font>

555
00:39:49,220 --> 00:39:54,589
some minor can decide<font color="#CCCCCC"> on</font><font color="#E5E5E5"> block hash but</font>

556
00:39:52,220 --> 00:39:57,140
he<font color="#E5E5E5"> doesn't know the owners and</font><font color="#CCCCCC"> player</font>

557
00:39:54,590 --> 00:40:01,490
<font color="#E5E5E5">seats</font><font color="#CCCCCC"> chose</font><font color="#E5E5E5"> the sauce on there since</font>

558
00:39:57,140 --> 00:40:04,310
<font color="#E5E5E5">central problem because owner doesn't</font>

559
00:40:01,490 --> 00:40:09,080
<font color="#CCCCCC">know the future block cache and it also</font>

560
00:40:04,310 --> 00:40:11,799
solves the case when the player is<font color="#E5E5E5"> also</font>

561
00:40:09,080 --> 00:40:14,590
<font color="#E5E5E5">an owner and also a minor it</font>

562
00:40:11,800 --> 00:40:18,580
of course of course unlikely much<font color="#E5E5E5"> this</font>

563
00:40:14,590 --> 00:40:24,550
approach these solves<font color="#E5E5E5"> even this case</font>

564
00:40:18,580 --> 00:40:28,690
<font color="#E5E5E5">because nobody the the person person</font>

565
00:40:24,550 --> 00:40:31,120
doesn't know<font color="#E5E5E5"> the blockage he doesn't</font>

566
00:40:28,690 --> 00:40:38,010
know the<font color="#CCCCCC"> owners seat and doesn't know</font>

567
00:40:31,120 --> 00:40:42,160
doesn't<font color="#CCCCCC"> know player seat and the last</font>

568
00:40:38,010 --> 00:40:45,520
<font color="#E5E5E5">section of my presentation is</font><font color="#CCCCCC"> about the</font>

569
00:40:42,160 --> 00:40:52,359
attempt to<font color="#E5E5E5"> automate the discovery of</font>

570
00:40:45,520 --> 00:40:55,470
<font color="#E5E5E5">such vulnerable implementations</font><font color="#CCCCCC"> there is</font>

571
00:40:52,360 --> 00:40:57,140
a tool called<font color="#E5E5E5"> material created by</font>

572
00:40:55,470 --> 00:40:58,480
<font color="#E5E5E5">Bernard Miller</font>

573
00:40:57,140 --> 00:41:02,279
[Music]

574
00:40:58,480 --> 00:41:06,520
which allows<font color="#CCCCCC"> to scan</font><font color="#E5E5E5"> serum for</font>

575
00:41:02,280 --> 00:41:09,720
vulnerabilities to<font color="#E5E5E5"> find vulnerable smart</font>

576
00:41:06,520 --> 00:41:14,220
contracts it<font color="#E5E5E5"> uses a symbolic execution</font>

577
00:41:09,720 --> 00:41:18,339
engine called<font color="#CCCCCC"> z3 which allows</font><font color="#E5E5E5"> to</font>

578
00:41:14,220 --> 00:41:22,209
construct the<font color="#CCCCCC"> Cole graph of a smart</font>

579
00:41:18,340 --> 00:41:28,360
contract<font color="#CCCCCC"> and him in this Cole graph it</font>

580
00:41:22,210 --> 00:41:31,060
is possible<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> the for example as a</font>

581
00:41:28,360 --> 00:41:35,440
traffic transfers<font color="#CCCCCC"> that are constrained</font>

582
00:41:31,060 --> 00:41:40,390
by<font color="#E5E5E5"> for example block variables so I</font>

583
00:41:35,440 --> 00:41:41,770
decided to<font color="#E5E5E5"> use this platform to make a</font>

584
00:41:40,390 --> 00:41:44,680
plug-in<font color="#CCCCCC"> called</font>

585
00:41:41,770 --> 00:41:47,740
<font color="#CCCCCC">vic random that allows to detect</font><font color="#E5E5E5"> such</font>

586
00:41:44,680 --> 00:41:50,049
unsafe<font color="#CCCCCC"> will your transfers</font><font color="#E5E5E5"> - are</font>

587
00:41:47,740 --> 00:41:57,009
constrained by predictable<font color="#E5E5E5"> block</font>

588
00:41:50,050 --> 00:42:00,270
variables and possible<font color="#E5E5E5"> caches</font><font color="#CCCCCC"> so that's</font>

589
00:41:57,010 --> 00:42:00,270
it thank<font color="#E5E5E5"> you</font>

590
00:42:04,020 --> 00:42:17,140
you have any questions<font color="#CCCCCC"> raise your</font><font color="#E5E5E5"> hand</font>

591
00:42:06,640 --> 00:42:19,779
and I'll bring the<font color="#E5E5E5"> mic to you thank you</font>

592
00:42:17,140 --> 00:42:21,819
very much<font color="#E5E5E5"> interesting talk</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> question</font>

593
00:42:19,780 --> 00:42:25,660
for you a little<font color="#E5E5E5"> speculative</font><font color="#CCCCCC"> if you will</font>

594
00:42:21,820 --> 00:42:29,260
do you think<font color="#CCCCCC"> the prevalence of some of</font>

595
00:42:25,660 --> 00:42:32,500
these poor implementations<font color="#E5E5E5"> is frankly</font>

596
00:42:29,260 --> 00:42:35,320
laziness<font color="#CCCCCC"> or is</font><font color="#E5E5E5"> it may be indicative of</font>

597
00:42:32,500 --> 00:42:36,400
<font color="#E5E5E5">some folks trying to game the</font><font color="#CCCCCC"> system for</font>

598
00:42:35,320 --> 00:42:38,710
their own benefit

599
00:42:36,400 --> 00:42:41,920
you know<font color="#E5E5E5"> criminals or hacker underground</font>

600
00:42:38,710 --> 00:42:43,990
etc um and yeah<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> just kind of curious</font>

601
00:42:41,920 --> 00:42:48,220
<font color="#E5E5E5">on your thoughts about that well I think</font>

602
00:42:43,990 --> 00:42:53,680
<font color="#CCCCCC">that the main reason of these</font>

603
00:42:48,220 --> 00:43:00,700
vulnerabilities<font color="#CCCCCC"> I think that it is</font><font color="#E5E5E5"> maybe</font>

604
00:42:53,680 --> 00:43:03,370
ignorance or just the technology that<font color="#E5E5E5"> is</font>

605
00:43:00,700 --> 00:43:08,259
<font color="#E5E5E5">too new for developers they didn't catch</font>

606
00:43:03,370 --> 00:43:10,359
all<font color="#E5E5E5"> the new things because</font><font color="#CCCCCC"> Bach chain is</font>

607
00:43:08,260 --> 00:43:13,960
<font color="#E5E5E5">very different</font>

608
00:43:10,360 --> 00:43:18,700
<font color="#E5E5E5">I</font><font color="#CCCCCC"> saw many examples</font><font color="#E5E5E5"> when web developers</font>

609
00:43:13,960 --> 00:43:20,380
tried to make such games<font color="#CCCCCC"> and they don't</font>

610
00:43:18,700 --> 00:43:23,460
understand the<font color="#E5E5E5"> concepts behind</font>

611
00:43:20,380 --> 00:43:25,870
blockchain and of course it leads to

612
00:43:23,460 --> 00:43:28,360
vulnerabilities<font color="#E5E5E5"> so they do not</font>

613
00:43:25,870 --> 00:43:32,470
understand the platform<font color="#CCCCCC"> in the first</font>

614
00:43:28,360 --> 00:43:36,070
place and I<font color="#E5E5E5"> think that it is the main</font>

615
00:43:32,470 --> 00:43:41,529
<font color="#CCCCCC">reason I can compare it to</font><font color="#E5E5E5"> web</font><font color="#CCCCCC"> security</font>

616
00:43:36,070 --> 00:43:47,830
when back in 2000 maybe to sound and

617
00:43:41,530 --> 00:43:52,030
five when PHP was popular many people

618
00:43:47,830 --> 00:43:55,049
got<font color="#CCCCCC"> into web development and they did</font>

619
00:43:52,030 --> 00:43:58,930
all<font color="#E5E5E5"> it wrong and the language PHP</font>

620
00:43:55,050 --> 00:44:03,550
<font color="#CCCCCC">favored</font><font color="#E5E5E5"> such bad practices it didn't</font>

621
00:43:58,930 --> 00:44:07,899
restrict proper usage and I think<font color="#E5E5E5"> that</font>

622
00:44:03,550 --> 00:44:13,210
solidity<font color="#E5E5E5"> the main language for writing</font>

623
00:44:07,900 --> 00:44:20,470
smart contracts<font color="#E5E5E5"> also does not provide</font>

624
00:44:13,210 --> 00:44:22,710
solid means for safer<font color="#E5E5E5"> programming so</font>

625
00:44:20,470 --> 00:44:22,709
this

626
00:44:30,459 --> 00:44:37,399
yeah hmm I see you brought<font color="#E5E5E5"> up the fact</font>

627
00:44:35,539 --> 00:44:38,929
that<font color="#E5E5E5"> a lot of developers</font><font color="#CCCCCC"> don't</font>

628
00:44:37,400 --> 00:44:42,739
understand the blockchain of the

629
00:44:38,929 --> 00:44:45,640
technology very<font color="#CCCCCC"> well I'd have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> agree</font>

630
00:44:42,739 --> 00:44:48,529
with<font color="#E5E5E5"> you</font><font color="#CCCCCC"> which is why</font><font color="#E5E5E5"> for example</font>

631
00:44:45,640 --> 00:44:51,078
<font color="#E5E5E5">personally when it comes to Bitcoin at</font>

632
00:44:48,529 --> 00:44:54,439
least there<font color="#E5E5E5"> is a really good book</font><font color="#CCCCCC"> by a</font>

633
00:44:51,079 --> 00:44:56,449
<font color="#E5E5E5">gentleman named Andres Antonopoulos</font><font color="#CCCCCC"> is</font>

634
00:44:54,439 --> 00:45:00,469
kind of famous<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the scene and he wrote</font>

635
00:44:56,449 --> 00:45:03,049
the Bitcoin book<font color="#E5E5E5"> which gets</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> it's a</font>

636
00:45:00,469 --> 00:45:05,529
book built for programmers to<font color="#CCCCCC"> understand</font>

637
00:45:03,049 --> 00:45:08,209
all the different facets of blocks

638
00:45:05,529 --> 00:45:10,549
<font color="#E5E5E5">mining the the peer-to-peer network of</font>

639
00:45:08,209 --> 00:45:15,439
Bitcoin<font color="#E5E5E5"> and I think they're working on</font>

640
00:45:10,549 --> 00:45:17,409
<font color="#E5E5E5">one for</font><font color="#CCCCCC"> a theorem right now</font><font color="#E5E5E5"> but I feel</font>

641
00:45:15,439 --> 00:45:20,569
<font color="#CCCCCC">like when one tries to learn about</font>

642
00:45:17,409 --> 00:45:25,130
<font color="#CCCCCC">aetherium and smart contracts</font><font color="#E5E5E5"> in</font>

643
00:45:20,569 --> 00:45:28,579
particular<font color="#CCCCCC"> it's really its own thing and</font>

644
00:45:25,130 --> 00:45:30,799
and you know where are those good

645
00:45:28,579 --> 00:45:33,890
resources<font color="#E5E5E5"> where</font><font color="#CCCCCC"> you can go from</font><font color="#E5E5E5"> a</font>

646
00:45:30,799 --> 00:45:35,749
<font color="#E5E5E5">bottom-up kind of approach</font><font color="#CCCCCC"> and learn the</font>

647
00:45:33,890 --> 00:45:38,140
nitty-gritty details because I feel like

648
00:45:35,749 --> 00:45:41,689
when you as a<font color="#CCCCCC"> developer when</font><font color="#E5E5E5"> you know</font>

649
00:45:38,140 --> 00:45:42,890
the<font color="#E5E5E5"> details of it then as you writing</font>

650
00:45:41,689 --> 00:45:45,199
that<font color="#E5E5E5"> code for that random</font><font color="#CCCCCC"> number</font>

651
00:45:42,890 --> 00:45:50,359
generator you<font color="#CCCCCC"> you'd</font><font color="#E5E5E5"> be able to tell oh</font>

652
00:45:45,199 --> 00:45:52,339
yeah<font color="#CCCCCC"> this seed</font><font color="#E5E5E5"> you know can</font><font color="#CCCCCC"> be you know</font>

653
00:45:50,359 --> 00:45:58,669
<font color="#E5E5E5">discovered you</font><font color="#CCCCCC"> know by you know using</font>

654
00:45:52,339 --> 00:46:00,130
that w3 service so like what<font color="#CCCCCC"> what</font><font color="#E5E5E5"> you</font>

655
00:45:58,669 --> 00:46:02,419
know<font color="#E5E5E5"> resources</font><font color="#CCCCCC"> would you recommend</font>

656
00:46:00,130 --> 00:46:04,849
<font color="#E5E5E5">because I'm sure there's</font><font color="#CCCCCC"> maybe other</font>

657
00:46:02,419 --> 00:46:07,129
areas<font color="#CCCCCC"> of smart contracts that are highly</font>

658
00:46:04,849 --> 00:46:09,529
vulnerable<font color="#E5E5E5"> that are not random number</font>

659
00:46:07,130 --> 00:46:12,019
generators and could be<font color="#E5E5E5"> exploited just</font>

660
00:46:09,529 --> 00:46:14,689
as easily<font color="#E5E5E5"> within the coming</font><font color="#CCCCCC"> months yes</font>

661
00:46:12,019 --> 00:46:17,269
<font color="#E5E5E5">the resources is also a great problem</font>

662
00:46:14,689 --> 00:46:20,899
<font color="#E5E5E5">because I think</font><font color="#CCCCCC"> that there is a lack</font><font color="#E5E5E5"> of</font>

663
00:46:17,269 --> 00:46:24,198
such resources<font color="#E5E5E5"> of such</font><font color="#CCCCCC"> guidelines</font>

664
00:46:20,900 --> 00:46:29,229
I can recommend<font color="#CCCCCC"> security best practices</font>

665
00:46:24,199 --> 00:46:33,339
for serum smart contracts by consensus

666
00:46:29,229 --> 00:46:36,348
<font color="#E5E5E5">it's serious it has really good</font>

667
00:46:33,339 --> 00:46:41,549
recommendations<font color="#E5E5E5"> for better programming</font>

668
00:46:36,349 --> 00:46:44,490
<font color="#E5E5E5">much</font><font color="#CCCCCC"> as for random</font><font color="#E5E5E5"> number generators</font>

669
00:46:41,550 --> 00:46:48,690
<font color="#E5E5E5">you should just make</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> own research</font>

670
00:46:44,490 --> 00:46:54,000
before going into<font color="#CCCCCC"> it because</font><font color="#E5E5E5"> there is</font><font color="#CCCCCC"> no</font>

671
00:46:48,690 --> 00:46:54,300
common pattern no common library for for

672
00:46:54,000 --> 00:46:58,230
it

673
00:46:54,300 --> 00:47:01,500
so to understand it<font color="#E5E5E5"> you just need to</font>

674
00:46:58,230 --> 00:47:04,980
open<font color="#E5E5E5"> the debugger and chest</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> you</font>

675
00:47:01,500 --> 00:47:07,620
can't just blindly<font color="#CCCCCC"> think that</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I</font>

676
00:47:04,980 --> 00:47:12,120
think<font color="#CCCCCC"> that the result of example this</font>

677
00:47:07,620 --> 00:47:14,940
block<font color="#E5E5E5"> has will be my actual</font><font color="#CCCCCC"> hat</font><font color="#E5E5E5"> much as</font>

678
00:47:12,120 --> 00:47:19,859
you see it will be<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> in some</font><font color="#CCCCCC"> cases</font>

679
00:47:14,940 --> 00:47:25,800
and even<font color="#E5E5E5"> the official documentation also</font>

680
00:47:19,860 --> 00:47:29,120
<font color="#CCCCCC">lacks some important notices and much</font>

681
00:47:25,800 --> 00:47:34,770
work should<font color="#CCCCCC"> be done in this direction</font><font color="#E5E5E5"> to</font>

682
00:47:29,120 --> 00:47:39,180
<font color="#E5E5E5">improve the basis for safer programming</font>

683
00:47:34,770 --> 00:47:41,009
in serum just<font color="#E5E5E5"> a</font><font color="#CCCCCC"> follow-up on that</font><font color="#E5E5E5"> you</font>

684
00:47:39,180 --> 00:47:43,080
mentioned that<font color="#E5E5E5"> when the hash ends up</font>

685
00:47:41,010 --> 00:47:46,770
being<font color="#E5E5E5"> zero I kind of missed that part in</font>

686
00:47:43,080 --> 00:47:50,819
your presentation the example was that

687
00:47:46,770 --> 00:47:54,360
<font color="#E5E5E5">the developers or you know in that case</font>

688
00:47:50,820 --> 00:47:57,120
are using the hash for the the<font color="#E5E5E5"> next</font>

689
00:47:54,360 --> 00:48:00,600
block<font color="#E5E5E5"> and that that ends up being zero</font>

690
00:47:57,120 --> 00:48:03,600
sometimes<font color="#CCCCCC"> Oh how's that</font><font color="#E5E5E5"> yeah they use of</font>

691
00:48:00,600 --> 00:48:06,420
the past<font color="#E5E5E5"> block this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the problem the</font>

692
00:48:03,600 --> 00:48:11,040
correct<font color="#E5E5E5"> approach is the</font><font color="#CCCCCC"> use to use the</font>

693
00:48:06,420 --> 00:48:14,430
hash of the some future<font color="#E5E5E5"> block but for</font>

694
00:48:11,040 --> 00:48:16,950
some<font color="#E5E5E5"> reason they think that the hash of</font>

695
00:48:14,430 --> 00:48:19,350
the<font color="#CCCCCC"> past</font><font color="#E5E5E5"> ball can be used as a source of</font>

696
00:48:16,950 --> 00:48:21,810
entropy<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is not true of course and</font>

697
00:48:19,350 --> 00:48:24,750
that's because the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> previous block is</font>

698
00:48:21,810 --> 00:48:26,580
known right yeah of course it's known so

699
00:48:24,750 --> 00:48:29,430
then what is then then when in<font color="#E5E5E5"> that</font>

700
00:48:26,580 --> 00:48:32,819
example where you showed<font color="#E5E5E5"> the on ether</font>

701
00:48:29,430 --> 00:48:34,200
scan that that it was zero<font color="#CCCCCC"> how is that</font>

702
00:48:32,820 --> 00:48:37,530
even<font color="#E5E5E5"> possible</font>

703
00:48:34,200 --> 00:48:41,310
it was the example<font color="#E5E5E5"> of current block when</font>

704
00:48:37,530 --> 00:48:44,160
the when the<font color="#E5E5E5"> block hash of the block</font>

705
00:48:41,310 --> 00:48:46,049
number<font color="#E5E5E5"> was calculated so not the past</font>

706
00:48:44,160 --> 00:48:48,210
but not the future<font color="#CCCCCC"> walk but the current</font>

707
00:48:46,050 --> 00:48:53,100
<font color="#E5E5E5">block and the block hash of the current</font>

708
00:48:48,210 --> 00:48:55,230
work is zero<font color="#CCCCCC"> okay thanks for the</font><font color="#E5E5E5"> talk</font>

709
00:48:53,100 --> 00:48:57,569
there was a lot of<font color="#E5E5E5"> information</font>

710
00:48:55,230 --> 00:49:01,680
and another question<font color="#E5E5E5"> is</font><font color="#CCCCCC"> how is the</font>

711
00:48:57,570 --> 00:49:05,300
future<font color="#CCCCCC"> blocks</font><font color="#E5E5E5"> hashes calculated if you</font>

712
00:49:01,680 --> 00:49:08,970
don't have the transactions yet yeah<font color="#CCCCCC"> to</font>

713
00:49:05,300 --> 00:49:11,430
know the<font color="#CCCCCC"> work hash of a future block you</font>

714
00:49:08,970 --> 00:49:13,140
need a second transaction<font color="#CCCCCC"> as I said an</font>

715
00:49:11,430 --> 00:49:16,049
<font color="#E5E5E5">implementation relying on a single</font>

716
00:49:13,140 --> 00:49:20,940
transactions<font color="#E5E5E5"> Forge so you firstly need</font>

717
00:49:16,050 --> 00:49:23,730
to store the work<font color="#E5E5E5"> number and then you</font>

718
00:49:20,940 --> 00:49:26,750
need a second<font color="#E5E5E5"> transaction to retrieve</font>

719
00:49:23,730 --> 00:49:31,500
the block<font color="#E5E5E5"> hash for that block number and</font>

720
00:49:26,750 --> 00:49:34,410
that walk number will point to a block

721
00:49:31,500 --> 00:49:38,310
that was unknown at the time<font color="#E5E5E5"> when the</font>

722
00:49:34,410 --> 00:49:40,649
first<font color="#E5E5E5"> original transaction</font><font color="#CCCCCC"> was made</font><font color="#E5E5E5"> okay</font>

723
00:49:38,310 --> 00:49:42,810
so you mean it's<font color="#CCCCCC"> just a hash of the next</font>

724
00:49:40,650 --> 00:49:46,050
or whatever the next<font color="#E5E5E5"> block numbers but</font>

725
00:49:42,810 --> 00:49:49,440
not the entire hash of the transactions

726
00:49:46,050 --> 00:49:52,500
and<font color="#CCCCCC"> all</font><font color="#E5E5E5"> yeah just of of</font><font color="#CCCCCC"> baloney number</font>

727
00:49:49,440 --> 00:49:56,790
yeah the block number of of the block

728
00:49:52,500 --> 00:50:02,280
when the bed was made<font color="#E5E5E5"> yes of the first</font>

729
00:49:56,790 --> 00:50:04,890
stage<font color="#E5E5E5"> all right so what are what</font><font color="#CCCCCC"> is</font>

730
00:50:02,280 --> 00:50:06,720
thoughts on formal verification<font color="#E5E5E5"> can you</font>

731
00:50:04,890 --> 00:50:08,430
use formal verification on<font color="#E5E5E5"> these smart</font>

732
00:50:06,720 --> 00:50:11,598
contracts and will it<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> for</font>

733
00:50:08,430 --> 00:50:11,598
example<font color="#CCCCCC"> catch these kind of</font><font color="#E5E5E5"> bugs</font>

734
00:50:12,510 --> 00:50:22,410
well I think<font color="#E5E5E5"> that formal verification is</font>

735
00:50:17,089 --> 00:50:24,799
actually a<font color="#E5E5E5"> good approach and I think</font>

736
00:50:22,410 --> 00:50:30,290
<font color="#CCCCCC">that such box can be formally verified</font>

737
00:50:24,800 --> 00:50:33,270
<font color="#E5E5E5">such cases and there is an attempt by</font>

738
00:50:30,290 --> 00:50:38,490
<font color="#E5E5E5">Bernard Mueller that I mentioned</font>

739
00:50:33,270 --> 00:50:43,520
previously<font color="#E5E5E5"> to make formal to</font><font color="#CCCCCC"> perform</font>

740
00:50:38,490 --> 00:50:47,879
formal verification for some

741
00:50:43,520 --> 00:50:51,089
vulnerabilities and you can you<font color="#E5E5E5"> can</font>

742
00:50:47,880 --> 00:50:53,310
check out the blog<font color="#CCCCCC"> post that he recently</font>

743
00:50:51,089 --> 00:50:57,529
<font color="#E5E5E5">made about it</font><font color="#CCCCCC"> and the results an attempt</font>

744
00:50:53,310 --> 00:51:02,670
<font color="#CCCCCC">to formally verify</font><font color="#E5E5E5"> here see 20 tokens</font>

745
00:50:57,530 --> 00:51:05,250
<font color="#CCCCCC">using the que</font><font color="#E5E5E5"> language</font><font color="#CCCCCC"> as I know there</font>

746
00:51:02,670 --> 00:51:07,140
is a working proof of concept as for now

747
00:51:05,250 --> 00:51:08,349
so I think that yeah

748
00:51:07,140 --> 00:51:13,710
<font color="#CCCCCC">formally</font>

749
00:51:08,349 --> 00:51:20,920
occasion is a proper<font color="#E5E5E5"> solution for</font>

750
00:51:13,710 --> 00:51:21,839
eliminating<font color="#E5E5E5"> such marks any other</font>

751
00:51:20,920 --> 00:51:25,690
questions

752
00:51:21,839 --> 00:51:28,869
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> thank you so thank you guys</font>

753
00:51:25,690 --> 00:51:31,569
also there is<font color="#E5E5E5"> a contest that you</font>

754
00:51:28,869 --> 00:51:35,710
mentioned that<font color="#CCCCCC"> you can participate</font><font color="#E5E5E5"> in</font>

755
00:51:31,569 --> 00:51:39,400
and win<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ledger 9s these contests</font>

756
00:51:35,710 --> 00:51:43,950
features the examples<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> showed in</font>

757
00:51:39,400 --> 00:51:47,799
<font color="#E5E5E5">this presentation so</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you feel</font>

758
00:51:43,950 --> 00:51:51,058
confident and<font color="#CCCCCC"> likey</font><font color="#E5E5E5"> you can try your</font>

759
00:51:47,799 --> 00:51:51,059
skill<font color="#E5E5E5"> thanks</font>

760
00:51:59,810 --> 00:52:01,870
<font color="#E5E5E5">you</font>

