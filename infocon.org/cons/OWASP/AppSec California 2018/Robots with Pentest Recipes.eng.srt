1
00:00:04,300 --> 00:00:20,070
[Music]

2
00:00:21,119 --> 00:00:28,500
so this is my<font color="#E5E5E5"> first</font><font color="#CCCCCC"> dog actually</font><font color="#E5E5E5"> talking</font>

3
00:00:25,230 --> 00:00:30,390
about<font color="#E5E5E5"> this stuff</font><font color="#CCCCCC"> I did a small sneak</font>

4
00:00:28,500 --> 00:00:33,449
peek of<font color="#E5E5E5"> what I'm gonna be talking</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you</font>

5
00:00:30,390 --> 00:00:36,690
here at Def Con<font color="#CCCCCC"> last year</font><font color="#E5E5E5"> and I plan to</font>

6
00:00:33,449 --> 00:00:38,730
<font color="#E5E5E5">do it a lot more larger stage this year</font>

7
00:00:36,690 --> 00:00:41,760
<font color="#E5E5E5">as well in you know in different ways</font>

8
00:00:38,730 --> 00:00:43,379
with<font color="#CCCCCC"> different</font><font color="#E5E5E5"> tools</font><font color="#CCCCCC"> so first of</font><font color="#E5E5E5"> all let</font>

9
00:00:41,760 --> 00:00:45,449
me<font color="#E5E5E5"> give you a quick introduction of</font>

10
00:00:43,379 --> 00:00:47,160
<font color="#E5E5E5">myself</font><font color="#CCCCCC"> my name is AB hi</font><font color="#E5E5E5"> I work for a</font>

11
00:00:45,449 --> 00:00:50,370
company<font color="#E5E5E5"> called we 45 where an</font>

12
00:00:47,160 --> 00:00:54,120
application security<font color="#E5E5E5"> company</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> started</font>

13
00:00:50,370 --> 00:00:56,640
off in PCI compliance<font color="#CCCCCC"> I also wrote</font><font color="#E5E5E5"> a</font>

14
00:00:54,120 --> 00:00:58,650
<font color="#CCCCCC">book about</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> then I kind of moved</font>

15
00:00:56,640 --> 00:01:00,059
towards application security entirely I

16
00:00:58,650 --> 00:01:02,370
fell in<font color="#CCCCCC"> love with application security</font>

17
00:01:00,059 --> 00:01:04,408
<font color="#E5E5E5">did a lot of pen testing then I realized</font>

18
00:01:02,370 --> 00:01:08,880
<font color="#E5E5E5">that obviously pen testing needed to</font>

19
00:01:04,409 --> 00:01:11,190
<font color="#E5E5E5">evolve</font><font color="#CCCCCC"> a little bit more so</font><font color="#E5E5E5"> we I got</font>

20
00:01:08,880 --> 00:01:13,949
<font color="#E5E5E5">heavily into dev psych ops which is</font>

21
00:01:11,190 --> 00:01:15,869
essentially how do we achieve better

22
00:01:13,950 --> 00:01:18,570
application<font color="#CCCCCC"> security outcomes</font><font color="#E5E5E5"> in a</font>

23
00:01:15,869 --> 00:01:21,329
continuous delivery pipeline<font color="#E5E5E5"> how do we</font>

24
00:01:18,570 --> 00:01:23,309
ensure that<font color="#E5E5E5"> as companies</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> as</font>

25
00:01:21,329 --> 00:01:25,589
<font color="#E5E5E5">organizations are going at rapid scale</font>

26
00:01:23,310 --> 00:01:27,810
or deploying<font color="#E5E5E5"> very quickly</font><font color="#CCCCCC"> how do we</font>

27
00:01:25,590 --> 00:01:29,369
<font color="#E5E5E5">ensure that</font><font color="#CCCCCC"> security is part of each and</font>

28
00:01:27,810 --> 00:01:32,369
<font color="#CCCCCC">every deployment or each and</font><font color="#E5E5E5"> every</font>

29
00:01:29,369 --> 00:01:35,159
release<font color="#E5E5E5"> that they do so that's that's</font>

30
00:01:32,369 --> 00:01:37,409
<font color="#E5E5E5">been my chief aim for the last two</font><font color="#CCCCCC"> and a</font>

31
00:01:35,159 --> 00:01:39,719
half years<font color="#CCCCCC"> I also developed</font><font color="#E5E5E5"> a product</font>

32
00:01:37,409 --> 00:01:42,329
<font color="#E5E5E5">called orchestron which is a correlation</font>

33
00:01:39,719 --> 00:01:43,619
<font color="#E5E5E5">and orchestration tool</font><font color="#CCCCCC"> I speak at a</font>

34
00:01:42,329 --> 00:01:46,048
bunch<font color="#E5E5E5"> of conferences do a bunch of</font>

35
00:01:43,619 --> 00:01:50,159
training<font color="#E5E5E5"> that's a quick</font><font color="#CCCCCC"> introduction of</font>

36
00:01:46,049 --> 00:01:53,759
<font color="#E5E5E5">me</font><font color="#CCCCCC"> I got a lot of</font><font color="#E5E5E5"> demos</font><font color="#CCCCCC"> today as you can</font>

37
00:01:50,159 --> 00:01:55,439
<font color="#CCCCCC">see</font><font color="#E5E5E5"> and one of the things with demos is</font>

38
00:01:53,759 --> 00:01:57,329
that they seldom<font color="#E5E5E5"> work so I</font><font color="#CCCCCC"> am just</font>

39
00:01:55,439 --> 00:01:59,850
praying<font color="#CCCCCC"> to the demo gods</font><font color="#E5E5E5"> to make sure</font>

40
00:01:57,329 --> 00:02:02,758
that all<font color="#CCCCCC"> my demos</font><font color="#E5E5E5"> work perfectly fine</font>

41
00:01:59,850 --> 00:02:06,030
today<font color="#CCCCCC"> I have two or three</font><font color="#E5E5E5"> demos and some</font>

42
00:02:02,759 --> 00:02:07,649
of<font color="#E5E5E5"> these demos were a little but we are</font>

43
00:02:06,030 --> 00:02:10,619
<font color="#E5E5E5">till this morning</font><font color="#CCCCCC"> so I'm just hoping</font>

44
00:02:07,649 --> 00:02:12,360
that they go<font color="#CCCCCC"> OK</font><font color="#E5E5E5"> right now so just before</font>

45
00:02:10,619 --> 00:02:14,420
<font color="#E5E5E5">I start so don't don't blame me if</font>

46
00:02:12,360 --> 00:02:17,040
something goes wrong<font color="#CCCCCC"> I've tried my best</font>

47
00:02:14,420 --> 00:02:20,280
<font color="#CCCCCC">alright so today I'm going</font><font color="#E5E5E5"> to be talking</font>

48
00:02:17,040 --> 00:02:22,530
<font color="#E5E5E5">a little bit</font><font color="#CCCCCC"> about deficit</font><font color="#E5E5E5"> ops in the</font>

49
00:02:20,280 --> 00:02:24,560
<font color="#CCCCCC">sense that</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't think I</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to sell</font>

50
00:02:22,530 --> 00:02:26,760
you on<font color="#CCCCCC"> dev psych ops</font><font color="#E5E5E5"> anymore right</font>

51
00:02:24,560 --> 00:02:30,780
<font color="#CCCCCC">pretty</font><font color="#E5E5E5"> much everybody in this conference</font>

52
00:02:26,760 --> 00:02:32,459
<font color="#E5E5E5">is aware</font><font color="#CCCCCC"> of DevOps</font><font color="#E5E5E5"> is aware of them</font>

53
00:02:30,780 --> 00:02:33,390
<font color="#E5E5E5">to a certain extent</font><font color="#CCCCCC"> even if you're</font><font color="#E5E5E5"> doing</font>

54
00:02:32,459 --> 00:02:35,430
it or not<font color="#E5E5E5"> doing it you're aware</font>

55
00:02:33,390 --> 00:02:37,470
<font color="#E5E5E5">something called</font><font color="#CCCCCC"> FC cops</font><font color="#E5E5E5"> and you're</font>

56
00:02:35,430 --> 00:02:39,240
aware<font color="#E5E5E5"> that it has a lot</font><font color="#CCCCCC"> of value for</font>

57
00:02:37,470 --> 00:02:41,280
<font color="#CCCCCC">your own organization for</font><font color="#E5E5E5"> your own</font>

58
00:02:39,240 --> 00:02:42,750
product<font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so I'm not gonna</font>

59
00:02:41,280 --> 00:02:46,830
sell<font color="#CCCCCC"> you on dev</font><font color="#E5E5E5"> checkups but I'm</font><font color="#CCCCCC"> gonna</font>

60
00:02:42,750 --> 00:02:48,840
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about a few key issues that we keep</font>

61
00:02:46,830 --> 00:02:51,440
facing<font color="#E5E5E5"> with</font><font color="#CCCCCC"> deficit cops as well so just</font>

62
00:02:48,840 --> 00:02:54,360
<font color="#CCCCCC">as we had issues previously</font><font color="#E5E5E5"> where</font>

63
00:02:51,440 --> 00:02:55,890
application<font color="#E5E5E5"> security was not moving with</font>

64
00:02:54,360 --> 00:02:57,600
the pipeline<font color="#E5E5E5"> application security</font><font color="#CCCCCC"> of not</font>

65
00:02:55,890 --> 00:02:59,760
keeping<font color="#CCCCCC"> up</font><font color="#E5E5E5"> now we're having a different</font>

66
00:02:57,600 --> 00:03:01,380
set of<font color="#E5E5E5"> issues so in many cases I've</font><font color="#CCCCCC"> seen</font>

67
00:02:59,760 --> 00:03:04,019
these<font color="#E5E5E5"> issues and they've become pretty</font>

68
00:03:01,380 --> 00:03:05,670
pernicious issues<font color="#CCCCCC"> I'm going to talk</font>

69
00:03:04,019 --> 00:03:08,580
<font color="#E5E5E5">about these</font><font color="#CCCCCC"> challenges and</font><font color="#E5E5E5"> then then I'm</font>

70
00:03:05,670 --> 00:03:09,899
going to<font color="#E5E5E5"> try and give you a solution to</font>

71
00:03:08,580 --> 00:03:11,850
these challenges<font color="#CCCCCC"> in the sense that it's</font>

72
00:03:09,900 --> 00:03:13,140
<font color="#E5E5E5">not obviously a silver bullet</font><font color="#CCCCCC"> solution</font>

73
00:03:11,850 --> 00:03:16,200
but<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to introduce something</font>

74
00:03:13,140 --> 00:03:17,609
<font color="#CCCCCC">called the</font><font color="#E5E5E5"> robot framework</font><font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> going</font>

75
00:03:16,200 --> 00:03:20,399
to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about why I believe it's so</font>

76
00:03:17,610 --> 00:03:21,959
great that<font color="#E5E5E5"> this framework exists it's an</font>

77
00:03:20,400 --> 00:03:23,819
<font color="#E5E5E5">open source</font><font color="#CCCCCC"> framework</font><font color="#E5E5E5"> all of you can use</font>

78
00:03:21,959 --> 00:03:26,160
it<font color="#E5E5E5"> in fact I've built a bunch of API</font>

79
00:03:23,819 --> 00:03:26,730
that you guys can fork on github<font color="#E5E5E5"> and use</font>

80
00:03:26,160 --> 00:03:28,859
it as<font color="#E5E5E5"> well</font>

81
00:03:26,730 --> 00:03:31,018
so I'll<font color="#E5E5E5"> talk about the recipe part of</font>

82
00:03:28,860 --> 00:03:34,860
<font color="#E5E5E5">this in a little</font><font color="#CCCCCC"> bit and</font><font color="#E5E5E5"> then end</font><font color="#CCCCCC"> with</font>

83
00:03:31,019 --> 00:03:38,070
some examples and demos<font color="#CCCCCC"> so if you look</font>

84
00:03:34,860 --> 00:03:40,140
at any security in<font color="#CCCCCC"> DevOps pipeline it</font>

85
00:03:38,070 --> 00:03:42,200
kind of looks<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> right so you</font>

86
00:03:40,140 --> 00:03:45,839
typically have all of these different

87
00:03:42,200 --> 00:03:47,369
security checks<font color="#E5E5E5"> that you're doing</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

88
00:03:45,840 --> 00:03:49,140
pipeline<font color="#CCCCCC"> or you should be</font><font color="#E5E5E5"> doing in the</font>

89
00:03:47,370 --> 00:03:51,299
<font color="#CCCCCC">pipeline you</font><font color="#E5E5E5"> start off with</font><font color="#CCCCCC"> threat</font>

90
00:03:49,140 --> 00:03:53,518
modeling then you have<font color="#E5E5E5"> sassed and source</font>

91
00:03:51,299 --> 00:03:56,190
composition scanning you have<font color="#CCCCCC"> vast</font><font color="#E5E5E5"> I</font>

92
00:03:53,519 --> 00:03:58,560
asked in obviously<font color="#CCCCCC"> in</font><font color="#E5E5E5"> configuration just</font>

93
00:03:56,190 --> 00:04:00,750
<font color="#E5E5E5">you before you deploy</font><font color="#CCCCCC"> you do a bunch of</font>

94
00:03:58,560 --> 00:04:02,280
security<font color="#E5E5E5"> checks and then once you deploy</font>

95
00:04:00,750 --> 00:04:03,930
you have your monitoring kick in your

96
00:04:02,280 --> 00:04:05,940
threat intelligence threat detection so

97
00:04:03,930 --> 00:04:08,430
on and so forth<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> logging so on and</font>

98
00:04:05,940 --> 00:04:10,769
so forth<font color="#CCCCCC"> that kicks in</font><font color="#E5E5E5"> so this is great</font>

99
00:04:08,430 --> 00:04:12,390
and a<font color="#E5E5E5"> lot of</font><font color="#CCCCCC"> organizations</font><font color="#E5E5E5"> have taken</font><font color="#CCCCCC"> to</font>

100
00:04:10,769 --> 00:04:14,730
this over the last two years<font color="#CCCCCC"> very well</font>

101
00:04:12,390 --> 00:04:17,010
<font color="#E5E5E5">some of them better than others so</font>

102
00:04:14,730 --> 00:04:18,418
that's why we started<font color="#CCCCCC"> doing security at</font>

103
00:04:17,010 --> 00:04:21,089
different<font color="#E5E5E5"> stages in the pipeline</font>

104
00:04:18,418 --> 00:04:22,740
different stages in<font color="#CCCCCC"> urs DLC</font><font color="#E5E5E5"> so we have</font>

105
00:04:21,089 --> 00:04:24,000
threat modeling we have<font color="#CCCCCC"> sass we have we</font>

106
00:04:22,740 --> 00:04:25,140
have a bunch of process<font color="#CCCCCC"> obviously</font>

107
00:04:24,000 --> 00:04:27,660
different organizations do it

108
00:04:25,140 --> 00:04:30,240
differently but<font color="#E5E5E5"> this is sort of broadly</font>

109
00:04:27,660 --> 00:04:31,800
how most organizations do it at<font color="#E5E5E5"> least if</font>

110
00:04:30,240 --> 00:04:34,979
they're trying<font color="#E5E5E5"> to do things in a</font>

111
00:04:31,800 --> 00:04:36,600
<font color="#E5E5E5">pipeline</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is great right so</font>

112
00:04:34,979 --> 00:04:38,719
everything is great so what we're doing

113
00:04:36,600 --> 00:04:41,340
is at<font color="#E5E5E5"> least trying to find and fix</font>

114
00:04:38,720 --> 00:04:43,200
<font color="#E5E5E5">security bugs as early in the lifecycle</font>

115
00:04:41,340 --> 00:04:44,429
as possible<font color="#E5E5E5"> that's something we want</font><font color="#CCCCCC"> to</font>

116
00:04:43,200 --> 00:04:46,250
<font color="#E5E5E5">do because before</font>

117
00:04:44,430 --> 00:04:49,020
goes to production we want to be able to

118
00:04:46,250 --> 00:04:50,580
<font color="#E5E5E5">identify security issues react on</font>

119
00:04:49,020 --> 00:04:53,010
security<font color="#CCCCCC"> issues and at least solve as</font>

120
00:04:50,580 --> 00:04:55,500
many<font color="#CCCCCC"> as possible we also want security</font>

121
00:04:53,010 --> 00:04:57,810
to<font color="#E5E5E5"> integrate with your</font><font color="#CCCCCC"> sdlc</font><font color="#E5E5E5"> so if you</font>

122
00:04:55,500 --> 00:04:59,430
are doing agile<font color="#E5E5E5"> or whatever version of</font>

123
00:04:57,810 --> 00:05:01,140
agile or souped-up agile that<font color="#E5E5E5"> you're</font>

124
00:04:59,430 --> 00:05:03,570
<font color="#E5E5E5">doing you want it to integrate with it</font>

125
00:05:01,140 --> 00:05:05,909
<font color="#E5E5E5">and obviously</font><font color="#CCCCCC"> you want security to</font><font color="#E5E5E5"> work</font>

126
00:05:03,570 --> 00:05:08,400
seamlessly<font color="#E5E5E5"> with your continuous delivery</font>

127
00:05:05,910 --> 00:05:10,080
pipeline<font color="#CCCCCC"> so if you have a CI pipeline</font>

128
00:05:08,400 --> 00:05:12,060
you want your<font color="#E5E5E5"> security tools to run as</font>

129
00:05:10,080 --> 00:05:13,950
<font color="#CCCCCC">part of</font><font color="#E5E5E5"> that CI pipeline give you some</font>

130
00:05:12,060 --> 00:05:16,470
results at the end<font color="#CCCCCC"> of the day some of</font>

131
00:05:13,950 --> 00:05:17,820
<font color="#E5E5E5">its good some</font><font color="#CCCCCC"> of its bad but it really</font>

132
00:05:16,470 --> 00:05:19,470
<font color="#E5E5E5">depends a lot of organizations have</font>

133
00:05:17,820 --> 00:05:22,469
started<font color="#CCCCCC"> at</font><font color="#E5E5E5"> least working towards this</font>

134
00:05:19,470 --> 00:05:24,870
goal<font color="#E5E5E5"> if not being complete compliance</font>

135
00:05:22,470 --> 00:05:28,470
with it but then security folks are like

136
00:05:24,870 --> 00:05:31,440
this this is what<font color="#E5E5E5"> security folks say</font>

137
00:05:28,470 --> 00:05:35,040
when they're<font color="#CCCCCC"> presented with</font><font color="#E5E5E5"> something</font>

138
00:05:31,440 --> 00:05:36,540
<font color="#E5E5E5">like this and how many</font><font color="#CCCCCC"> of you are</font><font color="#E5E5E5"> a part</font>

139
00:05:35,040 --> 00:05:38,730
of an application<font color="#E5E5E5"> security team within</font>

140
00:05:36,540 --> 00:05:40,050
<font color="#E5E5E5">the organization how many of you feel</font>

141
00:05:38,730 --> 00:05:44,160
there<font color="#CCCCCC"> are enough application security</font>

142
00:05:40,050 --> 00:05:47,880
<font color="#E5E5E5">folks in your team</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> one you</font><font color="#E5E5E5"> are a</font>

143
00:05:44,160 --> 00:05:50,010
rare exception<font color="#E5E5E5"> but most places you would</font>

144
00:05:47,880 --> 00:05:52,650
see that there is<font color="#CCCCCC"> a massive shortage of</font>

145
00:05:50,010 --> 00:05:54,330
application security<font color="#E5E5E5"> teams right wrong</font>

146
00:05:52,650 --> 00:05:57,479
<font color="#CCCCCC">application security</font><font color="#E5E5E5"> folks within</font><font color="#CCCCCC"> the</font>

147
00:05:54,330 --> 00:05:59,640
team<font color="#E5E5E5"> so recently I was speaking to this</font>

148
00:05:57,480 --> 00:06:01,320
company which had 50 agile teams and

149
00:05:59,640 --> 00:06:04,229
they had<font color="#CCCCCC"> two application security</font><font color="#E5E5E5"> folks</font>

150
00:06:01,320 --> 00:06:06,599
<font color="#E5E5E5">so which means that it you tend</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

151
00:06:04,230 --> 00:06:07,860
<font color="#CCCCCC">very quickly</font><font color="#E5E5E5"> overwhelmed with the</font><font color="#CCCCCC"> amount</font>

152
00:06:06,600 --> 00:06:09,630
of<font color="#E5E5E5"> work</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the applicants security</font><font color="#CCCCCC"> with</font>

153
00:06:07,860 --> 00:06:11,220
you need to<font color="#CCCCCC"> test continuously for</font>

154
00:06:09,630 --> 00:06:14,250
security<font color="#E5E5E5"> that's going to be a really</font>

155
00:06:11,220 --> 00:06:16,050
<font color="#E5E5E5">really big problem</font><font color="#CCCCCC"> right so so let's</font>

156
00:06:14,250 --> 00:06:18,780
let's get real let's look at some<font color="#CCCCCC"> of the</font>

157
00:06:16,050 --> 00:06:20,760
key issues<font color="#CCCCCC"> that I've seen with abstract</font>

158
00:06:18,780 --> 00:06:24,179
teams and some of you might you<font color="#CCCCCC"> know</font>

159
00:06:20,760 --> 00:06:25,770
might<font color="#E5E5E5"> relate to this as well we have</font>

160
00:06:24,180 --> 00:06:27,330
some<font color="#E5E5E5"> very serious issues let's talk</font>

161
00:06:25,770 --> 00:06:29,159
<font color="#CCCCCC">about some of the serious issues that</font>

162
00:06:27,330 --> 00:06:30,419
we're<font color="#CCCCCC"> facing</font><font color="#E5E5E5"> especially</font><font color="#CCCCCC"> when it comes to</font>

163
00:06:29,160 --> 00:06:32,640
<font color="#E5E5E5">all this sounds great when you're</font>

164
00:06:30,420 --> 00:06:34,590
talking<font color="#CCCCCC"> about pipelines and automating</font>

165
00:06:32,640 --> 00:06:36,599
stuff in the<font color="#E5E5E5"> pipeline and making sure</font>

166
00:06:34,590 --> 00:06:38,159
that<font color="#E5E5E5"> your - your</font><font color="#CCCCCC"> SAS your scanners all</font>

167
00:06:36,600 --> 00:06:39,570
of it runs<font color="#E5E5E5"> very nicely within the</font>

168
00:06:38,160 --> 00:06:43,520
pipeline smoothly within<font color="#E5E5E5"> the pipeline</font>

169
00:06:39,570 --> 00:06:45,930
what we have some major<font color="#E5E5E5"> issues right now</font>

170
00:06:43,520 --> 00:06:48,210
<font color="#E5E5E5">application security</font><font color="#CCCCCC"> tends</font><font color="#E5E5E5"> to get</font>

171
00:06:45,930 --> 00:06:51,360
<font color="#E5E5E5">overwhelmed very quickly simply for the</font>

172
00:06:48,210 --> 00:06:52,979
reasons I stated<font color="#CCCCCC"> before right because an</font>

173
00:06:51,360 --> 00:06:55,350
application security<font color="#E5E5E5"> team is</font><font color="#CCCCCC"> usually a</font>

174
00:06:52,980 --> 00:06:57,990
small<font color="#E5E5E5"> group and yes</font><font color="#CCCCCC"> they're they've got</font>

175
00:06:55,350 --> 00:07:00,390
great skills they've got a lot of

176
00:06:57,990 --> 00:07:02,760
periods they do great jobs at<font color="#CCCCCC"> pentesting</font>

177
00:07:00,390 --> 00:07:04,890
<font color="#E5E5E5">but they get quickly overwhelmed simply</font>

178
00:07:02,760 --> 00:07:06,860
because you<font color="#CCCCCC"> have to do all</font><font color="#E5E5E5"> that you will</font>

179
00:07:04,890 --> 00:07:09,810
doing as a<font color="#CCCCCC"> gatekeeper</font><font color="#E5E5E5"> process</font>

180
00:07:06,860 --> 00:07:11,370
continuously across<font color="#E5E5E5"> all your products</font>

181
00:07:09,810 --> 00:07:12,870
life cycles so let's say you have<font color="#E5E5E5"> five</font>

182
00:07:11,370 --> 00:07:15,030
products<font color="#E5E5E5"> you have one application</font>

183
00:07:12,870 --> 00:07:16,530
<font color="#CCCCCC">security team that is</font><font color="#E5E5E5"> working with all</font>

184
00:07:15,030 --> 00:07:18,059
five products to make sure that they get

185
00:07:16,530 --> 00:07:19,919
released on time<font color="#E5E5E5"> and they're</font>

186
00:07:18,060 --> 00:07:21,150
continuously released so you have a lot

187
00:07:19,920 --> 00:07:23,070
of<font color="#E5E5E5"> these deployments happening</font>

188
00:07:21,150 --> 00:07:25,500
continuously<font color="#CCCCCC"> you have security reviews</font>

189
00:07:23,070 --> 00:07:27,300
your threat modeling you have to triage

190
00:07:25,500 --> 00:07:29,130
bug bounty results as well<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font>

191
00:07:27,300 --> 00:07:31,050
application security<font color="#E5E5E5"> teams today are</font>

192
00:07:29,130 --> 00:07:32,820
spending a<font color="#E5E5E5"> lot of time</font><font color="#CCCCCC"> triaging</font><font color="#E5E5E5"> bug</font>

193
00:07:31,050 --> 00:07:34,260
bounty results and saying ok<font color="#E5E5E5"> this is</font>

194
00:07:32,820 --> 00:07:36,480
real this is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> just some</font>

195
00:07:34,260 --> 00:07:38,400
<font color="#E5E5E5">random you know junk that we've received</font>

196
00:07:36,480 --> 00:07:39,990
but<font color="#E5E5E5"> this is really a</font><font color="#CCCCCC"> high-value</font><font color="#E5E5E5"> finding</font>

197
00:07:38,400 --> 00:07:42,239
all of<font color="#E5E5E5"> these things are happening</font><font color="#CCCCCC"> and</font>

198
00:07:39,990 --> 00:07:45,270
application<font color="#CCCCCC"> security is at the epicenter</font>

199
00:07:42,240 --> 00:07:46,320
<font color="#CCCCCC">of many of these</font><font color="#E5E5E5"> issues so security</font>

200
00:07:45,270 --> 00:07:49,200
assessments just<font color="#CCCCCC"> to name a few</font>

201
00:07:46,320 --> 00:07:51,480
so you<font color="#E5E5E5"> really have a lot</font><font color="#CCCCCC"> of tasks that</font>

202
00:07:49,200 --> 00:07:53,430
used to<font color="#E5E5E5"> be you know once in a gateway</font>

203
00:07:51,480 --> 00:07:55,440
yes that was a different problem but now

204
00:07:53,430 --> 00:07:58,050
you have it continuously<font color="#E5E5E5"> and a lot of</font>

205
00:07:55,440 --> 00:07:59,610
<font color="#E5E5E5">application security teams aren't</font><font color="#CCCCCC"> able</font>

206
00:07:58,050 --> 00:08:01,260
<font color="#CCCCCC">to scale</font><font color="#E5E5E5"> with that and you're finding</font>

207
00:07:59,610 --> 00:08:02,610
<font color="#E5E5E5">that and especially with the shortage of</font>

208
00:08:01,260 --> 00:08:05,190
talent<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> sure all of you</font><font color="#CCCCCC"> know this</font>

209
00:08:02,610 --> 00:08:06,480
that application<font color="#CCCCCC"> security teams are not</font>

210
00:08:05,190 --> 00:08:08,480
able<font color="#CCCCCC"> to scale they're getting quickly</font>

211
00:08:06,480 --> 00:08:11,510
overwhelmed by a lot of this stuff

212
00:08:08,480 --> 00:08:15,360
automating<font color="#E5E5E5"> application</font><font color="#CCCCCC"> security is</font>

213
00:08:11,510 --> 00:08:17,909
challenging as<font color="#CCCCCC"> well right now has</font><font color="#E5E5E5"> any</font>

214
00:08:15,360 --> 00:08:21,090
<font color="#CCCCCC">one of</font><font color="#E5E5E5"> you try to automate some</font><font color="#CCCCCC"> tools</font>

215
00:08:17,910 --> 00:08:22,680
<font color="#E5E5E5">like any tools with an API</font><font color="#CCCCCC"> you'd see</font>

216
00:08:21,090 --> 00:08:24,359
that different tools have different

217
00:08:22,680 --> 00:08:25,950
challenges<font color="#CCCCCC"> right</font><font color="#E5E5E5"> if you work with zap</font>

218
00:08:24,360 --> 00:08:27,120
you have one set of challenges<font color="#E5E5E5"> you work</font>

219
00:08:25,950 --> 00:08:29,490
<font color="#E5E5E5">with Bob or</font><font color="#CCCCCC"> you work with some other</font>

220
00:08:27,120 --> 00:08:31,830
<font color="#E5E5E5">tool X Y Z you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> different sets of</font>

221
00:08:29,490 --> 00:08:35,460
challenges<font color="#CCCCCC"> you really have yes these</font>

222
00:08:31,830 --> 00:08:37,140
tools do a great job when you are<font color="#E5E5E5"> a</font>

223
00:08:35,460 --> 00:08:38,820
<font color="#E5E5E5">manual pen tester</font><font color="#CCCCCC"> you're working with</font>

224
00:08:37,140 --> 00:08:41,880
these tools<font color="#CCCCCC"> or these tools were great</font>

225
00:08:38,820 --> 00:08:43,440
job in one sphere or in one type of<font color="#E5E5E5"> a</font>

226
00:08:41,880 --> 00:08:45,450
check that they do or one set of<font color="#E5E5E5"> checks</font>

227
00:08:43,440 --> 00:08:47,640
<font color="#E5E5E5">that they do so you really have a lot of</font>

228
00:08:45,450 --> 00:08:50,190
<font color="#E5E5E5">tools</font><font color="#CCCCCC"> that you need to automate</font><font color="#E5E5E5"> and you</font>

229
00:08:47,640 --> 00:08:53,040
need to get working<font color="#E5E5E5"> in the pipeline</font><font color="#CCCCCC"> and</font>

230
00:08:50,190 --> 00:08:54,510
some of this is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little complex so for</font>

231
00:08:53,040 --> 00:08:56,579
instance<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> know I</font><font color="#E5E5E5"> mean if you have</font>

232
00:08:54,510 --> 00:08:58,319
dealt with<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> some of these tools</font>

233
00:08:56,580 --> 00:09:01,020
<font color="#E5E5E5">API some of that is not very well</font>

234
00:08:58,320 --> 00:09:02,610
documented<font color="#E5E5E5"> some of it is very well</font>

235
00:09:01,020 --> 00:09:04,470
documented but doesn't work<font color="#E5E5E5"> quite</font><font color="#CCCCCC"> as</font>

236
00:09:02,610 --> 00:09:06,930
what<font color="#E5E5E5"> they've described in the document</font>

237
00:09:04,470 --> 00:09:09,360
<font color="#CCCCCC">some</font><font color="#E5E5E5"> of it doesn't work with your</font>

238
00:09:06,930 --> 00:09:10,329
platform<font color="#E5E5E5"> some of it does not work with</font>

239
00:09:09,360 --> 00:09:11,439
<font color="#E5E5E5">you know</font>

240
00:09:10,329 --> 00:09:13,569
with a bunch<font color="#E5E5E5"> of things so you</font><font color="#CCCCCC"> really</font>

241
00:09:11,439 --> 00:09:14,920
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> kind of scrounge around on the</font>

242
00:09:13,569 --> 00:09:16,779
<font color="#E5E5E5">internet try and figure out okay</font><font color="#CCCCCC"> this</font>

243
00:09:14,920 --> 00:09:18,160
<font color="#E5E5E5">works this works</font><font color="#CCCCCC"> this is somehow not</font>

244
00:09:16,779 --> 00:09:20,519
working so let me<font color="#E5E5E5"> ask a</font><font color="#CCCCCC"> question</font><font color="#E5E5E5"> and</font>

245
00:09:18,160 --> 00:09:22,779
then comes back<font color="#E5E5E5"> a lot of time later so</font>

246
00:09:20,519 --> 00:09:25,149
application security automation is not

247
00:09:22,779 --> 00:09:27,489
as easy<font color="#CCCCCC"> as you think</font>

248
00:09:25,149 --> 00:09:29,619
yes<font color="#E5E5E5"> in some tools</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> made it easier</font>

249
00:09:27,489 --> 00:09:32,319
but<font color="#E5E5E5"> in some products</font><font color="#CCCCCC"> they made it</font><font color="#E5E5E5"> more</font>

250
00:09:29,619 --> 00:09:35,980
<font color="#E5E5E5">difficult</font><font color="#CCCCCC"> the other problem is with</font>

251
00:09:32,319 --> 00:09:37,509
custom security<font color="#CCCCCC"> flaws</font><font color="#E5E5E5"> right now yes</font><font color="#CCCCCC"> your</font>

252
00:09:35,980 --> 00:09:41,739
<font color="#CCCCCC">zap your burpee are all of</font><font color="#E5E5E5"> these tools</font>

253
00:09:37,509 --> 00:09:46,089
they find some great flowers<font color="#CCCCCC"> sequel</font>

254
00:09:41,739 --> 00:09:47,730
injection<font color="#E5E5E5"> xsrf or</font><font color="#CCCCCC"> SS</font><font color="#E5E5E5"> RF for XML external</font>

255
00:09:46,089 --> 00:09:50,079
entities<font color="#E5E5E5"> they find a lot</font><font color="#CCCCCC"> of these great</font>

256
00:09:47,730 --> 00:09:52,569
<font color="#E5E5E5">security flaws but let</font><font color="#CCCCCC"> us say you have</font>

257
00:09:50,079 --> 00:09:55,269
<font color="#E5E5E5">this custom authorization button or</font>

258
00:09:52,569 --> 00:09:56,949
which<font color="#CCCCCC"> is essentially an ID</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> bug</font><font color="#E5E5E5"> or</font>

259
00:09:55,269 --> 00:09:59,350
<font color="#E5E5E5">some other kind of bug which is very</font>

260
00:09:56,949 --> 00:10:01,959
<font color="#E5E5E5">very specific</font><font color="#CCCCCC"> to your business logic to</font>

261
00:09:59,350 --> 00:10:04,600
<font color="#CCCCCC">our platform to our application then</font>

262
00:10:01,959 --> 00:10:06,670
these<font color="#CCCCCC"> are not really in</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> right and</font>

263
00:10:04,600 --> 00:10:08,199
these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> pretty important so you</font>

264
00:10:06,670 --> 00:10:10,209
have all of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> things coming from bug</font>

265
00:10:08,199 --> 00:10:12,040
bounties<font color="#E5E5E5"> or from internal</font><font color="#CCCCCC"> pen tests or</font>

266
00:10:10,209 --> 00:10:14,649
external pen<font color="#CCCCCC"> tests and they essentially</font>

267
00:10:12,040 --> 00:10:16,660
become<font color="#E5E5E5"> PDF reports or JIRA tickets</font><font color="#CCCCCC"> that</font>

268
00:10:14,649 --> 00:10:19,089
may or may<font color="#CCCCCC"> not get solved</font><font color="#E5E5E5"> depending upon</font>

269
00:10:16,660 --> 00:10:22,029
what kind<font color="#CCCCCC"> of engineering team you have</font>

270
00:10:19,089 --> 00:10:24,100
so custom security<font color="#CCCCCC"> flaws are hard to</font>

271
00:10:22,029 --> 00:10:26,379
weave into<font color="#CCCCCC"> a</font><font color="#E5E5E5"> fabric especially because</font>

272
00:10:24,100 --> 00:10:27,779
<font color="#E5E5E5">these tools do their thing but custom</font>

273
00:10:26,379 --> 00:10:30,189
security<font color="#CCCCCC"> flaws are still not</font>

274
00:10:27,779 --> 00:10:32,980
incorporated into<font color="#E5E5E5"> that common fabric of</font>

275
00:10:30,189 --> 00:10:35,949
security automation so in<font color="#E5E5E5"> short we are</font>

276
00:10:32,980 --> 00:10:39,220
<font color="#E5E5E5">essentially looking at this right so we</font>

277
00:10:35,949 --> 00:10:42,729
have application delivery<font color="#CCCCCC"> which is going</font>

278
00:10:39,220 --> 00:10:44,829
at a really rapid pace<font color="#E5E5E5"> and we have</font>

279
00:10:42,730 --> 00:10:47,049
application security constantly<font color="#E5E5E5"> trying</font>

280
00:10:44,829 --> 00:10:49,359
<font color="#E5E5E5">to catch up so</font><font color="#CCCCCC"> yes previously we</font><font color="#E5E5E5"> were</font>

281
00:10:47,049 --> 00:10:51,160
not being I<font color="#CCCCCC"> mean we were trying</font><font color="#E5E5E5"> to catch</font>

282
00:10:49,360 --> 00:10:52,929
up in a different<font color="#CCCCCC"> way</font><font color="#E5E5E5"> but now we're</font>

283
00:10:51,160 --> 00:10:55,540
<font color="#E5E5E5">doing different</font><font color="#CCCCCC"> things to try</font><font color="#E5E5E5"> and catch</font>

284
00:10:52,929 --> 00:10:57,129
up so we're still<font color="#E5E5E5"> kind of short on this</font>

285
00:10:55,540 --> 00:10:58,329
so<font color="#E5E5E5"> let's look at what do we need</font><font color="#CCCCCC"> so</font>

286
00:10:57,129 --> 00:11:01,239
let's<font color="#CCCCCC"> look at some</font><font color="#E5E5E5"> of the potential</font>

287
00:10:58,329 --> 00:11:02,469
<font color="#CCCCCC">solutions</font><font color="#E5E5E5"> for what we need to solve some</font>

288
00:11:01,239 --> 00:11:03,730
of these problems yes obviously<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> not</font>

289
00:11:02,470 --> 00:11:06,489
saying I have all solutions<font color="#E5E5E5"> but</font>

290
00:11:03,730 --> 00:11:08,619
definitely some of<font color="#E5E5E5"> these</font><font color="#CCCCCC"> solutions</font><font color="#E5E5E5"> we</font>

291
00:11:06,489 --> 00:11:11,860
can<font color="#E5E5E5"> tackle today so let's talk about</font>

292
00:11:08,619 --> 00:11:15,069
<font color="#E5E5E5">these</font><font color="#CCCCCC"> three things Engineering run</font>

293
00:11:11,860 --> 00:11:17,139
localized security and engagement<font color="#E5E5E5"> with</font>

294
00:11:15,069 --> 00:11:18,759
security teams and QA teams and I'll

295
00:11:17,139 --> 00:11:20,230
talk about make security<font color="#CCCCCC"> a first-class</font>

296
00:11:18,759 --> 00:11:24,130
<font color="#CCCCCC">citizen and I'll talk about how</font><font color="#E5E5E5"> to do</font>

297
00:11:20,230 --> 00:11:26,290
that<font color="#E5E5E5"> so ideally you want your</font>

298
00:11:24,130 --> 00:11:30,010
<font color="#E5E5E5">application security teams focused on</font>

299
00:11:26,290 --> 00:11:32,020
finding<font color="#E5E5E5"> the really more complex big</font>

300
00:11:30,010 --> 00:11:34,120
stuff<font color="#E5E5E5"> right in the</font><font color="#CCCCCC"> sense that if</font><font color="#E5E5E5"> you</font>

301
00:11:32,020 --> 00:11:36,069
<font color="#CCCCCC">have security tools that can take care</font>

302
00:11:34,120 --> 00:11:37,870
of<font color="#CCCCCC"> all the low-hanging fruit you really</font>

303
00:11:36,070 --> 00:11:40,390
want<font color="#E5E5E5"> there are security teams focused on</font>

304
00:11:37,870 --> 00:11:42,010
finding<font color="#CCCCCC"> that big crypto flaw or</font><font color="#E5E5E5"> that big</font>

305
00:11:40,390 --> 00:11:43,930
<font color="#E5E5E5">authorization flood that thing that</font>

306
00:11:42,010 --> 00:11:47,130
coming comes up from your bug bounty

307
00:11:43,930 --> 00:11:50,079
which is you know P<font color="#E5E5E5"> one kind of a flower</font>

308
00:11:47,130 --> 00:11:52,210
<font color="#CCCCCC">something</font><font color="#E5E5E5"> major so</font><font color="#CCCCCC"> you really want your</font>

309
00:11:50,080 --> 00:11:54,700
pen testing teams to find<font color="#E5E5E5"> more complex</font>

310
00:11:52,210 --> 00:11:56,710
<font color="#CCCCCC">flaws</font><font color="#E5E5E5"> and instead of taking those</font>

311
00:11:54,700 --> 00:11:58,450
complex<font color="#E5E5E5"> flowers writing up PDF reports</font>

312
00:11:56,710 --> 00:12:01,960
and sending it over convert them into

313
00:11:58,450 --> 00:12:03,610
security regression scripts<font color="#E5E5E5"> right so I</font>

314
00:12:01,960 --> 00:12:05,290
would<font color="#CCCCCC"> be great right just imagine if you</font>

315
00:12:03,610 --> 00:12:07,360
could<font color="#E5E5E5"> create a security regression</font>

316
00:12:05,290 --> 00:12:09,430
script<font color="#CCCCCC"> that would run the same way and</font>

317
00:12:07,360 --> 00:12:10,870
then hand it over<font color="#E5E5E5"> or run it as part of</font>

318
00:12:09,430 --> 00:12:13,930
<font color="#E5E5E5">your CI or give it to your developer and</font>

319
00:12:10,870 --> 00:12:15,400
say run<font color="#CCCCCC"> this if this script still works</font>

320
00:12:13,930 --> 00:12:18,130
that<font color="#E5E5E5"> means you're not fixed</font><font color="#CCCCCC"> the bug if</font>

321
00:12:15,400 --> 00:12:20,290
the script has not worked then<font color="#E5E5E5"> you fix</font>

322
00:12:18,130 --> 00:12:22,450
<font color="#E5E5E5">the bug so it means that you</font><font color="#CCCCCC"> have some</font>

323
00:12:20,290 --> 00:12:24,250
<font color="#E5E5E5">kind of a regression capability and get</font>

324
00:12:22,450 --> 00:12:25,930
engineering involved in application

325
00:12:24,250 --> 00:12:27,250
security automation now this is easier

326
00:12:25,930 --> 00:12:31,060
than<font color="#CCCCCC"> it</font><font color="#E5E5E5"> sounds</font><font color="#CCCCCC"> because engineering</font>

327
00:12:27,250 --> 00:12:32,800
already has a large set of tasks that

328
00:12:31,060 --> 00:12:36,010
<font color="#E5E5E5">they</font><font color="#CCCCCC"> need to do so let's let's see how</font>

329
00:12:32,800 --> 00:12:38,469
we can do this the<font color="#E5E5E5"> other thing that I</font>

330
00:12:36,010 --> 00:12:40,660
feel we should<font color="#E5E5E5"> also be doing is get QA</font>

331
00:12:38,470 --> 00:12:44,110
or quality engineering<font color="#E5E5E5"> involved and that</font>

332
00:12:40,660 --> 00:12:46,780
I think<font color="#E5E5E5"> was discussed in this morning in</font>

333
00:12:44,110 --> 00:12:49,840
the keynote as well<font color="#E5E5E5"> that QA it does a</font>

334
00:12:46,780 --> 00:12:51,069
lot<font color="#E5E5E5"> of automation already right now if</font>

335
00:12:49,840 --> 00:12:52,720
you have a QA team they're probably

336
00:12:51,070 --> 00:12:54,490
doing<font color="#CCCCCC"> a lot of selenium they're probably</font>

337
00:12:52,720 --> 00:12:56,560
doing<font color="#CCCCCC"> a lot of software test automation</font>

338
00:12:54,490 --> 00:12:58,870
<font color="#CCCCCC">they're running a bunch</font><font color="#E5E5E5"> of tools and</font>

339
00:12:56,560 --> 00:13:01,050
<font color="#CCCCCC">they're there they already have some</font>

340
00:12:58,870 --> 00:13:03,220
great expertise with automation

341
00:13:01,050 --> 00:13:06,459
unfortunately security teams do not

342
00:13:03,220 --> 00:13:09,250
<font color="#E5E5E5">leverage this capability</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> times</font>

343
00:13:06,460 --> 00:13:10,660
security teams<font color="#E5E5E5"> kind of just sideline</font>

344
00:13:09,250 --> 00:13:12,340
<font color="#E5E5E5">adoro they don't even think about this</font>

345
00:13:10,660 --> 00:13:14,770
is<font color="#E5E5E5"> I don't</font><font color="#CCCCCC"> see that</font><font color="#E5E5E5"> these two processes</font>

346
00:13:12,340 --> 00:13:16,810
kind of meet in<font color="#CCCCCC"> the middle</font><font color="#E5E5E5"> so it would</font>

347
00:13:14,770 --> 00:13:18,310
<font color="#E5E5E5">be</font><font color="#CCCCCC"> great if we</font><font color="#E5E5E5"> could kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> get them on</font>

348
00:13:16,810 --> 00:13:19,390
<font color="#CCCCCC">board</font><font color="#E5E5E5"> simply because if we get them on</font>

349
00:13:18,310 --> 00:13:22,420
<font color="#CCCCCC">board you are</font><font color="#E5E5E5"> increasing</font><font color="#CCCCCC"> your</font>

350
00:13:19,390 --> 00:13:23,980
capabilities<font color="#E5E5E5"> at the same time you are</font>

351
00:13:22,420 --> 00:13:25,569
<font color="#CCCCCC">making it a part of the engineering</font>

352
00:13:23,980 --> 00:13:27,700
<font color="#E5E5E5">process because right now security</font><font color="#CCCCCC"> is</font>

353
00:13:25,570 --> 00:13:29,980
seen as a kind of a separate process in

354
00:13:27,700 --> 00:13:32,470
itself by engaging with QA and quality

355
00:13:29,980 --> 00:13:34,360
<font color="#E5E5E5">engineering we can make them part of</font>

356
00:13:32,470 --> 00:13:36,460
that same<font color="#E5E5E5"> security test process that</font>

357
00:13:34,360 --> 00:13:38,380
would<font color="#E5E5E5"> be there so it would be great</font>

358
00:13:36,460 --> 00:13:40,120
it would be<font color="#E5E5E5"> even better if we give them</font>

359
00:13:38,380 --> 00:13:42,100
like<font color="#E5E5E5"> a single</font><font color="#CCCCCC"> fabric in the sense that</font>

360
00:13:40,120 --> 00:13:43,420
<font color="#E5E5E5">oh I don't have to run this</font><font color="#CCCCCC"> script for</font>

361
00:13:42,100 --> 00:13:45,130
<font color="#CCCCCC">this tool I</font><font color="#E5E5E5"> don't have to run this</font>

362
00:13:43,420 --> 00:13:47,050
<font color="#E5E5E5">script I can</font><font color="#CCCCCC"> run everything</font><font color="#E5E5E5"> as part of</font>

363
00:13:45,130 --> 00:13:50,760
the same framework<font color="#E5E5E5"> or as part of the</font>

364
00:13:47,050 --> 00:13:53,469
same<font color="#E5E5E5"> you know as part of the same fabric</font>

365
00:13:50,760 --> 00:13:55,990
<font color="#E5E5E5">so you look at the test frameworks out</font>

366
00:13:53,470 --> 00:13:58,120
<font color="#E5E5E5">there</font><font color="#CCCCCC"> you have a bunch of them</font><font color="#E5E5E5"> right</font>

367
00:13:55,990 --> 00:14:00,070
you have selenium you have of<font color="#E5E5E5"> course</font>

368
00:13:58,120 --> 00:14:01,360
these<font color="#E5E5E5"> are extensions many of these are</font>

369
00:14:00,070 --> 00:14:03,670
<font color="#E5E5E5">extensions of selenium</font>

370
00:14:01,360 --> 00:14:06,100
except maybe puppeteer which is a<font color="#E5E5E5"> Google</font>

371
00:14:03,670 --> 00:14:08,050
<font color="#E5E5E5">Chrome specific test automation</font>

372
00:14:06,100 --> 00:14:10,510
framework<font color="#CCCCCC"> you really have a lot of these</font>

373
00:14:08,050 --> 00:14:12,339
frameworks<font color="#CCCCCC"> that your QA teams are using</font>

374
00:14:10,510 --> 00:14:13,870
<font color="#CCCCCC">and some of these frameworks are a</font>

375
00:14:12,340 --> 00:14:15,490
<font color="#E5E5E5">little hard to understand especially for</font>

376
00:14:13,870 --> 00:14:17,290
security folks because you are<font color="#E5E5E5"> focused</font>

377
00:14:15,490 --> 00:14:18,850
<font color="#E5E5E5">on different things some</font><font color="#CCCCCC"> of these</font>

378
00:14:17,290 --> 00:14:20,380
<font color="#CCCCCC">frameworks are easy to understand but</font>

379
00:14:18,850 --> 00:14:23,350
<font color="#E5E5E5">you really have a lot</font><font color="#CCCCCC"> of frameworks</font>

380
00:14:20,380 --> 00:14:25,510
<font color="#E5E5E5">today so I want to introduce a framework</font>

381
00:14:23,350 --> 00:14:27,820
that essentially would try<font color="#CCCCCC"> and create</font>

382
00:14:25,510 --> 00:14:30,340
this single fabric<font color="#E5E5E5"> so what I'm trying</font><font color="#CCCCCC"> to</font>

383
00:14:27,820 --> 00:14:32,680
say is you run software<font color="#E5E5E5"> test automation</font>

384
00:14:30,340 --> 00:14:34,930
and<font color="#CCCCCC"> security testing on a single</font>

385
00:14:32,680 --> 00:14:37,000
<font color="#CCCCCC">framework on the same fabric weave it</font>

386
00:14:34,930 --> 00:14:39,339
into<font color="#E5E5E5"> the same fabric so ideally speaking</font>

387
00:14:37,000 --> 00:14:41,530
<font color="#E5E5E5">create test Suites that combine</font><font color="#CCCCCC"> the</font>

388
00:14:39,340 --> 00:14:43,570
capabilities<font color="#CCCCCC"> of test automation</font><font color="#E5E5E5"> which is</font>

389
00:14:41,530 --> 00:14:45,610
your selenium or any other test

390
00:14:43,570 --> 00:14:47,140
automation tools that you<font color="#CCCCCC"> have with</font>

391
00:14:45,610 --> 00:14:49,240
security testing<font color="#E5E5E5"> tools so just imagine</font>

392
00:14:47,140 --> 00:14:51,280
<font color="#CCCCCC">being able to run your selenium script</font>

393
00:14:49,240 --> 00:14:52,960
with<font color="#CCCCCC"> Zapp</font><font color="#E5E5E5"> which a lot of organizations</font>

394
00:14:51,280 --> 00:14:56,050
are already<font color="#E5E5E5"> doing but in a much more</font>

395
00:14:52,960 --> 00:15:00,040
<font color="#E5E5E5">simplified in a much more easy</font><font color="#CCCCCC"> to scale</font>

396
00:14:56,050 --> 00:15:02,319
way right to provide coverage<font color="#E5E5E5"> and use</font>

397
00:15:00,040 --> 00:15:04,870
<font color="#CCCCCC">spent test results as security</font>

398
00:15:02,320 --> 00:15:08,310
<font color="#E5E5E5">regulation so ideally what we want to do</font>

399
00:15:04,870 --> 00:15:11,740
is create repeatable and reproducible

400
00:15:08,310 --> 00:15:13,329
<font color="#CCCCCC">you know automation that can be you used</font>

401
00:15:11,740 --> 00:15:16,300
by engineering teams so essentially

402
00:15:13,330 --> 00:15:18,550
<font color="#E5E5E5">create canned recipes right</font><font color="#CCCCCC"> so we create</font>

403
00:15:16,300 --> 00:15:20,560
a canned recipe that we can use to just

404
00:15:18,550 --> 00:15:23,020
run again and<font color="#E5E5E5"> again and again and it</font>

405
00:15:20,560 --> 00:15:26,229
will try<font color="#E5E5E5"> and find as many flaws as it</font>

406
00:15:23,020 --> 00:15:29,380
possibly can<font color="#E5E5E5"> so that's where I ran</font>

407
00:15:26,230 --> 00:15:30,790
across robot framework<font color="#E5E5E5"> and in fact how</font>

408
00:15:29,380 --> 00:15:34,000
<font color="#CCCCCC">many of you've used robot framework</font><font color="#E5E5E5"> here</font>

409
00:15:30,790 --> 00:15:36,040
before nobody it's it's<font color="#E5E5E5"> great you</font><font color="#CCCCCC"> should</font>

410
00:15:34,000 --> 00:15:40,300
definitely consider<font color="#CCCCCC"> using this now robot</font>

411
00:15:36,040 --> 00:15:42,910
<font color="#E5E5E5">framework</font><font color="#CCCCCC"> is a generic</font><font color="#E5E5E5"> acceptance</font>

412
00:15:40,300 --> 00:15:44,979
test-driven development framework a TDD

413
00:15:42,910 --> 00:15:47,439
framework<font color="#E5E5E5"> and I'll get into that in a</font>

414
00:15:44,980 --> 00:15:49,779
little<font color="#CCCCCC"> bit now the way it works is that</font>

415
00:15:47,440 --> 00:15:52,149
<font color="#E5E5E5">you have a</font>

416
00:15:49,779 --> 00:15:53,860
library which is essentially compatible

417
00:15:52,149 --> 00:15:55,920
with the robot<font color="#CCCCCC"> framework and you have</font>

418
00:15:53,860 --> 00:16:00,009
keywords<font color="#CCCCCC"> and all you need</font><font color="#E5E5E5"> to do is</font>

419
00:15:55,920 --> 00:16:02,579
invoke those keywords<font color="#E5E5E5"> in a simple line</font>

420
00:16:00,009 --> 00:16:04,749
<font color="#CCCCCC">of English something like run zap on is</font>

421
00:16:02,579 --> 00:16:08,859
a keyword

422
00:16:04,749 --> 00:16:11,319
so our nmap scan is a<font color="#E5E5E5"> keyword so all of</font>

423
00:16:08,860 --> 00:16:14,050
this<font color="#E5E5E5"> these complex tasks of running zap</font>

424
00:16:11,319 --> 00:16:16,660
active scan<font color="#CCCCCC"> or spy during</font><font color="#E5E5E5"> a site or</font>

425
00:16:14,050 --> 00:16:19,329
doing<font color="#E5E5E5"> XYZ</font><font color="#CCCCCC"> that you do in a security test</font>

426
00:16:16,660 --> 00:16:21,670
<font color="#E5E5E5">is typically broken down into simplistic</font>

427
00:16:19,329 --> 00:16:24,550
keywords and you have<font color="#E5E5E5"> a libraries for</font>

428
00:16:21,670 --> 00:16:26,259
Python and Java and it's<font color="#E5E5E5"> pretty modular</font>

429
00:16:24,550 --> 00:16:28,389
I'll get<font color="#CCCCCC"> into</font><font color="#E5E5E5"> it you'll you'll see a</font>

430
00:16:26,259 --> 00:16:30,579
bunch of<font color="#E5E5E5"> demos as well that I'm</font><font color="#CCCCCC"> gonna be</font>

431
00:16:28,389 --> 00:16:31,720
<font color="#E5E5E5">talking about so a TDD it's not really</font>

432
00:16:30,579 --> 00:16:34,359
important<font color="#CCCCCC"> but I'm just</font><font color="#E5E5E5"> giving</font><font color="#CCCCCC"> you a</font>

433
00:16:31,720 --> 00:16:36,699
<font color="#E5E5E5">quick example</font><font color="#CCCCCC"> of what</font><font color="#E5E5E5"> an 80-degree is</font>

434
00:16:34,360 --> 00:16:39,249
essentially you write an acceptance<font color="#E5E5E5"> test</font>

435
00:16:36,699 --> 00:16:40,660
<font color="#E5E5E5">before</font><font color="#CCCCCC"> you write code that's what a TDD</font>

436
00:16:39,249 --> 00:16:42,160
is you write an acceptance<font color="#E5E5E5"> test</font><font color="#CCCCCC"> then you</font>

437
00:16:40,660 --> 00:16:44,949
write code<font color="#E5E5E5"> and you test your code</font>

438
00:16:42,160 --> 00:16:47,379
against that<font color="#E5E5E5"> acceptance test so a TDD</font>

439
00:16:44,949 --> 00:16:50,439
frameworks you do have many of you

440
00:16:47,379 --> 00:16:52,180
probably<font color="#E5E5E5"> heard of BDD which is the more</font>

441
00:16:50,439 --> 00:16:55,329
popular<font color="#CCCCCC"> one</font><font color="#E5E5E5"> because it has a very</font>

442
00:16:52,180 --> 00:16:57,550
<font color="#CCCCCC">specific set of syntaxes syntactical</font>

443
00:16:55,329 --> 00:16:59,949
annotations<font color="#E5E5E5"> what a TDD is is quite</font>

444
00:16:57,550 --> 00:17:01,479
<font color="#CCCCCC">useful but what we</font><font color="#E5E5E5"> are doing today is</font>

445
00:16:59,949 --> 00:17:03,008
<font color="#CCCCCC">not</font><font color="#E5E5E5"> really going to focus too much on</font>

446
00:17:01,480 --> 00:17:05,289
<font color="#E5E5E5">this it's going to focus on what this</font>

447
00:17:03,009 --> 00:17:07,689
<font color="#E5E5E5">framework can do from that perspective</font>

448
00:17:05,289 --> 00:17:09,819
<font color="#E5E5E5">so the way robot works is essentially</font>

449
00:17:07,689 --> 00:17:11,799
<font color="#E5E5E5">you have your test libraries that robot</font>

450
00:17:09,819 --> 00:17:14,260
runs and then you have your test<font color="#E5E5E5"> suite</font>

451
00:17:11,799 --> 00:17:16,750
so essentially what robot does is that

452
00:17:14,260 --> 00:17:20,740
it converts all these functions in<font color="#CCCCCC"> your</font>

453
00:17:16,750 --> 00:17:22,299
test<font color="#CCCCCC"> library into</font><font color="#E5E5E5"> key words and you can</font>

454
00:17:20,740 --> 00:17:23,439
run these<font color="#E5E5E5"> keywords so for instance I</font>

455
00:17:22,299 --> 00:17:25,359
<font color="#E5E5E5">have a keyword called</font>

456
00:17:23,439 --> 00:17:26,890
<font color="#E5E5E5">start</font><font color="#CCCCCC"> zap</font><font color="#E5E5E5"> that means it would</font>

457
00:17:25,359 --> 00:17:29,379
essentially start<font color="#CCCCCC"> the app in a headless</font>

458
00:17:26,890 --> 00:17:32,590
mode or GUI mode and then I say spider

459
00:17:29,380 --> 00:17:34,960
<font color="#E5E5E5">run zap spider</font><font color="#CCCCCC"> on this</font><font color="#E5E5E5"> particular target</font>

460
00:17:32,590 --> 00:17:36,908
now<font color="#E5E5E5"> the reason that this is so powerful</font>

461
00:17:34,960 --> 00:17:38,380
<font color="#E5E5E5">is simply</font><font color="#CCCCCC"> because you don't need the</font>

462
00:17:36,909 --> 00:17:40,390
lower line of code in order<font color="#E5E5E5"> to actually</font>

463
00:17:38,380 --> 00:17:42,909
do<font color="#E5E5E5"> this</font><font color="#CCCCCC"> you don't at least</font><font color="#E5E5E5"> the barriers</font>

464
00:17:40,390 --> 00:17:44,409
<font color="#E5E5E5">that</font><font color="#CCCCCC"> you need to</font><font color="#E5E5E5"> run for this is very</font>

465
00:17:42,909 --> 00:17:46,510
very low you just<font color="#CCCCCC"> need to know those</font>

466
00:17:44,409 --> 00:17:48,669
keywords<font color="#E5E5E5"> or you can find these keywords</font>

467
00:17:46,510 --> 00:17:51,070
and you can just run<font color="#E5E5E5"> these keywords as</font>

468
00:17:48,669 --> 00:17:53,169
part of<font color="#E5E5E5"> your fabric of security testing</font>

469
00:17:51,070 --> 00:17:55,389
<font color="#E5E5E5">right so and it automatically</font><font color="#CCCCCC"> gives you</font>

470
00:17:53,169 --> 00:17:57,399
results in<font color="#E5E5E5"> both HTML and XML it gives</font>

471
00:17:55,390 --> 00:17:58,899
you all the artifacts<font color="#CCCCCC"> that are required</font>

472
00:17:57,399 --> 00:18:01,000
it gives you a pass/fail status of

473
00:17:58,899 --> 00:18:03,909
<font color="#E5E5E5">whether this test ran did not run all</font>

474
00:18:01,000 --> 00:18:06,400
that stuff I'll get to that in<font color="#CCCCCC"> a</font>

475
00:18:03,910 --> 00:18:09,550
so why we like it<font color="#CCCCCC"> essentially it's</font>

476
00:18:06,400 --> 00:18:12,040
simple<font color="#E5E5E5"> syntax right this can be</font><font color="#CCCCCC"> given to</font>

477
00:18:09,550 --> 00:18:13,990
anybody<font color="#CCCCCC"> and they can figure it out very</font>

478
00:18:12,040 --> 00:18:15,370
quickly<font color="#E5E5E5"> and that's great simply because</font>

479
00:18:13,990 --> 00:18:16,630
you<font color="#E5E5E5"> can give it to your</font><font color="#CCCCCC"> quality teams</font>

480
00:18:15,370 --> 00:18:18,189
you can<font color="#E5E5E5"> give it to</font><font color="#CCCCCC"> our engineering teams</font>

481
00:18:16,630 --> 00:18:20,020
<font color="#E5E5E5">and say just run this if you want to</font>

482
00:18:18,190 --> 00:18:21,520
invoke it just use this keyword<font color="#E5E5E5"> you're</font>

483
00:18:20,020 --> 00:18:23,440
<font color="#E5E5E5">gonna be invoking security that's right</font>

484
00:18:21,520 --> 00:18:25,960
out the gate<font color="#CCCCCC"> so it's pretty</font><font color="#E5E5E5"> simple right</font>

485
00:18:23,440 --> 00:18:27,490
<font color="#CCCCCC">easy to develop the API it's modular it</font>

486
00:18:25,960 --> 00:18:30,370
comes with reporting out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the box so</font>

487
00:18:27,490 --> 00:18:31,840
it gives you a nice HTML report<font color="#E5E5E5"> out of</font>

488
00:18:30,370 --> 00:18:33,159
the box you<font color="#E5E5E5"> don't really need to do</font>

489
00:18:31,840 --> 00:18:34,570
<font color="#E5E5E5">anything much for it you don't</font><font color="#CCCCCC"> need to</font>

490
00:18:33,160 --> 00:18:36,700
write<font color="#CCCCCC"> the reporting model on your it</font>

491
00:18:34,570 --> 00:18:38,590
gives you right out of the box<font color="#CCCCCC"> it also</font>

492
00:18:36,700 --> 00:18:41,110
gives you<font color="#CCCCCC"> a base Lee it supports two</font>

493
00:18:38,590 --> 00:18:42,760
very popular languages<font color="#E5E5E5"> that a lot of</font>

494
00:18:41,110 --> 00:18:44,919
security<font color="#E5E5E5"> tools have support for so</font>

495
00:18:42,760 --> 00:18:47,320
<font color="#E5E5E5">Python</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> Java</font><font color="#CCCCCC"> a lot of security tools</font>

496
00:18:44,920 --> 00:18:50,920
have support for<font color="#E5E5E5"> these two platforms so</font>

497
00:18:47,320 --> 00:18:54,909
it's great<font color="#E5E5E5"> to use this so for instance</font>

498
00:18:50,920 --> 00:18:57,790
this is an example of a robot<font color="#E5E5E5"> test case</font>

499
00:18:54,910 --> 00:19:00,310
right now<font color="#CCCCCC"> this</font><font color="#E5E5E5"> as you can</font><font color="#CCCCCC"> see is not</font>

500
00:18:57,790 --> 00:19:01,870
come<font color="#E5E5E5"> this is selenium by the way now if</font>

501
00:19:00,310 --> 00:19:03,370
you know selenium of you have written

502
00:19:01,870 --> 00:19:05,560
selenium code you would<font color="#E5E5E5"> realize that</font>

503
00:19:03,370 --> 00:19:07,419
<font color="#E5E5E5">selenium you need to invoke a lot</font><font color="#CCCCCC"> of</font>

504
00:19:05,560 --> 00:19:09,790
functions to<font color="#CCCCCC"> do all of this</font><font color="#E5E5E5"> stuff but</font>

505
00:19:07,420 --> 00:19:11,650
here you are<font color="#E5E5E5"> essentially expressing this</font>

506
00:19:09,790 --> 00:19:14,920
<font color="#E5E5E5">as natural language syntax</font><font color="#CCCCCC"> you're saying</font>

507
00:19:11,650 --> 00:19:17,260
input text email in with<font color="#E5E5E5"> this particular</font>

508
00:19:14,920 --> 00:19:18,550
class ID or this<font color="#E5E5E5"> particular name of that</font>

509
00:19:17,260 --> 00:19:20,530
particular<font color="#CCCCCC"> parameter input</font><font color="#E5E5E5"> password</font>

510
00:19:18,550 --> 00:19:22,899
password this particular password click

511
00:19:20,530 --> 00:19:25,960
<font color="#E5E5E5">button submit wait and make sure that</font>

512
00:19:22,900 --> 00:19:28,090
the<font color="#E5E5E5"> location is dashboard that's it so</font>

513
00:19:25,960 --> 00:19:30,550
it<font color="#E5E5E5"> really comes down to breaking</font><font color="#CCCCCC"> down</font>

514
00:19:28,090 --> 00:19:34,840
these complex<font color="#E5E5E5"> otherwise complex test</font>

515
00:19:30,550 --> 00:19:36,909
cases<font color="#E5E5E5"> that were code into simple easily</font>

516
00:19:34,840 --> 00:19:39,340
understood syntax<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can use for</font>

517
00:19:36,910 --> 00:19:40,960
your<font color="#CCCCCC"> own testing efforts</font><font color="#E5E5E5"> and you have a</font>

518
00:19:39,340 --> 00:19:43,959
bunch<font color="#E5E5E5"> of libraries already you have</font>

519
00:19:40,960 --> 00:19:45,910
selenium<font color="#CCCCCC"> your RPM your</font><font color="#E5E5E5"> SSH Android and</font>

520
00:19:43,960 --> 00:19:47,920
iOS automation they already have

521
00:19:45,910 --> 00:19:49,870
<font color="#E5E5E5">third-party libraries for all of these</font>

522
00:19:47,920 --> 00:19:51,700
<font color="#E5E5E5">different products so let's</font><font color="#CCCCCC"> say you're</font>

523
00:19:49,870 --> 00:19:53,590
testing a web service you can directly

524
00:19:51,700 --> 00:19:55,650
use<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Python request module</font><font color="#E5E5E5"> out of the</font>

525
00:19:53,590 --> 00:19:58,090
box for<font color="#E5E5E5"> the for you know running</font>

526
00:19:55,650 --> 00:20:02,350
parameterization on the web service<font color="#E5E5E5"> diff</font>

527
00:19:58,090 --> 00:20:05,740
<font color="#E5E5E5">liable appium in</font><font color="#CCCCCC"> selenium and so on I'm</font>

528
00:20:02,350 --> 00:20:07,090
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> quickly get</font><font color="#CCCCCC"> into a demo of this</font>

529
00:20:05,740 --> 00:20:12,150
and show<font color="#E5E5E5"> you how it works</font>

530
00:20:07,090 --> 00:20:12,149
<font color="#E5E5E5">and then come</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to the slides so</font>

531
00:20:13,929 --> 00:20:27,350
let's look<font color="#E5E5E5"> at one one of the robot</font>

532
00:20:16,519 --> 00:20:29,779
scripts that<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to oh yeah</font>

533
00:20:27,350 --> 00:20:31,699
<font color="#E5E5E5">so this</font><font color="#CCCCCC"> is one</font><font color="#E5E5E5"> of the robot scripts</font><font color="#CCCCCC"> that</font>

534
00:20:29,779 --> 00:20:36,130
I've written for<font color="#CCCCCC"> an API</font><font color="#E5E5E5"> so I have this</font>

535
00:20:31,700 --> 00:20:40,100
<font color="#E5E5E5">really simple API that just invokes some</font>

536
00:20:36,130 --> 00:20:42,860
customer<font color="#E5E5E5"> functions just so what I've</font>

537
00:20:40,100 --> 00:20:44,689
done is<font color="#E5E5E5"> broken down</font><font color="#CCCCCC"> each of these things</font>

538
00:20:42,860 --> 00:20:46,428
each of these<font color="#E5E5E5"> operations into test cases</font>

539
00:20:44,690 --> 00:20:49,429
so<font color="#CCCCCC"> what</font><font color="#E5E5E5"> I've done first is say</font>

540
00:20:46,429 --> 00:20:53,509
authenticate to<font color="#E5E5E5"> the web service then get</font>

541
00:20:49,429 --> 00:20:56,029
customer<font color="#CCCCCC"> buy ID get</font><font color="#E5E5E5"> request this</font>

542
00:20:53,509 --> 00:20:58,190
particular API<font color="#CCCCCC"> slash - so that would</font>

543
00:20:56,029 --> 00:21:00,740
give<font color="#CCCCCC"> me one customer ID with these</font>

544
00:20:58,190 --> 00:21:03,080
headers<font color="#E5E5E5"> right and then I say post</font>

545
00:21:00,740 --> 00:21:05,269
customer ID<font color="#CCCCCC"> then I start running zap so</font>

546
00:21:03,080 --> 00:21:07,908
as you can<font color="#E5E5E5"> see what</font><font color="#CCCCCC"> we're trying</font><font color="#E5E5E5"> to use</font>

547
00:21:05,269 --> 00:21:10,940
<font color="#E5E5E5">is a single fabric</font><font color="#CCCCCC"> we're not</font><font color="#E5E5E5"> separating</font>

548
00:21:07,909 --> 00:21:12,620
the<font color="#CCCCCC"> zap and</font><font color="#E5E5E5"> the selenium bit</font><font color="#CCCCCC"> our zap and</font>

549
00:21:10,940 --> 00:21:14,480
the functional test automation bit so

550
00:21:12,620 --> 00:21:16,699
what we're doing is essentially<font color="#E5E5E5"> running</font>

551
00:21:14,480 --> 00:21:19,250
the functional test automation with zap

552
00:21:16,700 --> 00:21:21,679
as the proxy<font color="#CCCCCC"> and we are proxying all</font>

553
00:21:19,250 --> 00:21:24,470
this traffic<font color="#E5E5E5"> through zap and once that</font>

554
00:21:21,679 --> 00:21:25,940
the test<font color="#E5E5E5"> automation is done we run zap</font>

555
00:21:24,470 --> 00:21:28,129
against the target and we get our

556
00:21:25,940 --> 00:21:29,720
results<font color="#E5E5E5"> the good thing about this is</font>

557
00:21:28,129 --> 00:21:30,678
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> don't</font><font color="#CCCCCC"> need to have two three</font>

558
00:21:29,720 --> 00:21:33,259
different things<font color="#CCCCCC"> that you're dealing</font>

559
00:21:30,679 --> 00:21:35,210
<font color="#E5E5E5">with you're just dealing</font><font color="#CCCCCC"> with one script</font>

560
00:21:33,259 --> 00:21:36,950
<font color="#E5E5E5">so what we're doing here is</font><font color="#CCCCCC"> we're</font>

561
00:21:35,210 --> 00:21:39,129
essentially running all these test<font color="#CCCCCC"> cases</font>

562
00:21:36,950 --> 00:21:42,679
when we<font color="#E5E5E5"> finish running all the</font>

563
00:21:39,129 --> 00:21:44,928
<font color="#CCCCCC">automation bits</font><font color="#E5E5E5"> we start running zap we</font>

564
00:21:42,679 --> 00:21:46,759
run the active scan on zap once the

565
00:21:44,929 --> 00:21:50,090
active scan is run we generate a report

566
00:21:46,759 --> 00:21:52,070
<font color="#E5E5E5">and we kill both processes that's really</font>

567
00:21:50,090 --> 00:21:54,168
as<font color="#CCCCCC"> simple</font><font color="#E5E5E5"> as this so and zap if you look</font>

568
00:21:52,070 --> 00:21:56,899
at the the Waze app is invoked it just

569
00:21:54,169 --> 00:21:59,450
says app start scan so it's really not

570
00:21:56,899 --> 00:22:00,979
that<font color="#E5E5E5"> complicated for anyone on an</font>

571
00:21:59,450 --> 00:22:03,529
engineering team<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure</font>

572
00:22:00,980 --> 00:22:05,480
<font color="#E5E5E5">this out so all you have to do is just</font>

573
00:22:03,529 --> 00:22:07,399
invoke<font color="#E5E5E5"> to three different specific</font>

574
00:22:05,480 --> 00:22:11,029
keywords<font color="#CCCCCC"> and they are up and</font><font color="#E5E5E5"> running</font>

575
00:22:07,399 --> 00:22:12,439
<font color="#CCCCCC">ready to go right</font><font color="#E5E5E5"> so let me just go back</font>

576
00:22:11,029 --> 00:22:14,559
<font color="#CCCCCC">to the presentation</font><font color="#E5E5E5"> and then run the</font>

577
00:22:12,440 --> 00:22:14,559
demo

578
00:22:19,690 --> 00:22:24,650
so the<font color="#CCCCCC"> QuickStart is</font><font color="#E5E5E5"> essentially you</font>

579
00:22:22,850 --> 00:22:26,090
have variables you have<font color="#E5E5E5"> test Suites you</font>

580
00:22:24,650 --> 00:22:27,230
have<font color="#CCCCCC"> keywords I already mentioned the</font>

581
00:22:26,090 --> 00:22:29,120
<font color="#CCCCCC">keywords and you saw some</font><font color="#E5E5E5"> of the</font>

582
00:22:27,230 --> 00:22:30,440
keywords<font color="#CCCCCC"> you can import a bunch of</font>

583
00:22:29,120 --> 00:22:32,270
libraries as well<font color="#E5E5E5"> so let us say you have</font>

584
00:22:30,440 --> 00:22:34,010
a generic<font color="#CCCCCC"> Java library or a Python</font>

585
00:22:32,270 --> 00:22:35,930
liability that we want to<font color="#E5E5E5"> use you</font><font color="#CCCCCC"> can</font>

586
00:22:34,010 --> 00:22:38,750
import it into<font color="#E5E5E5"> that</font><font color="#CCCCCC"> particular script</font>

587
00:22:35,930 --> 00:22:40,970
<font color="#E5E5E5">and start using it</font><font color="#CCCCCC"> if it has a robot</font>

588
00:22:38,750 --> 00:22:43,340
framework<font color="#E5E5E5"> integration already what we</font>

589
00:22:40,970 --> 00:22:45,800
<font color="#E5E5E5">have done already is these two are ready</font>

590
00:22:43,340 --> 00:22:47,540
to use and<font color="#E5E5E5"> they're on github you</font><font color="#CCCCCC"> can</font>

591
00:22:45,800 --> 00:22:50,149
<font color="#E5E5E5">download and use</font><font color="#CCCCCC"> it</font>

592
00:22:47,540 --> 00:22:52,159
zap<font color="#E5E5E5"> integration is called robos app I've</font>

593
00:22:50,150 --> 00:22:54,140
also written an in map integration

594
00:22:52,160 --> 00:22:55,670
called<font color="#E5E5E5"> Robo</font><font color="#CCCCCC"> and map</font><font color="#E5E5E5"> you can start using</font>

595
00:22:54,140 --> 00:22:58,340
this<font color="#E5E5E5"> right out</font><font color="#CCCCCC"> of the box you</font><font color="#E5E5E5"> can just</font>

596
00:22:55,670 --> 00:23:00,470
<font color="#CCCCCC">download it runs app with it</font><font color="#E5E5E5"> and you</font>

597
00:22:58,340 --> 00:23:03,020
<font color="#E5E5E5">have all</font><font color="#CCCCCC"> the documentation burp</font><font color="#E5E5E5"> suite</font>

598
00:23:00,470 --> 00:23:03,980
<font color="#E5E5E5">I'm almost done I should</font><font color="#CCCCCC"> be done</font><font color="#E5E5E5"> very</font>

599
00:23:03,020 --> 00:23:05,960
soon<font color="#CCCCCC"> web suite</font>

600
00:23:03,980 --> 00:23:09,170
sometimes is a little cantankerous when

601
00:23:05,960 --> 00:23:11,030
it comes to<font color="#CCCCCC"> Jatin</font><font color="#E5E5E5"> API</font><font color="#CCCCCC"> but it's it's</font>

602
00:23:09,170 --> 00:23:12,950
almost<font color="#E5E5E5"> done I've we've almost finished a</font>

603
00:23:11,030 --> 00:23:14,480
<font color="#CCCCCC">sub lister</font><font color="#E5E5E5"> integration as</font><font color="#CCCCCC"> well for our</font>

604
00:23:12,950 --> 00:23:15,980
directory brute-forcing so let us<font color="#E5E5E5"> say</font>

605
00:23:14,480 --> 00:23:17,930
you<font color="#E5E5E5"> want your a</font><font color="#CCCCCC"> pentester you want to</font>

606
00:23:15,980 --> 00:23:20,270
run a<font color="#E5E5E5"> bunch of automation and then only</font>

607
00:23:17,930 --> 00:23:21,980
focus on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> big stuff you can run</font><font color="#E5E5E5"> all</font>

608
00:23:20,270 --> 00:23:24,680
these tools as part<font color="#E5E5E5"> of a pen test</font>

609
00:23:21,980 --> 00:23:26,900
pipeline of salts and then you know run

610
00:23:24,680 --> 00:23:28,340
<font color="#CCCCCC">your custom stuff do your manual pen</font>

611
00:23:26,900 --> 00:23:30,530
testing so<font color="#CCCCCC"> that you save a lot of time</font>

612
00:23:28,340 --> 00:23:31,939
instead<font color="#E5E5E5"> of running all these tools one</font>

613
00:23:30,530 --> 00:23:34,760
after<font color="#E5E5E5"> the other so</font><font color="#CCCCCC"> you can just run that</font>

614
00:23:31,940 --> 00:23:36,590
as part of one fabric<font color="#E5E5E5"> now the future I</font>

615
00:23:34,760 --> 00:23:38,540
want to<font color="#CCCCCC"> definitely work on stuff like</font>

616
00:23:36,590 --> 00:23:40,939
<font color="#E5E5E5">this which</font><font color="#CCCCCC"> is the dependency check or</font>

617
00:23:38,540 --> 00:23:46,100
<font color="#CCCCCC">acne and some of the other tools</font><font color="#E5E5E5"> so this</font>

618
00:23:40,940 --> 00:23:49,220
is this where I am with these<font color="#E5E5E5"> API so</font>

619
00:23:46,100 --> 00:23:51,050
some of<font color="#E5E5E5"> the use</font><font color="#CCCCCC"> cases obviously</font><font color="#E5E5E5"> is</font>

620
00:23:49,220 --> 00:23:53,030
getting engineering teams to run their

621
00:23:51,050 --> 00:23:54,800
<font color="#CCCCCC">own security testing lower the anti</font>

622
00:23:53,030 --> 00:23:56,930
barrier for security testing is what<font color="#E5E5E5"> I</font>

623
00:23:54,800 --> 00:24:00,230
definitely want to<font color="#CCCCCC"> achieve at</font><font color="#E5E5E5"> the end of</font>

624
00:23:56,930 --> 00:24:02,090
this<font color="#E5E5E5"> let me</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> run a quick demo for</font>

625
00:24:00,230 --> 00:24:06,920
you guys and then come back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

626
00:24:02,090 --> 00:24:09,070
slides<font color="#CCCCCC"> so this is the robot script that</font>

627
00:24:06,920 --> 00:24:11,630
<font color="#E5E5E5">I have written that would essentially</font>

628
00:24:09,070 --> 00:24:13,220
run some functions on the web service

629
00:24:11,630 --> 00:24:15,950
<font color="#CCCCCC">obviously we know</font><font color="#E5E5E5"> that with web services</font>

630
00:24:13,220 --> 00:24:17,510
<font color="#CCCCCC">you can't use a spider</font><font color="#E5E5E5"> with any</font>

631
00:24:15,950 --> 00:24:19,250
traditional scanner you can't use<font color="#E5E5E5"> a</font>

632
00:24:17,510 --> 00:24:20,420
spider you<font color="#E5E5E5"> can't do any of</font><font color="#CCCCCC"> that so you</font>

633
00:24:19,250 --> 00:24:22,940
kind of have<font color="#CCCCCC"> to run through</font><font color="#E5E5E5"> the</font>

634
00:24:20,420 --> 00:24:24,680
parameters specifically one after the

635
00:24:22,940 --> 00:24:26,360
other<font color="#CCCCCC"> so let</font><font color="#E5E5E5"> me just run this so what</font>

636
00:24:24,680 --> 00:24:28,400
this is going<font color="#CCCCCC"> to do is going</font><font color="#E5E5E5"> to run</font>

637
00:24:26,360 --> 00:24:30,889
those it's gonna authenticate to<font color="#E5E5E5"> the web</font>

638
00:24:28,400 --> 00:24:32,150
service<font color="#E5E5E5"> it's going to call invoke a few</font>

639
00:24:30,890 --> 00:24:34,250
<font color="#E5E5E5">functions</font>

640
00:24:32,150 --> 00:24:36,950
and<font color="#E5E5E5"> kickoffs app to run an active scan</font>

641
00:24:34,250 --> 00:24:38,420
<font color="#E5E5E5">and you'll see the app it's I've</font>

642
00:24:36,950 --> 00:24:39,830
configured it<font color="#CCCCCC"> to work on the GUI mode</font>

643
00:24:38,420 --> 00:24:42,620
but you<font color="#E5E5E5"> can run this headless</font><font color="#CCCCCC"> lis as</font>

644
00:24:39,830 --> 00:24:44,750
well and then<font color="#CCCCCC"> once app runs</font><font color="#E5E5E5"> it's gonna</font>

645
00:24:42,620 --> 00:24:47,030
write the results to a JSON file<font color="#E5E5E5"> that's</font>

646
00:24:44,750 --> 00:24:48,770
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> right so let's</font><font color="#E5E5E5"> just run this and</font>

647
00:24:47,030 --> 00:24:52,399
you'll<font color="#CCCCCC"> see how</font><font color="#E5E5E5"> it works</font>

648
00:24:48,770 --> 00:24:54,560
so it starts zap and<font color="#CCCCCC"> zap is running</font><font color="#E5E5E5"> on</font>

649
00:24:52,400 --> 00:24:56,740
another<font color="#E5E5E5"> desktop that sucks just give me</font>

650
00:24:54,560 --> 00:24:56,740
a minute

651
00:24:56,920 --> 00:25:02,500
<font color="#E5E5E5">yeah so yeah this is</font><font color="#CCCCCC"> the app and I'm</font>

652
00:25:00,740 --> 00:25:09,830
gonna just bring<font color="#E5E5E5"> this in as well</font>

653
00:25:02,500 --> 00:25:12,170
probably<font color="#CCCCCC"> just going</font><font color="#E5E5E5"> to reduce it so the</font>

654
00:25:09,830 --> 00:25:13,909
app<font color="#CCCCCC"> is started</font><font color="#E5E5E5"> up and now all the</font>

655
00:25:12,170 --> 00:25:17,450
<font color="#E5E5E5">traffic as you can see is being</font><font color="#CCCCCC"> proxied</font>

656
00:25:13,910 --> 00:25:19,160
<font color="#E5E5E5">through</font><font color="#CCCCCC"> SAP so I'm logging in and I'm</font>

657
00:25:17,450 --> 00:25:22,280
calling<font color="#E5E5E5"> three or four different</font>

658
00:25:19,160 --> 00:25:24,710
functions<font color="#E5E5E5"> and once I'm done</font><font color="#CCCCCC"> with this</font><font color="#E5E5E5"> I</font>

659
00:25:22,280 --> 00:25:28,030
<font color="#E5E5E5">create a context with zap and zap is</font>

660
00:25:24,710 --> 00:25:31,670
going to start an active scan very soon

661
00:25:28,030 --> 00:25:33,639
so it's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> start an active scan</font><font color="#CCCCCC"> and</font>

662
00:25:31,670 --> 00:25:37,010
you can see<font color="#E5E5E5"> that each of these steps are</font>

663
00:25:33,640 --> 00:25:39,590
represented as modular entities here<font color="#E5E5E5"> so</font>

664
00:25:37,010 --> 00:25:41,050
you can see<font color="#E5E5E5"> that get customer ID I've</font>

665
00:25:39,590 --> 00:25:43,730
done all of<font color="#E5E5E5"> these different</font><font color="#CCCCCC"> functions</font>

666
00:25:41,050 --> 00:25:45,770
contact<font color="#E5E5E5"> clear does app context run an</font>

667
00:25:43,730 --> 00:25:47,750
active scan once the active scan is done

668
00:25:45,770 --> 00:25:49,330
<font color="#E5E5E5">it's going to write the</font><font color="#CCCCCC"> report and</font><font color="#E5E5E5"> shut</font>

669
00:25:47,750 --> 00:25:51,890
it down<font color="#CCCCCC"> that's it</font>

670
00:25:49,330 --> 00:25:54,889
so with this your actual automation is

671
00:25:51,890 --> 00:25:57,560
pretty much done right so you really

672
00:25:54,890 --> 00:25:59,720
<font color="#E5E5E5">have you've lowered the entry barrier</font>

673
00:25:57,560 --> 00:26:01,429
<font color="#E5E5E5">for your QA teams to get into security</font>

674
00:25:59,720 --> 00:26:03,860
testing simply because you've been<font color="#E5E5E5"> able</font>

675
00:26:01,430 --> 00:26:05,930
to give them a repeatable<font color="#CCCCCC"> process and in</font>

676
00:26:03,860 --> 00:26:07,280
<font color="#CCCCCC">fact robot framework if you ask your</font><font color="#E5E5E5"> Qi</font>

677
00:26:05,930 --> 00:26:09,200
teams that<font color="#CCCCCC"> you'll be surprised</font><font color="#E5E5E5"> to know</font>

678
00:26:07,280 --> 00:26:11,960
<font color="#CCCCCC">that a</font><font color="#E5E5E5"> lot of people are already</font><font color="#CCCCCC"> using</font>

679
00:26:09,200 --> 00:26:14,480
this because<font color="#E5E5E5"> it's heavily</font><font color="#CCCCCC"> used in the</font>

680
00:26:11,960 --> 00:26:16,100
test<font color="#CCCCCC"> automation world but unfortunately</font>

681
00:26:14,480 --> 00:26:18,050
in the security<font color="#CCCCCC"> world it's</font><font color="#E5E5E5"> very</font>

682
00:26:16,100 --> 00:26:19,850
<font color="#CCCCCC">little-known so it's it's</font><font color="#E5E5E5"> pretty easy to</font>

683
00:26:18,050 --> 00:26:21,710
<font color="#E5E5E5">get</font><font color="#CCCCCC"> started</font><font color="#E5E5E5"> with something like this and</font>

684
00:26:19,850 --> 00:26:37,159
<font color="#CCCCCC">obviously by providing</font><font color="#E5E5E5"> them a simple</font><font color="#CCCCCC"> API</font>

685
00:26:21,710 --> 00:26:38,990
<font color="#CCCCCC">all they have</font><font color="#E5E5E5"> to do yes right right</font><font color="#CCCCCC"> now</font>

686
00:26:37,160 --> 00:26:41,150
this<font color="#E5E5E5"> gives them a report so this gives</font>

687
00:26:38,990 --> 00:26:47,900
them a JSON report so let me just<font color="#E5E5E5"> try</font>

688
00:26:41,150 --> 00:26:49,640
<font color="#CCCCCC">and pull that up so this would be the so</font>

689
00:26:47,900 --> 00:26:52,910
generates a<font color="#CCCCCC"> report at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> end of the</font>

690
00:26:49,640 --> 00:26:56,210
<font color="#E5E5E5">script so as you can</font><font color="#CCCCCC"> see here this is</font>

691
00:26:52,910 --> 00:26:59,540
the<font color="#E5E5E5"> report that it generates generates a</font>

692
00:26:56,210 --> 00:27:01,490
JSON report for the<font color="#CCCCCC"> tests it ran at this</font>

693
00:26:59,540 --> 00:27:03,320
time and it<font color="#CCCCCC"> just gives you all the</font>

694
00:27:01,490 --> 00:27:05,270
details<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that right</font><font color="#CCCCCC"> now but</font><font color="#E5E5E5"> you can</font>

695
00:27:03,320 --> 00:27:07,850
use you can<font color="#CCCCCC"> use</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> however you want</font><font color="#E5E5E5"> you</font>

696
00:27:05,270 --> 00:27:09,560
can<font color="#E5E5E5"> send it off as an email</font><font color="#CCCCCC"> or you want</font>

697
00:27:07,850 --> 00:27:11,480
this to<font color="#E5E5E5"> be triage by the security team</font>

698
00:27:09,560 --> 00:27:13,520
<font color="#CCCCCC">to remove false positives or whatever it</font>

699
00:27:11,480 --> 00:27:16,010
is<font color="#E5E5E5"> all of these flows can</font><font color="#CCCCCC"> be worked out</font>

700
00:27:13,520 --> 00:27:17,900
<font color="#E5E5E5">but typically right now the API is that</font>

701
00:27:16,010 --> 00:27:19,940
<font color="#E5E5E5">I've implemented either write</font><font color="#CCCCCC"> it to our</font>

702
00:27:17,900 --> 00:27:23,060
product which is the correlation<font color="#E5E5E5"> tool or</font>

703
00:27:19,940 --> 00:27:24,530
<font color="#E5E5E5">just generate a JSON file which</font><font color="#CCCCCC"> you can</font>

704
00:27:23,060 --> 00:27:31,669
use you can<font color="#E5E5E5"> slice and</font><font color="#CCCCCC"> dice and use it</font>

705
00:27:24,530 --> 00:27:34,430
<font color="#CCCCCC">how you will write so so really</font><font color="#E5E5E5"> if you</font>

706
00:27:31,670 --> 00:27:36,860
look<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> security use cases</font><font color="#E5E5E5"> there are</font>

707
00:27:34,430 --> 00:27:39,740
<font color="#E5E5E5">quite a few use</font><font color="#CCCCCC"> cases that</font><font color="#E5E5E5"> I would go</font>

708
00:27:36,860 --> 00:27:41,679
<font color="#E5E5E5">with one definitely to empower</font>

709
00:27:39,740 --> 00:27:43,760
engineering teams to run their<font color="#CCCCCC"> own</font>

710
00:27:41,680 --> 00:27:45,290
security tests<font color="#E5E5E5"> simply because</font>

711
00:27:43,760 --> 00:27:46,370
engineering<font color="#E5E5E5"> teams you</font><font color="#CCCCCC"> don't want them</font>

712
00:27:45,290 --> 00:27:48,200
<font color="#E5E5E5">coming to you for everything</font>

713
00:27:46,370 --> 00:27:50,270
ideally<font color="#E5E5E5"> that's what you want them to do</font>

714
00:27:48,200 --> 00:27:52,760
right have their own<font color="#E5E5E5"> security practice</font>

715
00:27:50,270 --> 00:27:55,190
run<font color="#E5E5E5"> a</font><font color="#CCCCCC"> set of</font><font color="#E5E5E5"> security things by</font>

716
00:27:52,760 --> 00:27:57,680
themselves<font color="#CCCCCC"> and then obviously</font><font color="#E5E5E5"> for more</font>

717
00:27:55,190 --> 00:27:59,720
specific more<font color="#E5E5E5"> value-added type of</font>

718
00:27:57,680 --> 00:28:01,360
services approach your application

719
00:27:59,720 --> 00:28:03,920
security<font color="#E5E5E5"> team or your security group</font>

720
00:28:01,360 --> 00:28:06,080
functional test automation can<font color="#E5E5E5"> be so in</font>

721
00:28:03,920 --> 00:28:08,510
<font color="#E5E5E5">fact this was an interesting story we</font>

722
00:28:06,080 --> 00:28:11,449
were<font color="#CCCCCC"> able to convert a selenium script</font>

723
00:28:08,510 --> 00:28:14,120
for a pretty massive product<font color="#E5E5E5"> to robot</font>

724
00:28:11,450 --> 00:28:17,030
<font color="#E5E5E5">within</font><font color="#CCCCCC"> two and a half hours which means</font>

725
00:28:14,120 --> 00:28:18,919
<font color="#CCCCCC">that the ability to scale</font><font color="#E5E5E5"> with this is</font>

726
00:28:17,030 --> 00:28:20,450
pretty<font color="#E5E5E5"> easy so let's take a massive</font>

727
00:28:18,920 --> 00:28:22,850
selenium script you just convert all<font color="#CCCCCC"> of</font>

728
00:28:20,450 --> 00:28:24,350
that over to robot because robot has the

729
00:28:22,850 --> 00:28:26,060
same selenium API so it just has

730
00:28:24,350 --> 00:28:28,550
keywords for<font color="#E5E5E5"> those selenium scripts and</font>

731
00:28:26,060 --> 00:28:31,340
<font color="#E5E5E5">you can just convert that into robot</font>

732
00:28:28,550 --> 00:28:32,899
framework pretty easily<font color="#E5E5E5"> for pen testers</font>

733
00:28:31,340 --> 00:28:34,610
it's great<font color="#CCCCCC"> because</font><font color="#E5E5E5"> you can kind of</font>

734
00:28:32,900 --> 00:28:36,020
automate all that<font color="#CCCCCC"> low-hanging stuff</font>

735
00:28:34,610 --> 00:28:38,149
right<font color="#CCCCCC"> okay I'm</font><font color="#E5E5E5"> going to run this I'm</font>

736
00:28:36,020 --> 00:28:39,530
gonna run<font color="#CCCCCC"> nmap</font><font color="#E5E5E5"> I'm gonna run sub</font><font color="#CCCCCC"> lister</font>

737
00:28:38,150 --> 00:28:41,560
I'm gonna run<font color="#E5E5E5"> the app I'm gonna run Bob</font>

738
00:28:39,530 --> 00:28:44,110
and only after that<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at</font>

739
00:28:41,560 --> 00:28:46,300
the product so if the if the<font color="#CCCCCC"> pentester</font>

740
00:28:44,110 --> 00:28:48,610
gets a test automation script from<font color="#E5E5E5"> the</font>

741
00:28:46,300 --> 00:28:50,620
<font color="#E5E5E5">QA team all the</font><font color="#CCCCCC"> pen tester has to do is</font>

742
00:28:48,610 --> 00:28:52,389
to run all of<font color="#E5E5E5"> this stuff and only start</font>

743
00:28:50,620 --> 00:28:54,550
<font color="#E5E5E5">to look at the more specific more</font>

744
00:28:52,390 --> 00:28:57,550
<font color="#E5E5E5">critical flaws in</font><font color="#CCCCCC"> that particular</font>

745
00:28:54,550 --> 00:29:00,100
<font color="#E5E5E5">environment so the idea is to break down</font>

746
00:28:57,550 --> 00:29:03,220
<font color="#E5E5E5">all</font><font color="#CCCCCC"> of this stuff</font><font color="#E5E5E5"> that used to be a</font>

747
00:29:00,100 --> 00:29:05,350
friction driving<font color="#CCCCCC"> process and make it</font>

748
00:29:03,220 --> 00:29:08,680
<font color="#CCCCCC">something like</font><font color="#E5E5E5"> this which</font><font color="#CCCCCC"> is very easy</font>

749
00:29:05,350 --> 00:29:13,780
<font color="#CCCCCC">very simple</font><font color="#E5E5E5"> very intuitive for</font><font color="#CCCCCC"> people to</font>

750
00:29:08,680 --> 00:29:16,120
understand right<font color="#E5E5E5"> so yeah so let's look</font>

751
00:29:13,780 --> 00:29:17,710
<font color="#E5E5E5">at some of</font><font color="#CCCCCC"> the use cases and patterns</font>

752
00:29:16,120 --> 00:29:21,159
and<font color="#E5E5E5"> I'll run you through another demo</font>

753
00:29:17,710 --> 00:29:23,620
and a little bit as well<font color="#E5E5E5"> so automated</font>

754
00:29:21,160 --> 00:29:26,680
<font color="#CCCCCC">print test activity is creating a pen</font>

755
00:29:23,620 --> 00:29:28,270
test pipeline so one of the visions<font color="#E5E5E5"> that</font>

756
00:29:26,680 --> 00:29:30,550
I had for<font color="#E5E5E5"> this when I started off with</font>

757
00:29:28,270 --> 00:29:32,770
this<font color="#E5E5E5"> was for our</font><font color="#CCCCCC"> own internal team one</font>

758
00:29:30,550 --> 00:29:34,600
that was running pen test was that<font color="#CCCCCC"> you</font>

759
00:29:32,770 --> 00:29:37,120
know what guys instead of running all of

760
00:29:34,600 --> 00:29:40,600
these tools manually why don't you have

761
00:29:37,120 --> 00:29:43,000
you know<font color="#E5E5E5"> test automation script run it</font>

762
00:29:40,600 --> 00:29:44,230
through robot and therefore you actually

763
00:29:43,000 --> 00:29:45,880
<font color="#E5E5E5">run it through all the</font><font color="#CCCCCC"> different tools</font>

764
00:29:44,230 --> 00:29:49,000
<font color="#E5E5E5">you</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> otherwise use in a pen test</font>

765
00:29:45,880 --> 00:29:50,860
and then write them<font color="#E5E5E5"> back for you to see</font>

766
00:29:49,000 --> 00:29:52,330
what it<font color="#E5E5E5"> found what kind of security</font>

767
00:29:50,860 --> 00:29:54,070
<font color="#CCCCCC">issues it form what kind of flaws it</font>

768
00:29:52,330 --> 00:29:56,169
found and essentially creating a

769
00:29:54,070 --> 00:29:57,909
pipeline<font color="#E5E5E5"> so you can run</font><font color="#CCCCCC"> nmap</font><font color="#E5E5E5"> find all</font>

770
00:29:56,170 --> 00:29:59,890
the port scan results and the

771
00:29:57,910 --> 00:30:01,660
vulnerability scan results<font color="#CCCCCC"> from</font><font color="#E5E5E5"> nap in</font>

772
00:29:59,890 --> 00:30:03,430
<font color="#E5E5E5">fact we even wrote</font><font color="#CCCCCC"> a neces integration</font>

773
00:30:01,660 --> 00:30:06,010
at<font color="#E5E5E5"> the time when message use to have an</font>

774
00:30:03,430 --> 00:30:07,780
<font color="#E5E5E5">API and</font><font color="#CCCCCC"> we used</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually automate</font>

775
00:30:06,010 --> 00:30:09,190
<font color="#E5E5E5">that whole process of running</font><font color="#CCCCCC"> messes</font>

776
00:30:07,780 --> 00:30:11,950
then we used to run<font color="#CCCCCC"> a directory brute</font>

777
00:30:09,190 --> 00:30:13,300
<font color="#CCCCCC">force tool runs app run Bob and then</font>

778
00:30:11,950 --> 00:30:15,130
come<font color="#CCCCCC"> out with the results so we had all</font>

779
00:30:13,300 --> 00:30:16,930
of these<font color="#E5E5E5"> results in a database</font><font color="#CCCCCC"> that we</font>

780
00:30:15,130 --> 00:30:18,550
could triage and then figure<font color="#CCCCCC"> out</font><font color="#E5E5E5"> what</font>

781
00:30:16,930 --> 00:30:20,140
were the<font color="#E5E5E5"> security issues that we</font>

782
00:30:18,550 --> 00:30:22,330
<font color="#CCCCCC">actually found</font><font color="#E5E5E5"> so creating some sort of</font>

783
00:30:20,140 --> 00:30:25,450
a pen test pipeline kind of enhancing

784
00:30:22,330 --> 00:30:27,639
the<font color="#E5E5E5"> capabilities</font><font color="#CCCCCC"> of security teams the</font>

785
00:30:25,450 --> 00:30:29,920
other thing that we also have been using

786
00:30:27,640 --> 00:30:32,080
this<font color="#E5E5E5"> for</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> parametrized application</font>

787
00:30:29,920 --> 00:30:33,760
security<font color="#CCCCCC"> testing</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> now one of</font><font color="#E5E5E5"> the</font>

788
00:30:32,080 --> 00:30:36,639
things that I'm sure some<font color="#E5E5E5"> of you will</font>

789
00:30:33,760 --> 00:30:38,379
<font color="#CCCCCC">know is that with security</font><font color="#E5E5E5"> tools like</font>

790
00:30:36,640 --> 00:30:40,840
<font color="#CCCCCC">Zappa burp or any of these other tools</font>

791
00:30:38,380 --> 00:30:42,820
one of the big challenges<font color="#E5E5E5"> you have is</font>

792
00:30:40,840 --> 00:30:45,129
doing<font color="#E5E5E5"> authenticated scanning especially</font>

793
00:30:42,820 --> 00:30:47,080
against<font color="#CCCCCC"> Web Services or single page apps</font>

794
00:30:45,130 --> 00:30:49,180
<font color="#E5E5E5">all of these different products which</font>

795
00:30:47,080 --> 00:30:50,679
are not easily<font color="#CCCCCC"> Spy durable</font><font color="#E5E5E5"> you don't</font>

796
00:30:49,180 --> 00:30:53,500
have spiders that can<font color="#E5E5E5"> do a very good</font><font color="#CCCCCC"> job</font>

797
00:30:50,680 --> 00:30:55,270
<font color="#CCCCCC">of this</font><font color="#E5E5E5"> so ideally what we did was use</font>

798
00:30:53,500 --> 00:30:57,220
selenium<font color="#E5E5E5"> scripts or</font>

799
00:30:55,270 --> 00:30:58,990
other test automation scripts<font color="#E5E5E5"> use that</font>

800
00:30:57,220 --> 00:31:00,700
as input<font color="#E5E5E5"> for these scanners</font><font color="#CCCCCC"> these</font>

801
00:30:58,990 --> 00:31:02,680
scanners capture all<font color="#CCCCCC"> that proxy all</font><font color="#E5E5E5"> of</font>

802
00:31:00,700 --> 00:31:04,810
that traffic<font color="#E5E5E5"> and then you you run your</font>

803
00:31:02,680 --> 00:31:07,120
security tests after that so that's

804
00:31:04,810 --> 00:31:08,590
another use case<font color="#E5E5E5"> and</font><font color="#CCCCCC"> obviously one of</font>

805
00:31:07,120 --> 00:31:11,110
<font color="#E5E5E5">the other things that we also started</font>

806
00:31:08,590 --> 00:31:14,500
<font color="#CCCCCC">using this far</font><font color="#E5E5E5"> was let's say your pen</font>

807
00:31:11,110 --> 00:31:16,719
tester<font color="#E5E5E5"> finds an amazing authorization</font>

808
00:31:14,500 --> 00:31:18,550
flaw that<font color="#CCCCCC"> is very specific to</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> app</font>

809
00:31:16,720 --> 00:31:20,680
to<font color="#CCCCCC"> your environment or to your</font>

810
00:31:18,550 --> 00:31:22,120
particular<font color="#E5E5E5"> business logic</font><font color="#CCCCCC"> instead of</font>

811
00:31:20,680 --> 00:31:24,010
showing<font color="#E5E5E5"> that as a bunch of screenshots</font>

812
00:31:22,120 --> 00:31:26,260
convert that into a<font color="#E5E5E5"> robot script</font><font color="#CCCCCC"> though</font>

813
00:31:24,010 --> 00:31:29,260
<font color="#E5E5E5">and run it and say this passed this</font>

814
00:31:26,260 --> 00:31:31,629
failed<font color="#E5E5E5"> great right you</font><font color="#CCCCCC"> can get much more</font>

815
00:31:29,260 --> 00:31:35,500
<font color="#CCCCCC">immediate feedback from that particular</font>

816
00:31:31,630 --> 00:31:37,330
<font color="#E5E5E5">process in a much more easy way</font><font color="#CCCCCC"> so now</font>

817
00:31:35,500 --> 00:31:38,770
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a pen test pipeline so for</font>

818
00:31:37,330 --> 00:31:42,010
instance this is<font color="#E5E5E5"> what I'm talking about</font>

819
00:31:38,770 --> 00:31:44,620
so run nmap first print the results<font color="#CCCCCC"> run</font>

820
00:31:42,010 --> 00:31:46,870
<font color="#CCCCCC">zap get</font><font color="#E5E5E5"> the results and you're done so</font>

821
00:31:44,620 --> 00:31:48,760
you have some<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these patterns that you</font>

822
00:31:46,870 --> 00:31:53,409
can<font color="#E5E5E5"> merge so let me just show you a</font>

823
00:31:48,760 --> 00:31:54,910
<font color="#E5E5E5">quick demo of this as well and I don't</font>

824
00:31:53,410 --> 00:32:01,240
<font color="#E5E5E5">have too much time so I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> kind</font>

825
00:31:54,910 --> 00:32:03,430
of run<font color="#CCCCCC"> through this demo</font><font color="#E5E5E5"> so this is</font>

826
00:32:01,240 --> 00:32:07,740
actually if you<font color="#CCCCCC"> look at the script and</font>

827
00:32:03,430 --> 00:32:10,660
<font color="#E5E5E5">I'll show you the script as well is a</font>

828
00:32:07,740 --> 00:32:14,200
yeah this<font color="#E5E5E5"> is selenium script what I did</font>

829
00:32:10,660 --> 00:32:15,880
now<font color="#E5E5E5"> was just a web service</font><font color="#CCCCCC"> it ran some</font>

830
00:32:14,200 --> 00:32:17,740
web service request with an HTTP client

831
00:32:15,880 --> 00:32:20,020
<font color="#CCCCCC">but this is</font><font color="#E5E5E5"> actually a selenium script</font>

832
00:32:17,740 --> 00:32:21,580
<font color="#E5E5E5">so what this does is</font><font color="#CCCCCC"> that it runs an</font>

833
00:32:20,020 --> 00:32:23,410
nmap<font color="#CCCCCC"> port scan against that particular</font>

834
00:32:21,580 --> 00:32:25,570
vulnerable app it's an intentionally

835
00:32:23,410 --> 00:32:28,990
vulnerable app on my system<font color="#E5E5E5"> it runs the</font>

836
00:32:25,570 --> 00:32:31,360
port scan<font color="#E5E5E5"> then it starts zap then it</font>

837
00:32:28,990 --> 00:32:34,090
creates a browser<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> case I'm using</font>

838
00:32:31,360 --> 00:32:36,459
phantom<font color="#CCCCCC"> j/s you can use firefox you</font><font color="#E5E5E5"> can</font>

839
00:32:34,090 --> 00:32:38,290
use<font color="#CCCCCC"> chrome</font><font color="#E5E5E5"> in headless in the headless</font>

840
00:32:36,460 --> 00:32:40,090
mode<font color="#E5E5E5"> so it starts phantom</font><font color="#CCCCCC"> jeaious which</font>

841
00:32:38,290 --> 00:32:43,030
is by<font color="#CCCCCC"> default a headless browser and</font>

842
00:32:40,090 --> 00:32:46,149
then it logs into the application visit

843
00:32:43,030 --> 00:32:48,639
some random pages<font color="#E5E5E5"> start</font><font color="#CCCCCC"> Subs app</font><font color="#E5E5E5"> runs</font>

844
00:32:46,150 --> 00:32:51,040
<font color="#E5E5E5">app and terminates the scan after</font>

845
00:32:48,640 --> 00:32:53,110
<font color="#CCCCCC">writing a result</font><font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> just run this</font>

846
00:32:51,040 --> 00:32:56,370
<font color="#E5E5E5">script and show you how that whole</font>

847
00:32:53,110 --> 00:32:56,370
<font color="#E5E5E5">pipeline process works</font>

848
00:33:05,910 --> 00:33:13,320
so this I just<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to invoke the script</font>

849
00:33:08,530 --> 00:33:13,320
<font color="#CCCCCC">and it starts with</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> nmap ports</font><font color="#E5E5E5"> can</font>

850
00:33:14,040 --> 00:33:20,020
obviously<font color="#CCCCCC"> I'm not running a</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> more</font>

851
00:33:18,610 --> 00:33:22,360
powerful and map ports<font color="#CCCCCC"> Kay I'm just</font>

852
00:33:20,020 --> 00:33:24,940
running the default<font color="#CCCCCC"> then it starts</font>

853
00:33:22,360 --> 00:33:27,850
<font color="#CCCCCC">zap-zap is started</font><font color="#E5E5E5"> up again as you can</font>

854
00:33:24,940 --> 00:33:29,500
<font color="#CCCCCC">see and then it runs</font><font color="#E5E5E5"> all of the other</font>

855
00:33:27,850 --> 00:33:32,320
stuff<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> login its going to</font>

856
00:33:29,500 --> 00:33:35,410
<font color="#CCCCCC">open up the URL pretty soon it's</font><font color="#E5E5E5"> gonna</font>

857
00:33:32,320 --> 00:33:39,689
<font color="#CCCCCC">login</font><font color="#E5E5E5"> to the app very soon and it's</font>

858
00:33:35,410 --> 00:33:39,690
<font color="#E5E5E5">gonna start the active scan very soon</font>

859
00:33:40,170 --> 00:33:44,800
<font color="#CCCCCC">yes it opened up the login URL it's</font>

860
00:33:43,570 --> 00:33:46,870
going to<font color="#CCCCCC"> login with those particular</font>

861
00:33:44,800 --> 00:33:50,080
credentials<font color="#E5E5E5"> so even if you are testing</font>

862
00:33:46,870 --> 00:33:51,669
single page apps or<font color="#E5E5E5"> you know web</font>

863
00:33:50,080 --> 00:33:53,500
<font color="#E5E5E5">services or something</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little more</font>

864
00:33:51,670 --> 00:33:55,480
<font color="#E5E5E5">complex that your spider is</font><font color="#CCCCCC"> not going to</font>

865
00:33:53,500 --> 00:33:57,280
be able to<font color="#E5E5E5"> ever catch you want to run it</font>

866
00:33:55,480 --> 00:33:59,350
<font color="#E5E5E5">with specific inputs that give you</font>

867
00:33:57,280 --> 00:34:01,360
specific outputs that you<font color="#E5E5E5"> can use for</font><font color="#CCCCCC"> a</font>

868
00:33:59,350 --> 00:34:03,250
more efficient more effective scanning

869
00:34:01,360 --> 00:34:04,899
process you can<font color="#E5E5E5"> use something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this</font>

870
00:34:03,250 --> 00:34:07,000
because<font color="#E5E5E5"> it becomes very easy very easy</font>

871
00:34:04,900 --> 00:34:08,560
<font color="#E5E5E5">to scale and you can give this as a</font>

872
00:34:07,000 --> 00:34:11,260
<font color="#E5E5E5">recipe write it and just put this in the</font>

873
00:34:08,560 --> 00:34:14,020
CI pipeline<font color="#CCCCCC"> in Jenkins in fact robot has</font>

874
00:34:11,260 --> 00:34:16,960
a Jenkins<font color="#E5E5E5"> plugin so you can just put</font>

875
00:34:14,020 --> 00:34:18,730
this in your Jenkins box and just<font color="#E5E5E5"> say</font>

876
00:34:16,960 --> 00:34:19,990
invoke the robot<font color="#CCCCCC"> plug-in and say run</font>

877
00:34:18,730 --> 00:34:23,560
this<font color="#CCCCCC"> particular script</font><font color="#E5E5E5"> every night</font>

878
00:34:19,989 --> 00:34:25,678
<font color="#E5E5E5">that's it so it becomes</font><font color="#CCCCCC"> a lot more easy</font>

879
00:34:23,560 --> 00:34:30,100
<font color="#E5E5E5">to do so as you can</font><font color="#CCCCCC"> see it's it's</font><font color="#E5E5E5"> still</font>

880
00:34:25,679 --> 00:34:31,750
walking through the app<font color="#E5E5E5"> I should have</font>

881
00:34:30,100 --> 00:34:35,350
eliminated the GS but I don't know why I

882
00:34:31,750 --> 00:34:37,000
<font color="#E5E5E5">just spidered everything anyway so so</font>

883
00:34:35,350 --> 00:34:40,949
it's<font color="#CCCCCC"> running all of this stuff</font><font color="#E5E5E5"> and it</font>

884
00:34:37,000 --> 00:34:40,949
should now start<font color="#E5E5E5"> the active scan as well</font>

885
00:34:47,529 --> 00:34:52,728
so while this is<font color="#E5E5E5"> running I'm just going</font>

886
00:34:49,998 --> 00:34:58,578
to<font color="#E5E5E5"> finish up the rest of it because it's</font>

887
00:34:52,728 --> 00:35:00,410
going to<font color="#E5E5E5"> take a little bit of time so</font>

888
00:34:58,579 --> 00:35:02,599
yeah so you are on that<font color="#E5E5E5"> so if one</font><font color="#CCCCCC"> of</font>

889
00:35:00,410 --> 00:35:04,129
<font color="#E5E5E5">these activities fail it would it would</font>

890
00:35:02,599 --> 00:35:05,749
essentially throw a fail<font color="#CCCCCC"> and then it</font>

891
00:35:04,130 --> 00:35:07,880
would give you a report with<font color="#CCCCCC"> the fail</font>

892
00:35:05,749 --> 00:35:10,549
notification<font color="#E5E5E5"> now the reports are pretty</font>

893
00:35:07,880 --> 00:35:12,170
good<font color="#E5E5E5"> they look like like so I'm going to</font>

894
00:35:10,549 --> 00:35:16,190
show<font color="#E5E5E5"> you how the default</font><font color="#CCCCCC"> report looks</font>

895
00:35:12,170 --> 00:35:18,589
and it's pretty<font color="#E5E5E5"> intuitive so this is</font>

896
00:35:16,190 --> 00:35:20,989
what our<font color="#E5E5E5"> default report looks like right</font>

897
00:35:18,589 --> 00:35:24,229
<font color="#E5E5E5">so you have all</font><font color="#CCCCCC"> of these different tasks</font>

898
00:35:20,989 --> 00:35:27,859
that<font color="#E5E5E5"> I've run and you can see the Zap</font>

899
00:35:24,229 --> 00:35:30,259
scan results if you want<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> it it</font>

900
00:35:27,859 --> 00:35:31,999
<font color="#E5E5E5">gives you each of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> test keywords that</font>

901
00:35:30,259 --> 00:35:33,680
<font color="#E5E5E5">you've run</font><font color="#CCCCCC"> so each of the keywords has</font>

902
00:35:31,999 --> 00:35:35,988
so if you are logging stuff<font color="#E5E5E5"> within the</font>

903
00:35:33,680 --> 00:35:37,399
<font color="#CCCCCC">keyword</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> get a detail</font><font color="#E5E5E5"> of all of</font>

904
00:35:35,989 --> 00:35:40,249
the different keywords<font color="#E5E5E5"> that you've run</font>

905
00:35:37,400 --> 00:35:42,729
again so you see that<font color="#E5E5E5"> it gives me a scan</font>

906
00:35:40,249 --> 00:35:45,799
status and then it's generated a report

907
00:35:42,729 --> 00:35:49,879
so it's generated a report<font color="#E5E5E5"> and then it's</font>

908
00:35:45,799 --> 00:35:52,099
killed zap<font color="#CCCCCC"> kill the browser etcetera</font><font color="#E5E5E5"> so</font>

909
00:35:49,880 --> 00:35:54,289
it gives you<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> it's it's</font>

910
00:35:52,099 --> 00:35:55,670
pretty<font color="#CCCCCC"> useful because you get running</font>

911
00:35:54,289 --> 00:35:57,739
status of what's happening and what's

912
00:35:55,670 --> 00:35:59,150
happened with that particular script<font color="#E5E5E5"> you</font>

913
00:35:57,739 --> 00:36:00,769
know<font color="#E5E5E5"> whether something</font><font color="#CCCCCC"> is failed</font><font color="#E5E5E5"> let's</font>

914
00:35:59,150 --> 00:36:02,660
<font color="#E5E5E5">say a UI component is changed</font>

915
00:36:00,769 --> 00:36:04,129
you you you limit<font color="#CCCCCC"> it</font><font color="#E5E5E5"> your obviously it</font>

916
00:36:02,660 --> 00:36:05,989
would fail it<font color="#E5E5E5"> will tell you that this</font>

917
00:36:04,130 --> 00:36:07,749
particular<font color="#E5E5E5"> script fail the good thing</font>

918
00:36:05,989 --> 00:36:10,279
with this is<font color="#E5E5E5"> that since it's modular</font>

919
00:36:07,749 --> 00:36:11,779
<font color="#E5E5E5">failing of one of these test</font><font color="#CCCCCC"> cases is</font>

920
00:36:10,279 --> 00:36:14,539
not<font color="#E5E5E5"> going to result in your entire test</font>

921
00:36:11,779 --> 00:36:15,739
case or your<font color="#E5E5E5"> entire script failing so</font>

922
00:36:14,539 --> 00:36:16,729
it's just going<font color="#E5E5E5"> to say that okay that</font>

923
00:36:15,739 --> 00:36:23,109
failed but I'm still going to<font color="#E5E5E5"> continue</font>

924
00:36:16,729 --> 00:36:23,109
<font color="#CCCCCC">as much as possible and run</font><font color="#E5E5E5"> right</font>

925
00:36:29,890 --> 00:36:34,390
yeah so that's the<font color="#CCCCCC"> idea what I</font>

926
00:36:32,599 --> 00:36:36,890
eventually want<font color="#E5E5E5"> to do is create a</font>

927
00:36:34,390 --> 00:36:38,960
<font color="#E5E5E5">pipeline of tools that</font><font color="#CCCCCC"> can be used</font><font color="#E5E5E5"> with</font>

928
00:36:36,890 --> 00:36:40,910
robot<font color="#CCCCCC"> framework</font><font color="#E5E5E5"> right now</font><font color="#CCCCCC"> Zapp</font><font color="#E5E5E5"> is</font>

929
00:36:38,960 --> 00:36:42,380
something that I already have a<font color="#CCCCCC"> bump</font><font color="#E5E5E5"> is</font>

930
00:36:40,910 --> 00:36:44,359
pretty much done I think<font color="#CCCCCC"> I just need to</font>

931
00:36:42,380 --> 00:36:46,130
<font color="#CCCCCC">put some final touches on that</font>

932
00:36:44,359 --> 00:36:49,549
Arachne and all of that<font color="#E5E5E5"> stuff is still</font>

933
00:36:46,130 --> 00:36:50,930
<font color="#E5E5E5">not done yeah so parameter is the</font>

934
00:36:49,550 --> 00:36:55,490
application<font color="#E5E5E5"> security testing so you can</font>

935
00:36:50,930 --> 00:36:57,529
run even<font color="#CCCCCC"> your custom scripts so instead</font>

936
00:36:55,490 --> 00:36:59,509
of creating<font color="#CCCCCC"> them as</font><font color="#E5E5E5"> PDFs create them as</font>

937
00:36:57,530 --> 00:37:02,660
regression scripts<font color="#CCCCCC"> run the entire thing</font>

938
00:36:59,510 --> 00:37:03,920
as part of one<font color="#E5E5E5"> single test case or one</font>

939
00:37:02,660 --> 00:37:06,618
<font color="#E5E5E5">single test suite where you say that</font>

940
00:37:03,920 --> 00:37:08,540
<font color="#E5E5E5">okay run all this automation first then</font>

941
00:37:06,619 --> 00:37:10,190
check for<font color="#CCCCCC"> these securities</font>

942
00:37:08,540 --> 00:37:11,900
you know these<font color="#CCCCCC"> particular security</font><font color="#E5E5E5"> flaws</font>

943
00:37:10,190 --> 00:37:13,760
<font color="#E5E5E5">that</font><font color="#CCCCCC"> have been found by my pen testers</font>

944
00:37:11,900 --> 00:37:16,790
to say<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> this authorization fly still</font>

945
00:37:13,760 --> 00:37:18,680
open this crypto fly still you know<font color="#CCCCCC"> out</font>

946
00:37:16,790 --> 00:37:24,140
<font color="#CCCCCC">there in the</font><font color="#E5E5E5"> wild</font><font color="#CCCCCC"> whatever so you can</font>

947
00:37:18,680 --> 00:37:27,310
still run the entire set of events so

948
00:37:24,140 --> 00:37:28,520
some<font color="#E5E5E5"> questions that I kind of preempted</font>

949
00:37:27,310 --> 00:37:32,089
<font color="#E5E5E5">one</font>

950
00:37:28,520 --> 00:37:35,480
<font color="#E5E5E5">why not BDD BDD was definitely an</font><font color="#CCCCCC"> option</font>

951
00:37:32,089 --> 00:37:37,339
that<font color="#CCCCCC"> I was going</font><font color="#E5E5E5"> with but I did not like</font>

952
00:37:35,480 --> 00:37:38,810
<font color="#E5E5E5">BDD so much to be honest I'm sorry if</font>

953
00:37:37,339 --> 00:37:41,390
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> gonna offend a lot</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> people in the</font>

954
00:37:38,810 --> 00:37:44,299
room ability restricts you to a syntax

955
00:37:41,390 --> 00:37:47,299
<font color="#E5E5E5">right given this when this happens then</font>

956
00:37:44,300 --> 00:37:48,950
do this now<font color="#E5E5E5"> with this you</font><font color="#CCCCCC"> don't you're</font>

957
00:37:47,300 --> 00:37:50,450
<font color="#CCCCCC">not really restricted to any syntax</font><font color="#E5E5E5"> is</font>

958
00:37:48,950 --> 00:37:52,970
<font color="#CCCCCC">just saying call this call that it's</font>

959
00:37:50,450 --> 00:37:56,089
more<font color="#E5E5E5"> data-driven</font><font color="#CCCCCC"> whereas</font><font color="#E5E5E5"> behavior BDD is</font>

960
00:37:52,970 --> 00:37:57,290
<font color="#E5E5E5">more behavioral I did not need something</font>

961
00:37:56,089 --> 00:37:58,720
as complex<font color="#E5E5E5"> as that I just needed</font>

962
00:37:57,290 --> 00:38:01,460
<font color="#E5E5E5">something simpler so I went with this</font>

963
00:37:58,720 --> 00:38:03,649
all tools easy to integrate<font color="#E5E5E5"> it depends</font>

964
00:38:01,460 --> 00:38:06,230
if the tool has good<font color="#E5E5E5"> API</font><font color="#CCCCCC"> france's</font><font color="#E5E5E5"> app</font><font color="#CCCCCC"> as</font>

965
00:38:03,650 --> 00:38:08,660
amazing<font color="#E5E5E5"> api so it's easier to integrate</font>

966
00:38:06,230 --> 00:38:10,339
yes but typically if they have some<font color="#E5E5E5"> kind</font>

967
00:38:08,660 --> 00:38:12,379
of integration<font color="#E5E5E5"> point some kind of</font><font color="#CCCCCC"> api</font>

968
00:38:10,339 --> 00:38:13,730
some kind<font color="#E5E5E5"> of flat files that you can</font>

969
00:38:12,380 --> 00:38:15,950
work with<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can even do something with</font>

970
00:38:13,730 --> 00:38:17,270
that<font color="#E5E5E5"> parallel execution is possible so</font>

971
00:38:15,950 --> 00:38:20,299
let<font color="#CCCCCC"> us say you want to</font><font color="#E5E5E5"> speed up</font>

972
00:38:17,270 --> 00:38:21,829
execution<font color="#CCCCCC"> parallely so let's say you</font>

973
00:38:20,300 --> 00:38:22,849
want to run and map separately wanna run

974
00:38:21,829 --> 00:38:24,020
<font color="#E5E5E5">this separately one of them that</font>

975
00:38:22,849 --> 00:38:26,000
<font color="#E5E5E5">separately you can</font><font color="#CCCCCC"> actually do</font><font color="#E5E5E5"> that</font>

976
00:38:24,020 --> 00:38:29,930
there<font color="#E5E5E5"> is a integration to robot called</font>

977
00:38:26,000 --> 00:38:33,109
<font color="#CCCCCC">pay bot</font><font color="#E5E5E5"> the PA</font><font color="#CCCCCC"> b OT pay bot allows you</font>

978
00:38:29,930 --> 00:38:34,759
to run in you know<font color="#CCCCCC"> in as a multi-process</font>

979
00:38:33,109 --> 00:38:36,680
kind of thing with parallel<font color="#E5E5E5"> execution</font>

980
00:38:34,760 --> 00:38:37,590
<font color="#CCCCCC">the next thing i want to</font><font color="#E5E5E5"> do is run all</font>

981
00:38:36,680 --> 00:38:39,419
of<font color="#CCCCCC"> this in darker</font>

982
00:38:37,590 --> 00:38:41,310
something that I'm really<font color="#CCCCCC"> working</font><font color="#E5E5E5"> on</font>

983
00:38:39,420 --> 00:38:43,260
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we're darker you really are</font>

984
00:38:41,310 --> 00:38:45,210
achieving all<font color="#E5E5E5"> of this without</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

985
00:38:43,260 --> 00:38:46,950
<font color="#CCCCCC">unnecessary</font><font color="#E5E5E5"> dependencies having to be</font>

986
00:38:45,210 --> 00:38:49,170
installed<font color="#E5E5E5"> on every single machine so</font>

987
00:38:46,950 --> 00:38:52,200
<font color="#E5E5E5">that's something I'm going with the</font>

988
00:38:49,170 --> 00:38:53,820
future obviously<font color="#E5E5E5"> my team and I</font><font color="#CCCCCC"> will be</font>

989
00:38:52,200 --> 00:38:55,649
working<font color="#E5E5E5"> a lot on robot framework we've</font>

990
00:38:53,820 --> 00:38:57,780
seen a great deal<font color="#CCCCCC"> of</font><font color="#E5E5E5"> value with a lot of</font>

991
00:38:55,650 --> 00:38:59,910
our clients<font color="#CCCCCC"> as</font><font color="#E5E5E5"> well and we've been</font>

992
00:38:57,780 --> 00:39:02,100
<font color="#E5E5E5">working on this API I highly</font><font color="#CCCCCC"> encourage</font>

993
00:38:59,910 --> 00:39:05,609
you<font color="#E5E5E5"> to go and download some of the stuff</font>

994
00:39:02,100 --> 00:39:07,319
that<font color="#E5E5E5"> we've put out definitely</font><font color="#CCCCCC"> happy</font><font color="#E5E5E5"> to</font>

995
00:39:05,610 --> 00:39:10,650
have more people<font color="#E5E5E5"> contribute more people</font>

996
00:39:07,320 --> 00:39:12,720
<font color="#E5E5E5">us ideas that we can go obviously be a</font>

997
00:39:10,650 --> 00:39:15,210
part of this whole<font color="#CCCCCC"> journey with us</font><font color="#E5E5E5"> with</font>

998
00:39:12,720 --> 00:39:16,950
that<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very much</font>

999
00:39:15,210 --> 00:39:19,230
I really you've been<font color="#CCCCCC"> a great audience</font>

1000
00:39:16,950 --> 00:39:28,890
thank you I hope you<font color="#E5E5E5"> guys found this</font>

1001
00:39:19,230 --> 00:39:30,890
useful<font color="#E5E5E5"> yes yes</font><font color="#CCCCCC"> I forgot</font><font color="#E5E5E5"> to put it on</font>

1002
00:39:28,890 --> 00:39:33,240
<font color="#CCCCCC">that but yeah you</font><font color="#E5E5E5"> can just go to my</font>

1003
00:39:30,890 --> 00:39:35,819
Twitter<font color="#CCCCCC"> and you'll find a bunch</font><font color="#E5E5E5"> of</font>

1004
00:39:33,240 --> 00:39:37,319
github links tweeted there<font color="#CCCCCC"> I can give it</font>

1005
00:39:35,820 --> 00:39:42,600
to otherwise<font color="#E5E5E5"> it's not on my presentation</font>

1006
00:39:37,320 --> 00:39:44,810
sorry any other questions thank you so

1007
00:39:42,600 --> 00:39:44,810
much

1008
00:39:48,570 --> 00:39:57,649
[Music]

