1
00:00:00,950 --> 00:00:15,830
[Music]

2
00:00:17,700 --> 00:00:24,340
hello everyone my name is<font color="#E5E5E5"> mayank I'm a</font>

3
00:00:22,030 --> 00:00:25,930
<font color="#E5E5E5">security researcher</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> worked for this</font>

4
00:00:24,340 --> 00:00:28,509
company<font color="#E5E5E5"> called stealth security</font><font color="#CCCCCC"> and</font>

5
00:00:25,930 --> 00:00:31,420
today I'll be<font color="#E5E5E5"> talking about how to break</font>

6
00:00:28,510 --> 00:00:33,250
fraud in about detection<font color="#CCCCCC"> solutions it's</font>

7
00:00:31,420 --> 00:00:36,489
a bit<font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> of motivation and background</font>

8
00:00:33,250 --> 00:00:38,440
<font color="#E5E5E5">for this talk online fraud is a pretty</font>

9
00:00:36,489 --> 00:00:40,599
big problem<font color="#E5E5E5"> like ever since the</font>

10
00:00:38,440 --> 00:00:42,459
beginning<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> internet people have</font>

11
00:00:40,600 --> 00:00:44,470
poured<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> whole like millions and</font>

12
00:00:42,460 --> 00:00:47,170
<font color="#CCCCCC">millions of dollars</font><font color="#E5E5E5"> to solve this</font>

13
00:00:44,470 --> 00:00:49,420
particular problem<font color="#E5E5E5"> like even a couple of</font>

14
00:00:47,170 --> 00:00:51,760
days ago one of the fraud detection

15
00:00:49,420 --> 00:00:53,980
companies got acquired<font color="#E5E5E5"> for more than</font>

16
00:00:51,760 --> 00:00:56,800
<font color="#E5E5E5">eight hundred million dollars so this is</font>

17
00:00:53,980 --> 00:00:59,290
a this<font color="#CCCCCC"> is a big</font><font color="#E5E5E5"> problem</font><font color="#CCCCCC"> about detection</font>

18
00:00:56,800 --> 00:01:01,209
<font color="#CCCCCC">is another another emerging problem</font>

19
00:00:59,290 --> 00:01:03,760
where companies are<font color="#E5E5E5"> trying to defend</font>

20
00:01:01,210 --> 00:01:05,920
<font color="#E5E5E5">against automated programs they could be</font>

21
00:01:03,760 --> 00:01:07,259
for example<font color="#E5E5E5"> scraping their website so</font>

22
00:01:05,920 --> 00:01:09,660
they were would be<font color="#E5E5E5"> launching other</font>

23
00:01:07,259 --> 00:01:14,020
automated attacks

24
00:01:09,660 --> 00:01:15,729
so more<font color="#E5E5E5"> than a year</font><font color="#CCCCCC"> ago I</font><font color="#E5E5E5"> started</font>

25
00:01:14,020 --> 00:01:17,979
looking at<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the implementations</font>

26
00:01:15,729 --> 00:01:19,500
<font color="#E5E5E5">of these short and</font><font color="#CCCCCC"> broad detection</font>

27
00:01:17,979 --> 00:01:24,429
solutions<font color="#E5E5E5"> and I've found certain</font>

28
00:01:19,500 --> 00:01:26,799
security issues and once<font color="#E5E5E5"> I looked at</font>

29
00:01:24,430 --> 00:01:28,900
multiple<font color="#E5E5E5"> of the solutions certain common</font>

30
00:01:26,799 --> 00:01:32,170
<font color="#CCCCCC">security issues or common security</font>

31
00:01:28,900 --> 00:01:34,470
<font color="#E5E5E5">attacks they they emerged</font><font color="#CCCCCC"> so this is</font>

32
00:01:32,170 --> 00:01:36,400
basically this talk is<font color="#CCCCCC"> culmination of</font>

33
00:01:34,470 --> 00:01:38,830
common security<font color="#E5E5E5"> issues which I've found</font>

34
00:01:36,400 --> 00:01:40,840
<font color="#E5E5E5">with multiple fraud and bought detection</font>

35
00:01:38,830 --> 00:01:44,650
solutions<font color="#E5E5E5"> which are deployed in the in</font>

36
00:01:40,840 --> 00:01:46,960
the real world so let's go over<font color="#E5E5E5"> the</font>

37
00:01:44,650 --> 00:01:48,850
agenda<font color="#E5E5E5"> for this talk first of all</font><font color="#CCCCCC"> I will</font>

38
00:01:46,960 --> 00:01:51,970
go<font color="#CCCCCC"> over some of the architectural</font>

39
00:01:48,850 --> 00:01:53,890
overviews<font color="#E5E5E5"> of many of these solutions so</font>

40
00:01:51,970 --> 00:01:57,580
one thing<font color="#E5E5E5"> to mention is</font><font color="#CCCCCC"> that these</font>

41
00:01:53,890 --> 00:01:59,829
solutions are not only<font color="#E5E5E5"> vendors that are</font>

42
00:01:57,580 --> 00:02:02,920
actually in-house fraud and bought

43
00:01:59,829 --> 00:02:04,750
detection<font color="#CCCCCC"> solutions like by giant</font>

44
00:02:02,920 --> 00:02:08,110
banking websites they have built their

45
00:02:04,750 --> 00:02:09,699
own solutions as well<font color="#CCCCCC"> the first of</font><font color="#E5E5E5"> all I</font>

46
00:02:08,110 --> 00:02:11,500
has go over some of<font color="#CCCCCC"> the common</font>

47
00:02:09,699 --> 00:02:14,350
architectures which are<font color="#E5E5E5"> see which are</font>

48
00:02:11,500 --> 00:02:16,209
deployed<font color="#CCCCCC"> in the real world then I will</font>

49
00:02:14,350 --> 00:02:18,489
go<font color="#E5E5E5"> over the third</font><font color="#CCCCCC"> model</font><font color="#E5E5E5"> then the threat</font>

50
00:02:16,209 --> 00:02:19,930
model<font color="#E5E5E5"> I will introduce what</font><font color="#CCCCCC"> are the</font>

51
00:02:18,489 --> 00:02:21,760
exact goals of the attacker in this

52
00:02:19,930 --> 00:02:23,980
particular scenario<font color="#E5E5E5"> what the tiger is</font>

53
00:02:21,760 --> 00:02:25,750
trying to<font color="#E5E5E5"> achieve and then exactly what</font>

54
00:02:23,980 --> 00:02:27,510
are the capabilities of<font color="#E5E5E5"> the attacker in</font>

55
00:02:25,750 --> 00:02:29,680
this in this game

56
00:02:27,510 --> 00:02:31,810
so once I've<font color="#CCCCCC"> defined the threat model</font>

57
00:02:29,680 --> 00:02:34,210
<font color="#CCCCCC">and once I've defined</font><font color="#E5E5E5"> the common</font>

58
00:02:31,810 --> 00:02:36,490
architectures we see in the real world

59
00:02:34,210 --> 00:02:38,200
<font color="#CCCCCC">I'll talk about the</font><font color="#E5E5E5"> security issues</font>

60
00:02:36,490 --> 00:02:40,300
which are I've given given these

61
00:02:38,200 --> 00:02:41,859
scenarios<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'll talk</font><font color="#CCCCCC"> about common</font>

62
00:02:40,300 --> 00:02:44,740
common<font color="#CCCCCC"> security attacks which work</font>

63
00:02:41,860 --> 00:02:46,150
against many<font color="#E5E5E5"> of these solutions</font><font color="#CCCCCC"> then at</font>

64
00:02:44,740 --> 00:02:50,890
the end I'll talk about<font color="#E5E5E5"> some of the</font>

65
00:02:46,150 --> 00:02:52,570
<font color="#E5E5E5">takeaways all right so let's start</font><font color="#CCCCCC"> off</font>

66
00:02:50,890 --> 00:02:54,220
<font color="#CCCCCC">with</font><font color="#E5E5E5"> defining the problem so for our</font>

67
00:02:52,570 --> 00:02:56,019
<font color="#CCCCCC">detection as many of you know is</font><font color="#E5E5E5"> busy</font>

68
00:02:54,220 --> 00:02:58,350
<font color="#E5E5E5">here trying to defend against fraudulent</font>

69
00:02:56,020 --> 00:03:00,940
<font color="#E5E5E5">activities so these could be fraudulent</font>

70
00:02:58,350 --> 00:03:04,450
<font color="#E5E5E5">logins they could be fraudulent payments</font>

71
00:03:00,940 --> 00:03:06,790
<font color="#E5E5E5">for example if you think about</font><font color="#CCCCCC"> of like a</font>

72
00:03:04,450 --> 00:03:10,089
banking application<font color="#CCCCCC"> you might be looking</font>

73
00:03:06,790 --> 00:03:11,829
for fraudulent logins<font color="#CCCCCC"> so for example a</font>

74
00:03:10,090 --> 00:03:13,780
<font color="#E5E5E5">bank account is is extremely</font><font color="#CCCCCC"> high</font><font color="#E5E5E5"> value</font>

75
00:03:11,830 --> 00:03:15,310
<font color="#CCCCCC">so</font><font color="#E5E5E5"> even though you have</font><font color="#CCCCCC"> your normal</font>

76
00:03:13,780 --> 00:03:17,560
username and password as the

77
00:03:15,310 --> 00:03:20,350
authentication measure<font color="#E5E5E5"> banks are</font><font color="#CCCCCC"> looking</font>

78
00:03:17,560 --> 00:03:22,330
for<font color="#E5E5E5"> even</font><font color="#CCCCCC"> more interesting scenarios to</font>

79
00:03:20,350 --> 00:03:24,730
take detect account takeovers

80
00:03:22,330 --> 00:03:27,400
for example if suppose every time I log

81
00:03:24,730 --> 00:03:29,859
in my banking account<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> login</font><font color="#E5E5E5"> from</font>

82
00:03:27,400 --> 00:03:33,160
San Francisco<font color="#CCCCCC"> and certainly there is</font><font color="#E5E5E5"> a</font>

83
00:03:29,860 --> 00:03:36,370
login attempt from say an IP address<font color="#E5E5E5"> in</font>

84
00:03:33,160 --> 00:03:38,320
in LA<font color="#CCCCCC"> or in</font><font color="#E5E5E5"> Israel</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> it's potentially</font>

85
00:03:36,370 --> 00:03:42,000
suspicious<font color="#E5E5E5"> so it might for example</font>

86
00:03:38,320 --> 00:03:44,380
trigger the fraud detection<font color="#E5E5E5"> solution</font>

87
00:03:42,000 --> 00:03:47,230
like for<font color="#E5E5E5"> example for payments like for</font>

88
00:03:44,380 --> 00:03:49,030
credit card payments<font color="#CCCCCC"> there are any so</font>

89
00:03:47,230 --> 00:03:51,100
any fraudulent or any suspicious

90
00:03:49,030 --> 00:03:52,390
activities on<font color="#CCCCCC"> our credit</font><font color="#E5E5E5"> cards it would</font>

91
00:03:51,100 --> 00:03:56,049
trigger for example the fraud detection

92
00:03:52,390 --> 00:03:57,399
solution<font color="#CCCCCC"> and then one thing to note to</font>

93
00:03:56,050 --> 00:03:59,200
<font color="#E5E5E5">mention is that usually</font><font color="#CCCCCC"> the fraud</font>

94
00:03:57,400 --> 00:04:01,150
detection solutions<font color="#CCCCCC"> they're looking for</font>

95
00:03:59,200 --> 00:04:03,519
anomalies<font color="#E5E5E5"> and usually they are looking</font>

96
00:04:01,150 --> 00:04:05,260
for anomalies<font color="#E5E5E5"> for a particular user like</font>

97
00:04:03,520 --> 00:04:08,230
as I<font color="#CCCCCC"> mentioned</font><font color="#E5E5E5"> if for example</font><font color="#CCCCCC"> I always</font>

98
00:04:05,260 --> 00:04:10,840
<font color="#CCCCCC">login from</font><font color="#E5E5E5"> an IP in San Francisco</font><font color="#CCCCCC"> and</font>

99
00:04:08,230 --> 00:04:13,750
there<font color="#E5E5E5"> is an anomalous activity like</font>

100
00:04:10,840 --> 00:04:15,910
given my past past behavioral history of

101
00:04:13,750 --> 00:04:17,950
me logging in from<font color="#E5E5E5"> only that particular</font>

102
00:04:15,910 --> 00:04:19,750
<font color="#CCCCCC">region it's something completely new</font>

103
00:04:17,950 --> 00:04:22,330
<font color="#CCCCCC">happen</font><font color="#E5E5E5"> so something suspicious happens</font>

104
00:04:19,750 --> 00:04:23,920
<font color="#CCCCCC">these</font><font color="#E5E5E5"> are the kind of activities which</font>

105
00:04:22,330 --> 00:04:27,460
trigger these kind<font color="#E5E5E5"> of anomaly detection</font>

106
00:04:23,920 --> 00:04:28,690
systems<font color="#E5E5E5"> so for</font><font color="#CCCCCC"> this this talk I will</font>

107
00:04:27,460 --> 00:04:30,310
mostly<font color="#E5E5E5"> focus on fraud detection</font>

108
00:04:28,690 --> 00:04:32,170
<font color="#E5E5E5">solutions which are</font><font color="#CCCCCC"> focused on</font>

109
00:04:30,310 --> 00:04:34,850
<font color="#E5E5E5">authentication so they are looking for</font>

110
00:04:32,170 --> 00:04:38,120
fraudulent logins

111
00:04:34,850 --> 00:04:41,360
so another<font color="#E5E5E5"> related problem is body</font>

112
00:04:38,120 --> 00:04:43,820
<font color="#CCCCCC">tension</font><font color="#E5E5E5"> where what you're trying to do</font>

113
00:04:41,360 --> 00:04:46,550
is you're<font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to defend against watts</font>

114
00:04:43,820 --> 00:04:47,960
<font color="#CCCCCC">so these are automated programs</font><font color="#E5E5E5"> which</font>

115
00:04:46,550 --> 00:04:50,660
could be launching different kind of

116
00:04:47,960 --> 00:04:54,380
attacks<font color="#CCCCCC"> for example they could</font><font color="#E5E5E5"> be</font>

117
00:04:50,660 --> 00:04:56,480
launching account takeover attacks<font color="#CCCCCC"> so in</font>

118
00:04:54,380 --> 00:04:58,790
this scenario<font color="#CCCCCC"> so in case of a fraud</font>

119
00:04:56,480 --> 00:05:00,320
detection solution<font color="#E5E5E5"> you can assume</font><font color="#CCCCCC"> that</font>

120
00:04:58,790 --> 00:05:02,000
for<font color="#E5E5E5"> example there</font><font color="#CCCCCC"> is a malware</font><font color="#E5E5E5"> or</font>

121
00:05:00,320 --> 00:05:03,800
something and the attacker is able<font color="#E5E5E5"> to</font>

122
00:05:02,000 --> 00:05:06,200
get<font color="#CCCCCC"> the</font><font color="#E5E5E5"> get the</font><font color="#CCCCCC"> credentials of the user</font>

123
00:05:03,800 --> 00:05:08,330
<font color="#E5E5E5">so there again using the same</font>

124
00:05:06,200 --> 00:05:09,920
credentials to<font color="#CCCCCC"> login</font><font color="#E5E5E5"> but there might be</font>

125
00:05:08,330 --> 00:05:12,340
something suspicious about the login

126
00:05:09,920 --> 00:05:14,630
event<font color="#E5E5E5"> but what detection what happens is</font>

127
00:05:12,340 --> 00:05:17,299
suppose<font color="#E5E5E5"> there is a scenario in which a</font>

128
00:05:14,630 --> 00:05:19,190
particular<font color="#CCCCCC"> company gets compromised</font><font color="#E5E5E5"> say</font>

129
00:05:17,300 --> 00:05:22,100
say for example<font color="#E5E5E5"> LinkedIn got compromised</font>

130
00:05:19,190 --> 00:05:25,520
<font color="#E5E5E5">and their credentials are publicly</font>

131
00:05:22,100 --> 00:05:26,780
leaked online<font color="#E5E5E5"> right so next step what</font>

132
00:05:25,520 --> 00:05:28,990
LinkedIn would do is they would<font color="#E5E5E5"> ask</font><font color="#CCCCCC"> the</font>

133
00:05:26,780 --> 00:05:31,849
<font color="#E5E5E5">reason</font><font color="#CCCCCC"> their users to reset the</font><font color="#E5E5E5"> password</font>

134
00:05:28,990 --> 00:05:34,670
but what happens is people reuse their

135
00:05:31,850 --> 00:05:36,260
passwords<font color="#CCCCCC"> across different</font><font color="#E5E5E5"> websites</font><font color="#CCCCCC"> so</font>

136
00:05:34,670 --> 00:05:38,810
what the bad<font color="#CCCCCC"> guys do is they take an</font>

137
00:05:36,260 --> 00:05:41,150
advantage<font color="#E5E5E5"> of this scenario where they</font>

138
00:05:38,810 --> 00:05:43,310
actually test these lead credentials

139
00:05:41,150 --> 00:05:45,190
across different websites<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example a</font>

140
00:05:43,310 --> 00:05:47,720
<font color="#CCCCCC">particular user they may have the</font><font color="#E5E5E5"> same</font>

141
00:05:45,190 --> 00:05:50,090
credential for the LinkedIn account and

142
00:05:47,720 --> 00:05:51,500
their<font color="#E5E5E5"> banking application and then when</font>

143
00:05:50,090 --> 00:05:53,090
<font color="#E5E5E5">LinkedIn for example got compromised</font>

144
00:05:51,500 --> 00:05:56,180
<font color="#CCCCCC">LinkedIn asked</font><font color="#E5E5E5"> them to reset</font><font color="#CCCCCC"> the</font>

145
00:05:53,090 --> 00:05:57,890
<font color="#CCCCCC">password</font><font color="#E5E5E5"> for LinkedIn but for but</font>

146
00:05:56,180 --> 00:05:59,930
<font color="#E5E5E5">LinkedIn has no idea where they</font><font color="#CCCCCC"> are</font>

147
00:05:57,890 --> 00:06:01,700
<font color="#E5E5E5">using the same</font><font color="#CCCCCC"> password</font><font color="#E5E5E5"> so the user may</font>

148
00:05:59,930 --> 00:06:04,040
<font color="#CCCCCC">not reset the password on the banking</font>

149
00:06:01,700 --> 00:06:07,729
application or another website<font color="#E5E5E5"> so what</font>

150
00:06:04,040 --> 00:06:09,110
these bought what these bad guys<font color="#E5E5E5"> are</font>

151
00:06:07,730 --> 00:06:10,970
doing is<font color="#CCCCCC"> basically they are</font><font color="#E5E5E5"> writing</font>

152
00:06:09,110 --> 00:06:13,190
these automated<font color="#E5E5E5"> programs which would</font>

153
00:06:10,970 --> 00:06:15,230
take in these inputs these giant

154
00:06:13,190 --> 00:06:16,730
credential dumps<font color="#E5E5E5"> and then what they</font>

155
00:06:15,230 --> 00:06:18,740
would do is they would launch<font color="#E5E5E5"> these</font>

156
00:06:16,730 --> 00:06:20,690
<font color="#E5E5E5">again different</font><font color="#CCCCCC"> websites so for example</font>

157
00:06:18,740 --> 00:06:21,940
some some banking application and they

158
00:06:20,690 --> 00:06:24,770
will try to see how<font color="#CCCCCC"> many of</font><font color="#E5E5E5"> these</font>

159
00:06:21,940 --> 00:06:29,840
<font color="#E5E5E5">credentials actually also work against</font>

160
00:06:24,770 --> 00:06:31,460
<font color="#E5E5E5">this other other website right so so in</font>

161
00:06:29,840 --> 00:06:35,659
<font color="#E5E5E5">this scenario basically</font><font color="#CCCCCC"> your</font>

162
00:06:31,460 --> 00:06:37,159
authentication is is at risk<font color="#E5E5E5"> where the</font>

163
00:06:35,660 --> 00:06:39,800
requests<font color="#CCCCCC"> coming in they may</font><font color="#E5E5E5"> not be</font>

164
00:06:37,160 --> 00:06:42,260
necessarily fraudulent but<font color="#E5E5E5"> there would</font>

165
00:06:39,800 --> 00:06:44,630
be so<font color="#E5E5E5"> many requests coming in that you</font>

166
00:06:42,260 --> 00:06:46,340
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to differentiate and you want to</font>

167
00:06:44,630 --> 00:06:48,710
also<font color="#E5E5E5"> protect your users from these sort</font>

168
00:06:46,340 --> 00:06:51,138
of BOTS<font color="#CCCCCC"> so that's one</font><font color="#E5E5E5"> scenario</font>

169
00:06:48,710 --> 00:06:53,479
another scenario is<font color="#CCCCCC"> for example scraping</font>

170
00:06:51,139 --> 00:06:56,570
again going back<font color="#CCCCCC"> to LinkedIn</font><font color="#E5E5E5"> for example</font>

171
00:06:53,479 --> 00:06:59,210
<font color="#E5E5E5">LinkedIn has professional profiles of a</font>

172
00:06:56,570 --> 00:07:01,130
lot of<font color="#E5E5E5"> users right</font><font color="#CCCCCC"> and that's the</font>

173
00:06:59,210 --> 00:07:03,380
critical<font color="#E5E5E5"> piece of data they want to</font>

174
00:07:01,130 --> 00:07:05,180
<font color="#E5E5E5">protect this data but they could</font><font color="#CCCCCC"> be</font>

175
00:07:03,380 --> 00:07:07,190
other bad<font color="#CCCCCC"> guys who would be writing</font>

176
00:07:05,180 --> 00:07:10,220
programs to automatically scrape these

177
00:07:07,190 --> 00:07:11,690
<font color="#CCCCCC">days information right so</font><font color="#E5E5E5"> again they</font>

178
00:07:10,220 --> 00:07:15,919
want to protect against this sort<font color="#E5E5E5"> of</font>

179
00:07:11,690 --> 00:07:17,840
<font color="#E5E5E5">scraping attacks and one thing</font><font color="#CCCCCC"> to</font>

180
00:07:15,919 --> 00:07:20,599
mention<font color="#E5E5E5"> that again bar</font><font color="#CCCCCC"> detection is also</font>

181
00:07:17,840 --> 00:07:23,330
I would say<font color="#E5E5E5"> another</font><font color="#CCCCCC"> machine</font><font color="#E5E5E5"> learning</font>

182
00:07:20,600 --> 00:07:25,070
<font color="#E5E5E5">slash anomaly detection problem where</font>

183
00:07:23,330 --> 00:07:26,599
usually what these body detection

184
00:07:25,070 --> 00:07:27,979
<font color="#CCCCCC">solutions are trying to do is they're</font>

185
00:07:26,599 --> 00:07:30,830
<font color="#CCCCCC">trying to</font><font color="#E5E5E5"> look for anomalies across</font>

186
00:07:27,979 --> 00:07:33,289
<font color="#E5E5E5">entire populations of users or across</font>

187
00:07:30,830 --> 00:07:36,229
time periods<font color="#CCCCCC"> for example like for</font>

188
00:07:33,289 --> 00:07:39,919
<font color="#E5E5E5">authentication problem like if you only</font>

189
00:07:36,229 --> 00:07:42,229
see say<font color="#E5E5E5"> 10,000 login requests per minute</font>

190
00:07:39,919 --> 00:07:43,758
and then<font color="#CCCCCC"> suddenly there's a large spike</font>

191
00:07:42,229 --> 00:07:45,680
<font color="#CCCCCC">in the number of authentication</font><font color="#E5E5E5"> requests</font>

192
00:07:43,759 --> 00:07:47,479
<font color="#E5E5E5">this could be an indicator</font><font color="#CCCCCC"> of their</font><font color="#E5E5E5"> is</font>

193
00:07:45,680 --> 00:07:49,940
<font color="#E5E5E5">could be some sort of an attack going on</font>

194
00:07:47,479 --> 00:07:53,449
where<font color="#CCCCCC"> somebody's writing</font><font color="#E5E5E5"> about to test</font>

195
00:07:49,940 --> 00:07:54,949
authentication<font color="#CCCCCC"> or for example</font><font color="#E5E5E5"> like if</font>

196
00:07:53,449 --> 00:07:57,440
you see there's a large spike in<font color="#E5E5E5"> the</font>

197
00:07:54,949 --> 00:07:59,510
<font color="#CCCCCC">number of pages</font><font color="#E5E5E5"> which are fetched by a</font>

198
00:07:57,440 --> 00:08:01,550
particular<font color="#E5E5E5"> user session again that could</font>

199
00:07:59,510 --> 00:08:05,690
be anomalous<font color="#CCCCCC"> so again this is</font><font color="#E5E5E5"> kind of</font>

200
00:08:01,550 --> 00:08:07,550
like an<font color="#CCCCCC"> anomaly detection</font><font color="#E5E5E5"> problem so now</font>

201
00:08:05,690 --> 00:08:09,770
<font color="#E5E5E5">since I have</font><font color="#CCCCCC"> defined these problems</font>

202
00:08:07,550 --> 00:08:12,380
<font color="#E5E5E5">let's go how these</font><font color="#CCCCCC"> solutions</font><font color="#E5E5E5"> are</font>

203
00:08:09,770 --> 00:08:16,370
actually<font color="#E5E5E5"> deployed in the real world</font><font color="#CCCCCC"> so</font>

204
00:08:12,380 --> 00:08:17,900
this is an architectural diagram of like

205
00:08:16,370 --> 00:08:20,240
one of the common deployment<font color="#E5E5E5"> models of</font>

206
00:08:17,900 --> 00:08:21,590
some<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> solutions</font><font color="#E5E5E5"> so what you have</font>

207
00:08:20,240 --> 00:08:23,150
is<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the right side you</font><font color="#CCCCCC"> have your</font><font color="#E5E5E5"> web</font>

208
00:08:21,590 --> 00:08:25,940
server so think<font color="#E5E5E5"> of</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> as a banking</font>

209
00:08:23,150 --> 00:08:27,469
<font color="#CCCCCC">application right</font><font color="#E5E5E5"> on the left side you</font>

210
00:08:25,940 --> 00:08:28,880
<font color="#CCCCCC">have your</font><font color="#E5E5E5"> kind browser which is trying</font>

211
00:08:27,470 --> 00:08:31,580
<font color="#E5E5E5">to</font><font color="#CCCCCC"> authenticate to the banking</font>

212
00:08:28,880 --> 00:08:34,219
application<font color="#E5E5E5"> so what happens is in the</font>

213
00:08:31,580 --> 00:08:35,750
<font color="#CCCCCC">first and</font><font color="#E5E5E5"> you have the service provider</font>

214
00:08:34,219 --> 00:08:38,060
which<font color="#CCCCCC"> is basically the fraud detection</font>

215
00:08:35,750 --> 00:08:40,458
solution or the bar detection solution

216
00:08:38,059 --> 00:08:42,529
<font color="#E5E5E5">right so what happens is in</font><font color="#CCCCCC"> the first</font>

217
00:08:40,458 --> 00:08:44,779
step the<font color="#CCCCCC"> client browser</font><font color="#E5E5E5"> fetches the</font>

218
00:08:42,529 --> 00:08:47,060
authentication page the login page from

219
00:08:44,779 --> 00:08:49,490
the web<font color="#E5E5E5"> server</font><font color="#CCCCCC"> and what happens is in</font>

220
00:08:47,060 --> 00:08:52,609
<font color="#E5E5E5">the web in the authentication page there</font>

221
00:08:49,490 --> 00:08:54,860
is<font color="#CCCCCC"> a script tag</font><font color="#E5E5E5"> which basically gets</font>

222
00:08:52,610 --> 00:08:56,450
this fingerprint or<font color="#CCCCCC"> GS file which is</font>

223
00:08:54,860 --> 00:08:58,070
<font color="#E5E5E5">embedded which is basically fetched from</font>

224
00:08:56,450 --> 00:09:01,130
from the service provider from the cloud

225
00:08:58,070 --> 00:09:02,180
<font color="#E5E5E5">say it's located at some other abc.com</font>

226
00:09:01,130 --> 00:09:04,670
<font color="#CCCCCC">so I</font>

227
00:09:02,180 --> 00:09:07,040
<font color="#CCCCCC">ah geez so this is the magical</font>

228
00:09:04,670 --> 00:09:08,750
javascript file<font color="#CCCCCC"> which what it tries to</font>

229
00:09:07,040 --> 00:09:11,060
do<font color="#CCCCCC"> is it</font><font color="#E5E5E5"> tries</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> create a unique</font>

230
00:09:08,750 --> 00:09:13,760
<font color="#E5E5E5">fingerprint</font><font color="#CCCCCC"> off your browser</font><font color="#E5E5E5"> of</font>

231
00:09:11,060 --> 00:09:15,649
basically<font color="#E5E5E5"> of your machine as well</font><font color="#CCCCCC"> as of</font>

232
00:09:13,760 --> 00:09:18,140
<font color="#E5E5E5">the user itself</font><font color="#CCCCCC"> so how the user</font>

233
00:09:15,649 --> 00:09:19,700
interacts<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the website right so as</font>

234
00:09:18,140 --> 00:09:21,439
you<font color="#CCCCCC"> can see the third step is basically</font>

235
00:09:19,700 --> 00:09:24,560
<font color="#CCCCCC">this fingerprint</font><font color="#E5E5E5"> is then sent back to</font>

236
00:09:21,440 --> 00:09:26,500
the<font color="#E5E5E5"> cloud</font><font color="#CCCCCC"> there's a</font><font color="#E5E5E5"> service provider and</font>

237
00:09:24,560 --> 00:09:28,930
then within<font color="#E5E5E5"> the cloud there could be</font>

238
00:09:26,500 --> 00:09:30,800
like<font color="#E5E5E5"> different machine</font><font color="#CCCCCC"> learning models</font>

239
00:09:28,930 --> 00:09:32,599
which could<font color="#E5E5E5"> be analyzing these</font>

240
00:09:30,800 --> 00:09:34,880
<font color="#E5E5E5">fingerprints so you can use this</font>

241
00:09:32,600 --> 00:09:37,600
analysis in multiple ways<font color="#CCCCCC"> for example</font>

242
00:09:34,880 --> 00:09:39,620
what you<font color="#E5E5E5"> can do is you could</font><font color="#CCCCCC"> look for</font>

243
00:09:37,600 --> 00:09:41,870
<font color="#E5E5E5">like discrepancies within the</font>

244
00:09:39,620 --> 00:09:43,250
fingerprint itself like<font color="#E5E5E5"> there is</font>

245
00:09:41,870 --> 00:09:45,110
<font color="#E5E5E5">something unique about this thing</font>

246
00:09:43,250 --> 00:09:46,640
<font color="#CCCCCC">apparent or for</font><font color="#E5E5E5"> example if you are</font>

247
00:09:45,110 --> 00:09:48,500
<font color="#E5E5E5">trying to compare this fingerprint</font>

248
00:09:46,640 --> 00:09:50,120
across entire population of users<font color="#E5E5E5"> like</font>

249
00:09:48,500 --> 00:09:52,040
<font color="#CCCCCC">this thing a print is very unique</font><font color="#E5E5E5"> I've</font>

250
00:09:50,120 --> 00:09:54,140
never seen a user login with this kind

251
00:09:52,040 --> 00:09:56,480
of fingerprint<font color="#E5E5E5"> or for example in case of</font>

252
00:09:54,140 --> 00:09:57,439
a fraud detection solution what you

253
00:09:56,480 --> 00:09:59,480
might have<font color="#CCCCCC"> done is you might have</font>

254
00:09:57,440 --> 00:10:01,580
<font color="#E5E5E5">created a be a fingerprint profile of</font>

255
00:09:59,480 --> 00:10:03,890
your user<font color="#CCCCCC"> there usually</font><font color="#E5E5E5"> this user always</font>

256
00:10:01,580 --> 00:10:05,300
logs in from<font color="#CCCCCC"> this kind of</font><font color="#E5E5E5"> browser so</font>

257
00:10:03,890 --> 00:10:07,100
this is this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a kind of fingerprint</font>

258
00:10:05,300 --> 00:10:08,479
<font color="#E5E5E5">and then certainly you see completely</font>

259
00:10:07,100 --> 00:10:10,279
<font color="#E5E5E5">different</font><font color="#CCCCCC"> different fingerprint even</font>

260
00:10:08,480 --> 00:10:12,500
though the the<font color="#E5E5E5"> username and password are</font>

261
00:10:10,279 --> 00:10:14,390
correct<font color="#E5E5E5"> it</font><font color="#CCCCCC"> could be could be potentially</font>

262
00:10:12,500 --> 00:10:15,320
fraudulent<font color="#E5E5E5"> right so this would for</font>

263
00:10:14,390 --> 00:10:18,830
example trigger the fraud detection

264
00:10:15,320 --> 00:10:20,540
solution so the<font color="#E5E5E5"> next step is</font><font color="#CCCCCC"> basically</font>

265
00:10:18,830 --> 00:10:23,740
you submit the form you<font color="#E5E5E5"> tag is an</font>

266
00:10:20,540 --> 00:10:26,420
<font color="#E5E5E5">embosser it's sent on</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the web server</font>

267
00:10:23,740 --> 00:10:28,310
then<font color="#CCCCCC"> the fifth step is basically the</font><font color="#E5E5E5"> web</font>

268
00:10:26,420 --> 00:10:29,900
server talks to the service<font color="#CCCCCC"> provider and</font>

269
00:10:28,310 --> 00:10:32,089
then it for example they talk to each

270
00:10:29,900 --> 00:10:34,400
other and there is<font color="#E5E5E5"> exchange of some</font>

271
00:10:32,089 --> 00:10:36,620
<font color="#E5E5E5">information usually</font><font color="#CCCCCC"> they are asked for</font>

272
00:10:34,400 --> 00:10:38,839
<font color="#E5E5E5">some sort of a risk score like given</font>

273
00:10:36,620 --> 00:10:41,300
<font color="#E5E5E5">this authentication session what do you</font>

274
00:10:38,839 --> 00:10:43,640
think<font color="#CCCCCC"> about this this</font><font color="#E5E5E5"> session</font><font color="#CCCCCC"> like is it</font>

275
00:10:41,300 --> 00:10:45,859
fraudulent or not is it about activity

276
00:10:43,640 --> 00:10:47,810
or is<font color="#E5E5E5"> it a human activity</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so this</font>

277
00:10:45,860 --> 00:10:50,209
risk over is exchanged from<font color="#E5E5E5"> the service</font>

278
00:10:47,810 --> 00:10:51,920
<font color="#CCCCCC">provider</font><font color="#E5E5E5"> and then usually</font><font color="#CCCCCC"> there is</font><font color="#E5E5E5"> some</font>

279
00:10:50,209 --> 00:10:53,900
<font color="#E5E5E5">sort of a</font><font color="#CCCCCC"> policy so think about this</font>

280
00:10:51,920 --> 00:10:56,479
risk<font color="#CCCCCC"> score for</font><font color="#E5E5E5"> example as like a</font>

281
00:10:53,900 --> 00:10:59,149
probability value from<font color="#E5E5E5"> a number from</font>

282
00:10:56,480 --> 00:11:02,390
<font color="#CCCCCC">zero to one right</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> an higher</font><font color="#E5E5E5"> number</font>

283
00:10:59,149 --> 00:11:04,490
<font color="#E5E5E5">being indicative of fraud so you could</font>

284
00:11:02,390 --> 00:11:06,500
define like a policy that if the risk

285
00:11:04,490 --> 00:11:07,820
score is more than<font color="#E5E5E5"> point eight then for</font>

286
00:11:06,500 --> 00:11:10,850
<font color="#CCCCCC">example I want</font><font color="#E5E5E5"> to go ahead and block</font>

287
00:11:07,820 --> 00:11:12,230
this so so that that<font color="#CCCCCC"> comes to the</font>

288
00:11:10,850 --> 00:11:14,300
mitigator which is basically some sort

289
00:11:12,230 --> 00:11:15,740
of<font color="#CCCCCC"> inline device</font><font color="#E5E5E5"> or it could be the web</font>

290
00:11:14,300 --> 00:11:18,079
<font color="#E5E5E5">server itself</font>

291
00:11:15,740 --> 00:11:20,030
which basically analyzes the risk<font color="#CCCCCC"> over</font>

292
00:11:18,080 --> 00:11:21,710
and based on<font color="#E5E5E5"> the policy it might allow</font>

293
00:11:20,030 --> 00:11:24,800
the<font color="#E5E5E5"> request to go through or it might it</font>

294
00:11:21,710 --> 00:11:27,020
might<font color="#E5E5E5"> block it</font><font color="#CCCCCC"> so this is like a common</font>

295
00:11:24,800 --> 00:11:30,490
architecture<font color="#E5E5E5"> both of</font><font color="#CCCCCC"> the fraud detection</font>

296
00:11:27,020 --> 00:11:30,490
solutions<font color="#CCCCCC"> and bar detection solutions</font>

297
00:11:30,760 --> 00:11:35,990
<font color="#CCCCCC">there is</font><font color="#E5E5E5"> another another variant of</font>

298
00:11:32,990 --> 00:11:37,370
<font color="#E5E5E5">these sort of deployments where what</font>

299
00:11:35,990 --> 00:11:41,300
happens is there is<font color="#E5E5E5"> some sort</font><font color="#CCCCCC"> of an</font>

300
00:11:37,370 --> 00:11:42,410
inline deployment model<font color="#E5E5E5"> where what what</font>

301
00:11:41,300 --> 00:11:44,990
happens is you<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> client browser</font>

302
00:11:42,410 --> 00:11:47,480
<font color="#E5E5E5">on one side again you have the web</font>

303
00:11:44,990 --> 00:11:49,070
server<font color="#CCCCCC"> but instead of</font><font color="#E5E5E5"> the cloud there is</font>

304
00:11:47,480 --> 00:11:50,750
<font color="#CCCCCC">some sort of an inline device which sits</font>

305
00:11:49,070 --> 00:11:52,820
between<font color="#CCCCCC"> the</font><font color="#E5E5E5"> client</font><font color="#CCCCCC"> browser and the web</font>

306
00:11:50,750 --> 00:11:54,710
<font color="#E5E5E5">server right so it could</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> just in</font>

307
00:11:52,820 --> 00:11:56,810
front of<font color="#E5E5E5"> the web server it could be like</font>

308
00:11:54,710 --> 00:12:00,290
at the CDN level<font color="#E5E5E5"> so there are multiple</font>

309
00:11:56,810 --> 00:12:03,319
variants but this is the overall idea<font color="#E5E5E5"> so</font>

310
00:12:00,290 --> 00:12:05,959
in this case what<font color="#CCCCCC"> happens is like once</font>

311
00:12:03,320 --> 00:12:07,640
you fetch<font color="#E5E5E5"> the web page</font><font color="#CCCCCC"> the inline device</font>

312
00:12:05,960 --> 00:12:10,400
which sits in the middle it injects this

313
00:12:07,640 --> 00:12:12,110
fingerprint<font color="#E5E5E5"> or JS file automatically so</font>

314
00:12:10,400 --> 00:12:15,199
in the<font color="#E5E5E5"> previous in i/o you actually had</font>

315
00:12:12,110 --> 00:12:16,490
to<font color="#CCCCCC"> change the web application and you</font>

316
00:12:15,200 --> 00:12:19,790
would have<font color="#E5E5E5"> to insert the script tag that</font>

317
00:12:16,490 --> 00:12:21,710
<font color="#E5E5E5">from basically</font><font color="#CCCCCC"> load the</font><font color="#E5E5E5"> JavaScript file</font>

318
00:12:19,790 --> 00:12:23,240
from the cloud provider so you<font color="#CCCCCC"> had to</font>

319
00:12:21,710 --> 00:12:24,980
basically<font color="#E5E5E5"> change change the</font><font color="#CCCCCC"> application</font>

320
00:12:23,240 --> 00:12:26,780
a<font color="#E5E5E5"> little bit in this scenario the</font>

321
00:12:24,980 --> 00:12:28,550
application developer has no idea what's

322
00:12:26,780 --> 00:12:31,880
going<font color="#E5E5E5"> on the inline device basically</font>

323
00:12:28,550 --> 00:12:34,609
automatically injects this<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> in</font>

324
00:12:31,880 --> 00:12:36,080
the page<font color="#E5E5E5"> right so this single print or</font>

325
00:12:34,610 --> 00:12:38,570
<font color="#E5E5E5">JS file is then sent back to the client</font>

326
00:12:36,080 --> 00:12:41,150
<font color="#CCCCCC">browser</font><font color="#E5E5E5"> it again the magical file</font>

327
00:12:38,570 --> 00:12:43,460
<font color="#E5E5E5">execute gets this this magical</font>

328
00:12:41,150 --> 00:12:45,170
fingerprint which is then<font color="#E5E5E5"> sent back and</font>

329
00:12:43,460 --> 00:12:47,710
then since it's an inline device it can

330
00:12:45,170 --> 00:12:51,020
automatically the block<font color="#E5E5E5"> head or allow</font><font color="#CCCCCC"> it</font>

331
00:12:47,710 --> 00:12:52,430
<font color="#E5E5E5">right so again same sort</font><font color="#CCCCCC"> of deployment</font>

332
00:12:51,020 --> 00:12:54,590
model you can<font color="#CCCCCC"> see for both threw</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> in</font>

333
00:12:52,430 --> 00:12:57,709
<font color="#CCCCCC">about</font><font color="#E5E5E5"> detection</font><font color="#CCCCCC"> solutions</font>

334
00:12:54,590 --> 00:12:59,360
so now<font color="#E5E5E5"> I've explained like what is the</font>

335
00:12:57,710 --> 00:13:01,490
<font color="#CCCCCC">problem and</font><font color="#E5E5E5"> how these solutions are</font>

336
00:12:59,360 --> 00:13:03,650
deployed in<font color="#CCCCCC"> the real world</font><font color="#E5E5E5"> let's talk</font>

337
00:13:01,490 --> 00:13:05,330
about the attacker<font color="#E5E5E5"> so let's talk</font><font color="#CCCCCC"> about</font>

338
00:13:03,650 --> 00:13:08,270
the threat model<font color="#CCCCCC"> so what</font><font color="#E5E5E5"> is the goal</font><font color="#CCCCCC"> of</font>

339
00:13:05,330 --> 00:13:11,240
the attacker<font color="#CCCCCC"> so in case of bar detection</font>

340
00:13:08,270 --> 00:13:12,439
<font color="#CCCCCC">solutions</font><font color="#E5E5E5"> what the attacker goal is for</font>

341
00:13:11,240 --> 00:13:14,570
example<font color="#CCCCCC"> if you go back to Linden</font>

342
00:13:12,440 --> 00:13:16,010
scraping is example<font color="#E5E5E5"> they want to launch</font>

343
00:13:14,570 --> 00:13:17,480
these kind of attacks<font color="#CCCCCC"> without getting</font>

344
00:13:16,010 --> 00:13:18,980
blocked<font color="#E5E5E5"> right</font>

345
00:13:17,480 --> 00:13:20,839
for example<font color="#E5E5E5"> LinkedIn might be blocking</font>

346
00:13:18,980 --> 00:13:23,900
<font color="#E5E5E5">their IP address or something very</font>

347
00:13:20,839 --> 00:13:25,310
specific<font color="#CCCCCC"> right</font><font color="#E5E5E5"> but they want to launch a</font>

348
00:13:23,900 --> 00:13:27,199
high volume of<font color="#E5E5E5"> this attack</font><font color="#CCCCCC"> without</font>

349
00:13:25,310 --> 00:13:28,640
getting<font color="#E5E5E5"> blocked or without spending a</font>

350
00:13:27,200 --> 00:13:30,230
<font color="#CCCCCC">lot of</font><font color="#E5E5E5"> money like spinning up a lot of</font>

351
00:13:28,640 --> 00:13:32,630
<font color="#E5E5E5">instant it have less instances or</font>

352
00:13:30,230 --> 00:13:36,080
whatever<font color="#E5E5E5"> right for a fraud detection</font>

353
00:13:32,630 --> 00:13:37,850
solution<font color="#E5E5E5"> let's assume</font><font color="#CCCCCC"> that again for</font>

354
00:13:36,080 --> 00:13:40,580
authentication<font color="#E5E5E5"> the attacker has the</font>

355
00:13:37,850 --> 00:13:43,910
authentication the credentials but<font color="#E5E5E5"> they</font>

356
00:13:40,580 --> 00:13:45,560
know<font color="#CCCCCC"> that if they test there</font><font color="#E5E5E5"> is a fraud</font>

357
00:13:43,910 --> 00:13:47,270
detection solution deployed so if

358
00:13:45,560 --> 00:13:48,890
<font color="#CCCCCC">they'll use</font><font color="#E5E5E5"> any random browser and they</font>

359
00:13:47,270 --> 00:13:50,720
try<font color="#E5E5E5"> to authenticate using those same</font>

360
00:13:48,890 --> 00:13:53,569
<font color="#E5E5E5">credentials it might trigger this fraud</font>

361
00:13:50,720 --> 00:13:55,279
detection solution so in<font color="#E5E5E5"> this case they</font>

362
00:13:53,570 --> 00:13:57,529
want<font color="#E5E5E5"> to authenticate</font><font color="#CCCCCC"> and get the money</font>

363
00:13:55,279 --> 00:13:59,990
from<font color="#E5E5E5"> the account</font><font color="#CCCCCC"> without triggering</font><font color="#E5E5E5"> the</font>

364
00:13:57,529 --> 00:14:02,240
fraud detection solution so this is the

365
00:13:59,990 --> 00:14:05,360
attacker goal<font color="#E5E5E5"> and then the threat</font><font color="#CCCCCC"> model</font>

366
00:14:02,240 --> 00:14:07,070
is basically<font color="#E5E5E5"> we assume again here is the</font>

367
00:14:05,360 --> 00:14:09,589
<font color="#CCCCCC">attacker has full</font><font color="#E5E5E5"> control</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> the</font>

368
00:14:07,070 --> 00:14:11,089
browser so<font color="#CCCCCC"> the left</font><font color="#E5E5E5"> side which</font><font color="#CCCCCC"> you see</font>

369
00:14:09,589 --> 00:14:12,380
<font color="#E5E5E5">the client</font><font color="#CCCCCC"> router that attack it</font><font color="#E5E5E5"> has</font>

370
00:14:11,089 --> 00:14:14,750
full<font color="#E5E5E5"> control of the browser they have</font>

371
00:14:12,380 --> 00:14:16,670
full control<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> machine right which</font>

372
00:14:14,750 --> 00:14:18,740
is<font color="#E5E5E5"> make sense for example about</font>

373
00:14:16,670 --> 00:14:20,360
<font color="#E5E5E5">detection solution for launching like a</font>

374
00:14:18,740 --> 00:14:22,550
scraping attack of course they control

375
00:14:20,360 --> 00:14:25,100
the infrastructure and for again<font color="#E5E5E5"> for</font>

376
00:14:22,550 --> 00:14:26,780
logging<font color="#E5E5E5"> in and bypassing a fraud</font>

377
00:14:25,100 --> 00:14:27,800
detection solution<font color="#E5E5E5"> of course they</font>

378
00:14:26,780 --> 00:14:31,100
control the browser<font color="#E5E5E5"> they can</font>

379
00:14:27,800 --> 00:14:33,020
authenticate<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so as</font><font color="#E5E5E5"> a consequence</font>

380
00:14:31,100 --> 00:14:35,600
of that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> attacker can basically craft</font>

381
00:14:33,020 --> 00:14:38,360
<font color="#E5E5E5">any HTTP request they want to the web</font>

382
00:14:35,600 --> 00:14:40,310
server<font color="#CCCCCC"> and they can modify any any</font>

383
00:14:38,360 --> 00:14:42,680
response coming<font color="#E5E5E5"> back from the web server</font>

384
00:14:40,310 --> 00:14:44,000
<font color="#CCCCCC">or any response</font><font color="#E5E5E5"> originating from the</font>

385
00:14:42,680 --> 00:14:45,800
browser to the<font color="#E5E5E5"> web server</font><font color="#CCCCCC"> right</font>

386
00:14:44,000 --> 00:14:50,540
<font color="#E5E5E5">officialy control the network</font><font color="#CCCCCC"> on the</font>

387
00:14:45,800 --> 00:14:52,969
client<font color="#E5E5E5"> side right so now given these</font>

388
00:14:50,540 --> 00:14:54,680
attacker capabilities and given the

389
00:14:52,970 --> 00:14:57,020
architecture which I have just described

390
00:14:54,680 --> 00:14:59,120
now let's talk about the fundamental

391
00:14:57,020 --> 00:15:00,740
issues the issues which originate from

392
00:14:59,120 --> 00:15:04,190
this sort of this<font color="#CCCCCC"> sort of an</font>

393
00:15:00,740 --> 00:15:05,570
architecture so the first problem with

394
00:15:04,190 --> 00:15:07,250
<font color="#E5E5E5">these kind of scenarios</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> these kind</font>

395
00:15:05,570 --> 00:15:08,800
of deployments is the attacker can

396
00:15:07,250 --> 00:15:10,870
reverse engineer<font color="#E5E5E5"> the entire</font>

397
00:15:08,800 --> 00:15:13,030
so the sensor is basically this magical

398
00:15:10,870 --> 00:15:14,950
<font color="#E5E5E5">javascript file which is sent to your</font>

399
00:15:13,030 --> 00:15:16,720
browser<font color="#E5E5E5"> right but</font><font color="#CCCCCC"> I as an attacker</font>

400
00:15:14,950 --> 00:15:19,450
control the browser<font color="#CCCCCC"> so I can see</font><font color="#E5E5E5"> exactly</font>

401
00:15:16,720 --> 00:15:22,300
<font color="#E5E5E5">what's inside the JavaScript</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> right</font>

402
00:15:19,450 --> 00:15:23,800
so let's talk<font color="#E5E5E5"> about what is in this</font>

403
00:15:22,300 --> 00:15:25,569
<font color="#CCCCCC">javascript file what is in this this</font>

404
00:15:23,800 --> 00:15:27,370
magical<font color="#E5E5E5"> javascript file what kind of</font>

405
00:15:25,570 --> 00:15:29,170
things it's collecting the first thing

406
00:15:27,370 --> 00:15:30,490
is the browser fingerprint<font color="#E5E5E5"> the browser</font>

407
00:15:29,170 --> 00:15:32,219
fingerprint as many of you<font color="#CCCCCC"> know is</font>

408
00:15:30,490 --> 00:15:34,630
<font color="#E5E5E5">basically you're</font><font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to create a</font>

409
00:15:32,220 --> 00:15:37,780
somewhat unique<font color="#E5E5E5"> fingerprint off your</font>

410
00:15:34,630 --> 00:15:39,160
browser<font color="#E5E5E5"> slash device right</font><font color="#CCCCCC"> so there are</font>

411
00:15:37,780 --> 00:15:41,949
certainly unique quirks<font color="#E5E5E5"> about your</font>

412
00:15:39,160 --> 00:15:44,709
browser which make it unique or in which

413
00:15:41,950 --> 00:15:47,830
make a semi unique among<font color="#E5E5E5"> the entire</font>

414
00:15:44,710 --> 00:15:49,630
population of browsers right<font color="#CCCCCC"> and then</font>

415
00:15:47,830 --> 00:15:51,060
there is actually<font color="#CCCCCC"> a lot of work which</font>

416
00:15:49,630 --> 00:15:53,560
has<font color="#CCCCCC"> been done on browser fingerprinting</font>

417
00:15:51,060 --> 00:15:55,599
<font color="#E5E5E5">especially in terms of from the</font>

418
00:15:53,560 --> 00:15:56,859
<font color="#E5E5E5">perspective or user tracking so there</font>

419
00:15:55,600 --> 00:15:59,170
are a lot<font color="#CCCCCC"> of scripts available online</font>

420
00:15:56,860 --> 00:16:00,490
with what they try<font color="#E5E5E5"> to do is it they try</font>

421
00:15:59,170 --> 00:16:03,160
<font color="#E5E5E5">to create a unique fingerprint of</font><font color="#CCCCCC"> the</font>

422
00:16:00,490 --> 00:16:04,660
browser<font color="#CCCCCC"> of the user and</font><font color="#E5E5E5"> it and then they</font>

423
00:16:03,160 --> 00:16:06,280
try<font color="#CCCCCC"> to track the same user across</font>

424
00:16:04,660 --> 00:16:09,699
different<font color="#CCCCCC"> web sites is</font><font color="#E5E5E5"> in the same</font>

425
00:16:06,280 --> 00:16:11,079
browser fingerprint<font color="#CCCCCC"> so these fraud</font>

426
00:16:09,700 --> 00:16:14,920
<font color="#CCCCCC">empowered detection solutions are using</font>

427
00:16:11,080 --> 00:16:17,110
the similar concept but for<font color="#E5E5E5"> dealing</font><font color="#CCCCCC"> with</font>

428
00:16:14,920 --> 00:16:18,550
these<font color="#CCCCCC"> problems for instance so let's</font>

429
00:16:17,110 --> 00:16:21,070
take this example<font color="#E5E5E5"> so this is actually</font>

430
00:16:18,550 --> 00:16:23,709
<font color="#CCCCCC">from a website</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> pin up to click</font>

431
00:16:21,070 --> 00:16:26,380
<font color="#E5E5E5">dot</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> FF so e FF actually did this study</font>

432
00:16:23,710 --> 00:16:28,060
where they were<font color="#E5E5E5"> trying to understand how</font>

433
00:16:26,380 --> 00:16:29,680
<font color="#E5E5E5">unique is a browser fingerprint or how</font>

434
00:16:28,060 --> 00:16:32,430
much value can<font color="#CCCCCC"> you extract from browser</font>

435
00:16:29,680 --> 00:16:35,260
fingerprinting<font color="#CCCCCC"> so what happens is</font>

436
00:16:32,430 --> 00:16:37,420
<font color="#E5E5E5">basically you send down this JavaScript</font>

437
00:16:35,260 --> 00:16:39,819
snippet<font color="#CCCCCC"> and what it does is it queries</font>

438
00:16:37,420 --> 00:16:40,839
different parameters<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the browser or</font>

439
00:16:39,820 --> 00:16:43,600
different properties of<font color="#CCCCCC"> your browser</font>

440
00:16:40,840 --> 00:16:45,550
which may reveal some information<font color="#CCCCCC"> about</font>

441
00:16:43,600 --> 00:16:47,890
<font color="#CCCCCC">your browser which might be semi unique</font>

442
00:16:45,550 --> 00:16:49,270
like for<font color="#CCCCCC"> example the first column is</font>

443
00:16:47,890 --> 00:16:51,520
basically the browser characteristic

444
00:16:49,270 --> 00:16:53,350
which<font color="#CCCCCC"> is some</font><font color="#E5E5E5"> of the kind of thing</font>

445
00:16:51,520 --> 00:16:55,660
you're<font color="#E5E5E5"> looking at for</font><font color="#CCCCCC"> example you can</font>

446
00:16:53,350 --> 00:16:58,780
see for<font color="#CCCCCC"> example you can like one of</font>

447
00:16:55,660 --> 00:17:00,160
these is<font color="#E5E5E5"> the system fonts so what this</font>

448
00:16:58,780 --> 00:17:02,680
javascript file<font color="#CCCCCC"> is looking for is the</font>

449
00:17:00,160 --> 00:17:04,569
list of system fonts install on that

450
00:17:02,680 --> 00:17:06,579
particular<font color="#E5E5E5"> browser so give me a list of</font>

451
00:17:04,569 --> 00:17:09,429
all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> all the fonts which are installed</font>

452
00:17:06,579 --> 00:17:12,579
on<font color="#CCCCCC"> that machine right so if you install</font>

453
00:17:09,430 --> 00:17:13,630
any any unique font<font color="#E5E5E5"> any font like if you</font>

454
00:17:12,579 --> 00:17:15,699
<font color="#E5E5E5">are for example</font><font color="#CCCCCC"> you are develop</font>

455
00:17:13,630 --> 00:17:16,990
developer you<font color="#E5E5E5"> you're playing</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> with</font>

456
00:17:15,700 --> 00:17:19,390
<font color="#E5E5E5">a bunch of</font><font color="#CCCCCC"> fonts install a</font><font color="#E5E5E5"> bunch of</font>

457
00:17:16,990 --> 00:17:22,470
fonts on a machine<font color="#E5E5E5"> that</font><font color="#CCCCCC"> makes a machine</font>

458
00:17:19,390 --> 00:17:24,329
identifiable very quickly<font color="#E5E5E5"> right</font>

459
00:17:22,470 --> 00:17:26,220
like on the<font color="#E5E5E5"> right hand side the</font><font color="#CCCCCC"> value is</font>

460
00:17:24,329 --> 00:17:28,799
<font color="#E5E5E5">basically all</font><font color="#CCCCCC"> the list of</font><font color="#E5E5E5"> points which</font>

461
00:17:26,220 --> 00:17:30,360
are<font color="#E5E5E5"> installed on that machine</font><font color="#CCCCCC"> the third</font>

462
00:17:28,799 --> 00:17:32,340
column<font color="#E5E5E5"> is again interesting</font><font color="#CCCCCC"> so if you</font>

463
00:17:30,360 --> 00:17:35,010
look at system fonts<font color="#E5E5E5"> the third column is</font>

464
00:17:32,340 --> 00:17:38,699
like one in<font color="#E5E5E5"> Ex browsers have this value</font>

465
00:17:35,010 --> 00:17:41,100
<font color="#E5E5E5">so one in</font><font color="#CCCCCC"> 24 browsers</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> entire</font>

466
00:17:38,700 --> 00:17:44,010
population<font color="#CCCCCC"> of their dataset had the same</font>

467
00:17:41,100 --> 00:17:45,750
set of fonts<font color="#CCCCCC"> installed</font><font color="#E5E5E5"> as this browser</font>

468
00:17:44,010 --> 00:17:48,539
<font color="#CCCCCC">so this is a test browser I was using</font>

469
00:17:45,750 --> 00:17:50,100
<font color="#E5E5E5">right so basically given the entire</font>

470
00:17:48,539 --> 00:17:52,799
population or<font color="#CCCCCC"> the entire</font><font color="#E5E5E5"> data set I</font>

471
00:17:50,100 --> 00:17:56,100
<font color="#E5E5E5">think their data set is probably around</font>

472
00:17:52,799 --> 00:17:58,399
1.5 million<font color="#E5E5E5"> browser fingerprints right</font>

473
00:17:56,100 --> 00:18:01,230
now or probably<font color="#CCCCCC"> more than that</font>

474
00:17:58,399 --> 00:18:02,520
so given this entire data set one in

475
00:18:01,230 --> 00:18:05,820
<font color="#E5E5E5">twenty four browsers will have exactly</font>

476
00:18:02,520 --> 00:18:07,830
<font color="#E5E5E5">the same kind of fonts installed as my</font>

477
00:18:05,820 --> 00:18:09,210
<font color="#E5E5E5">browser right and then what do you</font><font color="#CCCCCC"> want</font>

478
00:18:07,830 --> 00:18:12,389
<font color="#CCCCCC">to do is you want to aggregate these</font>

479
00:18:09,210 --> 00:18:14,429
kind<font color="#E5E5E5"> of pieces of information to create</font>

480
00:18:12,390 --> 00:18:17,149
some sort of a unique fingerprint of

481
00:18:14,429 --> 00:18:19,169
your browser<font color="#E5E5E5"> like for example I was</font>

482
00:18:17,149 --> 00:18:21,539
meddling around<font color="#E5E5E5"> so I was using some</font>

483
00:18:19,169 --> 00:18:24,120
weird version<font color="#E5E5E5"> of chromium if you look at</font>

484
00:18:21,539 --> 00:18:26,309
the user agent<font color="#E5E5E5"> string which is the from</font>

485
00:18:24,120 --> 00:18:29,489
the third item<font color="#E5E5E5"> from the bottom so the</font>

486
00:18:26,309 --> 00:18:31,980
user agent<font color="#E5E5E5"> string my user agent string</font>

487
00:18:29,490 --> 00:18:34,590
is like is more than like one in more

488
00:18:31,980 --> 00:18:35,940
<font color="#CCCCCC">than a million browsers have exactly the</font>

489
00:18:34,590 --> 00:18:37,889
same user agent string as my browser

490
00:18:35,940 --> 00:18:40,620
<font color="#E5E5E5">right which makes it very very unique</font>

491
00:18:37,890 --> 00:18:42,600
<font color="#E5E5E5">and very finger printable and then the</font>

492
00:18:40,620 --> 00:18:44,668
second column<font color="#E5E5E5"> is the bits of identifying</font>

493
00:18:42,600 --> 00:18:46,980
<font color="#E5E5E5">information which is basically the log</font>

494
00:18:44,669 --> 00:18:48,870
of that<font color="#E5E5E5"> 1 Million number of to the base</font>

495
00:18:46,980 --> 00:18:51,390
<font color="#CCCCCC">2 like these are how many</font><font color="#E5E5E5"> bits of</font>

496
00:18:48,870 --> 00:18:54,360
<font color="#CCCCCC">information</font><font color="#E5E5E5"> you can extract so the idea</font>

497
00:18:51,390 --> 00:18:57,120
is that<font color="#E5E5E5"> in an</font><font color="#CCCCCC"> ideal world suppose the</font>

498
00:18:54,360 --> 00:18:59,850
population right now<font color="#CCCCCC"> is say 10</font><font color="#E5E5E5"> million</font>

499
00:18:57,120 --> 00:19:02,129
people<font color="#E5E5E5"> right and every browser has a</font>

500
00:18:59,850 --> 00:19:05,129
unique fingerprint<font color="#E5E5E5"> so all you need is a</font>

501
00:19:02,130 --> 00:19:07,590
log of<font color="#CCCCCC"> 10 billion to the base two bits</font>

502
00:19:05,130 --> 00:19:09,120
of information<font color="#CCCCCC"> like if you can extract</font>

503
00:19:07,590 --> 00:19:10,949
these many bits of information<font color="#E5E5E5"> from the</font>

504
00:19:09,120 --> 00:19:13,020
browser fingerprint you<font color="#CCCCCC"> can uniquely</font>

505
00:19:10,950 --> 00:19:15,570
<font color="#E5E5E5">basically fingerprint every every</font>

506
00:19:13,020 --> 00:19:17,520
browser<font color="#CCCCCC"> but according</font><font color="#E5E5E5"> to most of the</font>

507
00:19:15,570 --> 00:19:19,200
studies you don't<font color="#CCCCCC"> have these many bits</font>

508
00:19:17,520 --> 00:19:20,970
of<font color="#CCCCCC"> information like if you could do that</font>

509
00:19:19,200 --> 00:19:23,279
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> use it for authentication for</font>

510
00:19:20,970 --> 00:19:24,570
example<font color="#E5E5E5"> but right now we are not at</font><font color="#CCCCCC"> that</font>

511
00:19:23,279 --> 00:19:26,309
<font color="#CCCCCC">stage</font><font color="#E5E5E5"> and actually</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is a lot</font><font color="#CCCCCC"> of</font>

512
00:19:24,570 --> 00:19:27,960
work which is<font color="#E5E5E5"> going on to defeat browser</font>

513
00:19:26,309 --> 00:19:29,460
fingerprinting because again as I

514
00:19:27,960 --> 00:19:31,520
mentioned<font color="#E5E5E5"> it it's used for user tracking</font>

515
00:19:29,460 --> 00:19:33,950
as<font color="#CCCCCC"> well</font>

516
00:19:31,520 --> 00:19:35,780
<font color="#E5E5E5">okay so here is a head is a small list</font>

517
00:19:33,950 --> 00:19:37,340
of things which these scripts are

518
00:19:35,780 --> 00:19:38,960
looking<font color="#E5E5E5"> for to create this browser</font>

519
00:19:37,340 --> 00:19:41,209
fingerprint<font color="#E5E5E5"> so I'll go over</font><font color="#CCCCCC"> some of</font>

520
00:19:38,960 --> 00:19:42,380
these pretty quickly<font color="#E5E5E5"> first of all they</font>

521
00:19:41,210 --> 00:19:44,150
are<font color="#CCCCCC"> trying to fingerprint the hardware</font>

522
00:19:42,380 --> 00:19:46,790
example they can<font color="#E5E5E5"> ask like what is the</font>

523
00:19:44,150 --> 00:19:49,700
<font color="#CCCCCC">CPU architecture how much memory</font><font color="#E5E5E5"> is</font>

524
00:19:46,790 --> 00:19:51,889
available<font color="#E5E5E5"> on this device right another</font>

525
00:19:49,700 --> 00:19:53,900
<font color="#E5E5E5">interesting one is the GPU can also sing</font>

526
00:19:51,890 --> 00:19:56,840
a print<font color="#E5E5E5"> which came out a few years ago</font>

527
00:19:53,900 --> 00:19:58,130
<font color="#E5E5E5">made a lot of news</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> is pretty</font>

528
00:19:56,840 --> 00:20:00,590
interesting<font color="#E5E5E5"> so the idea is they're</font>

529
00:19:58,130 --> 00:20:02,540
trying to fingerprint your GPU unit<font color="#E5E5E5"> so</font>

530
00:20:00,590 --> 00:20:04,550
what they they do is they use<font color="#E5E5E5"> something</font>

531
00:20:02,540 --> 00:20:08,060
called<font color="#E5E5E5"> this html5 canvas element and</font>

532
00:20:04,550 --> 00:20:09,879
then they draw for example<font color="#CCCCCC"> a draw some</font>

533
00:20:08,060 --> 00:20:12,350
sort<font color="#CCCCCC"> of image on that canvas element</font>

534
00:20:09,880 --> 00:20:14,210
<font color="#CCCCCC">right or they write some sort of text on</font>

535
00:20:12,350 --> 00:20:16,850
that<font color="#E5E5E5"> canvas element and then what they</font>

536
00:20:14,210 --> 00:20:18,800
do next is they try<font color="#E5E5E5"> to read the raw</font>

537
00:20:16,850 --> 00:20:22,040
pixels<font color="#CCCCCC"> from this</font><font color="#E5E5E5"> that canvas element</font>

538
00:20:18,800 --> 00:20:24,440
back right<font color="#E5E5E5"> and then because of some</font>

539
00:20:22,040 --> 00:20:27,139
changes in how<font color="#CCCCCC"> the GPUs are implemented</font>

540
00:20:24,440 --> 00:20:29,630
and even big even because<font color="#CCCCCC"> of differences</font>

541
00:20:27,140 --> 00:20:31,610
<font color="#E5E5E5">in the GPU drivers when you read the raw</font>

542
00:20:29,630 --> 00:20:33,110
<font color="#E5E5E5">pixels back from this canvas element</font>

543
00:20:31,610 --> 00:20:35,540
<font color="#E5E5E5">it's the results are slightly different</font>

544
00:20:33,110 --> 00:20:38,560
<font color="#E5E5E5">right so people are</font><font color="#CCCCCC"> basically using this</font>

545
00:20:35,540 --> 00:20:40,760
to fingerprint<font color="#CCCCCC"> your your GPU right</font>

546
00:20:38,560 --> 00:20:42,740
<font color="#E5E5E5">another interesting one which came out</font>

547
00:20:40,760 --> 00:20:44,960
recently<font color="#CCCCCC"> some time</font><font color="#E5E5E5"> last year</font>

548
00:20:42,740 --> 00:20:46,910
very cool was audio<font color="#E5E5E5"> stack fingerprinting</font>

549
00:20:44,960 --> 00:20:48,230
where what these guys<font color="#E5E5E5"> are</font><font color="#CCCCCC"> trying to do</font>

550
00:20:46,910 --> 00:20:52,910
is<font color="#E5E5E5"> they're trying to fingerprint your</font>

551
00:20:48,230 --> 00:20:54,530
audio stack<font color="#E5E5E5"> like your audio card so the</font>

552
00:20:52,910 --> 00:20:57,290
way it works<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> what they try</font>

553
00:20:54,530 --> 00:20:59,889
to<font color="#E5E5E5"> is they try to play some sort of a</font>

554
00:20:57,290 --> 00:21:02,450
signal<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> a sinusoidal signal</font>

555
00:20:59,890 --> 00:21:04,130
<font color="#E5E5E5">on your machine of course the volume</font><font color="#CCCCCC"> is</font>

556
00:21:02,450 --> 00:21:07,550
<font color="#CCCCCC">zero so of course</font><font color="#E5E5E5"> you don't hear</font>

557
00:21:04,130 --> 00:21:09,560
anything and<font color="#E5E5E5"> then they use some sort of</font>

558
00:21:07,550 --> 00:21:12,169
an<font color="#CCCCCC"> audio context element</font><font color="#E5E5E5"> something</font>

559
00:21:09,560 --> 00:21:13,820
<font color="#CCCCCC">similar</font><font color="#E5E5E5"> like a canvas</font><font color="#CCCCCC"> element which uses</font>

560
00:21:12,170 --> 00:21:15,860
like fast Fourier transformation<font color="#CCCCCC"> I am</font>

561
00:21:13,820 --> 00:21:17,270
not an expert<font color="#CCCCCC"> at signal processing but</font>

562
00:21:15,860 --> 00:21:19,159
<font color="#E5E5E5">they do some</font><font color="#CCCCCC"> sort of manipulation with</font>

563
00:21:17,270 --> 00:21:21,260
signals and then they read it back and

564
00:21:19,160 --> 00:21:23,090
similar like with<font color="#E5E5E5"> canvassing</font>

565
00:21:21,260 --> 00:21:24,680
fingerprinting when you read back this

566
00:21:23,090 --> 00:21:27,709
audio signal<font color="#CCCCCC"> there are certain changes</font>

567
00:21:24,680 --> 00:21:29,810
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of how your audio card is</font>

568
00:21:27,710 --> 00:21:31,250
installed<font color="#CCCCCC"> like what is the hardware</font><font color="#E5E5E5"> or</font>

569
00:21:29,810 --> 00:21:33,260
also<font color="#E5E5E5"> what is the</font><font color="#CCCCCC"> the device driver</font>

570
00:21:31,250 --> 00:21:35,270
<font color="#E5E5E5">version of that card and then you</font><font color="#CCCCCC"> can</font>

571
00:21:33,260 --> 00:21:37,460
identify<font color="#E5E5E5"> basically bits of information</font>

572
00:21:35,270 --> 00:21:40,010
<font color="#E5E5E5">from</font><font color="#CCCCCC"> your audio card</font><font color="#E5E5E5"> so that was pretty</font>

573
00:21:37,460 --> 00:21:42,530
<font color="#E5E5E5">cool the most interesting</font><font color="#CCCCCC"> part is so</font>

574
00:21:40,010 --> 00:21:44,660
this actually<font color="#E5E5E5"> wasn't</font><font color="#CCCCCC"> it I think it came</font>

575
00:21:42,530 --> 00:21:45,740
from<font color="#CCCCCC"> an academic paper</font><font color="#E5E5E5"> and as soon as</font>

576
00:21:44,660 --> 00:21:47,180
the paper was

577
00:21:45,740 --> 00:21:48,860
some of the<font color="#CCCCCC"> baden fraud detection</font>

578
00:21:47,180 --> 00:21:50,720
<font color="#CCCCCC">solutions</font><font color="#E5E5E5"> they basically implemented the</font>

579
00:21:48,860 --> 00:21:53,540
same thing<font color="#CCCCCC"> within</font><font color="#E5E5E5"> a week or two</font><font color="#CCCCCC"> which</font>

580
00:21:50,720 --> 00:21:54,920
was<font color="#E5E5E5"> fascinating which kind of shows</font><font color="#CCCCCC"> that</font>

581
00:21:53,540 --> 00:21:57,409
these<font color="#E5E5E5"> guys are trying to</font><font color="#CCCCCC"> extract as much</font>

582
00:21:54,920 --> 00:22:00,320
<font color="#CCCCCC">information as possible from the</font><font color="#E5E5E5"> browser</font>

583
00:21:57,410 --> 00:22:01,910
<font color="#E5E5E5">right and then there are the</font><font color="#CCCCCC"> normal</font>

584
00:22:00,320 --> 00:22:03,439
<font color="#E5E5E5">things for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> they're looking at</font>

585
00:22:01,910 --> 00:22:04,940
the user<font color="#E5E5E5"> agent string how unique is your</font>

586
00:22:03,440 --> 00:22:06,680
user agent they're looking at the

587
00:22:04,940 --> 00:22:08,300
<font color="#E5E5E5">operating system version they are</font>

588
00:22:06,680 --> 00:22:11,170
looking at your display like what is the

589
00:22:08,300 --> 00:22:12,830
screen<font color="#CCCCCC"> size what</font><font color="#E5E5E5"> is the the color depth</font>

590
00:22:11,170 --> 00:22:14,810
<font color="#CCCCCC">they're looking at browser</font>

591
00:22:12,830 --> 00:22:16,250
customizations like as I mentioned like

592
00:22:14,810 --> 00:22:18,260
they're<font color="#E5E5E5"> looking at</font><font color="#CCCCCC"> lists of fonts</font>

593
00:22:16,250 --> 00:22:20,180
installed on a machine<font color="#CCCCCC"> they're looking</font>

594
00:22:18,260 --> 00:22:21,890
looking<font color="#E5E5E5"> a list of plugins browser</font>

595
00:22:20,180 --> 00:22:24,080
extensions installed on a browser<font color="#E5E5E5"> so</font>

596
00:22:21,890 --> 00:22:25,610
<font color="#CCCCCC">again them the more browser extensions</font>

597
00:22:24,080 --> 00:22:27,949
installed the more unique browser

598
00:22:25,610 --> 00:22:29,929
extensions<font color="#CCCCCC"> install the more unique a</font>

599
00:22:27,950 --> 00:22:32,480
browser becomes so they can track you<font color="#CCCCCC"> in</font>

600
00:22:29,930 --> 00:22:33,500
an easier<font color="#CCCCCC"> way right</font><font color="#E5E5E5"> they can they're</font>

601
00:22:32,480 --> 00:22:35,630
looking forward for<font color="#CCCCCC"> some</font><font color="#E5E5E5"> of what is the</font>

602
00:22:33,500 --> 00:22:37,220
<font color="#CCCCCC">timezone</font><font color="#E5E5E5"> or the list of language packs</font>

603
00:22:35,630 --> 00:22:38,720
installed<font color="#E5E5E5"> on a browser</font><font color="#CCCCCC"> right all of</font>

604
00:22:37,220 --> 00:22:40,640
these are accessible from JavaScript

605
00:22:38,720 --> 00:22:43,220
which makes it very<font color="#E5E5E5"> interesting right</font>

606
00:22:40,640 --> 00:22:46,430
<font color="#E5E5E5">and then I also noticed like many of</font>

607
00:22:43,220 --> 00:22:48,770
these these solutions<font color="#E5E5E5"> they are also</font>

608
00:22:46,430 --> 00:22:50,180
<font color="#E5E5E5">doing some weird manipulations of the</font>

609
00:22:48,770 --> 00:22:52,210
JavaScript<font color="#E5E5E5"> for example they would do</font>

610
00:22:50,180 --> 00:22:54,710
some weird floating-point calculation

611
00:22:52,210 --> 00:22:57,770
<font color="#E5E5E5">and the idea is basically to try</font><font color="#CCCCCC"> to</font>

612
00:22:54,710 --> 00:22:59,870
figure out if it's an actual browser<font color="#E5E5E5"> or</font>

613
00:22:57,770 --> 00:23:01,940
not because it's not<font color="#E5E5E5"> it's not an actual</font>

614
00:22:59,870 --> 00:23:04,090
browser again<font color="#E5E5E5"> you won't you won't get a</font>

615
00:23:01,940 --> 00:23:06,620
result back of this calculation<font color="#CCCCCC"> right</font>

616
00:23:04,090 --> 00:23:09,020
<font color="#CCCCCC">another</font><font color="#E5E5E5"> thing would be maybe they are</font>

617
00:23:06,620 --> 00:23:10,610
trying to fingerprint how long it takes

618
00:23:09,020 --> 00:23:12,400
<font color="#E5E5E5">to do some sort of calculations</font><font color="#CCCCCC"> I'm not</font>

619
00:23:10,610 --> 00:23:15,860
exactly<font color="#CCCCCC"> sure what was interesting</font>

620
00:23:12,400 --> 00:23:17,960
<font color="#E5E5E5">another thing as he is many of them they</font>

621
00:23:15,860 --> 00:23:20,120
do some sort<font color="#CCCCCC"> of weird manipulations with</font>

622
00:23:17,960 --> 00:23:22,790
the Dom structure so they would so they

623
00:23:20,120 --> 00:23:24,350
would add some items<font color="#E5E5E5"> of the Dom or they</font>

624
00:23:22,790 --> 00:23:26,600
would remove them they would<font color="#CCCCCC"> add like</font>

625
00:23:24,350 --> 00:23:30,010
even listeners them so again<font color="#CCCCCC"> the idea is</font>

626
00:23:26,600 --> 00:23:32,719
to figure<font color="#E5E5E5"> out the</font><font color="#CCCCCC"> idea is to figure out</font>

627
00:23:30,010 --> 00:23:36,860
<font color="#E5E5E5">basically yeah are you running in actual</font>

628
00:23:32,720 --> 00:23:39,080
<font color="#E5E5E5">browser or not right</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then there is</font>

629
00:23:36,860 --> 00:23:40,520
<font color="#E5E5E5">actually a lot</font><font color="#CCCCCC"> of work done</font><font color="#E5E5E5"> like for</font>

630
00:23:39,080 --> 00:23:43,699
<font color="#E5E5E5">example this is an open source library</font>

631
00:23:40,520 --> 00:23:45,530
<font color="#CCCCCC">called fingerprint</font><font color="#E5E5E5"> years - so this is</font>

632
00:23:43,700 --> 00:23:46,070
the output<font color="#E5E5E5"> of the same browser</font><font color="#CCCCCC"> I was I</font>

633
00:23:45,530 --> 00:23:48,320
<font color="#E5E5E5">was using</font>

634
00:23:46,070 --> 00:23:49,970
right<font color="#E5E5E5"> so you can see these are the</font>

635
00:23:48,320 --> 00:23:52,669
<font color="#E5E5E5">different</font><font color="#CCCCCC"> components of the browser</font>

636
00:23:49,970 --> 00:23:54,230
fingerprint and on top<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that basically</font>

637
00:23:52,670 --> 00:23:56,480
what it's doing<font color="#E5E5E5"> is calculating</font><font color="#CCCCCC"> the</font>

638
00:23:54,230 --> 00:23:57,170
<font color="#E5E5E5">entire md5 of</font><font color="#CCCCCC"> the entire browser</font>

639
00:23:56,480 --> 00:23:59,090
fingerprint

640
00:23:57,170 --> 00:24:01,730
so it basically appends it creates<font color="#E5E5E5"> this</font>

641
00:23:59,090 --> 00:24:04,730
<font color="#E5E5E5">long string then basically calculated</font>

642
00:24:01,730 --> 00:24:06,560
md5 and then that's the unique or semi

643
00:24:04,730 --> 00:24:09,170
unique fingerprint<font color="#E5E5E5"> of my particular</font>

644
00:24:06,560 --> 00:24:12,350
<font color="#CCCCCC">puzzle so the reason</font><font color="#E5E5E5"> to show this is</font>

645
00:24:09,170 --> 00:24:13,820
basically<font color="#E5E5E5"> like these sorting bar</font>

646
00:24:12,350 --> 00:24:15,620
detection<font color="#CCCCCC"> solutions</font><font color="#E5E5E5"> they are using</font>

647
00:24:13,820 --> 00:24:17,240
browser fingerprinting but<font color="#E5E5E5"> there's not</font>

648
00:24:15,620 --> 00:24:19,489
like something which is out of the world

649
00:24:17,240 --> 00:24:22,520
<font color="#CCCCCC">because a lot of</font><font color="#E5E5E5"> these techniques are</font>

650
00:24:19,490 --> 00:24:24,830
available in<font color="#CCCCCC"> open</font><font color="#E5E5E5"> source solutions there</font>

651
00:24:22,520 --> 00:24:28,010
<font color="#E5E5E5">is another project called</font><font color="#CCCCCC"> pin lady</font><font color="#E5E5E5"> which</font>

652
00:24:24,830 --> 00:24:30,560
<font color="#E5E5E5">basically you can you can generate a</font>

653
00:24:28,010 --> 00:24:31,970
<font color="#E5E5E5">JavaScript custom for you which can</font>

654
00:24:30,560 --> 00:24:35,540
fingerprint browser extensions for

655
00:24:31,970 --> 00:24:37,130
example<font color="#E5E5E5"> yeah like this this code is</font>

656
00:24:35,540 --> 00:24:39,440
available<font color="#E5E5E5"> and I used for exam of this</font>

657
00:24:37,130 --> 00:24:44,210
project it shows some<font color="#CCCCCC"> proof-of-concept</font>

658
00:24:39,440 --> 00:24:45,500
<font color="#CCCCCC">attacks</font><font color="#E5E5E5"> so yeah</font><font color="#CCCCCC"> next step is they create</font>

659
00:24:44,210 --> 00:24:47,810
this unique fingerprint of your browser

660
00:24:45,500 --> 00:24:49,150
<font color="#CCCCCC">or flash or device</font><font color="#E5E5E5"> now what they also</font>

661
00:24:47,810 --> 00:24:52,159
want<font color="#CCCCCC"> to do is they want to create the</font>

662
00:24:49,150 --> 00:24:54,170
fingerprint<font color="#E5E5E5"> of you as the user right</font><font color="#CCCCCC"> or</font>

663
00:24:52,160 --> 00:24:56,570
to be more<font color="#CCCCCC"> specific of</font><font color="#E5E5E5"> the user behavior</font>

664
00:24:54,170 --> 00:24:59,930
<font color="#E5E5E5">so the way they do this is basically</font>

665
00:24:56,570 --> 00:25:02,210
again<font color="#E5E5E5"> kind of sounds very intrusive but</font>

666
00:24:59,930 --> 00:25:03,770
they're<font color="#E5E5E5"> trying to build a picture</font><font color="#CCCCCC"> of how</font>

667
00:25:02,210 --> 00:25:06,560
are you interacting<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> webpage</font>

668
00:25:03,770 --> 00:25:08,600
<font color="#E5E5E5">right so how do you for example move</font>

669
00:25:06,560 --> 00:25:10,429
your mouse like what is your typing

670
00:25:08,600 --> 00:25:12,590
speed how fast<font color="#CCCCCC"> do you</font><font color="#E5E5E5"> move your mouse</font>

671
00:25:10,430 --> 00:25:15,170
and so forth so what they do is

672
00:25:12,590 --> 00:25:17,449
<font color="#CCCCCC">basically they used</font><font color="#E5E5E5"> they use like add</font>

673
00:25:15,170 --> 00:25:20,000
<font color="#CCCCCC">eventlistener so they</font><font color="#E5E5E5"> attach a bunch of</font>

674
00:25:17,450 --> 00:25:22,190
event listeners to a bunch of events<font color="#CCCCCC"> for</font>

675
00:25:20,000 --> 00:25:25,010
<font color="#E5E5E5">example</font><font color="#CCCCCC"> key press like</font><font color="#E5E5E5"> whenever there is</font>

676
00:25:22,190 --> 00:25:26,780
a key press it would call these these

677
00:25:25,010 --> 00:25:28,250
this listener<font color="#E5E5E5"> right</font><font color="#CCCCCC"> sit would record</font>

678
00:25:26,780 --> 00:25:31,550
that<font color="#E5E5E5"> this key was</font><font color="#CCCCCC"> pressed</font><font color="#E5E5E5"> at this</font>

679
00:25:28,250 --> 00:25:33,110
particular time right<font color="#E5E5E5"> for key for Mouse</font>

680
00:25:31,550 --> 00:25:34,760
for<font color="#E5E5E5"> example you could</font><font color="#CCCCCC"> add event</font>

681
00:25:33,110 --> 00:25:38,330
listeners for mouse movement<font color="#CCCCCC"> for mouse</font>

682
00:25:34,760 --> 00:25:40,280
clicks<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so forth they have like even</font>

683
00:25:38,330 --> 00:25:42,470
listeners for<font color="#E5E5E5"> touchpad like if you if</font>

684
00:25:40,280 --> 00:25:45,110
you're<font color="#CCCCCC"> using a browser on your iPad</font><font color="#E5E5E5"> if</font>

685
00:25:42,470 --> 00:25:46,820
you touch a particular point<font color="#E5E5E5"> they could</font>

686
00:25:45,110 --> 00:25:50,379
record record the coordinates<font color="#E5E5E5"> of where</font>

687
00:25:46,820 --> 00:25:52,970
it was<font color="#CCCCCC"> searched on that</font><font color="#E5E5E5"> device right</font>

688
00:25:50,380 --> 00:25:56,210
another very interesting one is

689
00:25:52,970 --> 00:25:58,670
basically if<font color="#E5E5E5"> you are running the browser</font>

690
00:25:56,210 --> 00:26:01,130
<font color="#E5E5E5">again on</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> iPad or</font><font color="#CCCCCC"> in a phone they</font>

691
00:25:58,670 --> 00:26:02,600
can<font color="#E5E5E5"> use the device accelerometer so</font>

692
00:26:01,130 --> 00:26:04,790
using that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> actually query the</font>

693
00:26:02,600 --> 00:26:07,280
three-dimensional angle of your<font color="#E5E5E5"> device</font>

694
00:26:04,790 --> 00:26:08,659
like right<font color="#CCCCCC"> now I'm using I'm holding my</font>

695
00:26:07,280 --> 00:26:11,540
device<font color="#CCCCCC"> and at this</font><font color="#E5E5E5"> particular angle</font>

696
00:26:08,660 --> 00:26:12,950
<font color="#E5E5E5">right you can record</font><font color="#CCCCCC"> even though the</font><font color="#E5E5E5"> the</font>

697
00:26:11,540 --> 00:26:14,540
changes in the speed operative

698
00:26:12,950 --> 00:26:16,160
<font color="#CCCCCC">or you can record even the movements of</font>

699
00:26:14,540 --> 00:26:18,470
the device which is<font color="#E5E5E5"> again pretty pretty</font>

700
00:26:16,160 --> 00:26:21,200
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> then I think some of these</font>

701
00:26:18,470 --> 00:26:22,910
<font color="#E5E5E5">solutions they they do employ it</font><font color="#CCCCCC"> and</font>

702
00:26:21,200 --> 00:26:25,550
then what they do<font color="#E5E5E5"> is they also record</font>

703
00:26:22,910 --> 00:26:28,070
timing<font color="#CCCCCC"> information when this event got</font>

704
00:26:25,550 --> 00:26:30,740
fired<font color="#CCCCCC"> so the idea is basically</font><font color="#E5E5E5"> you want</font>

705
00:26:28,070 --> 00:26:32,360
<font color="#E5E5E5">to basically create this entire</font><font color="#CCCCCC"> picture</font>

706
00:26:30,740 --> 00:26:34,580
<font color="#CCCCCC">like for</font><font color="#E5E5E5"> example I loaded this</font>

707
00:26:32,360 --> 00:26:36,919
authentication page<font color="#E5E5E5"> first thing I did</font><font color="#CCCCCC"> at</font>

708
00:26:34,580 --> 00:26:38,870
time equals<font color="#E5E5E5"> T equals</font><font color="#CCCCCC"> 1 is I moved my</font>

709
00:26:36,920 --> 00:26:40,880
mouse from this coordinate to this

710
00:26:38,870 --> 00:26:42,800
coordinate<font color="#E5E5E5"> then at time T equals</font><font color="#CCCCCC"> 2 I</font>

711
00:26:40,880 --> 00:26:44,810
clicked the mouse<font color="#E5E5E5"> at this coordinate and</font>

712
00:26:42,800 --> 00:26:46,580
then time T equals 3 I had a bunch of

713
00:26:44,810 --> 00:26:48,080
these key presses which might<font color="#E5E5E5"> be for</font>

714
00:26:46,580 --> 00:26:50,449
example<font color="#E5E5E5"> I'm typing my</font><font color="#CCCCCC"> user name and</font>

715
00:26:48,080 --> 00:26:52,330
password time T equals<font color="#E5E5E5"> 5 whatever</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was</font>

716
00:26:50,450 --> 00:26:55,010
I click this button<font color="#CCCCCC"> might be the summit</font>

717
00:26:52,330 --> 00:26:57,409
<font color="#E5E5E5">page right on summit button and then</font>

718
00:26:55,010 --> 00:26:58,610
this<font color="#E5E5E5"> entire payload is sent back so on</font>

719
00:26:57,410 --> 00:27:00,890
the server side basically<font color="#E5E5E5"> you can</font>

720
00:26:58,610 --> 00:27:03,679
recreate this entire user session just

721
00:27:00,890 --> 00:27:06,320
by looking<font color="#E5E5E5"> at this this user behavior</font>

722
00:27:03,680 --> 00:27:08,659
<font color="#E5E5E5">thing is ring</font>

723
00:27:06,320 --> 00:27:11,059
the next step is<font color="#CCCCCC"> basically anti</font>

724
00:27:08,659 --> 00:27:13,000
tampering and enter reversing<font color="#E5E5E5"> again as I</font>

725
00:27:11,059 --> 00:27:14,750
mentioned<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is this magical</font>

726
00:27:13,000 --> 00:27:16,730
<font color="#CCCCCC">javascript file which is in like a</font>

727
00:27:14,750 --> 00:27:18,200
browser again<font color="#E5E5E5"> they're waiting and</font>

728
00:27:16,730 --> 00:27:19,460
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> extracting all these pieces of</font>

729
00:27:18,200 --> 00:27:21,769
information<font color="#E5E5E5"> which is sent back to the</font>

730
00:27:19,460 --> 00:27:23,570
cloud and which is again consumed by

731
00:27:21,769 --> 00:27:25,970
machine learning models right<font color="#E5E5E5"> so these</font>

732
00:27:23,570 --> 00:27:28,519
are<font color="#E5E5E5"> basically are your inputs to</font><font color="#CCCCCC"> your</font>

733
00:27:25,970 --> 00:27:30,070
<font color="#E5E5E5">machine learning models and then of</font>

734
00:27:28,519 --> 00:27:32,809
course<font color="#CCCCCC"> these guys</font><font color="#E5E5E5"> they want to protect</font>

735
00:27:30,070 --> 00:27:34,730
this JavaScript snippet<font color="#E5E5E5"> so I see a lot</font>

736
00:27:32,809 --> 00:27:36,860
of the avocado education is pretty

737
00:27:34,730 --> 00:27:38,360
<font color="#CCCCCC">common so they are trying</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> off</font><font color="#E5E5E5"> escape</font>

738
00:27:36,860 --> 00:27:39,860
the code so it's harder to read and

739
00:27:38,360 --> 00:27:41,928
harder to figure<font color="#E5E5E5"> out exactly what</font>

740
00:27:39,860 --> 00:27:44,750
they're<font color="#CCCCCC"> doing for</font><font color="#E5E5E5"> example in one</font>

741
00:27:41,929 --> 00:27:49,100
particular scenario I've seen<font color="#CCCCCC"> you're</font>

742
00:27:44,750 --> 00:27:51,529
using so they were using packing so they

743
00:27:49,100 --> 00:27:52,969
were<font color="#E5E5E5"> using eggs or based packing where</font>

744
00:27:51,529 --> 00:27:55,429
they would send down<font color="#E5E5E5"> the code which</font><font color="#CCCCCC"> is</font>

745
00:27:52,970 --> 00:27:57,950
<font color="#CCCCCC">fact and they would send this giant eggs</font>

746
00:27:55,429 --> 00:28:01,010
<font color="#E5E5E5">or this array of integers and</font><font color="#CCCCCC"> they would</font>

747
00:27:57,950 --> 00:28:04,340
exhort the eggs or the<font color="#E5E5E5"> code</font><font color="#CCCCCC"> to basically</font>

748
00:28:01,010 --> 00:28:06,379
get get back<font color="#E5E5E5"> the actual code right in</font>

749
00:28:04,340 --> 00:28:08,510
<font color="#CCCCCC">many scenarios I saw them they were</font>

750
00:28:06,380 --> 00:28:10,399
randomizing the location from where the

751
00:28:08,510 --> 00:28:11,840
<font color="#CCCCCC">JavaScript file would</font><font color="#E5E5E5"> be loaded but they</font>

752
00:28:10,399 --> 00:28:13,549
were even randomizing the<font color="#E5E5E5"> source code</font><font color="#CCCCCC"> of</font>

753
00:28:11,840 --> 00:28:16,039
<font color="#E5E5E5">the page of the JavaScript snippet which</font>

754
00:28:13,549 --> 00:28:17,899
was<font color="#E5E5E5"> interesting so they were employing a</font>

755
00:28:16,039 --> 00:28:19,700
whole bunch<font color="#E5E5E5"> of anti tampering and entire</font>

756
00:28:17,899 --> 00:28:22,100
reversing techniques but yeah given

757
00:28:19,700 --> 00:28:25,700
enough time<font color="#E5E5E5"> basically you can</font><font color="#CCCCCC"> visually</font>

758
00:28:22,100 --> 00:28:28,908
by<font color="#CCCCCC"> bar both of them</font><font color="#E5E5E5"> and then the</font><font color="#CCCCCC"> final</font>

759
00:28:25,700 --> 00:28:30,889
step<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> once this the snippet</font>

760
00:28:28,909 --> 00:28:32,480
calculates the browser fingerprint and

761
00:28:30,889 --> 00:28:34,100
the<font color="#E5E5E5"> user fingerprint it creates this</font>

762
00:28:32,480 --> 00:28:36,139
payload so this can be<font color="#E5E5E5"> like a long</font>

763
00:28:34,100 --> 00:28:37,610
string of all these<font color="#E5E5E5"> events</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is</font>

764
00:28:36,139 --> 00:28:40,189
the<font color="#E5E5E5"> fingerprint and then basically it</font>

765
00:28:37,610 --> 00:28:42,469
<font color="#E5E5E5">send back to the to the cloud so usually</font>

766
00:28:40,190 --> 00:28:45,230
they are using some<font color="#CCCCCC"> sort of an encoding</font>

767
00:28:42,470 --> 00:28:47,360
scheme like base64<font color="#CCCCCC"> I've found to</font><font color="#E5E5E5"> be very</font>

768
00:28:45,230 --> 00:28:48,679
<font color="#E5E5E5">common many of them many of these</font>

769
00:28:47,360 --> 00:28:51,889
solutions they were<font color="#E5E5E5"> using encryption</font>

770
00:28:48,679 --> 00:28:53,090
like I saw like one<font color="#E5E5E5"> of the one of the</font>

771
00:28:51,889 --> 00:28:55,729
solution<font color="#E5E5E5"> in was using symmetric</font>

772
00:28:53,090 --> 00:28:57,980
<font color="#E5E5E5">encryption</font><font color="#CCCCCC"> DES and</font><font color="#E5E5E5"> the key was actually</font>

773
00:28:55,730 --> 00:28:58,970
in the JavaScript snippet so I don't

774
00:28:57,980 --> 00:29:01,399
know what what they were trying<font color="#E5E5E5"> to do</font>

775
00:28:58,970 --> 00:29:02,960
maybe it was security by obscurity<font color="#E5E5E5"> but</font>

776
00:29:01,399 --> 00:29:05,840
again<font color="#E5E5E5"> since I can see the</font><font color="#CCCCCC"> JavaScript</font>

777
00:29:02,960 --> 00:29:07,850
file<font color="#E5E5E5"> I mean I have the key</font><font color="#CCCCCC"> right and I</font>

778
00:29:05,840 --> 00:29:09,139
saw like<font color="#E5E5E5"> in some</font><font color="#CCCCCC"> scenario</font><font color="#E5E5E5"> they were</font>

779
00:29:07,850 --> 00:29:11,418
actually implementing their custom

780
00:29:09,139 --> 00:29:12,918
encryption schemes<font color="#E5E5E5"> just</font><font color="#CCCCCC"> usually not</font>

781
00:29:11,419 --> 00:29:15,440
recommended<font color="#CCCCCC"> especially we talked to</font>

782
00:29:12,919 --> 00:29:18,260
cryptographers and<font color="#E5E5E5"> I didn't think that</font>

783
00:29:15,440 --> 00:29:21,680
<font color="#E5E5E5">they were especially</font><font color="#CCCCCC"> very strong</font>

784
00:29:18,260 --> 00:29:23,300
<font color="#CCCCCC">very sophisticated</font><font color="#E5E5E5"> so this is the entire</font>

785
00:29:21,680 --> 00:29:24,380
<font color="#E5E5E5">picture of</font><font color="#CCCCCC"> what actually</font><font color="#E5E5E5"> happens in your</font>

786
00:29:23,300 --> 00:29:26,030
<font color="#E5E5E5">browser and what they're trying</font><font color="#CCCCCC"> to</font>

787
00:29:24,380 --> 00:29:27,890
calculate<font color="#E5E5E5"> again</font><font color="#CCCCCC"> this is again sent back</font>

788
00:29:26,030 --> 00:29:31,040
to<font color="#E5E5E5"> the cloud they do some magic with ml</font>

789
00:29:27,890 --> 00:29:32,660
right<font color="#CCCCCC"> so this is Billy the first step</font>

790
00:29:31,040 --> 00:29:34,580
<font color="#E5E5E5">like I as an attacker can see exactly</font>

791
00:29:32,660 --> 00:29:36,410
<font color="#E5E5E5">what this the solution is trying to do</font>

792
00:29:34,580 --> 00:29:38,750
<font color="#E5E5E5">like these are the kind of thing they're</font>

793
00:29:36,410 --> 00:29:40,430
collecting from my browser<font color="#CCCCCC"> okay now</font>

794
00:29:38,750 --> 00:29:42,380
let's talk<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> next problem so the</font>

795
00:29:40,430 --> 00:29:44,210
next problem is there are<font color="#E5E5E5"> no guarantees</font>

796
00:29:42,380 --> 00:29:46,760
<font color="#CCCCCC">of the correct execution of JavaScript</font>

797
00:29:44,210 --> 00:29:48,890
<font color="#E5E5E5">so basically there's this</font><font color="#CCCCCC"> solution this</font>

798
00:29:46,760 --> 00:29:50,450
fraud slash bar detection solution<font color="#CCCCCC"> it</font>

799
00:29:48,890 --> 00:29:51,800
sent down the<font color="#CCCCCC"> JavaScript file to the</font>

800
00:29:50,450 --> 00:29:53,990
client and they'll they<font color="#CCCCCC"> assumed that</font>

801
00:29:51,800 --> 00:29:55,610
<font color="#CCCCCC">this would run in a normal browser</font><font color="#E5E5E5"> you</font>

802
00:29:53,990 --> 00:29:57,050
<font color="#E5E5E5">would calculate they would gather all</font>

803
00:29:55,610 --> 00:29:59,090
these fingerprints<font color="#E5E5E5"> which would be</font>

804
00:29:57,050 --> 00:30:01,460
analyzed in the cloud<font color="#CCCCCC"> right</font><font color="#E5E5E5"> but actually</font>

805
00:29:59,090 --> 00:30:03,439
there<font color="#CCCCCC"> are no guarantees</font><font color="#E5E5E5"> because going</font>

806
00:30:01,460 --> 00:30:04,730
back<font color="#E5E5E5"> to a third model as an attacker</font><font color="#CCCCCC"> I</font>

807
00:30:03,440 --> 00:30:06,650
control the browser I control<font color="#E5E5E5"> that</font>

808
00:30:04,730 --> 00:30:08,150
machine<font color="#CCCCCC"> right for example the first</font>

809
00:30:06,650 --> 00:30:10,670
<font color="#CCCCCC">example</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the headless headless</font>

810
00:30:08,150 --> 00:30:12,530
browsers<font color="#E5E5E5"> right so headless browsers are</font>

811
00:30:10,670 --> 00:30:15,890
browsers without<font color="#CCCCCC"> a GUI they are often</font>

812
00:30:12,530 --> 00:30:18,350
used<font color="#CCCCCC"> for automation</font><font color="#E5E5E5"> and testing and then</font>

813
00:30:15,890 --> 00:30:19,730
many times<font color="#E5E5E5"> they are full browsers or</font>

814
00:30:18,350 --> 00:30:22,340
many<font color="#CCCCCC"> times</font><font color="#E5E5E5"> you are actually running</font>

815
00:30:19,730 --> 00:30:23,660
<font color="#E5E5E5">JavaScript</font><font color="#CCCCCC"> in a virtual</font><font color="#E5E5E5"> DOM and</font><font color="#CCCCCC"> then of</font>

816
00:30:22,340 --> 00:30:25,159
<font color="#CCCCCC">course they are scriptable for example</font>

817
00:30:23,660 --> 00:30:27,920
you can inject events like you can

818
00:30:25,160 --> 00:30:29,150
inject<font color="#CCCCCC"> like you should go and put this</font>

819
00:30:27,920 --> 00:30:30,650
button<font color="#E5E5E5"> and click search click this</font>

820
00:30:29,150 --> 00:30:32,990
button or<font color="#E5E5E5"> you can inject the key streams</font>

821
00:30:30,650 --> 00:30:35,060
or whatever right<font color="#CCCCCC"> and there are a whole</font>

822
00:30:32,990 --> 00:30:37,220
bunch<font color="#E5E5E5"> of them like</font><font color="#CCCCCC"> most recently even</font>

823
00:30:35,060 --> 00:30:39,770
<font color="#E5E5E5">chrome really</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> they're headless</font>

824
00:30:37,220 --> 00:30:42,950
browser there is phantom<font color="#CCCCCC"> J's there is</font>

825
00:30:39,770 --> 00:30:44,480
slimmer<font color="#CCCCCC"> yes a whole</font><font color="#E5E5E5"> bunch of them and</font>

826
00:30:42,950 --> 00:30:47,030
the idea<font color="#CCCCCC"> is that yeah you</font><font color="#E5E5E5"> can use these</font>

827
00:30:44,480 --> 00:30:51,320
browsers to<font color="#E5E5E5"> basically automate your</font>

828
00:30:47,030 --> 00:30:52,879
<font color="#CCCCCC">request</font><font color="#E5E5E5"> and I found that many</font><font color="#CCCCCC"> of the</font>

829
00:30:51,320 --> 00:30:54,679
bots and<font color="#E5E5E5"> fraud detection solutions which</font>

830
00:30:52,880 --> 00:30:57,020
were<font color="#CCCCCC"> especially built in-house by bigger</font>

831
00:30:54,680 --> 00:30:58,880
companies like this<font color="#E5E5E5"> was a lot this alone</font>

832
00:30:57,020 --> 00:31:01,610
<font color="#E5E5E5">was enough to basically bypass them or</font>

833
00:30:58,880 --> 00:31:02,870
run past them where maybe they were not

834
00:31:01,610 --> 00:31:05,899
<font color="#CCCCCC">very</font><font color="#E5E5E5"> well maintained or they were not</font>

835
00:31:02,870 --> 00:31:06,889
<font color="#CCCCCC">looking for</font><font color="#E5E5E5"> these sort of solutions</font><font color="#CCCCCC"> but</font>

836
00:31:05,900 --> 00:31:08,390
<font color="#E5E5E5">yeah this this was pretty effective</font>

837
00:31:06,890 --> 00:31:11,510
against some of<font color="#E5E5E5"> the solutions</font><font color="#CCCCCC"> that were</font>

838
00:31:08,390 --> 00:31:12,920
deployed<font color="#CCCCCC"> interestingly there were there</font>

839
00:31:11,510 --> 00:31:15,080
<font color="#E5E5E5">are more sophisticated solutions</font>

840
00:31:12,920 --> 00:31:17,240
<font color="#CCCCCC">especially coming from vendors which</font>

841
00:31:15,080 --> 00:31:19,040
were specifically<font color="#CCCCCC"> looking for headless</font>

842
00:31:17,240 --> 00:31:21,290
browsers<font color="#E5E5E5"> but they were looking for</font>

843
00:31:19,040 --> 00:31:22,909
headless browsers using<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> so</font>

844
00:31:21,290 --> 00:31:24,440
you<font color="#E5E5E5"> could actually see</font><font color="#CCCCCC"> exactly what</font>

845
00:31:22,910 --> 00:31:26,240
<font color="#E5E5E5">their how they are looking for these</font>

846
00:31:24,440 --> 00:31:28,310
browsers and again you can you could

847
00:31:26,240 --> 00:31:29,480
find ways<font color="#E5E5E5"> to bypass them as well so</font><font color="#CCCCCC"> it</font>

848
00:31:28,310 --> 00:31:31,730
was kind of<font color="#E5E5E5"> interesting so there is</font>

849
00:31:29,480 --> 00:31:35,610
<font color="#CCCCCC">always this arm brace on</font>

850
00:31:31,730 --> 00:31:37,559
so the next problem<font color="#E5E5E5"> is just what I would</font>

851
00:31:35,610 --> 00:31:39,740
<font color="#E5E5E5">call as the</font><font color="#CCCCCC"> stripping attack which was</font>

852
00:31:37,559 --> 00:31:42,360
very<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> I know it was</font>

853
00:31:39,740 --> 00:31:44,520
surprising<font color="#E5E5E5"> so going back to</font><font color="#CCCCCC"> the</font>

854
00:31:42,360 --> 00:31:45,899
architecture like as I<font color="#E5E5E5"> mentioned there's</font>

855
00:31:44,520 --> 00:31:47,340
<font color="#CCCCCC">the service</font><font color="#E5E5E5"> provider which in the cloud</font>

856
00:31:45,900 --> 00:31:49,500
and then there's this magical<font color="#CCCCCC"> Java</font>

857
00:31:47,340 --> 00:31:51,600
<font color="#E5E5E5">fingerprint</font><font color="#CCCCCC"> days file which is fetched</font>

858
00:31:49,500 --> 00:31:54,299
right and it sent this fingerprint back

859
00:31:51,600 --> 00:31:56,840
to the cloud now which analyzes it<font color="#CCCCCC"> and</font>

860
00:31:54,299 --> 00:31:58,830
then the web server gets this<font color="#E5E5E5"> this code</font>

861
00:31:56,840 --> 00:32:01,080
what if you never<font color="#E5E5E5"> load the</font><font color="#CCCCCC"> JavaScript</font>

862
00:31:58,830 --> 00:32:02,280
<font color="#CCCCCC">file</font><font color="#E5E5E5"> and what if you never</font><font color="#CCCCCC"> send this</font>

863
00:32:01,080 --> 00:32:04,530
thing<font color="#E5E5E5"> to bring back</font><font color="#CCCCCC"> to the cloud like</font>

864
00:32:02,280 --> 00:32:06,720
what happens interestingly in many

865
00:32:04,530 --> 00:32:09,720
<font color="#E5E5E5">scenarios this was enough</font><font color="#CCCCCC"> to bypass some</font>

866
00:32:06,720 --> 00:32:11,850
of<font color="#E5E5E5"> the solutions</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> think the reason</font>

867
00:32:09,720 --> 00:32:14,549
was what the solution

868
00:32:11,850 --> 00:32:17,520
<font color="#CCCCCC">they either the web server</font><font color="#E5E5E5"> they were not</font>

869
00:32:14,549 --> 00:32:19,080
fully confident in the service provider

870
00:32:17,520 --> 00:32:20,940
<font color="#E5E5E5">like</font><font color="#CCCCCC"> they would ask like what</font><font color="#E5E5E5"> do you</font>

871
00:32:19,080 --> 00:32:23,040
know about this particular<font color="#CCCCCC"> session and</font>

872
00:32:20,940 --> 00:32:24,750
there is and the service<font color="#E5E5E5"> provider will</font>

873
00:32:23,040 --> 00:32:27,389
say which which<font color="#CCCCCC"> session I haven't seen</font>

874
00:32:24,750 --> 00:32:28,679
this session<font color="#E5E5E5"> and maybe some of the</font>

875
00:32:27,390 --> 00:32:29,970
solution they fail<font color="#CCCCCC"> open so they would</font>

876
00:32:28,679 --> 00:32:32,250
allow these requests to go through

877
00:32:29,970 --> 00:32:33,450
<font color="#E5E5E5">because if you block a legitimate</font>

878
00:32:32,250 --> 00:32:36,750
request<font color="#E5E5E5"> you are impacting</font><font color="#CCCCCC"> your business</font>

879
00:32:33,450 --> 00:32:38,760
<font color="#E5E5E5">right so in many cases</font><font color="#CCCCCC"> again this hope</font>

880
00:32:36,750 --> 00:32:40,580
this was enough to<font color="#CCCCCC"> basically bypass</font><font color="#E5E5E5"> some</font>

881
00:32:38,760 --> 00:32:42,629
<font color="#E5E5E5">of these solutions</font><font color="#CCCCCC"> and interestingly</font>

882
00:32:40,580 --> 00:32:45,030
some<font color="#E5E5E5"> of these vendors they actually</font>

883
00:32:42,630 --> 00:32:46,830
<font color="#E5E5E5">realize</font><font color="#CCCCCC"> that this is a problem said they</font>

884
00:32:45,030 --> 00:32:48,540
would implement<font color="#E5E5E5"> so in one particular</font>

885
00:32:46,830 --> 00:32:51,360
<font color="#CCCCCC">case they would implement</font><font color="#E5E5E5"> a defense</font>

886
00:32:48,540 --> 00:32:53,610
against this so what they<font color="#E5E5E5"> would do is in</font>

887
00:32:51,360 --> 00:32:55,590
the normal<font color="#E5E5E5"> page in the normal login page</font>

888
00:32:53,610 --> 00:32:57,510
<font color="#E5E5E5">they would check if fingerprint or</font>

889
00:32:55,590 --> 00:32:59,280
<font color="#CCCCCC">jeaious file was loaded or not and if</font>

890
00:32:57,510 --> 00:33:00,929
the file was<font color="#CCCCCC"> not</font><font color="#E5E5E5"> loaded they would not</font>

891
00:32:59,280 --> 00:33:04,470
load the<font color="#E5E5E5"> entire</font><font color="#CCCCCC"> page</font><font color="#E5E5E5"> so it actually</font>

892
00:33:00,929 --> 00:33:06,390
<font color="#CCCCCC">never get the wrote the entire</font><font color="#E5E5E5"> page</font><font color="#CCCCCC"> but</font>

893
00:33:04,470 --> 00:33:08,309
again this check was again done on the

894
00:33:06,390 --> 00:33:10,890
<font color="#E5E5E5">client side so what I</font><font color="#CCCCCC"> did for example</font>

895
00:33:08,309 --> 00:33:12,780
was I mapped this<font color="#E5E5E5"> for somebody service</font>

896
00:33:10,890 --> 00:33:15,059
provider was abc.com<font color="#CCCCCC"> I mapped it to</font>

897
00:33:12,780 --> 00:33:17,070
localhost<font color="#CCCCCC"> and then I had fingerprint</font><font color="#E5E5E5"> or</font>

898
00:33:15,059 --> 00:33:19,049
<font color="#CCCCCC">JS file on my local host which</font><font color="#E5E5E5"> was an</font>

899
00:33:17,070 --> 00:33:20,790
empty file<font color="#E5E5E5"> right so when the they did</font>

900
00:33:19,049 --> 00:33:23,160
the check the check failed the check

901
00:33:20,790 --> 00:33:24,690
<font color="#E5E5E5">passed sorry right so yeah that was</font>

902
00:33:23,160 --> 00:33:27,570
enough<font color="#E5E5E5"> to basically bypass that</font>

903
00:33:24,690 --> 00:33:30,000
particular vendor for example and then

904
00:33:27,570 --> 00:33:31,710
surprisingly<font color="#E5E5E5"> this also worked in the</font>

905
00:33:30,000 --> 00:33:33,720
other scenario<font color="#E5E5E5"> where actually there was</font>

906
00:33:31,710 --> 00:33:35,610
an inline device where<font color="#CCCCCC"> basically what I</font>

907
00:33:33,720 --> 00:33:37,770
did<font color="#CCCCCC"> was I used</font><font color="#E5E5E5"> a man-in-the-middle proxy</font>

908
00:33:35,610 --> 00:33:39,418
which sit<font color="#CCCCCC"> in front</font><font color="#E5E5E5"> sat in</font><font color="#CCCCCC"> front</font><font color="#E5E5E5"> of my</font>

909
00:33:37,770 --> 00:33:42,330
client browser<font color="#E5E5E5"> and it would basically</font>

910
00:33:39,419 --> 00:33:44,340
strip out this<font color="#CCCCCC"> JavaScript file and then</font>

911
00:33:42,330 --> 00:33:45,689
surprisingly in some of these<font color="#CCCCCC"> cases this</font>

912
00:33:44,340 --> 00:33:48,269
was enough

913
00:33:45,690 --> 00:33:50,950
again I think the reason is<font color="#CCCCCC"> basically</font>

914
00:33:48,269 --> 00:33:52,389
the<font color="#E5E5E5"> the web server</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> for some of the</font>

915
00:33:50,950 --> 00:33:54,549
banking application in this<font color="#E5E5E5"> scenario</font>

916
00:33:52,389 --> 00:33:57,279
<font color="#CCCCCC">they are worried that</font><font color="#E5E5E5"> if you block</font>

917
00:33:54,549 --> 00:33:59,740
legitimate<font color="#CCCCCC"> requests</font><font color="#E5E5E5"> it it might be bad</font>

918
00:33:57,279 --> 00:34:00,639
<font color="#CCCCCC">for their business so in this case what</font>

919
00:33:59,740 --> 00:34:03,210
I did was I use a man-in-the-middle

920
00:34:00,639 --> 00:34:06,340
proxy either I would<font color="#E5E5E5"> rewrite the page</font>

921
00:34:03,210 --> 00:34:07,840
<font color="#E5E5E5">before it hits my browser</font><font color="#CCCCCC"> or what I</font>

922
00:34:06,340 --> 00:34:09,819
<font color="#E5E5E5">would do is I would modify the payload</font>

923
00:34:07,840 --> 00:34:12,969
when it's going back<font color="#E5E5E5"> from my browser to</font>

924
00:34:09,819 --> 00:34:16,509
<font color="#CCCCCC">the web server so this was the shipping</font>

925
00:34:12,969 --> 00:34:17,560
attack again<font color="#E5E5E5"> so the next so many of</font>

926
00:34:16,510 --> 00:34:19,419
these solutions of<font color="#CCCCCC"> course they don't</font>

927
00:34:17,560 --> 00:34:21,279
fall for<font color="#E5E5E5"> this this sort</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> a Dumbo tack</font>

928
00:34:19,418 --> 00:34:23,319
so they have checks like if you don't

929
00:34:21,280 --> 00:34:25,149
see the<font color="#CCCCCC"> finger print</font><font color="#E5E5E5"> let's not allow</font>

930
00:34:23,319 --> 00:34:27,730
this request<font color="#E5E5E5"> to go through but then the</font>

931
00:34:25,149 --> 00:34:31,149
<font color="#E5E5E5">next problem is a replay</font><font color="#CCCCCC"> attacks so the</font>

932
00:34:27,730 --> 00:34:32,909
idea<font color="#E5E5E5"> is that for</font><font color="#CCCCCC"> example this is like a</font>

933
00:34:31,149 --> 00:34:35,469
<font color="#CCCCCC">proof-of-concept</font><font color="#E5E5E5"> so I was running</font>

934
00:34:32,909 --> 00:34:37,569
example.com is basically<font color="#E5E5E5"> my local host</font><font color="#CCCCCC"> I</font>

935
00:34:35,469 --> 00:34:40,328
have like an authentication page login

936
00:34:37,569 --> 00:34:42,369
<font color="#E5E5E5">dot PHP and then you have this</font><font color="#CCCCCC"> use user</font>

937
00:34:40,329 --> 00:34:43,629
equals which is<font color="#CCCCCC"> the username and then</font>

938
00:34:42,369 --> 00:34:45,550
there's the password equals field which

939
00:34:43,629 --> 00:34:47,259
is<font color="#E5E5E5"> the password</font><font color="#CCCCCC"> right and then</font><font color="#E5E5E5"> after</font>

940
00:34:45,550 --> 00:34:49,839
that there<font color="#CCCCCC"> is this this</font><font color="#E5E5E5"> giant red box</font>

941
00:34:47,260 --> 00:34:51,190
which is fingerprint equals something<font color="#CCCCCC"> so</font>

942
00:34:49,839 --> 00:34:53,109
basically I use the fingerprint<font color="#CCCCCC"> geus</font>

943
00:34:51,190 --> 00:34:54,760
<font color="#CCCCCC">open source library and then</font><font color="#E5E5E5"> I'm</font>

944
00:34:53,109 --> 00:34:56,520
calculating<font color="#E5E5E5"> a subset of my browser</font>

945
00:34:54,760 --> 00:34:59,230
fingerprint<font color="#E5E5E5"> and I'm sending</font><font color="#CCCCCC"> it back to</font>

946
00:34:56,520 --> 00:35:01,810
<font color="#E5E5E5">to the server right so basically I mean</font>

947
00:34:59,230 --> 00:35:04,180
<font color="#E5E5E5">I</font><font color="#CCCCCC"> mean making like what kind of</font><font color="#E5E5E5"> requests</font>

948
00:35:01,810 --> 00:35:06,369
happen in the real<font color="#E5E5E5"> world so the problem</font>

949
00:35:04,180 --> 00:35:07,950
with this<font color="#E5E5E5"> and I or this fingerprint is</font>

950
00:35:06,369 --> 00:35:12,430
if you look at this fingerprint equals

951
00:35:07,950 --> 00:35:15,939
string<font color="#E5E5E5"> there is no token in this string</font>

952
00:35:12,430 --> 00:35:18,700
which is<font color="#CCCCCC"> dynamic so what happens is if I</font>

953
00:35:15,940 --> 00:35:21,670
can capture<font color="#E5E5E5"> a finger browser fingerprint</font>

954
00:35:18,700 --> 00:35:24,189
for example<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> I am a legitimate</font><font color="#CCCCCC"> user I</font>

955
00:35:21,670 --> 00:35:25,750
am using the same<font color="#E5E5E5"> website</font><font color="#CCCCCC"> I captured my</font>

956
00:35:24,190 --> 00:35:28,990
browser fingerprint right<font color="#E5E5E5"> and I capture</font>

957
00:35:25,750 --> 00:35:30,609
<font color="#CCCCCC">it</font><font color="#E5E5E5"> and if if it's not dynamic</font><font color="#CCCCCC"> I can</font>

958
00:35:28,990 --> 00:35:32,709
basically replay the same fingerprint

959
00:35:30,609 --> 00:35:34,270
again and again right<font color="#E5E5E5"> so I don't</font>

960
00:35:32,710 --> 00:35:35,859
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> have to run the</font><font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> file</font>

961
00:35:34,270 --> 00:35:37,420
in the<font color="#CCCCCC"> browser</font><font color="#E5E5E5"> I can</font><font color="#CCCCCC"> just replay the</font>

962
00:35:35,859 --> 00:35:39,578
same browser fingerprint again and again

963
00:35:37,420 --> 00:35:41,619
for<font color="#E5E5E5"> example in this case what I did was</font>

964
00:35:39,579 --> 00:35:43,510
I have this<font color="#CCCCCC"> batch script which is basing</font>

965
00:35:41,619 --> 00:35:44,980
an infinite loop<font color="#E5E5E5"> which is basically or</font>

966
00:35:43,510 --> 00:35:46,900
sending the same<font color="#CCCCCC"> username</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> password</font>

967
00:35:44,980 --> 00:35:49,210
<font color="#CCCCCC">and the browser fingerprint to the</font><font color="#E5E5E5"> web</font>

968
00:35:46,900 --> 00:35:50,589
server<font color="#E5E5E5"> right so in case</font><font color="#CCCCCC"> of a real attack</font>

969
00:35:49,210 --> 00:35:53,800
instead of sending<font color="#E5E5E5"> the same username and</font>

970
00:35:50,589 --> 00:35:54,730
<font color="#E5E5E5">password and the browser fingerprint the</font>

971
00:35:53,800 --> 00:35:55,690
attacker what they would do is they

972
00:35:54,730 --> 00:35:57,849
would change the<font color="#E5E5E5"> username and password</font>

973
00:35:55,690 --> 00:35:58,900
<font color="#CCCCCC">and keep the fingerprint the same or</font>

974
00:35:57,849 --> 00:36:01,000
they were for<font color="#CCCCCC"> some</font>

975
00:35:58,900 --> 00:36:03,039
modify the<font color="#CCCCCC"> fingerprint</font><font color="#E5E5E5"> slightly right so</font>

976
00:36:01,000 --> 00:36:04,690
in this case<font color="#E5E5E5"> there is no check on the</font>

977
00:36:03,039 --> 00:36:07,599
<font color="#CCCCCC">freshness of the payload right you could</font>

978
00:36:04,690 --> 00:36:10,480
replay the same<font color="#E5E5E5"> thing again</font><font color="#CCCCCC"> and again so</font>

979
00:36:07,599 --> 00:36:11,890
the solution for<font color="#E5E5E5"> replay attacks</font><font color="#CCCCCC"> is he</font>

980
00:36:10,480 --> 00:36:14,109
should introduce some sort<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> token</font>

981
00:36:11,890 --> 00:36:16,538
<font color="#E5E5E5">which is dynamic so every time you</font>

982
00:36:14,109 --> 00:36:18,190
actually send the page<font color="#CCCCCC"> send</font><font color="#E5E5E5"> the</font>

983
00:36:16,539 --> 00:36:20,529
<font color="#CCCCCC">JavaScript file there is</font><font color="#E5E5E5"> some sort of a</font>

984
00:36:18,190 --> 00:36:23,440
token<font color="#E5E5E5"> which is which is unique</font><font color="#CCCCCC"> for that</font>

985
00:36:20,529 --> 00:36:25,480
session and then actually I<font color="#CCCCCC"> found like</font>

986
00:36:23,440 --> 00:36:26,940
some of the<font color="#E5E5E5"> guys who are implementing</font>

987
00:36:25,480 --> 00:36:29,760
this<font color="#E5E5E5"> they didn't implement it correctly</font>

988
00:36:26,940 --> 00:36:32,680
<font color="#E5E5E5">so in one scenario what I found was</font>

989
00:36:29,760 --> 00:36:34,390
there<font color="#E5E5E5"> was this</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> addiction solution</font>

990
00:36:32,680 --> 00:36:36,250
<font color="#E5E5E5">what they were doing was they</font><font color="#CCCCCC"> were</font>

991
00:36:34,390 --> 00:36:38,288
introducing a dynamic random token

992
00:36:36,250 --> 00:36:39,880
inside the<font color="#CCCCCC"> payload and</font><font color="#E5E5E5"> the way they were</font>

993
00:36:38,289 --> 00:36:41,710
doing<font color="#E5E5E5"> it was they would get the</font>

994
00:36:39,880 --> 00:36:43,839
timestamp of<font color="#E5E5E5"> when the JavaScript ran</font>

995
00:36:41,710 --> 00:36:45,760
they would get the browser fingerprint

996
00:36:43,839 --> 00:36:47,200
<font color="#CCCCCC">so what they</font><font color="#E5E5E5"> would do is they would</font>

997
00:36:45,760 --> 00:36:48,910
append the timestamp<font color="#E5E5E5"> in front of the</font>

998
00:36:47,200 --> 00:36:51,089
browser fingerprint<font color="#E5E5E5"> and then they were</font>

999
00:36:48,910 --> 00:36:53,230
they had a function<font color="#E5E5E5"> some function f</font>

1000
00:36:51,089 --> 00:36:56,170
which would<font color="#E5E5E5"> take the timestamp as an</font>

1001
00:36:53,230 --> 00:36:57,520
input<font color="#E5E5E5"> and</font><font color="#CCCCCC"> would generate a token which</font>

1002
00:36:56,170 --> 00:36:59,740
<font color="#CCCCCC">was busy</font><font color="#E5E5E5"> as a function of that timestamp</font>

1003
00:36:57,520 --> 00:37:02,589
<font color="#CCCCCC">right but again the problem was this</font>

1004
00:36:59,740 --> 00:37:04,538
function f was in JavaScript<font color="#CCCCCC"> so again</font><font color="#E5E5E5"> I</font>

1005
00:37:02,589 --> 00:37:06,520
as an attacker know exactly what you're

1006
00:37:04,539 --> 00:37:08,890
<font color="#CCCCCC">doing or how it calculating</font><font color="#E5E5E5"> this token</font>

1007
00:37:06,520 --> 00:37:10,839
<font color="#E5E5E5">and I can replicate the same logic</font><font color="#CCCCCC"> in</font>

1008
00:37:08,890 --> 00:37:13,720
Python or in in bash<font color="#E5E5E5"> or whatever right</font>

1009
00:37:10,839 --> 00:37:17,770
<font color="#E5E5E5">so for example this was enough to</font><font color="#CCCCCC"> bypass</font>

1010
00:37:13,720 --> 00:37:19,509
this particular solution<font color="#E5E5E5"> and basically I</font>

1011
00:37:17,770 --> 00:37:22,240
as an attacker<font color="#E5E5E5"> I can pick any</font><font color="#CCCCCC"> x time</font>

1012
00:37:19,510 --> 00:37:23,940
<font color="#E5E5E5">that I want and because of this function</font>

1013
00:37:22,240 --> 00:37:27,250
I<font color="#CCCCCC"> would get the corresponding</font><font color="#E5E5E5"> token</font>

1014
00:37:23,940 --> 00:37:29,109
right it would basically bypass<font color="#CCCCCC"> some</font><font color="#E5E5E5"> of</font>

1015
00:37:27,250 --> 00:37:30,849
<font color="#E5E5E5">these checks the correct way to do this</font>

1016
00:37:29,109 --> 00:37:33,700
is basically to use<font color="#E5E5E5"> some sort of</font>

1017
00:37:30,849 --> 00:37:35,440
scenario<font color="#E5E5E5"> like for</font><font color="#CCCCCC"> examples here as</font><font color="#E5E5E5"> CSRF</font>

1018
00:37:33,700 --> 00:37:37,450
tokens<font color="#CCCCCC"> that every</font><font color="#E5E5E5"> time you get the page</font>

1019
00:37:35,440 --> 00:37:39,700
<font color="#E5E5E5">now you get</font><font color="#CCCCCC"> some sort of a dynamic token</font>

1020
00:37:37,450 --> 00:37:42,009
which gets changed<font color="#CCCCCC"> so every time</font><font color="#E5E5E5"> you</font>

1021
00:37:39,700 --> 00:37:43,868
send<font color="#E5E5E5"> the payload</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> basically you can</font>

1022
00:37:42,010 --> 00:37:46,180
check if the<font color="#CCCCCC"> token is</font><font color="#E5E5E5"> correct or not</font>

1023
00:37:43,869 --> 00:37:48,640
<font color="#E5E5E5">right but again</font><font color="#CCCCCC"> is this is</font><font color="#E5E5E5"> very hard to</font>

1024
00:37:46,180 --> 00:37:50,919
<font color="#E5E5E5">implement especially for solutions which</font>

1025
00:37:48,640 --> 00:37:52,509
are<font color="#E5E5E5"> implemented in a cloud like</font><font color="#CCCCCC"> for</font>

1026
00:37:50,920 --> 00:37:54,339
inline<font color="#CCCCCC"> solutions since</font><font color="#E5E5E5"> they sit in front</font>

1027
00:37:52,510 --> 00:37:56,289
<font color="#E5E5E5">of the web server they can dynamically</font>

1028
00:37:54,339 --> 00:37:58,538
change<font color="#CCCCCC"> the</font><font color="#E5E5E5"> page they can dynamically</font>

1029
00:37:56,289 --> 00:38:00,339
<font color="#E5E5E5">inject the tokens but I'm</font><font color="#CCCCCC"> not sure</font>

1030
00:37:58,539 --> 00:38:03,970
exactly how you would do that<font color="#CCCCCC"> in some</font>

1031
00:38:00,339 --> 00:38:06,788
<font color="#E5E5E5">sort of a</font><font color="#CCCCCC"> cloud-based deployments okay</font>

1032
00:38:03,970 --> 00:38:07,209
<font color="#E5E5E5">and now let's talk about the next</font>

1033
00:38:06,789 --> 00:38:10,690
problem

1034
00:38:07,210 --> 00:38:12,760
so first biggest problem was<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> I</font>

1035
00:38:10,690 --> 00:38:14,590
<font color="#CCCCCC">as</font><font color="#E5E5E5"> and I can know exactly what there</font>

1036
00:38:12,760 --> 00:38:16,210
collecting<font color="#E5E5E5"> from my browser</font><font color="#CCCCCC"> so I know</font>

1037
00:38:14,590 --> 00:38:18,670
what they're looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> second big</font>

1038
00:38:16,210 --> 00:38:20,290
<font color="#E5E5E5">problem is basically there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> no</font>

1039
00:38:18,670 --> 00:38:21,880
<font color="#E5E5E5">guarantees</font><font color="#CCCCCC"> that once they send</font><font color="#E5E5E5"> the</font>

1040
00:38:20,290 --> 00:38:24,759
JavaScript it will actually<font color="#E5E5E5"> execute in</font>

1041
00:38:21,880 --> 00:38:26,260
the browser<font color="#E5E5E5"> in a real browser</font><font color="#CCCCCC"> the third</font>

1042
00:38:24,760 --> 00:38:28,540
problem is that<font color="#E5E5E5"> even if the JavaScript</font>

1043
00:38:26,260 --> 00:38:30,000
executes<font color="#E5E5E5"> there are no guarantees of</font><font color="#CCCCCC"> like</font>

1044
00:38:28,540 --> 00:38:32,610
if you<font color="#E5E5E5"> get the browser fingerprinting</font>

1045
00:38:30,000 --> 00:38:34,930
legitimate<font color="#CCCCCC"> but actually it is correct</font>

1046
00:38:32,610 --> 00:38:35,980
<font color="#CCCCCC">because</font><font color="#E5E5E5"> what what they are doing is</font>

1047
00:38:34,930 --> 00:38:37,870
<font color="#CCCCCC">basically they are calculating</font><font color="#E5E5E5"> this</font>

1048
00:38:35,980 --> 00:38:39,160
browser fingerprint and<font color="#CCCCCC"> the way they</font>

1049
00:38:37,870 --> 00:38:40,630
calculate this browser fingerprint is

1050
00:38:39,160 --> 00:38:42,790
for<font color="#CCCCCC"> example the query certain</font>

1051
00:38:40,630 --> 00:38:44,080
characteristics of the browser for

1052
00:38:42,790 --> 00:38:45,550
<font color="#CCCCCC">example if they want to</font><font color="#E5E5E5"> figure out what</font>

1053
00:38:44,080 --> 00:38:48,190
is my<font color="#E5E5E5"> CPU architecture what they would</font>

1054
00:38:45,550 --> 00:38:50,500
do is they would call this navigator dot

1055
00:38:48,190 --> 00:38:53,850
<font color="#E5E5E5">CPU class right it will return if I'm</font>

1056
00:38:50,500 --> 00:38:57,040
<font color="#E5E5E5">running on</font><font color="#CCCCCC"> x86 and arm or whatever</font><font color="#E5E5E5"> right</font>

1057
00:38:53,850 --> 00:38:59,580
but<font color="#E5E5E5"> since I</font><font color="#CCCCCC"> can't roll</font><font color="#E5E5E5"> the browser</font><font color="#CCCCCC"> I can</font>

1058
00:38:57,040 --> 00:39:01,840
lie back to this function<font color="#CCCCCC"> call right</font>

1059
00:38:59,580 --> 00:39:04,529
<font color="#E5E5E5">which basically brings us to the next</font>

1060
00:39:01,840 --> 00:39:06,730
topic of forging browser fingerprints

1061
00:39:04,530 --> 00:39:07,810
<font color="#CCCCCC">where</font><font color="#E5E5E5"> basically you are busy lying back</font>

1062
00:39:06,730 --> 00:39:09,100
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> JavaScript file</font>

1063
00:39:07,810 --> 00:39:11,290
so the browser<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> lies back to the</font>

1064
00:39:09,100 --> 00:39:14,200
<font color="#CCCCCC">JavaScript file so there is</font><font color="#E5E5E5"> actually</font>

1065
00:39:11,290 --> 00:39:15,790
some work done on<font color="#E5E5E5"> this which</font><font color="#CCCCCC"> key so</font>

1066
00:39:14,200 --> 00:39:17,710
<font color="#E5E5E5">there's this paper recall</font><font color="#CCCCCC"> FB random</font>

1067
00:39:15,790 --> 00:39:19,330
which came out<font color="#CCCCCC"> a few months ago where</font>

1068
00:39:17,710 --> 00:39:21,820
when I was already doing<font color="#E5E5E5"> some of this</font>

1069
00:39:19,330 --> 00:39:24,819
work<font color="#CCCCCC"> what did did was these guys</font>

1070
00:39:21,820 --> 00:39:27,310
implemented a custom browser<font color="#E5E5E5"> which would</font>

1071
00:39:24,820 --> 00:39:28,660
introduce<font color="#E5E5E5"> some noise whenever</font><font color="#CCCCCC"> update</font>

1072
00:39:27,310 --> 00:39:30,720
whenever somebody<font color="#E5E5E5"> was calculating the</font>

1073
00:39:28,660 --> 00:39:33,220
browser fingerprint right<font color="#E5E5E5"> for example</font>

1074
00:39:30,720 --> 00:39:34,930
<font color="#E5E5E5">for the</font><font color="#CCCCCC"> canvas a fingerprint when you</font>

1075
00:39:33,220 --> 00:39:38,709
write<font color="#E5E5E5"> something on the canvas and you're</font>

1076
00:39:34,930 --> 00:39:40,690
<font color="#E5E5E5">trying to read it back</font><font color="#CCCCCC"> and you're</font><font color="#E5E5E5"> trying</font>

1077
00:39:38,710 --> 00:39:41,950
to<font color="#E5E5E5"> read the raw pixels back in this</font>

1078
00:39:40,690 --> 00:39:44,100
function they would introduce<font color="#E5E5E5"> some sort</font>

1079
00:39:41,950 --> 00:39:46,359
of<font color="#E5E5E5"> noise so</font><font color="#CCCCCC"> the idea is basically</font>

1080
00:39:44,100 --> 00:39:47,860
because of this<font color="#E5E5E5"> noise</font><font color="#CCCCCC"> the fingerprint</font>

1081
00:39:46,360 --> 00:39:51,340
would<font color="#E5E5E5"> change and the</font><font color="#CCCCCC"> reason they were</font>

1082
00:39:47,860 --> 00:39:53,800
trying<font color="#E5E5E5"> to do this was because to</font>

1083
00:39:51,340 --> 00:39:56,020
<font color="#E5E5E5">basically block user tracking so that</font>

1084
00:39:53,800 --> 00:39:58,330
was their main main idea<font color="#E5E5E5"> but again you</font>

1085
00:39:56,020 --> 00:40:00,210
can<font color="#E5E5E5"> reuse the same technique to bypass</font>

1086
00:39:58,330 --> 00:40:02,440
rotten<font color="#CCCCCC"> bar detection solutions</font><font color="#E5E5E5"> as well</font>

1087
00:40:00,210 --> 00:40:05,470
now there are other projects<font color="#E5E5E5"> like open</font>

1088
00:40:02,440 --> 00:40:07,330
be open wpm<font color="#CCCCCC"> also this came out of</font>

1089
00:40:05,470 --> 00:40:10,029
<font color="#E5E5E5">Princeton and fp9</font><font color="#CCCCCC"> time actually</font><font color="#E5E5E5"> is</font>

1090
00:40:07,330 --> 00:40:11,110
<font color="#CCCCCC">available on github</font><font color="#E5E5E5"> so the idea is</font>

1091
00:40:10,030 --> 00:40:12,460
basically what you want<font color="#E5E5E5"> to do is you</font>

1092
00:40:11,110 --> 00:40:14,680
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> create a database of normal</font>

1093
00:40:12,460 --> 00:40:16,630
<font color="#CCCCCC">fingerprints</font><font color="#E5E5E5"> and when when</font><font color="#CCCCCC"> this</font>

1094
00:40:14,680 --> 00:40:18,700
JavaScript<font color="#CCCCCC"> runs</font><font color="#E5E5E5"> instead of lying back</font>

1095
00:40:16,630 --> 00:40:20,320
with a random fingerprint<font color="#E5E5E5"> you can lie</font>

1096
00:40:18,700 --> 00:40:21,790
<font color="#E5E5E5">back with a fingerprint of your choice</font>

1097
00:40:20,320 --> 00:40:23,830
right see<font color="#E5E5E5"> if</font><font color="#CCCCCC"> you get you can pick a</font>

1098
00:40:21,790 --> 00:40:25,420
fingerprint<font color="#E5E5E5"> and then when the JavaScript</font>

1099
00:40:23,830 --> 00:40:26,610
runs that's<font color="#E5E5E5"> the fingerprint</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> going</font>

1100
00:40:25,420 --> 00:40:29,010
to send it to<font color="#CCCCCC"> them</font><font color="#E5E5E5"> right</font>

1101
00:40:26,610 --> 00:40:30,600
so here is for<font color="#CCCCCC"> example in here is an</font>

1102
00:40:29,010 --> 00:40:33,810
example<font color="#E5E5E5"> so here is a normal Safari</font>

1103
00:40:30,600 --> 00:40:35,400
browser which<font color="#CCCCCC"> is running here is a code</font>

1104
00:40:33,810 --> 00:40:38,040
which<font color="#E5E5E5"> is the right from this fingerprint</font>

1105
00:40:35,400 --> 00:40:39,870
<font color="#E5E5E5">library what is doing is doing canvas</font>

1106
00:40:38,040 --> 00:40:41,880
fingerprinting<font color="#CCCCCC"> the</font><font color="#E5E5E5"> details are not very</font>

1107
00:40:39,870 --> 00:40:43,799
important<font color="#E5E5E5"> but what is doing is</font><font color="#CCCCCC"> basically</font>

1108
00:40:41,880 --> 00:40:45,810
<font color="#CCCCCC">it's drawing on the canvas element and</font>

1109
00:40:43,800 --> 00:40:47,580
it's reading<font color="#CCCCCC"> back through pixels from</font>

1110
00:40:45,810 --> 00:40:49,890
<font color="#E5E5E5">the canvas element</font><font color="#CCCCCC"> so when you read it</font>

1111
00:40:47,580 --> 00:40:51,690
back<font color="#E5E5E5"> so the result is basically an image</font>

1112
00:40:49,890 --> 00:40:54,960
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is basic stiff or encoded right</font>

1113
00:40:51,690 --> 00:40:57,000
<font color="#E5E5E5">you get this long string right</font><font color="#CCCCCC"> and then</font>

1114
00:40:54,960 --> 00:40:59,910
these scripts they create a<font color="#E5E5E5"> md5 hash of</font>

1115
00:40:57,000 --> 00:41:02,400
it and then use<font color="#CCCCCC"> it as a fingerprint what</font>

1116
00:40:59,910 --> 00:41:05,009
<font color="#E5E5E5">I did was I</font><font color="#CCCCCC"> got</font><font color="#E5E5E5"> the source code</font><font color="#CCCCCC"> of</font>

1117
00:41:02,400 --> 00:41:07,080
<font color="#E5E5E5">Safari of WebKit</font><font color="#CCCCCC"> I modified the browser</font>

1118
00:41:05,010 --> 00:41:08,340
<font color="#CCCCCC">I figured</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> exactly where is</font><font color="#E5E5E5"> the</font>

1119
00:41:07,080 --> 00:41:10,740
function<font color="#CCCCCC"> called to read back from the</font>

1120
00:41:08,340 --> 00:41:12,240
<font color="#E5E5E5">canvas</font><font color="#CCCCCC"> I modified it right so for</font>

1121
00:41:10,740 --> 00:41:14,160
example in<font color="#E5E5E5"> this browser when you run the</font>

1122
00:41:12,240 --> 00:41:15,509
same piece<font color="#CCCCCC"> of code which</font><font color="#E5E5E5"> is getting the</font>

1123
00:41:14,160 --> 00:41:17,520
canvas fingerprint<font color="#E5E5E5"> instead of getting</font>

1124
00:41:15,510 --> 00:41:20,100
this long stream it returns this fake

1125
00:41:17,520 --> 00:41:21,810
<font color="#E5E5E5">canvassing event which I chose right so</font>

1126
00:41:20,100 --> 00:41:23,670
instead of<font color="#E5E5E5"> returning this</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> canvas a</font>

1127
00:41:21,810 --> 00:41:26,160
fingerprint<font color="#E5E5E5"> I can return anything which</font>

1128
00:41:23,670 --> 00:41:28,320
I want which brings me<font color="#E5E5E5"> to the point of</font>

1129
00:41:26,160 --> 00:41:30,089
like<font color="#E5E5E5"> if I create a database of normal</font>

1130
00:41:28,320 --> 00:41:31,110
<font color="#CCCCCC">finger prints I can basically cycle</font>

1131
00:41:30,090 --> 00:41:34,890
through<font color="#E5E5E5"> them and then we can basically</font>

1132
00:41:31,110 --> 00:41:36,840
reply back<font color="#E5E5E5"> to this script and in fact</font>

1133
00:41:34,890 --> 00:41:38,040
when I<font color="#E5E5E5"> was doing this research</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> found</font>

1134
00:41:36,840 --> 00:41:39,660
like some of the bad guys<font color="#CCCCCC"> are already</font>

1135
00:41:38,040 --> 00:41:42,029
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> this like there is this tool</font>

1136
00:41:39,660 --> 00:41:44,819
called<font color="#E5E5E5"> anti detect which</font><font color="#CCCCCC"> just sold for</font>

1137
00:41:42,030 --> 00:41:46,920
$400 in the underground right and then

1138
00:41:44,820 --> 00:41:49,230
it's<font color="#E5E5E5"> basically a custom Firefox browser</font>

1139
00:41:46,920 --> 00:41:51,570
where<font color="#E5E5E5"> you can customize it</font><font color="#CCCCCC"> and then you</font>

1140
00:41:49,230 --> 00:41:53,790
can<font color="#CCCCCC"> customize each JavaScript property</font>

1141
00:41:51,570 --> 00:41:55,620
like on the<font color="#E5E5E5"> right hand side if you do</font>

1142
00:41:53,790 --> 00:41:57,870
<font color="#E5E5E5">Windows dot screen like this would be</font>

1143
00:41:55,620 --> 00:41:59,549
<font color="#CCCCCC">the output</font><font color="#E5E5E5"> right and if you want</font><font color="#CCCCCC"> to</font>

1144
00:41:57,870 --> 00:42:01,650
figure out what is the<font color="#E5E5E5"> the user agent</font>

1145
00:41:59,550 --> 00:42:03,720
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> set it to any user region of</font>

1146
00:42:01,650 --> 00:42:05,520
your choice so so the bad<font color="#CCCCCC"> guys</font><font color="#E5E5E5"> have</font>

1147
00:42:03,720 --> 00:42:07,290
already<font color="#E5E5E5"> figured out like these scripts</font>

1148
00:42:05,520 --> 00:42:09,120
<font color="#E5E5E5">work by figuring out your browser</font>

1149
00:42:07,290 --> 00:42:11,070
<font color="#E5E5E5">fingerprint so they are investing a lot</font>

1150
00:42:09,120 --> 00:42:13,529
of<font color="#CCCCCC"> time and effort on writing</font><font color="#E5E5E5"> tools</font>

1151
00:42:11,070 --> 00:42:15,330
which can force those interestingly<font color="#E5E5E5"> even</font>

1152
00:42:13,530 --> 00:42:17,520
<font color="#E5E5E5">though these two sells for $400 it is</font>

1153
00:42:15,330 --> 00:42:19,980
not as sophisticated as a tool from

1154
00:42:17,520 --> 00:42:23,240
academia<font color="#CCCCCC"> epi random so I guess</font><font color="#E5E5E5"> these</font>

1155
00:42:19,980 --> 00:42:23,240
<font color="#CCCCCC">guys don't</font><font color="#E5E5E5"> read academic papers</font>

1156
00:42:23,640 --> 00:42:29,319
so the next thing is<font color="#E5E5E5"> basically user</font>

1157
00:42:27,070 --> 00:42:32,680
behavior<font color="#E5E5E5"> I'll go over it really fast</font><font color="#CCCCCC"> so</font>

1158
00:42:29,320 --> 00:42:34,240
again since<font color="#E5E5E5"> I control the</font><font color="#CCCCCC"> client-side</font><font color="#E5E5E5"> I</font>

1159
00:42:32,680 --> 00:42:37,089
actually<font color="#E5E5E5"> don't need to</font><font color="#CCCCCC"> move the</font><font color="#E5E5E5"> mouse I</font>

1160
00:42:34,240 --> 00:42:38,109
don't need to key in press any<font color="#E5E5E5"> keys</font><font color="#CCCCCC"> what</font>

1161
00:42:37,090 --> 00:42:39,670
I did was<font color="#E5E5E5"> basically I had a</font>

1162
00:42:38,110 --> 00:42:43,300
man-in-the-middle proxy sitting in front

1163
00:42:39,670 --> 00:42:44,890
of<font color="#E5E5E5"> my browser it would</font><font color="#CCCCCC"> basically when my</font>

1164
00:42:43,300 --> 00:42:46,290
browser would send the payload it it

1165
00:42:44,890 --> 00:42:49,000
would append to the<font color="#E5E5E5"> payload this user</font>

1166
00:42:46,290 --> 00:42:50,740
<font color="#E5E5E5">fingerprint right which is derived from</font>

1167
00:42:49,000 --> 00:42:52,480
a normal fingerprint which I<font color="#E5E5E5"> generated</font>

1168
00:42:50,740 --> 00:42:55,029
<font color="#CCCCCC">so</font><font color="#E5E5E5"> it would generate some</font><font color="#CCCCCC"> sort</font><font color="#E5E5E5"> of random</font>

1169
00:42:52,480 --> 00:42:59,110
disturbances some<font color="#CCCCCC"> randomized it a little</font>

1170
00:42:55,030 --> 00:43:00,670
bit<font color="#E5E5E5"> right and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will send it</font><font color="#CCCCCC"> back okay</font>

1171
00:42:59,110 --> 00:43:02,200
so the next<font color="#E5E5E5"> issue is</font><font color="#CCCCCC"> that JavaScript</font>

1172
00:43:00,670 --> 00:43:04,150
<font color="#CCCCCC">basically cannot protect against all</font>

1173
00:43:02,200 --> 00:43:05,799
flows<font color="#E5E5E5"> so the idea is of</font><font color="#CCCCCC"> course in this</font>

1174
00:43:04,150 --> 00:43:07,600
scenario<font color="#E5E5E5"> there was</font><font color="#CCCCCC"> this user which was</font>

1175
00:43:05,800 --> 00:43:09,760
<font color="#E5E5E5">using a browser</font><font color="#CCCCCC"> to authenticate</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

1176
00:43:07,600 --> 00:43:11,710
server<font color="#E5E5E5"> what if there is a mobile app</font>

1177
00:43:09,760 --> 00:43:11,980
which<font color="#E5E5E5"> can be used to authenticate to</font><font color="#CCCCCC"> the</font>

1178
00:43:11,710 --> 00:43:13,540
server

1179
00:43:11,980 --> 00:43:16,720
what is the<font color="#E5E5E5"> mobile app is</font><font color="#CCCCCC"> using</font><font color="#E5E5E5"> some</font>

1180
00:43:13,540 --> 00:43:18,520
other authentic authentication flow like

1181
00:43:16,720 --> 00:43:21,250
<font color="#CCCCCC">Howard javis could be able to defend</font>

1182
00:43:18,520 --> 00:43:22,930
<font color="#E5E5E5">against that then this NIU many of this</font>

1183
00:43:21,250 --> 00:43:24,040
<font color="#E5E5E5">the vendors what</font><font color="#CCCCCC"> they are trying to do</font>

1184
00:43:22,930 --> 00:43:26,200
is they<font color="#E5E5E5"> are trying to use mobile</font><font color="#CCCCCC"> app as</font>

1185
00:43:24,040 --> 00:43:28,540
the case so they basically recompile the

1186
00:43:26,200 --> 00:43:30,609
mobile apps if the banking app has their

1187
00:43:28,540 --> 00:43:33,700
<font color="#CCCCCC">own say Android app they'll recompile</font>

1188
00:43:30,609 --> 00:43:34,810
this with SDK where instead<font color="#CCCCCC"> of a browser</font>

1189
00:43:33,700 --> 00:43:36,790
fingerprint they would have something

1190
00:43:34,810 --> 00:43:37,990
<font color="#E5E5E5">like</font><font color="#CCCCCC"> a device fingerprint</font><font color="#E5E5E5"> again like</font>

1191
00:43:36,790 --> 00:43:39,279
what<font color="#E5E5E5"> is the fingerprint of your device</font>

1192
00:43:37,990 --> 00:43:40,779
and<font color="#CCCCCC"> they would have a</font><font color="#E5E5E5"> again the user</font>

1193
00:43:39,280 --> 00:43:42,970
fingerprint and then they would<font color="#E5E5E5"> send it</font>

1194
00:43:40,780 --> 00:43:44,830
back but<font color="#E5E5E5"> as you can imagine again this</font>

1195
00:43:42,970 --> 00:43:47,350
code actually<font color="#E5E5E5"> runs on the client</font><font color="#CCCCCC"> device</font>

1196
00:43:44,830 --> 00:43:49,180
like the previous<font color="#E5E5E5"> quarter in the count</font>

1197
00:43:47,350 --> 00:43:50,650
<font color="#E5E5E5">client browser which again is controlled</font>

1198
00:43:49,180 --> 00:43:52,690
by<font color="#E5E5E5"> the attacker so you can busy lie back</font>

1199
00:43:50,650 --> 00:43:54,490
<font color="#E5E5E5">so I think</font><font color="#CCCCCC"> even</font><font color="#E5E5E5"> though I have not looked</font>

1200
00:43:52,690 --> 00:43:57,880
at<font color="#E5E5E5"> all these SDKs in detail</font><font color="#CCCCCC"> I think they</font>

1201
00:43:54,490 --> 00:44:01,000
very<font color="#E5E5E5"> similar issues now the final issue</font>

1202
00:43:57,880 --> 00:44:02,680
is<font color="#E5E5E5"> basically the mitigative action so</font>

1203
00:44:01,000 --> 00:44:05,470
suppose I ought<font color="#CCCCCC"> entick eight and I get</font>

1204
00:44:02,680 --> 00:44:06,819
<font color="#CCCCCC">blocked</font><font color="#E5E5E5"> so suppose I pick a particular</font>

1205
00:44:05,470 --> 00:44:08,770
browser fingerprint<font color="#E5E5E5"> I send hundred</font>

1206
00:44:06,820 --> 00:44:12,010
requests or<font color="#CCCCCC"> 200 requests</font><font color="#E5E5E5"> I got blocked</font>

1207
00:44:08,770 --> 00:44:15,550
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> basically gave</font><font color="#CCCCCC"> me gave</font>

1208
00:44:12,010 --> 00:44:17,170
gave it to me<font color="#E5E5E5"> that</font><font color="#CCCCCC"> basically now that I</font>

1209
00:44:15,550 --> 00:44:18,850
can<font color="#CCCCCC"> O's with this fingerprint</font><font color="#E5E5E5"> with</font>

1210
00:44:17,170 --> 00:44:20,950
hundred requests<font color="#E5E5E5"> I get blog let me</font>

1211
00:44:18,850 --> 00:44:22,750
change that<font color="#E5E5E5"> right and given the scenario</font>

1212
00:44:20,950 --> 00:44:24,759
<font color="#E5E5E5">in</font><font color="#CCCCCC"> which for example</font><font color="#E5E5E5"> for especially for</font>

1213
00:44:22,750 --> 00:44:26,109
<font color="#CCCCCC">bar detection solutions</font><font color="#E5E5E5"> where they are</font>

1214
00:44:24,760 --> 00:44:29,230
trying<font color="#CCCCCC"> to detect against automated</font>

1215
00:44:26,109 --> 00:44:31,480
programs<font color="#E5E5E5"> so the the barriers also get a</font>

1216
00:44:29,230 --> 00:44:32,980
response<font color="#E5E5E5"> back really fast so very</font>

1217
00:44:31,480 --> 00:44:35,080
quickly<font color="#E5E5E5"> what they can do is</font><font color="#CCCCCC"> they can</font>

1218
00:44:32,980 --> 00:44:35,950
figure out the blind spots of the

1219
00:44:35,080 --> 00:44:38,140
machine<font color="#CCCCCC"> learning models</font>

1220
00:44:35,950 --> 00:44:39,460
like given this<font color="#E5E5E5"> fingerprint and given</font>

1221
00:44:38,140 --> 00:44:41,290
<font color="#E5E5E5">these this for example</font><font color="#CCCCCC"> number of</font>

1222
00:44:39,460 --> 00:44:44,440
<font color="#CCCCCC">requests I'm able to</font><font color="#E5E5E5"> bypass them or</font>

1223
00:44:41,290 --> 00:44:47,680
<font color="#E5E5E5">whatever right so I think that's another</font>

1224
00:44:44,440 --> 00:44:50,890
another another big problem<font color="#CCCCCC"> and</font><font color="#E5E5E5"> finally</font>

1225
00:44:47,680 --> 00:44:53,169
there are a few other interesting<font color="#CCCCCC"> things</font>

1226
00:44:50,890 --> 00:44:54,940
which<font color="#E5E5E5"> I found the</font><font color="#CCCCCC"> first thing is</font>

1227
00:44:53,170 --> 00:44:56,260
basically<font color="#E5E5E5"> the fraud and bar detection</font>

1228
00:44:54,940 --> 00:44:58,210
solutions<font color="#E5E5E5"> are themselves finger</font>

1229
00:44:56,260 --> 00:44:59,829
printable what I mean by that<font color="#E5E5E5"> is for</font>

1230
00:44:58,210 --> 00:45:02,410
<font color="#CCCCCC">example</font><font color="#E5E5E5"> if I</font><font color="#CCCCCC"> use a particular vendor</font>

1231
00:44:59,829 --> 00:45:04,630
which is<font color="#E5E5E5"> located at abc.com slash</font>

1232
00:45:02,410 --> 00:45:07,328
fingerprint<font color="#CCCCCC"> guess right</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is the</font>

1233
00:45:04,630 --> 00:45:09,730
thing the magic<font color="#E5E5E5"> javascript file what I</font>

1234
00:45:07,329 --> 00:45:11,589
can do is I can I can stand<font color="#E5E5E5"> internet for</font>

1235
00:45:09,730 --> 00:45:13,780
the Lexus a<font color="#E5E5E5"> tough 1 million websites</font><font color="#CCCCCC"> I</font>

1236
00:45:11,589 --> 00:45:15,660
can find all other websites<font color="#CCCCCC"> which are</font>

1237
00:45:13,780 --> 00:45:18,970
loading JavaScript from the same domain

1238
00:45:15,660 --> 00:45:20,200
right so now I know<font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

1239
00:45:18,970 --> 00:45:23,290
customers of<font color="#CCCCCC"> that particular vendor</font>

1240
00:45:20,200 --> 00:45:24,879
right the way the attack the attackers

1241
00:45:23,290 --> 00:45:27,009
can use<font color="#E5E5E5"> this is basically like</font><font color="#CCCCCC"> going</font>

1242
00:45:24,880 --> 00:45:28,900
back to<font color="#CCCCCC"> my</font><font color="#E5E5E5"> previous attack they can</font>

1243
00:45:27,010 --> 00:45:31,030
distribute their attack against these

1244
00:45:28,900 --> 00:45:32,799
different vendors these different

1245
00:45:31,030 --> 00:45:35,440
<font color="#CCCCCC">websites like for the first</font><font color="#E5E5E5"> site I pick</font>

1246
00:45:32,799 --> 00:45:37,240
a browser fingerprint with 100 requests

1247
00:45:35,440 --> 00:45:38,650
I got blocked<font color="#E5E5E5"> so instead of going back</font>

1248
00:45:37,240 --> 00:45:41,649
<font color="#CCCCCC">to the same website</font><font color="#E5E5E5"> I can go to another</font>

1249
00:45:38,650 --> 00:45:44,049
<font color="#E5E5E5">customer or the same guys with slightly</font>

1250
00:45:41,650 --> 00:45:46,119
different fingerprint and so forth

1251
00:45:44,049 --> 00:45:48,280
like so you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> visit distributed attack</font>

1252
00:45:46,119 --> 00:45:50,049
another<font color="#E5E5E5"> issue is basically as I said</font>

1253
00:45:48,280 --> 00:45:52,950
people<font color="#E5E5E5"> are using mobile app as the case</font>

1254
00:45:50,049 --> 00:45:56,290
<font color="#E5E5E5">but yeah they have similar issues and</font>

1255
00:45:52,950 --> 00:45:57,879
<font color="#CCCCCC">finally some takeaways like when I</font><font color="#E5E5E5"> said</font>

1256
00:45:56,290 --> 00:45:59,319
looking<font color="#E5E5E5"> at many of these solutions</font>

1257
00:45:57,880 --> 00:46:01,299
<font color="#CCCCCC">I found like there are many</font>

1258
00:45:59,319 --> 00:46:04,630
implementation and architectural issues

1259
00:46:01,299 --> 00:46:06,640
in many of these deployments<font color="#E5E5E5"> again you</font>

1260
00:46:04,630 --> 00:46:08,079
<font color="#E5E5E5">should understand that</font><font color="#CCCCCC"> according to the</font>

1261
00:46:06,640 --> 00:46:09,730
threat model<font color="#CCCCCC"> of the JavaScript runs in</font>

1262
00:46:08,079 --> 00:46:11,170
<font color="#E5E5E5">our</font><font color="#CCCCCC"> attacker control environment</font><font color="#E5E5E5"> so I as</font>

1263
00:46:09,730 --> 00:46:13,690
an attacker can<font color="#E5E5E5"> see exactly what you're</font>

1264
00:46:11,170 --> 00:46:15,790
looking<font color="#CCCCCC"> for and I can force</font><font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> all</font>

1265
00:46:13,690 --> 00:46:17,079
<font color="#E5E5E5">the things which are consuming so for</font>

1266
00:46:15,790 --> 00:46:18,790
example if you're a data scientist who

1267
00:46:17,079 --> 00:46:20,589
is<font color="#CCCCCC"> actually consuming</font><font color="#E5E5E5"> this signal you</font>

1268
00:46:18,790 --> 00:46:23,470
<font color="#E5E5E5">can never trust these signals because I</font>

1269
00:46:20,589 --> 00:46:24,609
can forge<font color="#CCCCCC"> all of the signals another</font>

1270
00:46:23,470 --> 00:46:27,279
thing I should<font color="#E5E5E5"> mention again you should</font>

1271
00:46:24,609 --> 00:46:28,569
understand the limitations<font color="#E5E5E5"> these</font>

1272
00:46:27,280 --> 00:46:30,369
solutions work in many<font color="#CCCCCC"> different</font>

1273
00:46:28,569 --> 00:46:31,869
scenarios<font color="#CCCCCC"> but of course there</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> many</font>

1274
00:46:30,369 --> 00:46:34,180
scenarios<font color="#CCCCCC"> in which they definitely</font><font color="#E5E5E5"> don't</font>

1275
00:46:31,869 --> 00:46:35,680
work<font color="#E5E5E5"> and final thing</font><font color="#CCCCCC"> I should would say</font>

1276
00:46:34,180 --> 00:46:37,450
is they say you<font color="#E5E5E5"> should protect all flows</font>

1277
00:46:35,680 --> 00:46:39,460
<font color="#E5E5E5">if you have a fraud detection solution</font>

1278
00:46:37,450 --> 00:46:41,379
deployed for<font color="#CCCCCC"> a web</font><font color="#E5E5E5"> website you should</font>

1279
00:46:39,460 --> 00:46:42,970
implement it on<font color="#CCCCCC"> your mobile</font><font color="#E5E5E5"> app as well</font>

1280
00:46:41,380 --> 00:46:44,290
<font color="#E5E5E5">because you can</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> bring that that</font>

1281
00:46:42,970 --> 00:46:47,109
<font color="#CCCCCC">you're basically</font><font color="#E5E5E5"> closing one door and</font>

1282
00:46:44,290 --> 00:46:50,430
<font color="#E5E5E5">you're opening the back door right with</font>

1283
00:46:47,109 --> 00:46:50,430
that I'll take any<font color="#E5E5E5"> questions</font>

1284
00:46:50,639 --> 00:47:02,259
yeah and privacy<font color="#E5E5E5"> issues are people</font><font color="#CCCCCC"> using</font>

1285
00:47:00,459 --> 00:47:04,538
the exact<font color="#CCCCCC"> same type of technology to</font>

1286
00:47:02,259 --> 00:47:06,099
track you people are using<font color="#CCCCCC"> almost</font>

1287
00:47:04,539 --> 00:47:08,259
exactly the same<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> technology</font><font color="#E5E5E5"> like</font>

1288
00:47:06,099 --> 00:47:10,509
<font color="#E5E5E5">actually most of the work on in browser</font>

1289
00:47:08,259 --> 00:47:11,829
fingerprinting<font color="#CCCCCC"> printing is actually as I</font>

1290
00:47:10,509 --> 00:47:15,759
mentioned they write from<font color="#E5E5E5"> a lot of work</font>

1291
00:47:11,829 --> 00:47:18,099
done for in privacy<font color="#CCCCCC"> and</font><font color="#E5E5E5"> preventing user</font>

1292
00:47:15,759 --> 00:47:19,149
tracking<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> even there is there</font><font color="#CCCCCC"> is</font>

1293
00:47:18,099 --> 00:47:21,159
a browser called brave

1294
00:47:19,149 --> 00:47:23,019
I think people<font color="#E5E5E5"> there was a talk last</font>

1295
00:47:21,159 --> 00:47:24,009
year<font color="#E5E5E5"> that it</font><font color="#CCCCCC"> was at sac where they</font>

1296
00:47:23,019 --> 00:47:26,468
talked<font color="#E5E5E5"> about the browser which</font><font color="#CCCCCC"> is</font>

1297
00:47:24,009 --> 00:47:28,359
basically<font color="#E5E5E5"> designed to plot some of these</font>

1298
00:47:26,469 --> 00:47:30,159
fingerprinting files<font color="#E5E5E5"> like for example</font>

1299
00:47:28,359 --> 00:47:32,348
tor by default<font color="#E5E5E5"> blocks</font><font color="#CCCCCC"> canvas</font>

1300
00:47:30,159 --> 00:47:34,719
fingerprinting<font color="#E5E5E5"> and I think the new</font>

1301
00:47:32,349 --> 00:47:36,399
version of Firefox<font color="#E5E5E5"> also has some sort of</font>

1302
00:47:34,719 --> 00:47:38,349
anti fingerprinting techniques<font color="#CCCCCC"> built-in</font>

1303
00:47:36,399 --> 00:47:52,058
yeah so they are actually<font color="#CCCCCC"> using</font><font color="#E5E5E5"> very</font>

1304
00:47:38,349 --> 00:47:53,769
<font color="#E5E5E5">similar kind of</font><font color="#CCCCCC"> techniques one of the</font>

1305
00:47:52,059 --> 00:47:55,299
biggest challenges as you mentioned is

1306
00:47:53,769 --> 00:47:57,729
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we've rolled back kind of this</font>

1307
00:47:55,299 --> 00:48:00,038
client-server architecture<font color="#CCCCCC"> from that</font>

1308
00:47:57,729 --> 00:48:03,669
perspective have you seen any novel

1309
00:48:00,039 --> 00:48:07,689
techniques to protect<font color="#E5E5E5"> the methods of say</font>

1310
00:48:03,669 --> 00:48:09,939
<font color="#E5E5E5">generating client-side tokens etc as</font>

1311
00:48:07,689 --> 00:48:13,178
you've<font color="#CCCCCC"> been</font><font color="#E5E5E5"> doing your</font><font color="#CCCCCC"> research</font><font color="#E5E5E5"> sure I</font>

1312
00:48:09,939 --> 00:48:14,859
mean<font color="#E5E5E5"> I've seen in some implementations</font>

1313
00:48:13,179 --> 00:48:16,809
people put a lot<font color="#CCCCCC"> of effort in protecting</font>

1314
00:48:14,859 --> 00:48:18,399
the<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> because they</font><font color="#E5E5E5"> realize how</font>

1315
00:48:16,809 --> 00:48:20,949
important this particular piece<font color="#CCCCCC"> of code</font>

1316
00:48:18,399 --> 00:48:22,538
is so what<font color="#E5E5E5"> I've seen is in some</font>

1317
00:48:20,949 --> 00:48:25,630
<font color="#E5E5E5">scenarios they were using multiple of</font>

1318
00:48:22,539 --> 00:48:27,279
layers of<font color="#E5E5E5"> obfuscation</font><font color="#CCCCCC"> right so they were</font>

1319
00:48:25,630 --> 00:48:30,309
to use some obfuscation techniques<font color="#E5E5E5"> and</font>

1320
00:48:27,279 --> 00:48:31,269
then again<font color="#E5E5E5"> the issue is again everything</font>

1321
00:48:30,309 --> 00:48:32,919
is<font color="#E5E5E5"> sent back to the</font><font color="#CCCCCC"> client</font>

1322
00:48:31,269 --> 00:48:34,928
right<font color="#E5E5E5"> so given enough time you can</font>

1323
00:48:32,919 --> 00:48:38,499
<font color="#CCCCCC">actually break them so I don't know</font>

1324
00:48:34,929 --> 00:48:40,029
<font color="#E5E5E5">exactly what's a good way again there</font>

1325
00:48:38,499 --> 00:48:42,158
was a paper<font color="#CCCCCC"> which came</font><font color="#E5E5E5"> out of Academy a</font>

1326
00:48:40,029 --> 00:48:44,589
few months ago<font color="#E5E5E5"> was called</font><font color="#CCCCCC"> trust jeaious</font>

1327
00:48:42,159 --> 00:48:46,209
and<font color="#E5E5E5"> the way they proposed a</font><font color="#CCCCCC"> solution to</font>

1328
00:48:44,589 --> 00:48:48,880
this kind<font color="#CCCCCC"> of architecture is</font><font color="#E5E5E5"> to run</font>

1329
00:48:46,209 --> 00:48:51,939
<font color="#CCCCCC">javascript</font><font color="#E5E5E5"> in in a browser running in</font>

1330
00:48:48,880 --> 00:48:53,409
<font color="#E5E5E5">edge Intel SGX</font><font color="#CCCCCC"> right so you can protect</font>

1331
00:48:51,939 --> 00:48:54,638
<font color="#E5E5E5">against</font><font color="#CCCCCC"> any sort of tampering but I</font>

1332
00:48:53,409 --> 00:48:57,449
don't know how practical<font color="#E5E5E5"> that kind of</font>

1333
00:48:54,639 --> 00:48:57,449
<font color="#E5E5E5">solution is</font>

1334
00:48:59,890 --> 00:49:05,190
yeah hi there um<font color="#E5E5E5"> just curious</font><font color="#CCCCCC"> about</font>

1335
00:49:02,410 --> 00:49:07,839
where you see<font color="#E5E5E5"> your research going next</font>

1336
00:49:05,190 --> 00:49:09,099
<font color="#E5E5E5">this is it seems kind of like</font>

1337
00:49:07,839 --> 00:49:10,509
foundational you don't have a

1338
00:49:09,099 --> 00:49:10,839
foundational work<font color="#E5E5E5"> of what's your next</font>

1339
00:49:10,509 --> 00:49:14,049
step

1340
00:49:10,839 --> 00:49:17,380
um I think<font color="#E5E5E5"> a lot of the next step would</font>

1341
00:49:14,049 --> 00:49:20,259
be<font color="#CCCCCC"> so there's a lot of</font><font color="#E5E5E5"> work on</font>

1342
00:49:17,380 --> 00:49:21,670
adversarial machine learning like<font color="#E5E5E5"> there</font>

1343
00:49:20,259 --> 00:49:23,589
was some<font color="#E5E5E5"> work published where people</font>

1344
00:49:21,670 --> 00:49:25,960
even talked about stealing machine

1345
00:49:23,589 --> 00:49:27,819
learning models<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> was an</font>

1346
00:49:25,960 --> 00:49:30,910
attack proposed where<font color="#E5E5E5"> what you could do</font>

1347
00:49:27,819 --> 00:49:32,799
is<font color="#CCCCCC"> if some like there was a machine</font>

1348
00:49:30,910 --> 00:49:34,749
learning model implemented<font color="#CCCCCC"> using API and</font>

1349
00:49:32,799 --> 00:49:36,460
what you could<font color="#E5E5E5"> do is you can query a</font>

1350
00:49:34,749 --> 00:49:37,808
particular image and<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can you will</font>

1351
00:49:36,460 --> 00:49:39,430
<font color="#E5E5E5">get a result back that for</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> but this</font>

1352
00:49:37,809 --> 00:49:41,289
<font color="#CCCCCC">image is a horse</font><font color="#E5E5E5"> with this amount of</font>

1353
00:49:39,430 --> 00:49:43,299
<font color="#CCCCCC">confidence I</font><font color="#E5E5E5"> think you can launch</font>

1354
00:49:41,289 --> 00:49:46,720
<font color="#E5E5E5">similar kind of attacks in this scenario</font>

1355
00:49:43,299 --> 00:49:48,489
<font color="#CCCCCC">as well where because you know like with</font>

1356
00:49:46,720 --> 00:49:50,109
this kind of<font color="#E5E5E5"> browser fingerprint with</font>

1357
00:49:48,489 --> 00:49:51,640
these number of requests that's when I

1358
00:49:50,109 --> 00:49:53,890
get<font color="#E5E5E5"> blocked and I get a response back</font>

1359
00:49:51,640 --> 00:49:56,109
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the server</font><font color="#CCCCCC"> I think given enough</font>

1360
00:49:53,890 --> 00:49:58,660
time<font color="#E5E5E5"> and effort</font><font color="#CCCCCC"> you can actually figure</font>

1361
00:49:56,109 --> 00:50:00,009
<font color="#CCCCCC">out exactly</font><font color="#E5E5E5"> like what is the machine</font>

1362
00:49:58,660 --> 00:50:01,930
<font color="#E5E5E5">learning model like what happens behind</font>

1363
00:50:00,009 --> 00:50:04,809
<font color="#E5E5E5">the scene because that is the main piece</font>

1364
00:50:01,930 --> 00:50:07,210
<font color="#CCCCCC">of technology in these these solutions</font>

1365
00:50:04,809 --> 00:50:08,619
<font color="#CCCCCC">so I think that's one one line of</font>

1366
00:50:07,210 --> 00:50:12,630
<font color="#CCCCCC">research</font><font color="#E5E5E5"> other line of research is</font>

1367
00:50:08,619 --> 00:50:12,630
<font color="#CCCCCC">basically looking at</font><font color="#E5E5E5"> mobile app SDKs I</font>

1368
00:50:12,720 --> 00:50:22,089
think<font color="#E5E5E5"> we'll wrap up and I can take</font>

1369
00:50:16,390 --> 00:50:25,440
<font color="#E5E5E5">questions offline I'm not an expert but</font>

1370
00:50:22,089 --> 00:50:28,859
how<font color="#CCCCCC"> does Google Authenticator and</font>

1371
00:50:25,440 --> 00:50:31,269
capture like<font color="#E5E5E5"> solutions play in because</font>

1372
00:50:28,859 --> 00:50:34,839
everyone knows<font color="#CCCCCC"> JavaScript is insecure</font>

1373
00:50:31,269 --> 00:50:37,328
<font color="#CCCCCC">but there are other things yeah so</font>

1374
00:50:34,839 --> 00:50:42,009
that's a very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> question so one of</font>

1375
00:50:37,329 --> 00:50:43,239
<font color="#E5E5E5">the one</font><font color="#CCCCCC"> other like Google reCAPTCHA for</font>

1376
00:50:42,009 --> 00:50:45,069
example also<font color="#E5E5E5"> falls in this kind of</font>

1377
00:50:43,239 --> 00:50:46,900
scenario<font color="#E5E5E5"> but the difference between</font>

1378
00:50:45,069 --> 00:50:49,029
capture system and some sort of fraud

1379
00:50:46,900 --> 00:50:52,440
detection system is in many of these

1380
00:50:49,029 --> 00:50:55,180
capture system you<font color="#CCCCCC"> require some sort</font><font color="#E5E5E5"> of</font>

1381
00:50:52,440 --> 00:50:57,430
basically the<font color="#CCCCCC"> user has to for example</font>

1382
00:50:55,180 --> 00:50:59,589
solve<font color="#E5E5E5"> the capture it</font><font color="#CCCCCC"> in body</font><font color="#E5E5E5"> text in</font>

1383
00:50:57,430 --> 00:51:01,328
solutions<font color="#E5E5E5"> the idea is or the attacks</font>

1384
00:50:59,589 --> 00:51:03,609
were basically<font color="#E5E5E5"> to prevent the capture</font>

1385
00:51:01,329 --> 00:51:05,200
from being ever shown right because if

1386
00:51:03,609 --> 00:51:07,390
you can<font color="#CCCCCC"> basically bypass</font><font color="#E5E5E5"> the solution</font>

1387
00:51:05,200 --> 00:51:08,739
and then the capture is never shown then

1388
00:51:07,390 --> 00:51:10,839
you<font color="#E5E5E5"> basically don't have to solve the</font>

1389
00:51:08,739 --> 00:51:12,460
CAPTCHA<font color="#E5E5E5"> so this is the kind</font><font color="#CCCCCC"> of the line</font>

1390
00:51:10,839 --> 00:51:13,420
of<font color="#CCCCCC"> research I was following but yeah of</font>

1391
00:51:12,460 --> 00:51:14,890
course<font color="#E5E5E5"> as I may</font>

1392
00:51:13,420 --> 00:51:16,660
like these<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> attacks of course</font>

1393
00:51:14,890 --> 00:51:18,460
they don't work in<font color="#CCCCCC"> all scenarios</font><font color="#E5E5E5"> but in</font>

1394
00:51:16,660 --> 00:51:22,509
across<font color="#E5E5E5"> many scenario that they do work</font>

1395
00:51:18,460 --> 00:51:24,490
<font color="#E5E5E5">yeah actually</font><font color="#CCCCCC"> we do not have time for</font>

1396
00:51:22,510 --> 00:51:27,329
any<font color="#E5E5E5"> more</font><font color="#CCCCCC"> questions can you</font><font color="#E5E5E5"> just catch</font>

1397
00:51:24,490 --> 00:51:27,328
<font color="#E5E5E5">him</font><font color="#CCCCCC"> up yeah</font>

1398
00:51:33,500 --> 00:51:42,579
[Music]

