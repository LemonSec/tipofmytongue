1
00:00:04,300 --> 00:00:15,829
[Music]

2
00:00:17,210 --> 00:00:22,290
good morning everyone<font color="#E5E5E5"> welcome to</font><font color="#CCCCCC"> my talk</font>

3
00:00:20,130 --> 00:00:24,869
<font color="#E5E5E5">my</font><font color="#CCCCCC"> name is Swapna and</font><font color="#E5E5E5"> I'm here to</font>

4
00:00:22,290 --> 00:00:26,460
present<font color="#E5E5E5"> about packing your</font><font color="#CCCCCC"> Android</font><font color="#E5E5E5"> this</font>

5
00:00:24,870 --> 00:00:28,800
particular presentation<font color="#E5E5E5"> itself is going</font>

6
00:00:26,460 --> 00:00:31,680
<font color="#E5E5E5">to focus around how</font><font color="#CCCCCC"> can we</font><font color="#E5E5E5"> extract</font>

7
00:00:28,800 --> 00:00:33,960
malware genomes<font color="#E5E5E5"> from hardened</font>

8
00:00:31,680 --> 00:00:36,300
applications within Android<font color="#E5E5E5"> itself we</font>

9
00:00:33,960 --> 00:00:38,880
saw three main categories of<font color="#E5E5E5"> hardening</font>

10
00:00:36,300 --> 00:00:41,400
one is<font color="#E5E5E5"> office keishon another one is</font>

11
00:00:38,880 --> 00:00:44,670
packing and third one<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> combination</font>

12
00:00:41,400 --> 00:00:46,530
of<font color="#E5E5E5"> both called protector so the</font>

13
00:00:44,670 --> 00:00:49,079
techniques<font color="#CCCCCC"> that we have would statically</font>

14
00:00:46,530 --> 00:00:52,470
extract<font color="#E5E5E5"> malicious genome so</font><font color="#CCCCCC"> that we can</font>

15
00:00:49,079 --> 00:00:55,020
do a research around it<font color="#E5E5E5"> and</font><font color="#CCCCCC"> identify its</font>

16
00:00:52,470 --> 00:00:56,339
a if it's one durable or not but Before

17
00:00:55,020 --> 00:00:59,040
we jump into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> presentation itself</font>

18
00:00:56,340 --> 00:01:00,690
there<font color="#CCCCCC"> is a quick disclaimer</font><font color="#E5E5E5"> so the views</font>

19
00:00:59,040 --> 00:01:02,070
and<font color="#E5E5E5"> opinions</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I have expressed in</font>

20
00:01:00,690 --> 00:01:05,479
<font color="#E5E5E5">this particular presentation itself is</font>

21
00:01:02,070 --> 00:01:07,470
purely<font color="#E5E5E5"> mine</font><font color="#CCCCCC"> and I would be</font><font color="#E5E5E5"> really</font>

22
00:01:05,479 --> 00:01:09,330
appreciative we don't associate<font color="#E5E5E5"> that</font>

23
00:01:07,470 --> 00:01:12,330
<font color="#CCCCCC">with any</font><font color="#E5E5E5"> of the companies or individuals</font>

24
00:01:09,330 --> 00:01:14,940
<font color="#CCCCCC">that I'm</font><font color="#E5E5E5"> associated with so now</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

25
00:01:12,330 --> 00:01:17,580
have<font color="#CCCCCC"> that out of the door a quick</font><font color="#E5E5E5"> Who am</font>

26
00:01:14,940 --> 00:01:19,470
<font color="#E5E5E5">I so as I stated before my name is</font>

27
00:01:17,580 --> 00:01:23,970
Swapna Deshmukh<font color="#CCCCCC"> I have co-authored</font>

28
00:01:19,470 --> 00:01:25,140
<font color="#E5E5E5">hacking exposed series of we within the</font>

29
00:01:23,970 --> 00:01:28,250
book itself we basically<font color="#E5E5E5"> talk about</font>

30
00:01:25,140 --> 00:01:31,080
<font color="#E5E5E5">various avenues</font><font color="#CCCCCC"> of how we can exploit</font>

31
00:01:28,250 --> 00:01:32,850
<font color="#CCCCCC">let's say mobile</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> or web</font>

32
00:01:31,080 --> 00:01:34,979
application itself<font color="#E5E5E5"> what are the other</font>

33
00:01:32,850 --> 00:01:37,110
what are<font color="#E5E5E5"> the various attacks that we</font>

34
00:01:34,979 --> 00:01:39,600
have and how<font color="#E5E5E5"> can we defend against those</font>

35
00:01:37,110 --> 00:01:41,729
attacks as<font color="#CCCCCC"> well along along with</font><font color="#E5E5E5"> that</font>

36
00:01:39,600 --> 00:01:44,130
I'm<font color="#CCCCCC"> currently leading the security team</font>

37
00:01:41,729 --> 00:01:48,390
for emerging<font color="#CCCCCC"> technologies for a company</font>

38
00:01:44,130 --> 00:01:50,699
called<font color="#E5E5E5"> visa as</font><font color="#CCCCCC"> the moonlight projects</font>

39
00:01:48,390 --> 00:01:52,890
I'm also working on a<font color="#CCCCCC"> poppyseed project</font>

40
00:01:50,700 --> 00:01:54,840
this is an open<font color="#E5E5E5"> source that we have that</font>

41
00:01:52,890 --> 00:01:56,520
<font color="#E5E5E5">basically talks it's an abstraction</font>

42
00:01:54,840 --> 00:01:58,500
layer<font color="#E5E5E5"> of all the different malicious</font>

43
00:01:56,520 --> 00:02:01,470
applications that are<font color="#CCCCCC"> out there</font><font color="#E5E5E5"> so we</font>

44
00:01:58,500 --> 00:02:04,110
found millions<font color="#E5E5E5"> of samples for it for</font>

45
00:02:01,470 --> 00:02:06,030
various<font color="#E5E5E5"> verticals itself and we want to</font>

46
00:02:04,110 --> 00:02:08,070
<font color="#E5E5E5">create a framework that</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> identify</font>

47
00:02:06,030 --> 00:02:10,619
<font color="#E5E5E5">all the different malicious applications</font>

48
00:02:08,070 --> 00:02:12,570
that are<font color="#E5E5E5"> already out</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> for various</font>

49
00:02:10,619 --> 00:02:17,970
verticals it could be right from<font color="#E5E5E5"> Android</font>

50
00:02:12,570 --> 00:02:19,230
<font color="#CCCCCC">to iOS</font><font color="#E5E5E5"> to Windows so so we started with</font>

51
00:02:17,970 --> 00:02:21,959
Android<font color="#E5E5E5"> at this given</font><font color="#CCCCCC"> point itself</font>

52
00:02:19,230 --> 00:02:24,869
because of<font color="#CCCCCC"> the cost of deployment itself</font>

53
00:02:21,959 --> 00:02:26,220
and the ease of use of<font color="#E5E5E5"> it</font><font color="#CCCCCC"> and we have a</font>

54
00:02:24,870 --> 00:02:29,099
running<font color="#CCCCCC"> instance at this</font><font color="#E5E5E5"> given point</font>

55
00:02:26,220 --> 00:02:30,300
<font color="#E5E5E5">itself on malware repo which is right at</font>

56
00:02:29,099 --> 00:02:34,988
the end

57
00:02:30,300 --> 00:02:36,880
so now that<font color="#E5E5E5"> why exactly are we here why</font>

58
00:02:34,989 --> 00:02:39,310
<font color="#CCCCCC">does it matter</font><font color="#E5E5E5"> at this given point it's</font>

59
00:02:36,880 --> 00:02:42,370
off and the<font color="#CCCCCC"> sheer reason why we started</font>

60
00:02:39,310 --> 00:02:43,720
<font color="#CCCCCC">with this engagement</font><font color="#E5E5E5"> was because we all</font>

61
00:02:42,370 --> 00:02:46,000
<font color="#CCCCCC">are very</font><font color="#E5E5E5"> easy targets</font>

62
00:02:43,720 --> 00:02:48,910
a lot of malicious applications are

63
00:02:46,000 --> 00:02:50,350
already<font color="#CCCCCC"> out there in our trusted play</font>

64
00:02:48,910 --> 00:02:50,770
<font color="#CCCCCC">store</font><font color="#E5E5E5"> itself it could be Google Play</font>

65
00:02:50,350 --> 00:02:52,299
stores

66
00:02:50,770 --> 00:02:55,660
it could be Chinese<font color="#CCCCCC"> play stores as well</font>

67
00:02:52,300 --> 00:02:57,010
<font color="#E5E5E5">they</font><font color="#CCCCCC"> already are installed</font><font color="#E5E5E5"> in there</font><font color="#CCCCCC"> in</font>

68
00:02:55,660 --> 00:02:59,980
fact there was<font color="#E5E5E5"> a report</font><font color="#CCCCCC"> that came out</font>

69
00:02:57,010 --> 00:03:02,459
from<font color="#CCCCCC"> suppose</font><font color="#E5E5E5"> that stated out one in</font>

70
00:02:59,980 --> 00:03:05,920
<font color="#E5E5E5">three application that was installed in</font>

71
00:03:02,459 --> 00:03:09,040
2017<font color="#E5E5E5"> from an</font><font color="#CCCCCC"> Android</font><font color="#E5E5E5"> app store itself</font>

72
00:03:05,920 --> 00:03:11,859
<font color="#E5E5E5">was malicious in some degree it will</font>

73
00:03:09,040 --> 00:03:14,920
<font color="#E5E5E5">collect our user data itself or it could</font>

74
00:03:11,860 --> 00:03:18,370
<font color="#E5E5E5">be a ransomware so imagine one in three</font>

75
00:03:14,920 --> 00:03:20,649
application<font color="#E5E5E5"> that be installed in 2017</font>

76
00:03:18,370 --> 00:03:21,910
itself can be malicious that's a huge

77
00:03:20,650 --> 00:03:25,120
number

78
00:03:21,910 --> 00:03:27,670
in fact<font color="#E5E5E5"> they</font><font color="#CCCCCC"> continue reporting</font><font color="#E5E5E5"> that</font>

79
00:03:25,120 --> 00:03:30,069
there is<font color="#CCCCCC"> billion-dollar industry when it</font>

80
00:03:27,670 --> 00:03:33,339
<font color="#E5E5E5">comes to ransomware</font><font color="#CCCCCC"> there is one that</font><font color="#E5E5E5"> we</font>

81
00:03:30,069 --> 00:03:35,078
<font color="#E5E5E5">would be looking</font><font color="#CCCCCC"> at there was 33 million</font>

82
00:03:33,340 --> 00:03:38,290
<font color="#E5E5E5">dollars that they collected as a as a</font>

83
00:03:35,079 --> 00:03:40,150
<font color="#E5E5E5">result of that ransomware itself so very</font>

84
00:03:38,290 --> 00:03:43,989
very<font color="#E5E5E5"> easy</font><font color="#CCCCCC"> target</font><font color="#E5E5E5"> and they're earning</font>

85
00:03:40,150 --> 00:03:46,390
millions and millions<font color="#E5E5E5"> of it so the</font>

86
00:03:43,989 --> 00:03:49,060
biggest challenges why is it so

87
00:03:46,390 --> 00:03:52,208
difficult<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us to evaluate and</font>

88
00:03:49,060 --> 00:03:54,519
<font color="#E5E5E5">hardened Android application and and</font>

89
00:03:52,209 --> 00:03:56,260
there<font color="#E5E5E5"> are four different reasons or five</font>

90
00:03:54,519 --> 00:03:57,640
<font color="#E5E5E5">different reasons that I can come up</font>

91
00:03:56,260 --> 00:03:59,320
<font color="#CCCCCC">with I am very sure</font><font color="#E5E5E5"> there would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> more</font>

92
00:03:57,640 --> 00:04:01,570
<font color="#E5E5E5">than that because</font><font color="#CCCCCC"> of which is</font><font color="#E5E5E5"> very</font>

93
00:03:59,320 --> 00:04:04,000
difficult<font color="#CCCCCC"> for</font><font color="#E5E5E5"> third-party app stores to</font>

94
00:04:01,570 --> 00:04:06,340
identify it<font color="#E5E5E5"> the first in the list is</font>

95
00:04:04,000 --> 00:04:09,030
<font color="#E5E5E5">office keishon so office keishon makes</font>

96
00:04:06,340 --> 00:04:11,410
an application<font color="#E5E5E5"> very difficult to read</font>

97
00:04:09,030 --> 00:04:13,329
<font color="#E5E5E5">what it does it it</font><font color="#CCCCCC"> manuals the class</font>

98
00:04:11,410 --> 00:04:14,980
names at mangled stuff the function

99
00:04:13,329 --> 00:04:17,079
calls itself<font color="#E5E5E5"> it will add</font><font color="#CCCCCC"> java</font>

100
00:04:14,980 --> 00:04:19,209
reflections that will do<font color="#CCCCCC"> api hiding</font>

101
00:04:17,079 --> 00:04:22,690
itself<font color="#E5E5E5"> which makes it very difficult for</font>

102
00:04:19,209 --> 00:04:24,340
<font color="#CCCCCC">someone to read through the code anti</font>

103
00:04:22,690 --> 00:04:25,810
emulator is another one<font color="#E5E5E5"> that makes sure</font>

104
00:04:24,340 --> 00:04:28,119
<font color="#CCCCCC">that it's not running</font><font color="#E5E5E5"> in an sandbox</font>

105
00:04:25,810 --> 00:04:29,710
environment at any given point so if

106
00:04:28,120 --> 00:04:31,780
they will do something<font color="#CCCCCC"> called sprach</font>

107
00:04:29,710 --> 00:04:33,520
info just<font color="#E5E5E5"> to identify if it's running in</font>

108
00:04:31,780 --> 00:04:35,320
a<font color="#CCCCCC"> qmo environment</font><font color="#E5E5E5"> itself or a sandbox</font>

109
00:04:33,520 --> 00:04:37,240
<font color="#E5E5E5">environment</font><font color="#CCCCCC"> and if it's running</font><font color="#E5E5E5"> in an</font>

110
00:04:35,320 --> 00:04:40,419
sandbox environment<font color="#E5E5E5"> itself they will</font>

111
00:04:37,240 --> 00:04:42,909
deflate the malware genome a good

112
00:04:40,419 --> 00:04:43,930
example<font color="#E5E5E5"> of that is</font><font color="#CCCCCC"> Google bouncer which</font>

113
00:04:42,909 --> 00:04:46,030
is used to<font color="#CCCCCC"> identify</font>

114
00:04:43,930 --> 00:04:48,910
malicious content and<font color="#E5E5E5"> Google Play Store</font>

115
00:04:46,030 --> 00:04:51,008
itself<font color="#E5E5E5"> heavily uses an</font><font color="#CCCCCC"> T so it uses</font>

116
00:04:48,910 --> 00:04:53,560
<font color="#E5E5E5">emulator itself to identify a lot of</font>

117
00:04:51,009 --> 00:04:55,509
applications and they have two criterias

118
00:04:53,560 --> 00:04:57,880
they run in a<font color="#E5E5E5"> sandbox environment and</font>

119
00:04:55,509 --> 00:04:58,360
they only test<font color="#E5E5E5"> that application for five</font>

120
00:04:57,880 --> 00:05:01,240
minutes

121
00:04:58,360 --> 00:05:02,710
so as an malicious author itself what

122
00:05:01,240 --> 00:05:04,360
would be the workaround that<font color="#E5E5E5"> we can come</font>

123
00:05:02,710 --> 00:05:07,570
<font color="#CCCCCC">up with</font><font color="#E5E5E5"> it's very simple right have a</font>

124
00:05:04,360 --> 00:05:09,009
delay<font color="#CCCCCC"> of five minutes</font><font color="#E5E5E5"> or if it's running</font>

125
00:05:07,570 --> 00:05:12,630
<font color="#E5E5E5">an anomaly</font><font color="#CCCCCC"> in a</font><font color="#E5E5E5"> sandbox environment</font>

126
00:05:09,009 --> 00:05:16,150
itself<font color="#E5E5E5"> do not inflate your malicious</font>

127
00:05:12,630 --> 00:05:20,139
content and you pass through your Google

128
00:05:16,150 --> 00:05:22,000
<font color="#CCCCCC">Play Store so it's as easy as that</font>

129
00:05:20,139 --> 00:05:23,050
along<font color="#CCCCCC"> with that there is</font><font color="#E5E5E5"> route detection</font>

130
00:05:22,000 --> 00:05:24,280
checks that make sure that you're not

131
00:05:23,050 --> 00:05:27,370
<font color="#E5E5E5">running in a compromised operating</font>

132
00:05:24,280 --> 00:05:29,440
system so<font color="#E5E5E5"> Google coined the term called</font>

133
00:05:27,370 --> 00:05:32,020
route<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> sure that if it's elevated</font>

134
00:05:29,440 --> 00:05:34,090
<font color="#CCCCCC">privileges that</font><font color="#E5E5E5"> you have then it will</font>

135
00:05:32,020 --> 00:05:36,070
<font color="#E5E5E5">again look for those look for certain</font>

136
00:05:34,090 --> 00:05:38,138
<font color="#CCCCCC">conditions itself if it satisfies that</font>

137
00:05:36,070 --> 00:05:40,719
<font color="#E5E5E5">then it will make sure</font><font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> not</font>

138
00:05:38,139 --> 00:05:43,270
able<font color="#CCCCCC"> to execute</font><font color="#E5E5E5"> the malicious part</font>

139
00:05:40,720 --> 00:05:45,789
malicious content itself or you<font color="#CCCCCC"> also</font>

140
00:05:43,270 --> 00:05:49,000
have anti debugging as well<font color="#E5E5E5"> so as a</font>

141
00:05:45,789 --> 00:05:51,159
security researcher<font color="#CCCCCC"> a few prerequisites</font>

142
00:05:49,000 --> 00:05:53,260
<font color="#CCCCCC">that you have to</font><font color="#E5E5E5"> even analyze any code</font>

143
00:05:51,159 --> 00:05:54,969
<font color="#E5E5E5">dynamically is that you have to first</font>

144
00:05:53,260 --> 00:05:56,500
<font color="#CCCCCC">route the device</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> thing</font>

145
00:05:54,970 --> 00:05:58,030
that<font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> have and the second</font>

146
00:05:56,500 --> 00:06:00,400
thing is you<font color="#CCCCCC"> need to</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> sort of</font>

147
00:05:58,030 --> 00:06:02,260
<font color="#E5E5E5">debugging controls in place</font><font color="#CCCCCC"> to hook into</font>

148
00:06:00,400 --> 00:06:06,099
<font color="#E5E5E5">a</font><font color="#CCCCCC"> gdp for example or do some method</font>

149
00:06:02,260 --> 00:06:07,840
<font color="#CCCCCC">sizzling</font><font color="#E5E5E5"> to just do a dump a log dump of</font>

150
00:06:06,099 --> 00:06:09,159
what exactly<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the application trying</font>

151
00:06:07,840 --> 00:06:10,330
to do at<font color="#E5E5E5"> any given point what are the</font>

152
00:06:09,159 --> 00:06:13,060
calls that<font color="#E5E5E5"> they're making what are the</font>

153
00:06:10,330 --> 00:06:14,139
function functions that have been called

154
00:06:13,060 --> 00:06:15,880
out<font color="#CCCCCC"> of it as well right so</font><font color="#E5E5E5"> you start</font>

155
00:06:14,139 --> 00:06:18,460
<font color="#E5E5E5">logging</font><font color="#CCCCCC"> that just to analyze</font><font color="#E5E5E5"> as well</font>

156
00:06:15,880 --> 00:06:20,409
right<font color="#CCCCCC"> so by having route detection</font>

157
00:06:18,460 --> 00:06:22,210
checks<font color="#E5E5E5"> and anti debugging checks as a</font>

158
00:06:20,409 --> 00:06:26,139
<font color="#E5E5E5">security researcher they are not able to</font>

159
00:06:22,210 --> 00:06:29,229
to analyze<font color="#E5E5E5"> this application further in</font>

160
00:06:26,139 --> 00:06:31,090
2017 itself<font color="#CCCCCC"> we saw a huge</font><font color="#E5E5E5"> trends of</font>

161
00:06:29,229 --> 00:06:33,099
there is anti tampering solutions which

162
00:06:31,090 --> 00:06:35,440
make sure<font color="#E5E5E5"> that Derek each code blocks</font>

163
00:06:33,099 --> 00:06:37,210
would have their check sums and if you

164
00:06:35,440 --> 00:06:39,190
modify<font color="#E5E5E5"> any of those check sums at any</font>

165
00:06:37,210 --> 00:06:40,840
given point<font color="#E5E5E5"> itself or so any code blocks</font>

166
00:06:39,190 --> 00:06:42,610
at any given point<font color="#E5E5E5"> itself your check sum</font>

167
00:06:40,840 --> 00:06:44,138
would<font color="#E5E5E5"> be different which means that the</font>

168
00:06:42,610 --> 00:06:45,550
application<font color="#CCCCCC"> is tampered with right so as</font>

169
00:06:44,139 --> 00:06:47,949
soon<font color="#E5E5E5"> as it detects</font><font color="#CCCCCC"> that the application</font>

170
00:06:45,550 --> 00:06:49,389
is tampered with<font color="#E5E5E5"> now they will make sure</font>

171
00:06:47,949 --> 00:06:52,210
<font color="#E5E5E5">that the malicious part of the</font>

172
00:06:49,389 --> 00:06:55,690
application<font color="#CCCCCC"> is not</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> there is also</font>

173
00:06:52,210 --> 00:06:57,710
<font color="#CCCCCC">a new trend</font><font color="#E5E5E5"> in later half of</font><font color="#CCCCCC"> 27 that</font><font color="#E5E5E5"> we</font>

174
00:06:55,690 --> 00:07:00,530
observed called<font color="#E5E5E5"> white</font><font color="#CCCCCC"> Boz cryptography</font>

175
00:06:57,710 --> 00:07:03,890
it<font color="#E5E5E5"> what it does is encrypts a part of</font>

176
00:07:00,530 --> 00:07:06,590
the<font color="#E5E5E5"> Android code itself and the key that</font>

177
00:07:03,890 --> 00:07:09,200
<font color="#E5E5E5">has</font><font color="#CCCCCC"> are encrypted this</font><font color="#E5E5E5"> data would be</font>

178
00:07:06,590 --> 00:07:10,849
completely office<font color="#E5E5E5"> gated and that office</font>

179
00:07:09,200 --> 00:07:13,460
<font color="#CCCCCC">kitchen piece</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be spread across the</font>

180
00:07:10,850 --> 00:07:14,840
heap itself so if you want<font color="#E5E5E5"> to decrypt</font>

181
00:07:13,460 --> 00:07:16,489
the<font color="#CCCCCC"> data or if you want to statically</font>

182
00:07:14,840 --> 00:07:19,400
<font color="#E5E5E5">analyze the code itself you first need</font>

183
00:07:16,490 --> 00:07:22,790
<font color="#E5E5E5">to</font><font color="#CCCCCC"> identify what</font><font color="#E5E5E5"> the key is and then you</font>

184
00:07:19,400 --> 00:07:24,229
<font color="#E5E5E5">can do a dump of that part</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

185
00:07:22,790 --> 00:07:25,970
malicious file whatever<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been</font>

186
00:07:24,230 --> 00:07:28,010
encrypted so it makes<font color="#CCCCCC"> it a little</font>

187
00:07:25,970 --> 00:07:30,110
difficult<font color="#CCCCCC"> for us to like even</font><font color="#E5E5E5"> analyze it</font>

188
00:07:28,010 --> 00:07:32,050
further along<font color="#E5E5E5"> with that white box</font>

189
00:07:30,110 --> 00:07:34,580
cryptography<font color="#CCCCCC"> has also been used for</font>

190
00:07:32,050 --> 00:07:36,380
<font color="#CCCCCC">ransomware as well</font><font color="#E5E5E5"> so they will encrypt</font>

191
00:07:34,580 --> 00:07:39,099
your entire<font color="#E5E5E5"> SD card and they'll say you</font>

192
00:07:36,380 --> 00:07:42,670
have to pay 0.5 bitcoins in order to

193
00:07:39,100 --> 00:07:44,810
decrypt this data<font color="#E5E5E5"> and if you try to</font>

194
00:07:42,670 --> 00:07:47,000
decompile an application to identify

195
00:07:44,810 --> 00:07:48,320
where the keys are<font color="#E5E5E5"> it would be spread</font>

196
00:07:47,000 --> 00:07:49,550
<font color="#CCCCCC">across the</font><font color="#E5E5E5"> memory itself making it</font>

197
00:07:48,320 --> 00:07:51,830
<font color="#E5E5E5">difficult for someone to like gather</font>

198
00:07:49,550 --> 00:07:55,490
that right so<font color="#CCCCCC"> if malicious authors are</font>

199
00:07:51,830 --> 00:07:57,650
finding avenues like<font color="#E5E5E5"> these to to bypass</font>

200
00:07:55,490 --> 00:08:00,200
a<font color="#CCCCCC"> lot of checks that</font><font color="#E5E5E5"> we have in place by</font>

201
00:07:57,650 --> 00:08:03,049
the third<font color="#CCCCCC"> party products or by Google</font>

202
00:08:00,200 --> 00:08:06,229
<font color="#E5E5E5">Play Store itself to publish that in</font>

203
00:08:03,050 --> 00:08:08,540
Play stores as a result<font color="#E5E5E5"> of that we have</font>

204
00:08:06,230 --> 00:08:12,350
seen a huge surge in malicious

205
00:08:08,540 --> 00:08:15,110
applications<font color="#E5E5E5"> itself been out there so</font>

206
00:08:12,350 --> 00:08:16,970
now that<font color="#E5E5E5"> being said this</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> the</font>

207
00:08:15,110 --> 00:08:18,890
first<font color="#E5E5E5"> that is talking about this</font>

208
00:08:16,970 --> 00:08:22,370
particular<font color="#E5E5E5"> topics itself there are</font><font color="#CCCCCC"> bunch</font>

209
00:08:18,890 --> 00:08:25,340
<font color="#E5E5E5">of them</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> few listed there there was a</font>

210
00:08:22,370 --> 00:08:27,950
talk in Def Con<font color="#CCCCCC"> last year talking about</font>

211
00:08:25,340 --> 00:08:29,510
how to hack into Android<font color="#E5E5E5"> itself when</font>

212
00:08:27,950 --> 00:08:31,849
it's been hardened when the application

213
00:08:29,510 --> 00:08:33,650
is hardened itself<font color="#E5E5E5"> unfortunately the</font>

214
00:08:31,850 --> 00:08:36,020
tools<font color="#CCCCCC"> that they have</font><font color="#E5E5E5"> released as an</font>

215
00:08:33,650 --> 00:08:38,120
after of aftermath of<font color="#CCCCCC"> that itself</font><font color="#E5E5E5"> of</font>

216
00:08:36,020 --> 00:08:40,549
aftermath of their presentation<font color="#E5E5E5"> it's all</font>

217
00:08:38,120 --> 00:08:43,100
been obsolete at this<font color="#E5E5E5"> given point or are</font>

218
00:08:40,549 --> 00:08:45,709
not been maintained as a result of that

219
00:08:43,100 --> 00:08:48,020
there is<font color="#E5E5E5"> no concrete evidence of us just</font>

220
00:08:45,710 --> 00:08:49,790
downloading<font color="#E5E5E5"> something from github and</font>

221
00:08:48,020 --> 00:08:51,170
decompiling and<font color="#CCCCCC"> harden application</font>

222
00:08:49,790 --> 00:08:54,709
<font color="#E5E5E5">itself right</font><font color="#CCCCCC"> so that's where the</font>

223
00:08:51,170 --> 00:08:56,719
initiative came<font color="#E5E5E5"> and from for for the</font>

224
00:08:54,710 --> 00:08:58,100
poppy seed project<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> certainly</font>

225
00:08:56,720 --> 00:08:59,600
<font color="#E5E5E5">looking for contributors itself there</font>

226
00:08:58,100 --> 00:09:00,860
<font color="#E5E5E5">are a lot of data that is already</font><font color="#CCCCCC"> a lot</font>

227
00:08:59,600 --> 00:09:02,750
<font color="#E5E5E5">of research that is already</font><font color="#CCCCCC"> out there</font>

228
00:09:00,860 --> 00:09:05,120
<font color="#CCCCCC">which would all consolidate that in one</font>

229
00:09:02,750 --> 00:09:08,540
<font color="#E5E5E5">place and then use that to identify the</font>

230
00:09:05,120 --> 00:09:10,820
<font color="#E5E5E5">application itself so we we talked about</font>

231
00:09:08,540 --> 00:09:11,550
<font color="#E5E5E5">the premise so far around the hardening</font>

232
00:09:10,820 --> 00:09:14,170
of<font color="#E5E5E5"> applique</font>

233
00:09:11,550 --> 00:09:16,329
let's quickly take a take a<font color="#CCCCCC"> look at the</font>

234
00:09:14,170 --> 00:09:17,770
first hardening technologies that we

235
00:09:16,330 --> 00:09:20,380
have<font color="#E5E5E5"> seen for Android which</font><font color="#CCCCCC"> is office</font>

236
00:09:17,770 --> 00:09:22,090
keishon<font color="#CCCCCC"> as a stated</font><font color="#E5E5E5"> before office</font>

237
00:09:20,380 --> 00:09:26,470
keishon is basically scrambling of your

238
00:09:22,090 --> 00:09:29,470
data<font color="#CCCCCC"> a good good example</font><font color="#E5E5E5"> for that</font><font color="#CCCCCC"> is</font>

239
00:09:26,470 --> 00:09:33,970
let's<font color="#E5E5E5"> say if for</font><font color="#CCCCCC"> an Android class you</font>

240
00:09:29,470 --> 00:09:36,310
have<font color="#CCCCCC"> comm wasp dot password validator</font><font color="#E5E5E5"> as</font>

241
00:09:33,970 --> 00:09:38,080
a human inspecting it<font color="#CCCCCC"> it's very clear</font>

242
00:09:36,310 --> 00:09:40,420
that<font color="#E5E5E5"> this could be a password validator</font>

243
00:09:38,080 --> 00:09:41,860
class<font color="#E5E5E5"> files right so office keishon will</font>

244
00:09:40,420 --> 00:09:44,890
change that<font color="#E5E5E5"> it will just</font><font color="#CCCCCC"> change that to</font>

245
00:09:41,860 --> 00:09:47,110
<font color="#E5E5E5">comm dot H dot s so as a human it's</font>

246
00:09:44,890 --> 00:09:48,760
little difficult for<font color="#E5E5E5"> us</font><font color="#CCCCCC"> to understand by</font>

247
00:09:47,110 --> 00:09:50,890
just<font color="#E5E5E5"> reading that last name itself and</font>

248
00:09:48,760 --> 00:09:54,100
you have<font color="#CCCCCC"> to inspect</font><font color="#E5E5E5"> that class name</font>

249
00:09:50,890 --> 00:09:56,050
class further<font color="#E5E5E5"> to understand what that</font>

250
00:09:54,100 --> 00:09:57,580
class is<font color="#CCCCCC"> actually trying to do so</font>

251
00:09:56,050 --> 00:09:59,949
obfuscation would basically mangle those

252
00:09:57,580 --> 00:10:01,810
things<font color="#CCCCCC"> there are a few other things that</font>

253
00:09:59,950 --> 00:10:04,240
<font color="#CCCCCC">the</font><font color="#E5E5E5"> scramble they also scramble the</font>

254
00:10:01,810 --> 00:10:06,430
variable names the function names now

255
00:10:04,240 --> 00:10:08,350
<font color="#E5E5E5">they can also do a control flow office</font>

256
00:10:06,430 --> 00:10:10,239
keishon as well so if you have<font color="#CCCCCC"> try/catch</font>

257
00:10:08,350 --> 00:10:12,940
if you have FL statement itself<font color="#E5E5E5"> they</font>

258
00:10:10,240 --> 00:10:15,160
will change that<font color="#E5E5E5"> into a switch and</font><font color="#CCCCCC"> that</font>

259
00:10:12,940 --> 00:10:17,680
switch would have a dead code<font color="#E5E5E5"> so you</font>

260
00:10:15,160 --> 00:10:19,120
have to go through each cases itself to

261
00:10:17,680 --> 00:10:21,640
understand what are they're<font color="#CCCCCC"> trying to</font><font color="#E5E5E5"> do</font>

262
00:10:19,120 --> 00:10:23,830
there there could be a<font color="#E5E5E5"> variable that has</font>

263
00:10:21,640 --> 00:10:26,199
returned back that can be used for by

264
00:10:23,830 --> 00:10:30,100
some other case statement itself to

265
00:10:26,200 --> 00:10:31,870
execute certain payload of it so since

266
00:10:30,100 --> 00:10:33,610
because<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that dead code injection</font>

267
00:10:31,870 --> 00:10:35,230
itself it<font color="#E5E5E5"> becomes very difficult for</font>

268
00:10:33,610 --> 00:10:37,930
someone to<font color="#E5E5E5"> like read through that code</font>

269
00:10:35,230 --> 00:10:40,390
<font color="#CCCCCC">the third in the office case in</font>

270
00:10:37,930 --> 00:10:42,520
standpoint<font color="#E5E5E5"> third in the office</font><font color="#CCCCCC"> Keshan</font>

271
00:10:40,390 --> 00:10:44,680
that we have looked at is called<font color="#E5E5E5"> string</font>

272
00:10:42,520 --> 00:10:47,800
encryption<font color="#E5E5E5"> so it will encrypt the string</font>

273
00:10:44,680 --> 00:10:49,479
and in order to decrypt<font color="#E5E5E5"> the</font><font color="#CCCCCC"> data itself</font>

274
00:10:47,800 --> 00:10:51,910
<font color="#E5E5E5">they will have some</font><font color="#CCCCCC"> logic inside the</font>

275
00:10:49,480 --> 00:10:55,240
file<font color="#E5E5E5"> on how you could decrypt that</font>

276
00:10:51,910 --> 00:10:58,120
string<font color="#E5E5E5"> so as a human when it's reading a</font>

277
00:10:55,240 --> 00:10:59,590
jargon<font color="#E5E5E5"> jargon strings itself it's very</font>

278
00:10:58,120 --> 00:11:01,480
<font color="#E5E5E5">difficult for us to understand what it</font>

279
00:10:59,590 --> 00:11:02,920
is right<font color="#E5E5E5"> so now you have to go through</font>

280
00:11:01,480 --> 00:11:04,630
<font color="#E5E5E5">the entire call flow itself to</font>

281
00:11:02,920 --> 00:11:06,910
understand how you<font color="#E5E5E5"> can decrypt that file</font>

282
00:11:04,630 --> 00:11:09,730
decrypt<font color="#E5E5E5"> that string itself to get a</font>

283
00:11:06,910 --> 00:11:11,500
human readable<font color="#CCCCCC"> string so office caters</font>

284
00:11:09,730 --> 00:11:13,960
would do all of<font color="#E5E5E5"> that along with</font><font color="#CCCCCC"> that</font>

285
00:11:11,500 --> 00:11:17,890
they also<font color="#E5E5E5"> use Java reflection either for</font>

286
00:11:13,960 --> 00:11:22,660
an API hiding<font color="#E5E5E5"> itself or adding more</font>

287
00:11:17,890 --> 00:11:23,830
<font color="#E5E5E5">complexity to the code the only good</font>

288
00:11:22,660 --> 00:11:25,350
thing about<font color="#E5E5E5"> this is they are not</font>

289
00:11:23,830 --> 00:11:27,120
encrypting<font color="#E5E5E5"> any of them</font>

290
00:11:25,350 --> 00:11:28,800
<font color="#CCCCCC">Jeanne omits of the</font><font color="#E5E5E5"> malicious genome is</font>

291
00:11:27,120 --> 00:11:31,710
along with<font color="#E5E5E5"> the code so if you want to</font>

292
00:11:28,800 --> 00:11:35,880
read through<font color="#E5E5E5"> the code itself statically</font>

293
00:11:31,710 --> 00:11:38,070
<font color="#E5E5E5">then you have to read through through</font>

294
00:11:35,880 --> 00:11:40,500
<font color="#CCCCCC">the code itself</font><font color="#E5E5E5"> and the first in the</font>

295
00:11:38,070 --> 00:11:43,800
example itself<font color="#E5E5E5"> is</font><font color="#CCCCCC"> ProGuard so this is a</font>

296
00:11:40,500 --> 00:11:45,780
<font color="#E5E5E5">example of a very lightweight office</font>

297
00:11:43,800 --> 00:11:48,990
<font color="#E5E5E5">kitchen technique it comes out</font><font color="#CCCCCC"> of the</font>

298
00:11:45,780 --> 00:11:51,900
box<font color="#E5E5E5"> from</font><font color="#CCCCCC"> Android standpoint itself and</font>

299
00:11:48,990 --> 00:11:54,540
as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see this is one of</font><font color="#E5E5E5"> the</font>

300
00:11:51,900 --> 00:11:57,449
ransomware<font color="#E5E5E5"> so the the first</font><font color="#CCCCCC"> part of the</font>

301
00:11:54,540 --> 00:11:59,459
code itself<font color="#E5E5E5"> is basically used to lock a</font>

302
00:11:57,450 --> 00:12:00,930
computer<font color="#CCCCCC"> or lock a device so it will</font>

303
00:11:59,460 --> 00:12:04,860
lock<font color="#E5E5E5"> a device</font><font color="#CCCCCC"> that will set a passcode</font>

304
00:12:00,930 --> 00:12:06,949
<font color="#CCCCCC">for it in order to</font><font color="#E5E5E5"> decrypt</font><font color="#CCCCCC"> the data you</font>

305
00:12:04,860 --> 00:12:09,720
need<font color="#CCCCCC"> to enter</font><font color="#E5E5E5"> the same passcode passcode</font>

306
00:12:06,950 --> 00:12:11,970
<font color="#E5E5E5">so if you</font><font color="#CCCCCC"> D</font><font color="#E5E5E5"> compile the</font><font color="#CCCCCC"> application once</font>

307
00:12:09,720 --> 00:12:14,370
you get it<font color="#CCCCCC"> it was it</font><font color="#E5E5E5"> was very evident</font>

308
00:12:11,970 --> 00:12:17,190
<font color="#E5E5E5">that the passcode is set to one zero</font>

309
00:12:14,370 --> 00:12:19,350
<font color="#E5E5E5">zero eight from a malicious</font><font color="#CCCCCC"> author</font>

310
00:12:17,190 --> 00:12:23,130
standpoint itself they were<font color="#CCCCCC"> coding 0.5</font>

311
00:12:19,350 --> 00:12:24,660
bitcoins<font color="#E5E5E5"> for this and when we</font><font color="#CCCCCC"> did some</font>

312
00:12:23,130 --> 00:12:27,290
stats<font color="#CCCCCC"> around how much</font><font color="#E5E5E5"> they earn over a</font>

313
00:12:24,660 --> 00:12:30,180
period of time at last<font color="#E5E5E5"> till last week</font>

314
00:12:27,290 --> 00:12:33,959
<font color="#E5E5E5">they</font><font color="#CCCCCC"> earned</font><font color="#E5E5E5"> thirty four million dollars</font>

315
00:12:30,180 --> 00:12:35,609
from<font color="#E5E5E5"> it so by just having</font><font color="#CCCCCC"> addy</font>

316
00:12:33,960 --> 00:12:37,380
<font color="#CCCCCC">compilation of</font><font color="#E5E5E5"> the application itself it</font>

317
00:12:35,610 --> 00:12:38,430
was very evident that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> passcode</font><font color="#E5E5E5"> is</font>

318
00:12:37,380 --> 00:12:40,860
<font color="#E5E5E5">right there</font>

319
00:12:38,430 --> 00:12:43,079
and<font color="#E5E5E5"> we could have helped millions of</font>

320
00:12:40,860 --> 00:12:47,010
<font color="#E5E5E5">people</font><font color="#CCCCCC"> who paid for</font><font color="#E5E5E5"> the ransomware</font>

321
00:12:43,080 --> 00:12:50,610
itself to unlock their device<font color="#E5E5E5"> so that's</font>

322
00:12:47,010 --> 00:12:52,200
one example of let me<font color="#E5E5E5"> just talk about a</font>

323
00:12:50,610 --> 00:12:54,630
quick office<font color="#E5E5E5"> caching technique as well</font>

324
00:12:52,200 --> 00:12:58,830
so if you look for<font color="#E5E5E5"> classes dot for name</font>

325
00:12:54,630 --> 00:13:00,840
<font color="#E5E5E5">of which is comm dot H dot s that is</font><font color="#CCCCCC"> a</font>

326
00:12:58,830 --> 00:13:03,870
kind<font color="#E5E5E5"> of an office keishon for class</font>

327
00:13:00,840 --> 00:13:05,570
names so it's not<font color="#E5E5E5"> very trivial as you</font>

328
00:13:03,870 --> 00:13:07,530
can see to read through<font color="#CCCCCC"> what exactly</font>

329
00:13:05,570 --> 00:13:09,510
<font color="#E5E5E5">malicious author is trying to do at this</font>

330
00:13:07,530 --> 00:13:11,579
<font color="#CCCCCC">given point even if they're</font><font color="#E5E5E5"> using some</font>

331
00:13:09,510 --> 00:13:15,750
<font color="#E5E5E5">sort of obfuscation</font><font color="#CCCCCC"> but then it</font><font color="#E5E5E5"> gets</font>

332
00:13:11,580 --> 00:13:17,970
complex<font color="#E5E5E5"> the second in the list is</font><font color="#CCCCCC"> Dex</font>

333
00:13:15,750 --> 00:13:20,790
protector<font color="#E5E5E5"> Dex protector is a combination</font>

334
00:13:17,970 --> 00:13:22,620
of<font color="#E5E5E5"> packer and</font><font color="#CCCCCC"> office cater at this given</font>

335
00:13:20,790 --> 00:13:24,030
point<font color="#E5E5E5"> itself we will just look</font><font color="#CCCCCC"> at the</font>

336
00:13:22,620 --> 00:13:27,330
office keishon techniques and how their

337
00:13:24,030 --> 00:13:29,430
office<font color="#CCCCCC"> cating it so if the one that is</font>

338
00:13:27,330 --> 00:13:31,920
highlighted<font color="#CCCCCC"> is basically a Java</font>

339
00:13:29,430 --> 00:13:33,599
reflection where it<font color="#CCCCCC"> call calls</font><font color="#E5E5E5"> on create</font>

340
00:13:31,920 --> 00:13:37,530
<font color="#E5E5E5">with certain arguments that have been</font>

341
00:13:33,600 --> 00:13:39,329
<font color="#CCCCCC">passed this on create when you look at</font>

342
00:13:37,530 --> 00:13:41,339
the file itself that there were<font color="#E5E5E5"> nine</font>

343
00:13:39,329 --> 00:13:43,738
different instances<font color="#CCCCCC"> of it with various</font>

344
00:13:41,339 --> 00:13:46,319
arguments<font color="#E5E5E5"> being passed and each and</font>

345
00:13:43,739 --> 00:13:48,269
<font color="#CCCCCC">every argument</font><font color="#E5E5E5"> was called so each and</font>

346
00:13:46,319 --> 00:13:50,610
every<font color="#E5E5E5"> method was called</font><font color="#CCCCCC"> bypassing</font>

347
00:13:48,269 --> 00:13:53,100
various arguments<font color="#CCCCCC"> to it it will</font><font color="#E5E5E5"> collect</font>

348
00:13:50,610 --> 00:13:55,410
a small<font color="#E5E5E5"> bit of code and</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> pass it to</font>

349
00:13:53,100 --> 00:13:57,299
the<font color="#E5E5E5"> other one</font><font color="#CCCCCC"> itself by collecting all</font>

350
00:13:55,410 --> 00:14:00,689
<font color="#CCCCCC">of this you basically</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> a decryption</font>

351
00:13:57,299 --> 00:14:03,029
<font color="#E5E5E5">key but if you have to go through nine</font>

352
00:14:00,689 --> 00:14:04,589
<font color="#CCCCCC">different methods</font><font color="#E5E5E5"> to understand how to</font>

353
00:14:03,029 --> 00:14:07,829
decrypt<font color="#E5E5E5"> the data itself it's very</font>

354
00:14:04,589 --> 00:14:09,629
<font color="#E5E5E5">time-consuming</font><font color="#CCCCCC"> so as a result</font><font color="#E5E5E5"> of that we</font>

355
00:14:07,829 --> 00:14:11,368
<font color="#CCCCCC">created a Python script that will</font>

356
00:14:09,629 --> 00:14:16,350
<font color="#E5E5E5">basically go through the entire code</font>

357
00:14:11,369 --> 00:14:18,389
start<font color="#E5E5E5"> dumping the data bits</font><font color="#CCCCCC"> in the data</font>

358
00:14:16,350 --> 00:14:20,850
bits<font color="#E5E5E5"> and then collect the decryption key</font>

359
00:14:18,389 --> 00:14:24,049
<font color="#CCCCCC">and use that decryption key against</font>

360
00:14:20,850 --> 00:14:27,360
<font color="#CCCCCC">entire decompiled</font><font color="#E5E5E5"> class files itself to</font>

361
00:14:24,049 --> 00:14:30,449
first remove the dead code and<font color="#E5E5E5"> also give</font>

362
00:14:27,360 --> 00:14:33,629
you a decrypted string<font color="#E5E5E5"> so as a</font><font color="#CCCCCC"> result of</font>

363
00:14:30,449 --> 00:14:35,248
that<font color="#CCCCCC"> we used that Python script to just</font>

364
00:14:33,629 --> 00:14:37,559
understand which method has been called

365
00:14:35,249 --> 00:14:40,410
<font color="#E5E5E5">by</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> function so it's it was colic</font>

366
00:14:37,559 --> 00:14:42,179
and collected calling<font color="#CCCCCC"> a text protected</font>

367
00:14:40,410 --> 00:14:44,730
<font color="#E5E5E5">dot name which is which was one of</font><font color="#CCCCCC"> the</font>

368
00:14:42,179 --> 00:14:47,730
loaded libraries<font color="#E5E5E5"> that they had and they</font>

369
00:14:44,730 --> 00:14:49,739
were<font color="#E5E5E5"> passing an argument for run along</font>

370
00:14:47,730 --> 00:14:52,379
with<font color="#CCCCCC"> the small hash and that hash was</font>

371
00:14:49,739 --> 00:14:54,989
collected through the<font color="#CCCCCC"> string encryption</font>

372
00:14:52,379 --> 00:14:57,689
mechanism that we have along<font color="#CCCCCC"> with that</font>

373
00:14:54,989 --> 00:15:00,059
it was<font color="#E5E5E5"> after it calls that it looks for</font>

374
00:14:57,689 --> 00:15:02,129
certain<font color="#E5E5E5"> attributes for route detection</font>

375
00:15:00,059 --> 00:15:04,199
checks or for anti debugging checks

376
00:15:02,129 --> 00:15:07,699
itself<font color="#E5E5E5"> if it if it passes through</font><font color="#CCCCCC"> that</font>

377
00:15:04,199 --> 00:15:10,769
<font color="#E5E5E5">it basically calls the next function so</font>

378
00:15:07,699 --> 00:15:13,559
as as a person who's trying<font color="#E5E5E5"> to research</font>

379
00:15:10,769 --> 00:15:15,540
on malware itself<font color="#CCCCCC"> I know that the</font><font color="#E5E5E5"> next</font>

380
00:15:13,559 --> 00:15:17,819
jump<font color="#E5E5E5"> that they would be</font><font color="#CCCCCC"> having provided</font>

381
00:15:15,540 --> 00:15:20,129
<font color="#E5E5E5">all</font><font color="#CCCCCC"> the conditions are satisfied</font><font color="#E5E5E5"> is this</font>

382
00:15:17,819 --> 00:15:21,839
the activity splash itself<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> I</font>

383
00:15:20,129 --> 00:15:23,459
don't<font color="#E5E5E5"> have to go through nine different</font>

384
00:15:21,839 --> 00:15:25,199
<font color="#E5E5E5">method calls to understand what they are</font>

385
00:15:23,459 --> 00:15:27,089
<font color="#E5E5E5">trying to do all I need to do is I</font><font color="#CCCCCC"> just</font>

386
00:15:25,199 --> 00:15:28,889
<font color="#E5E5E5">need to know the next jump that they</font>

387
00:15:27,089 --> 00:15:30,119
have very<font color="#CCCCCC"> similar to how</font><font color="#E5E5E5"> we have it for</font>

388
00:15:28,889 --> 00:15:31,410
<font color="#E5E5E5">the assembly language as well right we</font>

389
00:15:30,119 --> 00:15:32,970
just<font color="#E5E5E5"> go through</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> assembly language</font>

390
00:15:31,410 --> 00:15:34,469
we know which the next<font color="#E5E5E5"> jump would be</font>

391
00:15:32,970 --> 00:15:36,239
provided certain<font color="#CCCCCC"> conditions</font><font color="#E5E5E5"> have been</font>

392
00:15:34,470 --> 00:15:38,790
met<font color="#E5E5E5"> so we try</font><font color="#CCCCCC"> to do the same thing</font>

393
00:15:36,239 --> 00:15:41,610
itself<font color="#E5E5E5"> so index protector this was the</font>

394
00:15:38,790 --> 00:15:47,549
the next<font color="#E5E5E5"> one</font><font color="#CCCCCC"> that was called</font><font color="#E5E5E5"> and they</font>

395
00:15:41,610 --> 00:15:50,669
had a function that<font color="#CCCCCC"> was called</font><font color="#E5E5E5"> from the</font>

396
00:15:47,549 --> 00:15:52,319
malware genome itself so<font color="#E5E5E5"> now we know how</font>

397
00:15:50,669 --> 00:15:53,279
to<font color="#E5E5E5"> reach out</font><font color="#CCCCCC"> to it right</font><font color="#E5E5E5"> so if you</font>

398
00:15:52,319 --> 00:15:54,509
basically<font color="#E5E5E5"> have a</font>

399
00:15:53,279 --> 00:15:59,220
items group that can<font color="#CCCCCC"> help you out with</font>

400
00:15:54,509 --> 00:16:02,490
<font color="#CCCCCC">this the next in line</font><font color="#E5E5E5"> was for a premium</font>

401
00:15:59,220 --> 00:16:04,050
SMS<font color="#E5E5E5"> malware application so this</font>

402
00:16:02,490 --> 00:16:08,009
<font color="#CCCCCC">particular of malware application itself</font>

403
00:16:04,050 --> 00:16:10,050
<font color="#E5E5E5">would send out SMS to a premium SMS</font>

404
00:16:08,009 --> 00:16:11,970
numbers itself<font color="#CCCCCC"> and it will send</font><font color="#E5E5E5"> out</font>

405
00:16:10,050 --> 00:16:15,329
various data<font color="#E5E5E5"> it could be right from</font><font color="#CCCCCC"> your</font>

406
00:16:11,970 --> 00:16:18,600
geolocation<font color="#CCCCCC"> or</font><font color="#E5E5E5"> whether you are close to</font>

407
00:16:15,329 --> 00:16:20,878
home<font color="#CCCCCC"> or</font><font color="#E5E5E5"> close</font><font color="#CCCCCC"> to office all the time</font>

408
00:16:18,600 --> 00:16:24,480
whenever<font color="#E5E5E5"> you just leave home</font><font color="#CCCCCC"> so it will</font>

409
00:16:20,879 --> 00:16:27,149
send all<font color="#CCCCCC"> of this information</font><font color="#E5E5E5"> back to</font><font color="#CCCCCC"> an</font>

410
00:16:24,480 --> 00:16:28,589
premium number itself<font color="#E5E5E5"> and when we looked</font>

411
00:16:27,149 --> 00:16:30,389
at the<font color="#E5E5E5"> code itself as you can see we</font>

412
00:16:28,589 --> 00:16:32,550
cannot see where the<font color="#E5E5E5"> premium number is</font>

413
00:16:30,389 --> 00:16:34,740
<font color="#CCCCCC">to</font><font color="#E5E5E5"> right because</font><font color="#CCCCCC"> they all are</font><font color="#E5E5E5"> been</font>

414
00:16:32,550 --> 00:16:38,189
encrypted the<font color="#E5E5E5"> method names have been</font>

415
00:16:34,740 --> 00:16:40,740
encrypted<font color="#E5E5E5"> as well however for each and</font>

416
00:16:38,189 --> 00:16:42,930
every calls that they have<font color="#E5E5E5"> they were</font>

417
00:16:40,740 --> 00:16:47,370
importing a file and they were importing

418
00:16:42,930 --> 00:16:49,620
this<font color="#E5E5E5"> h h h h dot w h HW</font><font color="#CCCCCC"> of that</font>

419
00:16:47,370 --> 00:16:52,259
particular class name itself<font color="#E5E5E5"> had that</font>

420
00:16:49,620 --> 00:16:55,649
logic of how to decrypt the<font color="#E5E5E5"> string or</font>

421
00:16:52,259 --> 00:16:57,629
the function calls<font color="#E5E5E5"> so now for us the</font>

422
00:16:55,649 --> 00:16:59,339
<font color="#CCCCCC">next</font><font color="#E5E5E5"> step</font><font color="#CCCCCC"> would be</font><font color="#E5E5E5"> just to jump to jump</font>

423
00:16:57,629 --> 00:17:00,240
<font color="#CCCCCC">into</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> call itself</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> and that's</font>

424
00:16:59,339 --> 00:17:02,220
<font color="#E5E5E5">exactly what we did</font>

425
00:17:00,240 --> 00:17:03,569
jumped into<font color="#E5E5E5"> it and we saw that</font><font color="#CCCCCC"> they're</font>

426
00:17:02,220 --> 00:17:05,100
<font color="#E5E5E5">basically passing three different</font>

427
00:17:03,569 --> 00:17:06,750
arguments<font color="#CCCCCC"> to it they are</font><font color="#E5E5E5"> passing a</font>

428
00:17:05,099 --> 00:17:10,559
<font color="#E5E5E5">string that needs to be decrypted</font>

429
00:17:06,750 --> 00:17:13,079
<font color="#E5E5E5">they're passing a number and they are</font>

430
00:17:10,559 --> 00:17:15,599
<font color="#E5E5E5">passing another character and the</font>

431
00:17:13,079 --> 00:17:17,188
function<font color="#E5E5E5"> if you further inspect the</font>

432
00:17:15,599 --> 00:17:20,208
function itself they're doing three

433
00:17:17,189 --> 00:17:23,640
things<font color="#CCCCCC"> they</font><font color="#E5E5E5"> are doing</font><font color="#CCCCCC"> an and all or</font>

434
00:17:20,209 --> 00:17:25,289
based on the number<font color="#CCCCCC"> of numbers</font><font color="#E5E5E5"> that have</font>

435
00:17:23,640 --> 00:17:27,720
been<font color="#CCCCCC"> passed in the</font><font color="#E5E5E5"> middle argument the</font>

436
00:17:25,289 --> 00:17:30,929
second argument and and<font color="#CCCCCC"> they're</font>

437
00:17:27,720 --> 00:17:33,360
decrypting based on that so we mimics

438
00:17:30,929 --> 00:17:35,700
that entire call function itself into a

439
00:17:33,360 --> 00:17:37,379
<font color="#E5E5E5">Python code and we said okay</font><font color="#CCCCCC"> let's just</font>

440
00:17:35,700 --> 00:17:39,090
do<font color="#E5E5E5"> this</font><font color="#CCCCCC"> all the</font><font color="#E5E5E5"> encrypted functions that</font>

441
00:17:37,380 --> 00:17:41,309
we have<font color="#E5E5E5"> or</font><font color="#CCCCCC"> the string</font><font color="#E5E5E5"> just pass it to</font>

442
00:17:39,090 --> 00:17:42,870
this particular<font color="#CCCCCC"> function call there are</font>

443
00:17:41,309 --> 00:17:45,408
four<font color="#E5E5E5"> different results that it will have</font>

444
00:17:42,870 --> 00:17:48,299
and one will have<font color="#CCCCCC"> a human readable</font><font color="#E5E5E5"> code</font>

445
00:17:45,409 --> 00:17:49,860
so if if we get one human readable code

446
00:17:48,299 --> 00:17:51,450
itself we know that it's that's<font color="#E5E5E5"> the</font>

447
00:17:49,860 --> 00:17:53,639
logic that they use to decrypt<font color="#E5E5E5"> the</font>

448
00:17:51,450 --> 00:17:54,870
string so without even<font color="#CCCCCC"> understanding the</font>

449
00:17:53,640 --> 00:17:56,399
<font color="#E5E5E5">entire logic</font><font color="#CCCCCC"> itself</font><font color="#E5E5E5"> without even</font>

450
00:17:54,870 --> 00:17:59,039
spending a lot of time into<font color="#E5E5E5"> how they are</font>

451
00:17:56,399 --> 00:18:01,080
trying<font color="#E5E5E5"> to do it</font><font color="#CCCCCC"> we basically just mimic</font>

452
00:17:59,039 --> 00:18:03,390
<font color="#E5E5E5">that code and now we are</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> extract</font>

453
00:18:01,080 --> 00:18:04,918
<font color="#E5E5E5">all</font><font color="#CCCCCC"> the code from the now that</font><font color="#E5E5E5"> becomes</font>

454
00:18:03,390 --> 00:18:06,450
very<font color="#CCCCCC"> easy for us to</font><font color="#E5E5E5"> like read the code</font>

455
00:18:04,919 --> 00:18:06,750
through<font color="#E5E5E5"> right at</font><font color="#CCCCCC"> that given</font><font color="#E5E5E5"> point so</font>

456
00:18:06,450 --> 00:18:09,270
that

457
00:18:06,750 --> 00:18:11,730
another instance<font color="#E5E5E5"> where you have in file</font>

458
00:18:09,270 --> 00:18:13,220
encryption mechanisms<font color="#E5E5E5"> to to pull the</font>

459
00:18:11,730 --> 00:18:15,690
data<font color="#E5E5E5"> out</font>

460
00:18:13,220 --> 00:18:16,890
now<font color="#E5E5E5"> the second hardening technology</font>

461
00:18:15,690 --> 00:18:19,620
technique that we have seen is called

462
00:18:16,890 --> 00:18:23,520
<font color="#CCCCCC">Packer a packer would basically encrypt</font>

463
00:18:19,620 --> 00:18:26,189
a section of the<font color="#E5E5E5"> code and it</font><font color="#CCCCCC"> will keep</font>

464
00:18:23,520 --> 00:18:28,110
that<font color="#E5E5E5"> in the memory if all the conditions</font>

465
00:18:26,190 --> 00:18:30,600
<font color="#E5E5E5">are</font><font color="#CCCCCC"> met</font><font color="#E5E5E5"> then it will decrypt that data</font>

466
00:18:28,110 --> 00:18:33,120
and pull that information<font color="#E5E5E5"> from there</font><font color="#CCCCCC"> it</font>

467
00:18:30,600 --> 00:18:34,530
could be<font color="#CCCCCC"> malicious content or in many</font>

468
00:18:33,120 --> 00:18:37,260
different<font color="#CCCCCC"> companies that's been used</font><font color="#E5E5E5"> to</font>

469
00:18:34,530 --> 00:18:39,450
like you it's used as a secure storage

470
00:18:37,260 --> 00:18:41,760
of<font color="#E5E5E5"> the data or where the IP is very</font>

471
00:18:39,450 --> 00:18:46,590
important they use<font color="#E5E5E5"> Packer to encrypt</font>

472
00:18:41,760 --> 00:18:48,750
that data itself so in case of<font color="#E5E5E5"> Packer</font>

473
00:18:46,590 --> 00:18:49,139
<font color="#E5E5E5">they are doing it in three different</font>

474
00:18:48,750 --> 00:18:51,840
<font color="#E5E5E5">ways</font>

475
00:18:49,140 --> 00:18:53,220
<font color="#CCCCCC">there's the dynamic</font><font color="#E5E5E5"> code modification</font>

476
00:18:51,840 --> 00:18:55,620
where you're modifying<font color="#E5E5E5"> the code itself</font>

477
00:18:53,220 --> 00:18:56,850
on the fly based<font color="#E5E5E5"> on the certain</font>

478
00:18:55,620 --> 00:18:59,699
conditions whether they are met or<font color="#E5E5E5"> not</font>

479
00:18:56,850 --> 00:19:02,550
<font color="#CCCCCC">then you load that file</font><font color="#E5E5E5"> in the memory</font>

480
00:18:59,700 --> 00:19:07,940
itself<font color="#CCCCCC"> or in certain cases</font><font color="#E5E5E5"> within your</font>

481
00:19:02,550 --> 00:19:07,940
data<font color="#E5E5E5"> drive or there could be an envelope</font>

482
00:19:08,510 --> 00:19:14,100
<font color="#E5E5E5">conceptually this</font><font color="#CCCCCC"> is how it works you</font>

483
00:19:10,590 --> 00:19:17,520
<font color="#E5E5E5">basically have a</font><font color="#CCCCCC"> APK file which is</font>

484
00:19:14,100 --> 00:19:19,679
before<font color="#E5E5E5"> signing it you upload that</font><font color="#CCCCCC"> on a</font>

485
00:19:17,520 --> 00:19:22,170
website<font color="#CCCCCC"> somewhere</font><font color="#E5E5E5"> and it will modify</font>

486
00:19:19,680 --> 00:19:25,170
<font color="#E5E5E5">your manifest file and it will modify</font>

487
00:19:22,170 --> 00:19:28,650
your classes<font color="#CCCCCC"> dot text which</font><font color="#E5E5E5"> is which has</font>

488
00:19:25,170 --> 00:19:31,230
<font color="#E5E5E5">all the logic around how it</font><font color="#CCCCCC"> actually how</font>

489
00:19:28,650 --> 00:19:33,330
the code would actually work and it will

490
00:19:31,230 --> 00:19:35,670
give you a new classes file which is

491
00:19:33,330 --> 00:19:39,149
<font color="#E5E5E5">called a stop that</font>

492
00:19:35,670 --> 00:19:41,520
<font color="#CCCCCC">so the first Avenue of calling an</font><font color="#E5E5E5"> apk</font>

493
00:19:39,150 --> 00:19:44,490
itself is that it will go to the

494
00:19:41,520 --> 00:19:46,290
manifest file<font color="#E5E5E5"> it will look at where</font><font color="#CCCCCC"> that</font>

495
00:19:44,490 --> 00:19:48,570
stub has been<font color="#E5E5E5"> loaded it will load that</font>

496
00:19:46,290 --> 00:19:50,040
<font color="#E5E5E5">stuff in the memory first look for all</font>

497
00:19:48,570 --> 00:19:52,020
the<font color="#E5E5E5"> conditions whether it's satisfied or</font>

498
00:19:50,040 --> 00:19:54,750
not<font color="#E5E5E5"> if the conditions have been</font>

499
00:19:52,020 --> 00:19:57,690
<font color="#CCCCCC">satisfied then it</font><font color="#E5E5E5"> will load then the</font>

500
00:19:54,750 --> 00:20:02,370
main classes dot Dex that was<font color="#E5E5E5"> written</font><font color="#CCCCCC"> by</font>

501
00:19:57,690 --> 00:20:05,070
the malicious author so the first in the

502
00:20:02,370 --> 00:20:08,850
example that<font color="#E5E5E5"> we have was released out in</font>

503
00:20:05,070 --> 00:20:11,730
December 2017<font color="#CCCCCC"> and this was a packer</font>

504
00:20:08,850 --> 00:20:13,050
called<font color="#CCCCCC"> jum j2 I'm just</font><font color="#E5E5E5"> making up the</font>

505
00:20:11,730 --> 00:20:14,820
name at<font color="#E5E5E5"> this given point itself I</font><font color="#CCCCCC"> don't</font>

506
00:20:13,050 --> 00:20:18,580
know the name<font color="#CCCCCC"> of the Packer but we've</font>

507
00:20:14,820 --> 00:20:21,850
<font color="#E5E5E5">found this one</font><font color="#CCCCCC"> where</font>

508
00:20:18,580 --> 00:20:23,800
the<font color="#E5E5E5"> the class name and</font><font color="#CCCCCC"> the header</font><font color="#E5E5E5"> size</font>

509
00:20:21,850 --> 00:20:26,290
if you look at<font color="#E5E5E5"> it's normally close to</font>

510
00:20:23,800 --> 00:20:28,720
<font color="#E5E5E5">forty six or sixty two bits right and</font>

511
00:20:26,290 --> 00:20:31,240
this was close to one hundred<font color="#CCCCCC"> and thirty</font>

512
00:20:28,720 --> 00:20:34,930
<font color="#E5E5E5">six kilobytes</font><font color="#CCCCCC"> so that's that's like a</font>

513
00:20:31,240 --> 00:20:37,180
huge chunk of<font color="#CCCCCC"> data right</font><font color="#E5E5E5"> so we started</font>

514
00:20:34,930 --> 00:20:39,790
<font color="#CCCCCC">inspecting why exactly</font><font color="#E5E5E5"> does it stores</font>

515
00:20:37,180 --> 00:20:41,620
<font color="#E5E5E5">that huge of a file and it was dumping</font>

516
00:20:39,790 --> 00:20:42,790
that from<font color="#E5E5E5"> our header bytes as well it</font>

517
00:20:41,620 --> 00:20:45,340
turns out<font color="#CCCCCC"> that they were storing</font><font color="#E5E5E5"> the</font>

518
00:20:42,790 --> 00:20:48,430
classes by classes.dex<font color="#CCCCCC"> the malicious</font>

519
00:20:45,340 --> 00:20:50,679
classes<font color="#CCCCCC"> dot next in clear</font><font color="#E5E5E5"> inside the</font>

520
00:20:48,430 --> 00:20:53,320
header files itself so now<font color="#CCCCCC"> the</font><font color="#E5E5E5"> next step</font>

521
00:20:50,680 --> 00:20:55,090
would<font color="#CCCCCC"> be just to</font><font color="#E5E5E5"> dump that file store</font>

522
00:20:53,320 --> 00:20:57,520
that as a<font color="#E5E5E5"> class s dot</font><font color="#CCCCCC"> text</font><font color="#E5E5E5"> and D compile</font>

523
00:20:55,090 --> 00:20:59,610
it right and<font color="#E5E5E5"> that that's what we did and</font>

524
00:20:57,520 --> 00:21:02,560
<font color="#E5E5E5">we</font><font color="#CCCCCC"> were able</font><font color="#E5E5E5"> to extract all the files so</font>

525
00:20:59,610 --> 00:21:04,290
<font color="#E5E5E5">security through obscurity itself but at</font>

526
00:21:02,560 --> 00:21:07,179
least we were<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to pull the data out</font>

527
00:21:04,290 --> 00:21:10,810
<font color="#E5E5E5">without doing without installing it on</font>

528
00:21:07,180 --> 00:21:15,310
any phones<font color="#E5E5E5"> or doing a lot of analysis</font>

529
00:21:10,810 --> 00:21:15,780
<font color="#CCCCCC">around it the second is more dynamic</font><font color="#E5E5E5"> in</font>

530
00:21:15,310 --> 00:21:19,090
nature

531
00:21:15,780 --> 00:21:20,980
<font color="#CCCCCC">it's called outcry infiltrate again we</font>

532
00:21:19,090 --> 00:21:23,830
are not<font color="#CCCCCC"> very</font><font color="#E5E5E5"> sure on the file</font><font color="#CCCCCC"> name</font>

533
00:21:20,980 --> 00:21:27,910
itself<font color="#E5E5E5"> all of</font><font color="#CCCCCC"> these names are named</font>

534
00:21:23,830 --> 00:21:30,040
based<font color="#E5E5E5"> on the class files</font><font color="#CCCCCC"> it loads so as</font>

535
00:21:27,910 --> 00:21:32,140
I stated<font color="#E5E5E5"> before the first step in the</font>

536
00:21:30,040 --> 00:21:34,149
<font color="#CCCCCC">process is to</font><font color="#E5E5E5"> modify the manifest right</font>

537
00:21:32,140 --> 00:21:36,040
<font color="#E5E5E5">and the first injection point that you</font>

538
00:21:34,150 --> 00:21:38,320
<font color="#E5E5E5">have for Android is your application</font><font color="#CCCCCC"> tag</font>

539
00:21:36,040 --> 00:21:41,320
so<font color="#E5E5E5"> that's exactly</font><font color="#CCCCCC"> what we did</font><font color="#E5E5E5"> we looked</font>

540
00:21:38,320 --> 00:21:43,270
<font color="#E5E5E5">at the application tag itself and it</font>

541
00:21:41,320 --> 00:21:45,790
turns out<font color="#E5E5E5"> that they're calling</font><font color="#CCCCCC"> the one</font>

542
00:21:43,270 --> 00:21:48,430
that is<font color="#E5E5E5"> highlighted</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> calling</font><font color="#CCCCCC"> Android</font>

543
00:21:45,790 --> 00:21:50,920
<font color="#CCCCCC">support multi decks and multi decks</font>

544
00:21:48,430 --> 00:21:52,600
<font color="#E5E5E5">application itself the multi text</font>

545
00:21:50,920 --> 00:21:55,930
application<font color="#CCCCCC"> that it's calling has the</font>

546
00:21:52,600 --> 00:21:58,330
call for the stub<font color="#E5E5E5"> now again another</font>

547
00:21:55,930 --> 00:22:00,220
classic case<font color="#CCCCCC"> of security to obscure</font>

548
00:21:58,330 --> 00:22:01,929
<font color="#E5E5E5">security</font><font color="#CCCCCC"> they are making</font><font color="#E5E5E5"> it sound like</font>

549
00:22:00,220 --> 00:22:04,750
this<font color="#E5E5E5"> is an</font><font color="#CCCCCC"> Android SDK that they have</font>

550
00:22:01,930 --> 00:22:06,880
downloaded<font color="#E5E5E5"> that</font><font color="#CCCCCC"> was in</font><font color="#E5E5E5"> the case this</font>

551
00:22:04,750 --> 00:22:08,950
<font color="#E5E5E5">particular</font><font color="#CCCCCC"> file that they have is</font>

552
00:22:06,880 --> 00:22:11,500
actually<font color="#CCCCCC"> something that they embedded</font>

553
00:22:08,950 --> 00:22:15,160
<font color="#E5E5E5">along with the Android SDK itself that</font>

554
00:22:11,500 --> 00:22:19,960
has the call for the stop<font color="#E5E5E5"> as a result of</font>

555
00:22:15,160 --> 00:22:22,360
that if you so we went<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Android sorry</font>

556
00:22:19,960 --> 00:22:25,330
multi<font color="#CCCCCC"> decks application file</font><font color="#E5E5E5"> itself and</font>

557
00:22:22,360 --> 00:22:28,360
we saw<font color="#CCCCCC"> that it's it it's calling out cry</font>

558
00:22:25,330 --> 00:22:30,639
it's calling out cry with<font color="#CCCCCC"> a hash to</font>

559
00:22:28,360 --> 00:22:31,870
decrypt<font color="#CCCCCC"> the data</font><font color="#E5E5E5"> the one that is</font>

560
00:22:30,640 --> 00:22:35,740
<font color="#E5E5E5">highlighted below</font>

561
00:22:31,870 --> 00:22:37,929
so like any<font color="#CCCCCC"> sane person</font><font color="#E5E5E5"> we followed the</font>

562
00:22:35,740 --> 00:22:41,320
trail<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> said we let</font><font color="#E5E5E5"> just go to the</font>

563
00:22:37,930 --> 00:22:43,780
load library<font color="#E5E5E5"> that they have and the</font>

564
00:22:41,320 --> 00:22:45,689
infiltrate call itself<font color="#E5E5E5"> basically uses</font>

565
00:22:43,780 --> 00:22:48,190
that as a hash and<font color="#CCCCCC"> it's sense</font><font color="#E5E5E5"> to a</font>

566
00:22:45,690 --> 00:22:50,920
dynamically<font color="#E5E5E5"> loaded library called second</font>

567
00:22:48,190 --> 00:22:52,390
hand the<font color="#CCCCCC"> second hand again does all the</font>

568
00:22:50,920 --> 00:22:53,590
checks and balances to<font color="#CCCCCC"> make sure that</font>

569
00:22:52,390 --> 00:22:55,540
it's running<font color="#CCCCCC"> on a secure environment</font>

570
00:22:53,590 --> 00:22:56,770
itself<font color="#E5E5E5"> it's not running on a rooted</font>

571
00:22:55,540 --> 00:22:59,409
device<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> have the anti</font>

572
00:22:56,770 --> 00:23:02,379
debugging check itself<font color="#E5E5E5"> and in order to</font>

573
00:22:59,410 --> 00:23:04,540
<font color="#E5E5E5">decrypt that classes dot</font><font color="#CCCCCC"> text</font><font color="#E5E5E5"> it</font>

574
00:23:02,380 --> 00:23:07,540
provides you with that hash<font color="#E5E5E5"> that hash</font>

575
00:23:04,540 --> 00:23:11,950
was the key<font color="#CCCCCC"> to decrypt that data</font><font color="#E5E5E5"> so we</font>

576
00:23:07,540 --> 00:23:13,149
created all the knobs for<font color="#E5E5E5"> for all the</font>

577
00:23:11,950 --> 00:23:14,800
different conditions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have for</font>

578
00:23:13,150 --> 00:23:17,410
route detection checks or anti debugging

579
00:23:14,800 --> 00:23:20,139
checks itself<font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> are left with</font>

580
00:23:17,410 --> 00:23:22,750
<font color="#E5E5E5">the files and</font><font color="#CCCCCC"> how to decode to decrypt</font>

581
00:23:20,140 --> 00:23:26,620
<font color="#E5E5E5">it right so we found an easy</font><font color="#CCCCCC"> avenue of</font>

582
00:23:22,750 --> 00:23:28,900
it we<font color="#CCCCCC"> patched the the secondhand</font><font color="#E5E5E5"> dot</font><font color="#CCCCCC"> so</font>

583
00:23:26,620 --> 00:23:31,659
library that<font color="#E5E5E5"> they had and then we</font>

584
00:23:28,900 --> 00:23:33,940
finally<font color="#E5E5E5"> ditch out to the main classes</font>

585
00:23:31,660 --> 00:23:35,500
dot<font color="#E5E5E5"> text that was loaded in the memory</font>

586
00:23:33,940 --> 00:23:37,030
<font color="#CCCCCC">itself</font><font color="#E5E5E5"> and we said rather than you</font>

587
00:23:35,500 --> 00:23:38,950
loading in<font color="#E5E5E5"> the memory itself store it</font>

588
00:23:37,030 --> 00:23:40,240
here so<font color="#CCCCCC"> that we can grab it so we</font>

589
00:23:38,950 --> 00:23:43,630
<font color="#CCCCCC">grabbed</font><font color="#E5E5E5"> the classes</font><font color="#CCCCCC"> tour decks from</font>

590
00:23:40,240 --> 00:23:45,160
<font color="#E5E5E5">there itself and once we had it</font><font color="#CCCCCC"> we just</font>

591
00:23:43,630 --> 00:23:46,740
decompile it and we just<font color="#CCCCCC"> get the code</font>

592
00:23:45,160 --> 00:23:49,330
<font color="#E5E5E5">and the malicious code right there</font><font color="#CCCCCC"> right</font>

593
00:23:46,740 --> 00:23:52,150
<font color="#CCCCCC">so that's the second</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> that we saw</font>

594
00:23:49,330 --> 00:23:55,120
<font color="#E5E5E5">from a</font><font color="#CCCCCC"> packer standpoint the third in</font>

595
00:23:52,150 --> 00:23:57,760
<font color="#E5E5E5">the list was called</font><font color="#CCCCCC"> Vicky this is</font>

596
00:23:55,120 --> 00:23:59,260
another one<font color="#CCCCCC"> that was encrypting</font><font color="#E5E5E5"> SD card</font>

597
00:23:57,760 --> 00:24:00,940
<font color="#E5E5E5">so it will encrypt your eyes take heart</font>

598
00:23:59,260 --> 00:24:03,610
itself<font color="#E5E5E5"> and the logic of encrypting the</font>

599
00:24:00,940 --> 00:24:05,260
SD card was within the file itself<font color="#CCCCCC"> so we</font>

600
00:24:03,610 --> 00:24:07,659
<font color="#CCCCCC">used the same</font><font color="#E5E5E5"> process we looked at the</font>

601
00:24:05,260 --> 00:24:10,240
manifest<font color="#E5E5E5"> file first we saw where the</font>

602
00:24:07,660 --> 00:24:12,340
injection<font color="#E5E5E5"> of that stub actually is and</font>

603
00:24:10,240 --> 00:24:15,340
we found that the<font color="#E5E5E5"> injection of the stub</font>

604
00:24:12,340 --> 00:24:17,800
was at a VG application which is

605
00:24:15,340 --> 00:24:20,230
extending<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Android Zac application</font><font color="#E5E5E5"> at</font>

606
00:24:17,800 --> 00:24:23,080
this<font color="#CCCCCC"> given point</font><font color="#E5E5E5"> and it was calling</font><font color="#CCCCCC"> to</font>

607
00:24:20,230 --> 00:24:25,150
different so files the first<font color="#E5E5E5"> so file was</font>

608
00:24:23,080 --> 00:24:26,590
to make sure<font color="#CCCCCC"> that it's checking</font><font color="#E5E5E5"> for all</font>

609
00:24:25,150 --> 00:24:30,100
the different<font color="#CCCCCC"> conditions that we talked</font>

610
00:24:26,590 --> 00:24:31,840
about<font color="#E5E5E5"> before</font><font color="#CCCCCC"> and the</font><font color="#E5E5E5"> second one what was</font>

611
00:24:30,100 --> 00:24:34,629
a wrapper<font color="#CCCCCC"> that would</font><font color="#E5E5E5"> basically decrypt</font>

612
00:24:31,840 --> 00:24:36,820
your data so we said we can<font color="#CCCCCC"> use the same</font>

613
00:24:34,630 --> 00:24:41,230
techniques that<font color="#E5E5E5"> we used for outcry where</font>

614
00:24:36,820 --> 00:24:43,360
we bypass all the<font color="#E5E5E5"> different conditions</font>

615
00:24:41,230 --> 00:24:45,730
<font color="#CCCCCC">to</font><font color="#E5E5E5"> check whether the files have</font><font color="#CCCCCC"> been</font>

616
00:24:43,360 --> 00:24:47,679
validated or not and then we use the D

617
00:24:45,730 --> 00:24:50,140
<font color="#E5E5E5">corruption key to decrypt the classes or</font>

618
00:24:47,680 --> 00:24:53,020
tax<font color="#E5E5E5"> but the interesting</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> was there</font>

619
00:24:50,140 --> 00:24:54,850
<font color="#CCCCCC">was no code to decrypt</font><font color="#E5E5E5"> that data so as</font>

620
00:24:53,020 --> 00:24:59,160
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see there's no hash function</font><font color="#E5E5E5"> so</font>

621
00:24:54,850 --> 00:25:01,810
if I go to the previous<font color="#E5E5E5"> slides itself</font>

622
00:24:59,160 --> 00:25:04,420
this particular function was calling the

623
00:25:01,810 --> 00:25:05,919
load file along<font color="#CCCCCC"> with a decryption</font><font color="#E5E5E5"> key</font><font color="#CCCCCC"> so</font>

624
00:25:04,420 --> 00:25:08,500
that was the decryption key right<font color="#CCCCCC"> there</font>

625
00:25:05,920 --> 00:25:10,930
right so<font color="#E5E5E5"> conditions satisfied</font><font color="#CCCCCC"> used this</font>

626
00:25:08,500 --> 00:25:15,790
decryption key to dump your classes<font color="#E5E5E5"> or</font>

627
00:25:10,930 --> 00:25:16,240
<font color="#E5E5E5">text in</font><font color="#CCCCCC"> Vicky sorry I'm going</font><font color="#E5E5E5"> the wrong</font>

628
00:25:15,790 --> 00:25:20,909
way

629
00:25:16,240 --> 00:25:23,500
so in case of Vicky itself there was no

630
00:25:20,910 --> 00:25:26,890
decryption key<font color="#CCCCCC"> at this</font><font color="#E5E5E5"> given point so</font>

631
00:25:23,500 --> 00:25:29,500
and we said<font color="#CCCCCC"> bye if we'd run the elf hook</font>

632
00:25:26,890 --> 00:25:31,240
dot so obviously the conditions<font color="#E5E5E5"> would</font>

633
00:25:29,500 --> 00:25:34,480
<font color="#CCCCCC">not be met so we would never</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to</font>

634
00:25:31,240 --> 00:25:36,220
<font color="#E5E5E5">get the decryption key but they were</font>

635
00:25:34,480 --> 00:25:38,440
doing<font color="#CCCCCC"> one</font><font color="#E5E5E5"> interesting thing what they</font>

636
00:25:36,220 --> 00:25:40,780
were doing at<font color="#E5E5E5"> any given point itself was</font>

637
00:25:38,440 --> 00:25:45,310
they were storing the file the classes

638
00:25:40,780 --> 00:25:46,629
dot<font color="#CCCCCC"> txt in files folder</font><font color="#E5E5E5"> and during the</font>

639
00:25:45,310 --> 00:25:50,580
course<font color="#CCCCCC"> of the application whenever</font><font color="#E5E5E5"> you</font>

640
00:25:46,630 --> 00:25:52,870
are<font color="#E5E5E5"> running it it will stay there and</font>

641
00:25:50,580 --> 00:25:54,159
when you<font color="#E5E5E5"> run the application</font><font color="#CCCCCC"> again so</font>

642
00:25:52,870 --> 00:25:55,479
when you read on to the<font color="#CCCCCC"> application</font>

643
00:25:54,160 --> 00:25:58,150
against<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cell it'll</font><font color="#E5E5E5"> delete</font><font color="#CCCCCC"> that file</font>

644
00:25:55,480 --> 00:26:00,040
again<font color="#E5E5E5"> and then recreate it</font><font color="#CCCCCC"> so we said ok</font>

645
00:25:58,150 --> 00:26:03,010
<font color="#CCCCCC">let us learn this</font><font color="#E5E5E5"> application on and run</font>

646
00:26:00,040 --> 00:26:04,870
non-rooted<font color="#CCCCCC"> phone</font><font color="#E5E5E5"> itself</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> adp backup</font>

647
00:26:03,010 --> 00:26:06,790
which does a backup of<font color="#E5E5E5"> the files folder</font>

648
00:26:04,870 --> 00:26:09,489
let's<font color="#E5E5E5"> just take that file folder out</font>

649
00:26:06,790 --> 00:26:11,530
there would be a<font color="#CCCCCC"> classes dot for classes</font>

650
00:26:09,490 --> 00:26:12,700
<font color="#E5E5E5">dot decks in the files folder itself we</font>

651
00:26:11,530 --> 00:26:14,620
can<font color="#E5E5E5"> use the same decompilation</font>

652
00:26:12,700 --> 00:26:16,600
techniques that we know of<font color="#E5E5E5"> to get the</font>

653
00:26:14,620 --> 00:26:19,120
<font color="#CCCCCC">real java code</font><font color="#E5E5E5"> that has the malicious</font>

654
00:26:16,600 --> 00:26:21,070
code and that's exactly what we did<font color="#CCCCCC"> and</font>

655
00:26:19,120 --> 00:26:25,510
we were<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> get their classes</font><font color="#CCCCCC"> text</font>

656
00:26:21,070 --> 00:26:28,000
the malicious classes.dex<font color="#E5E5E5"> so if so there</font>

657
00:26:25,510 --> 00:26:30,010
are<font color="#CCCCCC"> avenues like</font><font color="#E5E5E5"> this that basically</font>

658
00:26:28,000 --> 00:26:33,370
helps us out<font color="#E5E5E5"> pull that information</font><font color="#CCCCCC"> from</font>

659
00:26:30,010 --> 00:26:34,720
there so the<font color="#E5E5E5"> last and the hardening</font>

660
00:26:33,370 --> 00:26:37,659
techniques that we<font color="#CCCCCC"> have is called</font>

661
00:26:34,720 --> 00:26:39,700
<font color="#E5E5E5">protector protector is basically a</font>

662
00:26:37,660 --> 00:26:42,430
combination<font color="#E5E5E5"> of both a packer</font><font color="#CCCCCC"> and an</font>

663
00:26:39,700 --> 00:26:44,770
office keishon<font color="#E5E5E5"> so it uses the encryption</font>

664
00:26:42,430 --> 00:26:47,650
of classes dot<font color="#E5E5E5"> X and it also offers</font>

665
00:26:44,770 --> 00:26:50,290
<font color="#CCCCCC">gates the logic of</font><font color="#E5E5E5"> how you can reach out</font>

666
00:26:47,650 --> 00:26:51,760
<font color="#CCCCCC">to the stub itself so as we saw in the</font>

667
00:26:50,290 --> 00:26:53,649
office kitchen itself it makes<font color="#E5E5E5"> very</font>

668
00:26:51,760 --> 00:26:56,860
difficult for<font color="#E5E5E5"> us</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> like read the code</font>

669
00:26:53,650 --> 00:26:59,530
<font color="#CCCCCC">it's of many different ways so that's</font>

670
00:26:56,860 --> 00:27:01,229
<font color="#E5E5E5">exactly</font><font color="#CCCCCC"> what happened with</font><font color="#E5E5E5"> us</font>

671
00:26:59,530 --> 00:27:04,450
so this is how it works under<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hood</font>

672
00:27:01,230 --> 00:27:06,580
<font color="#E5E5E5">you have the same techniques that you</font>

673
00:27:04,450 --> 00:27:09,700
have<font color="#E5E5E5"> for packing exactly the same</font>

674
00:27:06,580 --> 00:27:11,770
process the only<font color="#CCCCCC"> distinction</font><font color="#E5E5E5"> that they</font>

675
00:27:09,700 --> 00:27:15,250
have is<font color="#CCCCCC"> that they have obfuscated that</font>

676
00:27:11,770 --> 00:27:17,230
stop and how they are calling it so now

677
00:27:15,250 --> 00:27:18,850
we come back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the ex protector we</font>

678
00:27:17,230 --> 00:27:21,580
looked at it<font color="#E5E5E5"> from when we</font><font color="#CCCCCC"> are looking</font><font color="#E5E5E5"> at</font>

679
00:27:18,850 --> 00:27:23,020
office creation itself<font color="#CCCCCC"> and we use the</font>

680
00:27:21,580 --> 00:27:27,189
same techniques<font color="#CCCCCC"> that we used</font><font color="#E5E5E5"> for Packer</font>

681
00:27:23,020 --> 00:27:28,629
<font color="#E5E5E5">to decrypt that data so the first thing</font>

682
00:27:27,190 --> 00:27:30,159
<font color="#CCCCCC">that we</font><font color="#E5E5E5"> did was we</font><font color="#CCCCCC"> identified the</font>

683
00:27:28,630 --> 00:27:32,159
application and where it's been called

684
00:27:30,159 --> 00:27:37,330
so we identified<font color="#E5E5E5"> that it's calling comm</font>

685
00:27:32,159 --> 00:27:38,799
<font color="#CCCCCC">android</font><font color="#E5E5E5"> GMS comm API application and we</font>

686
00:27:37,330 --> 00:27:40,780
know<font color="#CCCCCC"> this</font><font color="#E5E5E5"> for sure that</font><font color="#CCCCCC"> it's security</font>

687
00:27:38,799 --> 00:27:44,590
<font color="#CCCCCC">through obscurity they're just injecting</font>

688
00:27:40,780 --> 00:27:46,389
their code in the<font color="#CCCCCC"> android sdk that</font><font color="#E5E5E5"> they</font>

689
00:27:44,590 --> 00:27:49,418
call<font color="#CCCCCC"> etcetera Android STK</font><font color="#E5E5E5"> kind of thing</font>

690
00:27:46,390 --> 00:27:52,570
right<font color="#E5E5E5"> so we did that and</font><font color="#CCCCCC"> now we know how</font>

691
00:27:49,419 --> 00:27:54,520
to decompile<font color="#CCCCCC"> so the d office gate in a</font>

692
00:27:52,570 --> 00:27:56,260
way the code that is already office

693
00:27:54,520 --> 00:27:57,730
<font color="#E5E5E5">gated right so we did that and</font><font color="#CCCCCC"> we do</font>

694
00:27:56,260 --> 00:28:01,120
office<font color="#CCCCCC"> gate at that code and we</font>

695
00:27:57,730 --> 00:28:04,059
identified<font color="#CCCCCC"> two variables</font><font color="#E5E5E5"> we said okay</font>

696
00:28:01,120 --> 00:28:05,408
they're calling this<font color="#E5E5E5"> load library itself</font>

697
00:28:04,059 --> 00:28:07,899
very similar to how<font color="#CCCCCC"> they're doing it for</font>

698
00:28:05,409 --> 00:28:11,860
<font color="#E5E5E5">Packer and after that the next step</font><font color="#CCCCCC"> that</font>

699
00:28:07,900 --> 00:28:14,320
<font color="#E5E5E5">they call is a different file so we said</font>

700
00:28:11,860 --> 00:28:15,820
<font color="#E5E5E5">okay skip the first two steps where</font>

701
00:28:14,320 --> 00:28:18,460
you're<font color="#E5E5E5"> doing the validation part of it</font>

702
00:28:15,820 --> 00:28:20,200
and lightly<font color="#CCCCCC"> come to the third part where</font>

703
00:28:18,460 --> 00:28:22,990
you're<font color="#E5E5E5"> basically launching that</font>

704
00:28:20,200 --> 00:28:24,460
malicious content and and that's how we

705
00:28:22,990 --> 00:28:26,409
were able<font color="#E5E5E5"> to identify what</font><font color="#CCCCCC"> that</font>

706
00:28:24,460 --> 00:28:30,130
application<font color="#CCCCCC"> is</font><font color="#E5E5E5"> trying to do by running</font>

707
00:28:26,409 --> 00:28:32,590
<font color="#E5E5E5">it on a device by doing this</font><font color="#CCCCCC"> particular</font>

708
00:28:30,130 --> 00:28:34,990
control by<font color="#E5E5E5"> doing this particular check</font>

709
00:28:32,590 --> 00:28:38,020
itself<font color="#E5E5E5"> we identified that there is</font><font color="#CCCCCC"> an</font>

710
00:28:34,990 --> 00:28:40,570
<font color="#E5E5E5">malware called</font><font color="#CCCCCC"> TZ which was impacting</font>

711
00:28:38,020 --> 00:28:44,020
Android users and in fact<font color="#E5E5E5"> Google came up</font>

712
00:28:40,570 --> 00:28:49,990
with the finding itself<font color="#CCCCCC"> in August or</font>

713
00:28:44,020 --> 00:28:51,370
September of last year so that's various

714
00:28:49,990 --> 00:28:52,630
techniques that we<font color="#E5E5E5"> have seen from a</font>

715
00:28:51,370 --> 00:28:55,120
militia standpoint<font color="#E5E5E5"> itself</font>

716
00:28:52,630 --> 00:28:58,900
so the the<font color="#CCCCCC"> poppyseed project that we</font>

717
00:28:55,120 --> 00:29:00,939
have has<font color="#E5E5E5"> identified 46 such different</font>

718
00:28:58,900 --> 00:29:03,940
office caters<font color="#CCCCCC"> Parker's or protectors</font><font color="#E5E5E5"> and</font>

719
00:29:00,940 --> 00:29:05,740
as you can<font color="#E5E5E5"> see each and every protector</font>

720
00:29:03,940 --> 00:29:07,059
is treated<font color="#CCCCCC"> differently right</font><font color="#E5E5E5"> or the</font>

721
00:29:05,740 --> 00:29:08,740
office<font color="#E5E5E5"> caters</font><font color="#CCCCCC"> or the Harding</font>

722
00:29:07,059 --> 00:29:12,190
technologies are treated differently<font color="#CCCCCC"> and</font>

723
00:29:08,740 --> 00:29:13,090
we are creating use<font color="#E5E5E5"> by use Python</font>

724
00:29:12,190 --> 00:29:14,980
scripts

725
00:29:13,090 --> 00:29:17,230
can be<font color="#E5E5E5"> injected so the first face that</font>

726
00:29:14,980 --> 00:29:18,909
<font color="#CCCCCC">we have within our project itself</font><font color="#E5E5E5"> is to</font>

727
00:29:17,230 --> 00:29:21,490
do a discovery phase of it

728
00:29:18,909 --> 00:29:24,159
so after discovering or rather after

729
00:29:21,490 --> 00:29:26,139
<font color="#E5E5E5">discovering itself we identify whether</font>

730
00:29:24,159 --> 00:29:28,570
they are using<font color="#CCCCCC"> an office cater protector</font>

731
00:29:26,139 --> 00:29:29,860
or a<font color="#E5E5E5"> packer once we have</font><font color="#CCCCCC"> identified</font>

732
00:29:28,570 --> 00:29:32,110
through that itself<font color="#E5E5E5"> once you do the</font>

733
00:29:29,860 --> 00:29:35,379
discovery then you call that particular

734
00:29:32,110 --> 00:29:36,998
<font color="#E5E5E5">files that we have created for for the</font>

735
00:29:35,379 --> 00:29:38,949
office<font color="#CCCCCC"> cating decoder so a good example</font>

736
00:29:36,999 --> 00:29:42,519
of that<font color="#E5E5E5"> is let's say</font><font color="#CCCCCC"> for TZ application</font>

737
00:29:38,950 --> 00:29:43,840
<font color="#CCCCCC">they're using Dex protector</font><font color="#E5E5E5"> by now that</font>

738
00:29:42,519 --> 00:29:45,639
<font color="#E5E5E5">we know that</font><font color="#CCCCCC"> they're using</font><font color="#E5E5E5"> Dex</font>

739
00:29:43,840 --> 00:29:48,129
protectorates<font color="#CCCCCC"> off we now know techniques</font>

740
00:29:45,639 --> 00:29:51,039
of how we can<font color="#E5E5E5"> do office</font><font color="#CCCCCC"> get the code</font><font color="#E5E5E5"> to</font>

741
00:29:48,129 --> 00:29:52,418
<font color="#CCCCCC">make it more human readable and now we</font>

742
00:29:51,039 --> 00:29:54,999
know how<font color="#CCCCCC"> to decrypt</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> data as well</font>

743
00:29:52,419 --> 00:29:57,190
<font color="#CCCCCC">right so</font><font color="#E5E5E5"> we use that logic in a Python</font>

744
00:29:54,999 --> 00:30:00,700
code<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> you can decrypt that data</font>

745
00:29:57,190 --> 00:30:05,559
<font color="#E5E5E5">completely and understand what genomes</font>

746
00:30:00,700 --> 00:30:07,230
are<font color="#E5E5E5"> they're using</font><font color="#CCCCCC"> so during our during</font>

747
00:30:05,559 --> 00:30:09,129
the the start of the call<font color="#E5E5E5"> it's the</font>

748
00:30:07,230 --> 00:30:10,869
<font color="#CCCCCC">presentation itself we talked</font><font color="#E5E5E5"> about</font>

749
00:30:09,129 --> 00:30:13,360
various samples right<font color="#E5E5E5"> and that's where</font>

750
00:30:10,869 --> 00:30:15,549
the samples<font color="#E5E5E5"> are so important</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> by</font>

751
00:30:13,360 --> 00:30:19,479
<font color="#E5E5E5">identifying all of</font><font color="#CCCCCC"> the samples itself we</font>

752
00:30:15,549 --> 00:30:22,570
were able<font color="#CCCCCC"> to find 456</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> Android</font>

753
00:30:19,480 --> 00:30:25,059
genomes that<font color="#CCCCCC"> are being implemented in an</font>

754
00:30:22,570 --> 00:30:27,759
<font color="#CCCCCC">application at this given</font><font color="#E5E5E5"> point so he</font>

755
00:30:25,059 --> 00:30:31,600
said that's<font color="#E5E5E5"> awesome but how is</font><font color="#CCCCCC"> that</font>

756
00:30:27,759 --> 00:30:33,610
beneficial<font color="#CCCCCC"> for all of us</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> are</font>

757
00:30:31,600 --> 00:30:34,928
<font color="#E5E5E5">going to create a static engine for the</font>

758
00:30:33,610 --> 00:30:37,149
same so that<font color="#CCCCCC"> they can do a static</font>

759
00:30:34,929 --> 00:30:39,279
analysis for you and<font color="#E5E5E5"> after that the next</font>

760
00:30:37,149 --> 00:30:40,658
<font color="#CCCCCC">process</font><font color="#E5E5E5"> is to is to scan the entire Play</font>

761
00:30:39,279 --> 00:30:42,850
<font color="#E5E5E5">Store all the places that are out there</font>

762
00:30:40,659 --> 00:30:44,350
<font color="#CCCCCC">and</font><font color="#E5E5E5"> identify this malicious content</font>

763
00:30:42,850 --> 00:30:46,469
itself and<font color="#E5E5E5"> reported</font><font color="#CCCCCC"> to Google so that</font>

764
00:30:44,350 --> 00:30:49,719
they can do the<font color="#E5E5E5"> right thing after that</font>

765
00:30:46,470 --> 00:30:53,950
so that's all<font color="#E5E5E5"> from an Android standpoint</font>

766
00:30:49,720 --> 00:30:56,860
<font color="#E5E5E5">itself</font><font color="#CCCCCC"> there interestingly enough there</font>

767
00:30:53,950 --> 00:30:59,590
is an IOT application that we all must

768
00:30:56,860 --> 00:31:02,049
have<font color="#E5E5E5"> heard about for sure</font><font color="#CCCCCC"> and we are</font>

769
00:30:59,590 --> 00:31:06,309
looking<font color="#E5E5E5"> at the security posture of it</font>

770
00:31:02,049 --> 00:31:08,279
and interestingly enough we found that

771
00:31:06,309 --> 00:31:12,549
<font color="#E5E5E5">they're sending sensitive information</font>

772
00:31:08,279 --> 00:31:16,330
<font color="#CCCCCC">from our home devices itself to a</font>

773
00:31:12,549 --> 00:31:18,460
particular<font color="#E5E5E5"> server and again we haven't</font>

774
00:31:16,330 --> 00:31:20,289
inspected a lot in it it was<font color="#CCCCCC"> just day</font>

775
00:31:18,460 --> 00:31:21,759
<font color="#CCCCCC">before yesterday that we</font><font color="#E5E5E5"> found it so</font>

776
00:31:20,289 --> 00:31:23,619
maybe<font color="#CCCCCC"> we will</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> some more details</font>

777
00:31:21,759 --> 00:31:26,470
<font color="#CCCCCC">soon but as you can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> is basically</font>

778
00:31:23,619 --> 00:31:28,809
<font color="#CCCCCC">calling home with the</font><font color="#E5E5E5"> username</font><font color="#CCCCCC"> the port</font>

779
00:31:26,470 --> 00:31:30,610
the password and it<font color="#CCCCCC"> basically sends out</font>

780
00:31:28,809 --> 00:31:34,120
your information<font color="#CCCCCC"> a user information</font>

781
00:31:30,610 --> 00:31:36,969
about certain activities that<font color="#CCCCCC"> we're</font>

782
00:31:34,120 --> 00:31:39,010
<font color="#CCCCCC">doing at any given point so once we have</font>

783
00:31:36,970 --> 00:31:40,990
and we<font color="#CCCCCC"> have done the inspection around</font>

784
00:31:39,010 --> 00:31:42,879
it<font color="#E5E5E5"> I'm happy to release it out so that</font>

785
00:31:40,990 --> 00:31:46,210
<font color="#CCCCCC">we all can understand the security</font>

786
00:31:42,880 --> 00:31:48,070
<font color="#CCCCCC">posture of</font><font color="#E5E5E5"> it so that being said time</font>

787
00:31:46,210 --> 00:31:51,909
for questions<font color="#CCCCCC"> I want to open</font><font color="#E5E5E5"> up the</font>

788
00:31:48,070 --> 00:31:54,520
floors for<font color="#E5E5E5"> for what we have seen so far</font>

789
00:31:51,909 --> 00:32:05,039
<font color="#CCCCCC">or any observations or any</font><font color="#E5E5E5"> feedback that</font>

790
00:31:54,520 --> 00:32:09,610
<font color="#E5E5E5">you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> though so I'm curious about the</font>

791
00:32:05,039 --> 00:32:11,320
obfuscation<font color="#CCCCCC"> tools are their makers on</font>

792
00:32:09,610 --> 00:32:14,020
the<font color="#E5E5E5"> black market</font><font color="#CCCCCC"> building these and</font>

793
00:32:11,320 --> 00:32:15,580
evolving them and selling them<font color="#E5E5E5"> so from</font>

794
00:32:14,020 --> 00:32:19,120
an office<font color="#CCCCCC"> Gatien standpoint it's a we</font>

795
00:32:15,580 --> 00:32:20,860
haven't<font color="#E5E5E5"> seen anything off someone</font>

796
00:32:19,120 --> 00:32:24,158
creating it<font color="#E5E5E5"> but</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> backers We certainly</font>

797
00:32:20,860 --> 00:32:27,399
have<font color="#CCCCCC"> liked the outcry that we saw or the</font>

798
00:32:24,159 --> 00:32:29,710
<font color="#E5E5E5">jp2 that we looked at those were created</font>

799
00:32:27,400 --> 00:32:30,820
by a black market<font color="#CCCCCC"> for sure for office</font>

800
00:32:29,710 --> 00:32:32,620
keishon<font color="#E5E5E5"> they're using off-the-shelf</font>

801
00:32:30,820 --> 00:32:35,500
product at<font color="#E5E5E5"> this given point we have seen</font>

802
00:32:32,620 --> 00:32:38,020
<font color="#CCCCCC">decks card we have seen</font><font color="#E5E5E5"> decks protector</font>

803
00:32:35,500 --> 00:32:40,059
there is a guard guard<font color="#CCCCCC"> square</font><font color="#E5E5E5"> one of the</font>

804
00:32:38,020 --> 00:32:43,030
<font color="#E5E5E5">vendors that we</font><font color="#CCCCCC"> have we</font><font color="#E5E5E5"> have seen that</font>

805
00:32:40,059 --> 00:32:45,730
<font color="#CCCCCC">you been used for malicious contents as</font>

806
00:32:43,030 --> 00:32:47,350
well<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we haven't seen any new thing</font>

807
00:32:45,730 --> 00:32:57,309
from<font color="#E5E5E5"> an obfuscation standpoint coming</font>

808
00:32:47,350 --> 00:32:59,049
out yeah from<font color="#CCCCCC"> the obfuscation point of</font>

809
00:32:57,309 --> 00:33:01,809
view<font color="#E5E5E5"> like there are different levels are</font>

810
00:32:59,049 --> 00:33:03,580
<font color="#E5E5E5">there like one two</font><font color="#CCCCCC"> three four so the one</font>

811
00:33:01,809 --> 00:33:06,370
<font color="#E5E5E5">that you have tested is it like level</font>

812
00:33:03,580 --> 00:33:08,049
<font color="#E5E5E5">one or which level is it or if I am</font>

813
00:33:06,370 --> 00:33:10,510
using<font color="#E5E5E5"> the highest level I'll be more</font>

814
00:33:08,049 --> 00:33:12,970
<font color="#CCCCCC">secured so I'm not sure what different</font>

815
00:33:10,510 --> 00:33:14,230
levels are but there are different

816
00:33:12,970 --> 00:33:15,880
<font color="#E5E5E5">techniques that you</font><font color="#CCCCCC"> have for office</font>

817
00:33:14,230 --> 00:33:18,070
keishon like you have class<font color="#E5E5E5"> name office</font>

818
00:33:15,880 --> 00:33:20,080
<font color="#CCCCCC">keishon</font><font color="#E5E5E5"> which is like the bare minimum</font>

819
00:33:18,070 --> 00:33:23,260
<font color="#CCCCCC">that</font><font color="#E5E5E5"> ProGuard provides you but there are</font>

820
00:33:20,080 --> 00:33:26,289
<font color="#E5E5E5">class name encryptions</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> API hiding</font>

821
00:33:23,260 --> 00:33:28,419
<font color="#E5E5E5">there</font><font color="#CCCCCC"> is java reflections</font><font color="#E5E5E5"> so what we</font>

822
00:33:26,289 --> 00:33:31,390
have looked<font color="#CCCCCC"> at is like a</font><font color="#E5E5E5"> combination of</font>

823
00:33:28,419 --> 00:33:33,159
all of<font color="#E5E5E5"> them used together yeah because</font>

824
00:33:31,390 --> 00:33:35,799
when I<font color="#CCCCCC"> was</font><font color="#E5E5E5"> doing office</font><font color="#CCCCCC"> questions so</font>

825
00:33:33,159 --> 00:33:37,990
there is<font color="#E5E5E5"> like easy or medium a very</font>

826
00:33:35,799 --> 00:33:39,580
strict<font color="#E5E5E5"> or very high level there is so I</font>

827
00:33:37,990 --> 00:33:40,000
just want to<font color="#E5E5E5"> know</font><font color="#CCCCCC"> like which level you</font>

828
00:33:39,580 --> 00:33:41,889
have done

829
00:33:40,000 --> 00:33:43,960
so if<font color="#E5E5E5"> I'm if I do like very highest</font>

830
00:33:41,890 --> 00:33:46,990
level then will I be<font color="#E5E5E5"> secured</font>

831
00:33:43,960 --> 00:33:48,340
I see<font color="#E5E5E5"> so as I stated before I'm not very</font>

832
00:33:46,990 --> 00:33:50,500
<font color="#CCCCCC">sure about the different levels itself</font>

833
00:33:48,340 --> 00:33:52,300
<font color="#E5E5E5">we have seen two different</font><font color="#CCCCCC"> things we</font>

834
00:33:50,500 --> 00:33:53,950
<font color="#CCCCCC">have looked at</font><font color="#E5E5E5"> all of</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> features</font>

835
00:33:52,300 --> 00:33:55,480
<font color="#E5E5E5">being used from an encryption</font><font color="#CCCCCC"> from an</font>

836
00:33:53,950 --> 00:33:57,580
obfuscation standpoint<font color="#E5E5E5"> and there's</font>

837
00:33:55,480 --> 00:33:59,530
iterations<font color="#CCCCCC"> so he can do it one time</font><font color="#E5E5E5"> or</font>

838
00:33:57,580 --> 00:34:02,350
<font color="#CCCCCC">you can do it</font><font color="#E5E5E5"> 50 times or you can do 600</font>

839
00:33:59,530 --> 00:34:04,750
times<font color="#CCCCCC"> and it will</font><font color="#E5E5E5"> office</font><font color="#CCCCCC"> Kate based on</font>

840
00:34:02,350 --> 00:34:07,000
that right<font color="#E5E5E5"> so that's all</font><font color="#CCCCCC"> that I have</font>

841
00:34:04,750 --> 00:34:09,340
<font color="#E5E5E5">seen so I'm not sure</font><font color="#CCCCCC"> how to map</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> to</font>

842
00:34:07,000 --> 00:34:18,399
<font color="#E5E5E5">the</font><font color="#CCCCCC"> level one or level four that</font><font color="#E5E5E5"> you</font>

843
00:34:09,340 --> 00:34:20,230
talked about<font color="#E5E5E5"> I try to office get it and</font>

844
00:34:18,399 --> 00:34:23,409
then I try to analyze how it is<font color="#E5E5E5"> doing it</font>

845
00:34:20,230 --> 00:34:25,030
is<font color="#CCCCCC"> it like similar</font><font color="#E5E5E5"> that kind of research</font>

846
00:34:23,409 --> 00:34:28,050
if we do it or a<font color="#E5E5E5"> period of time would I</font>

847
00:34:25,030 --> 00:34:31,899
be able<font color="#CCCCCC"> to know like how they do it so</font>

848
00:34:28,050 --> 00:34:33,550
true<font color="#E5E5E5"> we can certainly do that</font><font color="#CCCCCC"> so from</font>

849
00:34:31,899 --> 00:34:35,770
our engagement<font color="#CCCCCC"> standpoint is what we try</font>

850
00:34:33,550 --> 00:34:37,000
to do the<font color="#E5E5E5"> same thing with text cards</font>

851
00:34:35,770 --> 00:34:38,259
because<font color="#E5E5E5"> we are not able to crack</font><font color="#CCCCCC"> decks</font>

852
00:34:37,000 --> 00:34:39,550
card at this given<font color="#E5E5E5"> point</font><font color="#CCCCCC"> itself</font><font color="#E5E5E5"> so we</font>

853
00:34:38,260 --> 00:34:42,370
wanted<font color="#E5E5E5"> to know how</font><font color="#CCCCCC"> exactly are</font><font color="#E5E5E5"> they</font>

854
00:34:39,550 --> 00:34:44,139
trying to do it and we used right from

855
00:34:42,370 --> 00:34:46,029
one round to like<font color="#E5E5E5"> 600 rounds to</font>

856
00:34:44,139 --> 00:34:48,399
understand how the code<font color="#E5E5E5"> would change</font>

857
00:34:46,030 --> 00:34:50,560
<font color="#E5E5E5">based on that so yeah that that's part</font>

858
00:34:48,399 --> 00:34:59,529
and<font color="#E5E5E5"> parcel</font><font color="#CCCCCC"> of the research as well thank</font>

859
00:34:50,560 --> 00:35:02,529
you I was just<font color="#E5E5E5"> wondering if the level of</font>

860
00:34:59,530 --> 00:35:05,140
obfuscation<font color="#CCCCCC"> be an indicator of</font><font color="#E5E5E5"> high</font>

861
00:35:02,530 --> 00:35:09,280
probability for<font color="#E5E5E5"> containing malware true</font>

862
00:35:05,140 --> 00:35:10,810
so it's actually<font color="#CCCCCC"> not</font><font color="#E5E5E5"> even we</font><font color="#CCCCCC"> the apps</font>

863
00:35:09,280 --> 00:35:13,960
that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> use on a</font><font color="#CCCCCC"> regular basis as well</font>

864
00:35:10,810 --> 00:35:16,630
they do office Kate it<font color="#CCCCCC"> so anything that</font>

865
00:35:13,960 --> 00:35:17,740
<font color="#E5E5E5">has like an algorithm or an IP that they</font>

866
00:35:16,630 --> 00:35:20,020
want to<font color="#CCCCCC"> protect they would normally</font>

867
00:35:17,740 --> 00:35:21,759
would go for office<font color="#CCCCCC"> caissons they also</font>

868
00:35:20,020 --> 00:35:23,350
<font color="#E5E5E5">so there are few</font><font color="#CCCCCC"> companies that I know</font>

869
00:35:21,760 --> 00:35:25,180
of which are also using<font color="#E5E5E5"> white box</font>

870
00:35:23,350 --> 00:35:28,000
cryptography<font color="#CCCCCC"> to just give you a secure</font>

871
00:35:25,180 --> 00:35:31,330
container<font color="#E5E5E5"> as well</font><font color="#CCCCCC"> and they all are legit</font>

872
00:35:28,000 --> 00:35:33,010
applications so that should not<font color="#CCCCCC"> be the</font>

873
00:35:31,330 --> 00:35:35,740
parameter<font color="#CCCCCC"> of like assessing whether it's</font>

874
00:35:33,010 --> 00:35:39,670
a malware or not is there<font color="#E5E5E5"> any tool to</font>

875
00:35:35,740 --> 00:35:41,470
compute level of obfuscation<font color="#E5E5E5"> so out</font><font color="#CCCCCC"> of</font>

876
00:35:39,670 --> 00:35:43,000
the<font color="#E5E5E5"> box a lot of applications do that so</font>

877
00:35:41,470 --> 00:35:45,310
<font color="#E5E5E5">as I</font><font color="#CCCCCC"> stated before techs card for</font>

878
00:35:43,000 --> 00:35:48,040
example<font color="#CCCCCC"> gives you avenues of</font><font color="#E5E5E5"> how many</font>

879
00:35:45,310 --> 00:35:49,750
times you want<font color="#CCCCCC"> to office Kate it so that</font>

880
00:35:48,040 --> 00:35:52,900
kind of has<font color="#E5E5E5"> a level</font><font color="#CCCCCC"> of difficulty</font>

881
00:35:49,750 --> 00:35:53,920
<font color="#E5E5E5">associated with it</font><font color="#CCCCCC"> there is</font><font color="#E5E5E5"> few others</font>

882
00:35:52,900 --> 00:35:55,569
<font color="#CCCCCC">that we talk to as</font><font color="#E5E5E5"> well</font>

883
00:35:53,920 --> 00:35:57,760
<font color="#E5E5E5">that provides you with</font><font color="#CCCCCC"> the same option</font>

884
00:35:55,569 --> 00:35:59,770
as well<font color="#E5E5E5"> but can you measure it like we</font>

885
00:35:57,760 --> 00:36:01,359
can get a<font color="#E5E5E5"> certain pile</font><font color="#CCCCCC"> court</font>

886
00:35:59,770 --> 00:36:02,799
once you have compiled the application

887
00:36:01,359 --> 00:36:05,200
itself<font color="#E5E5E5"> it's very difficult for us to</font>

888
00:36:02,799 --> 00:36:06,730
<font color="#CCCCCC">measure it from a security research</font>

889
00:36:05,200 --> 00:36:08,348
standpoint<font color="#E5E5E5"> it's off but if you are</font>

890
00:36:06,730 --> 00:36:14,859
developer then you can certainly have

891
00:36:08,349 --> 00:36:16,299
quantification around it how<font color="#E5E5E5"> many of</font>

892
00:36:14,859 --> 00:36:18,520
these<font color="#CCCCCC"> applications</font><font color="#E5E5E5"> are actually using</font>

893
00:36:16,299 --> 00:36:20,410
white box cryptography<font color="#E5E5E5"> and have you had</font>

894
00:36:18,520 --> 00:36:24,369
success<font color="#CCCCCC"> in you know attacking these</font>

895
00:36:20,410 --> 00:36:25,359
implementations so<font color="#E5E5E5"> in last year itself</font>

896
00:36:24,369 --> 00:36:27,280
we saw three<font color="#CCCCCC"> different applications</font>

897
00:36:25,359 --> 00:36:28,990
<font color="#CCCCCC">using</font><font color="#E5E5E5"> white box cryptography they all</font>

898
00:36:27,280 --> 00:36:31,960
were under the ransomware category

899
00:36:28,990 --> 00:36:33,609
itself<font color="#CCCCCC"> and they are trying to</font><font color="#E5E5E5"> implement</font>

900
00:36:31,960 --> 00:36:35,559
<font color="#E5E5E5">their own white box cryptography in many</font>

901
00:36:33,609 --> 00:36:37,480
different<font color="#E5E5E5"> ways which is making it</font><font color="#CCCCCC"> little</font>

902
00:36:35,559 --> 00:36:39,339
easier<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> to like understand what</font>

903
00:36:37,480 --> 00:36:42,809
they<font color="#E5E5E5"> are trying to do but I'm very sure</font>

904
00:36:39,339 --> 00:36:42,808
it will get sophisticated as we go along

905
00:36:50,010 --> 00:36:55,370
awesome<font color="#E5E5E5"> so that's all that I had thank</font>

906
00:36:52,860 --> 00:36:55,370
you all<font color="#E5E5E5"> for attending</font>

907
00:36:59,400 --> 00:37:08,479
[Music]

