1
00:00:04,300 --> 00:00:15,829
[Music]

2
00:00:17,330 --> 00:00:22,290
<font color="#E5E5E5">it's packed house thank you for joining</font>

3
00:00:19,980 --> 00:00:24,390
me<font color="#E5E5E5"> what I hope to accomplish in this</font>

4
00:00:22,290 --> 00:00:27,860
talk is<font color="#CCCCCC"> to</font><font color="#E5E5E5"> give you an appreciation of</font>

5
00:00:24,390 --> 00:00:30,990
TLS<font color="#E5E5E5"> 1.3 I'm gonna do that by</font><font color="#CCCCCC"> examining</font>

6
00:00:27,860 --> 00:00:33,600
<font color="#E5E5E5">the security and improvements</font><font color="#CCCCCC"> that it</font>

7
00:00:30,990 --> 00:00:36,300
gives over previous<font color="#CCCCCC"> versions of TLS and</font>

8
00:00:33,600 --> 00:00:38,850
kind of<font color="#E5E5E5"> the performance enhancing things</font>

9
00:00:36,300 --> 00:00:42,569
that it introduces<font color="#E5E5E5"> then but</font><font color="#CCCCCC"> then also</font>

10
00:00:38,850 --> 00:00:43,860
discuss<font color="#E5E5E5"> secure deployment of TLS 1.3 and</font>

11
00:00:42,570 --> 00:00:47,790
some things that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> might have to</font>

12
00:00:43,860 --> 00:00:50,190
consider<font color="#E5E5E5"> when you're</font><font color="#CCCCCC"> doing so so first</font>

13
00:00:47,790 --> 00:00:52,860
the boring stuff<font color="#CCCCCC"> I'm Alex</font><font color="#E5E5E5"> pallucci</font><font color="#CCCCCC"> I</font>

14
00:00:50,190 --> 00:00:54,900
work at<font color="#CCCCCC"> MTC group</font><font color="#E5E5E5"> we're a giant security</font>

15
00:00:52,860 --> 00:00:57,239
consulting firm we do pen testing

16
00:00:54,900 --> 00:00:59,910
<font color="#E5E5E5">hardware hacking</font><font color="#CCCCCC"> network penetration</font>

17
00:00:57,239 --> 00:01:04,349
<font color="#CCCCCC">tests</font><font color="#E5E5E5"> all across the board we also have</font>

18
00:00:59,910 --> 00:01:06,479
groups to do<font color="#E5E5E5"> compliance PCI</font><font color="#CCCCCC"> ISO sorts of</font>

19
00:01:04,349 --> 00:01:10,080
things<font color="#CCCCCC"> so you know</font><font color="#E5E5E5"> we're really involved</font>

20
00:01:06,479 --> 00:01:13,110
in the whole<font color="#E5E5E5"> security world</font><font color="#CCCCCC"> I myself am</font>

21
00:01:10,080 --> 00:01:16,259
part of our cryptid<font color="#E5E5E5"> services group where</font>

22
00:01:13,110 --> 00:01:18,060
I<font color="#CCCCCC"> focus mainly on</font><font color="#E5E5E5"> crypto things so</font>

23
00:01:16,259 --> 00:01:20,640
<font color="#E5E5E5">recently I've been reviewing a</font><font color="#CCCCCC"> lot of</font>

24
00:01:18,060 --> 00:01:23,220
blockchain implementations<font color="#E5E5E5"> smart</font>

25
00:01:20,640 --> 00:01:25,140
contracts secure messaging applications

26
00:01:23,220 --> 00:01:29,340
but we really<font color="#E5E5E5"> run the gambit of</font>

27
00:01:25,140 --> 00:01:32,280
different things<font color="#E5E5E5"> that we look at so</font>

28
00:01:29,340 --> 00:01:34,830
we've done high-level protocol reviews

29
00:01:32,280 --> 00:01:37,400
and low-level implementation details of

30
00:01:34,830 --> 00:01:42,570
cryptographic primitives

31
00:01:37,400 --> 00:01:46,260
who here is heard of crypto<font color="#E5E5E5"> pals have</font>

32
00:01:42,570 --> 00:01:47,759
you done crypto pals so this is how I

33
00:01:46,260 --> 00:01:49,740
learned crypto in the first place

34
00:01:47,760 --> 00:01:56,460
<font color="#E5E5E5">and it's these really fun sets of</font>

35
00:01:49,740 --> 00:01:58,619
challenges<font color="#E5E5E5"> thank you exactly it's</font><font color="#CCCCCC"> not</font>

36
00:01:56,460 --> 00:02:00,630
all this crazy math it's more like logic

37
00:01:58,619 --> 00:02:02,909
puzzles<font color="#E5E5E5"> and there are a lot of fun so I</font>

38
00:02:00,630 --> 00:02:06,408
implore<font color="#CCCCCC"> you to do them like I</font><font color="#E5E5E5"> said</font>

39
00:02:02,909 --> 00:02:11,250
that's how I really got<font color="#CCCCCC"> my interest and</font>

40
00:02:06,409 --> 00:02:13,890
knowledge<font color="#E5E5E5"> of crypto my email is here do</font>

41
00:02:11,250 --> 00:02:17,940
the problems<font color="#CCCCCC"> ask me</font><font color="#E5E5E5"> questions it's never</font>

42
00:02:13,890 --> 00:02:21,988
annoying<font color="#CCCCCC"> I'm always happy to answer</font><font color="#E5E5E5"> okay</font>

43
00:02:17,940 --> 00:02:25,140
so on the TLS<font color="#E5E5E5"> so I like</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> start by</font>

44
00:02:21,989 --> 00:02:27,209
<font color="#E5E5E5">discussing the security properties that</font>

45
00:02:25,140 --> 00:02:28,679
we<font color="#CCCCCC"> want in a secure transport protocol</font>

46
00:02:27,209 --> 00:02:30,240
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to do this from</font><font color="#CCCCCC"> Mike</font><font color="#E5E5E5"> literally</font>

47
00:02:28,680 --> 00:02:33,090
a<font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> it'll</font>

48
00:02:30,240 --> 00:02:33,660
give us a good base<font color="#E5E5E5"> of the rest of</font><font color="#CCCCCC"> the</font>

49
00:02:33,090 --> 00:02:38,250
<font color="#E5E5E5">discussion</font>

50
00:02:33,660 --> 00:02:40,200
<font color="#E5E5E5">so first we want confidentiality so I'm</font>

51
00:02:38,250 --> 00:02:42,330
the client<font color="#CCCCCC"> you're the server we should</font>

52
00:02:40,200 --> 00:02:45,209
be the only<font color="#E5E5E5"> people who can read the</font>

53
00:02:42,330 --> 00:02:47,880
messages<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> have to somehow encrypt</font>

54
00:02:45,210 --> 00:02:51,030
<font color="#E5E5E5">our messages so we</font><font color="#CCCCCC"> need some shared</font>

55
00:02:47,880 --> 00:02:52,970
secret between me and the server<font color="#CCCCCC"> so</font>

56
00:02:51,030 --> 00:02:55,080
we're<font color="#E5E5E5"> gonna have to do a key exchange</font>

57
00:02:52,970 --> 00:02:56,730
<font color="#E5E5E5">now we're gonna take</font><font color="#CCCCCC"> into the</font><font color="#E5E5E5"> handshake</font>

58
00:02:55,080 --> 00:02:58,590
later and talk<font color="#CCCCCC"> about what that</font><font color="#E5E5E5"> key</font>

59
00:02:56,730 --> 00:03:00,840
exchange<font color="#E5E5E5"> looks like but you know note</font>

60
00:02:58,590 --> 00:03:03,960
that we have to do that<font color="#CCCCCC"> and once we have</font>

61
00:03:00,840 --> 00:03:06,120
<font color="#E5E5E5">those keys we can use them to derive</font>

62
00:03:03,960 --> 00:03:09,420
<font color="#E5E5E5">more keys to encrypt application data</font>

63
00:03:06,120 --> 00:03:13,020
between<font color="#E5E5E5"> the client and the server next</font>

64
00:03:09,420 --> 00:03:13,859
<font color="#CCCCCC">we</font><font color="#E5E5E5"> want</font><font color="#CCCCCC"> Austin tissa t I need to know</font>

65
00:03:13,020 --> 00:03:16,440
who I'm<font color="#E5E5E5"> talking to</font>

66
00:03:13,860 --> 00:03:19,290
if I'm a user and I'm trying to<font color="#E5E5E5"> visit</font>

67
00:03:16,440 --> 00:03:21,750
<font color="#CCCCCC">bank comm I need to</font><font color="#E5E5E5"> be sure</font><font color="#CCCCCC"> that it's</font>

68
00:03:19,290 --> 00:03:24,150
<font color="#CCCCCC">bank calm and not actually some attacker</font>

69
00:03:21,750 --> 00:03:26,460
control domain<font color="#E5E5E5"> and you probably know how</font>

70
00:03:24,150 --> 00:03:28,500
we accomplish<font color="#E5E5E5"> this so we have</font><font color="#CCCCCC"> these</font>

71
00:03:26,460 --> 00:03:31,830
certificate authorities<font color="#E5E5E5"> they're gonna</font>

72
00:03:28,500 --> 00:03:34,710
verify<font color="#E5E5E5"> that bank actually</font><font color="#CCCCCC"> owns bank comm</font>

73
00:03:31,830 --> 00:03:37,020
and<font color="#E5E5E5"> issue them a certificate so then</font>

74
00:03:34,710 --> 00:03:39,330
when<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> the client</font><font color="#CCCCCC"> I visit Bank calm</font>

75
00:03:37,020 --> 00:03:41,910
<font color="#E5E5E5">they provide me with their certificate</font><font color="#CCCCCC"> I</font>

76
00:03:39,330 --> 00:03:42,690
can check<font color="#E5E5E5"> the signature against the CAS</font>

77
00:03:41,910 --> 00:03:45,960
public key

78
00:03:42,690 --> 00:03:48,570
the<font color="#E5E5E5"> CAS public key lives in my browser</font>

79
00:03:45,960 --> 00:03:53,430
<font color="#E5E5E5">or</font><font color="#CCCCCC"> in my</font><font color="#E5E5E5"> operating</font><font color="#CCCCCC"> system and</font><font color="#E5E5E5"> therefore</font>

80
00:03:48,570 --> 00:03:56,340
we can achieve<font color="#E5E5E5"> authenticity right we</font>

81
00:03:53,430 --> 00:03:58,590
also want integrity<font color="#E5E5E5"> we need to make</font><font color="#CCCCCC"> sure</font>

82
00:03:56,340 --> 00:04:00,390
<font color="#E5E5E5">that an attacker could not modify and</font>

83
00:03:58,590 --> 00:04:03,120
either the data<font color="#E5E5E5"> that we send back and</font>

84
00:04:00,390 --> 00:04:06,510
forth so there's two<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> that we can do</font>

85
00:04:03,120 --> 00:04:08,970
this<font color="#E5E5E5"> we could have an H Mac so we might</font>

86
00:04:06,510 --> 00:04:12,299
encrypt<font color="#E5E5E5"> our data and then apply an H Mac</font>

87
00:04:08,970 --> 00:04:14,940
after<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to provide integrity so then</font>

88
00:04:12,300 --> 00:04:17,820
when the server receives<font color="#CCCCCC"> my message</font><font color="#E5E5E5"> they</font>

89
00:04:14,940 --> 00:04:20,370
<font color="#E5E5E5">can perform the same H Mac check the</font>

90
00:04:17,820 --> 00:04:23,159
tokens<font color="#E5E5E5"> and then you know see if it's</font>

91
00:04:20,370 --> 00:04:28,200
been modified<font color="#E5E5E5"> or</font><font color="#CCCCCC"> not we also have</font><font color="#E5E5E5"> these</font>

92
00:04:23,160 --> 00:04:30,330
new<font color="#CCCCCC"> IAD modes that encrypt while</font>

93
00:04:28,200 --> 00:04:32,520
providing integrity so it's just one

94
00:04:30,330 --> 00:04:37,680
operation<font color="#CCCCCC"> you get confidentiality and</font>

95
00:04:32,520 --> 00:04:41,909
integrity<font color="#E5E5E5"> at the same time cool we also</font>

96
00:04:37,680 --> 00:04:44,190
want forward secrecy<font color="#E5E5E5"> so if the</font><font color="#CCCCCC"> server's</font>

97
00:04:41,910 --> 00:04:46,470
key is compromised at this point

98
00:04:44,190 --> 00:04:50,630
time<font color="#E5E5E5"> my previous sessions with that</font>

99
00:04:46,470 --> 00:04:50,630
server should<font color="#CCCCCC"> not be compromised</font>

100
00:04:50,720 --> 00:04:56,190
<font color="#E5E5E5">okay so those</font><font color="#CCCCCC"> are the security</font>

101
00:04:53,580 --> 00:04:58,370
<font color="#E5E5E5">properties that we want now we're gonna</font>

102
00:04:56,190 --> 00:05:01,230
go on<font color="#CCCCCC"> a journey</font><font color="#E5E5E5"> that the working group</font>

103
00:04:58,370 --> 00:05:04,470
performed when they started drafting TLS

104
00:05:01,230 --> 00:05:07,230
1.3 and they they looked at previous

105
00:05:04,470 --> 00:05:12,590
versions of TLS and said where did<font color="#E5E5E5"> these</font>

106
00:05:07,230 --> 00:05:16,560
properties fail and why how do we fix it

107
00:05:12,590 --> 00:05:18,500
so one of the big<font color="#E5E5E5"> sources of failure are</font>

108
00:05:16,560 --> 00:05:23,220
the cipher suite choices

109
00:05:18,500 --> 00:05:26,280
there's 229<font color="#E5E5E5"> cipher suite choices defined</font>

110
00:05:23,220 --> 00:05:28,440
in all previous versions<font color="#CCCCCC"> of TLS</font><font color="#E5E5E5"> I tried</font>

111
00:05:26,280 --> 00:05:30,479
to<font color="#E5E5E5"> make this a dramatic slide and have</font>

112
00:05:28,440 --> 00:05:32,820
like a typewriter<font color="#E5E5E5"> of fact and you know</font>

113
00:05:30,480 --> 00:05:36,390
explosions but it crashed<font color="#CCCCCC"> key note when</font>

114
00:05:32,820 --> 00:05:40,080
I did that<font color="#CCCCCC"> okay so not</font><font color="#E5E5E5"> always a great</font>

115
00:05:36,390 --> 00:05:43,950
choice is TLS 1.2 itself defines 37 of

116
00:05:40,080 --> 00:05:47,000
these with a few edit ones but with the

117
00:05:43,950 --> 00:05:50,940
ask ourselves or all these cipher<font color="#CCCCCC"> suites</font>

118
00:05:47,000 --> 00:05:53,700
you know the same strength well let's

119
00:05:50,940 --> 00:05:57,570
take a look so this<font color="#E5E5E5"> first one were</font>

120
00:05:53,700 --> 00:05:59,940
performing TLS<font color="#E5E5E5"> with RSA as a key</font>

121
00:05:57,570 --> 00:06:03,690
exchange how does the RSA key exchange

122
00:05:59,940 --> 00:06:06,540
work<font color="#E5E5E5"> well I as the client I generates</font>

123
00:06:03,690 --> 00:06:08,730
<font color="#E5E5E5">this master secret the master secret is</font>

124
00:06:06,540 --> 00:06:11,820
going to be what we use<font color="#E5E5E5"> to encrypt the</font>

125
00:06:08,730 --> 00:06:14,520
application<font color="#E5E5E5"> data back</font><font color="#CCCCCC"> and forth in RSA</font>

126
00:06:11,820 --> 00:06:17,550
key exchange<font color="#CCCCCC"> I have the</font><font color="#E5E5E5"> servers or</font><font color="#CCCCCC"> s a</font>

127
00:06:14,520 --> 00:06:20,609
public key<font color="#E5E5E5"> I encrypt that master secret</font>

128
00:06:17,550 --> 00:06:23,910
to that<font color="#E5E5E5"> and send it to the server</font><font color="#CCCCCC"> okay</font>

129
00:06:20,610 --> 00:06:25,940
but does this have forward secrecy so my

130
00:06:23,910 --> 00:06:28,500
first session<font color="#CCCCCC"> I generate a secret</font>

131
00:06:25,940 --> 00:06:31,169
<font color="#CCCCCC">encrypted to the RSA public key</font><font color="#E5E5E5"> give it</font>

132
00:06:28,500 --> 00:06:33,930
to the server<font color="#E5E5E5"> next</font><font color="#CCCCCC"> session a new secret</font>

133
00:06:31,169 --> 00:06:36,479
but encrypt it to the same<font color="#E5E5E5"> RSA public</font>

134
00:06:33,930 --> 00:06:38,750
key<font color="#E5E5E5"> and so on and so on</font><font color="#CCCCCC"> so if an</font>

135
00:06:36,480 --> 00:06:40,919
attacker reveals the private key

136
00:06:38,750 --> 00:06:44,280
corresponding<font color="#CCCCCC"> to that RSA public key</font>

137
00:06:40,919 --> 00:06:47,969
<font color="#E5E5E5">they can decrypt those past sessions so</font>

138
00:06:44,280 --> 00:06:51,510
I don't like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> okay</font>

139
00:06:47,970 --> 00:06:55,320
<font color="#E5E5E5">so tell us RSA is</font><font color="#CCCCCC"> a key exchange with</font>

140
00:06:51,510 --> 00:06:58,050
<font color="#CCCCCC">rc4</font><font color="#E5E5E5"> as the encryption</font><font color="#CCCCCC"> algorithm what's</font>

141
00:06:55,320 --> 00:07:00,990
<font color="#CCCCCC">RC for</font><font color="#E5E5E5"> it's a stream cipher</font>

142
00:06:58,050 --> 00:07:03,930
<font color="#E5E5E5">how does it</font><font color="#CCCCCC"> work we</font><font color="#E5E5E5"> we key it with that</font>

143
00:07:00,990 --> 00:07:06,150
master secret<font color="#E5E5E5"> and we ask it to spit out</font>

144
00:07:03,930 --> 00:07:08,159
<font color="#CCCCCC">bites it's basically a random</font><font color="#E5E5E5"> number</font>

145
00:07:06,150 --> 00:07:09,419
<font color="#E5E5E5">generator</font><font color="#CCCCCC"> so it's gonna spit out these</font>

146
00:07:08,159 --> 00:07:12,479
<font color="#CCCCCC">bites that we're gonna call the</font>

147
00:07:09,419 --> 00:07:15,000
keystream<font color="#E5E5E5"> and we XOR that with our</font>

148
00:07:12,479 --> 00:07:17,750
<font color="#E5E5E5">plaintext</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we get our ciphertext back</font>

149
00:07:15,000 --> 00:07:21,509
up<font color="#E5E5E5"> that's how the stream cipher works</font>

150
00:07:17,750 --> 00:07:24,210
<font color="#E5E5E5">the problem is it's</font><font color="#CCCCCC"> been shown that rc4</font>

151
00:07:21,509 --> 00:07:26,310
has these biases in the key<font color="#E5E5E5"> stream so</font>

152
00:07:24,210 --> 00:07:29,430
for instance the first<font color="#E5E5E5"> byte</font><font color="#CCCCCC"> that comes</font>

153
00:07:26,310 --> 00:07:32,129
out<font color="#CCCCCC"> of your RFC for key stream has a 1</font>

154
00:07:29,430 --> 00:07:35,849
in I think it's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 1/2 chance of being</font><font color="#E5E5E5"> a</font>

155
00:07:32,129 --> 00:07:39,629
no bite<font color="#E5E5E5"> you expect</font><font color="#CCCCCC"> that to be a one</font><font color="#E5E5E5"> over</font>

156
00:07:35,849 --> 00:07:42,659
256 chance<font color="#E5E5E5"> right that's a pretty huge</font>

157
00:07:39,629 --> 00:07:45,419
bias so an attacker could use those

158
00:07:42,659 --> 00:07:49,110
biases to their<font color="#CCCCCC"> advantage</font><font color="#E5E5E5"> and glean</font>

159
00:07:45,419 --> 00:07:52,650
information about the plaintext<font color="#E5E5E5"> breaking</font>

160
00:07:49,110 --> 00:07:56,400
our confidentiality<font color="#CCCCCC"> security assumption</font>

161
00:07:52,650 --> 00:07:58,080
that we want<font color="#E5E5E5"> so I don't like</font><font color="#CCCCCC"> RFC for</font><font color="#E5E5E5"> it</font>

162
00:07:56,400 --> 00:08:00,539
finally<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> we know that</font><font color="#E5E5E5"> md5 is</font>

163
00:07:58,080 --> 00:08:02,099
<font color="#E5E5E5">vulnerable</font><font color="#CCCCCC"> to hash collisions but</font><font color="#E5E5E5"> it's</font>

164
00:08:00,539 --> 00:08:05,729
<font color="#CCCCCC">also vulnerable</font><font color="#E5E5E5"> to these sloth attacks</font>

165
00:08:02,099 --> 00:08:07,789
<font color="#E5E5E5">in the TLS context that that provide an</font>

166
00:08:05,729 --> 00:08:10,770
<font color="#CCCCCC">avenue for</font><font color="#E5E5E5"> an attacker to perhaps</font>

167
00:08:07,789 --> 00:08:14,068
<font color="#CCCCCC">impersonate a server</font><font color="#E5E5E5"> breaking</font>

168
00:08:10,770 --> 00:08:19,020
authenticity<font color="#E5E5E5"> so I don't like this cipher</font>

169
00:08:14,069 --> 00:08:20,610
Sweden<font color="#E5E5E5"> next one TLS using diffie-hellman</font>

170
00:08:19,020 --> 00:08:22,849
<font color="#CCCCCC">as a key exchange</font>

171
00:08:20,610 --> 00:08:25,889
well how<font color="#E5E5E5"> does if you Hellman work and</font>

172
00:08:22,849 --> 00:08:27,810
each<font color="#CCCCCC"> session</font><font color="#E5E5E5"> both the client and server</font>

173
00:08:25,889 --> 00:08:31,620
are<font color="#E5E5E5"> going to generate a diffie-hellman</font>

174
00:08:27,810 --> 00:08:34,620
private key<font color="#CCCCCC"> and public key now</font><font color="#E5E5E5"> I as a</font>

175
00:08:31,620 --> 00:08:36,870
client<font color="#E5E5E5"> supply the server with my public</font>

176
00:08:34,620 --> 00:08:39,149
key<font color="#E5E5E5"> the server gives me their public key</font>

177
00:08:36,870 --> 00:08:42,630
we can<font color="#CCCCCC"> do the diffie-hellman operation</font>

178
00:08:39,149 --> 00:08:45,890
and agree on a shared secret<font color="#E5E5E5"> it's</font>

179
00:08:42,630 --> 00:08:47,130
<font color="#E5E5E5">awesome but in this case it's difficult</font>

180
00:08:45,890 --> 00:08:50,310
as

181
00:08:47,130 --> 00:08:52,230
that means the server is<font color="#E5E5E5"> not providing</font>

182
00:08:50,310 --> 00:08:55,439
any authenticity of the diffie-hellman

183
00:08:52,230 --> 00:08:59,610
public key it gives to<font color="#CCCCCC"> the client which</font>

184
00:08:55,440 --> 00:09:01,199
<font color="#E5E5E5">opens up the avenue of the the basic</font>

185
00:08:59,610 --> 00:09:03,149
<font color="#CCCCCC">diffie-hellman man-in-the-middle attack</font>

186
00:09:01,199 --> 00:09:05,449
an attacker could substitute the

187
00:09:03,149 --> 00:09:07,199
server's public key<font color="#E5E5E5"> with their own and</font>

188
00:09:05,449 --> 00:09:11,319
<font color="#CCCCCC">man-in-the-middle of connection</font>

189
00:09:07,199 --> 00:09:12,609
I think that's set<font color="#E5E5E5"> 5 problem</font><font color="#CCCCCC"> 1</font>

190
00:09:11,320 --> 00:09:16,260
you want to investigate how that

191
00:09:12,610 --> 00:09:19,020
actually works<font color="#CCCCCC"> so I don't like</font><font color="#E5E5E5"> that</font>

192
00:09:16,260 --> 00:09:22,740
okay our cipher suite<font color="#E5E5E5"> choices AES 128</font>

193
00:09:19,020 --> 00:09:27,069
<font color="#E5E5E5">perfect but it's operating in CBC mode</font>

194
00:09:22,740 --> 00:09:30,730
now<font color="#E5E5E5"> CBC mode is a perfectly fine mode to</font>

195
00:09:27,070 --> 00:09:33,370
<font color="#CCCCCC">use</font><font color="#E5E5E5"> if you're using it correctly which</font>

196
00:09:30,730 --> 00:09:37,210
previous versions of<font color="#CCCCCC"> TLS did not giving</font>

197
00:09:33,370 --> 00:09:40,720
rise to the<font color="#CCCCCC"> beast attack</font><font color="#E5E5E5"> or lucky 13 so</font>

198
00:09:37,210 --> 00:09:43,750
I don't particularly<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> and then</font>

199
00:09:40,720 --> 00:09:46,240
shot 256<font color="#E5E5E5"> as our hash function more or</font>

200
00:09:43,750 --> 00:09:49,840
less<font color="#E5E5E5"> it's the same choice but overall</font>

201
00:09:46,240 --> 00:09:52,860
that's<font color="#E5E5E5"> a pretty poor choice of cipher</font>

202
00:09:49,840 --> 00:09:55,900
suite<font color="#E5E5E5"> this last one we're using</font>

203
00:09:52,860 --> 00:09:57,670
<font color="#E5E5E5">diffie-hellman</font><font color="#CCCCCC"> and this time</font><font color="#E5E5E5"> the</font>

204
00:09:55,900 --> 00:10:01,270
server's contribution the server's

205
00:09:57,670 --> 00:10:04,300
public key is signed with RSA<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> no</font>

206
00:10:01,270 --> 00:10:08,350
authenticity failures here we're using<font color="#E5E5E5"> a</font>

207
00:10:04,300 --> 00:10:11,319
s in GCM mode GCM<font color="#E5E5E5"> is one of these cool</font>

208
00:10:08,350 --> 00:10:12,610
<font color="#E5E5E5">aad modes that encrypts and supplies</font>

209
00:10:11,320 --> 00:10:17,910
integrity at the<font color="#E5E5E5"> same time</font>

210
00:10:12,610 --> 00:10:22,300
great shot 256<font color="#E5E5E5"> as the hash function</font><font color="#CCCCCC"> okay</font>

211
00:10:17,910 --> 00:10:26,530
seems<font color="#E5E5E5"> reasonable we have to look at GCM</font>

212
00:10:22,300 --> 00:10:28,689
mode so GCM mode is basically<font color="#E5E5E5"> CTR mode</font>

213
00:10:26,530 --> 00:10:32,260
counter mode<font color="#E5E5E5"> with some authentication</font>

214
00:10:28,690 --> 00:10:35,830
<font color="#E5E5E5">magic this counter mode is similar to</font>

215
00:10:32,260 --> 00:10:38,050
how rc4 works<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you key a yes with your</font>

216
00:10:35,830 --> 00:10:42,640
shared secret<font color="#E5E5E5"> and then you encrypt a</font>

217
00:10:38,050 --> 00:10:44,589
nonce<font color="#E5E5E5"> a number you</font><font color="#CCCCCC"> just use once from</font>

218
00:10:42,640 --> 00:10:46,960
that you get your key stream which you

219
00:10:44,590 --> 00:10:49,990
<font color="#E5E5E5">acts or with your plaintext giving you</font>

220
00:10:46,960 --> 00:10:53,080
the<font color="#E5E5E5"> ciphertext now if my plaintext is</font>

221
00:10:49,990 --> 00:10:55,030
you know this long<font color="#CCCCCC"> I encrypt the nonce</font><font color="#E5E5E5"> I</font>

222
00:10:53,080 --> 00:10:57,160
encrypt it<font color="#CCCCCC"> nons</font><font color="#E5E5E5"> plus</font><font color="#CCCCCC"> 1 I encrypt</font>

223
00:10:55,030 --> 00:10:59,829
anoxmous plus 2 so on and so on<font color="#E5E5E5"> and so</font>

224
00:10:57,160 --> 00:11:03,959
on until I have<font color="#E5E5E5"> enough key stream to</font>

225
00:10:59,830 --> 00:11:07,750
<font color="#CCCCCC">acts worth</font><font color="#E5E5E5"> my whole plaintext</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> but</font>

226
00:11:03,960 --> 00:11:12,790
what happens in CTR mode if we repeat a

227
00:11:07,750 --> 00:11:14,560
nonce<font color="#E5E5E5"> well I have you encrypt</font><font color="#CCCCCC"> a nonce I</font>

228
00:11:12,790 --> 00:11:17,680
get the key stream<font color="#CCCCCC"> acts</font><font color="#E5E5E5"> or with my first</font>

229
00:11:14,560 --> 00:11:19,630
<font color="#CCCCCC">plain tax</font><font color="#E5E5E5"> get my first ciphertext when I</font>

230
00:11:17,680 --> 00:11:22,239
want to encrypt another piece<font color="#CCCCCC"> of plain</font>

231
00:11:19,630 --> 00:11:25,000
sex I have the same key stream<font color="#E5E5E5"> axe sword</font>

232
00:11:22,240 --> 00:11:26,170
with a different plaintext giving me a

233
00:11:25,000 --> 00:11:28,300
<font color="#CCCCCC">different size</font>

234
00:11:26,170 --> 00:11:32,530
but the key streams in both cases are

235
00:11:28,300 --> 00:11:34,780
the<font color="#CCCCCC"> same giving rise to this little</font>

236
00:11:32,530 --> 00:11:36,640
<font color="#CCCCCC">equation that we can you</font><font color="#E5E5E5"> know maybe</font>

237
00:11:34,780 --> 00:11:39,250
glean some information<font color="#CCCCCC"> on so since the</font>

238
00:11:36,640 --> 00:11:41,740
key<font color="#CCCCCC"> streams are</font><font color="#E5E5E5"> the same I have the two</font>

239
00:11:39,250 --> 00:11:44,740
plaintext<font color="#CCCCCC"> X work together</font><font color="#E5E5E5"> equals the two</font>

240
00:11:41,740 --> 00:11:47,170
cipher<font color="#E5E5E5"> texts X work together now the</font>

241
00:11:44,740 --> 00:11:50,140
<font color="#E5E5E5">cipher tax is presumably public and if</font>

242
00:11:47,170 --> 00:11:52,240
an attacker<font color="#E5E5E5"> knows any parts of plain sex</font>

243
00:11:50,140 --> 00:11:55,420
<font color="#E5E5E5">one they can figure out information</font>

244
00:11:52,240 --> 00:11:58,060
about<font color="#CCCCCC"> plaintext</font><font color="#E5E5E5"> to a loss of</font>

245
00:11:55,420 --> 00:12:01,240
confidentiality<font color="#E5E5E5"> so we don't like</font>

246
00:11:58,060 --> 00:12:03,699
repeating<font color="#CCCCCC"> ounces but in GCM mode</font><font color="#E5E5E5"> it's</font>

247
00:12:01,240 --> 00:12:05,680
worse<font color="#E5E5E5"> so since it's basically CTR mode</font>

248
00:12:03,700 --> 00:12:09,130
we have<font color="#E5E5E5"> the same relation loss of</font>

249
00:12:05,680 --> 00:12:12,219
confidentiality<font color="#E5E5E5"> but it also leaks the</font>

250
00:12:09,130 --> 00:12:14,260
authentication key which that goes into

251
00:12:12,220 --> 00:12:17,830
the authentication magic which gives you

252
00:12:14,260 --> 00:12:21,310
integrity so you've lost integrity this

253
00:12:17,830 --> 00:12:23,080
<font color="#E5E5E5">gives rise to I think the best</font><font color="#CCCCCC"> demo that</font>

254
00:12:21,310 --> 00:12:28,510
I've seen presented at blackhat a former

255
00:12:23,080 --> 00:12:30,850
colleague they mi fives<font color="#E5E5E5"> some mi5 website</font>

256
00:12:28,510 --> 00:12:34,060
<font color="#E5E5E5">had an issue where they were using GCM</font>

257
00:12:30,850 --> 00:12:36,220
<font color="#E5E5E5">and they were repeating</font><font color="#CCCCCC"> ounces</font><font color="#E5E5E5"> so he was</font>

258
00:12:34,060 --> 00:12:39,339
<font color="#E5E5E5">able to modify that</font><font color="#CCCCCC"> server's response</font>

259
00:12:36,220 --> 00:12:43,839
<font color="#E5E5E5">and inject his slides into</font><font color="#CCCCCC"> mi</font><font color="#E5E5E5"> fives</font>

260
00:12:39,339 --> 00:12:46,510
<font color="#CCCCCC">website and the issue here</font><font color="#E5E5E5"> really is</font>

261
00:12:43,839 --> 00:12:49,120
like do we actually repeat nonces<font color="#E5E5E5"> well</font>

262
00:12:46,510 --> 00:12:51,460
in previous versions of TLS 1.2<font color="#E5E5E5"> they</font>

263
00:12:49,120 --> 00:12:53,620
recommend it you did a certain operation

264
00:12:51,460 --> 00:12:56,110
<font color="#E5E5E5">where you wouldn't repeat a nonce but it</font>

265
00:12:53,620 --> 00:12:58,540
was<font color="#E5E5E5"> really up</font><font color="#CCCCCC"> to the implementation</font>

266
00:12:56,110 --> 00:13:01,420
<font color="#E5E5E5">itself to the site what it wants to do</font>

267
00:12:58,540 --> 00:13:04,300
<font color="#E5E5E5">and some of them said oh we're</font><font color="#CCCCCC"> just</font>

268
00:13:01,420 --> 00:13:06,640
<font color="#CCCCCC">gonna use random nonces and they turned</font>

269
00:13:04,300 --> 00:13:10,569
<font color="#E5E5E5">out to be not so random leading to this</font>

270
00:13:06,640 --> 00:13:13,510
issue<font color="#E5E5E5"> so one big win of TLS 1.3 is they</font>

271
00:13:10,570 --> 00:13:16,390
use explicitly derived<font color="#CCCCCC"> nan</font><font color="#E5E5E5"> says it's</font>

272
00:13:13,510 --> 00:13:18,430
this fixed nonce<font color="#E5E5E5"> ex-ored with the</font>

273
00:13:16,390 --> 00:13:20,710
sequence number the sequence number<font color="#E5E5E5"> just</font>

274
00:13:18,430 --> 00:13:24,069
being how many TLS messages have we sent

275
00:13:20,710 --> 00:13:26,800
back and<font color="#CCCCCC"> forth so we</font><font color="#E5E5E5"> don't run</font><font color="#CCCCCC"> into any</font>

276
00:13:24,070 --> 00:13:31,630
of<font color="#E5E5E5"> these issues that</font><font color="#CCCCCC"> affect GCL</font><font color="#E5E5E5"> that's</font>

277
00:13:26,800 --> 00:13:34,870
one nice way<font color="#CCCCCC"> so I hopped on the</font><font color="#E5E5E5"> cipher</font>

278
00:13:31,630 --> 00:13:35,580
Suites<font color="#CCCCCC"> a lot and there's a</font><font color="#E5E5E5"> lot of bad</font>

279
00:13:34,870 --> 00:13:37,990
<font color="#E5E5E5">ones</font>

280
00:13:35,580 --> 00:13:39,310
how many cyber suites do we think<font color="#E5E5E5"> that</font>

281
00:13:37,990 --> 00:13:48,810
TLS 1.3

282
00:13:39,310 --> 00:13:48,810
provides or has<font color="#CCCCCC"> in its specification 37</font>

283
00:13:49,529 --> 00:13:57,939
<font color="#CCCCCC">5:5 sane choices so</font><font color="#E5E5E5"> four of them are</font>

284
00:13:54,279 --> 00:14:00,670
using AES in GCM or CCM mode

285
00:13:57,940 --> 00:14:04,540
they're both aad modes<font color="#E5E5E5"> and then we have</font>

286
00:14:00,670 --> 00:14:07,959
this<font color="#E5E5E5"> ChaCha 21 using poly</font><font color="#CCCCCC"> 1305 as the</font>

287
00:14:04,540 --> 00:14:10,209
authentication<font color="#E5E5E5"> magic this is great we're</font>

288
00:14:07,960 --> 00:14:11,500
using<font color="#E5E5E5"> sane secure ciphers there's no</font>

289
00:14:10,210 --> 00:14:13,870
more<font color="#CCCCCC"> Triple DES there's no more des</font>

290
00:14:11,500 --> 00:14:17,200
there's no<font color="#CCCCCC"> ghost or whatever the other</font>

291
00:14:13,870 --> 00:14:19,480
<font color="#E5E5E5">ones are they're all aad modes providing</font>

292
00:14:17,200 --> 00:14:21,550
integrity and encryption so we don't

293
00:14:19,480 --> 00:14:23,680
<font color="#E5E5E5">have to worry about encrypting and then</font>

294
00:14:21,550 --> 00:14:26,709
macking or marketing and encrypting or

295
00:14:23,680 --> 00:14:29,469
you know those complicated<font color="#E5E5E5"> schemes AES</font>

296
00:14:26,710 --> 00:14:31,960
is great<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> hardware support for it</font>

297
00:14:29,470 --> 00:14:34,210
it's blazingly fast<font color="#CCCCCC"> and if we</font><font color="#E5E5E5"> don't we</font>

298
00:14:31,960 --> 00:14:39,910
have<font color="#CCCCCC"> cha-cha xx which was designed to be</font>

299
00:14:34,210 --> 00:14:42,730
<font color="#E5E5E5">fast in software</font><font color="#CCCCCC"> that says one huge</font>

300
00:14:39,910 --> 00:14:47,319
improvement compared<font color="#CCCCCC"> to previous</font>

301
00:14:42,730 --> 00:14:49,390
<font color="#CCCCCC">versions of TLS so I'm gonna</font><font color="#E5E5E5"> kind of sum</font>

302
00:14:47,320 --> 00:14:52,810
<font color="#CCCCCC">up some</font><font color="#E5E5E5"> of these main things in this</font>

303
00:14:49,390 --> 00:15:02,290
chart<font color="#E5E5E5"> so in our previous versions we had</font>

304
00:14:52,810 --> 00:15:09,219
weak ciphers<font color="#CCCCCC"> your question was that</font>

305
00:15:02,290 --> 00:15:12,219
Jesus yeah so the<font color="#CCCCCC"> question is is GCM a</font>

306
00:15:09,220 --> 00:15:14,980
liability<font color="#E5E5E5"> with repeated</font><font color="#CCCCCC"> nonces in this</font>

307
00:15:12,220 --> 00:15:17,620
case no because<font color="#CCCCCC"> we have them</font><font color="#E5E5E5"> explicitly</font>

308
00:15:14,980 --> 00:15:19,839
defined<font color="#E5E5E5"> you have to do this if you don't</font>

309
00:15:17,620 --> 00:15:22,570
do this you will not be able<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> to</font>

310
00:15:19,839 --> 00:15:27,760
a client<font color="#CCCCCC"> or a server who's implementing</font>

311
00:15:22,570 --> 00:15:30,280
<font color="#E5E5E5">TLS by the specification so summing up</font>

312
00:15:27,760 --> 00:15:32,110
we had these weak ciphers these weak

313
00:15:30,280 --> 00:15:33,400
Mo's these weak hashes<font color="#CCCCCC"> that led to a</font>

314
00:15:32,110 --> 00:15:35,380
variety of attacks

315
00:15:33,400 --> 00:15:38,050
<font color="#CCCCCC">they're cool attacks but their attacks</font>

316
00:15:35,380 --> 00:15:41,380
<font color="#CCCCCC">beasts poodle lucky</font><font color="#E5E5E5"> 13 sloths we 32 rc4</font>

317
00:15:38,050 --> 00:15:43,750
<font color="#E5E5E5">no more and we've we fixed all those but</font>

318
00:15:41,380 --> 00:15:46,959
<font color="#E5E5E5">basically removing all</font><font color="#CCCCCC"> that crap</font><font color="#E5E5E5"> we have</font>

319
00:15:43,750 --> 00:15:51,120
<font color="#E5E5E5">five</font><font color="#CCCCCC"> same choices now</font><font color="#E5E5E5"> aad modes same</font>

320
00:15:46,959 --> 00:15:53,109
ciphers limited choice it's great

321
00:15:51,120 --> 00:15:56,410
one question<font color="#CCCCCC"> though</font><font color="#E5E5E5"> is</font>

322
00:15:53,110 --> 00:15:59,410
where are the key exchange modes before

323
00:15:56,410 --> 00:16:04,829
we label them<font color="#E5E5E5"> as TLS key exchange mode</font>

324
00:15:59,410 --> 00:16:09,990
cipher<font color="#CCCCCC"> suites</font><font color="#E5E5E5"> hash now it's just the</font>

325
00:16:04,830 --> 00:16:13,000
encryption algorithm<font color="#E5E5E5"> ad</font><font color="#CCCCCC"> hash well again</font>

326
00:16:09,990 --> 00:16:15,700
what key exchange modes<font color="#CCCCCC"> do we see we're</font>

327
00:16:13,000 --> 00:16:18,400
used before<font color="#CCCCCC"> we have RSA we don't like it</font>

328
00:16:15,700 --> 00:16:21,580
for lack<font color="#CCCCCC"> of forward secrecy</font><font color="#E5E5E5"> anonymous to</font>

329
00:16:18,400 --> 00:16:23,620
be<font color="#E5E5E5"> Hellman no authenticity so we're</font>

330
00:16:21,580 --> 00:16:26,260
removing that they're insecure<font color="#CCCCCC"> we're</font>

331
00:16:23,620 --> 00:16:29,440
left with diffie-hellman<font color="#E5E5E5"> and elliptic</font>

332
00:16:26,260 --> 00:16:31,060
curve diffie-hellman<font color="#E5E5E5"> again say our key</font>

333
00:16:29,440 --> 00:16:36,060
<font color="#CCCCCC">exchange modes than</font><font color="#E5E5E5"> her forward secrecy</font>

334
00:16:31,060 --> 00:16:36,060
<font color="#CCCCCC">were provide for it secrecy</font><font color="#E5E5E5"> all the time</font>

335
00:16:40,710 --> 00:16:48,490
well becoming important later<font color="#E5E5E5"> is there's</font>

336
00:16:44,890 --> 00:16:50,890
a particularly curve<font color="#CCCCCC"> NIST</font><font color="#E5E5E5"> P 256 that</font>

337
00:16:48,490 --> 00:16:53,280
most implementations<font color="#E5E5E5"> will probably</font>

338
00:16:50,890 --> 00:16:57,160
support<font color="#CCCCCC"> so keep</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> in mind</font>

339
00:16:53,280 --> 00:17:00,040
so there was some improvements security

340
00:16:57,160 --> 00:17:02,620
wise that TLS 1.3 provides compared to

341
00:17:00,040 --> 00:17:05,409
<font color="#E5E5E5">past versions now I want to get into</font>

342
00:17:02,620 --> 00:17:07,930
<font color="#CCCCCC">some</font><font color="#E5E5E5"> performance enhancing improvements</font>

343
00:17:05,410 --> 00:17:12,070
that<font color="#E5E5E5"> it does and they do so I want to</font>

344
00:17:07,930 --> 00:17:14,740
start with the TLS 1.2 handshake<font color="#CCCCCC"> so</font>

345
00:17:12,069 --> 00:17:16,659
we're<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> doing a difficult and</font>

346
00:17:14,740 --> 00:17:18,699
<font color="#E5E5E5">shake and on the right</font><font color="#CCCCCC"> side I'm gonna</font>

347
00:17:16,660 --> 00:17:20,650
discuss the key schedule<font color="#E5E5E5"> what things</font>

348
00:17:18,699 --> 00:17:23,650
aren't encrypted<font color="#E5E5E5"> and what keys they're</font>

349
00:17:20,650 --> 00:17:24,940
encrypted with in the in the left side

350
00:17:23,650 --> 00:17:26,560
I'm gonna<font color="#E5E5E5"> have the messages that the</font>

351
00:17:24,940 --> 00:17:28,480
client and server send back and forth

352
00:17:26,560 --> 00:17:31,120
together<font color="#E5E5E5"> so this is the handshaking</font>

353
00:17:28,480 --> 00:17:33,700
phase that's bootstrapping the rest of

354
00:17:31,120 --> 00:17:37,449
our session<font color="#E5E5E5"> the idea is to authenticate</font>

355
00:17:33,700 --> 00:17:40,930
the<font color="#E5E5E5"> server and create a shared secret so</font>

356
00:17:37,450 --> 00:17:45,550
<font color="#E5E5E5">we can encrypt application data so in</font>

357
00:17:40,930 --> 00:17:48,820
TLS 1.2<font color="#E5E5E5"> the client says hello these are</font>

358
00:17:45,550 --> 00:17:50,230
the cipher suites that<font color="#E5E5E5"> I support the</font>

359
00:17:48,820 --> 00:17:52,120
server is going to pick a particular

360
00:17:50,230 --> 00:17:53,500
<font color="#E5E5E5">cipher suite in this case I've chosen</font>

361
00:17:52,120 --> 00:17:56,409
<font color="#CCCCCC">diffie-hellman</font>

362
00:17:53,500 --> 00:18:00,250
so the server responds<font color="#CCCCCC"> with hello</font>

363
00:17:56,410 --> 00:18:03,280
<font color="#E5E5E5">it's server certificate a signature over</font>

364
00:18:00,250 --> 00:18:05,680
<font color="#E5E5E5">its diffie-hellman public key and the</font>

365
00:18:03,280 --> 00:18:08,020
diffie-hellman public key

366
00:18:05,680 --> 00:18:09,760
now<font color="#E5E5E5"> client is going to receive this it's</font>

367
00:18:08,020 --> 00:18:11,260
going<font color="#CCCCCC"> to check the signature</font><font color="#E5E5E5"> on the</font>

368
00:18:09,760 --> 00:18:13,930
<font color="#E5E5E5">server certificate against</font><font color="#CCCCCC"> its ca</font>

369
00:18:11,260 --> 00:18:15,790
<font color="#CCCCCC">providing authenticity it's gonna check</font>

370
00:18:13,930 --> 00:18:17,920
the<font color="#E5E5E5"> signature over the diffie-hellman</font>

371
00:18:15,790 --> 00:18:19,960
public key so we<font color="#E5E5E5"> don't have man in the</font>

372
00:18:17,920 --> 00:18:21,280
middle attacks<font color="#E5E5E5"> and then it's going to</font>

373
00:18:19,960 --> 00:18:24,310
respond with its own diffie-hellman

374
00:18:21,280 --> 00:18:27,040
public key<font color="#E5E5E5"> and note that at this point</font>

375
00:18:24,310 --> 00:18:29,110
<font color="#E5E5E5">the</font><font color="#CCCCCC"> client knows</font><font color="#E5E5E5"> all the information it</font>

376
00:18:27,040 --> 00:18:31,060
<font color="#CCCCCC">needs to create the shared secret</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> has</font>

377
00:18:29,110 --> 00:18:35,620
the server's public key<font color="#E5E5E5"> and of course it</font>

378
00:18:31,060 --> 00:18:37,330
knows its own private key<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> so now it</font>

379
00:18:35,620 --> 00:18:40,689
can send a finished message<font color="#E5E5E5"> but it's</font>

380
00:18:37,330 --> 00:18:44,980
green<font color="#E5E5E5"> it's encrypted with</font><font color="#CCCCCC"> the the</font><font color="#E5E5E5"> rive</font>

381
00:18:40,690 --> 00:18:48,310
key<font color="#E5E5E5"> now the server knows the</font><font color="#CCCCCC"> the</font>

382
00:18:44,980 --> 00:18:50,680
<font color="#CCCCCC">client's public portion</font><font color="#E5E5E5"> it can create</font>

383
00:18:48,310 --> 00:18:53,320
the shared secret<font color="#E5E5E5"> the same shared secret</font>

384
00:18:50,680 --> 00:18:55,240
send its own finished message<font color="#E5E5E5"> and at</font>

385
00:18:53,320 --> 00:18:59,290
<font color="#CCCCCC">this</font><font color="#E5E5E5"> point both the client and server</font>

386
00:18:55,240 --> 00:19:00,910
<font color="#E5E5E5">are convinced that they they both know</font>

387
00:18:59,290 --> 00:19:02,740
the same key<font color="#E5E5E5"> because these finished</font>

388
00:19:00,910 --> 00:19:05,530
messages are presumably<font color="#E5E5E5"> well formed</font><font color="#CCCCCC"> and</font>

389
00:19:02,740 --> 00:19:10,270
<font color="#CCCCCC">now</font><font color="#E5E5E5"> we can send application data back</font>

390
00:19:05,530 --> 00:19:12,250
<font color="#CCCCCC">and forth so this</font><font color="#E5E5E5"> first half before the</font>

391
00:19:10,270 --> 00:19:14,230
client sends<font color="#E5E5E5"> its diffie-hellman public</font>

392
00:19:12,250 --> 00:19:15,880
key is<font color="#E5E5E5"> not encrypted</font><font color="#CCCCCC"> we don't have</font>

393
00:19:14,230 --> 00:19:19,180
enough information<font color="#E5E5E5"> to create that shared</font>

394
00:19:15,880 --> 00:19:20,920
secret then<font color="#E5E5E5"> the second half is encrypted</font>

395
00:19:19,180 --> 00:19:25,300
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the master key the shared key</font>

396
00:19:20,920 --> 00:19:28,060
<font color="#E5E5E5">whatever you want to call it so this</font>

397
00:19:25,300 --> 00:19:38,379
<font color="#E5E5E5">design makes sense but how</font><font color="#CCCCCC"> can we</font>

398
00:19:28,060 --> 00:19:46,060
improve on it how many round trips do we

399
00:19:38,380 --> 00:19:50,380
do here<font color="#E5E5E5"> -</font><font color="#CCCCCC"> what's better than to</font><font color="#E5E5E5"> one so</font>

400
00:19:46,060 --> 00:19:53,500
in comes the<font color="#CCCCCC"> Telus 1.3 handshake so here</font>

401
00:19:50,380 --> 00:19:56,290
the client<font color="#E5E5E5"> says hello and it guesses</font>

402
00:19:53,500 --> 00:19:59,740
what cipher suite what key exchange

403
00:19:56,290 --> 00:20:02,080
mechanism the server supports<font color="#E5E5E5"> so it's</font>

404
00:19:59,740 --> 00:20:05,110
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to say hello and right then send</font>

405
00:20:02,080 --> 00:20:07,570
<font color="#E5E5E5">its diffie-hellman public key now</font><font color="#CCCCCC"> well I</font>

406
00:20:05,110 --> 00:20:09,790
<font color="#E5E5E5">said earlier is most servers and clients</font>

407
00:20:07,570 --> 00:20:12,280
are<font color="#E5E5E5"> going to implement</font><font color="#CCCCCC"> this P 256</font>

408
00:20:09,790 --> 00:20:15,820
elliptic curve so<font color="#E5E5E5"> you can probably guess</font>

409
00:20:12,280 --> 00:20:17,649
correctly<font color="#E5E5E5"> most of the time assuming</font><font color="#CCCCCC"> the</font>

410
00:20:15,820 --> 00:20:19,419
server supports<font color="#E5E5E5"> that it's going</font><font color="#CCCCCC"> to say</font>

411
00:20:17,650 --> 00:20:22,180
<font color="#E5E5E5">hello and send its Oh</font>

412
00:20:19,420 --> 00:20:24,070
<font color="#E5E5E5">own diffie-hellman</font><font color="#CCCCCC"> public-key but now</font>

413
00:20:22,180 --> 00:20:25,570
the server knows all the information it

414
00:20:24,070 --> 00:20:28,179
<font color="#CCCCCC">needs to know to create</font><font color="#E5E5E5"> the shared</font>

415
00:20:25,570 --> 00:20:29,950
secret<font color="#E5E5E5"> so it will still send the server</font>

416
00:20:28,180 --> 00:20:32,320
certificate<font color="#E5E5E5"> still send the signature</font>

417
00:20:29,950 --> 00:20:33,790
over<font color="#E5E5E5"> its public key still send the</font>

418
00:20:32,320 --> 00:20:37,659
finished message but they're now all

419
00:20:33,790 --> 00:20:40,690
<font color="#E5E5E5">encrypted so um to the point no</font>

420
00:20:37,660 --> 00:20:43,990
encryption<font color="#CCCCCC"> no information now these are</font>

421
00:20:40,690 --> 00:20:47,410
encrypted with a handshake key this key

422
00:20:43,990 --> 00:20:48,910
derived from the shared secret after

423
00:20:47,410 --> 00:20:51,220
<font color="#E5E5E5">receiving this the client</font><font color="#CCCCCC"> can send</font><font color="#E5E5E5"> its</font>

424
00:20:48,910 --> 00:20:53,320
own<font color="#CCCCCC"> finished message</font><font color="#E5E5E5"> so now both parties</font>

425
00:20:51,220 --> 00:20:55,270
<font color="#CCCCCC">know that they</font><font color="#E5E5E5"> both know the shared</font>

426
00:20:53,320 --> 00:20:57,850
secret<font color="#CCCCCC"> and we can start sending</font>

427
00:20:55,270 --> 00:21:00,670
application data<font color="#E5E5E5"> and now we make</font><font color="#CCCCCC"> a</font>

428
00:20:57,850 --> 00:21:02,620
distinction between<font color="#E5E5E5"> these two phases so</font>

429
00:21:00,670 --> 00:21:05,950
we derive another key that's going<font color="#CCCCCC"> to</font>

430
00:21:02,620 --> 00:21:11,169
encrypt<font color="#E5E5E5"> the application data this is</font>

431
00:21:05,950 --> 00:21:12,580
cool we've<font color="#E5E5E5"> reduced one</font><font color="#CCCCCC"> round trip this</font>

432
00:21:11,170 --> 00:21:14,560
<font color="#E5E5E5">is important</font><font color="#CCCCCC"> because you know there's a</font>

433
00:21:12,580 --> 00:21:17,290
lot<font color="#E5E5E5"> of I take it for</font><font color="#CCCCCC"> granted that</font><font color="#E5E5E5"> I have</font>

434
00:21:14,560 --> 00:21:19,659
<font color="#E5E5E5">extremely fast internet but the people</font>

435
00:21:17,290 --> 00:21:21,190
<font color="#E5E5E5">in the world who don't and the Latin see</font>

436
00:21:19,660 --> 00:21:24,160
if<font color="#E5E5E5"> you having to do two round trips is</font>

437
00:21:21,190 --> 00:21:25,930
you know it's pretty insane<font color="#E5E5E5"> and you know</font>

438
00:21:24,160 --> 00:21:28,450
everybody deserves the right<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> a</font>

439
00:21:25,930 --> 00:21:31,210
secure<font color="#E5E5E5"> internet</font><font color="#CCCCCC"> experience so this is a</font>

440
00:21:28,450 --> 00:21:33,130
huge<font color="#CCCCCC"> improvement I also see</font><font color="#E5E5E5"> like a lot</font>

441
00:21:31,210 --> 00:21:34,420
<font color="#CCCCCC">of corporations that you know of course</font>

442
00:21:33,130 --> 00:21:36,550
<font color="#E5E5E5">it depends</font><font color="#CCCCCC"> on what the threat model is</font>

443
00:21:34,420 --> 00:21:38,410
but they're not encrypting internal

444
00:21:36,550 --> 00:21:40,870
<font color="#CCCCCC">traffic because again the latency is</font>

445
00:21:38,410 --> 00:21:42,430
slow and maybe now you know we have<font color="#E5E5E5"> more</font>

446
00:21:40,870 --> 00:21:45,750
<font color="#CCCCCC">of</font><font color="#E5E5E5"> a reason for</font><font color="#CCCCCC"> them to do that because</font>

447
00:21:42,430 --> 00:21:47,830
we've reduced that<font color="#CCCCCC"> Lancey</font>

448
00:21:45,750 --> 00:21:51,210
okay that's a pretty pretty nice

449
00:21:47,830 --> 00:21:57,850
solution<font color="#CCCCCC"> what's better</font><font color="#E5E5E5"> than one</font>

450
00:21:51,210 --> 00:22:01,900
<font color="#CCCCCC">roundtrip</font><font color="#E5E5E5"> zero roundtrip so this is a</font>

451
00:21:57,850 --> 00:22:03,820
feature that<font color="#E5E5E5"> the the draft writers</font>

452
00:22:01,900 --> 00:22:05,790
<font color="#E5E5E5">wanted since the beginning so we're</font>

453
00:22:03,820 --> 00:22:08,830
gonna talk<font color="#E5E5E5"> about how they achieve that</font>

454
00:22:05,790 --> 00:22:11,680
<font color="#E5E5E5">but this is also where some of the pain</font>

455
00:22:08,830 --> 00:22:14,889
<font color="#CCCCCC">points come in and a place</font><font color="#E5E5E5"> where you</font>

456
00:22:11,680 --> 00:22:18,910
need to be<font color="#CCCCCC"> careful if you are deploying</font>

457
00:22:14,890 --> 00:22:20,800
<font color="#E5E5E5">TLS 1.3 as a server or as a client so to</font>

458
00:22:18,910 --> 00:22:25,270
get<font color="#E5E5E5"> to zero on trip we have to go over</font>

459
00:22:20,800 --> 00:22:27,780
<font color="#E5E5E5">two things first the key schedule second</font>

460
00:22:25,270 --> 00:22:31,510
resumption and then we're there

461
00:22:27,780 --> 00:22:33,310
so the key schedule keep in mind that

462
00:22:31,510 --> 00:22:35,379
both parties<font color="#E5E5E5"> the client</font>

463
00:22:33,310 --> 00:22:38,290
and<font color="#E5E5E5"> a server are performing the exact</font>

464
00:22:35,380 --> 00:22:40,720
same calculations<font color="#E5E5E5"> they have to agree on</font>

465
00:22:38,290 --> 00:22:42,970
<font color="#E5E5E5">the exact same keys to actually encrypt</font>

466
00:22:40,720 --> 00:22:44,350
and decrypt the data<font color="#E5E5E5"> but you know it's</font>

467
00:22:42,970 --> 00:22:46,150
<font color="#E5E5E5">confusing so keep in mind</font><font color="#CCCCCC"> that we're</font>

468
00:22:44,350 --> 00:22:49,689
both both parties are always doing<font color="#E5E5E5"> this</font>

469
00:22:46,150 --> 00:22:53,050
operation<font color="#E5E5E5"> so if we're resuming a session</font>

470
00:22:49,690 --> 00:22:55,570
which we don't<font color="#E5E5E5"> know about yet we start</font>

471
00:22:53,050 --> 00:22:57,790
<font color="#E5E5E5">with the resumption key otherwise</font><font color="#CCCCCC"> we</font>

472
00:22:55,570 --> 00:22:59,980
start with<font color="#E5E5E5"> this string of no bytes and</font>

473
00:22:57,790 --> 00:23:02,290
we send<font color="#E5E5E5"> it through this key derivation</font>

474
00:22:59,980 --> 00:23:06,100
function which we can just think<font color="#E5E5E5"> of it</font>

475
00:23:02,290 --> 00:23:07,840
<font color="#E5E5E5">as a hash and we get a</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> on trip key</font><font color="#CCCCCC"> ok</font>

476
00:23:06,100 --> 00:23:10,240
<font color="#E5E5E5">we don't know about that yet</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> keep it</font>

477
00:23:07,840 --> 00:23:14,500
<font color="#CCCCCC">in</font><font color="#E5E5E5"> mind where it comes in in the key</font>

478
00:23:10,240 --> 00:23:17,260
schedule itself<font color="#E5E5E5"> so then we complete our</font>

479
00:23:14,500 --> 00:23:20,110
<font color="#E5E5E5">handshake and we're left with a shared</font>

480
00:23:17,260 --> 00:23:23,350
secret<font color="#E5E5E5"> a shared key so we take</font><font color="#CCCCCC"> that and</font>

481
00:23:20,110 --> 00:23:26,860
send it<font color="#CCCCCC"> through the KDF</font><font color="#E5E5E5"> along with the</font>

482
00:23:23,350 --> 00:23:30,100
output from above<font color="#E5E5E5"> so two inputs and we</font>

483
00:23:26,860 --> 00:23:31,810
get the handshake<font color="#E5E5E5"> key recall that this</font>

484
00:23:30,100 --> 00:23:34,600
was used<font color="#E5E5E5"> to encrypt the server</font>

485
00:23:31,810 --> 00:23:36,700
certificate<font color="#E5E5E5"> the server's signature the</font>

486
00:23:34,600 --> 00:23:39,730
<font color="#E5E5E5">server's finished message and the</font>

487
00:23:36,700 --> 00:23:42,550
clients finished message and then once

488
00:23:39,730 --> 00:23:44,590
we're done with the handshake phase<font color="#E5E5E5"> we</font>

489
00:23:42,550 --> 00:23:46,450
move into the application<font color="#E5E5E5"> data phase so</font>

490
00:23:44,590 --> 00:23:49,600
<font color="#E5E5E5">we take another string of no bytes</font>

491
00:23:46,450 --> 00:23:51,850
send it through<font color="#CCCCCC"> the KDF along with the</font>

492
00:23:49,600 --> 00:23:54,520
<font color="#E5E5E5">previous output and we get an</font>

493
00:23:51,850 --> 00:23:57,129
application data key used to encrypt the

494
00:23:54,520 --> 00:23:59,440
application data along with<font color="#E5E5E5"> this</font>

495
00:23:57,130 --> 00:24:04,830
resumption key which will<font color="#E5E5E5"> be important</font>

496
00:23:59,440 --> 00:24:04,830
<font color="#CCCCCC">for</font><font color="#E5E5E5"> a resumption so pretty easy</font>

497
00:24:05,610 --> 00:24:12,129
okay now resumption so the idea<font color="#CCCCCC"> here is</font>

498
00:24:09,340 --> 00:24:14,199
we've already had a first session

499
00:24:12,130 --> 00:24:17,170
<font color="#E5E5E5">between</font><font color="#CCCCCC"> the client and</font><font color="#E5E5E5"> the server</font><font color="#CCCCCC"> how</font>

500
00:24:14,200 --> 00:24:18,220
can we<font color="#CCCCCC"> utilize that information you know</font>

501
00:24:17,170 --> 00:24:20,740
<font color="#CCCCCC">for instance the client has already</font>

502
00:24:18,220 --> 00:24:22,810
<font color="#E5E5E5">authenticated the server</font><font color="#CCCCCC"> we already have</font>

503
00:24:20,740 --> 00:24:25,570
a shared secret<font color="#E5E5E5"> can we use information</font>

504
00:24:22,810 --> 00:24:27,370
<font color="#E5E5E5">from that first session to speed up the</font>

505
00:24:25,570 --> 00:24:30,090
handshake<font color="#E5E5E5"> in the second one</font>

506
00:24:27,370 --> 00:24:34,270
that's what resumption<font color="#E5E5E5"> is trying to do</font>

507
00:24:30,090 --> 00:24:37,300
till<font color="#E5E5E5"> it relies on some shared secret and</font>

508
00:24:34,270 --> 00:24:40,000
lo and<font color="#E5E5E5"> behold we have one that</font>

509
00:24:37,300 --> 00:24:42,129
resumption key<font color="#E5E5E5"> that got spit</font><font color="#CCCCCC"> out at the</font>

510
00:24:40,000 --> 00:24:43,650
end<font color="#CCCCCC"> along</font><font color="#E5E5E5"> with the application data key</font>

511
00:24:42,130 --> 00:24:46,750
right

512
00:24:43,650 --> 00:24:48,820
so the problem<font color="#E5E5E5"> is this</font>

513
00:24:46,750 --> 00:24:51,880
server needs to recall that resumption

514
00:24:48,820 --> 00:24:53,470
key if you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> both parties</font><font color="#CCCCCC"> need to</font>

515
00:24:51,880 --> 00:24:56,260
<font color="#E5E5E5">know it if we're gonna</font><font color="#CCCCCC"> use it</font><font color="#E5E5E5"> to</font>

516
00:24:53,470 --> 00:24:58,630
bootstrap<font color="#CCCCCC"> a handshake</font><font color="#E5E5E5"> so there's two</font>

517
00:24:56,260 --> 00:25:01,120
ways<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do it</font><font color="#CCCCCC"> the server can keep a</font>

518
00:24:58,630 --> 00:25:03,970
list of all<font color="#CCCCCC"> reception keys has ever seen</font>

519
00:25:01,120 --> 00:25:05,439
and give the<font color="#CCCCCC"> client</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> identifiers so</font>

520
00:25:03,970 --> 00:25:07,630
then when the client connects<font color="#CCCCCC"> to the</font>

521
00:25:05,440 --> 00:25:09,790
server<font color="#CCCCCC"> it sends its identifier</font><font color="#E5E5E5"> the</font>

522
00:25:07,630 --> 00:25:12,600
server looks<font color="#E5E5E5"> it up in its database</font><font color="#CCCCCC"> get</font>

523
00:25:09,790 --> 00:25:15,280
some resumption key<font color="#E5E5E5"> we</font><font color="#CCCCCC"> wrap off of that</font>

524
00:25:12,600 --> 00:25:18,580
but<font color="#E5E5E5"> of course our servers are talking to</font>

525
00:25:15,280 --> 00:25:23,830
<font color="#E5E5E5">how many</font><font color="#CCCCCC"> clients a hundred thousand a</font>

526
00:25:18,580 --> 00:25:27,689
million<font color="#E5E5E5"> allows so alternatively we can</font>

527
00:25:23,830 --> 00:25:30,580
<font color="#CCCCCC">offload that</font><font color="#E5E5E5"> storage to the client now</font>

528
00:25:27,690 --> 00:25:32,560
keep in mind this is gonna<font color="#E5E5E5"> be some</font>

529
00:25:30,580 --> 00:25:34,540
shared piece of information<font color="#E5E5E5"> so the</font>

530
00:25:32,560 --> 00:25:36,010
<font color="#CCCCCC">client knows this information it</font><font color="#E5E5E5"> can</font>

531
00:25:34,540 --> 00:25:39,070
store it in its browser it can<font color="#CCCCCC"> store</font><font color="#E5E5E5"> it</font>

532
00:25:36,010 --> 00:25:39,940
in its operating system<font color="#CCCCCC"> wherever</font><font color="#E5E5E5"> so for</font>

533
00:25:39,070 --> 00:25:42,970
the sake of<font color="#E5E5E5"> this it has unlimited</font>

534
00:25:39,940 --> 00:25:45,640
<font color="#E5E5E5">storage the the the server is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> give</font>

535
00:25:42,970 --> 00:25:47,950
that<font color="#E5E5E5"> same piece</font><font color="#CCCCCC"> of information</font><font color="#E5E5E5"> to the</font>

536
00:25:45,640 --> 00:25:49,630
client<font color="#E5E5E5"> who's then going to remind the</font>

537
00:25:47,950 --> 00:25:52,900
server of that when we're<font color="#CCCCCC"> starting a</font>

538
00:25:49,630 --> 00:25:55,750
handshake<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's a little</font><font color="#E5E5E5"> confusing</font><font color="#CCCCCC"> but</font>

539
00:25:52,900 --> 00:25:59,020
maybe this diagram will help<font color="#E5E5E5"> so this is</font>

540
00:25:55,750 --> 00:26:02,110
our original<font color="#CCCCCC"> POS 1.3 handshake kind</font><font color="#E5E5E5"> of</font>

541
00:25:59,020 --> 00:26:05,010
condensed so when we're doing<font color="#E5E5E5"> resumption</font>

542
00:26:02,110 --> 00:26:08,500
we're first going<font color="#CCCCCC"> to equip the server</font>

543
00:26:05,010 --> 00:26:10,960
with a server key this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going to be a</font>

544
00:26:08,500 --> 00:26:14,080
symmetric<font color="#E5E5E5"> key that's going to key a</font><font color="#CCCCCC"> yes</font>

545
00:26:10,960 --> 00:26:16,330
or something like<font color="#E5E5E5"> that so right as we're</font>

546
00:26:14,080 --> 00:26:18,970
finishing the handshake<font color="#E5E5E5"> now the server</font>

547
00:26:16,330 --> 00:26:21,730
<font color="#E5E5E5">is gonna send the encrypted resumption</font>

548
00:26:18,970 --> 00:26:24,430
key to the client and it's encrypted

549
00:26:21,730 --> 00:26:26,320
<font color="#E5E5E5">with that server key the client doesn't</font>

550
00:26:24,430 --> 00:26:29,470
know the server key<font color="#E5E5E5"> only the server to</font>

551
00:26:26,320 --> 00:26:32,590
us<font color="#E5E5E5"> and then we send application data so</font>

552
00:26:29,470 --> 00:26:34,180
this this encrypted<font color="#E5E5E5"> resumption key is a</font>

553
00:26:32,590 --> 00:26:37,929
<font color="#E5E5E5">session ticket and it's completely</font>

554
00:26:34,180 --> 00:26:40,870
opaque<font color="#CCCCCC"> to the client but the client is</font>

555
00:26:37,930 --> 00:26:42,850
<font color="#E5E5E5">going to use that to remind the server</font>

556
00:26:40,870 --> 00:26:47,280
of what the resumption key is in the

557
00:26:42,850 --> 00:26:51,550
<font color="#E5E5E5">next session does that make sense</font>

558
00:26:47,280 --> 00:26:53,770
<font color="#E5E5E5">so to resume</font><font color="#CCCCCC"> we first need to</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> that</font>

559
00:26:51,550 --> 00:26:57,100
<font color="#E5E5E5">session</font><font color="#CCCCCC"> the client needs to</font><font color="#E5E5E5"> get that</font>

560
00:26:53,770 --> 00:27:00,220
session ticket so now in our second

561
00:26:57,100 --> 00:27:02,678
session<font color="#E5E5E5"> the client</font><font color="#CCCCCC"> can say hello and say</font>

562
00:27:00,220 --> 00:27:05,409
<font color="#E5E5E5">and the session ticket the server is</font>

563
00:27:02,679 --> 00:27:07,480
going to decrypt that and grab<font color="#E5E5E5"> the</font>

564
00:27:05,409 --> 00:27:10,990
resumption key and now it can<font color="#E5E5E5"> respond</font>

565
00:27:07,480 --> 00:27:13,750
<font color="#CCCCCC">with its own hello and a purple</font><font color="#E5E5E5"> finished</font>

566
00:27:10,990 --> 00:27:15,640
message because it's encrypted<font color="#CCCCCC"> this</font>

567
00:27:13,750 --> 00:27:21,309
finished message is<font color="#E5E5E5"> encrypted with</font><font color="#CCCCCC"> the</font>

568
00:27:15,640 --> 00:27:23,620
<font color="#E5E5E5">key derived from the resumption key and</font>

569
00:27:21,309 --> 00:27:26,080
that's that's presumption<font color="#E5E5E5"> and look what</font>

570
00:27:23,620 --> 00:27:28,479
we've done<font color="#CCCCCC"> now the server</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> in half the</font>

571
00:27:26,080 --> 00:27:31,120
send of certificate<font color="#E5E5E5"> it's not sending a</font>

572
00:27:28,480 --> 00:27:33,280
signature<font color="#E5E5E5"> and the certificate takes up</font>

573
00:27:31,120 --> 00:27:36,879
most of the bandwidth in<font color="#E5E5E5"> the handshake</font>

574
00:27:33,280 --> 00:27:38,950
<font color="#E5E5E5">it's huge and we can do this because</font>

575
00:27:36,880 --> 00:27:41,049
<font color="#E5E5E5">we've already you know the client</font><font color="#CCCCCC"> has</font>

576
00:27:38,950 --> 00:27:44,289
already<font color="#E5E5E5"> authenticated the server in the</font>

577
00:27:41,049 --> 00:27:46,658
first session<font color="#E5E5E5"> if if a server can decrypt</font>

578
00:27:44,289 --> 00:27:48,400
that session ticket and grab the

579
00:27:46,659 --> 00:27:50,470
resumption key and create a properly

580
00:27:48,400 --> 00:27:52,000
formed<font color="#E5E5E5"> finished message the client can</font>

581
00:27:50,470 --> 00:27:55,809
<font color="#CCCCCC">be sure that is with the same server</font>

582
00:27:52,000 --> 00:27:57,669
that it talked<font color="#CCCCCC"> to in the</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> place</font><font color="#E5E5E5"> so</font>

583
00:27:55,809 --> 00:27:59,500
let's<font color="#CCCCCC"> stick in to what's</font><font color="#E5E5E5"> happening in</font>

584
00:27:57,669 --> 00:28:01,630
<font color="#E5E5E5">the key schedule here so our first</font>

585
00:27:59,500 --> 00:28:04,299
session we<font color="#E5E5E5"> have those no</font><font color="#CCCCCC"> bytes we're not</font>

586
00:28:01,630 --> 00:28:07,480
resuming<font color="#E5E5E5"> send it to the KDF we get our</font>

587
00:28:04,299 --> 00:28:10,120
shared secret<font color="#CCCCCC"> yes and we get the</font>

588
00:28:07,480 --> 00:28:12,100
handshake<font color="#E5E5E5"> key then we</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> you know the</font>

589
00:28:10,120 --> 00:28:13,840
next string of<font color="#CCCCCC"> Moabites throw it in we</font>

590
00:28:12,100 --> 00:28:16,030
get<font color="#E5E5E5"> our application</font><font color="#CCCCCC"> data key and we're</font>

591
00:28:13,840 --> 00:28:17,590
<font color="#CCCCCC">getting the resumption key so that was</font>

592
00:28:16,030 --> 00:28:21,700
the normal session<font color="#E5E5E5"> the normal key</font>

593
00:28:17,590 --> 00:28:23,110
<font color="#CCCCCC">schedule</font><font color="#E5E5E5"> second session</font><font color="#CCCCCC"> we're we're</font>

594
00:28:21,700 --> 00:28:24,460
resuming<font color="#E5E5E5"> so we're gonna take the</font>

595
00:28:23,110 --> 00:28:27,399
resumption key from<font color="#E5E5E5"> the first one and</font>

596
00:28:24,460 --> 00:28:30,640
have it bootstrap<font color="#E5E5E5"> our second key</font>

597
00:28:27,400 --> 00:28:32,919
schedule<font color="#E5E5E5"> set it to the KDF in this case</font>

598
00:28:30,640 --> 00:28:34,570
we have no<font color="#E5E5E5"> shared secret we're not doing</font>

599
00:28:32,919 --> 00:28:37,350
diffie-hellman<font color="#E5E5E5"> so we just send it</font>

600
00:28:34,570 --> 00:28:40,809
<font color="#CCCCCC">through twice</font><font color="#E5E5E5"> we get our handshaking key</font>

601
00:28:37,350 --> 00:28:42,969
this<font color="#E5E5E5"> is what's encrypting the finished</font>

602
00:28:40,809 --> 00:28:45,070
message from the<font color="#E5E5E5"> server and finally</font><font color="#CCCCCC"> we</font>

603
00:28:42,970 --> 00:28:49,450
get new application data keys and a new

604
00:28:45,070 --> 00:28:54,370
resumption key to be<font color="#E5E5E5"> used next time okay</font>

605
00:28:49,450 --> 00:28:58,120
<font color="#E5E5E5">this is cool but in the first session we</font>

606
00:28:54,370 --> 00:29:01,629
had a shared secret contribution<font color="#CCCCCC"> in the</font>

607
00:28:58,120 --> 00:29:05,500
second session<font color="#E5E5E5"> we don't well what does</font>

608
00:29:01,630 --> 00:29:07,690
that<font color="#CCCCCC"> mean that means</font><font color="#E5E5E5"> that all these keys</font>

609
00:29:05,500 --> 00:29:11,909
<font color="#E5E5E5">used in the second session</font><font color="#CCCCCC"> are only</font>

610
00:29:07,690 --> 00:29:13,960
derived from the resumption key<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and</font>

611
00:29:11,909 --> 00:29:19,080
recall that<font color="#E5E5E5"> the resumption</font>

612
00:29:13,960 --> 00:29:22,950
<font color="#E5E5E5">key is sent to the the server</font><font color="#CCCCCC"> encrypt it</font>

613
00:29:19,080 --> 00:29:28,299
encrypt it<font color="#CCCCCC"> with the server's server key</font>

614
00:29:22,950 --> 00:29:29,010
<font color="#E5E5E5">whereas the sound like sounds</font><font color="#CCCCCC"> like RSA</font>

615
00:29:28,299 --> 00:29:32,049
to me

616
00:29:29,010 --> 00:29:34,059
remember in RSA the server generates<font color="#E5E5E5"> a</font>

617
00:29:32,049 --> 00:29:36,750
key encrypts<font color="#E5E5E5"> it to the server's public</font>

618
00:29:34,059 --> 00:29:39,908
key<font color="#E5E5E5"> we go from there no forward secrecy</font>

619
00:29:36,750 --> 00:29:43,000
<font color="#E5E5E5">here it's you know kind of the same it's</font>

620
00:29:39,909 --> 00:29:45,520
only protected<font color="#CCCCCC"> by the</font><font color="#E5E5E5"> server's session</font>

621
00:29:43,000 --> 00:29:47,110
<font color="#CCCCCC">ticket key the server server key</font><font color="#E5E5E5"> so if</font>

622
00:29:45,520 --> 00:29:49,899
that is revealed<font color="#E5E5E5"> to an attacker</font><font color="#CCCCCC"> an</font>

623
00:29:47,110 --> 00:29:51,668
attacker can<font color="#CCCCCC"> then decrypt</font><font color="#E5E5E5"> all these</font>

624
00:29:49,899 --> 00:29:54,100
session tickets<font color="#E5E5E5"> get all the resumption</font>

625
00:29:51,669 --> 00:29:59,950
<font color="#E5E5E5">keys figure out the application data</font>

626
00:29:54,100 --> 00:30:04,689
<font color="#CCCCCC">keys we've lost</font><font color="#E5E5E5"> for secrecy not ideal</font><font color="#CCCCCC"> so</font>

627
00:29:59,950 --> 00:30:07,149
how do we<font color="#E5E5E5"> fix that well we say hello we</font>

628
00:30:04,690 --> 00:30:09,760
send the session ticket and we also send

629
00:30:07,149 --> 00:30:12,459
our a new diffie-hellman public key

630
00:30:09,760 --> 00:30:14,799
we're doing diffie-hellman again so here

631
00:30:12,460 --> 00:30:16,659
the server<font color="#E5E5E5"> can respond hello it's</font>

632
00:30:14,799 --> 00:30:18,668
diffie-hellman public key and a new

633
00:30:16,659 --> 00:30:20,919
finished message this<font color="#E5E5E5"> time</font><font color="#CCCCCC"> is finished</font>

634
00:30:18,669 --> 00:30:24,760
message is encrypted with<font color="#CCCCCC"> the key</font>

635
00:30:20,919 --> 00:30:26,669
derived from the resumption key and the

636
00:30:24,760 --> 00:30:30,570
shared secret

637
00:30:26,669 --> 00:30:34,860
so now by introducing<font color="#E5E5E5"> the shared secret</font>

638
00:30:30,570 --> 00:30:39,870
<font color="#E5E5E5">these next keys gain for its secrecy</font>

639
00:30:34,860 --> 00:30:42,340
<font color="#E5E5E5">does</font><font color="#CCCCCC"> that make sense</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> in TLS 1.2</font>

640
00:30:39,870 --> 00:30:45,789
resumption looked exactly like this but

641
00:30:42,340 --> 00:30:47,980
<font color="#CCCCCC">it did</font><font color="#E5E5E5"> not do that</font><font color="#CCCCCC"> second diffie-hellman</font>

642
00:30:45,789 --> 00:30:51,129
step it never did it<font color="#E5E5E5"> so they did</font><font color="#CCCCCC"> not</font>

643
00:30:47,980 --> 00:30:57,460
<font color="#E5E5E5">have forward secrecy</font><font color="#CCCCCC"> so kind of</font><font color="#E5E5E5"> adding</font>

644
00:30:51,130 --> 00:30:58,899
to<font color="#CCCCCC"> our chart by introducing only dipping</font>

645
00:30:57,460 --> 00:31:01,659
and only elliptic curve diffie-hellman

646
00:30:58,899 --> 00:31:05,199
<font color="#E5E5E5">we're basically always forward secure in</font>

647
00:31:01,659 --> 00:31:07,090
our<font color="#E5E5E5"> previous versions we weren't we've</font>

648
00:31:05,200 --> 00:31:11,220
gone<font color="#E5E5E5"> from two round trips to one round</font>

649
00:31:07,090 --> 00:31:14,320
<font color="#E5E5E5">trip saving latin</font><font color="#CCCCCC"> c and</font><font color="#E5E5E5"> until us 1.2</font>

650
00:31:11,220 --> 00:31:18,760
resumption is not forward secure but<font color="#E5E5E5"> it</font>

651
00:31:14,320 --> 00:31:22,299
is sometimes<font color="#CCCCCC"> in 1.3</font><font color="#E5E5E5"> if you opt</font><font color="#CCCCCC"> to do</font>

652
00:31:18,760 --> 00:31:25,270
that additional difficult step<font color="#E5E5E5"> so some</font>

653
00:31:22,299 --> 00:31:27,610
takeaways<font color="#E5E5E5"> from this if you are you know</font>

654
00:31:25,270 --> 00:31:30,430
<font color="#E5E5E5">implementing or running</font><font color="#CCCCCC"> a TLS 1.3 server</font>

655
00:31:27,610 --> 00:31:32,500
so always be negotiating those ephemeral

656
00:31:30,430 --> 00:31:34,210
<font color="#E5E5E5">keys</font><font color="#CCCCCC"> when you're</font><font color="#E5E5E5"> doing a resumption</font><font color="#CCCCCC"> step</font>

657
00:31:32,500 --> 00:31:38,500
<font color="#E5E5E5">you want to have that forward secrecy</font>

658
00:31:34,210 --> 00:31:40,540
<font color="#CCCCCC">you can also rotate</font><font color="#E5E5E5"> the server</font><font color="#CCCCCC"> keys the</font>

659
00:31:38,500 --> 00:31:42,760
things that are encrypting the session

660
00:31:40,540 --> 00:31:44,830
tickets<font color="#E5E5E5"> on an aggressive schedule</font><font color="#CCCCCC"> it's</font>

661
00:31:42,760 --> 00:31:47,320
kind of a<font color="#CCCCCC"> defense-in-depth measure and</font>

662
00:31:44,830 --> 00:31:50,560
it will be important when<font color="#CCCCCC"> we</font><font color="#E5E5E5"> talk about</font>

663
00:31:47,320 --> 00:31:53,649
<font color="#E5E5E5">zero on trip so rotation</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of gives</font>

664
00:31:50,560 --> 00:31:55,570
<font color="#E5E5E5">forward security but of course it</font>

665
00:31:53,650 --> 00:31:58,240
invalidates previous session<font color="#CCCCCC"> tickets</font>

666
00:31:55,570 --> 00:32:00,129
<font color="#E5E5E5">once the server forgets the previous key</font>

667
00:31:58,240 --> 00:32:02,560
session tickets<font color="#E5E5E5"> encrypt it</font><font color="#CCCCCC"> with that key</font>

668
00:32:00,130 --> 00:32:05,410
<font color="#E5E5E5">you know won't be</font><font color="#CCCCCC"> valid to</font><font color="#E5E5E5"> it so you</font>

669
00:32:02,560 --> 00:32:08,830
have<font color="#E5E5E5"> to go to the normal TLS 1.3</font>

670
00:32:05,410 --> 00:32:11,200
handshake<font color="#E5E5E5"> the other issue with this is</font>

671
00:32:08,830 --> 00:32:13,110
<font color="#E5E5E5">if you have a server farm that you know</font>

672
00:32:11,200 --> 00:32:15,490
a client could<font color="#E5E5E5"> connect to any server and</font>

673
00:32:13,110 --> 00:32:18,939
you know do whatever operations<font color="#E5E5E5"> is easy</font>

674
00:32:15,490 --> 00:32:20,860
<font color="#E5E5E5">to do</font><font color="#CCCCCC"> if you want the client to resume</font>

675
00:32:18,940 --> 00:32:24,280
with any of those they all have to have

676
00:32:20,860 --> 00:32:26,379
<font color="#E5E5E5">the same server key so the question is</font>

677
00:32:24,280 --> 00:32:27,250
<font color="#E5E5E5">you know how do you distribute that you</font>

678
00:32:26,380 --> 00:32:31,060
know that's something<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font>

679
00:32:27,250 --> 00:32:32,580
think<font color="#CCCCCC"> about how to do so securely and of</font>

680
00:32:31,060 --> 00:32:35,649
course you know we're<font color="#CCCCCC"> not really sure</font>

681
00:32:32,580 --> 00:32:37,240
<font color="#E5E5E5">what the</font><font color="#CCCCCC"> configuration and api's and</font>

682
00:32:35,650 --> 00:32:40,300
whatnot will look like but<font color="#E5E5E5"> don't assume</font>

683
00:32:37,240 --> 00:32:42,250
that<font color="#E5E5E5"> your TLS 1.3 implementation is</font>

684
00:32:40,300 --> 00:32:43,600
secure<font color="#CCCCCC"> out-of-the-box</font><font color="#E5E5E5"> you have to make</font>

685
00:32:42,250 --> 00:32:45,850
sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you're you know setting the</font>

686
00:32:43,600 --> 00:32:49,080
<font color="#E5E5E5">negotiate ephemeral</font><font color="#CCCCCC"> keys</font><font color="#E5E5E5"> flags and</font>

687
00:32:45,850 --> 00:32:49,080
whatnot question

688
00:32:57,440 --> 00:33:02,370
these are different keys<font color="#E5E5E5"> so this is a</font>

689
00:32:59,460 --> 00:33:04,710
key<font color="#E5E5E5"> that the symmetric key only</font><font color="#CCCCCC"> known to</font>

690
00:33:02,370 --> 00:33:06,719
<font color="#E5E5E5">the server only</font><font color="#CCCCCC"> for its benefit it's</font>

691
00:33:04,710 --> 00:33:09,930
what's encrypting the session ticket<font color="#E5E5E5"> so</font>

692
00:33:06,720 --> 00:33:12,240
you know if you if you rotate<font color="#E5E5E5"> that you</font>

693
00:33:09,930 --> 00:33:14,490
won't be<font color="#E5E5E5"> able to decrypt the previous</font>

694
00:33:12,240 --> 00:33:16,200
you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> a session ticket</font><font color="#E5E5E5"> encrypted with</font>

695
00:33:14,490 --> 00:33:24,660
the<font color="#E5E5E5"> previous key so the only thing you</font>

696
00:33:16,200 --> 00:33:27,240
lose is resumption okay so now we're

697
00:33:24,660 --> 00:33:30,300
prepared<font color="#E5E5E5"> to talk about your</font><font color="#CCCCCC"> on trip so</font>

698
00:33:27,240 --> 00:33:31,980
we need we need<font color="#E5E5E5"> to be resuming</font><font color="#CCCCCC"> a session</font>

699
00:33:30,300 --> 00:33:35,070
<font color="#E5E5E5">so we've already got</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> session ticket</font>

700
00:33:31,980 --> 00:33:37,140
<font color="#E5E5E5">and now we were being forward secure so</font>

701
00:33:35,070 --> 00:33:38,730
<font color="#E5E5E5">we say hello</font><font color="#CCCCCC"> send the session ticket</font>

702
00:33:37,140 --> 00:33:41,790
<font color="#E5E5E5">send our deputy</font><font color="#CCCCCC"> Hammond public key but</font>

703
00:33:38,730 --> 00:33:44,360
<font color="#CCCCCC">then we immediately</font><font color="#E5E5E5"> send early data</font>

704
00:33:41,790 --> 00:33:47,700
application data right then in there

705
00:33:44,360 --> 00:33:50,310
this<font color="#E5E5E5"> first bit is not</font><font color="#CCCCCC"> encrypted</font><font color="#E5E5E5"> not</font>

706
00:33:47,700 --> 00:33:53,040
enough information<font color="#E5E5E5"> the second bit is</font>

707
00:33:50,310 --> 00:33:55,649
<font color="#E5E5E5">encrypted with a key derived from the</font>

708
00:33:53,040 --> 00:33:58,050
resumption key<font color="#CCCCCC"> I will show the key</font>

709
00:33:55,650 --> 00:33:59,850
schedule again<font color="#E5E5E5"> but remember</font><font color="#CCCCCC"> that was the</font>

710
00:33:58,050 --> 00:34:02,669
<font color="#CCCCCC">first</font><font color="#E5E5E5"> key</font><font color="#CCCCCC"> the pop out of</font><font color="#E5E5E5"> our key</font>

711
00:33:59,850 --> 00:34:04,649
schedule now the server can<font color="#E5E5E5"> say hello</font>

712
00:34:02,670 --> 00:34:07,260
<font color="#E5E5E5">provide his own diffie-hellman public</font>

713
00:34:04,650 --> 00:34:09,470
key<font color="#E5E5E5"> a finished message and the response</font>

714
00:34:07,260 --> 00:34:12,949
to whatever<font color="#E5E5E5"> early data the client sent</font>

715
00:34:09,469 --> 00:34:15,299
so that<font color="#CCCCCC"> first bit is not encrypted and</font>

716
00:34:12,949 --> 00:34:18,259
the second bit is encrypted<font color="#CCCCCC"> with the key</font>

717
00:34:15,300 --> 00:34:24,750
derived from both the resumption key and

718
00:34:18,260 --> 00:34:26,760
<font color="#E5E5E5">this new shared secret so let's look at</font>

719
00:34:24,750 --> 00:34:29,429
that in session<font color="#CCCCCC"> 2 we saw there's</font>

720
00:34:26,760 --> 00:34:31,230
something key<font color="#CCCCCC"> sent to the KDF</font><font color="#E5E5E5"> and we get</font>

721
00:34:29,429 --> 00:34:33,929
our<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> roundtrip key used to encrypt</font>

722
00:34:31,230 --> 00:34:36,420
that<font color="#E5E5E5"> early data then we're going</font><font color="#CCCCCC"> to</font>

723
00:34:33,929 --> 00:34:39,120
share secrets<font color="#CCCCCC"> send it</font><font color="#E5E5E5"> to the KDF get our</font>

724
00:34:36,420 --> 00:34:40,740
handshaking<font color="#E5E5E5"> keys we know this</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> EF get</font>

725
00:34:39,120 --> 00:34:46,429
our<font color="#E5E5E5"> application data keys get our new</font>

726
00:34:40,739 --> 00:34:46,429
resumption key but what's the issue here

727
00:34:47,630 --> 00:34:53,810
well when we were zooming<font color="#E5E5E5"> we we add</font><font color="#CCCCCC"> the</font>

728
00:34:51,600 --> 00:34:57,600
shared secret to provide<font color="#CCCCCC"> forward secrecy</font>

729
00:34:53,810 --> 00:35:00,600
<font color="#E5E5E5">for these later</font><font color="#CCCCCC"> keys</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> the shared</font>

730
00:34:57,600 --> 00:35:04,680
secret comes after the<font color="#E5E5E5"> juror on trip key</font>

731
00:35:00,600 --> 00:35:07,140
in the derivation<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> 0im trip key is</font>

732
00:35:04,680 --> 00:35:09,480
strictly and only derived from the

733
00:35:07,140 --> 00:35:10,839
resumption key<font color="#E5E5E5"> what do we say about</font><font color="#CCCCCC"> the</font>

734
00:35:09,480 --> 00:35:12,640
resumption key

735
00:35:10,840 --> 00:35:14,590
if an attacker<font color="#E5E5E5"> can figure out that</font>

736
00:35:12,640 --> 00:35:16,990
<font color="#E5E5E5">servers key that's encrypting the</font>

737
00:35:14,590 --> 00:35:18,520
session tickets<font color="#CCCCCC"> an attacker can decrypt</font>

738
00:35:16,990 --> 00:35:20,979
the session<font color="#CCCCCC"> tickets</font><font color="#E5E5E5"> get the resumption</font>

739
00:35:18,520 --> 00:35:23,110
key<font color="#E5E5E5"> an attacker can</font><font color="#CCCCCC"> then figure out</font><font color="#E5E5E5"> the</font>

740
00:35:20,980 --> 00:35:29,170
zero<font color="#CCCCCC"> hour trip key and decrypt</font><font color="#E5E5E5"> whatever</font>

741
00:35:23,110 --> 00:35:32,650
data is there so coming up for<font color="#E5E5E5"> secrecy</font>

742
00:35:29,170 --> 00:35:36,280
until<font color="#CCCCCC"> it's 1.3 all</font><font color="#E5E5E5"> of our non resume</font>

743
00:35:32,650 --> 00:35:39,370
sessions are always forward secure we

744
00:35:36,280 --> 00:35:41,500
enforce<font color="#E5E5E5"> that our resume sessions are</font>

745
00:35:39,370 --> 00:35:44,310
only<font color="#CCCCCC"> forward</font><font color="#E5E5E5"> secure if we do that</font>

746
00:35:41,500 --> 00:35:46,930
additional diffie-hellman tab<font color="#E5E5E5"> and</font>

747
00:35:44,310 --> 00:35:50,710
finally our<font color="#CCCCCC"> zero round-trip early data</font>

748
00:35:46,930 --> 00:35:51,819
<font color="#E5E5E5">is not forward secure so you got to</font>

749
00:35:50,710 --> 00:35:54,370
<font color="#CCCCCC">think</font><font color="#E5E5E5"> about that if you're going to be</font>

750
00:35:51,820 --> 00:35:56,590
using<font color="#CCCCCC"> zero roundtrip and ask yourself is</font>

751
00:35:54,370 --> 00:35:58,480
this data<font color="#E5E5E5"> particularly sensitive you</font>

752
00:35:56,590 --> 00:36:01,120
know<font color="#E5E5E5"> if it's just some get request</font>

753
00:35:58,480 --> 00:36:03,040
that's you know getting a<font color="#CCCCCC"> users profile</font>

754
00:36:01,120 --> 00:36:04,240
<font color="#E5E5E5">then that's maybe</font><font color="#CCCCCC"> okay</font>

755
00:36:03,040 --> 00:36:06,190
there's no sensitive data<font color="#E5E5E5"> and I get</font>

756
00:36:04,240 --> 00:36:08,970
repressed<font color="#E5E5E5"> presumably but if you're</font>

757
00:36:06,190 --> 00:36:11,560
making a post request with you know some

758
00:36:08,970 --> 00:36:13,870
<font color="#CCCCCC">Pai data or something</font><font color="#E5E5E5"> else</font><font color="#CCCCCC"> that's</font>

759
00:36:11,560 --> 00:36:15,820
sensitive<font color="#E5E5E5"> you gotta ask yourself like do</font>

760
00:36:13,870 --> 00:36:17,890
I want<font color="#E5E5E5"> that to be forward secure if so</font>

761
00:36:15,820 --> 00:36:23,200
maybe<font color="#E5E5E5"> you should not send it a zero</font>

762
00:36:17,890 --> 00:36:32,620
<font color="#CCCCCC">round-trip data does that make sense yes</font>

763
00:36:23,200 --> 00:36:38,439
<font color="#CCCCCC">question yeah so are</font><font color="#E5E5E5"> these results</font>

764
00:36:32,620 --> 00:36:41,040
<font color="#E5E5E5">configurable they should be so I haven't</font>

765
00:36:38,440 --> 00:36:44,320
<font color="#E5E5E5">seen any really ready</font><font color="#CCCCCC"> to use</font>

766
00:36:41,040 --> 00:36:46,870
<font color="#E5E5E5">implementations for you know the public</font>

767
00:36:44,320 --> 00:36:49,300
but I would presume<font color="#CCCCCC"> that disabling</font><font color="#E5E5E5"> zero</font>

768
00:36:46,870 --> 00:36:50,920
on trip<font color="#CCCCCC"> will</font><font color="#E5E5E5"> be easy adding in this</font>

769
00:36:49,300 --> 00:36:53,110
<font color="#E5E5E5">additional difficult step should be easy</font>

770
00:36:50,920 --> 00:36:57,700
<font color="#E5E5E5">and I would assume</font><font color="#CCCCCC"> don't call me on</font><font color="#E5E5E5"> this</font>

771
00:36:53,110 --> 00:36:59,440
that it<font color="#E5E5E5"> would be enabled</font><font color="#CCCCCC"> by default now</font>

772
00:36:57,700 --> 00:37:06,460
does anybody see any other issues with

773
00:36:59,440 --> 00:37:12,130
the zero on trip<font color="#E5E5E5"> early data look at</font>

774
00:37:06,460 --> 00:37:14,800
replay attacks<font color="#E5E5E5"> so in the normal</font><font color="#CCCCCC"> juror on</font>

775
00:37:12,130 --> 00:37:16,810
<font color="#E5E5E5">trip</font><font color="#CCCCCC"> case client</font><font color="#E5E5E5"> that's low second</font>

776
00:37:14,800 --> 00:37:18,730
ticket<font color="#E5E5E5"> diffie-hellman early data the</font>

777
00:37:16,810 --> 00:37:21,520
server is going to<font color="#E5E5E5"> process that</font><font color="#CCCCCC"> early</font>

778
00:37:18,730 --> 00:37:23,410
<font color="#E5E5E5">data but an attacker can just replay</font>

779
00:37:21,520 --> 00:37:24,570
<font color="#E5E5E5">that request and the server will</font><font color="#CCCCCC"> process</font>

780
00:37:23,410 --> 00:37:26,310
<font color="#CCCCCC">it again</font><font color="#E5E5E5"> and they</font>

781
00:37:24,570 --> 00:37:29,010
replated<font color="#E5E5E5"> requests in the server will</font>

782
00:37:26,310 --> 00:37:33,000
process<font color="#CCCCCC"> that again that's you know</font>

783
00:37:29,010 --> 00:37:34,830
<font color="#E5E5E5">that's a big issue so there's a couple</font>

784
00:37:33,000 --> 00:37:37,350
things<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> can do to protect against</font>

785
00:37:34,830 --> 00:37:40,140
this we can limit<font color="#CCCCCC"> the session ticket</font>

786
00:37:37,350 --> 00:37:42,569
time so I said<font color="#E5E5E5"> to the session ticket</font>

787
00:37:40,140 --> 00:37:44,460
included the resumption key but you<font color="#CCCCCC"> can</font>

788
00:37:42,570 --> 00:37:47,280
also include<font color="#CCCCCC"> other things</font><font color="#E5E5E5"> in there like</font>

789
00:37:44,460 --> 00:37:50,280
a ticket age so if this if the current

790
00:37:47,280 --> 00:37:52,620
time is<font color="#E5E5E5"> after the stick and age</font><font color="#CCCCCC"> will</font>

791
00:37:50,280 --> 00:37:54,240
just<font color="#CCCCCC"> invalidate it</font><font color="#E5E5E5"> the problem with</font><font color="#CCCCCC"> that</font>

792
00:37:52,620 --> 00:37:57,299
<font color="#E5E5E5">though of</font><font color="#CCCCCC"> course is an attacker could</font>

793
00:37:54,240 --> 00:38:01,680
replay<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> whole request up until</font>

794
00:37:57,300 --> 00:38:04,020
the ticket expires<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> one cool thing</font>

795
00:38:01,680 --> 00:38:06,509
is once we get a finished message from

796
00:38:04,020 --> 00:38:08,490
the client<font color="#E5E5E5"> we are convinced they</font>

797
00:38:06,510 --> 00:38:12,570
actually know the keys<font color="#E5E5E5"> were convinced</font>

798
00:38:08,490 --> 00:38:15,479
that<font color="#E5E5E5"> it's not a replay attack</font><font color="#CCCCCC"> so if we</font>

799
00:38:12,570 --> 00:38:17,250
can buffer the<font color="#E5E5E5"> request and then only</font>

800
00:38:15,480 --> 00:38:19,500
process it<font color="#E5E5E5"> after we get the finished</font>

801
00:38:17,250 --> 00:38:21,540
message<font color="#E5E5E5"> we're still kind of harnessing</font>

802
00:38:19,500 --> 00:38:24,750
the round-trip data and we're still<font color="#E5E5E5"> kind</font>

803
00:38:21,540 --> 00:38:26,759
of getting this speed improvement<font color="#E5E5E5"> but</font>

804
00:38:24,750 --> 00:38:30,570
we've you know<font color="#E5E5E5"> we protected against this</font>

805
00:38:26,760 --> 00:38:33,420
<font color="#E5E5E5">particular attack so again adding</font><font color="#CCCCCC"> to our</font>

806
00:38:30,570 --> 00:38:36,840
chart we've introduced<font color="#CCCCCC"> zero on trip that</font>

807
00:38:33,420 --> 00:38:39,000
<font color="#E5E5E5">was a strict</font><font color="#CCCCCC"> requirement for TLS 1.3 but</font>

808
00:38:36,840 --> 00:38:44,970
there's no forward security on<font color="#E5E5E5"> that</font>

809
00:38:39,000 --> 00:38:49,050
early data so kind of<font color="#E5E5E5"> takeaways about</font>

810
00:38:44,970 --> 00:38:50,100
<font color="#E5E5E5">this and I when I first</font><font color="#CCCCCC"> said about the</font>

811
00:38:49,050 --> 00:38:52,140
difference<font color="#CCCCCC"> between like oh I get</font>

812
00:38:50,100 --> 00:38:54,330
<font color="#CCCCCC">requests in a post request if you're</font>

813
00:38:52,140 --> 00:38:56,790
using<font color="#CCCCCC"> 0 on trip you should</font><font color="#E5E5E5"> design those</font>

814
00:38:54,330 --> 00:38:58,950
calls<font color="#E5E5E5"> to be item potent you should not</font>

815
00:38:56,790 --> 00:39:01,440
be performing any state changing actions

816
00:38:58,950 --> 00:39:03,839
<font color="#E5E5E5">in these cases that</font><font color="#CCCCCC"> an attacker could</font>

817
00:39:01,440 --> 00:39:06,810
you know you know replay and you know

818
00:39:03,840 --> 00:39:08,580
cause havoc with additionally<font color="#E5E5E5"> just don't</font>

819
00:39:06,810 --> 00:39:10,350
turn it<font color="#E5E5E5"> on</font><font color="#CCCCCC"> if you don't want to utilize</font>

820
00:39:08,580 --> 00:39:10,799
<font color="#E5E5E5">it don't turn</font><font color="#CCCCCC"> it on for every</font><font color="#E5E5E5"> single</font>

821
00:39:10,350 --> 00:39:14,880
request

822
00:39:10,800 --> 00:39:18,590
I mentioned<font color="#E5E5E5"> buffering</font><font color="#CCCCCC"> you can set this</font>

823
00:39:14,880 --> 00:39:22,050
max<font color="#E5E5E5"> early data size that clients have to</font>

824
00:39:18,590 --> 00:39:23,490
abide by<font color="#E5E5E5"> that you can you know buffer</font>

825
00:39:22,050 --> 00:39:26,900
the<font color="#CCCCCC"> request wait for the finished</font>

826
00:39:23,490 --> 00:39:31,410
message and then proceed<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the action</font>

827
00:39:26,900 --> 00:39:34,500
the specification calls out some actual

828
00:39:31,410 --> 00:39:37,680
replay protection techniques<font color="#E5E5E5"> but it's</font>

829
00:39:34,500 --> 00:39:38,520
<font color="#E5E5E5">basically storing unbounded data on the</font>

830
00:39:37,680 --> 00:39:40,049
server<font color="#E5E5E5"> so</font>

831
00:39:38,520 --> 00:39:42,180
remember every<font color="#E5E5E5"> single session ticket</font>

832
00:39:40,050 --> 00:39:45,000
that you've sent<font color="#CCCCCC"> if you received it</font>

833
00:39:42,180 --> 00:39:51,450
<font color="#E5E5E5">twice the second one is being replayed</font>

834
00:39:45,000 --> 00:39:54,060
<font color="#E5E5E5">reject the request okay</font>

835
00:39:51,450 --> 00:39:56,549
so that was all about<font color="#CCCCCC"> zero on trip we</font>

836
00:39:54,060 --> 00:39:57,720
have a few other improvements<font color="#CCCCCC"> there's</font>

837
00:39:56,550 --> 00:39:59,340
actually a lot<font color="#E5E5E5"> to mention but we've</font>

838
00:39:57,720 --> 00:40:00,959
we've gotten rid<font color="#E5E5E5"> of all export ciphers</font>

839
00:39:59,340 --> 00:40:03,630
<font color="#E5E5E5">we've gotten rid of all week groups</font>

840
00:40:00,960 --> 00:40:06,210
no more log jam no more freaky tax we

841
00:40:03,630 --> 00:40:09,030
have<font color="#E5E5E5"> only safe diffie-hellman</font><font color="#CCCCCC"> and safe</font>

842
00:40:06,210 --> 00:40:11,940
<font color="#E5E5E5">elliptic curve groups we had compression</font>

843
00:40:09,030 --> 00:40:14,270
before<font color="#E5E5E5"> which led to the breach attack no</font>

844
00:40:11,940 --> 00:40:16,760
compression allowed now we had

845
00:40:14,270 --> 00:40:19,320
renegotiation before which led<font color="#CCCCCC"> to this</font>

846
00:40:16,760 --> 00:40:22,230
cool complicated<font color="#E5E5E5"> three shake attack and</font>

847
00:40:19,320 --> 00:40:25,950
denial<font color="#E5E5E5"> services attacks now we have an</font>

848
00:40:22,230 --> 00:40:28,110
<font color="#E5E5E5">easy key update</font><font color="#CCCCCC"> mechanism so that was a</font>

849
00:40:25,950 --> 00:40:30,060
lot<font color="#CCCCCC"> of information</font><font color="#E5E5E5"> but summing it up</font>

850
00:40:28,110 --> 00:40:32,880
tell us<font color="#E5E5E5"> one point three reduces latency</font>

851
00:40:30,060 --> 00:40:36,299
<font color="#CCCCCC">with its with</font><font color="#E5E5E5"> its one</font><font color="#CCCCCC"> round trip it's a</font>

852
00:40:32,880 --> 00:40:38,460
huge win<font color="#CCCCCC"> for us resumption can before</font>

853
00:40:36,300 --> 00:40:41,010
it's<font color="#CCCCCC"> secure now if you enable</font><font color="#E5E5E5"> that</font>

854
00:40:38,460 --> 00:40:43,380
additional diffie-hellman step<font color="#CCCCCC"> zero</font>

855
00:40:41,010 --> 00:40:45,630
<font color="#E5E5E5">encrypt data exists the further speed up</font>

856
00:40:43,380 --> 00:40:47,280
processing of requests<font color="#E5E5E5"> but it's not</font>

857
00:40:45,630 --> 00:40:50,580
forward secure so you've got to keep it

858
00:40:47,280 --> 00:40:53,090
this in mind when you<font color="#CCCCCC"> are designing</font><font color="#E5E5E5"> your</font>

859
00:40:50,580 --> 00:40:56,819
application<font color="#E5E5E5"> and it's also prone to</font>

860
00:40:53,090 --> 00:41:01,320
replay attacks<font color="#E5E5E5"> as we discussed</font><font color="#CCCCCC"> so</font>

861
00:40:56,820 --> 00:41:04,950
questions<font color="#E5E5E5"> I think there's a mic going</font>

862
00:41:01,320 --> 00:41:08,640
<font color="#E5E5E5">around if we want to there's no mic okay</font>

863
00:41:04,950 --> 00:41:10,680
yeah hi thanks for<font color="#E5E5E5"> the great talk really</font>

864
00:41:08,640 --> 00:41:12,690
appreciate it<font color="#CCCCCC"> um</font><font color="#E5E5E5"> you were talking about</font>

865
00:41:10,680 --> 00:41:14,700
<font color="#E5E5E5">how you</font><font color="#CCCCCC"> have to</font><font color="#E5E5E5"> aggressively invalidate</font>

866
00:41:12,690 --> 00:41:15,960
session keys<font color="#CCCCCC"> yeah to make sure</font>

867
00:41:14,700 --> 00:41:16,470
everything works<font color="#E5E5E5"> out nicely there which</font>

868
00:41:15,960 --> 00:41:18,750
is<font color="#CCCCCC"> great</font>

869
00:41:16,470 --> 00:41:20,580
but it's if I and<font color="#E5E5E5"> I'm just hoping you</font>

870
00:41:18,750 --> 00:41:22,380
explained<font color="#E5E5E5"> it seems sort</font><font color="#CCCCCC"> of offhand that</font>

871
00:41:20,580 --> 00:41:23,640
<font color="#E5E5E5">if you do that though and you start</font>

872
00:41:22,380 --> 00:41:25,770
getting invalid session<font color="#E5E5E5"> keys all of a</font>

873
00:41:23,640 --> 00:41:28,618
sudden<font color="#CCCCCC"> you're what you are</font><font color="#E5E5E5"> attempting to</font>

874
00:41:25,770 --> 00:41:30,119
<font color="#E5E5E5">do is</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> round trips now aren't even one</font>

875
00:41:28,619 --> 00:41:32,609
round trip it's actually now<font color="#E5E5E5"> two round</font>

876
00:41:30,119 --> 00:41:34,710
trips again<font color="#E5E5E5"> my was I miss reading the</font>

877
00:41:32,609 --> 00:41:36,420
<font color="#CCCCCC">the protocol there or it seems like the</font>

878
00:41:34,710 --> 00:41:37,740
consequences<font color="#CCCCCC"> are pretty dire if you're</font>

879
00:41:36,420 --> 00:41:40,530
<font color="#CCCCCC">invalidating those really aggressively</font>

880
00:41:37,740 --> 00:41:42,750
<font color="#E5E5E5">well I guess it it depends on how much</font>

881
00:41:40,530 --> 00:41:43,170
you care about resumption<font color="#E5E5E5"> in the first</font>

882
00:41:42,750 --> 00:41:46,050
place

883
00:41:43,170 --> 00:41:48,330
because I mean you're<font color="#E5E5E5"> right if you</font>

884
00:41:46,050 --> 00:41:50,220
resume a if you attempt to resume a

885
00:41:48,330 --> 00:41:51,660
session<font color="#E5E5E5"> and you've already invalidated</font>

886
00:41:50,220 --> 00:41:52,259
the server key so the session<font color="#E5E5E5"> ticket is</font>

887
00:41:51,660 --> 00:41:55,140
<font color="#E5E5E5">invalidate</font>

888
00:41:52,260 --> 00:41:57,540
<font color="#E5E5E5">you will have to fall back</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the normal</font>

889
00:41:55,140 --> 00:41:59,580
one<font color="#CCCCCC"> trowel one round trip phase</font><font color="#E5E5E5"> which</font>

890
00:41:57,540 --> 00:42:01,140
basically makes the<font color="#E5E5E5"> handshake two round</font>

891
00:41:59,580 --> 00:42:04,350
trips<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you have the invalidation</font>

892
00:42:01,140 --> 00:42:07,230
trip and then<font color="#E5E5E5"> the new additional</font>

893
00:42:04,350 --> 00:42:11,580
handshake<font color="#E5E5E5"> so you do lose in that way yes</font>

894
00:42:07,230 --> 00:42:13,950
<font color="#CCCCCC">but keep in mind</font><font color="#E5E5E5"> by aggressively</font>

895
00:42:11,580 --> 00:42:15,990
changing<font color="#E5E5E5"> that that session ticket</font>

896
00:42:13,950 --> 00:42:18,480
encrypting key<font color="#CCCCCC"> you're you're kind of</font>

897
00:42:15,990 --> 00:42:20,370
also<font color="#E5E5E5"> protecting against these forward</font>

898
00:42:18,480 --> 00:42:21,930
secrecy<font color="#E5E5E5"> concerns against the zero on</font>

899
00:42:20,370 --> 00:42:23,790
trip data<font color="#E5E5E5"> because once you remove</font><font color="#CCCCCC"> that</font>

900
00:42:21,930 --> 00:42:26,520
key from<font color="#E5E5E5"> memory it's gone forever</font>

901
00:42:23,790 --> 00:42:28,200
<font color="#E5E5E5">and anything</font><font color="#CCCCCC"> encrypted</font><font color="#E5E5E5"> with any of that</font>

902
00:42:26,520 --> 00:42:37,830
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> round-trip data encrypted with that</font>

903
00:42:28,200 --> 00:42:39,509
key<font color="#E5E5E5"> can't be decrypted now you'd</font>

904
00:42:37,830 --> 00:42:42,029
mentioned earlier<font color="#CCCCCC"> that had supported</font><font color="#E5E5E5"> on</font>

905
00:42:39,510 --> 00:42:44,780
most devices<font color="#E5E5E5"> where do you see from a</font>

906
00:42:42,030 --> 00:42:47,430
<font color="#CCCCCC">ratification and adoption standpoint</font>

907
00:42:44,780 --> 00:42:49,380
<font color="#E5E5E5">from both their browser standpoint as</font>

908
00:42:47,430 --> 00:42:51,740
well<font color="#E5E5E5"> as</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> service standpoint</font><font color="#CCCCCC"> where do</font>

909
00:42:49,380 --> 00:42:55,470
you see the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> biggest adoption and</font>

910
00:42:51,740 --> 00:42:58,680
ratification<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> across the bigger</font>

911
00:42:55,470 --> 00:43:00,660
<font color="#E5E5E5">Internet</font><font color="#CCCCCC"> so I</font><font color="#E5E5E5"> don't know if this will</font>

912
00:42:58,680 --> 00:43:03,149
<font color="#CCCCCC">actually answer that specific question</font>

913
00:43:00,660 --> 00:43:05,730
but<font color="#CCCCCC"> CloudFlare has an interesting blog</font>

914
00:43:03,150 --> 00:43:09,330
<font color="#E5E5E5">about deploying TLS 1.3 and they found</font>

915
00:43:05,730 --> 00:43:11,340
<font color="#E5E5E5">that I think now they get like ninety</font>

916
00:43:09,330 --> 00:43:13,259
eight point four percent success rates

917
00:43:11,340 --> 00:43:17,580
<font color="#E5E5E5">but there's a lot of</font><font color="#CCCCCC"> middle boxes out</font>

918
00:43:13,260 --> 00:43:20,940
there<font color="#E5E5E5"> that don't abide by previous Tila</font>

919
00:43:17,580 --> 00:43:25,080
specifications correctly so it screws

920
00:43:20,940 --> 00:43:26,430
them up so until they can<font color="#E5E5E5"> figure that</font>

921
00:43:25,080 --> 00:43:28,950
out<font color="#E5E5E5"> and</font><font color="#CCCCCC"> they're and they continue to</font>

922
00:43:26,430 --> 00:43:31,529
<font color="#CCCCCC">modify what the handshake looks like to</font>

923
00:43:28,950 --> 00:43:33,810
<font color="#E5E5E5">make it look like TLS 1.2 so these</font>

924
00:43:31,530 --> 00:43:35,520
middleware boxes will<font color="#CCCCCC"> be able to process</font>

925
00:43:33,810 --> 00:43:37,980
<font color="#E5E5E5">it and basically then just reject it</font>

926
00:43:35,520 --> 00:43:40,440
<font color="#CCCCCC">right now or so I fall back on our</font>

927
00:43:37,980 --> 00:43:43,230
<font color="#CCCCCC">previous version right</font><font color="#E5E5E5"> now they just did</font>

928
00:43:40,440 --> 00:43:45,510
<font color="#E5E5E5">his barf and they they don't accept</font>

929
00:43:43,230 --> 00:43:48,180
connections<font color="#E5E5E5"> so I think that's kind of</font>

930
00:43:45,510 --> 00:43:54,210
the the<font color="#CCCCCC"> stopping point</font><font color="#E5E5E5"> in widespread</font>

931
00:43:48,180 --> 00:43:57,109
<font color="#E5E5E5">adoption right now yeah hopefully</font><font color="#CCCCCC"> that</font>

932
00:43:54,210 --> 00:43:57,110
sort of answers your question

933
00:44:03,070 --> 00:44:21,670
right yes so the<font color="#CCCCCC"> question I was</font><font color="#E5E5E5"> gonna</font>

934
00:44:19,070 --> 00:44:24,880
<font color="#E5E5E5">ask initially was around whether or not</font>

935
00:44:21,670 --> 00:44:28,850
the server could simply encode<font color="#E5E5E5"> its</font>

936
00:44:24,880 --> 00:44:30,620
<font color="#E5E5E5">expected lifetime on the</font><font color="#CCCCCC"> key to stop</font>

937
00:44:28,850 --> 00:44:32,120
<font color="#E5E5E5">having them so the client could read it</font>

938
00:44:30,620 --> 00:44:34,520
<font color="#E5E5E5">and say this</font><font color="#CCCCCC"> Keys only gonna be valid</font>

939
00:44:32,120 --> 00:44:36,830
<font color="#CCCCCC">until October or whatever you know</font><font color="#E5E5E5"> what</font>

940
00:44:34,520 --> 00:44:38,210
yeah<font color="#CCCCCC"> time in</font><font color="#E5E5E5"> the future</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> and then</font>

941
00:44:36,830 --> 00:44:39,350
so the client reads this<font color="#E5E5E5"> is I don't need</font>

942
00:44:38,210 --> 00:44:40,970
<font color="#CCCCCC">to make</font><font color="#E5E5E5"> that request because I already</font>

943
00:44:39,350 --> 00:44:42,410
know<font color="#E5E5E5"> that's gonna be invalid but I don't</font>

944
00:44:40,970 --> 00:44:44,779
know if potentially<font color="#E5E5E5"> that opens up some</font>

945
00:44:42,410 --> 00:44:48,379
<font color="#CCCCCC">other problems yeah so that</font><font color="#E5E5E5"> but there's</font>

946
00:44:44,780 --> 00:44:51,080
a<font color="#E5E5E5"> there's a ticket time that's involved</font>

947
00:44:48,380 --> 00:44:52,820
in that<font color="#CCCCCC"> message but I don't think</font><font color="#E5E5E5"> that</font>

948
00:44:51,080 --> 00:44:56,270
the specification even states anything

949
00:44:52,820 --> 00:44:58,040
about the client<font color="#E5E5E5"> honoring that and not</font>

950
00:44:56,270 --> 00:44:59,030
sending result requests after<font color="#E5E5E5"> that I</font>

951
00:44:58,040 --> 00:45:02,090
don't<font color="#CCCCCC"> think there's a mechanism</font><font color="#E5E5E5"> for that</font>

952
00:44:59,030 --> 00:45:05,960
<font color="#E5E5E5">but that would</font><font color="#CCCCCC"> be a good improvement</font>

953
00:45:02,090 --> 00:45:09,050
<font color="#E5E5E5">so suggest it</font><font color="#CCCCCC"> to the working group to</font>

954
00:45:05,960 --> 00:45:11,980
shy for<font color="#CCCCCC"> that I think but</font><font color="#E5E5E5"> to his point I</font>

955
00:45:09,050 --> 00:45:14,210
think<font color="#E5E5E5"> historically with these TLS</font>

956
00:45:11,980 --> 00:45:16,640
modifications will get server side

957
00:45:14,210 --> 00:45:18,050
support<font color="#E5E5E5"> and it'll work</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'll be</font><font color="#CCCCCC"> out</font>

958
00:45:16,640 --> 00:45:19,700
<font color="#CCCCCC">there for a couple years and then</font>

959
00:45:18,050 --> 00:45:20,870
<font color="#CCCCCC">finally</font><font color="#E5E5E5"> we'll start feeling confident</font>

960
00:45:19,700 --> 00:45:22,759
enough that<font color="#E5E5E5"> enough of the clients</font>

961
00:45:20,870 --> 00:45:25,009
<font color="#E5E5E5">actually support</font><font color="#CCCCCC"> it right right</font><font color="#E5E5E5"> before</font>

962
00:45:22,760 --> 00:45:27,410
will actually get adoption on it so I

963
00:45:25,010 --> 00:45:28,700
think that widespread<font color="#E5E5E5"> anyway right well</font>

964
00:45:27,410 --> 00:45:30,080
I'll be<font color="#E5E5E5"> scared</font><font color="#CCCCCC"> that oh you know we got a</font>

965
00:45:28,700 --> 00:45:31,910
<font color="#E5E5E5">mobile app out there that's running on a</font>

966
00:45:30,080 --> 00:45:33,590
you<font color="#E5E5E5"> know early version of Android</font><font color="#CCCCCC"> that</font>

967
00:45:31,910 --> 00:45:35,299
doesn't have any concept of this<font color="#E5E5E5"> and so</font>

968
00:45:33,590 --> 00:45:37,220
it won't<font color="#CCCCCC"> work</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> write potentially</font>

969
00:45:35,300 --> 00:45:38,870
then we start looking<font color="#E5E5E5"> at okay here comes</font>

970
00:45:37,220 --> 00:45:40,970
the<font color="#E5E5E5"> next round of downgrade attacks</font>

971
00:45:38,870 --> 00:45:43,040
<font color="#E5E5E5">right like because oh I can force you</font>

972
00:45:40,970 --> 00:45:44,930
<font color="#E5E5E5">back to TLS 1.2 and</font><font color="#CCCCCC"> then attack whatever</font>

973
00:45:43,040 --> 00:45:46,640
weakness was in the president there<font color="#E5E5E5"> well</font>

974
00:45:44,930 --> 00:45:48,620
<font color="#E5E5E5">that's an interesting</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> I don't know</font>

975
00:45:46,640 --> 00:45:52,190
<font color="#E5E5E5">if it</font><font color="#CCCCCC"> really gets to that</font><font color="#E5E5E5"> exact attack</font>

976
00:45:48,620 --> 00:45:54,770
but there's protections now in 1.3<font color="#E5E5E5"> that</font>

977
00:45:52,190 --> 00:45:57,980
protect against downgrade attacks<font color="#CCCCCC"> so if</font>

978
00:45:54,770 --> 00:45:59,960
a TLS 1.3 client talks to a<font color="#CCCCCC"> TLS 1.3</font>

979
00:45:57,980 --> 00:46:04,730
server and an attacker attempts to

980
00:45:59,960 --> 00:46:06,500
downgrade<font color="#E5E5E5"> them the the server say were</font>

981
00:46:04,730 --> 00:46:10,070
downgrading the TLS 1.2<font color="#CCCCCC"> it was we found</font>

982
00:46:06,500 --> 00:46:12,410
<font color="#E5E5E5">a big break there the server the TLS 1.3</font>

983
00:46:10,070 --> 00:46:15,460
server when it speaks<font color="#E5E5E5"> to us 1.2</font>

984
00:46:12,410 --> 00:46:18,049
we'll put a canary string in<font color="#CCCCCC"> it's random</font>

985
00:46:15,460 --> 00:46:20,450
server value<font color="#E5E5E5"> so the client will be</font>

986
00:46:18,050 --> 00:46:21,710
because the client speaks<font color="#CCCCCC"> 1.3 it will</font>

987
00:46:20,450 --> 00:46:23,720
see that<font color="#E5E5E5"> canary value and be like hey</font>

988
00:46:21,710 --> 00:46:26,030
there<font color="#E5E5E5"> was a downgrade attack we should</font>

989
00:46:23,720 --> 00:46:32,240
be<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> speak</font><font color="#CCCCCC"> TLS 1.3 something's</font>

990
00:46:26,030 --> 00:46:35,660
wrong<font color="#CCCCCC"> abort the session yeah great sorry</font>

991
00:46:32,240 --> 00:46:37,819
talk<font color="#CCCCCC"> so the question is about that use</font>

992
00:46:35,660 --> 00:46:41,750
case<font color="#CCCCCC"> that</font><font color="#E5E5E5"> probably we all experienced in</font>

993
00:46:37,820 --> 00:46:43,640
the past which is<font color="#E5E5E5"> a cipher</font><font color="#CCCCCC"> is becoming a</font>

994
00:46:41,750 --> 00:46:46,450
secure<font color="#E5E5E5"> and you don't want people to</font>

995
00:46:43,640 --> 00:46:49,370
resume but you still want<font color="#E5E5E5"> to you know</font>

996
00:46:46,450 --> 00:46:51,020
<font color="#CCCCCC">support it</font><font color="#E5E5E5"> because you know there's a</font>

997
00:46:49,370 --> 00:46:55,730
bunch<font color="#E5E5E5"> of clients</font><font color="#CCCCCC"> they're out there</font><font color="#E5E5E5"> their</font>

998
00:46:51,020 --> 00:46:58,580
support how do you handle that<font color="#CCCCCC"> I think</font>

999
00:46:55,730 --> 00:47:01,190
you handle<font color="#E5E5E5"> it by claiming and assuming</font>

1000
00:46:58,580 --> 00:47:03,410
<font color="#E5E5E5">that</font><font color="#CCCCCC"> AAS will</font><font color="#E5E5E5"> be secure until we have</font>

1001
00:47:01,190 --> 00:47:05,390
quantum computers and when we have that

1002
00:47:03,410 --> 00:47:11,480
<font color="#CCCCCC">we have aes 256 that we can fall back to</font>

1003
00:47:05,390 --> 00:47:13,910
<font color="#CCCCCC">i mean i think that i don't</font><font color="#E5E5E5"> there's any</font>

1004
00:47:11,480 --> 00:47:15,920
like agility kind of mechanisms<font color="#E5E5E5"> built</font>

1005
00:47:13,910 --> 00:47:19,370
into the specification<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's one of</font>

1006
00:47:15,920 --> 00:47:21,320
those<font color="#E5E5E5"> things where you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> we'll add on</font>

1007
00:47:19,370 --> 00:47:26,990
to the spec to increase the cipher suite

1008
00:47:21,320 --> 00:47:30,230
choices if that if<font color="#E5E5E5"> that happens one of</font>

1009
00:47:26,990 --> 00:47:32,240
<font color="#E5E5E5">the things you mentioned as to reviews</font>

1010
00:47:30,230 --> 00:47:35,780
from<font color="#CCCCCC"> two</font><font color="#E5E5E5"> round trips or one toe tip it's</font>

1011
00:47:32,240 --> 00:47:38,419
gonna guess which one is<font color="#CCCCCC"> gonna use what</font>

1012
00:47:35,780 --> 00:47:40,940
if they force<font color="#E5E5E5"> it to guess the lower</font>

1013
00:47:38,420 --> 00:47:42,710
secure one<font color="#CCCCCC"> i don't know i</font><font color="#E5E5E5"> mean is the</font>

1014
00:47:40,940 --> 00:47:45,020
<font color="#CCCCCC">free</font><font color="#E5E5E5"> element and elliptical</font><font color="#CCCCCC"> provision at</font>

1015
00:47:42,710 --> 00:47:49,940
<font color="#CCCCCC">home how much different security is</font>

1016
00:47:45,020 --> 00:47:52,640
<font color="#E5E5E5">there but so one day of only</font><font color="#CCCCCC"> included</font>

1017
00:47:49,940 --> 00:47:56,300
groups that meet a minimum bar<font color="#E5E5E5"> okay so</font>

1018
00:47:52,640 --> 00:48:03,049
that's one good<font color="#CCCCCC"> thing so it's the it's</font>

1019
00:47:56,300 --> 00:48:04,520
<font color="#CCCCCC">the client who is so an attacker will</font>

1020
00:48:03,050 --> 00:48:06,890
not be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> sit so the client guesses</font>

1021
00:48:04,520 --> 00:48:08,570
if the server doesn't<font color="#E5E5E5"> support that or if</font>

1022
00:48:06,890 --> 00:48:10,970
<font color="#E5E5E5">you're attempting a downgrade the server</font>

1023
00:48:08,570 --> 00:48:12,650
<font color="#E5E5E5">can say hey i don't support this try</font>

1024
00:48:10,970 --> 00:48:16,580
this one<font color="#CCCCCC"> instead so we fall back</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

1025
00:48:12,650 --> 00:48:18,590
<font color="#E5E5E5">two</font><font color="#CCCCCC"> round-trip but the the transcript</font>

1026
00:48:16,580 --> 00:48:20,600
hashes between the client and<font color="#CCCCCC"> the server</font>

1027
00:48:18,590 --> 00:48:23,930
will<font color="#CCCCCC"> be different so that will make the</font>

1028
00:48:20,600 --> 00:48:25,730
the final key exchange fail because they

1029
00:48:23,930 --> 00:48:27,859
will<font color="#E5E5E5"> agree on different keys</font>

1030
00:48:25,730 --> 00:48:29,930
so there is like you<font color="#E5E5E5"> know downgrade</font>

1031
00:48:27,860 --> 00:48:38,450
protection in<font color="#CCCCCC"> that sense already built</font>

1032
00:48:29,930 --> 00:48:40,040
into the protocol this<font color="#E5E5E5"> is the first</font>

1033
00:48:38,450 --> 00:48:42,109
<font color="#CCCCCC">question does the spec have any</font>

1034
00:48:40,040 --> 00:48:44,540
recommended defaults<font color="#E5E5E5"> for like zero run</font>

1035
00:48:42,110 --> 00:48:47,260
trip time and the second<font color="#CCCCCC"> question</font><font color="#E5E5E5"> is</font>

1036
00:48:44,540 --> 00:48:49,550
<font color="#E5E5E5">there</font><font color="#CCCCCC"> any piece of</font><font color="#E5E5E5"> software clients that</font>

1037
00:48:47,260 --> 00:48:52,970
you know right now that<font color="#E5E5E5"> won't be</font>

1038
00:48:49,550 --> 00:48:57,530
upgraded to<font color="#E5E5E5"> support TLS 1.3 I do not</font>

1039
00:48:52,970 --> 00:48:59,919
know the second question<font color="#E5E5E5"> the first the</font>

1040
00:48:57,530 --> 00:49:05,270
<font color="#CCCCCC">specification is kind of big and it says</font>

1041
00:48:59,920 --> 00:49:06,980
make<font color="#CCCCCC"> sure you talk about the profile of</font>

1042
00:49:05,270 --> 00:49:08,810
<font color="#E5E5E5">your application I don't know what the</font>

1043
00:49:06,980 --> 00:49:10,310
profile of<font color="#E5E5E5"> your application means the</font>

1044
00:49:08,810 --> 00:49:13,009
spec is very unclear<font color="#E5E5E5"> with that so they</font>

1045
00:49:10,310 --> 00:49:14,810
<font color="#CCCCCC">don't really that</font><font color="#E5E5E5"> their their guidance</font>

1046
00:49:13,010 --> 00:49:17,030
is I mean<font color="#CCCCCC"> basically just don't turn</font><font color="#E5E5E5"> it</font>

1047
00:49:14,810 --> 00:49:19,690
<font color="#E5E5E5">on unless you you need it</font><font color="#CCCCCC"> or you know</font>

1048
00:49:17,030 --> 00:49:19,690
you're doing with<font color="#E5E5E5"> it</font>

1049
00:49:23,780 --> 00:49:28,370
so you mentioned<font color="#CCCCCC"> the CEO round trip was</font>

1050
00:49:25,490 --> 00:49:30,740
a<font color="#E5E5E5"> requirement for 1.3 and it apparently</font>

1051
00:49:28,370 --> 00:49:32,089
has<font color="#CCCCCC"> some implications</font><font color="#E5E5E5"> to to it</font><font color="#CCCCCC"> reviews</font>

1052
00:49:30,740 --> 00:49:34,189
it were there any other requirements

1053
00:49:32,090 --> 00:49:36,950
that<font color="#E5E5E5"> were dropped because they</font><font color="#CCCCCC"> weren't</font>

1054
00:49:34,190 --> 00:49:43,550
able to<font color="#E5E5E5"> implement</font><font color="#CCCCCC"> them in a secure way</font>

1055
00:49:36,950 --> 00:49:46,069
or successfully not<font color="#E5E5E5"> that I know of with</font>

1056
00:49:43,550 --> 00:49:48,560
<font color="#E5E5E5">1.2 it was pretty transparent to the</font>

1057
00:49:46,070 --> 00:49:51,050
application what was going on with the

1058
00:49:48,560 --> 00:49:52,549
cipher<font color="#E5E5E5"> suite and how many run trips with</font>

1059
00:49:51,050 --> 00:49:57,140
1.3 you're talking about possibly

1060
00:49:52,550 --> 00:49:58,730
conditionally disabling<font color="#CCCCCC"> 0 round trips so</font>

1061
00:49:57,140 --> 00:49:59,960
is that actually gonna be exposed to the

1062
00:49:58,730 --> 00:50:01,790
application in some way where I can<font color="#CCCCCC"> talk</font>

1063
00:49:59,960 --> 00:50:04,580
<font color="#E5E5E5">to the server that's that's a good</font>

1064
00:50:01,790 --> 00:50:08,870
question<font color="#CCCCCC"> I don't know what</font><font color="#E5E5E5"> those</font><font color="#CCCCCC"> API is</font>

1065
00:50:04,580 --> 00:50:13,490
and<font color="#CCCCCC"> whatnot it's gonna look</font><font color="#E5E5E5"> like I'm</font>

1066
00:50:08,870 --> 00:50:15,020
gonna guess that the the<font color="#CCCCCC"> browser's</font><font color="#E5E5E5"> like</font>

1067
00:50:13,490 --> 00:50:18,470
<font color="#CCCCCC">0</font><font color="#E5E5E5"> round trip they know what they're</font>

1068
00:50:15,020 --> 00:50:20,540
doing<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know first is Google</font><font color="#CCCCCC"> they know</font>

1069
00:50:18,470 --> 00:50:23,959
what requests to their back-end<font color="#E5E5E5"> servers</font>

1070
00:50:20,540 --> 00:50:27,050
are safe to<font color="#CCCCCC"> use your round trip so they</font>

1071
00:50:23,960 --> 00:50:29,710
<font color="#E5E5E5">will utilize that themselves to you know</font>

1072
00:50:27,050 --> 00:50:32,270
perform<font color="#CCCCCC"> those actions</font><font color="#E5E5E5"> gain some speed</font>

1073
00:50:29,710 --> 00:50:34,310
whether it's<font color="#E5E5E5"> gonna expose</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> house and</font>

1074
00:50:32,270 --> 00:50:36,140
you supposed<font color="#E5E5E5"> to you know our</font>

1075
00:50:34,310 --> 00:50:38,930
applications<font color="#CCCCCC"> I don't know that's</font><font color="#E5E5E5"> gonna</font>

1076
00:50:36,140 --> 00:50:41,808
look like<font color="#CCCCCC"> and I</font>

1077
00:50:38,930 --> 00:50:43,940
<font color="#CCCCCC">I don't want to</font><font color="#E5E5E5"> make any so it might be</font>

1078
00:50:41,809 --> 00:50:46,130
in your<font color="#E5E5E5"> application stack you would have</font>

1079
00:50:43,940 --> 00:50:47,299
certain layers<font color="#E5E5E5"> that wouldn't implement</font>

1080
00:50:46,130 --> 00:50:50,210
it because<font color="#CCCCCC"> of whatever security</font>

1081
00:50:47,299 --> 00:50:52,538
implications<font color="#E5E5E5"> versus it just seems kind</font>

1082
00:50:50,210 --> 00:50:55,190
of crazy<font color="#E5E5E5"> that you know</font><font color="#CCCCCC"> you could have</font>

1083
00:50:52,539 --> 00:50:57,799
<font color="#E5E5E5">Ruby on Rails or a PHP app say oh</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> by</font>

1084
00:50:55,190 --> 00:51:00,260
the way<font color="#CCCCCC"> apache turn off zero</font><font color="#E5E5E5"> roundtrip</font>

1085
00:50:57,799 --> 00:51:02,119
<font color="#CCCCCC">just it's like yeah punching through a</font>

1086
00:51:00,260 --> 00:51:05,000
firewall<font color="#CCCCCC"> that i shouldn't feel permeable</font>

1087
00:51:02,119 --> 00:51:05,779
<font color="#CCCCCC">I agree I agree and yeah I don't know</font>

1088
00:51:05,000 --> 00:51:10,069
what it wouldn't<font color="#E5E5E5"> look</font><font color="#CCCCCC"> like</font>

1089
00:51:05,779 --> 00:51:13,609
so hopefully the you know Ruby<font color="#CCCCCC"> on Rails</font>

1090
00:51:10,069 --> 00:51:22,270
or<font color="#E5E5E5"> PHP are able to expose that in a sane</font>

1091
00:51:13,609 --> 00:51:25,490
way thank<font color="#E5E5E5"> you I have a question about</font>

1092
00:51:22,270 --> 00:51:29,180
what<font color="#CCCCCC"> you see is the</font><font color="#E5E5E5"> adoption of 1.3 I</font>

1093
00:51:25,490 --> 00:51:31,669
know that<font color="#E5E5E5"> chrome has implemented some of</font>

1094
00:51:29,180 --> 00:51:33,500
<font color="#CCCCCC">that</font><font color="#E5E5E5"> but what</font><font color="#CCCCCC"> about web servers out</font>

1095
00:51:31,670 --> 00:51:36,730
<font color="#CCCCCC">there that you're aware of mainstream</font>

1096
00:51:33,500 --> 00:51:40,130
ones that might already be adopting it I

1097
00:51:36,730 --> 00:51:47,750
don't think<font color="#E5E5E5"> that</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> I know CloudFlare</font>

1098
00:51:40,130 --> 00:51:48,670
<font color="#CCCCCC">has I think yeah I actually don't really</font>

1099
00:51:47,750 --> 00:51:58,599
<font color="#CCCCCC">know</font>

1100
00:51:48,670 --> 00:51:58,599
thank you Sarah thank you for coming

1101
00:52:04,690 --> 00:52:06,750
you

