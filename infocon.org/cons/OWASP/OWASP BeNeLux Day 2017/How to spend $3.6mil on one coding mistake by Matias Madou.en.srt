1
00:00:03,330 --> 00:00:08,920
all right good morning everybody my name

2
00:00:06,610 --> 00:00:10,780
is mathias madhu and today i would like

3
00:00:08,920 --> 00:00:12,910
to talk a little bit about budgeting and

4
00:00:10,780 --> 00:00:14,919
if you have an application security

5
00:00:12,910 --> 00:00:16,750
budget i'm how you can best spend that

6
00:00:14,920 --> 00:00:19,029
and and what kind of buckets you have

7
00:00:16,750 --> 00:00:22,090
available to you and what gives you the

8
00:00:19,029 --> 00:00:25,390
best return of investment so my name is

9
00:00:22,090 --> 00:00:27,430
mathias i started my career at Ghent

10
00:00:25,390 --> 00:00:30,220
University I pursued a PhD in

11
00:00:27,430 --> 00:00:32,229
application security it was more around

12
00:00:30,220 --> 00:00:34,449
code obfuscation and essentially I

13
00:00:32,229 --> 00:00:36,640
started to realize that I'm it's not

14
00:00:34,449 --> 00:00:39,910
really a good idea to to hide stuff in

15
00:00:36,640 --> 00:00:41,200
code right you can buy obfuscation but

16
00:00:39,910 --> 00:00:43,629
still the vulnerabilities are in there

17
00:00:41,200 --> 00:00:46,300
right so I was doing static analysis and

18
00:00:43,629 --> 00:00:48,760
and with my PhD I moved to the US I

19
00:00:46,300 --> 00:00:51,099
joined a company called fortify that was

20
00:00:48,760 --> 00:00:52,870
very small at the time I was the second

21
00:00:51,100 --> 00:00:54,219
researcher in there we were trying to

22
00:00:52,870 --> 00:00:56,500
find the sequel injection the cross-site

23
00:00:54,219 --> 00:00:58,870
scripting sin code and over the course

24
00:00:56,500 --> 00:01:00,340
of seven years I realized that that I

25
00:00:58,870 --> 00:01:04,660
think we were really good at finding

26
00:01:00,340 --> 00:01:06,250
problems in code I also saw that the

27
00:01:04,660 --> 00:01:07,990
organizations that were using for the

28
00:01:06,250 --> 00:01:09,670
fight they were actually piling up the

29
00:01:07,990 --> 00:01:11,500
bots the bugs you know they were finding

30
00:01:09,670 --> 00:01:13,330
good stuff the sequel injections across

31
00:01:11,500 --> 00:01:14,890
sites good things really really good

32
00:01:13,330 --> 00:01:17,229
stuff but also piling up the bugs

33
00:01:14,890 --> 00:01:18,820
because nobody knew how to fix these

34
00:01:17,229 --> 00:01:20,619
problems you know it is one thing to

35
00:01:18,820 --> 00:01:23,110
find problems it's another thing to fix

36
00:01:20,619 --> 00:01:24,790
problems and at the same time they kept

37
00:01:23,110 --> 00:01:28,150
on introducing new problems in code so

38
00:01:24,790 --> 00:01:30,159
um with without real realization I said

39
00:01:28,150 --> 00:01:32,380
hey maybe we should we should start from

40
00:01:30,159 --> 00:01:33,850
the beginning you know how is it

41
00:01:32,380 --> 00:01:35,500
possible that people keep on introducing

42
00:01:33,850 --> 00:01:38,679
problems in code how is it possible that

43
00:01:35,500 --> 00:01:40,509
nobody knows how to fix code so with

44
00:01:38,680 --> 00:01:42,310
that knowledge I I started the company

45
00:01:40,509 --> 00:01:44,140
called sensei security where the idea

46
00:01:42,310 --> 00:01:44,829
was to guide developers in writing

47
00:01:44,140 --> 00:01:47,530
secure codes

48
00:01:44,829 --> 00:01:50,110
um and I found some really good guys

49
00:01:47,530 --> 00:01:51,790
partners in crime from secure called

50
00:01:50,110 --> 00:01:53,290
warrior they were doing the exact same

51
00:01:51,790 --> 00:01:55,240
thing they wanted to tackle the problem

52
00:01:53,290 --> 00:01:57,700
like hey how can we educate developers

53
00:01:55,240 --> 00:01:59,439
how can we tell him how to to write

54
00:01:57,700 --> 00:02:01,570
secure code but at the same time how can

55
00:01:59,439 --> 00:02:03,880
we provide him with tools and solutions

56
00:02:01,570 --> 00:02:05,829
on a day to day basis that they can

57
00:02:03,880 --> 00:02:07,600
write secure code so we merged the two

58
00:02:05,829 --> 00:02:10,899
organizations and and we are secure

59
00:02:07,600 --> 00:02:13,359
called warrior and and we help

60
00:02:10,899 --> 00:02:14,560
developers write secure code and

61
00:02:13,360 --> 00:02:16,000
essentially that's what it says we want

62
00:02:14,560 --> 00:02:16,510
to make sure everything is running code

63
00:02:16,000 --> 00:02:18,340
right ever

64
00:02:16,510 --> 00:02:20,739
is running code so in sending of

65
00:02:18,340 --> 00:02:21,970
building fences around it we think that

66
00:02:20,739 --> 00:02:23,739
developers are your first line of

67
00:02:21,970 --> 00:02:25,299
defense you really have to educate them

68
00:02:23,739 --> 00:02:29,200
you have to give them everything that

69
00:02:25,299 --> 00:02:30,310
the power the means to rise so today I

70
00:02:29,200 --> 00:02:31,839
would like to talk a little bit about

71
00:02:30,310 --> 00:02:33,700
application security and I thought

72
00:02:31,840 --> 00:02:35,110
initially I would give this introduction

73
00:02:33,700 --> 00:02:37,179
because everybody knows about that

74
00:02:35,110 --> 00:02:38,620
but there's there's one interesting

75
00:02:37,180 --> 00:02:40,030
stuff that I couldn't get rid of and I

76
00:02:38,620 --> 00:02:43,209
really wanted to talk about it so people

77
00:02:40,030 --> 00:02:45,250
say well if you write problems in code

78
00:02:43,209 --> 00:02:46,599
it's gonna lead to catastrophic failures

79
00:02:45,250 --> 00:02:48,189
and you can lose money can you lose

80
00:02:46,599 --> 00:02:50,409
money of course you can lose money look

81
00:02:48,189 --> 00:02:55,299
at that Ariana 5 rocket they tried to

82
00:02:50,409 --> 00:02:57,638
cram a 46 bit number into a 16 bit area

83
00:02:55,299 --> 00:02:59,440
that didn't work they blanked out the

84
00:02:57,639 --> 00:03:01,930
error handling for performance reason

85
00:02:59,440 --> 00:03:03,220
and it blew up 7 billion was gone 10

86
00:03:01,930 --> 00:03:05,079
years of research was gone

87
00:03:03,220 --> 00:03:08,019
so can it cost money absolutely that's

88
00:03:05,079 --> 00:03:11,379
an example mixed up and this is an

89
00:03:08,019 --> 00:03:13,359
interesting one and and and Sony they

90
00:03:11,379 --> 00:03:15,040
say well it can lead to brand damage yes

91
00:03:13,359 --> 00:03:16,900
it can lead to brain damage if you think

92
00:03:15,040 --> 00:03:20,379
about it they go back through a sequel

93
00:03:16,900 --> 00:03:21,639
injection but that that's one thing but

94
00:03:20,379 --> 00:03:23,260
they stored all their passwords in

95
00:03:21,639 --> 00:03:25,720
clear-text and an excel file that's

96
00:03:23,260 --> 00:03:27,819
that's pretty bad right but then I got

97
00:03:25,720 --> 00:03:29,620
the question last in my last talk and I

98
00:03:27,819 --> 00:03:31,179
said you know but the stock didn't go

99
00:03:29,620 --> 00:03:33,970
down you know it went down a little bit

100
00:03:31,180 --> 00:03:36,609
but now it's up again and I started like

101
00:03:33,970 --> 00:03:38,889
that is true it's it's not related to

102
00:03:36,609 --> 00:03:40,720
money over here you know and they have

103
00:03:38,889 --> 00:03:43,480
some brand damage and at the same time

104
00:03:40,720 --> 00:03:46,540
I'm still talking about that so you

105
00:03:43,480 --> 00:03:48,910
would say they still feel it but even

106
00:03:46,540 --> 00:03:51,489
bad publicity is still publicity so so

107
00:03:48,910 --> 00:03:52,918
now I I'm no longer sure if it was a bad

108
00:03:51,489 --> 00:03:55,540
thing or a good thing for Sony because

109
00:03:52,919 --> 00:03:57,370
I'm actually still talking about that so

110
00:03:55,540 --> 00:03:58,720
I think it's only bad for the people

111
00:03:57,370 --> 00:04:01,000
that were in that position that that

112
00:03:58,720 --> 00:04:02,590
stored the passwords in the excel files

113
00:04:01,000 --> 00:04:04,449
you know it's been bad for these people

114
00:04:02,590 --> 00:04:07,419
but other than that you know I don't

115
00:04:04,449 --> 00:04:09,730
know sea level people get fired

116
00:04:07,419 --> 00:04:11,849
I think target is a good example I

117
00:04:09,730 --> 00:04:16,899
cannot remember his name but it is a

118
00:04:11,849 --> 00:04:20,978
dear dear Otis dear Otis the role is um

119
00:04:16,899 --> 00:04:23,229
he wasn't video as the CIO and he had

120
00:04:20,978 --> 00:04:25,780
got a lot of knowledge in the security

121
00:04:23,229 --> 00:04:28,690
world so he was really well educated he

122
00:04:25,780 --> 00:04:30,340
knew his stuff they got hacked so yeah

123
00:04:28,690 --> 00:04:32,650
he had to go so these

124
00:04:30,340 --> 00:04:35,830
c-level people sometimes have to step

125
00:04:32,650 --> 00:04:37,960
down because of breaches so apps like

126
00:04:35,830 --> 00:04:41,859
what's in the name in the old days this

127
00:04:37,960 --> 00:04:43,960
is the the the Ariana five problem where

128
00:04:41,860 --> 00:04:45,639
they blanked out the error coding or the

129
00:04:43,960 --> 00:04:47,530
error handling and for that particular

130
00:04:45,639 --> 00:04:50,530
problems of the rocket blew up this is

131
00:04:47,530 --> 00:04:52,510
ages ago right but this is brand new

132
00:04:50,530 --> 00:04:54,309
right sequel injection this is what we

133
00:04:52,510 --> 00:04:57,010
that's what we face on a day-to-day

134
00:04:54,310 --> 00:05:01,360
basis right this is really the new stuff

135
00:04:57,010 --> 00:05:03,789
sequel injection well actually it is it

136
00:05:01,360 --> 00:05:07,139
is quite interesting I got this frame

137
00:05:03,790 --> 00:05:09,639
it's a it's a it's an X key from from

138
00:05:07,139 --> 00:05:11,229
about psycho injection and and it's in

139
00:05:09,639 --> 00:05:14,080
real frame I brought it with me when I

140
00:05:11,229 --> 00:05:16,990
was doing the the MOOC interview with

141
00:05:14,080 --> 00:05:19,690
with Philip it's it's a real frame and I

142
00:05:16,990 --> 00:05:21,789
got that frame and it's an interesting

143
00:05:19,690 --> 00:05:23,139
one so I brought a two to our office but

144
00:05:21,789 --> 00:05:25,479
the really interesting part about that

145
00:05:23,139 --> 00:05:27,370
was the back of the frame at the back of

146
00:05:25,479 --> 00:05:30,580
the frame I received this frame from

147
00:05:27,370 --> 00:05:34,350
from Jacob who was my manager at fortify

148
00:05:30,580 --> 00:05:37,030
in 2008 okay so so this goes back to

149
00:05:34,350 --> 00:05:38,620
2008 this is ten years old and at that

150
00:05:37,030 --> 00:05:39,940
point it was not even rocket science

151
00:05:38,620 --> 00:05:42,850
right at that point we were already

152
00:05:39,940 --> 00:05:44,919
working on the problem for years so

153
00:05:42,850 --> 00:05:46,840
sequel injection is not the new type of

154
00:05:44,919 --> 00:05:47,919
stuff you know it's is something that is

155
00:05:46,840 --> 00:05:50,500
very very old

156
00:05:47,919 --> 00:05:52,539
and yeah go out there go onto the we

157
00:05:50,500 --> 00:05:55,389
from sequel injection and you will find

158
00:05:52,539 --> 00:05:56,770
a long list of companies that get still

159
00:05:55,389 --> 00:05:59,020
hacked through sequel injection I think

160
00:05:56,770 --> 00:06:01,150
they gave up after 2015 they no longer

161
00:05:59,020 --> 00:06:02,320
add new entries in there of companies

162
00:06:01,150 --> 00:06:05,530
that got hacked through sequel injection

163
00:06:02,320 --> 00:06:06,729
because there's just too many and so

164
00:06:05,530 --> 00:06:08,679
what what is the root cause of this

165
00:06:06,729 --> 00:06:11,469
problem I think we're in an organization

166
00:06:08,680 --> 00:06:15,070
so actually um who is a application

167
00:06:11,470 --> 00:06:19,450
security person over here alright who is

168
00:06:15,070 --> 00:06:22,210
the developer good mix that's gonna be a

169
00:06:19,450 --> 00:06:23,800
fight right not only do not come along

170
00:06:22,210 --> 00:06:26,409
very well and you're in one room that's

171
00:06:23,800 --> 00:06:27,940
already good so so what normally

172
00:06:26,410 --> 00:06:29,710
application security people you know

173
00:06:27,940 --> 00:06:31,360
about problems in code I've never seen

174
00:06:29,710 --> 00:06:33,489
an empty bug tracking system maybe you

175
00:06:31,360 --> 00:06:35,050
guys have one but I've never seen one so

176
00:06:33,490 --> 00:06:36,430
you're aware of problems in your code

177
00:06:35,050 --> 00:06:38,229
and what you do is you ask your

178
00:06:36,430 --> 00:06:39,810
developer hey can you fix the code and

179
00:06:38,229 --> 00:06:42,610
the way you ask it it differs from

180
00:06:39,810 --> 00:06:43,870
organization to organization to make it

181
00:06:42,610 --> 00:06:46,540
politically correct

182
00:06:43,870 --> 00:06:48,370
and the developer he doesn't really have

183
00:06:46,540 --> 00:06:51,760
got a lot of good tools to help him

184
00:06:48,370 --> 00:06:53,530
right and and we asked him to fix it and

185
00:06:51,760 --> 00:06:55,270
normally the application security people

186
00:06:53,530 --> 00:06:56,619
it's very interesting that you guys are

187
00:06:55,270 --> 00:06:59,830
here because normally you are very

188
00:06:56,620 --> 00:07:01,060
understaffed and sorry so so first of

189
00:06:59,830 --> 00:07:03,460
all you're gonna ask the developer to

190
00:07:01,060 --> 00:07:06,280
ask the the to fix the problems in codes

191
00:07:03,460 --> 00:07:07,570
um well first of all yeah did the the

192
00:07:06,280 --> 00:07:08,198
the application security people you're

193
00:07:07,570 --> 00:07:10,659
understaffed

194
00:07:08,199 --> 00:07:12,880
according to besom you are two people

195
00:07:10,660 --> 00:07:15,060
per 100 developers so which means that

196
00:07:12,880 --> 00:07:18,040
you have to guide 50 developers at once

197
00:07:15,060 --> 00:07:20,590
pretty hard I would say at the same time

198
00:07:18,040 --> 00:07:22,330
um there's a ton of overhead for every

199
00:07:20,590 --> 00:07:24,638
problem that you find you have to find a

200
00:07:22,330 --> 00:07:26,740
solution you have to file in the burgh

201
00:07:24,639 --> 00:07:28,210
tracking system you have to split it up

202
00:07:26,740 --> 00:07:30,130
in a meeting as a developer you have to

203
00:07:28,210 --> 00:07:31,419
take out the the issue you have to find

204
00:07:30,130 --> 00:07:32,770
a problem to the solution you have to

205
00:07:31,419 --> 00:07:34,599
implement you have to test it you have

206
00:07:32,770 --> 00:07:36,070
to go through QA you have to go through

207
00:07:34,600 --> 00:07:37,900
staging you have to put it in production

208
00:07:36,070 --> 00:07:40,330
so for the slightest problem that you

209
00:07:37,900 --> 00:07:41,349
have in your code it takes a long long

210
00:07:40,330 --> 00:07:43,289
time

211
00:07:41,350 --> 00:07:46,419
to fix that so it costs a lot of money

212
00:07:43,289 --> 00:07:48,550
so what I see quite often is well you do

213
00:07:46,419 --> 00:07:50,349
the washed up tank or you try to do the

214
00:07:48,550 --> 00:07:52,330
washed up ten you get rid of that but

215
00:07:50,350 --> 00:07:55,570
everything beneath that you know is a

216
00:07:52,330 --> 00:07:57,280
no-go that's no time for that um at the

217
00:07:55,570 --> 00:07:59,139
same time people keep on introducing

218
00:07:57,280 --> 00:08:01,119
problems in encode over and over again

219
00:07:59,139 --> 00:08:02,560
so they keep on developing is never the

220
00:08:01,120 --> 00:08:04,539
time in a company where you say well

221
00:08:02,560 --> 00:08:06,550
we're gonna stop today we're gonna first

222
00:08:04,539 --> 00:08:08,560
fix all our problems and then we're

223
00:08:06,550 --> 00:08:10,090
gonna start you know from from from that

224
00:08:08,560 --> 00:08:11,919
moment on oh that doesn't happen you

225
00:08:10,090 --> 00:08:13,989
keep on introducing problems in code on

226
00:08:11,919 --> 00:08:17,469
a day-to-day basis so they're stuff that

227
00:08:13,990 --> 00:08:19,599
comes back um why is that it's actually

228
00:08:17,470 --> 00:08:21,910
very hard for developers I'm not sure if

229
00:08:19,599 --> 00:08:23,680
you know but static analysis solutions

230
00:08:21,910 --> 00:08:24,940
can find 700 different categories of

231
00:08:23,680 --> 00:08:27,039
problems so you're aware of the OWASP

232
00:08:24,940 --> 00:08:28,270
top 10 and sequel injection is one and

233
00:08:27,039 --> 00:08:31,210
cross-site scripting is a second one

234
00:08:28,270 --> 00:08:32,949
there are 698 other categories of

235
00:08:31,210 --> 00:08:34,569
problems that static analysis solution

236
00:08:32,950 --> 00:08:37,500
can find so it's really hard for

237
00:08:34,570 --> 00:08:39,520
developers to not introduce problems and

238
00:08:37,500 --> 00:08:41,679
then there are the things that are

239
00:08:39,520 --> 00:08:43,360
unfound there's still this notion of

240
00:08:41,679 --> 00:08:45,880
false negatives things that you do not

241
00:08:43,360 --> 00:08:47,380
find in your in your code so this is a

242
00:08:45,880 --> 00:08:50,380
neverending story and why is this a

243
00:08:47,380 --> 00:08:52,589
neverending story I think if you compare

244
00:08:50,380 --> 00:08:55,120
that with a with flying a plane

245
00:08:52,589 --> 00:08:57,010
it's never the case where somebody says

246
00:08:55,120 --> 00:08:57,640
well I actually want to fly plane today

247
00:08:57,010 --> 00:08:58,900
and

248
00:08:57,640 --> 00:09:01,810
go to the airport and they give you a

249
00:08:58,900 --> 00:09:03,790
plane and they say pure fly off but

250
00:09:01,810 --> 00:09:04,989
essentially that's what we do in with

251
00:09:03,790 --> 00:09:06,760
developers right they come out of

252
00:09:04,990 --> 00:09:08,620
university we give him a computer give

253
00:09:06,760 --> 00:09:11,260
him a github access and you say go off

254
00:09:08,620 --> 00:09:12,910
write some code you see that happening

255
00:09:11,260 --> 00:09:15,580
right that that happens on a day-to-day

256
00:09:12,910 --> 00:09:17,110
basis so I think that that's the

257
00:09:15,580 --> 00:09:19,300
starting point of the problem we should

258
00:09:17,110 --> 00:09:20,920
you should educate these people first on

259
00:09:19,300 --> 00:09:23,380
on how to write secure code and then

260
00:09:20,920 --> 00:09:25,240
over time you should give him a machine

261
00:09:23,380 --> 00:09:28,780
and make sure that they write secure

262
00:09:25,240 --> 00:09:32,140
code right so where do mistakes happen

263
00:09:28,780 --> 00:09:35,230
we all have our stuff we have IGEL you

264
00:09:32,140 --> 00:09:36,970
have waterfall and and in that you can

265
00:09:35,230 --> 00:09:39,130
actually implement various things you

266
00:09:36,970 --> 00:09:41,170
know you can do threat modeling I saw

267
00:09:39,130 --> 00:09:42,910
that good book at the Thorian booth from

268
00:09:41,170 --> 00:09:44,949
from Microsoft that's really good book

269
00:09:42,910 --> 00:09:46,689
can do threat modeling you can do static

270
00:09:44,950 --> 00:09:48,550
analysis you can do you can do whatever

271
00:09:46,690 --> 00:09:50,620
you know and you can take whatever

272
00:09:48,550 --> 00:09:53,229
methodology I don't care this is not how

273
00:09:50,620 --> 00:09:54,430
developers look at this stuff this is

274
00:09:53,230 --> 00:09:56,730
how developers look at the stuff

275
00:09:54,430 --> 00:10:00,160
developers look at it all from from a

276
00:09:56,730 --> 00:10:02,140
very practical way they look at their

277
00:10:00,160 --> 00:10:05,350
self they are a developer and they write

278
00:10:02,140 --> 00:10:07,630
code they push it in a repository it get

279
00:10:05,350 --> 00:10:09,580
built it gets deployed and it goes to

280
00:10:07,630 --> 00:10:11,950
production that's how a developer looks

281
00:10:09,580 --> 00:10:13,500
at code not not the previous thing they

282
00:10:11,950 --> 00:10:17,440
don't look at a waterfall thing you know

283
00:10:13,500 --> 00:10:19,750
so where do they have so work and

284
00:10:17,440 --> 00:10:22,240
developers really help in terms of

285
00:10:19,750 --> 00:10:24,430
security and the first two things you

286
00:10:22,240 --> 00:10:26,920
know its themself the developer that

287
00:10:24,430 --> 00:10:27,699
writes code okay and once they push it

288
00:10:26,920 --> 00:10:31,420
into the backtrack

289
00:10:27,700 --> 00:10:34,960
enter sorry into into the repository and

290
00:10:31,420 --> 00:10:37,510
at that point they think that they're

291
00:10:34,960 --> 00:10:39,130
gonna sprinkle some security magic fairy

292
00:10:37,510 --> 00:10:41,860
dust over the code and everything is

293
00:10:39,130 --> 00:10:44,080
going to be secure right and we all

294
00:10:41,860 --> 00:10:45,700
respect each other in IT right so we

295
00:10:44,080 --> 00:10:47,860
have a lot of respect so that's why I

296
00:10:45,700 --> 00:10:49,480
was asking developers versus security I

297
00:10:47,860 --> 00:10:51,940
think we have a lot of respect for each

298
00:10:49,480 --> 00:10:53,710
other it's not the case right and if if

299
00:10:51,940 --> 00:10:55,180
you as an app stack person has to go to

300
00:10:53,710 --> 00:10:56,800
a developer and you're gonna ask him to

301
00:10:55,180 --> 00:10:58,540
fix something in code they argue they

302
00:10:56,800 --> 00:11:01,089
was gonna say no no you don't want to do

303
00:10:58,540 --> 00:11:02,980
that and you first have to really really

304
00:11:01,090 --> 00:11:04,360
prove that there's an exploit vector

305
00:11:02,980 --> 00:11:06,280
that's gonna work you know and that's

306
00:11:04,360 --> 00:11:09,130
gonna break and even then after a while

307
00:11:06,280 --> 00:11:11,240
they still will not believe you the best

308
00:11:09,130 --> 00:11:15,589
thing you can get from a developers

309
00:11:11,240 --> 00:11:17,990
yeah maybe so where do people we're

310
00:11:15,589 --> 00:11:20,089
developers versus security what can they

311
00:11:17,990 --> 00:11:22,429
do what can they not do developers have

312
00:11:20,089 --> 00:11:25,309
total control over themselves and how

313
00:11:22,429 --> 00:11:27,410
they write codes security does not have

314
00:11:25,309 --> 00:11:31,850
any control over the developer itself or

315
00:11:27,410 --> 00:11:34,129
how he writes code once it's checked in

316
00:11:31,850 --> 00:11:36,740
the developer has no control whatsoever

317
00:11:34,129 --> 00:11:39,199
but the security person can still pick

318
00:11:36,740 --> 00:11:40,879
that up inspect that and and find

319
00:11:39,199 --> 00:11:43,429
problems in their or potential problems

320
00:11:40,879 --> 00:11:45,709
in there all right so there are tools to

321
00:11:43,429 --> 00:11:47,540
help you out okay so you have a

322
00:11:45,709 --> 00:11:50,059
developer that can gets training he can

323
00:11:47,540 --> 00:11:51,800
write code hey that's in this hi de he

324
00:11:50,059 --> 00:11:55,160
pushes into the repository you can use a

325
00:11:51,800 --> 00:11:57,139
static analysis solution when you build

326
00:11:55,160 --> 00:11:58,999
and deploy and test you can use an

327
00:11:57,139 --> 00:12:01,279
interactive application security when it

328
00:11:58,999 --> 00:12:03,110
goes to production you can do dynamic

329
00:12:01,279 --> 00:12:04,699
application security testing and with

330
00:12:03,110 --> 00:12:07,189
goes in production you can use a rasp

331
00:12:04,699 --> 00:12:09,410
solution or some self-defense in there

332
00:12:07,189 --> 00:12:14,269
okay and each of them has their pros and

333
00:12:09,410 --> 00:12:16,850
their cons so for example a a training

334
00:12:14,269 --> 00:12:18,889
let's go to static analysis what static

335
00:12:16,850 --> 00:12:20,509
analysis you look at code without

336
00:12:18,889 --> 00:12:22,249
executing the code the good stuff about

337
00:12:20,509 --> 00:12:23,869
static analysis is you can find a lot of

338
00:12:22,249 --> 00:12:25,999
problems from a theoretical perspective

339
00:12:23,869 --> 00:12:27,920
you know you get a you get a lot of

340
00:12:25,999 --> 00:12:29,149
problems and then the bad thing is of

341
00:12:27,920 --> 00:12:30,589
course that people who complain well

342
00:12:29,149 --> 00:12:31,670
there's a false positives there's stuff

343
00:12:30,589 --> 00:12:34,040
that it finds and it's not a real

344
00:12:31,670 --> 00:12:36,049
problem in code so there's it's good in

345
00:12:34,040 --> 00:12:37,670
that so it finds a lot of different

346
00:12:36,049 --> 00:12:39,709
stuff it's gonna give you good coverage

347
00:12:37,670 --> 00:12:42,079
over your code the same time it files

348
00:12:39,709 --> 00:12:44,268
finds false positives and it cannot

349
00:12:42,079 --> 00:12:46,699
really do well with dynamic frameworks

350
00:12:44,269 --> 00:12:48,499
because you can only scan the code that

351
00:12:46,699 --> 00:12:50,240
is there if it's dynamically built

352
00:12:48,499 --> 00:12:55,119
somewhere well it's very hard to scan

353
00:12:50,240 --> 00:12:57,199
the interactive application security

354
00:12:55,119 --> 00:12:59,689
what's interactive application security

355
00:12:57,199 --> 00:13:02,019
it's essentially some some monitoring

356
00:12:59,689 --> 00:13:05,569
solution that sits with the QA people

357
00:13:02,019 --> 00:13:07,040
and it's gonna give them some feedback

358
00:13:05,569 --> 00:13:11,420
on potential problems that they can

359
00:13:07,040 --> 00:13:13,579
further explore ok vast more or less

360
00:13:11,420 --> 00:13:16,279
penetration testing solutions that gonna

361
00:13:13,579 --> 00:13:18,290
treat your application as some sort of a

362
00:13:16,279 --> 00:13:20,120
black box we're gonna send random attack

363
00:13:18,290 --> 00:13:21,139
but not a random attack by attack

364
00:13:20,120 --> 00:13:23,809
vectors because that's the first thing

365
00:13:21,139 --> 00:13:25,130
but it's gonna send well-crafted attack

366
00:13:23,809 --> 00:13:26,930
vectors and it's gonna

367
00:13:25,130 --> 00:13:29,060
what's coming back from that solution

368
00:13:26,930 --> 00:13:31,430
and is gonna decide yes it's a problem

369
00:13:29,060 --> 00:13:33,260
where it's not a problem and the RAF's

370
00:13:31,430 --> 00:13:36,109
runtime application security protection

371
00:13:33,260 --> 00:13:38,569
is really some agent that you install in

372
00:13:36,110 --> 00:13:40,400
your servers and it's gonna monitor

373
00:13:38,570 --> 00:13:42,050
what's going on and if it sees a problem

374
00:13:40,400 --> 00:13:45,650
or if it sees an attack that's gonna try

375
00:13:42,050 --> 00:13:48,010
to block that on the fly so where do we

376
00:13:45,650 --> 00:13:51,680
spend money if you look at these

377
00:13:48,010 --> 00:13:53,569
training IDE help SAS is data and rasp

378
00:13:51,680 --> 00:13:55,280
where do we spend money for some

379
00:13:53,570 --> 00:13:57,350
organizations it looks like like this

380
00:13:55,280 --> 00:13:59,480
they spend a lot on SAS they lose spend

381
00:13:57,350 --> 00:14:02,960
a lot on DAST other organizations spend

382
00:13:59,480 --> 00:14:05,450
more on training and SAS the problem is

383
00:14:02,960 --> 00:14:07,040
nobody knows so so so what I would like

384
00:14:05,450 --> 00:14:08,570
to do in the next couple slides I would

385
00:14:07,040 --> 00:14:10,370
like to go through a couple things and

386
00:14:08,570 --> 00:14:13,340
and figure out where people really spend

387
00:14:10,370 --> 00:14:16,910
the money so first things first

388
00:14:13,340 --> 00:14:18,560
umm what type of company would this be

389
00:14:16,910 --> 00:14:20,329
and don't say my company please because

390
00:14:18,560 --> 00:14:22,130
otherwise we have another problem

391
00:14:20,330 --> 00:14:23,840
what what type of company you know what

392
00:14:22,130 --> 00:14:25,340
and what kind of stage are they what

393
00:14:23,840 --> 00:14:29,900
does management think about security

394
00:14:25,340 --> 00:14:31,670
sorry or a start-up yes was not the

395
00:14:29,900 --> 00:14:37,010
answer that I was hoping for but it

396
00:14:31,670 --> 00:14:39,020
always comes out any any other other

397
00:14:37,010 --> 00:14:42,980
takers what kind of company if it's a

398
00:14:39,020 --> 00:14:45,110
well mature company yes actually that's

399
00:14:42,980 --> 00:14:47,540
right actually this is it's it's the

400
00:14:45,110 --> 00:14:49,490
oldest good company you know or the

401
00:14:47,540 --> 00:14:51,290
company that is not hacked management

402
00:14:49,490 --> 00:14:53,180
there's like well we don't see the need

403
00:14:51,290 --> 00:14:55,270
for security because nothing happens

404
00:14:53,180 --> 00:15:00,609
everything works everybody's happy right

405
00:14:55,270 --> 00:15:00,610
yet what kind of type of company is this

406
00:15:01,120 --> 00:15:06,350
yeah well there's a huge pile of money

407
00:15:04,280 --> 00:15:10,069
you know I'm not sure well I don't have

408
00:15:06,350 --> 00:15:11,990
that pile of money but yeah well that

409
00:15:10,070 --> 00:15:14,420
this is actually Equifax today I think

410
00:15:11,990 --> 00:15:17,180
you know this is the oh company we

411
00:15:14,420 --> 00:15:18,380
got hacks we have to do something you

412
00:15:17,180 --> 00:15:20,390
know we really have to do something and

413
00:15:18,380 --> 00:15:21,860
what they tend to do then is they they

414
00:15:20,390 --> 00:15:24,199
take a bunch of money and they say well

415
00:15:21,860 --> 00:15:26,000
what did they find is it is it is it a

416
00:15:24,200 --> 00:15:27,290
sequence action from wall we really have

417
00:15:26,000 --> 00:15:29,240
to find the sequel injection problems

418
00:15:27,290 --> 00:15:31,430
can we find some white hat hackers and

419
00:15:29,240 --> 00:15:33,290
can we install a program and find more

420
00:15:31,430 --> 00:15:35,329
of this stuff you know they want to find

421
00:15:33,290 --> 00:15:37,099
more of the same stuff making sure it

422
00:15:35,330 --> 00:15:38,900
does not happen any more

423
00:15:37,100 --> 00:15:41,270
and essentially over time it devolves

424
00:15:38,900 --> 00:15:43,160
that company okay so I started with the

425
00:15:41,270 --> 00:15:45,079
company that has has no notion of

426
00:15:43,160 --> 00:15:46,850
security then they get hacked they get a

427
00:15:45,080 --> 00:15:48,290
notion of security or something triggers

428
00:15:46,850 --> 00:15:50,660
it always something that triggers it and

429
00:15:48,290 --> 00:15:53,449
then over time it spreads out so I think

430
00:15:50,660 --> 00:15:55,939
this is this is kind of a view of a lot

431
00:15:53,450 --> 00:15:58,490
of organizations are today and why is

432
00:15:55,940 --> 00:16:01,310
that because they need training for

433
00:15:58,490 --> 00:16:03,050
their PCI compliance sticker there's

434
00:16:01,310 --> 00:16:06,250
really good salespeople in static

435
00:16:03,050 --> 00:16:08,569
analysis that they can sell you anything

436
00:16:06,250 --> 00:16:10,730
Gardner says you really have to put some

437
00:16:08,570 --> 00:16:12,290
money into rasp right now oh I'm sorry

438
00:16:10,730 --> 00:16:14,270
and and garner says you really have to

439
00:16:12,290 --> 00:16:15,680
spend put some money into rasp and you

440
00:16:14,270 --> 00:16:17,930
still have your bunch of money and

441
00:16:15,680 --> 00:16:19,550
penetration testing I think I think a

442
00:16:17,930 --> 00:16:22,280
lot of organizations are in in that

443
00:16:19,550 --> 00:16:26,060
particular situation right now it's the

444
00:16:22,280 --> 00:16:28,610
reality so where do we spend and and

445
00:16:26,060 --> 00:16:30,290
then I went back into into besom because

446
00:16:28,610 --> 00:16:32,840
V M is essentially building security and

447
00:16:30,290 --> 00:16:35,480
maturity model it's it's based on what

448
00:16:32,840 --> 00:16:37,970
actual people do on a day to day basis

449
00:16:35,480 --> 00:16:41,060
so so they collect data and they figure

450
00:16:37,970 --> 00:16:42,710
out what people are doing so iiii i do

451
00:16:41,060 --> 00:16:44,390
not have access to that data

452
00:16:42,710 --> 00:16:46,400
but i do have well everybody has access

453
00:16:44,390 --> 00:16:48,290
to the report that they produce and if

454
00:16:46,400 --> 00:16:50,630
you look into that report I found it

455
00:16:48,290 --> 00:16:51,920
quite interesting to see that for some

456
00:16:50,630 --> 00:16:53,570
of these things you have entire

457
00:16:51,920 --> 00:16:55,490
practices like you have a training

458
00:16:53,570 --> 00:16:57,290
practice you have a code review practice

459
00:16:55,490 --> 00:16:59,030
you have a security testing practice you

460
00:16:57,290 --> 00:17:00,319
have a penetration testing practice and

461
00:16:59,030 --> 00:17:02,209
and then for ASP

462
00:17:00,320 --> 00:17:04,460
I couldn't really figure out where that

463
00:17:02,210 --> 00:17:08,060
really fit in the besom kind of vertical

464
00:17:04,460 --> 00:17:10,910
meaning if you if you look for ASP it's

465
00:17:08,060 --> 00:17:12,710
not even founded in the VM so so it it's

466
00:17:10,910 --> 00:17:14,840
not there yet so people do not spend a

467
00:17:12,710 --> 00:17:17,120
lot of money on that yet maybe they will

468
00:17:14,839 --> 00:17:18,949
I don't know but but the reality is

469
00:17:17,119 --> 00:17:22,189
right now it's it's not the case and

470
00:17:18,950 --> 00:17:26,900
even if you drill a level deeper into

471
00:17:22,190 --> 00:17:28,940
these practices you can find activities

472
00:17:26,900 --> 00:17:31,670
in in all of the levels so they they

473
00:17:28,940 --> 00:17:33,350
split it up in three levels where they

474
00:17:31,670 --> 00:17:35,540
have easy things to do and then people

475
00:17:33,350 --> 00:17:37,010
do quite often things and then really

476
00:17:35,540 --> 00:17:38,720
rocket science things and even within

477
00:17:37,010 --> 00:17:40,490
there you have all these three level

478
00:17:38,720 --> 00:17:42,850
three levels covered for example for

479
00:17:40,490 --> 00:17:46,040
training but also for static analysis

480
00:17:42,850 --> 00:17:48,199
you have all the three levels covered

481
00:17:46,040 --> 00:17:50,658
for dynamic application security and if

482
00:17:48,200 --> 00:17:52,279
you look at is that's that's again

483
00:17:50,659 --> 00:17:54,739
little bit minimal you know you find

484
00:17:52,279 --> 00:17:57,590
include security testing in QA

485
00:17:54,739 --> 00:18:01,070
automation so so based on that based on

486
00:17:57,590 --> 00:18:03,499
on what I see in in in besom I would say

487
00:18:01,070 --> 00:18:06,918
people spend on training on sass and ID

488
00:18:03,499 --> 00:18:09,139
help and a little bit less on ist a lot

489
00:18:06,919 --> 00:18:10,940
on - and very minimal on rasp but this

490
00:18:09,139 --> 00:18:12,529
is this is the state of where we are

491
00:18:10,940 --> 00:18:15,830
right now in application security and

492
00:18:12,529 --> 00:18:17,599
where people spend their money okay but

493
00:18:15,830 --> 00:18:19,189
you know I can say this is not progress

494
00:18:17,599 --> 00:18:21,220
right I'm not making any progress I'm

495
00:18:19,190 --> 00:18:24,259
not telling you what the best ROI

496
00:18:21,220 --> 00:18:27,190
the best way to get some some good ROI

497
00:18:24,259 --> 00:18:29,720
off out of your application security but

498
00:18:27,190 --> 00:18:32,720
okay it only validates that yes we need

499
00:18:29,720 --> 00:18:34,489
to spend money so now I would like to

500
00:18:32,720 --> 00:18:37,369
take a step back and I would like to to

501
00:18:34,489 --> 00:18:39,139
look at what we really do in application

502
00:18:37,369 --> 00:18:40,759
security and what we really do in

503
00:18:39,139 --> 00:18:43,609
application security is is on the right

504
00:18:40,759 --> 00:18:45,590
hand side we have the sequel injections

505
00:18:43,609 --> 00:18:47,840
the or stopped ends really the the

506
00:18:45,590 --> 00:18:49,759
vulnerabilities okay and on the

507
00:18:47,840 --> 00:18:51,830
right-hand side and and if you take

508
00:18:49,759 --> 00:18:53,450
companies that yet have to hacked

509
00:18:51,830 --> 00:18:55,849
through sequel injection they say well

510
00:18:53,450 --> 00:18:58,099
it's in dast we found it in dust and and

511
00:18:55,849 --> 00:18:59,389
and maybe we should bring that closer to

512
00:18:58,099 --> 00:19:02,299
a developer maybe we should make sure

513
00:18:59,389 --> 00:19:04,908
that that we can find that particular

514
00:19:02,299 --> 00:19:06,590
problem very very close to two to

515
00:19:04,909 --> 00:19:08,299
development so this whole notion of

516
00:19:06,590 --> 00:19:10,519
shift left where you try to figure out

517
00:19:08,299 --> 00:19:12,979
what the problem is as close as possible

518
00:19:10,519 --> 00:19:14,330
to the developer right so you start with

519
00:19:12,979 --> 00:19:15,919
finding the sequin injections through

520
00:19:14,330 --> 00:19:17,418
penetration testing the next thing is

521
00:19:15,919 --> 00:19:19,609
say well maybe you should find all

522
00:19:17,419 --> 00:19:21,169
theoretical sequel injections so you go

523
00:19:19,609 --> 00:19:22,820
through a static analysis solution that

524
00:19:21,169 --> 00:19:24,349
finds all theoretical sequel injections

525
00:19:22,820 --> 00:19:25,849
and then you really want to train the

526
00:19:24,349 --> 00:19:27,109
developers making sure they know about

527
00:19:25,849 --> 00:19:28,970
sequel injection so they do not

528
00:19:27,109 --> 00:19:31,009
introduce it so you go you go from right

529
00:19:28,970 --> 00:19:34,009
to left but there's also this notion

530
00:19:31,009 --> 00:19:35,450
that going from left to right where you

531
00:19:34,009 --> 00:19:38,389
really can say well let's introduce

532
00:19:35,450 --> 00:19:40,099
coding guidelines and I found it really

533
00:19:38,389 --> 00:19:41,508
hard to find good coding there are

534
00:19:40,099 --> 00:19:42,799
coding guidelines there are good coding

535
00:19:41,509 --> 00:19:44,690
guidelines don't get me wrong but

536
00:19:42,799 --> 00:19:46,729
there's much more information about

537
00:19:44,690 --> 00:19:48,349
vulnerabilities and attacks and cheat

538
00:19:46,729 --> 00:19:52,759
sheets and all that kind of stuff then

539
00:19:48,349 --> 00:19:54,320
there is around wasps or secure coding

540
00:19:52,759 --> 00:19:56,119
guidelines the Android secure coding guy

541
00:19:54,320 --> 00:19:59,149
there's there's not a whole lot of stuff

542
00:19:56,119 --> 00:20:01,609
in in that area right while I think it's

543
00:19:59,149 --> 00:20:03,289
it's very interesting because what we do

544
00:20:01,609 --> 00:20:04,280
in our industry right now in application

545
00:20:03,289 --> 00:20:07,340
security is

546
00:20:04,280 --> 00:20:10,040
let's say we have a query over here with

547
00:20:07,340 --> 00:20:12,830
four concatenations per meter one by the

548
00:20:10,040 --> 00:20:14,389
way I think this is the only code slide

549
00:20:12,830 --> 00:20:16,220
so for developers I'm sorry this is the

550
00:20:14,390 --> 00:20:18,350
only code slide

551
00:20:16,220 --> 00:20:20,540
you have four parameters parameter four

552
00:20:18,350 --> 00:20:21,889
one two three and four let's say your

553
00:20:20,540 --> 00:20:24,050
penetration testers come back and they

554
00:20:21,890 --> 00:20:25,670
say you know what parameter 1 parameter

555
00:20:24,050 --> 00:20:27,800
2 they are vulnerable to CQ injection

556
00:20:25,670 --> 00:20:29,900
well you know the company is on fire

557
00:20:27,800 --> 00:20:31,879
because it has to be fixed right now we

558
00:20:29,900 --> 00:20:34,700
cannot be hacked through Co injection

559
00:20:31,880 --> 00:20:36,500
and they're gonna instantly ask the

560
00:20:34,700 --> 00:20:39,110
developers to fix the Seco injection and

561
00:20:36,500 --> 00:20:40,820
they will fix that one if your static

562
00:20:39,110 --> 00:20:44,330
analysis solution comes back and they

563
00:20:40,820 --> 00:20:46,879
say well you know parameter 3 maybe if

564
00:20:44,330 --> 00:20:48,620
the stars align in this way then it's

565
00:20:46,880 --> 00:20:50,870
gonna be vulnerable to Co injection at

566
00:20:48,620 --> 00:20:52,610
that point over here it comes you know

567
00:20:50,870 --> 00:20:53,989
you can start your fight between your

568
00:20:52,610 --> 00:20:56,419
application security people your

569
00:20:53,990 --> 00:20:58,250
developers and your QA to really figure

570
00:20:56,420 --> 00:21:00,620
out if it's a problem or not right

571
00:20:58,250 --> 00:21:02,000
because the developers will not say no

572
00:21:00,620 --> 00:21:03,770
no we're not gonna fix it you have to

573
00:21:02,000 --> 00:21:05,570
prove it first and security guys yeah

574
00:21:03,770 --> 00:21:07,490
you have to fix it so the QA comes back

575
00:21:05,570 --> 00:21:09,710
and they you really have to find it an

576
00:21:07,490 --> 00:21:11,420
attack vector to exploit that stuff and

577
00:21:09,710 --> 00:21:13,790
and and everybody's mad at each other

578
00:21:11,420 --> 00:21:16,400
right knowing the answer to the problem

579
00:21:13,790 --> 00:21:17,300
is simply irrelevant fix it and it's not

580
00:21:16,400 --> 00:21:19,940
gonna be a problem

581
00:21:17,300 --> 00:21:22,399
just fix it ok but that's not the way we

582
00:21:19,940 --> 00:21:24,800
work right now and if none of our

583
00:21:22,400 --> 00:21:27,140
solutions point out that parameter 4 is

584
00:21:24,800 --> 00:21:29,180
a problem today we're not gonna fix it

585
00:21:27,140 --> 00:21:32,450
we're not gonna do anything the code is

586
00:21:29,180 --> 00:21:34,730
working leave it as such right um while

587
00:21:32,450 --> 00:21:37,550
tools are incomplete first of all so you

588
00:21:34,730 --> 00:21:40,070
do not know if parameter 4 is really a

589
00:21:37,550 --> 00:21:42,169
vulnerability or not um at the same time

590
00:21:40,070 --> 00:21:44,570
if another developer comes on board

591
00:21:42,170 --> 00:21:46,070
tomorrow um some some guy out of

592
00:21:44,570 --> 00:21:47,840
university that had never heard about

593
00:21:46,070 --> 00:21:49,129
sequel injection and he takes the code

594
00:21:47,840 --> 00:21:51,230
and he copy and paste it into another

595
00:21:49,130 --> 00:21:53,840
location it may also be a vulnerability

596
00:21:51,230 --> 00:21:54,940
right it may become a vulnerability all

597
00:21:53,840 --> 00:21:57,199
right because the context is different

598
00:21:54,940 --> 00:21:59,450
this is how we treat application

599
00:21:57,200 --> 00:22:01,130
security today this is what we do on a

600
00:21:59,450 --> 00:22:02,690
day to day basis we try to find a

601
00:22:01,130 --> 00:22:04,700
problem and we're gonna fix the problem

602
00:22:02,690 --> 00:22:07,430
one by one okay

603
00:22:04,700 --> 00:22:09,320
so there's there's a there's a very big

604
00:22:07,430 --> 00:22:11,060
distinction between finding the

605
00:22:09,320 --> 00:22:12,710
vulnerability and following coding

606
00:22:11,060 --> 00:22:16,190
guidelines if you find the vulnerability

607
00:22:12,710 --> 00:22:17,570
and you run a or you let people in and

608
00:22:16,190 --> 00:22:18,200
they do a pen test or your static

609
00:22:17,570 --> 00:22:20,780
analysis

610
00:22:18,200 --> 00:22:22,700
Ellucian is is not pointing out anything

611
00:22:20,780 --> 00:22:24,230
which which is hardly seen but let's say

612
00:22:22,700 --> 00:22:26,660
your static analysis solution doesn't

613
00:22:24,230 --> 00:22:29,660
show you anything what does that tell

614
00:22:26,660 --> 00:22:32,240
you about the code you don't know you do

615
00:22:29,660 --> 00:22:34,310
not know you know for sure if it's if

616
00:22:32,240 --> 00:22:36,110
it's showing red stuff it's if it's

617
00:22:34,310 --> 00:22:38,450
showing critical vulnerabilities you

618
00:22:36,110 --> 00:22:40,310
know for sure you're in deep trouble but

619
00:22:38,450 --> 00:22:41,960
if it doesn't show you anything you

620
00:22:40,310 --> 00:22:44,440
don't know the only thing you can say is

621
00:22:41,960 --> 00:22:47,330
that tool didn't find anything or these

622
00:22:44,440 --> 00:22:49,480
hackers didn't find anything but you do

623
00:22:47,330 --> 00:22:51,860
not know if your code is secure or not

624
00:22:49,480 --> 00:22:54,470
at the same time if you follow coding

625
00:22:51,860 --> 00:22:56,959
guidelines and you say for example use

626
00:22:54,470 --> 00:22:59,900
parameterised queries always everywhere

627
00:22:56,960 --> 00:23:02,090
okay if you do that you can eradicate

628
00:22:59,900 --> 00:23:03,950
sequel injection because if you do that

629
00:23:02,090 --> 00:23:06,230
on a consistent basis are always

630
00:23:03,950 --> 00:23:08,060
everywhere you can eradicate a category

631
00:23:06,230 --> 00:23:09,740
of vulnerabilities and you can start to

632
00:23:08,060 --> 00:23:11,659
measure it you can start to measure if

633
00:23:09,740 --> 00:23:14,120
you follow coding guidelines if

634
00:23:11,660 --> 00:23:15,740
developers say net this is an exception

635
00:23:14,120 --> 00:23:17,989
I'm not going to do that or if you

636
00:23:15,740 --> 00:23:19,360
bluntly violate a coding guideline and

637
00:23:17,990 --> 00:23:21,380
at that point you can actually compare

638
00:23:19,360 --> 00:23:23,840
applications against each other you can

639
00:23:21,380 --> 00:23:26,060
say well this this piece of code was

640
00:23:23,840 --> 00:23:28,040
developed by group a and they did so

641
00:23:26,060 --> 00:23:30,200
good versus another piece of code

642
00:23:28,040 --> 00:23:32,990
developed by Group B and and they

643
00:23:30,200 --> 00:23:34,370
constantly introduced or not did not

644
00:23:32,990 --> 00:23:36,290
follow coding guidelines so you can get

645
00:23:34,370 --> 00:23:38,060
a sense of how well that application was

646
00:23:36,290 --> 00:23:40,340
developed and you can essentially put a

647
00:23:38,060 --> 00:23:42,200
risk score on there and what what the

648
00:23:40,340 --> 00:23:43,850
problems may be in the future of putting

649
00:23:42,200 --> 00:23:46,400
a production putting an app like that in

650
00:23:43,850 --> 00:23:48,560
production and you can map that back on

651
00:23:46,400 --> 00:23:50,690
onto the previous graph right you can

652
00:23:48,560 --> 00:23:52,190
say well on the right hand side you

653
00:23:50,690 --> 00:23:53,930
really want to find the vulnerability

654
00:23:52,190 --> 00:23:55,640
you can do everything you can with

655
00:23:53,930 --> 00:23:57,290
developers and you can tell them what to

656
00:23:55,640 --> 00:23:59,150
do but eventually you still need that

657
00:23:57,290 --> 00:24:00,560
mechanism so these need to be in balance

658
00:23:59,150 --> 00:24:02,240
I'm not saying that you need to prefer

659
00:24:00,560 --> 00:24:04,040
one over the other because we know how

660
00:24:02,240 --> 00:24:05,900
creative developers are if you tell them

661
00:24:04,040 --> 00:24:07,310
follow these coding guidelines they're

662
00:24:05,900 --> 00:24:10,520
gonna follow the coding guidelines in a

663
00:24:07,310 --> 00:24:12,350
very creative way right and so you still

664
00:24:10,520 --> 00:24:14,060
need that stuff you still need these

665
00:24:12,350 --> 00:24:17,389
mechanisms that find the problems in

666
00:24:14,060 --> 00:24:21,020
code so the whole idea over here is is

667
00:24:17,390 --> 00:24:23,090
um how about making sure that you again

668
00:24:21,020 --> 00:24:24,980
optimize your budget and optimize your

669
00:24:23,090 --> 00:24:27,770
solutions because if you can eradicate

670
00:24:24,980 --> 00:24:29,540
80% of the problems here then the 20%

671
00:24:27,770 --> 00:24:31,389
these solutions are gonna find are

672
00:24:29,540 --> 00:24:33,700
really the heart

673
00:24:31,389 --> 00:24:36,099
problems the stuff that you really want

674
00:24:33,700 --> 00:24:39,099
these tools to find you know you want it

675
00:24:36,099 --> 00:24:41,259
you bought a complex ass solution for

676
00:24:39,099 --> 00:24:42,879
example not to find the easy sequel

677
00:24:41,259 --> 00:24:45,549
injections that's right or you're not

678
00:24:42,879 --> 00:24:48,609
hiring very experienced

679
00:24:45,549 --> 00:24:51,039
penetration or white hat hackers to find

680
00:24:48,609 --> 00:24:53,379
a very simple configuration problem

681
00:24:51,039 --> 00:24:55,629
right so you want to really make sure

682
00:24:53,379 --> 00:24:57,369
that you use the expertise and the

683
00:24:55,629 --> 00:25:02,289
knowledge that these tools and people

684
00:24:57,369 --> 00:25:08,049
have to the most so where do we have to

685
00:25:02,289 --> 00:25:09,908
spend it and I'll circle back to my to

686
00:25:08,049 --> 00:25:11,739
my initial title of the talk which was

687
00:25:09,909 --> 00:25:15,789
3.6 million is the average cost of a

688
00:25:11,739 --> 00:25:19,539
beach and this is actual data this is

689
00:25:15,789 --> 00:25:21,969
actual data from from Jim Ralph and in

690
00:25:19,539 --> 00:25:23,769
in my previous calculation I used the

691
00:25:21,969 --> 00:25:26,049
numbers from aspect security they also

692
00:25:23,769 --> 00:25:28,779
put food out some numbers however there

693
00:25:26,049 --> 00:25:30,639
is no really there's no source of where

694
00:25:28,779 --> 00:25:32,200
that really comes from these are actual

695
00:25:30,639 --> 00:25:34,208
numbers these are these are numbers from

696
00:25:32,200 --> 00:25:36,429
Jim Ralph from Aetna he went through

697
00:25:34,209 --> 00:25:38,950
that exercise he calculated how much it

698
00:25:36,429 --> 00:25:40,899
cost for his organization to fix

699
00:25:38,950 --> 00:25:43,719
something in requirements in design and

700
00:25:40,899 --> 00:25:47,829
code and tests and in maintenance okay

701
00:25:43,719 --> 00:25:49,329
and my feeling is in general I think

702
00:25:47,829 --> 00:25:51,158
there's a general consensus that the

703
00:25:49,329 --> 00:25:53,499
earlier you fix stuff the less it cost

704
00:25:51,159 --> 00:25:56,200
you know putting actual dollar amounts

705
00:25:53,499 --> 00:25:58,209
on there is hard and and this is from

706
00:25:56,200 --> 00:26:01,179
one organization your organization will

707
00:25:58,209 --> 00:26:03,879
be different but it's a good exercise so

708
00:26:01,179 --> 00:26:06,669
what you can do with 3.6 million is you

709
00:26:03,879 --> 00:26:08,678
can wait and and and get hacked and get

710
00:26:06,669 --> 00:26:11,440
that breach and and be the Equifax for

711
00:26:08,679 --> 00:26:13,329
example or you can try to be proactive

712
00:26:11,440 --> 00:26:15,219
because with 3.6 million you can

713
00:26:13,329 --> 00:26:17,759
actually do a lot of stuff for example

714
00:26:15,219 --> 00:26:21,129
in code you can fix with 3.6 million

715
00:26:17,759 --> 00:26:23,829
three thousand six hundred issues okay

716
00:26:21,129 --> 00:26:25,928
so you can wait and fix one problem and

717
00:26:23,829 --> 00:26:28,178
you still have to spend money then to

718
00:26:25,929 --> 00:26:30,129
fix all the other problems or this is a

719
00:26:28,179 --> 00:26:31,539
rough estimate or a rough calculation of

720
00:26:30,129 --> 00:26:36,369
what you can do and how you can spend

721
00:26:31,539 --> 00:26:38,169
your money to go a level deeper if you

722
00:26:36,369 --> 00:26:41,139
say well I want to spend it on

723
00:26:38,169 --> 00:26:42,759
penetration testing and and you you buy

724
00:26:41,139 --> 00:26:44,619
some penetration testing the way you can

725
00:26:42,759 --> 00:26:45,280
calculate this and again I'm just giving

726
00:26:44,619 --> 00:26:46,209
suggestions here

727
00:26:45,280 --> 00:26:49,300
you have to deal for your own

728
00:26:46,210 --> 00:26:50,920
organization because every organization

729
00:26:49,300 --> 00:26:53,560
is different what you can do over here

730
00:26:50,920 --> 00:26:55,750
is you buy 10 days of penetration

731
00:26:53,560 --> 00:26:57,700
testing they find why number of issues

732
00:26:55,750 --> 00:26:59,620
the developer fixes the issues which is

733
00:26:57,700 --> 00:27:02,200
Z numbers and that's a pretty big number

734
00:26:59,620 --> 00:27:04,300
so you divide it through the number of

735
00:27:02,200 --> 00:27:05,860
issues and it's still a big number but

736
00:27:04,300 --> 00:27:08,770
let's fill in the blanks let's say you

737
00:27:05,860 --> 00:27:10,689
spend 20 K on the penetration testing

738
00:27:08,770 --> 00:27:13,090
and they come back with 10 issues and

739
00:27:10,690 --> 00:27:15,760
your developers have no time to fix it

740
00:27:13,090 --> 00:27:18,610
which is essentially a waste of my right

741
00:27:15,760 --> 00:27:20,980
this happens all too often right this

742
00:27:18,610 --> 00:27:23,350
happens really all too often we're just

743
00:27:20,980 --> 00:27:26,080
we're just we'll have the paper you know

744
00:27:23,350 --> 00:27:28,030
and that's it no so you have to fill it

745
00:27:26,080 --> 00:27:30,250
in right you you've there's a developer

746
00:27:28,030 --> 00:27:31,840
cost there's a developer cost or he goes

747
00:27:30,250 --> 00:27:34,480
into the code he has to find the problem

748
00:27:31,840 --> 00:27:35,889
to the to the find find the solution to

749
00:27:34,480 --> 00:27:37,420
the problem you have to fix it go

750
00:27:35,890 --> 00:27:43,560
through the key a that whole thing let's

751
00:27:37,420 --> 00:27:46,720
say $2,000 and times 10 is 40 K so it's

752
00:27:43,560 --> 00:27:49,210
$4,000 an issue pretty big number right

753
00:27:46,720 --> 00:27:53,110
and fill out your own numbers to do this

754
00:27:49,210 --> 00:27:55,330
exercise internally however there's a

755
00:27:53,110 --> 00:27:57,699
side note here these are real issues you

756
00:27:55,330 --> 00:27:59,730
really have to fix them if a penetration

757
00:27:57,700 --> 00:28:03,340
test comes back with sequel injection

758
00:27:59,730 --> 00:28:05,590
it's very likely that attackers know

759
00:28:03,340 --> 00:28:07,899
about that problem too and will sometime

760
00:28:05,590 --> 00:28:10,689
in the future exploit you so even though

761
00:28:07,900 --> 00:28:14,530
it's a high number it's it's justified

762
00:28:10,690 --> 00:28:16,930
if it's good stuff of course I'm a SAS

763
00:28:14,530 --> 00:28:19,450
solution oh one second a SAS solution do

764
00:28:16,930 --> 00:28:21,190
the same exercise I I do not see all I

765
00:28:19,450 --> 00:28:24,730
do not see quite often people doing that

766
00:28:21,190 --> 00:28:26,380
exercise close to none i Jim Ralph did

767
00:28:24,730 --> 00:28:27,940
it for Aetna but other than that I do

768
00:28:26,380 --> 00:28:29,740
not see people doing that within

769
00:28:27,940 --> 00:28:31,000
organizations they just spend money but

770
00:28:29,740 --> 00:28:34,810
they they do not know what the outcome

771
00:28:31,000 --> 00:28:37,390
is of that SAS solution X amount of

772
00:28:34,810 --> 00:28:40,750
dollars issues found y developer needs

773
00:28:37,390 --> 00:28:42,640
to Fox fix it the pretty big number if

774
00:28:40,750 --> 00:28:44,200
you divided through the number of issues

775
00:28:42,640 --> 00:28:46,240
normally a static analysis solution

776
00:28:44,200 --> 00:28:47,650
comes back with a ton of issues it looks

777
00:28:46,240 --> 00:28:49,630
better than penetration testing but then

778
00:28:47,650 --> 00:28:51,370
you go to the theoretical site right

779
00:28:49,630 --> 00:28:53,620
from a theoretical perspective it is

780
00:28:51,370 --> 00:28:55,600
vulnerable to CQ injection okay so

781
00:28:53,620 --> 00:28:58,030
that's another side note the numbers

782
00:28:55,600 --> 00:29:00,050
look better but but it's different

783
00:28:58,030 --> 00:29:02,960
training what can you do for training

784
00:29:00,050 --> 00:29:04,550
the effect on training nobody measures

785
00:29:02,960 --> 00:29:06,350
the effect on training there's there's

786
00:29:04,550 --> 00:29:08,470
very little organizations that know

787
00:29:06,350 --> 00:29:10,669
exactly what the impact of training is

788
00:29:08,470 --> 00:29:12,290
the impact of training you can you they

789
00:29:10,670 --> 00:29:13,850
say we cannot measure that you can

790
00:29:12,290 --> 00:29:16,250
measure that you can measure that you

791
00:29:13,850 --> 00:29:18,020
you figure out how many issues they do

792
00:29:16,250 --> 00:29:19,610
not introduce into the code yes it's

793
00:29:18,020 --> 00:29:21,950
hard to measure that but it is possible

794
00:29:19,610 --> 00:29:23,479
and if there are issues found by your

795
00:29:21,950 --> 00:29:25,520
penetration testing solution by your

796
00:29:23,480 --> 00:29:29,990
static analysis solution can they fix it

797
00:29:25,520 --> 00:29:38,240
if they can you have training effect so

798
00:29:29,990 --> 00:29:40,130
let's see what you need to do is is

799
00:29:38,240 --> 00:29:41,090
measure use you have to start measure

800
00:29:40,130 --> 00:29:43,220
you have to take these numbers

801
00:29:41,090 --> 00:29:45,470
internally you have to look at how much

802
00:29:43,220 --> 00:29:46,970
I spent what the issues are how much it

803
00:29:45,470 --> 00:29:48,830
costs to fix all these things you can

804
00:29:46,970 --> 00:29:50,390
put it in there you have to measure it

805
00:29:48,830 --> 00:29:52,699
you have to calculate your ROI you have

806
00:29:50,390 --> 00:29:54,410
to optimize your budget um what what

807
00:29:52,700 --> 00:29:57,500
I've done throughout the last couple

808
00:29:54,410 --> 00:30:00,650
years was I have a lot of members of

809
00:29:57,500 --> 00:30:02,240
what people spend on solutions and how

810
00:30:00,650 --> 00:30:05,650
many vulnerabilities I introduced and so

811
00:30:02,240 --> 00:30:08,410
on and and what I did this this this

812
00:30:05,650 --> 00:30:10,880
calculation and it's different from from

813
00:30:08,410 --> 00:30:12,890
Jim Ralph's calculation by the way

814
00:30:10,880 --> 00:30:14,360
because if I would use Jim rouse numbers

815
00:30:12,890 --> 00:30:16,940
it would be very different actually it

816
00:30:14,360 --> 00:30:20,719
would be more than my $45 but over here

817
00:30:16,940 --> 00:30:22,910
I I looked into what I have in in terms

818
00:30:20,720 --> 00:30:25,820
of numbers and I figured out that every

819
00:30:22,910 --> 00:30:28,310
day a developer writes code it costs an

820
00:30:25,820 --> 00:30:29,899
additional forty five dollars to fix the

821
00:30:28,310 --> 00:30:31,790
problems that he introduces into the

822
00:30:29,900 --> 00:30:34,760
code which I found very very interesting

823
00:30:31,790 --> 00:30:36,500
so every day that you you pay for it

824
00:30:34,760 --> 00:30:37,670
first of all the developer to write code

825
00:30:36,500 --> 00:30:39,620
and at the same time you have to pay

826
00:30:37,670 --> 00:30:40,790
another forty five dollars to fix the

827
00:30:39,620 --> 00:30:43,010
stuff that he has written in the first

828
00:30:40,790 --> 00:30:44,899
place okay so how can you bring that

829
00:30:43,010 --> 00:30:46,550
number down well first of all you can

830
00:30:44,900 --> 00:30:48,950
get rid of your developers that's the

831
00:30:46,550 --> 00:30:51,620
easy fix right but nobody really wants

832
00:30:48,950 --> 00:30:53,390
to do that okay so you really have to go

833
00:30:51,620 --> 00:30:55,340
through that exercise and you can bring

834
00:30:53,390 --> 00:30:57,560
these numbers down if you spend well if

835
00:30:55,340 --> 00:30:59,570
you make sure that you you you know your

836
00:30:57,560 --> 00:31:01,550
numbers you know exactly where you have

837
00:30:59,570 --> 00:31:03,230
to put more money in and less money in

838
00:31:01,550 --> 00:31:06,260
so that you can optimize everything

839
00:31:03,230 --> 00:31:08,640
across what a developer sees and you can

840
00:31:06,260 --> 00:31:11,520
help them out writing soup

841
00:31:08,640 --> 00:31:16,980
okay I think that's the end of my talk

842
00:31:11,520 --> 00:31:24,299
oh I thought it was 30 and 10 which is

843
00:31:16,980 --> 00:31:28,170
40 so we're running a tournament we're

844
00:31:24,299 --> 00:31:30,480
running a tournament today and what you

845
00:31:28,170 --> 00:31:33,480
can do with that tournament is you you

846
00:31:30,480 --> 00:31:36,809
can actually log in to the spiracle

847
00:31:33,480 --> 00:31:38,549
warrior portal register it's gonna be

848
00:31:36,809 --> 00:31:40,918
we're gonna post it on on social media

849
00:31:38,549 --> 00:31:43,040
or you can take a picture of course that

850
00:31:40,919 --> 00:31:46,020
would be the easiest for you right now

851
00:31:43,040 --> 00:31:51,299
so we should have opened it up at 10:30

852
00:31:46,020 --> 00:31:54,299
which is now okay if you go on there and

853
00:31:51,299 --> 00:31:57,418
you fill out the registry code and you

854
00:31:54,299 --> 00:31:58,650
add there in Benelux 2017 you can play a

855
00:31:57,419 --> 00:32:01,049
tournament you can play against each

856
00:31:58,650 --> 00:32:03,240
other it's it's not a hacking contest no

857
00:32:01,049 --> 00:32:05,730
it's no we we want to we want to educate

858
00:32:03,240 --> 00:32:07,799
developers we want to find problems in

859
00:32:05,730 --> 00:32:11,340
code but also fix problems in code all

860
00:32:07,799 --> 00:32:13,620
right it's a learning exercise so you

861
00:32:11,340 --> 00:32:15,750
don't have to be the top notch expert to

862
00:32:13,620 --> 00:32:19,199
try it out so please do not feel like

863
00:32:15,750 --> 00:32:20,640
well I'm you know I'm not the best in

864
00:32:19,200 --> 00:32:22,020
that no no no that's not the idea the

865
00:32:20,640 --> 00:32:25,200
idea is hey it's a learning experience

866
00:32:22,020 --> 00:32:28,290
go on there try it out and see if you

867
00:32:25,200 --> 00:32:30,090
like it and and in the closing we

868
00:32:28,290 --> 00:32:32,520
actually will give prizes to the number

869
00:32:30,090 --> 00:32:34,320
one two and three in the evening so if

870
00:32:32,520 --> 00:32:35,910
you wanna if you want to play if you

871
00:32:34,320 --> 00:32:38,010
want to learn about how to write secure

872
00:32:35,910 --> 00:32:41,360
code and how to fix issues in code and

873
00:32:38,010 --> 00:32:44,820
you can you can do that today

874
00:32:41,360 --> 00:32:49,020
and with that I would like to open it up

875
00:32:44,820 --> 00:32:57,069
for questions so thank you very much

876
00:32:49,020 --> 00:32:57,069
[Applause]

877
00:32:58,140 --> 00:33:08,799
yes yes I have a question or a comment

878
00:33:06,220 --> 00:33:10,299
absolutely so I really like to talk I

879
00:33:08,799 --> 00:33:11,770
think you thank you great talk but I

880
00:33:10,299 --> 00:33:14,559
think you're not going far too far

881
00:33:11,770 --> 00:33:15,429
enough in your conclusions so what

882
00:33:14,559 --> 00:33:17,620
you're saying is that for example

883
00:33:15,429 --> 00:33:20,200
training is important or that code

884
00:33:17,620 --> 00:33:22,928
guidelines are important but I think we

885
00:33:20,200 --> 00:33:24,370
should go further and we should prevent

886
00:33:22,929 --> 00:33:26,350
vulnerabilities from being introduced

887
00:33:24,370 --> 00:33:28,299
for example you say you we should make a

888
00:33:26,350 --> 00:33:30,879
coding guideline to only use parama

889
00:33:28,299 --> 00:33:33,700
parametrized State sequel statements yes

890
00:33:30,880 --> 00:33:36,370
but I think we should just prevent the

891
00:33:33,700 --> 00:33:38,529
insecure way right why don't we remove I

892
00:33:36,370 --> 00:33:40,928
don't know string based api's from

893
00:33:38,529 --> 00:33:43,270
frameworks so that absolutely dead bugs

894
00:33:40,929 --> 00:33:44,679
cannot even be introduced and I think on

895
00:33:43,270 --> 00:33:47,470
the training point I don't think

896
00:33:44,679 --> 00:33:49,600
training scales because you usually only

897
00:33:47,470 --> 00:33:51,340
need one developer that maybe was ill at

898
00:33:49,600 --> 00:33:52,719
the day of the training or that didn't

899
00:33:51,340 --> 00:33:54,699
pay attention or I just forgot about

900
00:33:52,720 --> 00:33:56,380
what the input was in the training so

901
00:33:54,700 --> 00:33:57,669
instead of I think trainings are

902
00:33:56,380 --> 00:34:00,279
important but instead of training so you

903
00:33:57,669 --> 00:34:01,720
rather should harden stuff and make sure

904
00:34:00,279 --> 00:34:04,299
that developers can't introduce bugs

905
00:34:01,720 --> 00:34:08,918
even if they want to so so I absolutely

906
00:34:04,299 --> 00:34:11,889
agree on on a hardening stuff I do not

907
00:34:08,918 --> 00:34:14,230
agree on training of course because for

908
00:34:11,889 --> 00:34:16,030
obvious reasons but maybe we should talk

909
00:34:14,230 --> 00:34:18,280
and and we should tell you what we do

910
00:34:16,030 --> 00:34:20,379
and on a day to day basis with training

911
00:34:18,280 --> 00:34:22,929
and and continuous training but yes

912
00:34:20,379 --> 00:34:25,210
absolutely on your first point and if we

913
00:34:22,929 --> 00:34:26,918
can fix it in the framework we should

914
00:34:25,210 --> 00:34:29,589
fix it in the framework and make sure it

915
00:34:26,918 --> 00:34:31,569
does not happen the the unfortunate

916
00:34:29,589 --> 00:34:34,719
thing is that we have a lot of legacy

917
00:34:31,570 --> 00:34:36,369
systems and over there your approach

918
00:34:34,719 --> 00:34:38,080
will unfortunately not work so you need

919
00:34:36,369 --> 00:34:39,639
something else so you need to follow

920
00:34:38,080 --> 00:34:41,379
coding guidelines and even if you fix it

921
00:34:39,639 --> 00:34:42,820
up and then over there I call it more of

922
00:34:41,379 --> 00:34:45,580
a refactoring exercise where you're

923
00:34:42,820 --> 00:34:47,830
gonna then refactor your your legacy

924
00:34:45,580 --> 00:34:50,080
code and and if you still can introduce

925
00:34:47,830 --> 00:34:51,429
some some some additional libraries yes

926
00:34:50,080 --> 00:34:52,839
you should do it but you still need to

927
00:34:51,429 --> 00:34:54,550
refactor it and you have to make sure

928
00:34:52,839 --> 00:34:56,440
that you refactor everything over there

929
00:34:54,550 --> 00:34:58,180
and that everything points to that one

930
00:34:56,440 --> 00:35:00,160
library so you still need these coding

931
00:34:58,180 --> 00:35:01,509
guidelines that say don't do it yourself

932
00:35:00,160 --> 00:35:03,339
crypto is a perfect example

933
00:35:01,510 --> 00:35:06,670
don't don't implement your own crypto

934
00:35:03,339 --> 00:35:08,470
and if you have done it well if you

935
00:35:06,670 --> 00:35:10,299
it and you want to get rid of it in you

936
00:35:08,470 --> 00:35:12,220
installed with it with a new system and

937
00:35:10,299 --> 00:35:14,650
you have to make sure that nobody uses

938
00:35:12,220 --> 00:35:16,750
it anymore because it's surprising how

939
00:35:14,650 --> 00:35:18,309
often it's so widespread within the

940
00:35:16,750 --> 00:35:20,020
organization and this team is using and

941
00:35:18,309 --> 00:35:22,270
that team is using and suddenly

942
00:35:20,020 --> 00:35:24,520
everybody is using it so replacing it

943
00:35:22,270 --> 00:35:27,009
can be really really tricky but yes I

944
00:35:24,520 --> 00:35:33,849
agree 100% with your statement the first

945
00:35:27,010 --> 00:35:34,809
one yes have the mic so I have I have a

946
00:35:33,849 --> 00:35:36,910
comment and a question

947
00:35:34,809 --> 00:35:38,829
okay the comment is a thank you for a

948
00:35:36,910 --> 00:35:41,170
presentation I found it's very too much

949
00:35:38,829 --> 00:35:45,910
black and white yeah you see we have

950
00:35:41,170 --> 00:35:48,790
right the red squares and green squares

951
00:35:45,910 --> 00:35:50,589
I think as my colleague I guess we

952
00:35:48,790 --> 00:35:53,680
should go further if a father even

953
00:35:50,589 --> 00:35:55,359
laughter and the question my mind is

954
00:35:53,680 --> 00:35:57,098
that maybe you should if you do kind of

955
00:35:55,359 --> 00:35:58,779
tread modeling and if the code

956
00:35:57,099 --> 00:36:00,549
requirements should be able even to not

957
00:35:58,780 --> 00:36:02,829
have unsecure code from the beginning

958
00:36:00,549 --> 00:36:05,740
because the guy the developer won't

959
00:36:02,829 --> 00:36:07,540
write this code this is a comment and a

960
00:36:05,740 --> 00:36:09,250
question is from your experience what do

961
00:36:07,540 --> 00:36:13,779
you think is the best ratio between all

962
00:36:09,250 --> 00:36:16,000
these boxes no so so I see that my

963
00:36:13,780 --> 00:36:17,170
colors may be indeed a little bit more

964
00:36:16,000 --> 00:36:19,599
black black and white that was not

965
00:36:17,170 --> 00:36:21,490
that's also that is not intentional so I

966
00:36:19,599 --> 00:36:23,770
think you really have to spend across

967
00:36:21,490 --> 00:36:25,779
all these solutions because again you

968
00:36:23,770 --> 00:36:27,099
will not you will not solve the world

969
00:36:25,780 --> 00:36:28,450
with with training you will not solve

970
00:36:27,099 --> 00:36:30,309
the world with penetration testing you

971
00:36:28,450 --> 00:36:34,779
will not solve the world with with one

972
00:36:30,309 --> 00:36:36,430
SAS solution no I I i well to give you

973
00:36:34,780 --> 00:36:40,329
to give you an example when when I was

974
00:36:36,430 --> 00:36:42,040
at fortify we ran a test and you were

975
00:36:40,329 --> 00:36:43,660
trying to figure out what the web

976
00:36:42,040 --> 00:36:45,520
inspector Lucien was finding versus what

977
00:36:43,660 --> 00:36:47,460
the static analysis solution was finding

978
00:36:45,520 --> 00:36:51,160
and what the overlap was between the two

979
00:36:47,460 --> 00:36:53,380
well it's it's different tools they find

980
00:36:51,160 --> 00:36:54,730
different stuff so so that was a quite

981
00:36:53,380 --> 00:36:58,230
interesting in the exercise that's why

982
00:36:54,730 --> 00:36:58,230
I'm saying you have to spend across

983
00:36:58,559 --> 00:37:05,710
across the SDLC let's put it that way

984
00:37:01,980 --> 00:37:07,630
what's the best way to spend it depends

985
00:37:05,710 --> 00:37:09,700
on your organization it really depends

986
00:37:07,630 --> 00:37:11,740
on your organization it depends on your

987
00:37:09,700 --> 00:37:13,868
culture it depends on your technologies

988
00:37:11,740 --> 00:37:15,669
that you're using it also depends on

989
00:37:13,869 --> 00:37:20,110
what you've already invested in in

990
00:37:15,670 --> 00:37:22,750
security solutions some some

991
00:37:20,110 --> 00:37:25,150
some organizations have made bad choices

992
00:37:22,750 --> 00:37:26,800
but then customized the solution in such

993
00:37:25,150 --> 00:37:29,110
a way that it was is workable and

994
00:37:26,800 --> 00:37:31,330
switching that out and another solution

995
00:37:29,110 --> 00:37:32,530
in is hard so I cannot give you an

996
00:37:31,330 --> 00:37:34,600
answer to that question that's why I'm

997
00:37:32,530 --> 00:37:36,610
giving you a lot of options here how to

998
00:37:34,600 --> 00:37:39,759
do it within your own own organization

999
00:37:36,610 --> 00:37:41,590
but it it it it has to be across

1000
00:37:39,760 --> 00:37:42,040
everything that's one thing that I'm

1001
00:37:41,590 --> 00:37:44,110
sure of

1002
00:37:42,040 --> 00:37:45,220
and then you have to look at all the

1003
00:37:44,110 --> 00:37:47,020
different things in your own

1004
00:37:45,220 --> 00:37:54,339
organization to make sure you spend

1005
00:37:47,020 --> 00:37:57,070
optimal in an optimal way hey thanks for

1006
00:37:54,340 --> 00:37:58,450
great presentation in very welcome my

1007
00:37:57,070 --> 00:38:01,630
question there are two questions in fact

1008
00:37:58,450 --> 00:38:03,939
first how did you arrive at 45 that's a

1009
00:38:01,630 --> 00:38:06,160
pretty large number for a medium-sized

1010
00:38:03,940 --> 00:38:08,530
company with around 200 or 300

1011
00:38:06,160 --> 00:38:10,990
developers not to talk about large

1012
00:38:08,530 --> 00:38:14,260
enterprises second part of the question

1013
00:38:10,990 --> 00:38:16,540
is have you tried of rough solutions and

1014
00:38:14,260 --> 00:38:20,650
have they any impact in reducing this

1015
00:38:16,540 --> 00:38:22,840
number yes so so and so so first of all

1016
00:38:20,650 --> 00:38:24,940
on fortify I when I when I when I I

1017
00:38:22,840 --> 00:38:26,740
moved to the US and I joined fortify as

1018
00:38:24,940 --> 00:38:29,590
a researcher the way I got in there was

1019
00:38:26,740 --> 00:38:31,450
my PhD was around static analysis and I

1020
00:38:29,590 --> 00:38:35,080
was finding so I was actually

1021
00:38:31,450 --> 00:38:37,720
transforming a low-level code from from

1022
00:38:35,080 --> 00:38:39,100
from being totally clean to obfuscated

1023
00:38:37,720 --> 00:38:40,600
code and then trying to Diab the skate

1024
00:38:39,100 --> 00:38:42,430
and the way we did that was through

1025
00:38:40,600 --> 00:38:44,470
binary rewriting and for that we used

1026
00:38:42,430 --> 00:38:46,359
static analysis but the general concept

1027
00:38:44,470 --> 00:38:49,060
was was the same you use static analysis

1028
00:38:46,360 --> 00:38:52,090
you you do dataflow analysis to find

1029
00:38:49,060 --> 00:38:54,460
things in code so the way I rolled into

1030
00:38:52,090 --> 00:38:56,500
fortify was really through my PhD

1031
00:38:54,460 --> 00:38:58,870
through my through my through my static

1032
00:38:56,500 --> 00:39:01,990
analysis knowledge I'm have I word on on

1033
00:38:58,870 --> 00:39:04,390
rasp solution actually I did so

1034
00:39:01,990 --> 00:39:06,549
initially I started at fortify doing

1035
00:39:04,390 --> 00:39:09,520
more of the static analysis stuff and in

1036
00:39:06,550 --> 00:39:11,470
the end I owned essentially all the

1037
00:39:09,520 --> 00:39:14,080
runtime solutions which contained a rasp

1038
00:39:11,470 --> 00:39:16,240
solution which is now called HP defender

1039
00:39:14,080 --> 00:39:20,770
or something like that so yes I've

1040
00:39:16,240 --> 00:39:22,930
worked on on rasp solutions my

1041
00:39:20,770 --> 00:39:24,730
experience with rasp solutions is you're

1042
00:39:22,930 --> 00:39:27,850
holding the hot potato so your

1043
00:39:24,730 --> 00:39:29,980
throughout this entire cycle you're

1044
00:39:27,850 --> 00:39:32,410
gonna put an agent in production and

1045
00:39:29,980 --> 00:39:34,030
you're holding the hot potato because if

1046
00:39:32,410 --> 00:39:35,589
if it still comes through you

1047
00:39:34,030 --> 00:39:37,720
that attack and you say I'm gonna

1048
00:39:35,590 --> 00:39:39,460
protect against sequel injection and I

1049
00:39:37,720 --> 00:39:41,140
don't know what the legal consequences

1050
00:39:39,460 --> 00:39:42,700
is but but for sure I know you're

1051
00:39:41,140 --> 00:39:47,440
holding the hot potato that that that's

1052
00:39:42,700 --> 00:39:49,569
one thing lasting on rasp solutions it's

1053
00:39:47,440 --> 00:39:51,730
really really hard to get that

1054
00:39:49,570 --> 00:39:53,530
introduction it's really really hard to

1055
00:39:51,730 --> 00:39:55,300
convince the people to put an additional

1056
00:39:53,530 --> 00:39:57,630
piece of software in your production

1057
00:39:55,300 --> 00:40:02,050
machines that's gonna do security things

1058
00:39:57,630 --> 00:40:04,840
so if if you can get there good but from

1059
00:40:02,050 --> 00:40:07,060
my experience a lot of organizations see

1060
00:40:04,840 --> 00:40:09,160
that more as putting additional software

1061
00:40:07,060 --> 00:40:15,970
additional risk in production and

1062
00:40:09,160 --> 00:40:17,649
actually preventing risk yeah thanks

1063
00:40:15,970 --> 00:40:19,600
very much for that interesting talk I

1064
00:40:17,650 --> 00:40:21,250
quickly want to emphasize that point was

1065
00:40:19,600 --> 00:40:23,259
that we really need to help the

1066
00:40:21,250 --> 00:40:25,420
developers in developing securely my

1067
00:40:23,260 --> 00:40:27,910
experience is actually there in the last

1068
00:40:25,420 --> 00:40:30,130
year's it's more the situation that they

1069
00:40:27,910 --> 00:40:31,540
want to develop securely I it's a long

1070
00:40:30,130 --> 00:40:33,550
time ago that I had discussions about

1071
00:40:31,540 --> 00:40:35,410
not fixing it back mmm-hmm

1072
00:40:33,550 --> 00:40:36,850
maybe I'm belonging to no those few

1073
00:40:35,410 --> 00:40:38,500
people that actually did that money

1074
00:40:36,850 --> 00:40:41,440
calculations within the company I was

1075
00:40:38,500 --> 00:40:43,090
working for okay gives an interesting

1076
00:40:41,440 --> 00:40:45,340
insight I can really recommend to do

1077
00:40:43,090 --> 00:40:46,810
that but if you do that don't only look

1078
00:40:45,340 --> 00:40:49,120
at the money of the tools that you are

1079
00:40:46,810 --> 00:40:50,590
required of buying look all set your

1080
00:40:49,120 --> 00:40:53,380
internal costs in your internal

1081
00:40:50,590 --> 00:40:54,760
processes absolutely um I wouldn't be

1082
00:40:53,380 --> 00:40:56,470
surprised if you learned that by

1083
00:40:54,760 --> 00:40:59,530
optimizing your internal processes you

1084
00:40:56,470 --> 00:41:01,330
can say if much much more than but using

1085
00:40:59,530 --> 00:41:04,570
licensing costs for an external tool or

1086
00:41:01,330 --> 00:41:06,700
an external security audit absolutely no

1087
00:41:04,570 --> 00:41:09,280
and I think that so this this was a

1088
00:41:06,700 --> 00:41:11,620
little bit too - a slimmed down version

1089
00:41:09,280 --> 00:41:13,450
of my calculation of course but yes what

1090
00:41:11,620 --> 00:41:15,430
I what I try to slip in there was yes

1091
00:41:13,450 --> 00:41:16,930
you have that developer cost but in that

1092
00:41:15,430 --> 00:41:18,520
developer cost is essentially all the

1093
00:41:16,930 --> 00:41:21,899
cost that you need to fix a problem in

1094
00:41:18,520 --> 00:41:21,900
code so yes couldn't agree more

1095
00:41:26,730 --> 00:41:33,910
so I'm not a make so I'm trying to

1096
00:41:29,830 --> 00:41:35,740
figure out if my view of the world is so

1097
00:41:33,910 --> 00:41:37,210
if you look at the books of Vegard

1098
00:41:35,740 --> 00:41:39,270
McGraw he buys the feature set of the

1099
00:41:37,210 --> 00:41:42,310
codes of two arrows are actually

1100
00:41:39,270 --> 00:41:45,820
cortical box but the other half of

1101
00:41:42,310 --> 00:41:46,840
structural flaws exactly and so if I'm

1102
00:41:45,820 --> 00:41:50,050
correct you

1103
00:41:46,840 --> 00:41:54,310
focused mostly on the box absolutely yes

1104
00:41:50,050 --> 00:41:56,410
but we are the risk analysis and often

1105
00:41:54,310 --> 00:41:59,560
no no absolutely no no you're right so

1106
00:41:56,410 --> 00:42:01,750
so there's there's bugs and there's

1107
00:41:59,560 --> 00:42:03,610
flaws I totally focus on the bugs

1108
00:42:01,750 --> 00:42:05,320
because some of these solutions like

1109
00:42:03,610 --> 00:42:07,450
static analysis solutions also claim to

1110
00:42:05,320 --> 00:42:09,340
find flaws but that's not what they're

1111
00:42:07,450 --> 00:42:11,770
made for they're really made for finding

1112
00:42:09,340 --> 00:42:13,900
bugs so this kind of system did the

1113
00:42:11,770 --> 00:42:16,300
stuff that I outlined today works really

1114
00:42:13,900 --> 00:42:17,530
really well for for finding bugs in the

1115
00:42:16,300 --> 00:42:19,060
code because that's these are the

1116
00:42:17,530 --> 00:42:20,680
developer mistakes if you think about

1117
00:42:19,060 --> 00:42:22,779
floss yeah you really have to do threat

1118
00:42:20,680 --> 00:42:25,390
modeling architectural risk analysis and

1119
00:42:22,780 --> 00:42:29,500
that's more of a manual process I'm not

1120
00:42:25,390 --> 00:42:33,910
really aware of any good tools that can

1121
00:42:29,500 --> 00:42:35,290
help you in in doing a deep analysis and

1122
00:42:33,910 --> 00:42:36,640
there's there's definitely tools that

1123
00:42:35,290 --> 00:42:38,860
can help you with with architectural

1124
00:42:36,640 --> 00:42:41,710
risk analysis and threat modeling and

1125
00:42:38,860 --> 00:42:43,390
and and and you can put some data in

1126
00:42:41,710 --> 00:42:44,830
there so you have a good idea of what's

1127
00:42:43,390 --> 00:42:46,270
going on and and what you need to do

1128
00:42:44,830 --> 00:42:48,250
from a from a threat modeling

1129
00:42:46,270 --> 00:42:50,350
perspective and finding the flaws but

1130
00:42:48,250 --> 00:42:52,120
it's it's it's different it's it's still

1131
00:42:50,350 --> 00:42:54,460
a manual process you have to feed that

1132
00:42:52,120 --> 00:42:56,589
data into that model and that model will

1133
00:42:54,460 --> 00:43:00,160
then help you finding the flaws in your

1134
00:42:56,590 --> 00:43:04,090
system so it is very very different so I

1135
00:43:00,160 --> 00:43:06,879
I I do not have a good answer to you

1136
00:43:04,090 --> 00:43:08,500
what kind of I I'm not the expert in

1137
00:43:06,880 --> 00:43:11,050
that kind of field I'm I've done some of

1138
00:43:08,500 --> 00:43:12,700
that during my time at fortify doing

1139
00:43:11,050 --> 00:43:14,170
doing threat modeling but I'm not the

1140
00:43:12,700 --> 00:43:16,089
expert in that kind of field but it's a

1141
00:43:14,170 --> 00:43:19,110
different thing it's also not a

1142
00:43:16,090 --> 00:43:21,340
developer focus thing developer is more

1143
00:43:19,110 --> 00:43:23,530
taking on what the architect is saying

1144
00:43:21,340 --> 00:43:25,480
for for finding flaws it's more an

1145
00:43:23,530 --> 00:43:27,430
architectural problem where you need

1146
00:43:25,480 --> 00:43:29,830
your design people to get into one room

1147
00:43:27,430 --> 00:43:32,049
have a whiteboard draw some pictures and

1148
00:43:29,830 --> 00:43:35,220
make sure that the flaws are not there

1149
00:43:32,050 --> 00:43:37,810
yes yes that's right this is this is

1150
00:43:35,220 --> 00:43:42,339
100% I talk about finding the bugs in

1151
00:43:37,810 --> 00:43:46,029
the code there for one more question

1152
00:43:42,340 --> 00:43:48,090
quick one every surgeon for coffee all

1153
00:43:46,030 --> 00:43:48,090
right

1154
00:43:49,280 --> 00:43:52,659
you

1155
00:43:49,600 --> 00:43:52,659
[Music]

