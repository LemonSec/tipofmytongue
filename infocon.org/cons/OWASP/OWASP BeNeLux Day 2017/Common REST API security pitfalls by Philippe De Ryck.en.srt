1
00:00:03,270 --> 00:00:08,559
that was just for showing up thanks for

2
00:00:05,590 --> 00:00:10,540
that I'll try to keep you entertained in

3
00:00:08,559 --> 00:00:12,070
this second to last session I'm gonna

4
00:00:10,540 --> 00:00:14,829
talk about common security pitfalls for

5
00:00:12,070 --> 00:00:16,180
API it's you can imagine I'm gonna cover

6
00:00:14,830 --> 00:00:17,980
some things that you probably know about

7
00:00:16,180 --> 00:00:20,320
maybe some things that you have known

8
00:00:17,980 --> 00:00:22,990
about but forgot and if not I'm gonna

9
00:00:20,320 --> 00:00:25,930
put things into context before we start

10
00:00:22,990 --> 00:00:29,830
um let's take a look at what an API

11
00:00:25,930 --> 00:00:31,360
exactly means so let's see um what we're

12
00:00:29,830 --> 00:00:33,760
gonna talk about we have a browser

13
00:00:31,360 --> 00:00:35,320
application on the top we have server or

14
00:00:33,760 --> 00:00:37,960
servers on the right and essentially

15
00:00:35,320 --> 00:00:42,760
what's gonna happen is that we are going

16
00:00:37,960 --> 00:00:44,920
to load our application from one server

17
00:00:42,760 --> 00:00:46,659
and then we gonna fetch data from an API

18
00:00:44,920 --> 00:00:51,699
and this thing is not working my

19
00:00:46,659 --> 00:00:54,248
apologies and then we're gonna fetch

20
00:00:51,699 --> 00:00:56,260
data from an API and work with that data

21
00:00:54,249 --> 00:00:58,449
you can imagine this is kind of setup

22
00:00:56,260 --> 00:00:59,879
changes a few things it has an impact on

23
00:00:58,449 --> 00:01:03,248
certain security properties but it also

24
00:00:59,879 --> 00:01:04,569
may be simplified a few things what I

25
00:01:03,249 --> 00:01:07,509
want to talk about is security

26
00:01:04,569 --> 00:01:09,309
vulnerabilities in this API and I have

27
00:01:07,509 --> 00:01:11,890
no idea what's going on when I test this

28
00:01:09,310 --> 00:01:15,100
everything was fine let me quickly fix

29
00:01:11,890 --> 00:01:17,110
that anyway what I want to talk about is

30
00:01:15,100 --> 00:01:19,869
security problems in this API set up

31
00:01:17,110 --> 00:01:21,789
essentially what's gonna happen is that

32
00:01:19,869 --> 00:01:23,799
we're gonna see a lot of the same

33
00:01:21,789 --> 00:01:26,890
vulnerabilities but now they occur in an

34
00:01:23,799 --> 00:01:28,090
API context and if you recognize this

35
00:01:26,890 --> 00:01:29,469
image then you have been following the

36
00:01:28,090 --> 00:01:31,329
security news and the security news

37
00:01:29,469 --> 00:01:34,359
essentially and this is from the OWASP

38
00:01:31,329 --> 00:01:36,279
top 10 2007 but the first release

39
00:01:34,359 --> 00:01:38,140
candidate the one that got rejected and

40
00:01:36,280 --> 00:01:40,479
after which they made a new one

41
00:01:38,140 --> 00:01:42,390
nonetheless I wanna point this out

42
00:01:40,479 --> 00:01:45,549
because it's actually quite an important

43
00:01:42,390 --> 00:01:47,140
screenshot its effect that we see the

44
00:01:45,549 --> 00:01:49,479
same vulnerabilities appearing in API

45
00:01:47,140 --> 00:01:50,920
test and I assume and I've been reading

46
00:01:49,479 --> 00:01:52,359
up on this and one of the reasons that

47
00:01:50,920 --> 00:01:54,159
this thing is no longer in there is

48
00:01:52,359 --> 00:01:57,658
because essentially a lot of the other

49
00:01:54,159 --> 00:02:00,700
issues are subsumed by this one they

50
00:01:57,659 --> 00:02:03,070
reappear in this time in the form of an

51
00:02:00,700 --> 00:02:04,570
API and it's URI problems so in this

52
00:02:03,070 --> 00:02:06,758
talk I'm gonna talk about a few pitfalls

53
00:02:04,570 --> 00:02:09,609
I'm gonna cover I haven't counted them I

54
00:02:06,759 --> 00:02:11,140
think it's about then different topics

55
00:02:09,610 --> 00:02:12,760
are we gonna blow through the

56
00:02:11,140 --> 00:02:14,890
presentation it's gonna be structured

57
00:02:12,760 --> 00:02:16,510
fairly logically and by the end you have

58
00:02:14,890 --> 00:02:18,458
a good idea of things to look out for

59
00:02:16,510 --> 00:02:21,129
common mistakes in an API even by people

60
00:02:18,459 --> 00:02:21,459
that should know better or to know

61
00:02:21,129 --> 00:02:24,578
better

62
00:02:21,459 --> 00:02:26,650
they still make mistakes before we start

63
00:02:24,579 --> 00:02:28,079
a small word about myself I'm Philip

64
00:02:26,650 --> 00:02:31,299
Derek from Levin

65
00:02:28,079 --> 00:02:33,760
I've have been working in web security

66
00:02:31,299 --> 00:02:35,709
for a long time I did a PhD in web

67
00:02:33,760 --> 00:02:37,629
security and since then I've been giving

68
00:02:35,709 --> 00:02:40,180
trainings to companies teaching

69
00:02:37,629 --> 00:02:41,828
developers how to recognize security

70
00:02:40,180 --> 00:02:43,930
problems how to fix them how to build

71
00:02:41,829 --> 00:02:45,849
more secure applications irrelevant

72
00:02:43,930 --> 00:02:48,970
things about what I did recently or am

73
00:02:45,849 --> 00:02:50,349
I'm doing I've built an online security

74
00:02:48,970 --> 00:02:51,280
course for the University it's a free

75
00:02:50,349 --> 00:02:53,530
online course about web security

76
00:02:51,280 --> 00:02:55,599
fundamentals things that essentially

77
00:02:53,530 --> 00:02:56,980
every developer should know so if you're

78
00:02:55,599 --> 00:02:58,750
interested in that or you know people

79
00:02:56,980 --> 00:02:59,379
that should know those things point them

80
00:02:58,750 --> 00:03:01,239
towards that

81
00:02:59,379 --> 00:03:03,069
I'm also co-organized in the sake of

82
00:03:01,239 --> 00:03:05,019
left ports which is a week-long course

83
00:03:03,069 --> 00:03:06,280
on security not only web security but a

84
00:03:05,019 --> 00:03:09,069
software security in general

85
00:03:06,280 --> 00:03:10,780
ceiba the external gave it training here

86
00:03:09,069 --> 00:03:14,858
yesterday will teach there next year

87
00:03:10,780 --> 00:03:15,370
alongside a dozen other experts from all

88
00:03:14,859 --> 00:03:16,930
over the world

89
00:03:15,370 --> 00:03:19,180
so that's also a very interesting

90
00:03:16,930 --> 00:03:21,190
reference if you want to learn more and

91
00:03:19,180 --> 00:03:24,790
if you want to learn about all kinds of

92
00:03:21,190 --> 00:03:26,500
security now let's talk about AP ax

93
00:03:24,790 --> 00:03:32,168
what's the first thing that matters in

94
00:03:26,500 --> 00:03:33,609
an API but who can it gets your

95
00:03:32,169 --> 00:03:36,760
contacting the API what's the first

96
00:03:33,609 --> 00:03:39,099
thing encryption

97
00:03:36,760 --> 00:03:42,310
yes HTTP of course I don't know who said

98
00:03:39,099 --> 00:03:43,988
it thanks for the heads up essentially

99
00:03:42,310 --> 00:03:46,389
HTTPS is one of the most crucial things

100
00:03:43,989 --> 00:03:47,590
there's plenty of information about HP's

101
00:03:46,389 --> 00:03:49,449
out there I'm not gonna spend too much

102
00:03:47,590 --> 00:03:50,949
time on it I'm gonna stress that HTS is

103
00:03:49,449 --> 00:03:52,810
really really really important

104
00:03:50,949 --> 00:03:55,000
everything we're gonna talk about next

105
00:03:52,810 --> 00:03:56,949
kind of builds up on top of that so if

106
00:03:55,000 --> 00:03:58,480
you don't have HTTPS maybe it's not

107
00:03:56,949 --> 00:04:00,010
formal for all kinds of attacks but

108
00:03:58,480 --> 00:04:02,590
essentially there's always one huge weak

109
00:04:00,010 --> 00:04:04,179
spot on the network traffic that will

110
00:04:02,590 --> 00:04:06,690
compromise all security that you're

111
00:04:04,180 --> 00:04:08,739
building a few guidelines for api's

112
00:04:06,690 --> 00:04:12,060
first of all there's no excuse to not

113
00:04:08,739 --> 00:04:14,590
use HTTPS second of all you should know

114
00:04:12,060 --> 00:04:16,630
that api's are often accessed directly

115
00:04:14,590 --> 00:04:18,430
so you have an xhr object that sends a

116
00:04:16,630 --> 00:04:20,798
request to an endpoint there's no need

117
00:04:18,430 --> 00:04:23,440
in general to support redirect from HTTP

118
00:04:20,798 --> 00:04:26,229
it's a potential security hole and if

119
00:04:23,440 --> 00:04:27,789
your API runs on a domain that hosts

120
00:04:26,229 --> 00:04:29,710
nothing else nothing that should be

121
00:04:27,789 --> 00:04:30,370
accessed by tagging URL in the browser

122
00:04:29,710 --> 00:04:32,440
then there's

123
00:04:30,370 --> 00:04:34,360
Oh actually need to support HP that's

124
00:04:32,440 --> 00:04:36,820
one thing that you can all right already

125
00:04:34,360 --> 00:04:38,740
take away from this and can disable if

126
00:04:36,820 --> 00:04:40,090
you don't need it and second what you

127
00:04:38,740 --> 00:04:42,040
should do is you should enable strict

128
00:04:40,090 --> 00:04:44,650
Transport Security on your API endpoint

129
00:04:42,040 --> 00:04:46,150
as well because HSTs or HTTP strict

130
00:04:44,650 --> 00:04:48,310
Transport Security will tell the browser

131
00:04:46,150 --> 00:04:50,560
that it should always use HTTPS been

132
00:04:48,310 --> 00:04:52,540
connecting to your domain do that to me

133
00:04:50,560 --> 00:04:54,280
essentially what you tell or what you

134
00:04:52,540 --> 00:04:56,110
avoid then is Network attacks is still

135
00:04:54,280 --> 00:04:57,669
try to downgrade to http and become a

136
00:04:56,110 --> 00:05:01,169
man-in-the-middle they will no longer

137
00:04:57,669 --> 00:05:04,479
work when you have HSTs enable oh that's

138
00:05:01,169 --> 00:05:06,789
pitfall no sir this is an example of how

139
00:05:04,479 --> 00:05:09,159
to configure HSTs it's essentially a

140
00:05:06,789 --> 00:05:10,840
response header with a max age and mxh

141
00:05:09,160 --> 00:05:13,180
tells the browser for the next number of

142
00:05:10,840 --> 00:05:15,219
seconds don't send me HTTP anymore

143
00:05:13,180 --> 00:05:17,740
always use HTTPS regardless of what you

144
00:05:15,220 --> 00:05:19,330
see things should be done this is for a

145
00:05:17,740 --> 00:05:22,240
year by the way so in the next year

146
00:05:19,330 --> 00:05:24,698
no h-2b anymore brings me to the first

147
00:05:22,240 --> 00:05:28,539
security the warming up so to say

148
00:05:24,699 --> 00:05:32,020
essentially provide HTTPS force the use

149
00:05:28,539 --> 00:05:33,490
of HTTPS either by not of offering HTTP

150
00:05:32,020 --> 00:05:40,270
and by enabling strict Transport

151
00:05:33,490 --> 00:05:42,430
Security all right let's move on to the

152
00:05:40,270 --> 00:05:44,349
next one next one is going to take us

153
00:05:42,430 --> 00:05:46,180
into the application layer it's going to

154
00:05:44,349 --> 00:05:48,370
talk about the actual application this

155
00:05:46,180 --> 00:05:50,349
is an example from a month ago or two

156
00:05:48,370 --> 00:05:51,160
months ago somewhere around that maybe

157
00:05:50,349 --> 00:05:52,810
you've heard about it

158
00:05:51,160 --> 00:05:54,669
the mobile had a nasty vulnerability

159
00:05:52,810 --> 00:05:56,500
anyone with a phone number could access

160
00:05:54,669 --> 00:05:59,680
the account details associated with that

161
00:05:56,500 --> 00:06:02,919
number the problem here is that a mobile

162
00:05:59,680 --> 00:06:04,810
uses phone relative to problems first of

163
00:06:02,919 --> 00:06:06,099
all it uses phone numbers to refer to an

164
00:06:04,810 --> 00:06:07,930
account phone numbers or public

165
00:06:06,099 --> 00:06:09,699
information by itself that's not a

166
00:06:07,930 --> 00:06:11,440
problem but the underlying problem is

167
00:06:09,699 --> 00:06:13,360
that they forgot to have forced a proper

168
00:06:11,440 --> 00:06:15,460
authorization on those cots but they

169
00:06:13,360 --> 00:06:16,690
forgot to check a is the guy asking

170
00:06:15,460 --> 00:06:18,969
access to this account information

171
00:06:16,690 --> 00:06:21,400
actually the owner of that account or is

172
00:06:18,970 --> 00:06:23,979
it just someone else who is sitting out

173
00:06:21,400 --> 00:06:25,750
there and this is how we know as the use

174
00:06:23,979 --> 00:06:27,909
of unsecure direct object references

175
00:06:25,750 --> 00:06:30,460
this has been a no stop 10 for ages and

176
00:06:27,910 --> 00:06:32,289
it's still in a new one but it's wrapped

177
00:06:30,460 --> 00:06:33,820
up with another issue and it's still a

178
00:06:32,289 --> 00:06:36,010
problem that we see a lot in modern

179
00:06:33,820 --> 00:06:38,740
applications such as is a mobile example

180
00:06:36,010 --> 00:06:40,960
and actually I'm afraid and it's gonna

181
00:06:38,740 --> 00:06:44,000
get a lot worse because now everybody is

182
00:06:40,960 --> 00:06:47,390
building REST API at a REST API so use

183
00:06:44,000 --> 00:06:51,590
by default every API has endpoints that

184
00:06:47,390 --> 00:06:53,450
take an idea task ID or whatever as an

185
00:06:51,590 --> 00:06:55,700
example here now everything works fine

186
00:06:53,450 --> 00:06:57,590
in your first first example your

187
00:06:55,700 --> 00:06:59,180
proof-of-concept API you start building

188
00:06:57,590 --> 00:07:00,229
on top of that and of course in the

189
00:06:59,180 --> 00:07:02,510
tutorial nobody cares about

190
00:07:00,230 --> 00:07:03,770
authentication because it's the

191
00:07:02,510 --> 00:07:05,510
tutorials proof of concept you're

192
00:07:03,770 --> 00:07:06,650
learning how to do something then you

193
00:07:05,510 --> 00:07:08,810
start building on top of that you add

194
00:07:06,650 --> 00:07:10,429
authentication you add authentication

195
00:07:08,810 --> 00:07:11,660
checks and everything is fine you need

196
00:07:10,430 --> 00:07:13,520
to be authenticated to access an

197
00:07:11,660 --> 00:07:16,430
endpoint and what you may forget is a

198
00:07:13,520 --> 00:07:18,049
simple check if the user is actually the

199
00:07:16,430 --> 00:07:19,280
owner of the task in this case before

200
00:07:18,050 --> 00:07:21,620
returning the object and that's

201
00:07:19,280 --> 00:07:24,260
something that's often forgotten and it

202
00:07:21,620 --> 00:07:26,390
can become even more problematic if you

203
00:07:24,260 --> 00:07:28,159
have functions to make state changing

204
00:07:26,390 --> 00:07:30,650
operations such as deleting something or

205
00:07:28,160 --> 00:07:33,919
modifying something these functions also

206
00:07:30,650 --> 00:07:36,650
require explicit access control this is

207
00:07:33,919 --> 00:07:39,140
something that's often skipped or missed

208
00:07:36,650 --> 00:07:40,940
in in many ApS by the way I also have

209
00:07:39,140 --> 00:07:43,190
the content on the slides so you can

210
00:07:40,940 --> 00:07:44,570
refer to them later if you want to but

211
00:07:43,190 --> 00:07:46,340
most of the things that are on here I

212
00:07:44,570 --> 00:07:48,979
already covered and during my

213
00:07:46,340 --> 00:07:51,500
presentation earlier so the only proper

214
00:07:48,979 --> 00:07:53,390
mitigation here is implementing access

215
00:07:51,500 --> 00:07:54,890
control checks the fact that is indeed

216
00:07:53,390 --> 00:07:56,630
these direct object references are

217
00:07:54,890 --> 00:07:58,610
insecure is because there's missing

218
00:07:56,630 --> 00:08:01,010
authorization they're complementary to

219
00:07:58,610 --> 00:08:03,200
that you can of course start to use non

220
00:08:01,010 --> 00:08:06,740
predictable identifiers but that's not

221
00:08:03,200 --> 00:08:08,360
always necessary and that by itself is

222
00:08:06,740 --> 00:08:10,700
not enough as a countermeasure that's

223
00:08:08,360 --> 00:08:12,740
something definitely to keep in mind so

224
00:08:10,700 --> 00:08:15,320
again a security pitfall to wrap this

225
00:08:12,740 --> 00:08:18,380
this one up effect that you have missing

226
00:08:15,320 --> 00:08:20,360
authorization on these calls to your API

227
00:08:18,380 --> 00:08:26,719
is definitely a problem in many many

228
00:08:20,360 --> 00:08:28,010
scenarios alright but before you can

229
00:08:26,720 --> 00:08:29,450
make a decision whether something is

230
00:08:28,010 --> 00:08:31,490
allowed or not whether the call is

231
00:08:29,450 --> 00:08:33,409
authorized you need some information

232
00:08:31,490 --> 00:08:35,539
about who is making the call so you need

233
00:08:33,409 --> 00:08:36,979
session information the session

234
00:08:35,539 --> 00:08:39,199
information used to be something

235
00:08:36,979 --> 00:08:41,450
server-side so back in the day

236
00:08:39,200 --> 00:08:43,039
you all remember we had an application

237
00:08:41,450 --> 00:08:46,130
that store session information on the

238
00:08:43,039 --> 00:08:47,839
server an API rolled people don't like

239
00:08:46,130 --> 00:08:49,910
to see this because this means that you

240
00:08:47,839 --> 00:08:51,350
have to keep state on the server means

241
00:08:49,910 --> 00:08:53,000
that you have to decide if you have

242
00:08:51,350 --> 00:08:55,240
multiple servers which server is gonna

243
00:08:53,000 --> 00:08:57,860
handle which requests and as a solution

244
00:08:55,240 --> 00:09:00,079
people have thought about a

245
00:08:57,860 --> 00:09:01,880
if we move our session information to

246
00:09:00,079 --> 00:09:03,579
decline then things become a hell of a

247
00:09:01,880 --> 00:09:06,920
lot easier right

248
00:09:03,579 --> 00:09:08,779
well it depends sure it's gonna be

249
00:09:06,920 --> 00:09:10,250
easier because you don't have to decide

250
00:09:08,779 --> 00:09:11,540
which call goes to which server and you

251
00:09:10,250 --> 00:09:13,130
can spin up additional servers and

252
00:09:11,540 --> 00:09:14,689
everything keeps working now you have a

253
00:09:13,130 --> 00:09:16,399
stateless API which is awesome

254
00:09:14,690 --> 00:09:18,339
but the security properties of what

255
00:09:16,399 --> 00:09:20,839
we're doing actually changed quite a bit

256
00:09:18,339 --> 00:09:22,790
let me give you an example of wha what I

257
00:09:20,839 --> 00:09:24,800
mean here but first of all if you have a

258
00:09:22,790 --> 00:09:27,019
server-side session object the data in

259
00:09:24,800 --> 00:09:29,170
that object is implicitly trusted it

260
00:09:27,019 --> 00:09:31,339
sits on the server its trusted data

261
00:09:29,170 --> 00:09:32,630
sounds logical right the only thing that

262
00:09:31,339 --> 00:09:35,230
you send to the client is an identifier

263
00:09:32,630 --> 00:09:37,700
that identifier remains vulnerable

264
00:09:35,230 --> 00:09:39,470
client-side sessions are completely

265
00:09:37,700 --> 00:09:41,149
different now you store actual data on

266
00:09:39,470 --> 00:09:43,880
the client and you trust that data when

267
00:09:41,149 --> 00:09:45,800
it comes back but a-town the client

268
00:09:43,880 --> 00:09:48,500
should be verified before you use it and

269
00:09:45,800 --> 00:09:50,029
that small change on a picture just move

270
00:09:48,500 --> 00:09:53,000
one object from one place to another has

271
00:09:50,029 --> 00:09:55,700
a big impact or security that means that

272
00:09:53,000 --> 00:09:57,079
client-side data needs at least one and

273
00:09:55,700 --> 00:09:58,190
probably two additional security

274
00:09:57,079 --> 00:09:59,989
properties first of all you need to

275
00:09:58,190 --> 00:10:01,760
ensure the integrity of the data you get

276
00:09:59,990 --> 00:10:03,320
back you need to make sure the client

277
00:10:01,760 --> 00:10:05,420
did not tamper with it in the session

278
00:10:03,320 --> 00:10:07,070
data before you start using it because

279
00:10:05,420 --> 00:10:09,110
if you have a flag in there you allow

280
00:10:07,070 --> 00:10:11,120
administrator access and you simply use

281
00:10:09,110 --> 00:10:12,980
that to decide whether that's something

282
00:10:11,120 --> 00:10:14,390
that's allowed or not well now it comes

283
00:10:12,980 --> 00:10:16,459
from the kind so it can be temporary

284
00:10:14,390 --> 00:10:19,100
that's integrity checking the second one

285
00:10:16,459 --> 00:10:20,719
is confidentiality if you store

286
00:10:19,100 --> 00:10:22,370
sensitive information in the session

287
00:10:20,720 --> 00:10:23,870
object for example if you're building an

288
00:10:22,370 --> 00:10:26,149
eHealth application you store some

289
00:10:23,870 --> 00:10:28,220
patient information in the session while

290
00:10:26,149 --> 00:10:30,260
the user is working if that sits on the

291
00:10:28,220 --> 00:10:32,300
client that may be exposed something

292
00:10:30,260 --> 00:10:34,040
some users you don't want to that may be

293
00:10:32,300 --> 00:10:35,630
stored on the device and someone good

294
00:10:34,040 --> 00:10:37,430
control over device can extract an

295
00:10:35,630 --> 00:10:39,620
information so in that case you might

296
00:10:37,430 --> 00:10:42,769
want to employ confidentiality with

297
00:10:39,620 --> 00:10:44,750
encryption as well so client-side

298
00:10:42,769 --> 00:10:45,920
session data even though it looks very

299
00:10:44,750 --> 00:10:47,209
similar and even though in your

300
00:10:45,920 --> 00:10:48,920
applications you don't need to change

301
00:10:47,209 --> 00:10:50,000
that much code to enable that it's

302
00:10:48,920 --> 00:10:52,010
actually something entirely different

303
00:10:50,000 --> 00:10:58,040
and something you need to take into

304
00:10:52,010 --> 00:11:00,620
account one way of doing that is with

305
00:10:58,040 --> 00:11:06,589
JSON web token who here does not know

306
00:11:00,620 --> 00:11:08,250
what the JSON web token is Wow awesome

307
00:11:06,589 --> 00:11:11,400
that's the first

308
00:11:08,250 --> 00:11:14,070
never happen by the way um just in case

309
00:11:11,400 --> 00:11:16,050
well so it's essentially basics for

310
00:11:14,070 --> 00:11:16,560
encoded data and that's one thing you

311
00:11:16,050 --> 00:11:19,349
should know

312
00:11:16,560 --> 00:11:21,750
by default default use is also always

313
00:11:19,350 --> 00:11:23,430
with a signature essentially the data is

314
00:11:21,750 --> 00:11:25,080
protected against tampering if the

315
00:11:23,430 --> 00:11:27,060
client changes this and it cannot

316
00:11:25,080 --> 00:11:29,370
generate a valid signature server will

317
00:11:27,060 --> 00:11:30,989
detect that something is wrong well the

318
00:11:29,370 --> 00:11:34,620
server should detect that something is

319
00:11:30,990 --> 00:11:36,480
wrong so in practice um Joe tokens

320
00:11:34,620 --> 00:11:38,490
they're used for all kinds of things the

321
00:11:36,480 --> 00:11:40,710
spec is fairly open in what they can be

322
00:11:38,490 --> 00:11:42,900
used for and they are used to represent

323
00:11:40,710 --> 00:11:44,640
claims security essentially they prevent

324
00:11:42,900 --> 00:11:47,220
tampering by default they also support

325
00:11:44,640 --> 00:11:49,620
encryption if you want to so by default

326
00:11:47,220 --> 00:11:51,090
the token is signed server signs it and

327
00:11:49,620 --> 00:11:54,140
verifies it when it comes back and then

328
00:11:51,090 --> 00:11:57,450
it trusts the contents of the token

329
00:11:54,140 --> 00:11:59,610
unfortunately many libraries also offer

330
00:11:57,450 --> 00:12:02,310
a decode function and a decode function

331
00:11:59,610 --> 00:12:04,500
simply decodes the data from base64 to a

332
00:12:02,310 --> 00:12:08,640
JSON object without verifying the

333
00:12:04,500 --> 00:12:10,470
integrity and as a result it often

334
00:12:08,640 --> 00:12:12,060
happens that a developer uses decoding

335
00:12:10,470 --> 00:12:13,620
functions instead of verification

336
00:12:12,060 --> 00:12:15,390
functions and because of that you don't

337
00:12:13,620 --> 00:12:18,030
verify the integrity of the object and

338
00:12:15,390 --> 00:12:19,790
you still have a long long way API to

339
00:12:18,030 --> 00:12:23,280
code examples to illustrate what I mean

340
00:12:19,790 --> 00:12:26,219
the top one is how to verify a signature

341
00:12:23,280 --> 00:12:28,680
using one of the popular chat libraries

342
00:12:26,220 --> 00:12:30,660
for Java and the Abdi the bottom one

343
00:12:28,680 --> 00:12:32,819
simply decodes the value this one

344
00:12:30,660 --> 00:12:34,140
verifies the signature you can also see

345
00:12:32,820 --> 00:12:36,210
it's a lot more complicated than this

346
00:12:34,140 --> 00:12:37,800
one so you're gonna find people that use

347
00:12:36,210 --> 00:12:40,560
the decode function instead of the

348
00:12:37,800 --> 00:12:44,219
verify on top of that the fact that is

349
00:12:40,560 --> 00:12:47,729
named decode may result in potential or

350
00:12:44,220 --> 00:12:48,930
accidental abuse or misuse oh um well I

351
00:12:47,730 --> 00:12:50,700
would have liked it better if they

352
00:12:48,930 --> 00:12:52,709
called it insecure decode or whatever

353
00:12:50,700 --> 00:12:54,720
just to give you an hint as a developer

354
00:12:52,710 --> 00:12:56,430
like a man what are you doing there are

355
00:12:54,720 --> 00:12:59,880
valid use case is to use these functions

356
00:12:56,430 --> 00:13:03,089
but they often get misused resulting in

357
00:12:59,880 --> 00:13:07,350
a security pitfall where you have Temper

358
00:13:03,089 --> 00:13:08,760
non tamper-proof tokens my way getting

359
00:13:07,350 --> 00:13:11,220
this wrong is something you will not

360
00:13:08,760 --> 00:13:13,710
notice during any of your regular

361
00:13:11,220 --> 00:13:15,360
testing everything works as expected and

362
00:13:13,710 --> 00:13:17,390
only occurs when somebody actually goes

363
00:13:15,360 --> 00:13:19,680
in the token decodes it modifies it

364
00:13:17,390 --> 00:13:23,260
reinforces and submits it again and when

365
00:13:19,680 --> 00:13:26,120
that happens then bad things have

366
00:13:23,260 --> 00:13:28,660
all right let's go a little bit deeper

367
00:13:26,120 --> 00:13:33,320
into the JSON web token rabbit-hole

368
00:13:28,660 --> 00:13:36,260
actually am many people use shots which

369
00:13:33,320 --> 00:13:37,490
are adjacent JA tokens but not too many

370
00:13:36,260 --> 00:13:39,470
people know that there are two ways to

371
00:13:37,490 --> 00:13:41,060
generate a signature there's one way

372
00:13:39,470 --> 00:13:43,160
with a shared secret and one way with a

373
00:13:41,060 --> 00:13:45,560
public and private let me show you what

374
00:13:43,160 --> 00:13:47,060
this means in practice um then we're

375
00:13:45,560 --> 00:13:49,609
gonna talk about what this means for

376
00:13:47,060 --> 00:13:50,869
security so the first is the most common

377
00:13:49,610 --> 00:13:53,000
set up essentially that's the one I

378
00:13:50,870 --> 00:13:55,190
showed you in the screenshot from Java

379
00:13:53,000 --> 00:13:57,709
iOS well then surely have payload data

380
00:13:55,190 --> 00:13:58,940
you pass it through and your library and

381
00:13:57,709 --> 00:14:01,010
it's gonna sign this with a shared

382
00:13:58,940 --> 00:14:03,140
secret an outcomes this Joe token which

383
00:14:01,010 --> 00:14:06,170
is signed and nobody can mess with that

384
00:14:03,140 --> 00:14:08,180
um unless without detection whenever

385
00:14:06,170 --> 00:14:10,160
that drop token comes back the server

386
00:14:08,180 --> 00:14:11,779
passes it to the library again library

387
00:14:10,160 --> 00:14:14,149
is gonna use the same shared secret here

388
00:14:11,779 --> 00:14:15,560
you get the data out of it again and tit

389
00:14:14,149 --> 00:14:17,480
moment this moment you can use the data

390
00:14:15,560 --> 00:14:19,849
you know that it has not been tampered

391
00:14:17,480 --> 00:14:22,579
with this works perfectly well within a

392
00:14:19,850 --> 00:14:24,620
single application however if you want

393
00:14:22,579 --> 00:14:26,989
the use is in a more complex scenario

394
00:14:24,620 --> 00:14:29,959
for example Open ID Connect uses chotto

395
00:14:26,990 --> 00:14:31,760
if you use Open ID connect for example

396
00:14:29,959 --> 00:14:33,739
log in with Google is underlying

397
00:14:31,760 --> 00:14:35,510
underlying that mechanism is open ID

398
00:14:33,740 --> 00:14:37,279
Connect what's gonna happen is Google

399
00:14:35,510 --> 00:14:38,839
it's gonna give you a job to open with

400
00:14:37,279 --> 00:14:40,459
your identity information and the

401
00:14:38,839 --> 00:14:42,339
application is gonna use that to couple

402
00:14:40,459 --> 00:14:44,359
that to an account and to lock you in

403
00:14:42,339 --> 00:14:46,699
Google is not going to give you their

404
00:14:44,360 --> 00:14:48,560
secret or your the application the

405
00:14:46,699 --> 00:14:50,269
secret that they use to sign it but the

406
00:14:48,560 --> 00:14:52,339
application cannot verify the token with

407
00:14:50,269 --> 00:14:54,290
this mechanism and if it can then it can

408
00:14:52,339 --> 00:14:56,269
also generate valid tokens a name of so

409
00:14:54,290 --> 00:14:57,769
that's definitely not a recommended

410
00:14:56,269 --> 00:14:59,149
scenario even though some people

411
00:14:57,769 --> 00:15:00,860
actually use it like that some people

412
00:14:59,149 --> 00:15:03,079
actually share this secret with third

413
00:15:00,860 --> 00:15:04,699
parties which is not good you need that

414
00:15:03,079 --> 00:15:06,739
you need to use the second mechanism

415
00:15:04,699 --> 00:15:08,689
which is exactly how it's used in Opera

416
00:15:06,740 --> 00:15:10,279
and I connect by the way though it looks

417
00:15:08,690 --> 00:15:11,779
the same but instead of signing with a

418
00:15:10,279 --> 00:15:13,399
shared secret you sign with a private

419
00:15:11,779 --> 00:15:16,100
key and out comes this token and

420
00:15:13,399 --> 00:15:17,779
everyone who wants to use this token can

421
00:15:16,100 --> 00:15:20,180
verify the signature with a public key

422
00:15:17,779 --> 00:15:22,399
and you get a payload data so

423
00:15:20,180 --> 00:15:24,739
essentially what this means here is that

424
00:15:22,399 --> 00:15:28,250
you can verify that this I'll use this

425
00:15:24,740 --> 00:15:29,870
screen as well just to be fair so you

426
00:15:28,250 --> 00:15:31,520
can verify that Google actually signed

427
00:15:29,870 --> 00:15:33,800
this job token and you can trust the

428
00:15:31,520 --> 00:15:35,390
information that's in there for use in

429
00:15:33,800 --> 00:15:36,530
your own application

430
00:15:35,390 --> 00:15:38,960
is something that's really really really

431
00:15:36,530 --> 00:15:40,880
important to realize and that people

432
00:15:38,960 --> 00:15:42,920
often get wrong or even get the wrong

433
00:15:40,880 --> 00:15:47,870
security advice about sharing this key

434
00:15:42,920 --> 00:15:50,390
with other applications so like I said I

435
00:15:47,870 --> 00:15:53,210
cover the same shame in the in the

436
00:15:50,390 --> 00:15:56,270
slides here so we cover this already to

437
00:15:53,210 --> 00:15:57,620
never share this key with your other

438
00:15:56,270 --> 00:15:59,930
applications we'll also don't share it

439
00:15:57,620 --> 00:16:01,550
with your client-side content if your

440
00:15:59,930 --> 00:16:03,560
angular application or whatever needs

441
00:16:01,550 --> 00:16:04,939
you rely on the data and the job talk

442
00:16:03,560 --> 00:16:08,060
and you want to verify the integrity

443
00:16:04,940 --> 00:16:10,310
then you can use again the public key

444
00:16:08,060 --> 00:16:13,369
private key as set up and verify it with

445
00:16:10,310 --> 00:16:14,900
the public key on the client as well the

446
00:16:13,370 --> 00:16:18,200
issuer is the only one that should use

447
00:16:14,900 --> 00:16:21,230
the the shared secret for generating and

448
00:16:18,200 --> 00:16:22,910
this does not mean that the the setup

449
00:16:21,230 --> 00:16:24,530
with the shared key is a bad one it

450
00:16:22,910 --> 00:16:26,449
works perfectly well in an isolated

451
00:16:24,530 --> 00:16:27,980
service in a single application that's a

452
00:16:26,450 --> 00:16:30,230
recommended way of using these things

453
00:16:27,980 --> 00:16:34,340
but not in a more complicated setup we

454
00:16:30,230 --> 00:16:43,070
have distributed em well distributed use

455
00:16:34,340 --> 00:16:46,190
of that token all right moving along

456
00:16:43,070 --> 00:16:47,720
quite nicely here the next topic remains

457
00:16:46,190 --> 00:16:49,340
in the same area so essentially what we

458
00:16:47,720 --> 00:16:51,500
have now is we have our API we have our

459
00:16:49,340 --> 00:16:53,000
browser and we're gonna send some kind

460
00:16:51,500 --> 00:16:55,040
of identity information some kind of

461
00:16:53,000 --> 00:16:57,800
session object maybe I'm some kind of

462
00:16:55,040 --> 00:16:59,990
claim about who we are what is really

463
00:16:57,800 --> 00:17:01,459
important is that of course design

464
00:16:59,990 --> 00:17:02,900
information is actually checked

465
00:17:01,460 --> 00:17:04,459
somewhere that's the first thing but

466
00:17:02,900 --> 00:17:06,829
also that you check it throughout your

467
00:17:04,459 --> 00:17:08,540
entire system so what you often see is

468
00:17:06,829 --> 00:17:10,339
that that there's not one API but

469
00:17:08,540 --> 00:17:11,119
there's a lot of different services but

470
00:17:10,339 --> 00:17:13,669
each have their own responsibility

471
00:17:11,119 --> 00:17:15,290
either whether they're your own or

472
00:17:13,670 --> 00:17:16,850
someone else's doesn't really matter

473
00:17:15,290 --> 00:17:18,709
essentially there's a lot of interaction

474
00:17:16,849 --> 00:17:20,419
there and one of their really important

475
00:17:18,709 --> 00:17:21,829
things to do is that you spread that

476
00:17:20,420 --> 00:17:23,870
identity information throughout that

477
00:17:21,829 --> 00:17:26,260
system but every service has the right

478
00:17:23,869 --> 00:17:29,120
information to make certain calls and

479
00:17:26,260 --> 00:17:30,500
this is something that again it's not

480
00:17:29,120 --> 00:17:32,750
often done even if you don't have

481
00:17:30,500 --> 00:17:35,660
different services but you have one big

482
00:17:32,750 --> 00:17:37,280
monolithic back-end the authorization

483
00:17:35,660 --> 00:17:38,630
information is often only checked at the

484
00:17:37,280 --> 00:17:40,340
entry point but not throughout the

485
00:17:38,630 --> 00:17:41,570
application and this is it do this

486
00:17:40,340 --> 00:17:43,639
correctly then you actually get

487
00:17:41,570 --> 00:17:45,740
everything you need to make proper

488
00:17:43,640 --> 00:17:48,410
authorization decisions these each of

489
00:17:45,740 --> 00:17:49,090
these api's now has identity information

490
00:17:48,410 --> 00:17:50,440
about

491
00:17:49,090 --> 00:17:51,760
it can decide whether something is

492
00:17:50,440 --> 00:17:54,340
allowed or not and what you store in

493
00:17:51,760 --> 00:17:55,930
there that kind of depends on the

494
00:17:54,340 --> 00:17:56,949
application that you're building if you

495
00:17:55,930 --> 00:17:58,720
do this right you have proper access

496
00:17:56,950 --> 00:17:59,860
control you have proper audit logs and

497
00:17:58,720 --> 00:18:01,360
every service can make their own

498
00:17:59,860 --> 00:18:03,729
decisions about what is allowed and what

499
00:18:01,360 --> 00:18:06,070
is not and I mentioned this before open

500
00:18:03,730 --> 00:18:07,390
ID Connect actually supports a lot of

501
00:18:06,070 --> 00:18:10,000
these deployments and this is one

502
00:18:07,390 --> 00:18:11,950
example of Joe token from open ID

503
00:18:10,000 --> 00:18:13,090
connect and as you can see it contains

504
00:18:11,950 --> 00:18:16,090
information about the user

505
00:18:13,090 --> 00:18:18,879
it contains who issued it the subject

506
00:18:16,090 --> 00:18:21,159
about who their token is it contains

507
00:18:18,880 --> 00:18:23,800
expiration dates and stuff like that and

508
00:18:21,160 --> 00:18:25,960
also identity information the roles that

509
00:18:23,800 --> 00:18:28,780
are assigned to the user and this ACR

510
00:18:25,960 --> 00:18:30,100
attribute is actually the strength of

511
00:18:28,780 --> 00:18:32,680
the authentication used when the user

512
00:18:30,100 --> 00:18:34,510
logged in you can use that to decide but

513
00:18:32,680 --> 00:18:35,680
are really sensitive operations should

514
00:18:34,510 --> 00:18:37,510
only be accessed if two-factor

515
00:18:35,680 --> 00:18:39,970
authentication has been used and that is

516
00:18:37,510 --> 00:18:41,860
defined in this attribute so this gives

517
00:18:39,970 --> 00:18:43,720
you a lot of proper possibilities to

518
00:18:41,860 --> 00:18:45,820
propagate an information and use it

519
00:18:43,720 --> 00:18:56,140
properly to make security decisions in

520
00:18:45,820 --> 00:18:57,909
your apx all right let's let's talk

521
00:18:56,140 --> 00:18:59,950
about I have a question for you again

522
00:18:57,910 --> 00:19:02,890
let's just keep make sure that you stay

523
00:18:59,950 --> 00:19:04,870
awake during these last two talks I know

524
00:19:02,890 --> 00:19:07,930
it's been a heavy day maybe even two

525
00:19:04,870 --> 00:19:09,699
days if you were here there's two ways

526
00:19:07,930 --> 00:19:12,370
of transporting this session information

527
00:19:09,700 --> 00:19:18,000
one is using cookies who here is using

528
00:19:12,370 --> 00:19:23,770
cookies to access the api's again nobody

529
00:19:18,000 --> 00:19:25,210
really who's using API ice maybe I

530
00:19:23,770 --> 00:19:26,740
forgot about that one okay not too many

531
00:19:25,210 --> 00:19:28,480
people actually so it might have

532
00:19:26,740 --> 00:19:30,310
explained a few things who here is using

533
00:19:28,480 --> 00:19:32,020
the authorization header to transport

534
00:19:30,310 --> 00:19:35,230
information secure authorization

535
00:19:32,020 --> 00:19:37,300
information many people are using

536
00:19:35,230 --> 00:19:39,160
absolutely no cookies at all not only

537
00:19:37,300 --> 00:19:43,810
for you not even for your login servers

538
00:19:39,160 --> 00:19:46,540
or something yeah yeah that's often

539
00:19:43,810 --> 00:19:48,450
actually a combined setup so this one

540
00:19:46,540 --> 00:19:50,470
works really well in a lot of situations

541
00:19:48,450 --> 00:19:52,720
applications like angular applications

542
00:19:50,470 --> 00:19:54,910
can easily attach that to our government

543
00:19:52,720 --> 00:19:57,340
request so that's often used but then in

544
00:19:54,910 --> 00:19:59,890
practice and cookies work quite well

545
00:19:57,340 --> 00:20:01,330
with browsers and with let things the

546
00:19:59,890 --> 00:20:03,670
cookies are often used to

547
00:20:01,330 --> 00:20:05,379
or more long-term information to access

548
00:20:03,670 --> 00:20:08,290
single sign-on services things like that

549
00:20:05,380 --> 00:20:09,430
so they actually are used in combination

550
00:20:08,290 --> 00:20:11,950
and they have both have very different

551
00:20:09,430 --> 00:20:13,570
security properties and I want to go

552
00:20:11,950 --> 00:20:15,700
over each of them to make sure that you

553
00:20:13,570 --> 00:20:17,320
fully understand what are about and how

554
00:20:15,700 --> 00:20:20,410
they impact the security of their

555
00:20:17,320 --> 00:20:22,360
application to be honest cookies are a

556
00:20:20,410 --> 00:20:24,130
mess if you talk about cookies and

557
00:20:22,360 --> 00:20:26,080
cookie security which I do regularly in

558
00:20:24,130 --> 00:20:28,030
my trainings you talk about cookie Flags

559
00:20:26,080 --> 00:20:30,760
h-2b only secure you talk about cookie

560
00:20:28,030 --> 00:20:32,350
prefixes which is early new and changes

561
00:20:30,760 --> 00:20:35,680
the name of the cookie to enforce more

562
00:20:32,350 --> 00:20:38,409
security properties it's a mess the fact

563
00:20:35,680 --> 00:20:39,820
is they actually work more or less quite

564
00:20:38,410 --> 00:20:42,130
well with web solutions they are

565
00:20:39,820 --> 00:20:43,720
attached to outgoing requests from the

566
00:20:42,130 --> 00:20:45,730
browser so even if you load an image

567
00:20:43,720 --> 00:20:49,930
with an image tag the request that goes

568
00:20:45,730 --> 00:20:51,550
out will carry cookies and if you open

569
00:20:49,930 --> 00:20:52,870
things like a WebSocket the requests

570
00:20:51,550 --> 00:20:55,590
that goes out will carry cookies so

571
00:20:52,870 --> 00:20:59,050
cookies are fairly compatible with Allah

572
00:20:55,590 --> 00:21:00,850
cookies um require a lot of effort to

573
00:20:59,050 --> 00:21:02,860
secure like I said the security flags

574
00:21:00,850 --> 00:21:04,149
prefixes and and they also suffer from

575
00:21:02,860 --> 00:21:06,250
something called cross-site request

576
00:21:04,150 --> 00:21:09,010
order which I will talk a bit about a

577
00:21:06,250 --> 00:21:10,570
bit about in the next book essentially

578
00:21:09,010 --> 00:21:11,950
if you have a non web application and

579
00:21:10,570 --> 00:21:13,629
you want to secure cookies the right way

580
00:21:11,950 --> 00:21:15,370
you want to take these security

581
00:21:13,630 --> 00:21:19,090
properties into account it's a nightmare

582
00:21:15,370 --> 00:21:20,530
to implement support for as a result of

583
00:21:19,090 --> 00:21:22,449
that many people here are not using

584
00:21:20,530 --> 00:21:24,910
cookies to access their API because it's

585
00:21:22,450 --> 00:21:26,440
messy and the authorization header looks

586
00:21:24,910 --> 00:21:27,910
a lot cleaner essentially the

587
00:21:26,440 --> 00:21:31,120
authorization header is a custom header

588
00:21:27,910 --> 00:21:32,380
and will you add whatever you want as

589
00:21:31,120 --> 00:21:34,090
the value of the header and you send

590
00:21:32,380 --> 00:21:36,550
that to the server can attach that

591
00:21:34,090 --> 00:21:40,780
easily from JavaScript um and it looks

592
00:21:36,550 --> 00:21:43,780
very clean very nice yet it's not

593
00:21:40,780 --> 00:21:45,490
present when the Dom triggers a request

594
00:21:43,780 --> 00:21:46,780
if you have an image tag that loads an

595
00:21:45,490 --> 00:21:47,200
image if you have a script I you load

596
00:21:46,780 --> 00:21:49,360
the script

597
00:21:47,200 --> 00:21:50,590
there will be no authorization header at

598
00:21:49,360 --> 00:21:52,060
least your application will not be able

599
00:21:50,590 --> 00:21:53,980
to add an authorization header to those

600
00:21:52,060 --> 00:21:56,290
requests so if you want to enforce

601
00:21:53,980 --> 00:21:57,940
access control on script files on images

602
00:21:56,290 --> 00:21:59,230
things like that you will need to use

603
00:21:57,940 --> 00:22:01,420
cookies anyway because there's

604
00:21:59,230 --> 00:22:03,160
essentially not really another way to

605
00:22:01,420 --> 00:22:05,500
make sure that works at least with the

606
00:22:03,160 --> 00:22:07,510
authorization header and if you have

607
00:22:05,500 --> 00:22:09,190
things like WebSockets and course and it

608
00:22:07,510 --> 00:22:10,930
becomes a bit more complex because this

609
00:22:09,190 --> 00:22:12,310
is a custom header and these requests

610
00:22:10,930 --> 00:22:14,470
are not under your control so there's

611
00:22:12,310 --> 00:22:15,309
not really anything you can do to add

612
00:22:14,470 --> 00:22:18,039
these headers there

613
00:22:15,309 --> 00:22:19,779
and securing these mechanisms seems

614
00:22:18,039 --> 00:22:21,070
simple like yeah it's a token and you

615
00:22:19,779 --> 00:22:22,720
store it and you attach it to the header

616
00:22:21,070 --> 00:22:24,549
it's actually more difficult than you

617
00:22:22,720 --> 00:22:25,990
might think because there's new security

618
00:22:24,549 --> 00:22:29,320
things new things that many people

619
00:22:25,990 --> 00:22:31,659
overlook and cause problems so one

620
00:22:29,320 --> 00:22:33,340
example is the fact that you need to

621
00:22:31,659 --> 00:22:35,080
store it somewhere in the application

622
00:22:33,340 --> 00:22:36,639
with cookies you have to cookie store

623
00:22:35,080 --> 00:22:38,918
you can mark a message below me and

624
00:22:36,639 --> 00:22:40,570
they're fairly inaccessible with and the

625
00:22:38,919 --> 00:22:42,909
header it's often stored in local store

626
00:22:40,570 --> 00:22:45,519
and as a result every page within that

627
00:22:42,909 --> 00:22:48,249
origin can read that token and abuse it

628
00:22:45,519 --> 00:22:50,409
if it wants so requires you to have very

629
00:22:48,249 --> 00:22:53,619
strict blind isolation the second

630
00:22:50,409 --> 00:22:55,330
problem is if you attach it to outgoing

631
00:22:53,619 --> 00:22:58,178
requests chances are that you are

632
00:22:55,330 --> 00:23:00,699
attaching it to too many requests and

633
00:22:58,179 --> 00:23:03,490
have a good example in the next slide

634
00:23:00,700 --> 00:23:05,320
for it so one example is for example

635
00:23:03,490 --> 00:23:07,539
that this is for an example from angular

636
00:23:05,320 --> 00:23:09,490
in angular you can define an interceptor

637
00:23:07,539 --> 00:23:10,990
that attaches tokens to outgoing

638
00:23:09,490 --> 00:23:13,690
requests so it sends essentially the

639
00:23:10,990 --> 00:23:16,090
code here is very simple it intercepts a

640
00:23:13,690 --> 00:23:18,029
request it looks at the token a local

641
00:23:16,090 --> 00:23:22,600
storage and it adds it to the outgoing

642
00:23:18,029 --> 00:23:24,490
request books looks good right very

643
00:23:22,600 --> 00:23:26,529
simple very clean there's one big

644
00:23:24,490 --> 00:23:28,679
problem with this this works perfectly

645
00:23:26,529 --> 00:23:31,299
fine as long as you access your own API

646
00:23:28,679 --> 00:23:33,879
the moment you send a request to a third

647
00:23:31,299 --> 00:23:35,740
party API this thing is gonna intercept

648
00:23:33,879 --> 00:23:36,998
it it's gonna be like oh I have a token

649
00:23:35,740 --> 00:23:39,879
I'm gonna attach it to the outgoing

650
00:23:36,999 --> 00:23:41,230
header and you're sending your session

651
00:23:39,879 --> 00:23:43,809
token your access token your whatever

652
00:23:41,230 --> 00:23:45,669
just to a third-party back-end which can

653
00:23:43,809 --> 00:23:47,230
do whatever it wants with this this code

654
00:23:45,669 --> 00:23:49,029
is actually really really really common

655
00:23:47,230 --> 00:23:51,850
because everybody who looks for this

656
00:23:49,029 --> 00:23:54,490
finds these examples and honestly they

657
00:23:51,850 --> 00:23:56,320
get it wrong if you use a proper library

658
00:23:54,490 --> 00:23:58,240
for this for example the the top library

659
00:23:56,320 --> 00:24:00,939
for angular they have a wide list of

660
00:23:58,240 --> 00:24:03,460
domains the explicit explicitly need to

661
00:24:00,940 --> 00:24:05,320
list which domains should F or should

662
00:24:03,460 --> 00:24:07,869
receive your access token but the

663
00:24:05,320 --> 00:24:11,649
default solutions presented like this do

664
00:24:07,869 --> 00:24:13,059
not do this as a result even though yell

665
00:24:11,649 --> 00:24:14,498
as a result you have changed the

666
00:24:13,059 --> 00:24:16,149
transport mechanism from cookies to the

667
00:24:14,499 --> 00:24:17,950
authorization header because it seemed a

668
00:24:16,149 --> 00:24:19,689
lot cleaner but in practice you have to

669
00:24:17,950 --> 00:24:21,970
deal with a lot of stuff yourself again

670
00:24:19,690 --> 00:24:23,500
so Java tokens or authorization header

671
00:24:21,970 --> 00:24:25,149
don't make it easier they make it

672
00:24:23,500 --> 00:24:27,070
difference but not necessarily easier

673
00:24:25,149 --> 00:24:28,268
maybe a bit more standardized but

674
00:24:27,070 --> 00:24:30,750
they're still security problems that

675
00:24:28,269 --> 00:24:30,750
occurred here

676
00:24:34,970 --> 00:24:40,950
so I promise to talk a bit about

677
00:24:37,350 --> 00:24:42,120
cross-site request forgery first again

678
00:24:40,950 --> 00:24:46,110
who knows what cross-site request

679
00:24:42,120 --> 00:24:46,500
forgery is all right who doesn't know

680
00:24:46,110 --> 00:24:49,679
what it is

681
00:24:46,500 --> 00:24:51,030
it's okay all right I'm gonna walk you

682
00:24:49,680 --> 00:24:52,920
through a scenario I'm not gonna go into

683
00:24:51,030 --> 00:24:55,110
too much detail here I'm gonna explain

684
00:24:52,920 --> 00:24:57,000
to you what the attack is about then how

685
00:24:55,110 --> 00:24:58,260
it relates to an API I'm gonna stand

686
00:24:57,000 --> 00:25:00,960
here because it's it's an image and I

687
00:24:58,260 --> 00:25:02,520
need to point out what what's happening

688
00:25:00,960 --> 00:25:05,940
there essentially the setter is you have

689
00:25:02,520 --> 00:25:08,040
a browser of the victim let's say your

690
00:25:05,940 --> 00:25:09,990
browser for example and you have a

691
00:25:08,040 --> 00:25:12,120
legitimate website you log in to the

692
00:25:09,990 --> 00:25:13,020
website you get a page and you get a

693
00:25:12,120 --> 00:25:15,540
cookie in return

694
00:25:13,020 --> 00:25:17,460
that's how cookie based sessions work

695
00:25:15,540 --> 00:25:19,290
imagine that that's your login service

696
00:25:17,460 --> 00:25:20,790
or whatever whenever you send a request

697
00:25:19,290 --> 00:25:23,070
to that domain again the cookie is gonna

698
00:25:20,790 --> 00:25:26,159
be there by the browser now see Cerf

699
00:25:23,070 --> 00:25:27,929
happens when another website tries to do

700
00:25:26,160 --> 00:25:29,010
the same thing so you get another

701
00:25:27,930 --> 00:25:31,020
website in your browser this is

702
00:25:29,010 --> 00:25:32,879
something you do every every time you

703
00:25:31,020 --> 00:25:35,250
use the browser in use different context

704
00:25:32,880 --> 00:25:37,230
this one is gonna send a request to that

705
00:25:35,250 --> 00:25:39,060
back-end which is again legitimate

706
00:25:37,230 --> 00:25:40,500
browser behavior but the browser is

707
00:25:39,060 --> 00:25:41,909
gonna attach that cookie because the

708
00:25:40,500 --> 00:25:43,710
browser is very helpful with cookies

709
00:25:41,910 --> 00:25:45,960
whenever a request goes to that domain

710
00:25:43,710 --> 00:25:47,850
it's gonna attach a cookie here of

711
00:25:45,960 --> 00:25:49,080
course if this server doesn't know that

712
00:25:47,850 --> 00:25:51,030
this request comes from somewhere else

713
00:25:49,080 --> 00:25:52,740
then he's gonna execute this in your

714
00:25:51,030 --> 00:25:53,280
name without even thinking about it

715
00:25:52,740 --> 00:25:55,140
twice

716
00:25:53,280 --> 00:25:56,850
that's cross-site request forgery it's

717
00:25:55,140 --> 00:25:58,500
cross-site because this context sends a

718
00:25:56,850 --> 00:26:01,169
request there and that's a fortune

719
00:25:58,500 --> 00:26:05,070
request trying to perform operations in

720
00:26:01,170 --> 00:26:06,660
your name if I explain it like this it

721
00:26:05,070 --> 00:26:08,730
seems like a silly problem like come on

722
00:26:06,660 --> 00:26:10,530
who doesn't check these things um how

723
00:26:08,730 --> 00:26:11,940
difficult can it well actually it's more

724
00:26:10,530 --> 00:26:14,010
difficult than you might think and

725
00:26:11,940 --> 00:26:15,570
there's more products vulnerable to this

726
00:26:14,010 --> 00:26:18,420
than you might think either everybody

727
00:26:15,570 --> 00:26:20,340
has a home router home routers have web

728
00:26:18,420 --> 00:26:22,230
interfaces but except the one from Apple

729
00:26:20,340 --> 00:26:24,629
but all the other ones have web

730
00:26:22,230 --> 00:26:27,060
interfaces and of course a web interface

731
00:26:24,630 --> 00:26:29,340
accepts requests so an attacker can send

732
00:26:27,060 --> 00:26:31,379
a forge request with its be

733
00:26:29,340 --> 00:26:33,840
authentication of min up min here very

734
00:26:31,380 --> 00:26:35,310
important to your router to change for

735
00:26:33,840 --> 00:26:38,639
example DNS settings and that's exactly

736
00:26:35,310 --> 00:26:40,440
what malware does there is our malicious

737
00:26:38,640 --> 00:26:42,390
websites try to change your DNS settings

738
00:26:40,440 --> 00:26:42,840
and if it works they control your router

739
00:26:42,390 --> 00:26:44,850
they

740
00:26:42,840 --> 00:26:46,620
Center traffic anywhere day 1 which is

741
00:26:44,850 --> 00:26:48,389
of course the setup for more complicated

742
00:26:46,620 --> 00:26:50,100
attacks and this happened in South

743
00:26:48,390 --> 00:26:51,990
America against banks for example so

744
00:26:50,100 --> 00:26:54,389
they launched an attack wide scale

745
00:26:51,990 --> 00:26:56,550
attack against popular online banking

746
00:26:54,390 --> 00:26:59,910
systems by redirecting DNS traffic from

747
00:26:56,550 --> 00:27:01,470
rabbits with Caesar so cross-site

748
00:26:59,910 --> 00:27:02,760
request forgery I'm going to the API

749
00:27:01,470 --> 00:27:04,380
part it exists because the browser

750
00:27:02,760 --> 00:27:05,640
simply attaches the cookies the odd

751
00:27:04,380 --> 00:27:07,350
government requests without thinking

752
00:27:05,640 --> 00:27:10,680
about it and in fact is that many

753
00:27:07,350 --> 00:27:12,389
backends don't check whether they where

754
00:27:10,680 --> 00:27:14,580
the request is coming from hence they

755
00:27:12,390 --> 00:27:17,280
don't a are not able to protect against

756
00:27:14,580 --> 00:27:20,699
cross-site request forgery in an API

757
00:27:17,280 --> 00:27:22,290
context it depends whether this is a

758
00:27:20,700 --> 00:27:24,990
problem or not if you're not using

759
00:27:22,290 --> 00:27:26,909
cookies at all you're good see Cerf is

760
00:27:24,990 --> 00:27:29,340
not an issue the authorization header by

761
00:27:26,910 --> 00:27:32,090
definition cannot cause see Cerf attacks

762
00:27:29,340 --> 00:27:34,740
but many people still use cookies or

763
00:27:32,090 --> 00:27:36,300
authentication and services or endpoints

764
00:27:34,740 --> 00:27:39,150
if you have a single sign-on service a

765
00:27:36,300 --> 00:27:40,800
cookie maintains the session there and

766
00:27:39,150 --> 00:27:43,610
you get for example access token on

767
00:27:40,800 --> 00:27:46,889
there so this thing starts mattering if

768
00:27:43,610 --> 00:27:49,530
you have any of these things that accept

769
00:27:46,890 --> 00:27:52,290
requests from dom elements so

770
00:27:49,530 --> 00:27:54,379
essentially to defend against c surf the

771
00:27:52,290 --> 00:27:56,700
traditional way is using form tokens

772
00:27:54,380 --> 00:27:58,620
surprisingly in API form talkers don't

773
00:27:56,700 --> 00:28:03,600
work so well so you'll have to use

774
00:27:58,620 --> 00:28:05,250
something else there there's two common

775
00:28:03,600 --> 00:28:07,139
techniques or two things that matter in

776
00:28:05,250 --> 00:28:09,180
an API for C surf the first one if you

777
00:28:07,140 --> 00:28:12,270
have actually a legitimate API you can

778
00:28:09,180 --> 00:28:14,100
use something known as a transparent

779
00:28:12,270 --> 00:28:16,350
token and let me show you how it works

780
00:28:14,100 --> 00:28:18,689
so this is the just setup scenario again

781
00:28:16,350 --> 00:28:20,040
for C surf and instead of giving you one

782
00:28:18,690 --> 00:28:22,260
cookie the service is going to give you

783
00:28:20,040 --> 00:28:24,659
two puppies one regular cookie and one

784
00:28:22,260 --> 00:28:26,550
with a C surf talker and the application

785
00:28:24,660 --> 00:28:28,470
is gonna copy that C surf token into a

786
00:28:26,550 --> 00:28:30,300
header this is a piece of JavaScript

787
00:28:28,470 --> 00:28:32,430
that copies this cookie value which is

788
00:28:30,300 --> 00:28:35,419
not h-2b only by the way into this

789
00:28:32,430 --> 00:28:37,770
header and sends it to the server

790
00:28:35,420 --> 00:28:39,720
that's the legitimate scenario if the

791
00:28:37,770 --> 00:28:41,790
attacker comes along it tries to make

792
00:28:39,720 --> 00:28:43,800
the request to the backend browser we'll

793
00:28:41,790 --> 00:28:45,840
attach the cookies but because of the

794
00:28:43,800 --> 00:28:47,940
the browser security policy this context

795
00:28:45,840 --> 00:28:49,740
cannot read that cookie so it cannot

796
00:28:47,940 --> 00:28:51,210
attach this header to the request so the

797
00:28:49,740 --> 00:28:52,830
server will know that this is not a

798
00:28:51,210 --> 00:28:55,890
legitimate request

799
00:28:52,830 --> 00:28:58,860
that's phase one essentially this is how

800
00:28:55,890 --> 00:29:00,840
you protect for example a back ends in

801
00:28:58,860 --> 00:29:02,939
an angular application scenario because

802
00:29:00,840 --> 00:29:05,280
angular does this by default by default

803
00:29:02,940 --> 00:29:07,200
that looks for this cookie as the tuchas

804
00:29:05,280 --> 00:29:09,450
is automatically attaches it to Edgar in

805
00:29:07,200 --> 00:29:11,670
requests in that header but if you do

806
00:29:09,450 --> 00:29:13,530
that the server can detect whether these

807
00:29:11,670 --> 00:29:15,300
are present compare that cookie to that

808
00:29:13,530 --> 00:29:16,770
header if they are it's a legitimate

809
00:29:15,300 --> 00:29:18,230
request otherwise it's coming from God

810
00:29:16,770 --> 00:29:20,879
know where God knows where

811
00:29:18,230 --> 00:29:25,370
that's a traditional see surf case that

812
00:29:20,880 --> 00:29:25,370
actually still matters for some API it's

813
00:29:26,060 --> 00:29:31,590
because the browser does not allow you

814
00:29:28,020 --> 00:29:37,139
to read cookies from other domains does

815
00:29:31,590 --> 00:29:37,889
that answer your question all right yes

816
00:29:37,140 --> 00:29:40,500
absolutely

817
00:29:37,890 --> 00:29:42,120
well there are also beckoned libraries

818
00:29:40,500 --> 00:29:43,410
that that do that automatically but yes

819
00:29:42,120 --> 00:29:48,000
you will need to check this on the

820
00:29:43,410 --> 00:29:51,560
backend absolutely now it becomes really

821
00:29:48,000 --> 00:29:53,640
tricky if you bring course into the mix

822
00:29:51,560 --> 00:29:56,550
course stands for cross-origin resource

823
00:29:53,640 --> 00:29:58,140
sharing and essentially course is the

824
00:29:56,550 --> 00:30:02,010
mechanism that enables your browser to

825
00:29:58,140 --> 00:30:04,170
make xhr calls across origins Oh a long

826
00:30:02,010 --> 00:30:07,020
time ago back when you had Firefox 3 I

827
00:30:04,170 --> 00:30:09,060
think and you could only make extra xhr

828
00:30:07,020 --> 00:30:11,010
calls to your own domain your own origin

829
00:30:09,060 --> 00:30:13,590
anything that goes somewhere else is

830
00:30:11,010 --> 00:30:14,970
denied by default well that changed when

831
00:30:13,590 --> 00:30:16,980
they introduced course cross-origin

832
00:30:14,970 --> 00:30:19,110
resource sharing and they actually added

833
00:30:16,980 --> 00:30:21,180
a lot of security on top of xhr to make

834
00:30:19,110 --> 00:30:23,939
sure that the server expects a request

835
00:30:21,180 --> 00:30:26,670
and handles it gracefully without

836
00:30:23,940 --> 00:30:30,330
exposing legacy servers to attack to an

837
00:30:26,670 --> 00:30:32,490
api a lot of requests while maced baton

838
00:30:30,330 --> 00:30:34,260
all requests are xhr requests so if you

839
00:30:32,490 --> 00:30:36,000
go cross-origin and the browser will

840
00:30:34,260 --> 00:30:37,560
automatically attach an origin header to

841
00:30:36,000 --> 00:30:39,840
the request to the server knows where

842
00:30:37,560 --> 00:30:42,510
you're coming from the problem is if it

843
00:30:39,840 --> 00:30:44,820
happens within or if the api accepts

844
00:30:42,510 --> 00:30:46,980
requests if can come from a forum for

845
00:30:44,820 --> 00:30:48,450
example then this will not work and the

846
00:30:46,980 --> 00:30:52,080
origin header will not always be there

847
00:30:48,450 --> 00:30:53,970
so the case is tuefel if your API

848
00:30:52,080 --> 00:30:55,710
supports traditional requests meaning

849
00:30:53,970 --> 00:30:57,540
anything that can come from a forum are

850
00:30:55,710 --> 00:31:00,150
an image tag using traditional content

851
00:30:57,540 --> 00:31:02,120
types and no special headers then you

852
00:31:00,150 --> 00:31:04,000
need C surf protection

853
00:31:02,120 --> 00:31:06,590
if your API only supports

854
00:31:04,000 --> 00:31:08,539
non-traditional requests for example if

855
00:31:06,590 --> 00:31:10,189
you have a JSON API you only accept

856
00:31:08,539 --> 00:31:13,129
application flash Jason as a content

857
00:31:10,190 --> 00:31:14,779
type and not something else then the

858
00:31:13,130 --> 00:31:16,580
browser will automatically attach this

859
00:31:14,779 --> 00:31:17,990
origin header to the request and that

860
00:31:16,580 --> 00:31:20,090
means that you can automatically check

861
00:31:17,990 --> 00:31:21,830
the origin header after its presence and

862
00:31:20,090 --> 00:31:23,029
that if you don't submit the proper

863
00:31:21,830 --> 00:31:25,149
headers then you will not expose

864
00:31:23,029 --> 00:31:27,559
information third party context cedar

865
00:31:25,150 --> 00:31:29,900
and there's two common ways you can

866
00:31:27,559 --> 00:31:33,860
force this behavior to happen I give I

867
00:31:29,900 --> 00:31:36,250
gave away one and well actually two so

868
00:31:33,860 --> 00:31:38,928
one you can simply add a custom header

869
00:31:36,250 --> 00:31:40,580
can choose whatever you want um and by

870
00:31:38,929 --> 00:31:42,110
adding that header you can make sure

871
00:31:40,580 --> 00:31:43,460
that nobody else can send a request

872
00:31:42,110 --> 00:31:45,168
without the origin header be present

873
00:31:43,460 --> 00:31:46,730
because a form you submit the form

874
00:31:45,169 --> 00:31:49,340
across origins it will never be able to

875
00:31:46,730 --> 00:31:52,490
send you custom headers this attacker

876
00:31:49,340 --> 00:31:54,168
has to use xhr have an attacker uses xhr

877
00:31:52,490 --> 00:31:55,520
the origin header will be there and the

878
00:31:54,169 --> 00:31:58,100
server will note that something is going

879
00:31:55,520 --> 00:31:59,570
on the second type is for a second ways

880
00:31:58,100 --> 00:32:01,158
for example forcing the content type

881
00:31:59,570 --> 00:32:03,230
they have to make sure that your API

882
00:32:01,159 --> 00:32:05,720
does not accept anything else many API

883
00:32:03,230 --> 00:32:07,490
is also for example xx accept text flash

884
00:32:05,720 --> 00:32:09,020
plain and simply parses as Jason and

885
00:32:07,490 --> 00:32:11,450
then you're still in trouble

886
00:32:09,020 --> 00:32:15,429
so and definitely keep track of what

887
00:32:11,450 --> 00:32:18,289
you're doing there brings me to the

888
00:32:15,429 --> 00:32:20,330
second to last pitfall don't

889
00:32:18,289 --> 00:32:22,010
underestimate Caesar if you don't use

890
00:32:20,330 --> 00:32:23,539
cookies for API then that part is

891
00:32:22,010 --> 00:32:25,490
covered but you still need to check your

892
00:32:23,539 --> 00:32:27,350
single sign-on service or whatever ready

893
00:32:25,490 --> 00:32:30,700
to use cookies to make sure that they

894
00:32:27,350 --> 00:32:36,799
don't leave tokens and things like that

895
00:32:30,700 --> 00:32:38,929
F one more to cover I'm gonna start with

896
00:32:36,799 --> 00:32:46,158
a question again shoot your API accept

897
00:32:38,929 --> 00:32:54,070
this as input yes who says yes alright

898
00:32:46,159 --> 00:32:57,440
who says no for great who has no idea

899
00:32:54,070 --> 00:33:00,279
it depends sometimes yes sometimes no

900
00:32:57,440 --> 00:33:03,260
and as you can guess the last part is

901
00:33:00,279 --> 00:33:05,299
about input validation checking what you

902
00:33:03,260 --> 00:33:06,649
receive as input and to be honest some

903
00:33:05,299 --> 00:33:09,139
people would have started with this as

904
00:33:06,649 --> 00:33:11,719
the most important thing um I'm not

905
00:33:09,140 --> 00:33:13,460
missing I don't necessarily agree so yes

906
00:33:11,720 --> 00:33:14,960
of course if you expect the numbered and

907
00:33:13,460 --> 00:33:15,830
this input is it should not be

908
00:33:14,960 --> 00:33:17,600
accepted

909
00:33:15,830 --> 00:33:19,309
if you expect a name for the user then

910
00:33:17,600 --> 00:33:21,110
you have no idea where it is is actually

911
00:33:19,309 --> 00:33:22,399
filled or not names are actually one of

912
00:33:21,110 --> 00:33:24,590
the most difficult but one of the very

913
00:33:22,399 --> 00:33:26,539
difficult things to validate input wise

914
00:33:24,590 --> 00:33:29,178
because worldwide population has crazy

915
00:33:26,539 --> 00:33:30,950
names what's the only solution that he

916
00:33:29,179 --> 00:33:32,779
can use against this or what's the

917
00:33:30,950 --> 00:33:34,850
proper solution proper solution is to

918
00:33:32,779 --> 00:33:37,059
address the actual cost which is in this

919
00:33:34,850 --> 00:33:39,289
case sequel injection you have to use

920
00:33:37,059 --> 00:33:41,690
param prize statements as Mattias

921
00:33:39,289 --> 00:33:44,240
mentioned this morning during his stop

922
00:33:41,690 --> 00:33:46,880
so input validation in a nutshell input

923
00:33:44,240 --> 00:33:50,389
validation is very very useful but it's

924
00:33:46,880 --> 00:33:52,340
not a good defense if you use only input

925
00:33:50,389 --> 00:33:54,320
validation it's a very good first line

926
00:33:52,340 --> 00:33:55,879
of defense so input validation can read

927
00:33:54,320 --> 00:33:57,980
out the rear things that should never

928
00:33:55,880 --> 00:34:00,350
ever should have never reached your API

929
00:33:57,980 --> 00:34:02,360
and that's definitely one of the useful

930
00:34:00,350 --> 00:34:04,189
things about input voltage your best

931
00:34:02,360 --> 00:34:05,539
practices here are only accept compton

932
00:34:04,190 --> 00:34:07,279
types that you expect and reject

933
00:34:05,539 --> 00:34:09,050
everything else and if you expect the

934
00:34:07,279 --> 00:34:10,639
number and verify that you get a number

935
00:34:09,050 --> 00:34:11,000
if you expect the date verify you get a

936
00:34:10,639 --> 00:34:12,740
date

937
00:34:11,000 --> 00:34:14,869
things like that and this sounds silly

938
00:34:12,739 --> 00:34:17,029
again but you would be surprised how

939
00:34:14,869 --> 00:34:19,849
many api's accept just whatever you send

940
00:34:17,030 --> 00:34:22,280
it but input validation is not a holy

941
00:34:19,849 --> 00:34:24,050
grail it's it only gets you so far so

942
00:34:22,280 --> 00:34:26,300
don't rely on input validation as a

943
00:34:24,050 --> 00:34:28,760
security measure use it as a first line

944
00:34:26,300 --> 00:34:30,470
of defense to keep the bad guys at least

945
00:34:28,760 --> 00:34:32,330
a bit further out the door but

946
00:34:30,469 --> 00:34:35,230
essentially it's not a very good um

947
00:34:32,330 --> 00:34:37,909
security solution if you only use that

948
00:34:35,230 --> 00:34:39,800
so bypasses will always exist there's

949
00:34:37,909 --> 00:34:41,540
plenty of research papers showing how to

950
00:34:39,800 --> 00:34:43,190
bypass things like cross-site scripting

951
00:34:41,540 --> 00:34:46,940
filters in the browser stuff like that

952
00:34:43,190 --> 00:34:48,980
and sometimes the API doesn't even care

953
00:34:46,940 --> 00:34:51,379
so we haven't talked about that but if

954
00:34:48,980 --> 00:34:52,520
you well because in an API world

955
00:34:51,379 --> 00:34:54,679
cross-site scripting doesn't matter

956
00:34:52,520 --> 00:34:56,239
anymore the API has no idea where the

957
00:34:54,679 --> 00:34:57,349
data is going to be used so it cannot

958
00:34:56,239 --> 00:34:59,779
even protect against cross-site

959
00:34:57,349 --> 00:35:01,130
scripting that becomes the part of the

960
00:34:59,780 --> 00:35:02,690
client-side application that's why

961
00:35:01,130 --> 00:35:05,270
angular application and things like this

962
00:35:02,690 --> 00:35:07,190
but that's why they deploy sanitizers to

963
00:35:05,270 --> 00:35:09,490
make sure that content injected into the

964
00:35:07,190 --> 00:35:12,680
page is actually safe data and not

965
00:35:09,490 --> 00:35:15,169
god-knows-what coming from the api it

966
00:35:12,680 --> 00:35:16,759
actually brings me to the last one and

967
00:35:15,170 --> 00:35:19,730
the last pitfall is over or under

968
00:35:16,760 --> 00:35:21,800
estimating input validation so use it as

969
00:35:19,730 --> 00:35:24,319
a primary line of defense don't think

970
00:35:21,800 --> 00:35:26,660
it's not even useful it is very useful

971
00:35:24,319 --> 00:35:29,000
but it has its limits and you need to be

972
00:35:26,660 --> 00:35:29,660
aware of this instead of giving you a

973
00:35:29,000 --> 00:35:32,119
full reek

974
00:35:29,660 --> 00:35:33,890
of everything I covered which would well

975
00:35:32,119 --> 00:35:35,839
it's already in overview presentation so

976
00:35:33,890 --> 00:35:36,348
a recap of an overview is just plain

977
00:35:35,839 --> 00:35:38,900
boring

978
00:35:36,349 --> 00:35:40,819
I want a conclusion with a small piece

979
00:35:38,900 --> 00:35:42,470
of advice and that's question everything

980
00:35:40,819 --> 00:35:44,390
especially if you're moving towards a

981
00:35:42,470 --> 00:35:45,529
new paradigm like an API question what

982
00:35:44,390 --> 00:35:47,450
you're doing question everything that

983
00:35:45,529 --> 00:35:50,599
you're doing essentially that comes down

984
00:35:47,450 --> 00:35:52,700
to is this different from what we used

985
00:35:50,599 --> 00:35:54,589
what's the impact of moving to session

986
00:35:52,700 --> 00:35:55,910
data to the client does that change any

987
00:35:54,589 --> 00:35:58,339
security assumptions that we make about

988
00:35:55,910 --> 00:36:02,180
that company and that's gonna get you

989
00:35:58,339 --> 00:36:03,589
actually quite far like I said when I

990
00:36:02,180 --> 00:36:05,419
introduce myself I'm a trainer in

991
00:36:03,589 --> 00:36:07,910
software security I tell people how to

992
00:36:05,420 --> 00:36:09,529
do it but then it's up to them to

993
00:36:07,910 --> 00:36:12,259
actually have built more secure

994
00:36:09,529 --> 00:36:14,150
applications so that's one of my sin of

995
00:36:12,259 --> 00:36:16,339
messages build secure stuff definitely

996
00:36:14,150 --> 00:36:19,279
do that follow people that know about

997
00:36:16,339 --> 00:36:21,470
security myself and other speakers of

998
00:36:19,279 --> 00:36:23,990
course included and share your

999
00:36:21,470 --> 00:36:25,549
experiences if you build our secure

1000
00:36:23,990 --> 00:36:27,890
applications if you do something to

1001
00:36:25,549 --> 00:36:29,509
improve the security you have that

1002
00:36:27,890 --> 00:36:31,940
experience share that with your

1003
00:36:29,509 --> 00:36:34,759
colleagues internally and if you can

1004
00:36:31,940 --> 00:36:36,769
share it outside on our chapter meetings

1005
00:36:34,759 --> 00:36:39,589
on Benelux days on conferences whatever

1006
00:36:36,769 --> 00:36:41,769
many people need more experience on how

1007
00:36:39,589 --> 00:36:44,859
to do it and they get that from you and

1008
00:36:41,769 --> 00:36:46,319
that's it for me thanks for being here

1009
00:36:44,859 --> 00:36:51,129
thank you

1010
00:36:46,320 --> 00:36:51,129
[Applause]

