1
00:00:03,370 --> 00:00:08,209
welcome back from lunch so this will be

2
00:00:06,109 --> 00:00:10,850
a quite technical presentation I hope

3
00:00:08,209 --> 00:00:13,879
you don't feel a fall asleep with all

4
00:00:10,850 --> 00:00:16,039
the food so not today I would like to

5
00:00:13,879 --> 00:00:18,830
talk about code reuse attacks for the

6
00:00:16,039 --> 00:00:20,030
web and this is a joint project with two

7
00:00:18,830 --> 00:00:23,119
of my colleagues with Christophe

8
00:00:20,030 --> 00:00:25,400
khottabych and Eduardo Vela and myself

9
00:00:23,120 --> 00:00:27,350
and in the last few months we developed

10
00:00:25,400 --> 00:00:30,409
a technique that is very similar to

11
00:00:27,350 --> 00:00:33,710
return to live C attacks in the binary

12
00:00:30,410 --> 00:00:36,379
world and for the web and the idea of

13
00:00:33,710 --> 00:00:37,940
this new attack technique is to bypass

14
00:00:36,379 --> 00:00:41,539
cross-site scripting mitigation

15
00:00:37,940 --> 00:00:42,949
techniques and this is today's agenda so

16
00:00:41,539 --> 00:00:44,989
in the beginning I would like to give a

17
00:00:42,949 --> 00:00:47,539
very short introduction to XSS and

18
00:00:44,989 --> 00:00:49,159
exercise mitigations I assume that most

19
00:00:47,539 --> 00:00:52,429
people know what exercise is and have

20
00:00:49,159 --> 00:00:54,649
seen XSS in the past but I still will

21
00:00:52,429 --> 00:00:56,510
give a short introductions then we will

22
00:00:54,649 --> 00:00:59,809
talk about the concept of a script

23
00:00:56,510 --> 00:01:02,568
gadget that's a way how we can bypass at

24
00:00:59,809 --> 00:01:04,789
the exercise mitigations and we found

25
00:01:02,569 --> 00:01:06,860
these gadgets and we were wondering how

26
00:01:04,790 --> 00:01:08,780
how prevalent are they in the in real

27
00:01:06,860 --> 00:01:11,060
world applications so we conducted two

28
00:01:08,780 --> 00:01:13,549
different studies we conducted a

29
00:01:11,060 --> 00:01:15,350
qualitative manual study on popular

30
00:01:13,549 --> 00:01:17,630
JavaScript libraries and frameworks to

31
00:01:15,350 --> 00:01:20,809
find these gadgets and we conducted an

32
00:01:17,630 --> 00:01:22,520
automated study at scale of the Alexa

33
00:01:20,810 --> 00:01:23,899
top 5,000 websites so see how many

34
00:01:22,520 --> 00:01:25,908
gadgets we can find in real world

35
00:01:23,899 --> 00:01:27,799
applications and what we saw there is

36
00:01:25,909 --> 00:01:29,810
that these gadgets that allow bypassing

37
00:01:27,799 --> 00:01:31,189
of these mitigations are prevalent in

38
00:01:29,810 --> 00:01:34,399
almost all frameworks and all

39
00:01:31,189 --> 00:01:38,689
applications that we see and basically

40
00:01:34,399 --> 00:01:40,399
it it shows us that XSS mitigations are

41
00:01:38,689 --> 00:01:41,779
maybe the wrong way of moving forward

42
00:01:40,399 --> 00:01:43,100
and protecting it kinds process

43
00:01:41,780 --> 00:01:45,530
scripting and that's why we are

44
00:01:43,100 --> 00:01:47,570
proposing a new way of defending against

45
00:01:45,530 --> 00:01:48,649
cross-site scripting and we do so we

46
00:01:47,570 --> 00:01:50,270
focus on Dom XSS

47
00:01:48,649 --> 00:01:51,590
for this part because solving all of

48
00:01:50,270 --> 00:01:54,770
cross-site scripting is pretty difficult

49
00:01:51,590 --> 00:01:56,329
and I will present talk about this in

50
00:01:54,770 --> 00:01:59,090
the end of the presentation and then we

51
00:01:56,329 --> 00:02:01,449
will also have a summary and but let's

52
00:01:59,090 --> 00:02:03,740
start at the beginning at what actually

53
00:02:01,450 --> 00:02:04,999
what actually cross-site scripting so

54
00:02:03,740 --> 00:02:07,429
here I have a very simple example I

55
00:02:04,999 --> 00:02:08,630
think all of you should have seen one of

56
00:02:07,429 --> 00:02:09,470
those examples is a very simple

57
00:02:08,630 --> 00:02:11,720
cross-site scripting

58
00:02:09,470 --> 00:02:13,580
it's it's a reflected one it just brings

59
00:02:11,720 --> 00:02:15,140
out the creating message and in the

60
00:02:13,580 --> 00:02:15,920
usual case a user would type in his name

61
00:02:15,140 --> 00:02:18,260
in

62
00:02:15,920 --> 00:02:19,458
the the get parameter and then the

63
00:02:18,260 --> 00:02:22,579
greeting message would be rendered by

64
00:02:19,459 --> 00:02:25,910
the browser um however what the problem

65
00:02:22,580 --> 00:02:27,680
here is that this a user name is printed

66
00:02:25,910 --> 00:02:30,260
in this greeting message which out any

67
00:02:27,680 --> 00:02:30,860
encoding so an attacker could just name

68
00:02:30,260 --> 00:02:33,980
himself

69
00:02:30,860 --> 00:02:35,900
script alert one and then this PHP

70
00:02:33,980 --> 00:02:38,149
script would run it would insert the

71
00:02:35,900 --> 00:02:39,709
script alert one here this would be sent

72
00:02:38,150 --> 00:02:40,850
to the browser and the browser would see

73
00:02:39,709 --> 00:02:42,860
a script tag and say hey there's a

74
00:02:40,850 --> 00:02:44,480
script tag so I probably should just

75
00:02:42,860 --> 00:02:46,640
execute it the server is telling me to

76
00:02:44,480 --> 00:02:50,060
do that and the problem with this attack

77
00:02:46,640 --> 00:02:52,100
is that here the alert is just a

78
00:02:50,060 --> 00:02:53,810
placeholder for what you can do and

79
00:02:52,100 --> 00:02:55,760
basically you can do with the cross-site

80
00:02:53,810 --> 00:02:57,440
scripting attack you can do anything a

81
00:02:55,760 --> 00:02:59,209
user can do so what you do is you craft

82
00:02:57,440 --> 00:03:01,250
the payload in JavaScript then you send

83
00:02:59,209 --> 00:03:02,870
a link to your victim the lik victim

84
00:03:01,250 --> 00:03:05,140
click sonic and then this payload would

85
00:03:02,870 --> 00:03:07,340
execute in the authentication context of

86
00:03:05,140 --> 00:03:09,529
this person that clicked on the link and

87
00:03:07,340 --> 00:03:11,269
then you can do anything that this user

88
00:03:09,530 --> 00:03:12,769
can do if this is an administrator of

89
00:03:11,269 --> 00:03:14,239
the application you can probably

90
00:03:12,769 --> 00:03:16,730
administer the app maybe delete the

91
00:03:14,239 --> 00:03:18,980
database or read the database send some

92
00:03:16,730 --> 00:03:21,649
data away if this is a user that is

93
00:03:18,980 --> 00:03:24,260
maybe a message board poster you can

94
00:03:21,650 --> 00:03:26,329
post messages in his name you can maybe

95
00:03:24,260 --> 00:03:29,540
read his private messages and also on

96
00:03:26,329 --> 00:03:31,280
its course and it's pretty bad and in

97
00:03:29,540 --> 00:03:33,078
theory cross-site scripting is a solved

98
00:03:31,280 --> 00:03:35,090
problem so I think if you talk to

99
00:03:33,079 --> 00:03:36,650
academia they would say yeah we know

100
00:03:35,090 --> 00:03:39,470
exactly how to do this you put some

101
00:03:36,650 --> 00:03:41,269
contextual encoding here the right

102
00:03:39,470 --> 00:03:43,910
encoding function and then the problem

103
00:03:41,269 --> 00:03:45,920
is solved and however theory is not the

104
00:03:43,910 --> 00:03:49,040
practice in practice that's different

105
00:03:45,920 --> 00:03:51,589
and here we see graph from Google's bug

106
00:03:49,040 --> 00:03:54,078
bounty program and this is basically the

107
00:03:51,590 --> 00:03:56,690
payouts that we pay for four bucks and

108
00:03:54,079 --> 00:03:59,840
what we see here is that we pay about

109
00:03:56,690 --> 00:04:02,900
60% of all the payouts that we give give

110
00:03:59,840 --> 00:04:04,970
out to researchers our spend on

111
00:04:02,900 --> 00:04:06,380
cross-site scripting and what we see is

112
00:04:04,970 --> 00:04:09,500
that cross-site scripting is everywhere

113
00:04:06,380 --> 00:04:13,280
um and we we have guidelines we have

114
00:04:09,500 --> 00:04:15,950
trainings to mention the point that I

115
00:04:13,280 --> 00:04:18,260
was trying to make before but that

116
00:04:15,950 --> 00:04:19,849
doesn't help so developers still do

117
00:04:18,260 --> 00:04:22,250
mistakes they still introduce bugs and

118
00:04:19,850 --> 00:04:23,540
that's why we have 60% of the box to B

119
00:04:22,250 --> 00:04:26,980
crossa scripts

120
00:04:23,540 --> 00:04:29,960
and in in in the recent years a lot of

121
00:04:26,980 --> 00:04:31,730
XSS mitigations were introduced so we

122
00:04:29,960 --> 00:04:33,409
have ideas how to prevent the bugs but

123
00:04:31,730 --> 00:04:35,750
we often see hey bugs are present and we

124
00:04:33,410 --> 00:04:37,370
cannot really prevent their existence so

125
00:04:35,750 --> 00:04:39,320
let's not try to focus on the bugs but

126
00:04:37,370 --> 00:04:42,020
focus on the attacks and that's what an

127
00:04:39,320 --> 00:04:44,060
XSS mitigation actually does so the idea

128
00:04:42,020 --> 00:04:45,740
of an XSS mitigation is to block the

129
00:04:44,060 --> 00:04:47,660
attack instead of preventing the

130
00:04:45,740 --> 00:04:50,420
vulnerability and here I have a very

131
00:04:47,660 --> 00:04:52,880
simple scheme this is a web application

132
00:04:50,420 --> 00:04:55,310
so it has its rendered in a browser it

133
00:04:52,880 --> 00:04:56,810
has a server and we see a cross-site

134
00:04:55,310 --> 00:04:59,180
scripting injection we have a parameter

135
00:04:56,810 --> 00:05:01,280
called injection and it's it's reflected

136
00:04:59,180 --> 00:05:03,740
in the page and in this scheme I would

137
00:05:01,280 --> 00:05:05,239
like to explain how XSS mitigations work

138
00:05:03,740 --> 00:05:07,340
and what kind of different XSS

139
00:05:05,240 --> 00:05:09,320
mitigations we have so the first XSS

140
00:05:07,340 --> 00:05:11,840
mitigation that probably came up were

141
00:05:09,320 --> 00:05:13,969
web application firewalls they are

142
00:05:11,840 --> 00:05:15,890
pretty simple so they sit in the server

143
00:05:13,970 --> 00:05:17,510
and they just look at all the requests

144
00:05:15,890 --> 00:05:19,370
that come into the server and then they

145
00:05:17,510 --> 00:05:20,570
throw a bunch of rules or regular

146
00:05:19,370 --> 00:05:22,850
expressions or whatever onto this

147
00:05:20,570 --> 00:05:25,400
request and then they are trying to find

148
00:05:22,850 --> 00:05:26,630
malicious injections so they look at

149
00:05:25,400 --> 00:05:27,890
this and they find maybe oh there's a

150
00:05:26,630 --> 00:05:29,840
script tag in the request there should

151
00:05:27,890 --> 00:05:32,630
never be a script tag in a request so I

152
00:05:29,840 --> 00:05:34,130
better block this request so what web

153
00:05:32,630 --> 00:05:36,700
application firewalls try to detect

154
00:05:34,130 --> 00:05:39,980
malicious markup and then block requests

155
00:05:36,700 --> 00:05:42,110
another XSS mitigation that works a

156
00:05:39,980 --> 00:05:44,120
little bit differently our XSS filters

157
00:05:42,110 --> 00:05:46,430
and one of the first XSS filters that

158
00:05:44,120 --> 00:05:48,920
was introduced was the no script XSS

159
00:05:46,430 --> 00:05:50,990
filter and it's kind of works in the

160
00:05:48,920 --> 00:05:52,580
same way as a firewall but instead of

161
00:05:50,990 --> 00:05:54,170
sitting on the server it sits in the

162
00:05:52,580 --> 00:05:56,180
browser and it does exactly the same

163
00:05:54,170 --> 00:05:57,800
things it protects you as a user it

164
00:05:56,180 --> 00:05:59,420
looks at all the URLs that leave your

165
00:05:57,800 --> 00:06:01,100
browser throws a bunch of rules or

166
00:05:59,420 --> 00:06:02,960
regular expressions on it and sees oh

167
00:06:01,100 --> 00:06:04,880
there's a malicious script or an onload

168
00:06:02,960 --> 00:06:07,789
event handler or so so I better block

169
00:06:04,880 --> 00:06:09,920
this and then it just removes the part

170
00:06:07,790 --> 00:06:11,330
of the request that contains the

171
00:06:09,920 --> 00:06:13,250
malicious markup and the idea is then

172
00:06:11,330 --> 00:06:15,380
it's not getting injected and you're not

173
00:06:13,250 --> 00:06:17,720
getting exploited then there was an

174
00:06:15,380 --> 00:06:19,520
evolution of cross-site scripting

175
00:06:17,720 --> 00:06:20,720
filters so the problem with no script is

176
00:06:19,520 --> 00:06:22,430
that it has a huge number of false

177
00:06:20,720 --> 00:06:24,650
positives because it just uses this

178
00:06:22,430 --> 00:06:26,030
matching rules and the next generation

179
00:06:24,650 --> 00:06:27,590
of cross-site scripting filters were the

180
00:06:26,030 --> 00:06:29,419
IE cross-site scripting filter and the

181
00:06:27,590 --> 00:06:31,340
chrome cross-site scripting filter they

182
00:06:29,420 --> 00:06:32,690
work in slightly different ways but how

183
00:06:31,340 --> 00:06:34,489
they work is basically that they first

184
00:06:32,690 --> 00:06:36,320
look at the requests they tried to

185
00:06:34,490 --> 00:06:37,520
detect whether there is malicious markup

186
00:06:36,320 --> 00:06:39,110
in the request and

187
00:06:37,520 --> 00:06:41,599
they wait for the response from the

188
00:06:39,110 --> 00:06:43,910
server and before executing the response

189
00:06:41,599 --> 00:06:46,490
they check whether this malicious markup

190
00:06:43,910 --> 00:06:49,819
that they detected in the in the request

191
00:06:46,490 --> 00:06:51,919
is also contained within within the

192
00:06:49,819 --> 00:06:53,419
response and if that's the case they try

193
00:06:51,919 --> 00:06:55,549
to either remove the payload or block

194
00:06:53,419 --> 00:06:58,758
the full request they're different modes

195
00:06:55,550 --> 00:07:00,139
and then recently we have a new XSS

196
00:06:58,759 --> 00:07:02,180
mitigation scheme and it's the content

197
00:07:00,139 --> 00:07:05,300
security policy and it works a bit

198
00:07:02,180 --> 00:07:06,680
different but from a from a theoretical

199
00:07:05,300 --> 00:07:08,900
point of view it's it's basically the

200
00:07:06,680 --> 00:07:11,960
same so what these P does is that it

201
00:07:08,900 --> 00:07:13,849
tries to detect legitimate markup that

202
00:07:11,960 --> 00:07:15,770
is supposed to be in the page and non

203
00:07:13,849 --> 00:07:17,449
legitimate markup that is injected and

204
00:07:15,770 --> 00:07:20,240
then it will just execute the legitimate

205
00:07:17,449 --> 00:07:21,650
one and block the malicious one and it

206
00:07:20,240 --> 00:07:23,389
has different ways of determining

207
00:07:21,650 --> 00:07:25,400
whether something is malicious or

208
00:07:23,389 --> 00:07:26,870
legitimate and it has a white listing

209
00:07:25,400 --> 00:07:29,270
mode where you can say everything from

210
00:07:26,870 --> 00:07:30,560
example.org is is a trusted script and

211
00:07:29,270 --> 00:07:32,810
everything from evil.com is not a

212
00:07:30,560 --> 00:07:36,050
trusted script it has a non space mode

213
00:07:32,810 --> 00:07:37,430
we can say this script carries a unique

214
00:07:36,050 --> 00:07:39,259
nonce that the attacker cannot know

215
00:07:37,430 --> 00:07:41,800
that's it that's why it's legitimate or

216
00:07:39,259 --> 00:07:44,180
there is no nonce so it's it's malicious

217
00:07:41,800 --> 00:07:45,979
and it also has a hash based mode but

218
00:07:44,180 --> 00:07:47,900
that's not too important here but again

219
00:07:45,979 --> 00:07:50,360
did the principle is detect malicious

220
00:07:47,900 --> 00:07:51,679
stuff detect legitimate stuff block the

221
00:07:50,360 --> 00:07:53,930
malicious stuff and leave the legitimate

222
00:07:51,680 --> 00:07:55,580
stuff in place and then we have a nother

223
00:07:53,930 --> 00:07:57,469
mitigation techniques which are HTML

224
00:07:55,580 --> 00:07:58,969
sanitizers so sometimes you're in a

225
00:07:57,469 --> 00:08:01,039
situation where you have a user provided

226
00:07:58,969 --> 00:08:03,229
string and you want to render it as HTML

227
00:08:01,039 --> 00:08:04,849
maybe you want to allow the user to to

228
00:08:03,229 --> 00:08:06,949
make something bold or italics or

229
00:08:04,849 --> 00:08:08,599
whatever so you want to allow injection

230
00:08:06,949 --> 00:08:11,120
of HTML but you don't want to allow

231
00:08:08,599 --> 00:08:13,219
malicious HTML injection and sanitizer

232
00:08:11,120 --> 00:08:15,440
basically takes a string and it removes

233
00:08:13,219 --> 00:08:17,389
all the malicious parts from it and then

234
00:08:15,440 --> 00:08:18,740
you have basically assumptions you have

235
00:08:17,389 --> 00:08:23,029
a safe string that you can render

236
00:08:18,740 --> 00:08:24,650
without XSS and if we look at this all

237
00:08:23,029 --> 00:08:27,529
of these mitigations work in the same

238
00:08:24,650 --> 00:08:30,318
way it tried to detect legitimate one

239
00:08:27,529 --> 00:08:33,289
stuff and try to block malicious and

240
00:08:30,319 --> 00:08:35,200
what we looked at is whether this basic

241
00:08:33,289 --> 00:08:38,598
assumptions of all these mechanisms is

242
00:08:35,200 --> 00:08:40,099
true and this in a modern application

243
00:08:38,599 --> 00:08:42,200
that is built with modern JavaScript

244
00:08:40,099 --> 00:08:46,010
frameworks and the very short answer is

245
00:08:42,200 --> 00:08:48,829
it's not true it's wrong and in the next

246
00:08:46,010 --> 00:08:49,960
30 to 40 minutes I will explain why it's

247
00:08:48,829 --> 00:08:52,609
wrong

248
00:08:49,960 --> 00:08:55,220
so let's look at how a modern web

249
00:08:52,610 --> 00:08:58,220
application works so here we see a very

250
00:08:55,220 --> 00:09:00,380
basic HTML and JavaScript block that you

251
00:08:58,220 --> 00:09:02,630
could find in any UI component library

252
00:09:00,380 --> 00:09:05,840
so here we have a we have a button and a

253
00:09:02,630 --> 00:09:08,720
piece of HTML and a couple of data

254
00:09:05,840 --> 00:09:10,250
attributes here and basically this could

255
00:09:08,720 --> 00:09:11,780
be for example a UI library where you

256
00:09:10,250 --> 00:09:14,120
have button elements and then usually

257
00:09:11,780 --> 00:09:15,650
you have accompanying JavaScript code

258
00:09:14,120 --> 00:09:18,230
and this accompanying JavaScript code

259
00:09:15,650 --> 00:09:21,709
tries to add behavior to the button it

260
00:09:18,230 --> 00:09:23,390
might have hover effects and and it

261
00:09:21,710 --> 00:09:25,670
defines what happens when you click and

262
00:09:23,390 --> 00:09:28,520
so on and in this case this is very

263
00:09:25,670 --> 00:09:30,260
stripped down case so here we just mark

264
00:09:28,520 --> 00:09:32,810
that this development is a button and

265
00:09:30,260 --> 00:09:34,160
then we have a data text attribute and

266
00:09:32,810 --> 00:09:36,020
we say okay this is the text that should

267
00:09:34,160 --> 00:09:37,550
be rendered on the button once once it's

268
00:09:36,020 --> 00:09:39,140
in the page it's very simple but there

269
00:09:37,550 --> 00:09:41,569
could be way more functionality here and

270
00:09:39,140 --> 00:09:43,520
and then we just say in the script we

271
00:09:41,570 --> 00:09:45,710
just select this button why this is

272
00:09:43,520 --> 00:09:48,620
marker over here and then we say okay

273
00:09:45,710 --> 00:09:51,400
let's render the data text attribute in

274
00:09:48,620 --> 00:09:53,990
this button so that the user can display

275
00:09:51,400 --> 00:09:56,390
but now there's a and what what happens

276
00:09:53,990 --> 00:09:58,730
then it is this code gets executed and

277
00:09:56,390 --> 00:10:00,560
then the button gets rendered the Texas

278
00:09:58,730 --> 00:10:03,290
on the button and so on it's very simple

279
00:10:00,560 --> 00:10:05,689
so now there's a question for the

280
00:10:03,290 --> 00:10:09,319
audience but does anyone see a security

281
00:10:05,690 --> 00:10:12,280
problem in this code with with XSS

282
00:10:09,320 --> 00:10:12,280
mitigations in mind

283
00:10:25,010 --> 00:10:30,079
yes exactly that's exactly the case now

284
00:10:28,040 --> 00:10:32,149
if this example here so the problematic

285
00:10:30,079 --> 00:10:34,969
the security issue is is here where we

286
00:10:32,149 --> 00:10:37,279
take a data attribute which is by

287
00:10:34,970 --> 00:10:40,850
definition data and we turn it into HTML

288
00:10:37,279 --> 00:10:42,649
into code and so if we take these XSS

289
00:10:40,850 --> 00:10:44,630
mitigations into account let's assume

290
00:10:42,649 --> 00:10:46,490
this page has an XSS vulnerability and

291
00:10:44,630 --> 00:10:48,320
we have xs/s mitigations in place to

292
00:10:46,490 --> 00:10:50,149
defend against all the attacks so it

293
00:10:48,320 --> 00:10:52,279
cannot be exploited but now we have this

294
00:10:50,149 --> 00:10:53,839
exercise and that's a story yeah I

295
00:10:52,279 --> 00:10:56,019
forgot this this this is this is what we

296
00:10:53,839 --> 00:10:57,889
call X script gadget this is legitimate

297
00:10:56,019 --> 00:11:00,800
functionality that is contained in the

298
00:10:57,889 --> 00:11:03,290
page and that upgrades a data text to an

299
00:11:00,800 --> 00:11:05,660
HTML and now let's assume we have the

300
00:11:03,290 --> 00:11:07,670
XSS in the page so we have an XSS here

301
00:11:05,660 --> 00:11:08,810
so the attacker could insert the script

302
00:11:07,670 --> 00:11:10,339
but that doesn't work because the

303
00:11:08,810 --> 00:11:12,768
excesses mitigation would block it but

304
00:11:10,339 --> 00:11:15,949
now we can just insert a button give it

305
00:11:12,769 --> 00:11:18,740
the same marker string and then a data

306
00:11:15,949 --> 00:11:20,689
text and into the data text we just put

307
00:11:18,740 --> 00:11:22,519
our payload and the payload is not just

308
00:11:20,690 --> 00:11:25,100
data it's just a string any XSS

309
00:11:22,519 --> 00:11:27,110
mitigation would would not block it and

310
00:11:25,100 --> 00:11:28,639
interestingly we can also encode it

311
00:11:27,110 --> 00:11:30,319
because the browser does some kind is

312
00:11:28,639 --> 00:11:33,889
some some decoding steps when we read

313
00:11:30,319 --> 00:11:36,260
that so in this case we can simply

314
00:11:33,889 --> 00:11:37,940
inject this and then the script gadget

315
00:11:36,260 --> 00:11:39,880
here in the page will will see both

316
00:11:37,940 --> 00:11:42,980
buttons and it will upgrade our button

317
00:11:39,880 --> 00:11:44,959
to execute script in the page and this

318
00:11:42,980 --> 00:11:46,880
all of this is legitimate markup it's a

319
00:11:44,959 --> 00:11:48,649
div tag it's a couple of data attributes

320
00:11:46,880 --> 00:11:50,569
there are no scripts there's no unload

321
00:11:48,649 --> 00:11:52,819
Handler and so on and this is basically

322
00:11:50,569 --> 00:11:55,160
our script gadget works and to summarize

323
00:11:52,819 --> 00:11:57,620
a script gadget is a legitimate piece of

324
00:11:55,160 --> 00:12:00,350
JavaScript in a page it takes a

325
00:11:57,620 --> 00:12:03,529
seemingly like benign piece of HTML and

326
00:12:00,350 --> 00:12:05,930
upgrades it to code execution and that's

327
00:12:03,529 --> 00:12:07,970
how we can bypass XSS mitigation and

328
00:12:05,930 --> 00:12:10,160
here I quickly want to summarize the

329
00:12:07,970 --> 00:12:12,079
attacker model so here we see how an XSS

330
00:12:10,160 --> 00:12:14,660
works so we have the document object

331
00:12:12,079 --> 00:12:17,569
model we have an XSS flaw in the page

332
00:12:14,660 --> 00:12:21,649
and usually attackers inject HTML oops

333
00:12:17,569 --> 00:12:23,899
sorry usually inject HTML into the Dom

334
00:12:21,649 --> 00:12:25,010
but however we have this XSS mitigation

335
00:12:23,899 --> 00:12:28,010
that prevents us from doing any

336
00:12:25,010 --> 00:12:29,600
malicious malicious stuff but now there

337
00:12:28,010 --> 00:12:30,980
is the script gadget in the page the

338
00:12:29,600 --> 00:12:34,069
text in that takes non malicious stuff

339
00:12:30,980 --> 00:12:35,930
and upgrades it to execute our payload

340
00:12:34,069 --> 00:12:37,349
and that's how we can circumvent all the

341
00:12:35,930 --> 00:12:41,130
XSS mitigations

342
00:12:37,350 --> 00:12:42,720
and we found this phenomenon in in one

343
00:12:41,130 --> 00:12:45,480
or two examples and then we were

344
00:12:42,720 --> 00:12:47,670
thinking how how how widespread is this

345
00:12:45,480 --> 00:12:49,830
how often do script gadgets exist in

346
00:12:47,670 --> 00:12:52,199
pages is like an isolated issue or is

347
00:12:49,830 --> 00:12:53,820
this like a bigger issue so what we did

348
00:12:52,200 --> 00:12:57,000
is we did the quantity of manual

349
00:12:53,820 --> 00:12:58,800
analysis of popular jobs and we wanted

350
00:12:57,000 --> 00:13:00,270
to answer two questions first we wanted

351
00:12:58,800 --> 00:13:02,550
to answer how common these gadgets are

352
00:13:00,270 --> 00:13:04,829
in in modern JavaScript libraries and

353
00:13:02,550 --> 00:13:08,430
how effective are they in bypassing XSS

354
00:13:04,830 --> 00:13:10,230
medications so we compile the list of 16

355
00:13:08,430 --> 00:13:11,790
popular libraries so we just went to

356
00:13:10,230 --> 00:13:14,190
github we search for all the libraries

357
00:13:11,790 --> 00:13:16,319
that at the most stars and Forbes and so

358
00:13:14,190 --> 00:13:18,270
on and compile this list and it contains

359
00:13:16,320 --> 00:13:21,870
things like angular aralia bootstrap

360
00:13:18,270 --> 00:13:25,079
react closure library polymer so all the

361
00:13:21,870 --> 00:13:26,610
popular frameworks and then we tried for

362
00:13:25,080 --> 00:13:29,640
each framework we try to find a

363
00:13:26,610 --> 00:13:31,680
mitigation bypass for one of for XSS

364
00:13:29,640 --> 00:13:34,920
mitigations so we looked at XSS filters

365
00:13:31,680 --> 00:13:36,719
at HTML sanitizers at web application

366
00:13:34,920 --> 00:13:39,750
firewalls and at the content security

367
00:13:36,720 --> 00:13:41,550
policy and in the next maybe 20 minutes

368
00:13:39,750 --> 00:13:43,050
I would like to go through all of these

369
00:13:41,550 --> 00:13:44,729
examples and give one or two examples

370
00:13:43,050 --> 00:13:47,670
for each of the mitigation techniques

371
00:13:44,730 --> 00:13:49,350
and try how you can bypass them so let's

372
00:13:47,670 --> 00:13:53,099
start with the most simplest one with

373
00:13:49,350 --> 00:13:54,840
buffs and XSS filters and wasps and XSS

374
00:13:53,100 --> 00:13:56,670
filters as I explained that usually use

375
00:13:54,840 --> 00:13:59,490
rules or regular expressions to detect

376
00:13:56,670 --> 00:14:00,990
payloads and I already showed how they

377
00:13:59,490 --> 00:14:03,540
can be bypassed right so so we have

378
00:14:00,990 --> 00:14:05,160
legitimate code that gets upgraded so

379
00:14:03,540 --> 00:14:07,410
basically when we look for gadgets that

380
00:14:05,160 --> 00:14:09,810
bypasses we basically look for for

381
00:14:07,410 --> 00:14:12,180
legitimate pieces of code that get

382
00:14:09,810 --> 00:14:14,250
upgraded by a library for example where

383
00:14:12,180 --> 00:14:18,510
a legitimate attribute is passed to eval

384
00:14:14,250 --> 00:14:21,420
or where a text node is passed to in

385
00:14:18,510 --> 00:14:23,130
HTML and so on and here I have a couple

386
00:14:21,420 --> 00:14:24,780
of examples I have this longer one

387
00:14:23,130 --> 00:14:26,810
example that I would like to present in

388
00:14:24,780 --> 00:14:29,699
details in I have a couple of short ones

389
00:14:26,810 --> 00:14:33,540
just to see how widespread this is so

390
00:14:29,700 --> 00:14:35,100
here we see a construct from the

391
00:14:33,540 --> 00:14:36,959
knockout library and they have this

392
00:14:35,100 --> 00:14:39,180
concept of data bindings so you have

393
00:14:36,960 --> 00:14:40,770
this data bind attribute which is has no

394
00:14:39,180 --> 00:14:43,410
semantics in HTML it's just a data

395
00:14:40,770 --> 00:14:45,480
attribute and then you can type in value

396
00:14:43,410 --> 00:14:47,430
and then you can have any any kind of

397
00:14:45,480 --> 00:14:50,790
off data here and what happens at

398
00:14:47,430 --> 00:14:52,260
runtime is that knock out basically

399
00:14:50,790 --> 00:14:53,969
when it bootstraps it says give me all

400
00:14:52,260 --> 00:14:55,830
give me all the elements that have this

401
00:14:53,970 --> 00:14:58,770
data bind attribute and then it gets

402
00:14:55,830 --> 00:15:00,510
this is attribute and then what it does

403
00:14:58,770 --> 00:15:04,230
it creates a data binding so it creates

404
00:15:00,510 --> 00:15:06,360
a a function and this string this this

405
00:15:04,230 --> 00:15:08,010
data value goes into this function and

406
00:15:06,360 --> 00:15:09,990
this function is called by the framework

407
00:15:08,010 --> 00:15:11,069
to update the value so whenever you

408
00:15:09,990 --> 00:15:12,780
change the value it will call the

409
00:15:11,070 --> 00:15:14,220
function the function will return the

410
00:15:12,780 --> 00:15:16,110
right value then the framework will put

411
00:15:14,220 --> 00:15:18,030
it into the into the right place into

412
00:15:16,110 --> 00:15:19,980
this div element and then after the

413
00:15:18,030 --> 00:15:22,380
after this function is created it will

414
00:15:19,980 --> 00:15:24,420
just be called at runtime so effectively

415
00:15:22,380 --> 00:15:27,000
what this creates is a chain from user

416
00:15:24,420 --> 00:15:30,060
in from from from a attacker control but

417
00:15:27,000 --> 00:15:31,920
value that is benign to a function call

418
00:15:30,060 --> 00:15:34,410
that is executed so basically we have

419
00:15:31,920 --> 00:15:36,900
code execution here and this means this

420
00:15:34,410 --> 00:15:38,670
data bind attribute behaves like eval so

421
00:15:36,900 --> 00:15:40,110
you have this data bind a tribute you

422
00:15:38,670 --> 00:15:41,939
have the script gadget in the page in a

423
00:15:40,110 --> 00:15:44,400
knockout library and this is effectively

424
00:15:41,940 --> 00:15:46,920
just evolving this value so in order to

425
00:15:44,400 --> 00:15:48,750
bypass an XSS mitigation or a web

426
00:15:46,920 --> 00:15:51,240
application firewall in this case you

427
00:15:48,750 --> 00:15:53,850
can just say data bind value alert 1 and

428
00:15:51,240 --> 00:15:56,130
this will open an alert box in the

429
00:15:53,850 --> 00:15:57,840
application and no no XSS mitigation

430
00:15:56,130 --> 00:16:01,830
would be suspicious of this data binder

431
00:15:57,840 --> 00:16:04,110
trick dude yeah couple of em other

432
00:16:01,830 --> 00:16:06,060
examples this is from the bootstrap

433
00:16:04,110 --> 00:16:07,920
library and a boot syrup library has a

434
00:16:06,060 --> 00:16:09,300
tool type functionality so you can just

435
00:16:07,920 --> 00:16:10,770
say render tooltip for me and the

436
00:16:09,300 --> 00:16:12,390
library will take care of all the

437
00:16:10,770 --> 00:16:14,550
rendering and the effects of the tooltip

438
00:16:12,390 --> 00:16:17,730
and so on so how you do that is you just

439
00:16:14,550 --> 00:16:19,250
put a marker attribute again on your

440
00:16:17,730 --> 00:16:21,840
element that you want to have the

441
00:16:19,250 --> 00:16:23,070
tooltip with and then you have a title

442
00:16:21,840 --> 00:16:24,990
attribute and this is what actually

443
00:16:23,070 --> 00:16:27,060
rendered in a tooltip and interestingly

444
00:16:24,990 --> 00:16:28,620
by default this is just render this text

445
00:16:27,060 --> 00:16:30,660
because you don't need a HTML in a

446
00:16:28,620 --> 00:16:33,300
tooltip usually however bootstrap has

447
00:16:30,660 --> 00:16:34,890
this data API where you can just change

448
00:16:33,300 --> 00:16:37,579
internal configuration settings of

449
00:16:34,890 --> 00:16:40,020
bootstrap by specifying a data attribute

450
00:16:37,580 --> 00:16:42,720
so what you can just say is data

451
00:16:40,020 --> 00:16:45,480
- HTML equals true this will change the

452
00:16:42,720 --> 00:16:48,390
internal configuration value and then

453
00:16:45,480 --> 00:16:50,550
this will be rendered as HTML so and

454
00:16:48,390 --> 00:16:53,460
then we effectively bypass XSS

455
00:16:50,550 --> 00:16:56,579
mitigation so again here's another

456
00:16:53,460 --> 00:16:58,170
example from the dojo library so here I

457
00:16:56,580 --> 00:17:00,330
don't even really know what this does

458
00:16:58,170 --> 00:17:02,010
this is just the declaration I think you

459
00:17:00,330 --> 00:17:03,660
can declare some variables or

460
00:17:02,010 --> 00:17:04,700
configuration values and interestingly

461
00:17:03,660 --> 00:17:07,790
all

462
00:17:04,700 --> 00:17:10,610
these properties or attributes are just

463
00:17:07,790 --> 00:17:13,010
shown into eval with some other code

464
00:17:10,609 --> 00:17:14,629
around it so you can you can simply

465
00:17:13,010 --> 00:17:16,400
break out here of the of the current

466
00:17:14,630 --> 00:17:19,850
contract you can just type a load one

467
00:17:16,400 --> 00:17:22,160
and you get an alert it's very simple

468
00:17:19,849 --> 00:17:23,929
and here's a summary of the findings for

469
00:17:22,160 --> 00:17:25,550
XSS filters and web application

470
00:17:23,930 --> 00:17:27,620
firewalls that we had so we looked at

471
00:17:25,550 --> 00:17:29,720
three filters at the chrome edge and no

472
00:17:27,619 --> 00:17:31,879
script and for web application firewalls

473
00:17:29,720 --> 00:17:34,220
we looked at mod security and we found

474
00:17:31,880 --> 00:17:37,640
that in most cases we were able to

475
00:17:34,220 --> 00:17:39,740
bypass 9 out of 16 cases for Chrome it

476
00:17:37,640 --> 00:17:41,660
was a bit higher because chrome tries to

477
00:17:39,740 --> 00:17:43,550
prevent false positives so all the other

478
00:17:41,660 --> 00:17:44,930
filters are trying to over catch and

479
00:17:43,550 --> 00:17:46,909
catch as much as possible but don't

480
00:17:44,930 --> 00:17:49,310
necessarily want to sort so they catch

481
00:17:46,910 --> 00:17:52,430
more than then what could actually be an

482
00:17:49,310 --> 00:17:54,980
intern hey let's move on to the next

483
00:17:52,430 --> 00:17:57,230
exercise mitigation and HTML sanitizers

484
00:17:54,980 --> 00:17:59,330
so as I said HTML sanitizers work by

485
00:17:57,230 --> 00:18:02,270
like just taking a string and removing

486
00:17:59,330 --> 00:18:05,300
all the HTML the malicious HTML parts

487
00:18:02,270 --> 00:18:08,120
and again we can use script gadgets to

488
00:18:05,300 --> 00:18:10,070
circumvent HTML sanitizers because most

489
00:18:08,120 --> 00:18:13,550
of the sanitizers would leave script tag

490
00:18:10,070 --> 00:18:15,470
gadgets intact and here are a couple of

491
00:18:13,550 --> 00:18:17,120
examples and the first one was not part

492
00:18:15,470 --> 00:18:19,070
of the 16 popular library but it's so

493
00:18:17,120 --> 00:18:21,350
weird that I I wanted to show it anyways

494
00:18:19,070 --> 00:18:23,090
and this is of a library called ajaxify

495
00:18:21,350 --> 00:18:25,730
and ajaxify

496
00:18:23,090 --> 00:18:27,649
has a class and this class is called

497
00:18:25,730 --> 00:18:29,750
document script and if you put it

498
00:18:27,650 --> 00:18:33,410
anywhere it magically turns the element

499
00:18:29,750 --> 00:18:35,150
into a script tag so it would it will

500
00:18:33,410 --> 00:18:36,440
just take this value it will create a

501
00:18:35,150 --> 00:18:38,090
new script tag will write this to the

502
00:18:36,440 --> 00:18:41,150
script tag and append a script tag with

503
00:18:38,090 --> 00:18:42,709
the Dom so and it's perfect because

504
00:18:41,150 --> 00:18:44,950
class elements are allowed by all the

505
00:18:42,710 --> 00:18:47,450
sanitizers that you can find out there

506
00:18:44,950 --> 00:18:49,640
another example we've already seen is

507
00:18:47,450 --> 00:18:51,770
the bootstrap example again so here it's

508
00:18:49,640 --> 00:18:54,650
exactly the same we've seen that already

509
00:18:51,770 --> 00:18:57,020
I explained it it was just data some

510
00:18:54,650 --> 00:18:59,420
sanitizers allow data attributes to pass

511
00:18:57,020 --> 00:19:01,129
through the sanitization and usually

512
00:18:59,420 --> 00:19:03,110
title attributes are always left in

513
00:19:01,130 --> 00:19:05,670
place but all sanitizers so in this case

514
00:19:03,110 --> 00:19:08,280
this bypasses a couple of sanitizers

515
00:19:05,670 --> 00:19:10,710
and we did a study into sanitizers we

516
00:19:08,280 --> 00:19:13,500
looked at daum purify and closure and we

517
00:19:10,710 --> 00:19:16,740
were able to bypass dom purify 9 of 16

518
00:19:13,500 --> 00:19:18,330
cases and closure in 6 of 16 cases and

519
00:19:16,740 --> 00:19:22,830
we have a github repository with all the

520
00:19:18,330 --> 00:19:24,899
exploits and proof of concepts ok let's

521
00:19:22,830 --> 00:19:26,850
now go to the most interesting one so 2

522
00:19:24,900 --> 00:19:28,770
content security policy I don't really

523
00:19:26,850 --> 00:19:30,959
have a lot of time to explain what cross

524
00:19:28,770 --> 00:19:32,550
what how the content security policy

525
00:19:30,960 --> 00:19:34,560
works I assume that there is some basic

526
00:19:32,550 --> 00:19:36,180
knowledge but basically there are two

527
00:19:34,560 --> 00:19:39,090
different modes I would like to look at

528
00:19:36,180 --> 00:19:41,820
and there is a white listing mode and an

529
00:19:39,090 --> 00:19:43,199
on space mode and in the wide Lysa mode

530
00:19:41,820 --> 00:19:45,179
you you whitelist origins that are

531
00:19:43,200 --> 00:19:47,730
trusted and it in non space mode you put

532
00:19:45,180 --> 00:19:50,040
a nonce on every trusted script and then

533
00:19:47,730 --> 00:19:52,800
on this generated a page page load time

534
00:19:50,040 --> 00:19:54,000
and it's not known by the attacker so

535
00:19:52,800 --> 00:19:55,740
the attacker cannot inject the right

536
00:19:54,000 --> 00:19:59,820
nonce and that's why the attacker cannot

537
00:19:55,740 --> 00:20:02,730
inject and additionally CSP has some

538
00:19:59,820 --> 00:20:05,669
keywords to make your life easier so CSP

539
00:20:02,730 --> 00:20:07,470
is quite hard to to deploy if you have

540
00:20:05,670 --> 00:20:09,540
an existing application and that's why

541
00:20:07,470 --> 00:20:12,180
some keywords exist that relax

542
00:20:09,540 --> 00:20:14,250
CSP there's unsafe inline but that's

543
00:20:12,180 --> 00:20:16,410
insecure by default so I will not talk

544
00:20:14,250 --> 00:20:18,900
about it the second one is unsafe eval

545
00:20:16,410 --> 00:20:21,170
and then there's strict dynamic and

546
00:20:18,900 --> 00:20:24,210
first I would like to talk about unsafe

547
00:20:21,170 --> 00:20:25,710
unsafe eval and so unsafe eval is

548
00:20:24,210 --> 00:20:27,150
interesting because for a long time

549
00:20:25,710 --> 00:20:29,220
people thought it's not very dangerous

550
00:20:27,150 --> 00:20:30,660
to put this into your policy because

551
00:20:29,220 --> 00:20:32,670
usually you only have one or two places

552
00:20:30,660 --> 00:20:34,740
where you need to to use eval in your

553
00:20:32,670 --> 00:20:38,040
application so you could go you could

554
00:20:34,740 --> 00:20:39,870
just order those two places and then you

555
00:20:38,040 --> 00:20:41,909
could put unsafe evil and securely use

556
00:20:39,870 --> 00:20:44,489
that the problem again is with script

557
00:20:41,910 --> 00:20:47,220
gadgets you might have a chain from the

558
00:20:44,490 --> 00:20:49,200
Dom into evil and here's one example so

559
00:20:47,220 --> 00:20:51,990
this is from the underscore templating

560
00:20:49,200 --> 00:20:53,970
library and underscore has some

561
00:20:51,990 --> 00:20:55,890
syntactic sugar for developers so that

562
00:20:53,970 --> 00:20:57,660
you can write code faster so instead of

563
00:20:55,890 --> 00:21:02,210
writing script alert one

564
00:20:57,660 --> 00:21:04,950
you would just write smaller than

565
00:21:02,210 --> 00:21:06,810
percent and then you can put your script

566
00:21:04,950 --> 00:21:08,670
and then the underscore library when

567
00:21:06,810 --> 00:21:10,350
when it will automatically evaluate all

568
00:21:08,670 --> 00:21:11,910
templates that you have in a Dom with

569
00:21:10,350 --> 00:21:14,070
this type so you can just have a div tag

570
00:21:11,910 --> 00:21:17,190
and then we'll we'll execute code for

571
00:21:14,070 --> 00:21:18,899
you so in this way you can bypass unsafe

572
00:21:17,190 --> 00:21:19,539
evil and there are a lot more library

573
00:21:18,900 --> 00:21:22,539
set dude

574
00:21:19,539 --> 00:21:24,340
kind of things the second keyword I

575
00:21:22,539 --> 00:21:26,590
would like to talk about is the strict

576
00:21:24,340 --> 00:21:28,600
dynamic keyword so the strict dynamic

577
00:21:26,590 --> 00:21:30,759
keyword is a bit tricky and it's mostly

578
00:21:28,600 --> 00:21:32,019
used in a non space mode so in a non

579
00:21:30,759 --> 00:21:33,970
space mode you need to have these nuns

580
00:21:32,019 --> 00:21:35,289
in every script the problem is that a

581
00:21:33,970 --> 00:21:36,909
lot of scripts that you include are not

582
00:21:35,289 --> 00:21:38,979
aware of this fact for example you might

583
00:21:36,909 --> 00:21:41,830
include the facebook like button as a

584
00:21:38,979 --> 00:21:42,999
script or some other visit and this

585
00:21:41,830 --> 00:21:45,549
widget might not be aware that you are

586
00:21:42,999 --> 00:21:47,289
using a CSP non-space mode so they would

587
00:21:45,549 --> 00:21:48,908
not take the naans and add it to the

588
00:21:47,289 --> 00:21:51,279
newly created scripts that is libraries

589
00:21:48,909 --> 00:21:54,129
create and what strict dynamic does is

590
00:21:51,279 --> 00:21:56,799
that it allows trusted scripts to create

591
00:21:54,129 --> 00:21:58,840
new scripts without a nonce so the ideas

592
00:21:56,799 --> 00:22:00,460
if you notice the Facebook script the

593
00:21:58,840 --> 00:22:03,189
Facebook script can load other Facebook

594
00:22:00,460 --> 00:22:05,499
scripts without explicitly propagating

595
00:22:03,190 --> 00:22:08,019
trust so if a legitimate script can

596
00:22:05,499 --> 00:22:10,899
basically add new scripts and this is

597
00:22:08,019 --> 00:22:12,970
interesting because we can again see

598
00:22:10,899 --> 00:22:15,129
this in script gadgets so here we have

599
00:22:12,970 --> 00:22:17,139
an example at bypass a strict dynamic

600
00:22:15,129 --> 00:22:19,899
and this is from jQuery Mobile and

601
00:22:17,139 --> 00:22:21,459
jQuery Mobile has a pop-up functionality

602
00:22:19,899 --> 00:22:24,488
so you can just press a button there

603
00:22:21,460 --> 00:22:26,409
will be this overlay pop-up and when you

604
00:22:24,489 --> 00:22:27,820
do this for performance reason they pre

605
00:22:26,409 --> 00:22:29,440
render this pop-up and when you click

606
00:22:27,820 --> 00:22:31,809
the button it will just come to the

607
00:22:29,440 --> 00:22:33,609
front and and not be hidden anymore so

608
00:22:31,809 --> 00:22:35,559
the prerendered is and I guess a lot of

609
00:22:33,609 --> 00:22:37,330
developer asked himself what is this div

610
00:22:35,559 --> 00:22:39,940
element where is this element coming

611
00:22:37,330 --> 00:22:41,499
from in my page so the jquery mobile

612
00:22:39,940 --> 00:22:43,749
developers added a comment into this

613
00:22:41,499 --> 00:22:45,309
development said hey this is the diff

614
00:22:43,749 --> 00:22:48,489
this is the placeholder for the pop-up

615
00:22:45,309 --> 00:22:49,989
that you define with is with the ID but

616
00:22:48,489 --> 00:22:53,289
they just have this comment and print

617
00:22:49,989 --> 00:22:55,629
the ID so in the ID you can just break

618
00:22:53,289 --> 00:22:57,249
out of the HTML comment they use and add

619
00:22:55,629 --> 00:23:01,478
a script behind it and interestingly

620
00:22:57,249 --> 00:23:03,159
there is a they use jQuery to render

621
00:23:01,479 --> 00:23:05,379
HTML so they don't use the native in

622
00:23:03,159 --> 00:23:08,019
HTML but jQuery and when you rendered

623
00:23:05,379 --> 00:23:11,158
HTML with jQuery jQuery will parse your

624
00:23:08,019 --> 00:23:13,840
HTML and then it will instead of just

625
00:23:11,159 --> 00:23:16,299
inner HTML being scripts which would not

626
00:23:13,840 --> 00:23:17,799
work they see oh there is a script so

627
00:23:16,299 --> 00:23:19,720
they create a new script element for you

628
00:23:17,799 --> 00:23:21,299
and then they append this new script

629
00:23:19,720 --> 00:23:24,519
element to the Dom so that it executes

630
00:23:21,299 --> 00:23:27,220
so in this case we have jQuery which is

631
00:23:24,519 --> 00:23:29,200
in your page which you probably trust so

632
00:23:27,220 --> 00:23:30,940
it has a nonce creating a new script and

633
00:23:29,200 --> 00:23:32,980
appending it to the page and that's

634
00:23:30,940 --> 00:23:35,200
exactly by passing script dynamic

635
00:23:32,980 --> 00:23:40,600
cause you have a trusted script that

636
00:23:35,200 --> 00:23:43,600
does it for you okay now let's come to

637
00:23:40,600 --> 00:23:46,149
the most interesting gadgets so about

638
00:23:43,600 --> 00:23:48,549
the ones that bypass whitelist non-space

639
00:23:46,150 --> 00:23:50,320
CSPs so let's assume we have a CSP

640
00:23:48,549 --> 00:23:52,840
policy where we removed all those

641
00:23:50,320 --> 00:23:55,450
insecure key words we removed unsafe

642
00:23:52,840 --> 00:23:57,639
evil unsafe inline and strict dynamic

643
00:23:55,450 --> 00:24:02,290
and we are super secure everything is

644
00:23:57,640 --> 00:24:04,360
great these are the the hardest policies

645
00:24:02,290 --> 00:24:06,730
to circumvent but actually we manage

646
00:24:04,360 --> 00:24:08,799
this abided by using expression puzzles

647
00:24:06,730 --> 00:24:10,840
and before going into details about the

648
00:24:08,799 --> 00:24:14,500
exploits I would first like to explain

649
00:24:10,840 --> 00:24:16,629
how expression pauses work so in our

650
00:24:14,500 --> 00:24:18,700
study we found five libraries that ship

651
00:24:16,630 --> 00:24:21,070
own expression puzzles so basically they

652
00:24:18,700 --> 00:24:22,480
they build the language on top of the

653
00:24:21,070 --> 00:24:24,909
framework a domain-specific language

654
00:24:22,480 --> 00:24:27,880
that allows them to do like syntactic

655
00:24:24,910 --> 00:24:29,440
sugar for developers and they do so

656
00:24:27,880 --> 00:24:30,700
without using eval they are just

657
00:24:29,440 --> 00:24:33,610
interpreting the code they basically

658
00:24:30,700 --> 00:24:35,710
ship interpreters and I want to explain

659
00:24:33,610 --> 00:24:37,510
this with the expression language in our

660
00:24:35,710 --> 00:24:40,030
area so here we can see a very simple

661
00:24:37,510 --> 00:24:41,679
example so if you can you can use an

662
00:24:40,030 --> 00:24:45,190
expression you just start with these

663
00:24:41,679 --> 00:24:46,750
dollar and then curly braces and then

664
00:24:45,190 --> 00:24:49,840
you can just for example say things like

665
00:24:46,750 --> 00:24:51,309
customer dot name and this this is an

666
00:24:49,840 --> 00:24:54,100
expression it's not JavaScript and it

667
00:24:51,309 --> 00:24:56,139
will be interpreted and then the earlier

668
00:24:54,100 --> 00:24:57,850
framework will basically look up with

669
00:24:56,140 --> 00:25:00,309
look is there a customer object in my

670
00:24:57,850 --> 00:25:01,689
scope if yes it will return the customer

671
00:25:00,309 --> 00:25:03,250
object and I will print the name here

672
00:25:01,690 --> 00:25:05,260
for you and the nice thing is usually

673
00:25:03,250 --> 00:25:07,150
you have to wait at abandons here so

674
00:25:05,260 --> 00:25:08,980
once you upgrade update this name

675
00:25:07,150 --> 00:25:10,960
anywhere in your application irelia will

676
00:25:08,980 --> 00:25:12,669
make sure that it also gets updated in

677
00:25:10,960 --> 00:25:15,280
your HTML and that makes it very easy to

678
00:25:12,669 --> 00:25:17,110
to write HTML you don't need to write a

679
00:25:15,280 --> 00:25:21,399
lot of JavaScript code to update a value

680
00:25:17,110 --> 00:25:23,799
so here you can see what happens inside

681
00:25:21,400 --> 00:25:25,780
or raelia so so whenever they depart

682
00:25:23,799 --> 00:25:28,240
such an expression they basically see

683
00:25:25,780 --> 00:25:31,750
that ok this is a nexus to to a variable

684
00:25:28,240 --> 00:25:33,130
or tour to a to a function and then they

685
00:25:31,750 --> 00:25:34,750
will just look this up so they have a

686
00:25:33,130 --> 00:25:36,760
scope object in this case this is

687
00:25:34,750 --> 00:25:40,690
already the customer object and then

688
00:25:36,760 --> 00:25:42,600
they just get get this name put it here

689
00:25:40,690 --> 00:25:45,280
and then they return the property

690
00:25:42,600 --> 00:25:46,389
however with these expression languages

691
00:25:45,280 --> 00:25:48,940
we can do more

692
00:25:46,390 --> 00:25:51,850
so here is an example where we call a

693
00:25:48,940 --> 00:25:53,740
function and this is again this is not

694
00:25:51,850 --> 00:25:55,629
JavaScript this gets interpreted by the

695
00:25:53,740 --> 00:25:56,890
framework and it will basically look up

696
00:25:55,630 --> 00:25:58,780
the say hello function inside the

697
00:25:56,890 --> 00:26:01,600
framework scope and then it will just

698
00:25:58,780 --> 00:26:03,610
call it without using Evo and here we

699
00:26:01,600 --> 00:26:05,350
see how that works so it will it will

700
00:26:03,610 --> 00:26:06,760
look up the distain you'll get a

701
00:26:05,350 --> 00:26:09,389
function reference that it already has

702
00:26:06,760 --> 00:26:11,920
somewhere and then it will apply some

703
00:26:09,390 --> 00:26:13,980
some arguments and we'll just call this

704
00:26:11,920 --> 00:26:17,740
function and that allows us basically to

705
00:26:13,980 --> 00:26:19,570
to execute arbitrary code and I would

706
00:26:17,740 --> 00:26:21,850
like to explain how that works so here

707
00:26:19,570 --> 00:26:23,500
we have a very simple payload in order

708
00:26:21,850 --> 00:26:25,810
India really a framework that calls the

709
00:26:23,500 --> 00:26:27,550
alert function so what we can do in or

710
00:26:25,810 --> 00:26:30,490
radius we can just give an element a

711
00:26:27,550 --> 00:26:33,040
name and we can use the S dot bind which

712
00:26:30,490 --> 00:26:35,470
is again an attribute without semantics

713
00:26:33,040 --> 00:26:38,230
in HTML and then we can just say okay

714
00:26:35,470 --> 00:26:39,520
give me a reference to this element to

715
00:26:38,230 --> 00:26:41,740
my local element and then we have a

716
00:26:39,520 --> 00:26:43,480
reference and we can say okay give me

717
00:26:41,740 --> 00:26:45,550
the owner document of this element which

718
00:26:43,480 --> 00:26:46,960
is the document object and the document

719
00:26:45,550 --> 00:26:49,240
object has a reference to the window

720
00:26:46,960 --> 00:26:50,560
object and in JavaScript already XSS

721
00:26:49,240 --> 00:26:51,940
world when you have whenever you have a

722
00:26:50,560 --> 00:26:53,919
reference to the window object you are

723
00:26:51,940 --> 00:26:55,930
basically you basically one it's like in

724
00:26:53,920 --> 00:26:59,800
the binary world you you want to control

725
00:26:55,930 --> 00:27:01,240
a point a certain pointer in JavaScript

726
00:26:59,800 --> 00:27:02,740
you want to get a reference to window

727
00:27:01,240 --> 00:27:05,980
and then if we have a reference to

728
00:27:02,740 --> 00:27:08,620
window we can just what we can just call

729
00:27:05,980 --> 00:27:10,840
the alert here and that bypasses the

730
00:27:08,620 --> 00:27:12,489
mitigation because because all of the

731
00:27:10,840 --> 00:27:14,199
JavaScript execution is happening in the

732
00:27:12,490 --> 00:27:16,080
already a framework that's that's in the

733
00:27:14,200 --> 00:27:18,580
page that's legitimate code and

734
00:27:16,080 --> 00:27:21,310
basically we can do weird things with it

735
00:27:18,580 --> 00:27:23,350
so for example here we have a cookie

736
00:27:21,310 --> 00:27:25,450
stealer that is completely JavaScript

737
00:27:23,350 --> 00:27:27,219
free so usually when you learn about XSS

738
00:27:25,450 --> 00:27:28,990
you're your first payload that you write

739
00:27:27,220 --> 00:27:31,330
is usually you have a document right and

740
00:27:28,990 --> 00:27:33,010
you write an image tag a URL and then

741
00:27:31,330 --> 00:27:34,929
you do plus document cookie

742
00:27:33,010 --> 00:27:36,940
that's the usual way so here this is the

743
00:27:34,930 --> 00:27:38,620
same but just with expression languages

744
00:27:36,940 --> 00:27:39,670
so instead of inserting a script that

745
00:27:38,620 --> 00:27:42,550
has this document right

746
00:27:39,670 --> 00:27:44,200
you just insert this image with the URL

747
00:27:42,550 --> 00:27:45,700
and then you just tell the already a

748
00:27:44,200 --> 00:27:48,370
framework to fill the cookie in at the

749
00:27:45,700 --> 00:27:50,290
right place so you just say here okay I

750
00:27:48,370 --> 00:27:52,510
take take take the global object which

751
00:27:50,290 --> 00:27:54,790
is window then give the document and

752
00:27:52,510 --> 00:27:56,920
then put the cookie and there is no

753
00:27:54,790 --> 00:27:59,820
JavaScript involved is all like

754
00:27:56,920 --> 00:28:02,280
domain-specific language of Perea

755
00:27:59,820 --> 00:28:03,750
and we can actually do a lot of crazy

756
00:28:02,280 --> 00:28:06,330
things for example let's let's assume

757
00:28:03,750 --> 00:28:08,670
now we have CSP in place and CSP uses

758
00:28:06,330 --> 00:28:10,949
nonces to to validate whether a script

759
00:28:08,670 --> 00:28:12,900
is legitimate or not so we can for

760
00:28:10,950 --> 00:28:14,760
example use expression to just let the

761
00:28:12,900 --> 00:28:16,560
framework insert the nonce for us so

762
00:28:14,760 --> 00:28:19,020
here we have an example we have a script

763
00:28:16,560 --> 00:28:20,310
and that the attacker injected and at

764
00:28:19,020 --> 00:28:22,290
the injection time we don't know the

765
00:28:20,310 --> 00:28:24,330
nonce right so we just add a nonce

766
00:28:22,290 --> 00:28:27,720
attribute and in this nonce attribute we

767
00:28:24,330 --> 00:28:29,610
specify an expression and say eh already

768
00:28:27,720 --> 00:28:31,680
a framework please insert the nonce for

769
00:28:29,610 --> 00:28:33,810
us here and then the aurélia framework

770
00:28:31,680 --> 00:28:35,130
will happily do that and it will go to

771
00:28:33,810 --> 00:28:36,690
the document we will say what is the

772
00:28:35,130 --> 00:28:38,430
current script which is the aurélia

773
00:28:36,690 --> 00:28:40,290
script and we'll just get the nonce from

774
00:28:38,430 --> 00:28:43,940
there and add it to this so you have a

775
00:28:40,290 --> 00:28:46,889
valid script that bypasses the policy

776
00:28:43,940 --> 00:28:48,330
okay so we we looked at these four

777
00:28:46,890 --> 00:28:50,400
different modes so we looked at the

778
00:28:48,330 --> 00:28:51,960
whitelist and non-space modes we use

779
00:28:50,400 --> 00:28:53,100
that looked at unsafe inline and strict

780
00:28:51,960 --> 00:28:56,160
dynamic and what we see here is that

781
00:28:53,100 --> 00:28:58,620
whitelist and nonces are pretty strong

782
00:28:56,160 --> 00:29:01,020
we were only able to bypass in three or

783
00:28:58,620 --> 00:29:03,600
sixteen cases or four of sixteen cases

784
00:29:01,020 --> 00:29:05,220
but white lists have other problems so

785
00:29:03,600 --> 00:29:06,480
we had a paper last year in CCS where we

786
00:29:05,220 --> 00:29:08,640
showed that they are basically insecure

787
00:29:06,480 --> 00:29:11,850
so you shouldn't assume that white lists

788
00:29:08,640 --> 00:29:14,160
are the safest solution in this case but

789
00:29:11,850 --> 00:29:17,310
what we see is that like those unsafe

790
00:29:14,160 --> 00:29:19,440
keywords they dramatically lower the

791
00:29:17,310 --> 00:29:23,129
protection capabilities of a CSP policy

792
00:29:19,440 --> 00:29:25,590
even especially eg strict on any keyword

793
00:29:23,130 --> 00:29:27,270
and when we envision district an in a

794
00:29:25,590 --> 00:29:29,159
keyword in the beginning it was called

795
00:29:27,270 --> 00:29:30,600
unsafe dynamic and then someone in the

796
00:29:29,160 --> 00:29:33,870
standardization committees thought

797
00:29:30,600 --> 00:29:35,699
unsafe dynamic is really a bad word it

798
00:29:33,870 --> 00:29:37,889
should really be called strict dynamic

799
00:29:35,700 --> 00:29:41,940
and I was I think in hindsight a very

800
00:29:37,890 --> 00:29:43,440
bad choice okay so this this was the

801
00:29:41,940 --> 00:29:45,390
study that we did on libraries and

802
00:29:43,440 --> 00:29:46,800
basically we were able from from the

803
00:29:45,390 --> 00:29:48,960
combination of libraries and XSS

804
00:29:46,800 --> 00:29:52,080
mitigations we were able to bypass all

805
00:29:48,960 --> 00:29:55,170
the cases in 53 percent of all the cases

806
00:29:52,080 --> 00:29:56,850
and however we always stop at the first

807
00:29:55,170 --> 00:29:58,650
exploit so whenever we were able to

808
00:29:56,850 --> 00:30:00,030
bypass a mitigation technique we stopped

809
00:29:58,650 --> 00:30:01,920
so there might be multiple other

810
00:30:00,030 --> 00:30:04,680
bypasses and caches in the libraries

811
00:30:01,920 --> 00:30:06,480
that we didn't look at and we found out

812
00:30:04,680 --> 00:30:08,550
that basically the expression based ones

813
00:30:06,480 --> 00:30:10,200
are the most powerful ones but they are

814
00:30:08,550 --> 00:30:12,600
quite effective in bypassing all the

815
00:30:10,200 --> 00:30:14,970
mitigation techniques that we've test

816
00:30:12,600 --> 00:30:17,340
as a next step we conducted an empirical

817
00:30:14,970 --> 00:30:20,040
study and we did that together with si P

818
00:30:17,340 --> 00:30:22,860
and with some of us and Martin Jones and

819
00:30:20,040 --> 00:30:24,899
we wanted to find out whether gadgets

820
00:30:22,860 --> 00:30:26,340
exist also in real-world pages so now we

821
00:30:24,900 --> 00:30:27,750
looked at libraries and these libraries

822
00:30:26,340 --> 00:30:29,370
are very generic they have a lot of

823
00:30:27,750 --> 00:30:31,320
crazy code in there they do a lot of

824
00:30:29,370 --> 00:30:32,939
automatic things so maybe it's different

825
00:30:31,320 --> 00:30:34,919
when we look at developer written code

826
00:30:32,940 --> 00:30:37,140
and all that this is very generic

827
00:30:34,920 --> 00:30:39,390
library code so we again had the same

828
00:30:37,140 --> 00:30:40,650
questions we asked ourselves as how

829
00:30:39,390 --> 00:30:43,140
common are gadgets in real world

830
00:30:40,650 --> 00:30:44,790
applications and how common are they how

831
00:30:43,140 --> 00:30:47,070
effective are they in bypassing XSS

832
00:30:44,790 --> 00:30:49,170
mitigations in real world websites so

833
00:30:47,070 --> 00:30:51,720
what we did is we built an engine that

834
00:30:49,170 --> 00:30:53,610
can detect gadgets and verify them so

835
00:30:51,720 --> 00:30:55,170
how this works is that we where we have

836
00:30:53,610 --> 00:30:57,360
a team tracking engine that we build

837
00:30:55,170 --> 00:30:59,190
into Chrome and Firefox and with this

838
00:30:57,360 --> 00:31:01,469
engine we crawl the Alexa top 5,000

839
00:30:59,190 --> 00:31:04,020
websites and these website might contain

840
00:31:01,470 --> 00:31:06,240
a gadget here and if a gadget is

841
00:31:04,020 --> 00:31:08,430
contained we have a data flow from the

842
00:31:06,240 --> 00:31:10,140
Dom tree into a security sensitive

843
00:31:08,430 --> 00:31:11,280
function so we patch the dormant and the

844
00:31:10,140 --> 00:31:12,990
security sensitive function and

845
00:31:11,280 --> 00:31:15,270
basically what we get out is a data flow

846
00:31:12,990 --> 00:31:17,640
from the Dom to Security Center function

847
00:31:15,270 --> 00:31:19,920
we can then use this data flow to pass

848
00:31:17,640 --> 00:31:23,550
this to an exploit generator and the

849
00:31:19,920 --> 00:31:25,770
exploit generator will generate a gadget

850
00:31:23,550 --> 00:31:28,649
based exploit so here we see it's a

851
00:31:25,770 --> 00:31:30,300
legitimate markup that that contains in

852
00:31:28,650 --> 00:31:32,010
the data text attribute like like our

853
00:31:30,300 --> 00:31:35,490
payload and our payload contains a

854
00:31:32,010 --> 00:31:38,010
function here and we then in check this

855
00:31:35,490 --> 00:31:40,200
gadget back into the page and then we

856
00:31:38,010 --> 00:31:42,840
wait for a function call and if we see

857
00:31:40,200 --> 00:31:44,400
this function call from from for example

858
00:31:42,840 --> 00:31:46,560
a data text attribute we know that there

859
00:31:44,400 --> 00:31:50,070
was a code in the page that upgraded our

860
00:31:46,560 --> 00:31:52,409
data to code execution and we ran this

861
00:31:50,070 --> 00:31:55,800
on the Alexa top 5,000 and we basically

862
00:31:52,410 --> 00:31:57,780
found gadget related data flows and 82%

863
00:31:55,800 --> 00:31:59,790
of all the websites and I assume the

864
00:31:57,780 --> 00:32:02,790
other 18% we're offline or were just

865
00:31:59,790 --> 00:32:05,430
like some static pages I don't have

866
00:32:02,790 --> 00:32:07,860
JavaScript at all and then we ran this

867
00:32:05,430 --> 00:32:09,630
82% of the flows through through our

868
00:32:07,860 --> 00:32:11,280
exploit generation engine and we

869
00:32:09,630 --> 00:32:13,290
basically verified about two hundred

870
00:32:11,280 --> 00:32:14,490
eighty five thousand gadgets in the

871
00:32:13,290 --> 00:32:16,320
Alexa top 5,000

872
00:32:14,490 --> 00:32:18,090
those gadgets are not necessarily unique

873
00:32:16,320 --> 00:32:19,889
there might be duplicates because you

874
00:32:18,090 --> 00:32:21,929
use the same libraries across many

875
00:32:19,890 --> 00:32:24,030
different pages so we looked at the

876
00:32:21,930 --> 00:32:26,690
domains and we verified gadgets in about

877
00:32:24,030 --> 00:32:29,420
20% or 906

878
00:32:26,690 --> 00:32:31,880
however our detection and verification

879
00:32:29,420 --> 00:32:33,290
approach was very very conservative so

880
00:32:31,880 --> 00:32:35,600
we we didn't want to have false

881
00:32:33,290 --> 00:32:37,100
positives so we we bought the zero false

882
00:32:35,600 --> 00:32:39,230
positives rate by accepting a large

883
00:32:37,100 --> 00:32:40,909
number of false negatives and we

884
00:32:39,230 --> 00:32:42,680
actually looked at at a lot of flows

885
00:32:40,910 --> 00:32:46,160
manually I looked at about a hundred and

886
00:32:42,680 --> 00:32:48,650
most of the flows were exploitable so my

887
00:32:46,160 --> 00:32:52,220
assumption is that we are somewhere

888
00:32:48,650 --> 00:32:54,320
between 20% and 82% of the websites that

889
00:32:52,220 --> 00:32:55,940
have gadget and from I just for my gut

890
00:32:54,320 --> 00:33:00,770
feeling I think we are rather at the 80%

891
00:32:55,940 --> 00:33:02,540
and not that the 20% as a next step we

892
00:33:00,770 --> 00:33:04,639
looked at how effective gadgets would be

893
00:33:02,540 --> 00:33:06,379
in bypassing XSS mitigations and this

894
00:33:04,640 --> 00:33:07,790
was kind of tricky because most of

895
00:33:06,380 --> 00:33:09,860
websites don't have these mitigations

896
00:33:07,790 --> 00:33:11,240
and we cannot just deploy them onto the

897
00:33:09,860 --> 00:33:13,550
web applications because we would break

898
00:33:11,240 --> 00:33:14,750
the applications we could also not not

899
00:33:13,550 --> 00:33:16,639
not say if there's a Web Application

900
00:33:14,750 --> 00:33:20,420
Firewall for example because it's hidden

901
00:33:16,640 --> 00:33:22,130
and so on so these are just theoretical

902
00:33:20,420 --> 00:33:23,900
numbers where we looked at the number of

903
00:33:22,130 --> 00:33:26,660
data flows we didn't actually try to

904
00:33:23,900 --> 00:33:28,910
exploit things and we first looked at

905
00:33:26,660 --> 00:33:31,490
HTML sanitizers and for example what we

906
00:33:28,910 --> 00:33:34,370
saw is that 60% of all websites contain

907
00:33:31,490 --> 00:33:36,110
a data flow from a data attribute to a

908
00:33:34,370 --> 00:33:37,790
security sensitive function and by

909
00:33:36,110 --> 00:33:40,459
default most sanitizers allow data

910
00:33:37,790 --> 00:33:42,379
attributes so we believe that in most

911
00:33:40,460 --> 00:33:44,900
cases sanitizers can be can be

912
00:33:42,380 --> 00:33:46,910
supplemented as a second step we then

913
00:33:44,900 --> 00:33:49,130
looked at access filters and buffs and

914
00:33:46,910 --> 00:33:50,780
CSP unsafe eval and we just wanted to

915
00:33:49,130 --> 00:33:53,450
know how many eval base data flows there

916
00:33:50,780 --> 00:33:56,840
are in websites and about every every

917
00:33:53,450 --> 00:34:00,650
second website has a data flow from the

918
00:33:56,840 --> 00:34:04,100
Dom into Evo and last but not least we

919
00:34:00,650 --> 00:34:06,530
looked at CSP strict dynamic and we're

920
00:34:04,100 --> 00:34:09,440
trusted scripts create other scripts and

921
00:34:06,530 --> 00:34:11,960
we found that about 73 percent of all

922
00:34:09,440 --> 00:34:14,600
the sites have a data flow that results

923
00:34:11,960 --> 00:34:17,659
in a script tag being appended to the

924
00:34:14,600 --> 00:34:19,520
Dom by a legitimate script which is

925
00:34:17,659 --> 00:34:21,469
pretty a pretty large number and which

926
00:34:19,520 --> 00:34:24,070
surprised us and this is mainly due to

927
00:34:21,469 --> 00:34:29,239
jQuery because of this weird behavior of

928
00:34:24,070 --> 00:34:31,100
parsing text and appending scripts okay

929
00:34:29,239 --> 00:34:32,629
so we did this two studies and what we

930
00:34:31,100 --> 00:34:33,889
see here is that these script caches are

931
00:34:32,630 --> 00:34:34,850
everywhere they are in all modern

932
00:34:33,889 --> 00:34:37,668
libraries they are in almost all

933
00:34:34,850 --> 00:34:39,139
applications and so we thought what can

934
00:34:37,668 --> 00:34:39,980
we do about it so we have these gadgets

935
00:34:39,139 --> 00:34:41,690
and XSS

936
00:34:39,980 --> 00:34:44,600
education doesn't don't seem to work and

937
00:34:41,690 --> 00:34:46,010
so we asked ourselves what is the what

938
00:34:44,600 --> 00:34:48,319
are the root causes for it is this and

939
00:34:46,010 --> 00:34:50,270
when we look at technology we see that

940
00:34:48,320 --> 00:34:52,310
vulnerabilities are our technology

941
00:34:50,270 --> 00:34:54,020
dependent so we already had this case

942
00:34:52,310 --> 00:34:56,810
today the for example if you use

943
00:34:54,020 --> 00:34:59,240
parameterize queries you you don't have

944
00:34:56,810 --> 00:35:01,900
sequel injection if you use if you use

945
00:34:59,240 --> 00:35:03,950
memory save languages you don't have

946
00:35:01,900 --> 00:35:06,200
buffer overflows and memory corruption

947
00:35:03,950 --> 00:35:08,868
blocks and the same is true for XSS and

948
00:35:06,200 --> 00:35:11,240
the problem with XSS itself is that XSS

949
00:35:08,869 --> 00:35:14,210
is is core to the web platform right we

950
00:35:11,240 --> 00:35:16,399
create this we use HTTP and HTML so we

951
00:35:14,210 --> 00:35:18,260
create a big string on the server side

952
00:35:16,400 --> 00:35:20,510
we sent this string to the browser then

953
00:35:18,260 --> 00:35:22,850
we execute the string as code then at

954
00:35:20,510 --> 00:35:24,560
runtime we create new strings we pass

955
00:35:22,850 --> 00:35:26,000
those two inner HTML and eval and

956
00:35:24,560 --> 00:35:29,390
everything in the web is string based

957
00:35:26,000 --> 00:35:31,340
and that is actually the reason why we

958
00:35:29,390 --> 00:35:33,770
have xs/s in the web and we have to say

959
00:35:31,340 --> 00:35:36,200
that XSS is extremely easy to introduce

960
00:35:33,770 --> 00:35:38,990
it's extremely hard to find

961
00:35:36,200 --> 00:35:40,609
in an application and it's one of the

962
00:35:38,990 --> 00:35:43,549
most severe client-side vulnerabilities

963
00:35:40,609 --> 00:35:45,770
that we have and that's and the root

964
00:35:43,550 --> 00:35:47,390
cause is how the web platform works and

965
00:35:45,770 --> 00:35:50,240
everything about it we haven't changed

966
00:35:47,390 --> 00:35:51,890
the web platform in 25 years so the the

967
00:35:50,240 --> 00:35:54,080
Dom API is that we use are still the

968
00:35:51,890 --> 00:35:56,180
same that we had we introduced 20 years

969
00:35:54,080 --> 00:35:57,319
ago in the 90s and so on and so forth

970
00:35:56,180 --> 00:35:59,509
and we're trying to dance around the

971
00:35:57,320 --> 00:36:02,090
problem of XSS and try to create all

972
00:35:59,510 --> 00:36:02,660
these mitigations and layers on top but

973
00:36:02,090 --> 00:36:04,760
we're never

974
00:36:02,660 --> 00:36:06,259
tackling the root cause and I think we

975
00:36:04,760 --> 00:36:08,390
don't we cannot take tackle the root

976
00:36:06,260 --> 00:36:10,250
cause for all of XSS but we're trying to

977
00:36:08,390 --> 00:36:12,529
do that photonics is us because we can

978
00:36:10,250 --> 00:36:14,810
probably not change the HTTP protocol to

979
00:36:12,530 --> 00:36:17,240
do not use strings anymore that that

980
00:36:14,810 --> 00:36:19,220
would be too crazy but we can do we can

981
00:36:17,240 --> 00:36:21,410
solve subsets of the problem and how we

982
00:36:19,220 --> 00:36:25,459
want to do that is that we are trying to

983
00:36:21,410 --> 00:36:28,730
Inc and we want to create a type system

984
00:36:25,460 --> 00:36:31,730
for the Dom so right now the Dom is

985
00:36:28,730 --> 00:36:33,710
based on strings and here's an intent to

986
00:36:31,730 --> 00:36:36,020
ship so we already have a first version

987
00:36:33,710 --> 00:36:39,050
in Chrome Canary and what we are trying

988
00:36:36,020 --> 00:36:40,609
to do here is we are trying to replace

989
00:36:39,050 --> 00:36:43,030
all the string based API is that we have

990
00:36:40,609 --> 00:36:46,130
in browsers in HTML evo document right

991
00:36:43,030 --> 00:36:47,990
and on script of source and so on and we

992
00:36:46,130 --> 00:36:49,670
will replace these with type api's and

993
00:36:47,990 --> 00:36:52,100
these typed api's will not accept

994
00:36:49,670 --> 00:36:53,570
strings but types for example a trusted

995
00:36:52,100 --> 00:36:56,509
HTML type i trust

996
00:36:53,570 --> 00:36:58,250
the script type trusted URL type and the

997
00:36:56,510 --> 00:37:00,560
only way you can create such a type is

998
00:36:58,250 --> 00:37:02,750
through secure means so you can either

999
00:37:00,560 --> 00:37:05,000
use a secure builder or you can use a

1000
00:37:02,750 --> 00:37:08,090
sanitizer or other secure ways of

1001
00:37:05,000 --> 00:37:10,790
creating those types and by doing that

1002
00:37:08,090 --> 00:37:12,530
we get guarantees a developer cannot

1003
00:37:10,790 --> 00:37:13,820
introduce XSS into an application

1004
00:37:12,530 --> 00:37:15,980
because all the ways you can get this

1005
00:37:13,820 --> 00:37:18,830
type is safe and if you only assign

1006
00:37:15,980 --> 00:37:20,180
allow this as assigning of types and

1007
00:37:18,830 --> 00:37:21,470
then your application is safe as well

1008
00:37:20,180 --> 00:37:22,700
you don't even need to look at the

1009
00:37:21,470 --> 00:37:25,220
application anymore and here's a very

1010
00:37:22,700 --> 00:37:26,990
simple example for example here we we

1011
00:37:25,220 --> 00:37:29,660
have a Dom element that's called foo and

1012
00:37:26,990 --> 00:37:32,720
we create a trusted type and we created

1013
00:37:29,660 --> 00:37:35,060
for example by a sanitization and then

1014
00:37:32,720 --> 00:37:36,980
we assign this to in HTML and that would

1015
00:37:35,060 --> 00:37:38,840
be fine because we have a type we assign

1016
00:37:36,980 --> 00:37:40,550
it to in HTML and now we will have an

1017
00:37:38,840 --> 00:37:42,740
enforcement mode that throws an

1018
00:37:40,550 --> 00:37:44,210
exception whenever you try to assign a

1019
00:37:42,740 --> 00:37:45,950
string to an age you know

1020
00:37:44,210 --> 00:37:47,240
so you assign a string here that would

1021
00:37:45,950 --> 00:37:49,189
just throw an exception I would not be

1022
00:37:47,240 --> 00:37:52,370
accept and that's how we can kill

1023
00:37:49,190 --> 00:37:55,070
Dominic success however we have a couple

1024
00:37:52,370 --> 00:37:57,410
of huge challenges and they are mainly

1025
00:37:55,070 --> 00:37:59,390
in the not in the security part but more

1026
00:37:57,410 --> 00:38:00,799
in the usability part so I think we can

1027
00:37:59,390 --> 00:38:03,049
create a perfect system that is

1028
00:38:00,800 --> 00:38:05,120
perfectly secure and no one would use it

1029
00:38:03,050 --> 00:38:07,070
or we couldn't use the perfect system

1030
00:38:05,120 --> 00:38:09,020
that everyone would use but that is not

1031
00:38:07,070 --> 00:38:10,940
secure and that's where we are trying to

1032
00:38:09,020 --> 00:38:12,980
right now working on getting the right

1033
00:38:10,940 --> 00:38:14,300
balance so we have two big problems the

1034
00:38:12,980 --> 00:38:16,910
first one is is it's backwards

1035
00:38:14,300 --> 00:38:18,080
compatibility so how do we deal with all

1036
00:38:16,910 --> 00:38:19,609
the browsers that don't support these

1037
00:38:18,080 --> 00:38:21,920
types and I think we have a good story

1038
00:38:19,610 --> 00:38:23,480
there we have a polyfill that basically

1039
00:38:21,920 --> 00:38:25,010
creates this typed in other browsers so

1040
00:38:23,480 --> 00:38:26,450
you could today you could use trusted

1041
00:38:25,010 --> 00:38:28,910
types in your applications if you want

1042
00:38:26,450 --> 00:38:30,799
and we are actually using them in a lot

1043
00:38:28,910 --> 00:38:32,390
of application and I know that I think

1044
00:38:30,800 --> 00:38:35,330
github is using them as well and

1045
00:38:32,390 --> 00:38:38,270
Facebook is also using similar concepts

1046
00:38:35,330 --> 00:38:40,340
type based systems to prevent XSS and

1047
00:38:38,270 --> 00:38:42,230
they are pretty successful in doing so

1048
00:38:40,340 --> 00:38:43,700
but the much larger problem that we are

1049
00:38:42,230 --> 00:38:46,880
currently tackling our unsafe

1050
00:38:43,700 --> 00:38:48,700
conversions and oh I need to hurry bit

1051
00:38:46,880 --> 00:38:50,750
yes oh

1052
00:38:48,700 --> 00:38:53,569
unsafe conversions so we have a lot of

1053
00:38:50,750 --> 00:38:54,800
applications that requires some form of

1054
00:38:53,570 --> 00:38:56,480
unsafe conversions where you have a

1055
00:38:54,800 --> 00:38:58,070
seemingly untrusted script but out of

1056
00:38:56,480 --> 00:39:00,500
the context you know this is secure in

1057
00:38:58,070 --> 00:39:02,810
this in this context so please make it

1058
00:39:00,500 --> 00:39:05,870
secure and we are currently thinking

1059
00:39:02,810 --> 00:39:07,119
about different ways to to enable these

1060
00:39:05,870 --> 00:39:10,210
unsafe conversions

1061
00:39:07,119 --> 00:39:11,890
and there here's a call to arms if

1062
00:39:10,210 --> 00:39:14,200
you're a JavaScript developer if you're

1063
00:39:11,890 --> 00:39:15,848
developing JavaScript libraries or if

1064
00:39:14,200 --> 00:39:18,069
you're just interested in working on an

1065
00:39:15,849 --> 00:39:20,650
exciting new web platform feature then

1066
00:39:18,069 --> 00:39:25,808
just reach out to us Y by Twitter by

1067
00:39:20,650 --> 00:39:28,440
email or just today and try to help okay

1068
00:39:25,809 --> 00:39:30,999
with this I would like to summarize and

1069
00:39:28,440 --> 00:39:33,249
conclude so what I showed you today is

1070
00:39:30,999 --> 00:39:34,988
that XSS mitigations work by blocking

1071
00:39:33,249 --> 00:39:37,259
attacks and not by preventing applique

1072
00:39:34,989 --> 00:39:40,420
venting the bugs

1073
00:39:37,259 --> 00:39:41,849
however we we see that script so called

1074
00:39:40,420 --> 00:39:43,839
script caches can be used to circumvent

1075
00:39:41,849 --> 00:39:46,180
medications and script gadgets are

1076
00:39:43,839 --> 00:39:48,190
legitimate pieces of JavaScript code in

1077
00:39:46,180 --> 00:39:51,999
an application that upgrade a legitimate

1078
00:39:48,190 --> 00:39:54,069
HTML to script execution and what we saw

1079
00:39:51,999 --> 00:39:55,479
is that script script gadgets are

1080
00:39:54,069 --> 00:39:58,749
prevalent in all libraries and all

1081
00:39:55,479 --> 00:40:00,430
applications out there and they can they

1082
00:39:58,749 --> 00:40:03,609
are very effective in bypassing all the

1083
00:40:00,430 --> 00:40:05,259
XSS mitigations and what we see is that

1084
00:40:03,609 --> 00:40:08,229
the web platform hasn't changed in in

1085
00:40:05,259 --> 00:40:09,670
about 25 years and we think that in

1086
00:40:08,229 --> 00:40:12,069
order to address this problem we need to

1087
00:40:09,670 --> 00:40:13,930
change the route or we need to era dig

1088
00:40:12,069 --> 00:40:15,880
the root cause and make the web platform

1089
00:40:13,930 --> 00:40:17,739
secure by default so that developers

1090
00:40:15,880 --> 00:40:19,809
just cannot introduce bugs because

1091
00:40:17,739 --> 00:40:22,059
trainings and guidelines are nice but

1092
00:40:19,809 --> 00:40:24,009
they often don't don't prevent your

1093
00:40:22,059 --> 00:40:26,739
developers from from accidentally

1094
00:40:24,009 --> 00:40:29,259
screwing up and in order to do so we

1095
00:40:26,739 --> 00:40:32,019
introduced this new type system that we

1096
00:40:29,259 --> 00:40:33,369
want to build into browsers and we are

1097
00:40:32,019 --> 00:40:35,410
still discussing with browser vendors

1098
00:40:33,369 --> 00:40:38,049
and and and other people to get this

1099
00:40:35,410 --> 00:40:39,640
into other browsers as well but the idea

1100
00:40:38,049 --> 00:40:41,049
is that when when we get this in

1101
00:40:39,640 --> 00:40:43,180
everywhere and when developers use the

1102
00:40:41,049 --> 00:40:46,960
system we can basically fight one one

1103
00:40:43,180 --> 00:40:49,719
full class of this I would like to thank

1104
00:40:46,960 --> 00:40:52,539
you for your attention and I don't think

1105
00:40:49,719 --> 00:40:58,140
we have time for questions but thank you

1106
00:40:52,539 --> 00:40:58,140
Sebastien thank you

1107
00:40:58,480 --> 00:41:18,440
one urgent quick question I think it's

1108
00:41:14,900 --> 00:41:20,420
very interesting what he said but if I

1109
00:41:18,440 --> 00:41:23,150
understood I didn't mention angular 2

1110
00:41:20,420 --> 00:41:25,700
and type in under 4 and and so on right

1111
00:41:23,150 --> 00:41:29,030
yes type phrases angle 4 is typescript

1112
00:41:25,700 --> 00:41:31,790
right so the the mythology you are

1113
00:41:29,030 --> 00:41:34,040
imposing to fix the problem it's kind of

1114
00:41:31,790 --> 00:41:35,630
the same that they already use yes

1115
00:41:34,040 --> 00:41:37,880
angular is using that concept already

1116
00:41:35,630 --> 00:41:39,619
right but I think it should be in the

1117
00:41:37,880 --> 00:41:40,910
platform should not be limited to big

1118
00:41:39,619 --> 00:41:44,030
frameworks because we see a lot of

1119
00:41:40,910 --> 00:41:46,609
crappy framework said it cannot afford a

1120
00:41:44,030 --> 00:41:49,160
team of developers implementing and I

1121
00:41:46,609 --> 00:41:52,009
don't know their own template compilers

1122
00:41:49,160 --> 00:41:55,040
and so on I think that should be a

1123
00:41:52,010 --> 00:41:56,420
platform feature but yeah we also didn't

1124
00:41:55,040 --> 00:41:57,799
look at angular 2 because at the time we

1125
00:41:56,420 --> 00:42:03,619
started this angular 2 was pretty new

1126
00:41:57,799 --> 00:42:05,720
and so we looked at angular 1 only ok at

1127
00:42:03,619 --> 00:42:07,069
the time he's here all day so in the I

1128
00:42:05,720 --> 00:42:07,990
think the next break you will will be

1129
00:42:07,069 --> 00:42:10,340
very busy

1130
00:42:07,990 --> 00:42:15,448
Thank You Sebastian

1131
00:42:10,340 --> 00:42:15,449
[Applause]

