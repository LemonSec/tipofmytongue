1
00:00:00,530 --> 00:00:02,590
you

2
00:00:03,610 --> 00:00:10,400
all right good morning everyone i'm ben

3
00:00:06,560 --> 00:00:12,739
pick and this is Jack Menino we are

4
00:00:10,400 --> 00:00:14,660
going through to discuss the cloud

5
00:00:12,740 --> 00:00:16,670
native infrastructure and how things

6
00:00:14,660 --> 00:00:19,220
have changed and some of the security

7
00:00:16,670 --> 00:00:20,869
pitfalls that you can go through that

8
00:00:19,220 --> 00:00:24,410
you need to address that warrant in

9
00:00:20,869 --> 00:00:26,350
traditional pipelines so if you want to

10
00:00:24,410 --> 00:00:29,570
move us along

11
00:00:26,350 --> 00:00:32,480
um so I'm Jack Menino I've been working

12
00:00:29,570 --> 00:00:33,949
at invision since 2009 sometime in

13
00:00:32,479 --> 00:00:35,839
between the rest my work I get to write

14
00:00:33,949 --> 00:00:38,360
a little bit of code do most things in

15
00:00:35,839 --> 00:00:43,610
Scala and go these days any Scala

16
00:00:38,360 --> 00:00:45,890
programmers in there okay good stuff I

17
00:00:43,610 --> 00:00:47,720
do think a lot that things about scale

18
00:00:45,890 --> 00:00:50,059
these days I worked for years doing

19
00:00:47,720 --> 00:00:51,589
penetration testing it's not

20
00:00:50,059 --> 00:00:52,879
particularly fun to find bugs anymore

21
00:00:51,589 --> 00:00:55,040
I'm definitely more inch and as part of

22
00:00:52,879 --> 00:00:56,629
my career in solving things and making

23
00:00:55,040 --> 00:01:04,400
it damn near impossible for attackers to

24
00:00:56,629 --> 00:01:06,259
get in Thanks and all right and I am Ben

25
00:01:04,400 --> 00:01:08,659
pick I'm an application security

26
00:01:06,260 --> 00:01:11,990
consultant with envision and my former

27
00:01:08,659 --> 00:01:14,119
life I was also a agile and DevOps

28
00:01:11,990 --> 00:01:16,850
consultant so I would go in assess

29
00:01:14,119 --> 00:01:18,320
various teams and give them

30
00:01:16,850 --> 00:01:21,678
recommendations for how they can improve

31
00:01:18,320 --> 00:01:25,309
so some of the lessons learned from that

32
00:01:21,679 --> 00:01:27,049
are that we're applying in this

33
00:01:25,310 --> 00:01:29,840
presentation is you need to really just

34
00:01:27,049 --> 00:01:32,179
take full advantage of the systems that

35
00:01:29,840 --> 00:01:34,399
you're using and make sure that they

36
00:01:32,179 --> 00:01:38,420
integrate properly within your pipeline

37
00:01:34,399 --> 00:01:39,679
and more recently within the cloud so

38
00:01:38,420 --> 00:01:42,109
this right here is your traditional

39
00:01:39,679 --> 00:01:46,460
pipeline you can see in the lower left

40
00:01:42,109 --> 00:01:48,589
your developer they are committing their

41
00:01:46,460 --> 00:01:51,408
code and to get it moves in a very

42
00:01:48,590 --> 00:01:53,899
linear fashion through each of the

43
00:01:51,409 --> 00:01:57,259
various phases of your environment so

44
00:01:53,899 --> 00:01:59,119
from dev to integration to staging to

45
00:01:57,259 --> 00:02:01,899
production and you can see this very

46
00:01:59,119 --> 00:02:03,889
very linear fashion of your developer

47
00:02:01,899 --> 00:02:06,350
committing the code and it going

48
00:02:03,889 --> 00:02:08,990
directly into production now at each

49
00:02:06,350 --> 00:02:11,120
stage there are more more tests so say

50
00:02:08,990 --> 00:02:13,849
within dev you'll look at the source

51
00:02:11,120 --> 00:02:15,860
code and you will just really really try

52
00:02:13,849 --> 00:02:17,989
and get fast feedback

53
00:02:15,860 --> 00:02:19,400
the typical rule is you know five

54
00:02:17,990 --> 00:02:20,780
minutes for the developer to go get a

55
00:02:19,400 --> 00:02:23,600
cup of coffee before they can know

56
00:02:20,780 --> 00:02:26,300
whether or not their code changes broke

57
00:02:23,600 --> 00:02:27,590
the belt and then as you get further and

58
00:02:26,300 --> 00:02:29,900
further towards production there are

59
00:02:27,590 --> 00:02:32,690
much more in-depth tests that get run so

60
00:02:29,900 --> 00:02:37,250
your performance tests your dynamic test

61
00:02:32,690 --> 00:02:40,640
etc etc etc now this is your cloud

62
00:02:37,250 --> 00:02:42,770
native pipeline again it is a flow from

63
00:02:40,640 --> 00:02:44,720
left to right in production you can see

64
00:02:42,770 --> 00:02:47,510
a lot of the same tool sort of carry

65
00:02:44,720 --> 00:02:50,180
over so you have Jenkins you are working

66
00:02:47,510 --> 00:02:53,780
within git and this is a much more

67
00:02:50,180 --> 00:02:57,490
infrastructure aware environment so when

68
00:02:53,780 --> 00:02:59,720
you are deploying into dev the the

69
00:02:57,490 --> 00:03:04,850
pipeline itself is aware of your

70
00:02:59,720 --> 00:03:06,410
container registry and it's updating as

71
00:03:04,850 --> 00:03:09,920
needed or as you are designing within

72
00:03:06,410 --> 00:03:11,210
your pipeline and this is using git UPS

73
00:03:09,920 --> 00:03:13,070
which I'll go through in a couple of

74
00:03:11,210 --> 00:03:15,260
slides but just wanted to address that

75
00:03:13,070 --> 00:03:17,030
term here so it's using git apps to

76
00:03:15,260 --> 00:03:20,660
manage your infrastructure and your code

77
00:03:17,030 --> 00:03:22,459
and it's using declarative statements

78
00:03:20,660 --> 00:03:28,730
throughout the process to define exactly

79
00:03:22,459 --> 00:03:30,410
what is going on cool it's just a really

80
00:03:28,730 --> 00:03:33,320
quick slide to highlight some of our key

81
00:03:30,410 --> 00:03:34,780
summaries you have also on the left with

82
00:03:33,320 --> 00:03:37,790
your traditional pipelines and then

83
00:03:34,780 --> 00:03:40,640
new-school which is your cloud native

84
00:03:37,790 --> 00:03:45,220
environments so some of my experience

85
00:03:40,640 --> 00:03:49,489
with inconsistent environments excuse me

86
00:03:45,220 --> 00:03:52,760
you will have your gold image that gets

87
00:03:49,490 --> 00:03:56,560
produced by your systems admin or your

88
00:03:52,760 --> 00:03:59,690
operations teams and over time that

89
00:03:56,560 --> 00:04:05,440
developers tend to make changes to so

90
00:03:59,690 --> 00:04:07,790
you'll have new new dependencies new

91
00:04:05,440 --> 00:04:09,890
configuration settings within each of

92
00:04:07,790 --> 00:04:12,769
the various development teams and what

93
00:04:09,890 --> 00:04:16,339
ultimately happens is those sort of

94
00:04:12,770 --> 00:04:18,560
cascade out until the goal the devoman

95
00:04:16,339 --> 00:04:22,039
no longer looks like the gold Prada

96
00:04:18,560 --> 00:04:24,260
Magette causes a lot of issues where you

97
00:04:22,040 --> 00:04:27,919
are not necessarily finding bugs until

98
00:04:24,260 --> 00:04:29,630
they are in production and looking at

99
00:04:27,919 --> 00:04:33,740
some of the Robeck process for

100
00:04:29,630 --> 00:04:35,659
those bugs well when you are in

101
00:04:33,740 --> 00:04:37,940
production a lot of times you won't find

102
00:04:35,660 --> 00:04:40,550
out about issues until your helpdesk

103
00:04:37,940 --> 00:04:42,650
comes in with massive amounts of calls

104
00:04:40,550 --> 00:04:46,490
and then in traditional pipelines there

105
00:04:42,650 --> 00:04:49,849
is a large process that's needed which

106
00:04:46,490 --> 00:04:54,080
costs a lot of money to then roll back

107
00:04:49,850 --> 00:04:55,850
all those changes whereas in cloud cloud

108
00:04:54,080 --> 00:04:58,400
native environments you have what's

109
00:04:55,850 --> 00:05:02,510
called canary bills where you are able

110
00:04:58,400 --> 00:05:06,859
to set up you with your load balancer

111
00:05:02,510 --> 00:05:09,950
and say I want 10% of the people to our

112
00:05:06,860 --> 00:05:11,600
site to be redirected to the updated

113
00:05:09,950 --> 00:05:13,789
version whereas and then I percent will

114
00:05:11,600 --> 00:05:16,640
be going to the known stable version and

115
00:05:13,790 --> 00:05:19,940
then of those people that get redirected

116
00:05:16,640 --> 00:05:22,729
through your load balancer they can say

117
00:05:19,940 --> 00:05:24,890
well you know of those requests that

118
00:05:22,730 --> 00:05:28,010
come through 5% of them are getting 500

119
00:05:24,890 --> 00:05:30,710
errors so based on the declarative rules

120
00:05:28,010 --> 00:05:33,080
that we have we set that to know that

121
00:05:30,710 --> 00:05:35,750
the updated version is no longer stable

122
00:05:33,080 --> 00:05:38,240
so then it redirects everyone back to

123
00:05:35,750 --> 00:05:41,120
the original updated version the sorry

124
00:05:38,240 --> 00:05:42,890
the original known good state and it

125
00:05:41,120 --> 00:05:45,530
kills the containers for the updated

126
00:05:42,890 --> 00:05:47,270
versions so cloud name can automatically

127
00:05:45,530 --> 00:05:53,479
handle that based on the rules that you

128
00:05:47,270 --> 00:05:55,669
have declared through canary builds all

129
00:05:53,480 --> 00:05:58,070
right and then I sort of mentioned this

130
00:05:55,670 --> 00:05:59,420
before but everything is defined within

131
00:05:58,070 --> 00:06:03,500
your infrastructure within your source

132
00:05:59,420 --> 00:06:05,480
code and get and so you need to manage

133
00:06:03,500 --> 00:06:08,750
your environments and make sure that

134
00:06:05,480 --> 00:06:14,060
that is well tracked well-documented and

135
00:06:08,750 --> 00:06:17,240
you want to ensure that you are that you

136
00:06:14,060 --> 00:06:23,330
are properly managing your branches so

137
00:06:17,240 --> 00:06:24,640
where does security fall in well you

138
00:06:23,330 --> 00:06:26,810
want to make sure that you're using

139
00:06:24,640 --> 00:06:30,039
multi-factor authentication so you can

140
00:06:26,810 --> 00:06:32,450
specifically tie an individual user to

141
00:06:30,040 --> 00:06:35,000
sorry you want to is specifically tie an

142
00:06:32,450 --> 00:06:36,920
individual to their identity then you

143
00:06:35,000 --> 00:06:38,630
want to make sure that they aren't

144
00:06:36,920 --> 00:06:40,010
committing anything without signing it

145
00:06:38,630 --> 00:06:42,100
so you want to ensure that all the add

146
00:06:40,010 --> 00:06:44,500
stations get signed for that for

147
00:06:42,100 --> 00:06:47,590
it's and you want to enable branch

148
00:06:44,500 --> 00:06:50,050
restrictions within the production so

149
00:06:47,590 --> 00:06:52,630
that one single developer is not only

150
00:06:50,050 --> 00:06:55,360
one single developer or a single team is

151
00:06:52,630 --> 00:06:57,730
not able to commit or push changes into

152
00:06:55,360 --> 00:07:03,160
the master branch which becomes your

153
00:06:57,730 --> 00:07:05,260
production and that's cool

154
00:07:03,160 --> 00:07:08,530
so one of the tools that you are using

155
00:07:05,260 --> 00:07:12,010
within cloud native is spinnaker which

156
00:07:08,530 --> 00:07:19,539
handles all of your communications now

157
00:07:12,010 --> 00:07:21,010
this tool this tool is used for your for

158
00:07:19,540 --> 00:07:23,860
your communication so it's very very

159
00:07:21,010 --> 00:07:25,659
important that it is properly configured

160
00:07:23,860 --> 00:07:28,210
and set up and much like your

161
00:07:25,660 --> 00:07:30,730
applications using micro services this

162
00:07:28,210 --> 00:07:32,469
follows the same process so you have

163
00:07:30,730 --> 00:07:35,770
gate you have cloud driver

164
00:07:32,470 --> 00:07:37,950
Igor Fiat and halyard now halyard is the

165
00:07:35,770 --> 00:07:41,440
configuration management service which

166
00:07:37,950 --> 00:07:43,450
configures all the other services Fiat

167
00:07:41,440 --> 00:07:45,280
is the authorization service which

168
00:07:43,450 --> 00:07:47,860
checks to make sure whether or not

169
00:07:45,280 --> 00:07:51,219
something has say service level access

170
00:07:47,860 --> 00:07:53,890
and queries it before running anything

171
00:07:51,220 --> 00:07:56,200
important then you have a gate which is

172
00:07:53,890 --> 00:08:00,400
the API manager it's sorry the API

173
00:07:56,200 --> 00:08:05,010
gateway itself and I believe that's

174
00:08:00,400 --> 00:08:07,479
everything that's not to Jack cool

175
00:08:05,010 --> 00:08:10,780
so one of the things we have to think

176
00:08:07,480 --> 00:08:12,790
about in our kind of updated workflows

177
00:08:10,780 --> 00:08:15,760
is where do we actually derive any value

178
00:08:12,790 --> 00:08:17,980
from the tests we run so before we push

179
00:08:15,760 --> 00:08:19,810
and deploy things there's different

180
00:08:17,980 --> 00:08:21,970
things we're gonna see after we push

181
00:08:19,810 --> 00:08:23,530
things to in environments there's

182
00:08:21,970 --> 00:08:25,660
different integration tests we're gonna

183
00:08:23,530 --> 00:08:27,159
see different things that you know we

184
00:08:25,660 --> 00:08:29,680
can't necessarily blame the developers

185
00:08:27,160 --> 00:08:31,240
when somebody that runs cloud

186
00:08:29,680 --> 00:08:33,490
infrastructure makes like an s3 bucket

187
00:08:31,240 --> 00:08:35,380
public right so there's things we can

188
00:08:33,490 --> 00:08:36,909
verify before we deploy but then there's

189
00:08:35,380 --> 00:08:38,409
you know certain things that can happen

190
00:08:36,909 --> 00:08:40,539
after deployment that we want to know

191
00:08:38,409 --> 00:08:41,500
about right and those are unfortunately

192
00:08:40,539 --> 00:08:44,439
things that we're not going to get out

193
00:08:41,500 --> 00:08:46,930
of the way before we push so it is

194
00:08:44,440 --> 00:08:49,510
important to get as much telemetry as we

195
00:08:46,930 --> 00:08:53,109
possibly can out of all the tools we use

196
00:08:49,510 --> 00:08:55,870
and all the different events we generate

197
00:08:53,110 --> 00:08:59,350
so if we look at for example spinnaker

198
00:08:55,870 --> 00:09:00,910
handles deployment not necessarily the

199
00:08:59,350 --> 00:09:02,800
integration and build side so you'll

200
00:09:00,910 --> 00:09:05,110
generally hook something like spinnaker

201
00:09:02,800 --> 00:09:07,569
up to Jenkins I'm using web hooks and

202
00:09:05,110 --> 00:09:09,310
stuff like that so all your systems are

203
00:09:07,570 --> 00:09:11,350
definitely very active in talking to

204
00:09:09,310 --> 00:09:12,939
each other and the feedback loop is

205
00:09:11,350 --> 00:09:15,520
really important right because we can

206
00:09:12,940 --> 00:09:18,030
use that feedback to help our systems

207
00:09:15,520 --> 00:09:21,880
either recover in intelligent ways or

208
00:09:18,030 --> 00:09:24,339
let us know what's going on so there's

209
00:09:21,880 --> 00:09:26,680
the whole world of chaos testing right

210
00:09:24,340 --> 00:09:28,960
which is what can go week what can go

211
00:09:26,680 --> 00:09:30,459
wrong and ultimately you know how do we

212
00:09:28,960 --> 00:09:32,410
break our applications in the worst way

213
00:09:30,460 --> 00:09:34,720
possible the stuff I'm talking about

214
00:09:32,410 --> 00:09:37,089
more today is verification right so

215
00:09:34,720 --> 00:09:39,340
verifying that certain preconditions are

216
00:09:37,090 --> 00:09:41,740
in place before you go in live with code

217
00:09:39,340 --> 00:09:45,760
so more on the verification side on then

218
00:09:41,740 --> 00:09:48,850
experimentation side so Jenkins X is

219
00:09:45,760 --> 00:09:52,930
another pretty popular cloud native see

220
00:09:48,850 --> 00:09:55,500
ICD tool so it builds on Jenkins pretty

221
00:09:52,930 --> 00:09:58,000
significantly it's pretty much Jenkins

222
00:09:55,500 --> 00:10:00,970
reimagined with an opinionated kind of

223
00:09:58,000 --> 00:10:02,410
workflow on top of kubernetes so whose

224
00:10:00,970 --> 00:10:04,680
work with kubernetes in here so two

225
00:10:02,410 --> 00:10:07,150
curiosity who knows what a namespace is

226
00:10:04,680 --> 00:10:09,880
great for anyone that doesn't know what

227
00:10:07,150 --> 00:10:12,699
a kubernetes namespaces it's essentially

228
00:10:09,880 --> 00:10:14,110
a logical isolation boundary where we

229
00:10:12,700 --> 00:10:17,140
can divide up things like role based

230
00:10:14,110 --> 00:10:19,630
access control networking access to

231
00:10:17,140 --> 00:10:22,630
secrets so the better segmented your

232
00:10:19,630 --> 00:10:24,040
architecture is via namespaces and doing

233
00:10:22,630 --> 00:10:26,920
that intelligently the better off you're

234
00:10:24,040 --> 00:10:28,569
going to be so once upon the time we

235
00:10:26,920 --> 00:10:31,240
kind of ran Jenkins and we had these big

236
00:10:28,570 --> 00:10:33,610
clusters and we had a few centralized

237
00:10:31,240 --> 00:10:35,230
systems right and those were the kind of

238
00:10:33,610 --> 00:10:37,090
keys to get into production for some

239
00:10:35,230 --> 00:10:39,010
people we run these a lot more

240
00:10:37,090 --> 00:10:41,470
decentralized now right so more teams

241
00:10:39,010 --> 00:10:43,120
are gonna have their own instances so

242
00:10:41,470 --> 00:10:46,060
I've seen environments where you know CI

243
00:10:43,120 --> 00:10:47,260
CD is kind of the security and layer for

244
00:10:46,060 --> 00:10:50,079
you know getting anything into

245
00:10:47,260 --> 00:10:52,420
production and nobody touches you know

246
00:10:50,080 --> 00:10:54,010
VMs and things like that and now we're

247
00:10:52,420 --> 00:10:56,530
giving people access to the clusters so

248
00:10:54,010 --> 00:10:59,560
we have to consider what can they do so

249
00:10:56,530 --> 00:11:00,850
if we make the namespaces too muddy too

250
00:10:59,560 --> 00:11:02,770
many teams you know different

251
00:11:00,850 --> 00:11:04,570
applications kind of smashed into one

252
00:11:02,770 --> 00:11:07,840
place and everybody has access to pull

253
00:11:04,570 --> 00:11:10,220
secrets deploy applications read that

254
00:11:07,840 --> 00:11:11,840
data so we find that our develop

255
00:11:10,220 --> 00:11:13,610
workflows kind of follow us right into

256
00:11:11,840 --> 00:11:17,480
production now because they're baked

257
00:11:13,610 --> 00:11:21,140
right into the cluster itself kubernetes

258
00:11:17,480 --> 00:11:22,340
Jenkins X uses um Tecton pipelines so

259
00:11:21,140 --> 00:11:24,199
it's another way of essentially

260
00:11:22,340 --> 00:11:26,510
everything is gonna be declarative right

261
00:11:24,200 --> 00:11:29,150
so it's yeah mole based representation

262
00:11:26,510 --> 00:11:30,860
for your pipelines the biggest

263
00:11:29,150 --> 00:11:33,890
distinction between spinnaker and

264
00:11:30,860 --> 00:11:36,170
jenkins x is that jenkins x is it's it's

265
00:11:33,890 --> 00:11:39,560
deeper integrated into kubernetes the

266
00:11:36,170 --> 00:11:43,660
CRD so we're a spinnaker introduce its

267
00:11:39,560 --> 00:11:46,459
own api's jenkins actually actually uses

268
00:11:43,660 --> 00:11:48,829
kubernetes to do a lot of its api back

269
00:11:46,460 --> 00:11:50,930
stuff so building pipelines running

270
00:11:48,830 --> 00:11:53,360
tasks and stuff like that there's all

271
00:11:50,930 --> 00:11:56,959
kubernetes CR DS to represent those

272
00:11:53,360 --> 00:11:59,000
things and you can also do things with

273
00:11:56,960 --> 00:12:00,590
jenkins files as well so there's

274
00:11:59,000 --> 00:12:02,810
essentially like the servo mush mode and

275
00:12:00,590 --> 00:12:05,240
then there's static mode as well where

276
00:12:02,810 --> 00:12:06,349
you can use jenkins files so but the big

277
00:12:05,240 --> 00:12:08,420
difference here is that everything's

278
00:12:06,350 --> 00:12:10,610
being driven i'm in a get apps fashion

279
00:12:08,420 --> 00:12:12,319
right ideally we're not giving people

280
00:12:10,610 --> 00:12:14,110
direct access the clusters but that

281
00:12:12,320 --> 00:12:17,720
happens all the time

282
00:12:14,110 --> 00:12:19,690
so we have security opportunities and

283
00:12:17,720 --> 00:12:21,800
challenges so we have a lot more

284
00:12:19,690 --> 00:12:24,200
telemetry that we generate we have a lot

285
00:12:21,800 --> 00:12:26,300
more events and so we can use those

286
00:12:24,200 --> 00:12:28,160
things for good right the downside is

287
00:12:26,300 --> 00:12:29,599
that once we start missing things like

288
00:12:28,160 --> 00:12:32,209
web hooks that means we're missing

289
00:12:29,600 --> 00:12:33,770
builds we're missing events so we can

290
00:12:32,210 --> 00:12:36,830
also have you know points of blindness

291
00:12:33,770 --> 00:12:39,290
if we just start missing events with

292
00:12:36,830 --> 00:12:41,720
regards that observability so we have

293
00:12:39,290 --> 00:12:43,280
the development systems we use then we

294
00:12:41,720 --> 00:12:46,150
have all the other tooling as well right

295
00:12:43,280 --> 00:12:48,890
from our cloud to our containerized

296
00:12:46,150 --> 00:12:50,390
orchestration systems to the things we

297
00:12:48,890 --> 00:12:52,699
can get from the containers themselves

298
00:12:50,390 --> 00:12:54,319
right and so there's certain things you

299
00:12:52,700 --> 00:12:56,300
know you'll get at runtime right looking

300
00:12:54,320 --> 00:12:59,120
at a container and figuring out you know

301
00:12:56,300 --> 00:13:00,109
which syscalls it's actually using you

302
00:12:59,120 --> 00:13:01,430
know granted you can get some of that

303
00:13:00,110 --> 00:13:03,650
stuff through static analysis but you

304
00:13:01,430 --> 00:13:04,459
can also run these things as well so

305
00:13:03,650 --> 00:13:05,630
there's certain things that you

306
00:13:04,460 --> 00:13:08,390
certainly want to see from different

307
00:13:05,630 --> 00:13:10,730
stages and you really want to be careful

308
00:13:08,390 --> 00:13:13,370
of the security opinionations that are

309
00:13:10,730 --> 00:13:15,800
in place for you so one of the really

310
00:13:13,370 --> 00:13:17,600
nice things about both Jenkins X and

311
00:13:15,800 --> 00:13:19,370
spinnaker is that they abstract

312
00:13:17,600 --> 00:13:21,110
developers away from a lot of detail so

313
00:13:19,370 --> 00:13:22,340
you don't need to know as much about the

314
00:13:21,110 --> 00:13:23,360
cloud you don't need to know as much

315
00:13:22,340 --> 00:13:25,310
about kubernetes

316
00:13:23,360 --> 00:13:26,570
the downside is that some of those

317
00:13:25,310 --> 00:13:29,719
opinionations might not necessarily

318
00:13:26,570 --> 00:13:31,700
match your tolerance for security and

319
00:13:29,720 --> 00:13:33,200
risk great so the way you kind of

320
00:13:31,700 --> 00:13:35,029
configure your cloud and do hardening

321
00:13:33,200 --> 00:13:37,459
and governance it may be very different

322
00:13:35,029 --> 00:13:39,019
than the opinionations or you know

323
00:13:37,459 --> 00:13:41,180
minimal security built into these tools

324
00:13:39,019 --> 00:13:43,550
right so the goal is to get people up

325
00:13:41,180 --> 00:13:45,500
and running as fast as possible not to

326
00:13:43,550 --> 00:13:47,599
make it as secure as possible and

327
00:13:45,500 --> 00:13:49,250
impossible to use right so one makes

328
00:13:47,600 --> 00:13:51,579
developer happy one makes everybody in

329
00:13:49,250 --> 00:13:55,880
this room happy this is a developer tool

330
00:13:51,579 --> 00:13:58,029
and failure is everywhere right so this

331
00:13:55,880 --> 00:14:00,860
is an example of a kubernetes cluster

332
00:13:58,029 --> 00:14:03,260
and there's a lot that can go wrong

333
00:14:00,860 --> 00:14:06,709
there in terms of failure so first off

334
00:14:03,260 --> 00:14:07,970
we have control plane I wish I have my

335
00:14:06,709 --> 00:14:10,399
little pointer thing but you can see

336
00:14:07,970 --> 00:14:12,170
right here this is pretty much the most

337
00:14:10,399 --> 00:14:14,750
important part of the cluster so this is

338
00:14:12,170 --> 00:14:16,849
where the API server is this is where

339
00:14:14,750 --> 00:14:18,980
you know data representing the state of

340
00:14:16,850 --> 00:14:22,250
the cluster is stored and all the

341
00:14:18,980 --> 00:14:24,589
deployment resource management that all

342
00:14:22,250 --> 00:14:26,810
happens from the control plane so if

343
00:14:24,589 --> 00:14:29,690
you're using a managed service something

344
00:14:26,810 --> 00:14:31,390
like e KS or a KS they'll handle the

345
00:14:29,690 --> 00:14:35,810
control plane but then for example an

346
00:14:31,390 --> 00:14:37,939
ECC e KS on AWS you'll actually spin up

347
00:14:35,810 --> 00:14:40,189
you know essentially virtual machines

348
00:14:37,940 --> 00:14:41,240
for each of the kubernetes nodes right

349
00:14:40,190 --> 00:14:42,800
so there's a little bit that the cloud

350
00:14:41,240 --> 00:14:44,390
handles and then there's a little bit

351
00:14:42,800 --> 00:14:46,670
that you're still running instances at

352
00:14:44,390 --> 00:14:48,410
the end of the day so depending on how

353
00:14:46,670 --> 00:14:49,729
abstracted that aura is away from you

354
00:14:48,410 --> 00:14:51,980
know if you have to manage it yourself

355
00:14:49,730 --> 00:14:54,380
you have to harden the control plane if

356
00:14:51,980 --> 00:14:55,579
a TBS is managing it you have maybe a

357
00:14:54,380 --> 00:14:57,949
little bit less of that to do but some

358
00:14:55,579 --> 00:15:01,569
considerations but things that can go

359
00:14:57,949 --> 00:15:04,430
wrong there you can not do proper

360
00:15:01,570 --> 00:15:06,940
isolation of containers so if you're

361
00:15:04,430 --> 00:15:08,870
running containers super privileged or

362
00:15:06,940 --> 00:15:10,579
you're not you know using what a

363
00:15:08,870 --> 00:15:12,920
rule-based kind of security execution

364
00:15:10,579 --> 00:15:14,510
around them containers aren't really

365
00:15:12,920 --> 00:15:17,029
unlimited they're limited by namespaces

366
00:15:14,510 --> 00:15:19,010
and control groups things like docker

367
00:15:17,029 --> 00:15:21,050
for example they're not hypervisors is

368
00:15:19,010 --> 00:15:22,510
not really a security boundary right so

369
00:15:21,050 --> 00:15:26,390
there's a lot that can go wrong there

370
00:15:22,510 --> 00:15:29,120
and you know with addition to you know

371
00:15:26,390 --> 00:15:31,399
using our managed services rate how many

372
00:15:29,120 --> 00:15:33,319
people think that kubernetes api is are

373
00:15:31,399 --> 00:15:35,390
all over the internet if you look for

374
00:15:33,319 --> 00:15:37,250
them right like they're everywhere

375
00:15:35,390 --> 00:15:38,990
people make these public and as well

376
00:15:37,250 --> 00:15:42,560
like 80s and others don't necessarily

377
00:15:38,990 --> 00:15:43,940
make it hard feet or not do that so then

378
00:15:42,560 --> 00:15:46,910
we also have code right because

379
00:15:43,940 --> 00:15:48,590
everything runs inside of containers as

380
00:15:46,910 --> 00:15:49,939
code so you know the thing we kind of

381
00:15:48,590 --> 00:15:51,980
get lost in we think about all the new

382
00:15:49,940 --> 00:15:53,510
pretty stuff is that at the end of the

383
00:15:51,980 --> 00:15:55,820
day we're still running code right but

384
00:15:53,510 --> 00:15:57,319
the difference is our code is maybe a

385
00:15:55,820 --> 00:15:59,350
lot more abstracted from the things

386
00:15:57,320 --> 00:16:01,430
around it than it was at one point so

387
00:15:59,350 --> 00:16:03,800
things to consider right is that your

388
00:16:01,430 --> 00:16:04,939
application just might not understand

389
00:16:03,800 --> 00:16:08,479
what's happening outside of the

390
00:16:04,940 --> 00:16:10,340
application itself so container

391
00:16:08,480 --> 00:16:12,010
orchestration and runtime systems and

392
00:16:10,340 --> 00:16:14,390
the container is important to get right

393
00:16:12,010 --> 00:16:16,400
so when we're testing there's you know

394
00:16:14,390 --> 00:16:18,500
things we can do locally right run

395
00:16:16,400 --> 00:16:19,760
things like docker bench you know

396
00:16:18,500 --> 00:16:21,020
there's a million tools I hate to kind

397
00:16:19,760 --> 00:16:23,300
of get up here and be a tool evangelist

398
00:16:21,020 --> 00:16:25,400
go on google and search them I guarantee

399
00:16:23,300 --> 00:16:26,599
uses some good tools out there but

400
00:16:25,400 --> 00:16:28,819
there's things you can kind of find

401
00:16:26,600 --> 00:16:30,560
those things locally right but there's

402
00:16:28,820 --> 00:16:33,410
also things you're not gonna see with

403
00:16:30,560 --> 00:16:35,750
regards to contain a configuration I'm

404
00:16:33,410 --> 00:16:36,890
told the point I'm right because there's

405
00:16:35,750 --> 00:16:38,690
certain things that for example

406
00:16:36,890 --> 00:16:40,310
kubernetes you know there's other

407
00:16:38,690 --> 00:16:42,710
container orchestration technologies out

408
00:16:40,310 --> 00:16:45,260
there they can also mutate that state as

409
00:16:42,710 --> 00:16:47,510
well at a mission so you have emission

410
00:16:45,260 --> 00:16:49,430
controllers that can do things and you

411
00:16:47,510 --> 00:16:51,770
can also have different wrappers things

412
00:16:49,430 --> 00:16:53,359
like security contexts and other things

413
00:16:51,770 --> 00:16:55,490
that can potentially change what you see

414
00:16:53,360 --> 00:16:57,830
inside if I could dock or farm openly so

415
00:16:55,490 --> 00:16:59,839
if you want to have visibility of all

416
00:16:57,830 --> 00:17:01,370
the different kind of states and then

417
00:16:59,839 --> 00:17:02,690
you need to you know test as you move

418
00:17:01,370 --> 00:17:05,270
through different environments right

419
00:17:02,690 --> 00:17:09,980
from local to actually running it in a

420
00:17:05,270 --> 00:17:11,959
cluster everything is declarative so

421
00:17:09,980 --> 00:17:13,420
that's the good thing right so there's

422
00:17:11,959 --> 00:17:15,579
really not a lot of kind of guesswork

423
00:17:13,420 --> 00:17:17,839
the good thing is that everything

424
00:17:15,579 --> 00:17:20,510
happens right away the bad thing is

425
00:17:17,839 --> 00:17:22,250
everything happens right away so the

426
00:17:20,510 --> 00:17:24,589
reconcile my pattern is essentially

427
00:17:22,250 --> 00:17:26,349
always trying to reconcile towards the

428
00:17:24,589 --> 00:17:29,240
correct state right so it's always

429
00:17:26,349 --> 00:17:31,580
trying to move ahead and as soon it has

430
00:17:29,240 --> 00:17:33,110
updates for different things it goes too

431
00:17:31,580 --> 00:17:36,679
old and immediately apply those to your

432
00:17:33,110 --> 00:17:38,750
resources with regards to ayahs and pass

433
00:17:36,680 --> 00:17:41,480
integrations so if you are running your

434
00:17:38,750 --> 00:17:44,690
own kind of bare metal cluster then

435
00:17:41,480 --> 00:17:46,820
there's a lot more that you'd have to do

436
00:17:44,690 --> 00:17:50,340
to get it to work with same like you

437
00:17:46,820 --> 00:17:52,679
know eks right so eks aks

438
00:17:50,340 --> 00:17:55,379
gke there they're integrated with things

439
00:17:52,680 --> 00:17:57,120
like I am different

440
00:17:55,380 --> 00:17:59,070
you know platform services and

441
00:17:57,120 --> 00:18:00,540
everything like that so if you're gonna

442
00:17:59,070 --> 00:18:02,850
do things yourself like that then you

443
00:18:00,540 --> 00:18:05,670
have to you know consider key management

444
00:18:02,850 --> 00:18:08,219
right credential management across your

445
00:18:05,670 --> 00:18:09,690
system so I like to advocate for if you

446
00:18:08,220 --> 00:18:11,760
can use the platform managed way of

447
00:18:09,690 --> 00:18:12,990
doing things in some cases do that it

448
00:18:11,760 --> 00:18:16,470
saves a lot of problems and things you

449
00:18:12,990 --> 00:18:19,320
have to think about later the cloud is

450
00:18:16,470 --> 00:18:22,080
is an interesting one right because your

451
00:18:19,320 --> 00:18:24,120
applications now we're running on inside

452
00:18:22,080 --> 00:18:25,560
of containers that are running on

453
00:18:24,120 --> 00:18:27,989
orchestration systems and then the

454
00:18:25,560 --> 00:18:29,600
orchestration systems are glued to your

455
00:18:27,990 --> 00:18:32,400
cloud infrastructure right so

456
00:18:29,600 --> 00:18:34,050
essentially your applications don't

457
00:18:32,400 --> 00:18:36,930
really have any idea what happens there

458
00:18:34,050 --> 00:18:39,300
so as you're building testing your

459
00:18:36,930 --> 00:18:40,500
applications these are the kind of tests

460
00:18:39,300 --> 00:18:44,159
you start to have to consider running

461
00:18:40,500 --> 00:18:47,250
right when I go to deploy something is

462
00:18:44,160 --> 00:18:50,610
the s3 bucket public can it be made

463
00:18:47,250 --> 00:18:52,860
public is the EBS volume encrypted

464
00:18:50,610 --> 00:18:54,570
that's going to be attached to this is

465
00:18:52,860 --> 00:18:57,120
the I am role that's going to be

466
00:18:54,570 --> 00:18:59,129
basically injected has like allow oil

467
00:18:57,120 --> 00:19:01,739
across AWS like like there's certain

468
00:18:59,130 --> 00:19:03,300
things from a security perspective that

469
00:19:01,740 --> 00:19:06,150
you'd almost never want to happen right

470
00:19:03,300 --> 00:19:07,500
so these end up becoming things that you

471
00:19:06,150 --> 00:19:08,730
know happen inside of your integration

472
00:19:07,500 --> 00:19:11,640
tests and other parts you have test

473
00:19:08,730 --> 00:19:13,650
suite I am is where it really gets

474
00:19:11,640 --> 00:19:16,830
interesting though because if you have

475
00:19:13,650 --> 00:19:19,350
for example an I am role or user you

476
00:19:16,830 --> 00:19:20,939
create for a platform rate and then you

477
00:19:19,350 --> 00:19:23,129
give that to a service account that then

478
00:19:20,940 --> 00:19:24,720
runs in container depending on what

479
00:19:23,130 --> 00:19:26,790
you've privilege that at the cloud level

480
00:19:24,720 --> 00:19:28,260
is going to dictate what happens when

481
00:19:26,790 --> 00:19:29,670
that container gets compromised and

482
00:19:28,260 --> 00:19:33,090
attacker starts to try to move laterally

483
00:19:29,670 --> 00:19:34,620
and pivot into other systems so this is

484
00:19:33,090 --> 00:19:38,129
a newer thing especially the AWS just

485
00:19:34,620 --> 00:19:40,679
released recently the im2 eks I know

486
00:19:38,130 --> 00:19:41,790
like as was done that for awhile gke but

487
00:19:40,680 --> 00:19:44,220
these are things to consider right

488
00:19:41,790 --> 00:19:47,120
because once you create these accounts

489
00:19:44,220 --> 00:19:48,990
you create subjects you tie them to I am

490
00:19:47,120 --> 00:19:53,010
sometimes your developers start reusing

491
00:19:48,990 --> 00:19:54,570
them across applications and then we

492
00:19:53,010 --> 00:19:57,150
have code that actually runs inside of

493
00:19:54,570 --> 00:19:59,040
these things right so you know I've

494
00:19:57,150 --> 00:20:00,300
heard this right it runs in the cloud so

495
00:19:59,040 --> 00:20:01,889
you don't think about security and like

496
00:20:00,300 --> 00:20:02,850
it runs in container so like they're

497
00:20:01,890 --> 00:20:05,370
isolated at this

498
00:20:02,850 --> 00:20:08,010
I know right like you're still writing

499
00:20:05,370 --> 00:20:11,129
code and and in fact like the code you

500
00:20:08,010 --> 00:20:12,810
write is more complex we have more

501
00:20:11,130 --> 00:20:14,970
distributed systems right we have a lot

502
00:20:12,810 --> 00:20:16,110
more that can kind of go wrong we have

503
00:20:14,970 --> 00:20:18,540
you know a lot of interesting things

504
00:20:16,110 --> 00:20:20,340
like seeing people that are migrated

505
00:20:18,540 --> 00:20:22,980
existing systems to you know cloud

506
00:20:20,340 --> 00:20:24,659
native architectures and you know from

507
00:20:22,980 --> 00:20:26,550
fairly monolithic systems they start to

508
00:20:24,660 --> 00:20:29,970
run into things like race conditions

509
00:20:26,550 --> 00:20:31,169
kind of concurrency related issues where

510
00:20:29,970 --> 00:20:33,240
they move from like a monolithic

511
00:20:31,170 --> 00:20:35,310
workflow to using like simply Kafka and

512
00:20:33,240 --> 00:20:37,440
passing messages around right where

513
00:20:35,310 --> 00:20:40,169
there's just differences in terms of

514
00:20:37,440 --> 00:20:42,270
like how that flows so that is really

515
00:20:40,170 --> 00:20:44,400
important right as you migrate existing

516
00:20:42,270 --> 00:20:49,320
systems to cloud native and then start

517
00:20:44,400 --> 00:20:50,760
to use cloud native tooling you really

518
00:20:49,320 --> 00:20:53,510
have to make sure your security controls

519
00:20:50,760 --> 00:20:55,260
kind of follow with you the way you test

520
00:20:53,510 --> 00:20:56,280
applications right so things like you

521
00:20:55,260 --> 00:20:58,260
know I'm not gonna get into today and

522
00:20:56,280 --> 00:20:59,580
like running your static analysis like

523
00:20:58,260 --> 00:21:01,320
dynamic tools like I asked like

524
00:20:59,580 --> 00:21:02,639
dependency stuff right those those

525
00:21:01,320 --> 00:21:04,409
things don't change like you still have

526
00:21:02,640 --> 00:21:06,240
places in the pipeline to run all that

527
00:21:04,410 --> 00:21:08,580
stuff right so the way you test your

528
00:21:06,240 --> 00:21:10,050
code arguably doesn't change there it's

529
00:21:08,580 --> 00:21:12,240
on light of the other stuff that happens

530
00:21:10,050 --> 00:21:13,770
around it an integration rate on things

531
00:21:12,240 --> 00:21:16,050
you won't actually know in the code

532
00:21:13,770 --> 00:21:17,639
until it's actually running in that

533
00:21:16,050 --> 00:21:22,590
environment right so just certain things

534
00:21:17,640 --> 00:21:24,900
they got harder our dorm on the IM side

535
00:21:22,590 --> 00:21:26,189
of things depending on what you've

536
00:21:24,900 --> 00:21:28,770
allowed people to do inside of your

537
00:21:26,190 --> 00:21:32,430
cluster to potentially impact what they

538
00:21:28,770 --> 00:21:36,660
can do inside of your cloud so from you

539
00:21:32,430 --> 00:21:39,030
know things like permissioning access to

540
00:21:36,660 --> 00:21:40,650
our container registries so I see people

541
00:21:39,030 --> 00:21:41,970
do a couple different ways right one is

542
00:21:40,650 --> 00:21:43,680
they put everything on the same cloud

543
00:21:41,970 --> 00:21:45,890
provider right so their source code

544
00:21:43,680 --> 00:21:49,100
management their container registries

545
00:21:45,890 --> 00:21:52,410
cloud stuff like everything is under 100

546
00:21:49,100 --> 00:21:54,600
they can use I am you know minimize the

547
00:21:52,410 --> 00:21:56,670
credentials they pass around access keys

548
00:21:54,600 --> 00:21:58,199
and stuff like that so if you can do it

549
00:21:56,670 --> 00:22:00,450
all under one platform and that works

550
00:21:58,200 --> 00:22:03,600
for you great I'm in reality most people

551
00:22:00,450 --> 00:22:05,550
don't build like that so it gets really

552
00:22:03,600 --> 00:22:08,010
important to figure out you know what

553
00:22:05,550 --> 00:22:10,110
can that service account actually do in

554
00:22:08,010 --> 00:22:12,780
the cost store and in the cloud by

555
00:22:10,110 --> 00:22:15,959
default in kubernetes when you create a

556
00:22:12,780 --> 00:22:16,350
new pod it'll use like a default service

557
00:22:15,960 --> 00:22:18,240
account

558
00:22:16,350 --> 00:22:22,110
so I'll show an example that like in

559
00:22:18,240 --> 00:22:23,250
Tecton here right so you can use so this

560
00:22:22,110 --> 00:22:26,699
is if you want to create a pipeline

561
00:22:23,250 --> 00:22:28,110
using Tecton it follows the same pretty

562
00:22:26,700 --> 00:22:30,900
much like you know it's essentially

563
00:22:28,110 --> 00:22:33,689
running on kubernetes right so the way

564
00:22:30,900 --> 00:22:35,789
you'd run you know other resources very

565
00:22:33,690 --> 00:22:37,830
similar but as you run with service

566
00:22:35,789 --> 00:22:40,410
accounts so if you using like default

567
00:22:37,830 --> 00:22:43,439
accounts which is a common pattern right

568
00:22:40,410 --> 00:22:45,299
so people will create a new pod create a

569
00:22:43,440 --> 00:22:47,340
pod spec they won't assign an account

570
00:22:45,299 --> 00:22:49,280
and by default it'll drop you into like

571
00:22:47,340 --> 00:22:53,189
a namespace just a vault account which

572
00:22:49,280 --> 00:22:54,480
is an issue because one each of those

573
00:22:53,190 --> 00:22:56,460
accounts rooms with those same

574
00:22:54,480 --> 00:22:58,860
privileges they have access to pull

575
00:22:56,460 --> 00:23:00,650
secrets modify the containers kind of

576
00:22:58,860 --> 00:23:04,559
lifecycle and everything like that so

577
00:23:00,650 --> 00:23:06,260
it's really important to use separate

578
00:23:04,559 --> 00:23:08,639
accounts for each of those things

579
00:23:06,260 --> 00:23:13,470
essentially here this is like that same

580
00:23:08,640 --> 00:23:15,630
thing kind of in a different place with

581
00:23:13,470 --> 00:23:17,789
regards to namespace vs cluster level so

582
00:23:15,630 --> 00:23:19,230
generally you don't need to give your

583
00:23:17,789 --> 00:23:22,408
teams that are operating in different

584
00:23:19,230 --> 00:23:24,539
namespaces cluster level privileges so

585
00:23:22,409 --> 00:23:26,490
the whole goal nowadays is that if

586
00:23:24,539 --> 00:23:27,990
you're doing it get apps properly then

587
00:23:26,490 --> 00:23:29,760
you're not giving you developers access

588
00:23:27,990 --> 00:23:31,440
to the cluster to do anything so they're

589
00:23:29,760 --> 00:23:32,460
updating their applications that doing

590
00:23:31,440 --> 00:23:34,980
all the deployments all their

591
00:23:32,460 --> 00:23:36,299
modifications through get right so if

592
00:23:34,980 --> 00:23:39,210
you're doing the get apps kind of thing

593
00:23:36,299 --> 00:23:41,309
correctly then your your your developers

594
00:23:39,210 --> 00:23:43,590
shouldn't be able to use cube control

595
00:23:41,309 --> 00:23:52,230
and start doing stuff inside of

596
00:23:43,590 --> 00:23:53,850
kubernetes api all right all right so

597
00:23:52,230 --> 00:23:56,010
now we are going to focus back on the

598
00:23:53,850 --> 00:23:57,689
network and how to make sure that that

599
00:23:56,010 --> 00:23:59,789
is communicating properly without

600
00:23:57,690 --> 00:24:04,320
spilling too much especially in the way

601
00:23:59,789 --> 00:24:07,799
of secrets it's cool so everything can

602
00:24:04,320 --> 00:24:10,530
go wrong a lot of these developers or

603
00:24:07,799 --> 00:24:12,990
whomever have a lot of faith in the

604
00:24:10,530 --> 00:24:16,980
tools that they're using there are still

605
00:24:12,990 --> 00:24:18,929
very very very insecure defaults so it's

606
00:24:16,980 --> 00:24:21,630
important and imperative that you set up

607
00:24:18,929 --> 00:24:23,190
network isolation so that you are

608
00:24:21,630 --> 00:24:27,030
controlling your blast radius

609
00:24:23,190 --> 00:24:29,880
essentially you want to fail closed so

610
00:24:27,030 --> 00:24:32,010
in the event that you are compromised

611
00:24:29,880 --> 00:24:35,970
or you want to prepare yourself to

612
00:24:32,010 --> 00:24:38,879
become compromised you are limiting what

613
00:24:35,970 --> 00:24:43,169
might be exposed or what a compromised

614
00:24:38,880 --> 00:24:46,140
account will have access to and you can

615
00:24:43,169 --> 00:24:48,330
see there was a talk a month ago now in

616
00:24:46,140 --> 00:24:51,350
blackhat where they revealed that the

617
00:24:48,330 --> 00:24:55,730
eks was publicly accessible by default

618
00:24:51,350 --> 00:24:59,039
so that was a very very very big concern

619
00:24:55,730 --> 00:25:00,299
you need to ensure that you are changing

620
00:24:59,039 --> 00:25:03,390
that and aware of it

621
00:25:00,299 --> 00:25:06,990
likewise logging is disabled by default

622
00:25:03,390 --> 00:25:09,720
which will help you clean up or identify

623
00:25:06,990 --> 00:25:11,700
where an issue occurs or clean up after

624
00:25:09,720 --> 00:25:17,220
an incident so you need to ensure that

625
00:25:11,700 --> 00:25:19,289
you have that on and you're you're able

626
00:25:17,220 --> 00:25:21,980
to connect to without authentication so

627
00:25:19,289 --> 00:25:24,960
again a lot of very very surprising

628
00:25:21,980 --> 00:25:31,500
insecure defaults that you need to be

629
00:25:24,960 --> 00:25:35,220
aware of change and plug this holes so

630
00:25:31,500 --> 00:25:36,929
in terms of Jenkins and s3 the s3

631
00:25:35,220 --> 00:25:39,900
buckets that get automatically created

632
00:25:36,929 --> 00:25:41,700
are unencrypted so that's again

633
00:25:39,900 --> 00:25:48,570
something you want to change the the

634
00:25:41,700 --> 00:25:50,760
default settings it's also kubernetes

635
00:25:48,570 --> 00:25:53,610
your your humanizes setup to be publicly

636
00:25:50,760 --> 00:25:56,970
accessible and publicly accessed so

637
00:25:53,610 --> 00:25:58,320
those are some little tweaks here and

638
00:25:56,970 --> 00:26:04,080
there that you need to ensure that you

639
00:25:58,320 --> 00:26:11,309
are changing lastly you have helm and

640
00:26:04,080 --> 00:26:13,320
tiller particularly which again you have

641
00:26:11,309 --> 00:26:16,080
your your able to access it without

642
00:26:13,320 --> 00:26:17,908
without authentication and it's a lot of

643
00:26:16,080 --> 00:26:22,740
the same problems over and over and over

644
00:26:17,909 --> 00:26:26,340
again so you are storing your secrets in

645
00:26:22,740 --> 00:26:29,700
config maps which are again potentially

646
00:26:26,340 --> 00:26:30,720
exposed and you want to encrypt them

647
00:26:29,700 --> 00:26:33,870
there's a lot of different methods you

648
00:26:30,720 --> 00:26:35,850
can use one of them is hashey corpse

649
00:26:33,870 --> 00:26:39,149
vault so if you keep your secrets in

650
00:26:35,850 --> 00:26:41,280
there then you can have your various

651
00:26:39,150 --> 00:26:43,110
teams pass if they need to use those

652
00:26:41,280 --> 00:26:45,240
secrets they can pass by reference

653
00:26:43,110 --> 00:26:46,979
and your various teams can work together

654
00:26:45,240 --> 00:26:53,670
within the same environment

655
00:26:46,980 --> 00:26:57,480
without sharing secrets yeah and don't

656
00:26:53,670 --> 00:26:59,070
do dumb stuff so even without all the

657
00:26:57,480 --> 00:27:00,840
default settings which you will need to

658
00:26:59,070 --> 00:27:02,549
go through and change there are things

659
00:27:00,840 --> 00:27:05,699
that can sort of override the security

660
00:27:02,549 --> 00:27:08,160
settings and they are named accordingly

661
00:27:05,700 --> 00:27:10,650
there's the insecure flag that if you

662
00:27:08,160 --> 00:27:13,950
use it turns off verification of your

663
00:27:10,650 --> 00:27:16,590
yamo files which is a good way to get

664
00:27:13,950 --> 00:27:19,110
malicious code introduced into those

665
00:27:16,590 --> 00:27:22,678
configurations so don't do things like

666
00:27:19,110 --> 00:27:33,600
use insecure Flags skip TLS checks etc

667
00:27:22,679 --> 00:27:37,470
etc okay so secrets management inside of

668
00:27:33,600 --> 00:27:40,080
a pipeline so secrets are one of those

669
00:27:37,470 --> 00:27:41,340
things that either people handle those

670
00:27:40,080 --> 00:27:43,350
out of the gate when they build the

671
00:27:41,340 --> 00:27:45,840
system and they have a secrets

672
00:27:43,350 --> 00:27:48,330
management solution in place or they get

673
00:27:45,840 --> 00:27:49,918
to production everything works and then

674
00:27:48,330 --> 00:27:51,540
they kind of get to clean up sprints and

675
00:27:49,919 --> 00:27:52,919
cycles and they say like let's fix

676
00:27:51,540 --> 00:27:54,750
secrets management at this point right

677
00:27:52,919 --> 00:27:56,040
and then by that point you know if

678
00:27:54,750 --> 00:27:58,169
secrets credentials have kind of

679
00:27:56,040 --> 00:28:01,230
sprawled out between their different

680
00:27:58,169 --> 00:28:05,370
environments so as you use different

681
00:28:01,230 --> 00:28:07,140
tools right your CI CD Tools helm so

682
00:28:05,370 --> 00:28:09,899
who's worked with Helmand here we talked

683
00:28:07,140 --> 00:28:11,549
about helm a bit today helm is you know

684
00:28:09,900 --> 00:28:13,770
first-class implementation inside of

685
00:28:11,549 --> 00:28:16,350
Jenkins X you know most cloud native

686
00:28:13,770 --> 00:28:18,720
tooling is using like helm and charts

687
00:28:16,350 --> 00:28:19,740
and for stuff for deployments but you

688
00:28:18,720 --> 00:28:21,600
have to think about right

689
00:28:19,740 --> 00:28:27,720
secrets propagate to some of those

690
00:28:21,600 --> 00:28:32,030
layers you have different tools with

691
00:28:27,720 --> 00:28:37,049
regards to different management tools

692
00:28:32,030 --> 00:28:40,490
different integrations so there's a lot

693
00:28:37,049 --> 00:28:44,549
of different places where you can

694
00:28:40,490 --> 00:28:45,600
inadvertently expose credentials so it's

695
00:28:44,549 --> 00:28:46,918
one of those things like if you don't

696
00:28:45,600 --> 00:28:49,649
get it right kind of out of the gate

697
00:28:46,919 --> 00:28:52,140
then it gets harder ideally your

698
00:28:49,650 --> 00:28:54,929
developers especially even at the gate

699
00:28:52,140 --> 00:28:57,000
layer they're not handling secrets if

700
00:28:54,929 --> 00:28:58,170
you're doing this stuff correctly then

701
00:28:57,000 --> 00:29:02,070
the secrets are getting injected

702
00:28:58,170 --> 00:29:04,890
somewhere beyond what is gonna happen at

703
00:29:02,070 --> 00:29:07,620
the dockerfile right so this is you know

704
00:29:04,890 --> 00:29:09,000
at your helmet art is a place where you

705
00:29:07,620 --> 00:29:09,840
can kind of wire up secrets and stuff

706
00:29:09,000 --> 00:29:13,170
like that

707
00:29:09,840 --> 00:29:15,389
but ideally inside of kubernetes the

708
00:29:13,170 --> 00:29:18,240
challenge is that you can use kubernetes

709
00:29:15,390 --> 00:29:20,330
the secrets management API but then

710
00:29:18,240 --> 00:29:23,460
secrets are still stored in plain text

711
00:29:20,330 --> 00:29:26,730
inside of that CD so you can encrypt

712
00:29:23,460 --> 00:29:28,860
those but it's it's kind of it's a

713
00:29:26,730 --> 00:29:30,510
social implementation right a lot of

714
00:29:28,860 --> 00:29:33,000
people use vaults right to kind of move

715
00:29:30,510 --> 00:29:35,760
it out of there and Jenkins acts like

716
00:29:33,000 --> 00:29:36,810
has integration with vault on spinnaker

717
00:29:35,760 --> 00:29:38,730
I believe that some integrations with

718
00:29:36,810 --> 00:29:40,169
vault and everything like that and the

719
00:29:38,730 --> 00:29:41,610
vault integrations for kubernetes are

720
00:29:40,170 --> 00:29:43,320
getting better and better right so if

721
00:29:41,610 --> 00:29:44,879
that's one of the things I can recommend

722
00:29:43,320 --> 00:29:47,490
kind of getting right out of the gate

723
00:29:44,880 --> 00:29:50,010
its managing secrets and if you can

724
00:29:47,490 --> 00:29:51,390
avoid developers ever having a reason to

725
00:29:50,010 --> 00:29:52,260
manage those then then that's great

726
00:29:51,390 --> 00:29:53,700
right and if it could be done

727
00:29:52,260 --> 00:29:55,879
dynamically from day one then even

728
00:29:53,700 --> 00:29:55,880
better

729
00:29:55,980 --> 00:30:03,120
long live credentials are bad so people

730
00:30:00,150 --> 00:30:05,070
any Azure people in here that use like

731
00:30:03,120 --> 00:30:08,459
service principles and pins and like

732
00:30:05,070 --> 00:30:10,980
they never rotate those things do people

733
00:30:08,460 --> 00:30:12,480
use access keys on AWS like give them to

734
00:30:10,980 --> 00:30:13,950
all their developers and then like they

735
00:30:12,480 --> 00:30:16,740
have them for like two years and nobody

736
00:30:13,950 --> 00:30:18,270
does anything with those right ideally

737
00:30:16,740 --> 00:30:20,400
those were all really bad patterns

738
00:30:18,270 --> 00:30:23,160
people shouldn't be using long with

739
00:30:20,400 --> 00:30:26,850
credentials for things like that so if

740
00:30:23,160 --> 00:30:28,470
you can use things like STS and you know

741
00:30:26,850 --> 00:30:34,439
if you can use like platform integrated

742
00:30:28,470 --> 00:30:36,780
you know stuff whether that's things

743
00:30:34,440 --> 00:30:38,990
like Kerberos integration with I am

744
00:30:36,780 --> 00:30:40,860
anything to avoid having to have

745
00:30:38,990 --> 00:30:43,080
plaintext credentials get stored

746
00:30:40,860 --> 00:30:45,570
anywhere so they're only you know when

747
00:30:43,080 --> 00:30:48,300
you have developers you know handling

748
00:30:45,570 --> 00:30:51,090
secrets they're on their local box right

749
00:30:48,300 --> 00:30:52,740
any tests they run right depending on

750
00:30:51,090 --> 00:30:54,659
you know whether it's local it's get

751
00:30:52,740 --> 00:30:55,980
spit out somewhere you know each of

752
00:30:54,660 --> 00:30:57,210
those interfaces is somewhere we're

753
00:30:55,980 --> 00:31:00,360
potentially those things leak out

754
00:30:57,210 --> 00:31:02,430
there's logs there's deployment logs so

755
00:31:00,360 --> 00:31:05,790
on and so forth so the less places you

756
00:31:02,430 --> 00:31:10,140
can expose secrets the better I really

757
00:31:05,790 --> 00:31:10,440
can't stress that enough and these tools

758
00:31:10,140 --> 00:31:13,110
are

759
00:31:10,440 --> 00:31:15,390
extendable - so I started playing around

760
00:31:13,110 --> 00:31:18,300
with just building a few extensions in

761
00:31:15,390 --> 00:31:19,590
Jenkins X I worked at it's all might get

762
00:31:18,300 --> 00:31:22,230
up if anybody wants to see some of this

763
00:31:19,590 --> 00:31:25,949
code but there's if you basically run

764
00:31:22,230 --> 00:31:27,570
like the JX scan commands you could put

765
00:31:25,950 --> 00:31:30,660
anything after that right so there's one

766
00:31:27,570 --> 00:31:33,300
there for running Hunter tool against

767
00:31:30,660 --> 00:31:35,460
like coupon or rather but I built one

768
00:31:33,300 --> 00:31:37,830
for Jenkins X and I'm gonna open-source

769
00:31:35,460 --> 00:31:39,210
some stuff I wrote for our back but

770
00:31:37,830 --> 00:31:40,889
there's there's different tests you can

771
00:31:39,210 --> 00:31:43,230
run right so Jenkins X gives you things

772
00:31:40,890 --> 00:31:45,930
like preview environments which is your

773
00:31:43,230 --> 00:31:49,620
home environment spun up in a namespace

774
00:31:45,930 --> 00:31:52,080
right ready to be tested so you can run

775
00:31:49,620 --> 00:31:54,090
things through like you know commands

776
00:31:52,080 --> 00:31:56,280
and comments on a pull request right

777
00:31:54,090 --> 00:31:58,560
where you can literally run different

778
00:31:56,280 --> 00:31:59,910
commands over and over against an

779
00:31:58,560 --> 00:32:01,350
environment so it's nice to have as many

780
00:31:59,910 --> 00:32:03,480
of these utilities on speed down as

781
00:32:01,350 --> 00:32:04,560
possible and also to wire those up into

782
00:32:03,480 --> 00:32:07,140
your Python as well

783
00:32:04,560 --> 00:32:09,090
so in this example here it was a really

784
00:32:07,140 --> 00:32:13,950
simple example of playing around with

785
00:32:09,090 --> 00:32:16,830
dependency check basically what you end

786
00:32:13,950 --> 00:32:18,750
up doing is anything you run is inside

787
00:32:16,830 --> 00:32:21,449
of a container and then it gets the poit

788
00:32:18,750 --> 00:32:23,160
on the way I have it set up is just like

789
00:32:21,450 --> 00:32:25,410
an ephemeral namespace that gets thrown

790
00:32:23,160 --> 00:32:28,890
away after the job runs but it's

791
00:32:25,410 --> 00:32:31,770
creating itself as a batch job and then

792
00:32:28,890 --> 00:32:34,220
it runs on kubernetes right so if

793
00:32:31,770 --> 00:32:37,620
anyone's seen jobs run is nothing really

794
00:32:34,220 --> 00:32:39,060
special about that but nonetheless I'm

795
00:32:37,620 --> 00:32:41,540
it allows you to run you know any of

796
00:32:39,060 --> 00:32:46,590
your security stuff in a containerized

797
00:32:41,540 --> 00:32:49,610
environment in seconds and here's just

798
00:32:46,590 --> 00:32:51,510
basically how you add those in so it's

799
00:32:49,610 --> 00:32:55,290
Jenkins X I mean you're running on

800
00:32:51,510 --> 00:32:56,250
locally so you I would be nice if they

801
00:32:55,290 --> 00:32:57,629
build maybe a little bit on a better

802
00:32:56,250 --> 00:32:59,100
plug-in interface for this at some point

803
00:32:57,630 --> 00:33:01,650
but I mean it's like early days for the

804
00:32:59,100 --> 00:33:04,050
tool right there's there are plugins but

805
00:33:01,650 --> 00:33:05,600
not underneath like JX can this is

806
00:33:04,050 --> 00:33:07,770
pretty much all that's available for now

807
00:33:05,600 --> 00:33:09,179
under scan but pretty much you add you

808
00:33:07,770 --> 00:33:11,550
command at that point and then you can

809
00:33:09,180 --> 00:33:16,170
do them like J X can whatever tool you

810
00:33:11,550 --> 00:33:18,450
want to run at that point and you know

811
00:33:16,170 --> 00:33:20,360
one thing to note security management in

812
00:33:18,450 --> 00:33:22,890
governance right especially in the cloud

813
00:33:20,360 --> 00:33:24,320
it's nice to pick up the different tools

814
00:33:22,890 --> 00:33:27,210
that they kind of give you them

815
00:33:24,320 --> 00:33:28,678
harden things out of the gate what you

816
00:33:27,210 --> 00:33:30,870
end up finding especially in the cloud

817
00:33:28,679 --> 00:33:33,330
native world is that sometimes there's

818
00:33:30,870 --> 00:33:35,879
not full support whether that's like you

819
00:33:33,330 --> 00:33:37,399
know alerting and logs or integration

820
00:33:35,880 --> 00:33:39,779
with some type of strong authentication

821
00:33:37,400 --> 00:33:41,940
so as you're picking up the new cloud

822
00:33:39,779 --> 00:33:43,380
native kind of hot in his tools you

823
00:33:41,940 --> 00:33:45,150
really want to do your research to make

824
00:33:43,380 --> 00:33:47,190
sure that the platform's you're using

825
00:33:45,150 --> 00:33:49,500
them on have all the things you're

826
00:33:47,190 --> 00:33:50,909
looking for for security right things

827
00:33:49,500 --> 00:33:52,590
that you get out of the gate always are

828
00:33:50,909 --> 00:33:54,690
like you know pod security policies and

829
00:33:52,590 --> 00:33:56,490
some of that emission control based

830
00:33:54,690 --> 00:33:59,279
stuff so there's a certain amount of

831
00:33:56,490 --> 00:34:00,870
stuff that you want to just basically

832
00:33:59,279 --> 00:34:03,270
opinionate out of the game right what

833
00:34:00,870 --> 00:34:04,799
what developers can do can you run

834
00:34:03,270 --> 00:34:06,840
containers is route right those are

835
00:34:04,799 --> 00:34:08,429
things you should you know at a higher

836
00:34:06,840 --> 00:34:10,348
level decide right and you should

837
00:34:08,429 --> 00:34:11,820
implement policies so when you

838
00:34:10,349 --> 00:34:13,849
developers go to push containers as

839
00:34:11,820 --> 00:34:15,839
route and they can't do it like

840
00:34:13,849 --> 00:34:18,899
everybody's happy at that point right

841
00:34:15,839 --> 00:34:21,210
because nothing went wrong an asset

842
00:34:18,899 --> 00:34:23,909
inventory gets incredibly hard right so

843
00:34:21,210 --> 00:34:26,820
if you look at you know most of the

844
00:34:23,909 --> 00:34:29,280
tools they do a good job at cloud-based

845
00:34:26,820 --> 00:34:30,960
stuff or there's tools to get good

846
00:34:29,280 --> 00:34:33,270
visibility inside of your clusters and

847
00:34:30,960 --> 00:34:34,440
containers where it's getting maybe a

848
00:34:33,270 --> 00:34:35,790
little bit better is you know

849
00:34:34,440 --> 00:34:37,470
aggregating all that stuff so has

850
00:34:35,790 --> 00:34:38,668
anybody gotten on the surface mesh

851
00:34:37,469 --> 00:34:41,368
bandwagon

852
00:34:38,668 --> 00:34:43,980
does anybody use this do like envoy has

853
00:34:41,369 --> 00:34:45,810
anybody heard of those things so they're

854
00:34:43,980 --> 00:34:48,690
really nice because they might inject

855
00:34:45,810 --> 00:34:50,429
like sidecar containers that sit next to

856
00:34:48,690 --> 00:34:52,889
your container and then you can proxy

857
00:34:50,429 --> 00:34:56,010
traffic so you can do things like end to

858
00:34:52,889 --> 00:34:58,020
end you know mutual TLS being Gettle and

859
00:34:56,010 --> 00:35:00,480
logging metrics that you want out of

860
00:34:58,020 --> 00:35:02,070
that so if you use in service meshes

861
00:35:00,480 --> 00:35:04,560
then you actually do get a really good

862
00:35:02,070 --> 00:35:06,119
extension of visibility other than that

863
00:35:04,560 --> 00:35:07,799
I found that there's definitely a lot of

864
00:35:06,119 --> 00:35:10,619
kind of Jimmy rigging tools together at

865
00:35:07,800 --> 00:35:11,790
this point to kind of get a view because

866
00:35:10,619 --> 00:35:14,609
you do want to know when people push

867
00:35:11,790 --> 00:35:18,960
stuff right that's new things appear you

868
00:35:14,609 --> 00:35:21,390
kind of want to know about that so in

869
00:35:18,960 --> 00:35:23,580
conclusion there don't break the

870
00:35:21,390 --> 00:35:26,250
feedback cycle and pile up security Det

871
00:35:23,580 --> 00:35:29,460
kind of on the left-hand side there's a

872
00:35:26,250 --> 00:35:32,310
lot of stuff we can do at our cluster

873
00:35:29,460 --> 00:35:34,890
level things we can kind of opinionate

874
00:35:32,310 --> 00:35:37,200
upfront for our developers a lot of it

875
00:35:34,890 --> 00:35:39,720
has to do with how we layout

876
00:35:37,200 --> 00:35:42,808
things like get-ups and how well we obey

877
00:35:39,720 --> 00:35:45,209
kind of some of those rules right if we

878
00:35:42,809 --> 00:35:47,220
are doing the get-ups thing and then

879
00:35:45,210 --> 00:35:49,680
we're giving people like direct cluster

880
00:35:47,220 --> 00:35:51,598
access we've broken a lot of the kind of

881
00:35:49,680 --> 00:35:53,669
advantages right if we're having all of

882
00:35:51,599 --> 00:35:56,609
our infrastructure and code in one place

883
00:35:53,670 --> 00:35:58,440
where it's auditable right like I go

884
00:35:56,609 --> 00:36:00,210
through sock to at my company every year

885
00:35:58,440 --> 00:36:01,650
is anybody who sought to type do it's

886
00:36:00,210 --> 00:36:03,500
the most miserable in the world and

887
00:36:01,650 --> 00:36:05,940
they ask you dumb questions for two days

888
00:36:03,500 --> 00:36:07,349
but it's great because like moving in

889
00:36:05,940 --> 00:36:09,630
this model it's like here you guys go

890
00:36:07,349 --> 00:36:11,190
here's literally argot right if you want

891
00:36:09,630 --> 00:36:13,109
to know why we made a certain change to

892
00:36:11,190 --> 00:36:15,240
our network it's it's all auditable in

893
00:36:13,109 --> 00:36:16,920
one place so just as a business and

894
00:36:15,240 --> 00:36:19,410
found that this is even how to benefit

895
00:36:16,920 --> 00:36:21,240
from that perspective you want your

896
00:36:19,410 --> 00:36:23,368
engineers to move as fast as possible

897
00:36:21,240 --> 00:36:24,629
right like I'm I'm one of those security

898
00:36:23,369 --> 00:36:25,859
people at this point in my career I'm

899
00:36:24,630 --> 00:36:28,200
like just let everybody just write codes

900
00:36:25,859 --> 00:36:29,670
business has to work right but we want

901
00:36:28,200 --> 00:36:32,129
to put as much in place to make sure

902
00:36:29,670 --> 00:36:33,569
that they don't just kind of shoot

903
00:36:32,130 --> 00:36:36,390
themselves in the foot right and so

904
00:36:33,569 --> 00:36:38,819
again how we based on ladies things out

905
00:36:36,390 --> 00:36:42,900
from an IM perspective network

906
00:36:38,819 --> 00:36:45,690
segmentation hiding secrets and just

907
00:36:42,900 --> 00:36:47,910
enforcing good practices all around and

908
00:36:45,690 --> 00:36:49,890
last but not least applying controls at

909
00:36:47,910 --> 00:36:52,288
the levels they make the most sense

910
00:36:49,890 --> 00:36:54,000
right there's certain things that if you

911
00:36:52,289 --> 00:36:55,950
try to apply it to a docker file it's

912
00:36:54,000 --> 00:36:57,000
it's a waste of time this is a better

913
00:36:55,950 --> 00:36:59,038
place to do it at the container

914
00:36:57,000 --> 00:37:01,619
orchestration level and then likewise

915
00:36:59,039 --> 00:37:03,180
you know there's certain things that you

916
00:37:01,619 --> 00:37:06,869
have to think about you know still at

917
00:37:03,180 --> 00:37:08,940
the cloud level as well because if you

918
00:37:06,869 --> 00:37:11,130
for example put all of your container

919
00:37:08,940 --> 00:37:12,660
nodes or you know if you have multiple

920
00:37:11,130 --> 00:37:14,579
clusters you put those in the same VP

921
00:37:12,660 --> 00:37:17,460
sees like now they can all talk to each

922
00:37:14,579 --> 00:37:18,900
other right so you can do good stuff

923
00:37:17,460 --> 00:37:20,640
from a development perspective but if

924
00:37:18,900 --> 00:37:22,260
the infrastructure is broken then

925
00:37:20,640 --> 00:37:25,859
things aren't going to work well either

926
00:37:22,260 --> 00:37:29,029
so that's our talk to everyone thank you

927
00:37:25,859 --> 00:37:29,029
and happy to take any questions

928
00:37:29,190 --> 00:37:32,760
[Applause]

929
00:37:33,569 --> 00:37:37,150
and we got five minutes left for

930
00:37:35,710 --> 00:37:49,329
questions and I've got a microphone if

931
00:37:37,150 --> 00:37:51,160
you have one it remains silent do you

932
00:37:49,329 --> 00:37:56,529
have any experiences you could share

933
00:37:51,160 --> 00:38:00,640
with helm cause I'm curious like to know

934
00:37:56,529 --> 00:38:01,960
more about I'm not really I just you

935
00:38:00,640 --> 00:38:04,660
know if you had like any experiences

936
00:38:01,960 --> 00:38:07,119
like things I should look at yeah you

937
00:38:04,660 --> 00:38:08,890
could sure so his question was about

938
00:38:07,119 --> 00:38:11,739
helm and anything we could share about

939
00:38:08,890 --> 00:38:12,999
securing helm so I'm really looking

940
00:38:11,739 --> 00:38:15,489
forward to helm three and the whole

941
00:38:12,999 --> 00:38:17,649
Tillis approach right so a lot of the

942
00:38:15,489 --> 00:38:19,960
security issues with helm came from the

943
00:38:17,650 --> 00:38:22,630
tiller and just hi that was kind of set

944
00:38:19,960 --> 00:38:24,999
up and so a lot of deployment issues

945
00:38:22,630 --> 00:38:26,829
right for how people kind of over

946
00:38:24,999 --> 00:38:28,959
privilege that tiller and then don't

947
00:38:26,829 --> 00:38:30,460
leave like the you know they're G RPC

948
00:38:28,960 --> 00:38:32,890
endpoints open and you can talk to that

949
00:38:30,460 --> 00:38:35,680
thing right so from that perspective

950
00:38:32,890 --> 00:38:36,999
I've seen just like a lot of deployment

951
00:38:35,680 --> 00:38:39,999
based issues with how people do tiller

952
00:38:36,999 --> 00:38:41,890
or helm right cuz it's always a major

953
00:38:39,999 --> 00:38:43,390
component of it but in helm three

954
00:38:41,890 --> 00:38:46,058
there's the whole tillis approach right

955
00:38:43,390 --> 00:38:47,558
which solves a lot of that so you know

956
00:38:46,059 --> 00:38:49,960
some of the things with like managing

957
00:38:47,559 --> 00:38:51,249
helm service itself get better but then

958
00:38:49,960 --> 00:38:53,950
it still gets down to like you know

959
00:38:51,249 --> 00:38:55,359
managing your charts right you know cuz

960
00:38:53,950 --> 00:38:56,739
that's a place a lot of people haven't

961
00:38:55,359 --> 00:38:58,239
managed like charts right so they've

962
00:38:56,739 --> 00:39:00,369
they've tooled around container

963
00:38:58,239 --> 00:39:02,529
registries and code but they're like oh

964
00:39:00,369 --> 00:39:05,079
well charts what how do I like control

965
00:39:02,529 --> 00:39:07,059
access that how do I and like scan those

966
00:39:05,079 --> 00:39:08,799
things right how do I do all that stuff

967
00:39:07,059 --> 00:39:09,999
so that's that's the other place I see

968
00:39:08,799 --> 00:39:11,259
people you know usually where they go

969
00:39:09,999 --> 00:39:12,759
that model I have to build maturity

970
00:39:11,259 --> 00:39:14,950
around how do you manage like the charts

971
00:39:12,759 --> 00:39:15,819
and everything like that but is that a

972
00:39:14,950 --> 00:39:19,029
good answer does that answer everything

973
00:39:15,819 --> 00:39:21,359
you ask yeah that's helpful thanks cool

974
00:39:19,029 --> 00:39:24,210
anything else are on that should be it

975
00:39:21,359 --> 00:39:26,270
thank you everybody for you thank you

976
00:39:24,210 --> 00:39:26,270
you

