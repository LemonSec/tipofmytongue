1
00:00:00,530 --> 00:00:02,590
you

2
00:00:03,050 --> 00:00:09,440
thank you for joining me here today

3
00:00:06,180 --> 00:00:12,360
I'll be talking about a web

4
00:00:09,440 --> 00:00:13,950
authentication properties its privacy

5
00:00:12,360 --> 00:00:16,590
properties and its convenience

6
00:00:13,950 --> 00:00:18,750
properties to introduce myself

7
00:00:16,590 --> 00:00:21,689
my name is sue B Rahman I'm a software

8
00:00:18,750 --> 00:00:25,020
engineer working for duo security based

9
00:00:21,690 --> 00:00:26,940
out of Michigan in the United States duo

10
00:00:25,020 --> 00:00:29,789
did some of the earliest explorations

11
00:00:26,940 --> 00:00:31,529
with the Levithan API when it was in you

12
00:00:29,789 --> 00:00:33,780
know sort of alpha level format and

13
00:00:31,529 --> 00:00:35,130
earlier this year we rolled out our

14
00:00:33,780 --> 00:00:37,410
integration with lab bought then

15
00:00:35,130 --> 00:00:39,260
providing fast authentication to the

16
00:00:37,410 --> 00:00:42,690
millions of users who rely on us for

17
00:00:39,260 --> 00:00:45,420
secure access to their applications a

18
00:00:42,690 --> 00:00:47,879
show of hands how many people before

19
00:00:45,420 --> 00:00:49,890
today have heard of Levithan all right

20
00:00:47,880 --> 00:00:51,090
so I can I can leave you know all of you

21
00:00:49,890 --> 00:00:54,600
are fine I don't think you need me at

22
00:00:51,090 --> 00:00:56,309
all so now I'm gonna say so in this talk

23
00:00:54,600 --> 00:00:57,960
I'll be going over a few topics to

24
00:00:56,309 --> 00:01:00,089
generally introduce lab off then and

25
00:00:57,960 --> 00:01:01,500
then to describe you know its general

26
00:01:00,090 --> 00:01:03,930
properties that I mentioned

27
00:01:01,500 --> 00:01:06,240
I'll introduce with the general problem

28
00:01:03,930 --> 00:01:07,830
of passwords many of you who are

29
00:01:06,240 --> 00:01:09,390
probably app SEC people are familiar

30
00:01:07,830 --> 00:01:11,369
with this problem but I'll just go over

31
00:01:09,390 --> 00:01:13,380
for it so we can discuss it in the

32
00:01:11,369 --> 00:01:17,159
context of web ought then I'll introduce

33
00:01:13,380 --> 00:01:19,229
the web out then API I will then go over

34
00:01:17,159 --> 00:01:22,380
user and developer convenience with web

35
00:01:19,229 --> 00:01:24,689
off n and then I'll discuss how the

36
00:01:22,380 --> 00:01:27,298
various convenience properties meet up

37
00:01:24,689 --> 00:01:29,429
with the privacy properties a little bit

38
00:01:27,299 --> 00:01:31,470
about duo just so I can explain my work

39
00:01:29,430 --> 00:01:33,540
with web off end one of our core

40
00:01:31,470 --> 00:01:35,520
products is providing two-factor

41
00:01:33,540 --> 00:01:37,140
authentication after some type of

42
00:01:35,520 --> 00:01:39,658
primary authentication succeeds

43
00:01:37,140 --> 00:01:41,220
involving a username and a password a

44
00:01:39,659 --> 00:01:43,830
user is presented with a prompt that

45
00:01:41,220 --> 00:01:45,720
looks like this where they confirm their

46
00:01:43,830 --> 00:01:47,880
authentication event with something like

47
00:01:45,720 --> 00:01:50,340
a push notification a phone call a

48
00:01:47,880 --> 00:01:51,990
passcode or another method with our

49
00:01:50,340 --> 00:01:53,700
integration with web out then we are

50
00:01:51,990 --> 00:01:56,280
able to offer seamless fast

51
00:01:53,700 --> 00:01:58,740
authentication via touch ID or via you

52
00:01:56,280 --> 00:02:00,899
Baqi the user for example will place

53
00:01:58,740 --> 00:02:02,548
their finger on their fingerprint and is

54
00:02:00,899 --> 00:02:04,259
able to quickly proceed without needing

55
00:02:02,549 --> 00:02:06,810
to pull out a phone for a two-factor

56
00:02:04,259 --> 00:02:10,019
event I'm also the author of this

57
00:02:06,810 --> 00:02:11,249
resource here web offend guide I wanted

58
00:02:10,019 --> 00:02:13,319
to make an effort to help introduce

59
00:02:11,249 --> 00:02:15,120
Levithan to the developer community I

60
00:02:13,319 --> 00:02:15,839
partnered with a bunch of other folks at

61
00:02:15,120 --> 00:02:18,750
duo to

62
00:02:15,840 --> 00:02:20,700
this which is available now feel free to

63
00:02:18,750 --> 00:02:22,650
check it out we'll be talking about the

64
00:02:20,700 --> 00:02:26,250
web often a API here but this goes into

65
00:02:22,650 --> 00:02:27,060
it with a little more depth so about

66
00:02:26,250 --> 00:02:28,890
passwords

67
00:02:27,060 --> 00:02:30,930
it's almost everyday that you hear about

68
00:02:28,890 --> 00:02:32,548
a new breach of passwords being leaked

69
00:02:30,930 --> 00:02:34,290
onto the internet so I'd imagine it's

70
00:02:32,549 --> 00:02:36,420
happened to pretty much everyone here

71
00:02:34,290 --> 00:02:37,980
you've received an email saying you need

72
00:02:36,420 --> 00:02:39,319
to urgently change your password because

73
00:02:37,980 --> 00:02:41,879
it's floating around the internet and

74
00:02:39,319 --> 00:02:44,458
once your passwords are gone in many

75
00:02:41,879 --> 00:02:46,920
cases that's it unless you're one of the

76
00:02:44,459 --> 00:02:49,110
relatively uncommon few with two-factor

77
00:02:46,920 --> 00:02:51,290
authentication set up a hacker can

78
00:02:49,110 --> 00:02:53,610
proceed to impersonate your identity

79
00:02:51,290 --> 00:02:55,230
there are some big issues associated

80
00:02:53,610 --> 00:02:57,299
with passwords that many of us here have

81
00:02:55,230 --> 00:02:59,399
encountered passwords are a shared

82
00:02:57,299 --> 00:03:02,190
secret they're hard to create and

83
00:02:59,400 --> 00:03:04,730
remember they're easily stolen they

84
00:03:02,190 --> 00:03:07,500
encourage unsafe reuse and as developers

85
00:03:04,730 --> 00:03:10,920
they're hard to secure I bring these up

86
00:03:07,500 --> 00:03:14,250
because the web often attempts to solve

87
00:03:10,920 --> 00:03:16,649
these problems in a particular way the

88
00:03:14,250 --> 00:03:18,690
problem is shared secrets so this is a

89
00:03:16,650 --> 00:03:20,639
picture of my cat and he is going to be

90
00:03:18,690 --> 00:03:22,470
the user in this exercise so let's say

91
00:03:20,639 --> 00:03:24,690
that he wants to register on my website

92
00:03:22,470 --> 00:03:26,430
he asked to submit a password to me and

93
00:03:24,690 --> 00:03:29,579
I have to persist that password in a

94
00:03:26,430 --> 00:03:32,430
database for future use let's say that a

95
00:03:29,579 --> 00:03:34,470
hacker comes along and decides that he

96
00:03:32,430 --> 00:03:35,880
wants to hack my cut the passwords are

97
00:03:34,470 --> 00:03:37,980
stored in the database so he could go

98
00:03:35,880 --> 00:03:40,290
looking forward there if it's not hashed

99
00:03:37,980 --> 00:03:42,510
and salted correctly he can exit rate it

100
00:03:40,290 --> 00:03:44,880
and use it as he wishes

101
00:03:42,510 --> 00:03:46,649
but if the password is not submitted

102
00:03:44,880 --> 00:03:48,450
over TLS he could also listen and bear

103
00:03:46,650 --> 00:03:50,130
to steal it there's nothing about a

104
00:03:48,450 --> 00:03:56,099
password submission that ensures that

105
00:03:50,130 --> 00:03:57,418
it's being transmitted securely yeah so

106
00:03:56,099 --> 00:04:04,099
I wanted to point out another thing

107
00:03:57,419 --> 00:04:06,150
really quickly after this proceeds so

108
00:04:04,099 --> 00:04:08,190
well let's just keep ahead to this so on

109
00:04:06,150 --> 00:04:09,810
password reuse these are some of the

110
00:04:08,190 --> 00:04:11,489
most common passwords that are commonly

111
00:04:09,810 --> 00:04:13,950
used across the Internet I do love that

112
00:04:11,489 --> 00:04:16,530
people's associate monkeys and Star Wars

113
00:04:13,950 --> 00:04:18,510
with passwords most people really don't

114
00:04:16,529 --> 00:04:21,179
have the energy or desire to generate

115
00:04:18,510 --> 00:04:22,770
complex passwords for every website this

116
00:04:21,180 --> 00:04:24,390
can lead to problems of course since

117
00:04:22,770 --> 00:04:27,539
passwords can be easily guessed and

118
00:04:24,390 --> 00:04:29,180
brute forced in many scenarios the

119
00:04:27,539 --> 00:04:30,919
problem of phishing

120
00:04:29,180 --> 00:04:32,630
fishing is such a pernicious problem

121
00:04:30,919 --> 00:04:34,370
that many organizations have identified

122
00:04:32,630 --> 00:04:36,500
it as the primary security threat to

123
00:04:34,370 --> 00:04:38,530
their organization this is a phishing

124
00:04:36,500 --> 00:04:41,900
campaign that I myself crafted using

125
00:04:38,530 --> 00:04:43,580
fairly accessible online tools these

126
00:04:41,900 --> 00:04:45,650
campaigns to steal passwords are very

127
00:04:43,580 --> 00:04:48,669
easy to set up and very simple to

128
00:04:45,650 --> 00:04:50,929
execute for example take this screenshot

129
00:04:48,669 --> 00:04:52,490
unfortunately you can't read the URL up

130
00:04:50,930 --> 00:04:55,370
there but the URL does not say

131
00:04:52,490 --> 00:04:59,330
google.com at all it says something like

132
00:04:55,370 --> 00:05:01,759
portal - login - online com its purpose

133
00:04:59,330 --> 00:05:03,560
is to steal your Google password most

134
00:05:01,759 --> 00:05:05,270
people don't recognize that most people

135
00:05:03,560 --> 00:05:07,340
don't read the URL bar and that what's

136
00:05:05,270 --> 00:05:08,780
make this attack still effective you

137
00:05:07,340 --> 00:05:10,400
know a password submission looks like a

138
00:05:08,780 --> 00:05:13,869
password submission to most of our users

139
00:05:10,400 --> 00:05:16,429
which makes this attack so effective

140
00:05:13,870 --> 00:05:18,650
according to our data 31 percent of

141
00:05:16,430 --> 00:05:20,840
users click on phishing links and 17

142
00:05:18,650 --> 00:05:23,479
percent of users submit their passwords

143
00:05:20,840 --> 00:05:25,729
to phishing sites this is a very serious

144
00:05:23,479 --> 00:05:28,758
problem and I don't think we should

145
00:05:25,729 --> 00:05:30,800
underestimate the gravity of this all

146
00:05:28,759 --> 00:05:32,750
our users all of us are at risk of

147
00:05:30,800 --> 00:05:35,720
having our privacy violated in early

148
00:05:32,750 --> 00:05:37,940
vicious ways activists for example are

149
00:05:35,720 --> 00:05:39,650
at particular risk of being targeted and

150
00:05:37,940 --> 00:05:42,169
sophisticated phishing campaigns by

151
00:05:39,650 --> 00:05:43,520
state and non-state actors the

152
00:05:42,169 --> 00:05:45,830
repercussions of having your personal

153
00:05:43,520 --> 00:05:49,010
data stolen as an activist can be really

154
00:05:45,830 --> 00:05:50,630
grave phishing attacks can alter the

155
00:05:49,010 --> 00:05:52,400
shape of history potentially like when a

156
00:05:50,630 --> 00:05:54,380
Russian hacking group infiltrated the

157
00:05:52,400 --> 00:05:57,590
emails of the Hillary Clinton campaign

158
00:05:54,380 --> 00:05:59,509
in America in 2016 I've heard people

159
00:05:57,590 --> 00:06:01,099
openly wondering that perhaps we may

160
00:05:59,509 --> 00:06:04,729
have a different president if this

161
00:06:01,099 --> 00:06:09,169
campaign did not succeed so on password

162
00:06:04,729 --> 00:06:11,060
reuse obviously people here are you know

163
00:06:09,169 --> 00:06:12,830
they know about this issue they are less

164
00:06:11,060 --> 00:06:15,320
likely to reuse passwords but out in the

165
00:06:12,830 --> 00:06:16,758
real world people do for some of the

166
00:06:15,320 --> 00:06:18,889
reasons I've mentioned passwords are

167
00:06:16,759 --> 00:06:21,009
hard and annoying to remember we can

168
00:06:18,889 --> 00:06:23,539
only stuff so much into our brains

169
00:06:21,009 --> 00:06:25,280
the typical recommendation is to use a

170
00:06:23,539 --> 00:06:27,590
password management tool that can

171
00:06:25,280 --> 00:06:30,500
randomly generate and securely store

172
00:06:27,590 --> 00:06:32,659
passwords this is nice but it's also

173
00:06:30,500 --> 00:06:34,280
another tool that sort of complicates

174
00:06:32,659 --> 00:06:36,409
the whole user experience it's a bit

175
00:06:34,280 --> 00:06:39,710
cumbersome most users just want to get

176
00:06:36,409 --> 00:06:41,840
to their email another big piece here is

177
00:06:39,710 --> 00:06:42,539
the late developer Zend up interacting

178
00:06:41,840 --> 00:06:45,060
with password

179
00:06:42,540 --> 00:06:46,560
even at companies with very very smart

180
00:06:45,060 --> 00:06:49,350
software engineers and great security

181
00:06:46,560 --> 00:06:51,420
teams all it takes is one bug hiding in

182
00:06:49,350 --> 00:06:54,060
a huge software architecture and the

183
00:06:51,420 --> 00:06:55,920
password is potentially gone and if

184
00:06:54,060 --> 00:06:58,440
these organizations can't get

185
00:06:55,920 --> 00:07:00,000
password-based authentication right I

186
00:06:58,440 --> 00:07:02,150
want to ask what hope is there

187
00:07:00,000 --> 00:07:05,310
ultimately for the rest of us

188
00:07:02,150 --> 00:07:07,679
so our instinct may be to blame the

189
00:07:05,310 --> 00:07:09,300
users here after all they're doing so

190
00:07:07,680 --> 00:07:10,710
many things wrong even the developers

191
00:07:09,300 --> 00:07:13,800
are doing things wrong they're so dumb

192
00:07:10,710 --> 00:07:15,390
why can't everyone just be smarter but I

193
00:07:13,800 --> 00:07:17,550
think this is the wrong instinct if

194
00:07:15,390 --> 00:07:19,229
these issues keep happening even to

195
00:07:17,550 --> 00:07:21,000
smart people we shouldn't be trying to

196
00:07:19,230 --> 00:07:23,280
blame the victims a password theft this

197
00:07:21,000 --> 00:07:26,550
is a systemic issue and it requires a

198
00:07:23,280 --> 00:07:28,739
systemic solution this is a great quote

199
00:07:26,550 --> 00:07:31,230
that I really feel helps boil the

200
00:07:28,740 --> 00:07:33,300
problem down to that of design so

201
00:07:31,230 --> 00:07:35,130
blaming the users for the usability

202
00:07:33,300 --> 00:07:36,960
problems a password is not an exercise

203
00:07:35,130 --> 00:07:39,390
that will ultimately solve the problem

204
00:07:36,960 --> 00:07:41,070
because the ultimate design of passwords

205
00:07:39,390 --> 00:07:44,849
relies on our brains and our brains are

206
00:07:41,070 --> 00:07:46,980
very fallible things the net result of

207
00:07:44,850 --> 00:07:49,710
the design is this we're at a point

208
00:07:46,980 --> 00:07:52,350
where like this report says if passwords

209
00:07:49,710 --> 00:07:53,909
were sufficiently replaced 80% of data

210
00:07:52,350 --> 00:07:59,520
breach related attacks would have to

211
00:07:53,910 --> 00:08:01,650
adapt or dive to come back to the

212
00:07:59,520 --> 00:08:03,719
overall picture of password interaction

213
00:08:01,650 --> 00:08:06,450
a shared secret exists which the user

214
00:08:03,720 --> 00:08:08,130
has but the relying party also has the

215
00:08:06,450 --> 00:08:09,659
attacker can steal this password from a

216
00:08:08,130 --> 00:08:11,310
number of different points if he

217
00:08:09,660 --> 00:08:14,990
successfully gets it he's able to

218
00:08:11,310 --> 00:08:16,680
impersonate the user however what if

219
00:08:14,990 --> 00:08:18,600
introduction to a public key

220
00:08:16,680 --> 00:08:20,100
cryptography here there were two keys

221
00:08:18,600 --> 00:08:22,350
that could be used to identify and

222
00:08:20,100 --> 00:08:24,450
authenticate me one key remains with the

223
00:08:22,350 --> 00:08:27,210
user in private the other can be shared

224
00:08:24,450 --> 00:08:29,159
publicly with anyone so you can send it

225
00:08:27,210 --> 00:08:32,848
to the server it can be persisted in the

226
00:08:29,160 --> 00:08:34,260
database shared openly what is important

227
00:08:32,849 --> 00:08:36,390
here is that the combination of the two

228
00:08:34,260 --> 00:08:38,939
keys is what is used to authenticate the

229
00:08:36,390 --> 00:08:40,770
user so there is no shared secret if the

230
00:08:38,940 --> 00:08:44,000
hacker goes and steals the public key

231
00:08:40,770 --> 00:08:46,350
the hacker cannot do anything with it

232
00:08:44,000 --> 00:08:48,000
this is the promise of public key

233
00:08:46,350 --> 00:08:48,720
cryptography and this is the promise of

234
00:08:48,000 --> 00:08:51,540
live off man

235
00:08:48,720 --> 00:08:53,220
it allows relying parties application

236
00:08:51,540 --> 00:08:54,140
developers to authenticate their users

237
00:08:53,220 --> 00:08:56,360
using

238
00:08:54,140 --> 00:08:58,399
the key cryptography and it now works

239
00:08:56,360 --> 00:09:00,440
and is now available in a browser API

240
00:08:58,399 --> 00:09:04,640
that's available or under development in

241
00:09:00,440 --> 00:09:06,860
all major browsers so first I will go

242
00:09:04,640 --> 00:09:09,560
over the security properties of web out

243
00:09:06,860 --> 00:09:11,899
then and just as a general glossary of

244
00:09:09,560 --> 00:09:13,969
terms I'm going to use an Authenticator

245
00:09:11,899 --> 00:09:16,700
is the hardware that the user interacts

246
00:09:13,970 --> 00:09:20,540
with for registering and authenticating

247
00:09:16,700 --> 00:09:22,430
the credential is the term used to refer

248
00:09:20,540 --> 00:09:25,519
to the private public key pair that is

249
00:09:22,430 --> 00:09:27,859
used for authenticating the relying

250
00:09:25,519 --> 00:09:30,079
party is the entity or organization

251
00:09:27,860 --> 00:09:31,850
responsible for registering and

252
00:09:30,079 --> 00:09:33,410
authenticating users if you're an

253
00:09:31,850 --> 00:09:37,760
application developer you are the

254
00:09:33,410 --> 00:09:39,079
relying party at a high-level web often

255
00:09:37,760 --> 00:09:40,939
can be described with a few

256
00:09:39,079 --> 00:09:42,349
characteristics I apologize if you're

257
00:09:40,940 --> 00:09:43,519
trying to take pictures I promise I'll

258
00:09:42,350 --> 00:09:46,190
share the slides out later so know more

259
00:09:43,519 --> 00:09:47,899
about that I know I'm going fast I could

260
00:09:46,190 --> 00:09:49,670
be described as strong it can be

261
00:09:47,899 --> 00:09:51,290
described as scoped and it can be

262
00:09:49,670 --> 00:09:53,029
described as a tested and I'm going to

263
00:09:51,290 --> 00:09:56,569
go through all of these terms in some

264
00:09:53,029 --> 00:09:58,130
detail when I say strong I'm not really

265
00:09:56,570 --> 00:09:59,930
referring to the fact that you can use a

266
00:09:58,130 --> 00:10:02,000
biometric Authenticator though that is

267
00:09:59,930 --> 00:10:04,189
really cool what I mean is that on many

268
00:10:02,000 --> 00:10:06,199
of your devices today we have or we can

269
00:10:04,190 --> 00:10:07,699
add entirely separate computers that are

270
00:10:06,199 --> 00:10:10,040
capable of secure cryptographic

271
00:10:07,699 --> 00:10:12,410
operations these are often called

272
00:10:10,040 --> 00:10:14,060
trusted platform modules and in iOS

273
00:10:12,410 --> 00:10:16,699
context you'll see this referred to as a

274
00:10:14,060 --> 00:10:18,768
secure Enclave this is really cool

275
00:10:16,699 --> 00:10:20,660
because a particular weakness of public

276
00:10:18,769 --> 00:10:23,120
key cryptography is that the private key

277
00:10:20,660 --> 00:10:25,160
can still be stolen this separate

278
00:10:23,120 --> 00:10:30,079
hardware makes it really a bit more

279
00:10:25,160 --> 00:10:31,939
difficult to do so scoping scoping is an

280
00:10:30,079 --> 00:10:34,099
important way to protect and mitigate

281
00:10:31,940 --> 00:10:36,410
against many common types of phishing

282
00:10:34,100 --> 00:10:38,449
attacks an important property of web off

283
00:10:36,410 --> 00:10:40,610
man is that a credential the private

284
00:10:38,449 --> 00:10:44,209
public key pair can only be used at a

285
00:10:40,610 --> 00:10:46,010
specific origin for example a wasp org

286
00:10:44,209 --> 00:10:47,839
I'll talk more about how the key pair

287
00:10:46,010 --> 00:10:50,240
works later but let's say the user is

288
00:10:47,839 --> 00:10:52,339
trying to log into ooc org

289
00:10:50,240 --> 00:10:54,800
if he has previously registered a

290
00:10:52,339 --> 00:10:57,190
credential with that ID he can proceed

291
00:10:54,800 --> 00:11:01,029
because the credential key pair is

292
00:10:57,190 --> 00:11:03,050
associated with a particular origin

293
00:11:01,029 --> 00:11:04,730
so you could think about this like

294
00:11:03,050 --> 00:11:06,589
browser cookies you can only use and

295
00:11:04,730 --> 00:11:09,800
read a browser cookie at a particular

296
00:11:06,589 --> 00:11:12,529
origin well about ten occasion works the

297
00:11:09,800 --> 00:11:14,349
same way let's say that a hacker has set

298
00:11:12,529 --> 00:11:17,930
up a website that impersonates

299
00:11:14,350 --> 00:11:20,899
Olaf's org except the origin is evil -

300
00:11:17,930 --> 00:11:22,550
Oh wasp org he sends the user there

301
00:11:20,899 --> 00:11:25,699
because he wants to trick the user into

302
00:11:22,550 --> 00:11:27,680
giving him data when the user attempts

303
00:11:25,699 --> 00:11:29,959
to authenticate the Authenticator will

304
00:11:27,680 --> 00:11:31,910
just reject the authentication out right

305
00:11:29,959 --> 00:11:34,040
because the credential wasn't registered

306
00:11:31,910 --> 00:11:36,170
on that or injen it's not bound to that

307
00:11:34,040 --> 00:11:37,910
particular origin this helps to mitigate

308
00:11:36,170 --> 00:11:41,899
against many common types of phishing

309
00:11:37,910 --> 00:11:45,170
attacks at a station at a station is a

310
00:11:41,899 --> 00:11:46,220
big topic it's a complex topic and we're

311
00:11:45,170 --> 00:11:47,599
going to be using we're gonna be

312
00:11:46,220 --> 00:11:49,730
discussing it later and the privacy

313
00:11:47,600 --> 00:11:51,230
conversation will have but at a high

314
00:11:49,730 --> 00:11:53,990
level it's a way to cryptographically

315
00:11:51,230 --> 00:11:58,040
prove that a credential key pair came

316
00:11:53,990 --> 00:11:59,779
from a particular Authenticator this is

317
00:11:58,040 --> 00:12:01,790
the basic flow of how attestation works

318
00:11:59,779 --> 00:12:04,069
during registration when the key pair is

319
00:12:01,790 --> 00:12:06,079
being created the Authenticator provides

320
00:12:04,069 --> 00:12:08,300
a certificate that the server can verify

321
00:12:06,079 --> 00:12:10,040
the relying party can use this

322
00:12:08,300 --> 00:12:12,019
certificate to determine that yes the

323
00:12:10,040 --> 00:12:13,550
key pair did in fact come from an

324
00:12:12,019 --> 00:12:16,029
Authenticator we approve of like

325
00:12:13,550 --> 00:12:20,089
something like Windows hello or touch ID

326
00:12:16,029 --> 00:12:22,100
if Darth Vader or some less malicious

327
00:12:20,089 --> 00:12:23,300
user is intentionally using an a faulty

328
00:12:22,100 --> 00:12:25,490
Authenticator like a garbage

329
00:12:23,300 --> 00:12:27,199
Authenticator that barely works the

330
00:12:25,490 --> 00:12:29,120
relying party can make blacklist

331
00:12:27,199 --> 00:12:33,099
decisions using this data and to

332
00:12:29,120 --> 00:12:35,600
successfully deny the registration event

333
00:12:33,100 --> 00:12:38,120
so now we're going to do an introduction

334
00:12:35,600 --> 00:12:40,069
to the API because I feel it will be

335
00:12:38,120 --> 00:12:43,220
helpful for explaining the overall

336
00:12:40,069 --> 00:12:45,110
security properties of web off n so

337
00:12:43,220 --> 00:12:47,209
registration this is where the

338
00:12:45,110 --> 00:12:51,250
Authenticator creates a key pair and

339
00:12:47,209 --> 00:12:53,449
gives the relying party the public key

340
00:12:51,250 --> 00:12:55,730
we can take a look at what the flow

341
00:12:53,449 --> 00:12:58,069
looks like at a high level the server

342
00:12:55,730 --> 00:13:00,379
requests the Authenticator to create a

343
00:12:58,069 --> 00:13:02,089
new key pair this key pair is then

344
00:13:00,379 --> 00:13:04,459
produced by the Authenticator a new

345
00:13:02,089 --> 00:13:07,779
private public heat and the public key

346
00:13:04,459 --> 00:13:10,518
is then sent to the server for storage

347
00:13:07,779 --> 00:13:12,500
the fact I want to point out here the

348
00:13:10,519 --> 00:13:14,300
fact that an Authenticator that is built

349
00:13:12,500 --> 00:13:16,430
into your device is responsible for

350
00:13:14,300 --> 00:13:18,829
and keys is actually itself a big step

351
00:13:16,430 --> 00:13:20,060
forward instead of forcing users to go

352
00:13:18,830 --> 00:13:22,370
through the hassle of creating

353
00:13:20,060 --> 00:13:23,900
passphrases themselves the hardware

354
00:13:22,370 --> 00:13:27,980
itself is now taking care of that

355
00:13:23,900 --> 00:13:30,199
responsibility on the front end side

356
00:13:27,980 --> 00:13:31,730
this is the essential API that's you

357
00:13:30,200 --> 00:13:33,560
were what you will work with as a

358
00:13:31,730 --> 00:13:35,630
developer as a developer there's two

359
00:13:33,560 --> 00:13:38,150
important functions one for registration

360
00:13:35,630 --> 00:13:39,890
one for authentication to create a new

361
00:13:38,150 --> 00:13:41,959
credential key pair you call navigator

362
00:13:39,890 --> 00:13:43,699
dot credentials dot create with the

363
00:13:41,960 --> 00:13:46,820
configuration object I will talk about

364
00:13:43,700 --> 00:13:48,860
in a little second I do want to point

365
00:13:46,820 --> 00:13:51,080
out this a weight keyword which

366
00:13:48,860 --> 00:13:52,850
signifies that this returns a promise

367
00:13:51,080 --> 00:13:55,190
it's an asynchronous operation all

368
00:13:52,850 --> 00:13:57,020
functions with the webathon api are

369
00:13:55,190 --> 00:14:00,170
asynchronous this is for a few important

370
00:13:57,020 --> 00:14:02,780
reasons the first one we cannot register

371
00:14:00,170 --> 00:14:05,120
or authenticate a user without explicit

372
00:14:02,780 --> 00:14:07,280
user consent which will be important for

373
00:14:05,120 --> 00:14:08,690
the privacy conversations consent is

374
00:14:07,280 --> 00:14:10,790
something like the user tapping a

375
00:14:08,690 --> 00:14:12,230
security key putting their fingerprint

376
00:14:10,790 --> 00:14:14,060
to a fingerprint reader some type of

377
00:14:12,230 --> 00:14:16,520
physical interaction that says yes I

378
00:14:14,060 --> 00:14:19,219
consent to this event another reason is

379
00:14:16,520 --> 00:14:21,560
that this allows time for the users to

380
00:14:19,220 --> 00:14:23,030
successfully pair a security key they

381
00:14:21,560 --> 00:14:26,900
might have with them via Bluetooth or

382
00:14:23,030 --> 00:14:28,189
NFC from UI perspective the website will

383
00:14:26,900 --> 00:14:30,949
show something like this during

384
00:14:28,190 --> 00:14:33,290
registration the API call will summon an

385
00:14:30,950 --> 00:14:34,850
Authenticator like windows hello to

386
00:14:33,290 --> 00:14:37,040
verify the user and to create a

387
00:14:34,850 --> 00:14:38,960
credential after that's finished the

388
00:14:37,040 --> 00:14:41,420
user waits for the relying party to

389
00:14:38,960 --> 00:14:43,340
verify this data and if the server is

390
00:14:41,420 --> 00:14:49,910
verified the user can proceed they are

391
00:14:43,340 --> 00:14:51,560
registered let's go over a fortunate of

392
00:14:49,910 --> 00:14:53,569
the contrast there is a to great but

393
00:14:51,560 --> 00:14:56,060
hopefully you can read it we can talk

394
00:14:53,570 --> 00:14:57,860
about the configuration that you can

395
00:14:56,060 --> 00:14:59,510
pass in to this function this is more or

396
00:14:57,860 --> 00:15:01,550
less the minimal configuration that's

397
00:14:59,510 --> 00:15:03,770
required there's more options more

398
00:15:01,550 --> 00:15:06,349
extensions you can pass in but this is

399
00:15:03,770 --> 00:15:09,260
sort of the minimal part so at the top

400
00:15:06,350 --> 00:15:11,210
there is a challenge this must be

401
00:15:09,260 --> 00:15:13,130
cryptographically random bytes that are

402
00:15:11,210 --> 00:15:14,630
generated on the server it's important

403
00:15:13,130 --> 00:15:17,390
to mitigate replay attacks in this

404
00:15:14,630 --> 00:15:19,910
context the string that's passed in here

405
00:15:17,390 --> 00:15:21,770
is verified on the server to confirm

406
00:15:19,910 --> 00:15:23,900
that the registration event occurred in

407
00:15:21,770 --> 00:15:25,850
the same session it's not being replayed

408
00:15:23,900 --> 00:15:29,009
by a malicious user

409
00:15:25,850 --> 00:15:31,529
Arpi if you can see that it stands for a

410
00:15:29,009 --> 00:15:35,249
relying party again which is a term that

411
00:15:31,529 --> 00:15:38,399
we've used often so far what's important

412
00:15:35,249 --> 00:15:42,209
here is the ID that ID reads duo

413
00:15:38,399 --> 00:15:43,709
security comm the ID must be a subset of

414
00:15:42,209 --> 00:15:46,410
the origin that's currently in the

415
00:15:43,709 --> 00:15:50,008
browser window because the credential is

416
00:15:46,410 --> 00:15:52,799
bound to this ID the user information

417
00:15:50,009 --> 00:15:54,360
the credential is also bound to a

418
00:15:52,799 --> 00:15:57,360
particular user that's currently

419
00:15:54,360 --> 00:15:59,519
registering so the user ID here is used

420
00:15:57,360 --> 00:16:03,959
to bind to the credential to the user as

421
00:15:59,519 --> 00:16:07,980
well pub key cred params this is a

422
00:16:03,959 --> 00:16:10,979
particular it's a particular array which

423
00:16:07,980 --> 00:16:12,749
says what is acceptable to the relying

424
00:16:10,980 --> 00:16:15,809
party in terms of key pair algorithms

425
00:16:12,749 --> 00:16:18,389
I'll discuss this a little bit later in

426
00:16:15,809 --> 00:16:19,949
terms of the privacy conversation but

427
00:16:18,389 --> 00:16:21,629
you might want to specify that your

428
00:16:19,949 --> 00:16:23,429
back-end is only capable of parsing

429
00:16:21,629 --> 00:16:27,899
certain algorithms this is where you do

430
00:16:23,429 --> 00:16:29,369
so so we can go over briefly the data

431
00:16:27,899 --> 00:16:31,049
that is retrieved from credential

432
00:16:29,369 --> 00:16:34,559
creation and it's broken down into two

433
00:16:31,049 --> 00:16:35,999
parts the client data JSON which is data

434
00:16:34,559 --> 00:16:39,290
passed from the browser to the

435
00:16:35,999 --> 00:16:42,240
Authenticator and the attestation object

436
00:16:39,290 --> 00:16:45,240
this is data that is generated by the

437
00:16:42,240 --> 00:16:48,329
Authenticator it contains the public key

438
00:16:45,240 --> 00:16:50,249
as attestation certificate other useful

439
00:16:48,329 --> 00:16:53,368
metadata that can be used by the relying

440
00:16:50,249 --> 00:16:55,649
party this is an example of the client

441
00:16:53,369 --> 00:16:58,290
data JSON you get back the challenge the

442
00:16:55,649 --> 00:17:00,480
origin and the type of the operation

443
00:16:58,290 --> 00:17:02,849
these need to be carefully verified on

444
00:17:00,480 --> 00:17:05,339
the server to ensure the validity of the

445
00:17:02,850 --> 00:17:07,409
registration ceremony like I mentioned

446
00:17:05,339 --> 00:17:09,089
you have to check the challenge you have

447
00:17:07,409 --> 00:17:11,100
to confirm that the origin matches up to

448
00:17:09,089 --> 00:17:12,958
expectations I'm not going to go through

449
00:17:11,099 --> 00:17:14,609
all the verification steps but there's a

450
00:17:12,959 --> 00:17:17,639
bit of legwork that has to be done with

451
00:17:14,609 --> 00:17:19,799
Levithan and a bit of care the

452
00:17:17,638 --> 00:17:21,658
attestation object this is a pretty

453
00:17:19,799 --> 00:17:24,799
complex object that contains data

454
00:17:21,659 --> 00:17:27,569
encoded in a number of different ways

455
00:17:24,799 --> 00:17:30,570
this is a diagram with lots of boxes and

456
00:17:27,569 --> 00:17:32,399
arrows the object is variable because we

457
00:17:30,570 --> 00:17:34,408
can receive attestation data in a number

458
00:17:32,399 --> 00:17:37,110
of different formats for example touch

459
00:17:34,409 --> 00:17:38,910
ID will provide data in a format that's

460
00:17:37,110 --> 00:17:40,560
different than au bequite

461
00:17:38,910 --> 00:17:42,390
also is important because it contains

462
00:17:40,560 --> 00:17:44,879
the credential public key which is in

463
00:17:42,390 --> 00:17:47,550
there which we need on the server to

464
00:17:44,880 --> 00:17:48,600
conduct authentications I don't know if

465
00:17:47,550 --> 00:17:51,330
you can see it but there's something

466
00:17:48,600 --> 00:17:54,800
called an a AG UID which is going to be

467
00:17:51,330 --> 00:17:58,260
important for the privacy conversation

468
00:17:54,800 --> 00:18:01,290
really quick we can also go over how the

469
00:17:58,260 --> 00:18:04,129
public key is encoded it's encoded in a

470
00:18:01,290 --> 00:18:07,649
format called coasts which is concise

471
00:18:04,130 --> 00:18:10,170
object signing and encryption which

472
00:18:07,650 --> 00:18:12,960
basically compresses all of the fields

473
00:18:10,170 --> 00:18:15,570
you need in order to like securely or

474
00:18:12,960 --> 00:18:18,450
like concisely store a public key into

475
00:18:15,570 --> 00:18:20,129
this format this might not be terribly

476
00:18:18,450 --> 00:18:22,860
meaningful for you but all of these map

477
00:18:20,130 --> 00:18:25,140
to human readable fields like the public

478
00:18:22,860 --> 00:18:27,659
key type is easy to the signature

479
00:18:25,140 --> 00:18:30,420
algorithm is easy 256 this is the curve

480
00:18:27,660 --> 00:18:32,490
type is the x coordinate this is the y

481
00:18:30,420 --> 00:18:35,100
coordinate all this information is

482
00:18:32,490 --> 00:18:38,510
needed in order to conduct verification

483
00:18:35,100 --> 00:18:41,189
operations so the attestation

484
00:18:38,510 --> 00:18:42,960
certificate which is part of the auto

485
00:18:41,190 --> 00:18:44,640
station object now remember out of

486
00:18:42,960 --> 00:18:47,220
stations a way to cryptographically

487
00:18:44,640 --> 00:18:50,280
prove that a public key came from an

488
00:18:47,220 --> 00:18:52,890
Authenticator it does things like prove

489
00:18:50,280 --> 00:18:56,040
that the key pair came from touch ID and

490
00:18:52,890 --> 00:18:57,870
not from a notepad file somewhere so

491
00:18:56,040 --> 00:18:59,760
this is what it looks like if you break

492
00:18:57,870 --> 00:19:02,520
out the attestation object in the

493
00:18:59,760 --> 00:19:05,100
browser console you have members like

494
00:19:02,520 --> 00:19:08,850
the Ida station statement which contains

495
00:19:05,100 --> 00:19:10,980
a sig member and an x5c member the sig

496
00:19:08,850 --> 00:19:13,290
is the signature here that was generated

497
00:19:10,980 --> 00:19:16,890
during this registration event x5c

498
00:19:13,290 --> 00:19:18,210
stands for the x.509 certificate which

499
00:19:16,890 --> 00:19:22,080
you know if you're an application

500
00:19:18,210 --> 00:19:24,120
security are very familiar with so at a

501
00:19:22,080 --> 00:19:26,389
high level this is pseudocode for what

502
00:19:24,120 --> 00:19:27,959
the attestation process looks like

503
00:19:26,390 --> 00:19:31,260
unfortunately again it's a little

504
00:19:27,960 --> 00:19:33,330
difficult to read but on the server you

505
00:19:31,260 --> 00:19:35,490
have the basic ability to use the

506
00:19:33,330 --> 00:19:37,620
certificate that the public he did in

507
00:19:35,490 --> 00:19:39,750
fact come from the Authenticator that

508
00:19:37,620 --> 00:19:41,699
you expect you can use this affricate

509
00:19:39,750 --> 00:19:43,740
the certificate to make white list black

510
00:19:41,700 --> 00:19:45,360
that life's decisions you can keep the

511
00:19:43,740 --> 00:19:47,640
certificate on our revocation list if

512
00:19:45,360 --> 00:19:49,149
you want it's an important mechanism for

513
00:19:47,640 --> 00:19:51,280
relying parties

514
00:19:49,150 --> 00:19:54,280
so after this you are done with

515
00:19:51,280 --> 00:19:56,290
registration you store the public key on

516
00:19:54,280 --> 00:19:59,350
the server because the public key will

517
00:19:56,290 --> 00:20:01,300
be used for authentications which we'll

518
00:19:59,350 --> 00:20:03,189
talk about now

519
00:20:01,300 --> 00:20:05,050
this part will be shorter I know I went

520
00:20:03,190 --> 00:20:07,540
through quite a bit but authentication

521
00:20:05,050 --> 00:20:09,909
is a bit simpler this is where the user

522
00:20:07,540 --> 00:20:12,309
proves that they own the private key

523
00:20:09,910 --> 00:20:13,930
that they registered with in other words

524
00:20:12,309 --> 00:20:16,870
they assert that they own the private

525
00:20:13,930 --> 00:20:18,520
key but how do they prove it the

526
00:20:16,870 --> 00:20:21,669
Authenticator makes this assertion by

527
00:20:18,520 --> 00:20:24,160
creating a signature this signature is

528
00:20:21,670 --> 00:20:26,650
created over the client data JSON that

529
00:20:24,160 --> 00:20:28,990
we mentioned before as well as data that

530
00:20:26,650 --> 00:20:31,330
is generated about the authentication

531
00:20:28,990 --> 00:20:33,610
event itself so the signature is

532
00:20:31,330 --> 00:20:35,980
generated with the private key and this

533
00:20:33,610 --> 00:20:39,309
signature is then passed the relying

534
00:20:35,980 --> 00:20:41,500
party the relying party it then verifies

535
00:20:39,309 --> 00:20:46,000
the signature with the public key that

536
00:20:41,500 --> 00:20:47,679
was provided during registration again

537
00:20:46,000 --> 00:20:49,330
we have a function call that looks a lot

538
00:20:47,679 --> 00:20:50,650
similar to the one that we had before

539
00:20:49,330 --> 00:20:53,830
except we use a function called

540
00:20:50,650 --> 00:20:56,860
navigator credentials get which requests

541
00:20:53,830 --> 00:20:58,600
an assertion the experience for our

542
00:20:56,860 --> 00:21:00,520
users look something like this very

543
00:20:58,600 --> 00:21:02,740
similar to what we had before the API is

544
00:21:00,520 --> 00:21:04,510
called which requests an Authenticator

545
00:21:02,740 --> 00:21:06,610
to use something like Windows hello to

546
00:21:04,510 --> 00:21:08,379
like read your face and authenticate the

547
00:21:06,610 --> 00:21:10,689
user these are then goes through the

548
00:21:08,380 --> 00:21:14,950
authentication flow and if everything is

549
00:21:10,690 --> 00:21:16,660
verified they are logged in so let's

550
00:21:14,950 --> 00:21:19,390
take a look again at the code needed to

551
00:21:16,660 --> 00:21:20,770
make this happen I will sort of narrate

552
00:21:19,390 --> 00:21:23,350
it because again it's a little difficult

553
00:21:20,770 --> 00:21:24,820
to read the challenge is again much is

554
00:21:23,350 --> 00:21:27,520
the same as before the challenge is

555
00:21:24,820 --> 00:21:30,490
needed to mitigate replay attacks the RP

556
00:21:27,520 --> 00:21:33,670
be relying party information again much

557
00:21:30,490 --> 00:21:37,660
the same as before allow credentials is

558
00:21:33,670 --> 00:21:41,320
a new array of objects that is needed

559
00:21:37,660 --> 00:21:45,130
here in order to specify the credential

560
00:21:41,320 --> 00:21:46,270
that was get or sorry it's where you

561
00:21:45,130 --> 00:21:47,620
tell the browser to contact the

562
00:21:46,270 --> 00:21:49,600
authentic the Authenticator that was

563
00:21:47,620 --> 00:21:51,159
registered before and you can use the

564
00:21:49,600 --> 00:21:52,990
credential ID that was given to use

565
00:21:51,160 --> 00:21:55,240
during registration so you can also

566
00:21:52,990 --> 00:21:56,950
specify multiple different

567
00:21:55,240 --> 00:21:59,610
authenticators here that are acceptable

568
00:21:56,950 --> 00:21:59,610
to the relying party

569
00:21:59,650 --> 00:22:04,240
the server then verifies the assertion

570
00:22:02,130 --> 00:22:05,920
this is all pseudo code because

571
00:22:04,240 --> 00:22:08,170
cryptographic signing looks different in

572
00:22:05,920 --> 00:22:10,030
every language but at a high level use

573
00:22:08,170 --> 00:22:12,880
the bytes from the Authenticator data

574
00:22:10,030 --> 00:22:15,010
and the client data JSON and you verify

575
00:22:12,880 --> 00:22:16,660
that the signature you received over

576
00:22:15,010 --> 00:22:19,750
these bytes if the verification process

577
00:22:16,660 --> 00:22:23,110
succeeds the user is authenticated they

578
00:22:19,750 --> 00:22:25,059
can proceed into your application okay

579
00:22:23,110 --> 00:22:27,790
so that was a lot of code we are done

580
00:22:25,059 --> 00:22:29,950
looking at code so it's gonna get a

581
00:22:27,790 --> 00:22:31,330
little bit easier now but we're gonna

582
00:22:29,950 --> 00:22:33,160
shift the conversation to talk a bit

583
00:22:31,330 --> 00:22:34,990
about the user convenience side of

584
00:22:33,160 --> 00:22:36,520
things I've already talked a bit about

585
00:22:34,990 --> 00:22:38,140
how users don't have to remember

586
00:22:36,520 --> 00:22:40,780
multiple passwords they don't need to

587
00:22:38,140 --> 00:22:42,309
you know do various cumbersome things

588
00:22:40,780 --> 00:22:44,559
that are required with passwords all

589
00:22:42,309 --> 00:22:45,760
they need to do is tap a Yubikey put

590
00:22:44,559 --> 00:22:47,440
their fingerprint on a fingerprint

591
00:22:45,760 --> 00:22:50,440
reader the hardware does all the hard

592
00:22:47,440 --> 00:22:52,210
work for them so in the context of

593
00:22:50,440 --> 00:22:54,160
primary authentication

594
00:22:52,210 --> 00:22:56,170
well bathin goes a long way to answer

595
00:22:54,160 --> 00:22:58,360
some of the common issues with passwords

596
00:22:56,170 --> 00:23:00,880
the problem of passwords being a shared

597
00:22:58,360 --> 00:23:03,520
secret in this case the public key is

598
00:23:00,880 --> 00:23:05,830
not secret passwords being hard to

599
00:23:03,520 --> 00:23:07,570
create and remember in this case the

600
00:23:05,830 --> 00:23:10,030
Authenticator itself is creating the

601
00:23:07,570 --> 00:23:12,669
random and secure credential passwords

602
00:23:10,030 --> 00:23:14,379
being easily stolen in this case the

603
00:23:12,670 --> 00:23:17,290
secure Hardware on devices makes

604
00:23:14,380 --> 00:23:19,720
credential theft difficult passwords

605
00:23:17,290 --> 00:23:21,280
encouraging unsafe reuse because of

606
00:23:19,720 --> 00:23:24,700
these sculpting properties of web off

607
00:23:21,280 --> 00:23:27,190
then it makes reuse difficult passwords

608
00:23:24,700 --> 00:23:29,080
being hard to secure as developers in

609
00:23:27,190 --> 00:23:32,559
this case again at the credential public

610
00:23:29,080 --> 00:23:35,520
key is not secret and so it potentially

611
00:23:32,559 --> 00:23:38,920
eases some of the complexity there a

612
00:23:35,520 --> 00:23:40,990
major perk of weboth end it will be able

613
00:23:38,920 --> 00:23:42,880
to integrate with authenticators that

614
00:23:40,990 --> 00:23:44,580
are now integrated into your devices

615
00:23:42,880 --> 00:23:46,720
like many of you have iPhones or

616
00:23:44,580 --> 00:23:49,689
possibly have surface books with Windows

617
00:23:46,720 --> 00:23:52,210
hello securely generating and storing

618
00:23:49,690 --> 00:23:54,010
key pairs used to be not attacked that

619
00:23:52,210 --> 00:23:57,100
we would typically ask our users to do

620
00:23:54,010 --> 00:24:00,640
but modern advances in hardware make

621
00:23:57,100 --> 00:24:02,559
this more and more possible while boffin

622
00:24:00,640 --> 00:24:04,240
allows for a lot of really new and

623
00:24:02,559 --> 00:24:06,580
interesting user interaction

624
00:24:04,240 --> 00:24:09,820
possibilities this was a demo from last

625
00:24:06,580 --> 00:24:11,590
week in Fukuoka Japan by Fujitsu where

626
00:24:09,820 --> 00:24:13,689
this fellow is really quickly able to

627
00:24:11,590 --> 00:24:17,350
wave his hand over a palm

628
00:24:13,690 --> 00:24:19,269
which logs him in so all of you these UX

629
00:24:17,350 --> 00:24:21,428
possibilities are now enabled for

630
00:24:19,269 --> 00:24:24,970
authentication via a consistent API

631
00:24:21,429 --> 00:24:26,769
which is really cool I also think that

632
00:24:24,970 --> 00:24:28,990
the accessibility conversation is going

633
00:24:26,769 --> 00:24:31,120
to be really important here as well for

634
00:24:28,990 --> 00:24:32,830
our users who are mobility impaired for

635
00:24:31,120 --> 00:24:35,110
example passwords can be a really

636
00:24:32,830 --> 00:24:37,899
pernicious problem imagine that you've

637
00:24:35,110 --> 00:24:40,090
lost full use of your hands what are

638
00:24:37,899 --> 00:24:42,219
your options well I mean a really bad

639
00:24:40,090 --> 00:24:43,418
option is to you know speak your

640
00:24:42,220 --> 00:24:45,999
password into a voice recognition

641
00:24:43,419 --> 00:24:49,330
machine which you know least

642
00:24:45,999 --> 00:24:51,159
eavesdropping is not great simply

643
00:24:49,330 --> 00:24:53,019
imagine older users who have may have

644
00:24:51,159 --> 00:24:54,879
some impairments to their memory

645
00:24:53,019 --> 00:24:57,429
you know remembering passwords can be a

646
00:24:54,879 --> 00:24:58,959
really difficult problem so being able

647
00:24:57,429 --> 00:25:01,570
to confirm your identity with a

648
00:24:58,960 --> 00:25:04,480
biometric offloading all that complexity

649
00:25:01,570 --> 00:25:07,418
to Hardware opens up a lot of really

650
00:25:04,480 --> 00:25:08,980
interesting possibilities again as

651
00:25:07,419 --> 00:25:11,049
mentioned developer convenience is

652
00:25:08,980 --> 00:25:13,090
another huge part of this conversation

653
00:25:11,049 --> 00:25:14,559
if you go on the OS website there's a

654
00:25:13,090 --> 00:25:16,918
number of guides that detail all the

655
00:25:14,559 --> 00:25:19,360
wrong things you can do with passwords

656
00:25:16,919 --> 00:25:22,210
so but it's mentioned the public key is

657
00:25:19,360 --> 00:25:24,399
public it can be shared openly that

658
00:25:22,210 --> 00:25:26,919
means that a complex salt salting and

659
00:25:24,399 --> 00:25:28,658
hashing system is really not needed in

660
00:25:26,919 --> 00:25:30,730
the situation this could potentially

661
00:25:28,659 --> 00:25:33,249
reduce the complexity and all the

662
00:25:30,730 --> 00:25:37,960
maintenance costs of authentication

663
00:25:33,249 --> 00:25:39,759
systems so on privacy we're gonna spend

664
00:25:37,960 --> 00:25:41,110
some time talking about the privacy

665
00:25:39,759 --> 00:25:43,990
implications of about them

666
00:25:41,110 --> 00:25:45,490
so just because the phyto to ecosystem

667
00:25:43,990 --> 00:25:47,740
in general it's a really broad landscape

668
00:25:45,490 --> 00:25:49,299
it includes browser vendors web

669
00:25:47,740 --> 00:25:52,029
application developers harbor

670
00:25:49,299 --> 00:25:54,279
manufacturers and more and each party

671
00:25:52,029 --> 00:25:56,289
involved here can't necessarily trust

672
00:25:54,279 --> 00:25:58,629
each other I'm gonna go through a few

673
00:25:56,289 --> 00:26:00,360
cases that demonstrate how the protocols

674
00:25:58,629 --> 00:26:02,740
attempt to deal with this lack of trust

675
00:26:00,360 --> 00:26:05,559
to reframe the challenge here with

676
00:26:02,740 --> 00:26:08,619
passwords a user's identity is proven

677
00:26:05,559 --> 00:26:11,200
with a secret pass phrase but with web

678
00:26:08,619 --> 00:26:14,649
often a user's identity is proven with a

679
00:26:11,200 --> 00:26:16,659
physical interaction with a device so

680
00:26:14,649 --> 00:26:18,729
this may include a biometric interaction

681
00:26:16,659 --> 00:26:20,980
with screws the user is who they say

682
00:26:18,730 --> 00:26:23,139
they are so different care must be taken

683
00:26:20,980 --> 00:26:24,740
to ensure that the details about the

684
00:26:23,139 --> 00:26:26,300
user's device

685
00:26:24,740 --> 00:26:29,510
about the users biometrics are not

686
00:26:26,300 --> 00:26:32,330
leaked to malicious parties the first

687
00:26:29,510 --> 00:26:35,360
privacy property is this all webathon

688
00:26:32,330 --> 00:26:37,220
interactions require user consent what

689
00:26:35,360 --> 00:26:39,169
this means is that a relying party can

690
00:26:37,220 --> 00:26:41,780
request a registration event from a user

691
00:26:39,170 --> 00:26:44,450
but the web off any PI will not do

692
00:26:41,780 --> 00:26:47,090
anything unless the user actively does

693
00:26:44,450 --> 00:26:48,620
something physical so if the user does

694
00:26:47,090 --> 00:26:50,419
nothing the interaction will just

695
00:26:48,620 --> 00:26:52,340
timeout after a certain amount of time

696
00:26:50,420 --> 00:26:55,220
the relying party gets an indeterminate

697
00:26:52,340 --> 00:26:58,070
error there is an asterisk here which I

698
00:26:55,220 --> 00:27:00,980
will go back to in a second what this

699
00:26:58,070 --> 00:27:02,750
means is that you know any random

700
00:27:00,980 --> 00:27:05,900
website cannot probe a device for the

701
00:27:02,750 --> 00:27:07,460
presence of a specific Authenticator so

702
00:27:05,900 --> 00:27:09,320
the past few decades have shown for

703
00:27:07,460 --> 00:27:11,540
example that adware companies will go to

704
00:27:09,320 --> 00:27:12,970
any length to track and fingerprint

705
00:27:11,540 --> 00:27:16,309
users across the internet and

706
00:27:12,970 --> 00:27:17,929
integrating Hardware you know with the

707
00:27:16,309 --> 00:27:22,040
web experience could give them another

708
00:27:17,929 --> 00:27:24,800
pathway to do so but for example let's

709
00:27:22,040 --> 00:27:27,590
say a you know a marketing company wants

710
00:27:24,800 --> 00:27:30,490
a way to track a user given that they

711
00:27:27,590 --> 00:27:33,169
know that the user has a you the key 5c

712
00:27:30,490 --> 00:27:36,980
this is not possible with web off end

713
00:27:33,170 --> 00:27:39,080
because you know the web off end API

714
00:27:36,980 --> 00:27:41,270
requires active user consent the user

715
00:27:39,080 --> 00:27:45,649
has to actively tap their key to give up

716
00:27:41,270 --> 00:27:46,790
any information but there's a flip side

717
00:27:45,650 --> 00:27:48,710
for this let's say that there is a

718
00:27:46,790 --> 00:27:51,020
relying party and the relying party has

719
00:27:48,710 --> 00:27:52,940
good intentions you know the user has

720
00:27:51,020 --> 00:27:55,220
previously registered an Authenticator

721
00:27:52,940 --> 00:27:56,750
with the website and they would like to

722
00:27:55,220 --> 00:27:58,490
provide a good user experience by

723
00:27:56,750 --> 00:28:00,320
discovering if they have their Yubikey

724
00:27:58,490 --> 00:28:02,030
inserted so they can automatically

725
00:28:00,320 --> 00:28:05,750
initialize some type of authentication

726
00:28:02,030 --> 00:28:08,270
event we cannot do this because we can

727
00:28:05,750 --> 00:28:09,770
only just guess and prompt them and hope

728
00:28:08,270 --> 00:28:12,620
that they have their Yubikey with them

729
00:28:09,770 --> 00:28:14,960
so ensuring the easiest possible user

730
00:28:12,620 --> 00:28:18,320
experience gets a little bit tricky with

731
00:28:14,960 --> 00:28:20,720
web out then but let's say that I'm a

732
00:28:18,320 --> 00:28:22,820
little less picky and all I want to know

733
00:28:20,720 --> 00:28:24,380
is if the Authenticator if they have an

734
00:28:22,820 --> 00:28:27,409
Authenticator built into their device

735
00:28:24,380 --> 00:28:28,880
like Windows hello or touch ID these

736
00:28:27,410 --> 00:28:31,010
built-in authenticators are called

737
00:28:28,880 --> 00:28:32,840
platform authenticators and web often

738
00:28:31,010 --> 00:28:34,730
does allow for the possibility of

739
00:28:32,840 --> 00:28:36,949
discovering this information by

740
00:28:34,730 --> 00:28:37,580
executing a very precisely named

741
00:28:36,950 --> 00:28:40,369
function

742
00:28:37,580 --> 00:28:43,580
called is user verifying platform

743
00:28:40,369 --> 00:28:45,439
Authenticator available this allows

744
00:28:43,580 --> 00:28:47,210
relying party some ability to discover

745
00:28:45,440 --> 00:28:49,249
if they should actually proceed to

746
00:28:47,210 --> 00:28:54,739
prompt users for registering or

747
00:28:49,249 --> 00:28:56,299
authenticating with web authentical in

748
00:28:54,739 --> 00:28:59,539
tracking a user especially as more

749
00:28:56,299 --> 00:29:03,289
devices will have authenticators built

750
00:28:59,539 --> 00:29:06,019
in another big topic worth discussing is

751
00:29:03,289 --> 00:29:07,999
this we can expect that there's going to

752
00:29:06,019 --> 00:29:10,100
be a huge landscape of authenticators

753
00:29:07,999 --> 00:29:12,679
out there and we can expect that some of

754
00:29:10,100 --> 00:29:15,230
them will be problematic if you followed

755
00:29:12,679 --> 00:29:17,029
some of the news around this you've

756
00:29:15,230 --> 00:29:19,249
probably noticed that a lot of things

757
00:29:17,029 --> 00:29:21,259
can go wrong for example The Times

758
00:29:19,249 --> 00:29:23,029
security keys had an issue where the

759
00:29:21,259 --> 00:29:25,429
bluetooth pairing process could result

760
00:29:23,029 --> 00:29:27,559
in an exploitation of the key other

761
00:29:25,429 --> 00:29:30,080
things can go wrong like insufficient

762
00:29:27,559 --> 00:29:32,539
randomness private key material being

763
00:29:30,080 --> 00:29:34,039
leaked security keys have a very complex

764
00:29:32,539 --> 00:29:36,350
set of responsibilities and lots of

765
00:29:34,039 --> 00:29:38,989
things can go wrong and it's justified

766
00:29:36,350 --> 00:29:40,759
for allowing parties to you know want a

767
00:29:38,989 --> 00:29:42,230
way to protect their users and

768
00:29:40,759 --> 00:29:44,899
applications against faulty

769
00:29:42,230 --> 00:29:46,909
authenticators so it would be great if

770
00:29:44,899 --> 00:29:49,309
there was a way to a you know whitelist

771
00:29:46,909 --> 00:29:51,169
authenticators like i only want to allow

772
00:29:49,309 --> 00:29:53,090
touch ID because i know it's secure I

773
00:29:51,169 --> 00:29:55,669
notice it's not Leo leaking biometric

774
00:29:53,090 --> 00:29:57,889
data to third parties webathon does give

775
00:29:55,669 --> 00:29:59,600
us the basic ability to do this by

776
00:29:57,889 --> 00:30:02,119
disclosing a certain amount of

777
00:29:59,600 --> 00:30:04,369
identifying information I talked about

778
00:30:02,119 --> 00:30:06,769
attestation earlier the certificate

779
00:30:04,369 --> 00:30:09,949
provided can serve as a way to establish

780
00:30:06,769 --> 00:30:12,440
trust in an Authenticator also there's

781
00:30:09,950 --> 00:30:14,710
an identifier called an H UID that is

782
00:30:12,440 --> 00:30:17,269
provided alongside that it stands for

783
00:30:14,710 --> 00:30:20,269
Authenticator attestation global

784
00:30:17,269 --> 00:30:23,450
identifier it's intended to provide a

785
00:30:20,269 --> 00:30:26,059
way to identify the make and model of an

786
00:30:23,450 --> 00:30:28,489
Authenticator this is called direct

787
00:30:26,059 --> 00:30:32,059
attestation when all of this data is

788
00:30:28,489 --> 00:30:33,919
correctly provided but some

789
00:30:32,059 --> 00:30:36,230
authenticators will not supply this

790
00:30:33,919 --> 00:30:38,600
information in some cases you'll just

791
00:30:36,230 --> 00:30:42,529
get a self signed certificate and you'll

792
00:30:38,600 --> 00:30:44,359
get 16 mil bytes for the AAG UID this

793
00:30:42,529 --> 00:30:46,580
happens when for example an

794
00:30:44,359 --> 00:30:48,559
Authenticator is technically incapable

795
00:30:46,580 --> 00:30:50,210
of protecting an attestation private key

796
00:30:48,559 --> 00:30:50,899
or for some other reasons that they just

797
00:30:50,210 --> 00:30:53,210
didn't want to

798
00:30:50,899 --> 00:30:55,459
you know provide this information in

799
00:30:53,210 --> 00:30:57,289
this case you're not given the you know

800
00:30:55,460 --> 00:31:01,099
information you really need to establish

801
00:30:57,289 --> 00:31:01,609
trust in an Authenticator but there's

802
00:31:01,099 --> 00:31:04,968
more

803
00:31:01,609 --> 00:31:06,978
users also play a role here when a

804
00:31:04,969 --> 00:31:09,049
relying party requests attestation data

805
00:31:06,979 --> 00:31:10,789
during registration a user is prompted

806
00:31:09,049 --> 00:31:13,129
to confirm that they are okay with

807
00:31:10,789 --> 00:31:14,570
sharing it if they choose accept the

808
00:31:13,129 --> 00:31:16,519
itis station data will be shared with a

809
00:31:14,570 --> 00:31:18,468
relying party I'll play a video

810
00:31:16,519 --> 00:31:20,779
demonstrating that so I'm going to

811
00:31:18,469 --> 00:31:22,279
register a touch ID prompt popped up I

812
00:31:20,779 --> 00:31:24,589
put my fingerprint on and unfortunately

813
00:31:22,279 --> 00:31:28,009
you can't see that but Google from

814
00:31:24,589 --> 00:31:30,109
propped up a dialog asking if it's okay

815
00:31:28,009 --> 00:31:32,629
to share information about the security

816
00:31:30,109 --> 00:31:37,549
key and the user has an option to block

817
00:31:32,629 --> 00:31:39,199
that or to accept that when users block

818
00:31:37,549 --> 00:31:41,749
sharing attestation the relying party

819
00:31:39,200 --> 00:31:45,049
gets no certificate and they get no aju

820
00:31:41,749 --> 00:31:46,669
ID in this case you know there's very

821
00:31:45,049 --> 00:31:49,460
limited ability to verify the integrity

822
00:31:46,669 --> 00:31:50,299
and establish trust in an Authenticator

823
00:31:49,460 --> 00:31:54,200
this is called

824
00:31:50,299 --> 00:31:56,059
none attestation there's even more I

825
00:31:54,200 --> 00:31:58,099
know I'm digging in quite deep into this

826
00:31:56,059 --> 00:32:00,469
but it's a very attestation ends up

827
00:31:58,099 --> 00:32:01,968
being a very complex topic relying

828
00:32:00,469 --> 00:32:04,099
parties can ask the browser's to produce

829
00:32:01,969 --> 00:32:06,379
an anonymized certificate this is

830
00:32:04,099 --> 00:32:08,289
intended to strike a balance between the

831
00:32:06,379 --> 00:32:11,269
tomb superb to protect user privacy

832
00:32:08,289 --> 00:32:13,789
while also providing some potentially

833
00:32:11,269 --> 00:32:16,759
useful verification data this is called

834
00:32:13,789 --> 00:32:18,289
indirect attestation and when relying

835
00:32:16,759 --> 00:32:20,779
parties request indirect attestation

836
00:32:18,289 --> 00:32:24,080
they get an anonymized certificate an

837
00:32:20,779 --> 00:32:25,839
anonymized AAG UID the implementation of

838
00:32:24,080 --> 00:32:29,689
this is left up to the browser

839
00:32:25,839 --> 00:32:31,219
but the spec actually points out that

840
00:32:29,690 --> 00:32:32,539
the relying parties may be out of luck

841
00:32:31,219 --> 00:32:33,950
here if they request this there's no

842
00:32:32,539 --> 00:32:36,979
guarantee that you're getting actually

843
00:32:33,950 --> 00:32:38,779
useful data so to sort of sum up here

844
00:32:36,979 --> 00:32:40,759
what can relying parties normal

845
00:32:38,779 --> 00:32:42,469
developers what can we do well you can

846
00:32:40,759 --> 00:32:44,509
reject all authenticators that don't

847
00:32:42,469 --> 00:32:46,519
provide a certificate but this will

848
00:32:44,509 --> 00:32:48,469
block users from using authenticators

849
00:32:46,519 --> 00:32:52,070
popular of authenticators like Chrome's

850
00:32:48,469 --> 00:32:54,469
touch ID Authenticator you could also

851
00:32:52,070 --> 00:32:57,468
reject all authenticators where users

852
00:32:54,469 --> 00:32:59,629
block sharing attestation data this may

853
00:32:57,469 --> 00:33:03,070
irritate your users who want the highest

854
00:32:59,629 --> 00:33:04,840
level of privacy possible

855
00:33:03,070 --> 00:33:07,389
you can also request the anonymized

856
00:33:04,840 --> 00:33:09,129
indirect attestation type but you'll get

857
00:33:07,390 --> 00:33:12,520
potentially unhelpful or indeterminate

858
00:33:09,130 --> 00:33:14,140
data and for what it's worth at duo we

859
00:33:12,520 --> 00:33:16,090
do currently mandate that the user

860
00:33:14,140 --> 00:33:18,100
attempt to provide us with full

861
00:33:16,090 --> 00:33:20,439
attestation data but we do obviously

862
00:33:18,100 --> 00:33:22,000
allow authenticators like Chrome's touch

863
00:33:20,440 --> 00:33:25,630
ID which doesn't provide an attestation

864
00:33:22,000 --> 00:33:27,220
certificate so a few other properties of

865
00:33:25,630 --> 00:33:29,170
web then let's say that you want to

866
00:33:27,220 --> 00:33:31,330
whitelist the medium of an Authenticator

867
00:33:29,170 --> 00:33:34,590
like you're weirded out by Bluetooth you

868
00:33:31,330 --> 00:33:37,870
only want to allow USB authenticators

869
00:33:34,590 --> 00:33:41,110
the browser might give that to you

870
00:33:37,870 --> 00:33:43,330
but they might not you can run this

871
00:33:41,110 --> 00:33:46,570
function here on the credential object

872
00:33:43,330 --> 00:33:49,629
to return an array of the transports

873
00:33:46,570 --> 00:33:51,700
associated with that Authenticator it'll

874
00:33:49,630 --> 00:33:53,710
be a list of those enums listed on the

875
00:33:51,700 --> 00:33:56,770
right like if it's USB Bluetooth a

876
00:33:53,710 --> 00:33:58,600
platform Authenticator and so on however

877
00:33:56,770 --> 00:34:01,300
browsers can deny sharing this

878
00:33:58,600 --> 00:34:03,550
information for privacy reasons and in

879
00:34:01,300 --> 00:34:06,159
this case the specification notes that

880
00:34:03,550 --> 00:34:07,389
relying parties might get upset but you

881
00:34:06,160 --> 00:34:09,010
know there's nothing that can actually

882
00:34:07,390 --> 00:34:10,270
be done here from what I've seen chrome

883
00:34:09,010 --> 00:34:13,660
actually does return the correct

884
00:34:10,270 --> 00:34:15,699
information so lastly what if you want

885
00:34:13,659 --> 00:34:18,179
to whitelist the signing algorithm like

886
00:34:15,699 --> 00:34:21,219
you only want to allow ECDSA signatures

887
00:34:18,179 --> 00:34:23,350
you don't like RSA for some reason maybe

888
00:34:21,219 --> 00:34:25,359
your back-end is incapable of it you

889
00:34:23,350 --> 00:34:28,060
prefer yes you do you think ECDSA is

890
00:34:25,360 --> 00:34:30,580
more secure and this is possible I

891
00:34:28,060 --> 00:34:32,350
mentioned the pub key cred params array

892
00:34:30,580 --> 00:34:34,929
here this is where the relying party

893
00:34:32,350 --> 00:34:37,600
specifies the signing algorithms that

894
00:34:34,929 --> 00:34:40,690
are acceptable negative 7 stands for

895
00:34:37,600 --> 00:34:42,489
ECDSA and if the Authenticator itself

896
00:34:40,690 --> 00:34:44,290
cannot conduct a registration with this

897
00:34:42,489 --> 00:34:48,100
algorithm they are not supposed to

898
00:34:44,290 --> 00:34:49,630
proceed with a registration so another

899
00:34:48,100 --> 00:34:52,569
topic which some of you have maybe

900
00:34:49,630 --> 00:34:54,700
thought of is lost devices what happens

901
00:34:52,570 --> 00:34:56,710
when a user loses an Authenticator we've

902
00:34:54,699 --> 00:34:58,450
all lost phones we've all broken our

903
00:34:56,710 --> 00:35:04,390
phones what happens in this particular

904
00:34:58,450 --> 00:35:06,730
case so remember with web off end users

905
00:35:04,390 --> 00:35:11,350
identity is now bound to physical

906
00:35:06,730 --> 00:35:14,560
hardware so what happens when a user

907
00:35:11,350 --> 00:35:15,430
loses their device or security keep even

908
00:35:14,560 --> 00:35:17,049
simpler what happened

909
00:35:15,430 --> 00:35:19,690
what you want to replace your phone and

910
00:35:17,050 --> 00:35:25,599
I'm just gonna show this gift because I

911
00:35:19,690 --> 00:35:27,700
think it's amazing so for full and

912
00:35:25,599 --> 00:35:29,530
stoves for stolen phones relying parties

913
00:35:27,700 --> 00:35:31,808
do have the option to request that the

914
00:35:29,530 --> 00:35:35,020
user verify themselves with something

915
00:35:31,809 --> 00:35:37,329
like a biometric indicator but users can

916
00:35:35,020 --> 00:35:39,099
still use pins and passwords this helps

917
00:35:37,329 --> 00:35:41,800
ensure that the stolen device cannot be

918
00:35:39,099 --> 00:35:44,290
used arbitrarily for authentications by

919
00:35:41,800 --> 00:35:45,819
the thief since it adds something that

920
00:35:44,290 --> 00:35:49,480
the user knows or something that the

921
00:35:45,819 --> 00:35:52,000
user is but for just lost or replace

922
00:35:49,480 --> 00:35:53,980
devices this is still a problem remember

923
00:35:52,000 --> 00:35:58,599
a new random credential is created for

924
00:35:53,980 --> 00:36:01,210
every new application so does the user

925
00:35:58,599 --> 00:36:03,220
now have to manually revoke and update

926
00:36:01,210 --> 00:36:06,609
their credential with every application

927
00:36:03,220 --> 00:36:09,520
they've registered with the answer right

928
00:36:06,609 --> 00:36:11,619
now is kind of yes

929
00:36:09,520 --> 00:36:14,380
the current fight or recommendations are

930
00:36:11,619 --> 00:36:16,390
as follows you know a relying party can

931
00:36:14,380 --> 00:36:18,940
you know ask for multiple authenticators

932
00:36:16,390 --> 00:36:20,770
like a backup Authenticator which a user

933
00:36:18,940 --> 00:36:23,140
can keep in a drawer at home or

934
00:36:20,770 --> 00:36:26,140
something or the relying party can run

935
00:36:23,140 --> 00:36:28,779
some identity proofing measures whatever

936
00:36:26,140 --> 00:36:30,879
that means is sort of up to them I think

937
00:36:28,780 --> 00:36:33,670
most people here will understand that

938
00:36:30,880 --> 00:36:35,200
this is unfeasible the idea of creating

939
00:36:33,670 --> 00:36:37,329
a backup credential or going through

940
00:36:35,200 --> 00:36:39,460
identity proofing for every application

941
00:36:37,329 --> 00:36:41,680
you've registered with is a bit onerous

942
00:36:39,460 --> 00:36:43,809
some of you probably have encountered

943
00:36:41,680 --> 00:36:45,940
this already if you've enabled 2fa on

944
00:36:43,809 --> 00:36:47,859
github or anywhere else for example

945
00:36:45,940 --> 00:36:49,660
you're provided with the backup codes

946
00:36:47,859 --> 00:36:51,098
you're supposed to securely store those

947
00:36:49,660 --> 00:36:54,160
in order to deal with a lost

948
00:36:51,099 --> 00:36:56,020
Authenticator problem you know so one of

949
00:36:54,160 --> 00:36:57,339
the plus signs and negative sides are

950
00:36:56,020 --> 00:37:01,329
passwords is that they are easily

951
00:36:57,339 --> 00:37:04,540
revoked this is not true right now with

952
00:37:01,329 --> 00:37:06,849
web off and credentials but there are

953
00:37:04,540 --> 00:37:08,799
various proposals for account recovery

954
00:37:06,849 --> 00:37:11,319
there are current discussions ongoing in

955
00:37:08,799 --> 00:37:13,900
the phyto Alliance one such disk or one

956
00:37:11,319 --> 00:37:15,640
such proposal is this by you become it's

957
00:37:13,900 --> 00:37:17,589
an extension that allows for a backup

958
00:37:15,640 --> 00:37:19,690
Authenticator to restore private key

959
00:37:17,589 --> 00:37:21,279
material that existed on a main

960
00:37:19,690 --> 00:37:23,200
Authenticator this is still an early

961
00:37:21,280 --> 00:37:25,420
draft it hasn't been fully reviewed I

962
00:37:23,200 --> 00:37:27,069
just wanted to bring it up as proof that

963
00:37:25,420 --> 00:37:28,869
there are proposals to figure out this

964
00:37:27,069 --> 00:37:30,460
problem figure out a product

965
00:37:28,869 --> 00:37:36,240
way to deal with the lost phone or the

966
00:37:30,460 --> 00:37:39,009
replaced phone problem so to sum up

967
00:37:36,240 --> 00:37:40,990
weboth n is a complex series of

968
00:37:39,009 --> 00:37:45,369
interactions between authenticators

969
00:37:40,990 --> 00:37:46,808
browsers users and applications all of

970
00:37:45,369 --> 00:37:49,150
these parties have some amount of

971
00:37:46,809 --> 00:37:51,730
control over authorizing the release of

972
00:37:49,150 --> 00:37:54,249
identifying information and these

973
00:37:51,730 --> 00:37:57,130
interactions end up impacting how trust

974
00:37:54,249 --> 00:38:00,069
and privacy is established between each

975
00:37:57,130 --> 00:38:02,529
party privacy is a first-class citizen

976
00:38:00,069 --> 00:38:04,720
of the phyto two protocols which is

977
00:38:02,529 --> 00:38:06,880
really cool but you know as we say in

978
00:38:04,720 --> 00:38:08,740
America freedom isn't free it comes with

979
00:38:06,880 --> 00:38:11,259
a cost and the cost of privacy means

980
00:38:08,740 --> 00:38:14,348
that establishing trust is impacted in

981
00:38:11,259 --> 00:38:16,450
particular ways so as developers you

982
00:38:14,349 --> 00:38:18,339
have to consider given the inherent

983
00:38:16,450 --> 00:38:22,749
victories and trade-offs of Levithan

984
00:38:18,339 --> 00:38:24,578
vers passwords how much trust do does

985
00:38:22,749 --> 00:38:27,069
your application need to establish in

986
00:38:24,579 --> 00:38:29,019
users and their authenticators some

987
00:38:27,069 --> 00:38:31,150
organizations might say that web a pen

988
00:38:29,019 --> 00:38:33,249
is already just by itself such a huge

989
00:38:31,150 --> 00:38:34,869
victory over passwords that getting lost

990
00:38:33,249 --> 00:38:37,660
in the trust details is not that

991
00:38:34,869 --> 00:38:39,999
important other organizations may want a

992
00:38:37,660 --> 00:38:42,220
tighter level of trust it's ultimately a

993
00:38:39,999 --> 00:38:45,848
judgement call that you and your team

994
00:38:42,220 --> 00:38:48,430
will have to decide on looking ahead the

995
00:38:45,849 --> 00:38:48,970
level 2 draft of Levithan is currently

996
00:38:48,430 --> 00:38:51,009
being written

997
00:38:48,970 --> 00:38:53,348
it'll flesh out details in a number of

998
00:38:51,009 --> 00:38:56,019
different areas I do encourage all of

999
00:38:53,349 --> 00:38:59,079
you to take a look if you're interested

1000
00:38:56,019 --> 00:39:01,749
in reading specifications like that but

1001
00:38:59,079 --> 00:39:04,119
to sum up some of the complexity of web

1002
00:39:01,749 --> 00:39:05,859
off n does come with the fact that it

1003
00:39:04,119 --> 00:39:07,569
has a lot of really broad industry

1004
00:39:05,859 --> 00:39:09,730
buy-in with a lot of use cases to

1005
00:39:07,569 --> 00:39:11,589
account for you know we have really

1006
00:39:09,730 --> 00:39:15,210
willing and vocal support from parties

1007
00:39:11,589 --> 00:39:17,739
like Microsoft from Mozilla from Google

1008
00:39:15,210 --> 00:39:20,289
Apple has started engaging with lamothe

1009
00:39:17,739 --> 00:39:23,230
N and will be introducing support in

1010
00:39:20,289 --> 00:39:25,509
Safari major relying parties like github

1011
00:39:23,230 --> 00:39:28,779
and others are introducing support for

1012
00:39:25,509 --> 00:39:32,220
web authentic citing obviously duo many

1013
00:39:28,779 --> 00:39:35,619
other authentication providers as well

1014
00:39:32,220 --> 00:39:36,848
on a historical note the idea of using

1015
00:39:35,619 --> 00:39:38,259
public key cryptography for

1016
00:39:36,849 --> 00:39:41,289
authentication has been around for a

1017
00:39:38,259 --> 00:39:41,930
really long time Jon Udell a journalist

1018
00:39:41,289 --> 00:39:44,870
wrote a

1019
00:39:41,930 --> 00:39:46,310
this as early as 1997 he had the idea to

1020
00:39:44,870 --> 00:39:49,160
use client certificates as an

1021
00:39:46,310 --> 00:39:50,840
authentication factor but he later

1022
00:39:49,160 --> 00:39:53,120
admitted it didn't happen because

1023
00:39:50,840 --> 00:39:56,720
security products are a royal pain in

1024
00:39:53,120 --> 00:39:58,940
the ass so today secure authentication

1025
00:39:56,720 --> 00:40:01,040
with public key cryptography is much

1026
00:39:58,940 --> 00:40:02,900
less a pain in the ass it's much more

1027
00:40:01,040 --> 00:40:06,800
possible and that opens up a lot of

1028
00:40:02,900 --> 00:40:08,900
really cool possibilities so again given

1029
00:40:06,800 --> 00:40:10,190
the educational challenges here I create

1030
00:40:08,900 --> 00:40:13,010
an effort to help introduce web

1031
00:40:10,190 --> 00:40:14,300
authentic Dino web developers who may be

1032
00:40:13,010 --> 00:40:16,840
interested to feel free to share this

1033
00:40:14,300 --> 00:40:18,620
with them there's lots of cool artwork

1034
00:40:16,840 --> 00:40:21,110
information about the background of

1035
00:40:18,620 --> 00:40:23,810
Levithan public key crypto the end goal

1036
00:40:21,110 --> 00:40:25,100
is to make this speck in this entire

1037
00:40:23,810 --> 00:40:27,710
space a lot more friendly and

1038
00:40:25,100 --> 00:40:29,180
approachable there's code samples for

1039
00:40:27,710 --> 00:40:31,420
each attribute how to configure web out

1040
00:40:29,180 --> 00:40:34,790
then and the reasoning behind everything

1041
00:40:31,420 --> 00:40:37,220
but otherwise that is it for me I

1042
00:40:34,790 --> 00:40:40,670
believe we have a few minutes for

1043
00:40:37,220 --> 00:40:41,689
questions and thank you very much for

1044
00:40:40,670 --> 00:40:48,250
tuning in

1045
00:40:41,690 --> 00:40:50,300
[Applause]

1046
00:40:48,250 --> 00:40:55,550
if there are any questions I'm gonna

1047
00:40:50,300 --> 00:40:58,550
bring a microphone hi so the whole

1048
00:40:55,550 --> 00:41:01,550
foundation of the button is based on the

1049
00:40:58,550 --> 00:41:04,400
cryptographic keys to a public key and

1050
00:41:01,550 --> 00:41:07,010
private key but nowhere in the web or 10

1051
00:41:04,400 --> 00:41:10,420
specs do they mention about key rotation

1052
00:41:07,010 --> 00:41:10,420
what are your thoughts on that

1053
00:41:11,290 --> 00:41:15,380
so by key rotation do we mean

1054
00:41:13,700 --> 00:41:24,080
specifically the revocation of key

1055
00:41:15,380 --> 00:41:26,960
material so a webathon does delegate a

1056
00:41:24,080 --> 00:41:28,759
lot of responsibility to the

1057
00:41:26,960 --> 00:41:31,040
authenticators itself I haven't really

1058
00:41:28,760 --> 00:41:33,500
dug into the CETA protocol which deals

1059
00:41:31,040 --> 00:41:35,060
with the Authenticator to browser

1060
00:41:33,500 --> 00:41:41,390
communication I don't know if key

1061
00:41:35,060 --> 00:41:44,000
rotation is specified there okay it's a

1062
00:41:41,390 --> 00:41:45,980
good point it's possible that the

1063
00:41:44,000 --> 00:41:47,180
current the phyto to Committee is what's

1064
00:41:45,980 --> 00:41:49,220
meeting in South Korea right now it's

1065
00:41:47,180 --> 00:41:51,950
possible they brought it up if key

1066
00:41:49,220 --> 00:41:53,480
rotation is considered a necessary use

1067
00:41:51,950 --> 00:41:54,710
case for a particular organization I'm

1068
00:41:53,480 --> 00:41:59,070
sure they'd be interested in hearing it

1069
00:41:54,710 --> 00:42:00,640
I saw somebody else

1070
00:41:59,070 --> 00:42:03,880
[Music]

1071
00:42:00,640 --> 00:42:07,790
so one more thing is like the usability

1072
00:42:03,880 --> 00:42:08,930
so if the private key propagation is not

1073
00:42:07,790 --> 00:42:11,750
possible because it is getting locked

1074
00:42:08,930 --> 00:42:14,210
inside a hardware I have a site where I

1075
00:42:11,750 --> 00:42:16,430
want to get I want to access it from a

1076
00:42:14,210 --> 00:42:19,190
laptop then I want to do it from my

1077
00:42:16,430 --> 00:42:21,500
mobile so how do I use the same hardware

1078
00:42:19,190 --> 00:42:23,870
is that how the private key propagation

1079
00:42:21,500 --> 00:42:25,520
takes place between the devices the

1080
00:42:23,870 --> 00:42:27,440
expected use case right now is you would

1081
00:42:25,520 --> 00:42:30,920
register each device separately with the

1082
00:42:27,440 --> 00:42:33,430
relying party the sharing of private key

1083
00:42:30,920 --> 00:42:35,900
material is not something that is

1084
00:42:33,430 --> 00:42:37,940
currently like the workflow and our

1085
00:42:35,900 --> 00:42:40,070
surrounding what about them so for

1086
00:42:37,940 --> 00:42:42,350
example with github like right now you

1087
00:42:40,070 --> 00:42:44,570
can register SSH SSH keys you would

1088
00:42:42,350 --> 00:42:45,980
register a different key for each device

1089
00:42:44,570 --> 00:42:48,860
the idea is that you would register each

1090
00:42:45,980 --> 00:42:50,390
device separately though if you want to

1091
00:42:48,860 --> 00:42:52,460
have like a roaming Authenticator like a

1092
00:42:50,390 --> 00:42:53,779
Bluetooth based Authenticator that

1093
00:42:52,460 --> 00:42:56,150
Authenticator can be paired with your

1094
00:42:53,780 --> 00:42:58,250
phone it can be khair paired with your

1095
00:42:56,150 --> 00:43:00,380
laptop the idea here is that the roaming

1096
00:42:58,250 --> 00:43:02,329
Authenticator would fill that use case

1097
00:43:00,380 --> 00:43:03,920
maybe one more question as well so is

1098
00:43:02,329 --> 00:43:07,579
there any possibility or you have any

1099
00:43:03,920 --> 00:43:11,029
roadmap for multiple public key private

1100
00:43:07,579 --> 00:43:13,940
key pair for a single user so I can how

1101
00:43:11,029 --> 00:43:16,430
these are all my set of public keys so I

1102
00:43:13,940 --> 00:43:17,839
can use it for different purpose so I'm

1103
00:43:16,430 --> 00:43:20,419
using it from different related devices

1104
00:43:17,839 --> 00:43:21,890
so I have much more privacy and you

1105
00:43:20,420 --> 00:43:23,359
exactly don't know which public key is

1106
00:43:21,890 --> 00:43:25,940
getting used rather than I'm always

1107
00:43:23,359 --> 00:43:27,739
using a single public key that is giving

1108
00:43:25,940 --> 00:43:30,140
or this is the guy he's using the single

1109
00:43:27,739 --> 00:43:32,390
public key this was the big problem how

1110
00:43:30,140 --> 00:43:34,609
we have in the privacy so is there any

1111
00:43:32,390 --> 00:43:36,229
road map there so I don't want to speak

1112
00:43:34,609 --> 00:43:38,450
for the phyto Alliance like many of you

1113
00:43:36,229 --> 00:43:39,470
I'm more or less a consumer of web off

1114
00:43:38,450 --> 00:43:43,189
and instead of crafting the

1115
00:43:39,470 --> 00:43:45,799
specification itself the intended use

1116
00:43:43,190 --> 00:43:48,799
case right now is that private key

1117
00:43:45,799 --> 00:43:50,839
material is isolated and separate though

1118
00:43:48,799 --> 00:43:52,849
it is possible that they may you know

1119
00:43:50,839 --> 00:43:55,970
consider various you know key sharing

1120
00:43:52,849 --> 00:43:57,650
mechanisms in the future but at least

1121
00:43:55,970 --> 00:44:01,700
for right now level one of the draft

1122
00:43:57,650 --> 00:44:03,109
keeps the keys isolated okay I think we

1123
00:44:01,700 --> 00:44:05,149
need to wrap up because it's lunchtime

1124
00:44:03,109 --> 00:44:09,749
so thanks all right thank you very much

1125
00:44:05,150 --> 00:44:09,749
[Applause]

