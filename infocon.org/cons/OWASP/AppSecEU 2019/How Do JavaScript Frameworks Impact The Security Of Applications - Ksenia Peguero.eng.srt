1
00:00:00,530 --> 00:00:02,590
you

2
00:00:02,860 --> 00:00:08,750
all right good morning everyone

3
00:00:05,830 --> 00:00:11,990
thank you for being here my name is

4
00:00:08,750 --> 00:00:14,800
Sonia Peguero and I will be talking

5
00:00:11,990 --> 00:00:20,600
about JavaScript security as I often do

6
00:00:14,800 --> 00:00:22,310
all right so what do I do for life I am

7
00:00:20,600 --> 00:00:25,630
a senior research engineer at synapses

8
00:00:22,310 --> 00:00:29,570
part of the security research group and

9
00:00:25,630 --> 00:00:32,479
we work on different security things

10
00:00:29,570 --> 00:00:34,129
that then go into our tools and in the

11
00:00:32,479 --> 00:00:35,959
last couple of years or more than that I

12
00:00:34,129 --> 00:00:38,059
was working on JavaScript security and

13
00:00:35,960 --> 00:00:41,360
specifically at the security of the

14
00:00:38,059 --> 00:00:43,430
frameworks I was previously a principal

15
00:00:41,360 --> 00:00:46,070
consultant at digital that got acquired

16
00:00:43,430 --> 00:00:48,530
by synopsis so has been in the industry

17
00:00:46,070 --> 00:00:51,559
for I don't know nine years and half

18
00:00:48,530 --> 00:00:53,510
years I'm also working on my PhD at

19
00:00:51,559 --> 00:00:56,330
George Washington University and this

20
00:00:53,510 --> 00:00:58,460
research is actually part of my academic

21
00:00:56,330 --> 00:01:00,619
research but what I will be presenting I

22
00:00:58,460 --> 00:01:02,540
also have a two-year-old daughter who's

23
00:01:00,619 --> 00:01:04,959
enjoying a children's museum and I'm

24
00:01:02,540 --> 00:01:08,179
Stram today so that's great very

25
00:01:04,959 --> 00:01:09,919
independent and you can follow me on

26
00:01:08,180 --> 00:01:15,799
Twitter where I talk about security just

27
00:01:09,920 --> 00:01:18,979
stuff all right oh yeah and I do like

28
00:01:15,799 --> 00:01:20,509
diving so JavaScript

29
00:01:18,979 --> 00:01:21,798
why JavaScript I guess I don't need to

30
00:01:20,509 --> 00:01:23,810
answer this question to this audience

31
00:01:21,799 --> 00:01:25,549
but it has been the most popular

32
00:01:23,810 --> 00:01:28,159
language in the last five years

33
00:01:25,549 --> 00:01:30,439
according to the October's report and

34
00:01:28,159 --> 00:01:32,719
it's now not just on the client-side

35
00:01:30,439 --> 00:01:34,630
server-side mobile applications

36
00:01:32,719 --> 00:01:38,178
you know desktop applications everywhere

37
00:01:34,630 --> 00:01:40,548
and it's now going to be in the IOT

38
00:01:38,179 --> 00:01:42,649
software and we heard the keynote

39
00:01:40,549 --> 00:01:46,999
yesterday that's gonna cause a lot of

40
00:01:42,649 --> 00:01:49,579
problems and if we look at the kind of

41
00:01:46,999 --> 00:01:51,979
landscape of JavaScript today what is

42
00:01:49,579 --> 00:01:54,949
the most important thing about it is

43
00:01:51,979 --> 00:01:58,490
there a ton of framework frameworks and

44
00:01:54,950 --> 00:02:06,740
if you look at this quote this one is

45
00:01:58,490 --> 00:02:08,929
from 2012 seven years ago yes what did

46
00:02:06,740 --> 00:02:12,769
we stop making frameworks no they're

47
00:02:08,929 --> 00:02:15,280
even more today so how many are there if

48
00:02:12,769 --> 00:02:17,750
we look at the client side

49
00:02:15,280 --> 00:02:20,410
according to the JavaScript report there

50
00:02:17,750 --> 00:02:23,240
are over 50 client-side frameworks and

51
00:02:20,410 --> 00:02:25,370
some of them are competing and of course

52
00:02:23,240 --> 00:02:27,890
like the most popular ones are angular

53
00:02:25,370 --> 00:02:30,070
react and view some of them are not

54
00:02:27,890 --> 00:02:32,899
competing at all they have different

55
00:02:30,070 --> 00:02:34,010
purposes they have different functions

56
00:02:32,900 --> 00:02:37,370
they're using very different

57
00:02:34,010 --> 00:02:38,780
applications but they exist on the

58
00:02:37,370 --> 00:02:40,580
server side according to the node

59
00:02:38,780 --> 00:02:43,430
framework comm they're about 40

60
00:02:40,580 --> 00:02:45,320
frameworks again some of them have very

61
00:02:43,430 --> 00:02:48,350
similar features if we look at Express

62
00:02:45,320 --> 00:02:51,910
and Khoa and sales but other ones are

63
00:02:48,350 --> 00:02:54,049
targeted for very different applications

64
00:02:51,910 --> 00:02:56,000
then there are some full stack

65
00:02:54,050 --> 00:02:57,590
JavaScript frameworks that do you know

66
00:02:56,000 --> 00:03:00,350
both client-side and server-side they're

67
00:02:57,590 --> 00:03:04,430
not as popular like meteor war and

68
00:03:00,350 --> 00:03:06,170
irelia is a knockoff of meteor derby

69
00:03:04,430 --> 00:03:07,670
mingy as I guess Minji s we can say

70
00:03:06,170 --> 00:03:09,559
that's more popular combination of

71
00:03:07,670 --> 00:03:12,399
different frameworks that full-stack

72
00:03:09,560 --> 00:03:14,570
Java applications and now we have

73
00:03:12,400 --> 00:03:16,580
JavaScript for desktop applications with

74
00:03:14,570 --> 00:03:18,950
electron and of course the mobile

75
00:03:16,580 --> 00:03:20,570
platform so they're everywhere and

76
00:03:18,950 --> 00:03:22,250
they're in there all frameworks right

77
00:03:20,570 --> 00:03:26,359
nobody is writing JavaScript from

78
00:03:22,250 --> 00:03:29,420
scratch so what is there in the

79
00:03:26,360 --> 00:03:31,190
frameworks for security so of course we

80
00:03:29,420 --> 00:03:32,600
can say if the frame present has a

81
00:03:31,190 --> 00:03:34,820
vulnerability you are bringing this

82
00:03:32,600 --> 00:03:38,510
third-party code into your application

83
00:03:34,820 --> 00:03:40,430
you're screwed but if the framework is

84
00:03:38,510 --> 00:03:42,679
secure if the framework has some

85
00:03:40,430 --> 00:03:44,540
security features does it actually make

86
00:03:42,680 --> 00:03:49,340
the JavaScript application more secure

87
00:03:44,540 --> 00:03:51,049
and when we're talking about security in

88
00:03:49,340 --> 00:03:52,640
the software development lifecycle

89
00:03:51,050 --> 00:03:54,770
we talked about that we need to shift

90
00:03:52,640 --> 00:03:56,149
left right not just doing pen testing we

91
00:03:54,770 --> 00:03:58,670
need to do code reviews we need to their

92
00:03:56,150 --> 00:04:01,160
architecture analysis and try to find

93
00:03:58,670 --> 00:04:05,030
bugs as early in the cycle as possible

94
00:04:01,160 --> 00:04:07,490
well what is the earliest we can kind of

95
00:04:05,030 --> 00:04:10,370
get rid of bugs instead of finding them

96
00:04:07,490 --> 00:04:12,260
can we prevent them and again the

97
00:04:10,370 --> 00:04:14,660
earliest in the cycle well can you

98
00:04:12,260 --> 00:04:16,700
prevent them as early as possible maybe

99
00:04:14,660 --> 00:04:19,310
at the framework level right maybe

100
00:04:16,700 --> 00:04:21,108
before the developer is actually writing

101
00:04:19,310 --> 00:04:23,889
the application and making that bug

102
00:04:21,108 --> 00:04:26,799
adding the defect

103
00:04:23,889 --> 00:04:29,949
so the questions that we're posing here

104
00:04:26,800 --> 00:04:32,039
are doesn't security of the framework

105
00:04:29,949 --> 00:04:34,900
make the applications more secure and

106
00:04:32,039 --> 00:04:36,669
does building security controls into the

107
00:04:34,900 --> 00:04:39,539
framework actually makes the application

108
00:04:36,669 --> 00:04:45,430
more secure actually text that and

109
00:04:39,539 --> 00:04:47,020
because okay I'll get it to that so few

110
00:04:45,430 --> 00:04:49,449
years ago that was actually proposed by

111
00:04:47,020 --> 00:04:53,169
my ex colleague John Stephen he proposed

112
00:04:49,449 --> 00:04:55,659
different levels of mitigations for

113
00:04:53,169 --> 00:04:57,938
vulnerability and the application so we

114
00:04:55,659 --> 00:05:00,639
started level zero no mitigation the

115
00:04:57,939 --> 00:05:02,620
application vulnerable then level one is

116
00:05:00,639 --> 00:05:05,409
a custom function right so developer

117
00:05:02,620 --> 00:05:06,669
writes their own crypto their own crypto

118
00:05:05,409 --> 00:05:09,819
function their own sanitized asian

119
00:05:06,669 --> 00:05:13,000
function whatever level two is an

120
00:05:09,819 --> 00:05:14,919
external library so add a library that

121
00:05:13,000 --> 00:05:17,860
somebody else wrote third party level

122
00:05:14,919 --> 00:05:19,419
three is a framework plugin so something

123
00:05:17,860 --> 00:05:22,029
that integrates very tightly with a

124
00:05:19,419 --> 00:05:24,188
framework and then level four something

125
00:05:22,029 --> 00:05:28,930
that is built into the framework itself

126
00:05:24,189 --> 00:05:31,900
and naturally let's look at the example

127
00:05:28,930 --> 00:05:33,729
so as I said you know developer function

128
00:05:31,900 --> 00:05:34,900
that's actually from just one of the

129
00:05:33,729 --> 00:05:38,199
applications I was reviewing a couple

130
00:05:34,900 --> 00:05:42,120
weeks ago anybody sees a problem with

131
00:05:38,199 --> 00:05:44,520
the course policy they're trying to add

132
00:05:42,120 --> 00:05:47,020
write your allowable origin so

133
00:05:44,520 --> 00:05:48,460
oftentimes we don't trust developers to

134
00:05:47,020 --> 00:05:50,859
write their own security functions so

135
00:05:48,460 --> 00:05:53,049
like level one is probably not the best

136
00:05:50,860 --> 00:05:54,669
idea and of course writing your own

137
00:05:53,050 --> 00:05:58,839
crypto we cannot have a presentation

138
00:05:54,669 --> 00:06:02,460
without an xkcd comic example of level

139
00:05:58,839 --> 00:06:05,409
two an external library like isapi

140
00:06:02,460 --> 00:06:08,799
anybody familiar with the sappy maybe

141
00:06:05,409 --> 00:06:10,810
heard of you know rest in peace didn't

142
00:06:08,800 --> 00:06:12,550
go all so well but that was a you know

143
00:06:10,810 --> 00:06:14,560
good idea of having all the different

144
00:06:12,550 --> 00:06:15,939
security features at a third-party

145
00:06:14,560 --> 00:06:17,259
library that you just pull into your

146
00:06:15,939 --> 00:06:21,310
code and you add your authentication

147
00:06:17,259 --> 00:06:23,529
authorization sanitization etc level

148
00:06:21,310 --> 00:06:25,990
three a framework plugin like javascript

149
00:06:23,529 --> 00:06:29,610
world has plenty of those that integrate

150
00:06:25,990 --> 00:06:33,069
tightly into express or sales or happy

151
00:06:29,610 --> 00:06:34,930
and then level four built-in security

152
00:06:33,069 --> 00:06:37,400
for example on spring security framework

153
00:06:34,930 --> 00:06:39,620
right where is just configuration

154
00:06:37,400 --> 00:06:41,508
you add your course policy you add your

155
00:06:39,620 --> 00:06:45,370
cookie flags through the configuration

156
00:06:41,509 --> 00:06:49,669
file so naturally we would think that

157
00:06:45,370 --> 00:06:51,979
the closer the security mitigation is

158
00:06:49,669 --> 00:06:55,430
built into the framework kind of the

159
00:06:51,979 --> 00:06:57,050
Lefter it is the better that would be

160
00:06:55,430 --> 00:06:58,310
for the application right we said you

161
00:06:57,050 --> 00:06:59,000
know we don't trust developers write

162
00:06:58,310 --> 00:07:01,070
their code

163
00:06:59,000 --> 00:07:04,400
well the frameworks should do a better

164
00:07:01,070 --> 00:07:05,750
job but because this is academia we want

165
00:07:04,400 --> 00:07:08,120
to see the data like that's what my

166
00:07:05,750 --> 00:07:12,050
advisor said it's a good idea but

167
00:07:08,120 --> 00:07:14,000
doesn't really happen so I did a couple

168
00:07:12,050 --> 00:07:17,570
of case studies so one we took

169
00:07:14,000 --> 00:07:20,449
cross-site scripting vulnerability and

170
00:07:17,570 --> 00:07:22,909
of course common mitigations our output

171
00:07:20,449 --> 00:07:25,880
encoding input validation sanitization

172
00:07:22,910 --> 00:07:28,039
everybody knows what those are and I

173
00:07:25,880 --> 00:07:30,800
wanted to have an set of applications

174
00:07:28,039 --> 00:07:33,669
that would likely have a cross-site

175
00:07:30,800 --> 00:07:37,370
scripting I mean a lot of applications

176
00:07:33,669 --> 00:07:40,310
may have a cross-site scripting because

177
00:07:37,370 --> 00:07:42,080
somebody screwed up sort of thing but it

178
00:07:40,310 --> 00:07:44,090
kind of I wanted to have a target group

179
00:07:42,080 --> 00:07:47,180
of applications that are very likely to

180
00:07:44,090 --> 00:07:49,429
have it and so the use case that came up

181
00:07:47,180 --> 00:07:53,449
with is when the application actually

182
00:07:49,430 --> 00:07:56,479
needs to render the users HTML so if

183
00:07:53,449 --> 00:07:58,430
it's a blog post if it's a CMS if it's

184
00:07:56,479 --> 00:08:00,770
sort of sort of like a marketing tool

185
00:07:58,430 --> 00:08:03,470
that needs to send marketing emails then

186
00:08:00,770 --> 00:08:07,909
you enable your users to use you know

187
00:08:03,470 --> 00:08:13,669
bold italics images fancy fonts etc etc

188
00:08:07,909 --> 00:08:14,990
and how do we implement that I mean the

189
00:08:13,669 --> 00:08:17,780
easiest way you just allow users to

190
00:08:14,990 --> 00:08:20,240
stick in the raw HTML a better way to do

191
00:08:17,780 --> 00:08:22,400
it you either sanitize it or you use

192
00:08:20,240 --> 00:08:25,330
markdown and then you transform it into

193
00:08:22,400 --> 00:08:29,120
HTML make sure that hTML is somehow safe

194
00:08:25,330 --> 00:08:32,240
so went on github found a bunch of

195
00:08:29,120 --> 00:08:36,589
applications and because it was targeted

196
00:08:32,240 --> 00:08:40,190
to JavaScript and that was 2016 so that

197
00:08:36,589 --> 00:08:42,050
was still angularjs not angular and Jade

198
00:08:40,190 --> 00:08:44,839
Park so we kind of selected the template

199
00:08:42,049 --> 00:08:47,990
engines that were popular at the time so

200
00:08:44,839 --> 00:08:51,140
Jade bug EGS and angular applications

201
00:08:47,990 --> 00:08:52,910
that were blogs or CMS trying to look

202
00:08:51,140 --> 00:08:55,189
for full-stack JavaScript applications

203
00:08:52,910 --> 00:08:58,280
because that issues both client-side and

204
00:08:55,190 --> 00:08:59,930
server-side kind of had some filters to

205
00:08:58,280 --> 00:09:03,530
make sure that application is not super

206
00:08:59,930 --> 00:09:05,180
outdated has at least one star and you

207
00:09:03,530 --> 00:09:06,829
know the language is JavaScript HTML or

208
00:09:05,180 --> 00:09:08,449
CSS because that's what developers

209
00:09:06,830 --> 00:09:12,080
choose and github when the creative

210
00:09:08,450 --> 00:09:14,960
project so we collected a 170

211
00:09:12,080 --> 00:09:18,320
applications roughly a third in each

212
00:09:14,960 --> 00:09:20,150
framework and then if we look at the

213
00:09:18,320 --> 00:09:21,500
frame with their templating engines

214
00:09:20,150 --> 00:09:23,780
right I'm kind of using these words

215
00:09:21,500 --> 00:09:28,940
interchangeably so if we look how you

216
00:09:23,780 --> 00:09:33,470
can show reach HTML rich rich text in

217
00:09:28,940 --> 00:09:36,080
those frameworks in Jade pug I by

218
00:09:33,470 --> 00:09:38,600
default it escapes everything so if you

219
00:09:36,080 --> 00:09:41,000
have you know h1 equals title it's gonna

220
00:09:38,600 --> 00:09:43,490
escape a it's gonna output in code HTML

221
00:09:41,000 --> 00:09:45,830
and then if you want to use

222
00:09:43,490 --> 00:09:47,660
interpolation you have to say you're not

223
00:09:45,830 --> 00:09:49,970
equals and then it doesn't have any

224
00:09:47,660 --> 00:09:53,900
protection but it just will render HTML

225
00:09:49,970 --> 00:09:56,450
as is EGS does kind of the same thing

226
00:09:53,900 --> 00:09:58,250
by default it escapes everything but you

227
00:09:56,450 --> 00:10:00,800
can turn off the escaping or enable

228
00:09:58,250 --> 00:10:04,010
interpolation with the percent angle

229
00:10:00,800 --> 00:10:06,589
bracket - and then there's no scientist

230
00:10:04,010 --> 00:10:08,360
asian and then if you take angularjs of

231
00:10:06,590 --> 00:10:11,510
course it has been textual aware

232
00:10:08,360 --> 00:10:14,780
escaping so by default it by default it

233
00:10:11,510 --> 00:10:20,390
does output encoding but you can also

234
00:10:14,780 --> 00:10:22,640
ask it to output raw HTML with the ng

235
00:10:20,390 --> 00:10:26,960
bayan HTM elegans and go Jas I know this

236
00:10:22,640 --> 00:10:29,780
is all agent and you can also enable the

237
00:10:26,960 --> 00:10:33,410
raw interpolation without scientist

238
00:10:29,780 --> 00:10:35,000
Asian by saying trust as HTML so those

239
00:10:33,410 --> 00:10:36,469
were the things that we're looking in

240
00:10:35,000 --> 00:10:41,080
applications how many of them are

241
00:10:36,470 --> 00:10:43,730
outputting HTML in unsafe measure manner

242
00:10:41,080 --> 00:10:46,160
so this is the research the analysis

243
00:10:43,730 --> 00:10:47,870
pipeline that you know downloaded the

244
00:10:46,160 --> 00:10:50,270
projects actually downloaded only the

245
00:10:47,870 --> 00:10:51,570
template file so that it was easier and

246
00:10:50,270 --> 00:10:54,120
lighter

247
00:10:51,570 --> 00:10:57,090
and use different parsers for the three

248
00:10:54,120 --> 00:11:00,060
different templates gonna based on the

249
00:10:57,090 --> 00:11:04,110
out outsource open-source pop car sir so

250
00:11:00,060 --> 00:11:08,869
had updated the pug lexer and parser for

251
00:11:04,110 --> 00:11:11,400
the pug framework used the core EGS

252
00:11:08,870 --> 00:11:14,250
library it's kinda with some updates to

253
00:11:11,400 --> 00:11:14,640
parse what I needed and then I use es

254
00:11:14,250 --> 00:11:19,050
lint

255
00:11:14,640 --> 00:11:22,290
for Ango GS with my custom rules so ran

256
00:11:19,050 --> 00:11:23,609
those tools found issues did my menial

257
00:11:22,290 --> 00:11:25,770
analysis because as we know about

258
00:11:23,610 --> 00:11:27,090
linters you know they're not always true

259
00:11:25,770 --> 00:11:32,790
so for example there would be cases

260
00:11:27,090 --> 00:11:35,040
where that hTML is output in scientist

261
00:11:32,790 --> 00:11:36,599
manner but that HTML doesn't actually

262
00:11:35,040 --> 00:11:39,329
come from the user right because there's

263
00:11:36,600 --> 00:11:41,520
no data flow here maybe it's a you know

264
00:11:39,330 --> 00:11:43,260
just comes from the stored files in this

265
00:11:41,520 --> 00:11:45,720
case with so kids it's trust that it's

266
00:11:43,260 --> 00:11:47,819
not an issue and then perform

267
00:11:45,720 --> 00:11:52,670
statistical analysis to kind of verify

268
00:11:47,820 --> 00:11:58,830
the results so what did we get so for

269
00:11:52,670 --> 00:11:59,400
Jade EGS and angularjs 38 percent of the

270
00:11:58,830 --> 00:12:04,080
Jade Park

271
00:11:59,400 --> 00:12:06,840
applications were vulnerable 43% of EGS

272
00:12:04,080 --> 00:12:09,420
and only 12 percent of angular and goji

273
00:12:06,840 --> 00:12:13,410
s applications were vulnerable looks

274
00:12:09,420 --> 00:12:17,579
great I mean it kind of goes with what

275
00:12:13,410 --> 00:12:20,520
we expected so the Jade park and EGS

276
00:12:17,580 --> 00:12:23,100
don't have any sanitization built into

277
00:12:20,520 --> 00:12:25,079
the frameworks moreover they don't even

278
00:12:23,100 --> 00:12:27,150
have a third-party library that will do

279
00:12:25,080 --> 00:12:29,130
it for them right so in this case the

280
00:12:27,150 --> 00:12:31,230
mitigation level was either level 1

281
00:12:29,130 --> 00:12:33,240
developer has to do their own stuff or

282
00:12:31,230 --> 00:12:36,090
level 2 they could use a third-party

283
00:12:33,240 --> 00:12:37,770
library the most common approach that

284
00:12:36,090 --> 00:12:41,580
we've seen that they use is just using a

285
00:12:37,770 --> 00:12:43,079
markdown which doesn't actually protect

286
00:12:41,580 --> 00:12:45,860
you from HTML I mean that there are

287
00:12:43,080 --> 00:12:50,610
corner cases it's not a hundred percent

288
00:12:45,860 --> 00:12:55,470
but that was something and then angular

289
00:12:50,610 --> 00:12:57,630
has the mitigation built in so that kind

290
00:12:55,470 --> 00:12:59,820
of confirms our hypothesis but then the

291
00:12:57,630 --> 00:13:01,710
question that you know my advisor asked

292
00:12:59,820 --> 00:13:04,350
well maybe the angular developers are

293
00:13:01,710 --> 00:13:05,760
just better how do you know right maybe

294
00:13:04,350 --> 00:13:07,980
they're more experienced

295
00:13:05,760 --> 00:13:09,899
there the applications are bigger than

296
00:13:07,980 --> 00:13:12,000
this is open source on github who knows

297
00:13:09,899 --> 00:13:14,010
what these applications are right so I

298
00:13:12,000 --> 00:13:15,980
had to run the confounding variable

299
00:13:14,010 --> 00:13:18,660
analysis or statistical analysis that

300
00:13:15,980 --> 00:13:20,730
basically it takes other factors that

301
00:13:18,660 --> 00:13:22,709
could have impacted those results and

302
00:13:20,730 --> 00:13:26,100
the other factors that I could get from

303
00:13:22,709 --> 00:13:28,199
github was overall developers experience

304
00:13:26,100 --> 00:13:30,209
which was a proxy for that was the

305
00:13:28,200 --> 00:13:32,130
number of projects in this developer's

306
00:13:30,209 --> 00:13:33,899
repo right over all developers

307
00:13:32,130 --> 00:13:35,939
experience in JavaScript number of

308
00:13:33,899 --> 00:13:39,660
projects in JavaScript for that

309
00:13:35,940 --> 00:13:42,180
developer the project size kind of the

310
00:13:39,660 --> 00:13:43,740
project project size kind of proxy for

311
00:13:42,180 --> 00:13:46,620
their maturity of the project

312
00:13:43,740 --> 00:13:49,110
potentially project popularity how many

313
00:13:46,620 --> 00:13:51,300
stars projects we use how many Forks so

314
00:13:49,110 --> 00:13:53,279
kinda how much or how solid the project

315
00:13:51,300 --> 00:13:54,990
is and then the last one was the

316
00:13:53,279 --> 00:13:57,810
template engine that they were using in

317
00:13:54,990 --> 00:14:00,360
some confounding and variable analysis

318
00:13:57,810 --> 00:14:02,489
and I run those tests and the result

319
00:14:00,360 --> 00:14:06,959
that you get if that number the p-value

320
00:14:02,490 --> 00:14:09,839
is less than 0.05 that means that factor

321
00:14:06,959 --> 00:14:11,310
actually effects the results so with

322
00:14:09,839 --> 00:14:13,740
that the only factor that actually

323
00:14:11,310 --> 00:14:15,630
affected the results was the template

324
00:14:13,740 --> 00:14:17,520
engine so all the other factors were

325
00:14:15,630 --> 00:14:19,620
pretty much equal for the quality

326
00:14:17,520 --> 00:14:23,100
quality of developers was pretty much

327
00:14:19,620 --> 00:14:26,000
equal so that force the hypothesis like

328
00:14:23,100 --> 00:14:27,690
all right make sense the better if the

329
00:14:26,000 --> 00:14:30,690
mitigation is implemented in the

330
00:14:27,690 --> 00:14:33,930
framework it's great the applications

331
00:14:30,690 --> 00:14:35,250
are more secure well let's try it on a

332
00:14:33,930 --> 00:14:37,199
different set of applications we only

333
00:14:35,250 --> 00:14:38,339
took JavaScript I'm sorry we only took

334
00:14:37,200 --> 00:14:41,760
cross the scripting well it took

335
00:14:38,339 --> 00:14:44,010
front-end so for the second study I took

336
00:14:41,760 --> 00:14:45,660
cross-site request forgery and of course

337
00:14:44,010 --> 00:14:47,339
looked at the server-side frameworks

338
00:14:45,660 --> 00:14:49,709
because that's where the mitigation is

339
00:14:47,339 --> 00:14:52,800
gonna be the reason for cross-site

340
00:14:49,709 --> 00:14:54,900
request forgery this vulnerability is

341
00:14:52,800 --> 00:14:57,569
interesting because it basically went

342
00:14:54,900 --> 00:14:59,970
away from a wasp top ten in the kind of

343
00:14:57,570 --> 00:15:02,399
through the last seven years right so it

344
00:14:59,970 --> 00:15:03,990
looks like as an industry not

345
00:15:02,399 --> 00:15:06,240
specifically in JavaScript right but

346
00:15:03,990 --> 00:15:08,730
overall we are getting rid of this

347
00:15:06,240 --> 00:15:10,740
vulnerability and that is attributed

348
00:15:08,730 --> 00:15:13,920
mostly to the fact that it's built into

349
00:15:10,740 --> 00:15:15,450
the frameworks like dotnet and Java a

350
00:15:13,920 --> 00:15:18,610
lot of frameworks have that built in

351
00:15:15,450 --> 00:15:20,589
it's going away so

352
00:15:18,610 --> 00:15:21,970
are different types of protection for a

353
00:15:20,589 --> 00:15:24,430
cross-site request forgery the

354
00:15:21,970 --> 00:15:27,100
vulnerability depends on the

355
00:15:24,430 --> 00:15:29,349
authentication being made through the

356
00:15:27,100 --> 00:15:30,820
cookies right so if the asite has if the

357
00:15:29,350 --> 00:15:34,300
site doesn't have cookies there is no

358
00:15:30,820 --> 00:15:37,380
CSRF we have to remember that and the

359
00:15:34,300 --> 00:15:41,319
common mitigations are of course the

360
00:15:37,380 --> 00:15:44,110
hidden tokens either in the body or the

361
00:15:41,320 --> 00:15:46,209
double submit cookie or two factor

362
00:15:44,110 --> 00:15:48,430
authentication kind of less common but

363
00:15:46,209 --> 00:15:53,250
like before for certain functionalities

364
00:15:48,430 --> 00:15:53,250
and then there are some client-side

365
00:15:54,060 --> 00:15:59,109
mitigations as well same side cookies

366
00:15:56,200 --> 00:16:01,269
which are not used across all browsers

367
00:15:59,110 --> 00:16:03,190
yet but they exist and there were a

368
00:16:01,269 --> 00:16:06,130
couple other mitigations that were

369
00:16:03,190 --> 00:16:07,990
proposed in the academia world like

370
00:16:06,130 --> 00:16:09,490
whitelisting the expected origins so you

371
00:16:07,990 --> 00:16:12,700
only trust if request comes from

372
00:16:09,490 --> 00:16:14,980
expected origins or have a allowed

373
00:16:12,700 --> 00:16:18,190
referral lists but that's just the

374
00:16:14,980 --> 00:16:19,839
academic recommendations right like that

375
00:16:18,190 --> 00:16:22,930
hasn't been really successfully

376
00:16:19,839 --> 00:16:26,230
implemented and then as I said there are

377
00:16:22,930 --> 00:16:28,540
a couple different cases where if your

378
00:16:26,230 --> 00:16:31,810
application is using GWT s and is not

379
00:16:28,540 --> 00:16:34,680
using session cookies then it may not be

380
00:16:31,810 --> 00:16:37,359
vulnerable to cross-site scripting right

381
00:16:34,680 --> 00:16:38,439
using GWT I'm sorry at cross-site

382
00:16:37,360 --> 00:16:41,160
scripting cross-site request forgery

383
00:16:38,440 --> 00:16:44,170
using GWT is for session management is a

384
00:16:41,160 --> 00:16:46,329
separate question I don't recommend that

385
00:16:44,170 --> 00:16:49,839
but it's a kind of a topic for a

386
00:16:46,329 --> 00:16:53,199
separate talk and then if the

387
00:16:49,839 --> 00:16:55,120
application for example doesn't use HTTP

388
00:16:53,199 --> 00:16:56,829
but has all the communication through

389
00:16:55,120 --> 00:17:02,290
the WebSockets again WebSockets don't

390
00:16:56,829 --> 00:17:04,959
have cookies therefore no CSRF so data

391
00:17:02,290 --> 00:17:07,449
selection again we need to have a set of

392
00:17:04,959 --> 00:17:11,199
applications that are likely to have a

393
00:17:07,449 --> 00:17:13,780
CSRF and we are one they must have some

394
00:17:11,199 --> 00:17:15,610
sort of state changing functionality so

395
00:17:13,780 --> 00:17:19,629
a post request that changes the state

396
00:17:15,609 --> 00:17:21,790
and so not just you know a read a get

397
00:17:19,630 --> 00:17:23,559
application that only gives data so it

398
00:17:21,790 --> 00:17:26,409
has to have account accounts user

399
00:17:23,559 --> 00:17:29,770
accounts and has to have to store some

400
00:17:26,410 --> 00:17:31,870
data that is sensitive enough right also

401
00:17:29,770 --> 00:17:32,620
if it changes something that you don't

402
00:17:31,870 --> 00:17:34,719
care about

403
00:17:32,620 --> 00:17:36,159
maybe there is CSRF but it's really not

404
00:17:34,720 --> 00:17:37,320
a security issue because you just don't

405
00:17:36,160 --> 00:17:41,230
care about it

406
00:17:37,320 --> 00:17:43,600
so we choose applications again like

407
00:17:41,230 --> 00:17:45,760
blogs that would have users CMS is

408
00:17:43,600 --> 00:17:50,260
ecommerce of course I'm kind of the

409
00:17:45,760 --> 00:17:52,180
biggest the risk for e-commerce websites

410
00:17:50,260 --> 00:17:56,590
if somebody goes and places an order

411
00:17:52,180 --> 00:17:58,030
instead of you some rest api is in terms

412
00:17:56,590 --> 00:18:00,959
of the frameworks again which shows kind

413
00:17:58,030 --> 00:18:04,960
of the most popular ones and those 2018

414
00:18:00,960 --> 00:18:06,400
Express Khoa happy sales and I also

415
00:18:04,960 --> 00:18:07,720
added meteor because it was just

416
00:18:06,400 --> 00:18:10,030
interesting because it was a full stack

417
00:18:07,720 --> 00:18:16,059
JavaScript framework it's not as popular

418
00:18:10,030 --> 00:18:17,590
as those four but you'll see why and the

419
00:18:16,059 --> 00:18:20,559
target was to have about hundred

420
00:18:17,590 --> 00:18:22,149
applications per framework we were not

421
00:18:20,559 --> 00:18:25,000
able to reach our target for every

422
00:18:22,150 --> 00:18:27,309
application because for example happy I

423
00:18:25,000 --> 00:18:30,429
turned out to be not as popular on

424
00:18:27,309 --> 00:18:32,740
github and in those specific kind of

425
00:18:30,429 --> 00:18:35,740
types of applications weren't able just

426
00:18:32,740 --> 00:18:37,630
there just don't exist there so we got

427
00:18:35,740 --> 00:18:39,490
about a hundred for the other ones and

428
00:18:37,630 --> 00:18:44,110
they were fewer for happy but overall

429
00:18:39,490 --> 00:18:50,140
had 364 publications so how do we

430
00:18:44,110 --> 00:18:52,570
prevent CSRF in those frameworks the

431
00:18:50,140 --> 00:18:54,429
first three Express Cohen happy have

432
00:18:52,570 --> 00:18:56,080
plugins that are built and kind of

433
00:18:54,429 --> 00:18:58,150
they're built for the framework very

434
00:18:56,080 --> 00:19:00,909
tight integration and it's pretty

435
00:18:58,150 --> 00:19:02,320
straightforward right you require the

436
00:19:00,910 --> 00:19:08,620
plugin and then you configure the

437
00:19:02,320 --> 00:19:10,240
plug-in with the settings same for for

438
00:19:08,620 --> 00:19:12,550
happy I'm slightly different but yes you

439
00:19:10,240 --> 00:19:13,870
still require the plug-in you configure

440
00:19:12,550 --> 00:19:17,350
you plug it kind of into the framework

441
00:19:13,870 --> 00:19:21,659
slightly differently but same same idea

442
00:19:17,350 --> 00:19:24,370
and then the sales framework is a

443
00:19:21,660 --> 00:19:26,290
configuration driven framework a lot of

444
00:19:24,370 --> 00:19:29,020
things are done are enabled through

445
00:19:26,290 --> 00:19:31,470
configuration in sales and it was built

446
00:19:29,020 --> 00:19:36,429
with security in mind and they kind of

447
00:19:31,470 --> 00:19:38,350
sold that right that part so they

448
00:19:36,429 --> 00:19:41,560
basically have a configuration that you

449
00:19:38,350 --> 00:19:44,800
can just set to true or false or you can

450
00:19:41,560 --> 00:19:45,340
set configure more specific details of

451
00:19:44,800 --> 00:19:47,440
how you can

452
00:19:45,340 --> 00:19:50,530
sort of like here an example for example

453
00:19:47,440 --> 00:19:54,190
you can have configured for Ajax and

454
00:19:50,530 --> 00:19:57,340
restrict the origins at cetera and then

455
00:19:54,190 --> 00:20:01,000
the meteor framework actually uses

456
00:19:57,340 --> 00:20:06,850
WebSockets for communication so that

457
00:20:01,000 --> 00:20:08,680
kind of didn't fit into our taxonomy of

458
00:20:06,850 --> 00:20:11,550
where the mitigation can be implemented

459
00:20:08,680 --> 00:20:14,260
because what meteor does it uses its own

460
00:20:11,550 --> 00:20:17,470
protocol the distributed data protocol

461
00:20:14,260 --> 00:20:18,940
DDP and when the server the client

462
00:20:17,470 --> 00:20:21,850
connects to the server at first they

463
00:20:18,940 --> 00:20:24,190
communicate over HTTP but then once the

464
00:20:21,850 --> 00:20:26,590
session is established they drop into

465
00:20:24,190 --> 00:20:28,810
the WebSocket level into the TLS and

466
00:20:26,590 --> 00:20:31,149
they keep that connection and

467
00:20:28,810 --> 00:20:35,560
communicates through that so there is no

468
00:20:31,150 --> 00:20:37,120
cookie so you cannot actually exploit

469
00:20:35,560 --> 00:20:39,190
cross-site request forgery with that I

470
00:20:37,120 --> 00:20:41,310
mean you could exploit that there are

471
00:20:39,190 --> 00:20:43,600
some attacks for exploiting that

472
00:20:41,310 --> 00:20:45,340
initialization this the initialization

473
00:20:43,600 --> 00:20:47,409
of the connection the first step and

474
00:20:45,340 --> 00:20:48,760
basically establishing a connection sort

475
00:20:47,410 --> 00:20:50,260
of with the server establishing

476
00:20:48,760 --> 00:20:53,530
connection from the client to a

477
00:20:50,260 --> 00:20:54,100
malicious site but that's kind of a

478
00:20:53,530 --> 00:20:56,500
different story

479
00:20:54,100 --> 00:20:59,500
still not cross-site request forgery and

480
00:20:56,500 --> 00:21:01,600
once the WebSocket is open you know from

481
00:20:59,500 --> 00:21:03,370
your browser in one tab to the server if

482
00:21:01,600 --> 00:21:05,949
you have another tab with a malicious

483
00:21:03,370 --> 00:21:10,870
application it cannot get into that

484
00:21:05,950 --> 00:21:12,280
connection so that was kind of out of

485
00:21:10,870 --> 00:21:14,229
the question so all the applications

486
00:21:12,280 --> 00:21:15,730
from meteor or are by default fixed

487
00:21:14,230 --> 00:21:20,200
right for for cross-site request forgery

488
00:21:15,730 --> 00:21:23,680
and then the JW T's as I said because

489
00:21:20,200 --> 00:21:25,870
they are using tokens that are sent in

490
00:21:23,680 --> 00:21:27,790
the headers they are not cookies they

491
00:21:25,870 --> 00:21:29,800
are not attached by default by the

492
00:21:27,790 --> 00:21:32,080
browser if you are sending a request

493
00:21:29,800 --> 00:21:33,879
from the same browser from a different

494
00:21:32,080 --> 00:21:36,100
tab to the same server the browser

495
00:21:33,880 --> 00:21:41,160
wouldn't automatically attach the GWT

496
00:21:36,100 --> 00:21:43,990
tokens so see Cerf is not possible yes

497
00:21:41,160 --> 00:21:46,300
there are other protections or other

498
00:21:43,990 --> 00:21:48,790
other limitations with that so as I said

499
00:21:46,300 --> 00:21:51,310
meteor kinda doesn't fit into that

500
00:21:48,790 --> 00:21:53,379
taxonomy of the levels so I had to add

501
00:21:51,310 --> 00:21:55,810
another level level five and kind of

502
00:21:53,380 --> 00:21:57,670
called the architecture level mitigation

503
00:21:55,810 --> 00:21:58,840
control so the me take the mitigation

504
00:21:57,670 --> 00:22:01,420
control is built into

505
00:21:58,840 --> 00:22:04,720
the architecture of the framework or the

506
00:22:01,420 --> 00:22:07,590
platform and if we think about other

507
00:22:04,720 --> 00:22:11,860
examples in software development world

508
00:22:07,590 --> 00:22:13,899
you'd say ok buffer overflows was very

509
00:22:11,860 --> 00:22:16,540
popular you know they exist in C they

510
00:22:13,900 --> 00:22:19,030
don't exist in Java in general right why

511
00:22:16,540 --> 00:22:21,420
because Jolla manages memory for you so

512
00:22:19,030 --> 00:22:23,889
that's exactly that example where a

513
00:22:21,420 --> 00:22:26,020
security control is kind of built into

514
00:22:23,890 --> 00:22:27,970
the framework another in the framework

515
00:22:26,020 --> 00:22:30,580
into the platform into the architecture

516
00:22:27,970 --> 00:22:35,020
and it's kind of eliminated for these

517
00:22:30,580 --> 00:22:36,490
set of applications so same hypothesis

518
00:22:35,020 --> 00:22:42,370
let's see if we can prove it

519
00:22:36,490 --> 00:22:45,100
for CSRF kind of similar pipeline the

520
00:22:42,370 --> 00:22:49,060
only difference is how I checked for

521
00:22:45,100 --> 00:22:51,580
CSRF used linters linter you know if

522
00:22:49,060 --> 00:22:53,320
lint rules for all the different

523
00:22:51,580 --> 00:22:57,820
frameworks that I had had to write you

524
00:22:53,320 --> 00:22:59,560
know separate rules and yeah and there

525
00:22:57,820 --> 00:23:03,370
are different in the previous slides I

526
00:22:59,560 --> 00:23:05,740
showed like one CSRF mitigation library

527
00:23:03,370 --> 00:23:07,540
that is our mitigation Pro framework but

528
00:23:05,740 --> 00:23:09,580
because it's open-source there are

529
00:23:07,540 --> 00:23:11,379
multiple different libraries for some

530
00:23:09,580 --> 00:23:14,199
framework some that are more popular

531
00:23:11,380 --> 00:23:15,850
than others but I had rules to catch as

532
00:23:14,200 --> 00:23:17,350
many as I could

533
00:23:15,850 --> 00:23:20,139
usually they're two or three that's not

534
00:23:17,350 --> 00:23:25,570
like they're 15 different libraries so

535
00:23:20,140 --> 00:23:27,280
what did we get basically out of for

536
00:23:25,570 --> 00:23:29,620
example for express out of a hundred and

537
00:23:27,280 --> 00:23:33,220
nine applications only six were

538
00:23:29,620 --> 00:23:36,550
protected so that's a very very very

539
00:23:33,220 --> 00:23:39,550
small number for Khoa out of 100 only

540
00:23:36,550 --> 00:23:42,399
six were protected for happy zero were

541
00:23:39,550 --> 00:23:45,220
protected and then for sales seven were

542
00:23:42,400 --> 00:23:47,020
protected but then I looked at how many

543
00:23:45,220 --> 00:23:49,330
of them are using JW tees because if

544
00:23:47,020 --> 00:23:51,940
they do use JW tees I cannot say that

545
00:23:49,330 --> 00:23:54,909
they're vulnerable to CSRF and those

546
00:23:51,940 --> 00:23:57,100
numbers were higher I don't think that

547
00:23:54,910 --> 00:23:59,170
they were because developers wanted to

548
00:23:57,100 --> 00:24:01,480
protect the applications from CSRF

549
00:23:59,170 --> 00:24:04,390
they probably just wanted to use GWT s

550
00:24:01,480 --> 00:24:05,840
for very different reasons so there were

551
00:24:04,390 --> 00:24:08,150
pine umbers and then

552
00:24:05,840 --> 00:24:09,800
I combined those to make sure I could

553
00:24:08,150 --> 00:24:11,960
count only the number of applications

554
00:24:09,800 --> 00:24:16,190
that are protected and not protected by

555
00:24:11,960 --> 00:24:19,460
both methods and you can see that for

556
00:24:16,190 --> 00:24:22,370
Khoa for example I had six with plugins

557
00:24:19,460 --> 00:24:24,830
protection and 14 with JWT protection

558
00:24:22,370 --> 00:24:27,469
and the total is 19 because one

559
00:24:24,830 --> 00:24:29,389
application had both and that definitely

560
00:24:27,470 --> 00:24:32,000
shares like okay well they using gwt's

561
00:24:29,390 --> 00:24:33,950
but they don't even know that they JWT

562
00:24:32,000 --> 00:24:38,180
czar protecting them from CSRF so they

563
00:24:33,950 --> 00:24:39,980
just added a plug-in just in case and so

564
00:24:38,180 --> 00:24:42,860
if we look at the percentage of

565
00:24:39,980 --> 00:24:46,490
protected applications and compare them

566
00:24:42,860 --> 00:24:48,199
to the mitigation levels for the ploy

567
00:24:46,490 --> 00:24:50,540
you know the plug-in level or the

568
00:24:48,200 --> 00:24:52,190
framework level mitigations the numbers

569
00:24:50,540 --> 00:24:54,250
don't tell the same story as for

570
00:24:52,190 --> 00:24:59,450
cross-site scripting right we have 14%

571
00:24:54,250 --> 00:25:04,370
19% 33 35 percent for l3 protection and

572
00:24:59,450 --> 00:25:08,450
then 14% for l4 protection so here kind

573
00:25:04,370 --> 00:25:10,879
of doesn't matter where the word the fix

574
00:25:08,450 --> 00:25:12,110
is in in the application right it

575
00:25:10,880 --> 00:25:15,530
doesn't look like that makes

576
00:25:12,110 --> 00:25:17,419
applications more secure so let's run

577
00:25:15,530 --> 00:25:19,970
the confounding variables analysis just

578
00:25:17,420 --> 00:25:22,010
in case can I did the same tests make

579
00:25:19,970 --> 00:25:24,650
sure that all the developers have

580
00:25:22,010 --> 00:25:28,460
similar skills right not ones are better

581
00:25:24,650 --> 00:25:32,150
than others and again no surprises here

582
00:25:28,460 --> 00:25:34,100
the data didn't show any single factor

583
00:25:32,150 --> 00:25:35,510
that will actually affect the results

584
00:25:34,100 --> 00:25:38,780
because I mean the results didn't have

585
00:25:35,510 --> 00:25:40,220
any correlation to start with so the

586
00:25:38,780 --> 00:25:43,190
framework also did kinda in this case

587
00:25:40,220 --> 00:25:45,040
didn't make any any change in any

588
00:25:43,190 --> 00:25:50,590
influence on the result

589
00:25:45,040 --> 00:25:54,950
so for CSRF the hypothesis doesn't prove

590
00:25:50,590 --> 00:25:58,370
that's interesting right so why so if we

591
00:25:54,950 --> 00:26:00,050
compare the results and when I was

592
00:25:58,370 --> 00:26:02,870
talking about CSRF I was talking about

593
00:26:00,050 --> 00:26:06,350
the number of protected applications so

594
00:26:02,870 --> 00:26:09,610
then here I had to flip that and talk

595
00:26:06,350 --> 00:26:11,600
about the number of sorry I flipped the

596
00:26:09,610 --> 00:26:12,979
JavaScript right and talk about the

597
00:26:11,600 --> 00:26:14,689
number of protected applications again

598
00:26:12,980 --> 00:26:17,900
so if we look in the JavaScript

599
00:26:14,690 --> 00:26:21,050
comparing the two if the mitigation is

600
00:26:17,900 --> 00:26:22,460
and you know level 1 or level 2 fewer

601
00:26:21,050 --> 00:26:24,379
applications are protected if the

602
00:26:22,460 --> 00:26:27,490
mitigation is at level 4 more

603
00:26:24,380 --> 00:26:29,690
applications are protected in CSRF that

604
00:26:27,490 --> 00:26:31,400
doesn't kind of end up and the only

605
00:26:29,690 --> 00:26:33,200
difference is that ok if it's at level 5

606
00:26:31,400 --> 00:26:38,780
obviously if it's fixed at the platform

607
00:26:33,200 --> 00:26:40,130
level then it's all good so what's the

608
00:26:38,780 --> 00:26:43,760
difference and the difference was that

609
00:26:40,130 --> 00:26:45,290
for JavaScript the elf for level 4

610
00:26:43,760 --> 00:26:48,560
protection in the framework was enabled

611
00:26:45,290 --> 00:26:50,300
by default and for I'm sorry for

612
00:26:48,560 --> 00:26:53,240
cross-site scripting and then for CSRF

613
00:26:50,300 --> 00:26:55,460
even those sales talks about being very

614
00:26:53,240 --> 00:26:57,080
secure and having all these security

615
00:26:55,460 --> 00:26:59,450
features built into the framework they

616
00:26:57,080 --> 00:27:01,550
were not enabled by default so a lot of

617
00:26:59,450 --> 00:27:04,550
applications had the CSRF set to false

618
00:27:01,550 --> 00:27:06,740
and nobody went and changed it to true

619
00:27:04,550 --> 00:27:08,300
even though it was a you know one flip

620
00:27:06,740 --> 00:27:10,070
right you didn't need to do anything

621
00:27:08,300 --> 00:27:13,399
else just change the setting from true

622
00:27:10,070 --> 00:27:18,620
to false so the security faults kind of

623
00:27:13,400 --> 00:27:21,950
matter right what can we take from from

624
00:27:18,620 --> 00:27:24,020
this well if you are a developer a

625
00:27:21,950 --> 00:27:26,330
framework a framework developer

626
00:27:24,020 --> 00:27:28,250
maintainer right build Security's build

627
00:27:26,330 --> 00:27:31,250
security controls into the framework but

628
00:27:28,250 --> 00:27:33,640
also remember about the security of the

629
00:27:31,250 --> 00:27:36,980
defaults and enable those defaults as

630
00:27:33,640 --> 00:27:38,630
much as possible if you are not a

631
00:27:36,980 --> 00:27:42,110
framework developer if you are a regular

632
00:27:38,630 --> 00:27:43,670
developer you know oftentimes we say ok

633
00:27:42,110 --> 00:27:45,350
choose the framework that has the most

634
00:27:43,670 --> 00:27:47,720
security features like remember not just

635
00:27:45,350 --> 00:27:50,360
about performance or features remember

636
00:27:47,720 --> 00:27:54,170
about security but now I would add to

637
00:27:50,360 --> 00:27:56,659
that build controls into your process be

638
00:27:54,170 --> 00:27:59,540
that your CI CD your code review

639
00:27:56,660 --> 00:28:01,040
anything that checks what are the

640
00:27:59,540 --> 00:28:03,350
security default that your developers

641
00:28:01,040 --> 00:28:05,270
are using right if that framework has

642
00:28:03,350 --> 00:28:11,870
that features will check if you are

643
00:28:05,270 --> 00:28:13,580
using those features and the last part

644
00:28:11,870 --> 00:28:15,469
is well again if you are a framework

645
00:28:13,580 --> 00:28:17,480
developer if there is any any way to

646
00:28:15,470 --> 00:28:19,370
build that control into the architecture

647
00:28:17,480 --> 00:28:21,650
of the framework that would be the best

648
00:28:19,370 --> 00:28:24,290
but of course that is probably wishful

649
00:28:21,650 --> 00:28:27,680
thinking for a lot of vulnerabilities

650
00:28:24,290 --> 00:28:31,100
but that will definitely fix the issues

651
00:28:27,680 --> 00:28:33,310
and with that I think we have time for

652
00:28:31,100 --> 00:28:33,310
questions

653
00:28:39,920 --> 00:28:44,020
if you want to ask a question I've got a

654
00:28:41,750 --> 00:28:53,929
microphone which I won't give to you so

655
00:28:44,020 --> 00:28:56,360
is there any question yeah is there plan

656
00:28:53,929 --> 00:29:01,640
to do similar kind of thing with react

657
00:28:56,360 --> 00:29:03,969
v1 angular I haven't thought about doing

658
00:29:01,640 --> 00:29:05,980
that so I mean adding react to the

659
00:29:03,970 --> 00:29:09,380
rectangular

660
00:29:05,980 --> 00:29:13,340
so if I did kind of cross-site scripting

661
00:29:09,380 --> 00:29:15,080
again right it would be well ones like

662
00:29:13,340 --> 00:29:16,699
why do I need to do across the scripting

663
00:29:15,080 --> 00:29:20,290
again I already have the results from

664
00:29:16,700 --> 00:29:23,000
the academic standpoint right but

665
00:29:20,290 --> 00:29:24,620
they're protections there they all have

666
00:29:23,000 --> 00:29:26,929
protections that are built into the into

667
00:29:24,620 --> 00:29:30,770
the frameworks right so they are the

668
00:29:26,929 --> 00:29:33,799
same level I don't think I don't expect

669
00:29:30,770 --> 00:29:35,330
them to have different results so

670
00:29:33,799 --> 00:29:38,690
they're probably not as interesting for

671
00:29:35,330 --> 00:29:40,129
a cross-site scripting but that's pretty

672
00:29:38,690 --> 00:29:43,540
much it that what you can do in the

673
00:29:40,130 --> 00:29:46,700
client-side applications thank you I

674
00:29:43,540 --> 00:29:48,678
mean I would love to continue that for

675
00:29:46,700 --> 00:29:51,350
other languages so not just JavaScript

676
00:29:48,679 --> 00:29:53,240
right and look at other languages and

677
00:29:51,350 --> 00:30:01,580
other frameworks that would be

678
00:29:53,240 --> 00:30:03,380
interesting just in terms of looking at

679
00:30:01,580 --> 00:30:06,260
the hypothesis of whether like the left

680
00:30:03,380 --> 00:30:08,540
shift with the security features is is

681
00:30:06,260 --> 00:30:11,750
beneficial or not in the first example

682
00:30:08,540 --> 00:30:14,210
the XSS you were comparing to level 1

683
00:30:11,750 --> 00:30:16,340
level 2 to level 4 which is obviously

684
00:30:14,210 --> 00:30:19,580
quite a big distinction whereas in the

685
00:30:16,340 --> 00:30:21,590
in the request for jury one you were

686
00:30:19,580 --> 00:30:23,600
kind of comparing level 3 to level 4 I

687
00:30:21,590 --> 00:30:25,280
guess it's harder to look for level 1 or

688
00:30:23,600 --> 00:30:27,649
2 for that specific vulnerability but

689
00:30:25,280 --> 00:30:29,570
kind of if you've not got the framework

690
00:30:27,650 --> 00:30:32,150
default turned on by default that's

691
00:30:29,570 --> 00:30:34,280
almost like including or not including a

692
00:30:32,150 --> 00:30:36,140
plug-in so I said the boundary is very

693
00:30:34,280 --> 00:30:39,649
similar is that would you agree with

694
00:30:36,140 --> 00:30:42,980
that or yeah yeah that's that's a good

695
00:30:39,650 --> 00:30:44,690
point if the control is built into the

696
00:30:42,980 --> 00:30:47,570
framework but it's not enabled by

697
00:30:44,690 --> 00:30:50,330
default how different is it from just

698
00:30:47,570 --> 00:30:51,439
adding a plugin I yeah it's very close

699
00:30:50,330 --> 00:30:52,620
that that's that's a good observation

700
00:30:51,440 --> 00:30:54,960
and I mean

701
00:30:52,620 --> 00:30:57,000
I wish I could compare you know four

702
00:30:54,960 --> 00:30:58,710
different frameworks that would have you

703
00:30:57,000 --> 00:31:02,340
know level one mitigation level 2 level

704
00:30:58,710 --> 00:31:04,470
3 level 4 but kinda the idea is also not

705
00:31:02,340 --> 00:31:07,409
to game the system right now to choose

706
00:31:04,470 --> 00:31:08,670
the specific framework so the goal was

707
00:31:07,410 --> 00:31:11,220
to choose okay what are the most popular

708
00:31:08,670 --> 00:31:12,900
today for that task what are the most

709
00:31:11,220 --> 00:31:14,520
and I guess the question will be

710
00:31:12,900 --> 00:31:16,559
answered with you know doing more

711
00:31:14,520 --> 00:31:17,850
research and having more samples for

712
00:31:16,559 --> 00:31:19,410
maybe other vulnerabilities in other

713
00:31:17,850 --> 00:31:21,929
languages and then this data will come

714
00:31:19,410 --> 00:31:29,070
up but yeah that's a good observation

715
00:31:21,930 --> 00:31:31,559
thank you do you think those conclusions

716
00:31:29,070 --> 00:31:32,700
would would extend to commercial

717
00:31:31,559 --> 00:31:34,770
applications as well

718
00:31:32,700 --> 00:31:37,559
because you are looking just at the open

719
00:31:34,770 --> 00:31:42,389
source ones so the developer skills my

720
00:31:37,559 --> 00:31:44,490
very answer I would say probably I mean

721
00:31:42,390 --> 00:31:45,780
I don't have the data I don't have

722
00:31:44,490 --> 00:31:49,590
access to a bunch of commercial

723
00:31:45,780 --> 00:31:52,800
applications but being in the business

724
00:31:49,590 --> 00:31:55,020
of developing SAS tools oftentimes

725
00:31:52,800 --> 00:31:57,330
that's the best proxy we have github and

726
00:31:55,020 --> 00:31:59,070
that's how we make our decision so I

727
00:31:57,330 --> 00:32:01,470
mean I would love to run this on

728
00:31:59,070 --> 00:32:03,990
commercial applications of somebody will

729
00:32:01,470 --> 00:32:07,380
let me do that right but I mean I see a

730
00:32:03,990 --> 00:32:10,080
point that the skills level of the

731
00:32:07,380 --> 00:32:13,110
developer is probably higher again we

732
00:32:10,080 --> 00:32:15,360
can we can make it this assumption a lot

733
00:32:13,110 --> 00:32:17,459
of projects on github or just I don't

734
00:32:15,360 --> 00:32:19,320
know somebody's testing something out

735
00:32:17,460 --> 00:32:21,270
students doing their things right like

736
00:32:19,320 --> 00:32:25,350
you know you again you don't have that

737
00:32:21,270 --> 00:32:28,260
specific data but I would I would expect

738
00:32:25,350 --> 00:32:31,020
the numbers in general to be higher but

739
00:32:28,260 --> 00:32:34,290
probably the correlation will still be

740
00:32:31,020 --> 00:32:37,800
the same because it will depend again on

741
00:32:34,290 --> 00:32:39,600
did somebody check like do if if in the

742
00:32:37,800 --> 00:32:41,940
industry and in the enterprise you have

743
00:32:39,600 --> 00:32:44,699
the controls I go and check those

744
00:32:41,940 --> 00:32:48,480
default settings then the numbers would

745
00:32:44,700 --> 00:32:51,510
be higher but I don't know so my

746
00:32:48,480 --> 00:32:52,350
personal experience with be against what

747
00:32:51,510 --> 00:32:54,720
you just said

748
00:32:52,350 --> 00:32:56,610
III don't think that commercial

749
00:32:54,720 --> 00:32:59,010
development the pace of a better quality

750
00:32:56,610 --> 00:33:02,669
than open source when you don't think

751
00:32:59,010 --> 00:33:04,260
it's better quality no good that's fine

752
00:33:02,670 --> 00:33:06,179
that's why open source is a good proxy

753
00:33:04,260 --> 00:33:06,490
for that so yeah maybe a little bit

754
00:33:06,179 --> 00:33:10,750
better

755
00:33:06,490 --> 00:33:11,860
but yeah okay thank you all so maybe I

756
00:33:10,750 --> 00:33:13,540
don't maybe depends on the industry

757
00:33:11,860 --> 00:33:15,340
right if you take financial industry

758
00:33:13,540 --> 00:33:18,399
versus gaming industry worth versus

759
00:33:15,340 --> 00:33:21,780
healthcare oh that would be you know

760
00:33:18,400 --> 00:33:21,780
very interesting research to do

761
00:33:25,559 --> 00:33:30,280
are you looking to extend your case

762
00:33:28,090 --> 00:33:31,570
studies so you just did exercise and see

763
00:33:30,280 --> 00:33:33,370
sir are there any other particular

764
00:33:31,570 --> 00:33:37,270
issues that are on the roadmap for your

765
00:33:33,370 --> 00:33:38,649
academic research thank you but it's

766
00:33:37,270 --> 00:33:43,420
kind of the question that I hear from my

767
00:33:38,650 --> 00:33:44,890
advisor this is not enough I want to

768
00:33:43,420 --> 00:33:48,760
look at electronic ations I want to look

769
00:33:44,890 --> 00:33:50,920
at desktop applications and see what

770
00:33:48,760 --> 00:33:52,780
kind of ulnar abilities are common and

771
00:33:50,920 --> 00:33:54,940
what kind of mitigation is a common and

772
00:33:52,780 --> 00:33:57,460
first well I mean we'll see because in

773
00:33:54,940 --> 00:34:00,040
desktop there's only one framework I

774
00:33:57,460 --> 00:34:01,270
mean that was the new on I think was the

775
00:34:00,040 --> 00:34:04,030
other one but that didn't gain much

776
00:34:01,270 --> 00:34:08,440
popularity so I mean I definitely want

777
00:34:04,030 --> 00:34:14,679
to continue that thank you you know

778
00:34:08,440 --> 00:34:15,199
their questions all right thank you very

779
00:34:14,679 --> 00:34:18,509
much

780
00:34:15,199 --> 00:34:18,509
[Applause]

