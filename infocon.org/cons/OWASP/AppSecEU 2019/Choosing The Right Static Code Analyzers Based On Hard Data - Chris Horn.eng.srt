1
00:00:02,290 --> 00:00:06,349
sorry about that

2
00:00:04,609 --> 00:00:10,040
so we're here to talk about choosing the

3
00:00:06,349 --> 00:00:12,349
right static analyzers so first a little

4
00:00:10,040 --> 00:00:13,969
bit about me I'm a secure senior

5
00:00:12,349 --> 00:00:15,559
researcher at a company called secure

6
00:00:13,969 --> 00:00:17,300
decisions so we do mostly

7
00:00:15,559 --> 00:00:20,090
government-sponsored research and

8
00:00:17,300 --> 00:00:22,460
development and the project I'm going to

9
00:00:20,090 --> 00:00:23,870
talk to you about today is sponsored by

10
00:00:22,460 --> 00:00:26,090
the US federal government for the

11
00:00:23,870 --> 00:00:29,450
Department of Homeland Security Science

12
00:00:26,090 --> 00:00:31,550
and Technology Directorate and I also do

13
00:00:29,450 --> 00:00:34,850
some work with codecs there's a booth we

14
00:00:31,550 --> 00:00:37,910
have some cards for compare that at the

15
00:00:34,850 --> 00:00:40,699
booth if you want and also just to note

16
00:00:37,910 --> 00:00:42,648
the prime contractor so in contracting

17
00:00:40,699 --> 00:00:43,909
world you know we're working for the

18
00:00:42,649 --> 00:00:46,519
federal government but we're working

19
00:00:43,909 --> 00:00:47,780
through another company right now so our

20
00:00:46,519 --> 00:00:50,989
actually working with a company called

21
00:00:47,780 --> 00:00:52,429
grandma tech and they're our prime so

22
00:00:50,989 --> 00:00:54,949
they have their own static analyzer but

23
00:00:52,429 --> 00:00:58,159
we're not biased we're independent in

24
00:00:54,949 --> 00:01:00,920
that way so the outline of today's talk

25
00:00:58,159 --> 00:01:02,569
so I'm first going to give you an

26
00:01:00,920 --> 00:01:03,649
introduction to static analysis just to

27
00:01:02,569 --> 00:01:06,619
make sure everybody's on the same page

28
00:01:03,649 --> 00:01:10,189
there and then we're going to go into

29
00:01:06,619 --> 00:01:14,469
the set of criteria that we are using to

30
00:01:10,189 --> 00:01:17,929
compare static analyzers and then and

31
00:01:14,469 --> 00:01:20,149
it's both abstract in terms of like just

32
00:01:17,930 --> 00:01:21,920
this is how you should do it and it also

33
00:01:20,149 --> 00:01:23,240
doubles as these are the questions and

34
00:01:21,920 --> 00:01:24,439
the information that we capture in this

35
00:01:23,240 --> 00:01:27,380
tool that we're developing called

36
00:01:24,439 --> 00:01:28,758
compare and so the final final section

37
00:01:27,380 --> 00:01:30,469
I'll talk a little bit about this

38
00:01:28,759 --> 00:01:36,229
compare system and show you some of our

39
00:01:30,469 --> 00:01:40,339
progress and plans so static analysis is

40
00:01:36,229 --> 00:01:42,590
basically the act of you know looking at

41
00:01:40,340 --> 00:01:45,200
a program for various properties with

42
00:01:42,590 --> 00:01:47,630
another computer program so it's kind of

43
00:01:45,200 --> 00:01:49,549
funny like that so but you you analyze

44
00:01:47,630 --> 00:01:51,320
software without running it and that's

45
00:01:49,549 --> 00:01:56,899
what differentiates it from other forms

46
00:01:51,320 --> 00:01:58,520
of testing and the goal is mostly to

47
00:01:56,899 --> 00:01:59,780
find quality issues there's a lot of

48
00:01:58,520 --> 00:02:02,600
different things that static analysis

49
00:01:59,780 --> 00:02:05,090
can find and I have a slide on that and

50
00:02:02,600 --> 00:02:06,979
there are two major flavors of analyzers

51
00:02:05,090 --> 00:02:09,289
there are a lot of open source analyzers

52
00:02:06,979 --> 00:02:11,290
and they're also proprietary software

53
00:02:09,288 --> 00:02:17,048
they have to pay for

54
00:02:11,290 --> 00:02:18,519
and so it's really like an expert you

55
00:02:17,049 --> 00:02:20,230
know with about a hundred thousand hours

56
00:02:18,519 --> 00:02:22,150
of experience sitting over your shoulder

57
00:02:20,230 --> 00:02:24,010
helping you write better code and that's

58
00:02:22,150 --> 00:02:26,409
very important because when you think

59
00:02:24,010 --> 00:02:27,670
about all of the things that a developer

60
00:02:26,409 --> 00:02:30,040
has to keep in mind as they're writing

61
00:02:27,670 --> 00:02:33,309
code they can't possibly remember them

62
00:02:30,040 --> 00:02:35,140
all right so the static analysis

63
00:02:33,310 --> 00:02:36,370
basically serves as a way of pointing

64
00:02:35,140 --> 00:02:40,390
out things that you should pay attention

65
00:02:36,370 --> 00:02:43,540
to and it really does help make for

66
00:02:40,390 --> 00:02:45,309
better quality code because computer

67
00:02:43,540 --> 00:02:46,929
programs have unfailing attention they

68
00:02:45,310 --> 00:02:47,920
don't get tired they don't forget stuff

69
00:02:46,930 --> 00:02:50,879
they don't have working memory

70
00:02:47,920 --> 00:02:53,888
constraints like yes humans do and so

71
00:02:50,879 --> 00:02:56,409
the types of things that static analysis

72
00:02:53,889 --> 00:02:59,290
can find there's a list here they tend

73
00:02:56,409 --> 00:03:00,849
to be you know can't find everything so

74
00:02:59,290 --> 00:03:04,120
there's a sort of four major categories

75
00:03:00,849 --> 00:03:10,540
here at the top the reliability security

76
00:03:04,120 --> 00:03:12,220
performance and maintainability they're

77
00:03:10,540 --> 00:03:13,599
better at measuring the code level

78
00:03:12,220 --> 00:03:16,120
things though so if you're if you're

79
00:03:13,599 --> 00:03:17,679
looking for design flaws static analysis

80
00:03:16,120 --> 00:03:19,510
probably isn't going to find it right

81
00:03:17,680 --> 00:03:22,180
but if you're looking for do you have

82
00:03:19,510 --> 00:03:26,379
the correct and correct logic and your

83
00:03:22,180 --> 00:03:28,510
try-catch blocks or if you're managing

84
00:03:26,379 --> 00:03:29,948
memory pointers in your C program static

85
00:03:28,510 --> 00:03:34,599
analysis is gonna be really helpful for

86
00:03:29,949 --> 00:03:36,849
you and it's used by a lot of big

87
00:03:34,599 --> 00:03:39,790
companies so Google and Facebook both

88
00:03:36,849 --> 00:03:41,828
have fully built their CIE pipelines

89
00:03:39,790 --> 00:03:44,048
around it that you know code does not go

90
00:03:41,829 --> 00:03:46,989
to production without having some amount

91
00:03:44,049 --> 00:03:48,699
of static analysis run on it nor tell

92
00:03:46,989 --> 00:03:51,639
that they're a big Canadian telecom

93
00:03:48,699 --> 00:03:52,989
company a while back they did formal

94
00:03:51,639 --> 00:03:55,540
study of this they found that it's

95
00:03:52,989 --> 00:03:59,109
cost-effective to do they compared it

96
00:03:55,540 --> 00:04:00,459
with other means of reviewing code like

97
00:03:59,109 --> 00:04:05,889
manual code reviews and things like that

98
00:04:00,459 --> 00:04:07,870
so it's cost-effective and it works and

99
00:04:05,889 --> 00:04:09,940
then Coverity has an interesting paper

100
00:04:07,870 --> 00:04:12,310
here I've got the link if you want to

101
00:04:09,940 --> 00:04:13,989
read it about their experiences with

102
00:04:12,310 --> 00:04:15,849
deploying code and production

103
00:04:13,989 --> 00:04:18,539
environments so they're one of the

104
00:04:15,849 --> 00:04:21,190
bigger more popular proprietary tools

105
00:04:18,539 --> 00:04:23,080
and their experiences that you can

106
00:04:21,190 --> 00:04:24,639
always find pretty bad things and

107
00:04:23,080 --> 00:04:27,580
software if you run you

108
00:04:24,639 --> 00:04:27,849
you run it so you're like okay sign me

109
00:04:27,580 --> 00:04:30,609
up

110
00:04:27,849 --> 00:04:32,110
I've got java application twelve

111
00:04:30,610 --> 00:04:33,340
thousand one hundred twelve thousand

112
00:04:32,110 --> 00:04:36,009
lines of code i've got this built

113
00:04:33,340 --> 00:04:37,900
environment these IDs maybe even you

114
00:04:36,009 --> 00:04:40,139
know what kinds of things you'd like to

115
00:04:37,900 --> 00:04:42,969
look for I want to find injection right

116
00:04:40,139 --> 00:04:46,599
and you're like well which static

117
00:04:42,969 --> 00:04:47,770
analyzer should I use and you know

118
00:04:46,599 --> 00:04:51,039
somebody'd have to phone a friend

119
00:04:47,770 --> 00:04:52,359
because there's not a lot of information

120
00:04:51,039 --> 00:04:53,979
out there there may be there are some

121
00:04:52,360 --> 00:04:55,930
lists that you can find like awesome

122
00:04:53,979 --> 00:04:58,270
static analysis on github and a couple

123
00:04:55,930 --> 00:05:00,189
others and they'll list them but that's

124
00:04:58,270 --> 00:05:02,289
it you know it's a pointer to a website

125
00:05:00,189 --> 00:05:03,789
and now you're stuck collecting all this

126
00:05:02,289 --> 00:05:05,050
information about these analyzers and

127
00:05:03,789 --> 00:05:07,210
trying to figure out which ones are

128
00:05:05,050 --> 00:05:09,789
going to meet your needs and so there's

129
00:05:07,210 --> 00:05:11,138
just really not a good source of

130
00:05:09,789 --> 00:05:14,020
reliable information out there about

131
00:05:11,139 --> 00:05:18,279
these these tools and so that's where we

132
00:05:14,020 --> 00:05:21,250
come in so we're trying to create what

133
00:05:18,279 --> 00:05:24,129
is like a consumer reports for software

134
00:05:21,250 --> 00:05:25,300
analysis tools so in the you know if I

135
00:05:24,129 --> 00:05:26,979
don't know if you all are familiar with

136
00:05:25,300 --> 00:05:28,389
consumer reports but in the United

137
00:05:26,979 --> 00:05:31,900
States that's a nonprofit organization

138
00:05:28,389 --> 00:05:33,520
that has they buy things on the on the

139
00:05:31,900 --> 00:05:35,948
public market they have their own

140
00:05:33,520 --> 00:05:38,589
testing and evaluation criteria they

141
00:05:35,949 --> 00:05:41,139
test the products and then they sell the

142
00:05:38,589 --> 00:05:43,270
information on a subscription basis so

143
00:05:41,139 --> 00:05:44,949
we're not gonna have quite that model

144
00:05:43,270 --> 00:05:47,919
will be a little bit more like this

145
00:05:44,949 --> 00:05:49,029
ratings com website where the

146
00:05:47,919 --> 00:05:51,068
information is going to be just

147
00:05:49,029 --> 00:05:55,810
available publicly on a website and so

148
00:05:51,069 --> 00:05:58,240
that's compare dot tools so our goal was

149
00:05:55,810 --> 00:06:00,819
to build it into a big information

150
00:05:58,240 --> 00:06:02,800
source and some of the benefits that the

151
00:06:00,819 --> 00:06:04,779
two main thrusts that we have here are

152
00:06:02,800 --> 00:06:07,240
we wanna drive adoption through

153
00:06:04,779 --> 00:06:11,080
education because static analysis does

154
00:06:07,240 --> 00:06:13,000
help improve the quality of code and we

155
00:06:11,080 --> 00:06:14,710
want people to understand the relative

156
00:06:13,000 --> 00:06:16,270
strengths and weaknesses of these tools

157
00:06:14,710 --> 00:06:18,460
they're not perfect but they're they're

158
00:06:16,270 --> 00:06:20,438
definitely useful set realistic

159
00:06:18,460 --> 00:06:24,068
expectations and then on the market

160
00:06:20,439 --> 00:06:25,419
transparency side it's just important in

161
00:06:24,069 --> 00:06:26,979
a well-functioning market to have

162
00:06:25,419 --> 00:06:28,930
information freely available information

163
00:06:26,979 --> 00:06:30,310
about the capabilities of the tools and

164
00:06:28,930 --> 00:06:32,639
how to compare them so that people can

165
00:06:30,310 --> 00:06:34,979
make good decisions

166
00:06:32,639 --> 00:06:36,960
one of the limitations that we've run up

167
00:06:34,979 --> 00:06:38,669
against in terms of benchmarking these

168
00:06:36,960 --> 00:06:41,188
tools you know there's a lot of

169
00:06:38,669 --> 00:06:43,289
different ways we sort of categorize

170
00:06:41,189 --> 00:06:46,919
these tools but specifically with this

171
00:06:43,289 --> 00:06:48,150
idea of results quality the proprietary

172
00:06:46,919 --> 00:06:50,969
tool vendors and their license

173
00:06:48,150 --> 00:06:53,128
agreements prevent us from publishing

174
00:06:50,969 --> 00:06:55,500
that type of information so we're having

175
00:06:53,129 --> 00:06:58,110
to work around that and so this last

176
00:06:55,500 --> 00:07:00,780
bullet here on the right one of the

177
00:06:58,110 --> 00:07:02,310
things we want to do is do this for open

178
00:07:00,780 --> 00:07:03,989
source tools have publicly available

179
00:07:02,310 --> 00:07:06,180
benchmark information and then create

180
00:07:03,990 --> 00:07:10,710
pressure on the proprietary vendors to

181
00:07:06,180 --> 00:07:12,300
make that information more public and so

182
00:07:10,710 --> 00:07:14,580
compare it's going to hopefully benefit

183
00:07:12,300 --> 00:07:16,080
a lot of stakeholders first and foremost

184
00:07:14,580 --> 00:07:18,270
the consumers and that's the biggest

185
00:07:16,080 --> 00:07:20,430
audience we're targeting we want to

186
00:07:18,270 --> 00:07:22,710
basically for the developers and

187
00:07:20,430 --> 00:07:24,529
security analysts in the room you know

188
00:07:22,710 --> 00:07:26,818
we want to basically have available

189
00:07:24,529 --> 00:07:28,529
information available to them to help

190
00:07:26,819 --> 00:07:30,449
them evaluate and make informed

191
00:07:28,529 --> 00:07:34,229
acquisition decisions and ultimately

192
00:07:30,449 --> 00:07:37,620
lead to more secure software so let's

193
00:07:34,229 --> 00:07:40,650
get on with the main show here so we've

194
00:07:37,620 --> 00:07:42,599
got seven categories of information I'm

195
00:07:40,650 --> 00:07:44,089
going to hit each each one I'm going to

196
00:07:42,599 --> 00:07:46,620
do them slightly out of order because

197
00:07:44,089 --> 00:07:48,150
coverage and results quality are pretty

198
00:07:46,620 --> 00:07:51,000
tight really related and they'll flow

199
00:07:48,150 --> 00:07:52,710
into what some of the big technical

200
00:07:51,000 --> 00:07:56,849
challenges that we're going to overcome

201
00:07:52,710 --> 00:07:58,589
with this work but this is that this

202
00:07:56,849 --> 00:08:00,000
basically forms the outline of the

203
00:07:58,589 --> 00:08:05,550
standard of measurement that we're using

204
00:08:00,000 --> 00:08:07,529
to compare these tools yeah so the first

205
00:08:05,550 --> 00:08:12,389
category here is basic information about

206
00:08:07,529 --> 00:08:13,949
the tools and one of the first things

207
00:08:12,389 --> 00:08:15,960
you want to know is if the tools being

208
00:08:13,949 --> 00:08:18,300
maintained and it's it's reasonably

209
00:08:15,960 --> 00:08:20,609
active development right so you can do

210
00:08:18,300 --> 00:08:23,189
that with just some basic information

211
00:08:20,610 --> 00:08:25,289
and about when was the latest release so

212
00:08:23,189 --> 00:08:27,210
if the latest was released was 10 years

213
00:08:25,289 --> 00:08:29,339
ago it's probably not as actively

214
00:08:27,210 --> 00:08:31,830
maintained as a tool that has you know

215
00:08:29,339 --> 00:08:34,349
or at least from six months ago

216
00:08:31,830 --> 00:08:37,078
where does it run so do I run it

217
00:08:34,349 --> 00:08:40,469
in-house or do I run it as in a you know

218
00:08:37,078 --> 00:08:43,049
as a service in the cloud so to speak

219
00:08:40,469 --> 00:08:45,270
there are both sets of types of tools

220
00:08:43,049 --> 00:08:46,109
available and then how you have to pay

221
00:08:45,270 --> 00:08:47,970
for it open

222
00:08:46,110 --> 00:08:50,940
Saur Saur free what the licensing model

223
00:08:47,970 --> 00:08:52,290
is and then links to the website so

224
00:08:50,940 --> 00:08:55,110
we're not going to have all information

225
00:08:52,290 --> 00:09:00,029
about the tools so you know we're gonna

226
00:08:55,110 --> 00:09:02,390
have links off process integration is

227
00:09:00,029 --> 00:09:04,620
about how the analyzers can support

228
00:09:02,390 --> 00:09:07,800
fitting into your environment and that's

229
00:09:04,620 --> 00:09:10,019
a very important consideration so Google

230
00:09:07,800 --> 00:09:12,689
and looking at how adopt the success

231
00:09:10,019 --> 00:09:15,660
success success of adoption of static

232
00:09:12,690 --> 00:09:17,910
analysis in their enterprise found that

233
00:09:15,660 --> 00:09:20,069
one of the most important things to pay

234
00:09:17,910 --> 00:09:23,279
attention to is what it does to

235
00:09:20,070 --> 00:09:25,260
developer workflows right and Facebook's

236
00:09:23,279 --> 00:09:27,120
found the same thing Facebook actually

237
00:09:25,260 --> 00:09:30,000
wrote one of their own tools to do their

238
00:09:27,120 --> 00:09:32,579
work but one of their primary design

239
00:09:30,000 --> 00:09:34,709
goals here was to not have the developer

240
00:09:32,579 --> 00:09:36,599
have to go off and break their existing

241
00:09:34,709 --> 00:09:40,529
workflows in order to get their job done

242
00:09:36,600 --> 00:09:42,810
and so basically we can't consider

243
00:09:40,529 --> 00:09:44,519
analyzers in isolation we have to look

244
00:09:42,810 --> 00:09:47,640
at them in their environment where

245
00:09:44,519 --> 00:09:51,269
they're going to be and that environment

246
00:09:47,640 --> 00:09:53,370
looks like our CI pipelines so here on

247
00:09:51,269 --> 00:09:55,949
the bottom left we have developers

248
00:09:53,370 --> 00:09:58,410
working in their IDs pushing code up and

249
00:09:55,949 --> 00:10:01,229
back and forth to their source control

250
00:09:58,410 --> 00:10:04,920
system we've got a build server here

251
00:10:01,230 --> 00:10:06,510
maybe pulling in some artifacts

252
00:10:04,920 --> 00:10:08,819
you know compiled artifacts and

253
00:10:06,510 --> 00:10:11,670
libraries and things integration with

254
00:10:08,820 --> 00:10:13,050
testing tools we have few major roles so

255
00:10:11,670 --> 00:10:15,000
there's not just developers in this

256
00:10:13,050 --> 00:10:17,810
picture there's also the auditors and

257
00:10:15,000 --> 00:10:20,190
the analysts you know you'll see that

258
00:10:17,810 --> 00:10:22,079
there are important consumers of static

259
00:10:20,190 --> 00:10:24,750
analysis findings right so just as much

260
00:10:22,079 --> 00:10:25,199
as somebody who needs to fix that

261
00:10:24,750 --> 00:10:26,730
problem

262
00:10:25,199 --> 00:10:29,339
there's also reporting and compliance

263
00:10:26,730 --> 00:10:32,220
concerns format using that data and

264
00:10:29,339 --> 00:10:33,899
managers of course wanna see process

265
00:10:32,220 --> 00:10:35,820
efficiency and they want they need that

266
00:10:33,899 --> 00:10:39,839
compliance information as well so you

267
00:10:35,820 --> 00:10:41,459
have to think about that and so when

268
00:10:39,839 --> 00:10:44,310
we're looking at process integration

269
00:10:41,459 --> 00:10:47,729
where the analyzer will run there are

270
00:10:44,310 --> 00:10:50,099
several places that it can run so it can

271
00:10:47,730 --> 00:10:53,550
run on the developers workstation live

272
00:10:50,100 --> 00:10:55,620
while they're editing code it can also

273
00:10:53,550 --> 00:10:57,839
you can run it sort of on demand as a

274
00:10:55,620 --> 00:10:58,610
pre commit invocation so basically right

275
00:10:57,839 --> 00:11:00,170
when they are

276
00:10:58,610 --> 00:11:02,000
there commit it'll check it make sure

277
00:11:00,170 --> 00:11:04,760
that it meets your requirements before

278
00:11:02,000 --> 00:11:07,579
it goes up you can run it on stand-alone

279
00:11:04,760 --> 00:11:10,040
servers so you know either tie it into a

280
00:11:07,579 --> 00:11:12,680
build server or not you can do nightly

281
00:11:10,040 --> 00:11:14,630
builds nightly scan so there are

282
00:11:12,680 --> 00:11:16,519
different types of analysis you can do

283
00:11:14,630 --> 00:11:19,519
and they have different costs in terms

284
00:11:16,519 --> 00:11:22,570
of time for example so some people run a

285
00:11:19,519 --> 00:11:25,940
lot of faster checks in the IDE and then

286
00:11:22,570 --> 00:11:28,370
on a nightly basis they have full full

287
00:11:25,940 --> 00:11:31,459
suite scans right so you sort of are

288
00:11:28,370 --> 00:11:34,100
using static analysis and in different

289
00:11:31,459 --> 00:11:36,279
parts of different animal analysis in

290
00:11:34,100 --> 00:11:39,980
different parts of their build pipeline

291
00:11:36,279 --> 00:11:42,980
and a command line interface integration

292
00:11:39,980 --> 00:11:45,890
is a just a very common way of hooking

293
00:11:42,980 --> 00:11:47,720
into build servers and such but a lot of

294
00:11:45,890 --> 00:11:51,649
these tools also have dedicated plug-ins

295
00:11:47,720 --> 00:11:54,170
for things like Jenkins so this

296
00:11:51,649 --> 00:11:56,360
information here just to be clear so

297
00:11:54,170 --> 00:11:58,160
this is things you need to consider and

298
00:11:56,360 --> 00:12:00,620
then these are also questions that we

299
00:11:58,160 --> 00:12:03,920
track and compare so each one of these I

300
00:12:00,620 --> 00:12:05,690
think almost all of these are questions

301
00:12:03,920 --> 00:12:07,699
that we currently record for each

302
00:12:05,690 --> 00:12:10,040
analyser that we have in our catalog and

303
00:12:07,699 --> 00:12:13,060
so when you're using our website you can

304
00:12:10,040 --> 00:12:15,890
basically screen on these things and

305
00:12:13,060 --> 00:12:18,050
which inputs it'll require so different

306
00:12:15,890 --> 00:12:20,209
analyzers have different inputs some

307
00:12:18,050 --> 00:12:23,810
work on just snippets of code so

308
00:12:20,209 --> 00:12:25,399
individual commits some need the full

309
00:12:23,810 --> 00:12:27,229
code based in order to work some need to

310
00:12:25,399 --> 00:12:29,180
be wired into the build process so they

311
00:12:27,230 --> 00:12:31,160
actually need to observe the build

312
00:12:29,180 --> 00:12:34,250
process in order to do their work a lot

313
00:12:31,160 --> 00:12:36,290
of the c-sharp tools work that way and

314
00:12:34,250 --> 00:12:38,240
then some actually just work right on

315
00:12:36,290 --> 00:12:42,560
compiled binary so you can get binary

316
00:12:38,240 --> 00:12:45,560
static analysis and then where the

317
00:12:42,560 --> 00:12:47,839
findings are gonna get displayed so the

318
00:12:45,560 --> 00:12:50,268
tool is providing you information and

319
00:12:47,839 --> 00:12:52,430
how you consume that information is very

320
00:12:50,269 --> 00:12:55,490
relevant so again it can be in your IDE

321
00:12:52,430 --> 00:12:58,849
can be in its own dedicated graphical

322
00:12:55,490 --> 00:13:01,190
user interface web gooing right and then

323
00:12:58,850 --> 00:13:03,199
API integrations are very important so

324
00:13:01,190 --> 00:13:04,760
there are you know various formats for

325
00:13:03,199 --> 00:13:07,399
getting information out of these tools

326
00:13:04,760 --> 00:13:09,649
and into your systems that you're using

327
00:13:07,399 --> 00:13:11,480
that's that top thing and then there

328
00:13:09,649 --> 00:13:12,410
also a lot of these tools have dedicated

329
00:13:11,480 --> 00:13:14,209
plugins

330
00:13:12,410 --> 00:13:16,459
and issue trackers requirements

331
00:13:14,209 --> 00:13:18,050
management systems and vulnerability

332
00:13:16,459 --> 00:13:19,209
management systems for correlation and

333
00:13:18,050 --> 00:13:21,680
things like that

334
00:13:19,209 --> 00:13:23,810
so that's the that's it would process

335
00:13:21,680 --> 00:13:25,729
integration so how the tool fits into

336
00:13:23,810 --> 00:13:29,000
your build process and development

337
00:13:25,730 --> 00:13:30,680
workflows speed and scalability is

338
00:13:29,000 --> 00:13:33,620
another big concern and this just is

339
00:13:30,680 --> 00:13:38,899
generally about how how much work and

340
00:13:33,620 --> 00:13:40,399
analyzer can do so we don't have all of

341
00:13:38,899 --> 00:13:42,800
this implemented and compare right now

342
00:13:40,399 --> 00:13:45,680
so as I was making this presentation I

343
00:13:42,800 --> 00:13:48,050
was finding flaws on our in our initial

344
00:13:45,680 --> 00:13:49,878
implementation so I'll show you later

345
00:13:48,050 --> 00:13:52,339
you know we're just we're just basically

346
00:13:49,879 --> 00:13:54,860
getting going we've got our first MVP up

347
00:13:52,339 --> 00:13:56,889
and released and we're going to be

348
00:13:54,860 --> 00:13:59,540
evolving that and improving it over time

349
00:13:56,889 --> 00:14:03,319
so these first two we don't have in our

350
00:13:59,540 --> 00:14:05,360
system but they're important so how much

351
00:14:03,319 --> 00:14:08,120
code cannon analyze are actually run

352
00:14:05,360 --> 00:14:09,620
against and how many projects so if you

353
00:14:08,120 --> 00:14:13,100
have an organization with multiple

354
00:14:09,620 --> 00:14:15,319
development teams how does that tool

355
00:14:13,100 --> 00:14:17,899
going to deploy to satisfy that in that

356
00:14:15,319 --> 00:14:20,300
environment so something that we had we

357
00:14:17,899 --> 00:14:21,800
do have is how long analyzers take to

358
00:14:20,300 --> 00:14:23,060
work and so that's really a function of

359
00:14:21,800 --> 00:14:25,430
the complexity of the codebase and the

360
00:14:23,060 --> 00:14:27,560
types of analyses that are being run so

361
00:14:25,430 --> 00:14:30,859
what we are currently doing is we ran

362
00:14:27,560 --> 00:14:32,449
some we ran some of the annales

363
00:14:30,860 --> 00:14:34,490
analyzers we have the open source

364
00:14:32,449 --> 00:14:36,800
analyzers that have against different

365
00:14:34,490 --> 00:14:40,069
code bases at specific versions so that

366
00:14:36,800 --> 00:14:41,420
way you know it's repeatable right so we

367
00:14:40,069 --> 00:14:43,009
know the number of lines of code we know

368
00:14:41,420 --> 00:14:44,540
the programming language we know the

369
00:14:43,009 --> 00:14:46,819
type of application it's relative

370
00:14:44,540 --> 00:14:50,899
complexity and we basically just tell

371
00:14:46,819 --> 00:14:52,880
you how long it took to run and then

372
00:14:50,899 --> 00:14:54,889
some there's also some individual

373
00:14:52,880 --> 00:14:57,230
features that you know we can track to

374
00:14:54,889 --> 00:15:00,259
see that helped with increased capacity

375
00:14:57,230 --> 00:15:02,809
of the parallelization so reporting is

376
00:15:00,259 --> 00:15:04,639
about presenting information to the

377
00:15:02,809 --> 00:15:06,199
people to people right so they can

378
00:15:04,639 --> 00:15:09,740
understand it and support decision

379
00:15:06,199 --> 00:15:11,508
making and again you know I mentioned

380
00:15:09,740 --> 00:15:14,240
that that user interface in terms of

381
00:15:11,509 --> 00:15:15,740
present presenting results that can

382
00:15:14,240 --> 00:15:18,620
often be quite important in terms of

383
00:15:15,740 --> 00:15:21,199
reporting - does it have the ability to

384
00:15:18,620 --> 00:15:22,309
search hierarchical reporting so if you

385
00:15:21,199 --> 00:15:23,899
again if you're deploying in an

386
00:15:22,309 --> 00:15:25,660
organization you have multiple dev teams

387
00:15:23,899 --> 00:15:27,910
or a hierarchy does the

388
00:15:25,660 --> 00:15:30,040
support that hierarchy and and

389
00:15:27,910 --> 00:15:34,300
aggregating information in that way to

390
00:15:30,040 --> 00:15:36,579
report up role based access around the

391
00:15:34,300 --> 00:15:38,920
reporting and then suppression so

392
00:15:36,580 --> 00:15:41,860
suppression is the idea that an analyzer

393
00:15:38,920 --> 00:15:43,120
can find something and you're not really

394
00:15:41,860 --> 00:15:45,450
interested in it you know you look at it

395
00:15:43,120 --> 00:15:47,800
and you're like yeah that is a thing but

396
00:15:45,450 --> 00:15:50,410
I'm not I don't care about this one

397
00:15:47,800 --> 00:15:51,910
instance of it so if you don't care

398
00:15:50,410 --> 00:15:54,010
about any instance of it turn off that

399
00:15:51,910 --> 00:15:56,709
checker that's another feature will see

400
00:15:54,010 --> 00:15:59,230
is important one to have the ability to

401
00:15:56,710 --> 00:16:01,330
disable specific checks and analysis

402
00:15:59,230 --> 00:16:03,700
things that you're not interested in

403
00:16:01,330 --> 00:16:05,710
because those will just generate noise

404
00:16:03,700 --> 00:16:08,920
for your team you'll be kicking out

405
00:16:05,710 --> 00:16:10,120
warnings and you know you don't care so

406
00:16:08,920 --> 00:16:11,949
you just want them to go away

407
00:16:10,120 --> 00:16:15,490
right so the easiest way is just to turn

408
00:16:11,950 --> 00:16:16,960
off the rule if you but if you can't do

409
00:16:15,490 --> 00:16:19,330
that you need to be able to suppress

410
00:16:16,960 --> 00:16:20,890
that individual occurrence and so there

411
00:16:19,330 --> 00:16:23,110
are a couple major ways you can do that

412
00:16:20,890 --> 00:16:25,900
you can annotate the source code my

413
00:16:23,110 --> 00:16:27,730
personal favorite provides auditability

414
00:16:25,900 --> 00:16:31,870
in the code you looked at it's been

415
00:16:27,730 --> 00:16:34,090
managed right and then there's also sort

416
00:16:31,870 --> 00:16:36,010
of sidecar files you can do or you can

417
00:16:34,090 --> 00:16:38,830
keep track of it in that that web GUI

418
00:16:36,010 --> 00:16:40,840
sometimes depending on the tool and some

419
00:16:38,830 --> 00:16:43,210
tools don't provide any capability for

420
00:16:40,840 --> 00:16:46,570
this whatsoever and they're a little bit

421
00:16:43,210 --> 00:16:48,340
less useful because of that and then

422
00:16:46,570 --> 00:16:50,320
also showing differences so some tools

423
00:16:48,340 --> 00:16:52,720
with that web GUI can show you between

424
00:16:50,320 --> 00:16:56,130
you know commitment revisions the

425
00:16:52,720 --> 00:16:59,200
difference in the analysis results and

426
00:16:56,130 --> 00:17:01,660
so getting to the end of this first sort

427
00:16:59,200 --> 00:17:03,970
of first section of the questions is

428
00:17:01,660 --> 00:17:08,109
this support so it's basically about how

429
00:17:03,970 --> 00:17:10,180
much guidance and support assistance

430
00:17:08,109 --> 00:17:13,030
information is available to you and so

431
00:17:10,180 --> 00:17:15,730
we track this and are in compare with

432
00:17:13,030 --> 00:17:19,389
the presence of documentation and guides

433
00:17:15,730 --> 00:17:21,520
so you know for installation for the

434
00:17:19,390 --> 00:17:23,350
user and then integration guide

435
00:17:21,520 --> 00:17:24,849
specifically for like when you're tying

436
00:17:23,349 --> 00:17:28,270
it in to CI systems and things like that

437
00:17:24,849 --> 00:17:29,590
and then for the open source ones the

438
00:17:28,270 --> 00:17:34,750
project health is actually very

439
00:17:29,590 --> 00:17:36,540
important too so we started looking into

440
00:17:34,750 --> 00:17:38,890
doing this on our own

441
00:17:36,540 --> 00:17:39,580
you know in compare but it's a lot of

442
00:17:38,890 --> 00:17:41,560
work too

443
00:17:39,580 --> 00:17:43,449
just measure the health of an open

444
00:17:41,560 --> 00:17:46,510
source project and so there's actually a

445
00:17:43,450 --> 00:17:49,210
Linux Foundation has this chaos set of

446
00:17:46,510 --> 00:17:52,600
metrics and they have even some tooling

447
00:17:49,210 --> 00:17:55,660
to run that against open source projects

448
00:17:52,600 --> 00:17:57,490
and generate those metrics but we found

449
00:17:55,660 --> 00:17:58,690
it's easier just to link to the Black

450
00:17:57,490 --> 00:18:01,750
Ducks open hub because they're doing

451
00:17:58,690 --> 00:18:03,070
that all for us but you should pay

452
00:18:01,750 --> 00:18:05,440
attention to the health of the open

453
00:18:03,070 --> 00:18:06,879
source project and there if you if you

454
00:18:05,440 --> 00:18:10,210
chase those links there are a whole

455
00:18:06,880 --> 00:18:15,520
bunch of metrics about activity commit

456
00:18:10,210 --> 00:18:20,350
behavior size of the community etc yes

457
00:18:15,520 --> 00:18:22,870
yep okay so now so a lot of that what I

458
00:18:20,350 --> 00:18:24,580
was talking about is all kind of

459
00:18:22,870 --> 00:18:27,340
question based right there's not a lot

460
00:18:24,580 --> 00:18:31,600
of ambiguity and this this sort of back

461
00:18:27,340 --> 00:18:34,000
half here is is comparing static

462
00:18:31,600 --> 00:18:35,679
analyzers about how well they find the

463
00:18:34,000 --> 00:18:37,480
issues like do they find all the issues

464
00:18:35,680 --> 00:18:39,190
and how well they do at finding those

465
00:18:37,480 --> 00:18:40,390
issues right and a lot of the

466
00:18:39,190 --> 00:18:42,790
benchmarking if you hear about

467
00:18:40,390 --> 00:18:44,320
benchmarking you just see this category

468
00:18:42,790 --> 00:18:45,790
right but I don't think that's the

469
00:18:44,320 --> 00:18:48,189
complete picture because these tools

470
00:18:45,790 --> 00:18:49,720
need to work in development environments

471
00:18:48,190 --> 00:18:51,490
and all the things that we just talked

472
00:18:49,720 --> 00:18:53,590
about right support recording things you

473
00:18:51,490 --> 00:18:55,000
need to pay attention to that people

474
00:18:53,590 --> 00:18:56,560
often forget about because they're just

475
00:18:55,000 --> 00:18:59,830
focused on this but now we're going to

476
00:18:56,560 --> 00:19:01,780
talk about sort of the main show here so

477
00:18:59,830 --> 00:19:05,050
coverage is basically about two things

478
00:19:01,780 --> 00:19:07,210
the first is will work on my software so

479
00:19:05,050 --> 00:19:09,040
if it's a Python analyzer and you've got

480
00:19:07,210 --> 00:19:11,230
a see application that's not going to be

481
00:19:09,040 --> 00:19:14,889
much good so zero coverage for your

482
00:19:11,230 --> 00:19:17,140
application and then the second one here

483
00:19:14,890 --> 00:19:22,480
it does doesn't find the types of things

484
00:19:17,140 --> 00:19:24,880
that you care about and issues you know

485
00:19:22,480 --> 00:19:28,030
range a lot they range everything from

486
00:19:24,880 --> 00:19:30,010
style and you know are you formatting

487
00:19:28,030 --> 00:19:33,160
curly braces on your if blocks properly

488
00:19:30,010 --> 00:19:34,600
which does improve readability all the

489
00:19:33,160 --> 00:19:36,460
way up to you know how are you managing

490
00:19:34,600 --> 00:19:39,659
memory and are you doing pointer

491
00:19:36,460 --> 00:19:41,700
arithmetic wrong things like that and

492
00:19:39,660 --> 00:19:46,060
coverage is very important because

493
00:19:41,700 --> 00:19:48,370
anyone analyzer NSA and the states

494
00:19:46,060 --> 00:19:51,220
studied these analyzers and found that

495
00:19:48,370 --> 00:19:53,360
on average anyone analyzer will only

496
00:19:51,220 --> 00:19:56,690
find about 14%

497
00:19:53,360 --> 00:20:02,360
of the types of weaknesses that they

498
00:19:56,690 --> 00:20:04,730
they have in their catalog there it is

499
00:20:02,360 --> 00:20:07,459
so you you're gonna probably need

500
00:20:04,730 --> 00:20:08,990
multiple analyzers in order to have

501
00:20:07,460 --> 00:20:11,690
coverage of the things that you care

502
00:20:08,990 --> 00:20:13,730
about so if you have your own standards

503
00:20:11,690 --> 00:20:16,100
that define that you know your your care

504
00:20:13,730 --> 00:20:19,370
about os top ten and sans top 25 and

505
00:20:16,100 --> 00:20:22,149
maybe the CWA sans 25 on the cusp right

506
00:20:19,370 --> 00:20:24,379
and that set of problems weaknesses

507
00:20:22,150 --> 00:20:27,049
you're going to need multiple analyzers

508
00:20:24,380 --> 00:20:32,240
to get coverage on all of those types of

509
00:20:27,049 --> 00:20:35,059
problems and now the results quality so

510
00:20:32,240 --> 00:20:37,130
we have does it even you know claim to

511
00:20:35,059 --> 00:20:38,840
be able to capture those things and then

512
00:20:37,130 --> 00:20:43,460
how well does it actually capture them

513
00:20:38,840 --> 00:20:46,280
in practice and and the utility of the

514
00:20:43,460 --> 00:20:50,120
reported warnings so if the tool is just

515
00:20:46,280 --> 00:20:51,559
kicking out you know an obtuse warning

516
00:20:50,120 --> 00:20:53,928
it's not going to be understandable by

517
00:20:51,559 --> 00:20:56,059
your developers and so that first

518
00:20:53,929 --> 00:20:58,820
question here is can people understand

519
00:20:56,059 --> 00:21:01,070
it and do they trust and use the

520
00:20:58,820 --> 00:21:02,870
generated warning so if you're running a

521
00:21:01,070 --> 00:21:05,149
whole bunch of analysis and using much

522
00:21:02,870 --> 00:21:06,469
CPU time and all that stuff and then

523
00:21:05,150 --> 00:21:09,260
nobody's looking at the results you're

524
00:21:06,470 --> 00:21:10,750
wasting your time and so the quality of

525
00:21:09,260 --> 00:21:16,220
those results that are being presented

526
00:21:10,750 --> 00:21:16,730
are they coming with explanations with

527
00:21:16,220 --> 00:21:19,070
them right

528
00:21:16,730 --> 00:21:20,780
so does it just sort of a cryptic you

529
00:21:19,070 --> 00:21:23,240
know here's a problem or does it have a

530
00:21:20,780 --> 00:21:25,250
lot of explanation so most people are

531
00:21:23,240 --> 00:21:27,380
not experts in all of the things that

532
00:21:25,250 --> 00:21:29,720
static analysis checkers will kick out

533
00:21:27,380 --> 00:21:31,220
and so you need to kind of have built-in

534
00:21:29,720 --> 00:21:34,190
documentation or documentation available

535
00:21:31,220 --> 00:21:38,870
to explain what that analyser is finding

536
00:21:34,190 --> 00:21:41,660
to what kind of context is the analyzer

537
00:21:38,870 --> 00:21:43,370
give you does it give use you know where

538
00:21:41,660 --> 00:21:45,679
that line of code does it just give you

539
00:21:43,370 --> 00:21:47,510
a source file on a line or does it give

540
00:21:45,679 --> 00:21:49,790
you code context when it's presenting

541
00:21:47,510 --> 00:21:52,220
that information does it give you

542
00:21:49,790 --> 00:21:54,649
control and data flow that it was you

543
00:21:52,220 --> 00:21:58,390
know sort of reconstructed from the

544
00:21:54,650 --> 00:22:01,130
application and then this last one is

545
00:21:58,390 --> 00:22:02,030
how well it actually detects issues and

546
00:22:01,130 --> 00:22:05,540
so this one's actually really

547
00:22:02,030 --> 00:22:07,129
complicated to measure and a lot of the

548
00:22:05,540 --> 00:22:09,470
engineering effort that we're spending

549
00:22:07,130 --> 00:22:11,810
compares about addressing this because

550
00:22:09,470 --> 00:22:15,470
you have to run these analyzers against

551
00:22:11,810 --> 00:22:18,200
known test Suites and then look at how

552
00:22:15,470 --> 00:22:23,360
many of the sort of issues that you know

553
00:22:18,200 --> 00:22:26,980
are there the thing detected and it's

554
00:22:23,360 --> 00:22:29,000
time-consuming so onto our platform so

555
00:22:26,980 --> 00:22:31,160
compare is much more than the website

556
00:22:29,000 --> 00:22:33,620
right so there's basically this big

557
00:22:31,160 --> 00:22:35,240
technical infrastructure behind the

558
00:22:33,620 --> 00:22:39,250
website that we use to generate the

559
00:22:35,240 --> 00:22:42,140
information to put on the website and a

560
00:22:39,250 --> 00:22:44,030
big part of this is is generating that

561
00:22:42,140 --> 00:22:44,570
those results quality scores that I was

562
00:22:44,030 --> 00:22:46,580
talking about

563
00:22:44,570 --> 00:22:49,159
so coverage we're intending to handle

564
00:22:46,580 --> 00:22:51,649
and in terms of a claimed coverage and

565
00:22:49,160 --> 00:22:53,300
we're probably going to use common

566
00:22:51,650 --> 00:22:55,190
weakness enumeration because that's what

567
00:22:53,300 --> 00:22:57,860
all the tools support there are other

568
00:22:55,190 --> 00:23:01,160
initials of weaknesses that we could use

569
00:22:57,860 --> 00:23:03,740
for example nist is has a new ontology

570
00:23:01,160 --> 00:23:06,230
called the bugs framework which is a

571
00:23:03,740 --> 00:23:11,480
little bit more precise and crisp than

572
00:23:06,230 --> 00:23:14,810
common weakness enumeration is and so

573
00:23:11,480 --> 00:23:16,790
will be workers trading these analyzers

574
00:23:14,810 --> 00:23:18,950
right so we collect them a bunch of

575
00:23:16,790 --> 00:23:21,230
these analyzers and then we have to run

576
00:23:18,950 --> 00:23:24,020
them against test Suites we have to have

577
00:23:21,230 --> 00:23:26,360
those test Suites and and then we have

578
00:23:24,020 --> 00:23:28,160
to be able to go through all of the

579
00:23:26,360 --> 00:23:31,580
voluminous findings that these tools

580
00:23:28,160 --> 00:23:34,310
generate and figure out yes this is a

581
00:23:31,580 --> 00:23:36,800
valid warning for this test the case or

582
00:23:34,310 --> 00:23:40,010
no it's not and actually giving credit

583
00:23:36,800 --> 00:23:41,510
to it an analyzer for which things it

584
00:23:40,010 --> 00:23:42,080
finds is not as straightforward as you

585
00:23:41,510 --> 00:23:46,550
might think

586
00:23:42,080 --> 00:23:48,710
right so no expert in this and I don't

587
00:23:46,550 --> 00:23:51,110
fully remember but I was talking with

588
00:23:48,710 --> 00:23:53,150
Bob Martin and mitre and has this

589
00:23:51,110 --> 00:23:56,929
example where it's it's a pretty simple

590
00:23:53,150 --> 00:23:58,760
block of code and basically the for the

591
00:23:56,930 --> 00:24:00,500
check that it's doing it can report in

592
00:23:58,760 --> 00:24:02,780
about three or four locations and

593
00:24:00,500 --> 00:24:04,790
they're all totally valid in terms of

594
00:24:02,780 --> 00:24:07,730
you know there's an argument to may be

595
00:24:04,790 --> 00:24:09,649
made that you could you could basically

596
00:24:07,730 --> 00:24:11,570
indicate that it's the top of the block

597
00:24:09,650 --> 00:24:14,000
the bottom of the block or some place in

598
00:24:11,570 --> 00:24:16,610
the block that are all valid reportable

599
00:24:14,000 --> 00:24:18,020
locations right so when we're looking at

600
00:24:16,610 --> 00:24:20,780
giving a tool credit for finding

601
00:24:18,020 --> 00:24:22,160
something if if I told you at the top of

602
00:24:20,780 --> 00:24:24,170
block and then you the human quickly

603
00:24:22,160 --> 00:24:26,750
scan inside the block that's a total

604
00:24:24,170 --> 00:24:28,670
usable finding right but for a machine

605
00:24:26,750 --> 00:24:31,250
scoring that's a little bit of work for

606
00:24:28,670 --> 00:24:33,710
us to do right so we have to build logic

607
00:24:31,250 --> 00:24:35,150
that can give these analyzers credit

608
00:24:33,710 --> 00:24:37,340
where credit is due for finding things

609
00:24:35,150 --> 00:24:39,470
and it's not just a simple a matter of

610
00:24:37,340 --> 00:24:41,290
just matching line numbers so that's

611
00:24:39,470 --> 00:24:43,580
something that we have to work through

612
00:24:41,290 --> 00:24:45,139
so we've already got that first cut of

613
00:24:43,580 --> 00:24:47,060
the tool properties and I basically

614
00:24:45,140 --> 00:24:48,560
walked you through that pretty much

615
00:24:47,060 --> 00:24:50,120
everything that I presented in those

616
00:24:48,560 --> 00:24:52,610
seven categories are things that we're

617
00:24:50,120 --> 00:24:57,459
tracking today or we can track today for

618
00:24:52,610 --> 00:25:00,409
analyzers in compare and we need ways to

619
00:24:57,460 --> 00:25:01,760
crowdsource the collection of this so

620
00:25:00,410 --> 00:25:04,490
I've got some links at the back of the

621
00:25:01,760 --> 00:25:06,080
the talk about Howard how we're doing

622
00:25:04,490 --> 00:25:08,150
that but we've got basically we're

623
00:25:06,080 --> 00:25:10,280
figuring out ways to extract information

624
00:25:08,150 --> 00:25:13,400
from vendors in terms of claim coverage

625
00:25:10,280 --> 00:25:15,410
and a lot of the details and for the

626
00:25:13,400 --> 00:25:17,540
proprietary analyzers we're thinking of

627
00:25:15,410 --> 00:25:18,800
supplementing some of the results

628
00:25:17,540 --> 00:25:20,540
quality data which we can't publish

629
00:25:18,800 --> 00:25:24,440
because they prevent us from doing that

630
00:25:20,540 --> 00:25:26,780
with reviews and ratings so maybe we'll

631
00:25:24,440 --> 00:25:29,150
collect information from all of you who

632
00:25:26,780 --> 00:25:30,950
have experience with the tools and make

633
00:25:29,150 --> 00:25:33,140
like you know kind of cloud source

634
00:25:30,950 --> 00:25:36,710
collection of information we need to

635
00:25:33,140 --> 00:25:42,560
produce information about how to use and

636
00:25:36,710 --> 00:25:44,300
deploy static analysis and also pulling

637
00:25:42,560 --> 00:25:45,679
information out so this bottom right one

638
00:25:44,300 --> 00:25:47,240
the functionality to help people learn

639
00:25:45,680 --> 00:25:49,040
which analyzers meet their needs is the

640
00:25:47,240 --> 00:25:50,540
website so the website needs to have

641
00:25:49,040 --> 00:25:52,850
enough functionality for you to be able

642
00:25:50,540 --> 00:25:54,470
to come in and there and answer the

643
00:25:52,850 --> 00:25:57,679
questions that you have in terms of

644
00:25:54,470 --> 00:26:00,500
which tool so here's a high-level block

645
00:25:57,680 --> 00:26:02,570
diagram about what functionality that's

646
00:26:00,500 --> 00:26:05,240
pretty much what I just talked about and

647
00:26:02,570 --> 00:26:07,370
so right now it's up on the web you can

648
00:26:05,240 --> 00:26:09,290
see it we've got about 73 tools in there

649
00:26:07,370 --> 00:26:12,020
as of April so this is government

650
00:26:09,290 --> 00:26:15,139
sponsored research we are doing it you

651
00:26:12,020 --> 00:26:16,610
know on behalf of the feds we had our

652
00:26:15,140 --> 00:26:18,260
funding interrupted for the last five

653
00:26:16,610 --> 00:26:19,550
months so when I submitted this talk I

654
00:26:18,260 --> 00:26:21,110
was very hopeful that I'd have some

655
00:26:19,550 --> 00:26:23,030
preliminary results on benchmarking

656
00:26:21,110 --> 00:26:24,320
things like that we don't have it

657
00:26:23,030 --> 00:26:28,129
because we had to take a five months

658
00:26:24,320 --> 00:26:31,939
break but just yesterday last night the

659
00:26:28,130 --> 00:26:34,760
contract came in so that's good and so

660
00:26:31,940 --> 00:26:37,190
we'll be picking up we our period

661
00:26:34,760 --> 00:26:39,500
it starts on Monday so we're gonna be

662
00:26:37,190 --> 00:26:42,020
back at it and have a full team working

663
00:26:39,500 --> 00:26:44,500
on this so we've got those seven

664
00:26:42,020 --> 00:26:46,879
categories you can go to the website

665
00:26:44,500 --> 00:26:48,620
we've got a lot of challenges ahead but

666
00:26:46,880 --> 00:26:49,730
I'm excited to tackle all of them

667
00:26:48,620 --> 00:26:51,709
because I think they're all pretty

668
00:26:49,730 --> 00:26:54,620
interesting and I think everybody here

669
00:26:51,710 --> 00:26:57,160
hopefully finds this a valuable thing

670
00:26:54,620 --> 00:26:59,209
that we are going to be creating

671
00:26:57,160 --> 00:27:00,590
collecting the information about the

672
00:26:59,210 --> 00:27:03,710
analyzers it's I don't want to

673
00:27:00,590 --> 00:27:06,049
understate how much work this is so just

674
00:27:03,710 --> 00:27:08,900
to get those 73 was a bunch of days of

675
00:27:06,049 --> 00:27:11,179
work and we've identified just in terms

676
00:27:08,900 --> 00:27:12,890
of scanning those lists where that's

677
00:27:11,179 --> 00:27:16,130
just people pointing off to different

678
00:27:12,890 --> 00:27:20,179
analyzers about 700 of them there are

679
00:27:16,130 --> 00:27:22,490
some really arcane you know very

680
00:27:20,179 --> 00:27:25,040
detailed checkers for you know little

681
00:27:22,490 --> 00:27:27,169
problems that people have so we probably

682
00:27:25,040 --> 00:27:29,360
won't be cataloging all of them right

683
00:27:27,169 --> 00:27:32,270
away we'll try probably try to pick the

684
00:27:29,360 --> 00:27:34,850
most popular broader-based ones first

685
00:27:32,270 --> 00:27:37,220
and I'm going to bounce slides back and

686
00:27:34,850 --> 00:27:40,639
forth so actually this bottom link here

687
00:27:37,220 --> 00:27:44,990
this Trello website so we've got a

688
00:27:40,640 --> 00:27:47,000
public set of boards where we're we've

689
00:27:44,990 --> 00:27:49,850
got all the analyzers that we know about

690
00:27:47,000 --> 00:27:52,160
in a column and then ones where we've

691
00:27:49,850 --> 00:27:54,110
done our best job at sort of quickly

692
00:27:52,160 --> 00:27:55,940
trawling the website and bringing

693
00:27:54,110 --> 00:27:57,918
information into compare to catalogue

694
00:27:55,940 --> 00:27:58,250
the tool but you know we're not great at

695
00:27:57,919 --> 00:28:01,100
it

696
00:27:58,250 --> 00:28:03,049
and a lot of our tools have missing data

697
00:28:01,100 --> 00:28:04,459
so if you click around and compare and

698
00:28:03,049 --> 00:28:07,730
you start clicking and the tools you'll

699
00:28:04,460 --> 00:28:10,669
realize it's not as much here is there

700
00:28:07,730 --> 00:28:12,530
should be if you want something we

701
00:28:10,669 --> 00:28:14,270
actually I could probably go into a web

702
00:28:12,530 --> 00:28:17,540
demo I don't know if I've networked but

703
00:28:14,270 --> 00:28:19,250
we have right in the sort of block for

704
00:28:17,540 --> 00:28:21,710
if we if we haven't recorded information

705
00:28:19,250 --> 00:28:24,410
about that property you can click a link

706
00:28:21,710 --> 00:28:26,450
and basically cast a vote that will

707
00:28:24,410 --> 00:28:28,520
that'll record on our back end and say

708
00:28:26,450 --> 00:28:31,130
like I really want to know about this

709
00:28:28,520 --> 00:28:33,350
and then we can basically help

710
00:28:31,130 --> 00:28:35,360
prioritize our work based on your needs

711
00:28:33,350 --> 00:28:37,760
so we've instrumented the website in a

712
00:28:35,360 --> 00:28:39,500
bunch of ways for you to be able to give

713
00:28:37,760 --> 00:28:42,980
us feedback so we have surveys we have

714
00:28:39,500 --> 00:28:46,610
this click to vote on the tool list page

715
00:28:42,980 --> 00:28:48,559
at the bottom you can actually submit us

716
00:28:46,610 --> 00:28:51,168
a survey and say like I really want you

717
00:28:48,559 --> 00:28:53,480
tell me about this analyzer if you are a

718
00:28:51,169 --> 00:28:55,999
maker of analyzer we have a detailed

719
00:28:53,480 --> 00:28:58,399
form that's this second one the detailed

720
00:28:55,999 --> 00:29:00,049
tool requests where we've got a big

721
00:28:58,399 --> 00:29:01,989
questionnaire that you can fill out and

722
00:29:00,049 --> 00:29:04,249
then we can use that to populate

723
00:29:01,990 --> 00:29:08,259
compared with all the sort of question

724
00:29:04,249 --> 00:29:11,450
questionnaire data about your analyzer I

725
00:29:08,259 --> 00:29:14,299
talked about the given credit and then a

726
00:29:11,450 --> 00:29:15,799
big part is we're also you know trying

727
00:29:14,299 --> 00:29:17,240
to make compare self-sustaining so

728
00:29:15,799 --> 00:29:19,100
there's a lot of work we have to do to

729
00:29:17,240 --> 00:29:22,220
just make sure that we can keep doing

730
00:29:19,100 --> 00:29:24,259
this beyond our period of funding so

731
00:29:22,220 --> 00:29:30,830
with that that's pretty much what I've

732
00:29:24,259 --> 00:29:33,200
got any questions should we like so my

733
00:29:30,830 --> 00:29:35,509
question is how you plan to avoid more

734
00:29:33,200 --> 00:29:36,980
or less overfitting by benders if you

735
00:29:35,509 --> 00:29:40,009
have to provide them essentially with

736
00:29:36,980 --> 00:29:42,889
your sample set like in an SaaS solution

737
00:29:40,009 --> 00:29:44,450
or something like that VW is turning off

738
00:29:42,889 --> 00:29:45,529
some features in their engine when they

739
00:29:44,450 --> 00:29:47,690
are being tested

740
00:29:45,529 --> 00:29:49,190
so does NVIDIA and they detect that

741
00:29:47,690 --> 00:29:50,899
they're running in a benchmark so how do

742
00:29:49,190 --> 00:29:52,970
you intend to do that that the vendors

743
00:29:50,899 --> 00:29:55,580
don't over fit and say okay we can

744
00:29:52,970 --> 00:29:57,769
collect this into this edge case now but

745
00:29:55,580 --> 00:30:00,740
don't actually target the entire family

746
00:29:57,769 --> 00:30:03,559
of bugs yeah so that's a great question

747
00:30:00,740 --> 00:30:06,230
so I don't have a great answer for the

748
00:30:03,559 --> 00:30:08,629
SAS right but we're intending to run the

749
00:30:06,230 --> 00:30:12,080
analyzers ourselves so we are going to

750
00:30:08,629 --> 00:30:13,580
be basically running them against our

751
00:30:12,080 --> 00:30:15,350
test Suites we're not going to have the

752
00:30:13,580 --> 00:30:18,080
vendor doing it so it's not like we have

753
00:30:15,350 --> 00:30:19,668
a defined test case and we're like here

754
00:30:18,080 --> 00:30:21,408
please give us the results back it's

755
00:30:19,669 --> 00:30:24,769
like please give us your analyzer and

756
00:30:21,409 --> 00:30:25,999
we'll run it for the open source that's

757
00:30:24,769 --> 00:30:28,149
very straightforward right we download

758
00:30:25,999 --> 00:30:31,279
the tool we run it publish the results

759
00:30:28,149 --> 00:30:33,229
and for SAS I imagine I mean most of

760
00:30:31,279 --> 00:30:36,850
these proprietary guys aren't letting us

761
00:30:33,230 --> 00:30:40,100
publish data right so I haven't had to

762
00:30:36,850 --> 00:30:41,899
broach that topic exactly yet but what I

763
00:30:40,100 --> 00:30:44,689
imagine is you know we're gonna want to

764
00:30:41,899 --> 00:30:47,239
have control over the execution if they

765
00:30:44,690 --> 00:30:49,159
build us a custom environment on their

766
00:30:47,240 --> 00:30:50,600
back-end you know that's a lot of work

767
00:30:49,159 --> 00:30:54,409
for them I there's nothing I can do

768
00:30:50,600 --> 00:30:55,789
about that at the end of the day but the

769
00:30:54,409 --> 00:30:57,289
idea is that we're going to be doing all

770
00:30:55,789 --> 00:31:00,470
the benchmarking of the tools ourselves

771
00:30:57,289 --> 00:31:03,250
so that's we control the test app

772
00:31:00,470 --> 00:31:03,250
harness right

773
00:31:04,540 --> 00:31:10,460
have two questions one is how do you

774
00:31:08,060 --> 00:31:11,960
plan to keep up to date because tools

775
00:31:10,460 --> 00:31:14,180
you know start supporting you languages

776
00:31:11,960 --> 00:31:15,260
features etc and the second question is

777
00:31:14,180 --> 00:31:16,700
what kind of benchmarks they're going to

778
00:31:15,260 --> 00:31:18,550
be using is it something that you

779
00:31:16,700 --> 00:31:20,990
developed open source because again if

780
00:31:18,550 --> 00:31:23,980
SAS tool mills which benchmark you're

781
00:31:20,990 --> 00:31:25,910
going to be using they can hike so

782
00:31:23,980 --> 00:31:28,280
regarding up-to-date so we've already

783
00:31:25,910 --> 00:31:29,570
built the idea of versions into the

784
00:31:28,280 --> 00:31:34,240
information that we track of the

785
00:31:29,570 --> 00:31:36,290
analyzers so I wish I had this up so

786
00:31:34,240 --> 00:31:38,480
basically when we record information

787
00:31:36,290 --> 00:31:40,610
against and analyze it we recorded we

788
00:31:38,480 --> 00:31:43,730
it's it's tied to a version of that and

789
00:31:40,610 --> 00:31:46,669
then so basically on our back end we can

790
00:31:43,730 --> 00:31:48,320
just create a new version and then bump

791
00:31:46,670 --> 00:31:50,510
the things it automatically copies over

792
00:31:48,320 --> 00:31:52,790
all the data and then we can just tweak

793
00:31:50,510 --> 00:31:55,280
what's changed right and then on the web

794
00:31:52,790 --> 00:31:57,649
UI on the top right there's a drop down

795
00:31:55,280 --> 00:31:59,660
and you can choose which version if we

796
00:31:57,650 --> 00:32:01,610
have multiple versions documented so I

797
00:31:59,660 --> 00:32:04,790
think that's gonna do pretty well and

798
00:32:01,610 --> 00:32:07,939
then regarding the gaming of the the

799
00:32:04,790 --> 00:32:10,010
test Suites so I can't control you know

800
00:32:07,940 --> 00:32:14,150
the test suites are really expensive to

801
00:32:10,010 --> 00:32:16,220
develop so for the c c++ and java we're

802
00:32:14,150 --> 00:32:20,420
going to be probably using juliet which

803
00:32:16,220 --> 00:32:23,270
is a nist state data set and so that's

804
00:32:20,420 --> 00:32:25,280
that's test cases they there's a

805
00:32:23,270 --> 00:32:27,139
positive test case and a negative test

806
00:32:25,280 --> 00:32:29,180
case for each type of weakness so one

807
00:32:27,140 --> 00:32:31,160
that actually implements the type of

808
00:32:29,180 --> 00:32:33,950
weakness and then one that looks like it

809
00:32:31,160 --> 00:32:36,140
does but doesn't and so what you can do

810
00:32:33,950 --> 00:32:37,390
with that is if you know you can check

811
00:32:36,140 --> 00:32:40,130
to make sure that the tool correctly

812
00:32:37,390 --> 00:32:43,100
captures positives on all the test cases

813
00:32:40,130 --> 00:32:46,310
that are positive and then you can the

814
00:32:43,100 --> 00:32:47,629
idea of discrimination is you know a

815
00:32:46,310 --> 00:32:49,610
quick way to get a hundred percent

816
00:32:47,630 --> 00:32:51,860
scores just flag yes on everything right

817
00:32:49,610 --> 00:32:54,590
but if you flag yes on the nose then you

818
00:32:51,860 --> 00:32:56,179
use points for that right so and we can

819
00:32:54,590 --> 00:32:58,340
calculate different metrics so different

820
00:32:56,180 --> 00:32:59,680
metrics there's you know recall there's

821
00:32:58,340 --> 00:33:05,060
precision and accuracy

822
00:32:59,680 --> 00:33:09,220
discrimination but just so right now the

823
00:33:05,060 --> 00:33:14,290
primary goal is julia and juliet

824
00:33:09,220 --> 00:33:16,340
benchmarks there are also some this has

825
00:33:14,290 --> 00:33:19,539
CBE data again

826
00:33:16,340 --> 00:33:22,158
different code bases so things like

827
00:33:19,539 --> 00:33:24,200
asterisk and a couple other open-source

828
00:33:22,159 --> 00:33:25,820
projects and you have publicly disclosed

829
00:33:24,200 --> 00:33:29,480
vulnerabilities to see the ease and

830
00:33:25,820 --> 00:33:31,220
those were code bases so you can run

831
00:33:29,480 --> 00:33:33,169
against those code bases that's more

832
00:33:31,220 --> 00:33:36,200
realistic code it's not just test case

833
00:33:33,169 --> 00:33:38,600
code will we'll probably try to do that

834
00:33:36,200 --> 00:33:40,400
also but it's then we're limited in

835
00:33:38,600 --> 00:33:43,039
which metrics we can calculate because

836
00:33:40,400 --> 00:33:46,700
there's a lot of other findings that pop

837
00:33:43,039 --> 00:33:48,230
up in those code bases and they're

838
00:33:46,700 --> 00:33:50,360
basically noise to us because we don't

839
00:33:48,230 --> 00:33:53,330
know whether they're valid or not so we

840
00:33:50,360 --> 00:33:55,189
can't and yeah you can't calculate all

841
00:33:53,330 --> 00:33:59,649
the metrics when you run against those

842
00:33:55,190 --> 00:34:00,830
code bases and one other thing to say oh

843
00:33:59,649 --> 00:34:03,949
right

844
00:34:00,830 --> 00:34:04,600
so Grandma Tech also has some work that

845
00:34:03,950 --> 00:34:08,510
they're doing

846
00:34:04,600 --> 00:34:10,069
on bug injection and which is actually

847
00:34:08,510 --> 00:34:12,980
really interesting so basically that's

848
00:34:10,070 --> 00:34:15,649
where you have your code base and you

849
00:34:12,980 --> 00:34:17,690
specifically modify it to inject bugs

850
00:34:15,649 --> 00:34:19,848
into it and then you have you know a

851
00:34:17,690 --> 00:34:22,609
known location of a known type of defect

852
00:34:19,849 --> 00:34:24,050
that you've injected you run it it's got

853
00:34:22,609 --> 00:34:26,659
some limitations right now it's early

854
00:34:24,050 --> 00:34:28,639
research notably can only inject one

855
00:34:26,659 --> 00:34:30,710
vulnerability at a time so that's a lot

856
00:34:28,639 --> 00:34:35,839
of runs in order to get a decent amount

857
00:34:30,710 --> 00:34:37,609
of coverage but that's something that we

858
00:34:35,839 --> 00:34:39,830
might might be able to do and then you

859
00:34:37,609 --> 00:34:41,569
might you know if that'll probably

860
00:34:39,830 --> 00:34:45,080
require additional funding beyond what

861
00:34:41,570 --> 00:34:47,480
we can do in this initial period but you

862
00:34:45,080 --> 00:34:49,730
could imagine you know you download a

863
00:34:47,480 --> 00:34:51,918
tool you inject bugs into your own code

864
00:34:49,730 --> 00:34:53,359
base and then you run and we have a

865
00:34:51,918 --> 00:34:55,699
benchmarking suite that you kind of

866
00:34:53,359 --> 00:34:57,069
download and run locally privately so

867
00:34:55,699 --> 00:34:59,500
that's an idea we've been toying with

868
00:34:57,070 --> 00:35:02,240
we're not in love with it because it

869
00:34:59,500 --> 00:35:03,980
makes a lot it's it's complicated to

870
00:35:02,240 --> 00:35:05,890
deploy software and give people other

871
00:35:03,980 --> 00:35:07,940
people tools to run and then

872
00:35:05,890 --> 00:35:10,129
automatically extract information and

873
00:35:07,940 --> 00:35:11,720
all those giving the tools credit

874
00:35:10,130 --> 00:35:13,220
problems that I mentioned there's a lot

875
00:35:11,720 --> 00:35:16,368
of automation that we have to write to

876
00:35:13,220 --> 00:35:19,129
make that feasible so right now we're

877
00:35:16,369 --> 00:35:24,650
we're gonna use julia and maybe some of

878
00:35:19,130 --> 00:35:27,650
the open source benchmarks in one of

879
00:35:24,650 --> 00:35:30,980
your slides you said the tool can only

880
00:35:27,650 --> 00:35:34,760
detect 14% of the weaknesses yeah so

881
00:35:30,980 --> 00:35:39,280
this is a small number yes that's a

882
00:35:34,760 --> 00:35:44,930
small number but i mean i mean i do say

883
00:35:39,280 --> 00:35:48,020
this is the number i mean so so NSA ran

884
00:35:44,930 --> 00:35:50,990
that so just to explain a little bit how

885
00:35:48,020 --> 00:35:54,109
that number came about so NSA center for

886
00:35:50,990 --> 00:35:56,720
shirred software got a bunch of these

887
00:35:54,109 --> 00:35:59,529
analyzers had their own i think they ran

888
00:35:56,720 --> 00:36:02,629
it on juliet actually version 1.2 and

889
00:35:59,530 --> 00:36:04,510
they run the analyzers against that test

890
00:36:02,630 --> 00:36:07,190
suite and then they have their own

891
00:36:04,510 --> 00:36:09,050
classification of the test cases so that

892
00:36:07,190 --> 00:36:10,820
you know they're i forgot how many it's

893
00:36:09,050 --> 00:36:12,890
like a thousand or two thousand test

894
00:36:10,820 --> 00:36:16,339
cases in the juliet test suites a lot

895
00:36:12,890 --> 00:36:18,020
and for every single one they they

896
00:36:16,339 --> 00:36:19,849
basically categorized in and DeWanna

897
00:36:18,020 --> 00:36:22,490
about six categories they had their own

898
00:36:19,849 --> 00:36:26,210
top-level grouping and then what they

899
00:36:22,490 --> 00:36:28,459
did is they saw you know did this tool

900
00:36:26,210 --> 00:36:30,440
you know tool a tool be tool see and

901
00:36:28,460 --> 00:36:34,880
they and they kept them anonymous like

902
00:36:30,440 --> 00:36:37,099
that and they basically say you know for

903
00:36:34,880 --> 00:36:38,599
this family of memory safety things or

904
00:36:37,099 --> 00:36:42,200
for this family of string manipulation

905
00:36:38,599 --> 00:36:45,140
things how many of the test cases that

906
00:36:42,200 --> 00:36:47,060
each tool identify and so when you break

907
00:36:45,140 --> 00:36:49,940
out all those test cases in such that

908
00:36:47,060 --> 00:36:51,500
matter you get any one analyzer on

909
00:36:49,940 --> 00:36:53,839
average now that's an average right

910
00:36:51,500 --> 00:36:55,970
only tech ting about fourteen percent of

911
00:36:53,839 --> 00:37:00,349
all the possible test cases that you

912
00:36:55,970 --> 00:37:06,020
have in your suite hopefully that that's

913
00:37:00,349 --> 00:37:07,609
not money like it looks really good at

914
00:37:06,020 --> 00:37:09,950
member check it out in quite a lot of

915
00:37:07,609 --> 00:37:13,130
detail and i know it's early for sauce

916
00:37:09,950 --> 00:37:15,529
but but looking towards the future are

917
00:37:13,130 --> 00:37:19,550
you also consider are other families of

918
00:37:15,530 --> 00:37:27,040
tools like - is and I'd love to hear as

919
00:37:19,550 --> 00:37:35,060
in are there complete plans or just know

920
00:37:27,040 --> 00:37:35,410
so I can't promise that right so how do

921
00:37:35,060 --> 00:37:37,630
you

922
00:37:35,410 --> 00:37:38,740
plan to solve the problem where when

923
00:37:37,630 --> 00:37:40,570
people have done benchmarking in the

924
00:37:38,740 --> 00:37:42,850
past the vendors have kind of optimized

925
00:37:40,570 --> 00:37:45,670
for the long tail of stuff that's easy

926
00:37:42,850 --> 00:37:47,049
to find but low severity whereas like

927
00:37:45,670 --> 00:37:48,630
from a consumer standpoint you want to

928
00:37:47,050 --> 00:37:50,710
make sure you can find the highest

929
00:37:48,630 --> 00:37:53,580
severity stuff is there any plan to

930
00:37:50,710 --> 00:37:55,660
address that yeah so when we are

931
00:37:53,580 --> 00:37:57,549
reporting out it through the web UI

932
00:37:55,660 --> 00:37:59,830
right the types of things that you care

933
00:37:57,550 --> 00:38:01,930
about I I definitely want you to be able

934
00:37:59,830 --> 00:38:03,790
to put into our system these are the

935
00:38:01,930 --> 00:38:06,009
types of issues I care about right and

936
00:38:03,790 --> 00:38:08,170
then you can base it and then the system

937
00:38:06,010 --> 00:38:10,240
it's not that complicated once you have

938
00:38:08,170 --> 00:38:12,820
like the weaknesses that you care about

939
00:38:10,240 --> 00:38:14,410
identified for me to have a weighting

940
00:38:12,820 --> 00:38:17,410
algorithm that just gives you a score

941
00:38:14,410 --> 00:38:19,060
right so that way you can you can

942
00:38:17,410 --> 00:38:21,580
basically and that's very important to

943
00:38:19,060 --> 00:38:23,110
me right because I want you to be able

944
00:38:21,580 --> 00:38:24,730
to say like no these are the things that

945
00:38:23,110 --> 00:38:27,030
I care about I don't care about all that

946
00:38:24,730 --> 00:38:29,560
style stuff right like that's nice and

947
00:38:27,030 --> 00:38:30,550
readable code is great but what I really

948
00:38:29,560 --> 00:38:32,440
want to find is all my injection

949
00:38:30,550 --> 00:38:34,750
problems right so I want you to be able

950
00:38:32,440 --> 00:38:37,120
to come in say injection is my top

951
00:38:34,750 --> 00:38:39,370
concern and then have the system kick

952
00:38:37,120 --> 00:38:43,240
back all the tools that do well against

953
00:38:39,370 --> 00:38:46,330
an injection alright we have room for

954
00:38:43,240 --> 00:38:52,080
one final question and it's coming from

955
00:38:46,330 --> 00:38:54,610
the back of the room what about

956
00:38:52,080 --> 00:38:56,799
configuration so some of these tools

957
00:38:54,610 --> 00:38:59,260
have like a thousand configuration

958
00:38:56,800 --> 00:39:01,990
options that you can fine-tune there who

959
00:38:59,260 --> 00:39:04,540
increased false negatives or like the

960
00:39:01,990 --> 00:39:05,200
case false positives and like do you

961
00:39:04,540 --> 00:39:07,690
just humor

962
00:39:05,200 --> 00:39:08,799
default configuration or do you like run

963
00:39:07,690 --> 00:39:11,170
them in a couple of different

964
00:39:08,800 --> 00:39:13,570
configurations right now the

965
00:39:11,170 --> 00:39:16,420
benchmarking that we've done we've used

966
00:39:13,570 --> 00:39:18,430
the stock configuration so pretty much

967
00:39:16,420 --> 00:39:21,180
as the vendor gives it to you or you

968
00:39:18,430 --> 00:39:23,830
know the maker if it's an open source

969
00:39:21,180 --> 00:39:25,720
that just seemed like the safest way

970
00:39:23,830 --> 00:39:28,000
because yeah you're right there

971
00:39:25,720 --> 00:39:32,319
gajillion knobs and whistles to change

972
00:39:28,000 --> 00:39:35,190
and you know it might come that one of

973
00:39:32,320 --> 00:39:38,740
the ideas we've also had is that maybe

974
00:39:35,190 --> 00:39:40,510
you know coming up with recommended

975
00:39:38,740 --> 00:39:41,799
configurations is very important that

976
00:39:40,510 --> 00:39:43,660
might be something that people care

977
00:39:41,800 --> 00:39:46,360
about even more than which analyzer use

978
00:39:43,660 --> 00:39:48,069
so you know to the extent that you guys

979
00:39:46,360 --> 00:39:48,849
are already using static analysis and

980
00:39:48,070 --> 00:39:50,229
you have your tool

981
00:39:48,849 --> 00:39:52,420
selected and you're looking for the

982
00:39:50,229 --> 00:39:54,578
optimal configurations maybe that's

983
00:39:52,420 --> 00:39:57,489
something that we should focus on

984
00:39:54,579 --> 00:39:59,769
so I'm willingly if people feel that way

985
00:39:57,489 --> 00:40:01,900
like let me know and we can maybe shift

986
00:39:59,769 --> 00:40:03,848
our direction of what what we work on

987
00:40:01,900 --> 00:40:05,710
but right now we're just planning to use

988
00:40:03,849 --> 00:40:11,680
the stock configurations because that's

989
00:40:05,710 --> 00:40:14,200
the safest all right thank you all for

990
00:40:11,680 --> 00:40:17,109
joining next talk in this room oh wait

991
00:40:14,200 --> 00:40:18,669
the next item on the list is the lunch

992
00:40:17,109 --> 00:40:23,970
so don't forget beets it's very

993
00:40:18,670 --> 00:40:23,970
important and crisp or thank you

