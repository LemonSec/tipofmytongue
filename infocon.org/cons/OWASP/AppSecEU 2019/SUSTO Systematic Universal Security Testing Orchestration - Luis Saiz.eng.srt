1
00:00:00,530 --> 00:00:02,590
you

2
00:00:03,230 --> 00:00:13,620
welcome everybody this will be a talk

3
00:00:07,680 --> 00:00:21,750
about an opportunity to to have a new

4
00:00:13,620 --> 00:00:26,520
all's project first of all my scythe I'm

5
00:00:21,750 --> 00:00:30,448
hitting the innovation in security group

6
00:00:26,520 --> 00:00:35,940
in the BBVA labs deviates and Spanish

7
00:00:30,449 --> 00:00:40,559
bank we have a we have some work that we

8
00:00:35,940 --> 00:00:47,760
have open sourced you can if you search

9
00:00:40,559 --> 00:00:53,129
on github and BBVA or if you can follow

10
00:00:47,760 --> 00:00:56,940
that link okay let's start with

11
00:00:53,130 --> 00:01:00,870
something very very basic that is which

12
00:00:56,940 --> 00:01:03,718
are requirements which are controls

13
00:01:00,870 --> 00:01:08,640
that's something that in in the

14
00:01:03,719 --> 00:01:12,890
literature of security we always will

15
00:01:08,640 --> 00:01:17,850
encounter and we will have a lot of

16
00:01:12,890 --> 00:01:23,580
controls a lot of standards right in a

17
00:01:17,850 --> 00:01:27,240
long list of controls we must take in

18
00:01:23,580 --> 00:01:30,780
account that also we have some a common

19
00:01:27,240 --> 00:01:38,100
controls in in our projects in our

20
00:01:30,780 --> 00:01:43,650
companies and a there is also common

21
00:01:38,100 --> 00:01:47,520
controls that we need to test and need

22
00:01:43,650 --> 00:01:51,560
to know how these out there the current

23
00:01:47,520 --> 00:01:51,560
status of each control

24
00:01:52,189 --> 00:01:58,818
so first question how many of you think

25
00:01:56,240 --> 00:02:06,280
your organization keep control status

26
00:01:58,819 --> 00:02:10,910
information current how many one okay I

27
00:02:06,280 --> 00:02:16,010
think you are right this is very

28
00:02:10,910 --> 00:02:22,150
optimistic I think that we really don't

29
00:02:16,010 --> 00:02:25,790
know what we have in in our productions

30
00:02:22,150 --> 00:02:27,980
so let's start with some basics which is

31
00:02:25,790 --> 00:02:31,370
the the current status of who does they

32
00:02:27,980 --> 00:02:35,810
get the state-of-the-art in the security

33
00:02:31,370 --> 00:02:40,790
in in the CIT D pipelines first we have

34
00:02:35,810 --> 00:02:43,420
static dynamic interactive don't know

35
00:02:40,790 --> 00:02:46,000
which will be the next but for

36
00:02:43,420 --> 00:02:50,690
application security testing so we test

37
00:02:46,000 --> 00:02:54,109
against our code we also have software

38
00:02:50,690 --> 00:02:56,319
composition analysis testing our

39
00:02:54,109 --> 00:02:58,099
dependencies which is a which are the

40
00:02:56,319 --> 00:03:04,339
vulnerabilities in our in our

41
00:02:58,099 --> 00:03:08,450
dependencies we have have a new tool

42
00:03:04,340 --> 00:03:11,870
that is we can test a the security of

43
00:03:08,450 --> 00:03:16,668
the containers because once you have

44
00:03:11,870 --> 00:03:19,819
built the container and test it you know

45
00:03:16,669 --> 00:03:23,989
the status of that of that container so

46
00:03:19,819 --> 00:03:31,849
it's pretty good the problem is when you

47
00:03:23,989 --> 00:03:34,819
have three different tools to test and

48
00:03:31,849 --> 00:03:37,910
and and you have a lot of

49
00:03:34,819 --> 00:03:41,380
vulnerabilities to to manage you need

50
00:03:37,910 --> 00:03:46,459
some vulnerability correlation pooled

51
00:03:41,380 --> 00:03:48,859
also if you are advanced and if you have

52
00:03:46,459 --> 00:03:51,590
a lot of projects maybe you will need

53
00:03:48,859 --> 00:03:53,750
some security requirements and threat

54
00:03:51,590 --> 00:03:58,190
management tool

55
00:03:53,750 --> 00:04:03,100
and some of us sometimes we have also

56
00:03:58,190 --> 00:04:07,760
have used story checks okay that's the

57
00:04:03,100 --> 00:04:12,530
there's a hype cycle from from garner

58
00:04:07,760 --> 00:04:17,959
and this is the tools we have presented

59
00:04:12,530 --> 00:04:19,870
and this one was the a category it

60
00:04:17,959 --> 00:04:24,710
called application security testing

61
00:04:19,870 --> 00:04:30,970
orchestration a sto that tries to

62
00:04:24,710 --> 00:04:35,200
combine all of these tools and

63
00:04:30,970 --> 00:04:39,200
orchestrate and automate the results

64
00:04:35,200 --> 00:04:42,950
okay but which are the gaps we are

65
00:04:39,200 --> 00:04:46,969
taking the application now the

66
00:04:42,950 --> 00:04:49,510
containers too but we think that this is

67
00:04:46,970 --> 00:04:49,510
not enough

68
00:04:50,470 --> 00:04:56,810
they both DevOps practices and software

69
00:04:54,260 --> 00:05:00,169
they find everything allow us to

70
00:04:56,810 --> 00:05:04,940
automate the building of of the of our

71
00:05:00,169 --> 00:05:10,719
complete infrastructure so as as the

72
00:05:04,940 --> 00:05:16,640
flight checklist we have a lot of

73
00:05:10,720 --> 00:05:21,500
complex and automated environment we

74
00:05:16,640 --> 00:05:23,560
also have some manual check-in that you

75
00:05:21,500 --> 00:05:26,890
need to check in giant

76
00:05:23,560 --> 00:05:32,600
and you need to check the in giant

77
00:05:26,890 --> 00:05:39,080
whatever you are flying and seven four

78
00:05:32,600 --> 00:05:41,930
seven or a small Cessna so which let's

79
00:05:39,080 --> 00:05:46,909
see which are this checklist we have a

80
00:05:41,930 --> 00:05:52,340
pre-flight checklist that it's like our

81
00:05:46,910 --> 00:05:54,530
build time so before launch to the

82
00:05:52,340 --> 00:05:56,599
production before fly it you need to

83
00:05:54,530 --> 00:05:59,630
pass some checks

84
00:05:56,600 --> 00:06:03,730
and during the fire flight you also have

85
00:05:59,630 --> 00:06:11,930
some checks that will be our runtime

86
00:06:03,730 --> 00:06:16,910
checks pilots also have quick reference

87
00:06:11,930 --> 00:06:24,130
handbook in case of an incident this is

88
00:06:16,910 --> 00:06:29,570
something like our networks in in our

89
00:06:24,130 --> 00:06:33,740
tools they the automation and of of our

90
00:06:29,570 --> 00:06:37,820
response on security incidents so let's

91
00:06:33,740 --> 00:06:41,210
see if we can borrow something from the

92
00:06:37,820 --> 00:06:44,900
testing practices in in software

93
00:06:41,210 --> 00:06:50,359
development when when we do feature

94
00:06:44,900 --> 00:06:53,799
testing one of the things that it's it's

95
00:06:50,360 --> 00:07:00,070
good is a simple test can be safely

96
00:06:53,800 --> 00:07:07,090
extrapolated so if you have a feature

97
00:07:00,070 --> 00:07:11,390
that tests something like a balance with

98
00:07:07,090 --> 00:07:15,799
1000 euros you make a test about that

99
00:07:11,390 --> 00:07:19,419
specific figure and if it passes okay

100
00:07:15,800 --> 00:07:27,010
and you don't need to test if the same

101
00:07:19,420 --> 00:07:31,370
test will apply to 200 500 or whatever

102
00:07:27,010 --> 00:07:35,920
but feature testing is business

103
00:07:31,370 --> 00:07:40,940
dependent and it's difficult to reuse so

104
00:07:35,920 --> 00:07:43,930
in that example the amount that the

105
00:07:40,940 --> 00:07:49,640
feature of related with amount is easy

106
00:07:43,930 --> 00:07:52,810
to extrapolate but these specific fields

107
00:07:49,640 --> 00:07:56,090
use are related to your business

108
00:07:52,810 --> 00:08:00,760
application so it's difficult the same

109
00:07:56,090 --> 00:08:04,630
test being used to in another project or

110
00:08:00,760 --> 00:08:04,630
in another company

111
00:08:04,750 --> 00:08:12,410
so let's see how this apply hold this

112
00:08:08,570 --> 00:08:15,920
map with a security control texting we

113
00:08:12,410 --> 00:08:19,370
have we face a complexity in insecurity

114
00:08:15,920 --> 00:08:22,220
testing it's that we have two different

115
00:08:19,370 --> 00:08:24,860
problems we have an all-or-nothing

116
00:08:22,220 --> 00:08:32,000
problem an architect and orchestration

117
00:08:24,860 --> 00:08:35,060
problem stop here moment about which is

118
00:08:32,000 --> 00:08:44,000
the problem with intentional risk an

119
00:08:35,059 --> 00:08:48,130
intentional risk a the attacker will see

120
00:08:44,000 --> 00:08:52,520
which are the controls you have in place

121
00:08:48,130 --> 00:08:57,560
so if there if you left one of these

122
00:08:52,520 --> 00:09:01,310
windows without fence the attacker will

123
00:08:57,560 --> 00:09:04,510
attack that specific window so you need

124
00:09:01,310 --> 00:09:11,000
to test you need to see if you have all

125
00:09:04,510 --> 00:09:13,490
your windows cover with a control so

126
00:09:11,000 --> 00:09:17,650
this is the problem of security we need

127
00:09:13,490 --> 00:09:21,050
to test all of our known off condition

128
00:09:17,650 --> 00:09:26,270
you need to test all of my machines all

129
00:09:21,050 --> 00:09:30,740
my users none of my users you need to

130
00:09:26,270 --> 00:09:33,939
test something among different places

131
00:09:30,740 --> 00:09:33,940
[Music]

132
00:09:34,930 --> 00:09:47,209
this is an example of marinovitch that

133
00:09:38,360 --> 00:09:51,350
they have just deploy and oops deploying

134
00:09:47,210 --> 00:09:55,960
new features in this man and he talks

135
00:09:51,350 --> 00:09:55,960
about any of and all of filters

136
00:09:56,140 --> 00:10:03,920
the other promise orchestration we need

137
00:10:00,890 --> 00:10:07,340
to pipeline our and orchestrate the

138
00:10:03,920 --> 00:10:10,939
output of different tools as inputs of

139
00:10:07,340 --> 00:10:14,180
other tools if you need to test

140
00:10:10,940 --> 00:10:17,780
something among different servers you

141
00:10:14,180 --> 00:10:22,189
need to first to make a list of the

142
00:10:17,780 --> 00:10:25,579
servers and then apply something to the

143
00:10:22,190 --> 00:10:29,240
server maybe look for that specific type

144
00:10:25,580 --> 00:10:32,720
of file and then there's something about

145
00:10:29,240 --> 00:10:37,670
that specific file so you need a some

146
00:10:32,720 --> 00:10:40,990
precaution here and you need to

147
00:10:37,670 --> 00:10:43,910
orchestrate all so they exist in

148
00:10:40,990 --> 00:10:48,770
existing tools whether there are

149
00:10:43,910 --> 00:10:55,550
commercial ones or span a small a common

150
00:10:48,770 --> 00:11:01,610
line and this is the big the problem is

151
00:10:55,550 --> 00:11:03,680
that we the best practices asks you for

152
00:11:01,610 --> 00:11:08,270
four different code four or five

153
00:11:03,680 --> 00:11:15,290
different testing methods but there are

154
00:11:08,270 --> 00:11:19,130
a lot of small control testing that must

155
00:11:15,290 --> 00:11:22,490
be - must be done it's difficult because

156
00:11:19,130 --> 00:11:27,050
when you see the long tail of controls

157
00:11:22,490 --> 00:11:32,450
that you need to test you have a long

158
00:11:27,050 --> 00:11:35,359
list of paths of checklist of we have

159
00:11:32,450 --> 00:11:41,810
different standards and none of them

160
00:11:35,360 --> 00:11:44,420
have less than one 200 of of controls

161
00:11:41,810 --> 00:11:49,520
sometimes to test that control you will

162
00:11:44,420 --> 00:11:52,969
need more than one test so this is a

163
00:11:49,520 --> 00:11:56,569
spanning you need to you need to test

164
00:11:52,970 --> 00:11:58,880
hundreds and hundreds you need to have

165
00:11:56,570 --> 00:12:02,260
hundreds and hundreds of different tests

166
00:11:58,880 --> 00:12:09,700
and when you see their long tail

167
00:12:02,260 --> 00:12:12,370
a the usual the usual reaction is okay

168
00:12:09,700 --> 00:12:16,990
let's forget it I have the best

169
00:12:12,370 --> 00:12:19,240
practices in the industry because the

170
00:12:16,990 --> 00:12:22,510
cost of development and the cause of

171
00:12:19,240 --> 00:12:29,910
maintenance of that test will be over

172
00:12:22,510 --> 00:12:33,850
Herman for you but good news a

173
00:12:29,910 --> 00:12:41,380
standardized security controls is easier

174
00:12:33,850 --> 00:12:44,440
the future controls security controls

175
00:12:41,380 --> 00:12:52,330
are very similar from project to project

176
00:12:44,440 --> 00:12:57,390
and from a company to company we need to

177
00:12:52,330 --> 00:13:03,310
talk about about a common controls

178
00:12:57,390 --> 00:13:10,710
controls are very similar we have even

179
00:13:03,310 --> 00:13:18,180
industry standards and this can be done

180
00:13:10,710 --> 00:13:20,980
this is on our all known it's not ideas

181
00:13:18,180 --> 00:13:22,770
you have rules you have a tool and you

182
00:13:20,980 --> 00:13:26,280
have rules maintained in the community

183
00:13:22,770 --> 00:13:30,520
maintained but some companies that

184
00:13:26,280 --> 00:13:39,030
create some of the some of the rules but

185
00:13:30,520 --> 00:13:45,780
this is one example you have also

186
00:13:39,030 --> 00:13:49,050
and sorry it's very small and I can I

187
00:13:45,780 --> 00:13:51,390
can even see which is the this one I

188
00:13:49,050 --> 00:13:53,880
think this is this is a general rule I

189
00:13:51,390 --> 00:13:58,230
think from Florian Roth

190
00:13:53,880 --> 00:14:05,220
you have your own rules and there is a

191
00:13:58,230 --> 00:14:06,920
lot of people working on generals there

192
00:14:05,220 --> 00:14:11,910
are a lot of companies contributing

193
00:14:06,920 --> 00:14:20,900
under our rules there are a lot of tools

194
00:14:11,910 --> 00:14:26,540
around it we also have some always

195
00:14:20,900 --> 00:14:26,540
projects like not security we have rules

196
00:14:27,890 --> 00:14:46,050
we have Sigma for SI n response Sigma is

197
00:14:43,050 --> 00:14:52,560
for log files what is not is for network

198
00:14:46,050 --> 00:14:55,650
traffic and J is for files so we are

199
00:14:52,560 --> 00:14:58,800
proportioned sister and sister will be

200
00:14:55,650 --> 00:15:00,990
for security control testing what season

201
00:14:58,800 --> 00:15:05,400
is for log files what is noir is for

202
00:15:00,990 --> 00:15:08,820
network traffic and arise for files so

203
00:15:05,400 --> 00:15:13,260
why we are proposing sister this a new

204
00:15:08,820 --> 00:15:19,980
category a we want to extend the concept

205
00:15:13,260 --> 00:15:22,800
of a sto because we think that first you

206
00:15:19,980 --> 00:15:29,810
need to be systematic you need to cover

207
00:15:22,800 --> 00:15:34,560
the long tail and not just for tools and

208
00:15:29,810 --> 00:15:37,140
we think that it should be universal we

209
00:15:34,560 --> 00:15:39,630
need to cover the full stack not just

210
00:15:37,140 --> 00:15:43,199
the application because we have the

211
00:15:39,630 --> 00:15:45,960
opportunity now we have a lot of our

212
00:15:43,200 --> 00:15:48,730
infrastructure is defined using IP is

213
00:15:45,960 --> 00:15:54,280
and you can check

214
00:15:48,730 --> 00:15:56,200
exact configuration of the api's and we

215
00:15:54,280 --> 00:15:59,079
have also tools to check the

216
00:15:56,200 --> 00:16:02,170
configuration of of the systems

217
00:15:59,080 --> 00:16:05,680
sometimes you have configuration in

218
00:16:02,170 --> 00:16:09,810
doing with that you can check with

219
00:16:05,680 --> 00:16:15,339
command line and we are also working and

220
00:16:09,810 --> 00:16:18,849
how to amplify a command command line

221
00:16:15,340 --> 00:16:21,640
interfaces we have an a tool that we are

222
00:16:18,850 --> 00:16:24,670
developing to do this because we have

223
00:16:21,640 --> 00:16:34,720
seen that we will need it to cover this

224
00:16:24,670 --> 00:16:44,079
and let's dip dye with which is the the

225
00:16:34,720 --> 00:16:48,270
different a parameterization of the

226
00:16:44,080 --> 00:16:52,540
control testing first we start with risk

227
00:16:48,270 --> 00:16:57,579
we have controls for that risks we have

228
00:16:52,540 --> 00:17:00,640
lots of list of controls and we when we

229
00:16:57,580 --> 00:17:04,319
do threat modeling or risk analysis we

230
00:17:00,640 --> 00:17:07,510
assess the risk and we declare which

231
00:17:04,319 --> 00:17:12,720
should be the controls fourth for that

232
00:17:07,510 --> 00:17:18,900
risk to cover that risk but that control

233
00:17:12,720 --> 00:17:26,710
it's like a class is a generic control

234
00:17:18,900 --> 00:17:30,930
you can test declare control you have

235
00:17:26,710 --> 00:17:35,230
the description of the control but to

236
00:17:30,930 --> 00:17:39,780
launch a test you need to know which

237
00:17:35,230 --> 00:17:45,730
instance of that control to test so

238
00:17:39,780 --> 00:17:49,690
controls are instantiated in running

239
00:17:45,730 --> 00:17:53,440
controls so you deploy a control in a

240
00:17:49,690 --> 00:17:58,280
target in a final system

241
00:17:53,440 --> 00:18:06,910
for the control classes for you can have

242
00:17:58,280 --> 00:18:11,990
a class of tests that do parametrize a

243
00:18:06,910 --> 00:18:15,350
you put in your desire goal so you have

244
00:18:11,990 --> 00:18:19,010
two different kinds of parameters ation

245
00:18:15,350 --> 00:18:22,969
one is which is a target the other one

246
00:18:19,010 --> 00:18:25,040
it's which is your this article and we

247
00:18:22,970 --> 00:18:32,750
have when you have both you can launch

248
00:18:25,040 --> 00:18:41,480
the test so which will be the main

249
00:18:32,750 --> 00:18:45,440
features of of system first this should

250
00:18:41,480 --> 00:18:52,090
be generic in in their objectives you

251
00:18:45,440 --> 00:18:56,510
need to to know what do you want to test

252
00:18:52,090 --> 00:18:59,540
but this should be comfortable in the in

253
00:18:56,510 --> 00:19:01,810
their estimation in sensation you need

254
00:18:59,540 --> 00:19:06,980
to you need to know which is the target

255
00:19:01,810 --> 00:19:10,760
instance against which system you will

256
00:19:06,980 --> 00:19:15,290
test and you need to put which is your

257
00:19:10,760 --> 00:19:18,200
desire gold being bullion or being score

258
00:19:15,290 --> 00:19:25,330
maybe if you are using commercial tool

259
00:19:18,200 --> 00:19:29,570
the tool will send you which is the

260
00:19:25,330 --> 00:19:30,879
final score of your system or if if the

261
00:19:29,570 --> 00:19:34,550
if you are testing against

262
00:19:30,880 --> 00:19:36,770
vulnerabilities you have the score of

263
00:19:34,550 --> 00:19:38,810
that vulnerability and you need to

264
00:19:36,770 --> 00:19:43,060
assess which is your minimum which is

265
00:19:38,810 --> 00:19:45,110
your which is your passing score

266
00:19:43,060 --> 00:19:48,260
you should facilitate the integration

267
00:19:45,110 --> 00:19:51,770
with the system tools because you will

268
00:19:48,260 --> 00:19:56,030
need intermediate tools to obtain

269
00:19:51,770 --> 00:20:01,810
information and you need to be able to

270
00:19:56,030 --> 00:20:01,810
launch the execution of specific tests

271
00:20:02,520 --> 00:20:10,950
manual intervention should be minimized

272
00:20:05,870 --> 00:20:14,540
the the the final objective is to

273
00:20:10,950 --> 00:20:17,850
automate but we know that sometimes a

274
00:20:14,540 --> 00:20:22,290
human interation will be required that's

275
00:20:17,850 --> 00:20:26,360
okay but it should be minimized and it's

276
00:20:22,290 --> 00:20:31,470
very important to have an architecture

277
00:20:26,360 --> 00:20:35,610
that don't introduce new threats because

278
00:20:31,470 --> 00:20:39,450
sometimes if you want to test something

279
00:20:35,610 --> 00:20:45,449
you need access to do you need access

280
00:20:39,450 --> 00:20:48,570
and and then your your testing becomes a

281
00:20:45,450 --> 00:20:54,300
critical path to your job production

282
00:20:48,570 --> 00:21:00,570
system so beware sometimes one of one of

283
00:20:54,300 --> 00:21:05,280
the were more recent projects we have no

284
00:21:00,570 --> 00:21:10,379
access to production at all not even to

285
00:21:05,280 --> 00:21:14,250
test the the vulnerabilities of the

286
00:21:10,380 --> 00:21:19,980
system we test in the deploy and

287
00:21:14,250 --> 00:21:23,910
pipeline you fixed your version you

288
00:21:19,980 --> 00:21:30,620
deploy and nobody access so we need to

289
00:21:23,910 --> 00:21:34,830
convince our audit department that the

290
00:21:30,620 --> 00:21:41,510
the test that we did in the deployment

291
00:21:34,830 --> 00:21:44,850
phase are valid for up our production

292
00:21:41,510 --> 00:21:47,879
systems because we don't change

293
00:21:44,850 --> 00:21:51,570
it's an emotive all infrastructure so if

294
00:21:47,880 --> 00:21:53,400
you test it in your deployment this is

295
00:21:51,570 --> 00:22:01,560
the same you have in the inter

296
00:21:53,400 --> 00:22:06,690
production ok and let's say for example

297
00:22:01,560 --> 00:22:10,500
a which could be an an example of a

298
00:22:06,690 --> 00:22:16,140
briefs control and

299
00:22:10,500 --> 00:22:19,710
and test a there are lots of different

300
00:22:16,140 --> 00:22:25,710
standards that asks you for encryption

301
00:22:19,710 --> 00:22:29,429
in the communication channel and one of

302
00:22:25,710 --> 00:22:38,460
the most typical control to use is use

303
00:22:29,429 --> 00:22:44,270
TLS okay so we will have a target that

304
00:22:38,460 --> 00:22:44,270
will be which is the URL that we will

305
00:22:44,330 --> 00:22:52,139
launch the tents against and the other

306
00:22:48,059 --> 00:22:57,559
one is which is the minimum version of

307
00:22:52,140 --> 00:23:02,750
TLS that we allow maybe you have some

308
00:22:57,559 --> 00:23:07,190
regular project and it's enough to have

309
00:23:02,750 --> 00:23:15,710
TLS but maybe you need to comply with

310
00:23:07,190 --> 00:23:21,750
with PCI and you need TLS 1.2 1.3 so

311
00:23:15,710 --> 00:23:25,740
that's a common test against a control

312
00:23:21,750 --> 00:23:30,780
and you have two different parameters

313
00:23:25,740 --> 00:23:35,070
and you will not change some results

314
00:23:30,780 --> 00:23:42,330
that will be okay or not okay and

315
00:23:35,070 --> 00:23:44,870
details if you need do you need to test

316
00:23:42,330 --> 00:23:49,860
against the version number for example

317
00:23:44,870 --> 00:23:56,219
on and you need to log the result of the

318
00:23:49,860 --> 00:24:01,529
over the testing okay so two

319
00:23:56,220 --> 00:24:05,789
to cover that you can theory that we are

320
00:24:01,529 --> 00:24:09,409
proposing we have started an internal

321
00:24:05,789 --> 00:24:13,950
project but internal yet that will be

322
00:24:09,409 --> 00:24:18,169
open sourced and we want to start a

323
00:24:13,950 --> 00:24:20,879
Novus project for them if there is

324
00:24:18,169 --> 00:24:25,620
enough consensus that it is this is

325
00:24:20,879 --> 00:24:30,449
something that is require or it will be

326
00:24:25,620 --> 00:24:33,600
useful for us for all of us and we have

327
00:24:30,450 --> 00:24:37,970
started the definition of a tool that is

328
00:24:33,600 --> 00:24:41,490
called Overlord and how the the

329
00:24:37,970 --> 00:24:47,149
architecture of that tool we we will

330
00:24:41,490 --> 00:24:51,779
have roles that are able to retrieve

331
00:24:47,149 --> 00:25:00,539
intermediate information using existing

332
00:24:51,779 --> 00:25:05,909
or for developing new tools rules to

333
00:25:00,539 --> 00:25:08,730
check against the results and with

334
00:25:05,909 --> 00:25:13,019
different tools that could be existing

335
00:25:08,730 --> 00:25:15,659
application security tools security

336
00:25:13,019 --> 00:25:19,889
testing tools not for application but

337
00:25:15,659 --> 00:25:27,809
for system system securities and other

338
00:25:19,889 --> 00:25:31,918
scripts that we and you can write we

339
00:25:27,809 --> 00:25:36,450
need to manage the configuration of that

340
00:25:31,919 --> 00:25:42,080
of that roles and and we need to put the

341
00:25:36,450 --> 00:25:45,090
context to that rules in order to lounge

342
00:25:42,080 --> 00:25:53,580
the tools with our specific parameters

343
00:25:45,090 --> 00:25:56,639
both targets and their higher goals one

344
00:25:53,580 --> 00:25:59,809
of the question does that we had when we

345
00:25:56,639 --> 00:26:05,299
first talked about this is a we will

346
00:25:59,809 --> 00:26:05,299
will you put inside that tool

347
00:26:05,629 --> 00:26:11,959
information about the risk

348
00:26:09,090 --> 00:26:14,269
and how riffs and controls are related

349
00:26:11,960 --> 00:26:20,370
mmm

350
00:26:14,269 --> 00:26:24,629
we want to have a clean tool we think

351
00:26:20,370 --> 00:26:28,590
that the risk management should be done

352
00:26:24,629 --> 00:26:33,269
in another layer Chris management is

353
00:26:28,590 --> 00:26:35,870
important mmm I mean a risk management

354
00:26:33,269 --> 00:26:38,909
tool is important if you need to manage

355
00:26:35,870 --> 00:26:42,570
different projects lots of projects and

356
00:26:38,909 --> 00:26:45,649
you have common controls if you have

357
00:26:42,570 --> 00:26:45,649
this too

358
00:26:46,710 --> 00:26:53,149
if you have both a security common

359
00:26:50,159 --> 00:26:58,820
security controls and a lot of different

360
00:26:53,149 --> 00:27:04,018
projects you will profit for having a

361
00:26:58,820 --> 00:27:08,029
tool to manage all these relationships

362
00:27:04,019 --> 00:27:13,470
but if you are small maybe you just put

363
00:27:08,029 --> 00:27:20,039
your list of tests again against your

364
00:27:13,470 --> 00:27:23,249
controls so and which are the

365
00:27:20,039 --> 00:27:28,039
stakeholders that we see in VIPs in this

366
00:27:23,249 --> 00:27:32,279
kind of category and this kind of a

367
00:27:28,039 --> 00:27:37,580
security tool first the the cloud

368
00:27:32,279 --> 00:27:41,509
service providers or orden they

369
00:27:37,580 --> 00:27:46,529
everything as a service providers

370
00:27:41,509 --> 00:27:48,659
because now they are providing lists of

371
00:27:46,529 --> 00:27:53,549
best practices

372
00:27:48,659 --> 00:27:57,299
well architected or whatever but they

373
00:27:53,549 --> 00:28:02,850
can the if we think that they will be

374
00:27:57,299 --> 00:28:08,990
able to offer the specific test against

375
00:28:02,850 --> 00:28:14,280
your deployment and have not only the

376
00:28:08,990 --> 00:28:17,050
warden but the code to test

377
00:28:14,280 --> 00:28:20,290
security vendors within that existing

378
00:28:17,050 --> 00:28:26,740
security vendors can be very interested

379
00:28:20,290 --> 00:28:28,600
in this category first the application

380
00:28:26,740 --> 00:28:32,950
security requirements and threat

381
00:28:28,600 --> 00:28:36,490
management because they need they

382
00:28:32,950 --> 00:28:40,630
they're they have the list of the

383
00:28:36,490 --> 00:28:43,500
projects the risk and the controls our

384
00:28:40,630 --> 00:28:48,520
class controls on a control class

385
00:28:43,500 --> 00:28:52,720
classes but they need to test and and

386
00:28:48,520 --> 00:28:57,820
it's difficult to for them to have all

387
00:28:52,720 --> 00:29:04,680
of that test so they can use a tool like

388
00:28:57,820 --> 00:29:07,600
this in order to cover a full cycle also

389
00:29:04,680 --> 00:29:12,250
governance and risk and compliance tools

390
00:29:07,600 --> 00:29:15,310
that is similar to the first one but

391
00:29:12,250 --> 00:29:20,860
they have their even sometimes some

392
00:29:15,310 --> 00:29:23,950
either in a higher position they 16

393
00:29:20,860 --> 00:29:27,159
security tools our best current best

394
00:29:23,950 --> 00:29:30,300
practice tools are static analysis

395
00:29:27,160 --> 00:29:35,500
dynamic analysis software composition

396
00:29:30,300 --> 00:29:41,080
and correlation so the because they're

397
00:29:35,500 --> 00:29:44,020
built I'm taking tools so they are

398
00:29:41,080 --> 00:29:48,879
covering one part of the tool they are

399
00:29:44,020 --> 00:29:54,540
covering they are checking tools in the

400
00:29:48,880 --> 00:29:57,760
build time also the security

401
00:29:54,540 --> 00:30:00,909
orchestration and I don't remember

402
00:29:57,760 --> 00:30:05,290
exactly they this hour this is the

403
00:30:00,910 --> 00:30:11,170
response orchestration because they are

404
00:30:05,290 --> 00:30:14,560
runtime response automation tools so

405
00:30:11,170 --> 00:30:16,980
they have an opportunity they know how

406
00:30:14,560 --> 00:30:21,030
to automate

407
00:30:16,980 --> 00:30:25,260
our de Mistura or similar the mister

408
00:30:21,030 --> 00:30:29,970
tools similar a they have an opportunity

409
00:30:25,260 --> 00:30:34,530
to cover also the automation in the bill

410
00:30:29,970 --> 00:30:38,640
time there's an abuse startup

411
00:30:34,530 --> 00:30:41,129
opportunity if if there is a gap there

412
00:30:38,640 --> 00:30:44,910
is a need in the industry who have

413
00:30:41,130 --> 00:30:48,390
checked with some of our some of our

414
00:30:44,910 --> 00:30:51,680
colleagues in other in other companies

415
00:30:48,390 --> 00:31:00,140
and maybe there is an opportunity for

416
00:30:51,680 --> 00:31:00,140
startups we want to start this as a

417
00:31:01,970 --> 00:31:11,090
spark in the in the market this should

418
00:31:07,530 --> 00:31:14,490
be bootstrapping in some way because

419
00:31:11,090 --> 00:31:19,399
everybody is happy in the current

420
00:31:14,490 --> 00:31:23,220
situation even we think that all of us

421
00:31:19,400 --> 00:31:32,220
see that we can do better but everybody

422
00:31:23,220 --> 00:31:36,240
is comfortable now it's like a game in

423
00:31:32,220 --> 00:31:40,110
the in again that everybody is its happy

424
00:31:36,240 --> 00:31:48,950
nobody will change from using game

425
00:31:40,110 --> 00:31:54,510
theory and anyway if nobody started a

426
00:31:48,950 --> 00:32:02,430
your organization will be Anna

427
00:31:54,510 --> 00:32:03,260
stakeholder of of this project which

428
00:32:02,430 --> 00:32:07,490
will be the neck

429
00:32:03,260 --> 00:32:12,590
steps okay we need feedback and we need

430
00:32:07,490 --> 00:32:17,240
contribution we want to promote this as

431
00:32:12,590 --> 00:32:20,449
a novice project sometimes one of the

432
00:32:17,240 --> 00:32:28,190
difficulties for example is if I start

433
00:32:20,450 --> 00:32:31,690
the hub project under BBVA my colleagues

434
00:32:28,190 --> 00:32:36,560
in Santander that are interested it's

435
00:32:31,690 --> 00:32:39,200
difficult for them to to be in the BBVA

436
00:32:36,560 --> 00:32:45,470
site so maybe this is something that

437
00:32:39,200 --> 00:32:49,430
could be a neutral space to to to

438
00:32:45,470 --> 00:32:55,190
collaborate a we will we are starting

439
00:32:49,430 --> 00:32:59,450
now both in BBVA and with Santander

440
00:32:55,190 --> 00:33:02,900
annex the roadmap of the tool which will

441
00:32:59,450 --> 00:33:07,400
be the features that we will need we

442
00:33:02,900 --> 00:33:12,680
need to start a proof of concept of our

443
00:33:07,400 --> 00:33:17,300
law as an OS Sisto tool we need to

444
00:33:12,680 --> 00:33:21,740
develop plugins to existing tools we

445
00:33:17,300 --> 00:33:26,750
need to map a standard control sets to

446
00:33:21,740 --> 00:33:33,220
rules we need contribution of community

447
00:33:26,750 --> 00:33:35,890
rules and we need to will be happy that

448
00:33:33,220 --> 00:33:44,050
cloud service providers or vendors

449
00:33:35,890 --> 00:33:44,050
contribute with their own curated rules

450
00:33:46,300 --> 00:33:56,540
also sister for it it has a meaning

451
00:33:52,780 --> 00:34:01,230
inside it sister is the Spanish word for

452
00:33:56,540 --> 00:34:05,520
fright that's the region of the ghost

453
00:34:01,230 --> 00:34:15,149
and there's a small child joke that is

454
00:34:05,520 --> 00:34:16,340
that of fright okay right boo oh of

455
00:34:15,149 --> 00:34:24,290
razinin

456
00:34:16,340 --> 00:34:28,020
well you could have chosen death so

457
00:34:24,290 --> 00:34:34,409
don't fear the long tail you better

458
00:34:28,020 --> 00:34:42,210
choose sister and that's all for my part

459
00:34:34,409 --> 00:34:43,800
thank you everybody and we definitely

460
00:34:42,210 --> 00:34:45,899
have some time for questions so if

461
00:34:43,800 --> 00:35:00,300
anybody wants to ask a question I've got

462
00:34:45,899 --> 00:35:02,759
a microphone to help out first

463
00:35:00,300 --> 00:35:04,020
it's a nice idea and thank you for your

464
00:35:02,760 --> 00:35:06,600
presentation

465
00:35:04,020 --> 00:35:09,180
do you my question is do you have

466
00:35:06,600 --> 00:35:10,680
anything published already is there

467
00:35:09,180 --> 00:35:15,210
anything on github or something

468
00:35:10,680 --> 00:35:20,430
no no our intention is to work on it in

469
00:35:15,210 --> 00:35:22,740
in in this quarter and have something

470
00:35:20,430 --> 00:35:27,000
published we will publish the the

471
00:35:22,740 --> 00:35:31,410
presentation we have just start to see

472
00:35:27,000 --> 00:35:35,280
which are the the verse art features of

473
00:35:31,410 --> 00:35:41,370
the tool but we need to we want to to

474
00:35:35,280 --> 00:35:44,850
test as like an agile project I mean we

475
00:35:41,370 --> 00:35:49,980
don't have the truth we need to do tests

476
00:35:44,850 --> 00:35:52,200
so we will start with I mean a mailing

477
00:35:49,980 --> 00:35:56,580
list a community or slack channel

478
00:35:52,200 --> 00:36:00,379
whatever we will we need to see which is

479
00:35:56,580 --> 00:36:03,660
the best repository to to a start

480
00:36:00,380 --> 00:36:07,410
under BBVA and they're always dependent

481
00:36:03,660 --> 00:36:10,560
maybe depends of the timing it's easy

482
00:36:07,410 --> 00:36:15,810
for us to start one project

483
00:36:10,560 --> 00:36:18,180
behind our our did hub account but we

484
00:36:15,810 --> 00:36:25,830
are certain we're starting now

485
00:36:18,180 --> 00:36:27,480
thank you very much yes I'll say that

486
00:36:25,830 --> 00:36:31,740
you you covered a lot of things you

487
00:36:27,480 --> 00:36:35,490
mentioned full-stack versus application

488
00:36:31,740 --> 00:36:37,319
security testing orchestration you

489
00:36:35,490 --> 00:36:41,009
mentioned rules this understand as I

490
00:36:37,320 --> 00:36:43,770
exist and maybe I say two three

491
00:36:41,010 --> 00:36:48,810
sentences all be the output of the OS

492
00:36:43,770 --> 00:36:52,050
project there but should be the tool to

493
00:36:48,810 --> 00:36:55,340
be able to launch an orchestrated there

494
00:36:52,050 --> 00:36:58,530
are the results and the drools

495
00:36:55,340 --> 00:37:01,980
contributed by the community so we know

496
00:36:58,530 --> 00:37:07,500
we have we already have some projects

497
00:37:01,980 --> 00:37:11,609
that have both tool like mod security

498
00:37:07,500 --> 00:37:13,470
and and the common role set this is

499
00:37:11,609 --> 00:37:17,339
something that it you can contribute

500
00:37:13,470 --> 00:37:19,950
with the code you can contribute with I

501
00:37:17,339 --> 00:37:23,160
mean with the core of the of the core

502
00:37:19,950 --> 00:37:29,220
with the different plugins with

503
00:37:23,160 --> 00:37:31,859
development of a small test and with the

504
00:37:29,220 --> 00:37:34,950
rules so there are opportunities for

505
00:37:31,859 --> 00:37:39,029
everybody to contribute and and we think

506
00:37:34,950 --> 00:37:46,439
that as the main problem is the number

507
00:37:39,030 --> 00:37:49,589
of of tests that will be needed we need

508
00:37:46,440 --> 00:37:56,030
a community effort and and and this is

509
00:37:49,589 --> 00:38:02,430
the a if if we are able to to to start

510
00:37:56,030 --> 00:38:06,780
the this this community then it will it

511
00:38:02,430 --> 00:38:09,598
will run by yourself okay so I don't hug

512
00:38:06,780 --> 00:38:13,099
the mic a quick one will be how do you

513
00:38:09,599 --> 00:38:16,050
define well what is full-stack versus

514
00:38:13,099 --> 00:38:21,460
application I mean not only the code of

515
00:38:16,050 --> 00:38:26,800
the application may imagine am

516
00:38:21,460 --> 00:38:33,369
I mean check your LDAP or check your the

517
00:38:26,800 --> 00:38:39,150
configuration of of your AWS account

518
00:38:33,369 --> 00:38:44,200
I mean it's is two-factor authentication

519
00:38:39,150 --> 00:38:48,430
established or not have is that specific

520
00:38:44,200 --> 00:38:53,220
kind of logging on or off its you have a

521
00:38:48,430 --> 00:38:59,348
lot of a lot of if you take a control

522
00:38:53,220 --> 00:39:03,279
you do need to have a tool to test if

523
00:38:59,349 --> 00:39:06,910
that control it is okay or not and and

524
00:39:03,280 --> 00:39:11,099
you can do it manually I mean but at the

525
00:39:06,910 --> 00:39:15,759
end if we are able to automate a

526
00:39:11,099 --> 00:39:18,849
everything will be smooth for example

527
00:39:15,760 --> 00:39:22,740
one of the things that we want to do is

528
00:39:18,849 --> 00:39:30,760
ask our pen testing ethical hacking

529
00:39:22,740 --> 00:39:37,709
project to select the five ten most

530
00:39:30,760 --> 00:39:42,640
critical vulnerabilities and make a rule

531
00:39:37,710 --> 00:39:46,660
to test if that specific vulnerability

532
00:39:42,640 --> 00:39:51,040
is present or not because how many of

533
00:39:46,660 --> 00:39:56,230
you have seen vulnerabilities that has

534
00:39:51,040 --> 00:40:02,950
been detected has been fixed and months

535
00:39:56,230 --> 00:40:06,460
later appears again if you know exactly

536
00:40:02,950 --> 00:40:10,629
which is the one already please me outer

537
00:40:06,460 --> 00:40:15,400
mate the test in this case is most most

538
00:40:10,630 --> 00:40:18,970
of that cases will be specific to you so

539
00:40:15,400 --> 00:40:22,280
it will be rules that are internal rules

540
00:40:18,970 --> 00:40:24,589
for you but imagine

541
00:40:22,280 --> 00:40:27,110
that there is a common role that could

542
00:40:24,590 --> 00:40:30,260
be shared with the community okay you

543
00:40:27,110 --> 00:40:33,220
have the opportunity to share the

544
00:40:30,260 --> 00:40:33,220
thoughtful

545
00:40:38,410 --> 00:40:41,480
[Music]

546
00:40:43,270 --> 00:40:49,370
so security tools or security testing

547
00:40:47,000 --> 00:40:52,700
tools are or were not really known for

548
00:40:49,370 --> 00:40:56,000
having good interfaces to trigger well

549
00:40:52,700 --> 00:40:59,029
to trigger scans and leverage automation

550
00:40:56,000 --> 00:41:01,340
what what are you well which is a

551
00:40:59,030 --> 00:41:03,290
prerequisite right for this tool well

552
00:41:01,340 --> 00:41:05,960
you had all your observations over the

553
00:41:03,290 --> 00:41:10,330
last cup of yeah that improved we need

554
00:41:05,960 --> 00:41:12,860
some plugins to to do the work with

555
00:41:10,330 --> 00:41:18,770
mostly for existing commercial tools

556
00:41:12,860 --> 00:41:27,070
that this is something to develop a API

557
00:41:18,770 --> 00:41:31,490
a controls ap concert that are defined

558
00:41:27,070 --> 00:41:36,170
api's will be easy to check and one of

559
00:41:31,490 --> 00:41:38,060
the fickle teas that we we have seen is

560
00:41:36,170 --> 00:41:42,620
that there are a lot of small

561
00:41:38,060 --> 00:41:44,750
command-line tools to be launched that's

562
00:41:42,620 --> 00:41:47,630
the reason we have started that there is

563
00:41:44,750 --> 00:41:53,230
an open source project that is called

564
00:41:47,630 --> 00:41:57,290
capo that tries to amplify existing

565
00:41:53,230 --> 00:42:03,280
common command-line interfaces so if you

566
00:41:57,290 --> 00:42:08,180
have a common line a you have an API

567
00:42:03,280 --> 00:42:11,210
within very small effort and and that's

568
00:42:08,180 --> 00:42:16,640
the very way within that it could we

569
00:42:11,210 --> 00:42:20,150
solve that that problem that obviously

570
00:42:16,640 --> 00:42:24,200
there are a lot of small tools that are

571
00:42:20,150 --> 00:42:26,870
existing sixteen small tools that don't

572
00:42:24,200 --> 00:42:29,460
have there are historical and then half

573
00:42:26,870 --> 00:42:31,170
a an API

574
00:42:29,460 --> 00:42:35,010
so you can check the you can check their

575
00:42:31,170 --> 00:42:38,940
the project the parade is already open

576
00:42:35,010 --> 00:42:42,599
source we have first proof of concept in

577
00:42:38,940 --> 00:42:47,310
Python and we are now we great into to

578
00:42:42,599 --> 00:42:53,070
go in order to don't depend of the

579
00:42:47,310 --> 00:42:58,980
specific in mmm runtime environment okay

580
00:42:53,070 --> 00:43:00,030
thank you so I think we need to wrap up

581
00:42:58,980 --> 00:43:01,050
and get ready for the next presentation

582
00:43:00,030 --> 00:43:03,980
thanks Louise

583
00:43:01,050 --> 00:43:03,980
she's probably around

