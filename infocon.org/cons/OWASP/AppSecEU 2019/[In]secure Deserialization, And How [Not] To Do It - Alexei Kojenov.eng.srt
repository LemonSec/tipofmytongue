1
00:00:02,409 --> 00:00:07,069
good to go alright hi everyone and

2
00:00:05,630 --> 00:00:08,080
welcome to today's talk on

3
00:00:07,069 --> 00:00:11,530
deserialization

4
00:00:08,080 --> 00:00:15,169
the obligatory slide about the speaker

5
00:00:11,530 --> 00:00:17,509
my name is Alexei I've done I started my

6
00:00:15,169 --> 00:00:18,890
career as a software developer but then

7
00:00:17,510 --> 00:00:20,810
at some point I realized that breaking

8
00:00:18,890 --> 00:00:24,050
code was more interesting than writing

9
00:00:20,810 --> 00:00:26,720
code and I decided to become a security

10
00:00:24,050 --> 00:00:28,370
guy and I've done application security

11
00:00:26,720 --> 00:00:29,750
for the last several years working for a

12
00:00:28,370 --> 00:00:33,769
few companies and I currently work for

13
00:00:29,750 --> 00:00:35,809
Salesforce in the United States so today

14
00:00:33,769 --> 00:00:39,230
we're gonna talk about digitalization

15
00:00:35,809 --> 00:00:41,358
what it is different formats

16
00:00:39,230 --> 00:00:42,858
I'll give you several demos and I hope

17
00:00:41,359 --> 00:00:45,679
they work because you know how it goes

18
00:00:42,859 --> 00:00:47,569
you try the multiple times at home and

19
00:00:45,679 --> 00:00:49,879
they don't work when you present but I

20
00:00:47,569 --> 00:00:51,469
hope we don't have any issues today well

21
00:00:49,879 --> 00:00:53,419
I want to give you live demos because I

22
00:00:51,469 --> 00:00:56,390
think that's a good way to demonstrate

23
00:00:53,420 --> 00:00:59,300
the actual things happening in real time

24
00:00:56,390 --> 00:01:01,789
and I don't know about me but when I

25
00:00:59,300 --> 00:01:04,399
hear the word exploit I want to see the

26
00:01:01,789 --> 00:01:05,420
exploit right so I hope you did too now

27
00:01:04,400 --> 00:01:09,770
we're going to talk about some big

28
00:01:05,420 --> 00:01:11,619
vulnerabilities that had insecure

29
00:01:09,770 --> 00:01:14,960
digitalization as the root cause and

30
00:01:11,619 --> 00:01:19,549
will of course discuss the ways to fix

31
00:01:14,960 --> 00:01:21,320
the issues so as you know insecurity

32
00:01:19,549 --> 00:01:23,869
realization was a DAT you've asked top

33
00:01:21,320 --> 00:01:26,089
ten couple years ago at the end of 2017

34
00:01:23,869 --> 00:01:29,060
and shortly after that at one of my

35
00:01:26,090 --> 00:01:31,969
previous jobs I was asked to create a

36
00:01:29,060 --> 00:01:33,469
small online class on the topic and I

37
00:01:31,969 --> 00:01:36,020
started looking into it and I thought

38
00:01:33,469 --> 00:01:37,189
it's kind of boring you know and there's

39
00:01:36,020 --> 00:01:40,369
not much to talk about

40
00:01:37,189 --> 00:01:43,820
but as I started looking into everything

41
00:01:40,369 --> 00:01:46,640
that's available online I realized that

42
00:01:43,820 --> 00:01:48,770
the topic is huge it's very deep and

43
00:01:46,640 --> 00:01:51,439
it's very broad there are multiple

44
00:01:48,770 --> 00:01:55,969
languages there are multiple formats

45
00:01:51,439 --> 00:01:57,859
there are many different ways to exploit

46
00:01:55,969 --> 00:02:01,070
to attack and many different ways to

47
00:01:57,859 --> 00:02:04,009
protect and they all depend on either

48
00:02:01,070 --> 00:02:08,228
language the format or the combination

49
00:02:04,009 --> 00:02:11,750
of those or some other factors so I

50
00:02:08,229 --> 00:02:13,910
since then I've I've done two large

51
00:02:11,750 --> 00:02:17,480
presentations on this sub

52
00:02:13,910 --> 00:02:18,770
and this is my third one and I don't

53
00:02:17,480 --> 00:02:22,010
know I still don't consider myself an

54
00:02:18,770 --> 00:02:25,150
expert because this is just too much for

55
00:02:22,010 --> 00:02:28,730
you know for a single person to absorb

56
00:02:25,150 --> 00:02:32,990
and but today I hope you leave with some

57
00:02:28,730 --> 00:02:36,170
idea about so what this realization is

58
00:02:32,990 --> 00:02:40,070
how I mean in specifically how it can be

59
00:02:36,170 --> 00:02:45,619
dangerous right and why we want to fix

60
00:02:40,070 --> 00:02:48,530
our issues but first of all what it is

61
00:02:45,620 --> 00:02:50,210
let's say you have a program with some

62
00:02:48,530 --> 00:02:51,830
kind of an object in its memory and you

63
00:02:50,210 --> 00:02:53,720
want to send that object to maybe a

64
00:02:51,830 --> 00:02:56,090
different program the way it's normally

65
00:02:53,720 --> 00:02:58,010
done that object is converted to some

66
00:02:56,090 --> 00:03:00,590
kind of a byte stream and then you send

67
00:02:58,010 --> 00:03:03,200
that by stream over a certain channel

68
00:03:00,590 --> 00:03:05,750
doesn't really matter and then on the

69
00:03:03,200 --> 00:03:09,739
other end that byte stream is D

70
00:03:05,750 --> 00:03:13,330
converted and to create a copy of that

71
00:03:09,740 --> 00:03:15,740
object in maybe another program so the

72
00:03:13,330 --> 00:03:18,440
first process is called serialization

73
00:03:15,740 --> 00:03:23,560
and the second process is called D

74
00:03:18,440 --> 00:03:26,180
serialization and your channel can be

75
00:03:23,560 --> 00:03:28,420
anything it could be local storage it

76
00:03:26,180 --> 00:03:32,600
could be network transfer REST API

77
00:03:28,420 --> 00:03:34,790
parameter whatever work where you can

78
00:03:32,600 --> 00:03:38,600
push the bytes that's where you can push

79
00:03:34,790 --> 00:03:42,010
that object in terms of different

80
00:03:38,600 --> 00:03:45,530
formats and languages we can talk about

81
00:03:42,010 --> 00:03:47,989
binary formats and those are normally

82
00:03:45,530 --> 00:03:50,870
related to languages that support

83
00:03:47,989 --> 00:03:53,840
serialization natively like Java Python

84
00:03:50,870 --> 00:03:56,870
or dotnet and we can also talk about

85
00:03:53,840 --> 00:04:02,209
human readable formats like XML or JSON

86
00:03:56,870 --> 00:04:03,650
or any xml-based formats and if you

87
00:04:02,209 --> 00:04:07,280
think about it you know if you look at

88
00:04:03,650 --> 00:04:09,620
the XML it's basically some kind of an

89
00:04:07,280 --> 00:04:12,500
object right it has tags it has actually

90
00:04:09,620 --> 00:04:14,239
buta test some data and and it's human

91
00:04:12,500 --> 00:04:17,510
readable you know you can look at it and

92
00:04:14,239 --> 00:04:20,060
understand what's going on with Java and

93
00:04:17,510 --> 00:04:22,460
Python for example it's binary you don't

94
00:04:20,060 --> 00:04:24,500
really if you look at the at the file

95
00:04:22,460 --> 00:04:27,138
itself you don't really see exactly

96
00:04:24,500 --> 00:04:30,050
what's there so with that

97
00:04:27,139 --> 00:04:32,270
oh yeah oh so this is just a small

98
00:04:30,050 --> 00:04:34,219
subset on this slide you can go to

99
00:04:32,270 --> 00:04:36,740
Wikipedia for example to get the into

100
00:04:34,219 --> 00:04:40,189
the full list and and there's a lot of

101
00:04:36,740 --> 00:04:43,610
different formats and you can see right

102
00:04:40,189 --> 00:04:50,629
away how how broad this the subject is

103
00:04:43,610 --> 00:04:53,270
right okay our first demo very basic

104
00:04:50,629 --> 00:05:01,210
stuff you see if this microphone stand

105
00:04:53,270 --> 00:05:06,289
works and if I can find the right window

106
00:05:01,210 --> 00:05:10,279
here it is so I have a small java

107
00:05:06,289 --> 00:05:13,240
program called basic serialize I hope

108
00:05:10,279 --> 00:05:17,150
you can see it so what it does it

109
00:05:13,240 --> 00:05:18,979
instantiates and is the an object of a

110
00:05:17,150 --> 00:05:21,229
certain class the class is called just a

111
00:05:18,979 --> 00:05:25,250
class it's a very simple one it only has

112
00:05:21,229 --> 00:05:29,449
two members ID and name and constructor

113
00:05:25,250 --> 00:05:32,659
and a two string method so we have that

114
00:05:29,449 --> 00:05:34,580
that object in the memory and then we

115
00:05:32,659 --> 00:05:36,560
create a couple of things like file

116
00:05:34,580 --> 00:05:38,599
atmosphereum object output stream and

117
00:05:36,560 --> 00:05:40,699
then we finally call a method called

118
00:05:38,599 --> 00:05:44,419
write object and that's the method in

119
00:05:40,699 --> 00:05:46,159
Java that she realizes an object and we

120
00:05:44,419 --> 00:05:48,620
write the output to a file and then the

121
00:05:46,159 --> 00:05:51,020
second part of the program reads that

122
00:05:48,620 --> 00:05:53,960
file creates a link the stream object

123
00:05:51,020 --> 00:05:57,620
input input stream and then it finally

124
00:05:53,960 --> 00:05:59,650
calls the read object method to read to

125
00:05:57,620 --> 00:06:02,509
deserialize so that's the actual

126
00:05:59,650 --> 00:06:06,198
digitalization right here and then we

127
00:06:02,509 --> 00:06:12,050
cast the the result into our class

128
00:06:06,199 --> 00:06:15,770
alright let's see how it works so the

129
00:06:12,050 --> 00:06:21,199
program ran it wrote the object to this

130
00:06:15,770 --> 00:06:25,520
file and this file is 81 bytes on the

131
00:06:21,199 --> 00:06:29,719
disk and if you just look at it it's

132
00:06:25,520 --> 00:06:32,000
some kind of a binary garbage but you

133
00:06:29,719 --> 00:06:35,240
can also see some plain text like the

134
00:06:32,000 --> 00:06:38,410
value of one of the hills in the in the

135
00:06:35,240 --> 00:06:41,620
object even the class name is

136
00:06:38,410 --> 00:06:43,390
in the plaintext so even though it's

137
00:06:41,620 --> 00:06:49,870
binary you know you can still see some

138
00:06:43,390 --> 00:06:53,349
data here if we try to base64 the very

139
00:06:49,870 --> 00:06:55,630
the first five characters reads are or

140
00:06:53,350 --> 00:06:58,480
zero a b and if you see this kind of

141
00:06:55,630 --> 00:07:00,340
string in like a neighbor block you can

142
00:06:58,480 --> 00:07:02,560
guess that this is probably serialized

143
00:07:00,340 --> 00:07:05,830
java object so that's a nice thing too

144
00:07:02,560 --> 00:07:09,850
nice thing to remember let's switch to

145
00:07:05,830 --> 00:07:11,560
you Python with Python I have two very

146
00:07:09,850 --> 00:07:14,770
small programs one is safe and it

147
00:07:11,560 --> 00:07:17,860
creates a very basic Python dictionary

148
00:07:14,770 --> 00:07:20,440
with a couple of values and then it uses

149
00:07:17,860 --> 00:07:23,140
the pickle module and it's dump method

150
00:07:20,440 --> 00:07:26,980
to serialize that object can write it to

151
00:07:23,140 --> 00:07:28,930
file and the our my read program is

152
00:07:26,980 --> 00:07:32,230
doing the opposite it reads the file and

153
00:07:28,930 --> 00:07:36,940
uses the pickle module and its load

154
00:07:32,230 --> 00:07:41,710
method to deserialize the object so for

155
00:07:36,940 --> 00:07:48,280
unsaved it wrote to file if I run read

156
00:07:41,710 --> 00:07:51,340
it read the Arbitron file again if we

157
00:07:48,280 --> 00:07:53,979
try to just print the file it's some

158
00:07:51,340 --> 00:07:55,840
kind of binary stuff but just like in

159
00:07:53,980 --> 00:07:57,970
Java you can see some plain text so it's

160
00:07:55,840 --> 00:08:01,510
not it's not like encrypted or

161
00:07:57,970 --> 00:08:06,730
compressed or anything just really the

162
00:08:01,510 --> 00:08:08,680
rate as it is that's that's pretty much

163
00:08:06,730 --> 00:08:10,990
for for the basic example and we're

164
00:08:08,680 --> 00:08:13,030
gonna move into maybe more interesting

165
00:08:10,990 --> 00:08:17,340
stuff everybody's favorite session

166
00:08:13,030 --> 00:08:17,340
cookie alright

167
00:08:17,430 --> 00:08:23,500
this web application has a couple of

168
00:08:20,200 --> 00:08:26,200
sections let me make sure I don't have

169
00:08:23,500 --> 00:08:28,780
anything here insecure and secure so

170
00:08:26,200 --> 00:08:31,979
let's go to insecure and it says I'm not

171
00:08:28,780 --> 00:08:35,020
an admin go away

172
00:08:31,979 --> 00:08:39,780
secure pretty much says the same thing

173
00:08:35,020 --> 00:08:44,110
so they they act identically right now

174
00:08:39,780 --> 00:08:48,160
so let's take a look at the at our

175
00:08:44,110 --> 00:08:52,030
cookie storage so we have two cookie

176
00:08:48,160 --> 00:08:58,079
values the insecure cookie and

177
00:08:52,030 --> 00:08:58,079
Kuki one of them I mean you see they

178
00:08:58,380 --> 00:09:04,540
almost the same but the secure cookie is

179
00:09:01,390 --> 00:09:06,370
longer and we understand why so let's

180
00:09:04,540 --> 00:09:08,380
let's take a look at this cookie and see

181
00:09:06,370 --> 00:09:10,870
and try to understand what it is it

182
00:09:08,380 --> 00:09:17,670
seems like some kind of base 64 encoded

183
00:09:10,870 --> 00:09:20,170
value right reasonable okay if we just

184
00:09:17,670 --> 00:09:26,650
tackle this and of course we need to

185
00:09:20,170 --> 00:09:30,849
replace this with actual characters we

186
00:09:26,650 --> 00:09:32,860
decode it's a plain JSON and it has a

187
00:09:30,850 --> 00:09:35,500
couple of values one for me and one for

188
00:09:32,860 --> 00:09:38,680
for the role and I could guess that this

189
00:09:35,500 --> 00:09:41,730
role probably something that tells the

190
00:09:38,680 --> 00:09:48,069
web application who the user is and

191
00:09:41,730 --> 00:09:55,470
qualify do something like this we

192
00:09:48,070 --> 00:10:00,840
replace anonymous with Edmund cool and

193
00:09:55,470 --> 00:10:04,390
if I base64 encoded now I have my new

194
00:10:00,840 --> 00:10:07,360
base64 encoded JSON and I can probably

195
00:10:04,390 --> 00:10:13,810
try to replace this cookie with this new

196
00:10:07,360 --> 00:10:17,200
value and now i refresh the page the

197
00:10:13,810 --> 00:10:20,680
application read that cookie value and

198
00:10:17,200 --> 00:10:23,010
now I'm the administrator and of course

199
00:10:20,680 --> 00:10:25,569
I mean this is a very still example but

200
00:10:23,010 --> 00:10:28,390
in this case the application did not

201
00:10:25,570 --> 00:10:30,880
care about the data integrity

202
00:10:28,390 --> 00:10:33,910
basically it trusted everything that the

203
00:10:30,880 --> 00:10:35,710
user supplied so even though the the

204
00:10:33,910 --> 00:10:39,430
application generated that cookie in the

205
00:10:35,710 --> 00:10:42,490
first place it gave it to the user and

206
00:10:39,430 --> 00:10:46,630
the user was free to do anything they

207
00:10:42,490 --> 00:10:50,290
want with this value so as we know no

208
00:10:46,630 --> 00:10:54,070
integrity no security right so we fought

209
00:10:50,290 --> 00:10:59,680
for the data that's that might get that

210
00:10:54,070 --> 00:11:01,690
might end up in the users hands we

211
00:10:59,680 --> 00:11:04,000
always need to make sure that we do some

212
00:11:01,690 --> 00:11:06,910
kind of validation and we can do

213
00:11:04,000 --> 00:11:09,250
for example digital signature sign that

214
00:11:06,910 --> 00:11:11,709
value with private key or we can do a

215
00:11:09,250 --> 00:11:18,490
message authentication code like H Mac

216
00:11:11,709 --> 00:11:20,589
and in my case I used H Mac with my

217
00:11:18,490 --> 00:11:22,329
super secret key which is only known to

218
00:11:20,589 --> 00:11:23,829
the application itself it's never

219
00:11:22,329 --> 00:11:27,638
revealed back to the user

220
00:11:23,829 --> 00:11:30,160
but the the app now signs

221
00:11:27,639 --> 00:11:31,269
well not science but adds that H Mac to

222
00:11:30,160 --> 00:11:36,490
the cookie value and that's why the

223
00:11:31,269 --> 00:11:39,490
secure cookie is longer than the

224
00:11:36,490 --> 00:11:41,730
insecure one it has two sections

225
00:11:39,490 --> 00:11:46,180
separated by this little dot right here

226
00:11:41,730 --> 00:11:48,160
you can see so the first is just it's

227
00:11:46,180 --> 00:11:50,920
just the value itself and the second is

228
00:11:48,160 --> 00:11:54,899
signature so if I try to replace the

229
00:11:50,920 --> 00:11:59,709
value with my new forged admin cookie

230
00:11:54,899 --> 00:12:01,810
then if I go to a secure section I just

231
00:11:59,709 --> 00:12:04,540
get unauthorized so the application

232
00:12:01,810 --> 00:12:07,089
properly checks in the authenticity of

233
00:12:04,540 --> 00:12:10,029
that value so that's the first thing

234
00:12:07,089 --> 00:12:12,610
that we need to remember always check

235
00:12:10,029 --> 00:12:17,230
integrity authenticity unless you really

236
00:12:12,610 --> 00:12:18,879
trust the source which frequently is not

237
00:12:17,230 --> 00:12:23,470
the case okay

238
00:12:18,879 --> 00:12:37,319
another demo this time we are going to

239
00:12:23,470 --> 00:12:41,079
use a java application so let's say we

240
00:12:37,319 --> 00:12:44,259
want to make something and sell

241
00:12:41,079 --> 00:12:48,008
something so we would go to factory and

242
00:12:44,259 --> 00:12:52,269
order some items so we found a factory

243
00:12:48,009 --> 00:12:55,139
that makes all things and let's how

244
00:12:52,269 --> 00:12:58,809
about we order a million iPhones okay

245
00:12:55,139 --> 00:13:00,759
awesome so we got they produced million

246
00:12:58,809 --> 00:13:07,809
iPhones for us and they send us the

247
00:13:00,759 --> 00:13:12,160
package which is this file now let us

248
00:13:07,809 --> 00:13:13,060
let's store it on the disk now that we

249
00:13:12,160 --> 00:13:15,640
have that

250
00:13:13,060 --> 00:13:24,099
we can send it to the store so they

251
00:13:15,640 --> 00:13:26,800
could sell it for us so I click the sell

252
00:13:24,100 --> 00:13:28,780
button and they instantly sold 1 million

253
00:13:26,800 --> 00:13:32,010
iPhones this is awesome this is better

254
00:13:28,780 --> 00:13:37,270
than Amazon you have to wait their

255
00:13:32,010 --> 00:13:46,180
instant delivery instant profit so what

256
00:13:37,270 --> 00:13:48,400
is this object that they sent to us if I

257
00:13:46,180 --> 00:13:50,829
use the olynyk's file utility it tells

258
00:13:48,400 --> 00:13:54,490
me that it's serialized Java data yeah

259
00:13:50,830 --> 00:13:56,590
who could guess right anyway so all is

260
00:13:54,490 --> 00:13:58,810
fine and I can order some more items and

261
00:13:56,590 --> 00:14:01,450
some more items but what if the factory

262
00:13:58,810 --> 00:14:03,000
is malicious and instead of iPhones it

263
00:14:01,450 --> 00:14:07,450
sends me something else

264
00:14:03,000 --> 00:14:10,420
so this Factory is just a bunch of

265
00:14:07,450 --> 00:14:13,600
hackers who do malicious things so

266
00:14:10,420 --> 00:14:16,930
instead of my Tesla or whatever I want

267
00:14:13,600 --> 00:14:22,410
to sell they send me a string a 64

268
00:14:16,930 --> 00:14:22,410
gigabyte something and then a CPU bomb

269
00:14:23,280 --> 00:14:30,040
I'm gonna store all of them and if I

270
00:14:27,640 --> 00:14:33,790
look at them on the desk with file

271
00:14:30,040 --> 00:14:36,339
utility they all serialize Java data and

272
00:14:33,790 --> 00:14:42,060
they'll pretty small you know the

273
00:14:36,340 --> 00:14:42,060
biggest one is just a few kilobytes cool

274
00:14:42,180 --> 00:14:50,199
let's try to sell one of these things so

275
00:14:46,990 --> 00:14:53,140
he's trying to solve a string object we

276
00:14:50,200 --> 00:14:54,610
get a Java exception which is kind of

277
00:14:53,140 --> 00:14:59,260
expected right because it's not the

278
00:14:54,610 --> 00:15:03,850
object that this store is able to deal

279
00:14:59,260 --> 00:15:06,130
with right and the exception says that

280
00:15:03,850 --> 00:15:10,750
string could not be cast to the class

281
00:15:06,130 --> 00:15:13,480
items good all right and it happened the

282
00:15:10,750 --> 00:15:16,470
exception was thrown on line 21 so let's

283
00:15:13,480 --> 00:15:16,470
take a look at line 21

284
00:15:16,770 --> 00:15:22,660
and this is our read object method as we

285
00:15:20,200 --> 00:15:24,430
saw in the basic example that's the one

286
00:15:22,660 --> 00:15:26,709
that is doing this realization

287
00:15:24,430 --> 00:15:28,660
but I want you to pay attention to the

288
00:15:26,710 --> 00:15:34,540
actual exception which says cannot be

289
00:15:28,660 --> 00:15:36,910
cast right so that means if we can read

290
00:15:34,540 --> 00:15:39,490
the Java code this is the this is the

291
00:15:36,910 --> 00:15:43,060
casting right here so that tells me that

292
00:15:39,490 --> 00:15:45,250
read object actually did return it

293
00:15:43,060 --> 00:15:48,699
succeeded we failed

294
00:15:45,250 --> 00:15:50,830
here on the next step so that tells me

295
00:15:48,700 --> 00:15:54,030
that this realization did happen even

296
00:15:50,830 --> 00:15:56,620
though the the object was completely of

297
00:15:54,030 --> 00:15:59,650
unexpected type so to prove the point

298
00:15:56,620 --> 00:16:02,770
let's try to sell these other malicious

299
00:15:59,650 --> 00:16:05,410
things so let's say let's try to sell

300
00:16:02,770 --> 00:16:08,650
this 64 gigabyte object even though as

301
00:16:05,410 --> 00:16:11,860
we saw in the disk is just a hundred

302
00:16:08,650 --> 00:16:15,819
bytes right why is it by yourself 64 I

303
00:16:11,860 --> 00:16:19,690
don't know and if I try to sell it my

304
00:16:15,820 --> 00:16:24,930
application thread crashed and why is

305
00:16:19,690 --> 00:16:29,530
that the reason is this little object

306
00:16:24,930 --> 00:16:32,829
and it's right here it's trying to

307
00:16:29,530 --> 00:16:34,510
consume 64 gigabyte of RAM and of course

308
00:16:32,830 --> 00:16:35,830
I don't have 64 gigabyte of RAM on this

309
00:16:34,510 --> 00:16:38,710
little virtual machine that I'm running

310
00:16:35,830 --> 00:16:41,710
on my laptop so there's no way I can do

311
00:16:38,710 --> 00:16:43,840
it well that's great we crash the

312
00:16:41,710 --> 00:16:48,100
application well in this case we crashed

313
00:16:43,840 --> 00:16:48,580
just one thread how about we try the CPU

314
00:16:48,100 --> 00:16:51,220
bomb

315
00:16:48,580 --> 00:16:56,970
what is it it's going to crash is going

316
00:16:51,220 --> 00:16:56,970
to throw an exception so I sell and it's

317
00:16:58,260 --> 00:17:08,920
not returning so what's going on and I

318
00:17:07,000 --> 00:17:11,920
can hear that my laptop fan is running

319
00:17:08,920 --> 00:17:18,190
really fast now so something is using my

320
00:17:11,920 --> 00:17:19,390
CPU oh yeah it's really long now so this

321
00:17:18,190 --> 00:17:22,540
is the virtual machine where this

322
00:17:19,390 --> 00:17:25,959
application is running if I run my top

323
00:17:22,540 --> 00:17:28,780
command I can see that this Java process

324
00:17:25,959 --> 00:17:29,710
is using 100% of CPU actually it's more

325
00:17:28,780 --> 00:17:33,310
than hundred I don't know how it's

326
00:17:29,710 --> 00:17:37,420
possible but whatever right so it's

327
00:17:33,310 --> 00:17:37,960
using all the processor resources and

328
00:17:37,420 --> 00:17:46,330
what is

329
00:17:37,960 --> 00:17:48,700
this process 24:17 this is my Tomcat

330
00:17:46,330 --> 00:17:51,460
server so that's the server that's

331
00:17:48,700 --> 00:17:54,399
running all my java applications and now

332
00:17:51,460 --> 00:18:00,429
it's really busy deserializing that

333
00:17:54,399 --> 00:18:04,989
little object so for whatever reason and

334
00:18:00,429 --> 00:18:07,390
this is this is the code for that that

335
00:18:04,990 --> 00:18:10,270
object and it's not my code I install it

336
00:18:07,390 --> 00:18:14,529
of course from a wast page I'd borrowed

337
00:18:10,270 --> 00:18:16,510
okay it's some kind of a structure looks

338
00:18:14,529 --> 00:18:21,870
maybe like a tree hundred levels deep

339
00:18:16,510 --> 00:18:21,870
based on hash set standard Java type and

340
00:18:22,049 --> 00:18:28,299
apparently JVM is able to create this

341
00:18:26,740 --> 00:18:30,880
kind of object and serialize it just

342
00:18:28,299 --> 00:18:34,570
fine but when it tries to deserialize it

343
00:18:30,880 --> 00:18:36,250
it has it gets really confused and it

344
00:18:34,570 --> 00:18:40,389
will never return its so it will sit

345
00:18:36,250 --> 00:18:43,690
here spinning my CPU indefinitely in an

346
00:18:40,390 --> 00:18:48,070
infinite loop and the only choice I have

347
00:18:43,690 --> 00:18:50,730
right now is to kill my Tomcat it's

348
00:18:48,070 --> 00:18:50,730
already started

349
00:18:53,640 --> 00:19:06,669
bye bye all right yeah I could just run

350
00:18:59,169 --> 00:19:10,240
this okay

351
00:19:06,669 --> 00:19:12,039
the website is up and running so how can

352
00:19:10,240 --> 00:19:14,490
we solve this issue if we if

353
00:19:12,039 --> 00:19:17,470
civilization visualization is happening

354
00:19:14,490 --> 00:19:19,659
no matter what well there is a way to do

355
00:19:17,470 --> 00:19:27,010
it in Java again this is very language

356
00:19:19,659 --> 00:19:31,890
specific so in Java what you need to do

357
00:19:27,010 --> 00:19:36,100
is you need to whitelist the class type

358
00:19:31,890 --> 00:19:39,399
yeah so the way to do it is instead of

359
00:19:36,100 --> 00:19:44,379
the plain of our object input stream you

360
00:19:39,399 --> 00:19:46,270
need to extend it and overwrite this

361
00:19:44,380 --> 00:19:48,940
resolved class method this method is

362
00:19:46,270 --> 00:19:51,650
called automatically during this

363
00:19:48,940 --> 00:19:53,000
realization but

364
00:19:51,650 --> 00:19:56,180
right before it right before it happens

365
00:19:53,000 --> 00:19:58,940
and what I'm doing here is I get the

366
00:19:56,180 --> 00:20:02,930
class name of the input and compare it

367
00:19:58,940 --> 00:20:05,090
to the class name of the class that I

368
00:20:02,930 --> 00:20:10,540
expect to see and if they don't match I

369
00:20:05,090 --> 00:20:14,199
throw an exception and I fail gracefully

370
00:20:10,540 --> 00:20:14,200
so let's see how it works

371
00:20:14,530 --> 00:20:24,560
we have a secure store with fixed code

372
00:20:17,680 --> 00:20:27,410
if I stand it let's say 64 gig thing it

373
00:20:24,560 --> 00:20:30,080
tells me they do not accept java.lang

374
00:20:27,410 --> 00:20:31,550
objects gel-like object it's like store

375
00:20:30,080 --> 00:20:37,040
telling you we don't know accept Visa or

376
00:20:31,550 --> 00:20:38,480
MasterCard right same thing or if I try

377
00:20:37,040 --> 00:20:41,510
to sell the CPU bomb

378
00:20:38,480 --> 00:20:48,230
they rejected to saying we do not accept

379
00:20:41,510 --> 00:20:48,770
hash set cool all right we just talked

380
00:20:48,230 --> 00:20:54,920
about it

381
00:20:48,770 --> 00:20:57,860
class whitelisting okay crashing the

382
00:20:54,920 --> 00:21:00,350
application or cousin some other kind of

383
00:20:57,860 --> 00:21:01,879
denial of service attack is great right

384
00:21:00,350 --> 00:21:05,449
and many attackers are trying to do just

385
00:21:01,880 --> 00:21:08,360
that but most of us would want to run

386
00:21:05,450 --> 00:21:11,990
code on the server too so we can own it

387
00:21:08,360 --> 00:21:15,110
completely so let's see how it can be

388
00:21:11,990 --> 00:21:26,000
done with Python I have yet another

389
00:21:15,110 --> 00:21:29,659
application a written let me clear the

390
00:21:26,000 --> 00:21:36,350
cookies and so it's written in Python

391
00:21:29,660 --> 00:21:40,130
and doesn't do much but it gives me such

392
00:21:36,350 --> 00:21:41,600
an cookie again and here is this value

393
00:21:40,130 --> 00:21:45,380
again it's some kind of basic stuff

394
00:21:41,600 --> 00:21:46,790
uncle encoded thing and since it's

395
00:21:45,380 --> 00:21:49,340
written in Python and we talking about

396
00:21:46,790 --> 00:22:01,960
this realization guess what that cookie

397
00:21:49,340 --> 00:22:05,238
is any ideas so serialized Python object

398
00:22:01,960 --> 00:22:09,259
we try to decode it we get some kind of

399
00:22:05,239 --> 00:22:14,210
binary stuff right but what if I write

400
00:22:09,259 --> 00:22:16,519
it to a file and then use my basic

401
00:22:14,210 --> 00:22:20,479
Python digitization program to read that

402
00:22:16,519 --> 00:22:22,940
file it read and it's a Python

403
00:22:20,479 --> 00:22:27,229
dictionary right with a couple of values

404
00:22:22,940 --> 00:22:28,879
again and we have excess value and here

405
00:22:27,229 --> 00:22:30,859
again we can spoof it because there is

406
00:22:28,879 --> 00:22:32,330
no integrity check on the application

407
00:22:30,859 --> 00:22:34,939
but that's not what we're trying to do

408
00:22:32,330 --> 00:22:41,269
this time it's not interesting anymore

409
00:22:34,940 --> 00:22:45,049
we want to run stuff so the way it can

410
00:22:41,269 --> 00:22:49,460
be done in Python is every time you

411
00:22:45,049 --> 00:22:53,769
serialize an object that object of a

412
00:22:49,460 --> 00:22:58,220
class that has a method called reduce or

413
00:22:53,769 --> 00:23:01,639
underscore underscore reduce that method

414
00:22:58,220 --> 00:23:04,789
will be automatically called during this

415
00:23:01,639 --> 00:23:09,529
realization and I don't think there is a

416
00:23:04,789 --> 00:23:13,759
way to block it basically so if I see

417
00:23:09,529 --> 00:23:17,690
realize this object this RS system

418
00:23:13,759 --> 00:23:20,479
command should be run on the server and

419
00:23:17,690 --> 00:23:26,119
this is of course netcat based reverse

420
00:23:20,479 --> 00:23:27,559
shell so let's give it a try I'm going

421
00:23:26,119 --> 00:23:31,509
to run my payload program to generate

422
00:23:27,559 --> 00:23:34,729
payload so this is a base64 encoded

423
00:23:31,509 --> 00:23:39,409
serialized Python object and I'm going

424
00:23:34,729 --> 00:23:41,960
to replace the cookie with my own stuff

425
00:23:39,409 --> 00:23:44,450
and before i refresh the page so the

426
00:23:41,960 --> 00:23:50,259
application processes that cookie I'm

427
00:23:44,450 --> 00:23:50,259
going to run and let cat listener

428
00:23:51,249 --> 00:24:02,590
refresh that's how it works yeah we got

429
00:23:59,210 --> 00:24:06,460
a connection so what is this connection

430
00:24:02,590 --> 00:24:09,709
let's see we are in this directory and

431
00:24:06,460 --> 00:24:11,269
we are route Oh awesome so the

432
00:24:09,710 --> 00:24:13,050
application is not configured well

433
00:24:11,269 --> 00:24:18,280
should not be run as root

434
00:24:13,050 --> 00:24:21,280
yeah pretty much forget so you can

435
00:24:18,280 --> 00:24:29,830
imagine what we can do now we are the

436
00:24:21,280 --> 00:24:33,570
gods on this server cool how can we

437
00:24:29,830 --> 00:24:33,570
protect the application in this case

438
00:24:34,170 --> 00:24:39,730
well in this particular case we can

439
00:24:36,870 --> 00:24:41,919
verify the integrity or authenticity of

440
00:24:39,730 --> 00:24:46,690
that cookie right but if you want to

441
00:24:41,920 --> 00:24:48,870
accept some arbitrary Python object we

442
00:24:46,690 --> 00:24:52,630
just should not do that

443
00:24:48,870 --> 00:24:55,179
okay let's switch the topic a little bit

444
00:24:52,630 --> 00:24:59,470
and talk about some big vulnerabilities

445
00:24:55,180 --> 00:25:01,750
in the last few years that had insecure

446
00:24:59,470 --> 00:25:04,780
digitalization as the root cause the

447
00:25:01,750 --> 00:25:06,670
first one i want to talk about is Apache

448
00:25:04,780 --> 00:25:09,010
Commons collections remote code

449
00:25:06,670 --> 00:25:12,340
execution so let's say you have a web

450
00:25:09,010 --> 00:25:14,830
application that is using several

451
00:25:12,340 --> 00:25:16,300
libraries on the back end and one of

452
00:25:14,830 --> 00:25:19,330
those libraries happens to be Apache

453
00:25:16,300 --> 00:25:22,090
Commons library or Apache Commerce

454
00:25:19,330 --> 00:25:24,520
questions actually that library has a

455
00:25:22,090 --> 00:25:27,250
bunch of reusable Java classes it's very

456
00:25:24,520 --> 00:25:30,010
popular and many applications are using

457
00:25:27,250 --> 00:25:33,550
it what happens is if your application

458
00:25:30,010 --> 00:25:38,020
is accepting user input and this

459
00:25:33,550 --> 00:25:40,870
realizes it then the user can supply a

460
00:25:38,020 --> 00:25:45,070
certain object that would use so-called

461
00:25:40,870 --> 00:25:48,090
Apache Commons gadgets and it's the

462
00:25:45,070 --> 00:25:51,040
topic is very complicated you can find

463
00:25:48,090 --> 00:25:53,949
presentations on it there like one hour

464
00:25:51,040 --> 00:25:56,520
long ish we're not gonna go into all the

465
00:25:53,950 --> 00:26:00,670
details but basically what happens is

466
00:25:56,520 --> 00:26:04,780
this is a sample sequence of the method

467
00:26:00,670 --> 00:26:08,080
calls that that's happening when such

468
00:26:04,780 --> 00:26:12,460
such gadget chain is deserialized the

469
00:26:08,080 --> 00:26:15,370
things in bold are the classes and

470
00:26:12,460 --> 00:26:17,800
methods from Apache Commons library but

471
00:26:15,370 --> 00:26:23,530
he also have some standard Java stuff

472
00:26:17,800 --> 00:26:27,020
and right here we can see that we get

473
00:26:23,530 --> 00:26:32,620
run time and right here we call run time

474
00:26:27,020 --> 00:26:32,620
exact to execute OS command Oh

475
00:26:37,370 --> 00:26:43,010
is this a problem with the Pasha commas

476
00:26:39,070 --> 00:26:44,870
collections library here no the problem

477
00:26:43,010 --> 00:26:47,720
is with the application that is not

478
00:26:44,870 --> 00:26:49,610
quite listing the class types and is

479
00:26:47,720 --> 00:26:55,130
just accepting the user input without

480
00:26:49,610 --> 00:26:59,929
validating it so in this case the Apache

481
00:26:55,130 --> 00:27:01,550
Commons project was forced to fix and to

482
00:26:59,930 --> 00:27:03,830
remove some of these risky methods

483
00:27:01,550 --> 00:27:06,530
because the big applications from huge

484
00:27:03,830 --> 00:27:08,840
vendors very important place on the

485
00:27:06,530 --> 00:27:11,000
market who are using the library and

486
00:27:08,840 --> 00:27:13,250
they said we need you to fix it

487
00:27:11,000 --> 00:27:15,980
otherwise we are all broken so they had

488
00:27:13,250 --> 00:27:18,620
to fix it but the problem might still be

489
00:27:15,980 --> 00:27:22,310
there if they did not make the fixes

490
00:27:18,620 --> 00:27:25,070
themselves okay the next one is Apache

491
00:27:22,310 --> 00:27:28,190
struts rest plug-in remote code

492
00:27:25,070 --> 00:27:31,909
execution again in this case we we're

493
00:27:28,190 --> 00:27:34,670
talking about Java but the serialization

494
00:27:31,910 --> 00:27:38,930
format in this case is XML so this is

495
00:27:34,670 --> 00:27:42,590
the on the screen here is HTTP request

496
00:27:38,930 --> 00:27:46,100
with the exploit as you can see the body

497
00:27:42,590 --> 00:27:49,879
is XML file but you can also see some

498
00:27:46,100 --> 00:27:52,699
Java artifacts here and here is Java

499
00:27:49,880 --> 00:27:54,740
process builder and a string which

500
00:27:52,700 --> 00:27:58,010
suspiciously looks like a reverse shell

501
00:27:54,740 --> 00:28:00,470
in fact it is a reverse shell so what

502
00:27:58,010 --> 00:28:04,780
happens is when this rest plug-in DC

503
00:28:00,470 --> 00:28:10,720
realizes this object it creates those

504
00:28:04,780 --> 00:28:13,360
Java objects and calls a method to

505
00:28:10,720 --> 00:28:15,860
execute a command

506
00:28:13,360 --> 00:28:23,260
yeah Java code with an XML what can go

507
00:28:15,860 --> 00:28:28,820
wrong the next one is pretty recent in

508
00:28:23,260 --> 00:28:32,420
oracle weblogic so in this case it's

509
00:28:28,820 --> 00:28:35,330
also xml-based format and very similar

510
00:28:32,420 --> 00:28:38,480
to the previous one we see process

511
00:28:35,330 --> 00:28:40,639
builder and a string that with the best

512
00:28:38,480 --> 00:28:44,960
call to remove all the files

513
00:28:40,640 --> 00:28:49,190
from the system but we could run

514
00:28:44,960 --> 00:28:50,690
anything else so when I went for this

515
00:28:49,190 --> 00:28:52,970
particular one when I went to look for

516
00:28:50,690 --> 00:28:56,770
actual exploit so I could try it and get

517
00:28:52,970 --> 00:29:00,830
this screenshot I went to Metasploit and

518
00:28:56,770 --> 00:29:03,710
found five four other ones and looks

519
00:29:00,830 --> 00:29:05,689
like Oracle WebLogic was having issues

520
00:29:03,710 --> 00:29:11,510
with this realization for years so

521
00:29:05,690 --> 00:29:15,650
there's one from 2015-2016 17 and 18 and

522
00:29:11,510 --> 00:29:17,810
19 so it here they they they have ulnar

523
00:29:15,650 --> 00:29:19,190
ability and published exploit and they

524
00:29:17,810 --> 00:29:21,710
have to fix it I hope they finally get

525
00:29:19,190 --> 00:29:29,720
it right but the the problem is

526
00:29:21,710 --> 00:29:33,080
difficult right okay no more Java let's

527
00:29:29,720 --> 00:29:37,760
talk about that net cyber-ark if you

528
00:29:33,080 --> 00:29:41,510
don't know what it is is is a product

529
00:29:37,760 --> 00:29:44,180
it's like your enterprise level password

530
00:29:41,510 --> 00:29:45,740
manager right so this is the quote from

531
00:29:44,180 --> 00:29:47,480
their website they help you secure

532
00:29:45,740 --> 00:29:50,660
rotate and control access to privileged

533
00:29:47,480 --> 00:29:54,590
account creations very important stuff

534
00:29:50,660 --> 00:29:57,200
and they have this useful REST API for

535
00:29:54,590 --> 00:30:00,730
automation and I don't know what else

536
00:29:57,200 --> 00:30:02,810
but it's authenticated of course

537
00:30:00,730 --> 00:30:05,270
authentication token happens to be a

538
00:30:02,810 --> 00:30:08,450
serialized dotnet object and there's

539
00:30:05,270 --> 00:30:10,790
nothing wrong with that as long as is

540
00:30:08,450 --> 00:30:12,590
done right but it had a couple of issues

541
00:30:10,790 --> 00:30:14,149
first they didn't have any integrity

542
00:30:12,590 --> 00:30:16,520
protection so anybody could spoof

543
00:30:14,150 --> 00:30:18,230
anything but it was not the biggest

544
00:30:16,520 --> 00:30:20,240
issue the biggest issue was there was no

545
00:30:18,230 --> 00:30:22,550
class type validation so you could

546
00:30:20,240 --> 00:30:25,130
submit an object of your own type and

547
00:30:22,550 --> 00:30:27,260
just like in the case of Apache Commons

548
00:30:25,130 --> 00:30:31,490
collections you could create a dotnet

549
00:30:27,260 --> 00:30:35,120
gadget chain and get remote code

550
00:30:31,490 --> 00:30:37,130
execution so when the researchers found

551
00:30:35,120 --> 00:30:39,560
this evil nura bility they report it to

552
00:30:37,130 --> 00:30:42,560
the vendor the vendor promptly fixed it

553
00:30:39,560 --> 00:30:45,440
the research is published and here is

554
00:30:42,560 --> 00:30:49,250
the actual exploit you run just one

555
00:30:45,440 --> 00:30:51,680
command you use an open source utility

556
00:30:49,250 --> 00:30:53,549
called Weiss of serial in this case its

557
00:30:51,680 --> 00:30:56,559
price of zero net

558
00:30:53,549 --> 00:30:59,289
to generate the payload and then you

559
00:30:56,559 --> 00:31:02,970
supply that payload as authorization

560
00:30:59,289 --> 00:31:07,600
header and you're on Carroll command to

561
00:31:02,970 --> 00:31:10,929
to execute that code on the server is it

562
00:31:07,600 --> 00:31:20,199
difficult no anybody can run this in

563
00:31:10,929 --> 00:31:25,390
fact let's try unfortunately I do not

564
00:31:20,200 --> 00:31:29,950
have cyber-ark but I wrote my own

565
00:31:25,390 --> 00:31:33,240
application all similarities with

566
00:31:29,950 --> 00:31:36,010
existent products are purely an antenna

567
00:31:33,240 --> 00:31:40,720
it's just a coincidence so this

568
00:31:36,010 --> 00:31:43,900
application has a very cool REST API is

569
00:31:40,720 --> 00:31:46,630
just one function when you call it

570
00:31:43,900 --> 00:31:49,480
without any parameters it gives you a

571
00:31:46,630 --> 00:31:53,919
sample value and when you see something

572
00:31:49,480 --> 00:31:56,400
that begins with a AE aad that's most

573
00:31:53,919 --> 00:32:09,760
likely a serialized net object that's

574
00:31:56,400 --> 00:32:19,120
you know that's how they are so I'm lost

575
00:32:09,760 --> 00:32:21,370
okay so if I call it without any

576
00:32:19,120 --> 00:32:25,479
parameters with the curl command I just

577
00:32:21,370 --> 00:32:29,260
get this sample value but what I'm gonna

578
00:32:25,480 --> 00:32:32,980
do is I'm going to generate a payload

579
00:32:29,260 --> 00:32:35,530
using this utility that the researchers

580
00:32:32,980 --> 00:32:39,220
did in case of cyber-ark to run

581
00:32:35,530 --> 00:32:43,149
calculator and of course every attacker

582
00:32:39,220 --> 00:32:46,500
wants to run calculator and then I'm

583
00:32:43,150 --> 00:32:53,620
going to supply that payload as

584
00:32:46,500 --> 00:32:56,440
authorization header with ko command and

585
00:32:53,620 --> 00:32:57,729
I've got my calculator yeah now we can

586
00:32:56,440 --> 00:32:59,620
play

587
00:32:57,730 --> 00:33:02,890
force it through a whole bunch of stuff

588
00:32:59,620 --> 00:33:05,050
here as the outputs throw an exception

589
00:33:02,890 --> 00:33:19,330
but who cares right we have our

590
00:33:05,050 --> 00:33:20,820
calculator mission achieved okay so to

591
00:33:19,330 --> 00:33:23,919
conclude as an attacker

592
00:33:20,820 --> 00:33:26,679
what are your tools so first of all you

593
00:33:23,920 --> 00:33:28,270
might wanna reverse reverse engineer you

594
00:33:26,680 --> 00:33:31,360
might want to understand what the

595
00:33:28,270 --> 00:33:33,280
application is doing what data is

596
00:33:31,360 --> 00:33:34,929
processing and how and where it's

597
00:33:33,280 --> 00:33:37,000
getting enough from so you can use any

598
00:33:34,930 --> 00:33:39,430
tool you like right and it really

599
00:33:37,000 --> 00:33:41,590
depends on the type of the application

600
00:33:39,430 --> 00:33:43,540
and whether you have access to the

601
00:33:41,590 --> 00:33:47,889
source code or not you know and bunch of

602
00:33:43,540 --> 00:33:50,440
other things there is a very great tool

603
00:33:47,890 --> 00:33:52,630
called whites of cereal that was

604
00:33:50,440 --> 00:33:54,330
originally written into I believe to

605
00:33:52,630 --> 00:33:56,950
demonstrate those Apache Commons

606
00:33:54,330 --> 00:34:01,000
collections gadgets but since then it

607
00:33:56,950 --> 00:34:05,140
was expanded a lot and now has many Java

608
00:34:01,000 --> 00:34:08,610
payloads voice is your net which we just

609
00:34:05,140 --> 00:34:11,110
used a couple minutes ago successfully

610
00:34:08,610 --> 00:34:13,750
is a similar payload generator for that

611
00:34:11,110 --> 00:34:16,180
net and there are several burp

612
00:34:13,750 --> 00:34:19,469
extensions last time I looked I think

613
00:34:16,179 --> 00:34:22,679
there were maybe five or six related

614
00:34:19,469 --> 00:34:24,730
dissertation and you can use them too

615
00:34:22,679 --> 00:34:27,129
and of course you're welcome to write

616
00:34:24,730 --> 00:34:28,540
your own code and you might want to do

617
00:34:27,130 --> 00:34:31,240
it because you might want to create your

618
00:34:28,540 --> 00:34:32,110
own object with your own malicious

619
00:34:31,239 --> 00:34:35,709
payload

620
00:34:32,110 --> 00:34:37,720
Taron and none of these tools might be

621
00:34:35,710 --> 00:34:39,730
working or there could be some obscure

622
00:34:37,719 --> 00:34:43,199
language that you want to cover that

623
00:34:39,730 --> 00:34:48,190
there's no tool available so takeaways

624
00:34:43,199 --> 00:34:51,929
digitalization is yeah it can be

625
00:34:48,190 --> 00:34:53,139
dangerous so don't use it I mean

626
00:34:51,929 --> 00:34:55,480
seriously

627
00:34:53,139 --> 00:34:58,480
well okay I understand we have to use it

628
00:34:55,480 --> 00:35:01,210
sometimes so if we do we need to do it

629
00:34:58,480 --> 00:35:05,080
in secure way so first of all we need to

630
00:35:01,210 --> 00:35:08,550
validate all input because as we know

631
00:35:05,080 --> 00:35:10,420
the broken distillation can result in

632
00:35:08,550 --> 00:35:13,119
broken of

633
00:35:10,420 --> 00:35:15,430
authorization privilege escalation

634
00:35:13,119 --> 00:35:18,760
denial of service and even remote code

635
00:35:15,430 --> 00:35:21,009
execution so if you don't want any of

636
00:35:18,760 --> 00:35:23,470
this happen happening we need to either

637
00:35:21,010 --> 00:35:26,289
process the input correctly or just

638
00:35:23,470 --> 00:35:29,200
plain reject it or just don't support it

639
00:35:26,289 --> 00:35:31,480
okay and remember that the third-party

640
00:35:29,200 --> 00:35:35,140
components can be vulnerable if use in

641
00:35:31,480 --> 00:35:37,750
one of those like two years ago if you

642
00:35:35,140 --> 00:35:39,940
were using a batch arrest plug-in you

643
00:35:37,750 --> 00:35:42,089
would be your application even though

644
00:35:39,940 --> 00:35:46,420
your source code is completely secure

645
00:35:42,089 --> 00:35:50,769
it's available all the code all the

646
00:35:46,420 --> 00:35:51,849
demos I showed today are on github so I

647
00:35:50,769 --> 00:35:53,470
feel free to use it

648
00:35:51,849 --> 00:35:55,150
it's a vagrant machine so you run

649
00:35:53,470 --> 00:35:56,649
vagrant and in 20 minutes you have a

650
00:35:55,150 --> 00:35:58,599
run-in machine with all these apps

651
00:35:56,650 --> 00:36:01,450
except for that net you have to have a

652
00:35:58,599 --> 00:36:03,579
separate Windows machine for that I

653
00:36:01,450 --> 00:36:07,808
could not fit it into a Linux box

654
00:36:03,579 --> 00:36:12,160
because I just couldn't feel free to use

655
00:36:07,809 --> 00:36:14,500
it share it with anybody else using your

656
00:36:12,160 --> 00:36:16,450
presentations or to teach somebody else

657
00:36:14,500 --> 00:36:18,579
you can contact me on Twitter or

658
00:36:16,450 --> 00:36:19,808
LinkedIn and thank you very much I don't

659
00:36:18,579 --> 00:36:23,810
know if we have two minutes for

660
00:36:19,809 --> 00:36:28,529
questions we've got any more questions

661
00:36:23,810 --> 00:36:32,288
[Music]

662
00:36:28,529 --> 00:36:35,380
okay one of the countermeasures you

663
00:36:32,289 --> 00:36:38,410
present is to have whitelisting of the

664
00:36:35,380 --> 00:36:40,720
class name do you have an opinion

665
00:36:38,410 --> 00:36:44,049
effective that is because Canada I

666
00:36:40,720 --> 00:36:46,450
cannot just rap is code inside the last

667
00:36:44,049 --> 00:36:50,170
name yeah it's not just class name it's

668
00:36:46,450 --> 00:36:53,710
not just a string it's a it's more like

669
00:36:50,170 --> 00:36:55,960
class signature so if the program does

670
00:36:53,710 --> 00:36:58,480
not know about this class even if it has

671
00:36:55,960 --> 00:37:03,670
the same class name but different it

672
00:36:58,480 --> 00:37:06,400
comes from a different okay let me

673
00:37:03,670 --> 00:37:08,410
rewind if you use in the same class I

674
00:37:06,400 --> 00:37:10,779
mean the valid class that the

675
00:37:08,410 --> 00:37:16,009
application expects then you can DC

676
00:37:10,779 --> 00:37:19,280
relies it safely right yeah yeah but

677
00:37:16,010 --> 00:37:23,690
you create a different class with the

678
00:37:19,280 --> 00:37:26,900
same name but with different members or

679
00:37:23,690 --> 00:37:29,120
different methods then it will have a

680
00:37:26,900 --> 00:37:31,220
different signature and that's what that

681
00:37:29,120 --> 00:37:32,630
method is checking so it's not just

682
00:37:31,220 --> 00:37:39,020
checking on the class let me check on

683
00:37:32,630 --> 00:37:40,940
the class signature you also mentioned

684
00:37:39,020 --> 00:37:43,160
validating the input but my question is

685
00:37:40,940 --> 00:37:45,440
don't you just need to sterilize first

686
00:37:43,160 --> 00:37:51,259
so then you can validate what's inside

687
00:37:45,440 --> 00:37:53,620
the object great question by input I

688
00:37:51,260 --> 00:37:57,110
mean you get this base64 encoded value

689
00:37:53,620 --> 00:37:59,380
right and you can unpack it so you can

690
00:37:57,110 --> 00:38:03,860
basics for decoded see what it is and

691
00:37:59,380 --> 00:38:06,380
then you might want to check the digital

692
00:38:03,860 --> 00:38:09,530
signature or H Mac right so that's what

693
00:38:06,380 --> 00:38:12,020
I mean input validation so you it might

694
00:38:09,530 --> 00:38:13,880
be multi step process you might want to

695
00:38:12,020 --> 00:38:20,509
check the integrity first authenticity

696
00:38:13,880 --> 00:38:23,780
or then like in case of Java we we were

697
00:38:20,510 --> 00:38:26,180
checking that class signature right

698
00:38:23,780 --> 00:38:27,380
before the serialization so it's part of

699
00:38:26,180 --> 00:38:32,020
this relation but happens right before

700
00:38:27,380 --> 00:38:47,860
it automatically so yeah okay thank you

701
00:38:32,020 --> 00:38:51,020
[Music]

702
00:38:47,860 --> 00:38:52,820
yeah the question is does do you have

703
00:38:51,020 --> 00:38:55,790
issues with if there if the application

704
00:38:52,820 --> 00:38:58,130
is run with list privilege principle so

705
00:38:55,790 --> 00:39:00,380
it's not running as root right right

706
00:38:58,130 --> 00:39:01,900
there's a question well it really

707
00:39:00,380 --> 00:39:04,520
depends

708
00:39:01,900 --> 00:39:06,050
normally the account that's running the

709
00:39:04,520 --> 00:39:08,720
application is capable of doing

710
00:39:06,050 --> 00:39:12,860
something it might be only capable to

711
00:39:08,720 --> 00:39:16,029
reaching out and issue sequel requests

712
00:39:12,860 --> 00:39:18,470
against the database rich in attackers

713
00:39:16,030 --> 00:39:21,350
hands might be dangerous

714
00:39:18,470 --> 00:39:24,319
right or it could do it could change the

715
00:39:21,350 --> 00:39:26,589
state of the server right it really

716
00:39:24,320 --> 00:39:26,590
depends

717
00:39:29,700 --> 00:39:36,189
yeah yeah it could it will definitely

718
00:39:34,180 --> 00:39:39,629
help but it's not specific to this

719
00:39:36,190 --> 00:39:39,630
civilization it's a it's a good practice

720
00:39:40,670 --> 00:39:47,700
[Music]

721
00:39:42,749 --> 00:39:47,700
lunch alright

