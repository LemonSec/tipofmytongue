1
00:00:00,530 --> 00:00:02,590
you

2
00:00:02,620 --> 00:00:09,950
so welcome everybody and thanks for

3
00:00:05,720 --> 00:00:13,550
coming so my first question to you is

4
00:00:09,950 --> 00:00:17,560
how many of you do work with AWS on your

5
00:00:13,550 --> 00:00:20,210
daily basis please raise your hand okay

6
00:00:17,560 --> 00:00:23,210
let's so many people so I will try to be

7
00:00:20,210 --> 00:00:25,660
as simple as explain the concepts here

8
00:00:23,210 --> 00:00:28,130
as simple as possible however if you

9
00:00:25,660 --> 00:00:30,529
don't understand anything just just

10
00:00:28,130 --> 00:00:32,448
please feel free to interrupt me the

11
00:00:30,529 --> 00:00:37,330
presentation is for you and you know I

12
00:00:32,448 --> 00:00:41,330
want to give you the whole idea so

13
00:00:37,330 --> 00:00:44,479
through the years a lot of company

14
00:00:41,330 --> 00:00:45,589
networks become like a real real

15
00:00:44,479 --> 00:00:49,220
stronghold

16
00:00:45,589 --> 00:00:54,589
so we weaponize it with a lot of boxes

17
00:00:49,220 --> 00:00:57,619
like id SCM systems DLP's etc and then

18
00:00:54,589 --> 00:01:01,879
there's the decision that we're going to

19
00:00:57,619 --> 00:01:04,760
cloud there's completely no relation so

20
00:01:01,879 --> 00:01:07,460
this even the security team is not sure

21
00:01:04,760 --> 00:01:13,609
if their company is doing something in

22
00:01:07,460 --> 00:01:16,130
cloud and it's often totally so the logs

23
00:01:13,609 --> 00:01:21,530
are not related with their with the CM

24
00:01:16,130 --> 00:01:24,530
systems no monitoring nothing so I asked

25
00:01:21,530 --> 00:01:28,880
one manager whose architecture look like

26
00:01:24,530 --> 00:01:32,630
this and I asked him aren't you feel

27
00:01:28,880 --> 00:01:35,298
scared of of such architecture well

28
00:01:32,630 --> 00:01:38,859
that's just an interesting environment

29
00:01:35,299 --> 00:01:42,079
and our guys really know this stuff and

30
00:01:38,859 --> 00:01:45,318
really know the staff is pretty brave

31
00:01:42,079 --> 00:01:48,880
assumption so basically the access to

32
00:01:45,319 --> 00:01:52,939
their cloud infrastructure is protected

33
00:01:48,880 --> 00:01:56,030
via the access keys and those access

34
00:01:52,939 --> 00:01:58,339
keys can leak in various ways the most

35
00:01:56,030 --> 00:02:01,310
common way of course is via the

36
00:01:58,340 --> 00:02:03,770
hard-coded code so there were so many

37
00:02:01,310 --> 00:02:07,729
leaks there are still actually that

38
00:02:03,770 --> 00:02:13,390
github created service that is called

39
00:02:07,729 --> 00:02:16,040
github token scanning so once you commit

40
00:02:13,390 --> 00:02:18,200
hard-coded keys then

41
00:02:16,040 --> 00:02:19,939
provider of those keys will be notified

42
00:02:18,200 --> 00:02:25,640
and then you will get a notification

43
00:02:19,939 --> 00:02:28,760
from the provider so in in fact you can

44
00:02:25,640 --> 00:02:34,369
do the same experiment on your own

45
00:02:28,760 --> 00:02:39,440
account so once you commit hard-coded

46
00:02:34,370 --> 00:02:42,739
keys then 55 seconds later about you

47
00:02:39,440 --> 00:02:46,189
will get an email from Amazon that your

48
00:02:42,739 --> 00:02:48,470
keys are compromised but this is the

49
00:02:46,189 --> 00:02:52,069
only but the problem here that those

50
00:02:48,470 --> 00:02:55,970
keys aren't blocked so you are just got

51
00:02:52,069 --> 00:02:59,920
notification and after about two minutes

52
00:02:55,970 --> 00:03:04,400
the first attempts of using the keys is

53
00:02:59,920 --> 00:03:08,858
happening but as I said this is not the

54
00:03:04,400 --> 00:03:11,720
only way how the keys can leak and

55
00:03:08,859 --> 00:03:13,790
finding the keys is just the beginning

56
00:03:11,720 --> 00:03:16,430
for the for the attacker and in this

57
00:03:13,790 --> 00:03:19,760
presentation I want to show you what

58
00:03:16,430 --> 00:03:23,269
attacker can do with those keys and how

59
00:03:19,760 --> 00:03:26,418
to find it in other way than just in the

60
00:03:23,269 --> 00:03:30,019
github repository my name is pavel japa

61
00:03:26,419 --> 00:03:32,180
I work in company called securing on my

62
00:03:30,019 --> 00:03:34,900
daily basis I'm doing penetration test

63
00:03:32,180 --> 00:03:38,180
as well as cloud security assessment and

64
00:03:34,900 --> 00:03:41,870
taking my experiences and some of real

65
00:03:38,180 --> 00:03:46,310
stories I created my own story for this

66
00:03:41,870 --> 00:03:50,230
presentation so imagine there's a

67
00:03:46,310 --> 00:03:53,720
company which is a software house and

68
00:03:50,230 --> 00:03:57,379
the manager was asked by one of their

69
00:03:53,720 --> 00:03:59,720
customer that there's a super lucrative

70
00:03:57,379 --> 00:04:04,159
project but one of the requirements is

71
00:03:59,720 --> 00:04:06,889
building the this project on AWS so the

72
00:04:04,159 --> 00:04:09,849
manager come due to the team and asked

73
00:04:06,889 --> 00:04:12,680
about the expertise in AWS so the team

74
00:04:09,849 --> 00:04:15,349
said very honestly well we don't we

75
00:04:12,680 --> 00:04:20,949
don't know it we don't have experience

76
00:04:15,349 --> 00:04:23,780
in that but some people cannot say no to

77
00:04:20,949 --> 00:04:30,630
when when they say money when they see

78
00:04:23,780 --> 00:04:34,929
money so the manager finds find an idea

79
00:04:30,630 --> 00:04:37,900
maybe we can build we can meet great our

80
00:04:34,930 --> 00:04:40,870
testing environment into cloud so people

81
00:04:37,900 --> 00:04:44,679
can learn on the on the real examples

82
00:04:40,870 --> 00:04:49,140
not like labs or in during the

83
00:04:44,680 --> 00:04:51,790
certification process so yeah cool idea

84
00:04:49,140 --> 00:04:53,560
but the team said well maybe we should

85
00:04:51,790 --> 00:04:56,230
we should think about it we should plan

86
00:04:53,560 --> 00:05:01,420
it we should do some trainings for our

87
00:04:56,230 --> 00:05:05,190
team but you know there are currently

88
00:05:01,420 --> 00:05:08,230
there are a lot of people who are super

89
00:05:05,190 --> 00:05:11,680
who's super believes in all those

90
00:05:08,230 --> 00:05:14,170
motivation quotes or the books about the

91
00:05:11,680 --> 00:05:17,760
success and the manager was one of them

92
00:05:14,170 --> 00:05:21,820
so the manager find on his Facebook wall

93
00:05:17,760 --> 00:05:24,520
the quote if someone tells you you can't

94
00:05:21,820 --> 00:05:27,969
they are showing kildare limits not

95
00:05:24,520 --> 00:05:31,650
yours so the decision was made and then

96
00:05:27,970 --> 00:05:35,070
any argument was rejected by the manager

97
00:05:31,650 --> 00:05:38,429
so the guys built some infrastructure

98
00:05:35,070 --> 00:05:41,530
he created the Elastic Compute cloud

99
00:05:38,430 --> 00:05:43,360
instance which is basically in AWS

100
00:05:41,530 --> 00:05:46,150
terminology it's like the virtual

101
00:05:43,360 --> 00:05:48,190
machine in the cloud so on this virtual

102
00:05:46,150 --> 00:05:50,979
machine they built the continuous

103
00:05:48,190 --> 00:05:54,310
integration they installed continued

104
00:05:50,980 --> 00:05:57,520
integration application in this in this

105
00:05:54,310 --> 00:06:01,300
case it is the Jenkins and these jenkees

106
00:05:57,520 --> 00:06:04,479
will be responsible for deploying new

107
00:06:01,300 --> 00:06:07,420
virtual machines with provisioned new

108
00:06:04,480 --> 00:06:13,500
versions of the application makes sense

109
00:06:07,420 --> 00:06:17,760
and to be able for the jail for the

110
00:06:13,500 --> 00:06:20,640
Jenkins application to deploy new

111
00:06:17,760 --> 00:06:24,670
instances of elastic cloud compute

112
00:06:20,640 --> 00:06:28,419
instances they have to have some

113
00:06:24,670 --> 00:06:32,470
permissions so you can attach the role

114
00:06:28,420 --> 00:06:37,140
to the to this instance and give them

115
00:06:32,470 --> 00:06:41,410
permission to do to deploy new instances

116
00:06:37,140 --> 00:06:42,360
and those is in this instance profile is

117
00:06:41,410 --> 00:06:45,569
kept

118
00:06:42,360 --> 00:06:48,449
in metadata also on the same on the same

119
00:06:45,569 --> 00:06:53,520
instance they also provisioned the first

120
00:06:48,449 --> 00:06:57,389
version of their application so what is

121
00:06:53,520 --> 00:07:01,740
the metadata metadata is the information

122
00:06:57,389 --> 00:07:05,909
about them about your instance so all of

123
00:07:01,740 --> 00:07:09,870
internal addressing instance IDs host

124
00:07:05,909 --> 00:07:14,069
name etc all of them are kept in

125
00:07:09,870 --> 00:07:16,440
metadata now do you see anything special

126
00:07:14,069 --> 00:07:19,440
in the address one six nine two five

127
00:07:16,440 --> 00:07:29,280
four what is what is what is it this

128
00:07:19,440 --> 00:07:31,949
kind of address I'm sorry it's a link

129
00:07:29,280 --> 00:07:34,830
link local address actually yeah link

130
00:07:31,949 --> 00:07:39,599
local address what means it is it works

131
00:07:34,830 --> 00:07:43,050
only in one network segment so if you

132
00:07:39,599 --> 00:07:43,680
are if you are curling to the to this

133
00:07:43,050 --> 00:07:45,900
address

134
00:07:43,680 --> 00:07:48,389
HTTP one six nine two five four one six

135
00:07:45,900 --> 00:07:50,878
nine two five four from the ins from the

136
00:07:48,389 --> 00:07:53,759
inside of the instance you will get all

137
00:07:50,879 --> 00:07:56,340
those information but if you are giving

138
00:07:53,759 --> 00:07:58,949
if you are trying to access this address

139
00:07:56,340 --> 00:08:01,619
from the other instance you will you

140
00:07:58,949 --> 00:08:05,009
will access this instance metadata so

141
00:08:01,620 --> 00:08:07,500
only you can you can reach the the

142
00:08:05,009 --> 00:08:11,610
content of the metadata only from the

143
00:08:07,500 --> 00:08:16,589
inside and this concept is nothing

144
00:08:11,610 --> 00:08:23,279
special for AWS because asier and GCP is

145
00:08:16,589 --> 00:08:26,219
using it.also what is more if you attach

146
00:08:23,279 --> 00:08:29,819
any profile to this instance the

147
00:08:26,219 --> 00:08:34,799
security tokens the access keys and thus

148
00:08:29,819 --> 00:08:42,719
a secure token is kept also in this

149
00:08:34,799 --> 00:08:46,109
metadata on this URL okay so the story

150
00:08:42,719 --> 00:08:48,779
has also the dark side and in the other

151
00:08:46,110 --> 00:08:53,040
end of the internet there's the evil

152
00:08:48,779 --> 00:08:56,600
hacker mam and the evil hacker man found

153
00:08:53,040 --> 00:08:56,599
the application

154
00:08:56,750 --> 00:09:09,540
so yeah okay yeah so it's under the

155
00:09:06,120 --> 00:09:14,430
address domain analytics org he found

156
00:09:09,540 --> 00:09:17,189
the application you can type the domain

157
00:09:14,430 --> 00:09:22,709
name or the IP address there and you

158
00:09:17,190 --> 00:09:26,190
will get the this security artifacts

159
00:09:22,709 --> 00:09:29,219
related with this particular domain so

160
00:09:26,190 --> 00:09:32,940
for example when you type the one of

161
00:09:29,220 --> 00:09:36,240
Polish government website you you find

162
00:09:32,940 --> 00:09:40,110
that it is it is registered in

163
00:09:36,240 --> 00:09:43,560
CloudFlare and it expired in 2017 so it

164
00:09:40,110 --> 00:09:45,720
was no it shouldn't be any surprise that

165
00:09:43,560 --> 00:09:48,268
in February of this year someone

166
00:09:45,720 --> 00:09:49,620
hijacked this domain and put

167
00:09:48,269 --> 00:09:54,209
pornographic where a pornographic

168
00:09:49,620 --> 00:09:57,720
country well as you can see there's

169
00:09:54,209 --> 00:10:00,449
there's the parameter domain and the

170
00:09:57,720 --> 00:10:05,100
domain name or the IP others what is

171
00:10:00,449 --> 00:10:08,729
more if you know the the IP address then

172
00:10:05,100 --> 00:10:11,600
you can check what sir what AWS service

173
00:10:08,730 --> 00:10:16,019
is using this address so for example

174
00:10:11,600 --> 00:10:19,560
here using the idea of AWS ec2 reach

175
00:10:16,019 --> 00:10:23,550
ability test you can find that actually

176
00:10:19,560 --> 00:10:29,219
this web application is running on this

177
00:10:23,550 --> 00:10:33,479
on the ec2 service so for for the evil

178
00:10:29,220 --> 00:10:38,570
hacker man it was enough to try find

179
00:10:33,480 --> 00:10:43,130
some vulnerabilities related with cloud

180
00:10:38,570 --> 00:10:46,709
so instead of giving the domain address

181
00:10:43,130 --> 00:10:49,680
he tried to put the metadata address

182
00:10:46,709 --> 00:10:54,439
because the source of the address was

183
00:10:49,680 --> 00:10:58,519
the instance not the attacker right and

184
00:10:54,440 --> 00:11:02,040
one by one carrying the the next

185
00:10:58,519 --> 00:11:07,500
endpoints of metadata he could get all

186
00:11:02,040 --> 00:11:09,510
those informations and so the

187
00:11:07,500 --> 00:11:13,680
vulnerability is called server-side

188
00:11:09,510 --> 00:11:20,670
quest forgery right and the SS RF or RC

189
00:11:13,680 --> 00:11:23,250
e in cloud have totally new life so he

190
00:11:20,670 --> 00:11:26,640
found that there's the easy to row and

191
00:11:23,250 --> 00:11:33,390
the easy to roll and get the credentials

192
00:11:26,640 --> 00:11:36,000
for the easy to roll now as I said for

193
00:11:33,390 --> 00:11:40,860
the attacker finding piece is just the

194
00:11:36,000 --> 00:11:42,960
beginning so to sum up he found in the

195
00:11:40,860 --> 00:11:45,780
web application which is hosted on ec2

196
00:11:42,960 --> 00:11:50,880
he found the SS are a vulnerability

197
00:11:45,780 --> 00:11:57,410
which allows him to get access keys from

198
00:11:50,880 --> 00:12:01,439
the metadata and this example wasn't

199
00:11:57,410 --> 00:12:03,390
it's not the lab example actually it

200
00:12:01,440 --> 00:12:05,970
happened in real life so there's this

201
00:12:03,390 --> 00:12:09,390
the website called Fred cloud dot org

202
00:12:05,970 --> 00:12:14,670
and indeed there is the domain parameter

203
00:12:09,390 --> 00:12:17,069
and the and the attacker put-put well

204
00:12:14,670 --> 00:12:21,180
the article the white hat Ithaca

205
00:12:17,070 --> 00:12:24,390
put the address of metadata and got all

206
00:12:21,180 --> 00:12:30,540
the metadata content so he reported it

207
00:12:24,390 --> 00:12:32,430
oh should be linked if anyone is

208
00:12:30,540 --> 00:12:33,810
interested later I I can share the

209
00:12:32,430 --> 00:12:34,229
presentation so there are all those

210
00:12:33,810 --> 00:12:36,900
links

211
00:12:34,230 --> 00:12:40,680
so here's should be the link to hacker

212
00:12:36,900 --> 00:12:44,790
one report and guess how the people from

213
00:12:40,680 --> 00:12:49,790
Fred crowd how they fix this issue any

214
00:12:44,790 --> 00:12:54,270
ideas indeed yeah Bravo

215
00:12:49,790 --> 00:12:58,439
they simply blacklisted these this IP

216
00:12:54,270 --> 00:13:00,510
address but well I think it's not

217
00:12:58,440 --> 00:13:03,150
nothing new for for the security guys

218
00:13:00,510 --> 00:13:06,270
that you can that the IP address can be

219
00:13:03,150 --> 00:13:09,840
represented not only in decimal form but

220
00:13:06,270 --> 00:13:14,670
you can also type it in in hexadecimal

221
00:13:09,840 --> 00:13:17,180
or binary and it will also work so he

222
00:13:14,670 --> 00:13:22,260
got two bounties on this on this bar

223
00:13:17,180 --> 00:13:23,270
well but going back to the story when

224
00:13:22,260 --> 00:13:26,480
the attacker

225
00:13:23,270 --> 00:13:29,810
gained the keys then there's a tool

226
00:13:26,480 --> 00:13:30,410
called Paco and it is AWS exploitation

227
00:13:29,810 --> 00:13:33,979
framework

228
00:13:30,410 --> 00:13:37,010
do you know Metasploit yeah so basically

229
00:13:33,980 --> 00:13:40,490
Paco is something like Metasploit but

230
00:13:37,010 --> 00:13:44,810
for cloud specifically for AWS so you

231
00:13:40,490 --> 00:13:46,940
have a lot of modules which are more

232
00:13:44,810 --> 00:13:49,250
modules which are attacks so you can

233
00:13:46,940 --> 00:13:52,670
just instead of typing everything from

234
00:13:49,250 --> 00:13:56,780
command line you can simply just run I

235
00:13:52,670 --> 00:14:01,130
will show you few examples and that will

236
00:13:56,780 --> 00:14:05,180
happen so quick demo of Paco it's

237
00:14:01,130 --> 00:14:06,890
written in Python 3 you can name the

238
00:14:05,180 --> 00:14:13,209
session so each session will be

239
00:14:06,890 --> 00:14:16,730
separated and the findings and yeah so

240
00:14:13,210 --> 00:14:19,130
you can you can list all the all the

241
00:14:16,730 --> 00:14:25,430
modules you can of course create your

242
00:14:19,130 --> 00:14:29,439
own and all the findings are stored in

243
00:14:25,430 --> 00:14:33,560
the data so instead to avoid having the

244
00:14:29,440 --> 00:14:37,580
mess on the console you can then you can

245
00:14:33,560 --> 00:14:41,209
refer to each finding and you can import

246
00:14:37,580 --> 00:14:44,060
the keys so you all the requests all the

247
00:14:41,210 --> 00:14:48,110
attacks will be done with the

248
00:14:44,060 --> 00:14:50,900
permissions of found keys so let's

249
00:14:48,110 --> 00:14:53,660
import the keys I name it it's an easy

250
00:14:50,900 --> 00:14:57,800
to pivot because you can import a

251
00:14:53,660 --> 00:15:03,680
several several key pairs in the same

252
00:14:57,800 --> 00:15:06,319
session yeah let's sense that there set

253
00:15:03,680 --> 00:15:08,959
the region because based on the IP

254
00:15:06,320 --> 00:15:12,140
address you know not not only that it is

255
00:15:08,960 --> 00:15:20,080
related with ec2 service but also which

256
00:15:12,140 --> 00:15:23,930
region is used and here's the list of of

257
00:15:20,080 --> 00:15:26,660
the modules so there are modules for

258
00:15:23,930 --> 00:15:31,910
enumeration there are separate modules

259
00:15:26,660 --> 00:15:35,030
for escalation as well as exploiting

260
00:15:31,910 --> 00:15:37,040
some misconfigurations

261
00:15:35,030 --> 00:15:43,160
it's not don't call it underbelly

262
00:15:37,040 --> 00:15:45,980
let's call it misconfigurations so using

263
00:15:43,160 --> 00:15:49,000
the PACU you can enumerate all

264
00:15:45,980 --> 00:15:51,829
permissions if your role allows you to

265
00:15:49,000 --> 00:15:54,620
however if you don't have enough

266
00:15:51,829 --> 00:15:57,649
permissions you can always brute force

267
00:15:54,620 --> 00:16:00,019
each comment and verify if you have the

268
00:15:57,649 --> 00:16:04,009
access to it or not

269
00:16:00,019 --> 00:16:07,880
in our example then the name is it to

270
00:16:04,009 --> 00:16:10,880
roll well it indicates that probably it

271
00:16:07,880 --> 00:16:14,540
will be related with visitor right and

272
00:16:10,880 --> 00:16:16,759
it is super common what would I see when

273
00:16:14,540 --> 00:16:19,490
I'm doing cloud security assessments it

274
00:16:16,759 --> 00:16:23,240
is super common the developers use this

275
00:16:19,490 --> 00:16:27,920
the wild card why because it always

276
00:16:23,240 --> 00:16:32,149
works so instead of give the granular

277
00:16:27,920 --> 00:16:35,149
permissions to each account it is much

278
00:16:32,149 --> 00:16:38,089
easier to put the wild card nobody

279
00:16:35,149 --> 00:16:42,829
nobody says anything it works right so

280
00:16:38,089 --> 00:16:49,550
it's doing the job however of course it

281
00:16:42,829 --> 00:16:50,979
is in 99% of use cases this is this is

282
00:16:49,550 --> 00:16:57,260
too much

283
00:16:50,980 --> 00:17:01,010
so in Paco there's the ec2 atom module

284
00:16:57,260 --> 00:17:04,400
for enumerated all the inter instances

285
00:17:01,010 --> 00:17:07,970
which are reachable for this particular

286
00:17:04,400 --> 00:17:11,720
access fees and then you can you can

287
00:17:07,970 --> 00:17:14,809
display all the data using data ec2 but

288
00:17:11,720 --> 00:17:18,679
I don't want to get you fall asleep with

289
00:17:14,809 --> 00:17:22,369
all this content so the most important

290
00:17:18,679 --> 00:17:26,209
findings during the enumeration was that

291
00:17:22,369 --> 00:17:29,928
there's one more instance which is

292
00:17:26,209 --> 00:17:33,020
stopped but this instance had the

293
00:17:29,929 --> 00:17:38,390
pre-attached profile admin instead of

294
00:17:33,020 --> 00:17:41,990
ec2 row so again it is pretty indicated

295
00:17:38,390 --> 00:17:47,110
that this this profile probably will be

296
00:17:41,990 --> 00:17:47,110
what the attacker should look for so

297
00:17:47,300 --> 00:17:54,230
we have the ec2 permissions but how can

298
00:17:50,810 --> 00:17:57,440
we access this instance it is stopped

299
00:17:54,230 --> 00:18:00,680
but even if we start it how can we

300
00:17:57,440 --> 00:18:05,560
access the admin profile if we don't

301
00:18:00,680 --> 00:18:05,560
have SSH keys there any ideas

302
00:18:09,010 --> 00:18:16,270
download the instance Oh

303
00:18:11,350 --> 00:18:28,219
III I don't think it's possible in AWS

304
00:18:16,270 --> 00:18:33,020
in the snapshot yeah but yes but then

305
00:18:28,220 --> 00:18:36,040
not only easy to permissions are enough

306
00:18:33,020 --> 00:18:39,830
because you need to have assumed role

307
00:18:36,040 --> 00:18:44,210
permission to give this admin profile

308
00:18:39,830 --> 00:18:48,530
permission there's a concept of user

309
00:18:44,210 --> 00:18:50,870
data in in ec2 so the concept is that

310
00:18:48,530 --> 00:18:56,060
you can specify a list of instructions

311
00:18:50,870 --> 00:18:59,989
that will will be executed on the on the

312
00:18:56,060 --> 00:19:03,879
boot time but the limitation is that all

313
00:18:59,990 --> 00:19:07,220
it will be run only once so for example

314
00:19:03,880 --> 00:19:09,890
you can specify there that once the

315
00:19:07,220 --> 00:19:13,570
instance will be booted then it will

316
00:19:09,890 --> 00:19:18,020
download all the newest newest code

317
00:19:13,570 --> 00:19:22,939
install some updates etc so pretty

318
00:19:18,020 --> 00:19:26,710
pretty pretty nice feature but of course

319
00:19:22,940 --> 00:19:29,990
attackers can can use it for themselves

320
00:19:26,710 --> 00:19:33,140
there's a nice trick in AWS that you can

321
00:19:29,990 --> 00:19:36,230
add the directive of cloud boot hook on

322
00:19:33,140 --> 00:19:39,950
the beginning of user data and if you do

323
00:19:36,230 --> 00:19:44,600
so then those user data will be executed

324
00:19:39,950 --> 00:19:48,560
every time the instance is restarted ok

325
00:19:44,600 --> 00:19:51,020
so if you change the user data and with

326
00:19:48,560 --> 00:19:54,649
easy to permissions you are allowed to

327
00:19:51,020 --> 00:19:56,420
modify the easy to attributes so user

328
00:19:54,650 --> 00:20:00,320
data too

329
00:19:56,420 --> 00:20:02,809
then you can simply put a reverse shell

330
00:20:00,320 --> 00:20:04,939
the Bosch one-liner without installing

331
00:20:02,809 --> 00:20:09,280
anything from from the external sources

332
00:20:04,940 --> 00:20:13,880
and here you are putting the Ithaca

333
00:20:09,280 --> 00:20:18,500
public IP address and here the the port

334
00:20:13,880 --> 00:20:22,690
number the port number on which you are

335
00:20:18,500 --> 00:20:25,850
listening for upcoming reverse shell so

336
00:20:22,690 --> 00:20:28,820
once again you are getting the ec2 role

337
00:20:25,850 --> 00:20:31,309
then using the ec2 role you are

338
00:20:28,820 --> 00:20:34,309
modifying the user data you are

339
00:20:31,309 --> 00:20:37,040
restarting machine and once the user

340
00:20:34,309 --> 00:20:42,260
data is executed you are getting reverse

341
00:20:37,040 --> 00:20:45,290
shell and you are king of the cloud so

342
00:20:42,260 --> 00:20:49,580
how does it work in practice in PACU

343
00:20:45,290 --> 00:20:51,530
there are just few clicks well so let's

344
00:20:49,580 --> 00:20:55,399
use the exploit which is called easy to

345
00:20:51,530 --> 00:20:58,399
startup shell script let's display the

346
00:20:55,400 --> 00:21:02,480
the help to see what parameters it

347
00:20:58,400 --> 00:21:05,780
should take so you are giving the script

348
00:21:02,480 --> 00:21:09,620
so to override you user data and the

349
00:21:05,780 --> 00:21:12,678
instance ID to know which which instance

350
00:21:09,620 --> 00:21:16,549
should be should have overwritten user

351
00:21:12,679 --> 00:21:20,030
data so in this terminal this is the

352
00:21:16,549 --> 00:21:22,790
attacker terminal so so there was

353
00:21:20,030 --> 00:21:26,660
displayed the IP address and this is the

354
00:21:22,790 --> 00:21:29,809
reverse shell which I want to override

355
00:21:26,660 --> 00:21:35,030
with user data now I'm setting the

356
00:21:29,809 --> 00:21:38,299
listening port and in other terminal

357
00:21:35,030 --> 00:21:42,590
also on the attacker side where you have

358
00:21:38,299 --> 00:21:46,639
the PACU session you are simply running

359
00:21:42,590 --> 00:21:50,000
this module with the ref shell script

360
00:21:46,640 --> 00:21:53,210
and related with this instance on this

361
00:21:50,000 --> 00:21:56,540
region so what you see is that the

362
00:21:53,210 --> 00:21:58,760
instance is stopped the user data is

363
00:21:56,540 --> 00:22:01,040
modified because the user data can be

364
00:21:58,760 --> 00:22:03,650
modified only when the instance is

365
00:22:01,040 --> 00:22:05,750
stopped and then you are starting in D

366
00:22:03,650 --> 00:22:08,630
and because of the cloud would hook

367
00:22:05,750 --> 00:22:12,460
directive the user data will be executed

368
00:22:08,630 --> 00:22:16,810
so here you can see

369
00:22:12,460 --> 00:22:20,140
that we are awaiting the the instance is

370
00:22:16,810 --> 00:22:25,960
starting not not so fast those who work

371
00:22:20,140 --> 00:22:28,600
with with iws know it so you have we

372
00:22:25,960 --> 00:22:32,950
have to give it a little bit time but

373
00:22:28,600 --> 00:22:35,709
then bound we have it so we regain the

374
00:22:32,950 --> 00:22:39,400
reverse shell and now again using the

375
00:22:35,710 --> 00:22:41,920
same trick of accessing the metadata we

376
00:22:39,400 --> 00:22:47,800
are getting credentials but this time of

377
00:22:41,920 --> 00:22:49,420
the admin profile is it the end of the

378
00:22:47,800 --> 00:22:52,149
cyber kill chain of getting the

379
00:22:49,420 --> 00:22:56,770
administrator who thinks that yes please

380
00:22:52,150 --> 00:22:59,200
raise your hand indeed good good that

381
00:22:56,770 --> 00:23:02,440
the just the beginning so what the

382
00:22:59,200 --> 00:23:08,830
article wants is to remove his his

383
00:23:02,440 --> 00:23:10,570
fingerprints right in AWS there's the

384
00:23:08,830 --> 00:23:12,490
cloud training service which is

385
00:23:10,570 --> 00:23:15,340
responsible for monitoring all the

386
00:23:12,490 --> 00:23:17,860
regions and all the API calls so

387
00:23:15,340 --> 00:23:21,580
whatever your developer whatever he will

388
00:23:17,860 --> 00:23:25,330
do it will be monitored by cloud trail

389
00:23:21,580 --> 00:23:29,800
and it will land in the s3 bucket in

390
00:23:25,330 --> 00:23:33,280
lakhs but the attacker with the

391
00:23:29,800 --> 00:23:36,250
administrator permissions can change a

392
00:23:33,280 --> 00:23:38,889
little bit some flags so for example

393
00:23:36,250 --> 00:23:42,730
only the cloud trail will be monitoring

394
00:23:38,890 --> 00:23:45,930
only one region and if you do in for

395
00:23:42,730 --> 00:23:49,480
example if you setup the crypto mining

396
00:23:45,930 --> 00:23:52,240
the cryptocurrency miners in all of the

397
00:23:49,480 --> 00:23:54,520
other regions they will be not notified

398
00:23:52,240 --> 00:23:59,470
only when the invoice come from the

399
00:23:54,520 --> 00:24:02,320
Amazon of course you can destroy the as

400
00:23:59,470 --> 00:24:06,820
free bucket or destroy the trail but

401
00:24:02,320 --> 00:24:09,850
then it is it is too loud because most

402
00:24:06,820 --> 00:24:14,460
likely they will get notifications that

403
00:24:09,850 --> 00:24:19,770
something doesn't work in Paco we have

404
00:24:14,460 --> 00:24:22,780
again the the special module to

405
00:24:19,770 --> 00:24:24,760
enumerate all the monitoring services so

406
00:24:22,780 --> 00:24:25,899
not only cloud trail but also cloud

407
00:24:24,760 --> 00:24:29,590
watch guard duty

408
00:24:25,900 --> 00:24:32,620
cetera and as you can see there are

409
00:24:29,590 --> 00:24:37,110
flags like include global services like

410
00:24:32,620 --> 00:24:40,840
creating a new user so by default it is

411
00:24:37,110 --> 00:24:44,889
it is true is set to true the logs are

412
00:24:40,840 --> 00:24:47,830
validated so if you destroy any logs it

413
00:24:44,890 --> 00:24:52,360
will be detected by the cloud ring but

414
00:24:47,830 --> 00:24:53,980
using but using PACU you can minimize

415
00:24:52,360 --> 00:24:56,820
the cloud trail

416
00:24:53,980 --> 00:24:59,470
what means you will change those flags

417
00:24:56,820 --> 00:25:03,310
include include global service events

418
00:24:59,470 --> 00:25:07,000
polls its multi-regional false so only

419
00:25:03,310 --> 00:25:09,820
the US one will be monitored and in any

420
00:25:07,000 --> 00:25:14,950
other region you can do whatever you

421
00:25:09,820 --> 00:25:18,520
want now that's still not the end of the

422
00:25:14,950 --> 00:25:22,180
of the cyber kill chain because now you

423
00:25:18,520 --> 00:25:25,120
as an ethical you need to have some

424
00:25:22,180 --> 00:25:28,660
backdoor of course you can keep the

425
00:25:25,120 --> 00:25:32,560
backdoor in user data but it's well it's

426
00:25:28,660 --> 00:25:34,180
you shouldn't rely on it because if the

427
00:25:32,560 --> 00:25:37,090
instance will be destroyed and your

428
00:25:34,180 --> 00:25:41,770
backdoor to another obtain another

429
00:25:37,090 --> 00:25:44,169
approach to set a backdoor is to use the

430
00:25:41,770 --> 00:25:47,350
lambda for example it companies they are

431
00:25:44,170 --> 00:25:49,870
using a lot of lambdas from my

432
00:25:47,350 --> 00:25:53,320
experience it seems nobody is monitoring

433
00:25:49,870 --> 00:25:55,689
if new lambda is appearing and nobody

434
00:25:53,320 --> 00:25:57,939
gives a how it is called if they

435
00:25:55,690 --> 00:26:01,360
are if they are called pretty the same

436
00:25:57,940 --> 00:26:03,700
then nobody nobody looks on it

437
00:26:01,360 --> 00:26:06,370
and if you create lambda that for

438
00:26:03,700 --> 00:26:09,790
example some even happen then then

439
00:26:06,370 --> 00:26:12,189
lambda will be triggered and for example

440
00:26:09,790 --> 00:26:15,610
create a new user for you and then you

441
00:26:12,190 --> 00:26:20,170
have access to them infrastructure even

442
00:26:15,610 --> 00:26:24,659
better idea is using trusting policy the

443
00:26:20,170 --> 00:26:28,270
access in AWS is built on policies and

444
00:26:24,660 --> 00:26:30,610
trust me or not but not not many people

445
00:26:28,270 --> 00:26:35,500
are reading policies they are pretty

446
00:26:30,610 --> 00:26:38,290
boring documents so once they are set up

447
00:26:35,500 --> 00:26:39,639
nobody is verifying if they're if they

448
00:26:38,290 --> 00:26:42,340
are changed

449
00:26:39,639 --> 00:26:45,939
and you can use for example trust policy

450
00:26:42,340 --> 00:26:49,090
so odd if there is a policy of role of

451
00:26:45,940 --> 00:26:52,029
admin you can give the permission that

452
00:26:49,090 --> 00:26:55,509
this role can be assumed by totally

453
00:26:52,029 --> 00:26:57,610
other account so for example you're the

454
00:26:55,509 --> 00:27:00,309
attackers account so the articles

455
00:26:57,610 --> 00:27:02,830
account can just type SDS assume role

456
00:27:00,309 --> 00:27:06,999
and gain the admin to your

457
00:27:02,830 --> 00:27:11,139
infrastructure another idea is to create

458
00:27:06,999 --> 00:27:14,409
an additional Keepers now question to

459
00:27:11,139 --> 00:27:18,869
you how many keepers can be created to

460
00:27:14,409 --> 00:27:29,499
one identity and access management user

461
00:27:18,869 --> 00:27:32,830
how many unlimited No - yeah so the idea

462
00:27:29,499 --> 00:27:36,999
behind it is that when you are running

463
00:27:32,830 --> 00:27:39,460
some service and it uses keys then for

464
00:27:36,999 --> 00:27:41,950
example those keys are compromised so

465
00:27:39,460 --> 00:27:44,320
you want to change them which is well

466
00:27:41,950 --> 00:27:47,799
what is called rotation T rotation and

467
00:27:44,320 --> 00:27:50,259
if you want to rotate the keys in the if

468
00:27:47,799 --> 00:27:54,399
it would be possible to set only one

469
00:27:50,259 --> 00:27:57,279
keeper then you you should stop stop the

470
00:27:54,399 --> 00:27:59,699
service for the moment of changing but

471
00:27:57,279 --> 00:28:02,679
if you have two keepers then you can

472
00:27:59,700 --> 00:28:05,289
which which were the same then you can

473
00:28:02,679 --> 00:28:07,809
put there and then destroy the first

474
00:28:05,289 --> 00:28:13,749
keys and the service is continuously

475
00:28:07,809 --> 00:28:16,389
running so again in PACU you have has a

476
00:28:13,749 --> 00:28:19,960
separate module for it so you can use

477
00:28:16,389 --> 00:28:25,559
just putting around I am back door user

478
00:28:19,960 --> 00:28:30,070
keys and then extra keys are added to

479
00:28:25,559 --> 00:28:33,940
every user and there's no absolutely no

480
00:28:30,070 --> 00:28:37,480
notification that your user has extra

481
00:28:33,940 --> 00:28:39,940
keys and even in the dashboard there is

482
00:28:37,480 --> 00:28:43,119
no notification this is the identity and

483
00:28:39,940 --> 00:28:48,169
access management dashboard and there's

484
00:28:43,119 --> 00:28:52,129
a column access key H and when you see

485
00:28:48,169 --> 00:28:56,809
that this user has the five-day access

486
00:28:52,129 --> 00:28:58,908
key right yeah well pretty okay it even

487
00:28:56,809 --> 00:29:01,999
has the multi-factor authentication so

488
00:28:58,909 --> 00:29:04,100
the beginning beginner administrator

489
00:29:01,999 --> 00:29:06,470
thinks everything's okay

490
00:29:04,100 --> 00:29:08,840
but later in the security credential

491
00:29:06,470 --> 00:29:14,029
stop you can see that there are two

492
00:29:08,840 --> 00:29:19,580
keepers and the five days is regarding

493
00:29:14,029 --> 00:29:22,759
the older keys right so nobody sees that

494
00:29:19,580 --> 00:29:25,759
there are two additional keepers for

495
00:29:22,759 --> 00:29:28,220
this particular user and the

496
00:29:25,759 --> 00:29:31,039
multi-factor authentication is usually

497
00:29:28,220 --> 00:29:32,539
for just for console access if you want

498
00:29:31,039 --> 00:29:35,658
to use the multi-factor authentication

499
00:29:32,539 --> 00:29:39,679
also for programmatic access using keys

500
00:29:35,659 --> 00:29:43,070
then it need it requires the special

501
00:29:39,679 --> 00:29:47,330
policy which will deny any action if

502
00:29:43,070 --> 00:29:49,059
there is no easy - if there is no

503
00:29:47,330 --> 00:29:54,649
multi-factor authentication enabled

504
00:29:49,059 --> 00:29:58,070
which is pretty rare so how the story

505
00:29:54,649 --> 00:30:01,369
could end that's I'm living it to your

506
00:29:58,070 --> 00:30:04,100
imagination but there was one story

507
00:30:01,369 --> 00:30:07,970
there was a company called cold spaces

508
00:30:04,100 --> 00:30:12,498
have you ever heard about it in 2013 it

509
00:30:07,970 --> 00:30:15,859
was the raising alternative to github

510
00:30:12,499 --> 00:30:18,529
now nobody remember this company and I

511
00:30:15,859 --> 00:30:21,739
tell you I because the they put

512
00:30:18,529 --> 00:30:24,830
everything all the infrastructure on AWS

513
00:30:21,739 --> 00:30:27,139
they didn't have any infrastructure on

514
00:30:24,830 --> 00:30:31,100
their local servers everything was in

515
00:30:27,139 --> 00:30:35,719
cloud let's go to cloud right and then

516
00:30:31,100 --> 00:30:38,719
the root accounts were compromised and

517
00:30:35,720 --> 00:30:41,570
the guy the attacker told them either

518
00:30:38,720 --> 00:30:45,230
you will give me money or or you will

519
00:30:41,570 --> 00:30:48,580
regret not giving me the money and they

520
00:30:45,230 --> 00:30:51,679
check the logs and they really find this

521
00:30:48,580 --> 00:30:55,369
compromised account so they removed this

522
00:30:51,679 --> 00:30:58,129
account and say now now what and of

523
00:30:55,369 --> 00:31:00,889
course he had the backdoor and in

524
00:30:58,129 --> 00:31:01,340
revenge he destroyed all the resources

525
00:31:00,889 --> 00:31:03,979
they

526
00:31:01,340 --> 00:31:06,139
hat and of course they they have even

527
00:31:03,980 --> 00:31:09,380
the backups they they have under the

528
00:31:06,140 --> 00:31:14,120
same AWS account so the company stopped

529
00:31:09,380 --> 00:31:18,080
existing in just one day well but could

530
00:31:14,120 --> 00:31:24,560
we can we prevent such attacks of course

531
00:31:18,080 --> 00:31:27,800
we can so the the first concept is the

532
00:31:24,560 --> 00:31:32,780
locking dynamically lock the credentials

533
00:31:27,800 --> 00:31:38,740
from metadata so only the using the

534
00:31:32,780 --> 00:31:42,440
metadata proxy you can you it will be

535
00:31:38,740 --> 00:31:45,440
injecting the session policy with the

536
00:31:42,440 --> 00:31:48,760
limitation that to metadata that the

537
00:31:45,440 --> 00:31:52,580
method metadata can be accessed only by

538
00:31:48,760 --> 00:31:57,590
this instance with IP of this instance

539
00:31:52,580 --> 00:32:01,159
as well as the VPC ID in which this

540
00:31:57,590 --> 00:32:03,189
instance is run so even if there's the

541
00:32:01,160 --> 00:32:05,050
server site request forgery

542
00:32:03,190 --> 00:32:10,000
vulnerability in your web application

543
00:32:05,050 --> 00:32:13,970
nobody can do anything with those keys

544
00:32:10,000 --> 00:32:16,700
funny fact about this is that the author

545
00:32:13,970 --> 00:32:20,660
of this solution is the William Banting

546
00:32:16,700 --> 00:32:23,000
Tom do you know this guy his does the

547
00:32:20,660 --> 00:32:27,380
security he was the security guy from

548
00:32:23,000 --> 00:32:31,190
the Netflix and then he became the cloud

549
00:32:27,380 --> 00:32:34,910
security director in Capital One and two

550
00:32:31,190 --> 00:32:37,690
months after he gained this position

551
00:32:34,910 --> 00:32:42,760
there was the one of the biggest breach

552
00:32:37,690 --> 00:32:44,930
in Capital One and someone find the

553
00:32:42,760 --> 00:32:47,570
vulnerability the server side request

554
00:32:44,930 --> 00:32:50,900
forgery vulnerability gained the keys

555
00:32:47,570 --> 00:32:55,939
with the simple with the s free service

556
00:32:50,900 --> 00:32:59,710
access and she just dumped all the data

557
00:32:55,940 --> 00:33:03,620
from the Capital One free months later

558
00:32:59,710 --> 00:33:05,810
someone someone detected the attack only

559
00:33:03,620 --> 00:33:11,179
because the data was already published

560
00:33:05,810 --> 00:33:13,550
so there was absolutely no monitoring of

561
00:33:11,180 --> 00:33:14,780
such anomalies that someone is listing

562
00:33:13,550 --> 00:33:18,470
700 bucks

563
00:33:14,780 --> 00:33:23,840
and then dumping all the content so yeah

564
00:33:18,470 --> 00:33:27,200
think about it to the next the next

565
00:33:23,840 --> 00:33:30,080
thing you can do is using the AWS

566
00:33:27,200 --> 00:33:33,200
organization and either allows you to

567
00:33:30,080 --> 00:33:37,399
separate accounts so the best practice

568
00:33:33,200 --> 00:33:41,600
is to use at least free accounts under

569
00:33:37,400 --> 00:33:44,480
one organization and for example if your

570
00:33:41,600 --> 00:33:47,809
developers needs only access to ec2 or

571
00:33:44,480 --> 00:33:51,020
as free service you can limit the access

572
00:33:47,809 --> 00:33:55,970
to any other service using the service

573
00:33:51,020 --> 00:33:58,940
control policies the SCP so now even

574
00:33:55,970 --> 00:34:01,580
even if they become any any of your

575
00:33:58,940 --> 00:34:08,090
developer become the administrator he

576
00:34:01,580 --> 00:34:11,598
can do he cannot hurt you much all the

577
00:34:08,090 --> 00:34:14,330
logs are going by the cross cross

578
00:34:11,599 --> 00:34:17,440
account app replication is going to the

579
00:34:14,330 --> 00:34:21,080
logs which are stored under second

580
00:34:17,440 --> 00:34:27,550
security or auditor account and then you

581
00:34:21,080 --> 00:34:31,159
can you can do nothing with logs again

582
00:34:27,550 --> 00:34:34,099
the next thing you can do is there there

583
00:34:31,159 --> 00:34:37,700
is the AWS Center for information

584
00:34:34,099 --> 00:34:40,040
security foundations benchmark which is

585
00:34:37,699 --> 00:34:42,879
generally the list of best practices you

586
00:34:40,040 --> 00:34:46,609
should follow so for example there are

587
00:34:42,879 --> 00:34:49,940
the such such things like do not use

588
00:34:46,609 --> 00:34:53,869
wildcards do not open security groups

589
00:34:49,940 --> 00:34:56,060
for public access etc and you can you

590
00:34:53,869 --> 00:34:57,830
can check it automatically there are

591
00:34:56,060 --> 00:35:01,460
tools if you are interested I can give

592
00:34:57,830 --> 00:35:04,220
you some you can just automatically

593
00:35:01,460 --> 00:35:08,450
check what is the configuration of your

594
00:35:04,220 --> 00:35:11,569
account and the final thing you you can

595
00:35:08,450 --> 00:35:15,470
do is set up monitoring so if anything

596
00:35:11,570 --> 00:35:19,250
bad is happening then you should have

597
00:35:15,470 --> 00:35:22,399
the automated incident response that

598
00:35:19,250 --> 00:35:27,020
will block the account that will notify

599
00:35:22,400 --> 00:35:28,490
your incident response team etc now can

600
00:35:27,020 --> 00:35:31,190
we can we detect

601
00:35:28,490 --> 00:35:34,009
such issues so in the cloud security

602
00:35:31,190 --> 00:35:37,400
assessment I think we should follow the

603
00:35:34,010 --> 00:35:41,360
at least those four steps which is the

604
00:35:37,400 --> 00:35:44,210
first is the architecture review so

605
00:35:41,360 --> 00:35:47,000
verifying the the best practices in the

606
00:35:44,210 --> 00:35:50,660
design so if you are using the AWS

607
00:35:47,000 --> 00:35:53,680
organization if there is the the proper

608
00:35:50,660 --> 00:35:58,490
separation if there is possible that

609
00:35:53,680 --> 00:36:00,529
privilege escalation paths etc next

610
00:35:58,490 --> 00:36:03,830
thing is the configuration review so

611
00:36:00,530 --> 00:36:08,690
verifying if your infrastructure is

612
00:36:03,830 --> 00:36:12,590
actually compliant with the system AWS

613
00:36:08,690 --> 00:36:18,020
sees plantations benchmark and the

614
00:36:12,590 --> 00:36:22,070
separate the separate step during this

615
00:36:18,020 --> 00:36:24,200
process should be verifying the security

616
00:36:22,070 --> 00:36:28,760
of the sensitive services like the

617
00:36:24,200 --> 00:36:33,140
lambda so there's a totally new attack

618
00:36:28,760 --> 00:36:36,470
vector like even injection verifying

619
00:36:33,140 --> 00:36:38,980
code of lambda verifying the security of

620
00:36:36,470 --> 00:36:41,810
applications which are running on our

621
00:36:38,980 --> 00:36:44,359
infrastructure and the final thing is

622
00:36:41,810 --> 00:36:47,869
verifying monitoring even if you if you

623
00:36:44,359 --> 00:36:49,940
have deployed all the security mechanism

624
00:36:47,869 --> 00:36:52,760
in your account and you don't have

625
00:36:49,940 --> 00:36:55,130
proper monitoring you shouldn't feel

626
00:36:52,760 --> 00:36:58,790
secure so for example let's take again

627
00:36:55,130 --> 00:37:02,000
the Capital One I'm totally sure that

628
00:36:58,790 --> 00:37:05,650
there was there was a count which had

629
00:37:02,000 --> 00:37:09,830
the access to the to do all those

630
00:37:05,650 --> 00:37:12,290
content of the buckets but this this guy

631
00:37:09,830 --> 00:37:15,730
can you know can change change his mind

632
00:37:12,290 --> 00:37:20,180
that he want to gain some extra money

633
00:37:15,730 --> 00:37:22,550
whatever his motivation is but it should

634
00:37:20,180 --> 00:37:25,490
be detected it should be detected that

635
00:37:22,550 --> 00:37:29,000
one of your employee consciously or or

636
00:37:25,490 --> 00:37:36,649
not is getting all your sensitive data

637
00:37:29,000 --> 00:37:39,040
right so to sum up remember about

638
00:37:36,650 --> 00:37:42,210
auditing your cloud infrastructure

639
00:37:39,040 --> 00:37:44,490
verified harden it

640
00:37:42,210 --> 00:37:46,530
and then repeat so it's remember it's

641
00:37:44,490 --> 00:37:49,799
like the continuous process it's not

642
00:37:46,530 --> 00:37:54,660
like verifying well once it's done then

643
00:37:49,800 --> 00:37:57,950
okay the best approach is to automate

644
00:37:54,660 --> 00:38:02,009
this process so if you using for example

645
00:37:57,950 --> 00:38:07,140
AWS config that if any change is done

646
00:38:02,010 --> 00:38:09,810
then it is verified now and if something

647
00:38:07,140 --> 00:38:14,390
is not compliant with your own policies

648
00:38:09,810 --> 00:38:19,170
then it is reverted back to the write

649
00:38:14,390 --> 00:38:23,700
status so to give you in the end to give

650
00:38:19,170 --> 00:38:27,900
you some some materials here is my guide

651
00:38:23,700 --> 00:38:32,129
with some of the best practices in aw

652
00:38:27,900 --> 00:38:36,359
yes of course it's free it's like 11

653
00:38:32,130 --> 00:38:40,200
pages so not not big guide but there are

654
00:38:36,359 --> 00:38:44,910
the most important ones and also if you

655
00:38:40,200 --> 00:38:48,839
want to play as a hacker the I prefer

656
00:38:44,910 --> 00:38:54,089
the capture the flag game which is built

657
00:38:48,839 --> 00:38:56,220
on our company infrastructure so there's

658
00:38:54,089 --> 00:38:58,710
also the walkthrough if you have any any

659
00:38:56,220 --> 00:39:01,379
problems but also you can you can play

660
00:38:58,710 --> 00:39:04,920
and feel as an as a hacker if you want

661
00:39:01,380 --> 00:39:07,260
to have more open source materials to

662
00:39:04,920 --> 00:39:10,770
learn from the orphans security

663
00:39:07,260 --> 00:39:14,780
perspective just just let me know drop

664
00:39:10,770 --> 00:39:17,730
me a mail and I will share it all so

665
00:39:14,780 --> 00:39:20,190
that's all from my side thank you very

666
00:39:17,730 --> 00:39:35,700
much for your attention and do you have

667
00:39:20,190 --> 00:39:39,170
any questions yeah yeah yeah so for

668
00:39:35,700 --> 00:39:44,040
example in lambda lambda is triggered

669
00:39:39,170 --> 00:39:46,619
lambda is triggered by events and for

670
00:39:44,040 --> 00:39:51,330
example one way of privilege escalation

671
00:39:46,619 --> 00:39:56,769
if you are using the managed the Amazon

672
00:39:51,330 --> 00:39:59,078
managed permissions there's a database

673
00:39:56,769 --> 00:40:03,368
the database policy which gives you

674
00:39:59,079 --> 00:40:06,220
permissions only to create lamda but not

675
00:40:03,369 --> 00:40:08,529
to trigger it so you can create a create

676
00:40:06,220 --> 00:40:10,660
any kind of lamda but you are not

677
00:40:08,529 --> 00:40:13,240
allowed to trigger it but using the

678
00:40:10,660 --> 00:40:17,740
event injection you can create lamda

679
00:40:13,240 --> 00:40:19,749
that it will be triggered by the evil by

680
00:40:17,740 --> 00:40:22,808
the even so for example you are creating

681
00:40:19,749 --> 00:40:25,808
the database and you are creating the

682
00:40:22,809 --> 00:40:28,749
event of appearing and entry in this

683
00:40:25,809 --> 00:40:32,079
database so you are allowed to create

684
00:40:28,749 --> 00:40:35,470
the database you are allowed to put the

685
00:40:32,079 --> 00:40:38,730
entry there and it will be this will be

686
00:40:35,470 --> 00:40:41,709
the trigger of lamda which will be

687
00:40:38,730 --> 00:40:45,099
executed even you don't have the

688
00:40:41,710 --> 00:40:48,099
permissions to do it but using those

689
00:40:45,099 --> 00:40:53,849
those events you can another example is

690
00:40:48,099 --> 00:40:58,869
for example the lamda code is taking the

691
00:40:53,849 --> 00:41:04,390
name of the of the s free object and put

692
00:40:58,869 --> 00:41:08,529
it in the SQL statement so the you can

693
00:41:04,390 --> 00:41:12,549
name the object with the cql injection

694
00:41:08,529 --> 00:41:15,549
and it will be triggered yeah examples

695
00:41:12,549 --> 00:41:20,019
like this lambda is very often used for

696
00:41:15,549 --> 00:41:22,749
the PDF generation or the picture some

697
00:41:20,019 --> 00:41:27,249
modification of picture and very often

698
00:41:22,749 --> 00:41:30,339
this cult was never analyzed from the

699
00:41:27,249 --> 00:41:42,598
security perspective and the other

700
00:41:30,339 --> 00:41:42,599
questions yeah mm-hmm there are yes

701
00:41:43,019 --> 00:41:49,450
there are even the native ada Amazon

702
00:41:46,170 --> 00:41:51,940
solutions so the now currently the best

703
00:41:49,450 --> 00:41:55,419
practice the Amazon says is using the

704
00:41:51,940 --> 00:41:58,900
security hub because there is no one

705
00:41:55,420 --> 00:42:01,180
service of monitoring older security

706
00:41:58,900 --> 00:42:03,700
even so you should have guard duty you

707
00:42:01,180 --> 00:42:08,169
should have AWS config you should have

708
00:42:03,700 --> 00:42:08,890
an AWS inspector you should have AWS may

709
00:42:08,170 --> 00:42:13,000
see you

710
00:42:08,890 --> 00:42:16,330
you should have other services and they

711
00:42:13,000 --> 00:42:19,270
found that actually there are pretty

712
00:42:16,330 --> 00:42:22,090
much of those services so how to monitor

713
00:42:19,270 --> 00:42:24,040
them so they created another service

714
00:42:22,090 --> 00:42:26,560
which is called the security hub to

715
00:42:24,040 --> 00:42:30,730
aggregate all those logs and then you

716
00:42:26,560 --> 00:42:34,240
can for example simply plug the ECM

717
00:42:30,730 --> 00:42:37,240
system so whatever incident response you

718
00:42:34,240 --> 00:42:39,370
are using in your company of course you

719
00:42:37,240 --> 00:42:43,359
can create your own for example

720
00:42:39,370 --> 00:42:46,120
regarding the C's benchmark in just few

721
00:42:43,360 --> 00:42:49,720
clicks you can create a template in

722
00:42:46,120 --> 00:42:53,500
cloud formation and you can deploy it so

723
00:42:49,720 --> 00:42:56,470
all the AWS config rules will be

724
00:42:53,500 --> 00:43:00,640
deployed regarding the sis benchmark and

725
00:42:56,470 --> 00:43:04,209
if any of your developer will for

726
00:43:00,640 --> 00:43:06,850
example put the security group open to

727
00:43:04,210 --> 00:43:08,860
public access you will be notified now

728
00:43:06,850 --> 00:43:14,339
and you can for example like get

729
00:43:08,860 --> 00:43:14,340
notification on SMS mail whatever yeah

730
00:43:22,080 --> 00:43:31,270
well I'm not the expert in Asia and GCP

731
00:43:26,980 --> 00:43:34,840
I will be honest with you however there

732
00:43:31,270 --> 00:43:38,740
are some drawbacks to because it is

733
00:43:34,840 --> 00:43:41,440
related with the human factor because

734
00:43:38,740 --> 00:43:44,200
it's easier to setup the insecure

735
00:43:41,440 --> 00:43:48,730
environment however regarding the server

736
00:43:44,200 --> 00:43:51,220
side request forgery in GCP and asia it

737
00:43:48,730 --> 00:43:54,250
is not so easy because you have to add

738
00:43:51,220 --> 00:43:57,810
the special secret value in the header

739
00:43:54,250 --> 00:44:01,090
and in amazon you don't have to so

740
00:43:57,810 --> 00:44:05,080
vulnerable is like this work like a

741
00:44:01,090 --> 00:44:07,870
charm and in asia on GCP it's it's not

742
00:44:05,080 --> 00:44:11,650
so not so easy however still if you have

743
00:44:07,870 --> 00:44:15,900
some kind of remote code execution you

744
00:44:11,650 --> 00:44:15,900
can do exactly the same yes

745
00:44:32,670 --> 00:44:40,799
and I don't I don't think so it will be

746
00:44:36,180 --> 00:44:42,868
changed it's like because Amazon doesn't

747
00:44:40,799 --> 00:44:46,099
see vulnerabilities in all of these

748
00:44:42,869 --> 00:44:49,980
things so for example user data and

749
00:44:46,099 --> 00:44:51,210
cloud bootloop directive they can be

750
00:44:49,980 --> 00:44:53,730
used by Attica

751
00:44:51,210 --> 00:44:56,279
but the problem is Amazon always will

752
00:44:53,730 --> 00:45:00,599
tell you that well those guys have

753
00:44:56,279 --> 00:45:04,710
access to your to your infrastructure

754
00:45:00,599 --> 00:45:09,690
and they are using the features so you

755
00:45:04,710 --> 00:45:12,720
know they don't see a problem here there

756
00:45:09,690 --> 00:45:16,920
are a lot of nuances security nuances so

757
00:45:12,720 --> 00:45:20,220
for example the the phishing attacks on

758
00:45:16,920 --> 00:45:22,200
the on the Amazon this is awesome and I

759
00:45:20,220 --> 00:45:24,328
don't know why Amazon is not doing

760
00:45:22,200 --> 00:45:28,049
anything because if you click they

761
00:45:24,329 --> 00:45:32,670
remember me when you are login to the

762
00:45:28,049 --> 00:45:36,839
AWS console then this persist cookie

763
00:45:32,670 --> 00:45:41,069
will be this will also work even if you

764
00:45:36,839 --> 00:45:44,099
change the password right which doesn't

765
00:45:41,069 --> 00:45:46,410
make sense because hey I got compromised

766
00:45:44,099 --> 00:45:54,210
and the article hey I don't care because

767
00:45:46,410 --> 00:45:55,879
the persist cookie still work yeah thank

768
00:45:54,210 --> 00:45:59,789
you very much enjoyed even

769
00:45:55,880 --> 00:45:59,789
[Applause]

