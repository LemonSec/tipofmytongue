1
00:00:00,530 --> 00:00:02,590
you

2
00:00:02,840 --> 00:00:06,870
thank you very much for being here and

3
00:00:04,980 --> 00:00:07,830
they participate in my presentation I

4
00:00:06,870 --> 00:00:09,780
know that there are many other

5
00:00:07,830 --> 00:00:12,090
interesting presentation at the same

6
00:00:09,780 --> 00:00:14,430
time so I really appreciate for you to

7
00:00:12,090 --> 00:00:17,250
participate in this presentation but as

8
00:00:14,430 --> 00:00:19,800
a disclaimer this is my first

9
00:00:17,250 --> 00:00:22,560
presentation outside of my workplace so

10
00:00:19,800 --> 00:00:24,700
I'm sorry if I'm bit nervous or if I

11
00:00:22,560 --> 00:00:26,089
will make any mistakes along the way

12
00:00:24,700 --> 00:00:30,589
[Music]

13
00:00:26,089 --> 00:00:33,540
so let's done so my name is Vinod I

14
00:00:30,589 --> 00:00:36,030
think that's that's only we need to know

15
00:00:33,540 --> 00:00:38,460
at this moment for this presentation but

16
00:00:36,030 --> 00:00:41,010
I'm going to talk more about identity

17
00:00:38,460 --> 00:00:43,410
and access management so before jumping

18
00:00:41,010 --> 00:00:45,449
into more details about identity and

19
00:00:43,410 --> 00:00:47,699
access management I want to make sure

20
00:00:45,450 --> 00:00:50,310
that we all are on the same page with

21
00:00:47,700 --> 00:00:52,020
the three terminologies which is very

22
00:00:50,310 --> 00:00:54,680
important otherwise you may not get this

23
00:00:52,020 --> 00:00:59,280
in their presentation the first one is

24
00:00:54,680 --> 00:01:02,550
identity what is identity identities

25
00:00:59,280 --> 00:01:06,870
have not rebuked our set of attributes

26
00:01:02,550 --> 00:01:08,039
that uniquely describe a subject within

27
00:01:06,870 --> 00:01:10,980
a given context

28
00:01:08,040 --> 00:01:12,630
so the uniqueness is very important so

29
00:01:10,980 --> 00:01:15,300
if the attribute or set of attributes

30
00:01:12,630 --> 00:01:18,539
cannot uniquely describe you shouldn't

31
00:01:15,300 --> 00:01:21,570
be using that as an identity as an

32
00:01:18,540 --> 00:01:23,490
example you know your passport is an

33
00:01:21,570 --> 00:01:25,979
identity document and you may have a

34
00:01:23,490 --> 00:01:29,070
passport number and name that uniquely

35
00:01:25,980 --> 00:01:32,159
describe you for that particular

36
00:01:29,070 --> 00:01:36,360
identity document the next one is

37
00:01:32,159 --> 00:01:37,740
authentication its little confusing even

38
00:01:36,360 --> 00:01:39,780
in the Security devaron what is

39
00:01:37,740 --> 00:01:41,880
authentication and what is authorization

40
00:01:39,780 --> 00:01:44,700
so then the question is the process of

41
00:01:41,880 --> 00:01:49,020
verifying the identity so that's in

42
00:01:44,700 --> 00:01:51,150
simplicity this it may be the identity

43
00:01:49,020 --> 00:01:52,920
of a user it can be identity of a

44
00:01:51,150 --> 00:01:54,870
process or it can be identity of a

45
00:01:52,920 --> 00:01:58,680
device so then occasionally as simple as

46
00:01:54,870 --> 00:02:01,020
it's a process of verifying identity

47
00:01:58,680 --> 00:02:03,540
that's an example if you will take your

48
00:02:01,020 --> 00:02:06,330
a passport an immigration officer he

49
00:02:03,540 --> 00:02:07,590
will make sure that your that passport

50
00:02:06,330 --> 00:02:10,228
is belongs to you so he will

51
00:02:07,590 --> 00:02:12,480
authenticate to you also one of the

52
00:02:10,229 --> 00:02:14,520
common form of authentication we use in

53
00:02:12,480 --> 00:02:17,010
the web is a username and pass

54
00:02:14,520 --> 00:02:20,010
even though it's not a great or the

55
00:02:17,010 --> 00:02:22,920
indication way the Ness terminologies or

56
00:02:20,010 --> 00:02:25,590
the right session authorization

57
00:02:22,920 --> 00:02:28,170
typically happen after authentication so

58
00:02:25,590 --> 00:02:30,510
you're expecting the authentication to

59
00:02:28,170 --> 00:02:32,970
be happen before authorize session so

60
00:02:30,510 --> 00:02:35,250
authorizes me said typically granting

61
00:02:32,970 --> 00:02:38,400
access based on some attributes that

62
00:02:35,250 --> 00:02:40,800
simple asset is so authorized session is

63
00:02:38,400 --> 00:02:42,330
little different from authentication if

64
00:02:40,800 --> 00:02:48,030
you want to do an authorized such an you

65
00:02:42,330 --> 00:02:52,140
should do authentication first so why we

66
00:02:48,030 --> 00:02:54,540
need I am so I am will help us to ensure

67
00:02:52,140 --> 00:02:56,880
that the right people have access to the

68
00:02:54,540 --> 00:02:58,920
right things at the right time it is

69
00:02:56,880 --> 00:03:00,180
very important that right people will

70
00:02:58,920 --> 00:03:03,480
have access to the right things at the

71
00:03:00,180 --> 00:03:06,630
right time also it will help us to keep

72
00:03:03,480 --> 00:03:13,799
the grown people out so that is also

73
00:03:06,630 --> 00:03:15,990
important for another in fact I a mister

74
00:03:13,800 --> 00:03:19,290
to ensure see am confidentiality

75
00:03:15,990 --> 00:03:22,860
integrity and availability you need a

76
00:03:19,290 --> 00:03:25,500
proper secure I am in order to ensure

77
00:03:22,860 --> 00:03:29,070
see ia confidentiality integrity and

78
00:03:25,500 --> 00:03:32,900
availability it's essential to have a

79
00:03:29,070 --> 00:03:32,900
secure I am in order to implement that

80
00:03:33,200 --> 00:03:40,829
this is not a secure identity and access

81
00:03:37,470 --> 00:03:42,950
management in fact this is in secure way

82
00:03:40,830 --> 00:03:46,160
to do it and it's a useless and

83
00:03:42,950 --> 00:03:48,390
unfortunately we have similar type of

84
00:03:46,160 --> 00:03:52,190
identity and access management with all

85
00:03:48,390 --> 00:03:52,190
our application and many application

86
00:03:52,880 --> 00:03:59,280
it's also studies revealed that 81

87
00:03:56,760 --> 00:04:01,920
percentage of breaches involves tall and

88
00:03:59,280 --> 00:04:05,450
are weak credentials and 91 percent of

89
00:04:01,920 --> 00:04:08,280
attacks our target credentials and

90
00:04:05,450 --> 00:04:11,089
unfortunately 73% eighths of passwords

91
00:04:08,280 --> 00:04:14,220
are duplicate this is a sad reality

92
00:04:11,090 --> 00:04:16,230
these studies are bit all recently there

93
00:04:14,220 --> 00:04:18,540
is a slight decrease in this number but

94
00:04:16,230 --> 00:04:20,840
the thing is that bad people are

95
00:04:18,540 --> 00:04:22,580
interested in insecure I am they

96
00:04:20,839 --> 00:04:28,580
they are looking to exploit insecure I

97
00:04:22,580 --> 00:04:30,560
am and get at your axis how to implement

98
00:04:28,580 --> 00:04:33,740
a secure I am the easy way to do secure

99
00:04:30,560 --> 00:04:35,480
I am just go and read the NIST National

100
00:04:33,740 --> 00:04:38,780
Institute of Standards and Technology

101
00:04:35,480 --> 00:04:41,210
NIST published a special publication

102
00:04:38,780 --> 00:04:44,960
called digital identity guideline 863

103
00:04:41,210 --> 00:04:46,729
and 3 it has total of 400 pages if you

104
00:04:44,960 --> 00:04:51,320
want if you are interested read it

105
00:04:46,730 --> 00:04:53,780
I haven't read completely so yeah and

106
00:04:51,320 --> 00:04:55,250
interestingly even OS we have a

107
00:04:53,780 --> 00:04:58,549
application security verification

108
00:04:55,250 --> 00:05:01,250
standard which also is a simplified

109
00:04:58,550 --> 00:05:03,860
version of NIST identity guideline we

110
00:05:01,250 --> 00:05:06,470
have nearly hundred plus security

111
00:05:03,860 --> 00:05:08,270
requirements related to secure I am

112
00:05:06,470 --> 00:05:11,110
inside application security verification

113
00:05:08,270 --> 00:05:11,109
standard

114
00:05:11,770 --> 00:05:17,960
so let's look into traditional ways of

115
00:05:15,440 --> 00:05:20,120
implementing a.m. as you can see there

116
00:05:17,960 --> 00:05:24,049
is a user and application and an

117
00:05:20,120 --> 00:05:25,729
identity store so the Identity and

118
00:05:24,050 --> 00:05:27,710
Access Management is completely

119
00:05:25,729 --> 00:05:29,719
implemented in the application so each

120
00:05:27,710 --> 00:05:31,250
and every application will be handling

121
00:05:29,720 --> 00:05:34,729
their own identity and access management

122
00:05:31,250 --> 00:05:36,289
and user will be authenticate against

123
00:05:34,729 --> 00:05:39,800
that particular application he may be

124
00:05:36,289 --> 00:05:42,409
using username and password or whatever

125
00:05:39,800 --> 00:05:45,200
other shared secret code indicates and

126
00:05:42,410 --> 00:05:47,000
his authentication credential may be

127
00:05:45,200 --> 00:05:49,760
stored in a standalone or shared

128
00:05:47,000 --> 00:05:54,289
database it can be an LDAP storage as

129
00:05:49,760 --> 00:05:56,120
well the problem with this way of doing

130
00:05:54,289 --> 00:05:57,710
a.m. is that all those security

131
00:05:56,120 --> 00:05:59,300
requirements I mentioned with the mist

132
00:05:57,710 --> 00:06:01,099
and the application security

133
00:05:59,300 --> 00:06:05,150
verification of all those are applicable

134
00:06:01,100 --> 00:06:07,490
to this application so you know that the

135
00:06:05,150 --> 00:06:09,620
developers will have to spend a

136
00:06:07,490 --> 00:06:13,190
significant amount of to amount of time

137
00:06:09,620 --> 00:06:17,000
to secure implement a secure I am with

138
00:06:13,190 --> 00:06:20,419
their application so let's try a modern

139
00:06:17,000 --> 00:06:24,340
way of implementing applica secure I am

140
00:06:20,419 --> 00:06:27,830
sure as you can see in the this leg of

141
00:06:24,340 --> 00:06:30,650
they have created a fortress and secure

142
00:06:27,830 --> 00:06:33,740
all those six or seven buildings inside

143
00:06:30,650 --> 00:06:34,539
that so those six Sun buildings they

144
00:06:33,740 --> 00:06:36,700
don't need to worry

145
00:06:34,540 --> 00:06:39,070
but they're on I am so what their

146
00:06:36,700 --> 00:06:41,560
security is depending on that the main

147
00:06:39,070 --> 00:06:43,870
fortress which is protecting their

148
00:06:41,560 --> 00:06:47,020
applique their buildings right sir yeah

149
00:06:43,870 --> 00:06:49,030
so we can do the similar logic for our

150
00:06:47,020 --> 00:06:51,729
software security or for our

151
00:06:49,030 --> 00:06:56,770
applications so we can do the same thing

152
00:06:51,730 --> 00:06:59,740
sorry we can do the same thing with our

153
00:06:56,770 --> 00:07:01,990
applications we can have a central

154
00:06:59,740 --> 00:07:04,690
identity and access management system

155
00:07:01,990 --> 00:07:07,210
which will fortify all our application

156
00:07:04,690 --> 00:07:08,530
all our applications will trust our

157
00:07:07,210 --> 00:07:11,919
central identity and access management

158
00:07:08,530 --> 00:07:13,570
system and users will be authenticate

159
00:07:11,920 --> 00:07:16,240
against and likely and access management

160
00:07:13,570 --> 00:07:19,210
system this is what Google does this is

161
00:07:16,240 --> 00:07:21,400
what Microsoft does this is what Apple

162
00:07:19,210 --> 00:07:24,099
does almost all technology company they

163
00:07:21,400 --> 00:07:25,810
don't handle identity and access

164
00:07:24,100 --> 00:07:27,670
management integrally with their own

165
00:07:25,810 --> 00:07:31,750
application they have a federated

166
00:07:27,670 --> 00:07:34,150
Identity and Access Management the big

167
00:07:31,750 --> 00:07:36,310
benefit is that none of this individual

168
00:07:34,150 --> 00:07:39,849
applications don't have to handle the

169
00:07:36,310 --> 00:07:42,400
authentication so they are not tightly

170
00:07:39,850 --> 00:07:45,490
coupled without indication mechanism so

171
00:07:42,400 --> 00:07:48,489
even in a tomorrow there is a new way of

172
00:07:45,490 --> 00:07:50,620
authenticating user they can easily get

173
00:07:48,490 --> 00:07:51,850
that benefit from tight central Identity

174
00:07:50,620 --> 00:07:53,590
and Access Management System because

175
00:07:51,850 --> 00:07:55,930
they don't have to implement any

176
00:07:53,590 --> 00:07:57,520
multi-factor authentication biometric

177
00:07:55,930 --> 00:07:59,670
authentication whatever or the

178
00:07:57,520 --> 00:08:02,349
indication said they don't need to worry

179
00:07:59,670 --> 00:08:04,720
they can't directly consume from the

180
00:08:02,350 --> 00:08:07,750
identity actually asked also as they are

181
00:08:04,720 --> 00:08:10,000
not handling the user credential their

182
00:08:07,750 --> 00:08:12,340
attack surface is reduced as I mentioned

183
00:08:10,000 --> 00:08:14,380
SATA cos are interested in insecure

184
00:08:12,340 --> 00:08:16,929
application which is handling I am in

185
00:08:14,380 --> 00:08:19,300
securely so if they are not handling any

186
00:08:16,930 --> 00:08:25,180
credential attackers are won't be

187
00:08:19,300 --> 00:08:27,600
interesting to hack those application so

188
00:08:25,180 --> 00:08:30,610
user authentication can be reused across

189
00:08:27,600 --> 00:08:32,830
application so this can enable a single

190
00:08:30,610 --> 00:08:35,710
sign-on experience if you go to your

191
00:08:32,830 --> 00:08:38,410
Gmail or G Drive you will log into

192
00:08:35,710 --> 00:08:40,300
accounts.google.com once and you will

193
00:08:38,409 --> 00:08:42,839
have that single sign-on experience

194
00:08:40,299 --> 00:08:46,109
across all other Google

195
00:08:42,840 --> 00:08:48,470
Cashin that is that will enable a better

196
00:08:46,110 --> 00:08:51,000
user experience for the user

197
00:08:48,470 --> 00:08:53,760
also the federated Identity and Access

198
00:08:51,000 --> 00:08:56,400
Management will help with the visibility

199
00:08:53,760 --> 00:08:59,340
for both cybersecurity team also

200
00:08:56,400 --> 00:09:01,770
end-user about what are the login

201
00:08:59,340 --> 00:09:04,950
sessions they have if they want they can

202
00:09:01,770 --> 00:09:08,340
even revoke a session which is you know

203
00:09:04,950 --> 00:09:10,830
unwanted section and as other

204
00:09:08,340 --> 00:09:12,660
indications happening across multiple

205
00:09:10,830 --> 00:09:15,800
application through identity access

206
00:09:12,660 --> 00:09:18,360
management system there will be more

207
00:09:15,800 --> 00:09:19,709
contextual information about indication

208
00:09:18,360 --> 00:09:22,110
in the center line care and what I mean

209
00:09:19,710 --> 00:09:24,450
is if you're a gmail it's access from

210
00:09:22,110 --> 00:09:26,900
China now and someone else is accessing

211
00:09:24,450 --> 00:09:30,030
g-drive from Russia or America

212
00:09:26,900 --> 00:09:32,010
accounts.google.com can know you know

213
00:09:30,030 --> 00:09:34,589
you have multiple or the indication

214
00:09:32,010 --> 00:09:36,090
sequence with Don looks right and it may

215
00:09:34,590 --> 00:09:38,580
be be told your account may be

216
00:09:36,090 --> 00:09:41,550
compromised so that is very important to

217
00:09:38,580 --> 00:09:47,580
share that a login information from

218
00:09:41,550 --> 00:09:50,250
different application open I recognizes

219
00:09:47,580 --> 00:09:52,680
so open ID current is a way to implement

220
00:09:50,250 --> 00:09:55,860
their federated Identity and Access

221
00:09:52,680 --> 00:09:58,439
Management as for up 90 foundations

222
00:09:55,860 --> 00:10:01,740
definition open Oracle it is a symbol

223
00:09:58,440 --> 00:10:04,500
identity layer on oath to protocol it

224
00:10:01,740 --> 00:10:06,420
allows clients to verify the identity of

225
00:10:04,500 --> 00:10:09,180
end user base run or the indication

226
00:10:06,420 --> 00:10:11,939
performed by the authorization server so

227
00:10:09,180 --> 00:10:14,969
as you can see in the underpinning the

228
00:10:11,940 --> 00:10:17,880
result and JWT all other odd photo call

229
00:10:14,970 --> 00:10:20,670
suit and JWT suit inside open ID can in

230
00:10:17,880 --> 00:10:28,830
fact open era cannot use so many other

231
00:10:20,670 --> 00:10:31,079
protocol stack in code protocol open ID

232
00:10:28,830 --> 00:10:33,630
foundation so open ID foundation is the

233
00:10:31,080 --> 00:10:35,310
foundation behind open ID connect the

234
00:10:33,630 --> 00:10:37,890
open ID foundation promotes for

235
00:10:35,310 --> 00:10:40,439
tightener the open ID community and he

236
00:10:37,890 --> 00:10:41,939
states technology so open an account has

237
00:10:40,440 --> 00:10:44,040
different working with one of the

238
00:10:41,940 --> 00:10:46,560
interest in working group is factly it's

239
00:10:44,040 --> 00:10:48,689
it's the it's called financial grade api

240
00:10:46,560 --> 00:10:51,089
which is used for a you case open

241
00:10:48,690 --> 00:10:53,280
banging to implement the payment service

242
00:10:51,090 --> 00:10:56,180
directly to which is an extended version

243
00:10:53,280 --> 00:10:58,970
of open ID cannon so that bad

244
00:10:56,180 --> 00:11:01,550
and securely Fed rate their customers

245
00:10:58,970 --> 00:11:04,399
that are between financial services and

246
00:11:01,550 --> 00:11:06,709
they make the payments and require

247
00:11:04,399 --> 00:11:08,630
things right so and there are other

248
00:11:06,710 --> 00:11:11,060
interesting working group like Uyghur

249
00:11:08,630 --> 00:11:14,510
which is for a government based identity

250
00:11:11,060 --> 00:11:17,839
and they risk and for hurt for a medical

251
00:11:14,510 --> 00:11:20,600
industry so there are like as more focus

252
00:11:17,839 --> 00:11:22,370
working group to provide more secure

253
00:11:20,600 --> 00:11:28,940
identity and access management for

254
00:11:22,370 --> 00:11:30,800
different industry JSON web token this

255
00:11:28,940 --> 00:11:33,290
is a one of the very important thing in

256
00:11:30,800 --> 00:11:36,589
open Ida connect the this is the mess

257
00:11:33,290 --> 00:11:38,149
this this is how operatic cannot

258
00:11:36,589 --> 00:11:40,580
exchange the identity information

259
00:11:38,149 --> 00:11:43,520
between the clients and resource server

260
00:11:40,580 --> 00:11:47,930
so JSON web token is basically a URL

261
00:11:43,520 --> 00:11:49,910
base URL basis the core encoded data if

262
00:11:47,930 --> 00:11:52,430
you will decode it it has mainly three

263
00:11:49,910 --> 00:11:54,079
part one is header the first part is

264
00:11:52,430 --> 00:11:56,930
header the second part is the claim that

265
00:11:54,080 --> 00:12:00,230
is an actual data the third part is a

266
00:11:56,930 --> 00:12:02,239
signature which is signed by the your

267
00:12:00,230 --> 00:12:04,459
identity provider so identity Prada will

268
00:12:02,240 --> 00:12:06,620
have a private key so they will sign the

269
00:12:04,459 --> 00:12:08,900
JWT token using their private key and

270
00:12:06,620 --> 00:12:11,260
they have an end point where they expose

271
00:12:08,900 --> 00:12:13,880
the corresponding public key so the

272
00:12:11,260 --> 00:12:16,279
clients or relying parties can go and

273
00:12:13,880 --> 00:12:18,920
take that public key and verify this

274
00:12:16,279 --> 00:12:21,200
token is actually signed by the identity

275
00:12:18,920 --> 00:12:24,020
provider so if you will decode the token

276
00:12:21,200 --> 00:12:26,180
you can see the the first part the what

277
00:12:24,020 --> 00:12:28,850
type of algorithm is used for this JWT

278
00:12:26,180 --> 00:12:31,670
token and their what type of token it is

279
00:12:28,850 --> 00:12:34,400
it is a JWT token and what type of key

280
00:12:31,670 --> 00:12:37,760
is used to sign it so that's a key

281
00:12:34,400 --> 00:12:39,560
reference that time can go and check for

282
00:12:37,760 --> 00:12:41,750
the key reference and get corresponding

283
00:12:39,560 --> 00:12:44,719
public key which they can use to verify

284
00:12:41,750 --> 00:12:47,990
the signature and in the claims there

285
00:12:44,720 --> 00:12:49,940
are so many metadata around each and

286
00:12:47,990 --> 00:12:53,390
every attribute cell is so important

287
00:12:49,940 --> 00:12:55,610
some of them al security sensitivity so

288
00:12:53,390 --> 00:12:57,949
that's it's a must-have in the open Ida

289
00:12:55,610 --> 00:13:01,490
canal so there is a difference between

290
00:12:57,950 --> 00:13:03,980
all true and open ID current you is more

291
00:13:01,490 --> 00:13:06,230
like a framework which will help you to

292
00:13:03,980 --> 00:13:08,810
create other protocol stack open ID

293
00:13:06,230 --> 00:13:09,620
current is a pilot version of all's to

294
00:13:08,810 --> 00:13:11,599
which

295
00:13:09,620 --> 00:13:13,550
make it's a mandatory to do the certain

296
00:13:11,600 --> 00:13:16,370
things to ensure there is a certain

297
00:13:13,550 --> 00:13:18,439
level of security so even it can have

298
00:13:16,370 --> 00:13:25,430
the basic profile information about the

299
00:13:18,440 --> 00:13:28,400
user this is a typical open ID connect

300
00:13:25,430 --> 00:13:30,770
authorization code flow so as you can

301
00:13:28,400 --> 00:13:32,600
see there is a resource owner which is

302
00:13:30,770 --> 00:13:35,329
also known as a user and there is a

303
00:13:32,600 --> 00:13:37,910
client crime you can consider maybe say

304
00:13:35,330 --> 00:13:41,600
Gmail or G Drive whatever it is so the

305
00:13:37,910 --> 00:13:43,400
end application which which one to

306
00:13:41,600 --> 00:13:45,770
authenticate the user and they can get

307
00:13:43,400 --> 00:13:48,680
information about the user the identity

308
00:13:45,770 --> 00:13:51,620
provider can be accounts.google.com so

309
00:13:48,680 --> 00:13:53,750
that is an identity provider by Google

310
00:13:51,620 --> 00:13:56,180
and resource server can be further API

311
00:13:53,750 --> 00:13:58,310
like maybe contacts API or some API

312
00:13:56,180 --> 00:14:00,979
which can provide more information about

313
00:13:58,310 --> 00:14:03,500
the user so when you subtract sess the

314
00:14:00,980 --> 00:14:05,420
Gmail Gmail will say though I don't know

315
00:14:03,500 --> 00:14:08,930
about you I will redirect you to

316
00:14:05,420 --> 00:14:12,529
accounts.google.com so it will redirect

317
00:14:08,930 --> 00:14:14,630
the user to accounts.google.com and the

318
00:14:12,529 --> 00:14:17,660
user will enter his credentials there

319
00:14:14,630 --> 00:14:19,880
and authenticate himself against

320
00:14:17,660 --> 00:14:22,339
identity products so he is not sharing

321
00:14:19,880 --> 00:14:24,620
his password with the Gmail he is only

322
00:14:22,339 --> 00:14:26,779
sharing his password or any credential

323
00:14:24,620 --> 00:14:28,550
with accounts.google.com then he will

324
00:14:26,779 --> 00:14:32,060
get redirected back with an

325
00:14:28,550 --> 00:14:34,400
authorization code the Gmail or Google

326
00:14:32,060 --> 00:14:37,130
Drive will use that authorization code

327
00:14:34,400 --> 00:14:40,040
and it will have its own client secret

328
00:14:37,130 --> 00:14:43,490
so this flow is used for the clients who

329
00:14:40,040 --> 00:14:46,310
can securely keep the secret so it will

330
00:14:43,490 --> 00:14:48,320
use it secret to identify which client

331
00:14:46,310 --> 00:14:50,329
it is and it will take that the

332
00:14:48,320 --> 00:14:53,230
authorization code and send a

333
00:14:50,330 --> 00:14:56,990
back-channel reseda accounts.google.com

334
00:14:53,230 --> 00:14:59,120
then accounts.google.com will provide ID

335
00:14:56,990 --> 00:15:02,060
token and access token and optionally a

336
00:14:59,120 --> 00:15:04,790
refresh token if it is needed and Gmail

337
00:15:02,060 --> 00:15:11,689
can use that tokens to get more data

338
00:15:04,790 --> 00:15:14,990
from other internal API from Google so

339
00:15:11,690 --> 00:15:17,000
this is a slightly different version of

340
00:15:14,990 --> 00:15:20,089
the authorization code flow with pixee

341
00:15:17,000 --> 00:15:22,800
because there are cases where you can't

342
00:15:20,089 --> 00:15:24,540
keep a client secret in your clients

343
00:15:22,800 --> 00:15:26,880
as an example there will be mobile

344
00:15:24,540 --> 00:15:29,790
application JavaScript single page

345
00:15:26,880 --> 00:15:32,040
application like angular react and there

346
00:15:29,790 --> 00:15:33,930
are several applications were you can't

347
00:15:32,040 --> 00:15:36,420
keep the client secret in that case

348
00:15:33,930 --> 00:15:38,479
there won't be any secret in the client

349
00:15:36,420 --> 00:15:42,120
what client will do is find will

350
00:15:38,480 --> 00:15:43,709
generate a unique random code for each

351
00:15:42,120 --> 00:15:45,959
of the indication sequence when the user

352
00:15:43,709 --> 00:15:51,709
comes it will generate a unique sequence

353
00:15:45,959 --> 00:15:55,199
and it will also convert that that

354
00:15:51,709 --> 00:15:57,989
random go-to hash and it will send that

355
00:15:55,200 --> 00:16:01,860
hash to the identity provider which is

356
00:15:57,990 --> 00:16:04,950
also known as a code challenge so when

357
00:16:01,860 --> 00:16:07,920
the user authenticate with identity

358
00:16:04,950 --> 00:16:10,110
provider it will again get it will get

359
00:16:07,920 --> 00:16:12,860
an authorization code when it will

360
00:16:10,110 --> 00:16:16,500
receive the code it will take the actual

361
00:16:12,860 --> 00:16:18,899
random code which is also known as code

362
00:16:16,500 --> 00:16:21,450
verifier and it will use that code and

363
00:16:18,899 --> 00:16:23,370
send to the identity product identity

364
00:16:21,450 --> 00:16:25,740
provider already know the hash of the

365
00:16:23,370 --> 00:16:27,930
initial code so identity proto will

366
00:16:25,740 --> 00:16:30,510
convert these discs or verifier

367
00:16:27,930 --> 00:16:38,099
and compare the hash then only it will

368
00:16:30,510 --> 00:16:40,470
give that tokens back to the client so

369
00:16:38,100 --> 00:16:43,740
this is a discovery end point for a

370
00:16:40,470 --> 00:16:45,990
googles so there is a standard URLs for

371
00:16:43,740 --> 00:16:48,959
most of the open ID can I discover end

372
00:16:45,990 --> 00:16:51,000
point as you can see a client when a

373
00:16:48,959 --> 00:16:52,920
client will access this URL it will get

374
00:16:51,000 --> 00:16:55,110
all the information about where is the

375
00:16:52,920 --> 00:16:57,390
authorization server where is a token

376
00:16:55,110 --> 00:17:02,420
end point and where it can press the

377
00:16:57,390 --> 00:17:02,420
public key about the identity provider

378
00:17:02,540 --> 00:17:07,349
so if you will go to the public key URL

379
00:17:05,250 --> 00:17:09,900
you can find all the public key by

380
00:17:07,349 --> 00:17:12,540
Google which Google used to sign the JWT

381
00:17:09,900 --> 00:17:14,880
talk and so you can take this public key

382
00:17:12,540 --> 00:17:20,339
and verify if the token is actually

383
00:17:14,880 --> 00:17:24,270
issued by the accounts.google.com salmon

384
00:17:20,339 --> 00:17:26,639
so Samuel is a traditional way of doing

385
00:17:24,270 --> 00:17:29,550
Federation salsa known as security

386
00:17:26,640 --> 00:17:32,970
assertion markup language open ID crack

387
00:17:29,550 --> 00:17:36,330
is considered as a successor of sam'l so

388
00:17:32,970 --> 00:17:38,370
sam'l always focusing on an organization

389
00:17:36,330 --> 00:17:41,158
eccentric so that means if your

390
00:17:38,370 --> 00:17:42,510
organization want to exchange data from

391
00:17:41,159 --> 00:17:45,149
one application to another application

392
00:17:42,510 --> 00:17:48,210
whereas Open ID cannot is more about a

393
00:17:45,149 --> 00:17:51,559
user centric if user one taxing his data

394
00:17:48,210 --> 00:17:54,929
from identity provider to the client so

395
00:17:51,559 --> 00:17:57,000
and sam'l use XML message format to

396
00:17:54,929 --> 00:18:00,360
exchange that that whereas Open ID card

397
00:17:57,000 --> 00:18:04,409
use JSON and rest and both communicate

398
00:18:00,360 --> 00:18:07,289
through HTTP sam'l securities based on

399
00:18:04,409 --> 00:18:09,750
XML security all the XML insecure

400
00:18:07,289 --> 00:18:11,490
resource applicable to sam'l all the XML

401
00:18:09,750 --> 00:18:13,830
parser issues or all other issues

402
00:18:11,490 --> 00:18:16,529
related to XML whereas the open I

403
00:18:13,830 --> 00:18:19,710
disconnect based on JSON object signing

404
00:18:16,529 --> 00:18:22,019
and encryption and client registration

405
00:18:19,710 --> 00:18:23,820
is static in sam'l where as in open era

406
00:18:22,019 --> 00:18:27,990
can add client registration can be

407
00:18:23,820 --> 00:18:30,510
dynamic also and identity discovery and

408
00:18:27,990 --> 00:18:32,850
deploy discoveries also static in sam'l

409
00:18:30,510 --> 00:18:34,559
in Open ID Connect is dynamic as I show

410
00:18:32,850 --> 00:18:36,990
you the before that you are a lesser

411
00:18:34,559 --> 00:18:38,639
standard URL any clients can go there

412
00:18:36,990 --> 00:18:41,929
and get all the identity provider

413
00:18:38,639 --> 00:18:44,850
information sam'l is using front-end

414
00:18:41,929 --> 00:18:46,860
channel for attribute texting whereas

415
00:18:44,850 --> 00:18:48,750
Open ID cannot use both front end and

416
00:18:46,860 --> 00:18:51,719
back and channel to communicate with

417
00:18:48,750 --> 00:18:53,760
identity provider then sam'l is mainly

418
00:18:51,720 --> 00:18:55,080
used for web applications whereas open

419
00:18:53,760 --> 00:18:57,120
ID account can be used for web

420
00:18:55,080 --> 00:18:59,010
application mobile application

421
00:18:57,120 --> 00:19:04,168
JavaScript single page whatever you want

422
00:18:59,010 --> 00:19:05,639
to integrate the benefits of open Eric

423
00:19:04,169 --> 00:19:08,700
Annette is so open I reckon it will

424
00:19:05,639 --> 00:19:10,860
enable end to end up to the API level

425
00:19:08,700 --> 00:19:12,690
federated I intend access management so

426
00:19:10,860 --> 00:19:15,330
say you don't have to create your own

427
00:19:12,690 --> 00:19:18,059
oath to authorization server in order to

428
00:19:15,330 --> 00:19:21,240
communicate with your API you can hand

429
00:19:18,059 --> 00:19:23,580
over your access token pure API that

430
00:19:21,240 --> 00:19:26,340
token can be verified with an open ID

431
00:19:23,580 --> 00:19:27,899
provider server it also enabled with the

432
00:19:26,340 --> 00:19:30,240
lightweight token and encourage

433
00:19:27,899 --> 00:19:32,010
developers to use it frequently along

434
00:19:30,240 --> 00:19:35,070
with their HTTP requests as a bearer

435
00:19:32,010 --> 00:19:38,690
tokens as it's lightweight it's also

436
00:19:35,070 --> 00:19:41,939
easier to implement a short-lived token

437
00:19:38,690 --> 00:19:43,830
so open ID card will also help to get

438
00:19:41,940 --> 00:19:47,399
the consent from user which is very

439
00:19:43,830 --> 00:19:49,800
important for gdpr so if if you are

440
00:19:47,399 --> 00:19:51,600
logging with a Google Play

441
00:19:49,800 --> 00:19:53,310
sign with the Google Google will

442
00:19:51,600 --> 00:19:55,949
normally ask do you want to share your

443
00:19:53,310 --> 00:19:58,110
inbox access or contact access and you

444
00:19:55,950 --> 00:19:59,850
can tailor down what kind of access if

445
00:19:58,110 --> 00:20:02,280
you want to give to a third party Klein

446
00:19:59,850 --> 00:20:04,919
you haven't possibility to do that it's

447
00:20:02,280 --> 00:20:07,230
a it's in the protocol but it's not a

448
00:20:04,920 --> 00:20:09,450
default option you want if you want you

449
00:20:07,230 --> 00:20:11,700
can enable it expecially if you want to

450
00:20:09,450 --> 00:20:15,960
share the authentication information

451
00:20:11,700 --> 00:20:18,170
with the third-party clients and open ID

452
00:20:15,960 --> 00:20:21,330
foundation has so many certified

453
00:20:18,170 --> 00:20:23,070
libraries to integrate with open ID

454
00:20:21,330 --> 00:20:25,230
provider server and there are so many

455
00:20:23,070 --> 00:20:30,679
certified open ID provide provider

456
00:20:25,230 --> 00:20:35,640
identity server which you can use so

457
00:20:30,680 --> 00:20:38,180
open ID kind of certification it's very

458
00:20:35,640 --> 00:20:40,890
important to how you have a strong

459
00:20:38,180 --> 00:20:43,500
strong integration it doesn't matter if

460
00:20:40,890 --> 00:20:45,330
you have a secure identity provider and

461
00:20:43,500 --> 00:20:48,150
secure application if your integration

462
00:20:45,330 --> 00:20:50,070
is weak your you will lose all the

463
00:20:48,150 --> 00:20:54,510
security benefits from Open ID Connect

464
00:20:50,070 --> 00:20:56,520
so there are certified open ID providers

465
00:20:54,510 --> 00:20:58,920
and certified relying parties available

466
00:20:56,520 --> 00:21:01,050
from open idak kind there most of them

467
00:20:58,920 --> 00:21:03,360
are free and there are some services but

468
00:21:01,050 --> 00:21:05,220
if you go to open aidid dotnet

469
00:21:03,360 --> 00:21:08,550
certification you can find their own

470
00:21:05,220 --> 00:21:11,250
list of certified providers you can just

471
00:21:08,550 --> 00:21:15,629
reuse all those relying party for your

472
00:21:11,250 --> 00:21:17,940
application it yeah also it will help

473
00:21:15,630 --> 00:21:19,640
with the last development effort so yeah

474
00:21:17,940 --> 00:21:21,540
you don't have to spend too much

475
00:21:19,640 --> 00:21:25,890
development effort to make this

476
00:21:21,540 --> 00:21:27,330
integration these are few of the open ID

477
00:21:25,890 --> 00:21:29,490
kind of certified there are so many

478
00:21:27,330 --> 00:21:31,770
others I'm sorry I can't list all of

479
00:21:29,490 --> 00:21:34,260
them here so this key clock is one of

480
00:21:31,770 --> 00:21:36,690
the my favorite open ID provider which

481
00:21:34,260 --> 00:21:38,790
is a free and open source software you

482
00:21:36,690 --> 00:21:40,890
know you can simply run using a docker

483
00:21:38,790 --> 00:21:44,040
command and run an open ID connect

484
00:21:40,890 --> 00:21:45,540
certified identity provider and you know

485
00:21:44,040 --> 00:21:48,240
you don't have to worry about all those

486
00:21:45,540 --> 00:21:50,010
security requirements from NIST and the

487
00:21:48,240 --> 00:21:52,050
application secretary these all of them

488
00:21:50,010 --> 00:21:53,940
are implemented in key clock or even

489
00:21:52,050 --> 00:21:57,690
identity server this another one

490
00:21:53,940 --> 00:22:00,210
Apple is a client integration SDK so

491
00:21:57,690 --> 00:22:02,460
it's a it's mainly used for mobile

492
00:22:00,210 --> 00:22:03,380
applications so if you want to integrate

493
00:22:02,460 --> 00:22:05,030
your mobile

494
00:22:03,380 --> 00:22:07,340
application with a non fanatic on it you

495
00:22:05,030 --> 00:22:10,220
can use Airport Airport is originally

496
00:22:07,340 --> 00:22:16,510
from Google Google donated to open idea

497
00:22:10,220 --> 00:22:18,770
foundation so yeah so custom

498
00:22:16,510 --> 00:22:20,960
implementation and integration you know

499
00:22:18,770 --> 00:22:23,060
we all have colleagues who always like

500
00:22:20,960 --> 00:22:26,350
to try things and they want to do all

501
00:22:23,060 --> 00:22:28,909
the things by themselves so yeah please

502
00:22:26,350 --> 00:22:30,399
avoid if possible we don't have to

503
00:22:28,910 --> 00:22:32,840
reinvent the wheel there are so many

504
00:22:30,400 --> 00:22:34,610
certified integrate but if if you still

505
00:22:32,840 --> 00:22:39,199
have to do it if you still want to do it

506
00:22:34,610 --> 00:22:41,209
open ID foundation also provide test

507
00:22:39,200 --> 00:22:42,860
automation suit which you can run

508
00:22:41,210 --> 00:22:44,990
against your implementation and make

509
00:22:42,860 --> 00:22:47,360
sure that your implementation fall of

510
00:22:44,990 --> 00:22:49,700
the specification if your implementation

511
00:22:47,360 --> 00:22:52,800
don't follow the specification there is

512
00:22:49,700 --> 00:22:55,420
a chance of a security issue associated

513
00:22:52,800 --> 00:22:59,570
[Music]

514
00:22:55,420 --> 00:23:01,910
sorry fighter 2 so now we further write

515
00:22:59,570 --> 00:23:03,290
everything to the one place and we make

516
00:23:01,910 --> 00:23:05,270
sure that although the indication is

517
00:23:03,290 --> 00:23:07,520
happening through that place and we

518
00:23:05,270 --> 00:23:09,290
don't want that other guys to do that in

519
00:23:07,520 --> 00:23:12,260
the case in front of your open ID server

520
00:23:09,290 --> 00:23:15,200
that's where Fido 2 comes Fido stands

521
00:23:12,260 --> 00:23:17,540
for fast identity online so far include

522
00:23:15,200 --> 00:23:20,570
both the seat tab and report then I

523
00:23:17,540 --> 00:23:23,149
think should be covered about vapor then

524
00:23:20,570 --> 00:23:27,830
which is one part of Fido to stand there

525
00:23:23,150 --> 00:23:29,450
protocols fighter to enable a strong

526
00:23:27,830 --> 00:23:34,040
around indication is in public key

527
00:23:29,450 --> 00:23:36,590
cryptography in the traditional order

528
00:23:34,040 --> 00:23:38,720
indication we keep the shared secret in

529
00:23:36,590 --> 00:23:41,510
our apply application or even in our

530
00:23:38,720 --> 00:23:44,840
identity provider so attackers are

531
00:23:41,510 --> 00:23:48,140
always interested to hack that shared

532
00:23:44,840 --> 00:23:50,149
secret in your database but in 502 we

533
00:23:48,140 --> 00:23:53,510
have public key cryptography we have

534
00:23:50,150 --> 00:23:55,790
publicly just related to the particular

535
00:23:53,510 --> 00:23:57,440
website or hostname is in your database

536
00:23:55,790 --> 00:23:59,240
even an attacker get access to that

537
00:23:57,440 --> 00:24:03,860
public key he can't use anything with

538
00:23:59,240 --> 00:24:06,890
that so this is a high-level picture how

539
00:24:03,860 --> 00:24:10,429
different protocols comes into play so

540
00:24:06,890 --> 00:24:12,080
you have device called indicator and you

541
00:24:10,430 --> 00:24:14,510
also have Fido - server

542
00:24:12,080 --> 00:24:16,810
find out the server will communicate to

543
00:24:14,510 --> 00:24:18,640
your browser through reporting API

544
00:24:16,810 --> 00:24:21,190
then your laptop will communicate

545
00:24:18,640 --> 00:24:29,230
through your Authenticator using theta

546
00:24:21,190 --> 00:24:32,470
protocol so further to provide phishing

547
00:24:29,230 --> 00:24:34,750
free authentication so no one can fish

548
00:24:32,470 --> 00:24:37,690
find out the authentication so fighter

549
00:24:34,750 --> 00:24:39,730
in fighter two if they verify the origin

550
00:24:37,690 --> 00:24:41,920
and they also verify the signature so

551
00:24:39,730 --> 00:24:44,800
you can't even host their fishing domain

552
00:24:41,920 --> 00:24:47,170
and fake the signature or a sign it and

553
00:24:44,800 --> 00:24:50,409
fight it also proven man-in-the-middle

554
00:24:47,170 --> 00:24:52,390
by verifying the challenge and signature

555
00:24:50,410 --> 00:24:53,980
and fighter to prevent replay attack by

556
00:24:52,390 --> 00:24:57,700
verifying the counter in both

557
00:24:53,980 --> 00:25:00,280
Authenticator and server side so there

558
00:24:57,700 --> 00:25:01,480
are different forms of Authenticator so

559
00:25:00,280 --> 00:25:03,340
there are other indicator called

560
00:25:01,480 --> 00:25:05,380
platform of the indicator and there are

561
00:25:03,340 --> 00:25:07,570
other indicators called roaming or

562
00:25:05,380 --> 00:25:10,120
indicator the platform of indicator if

563
00:25:07,570 --> 00:25:11,740
you have android 7 plus your phone is

564
00:25:10,120 --> 00:25:14,050
supplied form of indicator if you have

565
00:25:11,740 --> 00:25:15,700
windows holo with your Windows 10 you

566
00:25:14,050 --> 00:25:17,860
can use it as a platform or indicator

567
00:25:15,700 --> 00:25:20,200
you don't have to buy a key that is

568
00:25:17,860 --> 00:25:22,719
roaming as Authenticator if you want to

569
00:25:20,200 --> 00:25:24,850
use across multiple devices or multiple

570
00:25:22,720 --> 00:25:34,660
laptop you can also use a roaming of

571
00:25:24,850 --> 00:25:37,000
indicator so this website have explained

572
00:25:34,660 --> 00:25:40,720
very well how I think I have enough time

573
00:25:37,000 --> 00:25:45,610
so yeah I will show so this if you will

574
00:25:40,720 --> 00:25:48,400
go to you have a mobile phone with the

575
00:25:45,610 --> 00:25:51,669
Android 7 you can give it a try and or

576
00:25:48,400 --> 00:25:56,860
if you have a Windows 10 hollow you can

577
00:25:51,670 --> 00:25:58,870
give a try with your laptop so this is a

578
00:25:56,860 --> 00:26:00,550
test registration don't worry about the

579
00:25:58,870 --> 00:26:03,280
data you are entering there they won't

580
00:26:00,550 --> 00:26:05,260
persist here that so I will put a test 1

581
00:26:03,280 --> 00:26:07,450
2 3 so I have a fight or two

582
00:26:05,260 --> 00:26:09,220
Authenticator external of indicator

583
00:26:07,450 --> 00:26:18,820
roaming so I have fingerprint reader

584
00:26:09,220 --> 00:26:20,860
there so you will show you how it is

585
00:26:18,820 --> 00:26:24,250
happening in the animation not just the

586
00:26:20,860 --> 00:26:26,379
web both in part also with the CETA path

587
00:26:24,250 --> 00:26:30,100
indicator so now I just need to touch my

588
00:26:26,380 --> 00:26:32,470
key it should now release a

589
00:26:30,100 --> 00:26:34,120
public-key so it will sign it and

590
00:26:32,470 --> 00:26:36,880
register with the website it will show

591
00:26:34,120 --> 00:26:41,469
the process now I have an ID and public

592
00:26:36,880 --> 00:26:50,650
key register with the Fido server if I

593
00:26:41,470 --> 00:26:52,720
click login nest I will use this ID so

594
00:26:50,650 --> 00:26:59,980
you will show me pop-up just need to

595
00:26:52,720 --> 00:27:01,600
attach again yeah yeah anyway login site

596
00:26:59,980 --> 00:27:03,520
so if you want to try with more

597
00:27:01,600 --> 00:27:06,010
debugging you can enable the debugger

598
00:27:03,520 --> 00:27:08,049
and get more technical detail how this

599
00:27:06,010 --> 00:27:11,470
protocol was but it is very important to

600
00:27:08,049 --> 00:27:13,780
know about fight or - it is going to

601
00:27:11,470 --> 00:27:23,409
have a serious impact on how we

602
00:27:13,780 --> 00:27:25,990
authenticate and fight or to works very

603
00:27:23,409 --> 00:27:28,270
well with the open ID connect so you can

604
00:27:25,990 --> 00:27:30,700
implement the fight or server in your

605
00:27:28,270 --> 00:27:33,760
identity provider so you don't have to

606
00:27:30,700 --> 00:27:35,530
implement fight or two inside your each

607
00:27:33,760 --> 00:27:38,020
and every application that is a wrong

608
00:27:35,530 --> 00:27:40,090
strategy to do fighter to implementation

609
00:27:38,020 --> 00:27:41,889
your application don't even need to

610
00:27:40,090 --> 00:27:44,139
worry how your identity provider is

611
00:27:41,890 --> 00:27:46,870
doing it so if your identity provider

612
00:27:44,140 --> 00:27:48,309
got the fight at implementation they can

613
00:27:46,870 --> 00:27:51,280
easily consume that the strong

614
00:27:48,309 --> 00:27:53,470
authentication so as you can see the

615
00:27:51,280 --> 00:27:56,740
Fido server is inside your identity

616
00:27:53,470 --> 00:27:58,419
provider and they the applications as I

617
00:27:56,740 --> 00:28:00,880
mentioned in the previous flows always

618
00:27:58,419 --> 00:28:03,490
redirect the user to your identity

619
00:28:00,880 --> 00:28:05,620
provider like accounts.google.com so

620
00:28:03,490 --> 00:28:08,340
google also got a fight or two or the

621
00:28:05,620 --> 00:28:16,500
indicator support you can use that to

622
00:28:08,340 --> 00:28:19,149
implement a secure authentication so

623
00:28:16,500 --> 00:28:21,580
yeah please don't roll your own identity

624
00:28:19,150 --> 00:28:26,470
and access management using a custom

625
00:28:21,580 --> 00:28:30,428
oath to your JWT please use open ID card

626
00:28:26,470 --> 00:28:33,280
instead yeah so that's pretty much it

627
00:28:30,429 --> 00:28:34,929
any questions so if you want to ask me

628
00:28:33,280 --> 00:28:37,178
more questions later you know you can

629
00:28:34,929 --> 00:28:39,159
send me e-mail or you can contact me on

630
00:28:37,179 --> 00:28:40,840
twitter i'm happy to answer the question

631
00:28:39,159 --> 00:28:43,190
but I think we have enough time for

632
00:28:40,840 --> 00:28:51,850
questions now yeah

633
00:28:43,190 --> 00:28:54,440
I great presentation

634
00:28:51,850 --> 00:28:55,760
I'm sorry if you've correct what I'm

635
00:28:54,440 --> 00:28:58,850
about to ask because I missed the first

636
00:28:55,760 --> 00:29:01,310
part of the presentation but you

637
00:28:58,850 --> 00:29:04,909
emphasized on not really not your own

638
00:29:01,310 --> 00:29:07,550
custom implementation so I've seen a set

639
00:29:04,910 --> 00:29:10,750
up before and which I've criticized and

640
00:29:07,550 --> 00:29:15,050
I'd like to get your thoughts on it so

641
00:29:10,750 --> 00:29:18,650
there's a decision to use key clock for

642
00:29:15,050 --> 00:29:24,290
authentication within a project on the

643
00:29:18,650 --> 00:29:28,520
site but as time went on it became a

644
00:29:24,290 --> 00:29:31,100
thing of building business rules on top

645
00:29:28,520 --> 00:29:35,240
of key clock you know what I mean and

646
00:29:31,100 --> 00:29:37,850
kick look and that have been just it

647
00:29:35,240 --> 00:29:39,650
took in you are right and for

648
00:29:37,850 --> 00:29:43,790
verification pretty much just that

649
00:29:39,650 --> 00:29:47,210
animate I'm like why not just create you

650
00:29:43,790 --> 00:29:49,610
go home GWT and put the scope and what

651
00:29:47,210 --> 00:29:51,020
what not policies that whatever

652
00:29:49,610 --> 00:29:54,080
information you need authorization

653
00:29:51,020 --> 00:29:57,080
thereafter and stick it into GWT and

654
00:29:54,080 --> 00:30:00,169
figure out you know your renewal

655
00:29:57,080 --> 00:30:02,000
strategy and things like that and I've

656
00:30:00,170 --> 00:30:03,770
seen articles on medium with people

657
00:30:02,000 --> 00:30:06,230
doing great things like that which

658
00:30:03,770 --> 00:30:07,730
seemed like a no-brainer to me to a

659
00:30:06,230 --> 00:30:10,820
normal site but of course there are

660
00:30:07,730 --> 00:30:12,410
still things you might miss as a as

661
00:30:10,820 --> 00:30:14,060
someone building your own custom

662
00:30:12,410 --> 00:30:16,160
solution so I just wanted to get your

663
00:30:14,060 --> 00:30:19,399
thoughts on doing something like that

664
00:30:16,160 --> 00:30:23,750
for custom where I think it's a good

665
00:30:19,400 --> 00:30:26,570
idea or you think the key cloak slash

666
00:30:23,750 --> 00:30:30,290
whatever to open ID tool that is out

667
00:30:26,570 --> 00:30:32,570
there what your thoughts are on that so

668
00:30:30,290 --> 00:30:35,180
I don't know exactly what is your custom

669
00:30:32,570 --> 00:30:37,460
requirements but normally with identity

670
00:30:35,180 --> 00:30:39,200
and authentication it's a common

671
00:30:37,460 --> 00:30:41,450
requirement for everybody you need to

672
00:30:39,200 --> 00:30:43,850
have a proper identity information and

673
00:30:41,450 --> 00:30:46,970
you need to authenticate a user right so

674
00:30:43,850 --> 00:30:49,219
maybe some advanced fine-grained or

675
00:30:46,970 --> 00:30:51,650
coarse-grained authorization issues you

676
00:30:49,220 --> 00:30:53,210
may have still if you are using key

677
00:30:51,650 --> 00:30:55,150
o'clock properly right so key o'clock

678
00:30:53,210 --> 00:30:56,580
has a different ways to implement

679
00:30:55,150 --> 00:31:00,360
fine-grained access

680
00:30:56,580 --> 00:31:02,280
control it also has support for you a.m.

681
00:31:00,360 --> 00:31:06,600
which is another protocol for a

682
00:31:02,280 --> 00:31:08,970
coarse-grained a access control but as I

683
00:31:06,600 --> 00:31:10,709
mentioned it doesn't matter if you're

684
00:31:08,970 --> 00:31:12,300
using key clock or anything like they

685
00:31:10,710 --> 00:31:13,560
keep clock itself is an open-source

686
00:31:12,300 --> 00:31:15,510
software right so if you want to

687
00:31:13,560 --> 00:31:17,429
customize something you can do that

688
00:31:15,510 --> 00:31:19,290
there is no way you can even extend the

689
00:31:17,430 --> 00:31:21,540
key clock if you want to do it but you

690
00:31:19,290 --> 00:31:23,430
know the point is that don't do that in

691
00:31:21,540 --> 00:31:25,470
individual applications right so you've

692
00:31:23,430 --> 00:31:27,990
read the rate everything you have a one

693
00:31:25,470 --> 00:31:29,640
central system which will do it it may

694
00:31:27,990 --> 00:31:32,150
be key clock or it may be some other

695
00:31:29,640 --> 00:31:34,800
software it's better in that pattern

696
00:31:32,150 --> 00:31:36,270
rather than going and doing an identity

697
00:31:34,800 --> 00:31:38,159
and access management with each and

698
00:31:36,270 --> 00:31:40,230
every individual application which will

699
00:31:38,160 --> 00:31:42,450
be a pain point because you have to

700
00:31:40,230 --> 00:31:45,090
focus on all those security requirements

701
00:31:42,450 --> 00:31:47,790
and you will definitely miss and your

702
00:31:45,090 --> 00:31:49,350
developers are not there to do a secure

703
00:31:47,790 --> 00:31:51,810
eye and they are there to deliver

704
00:31:49,350 --> 00:31:54,179
business functionality that's they are

705
00:31:51,810 --> 00:31:56,940
more bothered about right so it's better

706
00:31:54,180 --> 00:31:58,440
to do in this pattern in a federated but

707
00:31:56,940 --> 00:32:00,120
as I mentioned if there is a custom

708
00:31:58,440 --> 00:32:02,280
requirements you can still implement in

709
00:32:00,120 --> 00:32:09,320
your central identity provider right so

710
00:32:02,280 --> 00:32:09,320
yeah any other questions

711
00:32:11,660 --> 00:32:15,750
again thank you

712
00:32:13,690 --> 00:32:15,750
you

