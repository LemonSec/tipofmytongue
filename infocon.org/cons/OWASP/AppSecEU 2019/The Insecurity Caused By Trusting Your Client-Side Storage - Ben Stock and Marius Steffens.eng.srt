1
00:00:00,530 --> 00:00:02,590
you

2
00:00:03,230 --> 00:00:07,289
all right so if you need the in the last

3
00:00:05,880 --> 00:00:10,469
talk welcome back

4
00:00:07,290 --> 00:00:12,150
I'm still here I'm still around so this

5
00:00:10,470 --> 00:00:14,760
is no joint work with my other PhD

6
00:00:12,150 --> 00:00:15,960
student abroad Mario's and we will be

7
00:00:14,760 --> 00:00:17,880
talking about why you should not trust

8
00:00:15,960 --> 00:00:19,380
the locals and in particular local

9
00:00:17,880 --> 00:00:22,619
storage and cookies and things like that

10
00:00:19,380 --> 00:00:25,369
and and I'll try to make a case for why

11
00:00:22,619 --> 00:00:27,660
you should not call it reflected a

12
00:00:25,369 --> 00:00:29,220
persistent at Dominick's success but

13
00:00:27,660 --> 00:00:32,278
more on this in a second so first off

14
00:00:29,220 --> 00:00:34,379
what we saw again and then I'm I will

15
00:00:32,279 --> 00:00:36,060
get this far I had the secure web of

16
00:00:34,379 --> 00:00:39,660
engineering a secure web applications

17
00:00:36,060 --> 00:00:43,350
group sorry and this is marios PhD

18
00:00:39,660 --> 00:00:45,750
student since October 2018 still first

19
00:00:43,350 --> 00:00:52,050
apt soon yes very young and fresh how he

20
00:00:45,750 --> 00:00:56,730
looks and this talk is about XSS and so

21
00:00:52,050 --> 00:00:59,519
if you even look at the XSS cheat sheet

22
00:00:56,730 --> 00:01:02,309
on all wasp you'll find something like

23
00:00:59,520 --> 00:01:03,719
this also if you open a textbook it will

24
00:01:02,309 --> 00:01:05,939
tell you there are three different types

25
00:01:03,719 --> 00:01:07,770
of cross-site scripting there is reflect

26
00:01:05,939 --> 00:01:09,990
across web scripting exemplified here to

27
00:01:07,770 --> 00:01:11,700
PHP on the left-hand side you just have

28
00:01:09,990 --> 00:01:14,580
a get parameter under just echoed that

29
00:01:11,700 --> 00:01:16,110
back right obviously in access you have

30
00:01:14,580 --> 00:01:17,850
persistent access as we on the

31
00:01:16,110 --> 00:01:20,220
server-side have some persistence

32
00:01:17,850 --> 00:01:22,080
mechanism we get the sequel database via

33
00:01:20,220 --> 00:01:24,150
no sequel database or just files or

34
00:01:22,080 --> 00:01:25,710
whatever just persistent storage and

35
00:01:24,150 --> 00:01:28,200
then you have what most people call bomb

36
00:01:25,710 --> 00:01:31,320
base XSS and so essentially this is

37
00:01:28,200 --> 00:01:32,820
JavaScript code that is insecure so here

38
00:01:31,320 --> 00:01:36,179
we have document right location hash

39
00:01:32,820 --> 00:01:37,610
slice one assuming that the browser does

40
00:01:36,180 --> 00:01:39,479
not automatically escape the hash and

41
00:01:37,610 --> 00:01:41,759
fortunately most of the brothers do it

42
00:01:39,479 --> 00:01:44,158
today but H is still still vulnerable in

43
00:01:41,759 --> 00:01:46,110
this case and but this is essentially if

44
00:01:44,159 --> 00:01:49,619
you look at the or the amount of code

45
00:01:46,110 --> 00:01:51,420
and the syntax somehow it looks a lot

46
00:01:49,619 --> 00:01:53,189
like the left hand example right so

47
00:01:51,420 --> 00:01:54,509
document weather echo is it's virtually

48
00:01:53,189 --> 00:01:56,490
the same and then you just take some

49
00:01:54,509 --> 00:01:58,470
part of the UL and echo the spectrum and

50
00:01:56,490 --> 00:02:00,059
so I'd like to make a case this is

51
00:01:58,470 --> 00:02:01,920
actually not sufficient to have these

52
00:02:00,060 --> 00:02:03,960
three types of exercise but rather we

53
00:02:01,920 --> 00:02:05,399
have to think about this in terms of two

54
00:02:03,960 --> 00:02:07,408
dimensions and that is namely whether

55
00:02:05,399 --> 00:02:08,128
it's reflected or persistent or it's

56
00:02:07,409 --> 00:02:09,929
caused

57
00:02:08,128 --> 00:02:13,078
upon the server side or on the client

58
00:02:09,929 --> 00:02:15,349
side and so what you've added here in

59
00:02:13,079 --> 00:02:16,700
the lower right hand side corner is

60
00:02:15,349 --> 00:02:18,679
the fact that we now also have

61
00:02:16,700 --> 00:02:21,018
persistent storage on the client right

62
00:02:18,680 --> 00:02:22,489
we have always had cookies but

63
00:02:21,019 --> 00:02:24,290
importantly a since a couple of years we

64
00:02:22,489 --> 00:02:26,480
have local storage and local storage is

65
00:02:24,290 --> 00:02:29,420
meant to store or larger amounts of data

66
00:02:26,480 --> 00:02:30,920
and cookies are very much bound and so

67
00:02:29,420 --> 00:02:33,559
in this case we see that we first have a

68
00:02:30,920 --> 00:02:34,819
data flow where we have a set item or

69
00:02:33,560 --> 00:02:36,500
something that is attacker controllable

70
00:02:34,819 --> 00:02:39,560
so the location hash and then this

71
00:02:36,500 --> 00:02:41,959
things later on used to retrieve

72
00:02:39,560 --> 00:02:43,849
something from the local storage from

73
00:02:41,959 --> 00:02:47,480
the persistent storage and write it into

74
00:02:43,849 --> 00:02:49,399
the document and so if you take nothing

75
00:02:47,480 --> 00:02:50,720
else from this talk then please at least

76
00:02:49,400 --> 00:02:53,450
remember to not call it don't make

77
00:02:50,720 --> 00:02:54,650
sucess anymore and if you if you mean so

78
00:02:53,450 --> 00:02:56,450
let's first talk about the different

79
00:02:54,650 --> 00:02:58,489
types of of persistence mechanisms it

80
00:02:56,450 --> 00:03:00,168
also have sinks that we that we consider

81
00:02:58,489 --> 00:03:02,540
for for work and that we think are

82
00:03:00,169 --> 00:03:04,489
important to to discuss here so I said

83
00:03:02,540 --> 00:03:05,358
already before we've had cookies for a

84
00:03:04,489 --> 00:03:09,169
while

85
00:03:05,359 --> 00:03:10,849
cookies were not meant to store data in

86
00:03:09,169 --> 00:03:13,030
that sense they were mostly used to

87
00:03:10,849 --> 00:03:15,439
store will session identifiers or

88
00:03:13,030 --> 00:03:16,879
preferences like languages and so on so

89
00:03:15,439 --> 00:03:18,650
have a very limited character set so you

90
00:03:16,879 --> 00:03:20,209
can for example not use a semicolon in

91
00:03:18,650 --> 00:03:22,790
in a cookie because that's the separator

92
00:03:20,209 --> 00:03:26,329
between cookies and it's also bound to

93
00:03:22,790 --> 00:03:28,698
be at me at most four K characters um

94
00:03:26,329 --> 00:03:30,859
cookies are bound to et le plus one so a

95
00:03:28,699 --> 00:03:33,530
reduce the rural domain or even a

96
00:03:30,859 --> 00:03:35,659
hostname if you if you want to so that

97
00:03:33,530 --> 00:03:37,750
means that food bank that come running

98
00:03:35,659 --> 00:03:40,519
over HTTP can actually set a cookie for

99
00:03:37,750 --> 00:03:42,620
its parent domain bank comm which will

100
00:03:40,519 --> 00:03:44,510
be sent to HTTPS bank.com as well and

101
00:03:42,620 --> 00:03:47,629
any will also be sent in this case to

102
00:03:44,510 --> 00:03:51,078
the subdomain of barter pentagon and so

103
00:03:47,629 --> 00:03:53,599
how can this go wrong um well something

104
00:03:51,079 --> 00:03:56,000
like this so we have a username that we

105
00:03:53,599 --> 00:03:58,638
getting from the cookie and then we get

106
00:03:56,000 --> 00:04:00,590
here the get element by ID lock out and

107
00:03:58,639 --> 00:04:02,090
assuming that I have as the attacker and

108
00:04:00,590 --> 00:04:02,299
Marius will tell you about how this will

109
00:04:02,090 --> 00:04:04,909
work

110
00:04:02,299 --> 00:04:06,769
later on I have compromised this cookie

111
00:04:04,909 --> 00:04:09,228
somehow so I make you manipulate it in

112
00:04:06,769 --> 00:04:11,479
my victims machine I have a clear XSS

113
00:04:09,229 --> 00:04:12,409
here right so essentially we are taking

114
00:04:11,479 --> 00:04:14,000
a string that is

115
00:04:12,409 --> 00:04:15,560
attacker controllable that's the

116
00:04:14,000 --> 00:04:19,159
assumption the cookie and we're sticking

117
00:04:15,560 --> 00:04:21,918
it here into this into this username so

118
00:04:19,159 --> 00:04:25,820
obvious exercise again the second thing

119
00:04:21,918 --> 00:04:27,620
is as I said before web storage web

120
00:04:25,820 --> 00:04:29,330
storage actually comes in to differ

121
00:04:27,620 --> 00:04:30,740
fashions so there is session storage in

122
00:04:29,330 --> 00:04:32,000
local storage and we're not talking

123
00:04:30,740 --> 00:04:33,979
about session storage because that

124
00:04:32,000 --> 00:04:35,510
started that is only bound to a specific

125
00:04:33,979 --> 00:04:37,099
window and if you close that window it's

126
00:04:35,510 --> 00:04:39,560
gone so that's not really persistent in

127
00:04:37,100 --> 00:04:41,500
that in that sense whereas local storage

128
00:04:39,560 --> 00:04:45,350
is persistent and shared across all

129
00:04:41,500 --> 00:04:47,270
sides of the same origin that it's bound

130
00:04:45,350 --> 00:04:50,510
to an origin so that means that if you

131
00:04:47,270 --> 00:04:51,080
modify the local storage of http food of

132
00:04:50,510 --> 00:04:53,210
bank.com

133
00:04:51,080 --> 00:04:55,820
then that value is also only there for

134
00:04:53,210 --> 00:04:57,580
HTTP Foodbank talk which is important

135
00:04:55,820 --> 00:05:01,130
for for later on in our tackle models

136
00:04:57,580 --> 00:05:03,580
and then this is a second sink that we

137
00:05:01,130 --> 00:05:05,719
consider for for clients that exercise

138
00:05:03,580 --> 00:05:08,659
which is evil but everybody knows that

139
00:05:05,720 --> 00:05:09,919
evil is evil and you'd say this is a

140
00:05:08,660 --> 00:05:12,050
made-up example right nobody would use

141
00:05:09,919 --> 00:05:13,880
local storage for code caching I'll

142
00:05:12,050 --> 00:05:16,220
leave it to to Marius to tell you more

143
00:05:13,880 --> 00:05:17,240
about this later on but essentially the

144
00:05:16,220 --> 00:05:18,770
idea here is that you have something

145
00:05:17,240 --> 00:05:21,889
stored in local storage and then you

146
00:05:18,770 --> 00:05:23,599
just evaluate that and a third type of

147
00:05:21,889 --> 00:05:26,840
data source that we looked at our

148
00:05:23,600 --> 00:05:30,289
persistence mechanism is index dB so if

149
00:05:26,840 --> 00:05:31,989
anybody has used in xcb my well I'm very

150
00:05:30,289 --> 00:05:35,120
sorry for you let me put it this way and

151
00:05:31,990 --> 00:05:37,370
it's more meant to be a no sequel

152
00:05:35,120 --> 00:05:38,539
database especially to search shape with

153
00:05:37,370 --> 00:05:40,880
serviceworker so in this whole

154
00:05:38,539 --> 00:05:42,979
progressive web app hype that has been

155
00:05:40,880 --> 00:05:45,010
going on we have different concepts

156
00:05:42,979 --> 00:05:47,240
database objects towards transactions um

157
00:05:45,010 --> 00:05:50,210
but the gist of it is if you want to

158
00:05:47,240 --> 00:05:52,160
retrieve a single value from index CB

159
00:05:50,210 --> 00:05:54,888
you need about 30 lines of code okay and

160
00:05:52,160 --> 00:05:58,520
so that's a lot of fun and it's also

161
00:05:54,889 --> 00:06:02,330
bound to an origin similar to your local

162
00:05:58,520 --> 00:06:03,830
storage and so I've avoided putting

163
00:06:02,330 --> 00:06:05,090
these 30 lines of boilerplate code here

164
00:06:03,830 --> 00:06:06,590
but let's just assume that there's a

165
00:06:05,090 --> 00:06:08,448
function which is called get ID b entry

166
00:06:06,590 --> 00:06:10,340
and it will return of the database

167
00:06:08,449 --> 00:06:12,860
database and its objects or objects or

168
00:06:10,340 --> 00:06:15,799
the value proto and so if we use that

169
00:06:12,860 --> 00:06:17,479
and it's it's controlled by an attacker

170
00:06:15,800 --> 00:06:18,860
then also this script can go horribly

171
00:06:17,479 --> 00:06:20,210
wrong in terms of XSS

172
00:06:18,860 --> 00:06:22,010
what are we doing we're creating a

173
00:06:20,210 --> 00:06:23,359
script element and then we assigning the

174
00:06:22,010 --> 00:06:25,370
source property of the script element

175
00:06:23,360 --> 00:06:28,070
with proto which we assume is controlled

176
00:06:25,370 --> 00:06:30,440
by an attacker so I can just put kitten

177
00:06:28,070 --> 00:06:33,500
pics torge there are GPS kitten picks at

178
00:06:30,440 --> 00:06:35,719
org and in this case then the this

179
00:06:33,500 --> 00:06:38,180
content will be loaded from my page and

180
00:06:35,719 --> 00:06:39,800
not the intended site

181
00:06:38,180 --> 00:06:42,170
and so now that you have some background

182
00:06:39,800 --> 00:06:43,910
knowledge about sources and sinks

183
00:06:42,170 --> 00:06:45,710
actually that mario's take over and

184
00:06:43,910 --> 00:06:49,850
totally know about how we can find now

185
00:06:45,710 --> 00:06:51,919
XSS in the world yes oh thanks banned

186
00:06:49,850 --> 00:06:53,510
for bringing us all up to speed of what

187
00:06:51,920 --> 00:06:57,380
we are actually trying to investigate

188
00:06:53,510 --> 00:06:59,780
and if you have attended some of the

189
00:06:57,380 --> 00:07:01,790
other talks talking about XSS and also

190
00:06:59,780 --> 00:07:04,070
follow what Ben was just telling you

191
00:07:01,790 --> 00:07:06,190
about different kind of sources and some

192
00:07:04,070 --> 00:07:09,530
sinks which then lead to code execution

193
00:07:06,190 --> 00:07:12,740
also having fetish talk in which he make

194
00:07:09,530 --> 00:07:15,640
use of a flint urge to actually find

195
00:07:12,740 --> 00:07:18,320
such assignments to dangerous things

196
00:07:15,640 --> 00:07:19,969
we're essentially doing a similar thing

197
00:07:18,320 --> 00:07:22,520
so we want to track they are coming from

198
00:07:19,970 --> 00:07:25,250
these and ending up in a dangerous sink

199
00:07:22,520 --> 00:07:27,380
but contrary to to what was shown before

200
00:07:25,250 --> 00:07:29,540
we're doing this dynamically so we're

201
00:07:27,380 --> 00:07:32,570
building upon research that Ben actually

202
00:07:29,540 --> 00:07:34,640
has done during C PhD where we build a

203
00:07:32,570 --> 00:07:37,070
chromium patched it's such that it has

204
00:07:34,640 --> 00:07:39,950
taint tracking in it such that we can

205
00:07:37,070 --> 00:07:41,540
really have a bind by level train

206
00:07:39,950 --> 00:07:44,150
tracking of these values which already

207
00:07:41,540 --> 00:07:46,100
Nate from these different client-side

208
00:07:44,150 --> 00:07:48,770
stores and end up in the code executing

209
00:07:46,100 --> 00:07:50,360
sinks now in this image what you can

210
00:07:48,770 --> 00:07:52,549
actually see is that we have only

211
00:07:50,360 --> 00:07:56,120
cookies and local storage and that has a

212
00:07:52,550 --> 00:07:58,400
simple technical issue so we cannot

213
00:07:56,120 --> 00:08:01,340
actually track indexeddb with with that

214
00:07:58,400 --> 00:08:03,260
taint engine simply because in 2013 when

215
00:08:01,340 --> 00:08:06,679
the thing was built in XT wasn't so hot

216
00:08:03,260 --> 00:08:10,010
around then and it just wasn't available

217
00:08:06,680 --> 00:08:12,590
in the engine so but we still wanted to

218
00:08:10,010 --> 00:08:14,390
have a look at how indexeddb actually

219
00:08:12,590 --> 00:08:16,010
factors in the setting of persistent

220
00:08:14,390 --> 00:08:18,650
client-side cross-site scripting which

221
00:08:16,010 --> 00:08:20,420
is why we actually did a second analysis

222
00:08:18,650 --> 00:08:23,870
which is a little little bit more

223
00:08:20,420 --> 00:08:26,510
simplistic in nature and it has the

224
00:08:23,870 --> 00:08:28,070
concept of or it embraces the concept of

225
00:08:26,510 --> 00:08:30,650
duck typing and you probably know that

226
00:08:28,070 --> 00:08:32,950
so if something walks like a duck and it

227
00:08:30,650 --> 00:08:34,909
quacks like a duck it's a duck and

228
00:08:32,950 --> 00:08:37,460
essentially what we're doing is we're

229
00:08:34,909 --> 00:08:39,230
looking in index DB and if it looks like

230
00:08:37,460 --> 00:08:41,360
code so like to have a script or HTML

231
00:08:39,230 --> 00:08:43,700
code then we just try to substitute it

232
00:08:41,360 --> 00:08:45,710
and see where we can get with that but

233
00:08:43,700 --> 00:08:47,780
more on that later so for the for in

234
00:08:45,710 --> 00:08:50,930
next couple of minutes we'll actually

235
00:08:47,780 --> 00:08:51,889
focus on our first analysis so the one

236
00:08:50,930 --> 00:08:55,368
where we make use of

237
00:08:51,889 --> 00:08:57,619
the tainted chromium so let's start out

238
00:08:55,369 --> 00:09:00,170
with actually the collection of these

239
00:08:57,619 --> 00:09:03,019
data flows so we make use of the tainted

240
00:09:00,170 --> 00:09:05,389
chromium run it on some webpages collect

241
00:09:03,019 --> 00:09:07,759
data flows and such things might look

242
00:09:05,389 --> 00:09:10,519
like it is displayed on the page so we

243
00:09:07,759 --> 00:09:12,919
have some item either in cookies or

244
00:09:10,519 --> 00:09:15,709
local storage so in that case it's with

245
00:09:12,919 --> 00:09:17,179
the key user ID and the value foo and we

246
00:09:15,709 --> 00:09:19,899
have recorded the data flow which you

247
00:09:17,179 --> 00:09:22,220
can see is exhibited by this script so

248
00:09:19,899 --> 00:09:24,559
let me just quickly walk you through it

249
00:09:22,220 --> 00:09:26,689
so there is an item being retrieved from

250
00:09:24,559 --> 00:09:29,839
local storage with the key user ID and

251
00:09:26,689 --> 00:09:33,498
then later on it's used inside an evil

252
00:09:29,839 --> 00:09:35,029
call and with this information so we

253
00:09:33,499 --> 00:09:37,489
have a data flow which we can track so

254
00:09:35,029 --> 00:09:39,230
we have a call to evil within the data

255
00:09:37,489 --> 00:09:43,069
and we know where the data is coming

256
00:09:39,230 --> 00:09:45,889
from namely from a storage what we can

257
00:09:43,069 --> 00:09:48,378
now do is go to the second step of our

258
00:09:45,889 --> 00:09:51,319
analysis and build an export candidate

259
00:09:48,379 --> 00:09:54,049
now what this means is we look at ah

260
00:09:51,319 --> 00:09:55,910
where the value is exactly being used

261
00:09:54,049 --> 00:09:58,879
within the string that is passed to the

262
00:09:55,910 --> 00:10:01,488
dangerous sink and we automatically

263
00:09:58,879 --> 00:10:03,639
generate an export candidate that breaks

264
00:10:01,489 --> 00:10:06,019
out of the existing context and then

265
00:10:03,639 --> 00:10:09,290
executes the payload that we want to and

266
00:10:06,019 --> 00:10:12,379
if we look at an example it instantly

267
00:10:09,290 --> 00:10:14,748
becomes a lot more clear so if you look

268
00:10:12,379 --> 00:10:16,669
at where we have the injection point we

269
00:10:14,749 --> 00:10:19,610
can see that we are in an assignment to

270
00:10:16,669 --> 00:10:22,040
here the variable user with a single

271
00:10:19,610 --> 00:10:23,869
quote so what we first have to do is

272
00:10:22,040 --> 00:10:26,480
break out of the existing contacts that

273
00:10:23,869 --> 00:10:27,829
means we add like a single tick there we

274
00:10:26,480 --> 00:10:29,959
also add a semicolon to end the

275
00:10:27,829 --> 00:10:31,519
statement then we can add an arbitrary

276
00:10:29,959 --> 00:10:34,459
payload which is in this case just

277
00:10:31,519 --> 00:10:36,949
alerting XSS and then if you pay close

278
00:10:34,459 --> 00:10:39,258
attention we still have to to take care

279
00:10:36,949 --> 00:10:42,829
of this this quote here so we just add a

280
00:10:39,259 --> 00:10:44,720
comment to take care of that and this

281
00:10:42,829 --> 00:10:47,238
like magic gears in the middle of this

282
00:10:44,720 --> 00:10:51,319
is open source we put that in get up and

283
00:10:47,239 --> 00:10:54,319
also just recently we have also released

284
00:10:51,319 --> 00:10:55,429
the the tainted chromium engine so but

285
00:10:54,319 --> 00:10:59,748
you'll find more on that on the last

286
00:10:55,429 --> 00:11:01,519
slide so having such an expert candidate

287
00:10:59,749 --> 00:11:03,049
does not yet mean that we have found

288
00:11:01,519 --> 00:11:05,720
actually a cross-site scripting

289
00:11:03,049 --> 00:11:07,490
vulnerability and that is simply because

290
00:11:05,720 --> 00:11:09,860
if we change something in the browser

291
00:11:07,490 --> 00:11:11,930
the data flow can also be changed so if

292
00:11:09,860 --> 00:11:13,579
there is a routine which checks that the

293
00:11:11,930 --> 00:11:15,410
the value stored in one of these stores

294
00:11:13,579 --> 00:11:17,479
has a certain structure and now we

295
00:11:15,410 --> 00:11:19,879
change the structure the data flow might

296
00:11:17,480 --> 00:11:21,649
just not happen this is why we need to

297
00:11:19,879 --> 00:11:24,170
validate that our candidates actually

298
00:11:21,649 --> 00:11:26,060
work in browsers so essentially we just

299
00:11:24,170 --> 00:11:28,579
visit the web application

300
00:11:26,060 --> 00:11:30,888
let it all fill up all the storages and

301
00:11:28,579 --> 00:11:33,319
all the caches and then we just

302
00:11:30,889 --> 00:11:36,079
substitute our candidate into into the

303
00:11:33,319 --> 00:11:38,569
storage mechanism and reload the page if

304
00:11:36,079 --> 00:11:41,300
our payload survives the reload and the

305
00:11:38,569 --> 00:11:43,759
same data flow happens we have our

306
00:11:41,300 --> 00:11:45,829
payload executing and with this we have

307
00:11:43,759 --> 00:11:48,410
like this automated pipeline where we

308
00:11:45,829 --> 00:11:51,349
can visit pages collect data flows build

309
00:11:48,410 --> 00:11:53,000
expert candidates and also verify that

310
00:11:51,350 --> 00:11:56,449
these are real vulnerabilities in web

311
00:11:53,000 --> 00:11:58,550
applications and with this we are

312
00:11:56,449 --> 00:12:02,149
basically set so now we can start

313
00:11:58,550 --> 00:12:05,120
turning to like exploiting web

314
00:12:02,149 --> 00:12:07,819
applications at scale and that's what we

315
00:12:05,120 --> 00:12:10,670
did so we did an empirical study we

316
00:12:07,819 --> 00:12:13,160
visited the top 5,000 domains we found

317
00:12:10,670 --> 00:12:14,899
that around 2,000 of those make use of

318
00:12:13,160 --> 00:12:16,430
data which comes from one of these

319
00:12:14,899 --> 00:12:18,319
client-side stores somewhere within

320
00:12:16,430 --> 00:12:21,469
their application so it might end up in

321
00:12:18,319 --> 00:12:24,290
the dorm for example with 1600 from

322
00:12:21,470 --> 00:12:27,470
cookies and 940 of those from local

323
00:12:24,290 --> 00:12:29,660
storage and the interesting part is that

324
00:12:27,470 --> 00:12:31,699
we found 418 domains which were

325
00:12:29,660 --> 00:12:36,199
susceptible to an exploitable data flow

326
00:12:31,699 --> 00:12:38,569
so 418 are susceptible to if an attacker

327
00:12:36,199 --> 00:12:40,878
can control one of these storage entries

328
00:12:38,569 --> 00:12:44,149
they have a persistent code execution

329
00:12:40,879 --> 00:12:47,329
inside the victim's browser what is

330
00:12:44,149 --> 00:12:48,850
interesting is that 30% of the cookie

331
00:12:47,329 --> 00:12:51,620
flows which we had were exploitable and

332
00:12:48,850 --> 00:12:54,860
24% of the local storage froze so local

333
00:12:51,620 --> 00:12:57,050
storage is really in a sense trusted by

334
00:12:54,860 --> 00:12:59,360
developers and in general we can see

335
00:12:57,050 --> 00:13:01,069
that developers really put trust into

336
00:12:59,360 --> 00:13:04,970
the integrity of these clients have

337
00:13:01,069 --> 00:13:06,740
storage mechanisms and so in essence

338
00:13:04,970 --> 00:13:08,809
they think that whatever they put in

339
00:13:06,740 --> 00:13:11,059
there is also the same value which they

340
00:13:08,809 --> 00:13:14,689
later on retrieve and this might not

341
00:13:11,059 --> 00:13:17,269
necessarily be the case but we did not

342
00:13:14,689 --> 00:13:17,579
only want to kind of find these bugs but

343
00:13:17,269 --> 00:13:20,430
also

344
00:13:17,580 --> 00:13:22,170
find the the root causes of those so why

345
00:13:20,430 --> 00:13:26,270
are people even making use of these

346
00:13:22,170 --> 00:13:28,709
persistent values in the first place and

347
00:13:26,270 --> 00:13:30,689
what we did was essentially looking at

348
00:13:28,710 --> 00:13:33,030
all our exploits trying to find patterns

349
00:13:30,690 --> 00:13:36,090
and see what developers essentially

350
00:13:33,030 --> 00:13:39,089
wanted to do with them and we found four

351
00:13:36,090 --> 00:13:41,340
categories the first one being just some

352
00:13:39,090 --> 00:13:43,590
textual stuff which should be displayed

353
00:13:41,340 --> 00:13:45,480
somewhere in the Dom so for example they

354
00:13:43,590 --> 00:13:47,420
have some string and they just pass it

355
00:13:45,480 --> 00:13:49,590
to innerhtml something of these sorts

356
00:13:47,420 --> 00:13:53,729
this was the biggest category with

357
00:13:49,590 --> 00:13:56,280
around 214 domains and there was no real

358
00:13:53,730 --> 00:13:58,890
you know no structure no nothing

359
00:13:56,280 --> 00:14:01,140
another big category which we found was

360
00:13:58,890 --> 00:14:04,650
actually the storage of of structured

361
00:14:01,140 --> 00:14:06,870
data and this was the case for 108

362
00:14:04,650 --> 00:14:09,750
domains so they restored Jason or

363
00:14:06,870 --> 00:14:12,000
JavaScript stringify objects inside

364
00:14:09,750 --> 00:14:13,980
these stores and later on just put them

365
00:14:12,000 --> 00:14:16,230
into Evo

366
00:14:13,980 --> 00:14:17,940
the next big category which we could

367
00:14:16,230 --> 00:14:20,340
find was code caching so Ben already

368
00:14:17,940 --> 00:14:22,140
hinted at in the example so the

369
00:14:20,340 --> 00:14:24,240
developers just put some HTML or

370
00:14:22,140 --> 00:14:26,790
JavaScript code inside into the store

371
00:14:24,240 --> 00:14:28,560
and then later on just retrieved it put

372
00:14:26,790 --> 00:14:32,160
it into eva or directly enraged you know

373
00:14:28,560 --> 00:14:35,790
and the last category which was a little

374
00:14:32,160 --> 00:14:38,280
bit more more like we didn't expect that

375
00:14:35,790 --> 00:14:40,110
to be honest so that there was lots of

376
00:14:38,280 --> 00:14:41,610
sites which stored configuration

377
00:14:40,110 --> 00:14:43,740
information and what we do we mean with

378
00:14:41,610 --> 00:14:45,630
configuration information in this case

379
00:14:43,740 --> 00:14:47,280
it's just simply host names from which

380
00:14:45,630 --> 00:14:50,310
further scripting resources should be

381
00:14:47,280 --> 00:14:52,500
fetched from so essentially just doing

382
00:14:50,310 --> 00:14:54,449
some size some sort of client-side load

383
00:14:52,500 --> 00:14:59,910
balancing at least that's what we

384
00:14:54,450 --> 00:15:02,580
suspect but you have no bear with me for

385
00:14:59,910 --> 00:15:04,920
a longer period of time while I didn't

386
00:15:02,580 --> 00:15:07,710
really tell you anything about the the

387
00:15:04,920 --> 00:15:09,510
thread model so you might ask yourself

388
00:15:07,710 --> 00:15:12,240
so yeah tempering with client-side

389
00:15:09,510 --> 00:15:14,160
storages that is really really strong

390
00:15:12,240 --> 00:15:16,440
attacker model that might be the case if

391
00:15:14,160 --> 00:15:18,480
you give me access to your computer and

392
00:15:16,440 --> 00:15:20,940
let me use your use your computer to

393
00:15:18,480 --> 00:15:22,860
Facebook and I sneak up and open the

394
00:15:20,940 --> 00:15:24,540
developer tools and just put in some

395
00:15:22,860 --> 00:15:26,460
some local storage entries or some

396
00:15:24,540 --> 00:15:28,800
cookies but that's not really like a

397
00:15:26,460 --> 00:15:30,960
realistic threat model which we normally

398
00:15:28,800 --> 00:15:32,670
consider in the area of web security

399
00:15:30,960 --> 00:15:35,670
and that's why we will not talk about

400
00:15:32,670 --> 00:15:39,260
more like well-known attacker models so

401
00:15:35,670 --> 00:15:42,120
say Network and grab attackers but first

402
00:15:39,260 --> 00:15:47,730
let's see of what we actually are trying

403
00:15:42,120 --> 00:15:50,250
to achieve so we actually want to have

404
00:15:47,730 --> 00:15:52,080
an infection vector so somehow an

405
00:15:50,250 --> 00:15:54,000
attacker can tamper with these storages

406
00:15:52,080 --> 00:15:56,250
and then later on he has the added

407
00:15:54,000 --> 00:15:58,410
benefit of having a persistent code

408
00:15:56,250 --> 00:16:00,630
execution on the client side and for

409
00:15:58,410 --> 00:16:03,030
that like again a single infection is

410
00:16:00,630 --> 00:16:05,670
sufficient and that the benefit is you

411
00:16:03,030 --> 00:16:07,800
can mine bitcoins forever in the user's

412
00:16:05,670 --> 00:16:09,990
browser or you can plant key loggers if

413
00:16:07,800 --> 00:16:11,579
for example session information is not

414
00:16:09,990 --> 00:16:15,290
accessible via JavaScript and you need

415
00:16:11,580 --> 00:16:17,820
to fish for credentials and the first

416
00:16:15,290 --> 00:16:19,349
attacker model which we consider for

417
00:16:17,820 --> 00:16:22,380
that is actually the network attacker

418
00:16:19,350 --> 00:16:24,660
and the network attacker is again as

419
00:16:22,380 --> 00:16:29,490
usual said somewhere in the wire may be

420
00:16:24,660 --> 00:16:33,270
hosts an open Wi-Fi and just listens and

421
00:16:29,490 --> 00:16:36,450
modifies HTTP traffic in this case the

422
00:16:33,270 --> 00:16:38,550
user is visiting some hidden pictures

423
00:16:36,450 --> 00:16:41,960
website so Sebastian already introduced

424
00:16:38,550 --> 00:16:44,280
to our groups liking of cat pictures and

425
00:16:41,960 --> 00:16:46,680
the the network attacker sits on the

426
00:16:44,280 --> 00:16:48,180
wire intercepts that request modifies

427
00:16:46,680 --> 00:16:50,459
the response a little bit to also

428
00:16:48,180 --> 00:16:52,770
include a hidden iframe pointing to the

429
00:16:50,460 --> 00:16:55,620
side that the attacker wants to target

430
00:16:52,770 --> 00:16:57,270
in this case that's that bank.com the

431
00:16:55,620 --> 00:16:58,950
resource naturally being pointed again

432
00:16:57,270 --> 00:17:00,900
to http such that the attacker can

433
00:16:58,950 --> 00:17:04,260
intercept the subsequent request and

434
00:17:00,900 --> 00:17:06,119
then I had some subscribe which then

435
00:17:04,260 --> 00:17:09,690
tempers with one of the storages so

436
00:17:06,119 --> 00:17:11,729
either says cookies or like plants for

437
00:17:09,690 --> 00:17:15,510
example values in the HTTP version of

438
00:17:11,730 --> 00:17:17,010
local storage again remember that so for

439
00:17:15,510 --> 00:17:18,660
local storage bound to an origin means

440
00:17:17,010 --> 00:17:21,180
that it's hecka in this case can also

441
00:17:18,660 --> 00:17:24,000
only temper with the HTTP version of the

442
00:17:21,180 --> 00:17:25,110
local storage however for cookies has

443
00:17:24,000 --> 00:17:26,490
been pointed out it's a little bit

444
00:17:25,109 --> 00:17:29,550
different and the attacker has more

445
00:17:26,490 --> 00:17:31,770
capabilities there now there might want

446
00:17:29,550 --> 00:17:33,270
might be one security mechanism which

447
00:17:31,770 --> 00:17:36,030
prevents the attacker from actually

448
00:17:33,270 --> 00:17:38,010
doing that and it's called HSTs cool

449
00:17:36,030 --> 00:17:39,720
mechanism HTTP strict Transport Security

450
00:17:38,010 --> 00:17:42,360
we've heard it any questions just

451
00:17:39,720 --> 00:17:44,820
earlier and what this essentially does

452
00:17:42,360 --> 00:17:46,408
is it once deployed by Bank

453
00:17:44,820 --> 00:17:48,360
the problem is a mechanism which is a

454
00:17:46,409 --> 00:17:50,820
trust on first use mechanism so it

455
00:17:48,360 --> 00:17:53,309
instructs the browser to only ever visit

456
00:17:50,820 --> 00:17:55,320
bank.com via HTTPS ever again so

457
00:17:53,309 --> 00:17:58,259
completely eradicating the threat that

458
00:17:55,320 --> 00:18:00,960
the nadenka can intercept HTTP traffic

459
00:17:58,259 --> 00:18:04,409
on that site now there's one small

460
00:18:00,960 --> 00:18:06,630
caveat namely that a sound deployment of

461
00:18:04,409 --> 00:18:09,000
HSTs needs to include subdomains flag

462
00:18:06,630 --> 00:18:11,070
because otherwise the attacker can just

463
00:18:09,000 --> 00:18:13,590
simply point it to a non-existing sub

464
00:18:11,070 --> 00:18:15,779
domain of bank.com and still do cookies

465
00:18:13,590 --> 00:18:18,629
shenanigans because you can set cookies

466
00:18:15,779 --> 00:18:20,009
from subdomains to parent domains so

467
00:18:18,629 --> 00:18:23,459
having essentially the same attack

468
00:18:20,009 --> 00:18:25,669
vector now this does not work for local

469
00:18:23,460 --> 00:18:28,789
storage because it's bound to an origin

470
00:18:25,669 --> 00:18:31,080
now having talked about our first

471
00:18:28,789 --> 00:18:33,960
attacker model let's talk about the

472
00:18:31,080 --> 00:18:36,809
second one so the web attacker now the

473
00:18:33,960 --> 00:18:41,970
web attacker as usual hosts cat pictures

474
00:18:36,809 --> 00:18:43,950
and any background tries to to like

475
00:18:41,970 --> 00:18:46,289
tamper with the user's browser in this

476
00:18:43,950 --> 00:18:48,450
case our web pitaka actually uses

477
00:18:46,289 --> 00:18:50,279
another form of process scripting so a

478
00:18:48,450 --> 00:18:52,860
reflected variety of cross-site

479
00:18:50,279 --> 00:18:54,629
scripting to get code execution and thus

480
00:18:52,860 --> 00:18:57,870
again plant a payload in the specific

481
00:18:54,629 --> 00:18:59,699
origin where he has a decode execution

482
00:18:57,870 --> 00:19:03,779
or for cookies again being able to do it

483
00:18:59,700 --> 00:19:05,580
for the the registerable domain and with

484
00:19:03,779 --> 00:19:07,919
this information we can now start

485
00:19:05,580 --> 00:19:10,710
looking at which of the applications

486
00:19:07,919 --> 00:19:12,330
have both like I are both acceptable to

487
00:19:10,710 --> 00:19:14,730
one of these infection vectors and then

488
00:19:12,330 --> 00:19:17,490
later on have a persistent XSS to find

489
00:19:14,730 --> 00:19:18,990
end-to-end exploit ability and that's

490
00:19:17,490 --> 00:19:22,529
what we did and we have our to attack

491
00:19:18,990 --> 00:19:24,179
our models again and we find that 290

492
00:19:22,529 --> 00:19:25,620
domains are susceptible to enter an

493
00:19:24,179 --> 00:19:27,659
exploit ability by our network

494
00:19:25,620 --> 00:19:31,739
attacker either because they completely

495
00:19:27,659 --> 00:19:34,830
lack HTTPS adoption or they had HTTPS

496
00:19:31,740 --> 00:19:37,679
they had HSTs but simply forgot to have

497
00:19:34,830 --> 00:19:38,309
the include supplements flag now for the

498
00:19:37,679 --> 00:19:40,769
web attacker

499
00:19:38,309 --> 00:19:44,090
are we used the very same engine to to

500
00:19:40,769 --> 00:19:47,220
scan for reflected client-side XSS and

501
00:19:44,090 --> 00:19:48,870
there we found 65 sites having both a

502
00:19:47,220 --> 00:19:50,759
reflective client-side and the

503
00:19:48,870 --> 00:19:52,649
persistent client-side XSS

504
00:19:50,759 --> 00:19:54,000
now obviously these are lower bounds

505
00:19:52,649 --> 00:19:57,000
because we only scan for that particular

506
00:19:54,000 --> 00:19:58,169
type of exercise and if you trust the

507
00:19:57,000 --> 00:19:59,309
reports the figure

508
00:19:58,169 --> 00:20:01,230
right had security reports which

509
00:19:59,309 --> 00:20:05,639
indicate that every third application

510
00:20:01,230 --> 00:20:07,710
has an XSS this is a lot more severe and

511
00:20:05,639 --> 00:20:09,359
also thinking about you only need an

512
00:20:07,710 --> 00:20:11,999
axis as once in your lifetime if you

513
00:20:09,359 --> 00:20:14,158
have a persistent XSS to have an

514
00:20:11,999 --> 00:20:16,470
attacker plant the payload persistently

515
00:20:14,159 --> 00:20:18,600
in your web application and let's be

516
00:20:16,470 --> 00:20:22,320
honest at some point web application

517
00:20:18,600 --> 00:20:24,029
will have an XSS and that way this is

518
00:20:22,320 --> 00:20:25,950
the infection vector where the attacker

519
00:20:24,029 --> 00:20:30,570
can permanently get a foothold in in

520
00:20:25,950 --> 00:20:32,159
your application and now I'll actually

521
00:20:30,570 --> 00:20:33,720
like to show you a little demo of how

522
00:20:32,159 --> 00:20:36,749
such an end-to-end exploitation might

523
00:20:33,720 --> 00:20:38,340
look like so what we are just first

524
00:20:36,749 --> 00:20:40,289
doing is clearing all the client-side

525
00:20:38,340 --> 00:20:42,749
storages and you might wonder why we're

526
00:20:40,289 --> 00:20:44,970
using edge in this case because we use

527
00:20:42,749 --> 00:20:46,710
the Nexus S which still makes use of the

528
00:20:44,970 --> 00:20:49,440
old encoding behavior such that the

529
00:20:46,710 --> 00:20:52,320
hashes not encoded which is only present

530
00:20:49,440 --> 00:20:54,239
now in at and what the first thing which

531
00:20:52,320 --> 00:20:55,980
we're doing is just visiting the target

532
00:20:54,239 --> 00:20:58,289
application which is a Chinese single

533
00:20:55,980 --> 00:21:01,289
sign-on provider and it's a little bit

534
00:20:58,289 --> 00:21:04,169
slow but just such that you get a feel

535
00:21:01,289 --> 00:21:06,029
on how this set looks and feels just in

536
00:21:04,169 --> 00:21:08,129
all web application

537
00:21:06,029 --> 00:21:10,169
now we're also closing the top steps we

538
00:21:08,129 --> 00:21:12,029
don't make any cross-origin exploitation

539
00:21:10,169 --> 00:21:14,669
so something like that and visit the the

540
00:21:12,029 --> 00:21:17,639
attackers page and in this case we are

541
00:21:14,669 --> 00:21:18,929
using a reflected client-side XSS to

542
00:21:17,639 --> 00:21:22,080
plant the payload you can see that there

543
00:21:18,929 --> 00:21:24,629
is an iframe there are some weird tags

544
00:21:22,080 --> 00:21:26,908
there so we just inject something and

545
00:21:24,629 --> 00:21:29,759
the site doesn't look as nice and now

546
00:21:26,909 --> 00:21:31,289
importantly we close all the browser so

547
00:21:29,759 --> 00:21:34,289
there is no JavaScript running nothing

548
00:21:31,289 --> 00:21:36,299
and the user might now switch to like

549
00:21:34,289 --> 00:21:37,649
the home network or some time may pass

550
00:21:36,299 --> 00:21:39,779
before the user visits the web

551
00:21:37,649 --> 00:21:42,959
application again and now we visit it

552
00:21:39,779 --> 00:21:45,809
again and or if now Dan is planted the

553
00:21:42,960 --> 00:21:49,139
payload our payload injected a key

554
00:21:45,809 --> 00:21:50,908
logging functionality and in this way we

555
00:21:49,139 --> 00:21:52,738
will soon alert the credentials of the

556
00:21:50,909 --> 00:21:54,389
user but naturally this could be

557
00:21:52,739 --> 00:21:57,230
anything so you can send the credentials

558
00:21:54,389 --> 00:21:58,979
to to your server and also just like

559
00:21:57,230 --> 00:22:03,419
obviously it'd be a little bit more

560
00:21:58,980 --> 00:22:04,950
stealthy than we are here and I promised

561
00:22:03,419 --> 00:22:07,739
you that we are also having a look at

562
00:22:04,950 --> 00:22:09,659
index DB X credibility and that's what

563
00:22:07,739 --> 00:22:11,430
we are going to do now so really a

564
00:22:09,659 --> 00:22:13,350
stupid analysis

565
00:22:11,430 --> 00:22:17,490
and we looked at the top 10,000 sites

566
00:22:13,350 --> 00:22:21,480
this time and interestingly we found

567
00:22:17,490 --> 00:22:24,150
that 1,400 actually used indexdb that

568
00:22:21,480 --> 00:22:25,800
was pretty surprising to us but if we

569
00:22:24,150 --> 00:22:29,610
haven't looked a little bit more closely

570
00:22:25,800 --> 00:22:31,800
we found that 470 actually really didn't

571
00:22:29,610 --> 00:22:33,629
make use of indexdb at all but we

572
00:22:31,800 --> 00:22:35,730
suspect that they just make use of it

573
00:22:33,630 --> 00:22:37,500
for fingerprinting purposes to have one

574
00:22:35,730 --> 00:22:41,340
more bit of entropy to see if the

575
00:22:37,500 --> 00:22:43,440
browser actually supports indexdb and of

576
00:22:41,340 --> 00:22:45,689
the rest of those most of them used it

577
00:22:43,440 --> 00:22:50,240
through third-party code which again

578
00:22:45,690 --> 00:22:53,670
underlines that indexdb is a pain to use

579
00:22:50,240 --> 00:22:56,010
so as as already hinted at we looked at

580
00:22:53,670 --> 00:22:58,020
entries which resemble a JavaScript

581
00:22:56,010 --> 00:23:00,660
codes or parse it as JavaScript see if

582
00:22:58,020 --> 00:23:03,090
there's an error if not nice we found a

583
00:23:00,660 --> 00:23:05,340
JavaScript code and also just parse it

584
00:23:03,090 --> 00:23:07,530
for HTML look for tags and if there are

585
00:23:05,340 --> 00:23:11,370
tax just substitute some HTML payload in

586
00:23:07,530 --> 00:23:12,870
there and just if we have looked at what

587
00:23:11,370 --> 00:23:14,340
we found with the taint engine we found

588
00:23:12,870 --> 00:23:17,340
100 in cases where there were

589
00:23:14,340 --> 00:23:19,080
client-side code caching and this gives

590
00:23:17,340 --> 00:23:21,419
us already a pretty good feeling that we

591
00:23:19,080 --> 00:23:24,510
probably find something here

592
00:23:21,420 --> 00:23:27,150
and indeed we found 80 sites which had a

593
00:23:24,510 --> 00:23:31,920
flow originating from index DB going to

594
00:23:27,150 --> 00:23:33,780
into like like a sink but of our expert

595
00:23:31,920 --> 00:23:35,940
candidates 60 out of 80 actually world

596
00:23:33,780 --> 00:23:37,770
so with this really stupid analysis we

597
00:23:35,940 --> 00:23:41,790
found 60 sites which are susceptible to

598
00:23:37,770 --> 00:23:44,850
persistent client-side XSS and it is

599
00:23:41,790 --> 00:23:46,649
really underlines that this is a real

600
00:23:44,850 --> 00:23:48,449
threat and applications and an attacker

601
00:23:46,650 --> 00:23:50,970
doesn't even have to have the

602
00:23:48,450 --> 00:23:53,750
sophisticated machinery but just can

603
00:23:50,970 --> 00:23:57,210
simply look if something resembles code

604
00:23:53,750 --> 00:23:59,130
but since we're not only here to tell

605
00:23:57,210 --> 00:24:00,240
you that the rap is like totally screwed

606
00:23:59,130 --> 00:24:03,600
up because that's what you're probably

607
00:24:00,240 --> 00:24:05,970
already all know we also want to kind of

608
00:24:03,600 --> 00:24:08,760
advocate and and tell you a little bit

609
00:24:05,970 --> 00:24:11,940
of what we found in the world and how

610
00:24:08,760 --> 00:24:13,890
you might actually do better and that's

611
00:24:11,940 --> 00:24:16,730
what Ben's now going to present to you

612
00:24:13,890 --> 00:24:16,730
in the rest of this talk

613
00:24:16,909 --> 00:24:22,320
right thank you so much until here so

614
00:24:19,889 --> 00:24:24,539
let's briefly go back to a slide that

615
00:24:22,320 --> 00:24:26,939
Mario's showed before and that is what

616
00:24:24,539 --> 00:24:28,669
type of data was being stored in in the

617
00:24:26,940 --> 00:24:30,929
storages and that was exploitable and

618
00:24:28,669 --> 00:24:32,249
and essentially we he said in the

619
00:24:30,929 --> 00:24:33,539
beginning on structured data so this

620
00:24:32,249 --> 00:24:35,039
might for example be a username right

621
00:24:33,539 --> 00:24:37,349
this is the string not meant to be

622
00:24:35,039 --> 00:24:39,379
caught and all these other things as

623
00:24:37,349 --> 00:24:41,580
well so the question is now how can we

624
00:24:39,379 --> 00:24:44,129
like looking at the applications that we

625
00:24:41,580 --> 00:24:46,468
saw how could we have secured them even

626
00:24:44,129 --> 00:24:48,089
in the presence of well an adversary

627
00:24:46,469 --> 00:24:50,039
that is able enough tampering with these

628
00:24:48,089 --> 00:24:52,049
local storages so essentially how can we

629
00:24:50,039 --> 00:24:53,669
protect our applications properly and I

630
00:24:52,049 --> 00:24:55,080
want to go one by one through these

631
00:24:53,669 --> 00:24:57,599
these use cases and give you a feeling

632
00:24:55,080 --> 00:24:59,399
of like this is how things go wrong hope

633
00:24:57,599 --> 00:25:01,109
oftentimes trivially they go wrong and

634
00:24:59,399 --> 00:25:04,139
then also how you can build your

635
00:25:01,109 --> 00:25:07,259
applications in a better way so the

636
00:25:04,139 --> 00:25:09,089
biggest contributor was well data that

637
00:25:07,259 --> 00:25:11,549
had no apparent structure right so it

638
00:25:09,089 --> 00:25:14,009
was username or maybe like a language or

639
00:25:11,549 --> 00:25:17,070
or something like this and we saw this

640
00:25:14,009 --> 00:25:19,049
on on 214 domains essentially this is

641
00:25:17,070 --> 00:25:21,239
just an example that we see here so we

642
00:25:19,049 --> 00:25:23,129
get like the previous URL from local

643
00:25:21,239 --> 00:25:27,359
storage so this is meant to show a back

644
00:25:23,129 --> 00:25:29,218
link to the previous page and assuming

645
00:25:27,359 --> 00:25:31,109
that this is under control of the of the

646
00:25:29,219 --> 00:25:33,719
attacker here the local storage value I

647
00:25:31,109 --> 00:25:35,489
can obviously inject something here in

648
00:25:33,719 --> 00:25:37,710
this this last URL parameter and then

649
00:25:35,489 --> 00:25:39,599
have an exploit and now you might wonder

650
00:25:37,710 --> 00:25:40,710
but wait there's no local storage this

651
00:25:39,599 --> 00:25:41,729
is being accessed and it's being

652
00:25:40,710 --> 00:25:43,139
overwritten so this would not be

653
00:25:41,729 --> 00:25:45,239
persistent right this would be a single

654
00:25:43,139 --> 00:25:46,978
shot the thing is if I already have

655
00:25:45,239 --> 00:25:49,679
JavaScript code execution it's very easy

656
00:25:46,979 --> 00:25:51,479
for me to just hook assigning properties

657
00:25:49,679 --> 00:25:52,589
of local storage and if it's the value

658
00:25:51,479 --> 00:25:54,539
that I don't want to have overwritten

659
00:25:52,589 --> 00:25:56,969
I'll just say yeah sure I wrote this was

660
00:25:54,539 --> 00:25:58,349
saved this is fine but keep my malicious

661
00:25:56,969 --> 00:26:02,159
payload in there so we really persist

662
00:25:58,349 --> 00:26:04,408
here in this case and as you might know

663
00:26:02,159 --> 00:26:05,759
this is kind of the most common case

664
00:26:04,409 --> 00:26:07,950
that you see also for XSS where you have

665
00:26:05,759 --> 00:26:09,989
a username and somebody injects HTML or

666
00:26:07,950 --> 00:26:11,399
using this username and JavaScript and

667
00:26:09,989 --> 00:26:14,489
somebody breaks out of the JavaScript

668
00:26:11,399 --> 00:26:15,718
and therefore there's existing solutions

669
00:26:14,489 --> 00:26:17,339
and one of them is actually from

670
00:26:15,719 --> 00:26:19,139
purified and so what you would like to

671
00:26:17,339 --> 00:26:22,859
do here is really have some context

672
00:26:19,139 --> 00:26:23,908
where sanitization and in this case if

673
00:26:22,859 --> 00:26:24,899
you think about it what you would like

674
00:26:23,909 --> 00:26:28,200
to have is well you would like to have

675
00:26:24,899 --> 00:26:29,290
an href that is a ul and an HTTP URL

676
00:26:28,200 --> 00:26:30,790
that's it doesn't shouldn't be

677
00:26:29,290 --> 00:26:32,980
our script I shouldn't have an on-click

678
00:26:30,790 --> 00:26:34,840
it shouldn't have a non-event on other

679
00:26:32,980 --> 00:26:36,520
events and so on

680
00:26:34,840 --> 00:26:38,949
so essentially don't purify takes care

681
00:26:36,520 --> 00:26:40,780
of that for you being aware of the

682
00:26:38,950 --> 00:26:42,640
context and just making sure that this

683
00:26:40,780 --> 00:26:45,070
anchor element does not have anything

684
00:26:42,640 --> 00:26:48,580
that that could sorry maliciously

685
00:26:45,070 --> 00:26:50,200
execute code so it's that simple of a

686
00:26:48,580 --> 00:26:52,300
solution if you compare it to the to the

687
00:26:50,200 --> 00:26:54,400
switch really just this one thing in in

688
00:26:52,300 --> 00:26:55,750
between and it's important that we use

689
00:26:54,400 --> 00:26:57,430
something like this and not to say how

690
00:26:55,750 --> 00:26:58,630
we can just use inner text because then

691
00:26:57,430 --> 00:27:00,940
we would break functionality right

692
00:26:58,630 --> 00:27:04,060
because we want to write a link here so

693
00:27:00,940 --> 00:27:07,090
we cannot use inner inner text all right

694
00:27:04,060 --> 00:27:11,590
so the second thing that we saw a lot is

695
00:27:07,090 --> 00:27:13,179
JSON or JavaScript like objects so I'm

696
00:27:11,590 --> 00:27:14,340
sure that you all know that evil is a

697
00:27:13,180 --> 00:27:17,590
really bad idea

698
00:27:14,340 --> 00:27:20,290
security wise functionality wise evil is

699
00:27:17,590 --> 00:27:22,659
great and if you stick a well formatted

700
00:27:20,290 --> 00:27:23,500
JSON into Evon you'll get the proper

701
00:27:22,660 --> 00:27:25,810
object out of it

702
00:27:23,500 --> 00:27:28,270
if you take something that closely

703
00:27:25,810 --> 00:27:31,090
resembles Jason but doesn't use double

704
00:27:28,270 --> 00:27:33,070
ticks but single 6:4 delimiting that is

705
00:27:31,090 --> 00:27:35,290
technically not valid JSON so we need to

706
00:27:33,070 --> 00:27:37,270
have double quotes and Jason parse will

707
00:27:35,290 --> 00:27:39,129
tell you not this is not Jason okay and

708
00:27:37,270 --> 00:27:41,070
so if you have for example service a

709
00:27:39,130 --> 00:27:46,120
framework that initially generates this

710
00:27:41,070 --> 00:27:47,230
jason with single ticks then jason parts

711
00:27:46,120 --> 00:27:48,939
will not work so that's why it makes

712
00:27:47,230 --> 00:27:51,670
sense if you want to say it like this

713
00:27:48,940 --> 00:27:52,900
and to actually use use eval here and so

714
00:27:51,670 --> 00:27:55,270
that's what's what happening right so we

715
00:27:52,900 --> 00:27:57,540
have a local storage visitor info here

716
00:27:55,270 --> 00:28:00,940
we are evaluating this so to essentially

717
00:27:57,540 --> 00:28:02,830
deserialize this this value and then

718
00:28:00,940 --> 00:28:04,780
increase here the number of page hits

719
00:28:02,830 --> 00:28:06,879
and then write it back again and so in

720
00:28:04,780 --> 00:28:09,100
this case and you might think this is

721
00:28:06,880 --> 00:28:11,080
like a made-up example it's inspired by

722
00:28:09,100 --> 00:28:12,879
real world things that we saw and so

723
00:28:11,080 --> 00:28:13,980
people actually did this and then in the

724
00:28:12,880 --> 00:28:18,400
end use jason stringify

725
00:28:13,980 --> 00:28:19,630
so well the answer is really that's

726
00:28:18,400 --> 00:28:22,270
simple I'm not sure if you saw the

727
00:28:19,630 --> 00:28:24,190
transition here I'll replace eval with

728
00:28:22,270 --> 00:28:25,980
jason parse right so this works well for

729
00:28:24,190 --> 00:28:28,480
anything that has been properly

730
00:28:25,980 --> 00:28:30,700
generated from JavaScript or a proper

731
00:28:28,480 --> 00:28:33,310
json library so if you find these

732
00:28:30,700 --> 00:28:34,780
occurrences in your website then just go

733
00:28:33,310 --> 00:28:36,429
the easy way and then make sure that

734
00:28:34,780 --> 00:28:39,190
it's jason that is in there not some

735
00:28:36,430 --> 00:28:40,840
weird javascript object and in general

736
00:28:39,190 --> 00:28:42,100
well don't make use of evil but I think

737
00:28:40,840 --> 00:28:43,780
that's not

738
00:28:42,100 --> 00:28:45,159
it's especially not with something that

739
00:28:43,780 --> 00:28:49,240
could be controlled by by an attacker

740
00:28:45,160 --> 00:28:51,280
but then it's somewhat obviously cold

741
00:28:49,240 --> 00:28:53,860
cashing those also one of the things

742
00:28:51,280 --> 00:28:56,110
that surprised us a lot and so people

743
00:28:53,860 --> 00:28:57,610
were trying to especially third parties

744
00:28:56,110 --> 00:28:59,070
we're trying to make sure that their

745
00:28:57,610 --> 00:29:01,149
scripts were loaded quickly

746
00:28:59,070 --> 00:29:02,530
so essentially what they would do is on

747
00:29:01,150 --> 00:29:04,270
the first time that you downloaded the

748
00:29:02,530 --> 00:29:06,220
script this the content of the script

749
00:29:04,270 --> 00:29:08,440
would be written to local storage and

750
00:29:06,220 --> 00:29:11,020
then if you visit the page again this

751
00:29:08,440 --> 00:29:13,620
core is executed so they first get the

752
00:29:11,020 --> 00:29:16,540
the library code which is stored locally

753
00:29:13,620 --> 00:29:17,919
evaluate that and then once the page is

754
00:29:16,540 --> 00:29:19,629
loaded they have all the time in the

755
00:29:17,920 --> 00:29:21,850
world to update the library okay

756
00:29:19,630 --> 00:29:23,800
and so again same issue as we saw before

757
00:29:21,850 --> 00:29:26,740
as an attacker I can still make sure

758
00:29:23,800 --> 00:29:28,360
that local storage is not overwritten so

759
00:29:26,740 --> 00:29:30,400
once I have a persistent foot hole in

760
00:29:28,360 --> 00:29:32,169
there and even if the library tries to

761
00:29:30,400 --> 00:29:33,460
override the local storage value I can

762
00:29:32,170 --> 00:29:36,370
control that and just make sure that

763
00:29:33,460 --> 00:29:38,380
nothing gets gets overwritten and this

764
00:29:36,370 --> 00:29:40,060
very clearly shows on one problem where

765
00:29:38,380 --> 00:29:41,590
people think okay I write something into

766
00:29:40,060 --> 00:29:43,210
the local storage and nobody will be

767
00:29:41,590 --> 00:29:45,699
able to tamper with this and clearly as

768
00:29:43,210 --> 00:29:48,910
we've seen in our examples here this is

769
00:29:45,700 --> 00:29:50,830
not the case and also if you think about

770
00:29:48,910 --> 00:29:53,350
the the things Mary said about the

771
00:29:50,830 --> 00:29:55,300
network attacker right and so you might

772
00:29:53,350 --> 00:29:56,830
for example not if you are here the

773
00:29:55,300 --> 00:29:58,720
public Wi-Fi and you might not do

774
00:29:56,830 --> 00:30:00,010
certain more dangerous things right so

775
00:29:58,720 --> 00:30:01,840
you say okay now this is that in

776
00:30:00,010 --> 00:30:04,270
contrast of network so what I will do is

777
00:30:01,840 --> 00:30:05,649
I will not log into Facebook right this

778
00:30:04,270 --> 00:30:07,629
is this is dangerous somebody could be

779
00:30:05,650 --> 00:30:09,520
tampering with me however if we managed

780
00:30:07,630 --> 00:30:12,160
to infect your machine here and you go

781
00:30:09,520 --> 00:30:14,200
home you feel very safe right and and if

782
00:30:12,160 --> 00:30:15,790
then all of a sudden our our code is

783
00:30:14,200 --> 00:30:17,470
being executed here from local storage

784
00:30:15,790 --> 00:30:18,790
and you are going to be screwed at home

785
00:30:17,470 --> 00:30:21,970
and didn't even know when you got

786
00:30:18,790 --> 00:30:24,520
infected in the first place all right so

787
00:30:21,970 --> 00:30:28,060
what is the solution well one solution

788
00:30:24,520 --> 00:30:30,490
is don't do that if you want to do that

789
00:30:28,060 --> 00:30:32,350
and there might be good reasons if you

790
00:30:30,490 --> 00:30:34,270
want to if you want to consider that

791
00:30:32,350 --> 00:30:36,280
real-time bidding for ads is a good

792
00:30:34,270 --> 00:30:38,290
reason then that's one reason and what

793
00:30:36,280 --> 00:30:40,030
we mostly saw this where you want as the

794
00:30:38,290 --> 00:30:42,070
ad company to be loaded very quickly so

795
00:30:40,030 --> 00:30:44,620
you can do your real-time bidding and

796
00:30:42,070 --> 00:30:46,929
you can just use well best practices in

797
00:30:44,620 --> 00:30:48,699
terms of cryptographic signatures and

798
00:30:46,930 --> 00:30:51,820
this is actually inspired also by a fix

799
00:30:48,700 --> 00:30:53,650
to to a problem because we also where we

800
00:30:51,820 --> 00:30:55,030
at least try to reach out to two people

801
00:30:53,650 --> 00:30:56,920
that were affected and the

802
00:30:55,030 --> 00:30:58,480
providers not all of them responded or I

803
00:30:56,920 --> 00:31:00,880
think understood what we wanted to tell

804
00:30:58,480 --> 00:31:02,320
them um but this is actually what one

805
00:31:00,880 --> 00:31:04,120
provider did so essentially they now

806
00:31:02,320 --> 00:31:08,860
have in local storage this lip code and

807
00:31:04,120 --> 00:31:11,770
they split the lip code by the the first

808
00:31:08,860 --> 00:31:13,240
new line right and and so then the first

809
00:31:11,770 --> 00:31:15,760
line of the code now is a cryptographic

810
00:31:13,240 --> 00:31:17,860
signature over the rest of the the code

811
00:31:15,760 --> 00:31:19,960
okay and then they just do this

812
00:31:17,860 --> 00:31:21,729
verification here so verify signature

813
00:31:19,960 --> 00:31:23,200
they have some public key the signature

814
00:31:21,730 --> 00:31:25,840
and the code and only if that holds true

815
00:31:23,200 --> 00:31:27,430
then they will execute the code okay so

816
00:31:25,840 --> 00:31:29,709
even if as an attacker I managed to

817
00:31:27,430 --> 00:31:30,880
compromise the storage nothing is ever

818
00:31:29,710 --> 00:31:33,340
going to happen because I cannot

819
00:31:30,880 --> 00:31:36,580
generate a valid signature for that

820
00:31:33,340 --> 00:31:38,800
particular piece of code the alternative

821
00:31:36,580 --> 00:31:41,980
which is actually better in terms of

822
00:31:38,800 --> 00:31:43,899
isolation is actually service workers so

823
00:31:41,980 --> 00:31:46,060
not sure who of you has already work

824
00:31:43,900 --> 00:31:48,400
with service workers they are kind of a

825
00:31:46,060 --> 00:31:50,679
background task more or less that is

826
00:31:48,400 --> 00:31:52,420
able to intercept network requests and

827
00:31:50,680 --> 00:31:55,060
also in particularly it's meant to be

828
00:31:52,420 --> 00:31:57,340
used for for offline applications and so

829
00:31:55,060 --> 00:31:58,389
what you can do in this case is in the

830
00:31:57,340 --> 00:31:59,949
service worker just add this event

831
00:31:58,390 --> 00:32:02,710
listener for a fetch event so if I'm

832
00:31:59,950 --> 00:32:04,900
trying to get a resource and effectively

833
00:32:02,710 --> 00:32:07,150
see do I have that resource cached and

834
00:32:04,900 --> 00:32:08,680
if so then just deliver that directly

835
00:32:07,150 --> 00:32:10,690
right so it's really the service worker

836
00:32:08,680 --> 00:32:11,980
and not the extra server and and then

837
00:32:10,690 --> 00:32:13,810
again in the background because this is

838
00:32:11,980 --> 00:32:16,060
running all the time you can do your

839
00:32:13,810 --> 00:32:17,679
updates you can fetch the library again

840
00:32:16,060 --> 00:32:20,350
and have it like the current version

841
00:32:17,680 --> 00:32:22,930
cached and so this is really nice in

842
00:32:20,350 --> 00:32:25,449
particular because Service Worker are

843
00:32:22,930 --> 00:32:27,040
isolated from the page itself so even if

844
00:32:25,450 --> 00:32:28,330
the if the page says I want to run the

845
00:32:27,040 --> 00:32:30,760
Service Worker there's no way for the

846
00:32:28,330 --> 00:32:32,710
page to script into the serviceworker so

847
00:32:30,760 --> 00:32:34,780
if you have an XSS in the page nothing

848
00:32:32,710 --> 00:32:37,270
is going to happen when one exam with

849
00:32:34,780 --> 00:32:39,010
one exception I told you before

850
00:32:37,270 --> 00:32:41,260
indexeddb is shared between the

851
00:32:39,010 --> 00:32:43,300
serviceworker and the main page and so

852
00:32:41,260 --> 00:32:45,400
if the serviceworker uses index CBT for

853
00:32:43,300 --> 00:32:48,129
caching then it's again stupid because

854
00:32:45,400 --> 00:32:51,310
then it's scriptable somebody can script

855
00:32:48,130 --> 00:32:55,150
into it again the final thing that we

856
00:32:51,310 --> 00:32:57,550
saw is host names or configuration

857
00:32:55,150 --> 00:32:59,020
information so as mario said this is

858
00:32:57,550 --> 00:33:01,389
somewhat client-side load balancing

859
00:32:59,020 --> 00:33:04,270
right so you when the client first

860
00:33:01,390 --> 00:33:06,429
visits your page you will randomly

861
00:33:04,270 --> 00:33:08,410
select one of your CDN servers to be the

862
00:33:06,429 --> 00:33:09,790
host for the scripts and

863
00:33:08,410 --> 00:33:12,580
that will be persisted in the under

864
00:33:09,790 --> 00:33:14,290
client here but obviously if I can if

865
00:33:12,580 --> 00:33:16,750
I'm in control as the attacker of the

866
00:33:14,290 --> 00:33:17,950
host here I have controlled from where

867
00:33:16,750 --> 00:33:19,810
the script is included and again this is

868
00:33:17,950 --> 00:33:21,670
going to be my attackers website in this

869
00:33:19,810 --> 00:33:24,879
case and so we looked at these

870
00:33:21,670 --> 00:33:28,590
particular cases and it turns out that

871
00:33:24,880 --> 00:33:31,720
in virtually all cases this was a

872
00:33:28,590 --> 00:33:34,090
subdomain of a common host name okay so

873
00:33:31,720 --> 00:33:36,760
we always it was CDN one.com city

874
00:33:34,090 --> 00:33:39,159
intercom so the very trivial solutions

875
00:33:36,760 --> 00:33:41,980
actually just have a whitelist just make

876
00:33:39,160 --> 00:33:44,980
sure that it's either in a fixed

877
00:33:41,980 --> 00:33:47,560
whitelist of hosts or make sure that the

878
00:33:44,980 --> 00:33:49,300
suffix is from addcom right and then if

879
00:33:47,560 --> 00:33:51,250
you make sure that this happens then

880
00:33:49,300 --> 00:33:54,580
even if as the attacker I'm able to

881
00:33:51,250 --> 00:33:56,380
control the this value in local storage

882
00:33:54,580 --> 00:33:58,060
or in the cookies and nothing can happen

883
00:33:56,380 --> 00:34:02,890
because I won't by posture the whitelist

884
00:33:58,060 --> 00:34:04,980
check all right okay so let me give you

885
00:34:02,890 --> 00:34:07,480
a bit of a conclusion here and then

886
00:34:04,980 --> 00:34:08,710
share some somewhat exciting you said

887
00:34:07,480 --> 00:34:09,510
you already spoiled out a little bit but

888
00:34:08,710 --> 00:34:12,310
it's fine

889
00:34:09,510 --> 00:34:14,410
so processing exercise I hope I have

890
00:34:12,310 --> 00:34:16,299
first or we have first shown you that

891
00:34:14,409 --> 00:34:17,259
you should not just say there's Dom XSS

892
00:34:16,300 --> 00:34:19,210
okay

893
00:34:17,260 --> 00:34:21,610
there is reflected and persistent

894
00:34:19,210 --> 00:34:24,850
client-side cross-site scripting and as

895
00:34:21,610 --> 00:34:27,460
Marius showed you also with with a demo

896
00:34:24,850 --> 00:34:29,139
that we had if you have a one-time

897
00:34:27,460 --> 00:34:31,810
infection be it by a network attack or

898
00:34:29,139 --> 00:34:33,339
by a web attacker your your application

899
00:34:31,810 --> 00:34:35,770
might be screw for a very long time and

900
00:34:33,340 --> 00:34:37,660
importantly you as the developer of the

901
00:34:35,770 --> 00:34:39,400
site you won't even know right because

902
00:34:37,659 --> 00:34:42,668
it's not it's not your database on your

903
00:34:39,400 --> 00:34:46,270
machine it's on your clients or on your

904
00:34:42,668 --> 00:34:48,009
user's machine we did this empirical

905
00:34:46,270 --> 00:34:51,130
study again academics we have to do

906
00:34:48,010 --> 00:34:53,919
empirical studies a lot and we saw that

907
00:34:51,130 --> 00:34:55,570
off the about 2000 of the 5,000 sites

908
00:34:53,918 --> 00:34:58,450
that we looked at since that made use of

909
00:34:55,570 --> 00:35:00,910
local storage of cookies 400 18 or 22

910
00:34:58,450 --> 00:35:02,560
percent are actually exploitable and

911
00:35:00,910 --> 00:35:04,569
depending on the type of attacker model

912
00:35:02,560 --> 00:35:07,990
that we consider we either have our 300

913
00:35:04,570 --> 00:35:09,490
or 65 sites that that are susceptible to

914
00:35:07,990 --> 00:35:12,279
this end-to-end exploitation that that

915
00:35:09,490 --> 00:35:15,459
Mario's shot you and even this trivially

916
00:35:12,280 --> 00:35:17,200
stupid way of looking at indexdb really

917
00:35:15,460 --> 00:35:18,820
just like doesn't look like javascript

918
00:35:17,200 --> 00:35:21,180
code let's replace it with a reload one

919
00:35:18,820 --> 00:35:23,460
right allowed us to find

920
00:35:21,180 --> 00:35:25,440
sixty sites that are are vulnerable so

921
00:35:23,460 --> 00:35:27,240
if you want to next time you look at

922
00:35:25,440 --> 00:35:29,430
your own website or if your as working

923
00:35:27,240 --> 00:35:30,629
it's a consult no pentester look at the

924
00:35:29,430 --> 00:35:31,828
company's website please do have a look

925
00:35:30,630 --> 00:35:34,200
at these things and see if there's

926
00:35:31,829 --> 00:35:36,559
trivially JavaScript or HTML in there

927
00:35:34,200 --> 00:35:39,299
because it's very obvious to to see and

928
00:35:36,559 --> 00:35:40,470
then for other people that have been

929
00:35:39,300 --> 00:35:42,780
have been going through this conferences

930
00:35:40,470 --> 00:35:44,730
a while um I've been also here for a

931
00:35:42,780 --> 00:35:47,520
while and I've been talking in previous

932
00:35:44,730 --> 00:35:50,160
years a lot about our ways to

933
00:35:47,520 --> 00:35:51,990
automatically find reflected clients

934
00:35:50,160 --> 00:35:53,790
that XSS so we had to say also taint

935
00:35:51,990 --> 00:35:55,649
engine that would allow you to track all

936
00:35:53,790 --> 00:35:57,960
this data flows from source to sink and

937
00:35:55,650 --> 00:35:59,280
then even on top of that at this exploit

938
00:35:57,960 --> 00:36:01,440
generation that Marius was talking about

939
00:35:59,280 --> 00:36:03,150
and for a very long time there was an

940
00:36:01,440 --> 00:36:06,119
issue of us not making that engine

941
00:36:03,150 --> 00:36:08,730
available I don't want to go into the

942
00:36:06,119 --> 00:36:10,890
legal reasons for why that is I can just

943
00:36:08,730 --> 00:36:12,390
say we have agreed upon that we don't

944
00:36:10,890 --> 00:36:15,058
care about the legal reasons anymore at

945
00:36:12,390 --> 00:36:17,040
this point so it's been a while that has

946
00:36:15,059 --> 00:36:18,690
been running and actually last night I

947
00:36:17,040 --> 00:36:21,690
uploaded to that particular github

948
00:36:18,690 --> 00:36:23,550
repository our our taint engine which

949
00:36:21,690 --> 00:36:25,319
allows you to visit a web site and just

950
00:36:23,550 --> 00:36:27,270
have a have all the data flows coming

951
00:36:25,319 --> 00:36:29,099
from all the sources that we discussed

952
00:36:27,270 --> 00:36:31,410
here and including also location.href

953
00:36:29,099 --> 00:36:34,200
and so on they're doing two things

954
00:36:31,410 --> 00:36:36,180
things like document write evil etc and

955
00:36:34,200 --> 00:36:39,509
so you can run that yourself there's one

956
00:36:36,180 --> 00:36:42,118
caveat this is an engine room 2014 it is

957
00:36:39,510 --> 00:36:46,170
there's more bugs in Chrome from that

958
00:36:42,119 --> 00:36:47,579
period so don't run it as root on your

959
00:36:46,170 --> 00:36:48,690
machine and visit are just arbitrary

960
00:36:47,579 --> 00:36:50,069
websites okay

961
00:36:48,690 --> 00:36:52,950
you want to play around with it feel

962
00:36:50,069 --> 00:36:54,839
free to do so we've also added as I said

963
00:36:52,950 --> 00:36:56,578
I made the expert generator available so

964
00:36:54,839 --> 00:36:57,750
the data flows that this engine can

965
00:36:56,579 --> 00:36:59,760
collect you can't resist akin to the

966
00:36:57,750 --> 00:37:01,920
expert generator and will return a URL

967
00:36:59,760 --> 00:37:04,079
that you can visit too

968
00:37:01,920 --> 00:37:06,089
I'll try and exploit the the size of

969
00:37:04,079 --> 00:37:08,160
them obviously only your own or those

970
00:37:06,089 --> 00:37:11,970
ones that you are assigned to to test

971
00:37:08,160 --> 00:37:14,129
and finally don't trust the locals right

972
00:37:11,970 --> 00:37:16,529
and so don't assume that the integrity

973
00:37:14,130 --> 00:37:19,799
within your your clients or your

974
00:37:16,530 --> 00:37:22,380
customers web browser cannot be tampered

975
00:37:19,799 --> 00:37:23,609
with and I think we've shown this and at

976
00:37:22,380 --> 00:37:24,960
this point we'd like to thank you very

977
00:37:23,609 --> 00:37:28,430
much for your attention and if you have

978
00:37:24,960 --> 00:37:28,430
any questions feel free to ask them

979
00:37:30,650 --> 00:37:36,019
[Applause]

980
00:37:37,190 --> 00:37:42,059
if you don't ask questions Ben will make

981
00:37:40,380 --> 00:37:46,880
some stupid jokes and you don't want

982
00:37:42,059 --> 00:37:50,670
that don't quote me on that

983
00:37:46,880 --> 00:38:03,480
hi great talk is it sick extend these

984
00:37:50,670 --> 00:38:06,240
topics so I mean we have the issue of

985
00:38:03,480 --> 00:38:09,150
Dom blubbering right and that has also

986
00:38:06,240 --> 00:38:12,660
been known I'm not in too much details

987
00:38:09,150 --> 00:38:14,970
on how this is still a hot topic in

988
00:38:12,660 --> 00:38:17,009
today's browsers because I've had to

989
00:38:14,970 --> 00:38:19,618
look at this like a couple of months ago

990
00:38:17,009 --> 00:38:21,210
and things were a lot different than the

991
00:38:19,619 --> 00:38:22,920
results that were like back then I don't

992
00:38:21,210 --> 00:38:27,180
even know when when Dom clubbing was

993
00:38:22,920 --> 00:38:30,299
really shown to be around but so I I

994
00:38:27,180 --> 00:38:31,890
guess you should really question the

995
00:38:30,299 --> 00:38:34,739
integrity of a lot of things in your

996
00:38:31,890 --> 00:38:37,558
applications and and don't take it for

997
00:38:34,739 --> 00:38:39,390
granted so at some point it's really

998
00:38:37,559 --> 00:38:41,670
better to ask questions and put in

999
00:38:39,390 --> 00:38:44,578
defense mechanisms in depth rather than

1000
00:38:41,670 --> 00:38:48,359
to just blindly trust the integrity of

1001
00:38:44,579 --> 00:38:49,980
the web application and just one thing I

1002
00:38:48,359 --> 00:38:52,739
want to add and also going back to the

1003
00:38:49,980 --> 00:38:54,539
previous talk we talked about well event

1004
00:38:52,739 --> 00:38:56,759
handlers and the way that you can use

1005
00:38:54,539 --> 00:38:58,619
them with CSP and essentially I could

1006
00:38:56,759 --> 00:39:00,329
also think of a situation where I'd not

1007
00:38:58,619 --> 00:39:02,700
as the attacker I'd not inject like a

1008
00:39:00,329 --> 00:39:05,730
script alert one anymore but I would

1009
00:39:02,700 --> 00:39:07,649
just inject a particular piece of well

1010
00:39:05,730 --> 00:39:09,150
properly formatted HTML and I think

1011
00:39:07,650 --> 00:39:11,400
there was a talk on script gadgets I

1012
00:39:09,150 --> 00:39:12,749
think also last year here from from the

1013
00:39:11,400 --> 00:39:14,519
wrestle keys and other guys from from

1014
00:39:12,749 --> 00:39:15,509
Google and and essentially there are

1015
00:39:14,519 --> 00:39:18,419
there situations where you don't even

1016
00:39:15,509 --> 00:39:20,670
have to inject like markup anymore that

1017
00:39:18,420 --> 00:39:22,829
directly executes but you modify the

1018
00:39:20,670 --> 00:39:27,269
context of the page by either injecting

1019
00:39:22,829 --> 00:39:29,369
some some HTML or some angular well

1020
00:39:27,269 --> 00:39:30,499
markup or something entirely different

1021
00:39:29,369 --> 00:39:32,999
and then all of a sudden gets executed

1022
00:39:30,499 --> 00:39:35,609
and so it's not even that I have to

1023
00:39:32,999 --> 00:39:38,160
check hey is my code that is using stuff

1024
00:39:35,609 --> 00:39:40,078
from local storage does it not just

1025
00:39:38,160 --> 00:39:40,899
blindly eval it but I also need to

1026
00:39:40,079 --> 00:39:43,060
consider what happen

1027
00:39:40,900 --> 00:39:44,530
what would happen if now all of a sudden

1028
00:39:43,060 --> 00:39:46,090
the structure of my page would be

1029
00:39:44,530 --> 00:39:48,070
changed and maybe there was been element

1030
00:39:46,090 --> 00:39:49,420
with some identifier or whatever and and

1031
00:39:48,070 --> 00:39:50,950
all of a sudden everything breaks so I

1032
00:39:49,420 --> 00:39:52,900
think in general assuming that

1033
00:39:50,950 --> 00:39:56,049
everything that is on the client can be

1034
00:39:52,900 --> 00:39:59,200
tampered with should not be discounted

1035
00:39:56,050 --> 00:40:01,540
I think obviously if as Maria said

1036
00:39:59,200 --> 00:40:02,740
there's always going to be an XSS and in

1037
00:40:01,540 --> 00:40:04,330
this case we just need to sing a single

1038
00:40:02,740 --> 00:40:06,339
shot right and once we have that single

1039
00:40:04,330 --> 00:40:07,990
shot your page might be or your

1040
00:40:06,340 --> 00:40:12,010
customers might be screwed very long

1041
00:40:07,990 --> 00:40:13,270
time there's also one thing which I want

1042
00:40:12,010 --> 00:40:15,910
to mention there's one thing which you

1043
00:40:13,270 --> 00:40:18,310
can actually do which is a header that

1044
00:40:15,910 --> 00:40:20,379
you can send which just Radek eights all

1045
00:40:18,310 --> 00:40:23,160
client-side storages and also kills all

1046
00:40:20,380 --> 00:40:25,900
running JavaScript execution contexts

1047
00:40:23,160 --> 00:40:27,609
which is called clear site data so if

1048
00:40:25,900 --> 00:40:29,850
you suspect something like this

1049
00:40:27,610 --> 00:40:32,440
happening just put it out there and

1050
00:40:29,850 --> 00:40:35,080
clear all the storages of all your users

1051
00:40:32,440 --> 00:40:37,720
once and then you should be then you can

1052
00:40:35,080 --> 00:40:39,100
be certain that at least if your users

1053
00:40:37,720 --> 00:40:41,830
have whether the site have gotten the

1054
00:40:39,100 --> 00:40:49,330
header that the the storages are like

1055
00:40:41,830 --> 00:40:54,119
integer again thank you

1056
00:40:49,330 --> 00:40:54,119
[Applause]

