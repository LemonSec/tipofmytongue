1
00:00:03,220 --> 00:00:08,480
welcome to my talk I'm very pleased to

2
00:00:06,019 --> 00:00:10,219
kick off the defense track here at the

3
00:00:08,480 --> 00:00:12,530
app sack in Amsterdam that's very nice

4
00:00:10,219 --> 00:00:16,009
and I'm really excited to talk about

5
00:00:12,530 --> 00:00:17,240
high security settings with CRS I think

6
00:00:16,010 --> 00:00:19,580
it is the first time

7
00:00:17,240 --> 00:00:22,189
CRS in high security environments has

8
00:00:19,580 --> 00:00:24,729
ever been presented at the conference so

9
00:00:22,190 --> 00:00:27,290
this is really cool

10
00:00:24,730 --> 00:00:29,510
Who am I I'm the author of the second

11
00:00:27,290 --> 00:00:31,460
edition of the mod security handbook so

12
00:00:29,510 --> 00:00:35,120
I know we made about mod security and

13
00:00:31,460 --> 00:00:38,329
I'm also co-lead of the most mod

14
00:00:35,120 --> 00:00:40,849
security corals at project obviously the

15
00:00:38,329 --> 00:00:45,440
project with the longest name within

16
00:00:40,850 --> 00:00:47,839
OWASP good we could dive straight into

17
00:00:45,440 --> 00:00:49,789
the topic for today but I fear we would

18
00:00:47,839 --> 00:00:52,640
leave some of the audience behind so a

19
00:00:49,789 --> 00:00:56,329
couple of project members more situated

20
00:00:52,640 --> 00:00:58,879
in that field hi guys so this is going

21
00:00:56,329 --> 00:01:00,920
to be a bit boring for you for all the

22
00:00:58,879 --> 00:01:03,138
more security enthusiasts but I want to

23
00:01:00,920 --> 00:01:04,939
bring everybody on the same page have

24
00:01:03,139 --> 00:01:06,409
everybody in the boat when we really

25
00:01:04,938 --> 00:01:09,289
start to get serious about the high

26
00:01:06,409 --> 00:01:15,170
security here so I'm going to explain a

27
00:01:09,290 --> 00:01:17,719
few things first let me start with what

28
00:01:15,170 --> 00:01:21,320
is the web application firewall leaning

29
00:01:17,719 --> 00:01:25,880
on Wikipedia I'm defining above as a

30
00:01:21,320 --> 00:01:30,199
device that is monitoring filtering and

31
00:01:25,880 --> 00:01:34,039
blocking web traffic to the application

32
00:01:30,200 --> 00:01:36,530
and back to decline the back part is

33
00:01:34,039 --> 00:01:39,890
also important by inspecting HTTP

34
00:01:36,530 --> 00:01:42,109
traffic the valve is able to protect

35
00:01:39,890 --> 00:01:44,570
back end applications from security

36
00:01:42,109 --> 00:01:47,990
misconfigurations but namely cross-site

37
00:01:44,570 --> 00:01:50,059
scripting all sorts of injections local

38
00:01:47,990 --> 00:01:53,719
file inclusions remote command execution

39
00:01:50,060 --> 00:01:56,659
you name it a ton of security risk

40
00:01:53,719 --> 00:02:00,520
defined for example in yahwah's Felton

41
00:01:56,659 --> 00:02:06,350
modsecurity crs helps you with that

42
00:02:00,520 --> 00:02:10,209
protection so mod security is an engine

43
00:02:06,350 --> 00:02:13,890
that implements these features for you

44
00:02:10,209 --> 00:02:18,420
traditionally coupled with Apache

45
00:02:13,890 --> 00:02:22,529
it is the only open source web

46
00:02:18,420 --> 00:02:25,890
application firewall aimed in general

47
00:02:22,530 --> 00:02:28,320
HTTP so there are a lot of specific

48
00:02:25,890 --> 00:02:30,179
language specific application specific

49
00:02:28,320 --> 00:02:32,609
mouth offerings around their open source

50
00:02:30,180 --> 00:02:33,450
but if you want to protect your complete

51
00:02:32,610 --> 00:02:36,390
enterprise

52
00:02:33,450 --> 00:02:39,359
there is only most security in the open

53
00:02:36,390 --> 00:02:44,549
source domain that helps you with that

54
00:02:39,360 --> 00:02:46,410
task and there are now alternatives to

55
00:02:44,550 --> 00:02:50,430
run here that is true

56
00:02:46,410 --> 00:02:53,040
most security runs within fastly before

57
00:02:50,430 --> 00:02:55,050
yesterday we did a CRS community summit

58
00:02:53,040 --> 00:02:56,579
yesterday's we talked about CRS a lot

59
00:02:55,050 --> 00:02:59,430
yesterday already we've heard that

60
00:02:56,580 --> 00:03:02,489
varnish is about to release an offering

61
00:02:59,430 --> 00:03:04,650
to run Mott security rules within the

62
00:03:02,489 --> 00:03:06,989
product Asner is trying to do a very

63
00:03:04,650 --> 00:03:10,709
good job running more security on their

64
00:03:06,989 --> 00:03:12,630
platform natively verizon has

65
00:03:10,709 --> 00:03:15,690
reimplemented Mott security rule

66
00:03:12,630 --> 00:03:18,570
language in a product or software called

67
00:03:15,690 --> 00:03:22,709
raffles that is kind of open source but

68
00:03:18,570 --> 00:03:25,620
not quite the latest version so this is

69
00:03:22,709 --> 00:03:28,140
getting about much more diverse now

70
00:03:25,620 --> 00:03:31,230
there are alternative options coming up

71
00:03:28,140 --> 00:03:34,410
and additionally a lot of commercial

72
00:03:31,230 --> 00:03:36,780
vendors have either integrated mod

73
00:03:34,410 --> 00:03:39,810
security they have forked Mott security

74
00:03:36,780 --> 00:03:43,290
or have reimplemented the rule language

75
00:03:39,810 --> 00:03:46,440
of mod security so they could run rules

76
00:03:43,290 --> 00:03:48,870
not security rules within their service

77
00:03:46,440 --> 00:03:51,780
product appliance or offerings however

78
00:03:48,870 --> 00:03:53,519
you want to name it so not all these

79
00:03:51,780 --> 00:03:54,690
commercial vendors are like most of

80
00:03:53,519 --> 00:03:56,910
these commercial and is actually not

81
00:03:54,690 --> 00:03:58,620
advertising this fact that they have a

82
00:03:56,910 --> 00:04:03,630
bright and shiny product with under the

83
00:03:58,620 --> 00:04:05,970
hood it's actually not security and when

84
00:04:03,630 --> 00:04:08,989
you inspect this more closely then you

85
00:04:05,970 --> 00:04:12,959
realize that these vendors that is in

86
00:04:08,989 --> 00:04:15,450
order to run the choral said so you

87
00:04:12,959 --> 00:04:18,720
could say the main reason for people to

88
00:04:15,450 --> 00:04:21,418
run mod security is actually being able

89
00:04:18,720 --> 00:04:23,640
to run the choral set and as the co-lead

90
00:04:21,418 --> 00:04:25,890
of the CRS project I share this

91
00:04:23,640 --> 00:04:27,120
perspective the interesting thing about

92
00:04:25,890 --> 00:04:32,669
mod security

93
00:04:27,120 --> 00:04:35,250
is CRS not so much the engine good so

94
00:04:32,669 --> 00:04:37,198
what is CRS it's a good time to talk

95
00:04:35,250 --> 00:04:41,460
about CRS because the day before

96
00:04:37,199 --> 00:04:44,790
yesterday we released CRS 3.2 major

97
00:04:41,460 --> 00:04:46,799
release first major release in a year we

98
00:04:44,790 --> 00:04:48,720
came to Amsterdam to celebrate this and

99
00:04:46,800 --> 00:04:49,669
we had a lot of fun yesterday so that

100
00:04:48,720 --> 00:04:53,340
was really cool

101
00:04:49,669 --> 00:04:55,440
CRS is the standard modsecurity rule set

102
00:04:53,340 --> 00:04:57,119
that is what people are running when

103
00:04:55,440 --> 00:05:00,060
they talk about running modsecurity

104
00:04:57,120 --> 00:05:03,450
most of the time it runs on hundreds of

105
00:05:00,060 --> 00:05:06,540
terabit of traffic per second globally

106
00:05:03,450 --> 00:05:06,960
I've mentioned Verizon Verizon told us

107
00:05:06,540 --> 00:05:10,080
yes

108
00:05:06,960 --> 00:05:12,750
last year they run CRS on 50 terabit

109
00:05:10,080 --> 00:05:16,320
across the globe the huge amount of

110
00:05:12,750 --> 00:05:18,240
traffic being filtered by CRS and of

111
00:05:16,320 --> 00:05:19,979
Lordaeron there are alternative rules

112
00:05:18,240 --> 00:05:24,479
set around the commercial offerings

113
00:05:19,979 --> 00:05:27,469
around but CRS is the rule said they

114
00:05:24,479 --> 00:05:29,909
want to talk about CRS is a generic

115
00:05:27,470 --> 00:05:33,210
blacklisting rule set what does generic

116
00:05:29,910 --> 00:05:36,060
blacklisting mean unlike intrusion

117
00:05:33,210 --> 00:05:38,909
detection system that has patterns for

118
00:05:36,060 --> 00:05:42,690
specific attacks and known exploit

119
00:05:38,910 --> 00:05:45,870
covered in the CVE gets a pattern and

120
00:05:42,690 --> 00:05:46,590
the rule that stem blocked CRS doesn't

121
00:05:45,870 --> 00:05:51,120
work that way

122
00:05:46,590 --> 00:05:53,489
we're not blocking unknown exploit were

123
00:05:51,120 --> 00:05:55,830
blocking because it smells of SQL

124
00:05:53,490 --> 00:05:57,720
there's much more generic in that so not

125
00:05:55,830 --> 00:06:01,020
a known SQL injection is being blocked

126
00:05:57,720 --> 00:06:02,090
but a payload that has a scent of SQL is

127
00:06:01,020 --> 00:06:05,280
being blocked

128
00:06:02,090 --> 00:06:05,909
say like that this is surprisingly

129
00:06:05,280 --> 00:06:09,299
effective

130
00:06:05,910 --> 00:06:12,900
I mean we're don't claim to be a

131
00:06:09,300 --> 00:06:15,780
next-generation self-learning

132
00:06:12,900 --> 00:06:19,739
artificial intelligence cloud enabled

133
00:06:15,780 --> 00:06:22,469
security monster most security RS is a

134
00:06:19,740 --> 00:06:25,289
much more like a well tuned clockwork

135
00:06:22,470 --> 00:06:28,320
that gives you very granular control and

136
00:06:25,289 --> 00:06:30,300
this is especially important in high

137
00:06:28,320 --> 00:06:33,060
security settings where you want to have

138
00:06:30,300 --> 00:06:35,700
total control total monitoring

139
00:06:33,060 --> 00:06:38,099
capabilities over the traffic going into

140
00:06:35,700 --> 00:06:40,349
your application and going out of the

141
00:06:38,099 --> 00:06:42,270
application

142
00:06:40,350 --> 00:06:43,830
so even if we don't have the resources

143
00:06:42,270 --> 00:06:45,210
of the commercial vendors with the

144
00:06:43,830 --> 00:06:47,219
commercial product some of the

145
00:06:45,210 --> 00:06:50,000
integrating CRS some of them doing rules

146
00:06:47,220 --> 00:06:53,970
on their own we're doing quite good and

147
00:06:50,000 --> 00:06:58,470
it's a very popular project and it's

148
00:06:53,970 --> 00:07:01,350
very well suited to the task ahead here

149
00:06:58,470 --> 00:07:05,310
is a graph that I did two years ago and

150
00:07:01,350 --> 00:07:08,370
it shows you a pumped-up burb attacking

151
00:07:05,310 --> 00:07:10,470
a vulnerable application so we have an

152
00:07:08,370 --> 00:07:13,860
application with lots of known

153
00:07:10,470 --> 00:07:16,860
vulnerabilities Manchus to find out just

154
00:07:13,860 --> 00:07:20,910
how many of those vulnerabilities will

155
00:07:16,860 --> 00:07:22,350
burb be able to detect or discover verb

156
00:07:20,910 --> 00:07:24,240
executed four and a half million

157
00:07:22,350 --> 00:07:27,150
requests against this single application

158
00:07:24,240 --> 00:07:27,840
and with over a thousand requests in the

159
00:07:27,150 --> 00:07:30,000
first column

160
00:07:27,840 --> 00:07:32,280
burp would say look I think I hit the

161
00:07:30,000 --> 00:07:35,400
weakness there that is not a thousand

162
00:07:32,280 --> 00:07:38,219
weaknesses it boils down to 40 different

163
00:07:35,400 --> 00:07:40,710
vulnerabilities now in the second column

164
00:07:38,220 --> 00:07:44,280
that is the 5-minute default

165
00:07:40,710 --> 00:07:46,830
installation of CRS when doing the

166
00:07:44,280 --> 00:07:49,770
default installation local file

167
00:07:46,830 --> 00:07:51,960
inclusions no longer possible almost

168
00:07:49,770 --> 00:07:55,140
total protection their cross-site

169
00:07:51,960 --> 00:07:58,680
scripting greatly diminished SQL

170
00:07:55,140 --> 00:08:02,700
injection gone now Eskil injection isn't

171
00:07:58,680 --> 00:08:06,120
gone completely a dedicated and smart

172
00:08:02,700 --> 00:08:08,580
attacker is still able to pull off an

173
00:08:06,120 --> 00:08:11,700
SQL injection but the difference is now

174
00:08:08,580 --> 00:08:13,530
that burp is no longer being any

175
00:08:11,700 --> 00:08:15,300
assistance here you have to do this

176
00:08:13,530 --> 00:08:18,750
behind and you have to be really smart

177
00:08:15,300 --> 00:08:21,210
about this and know how s code works to

178
00:08:18,750 --> 00:08:24,420
be able to work your way around

179
00:08:21,210 --> 00:08:27,780
CRS even in a default installation so

180
00:08:24,420 --> 00:08:33,780
the default installation gives you very

181
00:08:27,780 --> 00:08:35,848
good coverage already of course in a

182
00:08:33,780 --> 00:08:38,400
high security setup you're probably

183
00:08:35,849 --> 00:08:40,770
ready to invest more than five minutes

184
00:08:38,400 --> 00:08:42,870
into default installation then default

185
00:08:40,770 --> 00:08:45,090
installation this is very additional

186
00:08:42,870 --> 00:08:48,240
three columns come into play we call

187
00:08:45,090 --> 00:08:50,760
this the higher paranoia levels so you

188
00:08:48,240 --> 00:08:51,840
have a default paranoia level in the

189
00:08:50,760 --> 00:08:53,220
second column in the default

190
00:08:51,840 --> 00:08:56,129
installation that's paranoia

191
00:08:53,220 --> 00:08:58,800
one and this brings you a hundred and

192
00:08:56,129 --> 00:09:01,980
fifty rules these rules are very well

193
00:08:58,800 --> 00:09:05,300
tested they're quite good a really good

194
00:09:01,980 --> 00:09:08,430
at detecting malicious traffic by

195
00:09:05,300 --> 00:09:13,459
detecting attackers and they have a

196
00:09:08,430 --> 00:09:16,469
characteristic of never or almost never

197
00:09:13,459 --> 00:09:17,758
touching vanilla traffic so you're

198
00:09:16,470 --> 00:09:20,009
paying customers

199
00:09:17,759 --> 00:09:24,060
they're almost usually they're not

200
00:09:20,009 --> 00:09:30,899
affected by these 150 standard or

201
00:09:24,060 --> 00:09:32,638
default rules so they these default

202
00:09:30,899 --> 00:09:35,519
rules make a very good distinction

203
00:09:32,639 --> 00:09:38,459
between the benign users and the

204
00:09:35,519 --> 00:09:41,459
attackers on the other hand that is very

205
00:09:38,459 --> 00:09:44,550
important now sometimes it may happen

206
00:09:41,459 --> 00:09:46,829
that a benign user is still affected so

207
00:09:44,550 --> 00:09:49,258
that would be a false alert a so-called

208
00:09:46,829 --> 00:09:51,089
false positive the user is stopped by

209
00:09:49,259 --> 00:09:54,389
executing his transaction or her

210
00:09:51,089 --> 00:09:57,540
transaction by a rule that does an error

211
00:09:54,389 --> 00:10:00,269
we want to get rid of these false alerts

212
00:09:57,540 --> 00:10:01,829
if you happen to bump into such a

213
00:10:00,269 --> 00:10:05,399
problem in the default installation

214
00:10:01,829 --> 00:10:08,008
please report it on our github and we

215
00:10:05,399 --> 00:10:11,009
try to update the rule so this doesn't

216
00:10:08,009 --> 00:10:12,959
happen the idea is you get a smooth

217
00:10:11,009 --> 00:10:15,389
installation a good experience

218
00:10:12,959 --> 00:10:18,420
installing it application continues to

219
00:10:15,389 --> 00:10:20,910
run without any hassle in reality we

220
00:10:18,420 --> 00:10:23,490
have to admit sometimes you get problems

221
00:10:20,910 --> 00:10:29,850
but we're ready there to help you with

222
00:10:23,490 --> 00:10:32,339
that good so a smart attacker if she's

223
00:10:29,850 --> 00:10:34,910
really smart she's able to work around

224
00:10:32,339 --> 00:10:37,079
the default installation we need

225
00:10:34,910 --> 00:10:41,129
additional rules

226
00:10:37,079 --> 00:10:44,459
to catch these attackers and these rules

227
00:10:41,129 --> 00:10:46,559
come into the higher paranoia levels we

228
00:10:44,459 --> 00:10:50,670
start out with a hundred and fifty and

229
00:10:46,559 --> 00:10:53,969
we grow to 200 rules when we raise the

230
00:10:50,670 --> 00:10:56,878
paranoia level to four so you get thirty

231
00:10:53,970 --> 00:10:59,309
additional rules at to another 15 at

232
00:10:56,879 --> 00:11:05,040
three and another five or ten a paranoia

233
00:10:59,309 --> 00:11:06,899
level for totaling 200 rules now the

234
00:11:05,040 --> 00:11:09,660
situation afterwards is

235
00:11:06,899 --> 00:11:11,759
is going to be like in dark protecting

236
00:11:09,660 --> 00:11:13,949
your house at the paranoia level one you

237
00:11:11,759 --> 00:11:16,860
have a very sensitive nice pet dog

238
00:11:13,949 --> 00:11:20,160
paranoia level four you really get a Mad

239
00:11:16,860 --> 00:11:22,050
Dog here and for an attacker for a

240
00:11:20,160 --> 00:11:24,449
burglar attacking your house in the

241
00:11:22,050 --> 00:11:26,959
night it's really hard to get around and

242
00:11:24,449 --> 00:11:29,279
Mad Dog it's really dangerous out here

243
00:11:26,959 --> 00:11:31,290
unfortunately it also has the unwanted

244
00:11:29,279 --> 00:11:33,720
side effect of biting your guests from

245
00:11:31,290 --> 00:11:35,790
time to time you could say that is a

246
00:11:33,720 --> 00:11:39,329
side effect of keeping a Mad Dog or

247
00:11:35,790 --> 00:11:44,849
running a higher paranoia level for that

248
00:11:39,329 --> 00:11:47,239
matter a dog biting your visitors that

249
00:11:44,850 --> 00:11:51,689
is a false positive the mailman

250
00:11:47,240 --> 00:11:54,569
delivering a post parcel or packet to

251
00:11:51,689 --> 00:11:57,629
your house being bitten by your dog that

252
00:11:54,569 --> 00:11:59,729
is a false positive and in order to run

253
00:11:57,629 --> 00:12:02,910
this successfully you have to get rid of

254
00:11:59,730 --> 00:12:08,009
the false positive you have to train

255
00:12:02,910 --> 00:12:12,480
your dog to no longer attack here guess

256
00:12:08,009 --> 00:12:15,749
that is a tuning process and that is can

257
00:12:12,480 --> 00:12:17,879
be very time consuming at paranoia level

258
00:12:15,749 --> 00:12:20,790
one you have sensitive talk will hardly

259
00:12:17,879 --> 00:12:23,490
ever bite anybody paranoia a level two

260
00:12:20,790 --> 00:12:25,559
dogs now they can be a bit mad and

261
00:12:23,490 --> 00:12:28,589
especially if it's a new mailman or the

262
00:12:25,559 --> 00:12:30,660
mailman has yummy legs might bite him

263
00:12:28,589 --> 00:12:33,829
per mile level 3 now it's really

264
00:12:30,660 --> 00:12:38,009
aggressive and a paranoia level 4

265
00:12:33,829 --> 00:12:41,099
without prior training the mailman will

266
00:12:38,009 --> 00:12:43,139
be torn into pieces unless you train

267
00:12:41,100 --> 00:12:47,879
your dog to refrain from all unwanted

268
00:12:43,139 --> 00:12:50,579
carnage here so the higher you go with

269
00:12:47,879 --> 00:12:53,970
paranoia levels the more false positives

270
00:12:50,579 --> 00:12:57,120
you get and the more resources more time

271
00:12:53,970 --> 00:12:59,749
you need to invest to tune them away

272
00:12:57,120 --> 00:13:03,269
this is just a time return-on-investment

273
00:12:59,749 --> 00:13:06,540
thing here to return to the dark

274
00:13:03,269 --> 00:13:10,589
metaphor you have to instruct the dog to

275
00:13:06,540 --> 00:13:12,868
leave the mailman alone that is possible

276
00:13:10,589 --> 00:13:16,139
the dog generally responds well to

277
00:13:12,869 --> 00:13:19,950
training it follows two instructions and

278
00:13:16,139 --> 00:13:21,720
this can be done and afterwards the May

279
00:13:19,950 --> 00:13:25,320
can deliver the package without any

280
00:13:21,720 --> 00:13:27,360
problem but it is certainly a good idea

281
00:13:25,320 --> 00:13:29,070
to tell the mailman to come to the front

282
00:13:27,360 --> 00:13:31,770
door alone and not trying out the back

283
00:13:29,070 --> 00:13:34,110
door of the house because the dog is

284
00:13:31,770 --> 00:13:35,880
still very mad good

285
00:13:34,110 --> 00:13:38,340
that was the basic concept paranoia

286
00:13:35,880 --> 00:13:41,790
levels did you get that did I get this

287
00:13:38,340 --> 00:13:43,710
across good CRS people now comes the

288
00:13:41,790 --> 00:13:46,140
serious part of the talk high-security

289
00:13:43,710 --> 00:13:48,750
setups I don't have a clear-cut

290
00:13:46,140 --> 00:13:51,180
definition of a high security setup let

291
00:13:48,750 --> 00:13:54,180
me use the following one a high security

292
00:13:51,180 --> 00:13:56,219
setup is a setup where you're willing

293
00:13:54,180 --> 00:14:00,359
and able to invest a lot of time

294
00:13:56,220 --> 00:14:03,690
developing and refining configuration to

295
00:14:00,360 --> 00:14:05,250
optimize it for security so I define as

296
00:14:03,690 --> 00:14:07,950
a time investment if you want to have

297
00:14:05,250 --> 00:14:09,570
high security you need more resources

298
00:14:07,950 --> 00:14:12,660
more time you need to go to project

299
00:14:09,570 --> 00:14:15,420
manage I'll give me more days to tune

300
00:14:12,660 --> 00:14:18,060
this to be really high security now what

301
00:14:15,420 --> 00:14:22,110
you're actually doing that's up to you

302
00:14:18,060 --> 00:14:24,540
I'm talking about CRS here of course the

303
00:14:22,110 --> 00:14:27,240
high security setting will be more than

304
00:14:24,540 --> 00:14:29,969
only the bath and the valve might be

305
00:14:27,240 --> 00:14:31,320
more than only CRS I'm touching at that

306
00:14:29,970 --> 00:14:36,990
topic as well

307
00:14:31,320 --> 00:14:40,200
but first let's concentrate on CRS I've

308
00:14:36,990 --> 00:14:43,200
done several high security setup Zimmy

309
00:14:40,200 --> 00:14:46,110
life the most interesting one has been

310
00:14:43,200 --> 00:14:48,270
an online voting site in Switzerland if

311
00:14:46,110 --> 00:14:50,280
you follow the news namely in

312
00:14:48,270 --> 00:14:53,280
Switzerland you've probably heard a lot

313
00:14:50,280 --> 00:14:56,550
of really bad media coverage for the

314
00:14:53,280 --> 00:14:58,530
Swiss you did Rolf in here definitely a

315
00:14:56,550 --> 00:15:03,030
lot of bad coverage for the Swiss post

316
00:14:58,530 --> 00:15:05,459
online voting system a lot of the talk

317
00:15:03,030 --> 00:15:08,579
is based on that the setup is well

318
00:15:05,460 --> 00:15:10,830
published in government reports audits

319
00:15:08,580 --> 00:15:14,010
and articles which I'm going to show you

320
00:15:10,830 --> 00:15:16,800
at the end add resources so what I'm

321
00:15:14,010 --> 00:15:19,290
talking about here is already published

322
00:15:16,800 --> 00:15:22,170
but this talk allows you to connect the

323
00:15:19,290 --> 00:15:25,170
dots and make the correct interpretation

324
00:15:22,170 --> 00:15:26,640
of these government reports and

325
00:15:25,170 --> 00:15:29,400
understanding what they are actually

326
00:15:26,640 --> 00:15:30,750
writing you know this reports can be a

327
00:15:29,400 --> 00:15:32,050
bit cryptic sometimes when it come from

328
00:15:30,750 --> 00:15:34,300
the government

329
00:15:32,050 --> 00:15:36,758
so what did happen why did they get so

330
00:15:34,300 --> 00:15:38,979
much bad news there was a transparency

331
00:15:36,759 --> 00:15:40,029
effort with the online voting system

332
00:15:38,980 --> 00:15:42,100
rightly so

333
00:15:40,029 --> 00:15:45,220
but they were published a source code in

334
00:15:42,100 --> 00:15:47,829
one program and run a public intrusion

335
00:15:45,220 --> 00:15:51,489
test our exact bounty program in a

336
00:15:47,829 --> 00:15:53,949
second program and the source code

337
00:15:51,489 --> 00:15:56,579
program immediately got a lot of

338
00:15:53,949 --> 00:15:59,949
criticism the circus was torn apart and

339
00:15:56,579 --> 00:16:02,859
the project had to shut down and go into

340
00:15:59,949 --> 00:16:04,660
recess for over a year to repair the

341
00:16:02,860 --> 00:16:07,389
source code because it is not really

342
00:16:04,660 --> 00:16:08,799
usable it's not secure at all as they

343
00:16:07,389 --> 00:16:10,749
found out after two weeks after the

344
00:16:08,799 --> 00:16:12,069
source code publication well the Spanish

345
00:16:10,749 --> 00:16:14,829
developer is doing that source because I

346
00:16:12,069 --> 00:16:16,449
know everything is fine and no not

347
00:16:14,829 --> 00:16:20,349
nothing was fine with that source code

348
00:16:16,449 --> 00:16:23,559
it seems however the second the back

349
00:16:20,350 --> 00:16:26,889
bounty program met far less news or

350
00:16:23,559 --> 00:16:29,469
headlines because there were 900

351
00:16:26,889 --> 00:16:31,480
attackers many of them recruited the Def

352
00:16:29,470 --> 00:16:33,610
Con in the evoking village you would

353
00:16:31,480 --> 00:16:35,379
assume these are the specialists these

354
00:16:33,610 --> 00:16:37,259
are the e-voting guys they know how to

355
00:16:35,379 --> 00:16:41,309
tear apart an online voting application

356
00:16:37,259 --> 00:16:45,779
and they actually found vulnerabilities

357
00:16:41,309 --> 00:16:48,990
16 events a 900 attack for weeks 16

358
00:16:45,779 --> 00:16:51,189
findings the highest severity was low

359
00:16:48,990 --> 00:16:54,399
how does the two things come together

360
00:16:51,189 --> 00:16:56,949
you have a broken source code lots of

361
00:16:54,399 --> 00:16:58,959
weaknesses an attacker is not being able

362
00:16:56,949 --> 00:17:01,868
to exploit them so there's a huge

363
00:16:58,959 --> 00:17:03,729
contrast and this went as far as people

364
00:17:01,869 --> 00:17:05,799
wouldn't believe that the bug bounty

365
00:17:03,730 --> 00:17:07,599
program was for real this a publicity

366
00:17:05,799 --> 00:17:10,209
stunt that's that's not how this works

367
00:17:07,599 --> 00:17:12,458
if you have broken source code you rip

368
00:17:10,209 --> 00:17:15,850
the part in the actual installation but

369
00:17:12,459 --> 00:17:18,309
no we were able to protect the

370
00:17:15,849 --> 00:17:21,609
application despite having a lot of

371
00:17:18,309 --> 00:17:24,609
security issues thanks to a very high

372
00:17:21,609 --> 00:17:27,000
security set up in front the application

373
00:17:24,609 --> 00:17:32,379
and this is what I'm talking about here

374
00:17:27,000 --> 00:17:36,070
good here I'm documenting two or three

375
00:17:32,380 --> 00:17:39,100
of the findings the first one just

376
00:17:36,070 --> 00:17:42,399
quoting Ana that's really nice more so

377
00:17:39,100 --> 00:17:43,689
they found a hole by connecting in

378
00:17:42,399 --> 00:17:45,570
clear-text

379
00:17:43,690 --> 00:17:48,960
to the web server in clear

380
00:17:45,570 --> 00:17:51,178
text on port 443 the web server was

381
00:17:48,960 --> 00:17:52,919
surprisingly nice enough to respond with

382
00:17:51,179 --> 00:17:55,500
the clear text message on the cryptid

383
00:17:52,919 --> 00:17:58,470
port and the response would include a

384
00:17:55,500 --> 00:18:00,210
strict Transport Security header nope I

385
00:17:58,470 --> 00:18:01,830
don't think you know about this but

386
00:18:00,210 --> 00:18:04,559
actually that's what I bet you can do if

387
00:18:01,830 --> 00:18:07,110
you configure it a wee bit wrong and the

388
00:18:04,559 --> 00:18:08,820
RFC says you shouldn't transmit the

389
00:18:07,110 --> 00:18:13,439
strict Transport Security header over

390
00:18:08,820 --> 00:18:15,629
clear-cut connections so that is a

391
00:18:13,440 --> 00:18:18,870
violation of the best practice within

392
00:18:15,630 --> 00:18:22,139
the RFC as no security effect whatsoever

393
00:18:18,870 --> 00:18:23,639
because 400 bad request response and

394
00:18:22,139 --> 00:18:25,678
strict rands particular doesn't really

395
00:18:23,639 --> 00:18:28,830
apply here whatever but we supposed pay

396
00:18:25,679 --> 00:18:30,570
to honest response okay okay we accept

397
00:18:28,830 --> 00:18:32,870
that's the best practice violation

398
00:18:30,570 --> 00:18:37,049
that's a low or info security finding

399
00:18:32,870 --> 00:18:39,178
206 bang go away the highest filings we

400
00:18:37,049 --> 00:18:42,090
had was an IP injection into a log file

401
00:18:39,179 --> 00:18:44,490
so an attacker was able to inject an IP

402
00:18:42,090 --> 00:18:47,879
address only an IP address into a log

403
00:18:44,490 --> 00:18:52,850
file that wasn't actually there so that

404
00:18:47,879 --> 00:18:55,439
was the highest finding their hard good

405
00:18:52,850 --> 00:18:56,939
base platform so what you want to do it

406
00:18:55,440 --> 00:18:58,860
in the base platform I talked about

407
00:18:56,940 --> 00:19:01,409
alternatives to run more security

408
00:18:58,860 --> 00:19:03,689
nowadays what we reused here and what I

409
00:19:01,409 --> 00:19:08,129
advise my customers still you want to

410
00:19:03,690 --> 00:19:10,320
run mod security 2.9 on Apache 2.4 it's

411
00:19:08,129 --> 00:19:13,259
the best platform to detect fault ask

412
00:19:10,320 --> 00:19:16,320
the head namely in high security setup

413
00:19:13,259 --> 00:19:19,350
why is that it's a proven stable

414
00:19:16,320 --> 00:19:21,960
platform or application and its feature

415
00:19:19,350 --> 00:19:25,350
complete as far as CRS is concerned

416
00:19:21,960 --> 00:19:27,899
there exists not security 3 it has been

417
00:19:25,350 --> 00:19:30,480
around for almost 2 years now but it's

418
00:19:27,899 --> 00:19:33,600
still not feature complete so mod

419
00:19:30,480 --> 00:19:36,090
security 3 is not passing this URIs

420
00:19:33,600 --> 00:19:38,070
testitude they're not blocking all the

421
00:19:36,090 --> 00:19:40,259
things they're supposed to block with

422
00:19:38,070 --> 00:19:43,289
the new engine so that's how a lot of

423
00:19:40,259 --> 00:19:46,080
people and I are still stuck and most

424
00:19:43,289 --> 00:19:48,840
acute 2.9 because the new kid on the

425
00:19:46,080 --> 00:19:51,178
block the next generation mod security

426
00:19:48,840 --> 00:19:53,510
is still not passing the test suite

427
00:19:51,179 --> 00:19:58,320
after 2 years of being released

428
00:19:53,510 --> 00:19:58,970
performance surprisingly nginx is a

429
00:19:58,320 --> 00:20:03,799
really

430
00:19:58,970 --> 00:20:06,830
fast reverse proxy and more security now

431
00:20:03,799 --> 00:20:10,210
runs and nginx but as soon as you put

432
00:20:06,830 --> 00:20:14,360
engineer more security on nginx it gets

433
00:20:10,210 --> 00:20:16,309
quite bad so with mod security included

434
00:20:14,360 --> 00:20:18,620
Apache takes lead and suddenly Apache is

435
00:20:16,309 --> 00:20:20,830
faster than nginx only because of mod

436
00:20:18,620 --> 00:20:24,649
security that's because the mod security

437
00:20:20,830 --> 00:20:27,500
implementation the old 12.9 is faster

438
00:20:24,650 --> 00:20:29,780
than the new one so that is a

439
00:20:27,500 --> 00:20:32,450
complicated situation if you care about

440
00:20:29,780 --> 00:20:34,210
performance then Apache is surprisingly

441
00:20:32,450 --> 00:20:36,799
the better platform for you

442
00:20:34,210 --> 00:20:38,960
Apache also gives you access to respond

443
00:20:36,799 --> 00:20:40,850
response bodies and as we've heard in

444
00:20:38,960 --> 00:20:43,130
the initial definition of a bath not

445
00:20:40,850 --> 00:20:45,379
only the request is important but also

446
00:20:43,130 --> 00:20:47,510
the response is important the request is

447
00:20:45,380 --> 00:20:49,429
certainly more important as far as tags

448
00:20:47,510 --> 00:20:51,950
are concerned but you cannot rule out

449
00:20:49,429 --> 00:20:55,070
that a stack trace going out to the

450
00:20:51,950 --> 00:20:58,549
client should be detected by the buff an

451
00:20:55,070 --> 00:21:00,408
SQL error message should be detected by

452
00:20:58,549 --> 00:21:02,780
the buff and nginx doesn't give you

453
00:21:00,409 --> 00:21:05,299
access to the response that is a problem

454
00:21:02,780 --> 00:21:07,940
namely in high security settings and

455
00:21:05,299 --> 00:21:11,389
then of course it is the flexibility of

456
00:21:07,940 --> 00:21:14,419
Apache in every dimension that makes it

457
00:21:11,390 --> 00:21:18,230
such a good platform I'm a lot into

458
00:21:14,419 --> 00:21:20,960
logging a standard web server logs to

459
00:21:18,230 --> 00:21:23,510
requests line the user agent and the

460
00:21:20,960 --> 00:21:25,700
refer of a client while the IP address

461
00:21:23,510 --> 00:21:29,059
as well of course but so that's the

462
00:21:25,700 --> 00:21:31,220
basics but it's far not enough for my

463
00:21:29,059 --> 00:21:36,590
purpose namely in high security settings

464
00:21:31,220 --> 00:21:38,179
I I want to have the TLS protocol

465
00:21:36,590 --> 00:21:40,459
version I want to see the cipher that

466
00:21:38,179 --> 00:21:42,500
the clients actually use I want to see

467
00:21:40,460 --> 00:21:44,090
the timings of not securing do we have a

468
00:21:42,500 --> 00:21:46,730
performance problem do we have rules to

469
00:21:44,090 --> 00:21:48,289
take too much time most requests take so

470
00:21:46,730 --> 00:21:50,990
long that is really important for me I

471
00:21:48,289 --> 00:21:53,629
want to see the total IO going into

472
00:21:50,990 --> 00:21:56,179
going out I want to see dozens of

473
00:21:53,630 --> 00:21:58,549
additional bits of information in the

474
00:21:56,179 --> 00:22:00,980
log file so I can run statistics and I

475
00:21:58,549 --> 00:22:03,379
can analyze things I can examine things

476
00:22:00,980 --> 00:22:06,140
in debug the behavior of the web server

477
00:22:03,380 --> 00:22:07,940
and that is an overview unfortunately

478
00:22:06,140 --> 00:22:11,390
nginx is not able to give you that

479
00:22:07,940 --> 00:22:12,290
so Apache is much more flexible allowing

480
00:22:11,390 --> 00:22:14,570
you all

481
00:22:12,290 --> 00:22:17,210
inside makes it really suited for high

482
00:22:14,570 --> 00:22:19,639
security setups all this is well

483
00:22:17,210 --> 00:22:21,290
documented in a series of tutorials that

484
00:22:19,640 --> 00:22:24,350
is the logging tutorial that I've

485
00:22:21,290 --> 00:22:28,760
published and nba.com it's a series of

486
00:22:24,350 --> 00:22:31,159
tutorials twelve of them actually they

487
00:22:28,760 --> 00:22:34,760
exist for Apache they also exist for

488
00:22:31,160 --> 00:22:39,170
nginx they're very Ingenix actually is

489
00:22:34,760 --> 00:22:41,420
able to pull this off so there is a link

490
00:22:39,170 --> 00:22:43,940
on the web server go to the nginx branch

491
00:22:41,420 --> 00:22:46,750
but the Apache is more refined because

492
00:22:43,940 --> 00:22:49,760
I'm more of an Apache specialist here

493
00:22:46,750 --> 00:22:51,230
these tutorials tell you how to set this

494
00:22:49,760 --> 00:22:53,600
all up how to be more secure in the

495
00:22:51,230 --> 00:22:56,360
table how to put CRS on top and how to

496
00:22:53,600 --> 00:22:59,120
tune away the mad dog or the false

497
00:22:56,360 --> 00:23:00,500
positives and they're very popular we

498
00:22:59,120 --> 00:23:02,389
have like five thousand unique visitors

499
00:23:00,500 --> 00:23:06,110
per month so you could say these are

500
00:23:02,390 --> 00:23:11,290
relative de facto standard tutorials to

501
00:23:06,110 --> 00:23:15,320
run CRS or mod security in production

502
00:23:11,290 --> 00:23:18,520
animal is scoring CRS has a mechanism

503
00:23:15,320 --> 00:23:21,139
called animal scoring that is a very

504
00:23:18,520 --> 00:23:25,100
interesting feature it's a game changer

505
00:23:21,140 --> 00:23:27,860
in a standard valve in a black-and-white

506
00:23:25,100 --> 00:23:31,459
setting you have an alert immediate

507
00:23:27,860 --> 00:23:32,990
blocking locate something bad happens

508
00:23:31,460 --> 00:23:36,680
been in the request you block

509
00:23:32,990 --> 00:23:40,610
immediately and that the tool is very

510
00:23:36,680 --> 00:23:43,250
course in a sense alert blockade with

511
00:23:40,610 --> 00:23:45,709
animal scoring has passed on a technical

512
00:23:43,250 --> 00:23:47,620
level is the rules are only doing the

513
00:23:45,710 --> 00:23:50,480
detection the rules are not blocking

514
00:23:47,620 --> 00:23:52,850
themselves they're detecting SQL

515
00:23:50,480 --> 00:23:55,850
injections for example and then they add

516
00:23:52,850 --> 00:23:58,429
a score that we just sum up so the

517
00:23:55,850 --> 00:24:00,980
request request passes all the rules and

518
00:23:58,430 --> 00:24:04,580
at the end we sum up the scores and then

519
00:24:00,980 --> 00:24:07,160
we say this requests go like 25 points

520
00:24:04,580 --> 00:24:09,530
and now where is our threshold and we

521
00:24:07,160 --> 00:24:11,930
can change the threshold and that is

522
00:24:09,530 --> 00:24:15,350
like the appetite for alerts that we

523
00:24:11,930 --> 00:24:18,260
want to have and this allows us to start

524
00:24:15,350 --> 00:24:20,750
in blocking mode immediately without

525
00:24:18,260 --> 00:24:24,170
ever blocking we just put the threshold

526
00:24:20,750 --> 00:24:25,470
extremely high and no user is ever going

527
00:24:24,170 --> 00:24:27,960
that high

528
00:24:25,470 --> 00:24:30,390
then we see what happens and then we to

529
00:24:27,960 --> 00:24:33,809
Nevada false-positives and bring down

530
00:24:30,390 --> 00:24:36,120
the animal II threshold or limit to more

531
00:24:33,809 --> 00:24:41,129
and more reasonable levels I'm typically

532
00:24:36,120 --> 00:24:44,939
start out with 10,000 go down to 150 20

533
00:24:41,130 --> 00:24:48,809
10 and 5 and at 5 I'm down to a level

534
00:24:44,940 --> 00:24:51,059
very single alert leads to blockade so

535
00:24:48,809 --> 00:24:54,000
the end result is black and white single

536
00:24:51,059 --> 00:24:58,908
alert being blockade but the way to get

537
00:24:54,000 --> 00:25:03,210
there is much more flexible and adaptive

538
00:24:58,909 --> 00:25:05,580
then in a black and white setting and I

539
00:25:03,210 --> 00:25:08,429
don't really have the time to go into

540
00:25:05,580 --> 00:25:10,470
details here this is well documented in

541
00:25:08,429 --> 00:25:11,100
the tutorials and it is a total

542
00:25:10,470 --> 00:25:14,070
GameChanger

543
00:25:11,100 --> 00:25:15,959
namely in high security setups because

544
00:25:14,070 --> 00:25:18,870
in high security selves you have so many

545
00:25:15,960 --> 00:25:21,480
false positives and if you block after

546
00:25:18,870 --> 00:25:24,000
every false positives the testers are

547
00:25:21,480 --> 00:25:26,820
going crazy because they can never carry

548
00:25:24,000 --> 00:25:28,799
out their tests and with that setup you

549
00:25:26,820 --> 00:25:30,750
have them test then you tune away the

550
00:25:28,799 --> 00:25:31,530
false positives and it's all happening

551
00:25:30,750 --> 00:25:34,770
in the background

552
00:25:31,530 --> 00:25:36,809
and then you reduce this threshold you

553
00:25:34,770 --> 00:25:41,250
can make a very reasonable decision and

554
00:25:36,809 --> 00:25:43,200
saying look if we go to a limit of 20

555
00:25:41,250 --> 00:25:46,200
nothing bad what happens because all our

556
00:25:43,200 --> 00:25:49,980
users are staying below 20 so that's

557
00:25:46,200 --> 00:25:52,320
really really useful in a black and

558
00:25:49,980 --> 00:25:55,440
white setting you would have to say in

559
00:25:52,320 --> 00:25:57,178
monitoring mode until the big day comes

560
00:25:55,440 --> 00:25:59,130
where you have really tuned away the

561
00:25:57,179 --> 00:26:02,250
false positive and then you go from

562
00:25:59,130 --> 00:26:04,110
monitoring to blocking and the day very

563
00:26:02,250 --> 00:26:06,090
often never comes so you stay in

564
00:26:04,110 --> 00:26:07,860
monitoring mode forever and who cares

565
00:26:06,090 --> 00:26:10,399
about locks when there are a lot of

566
00:26:07,860 --> 00:26:13,918
false positives nobody even watches or

567
00:26:10,400 --> 00:26:20,429
soup supervises the bath in these setups

568
00:26:13,919 --> 00:26:24,120
that's very typical good so what is the

569
00:26:20,429 --> 00:26:28,890
goal that we try to achieve here we want

570
00:26:24,120 --> 00:26:31,918
to get a completely clean thing empty

571
00:26:28,890 --> 00:26:35,720
like the desert we want to tune down to

572
00:26:31,919 --> 00:26:38,440
zero false positives no benign user

573
00:26:35,720 --> 00:26:40,810
should ever general

574
00:26:38,440 --> 00:26:46,930
a false positive that is the ultimate

575
00:26:40,810 --> 00:26:48,700
goal let's say in a standard setup you

576
00:26:46,930 --> 00:26:51,820
have somebody registering at your

577
00:26:48,700 --> 00:26:53,560
website and because the person lifts at

578
00:26:51,820 --> 00:26:56,860
a funny address it causes a false

579
00:26:53,560 --> 00:26:58,540
positive address looks like an SQL

580
00:26:56,860 --> 00:27:01,570
injection that was a real false positive

581
00:26:58,540 --> 00:27:04,300
we had in the CRS Union Street Union as

582
00:27:01,570 --> 00:27:05,800
goal-keeper it happened to be false

583
00:27:04,300 --> 00:27:06,970
positive for a lot of people living in

584
00:27:05,800 --> 00:27:09,850
union street too bad

585
00:27:06,970 --> 00:27:12,490
have to tune this away with zero false

586
00:27:09,850 --> 00:27:13,990
positives you know whatever your benign

587
00:27:12,490 --> 00:27:14,710
user are going to enter in your

588
00:27:13,990 --> 00:27:18,400
application

589
00:27:14,710 --> 00:27:20,560
no false positives will happen and that

590
00:27:18,400 --> 00:27:23,080
is such a liberating moment it's an

591
00:27:20,560 --> 00:27:25,480
extremely rare moment in the valve world

592
00:27:23,080 --> 00:27:28,419
because in a vast world whenever you see

593
00:27:25,480 --> 00:27:30,820
alert you never quite sure it's this now

594
00:27:28,420 --> 00:27:33,130
a benign user is it an attacker

595
00:27:30,820 --> 00:27:36,490
let's examine let's look closer so we're

596
00:27:33,130 --> 00:27:38,920
really sure what happened if you are at

597
00:27:36,490 --> 00:27:42,040
the zero false positive setup if you

598
00:27:38,920 --> 00:27:45,190
have chief that level of assurance then

599
00:27:42,040 --> 00:27:48,070
you know when aviary pops up it is an

600
00:27:45,190 --> 00:27:51,940
attacker don't have to think twice it is

601
00:27:48,070 --> 00:27:53,590
guaranteed to be an attacker now how do

602
00:27:51,940 --> 00:27:54,460
you get there can you actually guess is

603
00:27:53,590 --> 00:27:56,709
this for real

604
00:27:54,460 --> 00:27:58,330
this is more like a quality death march

605
00:27:56,710 --> 00:28:01,690
with the goal on the horizon and you

606
00:27:58,330 --> 00:28:04,360
never get there now you can get your air

607
00:28:01,690 --> 00:28:06,760
to zero false positive but I made it's a

608
00:28:04,360 --> 00:28:09,250
lot of work the swiss post a voting

609
00:28:06,760 --> 00:28:12,280
system is in a state of ceará false

610
00:28:09,250 --> 00:28:16,600
positives so to years of view constant

611
00:28:12,280 --> 00:28:19,170
use led to zero false positives so no

612
00:28:16,600 --> 00:28:22,209
voter using the online voting system

613
00:28:19,170 --> 00:28:24,370
bumped into a false positive that is a

614
00:28:22,210 --> 00:28:26,020
very good state to be in because we know

615
00:28:24,370 --> 00:28:32,040
we only have attackers in the laws that

616
00:28:26,020 --> 00:28:34,840
is so liberating in my experience

617
00:28:32,040 --> 00:28:37,240
complex applications and lot of free

618
00:28:34,840 --> 00:28:40,480
text input that's the problem with false

619
00:28:37,240 --> 00:28:43,390
positives more modern applications

620
00:28:40,480 --> 00:28:45,370
designed or created with the help of

621
00:28:43,390 --> 00:28:47,920
modern frameworks are much more

622
00:28:45,370 --> 00:28:51,159
structured very often so in the absence

623
00:28:47,920 --> 00:28:52,240
of freeform input you have false

624
00:28:51,160 --> 00:28:54,160
positives

625
00:28:52,240 --> 00:28:56,350
maybe even a big number of false

626
00:28:54,160 --> 00:28:58,059
positives but the variety the variety is

627
00:28:56,350 --> 00:29:00,250
very small it's the same ones all over

628
00:28:58,059 --> 00:29:02,410
the place because the framework caused

629
00:29:00,250 --> 00:29:04,240
this false positive by doing things in a

630
00:29:02,410 --> 00:29:07,210
certain way you tuned it away and

631
00:29:04,240 --> 00:29:09,640
they're gone so modern applications are

632
00:29:07,210 --> 00:29:10,570
much easier to tune and I think that's a

633
00:29:09,640 --> 00:29:14,970
very good news

634
00:29:10,570 --> 00:29:18,280
it's the written by hand old HTML

635
00:29:14,970 --> 00:29:21,580
applications funny variable names funny

636
00:29:18,280 --> 00:29:24,160
requests done by hand they cause a lot

637
00:29:21,580 --> 00:29:26,770
of different false positive in different

638
00:29:24,160 --> 00:29:37,330
parts of the application modern ones are

639
00:29:26,770 --> 00:29:37,629
much easier to tune good forget one

640
00:29:37,330 --> 00:29:39,850
thing

641
00:29:37,630 --> 00:29:43,030
so what means zero false positive I

642
00:29:39,850 --> 00:29:45,219
think or I would counsel your advise you

643
00:29:43,030 --> 00:29:48,070
to get into a region of one false

644
00:29:45,220 --> 00:29:50,559
positive in ten thousand requests think

645
00:29:48,070 --> 00:29:52,629
that is to go holding on to G ten milli

646
00:29:50,559 --> 00:29:55,720
did I say ten thousand sorry I meant 10

647
00:29:52,630 --> 00:29:57,820
million one request in 10 million giving

648
00:29:55,720 --> 00:30:00,340
your false alert that it's close enough

649
00:29:57,820 --> 00:30:03,550
to zero close enough to be on the safe

650
00:30:00,340 --> 00:30:06,280
side because in one bad request in ten

651
00:30:03,550 --> 00:30:09,550
millions you probably have more back and

652
00:30:06,280 --> 00:30:11,800
failures more bad gateway five or two

653
00:30:09,550 --> 00:30:13,690
error messages in the browser's then

654
00:30:11,800 --> 00:30:16,059
false positives because because of the

655
00:30:13,690 --> 00:30:18,550
buff the valve is no longer your biggest

656
00:30:16,059 --> 00:30:21,790
concern here back and stability is the

657
00:30:18,550 --> 00:30:24,790
bigger problem usually so one in ten

658
00:30:21,790 --> 00:30:27,159
millions is usually good obviously you

659
00:30:24,790 --> 00:30:29,470
need vast amount of traffic to get there

660
00:30:27,160 --> 00:30:31,030
a small b2b application with ten logins

661
00:30:29,470 --> 00:30:34,510
per week will never get to ten million

662
00:30:31,030 --> 00:30:36,580
requests so you need a lot of testing a

663
00:30:34,510 --> 00:30:39,070
lot of production traffic to be able to

664
00:30:36,580 --> 00:30:41,290
Gorge this and get you this level they

665
00:30:39,070 --> 00:30:43,240
can be done if you're really able to

666
00:30:41,290 --> 00:30:47,170
invest the time and in a high security

667
00:30:43,240 --> 00:30:49,630
setting obviously money is graciously

668
00:30:47,170 --> 00:30:51,429
often less of an issue than in a

669
00:30:49,630 --> 00:30:54,610
standard IT project when you want to

670
00:30:51,429 --> 00:30:56,980
achieve high security management is

671
00:30:54,610 --> 00:30:58,959
aware this is going to cost money and I

672
00:30:56,980 --> 00:31:01,450
say look we need so much testing without

673
00:30:58,960 --> 00:31:04,540
that we cannot get there and people bump

674
00:31:01,450 --> 00:31:05,920
into false positive production problems

675
00:31:04,540 --> 00:31:07,930
and then they realize oh yeah

676
00:31:05,920 --> 00:31:10,480
the guys told us to do more testing and

677
00:31:07,930 --> 00:31:12,300
we actually have the money witches have

678
00:31:10,480 --> 00:31:16,210
to invest it so high security setting

679
00:31:12,300 --> 00:31:19,030
they tend to be able to test this so

680
00:31:16,210 --> 00:31:20,800
throughly one false positive 10 million

681
00:31:19,030 --> 00:31:21,730
is where you want to go that is close

682
00:31:20,800 --> 00:31:24,220
enough to zero

683
00:31:21,730 --> 00:31:26,380
a real iterating moment and when you are

684
00:31:24,220 --> 00:31:28,360
there you can really start to divide and

685
00:31:26,380 --> 00:31:31,930
rule because right now you have a

686
00:31:28,360 --> 00:31:33,490
clear-cut good users in that side of the

687
00:31:31,930 --> 00:31:37,510
room the attackers on the other side

688
00:31:33,490 --> 00:31:39,280
know there was only two but you can tell

689
00:31:37,510 --> 00:31:42,370
the two apart now because every alert

690
00:31:39,280 --> 00:31:44,680
points to an attacker and if that is

691
00:31:42,370 --> 00:31:47,530
established you can become really nasty

692
00:31:44,680 --> 00:31:52,120
with the attackers because before that

693
00:31:47,530 --> 00:31:53,260
you would go it is it really intact and

694
00:31:52,120 --> 00:31:55,179
now you could say no that it's

695
00:31:53,260 --> 00:31:57,640
definitely attack already loaded and

696
00:31:55,180 --> 00:32:00,160
you're now not only blocking the

697
00:31:57,640 --> 00:32:01,840
requests no you can ban the IP address

698
00:32:00,160 --> 00:32:04,240
immediately because it's a known

699
00:32:01,840 --> 00:32:06,159
attacker why would you continue to talk

700
00:32:04,240 --> 00:32:09,160
to such a client when you know it is an

701
00:32:06,160 --> 00:32:11,560
attacker you ban the IPS immediately the

702
00:32:09,160 --> 00:32:15,310
tool the pool is off usually is failed

703
00:32:11,560 --> 00:32:17,200
to ban any UNIX system if this has you

704
00:32:15,310 --> 00:32:20,500
tremble in fear failed to ban is a

705
00:32:17,200 --> 00:32:23,590
dangerous tool pulling this off is

706
00:32:20,500 --> 00:32:25,600
difficult it's very easy to cut off your

707
00:32:23,590 --> 00:32:26,709
toes with fail to ban so you need to

708
00:32:25,600 --> 00:32:28,600
know what you're doing here and

709
00:32:26,710 --> 00:32:31,690
depending on the situation where you

710
00:32:28,600 --> 00:32:35,110
have users sharing IP addresses netting

711
00:32:31,690 --> 00:32:37,450
in place or a vanilla users sitting at

712
00:32:35,110 --> 00:32:39,310
their Starbucks next to attacker is

713
00:32:37,450 --> 00:32:41,440
attacking you they would also be banned

714
00:32:39,310 --> 00:32:42,340
so you need to know what you're actually

715
00:32:41,440 --> 00:32:44,200
doing here

716
00:32:42,340 --> 00:32:46,570
but depending on the situation you can

717
00:32:44,200 --> 00:32:48,550
go note the IP address belongs to an

718
00:32:46,570 --> 00:32:51,129
attacker and I'm blocking the IP address

719
00:32:48,550 --> 00:32:52,870
and then no no standard users are using

720
00:32:51,130 --> 00:32:55,510
the same ip address and if you're in

721
00:32:52,870 --> 00:32:57,070
that situation you can ban it there are

722
00:32:55,510 --> 00:33:00,160
still implementation problems coming

723
00:32:57,070 --> 00:33:01,450
with this depending on the setup it

724
00:33:00,160 --> 00:33:02,170
actually depends a bit on the Linux

725
00:33:01,450 --> 00:33:05,290
distribution

726
00:33:02,170 --> 00:33:08,260
how does IP Bennie and failed the ban

727
00:33:05,290 --> 00:33:11,110
behave very often it only blocks in

728
00:33:08,260 --> 00:33:14,230
packets so IP sin established a new

729
00:33:11,110 --> 00:33:16,810
replica TCP connection is blocked while

730
00:33:14,230 --> 00:33:18,800
as an established connection continues

731
00:33:16,810 --> 00:33:23,360
to work

732
00:33:18,800 --> 00:33:24,980
and if you know HTTP HTTP and the future

733
00:33:23,360 --> 00:33:28,969
quake platform this is about

734
00:33:24,980 --> 00:33:31,600
multiplexing HTTP keep alive reusing TCP

735
00:33:28,970 --> 00:33:35,900
connection that has been established for

736
00:33:31,600 --> 00:33:37,820
additional requests so if you're not

737
00:33:35,900 --> 00:33:40,850
paying attention then failed to ban will

738
00:33:37,820 --> 00:33:43,520
block future new connections per - tecar

739
00:33:40,850 --> 00:33:45,080
having established a TCP connection can

740
00:33:43,520 --> 00:33:46,370
channel hundreds of requests against

741
00:33:45,080 --> 00:33:48,320
your application and you're not even

742
00:33:46,370 --> 00:33:50,209
aware of it so there are a few

743
00:33:48,320 --> 00:33:52,460
implementation issues here that you need

744
00:33:50,210 --> 00:33:55,910
to get right but this can be overcome

745
00:33:52,460 --> 00:33:58,130
and you get to a situation where burp

746
00:33:55,910 --> 00:34:01,370
trying to scan your application is

747
00:33:58,130 --> 00:34:03,560
blocked after the first request and I'd

748
00:34:01,370 --> 00:34:05,989
have you can share your width with you

749
00:34:03,560 --> 00:34:07,370
burp has a hard time exploiting

750
00:34:05,990 --> 00:34:10,330
replication if it's blocked after one

751
00:34:07,370 --> 00:34:13,310
request for like an hour

752
00:34:10,330 --> 00:34:15,350
why don't we block for an hour makes 24

753
00:34:13,310 --> 00:34:16,850
requests a day for birth or changing

754
00:34:15,350 --> 00:34:18,710
your IP address after every request

755
00:34:16,850 --> 00:34:22,279
which is really expensive and difficult

756
00:34:18,710 --> 00:34:26,480
to pull off so this brings you a lot of

757
00:34:22,280 --> 00:34:28,880
advancement in security for Swiss online

758
00:34:26,480 --> 00:34:30,290
voting I have to add remark we had to

759
00:34:28,880 --> 00:34:32,780
switch this off for the bug bounty

760
00:34:30,290 --> 00:34:34,580
program the government instructed Swiss

761
00:34:32,780 --> 00:34:37,130
post you switch have to fail to ban

762
00:34:34,580 --> 00:34:39,500
because the attackers wouldn't have a

763
00:34:37,130 --> 00:34:42,500
dent against you so at least give them a

764
00:34:39,500 --> 00:34:45,130
 chance to scan you and at first

765
00:34:42,500 --> 00:34:51,199
we were a bit depressed but I understand

766
00:34:45,130 --> 00:34:54,350
the feeling they're good so that's about

767
00:34:51,199 --> 00:34:57,049
as far as you can go with CRS in a high

768
00:34:54,350 --> 00:34:59,360
security setting if you want to raise

769
00:34:57,050 --> 00:35:02,840
the security even higher you need to

770
00:34:59,360 --> 00:35:04,460
turn to whitelisting CRS as I've

771
00:35:02,840 --> 00:35:07,190
explained it's a black listing rule set

772
00:35:04,460 --> 00:35:10,130
white listing is the other way around

773
00:35:07,190 --> 00:35:13,640
with a white listing rule said you

774
00:35:10,130 --> 00:35:18,110
establish a wall of defense and deny all

775
00:35:13,640 --> 00:35:20,960
wall against the internet and every

776
00:35:18,110 --> 00:35:23,780
request that has been enabled

777
00:35:20,960 --> 00:35:25,730
specifically will be blocked so every

778
00:35:23,780 --> 00:35:28,250
API endpoint that is not configured

779
00:35:25,730 --> 00:35:31,130
every query string parameter that you

780
00:35:28,250 --> 00:35:32,360
haven't enabled in the rule set is going

781
00:35:31,130 --> 00:35:35,240
to be blocked

782
00:35:32,360 --> 00:35:37,580
HTTP headers interesting content types

783
00:35:35,240 --> 00:35:40,790
blocked by default because everything is

784
00:35:37,580 --> 00:35:44,569
blocked by default unless you enable it

785
00:35:40,790 --> 00:35:46,640
of course this is fairly expensive that

786
00:35:44,570 --> 00:35:53,780
is difficult to do that takes a lot of

787
00:35:46,640 --> 00:35:56,990
time and how can you do this you have to

788
00:35:53,780 --> 00:35:59,210
invest time examine the application and

789
00:35:56,990 --> 00:36:02,660
establish these rules that this is

790
00:35:59,210 --> 00:36:04,610
costly however as I said high security

791
00:36:02,660 --> 00:36:04,970
survey setups they have the money to do

792
00:36:04,610 --> 00:36:08,720
this

793
00:36:04,970 --> 00:36:11,029
if if you know how to do it and for the

794
00:36:08,720 --> 00:36:13,759
not so high security setting maybe you

795
00:36:11,030 --> 00:36:15,170
don't need to do this completely imagine

796
00:36:13,760 --> 00:36:19,790
an application where we have registered

797
00:36:15,170 --> 00:36:21,620
users b2b sites and for the not

798
00:36:19,790 --> 00:36:23,420
authenticated users you're only giving

799
00:36:21,620 --> 00:36:26,630
them the front page the Welcome page and

800
00:36:23,420 --> 00:36:29,330
the login form now how difficult can you

801
00:36:26,630 --> 00:36:29,990
be to whitelist a welcome page in the

802
00:36:29,330 --> 00:36:32,450
login form

803
00:36:29,990 --> 00:36:34,580
it's bloody simple it's a couple of

804
00:36:32,450 --> 00:36:37,490
post-its one post request and a couple

805
00:36:34,580 --> 00:36:40,700
of get requests and this reduces the

806
00:36:37,490 --> 00:36:43,399
attack surface tremendously because the

807
00:36:40,700 --> 00:36:48,589
non-authentic users can no longer attack

808
00:36:43,400 --> 00:36:51,650
your search form your basket whatever

809
00:36:48,590 --> 00:36:53,810
you have in the deeper layers of your

810
00:36:51,650 --> 00:36:56,990
application they're limited to the front

811
00:36:53,810 --> 00:36:59,420
or and that one is very easy to protect

812
00:36:56,990 --> 00:37:03,640
another cost intends and it doesn't

813
00:36:59,420 --> 00:37:05,780
change and again modern applications

814
00:37:03,640 --> 00:37:09,410
develop with the help of modern

815
00:37:05,780 --> 00:37:10,880
frameworks are much easier to do a white

816
00:37:09,410 --> 00:37:13,700
listing set up because they've

817
00:37:10,880 --> 00:37:17,330
functionality to export to complete API

818
00:37:13,700 --> 00:37:19,640
to you all the parameters exported in

819
00:37:17,330 --> 00:37:21,170
the file you transform this file into a

820
00:37:19,640 --> 00:37:24,370
rule set with the help of a couple of

821
00:37:21,170 --> 00:37:26,570
scripts so you get an auto Matic

822
00:37:24,370 --> 00:37:29,839
auto-generated white listing mode

823
00:37:26,570 --> 00:37:31,220
security rules said not for free but at

824
00:37:29,840 --> 00:37:33,920
a very good cause and you can constantly

825
00:37:31,220 --> 00:37:36,470
update it automatically so that really

826
00:37:33,920 --> 00:37:39,470
helps so the longer we go it becomes

827
00:37:36,470 --> 00:37:42,859
easier to run by listing yourself in my

828
00:37:39,470 --> 00:37:45,709
experience white listing is very well

829
00:37:42,860 --> 00:37:48,320
suited for structured

830
00:37:45,710 --> 00:37:51,970
traffic well truck to traffic when you

831
00:37:48,320 --> 00:37:55,640
have freeform input free text fields

832
00:37:51,970 --> 00:37:57,890
online mail for example Oracle database

833
00:37:55,640 --> 00:37:59,690
administrators exchanging SQL queries

834
00:37:57,890 --> 00:38:03,830
via mail that's very hard to protect

835
00:37:59,690 --> 00:38:06,740
with white icing but they're free tax

836
00:38:03,830 --> 00:38:10,279
forms are better suited with a black

837
00:38:06,740 --> 00:38:12,649
listing approach like CRS structured

838
00:38:10,280 --> 00:38:14,180
application structured input very

839
00:38:12,650 --> 00:38:17,150
helpful to protect with white listing

840
00:38:14,180 --> 00:38:20,629
the two combined make a high security

841
00:38:17,150 --> 00:38:24,890
set up some advice is to combine the two

842
00:38:20,630 --> 00:38:27,140
to stack it above each other what our

843
00:38:24,890 --> 00:38:32,000
additional rule sets worth considering

844
00:38:27,140 --> 00:38:34,279
in such situations you can do you can

845
00:38:32,000 --> 00:38:37,869
monitor the natural flow of an

846
00:38:34,280 --> 00:38:40,730
application so if somebody requests

847
00:38:37,869 --> 00:38:42,500
places requests that is in the wrong

848
00:38:40,730 --> 00:38:44,060
order I mean why do you want to check

849
00:38:42,500 --> 00:38:46,430
out when you haven't even selected

850
00:38:44,060 --> 00:38:49,759
something that doesn't work that that is

851
00:38:46,430 --> 00:38:51,500
suspicious if there are requests that

852
00:38:49,760 --> 00:38:53,359
look more like a vulnerability scan of

853
00:38:51,500 --> 00:38:56,390
you you block them immediately rules

854
00:38:53,359 --> 00:38:58,848
lights like that can be done uses some

855
00:38:56,390 --> 00:39:02,150
browsers have a certain rhythm and

856
00:38:58,849 --> 00:39:03,950
timing how they request resources in

857
00:39:02,150 --> 00:39:05,869
your application vulnerability scanners

858
00:39:03,950 --> 00:39:08,210
and pen testers have it or attackers

859
00:39:05,869 --> 00:39:10,310
have completely different timing and

860
00:39:08,210 --> 00:39:12,440
rhythm and should be easy to tell the

861
00:39:10,310 --> 00:39:14,029
two apart by calculating this event I

862
00:39:12,440 --> 00:39:16,130
haven't seen this done in more security

863
00:39:14,030 --> 00:39:17,720
but really love to see such a rule set

864
00:39:16,130 --> 00:39:20,570
or have a customer ask me to develop

865
00:39:17,720 --> 00:39:23,000
that there would be really good fun and

866
00:39:20,570 --> 00:39:30,980
you can also do a client fingerprinting

867
00:39:23,000 --> 00:39:32,750
the diff understanding the client or the

868
00:39:30,980 --> 00:39:35,210
family of a client of the user agent

869
00:39:32,750 --> 00:39:37,369
nowadays not so easy anymore when user

870
00:39:35,210 --> 00:39:39,380
agent is now so complicated but there

871
00:39:37,369 --> 00:39:41,839
are libraries to do this for you or you

872
00:39:39,380 --> 00:39:44,900
to JavaScript very fingerprint declined

873
00:39:41,839 --> 00:39:51,320
and then you really identify Firefox we

874
00:39:44,900 --> 00:39:53,030
have a QA as well don't we yeah what is

875
00:39:51,320 --> 00:39:56,240
the timing it's 11

876
00:39:53,030 --> 00:39:57,890
oh it's 11 we let me start it later than

877
00:39:56,240 --> 00:39:59,569
we want to do ok ok how are you really

878
00:39:57,890 --> 00:40:03,598
quick

879
00:39:59,570 --> 00:40:05,250
okay client fingerprinting pull yourself

880
00:40:03,599 --> 00:40:07,560
together and then if it says it is a

881
00:40:05,250 --> 00:40:10,109
firefox but it doesn't do request the

882
00:40:07,560 --> 00:40:11,700
fire box would do then you know it is an

883
00:40:10,109 --> 00:40:16,109
attacker again you can block it

884
00:40:11,700 --> 00:40:18,118
immediately outside of mall security

885
00:40:16,109 --> 00:40:21,000
you need to have application denial of

886
00:40:18,119 --> 00:40:23,010
service defense on the valve quality of

887
00:40:21,000 --> 00:40:25,770
service to protect against scraping is

888
00:40:23,010 --> 00:40:28,619
important geoip can be a big help and

889
00:40:25,770 --> 00:40:30,869
look into DNS blacklisting or

890
00:40:28,619 --> 00:40:34,160
blacklisting dns because you don't want

891
00:40:30,869 --> 00:40:36,690
to talk to known offenders and

892
00:40:34,160 --> 00:40:38,670
blacklisting Venis tells you look this

893
00:40:36,690 --> 00:40:40,140
IP address is bad why don't you talk why

894
00:40:38,670 --> 00:40:44,640
don't you stop talking to the IP address

895
00:40:40,140 --> 00:40:46,890
all combined CRS paranoia level for

896
00:40:44,640 --> 00:40:49,319
whitelisting rules that couple of

897
00:40:46,890 --> 00:40:54,359
additional measures give you a high

898
00:40:49,320 --> 00:40:57,030
security valve setting and there will be

899
00:40:54,359 --> 00:40:58,828
the summary of my talk resources here

900
00:40:57,030 --> 00:41:00,990
don't need to write this down I'm going

901
00:40:58,829 --> 00:41:02,730
to publish the slides these are the key

902
00:41:00,990 --> 00:41:06,569
reports about a swiss post a voting

903
00:41:02,730 --> 00:41:08,730
system tutorial URL on top and if you're

904
00:41:06,569 --> 00:41:12,540
intrigued by mod security or want to

905
00:41:08,730 --> 00:41:16,079
learn more about CRS I'm running two

906
00:41:12,540 --> 00:41:18,720
public courses one at the end of October

907
00:41:16,079 --> 00:41:21,540
in Zurich and one at the end of November

908
00:41:18,720 --> 00:41:23,819
in London would be please see some of

909
00:41:21,540 --> 00:41:25,730
the faces back in my courses thank you

910
00:41:23,819 --> 00:41:28,980
for attending my talk

911
00:41:25,730 --> 00:41:28,980
[Applause]

