1
00:00:00,530 --> 00:00:02,590
you

2
00:00:03,170 --> 00:00:09,510
hi guys my name is Dominic I'm a

3
00:00:07,050 --> 00:00:12,600
security researcher and pen tester and

4
00:00:09,510 --> 00:00:15,330
I'm mainly focused on blockchain

5
00:00:12,600 --> 00:00:20,520
technology and smart contracts and last

6
00:00:15,330 --> 00:00:23,550
year I was up SEC Europe in London I

7
00:00:20,520 --> 00:00:25,948
gave a talk about vulnerabilities in

8
00:00:23,550 --> 00:00:28,560
smart contracts and I did a small

9
00:00:25,949 --> 00:00:31,289
showcase but this year I wanted to focus

10
00:00:28,560 --> 00:00:34,379
on the whole process of development of

11
00:00:31,289 --> 00:00:39,239
smart contracts and show you how to make

12
00:00:34,379 --> 00:00:40,949
it know secure and well the first

13
00:00:39,239 --> 00:00:41,879
question to you have you have have ever

14
00:00:40,950 --> 00:00:46,470
created

15
00:00:41,880 --> 00:00:48,090
I mean implemented or maybe used the

16
00:00:46,470 --> 00:00:52,469
centralized applications or smart

17
00:00:48,090 --> 00:00:54,629
contracts raise your hand that's just a

18
00:00:52,469 --> 00:00:58,140
few people and I must tell you that this

19
00:00:54,629 --> 00:01:00,660
is this topic is gonna be hot quite soon

20
00:00:58,140 --> 00:01:03,379
because these are some of the companies

21
00:01:00,660 --> 00:01:06,750
just a small list of the companies that

22
00:01:03,379 --> 00:01:09,600
create platforms for smart contracts and

23
00:01:06,750 --> 00:01:11,880
decentralized applications or just use

24
00:01:09,600 --> 00:01:13,289
them and for example Facebook Libra have

25
00:01:11,880 --> 00:01:15,960
you heard about Facebook Libra the

26
00:01:13,290 --> 00:01:18,390
cryptocurrency of Facebook yes actually

27
00:01:15,960 --> 00:01:20,850
this is not the cryptocurrency only it's

28
00:01:18,390 --> 00:01:22,619
a smart contract platform so it is a

29
00:01:20,850 --> 00:01:28,199
cryptocurrency but you can also create

30
00:01:22,619 --> 00:01:29,970
smart contracts on on Libra so let's

31
00:01:28,200 --> 00:01:32,880
start with a quick introduction because

32
00:01:29,970 --> 00:01:35,789
the topic is not very familiar so what

33
00:01:32,880 --> 00:01:37,350
are the decentralized applications and

34
00:01:35,790 --> 00:01:40,320
I'm gonna call them the apps from now

35
00:01:37,350 --> 00:01:41,939
and why why are they becoming so

36
00:01:40,320 --> 00:01:44,460
important in your future

37
00:01:41,939 --> 00:01:47,399
well decentralized applications are like

38
00:01:44,460 --> 00:01:49,710
web applications but they have

39
00:01:47,400 --> 00:01:52,979
decentralized storage and the governance

40
00:01:49,710 --> 00:01:55,259
so if you we are looking for an example

41
00:01:52,979 --> 00:01:59,789
of web applications we can go for

42
00:01:55,259 --> 00:02:03,930
Facebook or already it and steam it is a

43
00:01:59,790 --> 00:02:07,290
decentralized version of reality for

44
00:02:03,930 --> 00:02:09,919
example and well why are they becoming

45
00:02:07,290 --> 00:02:14,099
so important first there are many

46
00:02:09,919 --> 00:02:16,380
projects that have proven its value also

47
00:02:14,099 --> 00:02:17,970
the market is quite huge because there

48
00:02:16,380 --> 00:02:23,820
billions of dollars in cryptocurrencies

49
00:02:17,970 --> 00:02:26,610
of course on blockchain market and it

50
00:02:23,820 --> 00:02:29,700
just it is also a great chance for new

51
00:02:26,610 --> 00:02:32,430
technologies for for example for fin fin

52
00:02:29,700 --> 00:02:34,109
text and as I mentioned before there are

53
00:02:32,430 --> 00:02:36,960
big players behind the blockchain

54
00:02:34,110 --> 00:02:40,830
technology the smart smart contracts and

55
00:02:36,960 --> 00:02:42,630
decentralized applications but what is

56
00:02:40,830 --> 00:02:44,130
so special about decentralized

57
00:02:42,630 --> 00:02:47,040
applications why do we need them why

58
00:02:44,130 --> 00:02:49,079
can't we stay with stick to their web

59
00:02:47,040 --> 00:02:52,650
applications well the main thing is that

60
00:02:49,080 --> 00:02:54,660
we gain trust worthiness thanks to the

61
00:02:52,650 --> 00:02:56,930
blockchain technology which means that

62
00:02:54,660 --> 00:03:00,570
there is no single point of authority no

63
00:02:56,930 --> 00:03:05,580
no one person or institution can control

64
00:03:00,570 --> 00:03:07,859
the application also it means that no

65
00:03:05,580 --> 00:03:10,790
one can actually turn it off permanently

66
00:03:07,860 --> 00:03:13,830
that's because anyone can keep the copy

67
00:03:10,790 --> 00:03:17,340
locally of any decentralized

68
00:03:13,830 --> 00:03:20,760
applications so if somebody turns of the

69
00:03:17,340 --> 00:03:23,460
the application anyone else can just put

70
00:03:20,760 --> 00:03:25,890
it back online and it's like well it's

71
00:03:23,460 --> 00:03:28,020
like having a copy of whole Facebook's

72
00:03:25,890 --> 00:03:30,500
including source code and its database

73
00:03:28,020 --> 00:03:34,680
on your computer so that's that sounds

74
00:03:30,500 --> 00:03:36,510
quite nice well what's the difference in

75
00:03:34,680 --> 00:03:40,230
the architecture between their web

76
00:03:36,510 --> 00:03:43,320
applications and the apps well the the

77
00:03:40,230 --> 00:03:45,660
original idea behind the apps is that

78
00:03:43,320 --> 00:03:47,850
they are kept on blockchain and I mean

79
00:03:45,660 --> 00:03:51,780
both the front end application which is

80
00:03:47,850 --> 00:03:53,489
usually written in JavaScript and the

81
00:03:51,780 --> 00:03:54,870
API which is the back end of the

82
00:03:53,490 --> 00:03:56,370
application of this decentralized

83
00:03:54,870 --> 00:03:59,850
applications and these are smart

84
00:03:56,370 --> 00:04:02,250
contracts and all of this is kept on

85
00:03:59,850 --> 00:04:05,720
blockchain on decentralized network that

86
00:04:02,250 --> 00:04:09,350
no one can modify and no one can control

87
00:04:05,720 --> 00:04:11,310
so also there is a quite popular

88
00:04:09,350 --> 00:04:13,799
architecture where the front end

89
00:04:11,310 --> 00:04:16,048
application so the JavaScript is kept on

90
00:04:13,800 --> 00:04:19,380
a web server like in web applications

91
00:04:16,048 --> 00:04:21,779
and that's actually okay because still

92
00:04:19,380 --> 00:04:24,750
you download the code the JavaScript

93
00:04:21,779 --> 00:04:27,030
code and you can audit it you can see it

94
00:04:24,750 --> 00:04:30,370
of course sometimes it's obfuscated but

95
00:04:27,030 --> 00:04:34,989
there was a great talk about Luis

96
00:04:30,370 --> 00:04:38,199
by lewis about how to automatically scan

97
00:04:34,990 --> 00:04:41,110
for vulnerable for interesting stuff in

98
00:04:38,199 --> 00:04:42,910
JavaScript applications so this hip

99
00:04:41,110 --> 00:04:45,400
hybrid isn't the centralized

100
00:04:42,910 --> 00:04:48,100
architecture is still okay because the

101
00:04:45,400 --> 00:04:52,780
main logic the business logic the back

102
00:04:48,100 --> 00:04:56,110
end is on blockchain still so are these

103
00:04:52,780 --> 00:04:59,320
applications secure and comparing to web

104
00:04:56,110 --> 00:05:02,290
applications well first of all they are

105
00:04:59,320 --> 00:05:03,849
undestroyed like I said anyone can bring

106
00:05:02,290 --> 00:05:06,550
it back to life because they using

107
00:05:03,850 --> 00:05:08,530
terrorism blocking then they are

108
00:05:06,550 --> 00:05:11,710
cryptographically secure I'm sure you've

109
00:05:08,530 --> 00:05:13,799
seen that two words together many times

110
00:05:11,710 --> 00:05:16,570
when you were you know reading some

111
00:05:13,800 --> 00:05:18,690
descriptions of blockchain applications

112
00:05:16,570 --> 00:05:21,639
so what does it mean it means that all

113
00:05:18,690 --> 00:05:25,690
transactions which represent function

114
00:05:21,639 --> 00:05:27,100
calls are digitally signed sounds nice

115
00:05:25,690 --> 00:05:29,680
we have known repudiation we have

116
00:05:27,100 --> 00:05:32,530
authentication that's cool and also

117
00:05:29,680 --> 00:05:34,270
anyone can actually verify the code and

118
00:05:32,530 --> 00:05:36,820
this current state of the application

119
00:05:34,270 --> 00:05:39,310
because it's all public on public

120
00:05:36,820 --> 00:05:46,229
blockchain so it's like you can read the

121
00:05:39,310 --> 00:05:48,880
code but still we see many either Hux or

122
00:05:46,229 --> 00:05:51,930
great submissions on bug bounty

123
00:05:48,880 --> 00:05:54,820
platforms for for smart contracts and

124
00:05:51,930 --> 00:05:57,479
decentralized applications so again it's

125
00:05:54,820 --> 00:06:02,380
just about our expectations and the

126
00:05:57,479 --> 00:06:04,389
reality so I'm sure that's not gonna be

127
00:06:02,380 --> 00:06:06,639
a great discovery for you but what we

128
00:06:04,389 --> 00:06:08,440
need we need a security for

129
00:06:06,639 --> 00:06:11,139
decentralized applications the same as

130
00:06:08,440 --> 00:06:14,979
we do for web applications and last

131
00:06:11,139 --> 00:06:16,930
couple of months we've done some pen

132
00:06:14,979 --> 00:06:19,270
tests and security audits for companies

133
00:06:16,930 --> 00:06:21,789
related to blockchain and most of them

134
00:06:19,270 --> 00:06:23,710
included of course web applications that

135
00:06:21,789 --> 00:06:25,990
integrate with blockchain and some of

136
00:06:23,710 --> 00:06:28,810
them also included the centralized

137
00:06:25,990 --> 00:06:30,400
applications mainly the backend of

138
00:06:28,810 --> 00:06:34,599
decentralized applications which are

139
00:06:30,400 --> 00:06:36,700
smart contracts and well the case of web

140
00:06:34,599 --> 00:06:39,039
applications is quite simple nowadays

141
00:06:36,700 --> 00:06:41,260
because we have so many great projects

142
00:06:39,039 --> 00:06:43,659
so many great materials and

143
00:06:41,260 --> 00:06:47,890
standards that we can use to perform the

144
00:06:43,660 --> 00:06:50,350
of it and let me ask you if you need to

145
00:06:47,890 --> 00:06:52,419
know what are the most common web

146
00:06:50,350 --> 00:06:58,000
application vulnerabilities

147
00:06:52,420 --> 00:07:00,640
what would you go 400 ASP what I'll ask

148
00:06:58,000 --> 00:07:04,180
top ten of course here the first answer

149
00:07:00,640 --> 00:07:07,000
then if you need the knowledge knowledge

150
00:07:04,180 --> 00:07:11,050
base for the common weaknesses that can

151
00:07:07,000 --> 00:07:13,210
happen in web applications as w/e

152
00:07:11,050 --> 00:07:15,460
exactly come on witness enumeration and

153
00:07:13,210 --> 00:07:17,890
last but not least I guess the most

154
00:07:15,460 --> 00:07:19,570
important where would you go what would

155
00:07:17,890 --> 00:07:21,669
you go for if you need a security

156
00:07:19,570 --> 00:07:24,969
checklist and to enlist to perform an

157
00:07:21,670 --> 00:07:27,220
audit ASVs

158
00:07:24,970 --> 00:07:29,860
exactly application security

159
00:07:27,220 --> 00:07:32,140
verification standard and actually we

160
00:07:29,860 --> 00:07:33,910
can ask we can ask the same questions

161
00:07:32,140 --> 00:07:36,280
for the centralized applications because

162
00:07:33,910 --> 00:07:38,530
this is obstacle ocation security so

163
00:07:36,280 --> 00:07:40,630
what what are the most common naval

164
00:07:38,530 --> 00:07:43,239
abilities for decentralized applications

165
00:07:40,630 --> 00:07:45,430
there is a project which is very similar

166
00:07:43,240 --> 00:07:50,700
to over top 10 which is called Dokdo 10

167
00:07:45,430 --> 00:07:54,760
that enumerates those 10 most popular

168
00:07:50,700 --> 00:07:57,760
vulnerabilities also we can look for a

169
00:07:54,760 --> 00:07:59,500
knowledge base for the most for the

170
00:07:57,760 --> 00:08:02,530
weaknesses that could happen in smart

171
00:07:59,500 --> 00:08:06,750
contracts and here we have a smart

172
00:08:02,530 --> 00:08:10,270
contract weakness falsification registry

173
00:08:06,750 --> 00:08:13,750
which is very similar to CV again and

174
00:08:10,270 --> 00:08:19,299
last do we have a security checklist

175
00:08:13,750 --> 00:08:20,530
that covers whole smart contracts the

176
00:08:19,300 --> 00:08:26,350
whole security of smart contracts

177
00:08:20,530 --> 00:08:29,289
actually we couldn't find any so well

178
00:08:26,350 --> 00:08:31,480
there are there is there are very many

179
00:08:29,290 --> 00:08:34,630
publications materials about the

180
00:08:31,480 --> 00:08:36,669
security of smart contracts but we

181
00:08:34,630 --> 00:08:39,580
couldn't find a checklist that you can

182
00:08:36,669 --> 00:08:42,478
you know just say that this is path this

183
00:08:39,580 --> 00:08:45,670
path this is passed ok our contract is

184
00:08:42,479 --> 00:08:49,000
secure for an hour first so that's why

185
00:08:45,670 --> 00:08:52,270
we have created together with Pavlovic

186
00:08:49,000 --> 00:08:54,279
from our company SES vs smart contracts

187
00:08:52,270 --> 00:08:56,889
security verification standard

188
00:08:54,279 --> 00:08:59,259
it has very similar form to ASVs because

189
00:08:56,889 --> 00:09:02,680
we like ASVs and we use it every day for

190
00:08:59,259 --> 00:09:04,720
web applications and we also have very

191
00:09:02,680 --> 00:09:07,209
similar objectives we want to create a

192
00:09:04,720 --> 00:09:10,809
checklist for developers for architects

193
00:09:07,209 --> 00:09:13,209
and for security reviewers and also we

194
00:09:10,809 --> 00:09:16,540
want to help to mitigate the common

195
00:09:13,209 --> 00:09:20,138
vulnerabilities by design and to help to

196
00:09:16,540 --> 00:09:23,439
create well secure code secure smart

197
00:09:20,139 --> 00:09:26,290
contracts so we have created 13

198
00:09:23,439 --> 00:09:27,779
different categories the last one is a

199
00:09:26,290 --> 00:09:31,449
bit different I'm going to talk about

200
00:09:27,779 --> 00:09:33,730
about it later and well they are they

201
00:09:31,449 --> 00:09:35,529
have the same form so they have as as

202
00:09:33,730 --> 00:09:37,749
ISVs so they have the security

203
00:09:35,529 --> 00:09:40,089
requirements they call all of them

204
00:09:37,749 --> 00:09:43,779
contain about 100 security requirements

205
00:09:40,089 --> 00:09:46,930
and I'd like to present some of them on

206
00:09:43,779 --> 00:09:50,110
example on the base of the SDLC software

207
00:09:46,930 --> 00:09:52,949
development lifecycle and show you that

208
00:09:50,110 --> 00:09:56,410
these requirements cover whole process

209
00:09:52,949 --> 00:09:59,019
and I must say here this there is a

210
00:09:56,410 --> 00:10:01,149
disclaimer this presentation is not

211
00:09:59,019 --> 00:10:03,490
about how to introduce security into

212
00:10:01,149 --> 00:10:06,250
your SDLC because that's a huge topic

213
00:10:03,490 --> 00:10:09,120
and there are many approaches for that

214
00:10:06,250 --> 00:10:12,660
I'm just using SDLC as the base for

215
00:10:09,120 --> 00:10:15,040
examples so let's start with analysis

216
00:10:12,660 --> 00:10:17,680
well of course we have some similarities

217
00:10:15,040 --> 00:10:20,050
between web applications and the apps

218
00:10:17,680 --> 00:10:22,508
and one of them is a threat model which

219
00:10:20,050 --> 00:10:25,660
we should perform actually for any kind

220
00:10:22,509 --> 00:10:28,870
of application so that's why we have

221
00:10:25,660 --> 00:10:31,449
added security requirements with ABS

222
00:10:28,870 --> 00:10:33,550
that makes sure that you first define

223
00:10:31,449 --> 00:10:36,040
the boundaries the trust boundaries in

224
00:10:33,550 --> 00:10:38,079
the documentation and that you perform

225
00:10:36,040 --> 00:10:41,139
threat modeling for each functionality

226
00:10:38,079 --> 00:10:44,709
that you introduce into a smart

227
00:10:41,139 --> 00:10:46,839
contracts what about the differences

228
00:10:44,709 --> 00:10:49,899
well the first difference is about the

229
00:10:46,839 --> 00:10:53,110
sensitive data actually this is quite

230
00:10:49,899 --> 00:10:57,429
easy for web applications we can because

231
00:10:53,110 --> 00:11:00,730
we can keep sensitive data in database

232
00:10:57,429 --> 00:11:03,189
and we can just protect it of course

233
00:11:00,730 --> 00:11:05,259
this is not very easy sometimes but

234
00:11:03,189 --> 00:11:08,060
still the main idea is to keep it in

235
00:11:05,259 --> 00:11:10,250
database that is protected in case of

236
00:11:08,060 --> 00:11:13,040
decentralized applications it's not that

237
00:11:10,250 --> 00:11:15,230
easy because all data is on public

238
00:11:13,040 --> 00:11:18,079
blockchain so actually everything is

239
00:11:15,230 --> 00:11:22,810
readable and publicly accessible so

240
00:11:18,080 --> 00:11:25,610
that's why you must make sure that no

241
00:11:22,810 --> 00:11:27,380
confidential data is kept in smart

242
00:11:25,610 --> 00:11:30,140
contracts in the storage of smart

243
00:11:27,380 --> 00:11:34,160
contracts and like for example passwords

244
00:11:30,140 --> 00:11:37,250
or personal data and no data is

245
00:11:34,160 --> 00:11:40,400
considered safe or private even if you

246
00:11:37,250 --> 00:11:42,710
use a private key word for your storage

247
00:11:40,400 --> 00:11:47,020
variables this is quite tricky because

248
00:11:42,710 --> 00:11:51,200
private variables are not that private

249
00:11:47,020 --> 00:11:53,329
the next thing public access for web

250
00:11:51,200 --> 00:11:57,830
applications it's quite easy to define

251
00:11:53,330 --> 00:12:00,110
what is public we usually probably

252
00:11:57,830 --> 00:12:03,620
publish the front end application and

253
00:12:00,110 --> 00:12:06,500
some API in case of decentralized

254
00:12:03,620 --> 00:12:10,370
applications actually everything is

255
00:12:06,500 --> 00:12:13,250
public so each function that is in the

256
00:12:10,370 --> 00:12:15,620
smart contract can be called can be

257
00:12:13,250 --> 00:12:17,870
executed of course the logic may be

258
00:12:15,620 --> 00:12:19,970
different the logic node may say that so

259
00:12:17,870 --> 00:12:23,660
you cannot execute this function but

260
00:12:19,970 --> 00:12:26,810
anyone can try to execute all functions

261
00:12:23,660 --> 00:12:30,199
in smart contracts and that was the case

262
00:12:26,810 --> 00:12:33,650
of the first poet you wallet hack where

263
00:12:30,200 --> 00:12:37,090
a function that in it's the smart

264
00:12:33,650 --> 00:12:39,920
contract was publicly accessible and

265
00:12:37,090 --> 00:12:45,980
actually somebody could took over your

266
00:12:39,920 --> 00:12:49,689
wallet and that's how 100 sorry 30

267
00:12:45,980 --> 00:12:52,640
million dollars this is quite this is

268
00:12:49,690 --> 00:12:55,190
variable right so today it's 30 million

269
00:12:52,640 --> 00:12:57,949
tomorrow it's 20 and the day after

270
00:12:55,190 --> 00:13:00,590
tomorrow it's 40 so I need to you know

271
00:12:57,950 --> 00:13:03,740
update this slide every time I give a

272
00:13:00,590 --> 00:13:05,990
Turk so for for today it's about 30

273
00:13:03,740 --> 00:13:06,940
million dollars of course in

274
00:13:05,990 --> 00:13:11,410
cryptocurrencies

275
00:13:06,940 --> 00:13:15,020
so it's important to make sure that all

276
00:13:11,410 --> 00:13:19,400
functions have the visibility specified

277
00:13:15,020 --> 00:13:21,850
that this was the case of attack just

278
00:13:19,400 --> 00:13:24,310
because the function was not

279
00:13:21,850 --> 00:13:27,880
has not specified the visibility type

280
00:13:24,310 --> 00:13:30,430
and by default it functions are public

281
00:13:27,880 --> 00:13:33,910
so that was that was the power that was

282
00:13:30,430 --> 00:13:36,160
the problem next wing randomness well in

283
00:13:33,910 --> 00:13:38,490
web applications it's a matter of for

284
00:13:36,160 --> 00:13:40,329
one function call either you want

285
00:13:38,490 --> 00:13:42,940
statistical randomness or

286
00:13:40,330 --> 00:13:44,980
cryptographically randomness in case of

287
00:13:42,940 --> 00:13:48,040
decentralized applications it's a bit

288
00:13:44,980 --> 00:13:50,950
tricky because smart contracts are

289
00:13:48,040 --> 00:13:53,349
executed on many nodes simultaneously so

290
00:13:50,950 --> 00:13:57,100
and they must be executed the same way

291
00:13:53,350 --> 00:14:02,050
so we cannot use any local parameters

292
00:13:57,100 --> 00:14:04,270
from one node and the problem here is

293
00:14:02,050 --> 00:14:06,969
that it's not that easy it's not a

294
00:14:04,270 --> 00:14:11,140
trivial to get a random number in smart

295
00:14:06,970 --> 00:14:13,780
contracts and that was the case of a few

296
00:14:11,140 --> 00:14:16,270
of actually many attacks many hacks one

297
00:14:13,780 --> 00:14:20,650
is quite recent from September where

298
00:14:16,270 --> 00:14:25,150
about 100,000 dollars were stolen from

299
00:14:20,650 --> 00:14:28,600
us play a plea k ssin and one is a bit

300
00:14:25,150 --> 00:14:30,910
older we're about eighty thousand

301
00:14:28,600 --> 00:14:34,450
dollars were stolen from SmartWater e a

302
00:14:30,910 --> 00:14:37,810
hack and all that was available because

303
00:14:34,450 --> 00:14:39,360
the bed randomness implementation so you

304
00:14:37,810 --> 00:14:43,060
could quite easily

305
00:14:39,360 --> 00:14:46,000
you know predict the so-called random

306
00:14:43,060 --> 00:14:49,089
number so the solution for that problem

307
00:14:46,000 --> 00:14:51,310
is to make sure that you do not generate

308
00:14:49,090 --> 00:14:55,450
set the random number trivially basing

309
00:14:51,310 --> 00:14:58,209
on the publicly available data that is

310
00:14:55,450 --> 00:15:02,800
kept on blockchain like timestamps or

311
00:14:58,210 --> 00:15:04,660
block number etc also decentralized

312
00:15:02,800 --> 00:15:07,660
applications introduced some new threats

313
00:15:04,660 --> 00:15:10,030
like threat actors like for example

314
00:15:07,660 --> 00:15:12,520
miners and validators these are the

315
00:15:10,030 --> 00:15:15,569
nodes that validate the transactions and

316
00:15:12,520 --> 00:15:18,460
add new blocks to the blockchain and

317
00:15:15,570 --> 00:15:20,650
they are quite powerful because they can

318
00:15:18,460 --> 00:15:25,200
see that transactions before they are

319
00:15:20,650 --> 00:15:29,110
validated so they know the future and

320
00:15:25,200 --> 00:15:32,050
here is a case of a report for a group

321
00:15:29,110 --> 00:15:35,050
at firmware a miner could easily abuse

322
00:15:32,050 --> 00:15:39,490
the business logic of this contract

323
00:15:35,050 --> 00:15:43,380
so he could easily do s contract just

324
00:15:39,490 --> 00:15:47,110
because some of the logic was based on

325
00:15:43,380 --> 00:15:53,130
variables that can be said by minor and

326
00:15:47,110 --> 00:15:55,540
that's how he and as you can see the

327
00:15:53,130 --> 00:15:59,589
stability of this vulnerability is high

328
00:15:55,540 --> 00:16:01,990
so that's important so to solve this

329
00:15:59,589 --> 00:16:04,779
problem we should make sure that the

330
00:16:01,990 --> 00:16:06,010
first the contract logic implementation

331
00:16:04,779 --> 00:16:09,490
corresponds strictly to the

332
00:16:06,010 --> 00:16:12,069
documentation and also that we have

333
00:16:09,490 --> 00:16:17,260
business limits and we enforce them and

334
00:16:12,070 --> 00:16:19,839
by the way we must make sure that we we

335
00:16:17,260 --> 00:16:22,630
our business logic does not disincentive

336
00:16:19,839 --> 00:16:25,660
users from using our smart contracts

337
00:16:22,630 --> 00:16:27,820
because if using our application is too

338
00:16:25,660 --> 00:16:30,640
expensive for users they will stop using

339
00:16:27,820 --> 00:16:33,459
it it's actually also our some kind of

340
00:16:30,640 --> 00:16:37,709
denial of service right ok so let's move

341
00:16:33,459 --> 00:16:40,810
on to design phase we have some

342
00:16:37,709 --> 00:16:43,000
similarity skills here as well one of

343
00:16:40,810 --> 00:16:45,550
them is the rest least privilege rule

344
00:16:43,000 --> 00:16:47,140
and the other is access control which

345
00:16:45,550 --> 00:16:49,060
actually in case of decentralized

346
00:16:47,140 --> 00:16:51,610
applications is a bit tricky because

347
00:16:49,060 --> 00:16:54,270
it's again public so anyone can see the

348
00:16:51,610 --> 00:16:57,640
rules and that's why it should be kept

349
00:16:54,270 --> 00:17:02,230
as simple as possible and centralized in

350
00:16:57,640 --> 00:17:06,790
one smart contract and the lease

351
00:17:02,230 --> 00:17:10,000
provision can be ensured with the same

352
00:17:06,790 --> 00:17:12,250
with the requirement that makes sure the

353
00:17:10,000 --> 00:17:14,290
creator of the contract does not have

354
00:17:12,250 --> 00:17:16,240
too much power because you know when you

355
00:17:14,290 --> 00:17:18,699
create a contract when you implement it

356
00:17:16,240 --> 00:17:21,370
and then you deploy it you can say that

357
00:17:18,699 --> 00:17:23,620
ok I'm the owner I can do anything but

358
00:17:21,369 --> 00:17:25,989
then you lose the trust lessness right

359
00:17:23,619 --> 00:17:29,739
because people have to trust the creator

360
00:17:25,990 --> 00:17:34,270
of the contract so the best approach is

361
00:17:29,740 --> 00:17:36,640
to create a contract that cover all the

362
00:17:34,270 --> 00:17:39,639
business logic flows and that creator

363
00:17:36,640 --> 00:17:44,620
cannot change because then it's really

364
00:17:39,640 --> 00:17:47,050
trustless and also the access control

365
00:17:44,620 --> 00:17:48,229
mechanism should be kept in one smart

366
00:17:47,050 --> 00:17:50,750
contract and

367
00:17:48,230 --> 00:17:54,410
should which is trusted and should be as

368
00:17:50,750 --> 00:17:56,419
I said as simple as possible next

369
00:17:54,410 --> 00:17:59,030
difference are loops and I mean the

370
00:17:56,419 --> 00:18:01,400
loops that lead to denial of service

371
00:17:59,030 --> 00:18:03,230
well we have that kind of loops in web

372
00:18:01,400 --> 00:18:06,380
applications there are usually infinite

373
00:18:03,230 --> 00:18:10,010
loops but it's quite easy to find a loop

374
00:18:06,380 --> 00:18:12,230
that potentially may be infinite in case

375
00:18:10,010 --> 00:18:17,540
of decentralized applications we have

376
00:18:12,230 --> 00:18:20,360
some loops that are not are not infinite

377
00:18:17,540 --> 00:18:23,830
but they are so-called unbound so there

378
00:18:20,360 --> 00:18:27,649
is no specified exact number of

379
00:18:23,830 --> 00:18:30,320
iterations and if we have such loop we

380
00:18:27,650 --> 00:18:34,400
can have a problem because as an example

381
00:18:30,320 --> 00:18:37,909
of governmental smart contract the RI

382
00:18:34,400 --> 00:18:39,980
that was looked became so huge because

383
00:18:37,910 --> 00:18:43,059
of some kind of business logic it became

384
00:18:39,980 --> 00:18:46,280
so huge that actually you couldn't Oh

385
00:18:43,059 --> 00:18:48,950
iterate over it and that was the

386
00:18:46,280 --> 00:18:52,100
requirement of the business logic so you

387
00:18:48,950 --> 00:18:54,919
had to iterate over an array that and

388
00:18:52,100 --> 00:18:59,480
that would take so much that would be so

389
00:18:54,919 --> 00:19:02,600
cost full it would take so much gas even

390
00:18:59,480 --> 00:19:06,110
more gas than the maximum allowed number

391
00:19:02,600 --> 00:19:09,918
so you actually couldn't call it any

392
00:19:06,110 --> 00:19:12,620
anyway because you cannot give so much

393
00:19:09,919 --> 00:19:17,840
gas it's more than maximum modeled

394
00:19:12,620 --> 00:19:20,479
number so that's the story how about two

395
00:19:17,840 --> 00:19:22,159
hundred thousand dollars were frozen it

396
00:19:20,480 --> 00:19:24,590
means that they are there they are on

397
00:19:22,160 --> 00:19:29,990
this contract but you actually cannot do

398
00:19:24,590 --> 00:19:33,290
anything with that so to solve that

399
00:19:29,990 --> 00:19:36,230
problem you can first first of all do

400
00:19:33,290 --> 00:19:38,960
not iterate over in unbound loops you

401
00:19:36,230 --> 00:19:42,320
must specify exact iterations for each

402
00:19:38,960 --> 00:19:45,679
loop and also to avoid other problems

403
00:19:42,320 --> 00:19:48,668
with gas limitation you should not send

404
00:19:45,679 --> 00:19:51,290
funds I mean the cryptocurrencies tokens

405
00:19:48,669 --> 00:19:53,470
automatically in your business logic but

406
00:19:51,290 --> 00:19:56,418
you should other store the number

407
00:19:53,470 --> 00:19:59,390
attached to a person turn to an address

408
00:19:56,419 --> 00:20:01,540
and allow those people to withdraw their

409
00:19:59,390 --> 00:20:04,000
tokens or cryptocurrencies

410
00:20:01,540 --> 00:20:10,320
with another transaction we've

411
00:20:04,000 --> 00:20:12,790
withdrawal transaction and also we have

412
00:20:10,320 --> 00:20:15,280
another case of the risk for

413
00:20:12,790 --> 00:20:18,270
decentralized applications because as

414
00:20:15,280 --> 00:20:21,940
you as you've seen on most of the

415
00:20:18,270 --> 00:20:25,299
applications and smart contracts there

416
00:20:21,940 --> 00:20:27,970
are some cryptocurrencies kept so the

417
00:20:25,299 --> 00:20:30,340
more cryptocurrency is on the smart

418
00:20:27,970 --> 00:20:32,950
contract the bigger the risk is that

419
00:20:30,340 --> 00:20:35,500
somebody will try to steal it so you can

420
00:20:32,950 --> 00:20:40,450
try to decrease the risk and you should

421
00:20:35,500 --> 00:20:42,730
keep as less amount of cryptocurrencies

422
00:20:40,450 --> 00:20:45,490
on the smart contract as possible

423
00:20:42,730 --> 00:20:48,780
because that just decreed us that this

424
00:20:45,490 --> 00:20:52,169
incentives the hacker to steal your

425
00:20:48,780 --> 00:20:56,049
cryptocurrency okay so let's move on to

426
00:20:52,169 --> 00:20:58,510
implementation of course we have great

427
00:20:56,049 --> 00:21:02,290
tools like truffle or remick's there are

428
00:20:58,510 --> 00:21:05,440
these are IDs and they actually perform

429
00:21:02,290 --> 00:21:07,870
some security basic security checks that

430
00:21:05,440 --> 00:21:09,760
you can integrate some other platforms

431
00:21:07,870 --> 00:21:13,719
that perform some other security checks

432
00:21:09,760 --> 00:21:15,309
but so it's like a partially cover cover

433
00:21:13,720 --> 00:21:18,520
the security is partially covered by

434
00:21:15,309 --> 00:21:21,820
these tools but still we have so many

435
00:21:18,520 --> 00:21:26,139
bugs and it's very very similar to web

436
00:21:21,820 --> 00:21:29,620
applications right so the most common

437
00:21:26,140 --> 00:21:32,190
one of the most common vulnerabilities

438
00:21:29,620 --> 00:21:34,239
in smart contracts are automatic bugs

439
00:21:32,190 --> 00:21:37,360
they are not that common in web

440
00:21:34,240 --> 00:21:40,000
applications now maybe they are a bit

441
00:21:37,360 --> 00:21:42,129
more common in the software that

442
00:21:40,000 --> 00:21:45,760
application web applications use like

443
00:21:42,130 --> 00:21:48,730
servers where we have overflows but they

444
00:21:45,760 --> 00:21:50,230
are quite common in distant relized

445
00:21:48,730 --> 00:21:52,510
applications and I'm not talking about

446
00:21:50,230 --> 00:21:55,780
simple overflows like you know adding

447
00:21:52,510 --> 00:22:00,040
two numbers and we you know get the

448
00:21:55,780 --> 00:22:05,260
number over the over the maximum I mean

449
00:22:00,040 --> 00:22:08,110
so a bit more sophisticated talks over

450
00:22:05,260 --> 00:22:10,270
flows where like for example batch

451
00:22:08,110 --> 00:22:12,549
overflow or proxy overflow where and

452
00:22:10,270 --> 00:22:16,929
details you can find under these

453
00:22:12,549 --> 00:22:19,168
link's but actually there is a quite

454
00:22:16,929 --> 00:22:19,169
interesting

455
00:22:19,529 --> 00:22:27,309
consequence of overflows because if we

456
00:22:22,690 --> 00:22:30,099
take a RC 20 smart contract as an

457
00:22:27,309 --> 00:22:34,599
example which is a contract for managing

458
00:22:30,099 --> 00:22:37,239
token which has some value in fired

459
00:22:34,599 --> 00:22:41,950
currencies like dollars you can actually

460
00:22:37,239 --> 00:22:45,369
using this vulnerability create the

461
00:22:41,950 --> 00:22:47,829
zillions or even more of tokens so it's

462
00:22:45,369 --> 00:22:50,829
like going to the mint in real life

463
00:22:47,829 --> 00:22:54,279
going to the mint printing like millions

464
00:22:50,829 --> 00:22:57,099
of euros and going out with legal money

465
00:22:54,279 --> 00:22:59,320
and if you've seen la casa de papel or

466
00:22:57,099 --> 00:23:01,269
money heist in english if you've seen

467
00:22:59,320 --> 00:23:05,769
this series i'm sure that you know the

468
00:23:01,269 --> 00:23:08,919
scenario of this of this attack so to

469
00:23:05,769 --> 00:23:10,269
avoid such problem well you should make

470
00:23:08,919 --> 00:23:13,839
sure that you don't you are not

471
00:23:10,269 --> 00:23:16,450
vulnerable to arithmetic overflows and

472
00:23:13,839 --> 00:23:19,149
you can achieve that using for example

473
00:23:16,450 --> 00:23:21,429
safe mode library you should also

474
00:23:19,149 --> 00:23:27,988
consider extreme values in your business

475
00:23:21,429 --> 00:23:31,299
logic and you know handle them and also

476
00:23:27,989 --> 00:23:36,479
sometimes strict equalities are a bit

477
00:23:31,299 --> 00:23:36,479
tricky so you should avoid strict strict

478
00:23:36,690 --> 00:23:43,389
inequality equality sorry okay another

479
00:23:41,679 --> 00:23:46,389
difference recursive calls

480
00:23:43,389 --> 00:23:48,309
well recursive calls are quite explicit

481
00:23:46,389 --> 00:23:51,158
in web applications because we either

482
00:23:48,309 --> 00:23:54,158
either need a loop or we need to call a

483
00:23:51,159 --> 00:23:57,239
function inside inside the same function

484
00:23:54,159 --> 00:24:00,190
in case of decentralized applications

485
00:23:57,239 --> 00:24:03,190
you actually don't need a loop or you

486
00:24:00,190 --> 00:24:05,859
don't need and you don't need a function

487
00:24:03,190 --> 00:24:08,589
call in a function to obtain recursive

488
00:24:05,859 --> 00:24:11,199
code that's because you can call one

489
00:24:08,589 --> 00:24:13,749
contract from you can call the other

490
00:24:11,200 --> 00:24:15,969
contract from the original contract and

491
00:24:13,749 --> 00:24:18,669
the other contract will call again your

492
00:24:15,969 --> 00:24:20,519
original contract so we have a loop but

493
00:24:18,669 --> 00:24:25,210
between contracts not in the business

494
00:24:20,519 --> 00:24:25,809
logic of one contract and that was the

495
00:24:25,210 --> 00:24:29,109
case

496
00:24:25,809 --> 00:24:31,739
I think the most known attack in a smart

497
00:24:29,109 --> 00:24:35,559
contracts world the Dow Hawk we're about

498
00:24:31,739 --> 00:24:38,320
three point three point six million

499
00:24:35,559 --> 00:24:41,428
hitters were stolen which is like now I

500
00:24:38,320 --> 00:24:43,379
guess uh billions in dollars and

501
00:24:41,429 --> 00:24:46,149
actually that was the case why the

502
00:24:43,379 --> 00:24:48,218
helium platform forked and now we have

503
00:24:46,149 --> 00:24:52,059
two cryptocurrencies humanitarian

504
00:24:48,219 --> 00:24:54,849
classic so that was a huge huge thing

505
00:24:52,059 --> 00:25:00,309
you can find some more details under

506
00:24:54,849 --> 00:25:02,589
this link so and even this this kind of

507
00:25:00,309 --> 00:25:05,649
attack was got its name it's called

508
00:25:02,589 --> 00:25:07,089
reinsurance II so if you want to avoid

509
00:25:05,649 --> 00:25:10,209
you in France attack you must make sure

510
00:25:07,089 --> 00:25:13,719
that no recursive calls from untrusted

511
00:25:10,210 --> 00:25:19,179
smart contracts are available in your

512
00:25:13,719 --> 00:25:23,289
smart contract and also you should check

513
00:25:19,179 --> 00:25:25,929
them the result of call function calls

514
00:25:23,289 --> 00:25:28,389
for a low-level function like st. call

515
00:25:25,929 --> 00:25:32,679
because these functions does not bubble

516
00:25:28,389 --> 00:25:36,399
up the exceptions these functions when

517
00:25:32,679 --> 00:25:40,149
they fail they just return for example

518
00:25:36,399 --> 00:25:42,099
zero like in C language right so you

519
00:25:40,149 --> 00:25:44,109
should check you should check the result

520
00:25:42,099 --> 00:25:48,039
because if you do not and you assume

521
00:25:44,109 --> 00:25:49,918
that it always succeeds success then you

522
00:25:48,039 --> 00:25:55,269
might have a problem

523
00:25:49,919 --> 00:25:58,539
okay testing well we have also a bunch

524
00:25:55,269 --> 00:26:00,519
of great tools for testing for both for

525
00:25:58,539 --> 00:26:03,299
both web applications and there is a

526
00:26:00,519 --> 00:26:06,339
plenty of automatic scanners for

527
00:26:03,299 --> 00:26:08,739
decentralized applications and we

528
00:26:06,339 --> 00:26:11,320
recommend to use them because why not

529
00:26:08,739 --> 00:26:14,259
you have them and you can easily just

530
00:26:11,320 --> 00:26:17,649
run them so that's why we have added the

531
00:26:14,259 --> 00:26:22,330
requirement to use these automatic tools

532
00:26:17,649 --> 00:26:25,689
and we've also created a whole category

533
00:26:22,330 --> 00:26:28,359
just to make sure that the testing takes

534
00:26:25,690 --> 00:26:31,479
place on in the whole process of the

535
00:26:28,359 --> 00:26:33,789
development right from the analysis to

536
00:26:31,479 --> 00:26:39,370
the to the implementation and deployment

537
00:26:33,789 --> 00:26:43,350
and that's why you should very

538
00:26:39,370 --> 00:26:46,389
by the contract logic you should use the

539
00:26:43,350 --> 00:26:49,419
automatic scanners you should you should

540
00:26:46,390 --> 00:26:51,790
also formally verify the specification

541
00:26:49,420 --> 00:26:54,070
of the smart contract even before you

542
00:26:51,790 --> 00:26:55,720
start to implement it right after you

543
00:26:54,070 --> 00:26:58,870
design it you should formally verify it

544
00:26:55,720 --> 00:27:02,290
and also you should not forget about the

545
00:26:58,870 --> 00:27:05,229
manual tests because some kinds some

546
00:27:02,290 --> 00:27:07,480
kind of bugs security vulnerabilities

547
00:27:05,230 --> 00:27:09,910
are hard to find by automatic scanners

548
00:27:07,480 --> 00:27:12,250
and that's actually the same like in web

549
00:27:09,910 --> 00:27:16,630
applications and that's why we recommend

550
00:27:12,250 --> 00:27:18,520
to provide a CSVs of course and other

551
00:27:16,630 --> 00:27:23,950
security requirements and policies to

552
00:27:18,520 --> 00:27:26,440
all developers and testers and talking

553
00:27:23,950 --> 00:27:29,550
back about the vulnerabilities that are

554
00:27:26,440 --> 00:27:33,330
hard to find we can talk about another

555
00:27:29,550 --> 00:27:36,419
submission this time it's for maker Dow

556
00:27:33,330 --> 00:27:39,720
platform and it's again on bug bounty

557
00:27:36,420 --> 00:27:41,920
platform of hacker one where

558
00:27:39,720 --> 00:27:45,040
vulnerability which was in the business

559
00:27:41,920 --> 00:27:47,560
logic so it's hot it's actually it

560
00:27:45,040 --> 00:27:52,920
cannot be find it cannot be found by

561
00:27:47,560 --> 00:27:52,919
automatic scanners it allowed to meand

562
00:27:53,070 --> 00:27:58,419
die which is cryptocurrency in this

563
00:27:55,750 --> 00:28:01,900
platform and without cover so it's like

564
00:27:58,420 --> 00:28:05,590
again minting new money like printing

565
00:28:01,900 --> 00:28:07,870
dollars without you know Authority and

566
00:28:05,590 --> 00:28:10,360
as you can see this bounty is quite huge

567
00:28:07,870 --> 00:28:13,510
and it means that this is this is also

568
00:28:10,360 --> 00:28:18,159
his problem it's disabilities hi

569
00:28:13,510 --> 00:28:20,879
so a first what you should do is to make

570
00:28:18,160 --> 00:28:23,950
sure that your business logic is a

571
00:28:20,880 --> 00:28:26,200
consistent and that of course the it's

572
00:28:23,950 --> 00:28:28,690
preceded in the sequential order this

573
00:28:26,200 --> 00:28:30,580
check is actually very similar to the

574
00:28:28,690 --> 00:28:32,040
check from ASVs above the business logic

575
00:28:30,580 --> 00:28:36,189
in web applications

576
00:28:32,040 --> 00:28:38,290
okay so let's deploy our application we

577
00:28:36,190 --> 00:28:40,570
have implemented it now we want to

578
00:28:38,290 --> 00:28:42,700
deploy it and usually deployment means

579
00:28:40,570 --> 00:28:45,389
like setting up some configurations some

580
00:28:42,700 --> 00:28:47,530
integrations and publishing the

581
00:28:45,390 --> 00:28:49,630
application and usually for web

582
00:28:47,530 --> 00:28:53,780
applications we do it once of course we

583
00:28:49,630 --> 00:28:57,090
can later redeploy it but deployment is

584
00:28:53,780 --> 00:29:01,500
the process that will perform once and

585
00:28:57,090 --> 00:29:03,480
then there is no a logic in the source

586
00:29:01,500 --> 00:29:06,840
code of web application that performs

587
00:29:03,480 --> 00:29:09,150
the deployment in case of decentralized

588
00:29:06,840 --> 00:29:12,870
applications you must perform the same

589
00:29:09,150 --> 00:29:17,300
process you must do some configures your

590
00:29:12,870 --> 00:29:20,909
smart contract and then set up some

591
00:29:17,300 --> 00:29:23,639
connections between contracts and then

592
00:29:20,910 --> 00:29:26,040
execute a function that deploys your

593
00:29:23,640 --> 00:29:29,040
contract but the difference is that the

594
00:29:26,040 --> 00:29:31,680
deployment function is in the contract

595
00:29:29,040 --> 00:29:33,659
so it's still on the blockchain it's

596
00:29:31,680 --> 00:29:34,110
accessible so we can try to call it

597
00:29:33,660 --> 00:29:37,920
again

598
00:29:34,110 --> 00:29:39,689
and what if let's say you forgot to call

599
00:29:37,920 --> 00:29:42,690
this function so you actually didn't

600
00:29:39,690 --> 00:29:45,090
initialize the contract or what if you

601
00:29:42,690 --> 00:29:47,970
allow to reinitialize your contract

602
00:29:45,090 --> 00:29:51,480
because you thought well I initialized

603
00:29:47,970 --> 00:29:54,360
it and I forgot actually to stop other

604
00:29:51,480 --> 00:29:57,890
people from initializing it again and

605
00:29:54,360 --> 00:30:02,760
taking it over so that was the case of

606
00:29:57,890 --> 00:30:04,950
the second per ATO track where there was

607
00:30:02,760 --> 00:30:07,890
a smart contract that was shared by

608
00:30:04,950 --> 00:30:10,580
hundreds of other contracts and this

609
00:30:07,890 --> 00:30:13,560
contract was not initialized some guy

610
00:30:10,580 --> 00:30:15,689
found out that he can actually

611
00:30:13,560 --> 00:30:17,970
initialize this contract and by

612
00:30:15,690 --> 00:30:19,650
initializing this contract I mean he

613
00:30:17,970 --> 00:30:21,750
could took over this contract so he

614
00:30:19,650 --> 00:30:24,210
became something like owner of this

615
00:30:21,750 --> 00:30:28,050
contract and he could he could execute

616
00:30:24,210 --> 00:30:29,960
some sensitive functionalities and one

617
00:30:28,050 --> 00:30:35,190
of those functionalities was

618
00:30:29,960 --> 00:30:38,130
self-destruct so he firstly he took over

619
00:30:35,190 --> 00:30:41,340
he initialized the contract he took over

620
00:30:38,130 --> 00:30:43,500
it and then he killed it like removed it

621
00:30:41,340 --> 00:30:47,909
from the blockchain and the problem was

622
00:30:43,500 --> 00:30:51,050
that all other contracts were relying on

623
00:30:47,910 --> 00:30:54,270
this contract and when there is no more

624
00:30:51,050 --> 00:30:57,030
the contract the core contract they

625
00:30:54,270 --> 00:31:01,070
could not they could not operate and the

626
00:30:57,030 --> 00:31:01,070
other problem was that there were about

627
00:31:01,190 --> 00:31:05,820
500,000 eaters on this which is about

628
00:31:04,310 --> 00:31:09,539
two

629
00:31:05,820 --> 00:31:13,889
one hundred million dollars and again

630
00:31:09,539 --> 00:31:16,590
this dollar these hitters were fro are

631
00:31:13,889 --> 00:31:19,799
frozen actually at the moment so they

632
00:31:16,590 --> 00:31:22,019
are there but nobody can touch them so

633
00:31:19,799 --> 00:31:24,269
you know it's nice to have good money

634
00:31:22,019 --> 00:31:27,480
but if you cannot use it if you can

635
00:31:24,269 --> 00:31:29,999
spend it it's not very nice so in to

636
00:31:27,480 --> 00:31:33,690
avoid such situation the solution for

637
00:31:29,999 --> 00:31:35,789
that problem is making sure that all

638
00:31:33,690 --> 00:31:38,129
your variables are initialized which

639
00:31:35,789 --> 00:31:40,739
means that basically your smart contract

640
00:31:38,129 --> 00:31:43,619
was initialized during deployment and

641
00:31:40,739 --> 00:31:45,330
making sure that you cannot ruin ich

642
00:31:43,619 --> 00:31:48,539
allein so you cannot call again the

643
00:31:45,330 --> 00:31:51,059
initialization function and by the way

644
00:31:48,539 --> 00:31:55,470
in this case there was that sensitive

645
00:31:51,059 --> 00:31:57,450
function functionality self-destruct

646
00:31:55,470 --> 00:31:59,070
functionality so you should make sure

647
00:31:57,450 --> 00:32:00,989
that you really need such

648
00:31:59,070 --> 00:32:03,570
functionalities in your smart contract

649
00:32:00,989 --> 00:32:07,220
that contract did not need solve

650
00:32:03,570 --> 00:32:11,399
destruct functionality ok maintenance

651
00:32:07,220 --> 00:32:13,409
well when we maintain an application we

652
00:32:11,399 --> 00:32:16,049
of course get some locks and in case of

653
00:32:13,409 --> 00:32:18,090
web web apps we keep them safe on the

654
00:32:16,049 --> 00:32:20,789
server nobody can read them but the

655
00:32:18,090 --> 00:32:23,759
administrators in case of decentralized

656
00:32:20,789 --> 00:32:26,759
applications is actually we also have

657
00:32:23,759 --> 00:32:28,409
locks they are called events and the

658
00:32:26,759 --> 00:32:30,720
difference is that they are published to

659
00:32:28,409 --> 00:32:33,869
the public blockchain so actually it's

660
00:32:30,720 --> 00:32:37,230
like you have locks but all other people

661
00:32:33,869 --> 00:32:38,970
also have your locks and that's why you

662
00:32:37,230 --> 00:32:41,549
shouldn't of course put some sensitive

663
00:32:38,970 --> 00:32:44,999
data in this looks but you should

664
00:32:41,549 --> 00:32:49,559
monitor them because in blockchain when

665
00:32:44,999 --> 00:32:50,220
you find a vulnerability it's always

666
00:32:49,559 --> 00:32:52,799
erased

667
00:32:50,220 --> 00:32:56,609
who's first the owner of the contract

668
00:32:52,799 --> 00:33:00,418
that tries to fix the vulnerability or

669
00:32:56,609 --> 00:33:02,999
the hackers so you should make sure that

670
00:33:00,419 --> 00:33:06,570
you respond you have the true incident

671
00:33:02,999 --> 00:33:09,899
response in this case event response in

672
00:33:06,570 --> 00:33:12,178
your in your applications and actually

673
00:33:09,899 --> 00:33:14,070
this can be some kind of micro services

674
00:33:12,179 --> 00:33:15,929
that are running on centralized service

675
00:33:14,070 --> 00:33:17,530
they don't have to be on the on the

676
00:33:15,929 --> 00:33:21,040
blockchain

677
00:33:17,530 --> 00:33:23,920
and talking about the security alert and

678
00:33:21,040 --> 00:33:28,330
fixing the security bugs well in case of

679
00:33:23,920 --> 00:33:30,790
applications you can this this is the

680
00:33:28,330 --> 00:33:33,300
general concept I'm sure I know that

681
00:33:30,790 --> 00:33:37,510
it's not that easy always but you can

682
00:33:33,300 --> 00:33:41,350
take down your application watch it like

683
00:33:37,510 --> 00:33:45,129
deploy the fix and then redeploy it turn

684
00:33:41,350 --> 00:33:46,750
it on again in case of decentralized

685
00:33:45,130 --> 00:33:49,960
applications it's not that easy because

686
00:33:46,750 --> 00:33:54,790
once you deploy the smart contract

687
00:33:49,960 --> 00:33:57,550
you cannot just simply take it down but

688
00:33:54,790 --> 00:34:01,510
the back needs to be fixed so the idea

689
00:33:57,550 --> 00:34:05,500
here is to and this of course this is

690
00:34:01,510 --> 00:34:10,330
arguable but the idea is that you should

691
00:34:05,500 --> 00:34:13,360
fix the bug and then redeploy your whole

692
00:34:10,330 --> 00:34:16,929
actually deploy again you're all your

693
00:34:13,360 --> 00:34:19,320
smart contracts and to avoid such

694
00:34:16,929 --> 00:34:21,909
problems you should first have a

695
00:34:19,320 --> 00:34:24,700
functionality some kind of mechanism

696
00:34:21,909 --> 00:34:27,370
that will allow you to stop the most

697
00:34:24,699 --> 00:34:29,049
sensitive functionalities in your smart

698
00:34:27,370 --> 00:34:34,089
contracts for some time

699
00:34:29,050 --> 00:34:37,120
however this mechanism cannot it it must

700
00:34:34,090 --> 00:34:39,340
still be able for people to access their

701
00:34:37,120 --> 00:34:42,520
assets like for example tokens if your

702
00:34:39,340 --> 00:34:43,389
smart contract platform has some tokens

703
00:34:42,520 --> 00:34:46,360
uses tokens

704
00:34:43,389 --> 00:34:48,700
you must unload the owners of these

705
00:34:46,360 --> 00:34:51,730
tokens to transfer it or to withdraw it

706
00:34:48,699 --> 00:34:54,089
whatever so only the functionality the

707
00:34:51,730 --> 00:34:56,350
business logic should be stopped and

708
00:34:54,090 --> 00:34:59,590
also you should make sure that there is

709
00:34:56,350 --> 00:35:02,319
an upgrade process for the contract

710
00:34:59,590 --> 00:35:04,570
which allows you to deploy the contract

711
00:35:02,320 --> 00:35:06,430
again of course there is no one great

712
00:35:04,570 --> 00:35:08,190
solution for that there is no one

713
00:35:06,430 --> 00:35:12,879
upgrade process that solves all problems

714
00:35:08,190 --> 00:35:16,110
this is this is in individual but for

715
00:35:12,880 --> 00:35:18,910
each smart contract platform you should

716
00:35:16,110 --> 00:35:24,580
for each smart contract you should think

717
00:35:18,910 --> 00:35:28,060
over such process so to sum up a SSDs is

718
00:35:24,580 --> 00:35:29,740
some well we can say that it fills the

719
00:35:28,060 --> 00:35:31,980
gap of the ASVs

720
00:35:29,740 --> 00:35:35,220
in the distance realized application

721
00:35:31,980 --> 00:35:39,660
world and I told you that we have that

722
00:35:35,220 --> 00:35:42,689
one known attacks category number 13

723
00:35:39,660 --> 00:35:45,779
which is actually a category that allows

724
00:35:42,690 --> 00:35:49,050
you to quickly check whether your smart

725
00:35:45,780 --> 00:35:51,780
contract is vulnerable to well-known

726
00:35:49,050 --> 00:35:54,770
attacks in the decentralized world of

727
00:35:51,780 --> 00:35:57,329
course and actually these are the

728
00:35:54,770 --> 00:35:59,250
requirements that are references to

729
00:35:57,329 --> 00:36:01,349
other requirements from other categories

730
00:35:59,250 --> 00:36:03,480
so for example if you want to check

731
00:36:01,349 --> 00:36:05,910
whether you are vulnerable to silent

732
00:36:03,480 --> 00:36:09,300
falling sands and unchecked sands

733
00:36:05,910 --> 00:36:11,520
attacks you just need to pass four point

734
00:36:09,300 --> 00:36:12,900
six and four point seven requirements so

735
00:36:11,520 --> 00:36:15,089
these are the requirements from the

736
00:36:12,900 --> 00:36:16,950
category number four and if you want to

737
00:36:15,089 --> 00:36:19,380
make sure that you are not vulnerable to

738
00:36:16,950 --> 00:36:22,759
reinsurance the attacks you should make

739
00:36:19,380 --> 00:36:26,670
sure that you pass four point five okay

740
00:36:22,760 --> 00:36:31,050
so the next plan the future plan above

741
00:36:26,670 --> 00:36:34,050
the s CSVs is to publish it the open

742
00:36:31,050 --> 00:36:37,349
source on github on our company's github

743
00:36:34,050 --> 00:36:39,540
and we're gonna do it on the first of

744
00:36:37,349 --> 00:36:42,240
October if you want to be informed about

745
00:36:39,540 --> 00:36:44,690
this you can either leave me a card

746
00:36:42,240 --> 00:36:48,598
after the presentation or just sign up

747
00:36:44,690 --> 00:36:51,390
under this core code and of course it's

748
00:36:48,599 --> 00:36:55,380
only used for s CSVs alert that's not

749
00:36:51,390 --> 00:36:57,589
there's no any spam from from this

750
00:36:55,380 --> 00:36:59,640
mailing list and we are also considering

751
00:36:57,589 --> 00:37:02,640
running as CSVs

752
00:36:59,640 --> 00:37:05,460
under a wasp and we would like to build

753
00:37:02,640 --> 00:37:08,368
a community around this project so if

754
00:37:05,460 --> 00:37:11,790
you feel invited if you'd like to

755
00:37:08,369 --> 00:37:14,520
contribute to the project when it's when

756
00:37:11,790 --> 00:37:18,630
it's on the github published just you

757
00:37:14,520 --> 00:37:22,440
know just contribute ok so if you need a

758
00:37:18,630 --> 00:37:26,250
security audit go for a CSVs from the

759
00:37:22,440 --> 00:37:27,809
1st of October and as I said if you need

760
00:37:26,250 --> 00:37:33,430
to be if you want to be informed just

761
00:37:27,809 --> 00:37:36,560
with me or leave me a contact thank you

762
00:37:33,430 --> 00:37:36,560
[Applause]

763
00:37:38,100 --> 00:37:51,400
do we have any questions

764
00:37:40,050 --> 00:37:54,760
hmm just a second give mine sorry thank

765
00:37:51,400 --> 00:37:58,330
you for your presentation you have a lot

766
00:37:54,760 --> 00:38:01,840
of knowledge about known vulnerabilities

767
00:37:58,330 --> 00:38:06,490
now and I think that a lot of those are

768
00:38:01,840 --> 00:38:10,240
part of the solidity language do you

769
00:38:06,490 --> 00:38:13,629
also work together with creators of that

770
00:38:10,240 --> 00:38:16,060
language no I do not cooperate with them

771
00:38:13,630 --> 00:38:20,080
however well it's a bit true because the

772
00:38:16,060 --> 00:38:21,840
the the language is not very secure

773
00:38:20,080 --> 00:38:24,430
secure by design

774
00:38:21,840 --> 00:38:26,920
however there are other approaches like

775
00:38:24,430 --> 00:38:29,169
for example VIPRE there is language for

776
00:38:26,920 --> 00:38:31,750
for each idiom because I was mostly

777
00:38:29,170 --> 00:38:34,630
talking about a Tyrian platform which

778
00:38:31,750 --> 00:38:38,980
uses solidity language but there is also

779
00:38:34,630 --> 00:38:44,170
a viper in python that trans translates

780
00:38:38,980 --> 00:38:46,500
your code into solidity but is it has

781
00:38:44,170 --> 00:38:50,350
some mechanism that you know gives you

782
00:38:46,500 --> 00:38:52,570
more secure code and but also the the

783
00:38:50,350 --> 00:38:58,440
hack about else play was from eus

784
00:38:52,570 --> 00:39:03,070
platform which uses a bit modified c++

785
00:38:58,440 --> 00:39:05,470
so they'd also have problems that arise

786
00:39:03,070 --> 00:39:10,570
from the fact that from from the C++

787
00:39:05,470 --> 00:39:12,700
language one well the I think the good

788
00:39:10,570 --> 00:39:14,980
approach is with card on a platform they

789
00:39:12,700 --> 00:39:19,089
use Pluto's language which is based on

790
00:39:14,980 --> 00:39:22,090
Haskell a functional language and that's

791
00:39:19,090 --> 00:39:26,880
a good approach in my opinion because

792
00:39:22,090 --> 00:39:32,250
you can easily formerly verify such such

793
00:39:26,880 --> 00:39:35,400
contract okay

794
00:39:32,250 --> 00:39:35,400
[Music]

795
00:39:35,450 --> 00:39:40,350
anybody else the simple answer is yes

796
00:39:37,859 --> 00:39:45,180
some of these are just because the so

797
00:39:40,350 --> 00:39:46,950
EDT absolute no more questions left and

798
00:39:45,180 --> 00:39:47,669
run would like to say thank you thank

799
00:39:46,950 --> 00:39:51,609
you

800
00:39:47,670 --> 00:39:51,610
[Applause]

