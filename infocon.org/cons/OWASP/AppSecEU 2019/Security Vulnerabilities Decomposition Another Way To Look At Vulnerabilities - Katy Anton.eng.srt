1
00:00:03,279 --> 00:00:07,250
hello everyone and thank you very much

2
00:00:05,870 --> 00:00:14,530
for coming to this session about the

3
00:00:07,250 --> 00:00:21,259
composing security vulnerabilities a

4
00:00:14,530 --> 00:00:24,740
show of hands how many of you implement

5
00:00:21,260 --> 00:00:26,630
security in your company or no company

6
00:00:24,740 --> 00:00:34,849
that implements security in order to

7
00:00:26,630 --> 00:00:38,480
comply with regulations and this is the

8
00:00:34,850 --> 00:00:42,499
current state at the moment the security

9
00:00:38,480 --> 00:00:44,480
is perceived as a checkbox and it is

10
00:00:42,499 --> 00:00:47,690
there primarily for compliance

11
00:00:44,480 --> 00:00:50,148
regulations reasons we develop policies

12
00:00:47,690 --> 00:00:52,309
that contains various vulnerabilities

13
00:00:50,149 --> 00:00:55,129
each company is interested to comply

14
00:00:52,309 --> 00:01:00,559
with most commonly use are the author's

15
00:00:55,129 --> 00:01:02,960
top 10 which is the most most cited

16
00:01:00,559 --> 00:01:05,509
document and it's a little bit both a

17
00:01:02,960 --> 00:01:09,469
blessing and the curse especially since

18
00:01:05,509 --> 00:01:13,369
it was picked by PCI DSS as a standard

19
00:01:09,469 --> 00:01:16,309
which is not and then we develop these

20
00:01:13,369 --> 00:01:20,810
policies that contain all the our top 10

21
00:01:16,310 --> 00:01:24,130
because why not put them all and then we

22
00:01:20,810 --> 00:01:29,240
run applications from very various tools

23
00:01:24,130 --> 00:01:31,850
static analysis dynamic analysis to see

24
00:01:29,240 --> 00:01:35,419
how those applications are against these

25
00:01:31,850 --> 00:01:37,750
policies and then we get the reports and

26
00:01:35,420 --> 00:01:41,780
the reports are sent to the applications

27
00:01:37,750 --> 00:01:46,939
security teams and then the live

28
00:01:41,780 --> 00:01:50,869
developers so how many of you are from

29
00:01:46,939 --> 00:01:54,169
the application security team and how

30
00:01:50,869 --> 00:01:56,450
many of you are developers so you both

31
00:01:54,170 --> 00:02:01,189
have been on this side when you get now

32
00:01:56,450 --> 00:02:04,009
you have large reports with lots of

33
00:02:01,189 --> 00:02:06,829
flaws that needs to be resolved in order

34
00:02:04,009 --> 00:02:08,598
to comply with the new policies and this

35
00:02:06,829 --> 00:02:11,269
becomes a problem in particular in

36
00:02:08,598 --> 00:02:13,488
companies where there is a security gate

37
00:02:11,269 --> 00:02:14,450
and developers cannot develop deploy

38
00:02:13,489 --> 00:02:18,940
their software

39
00:02:14,450 --> 00:02:22,179
until those flows have been resolved and

40
00:02:18,940 --> 00:02:24,620
this is the problem when the focus

41
00:02:22,180 --> 00:02:26,420
shifts a little bit so instead of

42
00:02:24,620 --> 00:02:29,480
actually focusing on the actual security

43
00:02:26,420 --> 00:02:32,420
of the application the focus is on

44
00:02:29,480 --> 00:02:35,959
making this flows disappears from the

45
00:02:32,420 --> 00:02:38,089
report so developers can I can go and

46
00:02:35,959 --> 00:02:42,350
release their selves here and this is

47
00:02:38,090 --> 00:02:44,180
when I get questions like my application

48
00:02:42,350 --> 00:02:48,200
is behind the firewall why do I have to

49
00:02:44,180 --> 00:02:50,569
fix the SQL injection or sometimes I

50
00:02:48,200 --> 00:02:53,030
have fixed the cross-site scripting I

51
00:02:50,569 --> 00:02:56,869
have actually added a filter that looks

52
00:02:53,030 --> 00:03:01,700
for the word for the tag script so it's

53
00:02:56,870 --> 00:03:04,160
a shift now in actual in in order to get

54
00:03:01,700 --> 00:03:05,988
rid of these vulnerabilities and have

55
00:03:04,160 --> 00:03:08,359
the software release so they can focus

56
00:03:05,989 --> 00:03:14,600
on their what they like the most

57
00:03:08,360 --> 00:03:16,880
fixing the flaws and the problem is that

58
00:03:14,600 --> 00:03:20,150
today we still develop a high large of

59
00:03:16,880 --> 00:03:23,060
insecure applications and injection is

60
00:03:20,150 --> 00:03:26,570
still king and this is the current state

61
00:03:23,060 --> 00:03:29,420
in the law in the latest OS top 10 2017

62
00:03:26,570 --> 00:03:32,060
injection is still in pole position at

63
00:03:29,420 --> 00:03:34,790
number one and we have known about these

64
00:03:32,060 --> 00:03:36,850
vulnerabilities for over 20 years the

65
00:03:34,790 --> 00:03:40,130
SQL injection was first mentioned in

66
00:03:36,850 --> 00:03:42,350
1998 in frag magazine the term of

67
00:03:40,130 --> 00:03:46,280
cross-site scripting has been coined by

68
00:03:42,350 --> 00:03:49,640
Microsoft in 1999 so we know about these

69
00:03:46,280 --> 00:03:51,350
vulnerabilities for over 20 years so the

70
00:03:49,640 --> 00:03:55,070
question is is there anything else that

71
00:03:51,350 --> 00:03:56,810
we can do because if we continue on the

72
00:03:55,070 --> 00:03:59,000
same route and we do the same thing like

73
00:03:56,810 --> 00:04:00,709
we've done until now we are at the risk

74
00:03:59,000 --> 00:04:04,700
of talking about injection for the next

75
00:04:00,709 --> 00:04:06,500
20 years a little bit about myself Who

76
00:04:04,700 --> 00:04:08,179
am I and why am I talking to you today

77
00:04:06,500 --> 00:04:10,430
my name is Katie Anton I come from a

78
00:04:08,180 --> 00:04:12,139
software development background and this

79
00:04:10,430 --> 00:04:14,630
is when I got involved into the our top

80
00:04:12,139 --> 00:04:16,940
10 proactive controls which is a project

81
00:04:14,630 --> 00:04:18,108
for developer by developers which should

82
00:04:16,940 --> 00:04:21,469
be included in every software

83
00:04:18,108 --> 00:04:22,969
development project I currently work as

84
00:04:21,470 --> 00:04:26,030
application security consultant at

85
00:04:22,970 --> 00:04:28,240
Veracruz where I advise application

86
00:04:26,030 --> 00:04:32,080
security teams and developers around the

87
00:04:28,240 --> 00:04:35,229
world to secure their software in most

88
00:04:32,080 --> 00:04:41,080
companies the security posture is

89
00:04:35,229 --> 00:04:43,419
measured using the cwe's which stands

90
00:04:41,080 --> 00:04:45,460
for common weakness enumeration in this

91
00:04:43,419 --> 00:04:51,280
kind of a standard in most companies so

92
00:04:45,460 --> 00:04:54,520
this is a formal list which is which is

93
00:04:51,280 --> 00:04:56,619
a way to May which describes the

94
00:04:54,520 --> 00:04:58,900
software security of weaknesses which

95
00:04:56,620 --> 00:05:04,509
have been introduced in the software at

96
00:04:58,900 --> 00:05:09,068
architecture and design stage and during

97
00:05:04,509 --> 00:05:11,520
the code development and this is what

98
00:05:09,069 --> 00:05:14,259
all of these are software security

99
00:05:11,520 --> 00:05:16,440
weaknesses and they have been analyzed

100
00:05:14,259 --> 00:05:19,630
for a long period of time

101
00:05:16,440 --> 00:05:22,620
classified organized there is a very

102
00:05:19,630 --> 00:05:32,139
nice classification on Nvidia website of

103
00:05:22,620 --> 00:05:35,889
all of this and I will start my analysis

104
00:05:32,139 --> 00:05:41,110
with the most common category of

105
00:05:35,889 --> 00:05:44,650
vulnerabilities which is injection now

106
00:05:41,110 --> 00:05:46,810
the injection is still the most common

107
00:05:44,650 --> 00:05:50,169
vulnerability found in software

108
00:05:46,810 --> 00:05:53,800
applications today as a Catterick

109
00:05:50,169 --> 00:05:57,520
category it contains multiple types of

110
00:05:53,800 --> 00:05:59,530
injections and you have command

111
00:05:57,520 --> 00:06:02,799
injection cross-site scripting code

112
00:05:59,530 --> 00:06:05,020
injection XML injection LDAP injection

113
00:06:02,800 --> 00:06:08,800
SQL injection just to name a few

114
00:06:05,020 --> 00:06:11,650
injections and if we go a little bit

115
00:06:08,800 --> 00:06:14,669
further in details in all in each of

116
00:06:11,650 --> 00:06:17,460
these then you can have a further

117
00:06:14,669 --> 00:06:19,840
classification of all of these

118
00:06:17,460 --> 00:06:21,789
injections for example this is a

119
00:06:19,840 --> 00:06:23,770
classification of the SQL injection only

120
00:06:21,789 --> 00:06:25,810
now you don't need to spend much time

121
00:06:23,770 --> 00:06:28,599
looking on this graph but the point that

122
00:06:25,810 --> 00:06:31,240
I'm trying to make is that and now we

123
00:06:28,599 --> 00:06:34,780
are asking developers to think of all of

124
00:06:31,240 --> 00:06:36,610
this type of injections when they write

125
00:06:34,780 --> 00:06:38,260
the code and that's not possible for

126
00:06:36,610 --> 00:06:40,830
there because their focus is on writing

127
00:06:38,260 --> 00:06:42,930
the functionality

128
00:06:40,830 --> 00:06:45,508
so no wonder that we are still talking

129
00:06:42,930 --> 00:06:50,340
about injections today so the question

130
00:06:45,509 --> 00:06:53,940
is is there anything else that we can do

131
00:06:50,340 --> 00:07:01,669
can we look in another way at all of

132
00:06:53,940 --> 00:07:08,219
these if we go back to the injection and

133
00:07:01,669 --> 00:07:11,400
we just go to a very simple definition

134
00:07:08,220 --> 00:07:15,240
of what the injection is just the basic

135
00:07:11,400 --> 00:07:19,169
very basic one the injection occurs when

136
00:07:15,240 --> 00:07:22,440
you have some type of data which is then

137
00:07:19,169 --> 00:07:24,990
combined with a sort of a syntax that a

138
00:07:22,440 --> 00:07:27,840
result is then sent through a parser and

139
00:07:24,990 --> 00:07:31,979
that's when it ends up being executed as

140
00:07:27,840 --> 00:07:34,590
code so the data which is not only from

141
00:07:31,979 --> 00:07:37,590
get impose but also from a wide variety

142
00:07:34,590 --> 00:07:39,719
of sources like HTTP headers file

143
00:07:37,590 --> 00:07:42,060
uploads configuration files data from

144
00:07:39,719 --> 00:07:44,580
the database so when taken from all

145
00:07:42,060 --> 00:07:48,180
these variety of sources is combined

146
00:07:44,580 --> 00:07:50,068
with the sort of a syntax that result is

147
00:07:48,180 --> 00:07:52,080
sent to a parser and when we want to

148
00:07:50,069 --> 00:07:54,449
store the data into the database we send

149
00:07:52,080 --> 00:07:57,840
that result to the SQL person when

150
00:07:54,449 --> 00:08:01,560
sending it when rendering a webpage we

151
00:07:57,840 --> 00:08:04,049
send that result to an HTML parser or

152
00:08:01,560 --> 00:08:08,190
the browser and that's when we end up

153
00:08:04,050 --> 00:08:12,169
with that data being executed as part of

154
00:08:08,190 --> 00:08:17,539
the code I would like to take this view

155
00:08:12,169 --> 00:08:21,120
in order to focus more on the red part

156
00:08:17,539 --> 00:08:24,840
the output where we end up with a curl

157
00:08:21,120 --> 00:08:28,229
with that data executed as code and I'm

158
00:08:24,840 --> 00:08:33,478
going to flip it so in the case of the

159
00:08:28,229 --> 00:08:36,809
SQL injection we have the data which is

160
00:08:33,479 --> 00:08:41,760
combined with the SQL query that is sent

161
00:08:36,809 --> 00:08:45,359
to the SQL parser and that's when we end

162
00:08:41,760 --> 00:08:47,459
up with the injection the best defense

163
00:08:45,360 --> 00:08:50,220
for this is to promote rise the data

164
00:08:47,459 --> 00:08:53,279
before sending it to the parser and this

165
00:08:50,220 --> 00:08:54,270
is the primary control data prompt

166
00:08:53,279 --> 00:08:55,770
ization but

167
00:08:54,270 --> 00:08:59,030
defensing that we still have to validate

168
00:08:55,770 --> 00:09:02,189
the input the input validation helps to

169
00:08:59,030 --> 00:09:05,160
prevent a vulnerabilities that a

170
00:09:02,190 --> 00:09:07,560
developer might not be aware of at the

171
00:09:05,160 --> 00:09:09,990
time of writing the code a good example

172
00:09:07,560 --> 00:09:12,449
for this is the second-order SQL

173
00:09:09,990 --> 00:09:15,570
injection which is the injection where

174
00:09:12,450 --> 00:09:18,000
the injection payload is recorded and

175
00:09:15,570 --> 00:09:19,830
stays dormant in the database until it

176
00:09:18,000 --> 00:09:23,250
finds the right environment to be

177
00:09:19,830 --> 00:09:26,120
exploited so that's why we need both of

178
00:09:23,250 --> 00:09:30,570
these controls the primary defense and

179
00:09:26,120 --> 00:09:33,150
the defense in the input validation in

180
00:09:30,570 --> 00:09:36,600
the case of the cross-site scripting we

181
00:09:33,150 --> 00:09:38,340
need to contextually encode the output

182
00:09:36,600 --> 00:09:40,950
to neutralize the characters that can

183
00:09:38,340 --> 00:09:42,270
trigger the code injection but as in

184
00:09:40,950 --> 00:09:45,000
fencing that we still have to validate

185
00:09:42,270 --> 00:09:49,319
the input and similarly for XML

186
00:09:45,000 --> 00:09:55,470
injection code injection LDAP injection

187
00:09:49,320 --> 00:10:00,080
and command injection so rather than

188
00:09:55,470 --> 00:10:03,450
focusing off on all type of injections

189
00:10:00,080 --> 00:10:05,490
which can be overwhelming on develop for

190
00:10:03,450 --> 00:10:07,770
developers and definitely I know from my

191
00:10:05,490 --> 00:10:11,190
experience that it cannot be done when

192
00:10:07,770 --> 00:10:13,380
they are writing their code what we can

193
00:10:11,190 --> 00:10:15,540
do instead is to focus on these

194
00:10:13,380 --> 00:10:19,380
techniques which are familiar to them

195
00:10:15,540 --> 00:10:25,530
and as a primary defense we should

196
00:10:19,380 --> 00:10:27,270
always parametrize the data if that's

197
00:10:25,530 --> 00:10:28,860
not possible then contextual inker to

198
00:10:27,270 --> 00:10:30,689
neutralise the characters that can

199
00:10:28,860 --> 00:10:32,160
trigger the injection and thus defense

200
00:10:30,690 --> 00:10:36,570
in that we still have to validate the

201
00:10:32,160 --> 00:10:38,520
input the best point to family the input

202
00:10:36,570 --> 00:10:40,890
is when your data entered the

203
00:10:38,520 --> 00:10:43,920
application in order to effectively

204
00:10:40,890 --> 00:10:45,660
reduce the attack surface for example in

205
00:10:43,920 --> 00:10:47,790
the case of an MVC framework the best

206
00:10:45,660 --> 00:10:50,069
point of all the data is in the

207
00:10:47,790 --> 00:10:54,990
controller that's where the data enters

208
00:10:50,070 --> 00:10:58,140
the application the next category of ICH

209
00:10:54,990 --> 00:11:01,590
flows offending to tackle our intruder

210
00:10:58,140 --> 00:11:04,290
or better said or better said the lack

211
00:11:01,590 --> 00:11:07,920
of intrusion detection the problem today

212
00:11:04,290 --> 00:11:10,529
in most applications is that

213
00:11:07,920 --> 00:11:11,118
auditable events like logging fair

214
00:11:10,529 --> 00:11:13,410
Logging's

215
00:11:11,119 --> 00:11:17,869
high-level transactions are not logged

216
00:11:13,410 --> 00:11:20,670
if there is any type of logging in place

217
00:11:17,869 --> 00:11:23,429
then the format is not consistent enough

218
00:11:20,670 --> 00:11:26,569
in order to allow the operations teams

219
00:11:23,429 --> 00:11:28,829
do you centralize all these logs

220
00:11:26,569 --> 00:11:31,290
automatically produces in order to get

221
00:11:28,829 --> 00:11:33,149
some meaningful information intrusion

222
00:11:31,290 --> 00:11:33,660
information within a reasonable amount

223
00:11:33,149 --> 00:11:36,689
of time

224
00:11:33,660 --> 00:11:40,259
so the problem boiled primarily to two

225
00:11:36,689 --> 00:11:44,160
things one is the what is locked and the

226
00:11:40,259 --> 00:11:47,279
second one is the content the format of

227
00:11:44,160 --> 00:11:50,790
the logs to put it simply if a pen

228
00:11:47,279 --> 00:11:53,669
tester is able to get into into a system

229
00:11:50,790 --> 00:11:57,480
without being detected this is a good

230
00:11:53,669 --> 00:12:02,339
indication that that application or API

231
00:11:57,480 --> 00:12:04,489
does not have enough it's not it does

232
00:12:02,339 --> 00:12:07,739
not have enough intrusion detection

233
00:12:04,489 --> 00:12:10,019
mechanism so the question is can

234
00:12:07,739 --> 00:12:12,119
developer do something about this

235
00:12:10,019 --> 00:12:15,209
for this we have the security control

236
00:12:12,119 --> 00:12:17,999
which is the security logging this is a

237
00:12:15,209 --> 00:12:20,729
control that developers can use in order

238
00:12:17,999 --> 00:12:24,529
to log security information during the

239
00:12:20,730 --> 00:12:24,529
runtime operation of an application

240
00:12:25,279 --> 00:12:31,589
according to the auspices of a very good

241
00:12:29,459 --> 00:12:34,378
project it has two parts one is the

242
00:12:31,589 --> 00:12:35,910
document a tool and another one is the

243
00:12:34,379 --> 00:12:38,489
documentation and this is what I'm going

244
00:12:35,910 --> 00:12:41,129
to focus on as part of this presentation

245
00:12:38,489 --> 00:12:46,290
so according to the absences they're

246
00:12:41,129 --> 00:12:49,470
considered six types of detection points

247
00:12:46,290 --> 00:12:51,149
which are good attack identifiers and

248
00:12:49,470 --> 00:12:54,119
these are authentication and

249
00:12:51,149 --> 00:12:57,480
authorization failures client-side input

250
00:12:54,119 --> 00:12:59,939
validation bypasses widely validation of

251
00:12:57,480 --> 00:13:02,429
failures obviously code injection

252
00:12:59,939 --> 00:13:05,969
attacks like for example when you have

253
00:13:02,429 --> 00:13:09,779
obvious SQL injection payloads or

254
00:13:05,970 --> 00:13:13,589
cross-site scripting payloads and a high

255
00:13:09,779 --> 00:13:16,529
rate of function years when you have a

256
00:13:13,589 --> 00:13:19,829
high number of page requests in a very

257
00:13:16,529 --> 00:13:21,209
short period of time so let's go a

258
00:13:19,829 --> 00:13:25,229
little bit through

259
00:13:21,209 --> 00:13:27,149
more in detail in some of these to have

260
00:13:25,230 --> 00:13:32,850
a better understanding of what exactly I

261
00:13:27,149 --> 00:13:35,660
mean now in the case of the request if

262
00:13:32,850 --> 00:13:39,420
an application expects to receive post

263
00:13:35,660 --> 00:13:41,279
but instead is receives yet these are

264
00:13:39,420 --> 00:13:43,819
very good indication that somebody has

265
00:13:41,279 --> 00:13:47,279
intentionally intercepted that

266
00:13:43,819 --> 00:13:51,809
communication and has intentionally

267
00:13:47,279 --> 00:13:53,790
changed from post to get this is a type

268
00:13:51,809 --> 00:13:57,600
of anomaly exception that should be

269
00:13:53,790 --> 00:14:01,649
locked again if the application receives

270
00:13:57,600 --> 00:14:04,319
extra or form or URL parameters a good

271
00:14:01,649 --> 00:14:06,839
example of this and something that a pen

272
00:14:04,319 --> 00:14:09,839
tester will all make almost every time

273
00:14:06,839 --> 00:14:14,129
do is to add the buggy code equal true

274
00:14:09,839 --> 00:14:17,309
if this extra form or URL parameters are

275
00:14:14,129 --> 00:14:19,439
detected on the server side of the

276
00:14:17,309 --> 00:14:22,019
validation this is another type of

277
00:14:19,439 --> 00:14:23,639
exception that should be logged in the

278
00:14:22,019 --> 00:14:26,129
case of authentication if the

279
00:14:23,639 --> 00:14:28,470
application expects to receive for

280
00:14:26,129 --> 00:14:30,209
example two parameters username and

281
00:14:28,470 --> 00:14:32,639
password but instead it receives only

282
00:14:30,209 --> 00:14:35,878
one of them the username because the

283
00:14:32,639 --> 00:14:38,540
password has been removed that's another

284
00:14:35,879 --> 00:14:41,189
type of exception that should be logged

285
00:14:38,540 --> 00:14:44,910
again if the application expects to

286
00:14:41,189 --> 00:14:48,029
receive if the application receives

287
00:14:44,910 --> 00:14:50,519
extra parameters during authentication

288
00:14:48,029 --> 00:14:53,279
and something that a Pentastar again

289
00:14:50,519 --> 00:14:56,939
will try to do is admin equal true to

290
00:14:53,279 --> 00:14:59,189
see if he can escalate privileges if

291
00:14:56,939 --> 00:15:01,110
this is detected this is a another type

292
00:14:59,189 --> 00:15:07,349
of exception that should be logged in

293
00:15:01,110 --> 00:15:09,240
the case of input now if the validation

294
00:15:07,350 --> 00:15:11,040
on the server side fails despite the

295
00:15:09,240 --> 00:15:14,579
fact that there is a validation on the

296
00:15:11,040 --> 00:15:17,430
client side a very simple example of

297
00:15:14,579 --> 00:15:24,878
this you have a form

298
00:15:17,430 --> 00:15:28,628
in one of the HTML forms it has an HTML

299
00:15:24,879 --> 00:15:30,759
attribute of maximum length however when

300
00:15:28,629 --> 00:15:33,970
that string reaches the server it is

301
00:15:30,759 --> 00:15:36,040
greater than the length defined on the

302
00:15:33,970 --> 00:15:40,329
client-side now this is a very good

303
00:15:36,040 --> 00:15:43,449
indication that you have that since that

304
00:15:40,329 --> 00:15:47,800
data has left the client where we had

305
00:15:43,449 --> 00:15:49,529
the maximum length behind somebody has

306
00:15:47,800 --> 00:15:52,719
intercepted that communication

307
00:15:49,529 --> 00:15:54,790
intentionally changed that string when

308
00:15:52,720 --> 00:15:57,579
it and then sent it to the server side

309
00:15:54,790 --> 00:16:00,929
so this is a type of exception that the

310
00:15:57,579 --> 00:16:03,638
gain should be logged or another one is

311
00:16:00,929 --> 00:16:06,670
when the validation on the server side

312
00:16:03,639 --> 00:16:09,399
fails for known editable user fields

313
00:16:06,670 --> 00:16:12,550
like hidden field checkboxes radio

314
00:16:09,399 --> 00:16:15,519
buttons a good example for this is your

315
00:16:12,550 --> 00:16:19,240
honor ecommerce website and on the

316
00:16:15,519 --> 00:16:22,449
shopping basket if there is a hidden

317
00:16:19,240 --> 00:16:25,779
field there for the price that's a very

318
00:16:22,449 --> 00:16:29,609
tempting for somebody to start playing

319
00:16:25,779 --> 00:16:32,259
weight and if the value of that field is

320
00:16:29,610 --> 00:16:34,509
when received on the server is not the

321
00:16:32,259 --> 00:16:36,819
one that it is expected that's another

322
00:16:34,509 --> 00:16:45,749
example of a high value transactions

323
00:16:36,819 --> 00:16:54,579
where that anomaly should be logged so

324
00:16:45,749 --> 00:16:56,290
these are just what we are actually

325
00:16:54,579 --> 00:16:58,839
doing we are just ensuring that the

326
00:16:56,290 --> 00:17:03,969
server it receives what it expects to

327
00:16:58,839 --> 00:17:05,559
receive but by putting these exceptions

328
00:17:03,970 --> 00:17:09,279
into place what we are actually doing

329
00:17:05,559 --> 00:17:11,049
into the application we give the

330
00:17:09,279 --> 00:17:13,780
software the mechanisms to respond to

331
00:17:11,049 --> 00:17:18,040
this possible identified attacks

332
00:17:13,780 --> 00:17:21,369
and reduce them or even stop them

333
00:17:18,040 --> 00:17:25,389
depending of how it is respond to this

334
00:17:21,369 --> 00:17:28,929
when we do the coding so if we are to

335
00:17:25,390 --> 00:17:30,910
recap a basic workflow is that every

336
00:17:28,930 --> 00:17:33,310
time we have data entering our

337
00:17:30,910 --> 00:17:35,050
application which is validate it and

338
00:17:33,310 --> 00:17:40,030
does not only from get in post but also

339
00:17:35,050 --> 00:17:44,669
from configuration files database and

340
00:17:40,030 --> 00:17:48,760
exceptions should be locked any output

341
00:17:44,670 --> 00:17:50,980
should be contextually encoded and every

342
00:17:48,760 --> 00:17:53,350
time we send data to the database we

343
00:17:50,980 --> 00:17:56,410
should prompt rise the queries so this

344
00:17:53,350 --> 00:17:59,620
is a basic workflow that not only that

345
00:17:56,410 --> 00:18:01,630
will prevent a large portion of the

346
00:17:59,620 --> 00:18:03,969
injections but also give the server

347
00:18:01,630 --> 00:18:06,220
disability to respond in real-time to

348
00:18:03,970 --> 00:18:09,160
this possible identified attacks the

349
00:18:06,220 --> 00:18:12,010
ones that we have identified and we have

350
00:18:09,160 --> 00:18:14,830
chosen to respond in a manner to them

351
00:18:12,010 --> 00:18:16,870
another type of category that I will

352
00:18:14,830 --> 00:18:19,330
tackle is the sensitive data exposure

353
00:18:16,870 --> 00:18:23,649
and for this is about the data above the

354
00:18:19,330 --> 00:18:25,780
at rest and in transit now when it comes

355
00:18:23,650 --> 00:18:28,720
to date on anything ensure the

356
00:18:25,780 --> 00:18:31,030
confidentiality the data cannot be spied

357
00:18:28,720 --> 00:18:35,020
on integrity the data cannot be changed

358
00:18:31,030 --> 00:18:39,820
and availability there are several types

359
00:18:35,020 --> 00:18:43,120
of data depending of the type so when we

360
00:18:39,820 --> 00:18:46,300
have data at rest then we have the type

361
00:18:43,120 --> 00:18:49,209
of data where we need the initial value

362
00:18:46,300 --> 00:18:52,330
like crackers this must be encrypted

363
00:18:49,210 --> 00:18:54,310
then you have the data will still have

364
00:18:52,330 --> 00:18:56,620
the storage but you don't need to note

365
00:18:54,310 --> 00:18:59,770
the initial value like for example the

366
00:18:56,620 --> 00:19:02,110
user password Disney this must be hashed

367
00:18:59,770 --> 00:19:05,070
and then you have these entrances which

368
00:19:02,110 --> 00:19:07,209
must be encrypted over a secure Channel

369
00:19:05,070 --> 00:19:11,620
when it comes to encrypted data

370
00:19:07,210 --> 00:19:15,190
oppressed a challenging powerful

371
00:19:11,620 --> 00:19:17,620
developers is to actually store securely

372
00:19:15,190 --> 00:19:19,660
the key that is used to encrypt data and

373
00:19:17,620 --> 00:19:22,060
this is an example of from an

374
00:19:19,660 --> 00:19:25,120
application and that we discovered

375
00:19:22,060 --> 00:19:27,129
during a code review where in a folder

376
00:19:25,120 --> 00:19:28,870
in the same folder we had to

377
00:19:27,130 --> 00:19:31,300
files in one of them we had the

378
00:19:28,870 --> 00:19:32,439
encrypted password which we kind of

379
00:19:31,300 --> 00:19:36,000
guess what the encrypted password

380
00:19:32,440 --> 00:19:40,180
contained and the other one always

381
00:19:36,000 --> 00:19:45,270
contain was entities and when opened it

382
00:19:40,180 --> 00:19:48,670
contain a seed assault and iteration

383
00:19:45,270 --> 00:19:49,990
which turned out to be used in

384
00:19:48,670 --> 00:19:53,140
conjunction with the password-based key

385
00:19:49,990 --> 00:19:56,140
derivation function to to generate the

386
00:19:53,140 --> 00:19:58,810
key that was used to encrypt the data so

387
00:19:56,140 --> 00:20:02,760
to put it simply in the same folder we

388
00:19:58,810 --> 00:20:05,560
had both the encrypted data and also

389
00:20:02,760 --> 00:20:08,980
everything that you need to do in order

390
00:20:05,560 --> 00:20:10,960
to generate that team happy days for

391
00:20:08,980 --> 00:20:13,690
everyone getting access to that folder

392
00:20:10,960 --> 00:20:17,440
and this was a new application where the

393
00:20:13,690 --> 00:20:21,300
team has tried to come up with their own

394
00:20:17,440 --> 00:20:23,620
homegrown solution of storing the case

395
00:20:21,300 --> 00:20:26,800
which is definitely something that you

396
00:20:23,620 --> 00:20:29,649
shouldn't do so when it comes to data at

397
00:20:26,800 --> 00:20:31,540
rest when you need to encrypt it the

398
00:20:29,650 --> 00:20:34,420
best cryptographic algorithm out there

399
00:20:31,540 --> 00:20:37,389
is there a yes but it is important to

400
00:20:34,420 --> 00:20:42,100
store the key away from the encrypted

401
00:20:37,390 --> 00:20:45,340
data stay away from the homegrown

402
00:20:42,100 --> 00:20:49,570
solutions because is so easy so easily

403
00:20:45,340 --> 00:20:52,540
can go wrong and use dedicated key

404
00:20:49,570 --> 00:20:59,879
management solutions but it's also

405
00:20:52,540 --> 00:20:59,879
important to define a key life cycle and

406
00:21:01,200 --> 00:21:08,050
we need to have in place a mechanism to

407
00:21:04,380 --> 00:21:09,940
replace those keys because if the game

408
00:21:08,050 --> 00:21:12,159
has been compromised then you need to do

409
00:21:09,940 --> 00:21:14,590
that one anyway so it's better to have

410
00:21:12,160 --> 00:21:16,600
in advance define the process so when

411
00:21:14,590 --> 00:21:18,429
this happen you know exactly how to do

412
00:21:16,600 --> 00:21:23,820
it and you have it to document it as

413
00:21:18,430 --> 00:21:27,640
well when it comes to they then transit

414
00:21:23,820 --> 00:21:31,780
we are getting pretty good at sending

415
00:21:27,640 --> 00:21:34,330
the data encrypted over a secure channel

416
00:21:31,780 --> 00:21:37,780
between the client and the application

417
00:21:34,330 --> 00:21:40,240
server in particular thanks to let's

418
00:21:37,780 --> 00:21:40,870
encrypt we are getting pretty good at

419
00:21:40,240 --> 00:21:45,000
this one

420
00:21:40,870 --> 00:21:49,540
these days but you still have a problem

421
00:21:45,000 --> 00:21:51,700
between the communication behind the

422
00:21:49,540 --> 00:21:54,670
firewall like for example between the

423
00:21:51,700 --> 00:21:57,340
application servers and other non

424
00:21:54,670 --> 00:21:59,140
browser components like the database and

425
00:21:57,340 --> 00:22:01,510
this is where we have to improve as well

426
00:21:59,140 --> 00:22:02,770
so ideally when you transfer the data it

427
00:22:01,510 --> 00:22:05,260
should be over a secure Channel

428
00:22:02,770 --> 00:22:08,260
throughout including behind the firewall

429
00:22:05,260 --> 00:22:10,210
and the legs the next type of

430
00:22:08,260 --> 00:22:12,790
vulnerabilities that I will tackle is

431
00:22:10,210 --> 00:22:16,120
the third-party components or using

432
00:22:12,790 --> 00:22:17,379
components with known vulnerabilities we

433
00:22:16,120 --> 00:22:19,510
are getting pretty good and there are

434
00:22:17,380 --> 00:22:22,570
lots of tools out there to check for

435
00:22:19,510 --> 00:22:25,870
vulnerabilities in software components

436
00:22:22,570 --> 00:22:28,389
and open source of their components but

437
00:22:25,870 --> 00:22:32,050
the problem that I see from the

438
00:22:28,390 --> 00:22:34,480
discussions with developers is actually

439
00:22:32,050 --> 00:22:37,210
doing something about that list you end

440
00:22:34,480 --> 00:22:40,929
up with a pretty long list of all type

441
00:22:37,210 --> 00:22:42,760
of vulnerabilities and that's why it's

442
00:22:40,929 --> 00:22:45,160
the problem are actually doing something

443
00:22:42,760 --> 00:22:48,970
about it and the type of software that

444
00:22:45,160 --> 00:22:52,600
has this problem problems is the type of

445
00:22:48,970 --> 00:22:56,160
software that no developer wants to

446
00:22:52,600 --> 00:22:59,159
touch because he's afraid that if he

447
00:22:56,160 --> 00:23:02,890
touches in one part something will break

448
00:22:59,160 --> 00:23:05,740
so it is it to break you might do one

449
00:23:02,890 --> 00:23:10,059
change in one bit but you don't know

450
00:23:05,740 --> 00:23:13,210
where it will break it's difficult to

451
00:23:10,059 --> 00:23:15,610
test as a result of all of these

452
00:23:13,210 --> 00:23:18,700
problems nobody wants to go there and do

453
00:23:15,610 --> 00:23:20,678
any upgrades and all of these lead to

454
00:23:18,700 --> 00:23:24,630
technical debt so the bottom line is

455
00:23:20,679 --> 00:23:27,400
that all of these issues are because of

456
00:23:24,630 --> 00:23:30,070
application that have a high level of

457
00:23:27,400 --> 00:23:32,500
technical debt or design in some cases

458
00:23:30,070 --> 00:23:34,389
legacy applications which there are

459
00:23:32,500 --> 00:23:38,950
there are companies where they have

460
00:23:34,390 --> 00:23:40,870
quite a large proportion of these so

461
00:23:38,950 --> 00:23:42,640
what can we do about this before

462
00:23:40,870 --> 00:23:45,219
answering this question I'm going to

463
00:23:42,640 --> 00:23:47,650
introduce another concept and this is

464
00:23:45,220 --> 00:23:49,630
the attack surface which the attack

465
00:23:47,650 --> 00:23:51,429
surface as a simple definition is the

466
00:23:49,630 --> 00:23:54,190
sum of the total points

467
00:23:51,429 --> 00:23:57,729
through which a malicious actor can

468
00:23:54,190 --> 00:24:01,690
enter data into or extract data from a

469
00:23:57,729 --> 00:24:04,029
system and in security we have a very

470
00:24:01,690 --> 00:24:06,729
simple principle which is whenever we do

471
00:24:04,029 --> 00:24:08,799
we need to minimize this attack surface

472
00:24:06,729 --> 00:24:12,399
so this is the entire purpose of this

473
00:24:08,799 --> 00:24:14,559
and that's what you should do we should

474
00:24:12,399 --> 00:24:17,349
achieve to do as well when in bringing

475
00:24:14,559 --> 00:24:21,479
it's there no libraries so I'm going to

476
00:24:17,349 --> 00:24:24,908
take three examples of the scenario of

477
00:24:21,479 --> 00:24:28,059
these three components one of them is an

478
00:24:24,909 --> 00:24:28,989
open source library like a locking

479
00:24:28,059 --> 00:24:31,119
library which is something that

480
00:24:28,989 --> 00:24:32,469
developer would almost never time do

481
00:24:31,119 --> 00:24:35,289
their logging is something that they

482
00:24:32,469 --> 00:24:40,779
were bringing another example is

483
00:24:35,289 --> 00:24:43,299
offender API because again these are

484
00:24:40,779 --> 00:24:46,539
external component and despite the fact

485
00:24:43,299 --> 00:24:49,210
that is a partner we have to remember

486
00:24:46,539 --> 00:24:52,149
that these days there is a trend where

487
00:24:49,210 --> 00:24:55,330
rather than attacking the main target

488
00:24:52,149 --> 00:24:57,789
the hackers choose to attack a vendor a

489
00:24:55,330 --> 00:25:00,158
partner of the main target so we need to

490
00:24:57,789 --> 00:25:05,019
treat this one as an external component

491
00:25:00,159 --> 00:25:07,559
as well and now the next example is when

492
00:25:05,019 --> 00:25:10,359
you're bringing another library from

493
00:25:07,559 --> 00:25:12,129
another team within the same company and

494
00:25:10,359 --> 00:25:13,658
this happens a lot in large companies

495
00:25:12,129 --> 00:25:16,418
where you have one library that is then

496
00:25:13,659 --> 00:25:18,909
used through multiple applications so

497
00:25:16,419 --> 00:25:21,099
I'll start with the first example when

498
00:25:18,909 --> 00:25:23,259
bringing in a logging library this

499
00:25:21,099 --> 00:25:27,249
usually because it is ready-made it has

500
00:25:23,259 --> 00:25:29,349
a large number a wealth of functionality

501
00:25:27,249 --> 00:25:32,399
and highly likely that your application

502
00:25:29,349 --> 00:25:36,129
is not going to need the entire

503
00:25:32,399 --> 00:25:38,799
functional LT to be used in the case of

504
00:25:36,129 --> 00:25:41,408
logging you move you are likely to use

505
00:25:38,799 --> 00:25:44,049
only three levels like debug warning

506
00:25:41,409 --> 00:25:48,309
info so for this scenario when you want

507
00:25:44,049 --> 00:25:51,460
to exposing your software only a set of

508
00:25:48,309 --> 00:25:53,918
the functionality and you want to hide

509
00:25:51,460 --> 00:25:56,649
unwanted behavior a good design pattern

510
00:25:53,919 --> 00:26:00,099
is a simple wrapper what this allows you

511
00:25:56,649 --> 00:26:02,949
is so if there is data flowing through

512
00:26:00,099 --> 00:26:05,290
that one having this wrapper this

513
00:26:02,950 --> 00:26:08,620
interface it helps you

514
00:26:05,290 --> 00:26:10,210
control the data that you expose and if

515
00:26:08,620 --> 00:26:11,860
there is a vulnerability then you know

516
00:26:10,210 --> 00:26:14,380
exactly what we expose into your

517
00:26:11,860 --> 00:26:16,510
software and at that point at the

518
00:26:14,380 --> 00:26:18,250
interface points you have that one point

519
00:26:16,510 --> 00:26:23,890
where you can put extra controls if

520
00:26:18,250 --> 00:26:25,060
needs be but also very importantly so

521
00:26:23,890 --> 00:26:26,830
this is a way to reduce the attack

522
00:26:25,060 --> 00:26:29,200
surface that's that's one of the

523
00:26:26,830 --> 00:26:32,530
benefits also very importantly this is a

524
00:26:29,200 --> 00:26:36,070
design pattern that helps you to easier

525
00:26:32,530 --> 00:26:43,180
great or even replace obsolete libraries

526
00:26:36,070 --> 00:26:46,510
without much penalty the other example

527
00:26:43,180 --> 00:26:49,390
that I'm going to look into is a vendor

528
00:26:46,510 --> 00:26:52,120
API and for this I'm going to consider

529
00:26:49,390 --> 00:26:54,880
the case of a payment gateway which is

530
00:26:52,120 --> 00:26:56,889
common with in e-commerce applications

531
00:26:54,880 --> 00:26:58,630
and it's highly likely that in an

532
00:26:56,890 --> 00:27:03,670
e-commerce application you're going to

533
00:26:58,630 --> 00:27:07,690
have more than one payment gateway so

534
00:27:03,670 --> 00:27:11,770
for this this this this scenario also it

535
00:27:07,690 --> 00:27:14,590
is you have several partners and each of

536
00:27:11,770 --> 00:27:16,150
them have their own endpoint highly

537
00:27:14,590 --> 00:27:19,449
likely your application will have its

538
00:27:16,150 --> 00:27:21,130
own transactional method so for this

539
00:27:19,450 --> 00:27:23,230
scenario when you need to convert from

540
00:27:21,130 --> 00:27:24,910
the provided interface to the required

541
00:27:23,230 --> 00:27:28,180
interface a good software design pattern

542
00:27:24,910 --> 00:27:30,250
is the adapter design pattern this helps

543
00:27:28,180 --> 00:27:33,820
to convert from the provided interface

544
00:27:30,250 --> 00:27:36,340
so whatever the corner endpoints are to

545
00:27:33,820 --> 00:27:38,860
what your software needs also you can

546
00:27:36,340 --> 00:27:41,260
have multiple oddities at the same time

547
00:27:38,860 --> 00:27:44,530
so it's easy to switch between them so

548
00:27:41,260 --> 00:27:46,660
if a partner becomes bridge then this

549
00:27:44,530 --> 00:27:49,330
will allow you to you quickly get into

550
00:27:46,660 --> 00:27:53,260
control of your software and remove that

551
00:27:49,330 --> 00:27:58,689
problem and the third example that I

552
00:27:53,260 --> 00:28:01,750
will give is the scenario when you you

553
00:27:58,690 --> 00:28:04,360
use in your software a library that has

554
00:28:01,750 --> 00:28:06,040
been developed by another company by

555
00:28:04,360 --> 00:28:07,990
another thing within the same company a

556
00:28:06,040 --> 00:28:11,170
good example for this is the single

557
00:28:07,990 --> 00:28:15,790
sign-on which is quite commonly used in

558
00:28:11,170 --> 00:28:18,610
many applications this day and it can be

559
00:28:15,790 --> 00:28:19,220
quite complex so this package can get

560
00:28:18,610 --> 00:28:21,949
quite

561
00:28:19,220 --> 00:28:25,490
quite cumbersome and quite complex so

562
00:28:21,950 --> 00:28:27,410
for this scenario when you actually need

563
00:28:25,490 --> 00:28:29,630
to simplify the interaction between a

564
00:28:27,410 --> 00:28:32,870
complex subsystem and your own one you

565
00:28:29,630 --> 00:28:35,690
can use the facility design pattern now

566
00:28:32,870 --> 00:28:38,239
what this this is a very good one as

567
00:28:35,690 --> 00:28:40,220
well for legacy applications it

568
00:28:38,240 --> 00:28:42,860
simplifies this interaction between your

569
00:28:40,220 --> 00:28:46,490
own software and a complex subsystem so

570
00:28:42,860 --> 00:28:48,979
you can use it as well for legacy

571
00:28:46,490 --> 00:28:51,260
applications and it's again another type

572
00:28:48,980 --> 00:28:54,200
of design pattern where the sate gives

573
00:28:51,260 --> 00:28:56,720
it at one point where you can control

574
00:28:54,200 --> 00:28:59,990
and you can see what's exactly exposing

575
00:28:56,720 --> 00:29:03,980
to your software and it helps you out

576
00:28:59,990 --> 00:29:07,250
with the upgrade so if we are to recap a

577
00:29:03,980 --> 00:29:09,320
secure software starts from the design

578
00:29:07,250 --> 00:29:12,200
from the point that you have to who's

579
00:29:09,320 --> 00:29:14,210
and how you're going to bring assist a

580
00:29:12,200 --> 00:29:17,030
library a package into your own software

581
00:29:14,210 --> 00:29:19,880
from that point the security of the

582
00:29:17,030 --> 00:29:22,250
software start so you can use a simple

583
00:29:19,880 --> 00:29:25,400
wrapper when you want to expose into

584
00:29:22,250 --> 00:29:29,000
your software a set of functionality and

585
00:29:25,400 --> 00:29:32,360
you want to hide unwanted behavior then

586
00:29:29,000 --> 00:29:33,860
you can use the adapter design pattern

587
00:29:32,360 --> 00:29:35,929
when you want to change from the

588
00:29:33,860 --> 00:29:38,750
provided interface to the required

589
00:29:35,930 --> 00:29:42,890
interface and the facade for come up for

590
00:29:38,750 --> 00:29:44,510
legacy applications I think it's worth

591
00:29:42,890 --> 00:29:46,550
pointing as well that this work very

592
00:29:44,510 --> 00:29:48,200
well on the server side which where you

593
00:29:46,550 --> 00:29:50,870
can actually hide functionality they

594
00:29:48,200 --> 00:29:53,000
would not apply on the client side the

595
00:29:50,870 --> 00:29:54,949
last one that I would like to tackle is

596
00:29:53,000 --> 00:29:59,630
the environment configuration and we see

597
00:29:54,950 --> 00:30:02,330
more and more of these so we can as

598
00:29:59,630 --> 00:30:04,730
developer tackle this one during

599
00:30:02,330 --> 00:30:07,939
development during deployment and of the

600
00:30:04,730 --> 00:30:11,060
release now during development ideally

601
00:30:07,940 --> 00:30:16,300
you'd have a developer you use the same

602
00:30:11,060 --> 00:30:19,669
users as in production for example the

603
00:30:16,300 --> 00:30:21,530
database user that is used in the

604
00:30:19,670 --> 00:30:23,810
development environment it should have

605
00:30:21,530 --> 00:30:26,990
the same permissions as in the

606
00:30:23,810 --> 00:30:29,870
production connection and the

607
00:30:26,990 --> 00:30:31,580
application user used on the development

608
00:30:29,870 --> 00:30:32,530
environment should have again the same

609
00:30:31,580 --> 00:30:35,240
permission

610
00:30:32,530 --> 00:30:37,520
and ideally should be a dedicated one so

611
00:30:35,240 --> 00:30:41,990
if your application should access

612
00:30:37,520 --> 00:30:44,980
certain folders using only for example

613
00:30:41,990 --> 00:30:48,110
read permission which would apply to a

614
00:30:44,980 --> 00:30:50,450
configuration files for example then

615
00:30:48,110 --> 00:30:52,729
this should be in the development

616
00:30:50,450 --> 00:30:54,170
environment as well as in production so

617
00:30:52,730 --> 00:30:56,600
they should replicate as well in the

618
00:30:54,170 --> 00:30:58,190
production during deployment we should

619
00:30:56,600 --> 00:31:02,990
ensure that these permissions still

620
00:30:58,190 --> 00:31:05,660
apply and for companies oh this can be

621
00:31:02,990 --> 00:31:08,060
achieved today using infrastructure as

622
00:31:05,660 --> 00:31:10,160
good but if this is not available

623
00:31:08,060 --> 00:31:12,250
because it's not that modern application

624
00:31:10,160 --> 00:31:18,680
we can still achieve the same thing

625
00:31:12,250 --> 00:31:20,630
using a set of bash script for four

626
00:31:18,680 --> 00:31:23,000
critical parts of the system that we

627
00:31:20,630 --> 00:31:27,310
want to check the configuration for and

628
00:31:23,000 --> 00:31:30,140
again after the release ideally you'd

629
00:31:27,310 --> 00:31:31,790
adopt a configuration manager and ensure

630
00:31:30,140 --> 00:31:35,120
that you provide the scanning and

631
00:31:31,790 --> 00:31:37,780
continuous scanning across all the

632
00:31:35,120 --> 00:31:43,790
servers to ensure that the configuration

633
00:31:37,780 --> 00:31:48,260
is still preserved in place so rather

634
00:31:43,790 --> 00:31:52,210
than what I'd like you to take away is

635
00:31:48,260 --> 00:31:56,000
that rather than focusing on these cwe's

636
00:31:52,210 --> 00:31:58,850
because at the end all of these cwe's

637
00:31:56,000 --> 00:32:01,040
are software security weaknesses which

638
00:31:58,850 --> 00:32:04,399
we can measure only after the software

639
00:32:01,040 --> 00:32:07,129
has been developed let's focus instead

640
00:32:04,400 --> 00:32:09,680
on the security controls that prevent

641
00:32:07,130 --> 00:32:14,590
them are familiar to developers and they

642
00:32:09,680 --> 00:32:17,480
can be used from the beginning and also

643
00:32:14,590 --> 00:32:20,120
in order to be to be effective dish this

644
00:32:17,480 --> 00:32:21,950
should be in place every single time so

645
00:32:20,120 --> 00:32:23,780
we cannot say that we validate this data

646
00:32:21,950 --> 00:32:25,190
but we con validate that one we're not

647
00:32:23,780 --> 00:32:27,649
going to validate it ideally it should

648
00:32:25,190 --> 00:32:29,960
be for every data that enters the

649
00:32:27,650 --> 00:32:31,760
application and both of them should be

650
00:32:29,960 --> 00:32:34,300
used like the primary controls our

651
00:32:31,760 --> 00:32:37,010
defense in that in a consistent manner

652
00:32:34,300 --> 00:32:39,830
because we have to remember that an

653
00:32:37,010 --> 00:32:43,010
attacker needs one floor to bring down a

654
00:32:39,830 --> 00:32:45,050
system as defenders we have to defend

655
00:32:43,010 --> 00:32:46,840
everything and that's why it's important

656
00:32:45,050 --> 00:32:50,330
to using consist

657
00:32:46,840 --> 00:32:52,820
also I think we need to verify for them

658
00:32:50,330 --> 00:32:55,460
that one they have been put in place but

659
00:32:52,820 --> 00:32:59,649
they have been put in place in a correct

660
00:32:55,460 --> 00:33:05,870
manner to be effective in preventing the

661
00:32:59,650 --> 00:33:09,559
software security weaknesses so every

662
00:33:05,870 --> 00:33:11,809
time the data enters the application we

663
00:33:09,559 --> 00:33:18,020
should validate it and not only from

664
00:33:11,809 --> 00:33:19,789
getting post but also from data from the

665
00:33:18,020 --> 00:33:25,730
database configuration files and other

666
00:33:19,789 --> 00:33:28,429
sources any exceptions that we get

667
00:33:25,730 --> 00:33:31,760
during the validation should be locked

668
00:33:28,429 --> 00:33:35,090
to give the software the mechanisms to

669
00:33:31,760 --> 00:33:36,860
respond in real-time to the possible

670
00:33:35,090 --> 00:33:40,189
identified attack is the ones that we

671
00:33:36,860 --> 00:33:43,299
have identified any output should be

672
00:33:40,190 --> 00:33:46,070
contextually encode it and any time we

673
00:33:43,299 --> 00:33:50,210
store data into the database we should

674
00:33:46,070 --> 00:33:53,899
price the queries if we need to access a

675
00:33:50,210 --> 00:33:55,720
command on a system ideally you would

676
00:33:53,900 --> 00:33:57,740
leave that one as a last resource

677
00:33:55,720 --> 00:33:59,870
because sometimes you can achieve the

678
00:33:57,740 --> 00:34:03,320
same thing using other methods like a

679
00:33:59,870 --> 00:34:08,239
library but if you really really need to

680
00:34:03,320 --> 00:34:11,569
access an operating system command then

681
00:34:08,239 --> 00:34:17,569
you should prom tries the data every

682
00:34:11,570 --> 00:34:20,089
time we bring in a new library not only

683
00:34:17,570 --> 00:34:23,960
an open source library but also from a

684
00:34:20,089 --> 00:34:27,049
vendor an API from a vendor partner or a

685
00:34:23,960 --> 00:34:30,230
library from another team within the

686
00:34:27,050 --> 00:34:32,690
same company we should choose a software

687
00:34:30,230 --> 00:34:37,250
design pattern that helps to reduce the

688
00:34:32,690 --> 00:34:40,129
attack surface and also it helps in the

689
00:34:37,250 --> 00:34:42,889
long term to easy upgrade those

690
00:34:40,129 --> 00:34:49,098
components to actually stay on top of

691
00:34:42,889 --> 00:34:54,109
the technical debt any time we store the

692
00:34:49,099 --> 00:34:58,970
data we store we in third data we need

693
00:34:54,109 --> 00:34:59,990
to store the encryption key away from

694
00:34:58,970 --> 00:35:02,240
the encrypt

695
00:34:59,990 --> 00:35:05,419
data in dedicated key management

696
00:35:02,240 --> 00:35:08,810
solutions and every time we transfer

697
00:35:05,420 --> 00:35:12,380
data it should be done via list not only

698
00:35:08,810 --> 00:35:19,700
on the public facing but also behind the

699
00:35:12,380 --> 00:35:22,250
firewall and we should ensure that our

700
00:35:19,700 --> 00:35:24,470
configuration is the same that we

701
00:35:22,250 --> 00:35:26,900
intended in adopted configuration

702
00:35:24,470 --> 00:35:29,180
management and have this continuous

703
00:35:26,900 --> 00:35:31,640
scanning of the servers across the

704
00:35:29,180 --> 00:35:34,549
network in order to detect any miss

705
00:35:31,640 --> 00:35:45,859
configurations and remediate remediate

706
00:35:34,550 --> 00:35:47,930
them now if you are if any of you is

707
00:35:45,859 --> 00:35:50,598
looking to improve the security of their

708
00:35:47,930 --> 00:35:55,390
own applications these are some security

709
00:35:50,599 --> 00:35:57,859
controls that can help you with that and

710
00:35:55,390 --> 00:36:00,049
because there are security techniques

711
00:35:57,859 --> 00:36:04,150
that are familiar to developers it's

712
00:36:00,050 --> 00:36:07,300
also easier to achieve compliance a

713
00:36:04,150 --> 00:36:10,430
developer is highly likely to state that

714
00:36:07,300 --> 00:36:12,430
that flow cannot be exploited it happens

715
00:36:10,430 --> 00:36:16,129
to me all the time

716
00:36:12,430 --> 00:36:18,410
but isn't likely to say that they cannot

717
00:36:16,130 --> 00:36:21,320
validate or they cannot promote rise

718
00:36:18,410 --> 00:36:23,560
once they have been shown how to do it

719
00:36:21,320 --> 00:36:28,970
correctly even more you can actually

720
00:36:23,560 --> 00:36:30,680
involve them and have them check between

721
00:36:28,970 --> 00:36:33,290
themselves this can be done during the

722
00:36:30,680 --> 00:36:35,210
cloud review peer code review to ensure

723
00:36:33,290 --> 00:36:37,759
that these basic security controls are

724
00:36:35,210 --> 00:36:40,820
in place and are okayed and are

725
00:36:37,760 --> 00:36:46,640
implemented correctly this allows you as

726
00:36:40,820 --> 00:36:48,680
an object person to free you up of time

727
00:36:46,640 --> 00:36:53,390
so you can focus on on other more

728
00:36:48,680 --> 00:36:56,509
complex security issues and this is just

729
00:36:53,390 --> 00:37:00,020
a way to handle things you don't need to

730
00:36:56,510 --> 00:37:03,080
stop here because for example if you

731
00:37:00,020 --> 00:37:08,349
want your policy to to change it and you

732
00:37:03,080 --> 00:37:11,150
want to have added to it a new

733
00:37:08,349 --> 00:37:13,359
vulnerability for example the newly the

734
00:37:11,150 --> 00:37:17,019
new entry of the OS obtained which

735
00:37:13,359 --> 00:37:20,529
the a4 XML external entity or in other

736
00:37:17,019 --> 00:37:22,749
words the CBE 611 now the security

737
00:37:20,529 --> 00:37:25,299
control for that one is to harden the

738
00:37:22,749 --> 00:37:27,368
XML parser so you can add that security

739
00:37:25,299 --> 00:37:30,119
control to the list for developers of

740
00:37:27,369 --> 00:37:33,339
what they need to do and you can have

741
00:37:30,119 --> 00:37:36,970
that one added as well in your policy

742
00:37:33,339 --> 00:37:41,499
and hopefully using these of focusing on

743
00:37:36,970 --> 00:37:44,618
the security controls will help us and

744
00:37:41,499 --> 00:37:47,049
not to have the injection still in poor

745
00:37:44,619 --> 00:37:54,279
position in the next master thing thank

746
00:37:47,049 --> 00:37:56,049
you very much and there is definitely

747
00:37:54,279 --> 00:37:58,890
example questions I've got a microphone

748
00:37:56,049 --> 00:38:08,230
for somebody who wants to ask a question

749
00:37:58,890 --> 00:38:11,140
up front thank you I was trying to to

750
00:38:08,230 --> 00:38:13,119
see the relevance of validating the

751
00:38:11,140 --> 00:38:16,808
input that the data comes from the

752
00:38:13,119 --> 00:38:34,480
database shouldn't the data beyond the

753
00:38:16,809 --> 00:38:37,150
trust second base or DC be the database

754
00:38:34,480 --> 00:38:39,730
is a device on your network private no

755
00:38:37,150 --> 00:38:41,799
network in most of the cases but you

756
00:38:39,730 --> 00:38:44,619
don't know who is on a private network

757
00:38:41,799 --> 00:38:47,019
so I'm also a spirit a leader and we

758
00:38:44,619 --> 00:38:49,239
have people from red team's their

759
00:38:47,019 --> 00:38:52,839
feedback which do ethical high-tech

760
00:38:49,239 --> 00:38:56,079
their feedback is once they get into a

761
00:38:52,839 --> 00:38:59,319
company's network the security controls

762
00:38:56,079 --> 00:39:02,049
are minimal and we have had breaches for

763
00:38:59,319 --> 00:39:04,450
this the most famous one is the Marriott

764
00:39:02,049 --> 00:39:07,029
data breach where the attacker has been

765
00:39:04,450 --> 00:39:08,739
on the network for over four years you

766
00:39:07,029 --> 00:39:10,779
don't want to be that company where the

767
00:39:08,739 --> 00:39:16,390
attacker has been there for four years

768
00:39:10,779 --> 00:39:19,599
and your software was not able to

769
00:39:16,390 --> 00:39:21,460
respond to these type of things so that

770
00:39:19,599 --> 00:39:24,120
would be that's why is not considered

771
00:39:21,460 --> 00:39:26,820
usually trusted

772
00:39:24,120 --> 00:39:29,160
yeah but but it's already on the

773
00:39:26,820 --> 00:39:32,340
database you have greater problems right

774
00:39:29,160 --> 00:39:34,410
I mean if it has data or he has asked

775
00:39:32,340 --> 00:39:35,820
its to the database or can change the

776
00:39:34,410 --> 00:39:37,470
data in the database you have bigger

777
00:39:35,820 --> 00:39:46,650
problems than the input in the

778
00:39:37,470 --> 00:39:48,509
application right so for example a good

779
00:39:46,650 --> 00:39:50,190
example of actually validating the data

780
00:39:48,510 --> 00:39:53,640
for the database when you actually use

781
00:39:50,190 --> 00:39:57,390
the the data to create dynamic queries

782
00:39:53,640 --> 00:39:59,910
SQL commands where you have that data in

783
00:39:57,390 --> 00:40:01,680
two locations which cannot be premised

784
00:39:59,910 --> 00:40:04,140
so that's why you need to find related

785
00:40:01,680 --> 00:40:07,040
because if that happens then you don't

786
00:40:04,140 --> 00:40:09,629
know how they that that data is used and

787
00:40:07,040 --> 00:40:11,820
unless you actually do a risk analysis

788
00:40:09,630 --> 00:40:13,470
what happens and you are no eyes the

789
00:40:11,820 --> 00:40:17,010
entire software where that data from the

790
00:40:13,470 --> 00:40:19,529
database is used because if it's used on

791
00:40:17,010 --> 00:40:21,260
other connecting to other devices that's

792
00:40:19,530 --> 00:40:27,150
when you are going to have the problem

793
00:40:21,260 --> 00:40:29,970
so you my my that's one of the problems

794
00:40:27,150 --> 00:40:33,570
you consider trusted don't trust

795
00:40:29,970 --> 00:40:36,660
anything just put the security controls

796
00:40:33,570 --> 00:40:38,820
every time because in this way we just

797
00:40:36,660 --> 00:40:41,310
make it more difficult for the attackers

798
00:40:38,820 --> 00:40:43,710
we are never going to get a 100% secure

799
00:40:41,310 --> 00:40:50,070
system but it's just put them off of

800
00:40:43,710 --> 00:40:55,830
hacking a system and another question

801
00:40:50,070 --> 00:40:58,050
we've got time for one more I think and

802
00:40:55,830 --> 00:41:00,560
if not then I'm gonna say thank you

803
00:40:58,050 --> 00:41:00,560
thanks Katie

