1
00:00:01,420 --> 00:00:05,120
[Music]

2
00:00:05,120 --> 00:00:07,440
awesome thank you for that intro jason

3
00:00:07,440 --> 00:00:08,960
hi everyone nice to meet you last

4
00:00:08,960 --> 00:00:10,400
session of the date i guess i'm sitting

5
00:00:10,400 --> 00:00:12,639
between you and beer for friday

6
00:00:12,639 --> 00:00:14,960
so um i'll try to see if we can finish

7
00:00:14,960 --> 00:00:18,160
this talk in 45 minutes or less

8
00:00:18,160 --> 00:00:20,320
the goal of this talk is to make sure

9
00:00:20,320 --> 00:00:22,480
that we understand how

10
00:00:22,480 --> 00:00:25,359
various apsec testing methodologies can

11
00:00:25,359 --> 00:00:26,800
work together and observability is

12
00:00:26,800 --> 00:00:28,880
emerging as one of the one of the

13
00:00:28,880 --> 00:00:30,880
popular uh

14
00:00:30,880 --> 00:00:32,800
up and coming ways to

15
00:00:32,800 --> 00:00:34,719
get visibility into applications

16
00:00:34,719 --> 00:00:36,719
especially cloud native applications so

17
00:00:36,719 --> 00:00:38,399
today we're going to talk about

18
00:00:38,399 --> 00:00:39,280
why

19
00:00:39,280 --> 00:00:41,360
what observability is

20
00:00:41,360 --> 00:00:44,640
why is it kind of important um

21
00:00:44,640 --> 00:00:45,840
especially given the cloud native

22
00:00:45,840 --> 00:00:47,280
landscape and we're also going to touch

23
00:00:47,280 --> 00:00:48,239
upon

24
00:00:48,239 --> 00:00:49,840
um

25
00:00:49,840 --> 00:00:51,920
why observability can stand on its own

26
00:00:51,920 --> 00:00:53,920
and be useful but

27
00:00:53,920 --> 00:00:55,600
for the purpose of this overwatch talk

28
00:00:55,600 --> 00:00:56,960
we'll talk about how

29
00:00:56,960 --> 00:00:59,199
observability when used in conjunction

30
00:00:59,199 --> 00:01:01,359
with a das tool

31
00:01:01,359 --> 00:01:02,879
and we're going to use osp zap as the

32
00:01:02,879 --> 00:01:04,640
example here

33
00:01:04,640 --> 00:01:06,080
it's it's one of those things where one

34
00:01:06,080 --> 00:01:08,000
plus one can be greater than two

35
00:01:08,000 --> 00:01:11,200
um so let's let's dig right in so these

36
00:01:11,200 --> 00:01:12,880
are the things that i had in mind so i

37
00:01:12,880 --> 00:01:14,080
also wanted to make sure that while we

38
00:01:14,080 --> 00:01:17,520
talk about specific appsec technology

39
00:01:17,520 --> 00:01:19,200
uh

40
00:01:19,200 --> 00:01:21,280
technologies like observability or desk

41
00:01:21,280 --> 00:01:22,799
we also kind of talk about the

42
00:01:22,799 --> 00:01:24,880
underlying reasons why these tools are

43
00:01:24,880 --> 00:01:26,400
important like for example

44
00:01:26,400 --> 00:01:28,720
it makes sense to talk about these apps

45
00:01:28,720 --> 00:01:30,159
challenges

46
00:01:30,159 --> 00:01:32,000
that are out there that are causing

47
00:01:32,000 --> 00:01:32,880
um

48
00:01:32,880 --> 00:01:35,439
modernization of appsec modern apps are

49
00:01:35,439 --> 00:01:36,640
being created these days which is

50
00:01:36,640 --> 00:01:38,000
causing modern

51
00:01:38,000 --> 00:01:40,000
the need for modern app seg technology

52
00:01:40,000 --> 00:01:41,040
and that and we'll talk about a little

53
00:01:41,040 --> 00:01:42,880
bit of that as well and then we'll talk

54
00:01:42,880 --> 00:01:45,759
about the existing landscape of appsec

55
00:01:45,759 --> 00:01:47,600
tools out there starting all the way

56
00:01:47,600 --> 00:01:50,240
from sas to artifact scanners to gas and

57
00:01:50,240 --> 00:01:52,560
so on and so forth and then figure out

58
00:01:52,560 --> 00:01:54,960
you know how is what are the new things

59
00:01:54,960 --> 00:01:56,640
that are emerging given cloud-native

60
00:01:56,640 --> 00:01:58,719
applications and how can these new

61
00:01:58,719 --> 00:02:00,079
technologies like observability

62
00:02:00,079 --> 00:02:03,040
complement existing tools like adast or

63
00:02:03,040 --> 00:02:05,200
like a software composition analysis as

64
00:02:05,200 --> 00:02:06,640
well as provide additional visibility

65
00:02:06,640 --> 00:02:09,119
into runtime behavior etc and we'll end

66
00:02:09,119 --> 00:02:10,800
with if you were thinking about planning

67
00:02:10,800 --> 00:02:12,400
your abstract strategy especially as

68
00:02:12,400 --> 00:02:13,840
your team may be going through digital

69
00:02:13,840 --> 00:02:14,800
transformation you're creating

70
00:02:14,800 --> 00:02:16,560
cloud-native applications how do you go

71
00:02:16,560 --> 00:02:18,000
about planning for that abstract

72
00:02:18,000 --> 00:02:20,080
strategy and what are some general not

73
00:02:20,080 --> 00:02:22,160
stars that people tend to look for and

74
00:02:22,160 --> 00:02:24,720
uh if if you um

75
00:02:24,720 --> 00:02:26,400
if you'd like to embark upon that

76
00:02:26,400 --> 00:02:28,080
journey then you know it's good to think

77
00:02:28,080 --> 00:02:29,920
about certain things uh as opposed to

78
00:02:29,920 --> 00:02:31,840
kind of go for uh you know deal with it

79
00:02:31,840 --> 00:02:34,560
when it happens kind of thing right

80
00:02:34,560 --> 00:02:36,400
and then we'll end with q a

81
00:02:36,400 --> 00:02:39,440
so a quick introduction about um what is

82
00:02:39,440 --> 00:02:41,440
deep factor we're a silicon valley

83
00:02:41,440 --> 00:02:44,000
company we're now a a global distributed

84
00:02:44,000 --> 00:02:44,879
company

85
00:02:44,879 --> 00:02:47,760
um we are a cloud native application

86
00:02:47,760 --> 00:02:49,599
security platform

87
00:02:49,599 --> 00:02:52,640
our goal is to enable engineering teams

88
00:02:52,640 --> 00:02:54,720
to quickly discover resolve security

89
00:02:54,720 --> 00:02:57,360
issues supply chain risks and compliance

90
00:02:57,360 --> 00:02:58,480
issues

91
00:02:58,480 --> 00:03:00,560
during the course of development so that

92
00:03:00,560 --> 00:03:02,400
when the application ships

93
00:03:02,400 --> 00:03:03,680
into production

94
00:03:03,680 --> 00:03:05,200
it's already

95
00:03:05,200 --> 00:03:06,879
there's there's much less number of

96
00:03:06,879 --> 00:03:08,879
risks in that application from a

97
00:03:08,879 --> 00:03:10,400
security perspective from a compliance

98
00:03:10,400 --> 00:03:12,560
perspective et cetera how are we

99
00:03:12,560 --> 00:03:14,800
different from other appsec tools and

100
00:03:14,800 --> 00:03:16,800
why is there a need for a new generation

101
00:03:16,800 --> 00:03:18,480
of apps tooling specifically targeted

102
00:03:18,480 --> 00:03:20,080
towards cloud native applications it's

103
00:03:20,080 --> 00:03:21,519
because cloud native applications have

104
00:03:21,519 --> 00:03:23,760
changed the way we build applications

105
00:03:23,760 --> 00:03:26,720
so as apps get modernized and broken

106
00:03:26,720 --> 00:03:28,959
down into microservices

107
00:03:28,959 --> 00:03:30,480
taking and you're moving into these

108
00:03:30,480 --> 00:03:31,440
modern

109
00:03:31,440 --> 00:03:33,760
application architectures with modern ci

110
00:03:33,760 --> 00:03:35,760
pipeline tooling do you really want to

111
00:03:35,760 --> 00:03:37,280
take the baggage of the older apps like

112
00:03:37,280 --> 00:03:39,599
tools and move on instead a better way

113
00:03:39,599 --> 00:03:42,080
to think about it is to use a platform

114
00:03:42,080 --> 00:03:43,040
an abstract platform that is

115
00:03:43,040 --> 00:03:44,720
purpose-built for

116
00:03:44,720 --> 00:03:46,400
modern app applications

117
00:03:46,400 --> 00:03:48,640
that's essentially what inspired us to

118
00:03:48,640 --> 00:03:51,280
uh inspired me to quit cisco which was

119
00:03:51,280 --> 00:03:52,959
my previous job i told my previous

120
00:03:52,959 --> 00:03:54,400
company to cisco

121
00:03:54,400 --> 00:03:56,239
and i was the head of the product team

122
00:03:56,239 --> 00:03:57,840
at cisco's cloud business unit and i

123
00:03:57,840 --> 00:03:59,680
quit my job and started deep factory too

124
00:03:59,680 --> 00:04:01,120
to create a cloud-native application

125
00:04:01,120 --> 00:04:02,879
security platform so deep factored

126
00:04:02,879 --> 00:04:05,040
summarizes a unified appsec platform it

127
00:04:05,040 --> 00:04:06,959
combines it provides a combination an

128
00:04:06,959 --> 00:04:08,959
integrated experience between artifact

129
00:04:08,959 --> 00:04:10,400
scanning it has software composition

130
00:04:10,400 --> 00:04:12,000
analysis container scans

131
00:04:12,000 --> 00:04:14,560
sbam etc as well as runtime visibility

132
00:04:14,560 --> 00:04:16,560
in a unified experience targeted towards

133
00:04:16,560 --> 00:04:18,720
cloud native applications and it uses

134
00:04:18,720 --> 00:04:20,720
the concept of runtime observability to

135
00:04:20,720 --> 00:04:22,479
actually observe what's happening when

136
00:04:22,479 --> 00:04:24,560
the application is running by seamlessly

137
00:04:24,560 --> 00:04:26,479
dropping into your kubernetes cluster or

138
00:04:26,479 --> 00:04:28,479
your containerized application

139
00:04:28,479 --> 00:04:30,880
and using the runtime information to not

140
00:04:30,880 --> 00:04:32,560
only provide visibility to how your

141
00:04:32,560 --> 00:04:34,560
application security risks are while

142
00:04:34,560 --> 00:04:36,960
your app is running but also augment

143
00:04:36,960 --> 00:04:37,840
other

144
00:04:37,840 --> 00:04:40,000
asd tools like a das or like like a

145
00:04:40,000 --> 00:04:41,520
software composition analysis to provide

146
00:04:41,520 --> 00:04:43,360
that unified kind of experience that

147
00:04:43,360 --> 00:04:45,520
results in comprehensive coverage and

148
00:04:45,520 --> 00:04:47,759
yet lesser number of

149
00:04:47,759 --> 00:04:50,800
high value insights

150
00:04:50,800 --> 00:04:54,160
that's the customary one slide

151
00:04:54,160 --> 00:04:55,600
that i have on deep factory and the rest

152
00:04:55,600 --> 00:04:56,720
of this presentation obviously is going

153
00:04:56,720 --> 00:04:59,360
to be vendor neutral and the goal here

154
00:04:59,360 --> 00:05:00,800
is thought leadership not not to

155
00:05:00,800 --> 00:05:02,320
pleasure product

156
00:05:02,320 --> 00:05:04,240
um but there's some really interesting

157
00:05:04,240 --> 00:05:05,600
technologies that we've created that i

158
00:05:05,600 --> 00:05:07,360
think it make for a fantastic kind of

159
00:05:07,360 --> 00:05:08,639
discussion

160
00:05:08,639 --> 00:05:11,120
um what is obasp zap this group you guys

161
00:05:11,120 --> 00:05:12,960
are all experts in this in this area so

162
00:05:12,960 --> 00:05:14,479
you probably already already

163
00:05:14,479 --> 00:05:17,280
you know all know about oh wasp zap it's

164
00:05:17,280 --> 00:05:18,800
one of the popular

165
00:05:18,800 --> 00:05:22,000
dast uh tools out there open source

166
00:05:22,000 --> 00:05:24,479
built by the oas you know folks

167
00:05:24,479 --> 00:05:26,639
and it allows uh both appsec teams as

168
00:05:26,639 --> 00:05:29,280
well as engineers to automate uh you

169
00:05:29,280 --> 00:05:31,759
know security testing uh from a dynamic

170
00:05:31,759 --> 00:05:33,520
application security testing perspective

171
00:05:33,520 --> 00:05:35,120
you can even tie that into your cicd

172
00:05:35,120 --> 00:05:36,240
pipeline

173
00:05:36,240 --> 00:05:39,680
so on and so forth

174
00:05:39,680 --> 00:05:41,919
so let's talk about the broader abstract

175
00:05:41,919 --> 00:05:44,560
challenges that are driving a change

176
00:05:44,560 --> 00:05:46,560
in applications how application security

177
00:05:46,560 --> 00:05:48,240
is actually done

178
00:05:48,240 --> 00:05:49,120
the

179
00:05:49,120 --> 00:05:50,320
we we're sitting at the intersection of

180
00:05:50,320 --> 00:05:51,919
a couple of interesting trends number

181
00:05:51,919 --> 00:05:53,680
one is

182
00:05:53,680 --> 00:05:55,840
the number of security breaches and the

183
00:05:55,840 --> 00:05:58,160
size of security breaches has increased

184
00:05:58,160 --> 00:06:00,000
tremendously over the last couple of

185
00:06:00,000 --> 00:06:01,840
years and that trend is only going one

186
00:06:01,840 --> 00:06:03,360
way

187
00:06:03,360 --> 00:06:04,720
number two

188
00:06:04,720 --> 00:06:07,440
digital transformation

189
00:06:07,440 --> 00:06:09,600
every enterprise company is a software

190
00:06:09,600 --> 00:06:10,960
company now

191
00:06:10,960 --> 00:06:13,680
and every enterprise is majority of them

192
00:06:13,680 --> 00:06:14,560
are going through a digital

193
00:06:14,560 --> 00:06:15,840
transformation

194
00:06:15,840 --> 00:06:17,199
where they're embracing cloud native

195
00:06:17,199 --> 00:06:19,120
applications their old monolithic

196
00:06:19,120 --> 00:06:20,479
applications are being broken down into

197
00:06:20,479 --> 00:06:22,639
microservices kubernetes serverless so

198
00:06:22,639 --> 00:06:24,800
on and so forth

199
00:06:24,800 --> 00:06:27,360
there's some interesting stats

200
00:06:27,360 --> 00:06:29,120
that that are coming out when you think

201
00:06:29,120 --> 00:06:30,080
about what's happening in this

202
00:06:30,080 --> 00:06:32,240
cloud-native world number one is

203
00:06:32,240 --> 00:06:33,680
because of the newness of cloud-native

204
00:06:33,680 --> 00:06:35,120
applications everybody is kind of you

205
00:06:35,120 --> 00:06:36,319
know a lot of the people are

206
00:06:36,319 --> 00:06:38,319
experiencing security-related issues

207
00:06:38,319 --> 00:06:39,840
with kubernetes with cloud-native

208
00:06:39,840 --> 00:06:41,039
deployments

209
00:06:41,039 --> 00:06:42,960
security-related issues cause breaches

210
00:06:42,960 --> 00:06:44,800
security-related issues cause delays in

211
00:06:44,800 --> 00:06:46,800
engineering you've caught early on

212
00:06:46,800 --> 00:06:48,000
during the course of development but

213
00:06:48,000 --> 00:06:50,560
they still have to go find fix it

214
00:06:50,560 --> 00:06:52,240
takes time

215
00:06:52,240 --> 00:06:53,919
the number of applications being

216
00:06:53,919 --> 00:06:56,319
developed has skyrocketed

217
00:06:56,319 --> 00:06:58,720
so idc report

218
00:06:58,720 --> 00:07:01,280
says that by 2023 which is two years

219
00:07:01,280 --> 00:07:04,160
from now we'll be looking at 500 million

220
00:07:04,160 --> 00:07:06,800
cloud native applications total global

221
00:07:06,800 --> 00:07:08,720
that's a lot of applications

222
00:07:08,720 --> 00:07:11,199
and the number of developers today we're

223
00:07:11,199 --> 00:07:13,360
sitting at about 26 million developers

224
00:07:13,360 --> 00:07:14,639
worldwide

225
00:07:14,639 --> 00:07:17,039
and that number is going to get to 45

226
00:07:17,039 --> 00:07:20,319
million developers by 2030.

227
00:07:20,319 --> 00:07:22,000
that's a lot of people as well so a lot

228
00:07:22,000 --> 00:07:23,280
of people writing code a lot of

229
00:07:23,280 --> 00:07:24,560
applications being created a lot of

230
00:07:24,560 --> 00:07:26,400
applications being created with a modern

231
00:07:26,400 --> 00:07:28,319
cloud native kind of point of view but

232
00:07:28,319 --> 00:07:30,000
the number of cyber security jobs as you

233
00:07:30,000 --> 00:07:31,360
guys all know especially from this

234
00:07:31,360 --> 00:07:33,120
conference is very little there's only

235
00:07:33,120 --> 00:07:34,800
three and a half million you know

236
00:07:34,800 --> 00:07:36,400
there's still three and a half million

237
00:07:36,400 --> 00:07:37,840
unfulfilled

238
00:07:37,840 --> 00:07:39,280
cyber security jobs that are out there

239
00:07:39,280 --> 00:07:41,120
as of 2021.

240
00:07:41,120 --> 00:07:42,880
so

241
00:07:42,880 --> 00:07:45,120
if you put all of these things together

242
00:07:45,120 --> 00:07:47,120
apps are becoming more complex

243
00:07:47,120 --> 00:07:48,639
they're shipping at a faster pace thanks

244
00:07:48,639 --> 00:07:49,919
to cicd

245
00:07:49,919 --> 00:07:51,759
there's more engineers writing code

246
00:07:51,759 --> 00:07:53,039
there's more cloud native applications

247
00:07:53,039 --> 00:07:54,879
being shipped

248
00:07:54,879 --> 00:07:56,639
and there's not enough appsec people to

249
00:07:56,639 --> 00:07:58,319
test all of those things so what is the

250
00:07:58,319 --> 00:07:59,919
solution the solution is to make sure

251
00:07:59,919 --> 00:08:02,400
that we automate as many security and

252
00:08:02,400 --> 00:08:04,879
compliance related risk findings early

253
00:08:04,879 --> 00:08:06,720
on during the course of development so

254
00:08:06,720 --> 00:08:09,039
that the dev teams are equipped to

255
00:08:09,039 --> 00:08:10,639
understand these risks

256
00:08:10,639 --> 00:08:12,000
during the course of development and

257
00:08:12,000 --> 00:08:15,039
deliver a secure application

258
00:08:15,039 --> 00:08:17,680
enter devsecops

259
00:08:17,680 --> 00:08:19,280
now what is

260
00:08:19,280 --> 00:08:20,879
driving

261
00:08:20,879 --> 00:08:23,199
this appsec modernization you know apps

262
00:08:23,199 --> 00:08:24,800
are being modernized

263
00:08:24,800 --> 00:08:27,280
that is that is causing appsec to be

264
00:08:27,280 --> 00:08:28,639
modernized

265
00:08:28,639 --> 00:08:30,080
as well

266
00:08:30,080 --> 00:08:30,879
because

267
00:08:30,879 --> 00:08:32,719
if you think about it if you if your

268
00:08:32,719 --> 00:08:35,200
apps are are being modernized

269
00:08:35,200 --> 00:08:36,399
you can't

270
00:08:36,399 --> 00:08:38,799
rely on the old appsec tools you can i

271
00:08:38,799 --> 00:08:39,599
mean

272
00:08:39,599 --> 00:08:41,839
or you still have the option of putting

273
00:08:41,839 --> 00:08:43,279
together a hodgepodge of five or six

274
00:08:43,279 --> 00:08:45,360
different apps of tools and i'll go

275
00:08:45,360 --> 00:08:46,880
over some of the tool options that we

276
00:08:46,880 --> 00:08:48,399
have today

277
00:08:48,399 --> 00:08:50,160
but that's cumbersome

278
00:08:50,160 --> 00:08:51,360
instead

279
00:08:51,360 --> 00:08:52,240
now

280
00:08:52,240 --> 00:08:55,120
is a good time to start thinking about

281
00:08:55,120 --> 00:08:56,080
how do you

282
00:08:56,080 --> 00:08:58,240
how do you re-imagine your appsec

283
00:08:58,240 --> 00:09:01,040
initiatives itself and especially um

284
00:09:01,040 --> 00:09:02,480
absec initiatives that align with your

285
00:09:02,480 --> 00:09:04,160
digital transformation initiatives so

286
00:09:04,160 --> 00:09:05,440
when we talk to you know we've talked

287
00:09:05,440 --> 00:09:07,120
over 100 enterprises over the last you

288
00:09:07,120 --> 00:09:08,399
know year or so

289
00:09:08,399 --> 00:09:11,120
and the reasons why each of these

290
00:09:11,120 --> 00:09:13,120
organizations is going through uh and

291
00:09:13,120 --> 00:09:15,519
thinking about appsec right now and cicd

292
00:09:15,519 --> 00:09:18,080
et cetera is uh it can be broken down

293
00:09:18,080 --> 00:09:19,519
into about five groups and that's kind

294
00:09:19,519 --> 00:09:20,880
of what we've done one is app

295
00:09:20,880 --> 00:09:23,040
modernization app modernization due to

296
00:09:23,040 --> 00:09:24,959
containerization kubernetes serverless

297
00:09:24,959 --> 00:09:27,519
etc is causing them to think about

298
00:09:27,519 --> 00:09:28,880
what is the right way to secure these

299
00:09:28,880 --> 00:09:30,000
applications

300
00:09:30,000 --> 00:09:32,240
number two cause is

301
00:09:32,240 --> 00:09:33,519
you know i want to make sure that i

302
00:09:33,519 --> 00:09:36,399
proactively embed security into the cs

303
00:09:36,399 --> 00:09:37,680
pipeline

304
00:09:37,680 --> 00:09:39,360
so into my software development

305
00:09:39,360 --> 00:09:42,560
lifecycle i want to make sure that

306
00:09:42,560 --> 00:09:45,040
identifying risks and security is baked

307
00:09:45,040 --> 00:09:47,279
in before that that's that's a common

308
00:09:47,279 --> 00:09:50,800
theme that we hear from enterprises

309
00:09:50,800 --> 00:09:53,680
alert fatigue resulting in slowing down

310
00:09:53,680 --> 00:09:56,000
the release velocity is also a common

311
00:09:56,000 --> 00:09:58,000
theme that we hear which is

312
00:09:58,000 --> 00:09:59,680
i have a bunch of tools

313
00:09:59,680 --> 00:10:01,120
you know one for code scanning one for

314
00:10:01,120 --> 00:10:02,640
artifact scanning one for container

315
00:10:02,640 --> 00:10:05,519
scanning so on and so forth these all

316
00:10:05,519 --> 00:10:08,240
give me a lot of alerts

317
00:10:08,240 --> 00:10:10,399
but it's it's too many alerts

318
00:10:10,399 --> 00:10:12,800
and my team gets either frustrated with

319
00:10:12,800 --> 00:10:15,600
it and ends up not fixing it or

320
00:10:15,600 --> 00:10:17,680
they end up fixing

321
00:10:17,680 --> 00:10:19,839
these alerts a lot of them which results

322
00:10:19,839 --> 00:10:23,440
in the release is getting too late

323
00:10:24,160 --> 00:10:26,320
the other thing is tool fitting now

324
00:10:26,320 --> 00:10:28,160
there's there's a lot of tools out there

325
00:10:28,160 --> 00:10:29,920
i don't want to put together five or six

326
00:10:29,920 --> 00:10:31,360
or seven different tools as part of my

327
00:10:31,360 --> 00:10:33,440
ci pipeline to get visibility into all

328
00:10:33,440 --> 00:10:34,880
aspects of my application security

329
00:10:34,880 --> 00:10:35,839
behavior

330
00:10:35,839 --> 00:10:39,200
is it wouldn't it be great if i had

331
00:10:39,200 --> 00:10:41,040
you know a unified kind of experience

332
00:10:41,040 --> 00:10:43,120
across these tools

333
00:10:43,120 --> 00:10:44,399
and lastly

334
00:10:44,399 --> 00:10:46,399
especially as apps are being

335
00:10:46,399 --> 00:10:48,880
modernized and put into the cloud-native

336
00:10:48,880 --> 00:10:50,000
world

337
00:10:50,000 --> 00:10:51,040
um

338
00:10:51,040 --> 00:10:53,680
there's a need to understand how these

339
00:10:53,680 --> 00:10:55,360
applications are behaving while they're

340
00:10:55,360 --> 00:10:56,800
running

341
00:10:56,800 --> 00:10:58,079
and that's what observability can help

342
00:10:58,079 --> 00:10:59,360
us get to

343
00:10:59,360 --> 00:11:02,320
that today is not possible with the

344
00:11:02,320 --> 00:11:04,240
existing set of tools

345
00:11:04,240 --> 00:11:06,079
um because they're either looking at

346
00:11:06,079 --> 00:11:07,040
code

347
00:11:07,040 --> 00:11:08,720
code scanners or they're looking at

348
00:11:08,720 --> 00:11:10,880
artifact scanners or they're looking at

349
00:11:10,880 --> 00:11:12,959
das or maybe i asked but i asked is you

350
00:11:12,959 --> 00:11:15,360
know is was designed 10 years ago when

351
00:11:15,360 --> 00:11:16,720
kubernetes didn't even exist so it

352
00:11:16,720 --> 00:11:18,240
wasn't designed for these modern cloud

353
00:11:18,240 --> 00:11:20,000
native kind of applications

354
00:11:20,000 --> 00:11:22,000
so observability

355
00:11:22,000 --> 00:11:24,240
is necessary because

356
00:11:24,240 --> 00:11:25,120
the

357
00:11:25,120 --> 00:11:27,040
not only because you want to find issues

358
00:11:27,040 --> 00:11:28,720
in an application while the application

359
00:11:28,720 --> 00:11:29,760
is running

360
00:11:29,760 --> 00:11:31,600
but it's also important because you want

361
00:11:31,600 --> 00:11:33,519
to correlate the observability findings

362
00:11:33,519 --> 00:11:35,200
with what your other scanners have

363
00:11:35,200 --> 00:11:37,040
produced so that you can reduce the

364
00:11:37,040 --> 00:11:39,279
volume of insights and find richer

365
00:11:39,279 --> 00:11:41,360
lesser number of insights for your

366
00:11:41,360 --> 00:11:43,040
engineering team to be able to triage

367
00:11:43,040 --> 00:11:45,519
them and results in greater velocity

368
00:11:45,519 --> 00:11:48,880
so what is observability

369
00:11:48,880 --> 00:11:50,720
as we discussed observability is the

370
00:11:50,720 --> 00:11:54,240
method of evaluating applications

371
00:11:54,240 --> 00:11:56,639
while the applications are running

372
00:11:56,639 --> 00:11:59,200
to reach meaningful conclusions about

373
00:11:59,200 --> 00:12:01,120
the health of the application

374
00:12:01,120 --> 00:12:02,959
performance of the application and

375
00:12:02,959 --> 00:12:05,680
security behaviors of the application

376
00:12:05,680 --> 00:12:06,880
so far

377
00:12:06,880 --> 00:12:08,560
over the last decade or so we've seen

378
00:12:08,560 --> 00:12:11,279
the evolution of apm tools

379
00:12:11,279 --> 00:12:13,360
apm tools were the first generation of

380
00:12:13,360 --> 00:12:15,600
monitoring tools that were monitoring

381
00:12:15,600 --> 00:12:18,880
applications performance and health

382
00:12:18,880 --> 00:12:21,040
it with cloud native

383
00:12:21,040 --> 00:12:22,160
with the advent of cloud-native

384
00:12:22,160 --> 00:12:24,240
applications apm tools kind of morphed

385
00:12:24,240 --> 00:12:25,680
into observability tools because they're

386
00:12:25,680 --> 00:12:28,079
now starting using the more

387
00:12:28,079 --> 00:12:30,560
accepted cloud-native interception

388
00:12:30,560 --> 00:12:32,320
technologies to gather visibility into

389
00:12:32,320 --> 00:12:34,000
cloud-native applications and they're

390
00:12:34,000 --> 00:12:35,360
all calling themselves the new breed of

391
00:12:35,360 --> 00:12:37,519
apm tools is observability tools but

392
00:12:37,519 --> 00:12:39,600
they're still all looking at performance

393
00:12:39,600 --> 00:12:41,200
logs metrics tracing you know that sort

394
00:12:41,200 --> 00:12:42,000
of

395
00:12:42,000 --> 00:12:44,160
visibility

396
00:12:44,160 --> 00:12:47,200
there's a couple of you know a few

397
00:12:47,200 --> 00:12:48,320
handful of companies that are now

398
00:12:48,320 --> 00:12:50,800
beginning to use observability from an

399
00:12:50,800 --> 00:12:53,519
absec perspective because the telemetry

400
00:12:53,519 --> 00:12:54,560
that you gather from a running

401
00:12:54,560 --> 00:12:56,079
application is the same whether you use

402
00:12:56,079 --> 00:12:57,440
it for performance or whether you use it

403
00:12:57,440 --> 00:12:58,720
for health or whether you use it for

404
00:12:58,720 --> 00:13:01,040
security so far as an industry over the

405
00:13:01,040 --> 00:13:02,240
last decade we've used it for

406
00:13:02,240 --> 00:13:03,680
performance and health now we're

407
00:13:03,680 --> 00:13:05,600
starting to we're starting to use it for

408
00:13:05,600 --> 00:13:08,720
absec visibility

409
00:13:08,720 --> 00:13:11,200
so why is observability important for

410
00:13:11,200 --> 00:13:12,320
appsec

411
00:13:12,320 --> 00:13:14,160
because number one

412
00:13:14,160 --> 00:13:17,120
it helps you identify risky runtime

413
00:13:17,120 --> 00:13:19,519
behaviors that are not caught by static

414
00:13:19,519 --> 00:13:21,120
scanners

415
00:13:21,120 --> 00:13:23,519
let's say for example you have a you

416
00:13:23,519 --> 00:13:25,120
have a developer the developer brings in

417
00:13:25,120 --> 00:13:26,480
a piece of code

418
00:13:26,480 --> 00:13:28,240
third-party code

419
00:13:28,240 --> 00:13:31,279
that piece of code passes your

420
00:13:31,279 --> 00:13:32,000
uh

421
00:13:32,000 --> 00:13:35,360
sca scans you know there's no cvs no no

422
00:13:35,360 --> 00:13:37,279
critical cvs that are detected

423
00:13:37,279 --> 00:13:38,160
great

424
00:13:38,160 --> 00:13:39,839
but at runtime

425
00:13:39,839 --> 00:13:42,160
what happens is it reaches out to a

426
00:13:42,160 --> 00:13:44,399
certain geography let's say for example

427
00:13:44,399 --> 00:13:45,920
antarctica

428
00:13:45,920 --> 00:13:48,240
it makes an outbound connection to

429
00:13:48,240 --> 00:13:50,399
antarctica

430
00:13:50,399 --> 00:13:52,560
you your developer did not know that

431
00:13:52,560 --> 00:13:53,760
because that's not part of the code that

432
00:13:53,760 --> 00:13:56,079
he wrote

433
00:13:56,079 --> 00:13:59,040
your developer did not know that

434
00:13:59,040 --> 00:14:00,959
the third party that he brought in did

435
00:14:00,959 --> 00:14:01,680
it

436
00:14:01,680 --> 00:14:03,279
because it passed

437
00:14:03,279 --> 00:14:04,000
the

438
00:14:04,000 --> 00:14:05,519
software composition analysis test and

439
00:14:05,519 --> 00:14:07,360
there was no cve detected

440
00:14:07,360 --> 00:14:09,600
this is not a cve it's a bad runtime

441
00:14:09,600 --> 00:14:10,560
behavior

442
00:14:10,560 --> 00:14:12,160
there's plenty of such runtime behaviors

443
00:14:12,160 --> 00:14:13,680
i just gave you an example of one you

444
00:14:13,680 --> 00:14:15,839
know networking behavior but it could be

445
00:14:15,839 --> 00:14:17,440
things like you know your application

446
00:14:17,440 --> 00:14:19,279
used a certain certain port that it's

447
00:14:19,279 --> 00:14:20,560
not supposed to be used or your

448
00:14:20,560 --> 00:14:22,000
application touched a certain file that

449
00:14:22,000 --> 00:14:23,519
it wasn't supposed to touch or your

450
00:14:23,519 --> 00:14:25,519
application loaded a library from slash

451
00:14:25,519 --> 00:14:27,760
temp which is not accepted behavior so

452
00:14:27,760 --> 00:14:30,880
the loss of risky run time behaviors

453
00:14:30,880 --> 00:14:31,680
that

454
00:14:31,680 --> 00:14:33,279
static code scanners will not catch

455
00:14:33,279 --> 00:14:35,120
especially that runtime behavior exists

456
00:14:35,120 --> 00:14:37,120
in your oss dependency or third-party

457
00:14:37,120 --> 00:14:38,959
dependency that is part of your

458
00:14:38,959 --> 00:14:40,079
application

459
00:14:40,079 --> 00:14:42,480
and let's face it today 75 of most

460
00:14:42,480 --> 00:14:44,639
applications is third-party code so it's

461
00:14:44,639 --> 00:14:46,480
not only important for us to scan all of

462
00:14:46,480 --> 00:14:49,519
these applications scan your custom code

463
00:14:49,519 --> 00:14:51,040
not only important for us to get a list

464
00:14:51,040 --> 00:14:52,880
of vulnerabilities by using software

465
00:14:52,880 --> 00:14:54,320
composition analysis or container and

466
00:14:54,320 --> 00:14:56,399
scanning but it's also important for us

467
00:14:56,399 --> 00:14:58,480
to observe the application at runtime in

468
00:14:58,480 --> 00:15:00,560
order for us to get a full picture of

469
00:15:00,560 --> 00:15:02,880
the application security posture

470
00:15:02,880 --> 00:15:04,480
the other benefit of observing an

471
00:15:04,480 --> 00:15:06,800
application of runtime is you also get

472
00:15:06,800 --> 00:15:09,920
to prioritize the vulnerabilities that

473
00:15:09,920 --> 00:15:11,760
are detected by your software

474
00:15:11,760 --> 00:15:14,320
composition analysis for example

475
00:15:14,320 --> 00:15:16,800
based on which of these vulnerabilities

476
00:15:16,800 --> 00:15:20,480
are actually executed or loaded at runta

477
00:15:20,480 --> 00:15:21,920
for example

478
00:15:21,920 --> 00:15:23,040
if your

479
00:15:23,040 --> 00:15:25,120
blackduck scan tells you there are 200

480
00:15:25,120 --> 00:15:28,240
vulnerabilities in your application

481
00:15:28,240 --> 00:15:29,839
combining that with an observability

482
00:15:29,839 --> 00:15:32,000
tool will tell you that out of the 200

483
00:15:32,000 --> 00:15:35,440
your application only loaded 25 of them

484
00:15:35,440 --> 00:15:37,680
it will help you reduce the alert volume

485
00:15:37,680 --> 00:15:39,120
of your software composition analysis

486
00:15:39,120 --> 00:15:41,600
tool and therefore reduce the alert

487
00:15:41,600 --> 00:15:44,480
fatigue that your dev team might

488
00:15:44,480 --> 00:15:47,199
be dealing with

489
00:15:47,199 --> 00:15:48,560
so those are the two fundamental

490
00:15:48,560 --> 00:15:50,480
benefits of using observability for

491
00:15:50,480 --> 00:15:52,320
appsec you identify risky runtime

492
00:15:52,320 --> 00:15:55,440
behaviors you also use it to make your

493
00:15:55,440 --> 00:15:56,800
other security tools better such as

494
00:15:56,800 --> 00:15:58,880
software composition analysis by

495
00:15:58,880 --> 00:16:00,639
reducing the alert volume you can also

496
00:16:00,639 --> 00:16:02,399
use use it to make das better which is

497
00:16:02,399 --> 00:16:04,160
what i'm going to talk about

498
00:16:04,160 --> 00:16:06,720
the rest of this discussion

499
00:16:06,720 --> 00:16:08,399
and why is observability an absolute

500
00:16:08,399 --> 00:16:10,079
must-have when it comes to cloud-native

501
00:16:10,079 --> 00:16:11,920
applications because cloud-native

502
00:16:11,920 --> 00:16:14,079
applications increase the

503
00:16:14,079 --> 00:16:16,480
dimensions of complexity

504
00:16:16,480 --> 00:16:18,000
in more than one way

505
00:16:18,000 --> 00:16:19,519
number one it's written in multiple

506
00:16:19,519 --> 00:16:20,880
languages

507
00:16:20,880 --> 00:16:22,320
because you have one container that has

508
00:16:22,320 --> 00:16:24,320
a c application another container that

509
00:16:24,320 --> 00:16:25,759
has a golang application another

510
00:16:25,759 --> 00:16:27,680
container that has a job application and

511
00:16:27,680 --> 00:16:28,959
they're all written by different teams

512
00:16:28,959 --> 00:16:31,279
maybe

513
00:16:31,279 --> 00:16:32,720
some of these developers don't even have

514
00:16:32,720 --> 00:16:35,120
standardized container based images so

515
00:16:35,120 --> 00:16:37,199
they take one

516
00:16:37,199 --> 00:16:38,639
you know that is an ubuntu based image

517
00:16:38,639 --> 00:16:40,720
another container image could have

518
00:16:40,720 --> 00:16:42,639
alpine in it and there's kind of no

519
00:16:42,639 --> 00:16:44,079
standardization because all they did was

520
00:16:44,079 --> 00:16:46,240
go to the the docker registry and get a

521
00:16:46,240 --> 00:16:47,600
certain base image and started working

522
00:16:47,600 --> 00:16:49,680
on it happens all the time

523
00:16:49,680 --> 00:16:53,519
so it increases the surface area of risk

524
00:16:53,519 --> 00:16:55,519
because your applications are broken up

525
00:16:55,519 --> 00:16:57,519
into micro services there's a lot more

526
00:16:57,519 --> 00:16:59,279
touch points to those applications that

527
00:16:59,279 --> 00:17:01,360
need to be observed as well and purely

528
00:17:01,360 --> 00:17:02,800
scanning your static code is not going

529
00:17:02,800 --> 00:17:05,039
to cut it

530
00:17:05,039 --> 00:17:07,520
number three is you're now shipping

531
00:17:07,520 --> 00:17:09,599
faster

532
00:17:09,599 --> 00:17:12,240
all the way through to prod with cicd

533
00:17:12,240 --> 00:17:15,039
you're also releasing more frequently

534
00:17:15,039 --> 00:17:17,359
and that makes static scans insufficient

535
00:17:17,359 --> 00:17:19,919
because you need to complement it with

536
00:17:19,919 --> 00:17:22,720
observability

537
00:17:23,039 --> 00:17:24,559
now there's a few different ways to

538
00:17:24,559 --> 00:17:25,520
observe

539
00:17:25,520 --> 00:17:28,079
a running application

540
00:17:28,079 --> 00:17:30,080
different technologies for the for the

541
00:17:30,080 --> 00:17:34,559
engineers in you there are

542
00:17:34,640 --> 00:17:36,799
approaches like agent based approaches

543
00:17:36,799 --> 00:17:38,559
something like the cystic falco type

544
00:17:38,559 --> 00:17:40,559
approach which allows you to

545
00:17:40,559 --> 00:17:42,960
have an agent on each of the host in for

546
00:17:42,960 --> 00:17:45,120
example your kubernetes cluster and each

547
00:17:45,120 --> 00:17:47,280
of the agents will basically use

548
00:17:47,280 --> 00:17:50,080
ebpf to track

549
00:17:50,080 --> 00:17:52,240
application

550
00:17:52,240 --> 00:17:54,720
traffic for file system behaviors or

551
00:17:54,720 --> 00:17:55,679
kernel

552
00:17:55,679 --> 00:17:59,200
system call behavior etc by looking at

553
00:17:59,200 --> 00:18:01,440
how this the application behavior is

554
00:18:01,440 --> 00:18:03,039
converting to system calls and tracking

555
00:18:03,039 --> 00:18:04,799
those system calls using ebpf in the

556
00:18:04,799 --> 00:18:06,640
kernel

557
00:18:06,640 --> 00:18:08,000
the second approach to doing that is

558
00:18:08,000 --> 00:18:11,120
sidecars now we've seen tools like aqua

559
00:18:11,120 --> 00:18:12,720
or

560
00:18:12,720 --> 00:18:15,679
palo alto uh networks uh the prismacloud

561
00:18:15,679 --> 00:18:17,760
you know product twist lock in the past

562
00:18:17,760 --> 00:18:20,320
those are all tools that actually

563
00:18:20,320 --> 00:18:22,640
give you a sidecar and the sidecar loads

564
00:18:22,640 --> 00:18:24,480
a privileged it's a privileged sidecar

565
00:18:24,480 --> 00:18:26,640
so it loads a kernel driver that then

566
00:18:26,640 --> 00:18:29,039
ends up using ebpf on your host to then

567
00:18:29,039 --> 00:18:31,840
watch application system called queue

568
00:18:31,840 --> 00:18:33,440
there's a third approach which is

569
00:18:33,440 --> 00:18:35,600
loading or pre-loading a library into

570
00:18:35,600 --> 00:18:37,280
your applications process that's more of

571
00:18:37,280 --> 00:18:39,440
a user space approach

572
00:18:39,440 --> 00:18:40,880
and it allows you to watch your

573
00:18:40,880 --> 00:18:43,679
applications in the user space

574
00:18:43,679 --> 00:18:46,320
without kernel mode drivers etc

575
00:18:46,320 --> 00:18:47,679
and that's that's the approach that you

576
00:18:47,679 --> 00:18:49,520
know companies like deep factory take so

577
00:18:49,520 --> 00:18:51,760
we have we have different uh

578
00:18:51,760 --> 00:18:54,480
technologies that are used to observe um

579
00:18:54,480 --> 00:18:56,559
applications at runtime which one is

580
00:18:56,559 --> 00:18:58,640
better for you depends on your use case

581
00:18:58,640 --> 00:19:00,080
and and the problem that you're trying

582
00:19:00,080 --> 00:19:02,320
to solve uh in some cases it also

583
00:19:02,320 --> 00:19:03,600
depends on the persona that is trying

584
00:19:03,600 --> 00:19:04,559
that you're trying to solve a problem

585
00:19:04,559 --> 00:19:05,919
for if your goal is to identify

586
00:19:05,919 --> 00:19:07,679
behaviors in production you know you

587
00:19:07,679 --> 00:19:10,160
might have a certain uh you know and the

588
00:19:10,160 --> 00:19:12,799
end users operations there's a different

589
00:19:12,799 --> 00:19:13,919
uh

590
00:19:13,919 --> 00:19:15,679
tool that might that might better fit

591
00:19:15,679 --> 00:19:18,720
your use case but if you our goal is to

592
00:19:18,720 --> 00:19:20,880
uh bake it into your devops pipeline and

593
00:19:20,880 --> 00:19:22,880
let the developers consume the insight

594
00:19:22,880 --> 00:19:24,480
then you might need to use a different

595
00:19:24,480 --> 00:19:26,080
way of observing your application so it

596
00:19:26,080 --> 00:19:28,640
really depends on which one

597
00:19:28,640 --> 00:19:31,840
what problem you're trying to solve

598
00:19:32,320 --> 00:19:34,320
let's take a look at the plethora of

599
00:19:34,320 --> 00:19:36,960
abstech tools that are out there

600
00:19:36,960 --> 00:19:38,480
interestingly enough these tools have

601
00:19:38,480 --> 00:19:41,360
evolved over the last couple of decades

602
00:19:41,360 --> 00:19:42,960
the funny thing is

603
00:19:42,960 --> 00:19:44,160
all of those tools are actually

604
00:19:44,160 --> 00:19:45,919
important because they do slightly

605
00:19:45,919 --> 00:19:47,600
different things

606
00:19:47,600 --> 00:19:49,039
and and we've mapped them all the way

607
00:19:49,039 --> 00:19:52,480
from static to dynamic to runtime

608
00:19:52,480 --> 00:19:55,039
on the static side we have

609
00:19:55,039 --> 00:19:57,440
sas which is the most popular you know

610
00:19:57,440 --> 00:19:59,039
asd tool

611
00:19:59,039 --> 00:20:01,039
it's a code scanner

612
00:20:01,039 --> 00:20:02,480
and recently we've started seeing

613
00:20:02,480 --> 00:20:04,559
infrastructure as code scanners it's

614
00:20:04,559 --> 00:20:06,400
still code but it's the infrastructure's

615
00:20:06,400 --> 00:20:07,919
code code like terraform scripts and

616
00:20:07,919 --> 00:20:09,440
whatnot

617
00:20:09,440 --> 00:20:10,640
that's also a code scanner just a

618
00:20:10,640 --> 00:20:12,640
different kind of code scanner so these

619
00:20:12,640 --> 00:20:13,440
things

620
00:20:13,440 --> 00:20:16,559
are static they scan your code

621
00:20:16,559 --> 00:20:18,320
then you have artifact scanners still

622
00:20:18,320 --> 00:20:20,480
static but they scan your build

623
00:20:20,480 --> 00:20:22,080
artifacts like for example software

624
00:20:22,080 --> 00:20:24,080
composition analysis will scan your jar

625
00:20:24,080 --> 00:20:26,320
files or npm files and identify which

626
00:20:26,320 --> 00:20:28,960
cvs exist in in those files uh in the

627
00:20:28,960 --> 00:20:31,440
list of dependencies that you may have

628
00:20:31,440 --> 00:20:33,840
orwas dep check is a great project from

629
00:20:33,840 --> 00:20:36,240
the os group that actually

630
00:20:36,240 --> 00:20:38,000
does a software composition analysis as

631
00:20:38,000 --> 00:20:39,440
well

632
00:20:39,440 --> 00:20:41,200
container image scanning

633
00:20:41,200 --> 00:20:42,960
is absolutely essential again it takes

634
00:20:42,960 --> 00:20:44,320
the artifact in this case the artifact

635
00:20:44,320 --> 00:20:46,080
is a container image and then it tries

636
00:20:46,080 --> 00:20:47,919
to find out risks that exist in the

637
00:20:47,919 --> 00:20:49,760
container image based on a list of

638
00:20:49,760 --> 00:20:51,120
publicly available vulnerability

639
00:20:51,120 --> 00:20:52,480
database

640
00:20:52,480 --> 00:20:54,799
for example the nist database which is

641
00:20:54,799 --> 00:20:57,360
publicly available to anyone or

642
00:20:57,360 --> 00:20:58,960
something like a more custom homegrown

643
00:20:58,960 --> 00:21:00,720
database like a black duck or a snake

644
00:21:00,720 --> 00:21:03,679
you know etc

645
00:21:03,679 --> 00:21:05,520
then you have

646
00:21:05,520 --> 00:21:07,360
dynamic scans

647
00:21:07,360 --> 00:21:09,679
so static scans tell you

648
00:21:09,679 --> 00:21:11,919
you know whether your code has some

649
00:21:11,919 --> 00:21:13,360
vulnerabilities or whether your

650
00:21:13,360 --> 00:21:15,600
artifacts has some known cvs

651
00:21:15,600 --> 00:21:17,679
they're useful but they also spit out a

652
00:21:17,679 --> 00:21:19,360
lot of alerts the volume is usually

653
00:21:19,360 --> 00:21:20,480
pretty high and you need to make sure

654
00:21:20,480 --> 00:21:21,679
that you

655
00:21:21,679 --> 00:21:24,480
you reduce that volume

656
00:21:24,480 --> 00:21:26,640
and prioritize it that's important

657
00:21:26,640 --> 00:21:28,159
the second thing is they miss out on a

658
00:21:28,159 --> 00:21:30,080
bunch of things that only dynamic

659
00:21:30,080 --> 00:21:32,480
scanners can catch and that's where a

660
00:21:32,480 --> 00:21:34,480
das comes in like oh wasp zap is a great

661
00:21:34,480 --> 00:21:35,520
example

662
00:21:35,520 --> 00:21:37,600
das allows you to scan the application

663
00:21:37,600 --> 00:21:39,120
from the outside it's not looking at

664
00:21:39,120 --> 00:21:41,440
your in your running application it is

665
00:21:41,440 --> 00:21:43,760
sending your application a payload

666
00:21:43,760 --> 00:21:45,679
and then your application returns a

667
00:21:45,679 --> 00:21:47,840
certain result result and based on the

668
00:21:47,840 --> 00:21:50,000
request and response it tells you if

669
00:21:50,000 --> 00:21:51,679
your application is susceptible to any

670
00:21:51,679 --> 00:21:53,760
of the owasp top 10 type issues you know

671
00:21:53,760 --> 00:21:55,120
cross-site scripting sql injection

672
00:21:55,120 --> 00:21:58,240
things like that

673
00:21:58,240 --> 00:22:00,640
and then on the right side you have run

674
00:22:00,640 --> 00:22:02,480
time

675
00:22:02,480 --> 00:22:04,640
ast tools application security testing

676
00:22:04,640 --> 00:22:06,320
tools

677
00:22:06,320 --> 00:22:09,039
a popular one here is interactive asd

678
00:22:09,039 --> 00:22:10,400
tools you know tools like contrast

679
00:22:10,400 --> 00:22:12,080
security et cetera they were designed

680
00:22:12,080 --> 00:22:14,000
you know 10 years ago

681
00:22:14,000 --> 00:22:16,320
all these tools allow you to

682
00:22:16,320 --> 00:22:17,919
um

683
00:22:17,919 --> 00:22:20,799
in to instrument a language specific

684
00:22:20,799 --> 00:22:22,480
agent like if it's a java application

685
00:22:22,480 --> 00:22:24,080
you say okay install java agent if it's

686
00:22:24,080 --> 00:22:25,840
a dot net application you install a java

687
00:22:25,840 --> 00:22:27,679
you know document agent and they allow

688
00:22:27,679 --> 00:22:29,280
you to get visibility into how your

689
00:22:29,280 --> 00:22:30,960
application is behaving

690
00:22:30,960 --> 00:22:31,840
um

691
00:22:31,840 --> 00:22:33,919
you know by looking inside the

692
00:22:33,919 --> 00:22:35,760
application

693
00:22:35,760 --> 00:22:36,960
and then you have container security

694
00:22:36,960 --> 00:22:38,960
tools container security tools allow you

695
00:22:38,960 --> 00:22:41,760
to either you know these would be the

696
00:22:41,760 --> 00:22:43,520
twist locks and the aquas of the world

697
00:22:43,520 --> 00:22:45,760
or or de-factor

698
00:22:45,760 --> 00:22:48,880
these tools allow you to get you know

699
00:22:48,880 --> 00:22:51,520
either a sidecar or a process visibility

700
00:22:51,520 --> 00:22:53,520
mechanism to get visibility into the

701
00:22:53,520 --> 00:22:54,960
runtime of how your container

702
00:22:54,960 --> 00:22:58,480
containerized application is behaving

703
00:23:00,080 --> 00:23:01,440
when you use

704
00:23:01,440 --> 00:23:02,799
if you're building an application

705
00:23:02,799 --> 00:23:04,000
depending on the type of application

706
00:23:04,000 --> 00:23:06,000
you're building you need

707
00:23:06,000 --> 00:23:08,720
one or more of these types of tools in

708
00:23:08,720 --> 00:23:10,240
order for you to get comprehensive

709
00:23:10,240 --> 00:23:11,919
visibility and coverage into your

710
00:23:11,919 --> 00:23:13,760
applications

711
00:23:13,760 --> 00:23:16,159
the problem is too many tools

712
00:23:16,159 --> 00:23:17,840
you've got time all together

713
00:23:17,840 --> 00:23:19,120
you've got to manage them set up set

714
00:23:19,120 --> 00:23:21,200
them up etc

715
00:23:21,200 --> 00:23:22,880
and you also have to deal with the alert

716
00:23:22,880 --> 00:23:25,440
volume in many cases

717
00:23:25,440 --> 00:23:27,679
therefore in some cases some people add

718
00:23:27,679 --> 00:23:30,000
uh additional yet another tool to take

719
00:23:30,000 --> 00:23:31,840
all of these alerts and then dedupe them

720
00:23:31,840 --> 00:23:33,120
fine-tune them reduce the alert volume

721
00:23:33,120 --> 00:23:36,960
etc so that becomes another tool as well

722
00:23:36,960 --> 00:23:39,039
in order to solve this problem

723
00:23:39,039 --> 00:23:40,559
in the modern world in the cloud native

724
00:23:40,559 --> 00:23:41,440
world

725
00:23:41,440 --> 00:23:44,799
we can actually leverage observability

726
00:23:44,799 --> 00:23:47,760
if you observe the application while it

727
00:23:47,760 --> 00:23:48,799
is running

728
00:23:48,799 --> 00:23:50,960
using any of the mechanisms like a

729
00:23:50,960 --> 00:23:52,240
sidecar

730
00:23:52,240 --> 00:23:52,960
or

731
00:23:52,960 --> 00:23:55,360
an agent like i said or like a

732
00:23:55,360 --> 00:23:57,279
process-based inspection

733
00:23:57,279 --> 00:23:58,400
then

734
00:23:58,400 --> 00:24:00,320
you get to see

735
00:24:00,320 --> 00:24:02,960
all the behaviors that that application

736
00:24:02,960 --> 00:24:07,360
is exhibiting while while it is running

737
00:24:07,360 --> 00:24:09,679
you could track file behavior network

738
00:24:09,679 --> 00:24:11,120
behavior process behavior memory

739
00:24:11,120 --> 00:24:13,200
behavior so on and so forth and take all

740
00:24:13,200 --> 00:24:14,720
of that telemetry

741
00:24:14,720 --> 00:24:16,640
analyze that telemetry for anomalies put

742
00:24:16,640 --> 00:24:18,159
that in time series database do anomaly

743
00:24:18,159 --> 00:24:19,520
detection could be pattern based could

744
00:24:19,520 --> 00:24:22,400
be ml based and then you come up with

745
00:24:22,400 --> 00:24:25,919
runtime insights that actually can help

746
00:24:25,919 --> 00:24:28,960
you identify runtime security risks that

747
00:24:28,960 --> 00:24:31,279
lie in your application so using

748
00:24:31,279 --> 00:24:32,640
observability

749
00:24:32,640 --> 00:24:35,039
can essentially serve you know supersede

750
00:24:35,039 --> 00:24:37,039
uh you know what i asked in in the past

751
00:24:37,039 --> 00:24:39,039
kind of offered for your cloud native

752
00:24:39,039 --> 00:24:40,799
applications it's much easier to drop in

753
00:24:40,799 --> 00:24:42,159
because it's language agnostic unlike

754
00:24:42,159 --> 00:24:44,159
the first generation of you know is type

755
00:24:44,159 --> 00:24:45,279
tools

756
00:24:45,279 --> 00:24:47,120
it allows you to watch your cloud native

757
00:24:47,120 --> 00:24:48,640
application

758
00:24:48,640 --> 00:24:50,080
while it's running without actually

759
00:24:50,080 --> 00:24:51,760
changing any code or any any of the

760
00:24:51,760 --> 00:24:53,600
container images just by dropping it

761
00:24:53,600 --> 00:24:55,919
into your scheduler or in if you have

762
00:24:55,919 --> 00:24:57,200
kubernetes you can drop it into your

763
00:24:57,200 --> 00:24:58,720
code cluster and then you can start

764
00:24:58,720 --> 00:25:00,400
watching your applications runtime

765
00:25:00,400 --> 00:25:03,440
delivers runtime visibility great

766
00:25:03,440 --> 00:25:06,000
but that's not just the use case that

767
00:25:06,000 --> 00:25:08,559
that is only one of the possibilities

768
00:25:08,559 --> 00:25:10,720
what observability can do for you

769
00:25:10,720 --> 00:25:13,200
if if you use observability

770
00:25:13,200 --> 00:25:15,679
in the context of your desk it can

771
00:25:15,679 --> 00:25:18,480
actually help you enrich your

772
00:25:18,480 --> 00:25:20,320
dashed scanner

773
00:25:20,320 --> 00:25:23,200
by making it simpler faster and more

774
00:25:23,200 --> 00:25:24,480
comprehensive i'm going to talk about

775
00:25:24,480 --> 00:25:27,200
that in in a slight in

776
00:25:27,200 --> 00:25:28,400
you know a double click on that in the

777
00:25:28,400 --> 00:25:30,640
next couple of slides

778
00:25:30,640 --> 00:25:32,559
the third thing that observability can

779
00:25:32,559 --> 00:25:34,240
do for you if you do it right is to help

780
00:25:34,240 --> 00:25:36,799
you prioritize the alerts that your

781
00:25:36,799 --> 00:25:38,080
software composition analysis or

782
00:25:38,080 --> 00:25:39,200
container element scanning tool is

783
00:25:39,200 --> 00:25:41,520
producing and therefore reduce the

784
00:25:41,520 --> 00:25:43,760
volume of insights that you're seeing

785
00:25:43,760 --> 00:25:46,159
helping your developers make the most of

786
00:25:46,159 --> 00:25:48,320
uh you know make your software

787
00:25:48,320 --> 00:25:50,000
composition find value in your software

788
00:25:50,000 --> 00:25:52,960
composition analysis tool

789
00:25:52,960 --> 00:25:54,960
so

790
00:25:54,960 --> 00:25:56,880
the recommendation here is no matter

791
00:25:56,880 --> 00:25:58,720
which set of tools you use and no matter

792
00:25:58,720 --> 00:26:00,320
whether you use it from multiple

793
00:26:00,320 --> 00:26:02,880
different vendors one different vendor

794
00:26:02,880 --> 00:26:05,120
think about using observability to

795
00:26:05,120 --> 00:26:07,840
deliver runtime value to improve your

796
00:26:07,840 --> 00:26:10,799
das scan behaviors and simplicity and

797
00:26:10,799 --> 00:26:13,760
comprehensiveness and also improve your

798
00:26:13,760 --> 00:26:15,360
software composition analysis and other

799
00:26:15,360 --> 00:26:17,679
tools to prioritize and reduce the alert

800
00:26:17,679 --> 00:26:19,600
volume

801
00:26:19,600 --> 00:26:21,120
now let's double click

802
00:26:21,120 --> 00:26:22,880
into

803
00:26:22,880 --> 00:26:25,919
the middle part of here of this slide

804
00:26:25,919 --> 00:26:27,679
which is let's focus on how

805
00:26:27,679 --> 00:26:29,360
observability

806
00:26:29,360 --> 00:26:30,799
can enrich

807
00:26:30,799 --> 00:26:33,600
dust how does an observability is one of

808
00:26:33,600 --> 00:26:35,679
those marriages where one plus one is

809
00:26:35,679 --> 00:26:38,720
greater than two

810
00:26:38,720 --> 00:26:40,960
let's take an example of a cloud native

811
00:26:40,960 --> 00:26:42,880
application let's in this case i'm

812
00:26:42,880 --> 00:26:44,320
talking about a kubernetes application

813
00:26:44,320 --> 00:26:46,240
so you have an app you know four

814
00:26:46,240 --> 00:26:48,080
services and those four services are

815
00:26:48,080 --> 00:26:50,840
running in a kubernetes cluster

816
00:26:50,840 --> 00:26:52,799
right

817
00:26:52,799 --> 00:26:55,279
now you need to run a zap scanner

818
00:26:55,279 --> 00:26:58,480
so you go you set up a zap server

819
00:26:58,480 --> 00:27:00,799
and then you start um

820
00:27:00,799 --> 00:27:02,320
configuring it

821
00:27:02,320 --> 00:27:03,679
so that it points to your cloud native

822
00:27:03,679 --> 00:27:05,600
application you ask your developer what

823
00:27:05,600 --> 00:27:07,600
your endpoints it an endpoint is for the

824
00:27:07,600 --> 00:27:10,000
app and then you start

825
00:27:10,000 --> 00:27:11,840
scanning that endpoint

826
00:27:11,840 --> 00:27:13,279
but oh wait

827
00:27:13,279 --> 00:27:15,039
cloud native applications

828
00:27:15,039 --> 00:27:16,960
are you know these containers are

829
00:27:16,960 --> 00:27:19,440
fleeting they could come up and

830
00:27:19,440 --> 00:27:21,120
up and down

831
00:27:21,120 --> 00:27:23,360
and they're ephemeral that means the ip

832
00:27:23,360 --> 00:27:26,399
address of these containers might change

833
00:27:26,399 --> 00:27:28,080
so you decide to put a load balancer in

834
00:27:28,080 --> 00:27:29,679
front of it but you can't do that

835
00:27:29,679 --> 00:27:31,360
because you don't have access or your

836
00:27:31,360 --> 00:27:33,440
permissions to some of the network stuff

837
00:27:33,440 --> 00:27:35,520
so you bring in your network admin or

838
00:27:35,520 --> 00:27:38,000
your your it admin to set it up for you

839
00:27:38,000 --> 00:27:40,080
and therefore you create all of them

840
00:27:40,080 --> 00:27:42,000
it's a cumbersome process today

841
00:27:42,000 --> 00:27:43,440
so just to set up

842
00:27:43,440 --> 00:27:45,200
to get started with a dashcam or

843
00:27:45,200 --> 00:27:47,679
whatsapp or any any dashcam you need to

844
00:27:47,679 --> 00:27:50,080
have all of the networking equipment etc

845
00:27:50,080 --> 00:27:53,039
or or infrastructure configured

846
00:27:53,039 --> 00:27:54,640
either by you or

847
00:27:54,640 --> 00:27:56,320
in most cases the

848
00:27:56,320 --> 00:27:58,960
network admin or it admin

849
00:27:58,960 --> 00:28:00,080
to help you

850
00:28:00,080 --> 00:28:03,440
so that so there's a a pretty

851
00:28:03,440 --> 00:28:05,360
good amount of setup overhead involved

852
00:28:05,360 --> 00:28:08,960
and it therefore becomes a project

853
00:28:08,960 --> 00:28:10,799
let's say you've gone and you've set it

854
00:28:10,799 --> 00:28:11,919
up

855
00:28:11,919 --> 00:28:14,799
step one accomplished

856
00:28:14,799 --> 00:28:17,600
then you go kick off your zap scan and

857
00:28:17,600 --> 00:28:20,719
your zap scan is running

858
00:28:21,520 --> 00:28:23,679
your application is being scanned and

859
00:28:23,679 --> 00:28:25,360
zap when i say zap i'm referring to both

860
00:28:25,360 --> 00:28:27,200
the web scan as well as the api scanners

861
00:28:27,200 --> 00:28:27,919
app

862
00:28:27,919 --> 00:28:30,480
so your application is being scanned

863
00:28:30,480 --> 00:28:32,399
for web scan you use you know zap uses a

864
00:28:32,399 --> 00:28:34,399
crawler for api scan it asks you to pass

865
00:28:34,399 --> 00:28:35,600
in a swagger document so you give a

866
00:28:35,600 --> 00:28:38,000
swagger document it scans the apis but

867
00:28:38,000 --> 00:28:40,080
guess what your developers are not

868
00:28:40,080 --> 00:28:41,760
generally keeping your swagger document

869
00:28:41,760 --> 00:28:43,840
up to

870
00:28:43,840 --> 00:28:46,880
maybe there are a set of apis that your

871
00:28:46,880 --> 00:28:48,720
application is or uris that your

872
00:28:48,720 --> 00:28:51,679
application is listening on

873
00:28:51,679 --> 00:28:53,440
that are not documented as part of your

874
00:28:53,440 --> 00:28:55,760
swagger

875
00:28:55,760 --> 00:28:56,960
or maybe

876
00:28:56,960 --> 00:28:59,120
those apis shouldn't even exist in the

877
00:28:59,120 --> 00:29:01,279
first place they should have been

878
00:29:01,279 --> 00:29:03,760
neutered or not unexposed but they

879
00:29:03,760 --> 00:29:06,399
probably are still lying there exposed

880
00:29:06,399 --> 00:29:08,640
so what do you do about them so it's

881
00:29:08,640 --> 00:29:10,320
essentially the point is the challenge

882
00:29:10,320 --> 00:29:11,279
here is

883
00:29:11,279 --> 00:29:13,679
there is a coverage gap

884
00:29:13,679 --> 00:29:15,120
with respect to the actual number of

885
00:29:15,120 --> 00:29:16,799
apis and web services that are exposed

886
00:29:16,799 --> 00:29:18,240
by your application and what is actually

887
00:29:18,240 --> 00:29:20,320
being scanned because

888
00:29:20,320 --> 00:29:22,000
especially for api scanning it purely

889
00:29:22,000 --> 00:29:23,440
relies on

890
00:29:23,440 --> 00:29:25,760
a well-documented swagger document or

891
00:29:25,760 --> 00:29:27,760
equivalent

892
00:29:27,760 --> 00:29:29,039
the third

893
00:29:29,039 --> 00:29:30,399
challenge here

894
00:29:30,399 --> 00:29:31,440
for running

895
00:29:31,440 --> 00:29:33,760
zap with a cloud native application or

896
00:29:33,760 --> 00:29:35,039
any dash scanner with a cloud-native

897
00:29:35,039 --> 00:29:36,080
application

898
00:29:36,080 --> 00:29:37,520
is typically the scans are not

899
00:29:37,520 --> 00:29:39,039
intelligent enough to understand what

900
00:29:39,039 --> 00:29:41,440
changed inside your application

901
00:29:41,440 --> 00:29:42,480
therefore

902
00:29:42,480 --> 00:29:44,640
every time the scan is run

903
00:29:44,640 --> 00:29:46,880
you say scan this application it scans

904
00:29:46,880 --> 00:29:48,880
the entire thing again and again takes a

905
00:29:48,880 --> 00:29:50,000
lot of time

906
00:29:50,000 --> 00:29:52,840
and scans many times are slow

907
00:29:52,840 --> 00:29:55,760
so what is the fundamental problem here

908
00:29:55,760 --> 00:29:57,200
the problem is

909
00:29:57,200 --> 00:29:59,520
there is no feedback loop that is

910
00:29:59,520 --> 00:30:02,799
telling the zap server to only scan

911
00:30:02,799 --> 00:30:04,880
the changed web services in your

912
00:30:04,880 --> 00:30:07,120
application because there's nothing

913
00:30:07,120 --> 00:30:08,640
inside the application that is telling

914
00:30:08,640 --> 00:30:10,480
the zap scanner

915
00:30:10,480 --> 00:30:12,559
that these are the deltas that happened

916
00:30:12,559 --> 00:30:16,000
between release one and release two

917
00:30:16,000 --> 00:30:18,080
so these are the fundamental challenges

918
00:30:18,080 --> 00:30:23,039
with running a das scanner setting it up

919
00:30:23,039 --> 00:30:25,679
coverage gaps lack of apis that are

920
00:30:25,679 --> 00:30:27,600
documented or always relying only on the

921
00:30:27,600 --> 00:30:29,200
documented apis

922
00:30:29,200 --> 00:30:32,080
and slow scans these are the challenges

923
00:30:32,080 --> 00:30:34,640
when it comes to running a das scan with

924
00:30:34,640 --> 00:30:37,360
a cloud native application

925
00:30:37,360 --> 00:30:39,520
now let's see how observability

926
00:30:39,520 --> 00:30:41,520
can help zap

927
00:30:41,520 --> 00:30:45,200
or any dust get better

928
00:30:45,440 --> 00:30:48,000
let's take

929
00:30:49,039 --> 00:30:50,720
and observability let's say it's the

930
00:30:50,720 --> 00:30:52,080
same application

931
00:30:52,080 --> 00:30:53,679
but in this case

932
00:30:53,679 --> 00:30:55,679
the application is being observed so you

933
00:30:55,679 --> 00:30:57,279
pick whatever observability tool you

934
00:30:57,279 --> 00:30:59,200
want to use whether it's a sysdig or

935
00:30:59,200 --> 00:31:00,799
whether it's a d factor or whether it's

936
00:31:00,799 --> 00:31:01,519
a

937
00:31:01,519 --> 00:31:03,279
aqua

938
00:31:03,279 --> 00:31:07,039
and you drop it into your coop cluster

939
00:31:07,519 --> 00:31:09,679
what happens then is

940
00:31:09,679 --> 00:31:12,000
your containers

941
00:31:12,000 --> 00:31:14,080
are being watched or observed because

942
00:31:14,080 --> 00:31:16,640
there's an agent that is agent or or

943
00:31:16,640 --> 00:31:18,960
library or whatever approach you take

944
00:31:18,960 --> 00:31:21,600
that is listening to these containers

945
00:31:21,600 --> 00:31:23,679
and observing the changes in these

946
00:31:23,679 --> 00:31:25,600
containers the ip changes which web

947
00:31:25,600 --> 00:31:27,039
services are they listening on what

948
00:31:27,039 --> 00:31:28,399
ports are they listening on all of that

949
00:31:28,399 --> 00:31:31,039
is being observed by this watcher

950
00:31:31,039 --> 00:31:33,519
let's call it a sensor

951
00:31:33,519 --> 00:31:35,760
that is observing your containers

952
00:31:35,760 --> 00:31:38,640
this sensor

953
00:31:39,120 --> 00:31:41,039
if you pick the right tool

954
00:31:41,039 --> 00:31:44,000
can actually have a feedback loop back

955
00:31:44,000 --> 00:31:46,559
into your zap server or your das

956
00:31:46,559 --> 00:31:49,039
platform

957
00:31:50,399 --> 00:31:52,159
this is this is an area where uh you

958
00:31:52,159 --> 00:31:53,840
know we actually ended up filing a

959
00:31:53,840 --> 00:31:55,919
patent uh last year and it's super cool

960
00:31:55,919 --> 00:31:57,840
in fact what we did was to solve this

961
00:31:57,840 --> 00:32:00,880
problem number one which is enabling the

962
00:32:00,880 --> 00:32:03,600
zap server to see

963
00:32:03,600 --> 00:32:05,760
your application container and scan it

964
00:32:05,760 --> 00:32:07,600
even though the ips of this application

965
00:32:07,600 --> 00:32:09,760
keeps changing all the time we baked in

966
00:32:09,760 --> 00:32:11,360
a little proxy

967
00:32:11,360 --> 00:32:15,760
into the into this orange dot that proxy

968
00:32:15,760 --> 00:32:17,919
allowed you allowed us

969
00:32:17,919 --> 00:32:19,919
to tell the zap server

970
00:32:19,919 --> 00:32:22,480
what our ipe is that it needs to start

971
00:32:22,480 --> 00:32:23,760
scanning

972
00:32:23,760 --> 00:32:26,240
so as soon as this container comes up

973
00:32:26,240 --> 00:32:28,960
that proxy is there and the proxy tells

974
00:32:28,960 --> 00:32:31,600
zap server that you can scan me i'm here

975
00:32:31,600 --> 00:32:33,039
this is my ip

976
00:32:33,039 --> 00:32:34,960
so now you don't need to go set up a

977
00:32:34,960 --> 00:32:37,519
load balancer etc all you have to do is

978
00:32:37,519 --> 00:32:38,960
drop little this little thing into your

979
00:32:38,960 --> 00:32:40,399
cool cluster

980
00:32:40,399 --> 00:32:42,399
and then you go to your zap

981
00:32:42,399 --> 00:32:44,480
configure the integration

982
00:32:44,480 --> 00:32:45,600
and

983
00:32:45,600 --> 00:32:48,158
say scan

984
00:32:48,480 --> 00:32:50,720
that eliminates the need to involve a

985
00:32:50,720 --> 00:32:52,799
network administrator so now you know

986
00:32:52,799 --> 00:32:53,600
you don't need that network

987
00:32:53,600 --> 00:32:54,880
administrator to come and set up load

988
00:32:54,880 --> 00:32:56,880
balancers all of that routing and that

989
00:32:56,880 --> 00:32:58,960
routing doesn't need to be updated all

990
00:32:58,960 --> 00:33:01,120
the time because anytime this new

991
00:33:01,120 --> 00:33:03,519
container comes up your zap server knows

992
00:33:03,519 --> 00:33:05,840
exactly where it lies what its ip is and

993
00:33:05,840 --> 00:33:08,000
how to how to scan it

994
00:33:08,000 --> 00:33:10,159
you can even use it actually to scan

995
00:33:10,159 --> 00:33:11,760
internal services

996
00:33:11,760 --> 00:33:13,519
not just the ones that are exposed

997
00:33:13,519 --> 00:33:16,080
outside of your uh your network or the

998
00:33:16,080 --> 00:33:17,360
externally exposed endpoints that are

999
00:33:17,360 --> 00:33:18,799
typically scanned you can even scan the

1000
00:33:18,799 --> 00:33:20,480
internal endpoints and get some

1001
00:33:20,480 --> 00:33:22,960
interesting insights there too

1002
00:33:22,960 --> 00:33:24,799
number two is

1003
00:33:24,799 --> 00:33:27,039
you get a observability can enable you

1004
00:33:27,039 --> 00:33:30,159
to get a lot more comprehensive coverage

1005
00:33:30,159 --> 00:33:32,080
with respect to scans because it is

1006
00:33:32,080 --> 00:33:34,159
watching your application

1007
00:33:34,159 --> 00:33:36,880
for new web services created new apis

1008
00:33:36,880 --> 00:33:39,120
that it's that it's listening on etc and

1009
00:33:39,120 --> 00:33:40,880
therefore even if you have certain

1010
00:33:40,880 --> 00:33:42,960
undocumented uris or apis in your

1011
00:33:42,960 --> 00:33:44,720
application

1012
00:33:44,720 --> 00:33:47,519
the observability you know uh

1013
00:33:47,519 --> 00:33:49,760
sensor in your application now knows

1014
00:33:49,760 --> 00:33:51,200
that these are the new apis and then it

1015
00:33:51,200 --> 00:33:53,039
can go tell the zap scanner to go scan

1016
00:33:53,039 --> 00:33:54,399
those things

1017
00:33:54,399 --> 00:33:56,000
so it doesn't have to so you don't have

1018
00:33:56,000 --> 00:33:58,080
to have a properly documented swagger

1019
00:33:58,080 --> 00:33:59,840
interface you can actually

1020
00:33:59,840 --> 00:34:01,919
your zap scan now give you now can give

1021
00:34:01,919 --> 00:34:03,919
you a more comprehensive list of

1022
00:34:03,919 --> 00:34:07,600
coverage of your uris because

1023
00:34:07,600 --> 00:34:09,599
the sensor that is observing your

1024
00:34:09,599 --> 00:34:11,280
application from the inside actually has

1025
00:34:11,280 --> 00:34:12,800
a feedback mechanism into the zap scan

1026
00:34:12,800 --> 00:34:14,239
server

1027
00:34:14,239 --> 00:34:17,760
the third one is reducing of scan times

1028
00:34:17,760 --> 00:34:19,839
because now your application the

1029
00:34:19,839 --> 00:34:22,079
observability sensor in your application

1030
00:34:22,079 --> 00:34:24,320
is actually watching

1031
00:34:24,320 --> 00:34:25,760
the changes that have happened in your

1032
00:34:25,760 --> 00:34:27,199
application between release one and

1033
00:34:27,199 --> 00:34:29,359
release two so for example if your

1034
00:34:29,359 --> 00:34:30,639
application

1035
00:34:30,639 --> 00:34:32,000
opened a new web service or started

1036
00:34:32,000 --> 00:34:34,320
listening on a new web service

1037
00:34:34,320 --> 00:34:36,399
between release one and release two

1038
00:34:36,399 --> 00:34:37,280
then

1039
00:34:37,280 --> 00:34:39,280
you only need to scan that maybe you

1040
00:34:39,280 --> 00:34:41,599
don't need to scan all of the endpoints

1041
00:34:41,599 --> 00:34:44,639
all the time and that will help you

1042
00:34:44,639 --> 00:34:46,560
only scan the deltas

1043
00:34:46,560 --> 00:34:49,280
and by if the sensor tells zap scanner

1044
00:34:49,280 --> 00:34:51,839
to scan only the deltas then the scan

1045
00:34:51,839 --> 00:34:54,719
time will be drastically reduced as well

1046
00:34:54,719 --> 00:34:58,960
so these are three examples of how

1047
00:34:58,960 --> 00:35:02,400
observability if working together with a

1048
00:35:02,400 --> 00:35:04,640
with a das scanner can actually improve

1049
00:35:04,640 --> 00:35:05,920
the task scanner at the same time

1050
00:35:05,920 --> 00:35:07,280
providing value like one plus one

1051
00:35:07,280 --> 00:35:10,720
greater than two precisely

1052
00:35:12,079 --> 00:35:14,640
so let's circle back

1053
00:35:14,640 --> 00:35:16,560
back to you know hey i'm building a

1054
00:35:16,560 --> 00:35:17,760
cloud native application or my team's

1055
00:35:17,760 --> 00:35:19,440
building a cloud native application how

1056
00:35:19,440 --> 00:35:20,880
do i go about thinking

1057
00:35:20,880 --> 00:35:23,040
uh planning for my appsx strategy i'm

1058
00:35:23,040 --> 00:35:24,400
sure many of you guys are experts here

1059
00:35:24,400 --> 00:35:25,839
for those of you that are looking for

1060
00:35:25,839 --> 00:35:28,640
some guidance in this area then the the

1061
00:35:28,640 --> 00:35:30,240
guidance here is first think about your

1062
00:35:30,240 --> 00:35:31,839
business driver is your business driver

1063
00:35:31,839 --> 00:35:33,040
digital transformation or app

1064
00:35:33,040 --> 00:35:34,960
modernization or do you simply want to

1065
00:35:34,960 --> 00:35:36,720
take your legacy application but put

1066
00:35:36,720 --> 00:35:38,960
security into your cicd pipeline

1067
00:35:38,960 --> 00:35:40,880
are or are you more governance driven or

1068
00:35:40,880 --> 00:35:42,640
or compliance driven you know is it is

1069
00:35:42,640 --> 00:35:44,400
it the new biden

1070
00:35:44,400 --> 00:35:46,240
uh s-bomb uh

1071
00:35:46,240 --> 00:35:48,400
you know executive direction um that is

1072
00:35:48,400 --> 00:35:50,000
that is making you take this stance or

1073
00:35:50,000 --> 00:35:52,320
do you need to comply with something

1074
00:35:52,320 --> 00:35:54,320
once you understand your business driver

1075
00:35:54,320 --> 00:35:55,839
you need you also need to understand the

1076
00:35:55,839 --> 00:35:57,040
persona that is going to be using the

1077
00:35:57,040 --> 00:35:59,200
tool like is it is it your qa team your

1078
00:35:59,200 --> 00:36:01,119
ops team or do you want to have

1079
00:36:01,119 --> 00:36:03,280
visibility into the devs or maybe it's a

1080
00:36:03,280 --> 00:36:04,640
combination of the above where your

1081
00:36:04,640 --> 00:36:07,040
devops team with guidance from appsec

1082
00:36:07,040 --> 00:36:09,839
sets up your ci pipeline and base

1083
00:36:09,839 --> 00:36:11,680
security tools into it and your dev

1084
00:36:11,680 --> 00:36:13,200
teams up is the one that's consuming the

1085
00:36:13,200 --> 00:36:14,720
insight whichever it is i think you need

1086
00:36:14,720 --> 00:36:16,480
to properly understand that and have

1087
00:36:16,480 --> 00:36:18,240
some kind of a process so that you can

1088
00:36:18,240 --> 00:36:20,480
you can make sure that that's uh that's

1089
00:36:20,480 --> 00:36:22,480
a viable process triaging timelines

1090
00:36:22,480 --> 00:36:23,839
who's going to triage it at the end of

1091
00:36:23,839 --> 00:36:25,280
the day there's going to be some work

1092
00:36:25,280 --> 00:36:26,480
involved it's not it's never going to be

1093
00:36:26,480 --> 00:36:27,599
zero so you have to make sure that

1094
00:36:27,599 --> 00:36:29,119
that's you know that's that's planned

1095
00:36:29,119 --> 00:36:30,800
for it

1096
00:36:30,800 --> 00:36:33,119
the third one which is an important part

1097
00:36:33,119 --> 00:36:34,400
in this puzzle is what are your

1098
00:36:34,400 --> 00:36:36,560
technology requirements are you dealing

1099
00:36:36,560 --> 00:36:38,560
with a mobile or desktop application in

1100
00:36:38,560 --> 00:36:39,599
which case you need to pick a different

1101
00:36:39,599 --> 00:36:41,359
set of tools are you dealing with a

1102
00:36:41,359 --> 00:36:43,680
predominantly vm based deployment with a

1103
00:36:43,680 --> 00:36:46,160
legacy like net or you know type

1104
00:36:46,160 --> 00:36:47,680
workloads in which case you need to pick

1105
00:36:47,680 --> 00:36:49,359
a different type of tool or are you

1106
00:36:49,359 --> 00:36:51,359
dealing with uh some of the more modern

1107
00:36:51,359 --> 00:36:52,880
cloud native applications in which case

1108
00:36:52,880 --> 00:36:54,160
you need to pick a different set of

1109
00:36:54,160 --> 00:36:56,160
tools so understand that because one

1110
00:36:56,160 --> 00:36:58,880
tool does not fit all and

1111
00:36:58,880 --> 00:37:00,720
many times it's not it's it's not in

1112
00:37:00,720 --> 00:37:02,079
this abstract world it's not one tool

1113
00:37:02,079 --> 00:37:04,000
it's usually a combination of many tools

1114
00:37:04,000 --> 00:37:05,920
so pick the set of tools that make sense

1115
00:37:05,920 --> 00:37:07,680
for your application set

1116
00:37:07,680 --> 00:37:13,040
and lastly your budget timeline etc etc

1117
00:37:13,599 --> 00:37:15,359
with that

1118
00:37:15,359 --> 00:37:18,079
i wanted to conclude this presentation i

1119
00:37:18,079 --> 00:37:20,640
promised 35 to 40 minutes so here i am

1120
00:37:20,640 --> 00:37:22,720
37 minutes in

1121
00:37:22,720 --> 00:37:24,000
um

1122
00:37:24,000 --> 00:37:24,880
that's

1123
00:37:24,880 --> 00:37:27,200
my slideshow if you'd like to contact me

1124
00:37:27,200 --> 00:37:28,720
my email is here

1125
00:37:28,720 --> 00:37:30,800
uh you can always go to deepfactor.io or

1126
00:37:30,800 --> 00:37:32,560
you can go to you can email me at kiran

1127
00:37:32,560 --> 00:37:35,280
at or you can hit me up on linkedin

1128
00:37:35,280 --> 00:37:39,040
happy to take any questions

