1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:06,000 --> 00:00:08,559
um excellent well thanks and welcome

3
00:00:08,559 --> 00:00:10,559
along everyone uh good afternoon or good

4
00:00:10,559 --> 00:00:12,080
evening depending on where you are in

5
00:00:12,080 --> 00:00:15,040
the world uh to this talk about um

6
00:00:15,040 --> 00:00:17,520
kubernetes cluster wrangling so i think

7
00:00:17,520 --> 00:00:19,199
that we can all agree that the

8
00:00:19,199 --> 00:00:21,119
kubernetes and containers have been kind

9
00:00:21,119 --> 00:00:24,240
of a growing uh trend in the marketplace

10
00:00:24,240 --> 00:00:26,880
over the last four or five years now

11
00:00:26,880 --> 00:00:29,439
and as more organizations start

12
00:00:29,439 --> 00:00:32,558
deploying large numbers of applications

13
00:00:32,558 --> 00:00:34,880
to kubernetes clusters we're starting to

14
00:00:34,880 --> 00:00:37,120
learn a bit about what can go wrong and

15
00:00:37,120 --> 00:00:39,280
what can go right what are the sort of

16
00:00:39,280 --> 00:00:42,160
patterns that work to make secure

17
00:00:42,160 --> 00:00:45,039
environments with kubernetes and also um

18
00:00:45,039 --> 00:00:47,039
what are some of the things that we can

19
00:00:47,039 --> 00:00:49,200
we see with mistakes being made right

20
00:00:49,200 --> 00:00:50,559
where can we kind of pick up those

21
00:00:50,559 --> 00:00:52,800
mistakes and kind of avoid them

22
00:00:52,800 --> 00:00:55,120
um so this talk is essentially based on

23
00:00:55,120 --> 00:00:56,640
my experience looking at kubernetes for

24
00:00:56,640 --> 00:00:58,320
a while now and i want to talk a bit

25
00:00:58,320 --> 00:01:00,399
about some of these challenges that you

26
00:01:00,399 --> 00:01:02,559
will have if you're using kubernetes and

27
00:01:02,559 --> 00:01:04,159
then some of the ways i think you can

28
00:01:04,159 --> 00:01:05,920
address them as well

29
00:01:05,920 --> 00:01:07,200
and we're going to look for trying to

30
00:01:07,200 --> 00:01:08,720
make kubernetes clusters secure and

31
00:01:08,720 --> 00:01:10,400
usable because you know that's important

32
00:01:10,400 --> 00:01:11,760
too

33
00:01:11,760 --> 00:01:13,840
before i get started uh very brief about

34
00:01:13,840 --> 00:01:16,240
the uh a little background so yeah as

35
00:01:16,240 --> 00:01:18,320
matt said uh my background's information

36
00:01:18,320 --> 00:01:20,720
90 security i've been doing that for

37
00:01:20,720 --> 00:01:22,560
about 20 years now

38
00:01:22,560 --> 00:01:24,799
i'm an ex-aus chapter leader back when i

39
00:01:24,799 --> 00:01:26,640
lived in edinburgh i was the awesome

40
00:01:26,640 --> 00:01:28,000
scotland chapter leader for a couple of

41
00:01:28,000 --> 00:01:29,040
years

42
00:01:29,040 --> 00:01:31,680
i am a cloud native security advocate

43
00:01:31,680 --> 00:01:33,920
for aqua which basically means my job is

44
00:01:33,920 --> 00:01:36,960
to educate and inform around containers

45
00:01:36,960 --> 00:01:39,200
cloud native security

46
00:01:39,200 --> 00:01:40,880
as matt mentioned i have helped been

47
00:01:40,880 --> 00:01:42,880
authoring the cis benchmarks for docker

48
00:01:42,880 --> 00:01:44,720
and kubernetes and if you're looking for

49
00:01:44,720 --> 00:01:46,799
like specific hardening guidance like

50
00:01:46,799 --> 00:01:49,200
which pat which exact flag to turn to

51
00:01:49,200 --> 00:01:51,119
which exact value those are great places

52
00:01:51,119 --> 00:01:52,560
to start we're gonna be talking about

53
00:01:52,560 --> 00:01:54,079
some higher level stuff today but those

54
00:01:54,079 --> 00:01:56,079
are also good good guys to to look at as

55
00:01:56,079 --> 00:01:56,960
well

56
00:01:56,960 --> 00:01:58,799
i'm also a member of kubernetes sig

57
00:01:58,799 --> 00:02:00,880
security uh for those of you who haven't

58
00:02:00,880 --> 00:02:02,000
involved yourself a lot with the

59
00:02:02,000 --> 00:02:04,000
kubernetes project they're arranged into

60
00:02:04,000 --> 00:02:05,600
special interest groups uh and i'm

61
00:02:05,600 --> 00:02:07,840
involved in the security one if you know

62
00:02:07,840 --> 00:02:09,440
maybe after this talk uh you think

63
00:02:09,440 --> 00:02:11,200
humanity's security is something i would

64
00:02:11,200 --> 00:02:13,280
like to learn a lot more about then you

65
00:02:13,280 --> 00:02:14,879
know we're a very welcoming group meets

66
00:02:14,879 --> 00:02:17,120
every week every other week

67
00:02:17,120 --> 00:02:18,800
and you can just come along and and

68
00:02:18,800 --> 00:02:20,720
listen or participate there's also

69
00:02:20,720 --> 00:02:22,160
groups that look at security

70
00:02:22,160 --> 00:02:24,480
documentation and security tooling

71
00:02:24,480 --> 00:02:26,480
if you've got any questions uh after the

72
00:02:26,480 --> 00:02:29,120
talk uh there is my twitter handle and

73
00:02:29,120 --> 00:02:31,280
my email address uh please feel free to

74
00:02:31,280 --> 00:02:33,680
drop live or if you don't ask it the end

75
00:02:33,680 --> 00:02:34,879
of the top something kind of crops up

76
00:02:34,879 --> 00:02:36,800
the next day or two whatever

77
00:02:36,800 --> 00:02:38,640
as you would have guessed uh by my

78
00:02:38,640 --> 00:02:42,000
accent i'm not from the usa i'm actually

79
00:02:42,000 --> 00:02:45,040
based here uh this is a lost coil head

80
00:02:45,040 --> 00:02:47,680
in the west scottish highlands which as

81
00:02:47,680 --> 00:02:48,879
you can see

82
00:02:48,879 --> 00:02:51,840
looks very nice on a sunny dry day

83
00:02:51,840 --> 00:02:53,519
if any of you have ever been to the west

84
00:02:53,519 --> 00:02:54,879
highlands of scotland you'll know that

85
00:02:54,879 --> 00:02:56,400
unfortunately we don't get a lot of

86
00:02:56,400 --> 00:02:57,200
those

87
00:02:57,200 --> 00:02:58,720
um so i will try and take pictures when

88
00:02:58,720 --> 00:03:00,319
it looks like this

89
00:03:00,319 --> 00:03:02,800
anyway let's get on with the talk

90
00:03:02,800 --> 00:03:04,879
so we want to talk about kubernetes and

91
00:03:04,879 --> 00:03:06,640
we want to talk about securing

92
00:03:06,640 --> 00:03:09,120
kubernetes to do that the first thing we

93
00:03:09,120 --> 00:03:10,879
have to define is what are we talking

94
00:03:10,879 --> 00:03:12,560
about with kubernetes

95
00:03:12,560 --> 00:03:14,239
one of the big challenges with this

96
00:03:14,239 --> 00:03:16,560
field and we're securing this field

97
00:03:16,560 --> 00:03:18,800
is um all of the different ways that you

98
00:03:18,800 --> 00:03:20,800
know you can make use of something which

99
00:03:20,800 --> 00:03:22,480
is kubernetes

100
00:03:22,480 --> 00:03:24,480
what the way the project works is they

101
00:03:24,480 --> 00:03:27,040
have a list of certified distributions

102
00:03:27,040 --> 00:03:28,879
these are distribution software products

103
00:03:28,879 --> 00:03:30,480
services could be service software as a

104
00:03:30,480 --> 00:03:32,159
service could be platform as a service

105
00:03:32,159 --> 00:03:34,000
it could be an open source project

106
00:03:34,000 --> 00:03:35,840
anything which is conformant kubernetes

107
00:03:35,840 --> 00:03:37,440
can be one of the community's

108
00:03:37,440 --> 00:03:38,799
distributions

109
00:03:38,799 --> 00:03:41,280
however from a security standpoint quite

110
00:03:41,280 --> 00:03:42,640
a lot of times they'll do things

111
00:03:42,640 --> 00:03:44,239
differently so someone asked me a

112
00:03:44,239 --> 00:03:45,440
question you know what's kubernetes

113
00:03:45,440 --> 00:03:48,080
default for securing x i'll generally

114
00:03:48,080 --> 00:03:49,680
ask which distribution are you talking

115
00:03:49,680 --> 00:03:51,840
about because they could be different if

116
00:03:51,840 --> 00:03:53,519
you look at something here uh like

117
00:03:53,519 --> 00:03:55,840
openshift openshift's very opinionated

118
00:03:55,840 --> 00:03:57,519
and it has a lot of additional things

119
00:03:57,519 --> 00:03:59,360
built into the platform so it's got a

120
00:03:59,360 --> 00:04:00,959
very particular way of handling it and

121
00:04:00,959 --> 00:04:02,959
that's likely to be different from tanzu

122
00:04:02,959 --> 00:04:05,760
which is vmware's kubernetes or eks

123
00:04:05,760 --> 00:04:08,319
which is amazon's managed kubernetes um

124
00:04:08,319 --> 00:04:09,760
you know or any of the other ones

125
00:04:09,760 --> 00:04:12,159
rancher down here those all sorts so the

126
00:04:12,159 --> 00:04:13,760
first thing that we have to concern

127
00:04:13,760 --> 00:04:15,280
ourselves with is it can be quite

128
00:04:15,280 --> 00:04:16,639
difficult and this is a challenge you'll

129
00:04:16,639 --> 00:04:19,199
have is exactly which kubernetes are we

130
00:04:19,199 --> 00:04:20,798
talking about

131
00:04:20,798 --> 00:04:23,040
however what we can do is we can think

132
00:04:23,040 --> 00:04:25,040
about core kubernetes

133
00:04:25,040 --> 00:04:27,680
in order to be a kubernetes distribution

134
00:04:27,680 --> 00:04:29,840
in order to be a considered conformant

135
00:04:29,840 --> 00:04:31,840
one you have to have certain features

136
00:04:31,840 --> 00:04:33,840
certain functions so this is what a

137
00:04:33,840 --> 00:04:36,000
cubex cluster the basic version looks

138
00:04:36,000 --> 00:04:37,840
like and all of them pretty much work

139
00:04:37,840 --> 00:04:38,880
this way

140
00:04:38,880 --> 00:04:40,800
so the way it works is we have two sets

141
00:04:40,800 --> 00:04:42,479
of nodes those nodes are typically

142
00:04:42,479 --> 00:04:43,919
virtual machines could be a physical

143
00:04:43,919 --> 00:04:45,199
service as well

144
00:04:45,199 --> 00:04:47,680
we've got our control plane nodes and

145
00:04:47,680 --> 00:04:49,520
our control plane nodes are how we

146
00:04:49,520 --> 00:04:51,280
manage the cluster

147
00:04:51,280 --> 00:04:53,040
the core service the thing that's most

148
00:04:53,040 --> 00:04:55,360
important to us in terms of the security

149
00:04:55,360 --> 00:04:56,400
of the platform

150
00:04:56,400 --> 00:04:59,040
is the api server the api server is a

151
00:04:59,040 --> 00:05:00,880
rest api so you know coming from a web

152
00:05:00,880 --> 00:05:02,880
app background as we are um it's quite

153
00:05:02,880 --> 00:05:04,240
interesting you know this is just a rest

154
00:05:04,240 --> 00:05:06,400
web service you can handle you can talk

155
00:05:06,400 --> 00:05:08,080
to it via curl you don't have to use the

156
00:05:08,080 --> 00:05:09,440
tooling and everything pretty much it

157
00:05:09,440 --> 00:05:11,759
does just curl commands um so it's quite

158
00:05:11,759 --> 00:05:13,199
easy to manage from that perspective or

159
00:05:13,199 --> 00:05:15,280
it's easy to get started with

160
00:05:15,280 --> 00:05:17,440
but the api server is our most important

161
00:05:17,440 --> 00:05:19,440
component from a security standpoint

162
00:05:19,440 --> 00:05:21,360
if an attacker can compromise the api

163
00:05:21,360 --> 00:05:23,199
server they can pretty much compromise

164
00:05:23,199 --> 00:05:25,440
the entire cluster every single time

165
00:05:25,440 --> 00:05:26,400
and they're going to be able to

166
00:05:26,400 --> 00:05:28,080
compromise every machine in that

167
00:05:28,080 --> 00:05:29,520
environment

168
00:05:29,520 --> 00:05:31,199
so those are our control plane nodes and

169
00:05:31,199 --> 00:05:33,039
then we've got a set of worker nodes and

170
00:05:33,039 --> 00:05:34,639
our worker nodes are where our

171
00:05:34,639 --> 00:05:36,560
applications are deployed so the way

172
00:05:36,560 --> 00:05:38,400
kubernetes works is it has a set of

173
00:05:38,400 --> 00:05:40,800
virtual machines uh or physical servers

174
00:05:40,800 --> 00:05:42,400
and you deploy containers to those

175
00:05:42,400 --> 00:05:44,400
virtual machines or physical servers are

176
00:05:44,400 --> 00:05:46,000
they running the worker nodes

177
00:05:46,000 --> 00:05:48,320
the important components for this are

178
00:05:48,320 --> 00:05:50,320
kind of talk today is one we've got this

179
00:05:50,320 --> 00:05:52,720
thing down here called container engine

180
00:05:52,720 --> 00:05:54,479
traditionally this would be docker so

181
00:05:54,479 --> 00:05:55,680
docker would be the container engine

182
00:05:55,680 --> 00:05:57,520
that most cases would be what's used but

183
00:05:57,520 --> 00:05:59,280
it doesn't have to be docker it can be

184
00:05:59,280 --> 00:06:01,440
anything which fulfills what kubernetes

185
00:06:01,440 --> 00:06:03,840
calls the container runtime interface so

186
00:06:03,840 --> 00:06:05,280
anything which has

187
00:06:05,280 --> 00:06:07,039
those properties could be cryo which is

188
00:06:07,039 --> 00:06:08,639
red hats container engine it could be

189
00:06:08,639 --> 00:06:10,560
container d and indeed in modern

190
00:06:10,560 --> 00:06:11,759
clusters it's quite likely to be

191
00:06:11,759 --> 00:06:13,680
containery it could be docker or it

192
00:06:13,680 --> 00:06:14,800
could be other things there's other ways

193
00:06:14,800 --> 00:06:16,639
of doing as well but something which

194
00:06:16,639 --> 00:06:18,880
runs containers has to be in our cluster

195
00:06:18,880 --> 00:06:20,400
because that's what it needs to actually

196
00:06:20,400 --> 00:06:22,720
operate and make things run then the

197
00:06:22,720 --> 00:06:24,160
other thing we need here

198
00:06:24,160 --> 00:06:25,840
is we need something to toss it between

199
00:06:25,840 --> 00:06:28,319
our container engine and our api server

200
00:06:28,319 --> 00:06:29,520
and for that we have a thing called the

201
00:06:29,520 --> 00:06:31,440
cubelet so the cubelet essentially takes

202
00:06:31,440 --> 00:06:33,680
commands from the api server passes them

203
00:06:33,680 --> 00:06:35,120
to container engine

204
00:06:35,120 --> 00:06:37,360
now i've got three components here in

205
00:06:37,360 --> 00:06:40,720
red the kubelet the api server and xcd

206
00:06:40,720 --> 00:06:42,400
and these are the main security ones we

207
00:06:42,400 --> 00:06:43,759
need to concern ourselves with because

208
00:06:43,759 --> 00:06:45,840
compromise of any of those typically is

209
00:06:45,840 --> 00:06:48,479
very bad news for cluster security

210
00:06:48,479 --> 00:06:50,160
scd is the last one i haven't mentioned

211
00:06:50,160 --> 00:06:52,400
and that is a fairly simple key value

212
00:06:52,400 --> 00:06:55,520
store database kubernetes by default is

213
00:06:55,520 --> 00:06:57,919
ephemeral it doesn't store state so it

214
00:06:57,919 --> 00:07:00,560
needs some external data store and in

215
00:07:00,560 --> 00:07:02,319
almost all clusters doesn't have to be

216
00:07:02,319 --> 00:07:03,680
at cd but pretty much

217
00:07:03,680 --> 00:07:06,400
every major distribution uses xcd um so

218
00:07:06,400 --> 00:07:08,319
a compromise of that will also cause us

219
00:07:08,319 --> 00:07:09,919
security problems

220
00:07:09,919 --> 00:07:11,120
um

221
00:07:11,120 --> 00:07:12,960
all three of these have got a network

222
00:07:12,960 --> 00:07:14,240
attack surface

223
00:07:14,240 --> 00:07:16,800
so there are is a port there's a service

224
00:07:16,800 --> 00:07:18,639
uh the cubelet and api server are just

225
00:07:18,639 --> 00:07:21,919
http the xcd server is a grpc so it's

226
00:07:21,919 --> 00:07:23,759
kind of hdb2 with with some binary

227
00:07:23,759 --> 00:07:25,840
serialization but those are all services

228
00:07:25,840 --> 00:07:28,479
that can be attacked by attackers

229
00:07:28,479 --> 00:07:30,240
so that's our basic kubernetes pretty

230
00:07:30,240 --> 00:07:31,599
much all kubernetes will work like this

231
00:07:31,599 --> 00:07:33,680
we'll try and focus on the kind of core

232
00:07:33,680 --> 00:07:36,720
of it we won't go too much into how 137

233
00:07:36,720 --> 00:07:38,479
different uh services work otherwise be

234
00:07:38,479 --> 00:07:40,240
here for a very long time

235
00:07:40,240 --> 00:07:42,400
so why is it important why is is do i

236
00:07:42,400 --> 00:07:44,400
think that the architecting clusters

237
00:07:44,400 --> 00:07:47,199
securely is such an important thing

238
00:07:47,199 --> 00:07:49,360
well kubernetes is growing in popularity

239
00:07:49,360 --> 00:07:50,879
lots of organizations are making use of

240
00:07:50,879 --> 00:07:52,879
this it's only you know the last three

241
00:07:52,879 --> 00:07:54,400
four years has been huge

242
00:07:54,400 --> 00:07:56,080
from from early day or doctor days it

243
00:07:56,080 --> 00:07:57,199
was only about three or four years ago

244
00:07:57,199 --> 00:07:58,879
we're now seeing across many different

245
00:07:58,879 --> 00:08:00,479
industries you know financial services

246
00:08:00,479 --> 00:08:01,919
public sector

247
00:08:01,919 --> 00:08:03,280
and pretty much every other industry out

248
00:08:03,280 --> 00:08:04,560
there there's pretty

249
00:08:04,560 --> 00:08:06,720
heavy additional use of kubernetes so

250
00:08:06,720 --> 00:08:08,479
trying to secure kubernetes platforms

251
00:08:08,479 --> 00:08:10,960
becomes ever more important

252
00:08:10,960 --> 00:08:12,800
this one's a kind of important one as

253
00:08:12,800 --> 00:08:15,199
well kubernetes is what i call

254
00:08:15,199 --> 00:08:17,680
distributed remote command execution as

255
00:08:17,680 --> 00:08:19,840
a service by designing that's what it

256
00:08:19,840 --> 00:08:22,800
does containers are just linux processes

257
00:08:22,800 --> 00:08:24,800
um and kubernetes lets you run these

258
00:08:24,800 --> 00:08:26,639
things on lots and lots of machines or

259
00:08:26,639 --> 00:08:27,840
what's running a process well it's

260
00:08:27,840 --> 00:08:30,000
command execution so what is kubernetes

261
00:08:30,000 --> 00:08:31,440
well it's distributed remote command

262
00:08:31,440 --> 00:08:33,599
execution as a service what that means

263
00:08:33,599 --> 00:08:34,958
is if we have a problem with the

264
00:08:34,958 --> 00:08:36,240
security of our clusters it's going to

265
00:08:36,240 --> 00:08:38,000
be quite serious because it's going to

266
00:08:38,000 --> 00:08:39,599
give attackers a lot of power if they

267
00:08:39,599 --> 00:08:41,679
can misuse our kubernetes clusters so

268
00:08:41,679 --> 00:08:44,080
the security of them is important

269
00:08:44,080 --> 00:08:45,680
and then the other thing that that's

270
00:08:45,680 --> 00:08:46,720
important in terms of getting the

271
00:08:46,720 --> 00:08:48,320
architecture right and in terms of doing

272
00:08:48,320 --> 00:08:50,160
this kind of work to to create a secure

273
00:08:50,160 --> 00:08:52,720
platform for our developers is that

274
00:08:52,720 --> 00:08:55,200
kubernetes security can be complex what

275
00:08:55,200 --> 00:08:56,240
you'll probably see as we go through

276
00:08:56,240 --> 00:08:58,640
this talk is there's a lot of as matt

277
00:08:58,640 --> 00:08:59,600
mentioned there's lots of different

278
00:08:59,600 --> 00:09:00,880
knobs and dials lots of different things

279
00:09:00,880 --> 00:09:03,200
you can change uh and knowing how all of

280
00:09:03,200 --> 00:09:05,920
the work is fundamentally fairly tricky

281
00:09:05,920 --> 00:09:07,519
so it's important to put thought into

282
00:09:07,519 --> 00:09:09,279
this early on

283
00:09:09,279 --> 00:09:10,240
now

284
00:09:10,240 --> 00:09:12,640
the title of the talk uh is making uh

285
00:09:12,640 --> 00:09:15,519
clusters secure and usable so where does

286
00:09:15,519 --> 00:09:18,000
usability come into this equation

287
00:09:18,000 --> 00:09:20,080
and and the answer that is uh this is

288
00:09:20,080 --> 00:09:22,160
abby duglan who actually just is now a

289
00:09:22,160 --> 00:09:24,399
board of elect member of osp uh this is

290
00:09:24,399 --> 00:09:26,480
abby's maximum of security which i kind

291
00:09:26,480 --> 00:09:28,720
of quote quite a lot security at the

292
00:09:28,720 --> 00:09:30,800
expense of usability comes at the

293
00:09:30,800 --> 00:09:33,360
expense of security and to me what that

294
00:09:33,360 --> 00:09:36,959
means is anytime i've seen um a security

295
00:09:36,959 --> 00:09:39,200
control that's not usable that users

296
00:09:39,200 --> 00:09:41,279
find very awkward or hard to use they'll

297
00:09:41,279 --> 00:09:43,440
bypass it simple as that if you think

298
00:09:43,440 --> 00:09:45,200
about how passwords work if we make

299
00:09:45,200 --> 00:09:47,360
passwords long complex don't let people

300
00:09:47,360 --> 00:09:48,480
write them down and make them change

301
00:09:48,480 --> 00:09:50,399
them every 30 days

302
00:09:50,399 --> 00:09:51,519
they're going to do something some way

303
00:09:51,519 --> 00:09:52,800
around that they will make a sequence

304
00:09:52,800 --> 00:09:54,240
password you know password one password

305
00:09:54,240 --> 00:09:55,600
two password three they'll do something

306
00:09:55,600 --> 00:09:57,440
to bypass it because that's unusable

307
00:09:57,440 --> 00:09:59,440
security users don't like doing that so

308
00:09:59,440 --> 00:10:01,360
they will find a way past it so it's

309
00:10:01,360 --> 00:10:03,040
important when we're doing security

310
00:10:03,040 --> 00:10:05,279
architecture for kubernetes that we try

311
00:10:05,279 --> 00:10:07,920
and make things usable for our users in

312
00:10:07,920 --> 00:10:09,279
this case our users are application

313
00:10:09,279 --> 00:10:11,600
developers developers who want to deploy

314
00:10:11,600 --> 00:10:13,360
their applications to kubernetes

315
00:10:13,360 --> 00:10:14,560
clusters we've got to try and make their

316
00:10:14,560 --> 00:10:17,040
life make it easy for it to be secure

317
00:10:17,040 --> 00:10:18,720
rather than making it hard otherwise

318
00:10:18,720 --> 00:10:20,480
people will just bypass the security

319
00:10:20,480 --> 00:10:22,079
teams

320
00:10:22,079 --> 00:10:22,959
so

321
00:10:22,959 --> 00:10:25,120
let's talk about um some challenges

322
00:10:25,120 --> 00:10:26,320
let's talk about some of the things that

323
00:10:26,320 --> 00:10:27,600
can go wrong

324
00:10:27,600 --> 00:10:29,680
so the first challenge we could have is

325
00:10:29,680 --> 00:10:31,519
our clusters being exposed

326
00:10:31,519 --> 00:10:32,800
on the internet

327
00:10:32,800 --> 00:10:33,839
um

328
00:10:33,839 --> 00:10:35,920
this is a

329
00:10:35,920 --> 00:10:38,240
there's a search engine called census uh

330
00:10:38,240 --> 00:10:39,360
which kind of looks like showdown

331
00:10:39,360 --> 00:10:40,800
showdowns may be more popular but i've

332
00:10:40,800 --> 00:10:41,920
used sensors for this because it's got a

333
00:10:41,920 --> 00:10:43,600
lot of good information

334
00:10:43,600 --> 00:10:44,560
one of the things that's quite

335
00:10:44,560 --> 00:10:46,399
interesting to note about kubernetes api

336
00:10:46,399 --> 00:10:48,720
servers is they have distinctive

337
00:10:48,720 --> 00:10:51,200
information in their tls certificates

338
00:10:51,200 --> 00:10:52,880
you can always spot a community's api

339
00:10:52,880 --> 00:10:54,800
server based on the names the

340
00:10:54,800 --> 00:10:57,360
certificate has got so what what this is

341
00:10:57,360 --> 00:11:00,000
little search which looks for the name

342
00:11:00,000 --> 00:11:03,000
kubernetes.default.service.cluster.local

343
00:11:03,279 --> 00:11:05,360
pretty much every api server of every

344
00:11:05,360 --> 00:11:07,440
disk kubernetes distribution will have

345
00:11:07,440 --> 00:11:09,760
that name in the api server certificate

346
00:11:09,760 --> 00:11:11,839
and if we look at those online we can

347
00:11:11,839 --> 00:11:15,200
see there's about 900 000 clusters

348
00:11:15,200 --> 00:11:17,680
online directly on the internet now this

349
00:11:17,680 --> 00:11:18,399
is

350
00:11:18,399 --> 00:11:21,040
not great from a security standpoint um

351
00:11:21,040 --> 00:11:22,240
because

352
00:11:22,240 --> 00:11:24,800
one misconfiguration in that api server

353
00:11:24,800 --> 00:11:26,480
and an attacker has got access to that

354
00:11:26,480 --> 00:11:28,720
remote command execution as a service

355
00:11:28,720 --> 00:11:30,480
right this is a dangerous thing in

356
00:11:30,480 --> 00:11:32,160
kubernetes if you get it wrong people

357
00:11:32,160 --> 00:11:33,839
can do bad things to your clusters

358
00:11:33,839 --> 00:11:36,720
there's 900 000 clusters on the internet

359
00:11:36,720 --> 00:11:37,760
um

360
00:11:37,760 --> 00:11:39,760
so that's not great in addition to that

361
00:11:39,760 --> 00:11:42,000
there's actually i think about 100 000

362
00:11:42,000 --> 00:11:43,839
cubelets directly on the internet and

363
00:11:43,839 --> 00:11:46,399
about 5 000 xcd servers not quite as

364
00:11:46,399 --> 00:11:47,360
common

365
00:11:47,360 --> 00:11:48,560
but still

366
00:11:48,560 --> 00:11:50,320
all of those three are quite dangerous

367
00:11:50,320 --> 00:11:52,079
services it's it's something i've

368
00:11:52,079 --> 00:11:53,279
noticed there's quite a lot of people

369
00:11:53,279 --> 00:11:54,800
putting them directly on the internet

370
00:11:54,800 --> 00:11:56,240
and these are spread amongst the major

371
00:11:56,240 --> 00:11:57,360
cloud providers it's not just one

372
00:11:57,360 --> 00:11:59,200
provider who's got this kind of thing

373
00:11:59,200 --> 00:12:00,160
going on

374
00:12:00,160 --> 00:12:01,680
so that's a challenge for us you know

375
00:12:01,680 --> 00:12:02,720
we're

376
00:12:02,720 --> 00:12:04,480
we've got this default position where

377
00:12:04,480 --> 00:12:06,399
these clusters are exposed

378
00:12:06,399 --> 00:12:07,839
and the other thing that that's worth

379
00:12:07,839 --> 00:12:10,560
knowing about is um

380
00:12:10,560 --> 00:12:11,680
we can actually prove that this

381
00:12:11,680 --> 00:12:13,519
misconfiguration we have problems with

382
00:12:13,519 --> 00:12:14,480
this

383
00:12:14,480 --> 00:12:16,639
because senses rather interestingly to

384
00:12:16,639 --> 00:12:18,079
my mind anyway

385
00:12:18,079 --> 00:12:20,079
they actually will query kubernetes

386
00:12:20,079 --> 00:12:22,720
clusters that are online and they will

387
00:12:22,720 --> 00:12:24,800
try and unauthenticate it use an

388
00:12:24,800 --> 00:12:26,800
authenticated query to pull back all the

389
00:12:26,800 --> 00:12:28,240
information at the cluster which only

390
00:12:28,240 --> 00:12:29,519
works if the cluster has been horribly

391
00:12:29,519 --> 00:12:31,600
misconfigured and there are whilst

392
00:12:31,600 --> 00:12:32,800
there's not a huge number at the point

393
00:12:32,800 --> 00:12:34,279
in time i did this query there's still

394
00:12:34,279 --> 00:12:37,600
674 clusters sitting there

395
00:12:37,600 --> 00:12:39,519
allowing remote users to you know

396
00:12:39,519 --> 00:12:41,040
essentially list pods and that probably

397
00:12:41,040 --> 00:12:42,320
means you can do anything you want on

398
00:12:42,320 --> 00:12:43,519
those clusters

399
00:12:43,519 --> 00:12:45,279
so we've got a problem with exposed

400
00:12:45,279 --> 00:12:48,000
clusters i think

401
00:12:48,800 --> 00:12:50,480
how do we solve that problem

402
00:12:50,480 --> 00:12:52,720
well i'm going to focus on the main 3d

403
00:12:52,720 --> 00:12:55,519
cloud kubernetes clusters gke google's

404
00:12:55,519 --> 00:12:58,560
eks's amazon aks azure

405
00:12:58,560 --> 00:13:01,200
in all three cases the default position

406
00:13:01,200 --> 00:13:03,040
for an api server created with their

407
00:13:03,040 --> 00:13:05,200
managed clusters is to put it online on

408
00:13:05,200 --> 00:13:07,040
the internet so if you don't do any

409
00:13:07,040 --> 00:13:08,800
changes in configuration it's going to

410
00:13:08,800 --> 00:13:10,320
be there on the internet and it's going

411
00:13:10,320 --> 00:13:12,000
to be a situation where one series

412
00:13:12,000 --> 00:13:13,839
configuration error or one set of lost

413
00:13:13,839 --> 00:13:16,800
credentials could end a very bad day

414
00:13:16,800 --> 00:13:18,480
however all three of these clusters

415
00:13:18,480 --> 00:13:20,160
provide the alternative options of

416
00:13:20,160 --> 00:13:22,000
having private clusters don't put on the

417
00:13:22,000 --> 00:13:24,399
internet at all or having authorized

418
00:13:24,399 --> 00:13:26,480
networks so restricting where you can do

419
00:13:26,480 --> 00:13:28,160
that so the first

420
00:13:28,160 --> 00:13:29,600
recommendation first thing i would say

421
00:13:29,600 --> 00:13:31,200
is definitely worth doing

422
00:13:31,200 --> 00:13:33,120
go through all your kubernetes clusters

423
00:13:33,120 --> 00:13:35,279
and make sure that they are using those

424
00:13:35,279 --> 00:13:36,959
options make sure that private clusters

425
00:13:36,959 --> 00:13:38,480
is enabled make sure that authorized

426
00:13:38,480 --> 00:13:40,480
networks if you can't make it private at

427
00:13:40,480 --> 00:13:42,160
the very least restrict it to

428
00:13:42,160 --> 00:13:44,639
whitelisted authorized networks for

429
00:13:44,639 --> 00:13:46,720
access i don't really think there's a

430
00:13:46,720 --> 00:13:48,160
huge number of reasons why you want to

431
00:13:48,160 --> 00:13:49,199
procurement he's directly on the

432
00:13:49,199 --> 00:13:50,800
internet i've heard some people talk

433
00:13:50,800 --> 00:13:52,800
about sas monitoring services but with

434
00:13:52,800 --> 00:13:54,240
that you should be able to do source ip

435
00:13:54,240 --> 00:13:56,399
address filtering something to stop this

436
00:13:56,399 --> 00:13:58,320
because otherwise things can go kind of

437
00:13:58,320 --> 00:14:00,720
fairly badly wrong

438
00:14:00,720 --> 00:14:01,760
so

439
00:14:01,760 --> 00:14:04,079
that's our first challenge our second

440
00:14:04,079 --> 00:14:05,040
challenge

441
00:14:05,040 --> 00:14:06,959
is outdated clusters

442
00:14:06,959 --> 00:14:09,040
so needless to say kubernetes like

443
00:14:09,040 --> 00:14:10,959
everything else has cves you have to

444
00:14:10,959 --> 00:14:13,120
keep it patched and the other thing

445
00:14:13,120 --> 00:14:15,360
about kubernetes is it has quite a short

446
00:14:15,360 --> 00:14:16,880
support life cycle

447
00:14:16,880 --> 00:14:18,560
until this year the support lifecycle is

448
00:14:18,560 --> 00:14:20,320
nine months so if your cluster was more

449
00:14:20,320 --> 00:14:21,680
than nine months old it's going to be

450
00:14:21,680 --> 00:14:23,839
not getting security fixes anymore

451
00:14:23,839 --> 00:14:26,160
uh that's extended to 12 months and some

452
00:14:26,160 --> 00:14:27,519
kubernetes distributions will give you a

453
00:14:27,519 --> 00:14:29,680
bit of extra time maybe as much as two

454
00:14:29,680 --> 00:14:31,760
years but that's the absolute max and

455
00:14:31,760 --> 00:14:33,120
you can't always rely on it some of them

456
00:14:33,120 --> 00:14:34,639
are quite sure

457
00:14:34,639 --> 00:14:35,839
so

458
00:14:35,839 --> 00:14:37,360
the question is do we have a problem

459
00:14:37,360 --> 00:14:38,800
with outdated clusters do we have a

460
00:14:38,800 --> 00:14:40,240
problem with people not patching their

461
00:14:40,240 --> 00:14:42,000
clusters not maintaining them

462
00:14:42,000 --> 00:14:42,880
well we can actually find the

463
00:14:42,880 --> 00:14:45,279
information information out again thanks

464
00:14:45,279 --> 00:14:47,920
to a handy census query um

465
00:14:47,920 --> 00:14:49,600
there's an interesting configuration

466
00:14:49,600 --> 00:14:51,120
choice which a lot of these cloud

467
00:14:51,120 --> 00:14:52,720
distributions make

468
00:14:52,720 --> 00:14:55,040
which is they will expose certain

469
00:14:55,040 --> 00:14:57,199
endpoints on your api server without

470
00:14:57,199 --> 00:14:58,959
authentication by default it's a

471
00:14:58,959 --> 00:15:01,440
kubernetes default and some of the major

472
00:15:01,440 --> 00:15:04,000
cloud providers will keep that default

473
00:15:04,000 --> 00:15:05,760
what that means is you can actually

474
00:15:05,760 --> 00:15:08,639
query every a lot of kubernetes clusters

475
00:15:08,639 --> 00:15:10,240
and you can say give me the version

476
00:15:10,240 --> 00:15:11,360
information that's running so you can

477
00:15:11,360 --> 00:15:13,199
find out whether they're updated or not

478
00:15:13,199 --> 00:15:15,839
and it comes back with about 79 000 so

479
00:15:15,839 --> 00:15:17,120
just under 10

480
00:15:17,120 --> 00:15:19,839
of clusters have this option enabled

481
00:15:19,839 --> 00:15:20,720
and so

482
00:15:20,720 --> 00:15:23,199
we can assess the problem and it turns

483
00:15:23,199 --> 00:15:25,040
out at the moment so considering that

484
00:15:25,040 --> 00:15:26,880
kubernetes is a relatively young piece

485
00:15:26,880 --> 00:15:28,880
of software a lot of people haven't been

486
00:15:28,880 --> 00:15:30,320
using it very long

487
00:15:30,320 --> 00:15:33,040
we're already at 25

488
00:15:33,040 --> 00:15:35,519
of clusters running unsupported versions

489
00:15:35,519 --> 00:15:37,600
so that means if there is an oday

490
00:15:37,600 --> 00:15:40,959
tomorrow in the kubernetes api server 25

491
00:15:40,959 --> 00:15:44,240
of clusters um are going to need to uh

492
00:15:44,240 --> 00:15:46,560
um upgrade like three versions four

493
00:15:46,560 --> 00:15:49,040
versions plus at once which is likely to

494
00:15:49,040 --> 00:15:50,800
be pretty disruptive that's the kind of

495
00:15:50,800 --> 00:15:53,120
thing that you know your workloads are

496
00:15:53,120 --> 00:15:55,040
the kubernetes api can change quite a

497
00:15:55,040 --> 00:15:57,040
bit from version to version

498
00:15:57,040 --> 00:15:58,720
multi doing four version upgrades at

499
00:15:58,720 --> 00:16:00,639
once is quite likely to cause problems

500
00:16:00,639 --> 00:16:02,160
so we can say that there's a problem

501
00:16:02,160 --> 00:16:04,320
here already with clusters essentially

502
00:16:04,320 --> 00:16:06,560
falling out of support

503
00:16:06,560 --> 00:16:09,199
so how do you fix that this is my my

504
00:16:09,199 --> 00:16:10,880
feeling for how the best way to fix this

505
00:16:10,880 --> 00:16:14,800
is um clusters should be cattle not pets

506
00:16:14,800 --> 00:16:17,120
we've kind of heard this idea that that

507
00:16:17,120 --> 00:16:19,199
applications um should be caffeine not

508
00:16:19,199 --> 00:16:20,399
pets so i should be able to redeploy

509
00:16:20,399 --> 00:16:21,600
applications i shouldn't have pet

510
00:16:21,600 --> 00:16:23,839
applications i can't reboot

511
00:16:23,839 --> 00:16:25,680
clusters should be the same way so what

512
00:16:25,680 --> 00:16:26,959
i mean here is you should be able to

513
00:16:26,959 --> 00:16:30,000
automatically reprovision your clusters

514
00:16:30,000 --> 00:16:31,920
um to roll them out and you should be

515
00:16:31,920 --> 00:16:33,680
regularly practicing

516
00:16:33,680 --> 00:16:35,600
re-rolling out a cluster migrating the

517
00:16:35,600 --> 00:16:37,440
applications from one to another and i'm

518
00:16:37,440 --> 00:16:39,519
draining down the old cluster

519
00:16:39,519 --> 00:16:41,440
because you need to be able to keep

520
00:16:41,440 --> 00:16:42,800
doing this on a regular basis it needs

521
00:16:42,800 --> 00:16:45,440
to be part of your practice um and the

522
00:16:45,440 --> 00:16:47,040
best way to do that is not to have pet

523
00:16:47,040 --> 00:16:48,959
clusters not to have clusters where

524
00:16:48,959 --> 00:16:50,160
you're you know you don't know what's

525
00:16:50,160 --> 00:16:51,839
going to happen if they get you know

526
00:16:51,839 --> 00:16:53,600
something in if they crashed what would

527
00:16:53,600 --> 00:16:55,360
happen you need your clusters to be

528
00:16:55,360 --> 00:16:57,199
catholic to be redeployable it's an

529
00:16:57,199 --> 00:16:58,880
extension of the infrastructure's code

530
00:16:58,880 --> 00:17:00,959
idea um is to have this kind of

531
00:17:00,959 --> 00:17:02,240
situation where you can you can

532
00:17:02,240 --> 00:17:04,400
essentially recover automatically

533
00:17:04,400 --> 00:17:05,919
and i think that one

534
00:17:05,919 --> 00:17:07,359
that will help because once you've got

535
00:17:07,359 --> 00:17:09,359
that position it's not scary anymore to

536
00:17:09,359 --> 00:17:11,199
do those upgrades and you can keep

537
00:17:11,199 --> 00:17:12,959
rolling up with each latest kubernetes

538
00:17:12,959 --> 00:17:14,319
version uh which is going to be a lot

539
00:17:14,319 --> 00:17:16,559
smoother pass than waiting you know

540
00:17:16,559 --> 00:17:17,839
sometimes without support and then

541
00:17:17,839 --> 00:17:21,760
waiting for like a bad cve to come along

542
00:17:22,720 --> 00:17:24,799
so the next challenge we've talked about

543
00:17:24,799 --> 00:17:26,720
um our exposed clusters and our our

544
00:17:26,720 --> 00:17:29,280
outdated clusters the next challenge is

545
00:17:29,280 --> 00:17:31,440
the first of the things that um

546
00:17:31,440 --> 00:17:33,520
kubernetes the kubernetes project has

547
00:17:33,520 --> 00:17:35,679
made conscious decisions not to handle

548
00:17:35,679 --> 00:17:37,440
certain security problems

549
00:17:37,440 --> 00:17:38,640
they've decided to make those

550
00:17:38,640 --> 00:17:40,160
essentially a third-party issue they

551
00:17:40,160 --> 00:17:41,600
don't want to like concern themselves

552
00:17:41,600 --> 00:17:43,200
with it and the first one really is

553
00:17:43,200 --> 00:17:45,840
authentication

554
00:17:45,840 --> 00:17:47,440
kubernetes provides some inbuilt

555
00:17:47,440 --> 00:17:48,799
authentication options it is a

556
00:17:48,799 --> 00:17:50,480
multi-user platform

557
00:17:50,480 --> 00:17:52,720
but none of the inbuilt authentication

558
00:17:52,720 --> 00:17:54,720
options are suitable for user

559
00:17:54,720 --> 00:17:55,760
authentication not suitable for

560
00:17:55,760 --> 00:17:58,000
production use so none of them make

561
00:17:58,000 --> 00:18:01,200
sense or should be used in in production

562
00:18:01,200 --> 00:18:04,080
the first one is uh token authentication

563
00:18:04,080 --> 00:18:06,160
that has that stores things in clear

564
00:18:06,160 --> 00:18:08,400
text on the api server

565
00:18:08,400 --> 00:18:10,559
and you have to reboot the api server to

566
00:18:10,559 --> 00:18:12,720
make a change to your credentials

567
00:18:12,720 --> 00:18:14,880
fairly obvious that that isn't suitable

568
00:18:14,880 --> 00:18:16,240
for production

569
00:18:16,240 --> 00:18:18,640
um the second one that is far more

570
00:18:18,640 --> 00:18:21,039
commonly used is client certificate

571
00:18:21,039 --> 00:18:23,120
authentication so you can use client

572
00:18:23,120 --> 00:18:24,559
search now this sounds great right

573
00:18:24,559 --> 00:18:25,840
clients are we use client their

574
00:18:25,840 --> 00:18:27,360
authentication quite a bit

575
00:18:27,360 --> 00:18:29,200
but in kubernetes it should never be

576
00:18:29,200 --> 00:18:31,039
used for user authentication and i'll

577
00:18:31,039 --> 00:18:32,640
explain why

578
00:18:32,640 --> 00:18:35,200
there's no certificate revocation you

579
00:18:35,200 --> 00:18:36,960
cannot revoke a kubernetes client

580
00:18:36,960 --> 00:18:38,000
certificate

581
00:18:38,000 --> 00:18:40,640
if you you if you lose a certificate

582
00:18:40,640 --> 00:18:42,720
then um the only way to mitigate it is

583
00:18:42,720 --> 00:18:44,240
either destroy the entire cluster and

584
00:18:44,240 --> 00:18:45,360
rebuild it

585
00:18:45,360 --> 00:18:48,799
or re or essentially rotate the keys of

586
00:18:48,799 --> 00:18:50,320
the entire certificate authority which

587
00:18:50,320 --> 00:18:52,080
is almost as bad frankly as we rolling

588
00:18:52,080 --> 00:18:53,679
the entire cluster you might as well we

589
00:18:53,679 --> 00:18:55,360
roll the cluster at that point so plant

590
00:18:55,360 --> 00:18:57,120
certificates should never be used and

591
00:18:57,120 --> 00:18:59,280
these are the two inbuilt options

592
00:18:59,280 --> 00:19:01,200
um and that that lack of revocation is a

593
00:19:01,200 --> 00:19:02,640
long-standing issue in kubernetes

594
00:19:02,640 --> 00:19:04,400
there's a github issue which you can

595
00:19:04,400 --> 00:19:07,760
look at it's about five years old now

596
00:19:07,919 --> 00:19:09,120
the other thing to note about client

597
00:19:09,120 --> 00:19:12,080
certificate authentication is it is

598
00:19:12,080 --> 00:19:13,280
you know what i'm saying don't use it

599
00:19:13,280 --> 00:19:14,720
for ordinary users

600
00:19:14,720 --> 00:19:17,360
you will often find um that you get kind

601
00:19:17,360 --> 00:19:19,039
of like a first user so when you start

602
00:19:19,039 --> 00:19:20,640
your cluster up you install the software

603
00:19:20,640 --> 00:19:22,320
or you install the service you'll get

604
00:19:22,320 --> 00:19:25,039
given a first user uh and that first

605
00:19:25,039 --> 00:19:28,559
user um will be a cluster admin user

606
00:19:28,559 --> 00:19:30,240
because you need like a like an initial

607
00:19:30,240 --> 00:19:33,919
user but it uses the hard-coded system

608
00:19:33,919 --> 00:19:36,400
masters group in a lot of cases

609
00:19:36,400 --> 00:19:39,039
and when i say hard-coded what i mean is

610
00:19:39,039 --> 00:19:41,760
that the rights of this group are coded

611
00:19:41,760 --> 00:19:44,080
into the a humanities api server source

612
00:19:44,080 --> 00:19:47,039
code so even if you remove every rbac

613
00:19:47,039 --> 00:19:48,960
rule out of your cluster this will still

614
00:19:48,960 --> 00:19:50,160
work and that's kind of by design

615
00:19:50,160 --> 00:19:52,000
because it's a break glass user the

616
00:19:52,000 --> 00:19:53,520
problem i've seen with this is that

617
00:19:53,520 --> 00:19:56,080
quite a lot of administrators will use

618
00:19:56,080 --> 00:19:58,080
these certificates for day-to-day admin

619
00:19:58,080 --> 00:19:59,760
which is obviously not a great idea

620
00:19:59,760 --> 00:20:01,440
especially if you are if you can't ever

621
00:20:01,440 --> 00:20:03,280
revoke the certificate and your cluster

622
00:20:03,280 --> 00:20:05,280
is on the internet because that's not a

623
00:20:05,280 --> 00:20:06,720
great situation

624
00:20:06,720 --> 00:20:08,080
um

625
00:20:08,080 --> 00:20:10,240
and yeah in general the the the you see

626
00:20:10,240 --> 00:20:11,679
this quite a bit in different

627
00:20:11,679 --> 00:20:13,200
distributions it's not uncommon to see

628
00:20:13,200 --> 00:20:14,960
system masters but in from a security

629
00:20:14,960 --> 00:20:15,919
standpoint

630
00:20:15,919 --> 00:20:17,280
best to avoid it

631
00:20:17,280 --> 00:20:18,559
to give you a very quick demo just to

632
00:20:18,559 --> 00:20:19,840
kind of show what that looks like and

633
00:20:19,840 --> 00:20:22,559
also to make sure my demos are working

634
00:20:22,559 --> 00:20:25,440
let's uh let's run this

635
00:20:25,440 --> 00:20:27,440
what i'm going to do is just

636
00:20:27,440 --> 00:20:29,840
the way that the kubernetes certificates

637
00:20:29,840 --> 00:20:31,840
work is they're encoded in a file called

638
00:20:31,840 --> 00:20:33,360
cubeconfig which is just your

639
00:20:33,360 --> 00:20:35,440
credentials uh but we can extract that

640
00:20:35,440 --> 00:20:37,360
out and have a little look at it so this

641
00:20:37,360 --> 00:20:39,200
command here i'm just going to extract

642
00:20:39,200 --> 00:20:40,559
my config

643
00:20:40,559 --> 00:20:41,919
and i'm going to get the client

644
00:20:41,919 --> 00:20:43,919
certificate data i'm going to pipe it

645
00:20:43,919 --> 00:20:45,600
through base64

646
00:20:45,600 --> 00:20:46,880
and then i'm just going to decode it

647
00:20:46,880 --> 00:20:48,880
through ssl and i'm copy-pasting that

648
00:20:48,880 --> 00:20:50,240
because i would have made titles if i

649
00:20:50,240 --> 00:20:52,960
tried to type it out

650
00:20:52,960 --> 00:20:54,640
and what you can see is this is the way

651
00:20:54,640 --> 00:20:57,200
acura's client statement works here this

652
00:20:57,200 --> 00:20:59,440
is my default user so the way they work

653
00:20:59,440 --> 00:21:01,039
is they put the group information in the

654
00:21:01,039 --> 00:21:02,799
o field of certificate which is a bit

655
00:21:02,799 --> 00:21:04,640
weird but that's how it works and then

656
00:21:04,640 --> 00:21:06,240
the username is this and as you can see

657
00:21:06,240 --> 00:21:08,320
that's a generic user so this is a

658
00:21:08,320 --> 00:21:11,520
generic user with a hard-coded group um

659
00:21:11,520 --> 00:21:13,919
and you can't revoke it and the lifetime

660
00:21:13,919 --> 00:21:16,320
is a year that's pretty typical about a

661
00:21:16,320 --> 00:21:18,400
year so in general managing those client

662
00:21:18,400 --> 00:21:20,159
certificates is kind of an important

663
00:21:20,159 --> 00:21:21,600
point you don't want to let lose those

664
00:21:21,600 --> 00:21:22,640
you want to put them away somewhere

665
00:21:22,640 --> 00:21:24,320
safely as soon as the cluster is created

666
00:21:24,320 --> 00:21:27,600
and never use them um

667
00:21:27,600 --> 00:21:29,360
so that's what i'm talking about so how

668
00:21:29,360 --> 00:21:30,880
do we fix this that's like a technical

669
00:21:30,880 --> 00:21:32,320
thing which is don't use the the client

670
00:21:32,320 --> 00:21:33,760
certificates but what's the use what do

671
00:21:33,760 --> 00:21:35,440
we what do we do for user authentication

672
00:21:35,440 --> 00:21:36,559
then

673
00:21:36,559 --> 00:21:38,480
and the answer essentially has to be

674
00:21:38,480 --> 00:21:39,840
that when you're architecting your

675
00:21:39,840 --> 00:21:41,600
kubernetes platforms you need to account

676
00:21:41,600 --> 00:21:43,360
for there to be some kind of external

677
00:21:43,360 --> 00:21:45,120
authentication service

678
00:21:45,120 --> 00:21:46,960
if you're using cloud managed kubernetes

679
00:21:46,960 --> 00:21:50,159
so gke aks eks whatever else cloud i am

680
00:21:50,159 --> 00:21:51,520
is almost inevitably the best way to

681
00:21:51,520 --> 00:21:52,960
handle this

682
00:21:52,960 --> 00:21:55,039
all of those clouds all those kubernetes

683
00:21:55,039 --> 00:21:57,360
cluster types will merge in with cloud i

684
00:21:57,360 --> 00:22:00,240
am so you can use your existing as uad

685
00:22:00,240 --> 00:22:01,520
or your

686
00:22:01,520 --> 00:22:04,799
gcp users or your aws users and do it

687
00:22:04,799 --> 00:22:06,000
that way so that way my definitely my

688
00:22:06,000 --> 00:22:07,440
recommendation is available because the

689
00:22:07,440 --> 00:22:09,280
integration is fairly easy

690
00:22:09,280 --> 00:22:11,600
if you're using unmanaged kubernetes or

691
00:22:11,600 --> 00:22:13,520
you're doing on-premises then you'll

692
00:22:13,520 --> 00:22:16,000
need um another piece of software

693
00:22:16,000 --> 00:22:18,240
uh so this would typically be something

694
00:22:18,240 --> 00:22:21,280
like key cloak or dex and those are oidc

695
00:22:21,280 --> 00:22:23,600
servers that sit between your cluster

696
00:22:23,600 --> 00:22:25,679
and an ldap store something like active

697
00:22:25,679 --> 00:22:26,880
directory

698
00:22:26,880 --> 00:22:28,880
um and basically when you're

699
00:22:28,880 --> 00:22:30,159
architecting your platforms when you're

700
00:22:30,159 --> 00:22:31,840
looking at how you use kubernetes you

701
00:22:31,840 --> 00:22:33,280
need to factor in the fact that you're

702
00:22:33,280 --> 00:22:34,559
going to need to deploy something here

703
00:22:34,559 --> 00:22:37,039
because i said you don't want to leave

704
00:22:37,039 --> 00:22:39,280
um groups of developers without any good

705
00:22:39,280 --> 00:22:40,799
authentication option because they'll

706
00:22:40,799 --> 00:22:42,720
start using client certificates

707
00:22:42,720 --> 00:22:44,000
and client certificates are not a good

708
00:22:44,000 --> 00:22:46,320
idea

709
00:22:49,440 --> 00:22:51,520
so so that's authentication

710
00:22:51,520 --> 00:22:53,600
the next thing

711
00:22:53,600 --> 00:22:55,280
to consider about or to think about when

712
00:22:55,280 --> 00:22:56,799
you're architecting your kubernetes

713
00:22:56,799 --> 00:22:59,039
environments uh is the complexity of our

714
00:22:59,039 --> 00:22:59,840
back

715
00:22:59,840 --> 00:23:01,120
so

716
00:23:01,120 --> 00:23:03,600
kubernetes for authorization uses a an

717
00:23:03,600 --> 00:23:05,360
inbuilt thing called our role based

718
00:23:05,360 --> 00:23:06,640
access control

719
00:23:06,640 --> 00:23:07,760
um

720
00:23:07,760 --> 00:23:09,360
it's got watercolor a lot of things in

721
00:23:09,360 --> 00:23:11,039
kubernetes are very flexible that's one

722
00:23:11,039 --> 00:23:12,880
of its kind of like um good points and

723
00:23:12,880 --> 00:23:14,080
bad points right it's good points

724
00:23:14,080 --> 00:23:15,039
because you can do lots of different

725
00:23:15,039 --> 00:23:17,440
things with kubernetes bad points are

726
00:23:17,440 --> 00:23:19,600
that the complexity and you know shows

727
00:23:19,600 --> 00:23:21,120
itself with the flexibility the more

728
00:23:21,120 --> 00:23:22,320
flexible it is the more different things

729
00:23:22,320 --> 00:23:24,080
you can do the harder it can be to work

730
00:23:24,080 --> 00:23:26,080
out exactly what's going on

731
00:23:26,080 --> 00:23:28,080
and our back is no exception uh

732
00:23:28,080 --> 00:23:29,440
kubernetes are back there's quite a lot

733
00:23:29,440 --> 00:23:31,600
of privilege escalation options there's

734
00:23:31,600 --> 00:23:33,600
things you can grant which don't sound

735
00:23:33,600 --> 00:23:35,840
sensitive but turn out to be quite

736
00:23:35,840 --> 00:23:37,840
sensitive there was a good example of

737
00:23:37,840 --> 00:23:42,039
this last year uh cv2028554

738
00:23:42,480 --> 00:23:44,240
and that was a vulnerability where any

739
00:23:44,240 --> 00:23:46,159
user who could create a service object

740
00:23:46,159 --> 00:23:47,919
which is quite common type of object in

741
00:23:47,919 --> 00:23:50,480
kubernetes could intercept traffic

742
00:23:50,480 --> 00:23:53,279
from other users of the cluster

743
00:23:53,279 --> 00:23:54,640
due to the way that the service object

744
00:23:54,640 --> 00:23:56,159
was set up so you might not realize that

745
00:23:56,159 --> 00:23:58,080
when you're creating these things

746
00:23:58,080 --> 00:23:59,679
an important point about that cv is

747
00:23:59,679 --> 00:24:01,600
there is no patch you have to mitigate

748
00:24:01,600 --> 00:24:03,279
it and one of the mitigations is don't

749
00:24:03,279 --> 00:24:04,720
give people the right to create services

750
00:24:04,720 --> 00:24:06,640
unless you really need to

751
00:24:06,640 --> 00:24:08,400
um so there's lots of different of

752
00:24:08,400 --> 00:24:10,640
different kind of pieces of flexibility

753
00:24:10,640 --> 00:24:12,559
in our back in general

754
00:24:12,559 --> 00:24:14,559
um it's a tricky one to get right and

755
00:24:14,559 --> 00:24:16,400
i'm going to kind of demo one i'm just

756
00:24:16,400 --> 00:24:17,840
kind of showing this because this one's

757
00:24:17,840 --> 00:24:18,799
this one's one of these things that's

758
00:24:18,799 --> 00:24:20,799
kind of somewhat unintuitive and this is

759
00:24:20,799 --> 00:24:22,720
why i say it it's it's complex and

760
00:24:22,720 --> 00:24:24,159
something you probably want to try and

761
00:24:24,159 --> 00:24:25,840
avoid using too much

762
00:24:25,840 --> 00:24:28,400
so what i'm going to do for this

763
00:24:28,400 --> 00:24:31,200
what i've done here is i have got a user

764
00:24:31,200 --> 00:24:32,720
in this cluster

765
00:24:32,720 --> 00:24:35,279
uh called secret lister so we've got

766
00:24:35,279 --> 00:24:36,880
standard kubernetes cluster and this

767
00:24:36,880 --> 00:24:39,200
user if you look at what they can do so

768
00:24:39,200 --> 00:24:40,720
this kubernetes command just says

769
00:24:40,720 --> 00:24:44,000
cubecuttle and it says um can i list

770
00:24:44,000 --> 00:24:46,799
let's just list the rights of a user

771
00:24:46,799 --> 00:24:49,279
uh and down the bottom let me just enter

772
00:24:49,279 --> 00:24:51,360
so it pops up a little bit

773
00:24:51,360 --> 00:24:53,360
we can see that the only right i've

774
00:24:53,360 --> 00:24:55,200
really got here is i've got the right to

775
00:24:55,200 --> 00:24:58,480
do list secrets so this user all this

776
00:24:58,480 --> 00:25:00,720
user can do is list secrets these other

777
00:25:00,720 --> 00:25:02,240
things are just like things like being

778
00:25:02,240 --> 00:25:03,840
able to get the version endpoint but

779
00:25:03,840 --> 00:25:06,640
this user doesn't have any other rights

780
00:25:06,640 --> 00:25:08,799
so

781
00:25:08,799 --> 00:25:10,640
what i should be able to do is i should

782
00:25:10,640 --> 00:25:14,240
be able to list secrets

783
00:25:14,240 --> 00:25:16,400
that works so that's you think okay

784
00:25:16,400 --> 00:25:18,480
that's working as intended

785
00:25:18,480 --> 00:25:20,400
what i don't have is the right to get

786
00:25:20,400 --> 00:25:22,799
secrets so get is a different verb in

787
00:25:22,799 --> 00:25:25,520
kubernetes api so i should i can list

788
00:25:25,520 --> 00:25:27,039
them but i can't get them

789
00:25:27,039 --> 00:25:28,400
and we can prove that that works as

790
00:25:28,400 --> 00:25:29,679
expected

791
00:25:29,679 --> 00:25:31,039
by doing that

792
00:25:31,039 --> 00:25:33,279
and it says no go away

793
00:25:33,279 --> 00:25:35,520
this user cannot get the resource

794
00:25:35,520 --> 00:25:38,000
secrets in the api group

795
00:25:38,000 --> 00:25:39,120
default

796
00:25:39,120 --> 00:25:41,039
so so far our back sounds quite

797
00:25:41,039 --> 00:25:42,640
straightforward we've given someone the

798
00:25:42,640 --> 00:25:44,159
right to list secrets but we haven't

799
00:25:44,159 --> 00:25:46,240
given the right to get secrets

800
00:25:46,240 --> 00:25:48,080
okay sounds great

801
00:25:48,080 --> 00:25:49,440
what happens

802
00:25:49,440 --> 00:25:51,039
if i

803
00:25:51,039 --> 00:25:52,720
do that list command again so get all

804
00:25:52,720 --> 00:25:53,919
the secrets

805
00:25:53,919 --> 00:25:56,240
well i just tell it to output yaml data

806
00:25:56,240 --> 00:25:57,840
instead of outputting just like the

807
00:25:57,840 --> 00:26:00,080
standard text data

808
00:26:00,080 --> 00:26:02,080
the answer is i get the contents of all

809
00:26:02,080 --> 00:26:03,200
the secrets

810
00:26:03,200 --> 00:26:06,080
because whilst list sounds like list

811
00:26:06,080 --> 00:26:07,760
the way the kubernetes api works is it

812
00:26:07,760 --> 00:26:09,279
actually returns the contents of all the

813
00:26:09,279 --> 00:26:11,440
secrets when you do a list operation

814
00:26:11,440 --> 00:26:13,919
it's just usually you can't see it

815
00:26:13,919 --> 00:26:16,400
this is kind of an example of the kind

816
00:26:16,400 --> 00:26:18,159
of things that can cause you problems in

817
00:26:18,159 --> 00:26:20,400
our back and this is one of many kind of

818
00:26:20,400 --> 00:26:22,640
little niche edge cases that is tricky

819
00:26:22,640 --> 00:26:24,640
to know about

820
00:26:24,640 --> 00:26:26,080
that particular one can trip you up

821
00:26:26,080 --> 00:26:26,960
because you think you're giving someone

822
00:26:26,960 --> 00:26:28,080
the right to list secrets you don't

823
00:26:28,080 --> 00:26:29,120
realize you're actually giving them the

824
00:26:29,120 --> 00:26:30,799
right to get all secrets and with those

825
00:26:30,799 --> 00:26:32,240
secrets typically you can escalate

826
00:26:32,240 --> 00:26:35,200
privileges quite easily

827
00:26:36,960 --> 00:26:38,640
so what's the answer to this

828
00:26:38,640 --> 00:26:40,320
my general answer to this in terms of

829
00:26:40,320 --> 00:26:42,080
architecture architecting a secure

830
00:26:42,080 --> 00:26:44,799
kubernetes platform is try to not give

831
00:26:44,799 --> 00:26:46,320
developers direct access to the

832
00:26:46,320 --> 00:26:48,880
kubernetes api where possible and that

833
00:26:48,880 --> 00:26:49,919
kind of helps mitigate the

834
00:26:49,919 --> 00:26:51,679
authentication issue as well

835
00:26:51,679 --> 00:26:53,279
the fewer people you've got with direct

836
00:26:53,279 --> 00:26:55,360
access the less of a problem you're

837
00:26:55,360 --> 00:26:57,360
going to have with these two places

838
00:26:57,360 --> 00:26:58,799
i've got the idea here you would use

839
00:26:58,799 --> 00:27:00,480
something like maybe like jenkins so you

840
00:27:00,480 --> 00:27:02,240
push get developers to push things via

841
00:27:02,240 --> 00:27:04,720
ci cd and then the cicd tool deploys to

842
00:27:04,720 --> 00:27:06,400
the cluster that could also be something

843
00:27:06,400 --> 00:27:08,000
like a platform as a service you know

844
00:27:08,000 --> 00:27:09,440
where you give the users a web portal

845
00:27:09,440 --> 00:27:11,360
they log into the web portal and they

846
00:27:11,360 --> 00:27:12,799
have like a form to fill in or something

847
00:27:12,799 --> 00:27:13,919
like that that's kind of thing that

848
00:27:13,919 --> 00:27:16,159
openshift does actually where developer

849
00:27:16,159 --> 00:27:18,240
can deploy without directly needing to

850
00:27:18,240 --> 00:27:20,480
play with the with the api server

851
00:27:20,480 --> 00:27:22,240
um this obviously moves the problem a

852
00:27:22,240 --> 00:27:23,919
little bit not to the other thing you've

853
00:27:23,919 --> 00:27:26,240
used so you're moving to a ci cd system

854
00:27:26,240 --> 00:27:27,919
but because kubernetes are back is

855
00:27:27,919 --> 00:27:29,919
complex and easy to make mistakes and

856
00:27:29,919 --> 00:27:32,080
because kubernetes authentication

857
00:27:32,080 --> 00:27:34,559
if you you know if you don't want to add

858
00:27:34,559 --> 00:27:36,159
on an external service it's kind of hard

859
00:27:36,159 --> 00:27:37,120
to do

860
00:27:37,120 --> 00:27:38,480
i personally think this is a better way

861
00:27:38,480 --> 00:27:40,000
of doing it try and keep developer

862
00:27:40,000 --> 00:27:42,399
groups away from directly hitting the

863
00:27:42,399 --> 00:27:45,520
kubernetes api server

864
00:27:45,679 --> 00:27:47,679
so what's our next challenge

865
00:27:47,679 --> 00:27:51,360
um our next challenge is flat networks

866
00:27:51,360 --> 00:27:54,240
when you deploy a kubernetes cluster um

867
00:27:54,240 --> 00:27:57,039
you may have 10 100 even a thousand

868
00:27:57,039 --> 00:27:59,360
applications running in your cluster

869
00:27:59,360 --> 00:28:01,200
by default every cubanity distribution

870
00:28:01,200 --> 00:28:03,679
pretty much will put them on a big flat

871
00:28:03,679 --> 00:28:07,200
lab so any container can talk to any

872
00:28:07,200 --> 00:28:11,039
other container at any time they will

873
00:28:13,120 --> 00:28:14,640
and this has got a couple of problems

874
00:28:14,640 --> 00:28:15,919
one obviously it means the attack

875
00:28:15,919 --> 00:28:17,600
surface for a compromised container

876
00:28:17,600 --> 00:28:19,600
attack so if an attacker accesses one

877
00:28:19,600 --> 00:28:22,240
container they can go anywhere they want

878
00:28:22,240 --> 00:28:23,600
the other problem is something i noticed

879
00:28:23,600 --> 00:28:25,360
from my pen testing days

880
00:28:25,360 --> 00:28:26,559
which is that quite a lot of the

881
00:28:26,559 --> 00:28:28,559
software you might deploy from the

882
00:28:28,559 --> 00:28:30,320
supporting software monitoring logging

883
00:28:30,320 --> 00:28:32,000
tools things like that

884
00:28:32,000 --> 00:28:34,240
they often assume that the container

885
00:28:34,240 --> 00:28:35,600
network is trusted

886
00:28:35,600 --> 00:28:37,120
so they will make this assumption that

887
00:28:37,120 --> 00:28:38,640
hey i'm on this kind of private network

888
00:28:38,640 --> 00:28:40,640
this container network um i don't need

889
00:28:40,640 --> 00:28:42,240
to worry about security

890
00:28:42,240 --> 00:28:43,760
and there's been many examples of that

891
00:28:43,760 --> 00:28:45,440
there was a good example for prometheus

892
00:28:45,440 --> 00:28:47,360
which is a common container monitoring

893
00:28:47,360 --> 00:28:49,679
tool our kubernetes monitoring tool

894
00:28:49,679 --> 00:28:51,039
and their documentation definitely the

895
00:28:51,039 --> 00:28:52,399
last time i looked at it said that if

896
00:28:52,399 --> 00:28:54,159
you wanted authentication well that was

897
00:28:54,159 --> 00:28:55,919
their problem they weren't going to do

898
00:28:55,919 --> 00:28:57,200
authentication they didn't feel the need

899
00:28:57,200 --> 00:28:58,640
for it you need an external

900
00:28:58,640 --> 00:29:00,480
authentication service and that's not an

901
00:29:00,480 --> 00:29:02,559
uncommon attitude there are quite people

902
00:29:02,559 --> 00:29:04,000
who think well you know i'm my

903
00:29:04,000 --> 00:29:05,679
software's deployed inside the cluster

904
00:29:05,679 --> 00:29:07,039
container network i don't need to worry

905
00:29:07,039 --> 00:29:08,480
about security

906
00:29:08,480 --> 00:29:10,320
so having these flat networks is a bad

907
00:29:10,320 --> 00:29:12,320
idea

908
00:29:12,320 --> 00:29:13,360
um

909
00:29:13,360 --> 00:29:14,240
and there's another reason why it's a

910
00:29:14,240 --> 00:29:16,320
bad idea which we'll do in the demo just

911
00:29:16,320 --> 00:29:18,240
to explain how this works

912
00:29:18,240 --> 00:29:19,840
so

913
00:29:19,840 --> 00:29:22,240
kubernetes um has this concept of

914
00:29:22,240 --> 00:29:24,000
service discovery right you're meant to

915
00:29:24,000 --> 00:29:25,200
be able to

916
00:29:25,200 --> 00:29:26,320
you know it's more partly it's one of

917
00:29:26,320 --> 00:29:27,840
these features

918
00:29:27,840 --> 00:29:29,279
so

919
00:29:29,279 --> 00:29:31,120
if i was let's just say for the sake if

920
00:29:31,120 --> 00:29:33,440
i remember a little container here uh

921
00:29:33,440 --> 00:29:35,679
let's say i was an attacker and i had

922
00:29:35,679 --> 00:29:38,080
compromised one pod one container one

923
00:29:38,080 --> 00:29:40,159
application running on a cluster and i

924
00:29:40,159 --> 00:29:41,600
got a shell

925
00:29:41,600 --> 00:29:42,799
which is what i'm going to do now i'm

926
00:29:42,799 --> 00:29:44,159
just going to run essentially a

927
00:29:44,159 --> 00:29:46,000
container into this cluster

928
00:29:46,000 --> 00:29:47,600
um

929
00:29:47,600 --> 00:29:49,120
and once it's running it should give me

930
00:29:49,120 --> 00:29:51,279
a shell and that's simply emulating what

931
00:29:51,279 --> 00:29:52,799
a compromised container attack would

932
00:29:52,799 --> 00:29:55,840
look like

933
00:29:59,440 --> 00:30:00,799
that's where i found out the docker hub

934
00:30:00,799 --> 00:30:02,960
has crashed and my container pool's not

935
00:30:02,960 --> 00:30:04,559
going to work no it did okay we're

936
00:30:04,559 --> 00:30:06,960
working excellent so i've got access to

937
00:30:06,960 --> 00:30:09,440
one to one container

938
00:30:09,440 --> 00:30:12,240
my first step uh as an attacker is

939
00:30:12,240 --> 00:30:14,640
probably going to be um what else do i

940
00:30:14,640 --> 00:30:16,480
find now that could be quite noisy

941
00:30:16,480 --> 00:30:18,240
attackers might think oh i don't really

942
00:30:18,240 --> 00:30:20,000
want to port scan every single port on

943
00:30:20,000 --> 00:30:21,520
every single ip because you know it's

944
00:30:21,520 --> 00:30:23,039
going to be noticed

945
00:30:23,039 --> 00:30:25,520
the good thing about kubernetes is

946
00:30:25,520 --> 00:30:27,200
you don't actually need to do that

947
00:30:27,200 --> 00:30:28,720
you just do this

948
00:30:28,720 --> 00:30:30,960
uh what i'm doing here is i'm using dig

949
00:30:30,960 --> 00:30:33,039
dns lookup command

950
00:30:33,039 --> 00:30:34,640
and i'm just going to ask it for server

951
00:30:34,640 --> 00:30:36,559
records i'm not going to give it the

952
00:30:36,559 --> 00:30:39,760
name any any service cluster local

953
00:30:39,760 --> 00:30:42,080
and it happily tells me about every

954
00:30:42,080 --> 00:30:44,159
single service running in this cluster

955
00:30:44,159 --> 00:30:45,919
it tells me what the service name is

956
00:30:45,919 --> 00:30:48,000
tells me what the namespace is and it

957
00:30:48,000 --> 00:30:49,440
tells me what port it's running on as

958
00:30:49,440 --> 00:30:52,640
well so it's very easy um to get access

959
00:30:52,640 --> 00:30:54,240
on this flat network to find out what

960
00:30:54,240 --> 00:30:56,559
services are running uh and then to try

961
00:30:56,559 --> 00:30:58,240
and attack them

962
00:30:58,240 --> 00:30:59,120
so

963
00:30:59,120 --> 00:31:00,320
you can actually you know once you've

964
00:31:00,320 --> 00:31:02,240
got that information as an attacker then

965
00:31:02,240 --> 00:31:03,360
you can just say right i'm going to hit

966
00:31:03,360 --> 00:31:06,080
480 on this sockshop app

967
00:31:06,080 --> 00:31:08,559
uh and i've got nmap and away you go

968
00:31:08,559 --> 00:31:09,760
so this is why i'm saying in terms of

969
00:31:09,760 --> 00:31:11,600
the flat network it's very good to get

970
00:31:11,600 --> 00:31:13,519
rid of that because it's very easy to

971
00:31:13,519 --> 00:31:15,600
this kind of service discovery and to

972
00:31:15,600 --> 00:31:17,519
make attackers lives easier now from a

973
00:31:17,519 --> 00:31:19,279
security architecture point of view

974
00:31:19,279 --> 00:31:20,159
obviously we're trying to make our

975
00:31:20,159 --> 00:31:21,679
attacker's life harder trying to make it

976
00:31:21,679 --> 00:31:23,679
more difficult for them to you know get

977
00:31:23,679 --> 00:31:25,200
a foothold and then leverage and break

978
00:31:25,200 --> 00:31:26,080
out

979
00:31:26,080 --> 00:31:28,399
um that's actually an easy i think

980
00:31:28,399 --> 00:31:30,000
actually when i was researching these

981
00:31:30,000 --> 00:31:31,600
slides i realized that you could take

982
00:31:31,600 --> 00:31:32,880
that output and make it a bit more

983
00:31:32,880 --> 00:31:34,480
useful so i wrote

984
00:31:34,480 --> 00:31:35,840
that

985
00:31:35,840 --> 00:31:37,679
and that just creates an nmap command

986
00:31:37,679 --> 00:31:39,760
that will scan every single service in

987
00:31:39,760 --> 00:31:41,279
the cluster on all the ports they are

988
00:31:41,279 --> 00:31:42,640
listing on

989
00:31:42,640 --> 00:31:44,240
so very useful it's a very useful

990
00:31:44,240 --> 00:31:45,840
feature but it's also unfortunately

991
00:31:45,840 --> 00:31:46,960
quite good for attackers because it

992
00:31:46,960 --> 00:31:48,159
gives them all that information they

993
00:31:48,159 --> 00:31:49,840
want you know in a really easy to get to

994
00:31:49,840 --> 00:31:52,240
format

995
00:31:53,440 --> 00:31:55,360
so how do we fix this how do we as from

996
00:31:55,360 --> 00:31:56,799
a security architecture standpoint how

997
00:31:56,799 --> 00:31:58,559
do we resolve this problem and the

998
00:31:58,559 --> 00:32:01,519
answer's got to be default deny networks

999
00:32:01,519 --> 00:32:03,519
um kubernetes ships with a feature

1000
00:32:03,519 --> 00:32:05,679
called network policy and network policy

1001
00:32:05,679 --> 00:32:08,799
can be used to um to provide a kind of a

1002
00:32:08,799 --> 00:32:10,480
default deny situation and default

1003
00:32:10,480 --> 00:32:11,679
device setup

1004
00:32:11,679 --> 00:32:14,080
it does mean that we need to work with

1005
00:32:14,080 --> 00:32:15,679
developers this is one where i've not

1006
00:32:15,679 --> 00:32:18,000
seen a great solution for automating it

1007
00:32:18,000 --> 00:32:19,519
but basically early in the development

1008
00:32:19,519 --> 00:32:21,519
lifecycle a question that needs to be

1009
00:32:21,519 --> 00:32:22,559
asked if you're going to be deploying to

1010
00:32:22,559 --> 00:32:24,559
kubernetes is what other things do you

1011
00:32:24,559 --> 00:32:26,399
need to talk to if you're writing a web

1012
00:32:26,399 --> 00:32:28,240
app what databases do you need to talk

1013
00:32:28,240 --> 00:32:30,559
to what other apis do you need to talk

1014
00:32:30,559 --> 00:32:32,159
to and those policies need to be

1015
00:32:32,159 --> 00:32:33,519
developed early in the development

1016
00:32:33,519 --> 00:32:35,360
lifecycle what you don't want to get

1017
00:32:35,360 --> 00:32:37,200
into is security teams you know

1018
00:32:37,200 --> 00:32:38,880
retrofitting network policies after

1019
00:32:38,880 --> 00:32:41,679
things have gone into production um so

1020
00:32:41,679 --> 00:32:43,600
that i think that that one is is kind of

1021
00:32:43,600 --> 00:32:45,120
necessary to kind of look at from that

1022
00:32:45,120 --> 00:32:46,320
perspective it's one that's really an

1023
00:32:46,320 --> 00:32:47,519
education one there's not great

1024
00:32:47,519 --> 00:32:49,440
technical fix there i don't think

1025
00:32:49,440 --> 00:32:51,279
uh the other thing you you worth knowing

1026
00:32:51,279 --> 00:32:52,320
about though is that there are some

1027
00:32:52,320 --> 00:32:54,000
better ways of doing network policy

1028
00:32:54,000 --> 00:32:55,919
kubernetes based facilities are quite

1029
00:32:55,919 --> 00:32:58,559
basic um but if you're using certain cni

1030
00:32:58,559 --> 00:33:00,080
certain network providers like psyllium

1031
00:33:00,080 --> 00:33:01,600
or calico they've got additional

1032
00:33:01,600 --> 00:33:04,879
features that you can add on as well

1033
00:33:06,080 --> 00:33:08,480
so um we've talked about networking

1034
00:33:08,480 --> 00:33:09,679
breakouts right we've talked about the

1035
00:33:09,679 --> 00:33:11,679
fact that a network uh this big flat

1036
00:33:11,679 --> 00:33:13,279
network is good for attackers but not

1037
00:33:13,279 --> 00:33:15,039
great for defenders and that we need to

1038
00:33:15,039 --> 00:33:16,159
change it

1039
00:33:16,159 --> 00:33:17,600
the other thing we need to worry about

1040
00:33:17,600 --> 00:33:21,919
is break out to the underlying nodes um

1041
00:33:21,919 --> 00:33:24,559
kubernetes runs docker containers

1042
00:33:24,559 --> 00:33:27,760
uh docker containers um fundamentally

1043
00:33:27,760 --> 00:33:31,519
just processes and docker has um

1044
00:33:31,519 --> 00:33:32,799
what i've always liked to call a

1045
00:33:32,799 --> 00:33:34,720
flexible security model

1046
00:33:34,720 --> 00:33:36,559
so docker was a tool that came out the

1047
00:33:36,559 --> 00:33:39,279
development world and it um it also

1048
00:33:39,279 --> 00:33:41,360
assumes that you know um if you're an

1049
00:33:41,360 --> 00:33:42,880
electron docker command you can remove

1050
00:33:42,880 --> 00:33:44,720
all the security all the isolation that

1051
00:33:44,720 --> 00:33:45,840
it provides

1052
00:33:45,840 --> 00:33:47,519
kubernetes essentially builds on top of

1053
00:33:47,519 --> 00:33:48,559
that

1054
00:33:48,559 --> 00:33:50,799
and and by default if you don't have any

1055
00:33:50,799 --> 00:33:52,640
additional security in your cluster

1056
00:33:52,640 --> 00:33:54,080
kubernetes kind of assumes the same

1057
00:33:54,080 --> 00:33:56,000
thing it says you know if you have the

1058
00:33:56,000 --> 00:33:57,600
right to create containers in the

1059
00:33:57,600 --> 00:33:59,600
cluster um you can just remove all the

1060
00:33:59,600 --> 00:34:02,559
isolation um and that's not again that's

1061
00:34:02,559 --> 00:34:03,519
that's not good from a security

1062
00:34:03,519 --> 00:34:04,640
standpoint so it's something we need to

1063
00:34:04,640 --> 00:34:06,480
account for because the default posture

1064
00:34:06,480 --> 00:34:08,239
pretty much every cluster if you don't

1065
00:34:08,239 --> 00:34:10,320
add on additional security controls is

1066
00:34:10,320 --> 00:34:12,079
going to be that anyone who can create

1067
00:34:12,079 --> 00:34:13,599
containers can get access to the

1068
00:34:13,599 --> 00:34:15,679
underlying nodes the only one i think is

1069
00:34:15,679 --> 00:34:17,679
the exception to that will be openshift

1070
00:34:17,679 --> 00:34:19,040
which i think ships with default

1071
00:34:19,040 --> 00:34:20,320
policies that will block it but most of

1072
00:34:20,320 --> 00:34:24,079
the breast carets clusters don't do that

1073
00:34:24,079 --> 00:34:26,320
ah so though so what does that look like

1074
00:34:26,320 --> 00:34:27,760
right i've said you know we can break

1075
00:34:27,760 --> 00:34:29,280
that down the line node is it some super

1076
00:34:29,280 --> 00:34:31,199
complex hacky procedure or is actually

1077
00:34:31,199 --> 00:34:35,119
quite easy so we should demonstrate

1078
00:34:35,119 --> 00:34:37,599
so to do that i want to change let me

1079
00:34:37,599 --> 00:34:40,159
change clusters

1080
00:34:40,159 --> 00:34:42,320
so i've got a little blank cluster here

1081
00:34:42,320 --> 00:34:43,679
uh there's nothing running in it it's a

1082
00:34:43,679 --> 00:34:46,639
fairly basic kind of single cluster

1083
00:34:46,639 --> 00:34:47,679
and what i'm going to do is i'm going to

1084
00:34:47,679 --> 00:34:49,280
create a manifest so i'm just going to

1085
00:34:49,280 --> 00:34:51,679
create a manifest inside the cluster

1086
00:34:51,679 --> 00:34:53,918
um

1087
00:34:54,079 --> 00:34:55,359
and it's decided did this to me the

1088
00:34:55,359 --> 00:34:56,399
other day hang on let me i'm going to

1089
00:34:56,399 --> 00:34:57,760
retype this particular command because

1090
00:34:57,760 --> 00:34:59,680
for some reason i can't spot it doesn't

1091
00:34:59,680 --> 00:35:01,359
want to do

1092
00:35:01,359 --> 00:35:04,240
when i retype it

1093
00:35:04,400 --> 00:35:07,839
i'm going to retype the whole command

1094
00:35:14,160 --> 00:35:16,400
hey and it works right there we go

1095
00:35:16,400 --> 00:35:18,480
um so what i've just done is i've just

1096
00:35:18,480 --> 00:35:21,359
created a pod inside the cluster very

1097
00:35:21,359 --> 00:35:22,720
basic pod and we can have a little look

1098
00:35:22,720 --> 00:35:24,320
and see what it looks like while it's

1099
00:35:24,320 --> 00:35:27,200
while it's spinning up

1100
00:35:28,320 --> 00:35:30,320
okay uh this is a very basic pod

1101
00:35:30,320 --> 00:35:33,119
manifest um and what we can see is we're

1102
00:35:33,119 --> 00:35:35,280
we are doing certain things however so

1103
00:35:35,280 --> 00:35:36,960
it's just a pod anyone can create pods

1104
00:35:36,960 --> 00:35:38,160
can use this

1105
00:35:38,160 --> 00:35:41,359
uh it's going to give us host ipc host

1106
00:35:41,359 --> 00:35:43,119
pitt and host network so these are all

1107
00:35:43,119 --> 00:35:44,640
docker security layers that we're

1108
00:35:44,640 --> 00:35:45,920
basically just saying hey could you turn

1109
00:35:45,920 --> 00:35:47,520
off isolation please i'd like to see the

1110
00:35:47,520 --> 00:35:48,960
host resources

1111
00:35:48,960 --> 00:35:50,960
and it's also going to give us privilege

1112
00:35:50,960 --> 00:35:53,440
true privilege essentially is i don't

1113
00:35:53,440 --> 00:35:55,040
want any security can you please remove

1114
00:35:55,040 --> 00:35:55,920
it all

1115
00:35:55,920 --> 00:35:58,000
uh um but but kubernetes will let you

1116
00:35:58,000 --> 00:35:59,520
set that because you know you might want

1117
00:35:59,520 --> 00:36:00,240
to

1118
00:36:00,240 --> 00:36:01,839
and if you haven't told it not to it's

1119
00:36:01,839 --> 00:36:04,720
going to let it work so

1120
00:36:04,720 --> 00:36:06,240
whilst i was talking hopefully my port

1121
00:36:06,240 --> 00:36:07,920
has been created yeah we've got that

1122
00:36:07,920 --> 00:36:09,920
running

1123
00:36:09,920 --> 00:36:14,480
and what we can do now is we can just do

1124
00:36:15,680 --> 00:36:17,520
this command here and what this command

1125
00:36:17,520 --> 00:36:19,040
here is basically saying is going to

1126
00:36:19,040 --> 00:36:20,960
execute a command inside a running

1127
00:36:20,960 --> 00:36:23,119
container now an important thing to note

1128
00:36:23,119 --> 00:36:24,160
something which i think can trigger

1129
00:36:24,160 --> 00:36:26,240
people love is i could be anywhere in

1130
00:36:26,240 --> 00:36:28,079
the world right my client could be in

1131
00:36:28,079 --> 00:36:29,839
one place by servers and in the other

1132
00:36:29,839 --> 00:36:31,280
side of the world and this will work

1133
00:36:31,280 --> 00:36:33,359
just fine to get command execution on a

1134
00:36:33,359 --> 00:36:35,119
kubernetes cluster you don't need ssh

1135
00:36:35,119 --> 00:36:36,320
you don't need anything else you just

1136
00:36:36,320 --> 00:36:38,079
need kubernetes api

1137
00:36:38,079 --> 00:36:40,400
um because we'll show you before i run

1138
00:36:40,400 --> 00:36:42,960
this command i am the root user but i'm

1139
00:36:42,960 --> 00:36:44,640
on my workstation i'm on the sapling

1140
00:36:44,640 --> 00:36:46,400
which is my the name of this little vm

1141
00:36:46,400 --> 00:36:47,520
i'm running in

1142
00:36:47,520 --> 00:36:48,960
once i hit enter

1143
00:36:48,960 --> 00:36:51,440
i'm now the root user on the cluster

1144
00:36:51,440 --> 00:36:54,480
control plane right that simple run the

1145
00:36:54,480 --> 00:36:56,720
pod execute the command tribute slash

1146
00:36:56,720 --> 00:36:59,200
host and away you go and i'm suddenly uh

1147
00:36:59,200 --> 00:37:01,119
i'm root on site inside the cluster and

1148
00:37:01,119 --> 00:37:04,800
i i'm real root so i can go into

1149
00:37:04,800 --> 00:37:07,440
etc kubernetes pki we're all the really

1150
00:37:07,440 --> 00:37:09,920
sensitive files live i might get this

1151
00:37:09,920 --> 00:37:11,920
here this is the certificate authority

1152
00:37:11,920 --> 00:37:14,240
private key for this cluster with access

1153
00:37:14,240 --> 00:37:16,240
to this file i can create new cluster

1154
00:37:16,240 --> 00:37:17,680
admin users

1155
00:37:17,680 --> 00:37:20,400
and it lasts for about five years

1156
00:37:20,400 --> 00:37:22,320
so this is a backdoor into the cluster

1157
00:37:22,320 --> 00:37:24,079
if you get access to those files and by

1158
00:37:24,079 --> 00:37:26,079
default anyone who create pods can get

1159
00:37:26,079 --> 00:37:28,320
access to those files um because

1160
00:37:28,320 --> 00:37:31,440
kubernetes lets them do it

1161
00:37:33,119 --> 00:37:35,200
so that's not great the interesting

1162
00:37:35,200 --> 00:37:36,240
thing is you know obviously that wasn't

1163
00:37:36,240 --> 00:37:37,680
super elite that wasn't some amazing

1164
00:37:37,680 --> 00:37:39,760
hacking technique but in recent versions

1165
00:37:39,760 --> 00:37:42,400
of kubernetes has got even easier

1166
00:37:42,400 --> 00:37:44,079
because kubernetes has a great feature

1167
00:37:44,079 --> 00:37:46,480
called cube cattle debugger

1168
00:37:46,480 --> 00:37:49,680
um cube cattle debug basically uh um you

1169
00:37:49,680 --> 00:37:51,760
just tell it what node you want to debug

1170
00:37:51,760 --> 00:37:52,960
and you tell it what image you want to

1171
00:37:52,960 --> 00:37:54,480
use i'm just using a blank busy box

1172
00:37:54,480 --> 00:37:56,640
image

1173
00:37:56,640 --> 00:37:59,680
and it says great and what it does uh if

1174
00:37:59,680 --> 00:38:01,680
i type in the command true

1175
00:38:01,680 --> 00:38:03,200
slash host

1176
00:38:03,200 --> 00:38:05,119
it does the exact same thing my manifest

1177
00:38:05,119 --> 00:38:07,200
did this official this is now a piece of

1178
00:38:07,200 --> 00:38:09,200
official kubernetes functionality if you

1179
00:38:09,200 --> 00:38:10,560
want to get root access to a cluster

1180
00:38:10,560 --> 00:38:13,119
node you can just debug the node uh and

1181
00:38:13,119 --> 00:38:14,960
if people got the rights to create pods

1182
00:38:14,960 --> 00:38:16,400
uh and there's no additional security

1183
00:38:16,400 --> 00:38:18,160
controls in place this will work just

1184
00:38:18,160 --> 00:38:20,399
fine

1185
00:38:21,200 --> 00:38:22,400
so

1186
00:38:22,400 --> 00:38:23,599
that doesn't sound great not something

1187
00:38:23,599 --> 00:38:25,760
we want to have if your security doing

1188
00:38:25,760 --> 00:38:27,119
security architecture for kubernetes

1189
00:38:27,119 --> 00:38:28,800
clusters you need to block this how do

1190
00:38:28,800 --> 00:38:31,760
we do that the answer is mission control

1191
00:38:31,760 --> 00:38:33,280
um in

1192
00:38:33,280 --> 00:38:36,520
uh well optimal kubernetes

1193
00:38:36,520 --> 00:38:38,079
1.21

1194
00:38:38,079 --> 00:38:40,560
um you there was a feature official is a

1195
00:38:40,560 --> 00:38:42,400
feature but it's deprecated now called

1196
00:38:42,400 --> 00:38:44,720
pod security policy and port security

1197
00:38:44,720 --> 00:38:46,480
policy was basically designed to block

1198
00:38:46,480 --> 00:38:48,560
exactly that it was a thing that you

1199
00:38:48,560 --> 00:38:50,800
could use to restrict groups of users

1200
00:38:50,800 --> 00:38:52,560
and say you can't do privileged

1201
00:38:52,560 --> 00:38:54,400
containers you can't do host network

1202
00:38:54,400 --> 00:38:55,520
containers

1203
00:38:55,520 --> 00:38:56,880
however the kubernetes project has

1204
00:38:56,880 --> 00:38:58,720
deprecated that they basically said it

1205
00:38:58,720 --> 00:39:00,079
was a bit of an awkward feature to use

1206
00:39:00,079 --> 00:39:01,599
so it's been deprecated and it's going

1207
00:39:01,599 --> 00:39:03,280
to be removed in like a version or two's

1208
00:39:03,280 --> 00:39:04,240
time

1209
00:39:04,240 --> 00:39:05,760
there's going to be a replacement in

1210
00:39:05,760 --> 00:39:07,680
tree so within the kubernetes project

1211
00:39:07,680 --> 00:39:08,880
but it's very

1212
00:39:08,880 --> 00:39:10,400
basic by design it's not not designed

1213
00:39:10,400 --> 00:39:12,560
for complex use cases probably won't do

1214
00:39:12,560 --> 00:39:14,400
for any complex use cases so what you

1215
00:39:14,400 --> 00:39:16,160
need to do is look outside to the

1216
00:39:16,160 --> 00:39:18,320
external world and say uh what else can

1217
00:39:18,320 --> 00:39:21,119
i get here to add in if you've got

1218
00:39:21,119 --> 00:39:22,720
a commercial container security solution

1219
00:39:22,720 --> 00:39:24,640
they will do admission control or they

1220
00:39:24,640 --> 00:39:25,760
definitely should

1221
00:39:25,760 --> 00:39:27,760
in the open source world we've got um

1222
00:39:27,760 --> 00:39:30,800
opera gatekeeper we've got kyverno

1223
00:39:30,800 --> 00:39:32,640
we've got js policy

1224
00:39:32,640 --> 00:39:34,800
and we have got cube warden

1225
00:39:34,800 --> 00:39:36,160
um

1226
00:39:36,160 --> 00:39:38,560
each of these got its own strengths uh

1227
00:39:38,560 --> 00:39:40,160
the two biggest ones are upper

1228
00:39:40,160 --> 00:39:41,440
gatekeeper

1229
00:39:41,440 --> 00:39:43,680
this is a generic policy engine which

1230
00:39:43,680 --> 00:39:46,079
happens to cover kubernetes um it does

1231
00:39:46,079 --> 00:39:47,839
lots of other things as well so if

1232
00:39:47,839 --> 00:39:49,040
you're looking for a generic policy

1233
00:39:49,040 --> 00:39:50,240
engine you're looking for something

1234
00:39:50,240 --> 00:39:51,520
which can you know essentially do

1235
00:39:51,520 --> 00:39:53,040
security policy work across many

1236
00:39:53,040 --> 00:39:54,400
different services

1237
00:39:54,400 --> 00:39:55,920
oppa is a great look great great place

1238
00:39:55,920 --> 00:39:56,880
to look

1239
00:39:56,880 --> 00:40:00,400
kyverno is focused purely on kubernetes

1240
00:40:00,400 --> 00:40:03,440
so it just does kubernetes uh and its

1241
00:40:03,440 --> 00:40:04,960
rules are written in yaml which if

1242
00:40:04,960 --> 00:40:06,000
you're doing kubernetes you're probably

1243
00:40:06,000 --> 00:40:07,680
quite familiar with with we will be

1244
00:40:07,680 --> 00:40:09,040
quite familiar with writing yaml whether

1245
00:40:09,040 --> 00:40:10,880
you want to be or not so it's not a bad

1246
00:40:10,880 --> 00:40:12,240
option if you're looking to focus purely

1247
00:40:12,240 --> 00:40:14,880
on kubernetes um oppa uses its own

1248
00:40:14,880 --> 00:40:16,800
language called rego direct rules which

1249
00:40:16,800 --> 00:40:19,119
can be a bit tricky to get used to

1250
00:40:19,119 --> 00:40:20,720
uh two newer ones which come up this

1251
00:40:20,720 --> 00:40:23,520
year js policy you write your admission

1252
00:40:23,520 --> 00:40:25,520
control rules in javascript so if you're

1253
00:40:25,520 --> 00:40:26,720
a javascript housing you're super great

1254
00:40:26,720 --> 00:40:28,240
with javascript maybe that's a good

1255
00:40:28,240 --> 00:40:29,040
option

1256
00:40:29,040 --> 00:40:31,119
and then keyboarding uses wasm uses

1257
00:40:31,119 --> 00:40:32,720
webassembly so if you want to write

1258
00:40:32,720 --> 00:40:34,160
admission control rules you can use

1259
00:40:34,160 --> 00:40:35,440
webassembly you mean you use things like

1260
00:40:35,440 --> 00:40:37,839
trust um those are both kind of newer

1261
00:40:37,839 --> 00:40:40,240
projects though but the key point for

1262
00:40:40,240 --> 00:40:41,920
this is you do need something for

1263
00:40:41,920 --> 00:40:43,440
mission control it is something if

1264
00:40:43,440 --> 00:40:45,119
you're doing kubernetes in any kind of

1265
00:40:45,119 --> 00:40:46,640
large scale you need some kind of

1266
00:40:46,640 --> 00:40:49,280
external ambition control

1267
00:40:49,280 --> 00:40:50,640
so the last of the challenges that i

1268
00:40:50,640 --> 00:40:53,440
want to talk about

1269
00:40:53,440 --> 00:40:55,119
is multi-tenancy

1270
00:40:55,119 --> 00:40:56,800
um a lot of people the way to get the

1271
00:40:56,800 --> 00:40:59,200
best benefit from a financial standpoint

1272
00:40:59,200 --> 00:41:01,200
or from kubernetes clusters is to run

1273
00:41:01,200 --> 00:41:02,800
multi-tenancy right is to run ten a

1274
00:41:02,800 --> 00:41:04,079
hundred thousand applications that's

1275
00:41:04,079 --> 00:41:05,520
where you get the best bang for your

1276
00:41:05,520 --> 00:41:07,520
buck you're saving the most money

1277
00:41:07,520 --> 00:41:09,280
but kubernetes isn't really designed for

1278
00:41:09,280 --> 00:41:11,760
multi-tenancy um we've already seen some

1279
00:41:11,760 --> 00:41:12,720
ways in which is not designed for

1280
00:41:12,720 --> 00:41:15,359
multi-tenancy so dns is cluster-wide you

1281
00:41:15,359 --> 00:41:17,040
know that command i ran a couple of

1282
00:41:17,040 --> 00:41:19,040
slides ago which gave me a list of every

1283
00:41:19,040 --> 00:41:20,800
service running in the cluster is

1284
00:41:20,800 --> 00:41:22,720
because dns is cluster wide and it's

1285
00:41:22,720 --> 00:41:24,480
critical to the way kubernetes operates

1286
00:41:24,480 --> 00:41:26,960
so that's a first challenge

1287
00:41:26,960 --> 00:41:28,720
there's also some object types in

1288
00:41:28,720 --> 00:41:30,319
kubernetes that are clustered wide so

1289
00:41:30,319 --> 00:41:32,400
you can't give rights to us a group of

1290
00:41:32,400 --> 00:41:33,920
developers you know who may only have

1291
00:41:33,920 --> 00:41:36,079
one namespace you can't say to them hey

1292
00:41:36,079 --> 00:41:37,920
you can do this and the main one is

1293
00:41:37,920 --> 00:41:39,760
they're called crds custom resource

1294
00:41:39,760 --> 00:41:41,599
definitions those are cluster-wide as

1295
00:41:41,599 --> 00:41:44,000
well and that means that um if you know

1296
00:41:44,000 --> 00:41:45,200
if you've got one group of developers

1297
00:41:45,200 --> 00:41:47,119
who want to put in a third-party product

1298
00:41:47,119 --> 00:41:48,079
you can't have another group of

1299
00:41:48,079 --> 00:41:49,599
developers with a different version of

1300
00:41:49,599 --> 00:41:51,200
the same third-party product because it

1301
00:41:51,200 --> 00:41:53,280
uses the same crd you can't have two

1302
00:41:53,280 --> 00:41:55,040
different versions of the same crd in a

1303
00:41:55,040 --> 00:41:56,640
cluster at the same time because they're

1304
00:41:56,640 --> 00:41:58,480
cluster-wide so that's another area

1305
00:41:58,480 --> 00:42:00,480
where there's a problem

1306
00:42:00,480 --> 00:42:02,720
again uh network plugins often are not

1307
00:42:02,720 --> 00:42:04,720
designed for multi-tenancy so if you

1308
00:42:04,720 --> 00:42:06,000
think about you know maybe you wanted to

1309
00:42:06,000 --> 00:42:08,000
say oh i'll give these developers like

1310
00:42:08,000 --> 00:42:10,560
five machines uh and those are dedicated

1311
00:42:10,560 --> 00:42:11,839
to them so if they break out the

1312
00:42:11,839 --> 00:42:14,319
underlying node it's not a big problem

1313
00:42:14,319 --> 00:42:15,680
the challenge here is that network

1314
00:42:15,680 --> 00:42:16,720
plug-ins may not be designed for

1315
00:42:16,720 --> 00:42:19,040
multi-tenancy as well um so it might you

1316
00:42:19,040 --> 00:42:20,400
know you'll be able to get more access

1317
00:42:20,400 --> 00:42:21,920
that way

1318
00:42:21,920 --> 00:42:23,119
and

1319
00:42:23,119 --> 00:42:25,760
for the last demo of the day um i'm

1320
00:42:25,760 --> 00:42:27,200
gonna show you another place this is a

1321
00:42:27,200 --> 00:42:30,079
recent cv that came up uh which takes

1322
00:42:30,079 --> 00:42:32,400
advantage of ingress

1323
00:42:32,400 --> 00:42:35,200
and ingress is um essentially ingress is

1324
00:42:35,200 --> 00:42:36,800
like a reverse proxy

1325
00:42:36,800 --> 00:42:38,720
um so it's the way you get traffic into

1326
00:42:38,720 --> 00:42:41,040
a cluster if you use ingress

1327
00:42:41,040 --> 00:42:43,839
and the way this cv worked is that

1328
00:42:43,839 --> 00:42:45,280
there's an ingress controller called the

1329
00:42:45,280 --> 00:42:47,280
nginx in congress controller so

1330
00:42:47,280 --> 00:42:48,800
essentially it's engine x acting as a

1331
00:42:48,800 --> 00:42:50,640
reverse proxy to get traffic into your

1332
00:42:50,640 --> 00:42:51,760
cluster

1333
00:42:51,760 --> 00:42:54,720
uh let me get my screen up here and the

1334
00:42:54,720 --> 00:42:56,319
way it works is you have one of these

1335
00:42:56,319 --> 00:42:58,800
things and then an nginx ingress

1336
00:42:58,800 --> 00:43:00,319
controller that sits at the cluster

1337
00:43:00,319 --> 00:43:01,920
level this is something you would deploy

1338
00:43:01,920 --> 00:43:03,839
with your cluster and then what you do

1339
00:43:03,839 --> 00:43:06,560
is you give each individual uh set of

1340
00:43:06,560 --> 00:43:08,160
developers the right to create an

1341
00:43:08,160 --> 00:43:10,079
ingress object so they created ingress

1342
00:43:10,079 --> 00:43:11,680
objects which just in their name space

1343
00:43:11,680 --> 00:43:13,760
that makes use of the cluster-wide

1344
00:43:13,760 --> 00:43:17,119
controller the cve came because

1345
00:43:17,119 --> 00:43:18,240
basically

1346
00:43:18,240 --> 00:43:19,040
at a

1347
00:43:19,040 --> 00:43:20,720
namespace level you could rewrite the

1348
00:43:20,720 --> 00:43:23,200
configuration of the cluster-wide object

1349
00:43:23,200 --> 00:43:24,640
and it was able you were able to do

1350
00:43:24,640 --> 00:43:26,160
something like this which says he said

1351
00:43:26,160 --> 00:43:29,280
define a new website in my reverse proxy

1352
00:43:29,280 --> 00:43:31,119
and expose

1353
00:43:31,119 --> 00:43:32,880
the client the service account token

1354
00:43:32,880 --> 00:43:34,319
which is the credential that the

1355
00:43:34,319 --> 00:43:36,319
cluster-wide object used

1356
00:43:36,319 --> 00:43:37,760
so the cv was quite nasty because it

1357
00:43:37,760 --> 00:43:40,000
meant that anyone who had one namespace

1358
00:43:40,000 --> 00:43:42,000
access could have access to cluster

1359
00:43:42,000 --> 00:43:43,440
level resource

1360
00:43:43,440 --> 00:43:44,720
um

1361
00:43:44,720 --> 00:43:46,640
and if you did that it ended up looking

1362
00:43:46,640 --> 00:43:48,879
like

1363
00:43:52,319 --> 00:43:54,079
like that and essentially at that point

1364
00:43:54,079 --> 00:43:56,000
that there is the token that would give

1365
00:43:56,000 --> 00:43:58,079
you access to the same access as the

1366
00:43:58,079 --> 00:44:00,160
entire cluster level nginx ingress

1367
00:44:00,160 --> 00:44:01,760
resource had and as it happens that's

1368
00:44:01,760 --> 00:44:03,440
got get secrets at a cluster level so

1369
00:44:03,440 --> 00:44:05,920
it's going to be cluster admin

1370
00:44:05,920 --> 00:44:07,520
this is just to give you an example to

1371
00:44:07,520 --> 00:44:09,440
give you another example of the ones i

1372
00:44:09,440 --> 00:44:11,760
mentioned the the when when i'm saying

1373
00:44:11,760 --> 00:44:13,760
that it's not designed for multi-tenancy

1374
00:44:13,760 --> 00:44:15,200
use definitely if you're trying to do

1375
00:44:15,200 --> 00:44:18,240
hard multi-tenancy i would be

1376
00:44:18,240 --> 00:44:19,839
i would be very careful before i tried

1377
00:44:19,839 --> 00:44:21,520
to do hard multitasking with kubernetes

1378
00:44:21,520 --> 00:44:22,800
a lot of companies like to do it because

1379
00:44:22,800 --> 00:44:24,880
i said it is great for for saving money

1380
00:44:24,880 --> 00:44:26,880
but kubernetes fundamentally has quite a

1381
00:44:26,880 --> 00:44:28,480
lot of places where that's not been

1382
00:44:28,480 --> 00:44:31,040
designed for that to work

1383
00:44:31,040 --> 00:44:32,640
so um

1384
00:44:32,640 --> 00:44:34,880
cluster api is a solution to that

1385
00:44:34,880 --> 00:44:36,800
basically i think you've seen from a

1386
00:44:36,800 --> 00:44:39,040
couple things i've said i typically

1387
00:44:39,040 --> 00:44:40,480
regard the cluster as a security

1388
00:44:40,480 --> 00:44:42,560
boundary uh and so the best way to do

1389
00:44:42,560 --> 00:44:44,240
this is to give people each their own

1390
00:44:44,240 --> 00:44:46,800
cluster uh cluster api lets you create

1391
00:44:46,800 --> 00:44:48,880
clusters via the kubernetes api so you

1392
00:44:48,880 --> 00:44:50,079
can actually create its own clusters

1393
00:44:50,079 --> 00:44:52,319
like child clusters uh so that's quite a

1394
00:44:52,319 --> 00:44:54,079
good technique to deploy to look at

1395
00:44:54,079 --> 00:44:55,680
cluster api and say can i maybe you know

1396
00:44:55,680 --> 00:44:57,200
use this to automate the creation of

1397
00:44:57,200 --> 00:44:59,119
clusters giving each development or each

1398
00:44:59,119 --> 00:45:02,319
team uh their own cluster

1399
00:45:02,319 --> 00:45:04,640
so to bring it all together um what does

1400
00:45:04,640 --> 00:45:06,880
a secure kubernetes solution look like

1401
00:45:06,880 --> 00:45:08,800
it's just my opinion but this kind of

1402
00:45:08,800 --> 00:45:10,400
builds up on these challenges and how

1403
00:45:10,400 --> 00:45:12,960
you solve them

1404
00:45:12,960 --> 00:45:14,319
if you're architecting kubernetes

1405
00:45:14,319 --> 00:45:16,480
clusters you need to abstract the

1406
00:45:16,480 --> 00:45:18,400
underlying clusters from developers and

1407
00:45:18,400 --> 00:45:20,319
application owners

1408
00:45:20,319 --> 00:45:21,440
try not to give people that direct

1409
00:45:21,440 --> 00:45:23,440
access to kubernetes api

1410
00:45:23,440 --> 00:45:24,319
and

1411
00:45:24,319 --> 00:45:26,240
try and give the developers or groups of

1412
00:45:26,240 --> 00:45:27,920
development teams templates that

1413
00:45:27,920 --> 00:45:30,560
implement good practice so things like

1414
00:45:30,560 --> 00:45:33,359
starter network policies things like i'm

1415
00:45:33,359 --> 00:45:35,680
setting secured security options so that

1416
00:45:35,680 --> 00:45:37,520
you know your mandated policies don't

1417
00:45:37,520 --> 00:45:39,119
cause problems

1418
00:45:39,119 --> 00:45:41,520
are a good place to start

1419
00:45:41,520 --> 00:45:43,520
fully automatic clustered creation and

1420
00:45:43,520 --> 00:45:45,200
destruction this is getting easier

1421
00:45:45,200 --> 00:45:47,200
because cluster api hit version 1.0

1422
00:45:47,200 --> 00:45:48,240
recently

1423
00:45:48,240 --> 00:45:50,000
and so you've got a programmatic way to

1424
00:45:50,000 --> 00:45:51,920
create and destroy clusters

1425
00:45:51,920 --> 00:45:53,680
and combining that with infrastructures

1426
00:45:53,680 --> 00:45:55,280
code so finding it with with the way you

1427
00:45:55,280 --> 00:45:58,160
kind of create templates and yaml

1428
00:45:58,160 --> 00:46:00,319
can give you this facility to have fully

1429
00:46:00,319 --> 00:46:02,000
automated cluster and creation and

1430
00:46:02,000 --> 00:46:04,240
destruction

1431
00:46:04,240 --> 00:46:06,319
and then inbuilt security controls

1432
00:46:06,319 --> 00:46:07,599
when you're designing kubernetes

1433
00:46:07,599 --> 00:46:09,760
platforms for groups of developers it's

1434
00:46:09,760 --> 00:46:11,760
important to get these in place before

1435
00:46:11,760 --> 00:46:13,839
people start deploying applications so

1436
00:46:13,839 --> 00:46:15,520
having admission control with a decent

1437
00:46:15,520 --> 00:46:16,960
set of rules that stops people just you

1438
00:46:16,960 --> 00:46:19,119
know breaking out the underlying node

1439
00:46:19,119 --> 00:46:21,680
having default deny networking in place

1440
00:46:21,680 --> 00:46:23,599
prior to applications being deployed

1441
00:46:23,599 --> 00:46:24,640
because obviously as anyone who's ever

1442
00:46:24,640 --> 00:46:26,480
done firewalls knows retrofitting

1443
00:46:26,480 --> 00:46:28,800
firewalls rules is a huge pain

1444
00:46:28,800 --> 00:46:30,000
and then doing things like container

1445
00:46:30,000 --> 00:46:32,000
image security as well so making sure

1446
00:46:32,000 --> 00:46:33,839
people can't run random images of docker

1447
00:46:33,839 --> 00:46:36,079
hub uh is always a good one to add in

1448
00:46:36,079 --> 00:46:37,839
but all of these are

1449
00:46:37,839 --> 00:46:40,000
our best built in at the platform level

1450
00:46:40,000 --> 00:46:42,480
uh ideally before a lot of applications

1451
00:46:42,480 --> 00:46:45,599
get pushed onto the clusters

1452
00:46:45,760 --> 00:46:47,599
um and then yeah embedding controls and

1453
00:46:47,599 --> 00:46:49,680
template manifests you know everything

1454
00:46:49,680 --> 00:46:51,599
is described as code we can embed the

1455
00:46:51,599 --> 00:46:53,200
controls into the manifests and then

1456
00:46:53,200 --> 00:46:55,040
give people say look there's a template

1457
00:46:55,040 --> 00:46:55,760
know

1458
00:46:55,760 --> 00:46:57,200
drop it fill in the blanks essentially

1459
00:46:57,200 --> 00:46:59,919
with your application

1460
00:47:00,400 --> 00:47:01,359
one thing you've probably noticed about

1461
00:47:01,359 --> 00:47:02,560
this and i'm sure some people are going

1462
00:47:02,560 --> 00:47:05,280
what uh in the audience is this does

1463
00:47:05,280 --> 00:47:06,960
require a platform management team to

1464
00:47:06,960 --> 00:47:08,319
know about this stuff

1465
00:47:08,319 --> 00:47:09,839
whilst i think we can create a usable

1466
00:47:09,839 --> 00:47:11,280
currency environment from a developer

1467
00:47:11,280 --> 00:47:13,520
standpoint by doing all this and having

1468
00:47:13,520 --> 00:47:15,280
these guardrails it does mean there's a

1469
00:47:15,280 --> 00:47:16,880
level of complexity that either has to

1470
00:47:16,880 --> 00:47:19,440
be handled by the platform team or by

1471
00:47:19,440 --> 00:47:20,880
some sort of software as a service you

1472
00:47:20,880 --> 00:47:22,160
know if you're getting something we

1473
00:47:22,160 --> 00:47:23,760
could do quite a bit of this for you but

1474
00:47:23,760 --> 00:47:27,680
somewhere that needs to get done

1475
00:47:27,680 --> 00:47:30,880
so in conclusion um what hopefully you

1476
00:47:30,880 --> 00:47:32,720
kind of grasped from this talk if

1477
00:47:32,720 --> 00:47:35,280
anything is kubernetes is not a complete

1478
00:47:35,280 --> 00:47:37,040
security solution on its own that's

1479
00:47:37,040 --> 00:47:38,240
deliberate that's the project have

1480
00:47:38,240 --> 00:47:39,520
designed it that way they're not trying

1481
00:47:39,520 --> 00:47:41,359
to create a complete platform it does

1482
00:47:41,359 --> 00:47:43,760
need uh additional components for secure

1483
00:47:43,760 --> 00:47:45,520
design you you need to consider when

1484
00:47:45,520 --> 00:47:46,800
you're employing it

1485
00:47:46,800 --> 00:47:48,319
you can't just put kubernetes in and

1486
00:47:48,319 --> 00:47:49,680
have it run otherwise you're not going

1487
00:47:49,680 --> 00:47:51,440
to have a very secure solution you need

1488
00:47:51,440 --> 00:47:53,680
external authentication you need uh

1489
00:47:53,680 --> 00:47:56,079
external networking uh support for like

1490
00:47:56,079 --> 00:47:58,720
good network policies and you also need

1491
00:47:58,720 --> 00:48:01,680
admission control amongst other things

1492
00:48:01,680 --> 00:48:04,079
and ideally it's critical to consider

1493
00:48:04,079 --> 00:48:06,240
the the security requirements as early

1494
00:48:06,240 --> 00:48:08,960
in the design process as possible um

1495
00:48:08,960 --> 00:48:10,319
i've seen quite a lot of clusters and

1496
00:48:10,319 --> 00:48:12,720
i've seen how hard it is to retrofit

1497
00:48:12,720 --> 00:48:14,319
security controls into clusters once

1498
00:48:14,319 --> 00:48:15,760
you've got like 100 applications running

1499
00:48:15,760 --> 00:48:17,760
there um

1500
00:48:17,760 --> 00:48:20,079
it's you know so ideally in the you know

1501
00:48:20,079 --> 00:48:22,160
ideal world get that done early get all

1502
00:48:22,160 --> 00:48:23,920
those things put out uh and that should

1503
00:48:23,920 --> 00:48:25,440
make things hopefully less painful for

1504
00:48:25,440 --> 00:48:26,880
your developers when they're deploying

1505
00:48:26,880 --> 00:48:29,440
to clusters

1506
00:48:29,680 --> 00:48:30,720
so

1507
00:48:30,720 --> 00:48:34,040
that's the slides

