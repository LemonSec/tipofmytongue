1
00:00:01,420 --> 00:00:04,960
[Music]

2
00:00:04,960 --> 00:00:07,680
thanks very much fiona um

3
00:00:07,680 --> 00:00:10,160
so uh so quick quick note uh it is

4
00:00:10,160 --> 00:00:12,799
actually the google salsa framework

5
00:00:12,799 --> 00:00:13,840
um

6
00:00:13,840 --> 00:00:16,239
not an sla framework the framework is

7
00:00:16,239 --> 00:00:20,080
about uh securing artifacts in your cicd

8
00:00:20,080 --> 00:00:22,240
in order to prevent supply chain attacks

9
00:00:22,240 --> 00:00:24,960
and we really applaud uh google for

10
00:00:24,960 --> 00:00:27,439
attempting to take the lead on what we

11
00:00:27,439 --> 00:00:30,000
think is largely an unmet need in

12
00:00:30,000 --> 00:00:32,159
application security

13
00:00:32,159 --> 00:00:33,600
from our perspective it's actually the

14
00:00:33,600 --> 00:00:35,440
greatest unmet need in application

15
00:00:35,440 --> 00:00:36,559
security

16
00:00:36,559 --> 00:00:39,520
so um we think google's uh should really

17
00:00:39,520 --> 00:00:41,520
be commended for their efforts

18
00:00:41,520 --> 00:00:43,440
but it's also worth noting that the

19
00:00:43,440 --> 00:00:45,600
effort that google has put in here is

20
00:00:45,600 --> 00:00:48,719
about one specific part of the stlc and

21
00:00:48,719 --> 00:00:50,559
if you're looking for or if you're

22
00:00:50,559 --> 00:00:52,320
looking to increase the security of your

23
00:00:52,320 --> 00:00:54,000
software supply chain

24
00:00:54,000 --> 00:00:56,320
there are some pieces that are out of

25
00:00:56,320 --> 00:00:58,399
the salsa framework scope

26
00:00:58,399 --> 00:00:59,920
so that's what we wanted to talk about

27
00:00:59,920 --> 00:01:01,120
here today

28
00:01:01,120 --> 00:01:03,359
but before we get into that uh i wanted

29
00:01:03,359 --> 00:01:04,879
to spend a couple minutes talking about

30
00:01:04,879 --> 00:01:06,479
how we got here

31
00:01:06,479 --> 00:01:09,360
next slide please

32
00:01:10,479 --> 00:01:12,640
so i don't think it'll shock anyone uh

33
00:01:12,640 --> 00:01:14,799
that many are calling 2021 the year of

34
00:01:14,799 --> 00:01:17,040
the software supply chain attack uh

35
00:01:17,040 --> 00:01:19,680
there have been more attacks uh that are

36
00:01:19,680 --> 00:01:22,479
more severe than any other year uh in

37
00:01:22,479 --> 00:01:24,840
the history of uh software supply chain

38
00:01:24,840 --> 00:01:28,960
attacks um next slide please

39
00:01:29,920 --> 00:01:32,799
and it goes beyond the headlines um the

40
00:01:32,799 --> 00:01:35,200
eu

41
00:01:35,360 --> 00:01:36,159
is

42
00:01:36,159 --> 00:01:38,400
excuse me the european union security

43
00:01:38,400 --> 00:01:41,439
organization has demonstrated that the

44
00:01:41,439 --> 00:01:44,240
increases are actually up 4x from 2020

45
00:01:44,240 --> 00:01:45,920
to 2021

46
00:01:45,920 --> 00:01:49,439
and uh gartner

47
00:01:49,759 --> 00:01:51,520
is

48
00:01:51,520 --> 00:01:54,560
you mind clicking one more time

49
00:01:54,560 --> 00:01:55,600
yeah

50
00:01:55,600 --> 00:01:57,439
and gartner is actually predicting that

51
00:01:57,439 --> 00:02:00,000
these changes will continue to uh or the

52
00:02:00,000 --> 00:02:02,560
increase will continue to accelerate

53
00:02:02,560 --> 00:02:05,360
into 2025 when almost half of

54
00:02:05,360 --> 00:02:07,040
organizations

55
00:02:07,040 --> 00:02:08,800
will have software supply chain attacks

56
00:02:08,800 --> 00:02:10,080
occurring uh

57
00:02:10,080 --> 00:02:12,239
in that year so the point of this is

58
00:02:12,239 --> 00:02:15,360
that it's not just headlines uh the the

59
00:02:15,360 --> 00:02:17,760
frequency and the severity is increasing

60
00:02:17,760 --> 00:02:19,760
to the point where everybody needs to

61
00:02:19,760 --> 00:02:21,840
start thinking about how am i going to

62
00:02:21,840 --> 00:02:24,400
protect my software supply chain

63
00:02:24,400 --> 00:02:26,160
um and that's where google salsa

64
00:02:26,160 --> 00:02:28,160
framework comes in it's an approach to

65
00:02:28,160 --> 00:02:29,680
how should we do that because it's an

66
00:02:29,680 --> 00:02:32,239
area that many organizations you know

67
00:02:32,239 --> 00:02:34,959
hadn't really dealt with in the past

68
00:02:34,959 --> 00:02:36,720
next slide please

69
00:02:36,720 --> 00:02:37,440
so

70
00:02:37,440 --> 00:02:38,879
the big change that we think is

71
00:02:38,879 --> 00:02:40,400
occurring um

72
00:02:40,400 --> 00:02:42,640
is that in the past uh attackers were

73
00:02:42,640 --> 00:02:44,239
primarily going after production

74
00:02:44,239 --> 00:02:45,599
applications

75
00:02:45,599 --> 00:02:47,760
but now they're actually going after the

76
00:02:47,760 --> 00:02:49,280
tools that make up

77
00:02:49,280 --> 00:02:52,640
your uh your your ci cd pipelines your

78
00:02:52,640 --> 00:02:54,959
software delivery pipelines and that's a

79
00:02:54,959 --> 00:02:56,959
big shift

80
00:02:56,959 --> 00:03:00,239
next slide so so why is that happening

81
00:03:00,239 --> 00:03:01,440
one more

82
00:03:01,440 --> 00:03:03,599
so we think there are three fundamental

83
00:03:03,599 --> 00:03:05,120
problems with software supply chain

84
00:03:05,120 --> 00:03:07,840
security the first is a a visibility

85
00:03:07,840 --> 00:03:10,000
issue and i think it's important to

86
00:03:10,000 --> 00:03:12,319
recognize that uh

87
00:03:12,319 --> 00:03:14,800
most security teams are actually not

88
00:03:14,800 --> 00:03:16,080
responsible

89
00:03:16,080 --> 00:03:18,480
for the key tools that make up the

90
00:03:18,480 --> 00:03:20,640
software delivery pipeline

91
00:03:20,640 --> 00:03:22,879
we've done some surveying and in general

92
00:03:22,879 --> 00:03:25,920
about 80 of security teams are not

93
00:03:25,920 --> 00:03:28,000
responsible for securing github they're

94
00:03:28,000 --> 00:03:30,400
not responsible for securing jenkins

95
00:03:30,400 --> 00:03:32,159
jfrog the cloud environment or

96
00:03:32,159 --> 00:03:33,920
infrastructure as code

97
00:03:33,920 --> 00:03:36,400
uh the responsibility for uh for the

98
00:03:36,400 --> 00:03:39,360
security tends to fall with devops or

99
00:03:39,360 --> 00:03:42,000
with the software development team and

100
00:03:42,000 --> 00:03:44,560
um while that's great

101
00:03:44,560 --> 00:03:45,840
generally speaking a software

102
00:03:45,840 --> 00:03:48,239
development team is going to set up

103
00:03:48,239 --> 00:03:50,159
their software delivery tools with an

104
00:03:50,159 --> 00:03:52,640
emphasis based on efficiency and

105
00:03:52,640 --> 00:03:54,720
developer agility and at times that

106
00:03:54,720 --> 00:03:56,480
comes at the expense

107
00:03:56,480 --> 00:03:58,000
of security

108
00:03:58,000 --> 00:04:00,000
and maybe for good reason but we think

109
00:04:00,000 --> 00:04:02,080
that security needs to find ways to be

110
00:04:02,080 --> 00:04:03,680
able to be more part of that

111
00:04:03,680 --> 00:04:06,480
conversation to help to determine when

112
00:04:06,480 --> 00:04:08,959
and where security should be applied and

113
00:04:08,959 --> 00:04:11,040
ideally when and where it can be applied

114
00:04:11,040 --> 00:04:14,239
in a silent way

115
00:04:14,239 --> 00:04:16,720
so next please

116
00:04:16,720 --> 00:04:17,600
um

117
00:04:17,600 --> 00:04:19,519
so the big thing to note here is is that

118
00:04:19,519 --> 00:04:21,600
the tools themselves have become attack

119
00:04:21,600 --> 00:04:24,000
vectors developers are starting excuse

120
00:04:24,000 --> 00:04:25,680
me attackers are starting to shift on

121
00:04:25,680 --> 00:04:27,840
attempting to

122
00:04:27,840 --> 00:04:29,680
compromise developer accounts as one of

123
00:04:29,680 --> 00:04:31,759
the key ways to get into a software

124
00:04:31,759 --> 00:04:33,360
development lifecycle

125
00:04:33,360 --> 00:04:35,520
and all of the amazing

126
00:04:35,520 --> 00:04:37,040
enhancements that we've made in terms of

127
00:04:37,040 --> 00:04:39,120
automating devops

128
00:04:39,120 --> 00:04:41,360
that lat that is actually facilitating

129
00:04:41,360 --> 00:04:43,680
lateral movement of attackers just as

130
00:04:43,680 --> 00:04:45,520
much as it's actually uh increasing

131
00:04:45,520 --> 00:04:47,759
efficiency in our sdlc

132
00:04:47,759 --> 00:04:49,680
so we've created new attack surfaces and

133
00:04:49,680 --> 00:04:51,600
we've actually made it easier for

134
00:04:51,600 --> 00:04:53,440
attackers to get in one place and then

135
00:04:53,440 --> 00:04:55,360
own the entire cycle

136
00:04:55,360 --> 00:04:57,600
and next

137
00:04:57,600 --> 00:05:00,000
and and lastly um there aren't really

138
00:05:00,000 --> 00:05:01,280
there aren't really tools that are set

139
00:05:01,280 --> 00:05:03,840
up to think about security this way

140
00:05:03,840 --> 00:05:05,600
there's lots of tools to secure source

141
00:05:05,600 --> 00:05:06,880
code in the sense of finding

142
00:05:06,880 --> 00:05:09,039
vulnerabilities within it whether it's a

143
00:05:09,039 --> 00:05:10,960
zero day or a cve

144
00:05:10,960 --> 00:05:13,039
and there's lots of tools out there to

145
00:05:13,039 --> 00:05:15,039
try and protect the application in in

146
00:05:15,039 --> 00:05:17,120
the production environment

147
00:05:17,120 --> 00:05:18,639
but what about protecting the software

148
00:05:18,639 --> 00:05:21,680
supply chain itself

149
00:05:22,000 --> 00:05:24,320
not a lot exists so let's go to the next

150
00:05:24,320 --> 00:05:26,000
slide and then

151
00:05:26,000 --> 00:05:29,039
uh the point here is is that this uh our

152
00:05:29,039 --> 00:05:31,520
our software development life cycles are

153
00:05:31,520 --> 00:05:33,840
becoming so much easier to own uh when

154
00:05:33,840 --> 00:05:35,600
you break in you know one particular

155
00:05:35,600 --> 00:05:37,680
place and there's no better example of

156
00:05:37,680 --> 00:05:39,280
that than source control management

157
00:05:39,280 --> 00:05:41,520
systems if you think about the evolution

158
00:05:41,520 --> 00:05:42,800
of what's been happening in source

159
00:05:42,800 --> 00:05:45,759
control management systems um you know

160
00:05:45,759 --> 00:05:47,840
10 years ago really the only thing that

161
00:05:47,840 --> 00:05:50,400
we had in in our our repositories was

162
00:05:50,400 --> 00:05:51,600
source code

163
00:05:51,600 --> 00:05:53,919
but today we store so much more in our

164
00:05:53,919 --> 00:05:55,120
repos

165
00:05:55,120 --> 00:05:56,880
that once we're giving an attacker

166
00:05:56,880 --> 00:05:59,360
access to that repository we're giving

167
00:05:59,360 --> 00:06:00,960
them the ability to really own the

168
00:06:00,960 --> 00:06:03,440
entire sdlc what do we mean by that so

169
00:06:03,440 --> 00:06:05,039
let's think about something like github

170
00:06:05,039 --> 00:06:07,039
actions uh github actions are

171
00:06:07,039 --> 00:06:09,919
effectively ci cd configurations so

172
00:06:09,919 --> 00:06:12,560
if i've got access to to uh to github

173
00:06:12,560 --> 00:06:14,960
and i can manipulate the actions then i

174
00:06:14,960 --> 00:06:18,160
can then i can uh trigger a new build

175
00:06:18,160 --> 00:06:20,160
we also have infrastructure as code

176
00:06:20,160 --> 00:06:22,639
that's being stored in the repository so

177
00:06:22,639 --> 00:06:24,240
not only can i trigger a new build but i

178
00:06:24,240 --> 00:06:26,560
can potentially take that new build and

179
00:06:26,560 --> 00:06:29,120
deploy it into production

180
00:06:29,120 --> 00:06:30,560
and then of course

181
00:06:30,560 --> 00:06:32,479
because of the source code i can tamper

182
00:06:32,479 --> 00:06:35,680
with the code so if i can get in and own

183
00:06:35,680 --> 00:06:38,000
a source control management system i can

184
00:06:38,000 --> 00:06:41,680
potentially own the entire sdlc

185
00:06:41,680 --> 00:06:44,479
next slide please

186
00:06:45,360 --> 00:06:46,720
and this is where i'll pass it off to

187
00:06:46,720 --> 00:06:48,400
ronin who's going to now talk in a

188
00:06:48,400 --> 00:06:50,000
little more detail about google's salsa

189
00:06:50,000 --> 00:06:52,080
framework thank you

190
00:06:52,080 --> 00:06:53,440
thanks andrew

191
00:06:53,440 --> 00:06:55,280
uh so yeah sandra mentioned all the

192
00:06:55,280 --> 00:06:56,319
issues

193
00:06:56,319 --> 00:06:58,639
with the software supply chain

194
00:06:58,639 --> 00:07:00,960
and in june

195
00:07:00,960 --> 00:07:04,000
this year uh almost six months ago

196
00:07:04,000 --> 00:07:06,560
and google announced the salsa framework

197
00:07:06,560 --> 00:07:08,560
so salsa is a supply chain level for

198
00:07:08,560 --> 00:07:11,680
software artifacts so it's basically

199
00:07:11,680 --> 00:07:13,759
an end-to-end framework for ensuring an

200
00:07:13,759 --> 00:07:16,479
integrity of software artifacts through

201
00:07:16,479 --> 00:07:18,800
the software supply chain

202
00:07:18,800 --> 00:07:20,400
where the goal is to improve the the

203
00:07:20,400 --> 00:07:23,120
state of the industry especially it is

204
00:07:23,120 --> 00:07:25,440
aimed at open source to defend against

205
00:07:25,440 --> 00:07:27,840
sort of this the most pressing

206
00:07:27,840 --> 00:07:30,560
integrity threats and as we saw in the

207
00:07:30,560 --> 00:07:32,000
in the first slide

208
00:07:32,000 --> 00:07:32,880
um

209
00:07:32,880 --> 00:07:35,280
and basically salsa is focused more on

210
00:07:35,280 --> 00:07:36,720
the process of building and shipping

211
00:07:36,720 --> 00:07:39,680
code and not on the content that goes

212
00:07:39,680 --> 00:07:41,840
through the pipeline itself

213
00:07:41,840 --> 00:07:44,800
so we will um we will talk about it

214
00:07:44,800 --> 00:07:48,000
also in this presentation

215
00:07:48,080 --> 00:07:51,280
um so it's it at its basics the salsa

216
00:07:51,280 --> 00:07:52,879
framework offers

217
00:07:52,879 --> 00:07:55,039
four different levels

218
00:07:55,039 --> 00:07:55,759
of

219
00:07:55,759 --> 00:07:58,400
salsa where the first level level zero

220
00:07:58,400 --> 00:08:00,240
means that you provide no guarantee at

221
00:08:00,240 --> 00:08:01,199
all

222
00:08:01,199 --> 00:08:03,120
the first level means that

223
00:08:03,120 --> 00:08:04,960
the build process is fully scripted

224
00:08:04,960 --> 00:08:07,759
automated and it generates a provenance

225
00:08:07,759 --> 00:08:10,160
and the second means that you in

226
00:08:10,160 --> 00:08:12,240
addition to the level one you also

227
00:08:12,240 --> 00:08:13,280
require

228
00:08:13,280 --> 00:08:14,080
uh

229
00:08:14,080 --> 00:08:15,599
you're also using version control and

230
00:08:15,599 --> 00:08:17,680
you use the hosted build service to

231
00:08:17,680 --> 00:08:20,000
generate the provenance

232
00:08:20,000 --> 00:08:21,680
at the third level

233
00:08:21,680 --> 00:08:23,759
uh there are more specific standards

234
00:08:23,759 --> 00:08:26,960
that guarantee audit and the integrity

235
00:08:26,960 --> 00:08:29,120
of the generated provenance and in the

236
00:08:29,120 --> 00:08:32,159
fourth level um mainly it requires uh

237
00:08:32,159 --> 00:08:33,679
two-person reviews

238
00:08:33,679 --> 00:08:35,839
uh and aromatic reproducible builds

239
00:08:35,839 --> 00:08:40,399
which will also uh touch uh inaudible

240
00:08:40,399 --> 00:08:42,559
so this is sort of a more

241
00:08:42,559 --> 00:08:44,399
simple

242
00:08:44,399 --> 00:08:46,640
explanation again of the four different

243
00:08:46,640 --> 00:08:47,680
levels

244
00:08:47,680 --> 00:08:48,720
and

245
00:08:48,720 --> 00:08:50,480
so level one means basically that you

246
00:08:50,480 --> 00:08:52,320
document the build process

247
00:08:52,320 --> 00:08:53,600
so the example would be unsigned

248
00:08:53,600 --> 00:08:54,800
provenance

249
00:08:54,800 --> 00:08:56,320
and the second level means that your

250
00:08:56,320 --> 00:08:58,320
temper resistance in the build service

251
00:08:58,320 --> 00:08:59,600
so this would be if you sign the

252
00:08:59,600 --> 00:09:02,080
provenance and you use a hostile uh

253
00:09:02,080 --> 00:09:03,360
source and build

254
00:09:03,360 --> 00:09:04,480
um

255
00:09:04,480 --> 00:09:06,160
level slamming means that your extra

256
00:09:06,160 --> 00:09:08,480
resistance to some specific threats so

257
00:09:08,480 --> 00:09:10,000
this would be security controls on the

258
00:09:10,000 --> 00:09:11,279
horse

259
00:09:11,279 --> 00:09:14,399
and unfortunate non-forcible provenance

260
00:09:14,399 --> 00:09:16,000
and four would be the highest level of

261
00:09:16,000 --> 00:09:18,160
transponents which means a two-party

262
00:09:18,160 --> 00:09:22,160
review and dramatic evidence

263
00:09:22,160 --> 00:09:24,320
uh and then the salsa framework also

264
00:09:24,320 --> 00:09:27,040
offers some kind of threat model for the

265
00:09:27,040 --> 00:09:28,800
software delivery pipeline

266
00:09:28,800 --> 00:09:31,519
and we can see it uh divided into a

267
00:09:31,519 --> 00:09:34,480
source integrity and build integrity

268
00:09:34,480 --> 00:09:36,880
where the the threats in the sword in

269
00:09:36,880 --> 00:09:39,040
the in the source parts would be

270
00:09:39,040 --> 00:09:40,720
someone submitting that code so either

271
00:09:40,720 --> 00:09:43,040
through compromising a developer you

272
00:09:43,040 --> 00:09:45,440
know compromising the tool and this will

273
00:09:45,440 --> 00:09:46,959
be also the the second thread the

274
00:09:46,959 --> 00:09:48,640
compromise source control

275
00:09:48,640 --> 00:09:49,760
um

276
00:09:49,760 --> 00:09:52,240
then we can also see the threats that

277
00:09:52,240 --> 00:09:55,279
that exists uh in the build phases

278
00:09:55,279 --> 00:09:58,640
and we'll elaborate on this more

279
00:09:58,640 --> 00:09:59,680
and

280
00:09:59,680 --> 00:10:02,399
then the framework sort of takes the

281
00:10:02,399 --> 00:10:04,640
takes the the different stages and

282
00:10:04,640 --> 00:10:06,959
divided divides the requirements into a

283
00:10:06,959 --> 00:10:09,600
four categories for broader categories

284
00:10:09,600 --> 00:10:12,320
source which is focused on the on the

285
00:10:12,320 --> 00:10:14,320
source management platform and the

286
00:10:14,320 --> 00:10:16,399
management around the source code and

287
00:10:16,399 --> 00:10:17,680
build

288
00:10:17,680 --> 00:10:19,120
which talks about the build tools that

289
00:10:19,120 --> 00:10:20,160
use

290
00:10:20,160 --> 00:10:22,800
provenance which is sort of the um the

291
00:10:22,800 --> 00:10:25,360
certificate that you will get um out of

292
00:10:25,360 --> 00:10:27,040
the build service that proves the

293
00:10:27,040 --> 00:10:29,360
various steps and things that you did or

294
00:10:29,360 --> 00:10:31,440
claimed that you did in the build and

295
00:10:31,440 --> 00:10:33,120
then common which would be controls that

296
00:10:33,120 --> 00:10:35,200
are relevant to all the tools that are

297
00:10:35,200 --> 00:10:37,600
used as part of the process and there is

298
00:10:37,600 --> 00:10:40,320
this high level hr that shows you

299
00:10:40,320 --> 00:10:42,560
um what are the requirements that you

300
00:10:42,560 --> 00:10:44,720
need to comply with and then which salsa

301
00:10:44,720 --> 00:10:46,480
level you are entitled to

302
00:10:46,480 --> 00:10:49,360
if you comply uh with these um

303
00:10:49,360 --> 00:10:52,560
with these requirements

304
00:10:52,800 --> 00:10:55,839
so let's look at the source uh basically

305
00:10:55,839 --> 00:10:59,040
a form for a requirements um

306
00:10:59,040 --> 00:11:00,560
if you're using a source control that is

307
00:11:00,560 --> 00:11:02,079
a version control

308
00:11:02,079 --> 00:11:04,079
and so this

309
00:11:04,079 --> 00:11:05,920
is entitled the salsa 2 or this is the

310
00:11:05,920 --> 00:11:08,079
requirement of salsa 2.

311
00:11:08,079 --> 00:11:10,640
if the if the history can be verified so

312
00:11:10,640 --> 00:11:12,560
each change can be

313
00:11:12,560 --> 00:11:14,320
it can be tied to an authenticated user

314
00:11:14,320 --> 00:11:16,560
and we can verify that this is

315
00:11:16,560 --> 00:11:19,279
the contributor so this would entitle

316
00:11:19,279 --> 00:11:21,279
salsa 3.

317
00:11:21,279 --> 00:11:23,440
and then if the history is returned

318
00:11:23,440 --> 00:11:26,079
indefinitely and if you enforce the two

319
00:11:26,079 --> 00:11:28,560
perfect person reviews so

320
00:11:28,560 --> 00:11:30,880
these are the extra requirements for

321
00:11:30,880 --> 00:11:33,680
salsa level four

322
00:11:33,680 --> 00:11:36,320
and but then salsa also talks about some

323
00:11:36,320 --> 00:11:39,200
use cases that would be out of scope

324
00:11:39,200 --> 00:11:40,880
for the standard

325
00:11:40,880 --> 00:11:43,040
so the first one would be if two people

326
00:11:43,040 --> 00:11:44,640
collude uh

327
00:11:44,640 --> 00:11:48,399
to to perform some malicious activity um

328
00:11:48,399 --> 00:11:50,160
meaning they agree to do it someone open

329
00:11:50,160 --> 00:11:51,839
someone open the pull request the other

330
00:11:51,839 --> 00:11:52,880
person

331
00:11:52,880 --> 00:11:54,079
approves it

332
00:11:54,079 --> 00:11:55,680
um

333
00:11:55,680 --> 00:11:58,320
so here probably the the first uh line

334
00:11:58,320 --> 00:11:59,920
of defense will be using this privilege

335
00:11:59,920 --> 00:12:02,480
and really narrowing the risks against

336
00:12:02,480 --> 00:12:03,360
that

337
00:12:03,360 --> 00:12:05,200
uh trigger viewer into approving bad

338
00:12:05,200 --> 00:12:07,600
code like we saw recently and with the

339
00:12:07,600 --> 00:12:08,880
trojan source

340
00:12:08,880 --> 00:12:12,160
attack um so probably the the best the

341
00:12:12,160 --> 00:12:13,920
mitigation here would be to to have some

342
00:12:13,920 --> 00:12:16,240
tool that it wants to identify and

343
00:12:16,240 --> 00:12:17,839
assist reviewers

344
00:12:17,839 --> 00:12:19,519
in this process

345
00:12:19,519 --> 00:12:21,680
uh reviewers that blindly approve

346
00:12:21,680 --> 00:12:23,200
changes and obviously this is not

347
00:12:23,200 --> 00:12:25,120
something can happen

348
00:12:25,120 --> 00:12:26,240
and this is something that can be

349
00:12:26,240 --> 00:12:28,959
detected uh from uh looking at the

350
00:12:28,959 --> 00:12:30,959
activity within the source control uh

351
00:12:30,959 --> 00:12:34,079
how long was the request open um does it

352
00:12:34,079 --> 00:12:36,240
have any comments and things like that

353
00:12:36,240 --> 00:12:37,200
um

354
00:12:37,200 --> 00:12:39,200
and then we if we talk about compromise

355
00:12:39,200 --> 00:12:40,320
of the entire

356
00:12:40,320 --> 00:12:42,560
source control system like for example

357
00:12:42,560 --> 00:12:44,079
if your cell phones the source control

358
00:12:44,079 --> 00:12:45,200
and there's a vulnerability in the

359
00:12:45,200 --> 00:12:46,560
version that you use

360
00:12:46,560 --> 00:12:48,880
um so this is against it means that the

361
00:12:48,880 --> 00:12:50,560
entire tool is is controlled by an

362
00:12:50,560 --> 00:12:52,560
attacker

363
00:12:52,560 --> 00:12:54,000
and then you can trust the data that

364
00:12:54,000 --> 00:12:56,800
comes from the lcm but commit signing at

365
00:12:56,800 --> 00:12:58,959
the developer level could be something

366
00:12:58,959 --> 00:13:01,200
that can be used as a mitigation here

367
00:13:01,200 --> 00:13:03,360
um and then another

368
00:13:03,360 --> 00:13:05,760
issue is the admin activity so obviously

369
00:13:05,760 --> 00:13:08,320
people have admin access to these tools

370
00:13:08,320 --> 00:13:10,639
and for example what happens if a

371
00:13:10,639 --> 00:13:13,839
an owner an admin removes a restriction

372
00:13:13,839 --> 00:13:15,600
pushes code and then brings these

373
00:13:15,600 --> 00:13:17,600
restrictions back so this is again

374
00:13:17,600 --> 00:13:19,279
something that is not covered here and

375
00:13:19,279 --> 00:13:24,079
should be complemented with other tools

376
00:13:24,320 --> 00:13:25,920
then we move to the core of salsa which

377
00:13:25,920 --> 00:13:28,079
is the build process

378
00:13:28,079 --> 00:13:30,720
and which again has various requirements

379
00:13:30,720 --> 00:13:33,040
to to achieve different levels of salsa

380
00:13:33,040 --> 00:13:35,440
in the build that you use for example do

381
00:13:35,440 --> 00:13:37,360
you use a script to do the build

382
00:13:37,360 --> 00:13:39,920
do you use a dedicated service is the

383
00:13:39,920 --> 00:13:41,920
environment of the build and a thermal

384
00:13:41,920 --> 00:13:42,959
environment

385
00:13:42,959 --> 00:13:44,720
uh are the are there

386
00:13:44,720 --> 00:13:46,480
are the builds themselves isolated from

387
00:13:46,480 --> 00:13:50,240
each other and it's the build parameters

388
00:13:50,240 --> 00:13:51,680
um

389
00:13:51,680 --> 00:13:53,920
do you use an enormatic build and

390
00:13:53,920 --> 00:13:55,199
finally there's this notion of

391
00:13:55,199 --> 00:13:57,920
reproducible build which is not a salsa

392
00:13:57,920 --> 00:13:59,600
requirement

393
00:13:59,600 --> 00:14:00,839
but it's a very

394
00:14:00,839 --> 00:14:04,160
strong mitigation and and can be used to

395
00:14:04,160 --> 00:14:08,160
contribute to uh to detect mitigate

396
00:14:08,160 --> 00:14:10,240
this risk of software supply chain

397
00:14:10,240 --> 00:14:12,079
um and then as part of the build phase

398
00:14:12,079 --> 00:14:13,760
you need to provide provenance this is

399
00:14:13,760 --> 00:14:16,639
also a basic requirement of salsa so

400
00:14:16,639 --> 00:14:18,399
to achieve level one you need to have

401
00:14:18,399 --> 00:14:20,320
some available provenance that you that

402
00:14:20,320 --> 00:14:21,600
you can supply

403
00:14:21,600 --> 00:14:23,680
this provenance is is basically like a

404
00:14:23,680 --> 00:14:25,600
certification that that describes the

405
00:14:25,600 --> 00:14:27,600
different bill phases and

406
00:14:27,600 --> 00:14:28,880
and what are the steps that we're taking

407
00:14:28,880 --> 00:14:31,040
what is the code that was built

408
00:14:31,040 --> 00:14:33,920
and so according to how strong this

409
00:14:33,920 --> 00:14:35,760
provenance is you can achieve higher

410
00:14:35,760 --> 00:14:37,920
levels of salsa so

411
00:14:37,920 --> 00:14:40,079
if it can be authenticated if it was

412
00:14:40,079 --> 00:14:42,079
generated by service

413
00:14:42,079 --> 00:14:44,800
if it's something that cannot be um

414
00:14:44,800 --> 00:14:46,560
falsified by the builds by the build

415
00:14:46,560 --> 00:14:48,240
service users

416
00:14:48,240 --> 00:14:50,880
and if it provides a complete a

417
00:14:50,880 --> 00:14:53,040
list of the dependencies and their exact

418
00:14:53,040 --> 00:14:55,120
version and attempted to the build

419
00:14:55,120 --> 00:14:58,120
process

420
00:14:58,399 --> 00:15:00,160
the framework also describes like what

421
00:15:00,160 --> 00:15:01,680
are the uh

422
00:15:01,680 --> 00:15:03,199
what is the content

423
00:15:03,199 --> 00:15:05,279
that should be within the provenance

424
00:15:05,279 --> 00:15:06,560
that

425
00:15:06,560 --> 00:15:08,320
is eventually generated

426
00:15:08,320 --> 00:15:10,079
uh so obviously identifying the

427
00:15:10,079 --> 00:15:11,920
artifacts that were produced what is the

428
00:15:11,920 --> 00:15:13,920
builder and what is the source that

429
00:15:13,920 --> 00:15:16,160
built it what is the entry point and it

430
00:15:16,160 --> 00:15:18,720
starts uh the execution

431
00:15:18,720 --> 00:15:20,480
it has all the build parameters if the

432
00:15:20,480 --> 00:15:22,880
build requires one

433
00:15:22,880 --> 00:15:24,560
all the dependencies

434
00:15:24,560 --> 00:15:26,399
and if a reproducible bill is possible

435
00:15:26,399 --> 00:15:29,279
so a reproducible builds info

436
00:15:29,279 --> 00:15:31,519
um and metadata which is again another

437
00:15:31,519 --> 00:15:33,759
additional requirement and is not

438
00:15:33,759 --> 00:15:37,199
part of the uh four level of salsa

439
00:15:37,199 --> 00:15:41,120
um so this is a a basic example of salsa

440
00:15:41,120 --> 00:15:43,680
i want dive into it but basically it

441
00:15:43,680 --> 00:15:45,519
shows the example

442
00:15:45,519 --> 00:15:48,399
uh of a builder that downloads

443
00:15:48,399 --> 00:15:51,360
a tardages

444
00:15:51,759 --> 00:15:54,399
archive that has code in it extracts it

445
00:15:54,399 --> 00:15:57,680
uh compile it combines it using make

446
00:15:57,680 --> 00:16:00,480
with c flags and it results with a file

447
00:16:00,480 --> 00:16:03,040
with hash of the of the five six seven

448
00:16:03,040 --> 00:16:04,000
eight

449
00:16:04,000 --> 00:16:05,360
so this is an example of how it should

450
00:16:05,360 --> 00:16:07,040
look and when it is done using the in

451
00:16:07,040 --> 00:16:09,600
total framework which is also another

452
00:16:09,600 --> 00:16:11,120
source project

453
00:16:11,120 --> 00:16:12,320
um

454
00:16:12,320 --> 00:16:14,880
aimed at at this specific

455
00:16:14,880 --> 00:16:17,680
at this specific issue

456
00:16:17,680 --> 00:16:19,199
and

457
00:16:19,199 --> 00:16:21,120
so other scope for building provenance

458
00:16:21,120 --> 00:16:22,959
would be um

459
00:16:22,959 --> 00:16:25,440
so if we if we look at the thread so if

460
00:16:25,440 --> 00:16:26,959
the fork if the build is done from

461
00:16:26,959 --> 00:16:28,880
unofficial sources like a full cover

462
00:16:28,880 --> 00:16:31,680
repository some side range unknown tag

463
00:16:31,680 --> 00:16:33,759
or something like that so this would be

464
00:16:33,759 --> 00:16:36,320
activity in the threads and basically

465
00:16:36,320 --> 00:16:38,240
this should be part of the provenance

466
00:16:38,240 --> 00:16:39,680
and this should be verified as part of

467
00:16:39,680 --> 00:16:40,800
the provenance

468
00:16:40,800 --> 00:16:44,000
and to mitigate against this as well

469
00:16:44,000 --> 00:16:45,199
um

470
00:16:45,199 --> 00:16:48,320
then if we talk about uh compromise the

471
00:16:48,320 --> 00:16:50,160
build so compromise build tools so

472
00:16:50,160 --> 00:16:51,759
there's again all kinds of scenarios it

473
00:16:51,759 --> 00:16:54,160
could be an admin of the tool an owner

474
00:16:54,160 --> 00:16:56,800
a cache poisoning

475
00:16:56,800 --> 00:16:59,920
or a cv in the tool itself so if someone

476
00:16:59,920 --> 00:17:01,920
um

477
00:17:01,920 --> 00:17:04,559
compromises the platform so again this

478
00:17:04,559 --> 00:17:07,199
is a this telescope and sort of the the

479
00:17:07,199 --> 00:17:09,439
build the controls that are described

480
00:17:09,439 --> 00:17:12,240
within the framework are are there to

481
00:17:12,240 --> 00:17:15,039
make um to require the use of a very

482
00:17:15,039 --> 00:17:17,679
strong build system that would be harder

483
00:17:17,679 --> 00:17:19,520
to compromise and would be harder to to

484
00:17:19,520 --> 00:17:21,119
gain persistence

485
00:17:21,119 --> 00:17:22,079
over

486
00:17:22,079 --> 00:17:23,679
and

487
00:17:23,679 --> 00:17:24,880
then if we still

488
00:17:24,880 --> 00:17:26,799
want to address this build of the

489
00:17:26,799 --> 00:17:28,720
compromise build tools our producer will

490
00:17:28,720 --> 00:17:30,240
build

491
00:17:30,240 --> 00:17:31,919
which is the best after effort in the

492
00:17:31,919 --> 00:17:34,000
standard would offer uh some mitigation

493
00:17:34,000 --> 00:17:36,640
around that because if you can do two uh

494
00:17:36,640 --> 00:17:38,240
two different builds in two different

495
00:17:38,240 --> 00:17:39,919
tools and then compare them against each

496
00:17:39,919 --> 00:17:42,640
other you would detect a compromise

497
00:17:42,640 --> 00:17:44,320
build tool

498
00:17:44,320 --> 00:17:46,080
the last part of the framework is uh

499
00:17:46,080 --> 00:17:48,559
it's common control these are the

500
00:17:48,559 --> 00:17:51,039
common requirements that should be used

501
00:17:51,039 --> 00:17:53,360
in every trusted system that is involved

502
00:17:53,360 --> 00:17:55,280
in your software supply chain so the

503
00:17:55,280 --> 00:17:56,880
code the build

504
00:17:56,880 --> 00:17:59,840
and the distribution tool

505
00:17:59,840 --> 00:18:02,400
and some of the requirements are to have

506
00:18:02,400 --> 00:18:04,960
that the system needs some security uh

507
00:18:04,960 --> 00:18:07,440
baseline this is yet to be determined

508
00:18:07,440 --> 00:18:10,480
um have a strong access control over

509
00:18:10,480 --> 00:18:12,880
this tools and lock the access

510
00:18:12,880 --> 00:18:14,960
and use a third party

511
00:18:14,960 --> 00:18:17,919
um multifactor authentication

512
00:18:17,919 --> 00:18:19,919
and minimize the amount of the of

513
00:18:19,919 --> 00:18:21,840
administrator and people that have admin

514
00:18:21,840 --> 00:18:23,919
access to all these tools again because

515
00:18:23,919 --> 00:18:26,640
we saw previously the threats that

516
00:18:26,640 --> 00:18:28,720
sort of derived from having users with

517
00:18:28,720 --> 00:18:31,520
this high privilege

518
00:18:31,520 --> 00:18:33,679
and then if we talk about some

519
00:18:33,679 --> 00:18:35,840
more issues that our scope that are more

520
00:18:35,840 --> 00:18:37,520
common so obviously

521
00:18:37,520 --> 00:18:39,520
crypto ash collisions and this will be

522
00:18:39,520 --> 00:18:42,240
out of scope for salsa and and i

523
00:18:42,240 --> 00:18:43,280
discussed

524
00:18:43,280 --> 00:18:46,240
um also the framework doesn't look at

525
00:18:46,240 --> 00:18:47,919
what goes into the software delivery

526
00:18:47,919 --> 00:18:50,559
pipeline so vulnerability in code

527
00:18:50,559 --> 00:18:51,840
or dependency vulnerabilities or

528
00:18:51,840 --> 00:18:53,760
infrastructure is code and not

529
00:18:53,760 --> 00:18:55,600
explicitly part of the part of the

530
00:18:55,600 --> 00:18:57,200
framework and it should be checked

531
00:18:57,200 --> 00:18:58,799
individually

532
00:18:58,799 --> 00:18:59,760
um

533
00:18:59,760 --> 00:19:01,840
and then the framework

534
00:19:01,840 --> 00:19:03,840
again focuses on the build and code

535
00:19:03,840 --> 00:19:04,880
phases

536
00:19:04,880 --> 00:19:06,799
getting the artifacts prepared

537
00:19:06,799 --> 00:19:09,600
and we then the missing piece will be

538
00:19:09,600 --> 00:19:10,960
looking at the production environment

539
00:19:10,960 --> 00:19:12,480
looking at production exposure and

540
00:19:12,480 --> 00:19:14,160
misconfiguration

541
00:19:14,160 --> 00:19:16,160
and continuously checking uh the

542
00:19:16,160 --> 00:19:18,640
provenance that was created in the build

543
00:19:18,640 --> 00:19:19,600
phase

544
00:19:19,600 --> 00:19:22,160
and and checking it against

545
00:19:22,160 --> 00:19:23,760
the actual pieces of content are running

546
00:19:23,760 --> 00:19:25,120
or distributed

547
00:19:25,120 --> 00:19:25,919
and

548
00:19:25,919 --> 00:19:27,520
and make sure that that it holds the

549
00:19:27,520 --> 00:19:28,400
line

550
00:19:28,400 --> 00:19:30,559
um and then finally the issue of a

551
00:19:30,559 --> 00:19:33,440
secret exposure so again not not

552
00:19:33,440 --> 00:19:34,799
mentioned specifically in the standard

553
00:19:34,799 --> 00:19:37,280
but again could have a major effect on

554
00:19:37,280 --> 00:19:39,200
the security of the software supply

555
00:19:39,200 --> 00:19:40,000
chain

556
00:19:40,000 --> 00:19:40,960
um

557
00:19:40,960 --> 00:19:42,640
depending on which secretary supports

558
00:19:42,640 --> 00:19:44,960
but basically this could be

559
00:19:44,960 --> 00:19:47,039
giving access to the tools themselves

560
00:19:47,039 --> 00:19:49,120
and bringing back all the threats that

561
00:19:49,120 --> 00:19:51,600
we talked about earlier

562
00:19:51,600 --> 00:19:52,720
as well as

563
00:19:52,720 --> 00:19:54,320
access to the production

564
00:19:54,320 --> 00:19:57,280
which we talked about here

565
00:19:59,360 --> 00:20:03,439
so let's move to some q a

