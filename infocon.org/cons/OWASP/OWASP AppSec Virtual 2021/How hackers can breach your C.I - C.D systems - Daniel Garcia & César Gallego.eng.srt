1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:06,399 --> 00:00:08,080
okay

3
00:00:08,080 --> 00:00:11,679
first hello everybody um thank you for

4
00:00:11,679 --> 00:00:14,320
attending our talk

5
00:00:14,320 --> 00:00:16,400
um

6
00:00:16,400 --> 00:00:17,600
in

7
00:00:17,600 --> 00:00:19,279
in our talk

8
00:00:19,279 --> 00:00:20,000
we

9
00:00:20,000 --> 00:00:23,680
we speak about hackers about

10
00:00:23,680 --> 00:00:26,800
some different kind of attack and all of

11
00:00:26,800 --> 00:00:30,240
them it will be focused on software

12
00:00:30,240 --> 00:00:33,280
development processes workflows

13
00:00:33,280 --> 00:00:36,960
and so on um we'll try to

14
00:00:36,960 --> 00:00:38,160
to

15
00:00:38,160 --> 00:00:40,640
choose to show different canon attacks

16
00:00:40,640 --> 00:00:43,200
and sometimes a different kind of

17
00:00:43,200 --> 00:00:46,559
defenses right

18
00:00:46,559 --> 00:00:49,920
okay a bit of spam about us

19
00:00:49,920 --> 00:00:51,360
um

20
00:00:51,360 --> 00:00:54,640
i think that nothing more to add or

21
00:00:54,640 --> 00:00:57,039
do you want to add something faster

22
00:00:57,039 --> 00:00:59,600
yeah yes i work on bbva next

23
00:00:59,600 --> 00:01:02,320
technologies is a company of a

24
00:01:02,320 --> 00:01:04,879
technology company from a spanish bank

25
00:01:04,879 --> 00:01:06,400
and

26
00:01:06,400 --> 00:01:09,520
i work for a long time with

27
00:01:09,520 --> 00:01:12,479
data and now i'm focused

28
00:01:12,479 --> 00:01:13,600
more on

29
00:01:13,600 --> 00:01:17,119
security over data and security itself

30
00:01:17,119 --> 00:01:20,479
and i must say that it's an exciting

31
00:01:20,479 --> 00:01:24,960
work nowadays i learning a lot

32
00:01:25,680 --> 00:01:28,479
nice um i only will add that i'm

33
00:01:28,479 --> 00:01:31,200
currently working as a

34
00:01:31,200 --> 00:01:33,360
security research api consultant for

35
00:01:33,360 --> 00:01:35,040
photographs

36
00:01:35,040 --> 00:01:37,119
um a company

37
00:01:37,119 --> 00:01:40,320
focuses security in the apis and that's

38
00:01:40,320 --> 00:01:41,360
it

39
00:01:41,360 --> 00:01:42,560
you can

40
00:01:42,560 --> 00:01:44,000
get in touch with

41
00:01:44,000 --> 00:01:47,119
our twitter uh with linkedin

42
00:01:47,119 --> 00:01:48,720
you can yes

43
00:01:48,720 --> 00:01:50,720
it's this in this slide

44
00:01:50,720 --> 00:01:51,520
or

45
00:01:51,520 --> 00:01:54,240
okay now

46
00:01:54,240 --> 00:01:55,439
first

47
00:01:55,439 --> 00:01:58,560
a very big disclaimer about our talk

48
00:01:58,560 --> 00:02:00,240
because uh

49
00:02:00,240 --> 00:02:02,719
we will see some real attacks

50
00:02:02,719 --> 00:02:05,439
and that we are

51
00:02:05,439 --> 00:02:06,880
swinging our

52
00:02:06,880 --> 00:02:09,199
our own opinions

53
00:02:09,199 --> 00:02:13,360
uh espresso are not by um

54
00:02:13,360 --> 00:02:16,000
a company that aren't employers to us

55
00:02:16,000 --> 00:02:17,920
right

56
00:02:17,920 --> 00:02:18,959
yes

57
00:02:18,959 --> 00:02:21,840
legal reasons

58
00:02:21,840 --> 00:02:24,239
okay let's let's start with the core

59
00:02:24,239 --> 00:02:27,200
concepts so let's take a ten thousand

60
00:02:27,200 --> 00:02:29,520
feet look at the modern software

61
00:02:29,520 --> 00:02:32,640
pipelines next

62
00:02:34,000 --> 00:02:36,480
okay first of all what continuous

63
00:02:36,480 --> 00:02:39,200
integration is continuous integration

64
00:02:39,200 --> 00:02:42,080
tools born from groups of developers

65
00:02:42,080 --> 00:02:45,360
while they work on the same code by base

66
00:02:45,360 --> 00:02:47,760
and they can talk each other

67
00:02:47,760 --> 00:02:50,400
first we work in order to keep

68
00:02:50,400 --> 00:02:53,280
correctness even after several code

69
00:02:53,280 --> 00:02:56,480
merges then test drive development come

70
00:02:56,480 --> 00:02:58,879
to town things start to be more

71
00:02:58,879 --> 00:03:01,920
interesting now we can be sure that our

72
00:03:01,920 --> 00:03:04,560
code is consistent and works on the most

73
00:03:04,560 --> 00:03:06,239
important parts

74
00:03:06,239 --> 00:03:09,200
also you have there the wikipedia

75
00:03:09,200 --> 00:03:11,920
definition that it's a pretty boring

76
00:03:11,920 --> 00:03:15,040
thing okay next

77
00:03:15,920 --> 00:03:19,200
okay what continuous deployment is

78
00:03:19,200 --> 00:03:22,400
in fact developers confidence was so

79
00:03:22,400 --> 00:03:25,360
high that they start to automate push to

80
00:03:25,360 --> 00:03:27,360
production machines without human

81
00:03:27,360 --> 00:03:30,480
intervention or manual revision

82
00:03:30,480 --> 00:03:32,959
testing techniques becomes

83
00:03:32,959 --> 00:03:34,480
become the

84
00:03:34,480 --> 00:03:37,680
safety net of developers now we feel

85
00:03:37,680 --> 00:03:40,319
safe about our code

86
00:03:40,319 --> 00:03:43,440
every commit now has high probabilities

87
00:03:43,440 --> 00:03:46,720
to trigger and you deploy to production

88
00:03:46,720 --> 00:03:48,720
and without the old struggle between

89
00:03:48,720 --> 00:03:51,519
developers and operations new exciting

90
00:03:51,519 --> 00:03:52,959
techniques born

91
00:03:52,959 --> 00:03:55,280
like a b testing blue green deployment

92
00:03:55,280 --> 00:03:57,920
zero downtime all that stuff

93
00:03:57,920 --> 00:04:00,480
more aggressive and fast automatic

94
00:04:00,480 --> 00:04:02,560
deploy techniques start to become very

95
00:04:02,560 --> 00:04:05,040
popular and that's all the long story

96
00:04:05,040 --> 00:04:08,239
short next

97
00:04:08,640 --> 00:04:12,080
okay a little note about difference

98
00:04:12,080 --> 00:04:13,840
between continuous delivery and

99
00:04:13,840 --> 00:04:16,079
continuous deployment nowadays we have

100
00:04:16,079 --> 00:04:17,600
an increasing number of continuous

101
00:04:17,600 --> 00:04:19,918
deployment projects and also some

102
00:04:19,918 --> 00:04:22,400
continuous delivery projects the main

103
00:04:22,400 --> 00:04:24,560
difference between them is that on

104
00:04:24,560 --> 00:04:27,759
delivery ones we keep a manual process

105
00:04:27,759 --> 00:04:30,240
to trigger production deployment you can

106
00:04:30,240 --> 00:04:33,040
see in the red square

107
00:04:33,040 --> 00:04:34,479
okay

108
00:04:34,479 --> 00:04:36,160
nanny go ahead

109
00:04:36,160 --> 00:04:38,960
yeah my turn okay um

110
00:04:38,960 --> 00:04:41,360
okay we're talking uh about

111
00:04:41,360 --> 00:04:43,440
modern workflows and infrastructure and

112
00:04:43,440 --> 00:04:47,120
so on um at this point we are reviewing

113
00:04:47,120 --> 00:04:50,320
uh what happened in legacy systems right

114
00:04:50,320 --> 00:04:52,560
legacy system the legacy environments

115
00:04:52,560 --> 00:04:54,800
that right okay let's see it

116
00:04:54,800 --> 00:04:56,479
okay the the first

117
00:04:56,479 --> 00:04:59,360
scenario is when we

118
00:04:59,360 --> 00:05:02,800
have not a cd or continuous deployment

119
00:05:02,800 --> 00:05:03,680
right

120
00:05:03,680 --> 00:05:06,160
um in this case

121
00:05:06,160 --> 00:05:07,680
sorry

122
00:05:07,680 --> 00:05:08,479
um

123
00:05:08,479 --> 00:05:11,919
in this case we have an ops team that

124
00:05:11,919 --> 00:05:14,479
are responsible to promote software

125
00:05:14,479 --> 00:05:17,600
right to production environment right

126
00:05:17,600 --> 00:05:18,560
obviously

127
00:05:18,560 --> 00:05:20,639
this is a big

128
00:05:20,639 --> 00:05:21,919
bottleneck

129
00:05:21,919 --> 00:05:24,080
and need more people in ops team to

130
00:05:24,080 --> 00:05:26,560
manage the process to deploy new

131
00:05:26,560 --> 00:05:30,320
releases to to produce you right

132
00:05:30,320 --> 00:05:34,800
but it could be worse that if we don't

133
00:05:34,800 --> 00:05:35,759
have

134
00:05:35,759 --> 00:05:36,560
a

135
00:05:36,560 --> 00:05:38,080
c see

136
00:05:38,080 --> 00:05:39,120
right

137
00:05:39,120 --> 00:05:40,000
if we

138
00:05:40,000 --> 00:05:41,600
let's remove the

139
00:05:41,600 --> 00:05:45,120
that's ps that's the element now

140
00:05:45,120 --> 00:05:48,320
uh that user upload to the control

141
00:05:48,320 --> 00:05:50,800
system to the software control system

142
00:05:50,800 --> 00:05:54,000
then will be sent to the ops team

143
00:05:54,000 --> 00:05:58,400
right this is a bit more uh

144
00:05:58,639 --> 00:06:00,080
a bit more and

145
00:06:00,080 --> 00:06:02,400
hard on the star wars i mean her

146
00:06:02,400 --> 00:06:06,280
scenario i think it's faster

147
00:06:06,400 --> 00:06:09,840
finally we are on the health the head is

148
00:06:09,840 --> 00:06:12,080
where the developers

149
00:06:12,080 --> 00:06:15,600
post their call directly to production

150
00:06:15,600 --> 00:06:18,639
this is a very good scenario for hackers

151
00:06:18,639 --> 00:06:20,639
because

152
00:06:20,639 --> 00:06:22,160
they can

153
00:06:22,160 --> 00:06:23,120
find

154
00:06:23,120 --> 00:06:24,880
a lot of

155
00:06:24,880 --> 00:06:27,440
issues a lot of flaws a lot of both

156
00:06:27,440 --> 00:06:30,479
probably in in production systems yes

157
00:06:30,479 --> 00:06:31,680
manually

158
00:06:31,680 --> 00:06:34,080
we have to say that developers manually

159
00:06:34,080 --> 00:06:36,400
deploy code with no techniques no

160
00:06:36,400 --> 00:06:38,560
automations and that's a very bad

161
00:06:38,560 --> 00:06:41,120
scenario

162
00:06:41,919 --> 00:06:44,159
right

163
00:06:44,479 --> 00:06:46,880
cesar your turn ok

164
00:06:46,880 --> 00:06:51,440
um some reasons next

165
00:06:52,000 --> 00:06:52,800
why

166
00:06:52,800 --> 00:06:55,039
we bother about this

167
00:06:55,039 --> 00:06:56,960
okay we bother because reaching our

168
00:06:56,960 --> 00:06:58,240
customers

169
00:06:58,240 --> 00:07:00,560
more frequently and faster is a

170
00:07:00,560 --> 00:07:02,479
competitive advantage

171
00:07:02,479 --> 00:07:05,759
software leaders shown everyone

172
00:07:05,759 --> 00:07:07,759
that this kind of techniques are

173
00:07:07,759 --> 00:07:10,000
extremely profitable

174
00:07:10,000 --> 00:07:12,560
instead spend several months planning

175
00:07:12,560 --> 00:07:15,280
and develop software now we can change

176
00:07:15,280 --> 00:07:18,400
it in a matter of hours safely

177
00:07:18,400 --> 00:07:20,960
more extreme continuous deployment

178
00:07:20,960 --> 00:07:23,919
techniques per suite that every commit

179
00:07:23,919 --> 00:07:27,360
every commit hits production triggering

180
00:07:27,360 --> 00:07:30,720
tens of deployeds on a single day

181
00:07:30,720 --> 00:07:32,960
next

182
00:07:32,960 --> 00:07:33,680
but

183
00:07:33,680 --> 00:07:34,720
how

184
00:07:34,720 --> 00:07:35,680
how

185
00:07:35,680 --> 00:07:38,800
this becomes so popular nowadays it's

186
00:07:38,800 --> 00:07:41,520
uncommon find a company that is not

187
00:07:41,520 --> 00:07:44,000
using one of these tools to out of

188
00:07:44,000 --> 00:07:47,840
automate at least one software project

189
00:07:47,840 --> 00:07:50,960
in fact new jobs emerge around these

190
00:07:50,960 --> 00:07:54,080
tools like devops software reliability

191
00:07:54,080 --> 00:07:56,240
engineers sex devops all that kind of

192
00:07:56,240 --> 00:07:57,120
stuff

193
00:07:57,120 --> 00:08:00,160
the use of these tools is increasing

194
00:08:00,160 --> 00:08:02,000
year after year

195
00:08:02,000 --> 00:08:07,280
so let's talk about the lingo next

196
00:08:07,759 --> 00:08:10,240
what a pipeline is

197
00:08:10,240 --> 00:08:12,800
in order to achieve tens of deployments

198
00:08:12,800 --> 00:08:15,440
every single day we need to decrease

199
00:08:15,440 --> 00:08:18,319
human factor to its minimum to do this

200
00:08:18,319 --> 00:08:20,319
we need to execute several

201
00:08:20,319 --> 00:08:24,080
software in x specific sequence this

202
00:08:24,080 --> 00:08:27,360
sequence calls pipeline a pipeline it's

203
00:08:27,360 --> 00:08:30,400
made of several steps that can use

204
00:08:30,400 --> 00:08:33,440
some programs and usually its name after

205
00:08:33,440 --> 00:08:37,120
their goal like compile software testing

206
00:08:37,120 --> 00:08:38,080
or

207
00:08:38,080 --> 00:08:40,399
maybe

208
00:08:40,958 --> 00:08:42,719
you know okay

209
00:08:42,719 --> 00:08:46,080
next what a devops is

210
00:08:46,080 --> 00:08:47,760
the struggle between the

211
00:08:47,760 --> 00:08:49,920
development and operations begin became

212
00:08:49,920 --> 00:08:52,080
so intense that we need to change our

213
00:08:52,080 --> 00:08:54,080
company culture to achieve of our

214
00:08:54,080 --> 00:08:55,839
objectives quickly

215
00:08:55,839 --> 00:08:58,880
and from this close collaboration burn a

216
00:08:58,880 --> 00:09:02,160
new being the mighty devops the one who

217
00:09:02,160 --> 00:09:04,160
will bring understanding between these

218
00:09:04,160 --> 00:09:07,360
two worlds and its name is devops

219
00:09:07,360 --> 00:09:09,839
these new partners and with shared

220
00:09:09,839 --> 00:09:12,000
responsibilities which usually no one

221
00:09:12,000 --> 00:09:13,360
cares about

222
00:09:13,360 --> 00:09:16,160
in the past scenario when you have

223
00:09:16,160 --> 00:09:18,640
developers and operations sometimes

224
00:09:18,640 --> 00:09:20,720
these two teams

225
00:09:20,720 --> 00:09:22,399
fight each other

226
00:09:22,399 --> 00:09:26,240
for uh who is the book blame off

227
00:09:26,240 --> 00:09:27,680
okay

228
00:09:27,680 --> 00:09:30,000
next

229
00:09:30,480 --> 00:09:34,000
uh now we have another word is sec what

230
00:09:34,000 --> 00:09:36,880
a debsec ops is

231
00:09:36,880 --> 00:09:39,519
the next obstacle in our way to foster

232
00:09:39,519 --> 00:09:42,160
deployment was security

233
00:09:42,160 --> 00:09:44,240
in the same way the development and

234
00:09:44,240 --> 00:09:46,800
operations did it before now security

235
00:09:46,800 --> 00:09:48,880
must change their mindset to become

236
00:09:48,880 --> 00:09:52,800
allies security usually it's seen as an

237
00:09:52,800 --> 00:09:55,360
stopper in several projects involves

238
00:09:55,360 --> 00:09:57,600
security from the beginning increase

239
00:09:57,600 --> 00:10:00,240
development speed and reduce the risks

240
00:10:00,240 --> 00:10:03,200
leading us now to modern internets like

241
00:10:03,200 --> 00:10:05,839
threat modeling

242
00:10:06,880 --> 00:10:09,200
okay sorry yeah

243
00:10:09,200 --> 00:10:10,079
yeah

244
00:10:10,079 --> 00:10:10,959
now

245
00:10:10,959 --> 00:10:12,079
after that

246
00:10:12,079 --> 00:10:15,519
we'll let's review some

247
00:10:15,519 --> 00:10:19,760
some typical setups or infrastructures

248
00:10:19,760 --> 00:10:22,480
and servers and workflow

249
00:10:22,480 --> 00:10:25,040
there is some typical step uh when we

250
00:10:25,040 --> 00:10:27,760
build software right uh the building

251
00:10:27,760 --> 00:10:31,360
workflow it's it itself is like

252
00:10:31,360 --> 00:10:33,279
uh like the picture we can see this

253
00:10:33,279 --> 00:10:36,560
slide right from code comment c pipeline

254
00:10:36,560 --> 00:10:40,320
cd right but it's not enough

255
00:10:40,320 --> 00:10:41,279
uh

256
00:10:41,279 --> 00:10:44,640
then we split each step and name them we

257
00:10:44,640 --> 00:10:46,320
include

258
00:10:46,320 --> 00:10:47,360
sorry

259
00:10:47,360 --> 00:10:50,160
we include all the development steps and

260
00:10:50,160 --> 00:10:53,279
also we added using a prediction step

261
00:10:53,279 --> 00:10:56,240
because uh they are implied in the solar

262
00:10:56,240 --> 00:10:57,680
development

263
00:10:57,680 --> 00:10:58,880
um

264
00:10:58,880 --> 00:11:01,600
now now we put

265
00:11:01,600 --> 00:11:04,079
our names to software that could be used

266
00:11:04,079 --> 00:11:05,760
in in each step

267
00:11:05,760 --> 00:11:06,959
right

268
00:11:06,959 --> 00:11:10,160
uh we can see that a typical software

269
00:11:10,160 --> 00:11:11,920
component and solar

270
00:11:11,920 --> 00:11:15,680
pss are github travis jenkins

271
00:11:15,680 --> 00:11:18,160
bucket gitlab

272
00:11:18,160 --> 00:11:20,720
and yes iftp

273
00:11:20,720 --> 00:11:23,200
cost some time the developers of

274
00:11:23,200 --> 00:11:25,519
software processes are

275
00:11:25,519 --> 00:11:26,560
a bit

276
00:11:26,560 --> 00:11:30,079
all processors somewhere finally and

277
00:11:30,079 --> 00:11:31,760
seen an ftp

278
00:11:31,760 --> 00:11:33,680
server but

279
00:11:33,680 --> 00:11:35,360
the weaker the server

280
00:11:35,360 --> 00:11:38,240
this is scenario is not enough we need

281
00:11:38,240 --> 00:11:39,519
more pieces

282
00:11:39,519 --> 00:11:41,600
and the pieces the missing pieces are

283
00:11:41,600 --> 00:11:44,320
the deployment provider of course

284
00:11:44,320 --> 00:11:45,040
and

285
00:11:45,040 --> 00:11:48,399
also also as you can see in the right

286
00:11:48,399 --> 00:11:50,320
and on the slide

287
00:11:50,320 --> 00:11:52,240
you also have jurong

288
00:11:52,240 --> 00:11:55,279
duron server and do a different provider

289
00:11:55,279 --> 00:11:56,959
right um

290
00:11:56,959 --> 00:11:58,160
this is the

291
00:11:58,160 --> 00:12:01,440
um the big picture this is the the photo

292
00:12:01,440 --> 00:12:03,680
that we use to explain

293
00:12:03,680 --> 00:12:07,120
each attack in different steps

294
00:12:07,120 --> 00:12:08,839
following uh this

295
00:12:08,839 --> 00:12:11,760
scenario right

296
00:12:11,760 --> 00:12:12,800
caesar

297
00:12:12,800 --> 00:12:14,959
okay

298
00:12:14,959 --> 00:12:18,000
now we are ready to deep dive into the

299
00:12:18,000 --> 00:12:22,160
burning health of pipelines go next

300
00:12:22,160 --> 00:12:26,560
we start in source code if we look our

301
00:12:26,560 --> 00:12:29,440
treasure map we are now on the left side

302
00:12:29,440 --> 00:12:32,079
of it okay

303
00:12:32,079 --> 00:12:36,079
go for it first of all our first foe the

304
00:12:36,079 --> 00:12:38,480
id leaks the internet development

305
00:12:38,480 --> 00:12:40,639
environment links

306
00:12:40,639 --> 00:12:43,440
please don't leak the tiles of your

307
00:12:43,440 --> 00:12:46,000
internal deployment to the internet some

308
00:12:46,000 --> 00:12:48,160
of the ties can be clues to find

309
00:12:48,160 --> 00:12:49,920
security halls

310
00:12:49,920 --> 00:12:52,320
when you are using an integrated

311
00:12:52,320 --> 00:12:54,320
development environment usually these

312
00:12:54,320 --> 00:12:57,920
put some files on your project and these

313
00:12:57,920 --> 00:13:00,480
files must be ignored

314
00:13:00,480 --> 00:13:04,160
you can see there on this picture that

315
00:13:04,160 --> 00:13:06,880
you can access to the code styles and

316
00:13:06,880 --> 00:13:10,399
some cache files product workspace file

317
00:13:10,399 --> 00:13:12,160
files

318
00:13:12,160 --> 00:13:12,880
and

319
00:13:12,880 --> 00:13:15,120
the compiler the encodings

320
00:13:15,120 --> 00:13:18,000
a lot of very interesting things to know

321
00:13:18,000 --> 00:13:21,760
how your company works internally and is

322
00:13:21,760 --> 00:13:24,320
very risky okay

323
00:13:24,320 --> 00:13:26,480
go to next

324
00:13:26,480 --> 00:13:29,279
the bad role granularity okay

325
00:13:29,279 --> 00:13:32,320
sometimes you have no choice to set up

326
00:13:32,320 --> 00:13:33,760
several roles

327
00:13:33,760 --> 00:13:37,040
or maybe you can set permissions on

328
00:13:37,040 --> 00:13:38,959
files or brands

329
00:13:38,959 --> 00:13:41,440
if this is the case you are suffering

330
00:13:41,440 --> 00:13:43,279
bar role generality

331
00:13:43,279 --> 00:13:46,240
some can delete your production code

332
00:13:46,240 --> 00:13:49,040
directly or using other attorneys and

333
00:13:49,040 --> 00:13:51,600
you never know who was

334
00:13:51,600 --> 00:13:53,680
if you can control

335
00:13:53,680 --> 00:13:55,920
how your files are

336
00:13:55,920 --> 00:13:57,600
managed

337
00:13:57,600 --> 00:13:59,760
somewhere by error or

338
00:13:59,760 --> 00:14:03,199
someone someone evil can delete all your

339
00:14:03,199 --> 00:14:07,680
work and also even change your

340
00:14:07,680 --> 00:14:10,240
source code history and you never know

341
00:14:10,240 --> 00:14:11,519
that that

342
00:14:11,519 --> 00:14:12,880
was

343
00:14:12,880 --> 00:14:15,880
happening

344
00:14:18,160 --> 00:14:20,480
a little note there

345
00:14:20,480 --> 00:14:22,639
this can be even worse because all this

346
00:14:22,639 --> 00:14:25,680
stuff can happen in the

347
00:14:25,680 --> 00:14:27,680
developer computer

348
00:14:27,680 --> 00:14:29,760
and we say later

349
00:14:29,760 --> 00:14:32,639
we will see later more about this but

350
00:14:32,639 --> 00:14:33,920
some kind of

351
00:14:33,920 --> 00:14:36,160
developers tend to

352
00:14:36,160 --> 00:14:38,720
keep the code only on their computer and

353
00:14:38,720 --> 00:14:42,880
this is also a very risky thing

354
00:14:42,880 --> 00:14:43,680
okay

355
00:14:43,680 --> 00:14:45,839
next

356
00:14:47,279 --> 00:14:50,320
this is um the dev machine has only

357
00:14:50,320 --> 00:14:53,440
source code server as i say moments

358
00:14:53,440 --> 00:14:54,639
before

359
00:14:54,639 --> 00:14:56,240
and you

360
00:14:56,240 --> 00:14:59,760
must ask yourself all these questions

361
00:14:59,760 --> 00:15:03,360
there is a cowboy color in your team

362
00:15:03,360 --> 00:15:06,560
let's see that beautiful image danny

363
00:15:06,560 --> 00:15:08,399
okay sorry

364
00:15:08,399 --> 00:15:09,920
now that's it

365
00:15:09,920 --> 00:15:11,760
have you

366
00:15:11,760 --> 00:15:13,360
you have very time software in

367
00:15:13,360 --> 00:15:16,959
production only managed by one developer

368
00:15:16,959 --> 00:15:19,600
you have a guru developer you have the

369
00:15:19,600 --> 00:15:22,720
correct security at the workplace and

370
00:15:22,720 --> 00:15:25,680
also are your developers buying bring

371
00:15:25,680 --> 00:15:28,639
your own device to your office

372
00:15:28,639 --> 00:15:30,160
all these things

373
00:15:30,160 --> 00:15:35,199
um lead us to this risky thing

374
00:15:35,199 --> 00:15:38,480
and we must avoid it we need to keep

375
00:15:38,480 --> 00:15:41,120
safe or source code

376
00:15:41,120 --> 00:15:44,560
made backups and keep the work pla the

377
00:15:44,560 --> 00:15:48,719
work place safe also

378
00:15:49,440 --> 00:15:52,240
is a good practice that more than one

379
00:15:52,240 --> 00:15:55,920
person is aware of anything that is used

380
00:15:55,920 --> 00:16:00,160
in production if you have this kind of

381
00:16:00,160 --> 00:16:02,959
cowboy encoder that is very active and

382
00:16:02,959 --> 00:16:04,800
do a lot of things when

383
00:16:04,800 --> 00:16:07,920
this person leaves your company can be a

384
00:16:07,920 --> 00:16:10,880
very very a problem a very big problem

385
00:16:10,880 --> 00:16:11,759
because

386
00:16:11,759 --> 00:16:14,399
they leave the

387
00:16:14,399 --> 00:16:17,440
know-how of all these things okay let's

388
00:16:17,440 --> 00:16:20,000
go next

389
00:16:21,360 --> 00:16:23,839
okay

390
00:16:24,399 --> 00:16:27,759
another typical site where developers go

391
00:16:27,759 --> 00:16:31,040
when they have doubt is stack overflow

392
00:16:31,040 --> 00:16:32,959
and these are the copy and paste the

393
00:16:32,959 --> 00:16:35,519
source code that people write on the

394
00:16:35,519 --> 00:16:38,880
stack overflow but we know that they did

395
00:16:38,880 --> 00:16:41,199
that's the reason because we can phone

396
00:16:41,199 --> 00:16:44,240
news like this the most copied pieces

397
00:16:44,240 --> 00:16:46,639
java code on the stack before contains

398
00:16:46,639 --> 00:16:47,759
an error

399
00:16:47,759 --> 00:16:48,720
but

400
00:16:48,720 --> 00:16:49,600
is

401
00:16:49,600 --> 00:16:50,560
if

402
00:16:50,560 --> 00:16:53,279
the piece of the of code have

403
00:16:53,279 --> 00:16:57,040
and small turians it was copy two

404
00:16:57,040 --> 00:16:59,920
i think that the answer could be

405
00:16:59,920 --> 00:17:01,040
probably

406
00:17:01,040 --> 00:17:02,720
then

407
00:17:02,720 --> 00:17:05,439
please don't copy and paste source code

408
00:17:05,439 --> 00:17:08,880
without analyze it

409
00:17:09,280 --> 00:17:10,559
okay

410
00:17:10,559 --> 00:17:13,039
our libraries allow

411
00:17:13,039 --> 00:17:15,439
developers

412
00:17:15,439 --> 00:17:18,319
very often are trusted and usually don't

413
00:17:18,319 --> 00:17:21,039
check a pencil library that they use

414
00:17:21,039 --> 00:17:23,599
and they don't check if libraries have

415
00:17:23,599 --> 00:17:27,359
laboratories or trillian or if they have

416
00:17:27,359 --> 00:17:28,880
some cbe

417
00:17:28,880 --> 00:17:34,720
er in the diversity they are using um

418
00:17:34,720 --> 00:17:38,240
as you can see okay

419
00:17:38,240 --> 00:17:39,520
let me

420
00:17:39,520 --> 00:17:41,919
oh sorry and turn into i

421
00:17:41,919 --> 00:17:43,520
right

422
00:17:43,520 --> 00:17:46,160
in this news we can see that popular

423
00:17:46,160 --> 00:17:48,320
javascript library was infected with a

424
00:17:48,320 --> 00:17:50,400
malware that is still bitcoin from

425
00:17:50,400 --> 00:17:53,520
wallet right this th this kind of things

426
00:17:53,520 --> 00:17:55,120
happens and we

427
00:17:55,120 --> 00:17:57,360
uh

428
00:17:57,360 --> 00:18:00,400
then on secret analytics something

429
00:18:00,400 --> 00:18:03,679
people forgot that i did a repository

430
00:18:03,679 --> 00:18:06,160
certain contains sensitive data

431
00:18:06,160 --> 00:18:07,200
sometimes

432
00:18:07,200 --> 00:18:10,320
by neglect and other because they don't

433
00:18:10,320 --> 00:18:12,160
know that git

434
00:18:12,160 --> 00:18:15,039
is not a backup system

435
00:18:15,039 --> 00:18:18,480
they put sensitive data into them

436
00:18:18,480 --> 00:18:19,840
in the slide

437
00:18:19,840 --> 00:18:23,840
okay let me pass yeah it is like in the

438
00:18:23,840 --> 00:18:26,960
slice picture we can see real sensitive

439
00:18:26,960 --> 00:18:29,919
data and probably get a repository and

440
00:18:29,919 --> 00:18:32,880
then i invite you to

441
00:18:32,880 --> 00:18:36,480
to use the github search

442
00:18:36,480 --> 00:18:40,160
inbox um put this just a string on

443
00:18:40,160 --> 00:18:43,600
something similar and you can find a lot

444
00:18:43,600 --> 00:18:45,760
of repositories with sensitive data be

445
00:18:45,760 --> 00:18:47,440
careful with that

446
00:18:47,440 --> 00:18:50,080
very popular one

447
00:18:50,080 --> 00:18:54,799
and very useful useful right

448
00:18:55,520 --> 00:18:57,679
okay now we move from the building a

449
00:18:57,679 --> 00:18:59,280
step right the

450
00:18:59,280 --> 00:19:00,400
uh move

451
00:19:00,400 --> 00:19:04,160
right um following the robot diagram on

452
00:19:04,160 --> 00:19:06,640
our in the middle left and building a

453
00:19:06,640 --> 00:19:07,760
step

454
00:19:07,760 --> 00:19:10,880
right now we are and control our default

455
00:19:10,880 --> 00:19:13,600
repository okay the first case in the

456
00:19:13,600 --> 00:19:16,240
building step that will cover is the

457
00:19:16,240 --> 00:19:19,360
right active artifact repository control

458
00:19:19,360 --> 00:19:21,520
because um

459
00:19:21,520 --> 00:19:24,720
we should control not suit we must

460
00:19:24,720 --> 00:19:27,440
control what a developer can publish to

461
00:19:27,440 --> 00:19:29,840
a teflon repository otherwise

462
00:19:29,840 --> 00:19:33,440
they can publish malicious artifacts

463
00:19:33,440 --> 00:19:34,720
what happens

464
00:19:34,720 --> 00:19:37,679
if they probably sat regulates

465
00:19:37,679 --> 00:19:39,200
rt5

466
00:19:39,200 --> 00:19:41,840
what happened when production system

467
00:19:41,840 --> 00:19:43,679
deployed this

468
00:19:43,679 --> 00:19:47,280
artifact to production environment

469
00:19:47,280 --> 00:19:50,640
right that will happen is that where

470
00:19:50,640 --> 00:19:52,880
we will have a backdoor in our

471
00:19:52,880 --> 00:19:57,039
production system and this always is uh

472
00:19:57,039 --> 00:19:59,360
not good business right

473
00:19:59,360 --> 00:20:00,400
please

474
00:20:00,400 --> 00:20:02,480
uh check it

475
00:20:02,480 --> 00:20:03,600
okay

476
00:20:03,600 --> 00:20:06,320
the environment leak it's very common in

477
00:20:06,320 --> 00:20:11,120
cocd systems store sensitive data

478
00:20:11,760 --> 00:20:15,200
like production apks credential even

479
00:20:15,200 --> 00:20:18,000
amazon secret keys and so on

480
00:20:18,000 --> 00:20:21,679
in variables usually usually this data

481
00:20:21,679 --> 00:20:23,760
will pass to c

482
00:20:23,760 --> 00:20:27,520
as intelligence environments

483
00:20:27,520 --> 00:20:30,159
variables um

484
00:20:30,159 --> 00:20:32,880
if these variables are not protected in

485
00:20:32,880 --> 00:20:36,159
c system someone with access to the

486
00:20:36,159 --> 00:20:39,600
the c or cd system can print these

487
00:20:39,600 --> 00:20:42,240
variables and of course if they print

488
00:20:42,240 --> 00:20:45,200
these variables

489
00:20:45,440 --> 00:20:47,200
they can read the content of the

490
00:20:47,200 --> 00:20:50,880
environment is very obvious right but

491
00:20:50,880 --> 00:20:53,520
all of c cd says they have a solution to

492
00:20:53,520 --> 00:20:55,600
protect the variables that contain

493
00:20:55,600 --> 00:20:58,240
sensitive data as you can see in the

494
00:20:58,240 --> 00:21:01,360
in this pictures gitlab for example for

495
00:21:01,360 --> 00:21:02,559
example

496
00:21:02,559 --> 00:21:04,240
um

497
00:21:04,240 --> 00:21:06,240
a core

498
00:21:06,240 --> 00:21:09,120
or have an special kind of environment

499
00:21:09,120 --> 00:21:12,080
variable that they call as protected

500
00:21:12,080 --> 00:21:14,720
and github has this special medium

501
00:21:14,720 --> 00:21:18,400
variables that they call secrets

502
00:21:18,400 --> 00:21:21,600
and this type of variable are not shown

503
00:21:21,600 --> 00:21:23,120
in the ccd

504
00:21:23,120 --> 00:21:26,320
a console even if a user

505
00:21:26,320 --> 00:21:30,000
uh print their content and want to read

506
00:21:30,000 --> 00:21:32,000
their content and then please it's very

507
00:21:32,000 --> 00:21:35,120
easy then use it

508
00:21:35,120 --> 00:21:37,120
okay this is a very nice

509
00:21:37,120 --> 00:21:39,919
attack is a reverse shell in the

510
00:21:39,919 --> 00:21:41,200
pipeline

511
00:21:41,200 --> 00:21:44,559
all the developers have a limited access

512
00:21:44,559 --> 00:21:45,919
to the c

513
00:21:45,919 --> 00:21:48,799
right so they see system uh when i say

514
00:21:48,799 --> 00:21:51,120
limited access and referring by using

515
00:21:51,120 --> 00:21:54,159
arrow-based system for example they have

516
00:21:54,159 --> 00:21:56,960
a developer role not an admin uh to the

517
00:21:56,960 --> 00:21:58,480
c system but

518
00:21:58,480 --> 00:22:02,080
um if they can execute arbitrary

519
00:22:02,080 --> 00:22:05,520
binaries for example netcat is a very

520
00:22:05,520 --> 00:22:09,520
common uh binary that is the most of the

521
00:22:09,520 --> 00:22:12,480
unique systems they could create

522
00:22:12,480 --> 00:22:14,400
a reverse cell

523
00:22:14,400 --> 00:22:18,240
um if the c system doesn't doesn't

524
00:22:18,240 --> 00:22:20,799
control the access to the internet

525
00:22:20,799 --> 00:22:24,400
analysis developers could open a remote

526
00:22:24,400 --> 00:22:27,440
backdoor in uc system

527
00:22:27,440 --> 00:22:28,240
right

528
00:22:28,240 --> 00:22:30,400
then let's see

529
00:22:30,400 --> 00:22:35,840
uh in a small demo as a video

530
00:22:36,080 --> 00:22:39,520
okay this is a fun picture

531
00:22:39,679 --> 00:22:41,200
okay

532
00:22:41,200 --> 00:22:43,280
in this video

533
00:22:43,280 --> 00:22:45,039
we'll

534
00:22:45,039 --> 00:22:48,159
uh put netcat to listen and they went to

535
00:22:48,159 --> 00:22:50,080
three four port

536
00:22:50,080 --> 00:22:51,039
right

537
00:22:51,039 --> 00:22:55,520
waiting for the connection and then

538
00:22:55,520 --> 00:22:58,159
in jenkins very famous right

539
00:22:58,159 --> 00:23:00,000
we'll

540
00:23:00,000 --> 00:23:03,120
create an squid console right nothing is

541
00:23:03,120 --> 00:23:06,080
strained until now

542
00:23:07,280 --> 00:23:08,960
but but

543
00:23:08,960 --> 00:23:10,960
the thing that we are doing

544
00:23:10,960 --> 00:23:12,240
is

545
00:23:12,240 --> 00:23:14,240
to connect

546
00:23:14,240 --> 00:23:16,640
to our

547
00:23:16,640 --> 00:23:17,760
netcat

548
00:23:17,760 --> 00:23:21,440
service that just put listen right uh

549
00:23:21,440 --> 00:23:22,799
you can see

550
00:23:22,799 --> 00:23:24,240
we created our

551
00:23:24,240 --> 00:23:27,200
reverse cell and in this case we use

552
00:23:27,200 --> 00:23:30,080
metasploitable meters yeah i mean

553
00:23:30,080 --> 00:23:32,640
exploit connect and then at this moment

554
00:23:32,640 --> 00:23:33,600
we have

555
00:23:33,600 --> 00:23:35,919
a cell in the c system in this case is a

556
00:23:35,919 --> 00:23:38,080
microsoft windows right it's very easy

557
00:23:38,080 --> 00:23:42,399
this is a talk about very very powerful

558
00:23:43,600 --> 00:23:46,720
okay let's talk about a little the the

559
00:23:46,720 --> 00:23:49,360
github actions

560
00:23:49,360 --> 00:23:52,240
the evil they have actions in fact

561
00:23:52,240 --> 00:23:53,760
the code that you

562
00:23:53,760 --> 00:23:56,559
that you use in your g-hub actions who

563
00:23:56,559 --> 00:23:58,159
is written by

564
00:23:58,159 --> 00:24:01,760
maybe they have evil objectives uh we

565
00:24:01,760 --> 00:24:04,080
all know how a contributor and they have

566
00:24:04,080 --> 00:24:06,080
actions start to send all environment

567
00:24:06,080 --> 00:24:08,320
variables to their burden to harvard

568
00:24:08,320 --> 00:24:11,039
secrets this vulnerability is known as

569
00:24:11,039 --> 00:24:13,679
codecov

570
00:24:13,760 --> 00:24:16,799
please use trusted popular actions and

571
00:24:16,799 --> 00:24:20,799
check the latest changes frequently also

572
00:24:20,799 --> 00:24:24,240
it's very important that

573
00:24:24,240 --> 00:24:27,120
agents have a good firewall and don't

574
00:24:27,120 --> 00:24:28,960
access the internet if they are not

575
00:24:28,960 --> 00:24:31,360
meant to

576
00:24:31,600 --> 00:24:32,400
also

577
00:24:32,400 --> 00:24:34,240
your pipeline has critical deploy

578
00:24:34,240 --> 00:24:36,960
information and be aware of that kind of

579
00:24:36,960 --> 00:24:38,159
actions

580
00:24:38,159 --> 00:24:39,840
that you use

581
00:24:39,840 --> 00:24:43,200
and how they use this information danny

582
00:24:43,200 --> 00:24:45,600
say a moment ago that environment

583
00:24:45,600 --> 00:24:47,039
variables

584
00:24:47,039 --> 00:24:49,120
are very important because our secrets

585
00:24:49,120 --> 00:24:51,200
lie there and it's a very important

586
00:24:51,200 --> 00:24:53,919
thing that i want to stop and i mean to

587
00:24:53,919 --> 00:24:56,559
talk about please protect your

588
00:24:56,559 --> 00:24:58,840
environment okay

589
00:24:58,840 --> 00:25:02,960
next other thing that commonly we found

590
00:25:02,960 --> 00:25:06,400
on the say cd systems

591
00:25:06,400 --> 00:25:08,720
is a a mighty bot

592
00:25:08,720 --> 00:25:10,799
delivery software in a company is a very

593
00:25:10,799 --> 00:25:13,440
demanding task we feel tempted by

594
00:25:13,440 --> 00:25:14,640
shortcuts

595
00:25:14,640 --> 00:25:18,559
like do all ci actions by only

596
00:25:18,559 --> 00:25:22,000
one an almighty bot account

597
00:25:22,000 --> 00:25:25,919
if someone has bought credentials for

598
00:25:25,919 --> 00:25:28,559
some automation tasks he has access to

599
00:25:28,559 --> 00:25:31,600
everything and that is so spooky

600
00:25:31,600 --> 00:25:34,000
use correct amount of service accounts

601
00:25:34,000 --> 00:25:36,559
to the tasks that require it keep in

602
00:25:36,559 --> 00:25:40,240
mind that the bot user can do what

603
00:25:40,240 --> 00:25:43,440
developer demands because most

604
00:25:43,440 --> 00:25:47,279
continuous delivery systems use a

605
00:25:47,279 --> 00:25:50,159
software to

606
00:25:50,159 --> 00:25:53,039
do their actions and you can write any

607
00:25:53,039 --> 00:25:55,279
kind of software that you want there

608
00:25:55,279 --> 00:25:56,480
so if

609
00:25:56,480 --> 00:25:59,120
the bot has all permissions

610
00:25:59,120 --> 00:26:01,679
and by extension the developer has all

611
00:26:01,679 --> 00:26:03,600
permissions too

612
00:26:03,600 --> 00:26:07,039
okay let's move to the next that's the

613
00:26:07,039 --> 00:26:09,440
evil agent okay

614
00:26:09,440 --> 00:26:12,080
if you can download and execute any

615
00:26:12,080 --> 00:26:14,240
program you can use a continuous

616
00:26:14,240 --> 00:26:16,799
deployment agent to perform

617
00:26:16,799 --> 00:26:20,159
any evil action that you want but we see

618
00:26:20,159 --> 00:26:22,840
as we see in a moment ago danny opened a

619
00:26:22,840 --> 00:26:24,799
netcat but

620
00:26:24,799 --> 00:26:27,039
it is in that case the netcat is in

621
00:26:27,039 --> 00:26:29,360
their machine but you can do the same

622
00:26:29,360 --> 00:26:31,840
from the pipeline you can download

623
00:26:31,840 --> 00:26:34,400
binary a static link

624
00:26:34,400 --> 00:26:37,039
in your pipeline and execute it

625
00:26:37,039 --> 00:26:38,960
so

626
00:26:38,960 --> 00:26:42,880
if file permissions are not correct

627
00:26:42,880 --> 00:26:45,760
uh the pipeline also can infect with

628
00:26:45,760 --> 00:26:49,760
malware an agent and uses as a zombie on

629
00:26:49,760 --> 00:26:51,520
a botnet so

630
00:26:51,520 --> 00:26:53,679
be aware of that okay

631
00:26:53,679 --> 00:26:57,760
let's see in this small video how

632
00:26:57,760 --> 00:27:00,720
this attack works

633
00:27:01,200 --> 00:27:02,720
a moment i

634
00:27:02,720 --> 00:27:06,039
that's it

635
00:27:07,919 --> 00:27:11,440
now we see we will see how we can from a

636
00:27:11,440 --> 00:27:12,960
pipeline with

637
00:27:12,960 --> 00:27:16,320
any problem download and execute any

638
00:27:16,320 --> 00:27:18,000
software that we want

639
00:27:18,000 --> 00:27:21,600
and we can do this because this jenkins

640
00:27:21,600 --> 00:27:22,480
is

641
00:27:22,480 --> 00:27:25,360
with the file configurations security

642
00:27:25,360 --> 00:27:29,200
and with no internet control access

643
00:27:29,200 --> 00:27:33,120
that's the cool for the download

644
00:27:33,520 --> 00:27:35,919
we are the loading map

645
00:27:35,919 --> 00:27:38,960
yes a map that is a very useful software

646
00:27:38,960 --> 00:27:41,520
to look your surrounding and maybe a

647
00:27:41,520 --> 00:27:44,720
little step and that is running and

648
00:27:44,720 --> 00:27:46,399
looking all of

649
00:27:46,399 --> 00:27:50,399
our network that's it

650
00:27:50,720 --> 00:27:52,559
okay

651
00:27:52,559 --> 00:27:55,200
so we know that that's the thing

652
00:27:55,200 --> 00:27:56,320
uh

653
00:27:56,320 --> 00:27:58,399
how we learn from this limit internet

654
00:27:58,399 --> 00:28:00,960
access in the pipeline perform a correct

655
00:28:00,960 --> 00:28:03,679
hardening of the infrastructure and fix

656
00:28:03,679 --> 00:28:06,080
the execution permissions and we say

657
00:28:06,080 --> 00:28:09,120
that jenkins is on default settings okay

658
00:28:09,120 --> 00:28:11,918
move next

659
00:28:12,080 --> 00:28:13,520
docker hub leak

660
00:28:13,520 --> 00:28:15,360
that's a very interesting one some

661
00:28:15,360 --> 00:28:18,000
useful docker command can publish on

662
00:28:18,000 --> 00:28:21,039
docker hub easily and you can send the

663
00:28:21,039 --> 00:28:23,840
image full of secrets to a public docker

664
00:28:23,840 --> 00:28:25,279
half profile

665
00:28:25,279 --> 00:28:27,760
without even notice if you are using

666
00:28:27,760 --> 00:28:31,200
your computer is very common mistake do

667
00:28:31,200 --> 00:28:33,679
a docker publish and publish to the

668
00:28:33,679 --> 00:28:34,960
wrong place

669
00:28:34,960 --> 00:28:36,399
so

670
00:28:36,399 --> 00:28:38,559
you must to ask yourself if you have

671
00:28:38,559 --> 00:28:41,520
your own container registry if you check

672
00:28:41,520 --> 00:28:45,120
that your docker files are correctly

673
00:28:45,120 --> 00:28:46,159
right

674
00:28:46,159 --> 00:28:48,640
and your pipelines has permission and

675
00:28:48,640 --> 00:28:50,880
access to publish in a docker half

676
00:28:50,880 --> 00:28:52,320
and

677
00:28:52,320 --> 00:28:54,799
it's also good practice allow only some

678
00:28:54,799 --> 00:28:57,200
agents to publish image and check docker

679
00:28:57,200 --> 00:28:59,600
layer contents also check the docker

680
00:28:59,600 --> 00:29:02,399
file and we have a notice

681
00:29:02,399 --> 00:29:04,000
a new there

682
00:29:04,000 --> 00:29:05,840
misconfigured joker registry could be

683
00:29:05,840 --> 00:29:08,480
confidential data leads to a full scale

684
00:29:08,480 --> 00:29:09,840
compromise and interrupt the business

685
00:29:09,840 --> 00:29:12,000
operations it happened that scene that i

686
00:29:12,000 --> 00:29:15,200
say a moment before a docker publisher

687
00:29:15,200 --> 00:29:17,279
we have a very big problem okay

688
00:29:17,279 --> 00:29:19,840
move next

689
00:29:19,840 --> 00:29:22,960
keep your api safe nowadays it's common

690
00:29:22,960 --> 00:29:25,279
to have several apis in your company so

691
00:29:25,279 --> 00:29:27,840
usually some programs call to company

692
00:29:27,840 --> 00:29:28,880
apa

693
00:29:28,880 --> 00:29:29,919
also

694
00:29:29,919 --> 00:29:33,679
do not open all apa to the internet only

695
00:29:33,679 --> 00:29:35,520
those who need it

696
00:29:35,520 --> 00:29:39,120
so as you're safe do you use the apa do

697
00:29:39,120 --> 00:29:43,360
you control the ci cd network access

698
00:29:43,360 --> 00:29:45,679
some tips disable access from

699
00:29:45,679 --> 00:29:48,480
unnecessary places with a firewall we

700
00:29:48,480 --> 00:29:50,080
saved several times

701
00:29:50,080 --> 00:29:52,799
do not install vulnerable plugins we

702
00:29:52,799 --> 00:29:55,919
have the two security

703
00:29:55,919 --> 00:29:58,480
there in the in the

704
00:29:58,480 --> 00:30:00,080
screen to see

705
00:30:00,080 --> 00:30:01,440
okay

706
00:30:01,440 --> 00:30:03,520
more things

707
00:30:03,520 --> 00:30:06,240
source code run somewhere

708
00:30:06,240 --> 00:30:08,399
have your own source source control

709
00:30:08,399 --> 00:30:10,399
server is very convenient but keep it

710
00:30:10,399 --> 00:30:13,279
safe it's not so easy in fact this kind

711
00:30:13,279 --> 00:30:15,360
of servers with ransomware or create a

712
00:30:15,360 --> 00:30:17,840
ransomware that use client permissions

713
00:30:17,840 --> 00:30:21,360
to wipe and fifa user repositories is

714
00:30:21,360 --> 00:30:24,080
already a used technique

715
00:30:24,080 --> 00:30:26,559
don't keep the details of this api on

716
00:30:26,559 --> 00:30:28,640
public code and keep a correct

717
00:30:28,640 --> 00:30:30,960
authentication and authorization methods

718
00:30:30,960 --> 00:30:32,799
for this kind of servers

719
00:30:32,799 --> 00:30:35,919
more suitable to happen those that use

720
00:30:35,919 --> 00:30:38,399
their own machines and mix personal

721
00:30:38,399 --> 00:30:40,559
unprofessional configurations please

722
00:30:40,559 --> 00:30:43,120
don't do that

723
00:30:43,120 --> 00:30:45,679
and also if a ransomware exists because

724
00:30:45,679 --> 00:30:48,880
it works check permissions duba caps

725
00:30:48,880 --> 00:30:53,279
another tip another new about

726
00:30:53,760 --> 00:30:55,760
hackers doing this

727
00:30:55,760 --> 00:30:57,440
okay

728
00:30:57,440 --> 00:30:58,880
move next

729
00:30:58,880 --> 00:31:01,600
the fact docker an evil docker ladder

730
00:31:01,600 --> 00:31:04,480
can contain software and grow massively

731
00:31:04,480 --> 00:31:06,960
on deploy this can prevent to your

732
00:31:06,960 --> 00:31:10,000
company as a sample to deploy security a

733
00:31:10,000 --> 00:31:11,679
security patch

734
00:31:11,679 --> 00:31:14,559
try to use only official image and keep

735
00:31:14,559 --> 00:31:17,120
a local image repository if you can

736
00:31:17,120 --> 00:31:19,760
sometimes a fact docker appears as the

737
00:31:19,760 --> 00:31:22,640
result of back coding but can slow all

738
00:31:22,640 --> 00:31:27,440
your company delivery actions massively

739
00:31:27,440 --> 00:31:29,120
okay

740
00:31:29,120 --> 00:31:33,639
okay i love the picture sorry

741
00:31:34,640 --> 00:31:36,799
the evil docker twin very easy to

742
00:31:36,799 --> 00:31:39,039
perform and very dangerous build an

743
00:31:39,039 --> 00:31:41,279
ability joker container is very easy and

744
00:31:41,279 --> 00:31:43,679
poison you can say also it is

745
00:31:43,679 --> 00:31:46,000
keep under control your docker bills and

746
00:31:46,000 --> 00:31:48,799
please use lighter verification

747
00:31:48,799 --> 00:31:50,960
in your docker files that numbers that

748
00:31:50,960 --> 00:31:54,320
go just the right of from

749
00:31:54,320 --> 00:31:55,919
alpine maybe

750
00:31:55,919 --> 00:31:57,279
okay

751
00:31:57,279 --> 00:31:58,799
push a new docker image from your

752
00:31:58,799 --> 00:32:01,679
pipeline called alpine is a simple test

753
00:32:01,679 --> 00:32:03,760
to check this if you

754
00:32:03,760 --> 00:32:06,480
can anyone on your organization can do a

755
00:32:06,480 --> 00:32:08,799
huge damage in your deploy systems

756
00:32:08,799 --> 00:32:12,640
because they have a complete ladder to

757
00:32:12,640 --> 00:32:13,840
enjoy

758
00:32:13,840 --> 00:32:16,879
okay move next

759
00:32:17,919 --> 00:32:19,200
okay

760
00:32:19,200 --> 00:32:22,559
the greedy service consumer these things

761
00:32:22,559 --> 00:32:25,279
we see happening sometimes

762
00:32:25,279 --> 00:32:28,480
if you use an external service be aware

763
00:32:28,480 --> 00:32:31,840
of the limits some api limit the amount

764
00:32:31,840 --> 00:32:34,480
of calls by ip if your continuous

765
00:32:34,480 --> 00:32:36,640
integration or continuous deployment has

766
00:32:36,640 --> 00:32:38,640
only one public ip

767
00:32:38,640 --> 00:32:39,600
and

768
00:32:39,600 --> 00:32:42,240
you have a graded user of one service

769
00:32:42,240 --> 00:32:44,559
you can deplete the limits and let other

770
00:32:44,559 --> 00:32:48,480
services stuck in your pipelines

771
00:32:48,480 --> 00:32:51,279
keep in mind things like github big

772
00:32:51,279 --> 00:32:53,200
companies a lot of person accessing

773
00:32:53,200 --> 00:32:56,960
github and then all the thing

774
00:32:56,960 --> 00:33:00,480
stop to work because you reach the limit

775
00:33:00,480 --> 00:33:03,840
okay now next

776
00:33:04,559 --> 00:33:07,519
the deployment step okay now we see the

777
00:33:07,519 --> 00:33:09,919
map we are not on the right side of the

778
00:33:09,919 --> 00:33:11,080
map

779
00:33:11,080 --> 00:33:12,960
[Music]

780
00:33:12,960 --> 00:33:15,760
we are almost in production

781
00:33:15,760 --> 00:33:16,559
okay

782
00:33:16,559 --> 00:33:18,640
a room free internet

783
00:33:18,640 --> 00:33:22,159
production sector secrets lay on ci city

784
00:33:22,159 --> 00:33:24,880
until they are deployed so security

785
00:33:24,880 --> 00:33:27,519
concerns must be as important as

786
00:33:27,519 --> 00:33:30,559
production we usually forgotten resource

787
00:33:30,559 --> 00:33:32,960
is internet access keep accurate

788
00:33:32,960 --> 00:33:35,799
firewall configurations to avoid secrets

789
00:33:35,799 --> 00:33:39,840
exfiltrations or leaks

790
00:33:40,799 --> 00:33:43,919
we say this a lot of times okay a trojan

791
00:33:43,919 --> 00:33:45,120
jar

792
00:33:45,120 --> 00:33:48,640
java rely on jar files to deploy most of

793
00:33:48,640 --> 00:33:52,000
the time tools to build a fajr or

794
00:33:52,000 --> 00:33:55,440
manipulate it at broadly available and

795
00:33:55,440 --> 00:33:57,039
easy to use

796
00:33:57,039 --> 00:34:00,640
the java native interface also allowed

797
00:34:00,640 --> 00:34:03,440
the execution or arbitrary executables

798
00:34:03,440 --> 00:34:06,320
keep an eye on the java jar supply chain

799
00:34:06,320 --> 00:34:07,519
please

800
00:34:07,519 --> 00:34:08,960
is very

801
00:34:08,960 --> 00:34:11,839
very very easy and extremely hard to

802
00:34:11,839 --> 00:34:13,199
detect

803
00:34:13,199 --> 00:34:14,719
without

804
00:34:14,719 --> 00:34:18,000
correct tools like our own artifact

805
00:34:18,000 --> 00:34:22,960
repository okay go ahead danny

806
00:34:23,119 --> 00:34:27,440
now okay uh the ship bomb okay

807
00:34:27,440 --> 00:34:30,879
sibo is an old-fashioned attack but it

808
00:34:30,879 --> 00:34:34,800
can be very dangerous in our c system

809
00:34:34,800 --> 00:34:36,480
it's very easy to create

810
00:34:36,480 --> 00:34:39,520
and explode them right in a brief

811
00:34:39,520 --> 00:34:42,320
acid bomb attack consists in a special

812
00:34:42,320 --> 00:34:46,320
created c5 that when a user tried to

813
00:34:46,320 --> 00:34:50,719
uncompress it the seat bomb get a huge

814
00:34:50,719 --> 00:34:52,879
amount on the space

815
00:34:52,879 --> 00:34:55,679
in your heart almost infinite

816
00:34:55,679 --> 00:34:59,920
until your hardness is completely full

817
00:34:59,920 --> 00:35:03,280
right rc bombs format could be easily

818
00:35:03,280 --> 00:35:04,560
detected

819
00:35:04,560 --> 00:35:05,680
right

820
00:35:05,680 --> 00:35:07,599
with a good hardening

821
00:35:07,599 --> 00:35:08,480
but

822
00:35:08,480 --> 00:35:11,839
there is a new ship a sip bomb variant

823
00:35:11,839 --> 00:35:14,839
that is very hard to detect

824
00:35:14,839 --> 00:35:17,040
um and

825
00:35:17,040 --> 00:35:18,960
in this case we have a problem right

826
00:35:18,960 --> 00:35:20,079
okay

827
00:35:20,079 --> 00:35:21,680
the most interesting

828
00:35:21,680 --> 00:35:24,160
about seat bomb is that there is a lot

829
00:35:24,160 --> 00:35:26,240
of software that use

830
00:35:26,240 --> 00:35:27,040
ship

831
00:35:27,040 --> 00:35:30,320
as a package system like microsoft word

832
00:35:30,320 --> 00:35:33,359
java with the jr files

833
00:35:33,359 --> 00:35:37,839
with the word files excels a lot of

834
00:35:37,839 --> 00:35:38,880
there is

835
00:35:38,880 --> 00:35:39,680
some

836
00:35:39,680 --> 00:35:41,200
application servers that deploy new

837
00:35:41,200 --> 00:35:42,480
applications

838
00:35:42,480 --> 00:35:46,000
that was packaged as a ship format like

839
00:35:46,000 --> 00:35:47,440
apache contact

840
00:35:47,440 --> 00:35:51,040
that deployed were files automatically

841
00:35:51,040 --> 00:35:53,520
they were files are sheet format

842
00:35:53,520 --> 00:35:55,359
package file as

843
00:35:55,359 --> 00:35:56,839
i just say

844
00:35:56,839 --> 00:35:59,440
that um

845
00:35:59,440 --> 00:36:00,800
what

846
00:36:00,800 --> 00:36:04,079
okay the question is what if we create

847
00:36:04,079 --> 00:36:06,480
mlis uc bom file

848
00:36:06,480 --> 00:36:08,560
rename us as

849
00:36:08,560 --> 00:36:10,560
a word file

850
00:36:10,560 --> 00:36:12,640
and try to deploy

851
00:36:12,640 --> 00:36:15,280
this application in

852
00:36:15,280 --> 00:36:17,680
in a server like apache tonkat right

853
00:36:17,680 --> 00:36:20,320
what happened if we do that because it's

854
00:36:20,320 --> 00:36:23,839
very very easy to do that you control

855
00:36:23,839 --> 00:36:24,960
the

856
00:36:24,960 --> 00:36:26,400
the cd

857
00:36:26,400 --> 00:36:30,640
or c um workflow this is a a small video

858
00:36:30,640 --> 00:36:31,920
with a

859
00:36:31,920 --> 00:36:34,880
example about that okay before we played

860
00:36:34,880 --> 00:36:37,280
it um

861
00:36:37,280 --> 00:36:39,040
let's see what happens

862
00:36:39,040 --> 00:36:41,359
we have splitted the terminal in three

863
00:36:41,359 --> 00:36:43,200
rows the first one

864
00:36:43,200 --> 00:36:46,240
on the top is so when hard is

865
00:36:46,240 --> 00:36:49,040
free a space before deploy

866
00:36:49,040 --> 00:36:51,520
the the c bomb right the second one is

867
00:36:51,520 --> 00:36:54,720
referring to the free memory memory and

868
00:36:54,720 --> 00:36:58,000
swap memory and third one we can see the

869
00:36:58,000 --> 00:37:00,960
cpu usage

870
00:37:00,960 --> 00:37:02,560
all right now

871
00:37:02,560 --> 00:37:05,440
let's play video

872
00:37:05,440 --> 00:37:09,720
okay no oh yeah okay

873
00:37:10,480 --> 00:37:13,520
no uh we copy the c bomb

874
00:37:13,520 --> 00:37:15,599
to the apache tonka directory when

875
00:37:15,599 --> 00:37:18,000
apache token detected the new file they

876
00:37:18,000 --> 00:37:18,960
try

877
00:37:18,960 --> 00:37:21,440
to deploy it

878
00:37:21,440 --> 00:37:25,599
i will copy the warfight

879
00:37:25,599 --> 00:37:28,560
via ssh

880
00:37:28,720 --> 00:37:32,319
or bias security copy

881
00:37:32,960 --> 00:37:35,520
then we can see how

882
00:37:35,520 --> 00:37:37,200
the uh

883
00:37:37,200 --> 00:37:41,200
the amount of this that the ship pump

884
00:37:41,200 --> 00:37:44,320
get the free the memory until

885
00:37:44,320 --> 00:37:45,200
in

886
00:37:45,200 --> 00:37:46,480
one hour

887
00:37:46,480 --> 00:37:49,200
more or less system breakdown because

888
00:37:49,200 --> 00:37:51,440
that is is for

889
00:37:51,440 --> 00:37:55,920
if this is false means that we also

890
00:37:55,920 --> 00:37:57,359
haven't

891
00:37:57,359 --> 00:37:59,520
free virtual memory

892
00:37:59,520 --> 00:38:02,960
for allocating new processes even for

893
00:38:02,960 --> 00:38:06,240
that the root user can login in a

894
00:38:06,240 --> 00:38:07,839
console to stop

895
00:38:07,839 --> 00:38:09,040
the symbol

896
00:38:09,040 --> 00:38:12,960
right and even more um this attack pass

897
00:38:12,960 --> 00:38:15,359
more uh one hour in this game more or

898
00:38:15,359 --> 00:38:17,839
less it's very very difficult to detect

899
00:38:17,839 --> 00:38:19,119
it

900
00:38:19,119 --> 00:38:20,480
right yes

901
00:38:20,480 --> 00:38:21,520
it's um

902
00:38:21,520 --> 00:38:22,960
funny attack funny if you are the

903
00:38:22,960 --> 00:38:25,359
attacker of course

904
00:38:25,359 --> 00:38:27,440
okay okay to prevent this kind of attack

905
00:38:27,440 --> 00:38:30,000
you must perform accurate hardening of

906
00:38:30,000 --> 00:38:31,280
your system by

907
00:38:31,280 --> 00:38:34,640
limiting how much resources a process

908
00:38:34,640 --> 00:38:38,400
can get it's very simple easier but

909
00:38:38,400 --> 00:38:40,000
very effective

910
00:38:40,000 --> 00:38:43,119
right okay the memory bomb

911
00:38:43,119 --> 00:38:47,359
um not so no not so known as the memory

912
00:38:47,359 --> 00:38:51,040
bond can be sneaky as a bad building

913
00:38:51,040 --> 00:38:53,440
process and kill your machines again and

914
00:38:53,440 --> 00:38:54,320
again

915
00:38:54,320 --> 00:38:57,280
keep in mind that swap is also affected

916
00:38:57,280 --> 00:38:59,760
and can take down your machine what is a

917
00:38:59,760 --> 00:39:02,079
memory bomb a memory bomb is very

918
00:39:02,079 --> 00:39:03,920
similar to the seat bomb but attacks

919
00:39:03,920 --> 00:39:07,200
your memory your active memory your ram

920
00:39:07,200 --> 00:39:09,040
but also your

921
00:39:09,040 --> 00:39:11,200
swap and it's standard running in the

922
00:39:11,200 --> 00:39:12,240
end

923
00:39:12,240 --> 00:39:13,119
okay

924
00:39:13,119 --> 00:39:15,200
what happened if you run a memory bomb

925
00:39:15,200 --> 00:39:16,880
in a continuous integration organize

926
00:39:16,880 --> 00:39:18,880
delivery system what if the continuous

927
00:39:18,880 --> 00:39:22,320
integration is deployed as a multi-agent

928
00:39:22,320 --> 00:39:25,040
let's see a little diagram to see

929
00:39:25,040 --> 00:39:28,240
okay that's the sequence of events first

930
00:39:28,240 --> 00:39:30,240
you put a memory bone in your jenkins

931
00:39:30,240 --> 00:39:32,240
file remember that jji file is source

932
00:39:32,240 --> 00:39:34,400
code you can put everything you want so

933
00:39:34,400 --> 00:39:36,240
the jenkins master send the job to a

934
00:39:36,240 --> 00:39:38,480
jenkins agent and runs the pipeline and

935
00:39:38,480 --> 00:39:41,839
the memory bomb so the jenkins agent

936
00:39:41,839 --> 00:39:44,000
breakdown jinx's master that said that

937
00:39:44,000 --> 00:39:46,000
he would not finish it and send the same

938
00:39:46,000 --> 00:39:48,880
job to another jenkins agent and the

939
00:39:48,880 --> 00:39:50,960
same happen again so

940
00:39:50,960 --> 00:39:55,280
go to stepdos to step two

941
00:39:55,680 --> 00:39:56,800
okay

942
00:39:56,800 --> 00:39:59,280
forward

943
00:40:00,240 --> 00:40:02,160
that's it do we have we have the

944
00:40:02,160 --> 00:40:05,200
ingredients now the demo

945
00:40:05,200 --> 00:40:07,359
let's play it and see what happened with

946
00:40:07,359 --> 00:40:09,839
the memory

947
00:40:09,839 --> 00:40:12,880
execute the pipeline

948
00:40:14,240 --> 00:40:15,119
okay

949
00:40:15,119 --> 00:40:17,839
wait a minute

950
00:40:19,040 --> 00:40:21,200
that's it

951
00:40:21,200 --> 00:40:24,919
we will see the output

952
00:40:25,599 --> 00:40:27,440
in that case we have a

953
00:40:27,440 --> 00:40:29,920
executable file called bom

954
00:40:29,920 --> 00:40:32,079
dot sh

955
00:40:32,079 --> 00:40:34,960
and in a few moments old system will

956
00:40:34,960 --> 00:40:36,160
help and

957
00:40:36,160 --> 00:40:37,760
will not finish

958
00:40:37,760 --> 00:40:40,720
even the machine breaks that's it

959
00:40:40,720 --> 00:40:44,079
we reach everything is frozen even

960
00:40:44,079 --> 00:40:46,720
the jenkins itself froze and

961
00:40:46,720 --> 00:40:47,839
you can

962
00:40:47,839 --> 00:40:51,400
survive this

963
00:40:52,480 --> 00:40:53,839
uh

964
00:40:53,839 --> 00:40:56,160
chicken is compared to frozen

965
00:40:56,160 --> 00:40:58,000
yes you

966
00:40:58,000 --> 00:41:00,640
nothing to do here

967
00:41:00,640 --> 00:41:03,599
okay all the things

968
00:41:03,599 --> 00:41:06,920
wait a minute

969
00:41:10,319 --> 00:41:12,480
now recover from this

970
00:41:12,480 --> 00:41:14,319
not don't recover

971
00:41:14,319 --> 00:41:16,079
we are trying to but

972
00:41:16,079 --> 00:41:18,079
the system is unresponsive in this

973
00:41:18,079 --> 00:41:21,359
moment i'm trying to open a console or

974
00:41:21,359 --> 00:41:24,480
do anything but i can because i execute

975
00:41:24,480 --> 00:41:27,839
this attack on my own machine

976
00:41:28,480 --> 00:41:30,000
sorry

977
00:41:30,000 --> 00:41:32,839
no it's okay let's uh let's

978
00:41:32,839 --> 00:41:35,599
continue uh just to know that memory

979
00:41:35,599 --> 00:41:37,680
bomb is a less known but more effective

980
00:41:37,680 --> 00:41:39,359
and even more effective in docker

981
00:41:39,359 --> 00:41:41,839
because docker has different controls to

982
00:41:41,839 --> 00:41:44,560
the for memory and that kind of stuff

983
00:41:44,560 --> 00:41:46,800
today powerful computers can die very

984
00:41:46,800 --> 00:41:49,280
fast with no clue that what pipeline is

985
00:41:49,280 --> 00:41:50,800
responsible for

986
00:41:50,800 --> 00:41:53,440
is a very fast as you can see and in a

987
00:41:53,440 --> 00:41:55,520
couple of seconds is unresponsive in

988
00:41:55,520 --> 00:41:57,040
responsive

989
00:41:57,040 --> 00:41:58,240
at all

990
00:41:58,240 --> 00:42:00,400
you can lose all your agents before you

991
00:42:00,400 --> 00:42:02,640
find where the problem is

992
00:42:02,640 --> 00:42:04,480
you have this kind of behavior that all

993
00:42:04,480 --> 00:42:08,079
your agents are dying very fast one and

994
00:42:08,079 --> 00:42:10,240
then another one and then another one

995
00:42:10,240 --> 00:42:12,640
check this kind of

996
00:42:12,640 --> 00:42:14,319
scripts

997
00:42:14,319 --> 00:42:15,200
okay

998
00:42:15,200 --> 00:42:18,400
let's move to the next one bomb

999
00:42:18,400 --> 00:42:21,040
and and more traditional the fork bomb

1000
00:42:21,040 --> 00:42:22,160
is

1001
00:42:22,160 --> 00:42:24,240
the all good for bomb

1002
00:42:24,240 --> 00:42:27,040
when you uh

1003
00:42:27,119 --> 00:42:28,240
open

1004
00:42:28,240 --> 00:42:30,560
a lot of process and then your

1005
00:42:30,560 --> 00:42:33,280
system breaks down the all four bomb

1006
00:42:33,280 --> 00:42:35,920
stills still is a problem easy to

1007
00:42:35,920 --> 00:42:38,160
execute from the prime line can have

1008
00:42:38,160 --> 00:42:40,480
similar effects than memory bomb and

1009
00:42:40,480 --> 00:42:42,960
it's more easy to detect if you have

1010
00:42:42,960 --> 00:42:45,599
very very good loss but only in that

1011
00:42:45,599 --> 00:42:47,760
case let's see what happened with

1012
00:42:47,760 --> 00:42:49,280
the fork bomb

1013
00:42:49,280 --> 00:42:53,440
it's the behavior is almost the same

1014
00:42:53,839 --> 00:42:59,160
okay let's go play it that's it

1015
00:43:03,440 --> 00:43:06,160
with a very less criteria for my

1016
00:43:06,160 --> 00:43:08,800
perspective i execute this also on my

1017
00:43:08,800 --> 00:43:10,880
machine

1018
00:43:10,880 --> 00:43:15,920
and die very very fast also

1019
00:43:16,480 --> 00:43:18,560
okay now it's downloaded

1020
00:43:18,560 --> 00:43:19,440
the

1021
00:43:19,440 --> 00:43:22,720
files from the git

1022
00:43:23,520 --> 00:43:25,680
and

1023
00:43:25,680 --> 00:43:29,520
now execute it say that it's success but

1024
00:43:29,520 --> 00:43:31,359
the system is

1025
00:43:31,359 --> 00:43:34,000
also unresponsive and down in the image

1026
00:43:34,000 --> 00:43:37,040
i don't know you can see but the number

1027
00:43:37,040 --> 00:43:40,720
on orange from the left down that is

1028
00:43:40,720 --> 00:43:44,960
like 800 is our cpu usage on my machine

1029
00:43:44,960 --> 00:43:45,839
and

1030
00:43:45,839 --> 00:43:47,920
it's completely gone

1031
00:43:47,920 --> 00:43:48,520
thousand

1032
00:43:48,520 --> 00:43:50,640
[Music]

1033
00:43:50,640 --> 00:43:52,160
twelve hundreds

1034
00:43:52,160 --> 00:43:55,359
a lot of cpu usage and then

1035
00:43:55,359 --> 00:43:57,599
go down my machine also

1036
00:43:57,599 --> 00:44:00,319
totally die

1037
00:44:00,319 --> 00:44:02,480
very fast as you can see that's real

1038
00:44:02,480 --> 00:44:06,000
time in a matter of seconds

1039
00:44:06,000 --> 00:44:08,640
we have a responsive system

1040
00:44:08,640 --> 00:44:10,720
okay we can move next

1041
00:44:10,720 --> 00:44:12,079
yeah

1042
00:44:12,079 --> 00:44:14,880
now i'm pretty sure next

1043
00:44:14,880 --> 00:44:17,839
step now we are focusing on the final

1044
00:44:17,839 --> 00:44:20,800
step of the workflow the productions

1045
00:44:20,800 --> 00:44:22,319
down

1046
00:44:22,319 --> 00:44:26,640
is your api onus right new applications

1047
00:44:26,640 --> 00:44:28,000
are built

1048
00:44:28,000 --> 00:44:29,920
using apis

1049
00:44:29,920 --> 00:44:32,319
uh most of you or

1050
00:44:32,319 --> 00:44:35,520
most of our applications implement

1051
00:44:35,520 --> 00:44:36,400
implement

1052
00:44:36,400 --> 00:44:39,599
api to perform the most common tags that

1053
00:44:39,599 --> 00:44:42,319
usually data we use for example i don't

1054
00:44:42,319 --> 00:44:46,000
know twitter facebook and so on but

1055
00:44:46,000 --> 00:44:48,160
the the new apis

1056
00:44:48,160 --> 00:44:49,520
is the fact

1057
00:44:49,520 --> 00:44:50,400
standard

1058
00:44:50,400 --> 00:44:53,040
right but

1059
00:44:53,040 --> 00:44:56,000
you don't know

1060
00:44:56,960 --> 00:44:59,280
you have not a contract in most of the

1061
00:44:59,280 --> 00:45:00,880
cases

1062
00:45:00,880 --> 00:45:01,920
but

1063
00:45:01,920 --> 00:45:04,720
you don't know if your api's responses

1064
00:45:04,720 --> 00:45:06,640
that you

1065
00:45:06,640 --> 00:45:08,720
expect that they

1066
00:45:08,720 --> 00:45:12,000
should uh respond right

1067
00:45:12,000 --> 00:45:15,280
and that the question is are you sure

1068
00:45:15,280 --> 00:45:17,680
that your api sponsors

1069
00:45:17,680 --> 00:45:19,200
don't add

1070
00:45:19,200 --> 00:45:21,920
more fields that we define

1071
00:45:21,920 --> 00:45:24,640
in the contract

1072
00:45:24,640 --> 00:45:25,760
and

1073
00:45:25,760 --> 00:45:28,319
are you sure that your api doesn't

1074
00:45:28,319 --> 00:45:30,800
respond a different different type of

1075
00:45:30,800 --> 00:45:34,319
data that we define in the contract

1076
00:45:34,319 --> 00:45:37,040
or are you sure that a malicious

1077
00:45:37,040 --> 00:45:40,560
developer can use your api to exfiltrate

1078
00:45:40,560 --> 00:45:45,040
data by using extra fields or your api

1079
00:45:45,040 --> 00:45:46,319
did you

1080
00:45:46,319 --> 00:45:49,359
check that your api around s

1081
00:45:49,359 --> 00:45:50,960
okay

1082
00:45:50,960 --> 00:45:52,640
um

1083
00:45:52,640 --> 00:45:53,920
the

1084
00:45:53,920 --> 00:45:56,960
answer in this case is

1085
00:45:56,960 --> 00:45:59,280
very very very complicated

1086
00:45:59,280 --> 00:46:01,680
um

1087
00:46:01,680 --> 00:46:05,760
you should check that your apa contract

1088
00:46:05,760 --> 00:46:07,359
are following

1089
00:46:07,359 --> 00:46:11,119
um in this case we propose the two tools

1090
00:46:11,119 --> 00:46:14,240
the first one ap check is an open source

1091
00:46:14,240 --> 00:46:17,520
toolset for working with apis

1092
00:46:17,520 --> 00:46:20,880
and the second one is a product

1093
00:46:20,880 --> 00:46:25,040
and for a vendor that's

1094
00:46:25,040 --> 00:46:26,000
have

1095
00:46:26,000 --> 00:46:28,480
test cases to check

1096
00:46:28,480 --> 00:46:30,240
this specific

1097
00:46:30,240 --> 00:46:31,440
um

1098
00:46:31,440 --> 00:46:34,960
issues it does if your apa are honest

1099
00:46:34,960 --> 00:46:36,079
right

1100
00:46:36,079 --> 00:46:38,640
we don't put more tools because

1101
00:46:38,640 --> 00:46:41,440
we don't find it as open so or another

1102
00:46:41,440 --> 00:46:42,820
provider right

1103
00:46:42,820 --> 00:46:44,640
[Music]

1104
00:46:44,640 --> 00:46:45,520
right

1105
00:46:45,520 --> 00:46:48,400
keep secret safe um sometimes

1106
00:46:48,400 --> 00:46:51,920
we forgot that dog images are only a

1107
00:46:51,920 --> 00:46:54,000
package somewhere that could be opened

1108
00:46:54,000 --> 00:46:56,400
by someone in their computer

1109
00:46:56,400 --> 00:46:58,400
us we don't put

1110
00:46:58,400 --> 00:47:00,079
sensitive data

1111
00:47:00,079 --> 00:47:00,960
and

1112
00:47:00,960 --> 00:47:03,839
into an artifact that will be privileged

1113
00:47:03,839 --> 00:47:06,319
in approval repository we must not put

1114
00:47:06,319 --> 00:47:08,480
secret and sensitive data inside the

1115
00:47:08,480 --> 00:47:12,720
container this is obvious right but

1116
00:47:12,720 --> 00:47:14,319
by using

1117
00:47:14,319 --> 00:47:18,240
a simple great command we can find

1118
00:47:18,240 --> 00:47:20,640
expression like content password in a

1119
00:47:20,640 --> 00:47:23,440
docker images after we mount those

1120
00:47:23,440 --> 00:47:24,400
images

1121
00:47:24,400 --> 00:47:26,800
in my local machine and we can find

1122
00:47:26,800 --> 00:47:32,640
easily api kills amazon access case etc

1123
00:47:32,640 --> 00:47:34,400
well okay

1124
00:47:34,400 --> 00:47:36,960
this image okay as you can see in this

1125
00:47:36,960 --> 00:47:39,680
image in 2019

1126
00:47:39,680 --> 00:47:42,720
the fever-free intelligent team

1127
00:47:42,720 --> 00:47:44,400
were analyzed a thousand of the

1128
00:47:44,400 --> 00:47:46,240
kilometers powerless and polluting

1129
00:47:46,240 --> 00:47:49,119
repositories not only docker hub and

1130
00:47:49,119 --> 00:47:51,599
they found a lot of secrets

1131
00:47:51,599 --> 00:47:53,440
inside them there's

1132
00:47:53,440 --> 00:47:57,200
this is uh a real fault is and is is

1133
00:47:57,200 --> 00:47:59,839
very common

1134
00:48:00,319 --> 00:48:02,960
sorry to interrupt you we have about one

1135
00:48:02,960 --> 00:48:04,960
or two minutes uh

1136
00:48:04,960 --> 00:48:08,240
left so if possible please

1137
00:48:08,240 --> 00:48:09,599
please okay

1138
00:48:09,599 --> 00:48:10,880
okay okay

1139
00:48:10,880 --> 00:48:12,559
okay

1140
00:48:12,559 --> 00:48:15,280
well directly to the last demo on the

1141
00:48:15,280 --> 00:48:19,119
infrastructure uh the evil alias and

1142
00:48:19,119 --> 00:48:21,200
these attackers are fashion but useful

1143
00:48:21,200 --> 00:48:22,079
right

1144
00:48:22,079 --> 00:48:24,000
it's someone with access to a machine

1145
00:48:24,000 --> 00:48:26,640
could write a terminal alias it doesn't

1146
00:48:26,640 --> 00:48:28,160
matter the cell

1147
00:48:28,160 --> 00:48:32,000
they are using it it could be anyone um

1148
00:48:32,000 --> 00:48:34,160
the attack consists in replace a

1149
00:48:34,160 --> 00:48:36,240
legitimate command with analysis that

1150
00:48:36,240 --> 00:48:38,720
performs actions before around the real

1151
00:48:38,720 --> 00:48:41,040
command right um

1152
00:48:41,040 --> 00:48:42,960
okay as you can see this

1153
00:48:42,960 --> 00:48:44,079
image

1154
00:48:44,079 --> 00:48:46,880
as some example about

1155
00:48:46,880 --> 00:48:49,680
evil elias right

1156
00:48:49,680 --> 00:48:53,359
but with a demo it's nice

1157
00:48:53,359 --> 00:48:56,640
in this case in this demonstration we'll

1158
00:48:56,640 --> 00:48:58,559
use netcat and

1159
00:48:58,559 --> 00:49:03,760
listen to 1999 port and we use the

1160
00:49:03,760 --> 00:49:07,200
we create a new alias for the ls command

1161
00:49:07,200 --> 00:49:10,559
when a user type or execute an ls

1162
00:49:10,559 --> 00:49:11,599
command

1163
00:49:11,599 --> 00:49:14,559
these alias will send all of the

1164
00:49:14,559 --> 00:49:18,079
environment variables too or um or

1165
00:49:18,079 --> 00:49:19,200
server

1166
00:49:19,200 --> 00:49:21,520
very easy but very powerful

1167
00:49:21,520 --> 00:49:22,319
all right

1168
00:49:22,319 --> 00:49:23,760
now

1169
00:49:23,760 --> 00:49:25,119
we

1170
00:49:25,119 --> 00:49:27,440
reload the new configuration

1171
00:49:27,440 --> 00:49:28,839
and type

1172
00:49:28,839 --> 00:49:30,800
ls

1173
00:49:30,800 --> 00:49:32,559
right and that's it

1174
00:49:32,559 --> 00:49:34,720
very easy if we receive all of uh

1175
00:49:34,720 --> 00:49:36,880
environment variables and it could be

1176
00:49:36,880 --> 00:49:39,359
secrets and so on right

1177
00:49:39,359 --> 00:49:42,480
and finally this are uh infra

1178
00:49:42,480 --> 00:49:44,640
okay let me check if i have okay i have

1179
00:49:44,640 --> 00:49:47,040
no more demos right uh it's very common

1180
00:49:47,040 --> 00:49:49,359
to deploy the system production system

1181
00:49:49,359 --> 00:49:52,160
uh and share network the

1182
00:49:52,160 --> 00:49:54,319
the only thing in this case is please

1183
00:49:54,319 --> 00:49:56,160
use isolated

1184
00:49:56,160 --> 00:49:58,480
network for c

1185
00:49:58,480 --> 00:50:02,160
and the cc cd environment

1186
00:50:02,160 --> 00:50:06,079
uh then your production system

1187
00:50:06,079 --> 00:50:07,119
all right

1188
00:50:07,119 --> 00:50:10,400
okay i'm sorry about that i have no tech

1189
00:50:10,400 --> 00:50:13,680
please the the conclusion if you use dpc

1190
00:50:13,680 --> 00:50:16,079
vlans and something similar

1191
00:50:16,079 --> 00:50:18,800
um that's it the conclusion

1192
00:50:18,800 --> 00:50:21,680
the wrap-up is all this kind of stuff

1193
00:50:21,680 --> 00:50:22,640
we have

1194
00:50:22,640 --> 00:50:23,520
no

1195
00:50:23,520 --> 00:50:24,800
no

1196
00:50:24,800 --> 00:50:26,880
time to this this is only the type of

1197
00:50:26,880 --> 00:50:29,839
iceberg please be aware all of these and

1198
00:50:29,839 --> 00:50:32,720
we can ask us we can reach us in social

1199
00:50:32,720 --> 00:50:36,079
media okay next uh danny

1200
00:50:36,079 --> 00:50:36,960
and

1201
00:50:36,960 --> 00:50:39,200
you can see our twitter we are very

1202
00:50:39,200 --> 00:50:40,640
active on twitter

1203
00:50:40,640 --> 00:50:41,440
ask

1204
00:50:41,440 --> 00:50:43,599
anything any any question that you have

1205
00:50:43,599 --> 00:50:46,400
please no

1206
00:50:47,040 --> 00:50:49,759
all right that's it

