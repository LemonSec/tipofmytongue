1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:07,120 --> 00:00:08,400
nothing like starting off a little bit

3
00:00:08,400 --> 00:00:09,360
with a little bit of technical

4
00:00:09,360 --> 00:00:10,639
difficulty

5
00:00:10,639 --> 00:00:12,080
so just a little bit about me and my

6
00:00:12,080 --> 00:00:13,519
work history and some obligatory

7
00:00:13,519 --> 00:00:15,360
legalese like my introduction said i'm

8
00:00:15,360 --> 00:00:17,520
application security focused i started

9
00:00:17,520 --> 00:00:18,880
as a web application developer and

10
00:00:18,880 --> 00:00:21,680
system i moved on doing develop devops

11
00:00:21,680 --> 00:00:23,279
and then i've done a lot of other duties

12
00:00:23,279 --> 00:00:24,720
as assigned things like incident

13
00:00:24,720 --> 00:00:27,279
response etc the legal stuff this

14
00:00:27,279 --> 00:00:29,199
presentation's personal work the use

15
00:00:29,199 --> 00:00:31,760
express unitedness not reflect those of

16
00:00:31,760 --> 00:00:34,320
truest or bb t or any other entities all

17
00:00:34,320 --> 00:00:35,760
the photos used are believed to either

18
00:00:35,760 --> 00:00:38,320
be mine or public domain

19
00:00:38,320 --> 00:00:39,680
these are my co-presenters for the

20
00:00:39,680 --> 00:00:41,520
evening on the left is munu who may

21
00:00:41,520 --> 00:00:43,280
break in with an exciting announcement

22
00:00:43,280 --> 00:00:45,360
about advanced persistent squirrels on

23
00:00:45,360 --> 00:00:46,800
the right is duck he may just complain

24
00:00:46,800 --> 00:00:50,000
that i'm not currently petting him

25
00:00:50,399 --> 00:00:51,680
to let you know what this talk is gonna

26
00:00:51,680 --> 00:00:52,960
be about i'm gonna start with five

27
00:00:52,960 --> 00:00:54,399
questions

28
00:00:54,399 --> 00:00:56,160
so the first question i started with is

29
00:00:56,160 --> 00:00:58,320
am i or my organization secured against

30
00:00:58,320 --> 00:01:00,640
os top 10 if we have apis

31
00:01:00,640 --> 00:01:02,399
i work in banking so we're highly

32
00:01:02,399 --> 00:01:04,159
regulated and we get questions from

33
00:01:04,159 --> 00:01:05,760
auditors like are we defended against

34
00:01:05,760 --> 00:01:08,560
the last top ten and the problem is or

35
00:01:08,560 --> 00:01:10,560
not problem but the good thing is in

36
00:01:10,560 --> 00:01:13,520
2019 awas spread out a api specific top

37
00:01:13,520 --> 00:01:15,680
10 list but there's a lot of overlap

38
00:01:15,680 --> 00:01:17,680
between the application top 10 there is

39
00:01:17,680 --> 00:01:19,680
some overlap between the application top

40
00:01:19,680 --> 00:01:22,400
10 and the api top 10 lists but really

41
00:01:22,400 --> 00:01:23,920
you have to draw from both to get full

42
00:01:23,920 --> 00:01:26,400
coverage

43
00:01:26,400 --> 00:01:28,080
so the next question

44
00:01:28,080 --> 00:01:29,680
to ask yourself is do you know how the

45
00:01:29,680 --> 00:01:33,040
two top 10 lists differ

46
00:01:33,600 --> 00:01:34,960
that's one of the big goals that i hope

47
00:01:34,960 --> 00:01:36,960
to answer with this talk

48
00:01:36,960 --> 00:01:38,560
next question is which one of the two is

49
00:01:38,560 --> 00:01:40,159
more important to

50
00:01:40,159 --> 00:01:42,720
both testing defending apis and it's a

51
00:01:42,720 --> 00:01:44,000
trick question because they're both

52
00:01:44,000 --> 00:01:46,479
important

53
00:01:47,280 --> 00:01:49,119
then if you're used to testing web

54
00:01:49,119 --> 00:01:50,399
applications what do you have to think

55
00:01:50,399 --> 00:01:51,920
of differently when you're starting to

56
00:01:51,920 --> 00:01:53,280
test apis

57
00:01:53,280 --> 00:01:54,799
a lot of this talk started is kind of

58
00:01:54,799 --> 00:01:56,399
the checklist i developed internally for

59
00:01:56,399 --> 00:01:58,479
when i was testing apis the things i had

60
00:01:58,479 --> 00:02:00,159
to think about differently about api

61
00:02:00,159 --> 00:02:02,560
testing versus application testing

62
00:02:02,560 --> 00:02:04,079
most of the time it just differs as far

63
00:02:04,079 --> 00:02:05,680
as the presentation layer but there are

64
00:02:05,680 --> 00:02:07,119
a few different vulnerabilities are more

65
00:02:07,119 --> 00:02:08,959
common in apis and there's a couple

66
00:02:08,959 --> 00:02:10,800
other things to keep in mind so that's

67
00:02:10,800 --> 00:02:12,080
another big thing i hope you take away

68
00:02:12,080 --> 00:02:13,920
from this talk

69
00:02:13,920 --> 00:02:16,080
now i don't go into too much detail on

70
00:02:16,080 --> 00:02:17,680
it but i do touch a little bit on each

71
00:02:17,680 --> 00:02:19,599
part of how to defend against each part

72
00:02:19,599 --> 00:02:22,000
of the both sets of the top tens i'm a

73
00:02:22,000 --> 00:02:24,560
big proponent of the purple team concept

74
00:02:24,560 --> 00:02:26,879
simply testing doesn't find does doesn't

75
00:02:26,879 --> 00:02:28,800
make a company more secure you have to

76
00:02:28,800 --> 00:02:30,160
be able to work with developers and give

77
00:02:30,160 --> 00:02:31,519
them some guidelines on how to make

78
00:02:31,519 --> 00:02:33,920
things better and that's how the actual

79
00:02:33,920 --> 00:02:35,360
value that we deliver comes to the

80
00:02:35,360 --> 00:02:36,720
companies that we work for in the

81
00:02:36,720 --> 00:02:39,920
organizations we work with

82
00:02:40,319 --> 00:02:42,560
so this is a example of the top 11

83
00:02:42,560 --> 00:02:45,440
deaths in 2003 it's a little bit morbid

84
00:02:45,440 --> 00:02:47,200
but i wanted to point out that just

85
00:02:47,200 --> 00:02:48,400
because something doesn't make the top

86
00:02:48,400 --> 00:02:49,840
10 list doesn't make it mean it's not

87
00:02:49,840 --> 00:02:51,920
important hopefully most if not all of

88
00:02:51,920 --> 00:02:53,840
us care about childhood diseases if it

89
00:02:53,840 --> 00:02:56,080
doesn't immediately impact us

90
00:02:56,080 --> 00:02:57,599
you can also see down at the bottom that

91
00:02:57,599 --> 00:02:59,519
there's not that much difference as far

92
00:02:59,519 --> 00:03:01,599
as impact between 10 and 11.

93
00:03:01,599 --> 00:03:04,640
that's 1192 and 1124

94
00:03:04,640 --> 00:03:05,680
per

95
00:03:05,680 --> 00:03:07,200
thousands

96
00:03:07,200 --> 00:03:09,280
those numbers are pretty close so just

97
00:03:09,280 --> 00:03:10,560
because something doesn't make the top

98
00:03:10,560 --> 00:03:11,920
10 list doesn't mean you don't have to

99
00:03:11,920 --> 00:03:14,000
care about it it's also a good example

100
00:03:14,000 --> 00:03:15,599
though because what your organization

101
00:03:15,599 --> 00:03:17,200
cares about may differ based on your

102
00:03:17,200 --> 00:03:18,480
infrastructure

103
00:03:18,480 --> 00:03:20,640
so if you don't use databases at all for

104
00:03:20,640 --> 00:03:22,640
a particular api you don't really have

105
00:03:22,640 --> 00:03:24,959
to worry about sql injection so it's a

106
00:03:24,959 --> 00:03:26,560
good example also about how we can do

107
00:03:26,560 --> 00:03:28,159
threat modeling to make sure that we're

108
00:03:28,159 --> 00:03:29,760
checking for the threats on modern

109
00:03:29,760 --> 00:03:32,080
threats that matter most for a specific

110
00:03:32,080 --> 00:03:34,400
test

111
00:03:35,360 --> 00:03:36,799
this if you're not familiar with it is

112
00:03:36,799 --> 00:03:39,760
the cwe top 25 is published by mitre at

113
00:03:39,760 --> 00:03:42,000
this point and it's an example that just

114
00:03:42,000 --> 00:03:43,760
because something's not in a os top 10

115
00:03:43,760 --> 00:03:44,879
list doesn't mean that we don't have to

116
00:03:44,879 --> 00:03:46,560
care about it either

117
00:03:46,560 --> 00:03:48,080
and so

118
00:03:48,080 --> 00:03:49,680
i'm trying to make the point that it's

119
00:03:49,680 --> 00:03:51,120
really important to gather information

120
00:03:51,120 --> 00:03:53,120
about all the vulnerabilities because

121
00:03:53,120 --> 00:03:54,799
simply paying attention to one list or

122
00:03:54,799 --> 00:03:57,040
another is not sufficient in some cases

123
00:03:57,040 --> 00:03:58,159
these aren't really applied to web

124
00:03:58,159 --> 00:03:59,840
applications like ranked number one

125
00:03:59,840 --> 00:04:02,319
right there out of bounds

126
00:04:02,319 --> 00:04:04,319
right that's mostly something we don't

127
00:04:04,319 --> 00:04:06,799
care about in the web space because

128
00:04:06,799 --> 00:04:08,640
we're not using memory unsafe languages

129
00:04:08,640 --> 00:04:10,480
like c

130
00:04:10,480 --> 00:04:13,040
we've moved on to things python java

131
00:04:13,040 --> 00:04:15,040
c-sharp et cetera that takes care of

132
00:04:15,040 --> 00:04:16,560
that for us automatically so unless

133
00:04:16,560 --> 00:04:18,399
there's a fundamental problem in the

134
00:04:18,399 --> 00:04:20,160
libraries that we're working with or the

135
00:04:20,160 --> 00:04:21,519
languages that we're working with we

136
00:04:21,519 --> 00:04:23,440
don't have to care too much about that

137
00:04:23,440 --> 00:04:25,360
but you'll also see number nine there

138
00:04:25,360 --> 00:04:26,880
across that request forgery that used to

139
00:04:26,880 --> 00:04:28,639
be part of the oas 10 that was called

140
00:04:28,639 --> 00:04:31,360
out explicitly it no longer is

141
00:04:31,360 --> 00:04:32,240
so

142
00:04:32,240 --> 00:04:33,919
again just be aware that there's lots of

143
00:04:33,919 --> 00:04:35,759
other opportunities to figure out what

144
00:04:35,759 --> 00:04:38,560
the risks are come up with a

145
00:04:38,560 --> 00:04:40,400
comprehensive list of what matters for

146
00:04:40,400 --> 00:04:42,000
your particular organization in your

147
00:04:42,000 --> 00:04:43,919
particular applications as you test them

148
00:04:43,919 --> 00:04:44,960
that's how you're going to deliver the

149
00:04:44,960 --> 00:04:47,680
best results

150
00:04:47,840 --> 00:04:49,680
a couple more notes this is a concept

151
00:04:49,680 --> 00:04:50,960
concepts talk rather than the tool

152
00:04:50,960 --> 00:04:52,960
specific talk i'm not going to say use

153
00:04:52,960 --> 00:04:54,960
burp suite to do this or use that to do

154
00:04:54,960 --> 00:04:56,639
that it's more about just the general

155
00:04:56,639 --> 00:04:58,800
concepts and it's pretty dry there's a

156
00:04:58,800 --> 00:05:00,000
lot of content that i'm trying to get

157
00:05:00,000 --> 00:05:01,919
through that's fairly technical so

158
00:05:01,919 --> 00:05:03,919
there's not a lot of means i've thrown

159
00:05:03,919 --> 00:05:05,759
some jokes and images here and there but

160
00:05:05,759 --> 00:05:06,639
if

161
00:05:06,639 --> 00:05:08,320
the idea of just sitting through a

162
00:05:08,320 --> 00:05:10,720
powerpoint presentation is not what you

163
00:05:10,720 --> 00:05:11,680
want to be doing with your term right

164
00:05:11,680 --> 00:05:14,400
now feel free to just go to twitter

165
00:05:14,400 --> 00:05:15,759
grab a copy of the slides and read them

166
00:05:15,759 --> 00:05:17,120
at your own leisure it's fairly

167
00:05:17,120 --> 00:05:19,199
self-explanatory although i do go into

168
00:05:19,199 --> 00:05:21,120
more detail on mostly items than just

169
00:05:21,120 --> 00:05:24,680
what's on the slides

170
00:05:24,880 --> 00:05:26,720
so the brief agenda for this talk i'm

171
00:05:26,720 --> 00:05:28,639
going to have a really short overview of

172
00:05:28,639 --> 00:05:30,000
what apis are and some of the

173
00:05:30,000 --> 00:05:32,080
technologies that are commonly used then

174
00:05:32,080 --> 00:05:33,680
i'm going to dive deep into the os top

175
00:05:33,680 --> 00:05:36,240
10 api risks versus application risks

176
00:05:36,240 --> 00:05:37,759
and as part of that i'll give a little

177
00:05:37,759 --> 00:05:39,199
bit of the information about how to

178
00:05:39,199 --> 00:05:42,400
defend against each one of those

179
00:05:42,400 --> 00:05:44,560
api if you're not familiar obviously

180
00:05:44,560 --> 00:05:46,880
application programming interface

181
00:05:46,880 --> 00:05:49,600
wikipedia has this definition here it's

182
00:05:49,600 --> 00:05:50,720
just talking about how software

183
00:05:50,720 --> 00:05:52,639
communicates between different

184
00:05:52,639 --> 00:05:56,240
components that are software to software

185
00:05:56,240 --> 00:05:57,680
what we're talking about today is mostly

186
00:05:57,680 --> 00:05:59,919
web services or what i call web services

187
00:05:59,919 --> 00:06:02,560
it's a subset of apis again wikipedia

188
00:06:02,560 --> 00:06:04,400
has a definition it's just saying that

189
00:06:04,400 --> 00:06:05,840
computers are talking to each other by

190
00:06:05,840 --> 00:06:09,440
http as a protocol

191
00:06:09,440 --> 00:06:11,759
itself has a good definition that it's

192
00:06:11,759 --> 00:06:13,759
it specifies as i talked about earlier

193
00:06:13,759 --> 00:06:15,280
it's a difference about the presentation

194
00:06:15,280 --> 00:06:16,240
layer

195
00:06:16,240 --> 00:06:18,479
so when you're doing a conventional web

196
00:06:18,479 --> 00:06:19,759
application

197
00:06:19,759 --> 00:06:21,280
you also have the window address and

198
00:06:21,280 --> 00:06:23,680
you've got html then information the css

199
00:06:23,680 --> 00:06:26,000
et cetera apis don't need that it's just

200
00:06:26,000 --> 00:06:27,280
saying here's the pure data that you're

201
00:06:27,280 --> 00:06:28,880
requesting and it leaves it to the

202
00:06:28,880 --> 00:06:30,160
program that's receiving it on the other

203
00:06:30,160 --> 00:06:31,919
end to do whatever needs to present it

204
00:06:31,919 --> 00:06:33,280
so in some cases it might need no

205
00:06:33,280 --> 00:06:34,800
presentation whatsoever they might be

206
00:06:34,800 --> 00:06:36,800
sticking to your database in other cases

207
00:06:36,800 --> 00:06:39,280
it might be making an ajax call to

208
00:06:39,280 --> 00:06:40,880
api and then it's inserting it to web

209
00:06:40,880 --> 00:06:42,880
page dynamically now the cases it might

210
00:06:42,880 --> 00:06:44,639
be displaying on a mobile app however

211
00:06:44,639 --> 00:06:47,520
that's appropriate

212
00:06:47,759 --> 00:06:49,440
so in other words web services are a

213
00:06:49,440 --> 00:06:52,560
subset of apis

214
00:06:52,560 --> 00:06:54,400
there's some a lot of famous other apis

215
00:06:54,400 --> 00:06:56,560
there's the java virtual machine posix

216
00:06:56,560 --> 00:06:58,720
is used most famously on this under the

217
00:06:58,720 --> 00:07:00,880
unix's but windows has that as well

218
00:07:00,880 --> 00:07:03,680
there's the windows api itself gtk is a

219
00:07:03,680 --> 00:07:05,919
library and it has an api can be doing

220
00:07:05,919 --> 00:07:07,039
all kinds of

221
00:07:07,039 --> 00:07:08,720
graphical displays on different

222
00:07:08,720 --> 00:07:10,720
platforms there's basically hundreds of

223
00:07:10,720 --> 00:07:12,560
thousands if not millions of other apis

224
00:07:12,560 --> 00:07:14,160
out there

225
00:07:14,160 --> 00:07:15,680
for the context of this talk i'm going

226
00:07:15,680 --> 00:07:18,560
to use the term apis and web of services

227
00:07:18,560 --> 00:07:21,759
also i'm going to say https or http

228
00:07:21,759 --> 00:07:24,319
and i could mean either http or https

229
00:07:24,319 --> 00:07:25,680
unless i'm specifically talking about

230
00:07:25,680 --> 00:07:28,080
problems with encryption so

231
00:07:28,080 --> 00:07:29,440
beware them just using them as an

232
00:07:29,440 --> 00:07:33,599
interchangeable term for those that talk

233
00:07:33,759 --> 00:07:36,479
http has become the lingua franca of the

234
00:07:36,479 --> 00:07:38,720
internet

235
00:07:38,720 --> 00:07:40,639
i haven't been able to get good figures

236
00:07:40,639 --> 00:07:42,400
but the vast majority of computer

237
00:07:42,400 --> 00:07:44,560
communication over the internet as http

238
00:07:44,560 --> 00:07:46,720
at this point it's not actually great

239
00:07:46,720 --> 00:07:48,160
for that there's a lot of overhead that

240
00:07:48,160 --> 00:07:49,039
was

241
00:07:49,039 --> 00:07:51,199
not http was not designed for this type

242
00:07:51,199 --> 00:07:52,879
of communication so those things are

243
00:07:52,879 --> 00:07:54,319
included as part of what the browsers

244
00:07:54,319 --> 00:07:57,039
needed that just aren't needed anymore

245
00:07:57,039 --> 00:07:59,759
different things like http 2 http 3 et

246
00:07:59,759 --> 00:08:01,520
cetera websockets they attempt to

247
00:08:01,520 --> 00:08:03,440
address some of this but when it comes

248
00:08:03,440 --> 00:08:05,039
down to it almost all programmers are

249
00:08:05,039 --> 00:08:06,400
doing web development at this point know

250
00:08:06,400 --> 00:08:08,879
how to do basic http almost all the

251
00:08:08,879 --> 00:08:11,120
infrastructure allows for it so things

252
00:08:11,120 --> 00:08:13,199
like your firewalls etc

253
00:08:13,199 --> 00:08:15,440
are expecting plain old http they may

254
00:08:15,440 --> 00:08:18,319
not have rules that are for http 2 etc

255
00:08:18,319 --> 00:08:19,759
proxies load balancers that kind of

256
00:08:19,759 --> 00:08:21,680
thing may also not support the modern

257
00:08:21,680 --> 00:08:23,280
modern things

258
00:08:23,280 --> 00:08:25,520
and all the languages support hdp pretty

259
00:08:25,520 --> 00:08:27,520
natively at this point and so that's

260
00:08:27,520 --> 00:08:29,199
part of what has this dominance over the

261
00:08:29,199 --> 00:08:31,599
internet

262
00:08:31,759 --> 00:08:33,440
just an important note if you're doing

263
00:08:33,440 --> 00:08:35,519
tests that involves apis and at this

264
00:08:35,519 --> 00:08:37,519
point almost all tests have some kind of

265
00:08:37,519 --> 00:08:39,039
api

266
00:08:39,039 --> 00:08:41,599
it's possible that the apis are

267
00:08:41,599 --> 00:08:43,519
connected to an external site

268
00:08:43,519 --> 00:08:45,279
so if you start doing sql injection on

269
00:08:45,279 --> 00:08:46,800
an application that you're authorized to

270
00:08:46,800 --> 00:08:48,959
test against if it's sending out those

271
00:08:48,959 --> 00:08:51,279
requests to a third-party api

272
00:08:51,279 --> 00:08:53,120
you may be running an authorized test

273
00:08:53,120 --> 00:08:54,880
against that third party

274
00:08:54,880 --> 00:08:56,399
so it's important to figure out what

275
00:08:56,399 --> 00:08:58,000
apis are used by a platform before

276
00:08:58,000 --> 00:08:59,519
starting to test

277
00:08:59,519 --> 00:09:01,279
not only are they the legal issues with

278
00:09:01,279 --> 00:09:02,800
potentially sending vicious traffic to

279
00:09:02,800 --> 00:09:04,880
someone else's api

280
00:09:04,880 --> 00:09:06,320
in some cases there could be fees

281
00:09:06,320 --> 00:09:08,320
involved with the apis and even if it's

282
00:09:08,320 --> 00:09:10,000
not pending at you if you're doing a

283
00:09:10,000 --> 00:09:12,720
typical best test dynamic applications

284
00:09:12,720 --> 00:09:14,000
security test

285
00:09:14,000 --> 00:09:15,279
that can involve sending hundreds of

286
00:09:15,279 --> 00:09:17,519
thousands of requests and that does add

287
00:09:17,519 --> 00:09:20,240
up so just when you're doing a scoping

288
00:09:20,240 --> 00:09:22,240
document or scoping process for a new

289
00:09:22,240 --> 00:09:24,000
application make sure that you figure

290
00:09:24,000 --> 00:09:25,519
out if it's calling any external

291
00:09:25,519 --> 00:09:28,480
third-party apis or even internal apis

292
00:09:28,480 --> 00:09:29,680
within a company where there may be

293
00:09:29,680 --> 00:09:33,439
additional notification that's necessary

294
00:09:34,000 --> 00:09:35,279
just a little bit about some eight

295
00:09:35,279 --> 00:09:37,600
common api technologies there's soap and

296
00:09:37,600 --> 00:09:38,880
rust that most people have heard of

297
00:09:38,880 --> 00:09:41,120
probably there's a spoke and a few

298
00:09:41,120 --> 00:09:42,720
others

299
00:09:42,720 --> 00:09:45,200
the old school one is soap

300
00:09:45,200 --> 00:09:47,920
it's a formal definition you're either

301
00:09:47,920 --> 00:09:50,240
soap or you're not it's all based around

302
00:09:50,240 --> 00:09:51,680
xml this is going to be important

303
00:09:51,680 --> 00:09:52,800
because we're going to talk about a

304
00:09:52,800 --> 00:09:54,880
bunch of xml specific attacks

305
00:09:54,880 --> 00:09:57,279
it is carrier agnostic so you can it's

306
00:09:57,279 --> 00:09:59,360
commonly done over http but you can buy

307
00:09:59,360 --> 00:10:02,959
protocol do it over any other pro by

308
00:10:02,959 --> 00:10:05,600
definition do it by other protocols

309
00:10:05,600 --> 00:10:07,120
and what we talked about today will

310
00:10:07,120 --> 00:10:08,959
largely carry over to other protocols

311
00:10:08,959 --> 00:10:10,800
but we're just going to focus on http

312
00:10:10,800 --> 00:10:13,120
specifically and it does have optional

313
00:10:13,120 --> 00:10:15,839
security features and ws security as

314
00:10:15,839 --> 00:10:17,680
part of the definition so if you need

315
00:10:17,680 --> 00:10:19,440
things like authentication authorization

316
00:10:19,440 --> 00:10:21,920
privacy via encryption it's all part of

317
00:10:21,920 --> 00:10:23,680
what you can do out of the box with the

318
00:10:23,680 --> 00:10:26,000
ws security

319
00:10:26,000 --> 00:10:27,360
rust on the other hand it's an

320
00:10:27,360 --> 00:10:29,680
architectural style it's

321
00:10:29,680 --> 00:10:31,920
very commonly today it uses json but it

322
00:10:31,920 --> 00:10:35,040
doesn't have to it is http this http

323
00:10:35,040 --> 00:10:36,240
specific

324
00:10:36,240 --> 00:10:38,079
you could in theory put it over other

325
00:10:38,079 --> 00:10:40,079
protocols but normally would no longer

326
00:10:40,079 --> 00:10:41,120
be rest

327
00:10:41,120 --> 00:10:42,800
and it has no built-in security features

328
00:10:42,800 --> 00:10:45,200
whatsoever

329
00:10:45,200 --> 00:10:46,640
the great thing about architectural

330
00:10:46,640 --> 00:10:47,920
styles is you can kind of blend them

331
00:10:47,920 --> 00:10:49,760
together so often you'll find things

332
00:10:49,760 --> 00:10:51,600
that are rusty and

333
00:10:51,600 --> 00:10:54,480
so it may not be entirely restful but it

334
00:10:54,480 --> 00:10:56,079
comes pretty close

335
00:10:56,079 --> 00:10:57,279
the other thing with architectural

336
00:10:57,279 --> 00:10:59,200
styles is it doesn't require good taste

337
00:10:59,200 --> 00:11:00,320
and you'll find that developers

338
00:11:00,320 --> 00:11:01,839
sometimes do things and they're not in

339
00:11:01,839 --> 00:11:03,200
fully good taste for their development

340
00:11:03,200 --> 00:11:05,920
process also

341
00:11:06,399 --> 00:11:08,079
there's a few other graphqls probably

342
00:11:08,079 --> 00:11:10,640
the third most common bespoke and other

343
00:11:10,640 --> 00:11:12,480
graphql i'm not actually that familiar

344
00:11:12,480 --> 00:11:14,320
with because again i work in banking and

345
00:11:14,320 --> 00:11:15,760
we tend to be a little bit more stodgy

346
00:11:15,760 --> 00:11:17,680
so we're mostly based in the soap and

347
00:11:17,680 --> 00:11:19,519
rust world facebook is the biggest

348
00:11:19,519 --> 00:11:22,000
proponent of it it's a full-blown query

349
00:11:22,000 --> 00:11:24,320
language kind of like sql and the big

350
00:11:24,320 --> 00:11:26,079
thing about it is it can gather lots of

351
00:11:26,079 --> 00:11:29,360
data with a single query so in a soap or

352
00:11:29,360 --> 00:11:31,920
rest type interface if you wanted to

353
00:11:31,920 --> 00:11:33,680
receive lots of information about many

354
00:11:33,680 --> 00:11:35,279
users for example

355
00:11:35,279 --> 00:11:36,560
in theory you would make a separate

356
00:11:36,560 --> 00:11:38,720
request for each

357
00:11:38,720 --> 00:11:41,120
whereas graphql is designed to say

358
00:11:41,120 --> 00:11:42,320
give me all the information about all

359
00:11:42,320 --> 00:11:43,760
the users that match this particular

360
00:11:43,760 --> 00:11:44,640
thing

361
00:11:44,640 --> 00:11:45,920
obviously you can do that sort of thing

362
00:11:45,920 --> 00:11:47,600
with some rest

363
00:11:47,600 --> 00:11:48,399
so

364
00:11:48,399 --> 00:11:51,920
apis but this is what graphql excels at

365
00:11:51,920 --> 00:11:53,519
bespoke is just a fancy way of saying

366
00:11:53,519 --> 00:11:56,000
custom especially things like ajax you

367
00:11:56,000 --> 00:11:57,920
don't need a formally defined api many

368
00:11:57,920 --> 00:11:59,680
of the times as far as following a

369
00:11:59,680 --> 00:12:02,079
protocol or specification like rest or

370
00:12:02,079 --> 00:12:02,959
soap

371
00:12:02,959 --> 00:12:04,560
and so it's very easy to say you know

372
00:12:04,560 --> 00:12:06,320
there's these eight functions that we

373
00:12:06,320 --> 00:12:09,440
need to respond with data via api and so

374
00:12:09,440 --> 00:12:10,639
you just build something quickly and

375
00:12:10,639 --> 00:12:12,880
easily using something like flask or

376
00:12:12,880 --> 00:12:14,399
using the functionality of php or

377
00:12:14,399 --> 00:12:16,000
whatever you're working in

378
00:12:16,000 --> 00:12:17,360
there's a few other things like there

379
00:12:17,360 --> 00:12:19,839
are formal specifications like json api

380
00:12:19,839 --> 00:12:21,200
but they're pretty uncommon in my

381
00:12:21,200 --> 00:12:24,200
experience

382
00:12:24,399 --> 00:12:26,000
so one big thing with doing tests on

383
00:12:26,000 --> 00:12:27,440
apis is how do you figure out the

384
00:12:27,440 --> 00:12:28,720
information about the specific web

385
00:12:28,720 --> 00:12:29,920
services

386
00:12:29,920 --> 00:12:31,760
and apis

387
00:12:31,760 --> 00:12:33,360
when you're testing an application it's

388
00:12:33,360 --> 00:12:34,639
relatively easy to go through and

389
00:12:34,639 --> 00:12:36,399
explore the functionality

390
00:12:36,399 --> 00:12:38,079
it's there's a user interface you can

391
00:12:38,079 --> 00:12:39,200
intuit it you can look through the

392
00:12:39,200 --> 00:12:40,560
source code and find links and that sort

393
00:12:40,560 --> 00:12:41,440
of thing

394
00:12:41,440 --> 00:12:43,519
a big problem with doing api testing is

395
00:12:43,519 --> 00:12:45,120
you don't have the ability to just say

396
00:12:45,120 --> 00:12:46,880
here's all the functionality make sure

397
00:12:46,880 --> 00:12:49,680
that you're testing all of it

398
00:12:49,680 --> 00:12:52,480
so one of the top things to do is to ask

399
00:12:52,480 --> 00:12:54,320
for the developer documentation

400
00:12:54,320 --> 00:12:55,600
that will give you a lot of insight

401
00:12:55,600 --> 00:12:56,880
about all the functions the different

402
00:12:56,880 --> 00:12:59,200
panels the different variables are used

403
00:12:59,200 --> 00:13:00,639
there are things like wisdo for soap

404
00:13:00,639 --> 00:13:02,639
which is a definition file for all of

405
00:13:02,639 --> 00:13:05,120
the functionality there's also whistle

406
00:13:05,120 --> 00:13:07,440
can be used for rest and waddle

407
00:13:07,440 --> 00:13:09,600
i don't see those terribly often what's

408
00:13:09,600 --> 00:13:11,200
more common for rust that i've seen is

409
00:13:11,200 --> 00:13:13,600
swagger slash open api there's other

410
00:13:13,600 --> 00:13:16,000
formats like grammar io documents others

411
00:13:16,000 --> 00:13:18,160
of those you can do reverse engineering

412
00:13:18,160 --> 00:13:19,040
so if you're doing something like

413
00:13:19,040 --> 00:13:21,279
testing an api that powers a what mobile

414
00:13:21,279 --> 00:13:22,800
application you can do reverse

415
00:13:22,800 --> 00:13:24,079
engineering on the mobile application

416
00:13:24,079 --> 00:13:25,519
pull it apart and find out what calls

417
00:13:25,519 --> 00:13:27,120
it's making

418
00:13:27,120 --> 00:13:28,160
one thing that i think is really

419
00:13:28,160 --> 00:13:29,680
powerful is piggybacking off the

420
00:13:29,680 --> 00:13:31,920
developers tests so assuming that they

421
00:13:31,920 --> 00:13:34,880
are written good quality api uat srt

422
00:13:34,880 --> 00:13:37,680
type testing for the apis if you run it

423
00:13:37,680 --> 00:13:38,959
through something like an interception

424
00:13:38,959 --> 00:13:40,959
proxy such as zap you'll get a really

425
00:13:40,959 --> 00:13:43,279
good readout about all the functionality

426
00:13:43,279 --> 00:13:44,959
obviously that's only as good as the

427
00:13:44,959 --> 00:13:46,800
function as the test it provided and

428
00:13:46,800 --> 00:13:48,800
created but you can get a lot of value

429
00:13:48,800 --> 00:13:50,079
off of that

430
00:13:50,079 --> 00:13:52,240
and one last thing you can also do is if

431
00:13:52,240 --> 00:13:53,839
you read the log files you can sometimes

432
00:13:53,839 --> 00:13:55,839
find out some pads and variables that

433
00:13:55,839 --> 00:13:57,839
aren't well documented

434
00:13:57,839 --> 00:14:00,000
so it's really good to do as many of

435
00:14:00,000 --> 00:14:01,360
these as possible to get the biggest

436
00:14:01,360 --> 00:14:03,839
picture

437
00:14:04,560 --> 00:14:05,760
there are times that you'll find that

438
00:14:05,760 --> 00:14:07,360
there's things been added that are in

439
00:14:07,360 --> 00:14:09,120
the formal documentation specifications

440
00:14:09,120 --> 00:14:10,320
things that were added that were never

441
00:14:10,320 --> 00:14:12,959
put into the whistles swagger files etc

442
00:14:12,959 --> 00:14:14,480
so just building the biggest picture

443
00:14:14,480 --> 00:14:16,079
will allow you to do the best possible

444
00:14:16,079 --> 00:14:18,399
test

445
00:14:20,320 --> 00:14:22,560
so now we're about to jump into the meet

446
00:14:22,560 --> 00:14:23,839
which is talking about the three

447
00:14:23,839 --> 00:14:25,120
different versions of the top 10 that

448
00:14:25,120 --> 00:14:26,959
we're going to go through today

449
00:14:26,959 --> 00:14:28,399
this kitty is going to get increasingly

450
00:14:28,399 --> 00:14:31,120
frazzled as we go

451
00:14:31,120 --> 00:14:33,199
so when i initially wrote this at the

452
00:14:33,199 --> 00:14:34,560
beginning of

453
00:14:34,560 --> 00:14:37,440
the year there was only the lost 2017

454
00:14:37,440 --> 00:14:40,320
top 10 list for applications in the os

455
00:14:40,320 --> 00:14:42,720
top 10 for apis

456
00:14:42,720 --> 00:14:44,880
but as we'll get to in a moment there's

457
00:14:44,880 --> 00:14:48,720
also the os top 10 for 2021 so there's a

458
00:14:48,720 --> 00:14:49,920
few differences there that we'll go

459
00:14:49,920 --> 00:14:52,320
through but they didn't change that much

460
00:14:52,320 --> 00:14:53,680
so we're going to base it mostly around

461
00:14:53,680 --> 00:14:58,000
the 2018 2017 application list and the

462
00:14:58,000 --> 00:15:00,720
2019 api top 10 list

463
00:15:00,720 --> 00:15:04,240
so here they are side by side

464
00:15:04,560 --> 00:15:06,000
the first one which we'll talk about

465
00:15:06,000 --> 00:15:07,680
will be injection it was ranked number

466
00:15:07,680 --> 00:15:09,519
one for web apps but only number eight

467
00:15:09,519 --> 00:15:11,360
for apis

468
00:15:11,360 --> 00:15:13,120
there is a group of

469
00:15:13,120 --> 00:15:14,639
six different ones that i group together

470
00:15:14,639 --> 00:15:16,320
here there's broken authentication and

471
00:15:16,320 --> 00:15:18,560
broken access control which are related

472
00:15:18,560 --> 00:15:21,199
on web apps and then broken user level

473
00:15:21,199 --> 00:15:23,519
authorization authentication

474
00:15:23,519 --> 00:15:25,120
function level authorization mass

475
00:15:25,120 --> 00:15:27,920
assignment over there on the api side

476
00:15:27,920 --> 00:15:29,440
there's sensitive bad exposure which

477
00:15:29,440 --> 00:15:32,320
only appears on the app list

478
00:15:32,320 --> 00:15:34,959
xxe which is xml external entities also

479
00:15:34,959 --> 00:15:37,519
appears only on the web app list

480
00:15:37,519 --> 00:15:39,839
security misconfiguration obviously it's

481
00:15:39,839 --> 00:15:42,079
going to appear in both of them

482
00:15:42,079 --> 00:15:44,320
cross-site scripting also known as xs

483
00:15:44,320 --> 00:15:48,160
xss only appears in the application list

484
00:15:48,160 --> 00:15:50,560
insecure ds serialization

485
00:15:50,560 --> 00:15:52,240
again only on that

486
00:15:52,240 --> 00:15:53,920
webapp list and that one's a little bit

487
00:15:53,920 --> 00:15:56,639
interesting because that's one that's

488
00:15:56,639 --> 00:15:59,360
pretty commonly found in api use

489
00:15:59,360 --> 00:16:00,399
so

490
00:16:00,399 --> 00:16:01,839
again just because it doesn't make the

491
00:16:01,839 --> 00:16:03,759
top 10 lists for the api risk doesn't

492
00:16:03,759 --> 00:16:07,279
mean it's not a risk for the apis

493
00:16:07,279 --> 00:16:08,880
known vulnerabilities only appeared on

494
00:16:08,880 --> 00:16:10,560
the application list

495
00:16:10,560 --> 00:16:12,160
and insufficient logging appeared on

496
00:16:12,160 --> 00:16:13,120
both

497
00:16:13,120 --> 00:16:14,959
over on the api side the unique ones are

498
00:16:14,959 --> 00:16:16,720
excessive data exposure

499
00:16:16,720 --> 00:16:18,560
lack of rate limiting

500
00:16:18,560 --> 00:16:22,680
and proper assets management

501
00:16:23,279 --> 00:16:25,279
so like i mentioned we got the new

502
00:16:25,279 --> 00:16:27,519
version that lost top 10 for 2021 for

503
00:16:27,519 --> 00:16:28,720
applications

504
00:16:28,720 --> 00:16:30,240
so a couple things that were notable

505
00:16:30,240 --> 00:16:32,079
here they combined cross-site scripting

506
00:16:32,079 --> 00:16:33,920
and injection into a single one which

507
00:16:33,920 --> 00:16:35,600
makes sense because cross-site scripting

508
00:16:35,600 --> 00:16:37,839
is just a form of injection

509
00:16:37,839 --> 00:16:39,839
they renamed broken authentication to

510
00:16:39,839 --> 00:16:41,279
identification and authorization

511
00:16:41,279 --> 00:16:44,240
failures but they are largely the same

512
00:16:44,240 --> 00:16:46,399
they rename sensitive data exposure to

513
00:16:46,399 --> 00:16:47,920
cryptographic failures this is an

514
00:16:47,920 --> 00:16:50,160
improvement in my view because what they

515
00:16:50,160 --> 00:16:51,440
that is really what they meant by

516
00:16:51,440 --> 00:16:53,360
sensitive data is

517
00:16:53,360 --> 00:16:55,199
cryptography specific rather than things

518
00:16:55,199 --> 00:16:56,880
like indirect object reference which

519
00:16:56,880 --> 00:16:59,600
we'll talk about in a moment

520
00:16:59,600 --> 00:17:02,320
cross-site our xml external entities and

521
00:17:02,320 --> 00:17:03,440
security

522
00:17:03,440 --> 00:17:06,000
got combined

523
00:17:06,000 --> 00:17:08,480
security serialization got rolled into

524
00:17:08,480 --> 00:17:11,359
software and that integrity failures

525
00:17:11,359 --> 00:17:13,599
known vulnerabilities got renamed to

526
00:17:13,599 --> 00:17:15,199
vulnerability and outdated components

527
00:17:15,199 --> 00:17:16,240
but again

528
00:17:16,240 --> 00:17:17,599
mostly the same

529
00:17:17,599 --> 00:17:19,199
is sufficient logging they went ahead

530
00:17:19,199 --> 00:17:21,119
and specified monitoring failures

531
00:17:21,119 --> 00:17:22,720
because it turns out the logging isn't

532
00:17:22,720 --> 00:17:24,319
enough if you're not actually monitor

533
00:17:24,319 --> 00:17:27,039
doing something based on the logs

534
00:17:27,039 --> 00:17:28,720
the ears you might as well not have

535
00:17:28,720 --> 00:17:30,160
those lines other than the instant

536
00:17:30,160 --> 00:17:32,559
response process

537
00:17:32,559 --> 00:17:34,000
there are three new things that came

538
00:17:34,000 --> 00:17:36,640
into the 2021 list there's insecure

539
00:17:36,640 --> 00:17:37,760
design

540
00:17:37,760 --> 00:17:40,080
software and data integrity failures

541
00:17:40,080 --> 00:17:42,240
this was brought up previously with xxe

542
00:17:42,240 --> 00:17:44,000
but there's a lot more to it so we'll go

543
00:17:44,000 --> 00:17:45,520
through that as well

544
00:17:45,520 --> 00:17:47,200
and then there's the server-side request

545
00:17:47,200 --> 00:17:49,280
forgery this one's been pretty notable

546
00:17:49,280 --> 00:17:50,240
in some

547
00:17:50,240 --> 00:17:53,039
cloud exploits for apis so we'll talk

548
00:17:53,039 --> 00:17:55,840
about that last

549
00:17:57,120 --> 00:17:58,400
so i said the kitty's going to get a

550
00:17:58,400 --> 00:17:59,760
little bit more and more fossils as we

551
00:17:59,760 --> 00:18:02,640
go through all of these

552
00:18:03,600 --> 00:18:05,440
so the first big one to keep in mind is

553
00:18:05,440 --> 00:18:07,120
injection attacks

554
00:18:07,120 --> 00:18:08,799
this is a common area where programmers

555
00:18:08,799 --> 00:18:12,000
make mistakes both in web apps and apis

556
00:18:12,000 --> 00:18:14,640
and testing for it is largely the same

557
00:18:14,640 --> 00:18:16,720
between app and api testing

558
00:18:16,720 --> 00:18:18,480
the big thing to keep in mind here is

559
00:18:18,480 --> 00:18:20,400
developers often don't do proper

560
00:18:20,400 --> 00:18:22,480
validation sanitation on variables

561
00:18:22,480 --> 00:18:25,120
they're coming into apis because in some

562
00:18:25,120 --> 00:18:26,799
cases they kind of trust that the depth

563
00:18:26,799 --> 00:18:28,880
the data can be safe they might think

564
00:18:28,880 --> 00:18:31,200
that this is an internally only app api

565
00:18:31,200 --> 00:18:33,200
so therefore nothing from the outside is

566
00:18:33,200 --> 00:18:34,640
going to flow into it and it's going to

567
00:18:34,640 --> 00:18:36,240
turn out in some cases there are ways to

568
00:18:36,240 --> 00:18:38,480
get information that api they may think

569
00:18:38,480 --> 00:18:41,039
that well it's just coming from the

570
00:18:41,039 --> 00:18:42,720
web application which is doing ajax

571
00:18:42,720 --> 00:18:43,840
calls and no one's going to take that

572
00:18:43,840 --> 00:18:47,039
apart and we probably all know on this

573
00:18:47,039 --> 00:18:48,559
in this conference that that's not as

574
00:18:48,559 --> 00:18:50,160
reliable thing

575
00:18:50,160 --> 00:18:51,840
they may think that the mobile app is

576
00:18:51,840 --> 00:18:54,000
making the calls and therefore it's kind

577
00:18:54,000 --> 00:18:55,679
of immutable those calls are going to be

578
00:18:55,679 --> 00:18:57,600
safe and it's not that hard for an

579
00:18:57,600 --> 00:18:59,760
attacker to go pull that web application

580
00:18:59,760 --> 00:19:01,679
leave that mobile application apart and

581
00:19:01,679 --> 00:19:03,600
figure out how the api's calls are being

582
00:19:03,600 --> 00:19:05,200
made and then start making malicious

583
00:19:05,200 --> 00:19:07,360
ones

584
00:19:07,360 --> 00:19:08,640
you're probably familiar with most of

585
00:19:08,640 --> 00:19:10,799
these sql injection is obviously one of

586
00:19:10,799 --> 00:19:12,880
the most famous ones little johnny drop

587
00:19:12,880 --> 00:19:15,200
tables is an internet punchline for many

588
00:19:15,200 --> 00:19:17,679
many years now there's the same similar

589
00:19:17,679 --> 00:19:19,600
ones with nosql injection command

590
00:19:19,600 --> 00:19:20,960
injection we're probably all familiar

591
00:19:20,960 --> 00:19:21,760
with

592
00:19:21,760 --> 00:19:23,520
ldap injection is a little bit more

593
00:19:23,520 --> 00:19:25,760
common in some cases with the apis

594
00:19:25,760 --> 00:19:28,000
because users don't typically make a lot

595
00:19:28,000 --> 00:19:31,440
of raw requests to ldap by a web

596
00:19:31,440 --> 00:19:32,400
app

597
00:19:32,400 --> 00:19:33,600
but if it's something like pulling

598
00:19:33,600 --> 00:19:35,440
information into a mobile app they may

599
00:19:35,440 --> 00:19:37,360
be making direct ldap requests to the

600
00:19:37,360 --> 00:19:39,520
server and xpath is going to be a little

601
00:19:39,520 --> 00:19:42,000
bit more common in

602
00:19:42,000 --> 00:19:44,960
api's testing simply because it's a xml

603
00:19:44,960 --> 00:19:46,400
specific

604
00:19:46,400 --> 00:19:49,679
protocol and because soap and summit and

605
00:19:49,679 --> 00:19:52,240
potentially rust uses xml more than

606
00:19:52,240 --> 00:19:54,080
standard web applications you're going

607
00:19:54,080 --> 00:19:56,559
to see it a little bit more there

608
00:19:56,559 --> 00:19:58,160
xpath injection if you're not familiar

609
00:19:58,160 --> 00:20:00,720
with it is a query language from xml

610
00:20:00,720 --> 00:20:02,240
it basically lets you run queries

611
00:20:02,240 --> 00:20:04,559
similar to sql on a large xml document

612
00:20:04,559 --> 00:20:06,400
pull information out of it

613
00:20:06,400 --> 00:20:08,880
again because so commonly uses it is

614
00:20:08,880 --> 00:20:11,039
more common in these it's

615
00:20:11,039 --> 00:20:12,960
really an uncommon attack but i have

616
00:20:12,960 --> 00:20:15,440
actually seen it once production my boss

617
00:20:15,440 --> 00:20:16,559
actually got really excited and called

618
00:20:16,559 --> 00:20:18,799
me over it's like joe we found xpath

619
00:20:18,799 --> 00:20:20,720
injection it turned out to not have any

620
00:20:20,720 --> 00:20:22,720
practical exploits because all we could

621
00:20:22,720 --> 00:20:24,240
get was completely insensitive

622
00:20:24,240 --> 00:20:25,760
information with it but we're just

623
00:20:25,760 --> 00:20:26,960
really excited that we'd actually found

624
00:20:26,960 --> 00:20:28,720
it in a production application rather

625
00:20:28,720 --> 00:20:29,919
than something that's just written as a

626
00:20:29,919 --> 00:20:31,919
test app

627
00:20:31,919 --> 00:20:33,200
again

628
00:20:33,200 --> 00:20:35,600
you can't specify arbitrary accidental

629
00:20:35,600 --> 00:20:38,240
documents with it you can only query a

630
00:20:38,240 --> 00:20:40,480
authorized xml document so unless

631
00:20:40,480 --> 00:20:41,840
there's something that's really poorly

632
00:20:41,840 --> 00:20:43,360
designed it's probably going to be low

633
00:20:43,360 --> 00:20:45,919
impact but it is possible and every now

634
00:20:45,919 --> 00:20:49,760
and then you will get that true positive

635
00:20:49,760 --> 00:20:53,039
some of the defenses for this that are

636
00:20:53,039 --> 00:20:56,400
somewhat api specific some might not

637
00:20:56,400 --> 00:20:57,919
work with your developers make sure that

638
00:20:57,919 --> 00:20:59,200
they understand that anytime something

639
00:20:59,200 --> 00:21:00,880
crosses a trust boundary you're not

640
00:21:00,880 --> 00:21:03,039
familiar with term trust boundaries are

641
00:21:03,039 --> 00:21:04,799
when data comes from any place that's

642
00:21:04,799 --> 00:21:06,080
not trusted

643
00:21:06,080 --> 00:21:07,600
so you might say that this internal

644
00:21:07,600 --> 00:21:09,600
database server is trusted and that you

645
00:21:09,600 --> 00:21:11,679
assume that all the data in it is safe

646
00:21:11,679 --> 00:21:14,000
that memory not your truth assumption

647
00:21:14,000 --> 00:21:16,080
but that is within your trust boundary

648
00:21:16,080 --> 00:21:17,840
whereas anything coming from a user is

649
00:21:17,840 --> 00:21:19,919
always crossing a trust boundary it can

650
00:21:19,919 --> 00:21:21,840
never be assumed to be safe and you

651
00:21:21,840 --> 00:21:23,360
might be doing something like pulling in

652
00:21:23,360 --> 00:21:24,880
information from an untrusted database

653
00:21:24,880 --> 00:21:26,799
server you might be pulling in something

654
00:21:26,799 --> 00:21:29,280
from another untrusted api those are all

655
00:21:29,280 --> 00:21:31,039
crossing a trust boundary and anytime

656
00:21:31,039 --> 00:21:32,799
that happens you must either do

657
00:21:32,799 --> 00:21:34,480
something like validate or sanitize or

658
00:21:34,480 --> 00:21:36,559
escape that data to make it safe

659
00:21:36,559 --> 00:21:37,919
if you're working with sql make sure

660
00:21:37,919 --> 00:21:39,760
that using prepared statements

661
00:21:39,760 --> 00:21:41,120
that's not any different than working

662
00:21:41,120 --> 00:21:43,760
with applications like i said this this

663
00:21:43,760 --> 00:21:45,760
class of attack is largely sent between

664
00:21:45,760 --> 00:21:48,320
applications and apis

665
00:21:48,320 --> 00:21:50,080
and of course most webs we have

666
00:21:50,080 --> 00:21:51,679
application firewalls they're going to

667
00:21:51,679 --> 00:21:53,039
have rules for detecting blocking this

668
00:21:53,039 --> 00:21:54,960
sort of thing

669
00:21:54,960 --> 00:21:56,840
so make sure that you've got a web

670
00:21:56,840 --> 00:21:58,960
application deployed make sure you've

671
00:21:58,960 --> 00:22:00,880
got the rules set up properly

672
00:22:00,880 --> 00:22:02,080
something that i've seen way too

673
00:22:02,080 --> 00:22:03,440
commonly is people might have a web

674
00:22:03,440 --> 00:22:05,440
application firewall set up so that only

675
00:22:05,440 --> 00:22:06,880
half the rules are actually set in block

676
00:22:06,880 --> 00:22:08,480
mode they never took the time to

677
00:22:08,480 --> 00:22:10,840
fine-tune things and put it into deny

678
00:22:10,840 --> 00:22:13,679
mode so if you're defending against this

679
00:22:13,679 --> 00:22:15,280
if you're working with the offender make

680
00:22:15,280 --> 00:22:17,280
sure that the left is fine-tuned against

681
00:22:17,280 --> 00:22:20,240
all of these attacks

682
00:22:20,480 --> 00:22:22,720
so like i said i combined the

683
00:22:22,720 --> 00:22:25,520
application number two number five

684
00:22:25,520 --> 00:22:27,919
and then the apis one two five and six

685
00:22:27,919 --> 00:22:29,280
into this kind of

686
00:22:29,280 --> 00:22:31,200
large idea of broken authentication or

687
00:22:31,200 --> 00:22:32,960
access control

688
00:22:32,960 --> 00:22:35,200
again the flaws with apis are kind of

689
00:22:35,200 --> 00:22:37,679
similar where a developer might be kind

690
00:22:37,679 --> 00:22:39,679
of blindly trusting the software systems

691
00:22:39,679 --> 00:22:41,600
that are talking to the api and that

692
00:22:41,600 --> 00:22:43,600
leads to the security failures this

693
00:22:43,600 --> 00:22:44,960
class of attack is really where

694
00:22:44,960 --> 00:22:46,400
attackers where

695
00:22:46,400 --> 00:22:47,840
penetration testers and application

696
00:22:47,840 --> 00:22:49,520
testers are in their paycheck because a

697
00:22:49,520 --> 00:22:50,960
lot of this can't be tested in an

698
00:22:50,960 --> 00:22:53,360
automation automated fashion yet

699
00:22:53,360 --> 00:22:55,039
for things like sql injection cross-site

700
00:22:55,039 --> 00:22:57,679
scripting etc automated tools can do a

701
00:22:57,679 --> 00:22:59,919
really pretty good job at finding it

702
00:22:59,919 --> 00:23:01,120
especially if you're combining things

703
00:23:01,120 --> 00:23:02,320
like sas

704
00:23:02,320 --> 00:23:04,880
static applications security testing and

705
00:23:04,880 --> 00:23:05,840
desk

706
00:23:05,840 --> 00:23:08,240
to get better coverage

707
00:23:08,240 --> 00:23:10,000
that sort of thing is not that hard to

708
00:23:10,000 --> 00:23:12,000
write automated tests to detect

709
00:23:12,000 --> 00:23:13,679
figuring out whether broken author

710
00:23:13,679 --> 00:23:15,280
authentication or authorization has

711
00:23:15,280 --> 00:23:18,080
happened really requires human intellect

712
00:23:18,080 --> 00:23:18,880
and

713
00:23:18,880 --> 00:23:20,320
digging in here is where we can find

714
00:23:20,320 --> 00:23:21,760
some of the really valuable attacks

715
00:23:21,760 --> 00:23:23,760
against apis and

716
00:23:23,760 --> 00:23:25,280
both increase the

717
00:23:25,280 --> 00:23:26,880
security value for the company or

718
00:23:26,880 --> 00:23:28,880
organization you're working for or with

719
00:23:28,880 --> 00:23:30,480
as well as making sure that people

720
00:23:30,480 --> 00:23:32,080
understand what value you're bringing to

721
00:23:32,080 --> 00:23:34,960
the table of the test

722
00:23:35,679 --> 00:23:38,000
so like i mentioned previously

723
00:23:38,000 --> 00:23:39,440
mobile apps are a big

724
00:23:39,440 --> 00:23:41,440
consumer of apis and people kind of

725
00:23:41,440 --> 00:23:43,760
might assume that they're safe and it's

726
00:23:43,760 --> 00:23:46,159
just not a safe assumption

727
00:23:46,159 --> 00:23:47,600
beyond the fact that you can tear them

728
00:23:47,600 --> 00:23:49,440
apart oftentimes you can just put an

729
00:23:49,440 --> 00:23:51,039
interception proxy between a mobile

730
00:23:51,039 --> 00:23:54,159
device and a web service or api and see

731
00:23:54,159 --> 00:23:55,840
what the traffic is doing and start

732
00:23:55,840 --> 00:23:58,400
building a text based on that

733
00:23:58,400 --> 00:24:00,159
there's a tool called a technique called

734
00:24:00,159 --> 00:24:02,000
certificate painting which tells

735
00:24:02,000 --> 00:24:03,520
application to only talk to your

736
00:24:03,520 --> 00:24:07,200
specific server with a valid

737
00:24:07,200 --> 00:24:09,840
https tls certificate

738
00:24:09,840 --> 00:24:11,520
that means that the interception proxies

739
00:24:11,520 --> 00:24:14,080
won't have the visibility into that

740
00:24:14,080 --> 00:24:15,919
one thing to do keep in mind is it only

741
00:24:15,919 --> 00:24:18,000
raises the bar the dedicated enough

742
00:24:18,000 --> 00:24:19,279
attacker can take the time to

743
00:24:19,279 --> 00:24:21,200
disassemble the app pull out that

744
00:24:21,200 --> 00:24:22,640
certificate pending and make it work for

745
00:24:22,640 --> 00:24:25,200
them so it's definitely worth doing but

746
00:24:25,200 --> 00:24:26,640
don't think that it's going to block a

747
00:24:26,640 --> 00:24:28,720
really dedicated attacker so if you're

748
00:24:28,720 --> 00:24:30,720
working like another financial sector

749
00:24:30,720 --> 00:24:32,159
they've got the motivation to go ahead

750
00:24:32,159 --> 00:24:33,840
and do something like that whereas if

751
00:24:33,840 --> 00:24:35,360
you've got just a very small mobile

752
00:24:35,360 --> 00:24:37,039
application that might have nothing

753
00:24:37,039 --> 00:24:39,120
really value behind it you can get a lot

754
00:24:39,120 --> 00:24:42,000
of value out of this

755
00:24:42,400 --> 00:24:44,240
so a bunch of things that you see with

756
00:24:44,240 --> 00:24:46,559
apis they're they may not be properly

757
00:24:46,559 --> 00:24:48,080
set up to defend against credential

758
00:24:48,080 --> 00:24:50,400
credential staffing or group forcing or

759
00:24:50,400 --> 00:24:52,559
they may have weaker default passwords

760
00:24:52,559 --> 00:24:53,600
if you're not familiar with the term

761
00:24:53,600 --> 00:24:55,520
credential stuffing is an attack where

762
00:24:55,520 --> 00:24:57,520
you go through and you might get the

763
00:24:57,520 --> 00:24:59,520
linkedin data breach that has both

764
00:24:59,520 --> 00:25:01,440
usernames and passwords and you go

765
00:25:01,440 --> 00:25:02,880
through and say

766
00:25:02,880 --> 00:25:05,840
does bob smith with password test123

767
00:25:05,840 --> 00:25:07,840
have an account here reinforcing

768
00:25:07,840 --> 00:25:09,200
obviously just going through and trying

769
00:25:09,200 --> 00:25:10,960
like all the standard usernames and all

770
00:25:10,960 --> 00:25:12,960
the standard passwords or in some cases

771
00:25:12,960 --> 00:25:16,240
just trying all the passwords

772
00:25:16,400 --> 00:25:18,400
apis by nature have problems with

773
00:25:18,400 --> 00:25:20,720
two-factor authentic authentication

774
00:25:20,720 --> 00:25:22,640
so with things like mobile banking

775
00:25:22,640 --> 00:25:24,159
obviously at this point where we're

776
00:25:24,159 --> 00:25:26,559
pushing users to use two factors or at

777
00:25:26,559 --> 00:25:28,000
least something approximating with

778
00:25:28,000 --> 00:25:30,559
knowledge-based answers

779
00:25:30,559 --> 00:25:32,559
apis can't sit there and look at a

780
00:25:32,559 --> 00:25:35,039
hardware security token easily so a lot

781
00:25:35,039 --> 00:25:37,520
of apis just have a single factory so

782
00:25:37,520 --> 00:25:39,440
you can find weaknesses that are you may

783
00:25:39,440 --> 00:25:40,720
have a really well-defended web

784
00:25:40,720 --> 00:25:42,640
application but there may be an api that

785
00:25:42,640 --> 00:25:44,080
has the same functionality that doesn't

786
00:25:44,080 --> 00:25:46,480
have two-factor and if you can guess a

787
00:25:46,480 --> 00:25:48,960
username password etc or get it through

788
00:25:48,960 --> 00:25:50,320
credential stuffing you can attack it

789
00:25:50,320 --> 00:25:52,000
because there's that not that second

790
00:25:52,000 --> 00:25:54,000
factor

791
00:25:54,000 --> 00:25:55,360
something that developers sometimes do

792
00:25:55,360 --> 00:25:57,279
is they'll put the session tokens as get

793
00:25:57,279 --> 00:25:59,760
variables so anytime that's flowing

794
00:25:59,760 --> 00:26:00,960
through something like an external

795
00:26:00,960 --> 00:26:03,039
outgoing proxy or internal

796
00:26:03,039 --> 00:26:05,679
incoming proxy it might get logged so if

797
00:26:05,679 --> 00:26:07,360
an attacker can get access to those logs

798
00:26:07,360 --> 00:26:09,440
they can get all of those variables

799
00:26:09,440 --> 00:26:11,679
and then steal the session tokens

800
00:26:11,679 --> 00:26:13,919
apis will sometimes might have long

801
00:26:13,919 --> 00:26:16,000
lived session tokens they may not ever

802
00:26:16,000 --> 00:26:18,080
expire they may have a longer session

803
00:26:18,080 --> 00:26:19,440
life than is

804
00:26:19,440 --> 00:26:20,880
than the equivalent web app

805
00:26:20,880 --> 00:26:23,360
functionality so that's another thing to

806
00:26:23,360 --> 00:26:24,720
check

807
00:26:24,720 --> 00:26:26,480
mobile applications may have hard-coded

808
00:26:26,480 --> 00:26:29,120
credentials or api keys inside of them

809
00:26:29,120 --> 00:26:30,880
so again you just disassemble them pull

810
00:26:30,880 --> 00:26:32,480
them out look with interesting strings

811
00:26:32,480 --> 00:26:33,679
you can get all kinds of useful

812
00:26:33,679 --> 00:26:34,799
information out of them that way and

813
00:26:34,799 --> 00:26:36,559
then unit systems

814
00:26:36,559 --> 00:26:38,720
there's a secret zero problem secret

815
00:26:38,720 --> 00:26:40,720
zero is that

816
00:26:40,720 --> 00:26:42,080
there are when you're working with

817
00:26:42,080 --> 00:26:43,600
stored credentials

818
00:26:43,600 --> 00:26:45,039
at some point there always has to be a

819
00:26:45,039 --> 00:26:46,960
little bit of trust

820
00:26:46,960 --> 00:26:47,919
so

821
00:26:47,919 --> 00:26:49,279
if i have a

822
00:26:49,279 --> 00:26:50,799
system that i'm deploying to kubernetes

823
00:26:50,799 --> 00:26:52,640
that's going to make api calls to third

824
00:26:52,640 --> 00:26:54,640
party it needs to get the key at some

825
00:26:54,640 --> 00:26:55,600
point

826
00:26:55,600 --> 00:26:58,320
if i put the key in plain text into that

827
00:26:58,320 --> 00:27:00,720
kubernetes instance

828
00:27:00,720 --> 00:27:02,080
if someone's able to compromise

829
00:27:02,080 --> 00:27:04,240
application read that key then they can

830
00:27:04,240 --> 00:27:06,320
get access to the key if i'm using

831
00:27:06,320 --> 00:27:08,400
credentials store at some point that

832
00:27:08,400 --> 00:27:09,919
credential store has to trust that it's

833
00:27:09,919 --> 00:27:11,039
getting a ballot request from the

834
00:27:11,039 --> 00:27:12,480
community and since it's supposed to be

835
00:27:12,480 --> 00:27:14,320
requesting it so open attacker we're

836
00:27:14,320 --> 00:27:16,240
able to make a arbitrary request that

837
00:27:16,240 --> 00:27:17,520
credential store that looked like an

838
00:27:17,520 --> 00:27:18,720
authorized

839
00:27:18,720 --> 00:27:20,960
key authorized request it could get that

840
00:27:20,960 --> 00:27:21,679
key

841
00:27:21,679 --> 00:27:23,440
and so on and so forth

842
00:27:23,440 --> 00:27:24,960
there's some ways around it so you can

843
00:27:24,960 --> 00:27:26,480
have things like a physical token that

844
00:27:26,480 --> 00:27:28,720
has to be touched when a server is spun

845
00:27:28,720 --> 00:27:30,480
up and

846
00:27:30,480 --> 00:27:32,240
that is allowed that's what's used to

847
00:27:32,240 --> 00:27:34,320
get the key in the first place but

848
00:27:34,320 --> 00:27:36,000
that's pretty rare in

849
00:27:36,000 --> 00:27:37,919
most cases because you just can't have

850
00:27:37,919 --> 00:27:39,279
someone sitting there physically

851
00:27:39,279 --> 00:27:41,039
touching that key to authorize the

852
00:27:41,039 --> 00:27:42,480
system every time you spin up a new

853
00:27:42,480 --> 00:27:44,799
server

854
00:27:44,799 --> 00:27:46,320
there's sometimes a problem talked about

855
00:27:46,320 --> 00:27:47,919
earlier that developers will assume that

856
00:27:47,919 --> 00:27:49,679
an api will only ever be internally

857
00:27:49,679 --> 00:27:52,640
accessible and just won't add proper

858
00:27:52,640 --> 00:27:56,000
authorization or authentication to it

859
00:27:56,000 --> 00:27:58,799
and lastly apis may trust unworthy

860
00:27:58,799 --> 00:28:00,480
untrustworthy tokens

861
00:28:00,480 --> 00:28:03,520
so this may come up with you may

862
00:28:03,520 --> 00:28:05,600
say i'm going to have these

863
00:28:05,600 --> 00:28:07,200
four different external authorization

864
00:28:07,200 --> 00:28:08,320
providers

865
00:28:08,320 --> 00:28:10,320
over oauth and if one of those happens

866
00:28:10,320 --> 00:28:12,320
to get compromised you could have a

867
00:28:12,320 --> 00:28:13,919
token that looks perfectly valid to the

868
00:28:13,919 --> 00:28:15,520
application but doesn't turn out to be

869
00:28:15,520 --> 00:28:16,559
trustworthy

870
00:28:16,559 --> 00:28:19,520
you could also have a weekly site jwt

871
00:28:19,520 --> 00:28:21,440
etc so you just have to make sure that

872
00:28:21,440 --> 00:28:23,039
you're staying on top of all of these

873
00:28:23,039 --> 00:28:25,039
technologies so you used to do

874
00:28:25,039 --> 00:28:27,279
the external application and signing up

875
00:28:27,279 --> 00:28:29,600
the keys it's a lot of work

876
00:28:29,600 --> 00:28:30,960
and this is something that you'll find a

877
00:28:30,960 --> 00:28:33,120
whole lot more often in apis than in a

878
00:28:33,120 --> 00:28:35,120
commercial web application so if you're

879
00:28:35,120 --> 00:28:37,039
going to start focusing more and more on

880
00:28:37,039 --> 00:28:39,039
apis getting up to speed with those is

881
00:28:39,039 --> 00:28:41,679
recommended

882
00:28:42,399 --> 00:28:44,159
some other problems apis may not

883
00:28:44,159 --> 00:28:45,440
validate the authentication and

884
00:28:45,440 --> 00:28:47,279
authorization for all functions

885
00:28:47,279 --> 00:28:49,039
again this largely comes down to

886
00:28:49,039 --> 00:28:50,720
developers either making mistake that

887
00:28:50,720 --> 00:28:53,360
they shouldn't or simply again going and

888
00:28:53,360 --> 00:28:55,039
saying that this is only coming from

889
00:28:55,039 --> 00:28:57,039
trustworthy mobile devices or whatever

890
00:28:57,039 --> 00:28:58,320
therefore we don't have to check it

891
00:28:58,320 --> 00:29:00,559
every single time the request comes in

892
00:29:00,559 --> 00:29:02,080
and this has a couple different things

893
00:29:02,080 --> 00:29:03,679
it obviously leads to there's access

894
00:29:03,679 --> 00:29:05,120
control bypass

895
00:29:05,120 --> 00:29:06,399
where

896
00:29:06,399 --> 00:29:07,679
there's administrative functions that

897
00:29:07,679 --> 00:29:09,279
aren't locked down properly if they can

898
00:29:09,279 --> 00:29:10,720
figure out what those are they can get

899
00:29:10,720 --> 00:29:12,720
to those using direct object reference

900
00:29:12,720 --> 00:29:15,120
this is really common in apis where if

901
00:29:15,120 --> 00:29:16,799
there's that unique id that just

902
00:29:16,799 --> 00:29:18,960
iterates by one and it's not checking to

903
00:29:18,960 --> 00:29:20,720
see if each if the account that's making

904
00:29:20,720 --> 00:29:22,240
a request for it has authorization to

905
00:29:22,240 --> 00:29:24,159
see it you sit there and just add one to

906
00:29:24,159 --> 00:29:26,000
that integer every single time and you

907
00:29:26,000 --> 00:29:27,120
go through and find out everyone's

908
00:29:27,120 --> 00:29:28,799
personal information or whatever it has

909
00:29:28,799 --> 00:29:30,799
to be accessing

910
00:29:30,799 --> 00:29:32,159
then you can also do elevation of

911
00:29:32,159 --> 00:29:34,480
privilege where

912
00:29:34,480 --> 00:29:36,320
again if it's saying that

913
00:29:36,320 --> 00:29:37,679
it may be checking to see if there's

914
00:29:37,679 --> 00:29:38,799
authorized

915
00:29:38,799 --> 00:29:41,600
if the user has authorization access app

916
00:29:41,600 --> 00:29:43,039
that may not be checking to see if

917
00:29:43,039 --> 00:29:45,200
there's specific authorization to use

918
00:29:45,200 --> 00:29:46,480
that function

919
00:29:46,480 --> 00:29:49,120
so you can jump up you can get in user

920
00:29:49,120 --> 00:29:50,960
level access then jump up to an admin

921
00:29:50,960 --> 00:29:53,039
using this

922
00:29:53,039 --> 00:29:54,880
in some cases the developers may forget

923
00:29:54,880 --> 00:29:57,039
to put authentication on all the http

924
00:29:57,039 --> 00:30:00,080
reverbs http verbs if you're not

925
00:30:00,080 --> 00:30:01,840
familiar with that term it's

926
00:30:01,840 --> 00:30:03,440
the ones that we commonly use with web

927
00:30:03,440 --> 00:30:05,679
apps web apps are get and post

928
00:30:05,679 --> 00:30:09,919
but in rest we also use put delete etc

929
00:30:09,919 --> 00:30:11,840
and so they may lock down some of them

930
00:30:11,840 --> 00:30:13,679
but not all of them similarly you may

931
00:30:13,679 --> 00:30:15,120
have controls in your web application

932
00:30:15,120 --> 00:30:17,679
firewall that only look for poster get

933
00:30:17,679 --> 00:30:19,679
but don't have the others so that's

934
00:30:19,679 --> 00:30:21,039
something to check every time you're

935
00:30:21,039 --> 00:30:24,960
working with especially rest apis

936
00:30:25,760 --> 00:30:27,279
there's one that's kind of covered by

937
00:30:27,279 --> 00:30:28,559
both of those but it's specifically

938
00:30:28,559 --> 00:30:31,440
called out as the api risk number six so

939
00:30:31,440 --> 00:30:32,640
i'm going to cover it a little bit more

940
00:30:32,640 --> 00:30:34,720
in detail that's mass assignment and

941
00:30:34,720 --> 00:30:36,960
that's basically based when you've got

942
00:30:36,960 --> 00:30:38,320
commonly you've got a framework that

943
00:30:38,320 --> 00:30:40,640
will take any user supplied variable and

944
00:30:40,640 --> 00:30:42,320
put it into an update

945
00:30:42,320 --> 00:30:44,000
even if they're not supposed to have the

946
00:30:44,000 --> 00:30:45,600
ability to do it so kind of the

947
00:30:45,600 --> 00:30:47,760
canonical example is you might have an

948
00:30:47,760 --> 00:30:49,840
update function that says i want to

949
00:30:49,840 --> 00:30:51,679
change what the user's name is

950
00:30:51,679 --> 00:30:53,440
and so if you take looking at an

951
00:30:53,440 --> 00:30:55,120
application with the data flowing back

952
00:30:55,120 --> 00:30:56,559
and forth in your interception proxy you

953
00:30:56,559 --> 00:30:58,559
can see that there's a put request here

954
00:30:58,559 --> 00:31:01,600
and it's update users pretty obvious and

955
00:31:01,600 --> 00:31:05,360
you can guess the name equals bob

956
00:31:05,360 --> 00:31:07,440
so if you can figure out what the other

957
00:31:07,440 --> 00:31:09,200
variables are used are

958
00:31:09,200 --> 00:31:11,120
so if maybe there's a flag called admin

959
00:31:11,120 --> 00:31:12,960
that could be true or false if you just

960
00:31:12,960 --> 00:31:15,039
add that additional information if it's

961
00:31:15,039 --> 00:31:16,480
not sitting there invalidating whether

962
00:31:16,480 --> 00:31:18,080
the user has the permission to do that

963
00:31:18,080 --> 00:31:20,640
type of access modification if it just

964
00:31:20,640 --> 00:31:22,000
takes all of those variables and puts

965
00:31:22,000 --> 00:31:23,519
them into generic query that it builds

966
00:31:23,519 --> 00:31:25,519
on the back end you can get a lot of

967
00:31:25,519 --> 00:31:27,120
traction with this

968
00:31:27,120 --> 00:31:28,799
so again it's kind of covered by what i

969
00:31:28,799 --> 00:31:30,880
talked about previously but because it

970
00:31:30,880 --> 00:31:33,039
got its own specific

971
00:31:33,039 --> 00:31:35,600
finding or risk within the api top 10

972
00:31:35,600 --> 00:31:36,960
list i wanted to make sure that i

973
00:31:36,960 --> 00:31:38,399
explicitly covered

974
00:31:38,399 --> 00:31:39,840
how it differs

975
00:31:39,840 --> 00:31:42,799
slightly from the others

976
00:31:42,799 --> 00:31:44,559
defenses against this

977
00:31:44,559 --> 00:31:46,159
like i said if you're working with

978
00:31:46,159 --> 00:31:48,559
mobile device use certificate pinning

979
00:31:48,559 --> 00:31:50,159
it's not a panacea but it's better than

980
00:31:50,159 --> 00:31:52,480
nothing

981
00:31:52,480 --> 00:31:53,519
i'm not going to go into all the

982
00:31:53,519 --> 00:31:55,840
defenses against credential stuffing etc

983
00:31:55,840 --> 00:31:57,840
but just follow the best practices for

984
00:31:57,840 --> 00:31:59,120
passwords and doing things like rate

985
00:31:59,120 --> 00:32:01,360
limiting logins this is well documented

986
00:32:01,360 --> 00:32:02,960
oas and many other

987
00:32:02,960 --> 00:32:05,279
sites have great resources on how to do

988
00:32:05,279 --> 00:32:06,559
this

989
00:32:06,559 --> 00:32:08,240
when you're doing things where you must

990
00:32:08,240 --> 00:32:10,559
have api keys that are stored on systems

991
00:32:10,559 --> 00:32:12,240
use credential vaults to make it harder

992
00:32:12,240 --> 00:32:14,320
to get access to them and do things like

993
00:32:14,320 --> 00:32:15,840
make sure that your tokens expire fairly

994
00:32:15,840 --> 00:32:17,440
rapidly so if someone does get an

995
00:32:17,440 --> 00:32:19,440
unauthorized token it limits the amount

996
00:32:19,440 --> 00:32:21,840
of damage they can do with it

997
00:32:21,840 --> 00:32:24,159
make sure that you're using random uuids

998
00:32:24,159 --> 00:32:26,799
unique identifiers so that people can't

999
00:32:26,799 --> 00:32:28,960
just go one by one up iterating in

1000
00:32:28,960 --> 00:32:32,559
integer and if it find lots of records

1001
00:32:32,559 --> 00:32:35,039
and the key thing for this is every

1002
00:32:35,039 --> 00:32:36,640
single request coming in for any

1003
00:32:36,640 --> 00:32:38,240
information that's not public

1004
00:32:38,240 --> 00:32:40,080
must check for both the authentication

1005
00:32:40,080 --> 00:32:41,679
and authorization

1006
00:32:41,679 --> 00:32:43,120
you know there's no way around it you

1007
00:32:43,120 --> 00:32:44,799
just have to make sure that

1008
00:32:44,799 --> 00:32:47,039
every single request is validated

1009
00:32:47,039 --> 00:32:48,480
this partially goes back to the problem

1010
00:32:48,480 --> 00:32:50,640
that http is not the ideal protocol for

1011
00:32:50,640 --> 00:32:52,960
this http was designed to be stateless

1012
00:32:52,960 --> 00:32:54,720
every single request is designed to be

1013
00:32:54,720 --> 00:32:56,880
discrete and independent as from

1014
00:32:56,880 --> 00:32:58,559
everyone else

1015
00:32:58,559 --> 00:33:00,720
and so we've got various ways of gluing

1016
00:33:00,720 --> 00:33:02,640
on session management and the web app

1017
00:33:02,640 --> 00:33:04,640
world we've got cookies obviously we've

1018
00:33:04,640 --> 00:33:06,080
got things like session tokens that are

1019
00:33:06,080 --> 00:33:08,480
made with api requests

1020
00:33:08,480 --> 00:33:10,480
because we don't have the ability to

1021
00:33:10,480 --> 00:33:12,480
just keep an open connection and say

1022
00:33:12,480 --> 00:33:14,559
okay it's been authorized once keep this

1023
00:33:14,559 --> 00:33:16,399
connection open and let the data flow

1024
00:33:16,399 --> 00:33:18,080
back and forth every single request

1025
00:33:18,080 --> 00:33:23,120
using http must be have this validation

1026
00:33:23,600 --> 00:33:25,360
so sort of that exposure this is the one

1027
00:33:25,360 --> 00:33:27,679
that we need to be cryptographics

1028
00:33:27,679 --> 00:33:30,399
cryptographic weakness or cryptic weak

1029
00:33:30,399 --> 00:33:33,360
weak use of cryptography in the 2021

1030
00:33:33,360 --> 00:33:34,399
version

1031
00:33:34,399 --> 00:33:36,799
it's very similar to doing standard web

1032
00:33:36,799 --> 00:33:38,480
app testing it's things like missing

1033
00:33:38,480 --> 00:33:39,679
encryption so if you're sending

1034
00:33:39,679 --> 00:33:41,120
information that's sensitive and it's

1035
00:33:41,120 --> 00:33:43,519
not going over tls you've got a pretty

1036
00:33:43,519 --> 00:33:44,720
big problem

1037
00:33:44,720 --> 00:33:46,159
if you're using homebrew or weak

1038
00:33:46,159 --> 00:33:47,360
encryption

1039
00:33:47,360 --> 00:33:48,799
one of the biggest things i took away

1040
00:33:48,799 --> 00:33:50,399
from taking the stanford online course

1041
00:33:50,399 --> 00:33:52,559
of cryptography is i should never write

1042
00:33:52,559 --> 00:33:54,240
a cryptographic algorithm and there's

1043
00:33:54,240 --> 00:33:56,080
absolutely no shame in that some of the

1044
00:33:56,080 --> 00:33:58,320
best best minds for it in the world have

1045
00:33:58,320 --> 00:34:00,399
written our cryptographic algorithms

1046
00:34:00,399 --> 00:34:02,000
you use what they do follow those best

1047
00:34:02,000 --> 00:34:03,039
practices

1048
00:34:03,039 --> 00:34:04,720
on a regular basis they're very standard

1049
00:34:04,720 --> 00:34:06,159
organizations say what you shouldn't use

1050
00:34:06,159 --> 00:34:08,239
anymore we should use this place

1051
00:34:08,239 --> 00:34:10,079
never roll your own never let your

1052
00:34:10,079 --> 00:34:12,159
developers roll their own

1053
00:34:12,159 --> 00:34:13,359
and then you can have flawed use of

1054
00:34:13,359 --> 00:34:15,119
encryption so that could be anything

1055
00:34:15,119 --> 00:34:19,199
from using a key that you copy off of a

1056
00:34:19,199 --> 00:34:20,159
bin

1057
00:34:20,159 --> 00:34:22,320
or stack overflow that everyone else is

1058
00:34:22,320 --> 00:34:23,199
using

1059
00:34:23,199 --> 00:34:25,280
or you might be using aes in a way that

1060
00:34:25,280 --> 00:34:27,280
basically doesn't give falling

1061
00:34:27,280 --> 00:34:29,839
protection

1062
00:34:31,440 --> 00:34:33,119
defenses i mean

1063
00:34:33,119 --> 00:34:34,719
basically you protect your data as best

1064
00:34:34,719 --> 00:34:36,000
you can make sure that everything is

1065
00:34:36,000 --> 00:34:37,119
encrypted

1066
00:34:37,119 --> 00:34:38,560
rest as appropriate make sure that the

1067
00:34:38,560 --> 00:34:40,079
databases are encrypted if that's

1068
00:34:40,079 --> 00:34:42,480
appropriate and like i said just follow

1069
00:34:42,480 --> 00:34:44,079
the best practices don't ever try to

1070
00:34:44,079 --> 00:34:46,720
roll your own

1071
00:34:46,879 --> 00:34:49,119
xml external entities this is another

1072
00:34:49,119 --> 00:34:50,480
one that was kind of interesting that

1073
00:34:50,480 --> 00:34:52,480
didn't make it into the api specific

1074
00:34:52,480 --> 00:34:54,960
list because again xml is more common in

1075
00:34:54,960 --> 00:34:58,079
apis than many web applications it was

1076
00:34:58,079 --> 00:35:01,760
added to the 2017 version of the api of

1077
00:35:01,760 --> 00:35:04,240
the application top 10 list and it was

1078
00:35:04,240 --> 00:35:05,920
one that was rolled into a different

1079
00:35:05,920 --> 00:35:08,480
category in the 2021 list

1080
00:35:08,480 --> 00:35:10,800
it's again it's xml specific and it's

1081
00:35:10,800 --> 00:35:12,960
basically just a local remote following

1082
00:35:12,960 --> 00:35:16,480
include server side attack

1083
00:35:16,480 --> 00:35:18,880
so if you're not familiar with it

1084
00:35:18,880 --> 00:35:21,920
there is a dtd that allows you to say

1085
00:35:21,920 --> 00:35:23,760
go out and this is how to validate this

1086
00:35:23,760 --> 00:35:26,160
xml

1087
00:35:26,800 --> 00:35:28,960
content and if you don't have it locked

1088
00:35:28,960 --> 00:35:30,400
down properly you can either read

1089
00:35:30,400 --> 00:35:33,040
information on the local server or reach

1090
00:35:33,040 --> 00:35:35,280
out to the internet or reach out into

1091
00:35:35,280 --> 00:35:37,359
the intranet and receive information

1092
00:35:37,359 --> 00:35:38,800
you're not supposed to in retrieve that

1093
00:35:38,800 --> 00:35:40,720
using it

1094
00:35:40,720 --> 00:35:42,880
the defenses are pretty simple if you

1095
00:35:42,880 --> 00:35:45,200
don't have a reason to allow dtts just

1096
00:35:45,200 --> 00:35:47,599
disable dtds entirely

1097
00:35:47,599 --> 00:35:49,680
most languages allow you to do that and

1098
00:35:49,680 --> 00:35:51,119
if you do for whatever reason have to

1099
00:35:51,119 --> 00:35:52,560
allow them just make sure that you

1100
00:35:52,560 --> 00:35:53,760
validate them for practice and that

1101
00:35:53,760 --> 00:35:55,040
they're not making a call someplace

1102
00:35:55,040 --> 00:35:57,280
where they shouldn't

1103
00:35:57,280 --> 00:35:59,839
security misconfiguration again this is

1104
00:35:59,839 --> 00:36:01,680
going to be pretty similar between an

1105
00:36:01,680 --> 00:36:04,160
application server and an api server so

1106
00:36:04,160 --> 00:36:06,240
i'm not going to go into everything

1107
00:36:06,240 --> 00:36:07,760
if you want more details you can check

1108
00:36:07,760 --> 00:36:10,640
out the os top 10 list for both the apis

1109
00:36:10,640 --> 00:36:12,720
and applications but a couple things

1110
00:36:12,720 --> 00:36:14,400
that you may find that are specific or

1111
00:36:14,400 --> 00:36:16,880
more common on apis is the first that it

1112
00:36:16,880 --> 00:36:18,960
may not run on the standard port so in

1113
00:36:18,960 --> 00:36:20,079
some cases it may be running on

1114
00:36:20,079 --> 00:36:23,760
something like 8080 or 81. so if someone

1115
00:36:23,760 --> 00:36:25,359
put proper security controls on the

1116
00:36:25,359 --> 00:36:26,960
standard http ports they may have

1117
00:36:26,960 --> 00:36:28,320
forgotten to put it on the ones that the

1118
00:36:28,320 --> 00:36:30,320
api is running on so that may create

1119
00:36:30,320 --> 00:36:32,640
some risk that is more common with apis

1120
00:36:32,640 --> 00:36:34,160
in some cases developers may leave

1121
00:36:34,160 --> 00:36:36,400
verbose errors turned on so that's

1122
00:36:36,400 --> 00:36:37,839
something that's generally turned off in

1123
00:36:37,839 --> 00:36:39,680
web applications for obvious reasons but

1124
00:36:39,680 --> 00:36:41,599
if they're making the assumption that

1125
00:36:41,599 --> 00:36:43,520
only an api and machines can be seeing

1126
00:36:43,520 --> 00:36:45,359
this and who cares if they can see that

1127
00:36:45,359 --> 00:36:47,200
you know there's a sql error coming

1128
00:36:47,200 --> 00:36:49,280
through they may get lazy and forget to

1129
00:36:49,280 --> 00:36:52,320
turn it off so make sure that that's

1130
00:36:52,320 --> 00:36:55,280
turned off and then

1131
00:36:55,280 --> 00:36:57,680
particularly with cloud apis

1132
00:36:57,680 --> 00:36:59,359
it's really easy to misconfigure some of

1133
00:36:59,359 --> 00:37:01,200
those settings

1134
00:37:01,200 --> 00:37:03,680
and create risk this was one of the

1135
00:37:03,680 --> 00:37:06,480
things that we'll talk about with the

1136
00:37:06,480 --> 00:37:07,920
background one attack towards the end of

1137
00:37:07,920 --> 00:37:09,680
the talk

1138
00:37:09,680 --> 00:37:11,599
and the defenses are obviously just

1139
00:37:11,599 --> 00:37:13,040
don't make mistakes you know that's a

1140
00:37:13,040 --> 00:37:15,200
pretty easy one to tell your developers

1141
00:37:15,200 --> 00:37:16,800
but

1142
00:37:16,800 --> 00:37:18,320
basically if there's any reason why

1143
00:37:18,320 --> 00:37:19,760
you're deviating from best practices in

1144
00:37:19,760 --> 00:37:22,160
your configuration

1145
00:37:22,160 --> 00:37:23,520
out why you're doing it make sure that

1146
00:37:23,520 --> 00:37:25,119
there's a good reason if there's not a

1147
00:37:25,119 --> 00:37:27,680
good reason put a halt to that deviation

1148
00:37:27,680 --> 00:37:29,119
and if there is a good reason make sure

1149
00:37:29,119 --> 00:37:32,720
that you've got compensating controls

1150
00:37:32,720 --> 00:37:34,320
cross-site scripting again this is one

1151
00:37:34,320 --> 00:37:35,599
that was rolled into a different

1152
00:37:35,599 --> 00:37:38,400
category in the 2021 list and it does

1153
00:37:38,400 --> 00:37:40,800
not appear in the api top ten list it's

1154
00:37:40,800 --> 00:37:42,480
not all that common in web services

1155
00:37:42,480 --> 00:37:43,680
because

1156
00:37:43,680 --> 00:37:47,599
it's a html or javascript browser attack

1157
00:37:47,599 --> 00:37:49,119
and it's machine to mission

1158
00:37:49,119 --> 00:37:51,280
communication but you do sometimes see

1159
00:37:51,280 --> 00:37:54,079
it where you can use an api to execute a

1160
00:37:54,079 --> 00:37:55,920
cross-site script attack on something

1161
00:37:55,920 --> 00:37:58,079
like a administrative panel

1162
00:37:58,079 --> 00:38:00,480
and so you if you can figure out a way

1163
00:38:00,480 --> 00:38:01,520
that the content that you're putting

1164
00:38:01,520 --> 00:38:03,920
into a database etc will be seen by web

1165
00:38:03,920 --> 00:38:05,280
browser you can do cross-site scripting

1166
00:38:05,280 --> 00:38:07,359
attacks using it and you can sometimes

1167
00:38:07,359 --> 00:38:08,640
use this to do things like attack

1168
00:38:08,640 --> 00:38:10,880
internal systems when that administrator

1169
00:38:10,880 --> 00:38:12,800
on the internet logs in and then you can

1170
00:38:12,800 --> 00:38:14,160
start using that cross-site script and

1171
00:38:14,160 --> 00:38:16,560
you succeed in doing to attack inside

1172
00:38:16,560 --> 00:38:18,800
the intranet

1173
00:38:18,800 --> 00:38:20,720
again if it comes across the trust

1174
00:38:20,720 --> 00:38:22,640
boundary as a developer you have to make

1175
00:38:22,640 --> 00:38:25,040
sure that you validate sanitize escape

1176
00:38:25,040 --> 00:38:27,200
and like other types of injection web

1177
00:38:27,200 --> 00:38:28,880
application firewalls have pretty well

1178
00:38:28,880 --> 00:38:30,400
tuned rules at this point for detecting

1179
00:38:30,400 --> 00:38:31,599
this sort of thing

1180
00:38:31,599 --> 00:38:34,079
so just be aware that you know if make

1181
00:38:34,079 --> 00:38:35,760
sure that you've got your weft turned on

1182
00:38:35,760 --> 00:38:37,040
and that those rules are enabled and

1183
00:38:37,040 --> 00:38:39,839
changed properly

1184
00:38:40,800 --> 00:38:43,040
insecurity is still asian again only

1185
00:38:43,040 --> 00:38:44,240
found in the

1186
00:38:44,240 --> 00:38:45,760
application list but something that

1187
00:38:45,760 --> 00:38:47,920
you'll find in apis fairly often it was

1188
00:38:47,920 --> 00:38:51,119
now the newcomer in 2017 and again was

1189
00:38:51,119 --> 00:38:52,400
rolled into a different category in

1190
00:38:52,400 --> 00:38:54,320
2021.

1191
00:38:54,320 --> 00:38:56,000
deserialization is when you have

1192
00:38:56,000 --> 00:38:59,200
information that's encoded as

1193
00:38:59,200 --> 00:39:01,440
executable programmable programming

1194
00:39:01,440 --> 00:39:02,480
content

1195
00:39:02,480 --> 00:39:04,320
so something like the pivot library and

1196
00:39:04,320 --> 00:39:05,920
python and if you read the pickle

1197
00:39:05,920 --> 00:39:07,680
library it will say never ever trust

1198
00:39:07,680 --> 00:39:09,599
information that doesn't come from a

1199
00:39:09,599 --> 00:39:11,520
trusted source with pickle

1200
00:39:11,520 --> 00:39:13,359
and it basically lets you have complex

1201
00:39:13,359 --> 00:39:15,520
data structures that for example if

1202
00:39:15,520 --> 00:39:17,280
you're using a load balancer and you're

1203
00:39:17,280 --> 00:39:18,560
bouncing users between different

1204
00:39:18,560 --> 00:39:21,359
applications you might serialize data so

1205
00:39:21,359 --> 00:39:23,599
that application server one can pick up

1206
00:39:23,599 --> 00:39:25,359
right where application server three

1207
00:39:25,359 --> 00:39:28,880
left off on the previous request

1208
00:39:28,880 --> 00:39:30,720
the best defense against deserialization

1209
00:39:30,720 --> 00:39:32,320
attacks is simply not to use it unless

1210
00:39:32,320 --> 00:39:34,160
there's a really good reason

1211
00:39:34,160 --> 00:39:35,760
in most of the cases

1212
00:39:35,760 --> 00:39:38,160
with web applications you can figure out

1213
00:39:38,160 --> 00:39:40,160
other reasons other ways

1214
00:39:40,160 --> 00:39:42,560
to not use serialization at least in

1215
00:39:42,560 --> 00:39:46,240
data that's ever coming from a user

1216
00:39:46,480 --> 00:39:49,200
if it must come from an untrusted source

1217
00:39:49,200 --> 00:39:50,800
make sure that you do as much validation

1218
00:39:50,800 --> 00:39:53,200
sanitization etc etc

1219
00:39:53,200 --> 00:39:54,880
there's a great talk from shmukon that

1220
00:39:54,880 --> 00:39:56,960
surgery bratis and meredith patterson

1221
00:39:56,960 --> 00:39:59,599
did i want to say in 2014

1222
00:39:59,599 --> 00:40:02,000
it talks about how you can never trust

1223
00:40:02,000 --> 00:40:04,160
information that's turning complete

1224
00:40:04,160 --> 00:40:05,599
because there is no way to actually

1225
00:40:05,599 --> 00:40:07,119
validate that there's an infinite number

1226
00:40:07,119 --> 00:40:08,720
of possibilities as far as any term

1227
00:40:08,720 --> 00:40:10,880
complete language therefore

1228
00:40:10,880 --> 00:40:13,119
you can never 100 prove that something

1229
00:40:13,119 --> 00:40:14,240
is safe

1230
00:40:14,240 --> 00:40:15,040
so

1231
00:40:15,040 --> 00:40:17,119
again my best advice is simply never to

1232
00:40:17,119 --> 00:40:19,280
use detailed vision if it's coming from

1233
00:40:19,280 --> 00:40:22,960
a user unless there's no other way

1234
00:40:22,960 --> 00:40:23,920
using components with their

1235
00:40:23,920 --> 00:40:25,920
invulnerabilities again this is not

1236
00:40:25,920 --> 00:40:27,119
significantly different than testing a

1237
00:40:27,119 --> 00:40:28,640
web application

1238
00:40:28,640 --> 00:40:29,359
but

1239
00:40:29,359 --> 00:40:30,960
one thing that you do find sometimes is

1240
00:40:30,960 --> 00:40:33,680
apis because they don't think of them

1241
00:40:33,680 --> 00:40:35,599
the way they say operations may not

1242
00:40:35,599 --> 00:40:37,280
think of apis the same way they think of

1243
00:40:37,280 --> 00:40:40,079
as think of web apps and so they kind of

1244
00:40:40,079 --> 00:40:42,079
may forget to keep an eye on them

1245
00:40:42,079 --> 00:40:43,839
and then the big thing you'll find here

1246
00:40:43,839 --> 00:40:47,599
is iot devices use apis constantly and

1247
00:40:47,599 --> 00:40:48,960
one of the big challenges we have in the

1248
00:40:48,960 --> 00:40:50,960
industry is that iot devices may not be

1249
00:40:50,960 --> 00:40:53,119
patchable either by design or because

1250
00:40:53,119 --> 00:40:54,880
the manufacturer may not bother to ever

1251
00:40:54,880 --> 00:40:57,040
patch them so you'll have devices

1252
00:40:57,040 --> 00:40:58,720
sitting on your internet internet et

1253
00:40:58,720 --> 00:41:00,720
cetera that may be risky and there's no

1254
00:41:00,720 --> 00:41:02,640
way to fix them there have these risk

1255
00:41:02,640 --> 00:41:05,200
apis

1256
00:41:05,200 --> 00:41:07,760
again if possible the best defense is to

1257
00:41:07,760 --> 00:41:09,200
simply never use a component with a

1258
00:41:09,200 --> 00:41:10,640
known vulnerability

1259
00:41:10,640 --> 00:41:12,400
if for whatever reason you must use a

1260
00:41:12,400 --> 00:41:14,000
component like that make sure that

1261
00:41:14,000 --> 00:41:16,319
you've got a vlan to do isolation as

1262
00:41:16,319 --> 00:41:18,400
best as possible you can do things like

1263
00:41:18,400 --> 00:41:20,319
place inline web applications firewalls

1264
00:41:20,319 --> 00:41:22,079
that just completely block all possible

1265
00:41:22,079 --> 00:41:24,079
access to certain known vulnerabilities

1266
00:41:24,079 --> 00:41:26,319
etc and you can use that as a technique

1267
00:41:26,319 --> 00:41:29,359
called soft passion

1268
00:41:29,359 --> 00:41:31,040
insufficient blogging monitoring again

1269
00:41:31,040 --> 00:41:32,319
this is going to be pretty much the same

1270
00:41:32,319 --> 00:41:33,359
between

1271
00:41:33,359 --> 00:41:35,520
apis and web applications but in some

1272
00:41:35,520 --> 00:41:37,200
cases companies may log their web

1273
00:41:37,200 --> 00:41:40,000
services and apis or their web services

1274
00:41:40,000 --> 00:41:42,319
and web apps differently so you may

1275
00:41:42,319 --> 00:41:43,440
might find that they're doing really

1276
00:41:43,440 --> 00:41:46,000
good logging algorithms or logging

1277
00:41:46,000 --> 00:41:48,560
analysis algorithms in the sim for users

1278
00:41:48,560 --> 00:41:50,480
logging in via the website but they may

1279
00:41:50,480 --> 00:41:52,000
not have that doing that for the api

1280
00:41:52,000 --> 00:41:53,359
that you're using to log in by the

1281
00:41:53,359 --> 00:41:54,480
mobile app

1282
00:41:54,480 --> 00:41:56,480
so you'll find some weaknesses there

1283
00:41:56,480 --> 00:41:59,200
from time to time

1284
00:42:00,160 --> 00:42:02,319
in some cases if the api is really

1285
00:42:02,319 --> 00:42:04,079
chatting you're paying by the gigabyte

1286
00:42:04,079 --> 00:42:06,160
or whatever for your same ingestion they

1287
00:42:06,160 --> 00:42:08,400
may just kind of cheap out and not feed

1288
00:42:08,400 --> 00:42:11,760
all the data from the apis in

1289
00:42:12,240 --> 00:42:13,920
obviously the defense is to make sure

1290
00:42:13,920 --> 00:42:15,040
that you're logging in as much as

1291
00:42:15,040 --> 00:42:17,200
possible even if it doesn't flow to the

1292
00:42:17,200 --> 00:42:18,800
sim if you at least have it you can do

1293
00:42:18,800 --> 00:42:20,640
some kind of recovery

1294
00:42:20,640 --> 00:42:22,000
after the fact

1295
00:42:22,000 --> 00:42:23,440
make sure that the send has equivalent

1296
00:42:23,440 --> 00:42:25,119
rules if there's an api that does

1297
00:42:25,119 --> 00:42:26,880
something similar to what the web app

1298
00:42:26,880 --> 00:42:28,880
does and if there's a rule created to

1299
00:42:28,880 --> 00:42:30,800
alert if there's something malicious

1300
00:42:30,800 --> 00:42:32,400
going on in the web app make sure that

1301
00:42:32,400 --> 00:42:34,319
the api has the similar rules

1302
00:42:34,319 --> 00:42:36,240
and then ensure that the sock can and

1303
00:42:36,240 --> 00:42:38,000
does take the appropriate steps from the

1304
00:42:38,000 --> 00:42:39,599
when there's the issue

1305
00:42:39,599 --> 00:42:41,680
yet again it's no use having data

1306
00:42:41,680 --> 00:42:43,280
flowing to the sim if no one's reading

1307
00:42:43,280 --> 00:42:45,280
it if no one's taking action

1308
00:42:45,280 --> 00:42:46,560
and this could be anything from a

1309
00:42:46,560 --> 00:42:48,240
training issue to just the stock staff

1310
00:42:48,240 --> 00:42:52,000
is overwhelmed so figure out why the

1311
00:42:52,000 --> 00:42:53,280
why they aren't taking the time to read

1312
00:42:53,280 --> 00:42:54,880
the logs figure out why they are taking

1313
00:42:54,880 --> 00:42:56,800
action and resolve that as best as

1314
00:42:56,800 --> 00:42:59,760
possible

1315
00:42:59,760 --> 00:43:03,520
basil says we're almost to the end

1316
00:43:04,000 --> 00:43:06,560
things unique to the api top 10 list

1317
00:43:06,560 --> 00:43:08,960
there's three excessive debt exposure so

1318
00:43:08,960 --> 00:43:10,560
this is when the api gives out a lot

1319
00:43:10,560 --> 00:43:12,560
more information and just trust that the

1320
00:43:12,560 --> 00:43:15,359
end point is going to do the parsing so

1321
00:43:15,359 --> 00:43:17,200
the example here is if you've got the

1322
00:43:17,200 --> 00:43:19,359
mobile app that says i need to display

1323
00:43:19,359 --> 00:43:20,800
those about the

1324
00:43:20,800 --> 00:43:22,960
about the user who's logged in

1325
00:43:22,960 --> 00:43:24,720
and the api says okay well here's all

1326
00:43:24,720 --> 00:43:27,040
the information about all the users and

1327
00:43:27,040 --> 00:43:29,119
on the on your side just filter out all

1328
00:43:29,119 --> 00:43:30,720
the information that's not necessary and

1329
00:43:30,720 --> 00:43:32,480
only display what's authorized for this

1330
00:43:32,480 --> 00:43:33,440
user

1331
00:43:33,440 --> 00:43:35,119
you can't trust the endpoints to do this

1332
00:43:35,119 --> 00:43:36,240
you always have to make sure you

1333
00:43:36,240 --> 00:43:38,240
restrict what has been given out to the

1334
00:43:38,240 --> 00:43:39,359
base

1335
00:43:39,359 --> 00:43:40,720
to the absolute minimum of what's

1336
00:43:40,720 --> 00:43:41,839
required

1337
00:43:41,839 --> 00:43:43,599
so yet again the answer is to work with

1338
00:43:43,599 --> 00:43:45,280
your developers ensure that they're not

1339
00:43:45,280 --> 00:43:47,520
doing that there's no clever lab tools

1340
00:43:47,520 --> 00:43:49,359
that can fix this there's no clever sas

1341
00:43:49,359 --> 00:43:51,119
detection tools that will fix this you

1342
00:43:51,119 --> 00:43:52,480
just have to look at the data and figure

1343
00:43:52,480 --> 00:43:53,839
out whether there's more information

1344
00:43:53,839 --> 00:43:55,200
being given out than they're supposed to

1345
00:43:55,200 --> 00:43:56,880
be

1346
00:43:56,880 --> 00:43:58,800
like the resources are rate limiting

1347
00:43:58,800 --> 00:44:00,640
this is kind of akin to what i talked

1348
00:44:00,640 --> 00:44:02,800
about with things like brute force login

1349
00:44:02,800 --> 00:44:04,960
but it's also just apis can have some

1350
00:44:04,960 --> 00:44:06,319
performance hits

1351
00:44:06,319 --> 00:44:09,040
so my previous company had an api that

1352
00:44:09,040 --> 00:44:10,640
if you made more than about seven

1353
00:44:10,640 --> 00:44:12,079
requests to it in a second it would

1354
00:44:12,079 --> 00:44:13,680
cause the application server to start

1355
00:44:13,680 --> 00:44:16,160
falling over

1356
00:44:16,640 --> 00:44:18,000
if you start with the assumption that

1357
00:44:18,000 --> 00:44:20,240
you know users won't sit there and send

1358
00:44:20,240 --> 00:44:22,480
thousands of requests a second to that

1359
00:44:22,480 --> 00:44:24,240
api if you don't put that rate limiting

1360
00:44:24,240 --> 00:44:26,800
and you can end up with an intentional

1361
00:44:26,800 --> 00:44:30,720
unintentional denial service here

1362
00:44:31,440 --> 00:44:33,680
so yet again figure out what the minimum

1363
00:44:33,680 --> 00:44:35,760
requirements are work with the

1364
00:44:35,760 --> 00:44:37,040
operations team to tune the rate

1365
00:44:37,040 --> 00:44:39,520
restrictions to have what's a realistic

1366
00:44:39,520 --> 00:44:41,440
use case make sure that the users are

1367
00:44:41,440 --> 00:44:43,280
not being unintentionally dosed by your

1368
00:44:43,280 --> 00:44:45,520
rate restrictions but that an attacker

1369
00:44:45,520 --> 00:44:46,720
can't un intentionally or

1370
00:44:46,720 --> 00:44:48,880
unintentionally blow your apis out of

1371
00:44:48,880 --> 00:44:51,599
the water if possible one thing that's

1372
00:44:51,599 --> 00:44:53,200
great with cloud native applications is

1373
00:44:53,200 --> 00:44:55,520
you can have auto scaling and just say

1374
00:44:55,520 --> 00:44:57,119
okay if things are in heavy loads spend

1375
00:44:57,119 --> 00:44:59,040
up a bunch of new servers you need to be

1376
00:44:59,040 --> 00:45:00,160
careful with this because it can get

1377
00:45:00,160 --> 00:45:01,920
very expensive so make sure that that's

1378
00:45:01,920 --> 00:45:04,640
taken into account improper asset

1379
00:45:04,640 --> 00:45:06,480
management this is when you might have

1380
00:45:06,480 --> 00:45:09,040
older versions of an api or test api

1381
00:45:09,040 --> 00:45:10,800
that remain functional and they either

1382
00:45:10,800 --> 00:45:12,160
have

1383
00:45:12,160 --> 00:45:13,520
lack of protections that the production

1384
00:45:13,520 --> 00:45:16,480
api does or have vulnerabilities you may

1385
00:45:16,480 --> 00:45:17,760
have things like test senses that may

1386
00:45:17,760 --> 00:45:20,560
have guessable paths or hostings

1387
00:45:20,560 --> 00:45:22,640
as ever don't do that

1388
00:45:22,640 --> 00:45:24,560
and do things like if you have an older

1389
00:45:24,560 --> 00:45:27,280
version of an api it's a pain we're

1390
00:45:27,280 --> 00:45:28,640
working with customers who may be used

1391
00:45:28,640 --> 00:45:30,800
to it but you have to say okay you have

1392
00:45:30,800 --> 00:45:32,880
to upgrade your mobile device and start

1393
00:45:32,880 --> 00:45:34,000
using this

1394
00:45:34,000 --> 00:45:35,440
the newer version the app because it

1395
00:45:35,440 --> 00:45:37,119
relies on the newer api so we can get

1396
00:45:37,119 --> 00:45:39,119
rid of the old ones if you must keep the

1397
00:45:39,119 --> 00:45:41,760
old apis online make sure that you back

1398
00:45:41,760 --> 00:45:44,240
port and security fixes to them and make

1399
00:45:44,240 --> 00:45:46,400
sure that anything that's a dev test api

1400
00:45:46,400 --> 00:45:50,400
instance etc is locked down properly

1401
00:45:50,560 --> 00:45:53,119
new ones for the top 20 top 10 lists for

1402
00:45:53,119 --> 00:45:55,520
2021 and for the moderator i'm also

1403
00:45:55,520 --> 00:45:57,040
almost to the end so i'm aware that i'm

1404
00:45:57,040 --> 00:45:59,119
right about at the end

1405
00:45:59,119 --> 00:46:01,040
so insecure design this is a new one

1406
00:46:01,040 --> 00:46:03,440
that's talking about pushing design left

1407
00:46:03,440 --> 00:46:05,440
pushing application security left and

1408
00:46:05,440 --> 00:46:07,119
making sure that

1409
00:46:07,119 --> 00:46:08,400
security is taken attempt from the

1410
00:46:08,400 --> 00:46:09,359
get-go

1411
00:46:09,359 --> 00:46:11,040
there's no formal way of testing this

1412
00:46:11,040 --> 00:46:12,800
obviously but here's what we can do we

1413
00:46:12,800 --> 00:46:14,319
can engage with developers early and

1414
00:46:14,319 --> 00:46:16,400
often this works best if you're working

1415
00:46:16,400 --> 00:46:18,000
on a security team for a company rather

1416
00:46:18,000 --> 00:46:19,040
than something like a contracting

1417
00:46:19,040 --> 00:46:20,880
company obviously you can do threat

1418
00:46:20,880 --> 00:46:22,160
modeling with the developers to make

1419
00:46:22,160 --> 00:46:23,520
sure that they understand what the risks

1420
00:46:23,520 --> 00:46:24,880
are from the beginning you can create

1421
00:46:24,880 --> 00:46:26,319
security champions which means that you

1422
00:46:26,319 --> 00:46:27,760
give training to the people who do the

1423
00:46:27,760 --> 00:46:28,720
development to get them really

1424
00:46:28,720 --> 00:46:30,480
interested in engage with security and

1425
00:46:30,480 --> 00:46:31,920
very often they will advocate for good

1426
00:46:31,920 --> 00:46:33,440
security from the beginning

1427
00:46:33,440 --> 00:46:34,560
and then something that i definitely

1428
00:46:34,560 --> 00:46:36,160
promote is provide the developers with

1429
00:46:36,160 --> 00:46:37,359
fun and engaged

1430
00:46:37,359 --> 00:46:39,599
engaging security training so we'll

1431
00:46:39,599 --> 00:46:41,040
probably all have really adult

1432
00:46:41,040 --> 00:46:42,319
computer-based training where you just

1433
00:46:42,319 --> 00:46:43,440
click through and click through and

1434
00:46:43,440 --> 00:46:45,200
click through and you don't really care

1435
00:46:45,200 --> 00:46:46,720
and you don't really learn anything you

1436
00:46:46,720 --> 00:46:48,160
can do things like there's different

1437
00:46:48,160 --> 00:46:49,839
training programs that have developers

1438
00:46:49,839 --> 00:46:51,520
actually hack vulnerabilities and then

1439
00:46:51,520 --> 00:46:53,359
fix them i think that's a lot more

1440
00:46:53,359 --> 00:46:54,800
engaging and you get them to understand

1441
00:46:54,800 --> 00:46:57,920
both the risks and how to fix them

1442
00:46:57,920 --> 00:47:00,319
there's number eight that's new for 2021

1443
00:47:00,319 --> 00:47:02,240
software and integrity failures again

1444
00:47:02,240 --> 00:47:03,839
this had deserialization that we talked

1445
00:47:03,839 --> 00:47:05,520
about earlier but this is talking about

1446
00:47:05,520 --> 00:47:07,359
things like subverted continuous

1447
00:47:07,359 --> 00:47:08,720
integration pipelines so attacking

1448
00:47:08,720 --> 00:47:10,400
things like jenkins could be

1449
00:47:10,400 --> 00:47:12,400
compromising trusted data so something

1450
00:47:12,400 --> 00:47:14,079
that you think is not crossing a trust

1451
00:47:14,079 --> 00:47:15,599
boundary if it's a file that's on the

1452
00:47:15,599 --> 00:47:17,359
file system that's considered safe an

1453
00:47:17,359 --> 00:47:18,880
attacker can get access to right to that

1454
00:47:18,880 --> 00:47:20,319
they can do things to attack the web app

1455
00:47:20,319 --> 00:47:22,319
with it and things like supply chain

1456
00:47:22,319 --> 00:47:23,520
attacks

1457
00:47:23,520 --> 00:47:24,559
things like

1458
00:47:24,559 --> 00:47:26,960
let's see with the npm compromises or

1459
00:47:26,960 --> 00:47:28,559
just getting it to load and malicious

1460
00:47:28,559 --> 00:47:30,079
library

1461
00:47:30,079 --> 00:47:31,920
defenses make sure that your ci

1462
00:47:31,920 --> 00:47:33,680
infrastructure is hard and smart at

1463
00:47:33,680 --> 00:47:36,000
least access least privilege etc use

1464
00:47:36,000 --> 00:47:38,400
trusted repositories to pull your

1465
00:47:38,400 --> 00:47:40,720
files from so don't just pull from a

1466
00:47:40,720 --> 00:47:43,040
public repository for libraries make

1467
00:47:43,040 --> 00:47:44,640
sure that's been pulled in and as the

1468
00:47:44,640 --> 00:47:47,040
best you can secure it by scanning

1469
00:47:47,040 --> 00:47:48,720
sign code for deployment whenever

1470
00:47:48,720 --> 00:47:50,079
possible to make sure that malicious

1471
00:47:50,079 --> 00:47:52,480
code can't be substituted for it

1472
00:47:52,480 --> 00:47:54,480
use software composition analysis tools

1473
00:47:54,480 --> 00:47:55,920
such as dependency check which is a

1474
00:47:55,920 --> 00:47:58,160
project from os it will say you're using

1475
00:47:58,160 --> 00:48:00,079
this vulnerable library you need to

1476
00:48:00,079 --> 00:48:01,119
upgrade it

1477
00:48:01,119 --> 00:48:02,000
otherwise you're going to have the

1478
00:48:02,000 --> 00:48:05,359
stress 2 vulnerability etc and when

1479
00:48:05,359 --> 00:48:06,160
you're thinking about your trust

1480
00:48:06,160 --> 00:48:07,520
boundaries always consider how

1481
00:48:07,520 --> 00:48:09,920
trustworthy it is in some cases even

1482
00:48:09,920 --> 00:48:11,680
when you think it's mostly trustworthy

1483
00:48:11,680 --> 00:48:14,160
you still have to do some validation

1484
00:48:14,160 --> 00:48:15,920
last but not least server-side request

1485
00:48:15,920 --> 00:48:17,839
forging so this was famously used in the

1486
00:48:17,839 --> 00:48:19,839
capital one breach and this is basically

1487
00:48:19,839 --> 00:48:21,280
it's just when you can get the server to

1488
00:48:21,280 --> 00:48:23,119
make your request to a uri that's not

1489
00:48:23,119 --> 00:48:25,200
supposed to the way that this capital

1490
00:48:25,200 --> 00:48:27,119
one breach worked is there's a backplane

1491
00:48:27,119 --> 00:48:30,079
api that's used by aws that the attacker

1492
00:48:30,079 --> 00:48:31,920
was able to get a server to make a

1493
00:48:31,920 --> 00:48:33,040
request to

1494
00:48:33,040 --> 00:48:35,040
once you had access to do that they

1495
00:48:35,040 --> 00:48:37,280
could pull out the private key that was

1496
00:48:37,280 --> 00:48:39,119
allowed was the key to access all of the

1497
00:48:39,119 --> 00:48:41,599
information in the s3 buckets and by

1498
00:48:41,599 --> 00:48:45,280
grabbing that making api call by an ssr

1499
00:48:45,280 --> 00:48:47,119
vulnerability in the application the

1500
00:48:47,119 --> 00:48:48,960
attacker got the key and then used the

1501
00:48:48,960 --> 00:48:50,319
key to start pulling information from

1502
00:48:50,319 --> 00:48:51,599
s30

1503
00:48:51,599 --> 00:48:53,040
it's a really simple attack once you

1504
00:48:53,040 --> 00:48:55,599
know how to do it

1505
00:48:55,599 --> 00:48:57,520
very powerful big financial hit to

1506
00:48:57,520 --> 00:48:59,200
capital one obviously

1507
00:48:59,200 --> 00:49:01,839
the defenses as ever validate user input

1508
00:49:01,839 --> 00:49:03,280
if there's not a good reason for the

1509
00:49:03,280 --> 00:49:05,040
user to be specifying what server to go

1510
00:49:05,040 --> 00:49:05,920
to

1511
00:49:05,920 --> 00:49:07,440
don't let them make sure that if you

1512
00:49:07,440 --> 00:49:08,880
have a server that's making requests to

1513
00:49:08,880 --> 00:49:11,599
a uri make sure this configures not

1514
00:49:11,599 --> 00:49:13,200
follow redirect so it can't be

1515
00:49:13,200 --> 00:49:15,280
redirected to something it looks safe

1516
00:49:15,280 --> 00:49:18,480
but then goes to an internal privileged

1517
00:49:18,480 --> 00:49:19,520
uri

1518
00:49:19,520 --> 00:49:21,119
restrict outgoing access from the web

1519
00:49:21,119 --> 00:49:22,880
servers if there's not any good reason

1520
00:49:22,880 --> 00:49:23,920
for it to be connecting out to the

1521
00:49:23,920 --> 00:49:26,319
internet or to your internet on the

1522
00:49:26,319 --> 00:49:29,440
inter on the internal servers

1523
00:49:29,440 --> 00:49:32,640
block the internal incoming requests

1524
00:49:32,640 --> 00:49:33,920
unless there's a good reason why the web

1525
00:49:33,920 --> 00:49:36,160
search server should be reaching to it

1526
00:49:36,160 --> 00:49:38,000
and harden the internal apis to the get

1527
00:49:38,000 --> 00:49:41,280
request network so the aw aws fix for

1528
00:49:41,280 --> 00:49:43,359
this was to modify the api so that you

1529
00:49:43,359 --> 00:49:45,280
can no longer get that data using get

1530
00:49:45,280 --> 00:49:46,880
request so

1531
00:49:46,880 --> 00:49:48,559
even when there's a valid reason why

1532
00:49:48,559 --> 00:49:50,160
that server should be making get request

1533
00:49:50,160 --> 00:49:52,240
you can no longer if you've if you're

1534
00:49:52,240 --> 00:49:55,119
using the new version the aws api

1535
00:49:55,119 --> 00:49:57,359
it can no longer get that data

1536
00:49:57,359 --> 00:49:59,200
so defense in depth make sure that

1537
00:49:59,200 --> 00:50:02,640
you've got all these taken into account

1538
00:50:03,040 --> 00:50:04,400
i'm a little frazzled maybe you're a

1539
00:50:04,400 --> 00:50:05,839
little frazzled the kitty is definitely

1540
00:50:05,839 --> 00:50:07,520
very frazzled

1541
00:50:07,520 --> 00:50:08,720
bringing it together and wrapping up

1542
00:50:08,720 --> 00:50:10,240
before the questions

1543
00:50:10,240 --> 00:50:11,440
the things i'd like you to take away

1544
00:50:11,440 --> 00:50:12,880
from this is keep in mind that the top

1545
00:50:12,880 --> 00:50:14,960
10 lists only cover the top 10 that

1546
00:50:14,960 --> 00:50:16,000
doesn't mean you don't have to care

1547
00:50:16,000 --> 00:50:18,240
about 11 et cetera be aware that there's

1548
00:50:18,240 --> 00:50:20,160
other risks to think about do threat

1549
00:50:20,160 --> 00:50:21,280
modeling to make sure that you're doing

1550
00:50:21,280 --> 00:50:22,800
the most accurate testing for the things

1551
00:50:22,800 --> 00:50:26,520
you care about the most

1552
00:50:26,800 --> 00:50:28,480
a lot of the testing is going to be the

1553
00:50:28,480 --> 00:50:30,160
same between doing a web app test and an

1554
00:50:30,160 --> 00:50:31,920
api test but i find that having a

1555
00:50:31,920 --> 00:50:33,280
checklist for all these different things

1556
00:50:33,280 --> 00:50:35,119
i covered made sure that i didn't forget

1557
00:50:35,119 --> 00:50:37,119
something that was specific apis or was

1558
00:50:37,119 --> 00:50:39,280
more common to apis get as much

1559
00:50:39,280 --> 00:50:40,880
documentation with the developers to get

1560
00:50:40,880 --> 00:50:42,880
as much information about an api before

1561
00:50:42,880 --> 00:50:44,319
testing it as possible

1562
00:50:44,319 --> 00:50:45,839
and as much as possible train your

1563
00:50:45,839 --> 00:50:49,040
developers to not do that

1564
00:50:49,280 --> 00:50:50,640
and now we'll get to the questions i'd

1565
00:50:50,640 --> 00:50:52,079
like to take a moment to thank both the

1566
00:50:52,079 --> 00:50:53,440
organizers and the volunteers for the

1567
00:50:53,440 --> 00:50:57,640
event and you for your time

