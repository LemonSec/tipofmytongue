1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:05,759 --> 00:00:07,600
thank you all right and

3
00:00:07,600 --> 00:00:08,960
first of all welcome everybody for

4
00:00:08,960 --> 00:00:11,280
attending my presentation

5
00:00:11,280 --> 00:00:12,960
so today we're going to talk about

6
00:00:12,960 --> 00:00:15,519
security design anti-patterns those are

7
00:00:15,519 --> 00:00:16,960
patterns that came out of threat

8
00:00:16,960 --> 00:00:19,279
modeling exercises like the snippet that

9
00:00:19,279 --> 00:00:21,359
you see here in the screen

10
00:00:21,359 --> 00:00:23,359
and a little bit about how to make this

11
00:00:23,359 --> 00:00:26,160
better in order to limit security debt

12
00:00:26,160 --> 00:00:30,039
in the future later on

13
00:00:30,960 --> 00:00:32,719
all right let's go over the agenda for

14
00:00:32,719 --> 00:00:33,680
today

15
00:00:33,680 --> 00:00:34,960
first of all i'm going to give you some

16
00:00:34,960 --> 00:00:37,200
background of why this topic

17
00:00:37,200 --> 00:00:38,800
then um

18
00:00:38,800 --> 00:00:41,360
i'm going to talk about complexity

19
00:00:41,360 --> 00:00:44,160
differences of controls what that means

20
00:00:44,160 --> 00:00:45,920
then how an application will grow and to

21
00:00:45,920 --> 00:00:47,280
secure that and then we're going to dive

22
00:00:47,280 --> 00:00:49,440
into the security design entire patterns

23
00:00:49,440 --> 00:00:50,480
i have 12

24
00:00:50,480 --> 00:00:52,320
of them planned for you

25
00:00:52,320 --> 00:00:53,840
we'll talk about a common role

26
00:00:53,840 --> 00:00:56,160
misconception then authorization

27
00:00:56,160 --> 00:00:58,879
anti-patterns five of them some timing

28
00:00:58,879 --> 00:01:00,559
entire patterns different variation of

29
00:01:00,559 --> 00:01:02,960
them systems that don't mix well

30
00:01:02,960 --> 00:01:04,640
scalability enterpreneurs and that at

31
00:01:04,640 --> 00:01:06,240
the end we'll talk about what we can do

32
00:01:06,240 --> 00:01:08,159
about it action items to limit security

33
00:01:08,159 --> 00:01:09,119
debt

34
00:01:09,119 --> 00:01:10,880
then of course later on we'll open up

35
00:01:10,880 --> 00:01:14,960
for q a suggestions and comments

36
00:01:15,840 --> 00:01:17,840
all right a little bit of background why

37
00:01:17,840 --> 00:01:19,439
this topic

38
00:01:19,439 --> 00:01:21,520
i started leading the threat mining

39
00:01:21,520 --> 00:01:23,200
program here at my current employee

40
00:01:23,200 --> 00:01:25,200
northwestern mutual insurance company

41
00:01:25,200 --> 00:01:26,880
and i was part of the application

42
00:01:26,880 --> 00:01:28,640
security team

43
00:01:28,640 --> 00:01:31,360
and in that in that role we did some

44
00:01:31,360 --> 00:01:33,920
prototyping for threat models

45
00:01:33,920 --> 00:01:36,159
and the these threat models were done in

46
00:01:36,159 --> 00:01:38,240
after the fashion that means the

47
00:01:38,240 --> 00:01:40,240
application was already rolled out into

48
00:01:40,240 --> 00:01:42,240
production there were some painful

49
00:01:42,240 --> 00:01:44,000
lessons that came out of this of the

50
00:01:44,000 --> 00:01:45,600
certain things that we are missed to

51
00:01:45,600 --> 00:01:48,079
implement

52
00:01:48,399 --> 00:01:50,880
shortly thereafter i was moved into the

53
00:01:50,880 --> 00:01:52,880
assessments team architecture and

54
00:01:52,880 --> 00:01:55,439
assessments team which is not this pen

55
00:01:55,439 --> 00:01:57,119
testing assessment that's like a

56
00:01:57,119 --> 00:01:58,799
security view that's that does

57
00:01:58,799 --> 00:02:00,880
assessment assessments very late in the

58
00:02:00,880 --> 00:02:03,600
game um as a review

59
00:02:03,600 --> 00:02:05,600
and not um

60
00:02:05,600 --> 00:02:06,960
early on

61
00:02:06,960 --> 00:02:08,720
the question always came up

62
00:02:08,720 --> 00:02:10,479
when should we do a threat model and i

63
00:02:10,479 --> 00:02:12,080
told them well we should do this like

64
00:02:12,080 --> 00:02:14,720
you see here on the screen very early on

65
00:02:14,720 --> 00:02:17,200
in the design phase of the

66
00:02:17,200 --> 00:02:19,360
software development life cycle so i

67
00:02:19,360 --> 00:02:21,280
started taking notes and gave an example

68
00:02:21,280 --> 00:02:23,200
of what happens when

69
00:02:23,200 --> 00:02:24,560
certain

70
00:02:24,560 --> 00:02:27,280
threads are not mitigated and dealt with

71
00:02:27,280 --> 00:02:29,840
those anal patterns those lists of error

72
00:02:29,840 --> 00:02:31,440
patterns help to onboard more teams and

73
00:02:31,440 --> 00:02:34,160
then also i was able to describe worst

74
00:02:34,160 --> 00:02:36,400
case scenarios what happens when

75
00:02:36,400 --> 00:02:38,319
certain things happen in a combination

76
00:02:38,319 --> 00:02:40,160
when certain controls are missed and

77
00:02:40,160 --> 00:02:42,879
then the purpose of the threat models

78
00:02:42,879 --> 00:02:44,720
versus the assessment the threat model

79
00:02:44,720 --> 00:02:47,040
should explain or detect what should be

80
00:02:47,040 --> 00:02:48,720
there but it's not there versus the

81
00:02:48,720 --> 00:02:50,720
assessments basically focus on what is

82
00:02:50,720 --> 00:02:53,440
there and if it is implemented correctly

83
00:02:53,440 --> 00:02:55,519
so with that i was able to

84
00:02:55,519 --> 00:02:57,760
describe complex threat scenarios that

85
00:02:57,760 --> 00:02:59,040
were found and shared them with the

86
00:02:59,040 --> 00:03:00,640
teams

87
00:03:00,640 --> 00:03:02,480
the question also came up um what can

88
00:03:02,480 --> 00:03:04,000
you do with automation versus manual

89
00:03:04,000 --> 00:03:06,720
modeling i was doing manual modeling um

90
00:03:06,720 --> 00:03:08,000
initially

91
00:03:08,000 --> 00:03:09,280
by doing

92
00:03:09,280 --> 00:03:10,400
um

93
00:03:10,400 --> 00:03:12,879
by prototyping so the automation

94
00:03:12,879 --> 00:03:14,800
currently is only limited to finding

95
00:03:14,800 --> 00:03:16,720
what i call single hop threads that's

96
00:03:16,720 --> 00:03:19,760
something that's related to a single

97
00:03:19,760 --> 00:03:23,360
to a single element that and that

98
00:03:23,360 --> 00:03:25,200
and the more complex threats cannot

99
00:03:25,200 --> 00:03:26,799
currently be found because you would

100
00:03:26,799 --> 00:03:28,799
need some kind of a

101
00:03:28,799 --> 00:03:31,040
draft search or artificial intelligence

102
00:03:31,040 --> 00:03:35,360
system they go through a complex setup

103
00:03:35,360 --> 00:03:37,680
all right let's talk about complexity of

104
00:03:37,680 --> 00:03:41,599
security controls not all controls are

105
00:03:41,599 --> 00:03:43,760
create equal security controls are used

106
00:03:43,760 --> 00:03:46,080
to to represent a function in the

107
00:03:46,080 --> 00:03:48,080
program either as code or as an

108
00:03:48,080 --> 00:03:50,319
implementation that that provides a

109
00:03:50,319 --> 00:03:52,959
guarantee so in the simplest form they

110
00:03:52,959 --> 00:03:54,799
check something like a logical security

111
00:03:54,799 --> 00:03:57,200
feature runs an authentication then

112
00:03:57,200 --> 00:03:59,360
there's some they are more complex that

113
00:03:59,360 --> 00:04:01,120
implement something more behavioral like

114
00:04:01,120 --> 00:04:02,879
behavioral security feature for instance

115
00:04:02,879 --> 00:04:05,280
encryption or decryptions so there's a

116
00:04:05,280 --> 00:04:07,360
scale to this

117
00:04:07,360 --> 00:04:09,680
however overall when you go and have to

118
00:04:09,680 --> 00:04:11,840
retrofit that later on and in the life

119
00:04:11,840 --> 00:04:14,400
cycle when you don't have them in place

120
00:04:14,400 --> 00:04:16,720
there's there's also um the different

121
00:04:16,720 --> 00:04:18,798
their differences when um what what that

122
00:04:18,798 --> 00:04:20,079
means if you can

123
00:04:20,079 --> 00:04:21,040
easy

124
00:04:21,040 --> 00:04:23,360
if you can retrofit them easily or not

125
00:04:23,360 --> 00:04:25,759
easily for instance turning off a public

126
00:04:25,759 --> 00:04:27,280
facing cloud storage that's an easy

127
00:04:27,280 --> 00:04:29,600
switch that's easy to do using a library

128
00:04:29,600 --> 00:04:31,360
feature like volume encryption that's

129
00:04:31,360 --> 00:04:33,360
relatively easy to just use a key and

130
00:04:33,360 --> 00:04:35,360
then encrypt the whole thing

131
00:04:35,360 --> 00:04:37,360
configuration change and like data and

132
00:04:37,360 --> 00:04:40,000
transit from http to https that's also

133
00:04:40,000 --> 00:04:42,400
relatively easy to do now more difficult

134
00:04:42,400 --> 00:04:44,560
things to to implement

135
00:04:44,560 --> 00:04:47,040
is adding security to already deployed

136
00:04:47,040 --> 00:04:49,840
code so we always run the risk of

137
00:04:49,840 --> 00:04:51,919
breaking the code when you do certain

138
00:04:51,919 --> 00:04:53,759
things like this then of course if that

139
00:04:53,759 --> 00:04:55,120
you get more and more of this you

140
00:04:55,120 --> 00:04:57,280
implement logical security at scale even

141
00:04:57,280 --> 00:04:59,520
though the little

142
00:04:59,520 --> 00:05:01,199
components are all distributed all over

143
00:05:01,199 --> 00:05:03,039
the place that's also how to do and then

144
00:05:03,039 --> 00:05:04,240
of course adding cryptographic

145
00:05:04,240 --> 00:05:06,080
protection to certain things is harder

146
00:05:06,080 --> 00:05:07,600
to do because you're usually touching

147
00:05:07,600 --> 00:05:09,680
more than one system at time

148
00:05:09,680 --> 00:05:10,800
overall there's a there's another

149
00:05:10,800 --> 00:05:12,960
dimension of this so that the controls

150
00:05:12,960 --> 00:05:15,680
complexity that starts going up the more

151
00:05:15,680 --> 00:05:18,160
distributed distributed deployed code

152
00:05:18,160 --> 00:05:20,160
you have already in place

153
00:05:20,160 --> 00:05:22,880
so keep that in mind even easy

154
00:05:22,880 --> 00:05:24,639
security controls will create a major

155
00:05:24,639 --> 00:05:26,880
headache if you have a lot of uh of

156
00:05:26,880 --> 00:05:28,800
those um

157
00:05:28,800 --> 00:05:30,479
if you if you need to do this across a

158
00:05:30,479 --> 00:05:31,440
lot of

159
00:05:31,440 --> 00:05:34,320
across a big code base

160
00:05:34,320 --> 00:05:35,759
all right let's talk about how an

161
00:05:35,759 --> 00:05:38,160
application grows into security debt so

162
00:05:38,160 --> 00:05:40,080
what is actually growing over time on an

163
00:05:40,080 --> 00:05:42,479
application

164
00:05:42,479 --> 00:05:44,160
when an application grows usually adding

165
00:05:44,160 --> 00:05:46,479
business use cases and functionality

166
00:05:46,479 --> 00:05:48,080
then of course code is added and the

167
00:05:48,080 --> 00:05:49,600
data is added to it

168
00:05:49,600 --> 00:05:51,520
and with that be adding infrastructure

169
00:05:51,520 --> 00:05:53,759
instances

170
00:05:53,759 --> 00:05:55,360
that all this comes from business

171
00:05:55,360 --> 00:05:58,400
requirements that run businesses um as

172
00:05:58,400 --> 00:06:01,280
part of a role um and that all systems

173
00:06:01,280 --> 00:06:03,199
run then

174
00:06:03,199 --> 00:06:05,680
with that we we have users that we

175
00:06:05,680 --> 00:06:06,960
adding users to the system we have

176
00:06:06,960 --> 00:06:08,880
business application users and then we

177
00:06:08,880 --> 00:06:11,440
have a some different set of admin users

178
00:06:11,440 --> 00:06:15,039
that we're also adding to the mix

179
00:06:15,039 --> 00:06:17,360
when we talk about security debt so if

180
00:06:17,360 --> 00:06:18,800
you compare this to the financial world

181
00:06:18,800 --> 00:06:20,080
what is actually that that means we

182
00:06:20,080 --> 00:06:22,560
owing somebody money in our sense though

183
00:06:22,560 --> 00:06:24,400
we're adding we're owing

184
00:06:24,400 --> 00:06:26,720
the the application a security feature

185
00:06:26,720 --> 00:06:28,720
we're owing a workload item that we

186
00:06:28,720 --> 00:06:30,720
would need to implement for order in

187
00:06:30,720 --> 00:06:32,960
order to make the application secure if

188
00:06:32,960 --> 00:06:34,479
you don't have that it will show up in

189
00:06:34,479 --> 00:06:36,560
certain areas for instance we're missing

190
00:06:36,560 --> 00:06:38,080
security features would show up in

191
00:06:38,080 --> 00:06:39,039
audits

192
00:06:39,039 --> 00:06:41,680
or we have postponed security upgrades

193
00:06:41,680 --> 00:06:43,600
workload item that cannot be resolved in

194
00:06:43,600 --> 00:06:45,440
time anymore because it just breaks too

195
00:06:45,440 --> 00:06:47,840
many things at once now of course this

196
00:06:47,840 --> 00:06:49,360
leads to the bigger question what

197
00:06:49,360 --> 00:06:52,720
actually is the equivalent of um of the

198
00:06:52,720 --> 00:06:54,560
bankruptcy case here for

199
00:06:54,560 --> 00:06:56,400
for our security debt

200
00:06:56,400 --> 00:06:57,520
in

201
00:06:57,520 --> 00:06:59,919
the bankruptcy case in our case would be

202
00:06:59,919 --> 00:07:02,639
the management notices that

203
00:07:02,639 --> 00:07:04,240
um the application cannot be fixed in

204
00:07:04,240 --> 00:07:06,000
time anymore and then they will go and

205
00:07:06,000 --> 00:07:08,000
make the decision at some point to

206
00:07:08,000 --> 00:07:09,759
to create that

207
00:07:09,759 --> 00:07:12,240
shadow stack tech stack for instance

208
00:07:12,240 --> 00:07:14,080
with the promise of a news tech doing

209
00:07:14,080 --> 00:07:16,319
everything much better and for the

210
00:07:16,319 --> 00:07:18,240
developer unfortunately it's they might

211
00:07:18,240 --> 00:07:20,080
or might not be part of the new solution

212
00:07:20,080 --> 00:07:22,479
that's the on the sad truth here that

213
00:07:22,479 --> 00:07:25,039
most of the time um the people are

214
00:07:25,039 --> 00:07:28,719
changed out with with the project too

215
00:07:29,599 --> 00:07:34,319
all right let's jump into anti-patterns

216
00:07:34,560 --> 00:07:36,000
first one we're going to talk about is a

217
00:07:36,000 --> 00:07:38,400
conceptual entire pattern

218
00:07:38,400 --> 00:07:41,680
in order to capture this

219
00:07:41,680 --> 00:07:42,479
um

220
00:07:42,479 --> 00:07:44,080
let's start with a question here from an

221
00:07:44,080 --> 00:07:45,840
attacker point of view

222
00:07:45,840 --> 00:07:47,680
which role is the most valuable from an

223
00:07:47,680 --> 00:07:48,830
attacker point of view

224
00:07:48,830 --> 00:07:50,160
[Music]

225
00:07:50,160 --> 00:07:52,160
if you ask this question to a developer

226
00:07:52,160 --> 00:07:54,080
they say well that's easy

227
00:07:54,080 --> 00:07:56,160
become root is the name of the game

228
00:07:56,160 --> 00:07:58,960
the regular user becomes this admin

229
00:07:58,960 --> 00:08:01,280
that's the name of the game now in our

230
00:08:01,280 --> 00:08:03,280
case though from the secure perspective

231
00:08:03,280 --> 00:08:04,720
that's not where the value for the

232
00:08:04,720 --> 00:08:07,039
attacker necessarily is

233
00:08:07,039 --> 00:08:09,759
the sales admin though

234
00:08:09,759 --> 00:08:12,960
it has computing power in terms of like

235
00:08:12,960 --> 00:08:14,560
controls a lot of computing power so

236
00:08:14,560 --> 00:08:16,639
that's a good resource and it can also

237
00:08:16,639 --> 00:08:18,319
control a lot of data so if somebody

238
00:08:18,319 --> 00:08:20,879
captures that role that's pretty good um

239
00:08:20,879 --> 00:08:23,599
and that could also lead to money but if

240
00:08:23,599 --> 00:08:25,520
you think ask yourself who can make it

241
00:08:25,520 --> 00:08:27,919
actually rain at the company

242
00:08:27,919 --> 00:08:28,960
the

243
00:08:28,960 --> 00:08:30,879
system admin of course can use computing

244
00:08:30,879 --> 00:08:33,679
power maybe um if the attacker that gets

245
00:08:33,679 --> 00:08:36,479
into its role by um holding

246
00:08:36,479 --> 00:08:38,559
my bitcoin mining or data for instance

247
00:08:38,559 --> 00:08:41,279
for holding data hostage but if you

248
00:08:41,279 --> 00:08:42,719
think about what happens when you call

249
00:08:42,719 --> 00:08:44,159
into a company

250
00:08:44,159 --> 00:08:46,160
and want a refund there's usually a

251
00:08:46,160 --> 00:08:48,560
business role i call the business

252
00:08:48,560 --> 00:08:51,440
fairy here or power user that has higher

253
00:08:51,440 --> 00:08:52,560
level

254
00:08:52,560 --> 00:08:54,320
access to direct access to money and

255
00:08:54,320 --> 00:08:56,399
then also to broad data for instance if

256
00:08:56,399 --> 00:08:58,080
you call in and want a name change they

257
00:08:58,080 --> 00:09:00,800
could um reach the um they can do that

258
00:09:00,800 --> 00:09:03,440
across a lot of different records so the

259
00:09:03,440 --> 00:09:05,440
first and i pattern that i want to point

260
00:09:05,440 --> 00:09:07,360
out here is the failure to plan for a

261
00:09:07,360 --> 00:09:09,200
business role that's higher than says

262
00:09:09,200 --> 00:09:11,279
admin the sys admin should only be

263
00:09:11,279 --> 00:09:14,080
scoped and beer to a lower role like

264
00:09:14,080 --> 00:09:16,399
into your system and should be actually

265
00:09:16,399 --> 00:09:18,399
conceptually be a slightly lower role

266
00:09:18,399 --> 00:09:20,320
than the business role business user

267
00:09:20,320 --> 00:09:22,959
role

268
00:09:22,959 --> 00:09:24,959
this pattern will carry forward in a lot

269
00:09:24,959 --> 00:09:27,519
of other entire patterns that i'm i'm

270
00:09:27,519 --> 00:09:29,279
going to describe that in technical

271
00:09:29,279 --> 00:09:31,920
nature later on so we'll

272
00:09:31,920 --> 00:09:33,360
recognize that and come back later to

273
00:09:33,360 --> 00:09:36,360
this

274
00:09:36,399 --> 00:09:38,399
all right we'll talk in the first set

275
00:09:38,399 --> 00:09:40,080
here we'll talk about authorization and

276
00:09:40,080 --> 00:09:41,519
type patterns

277
00:09:41,519 --> 00:09:44,000
um in order to do this i'm going to walk

278
00:09:44,000 --> 00:09:45,760
you through a sample web application and

279
00:09:45,760 --> 00:09:47,760
let it grow over time and then show you

280
00:09:47,760 --> 00:09:49,519
how this potentially where their

281
00:09:49,519 --> 00:09:52,640
independence are and how that could

282
00:09:52,640 --> 00:09:54,880
create security debt

283
00:09:54,880 --> 00:09:56,880
so the first

284
00:09:56,880 --> 00:09:58,160
application we talked about is a

285
00:09:58,160 --> 00:10:00,160
stateful web application most developers

286
00:10:00,160 --> 00:10:02,079
here are probably familiar with this we

287
00:10:02,079 --> 00:10:04,160
have a human user here then we have our

288
00:10:04,160 --> 00:10:06,320
browser and we have a web application

289
00:10:06,320 --> 00:10:08,720
and then some kind of authentication

290
00:10:08,720 --> 00:10:11,920
authorization server that the

291
00:10:11,920 --> 00:10:15,440
human user would go and key in the url

292
00:10:15,440 --> 00:10:17,120
into the browser

293
00:10:17,120 --> 00:10:19,360
um and then bring up the login page then

294
00:10:19,360 --> 00:10:20,880
the data will be sent over from the

295
00:10:20,880 --> 00:10:23,200
login page to the web application

296
00:10:23,200 --> 00:10:24,079
there is

297
00:10:24,079 --> 00:10:26,079
some kind of ping point between the web

298
00:10:26,079 --> 00:10:26,880
application server and the

299
00:10:26,880 --> 00:10:28,800
authentication server that could also go

300
00:10:28,800 --> 00:10:30,640
from the browser directly but our case

301
00:10:30,640 --> 00:10:32,480
doesn't really matter because at the end

302
00:10:32,480 --> 00:10:34,240
of it we're gonna have a session in

303
00:10:34,240 --> 00:10:36,240
memory so that session is a piece of

304
00:10:36,240 --> 00:10:38,160
code that lives in memory that has an

305
00:10:38,160 --> 00:10:40,160
address and then there's a username and

306
00:10:40,160 --> 00:10:41,920
a role in there

307
00:10:41,920 --> 00:10:44,079
that session id the key to that memory

308
00:10:44,079 --> 00:10:46,640
space is sent back to the application in

309
00:10:46,640 --> 00:10:47,920
the form of a

310
00:10:47,920 --> 00:10:49,680
cookie and that's stored in the browser

311
00:10:49,680 --> 00:10:51,920
so that's the regular stateful setup

312
00:10:51,920 --> 00:10:53,279
that most people are here pretty

313
00:10:53,279 --> 00:10:55,519
familiar with

314
00:10:55,519 --> 00:10:57,360
on the operational side

315
00:10:57,360 --> 00:10:59,680
we'll take a look at this in which

316
00:10:59,680 --> 00:11:01,200
how this works and we'll

317
00:11:01,200 --> 00:11:03,839
switch to a stateless in a minute here

318
00:11:03,839 --> 00:11:05,360
but we have to first understand how this

319
00:11:05,360 --> 00:11:06,480
works

320
00:11:06,480 --> 00:11:07,920
the user starts for instance with a

321
00:11:07,920 --> 00:11:09,839
cookie in order to bring up the account

322
00:11:09,839 --> 00:11:12,079
page that's protected

323
00:11:12,079 --> 00:11:15,200
logs in well it doesn't look set the

324
00:11:15,200 --> 00:11:16,399
cookie is then sent over to the

325
00:11:16,399 --> 00:11:18,079
application

326
00:11:18,079 --> 00:11:20,320
and that application does something what

327
00:11:20,320 --> 00:11:22,480
i call the go noble check the basic

328
00:11:22,480 --> 00:11:24,480
checks in memory do we have that that

329
00:11:24,480 --> 00:11:26,959
session memory here under that address

330
00:11:26,959 --> 00:11:31,119
here if that session is in memory

331
00:11:31,200 --> 00:11:33,360
then the application goes and fetches

332
00:11:33,360 --> 00:11:34,800
data from the database and sends the

333
00:11:34,800 --> 00:11:36,959
data back and displays the data on the

334
00:11:36,959 --> 00:11:39,920
browser so this is the stateful setup

335
00:11:39,920 --> 00:11:41,360
now

336
00:11:41,360 --> 00:11:43,200
most applications don't work like this

337
00:11:43,200 --> 00:11:45,040
anymore they're more complex now

338
00:11:45,040 --> 00:11:47,200
they're using a

339
00:11:47,200 --> 00:11:49,279
stateless rest client i'm going to

340
00:11:49,279 --> 00:11:51,360
explain how this works

341
00:11:51,360 --> 00:11:53,200
on the next slide here so let's take a

342
00:11:53,200 --> 00:11:55,200
look at this

343
00:11:55,200 --> 00:11:56,560
on the left hand side we're replacing

344
00:11:56,560 --> 00:11:57,920
the browser now

345
00:11:57,920 --> 00:12:00,079
with the user interface

346
00:12:00,079 --> 00:12:02,639
um for static pages and then has a rest

347
00:12:02,639 --> 00:12:04,560
client in it that communicates with the

348
00:12:04,560 --> 00:12:07,760
back end on the backend we have our web

349
00:12:07,760 --> 00:12:09,519
here that's also divided we have a web

350
00:12:09,519 --> 00:12:11,839
application that serves the static pages

351
00:12:11,839 --> 00:12:14,160
and then there's a gateway in it that or

352
00:12:14,160 --> 00:12:16,800
proxy component that sends the data over

353
00:12:16,800 --> 00:12:19,360
to an api service when it's fetching the

354
00:12:19,360 --> 00:12:22,160
data then from the database

355
00:12:22,160 --> 00:12:23,760
now let's take a look what happens in

356
00:12:23,760 --> 00:12:26,160
this setup there's a lot of potential

357
00:12:26,160 --> 00:12:28,079
failure in this setup because

358
00:12:28,079 --> 00:12:29,839
um a lot of things can go wrong when you

359
00:12:29,839 --> 00:12:31,120
switch from the state full to the

360
00:12:31,120 --> 00:12:32,240
stateless

361
00:12:32,240 --> 00:12:34,240
and keep in mind our broken access

362
00:12:34,240 --> 00:12:35,839
control is number one always person

363
00:12:35,839 --> 00:12:37,920
that's there for a reason so let me just

364
00:12:37,920 --> 00:12:39,200
point out some inner parents here in

365
00:12:39,200 --> 00:12:41,120
this setup now

366
00:12:41,120 --> 00:12:42,560
we'll start with the cookie again the

367
00:12:42,560 --> 00:12:45,440
stateful setup here and this is get gets

368
00:12:45,440 --> 00:12:47,360
sent over to the server we have the

369
00:12:47,360 --> 00:12:48,959
session assuming we have a session on

370
00:12:48,959 --> 00:12:50,399
the server in memory

371
00:12:50,399 --> 00:12:53,200
at some point well the user goes and

372
00:12:53,200 --> 00:12:54,720
makes us request with a cookie there's

373
00:12:54,720 --> 00:12:57,279
this go no go check the classical sense

374
00:12:57,279 --> 00:12:59,920
on the web application

375
00:12:59,920 --> 00:13:01,200
then

376
00:13:01,200 --> 00:13:02,800
what next happens next is something that

377
00:13:02,800 --> 00:13:04,639
i call the switch so there's a piece of

378
00:13:04,639 --> 00:13:06,480
code running there that that transfers

379
00:13:06,480 --> 00:13:09,120
over the stateless api key

380
00:13:09,120 --> 00:13:11,279
to the rest line to use for subsequent

381
00:13:11,279 --> 00:13:12,639
calls

382
00:13:12,639 --> 00:13:15,040
in our example here we have an api key

383
00:13:15,040 --> 00:13:17,120
simple key that needs to be known both

384
00:13:17,120 --> 00:13:19,120
sides that is used on for the rest

385
00:13:19,120 --> 00:13:20,880
client

386
00:13:20,880 --> 00:13:22,480
the rest client then would go and send

387
00:13:22,480 --> 00:13:24,560
it back over to the gateway

388
00:13:24,560 --> 00:13:27,440
and the gateway says well does another

389
00:13:27,440 --> 00:13:29,600
go no go check do i know this key and

390
00:13:29,600 --> 00:13:31,040
since it's stateless

391
00:13:31,040 --> 00:13:32,079
um

392
00:13:32,079 --> 00:13:33,600
it could checks and storage and said yep

393
00:13:33,600 --> 00:13:36,240
i know this key now after this the

394
00:13:36,240 --> 00:13:38,079
gateway wants to go and

395
00:13:38,079 --> 00:13:40,800
um send the request over to the next

396
00:13:40,800 --> 00:13:42,560
service now at this point we're running

397
00:13:42,560 --> 00:13:45,199
into an issue what is missing here and

398
00:13:45,199 --> 00:13:47,519
what's missing here is the question to

399
00:13:47,519 --> 00:13:49,440
the answer to the questions should all

400
00:13:49,440 --> 00:13:54,320
users be able to access all api services

401
00:13:54,320 --> 00:13:55,680
the answer is

402
00:13:55,680 --> 00:13:57,040
certainly not

403
00:13:57,040 --> 00:13:59,760
because what's missing here is that

404
00:13:59,760 --> 00:14:02,079
information in that we had in before in

405
00:14:02,079 --> 00:14:03,839
the memory space they use the

406
00:14:03,839 --> 00:14:06,160
authorization information

407
00:14:06,160 --> 00:14:07,760
so our entire pattern the first one i

408
00:14:07,760 --> 00:14:09,760
will point out the technical one is

409
00:14:09,760 --> 00:14:12,880
using a all or none api token and by

410
00:14:12,880 --> 00:14:14,399
doing this we would strip out the user

411
00:14:14,399 --> 00:14:16,800
authorization information we should not

412
00:14:16,800 --> 00:14:18,880
just give them an all or one non-token

413
00:14:18,880 --> 00:14:20,320
and then assume all the services are

414
00:14:20,320 --> 00:14:22,320
created equal later on even though it

415
00:14:22,320 --> 00:14:23,600
might work in the initial phase of the

416
00:14:23,600 --> 00:14:26,240
application when the application is

417
00:14:26,240 --> 00:14:28,160
young

418
00:14:28,160 --> 00:14:30,079
so we should plan for that and do it

419
00:14:30,079 --> 00:14:32,160
slightly better for instance like using

420
00:14:32,160 --> 00:14:34,480
a json web token or something that has

421
00:14:34,480 --> 00:14:36,160
more information in it in terms of

422
00:14:36,160 --> 00:14:39,519
authentication authorization

423
00:14:40,000 --> 00:14:41,680
all right we're growing we're growing

424
00:14:41,680 --> 00:14:43,839
big times and i promise you this is

425
00:14:43,839 --> 00:14:45,760
going to be the the biggest example here

426
00:14:45,760 --> 00:14:47,600
in my slide today

427
00:14:47,600 --> 00:14:50,240
so we're adding a power user to the mix

428
00:14:50,240 --> 00:14:52,000
that can do refunds

429
00:14:52,000 --> 00:14:54,720
then instead of the service we're adding

430
00:14:54,720 --> 00:14:57,040
a service mesh in the middle here

431
00:14:57,040 --> 00:14:59,680
and then instead of the simple database

432
00:14:59,680 --> 00:15:02,079
we're having this data

433
00:15:02,079 --> 00:15:03,279
we're having the data lake on the right

434
00:15:03,279 --> 00:15:04,880
hand side

435
00:15:04,880 --> 00:15:07,040
now

436
00:15:07,040 --> 00:15:08,959
the human user

437
00:15:08,959 --> 00:15:11,839
um uses services on the top here that

438
00:15:11,839 --> 00:15:14,000
are aimed at the interactions from the

439
00:15:14,000 --> 00:15:16,800
use human user like account

440
00:15:16,800 --> 00:15:18,639
certain things with accounts or

441
00:15:18,639 --> 00:15:20,560
the personal data of the user and it

442
00:15:20,560 --> 00:15:22,880
deals with tables that have personal

443
00:15:22,880 --> 00:15:25,279
personable identifiable information pi

444
00:15:25,279 --> 00:15:28,240
in it and the power usan would use the

445
00:15:28,240 --> 00:15:31,279
second set of tables as services and

446
00:15:31,279 --> 00:15:33,759
also the corresponding tables with it

447
00:15:33,759 --> 00:15:35,519
now let's see how this works in our

448
00:15:35,519 --> 00:15:37,120
setup here

449
00:15:37,120 --> 00:15:38,839
we upgraded the

450
00:15:38,839 --> 00:15:40,720
the um

451
00:15:40,720 --> 00:15:43,120
token so we're using a json web token

452
00:15:43,120 --> 00:15:45,040
now that has an id in it a name and that

453
00:15:45,040 --> 00:15:46,639
works with a signature

454
00:15:46,639 --> 00:15:49,040
and that can be verified in a stateless

455
00:15:49,040 --> 00:15:51,360
fashion too by verifying the signature

456
00:15:51,360 --> 00:15:53,600
of the token

457
00:15:53,600 --> 00:15:56,000
i left out the the upper part but we'll

458
00:15:56,000 --> 00:15:57,920
um we'll focus on the bottom part now

459
00:15:57,920 --> 00:16:00,240
the rest api so that token gets sent

460
00:16:00,240 --> 00:16:01,360
over

461
00:16:01,360 --> 00:16:02,720
to the gateway

462
00:16:02,720 --> 00:16:04,800
and the gateway does the signature

463
00:16:04,800 --> 00:16:06,839
validation

464
00:16:06,839 --> 00:16:09,040
now it does

465
00:16:09,040 --> 00:16:10,800
when it finds the signature is valid it

466
00:16:10,800 --> 00:16:14,000
wants to send out that token over to the

467
00:16:14,000 --> 00:16:16,079
request over to the next service

468
00:16:16,079 --> 00:16:17,839
services the service mesh

469
00:16:17,839 --> 00:16:19,759
and we are running to an issue here how

470
00:16:19,759 --> 00:16:21,199
do we actually separate in between the

471
00:16:21,199 --> 00:16:22,560
services and the table sets the

472
00:16:22,560 --> 00:16:24,880
difference one between the roles we are

473
00:16:24,880 --> 00:16:26,800
missing something here

474
00:16:26,800 --> 00:16:28,320
what we're missing is a typical enter

475
00:16:28,320 --> 00:16:30,320
pattern that is the failure to include

476
00:16:30,320 --> 00:16:33,680
the role value in the token because

477
00:16:33,680 --> 00:16:35,600
the gateway does not know what role that

478
00:16:35,600 --> 00:16:38,079
user is in what we need to do is we need

479
00:16:38,079 --> 00:16:39,839
to encode and roll value here in our

480
00:16:39,839 --> 00:16:42,480
case the power user into that token in

481
00:16:42,480 --> 00:16:44,560
order for in order to make that switch

482
00:16:44,560 --> 00:16:46,399
we can if we can dispatch between the

483
00:16:46,399 --> 00:16:47,839
services here

484
00:16:47,839 --> 00:16:50,160
that's a typical inner pattern um that

485
00:16:50,160 --> 00:16:52,000
is often overlooked because only the

486
00:16:52,000 --> 00:16:54,079
authentication is put in that token and

487
00:16:54,079 --> 00:16:56,399
then um it's not

488
00:16:56,399 --> 00:16:57,920
it's not um

489
00:16:57,920 --> 00:17:00,000
it's not implemented from the get-go

490
00:17:00,000 --> 00:17:01,680
um some workarounds would be you have to

491
00:17:01,680 --> 00:17:03,120
go there and based on the idea of the

492
00:17:03,120 --> 00:17:05,439
user fetch the authorization information

493
00:17:05,439 --> 00:17:07,439
from the backend and reload it that

494
00:17:07,439 --> 00:17:10,240
would be the um the painful security

495
00:17:10,240 --> 00:17:11,890
that you have to do

496
00:17:11,890 --> 00:17:13,760
[Music]

497
00:17:13,760 --> 00:17:16,160
there's another enter pattern related to

498
00:17:16,160 --> 00:17:16,880
this

499
00:17:16,880 --> 00:17:19,520
and that's something that has to do with

500
00:17:19,520 --> 00:17:22,240
our latest paradigm here we have a new

501
00:17:22,240 --> 00:17:24,160
paradigm in town it's called zero trust

502
00:17:24,160 --> 00:17:26,000
architecture now

503
00:17:26,000 --> 00:17:27,760
on the security that means the pattern

504
00:17:27,760 --> 00:17:30,960
means don't trust anybody and always

505
00:17:30,960 --> 00:17:32,559
validate

506
00:17:32,559 --> 00:17:34,480
the on the security side

507
00:17:34,480 --> 00:17:36,640
of course we don't trust anybody anyway

508
00:17:36,640 --> 00:17:38,160
but the always validate part is

509
00:17:38,160 --> 00:17:39,840
something that creates issues here

510
00:17:39,840 --> 00:17:41,520
currently in our setup

511
00:17:41,520 --> 00:17:42,480
the

512
00:17:42,480 --> 00:17:44,640
the gateway here does our check the go

513
00:17:44,640 --> 00:17:46,960
no-go check now

514
00:17:46,960 --> 00:17:48,320
what happens if we actually need to make

515
00:17:48,320 --> 00:17:50,240
the check in the future later on the

516
00:17:50,240 --> 00:17:53,120
service lane or to dispatch it or in or

517
00:17:53,120 --> 00:17:55,520
later on even in on their lake in the

518
00:17:55,520 --> 00:17:57,200
gateway in front of the

519
00:17:57,200 --> 00:17:58,480
data lake

520
00:17:58,480 --> 00:18:01,200
um you won't be able to um to check that

521
00:18:01,200 --> 00:18:03,200
because most often times there's a

522
00:18:03,200 --> 00:18:04,960
failure to forward or the authorization

523
00:18:04,960 --> 00:18:06,720
token into the back end

524
00:18:06,720 --> 00:18:08,720
that's something that

525
00:18:08,720 --> 00:18:11,360
needs to be considered because if you

526
00:18:11,360 --> 00:18:12,960
don't do this even though you check up

527
00:18:12,960 --> 00:18:14,640
front it's not just checking and then

528
00:18:14,640 --> 00:18:16,000
forgetting about it

529
00:18:16,000 --> 00:18:17,840
if you don't do this you're going to

530
00:18:17,840 --> 00:18:19,600
incur a lot of security

531
00:18:19,600 --> 00:18:20,960
to think about it what what do you have

532
00:18:20,960 --> 00:18:22,559
to do in order to fix this you would

533
00:18:22,559 --> 00:18:24,240
have to go and touch every little

534
00:18:24,240 --> 00:18:26,400
service here and say and every service

535
00:18:26,400 --> 00:18:28,080
then needs to go

536
00:18:28,080 --> 00:18:29,679
and and send the appropriate header to

537
00:18:29,679 --> 00:18:31,520
the back end of course you can't just do

538
00:18:31,520 --> 00:18:33,280
it um brute force where you have to do

539
00:18:33,280 --> 00:18:35,440
it the always conform way not just dump

540
00:18:35,440 --> 00:18:36,720
all the headers in there what you want

541
00:18:36,720 --> 00:18:38,720
to do is snip the appropriate header out

542
00:18:38,720 --> 00:18:40,880
sanitize it and then send it over to the

543
00:18:40,880 --> 00:18:43,760
next layer so don't forget to include

544
00:18:43,760 --> 00:18:45,039
the authorization information even

545
00:18:45,039 --> 00:18:46,640
though you checked it already

546
00:18:46,640 --> 00:18:50,160
just to make it future proof

547
00:18:51,679 --> 00:18:52,799
all right

548
00:18:52,799 --> 00:18:54,240
switching gears here slightly still

549
00:18:54,240 --> 00:18:57,039
authorization and we'll talk about a

550
00:18:57,039 --> 00:18:58,240
different

551
00:18:58,240 --> 00:19:00,080
requirement that came in from when we

552
00:19:00,080 --> 00:19:02,000
application goes i'm skipping the right

553
00:19:02,000 --> 00:19:03,760
inside now and we're just focusing on

554
00:19:03,760 --> 00:19:05,440
the on the left hand side starting from

555
00:19:05,440 --> 00:19:07,679
the api gateway i'm also introducing

556
00:19:07,679 --> 00:19:09,679
here a new user or system admin on the

557
00:19:09,679 --> 00:19:11,039
left hand side

558
00:19:11,039 --> 00:19:13,039
we have a new process here the chrome

559
00:19:13,039 --> 00:19:14,080
batch

560
00:19:14,080 --> 00:19:17,280
that developer came up with a solution

561
00:19:17,280 --> 00:19:19,679
our requirement was marketing came and

562
00:19:19,679 --> 00:19:20,480
said

563
00:19:20,480 --> 00:19:23,520
we need to go and send gift cards to our

564
00:19:23,520 --> 00:19:25,760
most favorable clients

565
00:19:25,760 --> 00:19:27,360
because we want to encourage them with

566
00:19:27,360 --> 00:19:28,799
gift cards to

567
00:19:28,799 --> 00:19:30,640
um to purchase more

568
00:19:30,640 --> 00:19:32,000
now the developer said we have we can do

569
00:19:32,000 --> 00:19:33,840
that in form of a chron batch job that

570
00:19:33,840 --> 00:19:35,760
then fires off a request to the api

571
00:19:35,760 --> 00:19:36,720
gateway

572
00:19:36,720 --> 00:19:38,720
and users reuse the services that would

573
00:19:38,720 --> 00:19:40,320
do a refund

574
00:19:40,320 --> 00:19:42,160
um the

575
00:19:42,160 --> 00:19:44,320
gift cards are highly valuable item on

576
00:19:44,320 --> 00:19:45,679
the black market so we need to protect

577
00:19:45,679 --> 00:19:46,410
them

578
00:19:46,410 --> 00:19:49,120
[Music]

579
00:19:49,120 --> 00:19:51,520
now the question is so which role do we

580
00:19:51,520 --> 00:19:54,559
actually want to use for this batch job

581
00:19:54,559 --> 00:19:56,080
do you want to use a system admin rule

582
00:19:56,080 --> 00:19:58,160
that's too high that's just we don't

583
00:19:58,160 --> 00:20:00,240
want to use the system admin raw that

584
00:20:00,240 --> 00:20:02,000
would be too much privilege at this

585
00:20:02,000 --> 00:20:03,120
point

586
00:20:03,120 --> 00:20:05,200
now you want to use a power user role

587
00:20:05,200 --> 00:20:07,919
for this potentially that that's a valid

588
00:20:07,919 --> 00:20:09,440
option if you don't have hundreds of

589
00:20:09,440 --> 00:20:12,720
power users and if you don't have

590
00:20:12,720 --> 00:20:14,240
potentially hundreds of system admins

591
00:20:14,240 --> 00:20:17,200
that you don't cannot vet anymore

592
00:20:17,200 --> 00:20:19,520
what we really want to do though is in

593
00:20:19,520 --> 00:20:22,240
the ideal setup we would want to pretend

594
00:20:22,240 --> 00:20:24,000
it was a human user that requested a

595
00:20:24,000 --> 00:20:26,799
refund and then use that somehow to do

596
00:20:26,799 --> 00:20:28,480
this batch transaction and fire that off

597
00:20:28,480 --> 00:20:30,159
against the gateway

598
00:20:30,159 --> 00:20:31,520
um

599
00:20:31,520 --> 00:20:33,360
oftentimes though we don't do that

600
00:20:33,360 --> 00:20:35,520
because it's forgotten we just use a

601
00:20:35,520 --> 00:20:36,960
payload in the batch process so our

602
00:20:36,960 --> 00:20:38,960
pattern here is the batch processing

603
00:20:38,960 --> 00:20:40,960
without user authorization so we

604
00:20:40,960 --> 00:20:42,159
stripped we don't have any user

605
00:20:42,159 --> 00:20:43,600
authorization in the patch we just

606
00:20:43,600 --> 00:20:45,120
dropped the data in there that's an

607
00:20:45,120 --> 00:20:46,880
inner pattern we can see quite

608
00:20:46,880 --> 00:20:49,120
frequently there's something else we can

609
00:20:49,120 --> 00:20:51,120
do about it and that is

610
00:20:51,120 --> 00:20:52,960
we can fix that we can actually put the

611
00:20:52,960 --> 00:20:55,840
token create a token per user and put

612
00:20:55,840 --> 00:20:56,799
that in

613
00:20:56,799 --> 00:20:57,600
the

614
00:20:57,600 --> 00:21:00,000
batch job this will also

615
00:21:00,000 --> 00:21:02,159
solve all some repudiation issue that

616
00:21:02,159 --> 00:21:03,919
means if the user would have to do

617
00:21:03,919 --> 00:21:05,360
something before and like filling out a

618
00:21:05,360 --> 00:21:07,280
story or something then

619
00:21:07,280 --> 00:21:08,400
with that

620
00:21:08,400 --> 00:21:10,720
token in there we can go and and pretend

621
00:21:10,720 --> 00:21:12,960
the user actually ran that or another

622
00:21:12,960 --> 00:21:14,559
like the sales role run it on behalf of

623
00:21:14,559 --> 00:21:17,280
the user for instance and fire those

624
00:21:17,280 --> 00:21:18,960
bad jobs off against the gateway that

625
00:21:18,960 --> 00:21:20,480
then does than them the refund at the

626
00:21:20,480 --> 00:21:22,960
back end

627
00:21:24,400 --> 00:21:26,240
right our last authorization pattern for

628
00:21:26,240 --> 00:21:27,360
today

629
00:21:27,360 --> 00:21:29,520
is performance integration testing

630
00:21:29,520 --> 00:21:31,200
related now

631
00:21:31,200 --> 00:21:32,960
we have a performance tester role and

632
00:21:32,960 --> 00:21:36,400
and a client in ssh client that tests

633
00:21:36,400 --> 00:21:38,559
our system the performance tester is

634
00:21:38,559 --> 00:21:41,360
usually used um even in production not

635
00:21:41,360 --> 00:21:43,679
only in low environments to see if some

636
00:21:43,679 --> 00:21:45,360
critical systems are still up and

637
00:21:45,360 --> 00:21:48,799
running and most likely they have also x

638
00:21:48,799 --> 00:21:52,159
that role has access to production data

639
00:21:52,159 --> 00:21:53,840
this leads to the question which role

640
00:21:53,840 --> 00:21:55,280
would be appropriate for performance

641
00:21:55,280 --> 00:21:57,760
integration testing

642
00:21:57,760 --> 00:21:59,600
the power user role in this case is

643
00:21:59,600 --> 00:22:01,039
slightly too high let's think about

644
00:22:01,039 --> 00:22:03,360
refunds or emailing campaigns maybe

645
00:22:03,360 --> 00:22:04,720
don't want to touch

646
00:22:04,720 --> 00:22:06,159
all parts of the system you want to

647
00:22:06,159 --> 00:22:08,320
touch some elevated parts and find out

648
00:22:08,320 --> 00:22:10,320
if they're live but not maybe do certain

649
00:22:10,320 --> 00:22:12,880
transactions so it's slightly too high

650
00:22:12,880 --> 00:22:15,360
and that human user is slightly too low

651
00:22:15,360 --> 00:22:17,919
because you want to touch those elevated

652
00:22:17,919 --> 00:22:20,559
roles like hr systems

653
00:22:20,559 --> 00:22:22,720
so in order to fix this you actually

654
00:22:22,720 --> 00:22:24,159
have to plan ahead and create a

655
00:22:24,159 --> 00:22:26,000
performance tester role with a dedicated

656
00:22:26,000 --> 00:22:28,000
role so performance testing without

657
00:22:28,000 --> 00:22:29,840
dedicated user role that's an intel

658
00:22:29,840 --> 00:22:30,960
pattern

659
00:22:30,960 --> 00:22:32,159
that's something you need to put in and

660
00:22:32,159 --> 00:22:34,400
plan ahead so you can do those tests and

661
00:22:34,400 --> 00:22:36,559
then scope it accordingly to the

662
00:22:36,559 --> 00:22:38,480
performance tester

663
00:22:38,480 --> 00:22:40,240
as a bonus tip when you do this make

664
00:22:40,240 --> 00:22:42,000
sure you don't store your credentials in

665
00:22:42,000 --> 00:22:43,360
the code we put together with a script

666
00:22:43,360 --> 00:22:45,200
of course you have to be properly

667
00:22:45,200 --> 00:22:48,240
mounted and properly um

668
00:22:48,240 --> 00:22:50,159
assembled there and not just checked

669
00:22:50,159 --> 00:22:53,200
into the code repo

670
00:22:53,679 --> 00:22:55,360
all right shifting gears here a little

671
00:22:55,360 --> 00:22:56,480
bit

672
00:22:56,480 --> 00:22:58,799
the next set we'll talk about timing

673
00:22:58,799 --> 00:23:00,400
enter patterns and time related entire

674
00:23:00,400 --> 00:23:03,400
patterns

675
00:23:08,240 --> 00:23:10,960
okay so a couple slides ago i talked

676
00:23:10,960 --> 00:23:13,440
about the batch job so the bad job is a

677
00:23:13,440 --> 00:23:16,960
typical example let's say we can do this

678
00:23:16,960 --> 00:23:19,200
um in a fashion where we only have a few

679
00:23:19,200 --> 00:23:21,120
system admins and only a few power users

680
00:23:21,120 --> 00:23:22,559
so we can do that actually in that maybe

681
00:23:22,559 --> 00:23:23,520
case

682
00:23:23,520 --> 00:23:26,000
now this setup is something what i call

683
00:23:26,000 --> 00:23:28,240
a behavioral pivot from one element to

684
00:23:28,240 --> 00:23:29,760
the next

685
00:23:29,760 --> 00:23:31,919
the power user would go and delegate

686
00:23:31,919 --> 00:23:33,679
certain things out of the system admin

687
00:23:33,679 --> 00:23:35,520
and and tell the system and here's my

688
00:23:35,520 --> 00:23:38,799
batch file and and go run this for me on

689
00:23:38,799 --> 00:23:40,640
it on an abstract sense here what we're

690
00:23:40,640 --> 00:23:42,080
dealing with is we have an instruction

691
00:23:42,080 --> 00:23:44,400
set in terms of a batch file then we

692
00:23:44,400 --> 00:23:46,400
have a time process that's the cron job

693
00:23:46,400 --> 00:23:48,880
that executes something

694
00:23:48,880 --> 00:23:51,919
the file right is is one

695
00:23:51,919 --> 00:23:53,520
um one behavior

696
00:23:53,520 --> 00:23:55,039
and then the execution is the second

697
00:23:55,039 --> 00:23:57,120
behavior that runs in the second row

698
00:23:57,120 --> 00:23:59,120
the the refund is a higher role than the

699
00:23:59,120 --> 00:24:01,679
system admin rule keep that in mind

700
00:24:01,679 --> 00:24:05,440
now this is a legit example and

701
00:24:05,440 --> 00:24:08,159
it can run like this but

702
00:24:08,159 --> 00:24:10,240
when we look at those behavioral pivots

703
00:24:10,240 --> 00:24:12,159
that's very interesting to see when we

704
00:24:12,159 --> 00:24:13,919
don't have a legit example that would be

705
00:24:13,919 --> 00:24:16,080
something that we need to look out for

706
00:24:16,080 --> 00:24:17,600
in a malicious case and i'm going to

707
00:24:17,600 --> 00:24:19,200
show you some examples of that how this

708
00:24:19,200 --> 00:24:21,600
works out

709
00:24:21,679 --> 00:24:22,880
all right

710
00:24:22,880 --> 00:24:25,679
very similar setup same idea we have a

711
00:24:25,679 --> 00:24:27,840
power user that refunds money and using

712
00:24:27,840 --> 00:24:29,840
queue at this point and that queue has a

713
00:24:29,840 --> 00:24:32,400
queue file associated with it

714
00:24:32,400 --> 00:24:34,799
for storing the the instructions

715
00:24:34,799 --> 00:24:36,720
overnight because the payment refund

716
00:24:36,720 --> 00:24:39,840
process runs overnight

717
00:24:39,840 --> 00:24:40,960
then

718
00:24:40,960 --> 00:24:42,799
again your instruction set is in the

719
00:24:42,799 --> 00:24:44,720
queue file and the time process is the

720
00:24:44,720 --> 00:24:46,559
process here in the queue so that's

721
00:24:46,559 --> 00:24:48,480
worthwhile noting

722
00:24:48,480 --> 00:24:51,039
the system admin could do a file drop in

723
00:24:51,039 --> 00:24:53,279
the queue file now at this point we have

724
00:24:53,279 --> 00:24:55,520
to ask ourselves

725
00:24:55,520 --> 00:24:58,960
what happens if that role flips over to

726
00:24:58,960 --> 00:25:01,039
militias

727
00:25:01,039 --> 00:25:03,919
this is a touchy feely question because

728
00:25:03,919 --> 00:25:05,679
um we don't want to assume we have bad

729
00:25:05,679 --> 00:25:08,559
employees here if we ask hr they say we

730
00:25:08,559 --> 00:25:10,799
love our employment employees we trust

731
00:25:10,799 --> 00:25:12,799
them with everything minus the salary

732
00:25:12,799 --> 00:25:14,640
information of course and if you ask the

733
00:25:14,640 --> 00:25:16,640
security people like me

734
00:25:16,640 --> 00:25:17,679
they would say well i don't trust

735
00:25:17,679 --> 00:25:19,679
anybody anyway so don't worry about that

736
00:25:19,679 --> 00:25:21,279
now the reality is

737
00:25:21,279 --> 00:25:22,640
there's a middle ground there right if

738
00:25:22,640 --> 00:25:24,880
the system grows you're running there's

739
00:25:24,880 --> 00:25:27,039
a threshold where you have a lot of

740
00:25:27,039 --> 00:25:28,880
um you have to assume

741
00:25:28,880 --> 00:25:31,520
when you get more internal admins that

742
00:25:31,520 --> 00:25:33,120
the probability of one of those roles

743
00:25:33,120 --> 00:25:35,120
flipping is getting higher and higher or

744
00:25:35,120 --> 00:25:37,120
somebody uses social engineering to flip

745
00:25:37,120 --> 00:25:39,520
one of those rules or a system gets into

746
00:25:39,520 --> 00:25:43,360
that role that runs on that as that so

747
00:25:43,360 --> 00:25:45,600
the new this entire pattern here that

748
00:25:45,600 --> 00:25:47,440
you see quite often is the fail to

749
00:25:47,440 --> 00:25:49,039
protect instructions out of a time

750
00:25:49,039 --> 00:25:51,279
process that's the pattern that's that's

751
00:25:51,279 --> 00:25:54,480
um relevant for internal in

752
00:25:54,480 --> 00:25:57,679
attack scenarios or internal malicious

753
00:25:57,679 --> 00:25:59,919
actors so keep that in mind and i'll

754
00:25:59,919 --> 00:26:01,360
show you some more examples of the

755
00:26:01,360 --> 00:26:03,520
flavor of the variation how this would

756
00:26:03,520 --> 00:26:05,919
pan out

757
00:26:05,919 --> 00:26:08,480
next one here very similar setup we have

758
00:26:08,480 --> 00:26:10,480
a script engine that the power would

759
00:26:10,480 --> 00:26:13,039
user would use to make some calculations

760
00:26:13,039 --> 00:26:15,360
and that's also tied to payment process

761
00:26:15,360 --> 00:26:17,840
now system admin

762
00:26:17,840 --> 00:26:19,520
could also have access to this code that

763
00:26:19,520 --> 00:26:20,880
this engine uses so again we have

764
00:26:20,880 --> 00:26:22,960
instruction set time process

765
00:26:22,960 --> 00:26:24,960
the system admin could go modify the

766
00:26:24,960 --> 00:26:27,679
code potentially unchecked and then go

767
00:26:27,679 --> 00:26:29,600
and pivot through and then use that

768
00:26:29,600 --> 00:26:32,159
script engine to call the critical

769
00:26:32,159 --> 00:26:34,960
payment process

770
00:26:37,360 --> 00:26:38,799
um another

771
00:26:38,799 --> 00:26:40,720
just internal admin not this time not a

772
00:26:40,720 --> 00:26:43,520
system admin it's a devops user so let's

773
00:26:43,520 --> 00:26:45,919
assume in our example here we have a ci

774
00:26:45,919 --> 00:26:47,760
cd runner that that creates something

775
00:26:47,760 --> 00:26:49,120
for us like this batch file for instance

776
00:26:49,120 --> 00:26:50,559
the payload would be something like this

777
00:26:50,559 --> 00:26:52,640
that would be run and created in that in

778
00:26:52,640 --> 00:26:54,720
that payload here

779
00:26:54,720 --> 00:26:57,200
um for that matter we checking code into

780
00:26:57,200 --> 00:27:00,000
our git repo and we have a devops user

781
00:27:00,000 --> 00:27:02,799
that they can touch that code people the

782
00:27:02,799 --> 00:27:04,480
debug if that devops user turns

783
00:27:04,480 --> 00:27:06,880
malicious or somebody gets in the role

784
00:27:06,880 --> 00:27:09,200
you would be able you would be able to

785
00:27:09,200 --> 00:27:10,320
and techa would be able to change the

786
00:27:10,320 --> 00:27:13,279
instruction set and then um

787
00:27:13,279 --> 00:27:15,760
kick off a time process or change a time

788
00:27:15,760 --> 00:27:18,159
process then that was hooked to a

789
00:27:18,159 --> 00:27:20,210
critical process same idea

790
00:27:20,210 --> 00:27:23,390
[Music]

791
00:27:24,080 --> 00:27:25,679
the last example in this series here is

792
00:27:25,679 --> 00:27:28,799
this the cloud event trigger so this is

793
00:27:28,799 --> 00:27:30,240
our cloud setup

794
00:27:30,240 --> 00:27:31,840
with a devops user it has some kind of

795
00:27:31,840 --> 00:27:33,679
cloud storage access where we have

796
00:27:33,679 --> 00:27:36,080
instruction set in the cloud storage

797
00:27:36,080 --> 00:27:39,840
and it uses an event trigger based on um

798
00:27:39,840 --> 00:27:41,840
changes to that storage for instance and

799
00:27:41,840 --> 00:27:43,919
that event trigger in regular case would

800
00:27:43,919 --> 00:27:45,760
call callback function like alumni

801
00:27:45,760 --> 00:27:47,039
functions or

802
00:27:47,039 --> 00:27:48,480
cloud function

803
00:27:48,480 --> 00:27:50,240
again instruction set time process

804
00:27:50,240 --> 00:27:52,559
somebody gets in the role they could

805
00:27:52,559 --> 00:27:54,240
fire this off and call this critical

806
00:27:54,240 --> 00:27:56,640
process

807
00:27:57,679 --> 00:27:59,039
right so what can we do about what are

808
00:27:59,039 --> 00:28:01,520
the medications for the seriously

809
00:28:01,520 --> 00:28:03,360
different variations of the whole thing

810
00:28:03,360 --> 00:28:05,440
same thing different

811
00:28:05,440 --> 00:28:07,760
systems and set up still

812
00:28:07,760 --> 00:28:09,039
of course we can write protect the

813
00:28:09,039 --> 00:28:10,480
instruction in the code file then we can

814
00:28:10,480 --> 00:28:12,559
do that now in some cases like the queue

815
00:28:12,559 --> 00:28:14,399
if it actually needs persistent file it

816
00:28:14,399 --> 00:28:17,200
would not be possible do that the next

817
00:28:17,200 --> 00:28:19,360
more expensive option would be to sign

818
00:28:19,360 --> 00:28:20,640
the payload or the content of the

819
00:28:20,640 --> 00:28:22,640
instruction file

820
00:28:22,640 --> 00:28:23,679
so we have

821
00:28:23,679 --> 00:28:24,640
um

822
00:28:24,640 --> 00:28:26,640
payload encryption in that case to sign

823
00:28:26,640 --> 00:28:27,840
that

824
00:28:27,840 --> 00:28:30,159
there's a case where we have to that we

825
00:28:30,159 --> 00:28:32,000
have to also consider and that is the

826
00:28:32,000 --> 00:28:34,080
case that an attacker would go for

827
00:28:34,080 --> 00:28:35,760
instance the queue file with that with

828
00:28:35,760 --> 00:28:37,360
the payment process

829
00:28:37,360 --> 00:28:39,840
would go and request a refund and then

830
00:28:39,840 --> 00:28:42,240
go and fish off his own transaction or

831
00:28:42,240 --> 00:28:44,240
the queue and then just goes in and

832
00:28:44,240 --> 00:28:46,240
duplicates that file

833
00:28:46,240 --> 00:28:48,320
now in that case we have to do one more

834
00:28:48,320 --> 00:28:49,840
thing we have to actually introduce in

835
00:28:49,840 --> 00:28:52,480
unique id as part of the payload that we

836
00:28:52,480 --> 00:28:54,480
then sign and then protect it against

837
00:28:54,480 --> 00:28:56,559
duplication so that would be something

838
00:28:56,559 --> 00:29:00,480
even more complex that we can do

839
00:29:01,039 --> 00:29:02,480
all right

840
00:29:02,480 --> 00:29:05,360
let's shift some gears here again

841
00:29:05,360 --> 00:29:07,120
another set that i want to talk about is

842
00:29:07,120 --> 00:29:10,240
systems that don't mix well

843
00:29:10,240 --> 00:29:11,919
this is something that we see that

844
00:29:11,919 --> 00:29:14,080
certain systems they just don't play

845
00:29:14,080 --> 00:29:15,279
well together

846
00:29:15,279 --> 00:29:17,919
with each other

847
00:29:18,880 --> 00:29:20,240
all right the first thing i want to note

848
00:29:20,240 --> 00:29:22,240
is something that came up today and when

849
00:29:22,240 --> 00:29:24,320
someone talks to the search engine

850
00:29:24,320 --> 00:29:26,240
versus encryption now on the right hand

851
00:29:26,240 --> 00:29:28,880
side here we have our data lake

852
00:29:28,880 --> 00:29:31,039
that contains encrypted data

853
00:29:31,039 --> 00:29:32,960
left inside we have our search engine

854
00:29:32,960 --> 00:29:35,039
and that search in that engine uses

855
00:29:35,039 --> 00:29:37,919
indexing indexes the encrypted data in

856
00:29:37,919 --> 00:29:39,360
our dear lake

857
00:29:39,360 --> 00:29:40,720
now

858
00:29:40,720 --> 00:29:42,480
of course search engine searching

859
00:29:42,480 --> 00:29:44,640
encrypted data does not mix well for

860
00:29:44,640 --> 00:29:46,159
multiple different reasons

861
00:29:46,159 --> 00:29:48,240
the one reason is we need to have access

862
00:29:48,240 --> 00:29:50,399
to the key now there are some options

863
00:29:50,399 --> 00:29:52,960
that are not optimal but they are

864
00:29:52,960 --> 00:29:55,840
feasible that you can do to use the

865
00:29:55,840 --> 00:29:58,320
search engine for that

866
00:29:58,320 --> 00:29:59,840
there's some non-optimal options here so

867
00:29:59,840 --> 00:30:00,960
for instance

868
00:30:00,960 --> 00:30:02,480
we can run the search engine with

869
00:30:02,480 --> 00:30:04,720
elevated access to key or multiple keys

870
00:30:04,720 --> 00:30:06,399
if you do like

871
00:30:06,399 --> 00:30:08,320
multiple like envelope encryption or row

872
00:30:08,320 --> 00:30:10,399
level encryption you would have access

873
00:30:10,399 --> 00:30:13,919
to multiple keys across all records

874
00:30:13,919 --> 00:30:14,960
that

875
00:30:14,960 --> 00:30:16,640
potentially creates issues if there are

876
00:30:16,640 --> 00:30:19,279
a lot of records in there because you're

877
00:30:19,279 --> 00:30:21,520
only one hop away from like a

878
00:30:21,520 --> 00:30:24,080
catastrophe for instance if a developer

879
00:30:24,080 --> 00:30:25,600
goes and wants to

880
00:30:25,600 --> 00:30:27,360
drop in an api in front of this like a

881
00:30:27,360 --> 00:30:29,919
slightly outdated api like graphql that

882
00:30:29,919 --> 00:30:31,760
has a serialization flaw

883
00:30:31,760 --> 00:30:34,320
um like in in front of that engine then

884
00:30:34,320 --> 00:30:36,399
somebody could tunnel in and then of

885
00:30:36,399 --> 00:30:38,960
course that that attacker could go and

886
00:30:38,960 --> 00:30:40,399
get have access to all the data and

887
00:30:40,399 --> 00:30:43,840
siphon all the data out one by one

888
00:30:43,840 --> 00:30:44,640
so

889
00:30:44,640 --> 00:30:46,720
access to the key here is relatively

890
00:30:46,720 --> 00:30:48,080
questionable so you have to be careful

891
00:30:48,080 --> 00:30:50,080
with that then what you can also do is

892
00:30:50,080 --> 00:30:51,760
of course you can index the non-pi

893
00:30:51,760 --> 00:30:53,520
fields in plain text so you can always

894
00:30:53,520 --> 00:30:55,360
do that then there's something like you

895
00:30:55,360 --> 00:30:57,279
can build yourself a custom index based

896
00:30:57,279 --> 00:30:59,360
out of hashed value or like do some kind

897
00:30:59,360 --> 00:31:00,240
of a

898
00:31:00,240 --> 00:31:01,200
search

899
00:31:01,200 --> 00:31:04,399
encryption schemes that's a custom

900
00:31:04,399 --> 00:31:06,399
custom code and that

901
00:31:06,399 --> 00:31:09,279
that's feasible um relatively new and

902
00:31:09,279 --> 00:31:11,919
relatively risky in terms of

903
00:31:11,919 --> 00:31:13,840
using libraries that might not be

904
00:31:13,840 --> 00:31:15,360
working the same way in the future

905
00:31:15,360 --> 00:31:17,440
excuse me

906
00:31:17,440 --> 00:31:18,799
all right so something we have to think

907
00:31:18,799 --> 00:31:21,039
about

908
00:31:21,840 --> 00:31:23,840
another system that doesn't mix well it

909
00:31:23,840 --> 00:31:25,279
has to also do with the searching is

910
00:31:25,279 --> 00:31:26,799
something that actually

911
00:31:26,799 --> 00:31:27,840
not only

912
00:31:27,840 --> 00:31:29,200
um

913
00:31:29,200 --> 00:31:32,559
not only out does um that not only

914
00:31:32,559 --> 00:31:34,480
doesn't play well together there's a

915
00:31:34,480 --> 00:31:37,120
potential there that systems

916
00:31:37,120 --> 00:31:39,600
um reverse each other's con security

917
00:31:39,600 --> 00:31:41,519
controls now in our case here we have a

918
00:31:41,519 --> 00:31:44,640
data lake that has um de-identified data

919
00:31:44,640 --> 00:31:47,279
in it so that's that's used for lower

920
00:31:47,279 --> 00:31:49,600
environments to to train artificial

921
00:31:49,600 --> 00:31:52,559
intelligence systems or using data uh

922
00:31:52,559 --> 00:31:54,799
for for testing what you do is you

923
00:31:54,799 --> 00:31:56,640
remove the key identifiers and chunk up

924
00:31:56,640 --> 00:31:58,960
there in smaller pieces and then you can

925
00:31:58,960 --> 00:32:01,120
go and and work with the data without

926
00:32:01,120 --> 00:32:03,519
with the real data real formats without

927
00:32:03,519 --> 00:32:05,279
um and knowing actually where the data

928
00:32:05,279 --> 00:32:06,559
belongs to

929
00:32:06,559 --> 00:32:07,679
now

930
00:32:07,679 --> 00:32:09,760
unfortunately this what you have to know

931
00:32:09,760 --> 00:32:11,279
as a search engine reverses the

932
00:32:11,279 --> 00:32:13,279
identification efforts

933
00:32:13,279 --> 00:32:15,919
and it does it in certain ways the first

934
00:32:15,919 --> 00:32:17,360
way of does it is

935
00:32:17,360 --> 00:32:19,360
um it can programmatically

936
00:32:19,360 --> 00:32:21,600
run rounds of elimination to re-identify

937
00:32:21,600 --> 00:32:24,159
data so if you have kids and ever played

938
00:32:24,159 --> 00:32:26,159
this game guess who

939
00:32:26,159 --> 00:32:28,159
that's very similar to how this would

940
00:32:28,159 --> 00:32:31,840
work um you basically go and and and and

941
00:32:31,840 --> 00:32:33,200
eliminate records that have a certain

942
00:32:33,200 --> 00:32:34,880
category like all users here on the

943
00:32:34,880 --> 00:32:36,960
right oh all people that

944
00:32:36,960 --> 00:32:39,039
that have um blonde hair get all

945
00:32:39,039 --> 00:32:40,960
eliminated and then you only set left

946
00:32:40,960 --> 00:32:43,600
with a certain subset of records that

947
00:32:43,600 --> 00:32:45,760
are very small and you can recorrelate

948
00:32:45,760 --> 00:32:46,720
them

949
00:32:46,720 --> 00:32:48,000
there's another issue related with the

950
00:32:48,000 --> 00:32:49,679
search engine and that that the

951
00:32:49,679 --> 00:32:51,679
identified data and that is there's a

952
00:32:51,679 --> 00:32:53,600
potential there that the search engine

953
00:32:53,600 --> 00:32:56,559
has direct access to our re uh to to the

954
00:32:56,559 --> 00:32:59,360
metadata and it is able to reverse index

955
00:32:59,360 --> 00:33:01,519
that metadata for instance if somebody

956
00:33:01,519 --> 00:33:03,840
can write a query that that says give me

957
00:33:03,840 --> 00:33:06,559
all records that with an index value of

958
00:33:06,559 --> 00:33:08,799
one two three two one two seven then

959
00:33:08,799 --> 00:33:10,480
they would be able to re-identify the

960
00:33:10,480 --> 00:33:12,640
records in that range and especially if

961
00:33:12,640 --> 00:33:14,960
that data is sorted still in the back

962
00:33:14,960 --> 00:33:16,640
end um they would be able to to

963
00:33:16,640 --> 00:33:18,080
re-identify that so that's something you

964
00:33:18,080 --> 00:33:19,840
have to know and keep in mind when you

965
00:33:19,840 --> 00:33:21,440
design those systems that involve a

966
00:33:21,440 --> 00:33:25,600
search engine and the identified data

967
00:33:25,600 --> 00:33:27,519
there's this third example that i want

968
00:33:27,519 --> 00:33:29,519
to point out here that systems that

969
00:33:29,519 --> 00:33:31,200
don't match it's actually not a system

970
00:33:31,200 --> 00:33:32,480
that doesn't match with something else

971
00:33:32,480 --> 00:33:34,480
it's a it's a zone it doesn't match with

972
00:33:34,480 --> 00:33:35,679
something else on the right hand side

973
00:33:35,679 --> 00:33:36,640
here

974
00:33:36,640 --> 00:33:39,279
we have an or onshore

975
00:33:39,279 --> 00:33:41,200
um data lake

976
00:33:41,200 --> 00:33:42,960
now we have a hard requirement from

977
00:33:42,960 --> 00:33:44,399
compliance here

978
00:33:44,399 --> 00:33:47,039
that says you're not our data is not

979
00:33:47,039 --> 00:33:49,039
allowed to leave our premises

980
00:33:49,039 --> 00:33:50,960
on the left hand side though we have our

981
00:33:50,960 --> 00:33:53,600
offshore application that reads and

982
00:33:53,600 --> 00:33:55,840
and reads data from our onshore

983
00:33:55,840 --> 00:33:56,960
application

984
00:33:56,960 --> 00:33:58,960
on the offshore zone node persistence

985
00:33:58,960 --> 00:34:01,760
data there now of course

986
00:34:01,760 --> 00:34:04,720
what we see quite often is we have

987
00:34:04,720 --> 00:34:06,080
systems that inherently store

988
00:34:06,080 --> 00:34:08,480
persistence data in in the restricted

989
00:34:08,480 --> 00:34:10,960
zone and so they they're storing it in

990
00:34:10,960 --> 00:34:12,320
there and then then that creates

991
00:34:12,320 --> 00:34:14,399
compliance issue so you can only use the

992
00:34:14,399 --> 00:34:16,260
data in transit but not stored there

993
00:34:16,260 --> 00:34:17,839
[Music]

994
00:34:17,839 --> 00:34:19,359
some systems that indirectly process

995
00:34:19,359 --> 00:34:21,839
data for instance are our search index

996
00:34:21,839 --> 00:34:23,440
for instance right so we have a search

997
00:34:23,440 --> 00:34:25,679
system index that writes data in the

998
00:34:25,679 --> 00:34:27,679
wrong spot in the wrong zone

999
00:34:27,679 --> 00:34:30,480
then cache since transfer takes a long

1000
00:34:30,480 --> 00:34:32,320
time

1001
00:34:32,320 --> 00:34:34,320
it's very tempting to just put a cache

1002
00:34:34,320 --> 00:34:36,000
on the other side and

1003
00:34:36,000 --> 00:34:37,679
fix that transport time by just looking

1004
00:34:37,679 --> 00:34:39,918
it up locally now that enforce of course

1005
00:34:39,918 --> 00:34:42,399
creates caching issue

1006
00:34:42,399 --> 00:34:43,839
that creates an issue with the cache

1007
00:34:43,839 --> 00:34:46,079
then being written out

1008
00:34:46,079 --> 00:34:48,159
then the queue um we have a queue file

1009
00:34:48,159 --> 00:34:50,159
here that is attached to a queue

1010
00:34:50,159 --> 00:34:53,918
um that could land in the wrong zone

1011
00:34:53,918 --> 00:34:55,760
another another example that input there

1012
00:34:55,760 --> 00:34:57,760
that's like a stream source like kafka

1013
00:34:57,760 --> 00:34:59,359
frequently has

1014
00:34:59,359 --> 00:35:01,200
um has

1015
00:35:01,200 --> 00:35:03,599
file storage associated with it

1016
00:35:03,599 --> 00:35:06,400
and logging agents are one of those um

1017
00:35:06,400 --> 00:35:08,800
systems that also frequently write into

1018
00:35:08,800 --> 00:35:12,640
that into an area like this

1019
00:35:14,800 --> 00:35:15,680
right

1020
00:35:15,680 --> 00:35:17,359
um we talked about systems that don't

1021
00:35:17,359 --> 00:35:18,880
match now

1022
00:35:18,880 --> 00:35:20,400
there's another set that i want to point

1023
00:35:20,400 --> 00:35:23,040
out those are systems that create issues

1024
00:35:23,040 --> 00:35:26,720
once you scale up and create more

1025
00:35:26,720 --> 00:35:30,000
of those systems

1026
00:35:30,000 --> 00:35:32,160
the first system here has to do with our

1027
00:35:32,160 --> 00:35:33,920
service mesh very

1028
00:35:33,920 --> 00:35:36,240
um if you zoom in on one of those very

1029
00:35:36,240 --> 00:35:37,760
similar setup here

1030
00:35:37,760 --> 00:35:39,760
usually we have a service node here that

1031
00:35:39,760 --> 00:35:42,160
talks another service load node and

1032
00:35:42,160 --> 00:35:43,599
we're using a public key infrastructure

1033
00:35:43,599 --> 00:35:46,240
with certificate then in order to make

1034
00:35:46,240 --> 00:35:48,240
make them communicate with each other

1035
00:35:48,240 --> 00:35:50,240
and using https for instance for that

1036
00:35:50,240 --> 00:35:52,240
protocol in between

1037
00:35:52,240 --> 00:35:54,800
now each service node has

1038
00:35:54,800 --> 00:35:56,800
a keyboard associated with it and a

1039
00:35:56,800 --> 00:35:58,800
certificate storage

1040
00:35:58,800 --> 00:36:00,960
associated with it the key vault

1041
00:36:00,960 --> 00:36:02,800
contains unique private key that needs

1042
00:36:02,800 --> 00:36:04,320
to be reprotected and the certificate

1043
00:36:04,320 --> 00:36:05,520
storage

1044
00:36:05,520 --> 00:36:07,119
contains a public key and then root

1045
00:36:07,119 --> 00:36:09,520
certificate and then potentially some

1046
00:36:09,520 --> 00:36:10,839
intermediate

1047
00:36:10,839 --> 00:36:13,359
certificates that holds true for all

1048
00:36:13,359 --> 00:36:15,040
other nodes in that setup

1049
00:36:15,040 --> 00:36:16,320
now

1050
00:36:16,320 --> 00:36:18,320
public key infrastructure have an issue

1051
00:36:18,320 --> 00:36:20,320
with it right that most people know that

1052
00:36:20,320 --> 00:36:21,839
is they expire

1053
00:36:21,839 --> 00:36:23,440
so the question is can we manually

1054
00:36:23,440 --> 00:36:25,599
provision this time times 100 or 1000

1055
00:36:25,599 --> 00:36:27,599
per year but of course we cannot do this

1056
00:36:27,599 --> 00:36:30,160
right so using a pki without even

1057
00:36:30,160 --> 00:36:32,480
planning for automation or key and

1058
00:36:32,480 --> 00:36:34,079
certificate management is a big no no

1059
00:36:34,079 --> 00:36:35,920
that's a big night pattern we need to do

1060
00:36:35,920 --> 00:36:38,160
this and address this

1061
00:36:38,160 --> 00:36:39,839
of course if you're using like a service

1062
00:36:39,839 --> 00:36:41,760
mesh they have that feature in it but

1063
00:36:41,760 --> 00:36:43,599
don't forget to plan for automation for

1064
00:36:43,599 --> 00:36:45,920
entry and exit nodes together with that

1065
00:36:45,920 --> 00:36:47,520
that's that needs to be automated and

1066
00:36:47,520 --> 00:36:49,920
then of course a b testing rollover all

1067
00:36:49,920 --> 00:36:52,560
those kind of things are very important

1068
00:36:52,560 --> 00:36:54,480
things that need to be automated and

1069
00:36:54,480 --> 00:36:57,440
be able to replicate that in a certain

1070
00:36:57,440 --> 00:37:00,640
in a very um robust fashion key rotation

1071
00:37:00,640 --> 00:37:02,400
brings down big companies that's what we

1072
00:37:02,400 --> 00:37:03,839
saw in the past

1073
00:37:03,839 --> 00:37:05,520
the big companies had outings because of

1074
00:37:05,520 --> 00:37:07,760
key and certificates explorations

1075
00:37:07,760 --> 00:37:09,920
so keep in mind that's an achilles heel

1076
00:37:09,920 --> 00:37:13,359
of of a whole cloud setup

1077
00:37:14,400 --> 00:37:16,480
all right last night pattern here that i

1078
00:37:16,480 --> 00:37:18,960
want to discuss is

1079
00:37:18,960 --> 00:37:20,480
scalability

1080
00:37:20,480 --> 00:37:22,400
versus scaling rate limiting versus

1081
00:37:22,400 --> 00:37:25,119
scaling scaling when you have services

1082
00:37:25,119 --> 00:37:27,599
that need to be um ramped up according

1083
00:37:27,599 --> 00:37:30,240
to a certain load that's something that

1084
00:37:30,240 --> 00:37:32,640
an orchestrator would do in a in a cloud

1085
00:37:32,640 --> 00:37:33,599
setup

1086
00:37:33,599 --> 00:37:34,480
um

1087
00:37:34,480 --> 00:37:35,760
on the security side though we might

1088
00:37:35,760 --> 00:37:37,760
have a requirement that that means slow

1089
00:37:37,760 --> 00:37:39,359
requests down

1090
00:37:39,359 --> 00:37:41,359
and and limit that so people cannot

1091
00:37:41,359 --> 00:37:44,480
abuse our api or they cannot um there's

1092
00:37:44,480 --> 00:37:47,119
a licensing restriction tied to that

1093
00:37:47,119 --> 00:37:48,800
now

1094
00:37:48,800 --> 00:37:50,640
the precursor to any rate limiting

1095
00:37:50,640 --> 00:37:52,079
though is you have to be able to

1096
00:37:52,079 --> 00:37:54,320
uniquely identify a caller that means

1097
00:37:54,320 --> 00:37:56,320
you have to know who the caller is all

1098
00:37:56,320 --> 00:37:58,400
the way back to

1099
00:37:58,400 --> 00:38:01,119
that device

1100
00:38:01,359 --> 00:38:02,560
generally speaking though we have two

1101
00:38:02,560 --> 00:38:04,720
opposing requirements the responses are

1102
00:38:04,720 --> 00:38:06,640
supposed to be slowed down or blocked if

1103
00:38:06,640 --> 00:38:08,800
the requests come in too fast and then

1104
00:38:08,800 --> 00:38:11,040
on the other side on this on the scaling

1105
00:38:11,040 --> 00:38:12,880
fashion we have a source orchestrator

1106
00:38:12,880 --> 00:38:14,960
that would instantiate new nodes if the

1107
00:38:14,960 --> 00:38:16,400
services are com

1108
00:38:16,400 --> 00:38:19,520
are too slow so this

1109
00:38:19,520 --> 00:38:21,200
is a anti-pattern that you have to think

1110
00:38:21,200 --> 00:38:23,200
about that rate limiting throttling does

1111
00:38:23,200 --> 00:38:25,760
not scale up by design now

1112
00:38:25,760 --> 00:38:27,599
that's an absolute statement here in

1113
00:38:27,599 --> 00:38:30,400
reality it's not as absolute though but

1114
00:38:30,400 --> 00:38:31,920
it becomes more and more absolute the

1115
00:38:31,920 --> 00:38:34,079
more you breach your precursor here then

1116
00:38:34,079 --> 00:38:35,839
you need to uniquely identify your

1117
00:38:35,839 --> 00:38:38,240
caller so think about this way let's say

1118
00:38:38,240 --> 00:38:40,000
you have a train

1119
00:38:40,000 --> 00:38:42,560
network where people commuting and

1120
00:38:42,560 --> 00:38:44,079
people committing to work and they are

1121
00:38:44,079 --> 00:38:47,599
all using the same exit ip address and

1122
00:38:47,599 --> 00:38:49,839
you think you have your caller uniquely

1123
00:38:49,839 --> 00:38:51,680
identified but you don't

1124
00:38:51,680 --> 00:38:53,359
um in that case you would punish

1125
00:38:53,359 --> 00:38:54,800
everybody else that comes from the same

1126
00:38:54,800 --> 00:38:56,880
network that checks first in their stock

1127
00:38:56,880 --> 00:38:58,960
quotes or whatever in the morning

1128
00:38:58,960 --> 00:39:00,880
while going to work and using the public

1129
00:39:00,880 --> 00:39:03,200
wi-fi for your train operator so

1130
00:39:03,200 --> 00:39:04,560
if you

1131
00:39:04,560 --> 00:39:06,800
if you cannot uniquely identify your

1132
00:39:06,800 --> 00:39:08,000
caller

1133
00:39:08,000 --> 00:39:10,400
then this will apply now there's a

1134
00:39:10,400 --> 00:39:12,800
slightly better way of doing this

1135
00:39:12,800 --> 00:39:14,800
i better somewhat mitigation you can use

1136
00:39:14,800 --> 00:39:17,200
a quantifier in your token

1137
00:39:17,200 --> 00:39:18,000
to

1138
00:39:18,000 --> 00:39:20,320
deal with this so instead of throttling

1139
00:39:20,320 --> 00:39:22,079
you can actually give them a token that

1140
00:39:22,079 --> 00:39:24,480
hasn't as an amount encoded in it like

1141
00:39:24,480 --> 00:39:26,960
100 queries once or they can create 100

1142
00:39:26,960 --> 00:39:29,200
500 records in my example and that

1143
00:39:29,200 --> 00:39:30,960
expires very fast now that with that

1144
00:39:30,960 --> 00:39:33,040
token of course they can go in further

1145
00:39:33,040 --> 00:39:35,520
across all servers at once but it's a

1146
00:39:35,520 --> 00:39:39,920
somewhat mitigation for this setup

1147
00:39:41,520 --> 00:39:43,280
all right so we're done with our enter

1148
00:39:43,280 --> 00:39:45,520
patterns and let's discuss what we can

1149
00:39:45,520 --> 00:39:46,960
actually do about it here what's the

1150
00:39:46,960 --> 00:39:47,880
plan here

1151
00:39:47,880 --> 00:39:51,149
[Music]

1152
00:39:51,599 --> 00:39:52,400
this

1153
00:39:52,400 --> 00:39:54,839
though these ni patterns fall into the

1154
00:39:54,839 --> 00:39:57,280
awareness section this awareness is key

1155
00:39:57,280 --> 00:39:59,359
here what we need to do is start

1156
00:39:59,359 --> 00:40:00,960
documenting this and create a library of

1157
00:40:00,960 --> 00:40:02,720
inner patterns

1158
00:40:02,720 --> 00:40:03,440
now

1159
00:40:03,440 --> 00:40:06,000
the lower complexity i call the single

1160
00:40:06,000 --> 00:40:07,680
patterns we would

1161
00:40:07,680 --> 00:40:09,520
we could put into our thread library

1162
00:40:09,520 --> 00:40:11,520
that would be easy thing to do when if

1163
00:40:11,520 --> 00:40:12,640
you have a threat modeling tool in

1164
00:40:12,640 --> 00:40:14,400
library we can put that in

1165
00:40:14,400 --> 00:40:16,160
everything dealing with one

1166
00:40:16,160 --> 00:40:18,319
one element you can document it there

1167
00:40:18,319 --> 00:40:20,560
and say here check that out

1168
00:40:20,560 --> 00:40:22,880
now the more complex patterns that

1169
00:40:22,880 --> 00:40:25,520
dealing with behavioral changes and

1170
00:40:25,520 --> 00:40:27,200
require more documentation we need to

1171
00:40:27,200 --> 00:40:30,000
put into a wiki or confluence and

1172
00:40:30,000 --> 00:40:31,760
classify them like i just

1173
00:40:31,760 --> 00:40:34,240
started doing and and put them in there

1174
00:40:34,240 --> 00:40:35,760
now

1175
00:40:35,760 --> 00:40:36,800
unfortunately when you have new

1176
00:40:36,800 --> 00:40:38,400
practitioners doing doing the threat

1177
00:40:38,400 --> 00:40:41,680
modeling and the design then they

1178
00:40:41,680 --> 00:40:44,560
it takes time for a secure person or

1179
00:40:44,560 --> 00:40:46,400
developers to recognize those patterns

1180
00:40:46,400 --> 00:40:48,720
they are quite abstract so with that we

1181
00:40:48,720 --> 00:40:50,319
have to be able we have to go and create

1182
00:40:50,319 --> 00:40:52,319
a list of red flag terms for instance

1183
00:40:52,319 --> 00:40:53,760
that points them to the parents so they

1184
00:40:53,760 --> 00:40:55,359
can recognize it because

1185
00:40:55,359 --> 00:40:57,200
um newer people that don't have the

1186
00:40:57,200 --> 00:40:58,800
experience they tend to think very

1187
00:40:58,800 --> 00:41:01,920
specific so we'd give them lists like

1188
00:41:01,920 --> 00:41:03,040
time

1189
00:41:03,040 --> 00:41:04,079
q

1190
00:41:04,079 --> 00:41:05,040
um

1191
00:41:05,040 --> 00:41:06,240
time queue

1192
00:41:06,240 --> 00:41:08,959
or um

1193
00:41:09,280 --> 00:41:10,800
a batch file for instance and then it's

1194
00:41:10,800 --> 00:41:12,960
like yep go and check out

1195
00:41:12,960 --> 00:41:14,480
that pattern and see if it applies to

1196
00:41:14,480 --> 00:41:16,800
you of course we can also go and create

1197
00:41:16,800 --> 00:41:19,680
a starter template for them one start a

1198
00:41:19,680 --> 00:41:21,440
template threat models where they can

1199
00:41:21,440 --> 00:41:23,839
address some of these issues

1200
00:41:23,839 --> 00:41:26,400
and look that up

1201
00:41:26,400 --> 00:41:27,760
so here's another

1202
00:41:27,760 --> 00:41:29,200
has just put the summary out here for

1203
00:41:29,200 --> 00:41:30,160
that list

1204
00:41:30,160 --> 00:41:31,040
um

1205
00:41:31,040 --> 00:41:33,280
of the parents and they're

1206
00:41:33,280 --> 00:41:35,599
some more though too that we can add to

1207
00:41:35,599 --> 00:41:37,280
it

1208
00:41:37,280 --> 00:41:38,720
and that needs to go somewhere you know

1209
00:41:38,720 --> 00:41:40,319
typically in our library so we need to

1210
00:41:40,319 --> 00:41:42,079
start thinking about where to put this

1211
00:41:42,079 --> 00:41:45,200
and how to communicate this

1212
00:41:45,200 --> 00:41:47,280
there's another awareness action item

1213
00:41:47,280 --> 00:41:49,200
that i want to point out and that is

1214
00:41:49,200 --> 00:41:51,760
that's on us the secure people

1215
00:41:51,760 --> 00:41:54,079
we need to learn from developers what is

1216
00:41:54,079 --> 00:41:56,640
easy to do and what is not so easy to do

1217
00:41:56,640 --> 00:41:57,760
of course when we tell them certain

1218
00:41:57,760 --> 00:41:58,800
things that need to do they start

1219
00:41:58,800 --> 00:42:00,720
moaning and tell us you know that's

1220
00:42:00,720 --> 00:42:02,560
that's something that's easy or not

1221
00:42:02,560 --> 00:42:04,240
right but we need to actually document

1222
00:42:04,240 --> 00:42:05,599
that and write that down so there's a

1223
00:42:05,599 --> 00:42:07,680
there's a scale here for instance basic

1224
00:42:07,680 --> 00:42:09,520
authentication might be totally easy to

1225
00:42:09,520 --> 00:42:11,839
do volume encryption slightly more

1226
00:42:11,839 --> 00:42:13,760
if you want to do encrypt flow data and

1227
00:42:13,760 --> 00:42:15,520
transit that's

1228
00:42:15,520 --> 00:42:17,119
more involved because you have to put a

1229
00:42:17,119 --> 00:42:18,720
key somewhere or

1230
00:42:18,720 --> 00:42:20,880
change more things at once

1231
00:42:20,880 --> 00:42:22,560
implementing custom authorization that's

1232
00:42:22,560 --> 00:42:24,640
more complex touches code

1233
00:42:24,640 --> 00:42:26,480
or potentially all over the place if you

1234
00:42:26,480 --> 00:42:27,760
have to put a custom library in

1235
00:42:27,760 --> 00:42:29,760
somewhere then individual record or

1236
00:42:29,760 --> 00:42:32,560
payload encryption that's on potentially

1237
00:42:32,560 --> 00:42:34,720
even more involved because you need to

1238
00:42:34,720 --> 00:42:36,480
deal with the keys you need to have a

1239
00:42:36,480 --> 00:42:38,480
receiver center decrypter

1240
00:42:38,480 --> 00:42:41,119
signer whatever um test this out don't

1241
00:42:41,119 --> 00:42:42,560
break anything and change everything out

1242
00:42:42,560 --> 00:42:45,200
at once so there's a complexity here and

1243
00:42:45,200 --> 00:42:46,800
that's something that we need to put in

1244
00:42:46,800 --> 00:42:48,160
a ranking system

1245
00:42:48,160 --> 00:42:50,319
and and then when once we go into those

1246
00:42:50,319 --> 00:42:52,640
sessions we can check up front and tell

1247
00:42:52,640 --> 00:42:54,000
them give them heads up and say hey by

1248
00:42:54,000 --> 00:42:55,599
the way

1249
00:42:55,599 --> 00:42:58,240
if you plan on using this in this setup

1250
00:42:58,240 --> 00:43:00,319
you might want to put that in right away

1251
00:43:00,319 --> 00:43:03,119
there's certain things

1252
00:43:05,119 --> 00:43:06,560
apart from this awareness there's

1253
00:43:06,560 --> 00:43:08,640
something more we can do and that is we

1254
00:43:08,640 --> 00:43:10,880
can do little more proactive things like

1255
00:43:10,880 --> 00:43:13,119
we can create platform services that

1256
00:43:13,119 --> 00:43:14,800
implement fully

1257
00:43:14,800 --> 00:43:16,960
configured security features

1258
00:43:16,960 --> 00:43:19,440
if you ever downloaded like a database

1259
00:43:19,440 --> 00:43:21,040
appliance

1260
00:43:21,040 --> 00:43:23,520
then you'll know that the database

1261
00:43:23,520 --> 00:43:25,440
appliance these days comes with a script

1262
00:43:25,440 --> 00:43:27,520
that creates a system user and it

1263
00:43:27,520 --> 00:43:29,200
creates a regular user as part of the

1264
00:43:29,200 --> 00:43:31,040
setup that's what something that i would

1265
00:43:31,040 --> 00:43:33,760
consider fully configured platform and

1266
00:43:33,760 --> 00:43:34,960
of course

1267
00:43:34,960 --> 00:43:36,800
open ports and stuff leave that out for

1268
00:43:36,800 --> 00:43:38,720
now but that that's from the

1269
00:43:38,720 --> 00:43:40,400
authentication perspective

1270
00:43:40,400 --> 00:43:42,640
that's a pretty good configured platform

1271
00:43:42,640 --> 00:43:45,680
so we want to try to create something

1272
00:43:45,680 --> 00:43:47,200
like this

1273
00:43:47,200 --> 00:43:50,160
for our design setups like for instance

1274
00:43:50,160 --> 00:43:52,000
we could enforce the role that they just

1275
00:43:52,000 --> 00:43:53,440
talked about the placeholder in the

1276
00:43:53,440 --> 00:43:55,599
token and say well something needs to be

1277
00:43:55,599 --> 00:43:57,119
there and i don't care in the beginning

1278
00:43:57,119 --> 00:43:58,640
of its dummy place but it needs to be in

1279
00:43:58,640 --> 00:44:00,079
there so we can actually deal with it in

1280
00:44:00,079 --> 00:44:01,119
the future

1281
00:44:01,119 --> 00:44:02,240
because we don't want to have an empty

1282
00:44:02,240 --> 00:44:03,839
token in the future

1283
00:44:03,839 --> 00:44:05,280
being presented because that creates a

1284
00:44:05,280 --> 00:44:06,560
dilemma for us

1285
00:44:06,560 --> 00:44:08,960
then what we can also do is

1286
00:44:08,960 --> 00:44:10,880
we could create multiple business rules

1287
00:44:10,880 --> 00:44:12,240
as part of an infrastructure as a

1288
00:44:12,240 --> 00:44:13,920
service setup

1289
00:44:13,920 --> 00:44:15,680
up front that we have a regular user and

1290
00:44:15,680 --> 00:44:17,839
then we have a power user for instance

1291
00:44:17,839 --> 00:44:19,040
then

1292
00:44:19,040 --> 00:44:20,720
then something like the data lake

1293
00:44:20,720 --> 00:44:23,119
example for instance that we could

1294
00:44:23,119 --> 00:44:25,119
require the developer that starts using

1295
00:44:25,119 --> 00:44:26,000
that

1296
00:44:26,000 --> 00:44:28,720
even in development to present a token

1297
00:44:28,720 --> 00:44:30,640
that's fully configured even in the

1298
00:44:30,640 --> 00:44:32,960
development phase that'll create a bunch

1299
00:44:32,960 --> 00:44:34,400
of moaning up front but on the other

1300
00:44:34,400 --> 00:44:36,160
hand it's there and they need to use it

1301
00:44:36,160 --> 00:44:38,480
right away and then they don't really

1302
00:44:38,480 --> 00:44:40,560
bypass that from the get go they need to

1303
00:44:40,560 --> 00:44:44,400
work with it as is right away

1304
00:44:44,400 --> 00:44:45,920
we can do a little bit more with

1305
00:44:45,920 --> 00:44:47,280
pre-configured templates like

1306
00:44:47,280 --> 00:44:49,119
infrastructure as service modules versus

1307
00:44:49,119 --> 00:44:52,400
terraform or aws config we can provide

1308
00:44:52,400 --> 00:44:54,319
those

1309
00:44:54,319 --> 00:44:56,560
templates that work together and have

1310
00:44:56,560 --> 00:44:58,400
pre-configured setups that work well

1311
00:44:58,400 --> 00:45:00,480
together so for instance the queue could

1312
00:45:00,480 --> 00:45:02,480
have a write protected storage file

1313
00:45:02,480 --> 00:45:05,760
associated with it and and then

1314
00:45:05,760 --> 00:45:06,960
for instance if you create a stream

1315
00:45:06,960 --> 00:45:09,760
source that has appropriate buckets or

1316
00:45:09,760 --> 00:45:12,240
um in roles that would deal with

1317
00:45:12,240 --> 00:45:14,400
certain execution roles

1318
00:45:14,400 --> 00:45:16,800
um that are higher level so we can set

1319
00:45:16,800 --> 00:45:19,440
that up at the same time

1320
00:45:19,440 --> 00:45:22,079
so those those um those this model is

1321
00:45:22,079 --> 00:45:24,400
something that we can um

1322
00:45:24,400 --> 00:45:26,079
that we can provide and build out over

1323
00:45:26,079 --> 00:45:29,359
time once we see those patterns

1324
00:45:29,359 --> 00:45:30,800
now this

1325
00:45:30,800 --> 00:45:33,599
concludes my speech for today

1326
00:45:33,599 --> 00:45:35,920
um curious to see what you guys are

1327
00:45:35,920 --> 00:45:38,480
thinking about this um for questions if

1328
00:45:38,480 --> 00:45:39,839
you don't want to ask this in wolver you

1329
00:45:39,839 --> 00:45:41,920
can certainly send it over to war or hit

1330
00:45:41,920 --> 00:45:44,400
me up here on linkedin

1331
00:45:44,400 --> 00:45:47,200
um and see curious to see and find out

1332
00:45:47,200 --> 00:45:49,359
what we should could do with those um

1333
00:45:49,359 --> 00:45:50,560
should we

1334
00:45:50,560 --> 00:45:52,400
categorize them in a different way any

1335
00:45:52,400 --> 00:45:53,839
ideas for that i certainly have more

1336
00:45:53,839 --> 00:45:55,680
ideas for more patterns certain things i

1337
00:45:55,680 --> 00:45:57,760
did not talk about like for example in

1338
00:45:57,760 --> 00:45:59,520
the beginning the title slide was

1339
00:45:59,520 --> 00:46:00,960
simultaneous access for instance

1340
00:46:00,960 --> 00:46:02,880
something that that i didn't talk about

1341
00:46:02,880 --> 00:46:04,560
in the application that come across more

1342
00:46:04,560 --> 00:46:07,440
and more patterns um as we speak so let

1343
00:46:07,440 --> 00:46:09,920
me hand it over back to um jackie or

1344
00:46:09,920 --> 00:46:12,800
moderator and

