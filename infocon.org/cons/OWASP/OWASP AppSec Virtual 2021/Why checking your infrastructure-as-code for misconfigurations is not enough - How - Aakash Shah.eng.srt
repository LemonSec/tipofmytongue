1
00:00:01,420 --> 00:00:05,120
[Music]

2
00:00:05,120 --> 00:00:06,240
thank you

3
00:00:06,240 --> 00:00:08,400
appreciate that introduction and and

4
00:00:08,400 --> 00:00:10,880
thank you for having me here today

5
00:00:10,880 --> 00:00:14,320
um today my talk is about why

6
00:00:14,320 --> 00:00:16,160
checking your infrastructure as code for

7
00:00:16,160 --> 00:00:18,640
missed configurations is not enough

8
00:00:18,640 --> 00:00:20,160
and

9
00:00:20,160 --> 00:00:21,600
what we need to do to really secure

10
00:00:21,600 --> 00:00:24,640
cloud native applications and

11
00:00:24,640 --> 00:00:26,320
i know a lot of the audience may not be

12
00:00:26,320 --> 00:00:29,199
as familiar with some of the

13
00:00:29,199 --> 00:00:31,119
concepts or technologies that we'll be

14
00:00:31,119 --> 00:00:32,320
talking about so i'll give a quick

15
00:00:32,320 --> 00:00:36,399
primer and then we'll dive into it

16
00:00:39,840 --> 00:00:40,719
so

17
00:00:40,719 --> 00:00:43,760
a little bit about myself

18
00:00:43,760 --> 00:00:46,079
you know i was counting yesterday as i

19
00:00:46,079 --> 00:00:48,000
was preparing this slide as to how many

20
00:00:48,000 --> 00:00:49,520
years i've been in the industry and

21
00:00:49,520 --> 00:00:51,520
definitely makes me feel old

22
00:00:51,520 --> 00:00:54,320
uh i've been in information security for

23
00:00:54,320 --> 00:00:57,440
18 years uh long enough for

24
00:00:57,440 --> 00:00:59,120
you know the term cyber security makes

25
00:00:59,120 --> 00:01:01,599
me cringe

26
00:01:02,160 --> 00:01:03,280
started off

27
00:01:03,280 --> 00:01:05,519
doing security research focused on

28
00:01:05,519 --> 00:01:07,600
critical infrastructure security

29
00:01:07,600 --> 00:01:09,920
then moved on to academia's

30
00:01:09,920 --> 00:01:11,200
work on trusted computing and

31
00:01:11,200 --> 00:01:13,280
tamper-resistant systems and then from

32
00:01:13,280 --> 00:01:14,320
there

33
00:01:14,320 --> 00:01:16,240
joined the corporate world worked with a

34
00:01:16,240 --> 00:01:18,080
lot of large organizations especially in

35
00:01:18,080 --> 00:01:20,159
the healthcare space to help them build

36
00:01:20,159 --> 00:01:22,000
security architecture practices to

37
00:01:22,000 --> 00:01:23,119
really

38
00:01:23,119 --> 00:01:25,600
look at security architecture

39
00:01:25,600 --> 00:01:27,840
and how it fits into modern development

40
00:01:27,840 --> 00:01:30,240
life cycles and then today

41
00:01:30,240 --> 00:01:31,040
i

42
00:01:31,040 --> 00:01:31,920
am

43
00:01:31,920 --> 00:01:34,320
uh working on my own startup um i'm

44
00:01:34,320 --> 00:01:37,280
co-founder and cto of oak 9 where we're

45
00:01:37,280 --> 00:01:38,840
building automation

46
00:01:38,840 --> 00:01:40,960
capabilities to secure cloud native

47
00:01:40,960 --> 00:01:43,600
applications

48
00:01:44,079 --> 00:01:45,600
so today's talk

49
00:01:45,600 --> 00:01:46,880
is

50
00:01:46,880 --> 00:01:49,119
about

51
00:01:49,119 --> 00:01:51,280
some of the trends that we're seeing

52
00:01:51,280 --> 00:01:54,479
with cloud native applications and what

53
00:01:54,479 --> 00:01:55,759
we

54
00:01:55,759 --> 00:01:58,399
as security practitioners as developers

55
00:01:58,399 --> 00:02:00,560
as devops engineers need to do to really

56
00:02:00,560 --> 00:02:02,000
address

57
00:02:02,000 --> 00:02:03,840
security for cloud-native applications

58
00:02:03,840 --> 00:02:06,079
and where we're falling short today

59
00:02:06,079 --> 00:02:07,439
and you know what i'll do is i'll just

60
00:02:07,439 --> 00:02:09,840
start off with a very quick primer

61
00:02:09,840 --> 00:02:12,400
on infrastructure as code just so we're

62
00:02:12,400 --> 00:02:15,440
all on the same page

63
00:02:15,599 --> 00:02:17,840
so if i look back to my career and i

64
00:02:17,840 --> 00:02:20,800
just look back 10 years ago as to how

65
00:02:20,800 --> 00:02:22,160
software and infrastructure was

66
00:02:22,160 --> 00:02:23,200
delivered

67
00:02:23,200 --> 00:02:24,720
uh there were two different teams that

68
00:02:24,720 --> 00:02:27,280
had to work together to deliver that

69
00:02:27,280 --> 00:02:29,440
um software you had your software

70
00:02:29,440 --> 00:02:30,400
development teams and your

71
00:02:30,400 --> 00:02:32,000
infrastructure teams

72
00:02:32,000 --> 00:02:34,400
what has fundamentally changed today is

73
00:02:34,400 --> 00:02:37,200
now infrastructure

74
00:02:37,200 --> 00:02:40,720
is designed and delivered as code

75
00:02:40,720 --> 00:02:43,360
and more and more this infrastructures

76
00:02:43,360 --> 00:02:45,840
code is falling under the umbrella of

77
00:02:45,840 --> 00:02:47,360
software development

78
00:02:47,360 --> 00:02:49,440
and we are affording it all of the best

79
00:02:49,440 --> 00:02:51,840
practices that we've learned from a

80
00:02:51,840 --> 00:02:54,080
software development standpoint

81
00:02:54,080 --> 00:02:55,040
and

82
00:02:55,040 --> 00:02:57,440
this is allowing development teams as a

83
00:02:57,440 --> 00:02:58,239
whole

84
00:02:58,239 --> 00:03:02,000
to accelerate at incredible velocity

85
00:03:02,000 --> 00:03:03,920
so if we look at some of the surveys and

86
00:03:03,920 --> 00:03:06,239
the results from those surveys you know

87
00:03:06,239 --> 00:03:08,319
developers are seeing

88
00:03:08,319 --> 00:03:10,400
over 100x

89
00:03:10,400 --> 00:03:13,760
increase in velocity um businesses

90
00:03:13,760 --> 00:03:16,640
see more agility as well as velocity and

91
00:03:16,640 --> 00:03:18,159
fundamentally what infrastructure is

92
00:03:18,159 --> 00:03:20,319
code allows you to do is it automates

93
00:03:20,319 --> 00:03:21,760
and simplifies your infrastructure

94
00:03:21,760 --> 00:03:23,120
provisioning so if you're not familiar

95
00:03:23,120 --> 00:03:25,519
with infrastructure's code

96
00:03:25,519 --> 00:03:28,560
it is a declarative way for you to

97
00:03:28,560 --> 00:03:30,560
define your

98
00:03:30,560 --> 00:03:32,560
infrastructure and the overall

99
00:03:32,560 --> 00:03:34,159
architecture that that infrastructure

100
00:03:34,159 --> 00:03:36,159
represents

101
00:03:36,159 --> 00:03:37,200
and

102
00:03:37,200 --> 00:03:38,080
it

103
00:03:38,080 --> 00:03:39,599
provides organizations with a lot of

104
00:03:39,599 --> 00:03:41,200
benefits um

105
00:03:41,200 --> 00:03:42,959
besides you know kind of simplifying and

106
00:03:42,959 --> 00:03:44,319
automating your infrastructure

107
00:03:44,319 --> 00:03:47,120
provisioning it's repeatable scalable

108
00:03:47,120 --> 00:03:50,000
uh version controlled modular there's

109
00:03:50,000 --> 00:03:51,599
there's a lot of benefits in just

110
00:03:51,599 --> 00:03:52,879
maintaining

111
00:03:52,879 --> 00:03:57,359
uh complex architectures this way

112
00:03:57,519 --> 00:03:58,799
one of the reasons why most

113
00:03:58,799 --> 00:04:00,720
organizations shift infrastructures code

114
00:04:00,720 --> 00:04:02,879
is because you know a lot of companies

115
00:04:02,879 --> 00:04:04,000
over the last

116
00:04:04,000 --> 00:04:05,920
you know 15 years

117
00:04:05,920 --> 00:04:08,720
as they started moving towards

118
00:04:08,720 --> 00:04:11,200
the cloud and really shifting uh their

119
00:04:11,200 --> 00:04:13,519
workloads in the cloud initially you

120
00:04:13,519 --> 00:04:14,879
know most organizations go through a

121
00:04:14,879 --> 00:04:16,160
lift and shift

122
00:04:16,160 --> 00:04:18,798
approach where they're really moving

123
00:04:18,798 --> 00:04:20,798
from on-premise data centers and moving

124
00:04:20,798 --> 00:04:23,040
vms into the cloud

125
00:04:23,040 --> 00:04:24,639
and when you take that approach

126
00:04:24,639 --> 00:04:26,479
initially right you don't necessarily

127
00:04:26,479 --> 00:04:28,800
see all the benefits of

128
00:04:28,800 --> 00:04:30,800
cloud capabilities because you're not

129
00:04:30,800 --> 00:04:32,880
seeing that velocity and agility quite

130
00:04:32,880 --> 00:04:33,680
yet

131
00:04:33,680 --> 00:04:35,440
and so what organizations do is they

132
00:04:35,440 --> 00:04:37,520
start breaking up their monoliths into

133
00:04:37,520 --> 00:04:40,400
microservice based architectures

134
00:04:40,400 --> 00:04:42,479
and really leveraging the native

135
00:04:42,479 --> 00:04:44,639
capabilities that the cloud service

136
00:04:44,639 --> 00:04:46,320
providers offer

137
00:04:46,320 --> 00:04:48,160
and that's where these organizations

138
00:04:48,160 --> 00:04:50,000
really start seeing

139
00:04:50,000 --> 00:04:51,120
um

140
00:04:51,120 --> 00:04:51,919
that

141
00:04:51,919 --> 00:04:54,080
those benefits around velocity and

142
00:04:54,080 --> 00:04:55,759
agility

143
00:04:55,759 --> 00:04:57,440
but when you move towards these cloud

144
00:04:57,440 --> 00:04:59,120
native architectures

145
00:04:59,120 --> 00:05:01,360
what fundamentally happens is your

146
00:05:01,360 --> 00:05:03,840
applications become more complex they're

147
00:05:03,840 --> 00:05:05,360
harder to manage

148
00:05:05,360 --> 00:05:07,280
and from an infrastructure standpoint

149
00:05:07,280 --> 00:05:09,520
right if you were doing click ops

150
00:05:09,520 --> 00:05:12,400
to deploy all of these different cloud

151
00:05:12,400 --> 00:05:15,440
native capabilities it becomes unwieldy

152
00:05:15,440 --> 00:05:17,919
you would need a incredibly large

153
00:05:17,919 --> 00:05:19,680
infrastructure team to support that and

154
00:05:19,680 --> 00:05:20,960
so this

155
00:05:20,960 --> 00:05:22,639
dress code really helps automate and

156
00:05:22,639 --> 00:05:25,280
simplify that provisioning

157
00:05:25,280 --> 00:05:27,840
and helps you move faster and deploy

158
00:05:27,840 --> 00:05:29,440
infrastructure in a version controlled

159
00:05:29,440 --> 00:05:31,680
way

160
00:05:32,479 --> 00:05:34,479
and if we look at what cloud native

161
00:05:34,479 --> 00:05:36,160
application architectures look like

162
00:05:36,160 --> 00:05:37,120
today

163
00:05:37,120 --> 00:05:39,120
they're incredibly complex

164
00:05:39,120 --> 00:05:41,919
you know the the other the advantage of

165
00:05:41,919 --> 00:05:44,000
using infrastructure as code is it lets

166
00:05:44,000 --> 00:05:45,680
you manage that complexity but at the

167
00:05:45,680 --> 00:05:47,600
same time now you can build even more

168
00:05:47,600 --> 00:05:49,600
complex architectures and this is an

169
00:05:49,600 --> 00:05:53,919
example that i pulled from a blog post

170
00:05:53,919 --> 00:05:55,120
this is a

171
00:05:55,120 --> 00:05:59,199
architecture of a social media platform

172
00:05:59,199 --> 00:06:00,080
and

173
00:06:00,080 --> 00:06:02,639
the details of it are not as relevant as

174
00:06:02,639 --> 00:06:04,720
you know anyone looking at this

175
00:06:04,720 --> 00:06:07,360
particular architecture can see

176
00:06:07,360 --> 00:06:08,880
that there's a lot of complexity there's

177
00:06:08,880 --> 00:06:10,240
a lot of different components they're

178
00:06:10,240 --> 00:06:13,520
all interacting with each other

179
00:06:13,520 --> 00:06:16,240
and if you are a security architect

180
00:06:16,240 --> 00:06:18,319
assigned to assess this application

181
00:06:18,319 --> 00:06:21,600
architecture it is a daunting task

182
00:06:21,600 --> 00:06:23,199
to understand

183
00:06:23,199 --> 00:06:25,120
all of the different information flows

184
00:06:25,120 --> 00:06:26,800
that are possible here

185
00:06:26,800 --> 00:06:27,919
you know threat modeling this

186
00:06:27,919 --> 00:06:30,720
application architecture would be um

187
00:06:30,720 --> 00:06:32,479
would be quite

188
00:06:32,479 --> 00:06:34,720
quite the endeavor and that's

189
00:06:34,720 --> 00:06:36,800
that's fundamentally the challenge that

190
00:06:36,800 --> 00:06:38,639
security organizations are facing today

191
00:06:38,639 --> 00:06:40,720
and now

192
00:06:40,720 --> 00:06:42,560
this entire cloud native architecture

193
00:06:42,560 --> 00:06:45,199
today is actually represented in

194
00:06:45,199 --> 00:06:47,039
infrastructure as code

195
00:06:47,039 --> 00:06:48,880
and if i were to just take a rough

196
00:06:48,880 --> 00:06:51,039
estimate of what this application

197
00:06:51,039 --> 00:06:52,479
architecture would look like based on

198
00:06:52,479 --> 00:06:54,080
kind of what i see with my customers

199
00:06:54,080 --> 00:06:57,120
today this would easily be between 10

200
00:06:57,120 --> 00:06:59,360
000 to 50 000 lines of infrastructure as

201
00:06:59,360 --> 00:07:01,680
code and what's missing in in this

202
00:07:01,680 --> 00:07:03,759
application architecture is a number of

203
00:07:03,759 --> 00:07:05,280
different views of this application

204
00:07:05,280 --> 00:07:08,960
architecture so we're missing um

205
00:07:08,960 --> 00:07:10,479
you know configurations around the

206
00:07:10,479 --> 00:07:13,120
network we're missing configurations

207
00:07:13,120 --> 00:07:15,680
around identity and access management

208
00:07:15,680 --> 00:07:18,720
user provisioning

209
00:07:18,800 --> 00:07:19,919
and so

210
00:07:19,919 --> 00:07:23,440
when it's all put together this would be

211
00:07:23,440 --> 00:07:26,240
an incredibly complex infrastructure as

212
00:07:26,240 --> 00:07:29,560
code deployment

213
00:07:32,639 --> 00:07:35,120
and this is fundamentally creating

214
00:07:35,120 --> 00:07:36,960
challenges for security teams to really

215
00:07:36,960 --> 00:07:39,759
scale to support this trend

216
00:07:39,759 --> 00:07:41,680
how do security teams

217
00:07:41,680 --> 00:07:44,160
right get engaged and provide security

218
00:07:44,160 --> 00:07:45,680
guidance to that application

219
00:07:45,680 --> 00:07:48,400
architecture and impact its security

220
00:07:48,400 --> 00:07:50,560
posture

221
00:07:50,560 --> 00:07:52,240
you know most of what i see with my

222
00:07:52,240 --> 00:07:54,720
customers and this is prevalent across

223
00:07:54,720 --> 00:07:57,440
the industry is you know the the

224
00:07:57,440 --> 00:08:00,160
the most predominant approach

225
00:08:00,160 --> 00:08:02,479
to allowing security teams to scale

226
00:08:02,479 --> 00:08:04,440
today is really

227
00:08:04,440 --> 00:08:06,400
misconfiguration checking

228
00:08:06,400 --> 00:08:07,680
so i'll define what i mean by

229
00:08:07,680 --> 00:08:09,440
misconfiguration checking there's a lot

230
00:08:09,440 --> 00:08:12,720
of different open source and commercial

231
00:08:12,720 --> 00:08:14,240
you know tools that

232
00:08:14,240 --> 00:08:15,840
help you do this

233
00:08:15,840 --> 00:08:17,840
but essentially what misconfiguration

234
00:08:17,840 --> 00:08:20,720
checking does is it queries for specific

235
00:08:20,720 --> 00:08:22,080
known configurations of that

236
00:08:22,080 --> 00:08:23,440
infrastructure

237
00:08:23,440 --> 00:08:25,599
uh if it's looking at infrastructure as

238
00:08:25,599 --> 00:08:27,039
code it's doing keyword based searches

239
00:08:27,039 --> 00:08:29,120
to find that configuration

240
00:08:29,120 --> 00:08:30,560
and then check to see that is set to the

241
00:08:30,560 --> 00:08:32,559
right value so as an example

242
00:08:32,559 --> 00:08:35,919
you can search for http protocol in your

243
00:08:35,919 --> 00:08:37,599
infrastructure as code and make sure

244
00:08:37,599 --> 00:08:39,519
that you know that key is set to the

245
00:08:39,519 --> 00:08:42,000
value https

246
00:08:42,000 --> 00:08:42,880
um

247
00:08:42,880 --> 00:08:44,080
and what

248
00:08:44,080 --> 00:08:45,839
what a lot of these approaches then do

249
00:08:45,839 --> 00:08:48,080
is they create hundreds and thousands of

250
00:08:48,080 --> 00:08:50,160
these rule sets for each configuration

251
00:08:50,160 --> 00:08:52,000
they want to check for each type of

252
00:08:52,000 --> 00:08:52,839
cloud

253
00:08:52,839 --> 00:08:55,360
resource and so you have this kind of

254
00:08:55,360 --> 00:08:58,399
static database of rule sets that you

255
00:08:58,399 --> 00:09:00,160
can then check these application

256
00:09:00,160 --> 00:09:01,839
architectures against

257
00:09:01,839 --> 00:09:02,880
and

258
00:09:02,880 --> 00:09:05,120
you know this is an incredibly important

259
00:09:05,120 --> 00:09:06,160
endeavor

260
00:09:06,160 --> 00:09:10,080
because as you guys are well aware

261
00:09:10,080 --> 00:09:12,560
uh we continuously see new cloud

262
00:09:12,560 --> 00:09:14,399
breaches and

263
00:09:14,399 --> 00:09:15,519
you know

264
00:09:15,519 --> 00:09:16,640
uh

265
00:09:16,640 --> 00:09:18,560
almost every other day you hear about an

266
00:09:18,560 --> 00:09:21,440
s3 bucket that was inadvertently

267
00:09:21,440 --> 00:09:23,279
externally exposed

268
00:09:23,279 --> 00:09:25,279
and you know it's it's a handful of

269
00:09:25,279 --> 00:09:27,519
simple flags that control whether that

270
00:09:27,519 --> 00:09:29,360
s3 bucket is internally exposed or

271
00:09:29,360 --> 00:09:31,120
externally exposed

272
00:09:31,120 --> 00:09:33,120
and these types of misconfiguration

273
00:09:33,120 --> 00:09:35,440
checking approaches can find you know

274
00:09:35,440 --> 00:09:38,080
find these really you know

275
00:09:38,080 --> 00:09:41,279
basic hygiene mistakes that developers

276
00:09:41,279 --> 00:09:43,519
often make in in a rush to deploy

277
00:09:43,519 --> 00:09:44,480
something

278
00:09:44,480 --> 00:09:46,240
and they can catch you know a lot of

279
00:09:46,240 --> 00:09:48,839
critical issues before they get

280
00:09:48,839 --> 00:09:51,120
deployed uh and

281
00:09:51,120 --> 00:09:52,720
if you're not

282
00:09:52,720 --> 00:09:55,360
using tls for your communication

283
00:09:55,360 --> 00:09:56,480
security

284
00:09:56,480 --> 00:09:59,360
and you're allowing http traffic

285
00:09:59,360 --> 00:10:02,079
directly that more more more likely

286
00:10:02,079 --> 00:10:03,360
means that you're not meeting your

287
00:10:03,360 --> 00:10:05,760
compliance requirements around the

288
00:10:05,760 --> 00:10:07,519
data that's being communicated from one

289
00:10:07,519 --> 00:10:09,440
endpoint to another and so you know

290
00:10:09,440 --> 00:10:11,360
these approaches then are also really

291
00:10:11,360 --> 00:10:13,200
effective and then telling you

292
00:10:13,200 --> 00:10:16,839
in the you know whenever they identify a

293
00:10:16,839 --> 00:10:18,880
issue that

294
00:10:18,880 --> 00:10:20,399
more than likely

295
00:10:20,399 --> 00:10:22,240
creates a

296
00:10:22,240 --> 00:10:24,160
challenge in meetings

297
00:10:24,160 --> 00:10:28,240
some basic compliance requirements

298
00:10:30,240 --> 00:10:33,200
so i want to talk a little bit about why

299
00:10:33,200 --> 00:10:35,440
misconfiguration checking

300
00:10:35,440 --> 00:10:37,120
is not enough and why

301
00:10:37,120 --> 00:10:38,800
we really need to take

302
00:10:38,800 --> 00:10:41,440
a more security engineering

303
00:10:41,440 --> 00:10:43,760
approach to the broader problem that

304
00:10:43,760 --> 00:10:45,040
we're seeing and i'll talk about some of

305
00:10:45,040 --> 00:10:47,839
the trends in the space

306
00:10:50,160 --> 00:10:51,600
so

307
00:10:51,600 --> 00:10:53,920
as we look at modern application

308
00:10:53,920 --> 00:10:56,000
architectures today in the cloud what we

309
00:10:56,000 --> 00:10:58,160
are seeing is that the complexity and

310
00:10:58,160 --> 00:10:59,839
the size of these application

311
00:10:59,839 --> 00:11:02,160
architectures is growing you know if you

312
00:11:02,160 --> 00:11:04,000
measure this application architecture

313
00:11:04,000 --> 00:11:07,519
based on you know an entropy measurement

314
00:11:07,519 --> 00:11:10,480
the overall entropy of these cloud

315
00:11:10,480 --> 00:11:12,160
architectures are growing there's more

316
00:11:12,160 --> 00:11:14,079
and more connectedness

317
00:11:14,079 --> 00:11:15,920
across the different components of these

318
00:11:15,920 --> 00:11:18,160
application architectures

319
00:11:18,160 --> 00:11:19,040
and

320
00:11:19,040 --> 00:11:21,279
this exacerbates

321
00:11:21,279 --> 00:11:22,480
an already

322
00:11:22,480 --> 00:11:24,240
existing challenge

323
00:11:24,240 --> 00:11:26,560
for security teams most security teams

324
00:11:26,560 --> 00:11:28,480
that i've worked with

325
00:11:28,480 --> 00:11:30,720
you know we were constantly firefighting

326
00:11:30,720 --> 00:11:33,519
we were going from one security issue to

327
00:11:33,519 --> 00:11:35,920
the next and and you never really had

328
00:11:35,920 --> 00:11:38,480
the time to strategically think about

329
00:11:38,480 --> 00:11:40,640
the need for security

330
00:11:40,640 --> 00:11:41,519
there are

331
00:11:41,519 --> 00:11:43,600
you know i think estimates suggest

332
00:11:43,600 --> 00:11:46,320
anywhere from like 1.5 to 2 million

333
00:11:46,320 --> 00:11:50,000
unfilled jobs in security today

334
00:11:50,000 --> 00:11:52,720
and most organizations are struggling

335
00:11:52,720 --> 00:11:54,000
and as

336
00:11:54,000 --> 00:11:55,519
development teams

337
00:11:55,519 --> 00:11:56,959
are really shifting towards these

338
00:11:56,959 --> 00:11:58,560
cloud-native architectures and building

339
00:11:58,560 --> 00:12:01,519
more complex architectures it is really

340
00:12:01,519 --> 00:12:03,440
exacerbating that problem for security

341
00:12:03,440 --> 00:12:05,360
teams

342
00:12:05,360 --> 00:12:06,800
the other challenge that you see is that

343
00:12:06,800 --> 00:12:08,560
the cloud native capabilities are

344
00:12:08,560 --> 00:12:11,040
rapidly evolving so all of the security

345
00:12:11,040 --> 00:12:12,240
professionals

346
00:12:12,240 --> 00:12:14,480
uh in the audience today

347
00:12:14,480 --> 00:12:16,240
you know it's an incredibly hard

348
00:12:16,240 --> 00:12:18,399
challenge to then keep up what the

349
00:12:18,399 --> 00:12:19,839
different cloud service provider

350
00:12:19,839 --> 00:12:21,360
capabilities

351
00:12:21,360 --> 00:12:22,720
and how

352
00:12:22,720 --> 00:12:24,160
how they're evolving what security

353
00:12:24,160 --> 00:12:26,959
capabilities they have what are the best

354
00:12:26,959 --> 00:12:29,360
you know design patterns to follow to

355
00:12:29,360 --> 00:12:30,399
really

356
00:12:30,399 --> 00:12:32,320
approach security for a particular use

357
00:12:32,320 --> 00:12:33,680
case

358
00:12:33,680 --> 00:12:35,279
in the cloud

359
00:12:35,279 --> 00:12:37,120
and

360
00:12:37,120 --> 00:12:38,560
you know the other challenge that we're

361
00:12:38,560 --> 00:12:40,320
seeing is that more and more development

362
00:12:40,320 --> 00:12:42,560
teams are being empowered to take

363
00:12:42,560 --> 00:12:44,560
ownership of the entire release

364
00:12:44,560 --> 00:12:46,639
management life cycle all the way you

365
00:12:46,639 --> 00:12:47,519
know

366
00:12:47,519 --> 00:12:50,160
from design coding to deployment and

367
00:12:50,160 --> 00:12:53,760
then the feedback loop back and as well

368
00:12:53,760 --> 00:12:55,680
as observability and so

369
00:12:55,680 --> 00:12:57,760
development teams are really taking

370
00:12:57,760 --> 00:13:01,120
ownership of that entire life cycle

371
00:13:01,120 --> 00:13:03,200
and with that ownership they're getting

372
00:13:03,200 --> 00:13:04,959
the freedom to pick the cloud service

373
00:13:04,959 --> 00:13:07,120
providers they want to use the cloud

374
00:13:07,120 --> 00:13:09,440
capabilities they want to use

375
00:13:09,440 --> 00:13:12,079
and so the onus on the security team

376
00:13:12,079 --> 00:13:13,040
then

377
00:13:13,040 --> 00:13:16,000
is to really become familiar with all of

378
00:13:16,000 --> 00:13:17,519
the different technologies that they may

379
00:13:17,519 --> 00:13:18,720
be using in their application

380
00:13:18,720 --> 00:13:21,120
architectures and as

381
00:13:21,120 --> 00:13:22,800
cloud-native capabilities continue to

382
00:13:22,800 --> 00:13:24,639
evolve that's

383
00:13:24,639 --> 00:13:27,040
a just a continuous learning challenge

384
00:13:27,040 --> 00:13:28,880
that all of us face as security

385
00:13:28,880 --> 00:13:30,959
architects and security engineers

386
00:13:30,959 --> 00:13:32,880
and i'll give you a data point

387
00:13:32,880 --> 00:13:36,880
last year in uh 2021 i believe there

388
00:13:36,880 --> 00:13:39,199
were four days where aws didn't make

389
00:13:39,199 --> 00:13:41,680
changes to their api which fundamentally

390
00:13:41,680 --> 00:13:44,079
means like their capabilities and their

391
00:13:44,079 --> 00:13:46,639
offerings are continuously changing and

392
00:13:46,639 --> 00:13:49,519
evolving and

393
00:13:49,519 --> 00:13:50,399
it

394
00:13:50,399 --> 00:13:51,680
creates

395
00:13:51,680 --> 00:13:54,000
this

396
00:13:54,480 --> 00:13:57,600
challenge for security engineers to now

397
00:13:57,600 --> 00:14:00,560
stay abreast of all these changes

398
00:14:00,560 --> 00:14:02,720
and finally you know i talked about how

399
00:14:02,720 --> 00:14:05,199
all of these application architectures

400
00:14:05,199 --> 00:14:07,519
are now represented as code

401
00:14:07,519 --> 00:14:09,199
and what that does is it allows

402
00:14:09,199 --> 00:14:11,199
development teams to actually deliver

403
00:14:11,199 --> 00:14:14,880
infrastructure in an agile way

404
00:14:14,880 --> 00:14:17,199
so from release to release from sprint

405
00:14:17,199 --> 00:14:20,240
to sprint from deployment to deployment

406
00:14:20,240 --> 00:14:23,600
these developers are now able to deliver

407
00:14:23,600 --> 00:14:26,240
infrastructure capabilities

408
00:14:26,240 --> 00:14:28,160
iteratively

409
00:14:28,160 --> 00:14:31,360
as customers come to them and say hey

410
00:14:31,360 --> 00:14:33,760
i have a new requirement

411
00:14:33,760 --> 00:14:36,240
and uh i would like you know i would

412
00:14:36,240 --> 00:14:38,320
like you to perform analytics on this

413
00:14:38,320 --> 00:14:41,199
data that you are storing for me in this

414
00:14:41,199 --> 00:14:43,440
application

415
00:14:43,440 --> 00:14:45,199
unlike 10 years ago where the

416
00:14:45,199 --> 00:14:46,560
development teams that i worked with

417
00:14:46,560 --> 00:14:48,959
right would probably need you know a

418
00:14:48,959 --> 00:14:50,480
two-month runway to deliver on a

419
00:14:50,480 --> 00:14:53,760
capability like that today you know

420
00:14:53,760 --> 00:14:55,920
experienced development teams can turn

421
00:14:55,920 --> 00:14:57,600
turn around a proof of value within a

422
00:14:57,600 --> 00:14:58,880
day

423
00:14:58,880 --> 00:15:01,360
and and that type of speed and the rate

424
00:15:01,360 --> 00:15:02,880
of change that they're able to make to

425
00:15:02,880 --> 00:15:05,120
these application architectures creates

426
00:15:05,120 --> 00:15:07,199
an incredible challenge for security

427
00:15:07,199 --> 00:15:08,480
teams

428
00:15:08,480 --> 00:15:10,000
and there's a lot of reasons why these

429
00:15:10,000 --> 00:15:11,839
application architectures continue to

430
00:15:11,839 --> 00:15:13,040
evolve

431
00:15:13,040 --> 00:15:15,440
so so one example that i just gave is

432
00:15:15,440 --> 00:15:17,279
you know business requirements are

433
00:15:17,279 --> 00:15:18,720
changing

434
00:15:18,720 --> 00:15:20,320
another example

435
00:15:20,320 --> 00:15:22,480
is where the technology requirements are

436
00:15:22,480 --> 00:15:24,800
changing and they want to use new

437
00:15:24,800 --> 00:15:26,480
technologies integrate new technologies

438
00:15:26,480 --> 00:15:29,040
into the application architecture

439
00:15:29,040 --> 00:15:31,360
which may fundamentally

440
00:15:31,360 --> 00:15:33,600
you know impact the security posture of

441
00:15:33,600 --> 00:15:35,600
the application

442
00:15:35,600 --> 00:15:37,759
another example is you know security is

443
00:15:37,759 --> 00:15:41,440
driving the evolution because um

444
00:15:41,440 --> 00:15:43,600
security requirements are changing um

445
00:15:43,600 --> 00:15:44,880
there may be new compliance and

446
00:15:44,880 --> 00:15:46,320
regulatory needs from a security

447
00:15:46,320 --> 00:15:48,000
standpoint that this application needs

448
00:15:48,000 --> 00:15:48,959
to meet

449
00:15:48,959 --> 00:15:50,880
it may be that um

450
00:15:50,880 --> 00:15:52,240
you know the threat landscape has

451
00:15:52,240 --> 00:15:56,000
changed and the types of architectures

452
00:15:56,000 --> 00:15:59,279
that security would like to adopt

453
00:15:59,279 --> 00:16:01,440
are evolving

454
00:16:01,440 --> 00:16:02,480
and

455
00:16:02,480 --> 00:16:04,480
and so there's just a whole host of

456
00:16:04,480 --> 00:16:06,240
reasons why these applications are

457
00:16:06,240 --> 00:16:07,920
evolving but as they continue to evolve

458
00:16:07,920 --> 00:16:09,360
right it creates a challenge for

459
00:16:09,360 --> 00:16:11,040
under-resourced security teams to keep

460
00:16:11,040 --> 00:16:12,959
up and assess the changes that are

461
00:16:12,959 --> 00:16:14,079
happening to these application

462
00:16:14,079 --> 00:16:15,680
architectures

463
00:16:15,680 --> 00:16:17,600
and and you know one other point before

464
00:16:17,600 --> 00:16:19,120
i before i kind of

465
00:16:19,120 --> 00:16:20,240
um

466
00:16:20,240 --> 00:16:21,440
keep going is

467
00:16:21,440 --> 00:16:23,519
that these

468
00:16:23,519 --> 00:16:25,600
when changes are made to the application

469
00:16:25,600 --> 00:16:26,959
architecture these are foundational

470
00:16:26,959 --> 00:16:28,639
changes that

471
00:16:28,639 --> 00:16:30,560
if they lead to security issues there

472
00:16:30,560 --> 00:16:32,560
are inherent risks in that application

473
00:16:32,560 --> 00:16:34,880
potentially and

474
00:16:34,880 --> 00:16:37,199
not checking for these inherent risks

475
00:16:37,199 --> 00:16:38,800
and not addressing these inherent risks

476
00:16:38,800 --> 00:16:41,600
before deployment could lead to you know

477
00:16:41,600 --> 00:16:43,440
severe consequences for your business

478
00:16:43,440 --> 00:16:46,560
and for your application

479
00:16:48,560 --> 00:16:50,240
so i want to take a quick detour and

480
00:16:50,240 --> 00:16:52,240
talk about complex systems and emergent

481
00:16:52,240 --> 00:16:54,320
properties and we'll talk about ants for

482
00:16:54,320 --> 00:16:57,040
a quick second

483
00:16:57,040 --> 00:16:59,040
so you know if you were to take an ant

484
00:16:59,040 --> 00:17:01,440
and put it on a flat surface

485
00:17:01,440 --> 00:17:03,120
uh let her walk around you know its

486
00:17:03,120 --> 00:17:05,280
actions would be erratic its actions

487
00:17:05,280 --> 00:17:07,359
would be random eventually it would tie

488
00:17:07,359 --> 00:17:09,520
itself out and without food it would

489
00:17:09,520 --> 00:17:11,119
likely die

490
00:17:11,119 --> 00:17:13,439
if you took 100 ants you would probably

491
00:17:13,439 --> 00:17:15,919
see a very similar outcome but now if

492
00:17:15,919 --> 00:17:17,599
you had you know hundreds of thousands

493
00:17:17,599 --> 00:17:19,839
of ants or millions of ants

494
00:17:19,839 --> 00:17:21,439
you would see something different you

495
00:17:21,439 --> 00:17:25,280
know together these ants create a system

496
00:17:25,280 --> 00:17:26,319
and

497
00:17:26,319 --> 00:17:28,160
they're able to solve incredible

498
00:17:28,160 --> 00:17:29,919
challenges

499
00:17:29,919 --> 00:17:31,840
this is an example of ants creating a

500
00:17:31,840 --> 00:17:32,960
bridge

501
00:17:32,960 --> 00:17:35,039
but you know even things like ants

502
00:17:35,039 --> 00:17:37,360
moving information um

503
00:17:37,360 --> 00:17:39,679
you know ants figuring out

504
00:17:39,679 --> 00:17:40,480
where

505
00:17:40,480 --> 00:17:42,559
food is potentially in their environment

506
00:17:42,559 --> 00:17:45,840
they're incredibly intelligent systems

507
00:17:45,840 --> 00:17:48,000
that get created but individually these

508
00:17:48,000 --> 00:17:50,400
ants are not remarkable it's together

509
00:17:50,400 --> 00:17:52,320
and collectively where you see the

510
00:17:52,320 --> 00:17:54,640
emergent properties of intelligence that

511
00:17:54,640 --> 00:17:56,480
i'm referring to

512
00:17:56,480 --> 00:17:58,640
and

513
00:17:58,640 --> 00:18:01,600
you know security in a similar way is an

514
00:18:01,600 --> 00:18:05,600
emergent property of a complex system

515
00:18:06,400 --> 00:18:09,679
this is from nist 800 uh 160 it's the

516
00:18:09,679 --> 00:18:11,840
system security engineering

517
00:18:11,840 --> 00:18:14,559
special publication and

518
00:18:14,559 --> 00:18:15,679
they're one of the first kind of

519
00:18:15,679 --> 00:18:17,120
industry bodies

520
00:18:17,120 --> 00:18:19,360
to really highlight this fact and and

521
00:18:19,360 --> 00:18:21,120
talk about it and it's a great read if

522
00:18:21,120 --> 00:18:22,720
you're a security engineer you know i

523
00:18:22,720 --> 00:18:25,039
highly recommend it but i'll just read

524
00:18:25,039 --> 00:18:27,360
one excerpt from um from this

525
00:18:27,360 --> 00:18:29,760
publication so security like safety and

526
00:18:29,760 --> 00:18:31,360
other system quality properties is an

527
00:18:31,360 --> 00:18:33,600
emergent property of the system

528
00:18:33,600 --> 00:18:35,440
system security is the application of

529
00:18:35,440 --> 00:18:36,960
engineering and management principles

530
00:18:36,960 --> 00:18:39,520
concepts criteria and techniques to

531
00:18:39,520 --> 00:18:41,280
optimize security within the constraints

532
00:18:41,280 --> 00:18:43,840
of operational effectiveness time cost

533
00:18:43,840 --> 00:18:45,679
throughout all stages of the system life

534
00:18:45,679 --> 00:18:47,520
cycle

535
00:18:47,520 --> 00:18:49,679
and

536
00:18:49,679 --> 00:18:51,600
as we look at

537
00:18:51,600 --> 00:18:54,480
the the complexity and security being an

538
00:18:54,480 --> 00:18:57,200
emergent property emerging from that

539
00:18:57,200 --> 00:18:58,960
complexity

540
00:18:58,960 --> 00:18:59,840
it's

541
00:18:59,840 --> 00:19:01,360
really important that we as security

542
00:19:01,360 --> 00:19:03,760
engineers you know have a grasp of that

543
00:19:03,760 --> 00:19:05,520
and we understand kind of how to deal

544
00:19:05,520 --> 00:19:07,600
with this as

545
00:19:07,600 --> 00:19:09,280
the challenges that we face continue to

546
00:19:09,280 --> 00:19:11,440
get more and more complex

547
00:19:11,440 --> 00:19:13,360
and i'll take a

548
00:19:13,360 --> 00:19:15,120
uh i'll continue on this quick detour

549
00:19:15,120 --> 00:19:17,039
and just um you know talk about

550
00:19:17,039 --> 00:19:18,480
different types of emergence and how

551
00:19:18,480 --> 00:19:20,720
security kind of falls into that so

552
00:19:20,720 --> 00:19:22,799
you know they're

553
00:19:22,799 --> 00:19:25,600
the the study of emergence as a topic is

554
00:19:25,600 --> 00:19:28,240
something that is still ongoing um this

555
00:19:28,240 --> 00:19:29,360
is from

556
00:19:29,360 --> 00:19:30,559
a

557
00:19:30,559 --> 00:19:32,480
some academic research at indiana

558
00:19:32,480 --> 00:19:34,640
university and i just want to kind of

559
00:19:34,640 --> 00:19:36,480
break down how they

560
00:19:36,480 --> 00:19:38,240
uh talk about different types of

561
00:19:38,240 --> 00:19:39,600
emergence and where security really

562
00:19:39,600 --> 00:19:42,000
falls in this so if we if we think about

563
00:19:42,000 --> 00:19:43,600
kind of the simplest form of emergence

564
00:19:43,600 --> 00:19:45,280
which is what they call type one

565
00:19:45,280 --> 00:19:47,520
purposeful interaction

566
00:19:47,520 --> 00:19:49,919
this is really characterized by simple

567
00:19:49,919 --> 00:19:51,919
intentional designed interactions

568
00:19:51,919 --> 00:19:54,080
between components of the system

569
00:19:54,080 --> 00:19:54,960
and

570
00:19:54,960 --> 00:19:56,559
you know most of the security problems

571
00:19:56,559 --> 00:19:58,640
that we face today really fall into that

572
00:19:58,640 --> 00:20:00,400
type one bucket so you know you have two

573
00:20:00,400 --> 00:20:02,240
components that are interacting

574
00:20:02,240 --> 00:20:04,240
uh if you need to

575
00:20:04,240 --> 00:20:06,880
think about the potential attacks

576
00:20:06,880 --> 00:20:08,320
associated with those components if you

577
00:20:08,320 --> 00:20:09,919
need to think about the

578
00:20:09,919 --> 00:20:11,280
the defensive measures that you might

579
00:20:11,280 --> 00:20:13,760
take you know it really falls into that

580
00:20:13,760 --> 00:20:16,880
type one category um

581
00:20:16,880 --> 00:20:18,320
but as you move

582
00:20:18,320 --> 00:20:21,039
to you know kind of

583
00:20:21,039 --> 00:20:24,000
higher levels of emergence where type 2

584
00:20:24,000 --> 00:20:26,400
really starts talking about

585
00:20:26,400 --> 00:20:27,679
you know different entities in the

586
00:20:27,679 --> 00:20:29,520
system really independently interacting

587
00:20:29,520 --> 00:20:30,960
with other entities and receiving

588
00:20:30,960 --> 00:20:33,200
feedback and creating more complexity

589
00:20:33,200 --> 00:20:34,640
now we start seeing

590
00:20:34,640 --> 00:20:36,000
more complexity

591
00:20:36,000 --> 00:20:37,360
and as

592
00:20:37,360 --> 00:20:39,039
we are moving towards cloud-native

593
00:20:39,039 --> 00:20:41,840
architectures and we are moving towards

594
00:20:41,840 --> 00:20:44,720
um you know interdependent interactive

595
00:20:44,720 --> 00:20:46,000
systems

596
00:20:46,000 --> 00:20:47,760
more and more right we are seeing

597
00:20:47,760 --> 00:20:49,679
security

598
00:20:49,679 --> 00:20:51,679
use cases that fall into that type 2

599
00:20:51,679 --> 00:20:53,120
category

600
00:20:53,120 --> 00:20:55,280
uh and as an example like the ants

601
00:20:55,280 --> 00:20:57,039
example that i was giving where ants

602
00:20:57,039 --> 00:21:00,000
fall into lying use pheromones to decide

603
00:21:00,000 --> 00:21:00,840
how

604
00:21:00,840 --> 00:21:04,799
um you know where to go and and how to

605
00:21:04,799 --> 00:21:07,120
line up in a formation

606
00:21:07,120 --> 00:21:09,039
that is an example of

607
00:21:09,039 --> 00:21:11,600
of type two emergence

608
00:21:11,600 --> 00:21:13,360
and then finally type three is an

609
00:21:13,360 --> 00:21:15,440
example where you know you have multiple

610
00:21:15,440 --> 00:21:17,360
types of feedback that's happening on

611
00:21:17,360 --> 00:21:19,679
different time scales

612
00:21:19,679 --> 00:21:21,360
and

613
00:21:21,360 --> 00:21:22,880
um

614
00:21:22,880 --> 00:21:24,799
when we look at threat modeling and we

615
00:21:24,799 --> 00:21:26,080
look at you know modeling our

616
00:21:26,080 --> 00:21:28,480
adversaries and really adding that human

617
00:21:28,480 --> 00:21:30,400
element into

618
00:21:30,400 --> 00:21:33,360
the overall assessment of security

619
00:21:33,360 --> 00:21:35,679
that's that's where you know security

620
00:21:35,679 --> 00:21:38,240
challenges start moving towards that

621
00:21:38,240 --> 00:21:40,480
type three model

622
00:21:40,480 --> 00:21:42,400
another example that i can give you here

623
00:21:42,400 --> 00:21:45,840
is you know financial markets where

624
00:21:46,640 --> 00:21:48,320
you know feedback loops positive

625
00:21:48,320 --> 00:21:51,200
feedback loops create situations where

626
00:21:51,200 --> 00:21:52,799
there's a herd mentality and a

627
00:21:52,799 --> 00:21:54,640
particular asset class keeps going up in

628
00:21:54,640 --> 00:21:56,799
price but eventually negative feedback

629
00:21:56,799 --> 00:22:00,639
loops over time scales

630
00:22:01,200 --> 00:22:02,880
you know have a higher impact than the

631
00:22:02,880 --> 00:22:05,039
positive feedback loops and the bubble

632
00:22:05,039 --> 00:22:07,360
bursts and prices fall

633
00:22:07,360 --> 00:22:08,480
and

634
00:22:08,480 --> 00:22:10,480
examples you know similar

635
00:22:10,480 --> 00:22:12,960
in terms of you know security or really

636
00:22:12,960 --> 00:22:14,640
you know the cat and mouse game that we

637
00:22:14,640 --> 00:22:17,039
play between defenders and adversaries

638
00:22:17,039 --> 00:22:18,960
is is is a

639
00:22:18,960 --> 00:22:21,360
example of this multi-source feedback

640
00:22:21,360 --> 00:22:22,799
where over time scales things are

641
00:22:22,799 --> 00:22:24,159
changing and

642
00:22:24,159 --> 00:22:25,520
you know the example that i was giving

643
00:22:25,520 --> 00:22:27,600
about cloud native architectures and how

644
00:22:27,600 --> 00:22:29,280
cloud-native architectures are really

645
00:22:29,280 --> 00:22:30,960
evolving from release to release sprint

646
00:22:30,960 --> 00:22:33,679
to sprint and more and more interactions

647
00:22:33,679 --> 00:22:35,440
and connectedness happens within these

648
00:22:35,440 --> 00:22:37,360
architectures we're starting to move

649
00:22:37,360 --> 00:22:40,400
towards these type three problems and

650
00:22:40,400 --> 00:22:41,440
that's going to create a lot of

651
00:22:41,440 --> 00:22:44,559
challenges for us as security engineers

652
00:22:44,559 --> 00:22:45,919
and then

653
00:22:45,919 --> 00:22:48,880
finally type 4 which isn't something

654
00:22:48,880 --> 00:22:50,960
that's relevant to today's conversation

655
00:22:50,960 --> 00:22:52,640
but really things like consciousness

656
00:22:52,640 --> 00:22:57,120
right are categorized under type four

657
00:22:58,799 --> 00:22:59,520
so

658
00:22:59,520 --> 00:23:01,120
with that in mind you know let's go back

659
00:23:01,120 --> 00:23:03,440
and kind of revisit misconfiguration

660
00:23:03,440 --> 00:23:06,000
checking and talk a little bit about why

661
00:23:06,000 --> 00:23:08,559
you know just doing that right is is not

662
00:23:08,559 --> 00:23:09,760
enough so

663
00:23:09,760 --> 00:23:12,080
um

664
00:23:12,559 --> 00:23:15,679
the complexity that we're seeing right

665
00:23:15,679 --> 00:23:17,760
cannot really be addressed

666
00:23:17,760 --> 00:23:19,440
through misconfiguration checking and i

667
00:23:19,440 --> 00:23:21,360
want to give some examples right

668
00:23:21,360 --> 00:23:22,720
of what i was talking about with

669
00:23:22,720 --> 00:23:26,159
misconfiguration checking so

670
00:23:32,880 --> 00:23:35,919
so this is uh it's an example terraform

671
00:23:35,919 --> 00:23:39,600
module for an aws

672
00:23:39,600 --> 00:23:42,000
application load balancer

673
00:23:42,000 --> 00:23:43,440
and

674
00:23:43,440 --> 00:23:45,919
i'll give you some examples of how

675
00:23:45,919 --> 00:23:47,520
misconfiguration checking can really

676
00:23:47,520 --> 00:23:49,200
help identify some critical issues that

677
00:23:49,200 --> 00:23:51,440
might exist in this load balancer so

678
00:23:51,440 --> 00:23:52,480
you can go into the listener

679
00:23:52,480 --> 00:23:54,000
configurations and you can make sure

680
00:23:54,000 --> 00:23:56,400
that https is enabled

681
00:23:56,400 --> 00:23:58,320
you can make sure that this load

682
00:23:58,320 --> 00:24:00,880
balancer is only internally accessible

683
00:24:00,880 --> 00:24:03,760
versus externally accessible

684
00:24:03,760 --> 00:24:06,640
you can look at the cipher suites that

685
00:24:06,640 --> 00:24:07,840
are protect

686
00:24:07,840 --> 00:24:09,520
are potentially being used by this load

687
00:24:09,520 --> 00:24:10,640
balancer and make sure that it's

688
00:24:10,640 --> 00:24:12,000
actually using the latest and greatest

689
00:24:12,000 --> 00:24:14,799
cypher suite so

690
00:24:14,960 --> 00:24:18,000
this is not a package of ciphers that

691
00:24:18,000 --> 00:24:20,320
you want to use for tls today

692
00:24:20,320 --> 00:24:21,039
if

693
00:24:21,039 --> 00:24:23,039
as if you're not dealing with

694
00:24:23,039 --> 00:24:24,320
legacy

695
00:24:24,320 --> 00:24:26,640
operating systems and legacy browsers

696
00:24:26,640 --> 00:24:28,799
they're there's a much more modern

697
00:24:28,799 --> 00:24:31,360
package of forward secure ciphers that

698
00:24:31,360 --> 00:24:33,039
aws supports today

699
00:24:33,039 --> 00:24:34,320
and so

700
00:24:34,320 --> 00:24:36,240
all of these things right can be

701
00:24:36,240 --> 00:24:37,919
identified through misconfiguration

702
00:24:37,919 --> 00:24:39,440
checking you know making sure that

703
00:24:39,440 --> 00:24:41,039
you're using the right ports if that's

704
00:24:41,039 --> 00:24:42,720
uh if that's something your organization

705
00:24:42,720 --> 00:24:44,159
has rules around

706
00:24:44,159 --> 00:24:46,880
uh making sure that talking to the

707
00:24:46,880 --> 00:24:48,320
target groups you're actually using

708
00:24:48,320 --> 00:24:50,799
https instead of http

709
00:24:50,799 --> 00:24:54,159
and uh making sure that uh logging is

710
00:24:54,159 --> 00:24:55,520
enabled

711
00:24:55,520 --> 00:24:57,919
so all of these are just examples of

712
00:24:57,919 --> 00:24:59,679
things that we can identify

713
00:24:59,679 --> 00:25:02,640
through uh misconfiguration checking

714
00:25:02,640 --> 00:25:03,520
and

715
00:25:03,520 --> 00:25:04,960
as i mentioned earlier right the

716
00:25:04,960 --> 00:25:06,080
approaches

717
00:25:06,080 --> 00:25:09,039
and and the tools that that kind of

718
00:25:09,039 --> 00:25:10,799
perform this analyses what they're

719
00:25:10,799 --> 00:25:12,159
really doing is they're doing keyword

720
00:25:12,159 --> 00:25:13,360
searches

721
00:25:13,360 --> 00:25:14,799
on

722
00:25:14,799 --> 00:25:16,640
this code finding the right

723
00:25:16,640 --> 00:25:18,720
configurations and then making sure that

724
00:25:18,720 --> 00:25:21,840
they're set to a specific static value

725
00:25:21,840 --> 00:25:24,480
and now you know if you take this across

726
00:25:24,480 --> 00:25:26,000
many many different types of cloud

727
00:25:26,000 --> 00:25:28,240
resources across different cloud service

728
00:25:28,240 --> 00:25:30,320
providers you can build a database of

729
00:25:30,320 --> 00:25:32,080
thousands and thousands of these rules

730
00:25:32,080 --> 00:25:33,440
and then you can start checking for

731
00:25:33,440 --> 00:25:35,440
these things right so this is an example

732
00:25:35,440 --> 00:25:36,960
of

733
00:25:36,960 --> 00:25:37,919
a

734
00:25:37,919 --> 00:25:39,039
database

735
00:25:39,039 --> 00:25:41,679
and i'm going to

736
00:25:41,679 --> 00:25:45,279
or an s3 bucket let's take that right

737
00:25:45,279 --> 00:25:47,360
where you can decide whether

738
00:25:47,360 --> 00:25:48,640
logging

739
00:25:48,640 --> 00:25:51,200
and versioning is enabled you can decide

740
00:25:51,200 --> 00:25:53,840
whether uh what algorithm is being used

741
00:25:53,840 --> 00:25:55,600
and whether you know a

742
00:25:55,600 --> 00:25:57,679
key management services being used or if

743
00:25:57,679 --> 00:25:59,600
we're allowing dynamodb to manage its

744
00:25:59,600 --> 00:26:01,120
keys on its own

745
00:26:01,120 --> 00:26:03,120
uh then it would use a database within

746
00:26:03,120 --> 00:26:05,200
natively us if you're not familiar and

747
00:26:05,200 --> 00:26:07,520
so these are just all examples of kind

748
00:26:07,520 --> 00:26:09,200
of individual configurations that we can

749
00:26:09,200 --> 00:26:12,559
check for and we can look at whether or

750
00:26:12,559 --> 00:26:14,400
not those configurations are set

751
00:26:14,400 --> 00:26:16,960
appropriately and

752
00:26:16,960 --> 00:26:19,039
this is as i mentioned earlier right

753
00:26:19,039 --> 00:26:20,159
this is a

754
00:26:20,159 --> 00:26:21,840
really

755
00:26:21,840 --> 00:26:24,240
valuable

756
00:26:24,240 --> 00:26:26,640
uh thing to identify it's really

757
00:26:26,640 --> 00:26:28,320
important that we identify these types

758
00:26:28,320 --> 00:26:29,520
of gaps but

759
00:26:29,520 --> 00:26:31,760
it is not addressing

760
00:26:31,760 --> 00:26:34,080
the emergent nature of security and is

761
00:26:34,080 --> 00:26:35,520
not addressing the complexity of these

762
00:26:35,520 --> 00:26:37,520
modern cloud native applications

763
00:26:37,520 --> 00:26:38,559
it is

764
00:26:38,559 --> 00:26:40,080
just scratching the surface of what

765
00:26:40,080 --> 00:26:41,520
needs to be done from a security

766
00:26:41,520 --> 00:26:43,520
engineering standpoint

767
00:26:43,520 --> 00:26:44,559
and

768
00:26:44,559 --> 00:26:45,679
what happens with these types of

769
00:26:45,679 --> 00:26:46,720
approaches

770
00:26:46,720 --> 00:26:48,559
you know another downside is really you

771
00:26:48,559 --> 00:26:50,080
know you create thousands and thousands

772
00:26:50,080 --> 00:26:51,679
of these rules but now you're gonna have

773
00:26:51,679 --> 00:26:53,440
to create exceptions

774
00:26:53,440 --> 00:26:55,600
so you know your particular application

775
00:26:55,600 --> 00:26:58,080
use case has a different use case

776
00:26:58,080 --> 00:27:00,720
is a unique use case and it needs an

777
00:27:00,720 --> 00:27:01,919
exception to

778
00:27:01,919 --> 00:27:02,880
you know

779
00:27:02,880 --> 00:27:04,400
five of the thousand rules that it's

780
00:27:04,400 --> 00:27:06,780
being assessed against and

781
00:27:06,780 --> 00:27:08,559
[Music]

782
00:27:08,559 --> 00:27:09,919
you know you'll create these exceptions

783
00:27:09,919 --> 00:27:11,600
and now it becomes you know an

784
00:27:11,600 --> 00:27:13,679
engineer's full-time job to manage and

785
00:27:13,679 --> 00:27:16,080
maintain these exceptions

786
00:27:16,080 --> 00:27:18,320
the other challenge you have is you know

787
00:27:18,320 --> 00:27:19,679
we talked about how

788
00:27:19,679 --> 00:27:20,720
when these

789
00:27:20,720 --> 00:27:22,320
types of approaches

790
00:27:22,320 --> 00:27:24,640
find true positives

791
00:27:24,640 --> 00:27:26,240
we can almost automatically know that

792
00:27:26,240 --> 00:27:27,919
they're not meeting some industry best

793
00:27:27,919 --> 00:27:29,840
practice not meeting some

794
00:27:29,840 --> 00:27:30,640
uh

795
00:27:30,640 --> 00:27:32,559
compliance needs so as an example you

796
00:27:32,559 --> 00:27:34,399
know if you were dealing with

797
00:27:34,399 --> 00:27:36,320
healthcare data and

798
00:27:36,320 --> 00:27:39,840
you did not set http protocol to https

799
00:27:39,840 --> 00:27:41,600
it's pretty obvious that you're going to

800
00:27:41,600 --> 00:27:43,200
have some issues with

801
00:27:43,200 --> 00:27:46,399
meeting hipaa regulations uh being

802
00:27:46,399 --> 00:27:48,480
compliant with high trust

803
00:27:48,480 --> 00:27:49,840
but what they're not what these

804
00:27:49,840 --> 00:27:52,320
approaches cannot tell you is

805
00:27:52,320 --> 00:27:53,840
you know what are you doing to actually

806
00:27:53,840 --> 00:27:55,760
be compliant and and if we look at the

807
00:27:55,760 --> 00:27:58,559
broader needs of compliance right um so

808
00:27:58,559 --> 00:28:00,399
instead of looking at it from

809
00:28:00,399 --> 00:28:03,200
the perspective of here here are cases

810
00:28:03,200 --> 00:28:05,360
where you're failing compliance what are

811
00:28:05,360 --> 00:28:06,640
the cases we're actually needing

812
00:28:06,640 --> 00:28:08,159
compliance and where

813
00:28:08,159 --> 00:28:10,159
where does the gap exist

814
00:28:10,159 --> 00:28:11,760
um that is not something these

815
00:28:11,760 --> 00:28:13,440
approaches can do because fundamentally

816
00:28:13,440 --> 00:28:15,679
right they they look at

817
00:28:15,679 --> 00:28:17,840
individual configurations and report on

818
00:28:17,840 --> 00:28:20,159
individual configurations

819
00:28:20,159 --> 00:28:22,480
and and because of that right they have

820
00:28:22,480 --> 00:28:25,279
no context of what your application is

821
00:28:25,279 --> 00:28:27,679
if this was your company's cafeteria

822
00:28:27,679 --> 00:28:30,000
menu and the daily menu is posted in

823
00:28:30,000 --> 00:28:31,520
this application

824
00:28:31,520 --> 00:28:34,559
uh these approaches assess that menu

825
00:28:34,559 --> 00:28:36,720
application in the same way as they

826
00:28:36,720 --> 00:28:38,080
would your most business critical

827
00:28:38,080 --> 00:28:39,440
application

828
00:28:39,440 --> 00:28:40,640
and so that's

829
00:28:40,640 --> 00:28:42,720
kind of another reason right why you'll

830
00:28:42,720 --> 00:28:45,360
end up having a lot of potential

831
00:28:45,360 --> 00:28:47,039
exceptions that you create and then

832
00:28:47,039 --> 00:28:50,399
managing those exceptions

833
00:28:53,279 --> 00:28:55,520
so let's talk about how we're gonna how

834
00:28:55,520 --> 00:28:56,799
we need to secure cloud native

835
00:28:56,799 --> 00:28:58,080
applications and how we're going to deal

836
00:28:58,080 --> 00:28:59,919
with this complexity that

837
00:28:59,919 --> 00:29:01,919
is looming for all of us security

838
00:29:01,919 --> 00:29:04,399
engineers

839
00:29:05,279 --> 00:29:07,039
so when we look at the literature and we

840
00:29:07,039 --> 00:29:09,480
look at you know kind of how

841
00:29:09,480 --> 00:29:10,880
[Music]

842
00:29:10,880 --> 00:29:14,559
the systems the complex systems

843
00:29:14,559 --> 00:29:16,640
folks have addressed these problems you

844
00:29:16,640 --> 00:29:18,399
know we can learn a lot from those

845
00:29:18,399 --> 00:29:20,320
approaches and you know there's a lot of

846
00:29:20,320 --> 00:29:22,320
organizations like i talked about you

847
00:29:22,320 --> 00:29:24,080
know nist has has

848
00:29:24,080 --> 00:29:25,120
uh

849
00:29:25,120 --> 00:29:27,520
very correctly identified this saps out

850
00:29:27,520 --> 00:29:29,279
many years ago right started talking

851
00:29:29,279 --> 00:29:30,480
about this if you're not familiar with

852
00:29:30,480 --> 00:29:32,000
zaps other

853
00:29:32,000 --> 00:29:34,000
security architecture

854
00:29:34,000 --> 00:29:35,520
um

855
00:29:35,520 --> 00:29:37,360
organization that has you know

856
00:29:37,360 --> 00:29:40,320
methodologies around um security

857
00:29:40,320 --> 00:29:42,320
architecture but really you know what

858
00:29:42,320 --> 00:29:44,799
they've all found right is we need to

859
00:29:44,799 --> 00:29:47,039
really take approaches that are holistic

860
00:29:47,039 --> 00:29:48,799
as opposed to just looking at individual

861
00:29:48,799 --> 00:29:50,960
components of the system we need to look

862
00:29:50,960 --> 00:29:52,559
at the broader system we need to

863
00:29:52,559 --> 00:29:54,559
understand the interactions

864
00:29:54,559 --> 00:29:56,320
we need to look at you know and this is

865
00:29:56,320 --> 00:29:57,760
what we do when we do threat modeling

866
00:29:57,760 --> 00:30:00,000
right is really understanding the the

867
00:30:00,000 --> 00:30:01,760
system as a whole what are all of the

868
00:30:01,760 --> 00:30:03,279
connections what are all the data flows

869
00:30:03,279 --> 00:30:05,360
what are all the different components

870
00:30:05,360 --> 00:30:07,120
and how are they interacting and really

871
00:30:07,120 --> 00:30:09,440
taking that holistic systems engineering

872
00:30:09,440 --> 00:30:11,120
approach as opposed to looking at

873
00:30:11,120 --> 00:30:13,120
individual components and individual

874
00:30:13,120 --> 00:30:16,120
misconfigurations

875
00:30:16,480 --> 00:30:18,640
you know part of the challenge with the

876
00:30:18,640 --> 00:30:20,240
types of complexity that we're seeing in

877
00:30:20,240 --> 00:30:22,399
these cloud native applications

878
00:30:22,399 --> 00:30:23,360
is

879
00:30:23,360 --> 00:30:25,039
you know and and when we look at

880
00:30:25,039 --> 00:30:26,880
security as an emergent property really

881
00:30:26,880 --> 00:30:30,080
the best approach to to constrain that

882
00:30:30,080 --> 00:30:31,919
is to not let these application

883
00:30:31,919 --> 00:30:34,399
architectures get too complex and and

884
00:30:34,399 --> 00:30:36,559
provide you know constrain these

885
00:30:36,559 --> 00:30:37,760
application architectures in a

886
00:30:37,760 --> 00:30:39,200
meaningful way and one of the best ways

887
00:30:39,200 --> 00:30:41,760
you can do that is as you decompose your

888
00:30:41,760 --> 00:30:44,320
application from a top-down perspective

889
00:30:44,320 --> 00:30:45,600
you need to set the right business

890
00:30:45,600 --> 00:30:47,200
objectives the right requirements around

891
00:30:47,200 --> 00:30:48,880
security so that you can actually start

892
00:30:48,880 --> 00:30:51,279
constraining the the security

893
00:30:51,279 --> 00:30:52,799
engineering challenge from the very

894
00:30:52,799 --> 00:30:54,320
beginning

895
00:30:54,320 --> 00:30:57,120
uh reduce the complexity and

896
00:30:57,120 --> 00:30:59,600
and enhance the simplicity of the design

897
00:30:59,600 --> 00:31:02,159
you know we don't necessarily it is not

898
00:31:02,159 --> 00:31:04,640
a good thing to to have

899
00:31:04,640 --> 00:31:06,320
the level of complexity that leads to

900
00:31:06,320 --> 00:31:08,960
these emergent properties and so we want

901
00:31:08,960 --> 00:31:10,799
you know simpler architecture simpler

902
00:31:10,799 --> 00:31:11,919
designs

903
00:31:11,919 --> 00:31:15,039
um you know very simple design patterns

904
00:31:15,039 --> 00:31:16,799
and then you know doing threat modeling

905
00:31:16,799 --> 00:31:18,320
to actually holistically look at the

906
00:31:18,320 --> 00:31:19,279
system

907
00:31:19,279 --> 00:31:21,519
looking at strategies

908
00:31:21,519 --> 00:31:22,720
that

909
00:31:22,720 --> 00:31:25,200
assume certain threats and attacks will

910
00:31:25,200 --> 00:31:27,120
be successful and how do we minimize the

911
00:31:27,120 --> 00:31:29,679
impact architecturally so as an example

912
00:31:29,679 --> 00:31:30,840
isolation and

913
00:31:30,840 --> 00:31:33,840
segregation is a great approach

914
00:31:33,840 --> 00:31:35,840
to

915
00:31:35,840 --> 00:31:38,159
to look at you know separating the

916
00:31:38,159 --> 00:31:40,399
impact of one component on the other

917
00:31:40,399 --> 00:31:42,399
so that you know if

918
00:31:42,399 --> 00:31:44,840
your cafeteria menu is

919
00:31:44,840 --> 00:31:46,640
compromised

920
00:31:46,640 --> 00:31:48,720
that compromise should not allow someone

921
00:31:48,720 --> 00:31:49,919
to then have

922
00:31:49,919 --> 00:31:51,679
a business impact to your business by

923
00:31:51,679 --> 00:31:53,200
laterally moving in your environment

924
00:31:53,200 --> 00:31:55,519
right so how can we build architectures

925
00:31:55,519 --> 00:31:57,440
that really limit what the attacker can

926
00:31:57,440 --> 00:31:59,519
do if a given application a given

927
00:31:59,519 --> 00:32:02,080
service is compromised

928
00:32:02,080 --> 00:32:04,240
and then as we look at that systems

929
00:32:04,240 --> 00:32:06,080
engineering approach one of the most

930
00:32:06,080 --> 00:32:08,159
critical things that you have to do is

931
00:32:08,159 --> 00:32:10,399
look at people and process as an

932
00:32:10,399 --> 00:32:13,440
integral part of that system because you

933
00:32:13,440 --> 00:32:16,159
know the human element is really what

934
00:32:16,159 --> 00:32:17,279
creates

935
00:32:17,279 --> 00:32:20,880
a lot of the complexity in these

936
00:32:20,880 --> 00:32:25,159
in these scenarios in these systems

937
00:32:30,320 --> 00:32:31,200
and

938
00:32:31,200 --> 00:32:32,399
os

939
00:32:32,399 --> 00:32:34,159
you know

940
00:32:34,159 --> 00:32:36,720
is has has identified this the same

941
00:32:36,720 --> 00:32:38,720
trend as well and

942
00:32:38,720 --> 00:32:42,799
you know for the first time in 2021

943
00:32:42,799 --> 00:32:45,279
a new category was added

944
00:32:45,279 --> 00:32:46,799
for

945
00:32:46,799 --> 00:32:48,960
uh insecure design

946
00:32:48,960 --> 00:32:50,880
and it focuses on the risk failure to

947
00:32:50,880 --> 00:32:53,200
design flaws um and you know the

948
00:32:53,200 --> 00:32:55,760
guidance that os has provided is exactly

949
00:32:55,760 --> 00:32:57,600
spot on right we need to do more threat

950
00:32:57,600 --> 00:32:59,039
modeling as

951
00:32:59,039 --> 00:33:01,200
uh security professionals we need to

952
00:33:01,200 --> 00:33:04,480
build security design practices

953
00:33:04,480 --> 00:33:06,720
build our catalog of security design

954
00:33:06,720 --> 00:33:08,240
patterns that we want the organizations

955
00:33:08,240 --> 00:33:10,640
to follow you know define our security

956
00:33:10,640 --> 00:33:12,240
design principles

957
00:33:12,240 --> 00:33:13,840
and build reference architectures that

958
00:33:13,840 --> 00:33:16,480
developers and our peers can use to

959
00:33:16,480 --> 00:33:18,480
build secure systems

960
00:33:18,480 --> 00:33:20,720
and and that is really the only approach

961
00:33:20,720 --> 00:33:24,919
to addressing this complexity

962
00:33:28,080 --> 00:33:30,640
and so this is an example of the types

963
00:33:30,640 --> 00:33:33,200
of guiding principles that we should be

964
00:33:33,200 --> 00:33:34,640
establishing

965
00:33:34,640 --> 00:33:35,760
as we

966
00:33:35,760 --> 00:33:37,120
look at that

967
00:33:37,120 --> 00:33:40,080
systems engineering approach to security

968
00:33:40,080 --> 00:33:41,600
making sure that we are considering

969
00:33:41,600 --> 00:33:43,039
security early that we're building

970
00:33:43,039 --> 00:33:44,799
security in that we're designing

971
00:33:44,799 --> 00:33:45,919
security in

972
00:33:45,919 --> 00:33:47,679
uh human factored security really

973
00:33:47,679 --> 00:33:49,440
considers the end user it considers the

974
00:33:49,440 --> 00:33:51,600
developer it makes sure that we are

975
00:33:51,600 --> 00:33:53,360
actually solving the problems of those

976
00:33:53,360 --> 00:33:56,320
end users and not creating barriers for

977
00:33:56,320 --> 00:33:59,919
those users and implementers to adopt

978
00:33:59,919 --> 00:34:03,200
security how can we make developers

979
00:34:03,200 --> 00:34:05,679
build faster how can we allow those

980
00:34:05,679 --> 00:34:06,960
developers

981
00:34:06,960 --> 00:34:09,359
to to maintain that freedom in picking

982
00:34:09,359 --> 00:34:10,639
the cloud service provider that they

983
00:34:10,639 --> 00:34:12,480
want the cloud capabilities that they

984
00:34:12,480 --> 00:34:13,760
want building

985
00:34:13,760 --> 00:34:16,239
you know the the complex architectures

986
00:34:16,239 --> 00:34:17,918
that they need to build to solve

987
00:34:17,918 --> 00:34:19,839
customer use cases but doing so in a way

988
00:34:19,839 --> 00:34:21,839
that's secure

989
00:34:21,839 --> 00:34:22,960
and you know

990
00:34:22,960 --> 00:34:25,440
things that um

991
00:34:25,440 --> 00:34:27,199
we as security professionals are are

992
00:34:27,199 --> 00:34:29,199
quite well familiar with you know making

993
00:34:29,199 --> 00:34:30,560
sure that there's least privilege

994
00:34:30,560 --> 00:34:33,119
there's separation of privilege

995
00:34:33,119 --> 00:34:35,359
the one big change that happens in cloud

996
00:34:35,359 --> 00:34:37,359
native applications is you know if

997
00:34:37,359 --> 00:34:39,040
you're familiar with least common

998
00:34:39,040 --> 00:34:40,719
mechanism

999
00:34:40,719 --> 00:34:42,159
um

1000
00:34:42,159 --> 00:34:45,520
as a as a way to really minimize

1001
00:34:45,520 --> 00:34:46,960
shared security

1002
00:34:46,960 --> 00:34:49,839
controls

1003
00:34:50,079 --> 00:34:52,320
the cloud really changes

1004
00:34:52,320 --> 00:34:55,040
this paradigm and so

1005
00:34:55,040 --> 00:34:57,200
the goal here is to really reduce this

1006
00:34:57,200 --> 00:34:59,440
shared security mechanism so that on

1007
00:34:59,440 --> 00:35:00,960
different applications different

1008
00:35:00,960 --> 00:35:03,839
services and as much as possible are not

1009
00:35:03,839 --> 00:35:06,000
sharing those same security mechanisms

1010
00:35:06,000 --> 00:35:07,520
they're not dependent on those same

1011
00:35:07,520 --> 00:35:09,760
security mechanisms building security

1012
00:35:09,760 --> 00:35:10,960
that's scalable thinking about

1013
00:35:10,960 --> 00:35:12,960
scalability from the very beginning

1014
00:35:12,960 --> 00:35:16,400
looking at minimizing the attack surface

1015
00:35:16,400 --> 00:35:18,400
defense in depth and then you know going

1016
00:35:18,400 --> 00:35:20,560
back to simplicity right buildings

1017
00:35:20,560 --> 00:35:22,960
you know as much as possible building

1018
00:35:22,960 --> 00:35:25,280
simple security architectures

1019
00:35:25,280 --> 00:35:27,359
and and having an open design so that

1020
00:35:27,359 --> 00:35:29,280
we're not doing security by obscurity in

1021
00:35:29,280 --> 00:35:32,400
any of these situations

1022
00:35:36,480 --> 00:35:38,480
but even after we do all of this right

1023
00:35:38,480 --> 00:35:41,760
the challenge of the sheer number

1024
00:35:41,760 --> 00:35:43,680
the sheer complexity and the entropy

1025
00:35:43,680 --> 00:35:44,560
that

1026
00:35:44,560 --> 00:35:46,160
these modern cloud native application

1027
00:35:46,160 --> 00:35:47,760
architectures have

1028
00:35:47,760 --> 00:35:50,000
um really requires security

1029
00:35:50,000 --> 00:35:52,480
organizations to embrace automation and

1030
00:35:52,480 --> 00:35:54,800
and as we

1031
00:35:54,800 --> 00:35:56,640
modernize our security practices

1032
00:35:56,640 --> 00:35:59,200
automation has to be a key pillar of

1033
00:35:59,200 --> 00:36:01,760
those modern security practices we need

1034
00:36:01,760 --> 00:36:04,000
to fit into the development workflows so

1035
00:36:04,000 --> 00:36:06,720
that we get visibility into every change

1036
00:36:06,720 --> 00:36:08,400
that happens but also

1037
00:36:08,400 --> 00:36:10,400
because you know going back to human

1038
00:36:10,400 --> 00:36:12,400
factored security

1039
00:36:12,400 --> 00:36:13,920
we can fit into those development

1040
00:36:13,920 --> 00:36:16,160
workflows and provide feedback to the

1041
00:36:16,160 --> 00:36:18,079
developer within their own workflows we

1042
00:36:18,079 --> 00:36:20,400
can seamlessly integrate into their

1043
00:36:20,400 --> 00:36:22,240
day-to-day life cycle

1044
00:36:22,240 --> 00:36:23,760
so that they are getting security

1045
00:36:23,760 --> 00:36:25,920
guidance in a timely manner they're

1046
00:36:25,920 --> 00:36:27,200
getting security guidance that's

1047
00:36:27,200 --> 00:36:29,040
actionable achievable

1048
00:36:29,040 --> 00:36:32,000
applicable to what they're doing

1049
00:36:32,000 --> 00:36:34,160
but even if we do that right we then

1050
00:36:34,160 --> 00:36:35,119
need to

1051
00:36:35,119 --> 00:36:37,200
manage for drift

1052
00:36:37,200 --> 00:36:39,119
so this application architecture today

1053
00:36:39,119 --> 00:36:41,200
is no longer static it is changing

1054
00:36:41,200 --> 00:36:43,119
constantly

1055
00:36:43,119 --> 00:36:46,000
how do we maintain and manage that drift

1056
00:36:46,000 --> 00:36:47,920
how do we measure that drift and so

1057
00:36:47,920 --> 00:36:49,359
building capabilities to do that and

1058
00:36:49,359 --> 00:36:51,200
doing so through automation because

1059
00:36:51,200 --> 00:36:53,760
there is no way a manual approach will

1060
00:36:53,760 --> 00:36:56,000
scale to the size and complexity of

1061
00:36:56,000 --> 00:36:57,839
these application architectures

1062
00:36:57,839 --> 00:37:00,079
and that leads me to you know

1063
00:37:00,079 --> 00:37:02,000
one of the one of the core

1064
00:37:02,000 --> 00:37:04,240
aspects of how security organizations

1065
00:37:04,240 --> 00:37:06,800
will be able to scale to this problem is

1066
00:37:06,800 --> 00:37:10,160
using security as code-based approaches

1067
00:37:10,160 --> 00:37:11,839
you know if development teams are

1068
00:37:11,839 --> 00:37:13,599
leveraging infrastructure as code

1069
00:37:13,599 --> 00:37:16,560
security really needs to embrace

1070
00:37:16,560 --> 00:37:19,200
as a code approaches to build security

1071
00:37:19,200 --> 00:37:20,960
architectures as code really thinking

1072
00:37:20,960 --> 00:37:23,520
about you know building dynamic

1073
00:37:23,520 --> 00:37:25,200
architectures

1074
00:37:25,200 --> 00:37:26,400
that

1075
00:37:26,400 --> 00:37:29,119
can seamlessly address the use cases

1076
00:37:29,119 --> 00:37:32,880
that developers have and and help

1077
00:37:32,880 --> 00:37:36,800
simplify security for developers so how

1078
00:37:36,800 --> 00:37:38,320
can security organizations really

1079
00:37:38,320 --> 00:37:40,560
embrace as a code approaches to build

1080
00:37:40,560 --> 00:37:43,200
patterns and and codify them so that

1081
00:37:43,200 --> 00:37:44,960
they're not paper documents we're not

1082
00:37:44,960 --> 00:37:47,040
delivering excel spreadsheets and

1083
00:37:47,040 --> 00:37:48,880
powerpoint presentations or word

1084
00:37:48,880 --> 00:37:52,320
documents we are looking at using

1085
00:37:52,320 --> 00:37:54,240
automation to fit into that development

1086
00:37:54,240 --> 00:37:57,599
workflow leveraging security as code

1087
00:37:57,599 --> 00:37:59,920
to assess that application architecture

1088
00:37:59,920 --> 00:38:01,760
and provide feedback

1089
00:38:01,760 --> 00:38:03,520
to those developers

1090
00:38:03,520 --> 00:38:04,960
and and there's a lot of powerful

1091
00:38:04,960 --> 00:38:07,520
benefits of doing so right those

1092
00:38:07,520 --> 00:38:09,119
those security architectures that you

1093
00:38:09,119 --> 00:38:11,359
build as code are now version controlled

1094
00:38:11,359 --> 00:38:13,359
they're maintainable they're they can be

1095
00:38:13,359 --> 00:38:14,480
modular

1096
00:38:14,480 --> 00:38:16,160
they can be flexible

1097
00:38:16,160 --> 00:38:18,640
and they can dynamically apply security

1098
00:38:18,640 --> 00:38:20,880
as this application architecture is

1099
00:38:20,880 --> 00:38:23,280
changing so that if the developer starts

1100
00:38:23,280 --> 00:38:25,280
with the proof of value

1101
00:38:25,280 --> 00:38:26,720
and at that point you know their

1102
00:38:26,720 --> 00:38:28,320
business use case isn't dealing with

1103
00:38:28,320 --> 00:38:30,320
sensitive data it's not externally

1104
00:38:30,320 --> 00:38:33,119
exposed it's an internal proof of value

1105
00:38:33,119 --> 00:38:35,040
the security architecture that we apply

1106
00:38:35,040 --> 00:38:36,880
to that particular application should be

1107
00:38:36,880 --> 00:38:39,839
different than the one that we apply to

1108
00:38:39,839 --> 00:38:42,000
the beta version of that same product

1109
00:38:42,000 --> 00:38:43,520
that evolves

1110
00:38:43,520 --> 00:38:45,200
and now

1111
00:38:45,200 --> 00:38:46,800
you know has more stringent requirements

1112
00:38:46,800 --> 00:38:48,240
around security

1113
00:38:48,240 --> 00:38:51,440
and and having that uh you know being

1114
00:38:51,440 --> 00:38:53,119
able to apply security dynamically is

1115
00:38:53,119 --> 00:38:55,200
going to be critical

1116
00:38:55,200 --> 00:38:57,680
to to really address the complexity of

1117
00:38:57,680 --> 00:38:58,640
these

1118
00:38:58,640 --> 00:39:01,440
architectures

1119
00:39:01,440 --> 00:39:03,599
the other big piece of this is

1120
00:39:03,599 --> 00:39:05,760
visualization you know

1121
00:39:05,760 --> 00:39:06,960
it's really hard to secure what you

1122
00:39:06,960 --> 00:39:08,480
don't understand and if you cannot

1123
00:39:08,480 --> 00:39:09,680
visualize

1124
00:39:09,680 --> 00:39:11,599
what this application architecture is

1125
00:39:11,599 --> 00:39:13,119
what are all the different

1126
00:39:13,119 --> 00:39:15,040
endpoints that

1127
00:39:15,040 --> 00:39:16,320
components in this architecture are

1128
00:39:16,320 --> 00:39:18,160
connected to what are all the different

1129
00:39:18,160 --> 00:39:20,720
information flows you can't possibly

1130
00:39:20,720 --> 00:39:22,720
you know

1131
00:39:22,720 --> 00:39:24,079
effectively threat model this

1132
00:39:24,079 --> 00:39:25,520
application

1133
00:39:25,520 --> 00:39:26,960
to understand

1134
00:39:26,960 --> 00:39:28,560
where potential

1135
00:39:28,560 --> 00:39:29,599
uh

1136
00:39:29,599 --> 00:39:31,440
issues may lie

1137
00:39:31,440 --> 00:39:32,240
and

1138
00:39:32,240 --> 00:39:34,320
the challenge with visualization in this

1139
00:39:34,320 --> 00:39:35,839
space is that these application

1140
00:39:35,839 --> 00:39:37,359
architectures are getting incredibly

1141
00:39:37,359 --> 00:39:38,560
complex

1142
00:39:38,560 --> 00:39:41,839
so you know i have customers today that

1143
00:39:41,839 --> 00:39:44,240
deal with application architectures that

1144
00:39:44,240 --> 00:39:45,599
have over

1145
00:39:45,599 --> 00:39:48,720
you know 10 000 resources in a given

1146
00:39:48,720 --> 00:39:50,800
application architecture and it's all

1147
00:39:50,800 --> 00:39:52,480
you know when you look at

1148
00:39:52,480 --> 00:39:55,680
application architectures of that size

1149
00:39:55,680 --> 00:39:57,200
meaningful visualization is really

1150
00:39:57,200 --> 00:39:58,880
critical so that you can get the right

1151
00:39:58,880 --> 00:40:00,560
slice of the information that you're

1152
00:40:00,560 --> 00:40:02,400
looking for to

1153
00:40:02,400 --> 00:40:04,800
assess that application architecture and

1154
00:40:04,800 --> 00:40:06,560
and if we don't solve the visualization

1155
00:40:06,560 --> 00:40:08,720
problem we won't be able to really

1156
00:40:08,720 --> 00:40:10,079
understand what these application

1157
00:40:10,079 --> 00:40:12,079
architectures are doing and

1158
00:40:12,079 --> 00:40:15,200
effectively assess them

1159
00:40:16,319 --> 00:40:18,480
and finally you know one of the most

1160
00:40:18,480 --> 00:40:20,079
important probably the most important

1161
00:40:20,079 --> 00:40:21,920
thing right if i can leave you with one

1162
00:40:21,920 --> 00:40:23,520
thing is

1163
00:40:23,520 --> 00:40:26,480
none of this matters right

1164
00:40:26,480 --> 00:40:28,400
if we cannot drive the cultural change

1165
00:40:28,400 --> 00:40:30,319
that's necessary

1166
00:40:30,319 --> 00:40:32,720
for security teams to work effectively

1167
00:40:32,720 --> 00:40:34,960
with the business with development teams

1168
00:40:34,960 --> 00:40:36,640
with ops teams

1169
00:40:36,640 --> 00:40:39,280
and there has to be a top-down focus on

1170
00:40:39,280 --> 00:40:42,640
the people and process associated with

1171
00:40:42,640 --> 00:40:45,200
how we support cloud native application

1172
00:40:45,200 --> 00:40:47,599
architectures we really need to consider

1173
00:40:47,599 --> 00:40:49,359
the development teams and the ops teams

1174
00:40:49,359 --> 00:40:50,640
and the challenges that they have as

1175
00:40:50,640 --> 00:40:52,079
security professionals and really have

1176
00:40:52,079 --> 00:40:54,960
empathy for the types of pressures that

1177
00:40:54,960 --> 00:40:56,640
they're facing and similarly you know

1178
00:40:56,640 --> 00:40:59,040
development teams need to

1179
00:40:59,040 --> 00:41:01,119
have that empathy for the security

1180
00:41:01,119 --> 00:41:03,359
professionals that are underwater

1181
00:41:03,359 --> 00:41:04,800
struggling to

1182
00:41:04,800 --> 00:41:07,280
you know really keep up with challenges

1183
00:41:07,280 --> 00:41:08,800
across the application portfolio that

1184
00:41:08,800 --> 00:41:10,319
they may be supporting

1185
00:41:10,319 --> 00:41:12,800
and you know how do we get to

1186
00:41:12,800 --> 00:41:15,040
a future where

1187
00:41:15,040 --> 00:41:17,119
all of these teams can work autonomously

1188
00:41:17,119 --> 00:41:19,040
can collaborate effectively and share

1189
00:41:19,040 --> 00:41:21,359
responsibility around security

1190
00:41:21,359 --> 00:41:24,160
and and effectively drive the business

1191
00:41:24,160 --> 00:41:26,160
to the same goals so that we can we can

1192
00:41:26,160 --> 00:41:27,839
deliver faster

1193
00:41:27,839 --> 00:41:30,480
we can deliver more agile

1194
00:41:30,480 --> 00:41:32,640
applications and as a business

1195
00:41:32,640 --> 00:41:34,480
businesses can take advantage

1196
00:41:34,480 --> 00:41:36,880
of new market opportunities

1197
00:41:36,880 --> 00:41:40,720
fleeting opportunities that require

1198
00:41:40,720 --> 00:41:43,200
the organization to quickly react and

1199
00:41:43,200 --> 00:41:44,800
and how can security be a part of that

1200
00:41:44,800 --> 00:41:48,760
and really drive that change

1201
00:41:51,200 --> 00:41:52,960
so i'll

1202
00:41:52,960 --> 00:41:53,839
i'll

1203
00:41:53,839 --> 00:41:55,920
stop with some very simple examples

1204
00:41:55,920 --> 00:41:57,200
right of

1205
00:41:57,200 --> 00:42:01,200
of kind of how this manifests and um

1206
00:42:01,200 --> 00:42:03,200
and where

1207
00:42:03,200 --> 00:42:05,440
you know where we kind of see these

1208
00:42:05,440 --> 00:42:06,720
these complex relationships

1209
00:42:06,720 --> 00:42:08,880
interdependencies and and you know

1210
00:42:08,880 --> 00:42:10,720
emergent properties

1211
00:42:10,720 --> 00:42:13,760
so let's take you know to simplify

1212
00:42:13,760 --> 00:42:16,079
uh the example right what i'm using kind

1213
00:42:16,079 --> 00:42:17,839
of a graph visualization here but let's

1214
00:42:17,839 --> 00:42:18,960
say you have

1215
00:42:18,960 --> 00:42:21,680
an application load balancer uh if it's

1216
00:42:21,680 --> 00:42:22,720
a

1217
00:42:22,720 --> 00:42:24,960
elb in aws

1218
00:42:24,960 --> 00:42:26,720
then that load balancer you can

1219
00:42:26,720 --> 00:42:29,440
configure it to send its logs

1220
00:42:29,440 --> 00:42:31,359
to object storage you can configure what

1221
00:42:31,359 --> 00:42:33,119
logs you want to collect

1222
00:42:33,119 --> 00:42:36,079
and then from that object storage bucket

1223
00:42:36,079 --> 00:42:38,030
your seam solution can pick those

1224
00:42:38,030 --> 00:42:39,280
[Music]

1225
00:42:39,280 --> 00:42:41,119
pick those logs up

1226
00:42:41,119 --> 00:42:42,400
and you might have a serverless

1227
00:42:42,400 --> 00:42:45,599
architecture that is event based where

1228
00:42:45,599 --> 00:42:47,040
once logs are

1229
00:42:47,040 --> 00:42:49,680
submitted to object storage it triggers

1230
00:42:49,680 --> 00:42:51,760
a serverless function that then notifies

1231
00:42:51,760 --> 00:42:54,160
the scene to go pull those logs

1232
00:42:54,160 --> 00:42:56,160
and when you look at

1233
00:42:56,160 --> 00:42:58,560
you know just logging as an example and

1234
00:42:58,560 --> 00:43:00,400
you know going back to what i was

1235
00:43:00,400 --> 00:43:01,990
sharing earlier

1236
00:43:01,990 --> 00:43:05,069
[Music]

1237
00:43:11,440 --> 00:43:14,560
if i go back to this example

1238
00:43:14,560 --> 00:43:17,040
you know misconfiguration checking

1239
00:43:17,040 --> 00:43:19,440
will tell me that logs access logs are

1240
00:43:19,440 --> 00:43:21,040
enabled

1241
00:43:21,040 --> 00:43:22,640
right there right

1242
00:43:22,640 --> 00:43:24,480
so it's telling me that logging is

1243
00:43:24,480 --> 00:43:26,480
enabled but that is the extent of what i

1244
00:43:26,480 --> 00:43:27,359
know

1245
00:43:27,359 --> 00:43:29,280
based on static misconfiguration

1246
00:43:29,280 --> 00:43:30,720
checking

1247
00:43:30,720 --> 00:43:32,640
now if i

1248
00:43:32,640 --> 00:43:35,520
go back to this particular use case and

1249
00:43:35,520 --> 00:43:38,480
just that one requirement around logging

1250
00:43:38,480 --> 00:43:40,079
and really understanding how we can meet

1251
00:43:40,079 --> 00:43:41,839
our business objectives around audit and

1252
00:43:41,839 --> 00:43:44,079
accountability

1253
00:43:44,079 --> 00:43:46,240
we need to understand okay logging is

1254
00:43:46,240 --> 00:43:49,040
enabled where are logs being sent

1255
00:43:49,040 --> 00:43:51,040
what permissions does this load balancer

1256
00:43:51,040 --> 00:43:52,160
have

1257
00:43:52,160 --> 00:43:55,200
to talk to that s3 bucket

1258
00:43:55,200 --> 00:43:57,680
uh what is the im role within aws that's

1259
00:43:57,680 --> 00:43:59,680
been assigned to that load balancer is

1260
00:43:59,680 --> 00:44:02,079
it minimum necessary

1261
00:44:02,079 --> 00:44:04,640
does this object storage bucket right is

1262
00:44:04,640 --> 00:44:06,000
this a shared bucket or is this

1263
00:44:06,000 --> 00:44:08,160
purposely being purposefully being used

1264
00:44:08,160 --> 00:44:10,000
for storing logs is it limited to this

1265
00:44:10,000 --> 00:44:11,680
load balancer

1266
00:44:11,680 --> 00:44:13,599
and

1267
00:44:13,599 --> 00:44:15,280
how does this object storage bucket

1268
00:44:15,280 --> 00:44:17,440
ensure confidentiality and integrity of

1269
00:44:17,440 --> 00:44:19,440
those logs is it configured for

1270
00:44:19,440 --> 00:44:22,210
versioning is it configured for

1271
00:44:22,210 --> 00:44:24,160
[Music]

1272
00:44:24,160 --> 00:44:25,680
data at rest encryption if that's a

1273
00:44:25,680 --> 00:44:27,440
requirement that you have

1274
00:44:27,440 --> 00:44:29,119
from say a compliance framework that's

1275
00:44:29,119 --> 00:44:30,640
telling you that log should be encrypted

1276
00:44:30,640 --> 00:44:33,118
at rest

1277
00:44:34,720 --> 00:44:36,160
what else is talking to the storage

1278
00:44:36,160 --> 00:44:37,839
bucket what other i am roles have

1279
00:44:37,839 --> 00:44:39,920
permissions to this storage bucket

1280
00:44:39,920 --> 00:44:42,400
um how do logs from this storage bucket

1281
00:44:42,400 --> 00:44:43,680
end up in the scene what does the

1282
00:44:43,680 --> 00:44:45,839
architecture look like how is if you're

1283
00:44:45,839 --> 00:44:47,839
using um

1284
00:44:47,839 --> 00:44:51,760
splunk for example right and you have

1285
00:44:51,760 --> 00:44:53,359
a solution that's going and picking up

1286
00:44:53,359 --> 00:44:54,880
these logs or interacting with these

1287
00:44:54,880 --> 00:44:55,839
logs

1288
00:44:55,839 --> 00:44:57,839
how does how does that interaction work

1289
00:44:57,839 --> 00:44:58,640
what

1290
00:44:58,640 --> 00:44:59,920
what are the

1291
00:44:59,920 --> 00:45:02,000
the permissions being set there and what

1292
00:45:02,000 --> 00:45:04,400
types of access does that scene have

1293
00:45:04,400 --> 00:45:05,680
how does it how is the serverless

1294
00:45:05,680 --> 00:45:06,960
functions

1295
00:45:06,960 --> 00:45:08,319
defined and you know there was a great

1296
00:45:08,319 --> 00:45:10,400
talk yesterday about serverless security

1297
00:45:10,400 --> 00:45:12,319
and are we following all those best

1298
00:45:12,319 --> 00:45:14,160
practices for that serverless function

1299
00:45:14,160 --> 00:45:16,319
so just just to

1300
00:45:16,319 --> 00:45:18,880
understand whether a single requirement

1301
00:45:18,880 --> 00:45:21,119
is being met appropriately

1302
00:45:21,119 --> 00:45:22,000
there's

1303
00:45:22,000 --> 00:45:24,000
a lot of nuance in what we need to

1304
00:45:24,000 --> 00:45:25,200
assess

1305
00:45:25,200 --> 00:45:27,359
and if we had to do this at the scale of

1306
00:45:27,359 --> 00:45:28,800
these complex architectures right

1307
00:45:28,800 --> 00:45:30,720
without automation this is a incredibly

1308
00:45:30,720 --> 00:45:33,839
hard problem to solve

1309
00:45:35,200 --> 00:45:37,599
i'll give one other example before i

1310
00:45:37,599 --> 00:45:39,599
pause

1311
00:45:39,599 --> 00:45:41,359
let's say you wanted to

1312
00:45:41,359 --> 00:45:43,760
have a requirement that all interactions

1313
00:45:43,760 --> 00:45:46,480
with your databases

1314
00:45:46,480 --> 00:45:47,920
um

1315
00:45:47,920 --> 00:45:50,560
are inspected through

1316
00:45:50,560 --> 00:45:53,040
for sec for security purposes and they

1317
00:45:53,040 --> 00:45:55,599
go through some managed inspection point

1318
00:45:55,599 --> 00:45:56,560
where

1319
00:45:56,560 --> 00:45:59,040
you were able to configure rules um on

1320
00:45:59,040 --> 00:46:00,160
what you're checking for so you can

1321
00:46:00,160 --> 00:46:01,680
check for things like sql injection or

1322
00:46:01,680 --> 00:46:02,960
you can check for

1323
00:46:02,960 --> 00:46:03,760
uh

1324
00:46:03,760 --> 00:46:06,000
you know exfiltration of data based on

1325
00:46:06,000 --> 00:46:07,760
behavioral patterns

1326
00:46:07,760 --> 00:46:11,200
um and in this use case right

1327
00:46:11,200 --> 00:46:13,680
in a complex cloud native architecture

1328
00:46:13,680 --> 00:46:15,920
right you would need to understand

1329
00:46:15,920 --> 00:46:16,380
um

1330
00:46:16,380 --> 00:46:17,680
[Music]

1331
00:46:17,680 --> 00:46:19,319
okay what are the different

1332
00:46:19,319 --> 00:46:22,319
microservices or applications that are

1333
00:46:22,319 --> 00:46:24,480
that have access to this database

1334
00:46:24,480 --> 00:46:26,640
is there some sort of a gateway here

1335
00:46:26,640 --> 00:46:28,240
that is actually providing me the

1336
00:46:28,240 --> 00:46:30,640
capabilities that i need uh do i have an

1337
00:46:30,640 --> 00:46:32,000
enterprise standard

1338
00:46:32,000 --> 00:46:32,800
for

1339
00:46:32,800 --> 00:46:34,319
what types of gateways should be used

1340
00:46:34,319 --> 00:46:36,480
what types of capabilities should exist

1341
00:46:36,480 --> 00:46:38,160
how are they interacting

1342
00:46:38,160 --> 00:46:39,920
with the network that these database

1343
00:46:39,920 --> 00:46:42,000
tables are associated with how many

1344
00:46:42,000 --> 00:46:43,839
different database tables do i have you

1345
00:46:43,839 --> 00:46:45,839
know it's easy to spin up new tables in

1346
00:46:45,839 --> 00:46:47,599
the cloud and you might have

1347
00:46:47,599 --> 00:46:49,599
you know hundreds of these database

1348
00:46:49,599 --> 00:46:52,079
tables that you need to now uh protect

1349
00:46:52,079 --> 00:46:54,160
and are there other out-of-band channels

1350
00:46:54,160 --> 00:46:56,000
that essentially bypass that security

1351
00:46:56,000 --> 00:46:57,520
gateway because

1352
00:46:57,520 --> 00:46:59,760
they can you know there's a

1353
00:46:59,760 --> 00:47:01,520
security group configured that directly

1354
00:47:01,520 --> 00:47:03,760
allows access to that vpc now these are

1355
00:47:03,760 --> 00:47:05,680
pretty standard security engineering and

1356
00:47:05,680 --> 00:47:07,200
threat modeling

1357
00:47:07,200 --> 00:47:09,680
scenarios but

1358
00:47:09,680 --> 00:47:10,800
what

1359
00:47:10,800 --> 00:47:12,720
i'd love to point out here is that the

1360
00:47:12,720 --> 00:47:15,280
complexity of these very simple use

1361
00:47:15,280 --> 00:47:17,839
cases grows incredibly in these cloud

1362
00:47:17,839 --> 00:47:19,920
native application architectures because

1363
00:47:19,920 --> 00:47:22,000
there's just more and more connectedness

1364
00:47:22,000 --> 00:47:23,359
and so assessing these types of

1365
00:47:23,359 --> 00:47:25,359
architectures um

1366
00:47:25,359 --> 00:47:27,119
through a misconfiguration based

1367
00:47:27,119 --> 00:47:28,640
approach just isn't giving you the

1368
00:47:28,640 --> 00:47:30,480
complete picture and if you're an

1369
00:47:30,480 --> 00:47:33,200
organization that's really looking at

1370
00:47:33,200 --> 00:47:34,280
you know

1371
00:47:34,280 --> 00:47:36,720
misconfiguration based tooling that's

1372
00:47:36,720 --> 00:47:38,480
kind of in your pipeline to assess this

1373
00:47:38,480 --> 00:47:40,960
infrastructure as code that is important

1374
00:47:40,960 --> 00:47:43,520
that has to be a part of the solution

1375
00:47:43,520 --> 00:47:45,119
but it cannot be

1376
00:47:45,119 --> 00:47:46,559
the only solution if you are not

1377
00:47:46,559 --> 00:47:47,839
following good security engineering

1378
00:47:47,839 --> 00:47:50,720
practices if threat modeling is not part

1379
00:47:50,720 --> 00:47:54,480
of your workflow you are missing a big

1380
00:47:54,480 --> 00:47:57,680
part of the security puzzle and you are

1381
00:47:57,680 --> 00:48:00,880
not addressing the complexity and

1382
00:48:00,880 --> 00:48:02,559
inevitably you are deploying

1383
00:48:02,559 --> 00:48:04,240
applications that

1384
00:48:04,240 --> 00:48:06,240
potentially have inherent risks and are

1385
00:48:06,240 --> 00:48:08,559
posing inherent risks to your business

1386
00:48:08,559 --> 00:48:10,559
so with that i'll stop and i'd love to

1387
00:48:10,559 --> 00:48:13,960
take any questions

