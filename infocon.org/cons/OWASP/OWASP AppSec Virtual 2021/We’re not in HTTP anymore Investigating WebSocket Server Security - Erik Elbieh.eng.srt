1
00:00:01,420 --> 00:00:05,630
[Music]

2
00:00:05,759 --> 00:00:08,880
so first hello everyone and good morning

3
00:00:08,880 --> 00:00:10,960
my name is eric and today's talk is

4
00:00:10,960 --> 00:00:13,840
titled we're not in http anymore

5
00:00:13,840 --> 00:00:17,920
investigating websocket server security

6
00:00:20,400 --> 00:00:21,840
this talk is going to be split into

7
00:00:21,840 --> 00:00:23,680
three parts first we're going to talk

8
00:00:23,680 --> 00:00:25,680
about how websockets work bit of

9
00:00:25,680 --> 00:00:28,320
background for everyone next we'll cover

10
00:00:28,320 --> 00:00:30,720
a summary of past websockets security

11
00:00:30,720 --> 00:00:32,800
research and then finally we'll get to

12
00:00:32,800 --> 00:00:36,000
this new stews tool which is released

13
00:00:36,000 --> 00:00:38,000
today

14
00:00:38,000 --> 00:00:40,559
but first a brief bio my name is eric as

15
00:00:40,559 --> 00:00:42,480
you know i'm a security researcher and

16
00:00:42,480 --> 00:00:44,960
consultant at palindrome technologies

17
00:00:44,960 --> 00:00:47,200
pen testing telecom systems web apps

18
00:00:47,200 --> 00:00:49,440
kubernetes and more is a typical day for

19
00:00:49,440 --> 00:00:50,320
me

20
00:00:50,320 --> 00:00:51,760
previously a security engineer at

21
00:00:51,760 --> 00:00:53,760
general motors working on securing

22
00:00:53,760 --> 00:00:56,640
vehicle modules a lot of bluetooth there

23
00:00:56,640 --> 00:00:59,920
oscp certified since 2019 i finished

24
00:00:59,920 --> 00:01:02,800
school and more on my website

25
00:01:02,800 --> 00:01:04,479
now to the main

26
00:01:04,479 --> 00:01:05,680
presentation

27
00:01:05,680 --> 00:01:08,880
let's get into how websockets work

28
00:01:08,880 --> 00:01:11,600
so the websocket protocol was created in

29
00:01:11,600 --> 00:01:16,640
2010 2011 with this single rfc 6455

30
00:01:16,640 --> 00:01:18,720
and the goal of the creation of this

31
00:01:18,720 --> 00:01:21,920
protocol was to provide a low overhead

32
00:01:21,920 --> 00:01:23,680
web protocol for real-time

33
00:01:23,680 --> 00:01:25,360
communications

34
00:01:25,360 --> 00:01:28,240
and i want to mention this now and i'll

35
00:01:28,240 --> 00:01:30,880
touch on it more later the websock

36
00:01:30,880 --> 00:01:33,200
websocket servers are often distinct

37
00:01:33,200 --> 00:01:35,280
from http servers

38
00:01:35,280 --> 00:01:37,680
we'll get into that

39
00:01:37,680 --> 00:01:41,520
first let's compare web sockets to http

40
00:01:41,520 --> 00:01:43,920
if you're familiar with http and its

41
00:01:43,920 --> 00:01:46,240
encrypted and unencrypted forms

42
00:01:46,240 --> 00:01:48,960
websockets work in a similar way we have

43
00:01:48,960 --> 00:01:54,640
unencrypted ws and encrypted wss

44
00:01:54,640 --> 00:01:56,880
going a bit further websockets don't

45
00:01:56,880 --> 00:01:59,280
really use the request response approach

46
00:01:59,280 --> 00:02:01,200
that http does

47
00:02:01,200 --> 00:02:03,360
web sockets remain open until they're

48
00:02:03,360 --> 00:02:05,600
closed and these sessions can last for

49
00:02:05,600 --> 00:02:07,360
hours or more

50
00:02:07,360 --> 00:02:10,000
this allows a web page to update without

51
00:02:10,000 --> 00:02:13,040
a refresh and even to get new data

52
00:02:13,040 --> 00:02:14,879
without javascript

53
00:02:14,879 --> 00:02:15,760
which

54
00:02:15,760 --> 00:02:16,879
can

55
00:02:16,879 --> 00:02:19,680
is a unique property of websockets

56
00:02:19,680 --> 00:02:21,120
one

57
00:02:21,120 --> 00:02:24,400
note is that web proxies are generally

58
00:02:24,400 --> 00:02:26,319
or at least were generally built for

59
00:02:26,319 --> 00:02:30,000
http originally and the long session

60
00:02:30,000 --> 00:02:32,000
time for web sockets

61
00:02:32,000 --> 00:02:34,879
can lead to problems

62
00:02:34,879 --> 00:02:37,680
and those are known issues uh http does

63
00:02:37,680 --> 00:02:41,040
have headers which uh adds overhead

64
00:02:41,040 --> 00:02:43,760
but websockets don't and again

65
00:02:43,760 --> 00:02:45,920
because websocket protocol is created

66
00:02:45,920 --> 00:02:48,640
for real-time communications that's by

67
00:02:48,640 --> 00:02:49,840
design

68
00:02:49,840 --> 00:02:52,160
so anyway websockets a lightweight

69
00:02:52,160 --> 00:02:55,519
protocol compared to http

70
00:02:55,519 --> 00:02:57,519
let's look at the websocket stack on the

71
00:02:57,519 --> 00:03:00,560
left we can see that the websocket layer

72
00:03:00,560 --> 00:03:02,560
is pretty much a drop in replacement for

73
00:03:02,560 --> 00:03:05,760
http occupies the same location in the

74
00:03:05,760 --> 00:03:08,159
stack and you can even have protocols on

75
00:03:08,159 --> 00:03:10,080
top of websockets

76
00:03:10,080 --> 00:03:13,120
on the right we see a websocket frame

77
00:03:13,120 --> 00:03:15,519
and the green section

78
00:03:15,519 --> 00:03:17,680
is the payload data

79
00:03:17,680 --> 00:03:19,280
and you can see that that's the majority

80
00:03:19,280 --> 00:03:21,440
of a websocket frame so we're really

81
00:03:21,440 --> 00:03:23,680
focusing on the data

82
00:03:23,680 --> 00:03:27,440
with minimum overhead

83
00:03:29,440 --> 00:03:32,080
to mention briefly there are actually

84
00:03:32,080 --> 00:03:33,920
protocols that can be implemented on top

85
00:03:33,920 --> 00:03:35,440
of websockets

86
00:03:35,440 --> 00:03:37,040
as far as i know there hasn't been any

87
00:03:37,040 --> 00:03:39,120
security research on this topic and

88
00:03:39,120 --> 00:03:40,799
unfortunately we won't be touching on

89
00:03:40,799 --> 00:03:42,000
that today

90
00:03:42,000 --> 00:03:44,720
but just to list a few of the protocols

91
00:03:44,720 --> 00:03:48,000
that can be found on top of websockets

92
00:03:48,000 --> 00:03:50,640
these are a few

93
00:03:51,760 --> 00:03:54,560
let's dive into an example websocket

94
00:03:54,560 --> 00:03:56,799
connection just so we can actually see

95
00:03:56,799 --> 00:03:58,560
what's going on

96
00:03:58,560 --> 00:03:59,519
now

97
00:03:59,519 --> 00:04:01,519
step one on the left

98
00:04:01,519 --> 00:04:04,159
is that an http request from the browser

99
00:04:04,159 --> 00:04:05,680
or other client

100
00:04:05,680 --> 00:04:08,239
is sent to the server

101
00:04:08,239 --> 00:04:10,480
and you'll see in the screenshot that

102
00:04:10,480 --> 00:04:12,720
there's a lot of instances of the word

103
00:04:12,720 --> 00:04:15,680
websocket in this request and that's by

104
00:04:15,680 --> 00:04:17,358
design that's part of the websocket

105
00:04:17,358 --> 00:04:18,720
protocol

106
00:04:18,720 --> 00:04:21,759
and then on the right we see a response

107
00:04:21,759 --> 00:04:24,080
from the server it's actually got a

108
00:04:24,080 --> 00:04:27,600
status code of 101 switching protocols

109
00:04:27,600 --> 00:04:30,720
which is a relatively rare http status

110
00:04:30,720 --> 00:04:32,320
code

111
00:04:32,320 --> 00:04:34,479
and the reason for that is not many

112
00:04:34,479 --> 00:04:38,560
protocols use http to jump start a

113
00:04:38,560 --> 00:04:40,960
separate protocol but that's how

114
00:04:40,960 --> 00:04:43,919
websockets are designed

115
00:04:43,919 --> 00:04:46,479
so a key point here is that in phase one

116
00:04:46,479 --> 00:04:48,080
of a websocket connection we are

117
00:04:48,080 --> 00:04:49,600
actually using

118
00:04:49,600 --> 00:04:54,400
http to start the websocket protocol

119
00:04:54,400 --> 00:04:56,080
it's just that in the first phase we

120
00:04:56,080 --> 00:04:57,440
don't actually have the websocket

121
00:04:57,440 --> 00:05:02,000
protocol we have the http protocol

122
00:05:02,160 --> 00:05:05,199
in phase two we have the websocket data

123
00:05:05,199 --> 00:05:06,479
being sent

124
00:05:06,479 --> 00:05:08,479
and honestly there isn't a whole lot to

125
00:05:08,479 --> 00:05:10,720
see here because again websockets are

126
00:05:10,720 --> 00:05:12,880
focused on the actual data

127
00:05:12,880 --> 00:05:15,759
and not on the overhead or headers

128
00:05:15,759 --> 00:05:18,080
unlike http

129
00:05:18,080 --> 00:05:19,360
this is just

130
00:05:19,360 --> 00:05:21,280
an example of what you might see with a

131
00:05:21,280 --> 00:05:25,840
chat application running websockets

132
00:05:27,280 --> 00:05:30,240
where are websockets found in the wild

133
00:05:30,240 --> 00:05:32,080
there's quite a few applications and

134
00:05:32,080 --> 00:05:33,520
they are growing

135
00:05:33,520 --> 00:05:36,080
keep in mind this protocol is only 10

136
00:05:36,080 --> 00:05:38,240
years old which compared to http is

137
00:05:38,240 --> 00:05:39,840
pretty young

138
00:05:39,840 --> 00:05:41,600
we have a lot of use cases including

139
00:05:41,600 --> 00:05:43,039
chat bots

140
00:05:43,039 --> 00:05:46,320
chat solutions with other humans usually

141
00:05:46,320 --> 00:05:49,199
maps that have real time updates or

142
00:05:49,199 --> 00:05:50,560
movement

143
00:05:50,560 --> 00:05:52,800
live finance data websites especially

144
00:05:52,800 --> 00:05:54,800
graphs uh same with cryptocurrency

145
00:05:54,800 --> 00:05:56,000
websites

146
00:05:56,000 --> 00:05:59,199
and a couple more unusual use cases

147
00:05:59,199 --> 00:06:01,759
include a smart tv remote control and

148
00:06:01,759 --> 00:06:06,360
even the kubernetes docker api

149
00:06:06,800 --> 00:06:08,479
so we're going to do a quick demo you

150
00:06:08,479 --> 00:06:10,639
can follow this at home kids

151
00:06:10,639 --> 00:06:12,800
yeah this is actually safe to try home

152
00:06:12,800 --> 00:06:14,880
so feel free to follow along

153
00:06:14,880 --> 00:06:17,199
so if you want to open up a web browser

154
00:06:17,199 --> 00:06:19,199
and then inside the web browser you can

155
00:06:19,199 --> 00:06:21,360
open up the developer tools

156
00:06:21,360 --> 00:06:24,240
shortcut is ctrl shift i or you can find

157
00:06:24,240 --> 00:06:25,440
it in the menus

158
00:06:25,440 --> 00:06:27,280
and then within developer tools there is

159
00:06:27,280 --> 00:06:29,039
a network tab

160
00:06:29,039 --> 00:06:30,800
now in the network tab i know we're

161
00:06:30,800 --> 00:06:32,720
getting deep into the developer tools

162
00:06:32,720 --> 00:06:35,280
here there's a ws button which stands

163
00:06:35,280 --> 00:06:37,600
for web sockets and if you click that

164
00:06:37,600 --> 00:06:39,360
the browser will still will start

165
00:06:39,360 --> 00:06:42,240
filtering for the websocket traffic

166
00:06:42,240 --> 00:06:44,639
i've listed a few example websites here

167
00:06:44,639 --> 00:06:46,800
based on the different applications or

168
00:06:46,800 --> 00:06:49,039
use cases for websockets so you can

169
00:06:49,039 --> 00:06:51,039
visit whichever site you'd like

170
00:06:51,039 --> 00:06:51,840
and

171
00:06:51,840 --> 00:06:54,160
after the web page loads you'll actually

172
00:06:54,160 --> 00:06:56,479
see some websocket traffic in your

173
00:06:56,479 --> 00:06:59,039
browser developer tools

174
00:06:59,039 --> 00:07:01,360
of course web proxies like burp suite

175
00:07:01,360 --> 00:07:03,520
and owasp's app will also capture this

176
00:07:03,520 --> 00:07:04,560
traffic

177
00:07:04,560 --> 00:07:06,720
but do note that these tools actually

178
00:07:06,720 --> 00:07:09,280
show the websocket traffic in a separate

179
00:07:09,280 --> 00:07:13,199
tab from the http traffic

180
00:07:13,199 --> 00:07:15,120
and just to clarify what i was talking

181
00:07:15,120 --> 00:07:16,639
about on the previous slide i have a

182
00:07:16,639 --> 00:07:18,880
couple of screenshots here in the first

183
00:07:18,880 --> 00:07:21,360
screenshot we see the firefox web

184
00:07:21,360 --> 00:07:23,280
browser developer tools

185
00:07:23,280 --> 00:07:26,240
there is that ws button to filter the

186
00:07:26,240 --> 00:07:27,840
websocket traffic

187
00:07:27,840 --> 00:07:29,840
and then for burp suite you can see the

188
00:07:29,840 --> 00:07:32,960
websockets history tab is separate from

189
00:07:32,960 --> 00:07:36,638
the http history tab

190
00:07:38,560 --> 00:07:39,840
great

191
00:07:39,840 --> 00:07:41,759
so hopefully that level sets everyone to

192
00:07:41,759 --> 00:07:44,240
have a bit of background for what

193
00:07:44,240 --> 00:07:46,240
websockets are a little bit about how

194
00:07:46,240 --> 00:07:48,240
they function and now we're going to

195
00:07:48,240 --> 00:07:50,240
dive into a summary of the past

196
00:07:50,240 --> 00:07:53,840
websocket security research

197
00:07:55,919 --> 00:07:57,919
to be quite honest there isn't a whole

198
00:07:57,919 --> 00:08:00,240
lot to cover here um which is part of

199
00:08:00,240 --> 00:08:02,800
the reason uh for this talk

200
00:08:02,800 --> 00:08:04,879
i've highlighted perhaps three of the

201
00:08:04,879 --> 00:08:07,120
top

202
00:08:07,120 --> 00:08:10,720
events in websocket security history

203
00:08:10,720 --> 00:08:12,639
so in 2011

204
00:08:12,639 --> 00:08:14,639
keep in mind the websocket protocol was

205
00:08:14,639 --> 00:08:16,560
created right around this time

206
00:08:16,560 --> 00:08:19,280
firefox 4 actually temporarily removed

207
00:08:19,280 --> 00:08:21,759
websocket support due to a protocol

208
00:08:21,759 --> 00:08:22,879
issue

209
00:08:22,879 --> 00:08:24,240
i would like to point out this was

210
00:08:24,240 --> 00:08:26,319
before the websocket protocol was

211
00:08:26,319 --> 00:08:29,039
finalized in its current form

212
00:08:29,039 --> 00:08:31,120
but it does show that there have been

213
00:08:31,120 --> 00:08:33,200
security issues with the protocol for a

214
00:08:33,200 --> 00:08:34,640
while

215
00:08:34,640 --> 00:08:39,440
in 2016 five years after that event

216
00:08:39,440 --> 00:08:41,919
a blog post is published describing

217
00:08:41,919 --> 00:08:44,480
cross-site websocket hijacking which is

218
00:08:44,480 --> 00:08:46,240
a mouthful

219
00:08:46,240 --> 00:08:49,760
but all it says is that the

220
00:08:49,760 --> 00:08:52,800
http csrf mitigation cores

221
00:08:52,800 --> 00:08:56,000
doesn't apply to the websocket protocol

222
00:08:56,000 --> 00:08:58,959
and that means that if web developers

223
00:08:58,959 --> 00:09:00,959
are using websockets and they're not

224
00:09:00,959 --> 00:09:02,959
aware of this they might assume that

225
00:09:02,959 --> 00:09:05,440
they are protected but in fact that

226
00:09:05,440 --> 00:09:07,519
protection doesn't apply to web sockets

227
00:09:07,519 --> 00:09:09,360
you have to perform a separate

228
00:09:09,360 --> 00:09:11,360
mitigation specifically for this

229
00:09:11,360 --> 00:09:13,839
protocol

230
00:09:13,839 --> 00:09:17,040
three years after that in 2019 a talk is

231
00:09:17,040 --> 00:09:18,160
published

232
00:09:18,160 --> 00:09:19,680
describing

233
00:09:19,680 --> 00:09:22,480
specific attacks against web proxies

234
00:09:22,480 --> 00:09:25,040
reverse proxies that don't properly

235
00:09:25,040 --> 00:09:27,920
handle web sockets which can lead to

236
00:09:27,920 --> 00:09:31,199
websocket smuggling

237
00:09:32,080 --> 00:09:34,480
and i wanted to highlight this it's not

238
00:09:34,480 --> 00:09:36,240
a specific

239
00:09:36,240 --> 00:09:39,200
research event but it is certainly an

240
00:09:39,200 --> 00:09:42,560
event in websockets history

241
00:09:42,560 --> 00:09:44,080
last year there was a lot of press

242
00:09:44,080 --> 00:09:46,480
around ebay port scanning systems when

243
00:09:46,480 --> 00:09:48,480
you load their web page and that was

244
00:09:48,480 --> 00:09:50,640
done over websockets

245
00:09:50,640 --> 00:09:52,320
at the bottom here i have a screenshot

246
00:09:52,320 --> 00:09:54,160
from a slide deck with the link for the

247
00:09:54,160 --> 00:09:56,720
slide deck uh describing a bit more

248
00:09:56,720 --> 00:09:59,760
about poor scanning with websockets so

249
00:09:59,760 --> 00:10:02,800
again a known issue and one that as we

250
00:10:02,800 --> 00:10:04,720
saw last year can have real world

251
00:10:04,720 --> 00:10:07,440
consequences

252
00:10:08,959 --> 00:10:11,279
for those who prefer the visual format

253
00:10:11,279 --> 00:10:13,120
like myself this is just a quick

254
00:10:13,120 --> 00:10:16,839
timeline of websocket security research

255
00:10:16,839 --> 00:10:20,480
history again the key point is that uh

256
00:10:20,480 --> 00:10:22,240
there hasn't been all that much when you

257
00:10:22,240 --> 00:10:25,200
compare it to a protocol like http which

258
00:10:25,200 --> 00:10:27,920
appears to get all the attention

259
00:10:27,920 --> 00:10:28,800
these

260
00:10:28,800 --> 00:10:31,279
red the red text and the red events

261
00:10:31,279 --> 00:10:32,480
these are

262
00:10:32,480 --> 00:10:35,279
related to a similar topic it's not

263
00:10:35,279 --> 00:10:38,240
actually web socket related but it is

264
00:10:38,240 --> 00:10:41,040
related to that 101 response from the

265
00:10:41,040 --> 00:10:44,320
server the http 101 status

266
00:10:44,320 --> 00:10:47,279
which is also used for http 2

267
00:10:47,279 --> 00:10:51,839
when you transition from http 1.

268
00:10:52,800 --> 00:10:56,079
okay so quick takeaways from past

269
00:10:56,079 --> 00:10:58,240
research

270
00:10:58,240 --> 00:11:00,959
i guess at a high level uh there hasn't

271
00:11:00,959 --> 00:11:03,040
been a lot of large-scale security

272
00:11:03,040 --> 00:11:06,000
testing of websockets in the wild

273
00:11:06,000 --> 00:11:08,160
it's sort of been

274
00:11:08,160 --> 00:11:11,120
specific use cases specific scenarios

275
00:11:11,120 --> 00:11:13,600
and often focused on the protocol level

276
00:11:13,600 --> 00:11:15,440
and then more recently on the proxy

277
00:11:15,440 --> 00:11:18,720
mishandling of websockets

278
00:11:18,720 --> 00:11:20,720
so the question remains what about the

279
00:11:20,720 --> 00:11:23,040
server implementations and the security

280
00:11:23,040 --> 00:11:24,800
there

281
00:11:24,800 --> 00:11:26,839
it does appear that http gets all the

282
00:11:26,839 --> 00:11:29,279
attention and just to drive that point

283
00:11:29,279 --> 00:11:30,800
home

284
00:11:30,800 --> 00:11:32,560
perhaps

285
00:11:32,560 --> 00:11:34,560
some listeners have seen a graph

286
00:11:34,560 --> 00:11:35,920
somewhat like this

287
00:11:35,920 --> 00:11:38,800
or are simply aware of some of the top

288
00:11:38,800 --> 00:11:42,480
http servers that are out there at this

289
00:11:42,480 --> 00:11:45,760
point apache http and nginx are probably

290
00:11:45,760 --> 00:11:48,000
the top two um

291
00:11:48,000 --> 00:11:48,959
and

292
00:11:48,959 --> 00:11:50,720
the interesting thing is we have this

293
00:11:50,720 --> 00:11:53,680
data going back for two plus decades at

294
00:11:53,680 --> 00:11:56,880
this point for http servers on the web

295
00:11:56,880 --> 00:11:58,160
um the

296
00:11:58,160 --> 00:11:59,920
the thing is

297
00:11:59,920 --> 00:12:01,839
we don't really know what's going on

298
00:12:01,839 --> 00:12:04,399
with the web sub websocket server

299
00:12:04,399 --> 00:12:06,720
implementations um it's kind of a

300
00:12:06,720 --> 00:12:07,920
question mark

301
00:12:07,920 --> 00:12:11,839
and i'll get into perhaps why that is in

302
00:12:11,839 --> 00:12:14,240
a moment

303
00:12:15,440 --> 00:12:18,320
now if you remember i i was talking

304
00:12:18,320 --> 00:12:20,720
earlier and more recently about how

305
00:12:20,720 --> 00:12:24,399
websocket servers are distinct from http

306
00:12:24,399 --> 00:12:26,399
servers

307
00:12:26,399 --> 00:12:28,240
this slide sort of shows an example of

308
00:12:28,240 --> 00:12:29,200
that

309
00:12:29,200 --> 00:12:32,079
these are some of the most popular

310
00:12:32,079 --> 00:12:34,560
websocket server implementations

311
00:12:34,560 --> 00:12:36,560
along with the programming language

312
00:12:36,560 --> 00:12:38,880
they're built in and

313
00:12:38,880 --> 00:12:40,480
i guess you can read through the list on

314
00:12:40,480 --> 00:12:42,480
the far left column i don't know how

315
00:12:42,480 --> 00:12:43,760
many names

316
00:12:43,760 --> 00:12:45,600
of these servers are familiar to

317
00:12:45,600 --> 00:12:47,120
listeners but

318
00:12:47,120 --> 00:12:49,519
based on the far right column the github

319
00:12:49,519 --> 00:12:51,120
star count which is pretty much all

320
00:12:51,120 --> 00:12:53,440
we've got in terms of data for what the

321
00:12:53,440 --> 00:12:55,279
most popular ones are

322
00:12:55,279 --> 00:12:57,600
obviously developers are using these

323
00:12:57,600 --> 00:13:00,240
servers it's just we don't have much

324
00:13:00,240 --> 00:13:02,800
data on where they are or how they are

325
00:13:02,800 --> 00:13:04,560
used in the

326
00:13:04,560 --> 00:13:06,800
publicly accessible internet

327
00:13:06,800 --> 00:13:07,600
so

328
00:13:07,600 --> 00:13:11,600
that is what we will get into shortly

329
00:13:11,600 --> 00:13:13,680
i'd also like to mention real quick

330
00:13:13,680 --> 00:13:16,320
the previous slide showing the top http

331
00:13:16,320 --> 00:13:17,360
servers

332
00:13:17,360 --> 00:13:19,120
it i would say the majority of the

333
00:13:19,120 --> 00:13:21,279
market share is really split between

334
00:13:21,279 --> 00:13:24,399
maybe three or four http servers but

335
00:13:24,399 --> 00:13:27,600
here we can see it's not really uh that

336
00:13:27,600 --> 00:13:30,399
dominated in the websocket server

337
00:13:30,399 --> 00:13:31,839
market share

338
00:13:31,839 --> 00:13:33,920
it really is sort of split up by what's

339
00:13:33,920 --> 00:13:36,320
your preferred programming language for

340
00:13:36,320 --> 00:13:38,079
the backend system

341
00:13:38,079 --> 00:13:42,160
so just an interesting observation

342
00:13:43,519 --> 00:13:44,560
okay

343
00:13:44,560 --> 00:13:47,199
now we are jumping into the uh more

344
00:13:47,199 --> 00:13:50,480
interesting uh and new part of this talk

345
00:13:50,480 --> 00:13:54,480
which is the stews tool or tool set

346
00:13:54,480 --> 00:13:56,639
so first

347
00:13:56,639 --> 00:13:58,800
like to say who doesn't like free stuff

348
00:13:58,800 --> 00:14:00,720
these tools are released today fresh out

349
00:14:00,720 --> 00:14:02,720
of the oven i will leave this slide up

350
00:14:02,720 --> 00:14:04,959
for a brief moment so you can pull up

351
00:14:04,959 --> 00:14:06,959
the urls that you'd like get the

352
00:14:06,959 --> 00:14:08,720
repository

353
00:14:08,720 --> 00:14:10,720
the first link here is the actual

354
00:14:10,720 --> 00:14:13,360
repository for the strews tool that also

355
00:14:13,360 --> 00:14:15,519
includes a white paper and this slide

356
00:14:15,519 --> 00:14:17,760
deck so you can have a copy

357
00:14:17,760 --> 00:14:20,079
second repository is the websockets

358
00:14:20,079 --> 00:14:21,199
playground

359
00:14:21,199 --> 00:14:23,680
it's a way that you can quickly set up a

360
00:14:23,680 --> 00:14:25,839
bunch of websocket servers for local

361
00:14:25,839 --> 00:14:27,680
testing on your system

362
00:14:27,680 --> 00:14:29,760
and lastly we have the websockets

363
00:14:29,760 --> 00:14:33,120
security awesome which is a compilation

364
00:14:33,120 --> 00:14:35,279
of security research on the topic of

365
00:14:35,279 --> 00:14:37,360
websockets so i'll leave this here for a

366
00:14:37,360 --> 00:14:39,680
quick sec grab a drink of water and you

367
00:14:39,680 --> 00:14:43,319
can open up the links

368
00:14:56,839 --> 00:15:00,320
okay grit

369
00:15:00,639 --> 00:15:03,199
moving on

370
00:15:04,480 --> 00:15:05,839
so

371
00:15:05,839 --> 00:15:09,120
what is the point of this stu's tool set

372
00:15:09,120 --> 00:15:11,600
that's just been released

373
00:15:11,600 --> 00:15:13,839
to be quite honest i was hoping such a

374
00:15:13,839 --> 00:15:15,839
tool set would not be necessary i was

375
00:15:15,839 --> 00:15:18,000
hoping that when i'm encountering these

376
00:15:18,000 --> 00:15:20,959
websockets and my testing i could just

377
00:15:20,959 --> 00:15:23,760
pull an existing tool off the shelf use

378
00:15:23,760 --> 00:15:25,199
it and it would already have the

379
00:15:25,199 --> 00:15:28,240
features i was looking for um

380
00:15:28,240 --> 00:15:30,560
it turns out things aren't uh that

381
00:15:30,560 --> 00:15:33,120
simple unfortunately and

382
00:15:33,120 --> 00:15:36,079
again that i i blame that on http

383
00:15:36,079 --> 00:15:37,839
getting all the attention

384
00:15:37,839 --> 00:15:40,880
so i've listed a few great tools here

385
00:15:40,880 --> 00:15:42,959
it's just that unfortunately they lack

386
00:15:42,959 --> 00:15:45,759
in this very specific niche of

387
00:15:45,759 --> 00:15:50,000
customizing websocket server test cases

388
00:15:50,000 --> 00:15:53,120
the first nmap a great all-around tool

389
00:15:53,120 --> 00:15:55,279
unfortunately the

390
00:15:55,279 --> 00:15:57,440
post in 2015

391
00:15:57,440 --> 00:15:59,440
offering the idea of websocket support

392
00:15:59,440 --> 00:16:01,839
did not get very far

393
00:16:01,839 --> 00:16:03,759
as for burp suite it actually does

394
00:16:03,759 --> 00:16:06,480
support web sockets which is fantastic

395
00:16:06,480 --> 00:16:08,720
unfortunately it does not support

396
00:16:08,720 --> 00:16:11,199
websockets for extensions which is how

397
00:16:11,199 --> 00:16:13,680
you can customize burp suite

398
00:16:13,680 --> 00:16:15,519
lastly nuclei

399
00:16:15,519 --> 00:16:18,079
it does appear that there is some

400
00:16:18,079 --> 00:16:20,399
progress on this open issue

401
00:16:20,399 --> 00:16:22,320
but it's not yet closed out and it's

402
00:16:22,320 --> 00:16:24,480
unclear when that will happen so again

403
00:16:24,480 --> 00:16:26,240
these are great tools it's just that

404
00:16:26,240 --> 00:16:28,000
unfortunately in a small niche it

405
00:16:28,000 --> 00:16:30,240
doesn't appear that they've gotten to uh

406
00:16:30,240 --> 00:16:32,639
implementing custom websocket test

407
00:16:32,639 --> 00:16:34,000
support yet

408
00:16:34,000 --> 00:16:35,600
i hypothesize

409
00:16:35,600 --> 00:16:36,800
that's because

410
00:16:36,800 --> 00:16:38,320
websockets

411
00:16:38,320 --> 00:16:40,880
again just like the issue with web

412
00:16:40,880 --> 00:16:42,079
proxies

413
00:16:42,079 --> 00:16:44,800
these tools are built for http

414
00:16:44,800 --> 00:16:47,839
and supporting long duration websocket

415
00:16:47,839 --> 00:16:49,440
connections

416
00:16:49,440 --> 00:16:52,880
probably requires some redesign of the

417
00:16:52,880 --> 00:16:55,360
underlying tools so

418
00:16:55,360 --> 00:16:58,000
again we see the difference between http

419
00:16:58,000 --> 00:17:03,000
and websockets rearing its head

420
00:17:04,079 --> 00:17:07,520
stews is let's say a clever acronym for

421
00:17:07,520 --> 00:17:10,319
security testing and enumeration of

422
00:17:10,319 --> 00:17:12,319
websockets

423
00:17:12,319 --> 00:17:14,959
and it's designed to do three

424
00:17:14,959 --> 00:17:16,559
key things

425
00:17:16,559 --> 00:17:18,480
the first is to

426
00:17:18,480 --> 00:17:21,359
allow for the discovery of websockets

427
00:17:21,359 --> 00:17:22,640
and points

428
00:17:22,640 --> 00:17:25,359
the second is to perform fingerprinting

429
00:17:25,359 --> 00:17:26,880
which will tell you a bit about what's

430
00:17:26,880 --> 00:17:29,600
going on with the backend websocket

431
00:17:29,600 --> 00:17:30,720
server

432
00:17:30,720 --> 00:17:35,280
and the last is vulnerability detection

433
00:17:39,760 --> 00:17:42,400
so let's dive into these three

434
00:17:42,400 --> 00:17:45,600
key features of the stews toolset

435
00:17:45,600 --> 00:17:48,480
the first is websocket discovery

436
00:17:48,480 --> 00:17:52,240
and this is actually rather hard and

437
00:17:52,240 --> 00:17:55,840
i'll try and explain why it's hard

438
00:17:55,840 --> 00:17:58,799
in fact first as a thought experiment

439
00:17:58,799 --> 00:18:00,720
i'm sure if i asked you to provide me

440
00:18:00,720 --> 00:18:04,160
with the endpoint of an http server you

441
00:18:04,160 --> 00:18:06,640
would have no problem listing out

442
00:18:06,640 --> 00:18:09,120
any number of urls that you visit

443
00:18:09,120 --> 00:18:10,240
frequently

444
00:18:10,240 --> 00:18:12,480
however if i was to ask you for a

445
00:18:12,480 --> 00:18:14,640
websocket url

446
00:18:14,640 --> 00:18:16,559
i would bet that the majority of the

447
00:18:16,559 --> 00:18:18,320
audience would be stumped by that

448
00:18:18,320 --> 00:18:19,919
question at least off the top of their

449
00:18:19,919 --> 00:18:20,720
head

450
00:18:20,720 --> 00:18:22,320
unless you remember the slides i showed

451
00:18:22,320 --> 00:18:25,120
earlier that had those urls

452
00:18:25,120 --> 00:18:27,760
now the first reason why websocket

453
00:18:27,760 --> 00:18:30,320
endpoint discovery is hard

454
00:18:30,320 --> 00:18:34,559
is that as we saw websockets use http

455
00:18:34,559 --> 00:18:37,280
to start a connection

456
00:18:37,280 --> 00:18:39,679
but if you see http

457
00:18:39,679 --> 00:18:41,280
alone it doesn't mean that you have a

458
00:18:41,280 --> 00:18:43,039
websocket

459
00:18:43,039 --> 00:18:44,080
often

460
00:18:44,080 --> 00:18:48,160
http is just http it's it's not allowing

461
00:18:48,160 --> 00:18:50,559
you to create a new websocket connection

462
00:18:50,559 --> 00:18:52,160
from it

463
00:18:52,160 --> 00:18:54,880
the second reason websocket endpoint

464
00:18:54,880 --> 00:18:56,480
discovery is hard

465
00:18:56,480 --> 00:18:58,160
is that websockets often start

466
00:18:58,160 --> 00:19:01,440
websockets with javas oh sorry websites

467
00:19:01,440 --> 00:19:04,240
often start websockets with javascript

468
00:19:04,240 --> 00:19:06,160
so you can't just look through the html

469
00:19:06,160 --> 00:19:09,360
let's say a spider and quickly pull out

470
00:19:09,360 --> 00:19:11,919
oh here's a url there's url you actually

471
00:19:11,919 --> 00:19:14,400
have to render the javascript which

472
00:19:14,400 --> 00:19:16,080
naturally if you're spidering a large

473
00:19:16,080 --> 00:19:18,880
website takes a lot of time

474
00:19:18,880 --> 00:19:20,240
and then often

475
00:19:20,240 --> 00:19:22,880
you can even find that there's no direct

476
00:19:22,880 --> 00:19:26,640
link to create a websocket connection

477
00:19:26,640 --> 00:19:28,400
from the main website

478
00:19:28,400 --> 00:19:30,480
instead the websocket endpoint is a

479
00:19:30,480 --> 00:19:32,559
standalone url

480
00:19:32,559 --> 00:19:34,880
either a standalone api or for some

481
00:19:34,880 --> 00:19:38,400
other purpose that might not actually

482
00:19:38,400 --> 00:19:39,200
get

483
00:19:39,200 --> 00:19:40,000
uh

484
00:19:40,000 --> 00:19:41,919
create or the connection may never get

485
00:19:41,919 --> 00:19:44,320
created from browsing the main website

486
00:19:44,320 --> 00:19:47,039
uh it's for say a custom client or a

487
00:19:47,039 --> 00:19:49,679
separate tool

488
00:19:49,679 --> 00:19:51,760
and finally

489
00:19:51,760 --> 00:19:53,039
perhaps

490
00:19:53,039 --> 00:19:54,960
well all of these make the process

491
00:19:54,960 --> 00:19:57,760
difficult but the last one is that uh

492
00:19:57,760 --> 00:20:00,160
websockets might only exist at one

493
00:20:00,160 --> 00:20:04,880
specific url path of a specific port of

494
00:20:04,880 --> 00:20:06,480
the endpoint

495
00:20:06,480 --> 00:20:07,679
and

496
00:20:07,679 --> 00:20:10,000
if you're familiar with http you're

497
00:20:10,000 --> 00:20:12,240
often finding servers at port 80 for

498
00:20:12,240 --> 00:20:15,600
unencrypted port 443 for encrypted

499
00:20:15,600 --> 00:20:18,240
and that's often similar for websockets

500
00:20:18,240 --> 00:20:20,960
but it's not always the case

501
00:20:20,960 --> 00:20:21,919
and

502
00:20:21,919 --> 00:20:24,720
unlike a website which often has many

503
00:20:24,720 --> 00:20:27,679
url paths that make up the website the

504
00:20:27,679 --> 00:20:30,080
websocket might only be at one single

505
00:20:30,080 --> 00:20:31,200
path

506
00:20:31,200 --> 00:20:33,679
just visiting the website and

507
00:20:33,679 --> 00:20:36,159
navigating half of it you might still

508
00:20:36,159 --> 00:20:38,159
miss the websocket endpoint

509
00:20:38,159 --> 00:20:40,159
because it could just be at one specific

510
00:20:40,159 --> 00:20:41,440
location

511
00:20:41,440 --> 00:20:42,159
so

512
00:20:42,159 --> 00:20:44,480
all of these factors combined

513
00:20:44,480 --> 00:20:46,880
make it difficult to actually find

514
00:20:46,880 --> 00:20:48,559
a lot of websockets on the internet

515
00:20:48,559 --> 00:20:51,120
quickly and i would argue

516
00:20:51,120 --> 00:20:52,720
this is probably the top reason that we

517
00:20:52,720 --> 00:20:55,200
don't have great data on what websocket

518
00:20:55,200 --> 00:20:57,280
servers are currently on the public

519
00:20:57,280 --> 00:20:58,400
internet

520
00:20:58,400 --> 00:20:59,200
because

521
00:20:59,200 --> 00:21:01,440
just finding them is a challenge

522
00:21:01,440 --> 00:21:03,360
um but that's what stews is here to help

523
00:21:03,360 --> 00:21:06,000
with hopefully

524
00:21:07,200 --> 00:21:08,240
so

525
00:21:08,240 --> 00:21:09,280
we just went through all these

526
00:21:09,280 --> 00:21:12,000
challenges uh and

527
00:21:12,000 --> 00:21:14,240
i i won't pretend that there's an easy

528
00:21:14,240 --> 00:21:17,360
answer to all of them but there are a

529
00:21:17,360 --> 00:21:19,360
few approaches that you might think of

530
00:21:19,360 --> 00:21:21,600
in terms of how to solve these

531
00:21:21,600 --> 00:21:23,360
difficulties

532
00:21:23,360 --> 00:21:24,799
so

533
00:21:24,799 --> 00:21:26,159
i broke this into two different

534
00:21:26,159 --> 00:21:28,159
categories the first category is finding

535
00:21:28,159 --> 00:21:30,799
websockets on one single website or

536
00:21:30,799 --> 00:21:32,960
domain and the second category is

537
00:21:32,960 --> 00:21:35,440
finding websites websockets on any

538
00:21:35,440 --> 00:21:37,679
website or domain

539
00:21:37,679 --> 00:21:39,200
so if you're limited to a specific

540
00:21:39,200 --> 00:21:41,840
website or domain so you're only testing

541
00:21:41,840 --> 00:21:43,440
say

542
00:21:43,440 --> 00:21:48,080
a specific domain for whatever reason

543
00:21:48,080 --> 00:21:50,559
the most obvious solution is to spider

544
00:21:50,559 --> 00:21:53,280
the website to try and look around see

545
00:21:53,280 --> 00:21:55,760
if you can find a

546
00:21:55,760 --> 00:21:58,080
response from the server that is a

547
00:21:58,080 --> 00:22:00,240
status 101

548
00:22:00,240 --> 00:22:03,280
response which will often indicate

549
00:22:03,280 --> 00:22:04,640
websocket

550
00:22:04,640 --> 00:22:06,080
being started

551
00:22:06,080 --> 00:22:06,960
so

552
00:22:06,960 --> 00:22:09,120
you could just look at the html and try

553
00:22:09,120 --> 00:22:11,039
and look for websocket keywords maybe

554
00:22:11,039 --> 00:22:13,520
even look in the javascript code

555
00:22:13,520 --> 00:22:15,200
but there's a lot of false positives if

556
00:22:15,200 --> 00:22:17,360
you're just looking for a keyword among

557
00:22:17,360 --> 00:22:18,480
text

558
00:22:18,480 --> 00:22:19,840
you don't actually know if the

559
00:22:19,840 --> 00:22:23,200
connection exists at a certain endpoint

560
00:22:23,200 --> 00:22:25,200
now if you are to actually load all the

561
00:22:25,200 --> 00:22:27,280
javascript and then watch all the

562
00:22:27,280 --> 00:22:29,520
responses

563
00:22:29,520 --> 00:22:32,720
in that case you're more likely to find

564
00:22:32,720 --> 00:22:35,679
a websocket on a specific domain but the

565
00:22:35,679 --> 00:22:38,080
problem is it's a it's a slow process

566
00:22:38,080 --> 00:22:40,000
you're going to have to load quite a bit

567
00:22:40,000 --> 00:22:42,640
of javascript um at some point you might

568
00:22:42,640 --> 00:22:44,159
just consider browsing the website

569
00:22:44,159 --> 00:22:46,400
manually um

570
00:22:46,400 --> 00:22:49,600
and uh yeah i think the downside to this

571
00:22:49,600 --> 00:22:51,919
approach is that it's slow

572
00:22:51,919 --> 00:22:54,720
in terms of spidering a website now if

573
00:22:54,720 --> 00:22:56,960
we don't care where the websocket is if

574
00:22:56,960 --> 00:22:58,880
we just want to analyze websockets on

575
00:22:58,880 --> 00:23:00,960
the public internet regardless of where

576
00:23:00,960 --> 00:23:02,159
they are

577
00:23:02,159 --> 00:23:03,760
then we might try a different approach

578
00:23:03,760 --> 00:23:05,840
we don't have to necessarily open every

579
00:23:05,840 --> 00:23:08,720
website spider to every page

580
00:23:08,720 --> 00:23:11,200
and load the javascript instead we might

581
00:23:11,200 --> 00:23:13,120
be able to just use a word list of

582
00:23:13,120 --> 00:23:16,000
common endpoints and brute force a large

583
00:23:16,000 --> 00:23:18,880
list of website domains

584
00:23:18,880 --> 00:23:20,720
of course this approach has its own

585
00:23:20,720 --> 00:23:22,799
downside which is that you're only

586
00:23:22,799 --> 00:23:25,280
testing the word list endpoints

587
00:23:25,280 --> 00:23:27,919
the positive perspective of this last

588
00:23:27,919 --> 00:23:30,480
idea is that it could be fast

589
00:23:30,480 --> 00:23:33,520
because we're not spidering each website

590
00:23:33,520 --> 00:23:35,600
we're just testing a few

591
00:23:35,600 --> 00:23:39,039
key likely locations on a large number

592
00:23:39,039 --> 00:23:40,640
of websites

593
00:23:40,640 --> 00:23:42,559
and it is this last approach as you may

594
00:23:42,559 --> 00:23:44,559
have guessed that was chosen for the

595
00:23:44,559 --> 00:23:46,799
stu's discovery tool

596
00:23:46,799 --> 00:23:49,120
primarily because it's easily scalable

597
00:23:49,120 --> 00:23:51,200
to large number of websites across the

598
00:23:51,200 --> 00:23:53,600
internet

599
00:23:55,440 --> 00:23:58,400
okay so we've chosen an approach are the

600
00:23:58,400 --> 00:24:01,279
difficulties all handled not not quite

601
00:24:01,279 --> 00:24:03,679
yet we still have a few

602
00:24:03,679 --> 00:24:06,400
so the first difficulty is how do we do

603
00:24:06,400 --> 00:24:07,760
this scanning

604
00:24:07,760 --> 00:24:09,760
let's say we have a long list of domains

605
00:24:09,760 --> 00:24:11,360
how do we know if any of them have

606
00:24:11,360 --> 00:24:12,880
websockets

607
00:24:12,880 --> 00:24:13,600
so

608
00:24:13,600 --> 00:24:15,120
you may have heard of tools like mass

609
00:24:15,120 --> 00:24:18,159
scan or z-map that have done internet

610
00:24:18,159 --> 00:24:21,200
scale port scans and mapped the internet

611
00:24:21,200 --> 00:24:22,720
so to say

612
00:24:22,720 --> 00:24:24,880
unfortunately these tools work at the

613
00:24:24,880 --> 00:24:28,240
tcp ip layer and we need to go a layer

614
00:24:28,240 --> 00:24:31,919
above that to http or websockets

615
00:24:31,919 --> 00:24:33,120
now again

616
00:24:33,120 --> 00:24:35,120
these tools would be great if finding an

617
00:24:35,120 --> 00:24:37,840
open port was equal to finding a

618
00:24:37,840 --> 00:24:39,440
websocket server

619
00:24:39,440 --> 00:24:42,000
but even if we find an open port on port

620
00:24:42,000 --> 00:24:43,440
443

621
00:24:43,440 --> 00:24:46,000
it could just be an http server we don't

622
00:24:46,000 --> 00:24:49,840
know if it supports websockets

623
00:24:49,919 --> 00:24:52,000
so those tools won't work at least

624
00:24:52,000 --> 00:24:54,400
without heavy modification

625
00:24:54,400 --> 00:24:56,080
now option number two

626
00:24:56,080 --> 00:24:58,720
is burp suites turbo intruder we know

627
00:24:58,720 --> 00:25:02,080
that this can do fast http traffic

628
00:25:02,080 --> 00:25:03,600
communication

629
00:25:03,600 --> 00:25:06,320
now the difficulty here is that the

630
00:25:06,320 --> 00:25:08,720
turbo intruder documentation itself

631
00:25:08,720 --> 00:25:11,200
states that it's designed for sending

632
00:25:11,200 --> 00:25:14,159
lots of requests to a single host now we

633
00:25:14,159 --> 00:25:16,640
want to do the opposite we want to sign

634
00:25:16,640 --> 00:25:17,520
send

635
00:25:17,520 --> 00:25:18,960
a

636
00:25:18,960 --> 00:25:22,480
few requests to many hosts

637
00:25:22,480 --> 00:25:24,559
now fortunately the documentation there

638
00:25:24,559 --> 00:25:26,799
does suggest an alternative for what we

639
00:25:26,799 --> 00:25:29,360
want which is z grab

640
00:25:29,360 --> 00:25:32,640
and z grab 2 is provides fast

641
00:25:32,640 --> 00:25:35,039
application layer scanning

642
00:25:35,039 --> 00:25:37,279
however it does require a few tweaks to

643
00:25:37,279 --> 00:25:40,159
support websocket requests

644
00:25:40,159 --> 00:25:42,960
and there is a separate z-grab 2 fork

645
00:25:42,960 --> 00:25:45,760
that was used for this testing which is

646
00:25:45,760 --> 00:25:47,440
mentioned in the

647
00:25:47,440 --> 00:25:50,720
existing repositories

648
00:25:51,120 --> 00:25:53,600
okay so we've got we've got a tool it

649
00:25:53,600 --> 00:25:57,440
can scan many websites for potentially

650
00:25:57,440 --> 00:26:01,760
101 status uh http status responses

651
00:26:01,760 --> 00:26:05,200
that's great um now we need to find the

652
00:26:05,200 --> 00:26:07,120
targets that we're going to scan

653
00:26:07,120 --> 00:26:09,279
now the first option here is to just

654
00:26:09,279 --> 00:26:12,000
google top million urls i haven't let me

655
00:26:12,000 --> 00:26:14,799
google that link for you to make it easy

656
00:26:14,799 --> 00:26:17,200
but a second option which would perhaps

657
00:26:17,200 --> 00:26:19,840
be a more thorough alternative is to use

658
00:26:19,840 --> 00:26:21,200
zone files

659
00:26:21,200 --> 00:26:23,760
now zone files are

660
00:26:23,760 --> 00:26:26,880
effectively what dns servers use to map

661
00:26:26,880 --> 00:26:29,440
domain names to ip addresses so in

662
00:26:29,440 --> 00:26:31,840
theory this is a more comprehensive list

663
00:26:31,840 --> 00:26:34,960
of say all of the dot com

664
00:26:34,960 --> 00:26:38,799
top level domains that exist or dot org

665
00:26:38,799 --> 00:26:41,600
the downside is that uh unfortunately

666
00:26:41,600 --> 00:26:43,840
many of the urls in the zone file are

667
00:26:43,840 --> 00:26:45,919
not actually active so they're sort of

668
00:26:45,919 --> 00:26:48,559
dead links if you will and additionally

669
00:26:48,559 --> 00:26:50,799
the dot com

670
00:26:50,799 --> 00:26:52,480
top level domain file

671
00:26:52,480 --> 00:26:55,679
is a text file that's over 20 gigabytes

672
00:26:55,679 --> 00:26:56,559
so

673
00:26:56,559 --> 00:26:58,720
you're handling very large amounts of

674
00:26:58,720 --> 00:27:00,559
endpoints in that case and it might be

675
00:27:00,559 --> 00:27:02,720
easier to just start with a few million

676
00:27:02,720 --> 00:27:06,520
urls instead

677
00:27:08,000 --> 00:27:09,679
okay so we have a tool

678
00:27:09,679 --> 00:27:11,679
and we have a list of endpoints are we

679
00:27:11,679 --> 00:27:15,919
done yet not quite unfortunately um

680
00:27:15,919 --> 00:27:18,159
there's still some difficulties as was

681
00:27:18,159 --> 00:27:21,039
experienced during this testing

682
00:27:21,039 --> 00:27:22,720
if you've used a tool

683
00:27:22,720 --> 00:27:25,520
like mass scan or nmap often when you're

684
00:27:25,520 --> 00:27:27,200
doing a port scan you're using ip

685
00:27:27,200 --> 00:27:28,320
addresses

686
00:27:28,320 --> 00:27:30,640
now in this case we are not using ip

687
00:27:30,640 --> 00:27:33,600
addresses we are using domain names

688
00:27:33,600 --> 00:27:35,919
which means in order to get the ip

689
00:27:35,919 --> 00:27:37,840
address of the endpoint which is what

690
00:27:37,840 --> 00:27:39,679
the computers actually need to talk to

691
00:27:39,679 --> 00:27:41,919
each other we need to perform a dns

692
00:27:41,919 --> 00:27:43,039
lookup

693
00:27:43,039 --> 00:27:45,440
and if we have a list of millions of

694
00:27:45,440 --> 00:27:47,840
domains we're going to need a lot of dns

695
00:27:47,840 --> 00:27:49,039
lookups

696
00:27:49,039 --> 00:27:51,279
and that process can be a bottleneck

697
00:27:51,279 --> 00:27:52,320
so

698
00:27:52,320 --> 00:27:54,080
during this testing it was discovered

699
00:27:54,080 --> 00:27:56,000
that a lot of dns servers do have a rate

700
00:27:56,000 --> 00:27:58,960
limit you can partially solve this issue

701
00:27:58,960 --> 00:28:01,440
by using multiple dns servers the

702
00:28:01,440 --> 00:28:03,919
details of that are in the repository

703
00:28:03,919 --> 00:28:05,520
documentation

704
00:28:05,520 --> 00:28:07,520
and additionally one way to speed things

705
00:28:07,520 --> 00:28:11,039
up is that z grab 2 actually allows dns

706
00:28:11,039 --> 00:28:12,720
lookup beforehand

707
00:28:12,720 --> 00:28:14,080
so you can use

708
00:28:14,080 --> 00:28:17,520
a purpose-built tool for

709
00:28:17,520 --> 00:28:20,080
looking at dns servers and then provide

710
00:28:20,080 --> 00:28:22,880
the outputs of that tool to z-grab

711
00:28:22,880 --> 00:28:24,320
which will save time later in the

712
00:28:24,320 --> 00:28:25,600
process

713
00:28:25,600 --> 00:28:27,679
and an additional note here is that the

714
00:28:27,679 --> 00:28:30,559
dns lookup process took about half the

715
00:28:30,559 --> 00:28:33,600
time of the total scan

716
00:28:33,600 --> 00:28:36,480
so if you do run this process beforehand

717
00:28:36,480 --> 00:28:39,039
you can cut your scans in half in terms

718
00:28:39,039 --> 00:28:40,799
of duration

719
00:28:40,799 --> 00:28:42,080
okay

720
00:28:42,080 --> 00:28:43,679
dns lookups

721
00:28:43,679 --> 00:28:44,720
solved

722
00:28:44,720 --> 00:28:47,200
next step is getting a word list of

723
00:28:47,200 --> 00:28:49,760
likely websocket paths

724
00:28:49,760 --> 00:28:51,039
now

725
00:28:51,039 --> 00:28:53,440
there is no word list that you can just

726
00:28:53,440 --> 00:28:55,279
download for this because again this

727
00:28:55,279 --> 00:28:56,880
this process hasn't really been done

728
00:28:56,880 --> 00:28:57,919
before

729
00:28:57,919 --> 00:29:00,640
so this word list was gathered manually

730
00:29:00,640 --> 00:29:03,120
through say random browsing

731
00:29:03,120 --> 00:29:04,720
looking for bug bounty reports

732
00:29:04,720 --> 00:29:06,480
mentioning websockets

733
00:29:06,480 --> 00:29:08,799
looking at github repositories that have

734
00:29:08,799 --> 00:29:11,200
a lot of websocket endpoints

735
00:29:11,200 --> 00:29:12,960
and after going through all this manual

736
00:29:12,960 --> 00:29:15,840
process we can finally find likely

737
00:29:15,840 --> 00:29:18,720
locations where websockets exist and

738
00:29:18,720 --> 00:29:22,200
automate the process

739
00:29:26,159 --> 00:29:28,559
so finally i'd like to present the first

740
00:29:28,559 --> 00:29:30,559
large scale data set

741
00:29:30,559 --> 00:29:33,840
of uh websocket endpoint discovery

742
00:29:33,840 --> 00:29:34,720
and

743
00:29:34,720 --> 00:29:37,520
this sort of this table demonstrates the

744
00:29:37,520 --> 00:29:39,760
word list used to

745
00:29:39,760 --> 00:29:43,039
attempt to find the websocket endpoints

746
00:29:43,039 --> 00:29:44,559
as you can see the numbers speak for

747
00:29:44,559 --> 00:29:46,480
themselves where the most likely

748
00:29:46,480 --> 00:29:48,240
locations are

749
00:29:48,240 --> 00:29:50,159
it does appear that just on the home

750
00:29:50,159 --> 00:29:52,559
page of a website

751
00:29:52,559 --> 00:29:55,200
without any additional path is actually

752
00:29:55,200 --> 00:29:56,640
the most likely location to find a

753
00:29:56,640 --> 00:29:57,840
websocket

754
00:29:57,840 --> 00:30:01,360
followed by the slash ws path

755
00:30:01,360 --> 00:30:04,080
i will say that the reason

756
00:30:04,080 --> 00:30:06,000
or

757
00:30:06,000 --> 00:30:07,360
most the

758
00:30:07,360 --> 00:30:10,080
top visited websites will not have this

759
00:30:10,080 --> 00:30:12,480
configuration because those websites are

760
00:30:12,480 --> 00:30:14,320
much larger they can locate their

761
00:30:14,320 --> 00:30:16,720
websockets in other places perhaps more

762
00:30:16,720 --> 00:30:18,159
hidden

763
00:30:18,159 --> 00:30:20,720
so most likely the large numbers for

764
00:30:20,720 --> 00:30:22,640
these first few results come from

765
00:30:22,640 --> 00:30:24,720
smaller websites

766
00:30:24,720 --> 00:30:26,559
and again the data set is about three

767
00:30:26,559 --> 00:30:28,640
million domains that were scanned and

768
00:30:28,640 --> 00:30:30,720
the total of 12

769
00:30:30,720 --> 00:30:32,240
819

770
00:30:32,240 --> 00:30:33,840
websocket servers

771
00:30:33,840 --> 00:30:35,279
doesn't mean these are all unique

772
00:30:35,279 --> 00:30:36,960
servers because there is some

773
00:30:36,960 --> 00:30:39,760
duplication among the results

774
00:30:39,760 --> 00:30:42,080
but if we do the quick math of assuming

775
00:30:42,080 --> 00:30:44,840
those are unique it's about

776
00:30:44,840 --> 00:30:48,880
0.4 percent of websites or of domains

777
00:30:48,880 --> 00:30:51,600
that have a websocket endpoint

778
00:30:51,600 --> 00:30:53,360
and that's most likely a low estimate

779
00:30:53,360 --> 00:30:56,399
because again we're simply brute forcing

780
00:30:56,399 --> 00:30:58,640
less than a dozen endpoint paths right

781
00:30:58,640 --> 00:30:59,679
here

782
00:30:59,679 --> 00:31:01,840
to try and find the websockets so

783
00:31:01,840 --> 00:31:03,120
there's almost certainly many more

784
00:31:03,120 --> 00:31:05,440
hiding out there that we have not yet

785
00:31:05,440 --> 00:31:07,519
found

786
00:31:07,519 --> 00:31:08,480
okay

787
00:31:08,480 --> 00:31:10,720
that concludes the discussion of the

788
00:31:10,720 --> 00:31:12,480
discovery process

789
00:31:12,480 --> 00:31:13,600
we now

790
00:31:13,600 --> 00:31:15,600
can say we can go out and we can grab a

791
00:31:15,600 --> 00:31:18,880
list of websocket endpoints to analyze

792
00:31:18,880 --> 00:31:20,960
great

793
00:31:20,960 --> 00:31:23,760
and i have a quick demo video here

794
00:31:23,760 --> 00:31:26,240
i hope the demo gods will play nice

795
00:31:26,240 --> 00:31:28,559
today

796
00:31:28,559 --> 00:31:31,519
so we're in the stews repository we're

797
00:31:31,519 --> 00:31:33,919
going to the discovery folder

798
00:31:33,919 --> 00:31:37,120
and we run the tool

799
00:31:38,000 --> 00:31:40,480
and there we go we have results

800
00:31:40,480 --> 00:31:43,200
now these results are gathered from

801
00:31:43,200 --> 00:31:46,240
a file provided of known end points so

802
00:31:46,240 --> 00:31:47,760
we would expect

803
00:31:47,760 --> 00:31:50,000
to find websocket servers among these

804
00:31:50,000 --> 00:31:51,440
known endpoints

805
00:31:51,440 --> 00:31:54,720
and the 101 being printed out indicates

806
00:31:54,720 --> 00:31:58,320
the http status code which is uh

807
00:31:58,320 --> 00:32:01,279
most likely indicative of a websocket

808
00:32:01,279 --> 00:32:03,679
server

809
00:32:04,399 --> 00:32:05,519
great

810
00:32:05,519 --> 00:32:07,760
so that's just a very brief demo again

811
00:32:07,760 --> 00:32:09,760
the tool is online you can play with it

812
00:32:09,760 --> 00:32:11,440
yourself you can plug in your own

813
00:32:11,440 --> 00:32:16,320
domains uh sub domains you name it

814
00:32:21,039 --> 00:32:24,480
great now on to the next stage

815
00:32:24,480 --> 00:32:27,039
websockets fingerprinting

816
00:32:27,039 --> 00:32:28,559
so the challenge is to find

817
00:32:28,559 --> 00:32:30,960
implementation level differences between

818
00:32:30,960 --> 00:32:33,120
these websocket servers to try and

819
00:32:33,120 --> 00:32:34,640
identify them

820
00:32:34,640 --> 00:32:36,399
so for example if you've done this with

821
00:32:36,399 --> 00:32:39,840
http you might use an http header in the

822
00:32:39,840 --> 00:32:43,360
server response that says nginx or

823
00:32:43,360 --> 00:32:45,279
whatever other server is running

824
00:32:45,279 --> 00:32:47,679
now sometimes this does exist for

825
00:32:47,679 --> 00:32:49,440
websocket servers

826
00:32:49,440 --> 00:32:52,559
but often if the server is hardened that

827
00:32:52,559 --> 00:32:55,039
header is removed and you have to be a

828
00:32:55,039 --> 00:32:57,120
bit more clever with how you detect the

829
00:32:57,120 --> 00:32:58,559
server

830
00:32:58,559 --> 00:32:59,919
now in theory

831
00:32:59,919 --> 00:33:01,919
this this process shouldn't really be

832
00:33:01,919 --> 00:33:04,640
that easy or even possible because in

833
00:33:04,640 --> 00:33:06,000
theory everyone is following the

834
00:33:06,000 --> 00:33:07,679
websocket standard

835
00:33:07,679 --> 00:33:09,039
but as we know the great thing with

836
00:33:09,039 --> 00:33:11,440
standards is there's so many of them and

837
00:33:11,440 --> 00:33:13,360
additionally there's a lot of portions

838
00:33:13,360 --> 00:33:16,080
of the websocket standard that

839
00:33:16,080 --> 00:33:17,679
are not really covered in the standard

840
00:33:17,679 --> 00:33:21,200
but occur in the implementation process

841
00:33:21,200 --> 00:33:25,840
often through non-standardized means

842
00:33:26,559 --> 00:33:27,919
now just to

843
00:33:27,919 --> 00:33:29,440
remind

844
00:33:29,440 --> 00:33:31,360
the audience of some of the top

845
00:33:31,360 --> 00:33:33,600
websocket server names

846
00:33:33,600 --> 00:33:35,360
this shows also that these

847
00:33:35,360 --> 00:33:36,640
implementations are in different

848
00:33:36,640 --> 00:33:38,559
programming languages

849
00:33:38,559 --> 00:33:41,039
these are just a few of the websocket

850
00:33:41,039 --> 00:33:43,760
servers but there's dozens out there and

851
00:33:43,760 --> 00:33:47,039
as we covered earlier there isn't really

852
00:33:47,039 --> 00:33:48,799
say top three servers that are the

853
00:33:48,799 --> 00:33:50,799
leading market share among all websocket

854
00:33:50,799 --> 00:33:52,559
servers it does seem like things are a

855
00:33:52,559 --> 00:33:54,000
bit more mixed

856
00:33:54,000 --> 00:33:56,320
in terms of many servers existing on on

857
00:33:56,320 --> 00:33:57,440
the internet

858
00:33:57,440 --> 00:33:58,240
so

859
00:33:58,240 --> 00:34:01,279
we have some work ahead

860
00:34:02,720 --> 00:34:03,600
so

861
00:34:03,600 --> 00:34:05,840
if we compare the stu's fingerprinting

862
00:34:05,840 --> 00:34:07,360
tool with other

863
00:34:07,360 --> 00:34:09,679
fingerprinting tools

864
00:34:09,679 --> 00:34:11,839
pretty much all http fingerprinting

865
00:34:11,839 --> 00:34:14,960
tools only have to handle http

866
00:34:14,960 --> 00:34:16,879
but in this case remember that

867
00:34:16,879 --> 00:34:20,399
websockets actually start using http

868
00:34:20,399 --> 00:34:23,119
before the websocket protocol is used

869
00:34:23,119 --> 00:34:24,239
so that means that the stews

870
00:34:24,239 --> 00:34:26,239
fingerprinting tool actually is handling

871
00:34:26,239 --> 00:34:28,320
two different protocols

872
00:34:28,320 --> 00:34:31,440
for the fingerprinting process

873
00:34:31,440 --> 00:34:33,040
and then the second difference is that

874
00:34:33,040 --> 00:34:36,480
tools like nmap or others

875
00:34:36,480 --> 00:34:38,879
can actually query different url paths

876
00:34:38,879 --> 00:34:40,560
to try and figure out what's going on

877
00:34:40,560 --> 00:34:42,159
with the back end

878
00:34:42,159 --> 00:34:42,960
so

879
00:34:42,960 --> 00:34:45,359
perhaps an error page will actually tell

880
00:34:45,359 --> 00:34:48,480
you what the name of the server is

881
00:34:48,480 --> 00:34:50,719
but keep in mind that websocket servers

882
00:34:50,719 --> 00:34:53,440
are usually only at a specific url path

883
00:34:53,440 --> 00:34:56,000
so we can't really do that we can't

884
00:34:56,000 --> 00:34:58,560
navigate it like a website it's just one

885
00:34:58,560 --> 00:35:00,480
url path and that's pretty much all

886
00:35:00,480 --> 00:35:01,520
you've got

887
00:35:01,520 --> 00:35:02,720
so

888
00:35:02,720 --> 00:35:06,480
less information we can gather there

889
00:35:07,119 --> 00:35:10,000
in order to actually find out how

890
00:35:10,000 --> 00:35:12,240
websocket server implementations are

891
00:35:12,240 --> 00:35:15,520
different and find identifying features

892
00:35:15,520 --> 00:35:18,240
i used a simple deterministic buzzer to

893
00:35:18,240 --> 00:35:20,079
test different parts of the websocket

894
00:35:20,079 --> 00:35:21,119
frame

895
00:35:21,119 --> 00:35:22,640
different features of the websocket

896
00:35:22,640 --> 00:35:23,599
server

897
00:35:23,599 --> 00:35:25,760
and this lists a few if you want the

898
00:35:25,760 --> 00:35:28,880
details check out the tool documentation

899
00:35:28,880 --> 00:35:31,119
but for instance uh

900
00:35:31,119 --> 00:35:33,760
websocket protocol version number can be

901
00:35:33,760 --> 00:35:35,839
changed and sometimes certain

902
00:35:35,839 --> 00:35:37,839
implementations will support

903
00:35:37,839 --> 00:35:39,440
version number eight

904
00:35:39,440 --> 00:35:41,760
or version number seven in addition to

905
00:35:41,760 --> 00:35:44,240
the most recent one which is version 13

906
00:35:44,240 --> 00:35:46,000
but others will not

907
00:35:46,000 --> 00:35:47,520
additionally there is reserved and

908
00:35:47,520 --> 00:35:49,760
opcode bits this is

909
00:35:49,760 --> 00:35:52,000
the closest equivalent to a header that

910
00:35:52,000 --> 00:35:54,320
you have in a websocket frame and if you

911
00:35:54,320 --> 00:35:56,560
set these special bits

912
00:35:56,560 --> 00:35:58,400
servers react in different ways

913
00:35:58,400 --> 00:36:01,040
most often with an error message which

914
00:36:01,040 --> 00:36:02,960
can be rather verbose and actually give

915
00:36:02,960 --> 00:36:04,800
you information on what's going on back

916
00:36:04,800 --> 00:36:06,000
there

917
00:36:06,000 --> 00:36:07,119
the last

918
00:36:07,119 --> 00:36:09,119
identifying feature mentioned here is

919
00:36:09,119 --> 00:36:11,119
the maximum data length

920
00:36:11,119 --> 00:36:12,400
so by default

921
00:36:12,400 --> 00:36:14,880
a lot of these servers have a maximum

922
00:36:14,880 --> 00:36:17,040
length of the websocket frame

923
00:36:17,040 --> 00:36:19,280
built into the source code and of course

924
00:36:19,280 --> 00:36:22,320
this value can be modified but again

925
00:36:22,320 --> 00:36:24,640
often it is not and that could be used

926
00:36:24,640 --> 00:36:27,599
as an identifying feature

927
00:36:27,599 --> 00:36:29,440
i'm not going any further into the

928
00:36:29,440 --> 00:36:31,520
details because there's actually 50 or

929
00:36:31,520 --> 00:36:34,160
over 50 different tests used for this

930
00:36:34,160 --> 00:36:35,920
fingerprinting tool

931
00:36:35,920 --> 00:36:38,240
i've split them up into seven categories

932
00:36:38,240 --> 00:36:39,839
if you will

933
00:36:39,839 --> 00:36:41,680
and this gives a little more detail on

934
00:36:41,680 --> 00:36:43,680
what's actually going on with each one

935
00:36:43,680 --> 00:36:46,000
and on the far right you can see

936
00:36:46,000 --> 00:36:47,680
we're actually dealing with both the

937
00:36:47,680 --> 00:36:50,800
websocket protocol and the http protocol

938
00:36:50,800 --> 00:36:52,480
in an attempt to fingerprint these

939
00:36:52,480 --> 00:36:55,480
servers

940
00:36:56,400 --> 00:36:58,079
i've zoomed in on a single test case

941
00:36:58,079 --> 00:37:00,480
here just to show you

942
00:37:00,480 --> 00:37:02,000
the differences between different

943
00:37:02,000 --> 00:37:03,520
implementations

944
00:37:03,520 --> 00:37:05,839
so here we're looking at test case 200

945
00:37:05,839 --> 00:37:08,800
of the stews fingerprinting tool and on

946
00:37:08,800 --> 00:37:10,240
the far left we see the names of the

947
00:37:10,240 --> 00:37:12,560
websocket servers and on the right we

948
00:37:12,560 --> 00:37:14,560
see the error messages given by each

949
00:37:14,560 --> 00:37:15,680
server

950
00:37:15,680 --> 00:37:18,000
now again these are default values they

951
00:37:18,000 --> 00:37:19,599
may be changed in different

952
00:37:19,599 --> 00:37:21,200
implementations

953
00:37:21,200 --> 00:37:23,760
but frequently it was found on these

954
00:37:23,760 --> 00:37:26,079
public servers on the internet a lot of

955
00:37:26,079 --> 00:37:28,240
the default error messages remain

956
00:37:28,240 --> 00:37:29,520
unchanged

957
00:37:29,520 --> 00:37:31,599
and this alone as you can see

958
00:37:31,599 --> 00:37:34,079
these are very distinct error messages

959
00:37:34,079 --> 00:37:37,200
for each implementation and this single

960
00:37:37,200 --> 00:37:38,800
test case alone might be able to tell

961
00:37:38,800 --> 00:37:42,800
you what's going on on the back end

962
00:37:43,839 --> 00:37:47,280
okay we have a demo

963
00:37:47,280 --> 00:37:51,359
now this demo is of a local server

964
00:37:51,359 --> 00:37:53,599
so we're in the stews repository we go

965
00:37:53,599 --> 00:37:55,599
to the fingerprint directory

966
00:37:55,599 --> 00:37:57,520
and let's look at the help file real

967
00:37:57,520 --> 00:37:58,960
quick

968
00:37:58,960 --> 00:38:01,760
we have some documentation

969
00:38:01,760 --> 00:38:02,800
and

970
00:38:02,800 --> 00:38:05,040
this command here is going to test our

971
00:38:05,040 --> 00:38:06,880
local server

972
00:38:06,880 --> 00:38:10,160
with some of the test cases

973
00:38:13,200 --> 00:38:14,480
some of these take

974
00:38:14,480 --> 00:38:16,240
a bit of time because

975
00:38:16,240 --> 00:38:17,920
there's a lot of data being sent or

976
00:38:17,920 --> 00:38:19,599
there's a timeout that we need to wait

977
00:38:19,599 --> 00:38:21,760
for

978
00:38:22,480 --> 00:38:23,920
and at the end here we have a lot of

979
00:38:23,920 --> 00:38:26,000
data which is showing the fingerprint

980
00:38:26,000 --> 00:38:28,560
information and we also have

981
00:38:28,560 --> 00:38:30,560
an answer for the most likely server

982
00:38:30,560 --> 00:38:32,880
which in this case is gorilla

983
00:38:32,880 --> 00:38:36,240
with a very good match

984
00:38:37,040 --> 00:38:39,280
now here we're going to

985
00:38:39,280 --> 00:38:41,359
run the tool again on the same local

986
00:38:41,359 --> 00:38:44,800
server but now i've disabled the debug

987
00:38:44,800 --> 00:38:47,119
output so things are at least a bit

988
00:38:47,119 --> 00:38:48,800
cleaner

989
00:38:48,800 --> 00:38:50,720
and we're just going to get the results

990
00:38:50,720 --> 00:38:52,400
at the end of the test

991
00:38:52,400 --> 00:38:56,560
which are the same as before

992
00:38:57,119 --> 00:38:59,440
very good

993
00:38:59,440 --> 00:39:02,160
so that was a local server

994
00:39:02,160 --> 00:39:04,400
but of course we want the exciting stuff

995
00:39:04,400 --> 00:39:06,800
we want a public server on the internet

996
00:39:06,800 --> 00:39:08,160
so we have

997
00:39:08,160 --> 00:39:10,879
another demo

998
00:39:11,200 --> 00:39:14,800
so using that known endpoints uh file

999
00:39:14,800 --> 00:39:16,960
from the discovery portion of the tool

1000
00:39:16,960 --> 00:39:18,960
uh we can scan one of those

1001
00:39:18,960 --> 00:39:22,079
urls because uh those urls specifically

1002
00:39:22,079 --> 00:39:24,000
were chosen because they have bug bounty

1003
00:39:24,000 --> 00:39:26,640
programs so in theory we should be okay

1004
00:39:26,640 --> 00:39:29,839
okay testing on them

1005
00:39:39,440 --> 00:39:41,119
so here we're seeing some slightly

1006
00:39:41,119 --> 00:39:44,400
different messages from the server

1007
00:39:44,400 --> 00:39:47,280
and that's likely because it's a custom

1008
00:39:47,280 --> 00:39:49,200
implementation of some sort on the back

1009
00:39:49,200 --> 00:39:51,520
end for at least parts

1010
00:39:51,520 --> 00:39:54,000
of the communication

1011
00:39:54,000 --> 00:39:55,760
and keep in mind here we don't actually

1012
00:39:55,760 --> 00:39:57,280
know what's going on with the backend

1013
00:39:57,280 --> 00:40:00,800
server so this is our best guess

1014
00:40:01,040 --> 00:40:03,280
so up here if we see the fingerprint

1015
00:40:03,280 --> 00:40:06,400
received and if we look at some of these

1016
00:40:06,400 --> 00:40:08,000
outputs we can actually see that there

1017
00:40:08,000 --> 00:40:08,720
is

1018
00:40:08,720 --> 00:40:10,960
say for test case 200 which is the one

1019
00:40:10,960 --> 00:40:14,720
we had a an example of in the slides

1020
00:40:14,720 --> 00:40:17,839
unexpected reserved bits

1021
00:40:17,839 --> 00:40:19,440
0x10

1022
00:40:19,440 --> 00:40:21,680
and for the most likely fingerprint

1023
00:40:21,680 --> 00:40:24,560
which is gorilla for test case 200 we

1024
00:40:24,560 --> 00:40:27,119
have unexpected reserve bits

1025
00:40:27,119 --> 00:40:28,640
0x10

1026
00:40:28,640 --> 00:40:31,520
so again just a single test case alone

1027
00:40:31,520 --> 00:40:34,319
is likely an indicator of what's going

1028
00:40:34,319 --> 00:40:36,400
on with the backend server

1029
00:40:36,400 --> 00:40:38,800
and this information can tell us what

1030
00:40:38,800 --> 00:40:40,960
programming language the backend server

1031
00:40:40,960 --> 00:40:44,079
team likes to use um we can perhaps

1032
00:40:44,079 --> 00:40:46,000
check if there's cves on this specific

1033
00:40:46,000 --> 00:40:48,160
server and uh

1034
00:40:48,160 --> 00:40:49,760
it's just a lot more information than we

1035
00:40:49,760 --> 00:40:51,200
had previously

1036
00:40:51,200 --> 00:40:52,640
i would like to mention that the

1037
00:40:52,640 --> 00:40:54,400
matching percentage here

1038
00:40:54,400 --> 00:40:56,160
don't put too much faith into it it's a

1039
00:40:56,160 --> 00:40:57,839
very simple algorithm that should

1040
00:40:57,839 --> 00:41:02,078
probably be improved in the long run

1041
00:41:02,480 --> 00:41:06,240
okay so we have fingerprinting um

1042
00:41:06,240 --> 00:41:09,280
we can see the output of the fingerprint

1043
00:41:09,280 --> 00:41:11,680
you can also add new fingerprints if you

1044
00:41:11,680 --> 00:41:13,760
have servers that you know what's

1045
00:41:13,760 --> 00:41:15,599
running on the back end and you want to

1046
00:41:15,599 --> 00:41:18,560
integrate it into the tool

1047
00:41:18,560 --> 00:41:19,680
and then we can run the stu's

1048
00:41:19,680 --> 00:41:21,599
fingerprinter and get some information

1049
00:41:21,599 --> 00:41:23,440
about what's actually going on with

1050
00:41:23,440 --> 00:41:25,520
these servers that previously we

1051
00:41:25,520 --> 00:41:27,280
possibly couldn't even discover them in

1052
00:41:27,280 --> 00:41:29,839
the first place

1053
00:41:33,680 --> 00:41:36,400
now we are at the final stage of what

1054
00:41:36,400 --> 00:41:39,760
the stews tool can offer um websocket

1055
00:41:39,760 --> 00:41:42,079
vulnerability detection

1056
00:41:42,079 --> 00:41:44,000
so these websocket servers that are out

1057
00:41:44,000 --> 00:41:46,640
there they have a few cves

1058
00:41:46,640 --> 00:41:49,440
you can see this table a few but there's

1059
00:41:49,440 --> 00:41:51,839
actually a longer list in the repository

1060
00:41:51,839 --> 00:41:53,839
the websocket security awesome which

1061
00:41:53,839 --> 00:41:56,800
again is released today with this talk

1062
00:41:56,800 --> 00:41:58,319
so if you want more information you can

1063
00:41:58,319 --> 00:42:00,880
go there i also have links in that table

1064
00:42:00,880 --> 00:42:01,599
to

1065
00:42:01,599 --> 00:42:04,000
the package that's vulnerable and some

1066
00:42:04,000 --> 00:42:05,440
of the write-ups that you can get

1067
00:42:05,440 --> 00:42:08,079
sometimes with proof-of-concept code for

1068
00:42:08,079 --> 00:42:11,280
checking if it's vulnerable

1069
00:42:12,000 --> 00:42:15,280
okay so if we're trying to detect if a

1070
00:42:15,280 --> 00:42:17,599
websocket server is vulnerable

1071
00:42:17,599 --> 00:42:19,920
ideally we would have a way to test this

1072
00:42:19,920 --> 00:42:22,000
without actually using

1073
00:42:22,000 --> 00:42:23,280
any exploit

1074
00:42:23,280 --> 00:42:25,040
but unfortunately at least for some

1075
00:42:25,040 --> 00:42:27,839
vulnerabilities there aren't really many

1076
00:42:27,839 --> 00:42:31,119
other good ways to check for this

1077
00:42:31,119 --> 00:42:33,119
currently the stu's vulnerability

1078
00:42:33,119 --> 00:42:35,520
detection tool only includes a few

1079
00:42:35,520 --> 00:42:38,079
checks for a few cves

1080
00:42:38,079 --> 00:42:40,000
and in fact most of these are

1081
00:42:40,000 --> 00:42:44,000
regex denial of service vulnerabilities

1082
00:42:44,000 --> 00:42:46,400
the cvs listed here

1083
00:42:46,400 --> 00:42:48,400
and hopefully we'll add more of these in

1084
00:42:48,400 --> 00:42:49,920
the future

1085
00:42:49,920 --> 00:42:51,920
now i'm not going to go into detail much

1086
00:42:51,920 --> 00:42:53,839
more on this part of the tool

1087
00:42:53,839 --> 00:42:56,319
in theory my hope is that if some of

1088
00:42:56,319 --> 00:42:58,400
these other top web security tools

1089
00:42:58,400 --> 00:43:01,760
integrate websockets into their

1090
00:43:01,760 --> 00:43:04,880
tool set uh this vulnerability detection

1091
00:43:04,880 --> 00:43:07,040
portion of the stews tool set will

1092
00:43:07,040 --> 00:43:08,720
probably be the first thing those other

1093
00:43:08,720 --> 00:43:11,280
tools implement um so let's hope that

1094
00:43:11,280 --> 00:43:15,119
they get to that stage

1095
00:43:15,280 --> 00:43:17,839
now again we're in the stu's repository

1096
00:43:17,839 --> 00:43:20,880
here we go into the vulnera vuln detect

1097
00:43:20,880 --> 00:43:22,079
directory

1098
00:43:22,079 --> 00:43:24,000
and we can see the help file giving us

1099
00:43:24,000 --> 00:43:26,560
some information what we can do

1100
00:43:26,560 --> 00:43:28,240
and we're going to run this test on a

1101
00:43:28,240 --> 00:43:29,520
local server

1102
00:43:29,520 --> 00:43:32,480
first one that's not vulnerable to any

1103
00:43:32,480 --> 00:43:34,319
cves

1104
00:43:34,319 --> 00:43:35,680
and here we're only testing for a

1105
00:43:35,680 --> 00:43:37,680
specific cve

1106
00:43:37,680 --> 00:43:41,280
and then we run it on a local server but

1107
00:43:41,280 --> 00:43:43,839
it appears is vulnerable

1108
00:43:43,839 --> 00:43:44,800
so

1109
00:43:44,800 --> 00:43:47,520
we get uh

1110
00:43:48,400 --> 00:43:50,480
a negative result for the first and a

1111
00:43:50,480 --> 00:43:52,480
positive for the second or vice versa

1112
00:43:52,480 --> 00:43:55,040
depending how you look at it and we can

1113
00:43:55,040 --> 00:43:56,319
in theory

1114
00:43:56,319 --> 00:43:58,640
state that the second server is in fact

1115
00:43:58,640 --> 00:44:02,078
vulnerable to the cve

1116
00:44:06,839 --> 00:44:10,000
okay wrapping up a few minutes early

1117
00:44:10,000 --> 00:44:12,319
luckily um so a quick summary of this

1118
00:44:12,319 --> 00:44:15,520
talk uh in part one we talked about how

1119
00:44:15,520 --> 00:44:19,359
websockets work similarly to http

1120
00:44:19,359 --> 00:44:22,079
but they're designed for lower overhead

1121
00:44:22,079 --> 00:44:23,839
real-time communication

1122
00:44:23,839 --> 00:44:26,160
and they're also less examined

1123
00:44:26,160 --> 00:44:28,319
at least in the security world possibly

1124
00:44:28,319 --> 00:44:30,319
because they're harder to find at least

1125
00:44:30,319 --> 00:44:31,760
until today

1126
00:44:31,760 --> 00:44:33,520
part two

1127
00:44:33,520 --> 00:44:35,839
we discussed the past security research

1128
00:44:35,839 --> 00:44:38,800
on websockets and the takeaways were

1129
00:44:38,800 --> 00:44:41,200
that there's been relatively minimal

1130
00:44:41,200 --> 00:44:44,319
research done around websocket security

1131
00:44:44,319 --> 00:44:46,720
at least when compared to other portions

1132
00:44:46,720 --> 00:44:49,520
of uh web app security

1133
00:44:49,520 --> 00:44:51,599
unfortunately it does appear too that

1134
00:44:51,599 --> 00:44:54,640
popular tools for web security lack

1135
00:44:54,640 --> 00:44:58,160
support for customized websocket testing

1136
00:44:58,160 --> 00:45:00,480
hopefully that will change

1137
00:45:00,480 --> 00:45:02,240
and then in part three we went through

1138
00:45:02,240 --> 00:45:04,880
the features of the stews toolset which

1139
00:45:04,880 --> 00:45:07,520
is released as of today

1140
00:45:07,520 --> 00:45:09,680
and saw how the toolset now provides

1141
00:45:09,680 --> 00:45:12,000
off-the-shelf tooling for discovering

1142
00:45:12,000 --> 00:45:13,839
fingerprinting and detecting

1143
00:45:13,839 --> 00:45:18,599
vulnerabilities in websocket servers

1144
00:45:19,200 --> 00:45:20,880
and as if

1145
00:45:20,880 --> 00:45:24,240
we aren't uh already getting to a lot of

1146
00:45:24,240 --> 00:45:25,920
websocket security today i have some

1147
00:45:25,920 --> 00:45:27,920
ideas for any audience members who would

1148
00:45:27,920 --> 00:45:30,000
like to take this further because again

1149
00:45:30,000 --> 00:45:33,359
websocket security research has not um

1150
00:45:33,359 --> 00:45:36,000
been the most eventful of areas in the

1151
00:45:36,000 --> 00:45:37,520
security world

1152
00:45:37,520 --> 00:45:40,240
i do have many more ideas for research

1153
00:45:40,240 --> 00:45:42,400
mentioned in the white paper which again

1154
00:45:42,400 --> 00:45:44,880
is in the stu's repository but just to

1155
00:45:44,880 --> 00:45:46,640
mention a few

1156
00:45:46,640 --> 00:45:50,240
websockets the websocket protocol allows

1157
00:45:50,240 --> 00:45:52,319
for sub protocols

1158
00:45:52,319 --> 00:45:55,599
designed as within the websocket

1159
00:45:55,599 --> 00:45:57,040
protocol

1160
00:45:57,040 --> 00:45:59,119
and then additional protocols on top of

1161
00:45:59,119 --> 00:46:00,880
sockets so these really haven't been

1162
00:46:00,880 --> 00:46:02,800
explored and it might be an interesting

1163
00:46:02,800 --> 00:46:04,960
area to look at depending how frequently

1164
00:46:04,960 --> 00:46:07,200
used they are in the wild

1165
00:46:07,200 --> 00:46:09,839
second idea is that there's an

1166
00:46:09,839 --> 00:46:13,440
additional rfc 67692

1167
00:46:13,440 --> 00:46:15,839
which i believe was released in 2015 or

1168
00:46:15,839 --> 00:46:17,200
2016

1169
00:46:17,200 --> 00:46:19,520
which handles websocket compression

1170
00:46:19,520 --> 00:46:21,200
and this is

1171
00:46:21,200 --> 00:46:22,480
used by

1172
00:46:22,480 --> 00:46:24,720
this is implemented by some websocket

1173
00:46:24,720 --> 00:46:27,200
servers not all the implementations

1174
00:46:27,200 --> 00:46:28,880
support this rfc

1175
00:46:28,880 --> 00:46:29,839
but it

1176
00:46:29,839 --> 00:46:31,119
allows for

1177
00:46:31,119 --> 00:46:34,400
sending larger files over websockets and

1178
00:46:34,400 --> 00:46:37,440
because it's a newer rfc i suspect there

1179
00:46:37,440 --> 00:46:39,920
has been much less focus on looking into

1180
00:46:39,920 --> 00:46:42,800
implement implementations here

1181
00:46:42,800 --> 00:46:44,079
third idea

1182
00:46:44,079 --> 00:46:45,920
if we go back to the stu's discovery

1183
00:46:45,920 --> 00:46:47,760
tool and how it works

1184
00:46:47,760 --> 00:46:49,520
it works through brute force it's not

1185
00:46:49,520 --> 00:46:52,240
looking at a specific single domain and

1186
00:46:52,240 --> 00:46:53,920
analyzing it thoroughly

1187
00:46:53,920 --> 00:46:55,599
if we had a tool that could do that we

1188
00:46:55,599 --> 00:46:57,839
might be able to find more websocket

1189
00:46:57,839 --> 00:46:59,520
endpoints when we're only testing one

1190
00:46:59,520 --> 00:47:01,680
domain and we would also get more

1191
00:47:01,680 --> 00:47:04,079
information where websockets are hiding

1192
00:47:04,079 --> 00:47:06,079
which url paths

1193
00:47:06,079 --> 00:47:08,640
what what features they offer

1194
00:47:08,640 --> 00:47:10,640
and that would inform the stu's

1195
00:47:10,640 --> 00:47:12,960
discovery tool the brute force approach

1196
00:47:12,960 --> 00:47:15,440
by giving a better word list

1197
00:47:15,440 --> 00:47:17,920
and then lastly because as we saw

1198
00:47:17,920 --> 00:47:21,680
websockets rely on http to

1199
00:47:21,680 --> 00:47:24,160
be first initialized

1200
00:47:24,160 --> 00:47:25,520
it might be possible that these

1201
00:47:25,520 --> 00:47:28,720
websocket servers have http type

1202
00:47:28,720 --> 00:47:31,200
weaknesses that have been solved in the

1203
00:47:31,200 --> 00:47:34,800
very big name http servers like nginx or

1204
00:47:34,800 --> 00:47:36,800
apache httpd

1205
00:47:36,800 --> 00:47:38,720
we might still have those weaknesses in

1206
00:47:38,720 --> 00:47:41,599
these websocket server implementations

1207
00:47:41,599 --> 00:47:45,839
so again the whitepaper has more ideas

1208
00:47:45,839 --> 00:47:47,359
if you'd like to read more about

1209
00:47:47,359 --> 00:47:50,000
websockets beyond just what this talk

1210
00:47:50,000 --> 00:47:52,559
offers these are a few suggestions

1211
00:47:52,559 --> 00:47:55,599
and the websocket security awesome also

1212
00:47:55,599 --> 00:47:59,680
released today has a lot more links

1213
00:47:59,680 --> 00:48:02,319
and with that we've made it to the end

1214
00:48:02,319 --> 00:48:04,319
thank you very much for joining me

1215
00:48:04,319 --> 00:48:07,839
and i'll pass it back to the moderator

